
main.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:
       0:	00 50 05 20 21 3a 01 00 65 3a 01 00 65 3a 01 00     .P. !:..e:..e:..
      10:	65 3a 01 00 65 3a 01 00 65 3a 01 00 00 00 00 00     e:..e:..e:......
	...
      2c:	8d 47 00 00 65 3a 01 00 00 00 00 00 99 48 00 00     .G..e:.......H..
      3c:	d5 48 00 00 65 3a 01 00 65 3a 01 00 65 3a 01 00     .H..e:..e:..e:..
      4c:	65 3a 01 00 65 3a 01 00 65 3a 01 00 65 3a 01 00     e:..e:..e:..e:..
      5c:	65 3a 01 00 65 3a 01 00 65 3a 01 00 65 3a 01 00     e:..e:..e:..e:..
      6c:	65 3a 01 00 65 3a 01 00 65 3a 01 00 65 3a 01 00     e:..e:..e:..e:..
      7c:	65 3a 01 00 65 3a 01 00 65 3a 01 00 65 3a 01 00     e:..e:..e:..e:..
      8c:	65 3a 01 00 65 3a 01 00 65 3a 01 00 65 3a 01 00     e:..e:..e:..e:..
      9c:	65 3a 01 00 65 3a 01 00 65 3a 01 00 65 3a 01 00     e:..e:..e:..e:..
      ac:	65 3a 01 00 65 3a 01 00 65 3a 01 00 65 3a 01 00     e:..e:..e:..e:..
      bc:	65 3a 01 00 65 3a 01 00 65 3a 01 00 65 3a 01 00     e:..e:..e:..e:..
      cc:	65 3a 01 00 65 3a 01 00 65 3a 01 00 65 3a 01 00     e:..e:..e:..e:..
      dc:	65 3a 01 00 65 3a 01 00 65 3a 01 00 65 3a 01 00     e:..e:..e:..e:..
	...
     108:	5f f8 08 f1                                         _...

0000010c <__get_PSP>:
 * Return the actual process stack pointer
 */
uint32_t __get_PSP(void) __attribute__( ( naked ) );
uint32_t __get_PSP(void)
{
  uint32_t result=0;
     10c:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, psp\n\t"
     10e:	f3ef 8309 	mrs	r3, PSP
     112:	4618      	mov	r0, r3
     114:	4770      	bx	lr
     116:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     118:	4623      	mov	r3, r4
}
     11a:	4618      	mov	r0, r3

0000011c <__set_PSP>:
 * Assign the value ProcessStackPointer to the MSP
 * (process stack pointer) Cortex processor register
 */
void __set_PSP(uint32_t topOfProcStack) __attribute__( ( naked ) );
void __set_PSP(uint32_t topOfProcStack)
{
     11c:	4603      	mov	r3, r0
  __ASM volatile ("MSR psp, %0\n\t"
     11e:	f383 8809 	msr	PSP, r3
     122:	4770      	bx	lr

00000124 <__get_MSP>:
 * Cortex processor register
 */
uint32_t __get_MSP(void) __attribute__( ( naked ) );
uint32_t __get_MSP(void)
{
  uint32_t result=0;
     124:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, msp\n\t"
     126:	f3ef 8308 	mrs	r3, MSP
     12a:	4618      	mov	r0, r3
     12c:	4770      	bx	lr
     12e:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     130:	4623      	mov	r3, r4
}
     132:	4618      	mov	r0, r3

00000134 <__set_MSP>:
 * Assign the value mainStackPointer to the MSP
 * (main stack pointer) Cortex processor register
 */
void __set_MSP(uint32_t topOfMainStack) __attribute__( ( naked ) );
void __set_MSP(uint32_t topOfMainStack)
{
     134:	4603      	mov	r3, r0
  __ASM volatile ("MSR msp, %0\n\t"
     136:	f383 8808 	msr	MSP, r3
     13a:	4770      	bx	lr

0000013c <__get_BASEPRI>:
 * @return BasePriority
 *
 * Return the content of the base priority register
 */
uint32_t __get_BASEPRI(void)
{
     13c:	b480      	push	{r7}
     13e:	b083      	sub	sp, #12
     140:	af00      	add	r7, sp, #0
  uint32_t result=0;
     142:	2300      	movs	r3, #0
     144:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
     146:	f3ef 8312 	mrs	r3, BASEPRI_MAX
     14a:	607b      	str	r3, [r7, #4]
  return(result);
     14c:	687b      	ldr	r3, [r7, #4]
}
     14e:	4618      	mov	r0, r3
     150:	370c      	adds	r7, #12
     152:	46bd      	mov	sp, r7
     154:	f85d 7b04 	ldr.w	r7, [sp], #4
     158:	4770      	bx	lr
     15a:	bf00      	nop

0000015c <__set_BASEPRI>:
 * @param  basePri  BasePriority
 *
 * Set the base priority register
 */
void __set_BASEPRI(uint32_t value)
{
     15c:	b480      	push	{r7}
     15e:	b083      	sub	sp, #12
     160:	af00      	add	r7, sp, #0
     162:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) );
     164:	687b      	ldr	r3, [r7, #4]
     166:	f383 8811 	msr	BASEPRI, r3
}
     16a:	370c      	adds	r7, #12
     16c:	46bd      	mov	sp, r7
     16e:	f85d 7b04 	ldr.w	r7, [sp], #4
     172:	4770      	bx	lr

00000174 <__get_PRIMASK>:
 * @return PriMask
 *
 * Return state of the priority mask bit from the priority mask register
 */
uint32_t __get_PRIMASK(void)
{
     174:	b480      	push	{r7}
     176:	b083      	sub	sp, #12
     178:	af00      	add	r7, sp, #0
  uint32_t result=0;
     17a:	2300      	movs	r3, #0
     17c:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     17e:	f3ef 8310 	mrs	r3, PRIMASK
     182:	607b      	str	r3, [r7, #4]
  return(result);
     184:	687b      	ldr	r3, [r7, #4]
}
     186:	4618      	mov	r0, r3
     188:	370c      	adds	r7, #12
     18a:	46bd      	mov	sp, r7
     18c:	f85d 7b04 	ldr.w	r7, [sp], #4
     190:	4770      	bx	lr
     192:	bf00      	nop

00000194 <__set_PRIMASK>:
 * @param  priMask  PriMask
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
     194:	b480      	push	{r7}
     196:	b083      	sub	sp, #12
     198:	af00      	add	r7, sp, #0
     19a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	f383 8810 	msr	PRIMASK, r3
}
     1a2:	370c      	adds	r7, #12
     1a4:	46bd      	mov	sp, r7
     1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
     1aa:	4770      	bx	lr

000001ac <__get_FAULTMASK>:
 * @return FaultMask
 *
 * Return the content of the fault mask register
 */
uint32_t __get_FAULTMASK(void)
{
     1ac:	b480      	push	{r7}
     1ae:	b083      	sub	sp, #12
     1b0:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1b2:	2300      	movs	r3, #0
     1b4:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
     1b6:	f3ef 8313 	mrs	r3, FAULTMASK
     1ba:	607b      	str	r3, [r7, #4]
  return(result);
     1bc:	687b      	ldr	r3, [r7, #4]
}
     1be:	4618      	mov	r0, r3
     1c0:	370c      	adds	r7, #12
     1c2:	46bd      	mov	sp, r7
     1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     1c8:	4770      	bx	lr
     1ca:	bf00      	nop

000001cc <__set_FAULTMASK>:
 * @param  faultMask  faultMask value
 *
 * Set the fault mask register
 */
void __set_FAULTMASK(uint32_t faultMask)
{
     1cc:	b480      	push	{r7}
     1ce:	b083      	sub	sp, #12
     1d0:	af00      	add	r7, sp, #0
     1d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) );
     1d4:	687b      	ldr	r3, [r7, #4]
     1d6:	f383 8813 	msr	FAULTMASK, r3
}
     1da:	370c      	adds	r7, #12
     1dc:	46bd      	mov	sp, r7
     1de:	f85d 7b04 	ldr.w	r7, [sp], #4
     1e2:	4770      	bx	lr

000001e4 <__get_CONTROL>:
*  @return Control value
 *
 * Return the content of the control register
 */
uint32_t __get_CONTROL(void)
{
     1e4:	b480      	push	{r7}
     1e6:	b083      	sub	sp, #12
     1e8:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1ea:	2300      	movs	r3, #0
     1ec:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, control" : "=r" (result) );
     1ee:	f3ef 8314 	mrs	r3, CONTROL
     1f2:	607b      	str	r3, [r7, #4]
  return(result);
     1f4:	687b      	ldr	r3, [r7, #4]
}
     1f6:	4618      	mov	r0, r3
     1f8:	370c      	adds	r7, #12
     1fa:	46bd      	mov	sp, r7
     1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     200:	4770      	bx	lr
     202:	bf00      	nop

00000204 <__set_CONTROL>:
 * @param  control  Control value
 *
 * Set the control register
 */
void __set_CONTROL(uint32_t control)
{
     204:	b480      	push	{r7}
     206:	b083      	sub	sp, #12
     208:	af00      	add	r7, sp, #0
     20a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR control, %0" : : "r" (control) );
     20c:	687b      	ldr	r3, [r7, #4]
     20e:	f383 8814 	msr	CONTROL, r3
}
     212:	370c      	adds	r7, #12
     214:	46bd      	mov	sp, r7
     216:	f85d 7b04 	ldr.w	r7, [sp], #4
     21a:	4770      	bx	lr

0000021c <__REV>:
 * @return        reversed value
 *
 * Reverse byte order in integer value
 */
uint32_t __REV(uint32_t value)
{
     21c:	b480      	push	{r7}
     21e:	b085      	sub	sp, #20
     220:	af00      	add	r7, sp, #0
     222:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     224:	2300      	movs	r3, #0
     226:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
     228:	687b      	ldr	r3, [r7, #4]
     22a:	ba1b      	rev	r3, r3
     22c:	60fb      	str	r3, [r7, #12]
  return(result);
     22e:	68fb      	ldr	r3, [r7, #12]
}
     230:	4618      	mov	r0, r3
     232:	3714      	adds	r7, #20
     234:	46bd      	mov	sp, r7
     236:	f85d 7b04 	ldr.w	r7, [sp], #4
     23a:	4770      	bx	lr

0000023c <__REV16>:
 * @return        reversed value
 *
 * Reverse byte order in unsigned short value
 */
uint32_t __REV16(uint16_t value)
{
     23c:	b480      	push	{r7}
     23e:	b085      	sub	sp, #20
     240:	af00      	add	r7, sp, #0
     242:	4603      	mov	r3, r0
     244:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     246:	2300      	movs	r3, #0
     248:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
     24a:	88fb      	ldrh	r3, [r7, #6]
     24c:	ba5b      	rev16	r3, r3
     24e:	60fb      	str	r3, [r7, #12]
  return(result);
     250:	68fb      	ldr	r3, [r7, #12]
}
     252:	4618      	mov	r0, r3
     254:	3714      	adds	r7, #20
     256:	46bd      	mov	sp, r7
     258:	f85d 7b04 	ldr.w	r7, [sp], #4
     25c:	4770      	bx	lr
     25e:	bf00      	nop

00000260 <__REVSH>:
 * @return        reversed value
 *
 * Reverse byte order in signed short value with sign extension to integer
 */
int32_t __REVSH(int16_t value)
{
     260:	b480      	push	{r7}
     262:	b085      	sub	sp, #20
     264:	af00      	add	r7, sp, #0
     266:	4603      	mov	r3, r0
     268:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     26a:	2300      	movs	r3, #0
     26c:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
     26e:	88fb      	ldrh	r3, [r7, #6]
     270:	badb      	revsh	r3, r3
     272:	60fb      	str	r3, [r7, #12]
  return(result);
     274:	68fb      	ldr	r3, [r7, #12]
}
     276:	4618      	mov	r0, r3
     278:	3714      	adds	r7, #20
     27a:	46bd      	mov	sp, r7
     27c:	f85d 7b04 	ldr.w	r7, [sp], #4
     280:	4770      	bx	lr
     282:	bf00      	nop

00000284 <__RBIT>:
 * @return        reversed value
 *
 * Reverse bit order of value
 */
uint32_t __RBIT(uint32_t value)
{
     284:	b480      	push	{r7}
     286:	b085      	sub	sp, #20
     288:	af00      	add	r7, sp, #0
     28a:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     28c:	2300      	movs	r3, #0
     28e:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
     290:	687b      	ldr	r3, [r7, #4]
     292:	fa93 f3a3 	rbit	r3, r3
     296:	60fb      	str	r3, [r7, #12]
   return(result);
     298:	68fb      	ldr	r3, [r7, #12]
}
     29a:	4618      	mov	r0, r3
     29c:	3714      	adds	r7, #20
     29e:	46bd      	mov	sp, r7
     2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
     2a4:	4770      	bx	lr
     2a6:	bf00      	nop

000002a8 <__LDREXB>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 8 bit value
 */
uint8_t __LDREXB(uint8_t *addr)
{
     2a8:	b480      	push	{r7}
     2aa:	b085      	sub	sp, #20
     2ac:	af00      	add	r7, sp, #0
     2ae:	6078      	str	r0, [r7, #4]
    uint8_t result=0;
     2b0:	2300      	movs	r3, #0
     2b2:	73fb      	strb	r3, [r7, #15]

   __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) );
     2b4:	687b      	ldr	r3, [r7, #4]
     2b6:	e8d3 3f4f 	ldrexb	r3, [r3]
     2ba:	73fb      	strb	r3, [r7, #15]
   return(result);
     2bc:	7bfb      	ldrb	r3, [r7, #15]
}
     2be:	4618      	mov	r0, r3
     2c0:	3714      	adds	r7, #20
     2c2:	46bd      	mov	sp, r7
     2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     2c8:	4770      	bx	lr
     2ca:	bf00      	nop

000002cc <__LDREXH>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 16 bit values
 */
uint16_t __LDREXH(uint16_t *addr)
{
     2cc:	b480      	push	{r7}
     2ce:	b085      	sub	sp, #20
     2d0:	af00      	add	r7, sp, #0
     2d2:	6078      	str	r0, [r7, #4]
    uint16_t result=0;
     2d4:	2300      	movs	r3, #0
     2d6:	81fb      	strh	r3, [r7, #14]

   __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) );
     2d8:	687b      	ldr	r3, [r7, #4]
     2da:	e8d3 3f5f 	ldrexh	r3, [r3]
     2de:	81fb      	strh	r3, [r7, #14]
   return(result);
     2e0:	89fb      	ldrh	r3, [r7, #14]
}
     2e2:	4618      	mov	r0, r3
     2e4:	3714      	adds	r7, #20
     2e6:	46bd      	mov	sp, r7
     2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
     2ec:	4770      	bx	lr
     2ee:	bf00      	nop

000002f0 <__LDREXW>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 32 bit values
 */
uint32_t __LDREXW(uint32_t *addr)
{
     2f0:	b480      	push	{r7}
     2f2:	b085      	sub	sp, #20
     2f4:	af00      	add	r7, sp, #0
     2f6:	6078      	str	r0, [r7, #4]
    uint32_t result=0;
     2f8:	2300      	movs	r3, #0
     2fa:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     2fc:	687b      	ldr	r3, [r7, #4]
     2fe:	e853 3f00 	ldrex	r3, [r3]
     302:	60fb      	str	r3, [r7, #12]
   return(result);
     304:	68fb      	ldr	r3, [r7, #12]
}
     306:	4618      	mov	r0, r3
     308:	3714      	adds	r7, #20
     30a:	46bd      	mov	sp, r7
     30c:	f85d 7b04 	ldr.w	r7, [sp], #4
     310:	4770      	bx	lr
     312:	bf00      	nop

00000314 <__STREXW>:
 * @return        successful / failed
 *
 * Exclusive STR command for 32 bit values
 */
uint32_t __STREXW(uint32_t value, uint32_t *addr)
{
     314:	b480      	push	{r7}
     316:	b085      	sub	sp, #20
     318:	af00      	add	r7, sp, #0
     31a:	6078      	str	r0, [r7, #4]
     31c:	6039      	str	r1, [r7, #0]
   uint32_t result=0;
     31e:	2300      	movs	r3, #0
     320:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
     322:	683b      	ldr	r3, [r7, #0]
     324:	687a      	ldr	r2, [r7, #4]
     326:	e843 2300 	strex	r3, r2, [r3]
     32a:	60fb      	str	r3, [r7, #12]
   return(result);
     32c:	68fb      	ldr	r3, [r7, #12]
}
     32e:	4618      	mov	r0, r3
     330:	3714      	adds	r7, #20
     332:	46bd      	mov	sp, r7
     334:	f85d 7b04 	ldr.w	r7, [sp], #4
     338:	4770      	bx	lr
     33a:	bf00      	nop

0000033c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
     33c:	b580      	push	{r7, lr}
     33e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     344:	f2c4 0302 	movt	r3, #16386	; 0x4002
     348:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     34c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     350:	6812      	ldr	r2, [r2, #0]
     352:	f042 0201 	orr.w	r2, r2, #1
     356:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     358:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     35c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     360:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     364:	f2c4 0302 	movt	r3, #16386	; 0x4002
     368:	6859      	ldr	r1, [r3, #4]
     36a:	2300      	movs	r3, #0
     36c:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     370:	400b      	ands	r3, r1
     372:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     378:	f2c4 0302 	movt	r3, #16386	; 0x4002
     37c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     380:	f2c4 0202 	movt	r2, #16386	; 0x4002
     384:	6812      	ldr	r2, [r2, #0]
     386:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     38a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     38e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     394:	f2c4 0302 	movt	r3, #16386	; 0x4002
     398:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     39c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3a0:	6812      	ldr	r2, [r2, #0]
     3a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     3a6:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     3a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     3b4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3b8:	6852      	ldr	r2, [r2, #4]
     3ba:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     3be:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     3c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3c8:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     3cc:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
     3ce:	f000 f8a7 	bl	520 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
     3d2:	f44f 436d 	mov.w	r3, #60672	; 0xed00
     3d6:	f2ce 0300 	movt	r3, #57344	; 0xe000
     3da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
     3de:	609a      	str	r2, [r3, #8]
#endif
}
     3e0:	bd80      	pop	{r7, pc}
     3e2:	bf00      	nop

000003e4 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
     3e4:	b480      	push	{r7}
     3e6:	b085      	sub	sp, #20
     3e8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
     3ea:	2300      	movs	r3, #0
     3ec:	60fb      	str	r3, [r7, #12]
     3ee:	2300      	movs	r3, #0
     3f0:	60bb      	str	r3, [r7, #8]
     3f2:	2300      	movs	r3, #0
     3f4:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
     3f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3fe:	685b      	ldr	r3, [r3, #4]
     400:	f003 030c 	and.w	r3, r3, #12
     404:	60fb      	str	r3, [r7, #12]

  switch (tmp)
     406:	68fb      	ldr	r3, [r7, #12]
     408:	2b04      	cmp	r3, #4
     40a:	d00d      	beq.n	428 <SystemCoreClockUpdate+0x44>
     40c:	2b08      	cmp	r3, #8
     40e:	d015      	beq.n	43c <SystemCoreClockUpdate+0x58>
     410:	2b00      	cmp	r3, #0
     412:	d15b      	bne.n	4cc <SystemCoreClockUpdate+0xe8>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
     414:	f240 0300 	movw	r3, #0
     418:	f2c2 0300 	movt	r3, #8192	; 0x2000
     41c:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     420:	f2c0 027a 	movt	r2, #122	; 0x7a
     424:	601a      	str	r2, [r3, #0]
      break;
     426:	e05b      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
     428:	f240 0300 	movw	r3, #0
     42c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     430:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     434:	f2c0 027a 	movt	r2, #122	; 0x7a
     438:	601a      	str	r2, [r3, #0]
      break;
     43a:	e051      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
     43c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     440:	f2c4 0302 	movt	r3, #16386	; 0x4002
     444:	685b      	ldr	r3, [r3, #4]
     446:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     44a:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
     44c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     450:	f2c4 0302 	movt	r3, #16386	; 0x4002
     454:	685b      	ldr	r3, [r3, #4]
     456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     45a:	607b      	str	r3, [r7, #4]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     45c:	68bb      	ldr	r3, [r7, #8]
     45e:	0c9b      	lsrs	r3, r3, #18
     460:	3302      	adds	r3, #2
     462:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00)
     464:	687b      	ldr	r3, [r7, #4]
     466:	2b00      	cmp	r3, #0
     468:	d10c      	bne.n	484 <SystemCoreClockUpdate+0xa0>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
     46a:	68ba      	ldr	r2, [r7, #8]
     46c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     470:	f2c0 033d 	movt	r3, #61	; 0x3d
     474:	fb03 f202 	mul.w	r2, r3, r2
     478:	f240 0300 	movw	r3, #0
     47c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     480:	601a      	str	r2, [r3, #0]
     482:	e022      	b.n	4ca <SystemCoreClockUpdate+0xe6>
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
     484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     488:	f2c4 0302 	movt	r3, #16386	; 0x4002
     48c:	685b      	ldr	r3, [r3, #4]
     48e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     492:	2b00      	cmp	r3, #0
     494:	d00c      	beq.n	4b0 <SystemCoreClockUpdate+0xcc>
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
     496:	68ba      	ldr	r2, [r7, #8]
     498:	f44f 6310 	mov.w	r3, #2304	; 0x900
     49c:	f2c0 033d 	movt	r3, #61	; 0x3d
     4a0:	fb03 f202 	mul.w	r2, r3, r2
     4a4:	f240 0300 	movw	r3, #0
     4a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4ac:	601a      	str	r2, [r3, #0]
     4ae:	e00c      	b.n	4ca <SystemCoreClockUpdate+0xe6>
        }
        else
        {
          SystemCoreClock = HSE_VALUE * pllmull;
     4b0:	68ba      	ldr	r2, [r7, #8]
     4b2:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     4b6:	f2c0 037a 	movt	r3, #122	; 0x7a
     4ba:	fb03 f202 	mul.w	r2, r3, r2
     4be:	f240 0300 	movw	r3, #0
     4c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4c6:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2;
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     4c8:	e00a      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
     4ca:	e009      	b.n	4e0 <SystemCoreClockUpdate+0xfc>

    default:
      SystemCoreClock = HSI_VALUE;
     4cc:	f240 0300 	movw	r3, #0
     4d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4d4:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     4d8:	f2c0 027a 	movt	r2, #122	; 0x7a
     4dc:	601a      	str	r2, [r3, #0]
      break;
     4de:	bf00      	nop
  }

  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
     4e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     4e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     4e8:	685b      	ldr	r3, [r3, #4]
     4ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     4ee:	091a      	lsrs	r2, r3, #4
     4f0:	f240 0304 	movw	r3, #4
     4f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4f8:	5c9b      	ldrb	r3, [r3, r2]
     4fa:	b2db      	uxtb	r3, r3
     4fc:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
     4fe:	f240 0300 	movw	r3, #0
     502:	f2c2 0300 	movt	r3, #8192	; 0x2000
     506:	681a      	ldr	r2, [r3, #0]
     508:	68fb      	ldr	r3, [r7, #12]
     50a:	40da      	lsrs	r2, r3
     50c:	f240 0300 	movw	r3, #0
     510:	f2c2 0300 	movt	r3, #8192	; 0x2000
     514:	601a      	str	r2, [r3, #0]
}
     516:	3714      	adds	r7, #20
     518:	46bd      	mov	sp, r7
     51a:	f85d 7b04 	ldr.w	r7, [sp], #4
     51e:	4770      	bx	lr

00000520 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
     520:	b580      	push	{r7, lr}
     522:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
     524:	f000 f802 	bl	52c <SetSysClockTo72>
#endif

 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */
}
     528:	bd80      	pop	{r7, pc}
     52a:	bf00      	nop

0000052c <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
     52c:	b480      	push	{r7}
     52e:	b083      	sub	sp, #12
     530:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
     532:	2300      	movs	r3, #0
     534:	607b      	str	r3, [r7, #4]
     536:	2300      	movs	r3, #0
     538:	603b      	str	r3, [r7, #0]

  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
     53a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     53e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     542:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     546:	f2c4 0202 	movt	r2, #16386	; 0x4002
     54a:	6812      	ldr	r2, [r2, #0]
     54c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     550:	601a      	str	r2, [r3, #0]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
     552:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     556:	f2c4 0302 	movt	r3, #16386	; 0x4002
     55a:	681b      	ldr	r3, [r3, #0]
     55c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     560:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
     562:	687b      	ldr	r3, [r7, #4]
     564:	3301      	adds	r3, #1
     566:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
     568:	683b      	ldr	r3, [r7, #0]
     56a:	2b00      	cmp	r3, #0
     56c:	d103      	bne.n	576 <SetSysClockTo72+0x4a>
     56e:	687b      	ldr	r3, [r7, #4]
     570:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     574:	d1ed      	bne.n	552 <SetSysClockTo72+0x26>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
     576:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     57a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     57e:	681b      	ldr	r3, [r3, #0]
     580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     584:	2b00      	cmp	r3, #0
     586:	d002      	beq.n	58e <SetSysClockTo72+0x62>
  {
    HSEStatus = (uint32_t)0x01;
     588:	2301      	movs	r3, #1
     58a:	603b      	str	r3, [r7, #0]
     58c:	e001      	b.n	592 <SetSysClockTo72+0x66>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
     58e:	2300      	movs	r3, #0
     590:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
     592:	683b      	ldr	r3, [r7, #0]
     594:	2b01      	cmp	r3, #1
     596:	f040 8094 	bne.w	6c2 <SetSysClockTo72+0x196>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
     59a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     59e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5a6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5aa:	6812      	ldr	r2, [r2, #0]
     5ac:	f042 0210 	orr.w	r2, r2, #16
     5b0:	601a      	str	r2, [r3, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
     5b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5be:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5c2:	6812      	ldr	r2, [r2, #0]
     5c4:	f022 0203 	bic.w	r2, r2, #3
     5c8:	601a      	str	r2, [r3, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;
     5ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5d6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5da:	6812      	ldr	r2, [r2, #0]
     5dc:	f042 0202 	orr.w	r2, r2, #2
     5e0:	601a      	str	r2, [r3, #0]


    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
     5e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     5ee:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5f2:	6852      	ldr	r2, [r2, #4]
     5f4:	605a      	str	r2, [r3, #4]

    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
     5f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     602:	f2c4 0202 	movt	r2, #16386	; 0x4002
     606:	6852      	ldr	r2, [r2, #4]
     608:	605a      	str	r2, [r3, #4]

    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
     60a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     60e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     612:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     616:	f2c4 0202 	movt	r2, #16386	; 0x4002
     61a:	6852      	ldr	r2, [r2, #4]
     61c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     620:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 |
                            RCC_CFGR_PLLMULL9);
#else
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
     622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     626:	f2c4 0302 	movt	r3, #16386	; 0x4002
     62a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     62e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     632:	6852      	ldr	r2, [r2, #4]
     634:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
     638:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
     63a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     63e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     642:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     646:	f2c4 0202 	movt	r2, #16386	; 0x4002
     64a:	6852      	ldr	r2, [r2, #4]
     64c:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
     650:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
     652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     656:	f2c4 0302 	movt	r3, #16386	; 0x4002
     65a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     65e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     662:	6812      	ldr	r2, [r2, #0]
     664:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     668:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
     66a:	bf00      	nop
     66c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     670:	f2c4 0302 	movt	r3, #16386	; 0x4002
     674:	681b      	ldr	r3, [r3, #0]
     676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
     67a:	2b00      	cmp	r3, #0
     67c:	d0f6      	beq.n	66c <SetSysClockTo72+0x140>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
     67e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     682:	f2c4 0302 	movt	r3, #16386	; 0x4002
     686:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     68a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     68e:	6852      	ldr	r2, [r2, #4]
     690:	f022 0203 	bic.w	r2, r2, #3
     694:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
     696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     69a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     69e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6a2:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6a6:	6852      	ldr	r2, [r2, #4]
     6a8:	f042 0202 	orr.w	r2, r2, #2
     6ac:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
     6ae:	bf00      	nop
     6b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6b8:	685b      	ldr	r3, [r3, #4]
     6ba:	f003 030c 	and.w	r3, r3, #12
     6be:	2b08      	cmp	r3, #8
     6c0:	d1f6      	bne.n	6b0 <SetSysClockTo72+0x184>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }
}
     6c2:	370c      	adds	r7, #12
     6c4:	46bd      	mov	sp, r7
     6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
     6ca:	4770      	bx	lr
     6cc:	00013b94 	.word	0x00013b94
     6d0:	20000000 	.word	0x20000000
     6d4:	200001d4 	.word	0x200001d4
     6d8:	200001d8 	.word	0x200001d8
     6dc:	2004c014 	.word	0x2004c014

000006e0 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
     6e0:	b480      	push	{r7}
     6e2:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     6e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6f0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6f4:	6812      	ldr	r2, [r2, #0]
     6f6:	f042 0201 	orr.w	r2, r2, #1
     6fa:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     6fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     700:	f2c4 0202 	movt	r2, #16386	; 0x4002
     704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     708:	f2c4 0302 	movt	r3, #16386	; 0x4002
     70c:	6859      	ldr	r1, [r3, #4]
     70e:	2300      	movs	r3, #0
     710:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     714:	400b      	ands	r3, r1
     716:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     718:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     71c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     720:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     724:	f2c4 0202 	movt	r2, #16386	; 0x4002
     728:	6812      	ldr	r2, [r2, #0]
     72a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     72e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     732:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     738:	f2c4 0302 	movt	r3, #16386	; 0x4002
     73c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     740:	f2c4 0202 	movt	r2, #16386	; 0x4002
     744:	6812      	ldr	r2, [r2, #0]
     746:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     74a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     74c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     750:	f2c4 0302 	movt	r3, #16386	; 0x4002
     754:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     758:	f2c4 0202 	movt	r2, #16386	; 0x4002
     75c:	6852      	ldr	r2, [r2, #4]
     75e:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     762:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     768:	f2c4 0302 	movt	r3, #16386	; 0x4002
     76c:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     770:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
     772:	46bd      	mov	sp, r7
     774:	f85d 7b04 	ldr.w	r7, [sp], #4
     778:	4770      	bx	lr
     77a:	bf00      	nop

0000077c <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
     77c:	b480      	push	{r7}
     77e:	b083      	sub	sp, #12
     780:	af00      	add	r7, sp, #0
     782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
     784:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     788:	f2c4 0302 	movt	r3, #16386	; 0x4002
     78c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     790:	f2c4 0202 	movt	r2, #16386	; 0x4002
     794:	6812      	ldr	r2, [r2, #0]
     796:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     79a:	601a      	str	r2, [r3, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
     79c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ac:	6812      	ldr	r2, [r2, #0]
     7ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     7b2:	601a      	str	r2, [r3, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
     7b4:	687b      	ldr	r3, [r7, #4]
     7b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
     7ba:	d003      	beq.n	7c4 <RCC_HSEConfig+0x48>
     7bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
     7c0:	d00d      	beq.n	7de <RCC_HSEConfig+0x62>
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
      break;

    default:
      break;
     7c2:	e019      	b.n	7f8 <RCC_HSEConfig+0x7c>
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
     7c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7d0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7d4:	6812      	ldr	r2, [r2, #0]
     7d6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     7da:	601a      	str	r2, [r3, #0]
      break;
     7dc:	e00c      	b.n	7f8 <RCC_HSEConfig+0x7c>

    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
     7de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7ea:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ee:	6812      	ldr	r2, [r2, #0]
     7f0:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
     7f4:	601a      	str	r2, [r3, #0]
      break;
     7f6:	bf00      	nop

    default:
      break;
  }
}
     7f8:	370c      	adds	r7, #12
     7fa:	46bd      	mov	sp, r7
     7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     800:	4770      	bx	lr
     802:	bf00      	nop

00000804 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
     804:	b580      	push	{r7, lr}
     806:	b082      	sub	sp, #8
     808:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
     80a:	2300      	movs	r3, #0
     80c:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
     80e:	2300      	movs	r3, #0
     810:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
     812:	2300      	movs	r3, #0
     814:	71bb      	strb	r3, [r7, #6]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
     816:	2031      	movs	r0, #49	; 0x31
     818:	f000 fba2 	bl	f60 <RCC_GetFlagStatus>
     81c:	4603      	mov	r3, r0
     81e:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;
     820:	683b      	ldr	r3, [r7, #0]
     822:	3301      	adds	r3, #1
     824:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
     826:	683b      	ldr	r3, [r7, #0]
     828:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     82c:	d002      	beq.n	834 <RCC_WaitForHSEStartUp+0x30>
     82e:	79bb      	ldrb	r3, [r7, #6]
     830:	2b00      	cmp	r3, #0
     832:	d0f0      	beq.n	816 <RCC_WaitForHSEStartUp+0x12>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
     834:	2031      	movs	r0, #49	; 0x31
     836:	f000 fb93 	bl	f60 <RCC_GetFlagStatus>
     83a:	4603      	mov	r3, r0
     83c:	2b00      	cmp	r3, #0
     83e:	d002      	beq.n	846 <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
     840:	2301      	movs	r3, #1
     842:	71fb      	strb	r3, [r7, #7]
     844:	e001      	b.n	84a <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
     846:	2300      	movs	r3, #0
     848:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
     84a:	79fb      	ldrb	r3, [r7, #7]
}
     84c:	4618      	mov	r0, r3
     84e:	3708      	adds	r7, #8
     850:	46bd      	mov	sp, r7
     852:	bd80      	pop	{r7, pc}

00000854 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *   This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
     854:	b480      	push	{r7}
     856:	b085      	sub	sp, #20
     858:	af00      	add	r7, sp, #0
     85a:	4603      	mov	r3, r0
     85c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
     85e:	2300      	movs	r3, #0
     860:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
     862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     866:	f2c4 0302 	movt	r3, #16386	; 0x4002
     86a:	681b      	ldr	r3, [r3, #0]
     86c:	60fb      	str	r3, [r7, #12]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
     86e:	68fb      	ldr	r3, [r7, #12]
     870:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
     874:	60fb      	str	r3, [r7, #12]
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
     876:	79fb      	ldrb	r3, [r7, #7]
     878:	00db      	lsls	r3, r3, #3
     87a:	68fa      	ldr	r2, [r7, #12]
     87c:	4313      	orrs	r3, r2
     87e:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CR = tmpreg;
     880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     884:	f2c4 0302 	movt	r3, #16386	; 0x4002
     888:	68fa      	ldr	r2, [r7, #12]
     88a:	601a      	str	r2, [r3, #0]
}
     88c:	3714      	adds	r7, #20
     88e:	46bd      	mov	sp, r7
     890:	f85d 7b04 	ldr.w	r7, [sp], #4
     894:	4770      	bx	lr
     896:	bf00      	nop

00000898 <RCC_HSICmd>:
  * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
  * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
     898:	b480      	push	{r7}
     89a:	b083      	sub	sp, #12
     89c:	af00      	add	r7, sp, #0
     89e:	4603      	mov	r3, r0
     8a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
     8a2:	2300      	movs	r3, #0
     8a4:	f2c4 2342 	movt	r3, #16962	; 0x4242
     8a8:	79fa      	ldrb	r2, [r7, #7]
     8aa:	601a      	str	r2, [r3, #0]
}
     8ac:	370c      	adds	r7, #12
     8ae:	46bd      	mov	sp, r7
     8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
     8b4:	4770      	bx	lr
     8b6:	bf00      	nop

000008b8 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
     8b8:	b480      	push	{r7}
     8ba:	b085      	sub	sp, #20
     8bc:	af00      	add	r7, sp, #0
     8be:	6078      	str	r0, [r7, #4]
     8c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
     8c2:	2300      	movs	r3, #0
     8c4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
     8c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ce:	685b      	ldr	r3, [r3, #4]
     8d0:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
     8d2:	68fb      	ldr	r3, [r7, #12]
     8d4:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
     8d8:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
     8da:	687a      	ldr	r2, [r7, #4]
     8dc:	683b      	ldr	r3, [r7, #0]
     8de:	4313      	orrs	r3, r2
     8e0:	68fa      	ldr	r2, [r7, #12]
     8e2:	4313      	orrs	r3, r2
     8e4:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     8e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ee:	68fa      	ldr	r2, [r7, #12]
     8f0:	605a      	str	r2, [r3, #4]
}
     8f2:	3714      	adds	r7, #20
     8f4:	46bd      	mov	sp, r7
     8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
     8fa:	4770      	bx	lr

000008fc <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
     8fc:	b480      	push	{r7}
     8fe:	b083      	sub	sp, #12
     900:	af00      	add	r7, sp, #0
     902:	4603      	mov	r3, r0
     904:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
     906:	2360      	movs	r3, #96	; 0x60
     908:	f2c4 2342 	movt	r3, #16962	; 0x4242
     90c:	79fa      	ldrb	r2, [r7, #7]
     90e:	601a      	str	r2, [r3, #0]
}
     910:	370c      	adds	r7, #12
     912:	46bd      	mov	sp, r7
     914:	f85d 7b04 	ldr.w	r7, [sp], #4
     918:	4770      	bx	lr
     91a:	bf00      	nop

0000091c <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
     91c:	b480      	push	{r7}
     91e:	b085      	sub	sp, #20
     920:	af00      	add	r7, sp, #0
     922:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     924:	2300      	movs	r3, #0
     926:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
     928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     92c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     930:	685b      	ldr	r3, [r3, #4]
     932:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
     934:	68fb      	ldr	r3, [r7, #12]
     936:	f023 0303 	bic.w	r3, r3, #3
     93a:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
     93c:	68fa      	ldr	r2, [r7, #12]
     93e:	687b      	ldr	r3, [r7, #4]
     940:	4313      	orrs	r3, r2
     942:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     948:	f2c4 0302 	movt	r3, #16386	; 0x4002
     94c:	68fa      	ldr	r2, [r7, #12]
     94e:	605a      	str	r2, [r3, #4]
}
     950:	3714      	adds	r7, #20
     952:	46bd      	mov	sp, r7
     954:	f85d 7b04 	ldr.w	r7, [sp], #4
     958:	4770      	bx	lr
     95a:	bf00      	nop

0000095c <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
     95c:	b480      	push	{r7}
     95e:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
     960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     964:	f2c4 0302 	movt	r3, #16386	; 0x4002
     968:	685b      	ldr	r3, [r3, #4]
     96a:	b2db      	uxtb	r3, r3
     96c:	f003 030c 	and.w	r3, r3, #12
     970:	b2db      	uxtb	r3, r3
}
     972:	4618      	mov	r0, r3
     974:	46bd      	mov	sp, r7
     976:	f85d 7b04 	ldr.w	r7, [sp], #4
     97a:	4770      	bx	lr

0000097c <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
     97c:	b480      	push	{r7}
     97e:	b085      	sub	sp, #20
     980:	af00      	add	r7, sp, #0
     982:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     984:	2300      	movs	r3, #0
     986:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
     988:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     98c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     990:	685b      	ldr	r3, [r3, #4]
     992:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
     994:	68fb      	ldr	r3, [r7, #12]
     996:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
     99a:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
     99c:	68fa      	ldr	r2, [r7, #12]
     99e:	687b      	ldr	r3, [r7, #4]
     9a0:	4313      	orrs	r3, r2
     9a2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ac:	68fa      	ldr	r2, [r7, #12]
     9ae:	605a      	str	r2, [r3, #4]
}
     9b0:	3714      	adds	r7, #20
     9b2:	46bd      	mov	sp, r7
     9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9b8:	4770      	bx	lr
     9ba:	bf00      	nop

000009bc <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
     9bc:	b480      	push	{r7}
     9be:	b085      	sub	sp, #20
     9c0:	af00      	add	r7, sp, #0
     9c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     9c4:	2300      	movs	r3, #0
     9c6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     9c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9d0:	685b      	ldr	r3, [r3, #4]
     9d2:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
     9d4:	68fb      	ldr	r3, [r7, #12]
     9d6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
     9da:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
     9dc:	68fa      	ldr	r2, [r7, #12]
     9de:	687b      	ldr	r3, [r7, #4]
     9e0:	4313      	orrs	r3, r2
     9e2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ec:	68fa      	ldr	r2, [r7, #12]
     9ee:	605a      	str	r2, [r3, #4]
}
     9f0:	3714      	adds	r7, #20
     9f2:	46bd      	mov	sp, r7
     9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9f8:	4770      	bx	lr
     9fa:	bf00      	nop

000009fc <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
     9fc:	b480      	push	{r7}
     9fe:	b085      	sub	sp, #20
     a00:	af00      	add	r7, sp, #0
     a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     a04:	2300      	movs	r3, #0
     a06:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a0c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a10:	685b      	ldr	r3, [r3, #4]
     a12:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
     a14:	68fb      	ldr	r3, [r7, #12]
     a16:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
     a1a:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
     a1c:	687b      	ldr	r3, [r7, #4]
     a1e:	00db      	lsls	r3, r3, #3
     a20:	68fa      	ldr	r2, [r7, #12]
     a22:	4313      	orrs	r3, r2
     a24:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     a26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a2a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a2e:	68fa      	ldr	r2, [r7, #12]
     a30:	605a      	str	r2, [r3, #4]
}
     a32:	3714      	adds	r7, #20
     a34:	46bd      	mov	sp, r7
     a36:	f85d 7b04 	ldr.w	r7, [sp], #4
     a3a:	4770      	bx	lr

00000a3c <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
     a3c:	b480      	push	{r7}
     a3e:	b083      	sub	sp, #12
     a40:	af00      	add	r7, sp, #0
     a42:	4602      	mov	r2, r0
     a44:	460b      	mov	r3, r1
     a46:	71fa      	strb	r2, [r7, #7]
     a48:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     a4a:	79bb      	ldrb	r3, [r7, #6]
     a4c:	2b00      	cmp	r3, #0
     a4e:	d00e      	beq.n	a6e <RCC_ITConfig+0x32>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
     a50:	f241 0309 	movw	r3, #4105	; 0x1009
     a54:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a58:	f241 0209 	movw	r2, #4105	; 0x1009
     a5c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a60:	7812      	ldrb	r2, [r2, #0]
     a62:	b2d1      	uxtb	r1, r2
     a64:	79fa      	ldrb	r2, [r7, #7]
     a66:	430a      	orrs	r2, r1
     a68:	b2d2      	uxtb	r2, r2
     a6a:	701a      	strb	r2, [r3, #0]
     a6c:	e00f      	b.n	a8e <RCC_ITConfig+0x52>
  }
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
     a6e:	f241 0309 	movw	r3, #4105	; 0x1009
     a72:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a76:	f241 0209 	movw	r2, #4105	; 0x1009
     a7a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a7e:	7812      	ldrb	r2, [r2, #0]
     a80:	b2d1      	uxtb	r1, r2
     a82:	79fa      	ldrb	r2, [r7, #7]
     a84:	43d2      	mvns	r2, r2
     a86:	b2d2      	uxtb	r2, r2
     a88:	400a      	ands	r2, r1
     a8a:	b2d2      	uxtb	r2, r2
     a8c:	701a      	strb	r2, [r3, #0]
  }
}
     a8e:	370c      	adds	r7, #12
     a90:	46bd      	mov	sp, r7
     a92:	f85d 7b04 	ldr.w	r7, [sp], #4
     a96:	4770      	bx	lr

00000a98 <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
     a98:	b480      	push	{r7}
     a9a:	b083      	sub	sp, #12
     a9c:	af00      	add	r7, sp, #0
     a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
     aa0:	23d8      	movs	r3, #216	; 0xd8
     aa2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     aa6:	687a      	ldr	r2, [r7, #4]
     aa8:	601a      	str	r2, [r3, #0]
}
     aaa:	370c      	adds	r7, #12
     aac:	46bd      	mov	sp, r7
     aae:	f85d 7b04 	ldr.w	r7, [sp], #4
     ab2:	4770      	bx	lr

00000ab4 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
     ab4:	b480      	push	{r7}
     ab6:	b085      	sub	sp, #20
     ab8:	af00      	add	r7, sp, #0
     aba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     abc:	2300      	movs	r3, #0
     abe:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
     ac0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ac4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ac8:	685b      	ldr	r3, [r3, #4]
     aca:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
     acc:	68fb      	ldr	r3, [r7, #12]
     ace:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
     ad2:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
     ad4:	68fa      	ldr	r2, [r7, #12]
     ad6:	687b      	ldr	r3, [r7, #4]
     ad8:	4313      	orrs	r3, r2
     ada:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ae0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ae4:	68fa      	ldr	r2, [r7, #12]
     ae6:	605a      	str	r2, [r3, #4]
}
     ae8:	3714      	adds	r7, #20
     aea:	46bd      	mov	sp, r7
     aec:	f85d 7b04 	ldr.w	r7, [sp], #4
     af0:	4770      	bx	lr
     af2:	bf00      	nop

00000af4 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
     af4:	b480      	push	{r7}
     af6:	b083      	sub	sp, #12
     af8:	af00      	add	r7, sp, #0
     afa:	4603      	mov	r3, r0
     afc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     afe:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b02:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b06:	2200      	movs	r2, #0
     b08:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     b0a:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b0e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b12:	2200      	movs	r2, #0
     b14:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
     b16:	79fb      	ldrb	r3, [r7, #7]
     b18:	2b01      	cmp	r3, #1
     b1a:	d002      	beq.n	b22 <RCC_LSEConfig+0x2e>
     b1c:	2b04      	cmp	r3, #4
     b1e:	d007      	beq.n	b30 <RCC_LSEConfig+0x3c>
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;

    default:
      break;
     b20:	e00d      	b.n	b3e <RCC_LSEConfig+0x4a>
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
     b22:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b2a:	2201      	movs	r2, #1
     b2c:	701a      	strb	r2, [r3, #0]
      break;
     b2e:	e006      	b.n	b3e <RCC_LSEConfig+0x4a>

    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
     b30:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b34:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b38:	2205      	movs	r2, #5
     b3a:	701a      	strb	r2, [r3, #0]
      break;
     b3c:	bf00      	nop

    default:
      break;
  }
}
     b3e:	370c      	adds	r7, #12
     b40:	46bd      	mov	sp, r7
     b42:	f85d 7b04 	ldr.w	r7, [sp], #4
     b46:	4770      	bx	lr

00000b48 <RCC_LSICmd>:
  * @note   LSI can not be disabled if the IWDG is running.
  * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
     b48:	b480      	push	{r7}
     b4a:	b083      	sub	sp, #12
     b4c:	af00      	add	r7, sp, #0
     b4e:	4603      	mov	r3, r0
     b50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
     b52:	f44f 6390 	mov.w	r3, #1152	; 0x480
     b56:	f2c4 2342 	movt	r3, #16962	; 0x4242
     b5a:	79fa      	ldrb	r2, [r7, #7]
     b5c:	601a      	str	r2, [r3, #0]
}
     b5e:	370c      	adds	r7, #12
     b60:	46bd      	mov	sp, r7
     b62:	f85d 7b04 	ldr.w	r7, [sp], #4
     b66:	4770      	bx	lr

00000b68 <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
     b68:	b480      	push	{r7}
     b6a:	b083      	sub	sp, #12
     b6c:	af00      	add	r7, sp, #0
     b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
     b70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     b74:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     b7c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     b80:	6a11      	ldr	r1, [r2, #32]
     b82:	687a      	ldr	r2, [r7, #4]
     b84:	430a      	orrs	r2, r1
     b86:	621a      	str	r2, [r3, #32]
}
     b88:	370c      	adds	r7, #12
     b8a:	46bd      	mov	sp, r7
     b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
     b90:	4770      	bx	lr
     b92:	bf00      	nop

00000b94 <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
     b94:	b480      	push	{r7}
     b96:	b083      	sub	sp, #12
     b98:	af00      	add	r7, sp, #0
     b9a:	4603      	mov	r3, r0
     b9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
     b9e:	f240 433c 	movw	r3, #1084	; 0x43c
     ba2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     ba6:	79fa      	ldrb	r2, [r7, #7]
     ba8:	601a      	str	r2, [r3, #0]
}
     baa:	370c      	adds	r7, #12
     bac:	46bd      	mov	sp, r7
     bae:	f85d 7b04 	ldr.w	r7, [sp], #4
     bb2:	4770      	bx	lr

00000bb4 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using
  *         fractional value for HSE crystal.
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
     bb4:	b480      	push	{r7}
     bb6:	b087      	sub	sp, #28
     bb8:	af00      	add	r7, sp, #0
     bba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
     bbc:	2300      	movs	r3, #0
     bbe:	617b      	str	r3, [r7, #20]
     bc0:	2300      	movs	r3, #0
     bc2:	613b      	str	r3, [r7, #16]
     bc4:	2300      	movs	r3, #0
     bc6:	60fb      	str	r3, [r7, #12]
     bc8:	2300      	movs	r3, #0
     bca:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
     bcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     bd0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     bd4:	685b      	ldr	r3, [r3, #4]
     bd6:	f003 030c 	and.w	r3, r3, #12
     bda:	617b      	str	r3, [r7, #20]

  switch (tmp)
     bdc:	697b      	ldr	r3, [r7, #20]
     bde:	2b04      	cmp	r3, #4
     be0:	d00a      	beq.n	bf8 <RCC_GetClocksFreq+0x44>
     be2:	2b08      	cmp	r3, #8
     be4:	d00f      	beq.n	c06 <RCC_GetClocksFreq+0x52>
     be6:	2b00      	cmp	r3, #0
     be8:	d14c      	bne.n	c84 <RCC_GetClocksFreq+0xd0>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     bea:	687a      	ldr	r2, [r7, #4]
     bec:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bf0:	f2c0 037a 	movt	r3, #122	; 0x7a
     bf4:	6013      	str	r3, [r2, #0]
      break;
     bf6:	e04c      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
     bf8:	687a      	ldr	r2, [r7, #4]
     bfa:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bfe:	f2c0 037a 	movt	r3, #122	; 0x7a
     c02:	6013      	str	r3, [r2, #0]
      break;
     c04:	e045      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
     c06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c0a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c0e:	685b      	ldr	r3, [r3, #4]
     c10:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     c14:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
     c16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c1a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c1e:	685b      	ldr	r3, [r3, #4]
     c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     c24:	60fb      	str	r3, [r7, #12]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     c26:	693b      	ldr	r3, [r7, #16]
     c28:	0c9b      	lsrs	r3, r3, #18
     c2a:	3302      	adds	r3, #2
     c2c:	613b      	str	r3, [r7, #16]

      if (pllsource == 0x00)
     c2e:	68fb      	ldr	r3, [r7, #12]
     c30:	2b00      	cmp	r3, #0
     c32:	d109      	bne.n	c48 <RCC_GetClocksFreq+0x94>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
     c34:	693a      	ldr	r2, [r7, #16]
     c36:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c3a:	f2c0 033d 	movt	r3, #61	; 0x3d
     c3e:	fb03 f202 	mul.w	r2, r3, r2
     c42:	687b      	ldr	r3, [r7, #4]
     c44:	601a      	str	r2, [r3, #0]
     c46:	e01c      	b.n	c82 <RCC_GetClocksFreq+0xce>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
     c48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c4c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c50:	685b      	ldr	r3, [r3, #4]
     c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     c56:	2b00      	cmp	r3, #0
     c58:	d009      	beq.n	c6e <RCC_GetClocksFreq+0xba>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
     c5a:	693a      	ldr	r2, [r7, #16]
     c5c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c60:	f2c0 033d 	movt	r3, #61	; 0x3d
     c64:	fb03 f202 	mul.w	r2, r3, r2
     c68:	687b      	ldr	r3, [r7, #4]
     c6a:	601a      	str	r2, [r3, #0]
     c6c:	e009      	b.n	c82 <RCC_GetClocksFreq+0xce>
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
     c6e:	693a      	ldr	r2, [r7, #16]
     c70:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c74:	f2c0 037a 	movt	r3, #122	; 0x7a
     c78:	fb03 f202 	mul.w	r2, r3, r2
     c7c:	687b      	ldr	r3, [r7, #4]
     c7e:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2;
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     c80:	e007      	b.n	c92 <RCC_GetClocksFreq+0xde>
     c82:	e006      	b.n	c92 <RCC_GetClocksFreq+0xde>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     c84:	687a      	ldr	r2, [r7, #4]
     c86:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c8a:	f2c0 037a 	movt	r3, #122	; 0x7a
     c8e:	6013      	str	r3, [r2, #0]
      break;
     c90:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
     c92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c96:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c9a:	685b      	ldr	r3, [r3, #4]
     c9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     ca0:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
     ca2:	697b      	ldr	r3, [r7, #20]
     ca4:	091b      	lsrs	r3, r3, #4
     ca6:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     ca8:	f240 0314 	movw	r3, #20
     cac:	f2c2 0300 	movt	r3, #8192	; 0x2000
     cb0:	697a      	ldr	r2, [r7, #20]
     cb2:	4413      	add	r3, r2
     cb4:	781b      	ldrb	r3, [r3, #0]
     cb6:	b2db      	uxtb	r3, r3
     cb8:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
     cba:	687b      	ldr	r3, [r7, #4]
     cbc:	681a      	ldr	r2, [r3, #0]
     cbe:	68bb      	ldr	r3, [r7, #8]
     cc0:	40da      	lsrs	r2, r3
     cc2:	687b      	ldr	r3, [r7, #4]
     cc4:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
     cc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     cce:	685b      	ldr	r3, [r3, #4]
     cd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
     cd4:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
     cd6:	697b      	ldr	r3, [r7, #20]
     cd8:	0a1b      	lsrs	r3, r3, #8
     cda:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     cdc:	f240 0314 	movw	r3, #20
     ce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     ce4:	697a      	ldr	r2, [r7, #20]
     ce6:	4413      	add	r3, r2
     ce8:	781b      	ldrb	r3, [r3, #0]
     cea:	b2db      	uxtb	r3, r3
     cec:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     cee:	687b      	ldr	r3, [r7, #4]
     cf0:	685a      	ldr	r2, [r3, #4]
     cf2:	68bb      	ldr	r3, [r7, #8]
     cf4:	40da      	lsrs	r2, r3
     cf6:	687b      	ldr	r3, [r7, #4]
     cf8:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
     cfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cfe:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d02:	685b      	ldr	r3, [r3, #4]
     d04:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
     d08:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
     d0a:	697b      	ldr	r3, [r7, #20]
     d0c:	0adb      	lsrs	r3, r3, #11
     d0e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     d10:	f240 0314 	movw	r3, #20
     d14:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d18:	697a      	ldr	r2, [r7, #20]
     d1a:	4413      	add	r3, r2
     d1c:	781b      	ldrb	r3, [r3, #0]
     d1e:	b2db      	uxtb	r3, r3
     d20:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     d22:	687b      	ldr	r3, [r7, #4]
     d24:	685a      	ldr	r2, [r3, #4]
     d26:	68bb      	ldr	r3, [r7, #8]
     d28:	40da      	lsrs	r2, r3
     d2a:	687b      	ldr	r3, [r7, #4]
     d2c:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
     d2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d32:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d36:	685b      	ldr	r3, [r3, #4]
     d38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
     d3c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
     d3e:	697b      	ldr	r3, [r7, #20]
     d40:	0b9b      	lsrs	r3, r3, #14
     d42:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
     d44:	f240 0324 	movw	r3, #36	; 0x24
     d48:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d4c:	697a      	ldr	r2, [r7, #20]
     d4e:	4413      	add	r3, r2
     d50:	781b      	ldrb	r3, [r3, #0]
     d52:	b2db      	uxtb	r3, r3
     d54:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
     d56:	687b      	ldr	r3, [r7, #4]
     d58:	68da      	ldr	r2, [r3, #12]
     d5a:	68bb      	ldr	r3, [r7, #8]
     d5c:	fbb2 f2f3 	udiv	r2, r2, r3
     d60:	687b      	ldr	r3, [r7, #4]
     d62:	611a      	str	r2, [r3, #16]
}
     d64:	371c      	adds	r7, #28
     d66:	46bd      	mov	sp, r7
     d68:	f85d 7b04 	ldr.w	r7, [sp], #4
     d6c:	4770      	bx	lr
     d6e:	bf00      	nop

00000d70 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
     d70:	b480      	push	{r7}
     d72:	b083      	sub	sp, #12
     d74:	af00      	add	r7, sp, #0
     d76:	6078      	str	r0, [r7, #4]
     d78:	460b      	mov	r3, r1
     d7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
     d7c:	78fb      	ldrb	r3, [r7, #3]
     d7e:	2b00      	cmp	r3, #0
     d80:	d00c      	beq.n	d9c <RCC_AHBPeriphClockCmd+0x2c>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
     d82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d86:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     d8e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     d92:	6951      	ldr	r1, [r2, #20]
     d94:	687a      	ldr	r2, [r7, #4]
     d96:	430a      	orrs	r2, r1
     d98:	615a      	str	r2, [r3, #20]
     d9a:	e00c      	b.n	db6 <RCC_AHBPeriphClockCmd+0x46>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
     d9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     da0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     da4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     da8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dac:	6951      	ldr	r1, [r2, #20]
     dae:	687a      	ldr	r2, [r7, #4]
     db0:	43d2      	mvns	r2, r2
     db2:	400a      	ands	r2, r1
     db4:	615a      	str	r2, [r3, #20]
  }
}
     db6:	370c      	adds	r7, #12
     db8:	46bd      	mov	sp, r7
     dba:	f85d 7b04 	ldr.w	r7, [sp], #4
     dbe:	4770      	bx	lr

00000dc0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     dc0:	b480      	push	{r7}
     dc2:	b083      	sub	sp, #12
     dc4:	af00      	add	r7, sp, #0
     dc6:	6078      	str	r0, [r7, #4]
     dc8:	460b      	mov	r3, r1
     dca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     dcc:	78fb      	ldrb	r3, [r7, #3]
     dce:	2b00      	cmp	r3, #0
     dd0:	d00c      	beq.n	dec <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
     dd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     dd6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     dda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     dde:	f2c4 0202 	movt	r2, #16386	; 0x4002
     de2:	6991      	ldr	r1, [r2, #24]
     de4:	687a      	ldr	r2, [r7, #4]
     de6:	430a      	orrs	r2, r1
     de8:	619a      	str	r2, [r3, #24]
     dea:	e00c      	b.n	e06 <RCC_APB2PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
     dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     df0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     df4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     df8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dfc:	6991      	ldr	r1, [r2, #24]
     dfe:	687a      	ldr	r2, [r7, #4]
     e00:	43d2      	mvns	r2, r2
     e02:	400a      	ands	r2, r1
     e04:	619a      	str	r2, [r3, #24]
  }
}
     e06:	370c      	adds	r7, #12
     e08:	46bd      	mov	sp, r7
     e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e0e:	4770      	bx	lr

00000e10 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     e10:	b480      	push	{r7}
     e12:	b083      	sub	sp, #12
     e14:	af00      	add	r7, sp, #0
     e16:	6078      	str	r0, [r7, #4]
     e18:	460b      	mov	r3, r1
     e1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e1c:	78fb      	ldrb	r3, [r7, #3]
     e1e:	2b00      	cmp	r3, #0
     e20:	d00c      	beq.n	e3c <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
     e22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e2e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e32:	69d1      	ldr	r1, [r2, #28]
     e34:	687a      	ldr	r2, [r7, #4]
     e36:	430a      	orrs	r2, r1
     e38:	61da      	str	r2, [r3, #28]
     e3a:	e00c      	b.n	e56 <RCC_APB1PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
     e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e40:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e48:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e4c:	69d1      	ldr	r1, [r2, #28]
     e4e:	687a      	ldr	r2, [r7, #4]
     e50:	43d2      	mvns	r2, r2
     e52:	400a      	ands	r2, r1
     e54:	61da      	str	r2, [r3, #28]
  }
}
     e56:	370c      	adds	r7, #12
     e58:	46bd      	mov	sp, r7
     e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e5e:	4770      	bx	lr

00000e60 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     e60:	b480      	push	{r7}
     e62:	b083      	sub	sp, #12
     e64:	af00      	add	r7, sp, #0
     e66:	6078      	str	r0, [r7, #4]
     e68:	460b      	mov	r3, r1
     e6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e6c:	78fb      	ldrb	r3, [r7, #3]
     e6e:	2b00      	cmp	r3, #0
     e70:	d00c      	beq.n	e8c <RCC_APB2PeriphResetCmd+0x2c>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
     e72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e76:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e7e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e82:	68d1      	ldr	r1, [r2, #12]
     e84:	687a      	ldr	r2, [r7, #4]
     e86:	430a      	orrs	r2, r1
     e88:	60da      	str	r2, [r3, #12]
     e8a:	e00c      	b.n	ea6 <RCC_APB2PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
     e8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e90:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e98:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e9c:	68d1      	ldr	r1, [r2, #12]
     e9e:	687a      	ldr	r2, [r7, #4]
     ea0:	43d2      	mvns	r2, r2
     ea2:	400a      	ands	r2, r1
     ea4:	60da      	str	r2, [r3, #12]
  }
}
     ea6:	370c      	adds	r7, #12
     ea8:	46bd      	mov	sp, r7
     eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
     eae:	4770      	bx	lr

00000eb0 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     eb0:	b480      	push	{r7}
     eb2:	b083      	sub	sp, #12
     eb4:	af00      	add	r7, sp, #0
     eb6:	6078      	str	r0, [r7, #4]
     eb8:	460b      	mov	r3, r1
     eba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     ebc:	78fb      	ldrb	r3, [r7, #3]
     ebe:	2b00      	cmp	r3, #0
     ec0:	d00c      	beq.n	edc <RCC_APB1PeriphResetCmd+0x2c>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
     ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ec6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     eca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ece:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ed2:	6911      	ldr	r1, [r2, #16]
     ed4:	687a      	ldr	r2, [r7, #4]
     ed6:	430a      	orrs	r2, r1
     ed8:	611a      	str	r2, [r3, #16]
     eda:	e00c      	b.n	ef6 <RCC_APB1PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
     edc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ee0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ee4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ee8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     eec:	6911      	ldr	r1, [r2, #16]
     eee:	687a      	ldr	r2, [r7, #4]
     ef0:	43d2      	mvns	r2, r2
     ef2:	400a      	ands	r2, r1
     ef4:	611a      	str	r2, [r3, #16]
  }
}
     ef6:	370c      	adds	r7, #12
     ef8:	46bd      	mov	sp, r7
     efa:	f85d 7b04 	ldr.w	r7, [sp], #4
     efe:	4770      	bx	lr

00000f00 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
     f00:	b480      	push	{r7}
     f02:	b083      	sub	sp, #12
     f04:	af00      	add	r7, sp, #0
     f06:	4603      	mov	r3, r0
     f08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
     f0a:	f44f 6388 	mov.w	r3, #1088	; 0x440
     f0e:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f12:	79fa      	ldrb	r2, [r7, #7]
     f14:	601a      	str	r2, [r3, #0]
}
     f16:	370c      	adds	r7, #12
     f18:	46bd      	mov	sp, r7
     f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f1e:	4770      	bx	lr

00000f20 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
     f20:	b480      	push	{r7}
     f22:	b083      	sub	sp, #12
     f24:	af00      	add	r7, sp, #0
     f26:	4603      	mov	r3, r0
     f28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
     f2a:	234c      	movs	r3, #76	; 0x4c
     f2c:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f30:	79fa      	ldrb	r2, [r7, #7]
     f32:	601a      	str	r2, [r3, #0]
}
     f34:	370c      	adds	r7, #12
     f36:	46bd      	mov	sp, r7
     f38:	f85d 7b04 	ldr.w	r7, [sp], #4
     f3c:	4770      	bx	lr
     f3e:	bf00      	nop

00000f40 <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
     f40:	b480      	push	{r7}
     f42:	b083      	sub	sp, #12
     f44:	af00      	add	r7, sp, #0
     f46:	4603      	mov	r3, r0
     f48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
     f4a:	f241 0307 	movw	r3, #4103	; 0x1007
     f4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f52:	79fa      	ldrb	r2, [r7, #7]
     f54:	701a      	strb	r2, [r3, #0]
}
     f56:	370c      	adds	r7, #12
     f58:	46bd      	mov	sp, r7
     f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f5e:	4770      	bx	lr

00000f60 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
     f60:	b480      	push	{r7}
     f62:	b087      	sub	sp, #28
     f64:	af00      	add	r7, sp, #0
     f66:	4603      	mov	r3, r0
     f68:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
     f6a:	2300      	movs	r3, #0
     f6c:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
     f6e:	2300      	movs	r3, #0
     f70:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
     f72:	2300      	movs	r3, #0
     f74:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
     f76:	79fb      	ldrb	r3, [r7, #7]
     f78:	095b      	lsrs	r3, r3, #5
     f7a:	b2db      	uxtb	r3, r3
     f7c:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
     f7e:	68fb      	ldr	r3, [r7, #12]
     f80:	2b01      	cmp	r3, #1
     f82:	d106      	bne.n	f92 <RCC_GetFlagStatus+0x32>
  {
    statusreg = RCC->CR;
     f84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f88:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f8c:	681b      	ldr	r3, [r3, #0]
     f8e:	617b      	str	r3, [r7, #20]
     f90:	e00f      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
     f92:	68fb      	ldr	r3, [r7, #12]
     f94:	2b02      	cmp	r3, #2
     f96:	d106      	bne.n	fa6 <RCC_GetFlagStatus+0x46>
  {
    statusreg = RCC->BDCR;
     f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f9c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fa0:	6a1b      	ldr	r3, [r3, #32]
     fa2:	617b      	str	r3, [r7, #20]
     fa4:	e005      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
     fa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     faa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     fb0:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
     fb2:	79fb      	ldrb	r3, [r7, #7]
     fb4:	f003 031f 	and.w	r3, r3, #31
     fb8:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
     fba:	68fb      	ldr	r3, [r7, #12]
     fbc:	697a      	ldr	r2, [r7, #20]
     fbe:	fa22 f303 	lsr.w	r3, r2, r3
     fc2:	f003 0301 	and.w	r3, r3, #1
     fc6:	2b00      	cmp	r3, #0
     fc8:	d002      	beq.n	fd0 <RCC_GetFlagStatus+0x70>
  {
    bitstatus = SET;
     fca:	2301      	movs	r3, #1
     fcc:	74fb      	strb	r3, [r7, #19]
     fce:	e001      	b.n	fd4 <RCC_GetFlagStatus+0x74>
  }
  else
  {
    bitstatus = RESET;
     fd0:	2300      	movs	r3, #0
     fd2:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
     fd4:	7cfb      	ldrb	r3, [r7, #19]
}
     fd6:	4618      	mov	r0, r3
     fd8:	371c      	adds	r7, #28
     fda:	46bd      	mov	sp, r7
     fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
     fe0:	4770      	bx	lr
     fe2:	bf00      	nop

00000fe4 <RCC_ClearFlag>:
  *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
     fe4:	b480      	push	{r7}
     fe6:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
     fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     fec:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ff0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ff4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ff8:	6a52      	ldr	r2, [r2, #36]	; 0x24
     ffa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     ffe:	625a      	str	r2, [r3, #36]	; 0x24
}
    1000:	46bd      	mov	sp, r7
    1002:	f85d 7b04 	ldr.w	r7, [sp], #4
    1006:	4770      	bx	lr

00001008 <RCC_GetITStatus>:
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  *
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
    1008:	b480      	push	{r7}
    100a:	b085      	sub	sp, #20
    100c:	af00      	add	r7, sp, #0
    100e:	4603      	mov	r3, r0
    1010:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
    1012:	2300      	movs	r3, #0
    1014:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
    1016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    101a:	f2c4 0302 	movt	r3, #16386	; 0x4002
    101e:	689a      	ldr	r2, [r3, #8]
    1020:	79fb      	ldrb	r3, [r7, #7]
    1022:	4013      	ands	r3, r2
    1024:	2b00      	cmp	r3, #0
    1026:	d002      	beq.n	102e <RCC_GetITStatus+0x26>
  {
    bitstatus = SET;
    1028:	2301      	movs	r3, #1
    102a:	73fb      	strb	r3, [r7, #15]
    102c:	e001      	b.n	1032 <RCC_GetITStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    102e:	2300      	movs	r3, #0
    1030:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the RCC_IT status */
  return  bitstatus;
    1032:	7bfb      	ldrb	r3, [r7, #15]
}
    1034:	4618      	mov	r0, r3
    1036:	3714      	adds	r7, #20
    1038:	46bd      	mov	sp, r7
    103a:	f85d 7b04 	ldr.w	r7, [sp], #4
    103e:	4770      	bx	lr

00001040 <RCC_ClearITPendingBit>:
  *
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
    1040:	b480      	push	{r7}
    1042:	b083      	sub	sp, #12
    1044:	af00      	add	r7, sp, #0
    1046:	4603      	mov	r3, r0
    1048:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
    104a:	f241 030a 	movw	r3, #4106	; 0x100a
    104e:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1052:	79fa      	ldrb	r2, [r7, #7]
    1054:	701a      	strb	r2, [r3, #0]
}
    1056:	370c      	adds	r7, #12
    1058:	46bd      	mov	sp, r7
    105a:	f85d 7b04 	ldr.w	r7, [sp], #4
    105e:	4770      	bx	lr

00001060 <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
    1060:	b580      	push	{r7, lr}
    1062:	b082      	sub	sp, #8
    1064:	af00      	add	r7, sp, #0
    1066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
    1068:	687a      	ldr	r2, [r7, #4]
    106a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    106e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1072:	429a      	cmp	r2, r3
    1074:	d108      	bne.n	1088 <GPIO_DeInit+0x28>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
    1076:	2004      	movs	r0, #4
    1078:	2101      	movs	r1, #1
    107a:	f7ff fef1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
    107e:	2004      	movs	r0, #4
    1080:	2100      	movs	r1, #0
    1082:	f7ff feed 	bl	e60 <RCC_APB2PeriphResetCmd>
    1086:	e060      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOB)
    1088:	687a      	ldr	r2, [r7, #4]
    108a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    108e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1092:	429a      	cmp	r2, r3
    1094:	d108      	bne.n	10a8 <GPIO_DeInit+0x48>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
    1096:	2008      	movs	r0, #8
    1098:	2101      	movs	r1, #1
    109a:	f7ff fee1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
    109e:	2008      	movs	r0, #8
    10a0:	2100      	movs	r1, #0
    10a2:	f7ff fedd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10a6:	e050      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOC)
    10a8:	687a      	ldr	r2, [r7, #4]
    10aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    10ae:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10b2:	429a      	cmp	r2, r3
    10b4:	d108      	bne.n	10c8 <GPIO_DeInit+0x68>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
    10b6:	2010      	movs	r0, #16
    10b8:	2101      	movs	r1, #1
    10ba:	f7ff fed1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
    10be:	2010      	movs	r0, #16
    10c0:	2100      	movs	r1, #0
    10c2:	f7ff fecd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10c6:	e040      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOD)
    10c8:	687a      	ldr	r2, [r7, #4]
    10ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    10ce:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10d2:	429a      	cmp	r2, r3
    10d4:	d108      	bne.n	10e8 <GPIO_DeInit+0x88>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
    10d6:	2020      	movs	r0, #32
    10d8:	2101      	movs	r1, #1
    10da:	f7ff fec1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
    10de:	2020      	movs	r0, #32
    10e0:	2100      	movs	r1, #0
    10e2:	f7ff febd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10e6:	e030      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOE)
    10e8:	687a      	ldr	r2, [r7, #4]
    10ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    10ee:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10f2:	429a      	cmp	r2, r3
    10f4:	d108      	bne.n	1108 <GPIO_DeInit+0xa8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
    10f6:	2040      	movs	r0, #64	; 0x40
    10f8:	2101      	movs	r1, #1
    10fa:	f7ff feb1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
    10fe:	2040      	movs	r0, #64	; 0x40
    1100:	2100      	movs	r1, #0
    1102:	f7ff fead 	bl	e60 <RCC_APB2PeriphResetCmd>
    1106:	e020      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOF)
    1108:	687a      	ldr	r2, [r7, #4]
    110a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
    110e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1112:	429a      	cmp	r2, r3
    1114:	d108      	bne.n	1128 <GPIO_DeInit+0xc8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
    1116:	2080      	movs	r0, #128	; 0x80
    1118:	2101      	movs	r1, #1
    111a:	f7ff fea1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
    111e:	2080      	movs	r0, #128	; 0x80
    1120:	2100      	movs	r1, #0
    1122:	f7ff fe9d 	bl	e60 <RCC_APB2PeriphResetCmd>
    1126:	e010      	b.n	114a <GPIO_DeInit+0xea>
  }
  else
  {
    if (GPIOx == GPIOG)
    1128:	687a      	ldr	r2, [r7, #4]
    112a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    112e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1132:	429a      	cmp	r2, r3
    1134:	d109      	bne.n	114a <GPIO_DeInit+0xea>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
    1136:	f44f 7080 	mov.w	r0, #256	; 0x100
    113a:	2101      	movs	r1, #1
    113c:	f7ff fe90 	bl	e60 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    1140:	f44f 7080 	mov.w	r0, #256	; 0x100
    1144:	2100      	movs	r1, #0
    1146:	f7ff fe8b 	bl	e60 <RCC_APB2PeriphResetCmd>
    }
  }
}
    114a:	3708      	adds	r7, #8
    114c:	46bd      	mov	sp, r7
    114e:	bd80      	pop	{r7, pc}

00001150 <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
    1150:	b580      	push	{r7, lr}
    1152:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
    1154:	2001      	movs	r0, #1
    1156:	2101      	movs	r1, #1
    1158:	f7ff fe82 	bl	e60 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
    115c:	2001      	movs	r0, #1
    115e:	2100      	movs	r1, #0
    1160:	f7ff fe7e 	bl	e60 <RCC_APB2PeriphResetCmd>
}
    1164:	bd80      	pop	{r7, pc}
    1166:	bf00      	nop

00001168 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
    1168:	b480      	push	{r7}
    116a:	b089      	sub	sp, #36	; 0x24
    116c:	af00      	add	r7, sp, #0
    116e:	6078      	str	r0, [r7, #4]
    1170:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
    1172:	2300      	movs	r3, #0
    1174:	61fb      	str	r3, [r7, #28]
    1176:	2300      	movs	r3, #0
    1178:	613b      	str	r3, [r7, #16]
    117a:	2300      	movs	r3, #0
    117c:	61bb      	str	r3, [r7, #24]
    117e:	2300      	movs	r3, #0
    1180:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
    1182:	2300      	movs	r3, #0
    1184:	617b      	str	r3, [r7, #20]
    1186:	2300      	movs	r3, #0
    1188:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));

/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
    118a:	683b      	ldr	r3, [r7, #0]
    118c:	78db      	ldrb	r3, [r3, #3]
    118e:	f003 030f 	and.w	r3, r3, #15
    1192:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
    1194:	683b      	ldr	r3, [r7, #0]
    1196:	78db      	ldrb	r3, [r3, #3]
    1198:	f003 0310 	and.w	r3, r3, #16
    119c:	2b00      	cmp	r3, #0
    119e:	d004      	beq.n	11aa <GPIO_Init+0x42>
  {
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
    11a0:	683b      	ldr	r3, [r7, #0]
    11a2:	789b      	ldrb	r3, [r3, #2]
    11a4:	69fa      	ldr	r2, [r7, #28]
    11a6:	4313      	orrs	r3, r2
    11a8:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
    11aa:	683b      	ldr	r3, [r7, #0]
    11ac:	881b      	ldrh	r3, [r3, #0]
    11ae:	b2db      	uxtb	r3, r3
    11b0:	2b00      	cmp	r3, #0
    11b2:	d044      	beq.n	123e <GPIO_Init+0xd6>
  {
    tmpreg = GPIOx->CRL;
    11b4:	687b      	ldr	r3, [r7, #4]
    11b6:	681b      	ldr	r3, [r3, #0]
    11b8:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    11ba:	2300      	movs	r3, #0
    11bc:	61bb      	str	r3, [r7, #24]
    11be:	e038      	b.n	1232 <GPIO_Init+0xca>
    {
      pos = ((uint32_t)0x01) << pinpos;
    11c0:	69bb      	ldr	r3, [r7, #24]
    11c2:	2201      	movs	r2, #1
    11c4:	fa02 f303 	lsl.w	r3, r2, r3
    11c8:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
    11ca:	683b      	ldr	r3, [r7, #0]
    11cc:	881b      	ldrh	r3, [r3, #0]
    11ce:	461a      	mov	r2, r3
    11d0:	68fb      	ldr	r3, [r7, #12]
    11d2:	4013      	ands	r3, r2
    11d4:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    11d6:	693a      	ldr	r2, [r7, #16]
    11d8:	68fb      	ldr	r3, [r7, #12]
    11da:	429a      	cmp	r2, r3
    11dc:	d126      	bne.n	122c <GPIO_Init+0xc4>
      {
        pos = pinpos << 2;
    11de:	69bb      	ldr	r3, [r7, #24]
    11e0:	009b      	lsls	r3, r3, #2
    11e2:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    11e4:	68fb      	ldr	r3, [r7, #12]
    11e6:	220f      	movs	r2, #15
    11e8:	fa02 f303 	lsl.w	r3, r2, r3
    11ec:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    11ee:	68bb      	ldr	r3, [r7, #8]
    11f0:	43db      	mvns	r3, r3
    11f2:	697a      	ldr	r2, [r7, #20]
    11f4:	4013      	ands	r3, r2
    11f6:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    11f8:	68fb      	ldr	r3, [r7, #12]
    11fa:	69fa      	ldr	r2, [r7, #28]
    11fc:	fa02 f303 	lsl.w	r3, r2, r3
    1200:	697a      	ldr	r2, [r7, #20]
    1202:	4313      	orrs	r3, r2
    1204:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    1206:	683b      	ldr	r3, [r7, #0]
    1208:	78db      	ldrb	r3, [r3, #3]
    120a:	2b28      	cmp	r3, #40	; 0x28
    120c:	d105      	bne.n	121a <GPIO_Init+0xb2>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
    120e:	69bb      	ldr	r3, [r7, #24]
    1210:	2201      	movs	r2, #1
    1212:	409a      	lsls	r2, r3
    1214:	687b      	ldr	r3, [r7, #4]
    1216:	615a      	str	r2, [r3, #20]
    1218:	e008      	b.n	122c <GPIO_Init+0xc4>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    121a:	683b      	ldr	r3, [r7, #0]
    121c:	78db      	ldrb	r3, [r3, #3]
    121e:	2b48      	cmp	r3, #72	; 0x48
    1220:	d104      	bne.n	122c <GPIO_Init+0xc4>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
    1222:	69bb      	ldr	r3, [r7, #24]
    1224:	2201      	movs	r2, #1
    1226:	409a      	lsls	r2, r3
    1228:	687b      	ldr	r3, [r7, #4]
    122a:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    122c:	69bb      	ldr	r3, [r7, #24]
    122e:	3301      	adds	r3, #1
    1230:	61bb      	str	r3, [r7, #24]
    1232:	69bb      	ldr	r3, [r7, #24]
    1234:	2b07      	cmp	r3, #7
    1236:	d9c3      	bls.n	11c0 <GPIO_Init+0x58>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
    1238:	687b      	ldr	r3, [r7, #4]
    123a:	697a      	ldr	r2, [r7, #20]
    123c:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
    123e:	683b      	ldr	r3, [r7, #0]
    1240:	881b      	ldrh	r3, [r3, #0]
    1242:	2bff      	cmp	r3, #255	; 0xff
    1244:	d946      	bls.n	12d4 <GPIO_Init+0x16c>
  {
    tmpreg = GPIOx->CRH;
    1246:	687b      	ldr	r3, [r7, #4]
    1248:	685b      	ldr	r3, [r3, #4]
    124a:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    124c:	2300      	movs	r3, #0
    124e:	61bb      	str	r3, [r7, #24]
    1250:	e03a      	b.n	12c8 <GPIO_Init+0x160>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
    1252:	69bb      	ldr	r3, [r7, #24]
    1254:	3308      	adds	r3, #8
    1256:	2201      	movs	r2, #1
    1258:	fa02 f303 	lsl.w	r3, r2, r3
    125c:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
    125e:	683b      	ldr	r3, [r7, #0]
    1260:	881b      	ldrh	r3, [r3, #0]
    1262:	461a      	mov	r2, r3
    1264:	68fb      	ldr	r3, [r7, #12]
    1266:	4013      	ands	r3, r2
    1268:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    126a:	693a      	ldr	r2, [r7, #16]
    126c:	68fb      	ldr	r3, [r7, #12]
    126e:	429a      	cmp	r2, r3
    1270:	d127      	bne.n	12c2 <GPIO_Init+0x15a>
      {
        pos = pinpos << 2;
    1272:	69bb      	ldr	r3, [r7, #24]
    1274:	009b      	lsls	r3, r3, #2
    1276:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    1278:	68fb      	ldr	r3, [r7, #12]
    127a:	220f      	movs	r2, #15
    127c:	fa02 f303 	lsl.w	r3, r2, r3
    1280:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    1282:	68bb      	ldr	r3, [r7, #8]
    1284:	43db      	mvns	r3, r3
    1286:	697a      	ldr	r2, [r7, #20]
    1288:	4013      	ands	r3, r2
    128a:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    128c:	68fb      	ldr	r3, [r7, #12]
    128e:	69fa      	ldr	r2, [r7, #28]
    1290:	fa02 f303 	lsl.w	r3, r2, r3
    1294:	697a      	ldr	r2, [r7, #20]
    1296:	4313      	orrs	r3, r2
    1298:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    129a:	683b      	ldr	r3, [r7, #0]
    129c:	78db      	ldrb	r3, [r3, #3]
    129e:	2b28      	cmp	r3, #40	; 0x28
    12a0:	d105      	bne.n	12ae <GPIO_Init+0x146>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12a2:	69bb      	ldr	r3, [r7, #24]
    12a4:	3308      	adds	r3, #8
    12a6:	2201      	movs	r2, #1
    12a8:	409a      	lsls	r2, r3
    12aa:	687b      	ldr	r3, [r7, #4]
    12ac:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    12ae:	683b      	ldr	r3, [r7, #0]
    12b0:	78db      	ldrb	r3, [r3, #3]
    12b2:	2b48      	cmp	r3, #72	; 0x48
    12b4:	d105      	bne.n	12c2 <GPIO_Init+0x15a>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12b6:	69bb      	ldr	r3, [r7, #24]
    12b8:	3308      	adds	r3, #8
    12ba:	2201      	movs	r2, #1
    12bc:	409a      	lsls	r2, r3
    12be:	687b      	ldr	r3, [r7, #4]
    12c0:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    12c2:	69bb      	ldr	r3, [r7, #24]
    12c4:	3301      	adds	r3, #1
    12c6:	61bb      	str	r3, [r7, #24]
    12c8:	69bb      	ldr	r3, [r7, #24]
    12ca:	2b07      	cmp	r3, #7
    12cc:	d9c1      	bls.n	1252 <GPIO_Init+0xea>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
    12ce:	687b      	ldr	r3, [r7, #4]
    12d0:	697a      	ldr	r2, [r7, #20]
    12d2:	605a      	str	r2, [r3, #4]
  }
}
    12d4:	3724      	adds	r7, #36	; 0x24
    12d6:	46bd      	mov	sp, r7
    12d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    12dc:	4770      	bx	lr
    12de:	bf00      	nop

000012e0 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
    12e0:	b480      	push	{r7}
    12e2:	b083      	sub	sp, #12
    12e4:	af00      	add	r7, sp, #0
    12e6:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
    12e8:	687b      	ldr	r3, [r7, #4]
    12ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
    12ee:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
    12f0:	687b      	ldr	r3, [r7, #4]
    12f2:	2202      	movs	r2, #2
    12f4:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
    12f6:	687b      	ldr	r3, [r7, #4]
    12f8:	2204      	movs	r2, #4
    12fa:	70da      	strb	r2, [r3, #3]
}
    12fc:	370c      	adds	r7, #12
    12fe:	46bd      	mov	sp, r7
    1300:	f85d 7b04 	ldr.w	r7, [sp], #4
    1304:	4770      	bx	lr
    1306:	bf00      	nop

00001308 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1308:	b480      	push	{r7}
    130a:	b085      	sub	sp, #20
    130c:	af00      	add	r7, sp, #0
    130e:	6078      	str	r0, [r7, #4]
    1310:	460b      	mov	r3, r1
    1312:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1314:	2300      	movs	r3, #0
    1316:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1318:	687b      	ldr	r3, [r7, #4]
    131a:	689a      	ldr	r2, [r3, #8]
    131c:	887b      	ldrh	r3, [r7, #2]
    131e:	4013      	ands	r3, r2
    1320:	2b00      	cmp	r3, #0
    1322:	d002      	beq.n	132a <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1324:	2301      	movs	r3, #1
    1326:	73fb      	strb	r3, [r7, #15]
    1328:	e001      	b.n	132e <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    132a:	2300      	movs	r3, #0
    132c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    132e:	7bfb      	ldrb	r3, [r7, #15]
}
    1330:	4618      	mov	r0, r3
    1332:	3714      	adds	r7, #20
    1334:	46bd      	mov	sp, r7
    1336:	f85d 7b04 	ldr.w	r7, [sp], #4
    133a:	4770      	bx	lr

0000133c <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
    133c:	b480      	push	{r7}
    133e:	b083      	sub	sp, #12
    1340:	af00      	add	r7, sp, #0
    1342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
    1344:	687b      	ldr	r3, [r7, #4]
    1346:	689b      	ldr	r3, [r3, #8]
    1348:	b29b      	uxth	r3, r3
}
    134a:	4618      	mov	r0, r3
    134c:	370c      	adds	r7, #12
    134e:	46bd      	mov	sp, r7
    1350:	f85d 7b04 	ldr.w	r7, [sp], #4
    1354:	4770      	bx	lr
    1356:	bf00      	nop

00001358 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1358:	b480      	push	{r7}
    135a:	b085      	sub	sp, #20
    135c:	af00      	add	r7, sp, #0
    135e:	6078      	str	r0, [r7, #4]
    1360:	460b      	mov	r3, r1
    1362:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1364:	2300      	movs	r3, #0
    1366:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1368:	687b      	ldr	r3, [r7, #4]
    136a:	68da      	ldr	r2, [r3, #12]
    136c:	887b      	ldrh	r3, [r7, #2]
    136e:	4013      	ands	r3, r2
    1370:	2b00      	cmp	r3, #0
    1372:	d002      	beq.n	137a <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1374:	2301      	movs	r3, #1
    1376:	73fb      	strb	r3, [r7, #15]
    1378:	e001      	b.n	137e <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    137a:	2300      	movs	r3, #0
    137c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    137e:	7bfb      	ldrb	r3, [r7, #15]
}
    1380:	4618      	mov	r0, r3
    1382:	3714      	adds	r7, #20
    1384:	46bd      	mov	sp, r7
    1386:	f85d 7b04 	ldr.w	r7, [sp], #4
    138a:	4770      	bx	lr

0000138c <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
    138c:	b480      	push	{r7}
    138e:	b083      	sub	sp, #12
    1390:	af00      	add	r7, sp, #0
    1392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
    1394:	687b      	ldr	r3, [r7, #4]
    1396:	68db      	ldr	r3, [r3, #12]
    1398:	b29b      	uxth	r3, r3
}
    139a:	4618      	mov	r0, r3
    139c:	370c      	adds	r7, #12
    139e:	46bd      	mov	sp, r7
    13a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    13a4:	4770      	bx	lr
    13a6:	bf00      	nop

000013a8 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13a8:	b480      	push	{r7}
    13aa:	b083      	sub	sp, #12
    13ac:	af00      	add	r7, sp, #0
    13ae:	6078      	str	r0, [r7, #4]
    13b0:	460b      	mov	r3, r1
    13b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
    13b4:	887a      	ldrh	r2, [r7, #2]
    13b6:	687b      	ldr	r3, [r7, #4]
    13b8:	611a      	str	r2, [r3, #16]
}
    13ba:	370c      	adds	r7, #12
    13bc:	46bd      	mov	sp, r7
    13be:	f85d 7b04 	ldr.w	r7, [sp], #4
    13c2:	4770      	bx	lr

000013c4 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13c4:	b480      	push	{r7}
    13c6:	b083      	sub	sp, #12
    13c8:	af00      	add	r7, sp, #0
    13ca:	6078      	str	r0, [r7, #4]
    13cc:	460b      	mov	r3, r1
    13ce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
    13d0:	887a      	ldrh	r2, [r7, #2]
    13d2:	687b      	ldr	r3, [r7, #4]
    13d4:	615a      	str	r2, [r3, #20]
}
    13d6:	370c      	adds	r7, #12
    13d8:	46bd      	mov	sp, r7
    13da:	f85d 7b04 	ldr.w	r7, [sp], #4
    13de:	4770      	bx	lr

000013e0 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
    13e0:	b480      	push	{r7}
    13e2:	b083      	sub	sp, #12
    13e4:	af00      	add	r7, sp, #0
    13e6:	6078      	str	r0, [r7, #4]
    13e8:	4613      	mov	r3, r2
    13ea:	460a      	mov	r2, r1
    13ec:	807a      	strh	r2, [r7, #2]
    13ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
    13f0:	787b      	ldrb	r3, [r7, #1]
    13f2:	2b00      	cmp	r3, #0
    13f4:	d003      	beq.n	13fe <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
    13f6:	887a      	ldrh	r2, [r7, #2]
    13f8:	687b      	ldr	r3, [r7, #4]
    13fa:	611a      	str	r2, [r3, #16]
    13fc:	e002      	b.n	1404 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
    13fe:	887a      	ldrh	r2, [r7, #2]
    1400:	687b      	ldr	r3, [r7, #4]
    1402:	615a      	str	r2, [r3, #20]
  }
}
    1404:	370c      	adds	r7, #12
    1406:	46bd      	mov	sp, r7
    1408:	f85d 7b04 	ldr.w	r7, [sp], #4
    140c:	4770      	bx	lr
    140e:	bf00      	nop

00001410 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
    1410:	b480      	push	{r7}
    1412:	b083      	sub	sp, #12
    1414:	af00      	add	r7, sp, #0
    1416:	6078      	str	r0, [r7, #4]
    1418:	460b      	mov	r3, r1
    141a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
    141c:	887a      	ldrh	r2, [r7, #2]
    141e:	687b      	ldr	r3, [r7, #4]
    1420:	60da      	str	r2, [r3, #12]
}
    1422:	370c      	adds	r7, #12
    1424:	46bd      	mov	sp, r7
    1426:	f85d 7b04 	ldr.w	r7, [sp], #4
    142a:	4770      	bx	lr

0000142c <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    142c:	b480      	push	{r7}
    142e:	b085      	sub	sp, #20
    1430:	af00      	add	r7, sp, #0
    1432:	6078      	str	r0, [r7, #4]
    1434:	460b      	mov	r3, r1
    1436:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0x00010000;
    1438:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    143c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
    143e:	887b      	ldrh	r3, [r7, #2]
    1440:	68fa      	ldr	r2, [r7, #12]
    1442:	4313      	orrs	r3, r2
    1444:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1446:	687b      	ldr	r3, [r7, #4]
    1448:	68fa      	ldr	r2, [r7, #12]
    144a:	619a      	str	r2, [r3, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
    144c:	887a      	ldrh	r2, [r7, #2]
    144e:	687b      	ldr	r3, [r7, #4]
    1450:	619a      	str	r2, [r3, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1452:	687b      	ldr	r3, [r7, #4]
    1454:	68fa      	ldr	r2, [r7, #12]
    1456:	619a      	str	r2, [r3, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    1458:	687b      	ldr	r3, [r7, #4]
    145a:	699b      	ldr	r3, [r3, #24]
    145c:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    145e:	687b      	ldr	r3, [r7, #4]
    1460:	699b      	ldr	r3, [r3, #24]
    1462:	60fb      	str	r3, [r7, #12]
}
    1464:	3714      	adds	r7, #20
    1466:	46bd      	mov	sp, r7
    1468:	f85d 7b04 	ldr.w	r7, [sp], #4
    146c:	4770      	bx	lr
    146e:	bf00      	nop

00001470 <GPIO_EventOutputConfig>:
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    1470:	b480      	push	{r7}
    1472:	b085      	sub	sp, #20
    1474:	af00      	add	r7, sp, #0
    1476:	4602      	mov	r2, r0
    1478:	460b      	mov	r3, r1
    147a:	71fa      	strb	r2, [r7, #7]
    147c:	71bb      	strb	r3, [r7, #6]
  uint32_t tmpreg = 0x00;
    147e:	2300      	movs	r3, #0
    1480:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmpreg = AFIO->EVCR;
    1482:	2300      	movs	r3, #0
    1484:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1488:	681b      	ldr	r3, [r3, #0]
    148a:	60fb      	str	r3, [r7, #12]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
    148c:	68fa      	ldr	r2, [r7, #12]
    148e:	f64f 7380 	movw	r3, #65408	; 0xff80
    1492:	4013      	ands	r3, r2
    1494:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
    1496:	79fb      	ldrb	r3, [r7, #7]
    1498:	011b      	lsls	r3, r3, #4
    149a:	68fa      	ldr	r2, [r7, #12]
    149c:	4313      	orrs	r3, r2
    149e:	60fb      	str	r3, [r7, #12]
  tmpreg |= GPIO_PinSource;
    14a0:	79bb      	ldrb	r3, [r7, #6]
    14a2:	68fa      	ldr	r2, [r7, #12]
    14a4:	4313      	orrs	r3, r2
    14a6:	60fb      	str	r3, [r7, #12]
  AFIO->EVCR = tmpreg;
    14a8:	2300      	movs	r3, #0
    14aa:	f2c4 0301 	movt	r3, #16385	; 0x4001
    14ae:	68fa      	ldr	r2, [r7, #12]
    14b0:	601a      	str	r2, [r3, #0]
}
    14b2:	3714      	adds	r7, #20
    14b4:	46bd      	mov	sp, r7
    14b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    14ba:	4770      	bx	lr

000014bc <GPIO_EventOutputCmd>:
  * @param  NewState: new state of the Event output.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_EventOutputCmd(FunctionalState NewState)
{
    14bc:	b480      	push	{r7}
    14be:	b083      	sub	sp, #12
    14c0:	af00      	add	r7, sp, #0
    14c2:	4603      	mov	r3, r0
    14c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
    14c6:	231c      	movs	r3, #28
    14c8:	f2c4 2320 	movt	r3, #16928	; 0x4220
    14cc:	79fa      	ldrb	r2, [r7, #7]
    14ce:	601a      	str	r2, [r3, #0]
}
    14d0:	370c      	adds	r7, #12
    14d2:	46bd      	mov	sp, r7
    14d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    14d8:	4770      	bx	lr
    14da:	bf00      	nop

000014dc <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
    14dc:	b480      	push	{r7}
    14de:	b087      	sub	sp, #28
    14e0:	af00      	add	r7, sp, #0
    14e2:	6078      	str	r0, [r7, #4]
    14e4:	460b      	mov	r3, r1
    14e6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
    14e8:	2300      	movs	r3, #0
    14ea:	613b      	str	r3, [r7, #16]
    14ec:	2300      	movs	r3, #0
    14ee:	60fb      	str	r3, [r7, #12]
    14f0:	2300      	movs	r3, #0
    14f2:	617b      	str	r3, [r7, #20]
    14f4:	2300      	movs	r3, #0
    14f6:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    14f8:	687b      	ldr	r3, [r7, #4]
    14fa:	2b00      	cmp	r3, #0
    14fc:	da05      	bge.n	150a <GPIO_PinRemapConfig+0x2e>
  {
    tmpreg = AFIO->MAPR2;
    14fe:	2300      	movs	r3, #0
    1500:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1504:	69db      	ldr	r3, [r3, #28]
    1506:	617b      	str	r3, [r7, #20]
    1508:	e004      	b.n	1514 <GPIO_PinRemapConfig+0x38>
  }
  else
  {
    tmpreg = AFIO->MAPR;
    150a:	2300      	movs	r3, #0
    150c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1510:	685b      	ldr	r3, [r3, #4]
    1512:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
    1514:	687b      	ldr	r3, [r7, #4]
    1516:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    151a:	0c1b      	lsrs	r3, r3, #16
    151c:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
    151e:	687b      	ldr	r3, [r7, #4]
    1520:	b29b      	uxth	r3, r3
    1522:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
    1524:	687b      	ldr	r3, [r7, #4]
    1526:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    152a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
    152e:	d10e      	bne.n	154e <GPIO_PinRemapConfig+0x72>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    1530:	697b      	ldr	r3, [r7, #20]
    1532:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    1536:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
    1538:	2300      	movs	r3, #0
    153a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    153e:	2200      	movs	r2, #0
    1540:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1544:	6852      	ldr	r2, [r2, #4]
    1546:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
    154a:	605a      	str	r2, [r3, #4]
    154c:	e021      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
    154e:	687b      	ldr	r3, [r7, #4]
    1550:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    1554:	2b00      	cmp	r3, #0
    1556:	d00e      	beq.n	1576 <GPIO_PinRemapConfig+0x9a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
    1558:	68bb      	ldr	r3, [r7, #8]
    155a:	2203      	movs	r2, #3
    155c:	fa02 f303 	lsl.w	r3, r2, r3
    1560:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
    1562:	68fb      	ldr	r3, [r7, #12]
    1564:	43db      	mvns	r3, r3
    1566:	697a      	ldr	r2, [r7, #20]
    1568:	4013      	ands	r3, r2
    156a:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    156c:	697b      	ldr	r3, [r7, #20]
    156e:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1572:	617b      	str	r3, [r7, #20]
    1574:	e00d      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    1576:	687b      	ldr	r3, [r7, #4]
    1578:	0d5b      	lsrs	r3, r3, #21
    157a:	011b      	lsls	r3, r3, #4
    157c:	693a      	ldr	r2, [r7, #16]
    157e:	fa02 f303 	lsl.w	r3, r2, r3
    1582:	43db      	mvns	r3, r3
    1584:	697a      	ldr	r2, [r7, #20]
    1586:	4013      	ands	r3, r2
    1588:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    158a:	697b      	ldr	r3, [r7, #20]
    158c:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1590:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
    1592:	78fb      	ldrb	r3, [r7, #3]
    1594:	2b00      	cmp	r3, #0
    1596:	d008      	beq.n	15aa <GPIO_PinRemapConfig+0xce>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
    1598:	687b      	ldr	r3, [r7, #4]
    159a:	0d5b      	lsrs	r3, r3, #21
    159c:	011b      	lsls	r3, r3, #4
    159e:	693a      	ldr	r2, [r7, #16]
    15a0:	fa02 f303 	lsl.w	r3, r2, r3
    15a4:	697a      	ldr	r2, [r7, #20]
    15a6:	4313      	orrs	r3, r2
    15a8:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    15aa:	687b      	ldr	r3, [r7, #4]
    15ac:	2b00      	cmp	r3, #0
    15ae:	da05      	bge.n	15bc <GPIO_PinRemapConfig+0xe0>
  {
    AFIO->MAPR2 = tmpreg;
    15b0:	2300      	movs	r3, #0
    15b2:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15b6:	697a      	ldr	r2, [r7, #20]
    15b8:	61da      	str	r2, [r3, #28]
    15ba:	e004      	b.n	15c6 <GPIO_PinRemapConfig+0xea>
  }
  else
  {
    AFIO->MAPR = tmpreg;
    15bc:	2300      	movs	r3, #0
    15be:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15c2:	697a      	ldr	r2, [r7, #20]
    15c4:	605a      	str	r2, [r3, #4]
  }
}
    15c6:	371c      	adds	r7, #28
    15c8:	46bd      	mov	sp, r7
    15ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    15ce:	4770      	bx	lr

000015d0 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    15d0:	b490      	push	{r4, r7}
    15d2:	b084      	sub	sp, #16
    15d4:	af00      	add	r7, sp, #0
    15d6:	4602      	mov	r2, r0
    15d8:	460b      	mov	r3, r1
    15da:	71fa      	strb	r2, [r7, #7]
    15dc:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
    15de:	2300      	movs	r3, #0
    15e0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
    15e2:	79bb      	ldrb	r3, [r7, #6]
    15e4:	f003 0303 	and.w	r3, r3, #3
    15e8:	009b      	lsls	r3, r3, #2
    15ea:	220f      	movs	r2, #15
    15ec:	fa02 f303 	lsl.w	r3, r2, r3
    15f0:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
    15f2:	2300      	movs	r3, #0
    15f4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15f8:	79ba      	ldrb	r2, [r7, #6]
    15fa:	0892      	lsrs	r2, r2, #2
    15fc:	b2d2      	uxtb	r2, r2
    15fe:	4610      	mov	r0, r2
    1600:	2200      	movs	r2, #0
    1602:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1606:	79b9      	ldrb	r1, [r7, #6]
    1608:	0889      	lsrs	r1, r1, #2
    160a:	b2c9      	uxtb	r1, r1
    160c:	3102      	adds	r1, #2
    160e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    1612:	68fa      	ldr	r2, [r7, #12]
    1614:	43d2      	mvns	r2, r2
    1616:	4011      	ands	r1, r2
    1618:	1c82      	adds	r2, r0, #2
    161a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
    161e:	2300      	movs	r3, #0
    1620:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1624:	79ba      	ldrb	r2, [r7, #6]
    1626:	0892      	lsrs	r2, r2, #2
    1628:	b2d2      	uxtb	r2, r2
    162a:	4610      	mov	r0, r2
    162c:	2200      	movs	r2, #0
    162e:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1632:	79b9      	ldrb	r1, [r7, #6]
    1634:	0889      	lsrs	r1, r1, #2
    1636:	b2c9      	uxtb	r1, r1
    1638:	3102      	adds	r1, #2
    163a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    163e:	79fc      	ldrb	r4, [r7, #7]
    1640:	79ba      	ldrb	r2, [r7, #6]
    1642:	f002 0203 	and.w	r2, r2, #3
    1646:	0092      	lsls	r2, r2, #2
    1648:	fa04 f202 	lsl.w	r2, r4, r2
    164c:	4311      	orrs	r1, r2
    164e:	1c82      	adds	r2, r0, #2
    1650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    1654:	3710      	adds	r7, #16
    1656:	46bd      	mov	sp, r7
    1658:	bc90      	pop	{r4, r7}
    165a:	4770      	bx	lr

0000165c <GPIO_ETH_MediaInterfaceConfig>:
  *     @arg GPIO_ETH_MediaInterface_MII: MII mode
  *     @arg GPIO_ETH_MediaInterface_RMII: RMII mode
  * @retval None
  */
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface)
{
    165c:	b480      	push	{r7}
    165e:	b083      	sub	sp, #12
    1660:	af00      	add	r7, sp, #0
    1662:	6078      	str	r0, [r7, #4]
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface));

  /* Configure MII_RMII selection bit */
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface;
    1664:	23dc      	movs	r3, #220	; 0xdc
    1666:	f2c4 2320 	movt	r3, #16928	; 0x4220
    166a:	687a      	ldr	r2, [r7, #4]
    166c:	601a      	str	r2, [r3, #0]
}
    166e:	370c      	adds	r7, #12
    1670:	46bd      	mov	sp, r7
    1672:	f85d 7b04 	ldr.w	r7, [sp], #4
    1676:	4770      	bx	lr

00001678 <USART_DeInit>:
  *   This parameter can be one of the following values:
  *      USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
    1678:	b580      	push	{r7, lr}
    167a:	b082      	sub	sp, #8
    167c:	af00      	add	r7, sp, #0
    167e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
    1680:	687a      	ldr	r2, [r7, #4]
    1682:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    1686:	f2c4 0301 	movt	r3, #16385	; 0x4001
    168a:	429a      	cmp	r2, r3
    168c:	d10a      	bne.n	16a4 <USART_DeInit+0x2c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    168e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    1692:	2101      	movs	r1, #1
    1694:	f7ff fbe4 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
    1698:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    169c:	2100      	movs	r1, #0
    169e:	f7ff fbdf 	bl	e60 <RCC_APB2PeriphResetCmd>
    16a2:	e046      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART2)
    16a4:	687a      	ldr	r2, [r7, #4]
    16a6:	f44f 4388 	mov.w	r3, #17408	; 0x4400
    16aa:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16ae:	429a      	cmp	r2, r3
    16b0:	d10a      	bne.n	16c8 <USART_DeInit+0x50>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    16b2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16b6:	2101      	movs	r1, #1
    16b8:	f7ff fbfa 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
    16bc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16c0:	2100      	movs	r1, #0
    16c2:	f7ff fbf5 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16c6:	e034      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART3)
    16c8:	687a      	ldr	r2, [r7, #4]
    16ca:	f44f 4390 	mov.w	r3, #18432	; 0x4800
    16ce:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16d2:	429a      	cmp	r2, r3
    16d4:	d10a      	bne.n	16ec <USART_DeInit+0x74>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    16d6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16da:	2101      	movs	r1, #1
    16dc:	f7ff fbe8 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
    16e0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16e4:	2100      	movs	r1, #0
    16e6:	f7ff fbe3 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16ea:	e022      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == UART4)
    16ec:	687a      	ldr	r2, [r7, #4]
    16ee:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
    16f2:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16f6:	429a      	cmp	r2, r3
    16f8:	d10a      	bne.n	1710 <USART_DeInit+0x98>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    16fa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    16fe:	2101      	movs	r1, #1
    1700:	f7ff fbd6 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
    1704:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1708:	2100      	movs	r1, #0
    170a:	f7ff fbd1 	bl	eb0 <RCC_APB1PeriphResetCmd>
    170e:	e010      	b.n	1732 <USART_DeInit+0xba>
  }
  else
  {
    if (USARTx == UART5)
    1710:	687a      	ldr	r2, [r7, #4]
    1712:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    1716:	f2c4 0300 	movt	r3, #16384	; 0x4000
    171a:	429a      	cmp	r2, r3
    171c:	d109      	bne.n	1732 <USART_DeInit+0xba>
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    171e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    1722:	2101      	movs	r1, #1
    1724:	f7ff fbc4 	bl	eb0 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    1728:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    172c:	2100      	movs	r1, #0
    172e:	f7ff fbbf 	bl	eb0 <RCC_APB1PeriphResetCmd>
    }
  }
}
    1732:	3708      	adds	r7, #8
    1734:	46bd      	mov	sp, r7
    1736:	bd80      	pop	{r7, pc}

00001738 <USART_Init>:
  *         that contains the configuration information for the specified USART
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
    1738:	b580      	push	{r7, lr}
    173a:	b08c      	sub	sp, #48	; 0x30
    173c:	af00      	add	r7, sp, #0
    173e:	6078      	str	r0, [r7, #4]
    1740:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
    1742:	2300      	movs	r3, #0
    1744:	62fb      	str	r3, [r7, #44]	; 0x2c
    1746:	2300      	movs	r3, #0
    1748:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
    174a:	2300      	movs	r3, #0
    174c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
    174e:	2300      	movs	r3, #0
    1750:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
    1752:	2300      	movs	r3, #0
    1754:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    1756:	687b      	ldr	r3, [r7, #4]
    1758:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    175a:	687b      	ldr	r3, [r7, #4]
    175c:	8a1b      	ldrh	r3, [r3, #16]
    175e:	b29b      	uxth	r3, r3
    1760:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
    1762:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1764:	f64c 73ff 	movw	r3, #53247	; 0xcfff
    1768:	4013      	ands	r3, r2
    176a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
    176c:	683b      	ldr	r3, [r7, #0]
    176e:	88db      	ldrh	r3, [r3, #6]
    1770:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1772:	4313      	orrs	r3, r2
    1774:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1778:	b29a      	uxth	r2, r3
    177a:	687b      	ldr	r3, [r7, #4]
    177c:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
    177e:	687b      	ldr	r3, [r7, #4]
    1780:	899b      	ldrh	r3, [r3, #12]
    1782:	b29b      	uxth	r3, r3
    1784:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
    1786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1788:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
    178c:	4013      	ands	r3, r2
    178e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    1790:	683b      	ldr	r3, [r7, #0]
    1792:	889a      	ldrh	r2, [r3, #4]
    1794:	683b      	ldr	r3, [r7, #0]
    1796:	891b      	ldrh	r3, [r3, #8]
    1798:	4313      	orrs	r3, r2
    179a:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
    179c:	683b      	ldr	r3, [r7, #0]
    179e:	895b      	ldrh	r3, [r3, #10]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    17a0:	4313      	orrs	r3, r2
    17a2:	b29b      	uxth	r3, r3
    17a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17a6:	4313      	orrs	r3, r2
    17a8:	62fb      	str	r3, [r7, #44]	; 0x2c
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
    17aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17ac:	b29a      	uxth	r2, r3
    17ae:	687b      	ldr	r3, [r7, #4]
    17b0:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/
  tmpreg = USARTx->CR3;
    17b2:	687b      	ldr	r3, [r7, #4]
    17b4:	8a9b      	ldrh	r3, [r3, #20]
    17b6:	b29b      	uxth	r3, r3
    17b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
    17ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17bc:	f64f 43ff 	movw	r3, #64767	; 0xfcff
    17c0:	4013      	ands	r3, r2
    17c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
    17c4:	683b      	ldr	r3, [r7, #0]
    17c6:	899b      	ldrh	r3, [r3, #12]
    17c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17ca:	4313      	orrs	r3, r2
    17cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
    17ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17d0:	b29a      	uxth	r2, r3
    17d2:	687b      	ldr	r3, [r7, #4]
    17d4:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
    17d6:	f107 0308 	add.w	r3, r7, #8
    17da:	4618      	mov	r0, r3
    17dc:	f7ff f9ea 	bl	bb4 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
    17e0:	69fa      	ldr	r2, [r7, #28]
    17e2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    17e6:	f2c4 0301 	movt	r3, #16385	; 0x4001
    17ea:	429a      	cmp	r2, r3
    17ec:	d102      	bne.n	17f4 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
    17ee:	697b      	ldr	r3, [r7, #20]
    17f0:	62bb      	str	r3, [r7, #40]	; 0x28
    17f2:	e001      	b.n	17f8 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
    17f4:	693b      	ldr	r3, [r7, #16]
    17f6:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    17f8:	687b      	ldr	r3, [r7, #4]
    17fa:	899b      	ldrh	r3, [r3, #12]
    17fc:	b29b      	uxth	r3, r3
    17fe:	b29b      	uxth	r3, r3
    1800:	b21b      	sxth	r3, r3
    1802:	2b00      	cmp	r3, #0
    1804:	da0c      	bge.n	1820 <USART_Init+0xe8>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));
    1806:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1808:	4613      	mov	r3, r2
    180a:	009b      	lsls	r3, r3, #2
    180c:	4413      	add	r3, r2
    180e:	009a      	lsls	r2, r3, #2
    1810:	441a      	add	r2, r3
    1812:	683b      	ldr	r3, [r7, #0]
    1814:	681b      	ldr	r3, [r3, #0]
    1816:	005b      	lsls	r3, r3, #1
    1818:	fbb2 f3f3 	udiv	r3, r2, r3
    181c:	627b      	str	r3, [r7, #36]	; 0x24
    181e:	e00b      	b.n	1838 <USART_Init+0x100>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));
    1820:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1822:	4613      	mov	r3, r2
    1824:	009b      	lsls	r3, r3, #2
    1826:	4413      	add	r3, r2
    1828:	009a      	lsls	r2, r3, #2
    182a:	441a      	add	r2, r3
    182c:	683b      	ldr	r3, [r7, #0]
    182e:	681b      	ldr	r3, [r3, #0]
    1830:	009b      	lsls	r3, r3, #2
    1832:	fbb2 f3f3 	udiv	r3, r2, r3
    1836:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
    1838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    183a:	f248 531f 	movw	r3, #34079	; 0x851f
    183e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    1842:	fba3 1302 	umull	r1, r3, r3, r2
    1846:	095b      	lsrs	r3, r3, #5
    1848:	011b      	lsls	r3, r3, #4
    184a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
    184c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    184e:	091b      	lsrs	r3, r3, #4
    1850:	2264      	movs	r2, #100	; 0x64
    1852:	fb02 f303 	mul.w	r3, r2, r3
    1856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1858:	1ad3      	subs	r3, r2, r3
    185a:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    185c:	687b      	ldr	r3, [r7, #4]
    185e:	899b      	ldrh	r3, [r3, #12]
    1860:	b29b      	uxth	r3, r3
    1862:	b29b      	uxth	r3, r3
    1864:	b21b      	sxth	r3, r3
    1866:	2b00      	cmp	r3, #0
    1868:	da10      	bge.n	188c <USART_Init+0x154>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
    186a:	6a3b      	ldr	r3, [r7, #32]
    186c:	00db      	lsls	r3, r3, #3
    186e:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1872:	f248 531f 	movw	r3, #34079	; 0x851f
    1876:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    187a:	fba3 1302 	umull	r1, r3, r3, r2
    187e:	095b      	lsrs	r3, r3, #5
    1880:	f003 0307 	and.w	r3, r3, #7
    1884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1886:	4313      	orrs	r3, r2
    1888:	62fb      	str	r3, [r7, #44]	; 0x2c
    188a:	e00f      	b.n	18ac <USART_Init+0x174>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
    188c:	6a3b      	ldr	r3, [r7, #32]
    188e:	011b      	lsls	r3, r3, #4
    1890:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1894:	f248 531f 	movw	r3, #34079	; 0x851f
    1898:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    189c:	fba3 1302 	umull	r1, r3, r3, r2
    18a0:	095b      	lsrs	r3, r3, #5
    18a2:	f003 030f 	and.w	r3, r3, #15
    18a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    18a8:	4313      	orrs	r3, r2
    18aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
    18ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    18ae:	b29a      	uxth	r2, r3
    18b0:	687b      	ldr	r3, [r7, #4]
    18b2:	811a      	strh	r2, [r3, #8]
}
    18b4:	3730      	adds	r7, #48	; 0x30
    18b6:	46bd      	mov	sp, r7
    18b8:	bd80      	pop	{r7, pc}
    18ba:	bf00      	nop

000018bc <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
    18bc:	b480      	push	{r7}
    18be:	b083      	sub	sp, #12
    18c0:	af00      	add	r7, sp, #0
    18c2:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
    18c4:	687b      	ldr	r3, [r7, #4]
    18c6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
    18ca:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
    18cc:	687b      	ldr	r3, [r7, #4]
    18ce:	2200      	movs	r2, #0
    18d0:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
    18d2:	687b      	ldr	r3, [r7, #4]
    18d4:	2200      	movs	r2, #0
    18d6:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
    18d8:	687b      	ldr	r3, [r7, #4]
    18da:	2200      	movs	r2, #0
    18dc:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    18de:	687b      	ldr	r3, [r7, #4]
    18e0:	220c      	movs	r2, #12
    18e2:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    18e4:	687b      	ldr	r3, [r7, #4]
    18e6:	2200      	movs	r2, #0
    18e8:	819a      	strh	r2, [r3, #12]
}
    18ea:	370c      	adds	r7, #12
    18ec:	46bd      	mov	sp, r7
    18ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    18f2:	4770      	bx	lr

000018f4 <USART_ClockInit>:
  *         USART peripheral.
  * @note The Smart Card and Synchronous modes are not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    18f4:	b480      	push	{r7}
    18f6:	b085      	sub	sp, #20
    18f8:	af00      	add	r7, sp, #0
    18fa:	6078      	str	r0, [r7, #4]
    18fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
    18fe:	2300      	movs	r3, #0
    1900:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    1902:	687b      	ldr	r3, [r7, #4]
    1904:	8a1b      	ldrh	r3, [r3, #16]
    1906:	b29b      	uxth	r3, r3
    1908:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
    190a:	68fa      	ldr	r2, [r7, #12]
    190c:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
    1910:	4013      	ands	r3, r2
    1912:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1914:	683b      	ldr	r3, [r7, #0]
    1916:	881a      	ldrh	r2, [r3, #0]
    1918:	683b      	ldr	r3, [r7, #0]
    191a:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
    191c:	4313      	orrs	r3, r2
    191e:	b29a      	uxth	r2, r3
    1920:	683b      	ldr	r3, [r7, #0]
    1922:	889b      	ldrh	r3, [r3, #4]
    1924:	4313      	orrs	r3, r2
    1926:	b29a      	uxth	r2, r3
    1928:	683b      	ldr	r3, [r7, #0]
    192a:	88db      	ldrh	r3, [r3, #6]
    192c:	4313      	orrs	r3, r2
    192e:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1930:	68fa      	ldr	r2, [r7, #12]
    1932:	4313      	orrs	r3, r2
    1934:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1936:	68fb      	ldr	r3, [r7, #12]
    1938:	b29a      	uxth	r2, r3
    193a:	687b      	ldr	r3, [r7, #4]
    193c:	821a      	strh	r2, [r3, #16]
}
    193e:	3714      	adds	r7, #20
    1940:	46bd      	mov	sp, r7
    1942:	f85d 7b04 	ldr.w	r7, [sp], #4
    1946:	4770      	bx	lr

00001948 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    1948:	b480      	push	{r7}
    194a:	b083      	sub	sp, #12
    194c:	af00      	add	r7, sp, #0
    194e:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
    1950:	687b      	ldr	r3, [r7, #4]
    1952:	2200      	movs	r2, #0
    1954:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
    1956:	687b      	ldr	r3, [r7, #4]
    1958:	2200      	movs	r2, #0
    195a:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
    195c:	687b      	ldr	r3, [r7, #4]
    195e:	2200      	movs	r2, #0
    1960:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
    1962:	687b      	ldr	r3, [r7, #4]
    1964:	2200      	movs	r2, #0
    1966:	80da      	strh	r2, [r3, #6]
}
    1968:	370c      	adds	r7, #12
    196a:	46bd      	mov	sp, r7
    196c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1970:	4770      	bx	lr
    1972:	bf00      	nop

00001974 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1974:	b480      	push	{r7}
    1976:	b083      	sub	sp, #12
    1978:	af00      	add	r7, sp, #0
    197a:	6078      	str	r0, [r7, #4]
    197c:	460b      	mov	r3, r1
    197e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1980:	78fb      	ldrb	r3, [r7, #3]
    1982:	2b00      	cmp	r3, #0
    1984:	d008      	beq.n	1998 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
    1986:	687b      	ldr	r3, [r7, #4]
    1988:	899b      	ldrh	r3, [r3, #12]
    198a:	b29b      	uxth	r3, r3
    198c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1990:	b29a      	uxth	r2, r3
    1992:	687b      	ldr	r3, [r7, #4]
    1994:	819a      	strh	r2, [r3, #12]
    1996:	e007      	b.n	19a8 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
    1998:	687b      	ldr	r3, [r7, #4]
    199a:	899b      	ldrh	r3, [r3, #12]
    199c:	b29b      	uxth	r3, r3
    199e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    19a2:	b29a      	uxth	r2, r3
    19a4:	687b      	ldr	r3, [r7, #4]
    19a6:	819a      	strh	r2, [r3, #12]
  }
}
    19a8:	370c      	adds	r7, #12
    19aa:	46bd      	mov	sp, r7
    19ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    19b0:	4770      	bx	lr
    19b2:	bf00      	nop

000019b4 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
    19b4:	b480      	push	{r7}
    19b6:	b087      	sub	sp, #28
    19b8:	af00      	add	r7, sp, #0
    19ba:	6078      	str	r0, [r7, #4]
    19bc:	4613      	mov	r3, r2
    19be:	460a      	mov	r2, r1
    19c0:	807a      	strh	r2, [r7, #2]
    19c2:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
    19c4:	2300      	movs	r3, #0
    19c6:	613b      	str	r3, [r7, #16]
    19c8:	2300      	movs	r3, #0
    19ca:	60fb      	str	r3, [r7, #12]
    19cc:	2300      	movs	r3, #0
    19ce:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
    19d0:	2300      	movs	r3, #0
    19d2:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    19d4:	687b      	ldr	r3, [r7, #4]
    19d6:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    19d8:	887b      	ldrh	r3, [r7, #2]
    19da:	b2db      	uxtb	r3, r3
    19dc:	095b      	lsrs	r3, r3, #5
    19de:	b2db      	uxtb	r3, r3
    19e0:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
    19e2:	887b      	ldrh	r3, [r7, #2]
    19e4:	f003 031f 	and.w	r3, r3, #31
    19e8:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
    19ea:	68fb      	ldr	r3, [r7, #12]
    19ec:	2201      	movs	r2, #1
    19ee:	fa02 f303 	lsl.w	r3, r2, r3
    19f2:	60bb      	str	r3, [r7, #8]

  if (usartreg == 0x01) /* The IT is in CR1 register */
    19f4:	693b      	ldr	r3, [r7, #16]
    19f6:	2b01      	cmp	r3, #1
    19f8:	d103      	bne.n	1a02 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
    19fa:	697b      	ldr	r3, [r7, #20]
    19fc:	330c      	adds	r3, #12
    19fe:	617b      	str	r3, [r7, #20]
    1a00:	e009      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
    1a02:	693b      	ldr	r3, [r7, #16]
    1a04:	2b02      	cmp	r3, #2
    1a06:	d103      	bne.n	1a10 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
    1a08:	697b      	ldr	r3, [r7, #20]
    1a0a:	3310      	adds	r3, #16
    1a0c:	617b      	str	r3, [r7, #20]
    1a0e:	e002      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14;
    1a10:	697b      	ldr	r3, [r7, #20]
    1a12:	3314      	adds	r3, #20
    1a14:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
    1a16:	787b      	ldrb	r3, [r7, #1]
    1a18:	2b00      	cmp	r3, #0
    1a1a:	d006      	beq.n	1a2a <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
    1a1c:	697b      	ldr	r3, [r7, #20]
    1a1e:	697a      	ldr	r2, [r7, #20]
    1a20:	6811      	ldr	r1, [r2, #0]
    1a22:	68ba      	ldr	r2, [r7, #8]
    1a24:	430a      	orrs	r2, r1
    1a26:	601a      	str	r2, [r3, #0]
    1a28:	e006      	b.n	1a38 <USART_ITConfig+0x84>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
    1a2a:	697b      	ldr	r3, [r7, #20]
    1a2c:	697a      	ldr	r2, [r7, #20]
    1a2e:	6811      	ldr	r1, [r2, #0]
    1a30:	68ba      	ldr	r2, [r7, #8]
    1a32:	43d2      	mvns	r2, r2
    1a34:	400a      	ands	r2, r1
    1a36:	601a      	str	r2, [r3, #0]
  }
}
    1a38:	371c      	adds	r7, #28
    1a3a:	46bd      	mov	sp, r7
    1a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a40:	4770      	bx	lr
    1a42:	bf00      	nop

00001a44 <USART_DMACmd>:
  * @note The DMA mode is not available for UART5 except in the STM32
  *       High density value line devices(STM32F10X_HD_VL).
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
    1a44:	b480      	push	{r7}
    1a46:	b083      	sub	sp, #12
    1a48:	af00      	add	r7, sp, #0
    1a4a:	6078      	str	r0, [r7, #4]
    1a4c:	4613      	mov	r3, r2
    1a4e:	460a      	mov	r2, r1
    1a50:	807a      	strh	r2, [r7, #2]
    1a52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1a54:	787b      	ldrb	r3, [r7, #1]
    1a56:	2b00      	cmp	r3, #0
    1a58:	d008      	beq.n	1a6c <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
    1a5a:	687b      	ldr	r3, [r7, #4]
    1a5c:	8a9b      	ldrh	r3, [r3, #20]
    1a5e:	b29a      	uxth	r2, r3
    1a60:	887b      	ldrh	r3, [r7, #2]
    1a62:	4313      	orrs	r3, r2
    1a64:	b29a      	uxth	r2, r3
    1a66:	687b      	ldr	r3, [r7, #4]
    1a68:	829a      	strh	r2, [r3, #20]
    1a6a:	e009      	b.n	1a80 <USART_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
    1a6c:	687b      	ldr	r3, [r7, #4]
    1a6e:	8a9b      	ldrh	r3, [r3, #20]
    1a70:	b29a      	uxth	r2, r3
    1a72:	887b      	ldrh	r3, [r7, #2]
    1a74:	43db      	mvns	r3, r3
    1a76:	b29b      	uxth	r3, r3
    1a78:	4013      	ands	r3, r2
    1a7a:	b29a      	uxth	r2, r3
    1a7c:	687b      	ldr	r3, [r7, #4]
    1a7e:	829a      	strh	r2, [r3, #20]
  }
}
    1a80:	370c      	adds	r7, #12
    1a82:	46bd      	mov	sp, r7
    1a84:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a88:	4770      	bx	lr
    1a8a:	bf00      	nop

00001a8c <USART_SetAddress>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
    1a8c:	b480      	push	{r7}
    1a8e:	b083      	sub	sp, #12
    1a90:	af00      	add	r7, sp, #0
    1a92:	6078      	str	r0, [r7, #4]
    1a94:	460b      	mov	r3, r1
    1a96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address));

  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
    1a98:	687b      	ldr	r3, [r7, #4]
    1a9a:	8a1b      	ldrh	r3, [r3, #16]
    1a9c:	b29b      	uxth	r3, r3
    1a9e:	f023 030f 	bic.w	r3, r3, #15
    1aa2:	b29a      	uxth	r2, r3
    1aa4:	687b      	ldr	r3, [r7, #4]
    1aa6:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
    1aa8:	687b      	ldr	r3, [r7, #4]
    1aaa:	8a1b      	ldrh	r3, [r3, #16]
    1aac:	b29a      	uxth	r2, r3
    1aae:	78fb      	ldrb	r3, [r7, #3]
    1ab0:	b29b      	uxth	r3, r3
    1ab2:	4313      	orrs	r3, r2
    1ab4:	b29a      	uxth	r2, r3
    1ab6:	687b      	ldr	r3, [r7, #4]
    1ab8:	821a      	strh	r2, [r3, #16]
}
    1aba:	370c      	adds	r7, #12
    1abc:	46bd      	mov	sp, r7
    1abe:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ac2:	4770      	bx	lr

00001ac4 <USART_WakeUpConfig>:
  *     @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *     @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
    1ac4:	b480      	push	{r7}
    1ac6:	b083      	sub	sp, #12
    1ac8:	af00      	add	r7, sp, #0
    1aca:	6078      	str	r0, [r7, #4]
    1acc:	460b      	mov	r3, r1
    1ace:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));

  USARTx->CR1 &= CR1_WAKE_Mask;
    1ad0:	687b      	ldr	r3, [r7, #4]
    1ad2:	899b      	ldrh	r3, [r3, #12]
    1ad4:	b29b      	uxth	r3, r3
    1ad6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1ada:	b29a      	uxth	r2, r3
    1adc:	687b      	ldr	r3, [r7, #4]
    1ade:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
    1ae0:	687b      	ldr	r3, [r7, #4]
    1ae2:	899b      	ldrh	r3, [r3, #12]
    1ae4:	b29a      	uxth	r2, r3
    1ae6:	887b      	ldrh	r3, [r7, #2]
    1ae8:	4313      	orrs	r3, r2
    1aea:	b29a      	uxth	r2, r3
    1aec:	687b      	ldr	r3, [r7, #4]
    1aee:	819a      	strh	r2, [r3, #12]
}
    1af0:	370c      	adds	r7, #12
    1af2:	46bd      	mov	sp, r7
    1af4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1af8:	4770      	bx	lr
    1afa:	bf00      	nop

00001afc <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1afc:	b480      	push	{r7}
    1afe:	b083      	sub	sp, #12
    1b00:	af00      	add	r7, sp, #0
    1b02:	6078      	str	r0, [r7, #4]
    1b04:	460b      	mov	r3, r1
    1b06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b08:	78fb      	ldrb	r3, [r7, #3]
    1b0a:	2b00      	cmp	r3, #0
    1b0c:	d008      	beq.n	1b20 <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
    1b0e:	687b      	ldr	r3, [r7, #4]
    1b10:	899b      	ldrh	r3, [r3, #12]
    1b12:	b29b      	uxth	r3, r3
    1b14:	f043 0302 	orr.w	r3, r3, #2
    1b18:	b29a      	uxth	r2, r3
    1b1a:	687b      	ldr	r3, [r7, #4]
    1b1c:	819a      	strh	r2, [r3, #12]
    1b1e:	e007      	b.n	1b30 <USART_ReceiverWakeUpCmd+0x34>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
    1b20:	687b      	ldr	r3, [r7, #4]
    1b22:	899b      	ldrh	r3, [r3, #12]
    1b24:	b29b      	uxth	r3, r3
    1b26:	f023 0302 	bic.w	r3, r3, #2
    1b2a:	b29a      	uxth	r2, r3
    1b2c:	687b      	ldr	r3, [r7, #4]
    1b2e:	819a      	strh	r2, [r3, #12]
  }
}
    1b30:	370c      	adds	r7, #12
    1b32:	46bd      	mov	sp, r7
    1b34:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b38:	4770      	bx	lr
    1b3a:	bf00      	nop

00001b3c <USART_LINBreakDetectLengthConfig>:
  *     @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *     @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
    1b3c:	b480      	push	{r7}
    1b3e:	b083      	sub	sp, #12
    1b40:	af00      	add	r7, sp, #0
    1b42:	6078      	str	r0, [r7, #4]
    1b44:	460b      	mov	r3, r1
    1b46:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));

  USARTx->CR2 &= CR2_LBDL_Mask;
    1b48:	687b      	ldr	r3, [r7, #4]
    1b4a:	8a1b      	ldrh	r3, [r3, #16]
    1b4c:	b29b      	uxth	r3, r3
    1b4e:	f023 0320 	bic.w	r3, r3, #32
    1b52:	b29a      	uxth	r2, r3
    1b54:	687b      	ldr	r3, [r7, #4]
    1b56:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;
    1b58:	687b      	ldr	r3, [r7, #4]
    1b5a:	8a1b      	ldrh	r3, [r3, #16]
    1b5c:	b29a      	uxth	r2, r3
    1b5e:	887b      	ldrh	r3, [r7, #2]
    1b60:	4313      	orrs	r3, r2
    1b62:	b29a      	uxth	r2, r3
    1b64:	687b      	ldr	r3, [r7, #4]
    1b66:	821a      	strh	r2, [r3, #16]
}
    1b68:	370c      	adds	r7, #12
    1b6a:	46bd      	mov	sp, r7
    1b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b70:	4770      	bx	lr
    1b72:	bf00      	nop

00001b74 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1b74:	b480      	push	{r7}
    1b76:	b083      	sub	sp, #12
    1b78:	af00      	add	r7, sp, #0
    1b7a:	6078      	str	r0, [r7, #4]
    1b7c:	460b      	mov	r3, r1
    1b7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b80:	78fb      	ldrb	r3, [r7, #3]
    1b82:	2b00      	cmp	r3, #0
    1b84:	d008      	beq.n	1b98 <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
    1b86:	687b      	ldr	r3, [r7, #4]
    1b88:	8a1b      	ldrh	r3, [r3, #16]
    1b8a:	b29b      	uxth	r3, r3
    1b8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1b90:	b29a      	uxth	r2, r3
    1b92:	687b      	ldr	r3, [r7, #4]
    1b94:	821a      	strh	r2, [r3, #16]
    1b96:	e007      	b.n	1ba8 <USART_LINCmd+0x34>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
    1b98:	687b      	ldr	r3, [r7, #4]
    1b9a:	8a1b      	ldrh	r3, [r3, #16]
    1b9c:	b29b      	uxth	r3, r3
    1b9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    1ba2:	b29a      	uxth	r2, r3
    1ba4:	687b      	ldr	r3, [r7, #4]
    1ba6:	821a      	strh	r2, [r3, #16]
  }
}
    1ba8:	370c      	adds	r7, #12
    1baa:	46bd      	mov	sp, r7
    1bac:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bb0:	4770      	bx	lr
    1bb2:	bf00      	nop

00001bb4 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
    1bb4:	b480      	push	{r7}
    1bb6:	b083      	sub	sp, #12
    1bb8:	af00      	add	r7, sp, #0
    1bba:	6078      	str	r0, [r7, #4]
    1bbc:	460b      	mov	r3, r1
    1bbe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data));

  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
    1bc0:	887b      	ldrh	r3, [r7, #2]
    1bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bc6:	b29a      	uxth	r2, r3
    1bc8:	687b      	ldr	r3, [r7, #4]
    1bca:	809a      	strh	r2, [r3, #4]
}
    1bcc:	370c      	adds	r7, #12
    1bce:	46bd      	mov	sp, r7
    1bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bd4:	4770      	bx	lr
    1bd6:	bf00      	nop

00001bd8 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
    1bd8:	b480      	push	{r7}
    1bda:	b083      	sub	sp, #12
    1bdc:	af00      	add	r7, sp, #0
    1bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
    1be0:	687b      	ldr	r3, [r7, #4]
    1be2:	889b      	ldrh	r3, [r3, #4]
    1be4:	b29b      	uxth	r3, r3
    1be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bea:	b29b      	uxth	r3, r3
}
    1bec:	4618      	mov	r0, r3
    1bee:	370c      	adds	r7, #12
    1bf0:	46bd      	mov	sp, r7
    1bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bf6:	4770      	bx	lr

00001bf8 <USART_SendBreak>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
    1bf8:	b480      	push	{r7}
    1bfa:	b083      	sub	sp, #12
    1bfc:	af00      	add	r7, sp, #0
    1bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
    1c00:	687b      	ldr	r3, [r7, #4]
    1c02:	899b      	ldrh	r3, [r3, #12]
    1c04:	b29b      	uxth	r3, r3
    1c06:	f043 0301 	orr.w	r3, r3, #1
    1c0a:	b29a      	uxth	r2, r3
    1c0c:	687b      	ldr	r3, [r7, #4]
    1c0e:	819a      	strh	r2, [r3, #12]
}
    1c10:	370c      	adds	r7, #12
    1c12:	46bd      	mov	sp, r7
    1c14:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c18:	4770      	bx	lr
    1c1a:	bf00      	nop

00001c1c <USART_SetGuardTime>:
  * @param  USART_GuardTime: specifies the guard time.
  * @note The guard time bits are not available for UART4 and UART5.
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{
    1c1c:	b480      	push	{r7}
    1c1e:	b083      	sub	sp, #12
    1c20:	af00      	add	r7, sp, #0
    1c22:	6078      	str	r0, [r7, #4]
    1c24:	460b      	mov	r3, r1
    1c26:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));

  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
    1c28:	687b      	ldr	r3, [r7, #4]
    1c2a:	8b1b      	ldrh	r3, [r3, #24]
    1c2c:	b29b      	uxth	r3, r3
    1c2e:	b2db      	uxtb	r3, r3
    1c30:	b29a      	uxth	r2, r3
    1c32:	687b      	ldr	r3, [r7, #4]
    1c34:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
    1c36:	687b      	ldr	r3, [r7, #4]
    1c38:	8b1b      	ldrh	r3, [r3, #24]
    1c3a:	b29a      	uxth	r2, r3
    1c3c:	78fb      	ldrb	r3, [r7, #3]
    1c3e:	b29b      	uxth	r3, r3
    1c40:	021b      	lsls	r3, r3, #8
    1c42:	b29b      	uxth	r3, r3
    1c44:	4313      	orrs	r3, r2
    1c46:	b29a      	uxth	r2, r3
    1c48:	687b      	ldr	r3, [r7, #4]
    1c4a:	831a      	strh	r2, [r3, #24]
}
    1c4c:	370c      	adds	r7, #12
    1c4e:	46bd      	mov	sp, r7
    1c50:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c54:	4770      	bx	lr
    1c56:	bf00      	nop

00001c58 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock.
  * @note   The function is used for IrDA mode with UART4 and UART5.
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{
    1c58:	b480      	push	{r7}
    1c5a:	b083      	sub	sp, #12
    1c5c:	af00      	add	r7, sp, #0
    1c5e:	6078      	str	r0, [r7, #4]
    1c60:	460b      	mov	r3, r1
    1c62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
    1c64:	687b      	ldr	r3, [r7, #4]
    1c66:	8b1b      	ldrh	r3, [r3, #24]
    1c68:	b29b      	uxth	r3, r3
    1c6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    1c6e:	b29a      	uxth	r2, r3
    1c70:	687b      	ldr	r3, [r7, #4]
    1c72:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
    1c74:	687b      	ldr	r3, [r7, #4]
    1c76:	8b1b      	ldrh	r3, [r3, #24]
    1c78:	b29a      	uxth	r2, r3
    1c7a:	78fb      	ldrb	r3, [r7, #3]
    1c7c:	b29b      	uxth	r3, r3
    1c7e:	4313      	orrs	r3, r2
    1c80:	b29a      	uxth	r2, r3
    1c82:	687b      	ldr	r3, [r7, #4]
    1c84:	831a      	strh	r2, [r3, #24]
}
    1c86:	370c      	adds	r7, #12
    1c88:	46bd      	mov	sp, r7
    1c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c8e:	4770      	bx	lr

00001c90 <USART_SmartCardCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1c90:	b480      	push	{r7}
    1c92:	b083      	sub	sp, #12
    1c94:	af00      	add	r7, sp, #0
    1c96:	6078      	str	r0, [r7, #4]
    1c98:	460b      	mov	r3, r1
    1c9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1c9c:	78fb      	ldrb	r3, [r7, #3]
    1c9e:	2b00      	cmp	r3, #0
    1ca0:	d008      	beq.n	1cb4 <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
    1ca2:	687b      	ldr	r3, [r7, #4]
    1ca4:	8a9b      	ldrh	r3, [r3, #20]
    1ca6:	b29b      	uxth	r3, r3
    1ca8:	f043 0320 	orr.w	r3, r3, #32
    1cac:	b29a      	uxth	r2, r3
    1cae:	687b      	ldr	r3, [r7, #4]
    1cb0:	829a      	strh	r2, [r3, #20]
    1cb2:	e007      	b.n	1cc4 <USART_SmartCardCmd+0x34>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
    1cb4:	687b      	ldr	r3, [r7, #4]
    1cb6:	8a9b      	ldrh	r3, [r3, #20]
    1cb8:	b29b      	uxth	r3, r3
    1cba:	f023 0320 	bic.w	r3, r3, #32
    1cbe:	b29a      	uxth	r2, r3
    1cc0:	687b      	ldr	r3, [r7, #4]
    1cc2:	829a      	strh	r2, [r3, #20]
  }
}
    1cc4:	370c      	adds	r7, #12
    1cc6:	46bd      	mov	sp, r7
    1cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ccc:	4770      	bx	lr
    1cce:	bf00      	nop

00001cd0 <USART_SmartCardNACKCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1cd0:	b480      	push	{r7}
    1cd2:	b083      	sub	sp, #12
    1cd4:	af00      	add	r7, sp, #0
    1cd6:	6078      	str	r0, [r7, #4]
    1cd8:	460b      	mov	r3, r1
    1cda:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1cdc:	78fb      	ldrb	r3, [r7, #3]
    1cde:	2b00      	cmp	r3, #0
    1ce0:	d008      	beq.n	1cf4 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
    1ce2:	687b      	ldr	r3, [r7, #4]
    1ce4:	8a9b      	ldrh	r3, [r3, #20]
    1ce6:	b29b      	uxth	r3, r3
    1ce8:	f043 0310 	orr.w	r3, r3, #16
    1cec:	b29a      	uxth	r2, r3
    1cee:	687b      	ldr	r3, [r7, #4]
    1cf0:	829a      	strh	r2, [r3, #20]
    1cf2:	e007      	b.n	1d04 <USART_SmartCardNACKCmd+0x34>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
    1cf4:	687b      	ldr	r3, [r7, #4]
    1cf6:	8a9b      	ldrh	r3, [r3, #20]
    1cf8:	b29b      	uxth	r3, r3
    1cfa:	f023 0310 	bic.w	r3, r3, #16
    1cfe:	b29a      	uxth	r2, r3
    1d00:	687b      	ldr	r3, [r7, #4]
    1d02:	829a      	strh	r2, [r3, #20]
  }
}
    1d04:	370c      	adds	r7, #12
    1d06:	46bd      	mov	sp, r7
    1d08:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d0c:	4770      	bx	lr
    1d0e:	bf00      	nop

00001d10 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d10:	b480      	push	{r7}
    1d12:	b083      	sub	sp, #12
    1d14:	af00      	add	r7, sp, #0
    1d16:	6078      	str	r0, [r7, #4]
    1d18:	460b      	mov	r3, r1
    1d1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d1c:	78fb      	ldrb	r3, [r7, #3]
    1d1e:	2b00      	cmp	r3, #0
    1d20:	d008      	beq.n	1d34 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
    1d22:	687b      	ldr	r3, [r7, #4]
    1d24:	8a9b      	ldrh	r3, [r3, #20]
    1d26:	b29b      	uxth	r3, r3
    1d28:	f043 0308 	orr.w	r3, r3, #8
    1d2c:	b29a      	uxth	r2, r3
    1d2e:	687b      	ldr	r3, [r7, #4]
    1d30:	829a      	strh	r2, [r3, #20]
    1d32:	e007      	b.n	1d44 <USART_HalfDuplexCmd+0x34>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
    1d34:	687b      	ldr	r3, [r7, #4]
    1d36:	8a9b      	ldrh	r3, [r3, #20]
    1d38:	b29b      	uxth	r3, r3
    1d3a:	f023 0308 	bic.w	r3, r3, #8
    1d3e:	b29a      	uxth	r2, r3
    1d40:	687b      	ldr	r3, [r7, #4]
    1d42:	829a      	strh	r2, [r3, #20]
  }
}
    1d44:	370c      	adds	r7, #12
    1d46:	46bd      	mov	sp, r7
    1d48:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d4c:	4770      	bx	lr
    1d4e:	bf00      	nop

00001d50 <USART_OverSampling8Cmd>:
  *     This function has to be called before calling USART_Init()
  *     function in order to have correct baudrate Divider value.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d50:	b480      	push	{r7}
    1d52:	b083      	sub	sp, #12
    1d54:	af00      	add	r7, sp, #0
    1d56:	6078      	str	r0, [r7, #4]
    1d58:	460b      	mov	r3, r1
    1d5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d5c:	78fb      	ldrb	r3, [r7, #3]
    1d5e:	2b00      	cmp	r3, #0
    1d60:	d00a      	beq.n	1d78 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= CR1_OVER8_Set;
    1d62:	687b      	ldr	r3, [r7, #4]
    1d64:	899b      	ldrh	r3, [r3, #12]
    1d66:	b29b      	uxth	r3, r3
    1d68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    1d6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    1d70:	b29a      	uxth	r2, r3
    1d72:	687b      	ldr	r3, [r7, #4]
    1d74:	819a      	strh	r2, [r3, #12]
    1d76:	e007      	b.n	1d88 <USART_OverSampling8Cmd+0x38>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= CR1_OVER8_Reset;
    1d78:	687b      	ldr	r3, [r7, #4]
    1d7a:	899b      	ldrh	r3, [r3, #12]
    1d7c:	b29b      	uxth	r3, r3
    1d7e:	f3c3 030e 	ubfx	r3, r3, #0, #15
    1d82:	b29a      	uxth	r2, r3
    1d84:	687b      	ldr	r3, [r7, #4]
    1d86:	819a      	strh	r2, [r3, #12]
  }
}
    1d88:	370c      	adds	r7, #12
    1d8a:	46bd      	mov	sp, r7
    1d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d90:	4770      	bx	lr
    1d92:	bf00      	nop

00001d94 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d94:	b480      	push	{r7}
    1d96:	b083      	sub	sp, #12
    1d98:	af00      	add	r7, sp, #0
    1d9a:	6078      	str	r0, [r7, #4]
    1d9c:	460b      	mov	r3, r1
    1d9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1da0:	78fb      	ldrb	r3, [r7, #3]
    1da2:	2b00      	cmp	r3, #0
    1da4:	d008      	beq.n	1db8 <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= CR3_ONEBITE_Set;
    1da6:	687b      	ldr	r3, [r7, #4]
    1da8:	8a9b      	ldrh	r3, [r3, #20]
    1daa:	b29b      	uxth	r3, r3
    1dac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    1db0:	b29a      	uxth	r2, r3
    1db2:	687b      	ldr	r3, [r7, #4]
    1db4:	829a      	strh	r2, [r3, #20]
    1db6:	e007      	b.n	1dc8 <USART_OneBitMethodCmd+0x34>
  }
  else
  {
    /* Disable tthe one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= CR3_ONEBITE_Reset;
    1db8:	687b      	ldr	r3, [r7, #4]
    1dba:	8a9b      	ldrh	r3, [r3, #20]
    1dbc:	b29b      	uxth	r3, r3
    1dbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1dc2:	b29a      	uxth	r2, r3
    1dc4:	687b      	ldr	r3, [r7, #4]
    1dc6:	829a      	strh	r2, [r3, #20]
  }
}
    1dc8:	370c      	adds	r7, #12
    1dca:	46bd      	mov	sp, r7
    1dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1dd0:	4770      	bx	lr
    1dd2:	bf00      	nop

00001dd4 <USART_IrDAConfig>:
  *     @arg USART_IrDAMode_LowPower
  *     @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
    1dd4:	b480      	push	{r7}
    1dd6:	b083      	sub	sp, #12
    1dd8:	af00      	add	r7, sp, #0
    1dda:	6078      	str	r0, [r7, #4]
    1ddc:	460b      	mov	r3, r1
    1dde:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));

  USARTx->CR3 &= CR3_IRLP_Mask;
    1de0:	687b      	ldr	r3, [r7, #4]
    1de2:	8a9b      	ldrh	r3, [r3, #20]
    1de4:	b29b      	uxth	r3, r3
    1de6:	f023 0304 	bic.w	r3, r3, #4
    1dea:	b29a      	uxth	r2, r3
    1dec:	687b      	ldr	r3, [r7, #4]
    1dee:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
    1df0:	687b      	ldr	r3, [r7, #4]
    1df2:	8a9b      	ldrh	r3, [r3, #20]
    1df4:	b29a      	uxth	r2, r3
    1df6:	887b      	ldrh	r3, [r7, #2]
    1df8:	4313      	orrs	r3, r2
    1dfa:	b29a      	uxth	r2, r3
    1dfc:	687b      	ldr	r3, [r7, #4]
    1dfe:	829a      	strh	r2, [r3, #20]
}
    1e00:	370c      	adds	r7, #12
    1e02:	46bd      	mov	sp, r7
    1e04:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e08:	4770      	bx	lr
    1e0a:	bf00      	nop

00001e0c <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1e0c:	b480      	push	{r7}
    1e0e:	b083      	sub	sp, #12
    1e10:	af00      	add	r7, sp, #0
    1e12:	6078      	str	r0, [r7, #4]
    1e14:	460b      	mov	r3, r1
    1e16:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1e18:	78fb      	ldrb	r3, [r7, #3]
    1e1a:	2b00      	cmp	r3, #0
    1e1c:	d008      	beq.n	1e30 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
    1e1e:	687b      	ldr	r3, [r7, #4]
    1e20:	8a9b      	ldrh	r3, [r3, #20]
    1e22:	b29b      	uxth	r3, r3
    1e24:	f043 0302 	orr.w	r3, r3, #2
    1e28:	b29a      	uxth	r2, r3
    1e2a:	687b      	ldr	r3, [r7, #4]
    1e2c:	829a      	strh	r2, [r3, #20]
    1e2e:	e007      	b.n	1e40 <USART_IrDACmd+0x34>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
    1e30:	687b      	ldr	r3, [r7, #4]
    1e32:	8a9b      	ldrh	r3, [r3, #20]
    1e34:	b29b      	uxth	r3, r3
    1e36:	f023 0302 	bic.w	r3, r3, #2
    1e3a:	b29a      	uxth	r2, r3
    1e3c:	687b      	ldr	r3, [r7, #4]
    1e3e:	829a      	strh	r2, [r3, #20]
  }
}
    1e40:	370c      	adds	r7, #12
    1e42:	46bd      	mov	sp, r7
    1e44:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e48:	4770      	bx	lr
    1e4a:	bf00      	nop

00001e4c <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e4c:	b480      	push	{r7}
    1e4e:	b085      	sub	sp, #20
    1e50:	af00      	add	r7, sp, #0
    1e52:	6078      	str	r0, [r7, #4]
    1e54:	460b      	mov	r3, r1
    1e56:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
    1e58:	2300      	movs	r3, #0
    1e5a:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
    1e5c:	687b      	ldr	r3, [r7, #4]
    1e5e:	881b      	ldrh	r3, [r3, #0]
    1e60:	b29a      	uxth	r2, r3
    1e62:	887b      	ldrh	r3, [r7, #2]
    1e64:	4013      	ands	r3, r2
    1e66:	b29b      	uxth	r3, r3
    1e68:	2b00      	cmp	r3, #0
    1e6a:	d002      	beq.n	1e72 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
    1e6c:	2301      	movs	r3, #1
    1e6e:	73fb      	strb	r3, [r7, #15]
    1e70:	e001      	b.n	1e76 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    1e72:	2300      	movs	r3, #0
    1e74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    1e76:	7bfb      	ldrb	r3, [r7, #15]
}
    1e78:	4618      	mov	r0, r3
    1e7a:	3714      	adds	r7, #20
    1e7c:	46bd      	mov	sp, r7
    1e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e82:	4770      	bx	lr

00001e84 <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e84:	b480      	push	{r7}
    1e86:	b083      	sub	sp, #12
    1e88:	af00      	add	r7, sp, #0
    1e8a:	6078      	str	r0, [r7, #4]
    1e8c:	460b      	mov	r3, r1
    1e8e:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  USARTx->SR = (uint16_t)~USART_FLAG;
    1e90:	887b      	ldrh	r3, [r7, #2]
    1e92:	43db      	mvns	r3, r3
    1e94:	b29a      	uxth	r2, r3
    1e96:	687b      	ldr	r3, [r7, #4]
    1e98:	801a      	strh	r2, [r3, #0]
}
    1e9a:	370c      	adds	r7, #12
    1e9c:	46bd      	mov	sp, r7
    1e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ea2:	4770      	bx	lr

00001ea4 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1ea4:	b480      	push	{r7}
    1ea6:	b087      	sub	sp, #28
    1ea8:	af00      	add	r7, sp, #0
    1eaa:	6078      	str	r0, [r7, #4]
    1eac:	460b      	mov	r3, r1
    1eae:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
    1eb0:	2300      	movs	r3, #0
    1eb2:	60fb      	str	r3, [r7, #12]
    1eb4:	2300      	movs	r3, #0
    1eb6:	617b      	str	r3, [r7, #20]
    1eb8:	2300      	movs	r3, #0
    1eba:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
    1ebc:	2300      	movs	r3, #0
    1ebe:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    1ec0:	887b      	ldrh	r3, [r7, #2]
    1ec2:	b2db      	uxtb	r3, r3
    1ec4:	095b      	lsrs	r3, r3, #5
    1ec6:	b2db      	uxtb	r3, r3
    1ec8:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
    1eca:	887b      	ldrh	r3, [r7, #2]
    1ecc:	f003 031f 	and.w	r3, r3, #31
    1ed0:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
    1ed2:	697b      	ldr	r3, [r7, #20]
    1ed4:	2201      	movs	r2, #1
    1ed6:	fa02 f303 	lsl.w	r3, r2, r3
    1eda:	617b      	str	r3, [r7, #20]

  if (usartreg == 0x01) /* The IT  is in CR1 register */
    1edc:	68bb      	ldr	r3, [r7, #8]
    1ede:	2b01      	cmp	r3, #1
    1ee0:	d106      	bne.n	1ef0 <USART_GetITStatus+0x4c>
  {
    itmask &= USARTx->CR1;
    1ee2:	687b      	ldr	r3, [r7, #4]
    1ee4:	899b      	ldrh	r3, [r3, #12]
    1ee6:	b29b      	uxth	r3, r3
    1ee8:	697a      	ldr	r2, [r7, #20]
    1eea:	4013      	ands	r3, r2
    1eec:	617b      	str	r3, [r7, #20]
    1eee:	e00f      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
    1ef0:	68bb      	ldr	r3, [r7, #8]
    1ef2:	2b02      	cmp	r3, #2
    1ef4:	d106      	bne.n	1f04 <USART_GetITStatus+0x60>
  {
    itmask &= USARTx->CR2;
    1ef6:	687b      	ldr	r3, [r7, #4]
    1ef8:	8a1b      	ldrh	r3, [r3, #16]
    1efa:	b29b      	uxth	r3, r3
    1efc:	697a      	ldr	r2, [r7, #20]
    1efe:	4013      	ands	r3, r2
    1f00:	617b      	str	r3, [r7, #20]
    1f02:	e005      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
    1f04:	687b      	ldr	r3, [r7, #4]
    1f06:	8a9b      	ldrh	r3, [r3, #20]
    1f08:	b29b      	uxth	r3, r3
    1f0a:	697a      	ldr	r2, [r7, #20]
    1f0c:	4013      	ands	r3, r2
    1f0e:	617b      	str	r3, [r7, #20]
  }

  bitpos = USART_IT >> 0x08;
    1f10:	887b      	ldrh	r3, [r7, #2]
    1f12:	0a1b      	lsrs	r3, r3, #8
    1f14:	b29b      	uxth	r3, r3
    1f16:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
    1f18:	68fb      	ldr	r3, [r7, #12]
    1f1a:	2201      	movs	r2, #1
    1f1c:	fa02 f303 	lsl.w	r3, r2, r3
    1f20:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
    1f22:	687b      	ldr	r3, [r7, #4]
    1f24:	881b      	ldrh	r3, [r3, #0]
    1f26:	b29b      	uxth	r3, r3
    1f28:	68fa      	ldr	r2, [r7, #12]
    1f2a:	4013      	ands	r3, r2
    1f2c:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
    1f2e:	697b      	ldr	r3, [r7, #20]
    1f30:	2b00      	cmp	r3, #0
    1f32:	d005      	beq.n	1f40 <USART_GetITStatus+0x9c>
    1f34:	68fb      	ldr	r3, [r7, #12]
    1f36:	2b00      	cmp	r3, #0
    1f38:	d002      	beq.n	1f40 <USART_GetITStatus+0x9c>
  {
    bitstatus = SET;
    1f3a:	2301      	movs	r3, #1
    1f3c:	74fb      	strb	r3, [r7, #19]
    1f3e:	e001      	b.n	1f44 <USART_GetITStatus+0xa0>
  }
  else
  {
    bitstatus = RESET;
    1f40:	2300      	movs	r3, #0
    1f42:	74fb      	strb	r3, [r7, #19]
  }

  return bitstatus;
    1f44:	7cfb      	ldrb	r3, [r7, #19]
}
    1f46:	4618      	mov	r0, r3
    1f48:	371c      	adds	r7, #28
    1f4a:	46bd      	mov	sp, r7
    1f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f50:	4770      	bx	lr
    1f52:	bf00      	nop

00001f54 <USART_ClearITPendingBit>:
  *   - TXE pending bit is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1f54:	b480      	push	{r7}
    1f56:	b085      	sub	sp, #20
    1f58:	af00      	add	r7, sp, #0
    1f5a:	6078      	str	r0, [r7, #4]
    1f5c:	460b      	mov	r3, r1
    1f5e:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
    1f60:	2300      	movs	r3, #0
    1f62:	81fb      	strh	r3, [r7, #14]
    1f64:	2300      	movs	r3, #0
    1f66:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  bitpos = USART_IT >> 0x08;
    1f68:	887b      	ldrh	r3, [r7, #2]
    1f6a:	0a1b      	lsrs	r3, r3, #8
    1f6c:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
    1f6e:	89fb      	ldrh	r3, [r7, #14]
    1f70:	2201      	movs	r2, #1
    1f72:	fa02 f303 	lsl.w	r3, r2, r3
    1f76:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
    1f78:	89bb      	ldrh	r3, [r7, #12]
    1f7a:	43db      	mvns	r3, r3
    1f7c:	b29a      	uxth	r2, r3
    1f7e:	687b      	ldr	r3, [r7, #4]
    1f80:	801a      	strh	r2, [r3, #0]
}
    1f82:	3714      	adds	r7, #20
    1f84:	46bd      	mov	sp, r7
    1f86:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f8a:	4770      	bx	lr

00001f8c <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
    1f8c:	b480      	push	{r7}
    1f8e:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
    1f90:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1f94:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1f98:	2200      	movs	r2, #0
    1f9a:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
    1f9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fa0:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fa4:	2200      	movs	r2, #0
    1fa6:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
    1fa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fac:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fb0:	2200      	movs	r2, #0
    1fb2:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
    1fb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fb8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fbc:	2200      	movs	r2, #0
    1fbe:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x000FFFFF;
    1fc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fc4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1fcc:	f2c0 020f 	movt	r2, #15
    1fd0:	615a      	str	r2, [r3, #20]
}
    1fd2:	46bd      	mov	sp, r7
    1fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1fd8:	4770      	bx	lr
    1fda:	bf00      	nop

00001fdc <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
    1fdc:	b480      	push	{r7}
    1fde:	b085      	sub	sp, #20
    1fe0:	af00      	add	r7, sp, #0
    1fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
    1fe4:	2300      	movs	r3, #0
    1fe6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
    1fe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fec:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1ff0:	60fb      	str	r3, [r7, #12]

  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
    1ff2:	687b      	ldr	r3, [r7, #4]
    1ff4:	799b      	ldrb	r3, [r3, #6]
    1ff6:	2b00      	cmp	r3, #0
    1ff8:	d074      	beq.n	20e4 <EXTI_Init+0x108>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    1ffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1ffe:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2002:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2006:	f2c4 0201 	movt	r2, #16385	; 0x4001
    200a:	6811      	ldr	r1, [r2, #0]
    200c:	687a      	ldr	r2, [r7, #4]
    200e:	6812      	ldr	r2, [r2, #0]
    2010:	43d2      	mvns	r2, r2
    2012:	400a      	ands	r2, r1
    2014:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    2016:	f44f 6380 	mov.w	r3, #1024	; 0x400
    201a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    201e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2022:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2026:	6851      	ldr	r1, [r2, #4]
    2028:	687a      	ldr	r2, [r7, #4]
    202a:	6812      	ldr	r2, [r2, #0]
    202c:	43d2      	mvns	r2, r2
    202e:	400a      	ands	r2, r1
    2030:	605a      	str	r2, [r3, #4]

    tmp += EXTI_InitStruct->EXTI_Mode;
    2032:	687b      	ldr	r3, [r7, #4]
    2034:	791b      	ldrb	r3, [r3, #4]
    2036:	68fa      	ldr	r2, [r7, #12]
    2038:	4413      	add	r3, r2
    203a:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    203c:	68fb      	ldr	r3, [r7, #12]
    203e:	68fa      	ldr	r2, [r7, #12]
    2040:	6811      	ldr	r1, [r2, #0]
    2042:	687a      	ldr	r2, [r7, #4]
    2044:	6812      	ldr	r2, [r2, #0]
    2046:	430a      	orrs	r2, r1
    2048:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    204a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    204e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2052:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2056:	f2c4 0201 	movt	r2, #16385	; 0x4001
    205a:	6891      	ldr	r1, [r2, #8]
    205c:	687a      	ldr	r2, [r7, #4]
    205e:	6812      	ldr	r2, [r2, #0]
    2060:	43d2      	mvns	r2, r2
    2062:	400a      	ands	r2, r1
    2064:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    2066:	f44f 6380 	mov.w	r3, #1024	; 0x400
    206a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    206e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2072:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2076:	68d1      	ldr	r1, [r2, #12]
    2078:	687a      	ldr	r2, [r7, #4]
    207a:	6812      	ldr	r2, [r2, #0]
    207c:	43d2      	mvns	r2, r2
    207e:	400a      	ands	r2, r1
    2080:	60da      	str	r2, [r3, #12]

    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
    2082:	687b      	ldr	r3, [r7, #4]
    2084:	795b      	ldrb	r3, [r3, #5]
    2086:	2b10      	cmp	r3, #16
    2088:	d11a      	bne.n	20c0 <EXTI_Init+0xe4>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
    208a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    208e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2092:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2096:	f2c4 0201 	movt	r2, #16385	; 0x4001
    209a:	6891      	ldr	r1, [r2, #8]
    209c:	687a      	ldr	r2, [r7, #4]
    209e:	6812      	ldr	r2, [r2, #0]
    20a0:	430a      	orrs	r2, r1
    20a2:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    20a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20a8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
    20b0:	f2c4 0201 	movt	r2, #16385	; 0x4001
    20b4:	68d1      	ldr	r1, [r2, #12]
    20b6:	687a      	ldr	r2, [r7, #4]
    20b8:	6812      	ldr	r2, [r2, #0]
    20ba:	430a      	orrs	r2, r1
    20bc:	60da      	str	r2, [r3, #12]
    20be:	e01e      	b.n	20fe <EXTI_Init+0x122>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
    20c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20c4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20c8:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
    20ca:	687b      	ldr	r3, [r7, #4]
    20cc:	795b      	ldrb	r3, [r3, #5]
    20ce:	68fa      	ldr	r2, [r7, #12]
    20d0:	4413      	add	r3, r2
    20d2:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    20d4:	68fb      	ldr	r3, [r7, #12]
    20d6:	68fa      	ldr	r2, [r7, #12]
    20d8:	6811      	ldr	r1, [r2, #0]
    20da:	687a      	ldr	r2, [r7, #4]
    20dc:	6812      	ldr	r2, [r2, #0]
    20de:	430a      	orrs	r2, r1
    20e0:	601a      	str	r2, [r3, #0]
    20e2:	e00c      	b.n	20fe <EXTI_Init+0x122>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
    20e4:	687b      	ldr	r3, [r7, #4]
    20e6:	791b      	ldrb	r3, [r3, #4]
    20e8:	68fa      	ldr	r2, [r7, #12]
    20ea:	4413      	add	r3, r2
    20ec:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
    20ee:	68fb      	ldr	r3, [r7, #12]
    20f0:	68fa      	ldr	r2, [r7, #12]
    20f2:	6811      	ldr	r1, [r2, #0]
    20f4:	687a      	ldr	r2, [r7, #4]
    20f6:	6812      	ldr	r2, [r2, #0]
    20f8:	43d2      	mvns	r2, r2
    20fa:	400a      	ands	r2, r1
    20fc:	601a      	str	r2, [r3, #0]
  }
}
    20fe:	3714      	adds	r7, #20
    2100:	46bd      	mov	sp, r7
    2102:	f85d 7b04 	ldr.w	r7, [sp], #4
    2106:	4770      	bx	lr

00002108 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
    2108:	b480      	push	{r7}
    210a:	b083      	sub	sp, #12
    210c:	af00      	add	r7, sp, #0
    210e:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
    2110:	687b      	ldr	r3, [r7, #4]
    2112:	2200      	movs	r2, #0
    2114:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
    2116:	687b      	ldr	r3, [r7, #4]
    2118:	2200      	movs	r2, #0
    211a:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
    211c:	687b      	ldr	r3, [r7, #4]
    211e:	220c      	movs	r2, #12
    2120:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
    2122:	687b      	ldr	r3, [r7, #4]
    2124:	2200      	movs	r2, #0
    2126:	719a      	strb	r2, [r3, #6]
}
    2128:	370c      	adds	r7, #12
    212a:	46bd      	mov	sp, r7
    212c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2130:	4770      	bx	lr
    2132:	bf00      	nop

00002134 <EXTI_GenerateSWInterrupt>:
  * @param  EXTI_Line: specifies the EXTI lines to be enabled or disabled.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
    2134:	b480      	push	{r7}
    2136:	b083      	sub	sp, #12
    2138:	af00      	add	r7, sp, #0
    213a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->SWIER |= EXTI_Line;
    213c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2140:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2144:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2148:	f2c4 0201 	movt	r2, #16385	; 0x4001
    214c:	6911      	ldr	r1, [r2, #16]
    214e:	687a      	ldr	r2, [r7, #4]
    2150:	430a      	orrs	r2, r1
    2152:	611a      	str	r2, [r3, #16]
}
    2154:	370c      	adds	r7, #12
    2156:	46bd      	mov	sp, r7
    2158:	f85d 7b04 	ldr.w	r7, [sp], #4
    215c:	4770      	bx	lr
    215e:	bf00      	nop

00002160 <EXTI_GetFlagStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
    2160:	b480      	push	{r7}
    2162:	b085      	sub	sp, #20
    2164:	af00      	add	r7, sp, #0
    2166:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    2168:	2300      	movs	r3, #0
    216a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
    216c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2170:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2174:	695a      	ldr	r2, [r3, #20]
    2176:	687b      	ldr	r3, [r7, #4]
    2178:	4013      	ands	r3, r2
    217a:	2b00      	cmp	r3, #0
    217c:	d002      	beq.n	2184 <EXTI_GetFlagStatus+0x24>
  {
    bitstatus = SET;
    217e:	2301      	movs	r3, #1
    2180:	73fb      	strb	r3, [r7, #15]
    2182:	e001      	b.n	2188 <EXTI_GetFlagStatus+0x28>
  }
  else
  {
    bitstatus = RESET;
    2184:	2300      	movs	r3, #0
    2186:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    2188:	7bfb      	ldrb	r3, [r7, #15]
}
    218a:	4618      	mov	r0, r3
    218c:	3714      	adds	r7, #20
    218e:	46bd      	mov	sp, r7
    2190:	f85d 7b04 	ldr.w	r7, [sp], #4
    2194:	4770      	bx	lr
    2196:	bf00      	nop

00002198 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
    2198:	b480      	push	{r7}
    219a:	b083      	sub	sp, #12
    219c:	af00      	add	r7, sp, #0
    219e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    21a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21a4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21a8:	687a      	ldr	r2, [r7, #4]
    21aa:	615a      	str	r2, [r3, #20]
}
    21ac:	370c      	adds	r7, #12
    21ae:	46bd      	mov	sp, r7
    21b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    21b4:	4770      	bx	lr
    21b6:	bf00      	nop

000021b8 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
    21b8:	b480      	push	{r7}
    21ba:	b085      	sub	sp, #20
    21bc:	af00      	add	r7, sp, #0
    21be:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
    21c0:	2300      	movs	r3, #0
    21c2:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
    21c4:	2300      	movs	r3, #0
    21c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  enablestatus =  EXTI->IMR & EXTI_Line;
    21c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21cc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21d0:	681a      	ldr	r2, [r3, #0]
    21d2:	687b      	ldr	r3, [r7, #4]
    21d4:	4013      	ands	r3, r2
    21d6:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
    21d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21dc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21e0:	695a      	ldr	r2, [r3, #20]
    21e2:	687b      	ldr	r3, [r7, #4]
    21e4:	4013      	ands	r3, r2
    21e6:	2b00      	cmp	r3, #0
    21e8:	d005      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
    21ea:	68bb      	ldr	r3, [r7, #8]
    21ec:	2b00      	cmp	r3, #0
    21ee:	d002      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
  {
    bitstatus = SET;
    21f0:	2301      	movs	r3, #1
    21f2:	73fb      	strb	r3, [r7, #15]
    21f4:	e001      	b.n	21fa <EXTI_GetITStatus+0x42>
  }
  else
  {
    bitstatus = RESET;
    21f6:	2300      	movs	r3, #0
    21f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    21fa:	7bfb      	ldrb	r3, [r7, #15]
}
    21fc:	4618      	mov	r0, r3
    21fe:	3714      	adds	r7, #20
    2200:	46bd      	mov	sp, r7
    2202:	f85d 7b04 	ldr.w	r7, [sp], #4
    2206:	4770      	bx	lr

00002208 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
    2208:	b480      	push	{r7}
    220a:	b083      	sub	sp, #12
    220c:	af00      	add	r7, sp, #0
    220e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    2210:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2214:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2218:	687a      	ldr	r2, [r7, #4]
    221a:	615a      	str	r2, [r3, #20]
}
    221c:	370c      	adds	r7, #12
    221e:	46bd      	mov	sp, r7
    2220:	f85d 7b04 	ldr.w	r7, [sp], #4
    2224:	4770      	bx	lr
    2226:	bf00      	nop

00002228 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
    2228:	b480      	push	{r7}
    222a:	b083      	sub	sp, #12
    222c:	af00      	add	r7, sp, #0
    222e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
    2230:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2234:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2238:	687a      	ldr	r2, [r7, #4]
    223a:	f042 62bf 	orr.w	r2, r2, #100139008	; 0x5f80000
    223e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    2242:	60da      	str	r2, [r3, #12]
}
    2244:	370c      	adds	r7, #12
    2246:	46bd      	mov	sp, r7
    2248:	f85d 7b04 	ldr.w	r7, [sp], #4
    224c:	4770      	bx	lr
    224e:	bf00      	nop

00002250 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
    2250:	b480      	push	{r7}
    2252:	b087      	sub	sp, #28
    2254:	af00      	add	r7, sp, #0
    2256:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
    2258:	2300      	movs	r3, #0
    225a:	617b      	str	r3, [r7, #20]
    225c:	2300      	movs	r3, #0
    225e:	613b      	str	r3, [r7, #16]
    2260:	230f      	movs	r3, #15
    2262:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
    2264:	687b      	ldr	r3, [r7, #4]
    2266:	78db      	ldrb	r3, [r3, #3]
    2268:	2b00      	cmp	r3, #0
    226a:	d042      	beq.n	22f2 <NVIC_Init+0xa2>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    226c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2270:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2274:	68db      	ldr	r3, [r3, #12]
    2276:	43db      	mvns	r3, r3
    2278:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    227c:	0a1b      	lsrs	r3, r3, #8
    227e:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
    2280:	697b      	ldr	r3, [r7, #20]
    2282:	f1c3 0304 	rsb	r3, r3, #4
    2286:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
    2288:	697b      	ldr	r3, [r7, #20]
    228a:	68fa      	ldr	r2, [r7, #12]
    228c:	fa22 f303 	lsr.w	r3, r2, r3
    2290:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    2292:	687b      	ldr	r3, [r7, #4]
    2294:	785b      	ldrb	r3, [r3, #1]
    2296:	461a      	mov	r2, r3
    2298:	693b      	ldr	r3, [r7, #16]
    229a:	fa02 f303 	lsl.w	r3, r2, r3
    229e:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
    22a0:	687b      	ldr	r3, [r7, #4]
    22a2:	789b      	ldrb	r3, [r3, #2]
    22a4:	461a      	mov	r2, r3
    22a6:	68fb      	ldr	r3, [r7, #12]
    22a8:	4013      	ands	r3, r2
    22aa:	697a      	ldr	r2, [r7, #20]
    22ac:	4313      	orrs	r3, r2
    22ae:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
    22b0:	697b      	ldr	r3, [r7, #20]
    22b2:	011b      	lsls	r3, r3, #4
    22b4:	617b      	str	r3, [r7, #20]

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    22b6:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22ba:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22be:	687a      	ldr	r2, [r7, #4]
    22c0:	7812      	ldrb	r2, [r2, #0]
    22c2:	4611      	mov	r1, r2
    22c4:	697a      	ldr	r2, [r7, #20]
    22c6:	b2d2      	uxtb	r2, r2
    22c8:	440b      	add	r3, r1
    22ca:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ce:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22d2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22d6:	687a      	ldr	r2, [r7, #4]
    22d8:	7812      	ldrb	r2, [r2, #0]
    22da:	0952      	lsrs	r2, r2, #5
    22dc:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    22de:	6879      	ldr	r1, [r7, #4]
    22e0:	7809      	ldrb	r1, [r1, #0]
    22e2:	f001 011f 	and.w	r1, r1, #31
    22e6:	2001      	movs	r0, #1
    22e8:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    22f0:	e011      	b.n	2316 <NVIC_Init+0xc6>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22f2:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22f6:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22fa:	687a      	ldr	r2, [r7, #4]
    22fc:	7812      	ldrb	r2, [r2, #0]
    22fe:	0952      	lsrs	r2, r2, #5
    2300:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    2302:	6879      	ldr	r1, [r7, #4]
    2304:	7809      	ldrb	r1, [r1, #0]
    2306:	f001 011f 	and.w	r1, r1, #31
    230a:	2001      	movs	r0, #1
    230c:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    2310:	3220      	adds	r2, #32
    2312:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
    2316:	371c      	adds	r7, #28
    2318:	46bd      	mov	sp, r7
    231a:	f85d 7b04 	ldr.w	r7, [sp], #4
    231e:	4770      	bx	lr

00002320 <NVIC_SetVectorTable>:
  * @param  Offset: Vector Table base offset field. This value must be a multiple
  *         of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{
    2320:	b480      	push	{r7}
    2322:	b083      	sub	sp, #12
    2324:	af00      	add	r7, sp, #0
    2326:	6078      	str	r0, [r7, #4]
    2328:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));

  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
    232a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    232e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2332:	683a      	ldr	r2, [r7, #0]
    2334:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
    2338:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    233c:	6879      	ldr	r1, [r7, #4]
    233e:	430a      	orrs	r2, r1
    2340:	609a      	str	r2, [r3, #8]
}
    2342:	370c      	adds	r7, #12
    2344:	46bd      	mov	sp, r7
    2346:	f85d 7b04 	ldr.w	r7, [sp], #4
    234a:	4770      	bx	lr

0000234c <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
    234c:	b480      	push	{r7}
    234e:	b083      	sub	sp, #12
    2350:	af00      	add	r7, sp, #0
    2352:	4602      	mov	r2, r0
    2354:	460b      	mov	r3, r1
    2356:	71fa      	strb	r2, [r7, #7]
    2358:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    235a:	79bb      	ldrb	r3, [r7, #6]
    235c:	2b00      	cmp	r3, #0
    235e:	d00c      	beq.n	237a <NVIC_SystemLPConfig+0x2e>
  {
    SCB->SCR |= LowPowerMode;
    2360:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2364:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2368:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    236c:	f2ce 0200 	movt	r2, #57344	; 0xe000
    2370:	6911      	ldr	r1, [r2, #16]
    2372:	79fa      	ldrb	r2, [r7, #7]
    2374:	430a      	orrs	r2, r1
    2376:	611a      	str	r2, [r3, #16]
    2378:	e00c      	b.n	2394 <NVIC_SystemLPConfig+0x48>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
    237a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    237e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2382:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    2386:	f2ce 0200 	movt	r2, #57344	; 0xe000
    238a:	6911      	ldr	r1, [r2, #16]
    238c:	79fa      	ldrb	r2, [r7, #7]
    238e:	43d2      	mvns	r2, r2
    2390:	400a      	ands	r2, r1
    2392:	611a      	str	r2, [r3, #16]
  }
}
    2394:	370c      	adds	r7, #12
    2396:	46bd      	mov	sp, r7
    2398:	f85d 7b04 	ldr.w	r7, [sp], #4
    239c:	4770      	bx	lr
    239e:	bf00      	nop

000023a0 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
    23a0:	b480      	push	{r7}
    23a2:	b083      	sub	sp, #12
    23a4:	af00      	add	r7, sp, #0
    23a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
    23a8:	687b      	ldr	r3, [r7, #4]
    23aa:	2b04      	cmp	r3, #4
    23ac:	d10c      	bne.n	23c8 <SysTick_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
    23ae:	f24e 0310 	movw	r3, #57360	; 0xe010
    23b2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23b6:	f24e 0210 	movw	r2, #57360	; 0xe010
    23ba:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23be:	6812      	ldr	r2, [r2, #0]
    23c0:	f042 0204 	orr.w	r2, r2, #4
    23c4:	601a      	str	r2, [r3, #0]
    23c6:	e00b      	b.n	23e0 <SysTick_CLKSourceConfig+0x40>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
    23c8:	f24e 0310 	movw	r3, #57360	; 0xe010
    23cc:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23d0:	f24e 0210 	movw	r2, #57360	; 0xe010
    23d4:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23d8:	6812      	ldr	r2, [r2, #0]
    23da:	f022 0204 	bic.w	r2, r2, #4
    23de:	601a      	str	r2, [r3, #0]
  }
}
    23e0:	370c      	adds	r7, #12
    23e2:	46bd      	mov	sp, r7
    23e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    23e8:	4770      	bx	lr
    23ea:	bf00      	nop

000023ec <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
    23ec:	b580      	push	{r7, lr}
    23ee:	b086      	sub	sp, #24
    23f0:	af00      	add	r7, sp, #0
    23f2:	60f8      	str	r0, [r7, #12]
    23f4:	60b9      	str	r1, [r7, #8]
    23f6:	607a      	str	r2, [r7, #4]
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
    23f8:	2050      	movs	r0, #80	; 0x50
    23fa:	f002 fa93 	bl	4924 <pvPortMalloc>
    23fe:	6138      	str	r0, [r7, #16]
	if( pxCoRoutine )
    2400:	693b      	ldr	r3, [r7, #16]
    2402:	2b00      	cmp	r3, #0
    2404:	d056      	beq.n	24b4 <xCoRoutineCreate+0xc8>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
    2406:	f240 2380 	movw	r3, #640	; 0x280
    240a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    240e:	681b      	ldr	r3, [r3, #0]
    2410:	2b00      	cmp	r3, #0
    2412:	d107      	bne.n	2424 <xCoRoutineCreate+0x38>
		{
			pxCurrentCoRoutine = pxCoRoutine;
    2414:	f240 2380 	movw	r3, #640	; 0x280
    2418:	f2c2 0300 	movt	r3, #8192	; 0x2000
    241c:	693a      	ldr	r2, [r7, #16]
    241e:	601a      	str	r2, [r3, #0]
			prvInitialiseCoRoutineLists();
    2420:	f000 f9fa 	bl	2818 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
    2424:	68bb      	ldr	r3, [r7, #8]
    2426:	2b01      	cmp	r3, #1
    2428:	d901      	bls.n	242e <xCoRoutineCreate+0x42>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
    242a:	2301      	movs	r3, #1
    242c:	60bb      	str	r3, [r7, #8]
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
    242e:	693b      	ldr	r3, [r7, #16]
    2430:	2200      	movs	r2, #0
    2432:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		pxCoRoutine->uxPriority = uxPriority;
    2436:	693b      	ldr	r3, [r7, #16]
    2438:	68ba      	ldr	r2, [r7, #8]
    243a:	645a      	str	r2, [r3, #68]	; 0x44
		pxCoRoutine->uxIndex = uxIndex;
    243c:	693b      	ldr	r3, [r7, #16]
    243e:	687a      	ldr	r2, [r7, #4]
    2440:	649a      	str	r2, [r3, #72]	; 0x48
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    2442:	693b      	ldr	r3, [r7, #16]
    2444:	68fa      	ldr	r2, [r7, #12]
    2446:	601a      	str	r2, [r3, #0]

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    2448:	693b      	ldr	r3, [r7, #16]
    244a:	3304      	adds	r3, #4
    244c:	4618      	mov	r0, r3
    244e:	f000 fa6b 	bl	2928 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    2452:	693b      	ldr	r3, [r7, #16]
    2454:	3324      	adds	r3, #36	; 0x24
    2456:	4618      	mov	r0, r3
    2458:	f000 fa66 	bl	2928 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    245c:	693b      	ldr	r3, [r7, #16]
    245e:	693a      	ldr	r2, [r7, #16]
    2460:	61da      	str	r2, [r3, #28]
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    2462:	693b      	ldr	r3, [r7, #16]
    2464:	693a      	ldr	r2, [r7, #16]
    2466:	63da      	str	r2, [r3, #60]	; 0x3c
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    2468:	68bb      	ldr	r3, [r7, #8]
    246a:	f1c3 0214 	rsb	r2, r3, #20
    246e:	693b      	ldr	r3, [r7, #16]
    2470:	625a      	str	r2, [r3, #36]	; 0x24
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
    2472:	693b      	ldr	r3, [r7, #16]
    2474:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    2476:	f240 2384 	movw	r3, #644	; 0x284
    247a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    247e:	681b      	ldr	r3, [r3, #0]
    2480:	429a      	cmp	r2, r3
    2482:	d906      	bls.n	2492 <xCoRoutineCreate+0xa6>
    2484:	693b      	ldr	r3, [r7, #16]
    2486:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    2488:	f240 2384 	movw	r3, #644	; 0x284
    248c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2490:	601a      	str	r2, [r3, #0]
    2492:	693b      	ldr	r3, [r7, #16]
    2494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2496:	015a      	lsls	r2, r3, #5
    2498:	f240 13d8 	movw	r3, #472	; 0x1d8
    249c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24a0:	441a      	add	r2, r3
    24a2:	693b      	ldr	r3, [r7, #16]
    24a4:	3304      	adds	r3, #4
    24a6:	4610      	mov	r0, r2
    24a8:	4619      	mov	r1, r3
    24aa:	f000 fa49 	bl	2940 <vListInsertEnd>

		xReturn = pdPASS;
    24ae:	2301      	movs	r3, #1
    24b0:	617b      	str	r3, [r7, #20]
    24b2:	e002      	b.n	24ba <xCoRoutineCreate+0xce>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    24b4:	f04f 33ff 	mov.w	r3, #4294967295
    24b8:	617b      	str	r3, [r7, #20]
	}
	
	return xReturn;	
    24ba:	697b      	ldr	r3, [r7, #20]
}
    24bc:	4618      	mov	r0, r3
    24be:	3718      	adds	r7, #24
    24c0:	46bd      	mov	sp, r7
    24c2:	bd80      	pop	{r7, pc}

000024c4 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
    24c4:	b580      	push	{r7, lr}
    24c6:	b084      	sub	sp, #16
    24c8:	af00      	add	r7, sp, #0
    24ca:	6078      	str	r0, [r7, #4]
    24cc:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    24ce:	f240 2388 	movw	r3, #648	; 0x288
    24d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24d6:	681a      	ldr	r2, [r3, #0]
    24d8:	687b      	ldr	r3, [r7, #4]
    24da:	4413      	add	r3, r2
    24dc:	60fb      	str	r3, [r7, #12]

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    24de:	f240 2380 	movw	r3, #640	; 0x280
    24e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24e6:	681b      	ldr	r3, [r3, #0]
    24e8:	3304      	adds	r3, #4
    24ea:	4618      	mov	r0, r3
    24ec:	f000 fa88 	bl	2a00 <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    24f0:	f240 2380 	movw	r3, #640	; 0x280
    24f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24f8:	681b      	ldr	r3, [r3, #0]
    24fa:	68fa      	ldr	r2, [r7, #12]
    24fc:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xCoRoutineTickCount )
    24fe:	f240 2388 	movw	r3, #648	; 0x288
    2502:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2506:	681b      	ldr	r3, [r3, #0]
    2508:	68fa      	ldr	r2, [r7, #12]
    250a:	429a      	cmp	r2, r3
    250c:	d20f      	bcs.n	252e <vCoRoutineAddToDelayedList+0x6a>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    250e:	f240 235c 	movw	r3, #604	; 0x25c
    2512:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2516:	681a      	ldr	r2, [r3, #0]
    2518:	f240 2380 	movw	r3, #640	; 0x280
    251c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2520:	681b      	ldr	r3, [r3, #0]
    2522:	3304      	adds	r3, #4
    2524:	4610      	mov	r0, r2
    2526:	4619      	mov	r1, r3
    2528:	f000 fa32 	bl	2990 <vListInsert>
    252c:	e00e      	b.n	254c <vCoRoutineAddToDelayedList+0x88>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    252e:	f240 2358 	movw	r3, #600	; 0x258
    2532:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2536:	681a      	ldr	r2, [r3, #0]
    2538:	f240 2380 	movw	r3, #640	; 0x280
    253c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2540:	681b      	ldr	r3, [r3, #0]
    2542:	3304      	adds	r3, #4
    2544:	4610      	mov	r0, r2
    2546:	4619      	mov	r1, r3
    2548:	f000 fa22 	bl	2990 <vListInsert>
	}

	if( pxEventList )
    254c:	683b      	ldr	r3, [r7, #0]
    254e:	2b00      	cmp	r3, #0
    2550:	d009      	beq.n	2566 <vCoRoutineAddToDelayedList+0xa2>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    2552:	f240 2380 	movw	r3, #640	; 0x280
    2556:	f2c2 0300 	movt	r3, #8192	; 0x2000
    255a:	681b      	ldr	r3, [r3, #0]
    255c:	3324      	adds	r3, #36	; 0x24
    255e:	6838      	ldr	r0, [r7, #0]
    2560:	4619      	mov	r1, r3
    2562:	f000 fa15 	bl	2990 <vListInsert>
	}
}
    2566:	3710      	adds	r7, #16
    2568:	46bd      	mov	sp, r7
    256a:	bd80      	pop	{r7, pc}

0000256c <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
    256c:	b580      	push	{r7, lr}
    256e:	b082      	sub	sp, #8
    2570:	af00      	add	r7, sp, #0
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    2572:	e036      	b.n	25e2 <prvCheckPendingReadyList+0x76>
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
    2574:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    2578:	f380 8811 	msr	BASEPRI, r0
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
    257c:	f240 2360 	movw	r3, #608	; 0x260
    2580:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2584:	699b      	ldr	r3, [r3, #24]
    2586:	699b      	ldr	r3, [r3, #24]
    2588:	607b      	str	r3, [r7, #4]
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    258a:	687b      	ldr	r3, [r7, #4]
    258c:	3324      	adds	r3, #36	; 0x24
    258e:	4618      	mov	r0, r3
    2590:	f000 fa36 	bl	2a00 <vListRemove>
		}
		portENABLE_INTERRUPTS();
    2594:	f04f 0000 	mov.w	r0, #0
    2598:	f380 8811 	msr	BASEPRI, r0

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    259c:	687b      	ldr	r3, [r7, #4]
    259e:	3304      	adds	r3, #4
    25a0:	4618      	mov	r0, r3
    25a2:	f000 fa2d 	bl	2a00 <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    25a6:	687b      	ldr	r3, [r7, #4]
    25a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    25aa:	f240 2384 	movw	r3, #644	; 0x284
    25ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25b2:	681b      	ldr	r3, [r3, #0]
    25b4:	429a      	cmp	r2, r3
    25b6:	d906      	bls.n	25c6 <prvCheckPendingReadyList+0x5a>
    25b8:	687b      	ldr	r3, [r7, #4]
    25ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    25bc:	f240 2384 	movw	r3, #644	; 0x284
    25c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25c4:	601a      	str	r2, [r3, #0]
    25c6:	687b      	ldr	r3, [r7, #4]
    25c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    25ca:	015a      	lsls	r2, r3, #5
    25cc:	f240 13d8 	movw	r3, #472	; 0x1d8
    25d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25d4:	441a      	add	r2, r3
    25d6:	687b      	ldr	r3, [r7, #4]
    25d8:	3304      	adds	r3, #4
    25da:	4610      	mov	r0, r2
    25dc:	4619      	mov	r1, r3
    25de:	f000 f9af 	bl	2940 <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    25e2:	f240 2360 	movw	r3, #608	; 0x260
    25e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25ea:	681b      	ldr	r3, [r3, #0]
    25ec:	2b00      	cmp	r3, #0
    25ee:	d1c1      	bne.n	2574 <prvCheckPendingReadyList+0x8>
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
    25f0:	3708      	adds	r7, #8
    25f2:	46bd      	mov	sp, r7
    25f4:	bd80      	pop	{r7, pc}
    25f6:	bf00      	nop

000025f8 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
    25f8:	b580      	push	{r7, lr}
    25fa:	b082      	sub	sp, #8
    25fc:	af00      	add	r7, sp, #0
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    25fe:	f001 fb95 	bl	3d2c <xTaskGetTickCount>
    2602:	4602      	mov	r2, r0
    2604:	f240 238c 	movw	r3, #652	; 0x28c
    2608:	f2c2 0300 	movt	r3, #8192	; 0x2000
    260c:	681b      	ldr	r3, [r3, #0]
    260e:	1ad2      	subs	r2, r2, r3
    2610:	f240 2390 	movw	r3, #656	; 0x290
    2614:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2618:	601a      	str	r2, [r3, #0]
	while( xPassedTicks )
    261a:	e082      	b.n	2722 <prvCheckDelayedList+0x12a>
	{
		xCoRoutineTickCount++;
    261c:	f240 2388 	movw	r3, #648	; 0x288
    2620:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2624:	681b      	ldr	r3, [r3, #0]
    2626:	1c5a      	adds	r2, r3, #1
    2628:	f240 2388 	movw	r3, #648	; 0x288
    262c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2630:	601a      	str	r2, [r3, #0]
		xPassedTicks--;
    2632:	f240 2390 	movw	r3, #656	; 0x290
    2636:	f2c2 0300 	movt	r3, #8192	; 0x2000
    263a:	681b      	ldr	r3, [r3, #0]
    263c:	1e5a      	subs	r2, r3, #1
    263e:	f240 2390 	movw	r3, #656	; 0x290
    2642:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2646:	601a      	str	r2, [r3, #0]

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
    2648:	f240 2388 	movw	r3, #648	; 0x288
    264c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2650:	681b      	ldr	r3, [r3, #0]
    2652:	2b00      	cmp	r3, #0
    2654:	d116      	bne.n	2684 <prvCheckDelayedList+0x8c>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
    2656:	f240 2358 	movw	r3, #600	; 0x258
    265a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    265e:	681b      	ldr	r3, [r3, #0]
    2660:	607b      	str	r3, [r7, #4]
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    2662:	f240 235c 	movw	r3, #604	; 0x25c
    2666:	f2c2 0300 	movt	r3, #8192	; 0x2000
    266a:	681a      	ldr	r2, [r3, #0]
    266c:	f240 2358 	movw	r3, #600	; 0x258
    2670:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2674:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedCoRoutineList = pxTemp;
    2676:	f240 235c 	movw	r3, #604	; 0x25c
    267a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    267e:	687a      	ldr	r2, [r7, #4]
    2680:	601a      	str	r2, [r3, #0]
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    2682:	e046      	b.n	2712 <prvCheckDelayedList+0x11a>
    2684:	e045      	b.n	2712 <prvCheckDelayedList+0x11a>
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    2686:	f240 2358 	movw	r3, #600	; 0x258
    268a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    268e:	681b      	ldr	r3, [r3, #0]
    2690:	699b      	ldr	r3, [r3, #24]
    2692:	699b      	ldr	r3, [r3, #24]
    2694:	603b      	str	r3, [r7, #0]

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
    2696:	683b      	ldr	r3, [r7, #0]
    2698:	685a      	ldr	r2, [r3, #4]
    269a:	f240 2388 	movw	r3, #648	; 0x288
    269e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26a2:	681b      	ldr	r3, [r3, #0]
    26a4:	429a      	cmp	r2, r3
    26a6:	d900      	bls.n	26aa <prvCheckDelayedList+0xb2>
			{			
				/* Timeout not yet expired. */																			
				break;																				
    26a8:	e03b      	b.n	2722 <prvCheckDelayedList+0x12a>
			}																						

			portDISABLE_INTERRUPTS();
    26aa:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    26ae:	f380 8811 	msr	BASEPRI, r0
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
    26b2:	683b      	ldr	r3, [r7, #0]
    26b4:	3304      	adds	r3, #4
    26b6:	4618      	mov	r0, r3
    26b8:	f000 f9a2 	bl	2a00 <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
    26bc:	683b      	ldr	r3, [r7, #0]
    26be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    26c0:	2b00      	cmp	r3, #0
    26c2:	d004      	beq.n	26ce <prvCheckDelayedList+0xd6>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
    26c4:	683b      	ldr	r3, [r7, #0]
    26c6:	3324      	adds	r3, #36	; 0x24
    26c8:	4618      	mov	r0, r3
    26ca:	f000 f999 	bl	2a00 <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    26ce:	f04f 0000 	mov.w	r0, #0
    26d2:	f380 8811 	msr	BASEPRI, r0

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    26d6:	683b      	ldr	r3, [r7, #0]
    26d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    26da:	f240 2384 	movw	r3, #644	; 0x284
    26de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26e2:	681b      	ldr	r3, [r3, #0]
    26e4:	429a      	cmp	r2, r3
    26e6:	d906      	bls.n	26f6 <prvCheckDelayedList+0xfe>
    26e8:	683b      	ldr	r3, [r7, #0]
    26ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    26ec:	f240 2384 	movw	r3, #644	; 0x284
    26f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26f4:	601a      	str	r2, [r3, #0]
    26f6:	683b      	ldr	r3, [r7, #0]
    26f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    26fa:	015a      	lsls	r2, r3, #5
    26fc:	f240 13d8 	movw	r3, #472	; 0x1d8
    2700:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2704:	441a      	add	r2, r3
    2706:	683b      	ldr	r3, [r7, #0]
    2708:	3304      	adds	r3, #4
    270a:	4610      	mov	r0, r2
    270c:	4619      	mov	r1, r3
    270e:	f000 f917 	bl	2940 <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    2712:	f240 2358 	movw	r3, #600	; 0x258
    2716:	f2c2 0300 	movt	r3, #8192	; 0x2000
    271a:	681b      	ldr	r3, [r3, #0]
    271c:	681b      	ldr	r3, [r3, #0]
    271e:	2b00      	cmp	r3, #0
    2720:	d1b1      	bne.n	2686 <prvCheckDelayedList+0x8e>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    2722:	f240 2390 	movw	r3, #656	; 0x290
    2726:	f2c2 0300 	movt	r3, #8192	; 0x2000
    272a:	681b      	ldr	r3, [r3, #0]
    272c:	2b00      	cmp	r3, #0
    272e:	f47f af75 	bne.w	261c <prvCheckDelayedList+0x24>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
    2732:	f240 2388 	movw	r3, #648	; 0x288
    2736:	f2c2 0300 	movt	r3, #8192	; 0x2000
    273a:	681a      	ldr	r2, [r3, #0]
    273c:	f240 238c 	movw	r3, #652	; 0x28c
    2740:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2744:	601a      	str	r2, [r3, #0]
}
    2746:	3708      	adds	r7, #8
    2748:	46bd      	mov	sp, r7
    274a:	bd80      	pop	{r7, pc}

0000274c <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    274c:	b580      	push	{r7, lr}
    274e:	b082      	sub	sp, #8
    2750:	af00      	add	r7, sp, #0
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
    2752:	f7ff ff0b 	bl	256c <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
    2756:	f7ff ff4f 	bl	25f8 <prvCheckDelayedList>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    275a:	e012      	b.n	2782 <vCoRoutineSchedule+0x36>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    275c:	f240 2384 	movw	r3, #644	; 0x284
    2760:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2764:	681b      	ldr	r3, [r3, #0]
    2766:	2b00      	cmp	r3, #0
    2768:	d100      	bne.n	276c <vCoRoutineSchedule+0x20>
		{
			/* No more co-routines to check. */
			return;
    276a:	e051      	b.n	2810 <vCoRoutineSchedule+0xc4>
		}
		--uxTopCoRoutineReadyPriority;
    276c:	f240 2384 	movw	r3, #644	; 0x284
    2770:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2774:	681b      	ldr	r3, [r3, #0]
    2776:	1e5a      	subs	r2, r3, #1
    2778:	f240 2384 	movw	r3, #644	; 0x284
    277c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2780:	601a      	str	r2, [r3, #0]

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    2782:	f240 2384 	movw	r3, #644	; 0x284
    2786:	f2c2 0300 	movt	r3, #8192	; 0x2000
    278a:	681a      	ldr	r2, [r3, #0]
    278c:	f240 13d8 	movw	r3, #472	; 0x1d8
    2790:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2794:	0152      	lsls	r2, r2, #5
    2796:	4413      	add	r3, r2
    2798:	681b      	ldr	r3, [r3, #0]
    279a:	2b00      	cmp	r3, #0
    279c:	d0de      	beq.n	275c <vCoRoutineSchedule+0x10>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    279e:	f240 2384 	movw	r3, #644	; 0x284
    27a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27a6:	681b      	ldr	r3, [r3, #0]
    27a8:	015a      	lsls	r2, r3, #5
    27aa:	f240 13d8 	movw	r3, #472	; 0x1d8
    27ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27b2:	4413      	add	r3, r2
    27b4:	607b      	str	r3, [r7, #4]
    27b6:	687b      	ldr	r3, [r7, #4]
    27b8:	685b      	ldr	r3, [r3, #4]
    27ba:	691a      	ldr	r2, [r3, #16]
    27bc:	687b      	ldr	r3, [r7, #4]
    27be:	605a      	str	r2, [r3, #4]
    27c0:	687b      	ldr	r3, [r7, #4]
    27c2:	685a      	ldr	r2, [r3, #4]
    27c4:	687b      	ldr	r3, [r7, #4]
    27c6:	3308      	adds	r3, #8
    27c8:	429a      	cmp	r2, r3
    27ca:	d104      	bne.n	27d6 <vCoRoutineSchedule+0x8a>
    27cc:	687b      	ldr	r3, [r7, #4]
    27ce:	685b      	ldr	r3, [r3, #4]
    27d0:	691a      	ldr	r2, [r3, #16]
    27d2:	687b      	ldr	r3, [r7, #4]
    27d4:	605a      	str	r2, [r3, #4]
    27d6:	687b      	ldr	r3, [r7, #4]
    27d8:	685b      	ldr	r3, [r3, #4]
    27da:	699a      	ldr	r2, [r3, #24]
    27dc:	f240 2380 	movw	r3, #640	; 0x280
    27e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27e4:	601a      	str	r2, [r3, #0]

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    27e6:	f240 2380 	movw	r3, #640	; 0x280
    27ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27ee:	681b      	ldr	r3, [r3, #0]
    27f0:	681a      	ldr	r2, [r3, #0]
    27f2:	f240 2380 	movw	r3, #640	; 0x280
    27f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27fa:	6819      	ldr	r1, [r3, #0]
    27fc:	f240 2380 	movw	r3, #640	; 0x280
    2800:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2804:	681b      	ldr	r3, [r3, #0]
    2806:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2808:	4608      	mov	r0, r1
    280a:	4619      	mov	r1, r3
    280c:	4790      	blx	r2

	return;
    280e:	bf00      	nop
}
    2810:	3708      	adds	r7, #8
    2812:	46bd      	mov	sp, r7
    2814:	bd80      	pop	{r7, pc}
    2816:	bf00      	nop

00002818 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
    2818:	b580      	push	{r7, lr}
    281a:	b082      	sub	sp, #8
    281c:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    281e:	2300      	movs	r3, #0
    2820:	607b      	str	r3, [r7, #4]
    2822:	e00c      	b.n	283e <prvInitialiseCoRoutineLists+0x26>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    2824:	687b      	ldr	r3, [r7, #4]
    2826:	015a      	lsls	r2, r3, #5
    2828:	f240 13d8 	movw	r3, #472	; 0x1d8
    282c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2830:	4413      	add	r3, r2
    2832:	4618      	mov	r0, r3
    2834:	f000 f858 	bl	28e8 <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    2838:	687b      	ldr	r3, [r7, #4]
    283a:	3301      	adds	r3, #1
    283c:	607b      	str	r3, [r7, #4]
    283e:	687b      	ldr	r3, [r7, #4]
    2840:	2b01      	cmp	r3, #1
    2842:	d9ef      	bls.n	2824 <prvInitialiseCoRoutineLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
    2844:	f240 2018 	movw	r0, #536	; 0x218
    2848:	f2c2 0000 	movt	r0, #8192	; 0x2000
    284c:	f000 f84c 	bl	28e8 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
    2850:	f240 2038 	movw	r0, #568	; 0x238
    2854:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2858:	f000 f846 	bl	28e8 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
    285c:	f240 2060 	movw	r0, #608	; 0x260
    2860:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2864:	f000 f840 	bl	28e8 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    2868:	f240 2358 	movw	r3, #600	; 0x258
    286c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2870:	f240 2218 	movw	r2, #536	; 0x218
    2874:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2878:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    287a:	f240 235c 	movw	r3, #604	; 0x25c
    287e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2882:	f240 2238 	movw	r2, #568	; 0x238
    2886:	f2c2 0200 	movt	r2, #8192	; 0x2000
    288a:	601a      	str	r2, [r3, #0]
}
    288c:	3708      	adds	r7, #8
    288e:	46bd      	mov	sp, r7
    2890:	bd80      	pop	{r7, pc}
    2892:	bf00      	nop

00002894 <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
    2894:	b580      	push	{r7, lr}
    2896:	b084      	sub	sp, #16
    2898:	af00      	add	r7, sp, #0
    289a:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    289c:	687b      	ldr	r3, [r7, #4]
    289e:	699b      	ldr	r3, [r3, #24]
    28a0:	699b      	ldr	r3, [r3, #24]
    28a2:	60bb      	str	r3, [r7, #8]
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    28a4:	68bb      	ldr	r3, [r7, #8]
    28a6:	3324      	adds	r3, #36	; 0x24
    28a8:	4618      	mov	r0, r3
    28aa:	f000 f8a9 	bl	2a00 <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    28ae:	68bb      	ldr	r3, [r7, #8]
    28b0:	3324      	adds	r3, #36	; 0x24
    28b2:	f240 2060 	movw	r0, #608	; 0x260
    28b6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    28ba:	4619      	mov	r1, r3
    28bc:	f000 f840 	bl	2940 <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
    28c0:	68bb      	ldr	r3, [r7, #8]
    28c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    28c4:	f240 2380 	movw	r3, #640	; 0x280
    28c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28cc:	681b      	ldr	r3, [r3, #0]
    28ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    28d0:	429a      	cmp	r2, r3
    28d2:	d302      	bcc.n	28da <xCoRoutineRemoveFromEventList+0x46>
	{
		xReturn = pdTRUE;
    28d4:	2301      	movs	r3, #1
    28d6:	60fb      	str	r3, [r7, #12]
    28d8:	e001      	b.n	28de <xCoRoutineRemoveFromEventList+0x4a>
	}
	else
	{
		xReturn = pdFALSE;
    28da:	2300      	movs	r3, #0
    28dc:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    28de:	68fb      	ldr	r3, [r7, #12]
}
    28e0:	4618      	mov	r0, r3
    28e2:	3710      	adds	r7, #16
    28e4:	46bd      	mov	sp, r7
    28e6:	bd80      	pop	{r7, pc}

000028e8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    28e8:	b480      	push	{r7}
    28ea:	b083      	sub	sp, #12
    28ec:	af00      	add	r7, sp, #0
    28ee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    28f0:	687b      	ldr	r3, [r7, #4]
    28f2:	f103 0208 	add.w	r2, r3, #8
    28f6:	687b      	ldr	r3, [r7, #4]
    28f8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    28fa:	687b      	ldr	r3, [r7, #4]
    28fc:	f04f 32ff 	mov.w	r2, #4294967295
    2900:	609a      	str	r2, [r3, #8]
    pxList->xListEnd.xDeadline = portMAX_DELAY;
#endif

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    2902:	687b      	ldr	r3, [r7, #4]
    2904:	f103 0208 	add.w	r2, r3, #8
    2908:	687b      	ldr	r3, [r7, #4]
    290a:	619a      	str	r2, [r3, #24]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    290c:	687b      	ldr	r3, [r7, #4]
    290e:	f103 0208 	add.w	r2, r3, #8
    2912:	687b      	ldr	r3, [r7, #4]
    2914:	61da      	str	r2, [r3, #28]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    2916:	687b      	ldr	r3, [r7, #4]
    2918:	2200      	movs	r2, #0
    291a:	601a      	str	r2, [r3, #0]
}
    291c:	370c      	adds	r7, #12
    291e:	46bd      	mov	sp, r7
    2920:	f85d 7b04 	ldr.w	r7, [sp], #4
    2924:	4770      	bx	lr
    2926:	bf00      	nop

00002928 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
    2928:	b480      	push	{r7}
    292a:	b083      	sub	sp, #12
    292c:	af00      	add	r7, sp, #0
    292e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    2930:	687b      	ldr	r3, [r7, #4]
    2932:	2200      	movs	r2, #0
    2934:	61da      	str	r2, [r3, #28]
}
    2936:	370c      	adds	r7, #12
    2938:	46bd      	mov	sp, r7
    293a:	f85d 7b04 	ldr.w	r7, [sp], #4
    293e:	4770      	bx	lr

00002940 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    2940:	b480      	push	{r7}
    2942:	b085      	sub	sp, #20
    2944:	af00      	add	r7, sp, #0
    2946:	6078      	str	r0, [r7, #4]
    2948:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    294a:	687b      	ldr	r3, [r7, #4]
    294c:	685b      	ldr	r3, [r3, #4]
    294e:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
    2950:	68fb      	ldr	r3, [r7, #12]
    2952:	691a      	ldr	r2, [r3, #16]
    2954:	683b      	ldr	r3, [r7, #0]
    2956:	611a      	str	r2, [r3, #16]
	pxNewListItem->pxPrevious = pxList->pxIndex;
    2958:	687b      	ldr	r3, [r7, #4]
    295a:	685a      	ldr	r2, [r3, #4]
    295c:	683b      	ldr	r3, [r7, #0]
    295e:	615a      	str	r2, [r3, #20]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2960:	68fb      	ldr	r3, [r7, #12]
    2962:	691b      	ldr	r3, [r3, #16]
    2964:	683a      	ldr	r2, [r7, #0]
    2966:	615a      	str	r2, [r3, #20]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    2968:	68fb      	ldr	r3, [r7, #12]
    296a:	683a      	ldr	r2, [r7, #0]
    296c:	611a      	str	r2, [r3, #16]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    296e:	687b      	ldr	r3, [r7, #4]
    2970:	683a      	ldr	r2, [r7, #0]
    2972:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2974:	683b      	ldr	r3, [r7, #0]
    2976:	687a      	ldr	r2, [r7, #4]
    2978:	61da      	str	r2, [r3, #28]

	( pxList->uxNumberOfItems )++;
    297a:	687b      	ldr	r3, [r7, #4]
    297c:	681b      	ldr	r3, [r3, #0]
    297e:	1c5a      	adds	r2, r3, #1
    2980:	687b      	ldr	r3, [r7, #4]
    2982:	601a      	str	r2, [r3, #0]
}
    2984:	3714      	adds	r7, #20
    2986:	46bd      	mov	sp, r7
    2988:	f85d 7b04 	ldr.w	r7, [sp], #4
    298c:	4770      	bx	lr
    298e:	bf00      	nop

00002990 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    2990:	b480      	push	{r7}
    2992:	b085      	sub	sp, #20
    2994:	af00      	add	r7, sp, #0
    2996:	6078      	str	r0, [r7, #4]
    2998:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    299a:	683b      	ldr	r3, [r7, #0]
    299c:	681b      	ldr	r3, [r3, #0]
    299e:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    29a0:	68bb      	ldr	r3, [r7, #8]
    29a2:	f1b3 3fff 	cmp.w	r3, #4294967295
    29a6:	d103      	bne.n	29b0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    29a8:	687b      	ldr	r3, [r7, #4]
    29aa:	69db      	ldr	r3, [r3, #28]
    29ac:	60fb      	str	r3, [r7, #12]
    29ae:	e00c      	b.n	29ca <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    29b0:	687b      	ldr	r3, [r7, #4]
    29b2:	3308      	adds	r3, #8
    29b4:	60fb      	str	r3, [r7, #12]
    29b6:	e002      	b.n	29be <vListInsert+0x2e>
    29b8:	68fb      	ldr	r3, [r7, #12]
    29ba:	691b      	ldr	r3, [r3, #16]
    29bc:	60fb      	str	r3, [r7, #12]
    29be:	68fb      	ldr	r3, [r7, #12]
    29c0:	691b      	ldr	r3, [r3, #16]
    29c2:	681a      	ldr	r2, [r3, #0]
    29c4:	68bb      	ldr	r3, [r7, #8]
    29c6:	429a      	cmp	r2, r3
    29c8:	d9f6      	bls.n	29b8 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    29ca:	68fb      	ldr	r3, [r7, #12]
    29cc:	691a      	ldr	r2, [r3, #16]
    29ce:	683b      	ldr	r3, [r7, #0]
    29d0:	611a      	str	r2, [r3, #16]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    29d2:	683b      	ldr	r3, [r7, #0]
    29d4:	691b      	ldr	r3, [r3, #16]
    29d6:	683a      	ldr	r2, [r7, #0]
    29d8:	615a      	str	r2, [r3, #20]
	pxNewListItem->pxPrevious = pxIterator;
    29da:	683b      	ldr	r3, [r7, #0]
    29dc:	68fa      	ldr	r2, [r7, #12]
    29de:	615a      	str	r2, [r3, #20]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    29e0:	68fb      	ldr	r3, [r7, #12]
    29e2:	683a      	ldr	r2, [r7, #0]
    29e4:	611a      	str	r2, [r3, #16]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    29e6:	683b      	ldr	r3, [r7, #0]
    29e8:	687a      	ldr	r2, [r7, #4]
    29ea:	61da      	str	r2, [r3, #28]

	( pxList->uxNumberOfItems )++;
    29ec:	687b      	ldr	r3, [r7, #4]
    29ee:	681b      	ldr	r3, [r3, #0]
    29f0:	1c5a      	adds	r2, r3, #1
    29f2:	687b      	ldr	r3, [r7, #4]
    29f4:	601a      	str	r2, [r3, #0]
}
    29f6:	3714      	adds	r7, #20
    29f8:	46bd      	mov	sp, r7
    29fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    29fe:	4770      	bx	lr

00002a00 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    2a00:	b480      	push	{r7}
    2a02:	b085      	sub	sp, #20
    2a04:	af00      	add	r7, sp, #0
    2a06:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    2a08:	687b      	ldr	r3, [r7, #4]
    2a0a:	691b      	ldr	r3, [r3, #16]
    2a0c:	687a      	ldr	r2, [r7, #4]
    2a0e:	6952      	ldr	r2, [r2, #20]
    2a10:	615a      	str	r2, [r3, #20]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    2a12:	687b      	ldr	r3, [r7, #4]
    2a14:	695b      	ldr	r3, [r3, #20]
    2a16:	687a      	ldr	r2, [r7, #4]
    2a18:	6912      	ldr	r2, [r2, #16]
    2a1a:	611a      	str	r2, [r3, #16]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    2a1c:	687b      	ldr	r3, [r7, #4]
    2a1e:	69db      	ldr	r3, [r3, #28]
    2a20:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    2a22:	68fb      	ldr	r3, [r7, #12]
    2a24:	685a      	ldr	r2, [r3, #4]
    2a26:	687b      	ldr	r3, [r7, #4]
    2a28:	429a      	cmp	r2, r3
    2a2a:	d103      	bne.n	2a34 <vListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    2a2c:	687b      	ldr	r3, [r7, #4]
    2a2e:	695a      	ldr	r2, [r3, #20]
    2a30:	68fb      	ldr	r3, [r7, #12]
    2a32:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
    2a34:	687b      	ldr	r3, [r7, #4]
    2a36:	2200      	movs	r2, #0
    2a38:	61da      	str	r2, [r3, #28]
	( pxList->uxNumberOfItems )--;
    2a3a:	68fb      	ldr	r3, [r7, #12]
    2a3c:	681b      	ldr	r3, [r3, #0]
    2a3e:	1e5a      	subs	r2, r3, #1
    2a40:	68fb      	ldr	r3, [r7, #12]
    2a42:	601a      	str	r2, [r3, #0]
}
    2a44:	3714      	adds	r7, #20
    2a46:	46bd      	mov	sp, r7
    2a48:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a4c:	4770      	bx	lr
    2a4e:	bf00      	nop

00002a50 <timer_init>:
 * running at Clk/1024.  For 16 Mhz clock, this will be every
 * 16384 microseconds, or 61 Hz.
 */
static inline void
timer_init( void )
{
    2a50:	b480      	push	{r7}
    2a52:	af00      	add	r7, sp, #0
  /* Timer1 @ Clk/1: System clock, ppm and servos pulses */
  TCCR1A		= 0x00;
    2a54:	f248 032f 	movw	r3, #32815	; 0x802f
    2a58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a5c:	2200      	movs	r2, #0
    2a5e:	701a      	strb	r2, [r3, #0]
  TCCR1B		= 0x01;
    2a60:	f248 032e 	movw	r3, #32814	; 0x802e
    2a64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a68:	2201      	movs	r2, #1
    2a6a:	701a      	strb	r2, [r3, #0]
  
  /* Timer2 @ Clk/1024: Periodic clock            */
  TCCR2		= 0x07;
    2a6c:	f248 0325 	movw	r3, #32805	; 0x8025
    2a70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a74:	2207      	movs	r2, #7
    2a76:	701a      	strb	r2, [r3, #0]
}
    2a78:	46bd      	mov	sp, r7
    2a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a7e:	4770      	bx	lr

00002a80 <vPapabenchInit>:

extern uint8_t mode ;
extern uint8_t pprz_mode;

void vPapabenchInit()
{
    2a80:	b580      	push	{r7, lr}
    2a82:	af00      	add	r7, sp, #0
    mode = MODE_AUTO;
    2a84:	f64b 53b8 	movw	r3, #48568	; 0xbdb8
    2a88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    2a8c:	2201      	movs	r2, #1
    2a8e:	701a      	strb	r2, [r3, #0]
    pprz_mode = PPRZ_MODE_HOME;
    2a90:	f24b 6344 	movw	r3, #46660	; 0xb644
    2a94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    2a98:	2203      	movs	r2, #3
    2a9a:	701a      	strb	r2, [r3, #0]
    timer_init();
    2a9c:	f7ff ffd8 	bl	2a50 <timer_init>
    modem_init();
    2aa0:	f009 fa8e 	bl	bfc0 <modem_init>
    adc_init();
    2aa4:	f009 fdd8 	bl	c658 <adc_init>
#ifdef CTL_BRD_V1_1
    adc_buf_channel(uint8_t adc_channel, struct adc_buf *s);
#endif 
    spi_init();
    2aa8:	f009 fd4a 	bl	c540 <spi_init>
    link_fbw_init();
    2aac:	f009 fba6 	bl	c1fc <link_fbw_init>
    gps_init();
    2ab0:	f009 fe82 	bl	c7b8 <gps_init>
    nav_init();
    2ab4:	f00d f992 	bl	fddc <nav_init>
    ir_init();
    2ab8:	f00a f93e 	bl	cd38 <ir_init>
    estimator_init();
    2abc:	f00d fb74 	bl	101a8 <estimator_init>
#ifdef PAPABENCH_SINGLE
    fbw_init();
#endif
}
    2ac0:	bd80      	pop	{r7, pc}
    2ac2:	bf00      	nop

00002ac4 <vTask_0>:


void vTask_0()
{
    2ac4:	b580      	push	{r7, lr}
    2ac6:	af00      	add	r7, sp, #0
    last_radio_from_ppm(); //ppm.h
    2ac8:	f00e fb4a 	bl	11160 <last_radio_from_ppm>
}
    2acc:	bd80      	pop	{r7, pc}
    2ace:	bf00      	nop

00002ad0 <vTask_1>:

void  vTask_1()
{
    2ad0:	b580      	push	{r7, lr}
    2ad2:	af00      	add	r7, sp, #0
    to_autopilot_from_last_radio();  //main_auto.c
    2ad4:	f00e fefe 	bl	118d4 <to_autopilot_from_last_radio>
    spi_reset(); // spi_fbw.h
    2ad8:	f00e fe3a 	bl	11750 <spi_reset>
}
    2adc:	bd80      	pop	{r7, pc}
    2ade:	bf00      	nop

00002ae0 <vTask_2>:

void  vTask_2()
{
    2ae0:	b580      	push	{r7, lr}
    2ae2:	af00      	add	r7, sp, #0
    check_mega128_values_task(); // main_auto.c
    2ae4:	f00f f85a 	bl	11b9c <check_mega128_values_task>
}
    2ae8:	bd80      	pop	{r7, pc}
    2aea:	bf00      	nop

00002aec <vTask_3>:

void vTask_3()
{
    2aec:	b580      	push	{r7, lr}
    2aee:	af00      	add	r7, sp, #0
    servo_transmit(); //servo.h
    2af0:	f00f f924 	bl	11d3c <servo_transmit>
}
    2af4:	bd80      	pop	{r7, pc}
    2af6:	bf00      	nop

00002af8 <vTask_4>:

void vTask_4()
{
    2af8:	b580      	push	{r7, lr}
    2afa:	af00      	add	r7, sp, #0
    check_failsafe_task(); //main_auto.c
    2afc:	f00f f828 	bl	11b50 <check_failsafe_task>
}
    2b00:	bd80      	pop	{r7, pc}
    2b02:	bf00      	nop

00002b04 <vTask_5>:

void vTask_5()
{
    2b04:	b580      	push	{r7, lr}
    2b06:	af00      	add	r7, sp, #0
    radio_control_task(); //main_auto.c
    2b08:	f007 fef8 	bl	a8fc <radio_control_task>
    ir_gain_calib();
    2b0c:	f00a f96c 	bl	cde8 <ir_gain_calib>
}
    2b10:	bd80      	pop	{r7, pc}
    2b12:	bf00      	nop

00002b14 <vTask_6>:

void vTask_6()
{
    2b14:	b580      	push	{r7, lr}
    2b16:	af00      	add	r7, sp, #0
    ir_update();
    2b18:	f00a f928 	bl	cd6c <ir_update>
    estimator_update_state_infrared();
    2b1c:	f00d fbae 	bl	1027c <estimator_update_state_infrared>
    roll_pitch_pid_run();
    2b20:	f00a f992 	bl	ce48 <roll_pitch_pid_run>
}
    2b24:	bd80      	pop	{r7, pc}
    2b26:	bf00      	nop

00002b28 <vTask_7>:

void vTask_7()
{
    2b28:	b580      	push	{r7, lr}
    2b2a:	af00      	add	r7, sp, #0
    link_fbw_send(); // link_fbw.h
    2b2c:	f009 fb78 	bl	c220 <link_fbw_send>
}
    2b30:	bd80      	pop	{r7, pc}
    2b32:	bf00      	nop

00002b34 <vTask_8>:

void vTask_8()
{
    2b34:	b580      	push	{r7, lr}
    2b36:	af00      	add	r7, sp, #0
    parse_gps_msg();
    2b38:	f009 fe4a 	bl	c7d0 <parse_gps_msg>
    use_gps_pos();
    2b3c:	f009 f9ec 	bl	bf18 <use_gps_pos>
}
    2b40:	bd80      	pop	{r7, pc}
    2b42:	bf00      	nop

00002b44 <vTask_9>:

void vTask_9()
{
    2b44:	b580      	push	{r7, lr}
    2b46:	af00      	add	r7, sp, #0
    navigation_update();
    2b48:	f007 ffd2 	bl	aaf0 <navigation_update>
    send_nav_values();
    2b4c:	f007 ffe6 	bl	ab1c <send_nav_values>
    course_run();
    2b50:	f009 f8c0 	bl	bcd4 <course_run>
}
    2b54:	bd80      	pop	{r7, pc}
    2b56:	bf00      	nop

00002b58 <vTask_10>:

void vTask_10()
{
    2b58:	b580      	push	{r7, lr}
    2b5a:	af00      	add	r7, sp, #0
    altitude_control_task();
    2b5c:	f009 f8de 	bl	bd1c <altitude_control_task>
}
    2b60:	bd80      	pop	{r7, pc}
    2b62:	bf00      	nop

00002b64 <vTask_11>:

void vTask_11()
{
    2b64:	b580      	push	{r7, lr}
    2b66:	af00      	add	r7, sp, #0
    climb_control_task();
    2b68:	f009 f8f2 	bl	bd50 <climb_control_task>
}
    2b6c:	bd80      	pop	{r7, pc}
    2b6e:	bf00      	nop

00002b70 <vTask_12>:

void vTask_12()
{
    2b70:	b580      	push	{r7, lr}
    2b72:	af00      	add	r7, sp, #0
    reporting_task();
    2b74:	f007 fe76 	bl	a864 <reporting_task>
}
    2b78:	bd80      	pop	{r7, pc}
    2b7a:	bf00      	nop

00002b7c <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
    2b7c:	b580      	push	{r7, lr}
    2b7e:	b084      	sub	sp, #16
    2b80:	af00      	add	r7, sp, #0
    2b82:	6078      	str	r0, [r7, #4]
    2b84:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn = pdPASS;
    2b86:	2301      	movs	r3, #1
    2b88:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	/* If the queue being reset has already been used (has not just been
	created), then only reset the queue if its event lists are empty. */
	if( xNewQueue != pdTRUE )
    2b8a:	683b      	ldr	r3, [r7, #0]
    2b8c:	2b01      	cmp	r3, #1
    2b8e:	d00b      	beq.n	2ba8 <xQueueGenericReset+0x2c>
	{
		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2b90:	687b      	ldr	r3, [r7, #4]
    2b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2b94:	2b00      	cmp	r3, #0
    2b96:	d001      	beq.n	2b9c <xQueueGenericReset+0x20>
		{
			xReturn = pdFAIL;
    2b98:	2300      	movs	r3, #0
    2b9a:	60fb      	str	r3, [r7, #12]
		}

		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2b9c:	687b      	ldr	r3, [r7, #4]
    2b9e:	691b      	ldr	r3, [r3, #16]
    2ba0:	2b00      	cmp	r3, #0
    2ba2:	d001      	beq.n	2ba8 <xQueueGenericReset+0x2c>
		{
			xReturn = pdFAIL;
    2ba4:	2300      	movs	r3, #0
    2ba6:	60fb      	str	r3, [r7, #12]
		}
	}

	if( xReturn == pdPASS )
    2ba8:	68fb      	ldr	r3, [r7, #12]
    2baa:	2b01      	cmp	r3, #1
    2bac:	d12f      	bne.n	2c0e <xQueueGenericReset+0x92>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    2bae:	687b      	ldr	r3, [r7, #4]
    2bb0:	681a      	ldr	r2, [r3, #0]
    2bb2:	687b      	ldr	r3, [r7, #4]
    2bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    2bb6:	6879      	ldr	r1, [r7, #4]
    2bb8:	6d89      	ldr	r1, [r1, #88]	; 0x58
    2bba:	fb01 f303 	mul.w	r3, r1, r3
    2bbe:	441a      	add	r2, r3
    2bc0:	687b      	ldr	r3, [r7, #4]
    2bc2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    2bc4:	687b      	ldr	r3, [r7, #4]
    2bc6:	2200      	movs	r2, #0
    2bc8:	651a      	str	r2, [r3, #80]	; 0x50
		pxQueue->pcWriteTo = pxQueue->pcHead;
    2bca:	687b      	ldr	r3, [r7, #4]
    2bcc:	681a      	ldr	r2, [r3, #0]
    2bce:	687b      	ldr	r3, [r7, #4]
    2bd0:	609a      	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
    2bd2:	687b      	ldr	r3, [r7, #4]
    2bd4:	681a      	ldr	r2, [r3, #0]
    2bd6:	687b      	ldr	r3, [r7, #4]
    2bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    2bda:	3b01      	subs	r3, #1
    2bdc:	6879      	ldr	r1, [r7, #4]
    2bde:	6d89      	ldr	r1, [r1, #88]	; 0x58
    2be0:	fb01 f303 	mul.w	r3, r1, r3
    2be4:	441a      	add	r2, r3
    2be6:	687b      	ldr	r3, [r7, #4]
    2be8:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
    2bea:	687b      	ldr	r3, [r7, #4]
    2bec:	f04f 32ff 	mov.w	r2, #4294967295
    2bf0:	65da      	str	r2, [r3, #92]	; 0x5c
		pxQueue->xTxLock = queueUNLOCKED;
    2bf2:	687b      	ldr	r3, [r7, #4]
    2bf4:	f04f 32ff 	mov.w	r2, #4294967295
    2bf8:	661a      	str	r2, [r3, #96]	; 0x60

		/* Ensure the event queues start with the correct state. */
		vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    2bfa:	687b      	ldr	r3, [r7, #4]
    2bfc:	3310      	adds	r3, #16
    2bfe:	4618      	mov	r0, r3
    2c00:	f7ff fe72 	bl	28e8 <vListInitialise>
		vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    2c04:	687b      	ldr	r3, [r7, #4]
    2c06:	3330      	adds	r3, #48	; 0x30
    2c08:	4618      	mov	r0, r3
    2c0a:	f7ff fe6d 	bl	28e8 <vListInitialise>
	}

	return xReturn;
    2c0e:	68fb      	ldr	r3, [r7, #12]
}
    2c10:	4618      	mov	r0, r3
    2c12:	3710      	adds	r7, #16
    2c14:	46bd      	mov	sp, r7
    2c16:	bd80      	pop	{r7, pc}

00002c18 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
    2c18:	b580      	push	{r7, lr}
    2c1a:	b088      	sub	sp, #32
    2c1c:	af00      	add	r7, sp, #0
    2c1e:	60f8      	str	r0, [r7, #12]
    2c20:	60b9      	str	r1, [r7, #8]
    2c22:	4613      	mov	r3, r2
    2c24:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    2c26:	2300      	movs	r3, #0
    2c28:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    2c2a:	68fb      	ldr	r3, [r7, #12]
    2c2c:	2b00      	cmp	r3, #0
    2c2e:	d026      	beq.n	2c7e <xQueueGenericCreate+0x66>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    2c30:	2064      	movs	r0, #100	; 0x64
    2c32:	f001 fe77 	bl	4924 <pvPortMalloc>
    2c36:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
    2c38:	69bb      	ldr	r3, [r7, #24]
    2c3a:	2b00      	cmp	r3, #0
    2c3c:	d01f      	beq.n	2c7e <xQueueGenericCreate+0x66>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    2c3e:	68fb      	ldr	r3, [r7, #12]
    2c40:	68ba      	ldr	r2, [r7, #8]
    2c42:	fb02 f303 	mul.w	r3, r2, r3
    2c46:	3301      	adds	r3, #1
    2c48:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    2c4a:	6978      	ldr	r0, [r7, #20]
    2c4c:	f001 fe6a 	bl	4924 <pvPortMalloc>
    2c50:	4602      	mov	r2, r0
    2c52:	69bb      	ldr	r3, [r7, #24]
    2c54:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
    2c56:	69bb      	ldr	r3, [r7, #24]
    2c58:	681b      	ldr	r3, [r3, #0]
    2c5a:	2b00      	cmp	r3, #0
    2c5c:	d00c      	beq.n	2c78 <xQueueGenericCreate+0x60>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
    2c5e:	69bb      	ldr	r3, [r7, #24]
    2c60:	68fa      	ldr	r2, [r7, #12]
    2c62:	655a      	str	r2, [r3, #84]	; 0x54
				pxNewQueue->uxItemSize = uxItemSize;
    2c64:	69bb      	ldr	r3, [r7, #24]
    2c66:	68ba      	ldr	r2, [r7, #8]
    2c68:	659a      	str	r2, [r3, #88]	; 0x58
				xQueueGenericReset( pxNewQueue, pdTRUE );
    2c6a:	69b8      	ldr	r0, [r7, #24]
    2c6c:	2101      	movs	r1, #1
    2c6e:	f7ff ff85 	bl	2b7c <xQueueGenericReset>
					pxNewQueue->ucQueueType = ucQueueType;
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    2c72:	69bb      	ldr	r3, [r7, #24]
    2c74:	61fb      	str	r3, [r7, #28]
    2c76:	e002      	b.n	2c7e <xQueueGenericCreate+0x66>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
    2c78:	69b8      	ldr	r0, [r7, #24]
    2c7a:	f001 ff17 	bl	4aac <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    2c7e:	69fb      	ldr	r3, [r7, #28]
}
    2c80:	4618      	mov	r0, r3
    2c82:	3720      	adds	r7, #32
    2c84:	46bd      	mov	sp, r7
    2c86:	bd80      	pop	{r7, pc}

00002c88 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( unsigned char ucQueueType )
	{
    2c88:	b580      	push	{r7, lr}
    2c8a:	b084      	sub	sp, #16
    2c8c:	af00      	add	r7, sp, #0
    2c8e:	4603      	mov	r3, r0
    2c90:	71fb      	strb	r3, [r7, #7]
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    2c92:	2064      	movs	r0, #100	; 0x64
    2c94:	f001 fe46 	bl	4924 <pvPortMalloc>
    2c98:	60f8      	str	r0, [r7, #12]
		if( pxNewQueue != NULL )
    2c9a:	68fb      	ldr	r3, [r7, #12]
    2c9c:	2b00      	cmp	r3, #0
    2c9e:	d02c      	beq.n	2cfa <xQueueCreateMutex+0x72>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    2ca0:	68fb      	ldr	r3, [r7, #12]
    2ca2:	2200      	movs	r2, #0
    2ca4:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    2ca6:	68fb      	ldr	r3, [r7, #12]
    2ca8:	2200      	movs	r2, #0
    2caa:	601a      	str	r2, [r3, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
    2cac:	68fb      	ldr	r3, [r7, #12]
    2cae:	2200      	movs	r2, #0
    2cb0:	609a      	str	r2, [r3, #8]
			pxNewQueue->pcReadFrom = NULL;
    2cb2:	68fb      	ldr	r3, [r7, #12]
    2cb4:	2200      	movs	r2, #0
    2cb6:	60da      	str	r2, [r3, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    2cb8:	68fb      	ldr	r3, [r7, #12]
    2cba:	2200      	movs	r2, #0
    2cbc:	651a      	str	r2, [r3, #80]	; 0x50
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
    2cbe:	68fb      	ldr	r3, [r7, #12]
    2cc0:	2201      	movs	r2, #1
    2cc2:	655a      	str	r2, [r3, #84]	; 0x54
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
    2cc4:	68fb      	ldr	r3, [r7, #12]
    2cc6:	2200      	movs	r2, #0
    2cc8:	659a      	str	r2, [r3, #88]	; 0x58
			pxNewQueue->xRxLock = queueUNLOCKED;
    2cca:	68fb      	ldr	r3, [r7, #12]
    2ccc:	f04f 32ff 	mov.w	r2, #4294967295
    2cd0:	65da      	str	r2, [r3, #92]	; 0x5c
			pxNewQueue->xTxLock = queueUNLOCKED;
    2cd2:	68fb      	ldr	r3, [r7, #12]
    2cd4:	f04f 32ff 	mov.w	r2, #4294967295
    2cd8:	661a      	str	r2, [r3, #96]	; 0x60
				pxNewQueue->ucQueueType = ucQueueType;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    2cda:	68fb      	ldr	r3, [r7, #12]
    2cdc:	3310      	adds	r3, #16
    2cde:	4618      	mov	r0, r3
    2ce0:	f7ff fe02 	bl	28e8 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    2ce4:	68fb      	ldr	r3, [r7, #12]
    2ce6:	3330      	adds	r3, #48	; 0x30
    2ce8:	4618      	mov	r0, r3
    2cea:	f7ff fdfd 	bl	28e8 <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
    2cee:	68f8      	ldr	r0, [r7, #12]
    2cf0:	2100      	movs	r1, #0
    2cf2:	2200      	movs	r2, #0
    2cf4:	2300      	movs	r3, #0
    2cf6:	f000 f81d 	bl	2d34 <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
    2cfa:	68fb      	ldr	r3, [r7, #12]
	}
    2cfc:	4618      	mov	r0, r3
    2cfe:	3710      	adds	r7, #16
    2d00:	46bd      	mov	sp, r7
    2d02:	bd80      	pop	{r7, pc}

00002d04 <xQueueGetMutexHolder>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void* xQueueGetMutexHolder( xQueueHandle xSemaphore )
	{
    2d04:	b580      	push	{r7, lr}
    2d06:	b084      	sub	sp, #16
    2d08:	af00      	add	r7, sp, #0
    2d0a:	6078      	str	r0, [r7, #4]
		/* This function is called by xSemaphoreGetMutexHolder(), and should not
		be called directly.  Note:  This is is a good way of determining if the
		calling task is the mutex holder, but not a good way of determining the
		identity of the mutex holder, as the holder may change between the
		following critical section exiting and the function returning. */
		taskENTER_CRITICAL();
    2d0c:	f001 fd92 	bl	4834 <vPortEnterCritical>
		{
			if( xSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
    2d10:	687b      	ldr	r3, [r7, #4]
    2d12:	681b      	ldr	r3, [r3, #0]
    2d14:	2b00      	cmp	r3, #0
    2d16:	d103      	bne.n	2d20 <xQueueGetMutexHolder+0x1c>
			{
				pxReturn = ( void * ) xSemaphore->pxMutexHolder;
    2d18:	687b      	ldr	r3, [r7, #4]
    2d1a:	685b      	ldr	r3, [r3, #4]
    2d1c:	60fb      	str	r3, [r7, #12]
    2d1e:	e001      	b.n	2d24 <xQueueGetMutexHolder+0x20>
			}
			else
			{
				pxReturn = NULL;
    2d20:	2300      	movs	r3, #0
    2d22:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
    2d24:	f001 fd9c 	bl	4860 <vPortExitCritical>
		
		return pxReturn;
    2d28:	68fb      	ldr	r3, [r7, #12]
	}
    2d2a:	4618      	mov	r0, r3
    2d2c:	3710      	adds	r7, #16
    2d2e:	46bd      	mov	sp, r7
    2d30:	bd80      	pop	{r7, pc}
    2d32:	bf00      	nop

00002d34 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    2d34:	b580      	push	{r7, lr}
    2d36:	b088      	sub	sp, #32
    2d38:	af00      	add	r7, sp, #0
    2d3a:	60f8      	str	r0, [r7, #12]
    2d3c:	60b9      	str	r1, [r7, #8]
    2d3e:	607a      	str	r2, [r7, #4]
    2d40:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    2d42:	2300      	movs	r3, #0
    2d44:	61fb      	str	r3, [r7, #28]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    2d46:	f001 fd75 	bl	4834 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    2d4a:	68fb      	ldr	r3, [r7, #12]
    2d4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    2d4e:	68fb      	ldr	r3, [r7, #12]
    2d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    2d52:	429a      	cmp	r2, r3
    2d54:	d216      	bcs.n	2d84 <xQueueGenericSend+0x50>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    2d56:	68f8      	ldr	r0, [r7, #12]
    2d58:	68b9      	ldr	r1, [r7, #8]
    2d5a:	683a      	ldr	r2, [r7, #0]
    2d5c:	f000 f9d6 	bl	310c <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2d60:	68fb      	ldr	r3, [r7, #12]
    2d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2d64:	2b00      	cmp	r3, #0
    2d66:	d009      	beq.n	2d7c <xQueueGenericSend+0x48>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    2d68:	68fb      	ldr	r3, [r7, #12]
    2d6a:	3330      	adds	r3, #48	; 0x30
    2d6c:	4618      	mov	r0, r3
    2d6e:	f001 fa17 	bl	41a0 <xTaskRemoveFromEventList>
    2d72:	4603      	mov	r3, r0
    2d74:	2b01      	cmp	r3, #1
    2d76:	d101      	bne.n	2d7c <xQueueGenericSend+0x48>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    2d78:	f001 fd4e 	bl	4818 <vPortYieldFromISR>
					}
				}

				taskEXIT_CRITICAL();
    2d7c:	f001 fd70 	bl	4860 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    2d80:	2301      	movs	r3, #1
    2d82:	e059      	b.n	2e38 <xQueueGenericSend+0x104>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    2d84:	687b      	ldr	r3, [r7, #4]
    2d86:	2b00      	cmp	r3, #0
    2d88:	d103      	bne.n	2d92 <xQueueGenericSend+0x5e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    2d8a:	f001 fd69 	bl	4860 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    2d8e:	2300      	movs	r3, #0
    2d90:	e052      	b.n	2e38 <xQueueGenericSend+0x104>
				}
				else if( xEntryTimeSet == pdFALSE )
    2d92:	69fb      	ldr	r3, [r7, #28]
    2d94:	2b00      	cmp	r3, #0
    2d96:	d106      	bne.n	2da6 <xQueueGenericSend+0x72>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    2d98:	f107 0314 	add.w	r3, r7, #20
    2d9c:	4618      	mov	r0, r3
    2d9e:	f001 fa55 	bl	424c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    2da2:	2301      	movs	r3, #1
    2da4:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    2da6:	f001 fd5b 	bl	4860 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    2daa:	f000 ff09 	bl	3bc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    2dae:	f001 fd41 	bl	4834 <vPortEnterCritical>
    2db2:	68fb      	ldr	r3, [r7, #12]
    2db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    2db6:	f1b3 3fff 	cmp.w	r3, #4294967295
    2dba:	d102      	bne.n	2dc2 <xQueueGenericSend+0x8e>
    2dbc:	68fb      	ldr	r3, [r7, #12]
    2dbe:	2200      	movs	r2, #0
    2dc0:	65da      	str	r2, [r3, #92]	; 0x5c
    2dc2:	68fb      	ldr	r3, [r7, #12]
    2dc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    2dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
    2dca:	d102      	bne.n	2dd2 <xQueueGenericSend+0x9e>
    2dcc:	68fb      	ldr	r3, [r7, #12]
    2dce:	2200      	movs	r2, #0
    2dd0:	661a      	str	r2, [r3, #96]	; 0x60
    2dd2:	f001 fd45 	bl	4860 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2dd6:	f107 0214 	add.w	r2, r7, #20
    2dda:	1d3b      	adds	r3, r7, #4
    2ddc:	4610      	mov	r0, r2
    2dde:	4619      	mov	r1, r3
    2de0:	f001 fa4c 	bl	427c <xTaskCheckForTimeOut>
    2de4:	4603      	mov	r3, r0
    2de6:	2b00      	cmp	r3, #0
    2de8:	d11e      	bne.n	2e28 <xQueueGenericSend+0xf4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    2dea:	68f8      	ldr	r0, [r7, #12]
    2dec:	f000 fa86 	bl	32fc <prvIsQueueFull>
    2df0:	4603      	mov	r3, r0
    2df2:	2b00      	cmp	r3, #0
    2df4:	d012      	beq.n	2e1c <xQueueGenericSend+0xe8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    2df6:	68fb      	ldr	r3, [r7, #12]
    2df8:	f103 0210 	add.w	r2, r3, #16
    2dfc:	687b      	ldr	r3, [r7, #4]
    2dfe:	4610      	mov	r0, r2
    2e00:	4619      	mov	r1, r3
    2e02:	f001 f995 	bl	4130 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    2e06:	68f8      	ldr	r0, [r7, #12]
    2e08:	f000 fa02 	bl	3210 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    2e0c:	f000 feea 	bl	3be4 <xTaskResumeAll>
    2e10:	4603      	mov	r3, r0
    2e12:	2b00      	cmp	r3, #0
    2e14:	d10f      	bne.n	2e36 <xQueueGenericSend+0x102>
				{
					portYIELD_WITHIN_API();
    2e16:	f001 fcff 	bl	4818 <vPortYieldFromISR>
    2e1a:	e00c      	b.n	2e36 <xQueueGenericSend+0x102>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    2e1c:	68f8      	ldr	r0, [r7, #12]
    2e1e:	f000 f9f7 	bl	3210 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    2e22:	f000 fedf 	bl	3be4 <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
    2e26:	e78e      	b.n	2d46 <xQueueGenericSend+0x12>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    2e28:	68f8      	ldr	r0, [r7, #12]
    2e2a:	f000 f9f1 	bl	3210 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    2e2e:	f000 fed9 	bl	3be4 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    2e32:	2300      	movs	r3, #0
    2e34:	e000      	b.n	2e38 <xQueueGenericSend+0x104>
		}
	}
    2e36:	e786      	b.n	2d46 <xQueueGenericSend+0x12>
}
    2e38:	4618      	mov	r0, r3
    2e3a:	3720      	adds	r7, #32
    2e3c:	46bd      	mov	sp, r7
    2e3e:	bd80      	pop	{r7, pc}

00002e40 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    2e40:	b580      	push	{r7, lr}
    2e42:	b086      	sub	sp, #24
    2e44:	af00      	add	r7, sp, #0
    2e46:	60f8      	str	r0, [r7, #12]
    2e48:	60b9      	str	r1, [r7, #8]
    2e4a:	607a      	str	r2, [r7, #4]
    2e4c:	603b      	str	r3, [r7, #0]
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    2e4e:	2300      	movs	r3, #0
    2e50:	613b      	str	r3, [r7, #16]
    2e52:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    2e56:	f380 8811 	msr	BASEPRI, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    2e5a:	68fb      	ldr	r3, [r7, #12]
    2e5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    2e5e:	68fb      	ldr	r3, [r7, #12]
    2e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    2e62:	429a      	cmp	r2, r3
    2e64:	d221      	bcs.n	2eaa <xQueueGenericSendFromISR+0x6a>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    2e66:	68f8      	ldr	r0, [r7, #12]
    2e68:	68b9      	ldr	r1, [r7, #8]
    2e6a:	683a      	ldr	r2, [r7, #0]
    2e6c:	f000 f94e 	bl	310c <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    2e70:	68fb      	ldr	r3, [r7, #12]
    2e72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    2e74:	f1b3 3fff 	cmp.w	r3, #4294967295
    2e78:	d10f      	bne.n	2e9a <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2e7a:	68fb      	ldr	r3, [r7, #12]
    2e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2e7e:	2b00      	cmp	r3, #0
    2e80:	d010      	beq.n	2ea4 <xQueueGenericSendFromISR+0x64>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2e82:	68fb      	ldr	r3, [r7, #12]
    2e84:	3330      	adds	r3, #48	; 0x30
    2e86:	4618      	mov	r0, r3
    2e88:	f001 f98a 	bl	41a0 <xTaskRemoveFromEventList>
    2e8c:	4603      	mov	r3, r0
    2e8e:	2b00      	cmp	r3, #0
    2e90:	d008      	beq.n	2ea4 <xQueueGenericSendFromISR+0x64>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    2e92:	687b      	ldr	r3, [r7, #4]
    2e94:	2201      	movs	r2, #1
    2e96:	601a      	str	r2, [r3, #0]
    2e98:	e004      	b.n	2ea4 <xQueueGenericSendFromISR+0x64>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    2e9a:	68fb      	ldr	r3, [r7, #12]
    2e9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    2e9e:	1c5a      	adds	r2, r3, #1
    2ea0:	68fb      	ldr	r3, [r7, #12]
    2ea2:	661a      	str	r2, [r3, #96]	; 0x60
			}

			xReturn = pdPASS;
    2ea4:	2301      	movs	r3, #1
    2ea6:	617b      	str	r3, [r7, #20]
    2ea8:	e001      	b.n	2eae <xQueueGenericSendFromISR+0x6e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    2eaa:	2300      	movs	r3, #0
    2eac:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    2eae:	f04f 0000 	mov.w	r0, #0
    2eb2:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    2eb6:	697b      	ldr	r3, [r7, #20]
}
    2eb8:	4618      	mov	r0, r3
    2eba:	3718      	adds	r7, #24
    2ebc:	46bd      	mov	sp, r7
    2ebe:	bd80      	pop	{r7, pc}

00002ec0 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    2ec0:	b580      	push	{r7, lr}
    2ec2:	b088      	sub	sp, #32
    2ec4:	af00      	add	r7, sp, #0
    2ec6:	60f8      	str	r0, [r7, #12]
    2ec8:	60b9      	str	r1, [r7, #8]
    2eca:	607a      	str	r2, [r7, #4]
    2ecc:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    2ece:	2300      	movs	r3, #0
    2ed0:	61fb      	str	r3, [r7, #28]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    2ed2:	f001 fcaf 	bl	4834 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    2ed6:	68fb      	ldr	r3, [r7, #12]
    2ed8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    2eda:	2b00      	cmp	r3, #0
    2edc:	d03b      	beq.n	2f56 <xQueueGenericReceive+0x96>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    2ede:	68fb      	ldr	r3, [r7, #12]
    2ee0:	68db      	ldr	r3, [r3, #12]
    2ee2:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    2ee4:	68f8      	ldr	r0, [r7, #12]
    2ee6:	68b9      	ldr	r1, [r7, #8]
    2ee8:	f000 f96c 	bl	31c4 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    2eec:	683b      	ldr	r3, [r7, #0]
    2eee:	2b00      	cmp	r3, #0
    2ef0:	d11c      	bne.n	2f2c <xQueueGenericReceive+0x6c>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    2ef2:	68fb      	ldr	r3, [r7, #12]
    2ef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    2ef6:	1e5a      	subs	r2, r3, #1
    2ef8:	68fb      	ldr	r3, [r7, #12]
    2efa:	651a      	str	r2, [r3, #80]	; 0x50

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    2efc:	68fb      	ldr	r3, [r7, #12]
    2efe:	681b      	ldr	r3, [r3, #0]
    2f00:	2b00      	cmp	r3, #0
    2f02:	d104      	bne.n	2f0e <xQueueGenericReceive+0x4e>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
    2f04:	f001 fb6a 	bl	45dc <xTaskGetCurrentTaskHandle>
    2f08:	4602      	mov	r2, r0
    2f0a:	68fb      	ldr	r3, [r7, #12]
    2f0c:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2f0e:	68fb      	ldr	r3, [r7, #12]
    2f10:	691b      	ldr	r3, [r3, #16]
    2f12:	2b00      	cmp	r3, #0
    2f14:	d01b      	beq.n	2f4e <xQueueGenericReceive+0x8e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    2f16:	68fb      	ldr	r3, [r7, #12]
    2f18:	3310      	adds	r3, #16
    2f1a:	4618      	mov	r0, r3
    2f1c:	f001 f940 	bl	41a0 <xTaskRemoveFromEventList>
    2f20:	4603      	mov	r3, r0
    2f22:	2b01      	cmp	r3, #1
    2f24:	d113      	bne.n	2f4e <xQueueGenericReceive+0x8e>
						{
							portYIELD_WITHIN_API();
    2f26:	f001 fc77 	bl	4818 <vPortYieldFromISR>
    2f2a:	e010      	b.n	2f4e <xQueueGenericReceive+0x8e>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    2f2c:	68fb      	ldr	r3, [r7, #12]
    2f2e:	69ba      	ldr	r2, [r7, #24]
    2f30:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2f32:	68fb      	ldr	r3, [r7, #12]
    2f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2f36:	2b00      	cmp	r3, #0
    2f38:	d009      	beq.n	2f4e <xQueueGenericReceive+0x8e>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2f3a:	68fb      	ldr	r3, [r7, #12]
    2f3c:	3330      	adds	r3, #48	; 0x30
    2f3e:	4618      	mov	r0, r3
    2f40:	f001 f92e 	bl	41a0 <xTaskRemoveFromEventList>
    2f44:	4603      	mov	r3, r0
    2f46:	2b00      	cmp	r3, #0
    2f48:	d001      	beq.n	2f4e <xQueueGenericReceive+0x8e>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    2f4a:	f001 fc65 	bl	4818 <vPortYieldFromISR>
						}
					}

				}

				taskEXIT_CRITICAL();
    2f4e:	f001 fc87 	bl	4860 <vPortExitCritical>
				return pdPASS;
    2f52:	2301      	movs	r3, #1
    2f54:	e066      	b.n	3024 <xQueueGenericReceive+0x164>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    2f56:	687b      	ldr	r3, [r7, #4]
    2f58:	2b00      	cmp	r3, #0
    2f5a:	d103      	bne.n	2f64 <xQueueGenericReceive+0xa4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    2f5c:	f001 fc80 	bl	4860 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    2f60:	2300      	movs	r3, #0
    2f62:	e05f      	b.n	3024 <xQueueGenericReceive+0x164>
				}
				else if( xEntryTimeSet == pdFALSE )
    2f64:	69fb      	ldr	r3, [r7, #28]
    2f66:	2b00      	cmp	r3, #0
    2f68:	d106      	bne.n	2f78 <xQueueGenericReceive+0xb8>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    2f6a:	f107 0310 	add.w	r3, r7, #16
    2f6e:	4618      	mov	r0, r3
    2f70:	f001 f96c 	bl	424c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    2f74:	2301      	movs	r3, #1
    2f76:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    2f78:	f001 fc72 	bl	4860 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    2f7c:	f000 fe20 	bl	3bc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    2f80:	f001 fc58 	bl	4834 <vPortEnterCritical>
    2f84:	68fb      	ldr	r3, [r7, #12]
    2f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    2f88:	f1b3 3fff 	cmp.w	r3, #4294967295
    2f8c:	d102      	bne.n	2f94 <xQueueGenericReceive+0xd4>
    2f8e:	68fb      	ldr	r3, [r7, #12]
    2f90:	2200      	movs	r2, #0
    2f92:	65da      	str	r2, [r3, #92]	; 0x5c
    2f94:	68fb      	ldr	r3, [r7, #12]
    2f96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    2f98:	f1b3 3fff 	cmp.w	r3, #4294967295
    2f9c:	d102      	bne.n	2fa4 <xQueueGenericReceive+0xe4>
    2f9e:	68fb      	ldr	r3, [r7, #12]
    2fa0:	2200      	movs	r2, #0
    2fa2:	661a      	str	r2, [r3, #96]	; 0x60
    2fa4:	f001 fc5c 	bl	4860 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2fa8:	f107 0210 	add.w	r2, r7, #16
    2fac:	1d3b      	adds	r3, r7, #4
    2fae:	4610      	mov	r0, r2
    2fb0:	4619      	mov	r1, r3
    2fb2:	f001 f963 	bl	427c <xTaskCheckForTimeOut>
    2fb6:	4603      	mov	r3, r0
    2fb8:	2b00      	cmp	r3, #0
    2fba:	d12b      	bne.n	3014 <xQueueGenericReceive+0x154>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    2fbc:	68f8      	ldr	r0, [r7, #12]
    2fbe:	f000 f973 	bl	32a8 <prvIsQueueEmpty>
    2fc2:	4603      	mov	r3, r0
    2fc4:	2b00      	cmp	r3, #0
    2fc6:	d01f      	beq.n	3008 <xQueueGenericReceive+0x148>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    2fc8:	68fb      	ldr	r3, [r7, #12]
    2fca:	681b      	ldr	r3, [r3, #0]
    2fcc:	2b00      	cmp	r3, #0
    2fce:	d108      	bne.n	2fe2 <xQueueGenericReceive+0x122>
					{
						portENTER_CRITICAL();
    2fd0:	f001 fc30 	bl	4834 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    2fd4:	68fb      	ldr	r3, [r7, #12]
    2fd6:	685b      	ldr	r3, [r3, #4]
    2fd8:	4618      	mov	r0, r3
    2fda:	f001 fb0f 	bl	45fc <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
    2fde:	f001 fc3f 	bl	4860 <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    2fe2:	68fb      	ldr	r3, [r7, #12]
    2fe4:	f103 0230 	add.w	r2, r3, #48	; 0x30
    2fe8:	687b      	ldr	r3, [r7, #4]
    2fea:	4610      	mov	r0, r2
    2fec:	4619      	mov	r1, r3
    2fee:	f001 f89f 	bl	4130 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    2ff2:	68f8      	ldr	r0, [r7, #12]
    2ff4:	f000 f90c 	bl	3210 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    2ff8:	f000 fdf4 	bl	3be4 <xTaskResumeAll>
    2ffc:	4603      	mov	r3, r0
    2ffe:	2b00      	cmp	r3, #0
    3000:	d10f      	bne.n	3022 <xQueueGenericReceive+0x162>
				{
					portYIELD_WITHIN_API();
    3002:	f001 fc09 	bl	4818 <vPortYieldFromISR>
    3006:	e00c      	b.n	3022 <xQueueGenericReceive+0x162>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    3008:	68f8      	ldr	r0, [r7, #12]
    300a:	f000 f901 	bl	3210 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    300e:	f000 fde9 	bl	3be4 <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
    3012:	e75e      	b.n	2ed2 <xQueueGenericReceive+0x12>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    3014:	68f8      	ldr	r0, [r7, #12]
    3016:	f000 f8fb 	bl	3210 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    301a:	f000 fde3 	bl	3be4 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    301e:	2300      	movs	r3, #0
    3020:	e000      	b.n	3024 <xQueueGenericReceive+0x164>
		}
	}
    3022:	e756      	b.n	2ed2 <xQueueGenericReceive+0x12>
}
    3024:	4618      	mov	r0, r3
    3026:	3720      	adds	r7, #32
    3028:	46bd      	mov	sp, r7
    302a:	bd80      	pop	{r7, pc}

0000302c <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    302c:	b580      	push	{r7, lr}
    302e:	b086      	sub	sp, #24
    3030:	af00      	add	r7, sp, #0
    3032:	60f8      	str	r0, [r7, #12]
    3034:	60b9      	str	r1, [r7, #8]
    3036:	607a      	str	r2, [r7, #4]

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    3038:	2300      	movs	r3, #0
    303a:	613b      	str	r3, [r7, #16]
    303c:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    3040:	f380 8811 	msr	BASEPRI, r0
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    3044:	68fb      	ldr	r3, [r7, #12]
    3046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    3048:	2b00      	cmp	r3, #0
    304a:	d025      	beq.n	3098 <xQueueReceiveFromISR+0x6c>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    304c:	68f8      	ldr	r0, [r7, #12]
    304e:	68b9      	ldr	r1, [r7, #8]
    3050:	f000 f8b8 	bl	31c4 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    3054:	68fb      	ldr	r3, [r7, #12]
    3056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    3058:	1e5a      	subs	r2, r3, #1
    305a:	68fb      	ldr	r3, [r7, #12]
    305c:	651a      	str	r2, [r3, #80]	; 0x50

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    305e:	68fb      	ldr	r3, [r7, #12]
    3060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    3062:	f1b3 3fff 	cmp.w	r3, #4294967295
    3066:	d10f      	bne.n	3088 <xQueueReceiveFromISR+0x5c>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3068:	68fb      	ldr	r3, [r7, #12]
    306a:	691b      	ldr	r3, [r3, #16]
    306c:	2b00      	cmp	r3, #0
    306e:	d010      	beq.n	3092 <xQueueReceiveFromISR+0x66>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3070:	68fb      	ldr	r3, [r7, #12]
    3072:	3310      	adds	r3, #16
    3074:	4618      	mov	r0, r3
    3076:	f001 f893 	bl	41a0 <xTaskRemoveFromEventList>
    307a:	4603      	mov	r3, r0
    307c:	2b00      	cmp	r3, #0
    307e:	d008      	beq.n	3092 <xQueueReceiveFromISR+0x66>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    3080:	687b      	ldr	r3, [r7, #4]
    3082:	2201      	movs	r2, #1
    3084:	601a      	str	r2, [r3, #0]
    3086:	e004      	b.n	3092 <xQueueReceiveFromISR+0x66>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    3088:	68fb      	ldr	r3, [r7, #12]
    308a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    308c:	1c5a      	adds	r2, r3, #1
    308e:	68fb      	ldr	r3, [r7, #12]
    3090:	65da      	str	r2, [r3, #92]	; 0x5c
			}

			xReturn = pdPASS;
    3092:	2301      	movs	r3, #1
    3094:	617b      	str	r3, [r7, #20]
    3096:	e001      	b.n	309c <xQueueReceiveFromISR+0x70>
		}
		else
		{
			xReturn = pdFAIL;
    3098:	2300      	movs	r3, #0
    309a:	617b      	str	r3, [r7, #20]
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    309c:	f04f 0000 	mov.w	r0, #0
    30a0:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    30a4:	697b      	ldr	r3, [r7, #20]
}
    30a6:	4618      	mov	r0, r3
    30a8:	3718      	adds	r7, #24
    30aa:	46bd      	mov	sp, r7
    30ac:	bd80      	pop	{r7, pc}
    30ae:	bf00      	nop

000030b0 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    30b0:	b580      	push	{r7, lr}
    30b2:	b084      	sub	sp, #16
    30b4:	af00      	add	r7, sp, #0
    30b6:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    30b8:	f001 fbbc 	bl	4834 <vPortEnterCritical>
		uxReturn = pxQueue->uxMessagesWaiting;
    30bc:	687b      	ldr	r3, [r7, #4]
    30be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    30c0:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    30c2:	f001 fbcd 	bl	4860 <vPortExitCritical>

	return uxReturn;
    30c6:	68fb      	ldr	r3, [r7, #12]
}
    30c8:	4618      	mov	r0, r3
    30ca:	3710      	adds	r7, #16
    30cc:	46bd      	mov	sp, r7
    30ce:	bd80      	pop	{r7, pc}

000030d0 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    30d0:	b480      	push	{r7}
    30d2:	b085      	sub	sp, #20
    30d4:	af00      	add	r7, sp, #0
    30d6:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    30d8:	687b      	ldr	r3, [r7, #4]
    30da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    30dc:	60fb      	str	r3, [r7, #12]

	return uxReturn;
    30de:	68fb      	ldr	r3, [r7, #12]
}
    30e0:	4618      	mov	r0, r3
    30e2:	3714      	adds	r7, #20
    30e4:	46bd      	mov	sp, r7
    30e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    30ea:	4770      	bx	lr

000030ec <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    30ec:	b580      	push	{r7, lr}
    30ee:	b082      	sub	sp, #8
    30f0:	af00      	add	r7, sp, #0
    30f2:	6078      	str	r0, [r7, #4]
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    30f4:	687b      	ldr	r3, [r7, #4]
    30f6:	681b      	ldr	r3, [r3, #0]
    30f8:	4618      	mov	r0, r3
    30fa:	f001 fcd7 	bl	4aac <vPortFree>
	vPortFree( pxQueue );
    30fe:	6878      	ldr	r0, [r7, #4]
    3100:	f001 fcd4 	bl	4aac <vPortFree>
}
    3104:	3708      	adds	r7, #8
    3106:	46bd      	mov	sp, r7
    3108:	bd80      	pop	{r7, pc}
    310a:	bf00      	nop

0000310c <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    310c:	b580      	push	{r7, lr}
    310e:	b084      	sub	sp, #16
    3110:	af00      	add	r7, sp, #0
    3112:	60f8      	str	r0, [r7, #12]
    3114:	60b9      	str	r1, [r7, #8]
    3116:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    3118:	68fb      	ldr	r3, [r7, #12]
    311a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    311c:	2b00      	cmp	r3, #0
    311e:	d10c      	bne.n	313a <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    3120:	68fb      	ldr	r3, [r7, #12]
    3122:	681b      	ldr	r3, [r3, #0]
    3124:	2b00      	cmp	r3, #0
    3126:	d145      	bne.n	31b4 <prvCopyDataToQueue+0xa8>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    3128:	68fb      	ldr	r3, [r7, #12]
    312a:	685b      	ldr	r3, [r3, #4]
    312c:	4618      	mov	r0, r3
    312e:	f001 fac3 	bl	46b8 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
    3132:	68fb      	ldr	r3, [r7, #12]
    3134:	2200      	movs	r2, #0
    3136:	605a      	str	r2, [r3, #4]
    3138:	e03c      	b.n	31b4 <prvCopyDataToQueue+0xa8>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    313a:	687b      	ldr	r3, [r7, #4]
    313c:	2b00      	cmp	r3, #0
    313e:	d11a      	bne.n	3176 <prvCopyDataToQueue+0x6a>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    3140:	68fb      	ldr	r3, [r7, #12]
    3142:	689a      	ldr	r2, [r3, #8]
    3144:	68fb      	ldr	r3, [r7, #12]
    3146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    3148:	4610      	mov	r0, r2
    314a:	68b9      	ldr	r1, [r7, #8]
    314c:	461a      	mov	r2, r3
    314e:	f010 fb8f 	bl	13870 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    3152:	68fb      	ldr	r3, [r7, #12]
    3154:	689a      	ldr	r2, [r3, #8]
    3156:	68fb      	ldr	r3, [r7, #12]
    3158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    315a:	441a      	add	r2, r3
    315c:	68fb      	ldr	r3, [r7, #12]
    315e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    3160:	68fb      	ldr	r3, [r7, #12]
    3162:	689a      	ldr	r2, [r3, #8]
    3164:	68fb      	ldr	r3, [r7, #12]
    3166:	685b      	ldr	r3, [r3, #4]
    3168:	429a      	cmp	r2, r3
    316a:	d323      	bcc.n	31b4 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    316c:	68fb      	ldr	r3, [r7, #12]
    316e:	681a      	ldr	r2, [r3, #0]
    3170:	68fb      	ldr	r3, [r7, #12]
    3172:	609a      	str	r2, [r3, #8]
    3174:	e01e      	b.n	31b4 <prvCopyDataToQueue+0xa8>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    3176:	68fb      	ldr	r3, [r7, #12]
    3178:	68da      	ldr	r2, [r3, #12]
    317a:	68fb      	ldr	r3, [r7, #12]
    317c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    317e:	4610      	mov	r0, r2
    3180:	68b9      	ldr	r1, [r7, #8]
    3182:	461a      	mov	r2, r3
    3184:	f010 fb74 	bl	13870 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    3188:	68fb      	ldr	r3, [r7, #12]
    318a:	68da      	ldr	r2, [r3, #12]
    318c:	68fb      	ldr	r3, [r7, #12]
    318e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    3190:	425b      	negs	r3, r3
    3192:	441a      	add	r2, r3
    3194:	68fb      	ldr	r3, [r7, #12]
    3196:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    3198:	68fb      	ldr	r3, [r7, #12]
    319a:	68da      	ldr	r2, [r3, #12]
    319c:	68fb      	ldr	r3, [r7, #12]
    319e:	681b      	ldr	r3, [r3, #0]
    31a0:	429a      	cmp	r2, r3
    31a2:	d207      	bcs.n	31b4 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    31a4:	68fb      	ldr	r3, [r7, #12]
    31a6:	685a      	ldr	r2, [r3, #4]
    31a8:	68fb      	ldr	r3, [r7, #12]
    31aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    31ac:	425b      	negs	r3, r3
    31ae:	441a      	add	r2, r3
    31b0:	68fb      	ldr	r3, [r7, #12]
    31b2:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
    31b4:	68fb      	ldr	r3, [r7, #12]
    31b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    31b8:	1c5a      	adds	r2, r3, #1
    31ba:	68fb      	ldr	r3, [r7, #12]
    31bc:	651a      	str	r2, [r3, #80]	; 0x50
}
    31be:	3710      	adds	r7, #16
    31c0:	46bd      	mov	sp, r7
    31c2:	bd80      	pop	{r7, pc}

000031c4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    31c4:	b580      	push	{r7, lr}
    31c6:	b082      	sub	sp, #8
    31c8:	af00      	add	r7, sp, #0
    31ca:	6078      	str	r0, [r7, #4]
    31cc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    31ce:	687b      	ldr	r3, [r7, #4]
    31d0:	681b      	ldr	r3, [r3, #0]
    31d2:	2b00      	cmp	r3, #0
    31d4:	d019      	beq.n	320a <prvCopyDataFromQueue+0x46>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    31d6:	687b      	ldr	r3, [r7, #4]
    31d8:	68da      	ldr	r2, [r3, #12]
    31da:	687b      	ldr	r3, [r7, #4]
    31dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    31de:	441a      	add	r2, r3
    31e0:	687b      	ldr	r3, [r7, #4]
    31e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    31e4:	687b      	ldr	r3, [r7, #4]
    31e6:	68da      	ldr	r2, [r3, #12]
    31e8:	687b      	ldr	r3, [r7, #4]
    31ea:	685b      	ldr	r3, [r3, #4]
    31ec:	429a      	cmp	r2, r3
    31ee:	d303      	bcc.n	31f8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    31f0:	687b      	ldr	r3, [r7, #4]
    31f2:	681a      	ldr	r2, [r3, #0]
    31f4:	687b      	ldr	r3, [r7, #4]
    31f6:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    31f8:	687b      	ldr	r3, [r7, #4]
    31fa:	68da      	ldr	r2, [r3, #12]
    31fc:	687b      	ldr	r3, [r7, #4]
    31fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    3200:	6838      	ldr	r0, [r7, #0]
    3202:	4611      	mov	r1, r2
    3204:	461a      	mov	r2, r3
    3206:	f010 fb33 	bl	13870 <memcpy>
	}
}
    320a:	3708      	adds	r7, #8
    320c:	46bd      	mov	sp, r7
    320e:	bd80      	pop	{r7, pc}

00003210 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    3210:	b580      	push	{r7, lr}
    3212:	b082      	sub	sp, #8
    3214:	af00      	add	r7, sp, #0
    3216:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    3218:	f001 fb0c 	bl	4834 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    321c:	e014      	b.n	3248 <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    321e:	687b      	ldr	r3, [r7, #4]
    3220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    3222:	2b00      	cmp	r3, #0
    3224:	d00f      	beq.n	3246 <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3226:	687b      	ldr	r3, [r7, #4]
    3228:	3330      	adds	r3, #48	; 0x30
    322a:	4618      	mov	r0, r3
    322c:	f000 ffb8 	bl	41a0 <xTaskRemoveFromEventList>
    3230:	4603      	mov	r3, r0
    3232:	2b00      	cmp	r3, #0
    3234:	d001      	beq.n	323a <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    3236:	f001 f86d 	bl	4314 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    323a:	687b      	ldr	r3, [r7, #4]
    323c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    323e:	1e5a      	subs	r2, r3, #1
    3240:	687b      	ldr	r3, [r7, #4]
    3242:	661a      	str	r2, [r3, #96]	; 0x60
    3244:	e000      	b.n	3248 <prvUnlockQueue+0x38>
			}
			else
			{
				break;
    3246:	e003      	b.n	3250 <prvUnlockQueue+0x40>
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    3248:	687b      	ldr	r3, [r7, #4]
    324a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    324c:	2b00      	cmp	r3, #0
    324e:	dce6      	bgt.n	321e <prvUnlockQueue+0xe>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    3250:	687b      	ldr	r3, [r7, #4]
    3252:	f04f 32ff 	mov.w	r2, #4294967295
    3256:	661a      	str	r2, [r3, #96]	; 0x60
	}
	taskEXIT_CRITICAL();
    3258:	f001 fb02 	bl	4860 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    325c:	f001 faea 	bl	4834 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    3260:	e014      	b.n	328c <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3262:	687b      	ldr	r3, [r7, #4]
    3264:	691b      	ldr	r3, [r3, #16]
    3266:	2b00      	cmp	r3, #0
    3268:	d00f      	beq.n	328a <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    326a:	687b      	ldr	r3, [r7, #4]
    326c:	3310      	adds	r3, #16
    326e:	4618      	mov	r0, r3
    3270:	f000 ff96 	bl	41a0 <xTaskRemoveFromEventList>
    3274:	4603      	mov	r3, r0
    3276:	2b00      	cmp	r3, #0
    3278:	d001      	beq.n	327e <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
    327a:	f001 f84b 	bl	4314 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    327e:	687b      	ldr	r3, [r7, #4]
    3280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    3282:	1e5a      	subs	r2, r3, #1
    3284:	687b      	ldr	r3, [r7, #4]
    3286:	65da      	str	r2, [r3, #92]	; 0x5c
    3288:	e000      	b.n	328c <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
    328a:	e003      	b.n	3294 <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    328c:	687b      	ldr	r3, [r7, #4]
    328e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    3290:	2b00      	cmp	r3, #0
    3292:	dce6      	bgt.n	3262 <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    3294:	687b      	ldr	r3, [r7, #4]
    3296:	f04f 32ff 	mov.w	r2, #4294967295
    329a:	65da      	str	r2, [r3, #92]	; 0x5c
	}
	taskEXIT_CRITICAL();
    329c:	f001 fae0 	bl	4860 <vPortExitCritical>
}
    32a0:	3708      	adds	r7, #8
    32a2:	46bd      	mov	sp, r7
    32a4:	bd80      	pop	{r7, pc}
    32a6:	bf00      	nop

000032a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    32a8:	b580      	push	{r7, lr}
    32aa:	b084      	sub	sp, #16
    32ac:	af00      	add	r7, sp, #0
    32ae:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    32b0:	f001 fac0 	bl	4834 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    32b4:	687b      	ldr	r3, [r7, #4]
    32b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    32b8:	2b00      	cmp	r3, #0
    32ba:	bf14      	ite	ne
    32bc:	2300      	movne	r3, #0
    32be:	2301      	moveq	r3, #1
    32c0:	b2db      	uxtb	r3, r3
    32c2:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    32c4:	f001 facc 	bl	4860 <vPortExitCritical>

	return xReturn;
    32c8:	68fb      	ldr	r3, [r7, #12]
}
    32ca:	4618      	mov	r0, r3
    32cc:	3710      	adds	r7, #16
    32ce:	46bd      	mov	sp, r7
    32d0:	bd80      	pop	{r7, pc}
    32d2:	bf00      	nop

000032d4 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    32d4:	b480      	push	{r7}
    32d6:	b085      	sub	sp, #20
    32d8:	af00      	add	r7, sp, #0
    32da:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    32dc:	687b      	ldr	r3, [r7, #4]
    32de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    32e0:	2b00      	cmp	r3, #0
    32e2:	bf14      	ite	ne
    32e4:	2300      	movne	r3, #0
    32e6:	2301      	moveq	r3, #1
    32e8:	b2db      	uxtb	r3, r3
    32ea:	60fb      	str	r3, [r7, #12]

	return xReturn;
    32ec:	68fb      	ldr	r3, [r7, #12]
}
    32ee:	4618      	mov	r0, r3
    32f0:	3714      	adds	r7, #20
    32f2:	46bd      	mov	sp, r7
    32f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    32f8:	4770      	bx	lr
    32fa:	bf00      	nop

000032fc <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    32fc:	b580      	push	{r7, lr}
    32fe:	b084      	sub	sp, #16
    3300:	af00      	add	r7, sp, #0
    3302:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    3304:	f001 fa96 	bl	4834 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    3308:	687b      	ldr	r3, [r7, #4]
    330a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    330c:	687b      	ldr	r3, [r7, #4]
    330e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    3310:	429a      	cmp	r2, r3
    3312:	bf14      	ite	ne
    3314:	2300      	movne	r3, #0
    3316:	2301      	moveq	r3, #1
    3318:	b2db      	uxtb	r3, r3
    331a:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    331c:	f001 faa0 	bl	4860 <vPortExitCritical>

	return xReturn;
    3320:	68fb      	ldr	r3, [r7, #12]
}
    3322:	4618      	mov	r0, r3
    3324:	3710      	adds	r7, #16
    3326:	46bd      	mov	sp, r7
    3328:	bd80      	pop	{r7, pc}
    332a:	bf00      	nop

0000332c <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    332c:	b480      	push	{r7}
    332e:	b085      	sub	sp, #20
    3330:	af00      	add	r7, sp, #0
    3332:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    3334:	687b      	ldr	r3, [r7, #4]
    3336:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    3338:	687b      	ldr	r3, [r7, #4]
    333a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    333c:	429a      	cmp	r2, r3
    333e:	bf14      	ite	ne
    3340:	2300      	movne	r3, #0
    3342:	2301      	moveq	r3, #1
    3344:	b2db      	uxtb	r3, r3
    3346:	60fb      	str	r3, [r7, #12]

	return xReturn;
    3348:	68fb      	ldr	r3, [r7, #12]
}
    334a:	4618      	mov	r0, r3
    334c:	3714      	adds	r7, #20
    334e:	46bd      	mov	sp, r7
    3350:	f85d 7b04 	ldr.w	r7, [sp], #4
    3354:	4770      	bx	lr
    3356:	bf00      	nop

00003358 <xGetTaskRemainTime>:
/*-----------------------------------------------------------*/

#if defined configUSE_EDF_SCHEDULING || defined configUSE_LSF_SCHEDULING

portTickType xGetTaskRemainTime( xListItem * pxListItem )
{
    3358:	b480      	push	{r7}
    335a:	b083      	sub	sp, #12
    335c:	af00      	add	r7, sp, #0
    335e:	6078      	str	r0, [r7, #4]
    return listGET_LIST_ITEM_DEADLINE( pxListItem ) - xTickCount - listGET_LIST_ITEM_REMAINTIME( pxListItem ); 
    3360:	687b      	ldr	r3, [r7, #4]
    3362:	685a      	ldr	r2, [r3, #4]
    3364:	f240 6300 	movw	r3, #1536	; 0x600
    3368:	f2c2 0300 	movt	r3, #8192	; 0x2000
    336c:	681b      	ldr	r3, [r3, #0]
    336e:	1ad2      	subs	r2, r2, r3
    3370:	687b      	ldr	r3, [r7, #4]
    3372:	689b      	ldr	r3, [r3, #8]
    3374:	1ad3      	subs	r3, r2, r3
}
    3376:	4618      	mov	r0, r3
    3378:	370c      	adds	r7, #12
    337a:	46bd      	mov	sp, r7
    337c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3380:	4770      	bx	lr
    3382:	bf00      	nop

00003384 <vSetTaskDeadline>:

void vSetTaskDeadline( portTickType xDeadline)
{
    3384:	b480      	push	{r7}
    3386:	b083      	sub	sp, #12
    3388:	af00      	add	r7, sp, #0
    338a:	6078      	str	r0, [r7, #4]
    listSET_LIST_ITEM_DEADLINE( &pxCurrentTCB->xGenericListItem, xDeadline);
    338c:	f240 23c8 	movw	r3, #712	; 0x2c8
    3390:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3394:	681b      	ldr	r3, [r3, #0]
    3396:	687a      	ldr	r2, [r7, #4]
    3398:	609a      	str	r2, [r3, #8]
}
    339a:	370c      	adds	r7, #12
    339c:	46bd      	mov	sp, r7
    339e:	f85d 7b04 	ldr.w	r7, [sp], #4
    33a2:	4770      	bx	lr

000033a4 <vSetTaskRemainTime>:

void vSetTaskRemainTime( portTickType xRemainTime )
{
    33a4:	b480      	push	{r7}
    33a6:	b083      	sub	sp, #12
    33a8:	af00      	add	r7, sp, #0
    33aa:	6078      	str	r0, [r7, #4]
    listSET_LIST_ITEM_REMAINTIME( &pxCurrentTCB->xGenericListItem, xRemainTime );
    33ac:	f240 23c8 	movw	r3, #712	; 0x2c8
    33b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33b4:	681b      	ldr	r3, [r3, #0]
    33b6:	687a      	ldr	r2, [r7, #4]
    33b8:	60da      	str	r2, [r3, #12]
}
    33ba:	370c      	adds	r7, #12
    33bc:	46bd      	mov	sp, r7
    33be:	f85d 7b04 	ldr.w	r7, [sp], #4
    33c2:	4770      	bx	lr

000033c4 <xTaskCreateForEDF>:

portBASE_TYPE xTaskCreateForEDF( pdTASK_CODE pvTaskCode, const signed portCHAR * const pcName , unsigned portSHORT usStackDepth, void * pvParameters, unsigned portBASE_TYPE uxPriority , xTaskHandle * pxCreatedTask, portTickType xDeadline)
{
    33c4:	b580      	push	{r7, lr}
    33c6:	b08a      	sub	sp, #40	; 0x28
    33c8:	af04      	add	r7, sp, #16
    33ca:	60f8      	str	r0, [r7, #12]
    33cc:	60b9      	str	r1, [r7, #8]
    33ce:	603b      	str	r3, [r7, #0]
    33d0:	4613      	mov	r3, r2
    33d2:	80fb      	strh	r3, [r7, #6]
    portBASE_TYPE xReturn;
    xReturn = xTaskCreate( pvTaskCode, pcName, usStackDepth, pvParameters, uxPriority, pxCreatedTask );
    33d4:	88fb      	ldrh	r3, [r7, #6]
    33d6:	6a3a      	ldr	r2, [r7, #32]
    33d8:	9200      	str	r2, [sp, #0]
    33da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    33dc:	9201      	str	r2, [sp, #4]
    33de:	2200      	movs	r2, #0
    33e0:	9202      	str	r2, [sp, #8]
    33e2:	2200      	movs	r2, #0
    33e4:	9203      	str	r2, [sp, #12]
    33e6:	68f8      	ldr	r0, [r7, #12]
    33e8:	68b9      	ldr	r1, [r7, #8]
    33ea:	461a      	mov	r2, r3
    33ec:	683b      	ldr	r3, [r7, #0]
    33ee:	f000 f831 	bl	3454 <xTaskGenericCreate>
    33f2:	6178      	str	r0, [r7, #20]
    listSET_LIST_ITEM_DEADLINE(&((tskTCB *) (*pxCreatedTask))->xGenericListItem, xDeadline );
    33f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    33f6:	681b      	ldr	r3, [r3, #0]
    33f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
    33fa:	609a      	str	r2, [r3, #8]
    return xReturn; 
    33fc:	697b      	ldr	r3, [r7, #20]
}
    33fe:	4618      	mov	r0, r3
    3400:	3718      	adds	r7, #24
    3402:	46bd      	mov	sp, r7
    3404:	bd80      	pop	{r7, pc}
    3406:	bf00      	nop

00003408 <xTaskCreateForLSF>:

portBASE_TYPE xTaskCreateForLSF( pdTASK_CODE pvTaskCode, const signed portCHAR * const pcName , unsigned portSHORT usStackDepth, void * pvParameters, unsigned portBASE_TYPE uxPriority , xTaskHandle * pxCreatedTask, portTickType xDeadline, portTickType xRemainTime)
{
    3408:	b580      	push	{r7, lr}
    340a:	b08a      	sub	sp, #40	; 0x28
    340c:	af04      	add	r7, sp, #16
    340e:	60f8      	str	r0, [r7, #12]
    3410:	60b9      	str	r1, [r7, #8]
    3412:	603b      	str	r3, [r7, #0]
    3414:	4613      	mov	r3, r2
    3416:	80fb      	strh	r3, [r7, #6]
    portBASE_TYPE xReturn;
    xReturn = xTaskCreate( pvTaskCode, pcName, usStackDepth, pvParameters, uxPriority, pxCreatedTask );
    3418:	88fb      	ldrh	r3, [r7, #6]
    341a:	6a3a      	ldr	r2, [r7, #32]
    341c:	9200      	str	r2, [sp, #0]
    341e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3420:	9201      	str	r2, [sp, #4]
    3422:	2200      	movs	r2, #0
    3424:	9202      	str	r2, [sp, #8]
    3426:	2200      	movs	r2, #0
    3428:	9203      	str	r2, [sp, #12]
    342a:	68f8      	ldr	r0, [r7, #12]
    342c:	68b9      	ldr	r1, [r7, #8]
    342e:	461a      	mov	r2, r3
    3430:	683b      	ldr	r3, [r7, #0]
    3432:	f000 f80f 	bl	3454 <xTaskGenericCreate>
    3436:	6178      	str	r0, [r7, #20]
    listSET_LIST_ITEM_DEADLINE(&((tskTCB *) (*pxCreatedTask))->xGenericListItem, xDeadline );
    3438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    343a:	681b      	ldr	r3, [r3, #0]
    343c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    343e:	609a      	str	r2, [r3, #8]
    listSET_LIST_ITEM_REMAINTIME(&((tskTCB *) (*pxCreatedTask))->xGenericListItem, xRemainTime);
    3440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3442:	681b      	ldr	r3, [r3, #0]
    3444:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    3446:	60da      	str	r2, [r3, #12]
    return xReturn; 
    3448:	697b      	ldr	r3, [r7, #20]
}
    344a:	4618      	mov	r0, r3
    344c:	3718      	adds	r7, #24
    344e:	46bd      	mov	sp, r7
    3450:	bd80      	pop	{r7, pc}
    3452:	bf00      	nop

00003454 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    3454:	b580      	push	{r7, lr}
    3456:	b08a      	sub	sp, #40	; 0x28
    3458:	af02      	add	r7, sp, #8
    345a:	60f8      	str	r0, [r7, #12]
    345c:	60b9      	str	r1, [r7, #8]
    345e:	603b      	str	r3, [r7, #0]
    3460:	4613      	mov	r3, r2
    3462:	80fb      	strh	r3, [r7, #6]
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    3464:	88fb      	ldrh	r3, [r7, #6]
    3466:	4618      	mov	r0, r3
    3468:	6b39      	ldr	r1, [r7, #48]	; 0x30
    346a:	f001 f875 	bl	4558 <prvAllocateTCBAndStack>
    346e:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
    3470:	69bb      	ldr	r3, [r7, #24]
    3472:	2b00      	cmp	r3, #0
    3474:	f000 809e 	beq.w	35b4 <xTaskGenericCreate+0x160>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    3478:	69bb      	ldr	r3, [r7, #24]
    347a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    347c:	88fb      	ldrh	r3, [r7, #6]
    347e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3482:	3b01      	subs	r3, #1
    3484:	009b      	lsls	r3, r3, #2
    3486:	4413      	add	r3, r2
    3488:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
    348a:	697b      	ldr	r3, [r7, #20]
    348c:	f023 0307 	bic.w	r3, r3, #7
    3490:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    3492:	88fb      	ldrh	r3, [r7, #6]
    3494:	9300      	str	r3, [sp, #0]
    3496:	69b8      	ldr	r0, [r7, #24]
    3498:	68b9      	ldr	r1, [r7, #8]
    349a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    349c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    349e:	f000 ff4f 	bl	4340 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    34a2:	6978      	ldr	r0, [r7, #20]
    34a4:	68f9      	ldr	r1, [r7, #12]
    34a6:	683a      	ldr	r2, [r7, #0]
    34a8:	f001 f946 	bl	4738 <pxPortInitialiseStack>
    34ac:	4602      	mov	r2, r0
    34ae:	69bb      	ldr	r3, [r7, #24]
    34b0:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    34b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    34b4:	2b00      	cmp	r3, #0
    34b6:	d002      	beq.n	34be <xTaskGenericCreate+0x6a>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    34b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    34ba:	69ba      	ldr	r2, [r7, #24]
    34bc:	601a      	str	r2, [r3, #0]
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    34be:	f001 f9b9 	bl	4834 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
    34c2:	f240 53fc 	movw	r3, #1532	; 0x5fc
    34c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    34ca:	681b      	ldr	r3, [r3, #0]
    34cc:	1c5a      	adds	r2, r3, #1
    34ce:	f240 53fc 	movw	r3, #1532	; 0x5fc
    34d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    34d6:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
    34d8:	f240 23c8 	movw	r3, #712	; 0x2c8
    34dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    34e0:	681b      	ldr	r3, [r3, #0]
    34e2:	2b00      	cmp	r3, #0
    34e4:	d10f      	bne.n	3506 <xTaskGenericCreate+0xb2>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    34e6:	f240 23c8 	movw	r3, #712	; 0x2c8
    34ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    34ee:	69ba      	ldr	r2, [r7, #24]
    34f0:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    34f2:	f240 53fc 	movw	r3, #1532	; 0x5fc
    34f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    34fa:	681b      	ldr	r3, [r3, #0]
    34fc:	2b01      	cmp	r3, #1
    34fe:	d118      	bne.n	3532 <xTaskGenericCreate+0xde>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    3500:	f000 ff54 	bl	43ac <prvInitialiseTaskLists>
    3504:	e015      	b.n	3532 <xTaskGenericCreate+0xde>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    3506:	f240 630c 	movw	r3, #1548	; 0x60c
    350a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    350e:	681b      	ldr	r3, [r3, #0]
    3510:	2b00      	cmp	r3, #0
    3512:	d10e      	bne.n	3532 <xTaskGenericCreate+0xde>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    3514:	f240 23c8 	movw	r3, #712	; 0x2c8
    3518:	f2c2 0300 	movt	r3, #8192	; 0x2000
    351c:	681b      	ldr	r3, [r3, #0]
    351e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    3520:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3522:	429a      	cmp	r2, r3
    3524:	d805      	bhi.n	3532 <xTaskGenericCreate+0xde>
					{
						pxCurrentTCB = pxNewTCB;
    3526:	f240 23c8 	movw	r3, #712	; 0x2c8
    352a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    352e:	69ba      	ldr	r2, [r7, #24]
    3530:	601a      	str	r2, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    3532:	69bb      	ldr	r3, [r7, #24]
    3534:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    3536:	f240 6304 	movw	r3, #1540	; 0x604
    353a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    353e:	681b      	ldr	r3, [r3, #0]
    3540:	429a      	cmp	r2, r3
    3542:	d906      	bls.n	3552 <xTaskGenericCreate+0xfe>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    3544:	69bb      	ldr	r3, [r7, #24]
    3546:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    3548:	f240 6304 	movw	r3, #1540	; 0x604
    354c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3550:	601a      	str	r2, [r3, #0]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    3552:	f240 6320 	movw	r3, #1568	; 0x620
    3556:	f2c2 0300 	movt	r3, #8192	; 0x2000
    355a:	681b      	ldr	r3, [r3, #0]
    355c:	1c5a      	adds	r2, r3, #1
    355e:	f240 6320 	movw	r3, #1568	; 0x620
    3562:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3566:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
    3568:	69bb      	ldr	r3, [r7, #24]
    356a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    356c:	f240 6308 	movw	r3, #1544	; 0x608
    3570:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3574:	681b      	ldr	r3, [r3, #0]
    3576:	429a      	cmp	r2, r3
    3578:	d906      	bls.n	3588 <xTaskGenericCreate+0x134>
    357a:	69bb      	ldr	r3, [r7, #24]
    357c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    357e:	f240 6308 	movw	r3, #1544	; 0x608
    3582:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3586:	601a      	str	r2, [r3, #0]
    3588:	69bb      	ldr	r3, [r7, #24]
    358a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    358c:	015a      	lsls	r2, r3, #5
    358e:	f240 23cc 	movw	r3, #716	; 0x2cc
    3592:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3596:	441a      	add	r2, r3
    3598:	69bb      	ldr	r3, [r7, #24]
    359a:	3304      	adds	r3, #4
    359c:	4610      	mov	r0, r2
    359e:	4619      	mov	r1, r3
    35a0:	f7ff f9ce 	bl	2940 <vListInsertEnd>

			xReturn = pdPASS;
    35a4:	2301      	movs	r3, #1
    35a6:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
    35a8:	69b8      	ldr	r0, [r7, #24]
    35aa:	f00f f965 	bl	12878 <myTraceCreate>
		}
		taskEXIT_CRITICAL();
    35ae:	f001 f957 	bl	4860 <vPortExitCritical>
    35b2:	e002      	b.n	35ba <xTaskGenericCreate+0x166>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    35b4:	f04f 33ff 	mov.w	r3, #4294967295
    35b8:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    35ba:	69fb      	ldr	r3, [r7, #28]
    35bc:	2b01      	cmp	r3, #1
    35be:	d111      	bne.n	35e4 <xTaskGenericCreate+0x190>
	{
		if( xSchedulerRunning != pdFALSE )
    35c0:	f240 630c 	movw	r3, #1548	; 0x60c
    35c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    35c8:	681b      	ldr	r3, [r3, #0]
    35ca:	2b00      	cmp	r3, #0
    35cc:	d00a      	beq.n	35e4 <xTaskGenericCreate+0x190>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    35ce:	f240 23c8 	movw	r3, #712	; 0x2c8
    35d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    35d6:	681b      	ldr	r3, [r3, #0]
    35d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    35da:	6abb      	ldr	r3, [r7, #40]	; 0x28
    35dc:	429a      	cmp	r2, r3
    35de:	d201      	bcs.n	35e4 <xTaskGenericCreate+0x190>
			{
				portYIELD_WITHIN_API();
    35e0:	f001 f91a 	bl	4818 <vPortYieldFromISR>
			}
		}
	}

	return xReturn;
    35e4:	69fb      	ldr	r3, [r7, #28]
}
    35e6:	4618      	mov	r0, r3
    35e8:	3720      	adds	r7, #32
    35ea:	46bd      	mov	sp, r7
    35ec:	bd80      	pop	{r7, pc}
    35ee:	bf00      	nop

000035f0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    35f0:	b580      	push	{r7, lr}
    35f2:	b084      	sub	sp, #16
    35f4:	af00      	add	r7, sp, #0
    35f6:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    35f8:	f001 f91c 	bl	4834 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    35fc:	f240 23c8 	movw	r3, #712	; 0x2c8
    3600:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3604:	681b      	ldr	r3, [r3, #0]
    3606:	687a      	ldr	r2, [r7, #4]
    3608:	429a      	cmp	r2, r3
    360a:	d101      	bne.n	3610 <vTaskDelete+0x20>
			{
				pxTaskToDelete = NULL;
    360c:	2300      	movs	r3, #0
    360e:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    3610:	687b      	ldr	r3, [r7, #4]
    3612:	2b00      	cmp	r3, #0
    3614:	d105      	bne.n	3622 <vTaskDelete+0x32>
    3616:	f240 23c8 	movw	r3, #712	; 0x2c8
    361a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    361e:	681b      	ldr	r3, [r3, #0]
    3620:	e000      	b.n	3624 <vTaskDelete+0x34>
    3622:	687b      	ldr	r3, [r7, #4]
    3624:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    3626:	68fb      	ldr	r3, [r7, #12]
    3628:	3304      	adds	r3, #4
    362a:	4618      	mov	r0, r3
    362c:	f7ff f9e8 	bl	2a00 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    3630:	68fb      	ldr	r3, [r7, #12]
    3632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3634:	2b00      	cmp	r3, #0
    3636:	d004      	beq.n	3642 <vTaskDelete+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    3638:	68fb      	ldr	r3, [r7, #12]
    363a:	3324      	adds	r3, #36	; 0x24
    363c:	4618      	mov	r0, r3
    363e:	f7ff f9df 	bl	2a00 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    3642:	68fb      	ldr	r3, [r7, #12]
    3644:	3304      	adds	r3, #4
    3646:	f240 50b4 	movw	r0, #1460	; 0x5b4
    364a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    364e:	4619      	mov	r1, r3
    3650:	f7ff f976 	bl	2940 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    3654:	f240 53d4 	movw	r3, #1492	; 0x5d4
    3658:	f2c2 0300 	movt	r3, #8192	; 0x2000
    365c:	681b      	ldr	r3, [r3, #0]
    365e:	1c5a      	adds	r2, r3, #1
    3660:	f240 53d4 	movw	r3, #1492	; 0x5d4
    3664:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3668:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    366a:	f240 6320 	movw	r3, #1568	; 0x620
    366e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3672:	681b      	ldr	r3, [r3, #0]
    3674:	1c5a      	adds	r2, r3, #1
    3676:	f240 6320 	movw	r3, #1568	; 0x620
    367a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    367e:	601a      	str	r2, [r3, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    3680:	f001 f8ee 	bl	4860 <vPortExitCritical>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    3684:	f240 630c 	movw	r3, #1548	; 0x60c
    3688:	f2c2 0300 	movt	r3, #8192	; 0x2000
    368c:	681b      	ldr	r3, [r3, #0]
    368e:	2b00      	cmp	r3, #0
    3690:	d004      	beq.n	369c <vTaskDelete+0xac>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    3692:	687b      	ldr	r3, [r7, #4]
    3694:	2b00      	cmp	r3, #0
    3696:	d101      	bne.n	369c <vTaskDelete+0xac>
			{
				portYIELD_WITHIN_API();
    3698:	f001 f8be 	bl	4818 <vPortYieldFromISR>
			}
		}
	}
    369c:	3710      	adds	r7, #16
    369e:	46bd      	mov	sp, r7
    36a0:	bd80      	pop	{r7, pc}
    36a2:	bf00      	nop

000036a4 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    36a4:	b580      	push	{r7, lr}
    36a6:	b086      	sub	sp, #24
    36a8:	af00      	add	r7, sp, #0
    36aa:	6078      	str	r0, [r7, #4]
    36ac:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
    36ae:	2300      	movs	r3, #0
    36b0:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    36b2:	f000 fa85 	bl	3bc0 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    36b6:	687b      	ldr	r3, [r7, #4]
    36b8:	681a      	ldr	r2, [r3, #0]
    36ba:	683b      	ldr	r3, [r7, #0]
    36bc:	4413      	add	r3, r2
    36be:	613b      	str	r3, [r7, #16]

			if( xTickCount < *pxPreviousWakeTime )
    36c0:	687b      	ldr	r3, [r7, #4]
    36c2:	681a      	ldr	r2, [r3, #0]
    36c4:	f240 6300 	movw	r3, #1536	; 0x600
    36c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    36cc:	681b      	ldr	r3, [r3, #0]
    36ce:	429a      	cmp	r2, r3
    36d0:	d90f      	bls.n	36f2 <vTaskDelayUntil+0x4e>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    36d2:	687b      	ldr	r3, [r7, #4]
    36d4:	681a      	ldr	r2, [r3, #0]
    36d6:	693b      	ldr	r3, [r7, #16]
    36d8:	429a      	cmp	r2, r3
    36da:	d919      	bls.n	3710 <vTaskDelayUntil+0x6c>
    36dc:	f240 6300 	movw	r3, #1536	; 0x600
    36e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    36e4:	681b      	ldr	r3, [r3, #0]
    36e6:	693a      	ldr	r2, [r7, #16]
    36e8:	429a      	cmp	r2, r3
    36ea:	d911      	bls.n	3710 <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    36ec:	2301      	movs	r3, #1
    36ee:	617b      	str	r3, [r7, #20]
    36f0:	e00e      	b.n	3710 <vTaskDelayUntil+0x6c>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    36f2:	687b      	ldr	r3, [r7, #4]
    36f4:	681a      	ldr	r2, [r3, #0]
    36f6:	693b      	ldr	r3, [r7, #16]
    36f8:	429a      	cmp	r2, r3
    36fa:	d807      	bhi.n	370c <vTaskDelayUntil+0x68>
    36fc:	f240 6300 	movw	r3, #1536	; 0x600
    3700:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3704:	681b      	ldr	r3, [r3, #0]
    3706:	693a      	ldr	r2, [r7, #16]
    3708:	429a      	cmp	r2, r3
    370a:	d901      	bls.n	3710 <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    370c:	2301      	movs	r3, #1
    370e:	617b      	str	r3, [r7, #20]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    3710:	687b      	ldr	r3, [r7, #4]
    3712:	693a      	ldr	r2, [r7, #16]
    3714:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
    3716:	697b      	ldr	r3, [r7, #20]
    3718:	2b00      	cmp	r3, #0
    371a:	d00b      	beq.n	3734 <vTaskDelayUntil+0x90>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    371c:	f240 23c8 	movw	r3, #712	; 0x2c8
    3720:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3724:	681b      	ldr	r3, [r3, #0]
    3726:	3304      	adds	r3, #4
    3728:	4618      	mov	r0, r3
    372a:	f7ff f969 	bl	2a00 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    372e:	6938      	ldr	r0, [r7, #16]
    3730:	f000 fece 	bl	44d0 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    3734:	f000 fa56 	bl	3be4 <xTaskResumeAll>
    3738:	60f8      	str	r0, [r7, #12]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    373a:	68fb      	ldr	r3, [r7, #12]
    373c:	2b00      	cmp	r3, #0
    373e:	d101      	bne.n	3744 <vTaskDelayUntil+0xa0>
		{
			portYIELD_WITHIN_API();
    3740:	f001 f86a 	bl	4818 <vPortYieldFromISR>
		}
	}
    3744:	3718      	adds	r7, #24
    3746:	46bd      	mov	sp, r7
    3748:	bd80      	pop	{r7, pc}
    374a:	bf00      	nop

0000374c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    374c:	b580      	push	{r7, lr}
    374e:	b084      	sub	sp, #16
    3750:	af00      	add	r7, sp, #0
    3752:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    3754:	2300      	movs	r3, #0
    3756:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    3758:	687b      	ldr	r3, [r7, #4]
    375a:	2b00      	cmp	r3, #0
    375c:	d018      	beq.n	3790 <vTaskDelay+0x44>
		{
			vTaskSuspendAll();
    375e:	f000 fa2f 	bl	3bc0 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    3762:	f240 6300 	movw	r3, #1536	; 0x600
    3766:	f2c2 0300 	movt	r3, #8192	; 0x2000
    376a:	681a      	ldr	r2, [r3, #0]
    376c:	687b      	ldr	r3, [r7, #4]
    376e:	4413      	add	r3, r2
    3770:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3772:	f240 23c8 	movw	r3, #712	; 0x2c8
    3776:	f2c2 0300 	movt	r3, #8192	; 0x2000
    377a:	681b      	ldr	r3, [r3, #0]
    377c:	3304      	adds	r3, #4
    377e:	4618      	mov	r0, r3
    3780:	f7ff f93e 	bl	2a00 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    3784:	68b8      	ldr	r0, [r7, #8]
    3786:	f000 fea3 	bl	44d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    378a:	f000 fa2b 	bl	3be4 <xTaskResumeAll>
    378e:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    3790:	68fb      	ldr	r3, [r7, #12]
    3792:	2b00      	cmp	r3, #0
    3794:	d101      	bne.n	379a <vTaskDelay+0x4e>
		{
			portYIELD_WITHIN_API();
    3796:	f001 f83f 	bl	4818 <vPortYieldFromISR>
		}
	}
    379a:	3710      	adds	r7, #16
    379c:	46bd      	mov	sp, r7
    379e:	bd80      	pop	{r7, pc}

000037a0 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
	{
    37a0:	b580      	push	{r7, lr}
    37a2:	b084      	sub	sp, #16
    37a4:	af00      	add	r7, sp, #0
    37a6:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxReturn;

		taskENTER_CRITICAL();
    37a8:	f001 f844 	bl	4834 <vPortEnterCritical>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    37ac:	687b      	ldr	r3, [r7, #4]
    37ae:	2b00      	cmp	r3, #0
    37b0:	d105      	bne.n	37be <uxTaskPriorityGet+0x1e>
    37b2:	f240 23c8 	movw	r3, #712	; 0x2c8
    37b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    37ba:	681b      	ldr	r3, [r3, #0]
    37bc:	e000      	b.n	37c0 <uxTaskPriorityGet+0x20>
    37be:	687b      	ldr	r3, [r7, #4]
    37c0:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
    37c2:	68fb      	ldr	r3, [r7, #12]
    37c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    37c6:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
    37c8:	f001 f84a 	bl	4860 <vPortExitCritical>

		return uxReturn;
    37cc:	68bb      	ldr	r3, [r7, #8]
	}
    37ce:	4618      	mov	r0, r3
    37d0:	3710      	adds	r7, #16
    37d2:	46bd      	mov	sp, r7
    37d4:	bd80      	pop	{r7, pc}
    37d6:	bf00      	nop

000037d8 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
	{
    37d8:	b580      	push	{r7, lr}
    37da:	b086      	sub	sp, #24
    37dc:	af00      	add	r7, sp, #0
    37de:	6078      	str	r0, [r7, #4]
    37e0:	6039      	str	r1, [r7, #0]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxCurrentPriority;
	portBASE_TYPE xYieldRequired = pdFALSE;
    37e2:	2300      	movs	r3, #0
    37e4:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= configMAX_PRIORITIES )
    37e6:	683b      	ldr	r3, [r7, #0]
    37e8:	2b13      	cmp	r3, #19
    37ea:	d901      	bls.n	37f0 <vTaskPrioritySet+0x18>
		{
			uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    37ec:	2313      	movs	r3, #19
    37ee:	603b      	str	r3, [r7, #0]
		}

		taskENTER_CRITICAL();
    37f0:	f001 f820 	bl	4834 <vPortEnterCritical>
		{
			if( pxTask == pxCurrentTCB )
    37f4:	f240 23c8 	movw	r3, #712	; 0x2c8
    37f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    37fc:	681b      	ldr	r3, [r3, #0]
    37fe:	687a      	ldr	r2, [r7, #4]
    3800:	429a      	cmp	r2, r3
    3802:	d101      	bne.n	3808 <vTaskPrioritySet+0x30>
			{
				pxTask = NULL;
    3804:	2300      	movs	r3, #0
    3806:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    3808:	687b      	ldr	r3, [r7, #4]
    380a:	2b00      	cmp	r3, #0
    380c:	d105      	bne.n	381a <vTaskPrioritySet+0x42>
    380e:	f240 23c8 	movw	r3, #712	; 0x2c8
    3812:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3816:	681b      	ldr	r3, [r3, #0]
    3818:	e000      	b.n	381c <vTaskPrioritySet+0x44>
    381a:	687b      	ldr	r3, [r7, #4]
    381c:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentPriority = pxTCB->uxBasePriority;
    381e:	693b      	ldr	r3, [r7, #16]
    3820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    3822:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentPriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentPriority != uxNewPriority )
    3824:	68fa      	ldr	r2, [r7, #12]
    3826:	683b      	ldr	r3, [r7, #0]
    3828:	429a      	cmp	r2, r3
    382a:	d052      	beq.n	38d2 <vTaskPrioritySet+0xfa>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentPriority )
    382c:	683a      	ldr	r2, [r7, #0]
    382e:	68fb      	ldr	r3, [r7, #12]
    3830:	429a      	cmp	r2, r3
    3832:	d905      	bls.n	3840 <vTaskPrioritySet+0x68>
				{
					if( pxTask != NULL )
    3834:	687b      	ldr	r3, [r7, #4]
    3836:	2b00      	cmp	r3, #0
    3838:	d007      	beq.n	384a <vTaskPrioritySet+0x72>
					{
						/* The priority of another task is being raised.  If we
						were raising the priority of the currently running task
						there would be no need to switch as it must have already
						been the highest priority task. */
						xYieldRequired = pdTRUE;
    383a:	2301      	movs	r3, #1
    383c:	617b      	str	r3, [r7, #20]
    383e:	e004      	b.n	384a <vTaskPrioritySet+0x72>
					}
				}
				else if( pxTask == NULL )
    3840:	687b      	ldr	r3, [r7, #4]
    3842:	2b00      	cmp	r3, #0
    3844:	d101      	bne.n	384a <vTaskPrioritySet+0x72>
				{
					/* Setting our own priority down means there may now be another
					task of higher priority that is ready to execute. */
					xYieldRequired = pdTRUE;
    3846:	2301      	movs	r3, #1
    3848:	617b      	str	r3, [r7, #20]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    384a:	693b      	ldr	r3, [r7, #16]
    384c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    384e:	693b      	ldr	r3, [r7, #16]
    3850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3852:	429a      	cmp	r2, r3
    3854:	d102      	bne.n	385c <vTaskPrioritySet+0x84>
					{
						pxTCB->uxPriority = uxNewPriority;
    3856:	693b      	ldr	r3, [r7, #16]
    3858:	683a      	ldr	r2, [r7, #0]
    385a:	645a      	str	r2, [r3, #68]	; 0x44
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
    385c:	693b      	ldr	r3, [r7, #16]
    385e:	683a      	ldr	r2, [r7, #0]
    3860:	65da      	str	r2, [r3, #92]	; 0x5c
				{
					pxTCB->uxPriority = uxNewPriority;
				}
				#endif

				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
    3862:	683b      	ldr	r3, [r7, #0]
    3864:	f1c3 0214 	rsb	r2, r3, #20
    3868:	693b      	ldr	r3, [r7, #16]
    386a:	625a      	str	r2, [r3, #36]	; 0x24

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the queue appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
    386c:	693b      	ldr	r3, [r7, #16]
    386e:	6a1a      	ldr	r2, [r3, #32]
    3870:	68fb      	ldr	r3, [r7, #12]
    3872:	0159      	lsls	r1, r3, #5
    3874:	f240 23cc 	movw	r3, #716	; 0x2cc
    3878:	f2c2 0300 	movt	r3, #8192	; 0x2000
    387c:	440b      	add	r3, r1
    387e:	429a      	cmp	r2, r3
    3880:	d122      	bne.n	38c8 <vTaskPrioritySet+0xf0>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					vListRemove( &( pxTCB->xGenericListItem ) );
    3882:	693b      	ldr	r3, [r7, #16]
    3884:	3304      	adds	r3, #4
    3886:	4618      	mov	r0, r3
    3888:	f7ff f8ba 	bl	2a00 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    388c:	693b      	ldr	r3, [r7, #16]
    388e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    3890:	f240 6308 	movw	r3, #1544	; 0x608
    3894:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3898:	681b      	ldr	r3, [r3, #0]
    389a:	429a      	cmp	r2, r3
    389c:	d906      	bls.n	38ac <vTaskPrioritySet+0xd4>
    389e:	693b      	ldr	r3, [r7, #16]
    38a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    38a2:	f240 6308 	movw	r3, #1544	; 0x608
    38a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    38aa:	601a      	str	r2, [r3, #0]
    38ac:	693b      	ldr	r3, [r7, #16]
    38ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    38b0:	015a      	lsls	r2, r3, #5
    38b2:	f240 23cc 	movw	r3, #716	; 0x2cc
    38b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    38ba:	441a      	add	r2, r3
    38bc:	693b      	ldr	r3, [r7, #16]
    38be:	3304      	adds	r3, #4
    38c0:	4610      	mov	r0, r2
    38c2:	4619      	mov	r1, r3
    38c4:	f7ff f83c 	bl	2940 <vListInsertEnd>
				}

				if( xYieldRequired == pdTRUE )
    38c8:	697b      	ldr	r3, [r7, #20]
    38ca:	2b01      	cmp	r3, #1
    38cc:	d101      	bne.n	38d2 <vTaskPrioritySet+0xfa>
				{
					portYIELD_WITHIN_API();
    38ce:	f000 ffa3 	bl	4818 <vPortYieldFromISR>
				}
			}
		}
		taskEXIT_CRITICAL();
    38d2:	f000 ffc5 	bl	4860 <vPortExitCritical>
	}
    38d6:	3718      	adds	r7, #24
    38d8:	46bd      	mov	sp, r7
    38da:	bd80      	pop	{r7, pc}

000038dc <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
    38dc:	b580      	push	{r7, lr}
    38de:	b084      	sub	sp, #16
    38e0:	af00      	add	r7, sp, #0
    38e2:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    38e4:	f000 ffa6 	bl	4834 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
    38e8:	f240 23c8 	movw	r3, #712	; 0x2c8
    38ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    38f0:	681b      	ldr	r3, [r3, #0]
    38f2:	687a      	ldr	r2, [r7, #4]
    38f4:	429a      	cmp	r2, r3
    38f6:	d101      	bne.n	38fc <vTaskSuspend+0x20>
			{
				pxTaskToSuspend = NULL;
    38f8:	2300      	movs	r3, #0
    38fa:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
    38fc:	687b      	ldr	r3, [r7, #4]
    38fe:	2b00      	cmp	r3, #0
    3900:	d105      	bne.n	390e <vTaskSuspend+0x32>
    3902:	f240 23c8 	movw	r3, #712	; 0x2c8
    3906:	f2c2 0300 	movt	r3, #8192	; 0x2000
    390a:	681b      	ldr	r3, [r3, #0]
    390c:	e000      	b.n	3910 <vTaskSuspend+0x34>
    390e:	687b      	ldr	r3, [r7, #4]
    3910:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    3912:	68fb      	ldr	r3, [r7, #12]
    3914:	3304      	adds	r3, #4
    3916:	4618      	mov	r0, r3
    3918:	f7ff f872 	bl	2a00 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    391c:	68fb      	ldr	r3, [r7, #12]
    391e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3920:	2b00      	cmp	r3, #0
    3922:	d004      	beq.n	392e <vTaskSuspend+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    3924:	68fb      	ldr	r3, [r7, #12]
    3926:	3324      	adds	r3, #36	; 0x24
    3928:	4618      	mov	r0, r3
    392a:	f7ff f869 	bl	2a00 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
    392e:	68fb      	ldr	r3, [r7, #12]
    3930:	3304      	adds	r3, #4
    3932:	f240 50d8 	movw	r0, #1496	; 0x5d8
    3936:	f2c2 0000 	movt	r0, #8192	; 0x2000
    393a:	4619      	mov	r1, r3
    393c:	f7ff f800 	bl	2940 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    3940:	f000 ff8e 	bl	4860 <vPortExitCritical>

		if( ( void * ) pxTaskToSuspend == NULL )
    3944:	687b      	ldr	r3, [r7, #4]
    3946:	2b00      	cmp	r3, #0
    3948:	d11e      	bne.n	3988 <vTaskSuspend+0xac>
		{
			if( xSchedulerRunning != pdFALSE )
    394a:	f240 630c 	movw	r3, #1548	; 0x60c
    394e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3952:	681b      	ldr	r3, [r3, #0]
    3954:	2b00      	cmp	r3, #0
    3956:	d002      	beq.n	395e <vTaskSuspend+0x82>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
    3958:	f000 ff5e 	bl	4818 <vPortYieldFromISR>
    395c:	e014      	b.n	3988 <vTaskSuspend+0xac>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    395e:	f240 53d8 	movw	r3, #1496	; 0x5d8
    3962:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3966:	681a      	ldr	r2, [r3, #0]
    3968:	f240 53fc 	movw	r3, #1532	; 0x5fc
    396c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3970:	681b      	ldr	r3, [r3, #0]
    3972:	429a      	cmp	r2, r3
    3974:	d106      	bne.n	3984 <vTaskSuspend+0xa8>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    3976:	f240 23c8 	movw	r3, #712	; 0x2c8
    397a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    397e:	2200      	movs	r2, #0
    3980:	601a      	str	r2, [r3, #0]
    3982:	e001      	b.n	3988 <vTaskSuspend+0xac>
				}
				else
				{
					vTaskSwitchContext();
    3984:	f000 fb08 	bl	3f98 <vTaskSwitchContext>
				}
			}
		}
	}
    3988:	3710      	adds	r7, #16
    398a:	46bd      	mov	sp, r7
    398c:	bd80      	pop	{r7, pc}
    398e:	bf00      	nop

00003990 <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
    3990:	b480      	push	{r7}
    3992:	b085      	sub	sp, #20
    3994:	af00      	add	r7, sp, #0
    3996:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xReturn = pdFALSE;
    3998:	2300      	movs	r3, #0
    399a:	60fb      	str	r3, [r7, #12]
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
    399c:	687b      	ldr	r3, [r7, #4]
    399e:	60bb      	str	r3, [r7, #8]
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    39a0:	68bb      	ldr	r3, [r7, #8]
    39a2:	6a1a      	ldr	r2, [r3, #32]
    39a4:	f240 53d8 	movw	r3, #1496	; 0x5d8
    39a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    39ac:	429a      	cmp	r2, r3
    39ae:	d10d      	bne.n	39cc <xTaskIsTaskSuspended+0x3c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    39b0:	68bb      	ldr	r3, [r7, #8]
    39b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    39b4:	f240 5394 	movw	r3, #1428	; 0x594
    39b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    39bc:	429a      	cmp	r2, r3
    39be:	d005      	beq.n	39cc <xTaskIsTaskSuspended+0x3c>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
    39c0:	68bb      	ldr	r3, [r7, #8]
    39c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    39c4:	2b00      	cmp	r3, #0
    39c6:	d101      	bne.n	39cc <xTaskIsTaskSuspended+0x3c>
				{
					xReturn = pdTRUE;
    39c8:	2301      	movs	r3, #1
    39ca:	60fb      	str	r3, [r7, #12]
				}
			}
		}

		return xReturn;
    39cc:	68fb      	ldr	r3, [r7, #12]
	}
    39ce:	4618      	mov	r0, r3
    39d0:	3714      	adds	r7, #20
    39d2:	46bd      	mov	sp, r7
    39d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    39d8:	4770      	bx	lr
    39da:	bf00      	nop

000039dc <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
    39dc:	b580      	push	{r7, lr}
    39de:	b084      	sub	sp, #16
    39e0:	af00      	add	r7, sp, #0
    39e2:	6078      	str	r0, [r7, #4]
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
    39e4:	687b      	ldr	r3, [r7, #4]
    39e6:	60fb      	str	r3, [r7, #12]

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    39e8:	68fb      	ldr	r3, [r7, #12]
    39ea:	2b00      	cmp	r3, #0
    39ec:	d040      	beq.n	3a70 <vTaskResume+0x94>
    39ee:	f240 23c8 	movw	r3, #712	; 0x2c8
    39f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    39f6:	681b      	ldr	r3, [r3, #0]
    39f8:	68fa      	ldr	r2, [r7, #12]
    39fa:	429a      	cmp	r2, r3
    39fc:	d038      	beq.n	3a70 <vTaskResume+0x94>
		{
			taskENTER_CRITICAL();
    39fe:	f000 ff19 	bl	4834 <vPortEnterCritical>
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    3a02:	68f8      	ldr	r0, [r7, #12]
    3a04:	f7ff ffc4 	bl	3990 <xTaskIsTaskSuspended>
    3a08:	4603      	mov	r3, r0
    3a0a:	2b01      	cmp	r3, #1
    3a0c:	d12e      	bne.n	3a6c <vTaskResume+0x90>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
    3a0e:	68fb      	ldr	r3, [r7, #12]
    3a10:	3304      	adds	r3, #4
    3a12:	4618      	mov	r0, r3
    3a14:	f7fe fff4 	bl	2a00 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    3a18:	68fb      	ldr	r3, [r7, #12]
    3a1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    3a1c:	f240 6308 	movw	r3, #1544	; 0x608
    3a20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a24:	681b      	ldr	r3, [r3, #0]
    3a26:	429a      	cmp	r2, r3
    3a28:	d906      	bls.n	3a38 <vTaskResume+0x5c>
    3a2a:	68fb      	ldr	r3, [r7, #12]
    3a2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    3a2e:	f240 6308 	movw	r3, #1544	; 0x608
    3a32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a36:	601a      	str	r2, [r3, #0]
    3a38:	68fb      	ldr	r3, [r7, #12]
    3a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3a3c:	015a      	lsls	r2, r3, #5
    3a3e:	f240 23cc 	movw	r3, #716	; 0x2cc
    3a42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a46:	441a      	add	r2, r3
    3a48:	68fb      	ldr	r3, [r7, #12]
    3a4a:	3304      	adds	r3, #4
    3a4c:	4610      	mov	r0, r2
    3a4e:	4619      	mov	r1, r3
    3a50:	f7fe ff76 	bl	2940 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3a54:	68fb      	ldr	r3, [r7, #12]
    3a56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    3a58:	f240 23c8 	movw	r3, #712	; 0x2c8
    3a5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a60:	681b      	ldr	r3, [r3, #0]
    3a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3a64:	429a      	cmp	r2, r3
    3a66:	d301      	bcc.n	3a6c <vTaskResume+0x90>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
    3a68:	f000 fed6 	bl	4818 <vPortYieldFromISR>
					}
				}
			}
			taskEXIT_CRITICAL();
    3a6c:	f000 fef8 	bl	4860 <vPortExitCritical>
		}
	}
    3a70:	3710      	adds	r7, #16
    3a72:	46bd      	mov	sp, r7
    3a74:	bd80      	pop	{r7, pc}
    3a76:	bf00      	nop

00003a78 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
    3a78:	b580      	push	{r7, lr}
    3a7a:	b086      	sub	sp, #24
    3a7c:	af00      	add	r7, sp, #0
    3a7e:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xYieldRequired = pdFALSE;
    3a80:	2300      	movs	r3, #0
    3a82:	617b      	str	r3, [r7, #20]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxSavedInterruptStatus;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
    3a84:	687b      	ldr	r3, [r7, #4]
    3a86:	613b      	str	r3, [r7, #16]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    3a88:	2300      	movs	r3, #0
    3a8a:	60fb      	str	r3, [r7, #12]
    3a8c:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    3a90:	f380 8811 	msr	BASEPRI, r0
		{
			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    3a94:	6938      	ldr	r0, [r7, #16]
    3a96:	f7ff ff7b 	bl	3990 <xTaskIsTaskSuspended>
    3a9a:	4603      	mov	r3, r0
    3a9c:	2b01      	cmp	r3, #1
    3a9e:	d141      	bne.n	3b24 <xTaskResumeFromISR+0xac>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3aa0:	f240 6310 	movw	r3, #1552	; 0x610
    3aa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3aa8:	681b      	ldr	r3, [r3, #0]
    3aaa:	2b00      	cmp	r3, #0
    3aac:	d131      	bne.n	3b12 <xTaskResumeFromISR+0x9a>
				{
					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
    3aae:	693b      	ldr	r3, [r7, #16]
    3ab0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    3ab2:	f240 23c8 	movw	r3, #712	; 0x2c8
    3ab6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3aba:	681b      	ldr	r3, [r3, #0]
    3abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3abe:	429a      	cmp	r2, r3
    3ac0:	bf34      	ite	cc
    3ac2:	2300      	movcc	r3, #0
    3ac4:	2301      	movcs	r3, #1
    3ac6:	b2db      	uxtb	r3, r3
    3ac8:	617b      	str	r3, [r7, #20]
					vListRemove(  &( pxTCB->xGenericListItem ) );
    3aca:	693b      	ldr	r3, [r7, #16]
    3acc:	3304      	adds	r3, #4
    3ace:	4618      	mov	r0, r3
    3ad0:	f7fe ff96 	bl	2a00 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    3ad4:	693b      	ldr	r3, [r7, #16]
    3ad6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    3ad8:	f240 6308 	movw	r3, #1544	; 0x608
    3adc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ae0:	681b      	ldr	r3, [r3, #0]
    3ae2:	429a      	cmp	r2, r3
    3ae4:	d906      	bls.n	3af4 <xTaskResumeFromISR+0x7c>
    3ae6:	693b      	ldr	r3, [r7, #16]
    3ae8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    3aea:	f240 6308 	movw	r3, #1544	; 0x608
    3aee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3af2:	601a      	str	r2, [r3, #0]
    3af4:	693b      	ldr	r3, [r7, #16]
    3af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3af8:	015a      	lsls	r2, r3, #5
    3afa:	f240 23cc 	movw	r3, #716	; 0x2cc
    3afe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b02:	441a      	add	r2, r3
    3b04:	693b      	ldr	r3, [r7, #16]
    3b06:	3304      	adds	r3, #4
    3b08:	4610      	mov	r0, r2
    3b0a:	4619      	mov	r1, r3
    3b0c:	f7fe ff18 	bl	2940 <vListInsertEnd>
    3b10:	e008      	b.n	3b24 <xTaskResumeFromISR+0xac>
				else
				{
					/* We cannot access the delayed or ready lists, so will hold this
					task pending until the scheduler is resumed, at which point a
					yield will be performed if necessary. */
					vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    3b12:	693b      	ldr	r3, [r7, #16]
    3b14:	3324      	adds	r3, #36	; 0x24
    3b16:	f240 5094 	movw	r0, #1428	; 0x594
    3b1a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3b1e:	4619      	mov	r1, r3
    3b20:	f7fe ff0e 	bl	2940 <vListInsertEnd>
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    3b24:	f04f 0000 	mov.w	r0, #0
    3b28:	f380 8811 	msr	BASEPRI, r0

		return xYieldRequired;
    3b2c:	697b      	ldr	r3, [r7, #20]
	}
    3b2e:	4618      	mov	r0, r3
    3b30:	3718      	adds	r7, #24
    3b32:	46bd      	mov	sp, r7
    3b34:	bd80      	pop	{r7, pc}
    3b36:	bf00      	nop

00003b38 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    3b38:	b580      	push	{r7, lr}
    3b3a:	b086      	sub	sp, #24
    3b3c:	af04      	add	r7, sp, #16
	/* Add the idle task at the lowest priority. */
	#if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
	{
		/* Create the idle task, storing its handle in xIdleTaskHandle so it can
		be returned by the xTaskGetIdleTaskHandle() function. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
    3b3e:	2300      	movs	r3, #0
    3b40:	9300      	str	r3, [sp, #0]
    3b42:	f240 53f8 	movw	r3, #1528	; 0x5f8
    3b46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b4a:	9301      	str	r3, [sp, #4]
    3b4c:	2300      	movs	r3, #0
    3b4e:	9302      	str	r3, [sp, #8]
    3b50:	2300      	movs	r3, #0
    3b52:	9303      	str	r3, [sp, #12]
    3b54:	f244 302d 	movw	r0, #17197	; 0x432d
    3b58:	f2c0 0000 	movt	r0, #0
    3b5c:	f643 219c 	movw	r1, #15004	; 0x3a9c
    3b60:	f2c0 0101 	movt	r1, #1
    3b64:	2280      	movs	r2, #128	; 0x80
    3b66:	2300      	movs	r3, #0
    3b68:	f7ff fc74 	bl	3454 <xTaskGenericCreate>
    3b6c:	6078      	str	r0, [r7, #4]
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
    3b6e:	687b      	ldr	r3, [r7, #4]
    3b70:	2b01      	cmp	r3, #1
    3b72:	d111      	bne.n	3b98 <vTaskStartScheduler+0x60>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
    3b74:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    3b78:	f380 8811 	msr	BASEPRI, r0

		xSchedulerRunning = pdTRUE;
    3b7c:	f240 630c 	movw	r3, #1548	; 0x60c
    3b80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b84:	2201      	movs	r2, #1
    3b86:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
    3b88:	f240 6300 	movw	r3, #1536	; 0x600
    3b8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b90:	2200      	movs	r2, #0
    3b92:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    3b94:	f000 fe12 	bl	47bc <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    3b98:	3708      	adds	r7, #8
    3b9a:	46bd      	mov	sp, r7
    3b9c:	bd80      	pop	{r7, pc}
    3b9e:	bf00      	nop

00003ba0 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    3ba0:	b580      	push	{r7, lr}
    3ba2:	af00      	add	r7, sp, #0
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    3ba4:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    3ba8:	f380 8811 	msr	BASEPRI, r0
	xSchedulerRunning = pdFALSE;
    3bac:	f240 630c 	movw	r3, #1548	; 0x60c
    3bb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3bb4:	2200      	movs	r2, #0
    3bb6:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
    3bb8:	f000 fe28 	bl	480c <vPortEndScheduler>
}
    3bbc:	bd80      	pop	{r7, pc}
    3bbe:	bf00      	nop

00003bc0 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    3bc0:	b480      	push	{r7}
    3bc2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    3bc4:	f240 6310 	movw	r3, #1552	; 0x610
    3bc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3bcc:	681b      	ldr	r3, [r3, #0]
    3bce:	1c5a      	adds	r2, r3, #1
    3bd0:	f240 6310 	movw	r3, #1552	; 0x610
    3bd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3bd8:	601a      	str	r2, [r3, #0]
}
    3bda:	46bd      	mov	sp, r7
    3bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
    3be0:	4770      	bx	lr
    3be2:	bf00      	nop

00003be4 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    3be4:	b590      	push	{r4, r7, lr}
    3be6:	b083      	sub	sp, #12
    3be8:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    3bea:	2300      	movs	r3, #0
    3bec:	607b      	str	r3, [r7, #4]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    3bee:	f000 fe21 	bl	4834 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
    3bf2:	f240 6310 	movw	r3, #1552	; 0x610
    3bf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3bfa:	681b      	ldr	r3, [r3, #0]
    3bfc:	1e5a      	subs	r2, r3, #1
    3bfe:	f240 6310 	movw	r3, #1552	; 0x610
    3c02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c06:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3c08:	f240 6310 	movw	r3, #1552	; 0x610
    3c0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c10:	681b      	ldr	r3, [r3, #0]
    3c12:	2b00      	cmp	r3, #0
    3c14:	f040 8083 	bne.w	3d1e <xTaskResumeAll+0x13a>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    3c18:	f240 53fc 	movw	r3, #1532	; 0x5fc
    3c1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c20:	681b      	ldr	r3, [r3, #0]
    3c22:	2b00      	cmp	r3, #0
    3c24:	d07b      	beq.n	3d1e <xTaskResumeAll+0x13a>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
    3c26:	2300      	movs	r3, #0
    3c28:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    3c2a:	e033      	b.n	3c94 <xTaskResumeAll+0xb0>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    3c2c:	f240 5394 	movw	r3, #1428	; 0x594
    3c30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c34:	699b      	ldr	r3, [r3, #24]
    3c36:	699c      	ldr	r4, [r3, #24]
					vListRemove( &( pxTCB->xEventListItem ) );
    3c38:	f104 0324 	add.w	r3, r4, #36	; 0x24
    3c3c:	4618      	mov	r0, r3
    3c3e:	f7fe fedf 	bl	2a00 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    3c42:	1d23      	adds	r3, r4, #4
    3c44:	4618      	mov	r0, r3
    3c46:	f7fe fedb 	bl	2a00 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    3c4a:	6c62      	ldr	r2, [r4, #68]	; 0x44
    3c4c:	f240 6308 	movw	r3, #1544	; 0x608
    3c50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c54:	681b      	ldr	r3, [r3, #0]
    3c56:	429a      	cmp	r2, r3
    3c58:	d905      	bls.n	3c66 <xTaskResumeAll+0x82>
    3c5a:	6c62      	ldr	r2, [r4, #68]	; 0x44
    3c5c:	f240 6308 	movw	r3, #1544	; 0x608
    3c60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c64:	601a      	str	r2, [r3, #0]
    3c66:	6c63      	ldr	r3, [r4, #68]	; 0x44
    3c68:	015a      	lsls	r2, r3, #5
    3c6a:	f240 23cc 	movw	r3, #716	; 0x2cc
    3c6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c72:	441a      	add	r2, r3
    3c74:	1d23      	adds	r3, r4, #4
    3c76:	4610      	mov	r0, r2
    3c78:	4619      	mov	r1, r3
    3c7a:	f7fe fe61 	bl	2940 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3c7e:	6c62      	ldr	r2, [r4, #68]	; 0x44
    3c80:	f240 23c8 	movw	r3, #712	; 0x2c8
    3c84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c88:	681b      	ldr	r3, [r3, #0]
    3c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3c8c:	429a      	cmp	r2, r3
    3c8e:	d301      	bcc.n	3c94 <xTaskResumeAll+0xb0>
					{
						xYieldRequired = pdTRUE;
    3c90:	2301      	movs	r3, #1
    3c92:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    3c94:	f240 5394 	movw	r3, #1428	; 0x594
    3c98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c9c:	681b      	ldr	r3, [r3, #0]
    3c9e:	2b00      	cmp	r3, #0
    3ca0:	d1c4      	bne.n	3c2c <xTaskResumeAll+0x48>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    3ca2:	f240 6314 	movw	r3, #1556	; 0x614
    3ca6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3caa:	681b      	ldr	r3, [r3, #0]
    3cac:	2b00      	cmp	r3, #0
    3cae:	d022      	beq.n	3cf6 <xTaskResumeAll+0x112>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    3cb0:	e01a      	b.n	3ce8 <xTaskResumeAll+0x104>
					{
						vTaskIncrementTick();
    3cb2:	f000 f897 	bl	3de4 <vTaskIncrementTick>
						--uxMissedTicks;
    3cb6:	f240 6314 	movw	r3, #1556	; 0x614
    3cba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3cbe:	681b      	ldr	r3, [r3, #0]
    3cc0:	1e5a      	subs	r2, r3, #1
    3cc2:	f240 6314 	movw	r3, #1556	; 0x614
    3cc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3cca:	601a      	str	r2, [r3, #0]
                        // added by wanbo
                        if (uxMissedTicks > (unsigned portBASE_TYPE) 1<<31)
    3ccc:	f240 6314 	movw	r3, #1556	; 0x614
    3cd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3cd4:	681b      	ldr	r3, [r3, #0]
    3cd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    3cda:	d905      	bls.n	3ce8 <xTaskResumeAll+0x104>
                        {
                            uxMissedTicks = 0;
    3cdc:	f240 6314 	movw	r3, #1556	; 0x614
    3ce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ce4:	2200      	movs	r2, #0
    3ce6:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    3ce8:	f240 6314 	movw	r3, #1556	; 0x614
    3cec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3cf0:	681b      	ldr	r3, [r3, #0]
    3cf2:	2b00      	cmp	r3, #0
    3cf4:	d1dd      	bne.n	3cb2 <xTaskResumeAll+0xce>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    3cf6:	683b      	ldr	r3, [r7, #0]
    3cf8:	2b01      	cmp	r3, #1
    3cfa:	d006      	beq.n	3d0a <xTaskResumeAll+0x126>
    3cfc:	f240 6318 	movw	r3, #1560	; 0x618
    3d00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d04:	681b      	ldr	r3, [r3, #0]
    3d06:	2b01      	cmp	r3, #1
    3d08:	d109      	bne.n	3d1e <xTaskResumeAll+0x13a>
				{
					xAlreadyYielded = pdTRUE;
    3d0a:	2301      	movs	r3, #1
    3d0c:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
    3d0e:	f240 6318 	movw	r3, #1560	; 0x618
    3d12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d16:	2200      	movs	r2, #0
    3d18:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
    3d1a:	f000 fd7d 	bl	4818 <vPortYieldFromISR>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    3d1e:	f000 fd9f 	bl	4860 <vPortExitCritical>

	return xAlreadyYielded;
    3d22:	687b      	ldr	r3, [r7, #4]
}
    3d24:	4618      	mov	r0, r3
    3d26:	370c      	adds	r7, #12
    3d28:	46bd      	mov	sp, r7
    3d2a:	bd90      	pop	{r4, r7, pc}

00003d2c <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    3d2c:	b580      	push	{r7, lr}
    3d2e:	b082      	sub	sp, #8
    3d30:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    3d32:	f000 fd7f 	bl	4834 <vPortEnterCritical>
	{
		xTicks = xTickCount;
    3d36:	f240 6300 	movw	r3, #1536	; 0x600
    3d3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d3e:	681b      	ldr	r3, [r3, #0]
    3d40:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
    3d42:	f000 fd8d 	bl	4860 <vPortExitCritical>

	return xTicks;
    3d46:	687b      	ldr	r3, [r7, #4]
}
    3d48:	4618      	mov	r0, r3
    3d4a:	3708      	adds	r7, #8
    3d4c:	46bd      	mov	sp, r7
    3d4e:	bd80      	pop	{r7, pc}

00003d50 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
    3d50:	b480      	push	{r7}
    3d52:	b083      	sub	sp, #12
    3d54:	af00      	add	r7, sp, #0
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    3d56:	2300      	movs	r3, #0
    3d58:	607b      	str	r3, [r7, #4]
    3d5a:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    3d5e:	f380 8811 	msr	BASEPRI, r0
	xReturn = xTickCount;
    3d62:	f240 6300 	movw	r3, #1536	; 0x600
    3d66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d6a:	681b      	ldr	r3, [r3, #0]
    3d6c:	603b      	str	r3, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    3d6e:	f04f 0000 	mov.w	r0, #0
    3d72:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    3d76:	683b      	ldr	r3, [r7, #0]
}
    3d78:	4618      	mov	r0, r3
    3d7a:	370c      	adds	r7, #12
    3d7c:	46bd      	mov	sp, r7
    3d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d82:	4770      	bx	lr

00003d84 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
    3d84:	b480      	push	{r7}
    3d86:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    3d88:	f240 53fc 	movw	r3, #1532	; 0x5fc
    3d8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d90:	681b      	ldr	r3, [r3, #0]
}
    3d92:	4618      	mov	r0, r3
    3d94:	46bd      	mov	sp, r7
    3d96:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d9a:	4770      	bx	lr

00003d9c <pcTaskGetTaskName>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_pcTaskGetTaskName == 1 )

	signed char *pcTaskGetTaskName( xTaskHandle xTaskToQuery )
	{
    3d9c:	b480      	push	{r7}
    3d9e:	b085      	sub	sp, #20
    3da0:	af00      	add	r7, sp, #0
    3da2:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		/* If null is passed in here then the name of the calling task is being queried. */
		pxTCB = prvGetTCBFromHandle( xTaskToQuery );
    3da4:	687b      	ldr	r3, [r7, #4]
    3da6:	2b00      	cmp	r3, #0
    3da8:	d105      	bne.n	3db6 <pcTaskGetTaskName+0x1a>
    3daa:	f240 23c8 	movw	r3, #712	; 0x2c8
    3dae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3db2:	681b      	ldr	r3, [r3, #0]
    3db4:	e000      	b.n	3db8 <pcTaskGetTaskName+0x1c>
    3db6:	687b      	ldr	r3, [r7, #4]
    3db8:	60fb      	str	r3, [r7, #12]
		configASSERT( pxTCB );
		return &( pxTCB->pcTaskName[ 0 ] );
    3dba:	68fb      	ldr	r3, [r7, #12]
    3dbc:	334c      	adds	r3, #76	; 0x4c
	}
    3dbe:	4618      	mov	r0, r3
    3dc0:	3714      	adds	r7, #20
    3dc2:	46bd      	mov	sp, r7
    3dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
    3dc8:	4770      	bx	lr
    3dca:	bf00      	nop

00003dcc <xTaskGetIdleTaskHandle>:
/*----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )

	xTaskHandle xTaskGetIdleTaskHandle( void )
	{
    3dcc:	b480      	push	{r7}
    3dce:	af00      	add	r7, sp, #0
		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
		started, then xIdleTaskHandle will be NULL. */
		configASSERT( ( xIdleTaskHandle != NULL ) );
		return xIdleTaskHandle;
    3dd0:	f240 53f8 	movw	r3, #1528	; 0x5f8
    3dd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3dd8:	681b      	ldr	r3, [r3, #0]
	}
    3dda:	4618      	mov	r0, r3
    3ddc:	46bd      	mov	sp, r7
    3dde:	f85d 7b04 	ldr.w	r7, [sp], #4
    3de2:	4770      	bx	lr

00003de4 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    3de4:	b580      	push	{r7, lr}
    3de6:	b084      	sub	sp, #16
    3de8:	af00      	add	r7, sp, #0
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3dea:	f240 6310 	movw	r3, #1552	; 0x610
    3dee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3df2:	681b      	ldr	r3, [r3, #0]
    3df4:	2b00      	cmp	r3, #0
    3df6:	f040 80b6 	bne.w	3f66 <vTaskIncrementTick+0x182>
	{
		++xTickCount;
    3dfa:	f240 6300 	movw	r3, #1536	; 0x600
    3dfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e02:	681b      	ldr	r3, [r3, #0]
    3e04:	1c5a      	adds	r2, r3, #1
    3e06:	f240 6300 	movw	r3, #1536	; 0x600
    3e0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e0e:	601a      	str	r2, [r3, #0]
        //vPrintNumber(xTickCount);
		if( xTickCount == ( portTickType ) 0U )
    3e10:	f240 6300 	movw	r3, #1536	; 0x600
    3e14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e18:	681b      	ldr	r3, [r3, #0]
    3e1a:	2b00      	cmp	r3, #0
    3e1c:	d13f      	bne.n	3e9e <vTaskIncrementTick+0xba>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    3e1e:	f240 538c 	movw	r3, #1420	; 0x58c
    3e22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e26:	681b      	ldr	r3, [r3, #0]
    3e28:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    3e2a:	f240 5390 	movw	r3, #1424	; 0x590
    3e2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e32:	681a      	ldr	r2, [r3, #0]
    3e34:	f240 538c 	movw	r3, #1420	; 0x58c
    3e38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e3c:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
    3e3e:	f240 5390 	movw	r3, #1424	; 0x590
    3e42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e46:	68fa      	ldr	r2, [r7, #12]
    3e48:	601a      	str	r2, [r3, #0]
			xNumOfOverflows++;
    3e4a:	f240 631c 	movw	r3, #1564	; 0x61c
    3e4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e52:	681b      	ldr	r3, [r3, #0]
    3e54:	1c5a      	adds	r2, r3, #1
    3e56:	f240 631c 	movw	r3, #1564	; 0x61c
    3e5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e5e:	601a      	str	r2, [r3, #0]
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    3e60:	f240 538c 	movw	r3, #1420	; 0x58c
    3e64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e68:	681b      	ldr	r3, [r3, #0]
    3e6a:	681b      	ldr	r3, [r3, #0]
    3e6c:	2b00      	cmp	r3, #0
    3e6e:	d107      	bne.n	3e80 <vTaskIncrementTick+0x9c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    3e70:	f240 132c 	movw	r3, #300	; 0x12c
    3e74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e78:	f04f 32ff 	mov.w	r2, #4294967295
    3e7c:	601a      	str	r2, [r3, #0]
    3e7e:	e00e      	b.n	3e9e <vTaskIncrementTick+0xba>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    3e80:	f240 538c 	movw	r3, #1420	; 0x58c
    3e84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e88:	681b      	ldr	r3, [r3, #0]
    3e8a:	699b      	ldr	r3, [r3, #24]
    3e8c:	699b      	ldr	r3, [r3, #24]
    3e8e:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    3e90:	68bb      	ldr	r3, [r7, #8]
    3e92:	685a      	ldr	r2, [r3, #4]
    3e94:	f240 132c 	movw	r3, #300	; 0x12c
    3e98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e9c:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    3e9e:	f240 6300 	movw	r3, #1536	; 0x600
    3ea2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ea6:	681a      	ldr	r2, [r3, #0]
    3ea8:	f240 132c 	movw	r3, #300	; 0x12c
    3eac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3eb0:	681b      	ldr	r3, [r3, #0]
    3eb2:	429a      	cmp	r2, r3
    3eb4:	d356      	bcc.n	3f64 <vTaskIncrementTick+0x180>
    3eb6:	f240 538c 	movw	r3, #1420	; 0x58c
    3eba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ebe:	681b      	ldr	r3, [r3, #0]
    3ec0:	681b      	ldr	r3, [r3, #0]
    3ec2:	2b00      	cmp	r3, #0
    3ec4:	d107      	bne.n	3ed6 <vTaskIncrementTick+0xf2>
    3ec6:	f240 132c 	movw	r3, #300	; 0x12c
    3eca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ece:	f04f 32ff 	mov.w	r2, #4294967295
    3ed2:	601a      	str	r2, [r3, #0]
    3ed4:	e046      	b.n	3f64 <vTaskIncrementTick+0x180>
    3ed6:	f240 538c 	movw	r3, #1420	; 0x58c
    3eda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ede:	681b      	ldr	r3, [r3, #0]
    3ee0:	699b      	ldr	r3, [r3, #24]
    3ee2:	699b      	ldr	r3, [r3, #24]
    3ee4:	60bb      	str	r3, [r7, #8]
    3ee6:	68bb      	ldr	r3, [r7, #8]
    3ee8:	685b      	ldr	r3, [r3, #4]
    3eea:	607b      	str	r3, [r7, #4]
    3eec:	f240 6300 	movw	r3, #1536	; 0x600
    3ef0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ef4:	681a      	ldr	r2, [r3, #0]
    3ef6:	687b      	ldr	r3, [r7, #4]
    3ef8:	429a      	cmp	r2, r3
    3efa:	d206      	bcs.n	3f0a <vTaskIncrementTick+0x126>
    3efc:	f240 132c 	movw	r3, #300	; 0x12c
    3f00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f04:	687a      	ldr	r2, [r7, #4]
    3f06:	601a      	str	r2, [r3, #0]
    3f08:	e02c      	b.n	3f64 <vTaskIncrementTick+0x180>
    3f0a:	68bb      	ldr	r3, [r7, #8]
    3f0c:	3304      	adds	r3, #4
    3f0e:	4618      	mov	r0, r3
    3f10:	f7fe fd76 	bl	2a00 <vListRemove>
    3f14:	68bb      	ldr	r3, [r7, #8]
    3f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3f18:	2b00      	cmp	r3, #0
    3f1a:	d004      	beq.n	3f26 <vTaskIncrementTick+0x142>
    3f1c:	68bb      	ldr	r3, [r7, #8]
    3f1e:	3324      	adds	r3, #36	; 0x24
    3f20:	4618      	mov	r0, r3
    3f22:	f7fe fd6d 	bl	2a00 <vListRemove>
    3f26:	68bb      	ldr	r3, [r7, #8]
    3f28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    3f2a:	f240 6308 	movw	r3, #1544	; 0x608
    3f2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f32:	681b      	ldr	r3, [r3, #0]
    3f34:	429a      	cmp	r2, r3
    3f36:	d906      	bls.n	3f46 <vTaskIncrementTick+0x162>
    3f38:	68bb      	ldr	r3, [r7, #8]
    3f3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    3f3c:	f240 6308 	movw	r3, #1544	; 0x608
    3f40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f44:	601a      	str	r2, [r3, #0]
    3f46:	68bb      	ldr	r3, [r7, #8]
    3f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3f4a:	015a      	lsls	r2, r3, #5
    3f4c:	f240 23cc 	movw	r3, #716	; 0x2cc
    3f50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f54:	441a      	add	r2, r3
    3f56:	68bb      	ldr	r3, [r7, #8]
    3f58:	3304      	adds	r3, #4
    3f5a:	4610      	mov	r0, r2
    3f5c:	4619      	mov	r1, r3
    3f5e:	f7fe fcef 	bl	2940 <vListInsertEnd>
    3f62:	e7a8      	b.n	3eb6 <vTaskIncrementTick+0xd2>
    3f64:	e00c      	b.n	3f80 <vTaskIncrementTick+0x19c>
	}
	else
	{
		++uxMissedTicks;
    3f66:	f240 6314 	movw	r3, #1556	; 0x614
    3f6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f6e:	681b      	ldr	r3, [r3, #0]
    3f70:	1c5a      	adds	r2, r3, #1
    3f72:	f240 6314 	movw	r3, #1556	; 0x614
    3f76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f7a:	601a      	str	r2, [r3, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
    3f7c:	f00e fc8e 	bl	1289c <vApplicationTickHook>

	#if ( configUSE_TICK_HOOK == 1 )
	{
		/* Guard against the tick hook being called when the missed tick
		count is being unwound (when the scheduler is being unlocked. */
		if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
    3f80:	f240 6314 	movw	r3, #1556	; 0x614
    3f84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f88:	681b      	ldr	r3, [r3, #0]
    3f8a:	2b00      	cmp	r3, #0
    3f8c:	d101      	bne.n	3f92 <vTaskIncrementTick+0x1ae>
		{
			vApplicationTickHook();
    3f8e:	f00e fc85 	bl	1289c <vApplicationTickHook>
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    3f92:	3710      	adds	r7, #16
    3f94:	46bd      	mov	sp, r7
    3f96:	bd80      	pop	{r7, pc}

00003f98 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    3f98:	b590      	push	{r4, r7, lr}
    3f9a:	b087      	sub	sp, #28
    3f9c:	af00      	add	r7, sp, #0
    #if defined configUSE_EDF_SCHEDULING || defined configUSE_LSF_SCHEDULING
    portBASE_TYPE xLen, i;
    tskTCB * pxNextTask;
    #endif

	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    3f9e:	f240 6310 	movw	r3, #1552	; 0x610
    3fa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3fa6:	681b      	ldr	r3, [r3, #0]
    3fa8:	2b00      	cmp	r3, #0
    3faa:	d006      	beq.n	3fba <vTaskSwitchContext+0x22>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    3fac:	f240 6318 	movw	r3, #1560	; 0x618
    3fb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3fb4:	2201      	movs	r2, #1
    3fb6:	601a      	str	r2, [r3, #0]
    3fb8:	e0b5      	b.n	4126 <vTaskSwitchContext+0x18e>
	}
	else
	{
		traceTASK_SWITCHED_OUT();
    3fba:	f00e fc69 	bl	12890 <myTraceSwitchedOut>
        {
            listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ 0 ] ) );
        }

        #elif defined configUSE_LSF_SCHEDULING
        if( (xLen = listCURRENT_LIST_LENGTH( &pxReadyTasksLists[1] )) > 0 ) 
    3fbe:	f240 23cc 	movw	r3, #716	; 0x2cc
    3fc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3fc6:	6a1b      	ldr	r3, [r3, #32]
    3fc8:	613b      	str	r3, [r7, #16]
    3fca:	693b      	ldr	r3, [r7, #16]
    3fcc:	2b00      	cmp	r3, #0
    3fce:	f340 808b 	ble.w	40e8 <vTaskSwitchContext+0x150>
        {
            vPrintString(" the Length of ready list is: ");
    3fd2:	f643 20a4 	movw	r0, #15012	; 0x3aa4
    3fd6:	f2c0 0001 	movt	r0, #1
    3fda:	f00e fa97 	bl	1250c <vPrintString>
            vPrintNumber( xLen );
    3fde:	6938      	ldr	r0, [r7, #16]
    3fe0:	f00e faae 	bl	12540 <vPrintNumber>
            // if current task dosen't belong to the ready list, then don't need update remain execution time of current task 
            if( pxCurrentTCB->xGenericListItem.pvContainer == &pxReadyTasksLists[1])
    3fe4:	f240 23c8 	movw	r3, #712	; 0x2c8
    3fe8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3fec:	681b      	ldr	r3, [r3, #0]
    3fee:	6a1a      	ldr	r2, [r3, #32]
    3ff0:	4b4e      	ldr	r3, [pc, #312]	; (412c <vTaskSwitchContext+0x194>)
    3ff2:	429a      	cmp	r2, r3
    3ff4:	d114      	bne.n	4020 <vTaskSwitchContext+0x88>
            {
                // update the remain time of current task
                pxCurrentTCB->xGenericListItem.xRemainTime -= (xTickCount - pxCurrentTCB->xGenericListItem.xLastStartTime);
    3ff6:	f240 23c8 	movw	r3, #712	; 0x2c8
    3ffa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ffe:	681a      	ldr	r2, [r3, #0]
    4000:	68d1      	ldr	r1, [r2, #12]
    4002:	f240 23c8 	movw	r3, #712	; 0x2c8
    4006:	f2c2 0300 	movt	r3, #8192	; 0x2000
    400a:	681b      	ldr	r3, [r3, #0]
    400c:	6918      	ldr	r0, [r3, #16]
    400e:	f240 6300 	movw	r3, #1536	; 0x600
    4012:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4016:	681b      	ldr	r3, [r3, #0]
    4018:	1ac3      	subs	r3, r0, r3
    401a:	440b      	add	r3, r1
    401c:	60d3      	str	r3, [r2, #12]
    401e:	e005      	b.n	402c <vTaskSwitchContext+0x94>
            }
            else
            {
                vPrintString(" current task is idle \n\r");
    4020:	f643 20c4 	movw	r0, #15044	; 0x3ac4
    4024:	f2c0 0001 	movt	r0, #1
    4028:	f00e fa70 	bl	1250c <vPrintString>
            }

            listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[1] ) );
    402c:	4b3f      	ldr	r3, [pc, #252]	; (412c <vTaskSwitchContext+0x194>)
    402e:	60fb      	str	r3, [r7, #12]
    4030:	68fb      	ldr	r3, [r7, #12]
    4032:	685b      	ldr	r3, [r3, #4]
    4034:	691a      	ldr	r2, [r3, #16]
    4036:	68fb      	ldr	r3, [r7, #12]
    4038:	605a      	str	r2, [r3, #4]
    403a:	68fb      	ldr	r3, [r7, #12]
    403c:	685a      	ldr	r2, [r3, #4]
    403e:	68fb      	ldr	r3, [r7, #12]
    4040:	3308      	adds	r3, #8
    4042:	429a      	cmp	r2, r3
    4044:	d104      	bne.n	4050 <vTaskSwitchContext+0xb8>
    4046:	68fb      	ldr	r3, [r7, #12]
    4048:	685b      	ldr	r3, [r3, #4]
    404a:	691a      	ldr	r2, [r3, #16]
    404c:	68fb      	ldr	r3, [r7, #12]
    404e:	605a      	str	r2, [r3, #4]
    4050:	68fb      	ldr	r3, [r7, #12]
    4052:	685b      	ldr	r3, [r3, #4]
    4054:	699a      	ldr	r2, [r3, #24]
    4056:	f240 23c8 	movw	r3, #712	; 0x2c8
    405a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    405e:	601a      	str	r2, [r3, #0]
            for( i = 0; i< xLen ; ++i )
    4060:	2300      	movs	r3, #0
    4062:	617b      	str	r3, [r7, #20]
    4064:	e030      	b.n	40c8 <vTaskSwitchContext+0x130>
            {
                // find the next one after current TCB
                listGET_OWNER_OF_NEXT_ENTRY( pxNextTask, &( pxReadyTasksLists[1] ) );
    4066:	4b31      	ldr	r3, [pc, #196]	; (412c <vTaskSwitchContext+0x194>)
    4068:	60bb      	str	r3, [r7, #8]
    406a:	68bb      	ldr	r3, [r7, #8]
    406c:	685b      	ldr	r3, [r3, #4]
    406e:	691a      	ldr	r2, [r3, #16]
    4070:	68bb      	ldr	r3, [r7, #8]
    4072:	605a      	str	r2, [r3, #4]
    4074:	68bb      	ldr	r3, [r7, #8]
    4076:	685a      	ldr	r2, [r3, #4]
    4078:	68bb      	ldr	r3, [r7, #8]
    407a:	3308      	adds	r3, #8
    407c:	429a      	cmp	r2, r3
    407e:	d104      	bne.n	408a <vTaskSwitchContext+0xf2>
    4080:	68bb      	ldr	r3, [r7, #8]
    4082:	685b      	ldr	r3, [r3, #4]
    4084:	691a      	ldr	r2, [r3, #16]
    4086:	68bb      	ldr	r3, [r7, #8]
    4088:	605a      	str	r2, [r3, #4]
    408a:	68bb      	ldr	r3, [r7, #8]
    408c:	685b      	ldr	r3, [r3, #4]
    408e:	699b      	ldr	r3, [r3, #24]
    4090:	607b      	str	r3, [r7, #4]
                if( xGetTaskRemainTime( &pxCurrentTCB->xGenericListItem ) >
    4092:	f240 23c8 	movw	r3, #712	; 0x2c8
    4096:	f2c2 0300 	movt	r3, #8192	; 0x2000
    409a:	681b      	ldr	r3, [r3, #0]
    409c:	3304      	adds	r3, #4
    409e:	4618      	mov	r0, r3
    40a0:	f7ff f95a 	bl	3358 <xGetTaskRemainTime>
    40a4:	4604      	mov	r4, r0
                   xGetTaskRemainTime( &pxNextTask->xGenericListItem ) )
    40a6:	687b      	ldr	r3, [r7, #4]
    40a8:	3304      	adds	r3, #4
    40aa:	4618      	mov	r0, r3
    40ac:	f7ff f954 	bl	3358 <xGetTaskRemainTime>
    40b0:	4603      	mov	r3, r0
            listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[1] ) );
            for( i = 0; i< xLen ; ++i )
            {
                // find the next one after current TCB
                listGET_OWNER_OF_NEXT_ENTRY( pxNextTask, &( pxReadyTasksLists[1] ) );
                if( xGetTaskRemainTime( &pxCurrentTCB->xGenericListItem ) >
    40b2:	429c      	cmp	r4, r3
    40b4:	d905      	bls.n	40c2 <vTaskSwitchContext+0x12a>
                   xGetTaskRemainTime( &pxNextTask->xGenericListItem ) )
                {
                    pxCurrentTCB = pxNextTask;
    40b6:	f240 23c8 	movw	r3, #712	; 0x2c8
    40ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    40be:	687a      	ldr	r2, [r7, #4]
    40c0:	601a      	str	r2, [r3, #0]
            {
                vPrintString(" current task is idle \n\r");
            }

            listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[1] ) );
            for( i = 0; i< xLen ; ++i )
    40c2:	697b      	ldr	r3, [r7, #20]
    40c4:	3301      	adds	r3, #1
    40c6:	617b      	str	r3, [r7, #20]
    40c8:	697a      	ldr	r2, [r7, #20]
    40ca:	693b      	ldr	r3, [r7, #16]
    40cc:	429a      	cmp	r2, r3
    40ce:	dbca      	blt.n	4066 <vTaskSwitchContext+0xce>
                {
                    pxCurrentTCB = pxNextTask;
                }
            }
            // update the xLastStartTime of pxCurrentTCB;
            pxCurrentTCB->xGenericListItem.xLastStartTime = xTickCount;
    40d0:	f240 23c8 	movw	r3, #712	; 0x2c8
    40d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    40d8:	681a      	ldr	r2, [r3, #0]
    40da:	f240 6300 	movw	r3, #1536	; 0x600
    40de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    40e2:	681b      	ldr	r3, [r3, #0]
    40e4:	6113      	str	r3, [r2, #16]
    40e6:	e01c      	b.n	4122 <vTaskSwitchContext+0x18a>
        }
        else
        {
            listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[0] ) );
    40e8:	f240 23cc 	movw	r3, #716	; 0x2cc
    40ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    40f0:	603b      	str	r3, [r7, #0]
    40f2:	683b      	ldr	r3, [r7, #0]
    40f4:	685b      	ldr	r3, [r3, #4]
    40f6:	691a      	ldr	r2, [r3, #16]
    40f8:	683b      	ldr	r3, [r7, #0]
    40fa:	605a      	str	r2, [r3, #4]
    40fc:	683b      	ldr	r3, [r7, #0]
    40fe:	685a      	ldr	r2, [r3, #4]
    4100:	683b      	ldr	r3, [r7, #0]
    4102:	3308      	adds	r3, #8
    4104:	429a      	cmp	r2, r3
    4106:	d104      	bne.n	4112 <vTaskSwitchContext+0x17a>
    4108:	683b      	ldr	r3, [r7, #0]
    410a:	685b      	ldr	r3, [r3, #4]
    410c:	691a      	ldr	r2, [r3, #16]
    410e:	683b      	ldr	r3, [r7, #0]
    4110:	605a      	str	r2, [r3, #4]
    4112:	683b      	ldr	r3, [r7, #0]
    4114:	685b      	ldr	r3, [r3, #4]
    4116:	699a      	ldr	r2, [r3, #24]
    4118:	f240 23c8 	movw	r3, #712	; 0x2c8
    411c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4120:	601a      	str	r2, [r3, #0]
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );

        #endif
	
		traceTASK_SWITCHED_IN();
    4122:	f00e fbaf 	bl	12884 <myTraceSwitchedIn>
	}
}
    4126:	371c      	adds	r7, #28
    4128:	46bd      	mov	sp, r7
    412a:	bd90      	pop	{r4, r7, pc}
    412c:	200002ec 	.word	0x200002ec

00004130 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    4130:	b580      	push	{r7, lr}
    4132:	b084      	sub	sp, #16
    4134:	af00      	add	r7, sp, #0
    4136:	6078      	str	r0, [r7, #4]
    4138:	6039      	str	r1, [r7, #0]
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    413a:	f240 23c8 	movw	r3, #712	; 0x2c8
    413e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4142:	681b      	ldr	r3, [r3, #0]
    4144:	3324      	adds	r3, #36	; 0x24
    4146:	6878      	ldr	r0, [r7, #4]
    4148:	4619      	mov	r1, r3
    414a:	f7fe fc21 	bl	2990 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    414e:	f240 23c8 	movw	r3, #712	; 0x2c8
    4152:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4156:	681b      	ldr	r3, [r3, #0]
    4158:	3304      	adds	r3, #4
    415a:	4618      	mov	r0, r3
    415c:	f7fe fc50 	bl	2a00 <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    4160:	683b      	ldr	r3, [r7, #0]
    4162:	f1b3 3fff 	cmp.w	r3, #4294967295
    4166:	d10d      	bne.n	4184 <vTaskPlaceOnEventList+0x54>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4168:	f240 23c8 	movw	r3, #712	; 0x2c8
    416c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4170:	681b      	ldr	r3, [r3, #0]
    4172:	3304      	adds	r3, #4
    4174:	f240 50d8 	movw	r0, #1496	; 0x5d8
    4178:	f2c2 0000 	movt	r0, #8192	; 0x2000
    417c:	4619      	mov	r1, r3
    417e:	f7fe fbdf 	bl	2940 <vListInsertEnd>
    4182:	e00a      	b.n	419a <vTaskPlaceOnEventList+0x6a>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    4184:	f240 6300 	movw	r3, #1536	; 0x600
    4188:	f2c2 0300 	movt	r3, #8192	; 0x2000
    418c:	681a      	ldr	r2, [r3, #0]
    418e:	683b      	ldr	r3, [r7, #0]
    4190:	4413      	add	r3, r2
    4192:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    4194:	68f8      	ldr	r0, [r7, #12]
    4196:	f000 f99b 	bl	44d0 <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
    419a:	3710      	adds	r7, #16
    419c:	46bd      	mov	sp, r7
    419e:	bd80      	pop	{r7, pc}

000041a0 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    41a0:	b580      	push	{r7, lr}
    41a2:	b084      	sub	sp, #16
    41a4:	af00      	add	r7, sp, #0
    41a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    41a8:	687b      	ldr	r3, [r7, #4]
    41aa:	699b      	ldr	r3, [r3, #24]
    41ac:	699b      	ldr	r3, [r3, #24]
    41ae:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    41b0:	68bb      	ldr	r3, [r7, #8]
    41b2:	3324      	adds	r3, #36	; 0x24
    41b4:	4618      	mov	r0, r3
    41b6:	f7fe fc23 	bl	2a00 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    41ba:	f240 6310 	movw	r3, #1552	; 0x610
    41be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    41c2:	681b      	ldr	r3, [r3, #0]
    41c4:	2b00      	cmp	r3, #0
    41c6:	d123      	bne.n	4210 <xTaskRemoveFromEventList+0x70>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    41c8:	68bb      	ldr	r3, [r7, #8]
    41ca:	3304      	adds	r3, #4
    41cc:	4618      	mov	r0, r3
    41ce:	f7fe fc17 	bl	2a00 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    41d2:	68bb      	ldr	r3, [r7, #8]
    41d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    41d6:	f240 6308 	movw	r3, #1544	; 0x608
    41da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    41de:	681b      	ldr	r3, [r3, #0]
    41e0:	429a      	cmp	r2, r3
    41e2:	d906      	bls.n	41f2 <xTaskRemoveFromEventList+0x52>
    41e4:	68bb      	ldr	r3, [r7, #8]
    41e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    41e8:	f240 6308 	movw	r3, #1544	; 0x608
    41ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    41f0:	601a      	str	r2, [r3, #0]
    41f2:	68bb      	ldr	r3, [r7, #8]
    41f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    41f6:	015a      	lsls	r2, r3, #5
    41f8:	f240 23cc 	movw	r3, #716	; 0x2cc
    41fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4200:	441a      	add	r2, r3
    4202:	68bb      	ldr	r3, [r7, #8]
    4204:	3304      	adds	r3, #4
    4206:	4610      	mov	r0, r2
    4208:	4619      	mov	r1, r3
    420a:	f7fe fb99 	bl	2940 <vListInsertEnd>
    420e:	e008      	b.n	4222 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    4210:	68bb      	ldr	r3, [r7, #8]
    4212:	3324      	adds	r3, #36	; 0x24
    4214:	f240 5094 	movw	r0, #1428	; 0x594
    4218:	f2c2 0000 	movt	r0, #8192	; 0x2000
    421c:	4619      	mov	r1, r3
    421e:	f7fe fb8f 	bl	2940 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    4222:	68bb      	ldr	r3, [r7, #8]
    4224:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    4226:	f240 23c8 	movw	r3, #712	; 0x2c8
    422a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    422e:	681b      	ldr	r3, [r3, #0]
    4230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4232:	429a      	cmp	r2, r3
    4234:	d302      	bcc.n	423c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    4236:	2301      	movs	r3, #1
    4238:	60fb      	str	r3, [r7, #12]
    423a:	e001      	b.n	4240 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
    423c:	2300      	movs	r3, #0
    423e:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    4240:	68fb      	ldr	r3, [r7, #12]
}
    4242:	4618      	mov	r0, r3
    4244:	3710      	adds	r7, #16
    4246:	46bd      	mov	sp, r7
    4248:	bd80      	pop	{r7, pc}
    424a:	bf00      	nop

0000424c <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    424c:	b480      	push	{r7}
    424e:	b083      	sub	sp, #12
    4250:	af00      	add	r7, sp, #0
    4252:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    4254:	f240 631c 	movw	r3, #1564	; 0x61c
    4258:	f2c2 0300 	movt	r3, #8192	; 0x2000
    425c:	681a      	ldr	r2, [r3, #0]
    425e:	687b      	ldr	r3, [r7, #4]
    4260:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    4262:	f240 6300 	movw	r3, #1536	; 0x600
    4266:	f2c2 0300 	movt	r3, #8192	; 0x2000
    426a:	681a      	ldr	r2, [r3, #0]
    426c:	687b      	ldr	r3, [r7, #4]
    426e:	605a      	str	r2, [r3, #4]
}
    4270:	370c      	adds	r7, #12
    4272:	46bd      	mov	sp, r7
    4274:	f85d 7b04 	ldr.w	r7, [sp], #4
    4278:	4770      	bx	lr
    427a:	bf00      	nop

0000427c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    427c:	b580      	push	{r7, lr}
    427e:	b084      	sub	sp, #16
    4280:	af00      	add	r7, sp, #0
    4282:	6078      	str	r0, [r7, #4]
    4284:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    4286:	f000 fad5 	bl	4834 <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    428a:	683b      	ldr	r3, [r7, #0]
    428c:	681b      	ldr	r3, [r3, #0]
    428e:	f1b3 3fff 	cmp.w	r3, #4294967295
    4292:	d102      	bne.n	429a <xTaskCheckForTimeOut+0x1e>
			{
				xReturn = pdFALSE;
    4294:	2300      	movs	r3, #0
    4296:	60fb      	str	r3, [r7, #12]
    4298:	e035      	b.n	4306 <xTaskCheckForTimeOut+0x8a>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    429a:	687b      	ldr	r3, [r7, #4]
    429c:	681a      	ldr	r2, [r3, #0]
    429e:	f240 631c 	movw	r3, #1564	; 0x61c
    42a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    42a6:	681b      	ldr	r3, [r3, #0]
    42a8:	429a      	cmp	r2, r3
    42aa:	d00b      	beq.n	42c4 <xTaskCheckForTimeOut+0x48>
    42ac:	687b      	ldr	r3, [r7, #4]
    42ae:	685a      	ldr	r2, [r3, #4]
    42b0:	f240 6300 	movw	r3, #1536	; 0x600
    42b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    42b8:	681b      	ldr	r3, [r3, #0]
    42ba:	429a      	cmp	r2, r3
    42bc:	d802      	bhi.n	42c4 <xTaskCheckForTimeOut+0x48>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    42be:	2301      	movs	r3, #1
    42c0:	60fb      	str	r3, [r7, #12]
    42c2:	e020      	b.n	4306 <xTaskCheckForTimeOut+0x8a>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    42c4:	f240 6300 	movw	r3, #1536	; 0x600
    42c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    42cc:	681a      	ldr	r2, [r3, #0]
    42ce:	687b      	ldr	r3, [r7, #4]
    42d0:	685b      	ldr	r3, [r3, #4]
    42d2:	1ad2      	subs	r2, r2, r3
    42d4:	683b      	ldr	r3, [r7, #0]
    42d6:	681b      	ldr	r3, [r3, #0]
    42d8:	429a      	cmp	r2, r3
    42da:	d212      	bcs.n	4302 <xTaskCheckForTimeOut+0x86>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    42dc:	683b      	ldr	r3, [r7, #0]
    42de:	681a      	ldr	r2, [r3, #0]
    42e0:	687b      	ldr	r3, [r7, #4]
    42e2:	6859      	ldr	r1, [r3, #4]
    42e4:	f240 6300 	movw	r3, #1536	; 0x600
    42e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    42ec:	681b      	ldr	r3, [r3, #0]
    42ee:	1acb      	subs	r3, r1, r3
    42f0:	441a      	add	r2, r3
    42f2:	683b      	ldr	r3, [r7, #0]
    42f4:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
    42f6:	6878      	ldr	r0, [r7, #4]
    42f8:	f7ff ffa8 	bl	424c <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    42fc:	2300      	movs	r3, #0
    42fe:	60fb      	str	r3, [r7, #12]
    4300:	e001      	b.n	4306 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			xReturn = pdTRUE;
    4302:	2301      	movs	r3, #1
    4304:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    4306:	f000 faab 	bl	4860 <vPortExitCritical>

	return xReturn;
    430a:	68fb      	ldr	r3, [r7, #12]
}
    430c:	4618      	mov	r0, r3
    430e:	3710      	adds	r7, #16
    4310:	46bd      	mov	sp, r7
    4312:	bd80      	pop	{r7, pc}

00004314 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    4314:	b480      	push	{r7}
    4316:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
    4318:	f240 6318 	movw	r3, #1560	; 0x618
    431c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4320:	2201      	movs	r2, #1
    4322:	601a      	str	r2, [r3, #0]
}
    4324:	46bd      	mov	sp, r7
    4326:	f85d 7b04 	ldr.w	r7, [sp], #4
    432a:	4770      	bx	lr

0000432c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    432c:	b580      	push	{r7, lr}
    432e:	b082      	sub	sp, #8
    4330:	af00      	add	r7, sp, #0
    4332:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    4334:	f000 f884 	bl	4440 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
    4338:	f000 fa6e 	bl	4818 <vPortYieldFromISR>
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
    433c:	e7fa      	b.n	4334 <prvIdleTask+0x8>
    433e:	bf00      	nop

00004340 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    4340:	b580      	push	{r7, lr}
    4342:	b084      	sub	sp, #16
    4344:	af00      	add	r7, sp, #0
    4346:	60f8      	str	r0, [r7, #12]
    4348:	60b9      	str	r1, [r7, #8]
    434a:	607a      	str	r2, [r7, #4]
    434c:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    434e:	68fb      	ldr	r3, [r7, #12]
    4350:	334c      	adds	r3, #76	; 0x4c
    4352:	4618      	mov	r0, r3
    4354:	68b9      	ldr	r1, [r7, #8]
    4356:	2210      	movs	r2, #16
    4358:	f00f fb2e 	bl	139b8 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    435c:	68fb      	ldr	r3, [r7, #12]
    435e:	2200      	movs	r2, #0
    4360:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    4364:	687b      	ldr	r3, [r7, #4]
    4366:	2b13      	cmp	r3, #19
    4368:	d901      	bls.n	436e <prvInitialiseTCBVariables+0x2e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    436a:	2313      	movs	r3, #19
    436c:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
    436e:	68fb      	ldr	r3, [r7, #12]
    4370:	687a      	ldr	r2, [r7, #4]
    4372:	645a      	str	r2, [r3, #68]	; 0x44
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    4374:	68fb      	ldr	r3, [r7, #12]
    4376:	687a      	ldr	r2, [r7, #4]
    4378:	65da      	str	r2, [r3, #92]	; 0x5c
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    437a:	68fb      	ldr	r3, [r7, #12]
    437c:	3304      	adds	r3, #4
    437e:	4618      	mov	r0, r3
    4380:	f7fe fad2 	bl	2928 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    4384:	68fb      	ldr	r3, [r7, #12]
    4386:	3324      	adds	r3, #36	; 0x24
    4388:	4618      	mov	r0, r3
    438a:	f7fe facd 	bl	2928 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    438e:	68fb      	ldr	r3, [r7, #12]
    4390:	68fa      	ldr	r2, [r7, #12]
    4392:	61da      	str	r2, [r3, #28]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    4394:	687b      	ldr	r3, [r7, #4]
    4396:	f1c3 0214 	rsb	r2, r3, #20
    439a:	68fb      	ldr	r3, [r7, #12]
    439c:	625a      	str	r2, [r3, #36]	; 0x24
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    439e:	68fb      	ldr	r3, [r7, #12]
    43a0:	68fa      	ldr	r2, [r7, #12]
    43a2:	63da      	str	r2, [r3, #60]	; 0x3c
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    43a4:	3710      	adds	r7, #16
    43a6:	46bd      	mov	sp, r7
    43a8:	bd80      	pop	{r7, pc}
    43aa:	bf00      	nop

000043ac <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    43ac:	b580      	push	{r7, lr}
    43ae:	b082      	sub	sp, #8
    43b0:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    43b2:	2300      	movs	r3, #0
    43b4:	607b      	str	r3, [r7, #4]
    43b6:	e00c      	b.n	43d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    43b8:	687b      	ldr	r3, [r7, #4]
    43ba:	015a      	lsls	r2, r3, #5
    43bc:	f240 23cc 	movw	r3, #716	; 0x2cc
    43c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    43c4:	4413      	add	r3, r2
    43c6:	4618      	mov	r0, r3
    43c8:	f7fe fa8e 	bl	28e8 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    43cc:	687b      	ldr	r3, [r7, #4]
    43ce:	3301      	adds	r3, #1
    43d0:	607b      	str	r3, [r7, #4]
    43d2:	687b      	ldr	r3, [r7, #4]
    43d4:	2b13      	cmp	r3, #19
    43d6:	d9ef      	bls.n	43b8 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    43d8:	f240 504c 	movw	r0, #1356	; 0x54c
    43dc:	f2c2 0000 	movt	r0, #8192	; 0x2000
    43e0:	f7fe fa82 	bl	28e8 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    43e4:	f240 506c 	movw	r0, #1388	; 0x56c
    43e8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    43ec:	f7fe fa7c 	bl	28e8 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    43f0:	f240 5094 	movw	r0, #1428	; 0x594
    43f4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    43f8:	f7fe fa76 	bl	28e8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    43fc:	f240 50b4 	movw	r0, #1460	; 0x5b4
    4400:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4404:	f7fe fa70 	bl	28e8 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
    4408:	f240 50d8 	movw	r0, #1496	; 0x5d8
    440c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4410:	f7fe fa6a 	bl	28e8 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    4414:	f240 538c 	movw	r3, #1420	; 0x58c
    4418:	f2c2 0300 	movt	r3, #8192	; 0x2000
    441c:	f240 524c 	movw	r2, #1356	; 0x54c
    4420:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4424:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    4426:	f240 5390 	movw	r3, #1424	; 0x590
    442a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    442e:	f240 526c 	movw	r2, #1388	; 0x56c
    4432:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4436:	601a      	str	r2, [r3, #0]
}
    4438:	3708      	adds	r7, #8
    443a:	46bd      	mov	sp, r7
    443c:	bd80      	pop	{r7, pc}
    443e:	bf00      	nop

00004440 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    4440:	b580      	push	{r7, lr}
    4442:	b082      	sub	sp, #8
    4444:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    4446:	f240 53d4 	movw	r3, #1492	; 0x5d4
    444a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    444e:	681b      	ldr	r3, [r3, #0]
    4450:	2b00      	cmp	r3, #0
    4452:	d03a      	beq.n	44ca <prvCheckTasksWaitingTermination+0x8a>
		{
			vTaskSuspendAll();
    4454:	f7ff fbb4 	bl	3bc0 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    4458:	f240 53b4 	movw	r3, #1460	; 0x5b4
    445c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4460:	681b      	ldr	r3, [r3, #0]
    4462:	2b00      	cmp	r3, #0
    4464:	bf14      	ite	ne
    4466:	2300      	movne	r3, #0
    4468:	2301      	moveq	r3, #1
    446a:	b2db      	uxtb	r3, r3
    446c:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
    446e:	f7ff fbb9 	bl	3be4 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    4472:	687b      	ldr	r3, [r7, #4]
    4474:	2b00      	cmp	r3, #0
    4476:	d128      	bne.n	44ca <prvCheckTasksWaitingTermination+0x8a>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    4478:	f000 f9dc 	bl	4834 <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    447c:	f240 53b4 	movw	r3, #1460	; 0x5b4
    4480:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4484:	699b      	ldr	r3, [r3, #24]
    4486:	699b      	ldr	r3, [r3, #24]
    4488:	603b      	str	r3, [r7, #0]
					vListRemove( &( pxTCB->xGenericListItem ) );
    448a:	683b      	ldr	r3, [r7, #0]
    448c:	3304      	adds	r3, #4
    448e:	4618      	mov	r0, r3
    4490:	f7fe fab6 	bl	2a00 <vListRemove>
					--uxCurrentNumberOfTasks;
    4494:	f240 53fc 	movw	r3, #1532	; 0x5fc
    4498:	f2c2 0300 	movt	r3, #8192	; 0x2000
    449c:	681b      	ldr	r3, [r3, #0]
    449e:	1e5a      	subs	r2, r3, #1
    44a0:	f240 53fc 	movw	r3, #1532	; 0x5fc
    44a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    44a8:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
    44aa:	f240 53d4 	movw	r3, #1492	; 0x5d4
    44ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    44b2:	681b      	ldr	r3, [r3, #0]
    44b4:	1e5a      	subs	r2, r3, #1
    44b6:	f240 53d4 	movw	r3, #1492	; 0x5d4
    44ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    44be:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
    44c0:	f000 f9ce 	bl	4860 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
    44c4:	6838      	ldr	r0, [r7, #0]
    44c6:	f000 f879 	bl	45bc <prvDeleteTCB>
			}
		}
	}
	#endif
}
    44ca:	3708      	adds	r7, #8
    44cc:	46bd      	mov	sp, r7
    44ce:	bd80      	pop	{r7, pc}

000044d0 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    44d0:	b580      	push	{r7, lr}
    44d2:	b082      	sub	sp, #8
    44d4:	af00      	add	r7, sp, #0
    44d6:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    44d8:	f240 23c8 	movw	r3, #712	; 0x2c8
    44dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    44e0:	681b      	ldr	r3, [r3, #0]
    44e2:	687a      	ldr	r2, [r7, #4]
    44e4:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
    44e6:	f240 6300 	movw	r3, #1536	; 0x600
    44ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    44ee:	681b      	ldr	r3, [r3, #0]
    44f0:	687a      	ldr	r2, [r7, #4]
    44f2:	429a      	cmp	r2, r3
    44f4:	d20f      	bcs.n	4516 <prvAddCurrentTaskToDelayedList+0x46>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    44f6:	f240 5390 	movw	r3, #1424	; 0x590
    44fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    44fe:	681a      	ldr	r2, [r3, #0]
    4500:	f240 23c8 	movw	r3, #712	; 0x2c8
    4504:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4508:	681b      	ldr	r3, [r3, #0]
    450a:	3304      	adds	r3, #4
    450c:	4610      	mov	r0, r2
    450e:	4619      	mov	r1, r3
    4510:	f7fe fa3e 	bl	2990 <vListInsert>
    4514:	e01c      	b.n	4550 <prvAddCurrentTaskToDelayedList+0x80>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4516:	f240 538c 	movw	r3, #1420	; 0x58c
    451a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    451e:	681a      	ldr	r2, [r3, #0]
    4520:	f240 23c8 	movw	r3, #712	; 0x2c8
    4524:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4528:	681b      	ldr	r3, [r3, #0]
    452a:	3304      	adds	r3, #4
    452c:	4610      	mov	r0, r2
    452e:	4619      	mov	r1, r3
    4530:	f7fe fa2e 	bl	2990 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    4534:	f240 132c 	movw	r3, #300	; 0x12c
    4538:	f2c2 0300 	movt	r3, #8192	; 0x2000
    453c:	681b      	ldr	r3, [r3, #0]
    453e:	687a      	ldr	r2, [r7, #4]
    4540:	429a      	cmp	r2, r3
    4542:	d205      	bcs.n	4550 <prvAddCurrentTaskToDelayedList+0x80>
		{
			xNextTaskUnblockTime = xTimeToWake;
    4544:	f240 132c 	movw	r3, #300	; 0x12c
    4548:	f2c2 0300 	movt	r3, #8192	; 0x2000
    454c:	687a      	ldr	r2, [r7, #4]
    454e:	601a      	str	r2, [r3, #0]
		}
	}
}
    4550:	3708      	adds	r7, #8
    4552:	46bd      	mov	sp, r7
    4554:	bd80      	pop	{r7, pc}
    4556:	bf00      	nop

00004558 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    4558:	b580      	push	{r7, lr}
    455a:	b084      	sub	sp, #16
    455c:	af00      	add	r7, sp, #0
    455e:	4603      	mov	r3, r0
    4560:	6039      	str	r1, [r7, #0]
    4562:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    4564:	2060      	movs	r0, #96	; 0x60
    4566:	f000 f9dd 	bl	4924 <pvPortMalloc>
    456a:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
    456c:	68fb      	ldr	r3, [r7, #12]
    456e:	2b00      	cmp	r3, #0
    4570:	d01f      	beq.n	45b2 <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    4572:	683b      	ldr	r3, [r7, #0]
    4574:	2b00      	cmp	r3, #0
    4576:	d106      	bne.n	4586 <prvAllocateTCBAndStack+0x2e>
    4578:	88fb      	ldrh	r3, [r7, #6]
    457a:	009b      	lsls	r3, r3, #2
    457c:	4618      	mov	r0, r3
    457e:	f000 f9d1 	bl	4924 <pvPortMalloc>
    4582:	4603      	mov	r3, r0
    4584:	e000      	b.n	4588 <prvAllocateTCBAndStack+0x30>
    4586:	683b      	ldr	r3, [r7, #0]
    4588:	68fa      	ldr	r2, [r7, #12]
    458a:	6493      	str	r3, [r2, #72]	; 0x48

		if( pxNewTCB->pxStack == NULL )
    458c:	68fb      	ldr	r3, [r7, #12]
    458e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4590:	2b00      	cmp	r3, #0
    4592:	d105      	bne.n	45a0 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    4594:	68f8      	ldr	r0, [r7, #12]
    4596:	f000 fa89 	bl	4aac <vPortFree>
			pxNewTCB = NULL;
    459a:	2300      	movs	r3, #0
    459c:	60fb      	str	r3, [r7, #12]
    459e:	e008      	b.n	45b2 <prvAllocateTCBAndStack+0x5a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    45a0:	68fb      	ldr	r3, [r7, #12]
    45a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    45a4:	88fb      	ldrh	r3, [r7, #6]
    45a6:	009b      	lsls	r3, r3, #2
    45a8:	4610      	mov	r0, r2
    45aa:	21a5      	movs	r1, #165	; 0xa5
    45ac:	461a      	mov	r2, r3
    45ae:	f00f f9b3 	bl	13918 <memset>
		}
	}

	return pxNewTCB;
    45b2:	68fb      	ldr	r3, [r7, #12]
}
    45b4:	4618      	mov	r0, r3
    45b6:	3710      	adds	r7, #16
    45b8:	46bd      	mov	sp, r7
    45ba:	bd80      	pop	{r7, pc}

000045bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
    45bc:	b580      	push	{r7, lr}
    45be:	b082      	sub	sp, #8
    45c0:	af00      	add	r7, sp, #0
    45c2:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    45c4:	687b      	ldr	r3, [r7, #4]
    45c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    45c8:	4618      	mov	r0, r3
    45ca:	f000 fa6f 	bl	4aac <vPortFree>
		vPortFree( pxTCB );
    45ce:	6878      	ldr	r0, [r7, #4]
    45d0:	f000 fa6c 	bl	4aac <vPortFree>
	}
    45d4:	3708      	adds	r7, #8
    45d6:	46bd      	mov	sp, r7
    45d8:	bd80      	pop	{r7, pc}
    45da:	bf00      	nop

000045dc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
    45dc:	b480      	push	{r7}
    45de:	b083      	sub	sp, #12
    45e0:	af00      	add	r7, sp, #0
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    45e2:	f240 23c8 	movw	r3, #712	; 0x2c8
    45e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    45ea:	681b      	ldr	r3, [r3, #0]
    45ec:	607b      	str	r3, [r7, #4]

		return xReturn;
    45ee:	687b      	ldr	r3, [r7, #4]
	}
    45f0:	4618      	mov	r0, r3
    45f2:	370c      	adds	r7, #12
    45f4:	46bd      	mov	sp, r7
    45f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    45fa:	4770      	bx	lr

000045fc <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    45fc:	b580      	push	{r7, lr}
    45fe:	b084      	sub	sp, #16
    4600:	af00      	add	r7, sp, #0
    4602:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    4604:	687b      	ldr	r3, [r7, #4]
    4606:	60fb      	str	r3, [r7, #12]

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    4608:	68fb      	ldr	r3, [r7, #12]
    460a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    460c:	f240 23c8 	movw	r3, #712	; 0x2c8
    4610:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4614:	681b      	ldr	r3, [r3, #0]
    4616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4618:	429a      	cmp	r2, r3
    461a:	d249      	bcs.n	46b0 <vTaskPriorityInherit+0xb4>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    461c:	f240 23c8 	movw	r3, #712	; 0x2c8
    4620:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4624:	681b      	ldr	r3, [r3, #0]
    4626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4628:	f1c3 0214 	rsb	r2, r3, #20
    462c:	68fb      	ldr	r3, [r7, #12]
    462e:	625a      	str	r2, [r3, #36]	; 0x24

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    4630:	68fb      	ldr	r3, [r7, #12]
    4632:	6a1a      	ldr	r2, [r3, #32]
    4634:	68fb      	ldr	r3, [r7, #12]
    4636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4638:	0159      	lsls	r1, r3, #5
    463a:	f240 23cc 	movw	r3, #716	; 0x2cc
    463e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4642:	440b      	add	r3, r1
    4644:	429a      	cmp	r2, r3
    4646:	d12b      	bne.n	46a0 <vTaskPriorityInherit+0xa4>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
    4648:	68fb      	ldr	r3, [r7, #12]
    464a:	3304      	adds	r3, #4
    464c:	4618      	mov	r0, r3
    464e:	f7fe f9d7 	bl	2a00 <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    4652:	f240 23c8 	movw	r3, #712	; 0x2c8
    4656:	f2c2 0300 	movt	r3, #8192	; 0x2000
    465a:	681b      	ldr	r3, [r3, #0]
    465c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    465e:	68fb      	ldr	r3, [r7, #12]
    4660:	645a      	str	r2, [r3, #68]	; 0x44
				prvAddTaskToReadyQueue( pxTCB );
    4662:	68fb      	ldr	r3, [r7, #12]
    4664:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    4666:	f240 6308 	movw	r3, #1544	; 0x608
    466a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    466e:	681b      	ldr	r3, [r3, #0]
    4670:	429a      	cmp	r2, r3
    4672:	d906      	bls.n	4682 <vTaskPriorityInherit+0x86>
    4674:	68fb      	ldr	r3, [r7, #12]
    4676:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    4678:	f240 6308 	movw	r3, #1544	; 0x608
    467c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4680:	601a      	str	r2, [r3, #0]
    4682:	68fb      	ldr	r3, [r7, #12]
    4684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4686:	015a      	lsls	r2, r3, #5
    4688:	f240 23cc 	movw	r3, #716	; 0x2cc
    468c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4690:	441a      	add	r2, r3
    4692:	68fb      	ldr	r3, [r7, #12]
    4694:	3304      	adds	r3, #4
    4696:	4610      	mov	r0, r2
    4698:	4619      	mov	r1, r3
    469a:	f7fe f951 	bl	2940 <vListInsertEnd>
    469e:	e007      	b.n	46b0 <vTaskPriorityInherit+0xb4>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    46a0:	f240 23c8 	movw	r3, #712	; 0x2c8
    46a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    46a8:	681b      	ldr	r3, [r3, #0]
    46aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    46ac:	68fb      	ldr	r3, [r7, #12]
    46ae:	645a      	str	r2, [r3, #68]	; 0x44
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
    46b0:	3710      	adds	r7, #16
    46b2:	46bd      	mov	sp, r7
    46b4:	bd80      	pop	{r7, pc}
    46b6:	bf00      	nop

000046b8 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    46b8:	b580      	push	{r7, lr}
    46ba:	b084      	sub	sp, #16
    46bc:	af00      	add	r7, sp, #0
    46be:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    46c0:	687b      	ldr	r3, [r7, #4]
    46c2:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    46c4:	687b      	ldr	r3, [r7, #4]
    46c6:	2b00      	cmp	r3, #0
    46c8:	d032      	beq.n	4730 <vTaskPriorityDisinherit+0x78>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    46ca:	68fb      	ldr	r3, [r7, #12]
    46cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    46ce:	68fb      	ldr	r3, [r7, #12]
    46d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    46d2:	429a      	cmp	r2, r3
    46d4:	d02c      	beq.n	4730 <vTaskPriorityDisinherit+0x78>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
    46d6:	68fb      	ldr	r3, [r7, #12]
    46d8:	3304      	adds	r3, #4
    46da:	4618      	mov	r0, r3
    46dc:	f7fe f990 	bl	2a00 <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    46e0:	68fb      	ldr	r3, [r7, #12]
    46e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    46e4:	68fb      	ldr	r3, [r7, #12]
    46e6:	645a      	str	r2, [r3, #68]	; 0x44
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    46e8:	68fb      	ldr	r3, [r7, #12]
    46ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    46ec:	f1c3 0214 	rsb	r2, r3, #20
    46f0:	68fb      	ldr	r3, [r7, #12]
    46f2:	625a      	str	r2, [r3, #36]	; 0x24
				prvAddTaskToReadyQueue( pxTCB );
    46f4:	68fb      	ldr	r3, [r7, #12]
    46f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    46f8:	f240 6308 	movw	r3, #1544	; 0x608
    46fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4700:	681b      	ldr	r3, [r3, #0]
    4702:	429a      	cmp	r2, r3
    4704:	d906      	bls.n	4714 <vTaskPriorityDisinherit+0x5c>
    4706:	68fb      	ldr	r3, [r7, #12]
    4708:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    470a:	f240 6308 	movw	r3, #1544	; 0x608
    470e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4712:	601a      	str	r2, [r3, #0]
    4714:	68fb      	ldr	r3, [r7, #12]
    4716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4718:	015a      	lsls	r2, r3, #5
    471a:	f240 23cc 	movw	r3, #716	; 0x2cc
    471e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4722:	441a      	add	r2, r3
    4724:	68fb      	ldr	r3, [r7, #12]
    4726:	3304      	adds	r3, #4
    4728:	4610      	mov	r0, r2
    472a:	4619      	mov	r1, r3
    472c:	f7fe f908 	bl	2940 <vListInsertEnd>
			}
		}
	}
    4730:	3710      	adds	r7, #16
    4732:	46bd      	mov	sp, r7
    4734:	bd80      	pop	{r7, pc}
    4736:	bf00      	nop

00004738 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    4738:	b480      	push	{r7}
    473a:	b085      	sub	sp, #20
    473c:	af00      	add	r7, sp, #0
    473e:	60f8      	str	r0, [r7, #12]
    4740:	60b9      	str	r1, [r7, #8]
    4742:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    4744:	68fb      	ldr	r3, [r7, #12]
    4746:	3b04      	subs	r3, #4
    4748:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    474a:	68fb      	ldr	r3, [r7, #12]
    474c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    4750:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    4752:	68fb      	ldr	r3, [r7, #12]
    4754:	3b04      	subs	r3, #4
    4756:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
    4758:	68ba      	ldr	r2, [r7, #8]
    475a:	68fb      	ldr	r3, [r7, #12]
    475c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    475e:	68fb      	ldr	r3, [r7, #12]
    4760:	3b04      	subs	r3, #4
    4762:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
    4764:	68fb      	ldr	r3, [r7, #12]
    4766:	2200      	movs	r2, #0
    4768:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    476a:	68fb      	ldr	r3, [r7, #12]
    476c:	3b14      	subs	r3, #20
    476e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
    4770:	687a      	ldr	r2, [r7, #4]
    4772:	68fb      	ldr	r3, [r7, #12]
    4774:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
    4776:	68fb      	ldr	r3, [r7, #12]
    4778:	3b20      	subs	r3, #32
    477a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    477c:	68fb      	ldr	r3, [r7, #12]
}
    477e:	4618      	mov	r0, r3
    4780:	3714      	adds	r7, #20
    4782:	46bd      	mov	sp, r7
    4784:	f85d 7b04 	ldr.w	r7, [sp], #4
    4788:	4770      	bx	lr
    478a:	bf00      	nop

0000478c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    478c:	4b06      	ldr	r3, [pc, #24]	; (47a8 <pxCurrentTCBConst2>)
    478e:	6819      	ldr	r1, [r3, #0]
    4790:	6808      	ldr	r0, [r1, #0]
    4792:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    4796:	f380 8809 	msr	PSP, r0
    479a:	f04f 0000 	mov.w	r0, #0
    479e:	f380 8811 	msr	BASEPRI, r0
    47a2:	f04e 0e0d 	orr.w	lr, lr, #13
    47a6:	4770      	bx	lr

000047a8 <pxCurrentTCBConst2>:
    47a8:	200002c8 	.word	0x200002c8

000047ac <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
    47ac:	485c      	ldr	r0, [pc, #368]	; (4920 <prvSetupTimerInterrupt+0x28>)
    47ae:	6800      	ldr	r0, [r0, #0]
    47b0:	6800      	ldr	r0, [r0, #0]
    47b2:	f380 8808 	msr	MSP, r0
    47b6:	b662      	cpsie	i
    47b8:	df00      	svc	0
    47ba:	bf00      	nop

000047bc <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
    47bc:	b580      	push	{r7, lr}
    47be:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    47c0:	f64e 5320 	movw	r3, #60704	; 0xed20
    47c4:	f2ce 0300 	movt	r3, #57344	; 0xe000
    47c8:	f64e 5220 	movw	r2, #60704	; 0xed20
    47cc:	f2ce 0200 	movt	r2, #57344	; 0xe000
    47d0:	6812      	ldr	r2, [r2, #0]
    47d2:	f442 02fe 	orr.w	r2, r2, #8323072	; 0x7f0000
    47d6:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    47d8:	f64e 5320 	movw	r3, #60704	; 0xed20
    47dc:	f2ce 0300 	movt	r3, #57344	; 0xe000
    47e0:	f64e 5220 	movw	r2, #60704	; 0xed20
    47e4:	f2ce 0200 	movt	r2, #57344	; 0xe000
    47e8:	6812      	ldr	r2, [r2, #0]
    47ea:	f042 42fe 	orr.w	r2, r2, #2130706432	; 0x7f000000
    47ee:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    47f0:	f000 f882 	bl	48f8 <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    47f4:	f240 1330 	movw	r3, #304	; 0x130
    47f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    47fc:	2200      	movs	r2, #0
    47fe:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
    4800:	f7ff ffd4 	bl	47ac <prvPortStartFirstTask>

	/* Should not get here! */
	return 0;
    4804:	2300      	movs	r3, #0
}
    4806:	4618      	mov	r0, r3
    4808:	bd80      	pop	{r7, pc}
    480a:	bf00      	nop

0000480c <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    480c:	b480      	push	{r7}
    480e:	af00      	add	r7, sp, #0
	/* It is unlikely that the CM3 port will require this function as there
	is nothing to return to.  */
}
    4810:	46bd      	mov	sp, r7
    4812:	f85d 7b04 	ldr.w	r7, [sp], #4
    4816:	4770      	bx	lr

00004818 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
    4818:	b480      	push	{r7}
    481a:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    481c:	f64e 5304 	movw	r3, #60676	; 0xed04
    4820:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4824:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4828:	601a      	str	r2, [r3, #0]
}
    482a:	46bd      	mov	sp, r7
    482c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4830:	4770      	bx	lr
    4832:	bf00      	nop

00004834 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    4834:	b480      	push	{r7}
    4836:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
    4838:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    483c:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
    4840:	f240 1330 	movw	r3, #304	; 0x130
    4844:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4848:	681b      	ldr	r3, [r3, #0]
    484a:	1c5a      	adds	r2, r3, #1
    484c:	f240 1330 	movw	r3, #304	; 0x130
    4850:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4854:	601a      	str	r2, [r3, #0]
}
    4856:	46bd      	mov	sp, r7
    4858:	f85d 7b04 	ldr.w	r7, [sp], #4
    485c:	4770      	bx	lr
    485e:	bf00      	nop

00004860 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    4860:	b480      	push	{r7}
    4862:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
    4864:	f240 1330 	movw	r3, #304	; 0x130
    4868:	f2c2 0300 	movt	r3, #8192	; 0x2000
    486c:	681b      	ldr	r3, [r3, #0]
    486e:	1e5a      	subs	r2, r3, #1
    4870:	f240 1330 	movw	r3, #304	; 0x130
    4874:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4878:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
    487a:	f240 1330 	movw	r3, #304	; 0x130
    487e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4882:	681b      	ldr	r3, [r3, #0]
    4884:	2b00      	cmp	r3, #0
    4886:	d103      	bne.n	4890 <vPortExitCritical+0x30>
	{
		portENABLE_INTERRUPTS();
    4888:	f04f 0000 	mov.w	r0, #0
    488c:	f380 8811 	msr	BASEPRI, r0
	}
}
    4890:	46bd      	mov	sp, r7
    4892:	f85d 7b04 	ldr.w	r7, [sp], #4
    4896:	4770      	bx	lr

00004898 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    4898:	f3ef 8009 	mrs	r0, PSP
    489c:	4b0c      	ldr	r3, [pc, #48]	; (48d0 <pxCurrentTCBConst>)
    489e:	681a      	ldr	r2, [r3, #0]
    48a0:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    48a4:	6010      	str	r0, [r2, #0]
    48a6:	e92d 4008 	stmdb	sp!, {r3, lr}
    48aa:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    48ae:	f380 8811 	msr	BASEPRI, r0
    48b2:	f7ff fb71 	bl	3f98 <vTaskSwitchContext>
    48b6:	f04f 0000 	mov.w	r0, #0
    48ba:	f380 8811 	msr	BASEPRI, r0
    48be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    48c2:	6819      	ldr	r1, [r3, #0]
    48c4:	6808      	ldr	r0, [r1, #0]
    48c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    48ca:	f380 8809 	msr	PSP, r0
    48ce:	4770      	bx	lr

000048d0 <pxCurrentTCBConst>:
    48d0:	200002c8 	.word	0x200002c8

000048d4 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    48d4:	b580      	push	{r7, lr}
    48d6:	b082      	sub	sp, #8
    48d8:	af00      	add	r7, sp, #0
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
    48da:	2300      	movs	r3, #0
    48dc:	607b      	str	r3, [r7, #4]
    48de:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    48e2:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
    48e6:	f7ff fa7d 	bl	3de4 <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
    48ea:	f04f 0000 	mov.w	r0, #0
    48ee:	f380 8811 	msr	BASEPRI, r0
}
    48f2:	3708      	adds	r7, #8
    48f4:	46bd      	mov	sp, r7
    48f6:	bd80      	pop	{r7, pc}

000048f8 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    48f8:	b480      	push	{r7}
    48fa:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    48fc:	f24e 0314 	movw	r3, #57364	; 0xe014
    4900:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4904:	f641 421f 	movw	r2, #7199	; 0x1c1f
    4908:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    490a:	f24e 0310 	movw	r3, #57360	; 0xe010
    490e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4912:	2207      	movs	r2, #7
    4914:	601a      	str	r2, [r3, #0]
}
    4916:	46bd      	mov	sp, r7
    4918:	f85d 7b04 	ldr.w	r7, [sp], #4
    491c:	4770      	bx	lr
    491e:	0000      	.short	0x0000
    4920:	e000ed08 	.word	0xe000ed08

00004924 <pvPortMalloc>:
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;										\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    4924:	b580      	push	{r7, lr}
    4926:	b08a      	sub	sp, #40	; 0x28
    4928:	af00      	add	r7, sp, #0
    492a:	6078      	str	r0, [r7, #4]
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
    492c:	2300      	movs	r3, #0
    492e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
    4930:	f7ff f946 	bl	3bc0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    4934:	f24b 6338 	movw	r3, #46648	; 0xb638
    4938:	f2c2 0304 	movt	r3, #8196	; 0x2004
    493c:	681b      	ldr	r3, [r3, #0]
    493e:	2b00      	cmp	r3, #0
    4940:	d130      	bne.n	49a4 <pvPortMalloc+0x80>
		{
			prvHeapInit();
    4942:	f24b 6328 	movw	r3, #46632	; 0xb628
    4946:	f2c2 0304 	movt	r3, #8196	; 0x2004
    494a:	f240 6228 	movw	r2, #1576	; 0x628
    494e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4952:	601a      	str	r2, [r3, #0]
    4954:	f24b 6328 	movw	r3, #46632	; 0xb628
    4958:	f2c2 0304 	movt	r3, #8196	; 0x2004
    495c:	2200      	movs	r2, #0
    495e:	605a      	str	r2, [r3, #4]
    4960:	f24b 6330 	movw	r3, #46640	; 0xb630
    4964:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4968:	f44f 2296 	mov.w	r2, #307200	; 0x4b000
    496c:	605a      	str	r2, [r3, #4]
    496e:	f24b 6330 	movw	r3, #46640	; 0xb630
    4972:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4976:	2200      	movs	r2, #0
    4978:	601a      	str	r2, [r3, #0]
    497a:	f240 6328 	movw	r3, #1576	; 0x628
    497e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4982:	617b      	str	r3, [r7, #20]
    4984:	697b      	ldr	r3, [r7, #20]
    4986:	f44f 2296 	mov.w	r2, #307200	; 0x4b000
    498a:	605a      	str	r2, [r3, #4]
    498c:	697a      	ldr	r2, [r7, #20]
    498e:	f24b 6330 	movw	r3, #46640	; 0xb630
    4992:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4996:	6013      	str	r3, [r2, #0]
			xHeapHasBeenInitialised = pdTRUE;
    4998:	f24b 6338 	movw	r3, #46648	; 0xb638
    499c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    49a0:	2201      	movs	r2, #1
    49a2:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    49a4:	687b      	ldr	r3, [r7, #4]
    49a6:	2b00      	cmp	r3, #0
    49a8:	d00d      	beq.n	49c6 <pvPortMalloc+0xa2>
		{
			xWantedSize += heapSTRUCT_SIZE;
    49aa:	2310      	movs	r3, #16
    49ac:	687a      	ldr	r2, [r7, #4]
    49ae:	4413      	add	r3, r2
    49b0:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    49b2:	687b      	ldr	r3, [r7, #4]
    49b4:	f003 0307 	and.w	r3, r3, #7
    49b8:	2b00      	cmp	r3, #0
    49ba:	d004      	beq.n	49c6 <pvPortMalloc+0xa2>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    49bc:	687b      	ldr	r3, [r7, #4]
    49be:	f023 0307 	bic.w	r3, r3, #7
    49c2:	3308      	adds	r3, #8
    49c4:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
    49c6:	687b      	ldr	r3, [r7, #4]
    49c8:	2b00      	cmp	r3, #0
    49ca:	d068      	beq.n	4a9e <pvPortMalloc+0x17a>
    49cc:	687b      	ldr	r3, [r7, #4]
    49ce:	f5b3 2f96 	cmp.w	r3, #307200	; 0x4b000
    49d2:	d264      	bcs.n	4a9e <pvPortMalloc+0x17a>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
    49d4:	f24b 6328 	movw	r3, #46632	; 0xb628
    49d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    49dc:	623b      	str	r3, [r7, #32]
			pxBlock = xStart.pxNextFreeBlock;
    49de:	f24b 6328 	movw	r3, #46632	; 0xb628
    49e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    49e6:	681b      	ldr	r3, [r3, #0]
    49e8:	627b      	str	r3, [r7, #36]	; 0x24
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    49ea:	e004      	b.n	49f6 <pvPortMalloc+0xd2>
			{
				pxPreviousBlock = pxBlock;
    49ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    49ee:	623b      	str	r3, [r7, #32]
				pxBlock = pxBlock->pxNextFreeBlock;
    49f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    49f2:	681b      	ldr	r3, [r3, #0]
    49f4:	627b      	str	r3, [r7, #36]	; 0x24
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    49f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    49f8:	685a      	ldr	r2, [r3, #4]
    49fa:	687b      	ldr	r3, [r7, #4]
    49fc:	429a      	cmp	r2, r3
    49fe:	d203      	bcs.n	4a08 <pvPortMalloc+0xe4>
    4a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4a02:	681b      	ldr	r3, [r3, #0]
    4a04:	2b00      	cmp	r3, #0
    4a06:	d1f1      	bne.n	49ec <pvPortMalloc+0xc8>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
    4a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4a0a:	f24b 6330 	movw	r3, #46640	; 0xb630
    4a0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4a12:	429a      	cmp	r2, r3
    4a14:	d043      	beq.n	4a9e <pvPortMalloc+0x17a>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    4a16:	6a3b      	ldr	r3, [r7, #32]
    4a18:	681a      	ldr	r2, [r3, #0]
    4a1a:	2310      	movs	r3, #16
    4a1c:	4413      	add	r3, r2
    4a1e:	61fb      	str	r3, [r7, #28]

				/* This block is being returned for use so must be taken our of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    4a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4a22:	681a      	ldr	r2, [r3, #0]
    4a24:	6a3b      	ldr	r3, [r7, #32]
    4a26:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    4a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4a2a:	685a      	ldr	r2, [r3, #4]
    4a2c:	687b      	ldr	r3, [r7, #4]
    4a2e:	1ad2      	subs	r2, r2, r3
    4a30:	2310      	movs	r3, #16
    4a32:	005b      	lsls	r3, r3, #1
    4a34:	429a      	cmp	r2, r3
    4a36:	d925      	bls.n	4a84 <pvPortMalloc+0x160>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
    4a38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4a3a:	687b      	ldr	r3, [r7, #4]
    4a3c:	4413      	add	r3, r2
    4a3e:	613b      	str	r3, [r7, #16]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    4a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4a42:	685a      	ldr	r2, [r3, #4]
    4a44:	687b      	ldr	r3, [r7, #4]
    4a46:	1ad2      	subs	r2, r2, r3
    4a48:	693b      	ldr	r3, [r7, #16]
    4a4a:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
    4a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4a4e:	687a      	ldr	r2, [r7, #4]
    4a50:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    4a52:	693b      	ldr	r3, [r7, #16]
    4a54:	685b      	ldr	r3, [r3, #4]
    4a56:	60fb      	str	r3, [r7, #12]
    4a58:	f24b 6328 	movw	r3, #46632	; 0xb628
    4a5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4a60:	61bb      	str	r3, [r7, #24]
    4a62:	e002      	b.n	4a6a <pvPortMalloc+0x146>
    4a64:	69bb      	ldr	r3, [r7, #24]
    4a66:	681b      	ldr	r3, [r3, #0]
    4a68:	61bb      	str	r3, [r7, #24]
    4a6a:	69bb      	ldr	r3, [r7, #24]
    4a6c:	681b      	ldr	r3, [r3, #0]
    4a6e:	685a      	ldr	r2, [r3, #4]
    4a70:	68fb      	ldr	r3, [r7, #12]
    4a72:	429a      	cmp	r2, r3
    4a74:	d3f6      	bcc.n	4a64 <pvPortMalloc+0x140>
    4a76:	69bb      	ldr	r3, [r7, #24]
    4a78:	681a      	ldr	r2, [r3, #0]
    4a7a:	693b      	ldr	r3, [r7, #16]
    4a7c:	601a      	str	r2, [r3, #0]
    4a7e:	69bb      	ldr	r3, [r7, #24]
    4a80:	693a      	ldr	r2, [r7, #16]
    4a82:	601a      	str	r2, [r3, #0]
				}
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
    4a84:	f240 1334 	movw	r3, #308	; 0x134
    4a88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a8c:	681a      	ldr	r2, [r3, #0]
    4a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4a90:	685b      	ldr	r3, [r3, #4]
    4a92:	1ad2      	subs	r2, r2, r3
    4a94:	f240 1334 	movw	r3, #308	; 0x134
    4a98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a9c:	601a      	str	r2, [r3, #0]
			}
		}
	}
	xTaskResumeAll();
    4a9e:	f7ff f8a1 	bl	3be4 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    4aa2:	69fb      	ldr	r3, [r7, #28]
}
    4aa4:	4618      	mov	r0, r3
    4aa6:	3728      	adds	r7, #40	; 0x28
    4aa8:	46bd      	mov	sp, r7
    4aaa:	bd80      	pop	{r7, pc}

00004aac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    4aac:	b580      	push	{r7, lr}
    4aae:	b086      	sub	sp, #24
    4ab0:	af00      	add	r7, sp, #0
    4ab2:	6078      	str	r0, [r7, #4]
unsigned char *puc = ( unsigned char * ) pv;
    4ab4:	687b      	ldr	r3, [r7, #4]
    4ab6:	613b      	str	r3, [r7, #16]
xBlockLink *pxLink;

	if( pv )
    4ab8:	687b      	ldr	r3, [r7, #4]
    4aba:	2b00      	cmp	r3, #0
    4abc:	d030      	beq.n	4b20 <vPortFree+0x74>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
    4abe:	2310      	movs	r3, #16
    4ac0:	425b      	negs	r3, r3
    4ac2:	693a      	ldr	r2, [r7, #16]
    4ac4:	4413      	add	r3, r2
    4ac6:	613b      	str	r3, [r7, #16]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
    4ac8:	693b      	ldr	r3, [r7, #16]
    4aca:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
    4acc:	f7ff f878 	bl	3bc0 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
    4ad0:	68fb      	ldr	r3, [r7, #12]
    4ad2:	685b      	ldr	r3, [r3, #4]
    4ad4:	60bb      	str	r3, [r7, #8]
    4ad6:	f24b 6328 	movw	r3, #46632	; 0xb628
    4ada:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4ade:	617b      	str	r3, [r7, #20]
    4ae0:	e002      	b.n	4ae8 <vPortFree+0x3c>
    4ae2:	697b      	ldr	r3, [r7, #20]
    4ae4:	681b      	ldr	r3, [r3, #0]
    4ae6:	617b      	str	r3, [r7, #20]
    4ae8:	697b      	ldr	r3, [r7, #20]
    4aea:	681b      	ldr	r3, [r3, #0]
    4aec:	685a      	ldr	r2, [r3, #4]
    4aee:	68bb      	ldr	r3, [r7, #8]
    4af0:	429a      	cmp	r2, r3
    4af2:	d3f6      	bcc.n	4ae2 <vPortFree+0x36>
    4af4:	697b      	ldr	r3, [r7, #20]
    4af6:	681a      	ldr	r2, [r3, #0]
    4af8:	68fb      	ldr	r3, [r7, #12]
    4afa:	601a      	str	r2, [r3, #0]
    4afc:	697b      	ldr	r3, [r7, #20]
    4afe:	68fa      	ldr	r2, [r7, #12]
    4b00:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
    4b02:	68fb      	ldr	r3, [r7, #12]
    4b04:	685a      	ldr	r2, [r3, #4]
    4b06:	f240 1334 	movw	r3, #308	; 0x134
    4b0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b0e:	681b      	ldr	r3, [r3, #0]
    4b10:	441a      	add	r2, r3
    4b12:	f240 1334 	movw	r3, #308	; 0x134
    4b16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b1a:	601a      	str	r2, [r3, #0]
		}
		xTaskResumeAll();
    4b1c:	f7ff f862 	bl	3be4 <xTaskResumeAll>
	}
}
    4b20:	3718      	adds	r7, #24
    4b22:	46bd      	mov	sp, r7
    4b24:	bd80      	pop	{r7, pc}
    4b26:	bf00      	nop

00004b28 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    4b28:	b480      	push	{r7}
    4b2a:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
    4b2c:	f240 1334 	movw	r3, #308	; 0x134
    4b30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b34:	681b      	ldr	r3, [r3, #0]
}
    4b36:	4618      	mov	r0, r3
    4b38:	46bd      	mov	sp, r7
    4b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b3e:	4770      	bx	lr

00004b40 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    4b40:	b480      	push	{r7}
    4b42:	af00      	add	r7, sp, #0
	/* This just exists to keep the linker quiet. */
}
    4b44:	46bd      	mov	sp, r7
    4b46:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b4a:	4770      	bx	lr
    4b4c:	0000      	movs	r0, r0
	...

00004b50 <ground_calibrate>:
 * set to auto1 before MAX_DELAY_FOR_CALIBRATION secondes */
/**User must put verticaly the uav (nose bottom) and push
 * radio roll stick to get new calibration
 * If not, the default calibration is used.
 */
inline void ground_calibrate( void ) {
    4b50:	b580      	push	{r7, lr}
    4b52:	af00      	add	r7, sp, #0
    break;
  case CALIB_DONE:
    break;
  }
#else*/
if(calib_status == NO_CALIB)
    4b54:	f24b 635a 	movw	r3, #46682	; 0xb65a
    4b58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4b5c:	781b      	ldrb	r3, [r3, #0]
    4b5e:	2b00      	cmp	r3, #0
    4b60:	d114      	bne.n	4b8c <ground_calibrate+0x3c>
{
    if (cputime < MAX_DELAY_FOR_CALIBRATION && pprz_mode == PPRZ_MODE_AUTO1 ) {
    4b62:	f24b 6342 	movw	r3, #46658	; 0xb642
    4b66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4b6a:	881b      	ldrh	r3, [r3, #0]
    4b6c:	2b09      	cmp	r3, #9
    4b6e:	d838      	bhi.n	4be2 <ground_calibrate+0x92>
    4b70:	f24b 6344 	movw	r3, #46660	; 0xb644
    4b74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4b78:	781b      	ldrb	r3, [r3, #0]
    4b7a:	2b01      	cmp	r3, #1
    4b7c:	d131      	bne.n	4be2 <ground_calibrate+0x92>
      calib_status = WAITING_CALIB_CONTRAST;
    4b7e:	f24b 635a 	movw	r3, #46682	; 0xb65a
    4b82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4b86:	2201      	movs	r2, #1
    4b88:	701a      	strb	r2, [r3, #0]
    4b8a:	e02a      	b.n	4be2 <ground_calibrate+0x92>
      //DOWNLINK_SEND_CALIB_START();
    }
}
else if (calib_status == WAITING_CALIB_CONTRAST)
    4b8c:	f24b 635a 	movw	r3, #46682	; 0xb65a
    4b90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4b94:	781b      	ldrb	r3, [r3, #0]
    4b96:	2b01      	cmp	r3, #1
    4b98:	d123      	bne.n	4be2 <ground_calibrate+0x92>
{
    if (STICK_PUSHED(from_fbw.channels[RADIO_ROLL])) {
    4b9a:	f24b 7368 	movw	r3, #46952	; 0xb768
    4b9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4ba2:	885b      	ldrh	r3, [r3, #2]
    4ba4:	b21b      	sxth	r3, r3
    4ba6:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
    4baa:	db08      	blt.n	4bbe <ground_calibrate+0x6e>
    4bac:	f24b 7368 	movw	r3, #46952	; 0xb768
    4bb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4bb4:	885b      	ldrh	r3, [r3, #2]
    4bb6:	b21b      	sxth	r3, r3
    4bb8:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    4bbc:	dd11      	ble.n	4be2 <ground_calibrate+0x92>
      ir_gain_calib();
    4bbe:	f008 f913 	bl	cde8 <ir_gain_calib>
      estimator_rad_of_ir = ir_rad_of_ir;
    4bc2:	f240 1344 	movw	r3, #324	; 0x144
    4bc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bca:	681a      	ldr	r2, [r3, #0]
    4bcc:	f64b 4354 	movw	r3, #48212	; 0xbc54
    4bd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4bd4:	601a      	str	r2, [r3, #0]
      //DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
      calib_status = CALIB_DONE;
    4bd6:	f24b 635a 	movw	r3, #46682	; 0xb65a
    4bda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4bde:	2202      	movs	r2, #2
    4be0:	701a      	strb	r2, [r3, #0]
    }
}
else {}

//#endif
}
    4be2:	bd80      	pop	{r7, pc}

00004be4 <pprz_mode_update>:

/** \fn inline uint8_t pprz_mode_update( void )
 *  \brief Update paparazzi mode
 */
inline uint8_t pprz_mode_update( void ) {
    4be4:	b480      	push	{r7}
    4be6:	b083      	sub	sp, #12
    4be8:	af00      	add	r7, sp, #0
  /** We remain in home mode until explicit reset from the RC */
  if (pprz_mode != PPRZ_MODE_HOME || CheckEvent(rc_event_1)) {
    4bea:	f24b 6344 	movw	r3, #46660	; 0xb644
    4bee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4bf2:	781b      	ldrb	r3, [r3, #0]
    4bf4:	2b03      	cmp	r3, #3
    4bf6:	d10c      	bne.n	4c12 <pprz_mode_update+0x2e>
    4bf8:	f24b 6348 	movw	r3, #46664	; 0xb648
    4bfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4c00:	781b      	ldrb	r3, [r3, #0]
    4c02:	2b00      	cmp	r3, #0
    4c04:	d032      	beq.n	4c6c <pprz_mode_update+0x88>
    4c06:	f24b 6348 	movw	r3, #46664	; 0xb648
    4c0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4c0e:	2200      	movs	r2, #0
    4c10:	701a      	strb	r2, [r3, #0]
    ModeUpdate(pprz_mode, PPRZ_MODE_OF_PULSE(from_fbw.channels[RADIO_MODE], from_fbw.status));
    4c12:	f24b 7368 	movw	r3, #46952	; 0xb768
    4c16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4c1a:	891b      	ldrh	r3, [r3, #8]
    4c1c:	b21b      	sxth	r3, r3
    4c1e:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    4c22:	dc0f      	bgt.n	4c44 <pprz_mode_update+0x60>
    4c24:	f24b 7368 	movw	r3, #46952	; 0xb768
    4c28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4c2c:	891b      	ldrh	r3, [r3, #8]
    4c2e:	b21a      	sxth	r2, r3
    4c30:	f64e 5341 	movw	r3, #60737	; 0xed41
    4c34:	f6cf 73ff 	movt	r3, #65535	; 0xffff
    4c38:	429a      	cmp	r2, r3
    4c3a:	bfb4      	ite	lt
    4c3c:	2300      	movlt	r3, #0
    4c3e:	2301      	movge	r3, #1
    4c40:	b2db      	uxtb	r3, r3
    4c42:	e000      	b.n	4c46 <pprz_mode_update+0x62>
    4c44:	2302      	movs	r3, #2
    4c46:	71fb      	strb	r3, [r7, #7]
    4c48:	f24b 6344 	movw	r3, #46660	; 0xb644
    4c4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4c50:	781b      	ldrb	r3, [r3, #0]
    4c52:	79fa      	ldrb	r2, [r7, #7]
    4c54:	429a      	cmp	r2, r3
    4c56:	d007      	beq.n	4c68 <pprz_mode_update+0x84>
    4c58:	f24b 6344 	movw	r3, #46660	; 0xb644
    4c5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4c60:	79fa      	ldrb	r2, [r7, #7]
    4c62:	701a      	strb	r2, [r3, #0]
    4c64:	2301      	movs	r3, #1
    4c66:	e002      	b.n	4c6e <pprz_mode_update+0x8a>
    4c68:	2300      	movs	r3, #0
    4c6a:	e000      	b.n	4c6e <pprz_mode_update+0x8a>
  } else
    return FALSE;
    4c6c:	2300      	movs	r3, #0
}
    4c6e:	4618      	mov	r0, r3
    4c70:	370c      	adds	r7, #12
    4c72:	46bd      	mov	sp, r7
    4c74:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c78:	4770      	bx	lr
    4c7a:	bf00      	nop

00004c7c <ir_estim_mode_update>:

#ifdef RADIO_LLS
/** \fn inline uint8_t ir_estim_mode_update( void )
 *  \brief update ir estimation if RADIO_LLS is true \n
 */
inline uint8_t ir_estim_mode_update( void ) {
    4c7c:	b480      	push	{r7}
    4c7e:	b083      	sub	sp, #12
    4c80:	af00      	add	r7, sp, #0
  ModeUpdate(ir_estim_mode, IR_ESTIM_MODE_OF_PULSE(from_fbw.channels[RADIO_LLS]));
    4c82:	f24b 7368 	movw	r3, #46952	; 0xb768
    4c86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4c8a:	89db      	ldrh	r3, [r3, #14]
    4c8c:	b21a      	sxth	r2, r3
    4c8e:	f640 437f 	movw	r3, #3199	; 0xc7f
    4c92:	429a      	cmp	r2, r3
    4c94:	bfd4      	ite	le
    4c96:	2300      	movle	r3, #0
    4c98:	2301      	movgt	r3, #1
    4c9a:	b2db      	uxtb	r3, r3
    4c9c:	71fb      	strb	r3, [r7, #7]
    4c9e:	f240 1338 	movw	r3, #312	; 0x138
    4ca2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ca6:	781b      	ldrb	r3, [r3, #0]
    4ca8:	79fa      	ldrb	r2, [r7, #7]
    4caa:	429a      	cmp	r2, r3
    4cac:	d007      	beq.n	4cbe <ir_estim_mode_update+0x42>
    4cae:	f240 1338 	movw	r3, #312	; 0x138
    4cb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cb6:	79fa      	ldrb	r2, [r7, #7]
    4cb8:	701a      	strb	r2, [r3, #0]
    4cba:	2301      	movs	r3, #1
    4cbc:	e000      	b.n	4cc0 <ir_estim_mode_update+0x44>
    4cbe:	2300      	movs	r3, #0
}
    4cc0:	4618      	mov	r0, r3
    4cc2:	370c      	adds	r7, #12
    4cc4:	46bd      	mov	sp, r7
    4cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
    4cca:	4770      	bx	lr

00004ccc <mcu1_status_update>:


/** \fn inline uint8_t mcu1_status_update( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
inline uint8_t mcu1_status_update( void ) {
    4ccc:	b480      	push	{r7}
    4cce:	b083      	sub	sp, #12
    4cd0:	af00      	add	r7, sp, #0
  uint8_t new_mode = from_fbw.status;
    4cd2:	f24b 7368 	movw	r3, #46952	; 0xb768
    4cd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4cda:	7cdb      	ldrb	r3, [r3, #19]
    4cdc:	71fb      	strb	r3, [r7, #7]
  if (mcu1_status != new_mode) {
    4cde:	f24b 634b 	movw	r3, #46667	; 0xb64b
    4ce2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4ce6:	781b      	ldrb	r3, [r3, #0]
    4ce8:	79fa      	ldrb	r2, [r7, #7]
    4cea:	429a      	cmp	r2, r3
    4cec:	d017      	beq.n	4d1e <mcu1_status_update+0x52>
    bool_t changed = ((mcu1_status&MASK_FBW_CHANGED) != (new_mode&MASK_FBW_CHANGED));
    4cee:	f24b 634b 	movw	r3, #46667	; 0xb64b
    4cf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4cf6:	781b      	ldrb	r3, [r3, #0]
    4cf8:	461a      	mov	r2, r3
    4cfa:	79fb      	ldrb	r3, [r7, #7]
    4cfc:	4053      	eors	r3, r2
    4cfe:	f003 0303 	and.w	r3, r3, #3
    4d02:	2b00      	cmp	r3, #0
    4d04:	bf0c      	ite	eq
    4d06:	2300      	moveq	r3, #0
    4d08:	2301      	movne	r3, #1
    4d0a:	b2db      	uxtb	r3, r3
    4d0c:	71bb      	strb	r3, [r7, #6]
    mcu1_status = new_mode;
    4d0e:	f24b 634b 	movw	r3, #46667	; 0xb64b
    4d12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4d16:	79fa      	ldrb	r2, [r7, #7]
    4d18:	701a      	strb	r2, [r3, #0]
    return changed;
    4d1a:	79bb      	ldrb	r3, [r7, #6]
    4d1c:	e000      	b.n	4d20 <mcu1_status_update+0x54>
  }
  return FALSE;
    4d1e:	2300      	movs	r3, #0
}
    4d20:	4618      	mov	r0, r3
    4d22:	370c      	adds	r7, #12
    4d24:	46bd      	mov	sp, r7
    4d26:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d2a:	4770      	bx	lr

00004d2c <events_update>:
 EventUpdate(_cpt, (inflight_calib_mode==IF_CALIB_MODE_NONE && from_fbw.channels[_channel]<(int)(-0.75*MAX_PPRZ)), _event)

/** \fn static inline void events_update( void )
 *  @@@@@ A FIXER @@@@@
 */
static inline void events_update( void ) {
    4d2c:	b480      	push	{r7}
    4d2e:	af00      	add	r7, sp, #0
  static uint16_t event1_cpt = 0;
  static uint16_t event2_cpt = 0;
  EventPos(event1_cpt, RADIO_GAIN1, rc_event_1);
    4d30:	f64b 4374 	movw	r3, #48244	; 0xbc74
    4d34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4d38:	781b      	ldrb	r3, [r3, #0]
    4d3a:	2b00      	cmp	r3, #0
    4d3c:	d12a      	bne.n	4d94 <events_update+0x68>
    4d3e:	f24b 7368 	movw	r3, #46952	; 0xb768
    4d42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4d46:	895b      	ldrh	r3, [r3, #10]
    4d48:	b21b      	sxth	r3, r3
    4d4a:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
    4d4e:	dd21      	ble.n	4d94 <events_update+0x68>
    4d50:	f24b 635c 	movw	r3, #46684	; 0xb65c
    4d54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4d58:	881b      	ldrh	r3, [r3, #0]
    4d5a:	2b13      	cmp	r3, #19
    4d5c:	d819      	bhi.n	4d92 <events_update+0x66>
    4d5e:	f24b 635c 	movw	r3, #46684	; 0xb65c
    4d62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4d66:	881b      	ldrh	r3, [r3, #0]
    4d68:	3301      	adds	r3, #1
    4d6a:	b29a      	uxth	r2, r3
    4d6c:	f24b 635c 	movw	r3, #46684	; 0xb65c
    4d70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4d74:	801a      	strh	r2, [r3, #0]
    4d76:	f24b 635c 	movw	r3, #46684	; 0xb65c
    4d7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4d7e:	881b      	ldrh	r3, [r3, #0]
    4d80:	2b14      	cmp	r3, #20
    4d82:	d106      	bne.n	4d92 <events_update+0x66>
    4d84:	f24b 6348 	movw	r3, #46664	; 0xb648
    4d88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4d8c:	2201      	movs	r2, #1
    4d8e:	701a      	strb	r2, [r3, #0]
    4d90:	e00c      	b.n	4dac <events_update+0x80>
    4d92:	e00b      	b.n	4dac <events_update+0x80>
    4d94:	f24b 635c 	movw	r3, #46684	; 0xb65c
    4d98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4d9c:	2200      	movs	r2, #0
    4d9e:	801a      	strh	r2, [r3, #0]
    4da0:	f24b 6348 	movw	r3, #46664	; 0xb648
    4da4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4da8:	2200      	movs	r2, #0
    4daa:	701a      	strb	r2, [r3, #0]
  EventNeg(event2_cpt, RADIO_GAIN1, rc_event_2);
    4dac:	f64b 4374 	movw	r3, #48244	; 0xbc74
    4db0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4db4:	781b      	ldrb	r3, [r3, #0]
    4db6:	2b00      	cmp	r3, #0
    4db8:	d12a      	bne.n	4e10 <events_update+0xe4>
    4dba:	f24b 7368 	movw	r3, #46952	; 0xb768
    4dbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4dc2:	895b      	ldrh	r3, [r3, #10]
    4dc4:	b21b      	sxth	r3, r3
    4dc6:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
    4dca:	da21      	bge.n	4e10 <events_update+0xe4>
    4dcc:	f24b 635e 	movw	r3, #46686	; 0xb65e
    4dd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4dd4:	881b      	ldrh	r3, [r3, #0]
    4dd6:	2b13      	cmp	r3, #19
    4dd8:	d819      	bhi.n	4e0e <events_update+0xe2>
    4dda:	f24b 635e 	movw	r3, #46686	; 0xb65e
    4dde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4de2:	881b      	ldrh	r3, [r3, #0]
    4de4:	3301      	adds	r3, #1
    4de6:	b29a      	uxth	r2, r3
    4de8:	f24b 635e 	movw	r3, #46686	; 0xb65e
    4dec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4df0:	801a      	strh	r2, [r3, #0]
    4df2:	f24b 635e 	movw	r3, #46686	; 0xb65e
    4df6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4dfa:	881b      	ldrh	r3, [r3, #0]
    4dfc:	2b14      	cmp	r3, #20
    4dfe:	d106      	bne.n	4e0e <events_update+0xe2>
    4e00:	f24b 6349 	movw	r3, #46665	; 0xb649
    4e04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4e08:	2201      	movs	r2, #1
    4e0a:	701a      	strb	r2, [r3, #0]
    4e0c:	e00c      	b.n	4e28 <events_update+0xfc>
    4e0e:	e00b      	b.n	4e28 <events_update+0xfc>
    4e10:	f24b 635e 	movw	r3, #46686	; 0xb65e
    4e14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4e18:	2200      	movs	r2, #0
    4e1a:	801a      	strh	r2, [r3, #0]
    4e1c:	f24b 6349 	movw	r3, #46665	; 0xb649
    4e20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4e24:	2200      	movs	r2, #0
    4e26:	701a      	strb	r2, [r3, #0]
}  
    4e28:	46bd      	mov	sp, r7
    4e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e2e:	4770      	bx	lr

00004e30 <copy_from_to_fbw>:


/** \fn inline void copy_from_to_fbw ( void )
 *  \brief Send back uncontrolled channels (only rudder)
 */
inline void copy_from_to_fbw ( void ) {
    4e30:	b480      	push	{r7}
    4e32:	af00      	add	r7, sp, #0
  to_fbw.channels[RADIO_YAW] = from_fbw.channels[RADIO_YAW];
    4e34:	f24b 7368 	movw	r3, #46952	; 0xb768
    4e38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4e3c:	88da      	ldrh	r2, [r3, #6]
    4e3e:	f24b 7380 	movw	r3, #46976	; 0xb780
    4e42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4e46:	80da      	strh	r2, [r3, #6]
#ifdef ANTON_T7
  to_fbw.channels[RADIO_PITCH] = from_fbw.channels[RADIO_PITCH];
#endif
  to_fbw.status = 0;
    4e48:	f24b 7380 	movw	r3, #46976	; 0xb780
    4e4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4e50:	2200      	movs	r2, #0
    4e52:	74da      	strb	r2, [r3, #19]
}
    4e54:	46bd      	mov	sp, r7
    4e56:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e5a:	4770      	bx	lr

00004e5c <send_boot>:
 * Called at 20Hz.
 */



void send_boot(void){
    4e5c:	b480      	push	{r7}
    4e5e:	af00      	add	r7, sp, #0
  /** initialisation phase during boot */
  //vPrintString("S_13 reporting_task start!\n\r");
  //add by wanbo
  //if (boot) 
  {
      DOWNLINK_SEND_BOOT(&version);
    4e60:	f24b 6361 	movw	r3, #46689	; 0xb661
    4e64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4e68:	781a      	ldrb	r2, [r3, #0]
    4e6a:	f24b 6362 	movw	r3, #46690	; 0xb662
    4e6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4e72:	781b      	ldrb	r3, [r3, #0]
    4e74:	b2db      	uxtb	r3, r3
    4e76:	429a      	cmp	r2, r3
    4e78:	d313      	bcc.n	4ea2 <send_boot+0x46>
    4e7a:	f24b 6362 	movw	r3, #46690	; 0xb662
    4e7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4e82:	781b      	ldrb	r3, [r3, #0]
    4e84:	b2db      	uxtb	r3, r3
    4e86:	461a      	mov	r2, r3
    4e88:	f24b 6361 	movw	r3, #46689	; 0xb661
    4e8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4e90:	781b      	ldrb	r3, [r3, #0]
    4e92:	1ad3      	subs	r3, r2, r3
    4e94:	33ff      	adds	r3, #255	; 0xff
    4e96:	2b06      	cmp	r3, #6
    4e98:	bfd4      	ite	le
    4e9a:	2300      	movle	r3, #0
    4e9c:	2301      	movgt	r3, #1
    4e9e:	b2db      	uxtb	r3, r3
    4ea0:	e011      	b.n	4ec6 <send_boot+0x6a>
    4ea2:	f24b 6362 	movw	r3, #46690	; 0xb662
    4ea6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4eaa:	781b      	ldrb	r3, [r3, #0]
    4eac:	b2db      	uxtb	r3, r3
    4eae:	461a      	mov	r2, r3
    4eb0:	f24b 6361 	movw	r3, #46689	; 0xb661
    4eb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4eb8:	781b      	ldrb	r3, [r3, #0]
    4eba:	1ad3      	subs	r3, r2, r3
    4ebc:	2b06      	cmp	r3, #6
    4ebe:	bfd4      	ite	le
    4ec0:	2300      	movle	r3, #0
    4ec2:	2301      	movgt	r3, #1
    4ec4:	b2db      	uxtb	r3, r3
    4ec6:	2b00      	cmp	r3, #0
    4ec8:	f000 8194 	beq.w	51f4 <send_boot+0x398>
    4ecc:	f24b 6361 	movw	r3, #46689	; 0xb661
    4ed0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4ed4:	781b      	ldrb	r3, [r3, #0]
    4ed6:	461a      	mov	r2, r3
    4ed8:	f24b 6364 	movw	r3, #46692	; 0xb664
    4edc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4ee0:	2105      	movs	r1, #5
    4ee2:	5499      	strb	r1, [r3, r2]
    4ee4:	f24b 6361 	movw	r3, #46689	; 0xb661
    4ee8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4eec:	781b      	ldrb	r3, [r3, #0]
    4eee:	3301      	adds	r3, #1
    4ef0:	b2da      	uxtb	r2, r3
    4ef2:	f24b 6361 	movw	r3, #46689	; 0xb661
    4ef6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4efa:	701a      	strb	r2, [r3, #0]
    4efc:	f24b 6361 	movw	r3, #46689	; 0xb661
    4f00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4f04:	781b      	ldrb	r3, [r3, #0]
    4f06:	2bff      	cmp	r3, #255	; 0xff
    4f08:	d105      	bne.n	4f16 <send_boot+0xba>
    4f0a:	f24b 6361 	movw	r3, #46689	; 0xb661
    4f0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4f12:	2200      	movs	r2, #0
    4f14:	701a      	strb	r2, [r3, #0]
    4f16:	f24b 6361 	movw	r3, #46689	; 0xb661
    4f1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4f1e:	781b      	ldrb	r3, [r3, #0]
    4f20:	461a      	mov	r2, r3
    4f22:	f24b 6364 	movw	r3, #46692	; 0xb664
    4f26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4f2a:	2101      	movs	r1, #1
    4f2c:	5499      	strb	r1, [r3, r2]
    4f2e:	f24b 6361 	movw	r3, #46689	; 0xb661
    4f32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4f36:	781b      	ldrb	r3, [r3, #0]
    4f38:	3301      	adds	r3, #1
    4f3a:	b2da      	uxtb	r2, r3
    4f3c:	f24b 6361 	movw	r3, #46689	; 0xb661
    4f40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4f44:	701a      	strb	r2, [r3, #0]
    4f46:	f24b 6361 	movw	r3, #46689	; 0xb661
    4f4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4f4e:	781b      	ldrb	r3, [r3, #0]
    4f50:	2bff      	cmp	r3, #255	; 0xff
    4f52:	d105      	bne.n	4f60 <send_boot+0x104>
    4f54:	f24b 6361 	movw	r3, #46689	; 0xb661
    4f58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4f5c:	2200      	movs	r2, #0
    4f5e:	701a      	strb	r2, [r3, #0]
    4f60:	f24b 7365 	movw	r3, #46949	; 0xb765
    4f64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4f68:	2201      	movs	r2, #1
    4f6a:	701a      	strb	r2, [r3, #0]
    4f6c:	f24b 7366 	movw	r3, #46950	; 0xb766
    4f70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4f74:	2201      	movs	r2, #1
    4f76:	701a      	strb	r2, [r3, #0]
    4f78:	f24b 6361 	movw	r3, #46689	; 0xb661
    4f7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4f80:	781b      	ldrb	r3, [r3, #0]
    4f82:	461a      	mov	r2, r3
    4f84:	f643 23e6 	movw	r3, #15078	; 0x3ae6
    4f88:	f2c0 0301 	movt	r3, #1
    4f8c:	7819      	ldrb	r1, [r3, #0]
    4f8e:	f24b 6364 	movw	r3, #46692	; 0xb664
    4f92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4f96:	5499      	strb	r1, [r3, r2]
    4f98:	f643 23e6 	movw	r3, #15078	; 0x3ae6
    4f9c:	f2c0 0301 	movt	r3, #1
    4fa0:	781a      	ldrb	r2, [r3, #0]
    4fa2:	f24b 7365 	movw	r3, #46949	; 0xb765
    4fa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4faa:	781b      	ldrb	r3, [r3, #0]
    4fac:	4413      	add	r3, r2
    4fae:	b2da      	uxtb	r2, r3
    4fb0:	f24b 7365 	movw	r3, #46949	; 0xb765
    4fb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4fb8:	701a      	strb	r2, [r3, #0]
    4fba:	f24b 7366 	movw	r3, #46950	; 0xb766
    4fbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4fc2:	781a      	ldrb	r2, [r3, #0]
    4fc4:	f24b 7365 	movw	r3, #46949	; 0xb765
    4fc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4fcc:	781b      	ldrb	r3, [r3, #0]
    4fce:	4413      	add	r3, r2
    4fd0:	b2da      	uxtb	r2, r3
    4fd2:	f24b 7366 	movw	r3, #46950	; 0xb766
    4fd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4fda:	701a      	strb	r2, [r3, #0]
    4fdc:	f24b 6361 	movw	r3, #46689	; 0xb661
    4fe0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4fe4:	781b      	ldrb	r3, [r3, #0]
    4fe6:	3301      	adds	r3, #1
    4fe8:	b2da      	uxtb	r2, r3
    4fea:	f24b 6361 	movw	r3, #46689	; 0xb661
    4fee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4ff2:	701a      	strb	r2, [r3, #0]
    4ff4:	f24b 6361 	movw	r3, #46689	; 0xb661
    4ff8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4ffc:	781b      	ldrb	r3, [r3, #0]
    4ffe:	2bff      	cmp	r3, #255	; 0xff
    5000:	d105      	bne.n	500e <send_boot+0x1b2>
    5002:	f24b 6361 	movw	r3, #46689	; 0xb661
    5006:	f2c2 0304 	movt	r3, #8196	; 0x2004
    500a:	2200      	movs	r2, #0
    500c:	701a      	strb	r2, [r3, #0]
    500e:	f24b 6361 	movw	r3, #46689	; 0xb661
    5012:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5016:	781b      	ldrb	r3, [r3, #0]
    5018:	461a      	mov	r2, r3
    501a:	f643 23e6 	movw	r3, #15078	; 0x3ae6
    501e:	f2c0 0301 	movt	r3, #1
    5022:	7859      	ldrb	r1, [r3, #1]
    5024:	f24b 6364 	movw	r3, #46692	; 0xb664
    5028:	f2c2 0304 	movt	r3, #8196	; 0x2004
    502c:	5499      	strb	r1, [r3, r2]
    502e:	4b88      	ldr	r3, [pc, #544]	; (5250 <send_boot+0x3f4>)
    5030:	781a      	ldrb	r2, [r3, #0]
    5032:	f24b 7365 	movw	r3, #46949	; 0xb765
    5036:	f2c2 0304 	movt	r3, #8196	; 0x2004
    503a:	781b      	ldrb	r3, [r3, #0]
    503c:	4413      	add	r3, r2
    503e:	b2da      	uxtb	r2, r3
    5040:	f24b 7365 	movw	r3, #46949	; 0xb765
    5044:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5048:	701a      	strb	r2, [r3, #0]
    504a:	f24b 7366 	movw	r3, #46950	; 0xb766
    504e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5052:	781a      	ldrb	r2, [r3, #0]
    5054:	f24b 7365 	movw	r3, #46949	; 0xb765
    5058:	f2c2 0304 	movt	r3, #8196	; 0x2004
    505c:	781b      	ldrb	r3, [r3, #0]
    505e:	4413      	add	r3, r2
    5060:	b2da      	uxtb	r2, r3
    5062:	f24b 7366 	movw	r3, #46950	; 0xb766
    5066:	f2c2 0304 	movt	r3, #8196	; 0x2004
    506a:	701a      	strb	r2, [r3, #0]
    506c:	f24b 6361 	movw	r3, #46689	; 0xb661
    5070:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5074:	781b      	ldrb	r3, [r3, #0]
    5076:	3301      	adds	r3, #1
    5078:	b2da      	uxtb	r2, r3
    507a:	f24b 6361 	movw	r3, #46689	; 0xb661
    507e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5082:	701a      	strb	r2, [r3, #0]
    5084:	f24b 6361 	movw	r3, #46689	; 0xb661
    5088:	f2c2 0304 	movt	r3, #8196	; 0x2004
    508c:	781b      	ldrb	r3, [r3, #0]
    508e:	2bff      	cmp	r3, #255	; 0xff
    5090:	d105      	bne.n	509e <send_boot+0x242>
    5092:	f24b 6361 	movw	r3, #46689	; 0xb661
    5096:	f2c2 0304 	movt	r3, #8196	; 0x2004
    509a:	2200      	movs	r2, #0
    509c:	701a      	strb	r2, [r3, #0]
    509e:	f24b 6361 	movw	r3, #46689	; 0xb661
    50a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    50a6:	781b      	ldrb	r3, [r3, #0]
    50a8:	461a      	mov	r2, r3
    50aa:	f24b 7365 	movw	r3, #46949	; 0xb765
    50ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    50b2:	7819      	ldrb	r1, [r3, #0]
    50b4:	f24b 6364 	movw	r3, #46692	; 0xb664
    50b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    50bc:	5499      	strb	r1, [r3, r2]
    50be:	f24b 6361 	movw	r3, #46689	; 0xb661
    50c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    50c6:	781b      	ldrb	r3, [r3, #0]
    50c8:	3301      	adds	r3, #1
    50ca:	b2da      	uxtb	r2, r3
    50cc:	f24b 6361 	movw	r3, #46689	; 0xb661
    50d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    50d4:	701a      	strb	r2, [r3, #0]
    50d6:	f24b 6361 	movw	r3, #46689	; 0xb661
    50da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    50de:	781b      	ldrb	r3, [r3, #0]
    50e0:	2bff      	cmp	r3, #255	; 0xff
    50e2:	d105      	bne.n	50f0 <send_boot+0x294>
    50e4:	f24b 6361 	movw	r3, #46689	; 0xb661
    50e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    50ec:	2200      	movs	r2, #0
    50ee:	701a      	strb	r2, [r3, #0]
    50f0:	f24b 6361 	movw	r3, #46689	; 0xb661
    50f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    50f8:	781b      	ldrb	r3, [r3, #0]
    50fa:	461a      	mov	r2, r3
    50fc:	f24b 7366 	movw	r3, #46950	; 0xb766
    5100:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5104:	7819      	ldrb	r1, [r3, #0]
    5106:	f24b 6364 	movw	r3, #46692	; 0xb664
    510a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    510e:	5499      	strb	r1, [r3, r2]
    5110:	f24b 6361 	movw	r3, #46689	; 0xb661
    5114:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5118:	781b      	ldrb	r3, [r3, #0]
    511a:	3301      	adds	r3, #1
    511c:	b2da      	uxtb	r2, r3
    511e:	f24b 6361 	movw	r3, #46689	; 0xb661
    5122:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5126:	701a      	strb	r2, [r3, #0]
    5128:	f24b 6361 	movw	r3, #46689	; 0xb661
    512c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5130:	781b      	ldrb	r3, [r3, #0]
    5132:	2bff      	cmp	r3, #255	; 0xff
    5134:	d105      	bne.n	5142 <send_boot+0x2e6>
    5136:	f24b 6361 	movw	r3, #46689	; 0xb661
    513a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    513e:	2200      	movs	r2, #0
    5140:	701a      	strb	r2, [r3, #0]
    5142:	f248 0339 	movw	r3, #32825	; 0x8039
    5146:	f2c2 0300 	movt	r3, #8192	; 0x2000
    514a:	781b      	ldrb	r3, [r3, #0]
    514c:	b2db      	uxtb	r3, r3
    514e:	f003 0310 	and.w	r3, r3, #16
    5152:	2b00      	cmp	r3, #0
    5154:	d15a      	bne.n	520c <send_boot+0x3b0>
    5156:	f24b 6362 	movw	r3, #46690	; 0xb662
    515a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    515e:	781b      	ldrb	r3, [r3, #0]
    5160:	b2db      	uxtb	r3, r3
    5162:	461a      	mov	r2, r3
    5164:	f24b 6364 	movw	r3, #46692	; 0xb664
    5168:	f2c2 0304 	movt	r3, #8196	; 0x2004
    516c:	5c9a      	ldrb	r2, [r3, r2]
    516e:	f24b 7363 	movw	r3, #46947	; 0xb763
    5172:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5176:	701a      	strb	r2, [r3, #0]
    5178:	f24b 7364 	movw	r3, #46948	; 0xb764
    517c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5180:	2200      	movs	r2, #0
    5182:	701a      	strb	r2, [r3, #0]
    5184:	f24b 6362 	movw	r3, #46690	; 0xb662
    5188:	f2c2 0304 	movt	r3, #8196	; 0x2004
    518c:	781b      	ldrb	r3, [r3, #0]
    518e:	b2db      	uxtb	r3, r3
    5190:	3301      	adds	r3, #1
    5192:	b2da      	uxtb	r2, r3
    5194:	f24b 6362 	movw	r3, #46690	; 0xb662
    5198:	f2c2 0304 	movt	r3, #8196	; 0x2004
    519c:	701a      	strb	r2, [r3, #0]
    519e:	f24b 6362 	movw	r3, #46690	; 0xb662
    51a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    51a6:	781b      	ldrb	r3, [r3, #0]
    51a8:	b2db      	uxtb	r3, r3
    51aa:	2bff      	cmp	r3, #255	; 0xff
    51ac:	d105      	bne.n	51ba <send_boot+0x35e>
    51ae:	f24b 6362 	movw	r3, #46690	; 0xb662
    51b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    51b6:	2200      	movs	r2, #0
    51b8:	701a      	strb	r2, [r3, #0]
    51ba:	f248 0338 	movw	r3, #32824	; 0x8038
    51be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51c2:	f248 0238 	movw	r2, #32824	; 0x8038
    51c6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    51ca:	7812      	ldrb	r2, [r2, #0]
    51cc:	b2d2      	uxtb	r2, r2
    51ce:	f042 0201 	orr.w	r2, r2, #1
    51d2:	b2d2      	uxtb	r2, r2
    51d4:	701a      	strb	r2, [r3, #0]
    51d6:	f248 0339 	movw	r3, #32825	; 0x8039
    51da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51de:	f248 0239 	movw	r2, #32825	; 0x8039
    51e2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    51e6:	7812      	ldrb	r2, [r2, #0]
    51e8:	b2d2      	uxtb	r2, r2
    51ea:	f042 0210 	orr.w	r2, r2, #16
    51ee:	b2d2      	uxtb	r2, r2
    51f0:	701a      	strb	r2, [r3, #0]
    51f2:	e00b      	b.n	520c <send_boot+0x3b0>
    51f4:	f24b 6360 	movw	r3, #46688	; 0xb660
    51f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    51fc:	781b      	ldrb	r3, [r3, #0]
    51fe:	3301      	adds	r3, #1
    5200:	b2da      	uxtb	r2, r3
    5202:	f24b 6360 	movw	r3, #46688	; 0xb660
    5206:	f2c2 0304 	movt	r3, #8196	; 0x2004
    520a:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    520c:	f24b 6361 	movw	r3, #46689	; 0xb661
    5210:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5214:	781a      	ldrb	r2, [r3, #0]
    5216:	f24b 6362 	movw	r3, #46690	; 0xb662
    521a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    521e:	781b      	ldrb	r3, [r3, #0]
    5220:	b2db      	uxtb	r3, r3
    5222:	429a      	cmp	r2, r3
    5224:	d316      	bcc.n	5254 <send_boot+0x3f8>
    5226:	f24b 6362 	movw	r3, #46690	; 0xb662
    522a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    522e:	781b      	ldrb	r3, [r3, #0]
    5230:	b2db      	uxtb	r3, r3
    5232:	461a      	mov	r2, r3
    5234:	f24b 6361 	movw	r3, #46689	; 0xb661
    5238:	f2c2 0304 	movt	r3, #8196	; 0x2004
    523c:	781b      	ldrb	r3, [r3, #0]
    523e:	1ad3      	subs	r3, r2, r3
    5240:	33ff      	adds	r3, #255	; 0xff
    5242:	2b14      	cmp	r3, #20
    5244:	bfd4      	ite	le
    5246:	2300      	movle	r3, #0
    5248:	2301      	movgt	r3, #1
    524a:	b2db      	uxtb	r3, r3
    524c:	e014      	b.n	5278 <send_boot+0x41c>
    524e:	bf00      	nop
    5250:	00013ae7 	.word	0x00013ae7
    5254:	f24b 6362 	movw	r3, #46690	; 0xb662
    5258:	f2c2 0304 	movt	r3, #8196	; 0x2004
    525c:	781b      	ldrb	r3, [r3, #0]
    525e:	b2db      	uxtb	r3, r3
    5260:	461a      	mov	r2, r3
    5262:	f24b 6361 	movw	r3, #46689	; 0xb661
    5266:	f2c2 0304 	movt	r3, #8196	; 0x2004
    526a:	781b      	ldrb	r3, [r3, #0]
    526c:	1ad3      	subs	r3, r2, r3
    526e:	2b14      	cmp	r3, #20
    5270:	bfd4      	ite	le
    5272:	2300      	movle	r3, #0
    5274:	2301      	movgt	r3, #1
    5276:	b2db      	uxtb	r3, r3
    5278:	2b00      	cmp	r3, #0
    527a:	f000 85a5 	beq.w	5dc8 <send_boot+0xf6c>
    527e:	f24b 6361 	movw	r3, #46689	; 0xb661
    5282:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5286:	781b      	ldrb	r3, [r3, #0]
    5288:	461a      	mov	r2, r3
    528a:	f24b 6364 	movw	r3, #46692	; 0xb664
    528e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5292:	2105      	movs	r1, #5
    5294:	5499      	strb	r1, [r3, r2]
    5296:	f24b 6361 	movw	r3, #46689	; 0xb661
    529a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    529e:	781b      	ldrb	r3, [r3, #0]
    52a0:	3301      	adds	r3, #1
    52a2:	b2da      	uxtb	r2, r3
    52a4:	f24b 6361 	movw	r3, #46689	; 0xb661
    52a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    52ac:	701a      	strb	r2, [r3, #0]
    52ae:	f24b 6361 	movw	r3, #46689	; 0xb661
    52b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    52b6:	781b      	ldrb	r3, [r3, #0]
    52b8:	2bff      	cmp	r3, #255	; 0xff
    52ba:	d105      	bne.n	52c8 <send_boot+0x46c>
    52bc:	f24b 6361 	movw	r3, #46689	; 0xb661
    52c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    52c4:	2200      	movs	r2, #0
    52c6:	701a      	strb	r2, [r3, #0]
    52c8:	f24b 6361 	movw	r3, #46689	; 0xb661
    52cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    52d0:	781b      	ldrb	r3, [r3, #0]
    52d2:	461a      	mov	r2, r3
    52d4:	f24b 6364 	movw	r3, #46692	; 0xb664
    52d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    52dc:	2105      	movs	r1, #5
    52de:	5499      	strb	r1, [r3, r2]
    52e0:	f24b 6361 	movw	r3, #46689	; 0xb661
    52e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    52e8:	781b      	ldrb	r3, [r3, #0]
    52ea:	3301      	adds	r3, #1
    52ec:	b2da      	uxtb	r2, r3
    52ee:	f24b 6361 	movw	r3, #46689	; 0xb661
    52f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    52f6:	701a      	strb	r2, [r3, #0]
    52f8:	f24b 6361 	movw	r3, #46689	; 0xb661
    52fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5300:	781b      	ldrb	r3, [r3, #0]
    5302:	2bff      	cmp	r3, #255	; 0xff
    5304:	d105      	bne.n	5312 <send_boot+0x4b6>
    5306:	f24b 6361 	movw	r3, #46689	; 0xb661
    530a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    530e:	2200      	movs	r2, #0
    5310:	701a      	strb	r2, [r3, #0]
    5312:	f24b 7365 	movw	r3, #46949	; 0xb765
    5316:	f2c2 0304 	movt	r3, #8196	; 0x2004
    531a:	2205      	movs	r2, #5
    531c:	701a      	strb	r2, [r3, #0]
    531e:	f24b 7366 	movw	r3, #46950	; 0xb766
    5322:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5326:	2205      	movs	r2, #5
    5328:	701a      	strb	r2, [r3, #0]
    532a:	f24b 6361 	movw	r3, #46689	; 0xb661
    532e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5332:	781b      	ldrb	r3, [r3, #0]
    5334:	461a      	mov	r2, r3
    5336:	f64b 4358 	movw	r3, #48216	; 0xbc58
    533a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    533e:	7819      	ldrb	r1, [r3, #0]
    5340:	f24b 6364 	movw	r3, #46692	; 0xb664
    5344:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5348:	5499      	strb	r1, [r3, r2]
    534a:	f64b 4358 	movw	r3, #48216	; 0xbc58
    534e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5352:	781a      	ldrb	r2, [r3, #0]
    5354:	f24b 7365 	movw	r3, #46949	; 0xb765
    5358:	f2c2 0304 	movt	r3, #8196	; 0x2004
    535c:	781b      	ldrb	r3, [r3, #0]
    535e:	4413      	add	r3, r2
    5360:	b2da      	uxtb	r2, r3
    5362:	f24b 7365 	movw	r3, #46949	; 0xb765
    5366:	f2c2 0304 	movt	r3, #8196	; 0x2004
    536a:	701a      	strb	r2, [r3, #0]
    536c:	f24b 7366 	movw	r3, #46950	; 0xb766
    5370:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5374:	781a      	ldrb	r2, [r3, #0]
    5376:	f24b 7365 	movw	r3, #46949	; 0xb765
    537a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    537e:	781b      	ldrb	r3, [r3, #0]
    5380:	4413      	add	r3, r2
    5382:	b2da      	uxtb	r2, r3
    5384:	f24b 7366 	movw	r3, #46950	; 0xb766
    5388:	f2c2 0304 	movt	r3, #8196	; 0x2004
    538c:	701a      	strb	r2, [r3, #0]
    538e:	f24b 6361 	movw	r3, #46689	; 0xb661
    5392:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5396:	781b      	ldrb	r3, [r3, #0]
    5398:	3301      	adds	r3, #1
    539a:	b2da      	uxtb	r2, r3
    539c:	f24b 6361 	movw	r3, #46689	; 0xb661
    53a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    53a4:	701a      	strb	r2, [r3, #0]
    53a6:	f24b 6361 	movw	r3, #46689	; 0xb661
    53aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    53ae:	781b      	ldrb	r3, [r3, #0]
    53b0:	2bff      	cmp	r3, #255	; 0xff
    53b2:	d105      	bne.n	53c0 <send_boot+0x564>
    53b4:	f24b 6361 	movw	r3, #46689	; 0xb661
    53b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    53bc:	2200      	movs	r2, #0
    53be:	701a      	strb	r2, [r3, #0]
    53c0:	f24b 6361 	movw	r3, #46689	; 0xb661
    53c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    53c8:	781b      	ldrb	r3, [r3, #0]
    53ca:	461a      	mov	r2, r3
    53cc:	f64b 4358 	movw	r3, #48216	; 0xbc58
    53d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    53d4:	7859      	ldrb	r1, [r3, #1]
    53d6:	f24b 6364 	movw	r3, #46692	; 0xb664
    53da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    53de:	5499      	strb	r1, [r3, r2]
    53e0:	4bd1      	ldr	r3, [pc, #836]	; (5728 <send_boot+0x8cc>)
    53e2:	781a      	ldrb	r2, [r3, #0]
    53e4:	f24b 7365 	movw	r3, #46949	; 0xb765
    53e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    53ec:	781b      	ldrb	r3, [r3, #0]
    53ee:	4413      	add	r3, r2
    53f0:	b2da      	uxtb	r2, r3
    53f2:	f24b 7365 	movw	r3, #46949	; 0xb765
    53f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    53fa:	701a      	strb	r2, [r3, #0]
    53fc:	f24b 7366 	movw	r3, #46950	; 0xb766
    5400:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5404:	781a      	ldrb	r2, [r3, #0]
    5406:	f24b 7365 	movw	r3, #46949	; 0xb765
    540a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    540e:	781b      	ldrb	r3, [r3, #0]
    5410:	4413      	add	r3, r2
    5412:	b2da      	uxtb	r2, r3
    5414:	f24b 7366 	movw	r3, #46950	; 0xb766
    5418:	f2c2 0304 	movt	r3, #8196	; 0x2004
    541c:	701a      	strb	r2, [r3, #0]
    541e:	f24b 6361 	movw	r3, #46689	; 0xb661
    5422:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5426:	781b      	ldrb	r3, [r3, #0]
    5428:	3301      	adds	r3, #1
    542a:	b2da      	uxtb	r2, r3
    542c:	f24b 6361 	movw	r3, #46689	; 0xb661
    5430:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5434:	701a      	strb	r2, [r3, #0]
    5436:	f24b 6361 	movw	r3, #46689	; 0xb661
    543a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    543e:	781b      	ldrb	r3, [r3, #0]
    5440:	2bff      	cmp	r3, #255	; 0xff
    5442:	d105      	bne.n	5450 <send_boot+0x5f4>
    5444:	f24b 6361 	movw	r3, #46689	; 0xb661
    5448:	f2c2 0304 	movt	r3, #8196	; 0x2004
    544c:	2200      	movs	r2, #0
    544e:	701a      	strb	r2, [r3, #0]
    5450:	f24b 6361 	movw	r3, #46689	; 0xb661
    5454:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5458:	781b      	ldrb	r3, [r3, #0]
    545a:	461a      	mov	r2, r3
    545c:	f64b 4358 	movw	r3, #48216	; 0xbc58
    5460:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5464:	7899      	ldrb	r1, [r3, #2]
    5466:	f24b 6364 	movw	r3, #46692	; 0xb664
    546a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    546e:	5499      	strb	r1, [r3, r2]
    5470:	4bae      	ldr	r3, [pc, #696]	; (572c <send_boot+0x8d0>)
    5472:	781a      	ldrb	r2, [r3, #0]
    5474:	f24b 7365 	movw	r3, #46949	; 0xb765
    5478:	f2c2 0304 	movt	r3, #8196	; 0x2004
    547c:	781b      	ldrb	r3, [r3, #0]
    547e:	4413      	add	r3, r2
    5480:	b2da      	uxtb	r2, r3
    5482:	f24b 7365 	movw	r3, #46949	; 0xb765
    5486:	f2c2 0304 	movt	r3, #8196	; 0x2004
    548a:	701a      	strb	r2, [r3, #0]
    548c:	f24b 7366 	movw	r3, #46950	; 0xb766
    5490:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5494:	781a      	ldrb	r2, [r3, #0]
    5496:	f24b 7365 	movw	r3, #46949	; 0xb765
    549a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    549e:	781b      	ldrb	r3, [r3, #0]
    54a0:	4413      	add	r3, r2
    54a2:	b2da      	uxtb	r2, r3
    54a4:	f24b 7366 	movw	r3, #46950	; 0xb766
    54a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    54ac:	701a      	strb	r2, [r3, #0]
    54ae:	f24b 6361 	movw	r3, #46689	; 0xb661
    54b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    54b6:	781b      	ldrb	r3, [r3, #0]
    54b8:	3301      	adds	r3, #1
    54ba:	b2da      	uxtb	r2, r3
    54bc:	f24b 6361 	movw	r3, #46689	; 0xb661
    54c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    54c4:	701a      	strb	r2, [r3, #0]
    54c6:	f24b 6361 	movw	r3, #46689	; 0xb661
    54ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    54ce:	781b      	ldrb	r3, [r3, #0]
    54d0:	2bff      	cmp	r3, #255	; 0xff
    54d2:	d105      	bne.n	54e0 <send_boot+0x684>
    54d4:	f24b 6361 	movw	r3, #46689	; 0xb661
    54d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    54dc:	2200      	movs	r2, #0
    54de:	701a      	strb	r2, [r3, #0]
    54e0:	f24b 6361 	movw	r3, #46689	; 0xb661
    54e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    54e8:	781b      	ldrb	r3, [r3, #0]
    54ea:	461a      	mov	r2, r3
    54ec:	f64b 4358 	movw	r3, #48216	; 0xbc58
    54f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    54f4:	78d9      	ldrb	r1, [r3, #3]
    54f6:	f24b 6364 	movw	r3, #46692	; 0xb664
    54fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    54fe:	5499      	strb	r1, [r3, r2]
    5500:	4b8b      	ldr	r3, [pc, #556]	; (5730 <send_boot+0x8d4>)
    5502:	781a      	ldrb	r2, [r3, #0]
    5504:	f24b 7365 	movw	r3, #46949	; 0xb765
    5508:	f2c2 0304 	movt	r3, #8196	; 0x2004
    550c:	781b      	ldrb	r3, [r3, #0]
    550e:	4413      	add	r3, r2
    5510:	b2da      	uxtb	r2, r3
    5512:	f24b 7365 	movw	r3, #46949	; 0xb765
    5516:	f2c2 0304 	movt	r3, #8196	; 0x2004
    551a:	701a      	strb	r2, [r3, #0]
    551c:	f24b 7366 	movw	r3, #46950	; 0xb766
    5520:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5524:	781a      	ldrb	r2, [r3, #0]
    5526:	f24b 7365 	movw	r3, #46949	; 0xb765
    552a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    552e:	781b      	ldrb	r3, [r3, #0]
    5530:	4413      	add	r3, r2
    5532:	b2da      	uxtb	r2, r3
    5534:	f24b 7366 	movw	r3, #46950	; 0xb766
    5538:	f2c2 0304 	movt	r3, #8196	; 0x2004
    553c:	701a      	strb	r2, [r3, #0]
    553e:	f24b 6361 	movw	r3, #46689	; 0xb661
    5542:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5546:	781b      	ldrb	r3, [r3, #0]
    5548:	3301      	adds	r3, #1
    554a:	b2da      	uxtb	r2, r3
    554c:	f24b 6361 	movw	r3, #46689	; 0xb661
    5550:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5554:	701a      	strb	r2, [r3, #0]
    5556:	f24b 6361 	movw	r3, #46689	; 0xb661
    555a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    555e:	781b      	ldrb	r3, [r3, #0]
    5560:	2bff      	cmp	r3, #255	; 0xff
    5562:	d105      	bne.n	5570 <send_boot+0x714>
    5564:	f24b 6361 	movw	r3, #46689	; 0xb661
    5568:	f2c2 0304 	movt	r3, #8196	; 0x2004
    556c:	2200      	movs	r2, #0
    556e:	701a      	strb	r2, [r3, #0]
    5570:	f24b 6361 	movw	r3, #46689	; 0xb661
    5574:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5578:	781b      	ldrb	r3, [r3, #0]
    557a:	461a      	mov	r2, r3
    557c:	f64b 435c 	movw	r3, #48220	; 0xbc5c
    5580:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5584:	7819      	ldrb	r1, [r3, #0]
    5586:	f24b 6364 	movw	r3, #46692	; 0xb664
    558a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    558e:	5499      	strb	r1, [r3, r2]
    5590:	f64b 435c 	movw	r3, #48220	; 0xbc5c
    5594:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5598:	781a      	ldrb	r2, [r3, #0]
    559a:	f24b 7365 	movw	r3, #46949	; 0xb765
    559e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    55a2:	781b      	ldrb	r3, [r3, #0]
    55a4:	4413      	add	r3, r2
    55a6:	b2da      	uxtb	r2, r3
    55a8:	f24b 7365 	movw	r3, #46949	; 0xb765
    55ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    55b0:	701a      	strb	r2, [r3, #0]
    55b2:	f24b 7366 	movw	r3, #46950	; 0xb766
    55b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    55ba:	781a      	ldrb	r2, [r3, #0]
    55bc:	f24b 7365 	movw	r3, #46949	; 0xb765
    55c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    55c4:	781b      	ldrb	r3, [r3, #0]
    55c6:	4413      	add	r3, r2
    55c8:	b2da      	uxtb	r2, r3
    55ca:	f24b 7366 	movw	r3, #46950	; 0xb766
    55ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    55d2:	701a      	strb	r2, [r3, #0]
    55d4:	f24b 6361 	movw	r3, #46689	; 0xb661
    55d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    55dc:	781b      	ldrb	r3, [r3, #0]
    55de:	3301      	adds	r3, #1
    55e0:	b2da      	uxtb	r2, r3
    55e2:	f24b 6361 	movw	r3, #46689	; 0xb661
    55e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    55ea:	701a      	strb	r2, [r3, #0]
    55ec:	f24b 6361 	movw	r3, #46689	; 0xb661
    55f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    55f4:	781b      	ldrb	r3, [r3, #0]
    55f6:	2bff      	cmp	r3, #255	; 0xff
    55f8:	d105      	bne.n	5606 <send_boot+0x7aa>
    55fa:	f24b 6361 	movw	r3, #46689	; 0xb661
    55fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5602:	2200      	movs	r2, #0
    5604:	701a      	strb	r2, [r3, #0]
    5606:	f24b 6361 	movw	r3, #46689	; 0xb661
    560a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    560e:	781b      	ldrb	r3, [r3, #0]
    5610:	461a      	mov	r2, r3
    5612:	f64b 435c 	movw	r3, #48220	; 0xbc5c
    5616:	f2c2 0304 	movt	r3, #8196	; 0x2004
    561a:	7859      	ldrb	r1, [r3, #1]
    561c:	f24b 6364 	movw	r3, #46692	; 0xb664
    5620:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5624:	5499      	strb	r1, [r3, r2]
    5626:	4b43      	ldr	r3, [pc, #268]	; (5734 <send_boot+0x8d8>)
    5628:	781a      	ldrb	r2, [r3, #0]
    562a:	f24b 7365 	movw	r3, #46949	; 0xb765
    562e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5632:	781b      	ldrb	r3, [r3, #0]
    5634:	4413      	add	r3, r2
    5636:	b2da      	uxtb	r2, r3
    5638:	f24b 7365 	movw	r3, #46949	; 0xb765
    563c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5640:	701a      	strb	r2, [r3, #0]
    5642:	f24b 7366 	movw	r3, #46950	; 0xb766
    5646:	f2c2 0304 	movt	r3, #8196	; 0x2004
    564a:	781a      	ldrb	r2, [r3, #0]
    564c:	f24b 7365 	movw	r3, #46949	; 0xb765
    5650:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5654:	781b      	ldrb	r3, [r3, #0]
    5656:	4413      	add	r3, r2
    5658:	b2da      	uxtb	r2, r3
    565a:	f24b 7366 	movw	r3, #46950	; 0xb766
    565e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5662:	701a      	strb	r2, [r3, #0]
    5664:	f24b 6361 	movw	r3, #46689	; 0xb661
    5668:	f2c2 0304 	movt	r3, #8196	; 0x2004
    566c:	781b      	ldrb	r3, [r3, #0]
    566e:	3301      	adds	r3, #1
    5670:	b2da      	uxtb	r2, r3
    5672:	f24b 6361 	movw	r3, #46689	; 0xb661
    5676:	f2c2 0304 	movt	r3, #8196	; 0x2004
    567a:	701a      	strb	r2, [r3, #0]
    567c:	f24b 6361 	movw	r3, #46689	; 0xb661
    5680:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5684:	781b      	ldrb	r3, [r3, #0]
    5686:	2bff      	cmp	r3, #255	; 0xff
    5688:	d105      	bne.n	5696 <send_boot+0x83a>
    568a:	f24b 6361 	movw	r3, #46689	; 0xb661
    568e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5692:	2200      	movs	r2, #0
    5694:	701a      	strb	r2, [r3, #0]
    5696:	f24b 6361 	movw	r3, #46689	; 0xb661
    569a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    569e:	781b      	ldrb	r3, [r3, #0]
    56a0:	461a      	mov	r2, r3
    56a2:	f64b 435c 	movw	r3, #48220	; 0xbc5c
    56a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    56aa:	7899      	ldrb	r1, [r3, #2]
    56ac:	f24b 6364 	movw	r3, #46692	; 0xb664
    56b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    56b4:	5499      	strb	r1, [r3, r2]
    56b6:	4b20      	ldr	r3, [pc, #128]	; (5738 <send_boot+0x8dc>)
    56b8:	781a      	ldrb	r2, [r3, #0]
    56ba:	f24b 7365 	movw	r3, #46949	; 0xb765
    56be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    56c2:	781b      	ldrb	r3, [r3, #0]
    56c4:	4413      	add	r3, r2
    56c6:	b2da      	uxtb	r2, r3
    56c8:	f24b 7365 	movw	r3, #46949	; 0xb765
    56cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    56d0:	701a      	strb	r2, [r3, #0]
    56d2:	f24b 7366 	movw	r3, #46950	; 0xb766
    56d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    56da:	781a      	ldrb	r2, [r3, #0]
    56dc:	f24b 7365 	movw	r3, #46949	; 0xb765
    56e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    56e4:	781b      	ldrb	r3, [r3, #0]
    56e6:	4413      	add	r3, r2
    56e8:	b2da      	uxtb	r2, r3
    56ea:	f24b 7366 	movw	r3, #46950	; 0xb766
    56ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    56f2:	701a      	strb	r2, [r3, #0]
    56f4:	f24b 6361 	movw	r3, #46689	; 0xb661
    56f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    56fc:	781b      	ldrb	r3, [r3, #0]
    56fe:	3301      	adds	r3, #1
    5700:	b2da      	uxtb	r2, r3
    5702:	f24b 6361 	movw	r3, #46689	; 0xb661
    5706:	f2c2 0304 	movt	r3, #8196	; 0x2004
    570a:	701a      	strb	r2, [r3, #0]
    570c:	f24b 6361 	movw	r3, #46689	; 0xb661
    5710:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5714:	781b      	ldrb	r3, [r3, #0]
    5716:	2bff      	cmp	r3, #255	; 0xff
    5718:	d110      	bne.n	573c <send_boot+0x8e0>
    571a:	f24b 6361 	movw	r3, #46689	; 0xb661
    571e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5722:	2200      	movs	r2, #0
    5724:	701a      	strb	r2, [r3, #0]
    5726:	e009      	b.n	573c <send_boot+0x8e0>
    5728:	2004bc59 	.word	0x2004bc59
    572c:	2004bc5a 	.word	0x2004bc5a
    5730:	2004bc5b 	.word	0x2004bc5b
    5734:	2004bc5d 	.word	0x2004bc5d
    5738:	2004bc5e 	.word	0x2004bc5e
    573c:	f24b 6361 	movw	r3, #46689	; 0xb661
    5740:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5744:	781b      	ldrb	r3, [r3, #0]
    5746:	461a      	mov	r2, r3
    5748:	f64b 435c 	movw	r3, #48220	; 0xbc5c
    574c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5750:	78d9      	ldrb	r1, [r3, #3]
    5752:	f24b 6364 	movw	r3, #46692	; 0xb664
    5756:	f2c2 0304 	movt	r3, #8196	; 0x2004
    575a:	5499      	strb	r1, [r3, r2]
    575c:	4bd3      	ldr	r3, [pc, #844]	; (5aac <send_boot+0xc50>)
    575e:	781a      	ldrb	r2, [r3, #0]
    5760:	f24b 7365 	movw	r3, #46949	; 0xb765
    5764:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5768:	781b      	ldrb	r3, [r3, #0]
    576a:	4413      	add	r3, r2
    576c:	b2da      	uxtb	r2, r3
    576e:	f24b 7365 	movw	r3, #46949	; 0xb765
    5772:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5776:	701a      	strb	r2, [r3, #0]
    5778:	f24b 7366 	movw	r3, #46950	; 0xb766
    577c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5780:	781a      	ldrb	r2, [r3, #0]
    5782:	f24b 7365 	movw	r3, #46949	; 0xb765
    5786:	f2c2 0304 	movt	r3, #8196	; 0x2004
    578a:	781b      	ldrb	r3, [r3, #0]
    578c:	4413      	add	r3, r2
    578e:	b2da      	uxtb	r2, r3
    5790:	f24b 7366 	movw	r3, #46950	; 0xb766
    5794:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5798:	701a      	strb	r2, [r3, #0]
    579a:	f24b 6361 	movw	r3, #46689	; 0xb661
    579e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    57a2:	781b      	ldrb	r3, [r3, #0]
    57a4:	3301      	adds	r3, #1
    57a6:	b2da      	uxtb	r2, r3
    57a8:	f24b 6361 	movw	r3, #46689	; 0xb661
    57ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    57b0:	701a      	strb	r2, [r3, #0]
    57b2:	f24b 6361 	movw	r3, #46689	; 0xb661
    57b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    57ba:	781b      	ldrb	r3, [r3, #0]
    57bc:	2bff      	cmp	r3, #255	; 0xff
    57be:	d105      	bne.n	57cc <send_boot+0x970>
    57c0:	f24b 6361 	movw	r3, #46689	; 0xb661
    57c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    57c8:	2200      	movs	r2, #0
    57ca:	701a      	strb	r2, [r3, #0]
    57cc:	f24b 6361 	movw	r3, #46689	; 0xb661
    57d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    57d4:	781b      	ldrb	r3, [r3, #0]
    57d6:	461a      	mov	r2, r3
    57d8:	f64b 4354 	movw	r3, #48212	; 0xbc54
    57dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    57e0:	7819      	ldrb	r1, [r3, #0]
    57e2:	f24b 6364 	movw	r3, #46692	; 0xb664
    57e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    57ea:	5499      	strb	r1, [r3, r2]
    57ec:	f64b 4354 	movw	r3, #48212	; 0xbc54
    57f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    57f4:	781a      	ldrb	r2, [r3, #0]
    57f6:	f24b 7365 	movw	r3, #46949	; 0xb765
    57fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    57fe:	781b      	ldrb	r3, [r3, #0]
    5800:	4413      	add	r3, r2
    5802:	b2da      	uxtb	r2, r3
    5804:	f24b 7365 	movw	r3, #46949	; 0xb765
    5808:	f2c2 0304 	movt	r3, #8196	; 0x2004
    580c:	701a      	strb	r2, [r3, #0]
    580e:	f24b 7366 	movw	r3, #46950	; 0xb766
    5812:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5816:	781a      	ldrb	r2, [r3, #0]
    5818:	f24b 7365 	movw	r3, #46949	; 0xb765
    581c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5820:	781b      	ldrb	r3, [r3, #0]
    5822:	4413      	add	r3, r2
    5824:	b2da      	uxtb	r2, r3
    5826:	f24b 7366 	movw	r3, #46950	; 0xb766
    582a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    582e:	701a      	strb	r2, [r3, #0]
    5830:	f24b 6361 	movw	r3, #46689	; 0xb661
    5834:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5838:	781b      	ldrb	r3, [r3, #0]
    583a:	3301      	adds	r3, #1
    583c:	b2da      	uxtb	r2, r3
    583e:	f24b 6361 	movw	r3, #46689	; 0xb661
    5842:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5846:	701a      	strb	r2, [r3, #0]
    5848:	f24b 6361 	movw	r3, #46689	; 0xb661
    584c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5850:	781b      	ldrb	r3, [r3, #0]
    5852:	2bff      	cmp	r3, #255	; 0xff
    5854:	d105      	bne.n	5862 <send_boot+0xa06>
    5856:	f24b 6361 	movw	r3, #46689	; 0xb661
    585a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    585e:	2200      	movs	r2, #0
    5860:	701a      	strb	r2, [r3, #0]
    5862:	f24b 6361 	movw	r3, #46689	; 0xb661
    5866:	f2c2 0304 	movt	r3, #8196	; 0x2004
    586a:	781b      	ldrb	r3, [r3, #0]
    586c:	461a      	mov	r2, r3
    586e:	f64b 4354 	movw	r3, #48212	; 0xbc54
    5872:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5876:	7859      	ldrb	r1, [r3, #1]
    5878:	f24b 6364 	movw	r3, #46692	; 0xb664
    587c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5880:	5499      	strb	r1, [r3, r2]
    5882:	4b8b      	ldr	r3, [pc, #556]	; (5ab0 <send_boot+0xc54>)
    5884:	781a      	ldrb	r2, [r3, #0]
    5886:	f24b 7365 	movw	r3, #46949	; 0xb765
    588a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    588e:	781b      	ldrb	r3, [r3, #0]
    5890:	4413      	add	r3, r2
    5892:	b2da      	uxtb	r2, r3
    5894:	f24b 7365 	movw	r3, #46949	; 0xb765
    5898:	f2c2 0304 	movt	r3, #8196	; 0x2004
    589c:	701a      	strb	r2, [r3, #0]
    589e:	f24b 7366 	movw	r3, #46950	; 0xb766
    58a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    58a6:	781a      	ldrb	r2, [r3, #0]
    58a8:	f24b 7365 	movw	r3, #46949	; 0xb765
    58ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    58b0:	781b      	ldrb	r3, [r3, #0]
    58b2:	4413      	add	r3, r2
    58b4:	b2da      	uxtb	r2, r3
    58b6:	f24b 7366 	movw	r3, #46950	; 0xb766
    58ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    58be:	701a      	strb	r2, [r3, #0]
    58c0:	f24b 6361 	movw	r3, #46689	; 0xb661
    58c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    58c8:	781b      	ldrb	r3, [r3, #0]
    58ca:	3301      	adds	r3, #1
    58cc:	b2da      	uxtb	r2, r3
    58ce:	f24b 6361 	movw	r3, #46689	; 0xb661
    58d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    58d6:	701a      	strb	r2, [r3, #0]
    58d8:	f24b 6361 	movw	r3, #46689	; 0xb661
    58dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    58e0:	781b      	ldrb	r3, [r3, #0]
    58e2:	2bff      	cmp	r3, #255	; 0xff
    58e4:	d105      	bne.n	58f2 <send_boot+0xa96>
    58e6:	f24b 6361 	movw	r3, #46689	; 0xb661
    58ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    58ee:	2200      	movs	r2, #0
    58f0:	701a      	strb	r2, [r3, #0]
    58f2:	f24b 6361 	movw	r3, #46689	; 0xb661
    58f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    58fa:	781b      	ldrb	r3, [r3, #0]
    58fc:	461a      	mov	r2, r3
    58fe:	f64b 4354 	movw	r3, #48212	; 0xbc54
    5902:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5906:	7899      	ldrb	r1, [r3, #2]
    5908:	f24b 6364 	movw	r3, #46692	; 0xb664
    590c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5910:	5499      	strb	r1, [r3, r2]
    5912:	4b68      	ldr	r3, [pc, #416]	; (5ab4 <send_boot+0xc58>)
    5914:	781a      	ldrb	r2, [r3, #0]
    5916:	f24b 7365 	movw	r3, #46949	; 0xb765
    591a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    591e:	781b      	ldrb	r3, [r3, #0]
    5920:	4413      	add	r3, r2
    5922:	b2da      	uxtb	r2, r3
    5924:	f24b 7365 	movw	r3, #46949	; 0xb765
    5928:	f2c2 0304 	movt	r3, #8196	; 0x2004
    592c:	701a      	strb	r2, [r3, #0]
    592e:	f24b 7366 	movw	r3, #46950	; 0xb766
    5932:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5936:	781a      	ldrb	r2, [r3, #0]
    5938:	f24b 7365 	movw	r3, #46949	; 0xb765
    593c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5940:	781b      	ldrb	r3, [r3, #0]
    5942:	4413      	add	r3, r2
    5944:	b2da      	uxtb	r2, r3
    5946:	f24b 7366 	movw	r3, #46950	; 0xb766
    594a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    594e:	701a      	strb	r2, [r3, #0]
    5950:	f24b 6361 	movw	r3, #46689	; 0xb661
    5954:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5958:	781b      	ldrb	r3, [r3, #0]
    595a:	3301      	adds	r3, #1
    595c:	b2da      	uxtb	r2, r3
    595e:	f24b 6361 	movw	r3, #46689	; 0xb661
    5962:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5966:	701a      	strb	r2, [r3, #0]
    5968:	f24b 6361 	movw	r3, #46689	; 0xb661
    596c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5970:	781b      	ldrb	r3, [r3, #0]
    5972:	2bff      	cmp	r3, #255	; 0xff
    5974:	d105      	bne.n	5982 <send_boot+0xb26>
    5976:	f24b 6361 	movw	r3, #46689	; 0xb661
    597a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    597e:	2200      	movs	r2, #0
    5980:	701a      	strb	r2, [r3, #0]
    5982:	f24b 6361 	movw	r3, #46689	; 0xb661
    5986:	f2c2 0304 	movt	r3, #8196	; 0x2004
    598a:	781b      	ldrb	r3, [r3, #0]
    598c:	461a      	mov	r2, r3
    598e:	f64b 4354 	movw	r3, #48212	; 0xbc54
    5992:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5996:	78d9      	ldrb	r1, [r3, #3]
    5998:	f24b 6364 	movw	r3, #46692	; 0xb664
    599c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    59a0:	5499      	strb	r1, [r3, r2]
    59a2:	4b45      	ldr	r3, [pc, #276]	; (5ab8 <send_boot+0xc5c>)
    59a4:	781a      	ldrb	r2, [r3, #0]
    59a6:	f24b 7365 	movw	r3, #46949	; 0xb765
    59aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    59ae:	781b      	ldrb	r3, [r3, #0]
    59b0:	4413      	add	r3, r2
    59b2:	b2da      	uxtb	r2, r3
    59b4:	f24b 7365 	movw	r3, #46949	; 0xb765
    59b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    59bc:	701a      	strb	r2, [r3, #0]
    59be:	f24b 7366 	movw	r3, #46950	; 0xb766
    59c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    59c6:	781a      	ldrb	r2, [r3, #0]
    59c8:	f24b 7365 	movw	r3, #46949	; 0xb765
    59cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    59d0:	781b      	ldrb	r3, [r3, #0]
    59d2:	4413      	add	r3, r2
    59d4:	b2da      	uxtb	r2, r3
    59d6:	f24b 7366 	movw	r3, #46950	; 0xb766
    59da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    59de:	701a      	strb	r2, [r3, #0]
    59e0:	f24b 6361 	movw	r3, #46689	; 0xb661
    59e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    59e8:	781b      	ldrb	r3, [r3, #0]
    59ea:	3301      	adds	r3, #1
    59ec:	b2da      	uxtb	r2, r3
    59ee:	f24b 6361 	movw	r3, #46689	; 0xb661
    59f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    59f6:	701a      	strb	r2, [r3, #0]
    59f8:	f24b 6361 	movw	r3, #46689	; 0xb661
    59fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5a00:	781b      	ldrb	r3, [r3, #0]
    5a02:	2bff      	cmp	r3, #255	; 0xff
    5a04:	d105      	bne.n	5a12 <send_boot+0xbb6>
    5a06:	f24b 6361 	movw	r3, #46689	; 0xb661
    5a0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5a0e:	2200      	movs	r2, #0
    5a10:	701a      	strb	r2, [r3, #0]
    5a12:	f24b 6361 	movw	r3, #46689	; 0xb661
    5a16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5a1a:	781b      	ldrb	r3, [r3, #0]
    5a1c:	461a      	mov	r2, r3
    5a1e:	f240 133e 	movw	r3, #318	; 0x13e
    5a22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a26:	7819      	ldrb	r1, [r3, #0]
    5a28:	f24b 6364 	movw	r3, #46692	; 0xb664
    5a2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5a30:	5499      	strb	r1, [r3, r2]
    5a32:	f240 133e 	movw	r3, #318	; 0x13e
    5a36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a3a:	781a      	ldrb	r2, [r3, #0]
    5a3c:	f24b 7365 	movw	r3, #46949	; 0xb765
    5a40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5a44:	781b      	ldrb	r3, [r3, #0]
    5a46:	4413      	add	r3, r2
    5a48:	b2da      	uxtb	r2, r3
    5a4a:	f24b 7365 	movw	r3, #46949	; 0xb765
    5a4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5a52:	701a      	strb	r2, [r3, #0]
    5a54:	f24b 7366 	movw	r3, #46950	; 0xb766
    5a58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5a5c:	781a      	ldrb	r2, [r3, #0]
    5a5e:	f24b 7365 	movw	r3, #46949	; 0xb765
    5a62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5a66:	781b      	ldrb	r3, [r3, #0]
    5a68:	4413      	add	r3, r2
    5a6a:	b2da      	uxtb	r2, r3
    5a6c:	f24b 7366 	movw	r3, #46950	; 0xb766
    5a70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5a74:	701a      	strb	r2, [r3, #0]
    5a76:	f24b 6361 	movw	r3, #46689	; 0xb661
    5a7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5a7e:	781b      	ldrb	r3, [r3, #0]
    5a80:	3301      	adds	r3, #1
    5a82:	b2da      	uxtb	r2, r3
    5a84:	f24b 6361 	movw	r3, #46689	; 0xb661
    5a88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5a8c:	701a      	strb	r2, [r3, #0]
    5a8e:	f24b 6361 	movw	r3, #46689	; 0xb661
    5a92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5a96:	781b      	ldrb	r3, [r3, #0]
    5a98:	2bff      	cmp	r3, #255	; 0xff
    5a9a:	d10f      	bne.n	5abc <send_boot+0xc60>
    5a9c:	f24b 6361 	movw	r3, #46689	; 0xb661
    5aa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5aa4:	2200      	movs	r2, #0
    5aa6:	701a      	strb	r2, [r3, #0]
    5aa8:	e008      	b.n	5abc <send_boot+0xc60>
    5aaa:	bf00      	nop
    5aac:	2004bc5f 	.word	0x2004bc5f
    5ab0:	2004bc55 	.word	0x2004bc55
    5ab4:	2004bc56 	.word	0x2004bc56
    5ab8:	2004bc57 	.word	0x2004bc57
    5abc:	f24b 6361 	movw	r3, #46689	; 0xb661
    5ac0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ac4:	781b      	ldrb	r3, [r3, #0]
    5ac6:	461a      	mov	r2, r3
    5ac8:	f240 133e 	movw	r3, #318	; 0x13e
    5acc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ad0:	7859      	ldrb	r1, [r3, #1]
    5ad2:	f24b 6364 	movw	r3, #46692	; 0xb664
    5ad6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ada:	5499      	strb	r1, [r3, r2]
    5adc:	4bc5      	ldr	r3, [pc, #788]	; (5df4 <send_boot+0xf98>)
    5ade:	781a      	ldrb	r2, [r3, #0]
    5ae0:	f24b 7365 	movw	r3, #46949	; 0xb765
    5ae4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ae8:	781b      	ldrb	r3, [r3, #0]
    5aea:	4413      	add	r3, r2
    5aec:	b2da      	uxtb	r2, r3
    5aee:	f24b 7365 	movw	r3, #46949	; 0xb765
    5af2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5af6:	701a      	strb	r2, [r3, #0]
    5af8:	f24b 7366 	movw	r3, #46950	; 0xb766
    5afc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5b00:	781a      	ldrb	r2, [r3, #0]
    5b02:	f24b 7365 	movw	r3, #46949	; 0xb765
    5b06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5b0a:	781b      	ldrb	r3, [r3, #0]
    5b0c:	4413      	add	r3, r2
    5b0e:	b2da      	uxtb	r2, r3
    5b10:	f24b 7366 	movw	r3, #46950	; 0xb766
    5b14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5b18:	701a      	strb	r2, [r3, #0]
    5b1a:	f24b 6361 	movw	r3, #46689	; 0xb661
    5b1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5b22:	781b      	ldrb	r3, [r3, #0]
    5b24:	3301      	adds	r3, #1
    5b26:	b2da      	uxtb	r2, r3
    5b28:	f24b 6361 	movw	r3, #46689	; 0xb661
    5b2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5b30:	701a      	strb	r2, [r3, #0]
    5b32:	f24b 6361 	movw	r3, #46689	; 0xb661
    5b36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5b3a:	781b      	ldrb	r3, [r3, #0]
    5b3c:	2bff      	cmp	r3, #255	; 0xff
    5b3e:	d105      	bne.n	5b4c <send_boot+0xcf0>
    5b40:	f24b 6361 	movw	r3, #46689	; 0xb661
    5b44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5b48:	2200      	movs	r2, #0
    5b4a:	701a      	strb	r2, [r3, #0]
    5b4c:	f24b 6361 	movw	r3, #46689	; 0xb661
    5b50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5b54:	781b      	ldrb	r3, [r3, #0]
    5b56:	461a      	mov	r2, r3
    5b58:	f240 1340 	movw	r3, #320	; 0x140
    5b5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b60:	7819      	ldrb	r1, [r3, #0]
    5b62:	f24b 6364 	movw	r3, #46692	; 0xb664
    5b66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5b6a:	5499      	strb	r1, [r3, r2]
    5b6c:	f240 1340 	movw	r3, #320	; 0x140
    5b70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b74:	781a      	ldrb	r2, [r3, #0]
    5b76:	f24b 7365 	movw	r3, #46949	; 0xb765
    5b7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5b7e:	781b      	ldrb	r3, [r3, #0]
    5b80:	4413      	add	r3, r2
    5b82:	b2da      	uxtb	r2, r3
    5b84:	f24b 7365 	movw	r3, #46949	; 0xb765
    5b88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5b8c:	701a      	strb	r2, [r3, #0]
    5b8e:	f24b 7366 	movw	r3, #46950	; 0xb766
    5b92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5b96:	781a      	ldrb	r2, [r3, #0]
    5b98:	f24b 7365 	movw	r3, #46949	; 0xb765
    5b9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ba0:	781b      	ldrb	r3, [r3, #0]
    5ba2:	4413      	add	r3, r2
    5ba4:	b2da      	uxtb	r2, r3
    5ba6:	f24b 7366 	movw	r3, #46950	; 0xb766
    5baa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5bae:	701a      	strb	r2, [r3, #0]
    5bb0:	f24b 6361 	movw	r3, #46689	; 0xb661
    5bb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5bb8:	781b      	ldrb	r3, [r3, #0]
    5bba:	3301      	adds	r3, #1
    5bbc:	b2da      	uxtb	r2, r3
    5bbe:	f24b 6361 	movw	r3, #46689	; 0xb661
    5bc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5bc6:	701a      	strb	r2, [r3, #0]
    5bc8:	f24b 6361 	movw	r3, #46689	; 0xb661
    5bcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5bd0:	781b      	ldrb	r3, [r3, #0]
    5bd2:	2bff      	cmp	r3, #255	; 0xff
    5bd4:	d105      	bne.n	5be2 <send_boot+0xd86>
    5bd6:	f24b 6361 	movw	r3, #46689	; 0xb661
    5bda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5bde:	2200      	movs	r2, #0
    5be0:	701a      	strb	r2, [r3, #0]
    5be2:	f24b 6361 	movw	r3, #46689	; 0xb661
    5be6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5bea:	781b      	ldrb	r3, [r3, #0]
    5bec:	461a      	mov	r2, r3
    5bee:	f240 1340 	movw	r3, #320	; 0x140
    5bf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5bf6:	7859      	ldrb	r1, [r3, #1]
    5bf8:	f24b 6364 	movw	r3, #46692	; 0xb664
    5bfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5c00:	5499      	strb	r1, [r3, r2]
    5c02:	4b7d      	ldr	r3, [pc, #500]	; (5df8 <send_boot+0xf9c>)
    5c04:	781a      	ldrb	r2, [r3, #0]
    5c06:	f24b 7365 	movw	r3, #46949	; 0xb765
    5c0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5c0e:	781b      	ldrb	r3, [r3, #0]
    5c10:	4413      	add	r3, r2
    5c12:	b2da      	uxtb	r2, r3
    5c14:	f24b 7365 	movw	r3, #46949	; 0xb765
    5c18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5c1c:	701a      	strb	r2, [r3, #0]
    5c1e:	f24b 7366 	movw	r3, #46950	; 0xb766
    5c22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5c26:	781a      	ldrb	r2, [r3, #0]
    5c28:	f24b 7365 	movw	r3, #46949	; 0xb765
    5c2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5c30:	781b      	ldrb	r3, [r3, #0]
    5c32:	4413      	add	r3, r2
    5c34:	b2da      	uxtb	r2, r3
    5c36:	f24b 7366 	movw	r3, #46950	; 0xb766
    5c3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5c3e:	701a      	strb	r2, [r3, #0]
    5c40:	f24b 6361 	movw	r3, #46689	; 0xb661
    5c44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5c48:	781b      	ldrb	r3, [r3, #0]
    5c4a:	3301      	adds	r3, #1
    5c4c:	b2da      	uxtb	r2, r3
    5c4e:	f24b 6361 	movw	r3, #46689	; 0xb661
    5c52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5c56:	701a      	strb	r2, [r3, #0]
    5c58:	f24b 6361 	movw	r3, #46689	; 0xb661
    5c5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5c60:	781b      	ldrb	r3, [r3, #0]
    5c62:	2bff      	cmp	r3, #255	; 0xff
    5c64:	d105      	bne.n	5c72 <send_boot+0xe16>
    5c66:	f24b 6361 	movw	r3, #46689	; 0xb661
    5c6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5c6e:	2200      	movs	r2, #0
    5c70:	701a      	strb	r2, [r3, #0]
    5c72:	f24b 6361 	movw	r3, #46689	; 0xb661
    5c76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5c7a:	781b      	ldrb	r3, [r3, #0]
    5c7c:	461a      	mov	r2, r3
    5c7e:	f24b 7365 	movw	r3, #46949	; 0xb765
    5c82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5c86:	7819      	ldrb	r1, [r3, #0]
    5c88:	f24b 6364 	movw	r3, #46692	; 0xb664
    5c8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5c90:	5499      	strb	r1, [r3, r2]
    5c92:	f24b 6361 	movw	r3, #46689	; 0xb661
    5c96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5c9a:	781b      	ldrb	r3, [r3, #0]
    5c9c:	3301      	adds	r3, #1
    5c9e:	b2da      	uxtb	r2, r3
    5ca0:	f24b 6361 	movw	r3, #46689	; 0xb661
    5ca4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ca8:	701a      	strb	r2, [r3, #0]
    5caa:	f24b 6361 	movw	r3, #46689	; 0xb661
    5cae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5cb2:	781b      	ldrb	r3, [r3, #0]
    5cb4:	2bff      	cmp	r3, #255	; 0xff
    5cb6:	d105      	bne.n	5cc4 <send_boot+0xe68>
    5cb8:	f24b 6361 	movw	r3, #46689	; 0xb661
    5cbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5cc0:	2200      	movs	r2, #0
    5cc2:	701a      	strb	r2, [r3, #0]
    5cc4:	f24b 6361 	movw	r3, #46689	; 0xb661
    5cc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ccc:	781b      	ldrb	r3, [r3, #0]
    5cce:	461a      	mov	r2, r3
    5cd0:	f24b 7366 	movw	r3, #46950	; 0xb766
    5cd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5cd8:	7819      	ldrb	r1, [r3, #0]
    5cda:	f24b 6364 	movw	r3, #46692	; 0xb664
    5cde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ce2:	5499      	strb	r1, [r3, r2]
    5ce4:	f24b 6361 	movw	r3, #46689	; 0xb661
    5ce8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5cec:	781b      	ldrb	r3, [r3, #0]
    5cee:	3301      	adds	r3, #1
    5cf0:	b2da      	uxtb	r2, r3
    5cf2:	f24b 6361 	movw	r3, #46689	; 0xb661
    5cf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5cfa:	701a      	strb	r2, [r3, #0]
    5cfc:	f24b 6361 	movw	r3, #46689	; 0xb661
    5d00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d04:	781b      	ldrb	r3, [r3, #0]
    5d06:	2bff      	cmp	r3, #255	; 0xff
    5d08:	d105      	bne.n	5d16 <send_boot+0xeba>
    5d0a:	f24b 6361 	movw	r3, #46689	; 0xb661
    5d0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d12:	2200      	movs	r2, #0
    5d14:	701a      	strb	r2, [r3, #0]
    5d16:	f248 0339 	movw	r3, #32825	; 0x8039
    5d1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d1e:	781b      	ldrb	r3, [r3, #0]
    5d20:	b2db      	uxtb	r3, r3
    5d22:	f003 0310 	and.w	r3, r3, #16
    5d26:	2b00      	cmp	r3, #0
    5d28:	d15a      	bne.n	5de0 <send_boot+0xf84>
    5d2a:	f24b 6362 	movw	r3, #46690	; 0xb662
    5d2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d32:	781b      	ldrb	r3, [r3, #0]
    5d34:	b2db      	uxtb	r3, r3
    5d36:	461a      	mov	r2, r3
    5d38:	f24b 6364 	movw	r3, #46692	; 0xb664
    5d3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d40:	5c9a      	ldrb	r2, [r3, r2]
    5d42:	f24b 7363 	movw	r3, #46947	; 0xb763
    5d46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d4a:	701a      	strb	r2, [r3, #0]
    5d4c:	f24b 7364 	movw	r3, #46948	; 0xb764
    5d50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d54:	2200      	movs	r2, #0
    5d56:	701a      	strb	r2, [r3, #0]
    5d58:	f24b 6362 	movw	r3, #46690	; 0xb662
    5d5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d60:	781b      	ldrb	r3, [r3, #0]
    5d62:	b2db      	uxtb	r3, r3
    5d64:	3301      	adds	r3, #1
    5d66:	b2da      	uxtb	r2, r3
    5d68:	f24b 6362 	movw	r3, #46690	; 0xb662
    5d6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d70:	701a      	strb	r2, [r3, #0]
    5d72:	f24b 6362 	movw	r3, #46690	; 0xb662
    5d76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d7a:	781b      	ldrb	r3, [r3, #0]
    5d7c:	b2db      	uxtb	r3, r3
    5d7e:	2bff      	cmp	r3, #255	; 0xff
    5d80:	d105      	bne.n	5d8e <send_boot+0xf32>
    5d82:	f24b 6362 	movw	r3, #46690	; 0xb662
    5d86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d8a:	2200      	movs	r2, #0
    5d8c:	701a      	strb	r2, [r3, #0]
    5d8e:	f248 0338 	movw	r3, #32824	; 0x8038
    5d92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d96:	f248 0238 	movw	r2, #32824	; 0x8038
    5d9a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5d9e:	7812      	ldrb	r2, [r2, #0]
    5da0:	b2d2      	uxtb	r2, r2
    5da2:	f042 0201 	orr.w	r2, r2, #1
    5da6:	b2d2      	uxtb	r2, r2
    5da8:	701a      	strb	r2, [r3, #0]
    5daa:	f248 0339 	movw	r3, #32825	; 0x8039
    5dae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5db2:	f248 0239 	movw	r2, #32825	; 0x8039
    5db6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5dba:	7812      	ldrb	r2, [r2, #0]
    5dbc:	b2d2      	uxtb	r2, r2
    5dbe:	f042 0210 	orr.w	r2, r2, #16
    5dc2:	b2d2      	uxtb	r2, r2
    5dc4:	701a      	strb	r2, [r3, #0]
    5dc6:	e00b      	b.n	5de0 <send_boot+0xf84>
    5dc8:	f24b 6360 	movw	r3, #46688	; 0xb660
    5dcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5dd0:	781b      	ldrb	r3, [r3, #0]
    5dd2:	3301      	adds	r3, #1
    5dd4:	b2da      	uxtb	r2, r3
    5dd6:	f24b 6360 	movw	r3, #46688	; 0xb660
    5dda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5dde:	701a      	strb	r2, [r3, #0]
      boot = FALSE;
    5de0:	f240 1339 	movw	r3, #313	; 0x139
    5de4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5de8:	2200      	movs	r2, #0
    5dea:	701a      	strb	r2, [r3, #0]
  }
}
    5dec:	46bd      	mov	sp, r7
    5dee:	f85d 7b04 	ldr.w	r7, [sp], #4
    5df2:	4770      	bx	lr
    5df4:	2000013f 	.word	0x2000013f
    5df8:	20000141 	.word	0x20000141

00005dfc <send_attitude>:
void send_attitude(void){ //499ms
    5dfc:	b480      	push	{r7}
    5dfe:	af00      	add	r7, sp, #0
    // add by wanbo
  //if(!boot)
  {
    count++;
    5e00:	f24b 6359 	movw	r3, #46681	; 0xb659
    5e04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e08:	781b      	ldrb	r3, [r3, #0]
    5e0a:	3301      	adds	r3, #1
    5e0c:	b2da      	uxtb	r2, r3
    5e0e:	f24b 6359 	movw	r3, #46681	; 0xb659
    5e12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e16:	701a      	strb	r2, [r3, #0]
    if (count == 250) count = 0;
    5e18:	f24b 6359 	movw	r3, #46681	; 0xb659
    5e1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e20:	781b      	ldrb	r3, [r3, #0]
    5e22:	2bfa      	cmp	r3, #250	; 0xfa
    5e24:	d105      	bne.n	5e32 <send_attitude+0x36>
    5e26:	f24b 6359 	movw	r3, #46681	; 0xb659
    5e2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e2e:	2200      	movs	r2, #0
    5e30:	701a      	strb	r2, [r3, #0]
    if (count % 5 == 0) 
    5e32:	f24b 6359 	movw	r3, #46681	; 0xb659
    5e36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e3a:	781a      	ldrb	r2, [r3, #0]
    5e3c:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    5e40:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    5e44:	fba3 1302 	umull	r1, r3, r3, r2
    5e48:	0899      	lsrs	r1, r3, #2
    5e4a:	460b      	mov	r3, r1
    5e4c:	009b      	lsls	r3, r3, #2
    5e4e:	440b      	add	r3, r1
    5e50:	1ad3      	subs	r3, r2, r3
    5e52:	b2db      	uxtb	r3, r3
    5e54:	2b00      	cmp	r3, #0
    5e56:	f040 84c1 	bne.w	67dc <send_attitude+0x9e0>
       PERIODIC_SEND_ATTITUDE(); 
    5e5a:	f24b 6361 	movw	r3, #46689	; 0xb661
    5e5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e62:	781a      	ldrb	r2, [r3, #0]
    5e64:	f24b 6362 	movw	r3, #46690	; 0xb662
    5e68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e6c:	781b      	ldrb	r3, [r3, #0]
    5e6e:	b2db      	uxtb	r3, r3
    5e70:	429a      	cmp	r2, r3
    5e72:	d313      	bcc.n	5e9c <send_attitude+0xa0>
    5e74:	f24b 6362 	movw	r3, #46690	; 0xb662
    5e78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e7c:	781b      	ldrb	r3, [r3, #0]
    5e7e:	b2db      	uxtb	r3, r3
    5e80:	461a      	mov	r2, r3
    5e82:	f24b 6361 	movw	r3, #46689	; 0xb661
    5e86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e8a:	781b      	ldrb	r3, [r3, #0]
    5e8c:	1ad3      	subs	r3, r2, r3
    5e8e:	33ff      	adds	r3, #255	; 0xff
    5e90:	2b10      	cmp	r3, #16
    5e92:	bfd4      	ite	le
    5e94:	2300      	movle	r3, #0
    5e96:	2301      	movgt	r3, #1
    5e98:	b2db      	uxtb	r3, r3
    5e9a:	e011      	b.n	5ec0 <send_attitude+0xc4>
    5e9c:	f24b 6362 	movw	r3, #46690	; 0xb662
    5ea0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ea4:	781b      	ldrb	r3, [r3, #0]
    5ea6:	b2db      	uxtb	r3, r3
    5ea8:	461a      	mov	r2, r3
    5eaa:	f24b 6361 	movw	r3, #46689	; 0xb661
    5eae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5eb2:	781b      	ldrb	r3, [r3, #0]
    5eb4:	1ad3      	subs	r3, r2, r3
    5eb6:	2b10      	cmp	r3, #16
    5eb8:	bfd4      	ite	le
    5eba:	2300      	movle	r3, #0
    5ebc:	2301      	movgt	r3, #1
    5ebe:	b2db      	uxtb	r3, r3
    5ec0:	2b00      	cmp	r3, #0
    5ec2:	f000 847f 	beq.w	67c4 <send_attitude+0x9c8>
    5ec6:	f24b 6361 	movw	r3, #46689	; 0xb661
    5eca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ece:	781b      	ldrb	r3, [r3, #0]
    5ed0:	461a      	mov	r2, r3
    5ed2:	f24b 6364 	movw	r3, #46692	; 0xb664
    5ed6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5eda:	2105      	movs	r1, #5
    5edc:	5499      	strb	r1, [r3, r2]
    5ede:	f24b 6361 	movw	r3, #46689	; 0xb661
    5ee2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ee6:	781b      	ldrb	r3, [r3, #0]
    5ee8:	3301      	adds	r3, #1
    5eea:	b2da      	uxtb	r2, r3
    5eec:	f24b 6361 	movw	r3, #46689	; 0xb661
    5ef0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ef4:	701a      	strb	r2, [r3, #0]
    5ef6:	f24b 6361 	movw	r3, #46689	; 0xb661
    5efa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5efe:	781b      	ldrb	r3, [r3, #0]
    5f00:	2bff      	cmp	r3, #255	; 0xff
    5f02:	d105      	bne.n	5f10 <send_attitude+0x114>
    5f04:	f24b 6361 	movw	r3, #46689	; 0xb661
    5f08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f0c:	2200      	movs	r2, #0
    5f0e:	701a      	strb	r2, [r3, #0]
    5f10:	f24b 6361 	movw	r3, #46689	; 0xb661
    5f14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f18:	781b      	ldrb	r3, [r3, #0]
    5f1a:	461a      	mov	r2, r3
    5f1c:	f24b 6364 	movw	r3, #46692	; 0xb664
    5f20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f24:	2106      	movs	r1, #6
    5f26:	5499      	strb	r1, [r3, r2]
    5f28:	f24b 6361 	movw	r3, #46689	; 0xb661
    5f2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f30:	781b      	ldrb	r3, [r3, #0]
    5f32:	3301      	adds	r3, #1
    5f34:	b2da      	uxtb	r2, r3
    5f36:	f24b 6361 	movw	r3, #46689	; 0xb661
    5f3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f3e:	701a      	strb	r2, [r3, #0]
    5f40:	f24b 6361 	movw	r3, #46689	; 0xb661
    5f44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f48:	781b      	ldrb	r3, [r3, #0]
    5f4a:	2bff      	cmp	r3, #255	; 0xff
    5f4c:	d105      	bne.n	5f5a <send_attitude+0x15e>
    5f4e:	f24b 6361 	movw	r3, #46689	; 0xb661
    5f52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f56:	2200      	movs	r2, #0
    5f58:	701a      	strb	r2, [r3, #0]
    5f5a:	f24b 7365 	movw	r3, #46949	; 0xb765
    5f5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f62:	2206      	movs	r2, #6
    5f64:	701a      	strb	r2, [r3, #0]
    5f66:	f24b 7366 	movw	r3, #46950	; 0xb766
    5f6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f6e:	2206      	movs	r2, #6
    5f70:	701a      	strb	r2, [r3, #0]
    5f72:	f24b 6361 	movw	r3, #46689	; 0xb661
    5f76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f7a:	781b      	ldrb	r3, [r3, #0]
    5f7c:	461a      	mov	r2, r3
    5f7e:	f64b 4320 	movw	r3, #48160	; 0xbc20
    5f82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f86:	7819      	ldrb	r1, [r3, #0]
    5f88:	f24b 6364 	movw	r3, #46692	; 0xb664
    5f8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f90:	5499      	strb	r1, [r3, r2]
    5f92:	f64b 4320 	movw	r3, #48160	; 0xbc20
    5f96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f9a:	781a      	ldrb	r2, [r3, #0]
    5f9c:	f24b 7365 	movw	r3, #46949	; 0xb765
    5fa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5fa4:	781b      	ldrb	r3, [r3, #0]
    5fa6:	4413      	add	r3, r2
    5fa8:	b2da      	uxtb	r2, r3
    5faa:	f24b 7365 	movw	r3, #46949	; 0xb765
    5fae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5fb2:	701a      	strb	r2, [r3, #0]
    5fb4:	f24b 7366 	movw	r3, #46950	; 0xb766
    5fb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5fbc:	781a      	ldrb	r2, [r3, #0]
    5fbe:	f24b 7365 	movw	r3, #46949	; 0xb765
    5fc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5fc6:	781b      	ldrb	r3, [r3, #0]
    5fc8:	4413      	add	r3, r2
    5fca:	b2da      	uxtb	r2, r3
    5fcc:	f24b 7366 	movw	r3, #46950	; 0xb766
    5fd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5fd4:	701a      	strb	r2, [r3, #0]
    5fd6:	f24b 6361 	movw	r3, #46689	; 0xb661
    5fda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5fde:	781b      	ldrb	r3, [r3, #0]
    5fe0:	3301      	adds	r3, #1
    5fe2:	b2da      	uxtb	r2, r3
    5fe4:	f24b 6361 	movw	r3, #46689	; 0xb661
    5fe8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5fec:	701a      	strb	r2, [r3, #0]
    5fee:	f24b 6361 	movw	r3, #46689	; 0xb661
    5ff2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ff6:	781b      	ldrb	r3, [r3, #0]
    5ff8:	2bff      	cmp	r3, #255	; 0xff
    5ffa:	d105      	bne.n	6008 <send_attitude+0x20c>
    5ffc:	f24b 6361 	movw	r3, #46689	; 0xb661
    6000:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6004:	2200      	movs	r2, #0
    6006:	701a      	strb	r2, [r3, #0]
    6008:	f24b 6361 	movw	r3, #46689	; 0xb661
    600c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6010:	781b      	ldrb	r3, [r3, #0]
    6012:	461a      	mov	r2, r3
    6014:	f64b 4320 	movw	r3, #48160	; 0xbc20
    6018:	f2c2 0304 	movt	r3, #8196	; 0x2004
    601c:	7859      	ldrb	r1, [r3, #1]
    601e:	f24b 6364 	movw	r3, #46692	; 0xb664
    6022:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6026:	5499      	strb	r1, [r3, r2]
    6028:	4bd1      	ldr	r3, [pc, #836]	; (6370 <send_attitude+0x574>)
    602a:	781a      	ldrb	r2, [r3, #0]
    602c:	f24b 7365 	movw	r3, #46949	; 0xb765
    6030:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6034:	781b      	ldrb	r3, [r3, #0]
    6036:	4413      	add	r3, r2
    6038:	b2da      	uxtb	r2, r3
    603a:	f24b 7365 	movw	r3, #46949	; 0xb765
    603e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6042:	701a      	strb	r2, [r3, #0]
    6044:	f24b 7366 	movw	r3, #46950	; 0xb766
    6048:	f2c2 0304 	movt	r3, #8196	; 0x2004
    604c:	781a      	ldrb	r2, [r3, #0]
    604e:	f24b 7365 	movw	r3, #46949	; 0xb765
    6052:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6056:	781b      	ldrb	r3, [r3, #0]
    6058:	4413      	add	r3, r2
    605a:	b2da      	uxtb	r2, r3
    605c:	f24b 7366 	movw	r3, #46950	; 0xb766
    6060:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6064:	701a      	strb	r2, [r3, #0]
    6066:	f24b 6361 	movw	r3, #46689	; 0xb661
    606a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    606e:	781b      	ldrb	r3, [r3, #0]
    6070:	3301      	adds	r3, #1
    6072:	b2da      	uxtb	r2, r3
    6074:	f24b 6361 	movw	r3, #46689	; 0xb661
    6078:	f2c2 0304 	movt	r3, #8196	; 0x2004
    607c:	701a      	strb	r2, [r3, #0]
    607e:	f24b 6361 	movw	r3, #46689	; 0xb661
    6082:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6086:	781b      	ldrb	r3, [r3, #0]
    6088:	2bff      	cmp	r3, #255	; 0xff
    608a:	d105      	bne.n	6098 <send_attitude+0x29c>
    608c:	f24b 6361 	movw	r3, #46689	; 0xb661
    6090:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6094:	2200      	movs	r2, #0
    6096:	701a      	strb	r2, [r3, #0]
    6098:	f24b 6361 	movw	r3, #46689	; 0xb661
    609c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60a0:	781b      	ldrb	r3, [r3, #0]
    60a2:	461a      	mov	r2, r3
    60a4:	f64b 4320 	movw	r3, #48160	; 0xbc20
    60a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60ac:	7899      	ldrb	r1, [r3, #2]
    60ae:	f24b 6364 	movw	r3, #46692	; 0xb664
    60b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60b6:	5499      	strb	r1, [r3, r2]
    60b8:	4bae      	ldr	r3, [pc, #696]	; (6374 <send_attitude+0x578>)
    60ba:	781a      	ldrb	r2, [r3, #0]
    60bc:	f24b 7365 	movw	r3, #46949	; 0xb765
    60c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60c4:	781b      	ldrb	r3, [r3, #0]
    60c6:	4413      	add	r3, r2
    60c8:	b2da      	uxtb	r2, r3
    60ca:	f24b 7365 	movw	r3, #46949	; 0xb765
    60ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60d2:	701a      	strb	r2, [r3, #0]
    60d4:	f24b 7366 	movw	r3, #46950	; 0xb766
    60d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60dc:	781a      	ldrb	r2, [r3, #0]
    60de:	f24b 7365 	movw	r3, #46949	; 0xb765
    60e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60e6:	781b      	ldrb	r3, [r3, #0]
    60e8:	4413      	add	r3, r2
    60ea:	b2da      	uxtb	r2, r3
    60ec:	f24b 7366 	movw	r3, #46950	; 0xb766
    60f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60f4:	701a      	strb	r2, [r3, #0]
    60f6:	f24b 6361 	movw	r3, #46689	; 0xb661
    60fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60fe:	781b      	ldrb	r3, [r3, #0]
    6100:	3301      	adds	r3, #1
    6102:	b2da      	uxtb	r2, r3
    6104:	f24b 6361 	movw	r3, #46689	; 0xb661
    6108:	f2c2 0304 	movt	r3, #8196	; 0x2004
    610c:	701a      	strb	r2, [r3, #0]
    610e:	f24b 6361 	movw	r3, #46689	; 0xb661
    6112:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6116:	781b      	ldrb	r3, [r3, #0]
    6118:	2bff      	cmp	r3, #255	; 0xff
    611a:	d105      	bne.n	6128 <send_attitude+0x32c>
    611c:	f24b 6361 	movw	r3, #46689	; 0xb661
    6120:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6124:	2200      	movs	r2, #0
    6126:	701a      	strb	r2, [r3, #0]
    6128:	f24b 6361 	movw	r3, #46689	; 0xb661
    612c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6130:	781b      	ldrb	r3, [r3, #0]
    6132:	461a      	mov	r2, r3
    6134:	f64b 4320 	movw	r3, #48160	; 0xbc20
    6138:	f2c2 0304 	movt	r3, #8196	; 0x2004
    613c:	78d9      	ldrb	r1, [r3, #3]
    613e:	f24b 6364 	movw	r3, #46692	; 0xb664
    6142:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6146:	5499      	strb	r1, [r3, r2]
    6148:	4b8b      	ldr	r3, [pc, #556]	; (6378 <send_attitude+0x57c>)
    614a:	781a      	ldrb	r2, [r3, #0]
    614c:	f24b 7365 	movw	r3, #46949	; 0xb765
    6150:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6154:	781b      	ldrb	r3, [r3, #0]
    6156:	4413      	add	r3, r2
    6158:	b2da      	uxtb	r2, r3
    615a:	f24b 7365 	movw	r3, #46949	; 0xb765
    615e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6162:	701a      	strb	r2, [r3, #0]
    6164:	f24b 7366 	movw	r3, #46950	; 0xb766
    6168:	f2c2 0304 	movt	r3, #8196	; 0x2004
    616c:	781a      	ldrb	r2, [r3, #0]
    616e:	f24b 7365 	movw	r3, #46949	; 0xb765
    6172:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6176:	781b      	ldrb	r3, [r3, #0]
    6178:	4413      	add	r3, r2
    617a:	b2da      	uxtb	r2, r3
    617c:	f24b 7366 	movw	r3, #46950	; 0xb766
    6180:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6184:	701a      	strb	r2, [r3, #0]
    6186:	f24b 6361 	movw	r3, #46689	; 0xb661
    618a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    618e:	781b      	ldrb	r3, [r3, #0]
    6190:	3301      	adds	r3, #1
    6192:	b2da      	uxtb	r2, r3
    6194:	f24b 6361 	movw	r3, #46689	; 0xb661
    6198:	f2c2 0304 	movt	r3, #8196	; 0x2004
    619c:	701a      	strb	r2, [r3, #0]
    619e:	f24b 6361 	movw	r3, #46689	; 0xb661
    61a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61a6:	781b      	ldrb	r3, [r3, #0]
    61a8:	2bff      	cmp	r3, #255	; 0xff
    61aa:	d105      	bne.n	61b8 <send_attitude+0x3bc>
    61ac:	f24b 6361 	movw	r3, #46689	; 0xb661
    61b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61b4:	2200      	movs	r2, #0
    61b6:	701a      	strb	r2, [r3, #0]
    61b8:	f24b 6361 	movw	r3, #46689	; 0xb661
    61bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61c0:	781b      	ldrb	r3, [r3, #0]
    61c2:	461a      	mov	r2, r3
    61c4:	f64b 4324 	movw	r3, #48164	; 0xbc24
    61c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61cc:	7819      	ldrb	r1, [r3, #0]
    61ce:	f24b 6364 	movw	r3, #46692	; 0xb664
    61d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61d6:	5499      	strb	r1, [r3, r2]
    61d8:	f64b 4324 	movw	r3, #48164	; 0xbc24
    61dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61e0:	781a      	ldrb	r2, [r3, #0]
    61e2:	f24b 7365 	movw	r3, #46949	; 0xb765
    61e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61ea:	781b      	ldrb	r3, [r3, #0]
    61ec:	4413      	add	r3, r2
    61ee:	b2da      	uxtb	r2, r3
    61f0:	f24b 7365 	movw	r3, #46949	; 0xb765
    61f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61f8:	701a      	strb	r2, [r3, #0]
    61fa:	f24b 7366 	movw	r3, #46950	; 0xb766
    61fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6202:	781a      	ldrb	r2, [r3, #0]
    6204:	f24b 7365 	movw	r3, #46949	; 0xb765
    6208:	f2c2 0304 	movt	r3, #8196	; 0x2004
    620c:	781b      	ldrb	r3, [r3, #0]
    620e:	4413      	add	r3, r2
    6210:	b2da      	uxtb	r2, r3
    6212:	f24b 7366 	movw	r3, #46950	; 0xb766
    6216:	f2c2 0304 	movt	r3, #8196	; 0x2004
    621a:	701a      	strb	r2, [r3, #0]
    621c:	f24b 6361 	movw	r3, #46689	; 0xb661
    6220:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6224:	781b      	ldrb	r3, [r3, #0]
    6226:	3301      	adds	r3, #1
    6228:	b2da      	uxtb	r2, r3
    622a:	f24b 6361 	movw	r3, #46689	; 0xb661
    622e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6232:	701a      	strb	r2, [r3, #0]
    6234:	f24b 6361 	movw	r3, #46689	; 0xb661
    6238:	f2c2 0304 	movt	r3, #8196	; 0x2004
    623c:	781b      	ldrb	r3, [r3, #0]
    623e:	2bff      	cmp	r3, #255	; 0xff
    6240:	d105      	bne.n	624e <send_attitude+0x452>
    6242:	f24b 6361 	movw	r3, #46689	; 0xb661
    6246:	f2c2 0304 	movt	r3, #8196	; 0x2004
    624a:	2200      	movs	r2, #0
    624c:	701a      	strb	r2, [r3, #0]
    624e:	f24b 6361 	movw	r3, #46689	; 0xb661
    6252:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6256:	781b      	ldrb	r3, [r3, #0]
    6258:	461a      	mov	r2, r3
    625a:	f64b 4324 	movw	r3, #48164	; 0xbc24
    625e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6262:	7859      	ldrb	r1, [r3, #1]
    6264:	f24b 6364 	movw	r3, #46692	; 0xb664
    6268:	f2c2 0304 	movt	r3, #8196	; 0x2004
    626c:	5499      	strb	r1, [r3, r2]
    626e:	4b43      	ldr	r3, [pc, #268]	; (637c <send_attitude+0x580>)
    6270:	781a      	ldrb	r2, [r3, #0]
    6272:	f24b 7365 	movw	r3, #46949	; 0xb765
    6276:	f2c2 0304 	movt	r3, #8196	; 0x2004
    627a:	781b      	ldrb	r3, [r3, #0]
    627c:	4413      	add	r3, r2
    627e:	b2da      	uxtb	r2, r3
    6280:	f24b 7365 	movw	r3, #46949	; 0xb765
    6284:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6288:	701a      	strb	r2, [r3, #0]
    628a:	f24b 7366 	movw	r3, #46950	; 0xb766
    628e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6292:	781a      	ldrb	r2, [r3, #0]
    6294:	f24b 7365 	movw	r3, #46949	; 0xb765
    6298:	f2c2 0304 	movt	r3, #8196	; 0x2004
    629c:	781b      	ldrb	r3, [r3, #0]
    629e:	4413      	add	r3, r2
    62a0:	b2da      	uxtb	r2, r3
    62a2:	f24b 7366 	movw	r3, #46950	; 0xb766
    62a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62aa:	701a      	strb	r2, [r3, #0]
    62ac:	f24b 6361 	movw	r3, #46689	; 0xb661
    62b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62b4:	781b      	ldrb	r3, [r3, #0]
    62b6:	3301      	adds	r3, #1
    62b8:	b2da      	uxtb	r2, r3
    62ba:	f24b 6361 	movw	r3, #46689	; 0xb661
    62be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62c2:	701a      	strb	r2, [r3, #0]
    62c4:	f24b 6361 	movw	r3, #46689	; 0xb661
    62c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62cc:	781b      	ldrb	r3, [r3, #0]
    62ce:	2bff      	cmp	r3, #255	; 0xff
    62d0:	d105      	bne.n	62de <send_attitude+0x4e2>
    62d2:	f24b 6361 	movw	r3, #46689	; 0xb661
    62d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62da:	2200      	movs	r2, #0
    62dc:	701a      	strb	r2, [r3, #0]
    62de:	f24b 6361 	movw	r3, #46689	; 0xb661
    62e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62e6:	781b      	ldrb	r3, [r3, #0]
    62e8:	461a      	mov	r2, r3
    62ea:	f64b 4324 	movw	r3, #48164	; 0xbc24
    62ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62f2:	7899      	ldrb	r1, [r3, #2]
    62f4:	f24b 6364 	movw	r3, #46692	; 0xb664
    62f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62fc:	5499      	strb	r1, [r3, r2]
    62fe:	4b20      	ldr	r3, [pc, #128]	; (6380 <send_attitude+0x584>)
    6300:	781a      	ldrb	r2, [r3, #0]
    6302:	f24b 7365 	movw	r3, #46949	; 0xb765
    6306:	f2c2 0304 	movt	r3, #8196	; 0x2004
    630a:	781b      	ldrb	r3, [r3, #0]
    630c:	4413      	add	r3, r2
    630e:	b2da      	uxtb	r2, r3
    6310:	f24b 7365 	movw	r3, #46949	; 0xb765
    6314:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6318:	701a      	strb	r2, [r3, #0]
    631a:	f24b 7366 	movw	r3, #46950	; 0xb766
    631e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6322:	781a      	ldrb	r2, [r3, #0]
    6324:	f24b 7365 	movw	r3, #46949	; 0xb765
    6328:	f2c2 0304 	movt	r3, #8196	; 0x2004
    632c:	781b      	ldrb	r3, [r3, #0]
    632e:	4413      	add	r3, r2
    6330:	b2da      	uxtb	r2, r3
    6332:	f24b 7366 	movw	r3, #46950	; 0xb766
    6336:	f2c2 0304 	movt	r3, #8196	; 0x2004
    633a:	701a      	strb	r2, [r3, #0]
    633c:	f24b 6361 	movw	r3, #46689	; 0xb661
    6340:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6344:	781b      	ldrb	r3, [r3, #0]
    6346:	3301      	adds	r3, #1
    6348:	b2da      	uxtb	r2, r3
    634a:	f24b 6361 	movw	r3, #46689	; 0xb661
    634e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6352:	701a      	strb	r2, [r3, #0]
    6354:	f24b 6361 	movw	r3, #46689	; 0xb661
    6358:	f2c2 0304 	movt	r3, #8196	; 0x2004
    635c:	781b      	ldrb	r3, [r3, #0]
    635e:	2bff      	cmp	r3, #255	; 0xff
    6360:	d110      	bne.n	6384 <send_attitude+0x588>
    6362:	f24b 6361 	movw	r3, #46689	; 0xb661
    6366:	f2c2 0304 	movt	r3, #8196	; 0x2004
    636a:	2200      	movs	r2, #0
    636c:	701a      	strb	r2, [r3, #0]
    636e:	e009      	b.n	6384 <send_attitude+0x588>
    6370:	2004bc21 	.word	0x2004bc21
    6374:	2004bc22 	.word	0x2004bc22
    6378:	2004bc23 	.word	0x2004bc23
    637c:	2004bc25 	.word	0x2004bc25
    6380:	2004bc26 	.word	0x2004bc26
    6384:	f24b 6361 	movw	r3, #46689	; 0xb661
    6388:	f2c2 0304 	movt	r3, #8196	; 0x2004
    638c:	781b      	ldrb	r3, [r3, #0]
    638e:	461a      	mov	r2, r3
    6390:	f64b 4324 	movw	r3, #48164	; 0xbc24
    6394:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6398:	78d9      	ldrb	r1, [r3, #3]
    639a:	f24b 6364 	movw	r3, #46692	; 0xb664
    639e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63a2:	5499      	strb	r1, [r3, r2]
    63a4:	4bc2      	ldr	r3, [pc, #776]	; (66b0 <send_attitude+0x8b4>)
    63a6:	781a      	ldrb	r2, [r3, #0]
    63a8:	f24b 7365 	movw	r3, #46949	; 0xb765
    63ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63b0:	781b      	ldrb	r3, [r3, #0]
    63b2:	4413      	add	r3, r2
    63b4:	b2da      	uxtb	r2, r3
    63b6:	f24b 7365 	movw	r3, #46949	; 0xb765
    63ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63be:	701a      	strb	r2, [r3, #0]
    63c0:	f24b 7366 	movw	r3, #46950	; 0xb766
    63c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63c8:	781a      	ldrb	r2, [r3, #0]
    63ca:	f24b 7365 	movw	r3, #46949	; 0xb765
    63ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63d2:	781b      	ldrb	r3, [r3, #0]
    63d4:	4413      	add	r3, r2
    63d6:	b2da      	uxtb	r2, r3
    63d8:	f24b 7366 	movw	r3, #46950	; 0xb766
    63dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63e0:	701a      	strb	r2, [r3, #0]
    63e2:	f24b 6361 	movw	r3, #46689	; 0xb661
    63e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63ea:	781b      	ldrb	r3, [r3, #0]
    63ec:	3301      	adds	r3, #1
    63ee:	b2da      	uxtb	r2, r3
    63f0:	f24b 6361 	movw	r3, #46689	; 0xb661
    63f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63f8:	701a      	strb	r2, [r3, #0]
    63fa:	f24b 6361 	movw	r3, #46689	; 0xb661
    63fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6402:	781b      	ldrb	r3, [r3, #0]
    6404:	2bff      	cmp	r3, #255	; 0xff
    6406:	d105      	bne.n	6414 <send_attitude+0x618>
    6408:	f24b 6361 	movw	r3, #46689	; 0xb661
    640c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6410:	2200      	movs	r2, #0
    6412:	701a      	strb	r2, [r3, #0]
    6414:	f24b 6361 	movw	r3, #46689	; 0xb661
    6418:	f2c2 0304 	movt	r3, #8196	; 0x2004
    641c:	781b      	ldrb	r3, [r3, #0]
    641e:	461a      	mov	r2, r3
    6420:	f64b 4328 	movw	r3, #48168	; 0xbc28
    6424:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6428:	7819      	ldrb	r1, [r3, #0]
    642a:	f24b 6364 	movw	r3, #46692	; 0xb664
    642e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6432:	5499      	strb	r1, [r3, r2]
    6434:	f64b 4328 	movw	r3, #48168	; 0xbc28
    6438:	f2c2 0304 	movt	r3, #8196	; 0x2004
    643c:	781a      	ldrb	r2, [r3, #0]
    643e:	f24b 7365 	movw	r3, #46949	; 0xb765
    6442:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6446:	781b      	ldrb	r3, [r3, #0]
    6448:	4413      	add	r3, r2
    644a:	b2da      	uxtb	r2, r3
    644c:	f24b 7365 	movw	r3, #46949	; 0xb765
    6450:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6454:	701a      	strb	r2, [r3, #0]
    6456:	f24b 7366 	movw	r3, #46950	; 0xb766
    645a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    645e:	781a      	ldrb	r2, [r3, #0]
    6460:	f24b 7365 	movw	r3, #46949	; 0xb765
    6464:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6468:	781b      	ldrb	r3, [r3, #0]
    646a:	4413      	add	r3, r2
    646c:	b2da      	uxtb	r2, r3
    646e:	f24b 7366 	movw	r3, #46950	; 0xb766
    6472:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6476:	701a      	strb	r2, [r3, #0]
    6478:	f24b 6361 	movw	r3, #46689	; 0xb661
    647c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6480:	781b      	ldrb	r3, [r3, #0]
    6482:	3301      	adds	r3, #1
    6484:	b2da      	uxtb	r2, r3
    6486:	f24b 6361 	movw	r3, #46689	; 0xb661
    648a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    648e:	701a      	strb	r2, [r3, #0]
    6490:	f24b 6361 	movw	r3, #46689	; 0xb661
    6494:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6498:	781b      	ldrb	r3, [r3, #0]
    649a:	2bff      	cmp	r3, #255	; 0xff
    649c:	d105      	bne.n	64aa <send_attitude+0x6ae>
    649e:	f24b 6361 	movw	r3, #46689	; 0xb661
    64a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64a6:	2200      	movs	r2, #0
    64a8:	701a      	strb	r2, [r3, #0]
    64aa:	f24b 6361 	movw	r3, #46689	; 0xb661
    64ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64b2:	781b      	ldrb	r3, [r3, #0]
    64b4:	461a      	mov	r2, r3
    64b6:	f64b 4328 	movw	r3, #48168	; 0xbc28
    64ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64be:	7859      	ldrb	r1, [r3, #1]
    64c0:	f24b 6364 	movw	r3, #46692	; 0xb664
    64c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64c8:	5499      	strb	r1, [r3, r2]
    64ca:	4b7a      	ldr	r3, [pc, #488]	; (66b4 <send_attitude+0x8b8>)
    64cc:	781a      	ldrb	r2, [r3, #0]
    64ce:	f24b 7365 	movw	r3, #46949	; 0xb765
    64d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64d6:	781b      	ldrb	r3, [r3, #0]
    64d8:	4413      	add	r3, r2
    64da:	b2da      	uxtb	r2, r3
    64dc:	f24b 7365 	movw	r3, #46949	; 0xb765
    64e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64e4:	701a      	strb	r2, [r3, #0]
    64e6:	f24b 7366 	movw	r3, #46950	; 0xb766
    64ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64ee:	781a      	ldrb	r2, [r3, #0]
    64f0:	f24b 7365 	movw	r3, #46949	; 0xb765
    64f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64f8:	781b      	ldrb	r3, [r3, #0]
    64fa:	4413      	add	r3, r2
    64fc:	b2da      	uxtb	r2, r3
    64fe:	f24b 7366 	movw	r3, #46950	; 0xb766
    6502:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6506:	701a      	strb	r2, [r3, #0]
    6508:	f24b 6361 	movw	r3, #46689	; 0xb661
    650c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6510:	781b      	ldrb	r3, [r3, #0]
    6512:	3301      	adds	r3, #1
    6514:	b2da      	uxtb	r2, r3
    6516:	f24b 6361 	movw	r3, #46689	; 0xb661
    651a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    651e:	701a      	strb	r2, [r3, #0]
    6520:	f24b 6361 	movw	r3, #46689	; 0xb661
    6524:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6528:	781b      	ldrb	r3, [r3, #0]
    652a:	2bff      	cmp	r3, #255	; 0xff
    652c:	d105      	bne.n	653a <send_attitude+0x73e>
    652e:	f24b 6361 	movw	r3, #46689	; 0xb661
    6532:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6536:	2200      	movs	r2, #0
    6538:	701a      	strb	r2, [r3, #0]
    653a:	f24b 6361 	movw	r3, #46689	; 0xb661
    653e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6542:	781b      	ldrb	r3, [r3, #0]
    6544:	461a      	mov	r2, r3
    6546:	f64b 4328 	movw	r3, #48168	; 0xbc28
    654a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    654e:	7899      	ldrb	r1, [r3, #2]
    6550:	f24b 6364 	movw	r3, #46692	; 0xb664
    6554:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6558:	5499      	strb	r1, [r3, r2]
    655a:	4b57      	ldr	r3, [pc, #348]	; (66b8 <send_attitude+0x8bc>)
    655c:	781a      	ldrb	r2, [r3, #0]
    655e:	f24b 7365 	movw	r3, #46949	; 0xb765
    6562:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6566:	781b      	ldrb	r3, [r3, #0]
    6568:	4413      	add	r3, r2
    656a:	b2da      	uxtb	r2, r3
    656c:	f24b 7365 	movw	r3, #46949	; 0xb765
    6570:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6574:	701a      	strb	r2, [r3, #0]
    6576:	f24b 7366 	movw	r3, #46950	; 0xb766
    657a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    657e:	781a      	ldrb	r2, [r3, #0]
    6580:	f24b 7365 	movw	r3, #46949	; 0xb765
    6584:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6588:	781b      	ldrb	r3, [r3, #0]
    658a:	4413      	add	r3, r2
    658c:	b2da      	uxtb	r2, r3
    658e:	f24b 7366 	movw	r3, #46950	; 0xb766
    6592:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6596:	701a      	strb	r2, [r3, #0]
    6598:	f24b 6361 	movw	r3, #46689	; 0xb661
    659c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65a0:	781b      	ldrb	r3, [r3, #0]
    65a2:	3301      	adds	r3, #1
    65a4:	b2da      	uxtb	r2, r3
    65a6:	f24b 6361 	movw	r3, #46689	; 0xb661
    65aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65ae:	701a      	strb	r2, [r3, #0]
    65b0:	f24b 6361 	movw	r3, #46689	; 0xb661
    65b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65b8:	781b      	ldrb	r3, [r3, #0]
    65ba:	2bff      	cmp	r3, #255	; 0xff
    65bc:	d105      	bne.n	65ca <send_attitude+0x7ce>
    65be:	f24b 6361 	movw	r3, #46689	; 0xb661
    65c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65c6:	2200      	movs	r2, #0
    65c8:	701a      	strb	r2, [r3, #0]
    65ca:	f24b 6361 	movw	r3, #46689	; 0xb661
    65ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65d2:	781b      	ldrb	r3, [r3, #0]
    65d4:	461a      	mov	r2, r3
    65d6:	f64b 4328 	movw	r3, #48168	; 0xbc28
    65da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65de:	78d9      	ldrb	r1, [r3, #3]
    65e0:	f24b 6364 	movw	r3, #46692	; 0xb664
    65e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65e8:	5499      	strb	r1, [r3, r2]
    65ea:	4b34      	ldr	r3, [pc, #208]	; (66bc <send_attitude+0x8c0>)
    65ec:	781a      	ldrb	r2, [r3, #0]
    65ee:	f24b 7365 	movw	r3, #46949	; 0xb765
    65f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65f6:	781b      	ldrb	r3, [r3, #0]
    65f8:	4413      	add	r3, r2
    65fa:	b2da      	uxtb	r2, r3
    65fc:	f24b 7365 	movw	r3, #46949	; 0xb765
    6600:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6604:	701a      	strb	r2, [r3, #0]
    6606:	f24b 7366 	movw	r3, #46950	; 0xb766
    660a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    660e:	781a      	ldrb	r2, [r3, #0]
    6610:	f24b 7365 	movw	r3, #46949	; 0xb765
    6614:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6618:	781b      	ldrb	r3, [r3, #0]
    661a:	4413      	add	r3, r2
    661c:	b2da      	uxtb	r2, r3
    661e:	f24b 7366 	movw	r3, #46950	; 0xb766
    6622:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6626:	701a      	strb	r2, [r3, #0]
    6628:	f24b 6361 	movw	r3, #46689	; 0xb661
    662c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6630:	781b      	ldrb	r3, [r3, #0]
    6632:	3301      	adds	r3, #1
    6634:	b2da      	uxtb	r2, r3
    6636:	f24b 6361 	movw	r3, #46689	; 0xb661
    663a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    663e:	701a      	strb	r2, [r3, #0]
    6640:	f24b 6361 	movw	r3, #46689	; 0xb661
    6644:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6648:	781b      	ldrb	r3, [r3, #0]
    664a:	2bff      	cmp	r3, #255	; 0xff
    664c:	d105      	bne.n	665a <send_attitude+0x85e>
    664e:	f24b 6361 	movw	r3, #46689	; 0xb661
    6652:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6656:	2200      	movs	r2, #0
    6658:	701a      	strb	r2, [r3, #0]
    665a:	f24b 6361 	movw	r3, #46689	; 0xb661
    665e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6662:	781b      	ldrb	r3, [r3, #0]
    6664:	461a      	mov	r2, r3
    6666:	f24b 7365 	movw	r3, #46949	; 0xb765
    666a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    666e:	7819      	ldrb	r1, [r3, #0]
    6670:	f24b 6364 	movw	r3, #46692	; 0xb664
    6674:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6678:	5499      	strb	r1, [r3, r2]
    667a:	f24b 6361 	movw	r3, #46689	; 0xb661
    667e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6682:	781b      	ldrb	r3, [r3, #0]
    6684:	3301      	adds	r3, #1
    6686:	b2da      	uxtb	r2, r3
    6688:	f24b 6361 	movw	r3, #46689	; 0xb661
    668c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6690:	701a      	strb	r2, [r3, #0]
    6692:	f24b 6361 	movw	r3, #46689	; 0xb661
    6696:	f2c2 0304 	movt	r3, #8196	; 0x2004
    669a:	781b      	ldrb	r3, [r3, #0]
    669c:	2bff      	cmp	r3, #255	; 0xff
    669e:	d10f      	bne.n	66c0 <send_attitude+0x8c4>
    66a0:	f24b 6361 	movw	r3, #46689	; 0xb661
    66a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66a8:	2200      	movs	r2, #0
    66aa:	701a      	strb	r2, [r3, #0]
    66ac:	e008      	b.n	66c0 <send_attitude+0x8c4>
    66ae:	bf00      	nop
    66b0:	2004bc27 	.word	0x2004bc27
    66b4:	2004bc29 	.word	0x2004bc29
    66b8:	2004bc2a 	.word	0x2004bc2a
    66bc:	2004bc2b 	.word	0x2004bc2b
    66c0:	f24b 6361 	movw	r3, #46689	; 0xb661
    66c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66c8:	781b      	ldrb	r3, [r3, #0]
    66ca:	461a      	mov	r2, r3
    66cc:	f24b 7366 	movw	r3, #46950	; 0xb766
    66d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66d4:	7819      	ldrb	r1, [r3, #0]
    66d6:	f24b 6364 	movw	r3, #46692	; 0xb664
    66da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66de:	5499      	strb	r1, [r3, r2]
    66e0:	f24b 6361 	movw	r3, #46689	; 0xb661
    66e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66e8:	781b      	ldrb	r3, [r3, #0]
    66ea:	3301      	adds	r3, #1
    66ec:	b2da      	uxtb	r2, r3
    66ee:	f24b 6361 	movw	r3, #46689	; 0xb661
    66f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66f6:	701a      	strb	r2, [r3, #0]
    66f8:	f24b 6361 	movw	r3, #46689	; 0xb661
    66fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6700:	781b      	ldrb	r3, [r3, #0]
    6702:	2bff      	cmp	r3, #255	; 0xff
    6704:	d105      	bne.n	6712 <send_attitude+0x916>
    6706:	f24b 6361 	movw	r3, #46689	; 0xb661
    670a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    670e:	2200      	movs	r2, #0
    6710:	701a      	strb	r2, [r3, #0]
    6712:	f248 0339 	movw	r3, #32825	; 0x8039
    6716:	f2c2 0300 	movt	r3, #8192	; 0x2000
    671a:	781b      	ldrb	r3, [r3, #0]
    671c:	b2db      	uxtb	r3, r3
    671e:	f003 0310 	and.w	r3, r3, #16
    6722:	2b00      	cmp	r3, #0
    6724:	d15a      	bne.n	67dc <send_attitude+0x9e0>
    6726:	f24b 6362 	movw	r3, #46690	; 0xb662
    672a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    672e:	781b      	ldrb	r3, [r3, #0]
    6730:	b2db      	uxtb	r3, r3
    6732:	461a      	mov	r2, r3
    6734:	f24b 6364 	movw	r3, #46692	; 0xb664
    6738:	f2c2 0304 	movt	r3, #8196	; 0x2004
    673c:	5c9a      	ldrb	r2, [r3, r2]
    673e:	f24b 7363 	movw	r3, #46947	; 0xb763
    6742:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6746:	701a      	strb	r2, [r3, #0]
    6748:	f24b 7364 	movw	r3, #46948	; 0xb764
    674c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6750:	2200      	movs	r2, #0
    6752:	701a      	strb	r2, [r3, #0]
    6754:	f24b 6362 	movw	r3, #46690	; 0xb662
    6758:	f2c2 0304 	movt	r3, #8196	; 0x2004
    675c:	781b      	ldrb	r3, [r3, #0]
    675e:	b2db      	uxtb	r3, r3
    6760:	3301      	adds	r3, #1
    6762:	b2da      	uxtb	r2, r3
    6764:	f24b 6362 	movw	r3, #46690	; 0xb662
    6768:	f2c2 0304 	movt	r3, #8196	; 0x2004
    676c:	701a      	strb	r2, [r3, #0]
    676e:	f24b 6362 	movw	r3, #46690	; 0xb662
    6772:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6776:	781b      	ldrb	r3, [r3, #0]
    6778:	b2db      	uxtb	r3, r3
    677a:	2bff      	cmp	r3, #255	; 0xff
    677c:	d105      	bne.n	678a <send_attitude+0x98e>
    677e:	f24b 6362 	movw	r3, #46690	; 0xb662
    6782:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6786:	2200      	movs	r2, #0
    6788:	701a      	strb	r2, [r3, #0]
    678a:	f248 0338 	movw	r3, #32824	; 0x8038
    678e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6792:	f248 0238 	movw	r2, #32824	; 0x8038
    6796:	f2c2 0200 	movt	r2, #8192	; 0x2000
    679a:	7812      	ldrb	r2, [r2, #0]
    679c:	b2d2      	uxtb	r2, r2
    679e:	f042 0201 	orr.w	r2, r2, #1
    67a2:	b2d2      	uxtb	r2, r2
    67a4:	701a      	strb	r2, [r3, #0]
    67a6:	f248 0339 	movw	r3, #32825	; 0x8039
    67aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67ae:	f248 0239 	movw	r2, #32825	; 0x8039
    67b2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    67b6:	7812      	ldrb	r2, [r2, #0]
    67b8:	b2d2      	uxtb	r2, r2
    67ba:	f042 0210 	orr.w	r2, r2, #16
    67be:	b2d2      	uxtb	r2, r2
    67c0:	701a      	strb	r2, [r3, #0]
    67c2:	e00b      	b.n	67dc <send_attitude+0x9e0>
    67c4:	f24b 6360 	movw	r3, #46688	; 0xb660
    67c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67cc:	781b      	ldrb	r3, [r3, #0]
    67ce:	3301      	adds	r3, #1
    67d0:	b2da      	uxtb	r2, r3
    67d2:	f24b 6360 	movw	r3, #46688	; 0xb660
    67d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67da:	701a      	strb	r2, [r3, #0]
  }
}
    67dc:	46bd      	mov	sp, r7
    67de:	f85d 7b04 	ldr.w	r7, [sp], #4
    67e2:	4770      	bx	lr

000067e4 <send_adc>:
  
void send_adc(void){  //500ms
    67e4:	b480      	push	{r7}
    67e6:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 5 == 1) PERIODIC_SEND_ADC();}
    67e8:	f24b 6359 	movw	r3, #46681	; 0xb659
    67ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67f0:	781a      	ldrb	r2, [r3, #0]
    67f2:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    67f6:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    67fa:	fba3 1302 	umull	r1, r3, r3, r2
    67fe:	0899      	lsrs	r1, r3, #2
    6800:	460b      	mov	r3, r1
    6802:	009b      	lsls	r3, r3, #2
    6804:	440b      	add	r3, r1
    6806:	1ad3      	subs	r3, r2, r3
    6808:	b2db      	uxtb	r3, r3
    680a:	2b01      	cmp	r3, #1
    680c:	f040 8269 	bne.w	6ce2 <send_adc+0x4fe>
    6810:	f24b 6361 	movw	r3, #46689	; 0xb661
    6814:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6818:	781a      	ldrb	r2, [r3, #0]
    681a:	f24b 6362 	movw	r3, #46690	; 0xb662
    681e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6822:	781b      	ldrb	r3, [r3, #0]
    6824:	b2db      	uxtb	r3, r3
    6826:	429a      	cmp	r2, r3
    6828:	d313      	bcc.n	6852 <send_adc+0x6e>
    682a:	f24b 6362 	movw	r3, #46690	; 0xb662
    682e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6832:	781b      	ldrb	r3, [r3, #0]
    6834:	b2db      	uxtb	r3, r3
    6836:	461a      	mov	r2, r3
    6838:	f24b 6361 	movw	r3, #46689	; 0xb661
    683c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6840:	781b      	ldrb	r3, [r3, #0]
    6842:	1ad3      	subs	r3, r2, r3
    6844:	33ff      	adds	r3, #255	; 0xff
    6846:	2b08      	cmp	r3, #8
    6848:	bfd4      	ite	le
    684a:	2300      	movle	r3, #0
    684c:	2301      	movgt	r3, #1
    684e:	b2db      	uxtb	r3, r3
    6850:	e011      	b.n	6876 <send_adc+0x92>
    6852:	f24b 6362 	movw	r3, #46690	; 0xb662
    6856:	f2c2 0304 	movt	r3, #8196	; 0x2004
    685a:	781b      	ldrb	r3, [r3, #0]
    685c:	b2db      	uxtb	r3, r3
    685e:	461a      	mov	r2, r3
    6860:	f24b 6361 	movw	r3, #46689	; 0xb661
    6864:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6868:	781b      	ldrb	r3, [r3, #0]
    686a:	1ad3      	subs	r3, r2, r3
    686c:	2b08      	cmp	r3, #8
    686e:	bfd4      	ite	le
    6870:	2300      	movle	r3, #0
    6872:	2301      	movgt	r3, #1
    6874:	b2db      	uxtb	r3, r3
    6876:	2b00      	cmp	r3, #0
    6878:	f000 8227 	beq.w	6cca <send_adc+0x4e6>
    687c:	f24b 6361 	movw	r3, #46689	; 0xb661
    6880:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6884:	781b      	ldrb	r3, [r3, #0]
    6886:	461a      	mov	r2, r3
    6888:	f24b 6364 	movw	r3, #46692	; 0xb664
    688c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6890:	2105      	movs	r1, #5
    6892:	5499      	strb	r1, [r3, r2]
    6894:	f24b 6361 	movw	r3, #46689	; 0xb661
    6898:	f2c2 0304 	movt	r3, #8196	; 0x2004
    689c:	781b      	ldrb	r3, [r3, #0]
    689e:	3301      	adds	r3, #1
    68a0:	b2da      	uxtb	r2, r3
    68a2:	f24b 6361 	movw	r3, #46689	; 0xb661
    68a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68aa:	701a      	strb	r2, [r3, #0]
    68ac:	f24b 6361 	movw	r3, #46689	; 0xb661
    68b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68b4:	781b      	ldrb	r3, [r3, #0]
    68b6:	2bff      	cmp	r3, #255	; 0xff
    68b8:	d105      	bne.n	68c6 <send_adc+0xe2>
    68ba:	f24b 6361 	movw	r3, #46689	; 0xb661
    68be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68c2:	2200      	movs	r2, #0
    68c4:	701a      	strb	r2, [r3, #0]
    68c6:	f24b 6361 	movw	r3, #46689	; 0xb661
    68ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68ce:	781b      	ldrb	r3, [r3, #0]
    68d0:	461a      	mov	r2, r3
    68d2:	f24b 6364 	movw	r3, #46692	; 0xb664
    68d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68da:	2107      	movs	r1, #7
    68dc:	5499      	strb	r1, [r3, r2]
    68de:	f24b 6361 	movw	r3, #46689	; 0xb661
    68e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68e6:	781b      	ldrb	r3, [r3, #0]
    68e8:	3301      	adds	r3, #1
    68ea:	b2da      	uxtb	r2, r3
    68ec:	f24b 6361 	movw	r3, #46689	; 0xb661
    68f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68f4:	701a      	strb	r2, [r3, #0]
    68f6:	f24b 6361 	movw	r3, #46689	; 0xb661
    68fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68fe:	781b      	ldrb	r3, [r3, #0]
    6900:	2bff      	cmp	r3, #255	; 0xff
    6902:	d105      	bne.n	6910 <send_adc+0x12c>
    6904:	f24b 6361 	movw	r3, #46689	; 0xb661
    6908:	f2c2 0304 	movt	r3, #8196	; 0x2004
    690c:	2200      	movs	r2, #0
    690e:	701a      	strb	r2, [r3, #0]
    6910:	f24b 7365 	movw	r3, #46949	; 0xb765
    6914:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6918:	2207      	movs	r2, #7
    691a:	701a      	strb	r2, [r3, #0]
    691c:	f24b 7366 	movw	r3, #46950	; 0xb766
    6920:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6924:	2207      	movs	r2, #7
    6926:	701a      	strb	r2, [r3, #0]
    6928:	f24b 6361 	movw	r3, #46689	; 0xb661
    692c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6930:	781b      	ldrb	r3, [r3, #0]
    6932:	461a      	mov	r2, r3
    6934:	f64b 1300 	movw	r3, #47360	; 0xb900
    6938:	f2c2 0304 	movt	r3, #8196	; 0x2004
    693c:	7819      	ldrb	r1, [r3, #0]
    693e:	f24b 6364 	movw	r3, #46692	; 0xb664
    6942:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6946:	5499      	strb	r1, [r3, r2]
    6948:	f64b 1300 	movw	r3, #47360	; 0xb900
    694c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6950:	781a      	ldrb	r2, [r3, #0]
    6952:	f24b 7365 	movw	r3, #46949	; 0xb765
    6956:	f2c2 0304 	movt	r3, #8196	; 0x2004
    695a:	781b      	ldrb	r3, [r3, #0]
    695c:	4413      	add	r3, r2
    695e:	b2da      	uxtb	r2, r3
    6960:	f24b 7365 	movw	r3, #46949	; 0xb765
    6964:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6968:	701a      	strb	r2, [r3, #0]
    696a:	f24b 7366 	movw	r3, #46950	; 0xb766
    696e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6972:	781a      	ldrb	r2, [r3, #0]
    6974:	f24b 7365 	movw	r3, #46949	; 0xb765
    6978:	f2c2 0304 	movt	r3, #8196	; 0x2004
    697c:	781b      	ldrb	r3, [r3, #0]
    697e:	4413      	add	r3, r2
    6980:	b2da      	uxtb	r2, r3
    6982:	f24b 7366 	movw	r3, #46950	; 0xb766
    6986:	f2c2 0304 	movt	r3, #8196	; 0x2004
    698a:	701a      	strb	r2, [r3, #0]
    698c:	f24b 6361 	movw	r3, #46689	; 0xb661
    6990:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6994:	781b      	ldrb	r3, [r3, #0]
    6996:	3301      	adds	r3, #1
    6998:	b2da      	uxtb	r2, r3
    699a:	f24b 6361 	movw	r3, #46689	; 0xb661
    699e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69a2:	701a      	strb	r2, [r3, #0]
    69a4:	f24b 6361 	movw	r3, #46689	; 0xb661
    69a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69ac:	781b      	ldrb	r3, [r3, #0]
    69ae:	2bff      	cmp	r3, #255	; 0xff
    69b0:	d105      	bne.n	69be <send_adc+0x1da>
    69b2:	f24b 6361 	movw	r3, #46689	; 0xb661
    69b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69ba:	2200      	movs	r2, #0
    69bc:	701a      	strb	r2, [r3, #0]
    69be:	f24b 6361 	movw	r3, #46689	; 0xb661
    69c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69c6:	781b      	ldrb	r3, [r3, #0]
    69c8:	461a      	mov	r2, r3
    69ca:	f64b 1300 	movw	r3, #47360	; 0xb900
    69ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69d2:	7859      	ldrb	r1, [r3, #1]
    69d4:	f24b 6364 	movw	r3, #46692	; 0xb664
    69d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69dc:	5499      	strb	r1, [r3, r2]
    69de:	4bc3      	ldr	r3, [pc, #780]	; (6cec <send_adc+0x508>)
    69e0:	781a      	ldrb	r2, [r3, #0]
    69e2:	f24b 7365 	movw	r3, #46949	; 0xb765
    69e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69ea:	781b      	ldrb	r3, [r3, #0]
    69ec:	4413      	add	r3, r2
    69ee:	b2da      	uxtb	r2, r3
    69f0:	f24b 7365 	movw	r3, #46949	; 0xb765
    69f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69f8:	701a      	strb	r2, [r3, #0]
    69fa:	f24b 7366 	movw	r3, #46950	; 0xb766
    69fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a02:	781a      	ldrb	r2, [r3, #0]
    6a04:	f24b 7365 	movw	r3, #46949	; 0xb765
    6a08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a0c:	781b      	ldrb	r3, [r3, #0]
    6a0e:	4413      	add	r3, r2
    6a10:	b2da      	uxtb	r2, r3
    6a12:	f24b 7366 	movw	r3, #46950	; 0xb766
    6a16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a1a:	701a      	strb	r2, [r3, #0]
    6a1c:	f24b 6361 	movw	r3, #46689	; 0xb661
    6a20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a24:	781b      	ldrb	r3, [r3, #0]
    6a26:	3301      	adds	r3, #1
    6a28:	b2da      	uxtb	r2, r3
    6a2a:	f24b 6361 	movw	r3, #46689	; 0xb661
    6a2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a32:	701a      	strb	r2, [r3, #0]
    6a34:	f24b 6361 	movw	r3, #46689	; 0xb661
    6a38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a3c:	781b      	ldrb	r3, [r3, #0]
    6a3e:	2bff      	cmp	r3, #255	; 0xff
    6a40:	d105      	bne.n	6a4e <send_adc+0x26a>
    6a42:	f24b 6361 	movw	r3, #46689	; 0xb661
    6a46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a4a:	2200      	movs	r2, #0
    6a4c:	701a      	strb	r2, [r3, #0]
    6a4e:	f24b 6361 	movw	r3, #46689	; 0xb661
    6a52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a56:	781b      	ldrb	r3, [r3, #0]
    6a58:	461a      	mov	r2, r3
    6a5a:	f64b 1302 	movw	r3, #47362	; 0xb902
    6a5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a62:	7819      	ldrb	r1, [r3, #0]
    6a64:	f24b 6364 	movw	r3, #46692	; 0xb664
    6a68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a6c:	5499      	strb	r1, [r3, r2]
    6a6e:	f64b 1302 	movw	r3, #47362	; 0xb902
    6a72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a76:	781a      	ldrb	r2, [r3, #0]
    6a78:	f24b 7365 	movw	r3, #46949	; 0xb765
    6a7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a80:	781b      	ldrb	r3, [r3, #0]
    6a82:	4413      	add	r3, r2
    6a84:	b2da      	uxtb	r2, r3
    6a86:	f24b 7365 	movw	r3, #46949	; 0xb765
    6a8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a8e:	701a      	strb	r2, [r3, #0]
    6a90:	f24b 7366 	movw	r3, #46950	; 0xb766
    6a94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a98:	781a      	ldrb	r2, [r3, #0]
    6a9a:	f24b 7365 	movw	r3, #46949	; 0xb765
    6a9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6aa2:	781b      	ldrb	r3, [r3, #0]
    6aa4:	4413      	add	r3, r2
    6aa6:	b2da      	uxtb	r2, r3
    6aa8:	f24b 7366 	movw	r3, #46950	; 0xb766
    6aac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ab0:	701a      	strb	r2, [r3, #0]
    6ab2:	f24b 6361 	movw	r3, #46689	; 0xb661
    6ab6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6aba:	781b      	ldrb	r3, [r3, #0]
    6abc:	3301      	adds	r3, #1
    6abe:	b2da      	uxtb	r2, r3
    6ac0:	f24b 6361 	movw	r3, #46689	; 0xb661
    6ac4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ac8:	701a      	strb	r2, [r3, #0]
    6aca:	f24b 6361 	movw	r3, #46689	; 0xb661
    6ace:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ad2:	781b      	ldrb	r3, [r3, #0]
    6ad4:	2bff      	cmp	r3, #255	; 0xff
    6ad6:	d105      	bne.n	6ae4 <send_adc+0x300>
    6ad8:	f24b 6361 	movw	r3, #46689	; 0xb661
    6adc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ae0:	2200      	movs	r2, #0
    6ae2:	701a      	strb	r2, [r3, #0]
    6ae4:	f24b 6361 	movw	r3, #46689	; 0xb661
    6ae8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6aec:	781b      	ldrb	r3, [r3, #0]
    6aee:	461a      	mov	r2, r3
    6af0:	f64b 1302 	movw	r3, #47362	; 0xb902
    6af4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6af8:	7859      	ldrb	r1, [r3, #1]
    6afa:	f24b 6364 	movw	r3, #46692	; 0xb664
    6afe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b02:	5499      	strb	r1, [r3, r2]
    6b04:	4b7a      	ldr	r3, [pc, #488]	; (6cf0 <send_adc+0x50c>)
    6b06:	781a      	ldrb	r2, [r3, #0]
    6b08:	f24b 7365 	movw	r3, #46949	; 0xb765
    6b0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b10:	781b      	ldrb	r3, [r3, #0]
    6b12:	4413      	add	r3, r2
    6b14:	b2da      	uxtb	r2, r3
    6b16:	f24b 7365 	movw	r3, #46949	; 0xb765
    6b1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b1e:	701a      	strb	r2, [r3, #0]
    6b20:	f24b 7366 	movw	r3, #46950	; 0xb766
    6b24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b28:	781a      	ldrb	r2, [r3, #0]
    6b2a:	f24b 7365 	movw	r3, #46949	; 0xb765
    6b2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b32:	781b      	ldrb	r3, [r3, #0]
    6b34:	4413      	add	r3, r2
    6b36:	b2da      	uxtb	r2, r3
    6b38:	f24b 7366 	movw	r3, #46950	; 0xb766
    6b3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b40:	701a      	strb	r2, [r3, #0]
    6b42:	f24b 6361 	movw	r3, #46689	; 0xb661
    6b46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b4a:	781b      	ldrb	r3, [r3, #0]
    6b4c:	3301      	adds	r3, #1
    6b4e:	b2da      	uxtb	r2, r3
    6b50:	f24b 6361 	movw	r3, #46689	; 0xb661
    6b54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b58:	701a      	strb	r2, [r3, #0]
    6b5a:	f24b 6361 	movw	r3, #46689	; 0xb661
    6b5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b62:	781b      	ldrb	r3, [r3, #0]
    6b64:	2bff      	cmp	r3, #255	; 0xff
    6b66:	d105      	bne.n	6b74 <send_adc+0x390>
    6b68:	f24b 6361 	movw	r3, #46689	; 0xb661
    6b6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b70:	2200      	movs	r2, #0
    6b72:	701a      	strb	r2, [r3, #0]
    6b74:	f24b 6361 	movw	r3, #46689	; 0xb661
    6b78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b7c:	781b      	ldrb	r3, [r3, #0]
    6b7e:	461a      	mov	r2, r3
    6b80:	f24b 7365 	movw	r3, #46949	; 0xb765
    6b84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b88:	7819      	ldrb	r1, [r3, #0]
    6b8a:	f24b 6364 	movw	r3, #46692	; 0xb664
    6b8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b92:	5499      	strb	r1, [r3, r2]
    6b94:	f24b 6361 	movw	r3, #46689	; 0xb661
    6b98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b9c:	781b      	ldrb	r3, [r3, #0]
    6b9e:	3301      	adds	r3, #1
    6ba0:	b2da      	uxtb	r2, r3
    6ba2:	f24b 6361 	movw	r3, #46689	; 0xb661
    6ba6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6baa:	701a      	strb	r2, [r3, #0]
    6bac:	f24b 6361 	movw	r3, #46689	; 0xb661
    6bb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bb4:	781b      	ldrb	r3, [r3, #0]
    6bb6:	2bff      	cmp	r3, #255	; 0xff
    6bb8:	d105      	bne.n	6bc6 <send_adc+0x3e2>
    6bba:	f24b 6361 	movw	r3, #46689	; 0xb661
    6bbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bc2:	2200      	movs	r2, #0
    6bc4:	701a      	strb	r2, [r3, #0]
    6bc6:	f24b 6361 	movw	r3, #46689	; 0xb661
    6bca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bce:	781b      	ldrb	r3, [r3, #0]
    6bd0:	461a      	mov	r2, r3
    6bd2:	f24b 7366 	movw	r3, #46950	; 0xb766
    6bd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bda:	7819      	ldrb	r1, [r3, #0]
    6bdc:	f24b 6364 	movw	r3, #46692	; 0xb664
    6be0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6be4:	5499      	strb	r1, [r3, r2]
    6be6:	f24b 6361 	movw	r3, #46689	; 0xb661
    6bea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bee:	781b      	ldrb	r3, [r3, #0]
    6bf0:	3301      	adds	r3, #1
    6bf2:	b2da      	uxtb	r2, r3
    6bf4:	f24b 6361 	movw	r3, #46689	; 0xb661
    6bf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bfc:	701a      	strb	r2, [r3, #0]
    6bfe:	f24b 6361 	movw	r3, #46689	; 0xb661
    6c02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c06:	781b      	ldrb	r3, [r3, #0]
    6c08:	2bff      	cmp	r3, #255	; 0xff
    6c0a:	d105      	bne.n	6c18 <send_adc+0x434>
    6c0c:	f24b 6361 	movw	r3, #46689	; 0xb661
    6c10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c14:	2200      	movs	r2, #0
    6c16:	701a      	strb	r2, [r3, #0]
    6c18:	f248 0339 	movw	r3, #32825	; 0x8039
    6c1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c20:	781b      	ldrb	r3, [r3, #0]
    6c22:	b2db      	uxtb	r3, r3
    6c24:	f003 0310 	and.w	r3, r3, #16
    6c28:	2b00      	cmp	r3, #0
    6c2a:	d15a      	bne.n	6ce2 <send_adc+0x4fe>
    6c2c:	f24b 6362 	movw	r3, #46690	; 0xb662
    6c30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c34:	781b      	ldrb	r3, [r3, #0]
    6c36:	b2db      	uxtb	r3, r3
    6c38:	461a      	mov	r2, r3
    6c3a:	f24b 6364 	movw	r3, #46692	; 0xb664
    6c3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c42:	5c9a      	ldrb	r2, [r3, r2]
    6c44:	f24b 7363 	movw	r3, #46947	; 0xb763
    6c48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c4c:	701a      	strb	r2, [r3, #0]
    6c4e:	f24b 7364 	movw	r3, #46948	; 0xb764
    6c52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c56:	2200      	movs	r2, #0
    6c58:	701a      	strb	r2, [r3, #0]
    6c5a:	f24b 6362 	movw	r3, #46690	; 0xb662
    6c5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c62:	781b      	ldrb	r3, [r3, #0]
    6c64:	b2db      	uxtb	r3, r3
    6c66:	3301      	adds	r3, #1
    6c68:	b2da      	uxtb	r2, r3
    6c6a:	f24b 6362 	movw	r3, #46690	; 0xb662
    6c6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c72:	701a      	strb	r2, [r3, #0]
    6c74:	f24b 6362 	movw	r3, #46690	; 0xb662
    6c78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c7c:	781b      	ldrb	r3, [r3, #0]
    6c7e:	b2db      	uxtb	r3, r3
    6c80:	2bff      	cmp	r3, #255	; 0xff
    6c82:	d105      	bne.n	6c90 <send_adc+0x4ac>
    6c84:	f24b 6362 	movw	r3, #46690	; 0xb662
    6c88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c8c:	2200      	movs	r2, #0
    6c8e:	701a      	strb	r2, [r3, #0]
    6c90:	f248 0338 	movw	r3, #32824	; 0x8038
    6c94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c98:	f248 0238 	movw	r2, #32824	; 0x8038
    6c9c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6ca0:	7812      	ldrb	r2, [r2, #0]
    6ca2:	b2d2      	uxtb	r2, r2
    6ca4:	f042 0201 	orr.w	r2, r2, #1
    6ca8:	b2d2      	uxtb	r2, r2
    6caa:	701a      	strb	r2, [r3, #0]
    6cac:	f248 0339 	movw	r3, #32825	; 0x8039
    6cb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6cb4:	f248 0239 	movw	r2, #32825	; 0x8039
    6cb8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6cbc:	7812      	ldrb	r2, [r2, #0]
    6cbe:	b2d2      	uxtb	r2, r2
    6cc0:	f042 0210 	orr.w	r2, r2, #16
    6cc4:	b2d2      	uxtb	r2, r2
    6cc6:	701a      	strb	r2, [r3, #0]
    6cc8:	e00b      	b.n	6ce2 <send_adc+0x4fe>
    6cca:	f24b 6360 	movw	r3, #46688	; 0xb660
    6cce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cd2:	781b      	ldrb	r3, [r3, #0]
    6cd4:	3301      	adds	r3, #1
    6cd6:	b2da      	uxtb	r2, r3
    6cd8:	f24b 6360 	movw	r3, #46688	; 0xb660
    6cdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ce0:	701a      	strb	r2, [r3, #0]
}
    6ce2:	46bd      	mov	sp, r7
    6ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
    6ce8:	4770      	bx	lr
    6cea:	bf00      	nop
    6cec:	2004b901 	.word	0x2004b901
    6cf0:	2004b903 	.word	0x2004b903

00006cf4 <send_settings>:
void send_settings(void){ //500ms
    6cf4:	b480      	push	{r7}
    6cf6:	af00      	add	r7, sp, #0
  //if(!boot)
  {if (count % 5 == 2) PERIODIC_SEND_SETTINGS();}
    6cf8:	f24b 6359 	movw	r3, #46681	; 0xb659
    6cfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d00:	781a      	ldrb	r2, [r3, #0]
    6d02:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    6d06:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    6d0a:	fba3 1302 	umull	r1, r3, r3, r2
    6d0e:	0899      	lsrs	r1, r3, #2
    6d10:	460b      	mov	r3, r1
    6d12:	009b      	lsls	r3, r3, #2
    6d14:	440b      	add	r3, r1
    6d16:	1ad3      	subs	r3, r2, r3
    6d18:	b2db      	uxtb	r3, r3
    6d1a:	2b02      	cmp	r3, #2
    6d1c:	f040 83e7 	bne.w	74ee <send_settings+0x7fa>
    6d20:	f64b 4374 	movw	r3, #48244	; 0xbc74
    6d24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d28:	781b      	ldrb	r3, [r3, #0]
    6d2a:	2b00      	cmp	r3, #0
    6d2c:	f000 83df 	beq.w	74ee <send_settings+0x7fa>
    6d30:	f24b 6361 	movw	r3, #46689	; 0xb661
    6d34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d38:	781a      	ldrb	r2, [r3, #0]
    6d3a:	f24b 6362 	movw	r3, #46690	; 0xb662
    6d3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d42:	781b      	ldrb	r3, [r3, #0]
    6d44:	b2db      	uxtb	r3, r3
    6d46:	429a      	cmp	r2, r3
    6d48:	d313      	bcc.n	6d72 <send_settings+0x7e>
    6d4a:	f24b 6362 	movw	r3, #46690	; 0xb662
    6d4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d52:	781b      	ldrb	r3, [r3, #0]
    6d54:	b2db      	uxtb	r3, r3
    6d56:	461a      	mov	r2, r3
    6d58:	f24b 6361 	movw	r3, #46689	; 0xb661
    6d5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d60:	781b      	ldrb	r3, [r3, #0]
    6d62:	1ad3      	subs	r3, r2, r3
    6d64:	33ff      	adds	r3, #255	; 0xff
    6d66:	2b0d      	cmp	r3, #13
    6d68:	bfd4      	ite	le
    6d6a:	2300      	movle	r3, #0
    6d6c:	2301      	movgt	r3, #1
    6d6e:	b2db      	uxtb	r3, r3
    6d70:	e011      	b.n	6d96 <send_settings+0xa2>
    6d72:	f24b 6362 	movw	r3, #46690	; 0xb662
    6d76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d7a:	781b      	ldrb	r3, [r3, #0]
    6d7c:	b2db      	uxtb	r3, r3
    6d7e:	461a      	mov	r2, r3
    6d80:	f24b 6361 	movw	r3, #46689	; 0xb661
    6d84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d88:	781b      	ldrb	r3, [r3, #0]
    6d8a:	1ad3      	subs	r3, r2, r3
    6d8c:	2b0d      	cmp	r3, #13
    6d8e:	bfd4      	ite	le
    6d90:	2300      	movle	r3, #0
    6d92:	2301      	movgt	r3, #1
    6d94:	b2db      	uxtb	r3, r3
    6d96:	2b00      	cmp	r3, #0
    6d98:	f000 839d 	beq.w	74d6 <send_settings+0x7e2>
    6d9c:	f24b 6361 	movw	r3, #46689	; 0xb661
    6da0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6da4:	781b      	ldrb	r3, [r3, #0]
    6da6:	461a      	mov	r2, r3
    6da8:	f24b 6364 	movw	r3, #46692	; 0xb664
    6dac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6db0:	2105      	movs	r1, #5
    6db2:	5499      	strb	r1, [r3, r2]
    6db4:	f24b 6361 	movw	r3, #46689	; 0xb661
    6db8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dbc:	781b      	ldrb	r3, [r3, #0]
    6dbe:	3301      	adds	r3, #1
    6dc0:	b2da      	uxtb	r2, r3
    6dc2:	f24b 6361 	movw	r3, #46689	; 0xb661
    6dc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dca:	701a      	strb	r2, [r3, #0]
    6dcc:	f24b 6361 	movw	r3, #46689	; 0xb661
    6dd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dd4:	781b      	ldrb	r3, [r3, #0]
    6dd6:	2bff      	cmp	r3, #255	; 0xff
    6dd8:	d105      	bne.n	6de6 <send_settings+0xf2>
    6dda:	f24b 6361 	movw	r3, #46689	; 0xb661
    6dde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6de2:	2200      	movs	r2, #0
    6de4:	701a      	strb	r2, [r3, #0]
    6de6:	f24b 6361 	movw	r3, #46689	; 0xb661
    6dea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dee:	781b      	ldrb	r3, [r3, #0]
    6df0:	461a      	mov	r2, r3
    6df2:	f24b 6364 	movw	r3, #46692	; 0xb664
    6df6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dfa:	2111      	movs	r1, #17
    6dfc:	5499      	strb	r1, [r3, r2]
    6dfe:	f24b 6361 	movw	r3, #46689	; 0xb661
    6e02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e06:	781b      	ldrb	r3, [r3, #0]
    6e08:	3301      	adds	r3, #1
    6e0a:	b2da      	uxtb	r2, r3
    6e0c:	f24b 6361 	movw	r3, #46689	; 0xb661
    6e10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e14:	701a      	strb	r2, [r3, #0]
    6e16:	f24b 6361 	movw	r3, #46689	; 0xb661
    6e1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e1e:	781b      	ldrb	r3, [r3, #0]
    6e20:	2bff      	cmp	r3, #255	; 0xff
    6e22:	d105      	bne.n	6e30 <send_settings+0x13c>
    6e24:	f24b 6361 	movw	r3, #46689	; 0xb661
    6e28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e2c:	2200      	movs	r2, #0
    6e2e:	701a      	strb	r2, [r3, #0]
    6e30:	f24b 7365 	movw	r3, #46949	; 0xb765
    6e34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e38:	2211      	movs	r2, #17
    6e3a:	701a      	strb	r2, [r3, #0]
    6e3c:	f24b 7366 	movw	r3, #46950	; 0xb766
    6e40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e44:	2211      	movs	r2, #17
    6e46:	701a      	strb	r2, [r3, #0]
    6e48:	f24b 6361 	movw	r3, #46689	; 0xb661
    6e4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e50:	781b      	ldrb	r3, [r3, #0]
    6e52:	461a      	mov	r2, r3
    6e54:	f64b 4374 	movw	r3, #48244	; 0xbc74
    6e58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e5c:	7819      	ldrb	r1, [r3, #0]
    6e5e:	f24b 6364 	movw	r3, #46692	; 0xb664
    6e62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e66:	5499      	strb	r1, [r3, r2]
    6e68:	f24b 7365 	movw	r3, #46949	; 0xb765
    6e6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e70:	781a      	ldrb	r2, [r3, #0]
    6e72:	f64b 4374 	movw	r3, #48244	; 0xbc74
    6e76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e7a:	781b      	ldrb	r3, [r3, #0]
    6e7c:	4413      	add	r3, r2
    6e7e:	b2da      	uxtb	r2, r3
    6e80:	f24b 7365 	movw	r3, #46949	; 0xb765
    6e84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e88:	701a      	strb	r2, [r3, #0]
    6e8a:	f24b 7366 	movw	r3, #46950	; 0xb766
    6e8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e92:	781a      	ldrb	r2, [r3, #0]
    6e94:	f24b 7365 	movw	r3, #46949	; 0xb765
    6e98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e9c:	781b      	ldrb	r3, [r3, #0]
    6e9e:	4413      	add	r3, r2
    6ea0:	b2da      	uxtb	r2, r3
    6ea2:	f24b 7366 	movw	r3, #46950	; 0xb766
    6ea6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6eaa:	701a      	strb	r2, [r3, #0]
    6eac:	f24b 6361 	movw	r3, #46689	; 0xb661
    6eb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6eb4:	781b      	ldrb	r3, [r3, #0]
    6eb6:	3301      	adds	r3, #1
    6eb8:	b2da      	uxtb	r2, r3
    6eba:	f24b 6361 	movw	r3, #46689	; 0xb661
    6ebe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ec2:	701a      	strb	r2, [r3, #0]
    6ec4:	f24b 6361 	movw	r3, #46689	; 0xb661
    6ec8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ecc:	781b      	ldrb	r3, [r3, #0]
    6ece:	2bff      	cmp	r3, #255	; 0xff
    6ed0:	d105      	bne.n	6ede <send_settings+0x1ea>
    6ed2:	f24b 6361 	movw	r3, #46689	; 0xb661
    6ed6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6eda:	2200      	movs	r2, #0
    6edc:	701a      	strb	r2, [r3, #0]
    6ede:	f24b 6361 	movw	r3, #46689	; 0xb661
    6ee2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ee6:	781b      	ldrb	r3, [r3, #0]
    6ee8:	461a      	mov	r2, r3
    6eea:	f24b 6350 	movw	r3, #46672	; 0xb650
    6eee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ef2:	7819      	ldrb	r1, [r3, #0]
    6ef4:	f24b 6364 	movw	r3, #46692	; 0xb664
    6ef8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6efc:	5499      	strb	r1, [r3, r2]
    6efe:	f24b 6350 	movw	r3, #46672	; 0xb650
    6f02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f06:	781a      	ldrb	r2, [r3, #0]
    6f08:	f24b 7365 	movw	r3, #46949	; 0xb765
    6f0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f10:	781b      	ldrb	r3, [r3, #0]
    6f12:	4413      	add	r3, r2
    6f14:	b2da      	uxtb	r2, r3
    6f16:	f24b 7365 	movw	r3, #46949	; 0xb765
    6f1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f1e:	701a      	strb	r2, [r3, #0]
    6f20:	f24b 7366 	movw	r3, #46950	; 0xb766
    6f24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f28:	781a      	ldrb	r2, [r3, #0]
    6f2a:	f24b 7365 	movw	r3, #46949	; 0xb765
    6f2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f32:	781b      	ldrb	r3, [r3, #0]
    6f34:	4413      	add	r3, r2
    6f36:	b2da      	uxtb	r2, r3
    6f38:	f24b 7366 	movw	r3, #46950	; 0xb766
    6f3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f40:	701a      	strb	r2, [r3, #0]
    6f42:	f24b 6361 	movw	r3, #46689	; 0xb661
    6f46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f4a:	781b      	ldrb	r3, [r3, #0]
    6f4c:	3301      	adds	r3, #1
    6f4e:	b2da      	uxtb	r2, r3
    6f50:	f24b 6361 	movw	r3, #46689	; 0xb661
    6f54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f58:	701a      	strb	r2, [r3, #0]
    6f5a:	f24b 6361 	movw	r3, #46689	; 0xb661
    6f5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f62:	781b      	ldrb	r3, [r3, #0]
    6f64:	2bff      	cmp	r3, #255	; 0xff
    6f66:	d105      	bne.n	6f74 <send_settings+0x280>
    6f68:	f24b 6361 	movw	r3, #46689	; 0xb661
    6f6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f70:	2200      	movs	r2, #0
    6f72:	701a      	strb	r2, [r3, #0]
    6f74:	f24b 6361 	movw	r3, #46689	; 0xb661
    6f78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f7c:	781b      	ldrb	r3, [r3, #0]
    6f7e:	461a      	mov	r2, r3
    6f80:	f24b 6350 	movw	r3, #46672	; 0xb650
    6f84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f88:	7859      	ldrb	r1, [r3, #1]
    6f8a:	f24b 6364 	movw	r3, #46692	; 0xb664
    6f8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f92:	5499      	strb	r1, [r3, r2]
    6f94:	4bd1      	ldr	r3, [pc, #836]	; (72dc <send_settings+0x5e8>)
    6f96:	781a      	ldrb	r2, [r3, #0]
    6f98:	f24b 7365 	movw	r3, #46949	; 0xb765
    6f9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fa0:	781b      	ldrb	r3, [r3, #0]
    6fa2:	4413      	add	r3, r2
    6fa4:	b2da      	uxtb	r2, r3
    6fa6:	f24b 7365 	movw	r3, #46949	; 0xb765
    6faa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fae:	701a      	strb	r2, [r3, #0]
    6fb0:	f24b 7366 	movw	r3, #46950	; 0xb766
    6fb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fb8:	781a      	ldrb	r2, [r3, #0]
    6fba:	f24b 7365 	movw	r3, #46949	; 0xb765
    6fbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fc2:	781b      	ldrb	r3, [r3, #0]
    6fc4:	4413      	add	r3, r2
    6fc6:	b2da      	uxtb	r2, r3
    6fc8:	f24b 7366 	movw	r3, #46950	; 0xb766
    6fcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fd0:	701a      	strb	r2, [r3, #0]
    6fd2:	f24b 6361 	movw	r3, #46689	; 0xb661
    6fd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fda:	781b      	ldrb	r3, [r3, #0]
    6fdc:	3301      	adds	r3, #1
    6fde:	b2da      	uxtb	r2, r3
    6fe0:	f24b 6361 	movw	r3, #46689	; 0xb661
    6fe4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fe8:	701a      	strb	r2, [r3, #0]
    6fea:	f24b 6361 	movw	r3, #46689	; 0xb661
    6fee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ff2:	781b      	ldrb	r3, [r3, #0]
    6ff4:	2bff      	cmp	r3, #255	; 0xff
    6ff6:	d105      	bne.n	7004 <send_settings+0x310>
    6ff8:	f24b 6361 	movw	r3, #46689	; 0xb661
    6ffc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7000:	2200      	movs	r2, #0
    7002:	701a      	strb	r2, [r3, #0]
    7004:	f24b 6361 	movw	r3, #46689	; 0xb661
    7008:	f2c2 0304 	movt	r3, #8196	; 0x2004
    700c:	781b      	ldrb	r3, [r3, #0]
    700e:	461a      	mov	r2, r3
    7010:	f24b 6350 	movw	r3, #46672	; 0xb650
    7014:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7018:	7899      	ldrb	r1, [r3, #2]
    701a:	f24b 6364 	movw	r3, #46692	; 0xb664
    701e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7022:	5499      	strb	r1, [r3, r2]
    7024:	4bae      	ldr	r3, [pc, #696]	; (72e0 <send_settings+0x5ec>)
    7026:	781a      	ldrb	r2, [r3, #0]
    7028:	f24b 7365 	movw	r3, #46949	; 0xb765
    702c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7030:	781b      	ldrb	r3, [r3, #0]
    7032:	4413      	add	r3, r2
    7034:	b2da      	uxtb	r2, r3
    7036:	f24b 7365 	movw	r3, #46949	; 0xb765
    703a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    703e:	701a      	strb	r2, [r3, #0]
    7040:	f24b 7366 	movw	r3, #46950	; 0xb766
    7044:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7048:	781a      	ldrb	r2, [r3, #0]
    704a:	f24b 7365 	movw	r3, #46949	; 0xb765
    704e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7052:	781b      	ldrb	r3, [r3, #0]
    7054:	4413      	add	r3, r2
    7056:	b2da      	uxtb	r2, r3
    7058:	f24b 7366 	movw	r3, #46950	; 0xb766
    705c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7060:	701a      	strb	r2, [r3, #0]
    7062:	f24b 6361 	movw	r3, #46689	; 0xb661
    7066:	f2c2 0304 	movt	r3, #8196	; 0x2004
    706a:	781b      	ldrb	r3, [r3, #0]
    706c:	3301      	adds	r3, #1
    706e:	b2da      	uxtb	r2, r3
    7070:	f24b 6361 	movw	r3, #46689	; 0xb661
    7074:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7078:	701a      	strb	r2, [r3, #0]
    707a:	f24b 6361 	movw	r3, #46689	; 0xb661
    707e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7082:	781b      	ldrb	r3, [r3, #0]
    7084:	2bff      	cmp	r3, #255	; 0xff
    7086:	d105      	bne.n	7094 <send_settings+0x3a0>
    7088:	f24b 6361 	movw	r3, #46689	; 0xb661
    708c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7090:	2200      	movs	r2, #0
    7092:	701a      	strb	r2, [r3, #0]
    7094:	f24b 6361 	movw	r3, #46689	; 0xb661
    7098:	f2c2 0304 	movt	r3, #8196	; 0x2004
    709c:	781b      	ldrb	r3, [r3, #0]
    709e:	461a      	mov	r2, r3
    70a0:	f24b 6350 	movw	r3, #46672	; 0xb650
    70a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70a8:	78d9      	ldrb	r1, [r3, #3]
    70aa:	f24b 6364 	movw	r3, #46692	; 0xb664
    70ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70b2:	5499      	strb	r1, [r3, r2]
    70b4:	4b8b      	ldr	r3, [pc, #556]	; (72e4 <send_settings+0x5f0>)
    70b6:	781a      	ldrb	r2, [r3, #0]
    70b8:	f24b 7365 	movw	r3, #46949	; 0xb765
    70bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70c0:	781b      	ldrb	r3, [r3, #0]
    70c2:	4413      	add	r3, r2
    70c4:	b2da      	uxtb	r2, r3
    70c6:	f24b 7365 	movw	r3, #46949	; 0xb765
    70ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70ce:	701a      	strb	r2, [r3, #0]
    70d0:	f24b 7366 	movw	r3, #46950	; 0xb766
    70d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70d8:	781a      	ldrb	r2, [r3, #0]
    70da:	f24b 7365 	movw	r3, #46949	; 0xb765
    70de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70e2:	781b      	ldrb	r3, [r3, #0]
    70e4:	4413      	add	r3, r2
    70e6:	b2da      	uxtb	r2, r3
    70e8:	f24b 7366 	movw	r3, #46950	; 0xb766
    70ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70f0:	701a      	strb	r2, [r3, #0]
    70f2:	f24b 6361 	movw	r3, #46689	; 0xb661
    70f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70fa:	781b      	ldrb	r3, [r3, #0]
    70fc:	3301      	adds	r3, #1
    70fe:	b2da      	uxtb	r2, r3
    7100:	f24b 6361 	movw	r3, #46689	; 0xb661
    7104:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7108:	701a      	strb	r2, [r3, #0]
    710a:	f24b 6361 	movw	r3, #46689	; 0xb661
    710e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7112:	781b      	ldrb	r3, [r3, #0]
    7114:	2bff      	cmp	r3, #255	; 0xff
    7116:	d105      	bne.n	7124 <send_settings+0x430>
    7118:	f24b 6361 	movw	r3, #46689	; 0xb661
    711c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7120:	2200      	movs	r2, #0
    7122:	701a      	strb	r2, [r3, #0]
    7124:	f24b 6361 	movw	r3, #46689	; 0xb661
    7128:	f2c2 0304 	movt	r3, #8196	; 0x2004
    712c:	781b      	ldrb	r3, [r3, #0]
    712e:	461a      	mov	r2, r3
    7130:	f24b 6354 	movw	r3, #46676	; 0xb654
    7134:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7138:	7819      	ldrb	r1, [r3, #0]
    713a:	f24b 6364 	movw	r3, #46692	; 0xb664
    713e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7142:	5499      	strb	r1, [r3, r2]
    7144:	f24b 6354 	movw	r3, #46676	; 0xb654
    7148:	f2c2 0304 	movt	r3, #8196	; 0x2004
    714c:	781a      	ldrb	r2, [r3, #0]
    714e:	f24b 7365 	movw	r3, #46949	; 0xb765
    7152:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7156:	781b      	ldrb	r3, [r3, #0]
    7158:	4413      	add	r3, r2
    715a:	b2da      	uxtb	r2, r3
    715c:	f24b 7365 	movw	r3, #46949	; 0xb765
    7160:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7164:	701a      	strb	r2, [r3, #0]
    7166:	f24b 7366 	movw	r3, #46950	; 0xb766
    716a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    716e:	781a      	ldrb	r2, [r3, #0]
    7170:	f24b 7365 	movw	r3, #46949	; 0xb765
    7174:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7178:	781b      	ldrb	r3, [r3, #0]
    717a:	4413      	add	r3, r2
    717c:	b2da      	uxtb	r2, r3
    717e:	f24b 7366 	movw	r3, #46950	; 0xb766
    7182:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7186:	701a      	strb	r2, [r3, #0]
    7188:	f24b 6361 	movw	r3, #46689	; 0xb661
    718c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7190:	781b      	ldrb	r3, [r3, #0]
    7192:	3301      	adds	r3, #1
    7194:	b2da      	uxtb	r2, r3
    7196:	f24b 6361 	movw	r3, #46689	; 0xb661
    719a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    719e:	701a      	strb	r2, [r3, #0]
    71a0:	f24b 6361 	movw	r3, #46689	; 0xb661
    71a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71a8:	781b      	ldrb	r3, [r3, #0]
    71aa:	2bff      	cmp	r3, #255	; 0xff
    71ac:	d105      	bne.n	71ba <send_settings+0x4c6>
    71ae:	f24b 6361 	movw	r3, #46689	; 0xb661
    71b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71b6:	2200      	movs	r2, #0
    71b8:	701a      	strb	r2, [r3, #0]
    71ba:	f24b 6361 	movw	r3, #46689	; 0xb661
    71be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71c2:	781b      	ldrb	r3, [r3, #0]
    71c4:	461a      	mov	r2, r3
    71c6:	f24b 6354 	movw	r3, #46676	; 0xb654
    71ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71ce:	7859      	ldrb	r1, [r3, #1]
    71d0:	f24b 6364 	movw	r3, #46692	; 0xb664
    71d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71d8:	5499      	strb	r1, [r3, r2]
    71da:	4b43      	ldr	r3, [pc, #268]	; (72e8 <send_settings+0x5f4>)
    71dc:	781a      	ldrb	r2, [r3, #0]
    71de:	f24b 7365 	movw	r3, #46949	; 0xb765
    71e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71e6:	781b      	ldrb	r3, [r3, #0]
    71e8:	4413      	add	r3, r2
    71ea:	b2da      	uxtb	r2, r3
    71ec:	f24b 7365 	movw	r3, #46949	; 0xb765
    71f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71f4:	701a      	strb	r2, [r3, #0]
    71f6:	f24b 7366 	movw	r3, #46950	; 0xb766
    71fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71fe:	781a      	ldrb	r2, [r3, #0]
    7200:	f24b 7365 	movw	r3, #46949	; 0xb765
    7204:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7208:	781b      	ldrb	r3, [r3, #0]
    720a:	4413      	add	r3, r2
    720c:	b2da      	uxtb	r2, r3
    720e:	f24b 7366 	movw	r3, #46950	; 0xb766
    7212:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7216:	701a      	strb	r2, [r3, #0]
    7218:	f24b 6361 	movw	r3, #46689	; 0xb661
    721c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7220:	781b      	ldrb	r3, [r3, #0]
    7222:	3301      	adds	r3, #1
    7224:	b2da      	uxtb	r2, r3
    7226:	f24b 6361 	movw	r3, #46689	; 0xb661
    722a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    722e:	701a      	strb	r2, [r3, #0]
    7230:	f24b 6361 	movw	r3, #46689	; 0xb661
    7234:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7238:	781b      	ldrb	r3, [r3, #0]
    723a:	2bff      	cmp	r3, #255	; 0xff
    723c:	d105      	bne.n	724a <send_settings+0x556>
    723e:	f24b 6361 	movw	r3, #46689	; 0xb661
    7242:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7246:	2200      	movs	r2, #0
    7248:	701a      	strb	r2, [r3, #0]
    724a:	f24b 6361 	movw	r3, #46689	; 0xb661
    724e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7252:	781b      	ldrb	r3, [r3, #0]
    7254:	461a      	mov	r2, r3
    7256:	f24b 6354 	movw	r3, #46676	; 0xb654
    725a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    725e:	7899      	ldrb	r1, [r3, #2]
    7260:	f24b 6364 	movw	r3, #46692	; 0xb664
    7264:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7268:	5499      	strb	r1, [r3, r2]
    726a:	4b20      	ldr	r3, [pc, #128]	; (72ec <send_settings+0x5f8>)
    726c:	781a      	ldrb	r2, [r3, #0]
    726e:	f24b 7365 	movw	r3, #46949	; 0xb765
    7272:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7276:	781b      	ldrb	r3, [r3, #0]
    7278:	4413      	add	r3, r2
    727a:	b2da      	uxtb	r2, r3
    727c:	f24b 7365 	movw	r3, #46949	; 0xb765
    7280:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7284:	701a      	strb	r2, [r3, #0]
    7286:	f24b 7366 	movw	r3, #46950	; 0xb766
    728a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    728e:	781a      	ldrb	r2, [r3, #0]
    7290:	f24b 7365 	movw	r3, #46949	; 0xb765
    7294:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7298:	781b      	ldrb	r3, [r3, #0]
    729a:	4413      	add	r3, r2
    729c:	b2da      	uxtb	r2, r3
    729e:	f24b 7366 	movw	r3, #46950	; 0xb766
    72a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72a6:	701a      	strb	r2, [r3, #0]
    72a8:	f24b 6361 	movw	r3, #46689	; 0xb661
    72ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72b0:	781b      	ldrb	r3, [r3, #0]
    72b2:	3301      	adds	r3, #1
    72b4:	b2da      	uxtb	r2, r3
    72b6:	f24b 6361 	movw	r3, #46689	; 0xb661
    72ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72be:	701a      	strb	r2, [r3, #0]
    72c0:	f24b 6361 	movw	r3, #46689	; 0xb661
    72c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72c8:	781b      	ldrb	r3, [r3, #0]
    72ca:	2bff      	cmp	r3, #255	; 0xff
    72cc:	d110      	bne.n	72f0 <send_settings+0x5fc>
    72ce:	f24b 6361 	movw	r3, #46689	; 0xb661
    72d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72d6:	2200      	movs	r2, #0
    72d8:	701a      	strb	r2, [r3, #0]
    72da:	e009      	b.n	72f0 <send_settings+0x5fc>
    72dc:	2004b651 	.word	0x2004b651
    72e0:	2004b652 	.word	0x2004b652
    72e4:	2004b653 	.word	0x2004b653
    72e8:	2004b655 	.word	0x2004b655
    72ec:	2004b656 	.word	0x2004b656
    72f0:	f24b 6361 	movw	r3, #46689	; 0xb661
    72f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72f8:	781b      	ldrb	r3, [r3, #0]
    72fa:	461a      	mov	r2, r3
    72fc:	f24b 6354 	movw	r3, #46676	; 0xb654
    7300:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7304:	78d9      	ldrb	r1, [r3, #3]
    7306:	f24b 6364 	movw	r3, #46692	; 0xb664
    730a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    730e:	5499      	strb	r1, [r3, r2]
    7310:	4b79      	ldr	r3, [pc, #484]	; (74f8 <send_settings+0x804>)
    7312:	781a      	ldrb	r2, [r3, #0]
    7314:	f24b 7365 	movw	r3, #46949	; 0xb765
    7318:	f2c2 0304 	movt	r3, #8196	; 0x2004
    731c:	781b      	ldrb	r3, [r3, #0]
    731e:	4413      	add	r3, r2
    7320:	b2da      	uxtb	r2, r3
    7322:	f24b 7365 	movw	r3, #46949	; 0xb765
    7326:	f2c2 0304 	movt	r3, #8196	; 0x2004
    732a:	701a      	strb	r2, [r3, #0]
    732c:	f24b 7366 	movw	r3, #46950	; 0xb766
    7330:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7334:	781a      	ldrb	r2, [r3, #0]
    7336:	f24b 7365 	movw	r3, #46949	; 0xb765
    733a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    733e:	781b      	ldrb	r3, [r3, #0]
    7340:	4413      	add	r3, r2
    7342:	b2da      	uxtb	r2, r3
    7344:	f24b 7366 	movw	r3, #46950	; 0xb766
    7348:	f2c2 0304 	movt	r3, #8196	; 0x2004
    734c:	701a      	strb	r2, [r3, #0]
    734e:	f24b 6361 	movw	r3, #46689	; 0xb661
    7352:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7356:	781b      	ldrb	r3, [r3, #0]
    7358:	3301      	adds	r3, #1
    735a:	b2da      	uxtb	r2, r3
    735c:	f24b 6361 	movw	r3, #46689	; 0xb661
    7360:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7364:	701a      	strb	r2, [r3, #0]
    7366:	f24b 6361 	movw	r3, #46689	; 0xb661
    736a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    736e:	781b      	ldrb	r3, [r3, #0]
    7370:	2bff      	cmp	r3, #255	; 0xff
    7372:	d105      	bne.n	7380 <send_settings+0x68c>
    7374:	f24b 6361 	movw	r3, #46689	; 0xb661
    7378:	f2c2 0304 	movt	r3, #8196	; 0x2004
    737c:	2200      	movs	r2, #0
    737e:	701a      	strb	r2, [r3, #0]
    7380:	f24b 6361 	movw	r3, #46689	; 0xb661
    7384:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7388:	781b      	ldrb	r3, [r3, #0]
    738a:	461a      	mov	r2, r3
    738c:	f24b 7365 	movw	r3, #46949	; 0xb765
    7390:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7394:	7819      	ldrb	r1, [r3, #0]
    7396:	f24b 6364 	movw	r3, #46692	; 0xb664
    739a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    739e:	5499      	strb	r1, [r3, r2]
    73a0:	f24b 6361 	movw	r3, #46689	; 0xb661
    73a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73a8:	781b      	ldrb	r3, [r3, #0]
    73aa:	3301      	adds	r3, #1
    73ac:	b2da      	uxtb	r2, r3
    73ae:	f24b 6361 	movw	r3, #46689	; 0xb661
    73b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73b6:	701a      	strb	r2, [r3, #0]
    73b8:	f24b 6361 	movw	r3, #46689	; 0xb661
    73bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73c0:	781b      	ldrb	r3, [r3, #0]
    73c2:	2bff      	cmp	r3, #255	; 0xff
    73c4:	d105      	bne.n	73d2 <send_settings+0x6de>
    73c6:	f24b 6361 	movw	r3, #46689	; 0xb661
    73ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73ce:	2200      	movs	r2, #0
    73d0:	701a      	strb	r2, [r3, #0]
    73d2:	f24b 6361 	movw	r3, #46689	; 0xb661
    73d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73da:	781b      	ldrb	r3, [r3, #0]
    73dc:	461a      	mov	r2, r3
    73de:	f24b 7366 	movw	r3, #46950	; 0xb766
    73e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73e6:	7819      	ldrb	r1, [r3, #0]
    73e8:	f24b 6364 	movw	r3, #46692	; 0xb664
    73ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73f0:	5499      	strb	r1, [r3, r2]
    73f2:	f24b 6361 	movw	r3, #46689	; 0xb661
    73f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73fa:	781b      	ldrb	r3, [r3, #0]
    73fc:	3301      	adds	r3, #1
    73fe:	b2da      	uxtb	r2, r3
    7400:	f24b 6361 	movw	r3, #46689	; 0xb661
    7404:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7408:	701a      	strb	r2, [r3, #0]
    740a:	f24b 6361 	movw	r3, #46689	; 0xb661
    740e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7412:	781b      	ldrb	r3, [r3, #0]
    7414:	2bff      	cmp	r3, #255	; 0xff
    7416:	d105      	bne.n	7424 <send_settings+0x730>
    7418:	f24b 6361 	movw	r3, #46689	; 0xb661
    741c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7420:	2200      	movs	r2, #0
    7422:	701a      	strb	r2, [r3, #0]
    7424:	f248 0339 	movw	r3, #32825	; 0x8039
    7428:	f2c2 0300 	movt	r3, #8192	; 0x2000
    742c:	781b      	ldrb	r3, [r3, #0]
    742e:	b2db      	uxtb	r3, r3
    7430:	f003 0310 	and.w	r3, r3, #16
    7434:	2b00      	cmp	r3, #0
    7436:	d15a      	bne.n	74ee <send_settings+0x7fa>
    7438:	f24b 6362 	movw	r3, #46690	; 0xb662
    743c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7440:	781b      	ldrb	r3, [r3, #0]
    7442:	b2db      	uxtb	r3, r3
    7444:	461a      	mov	r2, r3
    7446:	f24b 6364 	movw	r3, #46692	; 0xb664
    744a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    744e:	5c9a      	ldrb	r2, [r3, r2]
    7450:	f24b 7363 	movw	r3, #46947	; 0xb763
    7454:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7458:	701a      	strb	r2, [r3, #0]
    745a:	f24b 7364 	movw	r3, #46948	; 0xb764
    745e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7462:	2200      	movs	r2, #0
    7464:	701a      	strb	r2, [r3, #0]
    7466:	f24b 6362 	movw	r3, #46690	; 0xb662
    746a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    746e:	781b      	ldrb	r3, [r3, #0]
    7470:	b2db      	uxtb	r3, r3
    7472:	3301      	adds	r3, #1
    7474:	b2da      	uxtb	r2, r3
    7476:	f24b 6362 	movw	r3, #46690	; 0xb662
    747a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    747e:	701a      	strb	r2, [r3, #0]
    7480:	f24b 6362 	movw	r3, #46690	; 0xb662
    7484:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7488:	781b      	ldrb	r3, [r3, #0]
    748a:	b2db      	uxtb	r3, r3
    748c:	2bff      	cmp	r3, #255	; 0xff
    748e:	d105      	bne.n	749c <send_settings+0x7a8>
    7490:	f24b 6362 	movw	r3, #46690	; 0xb662
    7494:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7498:	2200      	movs	r2, #0
    749a:	701a      	strb	r2, [r3, #0]
    749c:	f248 0338 	movw	r3, #32824	; 0x8038
    74a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74a4:	f248 0238 	movw	r2, #32824	; 0x8038
    74a8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    74ac:	7812      	ldrb	r2, [r2, #0]
    74ae:	b2d2      	uxtb	r2, r2
    74b0:	f042 0201 	orr.w	r2, r2, #1
    74b4:	b2d2      	uxtb	r2, r2
    74b6:	701a      	strb	r2, [r3, #0]
    74b8:	f248 0339 	movw	r3, #32825	; 0x8039
    74bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74c0:	f248 0239 	movw	r2, #32825	; 0x8039
    74c4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    74c8:	7812      	ldrb	r2, [r2, #0]
    74ca:	b2d2      	uxtb	r2, r2
    74cc:	f042 0210 	orr.w	r2, r2, #16
    74d0:	b2d2      	uxtb	r2, r2
    74d2:	701a      	strb	r2, [r3, #0]
    74d4:	e00b      	b.n	74ee <send_settings+0x7fa>
    74d6:	f24b 6360 	movw	r3, #46688	; 0xb660
    74da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74de:	781b      	ldrb	r3, [r3, #0]
    74e0:	3301      	adds	r3, #1
    74e2:	b2da      	uxtb	r2, r3
    74e4:	f24b 6360 	movw	r3, #46688	; 0xb660
    74e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74ec:	701a      	strb	r2, [r3, #0]
}
    74ee:	46bd      	mov	sp, r7
    74f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    74f4:	4770      	bx	lr
    74f6:	bf00      	nop
    74f8:	2004b657 	.word	0x2004b657

000074fc <send_desired>:
void send_desired(void){  //1000ms
    74fc:	b480      	push	{r7}
    74fe:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 10 == 3) PERIODIC_SEND_DESIRED();}
    7500:	f24b 6359 	movw	r3, #46681	; 0xb659
    7504:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7508:	781a      	ldrb	r2, [r3, #0]
    750a:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    750e:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    7512:	fba3 1302 	umull	r1, r3, r3, r2
    7516:	08d9      	lsrs	r1, r3, #3
    7518:	460b      	mov	r3, r1
    751a:	009b      	lsls	r3, r3, #2
    751c:	440b      	add	r3, r1
    751e:	005b      	lsls	r3, r3, #1
    7520:	1ad3      	subs	r3, r2, r3
    7522:	b2db      	uxtb	r3, r3
    7524:	2b03      	cmp	r3, #3
    7526:	f040 8712 	bne.w	834e <send_desired+0xe52>
    752a:	f24b 6361 	movw	r3, #46689	; 0xb661
    752e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7532:	781a      	ldrb	r2, [r3, #0]
    7534:	f24b 6362 	movw	r3, #46690	; 0xb662
    7538:	f2c2 0304 	movt	r3, #8196	; 0x2004
    753c:	781b      	ldrb	r3, [r3, #0]
    753e:	b2db      	uxtb	r3, r3
    7540:	429a      	cmp	r2, r3
    7542:	d313      	bcc.n	756c <send_desired+0x70>
    7544:	f24b 6362 	movw	r3, #46690	; 0xb662
    7548:	f2c2 0304 	movt	r3, #8196	; 0x2004
    754c:	781b      	ldrb	r3, [r3, #0]
    754e:	b2db      	uxtb	r3, r3
    7550:	461a      	mov	r2, r3
    7552:	f24b 6361 	movw	r3, #46689	; 0xb661
    7556:	f2c2 0304 	movt	r3, #8196	; 0x2004
    755a:	781b      	ldrb	r3, [r3, #0]
    755c:	1ad3      	subs	r3, r2, r3
    755e:	33ff      	adds	r3, #255	; 0xff
    7560:	2b18      	cmp	r3, #24
    7562:	bfd4      	ite	le
    7564:	2300      	movle	r3, #0
    7566:	2301      	movgt	r3, #1
    7568:	b2db      	uxtb	r3, r3
    756a:	e011      	b.n	7590 <send_desired+0x94>
    756c:	f24b 6362 	movw	r3, #46690	; 0xb662
    7570:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7574:	781b      	ldrb	r3, [r3, #0]
    7576:	b2db      	uxtb	r3, r3
    7578:	461a      	mov	r2, r3
    757a:	f24b 6361 	movw	r3, #46689	; 0xb661
    757e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7582:	781b      	ldrb	r3, [r3, #0]
    7584:	1ad3      	subs	r3, r2, r3
    7586:	2b18      	cmp	r3, #24
    7588:	bfd4      	ite	le
    758a:	2300      	movle	r3, #0
    758c:	2301      	movgt	r3, #1
    758e:	b2db      	uxtb	r3, r3
    7590:	2b00      	cmp	r3, #0
    7592:	f000 86d0 	beq.w	8336 <send_desired+0xe3a>
    7596:	f24b 6361 	movw	r3, #46689	; 0xb661
    759a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    759e:	781b      	ldrb	r3, [r3, #0]
    75a0:	461a      	mov	r2, r3
    75a2:	f24b 6364 	movw	r3, #46692	; 0xb664
    75a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75aa:	2105      	movs	r1, #5
    75ac:	5499      	strb	r1, [r3, r2]
    75ae:	f24b 6361 	movw	r3, #46689	; 0xb661
    75b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75b6:	781b      	ldrb	r3, [r3, #0]
    75b8:	3301      	adds	r3, #1
    75ba:	b2da      	uxtb	r2, r3
    75bc:	f24b 6361 	movw	r3, #46689	; 0xb661
    75c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75c4:	701a      	strb	r2, [r3, #0]
    75c6:	f24b 6361 	movw	r3, #46689	; 0xb661
    75ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75ce:	781b      	ldrb	r3, [r3, #0]
    75d0:	2bff      	cmp	r3, #255	; 0xff
    75d2:	d105      	bne.n	75e0 <send_desired+0xe4>
    75d4:	f24b 6361 	movw	r3, #46689	; 0xb661
    75d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75dc:	2200      	movs	r2, #0
    75de:	701a      	strb	r2, [r3, #0]
    75e0:	f24b 6361 	movw	r3, #46689	; 0xb661
    75e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75e8:	781b      	ldrb	r3, [r3, #0]
    75ea:	461a      	mov	r2, r3
    75ec:	f24b 6364 	movw	r3, #46692	; 0xb664
    75f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75f4:	2112      	movs	r1, #18
    75f6:	5499      	strb	r1, [r3, r2]
    75f8:	f24b 6361 	movw	r3, #46689	; 0xb661
    75fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7600:	781b      	ldrb	r3, [r3, #0]
    7602:	3301      	adds	r3, #1
    7604:	b2da      	uxtb	r2, r3
    7606:	f24b 6361 	movw	r3, #46689	; 0xb661
    760a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    760e:	701a      	strb	r2, [r3, #0]
    7610:	f24b 6361 	movw	r3, #46689	; 0xb661
    7614:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7618:	781b      	ldrb	r3, [r3, #0]
    761a:	2bff      	cmp	r3, #255	; 0xff
    761c:	d105      	bne.n	762a <send_desired+0x12e>
    761e:	f24b 6361 	movw	r3, #46689	; 0xb661
    7622:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7626:	2200      	movs	r2, #0
    7628:	701a      	strb	r2, [r3, #0]
    762a:	f24b 7365 	movw	r3, #46949	; 0xb765
    762e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7632:	2212      	movs	r2, #18
    7634:	701a      	strb	r2, [r3, #0]
    7636:	f24b 7366 	movw	r3, #46950	; 0xb766
    763a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    763e:	2212      	movs	r2, #18
    7640:	701a      	strb	r2, [r3, #0]
    7642:	f24b 6361 	movw	r3, #46689	; 0xb661
    7646:	f2c2 0304 	movt	r3, #8196	; 0x2004
    764a:	781b      	ldrb	r3, [r3, #0]
    764c:	461a      	mov	r2, r3
    764e:	f64b 138c 	movw	r3, #47500	; 0xb98c
    7652:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7656:	7819      	ldrb	r1, [r3, #0]
    7658:	f24b 6364 	movw	r3, #46692	; 0xb664
    765c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7660:	5499      	strb	r1, [r3, r2]
    7662:	f64b 138c 	movw	r3, #47500	; 0xb98c
    7666:	f2c2 0304 	movt	r3, #8196	; 0x2004
    766a:	781a      	ldrb	r2, [r3, #0]
    766c:	f24b 7365 	movw	r3, #46949	; 0xb765
    7670:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7674:	781b      	ldrb	r3, [r3, #0]
    7676:	4413      	add	r3, r2
    7678:	b2da      	uxtb	r2, r3
    767a:	f24b 7365 	movw	r3, #46949	; 0xb765
    767e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7682:	701a      	strb	r2, [r3, #0]
    7684:	f24b 7366 	movw	r3, #46950	; 0xb766
    7688:	f2c2 0304 	movt	r3, #8196	; 0x2004
    768c:	781a      	ldrb	r2, [r3, #0]
    768e:	f24b 7365 	movw	r3, #46949	; 0xb765
    7692:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7696:	781b      	ldrb	r3, [r3, #0]
    7698:	4413      	add	r3, r2
    769a:	b2da      	uxtb	r2, r3
    769c:	f24b 7366 	movw	r3, #46950	; 0xb766
    76a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76a4:	701a      	strb	r2, [r3, #0]
    76a6:	f24b 6361 	movw	r3, #46689	; 0xb661
    76aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76ae:	781b      	ldrb	r3, [r3, #0]
    76b0:	3301      	adds	r3, #1
    76b2:	b2da      	uxtb	r2, r3
    76b4:	f24b 6361 	movw	r3, #46689	; 0xb661
    76b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76bc:	701a      	strb	r2, [r3, #0]
    76be:	f24b 6361 	movw	r3, #46689	; 0xb661
    76c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76c6:	781b      	ldrb	r3, [r3, #0]
    76c8:	2bff      	cmp	r3, #255	; 0xff
    76ca:	d105      	bne.n	76d8 <send_desired+0x1dc>
    76cc:	f24b 6361 	movw	r3, #46689	; 0xb661
    76d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76d4:	2200      	movs	r2, #0
    76d6:	701a      	strb	r2, [r3, #0]
    76d8:	f24b 6361 	movw	r3, #46689	; 0xb661
    76dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76e0:	781b      	ldrb	r3, [r3, #0]
    76e2:	461a      	mov	r2, r3
    76e4:	f64b 138c 	movw	r3, #47500	; 0xb98c
    76e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76ec:	7859      	ldrb	r1, [r3, #1]
    76ee:	f24b 6364 	movw	r3, #46692	; 0xb664
    76f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76f6:	5499      	strb	r1, [r3, r2]
    76f8:	4bd1      	ldr	r3, [pc, #836]	; (7a40 <send_desired+0x544>)
    76fa:	781a      	ldrb	r2, [r3, #0]
    76fc:	f24b 7365 	movw	r3, #46949	; 0xb765
    7700:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7704:	781b      	ldrb	r3, [r3, #0]
    7706:	4413      	add	r3, r2
    7708:	b2da      	uxtb	r2, r3
    770a:	f24b 7365 	movw	r3, #46949	; 0xb765
    770e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7712:	701a      	strb	r2, [r3, #0]
    7714:	f24b 7366 	movw	r3, #46950	; 0xb766
    7718:	f2c2 0304 	movt	r3, #8196	; 0x2004
    771c:	781a      	ldrb	r2, [r3, #0]
    771e:	f24b 7365 	movw	r3, #46949	; 0xb765
    7722:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7726:	781b      	ldrb	r3, [r3, #0]
    7728:	4413      	add	r3, r2
    772a:	b2da      	uxtb	r2, r3
    772c:	f24b 7366 	movw	r3, #46950	; 0xb766
    7730:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7734:	701a      	strb	r2, [r3, #0]
    7736:	f24b 6361 	movw	r3, #46689	; 0xb661
    773a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    773e:	781b      	ldrb	r3, [r3, #0]
    7740:	3301      	adds	r3, #1
    7742:	b2da      	uxtb	r2, r3
    7744:	f24b 6361 	movw	r3, #46689	; 0xb661
    7748:	f2c2 0304 	movt	r3, #8196	; 0x2004
    774c:	701a      	strb	r2, [r3, #0]
    774e:	f24b 6361 	movw	r3, #46689	; 0xb661
    7752:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7756:	781b      	ldrb	r3, [r3, #0]
    7758:	2bff      	cmp	r3, #255	; 0xff
    775a:	d105      	bne.n	7768 <send_desired+0x26c>
    775c:	f24b 6361 	movw	r3, #46689	; 0xb661
    7760:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7764:	2200      	movs	r2, #0
    7766:	701a      	strb	r2, [r3, #0]
    7768:	f24b 6361 	movw	r3, #46689	; 0xb661
    776c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7770:	781b      	ldrb	r3, [r3, #0]
    7772:	461a      	mov	r2, r3
    7774:	f64b 138c 	movw	r3, #47500	; 0xb98c
    7778:	f2c2 0304 	movt	r3, #8196	; 0x2004
    777c:	7899      	ldrb	r1, [r3, #2]
    777e:	f24b 6364 	movw	r3, #46692	; 0xb664
    7782:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7786:	5499      	strb	r1, [r3, r2]
    7788:	4bae      	ldr	r3, [pc, #696]	; (7a44 <send_desired+0x548>)
    778a:	781a      	ldrb	r2, [r3, #0]
    778c:	f24b 7365 	movw	r3, #46949	; 0xb765
    7790:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7794:	781b      	ldrb	r3, [r3, #0]
    7796:	4413      	add	r3, r2
    7798:	b2da      	uxtb	r2, r3
    779a:	f24b 7365 	movw	r3, #46949	; 0xb765
    779e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77a2:	701a      	strb	r2, [r3, #0]
    77a4:	f24b 7366 	movw	r3, #46950	; 0xb766
    77a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77ac:	781a      	ldrb	r2, [r3, #0]
    77ae:	f24b 7365 	movw	r3, #46949	; 0xb765
    77b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77b6:	781b      	ldrb	r3, [r3, #0]
    77b8:	4413      	add	r3, r2
    77ba:	b2da      	uxtb	r2, r3
    77bc:	f24b 7366 	movw	r3, #46950	; 0xb766
    77c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77c4:	701a      	strb	r2, [r3, #0]
    77c6:	f24b 6361 	movw	r3, #46689	; 0xb661
    77ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77ce:	781b      	ldrb	r3, [r3, #0]
    77d0:	3301      	adds	r3, #1
    77d2:	b2da      	uxtb	r2, r3
    77d4:	f24b 6361 	movw	r3, #46689	; 0xb661
    77d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77dc:	701a      	strb	r2, [r3, #0]
    77de:	f24b 6361 	movw	r3, #46689	; 0xb661
    77e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77e6:	781b      	ldrb	r3, [r3, #0]
    77e8:	2bff      	cmp	r3, #255	; 0xff
    77ea:	d105      	bne.n	77f8 <send_desired+0x2fc>
    77ec:	f24b 6361 	movw	r3, #46689	; 0xb661
    77f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77f4:	2200      	movs	r2, #0
    77f6:	701a      	strb	r2, [r3, #0]
    77f8:	f24b 6361 	movw	r3, #46689	; 0xb661
    77fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7800:	781b      	ldrb	r3, [r3, #0]
    7802:	461a      	mov	r2, r3
    7804:	f64b 138c 	movw	r3, #47500	; 0xb98c
    7808:	f2c2 0304 	movt	r3, #8196	; 0x2004
    780c:	78d9      	ldrb	r1, [r3, #3]
    780e:	f24b 6364 	movw	r3, #46692	; 0xb664
    7812:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7816:	5499      	strb	r1, [r3, r2]
    7818:	4b8b      	ldr	r3, [pc, #556]	; (7a48 <send_desired+0x54c>)
    781a:	781a      	ldrb	r2, [r3, #0]
    781c:	f24b 7365 	movw	r3, #46949	; 0xb765
    7820:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7824:	781b      	ldrb	r3, [r3, #0]
    7826:	4413      	add	r3, r2
    7828:	b2da      	uxtb	r2, r3
    782a:	f24b 7365 	movw	r3, #46949	; 0xb765
    782e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7832:	701a      	strb	r2, [r3, #0]
    7834:	f24b 7366 	movw	r3, #46950	; 0xb766
    7838:	f2c2 0304 	movt	r3, #8196	; 0x2004
    783c:	781a      	ldrb	r2, [r3, #0]
    783e:	f24b 7365 	movw	r3, #46949	; 0xb765
    7842:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7846:	781b      	ldrb	r3, [r3, #0]
    7848:	4413      	add	r3, r2
    784a:	b2da      	uxtb	r2, r3
    784c:	f24b 7366 	movw	r3, #46950	; 0xb766
    7850:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7854:	701a      	strb	r2, [r3, #0]
    7856:	f24b 6361 	movw	r3, #46689	; 0xb661
    785a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    785e:	781b      	ldrb	r3, [r3, #0]
    7860:	3301      	adds	r3, #1
    7862:	b2da      	uxtb	r2, r3
    7864:	f24b 6361 	movw	r3, #46689	; 0xb661
    7868:	f2c2 0304 	movt	r3, #8196	; 0x2004
    786c:	701a      	strb	r2, [r3, #0]
    786e:	f24b 6361 	movw	r3, #46689	; 0xb661
    7872:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7876:	781b      	ldrb	r3, [r3, #0]
    7878:	2bff      	cmp	r3, #255	; 0xff
    787a:	d105      	bne.n	7888 <send_desired+0x38c>
    787c:	f24b 6361 	movw	r3, #46689	; 0xb661
    7880:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7884:	2200      	movs	r2, #0
    7886:	701a      	strb	r2, [r3, #0]
    7888:	f24b 6361 	movw	r3, #46689	; 0xb661
    788c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7890:	781b      	ldrb	r3, [r3, #0]
    7892:	461a      	mov	r2, r3
    7894:	f64b 1390 	movw	r3, #47504	; 0xb990
    7898:	f2c2 0304 	movt	r3, #8196	; 0x2004
    789c:	7819      	ldrb	r1, [r3, #0]
    789e:	f24b 6364 	movw	r3, #46692	; 0xb664
    78a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78a6:	5499      	strb	r1, [r3, r2]
    78a8:	f64b 1390 	movw	r3, #47504	; 0xb990
    78ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78b0:	781a      	ldrb	r2, [r3, #0]
    78b2:	f24b 7365 	movw	r3, #46949	; 0xb765
    78b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78ba:	781b      	ldrb	r3, [r3, #0]
    78bc:	4413      	add	r3, r2
    78be:	b2da      	uxtb	r2, r3
    78c0:	f24b 7365 	movw	r3, #46949	; 0xb765
    78c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78c8:	701a      	strb	r2, [r3, #0]
    78ca:	f24b 7366 	movw	r3, #46950	; 0xb766
    78ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78d2:	781a      	ldrb	r2, [r3, #0]
    78d4:	f24b 7365 	movw	r3, #46949	; 0xb765
    78d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78dc:	781b      	ldrb	r3, [r3, #0]
    78de:	4413      	add	r3, r2
    78e0:	b2da      	uxtb	r2, r3
    78e2:	f24b 7366 	movw	r3, #46950	; 0xb766
    78e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78ea:	701a      	strb	r2, [r3, #0]
    78ec:	f24b 6361 	movw	r3, #46689	; 0xb661
    78f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78f4:	781b      	ldrb	r3, [r3, #0]
    78f6:	3301      	adds	r3, #1
    78f8:	b2da      	uxtb	r2, r3
    78fa:	f24b 6361 	movw	r3, #46689	; 0xb661
    78fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7902:	701a      	strb	r2, [r3, #0]
    7904:	f24b 6361 	movw	r3, #46689	; 0xb661
    7908:	f2c2 0304 	movt	r3, #8196	; 0x2004
    790c:	781b      	ldrb	r3, [r3, #0]
    790e:	2bff      	cmp	r3, #255	; 0xff
    7910:	d105      	bne.n	791e <send_desired+0x422>
    7912:	f24b 6361 	movw	r3, #46689	; 0xb661
    7916:	f2c2 0304 	movt	r3, #8196	; 0x2004
    791a:	2200      	movs	r2, #0
    791c:	701a      	strb	r2, [r3, #0]
    791e:	f24b 6361 	movw	r3, #46689	; 0xb661
    7922:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7926:	781b      	ldrb	r3, [r3, #0]
    7928:	461a      	mov	r2, r3
    792a:	f64b 1390 	movw	r3, #47504	; 0xb990
    792e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7932:	7859      	ldrb	r1, [r3, #1]
    7934:	f24b 6364 	movw	r3, #46692	; 0xb664
    7938:	f2c2 0304 	movt	r3, #8196	; 0x2004
    793c:	5499      	strb	r1, [r3, r2]
    793e:	4b43      	ldr	r3, [pc, #268]	; (7a4c <send_desired+0x550>)
    7940:	781a      	ldrb	r2, [r3, #0]
    7942:	f24b 7365 	movw	r3, #46949	; 0xb765
    7946:	f2c2 0304 	movt	r3, #8196	; 0x2004
    794a:	781b      	ldrb	r3, [r3, #0]
    794c:	4413      	add	r3, r2
    794e:	b2da      	uxtb	r2, r3
    7950:	f24b 7365 	movw	r3, #46949	; 0xb765
    7954:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7958:	701a      	strb	r2, [r3, #0]
    795a:	f24b 7366 	movw	r3, #46950	; 0xb766
    795e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7962:	781a      	ldrb	r2, [r3, #0]
    7964:	f24b 7365 	movw	r3, #46949	; 0xb765
    7968:	f2c2 0304 	movt	r3, #8196	; 0x2004
    796c:	781b      	ldrb	r3, [r3, #0]
    796e:	4413      	add	r3, r2
    7970:	b2da      	uxtb	r2, r3
    7972:	f24b 7366 	movw	r3, #46950	; 0xb766
    7976:	f2c2 0304 	movt	r3, #8196	; 0x2004
    797a:	701a      	strb	r2, [r3, #0]
    797c:	f24b 6361 	movw	r3, #46689	; 0xb661
    7980:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7984:	781b      	ldrb	r3, [r3, #0]
    7986:	3301      	adds	r3, #1
    7988:	b2da      	uxtb	r2, r3
    798a:	f24b 6361 	movw	r3, #46689	; 0xb661
    798e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7992:	701a      	strb	r2, [r3, #0]
    7994:	f24b 6361 	movw	r3, #46689	; 0xb661
    7998:	f2c2 0304 	movt	r3, #8196	; 0x2004
    799c:	781b      	ldrb	r3, [r3, #0]
    799e:	2bff      	cmp	r3, #255	; 0xff
    79a0:	d105      	bne.n	79ae <send_desired+0x4b2>
    79a2:	f24b 6361 	movw	r3, #46689	; 0xb661
    79a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79aa:	2200      	movs	r2, #0
    79ac:	701a      	strb	r2, [r3, #0]
    79ae:	f24b 6361 	movw	r3, #46689	; 0xb661
    79b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79b6:	781b      	ldrb	r3, [r3, #0]
    79b8:	461a      	mov	r2, r3
    79ba:	f64b 1390 	movw	r3, #47504	; 0xb990
    79be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79c2:	7899      	ldrb	r1, [r3, #2]
    79c4:	f24b 6364 	movw	r3, #46692	; 0xb664
    79c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79cc:	5499      	strb	r1, [r3, r2]
    79ce:	4b20      	ldr	r3, [pc, #128]	; (7a50 <send_desired+0x554>)
    79d0:	781a      	ldrb	r2, [r3, #0]
    79d2:	f24b 7365 	movw	r3, #46949	; 0xb765
    79d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79da:	781b      	ldrb	r3, [r3, #0]
    79dc:	4413      	add	r3, r2
    79de:	b2da      	uxtb	r2, r3
    79e0:	f24b 7365 	movw	r3, #46949	; 0xb765
    79e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79e8:	701a      	strb	r2, [r3, #0]
    79ea:	f24b 7366 	movw	r3, #46950	; 0xb766
    79ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79f2:	781a      	ldrb	r2, [r3, #0]
    79f4:	f24b 7365 	movw	r3, #46949	; 0xb765
    79f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79fc:	781b      	ldrb	r3, [r3, #0]
    79fe:	4413      	add	r3, r2
    7a00:	b2da      	uxtb	r2, r3
    7a02:	f24b 7366 	movw	r3, #46950	; 0xb766
    7a06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a0a:	701a      	strb	r2, [r3, #0]
    7a0c:	f24b 6361 	movw	r3, #46689	; 0xb661
    7a10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a14:	781b      	ldrb	r3, [r3, #0]
    7a16:	3301      	adds	r3, #1
    7a18:	b2da      	uxtb	r2, r3
    7a1a:	f24b 6361 	movw	r3, #46689	; 0xb661
    7a1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a22:	701a      	strb	r2, [r3, #0]
    7a24:	f24b 6361 	movw	r3, #46689	; 0xb661
    7a28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a2c:	781b      	ldrb	r3, [r3, #0]
    7a2e:	2bff      	cmp	r3, #255	; 0xff
    7a30:	d110      	bne.n	7a54 <send_desired+0x558>
    7a32:	f24b 6361 	movw	r3, #46689	; 0xb661
    7a36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a3a:	2200      	movs	r2, #0
    7a3c:	701a      	strb	r2, [r3, #0]
    7a3e:	e009      	b.n	7a54 <send_desired+0x558>
    7a40:	2004b98d 	.word	0x2004b98d
    7a44:	2004b98e 	.word	0x2004b98e
    7a48:	2004b98f 	.word	0x2004b98f
    7a4c:	2004b991 	.word	0x2004b991
    7a50:	2004b992 	.word	0x2004b992
    7a54:	f24b 6361 	movw	r3, #46689	; 0xb661
    7a58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a5c:	781b      	ldrb	r3, [r3, #0]
    7a5e:	461a      	mov	r2, r3
    7a60:	f64b 1390 	movw	r3, #47504	; 0xb990
    7a64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a68:	78d9      	ldrb	r1, [r3, #3]
    7a6a:	f24b 6364 	movw	r3, #46692	; 0xb664
    7a6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a72:	5499      	strb	r1, [r3, r2]
    7a74:	4bd3      	ldr	r3, [pc, #844]	; (7dc4 <send_desired+0x8c8>)
    7a76:	781a      	ldrb	r2, [r3, #0]
    7a78:	f24b 7365 	movw	r3, #46949	; 0xb765
    7a7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a80:	781b      	ldrb	r3, [r3, #0]
    7a82:	4413      	add	r3, r2
    7a84:	b2da      	uxtb	r2, r3
    7a86:	f24b 7365 	movw	r3, #46949	; 0xb765
    7a8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a8e:	701a      	strb	r2, [r3, #0]
    7a90:	f24b 7366 	movw	r3, #46950	; 0xb766
    7a94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a98:	781a      	ldrb	r2, [r3, #0]
    7a9a:	f24b 7365 	movw	r3, #46949	; 0xb765
    7a9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7aa2:	781b      	ldrb	r3, [r3, #0]
    7aa4:	4413      	add	r3, r2
    7aa6:	b2da      	uxtb	r2, r3
    7aa8:	f24b 7366 	movw	r3, #46950	; 0xb766
    7aac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ab0:	701a      	strb	r2, [r3, #0]
    7ab2:	f24b 6361 	movw	r3, #46689	; 0xb661
    7ab6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7aba:	781b      	ldrb	r3, [r3, #0]
    7abc:	3301      	adds	r3, #1
    7abe:	b2da      	uxtb	r2, r3
    7ac0:	f24b 6361 	movw	r3, #46689	; 0xb661
    7ac4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ac8:	701a      	strb	r2, [r3, #0]
    7aca:	f24b 6361 	movw	r3, #46689	; 0xb661
    7ace:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ad2:	781b      	ldrb	r3, [r3, #0]
    7ad4:	2bff      	cmp	r3, #255	; 0xff
    7ad6:	d105      	bne.n	7ae4 <send_desired+0x5e8>
    7ad8:	f24b 6361 	movw	r3, #46689	; 0xb661
    7adc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ae0:	2200      	movs	r2, #0
    7ae2:	701a      	strb	r2, [r3, #0]
    7ae4:	f24b 6361 	movw	r3, #46689	; 0xb661
    7ae8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7aec:	781b      	ldrb	r3, [r3, #0]
    7aee:	461a      	mov	r2, r3
    7af0:	f64b 13d8 	movw	r3, #47576	; 0xb9d8
    7af4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7af8:	7819      	ldrb	r1, [r3, #0]
    7afa:	f24b 6364 	movw	r3, #46692	; 0xb664
    7afe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b02:	5499      	strb	r1, [r3, r2]
    7b04:	f64b 13d8 	movw	r3, #47576	; 0xb9d8
    7b08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b0c:	781a      	ldrb	r2, [r3, #0]
    7b0e:	f24b 7365 	movw	r3, #46949	; 0xb765
    7b12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b16:	781b      	ldrb	r3, [r3, #0]
    7b18:	4413      	add	r3, r2
    7b1a:	b2da      	uxtb	r2, r3
    7b1c:	f24b 7365 	movw	r3, #46949	; 0xb765
    7b20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b24:	701a      	strb	r2, [r3, #0]
    7b26:	f24b 7366 	movw	r3, #46950	; 0xb766
    7b2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b2e:	781a      	ldrb	r2, [r3, #0]
    7b30:	f24b 7365 	movw	r3, #46949	; 0xb765
    7b34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b38:	781b      	ldrb	r3, [r3, #0]
    7b3a:	4413      	add	r3, r2
    7b3c:	b2da      	uxtb	r2, r3
    7b3e:	f24b 7366 	movw	r3, #46950	; 0xb766
    7b42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b46:	701a      	strb	r2, [r3, #0]
    7b48:	f24b 6361 	movw	r3, #46689	; 0xb661
    7b4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b50:	781b      	ldrb	r3, [r3, #0]
    7b52:	3301      	adds	r3, #1
    7b54:	b2da      	uxtb	r2, r3
    7b56:	f24b 6361 	movw	r3, #46689	; 0xb661
    7b5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b5e:	701a      	strb	r2, [r3, #0]
    7b60:	f24b 6361 	movw	r3, #46689	; 0xb661
    7b64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b68:	781b      	ldrb	r3, [r3, #0]
    7b6a:	2bff      	cmp	r3, #255	; 0xff
    7b6c:	d105      	bne.n	7b7a <send_desired+0x67e>
    7b6e:	f24b 6361 	movw	r3, #46689	; 0xb661
    7b72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b76:	2200      	movs	r2, #0
    7b78:	701a      	strb	r2, [r3, #0]
    7b7a:	f24b 6361 	movw	r3, #46689	; 0xb661
    7b7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b82:	781b      	ldrb	r3, [r3, #0]
    7b84:	461a      	mov	r2, r3
    7b86:	f64b 13d8 	movw	r3, #47576	; 0xb9d8
    7b8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b8e:	7859      	ldrb	r1, [r3, #1]
    7b90:	f24b 6364 	movw	r3, #46692	; 0xb664
    7b94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b98:	5499      	strb	r1, [r3, r2]
    7b9a:	4b8b      	ldr	r3, [pc, #556]	; (7dc8 <send_desired+0x8cc>)
    7b9c:	781a      	ldrb	r2, [r3, #0]
    7b9e:	f24b 7365 	movw	r3, #46949	; 0xb765
    7ba2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ba6:	781b      	ldrb	r3, [r3, #0]
    7ba8:	4413      	add	r3, r2
    7baa:	b2da      	uxtb	r2, r3
    7bac:	f24b 7365 	movw	r3, #46949	; 0xb765
    7bb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bb4:	701a      	strb	r2, [r3, #0]
    7bb6:	f24b 7366 	movw	r3, #46950	; 0xb766
    7bba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bbe:	781a      	ldrb	r2, [r3, #0]
    7bc0:	f24b 7365 	movw	r3, #46949	; 0xb765
    7bc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bc8:	781b      	ldrb	r3, [r3, #0]
    7bca:	4413      	add	r3, r2
    7bcc:	b2da      	uxtb	r2, r3
    7bce:	f24b 7366 	movw	r3, #46950	; 0xb766
    7bd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bd6:	701a      	strb	r2, [r3, #0]
    7bd8:	f24b 6361 	movw	r3, #46689	; 0xb661
    7bdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7be0:	781b      	ldrb	r3, [r3, #0]
    7be2:	3301      	adds	r3, #1
    7be4:	b2da      	uxtb	r2, r3
    7be6:	f24b 6361 	movw	r3, #46689	; 0xb661
    7bea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bee:	701a      	strb	r2, [r3, #0]
    7bf0:	f24b 6361 	movw	r3, #46689	; 0xb661
    7bf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bf8:	781b      	ldrb	r3, [r3, #0]
    7bfa:	2bff      	cmp	r3, #255	; 0xff
    7bfc:	d105      	bne.n	7c0a <send_desired+0x70e>
    7bfe:	f24b 6361 	movw	r3, #46689	; 0xb661
    7c02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c06:	2200      	movs	r2, #0
    7c08:	701a      	strb	r2, [r3, #0]
    7c0a:	f24b 6361 	movw	r3, #46689	; 0xb661
    7c0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c12:	781b      	ldrb	r3, [r3, #0]
    7c14:	461a      	mov	r2, r3
    7c16:	f64b 13d8 	movw	r3, #47576	; 0xb9d8
    7c1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c1e:	7899      	ldrb	r1, [r3, #2]
    7c20:	f24b 6364 	movw	r3, #46692	; 0xb664
    7c24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c28:	5499      	strb	r1, [r3, r2]
    7c2a:	4b68      	ldr	r3, [pc, #416]	; (7dcc <send_desired+0x8d0>)
    7c2c:	781a      	ldrb	r2, [r3, #0]
    7c2e:	f24b 7365 	movw	r3, #46949	; 0xb765
    7c32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c36:	781b      	ldrb	r3, [r3, #0]
    7c38:	4413      	add	r3, r2
    7c3a:	b2da      	uxtb	r2, r3
    7c3c:	f24b 7365 	movw	r3, #46949	; 0xb765
    7c40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c44:	701a      	strb	r2, [r3, #0]
    7c46:	f24b 7366 	movw	r3, #46950	; 0xb766
    7c4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c4e:	781a      	ldrb	r2, [r3, #0]
    7c50:	f24b 7365 	movw	r3, #46949	; 0xb765
    7c54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c58:	781b      	ldrb	r3, [r3, #0]
    7c5a:	4413      	add	r3, r2
    7c5c:	b2da      	uxtb	r2, r3
    7c5e:	f24b 7366 	movw	r3, #46950	; 0xb766
    7c62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c66:	701a      	strb	r2, [r3, #0]
    7c68:	f24b 6361 	movw	r3, #46689	; 0xb661
    7c6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c70:	781b      	ldrb	r3, [r3, #0]
    7c72:	3301      	adds	r3, #1
    7c74:	b2da      	uxtb	r2, r3
    7c76:	f24b 6361 	movw	r3, #46689	; 0xb661
    7c7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c7e:	701a      	strb	r2, [r3, #0]
    7c80:	f24b 6361 	movw	r3, #46689	; 0xb661
    7c84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c88:	781b      	ldrb	r3, [r3, #0]
    7c8a:	2bff      	cmp	r3, #255	; 0xff
    7c8c:	d105      	bne.n	7c9a <send_desired+0x79e>
    7c8e:	f24b 6361 	movw	r3, #46689	; 0xb661
    7c92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c96:	2200      	movs	r2, #0
    7c98:	701a      	strb	r2, [r3, #0]
    7c9a:	f24b 6361 	movw	r3, #46689	; 0xb661
    7c9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ca2:	781b      	ldrb	r3, [r3, #0]
    7ca4:	461a      	mov	r2, r3
    7ca6:	f64b 13d8 	movw	r3, #47576	; 0xb9d8
    7caa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cae:	78d9      	ldrb	r1, [r3, #3]
    7cb0:	f24b 6364 	movw	r3, #46692	; 0xb664
    7cb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cb8:	5499      	strb	r1, [r3, r2]
    7cba:	4b45      	ldr	r3, [pc, #276]	; (7dd0 <send_desired+0x8d4>)
    7cbc:	781a      	ldrb	r2, [r3, #0]
    7cbe:	f24b 7365 	movw	r3, #46949	; 0xb765
    7cc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cc6:	781b      	ldrb	r3, [r3, #0]
    7cc8:	4413      	add	r3, r2
    7cca:	b2da      	uxtb	r2, r3
    7ccc:	f24b 7365 	movw	r3, #46949	; 0xb765
    7cd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cd4:	701a      	strb	r2, [r3, #0]
    7cd6:	f24b 7366 	movw	r3, #46950	; 0xb766
    7cda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cde:	781a      	ldrb	r2, [r3, #0]
    7ce0:	f24b 7365 	movw	r3, #46949	; 0xb765
    7ce4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ce8:	781b      	ldrb	r3, [r3, #0]
    7cea:	4413      	add	r3, r2
    7cec:	b2da      	uxtb	r2, r3
    7cee:	f24b 7366 	movw	r3, #46950	; 0xb766
    7cf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cf6:	701a      	strb	r2, [r3, #0]
    7cf8:	f24b 6361 	movw	r3, #46689	; 0xb661
    7cfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d00:	781b      	ldrb	r3, [r3, #0]
    7d02:	3301      	adds	r3, #1
    7d04:	b2da      	uxtb	r2, r3
    7d06:	f24b 6361 	movw	r3, #46689	; 0xb661
    7d0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d0e:	701a      	strb	r2, [r3, #0]
    7d10:	f24b 6361 	movw	r3, #46689	; 0xb661
    7d14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d18:	781b      	ldrb	r3, [r3, #0]
    7d1a:	2bff      	cmp	r3, #255	; 0xff
    7d1c:	d105      	bne.n	7d2a <send_desired+0x82e>
    7d1e:	f24b 6361 	movw	r3, #46689	; 0xb661
    7d22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d26:	2200      	movs	r2, #0
    7d28:	701a      	strb	r2, [r3, #0]
    7d2a:	f24b 6361 	movw	r3, #46689	; 0xb661
    7d2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d32:	781b      	ldrb	r3, [r3, #0]
    7d34:	461a      	mov	r2, r3
    7d36:	f64b 13dc 	movw	r3, #47580	; 0xb9dc
    7d3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d3e:	7819      	ldrb	r1, [r3, #0]
    7d40:	f24b 6364 	movw	r3, #46692	; 0xb664
    7d44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d48:	5499      	strb	r1, [r3, r2]
    7d4a:	f64b 13dc 	movw	r3, #47580	; 0xb9dc
    7d4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d52:	781a      	ldrb	r2, [r3, #0]
    7d54:	f24b 7365 	movw	r3, #46949	; 0xb765
    7d58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d5c:	781b      	ldrb	r3, [r3, #0]
    7d5e:	4413      	add	r3, r2
    7d60:	b2da      	uxtb	r2, r3
    7d62:	f24b 7365 	movw	r3, #46949	; 0xb765
    7d66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d6a:	701a      	strb	r2, [r3, #0]
    7d6c:	f24b 7366 	movw	r3, #46950	; 0xb766
    7d70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d74:	781a      	ldrb	r2, [r3, #0]
    7d76:	f24b 7365 	movw	r3, #46949	; 0xb765
    7d7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d7e:	781b      	ldrb	r3, [r3, #0]
    7d80:	4413      	add	r3, r2
    7d82:	b2da      	uxtb	r2, r3
    7d84:	f24b 7366 	movw	r3, #46950	; 0xb766
    7d88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d8c:	701a      	strb	r2, [r3, #0]
    7d8e:	f24b 6361 	movw	r3, #46689	; 0xb661
    7d92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d96:	781b      	ldrb	r3, [r3, #0]
    7d98:	3301      	adds	r3, #1
    7d9a:	b2da      	uxtb	r2, r3
    7d9c:	f24b 6361 	movw	r3, #46689	; 0xb661
    7da0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7da4:	701a      	strb	r2, [r3, #0]
    7da6:	f24b 6361 	movw	r3, #46689	; 0xb661
    7daa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dae:	781b      	ldrb	r3, [r3, #0]
    7db0:	2bff      	cmp	r3, #255	; 0xff
    7db2:	d10f      	bne.n	7dd4 <send_desired+0x8d8>
    7db4:	f24b 6361 	movw	r3, #46689	; 0xb661
    7db8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dbc:	2200      	movs	r2, #0
    7dbe:	701a      	strb	r2, [r3, #0]
    7dc0:	e008      	b.n	7dd4 <send_desired+0x8d8>
    7dc2:	bf00      	nop
    7dc4:	2004b993 	.word	0x2004b993
    7dc8:	2004b9d9 	.word	0x2004b9d9
    7dcc:	2004b9da 	.word	0x2004b9da
    7dd0:	2004b9db 	.word	0x2004b9db
    7dd4:	f24b 6361 	movw	r3, #46689	; 0xb661
    7dd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ddc:	781b      	ldrb	r3, [r3, #0]
    7dde:	461a      	mov	r2, r3
    7de0:	f64b 13dc 	movw	r3, #47580	; 0xb9dc
    7de4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7de8:	7859      	ldrb	r1, [r3, #1]
    7dea:	f24b 6364 	movw	r3, #46692	; 0xb664
    7dee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7df2:	5499      	strb	r1, [r3, r2]
    7df4:	4bd1      	ldr	r3, [pc, #836]	; (813c <send_desired+0xc40>)
    7df6:	781a      	ldrb	r2, [r3, #0]
    7df8:	f24b 7365 	movw	r3, #46949	; 0xb765
    7dfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e00:	781b      	ldrb	r3, [r3, #0]
    7e02:	4413      	add	r3, r2
    7e04:	b2da      	uxtb	r2, r3
    7e06:	f24b 7365 	movw	r3, #46949	; 0xb765
    7e0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e0e:	701a      	strb	r2, [r3, #0]
    7e10:	f24b 7366 	movw	r3, #46950	; 0xb766
    7e14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e18:	781a      	ldrb	r2, [r3, #0]
    7e1a:	f24b 7365 	movw	r3, #46949	; 0xb765
    7e1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e22:	781b      	ldrb	r3, [r3, #0]
    7e24:	4413      	add	r3, r2
    7e26:	b2da      	uxtb	r2, r3
    7e28:	f24b 7366 	movw	r3, #46950	; 0xb766
    7e2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e30:	701a      	strb	r2, [r3, #0]
    7e32:	f24b 6361 	movw	r3, #46689	; 0xb661
    7e36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e3a:	781b      	ldrb	r3, [r3, #0]
    7e3c:	3301      	adds	r3, #1
    7e3e:	b2da      	uxtb	r2, r3
    7e40:	f24b 6361 	movw	r3, #46689	; 0xb661
    7e44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e48:	701a      	strb	r2, [r3, #0]
    7e4a:	f24b 6361 	movw	r3, #46689	; 0xb661
    7e4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e52:	781b      	ldrb	r3, [r3, #0]
    7e54:	2bff      	cmp	r3, #255	; 0xff
    7e56:	d105      	bne.n	7e64 <send_desired+0x968>
    7e58:	f24b 6361 	movw	r3, #46689	; 0xb661
    7e5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e60:	2200      	movs	r2, #0
    7e62:	701a      	strb	r2, [r3, #0]
    7e64:	f24b 6361 	movw	r3, #46689	; 0xb661
    7e68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e6c:	781b      	ldrb	r3, [r3, #0]
    7e6e:	461a      	mov	r2, r3
    7e70:	f64b 13dc 	movw	r3, #47580	; 0xb9dc
    7e74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e78:	7899      	ldrb	r1, [r3, #2]
    7e7a:	f24b 6364 	movw	r3, #46692	; 0xb664
    7e7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e82:	5499      	strb	r1, [r3, r2]
    7e84:	4bae      	ldr	r3, [pc, #696]	; (8140 <send_desired+0xc44>)
    7e86:	781a      	ldrb	r2, [r3, #0]
    7e88:	f24b 7365 	movw	r3, #46949	; 0xb765
    7e8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e90:	781b      	ldrb	r3, [r3, #0]
    7e92:	4413      	add	r3, r2
    7e94:	b2da      	uxtb	r2, r3
    7e96:	f24b 7365 	movw	r3, #46949	; 0xb765
    7e9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e9e:	701a      	strb	r2, [r3, #0]
    7ea0:	f24b 7366 	movw	r3, #46950	; 0xb766
    7ea4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ea8:	781a      	ldrb	r2, [r3, #0]
    7eaa:	f24b 7365 	movw	r3, #46949	; 0xb765
    7eae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7eb2:	781b      	ldrb	r3, [r3, #0]
    7eb4:	4413      	add	r3, r2
    7eb6:	b2da      	uxtb	r2, r3
    7eb8:	f24b 7366 	movw	r3, #46950	; 0xb766
    7ebc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ec0:	701a      	strb	r2, [r3, #0]
    7ec2:	f24b 6361 	movw	r3, #46689	; 0xb661
    7ec6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7eca:	781b      	ldrb	r3, [r3, #0]
    7ecc:	3301      	adds	r3, #1
    7ece:	b2da      	uxtb	r2, r3
    7ed0:	f24b 6361 	movw	r3, #46689	; 0xb661
    7ed4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ed8:	701a      	strb	r2, [r3, #0]
    7eda:	f24b 6361 	movw	r3, #46689	; 0xb661
    7ede:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ee2:	781b      	ldrb	r3, [r3, #0]
    7ee4:	2bff      	cmp	r3, #255	; 0xff
    7ee6:	d105      	bne.n	7ef4 <send_desired+0x9f8>
    7ee8:	f24b 6361 	movw	r3, #46689	; 0xb661
    7eec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ef0:	2200      	movs	r2, #0
    7ef2:	701a      	strb	r2, [r3, #0]
    7ef4:	f24b 6361 	movw	r3, #46689	; 0xb661
    7ef8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7efc:	781b      	ldrb	r3, [r3, #0]
    7efe:	461a      	mov	r2, r3
    7f00:	f64b 13dc 	movw	r3, #47580	; 0xb9dc
    7f04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f08:	78d9      	ldrb	r1, [r3, #3]
    7f0a:	f24b 6364 	movw	r3, #46692	; 0xb664
    7f0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f12:	5499      	strb	r1, [r3, r2]
    7f14:	4b8b      	ldr	r3, [pc, #556]	; (8144 <send_desired+0xc48>)
    7f16:	781a      	ldrb	r2, [r3, #0]
    7f18:	f24b 7365 	movw	r3, #46949	; 0xb765
    7f1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f20:	781b      	ldrb	r3, [r3, #0]
    7f22:	4413      	add	r3, r2
    7f24:	b2da      	uxtb	r2, r3
    7f26:	f24b 7365 	movw	r3, #46949	; 0xb765
    7f2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f2e:	701a      	strb	r2, [r3, #0]
    7f30:	f24b 7366 	movw	r3, #46950	; 0xb766
    7f34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f38:	781a      	ldrb	r2, [r3, #0]
    7f3a:	f24b 7365 	movw	r3, #46949	; 0xb765
    7f3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f42:	781b      	ldrb	r3, [r3, #0]
    7f44:	4413      	add	r3, r2
    7f46:	b2da      	uxtb	r2, r3
    7f48:	f24b 7366 	movw	r3, #46950	; 0xb766
    7f4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f50:	701a      	strb	r2, [r3, #0]
    7f52:	f24b 6361 	movw	r3, #46689	; 0xb661
    7f56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f5a:	781b      	ldrb	r3, [r3, #0]
    7f5c:	3301      	adds	r3, #1
    7f5e:	b2da      	uxtb	r2, r3
    7f60:	f24b 6361 	movw	r3, #46689	; 0xb661
    7f64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f68:	701a      	strb	r2, [r3, #0]
    7f6a:	f24b 6361 	movw	r3, #46689	; 0xb661
    7f6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f72:	781b      	ldrb	r3, [r3, #0]
    7f74:	2bff      	cmp	r3, #255	; 0xff
    7f76:	d105      	bne.n	7f84 <send_desired+0xa88>
    7f78:	f24b 6361 	movw	r3, #46689	; 0xb661
    7f7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f80:	2200      	movs	r2, #0
    7f82:	701a      	strb	r2, [r3, #0]
    7f84:	f24b 6361 	movw	r3, #46689	; 0xb661
    7f88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f8c:	781b      	ldrb	r3, [r3, #0]
    7f8e:	461a      	mov	r2, r3
    7f90:	f240 1370 	movw	r3, #368	; 0x170
    7f94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f98:	7819      	ldrb	r1, [r3, #0]
    7f9a:	f24b 6364 	movw	r3, #46692	; 0xb664
    7f9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fa2:	5499      	strb	r1, [r3, r2]
    7fa4:	f240 1370 	movw	r3, #368	; 0x170
    7fa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7fac:	781a      	ldrb	r2, [r3, #0]
    7fae:	f24b 7365 	movw	r3, #46949	; 0xb765
    7fb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fb6:	781b      	ldrb	r3, [r3, #0]
    7fb8:	4413      	add	r3, r2
    7fba:	b2da      	uxtb	r2, r3
    7fbc:	f24b 7365 	movw	r3, #46949	; 0xb765
    7fc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fc4:	701a      	strb	r2, [r3, #0]
    7fc6:	f24b 7366 	movw	r3, #46950	; 0xb766
    7fca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fce:	781a      	ldrb	r2, [r3, #0]
    7fd0:	f24b 7365 	movw	r3, #46949	; 0xb765
    7fd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fd8:	781b      	ldrb	r3, [r3, #0]
    7fda:	4413      	add	r3, r2
    7fdc:	b2da      	uxtb	r2, r3
    7fde:	f24b 7366 	movw	r3, #46950	; 0xb766
    7fe2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fe6:	701a      	strb	r2, [r3, #0]
    7fe8:	f24b 6361 	movw	r3, #46689	; 0xb661
    7fec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ff0:	781b      	ldrb	r3, [r3, #0]
    7ff2:	3301      	adds	r3, #1
    7ff4:	b2da      	uxtb	r2, r3
    7ff6:	f24b 6361 	movw	r3, #46689	; 0xb661
    7ffa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ffe:	701a      	strb	r2, [r3, #0]
    8000:	f24b 6361 	movw	r3, #46689	; 0xb661
    8004:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8008:	781b      	ldrb	r3, [r3, #0]
    800a:	2bff      	cmp	r3, #255	; 0xff
    800c:	d105      	bne.n	801a <send_desired+0xb1e>
    800e:	f24b 6361 	movw	r3, #46689	; 0xb661
    8012:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8016:	2200      	movs	r2, #0
    8018:	701a      	strb	r2, [r3, #0]
    801a:	f24b 6361 	movw	r3, #46689	; 0xb661
    801e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8022:	781b      	ldrb	r3, [r3, #0]
    8024:	461a      	mov	r2, r3
    8026:	f240 1370 	movw	r3, #368	; 0x170
    802a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    802e:	7859      	ldrb	r1, [r3, #1]
    8030:	f24b 6364 	movw	r3, #46692	; 0xb664
    8034:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8038:	5499      	strb	r1, [r3, r2]
    803a:	4b43      	ldr	r3, [pc, #268]	; (8148 <send_desired+0xc4c>)
    803c:	781a      	ldrb	r2, [r3, #0]
    803e:	f24b 7365 	movw	r3, #46949	; 0xb765
    8042:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8046:	781b      	ldrb	r3, [r3, #0]
    8048:	4413      	add	r3, r2
    804a:	b2da      	uxtb	r2, r3
    804c:	f24b 7365 	movw	r3, #46949	; 0xb765
    8050:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8054:	701a      	strb	r2, [r3, #0]
    8056:	f24b 7366 	movw	r3, #46950	; 0xb766
    805a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    805e:	781a      	ldrb	r2, [r3, #0]
    8060:	f24b 7365 	movw	r3, #46949	; 0xb765
    8064:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8068:	781b      	ldrb	r3, [r3, #0]
    806a:	4413      	add	r3, r2
    806c:	b2da      	uxtb	r2, r3
    806e:	f24b 7366 	movw	r3, #46950	; 0xb766
    8072:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8076:	701a      	strb	r2, [r3, #0]
    8078:	f24b 6361 	movw	r3, #46689	; 0xb661
    807c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8080:	781b      	ldrb	r3, [r3, #0]
    8082:	3301      	adds	r3, #1
    8084:	b2da      	uxtb	r2, r3
    8086:	f24b 6361 	movw	r3, #46689	; 0xb661
    808a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    808e:	701a      	strb	r2, [r3, #0]
    8090:	f24b 6361 	movw	r3, #46689	; 0xb661
    8094:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8098:	781b      	ldrb	r3, [r3, #0]
    809a:	2bff      	cmp	r3, #255	; 0xff
    809c:	d105      	bne.n	80aa <send_desired+0xbae>
    809e:	f24b 6361 	movw	r3, #46689	; 0xb661
    80a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80a6:	2200      	movs	r2, #0
    80a8:	701a      	strb	r2, [r3, #0]
    80aa:	f24b 6361 	movw	r3, #46689	; 0xb661
    80ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80b2:	781b      	ldrb	r3, [r3, #0]
    80b4:	461a      	mov	r2, r3
    80b6:	f240 1370 	movw	r3, #368	; 0x170
    80ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80be:	7899      	ldrb	r1, [r3, #2]
    80c0:	f24b 6364 	movw	r3, #46692	; 0xb664
    80c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80c8:	5499      	strb	r1, [r3, r2]
    80ca:	4b20      	ldr	r3, [pc, #128]	; (814c <send_desired+0xc50>)
    80cc:	781a      	ldrb	r2, [r3, #0]
    80ce:	f24b 7365 	movw	r3, #46949	; 0xb765
    80d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80d6:	781b      	ldrb	r3, [r3, #0]
    80d8:	4413      	add	r3, r2
    80da:	b2da      	uxtb	r2, r3
    80dc:	f24b 7365 	movw	r3, #46949	; 0xb765
    80e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80e4:	701a      	strb	r2, [r3, #0]
    80e6:	f24b 7366 	movw	r3, #46950	; 0xb766
    80ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80ee:	781a      	ldrb	r2, [r3, #0]
    80f0:	f24b 7365 	movw	r3, #46949	; 0xb765
    80f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80f8:	781b      	ldrb	r3, [r3, #0]
    80fa:	4413      	add	r3, r2
    80fc:	b2da      	uxtb	r2, r3
    80fe:	f24b 7366 	movw	r3, #46950	; 0xb766
    8102:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8106:	701a      	strb	r2, [r3, #0]
    8108:	f24b 6361 	movw	r3, #46689	; 0xb661
    810c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8110:	781b      	ldrb	r3, [r3, #0]
    8112:	3301      	adds	r3, #1
    8114:	b2da      	uxtb	r2, r3
    8116:	f24b 6361 	movw	r3, #46689	; 0xb661
    811a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    811e:	701a      	strb	r2, [r3, #0]
    8120:	f24b 6361 	movw	r3, #46689	; 0xb661
    8124:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8128:	781b      	ldrb	r3, [r3, #0]
    812a:	2bff      	cmp	r3, #255	; 0xff
    812c:	d110      	bne.n	8150 <send_desired+0xc54>
    812e:	f24b 6361 	movw	r3, #46689	; 0xb661
    8132:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8136:	2200      	movs	r2, #0
    8138:	701a      	strb	r2, [r3, #0]
    813a:	e009      	b.n	8150 <send_desired+0xc54>
    813c:	2004b9dd 	.word	0x2004b9dd
    8140:	2004b9de 	.word	0x2004b9de
    8144:	2004b9df 	.word	0x2004b9df
    8148:	20000171 	.word	0x20000171
    814c:	20000172 	.word	0x20000172
    8150:	f24b 6361 	movw	r3, #46689	; 0xb661
    8154:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8158:	781b      	ldrb	r3, [r3, #0]
    815a:	461a      	mov	r2, r3
    815c:	f240 1370 	movw	r3, #368	; 0x170
    8160:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8164:	78d9      	ldrb	r1, [r3, #3]
    8166:	f24b 6364 	movw	r3, #46692	; 0xb664
    816a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    816e:	5499      	strb	r1, [r3, r2]
    8170:	4b79      	ldr	r3, [pc, #484]	; (8358 <send_desired+0xe5c>)
    8172:	781a      	ldrb	r2, [r3, #0]
    8174:	f24b 7365 	movw	r3, #46949	; 0xb765
    8178:	f2c2 0304 	movt	r3, #8196	; 0x2004
    817c:	781b      	ldrb	r3, [r3, #0]
    817e:	4413      	add	r3, r2
    8180:	b2da      	uxtb	r2, r3
    8182:	f24b 7365 	movw	r3, #46949	; 0xb765
    8186:	f2c2 0304 	movt	r3, #8196	; 0x2004
    818a:	701a      	strb	r2, [r3, #0]
    818c:	f24b 7366 	movw	r3, #46950	; 0xb766
    8190:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8194:	781a      	ldrb	r2, [r3, #0]
    8196:	f24b 7365 	movw	r3, #46949	; 0xb765
    819a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    819e:	781b      	ldrb	r3, [r3, #0]
    81a0:	4413      	add	r3, r2
    81a2:	b2da      	uxtb	r2, r3
    81a4:	f24b 7366 	movw	r3, #46950	; 0xb766
    81a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81ac:	701a      	strb	r2, [r3, #0]
    81ae:	f24b 6361 	movw	r3, #46689	; 0xb661
    81b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81b6:	781b      	ldrb	r3, [r3, #0]
    81b8:	3301      	adds	r3, #1
    81ba:	b2da      	uxtb	r2, r3
    81bc:	f24b 6361 	movw	r3, #46689	; 0xb661
    81c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81c4:	701a      	strb	r2, [r3, #0]
    81c6:	f24b 6361 	movw	r3, #46689	; 0xb661
    81ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81ce:	781b      	ldrb	r3, [r3, #0]
    81d0:	2bff      	cmp	r3, #255	; 0xff
    81d2:	d105      	bne.n	81e0 <send_desired+0xce4>
    81d4:	f24b 6361 	movw	r3, #46689	; 0xb661
    81d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81dc:	2200      	movs	r2, #0
    81de:	701a      	strb	r2, [r3, #0]
    81e0:	f24b 6361 	movw	r3, #46689	; 0xb661
    81e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81e8:	781b      	ldrb	r3, [r3, #0]
    81ea:	461a      	mov	r2, r3
    81ec:	f24b 7365 	movw	r3, #46949	; 0xb765
    81f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81f4:	7819      	ldrb	r1, [r3, #0]
    81f6:	f24b 6364 	movw	r3, #46692	; 0xb664
    81fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81fe:	5499      	strb	r1, [r3, r2]
    8200:	f24b 6361 	movw	r3, #46689	; 0xb661
    8204:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8208:	781b      	ldrb	r3, [r3, #0]
    820a:	3301      	adds	r3, #1
    820c:	b2da      	uxtb	r2, r3
    820e:	f24b 6361 	movw	r3, #46689	; 0xb661
    8212:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8216:	701a      	strb	r2, [r3, #0]
    8218:	f24b 6361 	movw	r3, #46689	; 0xb661
    821c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8220:	781b      	ldrb	r3, [r3, #0]
    8222:	2bff      	cmp	r3, #255	; 0xff
    8224:	d105      	bne.n	8232 <send_desired+0xd36>
    8226:	f24b 6361 	movw	r3, #46689	; 0xb661
    822a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    822e:	2200      	movs	r2, #0
    8230:	701a      	strb	r2, [r3, #0]
    8232:	f24b 6361 	movw	r3, #46689	; 0xb661
    8236:	f2c2 0304 	movt	r3, #8196	; 0x2004
    823a:	781b      	ldrb	r3, [r3, #0]
    823c:	461a      	mov	r2, r3
    823e:	f24b 7366 	movw	r3, #46950	; 0xb766
    8242:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8246:	7819      	ldrb	r1, [r3, #0]
    8248:	f24b 6364 	movw	r3, #46692	; 0xb664
    824c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8250:	5499      	strb	r1, [r3, r2]
    8252:	f24b 6361 	movw	r3, #46689	; 0xb661
    8256:	f2c2 0304 	movt	r3, #8196	; 0x2004
    825a:	781b      	ldrb	r3, [r3, #0]
    825c:	3301      	adds	r3, #1
    825e:	b2da      	uxtb	r2, r3
    8260:	f24b 6361 	movw	r3, #46689	; 0xb661
    8264:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8268:	701a      	strb	r2, [r3, #0]
    826a:	f24b 6361 	movw	r3, #46689	; 0xb661
    826e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8272:	781b      	ldrb	r3, [r3, #0]
    8274:	2bff      	cmp	r3, #255	; 0xff
    8276:	d105      	bne.n	8284 <send_desired+0xd88>
    8278:	f24b 6361 	movw	r3, #46689	; 0xb661
    827c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8280:	2200      	movs	r2, #0
    8282:	701a      	strb	r2, [r3, #0]
    8284:	f248 0339 	movw	r3, #32825	; 0x8039
    8288:	f2c2 0300 	movt	r3, #8192	; 0x2000
    828c:	781b      	ldrb	r3, [r3, #0]
    828e:	b2db      	uxtb	r3, r3
    8290:	f003 0310 	and.w	r3, r3, #16
    8294:	2b00      	cmp	r3, #0
    8296:	d15a      	bne.n	834e <send_desired+0xe52>
    8298:	f24b 6362 	movw	r3, #46690	; 0xb662
    829c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82a0:	781b      	ldrb	r3, [r3, #0]
    82a2:	b2db      	uxtb	r3, r3
    82a4:	461a      	mov	r2, r3
    82a6:	f24b 6364 	movw	r3, #46692	; 0xb664
    82aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82ae:	5c9a      	ldrb	r2, [r3, r2]
    82b0:	f24b 7363 	movw	r3, #46947	; 0xb763
    82b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82b8:	701a      	strb	r2, [r3, #0]
    82ba:	f24b 7364 	movw	r3, #46948	; 0xb764
    82be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82c2:	2200      	movs	r2, #0
    82c4:	701a      	strb	r2, [r3, #0]
    82c6:	f24b 6362 	movw	r3, #46690	; 0xb662
    82ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82ce:	781b      	ldrb	r3, [r3, #0]
    82d0:	b2db      	uxtb	r3, r3
    82d2:	3301      	adds	r3, #1
    82d4:	b2da      	uxtb	r2, r3
    82d6:	f24b 6362 	movw	r3, #46690	; 0xb662
    82da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82de:	701a      	strb	r2, [r3, #0]
    82e0:	f24b 6362 	movw	r3, #46690	; 0xb662
    82e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82e8:	781b      	ldrb	r3, [r3, #0]
    82ea:	b2db      	uxtb	r3, r3
    82ec:	2bff      	cmp	r3, #255	; 0xff
    82ee:	d105      	bne.n	82fc <send_desired+0xe00>
    82f0:	f24b 6362 	movw	r3, #46690	; 0xb662
    82f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82f8:	2200      	movs	r2, #0
    82fa:	701a      	strb	r2, [r3, #0]
    82fc:	f248 0338 	movw	r3, #32824	; 0x8038
    8300:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8304:	f248 0238 	movw	r2, #32824	; 0x8038
    8308:	f2c2 0200 	movt	r2, #8192	; 0x2000
    830c:	7812      	ldrb	r2, [r2, #0]
    830e:	b2d2      	uxtb	r2, r2
    8310:	f042 0201 	orr.w	r2, r2, #1
    8314:	b2d2      	uxtb	r2, r2
    8316:	701a      	strb	r2, [r3, #0]
    8318:	f248 0339 	movw	r3, #32825	; 0x8039
    831c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8320:	f248 0239 	movw	r2, #32825	; 0x8039
    8324:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8328:	7812      	ldrb	r2, [r2, #0]
    832a:	b2d2      	uxtb	r2, r2
    832c:	f042 0210 	orr.w	r2, r2, #16
    8330:	b2d2      	uxtb	r2, r2
    8332:	701a      	strb	r2, [r3, #0]
    8334:	e00b      	b.n	834e <send_desired+0xe52>
    8336:	f24b 6360 	movw	r3, #46688	; 0xb660
    833a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    833e:	781b      	ldrb	r3, [r3, #0]
    8340:	3301      	adds	r3, #1
    8342:	b2da      	uxtb	r2, r3
    8344:	f24b 6360 	movw	r3, #46688	; 0xb660
    8348:	f2c2 0304 	movt	r3, #8196	; 0x2004
    834c:	701a      	strb	r2, [r3, #0]
}
    834e:	46bd      	mov	sp, r7
    8350:	f85d 7b04 	ldr.w	r7, [sp], #4
    8354:	4770      	bx	lr
    8356:	bf00      	nop
    8358:	20000173 	.word	0x20000173

0000835c <send_bat>:
void send_bat(void){  //2000ms
    835c:	b480      	push	{r7}
    835e:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 20 == 8) PERIODIC_SEND_BAT();}
    8360:	f24b 6359 	movw	r3, #46681	; 0xb659
    8364:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8368:	781a      	ldrb	r2, [r3, #0]
    836a:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    836e:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    8372:	fba3 1302 	umull	r1, r3, r3, r2
    8376:	0919      	lsrs	r1, r3, #4
    8378:	460b      	mov	r3, r1
    837a:	009b      	lsls	r3, r3, #2
    837c:	440b      	add	r3, r1
    837e:	009b      	lsls	r3, r3, #2
    8380:	1ad3      	subs	r3, r2, r3
    8382:	b2db      	uxtb	r3, r3
    8384:	2b08      	cmp	r3, #8
    8386:	f040 839a 	bne.w	8abe <send_bat+0x762>
    838a:	f24b 6361 	movw	r3, #46689	; 0xb661
    838e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8392:	781a      	ldrb	r2, [r3, #0]
    8394:	f24b 6362 	movw	r3, #46690	; 0xb662
    8398:	f2c2 0304 	movt	r3, #8196	; 0x2004
    839c:	781b      	ldrb	r3, [r3, #0]
    839e:	b2db      	uxtb	r3, r3
    83a0:	429a      	cmp	r2, r3
    83a2:	d313      	bcc.n	83cc <send_bat+0x70>
    83a4:	f24b 6362 	movw	r3, #46690	; 0xb662
    83a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83ac:	781b      	ldrb	r3, [r3, #0]
    83ae:	b2db      	uxtb	r3, r3
    83b0:	461a      	mov	r2, r3
    83b2:	f24b 6361 	movw	r3, #46689	; 0xb661
    83b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83ba:	781b      	ldrb	r3, [r3, #0]
    83bc:	1ad3      	subs	r3, r2, r3
    83be:	33ff      	adds	r3, #255	; 0xff
    83c0:	2b0c      	cmp	r3, #12
    83c2:	bfd4      	ite	le
    83c4:	2300      	movle	r3, #0
    83c6:	2301      	movgt	r3, #1
    83c8:	b2db      	uxtb	r3, r3
    83ca:	e011      	b.n	83f0 <send_bat+0x94>
    83cc:	f24b 6362 	movw	r3, #46690	; 0xb662
    83d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83d4:	781b      	ldrb	r3, [r3, #0]
    83d6:	b2db      	uxtb	r3, r3
    83d8:	461a      	mov	r2, r3
    83da:	f24b 6361 	movw	r3, #46689	; 0xb661
    83de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83e2:	781b      	ldrb	r3, [r3, #0]
    83e4:	1ad3      	subs	r3, r2, r3
    83e6:	2b0c      	cmp	r3, #12
    83e8:	bfd4      	ite	le
    83ea:	2300      	movle	r3, #0
    83ec:	2301      	movgt	r3, #1
    83ee:	b2db      	uxtb	r3, r3
    83f0:	2b00      	cmp	r3, #0
    83f2:	f000 8358 	beq.w	8aa6 <send_bat+0x74a>
    83f6:	f24b 6361 	movw	r3, #46689	; 0xb661
    83fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83fe:	781b      	ldrb	r3, [r3, #0]
    8400:	461a      	mov	r2, r3
    8402:	f24b 6364 	movw	r3, #46692	; 0xb664
    8406:	f2c2 0304 	movt	r3, #8196	; 0x2004
    840a:	2105      	movs	r1, #5
    840c:	5499      	strb	r1, [r3, r2]
    840e:	f24b 6361 	movw	r3, #46689	; 0xb661
    8412:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8416:	781b      	ldrb	r3, [r3, #0]
    8418:	3301      	adds	r3, #1
    841a:	b2da      	uxtb	r2, r3
    841c:	f24b 6361 	movw	r3, #46689	; 0xb661
    8420:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8424:	701a      	strb	r2, [r3, #0]
    8426:	f24b 6361 	movw	r3, #46689	; 0xb661
    842a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    842e:	781b      	ldrb	r3, [r3, #0]
    8430:	2bff      	cmp	r3, #255	; 0xff
    8432:	d105      	bne.n	8440 <send_bat+0xe4>
    8434:	f24b 6361 	movw	r3, #46689	; 0xb661
    8438:	f2c2 0304 	movt	r3, #8196	; 0x2004
    843c:	2200      	movs	r2, #0
    843e:	701a      	strb	r2, [r3, #0]
    8440:	f24b 6361 	movw	r3, #46689	; 0xb661
    8444:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8448:	781b      	ldrb	r3, [r3, #0]
    844a:	461a      	mov	r2, r3
    844c:	f24b 6364 	movw	r3, #46692	; 0xb664
    8450:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8454:	210c      	movs	r1, #12
    8456:	5499      	strb	r1, [r3, r2]
    8458:	f24b 6361 	movw	r3, #46689	; 0xb661
    845c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8460:	781b      	ldrb	r3, [r3, #0]
    8462:	3301      	adds	r3, #1
    8464:	b2da      	uxtb	r2, r3
    8466:	f24b 6361 	movw	r3, #46689	; 0xb661
    846a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    846e:	701a      	strb	r2, [r3, #0]
    8470:	f24b 6361 	movw	r3, #46689	; 0xb661
    8474:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8478:	781b      	ldrb	r3, [r3, #0]
    847a:	2bff      	cmp	r3, #255	; 0xff
    847c:	d105      	bne.n	848a <send_bat+0x12e>
    847e:	f24b 6361 	movw	r3, #46689	; 0xb661
    8482:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8486:	2200      	movs	r2, #0
    8488:	701a      	strb	r2, [r3, #0]
    848a:	f24b 7365 	movw	r3, #46949	; 0xb765
    848e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8492:	220c      	movs	r2, #12
    8494:	701a      	strb	r2, [r3, #0]
    8496:	f24b 7366 	movw	r3, #46950	; 0xb766
    849a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    849e:	220c      	movs	r2, #12
    84a0:	701a      	strb	r2, [r3, #0]
    84a2:	f24b 6361 	movw	r3, #46689	; 0xb661
    84a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84aa:	781b      	ldrb	r3, [r3, #0]
    84ac:	461a      	mov	r2, r3
    84ae:	f24b 634a 	movw	r3, #46666	; 0xb64a
    84b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84b6:	7819      	ldrb	r1, [r3, #0]
    84b8:	f24b 6364 	movw	r3, #46692	; 0xb664
    84bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84c0:	5499      	strb	r1, [r3, r2]
    84c2:	f24b 7365 	movw	r3, #46949	; 0xb765
    84c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84ca:	781a      	ldrb	r2, [r3, #0]
    84cc:	f24b 634a 	movw	r3, #46666	; 0xb64a
    84d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84d4:	781b      	ldrb	r3, [r3, #0]
    84d6:	4413      	add	r3, r2
    84d8:	b2da      	uxtb	r2, r3
    84da:	f24b 7365 	movw	r3, #46949	; 0xb765
    84de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84e2:	701a      	strb	r2, [r3, #0]
    84e4:	f24b 7366 	movw	r3, #46950	; 0xb766
    84e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84ec:	781a      	ldrb	r2, [r3, #0]
    84ee:	f24b 7365 	movw	r3, #46949	; 0xb765
    84f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84f6:	781b      	ldrb	r3, [r3, #0]
    84f8:	4413      	add	r3, r2
    84fa:	b2da      	uxtb	r2, r3
    84fc:	f24b 7366 	movw	r3, #46950	; 0xb766
    8500:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8504:	701a      	strb	r2, [r3, #0]
    8506:	f24b 6361 	movw	r3, #46689	; 0xb661
    850a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    850e:	781b      	ldrb	r3, [r3, #0]
    8510:	3301      	adds	r3, #1
    8512:	b2da      	uxtb	r2, r3
    8514:	f24b 6361 	movw	r3, #46689	; 0xb661
    8518:	f2c2 0304 	movt	r3, #8196	; 0x2004
    851c:	701a      	strb	r2, [r3, #0]
    851e:	f24b 6361 	movw	r3, #46689	; 0xb661
    8522:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8526:	781b      	ldrb	r3, [r3, #0]
    8528:	2bff      	cmp	r3, #255	; 0xff
    852a:	d105      	bne.n	8538 <send_bat+0x1dc>
    852c:	f24b 6361 	movw	r3, #46689	; 0xb661
    8530:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8534:	2200      	movs	r2, #0
    8536:	701a      	strb	r2, [r3, #0]
    8538:	f24b 6361 	movw	r3, #46689	; 0xb661
    853c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8540:	781b      	ldrb	r3, [r3, #0]
    8542:	461a      	mov	r2, r3
    8544:	f64b 4344 	movw	r3, #48196	; 0xbc44
    8548:	f2c2 0304 	movt	r3, #8196	; 0x2004
    854c:	7819      	ldrb	r1, [r3, #0]
    854e:	f24b 6364 	movw	r3, #46692	; 0xb664
    8552:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8556:	5499      	strb	r1, [r3, r2]
    8558:	f64b 4344 	movw	r3, #48196	; 0xbc44
    855c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8560:	781a      	ldrb	r2, [r3, #0]
    8562:	f24b 7365 	movw	r3, #46949	; 0xb765
    8566:	f2c2 0304 	movt	r3, #8196	; 0x2004
    856a:	781b      	ldrb	r3, [r3, #0]
    856c:	4413      	add	r3, r2
    856e:	b2da      	uxtb	r2, r3
    8570:	f24b 7365 	movw	r3, #46949	; 0xb765
    8574:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8578:	701a      	strb	r2, [r3, #0]
    857a:	f24b 7366 	movw	r3, #46950	; 0xb766
    857e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8582:	781a      	ldrb	r2, [r3, #0]
    8584:	f24b 7365 	movw	r3, #46949	; 0xb765
    8588:	f2c2 0304 	movt	r3, #8196	; 0x2004
    858c:	781b      	ldrb	r3, [r3, #0]
    858e:	4413      	add	r3, r2
    8590:	b2da      	uxtb	r2, r3
    8592:	f24b 7366 	movw	r3, #46950	; 0xb766
    8596:	f2c2 0304 	movt	r3, #8196	; 0x2004
    859a:	701a      	strb	r2, [r3, #0]
    859c:	f24b 6361 	movw	r3, #46689	; 0xb661
    85a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85a4:	781b      	ldrb	r3, [r3, #0]
    85a6:	3301      	adds	r3, #1
    85a8:	b2da      	uxtb	r2, r3
    85aa:	f24b 6361 	movw	r3, #46689	; 0xb661
    85ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85b2:	701a      	strb	r2, [r3, #0]
    85b4:	f24b 6361 	movw	r3, #46689	; 0xb661
    85b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85bc:	781b      	ldrb	r3, [r3, #0]
    85be:	2bff      	cmp	r3, #255	; 0xff
    85c0:	d105      	bne.n	85ce <send_bat+0x272>
    85c2:	f24b 6361 	movw	r3, #46689	; 0xb661
    85c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85ca:	2200      	movs	r2, #0
    85cc:	701a      	strb	r2, [r3, #0]
    85ce:	f24b 6361 	movw	r3, #46689	; 0xb661
    85d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85d6:	781b      	ldrb	r3, [r3, #0]
    85d8:	461a      	mov	r2, r3
    85da:	f64b 4344 	movw	r3, #48196	; 0xbc44
    85de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85e2:	7859      	ldrb	r1, [r3, #1]
    85e4:	f24b 6364 	movw	r3, #46692	; 0xb664
    85e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85ec:	5499      	strb	r1, [r3, r2]
    85ee:	4bd5      	ldr	r3, [pc, #852]	; (8944 <send_bat+0x5e8>)
    85f0:	781a      	ldrb	r2, [r3, #0]
    85f2:	f24b 7365 	movw	r3, #46949	; 0xb765
    85f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85fa:	781b      	ldrb	r3, [r3, #0]
    85fc:	4413      	add	r3, r2
    85fe:	b2da      	uxtb	r2, r3
    8600:	f24b 7365 	movw	r3, #46949	; 0xb765
    8604:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8608:	701a      	strb	r2, [r3, #0]
    860a:	f24b 7366 	movw	r3, #46950	; 0xb766
    860e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8612:	781a      	ldrb	r2, [r3, #0]
    8614:	f24b 7365 	movw	r3, #46949	; 0xb765
    8618:	f2c2 0304 	movt	r3, #8196	; 0x2004
    861c:	781b      	ldrb	r3, [r3, #0]
    861e:	4413      	add	r3, r2
    8620:	b2da      	uxtb	r2, r3
    8622:	f24b 7366 	movw	r3, #46950	; 0xb766
    8626:	f2c2 0304 	movt	r3, #8196	; 0x2004
    862a:	701a      	strb	r2, [r3, #0]
    862c:	f24b 6361 	movw	r3, #46689	; 0xb661
    8630:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8634:	781b      	ldrb	r3, [r3, #0]
    8636:	3301      	adds	r3, #1
    8638:	b2da      	uxtb	r2, r3
    863a:	f24b 6361 	movw	r3, #46689	; 0xb661
    863e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8642:	701a      	strb	r2, [r3, #0]
    8644:	f24b 6361 	movw	r3, #46689	; 0xb661
    8648:	f2c2 0304 	movt	r3, #8196	; 0x2004
    864c:	781b      	ldrb	r3, [r3, #0]
    864e:	2bff      	cmp	r3, #255	; 0xff
    8650:	d105      	bne.n	865e <send_bat+0x302>
    8652:	f24b 6361 	movw	r3, #46689	; 0xb661
    8656:	f2c2 0304 	movt	r3, #8196	; 0x2004
    865a:	2200      	movs	r2, #0
    865c:	701a      	strb	r2, [r3, #0]
    865e:	f24b 6361 	movw	r3, #46689	; 0xb661
    8662:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8666:	781b      	ldrb	r3, [r3, #0]
    8668:	461a      	mov	r2, r3
    866a:	f24b 634d 	movw	r3, #46669	; 0xb64d
    866e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8672:	7819      	ldrb	r1, [r3, #0]
    8674:	f24b 6364 	movw	r3, #46692	; 0xb664
    8678:	f2c2 0304 	movt	r3, #8196	; 0x2004
    867c:	5499      	strb	r1, [r3, r2]
    867e:	f24b 634d 	movw	r3, #46669	; 0xb64d
    8682:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8686:	781a      	ldrb	r2, [r3, #0]
    8688:	f24b 7365 	movw	r3, #46949	; 0xb765
    868c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8690:	781b      	ldrb	r3, [r3, #0]
    8692:	4413      	add	r3, r2
    8694:	b2da      	uxtb	r2, r3
    8696:	f24b 7365 	movw	r3, #46949	; 0xb765
    869a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    869e:	701a      	strb	r2, [r3, #0]
    86a0:	f24b 7366 	movw	r3, #46950	; 0xb766
    86a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86a8:	781a      	ldrb	r2, [r3, #0]
    86aa:	f24b 7365 	movw	r3, #46949	; 0xb765
    86ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86b2:	781b      	ldrb	r3, [r3, #0]
    86b4:	4413      	add	r3, r2
    86b6:	b2da      	uxtb	r2, r3
    86b8:	f24b 7366 	movw	r3, #46950	; 0xb766
    86bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86c0:	701a      	strb	r2, [r3, #0]
    86c2:	f24b 6361 	movw	r3, #46689	; 0xb661
    86c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86ca:	781b      	ldrb	r3, [r3, #0]
    86cc:	3301      	adds	r3, #1
    86ce:	b2da      	uxtb	r2, r3
    86d0:	f24b 6361 	movw	r3, #46689	; 0xb661
    86d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86d8:	701a      	strb	r2, [r3, #0]
    86da:	f24b 6361 	movw	r3, #46689	; 0xb661
    86de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86e2:	781b      	ldrb	r3, [r3, #0]
    86e4:	2bff      	cmp	r3, #255	; 0xff
    86e6:	d105      	bne.n	86f4 <send_bat+0x398>
    86e8:	f24b 6361 	movw	r3, #46689	; 0xb661
    86ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86f0:	2200      	movs	r2, #0
    86f2:	701a      	strb	r2, [r3, #0]
    86f4:	f24b 6361 	movw	r3, #46689	; 0xb661
    86f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86fc:	781b      	ldrb	r3, [r3, #0]
    86fe:	461a      	mov	r2, r3
    8700:	f64b 13ce 	movw	r3, #47566	; 0xb9ce
    8704:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8708:	7819      	ldrb	r1, [r3, #0]
    870a:	f24b 6364 	movw	r3, #46692	; 0xb664
    870e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8712:	5499      	strb	r1, [r3, r2]
    8714:	f64b 13ce 	movw	r3, #47566	; 0xb9ce
    8718:	f2c2 0304 	movt	r3, #8196	; 0x2004
    871c:	781a      	ldrb	r2, [r3, #0]
    871e:	f24b 7365 	movw	r3, #46949	; 0xb765
    8722:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8726:	781b      	ldrb	r3, [r3, #0]
    8728:	4413      	add	r3, r2
    872a:	b2da      	uxtb	r2, r3
    872c:	f24b 7365 	movw	r3, #46949	; 0xb765
    8730:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8734:	701a      	strb	r2, [r3, #0]
    8736:	f24b 7366 	movw	r3, #46950	; 0xb766
    873a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    873e:	781a      	ldrb	r2, [r3, #0]
    8740:	f24b 7365 	movw	r3, #46949	; 0xb765
    8744:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8748:	781b      	ldrb	r3, [r3, #0]
    874a:	4413      	add	r3, r2
    874c:	b2da      	uxtb	r2, r3
    874e:	f24b 7366 	movw	r3, #46950	; 0xb766
    8752:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8756:	701a      	strb	r2, [r3, #0]
    8758:	f24b 6361 	movw	r3, #46689	; 0xb661
    875c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8760:	781b      	ldrb	r3, [r3, #0]
    8762:	3301      	adds	r3, #1
    8764:	b2da      	uxtb	r2, r3
    8766:	f24b 6361 	movw	r3, #46689	; 0xb661
    876a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    876e:	701a      	strb	r2, [r3, #0]
    8770:	f24b 6361 	movw	r3, #46689	; 0xb661
    8774:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8778:	781b      	ldrb	r3, [r3, #0]
    877a:	2bff      	cmp	r3, #255	; 0xff
    877c:	d105      	bne.n	878a <send_bat+0x42e>
    877e:	f24b 6361 	movw	r3, #46689	; 0xb661
    8782:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8786:	2200      	movs	r2, #0
    8788:	701a      	strb	r2, [r3, #0]
    878a:	f24b 6361 	movw	r3, #46689	; 0xb661
    878e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8792:	781b      	ldrb	r3, [r3, #0]
    8794:	461a      	mov	r2, r3
    8796:	f64b 13ce 	movw	r3, #47566	; 0xb9ce
    879a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    879e:	7859      	ldrb	r1, [r3, #1]
    87a0:	f24b 6364 	movw	r3, #46692	; 0xb664
    87a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87a8:	5499      	strb	r1, [r3, r2]
    87aa:	4b67      	ldr	r3, [pc, #412]	; (8948 <send_bat+0x5ec>)
    87ac:	781a      	ldrb	r2, [r3, #0]
    87ae:	f24b 7365 	movw	r3, #46949	; 0xb765
    87b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87b6:	781b      	ldrb	r3, [r3, #0]
    87b8:	4413      	add	r3, r2
    87ba:	b2da      	uxtb	r2, r3
    87bc:	f24b 7365 	movw	r3, #46949	; 0xb765
    87c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87c4:	701a      	strb	r2, [r3, #0]
    87c6:	f24b 7366 	movw	r3, #46950	; 0xb766
    87ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87ce:	781a      	ldrb	r2, [r3, #0]
    87d0:	f24b 7365 	movw	r3, #46949	; 0xb765
    87d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87d8:	781b      	ldrb	r3, [r3, #0]
    87da:	4413      	add	r3, r2
    87dc:	b2da      	uxtb	r2, r3
    87de:	f24b 7366 	movw	r3, #46950	; 0xb766
    87e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87e6:	701a      	strb	r2, [r3, #0]
    87e8:	f24b 6361 	movw	r3, #46689	; 0xb661
    87ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87f0:	781b      	ldrb	r3, [r3, #0]
    87f2:	3301      	adds	r3, #1
    87f4:	b2da      	uxtb	r2, r3
    87f6:	f24b 6361 	movw	r3, #46689	; 0xb661
    87fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87fe:	701a      	strb	r2, [r3, #0]
    8800:	f24b 6361 	movw	r3, #46689	; 0xb661
    8804:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8808:	781b      	ldrb	r3, [r3, #0]
    880a:	2bff      	cmp	r3, #255	; 0xff
    880c:	d105      	bne.n	881a <send_bat+0x4be>
    880e:	f24b 6361 	movw	r3, #46689	; 0xb661
    8812:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8816:	2200      	movs	r2, #0
    8818:	701a      	strb	r2, [r3, #0]
    881a:	f24b 6361 	movw	r3, #46689	; 0xb661
    881e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8822:	781b      	ldrb	r3, [r3, #0]
    8824:	461a      	mov	r2, r3
    8826:	f64b 13cc 	movw	r3, #47564	; 0xb9cc
    882a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    882e:	7819      	ldrb	r1, [r3, #0]
    8830:	f24b 6364 	movw	r3, #46692	; 0xb664
    8834:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8838:	5499      	strb	r1, [r3, r2]
    883a:	f64b 13cc 	movw	r3, #47564	; 0xb9cc
    883e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8842:	781a      	ldrb	r2, [r3, #0]
    8844:	f24b 7365 	movw	r3, #46949	; 0xb765
    8848:	f2c2 0304 	movt	r3, #8196	; 0x2004
    884c:	781b      	ldrb	r3, [r3, #0]
    884e:	4413      	add	r3, r2
    8850:	b2da      	uxtb	r2, r3
    8852:	f24b 7365 	movw	r3, #46949	; 0xb765
    8856:	f2c2 0304 	movt	r3, #8196	; 0x2004
    885a:	701a      	strb	r2, [r3, #0]
    885c:	f24b 7366 	movw	r3, #46950	; 0xb766
    8860:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8864:	781a      	ldrb	r2, [r3, #0]
    8866:	f24b 7365 	movw	r3, #46949	; 0xb765
    886a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    886e:	781b      	ldrb	r3, [r3, #0]
    8870:	4413      	add	r3, r2
    8872:	b2da      	uxtb	r2, r3
    8874:	f24b 7366 	movw	r3, #46950	; 0xb766
    8878:	f2c2 0304 	movt	r3, #8196	; 0x2004
    887c:	701a      	strb	r2, [r3, #0]
    887e:	f24b 6361 	movw	r3, #46689	; 0xb661
    8882:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8886:	781b      	ldrb	r3, [r3, #0]
    8888:	3301      	adds	r3, #1
    888a:	b2da      	uxtb	r2, r3
    888c:	f24b 6361 	movw	r3, #46689	; 0xb661
    8890:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8894:	701a      	strb	r2, [r3, #0]
    8896:	f24b 6361 	movw	r3, #46689	; 0xb661
    889a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    889e:	781b      	ldrb	r3, [r3, #0]
    88a0:	2bff      	cmp	r3, #255	; 0xff
    88a2:	d105      	bne.n	88b0 <send_bat+0x554>
    88a4:	f24b 6361 	movw	r3, #46689	; 0xb661
    88a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88ac:	2200      	movs	r2, #0
    88ae:	701a      	strb	r2, [r3, #0]
    88b0:	f24b 6361 	movw	r3, #46689	; 0xb661
    88b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88b8:	781b      	ldrb	r3, [r3, #0]
    88ba:	461a      	mov	r2, r3
    88bc:	f64b 13cc 	movw	r3, #47564	; 0xb9cc
    88c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88c4:	7859      	ldrb	r1, [r3, #1]
    88c6:	f24b 6364 	movw	r3, #46692	; 0xb664
    88ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88ce:	5499      	strb	r1, [r3, r2]
    88d0:	4b1e      	ldr	r3, [pc, #120]	; (894c <send_bat+0x5f0>)
    88d2:	781a      	ldrb	r2, [r3, #0]
    88d4:	f24b 7365 	movw	r3, #46949	; 0xb765
    88d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88dc:	781b      	ldrb	r3, [r3, #0]
    88de:	4413      	add	r3, r2
    88e0:	b2da      	uxtb	r2, r3
    88e2:	f24b 7365 	movw	r3, #46949	; 0xb765
    88e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88ea:	701a      	strb	r2, [r3, #0]
    88ec:	f24b 7366 	movw	r3, #46950	; 0xb766
    88f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88f4:	781a      	ldrb	r2, [r3, #0]
    88f6:	f24b 7365 	movw	r3, #46949	; 0xb765
    88fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88fe:	781b      	ldrb	r3, [r3, #0]
    8900:	4413      	add	r3, r2
    8902:	b2da      	uxtb	r2, r3
    8904:	f24b 7366 	movw	r3, #46950	; 0xb766
    8908:	f2c2 0304 	movt	r3, #8196	; 0x2004
    890c:	701a      	strb	r2, [r3, #0]
    890e:	f24b 6361 	movw	r3, #46689	; 0xb661
    8912:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8916:	781b      	ldrb	r3, [r3, #0]
    8918:	3301      	adds	r3, #1
    891a:	b2da      	uxtb	r2, r3
    891c:	f24b 6361 	movw	r3, #46689	; 0xb661
    8920:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8924:	701a      	strb	r2, [r3, #0]
    8926:	f24b 6361 	movw	r3, #46689	; 0xb661
    892a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    892e:	781b      	ldrb	r3, [r3, #0]
    8930:	2bff      	cmp	r3, #255	; 0xff
    8932:	d10d      	bne.n	8950 <send_bat+0x5f4>
    8934:	f24b 6361 	movw	r3, #46689	; 0xb661
    8938:	f2c2 0304 	movt	r3, #8196	; 0x2004
    893c:	2200      	movs	r2, #0
    893e:	701a      	strb	r2, [r3, #0]
    8940:	e006      	b.n	8950 <send_bat+0x5f4>
    8942:	bf00      	nop
    8944:	2004bc45 	.word	0x2004bc45
    8948:	2004b9cf 	.word	0x2004b9cf
    894c:	2004b9cd 	.word	0x2004b9cd
    8950:	f24b 6361 	movw	r3, #46689	; 0xb661
    8954:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8958:	781b      	ldrb	r3, [r3, #0]
    895a:	461a      	mov	r2, r3
    895c:	f24b 7365 	movw	r3, #46949	; 0xb765
    8960:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8964:	7819      	ldrb	r1, [r3, #0]
    8966:	f24b 6364 	movw	r3, #46692	; 0xb664
    896a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    896e:	5499      	strb	r1, [r3, r2]
    8970:	f24b 6361 	movw	r3, #46689	; 0xb661
    8974:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8978:	781b      	ldrb	r3, [r3, #0]
    897a:	3301      	adds	r3, #1
    897c:	b2da      	uxtb	r2, r3
    897e:	f24b 6361 	movw	r3, #46689	; 0xb661
    8982:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8986:	701a      	strb	r2, [r3, #0]
    8988:	f24b 6361 	movw	r3, #46689	; 0xb661
    898c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8990:	781b      	ldrb	r3, [r3, #0]
    8992:	2bff      	cmp	r3, #255	; 0xff
    8994:	d105      	bne.n	89a2 <send_bat+0x646>
    8996:	f24b 6361 	movw	r3, #46689	; 0xb661
    899a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    899e:	2200      	movs	r2, #0
    89a0:	701a      	strb	r2, [r3, #0]
    89a2:	f24b 6361 	movw	r3, #46689	; 0xb661
    89a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89aa:	781b      	ldrb	r3, [r3, #0]
    89ac:	461a      	mov	r2, r3
    89ae:	f24b 7366 	movw	r3, #46950	; 0xb766
    89b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89b6:	7819      	ldrb	r1, [r3, #0]
    89b8:	f24b 6364 	movw	r3, #46692	; 0xb664
    89bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89c0:	5499      	strb	r1, [r3, r2]
    89c2:	f24b 6361 	movw	r3, #46689	; 0xb661
    89c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89ca:	781b      	ldrb	r3, [r3, #0]
    89cc:	3301      	adds	r3, #1
    89ce:	b2da      	uxtb	r2, r3
    89d0:	f24b 6361 	movw	r3, #46689	; 0xb661
    89d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89d8:	701a      	strb	r2, [r3, #0]
    89da:	f24b 6361 	movw	r3, #46689	; 0xb661
    89de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89e2:	781b      	ldrb	r3, [r3, #0]
    89e4:	2bff      	cmp	r3, #255	; 0xff
    89e6:	d105      	bne.n	89f4 <send_bat+0x698>
    89e8:	f24b 6361 	movw	r3, #46689	; 0xb661
    89ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89f0:	2200      	movs	r2, #0
    89f2:	701a      	strb	r2, [r3, #0]
    89f4:	f248 0339 	movw	r3, #32825	; 0x8039
    89f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89fc:	781b      	ldrb	r3, [r3, #0]
    89fe:	b2db      	uxtb	r3, r3
    8a00:	f003 0310 	and.w	r3, r3, #16
    8a04:	2b00      	cmp	r3, #0
    8a06:	d15a      	bne.n	8abe <send_bat+0x762>
    8a08:	f24b 6362 	movw	r3, #46690	; 0xb662
    8a0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a10:	781b      	ldrb	r3, [r3, #0]
    8a12:	b2db      	uxtb	r3, r3
    8a14:	461a      	mov	r2, r3
    8a16:	f24b 6364 	movw	r3, #46692	; 0xb664
    8a1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a1e:	5c9a      	ldrb	r2, [r3, r2]
    8a20:	f24b 7363 	movw	r3, #46947	; 0xb763
    8a24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a28:	701a      	strb	r2, [r3, #0]
    8a2a:	f24b 7364 	movw	r3, #46948	; 0xb764
    8a2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a32:	2200      	movs	r2, #0
    8a34:	701a      	strb	r2, [r3, #0]
    8a36:	f24b 6362 	movw	r3, #46690	; 0xb662
    8a3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a3e:	781b      	ldrb	r3, [r3, #0]
    8a40:	b2db      	uxtb	r3, r3
    8a42:	3301      	adds	r3, #1
    8a44:	b2da      	uxtb	r2, r3
    8a46:	f24b 6362 	movw	r3, #46690	; 0xb662
    8a4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a4e:	701a      	strb	r2, [r3, #0]
    8a50:	f24b 6362 	movw	r3, #46690	; 0xb662
    8a54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a58:	781b      	ldrb	r3, [r3, #0]
    8a5a:	b2db      	uxtb	r3, r3
    8a5c:	2bff      	cmp	r3, #255	; 0xff
    8a5e:	d105      	bne.n	8a6c <send_bat+0x710>
    8a60:	f24b 6362 	movw	r3, #46690	; 0xb662
    8a64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a68:	2200      	movs	r2, #0
    8a6a:	701a      	strb	r2, [r3, #0]
    8a6c:	f248 0338 	movw	r3, #32824	; 0x8038
    8a70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a74:	f248 0238 	movw	r2, #32824	; 0x8038
    8a78:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8a7c:	7812      	ldrb	r2, [r2, #0]
    8a7e:	b2d2      	uxtb	r2, r2
    8a80:	f042 0201 	orr.w	r2, r2, #1
    8a84:	b2d2      	uxtb	r2, r2
    8a86:	701a      	strb	r2, [r3, #0]
    8a88:	f248 0339 	movw	r3, #32825	; 0x8039
    8a8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a90:	f248 0239 	movw	r2, #32825	; 0x8039
    8a94:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8a98:	7812      	ldrb	r2, [r2, #0]
    8a9a:	b2d2      	uxtb	r2, r2
    8a9c:	f042 0210 	orr.w	r2, r2, #16
    8aa0:	b2d2      	uxtb	r2, r2
    8aa2:	701a      	strb	r2, [r3, #0]
    8aa4:	e00b      	b.n	8abe <send_bat+0x762>
    8aa6:	f24b 6360 	movw	r3, #46688	; 0xb660
    8aaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8aae:	781b      	ldrb	r3, [r3, #0]
    8ab0:	3301      	adds	r3, #1
    8ab2:	b2da      	uxtb	r2, r3
    8ab4:	f24b 6360 	movw	r3, #46688	; 0xb660
    8ab8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8abc:	701a      	strb	r2, [r3, #0]
}
    8abe:	46bd      	mov	sp, r7
    8ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ac4:	4770      	bx	lr
    8ac6:	bf00      	nop

00008ac8 <send_climb>:
void send_climb(void){  //2000ms
    8ac8:	b480      	push	{r7}
    8aca:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 20 == 18) PERIODIC_SEND_CLIMB_PID();}
    8acc:	f24b 6359 	movw	r3, #46681	; 0xb659
    8ad0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ad4:	781a      	ldrb	r2, [r3, #0]
    8ad6:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    8ada:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    8ade:	fba3 1302 	umull	r1, r3, r3, r2
    8ae2:	0919      	lsrs	r1, r3, #4
    8ae4:	460b      	mov	r3, r1
    8ae6:	009b      	lsls	r3, r3, #2
    8ae8:	440b      	add	r3, r1
    8aea:	009b      	lsls	r3, r3, #2
    8aec:	1ad3      	subs	r3, r2, r3
    8aee:	b2db      	uxtb	r3, r3
    8af0:	2b12      	cmp	r3, #18
    8af2:	f040 8554 	bne.w	959e <send_climb+0xad6>
    8af6:	f24b 6361 	movw	r3, #46689	; 0xb661
    8afa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8afe:	781a      	ldrb	r2, [r3, #0]
    8b00:	f24b 6362 	movw	r3, #46690	; 0xb662
    8b04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b08:	781b      	ldrb	r3, [r3, #0]
    8b0a:	b2db      	uxtb	r3, r3
    8b0c:	429a      	cmp	r2, r3
    8b0e:	d313      	bcc.n	8b38 <send_climb+0x70>
    8b10:	f24b 6362 	movw	r3, #46690	; 0xb662
    8b14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b18:	781b      	ldrb	r3, [r3, #0]
    8b1a:	b2db      	uxtb	r3, r3
    8b1c:	461a      	mov	r2, r3
    8b1e:	f24b 6361 	movw	r3, #46689	; 0xb661
    8b22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b26:	781b      	ldrb	r3, [r3, #0]
    8b28:	1ad3      	subs	r3, r2, r3
    8b2a:	33ff      	adds	r3, #255	; 0xff
    8b2c:	2b12      	cmp	r3, #18
    8b2e:	bfd4      	ite	le
    8b30:	2300      	movle	r3, #0
    8b32:	2301      	movgt	r3, #1
    8b34:	b2db      	uxtb	r3, r3
    8b36:	e011      	b.n	8b5c <send_climb+0x94>
    8b38:	f24b 6362 	movw	r3, #46690	; 0xb662
    8b3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b40:	781b      	ldrb	r3, [r3, #0]
    8b42:	b2db      	uxtb	r3, r3
    8b44:	461a      	mov	r2, r3
    8b46:	f24b 6361 	movw	r3, #46689	; 0xb661
    8b4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b4e:	781b      	ldrb	r3, [r3, #0]
    8b50:	1ad3      	subs	r3, r2, r3
    8b52:	2b12      	cmp	r3, #18
    8b54:	bfd4      	ite	le
    8b56:	2300      	movle	r3, #0
    8b58:	2301      	movgt	r3, #1
    8b5a:	b2db      	uxtb	r3, r3
    8b5c:	2b00      	cmp	r3, #0
    8b5e:	f000 8512 	beq.w	9586 <send_climb+0xabe>
    8b62:	f24b 6361 	movw	r3, #46689	; 0xb661
    8b66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b6a:	781b      	ldrb	r3, [r3, #0]
    8b6c:	461a      	mov	r2, r3
    8b6e:	f24b 6364 	movw	r3, #46692	; 0xb664
    8b72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b76:	2105      	movs	r1, #5
    8b78:	5499      	strb	r1, [r3, r2]
    8b7a:	f24b 6361 	movw	r3, #46689	; 0xb661
    8b7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b82:	781b      	ldrb	r3, [r3, #0]
    8b84:	3301      	adds	r3, #1
    8b86:	b2da      	uxtb	r2, r3
    8b88:	f24b 6361 	movw	r3, #46689	; 0xb661
    8b8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b90:	701a      	strb	r2, [r3, #0]
    8b92:	f24b 6361 	movw	r3, #46689	; 0xb661
    8b96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b9a:	781b      	ldrb	r3, [r3, #0]
    8b9c:	2bff      	cmp	r3, #255	; 0xff
    8b9e:	d105      	bne.n	8bac <send_climb+0xe4>
    8ba0:	f24b 6361 	movw	r3, #46689	; 0xb661
    8ba4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ba8:	2200      	movs	r2, #0
    8baa:	701a      	strb	r2, [r3, #0]
    8bac:	f24b 6361 	movw	r3, #46689	; 0xb661
    8bb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bb4:	781b      	ldrb	r3, [r3, #0]
    8bb6:	461a      	mov	r2, r3
    8bb8:	f24b 6364 	movw	r3, #46692	; 0xb664
    8bbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bc0:	210e      	movs	r1, #14
    8bc2:	5499      	strb	r1, [r3, r2]
    8bc4:	f24b 6361 	movw	r3, #46689	; 0xb661
    8bc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bcc:	781b      	ldrb	r3, [r3, #0]
    8bce:	3301      	adds	r3, #1
    8bd0:	b2da      	uxtb	r2, r3
    8bd2:	f24b 6361 	movw	r3, #46689	; 0xb661
    8bd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bda:	701a      	strb	r2, [r3, #0]
    8bdc:	f24b 6361 	movw	r3, #46689	; 0xb661
    8be0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8be4:	781b      	ldrb	r3, [r3, #0]
    8be6:	2bff      	cmp	r3, #255	; 0xff
    8be8:	d105      	bne.n	8bf6 <send_climb+0x12e>
    8bea:	f24b 6361 	movw	r3, #46689	; 0xb661
    8bee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bf2:	2200      	movs	r2, #0
    8bf4:	701a      	strb	r2, [r3, #0]
    8bf6:	f24b 7365 	movw	r3, #46949	; 0xb765
    8bfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bfe:	220e      	movs	r2, #14
    8c00:	701a      	strb	r2, [r3, #0]
    8c02:	f24b 7366 	movw	r3, #46950	; 0xb766
    8c06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c0a:	220e      	movs	r2, #14
    8c0c:	701a      	strb	r2, [r3, #0]
    8c0e:	f24b 6361 	movw	r3, #46689	; 0xb661
    8c12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c16:	781b      	ldrb	r3, [r3, #0]
    8c18:	461a      	mov	r2, r3
    8c1a:	f64b 1394 	movw	r3, #47508	; 0xb994
    8c1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c22:	7819      	ldrb	r1, [r3, #0]
    8c24:	f24b 6364 	movw	r3, #46692	; 0xb664
    8c28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c2c:	5499      	strb	r1, [r3, r2]
    8c2e:	f64b 1394 	movw	r3, #47508	; 0xb994
    8c32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c36:	781a      	ldrb	r2, [r3, #0]
    8c38:	f24b 7365 	movw	r3, #46949	; 0xb765
    8c3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c40:	781b      	ldrb	r3, [r3, #0]
    8c42:	4413      	add	r3, r2
    8c44:	b2da      	uxtb	r2, r3
    8c46:	f24b 7365 	movw	r3, #46949	; 0xb765
    8c4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c4e:	701a      	strb	r2, [r3, #0]
    8c50:	f24b 7366 	movw	r3, #46950	; 0xb766
    8c54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c58:	781a      	ldrb	r2, [r3, #0]
    8c5a:	f24b 7365 	movw	r3, #46949	; 0xb765
    8c5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c62:	781b      	ldrb	r3, [r3, #0]
    8c64:	4413      	add	r3, r2
    8c66:	b2da      	uxtb	r2, r3
    8c68:	f24b 7366 	movw	r3, #46950	; 0xb766
    8c6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c70:	701a      	strb	r2, [r3, #0]
    8c72:	f24b 6361 	movw	r3, #46689	; 0xb661
    8c76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c7a:	781b      	ldrb	r3, [r3, #0]
    8c7c:	3301      	adds	r3, #1
    8c7e:	b2da      	uxtb	r2, r3
    8c80:	f24b 6361 	movw	r3, #46689	; 0xb661
    8c84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c88:	701a      	strb	r2, [r3, #0]
    8c8a:	f24b 6361 	movw	r3, #46689	; 0xb661
    8c8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c92:	781b      	ldrb	r3, [r3, #0]
    8c94:	2bff      	cmp	r3, #255	; 0xff
    8c96:	d105      	bne.n	8ca4 <send_climb+0x1dc>
    8c98:	f24b 6361 	movw	r3, #46689	; 0xb661
    8c9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ca0:	2200      	movs	r2, #0
    8ca2:	701a      	strb	r2, [r3, #0]
    8ca4:	f24b 6361 	movw	r3, #46689	; 0xb661
    8ca8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cac:	781b      	ldrb	r3, [r3, #0]
    8cae:	461a      	mov	r2, r3
    8cb0:	f64b 1394 	movw	r3, #47508	; 0xb994
    8cb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cb8:	7859      	ldrb	r1, [r3, #1]
    8cba:	f24b 6364 	movw	r3, #46692	; 0xb664
    8cbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cc2:	5499      	strb	r1, [r3, r2]
    8cc4:	4bd3      	ldr	r3, [pc, #844]	; (9014 <send_climb+0x54c>)
    8cc6:	781a      	ldrb	r2, [r3, #0]
    8cc8:	f24b 7365 	movw	r3, #46949	; 0xb765
    8ccc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cd0:	781b      	ldrb	r3, [r3, #0]
    8cd2:	4413      	add	r3, r2
    8cd4:	b2da      	uxtb	r2, r3
    8cd6:	f24b 7365 	movw	r3, #46949	; 0xb765
    8cda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cde:	701a      	strb	r2, [r3, #0]
    8ce0:	f24b 7366 	movw	r3, #46950	; 0xb766
    8ce4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ce8:	781a      	ldrb	r2, [r3, #0]
    8cea:	f24b 7365 	movw	r3, #46949	; 0xb765
    8cee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cf2:	781b      	ldrb	r3, [r3, #0]
    8cf4:	4413      	add	r3, r2
    8cf6:	b2da      	uxtb	r2, r3
    8cf8:	f24b 7366 	movw	r3, #46950	; 0xb766
    8cfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d00:	701a      	strb	r2, [r3, #0]
    8d02:	f24b 6361 	movw	r3, #46689	; 0xb661
    8d06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d0a:	781b      	ldrb	r3, [r3, #0]
    8d0c:	3301      	adds	r3, #1
    8d0e:	b2da      	uxtb	r2, r3
    8d10:	f24b 6361 	movw	r3, #46689	; 0xb661
    8d14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d18:	701a      	strb	r2, [r3, #0]
    8d1a:	f24b 6361 	movw	r3, #46689	; 0xb661
    8d1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d22:	781b      	ldrb	r3, [r3, #0]
    8d24:	2bff      	cmp	r3, #255	; 0xff
    8d26:	d105      	bne.n	8d34 <send_climb+0x26c>
    8d28:	f24b 6361 	movw	r3, #46689	; 0xb661
    8d2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d30:	2200      	movs	r2, #0
    8d32:	701a      	strb	r2, [r3, #0]
    8d34:	f24b 6361 	movw	r3, #46689	; 0xb661
    8d38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d3c:	781b      	ldrb	r3, [r3, #0]
    8d3e:	461a      	mov	r2, r3
    8d40:	f64b 13a8 	movw	r3, #47528	; 0xb9a8
    8d44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d48:	7819      	ldrb	r1, [r3, #0]
    8d4a:	f24b 6364 	movw	r3, #46692	; 0xb664
    8d4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d52:	5499      	strb	r1, [r3, r2]
    8d54:	f64b 13a8 	movw	r3, #47528	; 0xb9a8
    8d58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d5c:	781a      	ldrb	r2, [r3, #0]
    8d5e:	f24b 7365 	movw	r3, #46949	; 0xb765
    8d62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d66:	781b      	ldrb	r3, [r3, #0]
    8d68:	4413      	add	r3, r2
    8d6a:	b2da      	uxtb	r2, r3
    8d6c:	f24b 7365 	movw	r3, #46949	; 0xb765
    8d70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d74:	701a      	strb	r2, [r3, #0]
    8d76:	f24b 7366 	movw	r3, #46950	; 0xb766
    8d7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d7e:	781a      	ldrb	r2, [r3, #0]
    8d80:	f24b 7365 	movw	r3, #46949	; 0xb765
    8d84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d88:	781b      	ldrb	r3, [r3, #0]
    8d8a:	4413      	add	r3, r2
    8d8c:	b2da      	uxtb	r2, r3
    8d8e:	f24b 7366 	movw	r3, #46950	; 0xb766
    8d92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d96:	701a      	strb	r2, [r3, #0]
    8d98:	f24b 6361 	movw	r3, #46689	; 0xb661
    8d9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8da0:	781b      	ldrb	r3, [r3, #0]
    8da2:	3301      	adds	r3, #1
    8da4:	b2da      	uxtb	r2, r3
    8da6:	f24b 6361 	movw	r3, #46689	; 0xb661
    8daa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dae:	701a      	strb	r2, [r3, #0]
    8db0:	f24b 6361 	movw	r3, #46689	; 0xb661
    8db4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8db8:	781b      	ldrb	r3, [r3, #0]
    8dba:	2bff      	cmp	r3, #255	; 0xff
    8dbc:	d105      	bne.n	8dca <send_climb+0x302>
    8dbe:	f24b 6361 	movw	r3, #46689	; 0xb661
    8dc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dc6:	2200      	movs	r2, #0
    8dc8:	701a      	strb	r2, [r3, #0]
    8dca:	f24b 6361 	movw	r3, #46689	; 0xb661
    8dce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dd2:	781b      	ldrb	r3, [r3, #0]
    8dd4:	461a      	mov	r2, r3
    8dd6:	f64b 13a8 	movw	r3, #47528	; 0xb9a8
    8dda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dde:	7859      	ldrb	r1, [r3, #1]
    8de0:	f24b 6364 	movw	r3, #46692	; 0xb664
    8de4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8de8:	5499      	strb	r1, [r3, r2]
    8dea:	4b8b      	ldr	r3, [pc, #556]	; (9018 <send_climb+0x550>)
    8dec:	781a      	ldrb	r2, [r3, #0]
    8dee:	f24b 7365 	movw	r3, #46949	; 0xb765
    8df2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8df6:	781b      	ldrb	r3, [r3, #0]
    8df8:	4413      	add	r3, r2
    8dfa:	b2da      	uxtb	r2, r3
    8dfc:	f24b 7365 	movw	r3, #46949	; 0xb765
    8e00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e04:	701a      	strb	r2, [r3, #0]
    8e06:	f24b 7366 	movw	r3, #46950	; 0xb766
    8e0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e0e:	781a      	ldrb	r2, [r3, #0]
    8e10:	f24b 7365 	movw	r3, #46949	; 0xb765
    8e14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e18:	781b      	ldrb	r3, [r3, #0]
    8e1a:	4413      	add	r3, r2
    8e1c:	b2da      	uxtb	r2, r3
    8e1e:	f24b 7366 	movw	r3, #46950	; 0xb766
    8e22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e26:	701a      	strb	r2, [r3, #0]
    8e28:	f24b 6361 	movw	r3, #46689	; 0xb661
    8e2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e30:	781b      	ldrb	r3, [r3, #0]
    8e32:	3301      	adds	r3, #1
    8e34:	b2da      	uxtb	r2, r3
    8e36:	f24b 6361 	movw	r3, #46689	; 0xb661
    8e3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e3e:	701a      	strb	r2, [r3, #0]
    8e40:	f24b 6361 	movw	r3, #46689	; 0xb661
    8e44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e48:	781b      	ldrb	r3, [r3, #0]
    8e4a:	2bff      	cmp	r3, #255	; 0xff
    8e4c:	d105      	bne.n	8e5a <send_climb+0x392>
    8e4e:	f24b 6361 	movw	r3, #46689	; 0xb661
    8e52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e56:	2200      	movs	r2, #0
    8e58:	701a      	strb	r2, [r3, #0]
    8e5a:	f24b 6361 	movw	r3, #46689	; 0xb661
    8e5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e62:	781b      	ldrb	r3, [r3, #0]
    8e64:	461a      	mov	r2, r3
    8e66:	f64b 13a8 	movw	r3, #47528	; 0xb9a8
    8e6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e6e:	7899      	ldrb	r1, [r3, #2]
    8e70:	f24b 6364 	movw	r3, #46692	; 0xb664
    8e74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e78:	5499      	strb	r1, [r3, r2]
    8e7a:	4b68      	ldr	r3, [pc, #416]	; (901c <send_climb+0x554>)
    8e7c:	781a      	ldrb	r2, [r3, #0]
    8e7e:	f24b 7365 	movw	r3, #46949	; 0xb765
    8e82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e86:	781b      	ldrb	r3, [r3, #0]
    8e88:	4413      	add	r3, r2
    8e8a:	b2da      	uxtb	r2, r3
    8e8c:	f24b 7365 	movw	r3, #46949	; 0xb765
    8e90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e94:	701a      	strb	r2, [r3, #0]
    8e96:	f24b 7366 	movw	r3, #46950	; 0xb766
    8e9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e9e:	781a      	ldrb	r2, [r3, #0]
    8ea0:	f24b 7365 	movw	r3, #46949	; 0xb765
    8ea4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ea8:	781b      	ldrb	r3, [r3, #0]
    8eaa:	4413      	add	r3, r2
    8eac:	b2da      	uxtb	r2, r3
    8eae:	f24b 7366 	movw	r3, #46950	; 0xb766
    8eb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8eb6:	701a      	strb	r2, [r3, #0]
    8eb8:	f24b 6361 	movw	r3, #46689	; 0xb661
    8ebc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ec0:	781b      	ldrb	r3, [r3, #0]
    8ec2:	3301      	adds	r3, #1
    8ec4:	b2da      	uxtb	r2, r3
    8ec6:	f24b 6361 	movw	r3, #46689	; 0xb661
    8eca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ece:	701a      	strb	r2, [r3, #0]
    8ed0:	f24b 6361 	movw	r3, #46689	; 0xb661
    8ed4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ed8:	781b      	ldrb	r3, [r3, #0]
    8eda:	2bff      	cmp	r3, #255	; 0xff
    8edc:	d105      	bne.n	8eea <send_climb+0x422>
    8ede:	f24b 6361 	movw	r3, #46689	; 0xb661
    8ee2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ee6:	2200      	movs	r2, #0
    8ee8:	701a      	strb	r2, [r3, #0]
    8eea:	f24b 6361 	movw	r3, #46689	; 0xb661
    8eee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ef2:	781b      	ldrb	r3, [r3, #0]
    8ef4:	461a      	mov	r2, r3
    8ef6:	f64b 13a8 	movw	r3, #47528	; 0xb9a8
    8efa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8efe:	78d9      	ldrb	r1, [r3, #3]
    8f00:	f24b 6364 	movw	r3, #46692	; 0xb664
    8f04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f08:	5499      	strb	r1, [r3, r2]
    8f0a:	4b45      	ldr	r3, [pc, #276]	; (9020 <send_climb+0x558>)
    8f0c:	781a      	ldrb	r2, [r3, #0]
    8f0e:	f24b 7365 	movw	r3, #46949	; 0xb765
    8f12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f16:	781b      	ldrb	r3, [r3, #0]
    8f18:	4413      	add	r3, r2
    8f1a:	b2da      	uxtb	r2, r3
    8f1c:	f24b 7365 	movw	r3, #46949	; 0xb765
    8f20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f24:	701a      	strb	r2, [r3, #0]
    8f26:	f24b 7366 	movw	r3, #46950	; 0xb766
    8f2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f2e:	781a      	ldrb	r2, [r3, #0]
    8f30:	f24b 7365 	movw	r3, #46949	; 0xb765
    8f34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f38:	781b      	ldrb	r3, [r3, #0]
    8f3a:	4413      	add	r3, r2
    8f3c:	b2da      	uxtb	r2, r3
    8f3e:	f24b 7366 	movw	r3, #46950	; 0xb766
    8f42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f46:	701a      	strb	r2, [r3, #0]
    8f48:	f24b 6361 	movw	r3, #46689	; 0xb661
    8f4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f50:	781b      	ldrb	r3, [r3, #0]
    8f52:	3301      	adds	r3, #1
    8f54:	b2da      	uxtb	r2, r3
    8f56:	f24b 6361 	movw	r3, #46689	; 0xb661
    8f5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f5e:	701a      	strb	r2, [r3, #0]
    8f60:	f24b 6361 	movw	r3, #46689	; 0xb661
    8f64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f68:	781b      	ldrb	r3, [r3, #0]
    8f6a:	2bff      	cmp	r3, #255	; 0xff
    8f6c:	d105      	bne.n	8f7a <send_climb+0x4b2>
    8f6e:	f24b 6361 	movw	r3, #46689	; 0xb661
    8f72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f76:	2200      	movs	r2, #0
    8f78:	701a      	strb	r2, [r3, #0]
    8f7a:	f24b 6361 	movw	r3, #46689	; 0xb661
    8f7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f82:	781b      	ldrb	r3, [r3, #0]
    8f84:	461a      	mov	r2, r3
    8f86:	f64b 13b0 	movw	r3, #47536	; 0xb9b0
    8f8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f8e:	7819      	ldrb	r1, [r3, #0]
    8f90:	f24b 6364 	movw	r3, #46692	; 0xb664
    8f94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f98:	5499      	strb	r1, [r3, r2]
    8f9a:	f64b 13b0 	movw	r3, #47536	; 0xb9b0
    8f9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fa2:	781a      	ldrb	r2, [r3, #0]
    8fa4:	f24b 7365 	movw	r3, #46949	; 0xb765
    8fa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fac:	781b      	ldrb	r3, [r3, #0]
    8fae:	4413      	add	r3, r2
    8fb0:	b2da      	uxtb	r2, r3
    8fb2:	f24b 7365 	movw	r3, #46949	; 0xb765
    8fb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fba:	701a      	strb	r2, [r3, #0]
    8fbc:	f24b 7366 	movw	r3, #46950	; 0xb766
    8fc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fc4:	781a      	ldrb	r2, [r3, #0]
    8fc6:	f24b 7365 	movw	r3, #46949	; 0xb765
    8fca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fce:	781b      	ldrb	r3, [r3, #0]
    8fd0:	4413      	add	r3, r2
    8fd2:	b2da      	uxtb	r2, r3
    8fd4:	f24b 7366 	movw	r3, #46950	; 0xb766
    8fd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fdc:	701a      	strb	r2, [r3, #0]
    8fde:	f24b 6361 	movw	r3, #46689	; 0xb661
    8fe2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fe6:	781b      	ldrb	r3, [r3, #0]
    8fe8:	3301      	adds	r3, #1
    8fea:	b2da      	uxtb	r2, r3
    8fec:	f24b 6361 	movw	r3, #46689	; 0xb661
    8ff0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ff4:	701a      	strb	r2, [r3, #0]
    8ff6:	f24b 6361 	movw	r3, #46689	; 0xb661
    8ffa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ffe:	781b      	ldrb	r3, [r3, #0]
    9000:	2bff      	cmp	r3, #255	; 0xff
    9002:	d10f      	bne.n	9024 <send_climb+0x55c>
    9004:	f24b 6361 	movw	r3, #46689	; 0xb661
    9008:	f2c2 0304 	movt	r3, #8196	; 0x2004
    900c:	2200      	movs	r2, #0
    900e:	701a      	strb	r2, [r3, #0]
    9010:	e008      	b.n	9024 <send_climb+0x55c>
    9012:	bf00      	nop
    9014:	2004b995 	.word	0x2004b995
    9018:	2004b9a9 	.word	0x2004b9a9
    901c:	2004b9aa 	.word	0x2004b9aa
    9020:	2004b9ab 	.word	0x2004b9ab
    9024:	f24b 6361 	movw	r3, #46689	; 0xb661
    9028:	f2c2 0304 	movt	r3, #8196	; 0x2004
    902c:	781b      	ldrb	r3, [r3, #0]
    902e:	461a      	mov	r2, r3
    9030:	f64b 13b0 	movw	r3, #47536	; 0xb9b0
    9034:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9038:	7859      	ldrb	r1, [r3, #1]
    903a:	f24b 6364 	movw	r3, #46692	; 0xb664
    903e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9042:	5499      	strb	r1, [r3, r2]
    9044:	4bd1      	ldr	r3, [pc, #836]	; (938c <send_climb+0x8c4>)
    9046:	781a      	ldrb	r2, [r3, #0]
    9048:	f24b 7365 	movw	r3, #46949	; 0xb765
    904c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9050:	781b      	ldrb	r3, [r3, #0]
    9052:	4413      	add	r3, r2
    9054:	b2da      	uxtb	r2, r3
    9056:	f24b 7365 	movw	r3, #46949	; 0xb765
    905a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    905e:	701a      	strb	r2, [r3, #0]
    9060:	f24b 7366 	movw	r3, #46950	; 0xb766
    9064:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9068:	781a      	ldrb	r2, [r3, #0]
    906a:	f24b 7365 	movw	r3, #46949	; 0xb765
    906e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9072:	781b      	ldrb	r3, [r3, #0]
    9074:	4413      	add	r3, r2
    9076:	b2da      	uxtb	r2, r3
    9078:	f24b 7366 	movw	r3, #46950	; 0xb766
    907c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9080:	701a      	strb	r2, [r3, #0]
    9082:	f24b 6361 	movw	r3, #46689	; 0xb661
    9086:	f2c2 0304 	movt	r3, #8196	; 0x2004
    908a:	781b      	ldrb	r3, [r3, #0]
    908c:	3301      	adds	r3, #1
    908e:	b2da      	uxtb	r2, r3
    9090:	f24b 6361 	movw	r3, #46689	; 0xb661
    9094:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9098:	701a      	strb	r2, [r3, #0]
    909a:	f24b 6361 	movw	r3, #46689	; 0xb661
    909e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90a2:	781b      	ldrb	r3, [r3, #0]
    90a4:	2bff      	cmp	r3, #255	; 0xff
    90a6:	d105      	bne.n	90b4 <send_climb+0x5ec>
    90a8:	f24b 6361 	movw	r3, #46689	; 0xb661
    90ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90b0:	2200      	movs	r2, #0
    90b2:	701a      	strb	r2, [r3, #0]
    90b4:	f24b 6361 	movw	r3, #46689	; 0xb661
    90b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90bc:	781b      	ldrb	r3, [r3, #0]
    90be:	461a      	mov	r2, r3
    90c0:	f64b 13b0 	movw	r3, #47536	; 0xb9b0
    90c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90c8:	7899      	ldrb	r1, [r3, #2]
    90ca:	f24b 6364 	movw	r3, #46692	; 0xb664
    90ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90d2:	5499      	strb	r1, [r3, r2]
    90d4:	4bae      	ldr	r3, [pc, #696]	; (9390 <send_climb+0x8c8>)
    90d6:	781a      	ldrb	r2, [r3, #0]
    90d8:	f24b 7365 	movw	r3, #46949	; 0xb765
    90dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90e0:	781b      	ldrb	r3, [r3, #0]
    90e2:	4413      	add	r3, r2
    90e4:	b2da      	uxtb	r2, r3
    90e6:	f24b 7365 	movw	r3, #46949	; 0xb765
    90ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90ee:	701a      	strb	r2, [r3, #0]
    90f0:	f24b 7366 	movw	r3, #46950	; 0xb766
    90f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90f8:	781a      	ldrb	r2, [r3, #0]
    90fa:	f24b 7365 	movw	r3, #46949	; 0xb765
    90fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9102:	781b      	ldrb	r3, [r3, #0]
    9104:	4413      	add	r3, r2
    9106:	b2da      	uxtb	r2, r3
    9108:	f24b 7366 	movw	r3, #46950	; 0xb766
    910c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9110:	701a      	strb	r2, [r3, #0]
    9112:	f24b 6361 	movw	r3, #46689	; 0xb661
    9116:	f2c2 0304 	movt	r3, #8196	; 0x2004
    911a:	781b      	ldrb	r3, [r3, #0]
    911c:	3301      	adds	r3, #1
    911e:	b2da      	uxtb	r2, r3
    9120:	f24b 6361 	movw	r3, #46689	; 0xb661
    9124:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9128:	701a      	strb	r2, [r3, #0]
    912a:	f24b 6361 	movw	r3, #46689	; 0xb661
    912e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9132:	781b      	ldrb	r3, [r3, #0]
    9134:	2bff      	cmp	r3, #255	; 0xff
    9136:	d105      	bne.n	9144 <send_climb+0x67c>
    9138:	f24b 6361 	movw	r3, #46689	; 0xb661
    913c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9140:	2200      	movs	r2, #0
    9142:	701a      	strb	r2, [r3, #0]
    9144:	f24b 6361 	movw	r3, #46689	; 0xb661
    9148:	f2c2 0304 	movt	r3, #8196	; 0x2004
    914c:	781b      	ldrb	r3, [r3, #0]
    914e:	461a      	mov	r2, r3
    9150:	f64b 13b0 	movw	r3, #47536	; 0xb9b0
    9154:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9158:	78d9      	ldrb	r1, [r3, #3]
    915a:	f24b 6364 	movw	r3, #46692	; 0xb664
    915e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9162:	5499      	strb	r1, [r3, r2]
    9164:	4b8b      	ldr	r3, [pc, #556]	; (9394 <send_climb+0x8cc>)
    9166:	781a      	ldrb	r2, [r3, #0]
    9168:	f24b 7365 	movw	r3, #46949	; 0xb765
    916c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9170:	781b      	ldrb	r3, [r3, #0]
    9172:	4413      	add	r3, r2
    9174:	b2da      	uxtb	r2, r3
    9176:	f24b 7365 	movw	r3, #46949	; 0xb765
    917a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    917e:	701a      	strb	r2, [r3, #0]
    9180:	f24b 7366 	movw	r3, #46950	; 0xb766
    9184:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9188:	781a      	ldrb	r2, [r3, #0]
    918a:	f24b 7365 	movw	r3, #46949	; 0xb765
    918e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9192:	781b      	ldrb	r3, [r3, #0]
    9194:	4413      	add	r3, r2
    9196:	b2da      	uxtb	r2, r3
    9198:	f24b 7366 	movw	r3, #46950	; 0xb766
    919c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91a0:	701a      	strb	r2, [r3, #0]
    91a2:	f24b 6361 	movw	r3, #46689	; 0xb661
    91a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91aa:	781b      	ldrb	r3, [r3, #0]
    91ac:	3301      	adds	r3, #1
    91ae:	b2da      	uxtb	r2, r3
    91b0:	f24b 6361 	movw	r3, #46689	; 0xb661
    91b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91b8:	701a      	strb	r2, [r3, #0]
    91ba:	f24b 6361 	movw	r3, #46689	; 0xb661
    91be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91c2:	781b      	ldrb	r3, [r3, #0]
    91c4:	2bff      	cmp	r3, #255	; 0xff
    91c6:	d105      	bne.n	91d4 <send_climb+0x70c>
    91c8:	f24b 6361 	movw	r3, #46689	; 0xb661
    91cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91d0:	2200      	movs	r2, #0
    91d2:	701a      	strb	r2, [r3, #0]
    91d4:	f24b 6361 	movw	r3, #46689	; 0xb661
    91d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91dc:	781b      	ldrb	r3, [r3, #0]
    91de:	461a      	mov	r2, r3
    91e0:	f643 23f0 	movw	r3, #15088	; 0x3af0
    91e4:	f2c0 0301 	movt	r3, #1
    91e8:	7819      	ldrb	r1, [r3, #0]
    91ea:	f24b 6364 	movw	r3, #46692	; 0xb664
    91ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91f2:	5499      	strb	r1, [r3, r2]
    91f4:	f643 23f0 	movw	r3, #15088	; 0x3af0
    91f8:	f2c0 0301 	movt	r3, #1
    91fc:	781a      	ldrb	r2, [r3, #0]
    91fe:	f24b 7365 	movw	r3, #46949	; 0xb765
    9202:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9206:	781b      	ldrb	r3, [r3, #0]
    9208:	4413      	add	r3, r2
    920a:	b2da      	uxtb	r2, r3
    920c:	f24b 7365 	movw	r3, #46949	; 0xb765
    9210:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9214:	701a      	strb	r2, [r3, #0]
    9216:	f24b 7366 	movw	r3, #46950	; 0xb766
    921a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    921e:	781a      	ldrb	r2, [r3, #0]
    9220:	f24b 7365 	movw	r3, #46949	; 0xb765
    9224:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9228:	781b      	ldrb	r3, [r3, #0]
    922a:	4413      	add	r3, r2
    922c:	b2da      	uxtb	r2, r3
    922e:	f24b 7366 	movw	r3, #46950	; 0xb766
    9232:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9236:	701a      	strb	r2, [r3, #0]
    9238:	f24b 6361 	movw	r3, #46689	; 0xb661
    923c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9240:	781b      	ldrb	r3, [r3, #0]
    9242:	3301      	adds	r3, #1
    9244:	b2da      	uxtb	r2, r3
    9246:	f24b 6361 	movw	r3, #46689	; 0xb661
    924a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    924e:	701a      	strb	r2, [r3, #0]
    9250:	f24b 6361 	movw	r3, #46689	; 0xb661
    9254:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9258:	781b      	ldrb	r3, [r3, #0]
    925a:	2bff      	cmp	r3, #255	; 0xff
    925c:	d105      	bne.n	926a <send_climb+0x7a2>
    925e:	f24b 6361 	movw	r3, #46689	; 0xb661
    9262:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9266:	2200      	movs	r2, #0
    9268:	701a      	strb	r2, [r3, #0]
    926a:	f24b 6361 	movw	r3, #46689	; 0xb661
    926e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9272:	781b      	ldrb	r3, [r3, #0]
    9274:	461a      	mov	r2, r3
    9276:	f643 23f0 	movw	r3, #15088	; 0x3af0
    927a:	f2c0 0301 	movt	r3, #1
    927e:	7859      	ldrb	r1, [r3, #1]
    9280:	f24b 6364 	movw	r3, #46692	; 0xb664
    9284:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9288:	5499      	strb	r1, [r3, r2]
    928a:	4b43      	ldr	r3, [pc, #268]	; (9398 <send_climb+0x8d0>)
    928c:	781a      	ldrb	r2, [r3, #0]
    928e:	f24b 7365 	movw	r3, #46949	; 0xb765
    9292:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9296:	781b      	ldrb	r3, [r3, #0]
    9298:	4413      	add	r3, r2
    929a:	b2da      	uxtb	r2, r3
    929c:	f24b 7365 	movw	r3, #46949	; 0xb765
    92a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92a4:	701a      	strb	r2, [r3, #0]
    92a6:	f24b 7366 	movw	r3, #46950	; 0xb766
    92aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92ae:	781a      	ldrb	r2, [r3, #0]
    92b0:	f24b 7365 	movw	r3, #46949	; 0xb765
    92b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92b8:	781b      	ldrb	r3, [r3, #0]
    92ba:	4413      	add	r3, r2
    92bc:	b2da      	uxtb	r2, r3
    92be:	f24b 7366 	movw	r3, #46950	; 0xb766
    92c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92c6:	701a      	strb	r2, [r3, #0]
    92c8:	f24b 6361 	movw	r3, #46689	; 0xb661
    92cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92d0:	781b      	ldrb	r3, [r3, #0]
    92d2:	3301      	adds	r3, #1
    92d4:	b2da      	uxtb	r2, r3
    92d6:	f24b 6361 	movw	r3, #46689	; 0xb661
    92da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92de:	701a      	strb	r2, [r3, #0]
    92e0:	f24b 6361 	movw	r3, #46689	; 0xb661
    92e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92e8:	781b      	ldrb	r3, [r3, #0]
    92ea:	2bff      	cmp	r3, #255	; 0xff
    92ec:	d105      	bne.n	92fa <send_climb+0x832>
    92ee:	f24b 6361 	movw	r3, #46689	; 0xb661
    92f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92f6:	2200      	movs	r2, #0
    92f8:	701a      	strb	r2, [r3, #0]
    92fa:	f24b 6361 	movw	r3, #46689	; 0xb661
    92fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9302:	781b      	ldrb	r3, [r3, #0]
    9304:	461a      	mov	r2, r3
    9306:	f643 23f0 	movw	r3, #15088	; 0x3af0
    930a:	f2c0 0301 	movt	r3, #1
    930e:	7899      	ldrb	r1, [r3, #2]
    9310:	f24b 6364 	movw	r3, #46692	; 0xb664
    9314:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9318:	5499      	strb	r1, [r3, r2]
    931a:	4b20      	ldr	r3, [pc, #128]	; (939c <send_climb+0x8d4>)
    931c:	781a      	ldrb	r2, [r3, #0]
    931e:	f24b 7365 	movw	r3, #46949	; 0xb765
    9322:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9326:	781b      	ldrb	r3, [r3, #0]
    9328:	4413      	add	r3, r2
    932a:	b2da      	uxtb	r2, r3
    932c:	f24b 7365 	movw	r3, #46949	; 0xb765
    9330:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9334:	701a      	strb	r2, [r3, #0]
    9336:	f24b 7366 	movw	r3, #46950	; 0xb766
    933a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    933e:	781a      	ldrb	r2, [r3, #0]
    9340:	f24b 7365 	movw	r3, #46949	; 0xb765
    9344:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9348:	781b      	ldrb	r3, [r3, #0]
    934a:	4413      	add	r3, r2
    934c:	b2da      	uxtb	r2, r3
    934e:	f24b 7366 	movw	r3, #46950	; 0xb766
    9352:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9356:	701a      	strb	r2, [r3, #0]
    9358:	f24b 6361 	movw	r3, #46689	; 0xb661
    935c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9360:	781b      	ldrb	r3, [r3, #0]
    9362:	3301      	adds	r3, #1
    9364:	b2da      	uxtb	r2, r3
    9366:	f24b 6361 	movw	r3, #46689	; 0xb661
    936a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    936e:	701a      	strb	r2, [r3, #0]
    9370:	f24b 6361 	movw	r3, #46689	; 0xb661
    9374:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9378:	781b      	ldrb	r3, [r3, #0]
    937a:	2bff      	cmp	r3, #255	; 0xff
    937c:	d110      	bne.n	93a0 <send_climb+0x8d8>
    937e:	f24b 6361 	movw	r3, #46689	; 0xb661
    9382:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9386:	2200      	movs	r2, #0
    9388:	701a      	strb	r2, [r3, #0]
    938a:	e009      	b.n	93a0 <send_climb+0x8d8>
    938c:	2004b9b1 	.word	0x2004b9b1
    9390:	2004b9b2 	.word	0x2004b9b2
    9394:	2004b9b3 	.word	0x2004b9b3
    9398:	00013af1 	.word	0x00013af1
    939c:	00013af2 	.word	0x00013af2
    93a0:	f24b 6361 	movw	r3, #46689	; 0xb661
    93a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93a8:	781b      	ldrb	r3, [r3, #0]
    93aa:	461a      	mov	r2, r3
    93ac:	f643 23f0 	movw	r3, #15088	; 0x3af0
    93b0:	f2c0 0301 	movt	r3, #1
    93b4:	78d9      	ldrb	r1, [r3, #3]
    93b6:	f24b 6364 	movw	r3, #46692	; 0xb664
    93ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93be:	5499      	strb	r1, [r3, r2]
    93c0:	4b79      	ldr	r3, [pc, #484]	; (95a8 <send_climb+0xae0>)
    93c2:	781a      	ldrb	r2, [r3, #0]
    93c4:	f24b 7365 	movw	r3, #46949	; 0xb765
    93c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93cc:	781b      	ldrb	r3, [r3, #0]
    93ce:	4413      	add	r3, r2
    93d0:	b2da      	uxtb	r2, r3
    93d2:	f24b 7365 	movw	r3, #46949	; 0xb765
    93d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93da:	701a      	strb	r2, [r3, #0]
    93dc:	f24b 7366 	movw	r3, #46950	; 0xb766
    93e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93e4:	781a      	ldrb	r2, [r3, #0]
    93e6:	f24b 7365 	movw	r3, #46949	; 0xb765
    93ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93ee:	781b      	ldrb	r3, [r3, #0]
    93f0:	4413      	add	r3, r2
    93f2:	b2da      	uxtb	r2, r3
    93f4:	f24b 7366 	movw	r3, #46950	; 0xb766
    93f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93fc:	701a      	strb	r2, [r3, #0]
    93fe:	f24b 6361 	movw	r3, #46689	; 0xb661
    9402:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9406:	781b      	ldrb	r3, [r3, #0]
    9408:	3301      	adds	r3, #1
    940a:	b2da      	uxtb	r2, r3
    940c:	f24b 6361 	movw	r3, #46689	; 0xb661
    9410:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9414:	701a      	strb	r2, [r3, #0]
    9416:	f24b 6361 	movw	r3, #46689	; 0xb661
    941a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    941e:	781b      	ldrb	r3, [r3, #0]
    9420:	2bff      	cmp	r3, #255	; 0xff
    9422:	d105      	bne.n	9430 <send_climb+0x968>
    9424:	f24b 6361 	movw	r3, #46689	; 0xb661
    9428:	f2c2 0304 	movt	r3, #8196	; 0x2004
    942c:	2200      	movs	r2, #0
    942e:	701a      	strb	r2, [r3, #0]
    9430:	f24b 6361 	movw	r3, #46689	; 0xb661
    9434:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9438:	781b      	ldrb	r3, [r3, #0]
    943a:	461a      	mov	r2, r3
    943c:	f24b 7365 	movw	r3, #46949	; 0xb765
    9440:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9444:	7819      	ldrb	r1, [r3, #0]
    9446:	f24b 6364 	movw	r3, #46692	; 0xb664
    944a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    944e:	5499      	strb	r1, [r3, r2]
    9450:	f24b 6361 	movw	r3, #46689	; 0xb661
    9454:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9458:	781b      	ldrb	r3, [r3, #0]
    945a:	3301      	adds	r3, #1
    945c:	b2da      	uxtb	r2, r3
    945e:	f24b 6361 	movw	r3, #46689	; 0xb661
    9462:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9466:	701a      	strb	r2, [r3, #0]
    9468:	f24b 6361 	movw	r3, #46689	; 0xb661
    946c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9470:	781b      	ldrb	r3, [r3, #0]
    9472:	2bff      	cmp	r3, #255	; 0xff
    9474:	d105      	bne.n	9482 <send_climb+0x9ba>
    9476:	f24b 6361 	movw	r3, #46689	; 0xb661
    947a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    947e:	2200      	movs	r2, #0
    9480:	701a      	strb	r2, [r3, #0]
    9482:	f24b 6361 	movw	r3, #46689	; 0xb661
    9486:	f2c2 0304 	movt	r3, #8196	; 0x2004
    948a:	781b      	ldrb	r3, [r3, #0]
    948c:	461a      	mov	r2, r3
    948e:	f24b 7366 	movw	r3, #46950	; 0xb766
    9492:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9496:	7819      	ldrb	r1, [r3, #0]
    9498:	f24b 6364 	movw	r3, #46692	; 0xb664
    949c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94a0:	5499      	strb	r1, [r3, r2]
    94a2:	f24b 6361 	movw	r3, #46689	; 0xb661
    94a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94aa:	781b      	ldrb	r3, [r3, #0]
    94ac:	3301      	adds	r3, #1
    94ae:	b2da      	uxtb	r2, r3
    94b0:	f24b 6361 	movw	r3, #46689	; 0xb661
    94b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94b8:	701a      	strb	r2, [r3, #0]
    94ba:	f24b 6361 	movw	r3, #46689	; 0xb661
    94be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94c2:	781b      	ldrb	r3, [r3, #0]
    94c4:	2bff      	cmp	r3, #255	; 0xff
    94c6:	d105      	bne.n	94d4 <send_climb+0xa0c>
    94c8:	f24b 6361 	movw	r3, #46689	; 0xb661
    94cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94d0:	2200      	movs	r2, #0
    94d2:	701a      	strb	r2, [r3, #0]
    94d4:	f248 0339 	movw	r3, #32825	; 0x8039
    94d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94dc:	781b      	ldrb	r3, [r3, #0]
    94de:	b2db      	uxtb	r3, r3
    94e0:	f003 0310 	and.w	r3, r3, #16
    94e4:	2b00      	cmp	r3, #0
    94e6:	d15a      	bne.n	959e <send_climb+0xad6>
    94e8:	f24b 6362 	movw	r3, #46690	; 0xb662
    94ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94f0:	781b      	ldrb	r3, [r3, #0]
    94f2:	b2db      	uxtb	r3, r3
    94f4:	461a      	mov	r2, r3
    94f6:	f24b 6364 	movw	r3, #46692	; 0xb664
    94fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94fe:	5c9a      	ldrb	r2, [r3, r2]
    9500:	f24b 7363 	movw	r3, #46947	; 0xb763
    9504:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9508:	701a      	strb	r2, [r3, #0]
    950a:	f24b 7364 	movw	r3, #46948	; 0xb764
    950e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9512:	2200      	movs	r2, #0
    9514:	701a      	strb	r2, [r3, #0]
    9516:	f24b 6362 	movw	r3, #46690	; 0xb662
    951a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    951e:	781b      	ldrb	r3, [r3, #0]
    9520:	b2db      	uxtb	r3, r3
    9522:	3301      	adds	r3, #1
    9524:	b2da      	uxtb	r2, r3
    9526:	f24b 6362 	movw	r3, #46690	; 0xb662
    952a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    952e:	701a      	strb	r2, [r3, #0]
    9530:	f24b 6362 	movw	r3, #46690	; 0xb662
    9534:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9538:	781b      	ldrb	r3, [r3, #0]
    953a:	b2db      	uxtb	r3, r3
    953c:	2bff      	cmp	r3, #255	; 0xff
    953e:	d105      	bne.n	954c <send_climb+0xa84>
    9540:	f24b 6362 	movw	r3, #46690	; 0xb662
    9544:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9548:	2200      	movs	r2, #0
    954a:	701a      	strb	r2, [r3, #0]
    954c:	f248 0338 	movw	r3, #32824	; 0x8038
    9550:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9554:	f248 0238 	movw	r2, #32824	; 0x8038
    9558:	f2c2 0200 	movt	r2, #8192	; 0x2000
    955c:	7812      	ldrb	r2, [r2, #0]
    955e:	b2d2      	uxtb	r2, r2
    9560:	f042 0201 	orr.w	r2, r2, #1
    9564:	b2d2      	uxtb	r2, r2
    9566:	701a      	strb	r2, [r3, #0]
    9568:	f248 0339 	movw	r3, #32825	; 0x8039
    956c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9570:	f248 0239 	movw	r2, #32825	; 0x8039
    9574:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9578:	7812      	ldrb	r2, [r2, #0]
    957a:	b2d2      	uxtb	r2, r2
    957c:	f042 0210 	orr.w	r2, r2, #16
    9580:	b2d2      	uxtb	r2, r2
    9582:	701a      	strb	r2, [r3, #0]
    9584:	e00b      	b.n	959e <send_climb+0xad6>
    9586:	f24b 6360 	movw	r3, #46688	; 0xb660
    958a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    958e:	781b      	ldrb	r3, [r3, #0]
    9590:	3301      	adds	r3, #1
    9592:	b2da      	uxtb	r2, r3
    9594:	f24b 6360 	movw	r3, #46688	; 0xb660
    9598:	f2c2 0304 	movt	r3, #8196	; 0x2004
    959c:	701a      	strb	r2, [r3, #0]
}
    959e:	46bd      	mov	sp, r7
    95a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    95a4:	4770      	bx	lr
    95a6:	bf00      	nop
    95a8:	00013af3 	.word	0x00013af3

000095ac <send_mode>:
void send_mode(void){  //5000ms
    95ac:	b480      	push	{r7}
    95ae:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 50 == 9) PERIODIC_SEND_PPRZ_MODE();}
    95b0:	f24b 6359 	movw	r3, #46681	; 0xb659
    95b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95b8:	781a      	ldrb	r2, [r3, #0]
    95ba:	f248 531f 	movw	r3, #34079	; 0x851f
    95be:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    95c2:	fba3 1302 	umull	r1, r3, r3, r2
    95c6:	091b      	lsrs	r3, r3, #4
    95c8:	2132      	movs	r1, #50	; 0x32
    95ca:	fb01 f303 	mul.w	r3, r1, r3
    95ce:	1ad3      	subs	r3, r2, r3
    95d0:	b2db      	uxtb	r3, r3
    95d2:	2b09      	cmp	r3, #9
    95d4:	f040 82ba 	bne.w	9b4c <send_mode+0x5a0>
    95d8:	f24b 6361 	movw	r3, #46689	; 0xb661
    95dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95e0:	781a      	ldrb	r2, [r3, #0]
    95e2:	f24b 6362 	movw	r3, #46690	; 0xb662
    95e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95ea:	781b      	ldrb	r3, [r3, #0]
    95ec:	b2db      	uxtb	r3, r3
    95ee:	429a      	cmp	r2, r3
    95f0:	d313      	bcc.n	961a <send_mode+0x6e>
    95f2:	f24b 6362 	movw	r3, #46690	; 0xb662
    95f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95fa:	781b      	ldrb	r3, [r3, #0]
    95fc:	b2db      	uxtb	r3, r3
    95fe:	461a      	mov	r2, r3
    9600:	f24b 6361 	movw	r3, #46689	; 0xb661
    9604:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9608:	781b      	ldrb	r3, [r3, #0]
    960a:	1ad3      	subs	r3, r2, r3
    960c:	33ff      	adds	r3, #255	; 0xff
    960e:	2b09      	cmp	r3, #9
    9610:	bfd4      	ite	le
    9612:	2300      	movle	r3, #0
    9614:	2301      	movgt	r3, #1
    9616:	b2db      	uxtb	r3, r3
    9618:	e011      	b.n	963e <send_mode+0x92>
    961a:	f24b 6362 	movw	r3, #46690	; 0xb662
    961e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9622:	781b      	ldrb	r3, [r3, #0]
    9624:	b2db      	uxtb	r3, r3
    9626:	461a      	mov	r2, r3
    9628:	f24b 6361 	movw	r3, #46689	; 0xb661
    962c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9630:	781b      	ldrb	r3, [r3, #0]
    9632:	1ad3      	subs	r3, r2, r3
    9634:	2b09      	cmp	r3, #9
    9636:	bfd4      	ite	le
    9638:	2300      	movle	r3, #0
    963a:	2301      	movgt	r3, #1
    963c:	b2db      	uxtb	r3, r3
    963e:	2b00      	cmp	r3, #0
    9640:	f000 8278 	beq.w	9b34 <send_mode+0x588>
    9644:	f24b 6361 	movw	r3, #46689	; 0xb661
    9648:	f2c2 0304 	movt	r3, #8196	; 0x2004
    964c:	781b      	ldrb	r3, [r3, #0]
    964e:	461a      	mov	r2, r3
    9650:	f24b 6364 	movw	r3, #46692	; 0xb664
    9654:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9658:	2105      	movs	r1, #5
    965a:	5499      	strb	r1, [r3, r2]
    965c:	f24b 6361 	movw	r3, #46689	; 0xb661
    9660:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9664:	781b      	ldrb	r3, [r3, #0]
    9666:	3301      	adds	r3, #1
    9668:	b2da      	uxtb	r2, r3
    966a:	f24b 6361 	movw	r3, #46689	; 0xb661
    966e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9672:	701a      	strb	r2, [r3, #0]
    9674:	f24b 6361 	movw	r3, #46689	; 0xb661
    9678:	f2c2 0304 	movt	r3, #8196	; 0x2004
    967c:	781b      	ldrb	r3, [r3, #0]
    967e:	2bff      	cmp	r3, #255	; 0xff
    9680:	d105      	bne.n	968e <send_mode+0xe2>
    9682:	f24b 6361 	movw	r3, #46689	; 0xb661
    9686:	f2c2 0304 	movt	r3, #8196	; 0x2004
    968a:	2200      	movs	r2, #0
    968c:	701a      	strb	r2, [r3, #0]
    968e:	f24b 6361 	movw	r3, #46689	; 0xb661
    9692:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9696:	781b      	ldrb	r3, [r3, #0]
    9698:	461a      	mov	r2, r3
    969a:	f24b 6364 	movw	r3, #46692	; 0xb664
    969e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96a2:	210b      	movs	r1, #11
    96a4:	5499      	strb	r1, [r3, r2]
    96a6:	f24b 6361 	movw	r3, #46689	; 0xb661
    96aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96ae:	781b      	ldrb	r3, [r3, #0]
    96b0:	3301      	adds	r3, #1
    96b2:	b2da      	uxtb	r2, r3
    96b4:	f24b 6361 	movw	r3, #46689	; 0xb661
    96b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96bc:	701a      	strb	r2, [r3, #0]
    96be:	f24b 6361 	movw	r3, #46689	; 0xb661
    96c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96c6:	781b      	ldrb	r3, [r3, #0]
    96c8:	2bff      	cmp	r3, #255	; 0xff
    96ca:	d105      	bne.n	96d8 <send_mode+0x12c>
    96cc:	f24b 6361 	movw	r3, #46689	; 0xb661
    96d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96d4:	2200      	movs	r2, #0
    96d6:	701a      	strb	r2, [r3, #0]
    96d8:	f24b 7365 	movw	r3, #46949	; 0xb765
    96dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96e0:	220b      	movs	r2, #11
    96e2:	701a      	strb	r2, [r3, #0]
    96e4:	f24b 7366 	movw	r3, #46950	; 0xb766
    96e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96ec:	220b      	movs	r2, #11
    96ee:	701a      	strb	r2, [r3, #0]
    96f0:	f24b 6361 	movw	r3, #46689	; 0xb661
    96f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96f8:	781b      	ldrb	r3, [r3, #0]
    96fa:	461a      	mov	r2, r3
    96fc:	f24b 6344 	movw	r3, #46660	; 0xb644
    9700:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9704:	7819      	ldrb	r1, [r3, #0]
    9706:	f24b 6364 	movw	r3, #46692	; 0xb664
    970a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    970e:	5499      	strb	r1, [r3, r2]
    9710:	f24b 7365 	movw	r3, #46949	; 0xb765
    9714:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9718:	781a      	ldrb	r2, [r3, #0]
    971a:	f24b 6344 	movw	r3, #46660	; 0xb644
    971e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9722:	781b      	ldrb	r3, [r3, #0]
    9724:	4413      	add	r3, r2
    9726:	b2da      	uxtb	r2, r3
    9728:	f24b 7365 	movw	r3, #46949	; 0xb765
    972c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9730:	701a      	strb	r2, [r3, #0]
    9732:	f24b 7366 	movw	r3, #46950	; 0xb766
    9736:	f2c2 0304 	movt	r3, #8196	; 0x2004
    973a:	781a      	ldrb	r2, [r3, #0]
    973c:	f24b 7365 	movw	r3, #46949	; 0xb765
    9740:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9744:	781b      	ldrb	r3, [r3, #0]
    9746:	4413      	add	r3, r2
    9748:	b2da      	uxtb	r2, r3
    974a:	f24b 7366 	movw	r3, #46950	; 0xb766
    974e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9752:	701a      	strb	r2, [r3, #0]
    9754:	f24b 6361 	movw	r3, #46689	; 0xb661
    9758:	f2c2 0304 	movt	r3, #8196	; 0x2004
    975c:	781b      	ldrb	r3, [r3, #0]
    975e:	3301      	adds	r3, #1
    9760:	b2da      	uxtb	r2, r3
    9762:	f24b 6361 	movw	r3, #46689	; 0xb661
    9766:	f2c2 0304 	movt	r3, #8196	; 0x2004
    976a:	701a      	strb	r2, [r3, #0]
    976c:	f24b 6361 	movw	r3, #46689	; 0xb661
    9770:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9774:	781b      	ldrb	r3, [r3, #0]
    9776:	2bff      	cmp	r3, #255	; 0xff
    9778:	d105      	bne.n	9786 <send_mode+0x1da>
    977a:	f24b 6361 	movw	r3, #46689	; 0xb661
    977e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9782:	2200      	movs	r2, #0
    9784:	701a      	strb	r2, [r3, #0]
    9786:	f24b 6361 	movw	r3, #46689	; 0xb661
    978a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    978e:	781b      	ldrb	r3, [r3, #0]
    9790:	461a      	mov	r2, r3
    9792:	f24b 6345 	movw	r3, #46661	; 0xb645
    9796:	f2c2 0304 	movt	r3, #8196	; 0x2004
    979a:	7819      	ldrb	r1, [r3, #0]
    979c:	f24b 6364 	movw	r3, #46692	; 0xb664
    97a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97a4:	5499      	strb	r1, [r3, r2]
    97a6:	f24b 7365 	movw	r3, #46949	; 0xb765
    97aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97ae:	781a      	ldrb	r2, [r3, #0]
    97b0:	f24b 6345 	movw	r3, #46661	; 0xb645
    97b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97b8:	781b      	ldrb	r3, [r3, #0]
    97ba:	4413      	add	r3, r2
    97bc:	b2da      	uxtb	r2, r3
    97be:	f24b 7365 	movw	r3, #46949	; 0xb765
    97c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97c6:	701a      	strb	r2, [r3, #0]
    97c8:	f24b 7366 	movw	r3, #46950	; 0xb766
    97cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97d0:	781a      	ldrb	r2, [r3, #0]
    97d2:	f24b 7365 	movw	r3, #46949	; 0xb765
    97d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97da:	781b      	ldrb	r3, [r3, #0]
    97dc:	4413      	add	r3, r2
    97de:	b2da      	uxtb	r2, r3
    97e0:	f24b 7366 	movw	r3, #46950	; 0xb766
    97e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97e8:	701a      	strb	r2, [r3, #0]
    97ea:	f24b 6361 	movw	r3, #46689	; 0xb661
    97ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97f2:	781b      	ldrb	r3, [r3, #0]
    97f4:	3301      	adds	r3, #1
    97f6:	b2da      	uxtb	r2, r3
    97f8:	f24b 6361 	movw	r3, #46689	; 0xb661
    97fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9800:	701a      	strb	r2, [r3, #0]
    9802:	f24b 6361 	movw	r3, #46689	; 0xb661
    9806:	f2c2 0304 	movt	r3, #8196	; 0x2004
    980a:	781b      	ldrb	r3, [r3, #0]
    980c:	2bff      	cmp	r3, #255	; 0xff
    980e:	d105      	bne.n	981c <send_mode+0x270>
    9810:	f24b 6361 	movw	r3, #46689	; 0xb661
    9814:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9818:	2200      	movs	r2, #0
    981a:	701a      	strb	r2, [r3, #0]
    981c:	f24b 6361 	movw	r3, #46689	; 0xb661
    9820:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9824:	781b      	ldrb	r3, [r3, #0]
    9826:	461a      	mov	r2, r3
    9828:	f64b 4374 	movw	r3, #48244	; 0xbc74
    982c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9830:	7819      	ldrb	r1, [r3, #0]
    9832:	f24b 6364 	movw	r3, #46692	; 0xb664
    9836:	f2c2 0304 	movt	r3, #8196	; 0x2004
    983a:	5499      	strb	r1, [r3, r2]
    983c:	f24b 7365 	movw	r3, #46949	; 0xb765
    9840:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9844:	781a      	ldrb	r2, [r3, #0]
    9846:	f64b 4374 	movw	r3, #48244	; 0xbc74
    984a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    984e:	781b      	ldrb	r3, [r3, #0]
    9850:	4413      	add	r3, r2
    9852:	b2da      	uxtb	r2, r3
    9854:	f24b 7365 	movw	r3, #46949	; 0xb765
    9858:	f2c2 0304 	movt	r3, #8196	; 0x2004
    985c:	701a      	strb	r2, [r3, #0]
    985e:	f24b 7366 	movw	r3, #46950	; 0xb766
    9862:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9866:	781a      	ldrb	r2, [r3, #0]
    9868:	f24b 7365 	movw	r3, #46949	; 0xb765
    986c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9870:	781b      	ldrb	r3, [r3, #0]
    9872:	4413      	add	r3, r2
    9874:	b2da      	uxtb	r2, r3
    9876:	f24b 7366 	movw	r3, #46950	; 0xb766
    987a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    987e:	701a      	strb	r2, [r3, #0]
    9880:	f24b 6361 	movw	r3, #46689	; 0xb661
    9884:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9888:	781b      	ldrb	r3, [r3, #0]
    988a:	3301      	adds	r3, #1
    988c:	b2da      	uxtb	r2, r3
    988e:	f24b 6361 	movw	r3, #46689	; 0xb661
    9892:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9896:	701a      	strb	r2, [r3, #0]
    9898:	f24b 6361 	movw	r3, #46689	; 0xb661
    989c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98a0:	781b      	ldrb	r3, [r3, #0]
    98a2:	2bff      	cmp	r3, #255	; 0xff
    98a4:	d105      	bne.n	98b2 <send_mode+0x306>
    98a6:	f24b 6361 	movw	r3, #46689	; 0xb661
    98aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98ae:	2200      	movs	r2, #0
    98b0:	701a      	strb	r2, [r3, #0]
    98b2:	f24b 6361 	movw	r3, #46689	; 0xb661
    98b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98ba:	781b      	ldrb	r3, [r3, #0]
    98bc:	461a      	mov	r2, r3
    98be:	f24b 634b 	movw	r3, #46667	; 0xb64b
    98c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98c6:	7819      	ldrb	r1, [r3, #0]
    98c8:	f24b 6364 	movw	r3, #46692	; 0xb664
    98cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98d0:	5499      	strb	r1, [r3, r2]
    98d2:	f24b 7365 	movw	r3, #46949	; 0xb765
    98d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98da:	781a      	ldrb	r2, [r3, #0]
    98dc:	f24b 634b 	movw	r3, #46667	; 0xb64b
    98e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98e4:	781b      	ldrb	r3, [r3, #0]
    98e6:	4413      	add	r3, r2
    98e8:	b2da      	uxtb	r2, r3
    98ea:	f24b 7365 	movw	r3, #46949	; 0xb765
    98ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98f2:	701a      	strb	r2, [r3, #0]
    98f4:	f24b 7366 	movw	r3, #46950	; 0xb766
    98f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98fc:	781a      	ldrb	r2, [r3, #0]
    98fe:	f24b 7365 	movw	r3, #46949	; 0xb765
    9902:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9906:	781b      	ldrb	r3, [r3, #0]
    9908:	4413      	add	r3, r2
    990a:	b2da      	uxtb	r2, r3
    990c:	f24b 7366 	movw	r3, #46950	; 0xb766
    9910:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9914:	701a      	strb	r2, [r3, #0]
    9916:	f24b 6361 	movw	r3, #46689	; 0xb661
    991a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    991e:	781b      	ldrb	r3, [r3, #0]
    9920:	3301      	adds	r3, #1
    9922:	b2da      	uxtb	r2, r3
    9924:	f24b 6361 	movw	r3, #46689	; 0xb661
    9928:	f2c2 0304 	movt	r3, #8196	; 0x2004
    992c:	701a      	strb	r2, [r3, #0]
    992e:	f24b 6361 	movw	r3, #46689	; 0xb661
    9932:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9936:	781b      	ldrb	r3, [r3, #0]
    9938:	2bff      	cmp	r3, #255	; 0xff
    993a:	d105      	bne.n	9948 <send_mode+0x39c>
    993c:	f24b 6361 	movw	r3, #46689	; 0xb661
    9940:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9944:	2200      	movs	r2, #0
    9946:	701a      	strb	r2, [r3, #0]
    9948:	f24b 6361 	movw	r3, #46689	; 0xb661
    994c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9950:	781b      	ldrb	r3, [r3, #0]
    9952:	461a      	mov	r2, r3
    9954:	f240 1338 	movw	r3, #312	; 0x138
    9958:	f2c2 0300 	movt	r3, #8192	; 0x2000
    995c:	7819      	ldrb	r1, [r3, #0]
    995e:	f24b 6364 	movw	r3, #46692	; 0xb664
    9962:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9966:	5499      	strb	r1, [r3, r2]
    9968:	f24b 7365 	movw	r3, #46949	; 0xb765
    996c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9970:	781a      	ldrb	r2, [r3, #0]
    9972:	f240 1338 	movw	r3, #312	; 0x138
    9976:	f2c2 0300 	movt	r3, #8192	; 0x2000
    997a:	781b      	ldrb	r3, [r3, #0]
    997c:	4413      	add	r3, r2
    997e:	b2da      	uxtb	r2, r3
    9980:	f24b 7365 	movw	r3, #46949	; 0xb765
    9984:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9988:	701a      	strb	r2, [r3, #0]
    998a:	f24b 7366 	movw	r3, #46950	; 0xb766
    998e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9992:	781a      	ldrb	r2, [r3, #0]
    9994:	f24b 7365 	movw	r3, #46949	; 0xb765
    9998:	f2c2 0304 	movt	r3, #8196	; 0x2004
    999c:	781b      	ldrb	r3, [r3, #0]
    999e:	4413      	add	r3, r2
    99a0:	b2da      	uxtb	r2, r3
    99a2:	f24b 7366 	movw	r3, #46950	; 0xb766
    99a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99aa:	701a      	strb	r2, [r3, #0]
    99ac:	f24b 6361 	movw	r3, #46689	; 0xb661
    99b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99b4:	781b      	ldrb	r3, [r3, #0]
    99b6:	3301      	adds	r3, #1
    99b8:	b2da      	uxtb	r2, r3
    99ba:	f24b 6361 	movw	r3, #46689	; 0xb661
    99be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99c2:	701a      	strb	r2, [r3, #0]
    99c4:	f24b 6361 	movw	r3, #46689	; 0xb661
    99c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99cc:	781b      	ldrb	r3, [r3, #0]
    99ce:	2bff      	cmp	r3, #255	; 0xff
    99d0:	d105      	bne.n	99de <send_mode+0x432>
    99d2:	f24b 6361 	movw	r3, #46689	; 0xb661
    99d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99da:	2200      	movs	r2, #0
    99dc:	701a      	strb	r2, [r3, #0]
    99de:	f24b 6361 	movw	r3, #46689	; 0xb661
    99e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99e6:	781b      	ldrb	r3, [r3, #0]
    99e8:	461a      	mov	r2, r3
    99ea:	f24b 7365 	movw	r3, #46949	; 0xb765
    99ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99f2:	7819      	ldrb	r1, [r3, #0]
    99f4:	f24b 6364 	movw	r3, #46692	; 0xb664
    99f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99fc:	5499      	strb	r1, [r3, r2]
    99fe:	f24b 6361 	movw	r3, #46689	; 0xb661
    9a02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a06:	781b      	ldrb	r3, [r3, #0]
    9a08:	3301      	adds	r3, #1
    9a0a:	b2da      	uxtb	r2, r3
    9a0c:	f24b 6361 	movw	r3, #46689	; 0xb661
    9a10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a14:	701a      	strb	r2, [r3, #0]
    9a16:	f24b 6361 	movw	r3, #46689	; 0xb661
    9a1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a1e:	781b      	ldrb	r3, [r3, #0]
    9a20:	2bff      	cmp	r3, #255	; 0xff
    9a22:	d105      	bne.n	9a30 <send_mode+0x484>
    9a24:	f24b 6361 	movw	r3, #46689	; 0xb661
    9a28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a2c:	2200      	movs	r2, #0
    9a2e:	701a      	strb	r2, [r3, #0]
    9a30:	f24b 6361 	movw	r3, #46689	; 0xb661
    9a34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a38:	781b      	ldrb	r3, [r3, #0]
    9a3a:	461a      	mov	r2, r3
    9a3c:	f24b 7366 	movw	r3, #46950	; 0xb766
    9a40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a44:	7819      	ldrb	r1, [r3, #0]
    9a46:	f24b 6364 	movw	r3, #46692	; 0xb664
    9a4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a4e:	5499      	strb	r1, [r3, r2]
    9a50:	f24b 6361 	movw	r3, #46689	; 0xb661
    9a54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a58:	781b      	ldrb	r3, [r3, #0]
    9a5a:	3301      	adds	r3, #1
    9a5c:	b2da      	uxtb	r2, r3
    9a5e:	f24b 6361 	movw	r3, #46689	; 0xb661
    9a62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a66:	701a      	strb	r2, [r3, #0]
    9a68:	f24b 6361 	movw	r3, #46689	; 0xb661
    9a6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a70:	781b      	ldrb	r3, [r3, #0]
    9a72:	2bff      	cmp	r3, #255	; 0xff
    9a74:	d105      	bne.n	9a82 <send_mode+0x4d6>
    9a76:	f24b 6361 	movw	r3, #46689	; 0xb661
    9a7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a7e:	2200      	movs	r2, #0
    9a80:	701a      	strb	r2, [r3, #0]
    9a82:	f248 0339 	movw	r3, #32825	; 0x8039
    9a86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a8a:	781b      	ldrb	r3, [r3, #0]
    9a8c:	b2db      	uxtb	r3, r3
    9a8e:	f003 0310 	and.w	r3, r3, #16
    9a92:	2b00      	cmp	r3, #0
    9a94:	d15a      	bne.n	9b4c <send_mode+0x5a0>
    9a96:	f24b 6362 	movw	r3, #46690	; 0xb662
    9a9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a9e:	781b      	ldrb	r3, [r3, #0]
    9aa0:	b2db      	uxtb	r3, r3
    9aa2:	461a      	mov	r2, r3
    9aa4:	f24b 6364 	movw	r3, #46692	; 0xb664
    9aa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9aac:	5c9a      	ldrb	r2, [r3, r2]
    9aae:	f24b 7363 	movw	r3, #46947	; 0xb763
    9ab2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ab6:	701a      	strb	r2, [r3, #0]
    9ab8:	f24b 7364 	movw	r3, #46948	; 0xb764
    9abc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ac0:	2200      	movs	r2, #0
    9ac2:	701a      	strb	r2, [r3, #0]
    9ac4:	f24b 6362 	movw	r3, #46690	; 0xb662
    9ac8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9acc:	781b      	ldrb	r3, [r3, #0]
    9ace:	b2db      	uxtb	r3, r3
    9ad0:	3301      	adds	r3, #1
    9ad2:	b2da      	uxtb	r2, r3
    9ad4:	f24b 6362 	movw	r3, #46690	; 0xb662
    9ad8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9adc:	701a      	strb	r2, [r3, #0]
    9ade:	f24b 6362 	movw	r3, #46690	; 0xb662
    9ae2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ae6:	781b      	ldrb	r3, [r3, #0]
    9ae8:	b2db      	uxtb	r3, r3
    9aea:	2bff      	cmp	r3, #255	; 0xff
    9aec:	d105      	bne.n	9afa <send_mode+0x54e>
    9aee:	f24b 6362 	movw	r3, #46690	; 0xb662
    9af2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9af6:	2200      	movs	r2, #0
    9af8:	701a      	strb	r2, [r3, #0]
    9afa:	f248 0338 	movw	r3, #32824	; 0x8038
    9afe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b02:	f248 0238 	movw	r2, #32824	; 0x8038
    9b06:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9b0a:	7812      	ldrb	r2, [r2, #0]
    9b0c:	b2d2      	uxtb	r2, r2
    9b0e:	f042 0201 	orr.w	r2, r2, #1
    9b12:	b2d2      	uxtb	r2, r2
    9b14:	701a      	strb	r2, [r3, #0]
    9b16:	f248 0339 	movw	r3, #32825	; 0x8039
    9b1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b1e:	f248 0239 	movw	r2, #32825	; 0x8039
    9b22:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9b26:	7812      	ldrb	r2, [r2, #0]
    9b28:	b2d2      	uxtb	r2, r2
    9b2a:	f042 0210 	orr.w	r2, r2, #16
    9b2e:	b2d2      	uxtb	r2, r2
    9b30:	701a      	strb	r2, [r3, #0]
    9b32:	e00b      	b.n	9b4c <send_mode+0x5a0>
    9b34:	f24b 6360 	movw	r3, #46688	; 0xb660
    9b38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b3c:	781b      	ldrb	r3, [r3, #0]
    9b3e:	3301      	adds	r3, #1
    9b40:	b2da      	uxtb	r2, r3
    9b42:	f24b 6360 	movw	r3, #46688	; 0xb660
    9b46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b4a:	701a      	strb	r2, [r3, #0]
}
    9b4c:	46bd      	mov	sp, r7
    9b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9b52:	4770      	bx	lr

00009b54 <send_debug>:
void send_debug(void){  //5000ms
    9b54:	b480      	push	{r7}
    9b56:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 50 == 29) PERIODIC_SEND_DEBUG();}
    9b58:	f24b 6359 	movw	r3, #46681	; 0xb659
    9b5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b60:	781a      	ldrb	r2, [r3, #0]
    9b62:	f248 531f 	movw	r3, #34079	; 0x851f
    9b66:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    9b6a:	fba3 1302 	umull	r1, r3, r3, r2
    9b6e:	091b      	lsrs	r3, r3, #4
    9b70:	2132      	movs	r1, #50	; 0x32
    9b72:	fb01 f303 	mul.w	r3, r1, r3
    9b76:	1ad3      	subs	r3, r2, r3
    9b78:	b2db      	uxtb	r3, r3
    9b7a:	2b1d      	cmp	r3, #29
    9b7c:	f040 82bb 	bne.w	a0f6 <send_debug+0x5a2>
    9b80:	f24b 6361 	movw	r3, #46689	; 0xb661
    9b84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b88:	781a      	ldrb	r2, [r3, #0]
    9b8a:	f24b 6362 	movw	r3, #46690	; 0xb662
    9b8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b92:	781b      	ldrb	r3, [r3, #0]
    9b94:	b2db      	uxtb	r3, r3
    9b96:	429a      	cmp	r2, r3
    9b98:	d313      	bcc.n	9bc2 <send_debug+0x6e>
    9b9a:	f24b 6362 	movw	r3, #46690	; 0xb662
    9b9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ba2:	781b      	ldrb	r3, [r3, #0]
    9ba4:	b2db      	uxtb	r3, r3
    9ba6:	461a      	mov	r2, r3
    9ba8:	f24b 6361 	movw	r3, #46689	; 0xb661
    9bac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bb0:	781b      	ldrb	r3, [r3, #0]
    9bb2:	1ad3      	subs	r3, r2, r3
    9bb4:	33ff      	adds	r3, #255	; 0xff
    9bb6:	2b09      	cmp	r3, #9
    9bb8:	bfd4      	ite	le
    9bba:	2300      	movle	r3, #0
    9bbc:	2301      	movgt	r3, #1
    9bbe:	b2db      	uxtb	r3, r3
    9bc0:	e011      	b.n	9be6 <send_debug+0x92>
    9bc2:	f24b 6362 	movw	r3, #46690	; 0xb662
    9bc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bca:	781b      	ldrb	r3, [r3, #0]
    9bcc:	b2db      	uxtb	r3, r3
    9bce:	461a      	mov	r2, r3
    9bd0:	f24b 6361 	movw	r3, #46689	; 0xb661
    9bd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bd8:	781b      	ldrb	r3, [r3, #0]
    9bda:	1ad3      	subs	r3, r2, r3
    9bdc:	2b09      	cmp	r3, #9
    9bde:	bfd4      	ite	le
    9be0:	2300      	movle	r3, #0
    9be2:	2301      	movgt	r3, #1
    9be4:	b2db      	uxtb	r3, r3
    9be6:	2b00      	cmp	r3, #0
    9be8:	f000 8279 	beq.w	a0de <send_debug+0x58a>
    9bec:	f24b 6361 	movw	r3, #46689	; 0xb661
    9bf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bf4:	781b      	ldrb	r3, [r3, #0]
    9bf6:	461a      	mov	r2, r3
    9bf8:	f24b 6364 	movw	r3, #46692	; 0xb664
    9bfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c00:	2105      	movs	r1, #5
    9c02:	5499      	strb	r1, [r3, r2]
    9c04:	f24b 6361 	movw	r3, #46689	; 0xb661
    9c08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c0c:	781b      	ldrb	r3, [r3, #0]
    9c0e:	3301      	adds	r3, #1
    9c10:	b2da      	uxtb	r2, r3
    9c12:	f24b 6361 	movw	r3, #46689	; 0xb661
    9c16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c1a:	701a      	strb	r2, [r3, #0]
    9c1c:	f24b 6361 	movw	r3, #46689	; 0xb661
    9c20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c24:	781b      	ldrb	r3, [r3, #0]
    9c26:	2bff      	cmp	r3, #255	; 0xff
    9c28:	d105      	bne.n	9c36 <send_debug+0xe2>
    9c2a:	f24b 6361 	movw	r3, #46689	; 0xb661
    9c2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c32:	2200      	movs	r2, #0
    9c34:	701a      	strb	r2, [r3, #0]
    9c36:	f24b 6361 	movw	r3, #46689	; 0xb661
    9c3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c3e:	781b      	ldrb	r3, [r3, #0]
    9c40:	461a      	mov	r2, r3
    9c42:	f24b 6364 	movw	r3, #46692	; 0xb664
    9c46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c4a:	210d      	movs	r1, #13
    9c4c:	5499      	strb	r1, [r3, r2]
    9c4e:	f24b 6361 	movw	r3, #46689	; 0xb661
    9c52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c56:	781b      	ldrb	r3, [r3, #0]
    9c58:	3301      	adds	r3, #1
    9c5a:	b2da      	uxtb	r2, r3
    9c5c:	f24b 6361 	movw	r3, #46689	; 0xb661
    9c60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c64:	701a      	strb	r2, [r3, #0]
    9c66:	f24b 6361 	movw	r3, #46689	; 0xb661
    9c6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c6e:	781b      	ldrb	r3, [r3, #0]
    9c70:	2bff      	cmp	r3, #255	; 0xff
    9c72:	d105      	bne.n	9c80 <send_debug+0x12c>
    9c74:	f24b 6361 	movw	r3, #46689	; 0xb661
    9c78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c7c:	2200      	movs	r2, #0
    9c7e:	701a      	strb	r2, [r3, #0]
    9c80:	f24b 7365 	movw	r3, #46949	; 0xb765
    9c84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c88:	220d      	movs	r2, #13
    9c8a:	701a      	strb	r2, [r3, #0]
    9c8c:	f24b 7366 	movw	r3, #46950	; 0xb766
    9c90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c94:	220d      	movs	r2, #13
    9c96:	701a      	strb	r2, [r3, #0]
    9c98:	f24b 6361 	movw	r3, #46689	; 0xb661
    9c9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ca0:	781b      	ldrb	r3, [r3, #0]
    9ca2:	461a      	mov	r2, r3
    9ca4:	f24b 7397 	movw	r3, #46999	; 0xb797
    9ca8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cac:	781b      	ldrb	r3, [r3, #0]
    9cae:	b2d9      	uxtb	r1, r3
    9cb0:	f24b 6364 	movw	r3, #46692	; 0xb664
    9cb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cb8:	5499      	strb	r1, [r3, r2]
    9cba:	f24b 7397 	movw	r3, #46999	; 0xb797
    9cbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cc2:	781a      	ldrb	r2, [r3, #0]
    9cc4:	f24b 7365 	movw	r3, #46949	; 0xb765
    9cc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ccc:	781b      	ldrb	r3, [r3, #0]
    9cce:	4413      	add	r3, r2
    9cd0:	b2da      	uxtb	r2, r3
    9cd2:	f24b 7365 	movw	r3, #46949	; 0xb765
    9cd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cda:	701a      	strb	r2, [r3, #0]
    9cdc:	f24b 7366 	movw	r3, #46950	; 0xb766
    9ce0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ce4:	781a      	ldrb	r2, [r3, #0]
    9ce6:	f24b 7365 	movw	r3, #46949	; 0xb765
    9cea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cee:	781b      	ldrb	r3, [r3, #0]
    9cf0:	4413      	add	r3, r2
    9cf2:	b2da      	uxtb	r2, r3
    9cf4:	f24b 7366 	movw	r3, #46950	; 0xb766
    9cf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cfc:	701a      	strb	r2, [r3, #0]
    9cfe:	f24b 6361 	movw	r3, #46689	; 0xb661
    9d02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d06:	781b      	ldrb	r3, [r3, #0]
    9d08:	3301      	adds	r3, #1
    9d0a:	b2da      	uxtb	r2, r3
    9d0c:	f24b 6361 	movw	r3, #46689	; 0xb661
    9d10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d14:	701a      	strb	r2, [r3, #0]
    9d16:	f24b 6361 	movw	r3, #46689	; 0xb661
    9d1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d1e:	781b      	ldrb	r3, [r3, #0]
    9d20:	2bff      	cmp	r3, #255	; 0xff
    9d22:	d105      	bne.n	9d30 <send_debug+0x1dc>
    9d24:	f24b 6361 	movw	r3, #46689	; 0xb661
    9d28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d2c:	2200      	movs	r2, #0
    9d2e:	701a      	strb	r2, [r3, #0]
    9d30:	f24b 6361 	movw	r3, #46689	; 0xb661
    9d34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d38:	781b      	ldrb	r3, [r3, #0]
    9d3a:	461a      	mov	r2, r3
    9d3c:	f24b 7398 	movw	r3, #47000	; 0xb798
    9d40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d44:	7819      	ldrb	r1, [r3, #0]
    9d46:	f24b 6364 	movw	r3, #46692	; 0xb664
    9d4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d4e:	5499      	strb	r1, [r3, r2]
    9d50:	f24b 7365 	movw	r3, #46949	; 0xb765
    9d54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d58:	781a      	ldrb	r2, [r3, #0]
    9d5a:	f24b 7398 	movw	r3, #47000	; 0xb798
    9d5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d62:	781b      	ldrb	r3, [r3, #0]
    9d64:	4413      	add	r3, r2
    9d66:	b2da      	uxtb	r2, r3
    9d68:	f24b 7365 	movw	r3, #46949	; 0xb765
    9d6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d70:	701a      	strb	r2, [r3, #0]
    9d72:	f24b 7366 	movw	r3, #46950	; 0xb766
    9d76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d7a:	781a      	ldrb	r2, [r3, #0]
    9d7c:	f24b 7365 	movw	r3, #46949	; 0xb765
    9d80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d84:	781b      	ldrb	r3, [r3, #0]
    9d86:	4413      	add	r3, r2
    9d88:	b2da      	uxtb	r2, r3
    9d8a:	f24b 7366 	movw	r3, #46950	; 0xb766
    9d8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d92:	701a      	strb	r2, [r3, #0]
    9d94:	f24b 6361 	movw	r3, #46689	; 0xb661
    9d98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d9c:	781b      	ldrb	r3, [r3, #0]
    9d9e:	3301      	adds	r3, #1
    9da0:	b2da      	uxtb	r2, r3
    9da2:	f24b 6361 	movw	r3, #46689	; 0xb661
    9da6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9daa:	701a      	strb	r2, [r3, #0]
    9dac:	f24b 6361 	movw	r3, #46689	; 0xb661
    9db0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9db4:	781b      	ldrb	r3, [r3, #0]
    9db6:	2bff      	cmp	r3, #255	; 0xff
    9db8:	d105      	bne.n	9dc6 <send_debug+0x272>
    9dba:	f24b 6361 	movw	r3, #46689	; 0xb661
    9dbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dc2:	2200      	movs	r2, #0
    9dc4:	701a      	strb	r2, [r3, #0]
    9dc6:	f24b 6361 	movw	r3, #46689	; 0xb661
    9dca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dce:	781b      	ldrb	r3, [r3, #0]
    9dd0:	461a      	mov	r2, r3
    9dd2:	f24b 6360 	movw	r3, #46688	; 0xb660
    9dd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dda:	7819      	ldrb	r1, [r3, #0]
    9ddc:	f24b 6364 	movw	r3, #46692	; 0xb664
    9de0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9de4:	5499      	strb	r1, [r3, r2]
    9de6:	f24b 7365 	movw	r3, #46949	; 0xb765
    9dea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dee:	781a      	ldrb	r2, [r3, #0]
    9df0:	f24b 6360 	movw	r3, #46688	; 0xb660
    9df4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9df8:	781b      	ldrb	r3, [r3, #0]
    9dfa:	4413      	add	r3, r2
    9dfc:	b2da      	uxtb	r2, r3
    9dfe:	f24b 7365 	movw	r3, #46949	; 0xb765
    9e02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e06:	701a      	strb	r2, [r3, #0]
    9e08:	f24b 7366 	movw	r3, #46950	; 0xb766
    9e0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e10:	781a      	ldrb	r2, [r3, #0]
    9e12:	f24b 7365 	movw	r3, #46949	; 0xb765
    9e16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e1a:	781b      	ldrb	r3, [r3, #0]
    9e1c:	4413      	add	r3, r2
    9e1e:	b2da      	uxtb	r2, r3
    9e20:	f24b 7366 	movw	r3, #46950	; 0xb766
    9e24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e28:	701a      	strb	r2, [r3, #0]
    9e2a:	f24b 6361 	movw	r3, #46689	; 0xb661
    9e2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e32:	781b      	ldrb	r3, [r3, #0]
    9e34:	3301      	adds	r3, #1
    9e36:	b2da      	uxtb	r2, r3
    9e38:	f24b 6361 	movw	r3, #46689	; 0xb661
    9e3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e40:	701a      	strb	r2, [r3, #0]
    9e42:	f24b 6361 	movw	r3, #46689	; 0xb661
    9e46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e4a:	781b      	ldrb	r3, [r3, #0]
    9e4c:	2bff      	cmp	r3, #255	; 0xff
    9e4e:	d105      	bne.n	9e5c <send_debug+0x308>
    9e50:	f24b 6361 	movw	r3, #46689	; 0xb661
    9e54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e58:	2200      	movs	r2, #0
    9e5a:	701a      	strb	r2, [r3, #0]
    9e5c:	f24b 6361 	movw	r3, #46689	; 0xb661
    9e60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e64:	781b      	ldrb	r3, [r3, #0]
    9e66:	461a      	mov	r2, r3
    9e68:	f64b 03ff 	movw	r3, #47359	; 0xb8ff
    9e6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e70:	7819      	ldrb	r1, [r3, #0]
    9e72:	f24b 6364 	movw	r3, #46692	; 0xb664
    9e76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e7a:	5499      	strb	r1, [r3, r2]
    9e7c:	f24b 7365 	movw	r3, #46949	; 0xb765
    9e80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e84:	781a      	ldrb	r2, [r3, #0]
    9e86:	f64b 03ff 	movw	r3, #47359	; 0xb8ff
    9e8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e8e:	781b      	ldrb	r3, [r3, #0]
    9e90:	4413      	add	r3, r2
    9e92:	b2da      	uxtb	r2, r3
    9e94:	f24b 7365 	movw	r3, #46949	; 0xb765
    9e98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e9c:	701a      	strb	r2, [r3, #0]
    9e9e:	f24b 7366 	movw	r3, #46950	; 0xb766
    9ea2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ea6:	781a      	ldrb	r2, [r3, #0]
    9ea8:	f24b 7365 	movw	r3, #46949	; 0xb765
    9eac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9eb0:	781b      	ldrb	r3, [r3, #0]
    9eb2:	4413      	add	r3, r2
    9eb4:	b2da      	uxtb	r2, r3
    9eb6:	f24b 7366 	movw	r3, #46950	; 0xb766
    9eba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ebe:	701a      	strb	r2, [r3, #0]
    9ec0:	f24b 6361 	movw	r3, #46689	; 0xb661
    9ec4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ec8:	781b      	ldrb	r3, [r3, #0]
    9eca:	3301      	adds	r3, #1
    9ecc:	b2da      	uxtb	r2, r3
    9ece:	f24b 6361 	movw	r3, #46689	; 0xb661
    9ed2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ed6:	701a      	strb	r2, [r3, #0]
    9ed8:	f24b 6361 	movw	r3, #46689	; 0xb661
    9edc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ee0:	781b      	ldrb	r3, [r3, #0]
    9ee2:	2bff      	cmp	r3, #255	; 0xff
    9ee4:	d105      	bne.n	9ef2 <send_debug+0x39e>
    9ee6:	f24b 6361 	movw	r3, #46689	; 0xb661
    9eea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9eee:	2200      	movs	r2, #0
    9ef0:	701a      	strb	r2, [r3, #0]
    9ef2:	f24b 6361 	movw	r3, #46689	; 0xb661
    9ef6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9efa:	781b      	ldrb	r3, [r3, #0]
    9efc:	461a      	mov	r2, r3
    9efe:	f24b 634c 	movw	r3, #46668	; 0xb64c
    9f02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f06:	7819      	ldrb	r1, [r3, #0]
    9f08:	f24b 6364 	movw	r3, #46692	; 0xb664
    9f0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f10:	5499      	strb	r1, [r3, r2]
    9f12:	f24b 7365 	movw	r3, #46949	; 0xb765
    9f16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f1a:	781a      	ldrb	r2, [r3, #0]
    9f1c:	f24b 634c 	movw	r3, #46668	; 0xb64c
    9f20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f24:	781b      	ldrb	r3, [r3, #0]
    9f26:	4413      	add	r3, r2
    9f28:	b2da      	uxtb	r2, r3
    9f2a:	f24b 7365 	movw	r3, #46949	; 0xb765
    9f2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f32:	701a      	strb	r2, [r3, #0]
    9f34:	f24b 7366 	movw	r3, #46950	; 0xb766
    9f38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f3c:	781a      	ldrb	r2, [r3, #0]
    9f3e:	f24b 7365 	movw	r3, #46949	; 0xb765
    9f42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f46:	781b      	ldrb	r3, [r3, #0]
    9f48:	4413      	add	r3, r2
    9f4a:	b2da      	uxtb	r2, r3
    9f4c:	f24b 7366 	movw	r3, #46950	; 0xb766
    9f50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f54:	701a      	strb	r2, [r3, #0]
    9f56:	f24b 6361 	movw	r3, #46689	; 0xb661
    9f5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f5e:	781b      	ldrb	r3, [r3, #0]
    9f60:	3301      	adds	r3, #1
    9f62:	b2da      	uxtb	r2, r3
    9f64:	f24b 6361 	movw	r3, #46689	; 0xb661
    9f68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f6c:	701a      	strb	r2, [r3, #0]
    9f6e:	f24b 6361 	movw	r3, #46689	; 0xb661
    9f72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f76:	781b      	ldrb	r3, [r3, #0]
    9f78:	2bff      	cmp	r3, #255	; 0xff
    9f7a:	d105      	bne.n	9f88 <send_debug+0x434>
    9f7c:	f24b 6361 	movw	r3, #46689	; 0xb661
    9f80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f84:	2200      	movs	r2, #0
    9f86:	701a      	strb	r2, [r3, #0]
    9f88:	f24b 6361 	movw	r3, #46689	; 0xb661
    9f8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f90:	781b      	ldrb	r3, [r3, #0]
    9f92:	461a      	mov	r2, r3
    9f94:	f24b 7365 	movw	r3, #46949	; 0xb765
    9f98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f9c:	7819      	ldrb	r1, [r3, #0]
    9f9e:	f24b 6364 	movw	r3, #46692	; 0xb664
    9fa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fa6:	5499      	strb	r1, [r3, r2]
    9fa8:	f24b 6361 	movw	r3, #46689	; 0xb661
    9fac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fb0:	781b      	ldrb	r3, [r3, #0]
    9fb2:	3301      	adds	r3, #1
    9fb4:	b2da      	uxtb	r2, r3
    9fb6:	f24b 6361 	movw	r3, #46689	; 0xb661
    9fba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fbe:	701a      	strb	r2, [r3, #0]
    9fc0:	f24b 6361 	movw	r3, #46689	; 0xb661
    9fc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fc8:	781b      	ldrb	r3, [r3, #0]
    9fca:	2bff      	cmp	r3, #255	; 0xff
    9fcc:	d105      	bne.n	9fda <send_debug+0x486>
    9fce:	f24b 6361 	movw	r3, #46689	; 0xb661
    9fd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fd6:	2200      	movs	r2, #0
    9fd8:	701a      	strb	r2, [r3, #0]
    9fda:	f24b 6361 	movw	r3, #46689	; 0xb661
    9fde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fe2:	781b      	ldrb	r3, [r3, #0]
    9fe4:	461a      	mov	r2, r3
    9fe6:	f24b 7366 	movw	r3, #46950	; 0xb766
    9fea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fee:	7819      	ldrb	r1, [r3, #0]
    9ff0:	f24b 6364 	movw	r3, #46692	; 0xb664
    9ff4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ff8:	5499      	strb	r1, [r3, r2]
    9ffa:	f24b 6361 	movw	r3, #46689	; 0xb661
    9ffe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a002:	781b      	ldrb	r3, [r3, #0]
    a004:	3301      	adds	r3, #1
    a006:	b2da      	uxtb	r2, r3
    a008:	f24b 6361 	movw	r3, #46689	; 0xb661
    a00c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a010:	701a      	strb	r2, [r3, #0]
    a012:	f24b 6361 	movw	r3, #46689	; 0xb661
    a016:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a01a:	781b      	ldrb	r3, [r3, #0]
    a01c:	2bff      	cmp	r3, #255	; 0xff
    a01e:	d105      	bne.n	a02c <send_debug+0x4d8>
    a020:	f24b 6361 	movw	r3, #46689	; 0xb661
    a024:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a028:	2200      	movs	r2, #0
    a02a:	701a      	strb	r2, [r3, #0]
    a02c:	f248 0339 	movw	r3, #32825	; 0x8039
    a030:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a034:	781b      	ldrb	r3, [r3, #0]
    a036:	b2db      	uxtb	r3, r3
    a038:	f003 0310 	and.w	r3, r3, #16
    a03c:	2b00      	cmp	r3, #0
    a03e:	d15a      	bne.n	a0f6 <send_debug+0x5a2>
    a040:	f24b 6362 	movw	r3, #46690	; 0xb662
    a044:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a048:	781b      	ldrb	r3, [r3, #0]
    a04a:	b2db      	uxtb	r3, r3
    a04c:	461a      	mov	r2, r3
    a04e:	f24b 6364 	movw	r3, #46692	; 0xb664
    a052:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a056:	5c9a      	ldrb	r2, [r3, r2]
    a058:	f24b 7363 	movw	r3, #46947	; 0xb763
    a05c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a060:	701a      	strb	r2, [r3, #0]
    a062:	f24b 7364 	movw	r3, #46948	; 0xb764
    a066:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a06a:	2200      	movs	r2, #0
    a06c:	701a      	strb	r2, [r3, #0]
    a06e:	f24b 6362 	movw	r3, #46690	; 0xb662
    a072:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a076:	781b      	ldrb	r3, [r3, #0]
    a078:	b2db      	uxtb	r3, r3
    a07a:	3301      	adds	r3, #1
    a07c:	b2da      	uxtb	r2, r3
    a07e:	f24b 6362 	movw	r3, #46690	; 0xb662
    a082:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a086:	701a      	strb	r2, [r3, #0]
    a088:	f24b 6362 	movw	r3, #46690	; 0xb662
    a08c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a090:	781b      	ldrb	r3, [r3, #0]
    a092:	b2db      	uxtb	r3, r3
    a094:	2bff      	cmp	r3, #255	; 0xff
    a096:	d105      	bne.n	a0a4 <send_debug+0x550>
    a098:	f24b 6362 	movw	r3, #46690	; 0xb662
    a09c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0a0:	2200      	movs	r2, #0
    a0a2:	701a      	strb	r2, [r3, #0]
    a0a4:	f248 0338 	movw	r3, #32824	; 0x8038
    a0a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0ac:	f248 0238 	movw	r2, #32824	; 0x8038
    a0b0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    a0b4:	7812      	ldrb	r2, [r2, #0]
    a0b6:	b2d2      	uxtb	r2, r2
    a0b8:	f042 0201 	orr.w	r2, r2, #1
    a0bc:	b2d2      	uxtb	r2, r2
    a0be:	701a      	strb	r2, [r3, #0]
    a0c0:	f248 0339 	movw	r3, #32825	; 0x8039
    a0c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0c8:	f248 0239 	movw	r2, #32825	; 0x8039
    a0cc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    a0d0:	7812      	ldrb	r2, [r2, #0]
    a0d2:	b2d2      	uxtb	r2, r2
    a0d4:	f042 0210 	orr.w	r2, r2, #16
    a0d8:	b2d2      	uxtb	r2, r2
    a0da:	701a      	strb	r2, [r3, #0]
    a0dc:	e00b      	b.n	a0f6 <send_debug+0x5a2>
    a0de:	f24b 6360 	movw	r3, #46688	; 0xb660
    a0e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0e6:	781b      	ldrb	r3, [r3, #0]
    a0e8:	3301      	adds	r3, #1
    a0ea:	b2da      	uxtb	r2, r3
    a0ec:	f24b 6360 	movw	r3, #46688	; 0xb660
    a0f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0f4:	701a      	strb	r2, [r3, #0]
}
    a0f6:	46bd      	mov	sp, r7
    a0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    a0fc:	4770      	bx	lr
    a0fe:	bf00      	nop

0000a100 <send_nav_ref>:
void send_nav_ref(void){  //10000ms
    a100:	b480      	push	{r7}
    a102:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 100 == 49) PERIODIC_SEND_NAVIGATION_REF();}
    a104:	f24b 6359 	movw	r3, #46681	; 0xb659
    a108:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a10c:	781a      	ldrb	r2, [r3, #0]
    a10e:	f248 531f 	movw	r3, #34079	; 0x851f
    a112:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    a116:	fba3 1302 	umull	r1, r3, r3, r2
    a11a:	095b      	lsrs	r3, r3, #5
    a11c:	2164      	movs	r1, #100	; 0x64
    a11e:	fb01 f303 	mul.w	r3, r1, r3
    a122:	1ad3      	subs	r3, r2, r3
    a124:	b2db      	uxtb	r3, r3
    a126:	2b31      	cmp	r3, #49	; 0x31
    a128:	f040 8395 	bne.w	a856 <send_nav_ref+0x756>
    a12c:	f24b 6361 	movw	r3, #46689	; 0xb661
    a130:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a134:	781a      	ldrb	r2, [r3, #0]
    a136:	f24b 6362 	movw	r3, #46690	; 0xb662
    a13a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a13e:	781b      	ldrb	r3, [r3, #0]
    a140:	b2db      	uxtb	r3, r3
    a142:	429a      	cmp	r2, r3
    a144:	d313      	bcc.n	a16e <send_nav_ref+0x6e>
    a146:	f24b 6362 	movw	r3, #46690	; 0xb662
    a14a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a14e:	781b      	ldrb	r3, [r3, #0]
    a150:	b2db      	uxtb	r3, r3
    a152:	461a      	mov	r2, r3
    a154:	f24b 6361 	movw	r3, #46689	; 0xb661
    a158:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a15c:	781b      	ldrb	r3, [r3, #0]
    a15e:	1ad3      	subs	r3, r2, r3
    a160:	33ff      	adds	r3, #255	; 0xff
    a162:	2b0c      	cmp	r3, #12
    a164:	bfd4      	ite	le
    a166:	2300      	movle	r3, #0
    a168:	2301      	movgt	r3, #1
    a16a:	b2db      	uxtb	r3, r3
    a16c:	e011      	b.n	a192 <send_nav_ref+0x92>
    a16e:	f24b 6362 	movw	r3, #46690	; 0xb662
    a172:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a176:	781b      	ldrb	r3, [r3, #0]
    a178:	b2db      	uxtb	r3, r3
    a17a:	461a      	mov	r2, r3
    a17c:	f24b 6361 	movw	r3, #46689	; 0xb661
    a180:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a184:	781b      	ldrb	r3, [r3, #0]
    a186:	1ad3      	subs	r3, r2, r3
    a188:	2b0c      	cmp	r3, #12
    a18a:	bfd4      	ite	le
    a18c:	2300      	movle	r3, #0
    a18e:	2301      	movgt	r3, #1
    a190:	b2db      	uxtb	r3, r3
    a192:	2b00      	cmp	r3, #0
    a194:	f000 8353 	beq.w	a83e <send_nav_ref+0x73e>
    a198:	f24b 6361 	movw	r3, #46689	; 0xb661
    a19c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1a0:	781b      	ldrb	r3, [r3, #0]
    a1a2:	461a      	mov	r2, r3
    a1a4:	f24b 6364 	movw	r3, #46692	; 0xb664
    a1a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1ac:	2105      	movs	r1, #5
    a1ae:	5499      	strb	r1, [r3, r2]
    a1b0:	f24b 6361 	movw	r3, #46689	; 0xb661
    a1b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1b8:	781b      	ldrb	r3, [r3, #0]
    a1ba:	3301      	adds	r3, #1
    a1bc:	b2da      	uxtb	r2, r3
    a1be:	f24b 6361 	movw	r3, #46689	; 0xb661
    a1c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1c6:	701a      	strb	r2, [r3, #0]
    a1c8:	f24b 6361 	movw	r3, #46689	; 0xb661
    a1cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1d0:	781b      	ldrb	r3, [r3, #0]
    a1d2:	2bff      	cmp	r3, #255	; 0xff
    a1d4:	d105      	bne.n	a1e2 <send_nav_ref+0xe2>
    a1d6:	f24b 6361 	movw	r3, #46689	; 0xb661
    a1da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1de:	2200      	movs	r2, #0
    a1e0:	701a      	strb	r2, [r3, #0]
    a1e2:	f24b 6361 	movw	r3, #46689	; 0xb661
    a1e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1ea:	781b      	ldrb	r3, [r3, #0]
    a1ec:	461a      	mov	r2, r3
    a1ee:	f24b 6364 	movw	r3, #46692	; 0xb664
    a1f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1f6:	2109      	movs	r1, #9
    a1f8:	5499      	strb	r1, [r3, r2]
    a1fa:	f24b 6361 	movw	r3, #46689	; 0xb661
    a1fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a202:	781b      	ldrb	r3, [r3, #0]
    a204:	3301      	adds	r3, #1
    a206:	b2da      	uxtb	r2, r3
    a208:	f24b 6361 	movw	r3, #46689	; 0xb661
    a20c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a210:	701a      	strb	r2, [r3, #0]
    a212:	f24b 6361 	movw	r3, #46689	; 0xb661
    a216:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a21a:	781b      	ldrb	r3, [r3, #0]
    a21c:	2bff      	cmp	r3, #255	; 0xff
    a21e:	d105      	bne.n	a22c <send_nav_ref+0x12c>
    a220:	f24b 6361 	movw	r3, #46689	; 0xb661
    a224:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a228:	2200      	movs	r2, #0
    a22a:	701a      	strb	r2, [r3, #0]
    a22c:	f24b 7365 	movw	r3, #46949	; 0xb765
    a230:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a234:	2209      	movs	r2, #9
    a236:	701a      	strb	r2, [r3, #0]
    a238:	f24b 7366 	movw	r3, #46950	; 0xb766
    a23c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a240:	2209      	movs	r2, #9
    a242:	701a      	strb	r2, [r3, #0]
    a244:	f24b 6361 	movw	r3, #46689	; 0xb661
    a248:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a24c:	781b      	ldrb	r3, [r3, #0]
    a24e:	461a      	mov	r2, r3
    a250:	f643 23e8 	movw	r3, #15080	; 0x3ae8
    a254:	f2c0 0301 	movt	r3, #1
    a258:	7819      	ldrb	r1, [r3, #0]
    a25a:	f24b 6364 	movw	r3, #46692	; 0xb664
    a25e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a262:	5499      	strb	r1, [r3, r2]
    a264:	f643 23e8 	movw	r3, #15080	; 0x3ae8
    a268:	f2c0 0301 	movt	r3, #1
    a26c:	781a      	ldrb	r2, [r3, #0]
    a26e:	f24b 7365 	movw	r3, #46949	; 0xb765
    a272:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a276:	781b      	ldrb	r3, [r3, #0]
    a278:	4413      	add	r3, r2
    a27a:	b2da      	uxtb	r2, r3
    a27c:	f24b 7365 	movw	r3, #46949	; 0xb765
    a280:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a284:	701a      	strb	r2, [r3, #0]
    a286:	f24b 7366 	movw	r3, #46950	; 0xb766
    a28a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a28e:	781a      	ldrb	r2, [r3, #0]
    a290:	f24b 7365 	movw	r3, #46949	; 0xb765
    a294:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a298:	781b      	ldrb	r3, [r3, #0]
    a29a:	4413      	add	r3, r2
    a29c:	b2da      	uxtb	r2, r3
    a29e:	f24b 7366 	movw	r3, #46950	; 0xb766
    a2a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2a6:	701a      	strb	r2, [r3, #0]
    a2a8:	f24b 6361 	movw	r3, #46689	; 0xb661
    a2ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2b0:	781b      	ldrb	r3, [r3, #0]
    a2b2:	3301      	adds	r3, #1
    a2b4:	b2da      	uxtb	r2, r3
    a2b6:	f24b 6361 	movw	r3, #46689	; 0xb661
    a2ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2be:	701a      	strb	r2, [r3, #0]
    a2c0:	f24b 6361 	movw	r3, #46689	; 0xb661
    a2c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2c8:	781b      	ldrb	r3, [r3, #0]
    a2ca:	2bff      	cmp	r3, #255	; 0xff
    a2cc:	d105      	bne.n	a2da <send_nav_ref+0x1da>
    a2ce:	f24b 6361 	movw	r3, #46689	; 0xb661
    a2d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2d6:	2200      	movs	r2, #0
    a2d8:	701a      	strb	r2, [r3, #0]
    a2da:	f24b 6361 	movw	r3, #46689	; 0xb661
    a2de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2e2:	781b      	ldrb	r3, [r3, #0]
    a2e4:	461a      	mov	r2, r3
    a2e6:	f643 23e8 	movw	r3, #15080	; 0x3ae8
    a2ea:	f2c0 0301 	movt	r3, #1
    a2ee:	7859      	ldrb	r1, [r3, #1]
    a2f0:	f24b 6364 	movw	r3, #46692	; 0xb664
    a2f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2f8:	5499      	strb	r1, [r3, r2]
    a2fa:	4bd2      	ldr	r3, [pc, #840]	; (a644 <send_nav_ref+0x544>)
    a2fc:	781a      	ldrb	r2, [r3, #0]
    a2fe:	f24b 7365 	movw	r3, #46949	; 0xb765
    a302:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a306:	781b      	ldrb	r3, [r3, #0]
    a308:	4413      	add	r3, r2
    a30a:	b2da      	uxtb	r2, r3
    a30c:	f24b 7365 	movw	r3, #46949	; 0xb765
    a310:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a314:	701a      	strb	r2, [r3, #0]
    a316:	f24b 7366 	movw	r3, #46950	; 0xb766
    a31a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a31e:	781a      	ldrb	r2, [r3, #0]
    a320:	f24b 7365 	movw	r3, #46949	; 0xb765
    a324:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a328:	781b      	ldrb	r3, [r3, #0]
    a32a:	4413      	add	r3, r2
    a32c:	b2da      	uxtb	r2, r3
    a32e:	f24b 7366 	movw	r3, #46950	; 0xb766
    a332:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a336:	701a      	strb	r2, [r3, #0]
    a338:	f24b 6361 	movw	r3, #46689	; 0xb661
    a33c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a340:	781b      	ldrb	r3, [r3, #0]
    a342:	3301      	adds	r3, #1
    a344:	b2da      	uxtb	r2, r3
    a346:	f24b 6361 	movw	r3, #46689	; 0xb661
    a34a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a34e:	701a      	strb	r2, [r3, #0]
    a350:	f24b 6361 	movw	r3, #46689	; 0xb661
    a354:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a358:	781b      	ldrb	r3, [r3, #0]
    a35a:	2bff      	cmp	r3, #255	; 0xff
    a35c:	d105      	bne.n	a36a <send_nav_ref+0x26a>
    a35e:	f24b 6361 	movw	r3, #46689	; 0xb661
    a362:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a366:	2200      	movs	r2, #0
    a368:	701a      	strb	r2, [r3, #0]
    a36a:	f24b 6361 	movw	r3, #46689	; 0xb661
    a36e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a372:	781b      	ldrb	r3, [r3, #0]
    a374:	461a      	mov	r2, r3
    a376:	f643 23e8 	movw	r3, #15080	; 0x3ae8
    a37a:	f2c0 0301 	movt	r3, #1
    a37e:	7899      	ldrb	r1, [r3, #2]
    a380:	f24b 6364 	movw	r3, #46692	; 0xb664
    a384:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a388:	5499      	strb	r1, [r3, r2]
    a38a:	4baf      	ldr	r3, [pc, #700]	; (a648 <send_nav_ref+0x548>)
    a38c:	781a      	ldrb	r2, [r3, #0]
    a38e:	f24b 7365 	movw	r3, #46949	; 0xb765
    a392:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a396:	781b      	ldrb	r3, [r3, #0]
    a398:	4413      	add	r3, r2
    a39a:	b2da      	uxtb	r2, r3
    a39c:	f24b 7365 	movw	r3, #46949	; 0xb765
    a3a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3a4:	701a      	strb	r2, [r3, #0]
    a3a6:	f24b 7366 	movw	r3, #46950	; 0xb766
    a3aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3ae:	781a      	ldrb	r2, [r3, #0]
    a3b0:	f24b 7365 	movw	r3, #46949	; 0xb765
    a3b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3b8:	781b      	ldrb	r3, [r3, #0]
    a3ba:	4413      	add	r3, r2
    a3bc:	b2da      	uxtb	r2, r3
    a3be:	f24b 7366 	movw	r3, #46950	; 0xb766
    a3c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3c6:	701a      	strb	r2, [r3, #0]
    a3c8:	f24b 6361 	movw	r3, #46689	; 0xb661
    a3cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3d0:	781b      	ldrb	r3, [r3, #0]
    a3d2:	3301      	adds	r3, #1
    a3d4:	b2da      	uxtb	r2, r3
    a3d6:	f24b 6361 	movw	r3, #46689	; 0xb661
    a3da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3de:	701a      	strb	r2, [r3, #0]
    a3e0:	f24b 6361 	movw	r3, #46689	; 0xb661
    a3e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3e8:	781b      	ldrb	r3, [r3, #0]
    a3ea:	2bff      	cmp	r3, #255	; 0xff
    a3ec:	d105      	bne.n	a3fa <send_nav_ref+0x2fa>
    a3ee:	f24b 6361 	movw	r3, #46689	; 0xb661
    a3f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3f6:	2200      	movs	r2, #0
    a3f8:	701a      	strb	r2, [r3, #0]
    a3fa:	f24b 6361 	movw	r3, #46689	; 0xb661
    a3fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a402:	781b      	ldrb	r3, [r3, #0]
    a404:	461a      	mov	r2, r3
    a406:	f643 23e8 	movw	r3, #15080	; 0x3ae8
    a40a:	f2c0 0301 	movt	r3, #1
    a40e:	78d9      	ldrb	r1, [r3, #3]
    a410:	f24b 6364 	movw	r3, #46692	; 0xb664
    a414:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a418:	5499      	strb	r1, [r3, r2]
    a41a:	4b8c      	ldr	r3, [pc, #560]	; (a64c <send_nav_ref+0x54c>)
    a41c:	781a      	ldrb	r2, [r3, #0]
    a41e:	f24b 7365 	movw	r3, #46949	; 0xb765
    a422:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a426:	781b      	ldrb	r3, [r3, #0]
    a428:	4413      	add	r3, r2
    a42a:	b2da      	uxtb	r2, r3
    a42c:	f24b 7365 	movw	r3, #46949	; 0xb765
    a430:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a434:	701a      	strb	r2, [r3, #0]
    a436:	f24b 7366 	movw	r3, #46950	; 0xb766
    a43a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a43e:	781a      	ldrb	r2, [r3, #0]
    a440:	f24b 7365 	movw	r3, #46949	; 0xb765
    a444:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a448:	781b      	ldrb	r3, [r3, #0]
    a44a:	4413      	add	r3, r2
    a44c:	b2da      	uxtb	r2, r3
    a44e:	f24b 7366 	movw	r3, #46950	; 0xb766
    a452:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a456:	701a      	strb	r2, [r3, #0]
    a458:	f24b 6361 	movw	r3, #46689	; 0xb661
    a45c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a460:	781b      	ldrb	r3, [r3, #0]
    a462:	3301      	adds	r3, #1
    a464:	b2da      	uxtb	r2, r3
    a466:	f24b 6361 	movw	r3, #46689	; 0xb661
    a46a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a46e:	701a      	strb	r2, [r3, #0]
    a470:	f24b 6361 	movw	r3, #46689	; 0xb661
    a474:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a478:	781b      	ldrb	r3, [r3, #0]
    a47a:	2bff      	cmp	r3, #255	; 0xff
    a47c:	d105      	bne.n	a48a <send_nav_ref+0x38a>
    a47e:	f24b 6361 	movw	r3, #46689	; 0xb661
    a482:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a486:	2200      	movs	r2, #0
    a488:	701a      	strb	r2, [r3, #0]
    a48a:	f24b 6361 	movw	r3, #46689	; 0xb661
    a48e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a492:	781b      	ldrb	r3, [r3, #0]
    a494:	461a      	mov	r2, r3
    a496:	f643 23ec 	movw	r3, #15084	; 0x3aec
    a49a:	f2c0 0301 	movt	r3, #1
    a49e:	7819      	ldrb	r1, [r3, #0]
    a4a0:	f24b 6364 	movw	r3, #46692	; 0xb664
    a4a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4a8:	5499      	strb	r1, [r3, r2]
    a4aa:	f643 23ec 	movw	r3, #15084	; 0x3aec
    a4ae:	f2c0 0301 	movt	r3, #1
    a4b2:	781a      	ldrb	r2, [r3, #0]
    a4b4:	f24b 7365 	movw	r3, #46949	; 0xb765
    a4b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4bc:	781b      	ldrb	r3, [r3, #0]
    a4be:	4413      	add	r3, r2
    a4c0:	b2da      	uxtb	r2, r3
    a4c2:	f24b 7365 	movw	r3, #46949	; 0xb765
    a4c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4ca:	701a      	strb	r2, [r3, #0]
    a4cc:	f24b 7366 	movw	r3, #46950	; 0xb766
    a4d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4d4:	781a      	ldrb	r2, [r3, #0]
    a4d6:	f24b 7365 	movw	r3, #46949	; 0xb765
    a4da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4de:	781b      	ldrb	r3, [r3, #0]
    a4e0:	4413      	add	r3, r2
    a4e2:	b2da      	uxtb	r2, r3
    a4e4:	f24b 7366 	movw	r3, #46950	; 0xb766
    a4e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4ec:	701a      	strb	r2, [r3, #0]
    a4ee:	f24b 6361 	movw	r3, #46689	; 0xb661
    a4f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4f6:	781b      	ldrb	r3, [r3, #0]
    a4f8:	3301      	adds	r3, #1
    a4fa:	b2da      	uxtb	r2, r3
    a4fc:	f24b 6361 	movw	r3, #46689	; 0xb661
    a500:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a504:	701a      	strb	r2, [r3, #0]
    a506:	f24b 6361 	movw	r3, #46689	; 0xb661
    a50a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a50e:	781b      	ldrb	r3, [r3, #0]
    a510:	2bff      	cmp	r3, #255	; 0xff
    a512:	d105      	bne.n	a520 <send_nav_ref+0x420>
    a514:	f24b 6361 	movw	r3, #46689	; 0xb661
    a518:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a51c:	2200      	movs	r2, #0
    a51e:	701a      	strb	r2, [r3, #0]
    a520:	f24b 6361 	movw	r3, #46689	; 0xb661
    a524:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a528:	781b      	ldrb	r3, [r3, #0]
    a52a:	461a      	mov	r2, r3
    a52c:	f643 23ec 	movw	r3, #15084	; 0x3aec
    a530:	f2c0 0301 	movt	r3, #1
    a534:	7859      	ldrb	r1, [r3, #1]
    a536:	f24b 6364 	movw	r3, #46692	; 0xb664
    a53a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a53e:	5499      	strb	r1, [r3, r2]
    a540:	4b43      	ldr	r3, [pc, #268]	; (a650 <send_nav_ref+0x550>)
    a542:	781a      	ldrb	r2, [r3, #0]
    a544:	f24b 7365 	movw	r3, #46949	; 0xb765
    a548:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a54c:	781b      	ldrb	r3, [r3, #0]
    a54e:	4413      	add	r3, r2
    a550:	b2da      	uxtb	r2, r3
    a552:	f24b 7365 	movw	r3, #46949	; 0xb765
    a556:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a55a:	701a      	strb	r2, [r3, #0]
    a55c:	f24b 7366 	movw	r3, #46950	; 0xb766
    a560:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a564:	781a      	ldrb	r2, [r3, #0]
    a566:	f24b 7365 	movw	r3, #46949	; 0xb765
    a56a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a56e:	781b      	ldrb	r3, [r3, #0]
    a570:	4413      	add	r3, r2
    a572:	b2da      	uxtb	r2, r3
    a574:	f24b 7366 	movw	r3, #46950	; 0xb766
    a578:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a57c:	701a      	strb	r2, [r3, #0]
    a57e:	f24b 6361 	movw	r3, #46689	; 0xb661
    a582:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a586:	781b      	ldrb	r3, [r3, #0]
    a588:	3301      	adds	r3, #1
    a58a:	b2da      	uxtb	r2, r3
    a58c:	f24b 6361 	movw	r3, #46689	; 0xb661
    a590:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a594:	701a      	strb	r2, [r3, #0]
    a596:	f24b 6361 	movw	r3, #46689	; 0xb661
    a59a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a59e:	781b      	ldrb	r3, [r3, #0]
    a5a0:	2bff      	cmp	r3, #255	; 0xff
    a5a2:	d105      	bne.n	a5b0 <send_nav_ref+0x4b0>
    a5a4:	f24b 6361 	movw	r3, #46689	; 0xb661
    a5a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5ac:	2200      	movs	r2, #0
    a5ae:	701a      	strb	r2, [r3, #0]
    a5b0:	f24b 6361 	movw	r3, #46689	; 0xb661
    a5b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5b8:	781b      	ldrb	r3, [r3, #0]
    a5ba:	461a      	mov	r2, r3
    a5bc:	f643 23ec 	movw	r3, #15084	; 0x3aec
    a5c0:	f2c0 0301 	movt	r3, #1
    a5c4:	7899      	ldrb	r1, [r3, #2]
    a5c6:	f24b 6364 	movw	r3, #46692	; 0xb664
    a5ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5ce:	5499      	strb	r1, [r3, r2]
    a5d0:	4b20      	ldr	r3, [pc, #128]	; (a654 <send_nav_ref+0x554>)
    a5d2:	781a      	ldrb	r2, [r3, #0]
    a5d4:	f24b 7365 	movw	r3, #46949	; 0xb765
    a5d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5dc:	781b      	ldrb	r3, [r3, #0]
    a5de:	4413      	add	r3, r2
    a5e0:	b2da      	uxtb	r2, r3
    a5e2:	f24b 7365 	movw	r3, #46949	; 0xb765
    a5e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5ea:	701a      	strb	r2, [r3, #0]
    a5ec:	f24b 7366 	movw	r3, #46950	; 0xb766
    a5f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5f4:	781a      	ldrb	r2, [r3, #0]
    a5f6:	f24b 7365 	movw	r3, #46949	; 0xb765
    a5fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5fe:	781b      	ldrb	r3, [r3, #0]
    a600:	4413      	add	r3, r2
    a602:	b2da      	uxtb	r2, r3
    a604:	f24b 7366 	movw	r3, #46950	; 0xb766
    a608:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a60c:	701a      	strb	r2, [r3, #0]
    a60e:	f24b 6361 	movw	r3, #46689	; 0xb661
    a612:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a616:	781b      	ldrb	r3, [r3, #0]
    a618:	3301      	adds	r3, #1
    a61a:	b2da      	uxtb	r2, r3
    a61c:	f24b 6361 	movw	r3, #46689	; 0xb661
    a620:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a624:	701a      	strb	r2, [r3, #0]
    a626:	f24b 6361 	movw	r3, #46689	; 0xb661
    a62a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a62e:	781b      	ldrb	r3, [r3, #0]
    a630:	2bff      	cmp	r3, #255	; 0xff
    a632:	d111      	bne.n	a658 <send_nav_ref+0x558>
    a634:	f24b 6361 	movw	r3, #46689	; 0xb661
    a638:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a63c:	2200      	movs	r2, #0
    a63e:	701a      	strb	r2, [r3, #0]
    a640:	e00a      	b.n	a658 <send_nav_ref+0x558>
    a642:	bf00      	nop
    a644:	00013ae9 	.word	0x00013ae9
    a648:	00013aea 	.word	0x00013aea
    a64c:	00013aeb 	.word	0x00013aeb
    a650:	00013aed 	.word	0x00013aed
    a654:	00013aee 	.word	0x00013aee
    a658:	f24b 6361 	movw	r3, #46689	; 0xb661
    a65c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a660:	781b      	ldrb	r3, [r3, #0]
    a662:	461a      	mov	r2, r3
    a664:	f643 23ec 	movw	r3, #15084	; 0x3aec
    a668:	f2c0 0301 	movt	r3, #1
    a66c:	78d9      	ldrb	r1, [r3, #3]
    a66e:	f24b 6364 	movw	r3, #46692	; 0xb664
    a672:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a676:	5499      	strb	r1, [r3, r2]
    a678:	4b79      	ldr	r3, [pc, #484]	; (a860 <send_nav_ref+0x760>)
    a67a:	781a      	ldrb	r2, [r3, #0]
    a67c:	f24b 7365 	movw	r3, #46949	; 0xb765
    a680:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a684:	781b      	ldrb	r3, [r3, #0]
    a686:	4413      	add	r3, r2
    a688:	b2da      	uxtb	r2, r3
    a68a:	f24b 7365 	movw	r3, #46949	; 0xb765
    a68e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a692:	701a      	strb	r2, [r3, #0]
    a694:	f24b 7366 	movw	r3, #46950	; 0xb766
    a698:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a69c:	781a      	ldrb	r2, [r3, #0]
    a69e:	f24b 7365 	movw	r3, #46949	; 0xb765
    a6a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6a6:	781b      	ldrb	r3, [r3, #0]
    a6a8:	4413      	add	r3, r2
    a6aa:	b2da      	uxtb	r2, r3
    a6ac:	f24b 7366 	movw	r3, #46950	; 0xb766
    a6b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6b4:	701a      	strb	r2, [r3, #0]
    a6b6:	f24b 6361 	movw	r3, #46689	; 0xb661
    a6ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6be:	781b      	ldrb	r3, [r3, #0]
    a6c0:	3301      	adds	r3, #1
    a6c2:	b2da      	uxtb	r2, r3
    a6c4:	f24b 6361 	movw	r3, #46689	; 0xb661
    a6c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6cc:	701a      	strb	r2, [r3, #0]
    a6ce:	f24b 6361 	movw	r3, #46689	; 0xb661
    a6d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6d6:	781b      	ldrb	r3, [r3, #0]
    a6d8:	2bff      	cmp	r3, #255	; 0xff
    a6da:	d105      	bne.n	a6e8 <send_nav_ref+0x5e8>
    a6dc:	f24b 6361 	movw	r3, #46689	; 0xb661
    a6e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6e4:	2200      	movs	r2, #0
    a6e6:	701a      	strb	r2, [r3, #0]
    a6e8:	f24b 6361 	movw	r3, #46689	; 0xb661
    a6ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6f0:	781b      	ldrb	r3, [r3, #0]
    a6f2:	461a      	mov	r2, r3
    a6f4:	f24b 7365 	movw	r3, #46949	; 0xb765
    a6f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6fc:	7819      	ldrb	r1, [r3, #0]
    a6fe:	f24b 6364 	movw	r3, #46692	; 0xb664
    a702:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a706:	5499      	strb	r1, [r3, r2]
    a708:	f24b 6361 	movw	r3, #46689	; 0xb661
    a70c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a710:	781b      	ldrb	r3, [r3, #0]
    a712:	3301      	adds	r3, #1
    a714:	b2da      	uxtb	r2, r3
    a716:	f24b 6361 	movw	r3, #46689	; 0xb661
    a71a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a71e:	701a      	strb	r2, [r3, #0]
    a720:	f24b 6361 	movw	r3, #46689	; 0xb661
    a724:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a728:	781b      	ldrb	r3, [r3, #0]
    a72a:	2bff      	cmp	r3, #255	; 0xff
    a72c:	d105      	bne.n	a73a <send_nav_ref+0x63a>
    a72e:	f24b 6361 	movw	r3, #46689	; 0xb661
    a732:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a736:	2200      	movs	r2, #0
    a738:	701a      	strb	r2, [r3, #0]
    a73a:	f24b 6361 	movw	r3, #46689	; 0xb661
    a73e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a742:	781b      	ldrb	r3, [r3, #0]
    a744:	461a      	mov	r2, r3
    a746:	f24b 7366 	movw	r3, #46950	; 0xb766
    a74a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a74e:	7819      	ldrb	r1, [r3, #0]
    a750:	f24b 6364 	movw	r3, #46692	; 0xb664
    a754:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a758:	5499      	strb	r1, [r3, r2]
    a75a:	f24b 6361 	movw	r3, #46689	; 0xb661
    a75e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a762:	781b      	ldrb	r3, [r3, #0]
    a764:	3301      	adds	r3, #1
    a766:	b2da      	uxtb	r2, r3
    a768:	f24b 6361 	movw	r3, #46689	; 0xb661
    a76c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a770:	701a      	strb	r2, [r3, #0]
    a772:	f24b 6361 	movw	r3, #46689	; 0xb661
    a776:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a77a:	781b      	ldrb	r3, [r3, #0]
    a77c:	2bff      	cmp	r3, #255	; 0xff
    a77e:	d105      	bne.n	a78c <send_nav_ref+0x68c>
    a780:	f24b 6361 	movw	r3, #46689	; 0xb661
    a784:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a788:	2200      	movs	r2, #0
    a78a:	701a      	strb	r2, [r3, #0]
    a78c:	f248 0339 	movw	r3, #32825	; 0x8039
    a790:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a794:	781b      	ldrb	r3, [r3, #0]
    a796:	b2db      	uxtb	r3, r3
    a798:	f003 0310 	and.w	r3, r3, #16
    a79c:	2b00      	cmp	r3, #0
    a79e:	d15a      	bne.n	a856 <send_nav_ref+0x756>
    a7a0:	f24b 6362 	movw	r3, #46690	; 0xb662
    a7a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7a8:	781b      	ldrb	r3, [r3, #0]
    a7aa:	b2db      	uxtb	r3, r3
    a7ac:	461a      	mov	r2, r3
    a7ae:	f24b 6364 	movw	r3, #46692	; 0xb664
    a7b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7b6:	5c9a      	ldrb	r2, [r3, r2]
    a7b8:	f24b 7363 	movw	r3, #46947	; 0xb763
    a7bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7c0:	701a      	strb	r2, [r3, #0]
    a7c2:	f24b 7364 	movw	r3, #46948	; 0xb764
    a7c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7ca:	2200      	movs	r2, #0
    a7cc:	701a      	strb	r2, [r3, #0]
    a7ce:	f24b 6362 	movw	r3, #46690	; 0xb662
    a7d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7d6:	781b      	ldrb	r3, [r3, #0]
    a7d8:	b2db      	uxtb	r3, r3
    a7da:	3301      	adds	r3, #1
    a7dc:	b2da      	uxtb	r2, r3
    a7de:	f24b 6362 	movw	r3, #46690	; 0xb662
    a7e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7e6:	701a      	strb	r2, [r3, #0]
    a7e8:	f24b 6362 	movw	r3, #46690	; 0xb662
    a7ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7f0:	781b      	ldrb	r3, [r3, #0]
    a7f2:	b2db      	uxtb	r3, r3
    a7f4:	2bff      	cmp	r3, #255	; 0xff
    a7f6:	d105      	bne.n	a804 <send_nav_ref+0x704>
    a7f8:	f24b 6362 	movw	r3, #46690	; 0xb662
    a7fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a800:	2200      	movs	r2, #0
    a802:	701a      	strb	r2, [r3, #0]
    a804:	f248 0338 	movw	r3, #32824	; 0x8038
    a808:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a80c:	f248 0238 	movw	r2, #32824	; 0x8038
    a810:	f2c2 0200 	movt	r2, #8192	; 0x2000
    a814:	7812      	ldrb	r2, [r2, #0]
    a816:	b2d2      	uxtb	r2, r2
    a818:	f042 0201 	orr.w	r2, r2, #1
    a81c:	b2d2      	uxtb	r2, r2
    a81e:	701a      	strb	r2, [r3, #0]
    a820:	f248 0339 	movw	r3, #32825	; 0x8039
    a824:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a828:	f248 0239 	movw	r2, #32825	; 0x8039
    a82c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    a830:	7812      	ldrb	r2, [r2, #0]
    a832:	b2d2      	uxtb	r2, r2
    a834:	f042 0210 	orr.w	r2, r2, #16
    a838:	b2d2      	uxtb	r2, r2
    a83a:	701a      	strb	r2, [r3, #0]
    a83c:	e00b      	b.n	a856 <send_nav_ref+0x756>
    a83e:	f24b 6360 	movw	r3, #46688	; 0xb660
    a842:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a846:	781b      	ldrb	r3, [r3, #0]
    a848:	3301      	adds	r3, #1
    a84a:	b2da      	uxtb	r2, r3
    a84c:	f24b 6360 	movw	r3, #46688	; 0xb660
    a850:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a854:	701a      	strb	r2, [r3, #0]
  //vPrintString("S_13 reporting_task end!\n\r");
}
    a856:	46bd      	mov	sp, r7
    a858:	f85d 7b04 	ldr.w	r7, [sp], #4
    a85c:	4770      	bx	lr
    a85e:	bf00      	nop
    a860:	00013aef 	.word	0x00013aef

0000a864 <reporting_task>:

void reporting_task()
{
    a864:	b580      	push	{r7, lr}
    a866:	af00      	add	r7, sp, #0
    send_boot();
    a868:	f7fa faf8 	bl	4e5c <send_boot>
    send_attitude();
    a86c:	f7fb fac6 	bl	5dfc <send_attitude>
    send_adc();
    a870:	f7fb ffb8 	bl	67e4 <send_adc>
    send_settings();
    a874:	f7fc fa3e 	bl	6cf4 <send_settings>
    send_desired();
    a878:	f7fc fe40 	bl	74fc <send_desired>
    send_bat();
    a87c:	f7fd fd6e 	bl	835c <send_bat>
    send_climb();
    a880:	f7fe f922 	bl	8ac8 <send_climb>
    send_mode();
    a884:	f7fe fe92 	bl	95ac <send_mode>
    send_debug();
    a888:	f7ff f964 	bl	9b54 <send_debug>
    send_nav_ref();
    a88c:	f7ff fc38 	bl	a100 <send_nav_ref>
}
    a890:	bd80      	pop	{r7, pc}
    a892:	bf00      	nop

0000a894 <inflight_calib_mode_update>:

/** \fn inline uint8_t inflight_calib_mode_update ( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
inline uint8_t inflight_calib_mode_update ( void ) {
    a894:	b480      	push	{r7}
    a896:	b083      	sub	sp, #12
    a898:	af00      	add	r7, sp, #0
  ModeUpdate(inflight_calib_mode, IF_CALIB_MODE_OF_PULSE(from_fbw.channels[RADIO_CALIB]));
    a89a:	f24b 7368 	movw	r3, #46952	; 0xb768
    a89e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8a2:	8a1b      	ldrh	r3, [r3, #16]
    a8a4:	b21b      	sxth	r3, r3
    a8a6:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
    a8aa:	db0d      	blt.n	a8c8 <inflight_calib_mode_update+0x34>
    a8ac:	f24b 7368 	movw	r3, #46952	; 0xb768
    a8b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8b4:	8a1b      	ldrh	r3, [r3, #16]
    a8b6:	b21a      	sxth	r2, r3
    a8b8:	f640 437f 	movw	r3, #3199	; 0xc7f
    a8bc:	429a      	cmp	r2, r3
    a8be:	bfd4      	ite	le
    a8c0:	2300      	movle	r3, #0
    a8c2:	2301      	movgt	r3, #1
    a8c4:	b2db      	uxtb	r3, r3
    a8c6:	e000      	b.n	a8ca <inflight_calib_mode_update+0x36>
    a8c8:	2302      	movs	r3, #2
    a8ca:	71fb      	strb	r3, [r7, #7]
    a8cc:	f64b 4374 	movw	r3, #48244	; 0xbc74
    a8d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8d4:	781b      	ldrb	r3, [r3, #0]
    a8d6:	79fa      	ldrb	r2, [r7, #7]
    a8d8:	429a      	cmp	r2, r3
    a8da:	d007      	beq.n	a8ec <inflight_calib_mode_update+0x58>
    a8dc:	f64b 4374 	movw	r3, #48244	; 0xbc74
    a8e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8e4:	79fa      	ldrb	r2, [r7, #7]
    a8e6:	701a      	strb	r2, [r3, #0]
    a8e8:	2301      	movs	r3, #1
    a8ea:	e000      	b.n	a8ee <inflight_calib_mode_update+0x5a>
    a8ec:	2300      	movs	r3, #0
}
    a8ee:	4618      	mov	r0, r3
    a8f0:	370c      	adds	r7, #12
    a8f2:	46bd      	mov	sp, r7
    a8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    a8f8:	4770      	bx	lr
    a8fa:	bf00      	nop

0000a8fc <radio_control_task>:


/** \fn inline void radio_control_task( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
void radio_control_task( void ) {
    a8fc:	b580      	push	{r7, lr}
    a8fe:	b082      	sub	sp, #8
    a900:	af00      	add	r7, sp, #0
  bool_t calib_mode_changed;
	//vPrintString("S_3 radio_control_task start! \n\r"); //SunnyBeike
    //add by wanbo
    link_fbw_receive_valid = 1;
    a902:	f24b 7396 	movw	r3, #46998	; 0xb796
    a906:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a90a:	2201      	movs	r2, #1
    a90c:	701a      	strb	r2, [r3, #0]
  if (link_fbw_receive_valid) {
    a90e:	f24b 7396 	movw	r3, #46998	; 0xb796
    a912:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a916:	781b      	ldrb	r3, [r3, #0]
    a918:	b2db      	uxtb	r3, r3
    a91a:	2b00      	cmp	r3, #0
    a91c:	f000 80df 	beq.w	aade <radio_control_task+0x1e2>
    uint8_t mode_changed = FALSE;
    a920:	2300      	movs	r3, #0
    a922:	71fb      	strb	r3, [r7, #7]
    copy_from_to_fbw();
    a924:	f7fa fa84 	bl	4e30 <copy_from_to_fbw>
    //if ((bit_is_set(from_fbw.status, RADIO_REALLY_LOST) && (pprz_mode == PPRZ_MODE_AUTO1 || pprz_mode == PPRZ_MODE_MANUAL)) || too_far_from_home) 
    {
      pprz_mode = PPRZ_MODE_HOME;
    a928:	f24b 6344 	movw	r3, #46660	; 0xb644
    a92c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a930:	2203      	movs	r2, #3
    a932:	701a      	strb	r2, [r3, #0]
      mode_changed = TRUE;
    a934:	2301      	movs	r3, #1
    a936:	71fb      	strb	r3, [r7, #7]
    }
    // modified by wanbo
    //if (bit_is_set(from_fbw.status, AVERAGED_CHANNELS_SENT)) 
    {
      bool_t pprz_mode_changed = pprz_mode_update();
    a938:	f7fa f954 	bl	4be4 <pprz_mode_update>
    a93c:	4603      	mov	r3, r0
    a93e:	71bb      	strb	r3, [r7, #6]
      mode_changed |= pprz_mode_changed;
    a940:	79fa      	ldrb	r2, [r7, #7]
    a942:	79bb      	ldrb	r3, [r7, #6]
    a944:	4313      	orrs	r3, r2
    a946:	71fb      	strb	r3, [r7, #7]
#ifdef RADIO_LLS
      mode_changed |= ir_estim_mode_update();
    a948:	f7fa f998 	bl	4c7c <ir_estim_mode_update>
    a94c:	4603      	mov	r3, r0
    a94e:	461a      	mov	r2, r3
    a950:	79fb      	ldrb	r3, [r7, #7]
    a952:	4313      	orrs	r3, r2
    a954:	71fb      	strb	r3, [r7, #7]
#endif
#ifdef RADIO_CALIB
      calib_mode_changed = inflight_calib_mode_update();
    a956:	f7ff ff9d 	bl	a894 <inflight_calib_mode_update>
    a95a:	4603      	mov	r3, r0
    a95c:	717b      	strb	r3, [r7, #5]
      inflight_calib(calib_mode_changed || pprz_mode_changed);
    a95e:	797b      	ldrb	r3, [r7, #5]
    a960:	2b00      	cmp	r3, #0
    a962:	d102      	bne.n	a96a <radio_control_task+0x6e>
    a964:	79bb      	ldrb	r3, [r7, #6]
    a966:	2b00      	cmp	r3, #0
    a968:	d001      	beq.n	a96e <radio_control_task+0x72>
    a96a:	2301      	movs	r3, #1
    a96c:	e000      	b.n	a970 <radio_control_task+0x74>
    a96e:	2300      	movs	r3, #0
    a970:	b2db      	uxtb	r3, r3
    a972:	4618      	mov	r0, r3
    a974:	f005 ff80 	bl	10878 <inflight_calib>
      mode_changed |= calib_mode_changed;
    a978:	79fa      	ldrb	r2, [r7, #7]
    a97a:	797b      	ldrb	r3, [r7, #5]
    a97c:	4313      	orrs	r3, r2
    a97e:	71fb      	strb	r3, [r7, #7]
#endif
    }
    mode_changed |= mcu1_status_update();
    a980:	f7fa f9a4 	bl	4ccc <mcu1_status_update>
    a984:	4603      	mov	r3, r0
    a986:	461a      	mov	r2, r3
    a988:	79fb      	ldrb	r3, [r7, #7]
    a98a:	4313      	orrs	r3, r2
    a98c:	71fb      	strb	r3, [r7, #7]
    // add by wanbo
    mode_changed = 1;
    a98e:	2301      	movs	r3, #1
    a990:	71fb      	strb	r3, [r7, #7]
    if ( mode_changed )
    a992:	79fb      	ldrb	r3, [r7, #7]
    a994:	2b00      	cmp	r3, #0
    a996:	d06a      	beq.n	aa6e <radio_control_task+0x172>
      //DOWNLINK_SEND_PPRZ_MODE(&pprz_mode, &vertical_mode, &inflight_calib_mode, &mcu1_status, &ir_estim_mode);
      
    // add by wanbo
    //if (pprz_mode == PPRZ_MODE_AUTO1) 
    {
      desired_roll = FLOAT_OF_PPRZ(from_fbw.channels[RADIO_ROLL], 0., -0.6);
    a998:	f24b 7368 	movw	r3, #46952	; 0xb768
    a99c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9a0:	885b      	ldrh	r3, [r3, #2]
    a9a2:	b21b      	sxth	r3, r3
    a9a4:	4618      	mov	r0, r3
    a9a6:	f008 fd23 	bl	133f0 <__aeabi_i2f>
    a9aa:	4603      	mov	r3, r0
    a9ac:	4618      	mov	r0, r3
    a9ae:	f04f 0100 	mov.w	r1, #0
    a9b2:	f2c4 6116 	movt	r1, #17942	; 0x4616
    a9b6:	f008 fe23 	bl	13600 <__aeabi_fdiv>
    a9ba:	4603      	mov	r3, r0
    a9bc:	4618      	mov	r0, r3
    a9be:	f008 f8d7 	bl	12b70 <__aeabi_f2d>
    a9c2:	4602      	mov	r2, r0
    a9c4:	460b      	mov	r3, r1
    a9c6:	4610      	mov	r0, r2
    a9c8:	4619      	mov	r1, r3
    a9ca:	a347      	add	r3, pc, #284	; (adr r3, aae8 <radio_control_task+0x1ec>)
    a9cc:	e9d3 2300 	ldrd	r2, r3, [r3]
    a9d0:	f008 f922 	bl	12c18 <__aeabi_dmul>
    a9d4:	4602      	mov	r2, r0
    a9d6:	460b      	mov	r3, r1
    a9d8:	4610      	mov	r0, r2
    a9da:	4619      	mov	r1, r3
    a9dc:	f04f 0200 	mov.w	r2, #0
    a9e0:	f04f 0300 	mov.w	r3, #0
    a9e4:	f007 ff66 	bl	128b4 <__adddf3>
    a9e8:	4602      	mov	r2, r0
    a9ea:	460b      	mov	r3, r1
    a9ec:	4610      	mov	r0, r2
    a9ee:	4619      	mov	r1, r3
    a9f0:	f008 fbf4 	bl	131dc <__aeabi_d2f>
    a9f4:	4602      	mov	r2, r0
    a9f6:	f64b 138c 	movw	r3, #47500	; 0xb98c
    a9fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9fe:	601a      	str	r2, [r3, #0]
      desired_pitch = FLOAT_OF_PPRZ(from_fbw.channels[RADIO_PITCH], 0., 0.5);
    aa00:	f24b 7368 	movw	r3, #46952	; 0xb768
    aa04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa08:	889b      	ldrh	r3, [r3, #4]
    aa0a:	b21b      	sxth	r3, r3
    aa0c:	4618      	mov	r0, r3
    aa0e:	f008 fcef 	bl	133f0 <__aeabi_i2f>
    aa12:	4603      	mov	r3, r0
    aa14:	4618      	mov	r0, r3
    aa16:	f04f 0100 	mov.w	r1, #0
    aa1a:	f2c4 6116 	movt	r1, #17942	; 0x4616
    aa1e:	f008 fdef 	bl	13600 <__aeabi_fdiv>
    aa22:	4603      	mov	r3, r0
    aa24:	4618      	mov	r0, r3
    aa26:	f008 f8a3 	bl	12b70 <__aeabi_f2d>
    aa2a:	4602      	mov	r2, r0
    aa2c:	460b      	mov	r3, r1
    aa2e:	4610      	mov	r0, r2
    aa30:	4619      	mov	r1, r3
    aa32:	f04f 0200 	mov.w	r2, #0
    aa36:	f04f 0300 	mov.w	r3, #0
    aa3a:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
    aa3e:	f008 f8eb 	bl	12c18 <__aeabi_dmul>
    aa42:	4602      	mov	r2, r0
    aa44:	460b      	mov	r3, r1
    aa46:	4610      	mov	r0, r2
    aa48:	4619      	mov	r1, r3
    aa4a:	f04f 0200 	mov.w	r2, #0
    aa4e:	f04f 0300 	mov.w	r3, #0
    aa52:	f007 ff2f 	bl	128b4 <__adddf3>
    aa56:	4602      	mov	r2, r0
    aa58:	460b      	mov	r3, r1
    aa5a:	4610      	mov	r0, r2
    aa5c:	4619      	mov	r1, r3
    aa5e:	f008 fbbd 	bl	131dc <__aeabi_d2f>
    aa62:	4602      	mov	r2, r0
    aa64:	f64b 1390 	movw	r3, #47504	; 0xb990
    aa68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa6c:	601a      	str	r2, [r3, #0]
    } // else asynchronously set by course_pid_run()

    // add by wanbo
   // if (pprz_mode == PPRZ_MODE_MANUAL || pprz_mode == PPRZ_MODE_AUTO1) 
    {
      desired_gaz = from_fbw.channels[RADIO_THROTTLE];
    aa6e:	f24b 7368 	movw	r3, #46952	; 0xb768
    aa72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa76:	881a      	ldrh	r2, [r3, #0]
    aa78:	f64b 1394 	movw	r3, #47508	; 0xb994
    aa7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa80:	801a      	strh	r2, [r3, #0]
      pitch_pgain = PITCH_PGAIN * ( 1 - 1. / 3. * from_fbw.channels[RADIO_THROTTLE] / MAX_PPRZ);
#endif /* ANTON_MAGICAL_MISTERY_GAINS */
    }
    // else asynchronously set by climb_pid_run();

    mcu1_ppm_cpt = from_fbw.ppm_cpt;
    aa82:	f24b 7368 	movw	r3, #46952	; 0xb768
    aa86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa8a:	7c9a      	ldrb	r2, [r3, #18]
    aa8c:	f24b 634c 	movw	r3, #46668	; 0xb64c
    aa90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa94:	701a      	strb	r2, [r3, #0]
    vsupply = from_fbw.vsupply;
    aa96:	f24b 7368 	movw	r3, #46952	; 0xb768
    aa9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa9e:	7d5a      	ldrb	r2, [r3, #21]
    aaa0:	f24b 634a 	movw	r3, #46666	; 0xb64a
    aaa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aaa8:	701a      	strb	r2, [r3, #0]

    events_update();
    aaaa:	f7fa f93f 	bl	4d2c <events_update>

    // add by wanbo
    //if (!estimator_flight_time) 
    {
      ground_calibrate();
    aaae:	f7fa f84f 	bl	4b50 <ground_calibrate>
      if (pprz_mode == PPRZ_MODE_AUTO2 && from_fbw.channels[RADIO_THROTTLE] > GAZ_THRESHOLD_TAKEOFF) {
    aab2:	f24b 6344 	movw	r3, #46660	; 0xb644
    aab6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aaba:	781b      	ldrb	r3, [r3, #0]
    aabc:	2b02      	cmp	r3, #2
    aabe:	d10e      	bne.n	aade <radio_control_task+0x1e2>
    aac0:	f24b 7368 	movw	r3, #46952	; 0xb768
    aac4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aac8:	881b      	ldrh	r3, [r3, #0]
    aaca:	b21b      	sxth	r3, r3
    aacc:	f5b3 5f07 	cmp.w	r3, #8640	; 0x21c0
    aad0:	dd05      	ble.n	aade <radio_control_task+0x1e2>
	launch = TRUE;
    aad2:	f24b 6358 	movw	r3, #46680	; 0xb658
    aad6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aada:	2201      	movs	r2, #1
    aadc:	701a      	strb	r2, [r3, #0]
      }
    }
  }

	//vPrintString("S_3 radio_control_task end! \n\r"); //SunnyBeike
}
    aade:	3708      	adds	r7, #8
    aae0:	46bd      	mov	sp, r7
    aae2:	bd80      	pop	{r7, pc}
    aae4:	f3af 8000 	nop.w
    aae8:	33333333 	.word	0x33333333
    aaec:	bfe33333 	.word	0xbfe33333

0000aaf0 <navigation_update>:

/** \fn void navigation_task( void )
 *  \brief Compute desired_course
 */
void navigation_update( void ) {
    aaf0:	b580      	push	{r7, lr}
    aaf2:	af00      	add	r7, sp, #0

  /* Default to keep compatibility with previous behaviour */
  //vPrintString("S_17 Navigation task start!\n\r");
  lateral_mode = LATERAL_MODE_COURSE;
    aaf4:	f24b 6346 	movw	r3, #46662	; 0xb646
    aaf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aafc:	2203      	movs	r2, #3
    aafe:	701a      	strb	r2, [r3, #0]
  if (pprz_mode == PPRZ_MODE_HOME)
    ab00:	f24b 6344 	movw	r3, #46660	; 0xb644
    ab04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab08:	781b      	ldrb	r3, [r3, #0]
    ab0a:	2b03      	cmp	r3, #3
    ab0c:	d102      	bne.n	ab14 <navigation_update+0x24>
    nav_home();
    ab0e:	f005 f937 	bl	fd80 <nav_home>
    ab12:	e001      	b.n	ab18 <navigation_update+0x28>
  else
    nav_update();
    ab14:	f005 f95a 	bl	fdcc <nav_update>
}
    ab18:	bd80      	pop	{r7, pc}
    ab1a:	bf00      	nop

0000ab1c <send_nav_values>:

void send_nav_values(void){
    ab1c:	b480      	push	{r7}
    ab1e:	af00      	add	r7, sp, #0
  
  DOWNLINK_SEND_NAVIGATION(&nav_block, &nav_stage, &estimator_x, &estimator_y, &desired_course, &dist2_to_wp, &course_pgain, &dist2_to_home);
    ab20:	f24b 6361 	movw	r3, #46689	; 0xb661
    ab24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab28:	781a      	ldrb	r2, [r3, #0]
    ab2a:	f24b 6362 	movw	r3, #46690	; 0xb662
    ab2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab32:	781b      	ldrb	r3, [r3, #0]
    ab34:	b2db      	uxtb	r3, r3
    ab36:	429a      	cmp	r2, r3
    ab38:	d313      	bcc.n	ab62 <send_nav_values+0x46>
    ab3a:	f24b 6362 	movw	r3, #46690	; 0xb662
    ab3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab42:	781b      	ldrb	r3, [r3, #0]
    ab44:	b2db      	uxtb	r3, r3
    ab46:	461a      	mov	r2, r3
    ab48:	f24b 6361 	movw	r3, #46689	; 0xb661
    ab4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab50:	781b      	ldrb	r3, [r3, #0]
    ab52:	1ad3      	subs	r3, r2, r3
    ab54:	33ff      	adds	r3, #255	; 0xff
    ab56:	2b1e      	cmp	r3, #30
    ab58:	bfd4      	ite	le
    ab5a:	2300      	movle	r3, #0
    ab5c:	2301      	movgt	r3, #1
    ab5e:	b2db      	uxtb	r3, r3
    ab60:	e011      	b.n	ab86 <send_nav_values+0x6a>
    ab62:	f24b 6362 	movw	r3, #46690	; 0xb662
    ab66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab6a:	781b      	ldrb	r3, [r3, #0]
    ab6c:	b2db      	uxtb	r3, r3
    ab6e:	461a      	mov	r2, r3
    ab70:	f24b 6361 	movw	r3, #46689	; 0xb661
    ab74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab78:	781b      	ldrb	r3, [r3, #0]
    ab7a:	1ad3      	subs	r3, r2, r3
    ab7c:	2b1e      	cmp	r3, #30
    ab7e:	bfd4      	ite	le
    ab80:	2300      	movle	r3, #0
    ab82:	2301      	movgt	r3, #1
    ab84:	b2db      	uxtb	r3, r3
    ab86:	2b00      	cmp	r3, #0
    ab88:	f001 8094 	beq.w	bcb4 <send_nav_values+0x1198>
    ab8c:	f24b 6361 	movw	r3, #46689	; 0xb661
    ab90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab94:	781b      	ldrb	r3, [r3, #0]
    ab96:	461a      	mov	r2, r3
    ab98:	f24b 6364 	movw	r3, #46692	; 0xb664
    ab9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aba0:	2105      	movs	r1, #5
    aba2:	5499      	strb	r1, [r3, r2]
    aba4:	f24b 6361 	movw	r3, #46689	; 0xb661
    aba8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abac:	781b      	ldrb	r3, [r3, #0]
    abae:	3301      	adds	r3, #1
    abb0:	b2da      	uxtb	r2, r3
    abb2:	f24b 6361 	movw	r3, #46689	; 0xb661
    abb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abba:	701a      	strb	r2, [r3, #0]
    abbc:	f24b 6361 	movw	r3, #46689	; 0xb661
    abc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abc4:	781b      	ldrb	r3, [r3, #0]
    abc6:	2bff      	cmp	r3, #255	; 0xff
    abc8:	d105      	bne.n	abd6 <send_nav_values+0xba>
    abca:	f24b 6361 	movw	r3, #46689	; 0xb661
    abce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abd2:	2200      	movs	r2, #0
    abd4:	701a      	strb	r2, [r3, #0]
    abd6:	f24b 6361 	movw	r3, #46689	; 0xb661
    abda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abde:	781b      	ldrb	r3, [r3, #0]
    abe0:	461a      	mov	r2, r3
    abe2:	f24b 6364 	movw	r3, #46692	; 0xb664
    abe6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abea:	210a      	movs	r1, #10
    abec:	5499      	strb	r1, [r3, r2]
    abee:	f24b 6361 	movw	r3, #46689	; 0xb661
    abf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abf6:	781b      	ldrb	r3, [r3, #0]
    abf8:	3301      	adds	r3, #1
    abfa:	b2da      	uxtb	r2, r3
    abfc:	f24b 6361 	movw	r3, #46689	; 0xb661
    ac00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac04:	701a      	strb	r2, [r3, #0]
    ac06:	f24b 6361 	movw	r3, #46689	; 0xb661
    ac0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac0e:	781b      	ldrb	r3, [r3, #0]
    ac10:	2bff      	cmp	r3, #255	; 0xff
    ac12:	d105      	bne.n	ac20 <send_nav_values+0x104>
    ac14:	f24b 6361 	movw	r3, #46689	; 0xb661
    ac18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac1c:	2200      	movs	r2, #0
    ac1e:	701a      	strb	r2, [r3, #0]
    ac20:	f24b 7365 	movw	r3, #46949	; 0xb765
    ac24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac28:	220a      	movs	r2, #10
    ac2a:	701a      	strb	r2, [r3, #0]
    ac2c:	f24b 7366 	movw	r3, #46950	; 0xb766
    ac30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac34:	220a      	movs	r2, #10
    ac36:	701a      	strb	r2, [r3, #0]
    ac38:	f24b 6361 	movw	r3, #46689	; 0xb661
    ac3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac40:	781b      	ldrb	r3, [r3, #0]
    ac42:	461a      	mov	r2, r3
    ac44:	f64b 13b9 	movw	r3, #47545	; 0xb9b9
    ac48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac4c:	7819      	ldrb	r1, [r3, #0]
    ac4e:	f24b 6364 	movw	r3, #46692	; 0xb664
    ac52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac56:	5499      	strb	r1, [r3, r2]
    ac58:	f24b 7365 	movw	r3, #46949	; 0xb765
    ac5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac60:	781a      	ldrb	r2, [r3, #0]
    ac62:	f64b 13b9 	movw	r3, #47545	; 0xb9b9
    ac66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac6a:	781b      	ldrb	r3, [r3, #0]
    ac6c:	4413      	add	r3, r2
    ac6e:	b2da      	uxtb	r2, r3
    ac70:	f24b 7365 	movw	r3, #46949	; 0xb765
    ac74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac78:	701a      	strb	r2, [r3, #0]
    ac7a:	f24b 7366 	movw	r3, #46950	; 0xb766
    ac7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac82:	781a      	ldrb	r2, [r3, #0]
    ac84:	f24b 7365 	movw	r3, #46949	; 0xb765
    ac88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac8c:	781b      	ldrb	r3, [r3, #0]
    ac8e:	4413      	add	r3, r2
    ac90:	b2da      	uxtb	r2, r3
    ac92:	f24b 7366 	movw	r3, #46950	; 0xb766
    ac96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac9a:	701a      	strb	r2, [r3, #0]
    ac9c:	f24b 6361 	movw	r3, #46689	; 0xb661
    aca0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aca4:	781b      	ldrb	r3, [r3, #0]
    aca6:	3301      	adds	r3, #1
    aca8:	b2da      	uxtb	r2, r3
    acaa:	f24b 6361 	movw	r3, #46689	; 0xb661
    acae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acb2:	701a      	strb	r2, [r3, #0]
    acb4:	f24b 6361 	movw	r3, #46689	; 0xb661
    acb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acbc:	781b      	ldrb	r3, [r3, #0]
    acbe:	2bff      	cmp	r3, #255	; 0xff
    acc0:	d105      	bne.n	acce <send_nav_values+0x1b2>
    acc2:	f24b 6361 	movw	r3, #46689	; 0xb661
    acc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acca:	2200      	movs	r2, #0
    accc:	701a      	strb	r2, [r3, #0]
    acce:	f24b 6361 	movw	r3, #46689	; 0xb661
    acd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acd6:	781b      	ldrb	r3, [r3, #0]
    acd8:	461a      	mov	r2, r3
    acda:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    acde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ace2:	7819      	ldrb	r1, [r3, #0]
    ace4:	f24b 6364 	movw	r3, #46692	; 0xb664
    ace8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acec:	5499      	strb	r1, [r3, r2]
    acee:	f24b 7365 	movw	r3, #46949	; 0xb765
    acf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acf6:	781a      	ldrb	r2, [r3, #0]
    acf8:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    acfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad00:	781b      	ldrb	r3, [r3, #0]
    ad02:	4413      	add	r3, r2
    ad04:	b2da      	uxtb	r2, r3
    ad06:	f24b 7365 	movw	r3, #46949	; 0xb765
    ad0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad0e:	701a      	strb	r2, [r3, #0]
    ad10:	f24b 7366 	movw	r3, #46950	; 0xb766
    ad14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad18:	781a      	ldrb	r2, [r3, #0]
    ad1a:	f24b 7365 	movw	r3, #46949	; 0xb765
    ad1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad22:	781b      	ldrb	r3, [r3, #0]
    ad24:	4413      	add	r3, r2
    ad26:	b2da      	uxtb	r2, r3
    ad28:	f24b 7366 	movw	r3, #46950	; 0xb766
    ad2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad30:	701a      	strb	r2, [r3, #0]
    ad32:	f24b 6361 	movw	r3, #46689	; 0xb661
    ad36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad3a:	781b      	ldrb	r3, [r3, #0]
    ad3c:	3301      	adds	r3, #1
    ad3e:	b2da      	uxtb	r2, r3
    ad40:	f24b 6361 	movw	r3, #46689	; 0xb661
    ad44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad48:	701a      	strb	r2, [r3, #0]
    ad4a:	f24b 6361 	movw	r3, #46689	; 0xb661
    ad4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad52:	781b      	ldrb	r3, [r3, #0]
    ad54:	2bff      	cmp	r3, #255	; 0xff
    ad56:	d105      	bne.n	ad64 <send_nav_values+0x248>
    ad58:	f24b 6361 	movw	r3, #46689	; 0xb661
    ad5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad60:	2200      	movs	r2, #0
    ad62:	701a      	strb	r2, [r3, #0]
    ad64:	f24b 6361 	movw	r3, #46689	; 0xb661
    ad68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad6c:	781b      	ldrb	r3, [r3, #0]
    ad6e:	461a      	mov	r2, r3
    ad70:	f64b 4314 	movw	r3, #48148	; 0xbc14
    ad74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad78:	7819      	ldrb	r1, [r3, #0]
    ad7a:	f24b 6364 	movw	r3, #46692	; 0xb664
    ad7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad82:	5499      	strb	r1, [r3, r2]
    ad84:	f64b 4314 	movw	r3, #48148	; 0xbc14
    ad88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad8c:	781a      	ldrb	r2, [r3, #0]
    ad8e:	f24b 7365 	movw	r3, #46949	; 0xb765
    ad92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad96:	781b      	ldrb	r3, [r3, #0]
    ad98:	4413      	add	r3, r2
    ad9a:	b2da      	uxtb	r2, r3
    ad9c:	f24b 7365 	movw	r3, #46949	; 0xb765
    ada0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ada4:	701a      	strb	r2, [r3, #0]
    ada6:	f24b 7366 	movw	r3, #46950	; 0xb766
    adaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adae:	781a      	ldrb	r2, [r3, #0]
    adb0:	f24b 7365 	movw	r3, #46949	; 0xb765
    adb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adb8:	781b      	ldrb	r3, [r3, #0]
    adba:	4413      	add	r3, r2
    adbc:	b2da      	uxtb	r2, r3
    adbe:	f24b 7366 	movw	r3, #46950	; 0xb766
    adc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adc6:	701a      	strb	r2, [r3, #0]
    adc8:	f24b 6361 	movw	r3, #46689	; 0xb661
    adcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    add0:	781b      	ldrb	r3, [r3, #0]
    add2:	3301      	adds	r3, #1
    add4:	b2da      	uxtb	r2, r3
    add6:	f24b 6361 	movw	r3, #46689	; 0xb661
    adda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adde:	701a      	strb	r2, [r3, #0]
    ade0:	f24b 6361 	movw	r3, #46689	; 0xb661
    ade4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ade8:	781b      	ldrb	r3, [r3, #0]
    adea:	2bff      	cmp	r3, #255	; 0xff
    adec:	d105      	bne.n	adfa <send_nav_values+0x2de>
    adee:	f24b 6361 	movw	r3, #46689	; 0xb661
    adf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adf6:	2200      	movs	r2, #0
    adf8:	701a      	strb	r2, [r3, #0]
    adfa:	f24b 6361 	movw	r3, #46689	; 0xb661
    adfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae02:	781b      	ldrb	r3, [r3, #0]
    ae04:	461a      	mov	r2, r3
    ae06:	f64b 4314 	movw	r3, #48148	; 0xbc14
    ae0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae0e:	7859      	ldrb	r1, [r3, #1]
    ae10:	f24b 6364 	movw	r3, #46692	; 0xb664
    ae14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae18:	5499      	strb	r1, [r3, r2]
    ae1a:	4bd2      	ldr	r3, [pc, #840]	; (b164 <send_nav_values+0x648>)
    ae1c:	781a      	ldrb	r2, [r3, #0]
    ae1e:	f24b 7365 	movw	r3, #46949	; 0xb765
    ae22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae26:	781b      	ldrb	r3, [r3, #0]
    ae28:	4413      	add	r3, r2
    ae2a:	b2da      	uxtb	r2, r3
    ae2c:	f24b 7365 	movw	r3, #46949	; 0xb765
    ae30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae34:	701a      	strb	r2, [r3, #0]
    ae36:	f24b 7366 	movw	r3, #46950	; 0xb766
    ae3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae3e:	781a      	ldrb	r2, [r3, #0]
    ae40:	f24b 7365 	movw	r3, #46949	; 0xb765
    ae44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae48:	781b      	ldrb	r3, [r3, #0]
    ae4a:	4413      	add	r3, r2
    ae4c:	b2da      	uxtb	r2, r3
    ae4e:	f24b 7366 	movw	r3, #46950	; 0xb766
    ae52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae56:	701a      	strb	r2, [r3, #0]
    ae58:	f24b 6361 	movw	r3, #46689	; 0xb661
    ae5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae60:	781b      	ldrb	r3, [r3, #0]
    ae62:	3301      	adds	r3, #1
    ae64:	b2da      	uxtb	r2, r3
    ae66:	f24b 6361 	movw	r3, #46689	; 0xb661
    ae6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae6e:	701a      	strb	r2, [r3, #0]
    ae70:	f24b 6361 	movw	r3, #46689	; 0xb661
    ae74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae78:	781b      	ldrb	r3, [r3, #0]
    ae7a:	2bff      	cmp	r3, #255	; 0xff
    ae7c:	d105      	bne.n	ae8a <send_nav_values+0x36e>
    ae7e:	f24b 6361 	movw	r3, #46689	; 0xb661
    ae82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae86:	2200      	movs	r2, #0
    ae88:	701a      	strb	r2, [r3, #0]
    ae8a:	f24b 6361 	movw	r3, #46689	; 0xb661
    ae8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae92:	781b      	ldrb	r3, [r3, #0]
    ae94:	461a      	mov	r2, r3
    ae96:	f64b 4314 	movw	r3, #48148	; 0xbc14
    ae9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae9e:	7899      	ldrb	r1, [r3, #2]
    aea0:	f24b 6364 	movw	r3, #46692	; 0xb664
    aea4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aea8:	5499      	strb	r1, [r3, r2]
    aeaa:	4baf      	ldr	r3, [pc, #700]	; (b168 <send_nav_values+0x64c>)
    aeac:	781a      	ldrb	r2, [r3, #0]
    aeae:	f24b 7365 	movw	r3, #46949	; 0xb765
    aeb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aeb6:	781b      	ldrb	r3, [r3, #0]
    aeb8:	4413      	add	r3, r2
    aeba:	b2da      	uxtb	r2, r3
    aebc:	f24b 7365 	movw	r3, #46949	; 0xb765
    aec0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aec4:	701a      	strb	r2, [r3, #0]
    aec6:	f24b 7366 	movw	r3, #46950	; 0xb766
    aeca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aece:	781a      	ldrb	r2, [r3, #0]
    aed0:	f24b 7365 	movw	r3, #46949	; 0xb765
    aed4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aed8:	781b      	ldrb	r3, [r3, #0]
    aeda:	4413      	add	r3, r2
    aedc:	b2da      	uxtb	r2, r3
    aede:	f24b 7366 	movw	r3, #46950	; 0xb766
    aee2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aee6:	701a      	strb	r2, [r3, #0]
    aee8:	f24b 6361 	movw	r3, #46689	; 0xb661
    aeec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aef0:	781b      	ldrb	r3, [r3, #0]
    aef2:	3301      	adds	r3, #1
    aef4:	b2da      	uxtb	r2, r3
    aef6:	f24b 6361 	movw	r3, #46689	; 0xb661
    aefa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aefe:	701a      	strb	r2, [r3, #0]
    af00:	f24b 6361 	movw	r3, #46689	; 0xb661
    af04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af08:	781b      	ldrb	r3, [r3, #0]
    af0a:	2bff      	cmp	r3, #255	; 0xff
    af0c:	d105      	bne.n	af1a <send_nav_values+0x3fe>
    af0e:	f24b 6361 	movw	r3, #46689	; 0xb661
    af12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af16:	2200      	movs	r2, #0
    af18:	701a      	strb	r2, [r3, #0]
    af1a:	f24b 6361 	movw	r3, #46689	; 0xb661
    af1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af22:	781b      	ldrb	r3, [r3, #0]
    af24:	461a      	mov	r2, r3
    af26:	f64b 4314 	movw	r3, #48148	; 0xbc14
    af2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af2e:	78d9      	ldrb	r1, [r3, #3]
    af30:	f24b 6364 	movw	r3, #46692	; 0xb664
    af34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af38:	5499      	strb	r1, [r3, r2]
    af3a:	4b8c      	ldr	r3, [pc, #560]	; (b16c <send_nav_values+0x650>)
    af3c:	781a      	ldrb	r2, [r3, #0]
    af3e:	f24b 7365 	movw	r3, #46949	; 0xb765
    af42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af46:	781b      	ldrb	r3, [r3, #0]
    af48:	4413      	add	r3, r2
    af4a:	b2da      	uxtb	r2, r3
    af4c:	f24b 7365 	movw	r3, #46949	; 0xb765
    af50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af54:	701a      	strb	r2, [r3, #0]
    af56:	f24b 7366 	movw	r3, #46950	; 0xb766
    af5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af5e:	781a      	ldrb	r2, [r3, #0]
    af60:	f24b 7365 	movw	r3, #46949	; 0xb765
    af64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af68:	781b      	ldrb	r3, [r3, #0]
    af6a:	4413      	add	r3, r2
    af6c:	b2da      	uxtb	r2, r3
    af6e:	f24b 7366 	movw	r3, #46950	; 0xb766
    af72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af76:	701a      	strb	r2, [r3, #0]
    af78:	f24b 6361 	movw	r3, #46689	; 0xb661
    af7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af80:	781b      	ldrb	r3, [r3, #0]
    af82:	3301      	adds	r3, #1
    af84:	b2da      	uxtb	r2, r3
    af86:	f24b 6361 	movw	r3, #46689	; 0xb661
    af8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af8e:	701a      	strb	r2, [r3, #0]
    af90:	f24b 6361 	movw	r3, #46689	; 0xb661
    af94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af98:	781b      	ldrb	r3, [r3, #0]
    af9a:	2bff      	cmp	r3, #255	; 0xff
    af9c:	d105      	bne.n	afaa <send_nav_values+0x48e>
    af9e:	f24b 6361 	movw	r3, #46689	; 0xb661
    afa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afa6:	2200      	movs	r2, #0
    afa8:	701a      	strb	r2, [r3, #0]
    afaa:	f24b 6361 	movw	r3, #46689	; 0xb661
    afae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afb2:	781b      	ldrb	r3, [r3, #0]
    afb4:	461a      	mov	r2, r3
    afb6:	f64b 4318 	movw	r3, #48152	; 0xbc18
    afba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afbe:	7819      	ldrb	r1, [r3, #0]
    afc0:	f24b 6364 	movw	r3, #46692	; 0xb664
    afc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afc8:	5499      	strb	r1, [r3, r2]
    afca:	f64b 4318 	movw	r3, #48152	; 0xbc18
    afce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afd2:	781a      	ldrb	r2, [r3, #0]
    afd4:	f24b 7365 	movw	r3, #46949	; 0xb765
    afd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afdc:	781b      	ldrb	r3, [r3, #0]
    afde:	4413      	add	r3, r2
    afe0:	b2da      	uxtb	r2, r3
    afe2:	f24b 7365 	movw	r3, #46949	; 0xb765
    afe6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afea:	701a      	strb	r2, [r3, #0]
    afec:	f24b 7366 	movw	r3, #46950	; 0xb766
    aff0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aff4:	781a      	ldrb	r2, [r3, #0]
    aff6:	f24b 7365 	movw	r3, #46949	; 0xb765
    affa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    affe:	781b      	ldrb	r3, [r3, #0]
    b000:	4413      	add	r3, r2
    b002:	b2da      	uxtb	r2, r3
    b004:	f24b 7366 	movw	r3, #46950	; 0xb766
    b008:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b00c:	701a      	strb	r2, [r3, #0]
    b00e:	f24b 6361 	movw	r3, #46689	; 0xb661
    b012:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b016:	781b      	ldrb	r3, [r3, #0]
    b018:	3301      	adds	r3, #1
    b01a:	b2da      	uxtb	r2, r3
    b01c:	f24b 6361 	movw	r3, #46689	; 0xb661
    b020:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b024:	701a      	strb	r2, [r3, #0]
    b026:	f24b 6361 	movw	r3, #46689	; 0xb661
    b02a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b02e:	781b      	ldrb	r3, [r3, #0]
    b030:	2bff      	cmp	r3, #255	; 0xff
    b032:	d105      	bne.n	b040 <send_nav_values+0x524>
    b034:	f24b 6361 	movw	r3, #46689	; 0xb661
    b038:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b03c:	2200      	movs	r2, #0
    b03e:	701a      	strb	r2, [r3, #0]
    b040:	f24b 6361 	movw	r3, #46689	; 0xb661
    b044:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b048:	781b      	ldrb	r3, [r3, #0]
    b04a:	461a      	mov	r2, r3
    b04c:	f64b 4318 	movw	r3, #48152	; 0xbc18
    b050:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b054:	7859      	ldrb	r1, [r3, #1]
    b056:	f24b 6364 	movw	r3, #46692	; 0xb664
    b05a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b05e:	5499      	strb	r1, [r3, r2]
    b060:	4b43      	ldr	r3, [pc, #268]	; (b170 <send_nav_values+0x654>)
    b062:	781a      	ldrb	r2, [r3, #0]
    b064:	f24b 7365 	movw	r3, #46949	; 0xb765
    b068:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b06c:	781b      	ldrb	r3, [r3, #0]
    b06e:	4413      	add	r3, r2
    b070:	b2da      	uxtb	r2, r3
    b072:	f24b 7365 	movw	r3, #46949	; 0xb765
    b076:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b07a:	701a      	strb	r2, [r3, #0]
    b07c:	f24b 7366 	movw	r3, #46950	; 0xb766
    b080:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b084:	781a      	ldrb	r2, [r3, #0]
    b086:	f24b 7365 	movw	r3, #46949	; 0xb765
    b08a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b08e:	781b      	ldrb	r3, [r3, #0]
    b090:	4413      	add	r3, r2
    b092:	b2da      	uxtb	r2, r3
    b094:	f24b 7366 	movw	r3, #46950	; 0xb766
    b098:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b09c:	701a      	strb	r2, [r3, #0]
    b09e:	f24b 6361 	movw	r3, #46689	; 0xb661
    b0a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0a6:	781b      	ldrb	r3, [r3, #0]
    b0a8:	3301      	adds	r3, #1
    b0aa:	b2da      	uxtb	r2, r3
    b0ac:	f24b 6361 	movw	r3, #46689	; 0xb661
    b0b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0b4:	701a      	strb	r2, [r3, #0]
    b0b6:	f24b 6361 	movw	r3, #46689	; 0xb661
    b0ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0be:	781b      	ldrb	r3, [r3, #0]
    b0c0:	2bff      	cmp	r3, #255	; 0xff
    b0c2:	d105      	bne.n	b0d0 <send_nav_values+0x5b4>
    b0c4:	f24b 6361 	movw	r3, #46689	; 0xb661
    b0c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0cc:	2200      	movs	r2, #0
    b0ce:	701a      	strb	r2, [r3, #0]
    b0d0:	f24b 6361 	movw	r3, #46689	; 0xb661
    b0d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0d8:	781b      	ldrb	r3, [r3, #0]
    b0da:	461a      	mov	r2, r3
    b0dc:	f64b 4318 	movw	r3, #48152	; 0xbc18
    b0e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0e4:	7899      	ldrb	r1, [r3, #2]
    b0e6:	f24b 6364 	movw	r3, #46692	; 0xb664
    b0ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0ee:	5499      	strb	r1, [r3, r2]
    b0f0:	4b20      	ldr	r3, [pc, #128]	; (b174 <send_nav_values+0x658>)
    b0f2:	781a      	ldrb	r2, [r3, #0]
    b0f4:	f24b 7365 	movw	r3, #46949	; 0xb765
    b0f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0fc:	781b      	ldrb	r3, [r3, #0]
    b0fe:	4413      	add	r3, r2
    b100:	b2da      	uxtb	r2, r3
    b102:	f24b 7365 	movw	r3, #46949	; 0xb765
    b106:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b10a:	701a      	strb	r2, [r3, #0]
    b10c:	f24b 7366 	movw	r3, #46950	; 0xb766
    b110:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b114:	781a      	ldrb	r2, [r3, #0]
    b116:	f24b 7365 	movw	r3, #46949	; 0xb765
    b11a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b11e:	781b      	ldrb	r3, [r3, #0]
    b120:	4413      	add	r3, r2
    b122:	b2da      	uxtb	r2, r3
    b124:	f24b 7366 	movw	r3, #46950	; 0xb766
    b128:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b12c:	701a      	strb	r2, [r3, #0]
    b12e:	f24b 6361 	movw	r3, #46689	; 0xb661
    b132:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b136:	781b      	ldrb	r3, [r3, #0]
    b138:	3301      	adds	r3, #1
    b13a:	b2da      	uxtb	r2, r3
    b13c:	f24b 6361 	movw	r3, #46689	; 0xb661
    b140:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b144:	701a      	strb	r2, [r3, #0]
    b146:	f24b 6361 	movw	r3, #46689	; 0xb661
    b14a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b14e:	781b      	ldrb	r3, [r3, #0]
    b150:	2bff      	cmp	r3, #255	; 0xff
    b152:	d111      	bne.n	b178 <send_nav_values+0x65c>
    b154:	f24b 6361 	movw	r3, #46689	; 0xb661
    b158:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b15c:	2200      	movs	r2, #0
    b15e:	701a      	strb	r2, [r3, #0]
    b160:	e00a      	b.n	b178 <send_nav_values+0x65c>
    b162:	bf00      	nop
    b164:	2004bc15 	.word	0x2004bc15
    b168:	2004bc16 	.word	0x2004bc16
    b16c:	2004bc17 	.word	0x2004bc17
    b170:	2004bc19 	.word	0x2004bc19
    b174:	2004bc1a 	.word	0x2004bc1a
    b178:	f24b 6361 	movw	r3, #46689	; 0xb661
    b17c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b180:	781b      	ldrb	r3, [r3, #0]
    b182:	461a      	mov	r2, r3
    b184:	f64b 4318 	movw	r3, #48152	; 0xbc18
    b188:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b18c:	78d9      	ldrb	r1, [r3, #3]
    b18e:	f24b 6364 	movw	r3, #46692	; 0xb664
    b192:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b196:	5499      	strb	r1, [r3, r2]
    b198:	4bd3      	ldr	r3, [pc, #844]	; (b4e8 <send_nav_values+0x9cc>)
    b19a:	781a      	ldrb	r2, [r3, #0]
    b19c:	f24b 7365 	movw	r3, #46949	; 0xb765
    b1a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1a4:	781b      	ldrb	r3, [r3, #0]
    b1a6:	4413      	add	r3, r2
    b1a8:	b2da      	uxtb	r2, r3
    b1aa:	f24b 7365 	movw	r3, #46949	; 0xb765
    b1ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1b2:	701a      	strb	r2, [r3, #0]
    b1b4:	f24b 7366 	movw	r3, #46950	; 0xb766
    b1b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1bc:	781a      	ldrb	r2, [r3, #0]
    b1be:	f24b 7365 	movw	r3, #46949	; 0xb765
    b1c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1c6:	781b      	ldrb	r3, [r3, #0]
    b1c8:	4413      	add	r3, r2
    b1ca:	b2da      	uxtb	r2, r3
    b1cc:	f24b 7366 	movw	r3, #46950	; 0xb766
    b1d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1d4:	701a      	strb	r2, [r3, #0]
    b1d6:	f24b 6361 	movw	r3, #46689	; 0xb661
    b1da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1de:	781b      	ldrb	r3, [r3, #0]
    b1e0:	3301      	adds	r3, #1
    b1e2:	b2da      	uxtb	r2, r3
    b1e4:	f24b 6361 	movw	r3, #46689	; 0xb661
    b1e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1ec:	701a      	strb	r2, [r3, #0]
    b1ee:	f24b 6361 	movw	r3, #46689	; 0xb661
    b1f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1f6:	781b      	ldrb	r3, [r3, #0]
    b1f8:	2bff      	cmp	r3, #255	; 0xff
    b1fa:	d105      	bne.n	b208 <send_nav_values+0x6ec>
    b1fc:	f24b 6361 	movw	r3, #46689	; 0xb661
    b200:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b204:	2200      	movs	r2, #0
    b206:	701a      	strb	r2, [r3, #0]
    b208:	f24b 6361 	movw	r3, #46689	; 0xb661
    b20c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b210:	781b      	ldrb	r3, [r3, #0]
    b212:	461a      	mov	r2, r3
    b214:	f64b 13a4 	movw	r3, #47524	; 0xb9a4
    b218:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b21c:	7819      	ldrb	r1, [r3, #0]
    b21e:	f24b 6364 	movw	r3, #46692	; 0xb664
    b222:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b226:	5499      	strb	r1, [r3, r2]
    b228:	f64b 13a4 	movw	r3, #47524	; 0xb9a4
    b22c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b230:	781a      	ldrb	r2, [r3, #0]
    b232:	f24b 7365 	movw	r3, #46949	; 0xb765
    b236:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b23a:	781b      	ldrb	r3, [r3, #0]
    b23c:	4413      	add	r3, r2
    b23e:	b2da      	uxtb	r2, r3
    b240:	f24b 7365 	movw	r3, #46949	; 0xb765
    b244:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b248:	701a      	strb	r2, [r3, #0]
    b24a:	f24b 7366 	movw	r3, #46950	; 0xb766
    b24e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b252:	781a      	ldrb	r2, [r3, #0]
    b254:	f24b 7365 	movw	r3, #46949	; 0xb765
    b258:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b25c:	781b      	ldrb	r3, [r3, #0]
    b25e:	4413      	add	r3, r2
    b260:	b2da      	uxtb	r2, r3
    b262:	f24b 7366 	movw	r3, #46950	; 0xb766
    b266:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b26a:	701a      	strb	r2, [r3, #0]
    b26c:	f24b 6361 	movw	r3, #46689	; 0xb661
    b270:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b274:	781b      	ldrb	r3, [r3, #0]
    b276:	3301      	adds	r3, #1
    b278:	b2da      	uxtb	r2, r3
    b27a:	f24b 6361 	movw	r3, #46689	; 0xb661
    b27e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b282:	701a      	strb	r2, [r3, #0]
    b284:	f24b 6361 	movw	r3, #46689	; 0xb661
    b288:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b28c:	781b      	ldrb	r3, [r3, #0]
    b28e:	2bff      	cmp	r3, #255	; 0xff
    b290:	d105      	bne.n	b29e <send_nav_values+0x782>
    b292:	f24b 6361 	movw	r3, #46689	; 0xb661
    b296:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b29a:	2200      	movs	r2, #0
    b29c:	701a      	strb	r2, [r3, #0]
    b29e:	f24b 6361 	movw	r3, #46689	; 0xb661
    b2a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2a6:	781b      	ldrb	r3, [r3, #0]
    b2a8:	461a      	mov	r2, r3
    b2aa:	f64b 13a4 	movw	r3, #47524	; 0xb9a4
    b2ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2b2:	7859      	ldrb	r1, [r3, #1]
    b2b4:	f24b 6364 	movw	r3, #46692	; 0xb664
    b2b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2bc:	5499      	strb	r1, [r3, r2]
    b2be:	4b8b      	ldr	r3, [pc, #556]	; (b4ec <send_nav_values+0x9d0>)
    b2c0:	781a      	ldrb	r2, [r3, #0]
    b2c2:	f24b 7365 	movw	r3, #46949	; 0xb765
    b2c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2ca:	781b      	ldrb	r3, [r3, #0]
    b2cc:	4413      	add	r3, r2
    b2ce:	b2da      	uxtb	r2, r3
    b2d0:	f24b 7365 	movw	r3, #46949	; 0xb765
    b2d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2d8:	701a      	strb	r2, [r3, #0]
    b2da:	f24b 7366 	movw	r3, #46950	; 0xb766
    b2de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2e2:	781a      	ldrb	r2, [r3, #0]
    b2e4:	f24b 7365 	movw	r3, #46949	; 0xb765
    b2e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2ec:	781b      	ldrb	r3, [r3, #0]
    b2ee:	4413      	add	r3, r2
    b2f0:	b2da      	uxtb	r2, r3
    b2f2:	f24b 7366 	movw	r3, #46950	; 0xb766
    b2f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2fa:	701a      	strb	r2, [r3, #0]
    b2fc:	f24b 6361 	movw	r3, #46689	; 0xb661
    b300:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b304:	781b      	ldrb	r3, [r3, #0]
    b306:	3301      	adds	r3, #1
    b308:	b2da      	uxtb	r2, r3
    b30a:	f24b 6361 	movw	r3, #46689	; 0xb661
    b30e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b312:	701a      	strb	r2, [r3, #0]
    b314:	f24b 6361 	movw	r3, #46689	; 0xb661
    b318:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b31c:	781b      	ldrb	r3, [r3, #0]
    b31e:	2bff      	cmp	r3, #255	; 0xff
    b320:	d105      	bne.n	b32e <send_nav_values+0x812>
    b322:	f24b 6361 	movw	r3, #46689	; 0xb661
    b326:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b32a:	2200      	movs	r2, #0
    b32c:	701a      	strb	r2, [r3, #0]
    b32e:	f24b 6361 	movw	r3, #46689	; 0xb661
    b332:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b336:	781b      	ldrb	r3, [r3, #0]
    b338:	461a      	mov	r2, r3
    b33a:	f64b 13a4 	movw	r3, #47524	; 0xb9a4
    b33e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b342:	7899      	ldrb	r1, [r3, #2]
    b344:	f24b 6364 	movw	r3, #46692	; 0xb664
    b348:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b34c:	5499      	strb	r1, [r3, r2]
    b34e:	4b68      	ldr	r3, [pc, #416]	; (b4f0 <send_nav_values+0x9d4>)
    b350:	781a      	ldrb	r2, [r3, #0]
    b352:	f24b 7365 	movw	r3, #46949	; 0xb765
    b356:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b35a:	781b      	ldrb	r3, [r3, #0]
    b35c:	4413      	add	r3, r2
    b35e:	b2da      	uxtb	r2, r3
    b360:	f24b 7365 	movw	r3, #46949	; 0xb765
    b364:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b368:	701a      	strb	r2, [r3, #0]
    b36a:	f24b 7366 	movw	r3, #46950	; 0xb766
    b36e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b372:	781a      	ldrb	r2, [r3, #0]
    b374:	f24b 7365 	movw	r3, #46949	; 0xb765
    b378:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b37c:	781b      	ldrb	r3, [r3, #0]
    b37e:	4413      	add	r3, r2
    b380:	b2da      	uxtb	r2, r3
    b382:	f24b 7366 	movw	r3, #46950	; 0xb766
    b386:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b38a:	701a      	strb	r2, [r3, #0]
    b38c:	f24b 6361 	movw	r3, #46689	; 0xb661
    b390:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b394:	781b      	ldrb	r3, [r3, #0]
    b396:	3301      	adds	r3, #1
    b398:	b2da      	uxtb	r2, r3
    b39a:	f24b 6361 	movw	r3, #46689	; 0xb661
    b39e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3a2:	701a      	strb	r2, [r3, #0]
    b3a4:	f24b 6361 	movw	r3, #46689	; 0xb661
    b3a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3ac:	781b      	ldrb	r3, [r3, #0]
    b3ae:	2bff      	cmp	r3, #255	; 0xff
    b3b0:	d105      	bne.n	b3be <send_nav_values+0x8a2>
    b3b2:	f24b 6361 	movw	r3, #46689	; 0xb661
    b3b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3ba:	2200      	movs	r2, #0
    b3bc:	701a      	strb	r2, [r3, #0]
    b3be:	f24b 6361 	movw	r3, #46689	; 0xb661
    b3c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3c6:	781b      	ldrb	r3, [r3, #0]
    b3c8:	461a      	mov	r2, r3
    b3ca:	f64b 13a4 	movw	r3, #47524	; 0xb9a4
    b3ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3d2:	78d9      	ldrb	r1, [r3, #3]
    b3d4:	f24b 6364 	movw	r3, #46692	; 0xb664
    b3d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3dc:	5499      	strb	r1, [r3, r2]
    b3de:	4b45      	ldr	r3, [pc, #276]	; (b4f4 <send_nav_values+0x9d8>)
    b3e0:	781a      	ldrb	r2, [r3, #0]
    b3e2:	f24b 7365 	movw	r3, #46949	; 0xb765
    b3e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3ea:	781b      	ldrb	r3, [r3, #0]
    b3ec:	4413      	add	r3, r2
    b3ee:	b2da      	uxtb	r2, r3
    b3f0:	f24b 7365 	movw	r3, #46949	; 0xb765
    b3f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3f8:	701a      	strb	r2, [r3, #0]
    b3fa:	f24b 7366 	movw	r3, #46950	; 0xb766
    b3fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b402:	781a      	ldrb	r2, [r3, #0]
    b404:	f24b 7365 	movw	r3, #46949	; 0xb765
    b408:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b40c:	781b      	ldrb	r3, [r3, #0]
    b40e:	4413      	add	r3, r2
    b410:	b2da      	uxtb	r2, r3
    b412:	f24b 7366 	movw	r3, #46950	; 0xb766
    b416:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b41a:	701a      	strb	r2, [r3, #0]
    b41c:	f24b 6361 	movw	r3, #46689	; 0xb661
    b420:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b424:	781b      	ldrb	r3, [r3, #0]
    b426:	3301      	adds	r3, #1
    b428:	b2da      	uxtb	r2, r3
    b42a:	f24b 6361 	movw	r3, #46689	; 0xb661
    b42e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b432:	701a      	strb	r2, [r3, #0]
    b434:	f24b 6361 	movw	r3, #46689	; 0xb661
    b438:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b43c:	781b      	ldrb	r3, [r3, #0]
    b43e:	2bff      	cmp	r3, #255	; 0xff
    b440:	d105      	bne.n	b44e <send_nav_values+0x932>
    b442:	f24b 6361 	movw	r3, #46689	; 0xb661
    b446:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b44a:	2200      	movs	r2, #0
    b44c:	701a      	strb	r2, [r3, #0]
    b44e:	f24b 6361 	movw	r3, #46689	; 0xb661
    b452:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b456:	781b      	ldrb	r3, [r3, #0]
    b458:	461a      	mov	r2, r3
    b45a:	f64b 13ec 	movw	r3, #47596	; 0xb9ec
    b45e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b462:	7819      	ldrb	r1, [r3, #0]
    b464:	f24b 6364 	movw	r3, #46692	; 0xb664
    b468:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b46c:	5499      	strb	r1, [r3, r2]
    b46e:	f64b 13ec 	movw	r3, #47596	; 0xb9ec
    b472:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b476:	781a      	ldrb	r2, [r3, #0]
    b478:	f24b 7365 	movw	r3, #46949	; 0xb765
    b47c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b480:	781b      	ldrb	r3, [r3, #0]
    b482:	4413      	add	r3, r2
    b484:	b2da      	uxtb	r2, r3
    b486:	f24b 7365 	movw	r3, #46949	; 0xb765
    b48a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b48e:	701a      	strb	r2, [r3, #0]
    b490:	f24b 7366 	movw	r3, #46950	; 0xb766
    b494:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b498:	781a      	ldrb	r2, [r3, #0]
    b49a:	f24b 7365 	movw	r3, #46949	; 0xb765
    b49e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4a2:	781b      	ldrb	r3, [r3, #0]
    b4a4:	4413      	add	r3, r2
    b4a6:	b2da      	uxtb	r2, r3
    b4a8:	f24b 7366 	movw	r3, #46950	; 0xb766
    b4ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4b0:	701a      	strb	r2, [r3, #0]
    b4b2:	f24b 6361 	movw	r3, #46689	; 0xb661
    b4b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4ba:	781b      	ldrb	r3, [r3, #0]
    b4bc:	3301      	adds	r3, #1
    b4be:	b2da      	uxtb	r2, r3
    b4c0:	f24b 6361 	movw	r3, #46689	; 0xb661
    b4c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4c8:	701a      	strb	r2, [r3, #0]
    b4ca:	f24b 6361 	movw	r3, #46689	; 0xb661
    b4ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4d2:	781b      	ldrb	r3, [r3, #0]
    b4d4:	2bff      	cmp	r3, #255	; 0xff
    b4d6:	d10f      	bne.n	b4f8 <send_nav_values+0x9dc>
    b4d8:	f24b 6361 	movw	r3, #46689	; 0xb661
    b4dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4e0:	2200      	movs	r2, #0
    b4e2:	701a      	strb	r2, [r3, #0]
    b4e4:	e008      	b.n	b4f8 <send_nav_values+0x9dc>
    b4e6:	bf00      	nop
    b4e8:	2004bc1b 	.word	0x2004bc1b
    b4ec:	2004b9a5 	.word	0x2004b9a5
    b4f0:	2004b9a6 	.word	0x2004b9a6
    b4f4:	2004b9a7 	.word	0x2004b9a7
    b4f8:	f24b 6361 	movw	r3, #46689	; 0xb661
    b4fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b500:	781b      	ldrb	r3, [r3, #0]
    b502:	461a      	mov	r2, r3
    b504:	f64b 13ec 	movw	r3, #47596	; 0xb9ec
    b508:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b50c:	7859      	ldrb	r1, [r3, #1]
    b50e:	f24b 6364 	movw	r3, #46692	; 0xb664
    b512:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b516:	5499      	strb	r1, [r3, r2]
    b518:	4bd1      	ldr	r3, [pc, #836]	; (b860 <send_nav_values+0xd44>)
    b51a:	781a      	ldrb	r2, [r3, #0]
    b51c:	f24b 7365 	movw	r3, #46949	; 0xb765
    b520:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b524:	781b      	ldrb	r3, [r3, #0]
    b526:	4413      	add	r3, r2
    b528:	b2da      	uxtb	r2, r3
    b52a:	f24b 7365 	movw	r3, #46949	; 0xb765
    b52e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b532:	701a      	strb	r2, [r3, #0]
    b534:	f24b 7366 	movw	r3, #46950	; 0xb766
    b538:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b53c:	781a      	ldrb	r2, [r3, #0]
    b53e:	f24b 7365 	movw	r3, #46949	; 0xb765
    b542:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b546:	781b      	ldrb	r3, [r3, #0]
    b548:	4413      	add	r3, r2
    b54a:	b2da      	uxtb	r2, r3
    b54c:	f24b 7366 	movw	r3, #46950	; 0xb766
    b550:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b554:	701a      	strb	r2, [r3, #0]
    b556:	f24b 6361 	movw	r3, #46689	; 0xb661
    b55a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b55e:	781b      	ldrb	r3, [r3, #0]
    b560:	3301      	adds	r3, #1
    b562:	b2da      	uxtb	r2, r3
    b564:	f24b 6361 	movw	r3, #46689	; 0xb661
    b568:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b56c:	701a      	strb	r2, [r3, #0]
    b56e:	f24b 6361 	movw	r3, #46689	; 0xb661
    b572:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b576:	781b      	ldrb	r3, [r3, #0]
    b578:	2bff      	cmp	r3, #255	; 0xff
    b57a:	d105      	bne.n	b588 <send_nav_values+0xa6c>
    b57c:	f24b 6361 	movw	r3, #46689	; 0xb661
    b580:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b584:	2200      	movs	r2, #0
    b586:	701a      	strb	r2, [r3, #0]
    b588:	f24b 6361 	movw	r3, #46689	; 0xb661
    b58c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b590:	781b      	ldrb	r3, [r3, #0]
    b592:	461a      	mov	r2, r3
    b594:	f64b 13ec 	movw	r3, #47596	; 0xb9ec
    b598:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b59c:	7899      	ldrb	r1, [r3, #2]
    b59e:	f24b 6364 	movw	r3, #46692	; 0xb664
    b5a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5a6:	5499      	strb	r1, [r3, r2]
    b5a8:	4bae      	ldr	r3, [pc, #696]	; (b864 <send_nav_values+0xd48>)
    b5aa:	781a      	ldrb	r2, [r3, #0]
    b5ac:	f24b 7365 	movw	r3, #46949	; 0xb765
    b5b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5b4:	781b      	ldrb	r3, [r3, #0]
    b5b6:	4413      	add	r3, r2
    b5b8:	b2da      	uxtb	r2, r3
    b5ba:	f24b 7365 	movw	r3, #46949	; 0xb765
    b5be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5c2:	701a      	strb	r2, [r3, #0]
    b5c4:	f24b 7366 	movw	r3, #46950	; 0xb766
    b5c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5cc:	781a      	ldrb	r2, [r3, #0]
    b5ce:	f24b 7365 	movw	r3, #46949	; 0xb765
    b5d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5d6:	781b      	ldrb	r3, [r3, #0]
    b5d8:	4413      	add	r3, r2
    b5da:	b2da      	uxtb	r2, r3
    b5dc:	f24b 7366 	movw	r3, #46950	; 0xb766
    b5e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5e4:	701a      	strb	r2, [r3, #0]
    b5e6:	f24b 6361 	movw	r3, #46689	; 0xb661
    b5ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5ee:	781b      	ldrb	r3, [r3, #0]
    b5f0:	3301      	adds	r3, #1
    b5f2:	b2da      	uxtb	r2, r3
    b5f4:	f24b 6361 	movw	r3, #46689	; 0xb661
    b5f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5fc:	701a      	strb	r2, [r3, #0]
    b5fe:	f24b 6361 	movw	r3, #46689	; 0xb661
    b602:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b606:	781b      	ldrb	r3, [r3, #0]
    b608:	2bff      	cmp	r3, #255	; 0xff
    b60a:	d105      	bne.n	b618 <send_nav_values+0xafc>
    b60c:	f24b 6361 	movw	r3, #46689	; 0xb661
    b610:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b614:	2200      	movs	r2, #0
    b616:	701a      	strb	r2, [r3, #0]
    b618:	f24b 6361 	movw	r3, #46689	; 0xb661
    b61c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b620:	781b      	ldrb	r3, [r3, #0]
    b622:	461a      	mov	r2, r3
    b624:	f64b 13ec 	movw	r3, #47596	; 0xb9ec
    b628:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b62c:	78d9      	ldrb	r1, [r3, #3]
    b62e:	f24b 6364 	movw	r3, #46692	; 0xb664
    b632:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b636:	5499      	strb	r1, [r3, r2]
    b638:	4b8b      	ldr	r3, [pc, #556]	; (b868 <send_nav_values+0xd4c>)
    b63a:	781a      	ldrb	r2, [r3, #0]
    b63c:	f24b 7365 	movw	r3, #46949	; 0xb765
    b640:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b644:	781b      	ldrb	r3, [r3, #0]
    b646:	4413      	add	r3, r2
    b648:	b2da      	uxtb	r2, r3
    b64a:	f24b 7365 	movw	r3, #46949	; 0xb765
    b64e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b652:	701a      	strb	r2, [r3, #0]
    b654:	f24b 7366 	movw	r3, #46950	; 0xb766
    b658:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b65c:	781a      	ldrb	r2, [r3, #0]
    b65e:	f24b 7365 	movw	r3, #46949	; 0xb765
    b662:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b666:	781b      	ldrb	r3, [r3, #0]
    b668:	4413      	add	r3, r2
    b66a:	b2da      	uxtb	r2, r3
    b66c:	f24b 7366 	movw	r3, #46950	; 0xb766
    b670:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b674:	701a      	strb	r2, [r3, #0]
    b676:	f24b 6361 	movw	r3, #46689	; 0xb661
    b67a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b67e:	781b      	ldrb	r3, [r3, #0]
    b680:	3301      	adds	r3, #1
    b682:	b2da      	uxtb	r2, r3
    b684:	f24b 6361 	movw	r3, #46689	; 0xb661
    b688:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b68c:	701a      	strb	r2, [r3, #0]
    b68e:	f24b 6361 	movw	r3, #46689	; 0xb661
    b692:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b696:	781b      	ldrb	r3, [r3, #0]
    b698:	2bff      	cmp	r3, #255	; 0xff
    b69a:	d105      	bne.n	b6a8 <send_nav_values+0xb8c>
    b69c:	f24b 6361 	movw	r3, #46689	; 0xb661
    b6a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6a4:	2200      	movs	r2, #0
    b6a6:	701a      	strb	r2, [r3, #0]
    b6a8:	f24b 6361 	movw	r3, #46689	; 0xb661
    b6ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6b0:	781b      	ldrb	r3, [r3, #0]
    b6b2:	461a      	mov	r2, r3
    b6b4:	f240 1354 	movw	r3, #340	; 0x154
    b6b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6bc:	7819      	ldrb	r1, [r3, #0]
    b6be:	f24b 6364 	movw	r3, #46692	; 0xb664
    b6c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6c6:	5499      	strb	r1, [r3, r2]
    b6c8:	f240 1354 	movw	r3, #340	; 0x154
    b6cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6d0:	781a      	ldrb	r2, [r3, #0]
    b6d2:	f24b 7365 	movw	r3, #46949	; 0xb765
    b6d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6da:	781b      	ldrb	r3, [r3, #0]
    b6dc:	4413      	add	r3, r2
    b6de:	b2da      	uxtb	r2, r3
    b6e0:	f24b 7365 	movw	r3, #46949	; 0xb765
    b6e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6e8:	701a      	strb	r2, [r3, #0]
    b6ea:	f24b 7366 	movw	r3, #46950	; 0xb766
    b6ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6f2:	781a      	ldrb	r2, [r3, #0]
    b6f4:	f24b 7365 	movw	r3, #46949	; 0xb765
    b6f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6fc:	781b      	ldrb	r3, [r3, #0]
    b6fe:	4413      	add	r3, r2
    b700:	b2da      	uxtb	r2, r3
    b702:	f24b 7366 	movw	r3, #46950	; 0xb766
    b706:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b70a:	701a      	strb	r2, [r3, #0]
    b70c:	f24b 6361 	movw	r3, #46689	; 0xb661
    b710:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b714:	781b      	ldrb	r3, [r3, #0]
    b716:	3301      	adds	r3, #1
    b718:	b2da      	uxtb	r2, r3
    b71a:	f24b 6361 	movw	r3, #46689	; 0xb661
    b71e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b722:	701a      	strb	r2, [r3, #0]
    b724:	f24b 6361 	movw	r3, #46689	; 0xb661
    b728:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b72c:	781b      	ldrb	r3, [r3, #0]
    b72e:	2bff      	cmp	r3, #255	; 0xff
    b730:	d105      	bne.n	b73e <send_nav_values+0xc22>
    b732:	f24b 6361 	movw	r3, #46689	; 0xb661
    b736:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b73a:	2200      	movs	r2, #0
    b73c:	701a      	strb	r2, [r3, #0]
    b73e:	f24b 6361 	movw	r3, #46689	; 0xb661
    b742:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b746:	781b      	ldrb	r3, [r3, #0]
    b748:	461a      	mov	r2, r3
    b74a:	f240 1354 	movw	r3, #340	; 0x154
    b74e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b752:	7859      	ldrb	r1, [r3, #1]
    b754:	f24b 6364 	movw	r3, #46692	; 0xb664
    b758:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b75c:	5499      	strb	r1, [r3, r2]
    b75e:	4b43      	ldr	r3, [pc, #268]	; (b86c <send_nav_values+0xd50>)
    b760:	781a      	ldrb	r2, [r3, #0]
    b762:	f24b 7365 	movw	r3, #46949	; 0xb765
    b766:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b76a:	781b      	ldrb	r3, [r3, #0]
    b76c:	4413      	add	r3, r2
    b76e:	b2da      	uxtb	r2, r3
    b770:	f24b 7365 	movw	r3, #46949	; 0xb765
    b774:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b778:	701a      	strb	r2, [r3, #0]
    b77a:	f24b 7366 	movw	r3, #46950	; 0xb766
    b77e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b782:	781a      	ldrb	r2, [r3, #0]
    b784:	f24b 7365 	movw	r3, #46949	; 0xb765
    b788:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b78c:	781b      	ldrb	r3, [r3, #0]
    b78e:	4413      	add	r3, r2
    b790:	b2da      	uxtb	r2, r3
    b792:	f24b 7366 	movw	r3, #46950	; 0xb766
    b796:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b79a:	701a      	strb	r2, [r3, #0]
    b79c:	f24b 6361 	movw	r3, #46689	; 0xb661
    b7a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7a4:	781b      	ldrb	r3, [r3, #0]
    b7a6:	3301      	adds	r3, #1
    b7a8:	b2da      	uxtb	r2, r3
    b7aa:	f24b 6361 	movw	r3, #46689	; 0xb661
    b7ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7b2:	701a      	strb	r2, [r3, #0]
    b7b4:	f24b 6361 	movw	r3, #46689	; 0xb661
    b7b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7bc:	781b      	ldrb	r3, [r3, #0]
    b7be:	2bff      	cmp	r3, #255	; 0xff
    b7c0:	d105      	bne.n	b7ce <send_nav_values+0xcb2>
    b7c2:	f24b 6361 	movw	r3, #46689	; 0xb661
    b7c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7ca:	2200      	movs	r2, #0
    b7cc:	701a      	strb	r2, [r3, #0]
    b7ce:	f24b 6361 	movw	r3, #46689	; 0xb661
    b7d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7d6:	781b      	ldrb	r3, [r3, #0]
    b7d8:	461a      	mov	r2, r3
    b7da:	f240 1354 	movw	r3, #340	; 0x154
    b7de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7e2:	7899      	ldrb	r1, [r3, #2]
    b7e4:	f24b 6364 	movw	r3, #46692	; 0xb664
    b7e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7ec:	5499      	strb	r1, [r3, r2]
    b7ee:	4b20      	ldr	r3, [pc, #128]	; (b870 <send_nav_values+0xd54>)
    b7f0:	781a      	ldrb	r2, [r3, #0]
    b7f2:	f24b 7365 	movw	r3, #46949	; 0xb765
    b7f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7fa:	781b      	ldrb	r3, [r3, #0]
    b7fc:	4413      	add	r3, r2
    b7fe:	b2da      	uxtb	r2, r3
    b800:	f24b 7365 	movw	r3, #46949	; 0xb765
    b804:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b808:	701a      	strb	r2, [r3, #0]
    b80a:	f24b 7366 	movw	r3, #46950	; 0xb766
    b80e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b812:	781a      	ldrb	r2, [r3, #0]
    b814:	f24b 7365 	movw	r3, #46949	; 0xb765
    b818:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b81c:	781b      	ldrb	r3, [r3, #0]
    b81e:	4413      	add	r3, r2
    b820:	b2da      	uxtb	r2, r3
    b822:	f24b 7366 	movw	r3, #46950	; 0xb766
    b826:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b82a:	701a      	strb	r2, [r3, #0]
    b82c:	f24b 6361 	movw	r3, #46689	; 0xb661
    b830:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b834:	781b      	ldrb	r3, [r3, #0]
    b836:	3301      	adds	r3, #1
    b838:	b2da      	uxtb	r2, r3
    b83a:	f24b 6361 	movw	r3, #46689	; 0xb661
    b83e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b842:	701a      	strb	r2, [r3, #0]
    b844:	f24b 6361 	movw	r3, #46689	; 0xb661
    b848:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b84c:	781b      	ldrb	r3, [r3, #0]
    b84e:	2bff      	cmp	r3, #255	; 0xff
    b850:	d110      	bne.n	b874 <send_nav_values+0xd58>
    b852:	f24b 6361 	movw	r3, #46689	; 0xb661
    b856:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b85a:	2200      	movs	r2, #0
    b85c:	701a      	strb	r2, [r3, #0]
    b85e:	e009      	b.n	b874 <send_nav_values+0xd58>
    b860:	2004b9ed 	.word	0x2004b9ed
    b864:	2004b9ee 	.word	0x2004b9ee
    b868:	2004b9ef 	.word	0x2004b9ef
    b86c:	20000155 	.word	0x20000155
    b870:	20000156 	.word	0x20000156
    b874:	f24b 6361 	movw	r3, #46689	; 0xb661
    b878:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b87c:	781b      	ldrb	r3, [r3, #0]
    b87e:	461a      	mov	r2, r3
    b880:	f240 1354 	movw	r3, #340	; 0x154
    b884:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b888:	78d9      	ldrb	r1, [r3, #3]
    b88a:	f24b 6364 	movw	r3, #46692	; 0xb664
    b88e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b892:	5499      	strb	r1, [r3, r2]
    b894:	4bc2      	ldr	r3, [pc, #776]	; (bba0 <send_nav_values+0x1084>)
    b896:	781a      	ldrb	r2, [r3, #0]
    b898:	f24b 7365 	movw	r3, #46949	; 0xb765
    b89c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8a0:	781b      	ldrb	r3, [r3, #0]
    b8a2:	4413      	add	r3, r2
    b8a4:	b2da      	uxtb	r2, r3
    b8a6:	f24b 7365 	movw	r3, #46949	; 0xb765
    b8aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8ae:	701a      	strb	r2, [r3, #0]
    b8b0:	f24b 7366 	movw	r3, #46950	; 0xb766
    b8b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8b8:	781a      	ldrb	r2, [r3, #0]
    b8ba:	f24b 7365 	movw	r3, #46949	; 0xb765
    b8be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8c2:	781b      	ldrb	r3, [r3, #0]
    b8c4:	4413      	add	r3, r2
    b8c6:	b2da      	uxtb	r2, r3
    b8c8:	f24b 7366 	movw	r3, #46950	; 0xb766
    b8cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8d0:	701a      	strb	r2, [r3, #0]
    b8d2:	f24b 6361 	movw	r3, #46689	; 0xb661
    b8d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8da:	781b      	ldrb	r3, [r3, #0]
    b8dc:	3301      	adds	r3, #1
    b8de:	b2da      	uxtb	r2, r3
    b8e0:	f24b 6361 	movw	r3, #46689	; 0xb661
    b8e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8e8:	701a      	strb	r2, [r3, #0]
    b8ea:	f24b 6361 	movw	r3, #46689	; 0xb661
    b8ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8f2:	781b      	ldrb	r3, [r3, #0]
    b8f4:	2bff      	cmp	r3, #255	; 0xff
    b8f6:	d105      	bne.n	b904 <send_nav_values+0xde8>
    b8f8:	f24b 6361 	movw	r3, #46689	; 0xb661
    b8fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b900:	2200      	movs	r2, #0
    b902:	701a      	strb	r2, [r3, #0]
    b904:	f24b 6361 	movw	r3, #46689	; 0xb661
    b908:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b90c:	781b      	ldrb	r3, [r3, #0]
    b90e:	461a      	mov	r2, r3
    b910:	f64b 13f0 	movw	r3, #47600	; 0xb9f0
    b914:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b918:	7819      	ldrb	r1, [r3, #0]
    b91a:	f24b 6364 	movw	r3, #46692	; 0xb664
    b91e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b922:	5499      	strb	r1, [r3, r2]
    b924:	f64b 13f0 	movw	r3, #47600	; 0xb9f0
    b928:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b92c:	781a      	ldrb	r2, [r3, #0]
    b92e:	f24b 7365 	movw	r3, #46949	; 0xb765
    b932:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b936:	781b      	ldrb	r3, [r3, #0]
    b938:	4413      	add	r3, r2
    b93a:	b2da      	uxtb	r2, r3
    b93c:	f24b 7365 	movw	r3, #46949	; 0xb765
    b940:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b944:	701a      	strb	r2, [r3, #0]
    b946:	f24b 7366 	movw	r3, #46950	; 0xb766
    b94a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b94e:	781a      	ldrb	r2, [r3, #0]
    b950:	f24b 7365 	movw	r3, #46949	; 0xb765
    b954:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b958:	781b      	ldrb	r3, [r3, #0]
    b95a:	4413      	add	r3, r2
    b95c:	b2da      	uxtb	r2, r3
    b95e:	f24b 7366 	movw	r3, #46950	; 0xb766
    b962:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b966:	701a      	strb	r2, [r3, #0]
    b968:	f24b 6361 	movw	r3, #46689	; 0xb661
    b96c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b970:	781b      	ldrb	r3, [r3, #0]
    b972:	3301      	adds	r3, #1
    b974:	b2da      	uxtb	r2, r3
    b976:	f24b 6361 	movw	r3, #46689	; 0xb661
    b97a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b97e:	701a      	strb	r2, [r3, #0]
    b980:	f24b 6361 	movw	r3, #46689	; 0xb661
    b984:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b988:	781b      	ldrb	r3, [r3, #0]
    b98a:	2bff      	cmp	r3, #255	; 0xff
    b98c:	d105      	bne.n	b99a <send_nav_values+0xe7e>
    b98e:	f24b 6361 	movw	r3, #46689	; 0xb661
    b992:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b996:	2200      	movs	r2, #0
    b998:	701a      	strb	r2, [r3, #0]
    b99a:	f24b 6361 	movw	r3, #46689	; 0xb661
    b99e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9a2:	781b      	ldrb	r3, [r3, #0]
    b9a4:	461a      	mov	r2, r3
    b9a6:	f64b 13f0 	movw	r3, #47600	; 0xb9f0
    b9aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9ae:	7859      	ldrb	r1, [r3, #1]
    b9b0:	f24b 6364 	movw	r3, #46692	; 0xb664
    b9b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9b8:	5499      	strb	r1, [r3, r2]
    b9ba:	4b7a      	ldr	r3, [pc, #488]	; (bba4 <send_nav_values+0x1088>)
    b9bc:	781a      	ldrb	r2, [r3, #0]
    b9be:	f24b 7365 	movw	r3, #46949	; 0xb765
    b9c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9c6:	781b      	ldrb	r3, [r3, #0]
    b9c8:	4413      	add	r3, r2
    b9ca:	b2da      	uxtb	r2, r3
    b9cc:	f24b 7365 	movw	r3, #46949	; 0xb765
    b9d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9d4:	701a      	strb	r2, [r3, #0]
    b9d6:	f24b 7366 	movw	r3, #46950	; 0xb766
    b9da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9de:	781a      	ldrb	r2, [r3, #0]
    b9e0:	f24b 7365 	movw	r3, #46949	; 0xb765
    b9e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9e8:	781b      	ldrb	r3, [r3, #0]
    b9ea:	4413      	add	r3, r2
    b9ec:	b2da      	uxtb	r2, r3
    b9ee:	f24b 7366 	movw	r3, #46950	; 0xb766
    b9f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9f6:	701a      	strb	r2, [r3, #0]
    b9f8:	f24b 6361 	movw	r3, #46689	; 0xb661
    b9fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba00:	781b      	ldrb	r3, [r3, #0]
    ba02:	3301      	adds	r3, #1
    ba04:	b2da      	uxtb	r2, r3
    ba06:	f24b 6361 	movw	r3, #46689	; 0xb661
    ba0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba0e:	701a      	strb	r2, [r3, #0]
    ba10:	f24b 6361 	movw	r3, #46689	; 0xb661
    ba14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba18:	781b      	ldrb	r3, [r3, #0]
    ba1a:	2bff      	cmp	r3, #255	; 0xff
    ba1c:	d105      	bne.n	ba2a <send_nav_values+0xf0e>
    ba1e:	f24b 6361 	movw	r3, #46689	; 0xb661
    ba22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba26:	2200      	movs	r2, #0
    ba28:	701a      	strb	r2, [r3, #0]
    ba2a:	f24b 6361 	movw	r3, #46689	; 0xb661
    ba2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba32:	781b      	ldrb	r3, [r3, #0]
    ba34:	461a      	mov	r2, r3
    ba36:	f64b 13f0 	movw	r3, #47600	; 0xb9f0
    ba3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba3e:	7899      	ldrb	r1, [r3, #2]
    ba40:	f24b 6364 	movw	r3, #46692	; 0xb664
    ba44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba48:	5499      	strb	r1, [r3, r2]
    ba4a:	4b57      	ldr	r3, [pc, #348]	; (bba8 <send_nav_values+0x108c>)
    ba4c:	781a      	ldrb	r2, [r3, #0]
    ba4e:	f24b 7365 	movw	r3, #46949	; 0xb765
    ba52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba56:	781b      	ldrb	r3, [r3, #0]
    ba58:	4413      	add	r3, r2
    ba5a:	b2da      	uxtb	r2, r3
    ba5c:	f24b 7365 	movw	r3, #46949	; 0xb765
    ba60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba64:	701a      	strb	r2, [r3, #0]
    ba66:	f24b 7366 	movw	r3, #46950	; 0xb766
    ba6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba6e:	781a      	ldrb	r2, [r3, #0]
    ba70:	f24b 7365 	movw	r3, #46949	; 0xb765
    ba74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba78:	781b      	ldrb	r3, [r3, #0]
    ba7a:	4413      	add	r3, r2
    ba7c:	b2da      	uxtb	r2, r3
    ba7e:	f24b 7366 	movw	r3, #46950	; 0xb766
    ba82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba86:	701a      	strb	r2, [r3, #0]
    ba88:	f24b 6361 	movw	r3, #46689	; 0xb661
    ba8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba90:	781b      	ldrb	r3, [r3, #0]
    ba92:	3301      	adds	r3, #1
    ba94:	b2da      	uxtb	r2, r3
    ba96:	f24b 6361 	movw	r3, #46689	; 0xb661
    ba9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba9e:	701a      	strb	r2, [r3, #0]
    baa0:	f24b 6361 	movw	r3, #46689	; 0xb661
    baa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    baa8:	781b      	ldrb	r3, [r3, #0]
    baaa:	2bff      	cmp	r3, #255	; 0xff
    baac:	d105      	bne.n	baba <send_nav_values+0xf9e>
    baae:	f24b 6361 	movw	r3, #46689	; 0xb661
    bab2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bab6:	2200      	movs	r2, #0
    bab8:	701a      	strb	r2, [r3, #0]
    baba:	f24b 6361 	movw	r3, #46689	; 0xb661
    babe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bac2:	781b      	ldrb	r3, [r3, #0]
    bac4:	461a      	mov	r2, r3
    bac6:	f64b 13f0 	movw	r3, #47600	; 0xb9f0
    baca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bace:	78d9      	ldrb	r1, [r3, #3]
    bad0:	f24b 6364 	movw	r3, #46692	; 0xb664
    bad4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bad8:	5499      	strb	r1, [r3, r2]
    bada:	4b34      	ldr	r3, [pc, #208]	; (bbac <send_nav_values+0x1090>)
    badc:	781a      	ldrb	r2, [r3, #0]
    bade:	f24b 7365 	movw	r3, #46949	; 0xb765
    bae2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bae6:	781b      	ldrb	r3, [r3, #0]
    bae8:	4413      	add	r3, r2
    baea:	b2da      	uxtb	r2, r3
    baec:	f24b 7365 	movw	r3, #46949	; 0xb765
    baf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    baf4:	701a      	strb	r2, [r3, #0]
    baf6:	f24b 7366 	movw	r3, #46950	; 0xb766
    bafa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bafe:	781a      	ldrb	r2, [r3, #0]
    bb00:	f24b 7365 	movw	r3, #46949	; 0xb765
    bb04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb08:	781b      	ldrb	r3, [r3, #0]
    bb0a:	4413      	add	r3, r2
    bb0c:	b2da      	uxtb	r2, r3
    bb0e:	f24b 7366 	movw	r3, #46950	; 0xb766
    bb12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb16:	701a      	strb	r2, [r3, #0]
    bb18:	f24b 6361 	movw	r3, #46689	; 0xb661
    bb1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb20:	781b      	ldrb	r3, [r3, #0]
    bb22:	3301      	adds	r3, #1
    bb24:	b2da      	uxtb	r2, r3
    bb26:	f24b 6361 	movw	r3, #46689	; 0xb661
    bb2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb2e:	701a      	strb	r2, [r3, #0]
    bb30:	f24b 6361 	movw	r3, #46689	; 0xb661
    bb34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb38:	781b      	ldrb	r3, [r3, #0]
    bb3a:	2bff      	cmp	r3, #255	; 0xff
    bb3c:	d105      	bne.n	bb4a <send_nav_values+0x102e>
    bb3e:	f24b 6361 	movw	r3, #46689	; 0xb661
    bb42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb46:	2200      	movs	r2, #0
    bb48:	701a      	strb	r2, [r3, #0]
    bb4a:	f24b 6361 	movw	r3, #46689	; 0xb661
    bb4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb52:	781b      	ldrb	r3, [r3, #0]
    bb54:	461a      	mov	r2, r3
    bb56:	f24b 7365 	movw	r3, #46949	; 0xb765
    bb5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb5e:	7819      	ldrb	r1, [r3, #0]
    bb60:	f24b 6364 	movw	r3, #46692	; 0xb664
    bb64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb68:	5499      	strb	r1, [r3, r2]
    bb6a:	f24b 6361 	movw	r3, #46689	; 0xb661
    bb6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb72:	781b      	ldrb	r3, [r3, #0]
    bb74:	3301      	adds	r3, #1
    bb76:	b2da      	uxtb	r2, r3
    bb78:	f24b 6361 	movw	r3, #46689	; 0xb661
    bb7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb80:	701a      	strb	r2, [r3, #0]
    bb82:	f24b 6361 	movw	r3, #46689	; 0xb661
    bb86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb8a:	781b      	ldrb	r3, [r3, #0]
    bb8c:	2bff      	cmp	r3, #255	; 0xff
    bb8e:	d10f      	bne.n	bbb0 <send_nav_values+0x1094>
    bb90:	f24b 6361 	movw	r3, #46689	; 0xb661
    bb94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb98:	2200      	movs	r2, #0
    bb9a:	701a      	strb	r2, [r3, #0]
    bb9c:	e008      	b.n	bbb0 <send_nav_values+0x1094>
    bb9e:	bf00      	nop
    bba0:	20000157 	.word	0x20000157
    bba4:	2004b9f1 	.word	0x2004b9f1
    bba8:	2004b9f2 	.word	0x2004b9f2
    bbac:	2004b9f3 	.word	0x2004b9f3
    bbb0:	f24b 6361 	movw	r3, #46689	; 0xb661
    bbb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbb8:	781b      	ldrb	r3, [r3, #0]
    bbba:	461a      	mov	r2, r3
    bbbc:	f24b 7366 	movw	r3, #46950	; 0xb766
    bbc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbc4:	7819      	ldrb	r1, [r3, #0]
    bbc6:	f24b 6364 	movw	r3, #46692	; 0xb664
    bbca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbce:	5499      	strb	r1, [r3, r2]
    bbd0:	f24b 6361 	movw	r3, #46689	; 0xb661
    bbd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbd8:	781b      	ldrb	r3, [r3, #0]
    bbda:	3301      	adds	r3, #1
    bbdc:	b2da      	uxtb	r2, r3
    bbde:	f24b 6361 	movw	r3, #46689	; 0xb661
    bbe2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbe6:	701a      	strb	r2, [r3, #0]
    bbe8:	f24b 6361 	movw	r3, #46689	; 0xb661
    bbec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbf0:	781b      	ldrb	r3, [r3, #0]
    bbf2:	2bff      	cmp	r3, #255	; 0xff
    bbf4:	d105      	bne.n	bc02 <send_nav_values+0x10e6>
    bbf6:	f24b 6361 	movw	r3, #46689	; 0xb661
    bbfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbfe:	2200      	movs	r2, #0
    bc00:	701a      	strb	r2, [r3, #0]
    bc02:	f248 0339 	movw	r3, #32825	; 0x8039
    bc06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc0a:	781b      	ldrb	r3, [r3, #0]
    bc0c:	b2db      	uxtb	r3, r3
    bc0e:	f003 0310 	and.w	r3, r3, #16
    bc12:	2b00      	cmp	r3, #0
    bc14:	d15a      	bne.n	bccc <send_nav_values+0x11b0>
    bc16:	f24b 6362 	movw	r3, #46690	; 0xb662
    bc1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc1e:	781b      	ldrb	r3, [r3, #0]
    bc20:	b2db      	uxtb	r3, r3
    bc22:	461a      	mov	r2, r3
    bc24:	f24b 6364 	movw	r3, #46692	; 0xb664
    bc28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc2c:	5c9a      	ldrb	r2, [r3, r2]
    bc2e:	f24b 7363 	movw	r3, #46947	; 0xb763
    bc32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc36:	701a      	strb	r2, [r3, #0]
    bc38:	f24b 7364 	movw	r3, #46948	; 0xb764
    bc3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc40:	2200      	movs	r2, #0
    bc42:	701a      	strb	r2, [r3, #0]
    bc44:	f24b 6362 	movw	r3, #46690	; 0xb662
    bc48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc4c:	781b      	ldrb	r3, [r3, #0]
    bc4e:	b2db      	uxtb	r3, r3
    bc50:	3301      	adds	r3, #1
    bc52:	b2da      	uxtb	r2, r3
    bc54:	f24b 6362 	movw	r3, #46690	; 0xb662
    bc58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc5c:	701a      	strb	r2, [r3, #0]
    bc5e:	f24b 6362 	movw	r3, #46690	; 0xb662
    bc62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc66:	781b      	ldrb	r3, [r3, #0]
    bc68:	b2db      	uxtb	r3, r3
    bc6a:	2bff      	cmp	r3, #255	; 0xff
    bc6c:	d105      	bne.n	bc7a <send_nav_values+0x115e>
    bc6e:	f24b 6362 	movw	r3, #46690	; 0xb662
    bc72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc76:	2200      	movs	r2, #0
    bc78:	701a      	strb	r2, [r3, #0]
    bc7a:	f248 0338 	movw	r3, #32824	; 0x8038
    bc7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc82:	f248 0238 	movw	r2, #32824	; 0x8038
    bc86:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bc8a:	7812      	ldrb	r2, [r2, #0]
    bc8c:	b2d2      	uxtb	r2, r2
    bc8e:	f042 0201 	orr.w	r2, r2, #1
    bc92:	b2d2      	uxtb	r2, r2
    bc94:	701a      	strb	r2, [r3, #0]
    bc96:	f248 0339 	movw	r3, #32825	; 0x8039
    bc9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc9e:	f248 0239 	movw	r2, #32825	; 0x8039
    bca2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bca6:	7812      	ldrb	r2, [r2, #0]
    bca8:	b2d2      	uxtb	r2, r2
    bcaa:	f042 0210 	orr.w	r2, r2, #16
    bcae:	b2d2      	uxtb	r2, r2
    bcb0:	701a      	strb	r2, [r3, #0]
    bcb2:	e00b      	b.n	bccc <send_nav_values+0x11b0>
    bcb4:	f24b 6360 	movw	r3, #46688	; 0xb660
    bcb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcbc:	781b      	ldrb	r3, [r3, #0]
    bcbe:	3301      	adds	r3, #1
    bcc0:	b2da      	uxtb	r2, r3
    bcc2:	f24b 6360 	movw	r3, #46688	; 0xb660
    bcc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcca:	701a      	strb	r2, [r3, #0]
}
    bccc:	46bd      	mov	sp, r7
    bcce:	f85d 7b04 	ldr.w	r7, [sp], #4
    bcd2:	4770      	bx	lr

0000bcd4 <course_run>:

void course_run(void){
    bcd4:	b580      	push	{r7, lr}
    bcd6:	af00      	add	r7, sp, #0
  
  if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) 
    bcd8:	f24b 6344 	movw	r3, #46660	; 0xb644
    bcdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bce0:	781b      	ldrb	r3, [r3, #0]
    bce2:	2b02      	cmp	r3, #2
    bce4:	d006      	beq.n	bcf4 <course_run+0x20>
    bce6:	f24b 6344 	movw	r3, #46660	; 0xb644
    bcea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcee:	781b      	ldrb	r3, [r3, #0]
    bcf0:	2b03      	cmp	r3, #3
    bcf2:	d112      	bne.n	bd1a <course_run+0x46>
  {
    if (lateral_mode >= LATERAL_MODE_COURSE)
    bcf4:	f24b 6346 	movw	r3, #46662	; 0xb646
    bcf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcfc:	781b      	ldrb	r3, [r3, #0]
    bcfe:	2b02      	cmp	r3, #2
    bd00:	d901      	bls.n	bd06 <course_run+0x32>
      course_pid_run(); /* aka compute nav_desired_roll */
    bd02:	f001 f98d 	bl	d020 <course_pid_run>
    desired_roll = nav_desired_roll;
    bd06:	f64b 13e8 	movw	r3, #47592	; 0xb9e8
    bd0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd0e:	681a      	ldr	r2, [r3, #0]
    bd10:	f64b 138c 	movw	r3, #47500	; 0xb98c
    bd14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd18:	601a      	str	r2, [r3, #0]
  }  
  //vPrintString("S_17 Navigation task end!\n\r");
}
    bd1a:	bd80      	pop	{r7, pc}

0000bd1c <altitude_control_task>:

void altitude_control_task(void)
{
    bd1c:	b580      	push	{r7, lr}
    bd1e:	af00      	add	r7, sp, #0
	//vPrintString("S_18 navigation_task start! \n\r"); //SunnyBeike
	if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) {
    bd20:	f24b 6344 	movw	r3, #46660	; 0xb644
    bd24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd28:	781b      	ldrb	r3, [r3, #0]
    bd2a:	2b02      	cmp	r3, #2
    bd2c:	d006      	beq.n	bd3c <altitude_control_task+0x20>
    bd2e:	f24b 6344 	movw	r3, #46660	; 0xb644
    bd32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd36:	781b      	ldrb	r3, [r3, #0]
    bd38:	2b03      	cmp	r3, #3
    bd3a:	d108      	bne.n	bd4e <altitude_control_task+0x32>
		if (vertical_mode == VERTICAL_MODE_AUTO_ALT)
    bd3c:	f24b 6345 	movw	r3, #46661	; 0xb645
    bd40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd44:	781b      	ldrb	r3, [r3, #0]
    bd46:	2b03      	cmp	r3, #3
    bd48:	d101      	bne.n	bd4e <altitude_control_task+0x32>
      			altitude_pid_run();
    bd4a:	f001 fbf1 	bl	d530 <altitude_pid_run>
	}
	//vPrintString("S_18 navigation_task end! \n\r"); //SunnyBeike
}
    bd4e:	bd80      	pop	{r7, pc}

0000bd50 <climb_control_task>:
void climb_control_task(void)
{
    bd50:	b580      	push	{r7, lr}
    bd52:	af00      	add	r7, sp, #0
	//vPrintString("S_19 navigation_task start! \n\r"); //SunnyBeike
   if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) 
    bd54:	f24b 6344 	movw	r3, #46660	; 0xb644
    bd58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd5c:	781b      	ldrb	r3, [r3, #0]
    bd5e:	2b02      	cmp	r3, #2
    bd60:	d006      	beq.n	bd70 <climb_control_task+0x20>
    bd62:	f24b 6344 	movw	r3, #46660	; 0xb644
    bd66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd6a:	781b      	ldrb	r3, [r3, #0]
    bd6c:	2b03      	cmp	r3, #3
    bd6e:	d135      	bne.n	bddc <climb_control_task+0x8c>
   {
	if (vertical_mode >= VERTICAL_MODE_AUTO_CLIMB)
    bd70:	f24b 6345 	movw	r3, #46661	; 0xb645
    bd74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd78:	781b      	ldrb	r3, [r3, #0]
    bd7a:	2b01      	cmp	r3, #1
    bd7c:	d901      	bls.n	bd82 <climb_control_task+0x32>
        	climb_pid_run();
    bd7e:	f001 fa07 	bl	d190 <climb_pid_run>
   	if (vertical_mode == VERTICAL_MODE_AUTO_GAZ)
    bd82:	f24b 6345 	movw	r3, #46661	; 0xb645
    bd86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd8a:	781b      	ldrb	r3, [r3, #0]
    bd8c:	2b01      	cmp	r3, #1
    bd8e:	d10a      	bne.n	bda6 <climb_control_task+0x56>
   		 desired_gaz = nav_desired_gaz;
    bd90:	f64b 13e0 	movw	r3, #47584	; 0xb9e0
    bd94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd98:	881b      	ldrh	r3, [r3, #0]
    bd9a:	b29a      	uxth	r2, r3
    bd9c:	f64b 1394 	movw	r3, #47508	; 0xb994
    bda0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bda4:	801a      	strh	r2, [r3, #0]
   	if (low_battery || (!estimator_flight_time && !launch))
    bda6:	f24b 634d 	movw	r3, #46669	; 0xb64d
    bdaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdae:	781b      	ldrb	r3, [r3, #0]
    bdb0:	2b00      	cmp	r3, #0
    bdb2:	d10d      	bne.n	bdd0 <climb_control_task+0x80>
    bdb4:	f64b 4344 	movw	r3, #48196	; 0xbc44
    bdb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdbc:	881b      	ldrh	r3, [r3, #0]
    bdbe:	2b00      	cmp	r3, #0
    bdc0:	d10c      	bne.n	bddc <climb_control_task+0x8c>
    bdc2:	f24b 6358 	movw	r3, #46680	; 0xb658
    bdc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdca:	781b      	ldrb	r3, [r3, #0]
    bdcc:	2b00      	cmp	r3, #0
    bdce:	d105      	bne.n	bddc <climb_control_task+0x8c>
   		 desired_gaz = 0.;
    bdd0:	f64b 1394 	movw	r3, #47508	; 0xb994
    bdd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdd8:	2200      	movs	r2, #0
    bdda:	801a      	strh	r2, [r3, #0]
  }  
	//vPrintString("S_19 navigation_task end! \n\r"); //SunnyBeike
}
    bddc:	bd80      	pop	{r7, pc}
    bdde:	bf00      	nop

0000bde0 <stabilisation_task>:
//#endif
}
*/

void stabilisation_task(void)
{
    bde0:	b580      	push	{r7, lr}
    bde2:	af00      	add	r7, sp, #0
	//vPrintString("S_6 stabilisation_task start! \n\r"); //SunnyBeike
    ir_update();
    bde4:	f000 ffc2 	bl	cd6c <ir_update>
    estimator_update_state_infrared();
    bde8:	f004 fa48 	bl	1027c <estimator_update_state_infrared>
    roll_pitch_pid_run(); // Set  desired_aileron & desired_elevator
    bdec:	f001 f82c 	bl	ce48 <roll_pitch_pid_run>
    to_fbw.channels[RADIO_THROTTLE] = desired_gaz; // desired_gaz is set upon GPS message reception
    bdf0:	f64b 1394 	movw	r3, #47508	; 0xb994
    bdf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdf8:	881a      	ldrh	r2, [r3, #0]
    bdfa:	f24b 7380 	movw	r3, #46976	; 0xb780
    bdfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be02:	801a      	strh	r2, [r3, #0]
    to_fbw.channels[RADIO_ROLL] = desired_aileron;
    be04:	f64b 1396 	movw	r3, #47510	; 0xb996
    be08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be0c:	881a      	ldrh	r2, [r3, #0]
    be0e:	f24b 7380 	movw	r3, #46976	; 0xb780
    be12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be16:	805a      	strh	r2, [r3, #2]
#ifndef ANTON_T7
    to_fbw.channels[RADIO_PITCH] = desired_elevator;
    be18:	f64b 1398 	movw	r3, #47512	; 0xb998
    be1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be20:	881a      	ldrh	r2, [r3, #0]
    be22:	f24b 7380 	movw	r3, #46976	; 0xb780
    be26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be2a:	809a      	strh	r2, [r3, #4]
#endif
    
    // Code for camera stabilization, FIXME put that elsewhere
    to_fbw.channels[RADIO_GAIN1] = TRIM_PPRZ(MAX_PPRZ/0.75*(-estimator_phi));
    be2c:	f64b 4320 	movw	r3, #48160	; 0xbc20
    be30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be34:	681b      	ldr	r3, [r3, #0]
    be36:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    be3a:	4618      	mov	r0, r3
    be3c:	f006 fe98 	bl	12b70 <__aeabi_f2d>
    be40:	4602      	mov	r2, r0
    be42:	460b      	mov	r3, r1
    be44:	4610      	mov	r0, r2
    be46:	4619      	mov	r1, r3
    be48:	f04f 0200 	mov.w	r2, #0
    be4c:	f04f 0300 	mov.w	r3, #0
    be50:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    be54:	f006 fee0 	bl	12c18 <__aeabi_dmul>
    be58:	4602      	mov	r2, r0
    be5a:	460b      	mov	r3, r1
    be5c:	4610      	mov	r0, r2
    be5e:	4619      	mov	r1, r3
    be60:	f04f 0200 	mov.w	r2, #0
    be64:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    be68:	f2cc 03c2 	movt	r3, #49346	; 0xc0c2
    be6c:	f007 f946 	bl	130fc <__aeabi_dcmplt>
    be70:	4603      	mov	r3, r0
    be72:	2b00      	cmp	r3, #0
    be74:	d002      	beq.n	be7c <stabilisation_task+0x9c>
    be76:	f64d 2280 	movw	r2, #55936	; 0xda80
    be7a:	e046      	b.n	bf0a <stabilisation_task+0x12a>
    be7c:	f64b 4320 	movw	r3, #48160	; 0xbc20
    be80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be84:	681b      	ldr	r3, [r3, #0]
    be86:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    be8a:	4618      	mov	r0, r3
    be8c:	f006 fe70 	bl	12b70 <__aeabi_f2d>
    be90:	4602      	mov	r2, r0
    be92:	460b      	mov	r3, r1
    be94:	4610      	mov	r0, r2
    be96:	4619      	mov	r1, r3
    be98:	f04f 0200 	mov.w	r2, #0
    be9c:	f04f 0300 	mov.w	r3, #0
    bea0:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    bea4:	f006 feb8 	bl	12c18 <__aeabi_dmul>
    bea8:	4602      	mov	r2, r0
    beaa:	460b      	mov	r3, r1
    beac:	4610      	mov	r0, r2
    beae:	4619      	mov	r1, r3
    beb0:	f04f 0200 	mov.w	r2, #0
    beb4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    beb8:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
    bebc:	f007 f93c 	bl	13138 <__aeabi_dcmpgt>
    bec0:	4603      	mov	r3, r0
    bec2:	2b00      	cmp	r3, #0
    bec4:	d002      	beq.n	becc <stabilisation_task+0xec>
    bec6:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    beca:	e01d      	b.n	bf08 <stabilisation_task+0x128>
    becc:	f64b 4320 	movw	r3, #48160	; 0xbc20
    bed0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bed4:	681b      	ldr	r3, [r3, #0]
    bed6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    beda:	4618      	mov	r0, r3
    bedc:	f006 fe48 	bl	12b70 <__aeabi_f2d>
    bee0:	4602      	mov	r2, r0
    bee2:	460b      	mov	r3, r1
    bee4:	4610      	mov	r0, r2
    bee6:	4619      	mov	r1, r3
    bee8:	f04f 0200 	mov.w	r2, #0
    beec:	f04f 0300 	mov.w	r3, #0
    bef0:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    bef4:	f006 fe90 	bl	12c18 <__aeabi_dmul>
    bef8:	4602      	mov	r2, r0
    befa:	460b      	mov	r3, r1
    befc:	4610      	mov	r0, r2
    befe:	4619      	mov	r1, r3
    bf00:	f007 f924 	bl	1314c <__aeabi_d2iz>
    bf04:	4603      	mov	r3, r0
    bf06:	b29b      	uxth	r3, r3
    bf08:	b29a      	uxth	r2, r3
    bf0a:	f24b 7380 	movw	r3, #46976	; 0xb780
    bf0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf12:	815a      	strh	r2, [r3, #10]
	//vPrintString("S_6 stabilisation_task end! \n\r"); //SunnyBeike
}
    bf14:	bd80      	pop	{r7, pc}
    bf16:	bf00      	nop

0000bf18 <use_gps_pos>:
 * than \a MIN_SPEED_FOR_TAKEOFF, set the \a estimator_flight_time to 1 and \a
 * launch to true (which is not set in non auto launch. Then call
 * \a DOWNLINK_SEND_TAKEOFF
 */
void use_gps_pos()
{
    bf18:	b580      	push	{r7, lr}
    bf1a:	af00      	add	r7, sp, #0
    send_gps_pos();
    bf1c:	f000 f806 	bl	bf2c <send_gps_pos>
    send_radIR();
    bf20:	f000 f816 	bl	bf50 <send_radIR>
    send_takeOff();
    bf24:	f000 f81a 	bl	bf5c <send_takeOff>
}
    bf28:	bd80      	pop	{r7, pc}
    bf2a:	bf00      	nop

0000bf2c <send_gps_pos>:

void send_gps_pos( void ) {
    bf2c:	b580      	push	{r7, lr}
    bf2e:	af00      	add	r7, sp, #0
  gps_msg_received = FALSE;
    bf30:	f24b 73f5 	movw	r3, #47093	; 0xb7f5
    bf34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf38:	2200      	movs	r2, #0
    bf3a:	701a      	strb	r2, [r3, #0]
  if (gps_pos_available){
    bf3c:	f24b 73f6 	movw	r3, #47094	; 0xb7f6
    bf40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf44:	781b      	ldrb	r3, [r3, #0]
    bf46:	2b00      	cmp	r3, #0
    bf48:	d001      	beq.n	bf4e <send_gps_pos+0x22>
     //DOWNLINK_SEND_GPS(&gps_mode, &gps_utm_east, &gps_utm_north, &gps_fcourse, &gps_falt, &gps_fspeed,&gps_fclimb, &gps_ftow);
     estimator_update_state_gps();
    bf4a:	f004 fc3d 	bl	107c8 <estimator_update_state_gps>
  }
}
    bf4e:	bd80      	pop	{r7, pc}

0000bf50 <send_radIR>:

void send_radIR(void){
    bf50:	b480      	push	{r7}
    bf52:	af00      	add	r7, sp, #0
    if (gps_pos_available){
      //DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    }
}
    bf54:	46bd      	mov	sp, r7
    bf56:	f85d 7b04 	ldr.w	r7, [sp], #4
    bf5a:	4770      	bx	lr

0000bf5c <send_takeOff>:

void send_takeOff(void){
    bf5c:	b580      	push	{r7, lr}
    bf5e:	af00      	add	r7, sp, #0
  if (gps_pos_available){
    bf60:	f24b 73f6 	movw	r3, #47094	; 0xb7f6
    bf64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf68:	781b      	ldrb	r3, [r3, #0]
    bf6a:	2b00      	cmp	r3, #0
    bf6c:	d027      	beq.n	bfbe <send_takeOff+0x62>
     if (!estimator_flight_time && (estimator_hspeed_mod > MIN_SPEED_FOR_TAKEOFF)) {
    bf6e:	f64b 4344 	movw	r3, #48196	; 0xbc44
    bf72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf76:	881b      	ldrh	r3, [r3, #0]
    bf78:	2b00      	cmp	r3, #0
    bf7a:	d11a      	bne.n	bfb2 <send_takeOff+0x56>
    bf7c:	f64b 434c 	movw	r3, #48204	; 0xbc4c
    bf80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf84:	681b      	ldr	r3, [r3, #0]
    bf86:	4618      	mov	r0, r3
    bf88:	f04f 0100 	mov.w	r1, #0
    bf8c:	f2c4 01a0 	movt	r1, #16544	; 0x40a0
    bf90:	f007 fc3e 	bl	13810 <__aeabi_fcmpgt>
    bf94:	4603      	mov	r3, r0
    bf96:	2b00      	cmp	r3, #0
    bf98:	d00b      	beq.n	bfb2 <send_takeOff+0x56>
        estimator_flight_time = 1;
    bf9a:	f64b 4344 	movw	r3, #48196	; 0xbc44
    bf9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfa2:	2201      	movs	r2, #1
    bfa4:	801a      	strh	r2, [r3, #0]
        launch = TRUE; /* Not set in non auto launch */
    bfa6:	f24b 6358 	movw	r3, #46680	; 0xb658
    bfaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfae:	2201      	movs	r2, #1
    bfb0:	701a      	strb	r2, [r3, #0]
        //DOWNLINK_SEND_TAKEOFF(&cputime);
     }
     gps_pos_available = FALSE; 
    bfb2:	f24b 73f6 	movw	r3, #47094	; 0xb7f6
    bfb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfba:	2200      	movs	r2, #0
    bfbc:	701a      	strb	r2, [r3, #0]
  }
  //vPrintString("S_16 receive_gps_data_task end!\n\r");
}
    bfbe:	bd80      	pop	{r7, pc}

0000bfc0 <modem_init>:
uint8_t    tx_byte;
uint8_t    tx_byte_idx;

uint8_t ck_a, ck_b;

void modem_init( void ) {
    bfc0:	b480      	push	{r7}
    bfc2:	af00      	add	r7, sp, #0
  /* 
     on >= V1.2 boards, 4MHz modem clock is generated
     by one PWM module.
  */
#if defined CTL_BRD_V1_2 || defined CTL_BRD_V1_2_1
  MODEM_OSC_DDR |= _BV(MODEM_OSC);
    bfc4:	f248 0317 	movw	r3, #32791	; 0x8017
    bfc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bfcc:	f248 0217 	movw	r2, #32791	; 0x8017
    bfd0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bfd4:	7812      	ldrb	r2, [r2, #0]
    bfd6:	b2d2      	uxtb	r2, r2
    bfd8:	f042 0210 	orr.w	r2, r2, #16
    bfdc:	b2d2      	uxtb	r2, r2
    bfde:	701a      	strb	r2, [r3, #0]
  OCR0 = 1; /* 4MhZ */
    bfe0:	f248 0331 	movw	r3, #32817	; 0x8031
    bfe4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bfe8:	2201      	movs	r2, #1
    bfea:	701a      	strb	r2, [r3, #0]
  TCCR0 = _BV(WGM01) | _BV(COM00) | _BV(CS00);
    bfec:	f248 0333 	movw	r3, #32819	; 0x8033
    bff0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bff4:	2219      	movs	r2, #25
    bff6:	701a      	strb	r2, [r3, #0]
#endif

  /* setup TX_EN and TX_DATA pin as output */
  MODEM_TX_DDR |= _BV(MODEM_TX_EN) | _BV(MODEM_TX_DATA);
    bff8:	f248 0311 	movw	r3, #32785	; 0x8011
    bffc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c000:	f248 0211 	movw	r2, #32785	; 0x8011
    c004:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c008:	7812      	ldrb	r2, [r2, #0]
    c00a:	b2d2      	uxtb	r2, r2
    c00c:	f062 023f 	orn	r2, r2, #63	; 0x3f
    c010:	b2d2      	uxtb	r2, r2
    c012:	701a      	strb	r2, [r3, #0]
  /* data idles hight */
  sbi(MODEM_TX_PORT, MODEM_TX_DATA);
    c014:	f248 0312 	movw	r3, #32786	; 0x8012
    c018:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c01c:	f248 0212 	movw	r2, #32786	; 0x8012
    c020:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c024:	7812      	ldrb	r2, [r2, #0]
    c026:	b2d2      	uxtb	r2, r2
    c028:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    c02c:	b2d2      	uxtb	r2, r2
    c02e:	701a      	strb	r2, [r3, #0]
  /* enable transmitter */
  cbi(MODEM_TX_PORT, MODEM_TX_EN);
    c030:	f248 0312 	movw	r3, #32786	; 0x8012
    c034:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c038:	f248 0212 	movw	r2, #32786	; 0x8012
    c03c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c040:	7812      	ldrb	r2, [r2, #0]
    c042:	b2d2      	uxtb	r2, r2
    c044:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    c048:	b2d2      	uxtb	r2, r2
    c04a:	701a      	strb	r2, [r3, #0]
  /* set interrupt on failing edge of clock */
  MODEM_CLK_INT_REG |=  MODEM_CLK_INT_CFG;
    c04c:	f248 033a 	movw	r3, #32826	; 0x803a
    c050:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c054:	f248 023a 	movw	r2, #32826	; 0x803a
    c058:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c05c:	7812      	ldrb	r2, [r2, #0]
    c05e:	b2d2      	uxtb	r2, r2
    c060:	f042 0202 	orr.w	r2, r2, #2
    c064:	b2d2      	uxtb	r2, r2
    c066:	701a      	strb	r2, [r3, #0]
}
    c068:	46bd      	mov	sp, r7
    c06a:	f85d 7b04 	ldr.w	r7, [sp], #4
    c06e:	4770      	bx	lr

0000c070 <__vector_5>:

SIGNAL( MODEM_CLK_INT_SIG ) {
    c070:	b480      	push	{r7}
    c072:	af00      	add	r7, sp, #0
  /*  start bit         */
  if (tx_byte_idx == 0)
    c074:	f24b 7364 	movw	r3, #46948	; 0xb764
    c078:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c07c:	781b      	ldrb	r3, [r3, #0]
    c07e:	2b00      	cmp	r3, #0
    c080:	d10e      	bne.n	c0a0 <__vector_5+0x30>
    cbi(MODEM_TX_PORT, MODEM_TX_DATA);
    c082:	f248 0312 	movw	r3, #32786	; 0x8012
    c086:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c08a:	f248 0212 	movw	r2, #32786	; 0x8012
    c08e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c092:	7812      	ldrb	r2, [r2, #0]
    c094:	b2d2      	uxtb	r2, r2
    c096:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    c09a:	b2d2      	uxtb	r2, r2
    c09c:	701a      	strb	r2, [r3, #0]
    c09e:	e047      	b.n	c130 <__vector_5+0xc0>
  /* 8 data bits        */ 
  else if (tx_byte_idx < 9) {
    c0a0:	f24b 7364 	movw	r3, #46948	; 0xb764
    c0a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0a8:	781b      	ldrb	r3, [r3, #0]
    c0aa:	2b08      	cmp	r3, #8
    c0ac:	d832      	bhi.n	c114 <__vector_5+0xa4>
    if (tx_byte & 0x01)
    c0ae:	f24b 7363 	movw	r3, #46947	; 0xb763
    c0b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0b6:	781b      	ldrb	r3, [r3, #0]
    c0b8:	f003 0301 	and.w	r3, r3, #1
    c0bc:	2b00      	cmp	r3, #0
    c0be:	d00e      	beq.n	c0de <__vector_5+0x6e>
      sbi(MODEM_TX_PORT, MODEM_TX_DATA);
    c0c0:	f248 0312 	movw	r3, #32786	; 0x8012
    c0c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0c8:	f248 0212 	movw	r2, #32786	; 0x8012
    c0cc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c0d0:	7812      	ldrb	r2, [r2, #0]
    c0d2:	b2d2      	uxtb	r2, r2
    c0d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    c0d8:	b2d2      	uxtb	r2, r2
    c0da:	701a      	strb	r2, [r3, #0]
    c0dc:	e00d      	b.n	c0fa <__vector_5+0x8a>
    else
      cbi(MODEM_TX_PORT, MODEM_TX_DATA);
    c0de:	f248 0312 	movw	r3, #32786	; 0x8012
    c0e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0e6:	f248 0212 	movw	r2, #32786	; 0x8012
    c0ea:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c0ee:	7812      	ldrb	r2, [r2, #0]
    c0f0:	b2d2      	uxtb	r2, r2
    c0f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    c0f6:	b2d2      	uxtb	r2, r2
    c0f8:	701a      	strb	r2, [r3, #0]
    tx_byte >>= 1;
    c0fa:	f24b 7363 	movw	r3, #46947	; 0xb763
    c0fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c102:	781b      	ldrb	r3, [r3, #0]
    c104:	085b      	lsrs	r3, r3, #1
    c106:	b2da      	uxtb	r2, r3
    c108:	f24b 7363 	movw	r3, #46947	; 0xb763
    c10c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c110:	701a      	strb	r2, [r3, #0]
    c112:	e00d      	b.n	c130 <__vector_5+0xc0>
  }
  /* stop_bit           */
  else {
    sbi(MODEM_TX_PORT, MODEM_TX_DATA); 
    c114:	f248 0312 	movw	r3, #32786	; 0x8012
    c118:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c11c:	f248 0212 	movw	r2, #32786	; 0x8012
    c120:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c124:	7812      	ldrb	r2, [r2, #0]
    c126:	b2d2      	uxtb	r2, r2
    c128:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    c12c:	b2d2      	uxtb	r2, r2
    c12e:	701a      	strb	r2, [r3, #0]
  }
  tx_byte_idx++;
    c130:	f24b 7364 	movw	r3, #46948	; 0xb764
    c134:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c138:	781b      	ldrb	r3, [r3, #0]
    c13a:	3301      	adds	r3, #1
    c13c:	b2da      	uxtb	r2, r3
    c13e:	f24b 7364 	movw	r3, #46948	; 0xb764
    c142:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c146:	701a      	strb	r2, [r3, #0]
  /* next byte          */
  if (tx_byte_idx >= 10) {
    c148:	f24b 7364 	movw	r3, #46948	; 0xb764
    c14c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c150:	781b      	ldrb	r3, [r3, #0]
    c152:	2b09      	cmp	r3, #9
    c154:	d94d      	bls.n	c1f2 <__vector_5+0x182>
    /*  if we have nothing left to transmit */
    if( tx_head == tx_tail ) {
    c156:	f24b 6361 	movw	r3, #46689	; 0xb661
    c15a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c15e:	781a      	ldrb	r2, [r3, #0]
    c160:	f24b 6362 	movw	r3, #46690	; 0xb662
    c164:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c168:	781b      	ldrb	r3, [r3, #0]
    c16a:	b2db      	uxtb	r3, r3
    c16c:	429a      	cmp	r2, r3
    c16e:	d10e      	bne.n	c18e <__vector_5+0x11e>
      /* disable clock interrupt            */
      cbi( EIMSK, MODEM_CLK_INT );
    c170:	f248 0339 	movw	r3, #32825	; 0x8039
    c174:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c178:	f248 0239 	movw	r2, #32825	; 0x8039
    c17c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c180:	7812      	ldrb	r2, [r2, #0]
    c182:	b2d2      	uxtb	r2, r2
    c184:	f022 0210 	bic.w	r2, r2, #16
    c188:	b2d2      	uxtb	r2, r2
    c18a:	701a      	strb	r2, [r3, #0]
    c18c:	e031      	b.n	c1f2 <__vector_5+0x182>
    } else {
      /* else load next byte                  */
      MODEM_LOAD_NEXT_BYTE();  
    c18e:	f24b 6362 	movw	r3, #46690	; 0xb662
    c192:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c196:	781b      	ldrb	r3, [r3, #0]
    c198:	b2db      	uxtb	r3, r3
    c19a:	461a      	mov	r2, r3
    c19c:	f24b 6364 	movw	r3, #46692	; 0xb664
    c1a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1a4:	5c9a      	ldrb	r2, [r3, r2]
    c1a6:	f24b 7363 	movw	r3, #46947	; 0xb763
    c1aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1ae:	701a      	strb	r2, [r3, #0]
    c1b0:	f24b 7364 	movw	r3, #46948	; 0xb764
    c1b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1b8:	2200      	movs	r2, #0
    c1ba:	701a      	strb	r2, [r3, #0]
    c1bc:	f24b 6362 	movw	r3, #46690	; 0xb662
    c1c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1c4:	781b      	ldrb	r3, [r3, #0]
    c1c6:	b2db      	uxtb	r3, r3
    c1c8:	3301      	adds	r3, #1
    c1ca:	b2da      	uxtb	r2, r3
    c1cc:	f24b 6362 	movw	r3, #46690	; 0xb662
    c1d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1d4:	701a      	strb	r2, [r3, #0]
    c1d6:	f24b 6362 	movw	r3, #46690	; 0xb662
    c1da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1de:	781b      	ldrb	r3, [r3, #0]
    c1e0:	b2db      	uxtb	r3, r3
    c1e2:	2bff      	cmp	r3, #255	; 0xff
    c1e4:	d105      	bne.n	c1f2 <__vector_5+0x182>
    c1e6:	f24b 6362 	movw	r3, #46690	; 0xb662
    c1ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1ee:	2200      	movs	r2, #0
    c1f0:	701a      	strb	r2, [r3, #0]
    }
  }
}
    c1f2:	46bd      	mov	sp, r7
    c1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    c1f8:	4770      	bx	lr
    c1fa:	bf00      	nop

0000c1fc <link_fbw_init>:
uint8_t link_fbw_fbw_nb_err;

static uint8_t idx_buf;
static uint8_t xor_in, xor_out;

void link_fbw_init(void) {
    c1fc:	b480      	push	{r7}
    c1fe:	af00      	add	r7, sp, #0
  link_fbw_nb_err;
    c200:	f24b 7397 	movw	r3, #46999	; 0xb797
    c204:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c208:	781b      	ldrb	r3, [r3, #0]
  link_fbw_receive_complete = FALSE;  
    c20a:	f240 133a 	movw	r3, #314	; 0x13a
    c20e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c212:	2200      	movs	r2, #0
    c214:	701a      	strb	r2, [r3, #0]
}
    c216:	46bd      	mov	sp, r7
    c218:	f85d 7b04 	ldr.w	r7, [sp], #4
    c21c:	4770      	bx	lr
    c21e:	bf00      	nop

0000c220 <link_fbw_send>:

void link_fbw_send(void) {
    c220:	b480      	push	{r7}
    c222:	b083      	sub	sp, #12
    c224:	af00      	add	r7, sp, #0
    //vPrintString("S_7 link_fbw_send start! \n\r"); //SunnyBeike

    if (spi_cur_slave != SPI_NONE) 
    c226:	f24b 739c 	movw	r3, #47004	; 0xb79c
    c22a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c22e:	781b      	ldrb	r3, [r3, #0]
    c230:	b2db      	uxtb	r3, r3
    c232:	2b00      	cmp	r3, #0
    c234:	d00c      	beq.n	c250 <link_fbw_send+0x30>
    {
        spi_nb_ovrn++;
    c236:	f24b 739d 	movw	r3, #47005	; 0xb79d
    c23a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c23e:	781b      	ldrb	r3, [r3, #0]
    c240:	3301      	adds	r3, #1
    c242:	b2da      	uxtb	r2, r3
    c244:	f24b 739d 	movw	r3, #47005	; 0xb79d
    c248:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c24c:	701a      	strb	r2, [r3, #0]
        //vPrintString("S_7 link_fbw_send end! \n\r"); //SunnyBeike
        return;
    c24e:	e064      	b.n	c31a <link_fbw_send+0xfa>
    }

    /* Enable SPI, Master, set clock rate fck/16 */ 
    SPI_START(_BV(SPE) | _BV(MSTR) | _BV(SPR0)); // | _BV(SPR1);
    c250:	f248 030d 	movw	r3, #32781	; 0x800d
    c254:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c258:	2251      	movs	r2, #81	; 0x51
    c25a:	701a      	strb	r2, [r3, #0]
    c25c:	f248 030e 	movw	r3, #32782	; 0x800e
    c260:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c264:	781b      	ldrb	r3, [r3, #0]
    c266:	b2db      	uxtb	r3, r3
    c268:	b2db      	uxtb	r3, r3
    c26a:	b25b      	sxtb	r3, r3
    c26c:	2b00      	cmp	r3, #0
    c26e:	da05      	bge.n	c27c <link_fbw_send+0x5c>
    c270:	f248 030f 	movw	r3, #32783	; 0x800f
    c274:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c278:	781b      	ldrb	r3, [r3, #0]
    c27a:	71fb      	strb	r3, [r7, #7]
    c27c:	f248 030d 	movw	r3, #32781	; 0x800d
    c280:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c284:	f248 020d 	movw	r2, #32781	; 0x800d
    c288:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c28c:	7812      	ldrb	r2, [r2, #0]
    c28e:	b2d2      	uxtb	r2, r2
    c290:	f062 027f 	orn	r2, r2, #127	; 0x7f
    c294:	b2d2      	uxtb	r2, r2
    c296:	701a      	strb	r2, [r3, #0]
    SPI_SELECT_SLAVE0();
    c298:	f24b 739c 	movw	r3, #47004	; 0xb79c
    c29c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2a0:	2201      	movs	r2, #1
    c2a2:	701a      	strb	r2, [r3, #0]
    c2a4:	f248 0318 	movw	r3, #32792	; 0x8018
    c2a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2ac:	f248 0218 	movw	r2, #32792	; 0x8018
    c2b0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c2b4:	7812      	ldrb	r2, [r2, #0]
    c2b6:	b2d2      	uxtb	r2, r2
    c2b8:	f022 0201 	bic.w	r2, r2, #1
    c2bc:	b2d2      	uxtb	r2, r2
    c2be:	701a      	strb	r2, [r3, #0]

    idx_buf = 0;
    c2c0:	f24b 7399 	movw	r3, #47001	; 0xb799
    c2c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2c8:	2200      	movs	r2, #0
    c2ca:	701a      	strb	r2, [r3, #0]
    xor_in = 0;
    c2cc:	f24b 739a 	movw	r3, #47002	; 0xb79a
    c2d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2d4:	2200      	movs	r2, #0
    c2d6:	701a      	strb	r2, [r3, #0]
    xor_out = ((uint8_t*)&to_fbw)[idx_buf];
    c2d8:	f24b 7399 	movw	r3, #47001	; 0xb799
    c2dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2e0:	781b      	ldrb	r3, [r3, #0]
    c2e2:	461a      	mov	r2, r3
    c2e4:	f24b 7380 	movw	r3, #46976	; 0xb780
    c2e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2ec:	4413      	add	r3, r2
    c2ee:	781a      	ldrb	r2, [r3, #0]
    c2f0:	f24b 739b 	movw	r3, #47003	; 0xb79b
    c2f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2f8:	701a      	strb	r2, [r3, #0]
    SPDR = xor_out;
    c2fa:	f248 030f 	movw	r3, #32783	; 0x800f
    c2fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c302:	f24b 729b 	movw	r2, #47003	; 0xb79b
    c306:	f2c2 0204 	movt	r2, #8196	; 0x2004
    c30a:	7812      	ldrb	r2, [r2, #0]
    c30c:	701a      	strb	r2, [r3, #0]
    link_fbw_receive_valid = FALSE;
    c30e:	f24b 7396 	movw	r3, #46998	; 0xb796
    c312:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c316:	2200      	movs	r2, #0
    c318:	701a      	strb	r2, [r3, #0]
    // Other bytes will follow SIG_SPI interrupts
    //vPrintString("S_7 link_fbw_send end! \n\r"); //SunnyBeike
}
    c31a:	370c      	adds	r7, #12
    c31c:	46bd      	mov	sp, r7
    c31e:	f85d 7b04 	ldr.w	r7, [sp], #4
    c322:	4770      	bx	lr

0000c324 <link_fbw_on_spi_it>:

void link_fbw_on_spi_it( void ) {
    c324:	b480      	push	{r7}
    c326:	af00      	add	r7, sp, #0
  /* setup OCR1A to pop in 200 clock cycles */
  /* this leaves time for the slave (fbw)   */
  /* to process the byte we've sent and to  */
  /* prepare a new one to be sent           */
  OCR1A = TCNT1 + 200;
    c328:	f248 032a 	movw	r3, #32810	; 0x802a
    c32c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c330:	f248 022c 	movw	r2, #32812	; 0x802c
    c334:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c338:	8812      	ldrh	r2, [r2, #0]
    c33a:	b292      	uxth	r2, r2
    c33c:	32c8      	adds	r2, #200	; 0xc8
    c33e:	b292      	uxth	r2, r2
    c340:	801a      	strh	r2, [r3, #0]
  /* clear interrupt flag  */
  sbi(TIFR, OCF1A);
    c342:	f248 0336 	movw	r3, #32822	; 0x8036
    c346:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c34a:	f248 0236 	movw	r2, #32822	; 0x8036
    c34e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c352:	7812      	ldrb	r2, [r2, #0]
    c354:	b2d2      	uxtb	r2, r2
    c356:	f042 0210 	orr.w	r2, r2, #16
    c35a:	b2d2      	uxtb	r2, r2
    c35c:	701a      	strb	r2, [r3, #0]
  /* enable OC1A interrupt */
  sbi(TIMSK, OCIE1A);
    c35e:	f248 0337 	movw	r3, #32823	; 0x8037
    c362:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c366:	f248 0237 	movw	r2, #32823	; 0x8037
    c36a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c36e:	7812      	ldrb	r2, [r2, #0]
    c370:	b2d2      	uxtb	r2, r2
    c372:	f042 0210 	orr.w	r2, r2, #16
    c376:	b2d2      	uxtb	r2, r2
    c378:	701a      	strb	r2, [r3, #0]
}
    c37a:	46bd      	mov	sp, r7
    c37c:	f85d 7b04 	ldr.w	r7, [sp], #4
    c380:	4770      	bx	lr
    c382:	bf00      	nop

0000c384 <__vector_12>:


/* send the next byte */
SIGNAL(SIG_OUTPUT_COMPARE1A) {
    c384:	b480      	push	{r7}
    c386:	b083      	sub	sp, #12
    c388:	af00      	add	r7, sp, #0
  uint8_t tmp;

  /* disable OC1A interrupt */
  cbi(TIMSK, OCIE1A); 
    c38a:	f248 0337 	movw	r3, #32823	; 0x8037
    c38e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c392:	f248 0237 	movw	r2, #32823	; 0x8037
    c396:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c39a:	7812      	ldrb	r2, [r2, #0]
    c39c:	b2d2      	uxtb	r2, r2
    c39e:	f022 0210 	bic.w	r2, r2, #16
    c3a2:	b2d2      	uxtb	r2, r2
    c3a4:	701a      	strb	r2, [r3, #0]

  idx_buf++;
    c3a6:	f24b 7399 	movw	r3, #47001	; 0xb799
    c3aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3ae:	781b      	ldrb	r3, [r3, #0]
    c3b0:	3301      	adds	r3, #1
    c3b2:	b2da      	uxtb	r2, r3
    c3b4:	f24b 7399 	movw	r3, #47001	; 0xb799
    c3b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3bc:	701a      	strb	r2, [r3, #0]

  /* we have sent/received a complete frame */
  if (idx_buf == FRAME_LENGTH) {
    c3be:	f24b 7399 	movw	r3, #47001	; 0xb799
    c3c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3c6:	781b      	ldrb	r3, [r3, #0]
    c3c8:	2b17      	cmp	r3, #23
    c3ca:	d162      	bne.n	c492 <__vector_12+0x10e>
    /* read checksum from receive register  */
    tmp = SPDR;
    c3cc:	f248 030f 	movw	r3, #32783	; 0x800f
    c3d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3d4:	781b      	ldrb	r3, [r3, #0]
    c3d6:	71fb      	strb	r3, [r7, #7]
    /* notify valid frame                   */
    if (tmp == xor_in) {
    c3d8:	f24b 739a 	movw	r3, #47002	; 0xb79a
    c3dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3e0:	781b      	ldrb	r3, [r3, #0]
    c3e2:	79fa      	ldrb	r2, [r7, #7]
    c3e4:	429a      	cmp	r2, r3
    c3e6:	d110      	bne.n	c40a <__vector_12+0x86>
      link_fbw_receive_valid = TRUE;
    c3e8:	f24b 7396 	movw	r3, #46998	; 0xb796
    c3ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3f0:	2201      	movs	r2, #1
    c3f2:	701a      	strb	r2, [r3, #0]
      link_fbw_fbw_nb_err = from_fbw.nb_err;
    c3f4:	f24b 7368 	movw	r3, #46952	; 0xb768
    c3f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3fc:	7d1a      	ldrb	r2, [r3, #20]
    c3fe:	f24b 7398 	movw	r3, #47000	; 0xb798
    c402:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c406:	701a      	strb	r2, [r3, #0]
    c408:	e00c      	b.n	c424 <__vector_12+0xa0>
    }
    else
      link_fbw_nb_err++;
    c40a:	f24b 7397 	movw	r3, #46999	; 0xb797
    c40e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c412:	781b      	ldrb	r3, [r3, #0]
    c414:	b2db      	uxtb	r3, r3
    c416:	3301      	adds	r3, #1
    c418:	b2da      	uxtb	r2, r3
    c41a:	f24b 7397 	movw	r3, #46999	; 0xb797
    c41e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c422:	701a      	strb	r2, [r3, #0]
    link_fbw_receive_complete = TRUE;
    c424:	f240 133a 	movw	r3, #314	; 0x13a
    c428:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c42c:	2201      	movs	r2, #1
    c42e:	701a      	strb	r2, [r3, #0]
    /* unselect slave0                      */
    SPI_UNSELECT_SLAVE0();
    c430:	f24b 739c 	movw	r3, #47004	; 0xb79c
    c434:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c438:	2200      	movs	r2, #0
    c43a:	701a      	strb	r2, [r3, #0]
    c43c:	f248 0318 	movw	r3, #32792	; 0x8018
    c440:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c444:	f248 0218 	movw	r2, #32792	; 0x8018
    c448:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c44c:	7812      	ldrb	r2, [r2, #0]
    c44e:	b2d2      	uxtb	r2, r2
    c450:	f042 0201 	orr.w	r2, r2, #1
    c454:	b2d2      	uxtb	r2, r2
    c456:	701a      	strb	r2, [r3, #0]
    SPI_STOP();
    c458:	f248 030d 	movw	r3, #32781	; 0x800d
    c45c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c460:	f248 020d 	movw	r2, #32781	; 0x800d
    c464:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c468:	7812      	ldrb	r2, [r2, #0]
    c46a:	b2d2      	uxtb	r2, r2
    c46c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    c470:	b2d2      	uxtb	r2, r2
    c472:	701a      	strb	r2, [r3, #0]
    c474:	f248 030d 	movw	r3, #32781	; 0x800d
    c478:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c47c:	f248 020d 	movw	r2, #32781	; 0x800d
    c480:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c484:	7812      	ldrb	r2, [r2, #0]
    c486:	b2d2      	uxtb	r2, r2
    c488:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    c48c:	b2d2      	uxtb	r2, r2
    c48e:	701a      	strb	r2, [r3, #0]
    return;
    c490:	e051      	b.n	c536 <__vector_12+0x1b2>
  }

  /* we are sending/receiving payload       */
  if (idx_buf < FRAME_LENGTH - 1) {
    c492:	f24b 7399 	movw	r3, #47001	; 0xb799
    c496:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c49a:	781b      	ldrb	r3, [r3, #0]
    c49c:	2b15      	cmp	r3, #21
    c49e:	d820      	bhi.n	c4e2 <__vector_12+0x15e>
    /* place new payload byte in send register */
    tmp = ((uint8_t*)&to_fbw)[idx_buf];
    c4a0:	f24b 7399 	movw	r3, #47001	; 0xb799
    c4a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4a8:	781b      	ldrb	r3, [r3, #0]
    c4aa:	461a      	mov	r2, r3
    c4ac:	f24b 7380 	movw	r3, #46976	; 0xb780
    c4b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4b4:	4413      	add	r3, r2
    c4b6:	781b      	ldrb	r3, [r3, #0]
    c4b8:	71fb      	strb	r3, [r7, #7]
    SPI_SEND(tmp);
    c4ba:	f248 030f 	movw	r3, #32783	; 0x800f
    c4be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4c2:	79fa      	ldrb	r2, [r7, #7]
    c4c4:	701a      	strb	r2, [r3, #0]
    xor_out ^= tmp;
    c4c6:	f24b 739b 	movw	r3, #47003	; 0xb79b
    c4ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4ce:	781a      	ldrb	r2, [r3, #0]
    c4d0:	79fb      	ldrb	r3, [r7, #7]
    c4d2:	4053      	eors	r3, r2
    c4d4:	b2da      	uxtb	r2, r3
    c4d6:	f24b 739b 	movw	r3, #47003	; 0xb79b
    c4da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4de:	701a      	strb	r2, [r3, #0]
    c4e0:	e009      	b.n	c4f6 <__vector_12+0x172>
  } 
  /* we are done sending the payload */
  else { // idx_buf == FRAME_LENGTH - 1
    /* place checksum in send register */
    SPI_SEND(xor_out);
    c4e2:	f248 030f 	movw	r3, #32783	; 0x800f
    c4e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4ea:	f24b 729b 	movw	r2, #47003	; 0xb79b
    c4ee:	f2c2 0204 	movt	r2, #8196	; 0x2004
    c4f2:	7812      	ldrb	r2, [r2, #0]
    c4f4:	701a      	strb	r2, [r3, #0]
  }
  
  /* read the byte from receive register */
  tmp = SPDR;
    c4f6:	f248 030f 	movw	r3, #32783	; 0x800f
    c4fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4fe:	781b      	ldrb	r3, [r3, #0]
    c500:	71fb      	strb	r3, [r7, #7]
  ((uint8_t*)&from_fbw)[idx_buf-1] = tmp;
    c502:	f24b 7399 	movw	r3, #47001	; 0xb799
    c506:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c50a:	781b      	ldrb	r3, [r3, #0]
    c50c:	1e5a      	subs	r2, r3, #1
    c50e:	f24b 7368 	movw	r3, #46952	; 0xb768
    c512:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c516:	4413      	add	r3, r2
    c518:	79fa      	ldrb	r2, [r7, #7]
    c51a:	701a      	strb	r2, [r3, #0]
  xor_in ^= tmp;
    c51c:	f24b 739a 	movw	r3, #47002	; 0xb79a
    c520:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c524:	781a      	ldrb	r2, [r3, #0]
    c526:	79fb      	ldrb	r3, [r7, #7]
    c528:	4053      	eors	r3, r2
    c52a:	b2da      	uxtb	r2, r3
    c52c:	f24b 739a 	movw	r3, #47002	; 0xb79a
    c530:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c534:	701a      	strb	r2, [r3, #0]
}
    c536:	370c      	adds	r7, #12
    c538:	46bd      	mov	sp, r7
    c53a:	f85d 7b04 	ldr.w	r7, [sp], #4
    c53e:	4770      	bx	lr

0000c540 <spi_init>:
#include "ad7714.h"

volatile uint8_t spi_cur_slave;
uint8_t spi_nb_ovrn;

void spi_init( void) {
    c540:	b480      	push	{r7}
    c542:	af00      	add	r7, sp, #0
  /* Set MOSI and SCK output, all others input */ 
  SPI_DDR |= _BV(SPI_MOSI_PIN)| _BV(SPI_SCK_PIN); 
    c544:	f248 0317 	movw	r3, #32791	; 0x8017
    c548:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c54c:	f248 0217 	movw	r2, #32791	; 0x8017
    c550:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c554:	7812      	ldrb	r2, [r2, #0]
    c556:	b2d2      	uxtb	r2, r2
    c558:	f042 0206 	orr.w	r2, r2, #6
    c55c:	b2d2      	uxtb	r2, r2
    c55e:	701a      	strb	r2, [r3, #0]

  /* enable pull up for miso */
  //  SPI_PORT |= _BV(SPI_MISO_PIN);

  /* Set SS0 output */
  sbi( SPI_SS0_DDR, SPI_SS0_PIN);
    c560:	f248 0317 	movw	r3, #32791	; 0x8017
    c564:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c568:	f248 0217 	movw	r2, #32791	; 0x8017
    c56c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c570:	7812      	ldrb	r2, [r2, #0]
    c572:	b2d2      	uxtb	r2, r2
    c574:	f042 0201 	orr.w	r2, r2, #1
    c578:	b2d2      	uxtb	r2, r2
    c57a:	701a      	strb	r2, [r3, #0]
  /* SS0 idles high (don't select slave yet)*/
  SPI_UNSELECT_SLAVE0();
    c57c:	f24b 739c 	movw	r3, #47004	; 0xb79c
    c580:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c584:	2200      	movs	r2, #0
    c586:	701a      	strb	r2, [r3, #0]
    c588:	f248 0318 	movw	r3, #32792	; 0x8018
    c58c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c590:	f248 0218 	movw	r2, #32792	; 0x8018
    c594:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c598:	7812      	ldrb	r2, [r2, #0]
    c59a:	b2d2      	uxtb	r2, r2
    c59c:	f042 0201 	orr.w	r2, r2, #1
    c5a0:	b2d2      	uxtb	r2, r2
    c5a2:	701a      	strb	r2, [r3, #0]

  /* Set SS1 output */
  sbi( SPI_SS1_DDR, SPI_SS1_PIN);
    c5a4:	f248 0302 	movw	r3, #32770	; 0x8002
    c5a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5ac:	f248 0202 	movw	r2, #32770	; 0x8002
    c5b0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c5b4:	7812      	ldrb	r2, [r2, #0]
    c5b6:	b2d2      	uxtb	r2, r2
    c5b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
    c5bc:	b2d2      	uxtb	r2, r2
    c5be:	701a      	strb	r2, [r3, #0]
  /* SS1 idles high (don't select slave yet)*/
  SPI_UNSELECT_SLAVE1();
    c5c0:	f24b 739c 	movw	r3, #47004	; 0xb79c
    c5c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5c8:	2200      	movs	r2, #0
    c5ca:	701a      	strb	r2, [r3, #0]
    c5cc:	f248 0303 	movw	r3, #32771	; 0x8003
    c5d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5d4:	f248 0203 	movw	r2, #32771	; 0x8003
    c5d8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c5dc:	7812      	ldrb	r2, [r2, #0]
    c5de:	b2d2      	uxtb	r2, r2
    c5e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
    c5e4:	b2d2      	uxtb	r2, r2
    c5e6:	701a      	strb	r2, [r3, #0]
  
  spi_cur_slave = SPI_NONE;
    c5e8:	f24b 739c 	movw	r3, #47004	; 0xb79c
    c5ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5f0:	2200      	movs	r2, #0
    c5f2:	701a      	strb	r2, [r3, #0]
}
    c5f4:	46bd      	mov	sp, r7
    c5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    c5fa:	4770      	bx	lr

0000c5fc <__vector_17>:


SIGNAL(SIG_SPI) {
    c5fc:	b580      	push	{r7, lr}
    c5fe:	af00      	add	r7, sp, #0
  if (spi_cur_slave == SPI_SLAVE0)
    c600:	f24b 739c 	movw	r3, #47004	; 0xb79c
    c604:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c608:	781b      	ldrb	r3, [r3, #0]
    c60a:	b2db      	uxtb	r3, r3
    c60c:	2b01      	cmp	r3, #1
    c60e:	d102      	bne.n	c616 <__vector_17+0x1a>
    link_fbw_on_spi_it();
    c610:	f7ff fe88 	bl	c324 <link_fbw_on_spi_it>
    c614:	e00b      	b.n	c62e <__vector_17+0x32>
  else
    fatal_error_nb++;
    c616:	f24b 6340 	movw	r3, #46656	; 0xb640
    c61a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c61e:	781b      	ldrb	r3, [r3, #0]
    c620:	3301      	adds	r3, #1
    c622:	b2da      	uxtb	r2, r3
    c624:	f24b 6340 	movw	r3, #46656	; 0xb640
    c628:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c62c:	701a      	strb	r2, [r3, #0]
}
    c62e:	bd80      	pop	{r7, pc}

0000c630 <adc_buf_channel>:

uint16_t		adc_samples[ NB_ADC ];

static struct adc_buf* buffers[NB_ADC];

void adc_buf_channel(uint8_t adc_channel, struct adc_buf* s) {
    c630:	b480      	push	{r7}
    c632:	b083      	sub	sp, #12
    c634:	af00      	add	r7, sp, #0
    c636:	4603      	mov	r3, r0
    c638:	6039      	str	r1, [r7, #0]
    c63a:	71fb      	strb	r3, [r7, #7]
  buffers[adc_channel] = s;
    c63c:	79fa      	ldrb	r2, [r7, #7]
    c63e:	f24b 73b0 	movw	r3, #47024	; 0xb7b0
    c642:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c646:	6839      	ldr	r1, [r7, #0]
    c648:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    c64c:	370c      	adds	r7, #12
    c64e:	46bd      	mov	sp, r7
    c650:	f85d 7b04 	ldr.w	r7, [sp], #4
    c654:	4770      	bx	lr
    c656:	bf00      	nop

0000c658 <adc_init>:

void 
adc_init( void )
{
    c658:	b480      	push	{r7}
    c65a:	b083      	sub	sp, #12
    c65c:	af00      	add	r7, sp, #0
  uint8_t i;
  /* Ensure that our port is for input with no pull-ups */
  ANALOG_PORT 	= 0x00;
    c65e:	f248 0362 	movw	r3, #32866	; 0x8062
    c662:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c666:	2200      	movs	r2, #0
    c668:	701a      	strb	r2, [r3, #0]
  ANALOG_PORT_DIR	= 0x00;
    c66a:	f248 0361 	movw	r3, #32865	; 0x8061
    c66e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c672:	2200      	movs	r2, #0
    c674:	701a      	strb	r2, [r3, #0]

  /* Select our external voltage ref, which is tied to Vcc */
  ADMUX		= ANALOG_VREF;
    c676:	f248 0307 	movw	r3, #32775	; 0x8007
    c67a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c67e:	2240      	movs	r2, #64	; 0x40
    c680:	701a      	strb	r2, [r3, #0]

  /* Turn off the analog comparator */
  sbi( ACSR, ACD );
    c682:	f248 0308 	movw	r3, #32776	; 0x8008
    c686:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c68a:	f248 0208 	movw	r2, #32776	; 0x8008
    c68e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c692:	7812      	ldrb	r2, [r2, #0]
    c694:	b2d2      	uxtb	r2, r2
    c696:	f062 027f 	orn	r2, r2, #127	; 0x7f
    c69a:	b2d2      	uxtb	r2, r2
    c69c:	701a      	strb	r2, [r3, #0]

  /* Select out clock, turn on the ADC interrupt and start conversion */
  ADCSR		= 0
    c69e:	f248 0306 	movw	r3, #32774	; 0x8006
    c6a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6a6:	22cf      	movs	r2, #207	; 0xcf
    c6a8:	701a      	strb	r2, [r3, #0]
    | ( 1 << ADEN )
    | ( 1 << ADIE )
    | ( 1 << ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < NB_ADC; i++)
    c6aa:	2300      	movs	r3, #0
    c6ac:	71fb      	strb	r3, [r7, #7]
    c6ae:	e00a      	b.n	c6c6 <adc_init+0x6e>
    buffers[i] = (struct adc_buf*)0;
    c6b0:	79fa      	ldrb	r2, [r7, #7]
    c6b2:	f24b 73b0 	movw	r3, #47024	; 0xb7b0
    c6b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6ba:	2100      	movs	r1, #0
    c6bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    | ( 1 << ADEN )
    | ( 1 << ADIE )
    | ( 1 << ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < NB_ADC; i++)
    c6c0:	79fb      	ldrb	r3, [r7, #7]
    c6c2:	3301      	adds	r3, #1
    c6c4:	71fb      	strb	r3, [r7, #7]
    c6c6:	79fb      	ldrb	r3, [r7, #7]
    c6c8:	2b07      	cmp	r3, #7
    c6ca:	d9f1      	bls.n	c6b0 <adc_init+0x58>
    buffers[i] = (struct adc_buf*)0;
}
    c6cc:	370c      	adds	r7, #12
    c6ce:	46bd      	mov	sp, r7
    c6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    c6d4:	4770      	bx	lr
    c6d6:	bf00      	nop

0000c6d8 <__vector_21>:
 *  8.913kHz on mega128@16MHz 1kHz/channel ??
*/


SIGNAL( SIG_ADC )
{
    c6d8:	b480      	push	{r7}
    c6da:	b085      	sub	sp, #20
    c6dc:	af00      	add	r7, sp, #0
  uint8_t adc_input	= ADMUX & 0x7;
    c6de:	f248 0307 	movw	r3, #32775	; 0x8007
    c6e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6e6:	781b      	ldrb	r3, [r3, #0]
    c6e8:	b2db      	uxtb	r3, r3
    c6ea:	f003 0307 	and.w	r3, r3, #7
    c6ee:	73fb      	strb	r3, [r7, #15]
  struct adc_buf* buf = buffers[adc_input];
    c6f0:	7bfa      	ldrb	r2, [r7, #15]
    c6f2:	f24b 73b0 	movw	r3, #47024	; 0xb7b0
    c6f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    c6fe:	60bb      	str	r3, [r7, #8]
  uint16_t adc_value = ADCW;
    c700:	f248 0304 	movw	r3, #32772	; 0x8004
    c704:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c708:	881b      	ldrh	r3, [r3, #0]
    c70a:	80fb      	strh	r3, [r7, #6]
  /* Store result */
  adc_samples[ adc_input ] = adc_value;
    c70c:	7bfa      	ldrb	r2, [r7, #15]
    c70e:	f24b 73a0 	movw	r3, #47008	; 0xb7a0
    c712:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c716:	88f9      	ldrh	r1, [r7, #6]
    c718:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

  if (buf) {
    c71c:	68bb      	ldr	r3, [r7, #8]
    c71e:	2b00      	cmp	r3, #0
    c720:	d025      	beq.n	c76e <__vector_21+0x96>
    uint8_t new_head = buf->head + 1;
    c722:	68bb      	ldr	r3, [r7, #8]
    c724:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
    c728:	3301      	adds	r3, #1
    c72a:	73bb      	strb	r3, [r7, #14]
    if (new_head >= AV_NB_SAMPLE) new_head = 0;
    c72c:	7bbb      	ldrb	r3, [r7, #14]
    c72e:	2b1f      	cmp	r3, #31
    c730:	d901      	bls.n	c736 <__vector_21+0x5e>
    c732:	2300      	movs	r3, #0
    c734:	73bb      	strb	r3, [r7, #14]
    buf->sum -= buf->values[new_head];
    c736:	68bb      	ldr	r3, [r7, #8]
    c738:	881a      	ldrh	r2, [r3, #0]
    c73a:	7bbb      	ldrb	r3, [r7, #14]
    c73c:	68b9      	ldr	r1, [r7, #8]
    c73e:	005b      	lsls	r3, r3, #1
    c740:	440b      	add	r3, r1
    c742:	885b      	ldrh	r3, [r3, #2]
    c744:	1ad3      	subs	r3, r2, r3
    c746:	b29a      	uxth	r2, r3
    c748:	68bb      	ldr	r3, [r7, #8]
    c74a:	801a      	strh	r2, [r3, #0]
    buf->values[new_head] = adc_value;
    c74c:	7bbb      	ldrb	r3, [r7, #14]
    c74e:	68ba      	ldr	r2, [r7, #8]
    c750:	005b      	lsls	r3, r3, #1
    c752:	4413      	add	r3, r2
    c754:	88fa      	ldrh	r2, [r7, #6]
    c756:	805a      	strh	r2, [r3, #2]
    buf->sum += adc_value;
    c758:	68bb      	ldr	r3, [r7, #8]
    c75a:	881a      	ldrh	r2, [r3, #0]
    c75c:	88fb      	ldrh	r3, [r7, #6]
    c75e:	4413      	add	r3, r2
    c760:	b29a      	uxth	r2, r3
    c762:	68bb      	ldr	r3, [r7, #8]
    c764:	801a      	strh	r2, [r3, #0]
    buf->head = new_head;   
    c766:	68bb      	ldr	r3, [r7, #8]
    c768:	7bba      	ldrb	r2, [r7, #14]
    c76a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Find the next input */
  adc_input++;
    c76e:	7bfb      	ldrb	r3, [r7, #15]
    c770:	3301      	adds	r3, #1
    c772:	73fb      	strb	r3, [r7, #15]
  if( adc_input >= 8 )
    c774:	7bfb      	ldrb	r3, [r7, #15]
    c776:	2b07      	cmp	r3, #7
    c778:	d901      	bls.n	c77e <__vector_21+0xa6>
    adc_input = 0;
    c77a:	2300      	movs	r3, #0
    c77c:	73fb      	strb	r3, [r7, #15]
  /* Select it */
  ADMUX = adc_input | ANALOG_VREF;
    c77e:	f248 0307 	movw	r3, #32775	; 0x8007
    c782:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c786:	7bfa      	ldrb	r2, [r7, #15]
    c788:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    c78c:	b2d2      	uxtb	r2, r2
    c78e:	701a      	strb	r2, [r3, #0]
  /* Restart the conversion */
  sbi( ADCSR, ADSC );
    c790:	f248 0306 	movw	r3, #32774	; 0x8006
    c794:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c798:	f248 0206 	movw	r2, #32774	; 0x8006
    c79c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c7a0:	7812      	ldrb	r2, [r2, #0]
    c7a2:	b2d2      	uxtb	r2, r2
    c7a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    c7a8:	b2d2      	uxtb	r2, r2
    c7aa:	701a      	strb	r2, [r3, #0]
  
}
    c7ac:	3714      	adds	r7, #20
    c7ae:	46bd      	mov	sp, r7
    c7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    c7b4:	4770      	bx	lr
    c7b6:	bf00      	nop

0000c7b8 <gps_init>:
static uint8_t  ubx_status;
static uint16_t ubx_len;
static uint8_t  ubx_msg_idx;
static uint8_t ck_a, ck_b, ubx_id, ubx_class;

void gps_init( void ) {
    c7b8:	b580      	push	{r7, lr}
    c7ba:	af00      	add	r7, sp, #0
#ifdef SIMUL
  uart0_init();
  simul_ir_roll = ir_roll_neutral;
  simul_ir_pitch = ir_pitch_neutral;
#else
  uart1_init();
    c7bc:	f003 fcc0 	bl	10140 <uart1_init>
#endif
  ubx_status = UNINIT;
    c7c0:	f64b 03f7 	movw	r3, #47351	; 0xb8f7
    c7c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7c8:	2200      	movs	r2, #0
    c7ca:	701a      	strb	r2, [r3, #0]
}
    c7cc:	bd80      	pop	{r7, pc}
    c7ce:	bf00      	nop

0000c7d0 <parse_gps_msg>:

void parse_gps_msg( void ) {
    c7d0:	b580      	push	{r7, lr}
    c7d2:	af00      	add	r7, sp, #0
  //vPrintString("S_16 receive_gps_data_task start!\n\r");
    //added by SunnyBeike
    
    ubx_class = UBX_NAV_ID; 
    c7d4:	f64b 03fe 	movw	r3, #47358	; 0xb8fe
    c7d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7dc:	2201      	movs	r2, #1
    c7de:	701a      	strb	r2, [r3, #0]
    ubx_id = (ubx_id + 1)%0x40;
    c7e0:	f64b 03fd 	movw	r3, #47357	; 0xb8fd
    c7e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7e8:	781b      	ldrb	r3, [r3, #0]
    c7ea:	1c5a      	adds	r2, r3, #1
    c7ec:	17d3      	asrs	r3, r2, #31
    c7ee:	0e9b      	lsrs	r3, r3, #26
    c7f0:	441a      	add	r2, r3
    c7f2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    c7f6:	1ad3      	subs	r3, r2, r3
    c7f8:	b2da      	uxtb	r2, r3
    c7fa:	f64b 03fd 	movw	r3, #47357	; 0xb8fd
    c7fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c802:	701a      	strb	r2, [r3, #0]
    
    //end

  if (ubx_class == UBX_NAV_ID) {
    c804:	f64b 03fe 	movw	r3, #47358	; 0xb8fe
    c808:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c80c:	781b      	ldrb	r3, [r3, #0]
    c80e:	2b01      	cmp	r3, #1
    c810:	f040 80f9 	bne.w	ca06 <parse_gps_msg+0x236>
    if (ubx_id == UBX_NAV_POSUTM_ID) {
    c814:	f64b 03fd 	movw	r3, #47357	; 0xb8fd
    c818:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c81c:	781b      	ldrb	r3, [r3, #0]
    c81e:	2b08      	cmp	r3, #8
    c820:	d128      	bne.n	c874 <parse_gps_msg+0xa4>
      gps_utm_east = UBX_NAV_POSUTM_EAST(ubx_msg_buf);
    c822:	f24b 73f8 	movw	r3, #47096	; 0xb7f8
    c826:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c82a:	685a      	ldr	r2, [r3, #4]
    c82c:	f24b 73e4 	movw	r3, #47076	; 0xb7e4
    c830:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c834:	601a      	str	r2, [r3, #0]
      gps_utm_north = UBX_NAV_POSUTM_NORTH(ubx_msg_buf);
    c836:	f24b 73f8 	movw	r3, #47096	; 0xb7f8
    c83a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c83e:	689a      	ldr	r2, [r3, #8]
    c840:	f24b 73e8 	movw	r3, #47080	; 0xb7e8
    c844:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c848:	601a      	str	r2, [r3, #0]
      gps_falt = (float)UBX_NAV_POSUTM_ALT(ubx_msg_buf) / 100.;
    c84a:	4b73      	ldr	r3, [pc, #460]	; (ca18 <parse_gps_msg+0x248>)
    c84c:	681b      	ldr	r3, [r3, #0]
    c84e:	4618      	mov	r0, r3
    c850:	f006 fdce 	bl	133f0 <__aeabi_i2f>
    c854:	4603      	mov	r3, r0
    c856:	4618      	mov	r0, r3
    c858:	f04f 0100 	mov.w	r1, #0
    c85c:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
    c860:	f006 fece 	bl	13600 <__aeabi_fdiv>
    c864:	4603      	mov	r3, r0
    c866:	461a      	mov	r2, r3
    c868:	f24b 73d4 	movw	r3, #47060	; 0xb7d4
    c86c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c870:	601a      	str	r2, [r3, #0]
    c872:	e0c8      	b.n	ca06 <parse_gps_msg+0x236>
        gps_utm_east = gps_utm_east + 0.5;
        gps_utm_north = gps_utm_north + 0.4;
        gps_falt = gps_falt + 0.6;
        */
        // end
    } else if (ubx_id == UBX_NAV_STATUS_ID) {
    c874:	f64b 03fd 	movw	r3, #47357	; 0xb8fd
    c878:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c87c:	781b      	ldrb	r3, [r3, #0]
    c87e:	2b03      	cmp	r3, #3
    c880:	d10a      	bne.n	c898 <parse_gps_msg+0xc8>
      gps_mode = UBX_NAV_STATUS_GPSfix(ubx_msg_buf);
    c882:	f24b 73f8 	movw	r3, #47096	; 0xb7f8
    c886:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c88a:	791a      	ldrb	r2, [r3, #4]
    c88c:	f24b 73f4 	movw	r3, #47092	; 0xb7f4
    c890:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c894:	701a      	strb	r2, [r3, #0]
    c896:	e0b6      	b.n	ca06 <parse_gps_msg+0x236>
    } else if (ubx_id == UBX_NAV_VELNED_ID) {
    c898:	f64b 03fd 	movw	r3, #47357	; 0xb8fd
    c89c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8a0:	781b      	ldrb	r3, [r3, #0]
    c8a2:	2b12      	cmp	r3, #18
    c8a4:	f040 80af 	bne.w	ca06 <parse_gps_msg+0x236>
      gps_fspeed = ((float)UBX_NAV_VELNED_GSpeed(ubx_msg_buf)) / 1e2; 
    c8a8:	4b5c      	ldr	r3, [pc, #368]	; (ca1c <parse_gps_msg+0x24c>)
    c8aa:	681b      	ldr	r3, [r3, #0]
    c8ac:	4618      	mov	r0, r3
    c8ae:	f006 fd9b 	bl	133e8 <__aeabi_ui2f>
    c8b2:	4603      	mov	r3, r0
    c8b4:	4618      	mov	r0, r3
    c8b6:	f04f 0100 	mov.w	r1, #0
    c8ba:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
    c8be:	f006 fe9f 	bl	13600 <__aeabi_fdiv>
    c8c2:	4603      	mov	r3, r0
    c8c4:	461a      	mov	r2, r3
    c8c6:	f24b 73d8 	movw	r3, #47064	; 0xb7d8
    c8ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8ce:	601a      	str	r2, [r3, #0]
      gps_fclimb = ((float)UBX_NAV_VELNED_VEL_D(ubx_msg_buf)) / -1e2;
    c8d0:	4b51      	ldr	r3, [pc, #324]	; (ca18 <parse_gps_msg+0x248>)
    c8d2:	681b      	ldr	r3, [r3, #0]
    c8d4:	4618      	mov	r0, r3
    c8d6:	f006 fd8b 	bl	133f0 <__aeabi_i2f>
    c8da:	4603      	mov	r3, r0
    c8dc:	4618      	mov	r0, r3
    c8de:	f04f 0100 	mov.w	r1, #0
    c8e2:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
    c8e6:	f006 fe8b 	bl	13600 <__aeabi_fdiv>
    c8ea:	4603      	mov	r3, r0
    c8ec:	461a      	mov	r2, r3
    c8ee:	f24b 73dc 	movw	r3, #47068	; 0xb7dc
    c8f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8f6:	601a      	str	r2, [r3, #0]
      gps_fcourse = RadianOfDeg(((float)UBX_NAV_VELNED_Heading(ubx_msg_buf)) / 1e5);
    c8f8:	4b49      	ldr	r3, [pc, #292]	; (ca20 <parse_gps_msg+0x250>)
    c8fa:	681b      	ldr	r3, [r3, #0]
    c8fc:	4618      	mov	r0, r3
    c8fe:	f006 fd77 	bl	133f0 <__aeabi_i2f>
    c902:	4603      	mov	r3, r0
    c904:	4618      	mov	r0, r3
    c906:	f006 f933 	bl	12b70 <__aeabi_f2d>
    c90a:	4602      	mov	r2, r0
    c90c:	460b      	mov	r3, r1
    c90e:	4610      	mov	r0, r2
    c910:	4619      	mov	r1, r3
    c912:	a33d      	add	r3, pc, #244	; (adr r3, ca08 <parse_gps_msg+0x238>)
    c914:	e9d3 2300 	ldrd	r2, r3, [r3]
    c918:	f006 faa8 	bl	12e6c <__aeabi_ddiv>
    c91c:	4602      	mov	r2, r0
    c91e:	460b      	mov	r3, r1
    c920:	4610      	mov	r0, r2
    c922:	4619      	mov	r1, r3
    c924:	f04f 0200 	mov.w	r2, #0
    c928:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    c92c:	f2c4 0366 	movt	r3, #16486	; 0x4066
    c930:	f006 fa9c 	bl	12e6c <__aeabi_ddiv>
    c934:	4602      	mov	r2, r0
    c936:	460b      	mov	r3, r1
    c938:	4610      	mov	r0, r2
    c93a:	4619      	mov	r1, r3
    c93c:	a334      	add	r3, pc, #208	; (adr r3, ca10 <parse_gps_msg+0x240>)
    c93e:	e9d3 2300 	ldrd	r2, r3, [r3]
    c942:	f006 f969 	bl	12c18 <__aeabi_dmul>
    c946:	4602      	mov	r2, r0
    c948:	460b      	mov	r3, r1
    c94a:	4610      	mov	r0, r2
    c94c:	4619      	mov	r1, r3
    c94e:	f006 fc45 	bl	131dc <__aeabi_d2f>
    c952:	4602      	mov	r2, r0
    c954:	f24b 73e0 	movw	r3, #47072	; 0xb7e0
    c958:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c95c:	601a      	str	r2, [r3, #0]
      gps_ftow = ((float)UBX_NAV_VELNED_ITOW(ubx_msg_buf)) / 1e3;
    c95e:	f24b 73f8 	movw	r3, #47096	; 0xb7f8
    c962:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c966:	681b      	ldr	r3, [r3, #0]
    c968:	4618      	mov	r0, r3
    c96a:	f006 fd3d 	bl	133e8 <__aeabi_ui2f>
    c96e:	4603      	mov	r3, r0
    c970:	4618      	mov	r0, r3
    c972:	f04f 0100 	mov.w	r1, #0
    c976:	f2c4 417a 	movt	r1, #17530	; 0x447a
    c97a:	f006 fe41 	bl	13600 <__aeabi_fdiv>
    c97e:	4603      	mov	r3, r0
    c980:	461a      	mov	r2, r3
    c982:	f24b 73d0 	movw	r3, #47056	; 0xb7d0
    c986:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c98a:	601a      	str	r2, [r3, #0]
        gps_fcourse = gps_fcourse + 0.2;
        gps_ftow = gps_ftow + 0.1;
        */
        // end
      
      gps_east = gps_utm_east / 100 - NAV_UTM_EAST0;
    c98c:	f24b 73e4 	movw	r3, #47076	; 0xb7e4
    c990:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c994:	681a      	ldr	r2, [r3, #0]
    c996:	f248 531f 	movw	r3, #34079	; 0x851f
    c99a:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    c99e:	fb83 1302 	smull	r1, r3, r3, r2
    c9a2:	1159      	asrs	r1, r3, #5
    c9a4:	17d3      	asrs	r3, r2, #31
    c9a6:	1acb      	subs	r3, r1, r3
    c9a8:	f5a3 2313 	sub.w	r3, r3, #602112	; 0x93000
    c9ac:	f6a3 535a 	subw	r3, r3, #3418	; 0xd5a
    c9b0:	4618      	mov	r0, r3
    c9b2:	f006 fd1d 	bl	133f0 <__aeabi_i2f>
    c9b6:	4602      	mov	r2, r0
    c9b8:	f24b 73ec 	movw	r3, #47084	; 0xb7ec
    c9bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9c0:	601a      	str	r2, [r3, #0]
      gps_north = gps_utm_north / 100 - NAV_UTM_NORTH0;
    c9c2:	f24b 73e8 	movw	r3, #47080	; 0xb7e8
    c9c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9ca:	681a      	ldr	r2, [r3, #0]
    c9cc:	f248 531f 	movw	r3, #34079	; 0x851f
    c9d0:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    c9d4:	fb83 1302 	smull	r1, r3, r3, r2
    c9d8:	1159      	asrs	r1, r3, #5
    c9da:	17d3      	asrs	r3, r2, #31
    c9dc:	1aca      	subs	r2, r1, r3
    c9de:	f648 231a 	movw	r3, #35354	; 0x8a1a
    c9e2:	f6cf 73a7 	movt	r3, #65447	; 0xffa7
    c9e6:	4413      	add	r3, r2
    c9e8:	4618      	mov	r0, r3
    c9ea:	f006 fd01 	bl	133f0 <__aeabi_i2f>
    c9ee:	4602      	mov	r2, r0
    c9f0:	f24b 73f0 	movw	r3, #47088	; 0xb7f0
    c9f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9f8:	601a      	str	r2, [r3, #0]
      
      
      gps_pos_available = TRUE; /* The 3 UBX messages are sent in one rafale */
    c9fa:	f24b 73f6 	movw	r3, #47094	; 0xb7f6
    c9fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca02:	2201      	movs	r2, #1
    ca04:	701a      	strb	r2, [r3, #0]
      simul_ir_roll = UBX_USR_IRSIM_ROLL(ubx_msg_buf);
      simul_ir_pitch = UBX_USR_IRSIM_PITCH(ubx_msg_buf);
    }
  }
#endif
}
    ca06:	bd80      	pop	{r7, pc}
    ca08:	00000000 	.word	0x00000000
    ca0c:	40f86a00 	.word	0x40f86a00
    ca10:	5a7ed197 	.word	0x5a7ed197
    ca14:	400921fb 	.word	0x400921fb
    ca18:	2004b804 	.word	0x2004b804
    ca1c:	2004b80c 	.word	0x2004b80c
    ca20:	2004b810 	.word	0x2004b810

0000ca24 <parse_ubx>:


uint8_t gps_nb_ovrn;


static void parse_ubx( uint8_t c ) {
    ca24:	b480      	push	{r7}
    ca26:	b083      	sub	sp, #12
    ca28:	af00      	add	r7, sp, #0
    ca2a:	4603      	mov	r3, r0
    ca2c:	71fb      	strb	r3, [r7, #7]
   if (ubx_status < GOT_PAYLOAD) {
    ca2e:	f64b 03f7 	movw	r3, #47351	; 0xb8f7
    ca32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca36:	781b      	ldrb	r3, [r3, #0]
    ca38:	2b06      	cmp	r3, #6
    ca3a:	d81d      	bhi.n	ca78 <parse_ubx+0x54>
    ck_a += c;
    ca3c:	f64b 03fb 	movw	r3, #47355	; 0xb8fb
    ca40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca44:	781a      	ldrb	r2, [r3, #0]
    ca46:	79fb      	ldrb	r3, [r7, #7]
    ca48:	4413      	add	r3, r2
    ca4a:	b2da      	uxtb	r2, r3
    ca4c:	f64b 03fb 	movw	r3, #47355	; 0xb8fb
    ca50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca54:	701a      	strb	r2, [r3, #0]
    ck_b += ck_a;
    ca56:	f64b 03fc 	movw	r3, #47356	; 0xb8fc
    ca5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca5e:	781a      	ldrb	r2, [r3, #0]
    ca60:	f64b 03fb 	movw	r3, #47355	; 0xb8fb
    ca64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca68:	781b      	ldrb	r3, [r3, #0]
    ca6a:	4413      	add	r3, r2
    ca6c:	b2da      	uxtb	r2, r3
    ca6e:	f64b 03fc 	movw	r3, #47356	; 0xb8fc
    ca72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca76:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
    break;
  }
#else */
  if (ubx_status == UNINIT)
    ca78:	f64b 03f7 	movw	r3, #47351	; 0xb8f7
    ca7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca80:	781b      	ldrb	r3, [r3, #0]
    ca82:	2b00      	cmp	r3, #0
    ca84:	d110      	bne.n	caa8 <parse_ubx+0x84>
  {
    if (c == UBX_SYNC1)
    ca86:	79fb      	ldrb	r3, [r7, #7]
    ca88:	2bb5      	cmp	r3, #181	; 0xb5
    ca8a:	f040 8135 	bne.w	ccf8 <parse_ubx+0x2d4>
      ubx_status++;
    ca8e:	f64b 03f7 	movw	r3, #47351	; 0xb8f7
    ca92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca96:	781b      	ldrb	r3, [r3, #0]
    ca98:	3301      	adds	r3, #1
    ca9a:	b2da      	uxtb	r2, r3
    ca9c:	f64b 03f7 	movw	r3, #47351	; 0xb8f7
    caa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    caa4:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
  }
  else {}
//#endif
  return;
    caa6:	e12f      	b.n	cd08 <parse_ubx+0x2e4>
  if (ubx_status == UNINIT)
  {
    if (c == UBX_SYNC1)
      ubx_status++;
  }
  else if (ubx_status == GOT_SYNC1)
    caa8:	f64b 03f7 	movw	r3, #47351	; 0xb8f7
    caac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cab0:	781b      	ldrb	r3, [r3, #0]
    cab2:	2b01      	cmp	r3, #1
    cab4:	d11c      	bne.n	caf0 <parse_ubx+0xcc>
  {
    if (c != UBX_SYNC2)
    cab6:	79fb      	ldrb	r3, [r7, #7]
    cab8:	2b62      	cmp	r3, #98	; 0x62
    caba:	d000      	beq.n	cabe <parse_ubx+0x9a>
      goto error;
    cabc:	e11d      	b.n	ccfa <parse_ubx+0x2d6>
    ck_a = 0;
    cabe:	f64b 03fb 	movw	r3, #47355	; 0xb8fb
    cac2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cac6:	2200      	movs	r2, #0
    cac8:	701a      	strb	r2, [r3, #0]
    ck_b = 0;
    caca:	f64b 03fc 	movw	r3, #47356	; 0xb8fc
    cace:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cad2:	2200      	movs	r2, #0
    cad4:	701a      	strb	r2, [r3, #0]
    ubx_status++;
    cad6:	f64b 03f7 	movw	r3, #47351	; 0xb8f7
    cada:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cade:	781b      	ldrb	r3, [r3, #0]
    cae0:	3301      	adds	r3, #1
    cae2:	b2da      	uxtb	r2, r3
    cae4:	f64b 03f7 	movw	r3, #47351	; 0xb8f7
    cae8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    caec:	701a      	strb	r2, [r3, #0]
    caee:	e103      	b.n	ccf8 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_SYNC2)
    caf0:	f64b 03f7 	movw	r3, #47351	; 0xb8f7
    caf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    caf8:	781b      	ldrb	r3, [r3, #0]
    cafa:	2b02      	cmp	r3, #2
    cafc:	d127      	bne.n	cb4e <parse_ubx+0x12a>
  {
    if (gps_msg_received) {
    cafe:	f24b 73f5 	movw	r3, #47093	; 0xb7f5
    cb02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb06:	781b      	ldrb	r3, [r3, #0]
    cb08:	b2db      	uxtb	r3, r3
    cb0a:	2b00      	cmp	r3, #0
    cb0c:	d00c      	beq.n	cb28 <parse_ubx+0x104>
      /* Previous message has not yet been parsed: discard this one */
      gps_nb_ovrn++;
    cb0e:	f64b 03ff 	movw	r3, #47359	; 0xb8ff
    cb12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb16:	781b      	ldrb	r3, [r3, #0]
    cb18:	3301      	adds	r3, #1
    cb1a:	b2da      	uxtb	r2, r3
    cb1c:	f64b 03ff 	movw	r3, #47359	; 0xb8ff
    cb20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb24:	701a      	strb	r2, [r3, #0]
      goto error;
    cb26:	e0e8      	b.n	ccfa <parse_ubx+0x2d6>
    }
    ubx_class = c;
    cb28:	f64b 03fe 	movw	r3, #47358	; 0xb8fe
    cb2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb30:	79fa      	ldrb	r2, [r7, #7]
    cb32:	701a      	strb	r2, [r3, #0]
    ubx_status++;
    cb34:	f64b 03f7 	movw	r3, #47351	; 0xb8f7
    cb38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb3c:	781b      	ldrb	r3, [r3, #0]
    cb3e:	3301      	adds	r3, #1
    cb40:	b2da      	uxtb	r2, r3
    cb42:	f64b 03f7 	movw	r3, #47351	; 0xb8f7
    cb46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb4a:	701a      	strb	r2, [r3, #0]
    cb4c:	e0d4      	b.n	ccf8 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_CLASS)
    cb4e:	f64b 03f7 	movw	r3, #47351	; 0xb8f7
    cb52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb56:	781b      	ldrb	r3, [r3, #0]
    cb58:	2b03      	cmp	r3, #3
    cb5a:	d112      	bne.n	cb82 <parse_ubx+0x15e>
  {
    ubx_id = c;
    cb5c:	f64b 03fd 	movw	r3, #47357	; 0xb8fd
    cb60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb64:	79fa      	ldrb	r2, [r7, #7]
    cb66:	701a      	strb	r2, [r3, #0]
    ubx_status++;
    cb68:	f64b 03f7 	movw	r3, #47351	; 0xb8f7
    cb6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb70:	781b      	ldrb	r3, [r3, #0]
    cb72:	3301      	adds	r3, #1
    cb74:	b2da      	uxtb	r2, r3
    cb76:	f64b 03f7 	movw	r3, #47351	; 0xb8f7
    cb7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb7e:	701a      	strb	r2, [r3, #0]
    cb80:	e0ba      	b.n	ccf8 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_ID)
    cb82:	f64b 03f7 	movw	r3, #47351	; 0xb8f7
    cb86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb8a:	781b      	ldrb	r3, [r3, #0]
    cb8c:	2b04      	cmp	r3, #4
    cb8e:	d113      	bne.n	cbb8 <parse_ubx+0x194>
  {
    ubx_len = c;
    cb90:	79fb      	ldrb	r3, [r7, #7]
    cb92:	b29a      	uxth	r2, r3
    cb94:	f64b 03f8 	movw	r3, #47352	; 0xb8f8
    cb98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb9c:	801a      	strh	r2, [r3, #0]
    ubx_status++;
    cb9e:	f64b 03f7 	movw	r3, #47351	; 0xb8f7
    cba2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cba6:	781b      	ldrb	r3, [r3, #0]
    cba8:	3301      	adds	r3, #1
    cbaa:	b2da      	uxtb	r2, r3
    cbac:	f64b 03f7 	movw	r3, #47351	; 0xb8f7
    cbb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbb4:	701a      	strb	r2, [r3, #0]
    cbb6:	e09f      	b.n	ccf8 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_LEN1)
    cbb8:	f64b 03f7 	movw	r3, #47351	; 0xb8f7
    cbbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbc0:	781b      	ldrb	r3, [r3, #0]
    cbc2:	2b05      	cmp	r3, #5
    cbc4:	d12b      	bne.n	cc1e <parse_ubx+0x1fa>
  {
    ubx_len |= (c<<8);
    cbc6:	79fb      	ldrb	r3, [r7, #7]
    cbc8:	021b      	lsls	r3, r3, #8
    cbca:	b29a      	uxth	r2, r3
    cbcc:	f64b 03f8 	movw	r3, #47352	; 0xb8f8
    cbd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbd4:	881b      	ldrh	r3, [r3, #0]
    cbd6:	b29b      	uxth	r3, r3
    cbd8:	4313      	orrs	r3, r2
    cbda:	b29b      	uxth	r3, r3
    cbdc:	b29a      	uxth	r2, r3
    cbde:	f64b 03f8 	movw	r3, #47352	; 0xb8f8
    cbe2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbe6:	801a      	strh	r2, [r3, #0]
    if (ubx_len > UBX_MAX_PAYLOAD)
    cbe8:	f64b 03f8 	movw	r3, #47352	; 0xb8f8
    cbec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbf0:	881b      	ldrh	r3, [r3, #0]
    cbf2:	2bff      	cmp	r3, #255	; 0xff
    cbf4:	d900      	bls.n	cbf8 <parse_ubx+0x1d4>
      goto error;
    cbf6:	e080      	b.n	ccfa <parse_ubx+0x2d6>
    ubx_msg_idx = 0;
    cbf8:	f64b 03fa 	movw	r3, #47354	; 0xb8fa
    cbfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc00:	2200      	movs	r2, #0
    cc02:	701a      	strb	r2, [r3, #0]
    ubx_status++;
    cc04:	f64b 03f7 	movw	r3, #47351	; 0xb8f7
    cc08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc0c:	781b      	ldrb	r3, [r3, #0]
    cc0e:	3301      	adds	r3, #1
    cc10:	b2da      	uxtb	r2, r3
    cc12:	f64b 03f7 	movw	r3, #47351	; 0xb8f7
    cc16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc1a:	701a      	strb	r2, [r3, #0]
    cc1c:	e06c      	b.n	ccf8 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_LEN2)
    cc1e:	f64b 03f7 	movw	r3, #47351	; 0xb8f7
    cc22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc26:	781b      	ldrb	r3, [r3, #0]
    cc28:	2b06      	cmp	r3, #6
    cc2a:	d131      	bne.n	cc90 <parse_ubx+0x26c>
  {
    ubx_msg_buf[ubx_msg_idx] = c;
    cc2c:	f64b 03fa 	movw	r3, #47354	; 0xb8fa
    cc30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc34:	781b      	ldrb	r3, [r3, #0]
    cc36:	461a      	mov	r2, r3
    cc38:	f24b 73f8 	movw	r3, #47096	; 0xb7f8
    cc3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc40:	79f9      	ldrb	r1, [r7, #7]
    cc42:	5499      	strb	r1, [r3, r2]
    ubx_msg_idx++;
    cc44:	f64b 03fa 	movw	r3, #47354	; 0xb8fa
    cc48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc4c:	781b      	ldrb	r3, [r3, #0]
    cc4e:	3301      	adds	r3, #1
    cc50:	b2da      	uxtb	r2, r3
    cc52:	f64b 03fa 	movw	r3, #47354	; 0xb8fa
    cc56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc5a:	701a      	strb	r2, [r3, #0]
    if (ubx_msg_idx >= ubx_len) {
    cc5c:	f64b 03fa 	movw	r3, #47354	; 0xb8fa
    cc60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc64:	781b      	ldrb	r3, [r3, #0]
    cc66:	461a      	mov	r2, r3
    cc68:	f64b 03f8 	movw	r3, #47352	; 0xb8f8
    cc6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc70:	881b      	ldrh	r3, [r3, #0]
    cc72:	429a      	cmp	r2, r3
    cc74:	d340      	bcc.n	ccf8 <parse_ubx+0x2d4>
      ubx_status++;
    cc76:	f64b 03f7 	movw	r3, #47351	; 0xb8f7
    cc7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc7e:	781b      	ldrb	r3, [r3, #0]
    cc80:	3301      	adds	r3, #1
    cc82:	b2da      	uxtb	r2, r3
    cc84:	f64b 03f7 	movw	r3, #47351	; 0xb8f7
    cc88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc8c:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
  }
  else {}
//#endif
  return;
    cc8e:	e03b      	b.n	cd08 <parse_ubx+0x2e4>
    ubx_msg_idx++;
    if (ubx_msg_idx >= ubx_len) {
      ubx_status++;
    }
  }
  else if (ubx_status == GOT_PAYLOAD)
    cc90:	f64b 03f7 	movw	r3, #47351	; 0xb8f7
    cc94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc98:	781b      	ldrb	r3, [r3, #0]
    cc9a:	2b07      	cmp	r3, #7
    cc9c:	d115      	bne.n	ccca <parse_ubx+0x2a6>
  {
    if (c != ck_a)
    cc9e:	f64b 03fb 	movw	r3, #47355	; 0xb8fb
    cca2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cca6:	781b      	ldrb	r3, [r3, #0]
    cca8:	79fa      	ldrb	r2, [r7, #7]
    ccaa:	429a      	cmp	r2, r3
    ccac:	d000      	beq.n	ccb0 <parse_ubx+0x28c>
      goto error;
    ccae:	e024      	b.n	ccfa <parse_ubx+0x2d6>
    ubx_status++;
    ccb0:	f64b 03f7 	movw	r3, #47351	; 0xb8f7
    ccb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccb8:	781b      	ldrb	r3, [r3, #0]
    ccba:	3301      	adds	r3, #1
    ccbc:	b2da      	uxtb	r2, r3
    ccbe:	f64b 03f7 	movw	r3, #47351	; 0xb8f7
    ccc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccc6:	701a      	strb	r2, [r3, #0]
    ccc8:	e016      	b.n	ccf8 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_CHECKSUM1)
    ccca:	f64b 03f7 	movw	r3, #47351	; 0xb8f7
    ccce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccd2:	781b      	ldrb	r3, [r3, #0]
    ccd4:	2b08      	cmp	r3, #8
    ccd6:	d10f      	bne.n	ccf8 <parse_ubx+0x2d4>
  {
    if (c != ck_b)
    ccd8:	f64b 03fc 	movw	r3, #47356	; 0xb8fc
    ccdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cce0:	781b      	ldrb	r3, [r3, #0]
    cce2:	79fa      	ldrb	r2, [r7, #7]
    cce4:	429a      	cmp	r2, r3
    cce6:	d000      	beq.n	ccea <parse_ubx+0x2c6>
      goto error;
    cce8:	e007      	b.n	ccfa <parse_ubx+0x2d6>
    gps_msg_received = TRUE;
    ccea:	f24b 73f5 	movw	r3, #47093	; 0xb7f5
    ccee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccf2:	2201      	movs	r2, #1
    ccf4:	701a      	strb	r2, [r3, #0]
    goto restart;
    ccf6:	e000      	b.n	ccfa <parse_ubx+0x2d6>
  }
  else {}
//#endif
  return;
    ccf8:	e006      	b.n	cd08 <parse_ubx+0x2e4>
 error:  
 restart:
  ubx_status = UNINIT;
    ccfa:	f64b 03f7 	movw	r3, #47351	; 0xb8f7
    ccfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd02:	2200      	movs	r2, #0
    cd04:	701a      	strb	r2, [r3, #0]
  return;
    cd06:	bf00      	nop
}
    cd08:	370c      	adds	r7, #12
    cd0a:	46bd      	mov	sp, r7
    cd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    cd10:	4770      	bx	lr
    cd12:	bf00      	nop

0000cd14 <__vector_30>:

#ifdef SIMUL
ReceiveUart0(parse_ubx);
#else
ReceiveUart1(parse_ubx);
    cd14:	b580      	push	{r7, lr}
    cd16:	b082      	sub	sp, #8
    cd18:	af00      	add	r7, sp, #0
    cd1a:	f248 039c 	movw	r3, #32924	; 0x809c
    cd1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd22:	781b      	ldrb	r3, [r3, #0]
    cd24:	71fb      	strb	r3, [r7, #7]
    cd26:	79fb      	ldrb	r3, [r7, #7]
    cd28:	4618      	mov	r0, r3
    cd2a:	f7ff fe7b 	bl	ca24 <parse_ubx>
    cd2e:	3708      	adds	r7, #8
    cd30:	46bd      	mov	sp, r7
    cd32:	bd80      	pop	{r7, pc}
    cd34:	f3af 8000 	nop.w

0000cd38 <ir_init>:
float ir_rad_of_ir = IR_RAD_OF_IR_CONTRAST / IR_DEFAULT_CONTRAST;

static struct adc_buf buf_ir1;
static struct adc_buf buf_ir2;

void ir_init(void) {
    cd38:	b580      	push	{r7, lr}
    cd3a:	af00      	add	r7, sp, #0
  RadOfIrFromConstrast(IR_DEFAULT_CONTRAST);
    cd3c:	f240 1344 	movw	r3, #324	; 0x144
    cd40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd44:	f24c 228f 	movw	r2, #49807	; 0xc28f
    cd48:	f6c3 3275 	movt	r2, #15221	; 0x3b75
    cd4c:	601a      	str	r2, [r3, #0]
  adc_buf_channel(ADC_CHANNEL_IR1, &buf_ir1);
    cd4e:	2001      	movs	r0, #1
    cd50:	f64b 1104 	movw	r1, #47364	; 0xb904
    cd54:	f2c2 0104 	movt	r1, #8196	; 0x2004
    cd58:	f7ff fc6a 	bl	c630 <adc_buf_channel>
  adc_buf_channel(ADC_CHANNEL_IR2, &buf_ir2);
    cd5c:	2002      	movs	r0, #2
    cd5e:	f64b 1148 	movw	r1, #47432	; 0xb948
    cd62:	f2c2 0104 	movt	r1, #8196	; 0x2004
    cd66:	f7ff fc63 	bl	c630 <adc_buf_channel>
}
    cd6a:	bd80      	pop	{r7, pc}

0000cd6c <ir_update>:
int16_t x1 = 1;
int16_t x2 = 2;
*/
// end

void ir_update(void) {
    cd6c:	b480      	push	{r7}
    cd6e:	b083      	sub	sp, #12
    cd70:	af00      	add	r7, sp, #0
#ifndef SIMUL
  int16_t x1_mean = buf_ir1.sum/AV_NB_SAMPLE;
    cd72:	f64b 1304 	movw	r3, #47364	; 0xb904
    cd76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd7a:	881b      	ldrh	r3, [r3, #0]
    cd7c:	095b      	lsrs	r3, r3, #5
    cd7e:	b29b      	uxth	r3, r3
    cd80:	80fb      	strh	r3, [r7, #6]
  int16_t x2_mean = buf_ir2.sum/AV_NB_SAMPLE;
    cd82:	f64b 1348 	movw	r3, #47432	; 0xb948
    cd86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd8a:	881b      	ldrh	r3, [r3, #0]
    cd8c:	095b      	lsrs	r3, r3, #5
    cd8e:	b29b      	uxth	r3, r3
    cd90:	80bb      	strh	r3, [r7, #4]
    if( x1 < -900 ) x1 = x2 % x1;
    x2_mean = x2 ++;
    if( x2 > 110 ) x2 = x1 % x2;
    */
    // end
  ir_roll = IR_RollOfIrs(x1_mean, x2_mean) - ir_roll_neutral;
    cd92:	88fb      	ldrh	r3, [r7, #6]
    cd94:	425b      	negs	r3, r3
    cd96:	b29a      	uxth	r2, r3
    cd98:	88bb      	ldrh	r3, [r7, #4]
    cd9a:	1ad3      	subs	r3, r2, r3
    cd9c:	b29a      	uxth	r2, r3
    cd9e:	f240 133e 	movw	r3, #318	; 0x13e
    cda2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cda6:	881b      	ldrh	r3, [r3, #0]
    cda8:	b29b      	uxth	r3, r3
    cdaa:	1ad3      	subs	r3, r2, r3
    cdac:	b29b      	uxth	r3, r3
    cdae:	b29a      	uxth	r2, r3
    cdb0:	f64b 1300 	movw	r3, #47360	; 0xb900
    cdb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdb8:	801a      	strh	r2, [r3, #0]
  ir_pitch = IR_PitchOfIrs(x1_mean, x2_mean) - ir_pitch_neutral;
    cdba:	88ba      	ldrh	r2, [r7, #4]
    cdbc:	88fb      	ldrh	r3, [r7, #6]
    cdbe:	1ad3      	subs	r3, r2, r3
    cdc0:	b29a      	uxth	r2, r3
    cdc2:	f240 1340 	movw	r3, #320	; 0x140
    cdc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cdca:	881b      	ldrh	r3, [r3, #0]
    cdcc:	b29b      	uxth	r3, r3
    cdce:	1ad3      	subs	r3, r2, r3
    cdd0:	b29b      	uxth	r3, r3
    cdd2:	b29a      	uxth	r2, r3
    cdd4:	f64b 1302 	movw	r3, #47362	; 0xb902
    cdd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cddc:	801a      	strh	r2, [r3, #0]
#else
  extern volatile int16_t simul_ir_roll, simul_ir_pitch;
  ir_roll = simul_ir_roll -  ir_roll_neutral; 
  ir_pitch = simul_ir_pitch - ir_pitch_neutral;  
#endif
}
    cdde:	370c      	adds	r7, #12
    cde0:	46bd      	mov	sp, r7
    cde2:	f85d 7b04 	ldr.w	r7, [sp], #4
    cde6:	4770      	bx	lr

0000cde8 <ir_gain_calib>:

/* 
   Contrast measurement
*/

void ir_gain_calib(void) {      // Plane nose down
    cde8:	b580      	push	{r7, lr}
    cdea:	af00      	add	r7, sp, #0
  /* plane nose down -> negativ value */
  ir_contrast = - ir_pitch;
    cdec:	f64b 1302 	movw	r3, #47362	; 0xb902
    cdf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdf4:	881b      	ldrh	r3, [r3, #0]
    cdf6:	b29b      	uxth	r3, r3
    cdf8:	425b      	negs	r3, r3
    cdfa:	b29b      	uxth	r3, r3
    cdfc:	b29a      	uxth	r2, r3
    cdfe:	f240 133c 	movw	r3, #316	; 0x13c
    ce02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce06:	801a      	strh	r2, [r3, #0]
  RadOfIrFromConstrast(ir_contrast);
    ce08:	f240 133c 	movw	r3, #316	; 0x13c
    ce0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce10:	881b      	ldrh	r3, [r3, #0]
    ce12:	b21b      	sxth	r3, r3
    ce14:	4618      	mov	r0, r3
    ce16:	f005 fe99 	bl	12b4c <__aeabi_i2d>
    ce1a:	4602      	mov	r2, r0
    ce1c:	460b      	mov	r3, r1
    ce1e:	f04f 0000 	mov.w	r0, #0
    ce22:	f04f 0100 	mov.w	r1, #0
    ce26:	f6c3 71e8 	movt	r1, #16360	; 0x3fe8
    ce2a:	f006 f81f 	bl	12e6c <__aeabi_ddiv>
    ce2e:	4602      	mov	r2, r0
    ce30:	460b      	mov	r3, r1
    ce32:	4610      	mov	r0, r2
    ce34:	4619      	mov	r1, r3
    ce36:	f006 f9d1 	bl	131dc <__aeabi_d2f>
    ce3a:	4602      	mov	r2, r0
    ce3c:	f240 1344 	movw	r3, #324	; 0x144
    ce40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce44:	601a      	str	r2, [r3, #0]
}
    ce46:	bd80      	pop	{r7, pc}

0000ce48 <roll_pitch_pid_run>:
float pitch_of_vz_pgain = CLIMB_PITCH_OF_VZ_PGAIN;
float pitch_of_vz = 0.;


/** \brief Computes ::desired_aileron and ::desired_elevator from attitude estimation and expected attitude. */
void roll_pitch_pid_run( void ) {
    ce48:	b590      	push	{r4, r7, lr}
    ce4a:	b083      	sub	sp, #12
    ce4c:	af00      	add	r7, sp, #0
  float err =  estimator_phi - desired_roll;
    ce4e:	f64b 4320 	movw	r3, #48160	; 0xbc20
    ce52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce56:	681a      	ldr	r2, [r3, #0]
    ce58:	f64b 138c 	movw	r3, #47500	; 0xb98c
    ce5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce60:	681b      	ldr	r3, [r3, #0]
    ce62:	4610      	mov	r0, r2
    ce64:	4619      	mov	r1, r3
    ce66:	f006 fa0d 	bl	13284 <__aeabi_fsub>
    ce6a:	4603      	mov	r3, r0
    ce6c:	607b      	str	r3, [r7, #4]
  desired_aileron = TRIM_PPRZ(roll_pgain * err);
    ce6e:	f240 1348 	movw	r3, #328	; 0x148
    ce72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce76:	681b      	ldr	r3, [r3, #0]
    ce78:	4618      	mov	r0, r3
    ce7a:	6879      	ldr	r1, [r7, #4]
    ce7c:	f006 fb0c 	bl	13498 <__aeabi_fmul>
    ce80:	4603      	mov	r3, r0
    ce82:	4618      	mov	r0, r3
    ce84:	f04f 0100 	mov.w	r1, #0
    ce88:	f2cc 6116 	movt	r1, #50710	; 0xc616
    ce8c:	f006 fca2 	bl	137d4 <__aeabi_fcmplt>
    ce90:	4603      	mov	r3, r0
    ce92:	2b00      	cmp	r3, #0
    ce94:	d002      	beq.n	ce9c <roll_pitch_pid_run+0x54>
    ce96:	f64d 2280 	movw	r2, #55936	; 0xda80
    ce9a:	e026      	b.n	ceea <roll_pitch_pid_run+0xa2>
    ce9c:	f240 1348 	movw	r3, #328	; 0x148
    cea0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cea4:	681b      	ldr	r3, [r3, #0]
    cea6:	4618      	mov	r0, r3
    cea8:	6879      	ldr	r1, [r7, #4]
    ceaa:	f006 faf5 	bl	13498 <__aeabi_fmul>
    ceae:	4603      	mov	r3, r0
    ceb0:	4618      	mov	r0, r3
    ceb2:	f04f 0100 	mov.w	r1, #0
    ceb6:	f2c4 6116 	movt	r1, #17942	; 0x4616
    ceba:	f006 fca9 	bl	13810 <__aeabi_fcmpgt>
    cebe:	4603      	mov	r3, r0
    cec0:	2b00      	cmp	r3, #0
    cec2:	d002      	beq.n	ceca <roll_pitch_pid_run+0x82>
    cec4:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    cec8:	e00e      	b.n	cee8 <roll_pitch_pid_run+0xa0>
    ceca:	f240 1348 	movw	r3, #328	; 0x148
    cece:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ced2:	681b      	ldr	r3, [r3, #0]
    ced4:	4618      	mov	r0, r3
    ced6:	6879      	ldr	r1, [r7, #4]
    ced8:	f006 fade 	bl	13498 <__aeabi_fmul>
    cedc:	4603      	mov	r3, r0
    cede:	4618      	mov	r0, r3
    cee0:	f006 fca0 	bl	13824 <__aeabi_f2iz>
    cee4:	4603      	mov	r3, r0
    cee6:	b29b      	uxth	r3, r3
    cee8:	b29a      	uxth	r2, r3
    ceea:	f64b 1396 	movw	r3, #47510	; 0xb996
    ceee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cef2:	801a      	strh	r2, [r3, #0]
  if (pitch_of_roll <0.)
    cef4:	f64b 139c 	movw	r3, #47516	; 0xb99c
    cef8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cefc:	681b      	ldr	r3, [r3, #0]
    cefe:	4618      	mov	r0, r3
    cf00:	f04f 0100 	mov.w	r1, #0
    cf04:	f006 fc66 	bl	137d4 <__aeabi_fcmplt>
    cf08:	4603      	mov	r3, r0
    cf0a:	2b00      	cmp	r3, #0
    cf0c:	d006      	beq.n	cf1c <roll_pitch_pid_run+0xd4>
    pitch_of_roll = 0.;
    cf0e:	f64b 139c 	movw	r3, #47516	; 0xb99c
    cf12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf16:	f04f 0200 	mov.w	r2, #0
    cf1a:	601a      	str	r2, [r3, #0]
  err = -(estimator_theta - desired_pitch - pitch_of_roll * fabs(estimator_phi));
    cf1c:	f64b 4328 	movw	r3, #48168	; 0xbc28
    cf20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf24:	681a      	ldr	r2, [r3, #0]
    cf26:	f64b 1390 	movw	r3, #47504	; 0xb990
    cf2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf2e:	681b      	ldr	r3, [r3, #0]
    cf30:	4610      	mov	r0, r2
    cf32:	4619      	mov	r1, r3
    cf34:	f006 f9a6 	bl	13284 <__aeabi_fsub>
    cf38:	4603      	mov	r3, r0
    cf3a:	461c      	mov	r4, r3
    cf3c:	f64b 4320 	movw	r3, #48160	; 0xbc20
    cf40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf44:	681b      	ldr	r3, [r3, #0]
    cf46:	4618      	mov	r0, r3
    cf48:	f04f 0100 	mov.w	r1, #0
    cf4c:	f006 fc42 	bl	137d4 <__aeabi_fcmplt>
    cf50:	4603      	mov	r3, r0
    cf52:	2b00      	cmp	r3, #0
    cf54:	d007      	beq.n	cf66 <roll_pitch_pid_run+0x11e>
    cf56:	f64b 4320 	movw	r3, #48160	; 0xbc20
    cf5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf5e:	681b      	ldr	r3, [r3, #0]
    cf60:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
    cf64:	e004      	b.n	cf70 <roll_pitch_pid_run+0x128>
    cf66:	f64b 4320 	movw	r3, #48160	; 0xbc20
    cf6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf6e:	681a      	ldr	r2, [r3, #0]
    cf70:	f64b 139c 	movw	r3, #47516	; 0xb99c
    cf74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf78:	681b      	ldr	r3, [r3, #0]
    cf7a:	4610      	mov	r0, r2
    cf7c:	4619      	mov	r1, r3
    cf7e:	f006 fa8b 	bl	13498 <__aeabi_fmul>
    cf82:	4603      	mov	r3, r0
    cf84:	4620      	mov	r0, r4
    cf86:	4619      	mov	r1, r3
    cf88:	f006 f97c 	bl	13284 <__aeabi_fsub>
    cf8c:	4603      	mov	r3, r0
    cf8e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    cf92:	607b      	str	r3, [r7, #4]
  desired_elevator = TRIM_PPRZ(pitch_pgain * err);
    cf94:	f240 134c 	movw	r3, #332	; 0x14c
    cf98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf9c:	681b      	ldr	r3, [r3, #0]
    cf9e:	4618      	mov	r0, r3
    cfa0:	6879      	ldr	r1, [r7, #4]
    cfa2:	f006 fa79 	bl	13498 <__aeabi_fmul>
    cfa6:	4603      	mov	r3, r0
    cfa8:	4618      	mov	r0, r3
    cfaa:	f04f 0100 	mov.w	r1, #0
    cfae:	f2cc 6116 	movt	r1, #50710	; 0xc616
    cfb2:	f006 fc0f 	bl	137d4 <__aeabi_fcmplt>
    cfb6:	4603      	mov	r3, r0
    cfb8:	2b00      	cmp	r3, #0
    cfba:	d002      	beq.n	cfc2 <roll_pitch_pid_run+0x17a>
    cfbc:	f64d 2280 	movw	r2, #55936	; 0xda80
    cfc0:	e026      	b.n	d010 <roll_pitch_pid_run+0x1c8>
    cfc2:	f240 134c 	movw	r3, #332	; 0x14c
    cfc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfca:	681b      	ldr	r3, [r3, #0]
    cfcc:	4618      	mov	r0, r3
    cfce:	6879      	ldr	r1, [r7, #4]
    cfd0:	f006 fa62 	bl	13498 <__aeabi_fmul>
    cfd4:	4603      	mov	r3, r0
    cfd6:	4618      	mov	r0, r3
    cfd8:	f04f 0100 	mov.w	r1, #0
    cfdc:	f2c4 6116 	movt	r1, #17942	; 0x4616
    cfe0:	f006 fc16 	bl	13810 <__aeabi_fcmpgt>
    cfe4:	4603      	mov	r3, r0
    cfe6:	2b00      	cmp	r3, #0
    cfe8:	d002      	beq.n	cff0 <roll_pitch_pid_run+0x1a8>
    cfea:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    cfee:	e00e      	b.n	d00e <roll_pitch_pid_run+0x1c6>
    cff0:	f240 134c 	movw	r3, #332	; 0x14c
    cff4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cff8:	681b      	ldr	r3, [r3, #0]
    cffa:	4618      	mov	r0, r3
    cffc:	6879      	ldr	r1, [r7, #4]
    cffe:	f006 fa4b 	bl	13498 <__aeabi_fmul>
    d002:	4603      	mov	r3, r0
    d004:	4618      	mov	r0, r3
    d006:	f006 fc0d 	bl	13824 <__aeabi_f2iz>
    d00a:	4603      	mov	r3, r0
    d00c:	b29b      	uxth	r3, r3
    d00e:	b29a      	uxth	r2, r3
    d010:	f64b 1398 	movw	r3, #47512	; 0xb998
    d014:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d018:	801a      	strh	r2, [r3, #0]
}
    d01a:	370c      	adds	r7, #12
    d01c:	46bd      	mov	sp, r7
    d01e:	bd90      	pop	{r4, r7, pc}

0000d020 <course_pid_run>:

float course_pgain = COURSE_PGAIN;
float desired_course = 0.;
float max_roll = MAX_ROLL;

void course_pid_run( void ) {
    d020:	b580      	push	{r7, lr}
    d022:	b082      	sub	sp, #8
    d024:	af00      	add	r7, sp, #0
  float err = estimator_hspeed_dir - desired_course;
    d026:	f64b 4350 	movw	r3, #48208	; 0xbc50
    d02a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d02e:	681a      	ldr	r2, [r3, #0]
    d030:	f64b 13a4 	movw	r3, #47524	; 0xb9a4
    d034:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d038:	681b      	ldr	r3, [r3, #0]
    d03a:	4610      	mov	r0, r2
    d03c:	4619      	mov	r1, r3
    d03e:	f006 f921 	bl	13284 <__aeabi_fsub>
    d042:	4603      	mov	r3, r0
    d044:	607b      	str	r3, [r7, #4]
  NORM_RAD_ANGLE(err);
    d046:	e013      	b.n	d070 <course_pid_run+0x50>
    d048:	6878      	ldr	r0, [r7, #4]
    d04a:	f005 fd91 	bl	12b70 <__aeabi_f2d>
    d04e:	4602      	mov	r2, r0
    d050:	460b      	mov	r3, r1
    d052:	4610      	mov	r0, r2
    d054:	4619      	mov	r1, r3
    d056:	a348      	add	r3, pc, #288	; (adr r3, d178 <course_pid_run+0x158>)
    d058:	e9d3 2300 	ldrd	r2, r3, [r3]
    d05c:	f005 fc28 	bl	128b0 <__aeabi_dsub>
    d060:	4602      	mov	r2, r0
    d062:	460b      	mov	r3, r1
    d064:	4610      	mov	r0, r2
    d066:	4619      	mov	r1, r3
    d068:	f006 f8b8 	bl	131dc <__aeabi_d2f>
    d06c:	4603      	mov	r3, r0
    d06e:	607b      	str	r3, [r7, #4]
    d070:	6878      	ldr	r0, [r7, #4]
    d072:	f005 fd7d 	bl	12b70 <__aeabi_f2d>
    d076:	4602      	mov	r2, r0
    d078:	460b      	mov	r3, r1
    d07a:	4610      	mov	r0, r2
    d07c:	4619      	mov	r1, r3
    d07e:	a340      	add	r3, pc, #256	; (adr r3, d180 <course_pid_run+0x160>)
    d080:	e9d3 2300 	ldrd	r2, r3, [r3]
    d084:	f006 f858 	bl	13138 <__aeabi_dcmpgt>
    d088:	4603      	mov	r3, r0
    d08a:	2b00      	cmp	r3, #0
    d08c:	d1dc      	bne.n	d048 <course_pid_run+0x28>
    d08e:	e013      	b.n	d0b8 <course_pid_run+0x98>
    d090:	6878      	ldr	r0, [r7, #4]
    d092:	f005 fd6d 	bl	12b70 <__aeabi_f2d>
    d096:	4602      	mov	r2, r0
    d098:	460b      	mov	r3, r1
    d09a:	4610      	mov	r0, r2
    d09c:	4619      	mov	r1, r3
    d09e:	a336      	add	r3, pc, #216	; (adr r3, d178 <course_pid_run+0x158>)
    d0a0:	e9d3 2300 	ldrd	r2, r3, [r3]
    d0a4:	f005 fc06 	bl	128b4 <__adddf3>
    d0a8:	4602      	mov	r2, r0
    d0aa:	460b      	mov	r3, r1
    d0ac:	4610      	mov	r0, r2
    d0ae:	4619      	mov	r1, r3
    d0b0:	f006 f894 	bl	131dc <__aeabi_d2f>
    d0b4:	4603      	mov	r3, r0
    d0b6:	607b      	str	r3, [r7, #4]
    d0b8:	6878      	ldr	r0, [r7, #4]
    d0ba:	f005 fd59 	bl	12b70 <__aeabi_f2d>
    d0be:	4602      	mov	r2, r0
    d0c0:	460b      	mov	r3, r1
    d0c2:	4610      	mov	r0, r2
    d0c4:	4619      	mov	r1, r3
    d0c6:	a330      	add	r3, pc, #192	; (adr r3, d188 <course_pid_run+0x168>)
    d0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
    d0cc:	f006 f816 	bl	130fc <__aeabi_dcmplt>
    d0d0:	4603      	mov	r3, r0
    d0d2:	2b00      	cmp	r3, #0
    d0d4:	d1dc      	bne.n	d090 <course_pid_run+0x70>
  nav_desired_roll = course_pgain * err; //  * fspeed / AIR_SPEED;
    d0d6:	f240 1354 	movw	r3, #340	; 0x154
    d0da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0de:	681b      	ldr	r3, [r3, #0]
    d0e0:	4618      	mov	r0, r3
    d0e2:	6879      	ldr	r1, [r7, #4]
    d0e4:	f006 f9d8 	bl	13498 <__aeabi_fmul>
    d0e8:	4603      	mov	r3, r0
    d0ea:	461a      	mov	r2, r3
    d0ec:	f64b 13e8 	movw	r3, #47592	; 0xb9e8
    d0f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0f4:	601a      	str	r2, [r3, #0]
  if (nav_desired_roll > max_roll)
    d0f6:	f64b 13e8 	movw	r3, #47592	; 0xb9e8
    d0fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0fe:	681a      	ldr	r2, [r3, #0]
    d100:	f240 1358 	movw	r3, #344	; 0x158
    d104:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d108:	681b      	ldr	r3, [r3, #0]
    d10a:	4610      	mov	r0, r2
    d10c:	4619      	mov	r1, r3
    d10e:	f006 fb7f 	bl	13810 <__aeabi_fcmpgt>
    d112:	4603      	mov	r3, r0
    d114:	2b00      	cmp	r3, #0
    d116:	d00a      	beq.n	d12e <course_pid_run+0x10e>
    nav_desired_roll = max_roll;
    d118:	f240 1358 	movw	r3, #344	; 0x158
    d11c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d120:	681a      	ldr	r2, [r3, #0]
    d122:	f64b 13e8 	movw	r3, #47592	; 0xb9e8
    d126:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d12a:	601a      	str	r2, [r3, #0]
    d12c:	e01e      	b.n	d16c <course_pid_run+0x14c>
  else if (nav_desired_roll < -max_roll)
    d12e:	f240 1358 	movw	r3, #344	; 0x158
    d132:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d136:	681b      	ldr	r3, [r3, #0]
    d138:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
    d13c:	f64b 13e8 	movw	r3, #47592	; 0xb9e8
    d140:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d144:	681b      	ldr	r3, [r3, #0]
    d146:	4610      	mov	r0, r2
    d148:	4619      	mov	r1, r3
    d14a:	f006 fb61 	bl	13810 <__aeabi_fcmpgt>
    d14e:	4603      	mov	r3, r0
    d150:	2b00      	cmp	r3, #0
    d152:	d00b      	beq.n	d16c <course_pid_run+0x14c>
    nav_desired_roll = -max_roll;
    d154:	f240 1358 	movw	r3, #344	; 0x158
    d158:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d15c:	681b      	ldr	r3, [r3, #0]
    d15e:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
    d162:	f64b 13e8 	movw	r3, #47592	; 0xb9e8
    d166:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d16a:	601a      	str	r2, [r3, #0]
}
    d16c:	3708      	adds	r7, #8
    d16e:	46bd      	mov	sp, r7
    d170:	bd80      	pop	{r7, pc}
    d172:	bf00      	nop
    d174:	f3af 8000 	nop.w
    d178:	54442d18 	.word	0x54442d18
    d17c:	401921fb 	.word	0x401921fb
    d180:	54442d18 	.word	0x54442d18
    d184:	400921fb 	.word	0x400921fb
    d188:	54442d18 	.word	0x54442d18
    d18c:	c00921fb 	.word	0xc00921fb

0000d190 <climb_pid_run>:

#define MAX_CLIMB_SUM_ERR 100
#define MAX_PITCH_CLIMB_SUM_ERR 100

/** \brief Computes desired_gaz and desired_pitch from desired_climb */
void climb_pid_run ( void ) {
    d190:	b5b0      	push	{r4, r5, r7, lr}
    d192:	b082      	sub	sp, #8
    d194:	af00      	add	r7, sp, #0
  float err  = estimator_z_dot - desired_climb;
    d196:	f64b 4334 	movw	r3, #48180	; 0xbc34
    d19a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d19e:	681a      	ldr	r2, [r3, #0]
    d1a0:	f64b 13a8 	movw	r3, #47528	; 0xb9a8
    d1a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1a8:	681b      	ldr	r3, [r3, #0]
    d1aa:	4610      	mov	r0, r2
    d1ac:	4619      	mov	r1, r3
    d1ae:	f006 f869 	bl	13284 <__aeabi_fsub>
    d1b2:	4603      	mov	r3, r0
    d1b4:	607b      	str	r3, [r7, #4]
  float fgaz;
  if (auto_pitch) { /* gaz constant */
    d1b6:	f24b 6347 	movw	r3, #46663	; 0xb647
    d1ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1be:	781b      	ldrb	r3, [r3, #0]
    d1c0:	2b00      	cmp	r3, #0
    d1c2:	f000 80a8 	beq.w	d316 <climb_pid_run+0x186>
    desired_gaz = nav_desired_gaz;
    d1c6:	f64b 13e0 	movw	r3, #47584	; 0xb9e0
    d1ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1ce:	881b      	ldrh	r3, [r3, #0]
    d1d0:	b29a      	uxth	r2, r3
    d1d2:	f64b 1394 	movw	r3, #47508	; 0xb994
    d1d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1da:	801a      	strh	r2, [r3, #0]
    desired_pitch = climb_pitch_pgain * (err + climb_pitch_igain * climb_pitch_sum_err);
    d1dc:	f240 1360 	movw	r3, #352	; 0x160
    d1e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1e4:	681a      	ldr	r2, [r3, #0]
    d1e6:	f64b 13b4 	movw	r3, #47540	; 0xb9b4
    d1ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1ee:	681b      	ldr	r3, [r3, #0]
    d1f0:	4610      	mov	r0, r2
    d1f2:	4619      	mov	r1, r3
    d1f4:	f006 f950 	bl	13498 <__aeabi_fmul>
    d1f8:	4603      	mov	r3, r0
    d1fa:	4618      	mov	r0, r3
    d1fc:	6879      	ldr	r1, [r7, #4]
    d1fe:	f006 f843 	bl	13288 <__addsf3>
    d202:	4603      	mov	r3, r0
    d204:	461a      	mov	r2, r3
    d206:	f240 135c 	movw	r3, #348	; 0x15c
    d20a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d20e:	681b      	ldr	r3, [r3, #0]
    d210:	4610      	mov	r0, r2
    d212:	4619      	mov	r1, r3
    d214:	f006 f940 	bl	13498 <__aeabi_fmul>
    d218:	4603      	mov	r3, r0
    d21a:	461a      	mov	r2, r3
    d21c:	f64b 1390 	movw	r3, #47504	; 0xb990
    d220:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d224:	601a      	str	r2, [r3, #0]
    if (desired_pitch > max_pitch)
    d226:	f64b 1390 	movw	r3, #47504	; 0xb990
    d22a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d22e:	681a      	ldr	r2, [r3, #0]
    d230:	f240 1364 	movw	r3, #356	; 0x164
    d234:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d238:	681b      	ldr	r3, [r3, #0]
    d23a:	4610      	mov	r0, r2
    d23c:	4619      	mov	r1, r3
    d23e:	f006 fae7 	bl	13810 <__aeabi_fcmpgt>
    d242:	4603      	mov	r3, r0
    d244:	2b00      	cmp	r3, #0
    d246:	d009      	beq.n	d25c <climb_pid_run+0xcc>
      desired_pitch = max_pitch;
    d248:	f240 1364 	movw	r3, #356	; 0x164
    d24c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d250:	681a      	ldr	r2, [r3, #0]
    d252:	f64b 1390 	movw	r3, #47504	; 0xb990
    d256:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d25a:	601a      	str	r2, [r3, #0]
    if (desired_pitch < min_pitch)
    d25c:	f64b 1390 	movw	r3, #47504	; 0xb990
    d260:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d264:	681a      	ldr	r2, [r3, #0]
    d266:	f240 1368 	movw	r3, #360	; 0x168
    d26a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d26e:	681b      	ldr	r3, [r3, #0]
    d270:	4610      	mov	r0, r2
    d272:	4619      	mov	r1, r3
    d274:	f006 faae 	bl	137d4 <__aeabi_fcmplt>
    d278:	4603      	mov	r3, r0
    d27a:	2b00      	cmp	r3, #0
    d27c:	d009      	beq.n	d292 <climb_pid_run+0x102>
      desired_pitch = min_pitch;
    d27e:	f240 1368 	movw	r3, #360	; 0x168
    d282:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d286:	681a      	ldr	r2, [r3, #0]
    d288:	f64b 1390 	movw	r3, #47504	; 0xb990
    d28c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d290:	601a      	str	r2, [r3, #0]
    climb_pitch_sum_err += err;
    d292:	f64b 13b4 	movw	r3, #47540	; 0xb9b4
    d296:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d29a:	681b      	ldr	r3, [r3, #0]
    d29c:	4618      	mov	r0, r3
    d29e:	6879      	ldr	r1, [r7, #4]
    d2a0:	f005 fff2 	bl	13288 <__addsf3>
    d2a4:	4603      	mov	r3, r0
    d2a6:	461a      	mov	r2, r3
    d2a8:	f64b 13b4 	movw	r3, #47540	; 0xb9b4
    d2ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2b0:	601a      	str	r2, [r3, #0]
    if (climb_pitch_sum_err > MAX_PITCH_CLIMB_SUM_ERR)
    d2b2:	f64b 13b4 	movw	r3, #47540	; 0xb9b4
    d2b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2ba:	681b      	ldr	r3, [r3, #0]
    d2bc:	4618      	mov	r0, r3
    d2be:	f04f 0100 	mov.w	r1, #0
    d2c2:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
    d2c6:	f006 faa3 	bl	13810 <__aeabi_fcmpgt>
    d2ca:	4603      	mov	r3, r0
    d2cc:	2b00      	cmp	r3, #0
    d2ce:	d008      	beq.n	d2e2 <climb_pid_run+0x152>
      climb_pitch_sum_err = MAX_PITCH_CLIMB_SUM_ERR;
    d2d0:	f64b 13b4 	movw	r3, #47540	; 0xb9b4
    d2d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2d8:	f04f 0200 	mov.w	r2, #0
    d2dc:	f2c4 22c8 	movt	r2, #17096	; 0x42c8
    d2e0:	601a      	str	r2, [r3, #0]
    if (climb_pitch_sum_err < - MAX_PITCH_CLIMB_SUM_ERR)
    d2e2:	f64b 13b4 	movw	r3, #47540	; 0xb9b4
    d2e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2ea:	681b      	ldr	r3, [r3, #0]
    d2ec:	4618      	mov	r0, r3
    d2ee:	f04f 0100 	mov.w	r1, #0
    d2f2:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
    d2f6:	f006 fa6d 	bl	137d4 <__aeabi_fcmplt>
    d2fa:	4603      	mov	r3, r0
    d2fc:	2b00      	cmp	r3, #0
    d2fe:	d100      	bne.n	d302 <climb_pid_run+0x172>
    d300:	e109      	b.n	d516 <climb_pid_run+0x386>
      climb_pitch_sum_err = - MAX_PITCH_CLIMB_SUM_ERR; 
    d302:	f64b 13b4 	movw	r3, #47540	; 0xb9b4
    d306:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d30a:	f04f 0200 	mov.w	r2, #0
    d30e:	f2cc 22c8 	movt	r2, #49864	; 0xc2c8
    d312:	601a      	str	r2, [r3, #0]
    d314:	e0ff      	b.n	d516 <climb_pid_run+0x386>
  } else { /* pitch almost constant */
    /* pitch offset for climb */
    pitch_of_vz = (desired_climb > 0) ? desired_climb * pitch_of_vz_pgain : 0.;
    d316:	f64b 13a8 	movw	r3, #47528	; 0xb9a8
    d31a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d31e:	681b      	ldr	r3, [r3, #0]
    d320:	4618      	mov	r0, r3
    d322:	f04f 0100 	mov.w	r1, #0
    d326:	f006 fa73 	bl	13810 <__aeabi_fcmpgt>
    d32a:	4603      	mov	r3, r0
    d32c:	2b00      	cmp	r3, #0
    d32e:	d010      	beq.n	d352 <climb_pid_run+0x1c2>
    d330:	f64b 13a8 	movw	r3, #47528	; 0xb9a8
    d334:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d338:	681a      	ldr	r2, [r3, #0]
    d33a:	f240 1350 	movw	r3, #336	; 0x150
    d33e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d342:	681b      	ldr	r3, [r3, #0]
    d344:	4610      	mov	r0, r2
    d346:	4619      	mov	r1, r3
    d348:	f006 f8a6 	bl	13498 <__aeabi_fmul>
    d34c:	4603      	mov	r3, r0
    d34e:	461a      	mov	r2, r3
    d350:	e001      	b.n	d356 <climb_pid_run+0x1c6>
    d352:	f04f 0200 	mov.w	r2, #0
    d356:	f64b 13a0 	movw	r3, #47520	; 0xb9a0
    d35a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d35e:	601a      	str	r2, [r3, #0]
    fgaz = climb_pgain * (err + climb_igain * climb_sum_err) + CLIMB_LEVEL_GAZ + CLIMB_GAZ_OF_CLIMB*desired_climb;
    d360:	f64c 42cd 	movw	r2, #52429	; 0xcccd
    d364:	f6c3 52cc 	movt	r2, #15820	; 0x3dcc
    d368:	f64b 13b0 	movw	r3, #47536	; 0xb9b0
    d36c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d370:	681b      	ldr	r3, [r3, #0]
    d372:	4610      	mov	r0, r2
    d374:	4619      	mov	r1, r3
    d376:	f006 f88f 	bl	13498 <__aeabi_fmul>
    d37a:	4603      	mov	r3, r0
    d37c:	4618      	mov	r0, r3
    d37e:	6879      	ldr	r1, [r7, #4]
    d380:	f005 ff82 	bl	13288 <__addsf3>
    d384:	4603      	mov	r3, r0
    d386:	461a      	mov	r2, r3
    d388:	f24c 238f 	movw	r3, #49807	; 0xc28f
    d38c:	f6cb 43f5 	movt	r3, #48373	; 0xbcf5
    d390:	4610      	mov	r0, r2
    d392:	4619      	mov	r1, r3
    d394:	f006 f880 	bl	13498 <__aeabi_fmul>
    d398:	4603      	mov	r3, r0
    d39a:	4618      	mov	r0, r3
    d39c:	f005 fbe8 	bl	12b70 <__aeabi_f2d>
    d3a0:	4602      	mov	r2, r0
    d3a2:	460b      	mov	r3, r1
    d3a4:	4610      	mov	r0, r2
    d3a6:	4619      	mov	r1, r3
    d3a8:	a35d      	add	r3, pc, #372	; (adr r3, d520 <climb_pid_run+0x390>)
    d3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
    d3ae:	f005 fa81 	bl	128b4 <__adddf3>
    d3b2:	4602      	mov	r2, r0
    d3b4:	460b      	mov	r3, r1
    d3b6:	4614      	mov	r4, r2
    d3b8:	461d      	mov	r5, r3
    d3ba:	f64b 13a8 	movw	r3, #47528	; 0xb9a8
    d3be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3c2:	681b      	ldr	r3, [r3, #0]
    d3c4:	4618      	mov	r0, r3
    d3c6:	f005 fbd3 	bl	12b70 <__aeabi_f2d>
    d3ca:	4602      	mov	r2, r0
    d3cc:	460b      	mov	r3, r1
    d3ce:	4610      	mov	r0, r2
    d3d0:	4619      	mov	r1, r3
    d3d2:	a355      	add	r3, pc, #340	; (adr r3, d528 <climb_pid_run+0x398>)
    d3d4:	e9d3 2300 	ldrd	r2, r3, [r3]
    d3d8:	f005 fc1e 	bl	12c18 <__aeabi_dmul>
    d3dc:	4602      	mov	r2, r0
    d3de:	460b      	mov	r3, r1
    d3e0:	4620      	mov	r0, r4
    d3e2:	4629      	mov	r1, r5
    d3e4:	f005 fa66 	bl	128b4 <__adddf3>
    d3e8:	4602      	mov	r2, r0
    d3ea:	460b      	mov	r3, r1
    d3ec:	4610      	mov	r0, r2
    d3ee:	4619      	mov	r1, r3
    d3f0:	f005 fef4 	bl	131dc <__aeabi_d2f>
    d3f4:	4603      	mov	r3, r0
    d3f6:	603b      	str	r3, [r7, #0]
    climb_sum_err += err;
    d3f8:	f64b 13b0 	movw	r3, #47536	; 0xb9b0
    d3fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d400:	681b      	ldr	r3, [r3, #0]
    d402:	4618      	mov	r0, r3
    d404:	6879      	ldr	r1, [r7, #4]
    d406:	f005 ff3f 	bl	13288 <__addsf3>
    d40a:	4603      	mov	r3, r0
    d40c:	461a      	mov	r2, r3
    d40e:	f64b 13b0 	movw	r3, #47536	; 0xb9b0
    d412:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d416:	601a      	str	r2, [r3, #0]
    if (climb_sum_err > MAX_CLIMB_SUM_ERR) climb_sum_err = MAX_CLIMB_SUM_ERR;
    d418:	f64b 13b0 	movw	r3, #47536	; 0xb9b0
    d41c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d420:	681b      	ldr	r3, [r3, #0]
    d422:	4618      	mov	r0, r3
    d424:	f04f 0100 	mov.w	r1, #0
    d428:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
    d42c:	f006 f9f0 	bl	13810 <__aeabi_fcmpgt>
    d430:	4603      	mov	r3, r0
    d432:	2b00      	cmp	r3, #0
    d434:	d008      	beq.n	d448 <climb_pid_run+0x2b8>
    d436:	f64b 13b0 	movw	r3, #47536	; 0xb9b0
    d43a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d43e:	f04f 0200 	mov.w	r2, #0
    d442:	f2c4 22c8 	movt	r2, #17096	; 0x42c8
    d446:	601a      	str	r2, [r3, #0]
    if (climb_sum_err < - MAX_CLIMB_SUM_ERR) climb_sum_err = - MAX_CLIMB_SUM_ERR;
    d448:	f64b 13b0 	movw	r3, #47536	; 0xb9b0
    d44c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d450:	681b      	ldr	r3, [r3, #0]
    d452:	4618      	mov	r0, r3
    d454:	f04f 0100 	mov.w	r1, #0
    d458:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
    d45c:	f006 f9ba 	bl	137d4 <__aeabi_fcmplt>
    d460:	4603      	mov	r3, r0
    d462:	2b00      	cmp	r3, #0
    d464:	d008      	beq.n	d478 <climb_pid_run+0x2e8>
    d466:	f64b 13b0 	movw	r3, #47536	; 0xb9b0
    d46a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d46e:	f04f 0200 	mov.w	r2, #0
    d472:	f2cc 22c8 	movt	r2, #49864	; 0xc2c8
    d476:	601a      	str	r2, [r3, #0]
    desired_gaz = TRIM_UPPRZ(fgaz * MAX_PPRZ);
    d478:	6838      	ldr	r0, [r7, #0]
    d47a:	f04f 0100 	mov.w	r1, #0
    d47e:	f2c4 6116 	movt	r1, #17942	; 0x4616
    d482:	f006 f809 	bl	13498 <__aeabi_fmul>
    d486:	4603      	mov	r3, r0
    d488:	4618      	mov	r0, r3
    d48a:	f04f 0100 	mov.w	r1, #0
    d48e:	f006 f9a1 	bl	137d4 <__aeabi_fcmplt>
    d492:	4603      	mov	r3, r0
    d494:	2b00      	cmp	r3, #0
    d496:	d001      	beq.n	d49c <climb_pid_run+0x30c>
    d498:	2200      	movs	r2, #0
    d49a:	e022      	b.n	d4e2 <climb_pid_run+0x352>
    d49c:	6838      	ldr	r0, [r7, #0]
    d49e:	f04f 0100 	mov.w	r1, #0
    d4a2:	f2c4 6116 	movt	r1, #17942	; 0x4616
    d4a6:	f005 fff7 	bl	13498 <__aeabi_fmul>
    d4aa:	4603      	mov	r3, r0
    d4ac:	4618      	mov	r0, r3
    d4ae:	f04f 0100 	mov.w	r1, #0
    d4b2:	f2c4 6116 	movt	r1, #17942	; 0x4616
    d4b6:	f006 f9ab 	bl	13810 <__aeabi_fcmpgt>
    d4ba:	4603      	mov	r3, r0
    d4bc:	2b00      	cmp	r3, #0
    d4be:	d002      	beq.n	d4c6 <climb_pid_run+0x336>
    d4c0:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    d4c4:	e00c      	b.n	d4e0 <climb_pid_run+0x350>
    d4c6:	6838      	ldr	r0, [r7, #0]
    d4c8:	f04f 0100 	mov.w	r1, #0
    d4cc:	f2c4 6116 	movt	r1, #17942	; 0x4616
    d4d0:	f005 ffe2 	bl	13498 <__aeabi_fmul>
    d4d4:	4603      	mov	r3, r0
    d4d6:	4618      	mov	r0, r3
    d4d8:	f006 f9a4 	bl	13824 <__aeabi_f2iz>
    d4dc:	4603      	mov	r3, r0
    d4de:	b29b      	uxth	r3, r3
    d4e0:	b29a      	uxth	r2, r3
    d4e2:	f64b 1394 	movw	r3, #47508	; 0xb994
    d4e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4ea:	801a      	strh	r2, [r3, #0]
    desired_pitch = nav_pitch + pitch_of_vz;
    d4ec:	f64b 13e4 	movw	r3, #47588	; 0xb9e4
    d4f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4f4:	681a      	ldr	r2, [r3, #0]
    d4f6:	f64b 13a0 	movw	r3, #47520	; 0xb9a0
    d4fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4fe:	681b      	ldr	r3, [r3, #0]
    d500:	4610      	mov	r0, r2
    d502:	4619      	mov	r1, r3
    d504:	f005 fec0 	bl	13288 <__addsf3>
    d508:	4603      	mov	r3, r0
    d50a:	461a      	mov	r2, r3
    d50c:	f64b 1390 	movw	r3, #47504	; 0xb990
    d510:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d514:	601a      	str	r2, [r3, #0]
  }
}
    d516:	3708      	adds	r7, #8
    d518:	46bd      	mov	sp, r7
    d51a:	bdb0      	pop	{r4, r5, r7, pc}
    d51c:	f3af 8000 	nop.w
    d520:	3d70a3d7 	.word	0x3d70a3d7
    d524:	3fd3d70a 	.word	0x3fd3d70a
    d528:	9999999a 	.word	0x9999999a
    d52c:	3fc99999 	.word	0x3fc99999

0000d530 <altitude_pid_run>:

float altitude_pgain = ALTITUDE_PGAIN;


void altitude_pid_run(void) {
    d530:	b580      	push	{r7, lr}
    d532:	b082      	sub	sp, #8
    d534:	af00      	add	r7, sp, #0
  float err = estimator_z - desired_altitude;
    d536:	f64b 431c 	movw	r3, #48156	; 0xbc1c
    d53a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d53e:	681a      	ldr	r2, [r3, #0]
    d540:	f240 1370 	movw	r3, #368	; 0x170
    d544:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d548:	681b      	ldr	r3, [r3, #0]
    d54a:	4610      	mov	r0, r2
    d54c:	4619      	mov	r1, r3
    d54e:	f005 fe99 	bl	13284 <__aeabi_fsub>
    d552:	4603      	mov	r3, r0
    d554:	607b      	str	r3, [r7, #4]
  desired_climb = pre_climb + altitude_pgain * err;
    d556:	f240 136c 	movw	r3, #364	; 0x16c
    d55a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d55e:	681b      	ldr	r3, [r3, #0]
    d560:	4618      	mov	r0, r3
    d562:	6879      	ldr	r1, [r7, #4]
    d564:	f005 ff98 	bl	13498 <__aeabi_fmul>
    d568:	4603      	mov	r3, r0
    d56a:	461a      	mov	r2, r3
    d56c:	f64b 13ac 	movw	r3, #47532	; 0xb9ac
    d570:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d574:	681b      	ldr	r3, [r3, #0]
    d576:	4610      	mov	r0, r2
    d578:	4619      	mov	r1, r3
    d57a:	f005 fe85 	bl	13288 <__addsf3>
    d57e:	4603      	mov	r3, r0
    d580:	461a      	mov	r2, r3
    d582:	f64b 13a8 	movw	r3, #47528	; 0xb9a8
    d586:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d58a:	601a      	str	r2, [r3, #0]
  if (desired_climb < -CLIMB_MAX) desired_climb = -CLIMB_MAX;
    d58c:	f64b 13a8 	movw	r3, #47528	; 0xb9a8
    d590:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d594:	681b      	ldr	r3, [r3, #0]
    d596:	4618      	mov	r0, r3
    d598:	f04f 0100 	mov.w	r1, #0
    d59c:	f6cb 7180 	movt	r1, #49024	; 0xbf80
    d5a0:	f006 f918 	bl	137d4 <__aeabi_fcmplt>
    d5a4:	4603      	mov	r3, r0
    d5a6:	2b00      	cmp	r3, #0
    d5a8:	d008      	beq.n	d5bc <altitude_pid_run+0x8c>
    d5aa:	f64b 13a8 	movw	r3, #47528	; 0xb9a8
    d5ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5b2:	f04f 0200 	mov.w	r2, #0
    d5b6:	f6cb 7280 	movt	r2, #49024	; 0xbf80
    d5ba:	601a      	str	r2, [r3, #0]
  if (desired_climb > CLIMB_MAX) desired_climb = CLIMB_MAX;
    d5bc:	f64b 13a8 	movw	r3, #47528	; 0xb9a8
    d5c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5c4:	681b      	ldr	r3, [r3, #0]
    d5c6:	4618      	mov	r0, r3
    d5c8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    d5cc:	f006 f920 	bl	13810 <__aeabi_fcmpgt>
    d5d0:	4603      	mov	r3, r0
    d5d2:	2b00      	cmp	r3, #0
    d5d4:	d006      	beq.n	d5e4 <altitude_pid_run+0xb4>
    d5d6:	f64b 13a8 	movw	r3, #47528	; 0xb9a8
    d5da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5de:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    d5e2:	601a      	str	r2, [r3, #0]
}
    d5e4:	3708      	adds	r7, #8
    d5e6:	46bd      	mov	sp, r7
    d5e8:	bd80      	pop	{r7, pc}
    d5ea:	bf00      	nop
    d5ec:	f3af 8000 	nop.w

0000d5f0 <auto_nav>:
#define GROUND_ALT 125.
#define SECURITY_ALT 150.
#define MAX_DIST_FROM_HOME 500.
#ifdef NAV_C

static inline void auto_nav(void) {
    d5f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    d5f2:	b08b      	sub	sp, #44	; 0x2c
    d5f4:	af00      	add	r7, sp, #0
        NextBlock()
    }

}
#else*/
if(nav_block == 0)
    d5f6:	f64b 13b9 	movw	r3, #47545	; 0xb9b9
    d5fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5fe:	781b      	ldrb	r3, [r3, #0]
    d600:	2b00      	cmp	r3, #0
    d602:	f040 8169 	bne.w	d8d8 <auto_nav+0x2e8>
{ // init
    
    if (nav_stage == 0) 
    d606:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    d60a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d60e:	781b      	ldrb	r3, [r3, #0]
    d610:	2b00      	cmp	r3, #0
    d612:	d13c      	bne.n	d68e <auto_nav+0x9e>
    {
	Label(while_1)
	nav_stage=0;
    d614:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    d618:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d61c:	2200      	movs	r2, #0
    d61e:	701a      	strb	r2, [r3, #0]
	if (! (!(estimator_flight_time))) Goto(endwhile_2) 
    d620:	f64b 4344 	movw	r3, #48196	; 0xbc44
    d624:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d628:	881b      	ldrh	r3, [r3, #0]
    d62a:	2b00      	cmp	r3, #0
    d62c:	d000      	beq.n	d630 <auto_nav+0x40>
    d62e:	e03d      	b.n	d6ac <auto_nav+0xbc>
	else NextStage(); 
    d630:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    d634:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d638:	781b      	ldrb	r3, [r3, #0]
    d63a:	3301      	adds	r3, #1
    d63c:	b2da      	uxtb	r2, r3
    d63e:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    d642:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d646:	701a      	strb	r2, [r3, #0]
    d648:	f64b 4314 	movw	r3, #48148	; 0xbc14
    d64c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d650:	681a      	ldr	r2, [r3, #0]
    d652:	f64b 13bc 	movw	r3, #47548	; 0xb9bc
    d656:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d65a:	601a      	str	r2, [r3, #0]
    d65c:	f64b 4318 	movw	r3, #48152	; 0xbc18
    d660:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d664:	681a      	ldr	r2, [r3, #0]
    d666:	f64b 13c0 	movw	r3, #47552	; 0xb9c0
    d66a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d66e:	601a      	str	r2, [r3, #0]
    d670:	f64b 13cc 	movw	r3, #47564	; 0xb9cc
    d674:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d678:	2200      	movs	r2, #0
    d67a:	801a      	strh	r2, [r3, #0]
    d67c:	f64b 13d0 	movw	r3, #47568	; 0xb9d0
    d680:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d684:	f04f 0200 	mov.w	r2, #0
    d688:	601a      	str	r2, [r3, #0]
    d68a:	f002 b883 	b.w	f794 <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
    d68e:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    d692:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d696:	781b      	ldrb	r3, [r3, #0]
    d698:	2b01      	cmp	r3, #1
    d69a:	d100      	bne.n	d69e <auto_nav+0xae>
    {   Goto(while_1)}
    d69c:	e7ba      	b.n	d614 <auto_nav+0x24>
    else if (nav_stage == 2)
    d69e:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    d6a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6a6:	781b      	ldrb	r3, [r3, #0]
    d6a8:	2b02      	cmp	r3, #2
    d6aa:	d162      	bne.n	d772 <auto_nav+0x182>
    {
	Label(endwhile_2)
	nav_stage = 2;
    d6ac:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    d6b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6b4:	2202      	movs	r2, #2
    d6b6:	701a      	strb	r2, [r3, #0]
        if ((estimator_flight_time>8)) NextStage() else {
    d6b8:	f64b 4344 	movw	r3, #48196	; 0xbc44
    d6bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6c0:	881b      	ldrh	r3, [r3, #0]
    d6c2:	2b08      	cmp	r3, #8
    d6c4:	d92e      	bls.n	d724 <auto_nav+0x134>
    d6c6:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    d6ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6ce:	781b      	ldrb	r3, [r3, #0]
    d6d0:	3301      	adds	r3, #1
    d6d2:	b2da      	uxtb	r2, r3
    d6d4:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    d6d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6dc:	701a      	strb	r2, [r3, #0]
    d6de:	f64b 4314 	movw	r3, #48148	; 0xbc14
    d6e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6e6:	681a      	ldr	r2, [r3, #0]
    d6e8:	f64b 13bc 	movw	r3, #47548	; 0xb9bc
    d6ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6f0:	601a      	str	r2, [r3, #0]
    d6f2:	f64b 4318 	movw	r3, #48152	; 0xbc18
    d6f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6fa:	681a      	ldr	r2, [r3, #0]
    d6fc:	f64b 13c0 	movw	r3, #47552	; 0xb9c0
    d700:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d704:	601a      	str	r2, [r3, #0]
    d706:	f64b 13cc 	movw	r3, #47564	; 0xb9cc
    d70a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d70e:	2200      	movs	r2, #0
    d710:	801a      	strh	r2, [r3, #0]
    d712:	f64b 13d0 	movw	r3, #47568	; 0xb9d0
    d716:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d71a:	f04f 0200 	mov.w	r2, #0
    d71e:	601a      	str	r2, [r3, #0]
    d720:	f002 b838 	b.w	f794 <auto_nav+0x21a4>
          desired_course = RadOfDeg(QFU);
    d724:	f64b 13a4 	movw	r3, #47524	; 0xb9a4
    d728:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d72c:	f64c 32e4 	movw	r2, #52196	; 0xcbe4
    d730:	f2c4 0296 	movt	r2, #16534	; 0x4096
    d734:	601a      	str	r2, [r3, #0]
          auto_pitch = FALSE;
    d736:	f24b 6347 	movw	r3, #46663	; 0xb647
    d73a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d73e:	2200      	movs	r2, #0
    d740:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.150000;
    d742:	f64b 13e4 	movw	r3, #47588	; 0xb9e4
    d746:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d74a:	f649 129a 	movw	r2, #39322	; 0x999a
    d74e:	f6c3 6219 	movt	r2, #15897	; 0x3e19
    d752:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_GAZ;
    d754:	f24b 6345 	movw	r3, #46661	; 0xb645
    d758:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d75c:	2201      	movs	r2, #1
    d75e:	701a      	strb	r2, [r3, #0]
          nav_desired_gaz = TRIM_UPPRZ(0.800000*MAX_PPRZ);
    d760:	f64b 13e0 	movw	r3, #47584	; 0xb9e0
    d764:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d768:	f44f 52f0 	mov.w	r2, #7680	; 0x1e00
    d76c:	801a      	strh	r2, [r3, #0]
        }
        return;
    d76e:	f002 b811 	b.w	f794 <auto_nav+0x21a4>
     }
     else if (nav_stage == 3)
    d772:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    d776:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d77a:	781b      	ldrb	r3, [r3, #0]
    d77c:	2b03      	cmp	r3, #3
    d77e:	d168      	bne.n	d852 <auto_nav+0x262>
     {
	nav_stage = 3;	
    d780:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    d784:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d788:	2203      	movs	r2, #3
    d78a:	701a      	strb	r2, [r3, #0]
        if ((estimator_z>SECURITY_ALT)) NextStage() else {
    d78c:	f64b 431c 	movw	r3, #48156	; 0xbc1c
    d790:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d794:	681b      	ldr	r3, [r3, #0]
    d796:	4618      	mov	r0, r3
    d798:	f04f 0100 	mov.w	r1, #0
    d79c:	f2c4 3116 	movt	r1, #17174	; 0x4316
    d7a0:	f006 f836 	bl	13810 <__aeabi_fcmpgt>
    d7a4:	4603      	mov	r3, r0
    d7a6:	2b00      	cmp	r3, #0
    d7a8:	d02e      	beq.n	d808 <auto_nav+0x218>
    d7aa:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    d7ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7b2:	781b      	ldrb	r3, [r3, #0]
    d7b4:	3301      	adds	r3, #1
    d7b6:	b2da      	uxtb	r2, r3
    d7b8:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    d7bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7c0:	701a      	strb	r2, [r3, #0]
    d7c2:	f64b 4314 	movw	r3, #48148	; 0xbc14
    d7c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7ca:	681a      	ldr	r2, [r3, #0]
    d7cc:	f64b 13bc 	movw	r3, #47548	; 0xb9bc
    d7d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7d4:	601a      	str	r2, [r3, #0]
    d7d6:	f64b 4318 	movw	r3, #48152	; 0xbc18
    d7da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7de:	681a      	ldr	r2, [r3, #0]
    d7e0:	f64b 13c0 	movw	r3, #47552	; 0xb9c0
    d7e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7e8:	601a      	str	r2, [r3, #0]
    d7ea:	f64b 13cc 	movw	r3, #47564	; 0xb9cc
    d7ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7f2:	2200      	movs	r2, #0
    d7f4:	801a      	strh	r2, [r3, #0]
    d7f6:	f64b 13d0 	movw	r3, #47568	; 0xb9d0
    d7fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7fe:	f04f 0200 	mov.w	r2, #0
    d802:	601a      	str	r2, [r3, #0]
    d804:	f001 bfc6 	b.w	f794 <auto_nav+0x21a4>
          desired_course = RadOfDeg(QFU);
    d808:	f64b 13a4 	movw	r3, #47524	; 0xb9a4
    d80c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d810:	f64c 32e4 	movw	r2, #52196	; 0xcbe4
    d814:	f2c4 0296 	movt	r2, #16534	; 0x4096
    d818:	601a      	str	r2, [r3, #0]
          auto_pitch = FALSE;
    d81a:	f24b 6347 	movw	r3, #46663	; 0xb647
    d81e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d822:	2200      	movs	r2, #0
    d824:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.000000;
    d826:	f64b 13e4 	movw	r3, #47588	; 0xb9e4
    d82a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d82e:	f04f 0200 	mov.w	r2, #0
    d832:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_CLIMB;
    d834:	f24b 6345 	movw	r3, #46661	; 0xb645
    d838:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d83c:	2202      	movs	r2, #2
    d83e:	701a      	strb	r2, [r3, #0]
          desired_climb = 8.000000;
    d840:	f64b 13a8 	movw	r3, #47528	; 0xb9a8
    d844:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d848:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    d84c:	601a      	str	r2, [r3, #0]
        }
        return;
    d84e:	f001 bfa1 	b.w	f794 <auto_nav+0x21a4>
     }
     else if (nav_stage == 4)
    d852:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    d856:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d85a:	781b      	ldrb	r3, [r3, #0]
    d85c:	2b04      	cmp	r3, #4
    d85e:	f041 8799 	bne.w	f794 <auto_nav+0x21a4>
        NextBlock()
    d862:	f64b 13b9 	movw	r3, #47545	; 0xb9b9
    d866:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d86a:	781b      	ldrb	r3, [r3, #0]
    d86c:	3301      	adds	r3, #1
    d86e:	b2da      	uxtb	r2, r3
    d870:	f64b 13b9 	movw	r3, #47545	; 0xb9b9
    d874:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d878:	701a      	strb	r2, [r3, #0]
    d87a:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    d87e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d882:	2200      	movs	r2, #0
    d884:	701a      	strb	r2, [r3, #0]
    d886:	f64b 13ce 	movw	r3, #47566	; 0xb9ce
    d88a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d88e:	2200      	movs	r2, #0
    d890:	801a      	strh	r2, [r3, #0]
    d892:	f64b 4314 	movw	r3, #48148	; 0xbc14
    d896:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d89a:	681a      	ldr	r2, [r3, #0]
    d89c:	f64b 13bc 	movw	r3, #47548	; 0xb9bc
    d8a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8a4:	601a      	str	r2, [r3, #0]
    d8a6:	f64b 4318 	movw	r3, #48152	; 0xbc18
    d8aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8ae:	681a      	ldr	r2, [r3, #0]
    d8b0:	f64b 13c0 	movw	r3, #47552	; 0xb9c0
    d8b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8b8:	601a      	str	r2, [r3, #0]
    d8ba:	f64b 13cc 	movw	r3, #47564	; 0xb9cc
    d8be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8c2:	2200      	movs	r2, #0
    d8c4:	801a      	strh	r2, [r3, #0]
    d8c6:	f64b 13d0 	movw	r3, #47568	; 0xb9d0
    d8ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8ce:	f04f 0200 	mov.w	r2, #0
    d8d2:	601a      	str	r2, [r3, #0]
    d8d4:	f001 bf5e 	b.w	f794 <auto_nav+0x21a4>
     else { }
}
else if (nav_block == 1) // two
    d8d8:	f64b 13b9 	movw	r3, #47545	; 0xb9b9
    d8dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8e0:	781b      	ldrb	r3, [r3, #0]
    d8e2:	2b01      	cmp	r3, #1
    d8e4:	f040 81bc 	bne.w	dc60 <auto_nav+0x670>
{
    nav_block = 1;
    d8e8:	f64b 13b9 	movw	r3, #47545	; 0xb9b9
    d8ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8f0:	2201      	movs	r2, #1
    d8f2:	701a      	strb	r2, [r3, #0]
    if RcEvent1() 
    d8f4:	f24b 6348 	movw	r3, #46664	; 0xb648
    d8f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8fc:	781b      	ldrb	r3, [r3, #0]
    d8fe:	2b00      	cmp	r3, #0
    d900:	d007      	beq.n	d912 <auto_nav+0x322>
    d902:	f24b 6348 	movw	r3, #46664	; 0xb648
    d906:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d90a:	2200      	movs	r2, #0
    d90c:	701a      	strb	r2, [r3, #0]
    d90e:	2301      	movs	r3, #1
    d910:	e000      	b.n	d914 <auto_nav+0x324>
    d912:	2300      	movs	r3, #0
    d914:	2b00      	cmp	r3, #0
    d916:	d034      	beq.n	d982 <auto_nav+0x392>
	{ GotoBlock(2) }
    d918:	f64b 13b9 	movw	r3, #47545	; 0xb9b9
    d91c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d920:	2202      	movs	r2, #2
    d922:	701a      	strb	r2, [r3, #0]
    d924:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    d928:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d92c:	2200      	movs	r2, #0
    d92e:	701a      	strb	r2, [r3, #0]
    d930:	f64b 13ce 	movw	r3, #47566	; 0xb9ce
    d934:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d938:	2200      	movs	r2, #0
    d93a:	801a      	strh	r2, [r3, #0]
    d93c:	f64b 4314 	movw	r3, #48148	; 0xbc14
    d940:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d944:	681a      	ldr	r2, [r3, #0]
    d946:	f64b 13bc 	movw	r3, #47548	; 0xb9bc
    d94a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d94e:	601a      	str	r2, [r3, #0]
    d950:	f64b 4318 	movw	r3, #48152	; 0xbc18
    d954:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d958:	681a      	ldr	r2, [r3, #0]
    d95a:	f64b 13c0 	movw	r3, #47552	; 0xb9c0
    d95e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d962:	601a      	str	r2, [r3, #0]
    d964:	f64b 13cc 	movw	r3, #47564	; 0xb9cc
    d968:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d96c:	2200      	movs	r2, #0
    d96e:	801a      	strh	r2, [r3, #0]
    d970:	f64b 13d0 	movw	r3, #47568	; 0xb9d0
    d974:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d978:	f04f 0200 	mov.w	r2, #0
    d97c:	601a      	str	r2, [r3, #0]
    d97e:	f001 bf09 	b.w	f794 <auto_nav+0x21a4>
    if(nav_stage == 0)
    d982:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    d986:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d98a:	781b      	ldrb	r3, [r3, #0]
    d98c:	2b00      	cmp	r3, #0
    d98e:	d12e      	bne.n	d9ee <auto_nav+0x3fe>
    {
       Label(while_3)
       if (! (TRUE)) Goto(endwhile_4) else NextStage();
    d990:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    d994:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d998:	781b      	ldrb	r3, [r3, #0]
    d99a:	3301      	adds	r3, #1
    d99c:	b2da      	uxtb	r2, r3
    d99e:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    d9a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9a6:	701a      	strb	r2, [r3, #0]
    d9a8:	f64b 4314 	movw	r3, #48148	; 0xbc14
    d9ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9b0:	681a      	ldr	r2, [r3, #0]
    d9b2:	f64b 13bc 	movw	r3, #47548	; 0xb9bc
    d9b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9ba:	601a      	str	r2, [r3, #0]
    d9bc:	f64b 4318 	movw	r3, #48152	; 0xbc18
    d9c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9c4:	681a      	ldr	r2, [r3, #0]
    d9c6:	f64b 13c0 	movw	r3, #47552	; 0xb9c0
    d9ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9ce:	601a      	str	r2, [r3, #0]
    d9d0:	f64b 13cc 	movw	r3, #47564	; 0xb9cc
    d9d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9d8:	2200      	movs	r2, #0
    d9da:	801a      	strh	r2, [r3, #0]
    d9dc:	f64b 13d0 	movw	r3, #47568	; 0xb9d0
    d9e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9e4:	f04f 0200 	mov.w	r2, #0
    d9e8:	601a      	str	r2, [r3, #0]
    d9ea:	f001 bed3 	b.w	f794 <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
    d9ee:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    d9f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9f6:	781b      	ldrb	r3, [r3, #0]
    d9f8:	2b01      	cmp	r3, #1
    d9fa:	d169      	bne.n	dad0 <auto_nav+0x4e0>
    {
	  nav_stage = 1;
    d9fc:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    da00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da04:	2201      	movs	r2, #1
    da06:	701a      	strb	r2, [r3, #0]
          if (approaching(1)) NextStageFrom(1) else {
    da08:	2001      	movs	r0, #1
    da0a:	f001 fed1 	bl	f7b0 <approaching>
    da0e:	4603      	mov	r3, r0
    da10:	2b00      	cmp	r3, #0
    da12:	d034      	beq.n	da7e <auto_nav+0x48e>
    da14:	f64b 13c4 	movw	r3, #47556	; 0xb9c4
    da18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da1c:	2201      	movs	r2, #1
    da1e:	701a      	strb	r2, [r3, #0]
    da20:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    da24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da28:	781b      	ldrb	r3, [r3, #0]
    da2a:	3301      	adds	r3, #1
    da2c:	b2da      	uxtb	r2, r3
    da2e:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    da32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da36:	701a      	strb	r2, [r3, #0]
    da38:	f64b 4314 	movw	r3, #48148	; 0xbc14
    da3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da40:	681a      	ldr	r2, [r3, #0]
    da42:	f64b 13bc 	movw	r3, #47548	; 0xb9bc
    da46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da4a:	601a      	str	r2, [r3, #0]
    da4c:	f64b 4318 	movw	r3, #48152	; 0xbc18
    da50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da54:	681a      	ldr	r2, [r3, #0]
    da56:	f64b 13c0 	movw	r3, #47552	; 0xb9c0
    da5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da5e:	601a      	str	r2, [r3, #0]
    da60:	f64b 13cc 	movw	r3, #47564	; 0xb9cc
    da64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da68:	2200      	movs	r2, #0
    da6a:	801a      	strh	r2, [r3, #0]
    da6c:	f64b 13d0 	movw	r3, #47568	; 0xb9d0
    da70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da74:	f04f 0200 	mov.w	r2, #0
    da78:	601a      	str	r2, [r3, #0]
    da7a:	f001 be8b 	b.w	f794 <auto_nav+0x21a4>
            fly_to(1);
    da7e:	2001      	movs	r0, #1
    da80:	f001 ffca 	bl	fa18 <fly_to>
            auto_pitch = FALSE;
    da84:	f24b 6347 	movw	r3, #46663	; 0xb647
    da88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da8c:	2200      	movs	r2, #0
    da8e:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
    da90:	f64b 13e4 	movw	r3, #47588	; 0xb9e4
    da94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da98:	f04f 0200 	mov.w	r2, #0
    da9c:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
    da9e:	f24b 6345 	movw	r3, #46661	; 0xb645
    daa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    daa6:	2203      	movs	r2, #3
    daa8:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[1].a;
    daaa:	f240 1374 	movw	r3, #372	; 0x174
    daae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dab2:	695a      	ldr	r2, [r3, #20]
    dab4:	f240 1370 	movw	r3, #368	; 0x170
    dab8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dabc:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
    dabe:	f64b 13ac 	movw	r3, #47532	; 0xb9ac
    dac2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dac6:	f04f 0200 	mov.w	r2, #0
    daca:	601a      	str	r2, [r3, #0]
          }
          return;
    dacc:	f001 be62 	b.w	f794 <auto_nav+0x21a4>
     }
     else if (nav_stage == 2)
    dad0:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    dad4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dad8:	781b      	ldrb	r3, [r3, #0]
    dada:	2b02      	cmp	r3, #2
    dadc:	d169      	bne.n	dbb2 <auto_nav+0x5c2>
     {
	  nav_stage = 2;
    dade:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    dae2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dae6:	2202      	movs	r2, #2
    dae8:	701a      	strb	r2, [r3, #0]
          if (approaching(4)) NextStageFrom(4) else {
    daea:	2004      	movs	r0, #4
    daec:	f001 fe60 	bl	f7b0 <approaching>
    daf0:	4603      	mov	r3, r0
    daf2:	2b00      	cmp	r3, #0
    daf4:	d034      	beq.n	db60 <auto_nav+0x570>
    daf6:	f64b 13c4 	movw	r3, #47556	; 0xb9c4
    dafa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dafe:	2204      	movs	r2, #4
    db00:	701a      	strb	r2, [r3, #0]
    db02:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    db06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db0a:	781b      	ldrb	r3, [r3, #0]
    db0c:	3301      	adds	r3, #1
    db0e:	b2da      	uxtb	r2, r3
    db10:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    db14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db18:	701a      	strb	r2, [r3, #0]
    db1a:	f64b 4314 	movw	r3, #48148	; 0xbc14
    db1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db22:	681a      	ldr	r2, [r3, #0]
    db24:	f64b 13bc 	movw	r3, #47548	; 0xb9bc
    db28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db2c:	601a      	str	r2, [r3, #0]
    db2e:	f64b 4318 	movw	r3, #48152	; 0xbc18
    db32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db36:	681a      	ldr	r2, [r3, #0]
    db38:	f64b 13c0 	movw	r3, #47552	; 0xb9c0
    db3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db40:	601a      	str	r2, [r3, #0]
    db42:	f64b 13cc 	movw	r3, #47564	; 0xb9cc
    db46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db4a:	2200      	movs	r2, #0
    db4c:	801a      	strh	r2, [r3, #0]
    db4e:	f64b 13d0 	movw	r3, #47568	; 0xb9d0
    db52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db56:	f04f 0200 	mov.w	r2, #0
    db5a:	601a      	str	r2, [r3, #0]
    db5c:	f001 be1a 	b.w	f794 <auto_nav+0x21a4>
            fly_to(4);
    db60:	2004      	movs	r0, #4
    db62:	f001 ff59 	bl	fa18 <fly_to>
            auto_pitch = FALSE;
    db66:	f24b 6347 	movw	r3, #46663	; 0xb647
    db6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db6e:	2200      	movs	r2, #0
    db70:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
    db72:	f64b 13e4 	movw	r3, #47588	; 0xb9e4
    db76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db7a:	f04f 0200 	mov.w	r2, #0
    db7e:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
    db80:	f24b 6345 	movw	r3, #46661	; 0xb645
    db84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db88:	2203      	movs	r2, #3
    db8a:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[4].a;
    db8c:	f240 1374 	movw	r3, #372	; 0x174
    db90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    db96:	f240 1370 	movw	r3, #368	; 0x170
    db9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db9e:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
    dba0:	f64b 13ac 	movw	r3, #47532	; 0xb9ac
    dba4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dba8:	f04f 0200 	mov.w	r2, #0
    dbac:	601a      	str	r2, [r3, #0]
          }
          return;
    dbae:	f001 bdf1 	b.w	f794 <auto_nav+0x21a4>
      }
      else if (nav_stage == 3)
    dbb2:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    dbb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbba:	781b      	ldrb	r3, [r3, #0]
    dbbc:	2b03      	cmp	r3, #3
    dbbe:	d106      	bne.n	dbce <auto_nav+0x5de>
      {
	  nav_stage = 3;
    dbc0:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    dbc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbc8:	2203      	movs	r2, #3
    dbca:	701a      	strb	r2, [r3, #0]
          Goto(while_3)
    dbcc:	e6e0      	b.n	d990 <auto_nav+0x3a0>
      }
      else if (nav_stage == 4)
    dbce:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    dbd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbd6:	781b      	ldrb	r3, [r3, #0]
    dbd8:	2b04      	cmp	r3, #4
    dbda:	f041 85db 	bne.w	f794 <auto_nav+0x21a4>
      {
        Label(endwhile_4)
	nav_stage = 4;
    dbde:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    dbe2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbe6:	2204      	movs	r2, #4
    dbe8:	701a      	strb	r2, [r3, #0]
        NextBlock()
    dbea:	f64b 13b9 	movw	r3, #47545	; 0xb9b9
    dbee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbf2:	781b      	ldrb	r3, [r3, #0]
    dbf4:	3301      	adds	r3, #1
    dbf6:	b2da      	uxtb	r2, r3
    dbf8:	f64b 13b9 	movw	r3, #47545	; 0xb9b9
    dbfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc00:	701a      	strb	r2, [r3, #0]
    dc02:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    dc06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc0a:	2200      	movs	r2, #0
    dc0c:	701a      	strb	r2, [r3, #0]
    dc0e:	f64b 13ce 	movw	r3, #47566	; 0xb9ce
    dc12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc16:	2200      	movs	r2, #0
    dc18:	801a      	strh	r2, [r3, #0]
    dc1a:	f64b 4314 	movw	r3, #48148	; 0xbc14
    dc1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc22:	681a      	ldr	r2, [r3, #0]
    dc24:	f64b 13bc 	movw	r3, #47548	; 0xb9bc
    dc28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc2c:	601a      	str	r2, [r3, #0]
    dc2e:	f64b 4318 	movw	r3, #48152	; 0xbc18
    dc32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc36:	681a      	ldr	r2, [r3, #0]
    dc38:	f64b 13c0 	movw	r3, #47552	; 0xb9c0
    dc3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc40:	601a      	str	r2, [r3, #0]
    dc42:	f64b 13cc 	movw	r3, #47564	; 0xb9cc
    dc46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc4a:	2200      	movs	r2, #0
    dc4c:	801a      	strh	r2, [r3, #0]
    dc4e:	f64b 13d0 	movw	r3, #47568	; 0xb9d0
    dc52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc56:	f04f 0200 	mov.w	r2, #0
    dc5a:	601a      	str	r2, [r3, #0]
    dc5c:	f001 bd9a 	b.w	f794 <auto_nav+0x21a4>
      }
      else { }
}
else if (nav_block == 2) // height
    dc60:	f64b 13b9 	movw	r3, #47545	; 0xb9b9
    dc64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc68:	781b      	ldrb	r3, [r3, #0]
    dc6a:	2b02      	cmp	r3, #2
    dc6c:	f040 8392 	bne.w	e394 <auto_nav+0xda4>
{
	nav_block = 2;
    dc70:	f64b 13b9 	movw	r3, #47545	; 0xb9b9
    dc74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc78:	2202      	movs	r2, #2
    dc7a:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(3) }
    dc7c:	f24b 6348 	movw	r3, #46664	; 0xb648
    dc80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc84:	781b      	ldrb	r3, [r3, #0]
    dc86:	2b00      	cmp	r3, #0
    dc88:	d007      	beq.n	dc9a <auto_nav+0x6aa>
    dc8a:	f24b 6348 	movw	r3, #46664	; 0xb648
    dc8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc92:	2200      	movs	r2, #0
    dc94:	701a      	strb	r2, [r3, #0]
    dc96:	2301      	movs	r3, #1
    dc98:	e000      	b.n	dc9c <auto_nav+0x6ac>
    dc9a:	2300      	movs	r3, #0
    dc9c:	2b00      	cmp	r3, #0
    dc9e:	d034      	beq.n	dd0a <auto_nav+0x71a>
    dca0:	f64b 13b9 	movw	r3, #47545	; 0xb9b9
    dca4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dca8:	2203      	movs	r2, #3
    dcaa:	701a      	strb	r2, [r3, #0]
    dcac:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    dcb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcb4:	2200      	movs	r2, #0
    dcb6:	701a      	strb	r2, [r3, #0]
    dcb8:	f64b 13ce 	movw	r3, #47566	; 0xb9ce
    dcbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcc0:	2200      	movs	r2, #0
    dcc2:	801a      	strh	r2, [r3, #0]
    dcc4:	f64b 4314 	movw	r3, #48148	; 0xbc14
    dcc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dccc:	681a      	ldr	r2, [r3, #0]
    dcce:	f64b 13bc 	movw	r3, #47548	; 0xb9bc
    dcd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcd6:	601a      	str	r2, [r3, #0]
    dcd8:	f64b 4318 	movw	r3, #48152	; 0xbc18
    dcdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dce0:	681a      	ldr	r2, [r3, #0]
    dce2:	f64b 13c0 	movw	r3, #47552	; 0xb9c0
    dce6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcea:	601a      	str	r2, [r3, #0]
    dcec:	f64b 13cc 	movw	r3, #47564	; 0xb9cc
    dcf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcf4:	2200      	movs	r2, #0
    dcf6:	801a      	strh	r2, [r3, #0]
    dcf8:	f64b 13d0 	movw	r3, #47568	; 0xb9d0
    dcfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd00:	f04f 0200 	mov.w	r2, #0
    dd04:	601a      	str	r2, [r3, #0]
    dd06:	f001 bd45 	b.w	f794 <auto_nav+0x21a4>
    
    if(nav_stage == 0)
    dd0a:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    dd0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd12:	781b      	ldrb	r3, [r3, #0]
    dd14:	2b00      	cmp	r3, #0
    dd16:	d134      	bne.n	dd82 <auto_nav+0x792>
    {
       Label(while_5)
       nav_stage = 0;
    dd18:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    dd1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd20:	2200      	movs	r2, #0
    dd22:	701a      	strb	r2, [r3, #0]
       if (! (TRUE)) Goto(endwhile_6) else NextStage();
    dd24:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    dd28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd2c:	781b      	ldrb	r3, [r3, #0]
    dd2e:	3301      	adds	r3, #1
    dd30:	b2da      	uxtb	r2, r3
    dd32:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    dd36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd3a:	701a      	strb	r2, [r3, #0]
    dd3c:	f64b 4314 	movw	r3, #48148	; 0xbc14
    dd40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd44:	681a      	ldr	r2, [r3, #0]
    dd46:	f64b 13bc 	movw	r3, #47548	; 0xb9bc
    dd4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd4e:	601a      	str	r2, [r3, #0]
    dd50:	f64b 4318 	movw	r3, #48152	; 0xbc18
    dd54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd58:	681a      	ldr	r2, [r3, #0]
    dd5a:	f64b 13c0 	movw	r3, #47552	; 0xb9c0
    dd5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd62:	601a      	str	r2, [r3, #0]
    dd64:	f64b 13cc 	movw	r3, #47564	; 0xb9cc
    dd68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd6c:	2200      	movs	r2, #0
    dd6e:	801a      	strh	r2, [r3, #0]
    dd70:	f64b 13d0 	movw	r3, #47568	; 0xb9d0
    dd74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd78:	f04f 0200 	mov.w	r2, #0
    dd7c:	601a      	str	r2, [r3, #0]
    dd7e:	f001 bd09 	b.w	f794 <auto_nav+0x21a4>
    }
    else if(nav_stage == 1)
    dd82:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    dd86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd8a:	781b      	ldrb	r3, [r3, #0]
    dd8c:	2b01      	cmp	r3, #1
    dd8e:	d169      	bne.n	de64 <auto_nav+0x874>
    {
         nav_stage =1;
    dd90:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    dd94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd98:	2201      	movs	r2, #1
    dd9a:	701a      	strb	r2, [r3, #0]
          if (approaching(6)) NextStageFrom(6) else {
    dd9c:	2006      	movs	r0, #6
    dd9e:	f001 fd07 	bl	f7b0 <approaching>
    dda2:	4603      	mov	r3, r0
    dda4:	2b00      	cmp	r3, #0
    dda6:	d034      	beq.n	de12 <auto_nav+0x822>
    dda8:	f64b 13c4 	movw	r3, #47556	; 0xb9c4
    ddac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddb0:	2206      	movs	r2, #6
    ddb2:	701a      	strb	r2, [r3, #0]
    ddb4:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    ddb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddbc:	781b      	ldrb	r3, [r3, #0]
    ddbe:	3301      	adds	r3, #1
    ddc0:	b2da      	uxtb	r2, r3
    ddc2:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    ddc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddca:	701a      	strb	r2, [r3, #0]
    ddcc:	f64b 4314 	movw	r3, #48148	; 0xbc14
    ddd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddd4:	681a      	ldr	r2, [r3, #0]
    ddd6:	f64b 13bc 	movw	r3, #47548	; 0xb9bc
    ddda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddde:	601a      	str	r2, [r3, #0]
    dde0:	f64b 4318 	movw	r3, #48152	; 0xbc18
    dde4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dde8:	681a      	ldr	r2, [r3, #0]
    ddea:	f64b 13c0 	movw	r3, #47552	; 0xb9c0
    ddee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddf2:	601a      	str	r2, [r3, #0]
    ddf4:	f64b 13cc 	movw	r3, #47564	; 0xb9cc
    ddf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddfc:	2200      	movs	r2, #0
    ddfe:	801a      	strh	r2, [r3, #0]
    de00:	f64b 13d0 	movw	r3, #47568	; 0xb9d0
    de04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de08:	f04f 0200 	mov.w	r2, #0
    de0c:	601a      	str	r2, [r3, #0]
    de0e:	f001 bcc1 	b.w	f794 <auto_nav+0x21a4>
            fly_to(6);
    de12:	2006      	movs	r0, #6
    de14:	f001 fe00 	bl	fa18 <fly_to>
            auto_pitch = FALSE;
    de18:	f24b 6347 	movw	r3, #46663	; 0xb647
    de1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de20:	2200      	movs	r2, #0
    de22:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
    de24:	f64b 13e4 	movw	r3, #47588	; 0xb9e4
    de28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de2c:	f04f 0200 	mov.w	r2, #0
    de30:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
    de32:	f24b 6345 	movw	r3, #46661	; 0xb645
    de36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de3a:	2203      	movs	r2, #3
    de3c:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[6].a;
    de3e:	f240 1374 	movw	r3, #372	; 0x174
    de42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de46:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    de48:	f240 1370 	movw	r3, #368	; 0x170
    de4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de50:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
    de52:	f64b 13ac 	movw	r3, #47532	; 0xb9ac
    de56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de5a:	f04f 0200 	mov.w	r2, #0
    de5e:	601a      	str	r2, [r3, #0]
          }
          return;
    de60:	f001 bc98 	b.w	f794 <auto_nav+0x21a4>
     }
     else if (nav_stage == 2)
    de64:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    de68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de6c:	781b      	ldrb	r3, [r3, #0]
    de6e:	2b02      	cmp	r3, #2
    de70:	d169      	bne.n	df46 <auto_nav+0x956>
     {
         nav_stage =2; 
    de72:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    de76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de7a:	2202      	movs	r2, #2
    de7c:	701a      	strb	r2, [r3, #0]
         if (approaching(1)) NextStageFrom(1) else {
    de7e:	2001      	movs	r0, #1
    de80:	f001 fc96 	bl	f7b0 <approaching>
    de84:	4603      	mov	r3, r0
    de86:	2b00      	cmp	r3, #0
    de88:	d034      	beq.n	def4 <auto_nav+0x904>
    de8a:	f64b 13c4 	movw	r3, #47556	; 0xb9c4
    de8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de92:	2201      	movs	r2, #1
    de94:	701a      	strb	r2, [r3, #0]
    de96:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    de9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de9e:	781b      	ldrb	r3, [r3, #0]
    dea0:	3301      	adds	r3, #1
    dea2:	b2da      	uxtb	r2, r3
    dea4:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    dea8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    deac:	701a      	strb	r2, [r3, #0]
    deae:	f64b 4314 	movw	r3, #48148	; 0xbc14
    deb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    deb6:	681a      	ldr	r2, [r3, #0]
    deb8:	f64b 13bc 	movw	r3, #47548	; 0xb9bc
    debc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dec0:	601a      	str	r2, [r3, #0]
    dec2:	f64b 4318 	movw	r3, #48152	; 0xbc18
    dec6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    deca:	681a      	ldr	r2, [r3, #0]
    decc:	f64b 13c0 	movw	r3, #47552	; 0xb9c0
    ded0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ded4:	601a      	str	r2, [r3, #0]
    ded6:	f64b 13cc 	movw	r3, #47564	; 0xb9cc
    deda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dede:	2200      	movs	r2, #0
    dee0:	801a      	strh	r2, [r3, #0]
    dee2:	f64b 13d0 	movw	r3, #47568	; 0xb9d0
    dee6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    deea:	f04f 0200 	mov.w	r2, #0
    deee:	601a      	str	r2, [r3, #0]
    def0:	f001 bc50 	b.w	f794 <auto_nav+0x21a4>
            fly_to(1);
    def4:	2001      	movs	r0, #1
    def6:	f001 fd8f 	bl	fa18 <fly_to>
            auto_pitch = FALSE;
    defa:	f24b 6347 	movw	r3, #46663	; 0xb647
    defe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df02:	2200      	movs	r2, #0
    df04:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
    df06:	f64b 13e4 	movw	r3, #47588	; 0xb9e4
    df0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df0e:	f04f 0200 	mov.w	r2, #0
    df12:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
    df14:	f24b 6345 	movw	r3, #46661	; 0xb645
    df18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df1c:	2203      	movs	r2, #3
    df1e:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[1].a;
    df20:	f240 1374 	movw	r3, #372	; 0x174
    df24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df28:	695a      	ldr	r2, [r3, #20]
    df2a:	f240 1370 	movw	r3, #368	; 0x170
    df2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df32:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
    df34:	f64b 13ac 	movw	r3, #47532	; 0xb9ac
    df38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df3c:	f04f 0200 	mov.w	r2, #0
    df40:	601a      	str	r2, [r3, #0]
          }
          return;
    df42:	f001 bc27 	b.w	f794 <auto_nav+0x21a4>
      }
      else if (nav_stage == 3)
    df46:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    df4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df4e:	781b      	ldrb	r3, [r3, #0]
    df50:	2b03      	cmp	r3, #3
    df52:	d16f      	bne.n	e034 <auto_nav+0xa44>
      {
	   nav_stage = 3;         
    df54:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    df58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df5c:	2203      	movs	r2, #3
    df5e:	701a      	strb	r2, [r3, #0]
           if (approaching(2)) NextStageFrom(2) else {
    df60:	2002      	movs	r0, #2
    df62:	f001 fc25 	bl	f7b0 <approaching>
    df66:	4603      	mov	r3, r0
    df68:	2b00      	cmp	r3, #0
    df6a:	d034      	beq.n	dfd6 <auto_nav+0x9e6>
    df6c:	f64b 13c4 	movw	r3, #47556	; 0xb9c4
    df70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df74:	2202      	movs	r2, #2
    df76:	701a      	strb	r2, [r3, #0]
    df78:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    df7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df80:	781b      	ldrb	r3, [r3, #0]
    df82:	3301      	adds	r3, #1
    df84:	b2da      	uxtb	r2, r3
    df86:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    df8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df8e:	701a      	strb	r2, [r3, #0]
    df90:	f64b 4314 	movw	r3, #48148	; 0xbc14
    df94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df98:	681a      	ldr	r2, [r3, #0]
    df9a:	f64b 13bc 	movw	r3, #47548	; 0xb9bc
    df9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfa2:	601a      	str	r2, [r3, #0]
    dfa4:	f64b 4318 	movw	r3, #48152	; 0xbc18
    dfa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfac:	681a      	ldr	r2, [r3, #0]
    dfae:	f64b 13c0 	movw	r3, #47552	; 0xb9c0
    dfb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfb6:	601a      	str	r2, [r3, #0]
    dfb8:	f64b 13cc 	movw	r3, #47564	; 0xb9cc
    dfbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfc0:	2200      	movs	r2, #0
    dfc2:	801a      	strh	r2, [r3, #0]
    dfc4:	f64b 13d0 	movw	r3, #47568	; 0xb9d0
    dfc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfcc:	f04f 0200 	mov.w	r2, #0
    dfd0:	601a      	str	r2, [r3, #0]
    dfd2:	f001 bbdf 	b.w	f794 <auto_nav+0x21a4>
            route_to(last_wp, 2);
    dfd6:	f64b 13c4 	movw	r3, #47556	; 0xb9c4
    dfda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfde:	781b      	ldrb	r3, [r3, #0]
    dfe0:	4618      	mov	r0, r3
    dfe2:	2102      	movs	r1, #2
    dfe4:	f001 fd3a 	bl	fa5c <route_to>
            auto_pitch = FALSE;
    dfe8:	f24b 6347 	movw	r3, #46663	; 0xb647
    dfec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dff0:	2200      	movs	r2, #0
    dff2:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
    dff4:	f64b 13e4 	movw	r3, #47588	; 0xb9e4
    dff8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dffc:	f04f 0200 	mov.w	r2, #0
    e000:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
    e002:	f24b 6345 	movw	r3, #46661	; 0xb645
    e006:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e00a:	2203      	movs	r2, #3
    e00c:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[2].a;
    e00e:	f240 1374 	movw	r3, #372	; 0x174
    e012:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e016:	6a1a      	ldr	r2, [r3, #32]
    e018:	f240 1370 	movw	r3, #368	; 0x170
    e01c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e020:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
    e022:	f64b 13ac 	movw	r3, #47532	; 0xb9ac
    e026:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e02a:	f04f 0200 	mov.w	r2, #0
    e02e:	601a      	str	r2, [r3, #0]
          }
          return;
    e030:	f001 bbb0 	b.w	f794 <auto_nav+0x21a4>
       }
       else if (nav_stage == 4)
    e034:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    e038:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e03c:	781b      	ldrb	r3, [r3, #0]
    e03e:	2b04      	cmp	r3, #4
    e040:	d169      	bne.n	e116 <auto_nav+0xb26>
       {
          nav_stage = 4;
    e042:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    e046:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e04a:	2204      	movs	r2, #4
    e04c:	701a      	strb	r2, [r3, #0]
          if (approaching(3)) NextStageFrom(3) else {
    e04e:	2003      	movs	r0, #3
    e050:	f001 fbae 	bl	f7b0 <approaching>
    e054:	4603      	mov	r3, r0
    e056:	2b00      	cmp	r3, #0
    e058:	d034      	beq.n	e0c4 <auto_nav+0xad4>
    e05a:	f64b 13c4 	movw	r3, #47556	; 0xb9c4
    e05e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e062:	2203      	movs	r2, #3
    e064:	701a      	strb	r2, [r3, #0]
    e066:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    e06a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e06e:	781b      	ldrb	r3, [r3, #0]
    e070:	3301      	adds	r3, #1
    e072:	b2da      	uxtb	r2, r3
    e074:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    e078:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e07c:	701a      	strb	r2, [r3, #0]
    e07e:	f64b 4314 	movw	r3, #48148	; 0xbc14
    e082:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e086:	681a      	ldr	r2, [r3, #0]
    e088:	f64b 13bc 	movw	r3, #47548	; 0xb9bc
    e08c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e090:	601a      	str	r2, [r3, #0]
    e092:	f64b 4318 	movw	r3, #48152	; 0xbc18
    e096:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e09a:	681a      	ldr	r2, [r3, #0]
    e09c:	f64b 13c0 	movw	r3, #47552	; 0xb9c0
    e0a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0a4:	601a      	str	r2, [r3, #0]
    e0a6:	f64b 13cc 	movw	r3, #47564	; 0xb9cc
    e0aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0ae:	2200      	movs	r2, #0
    e0b0:	801a      	strh	r2, [r3, #0]
    e0b2:	f64b 13d0 	movw	r3, #47568	; 0xb9d0
    e0b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0ba:	f04f 0200 	mov.w	r2, #0
    e0be:	601a      	str	r2, [r3, #0]
    e0c0:	f001 bb68 	b.w	f794 <auto_nav+0x21a4>
            fly_to(3);
    e0c4:	2003      	movs	r0, #3
    e0c6:	f001 fca7 	bl	fa18 <fly_to>
            auto_pitch = FALSE;
    e0ca:	f24b 6347 	movw	r3, #46663	; 0xb647
    e0ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0d2:	2200      	movs	r2, #0
    e0d4:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
    e0d6:	f64b 13e4 	movw	r3, #47588	; 0xb9e4
    e0da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0de:	f04f 0200 	mov.w	r2, #0
    e0e2:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
    e0e4:	f24b 6345 	movw	r3, #46661	; 0xb645
    e0e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0ec:	2203      	movs	r2, #3
    e0ee:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[3].a;
    e0f0:	f240 1374 	movw	r3, #372	; 0x174
    e0f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    e0fa:	f240 1370 	movw	r3, #368	; 0x170
    e0fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e102:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
    e104:	f64b 13ac 	movw	r3, #47532	; 0xb9ac
    e108:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e10c:	f04f 0200 	mov.w	r2, #0
    e110:	601a      	str	r2, [r3, #0]
          }
          return;
    e112:	f001 bb3f 	b.w	f794 <auto_nav+0x21a4>
       }
       else if (nav_stage == 5)
    e116:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    e11a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e11e:	781b      	ldrb	r3, [r3, #0]
    e120:	2b05      	cmp	r3, #5
    e122:	d169      	bne.n	e1f8 <auto_nav+0xc08>
       {
          nav_stage =5;
    e124:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    e128:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e12c:	2205      	movs	r2, #5
    e12e:	701a      	strb	r2, [r3, #0]
          if (approaching(4)) NextStageFrom(4) else {
    e130:	2004      	movs	r0, #4
    e132:	f001 fb3d 	bl	f7b0 <approaching>
    e136:	4603      	mov	r3, r0
    e138:	2b00      	cmp	r3, #0
    e13a:	d034      	beq.n	e1a6 <auto_nav+0xbb6>
    e13c:	f64b 13c4 	movw	r3, #47556	; 0xb9c4
    e140:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e144:	2204      	movs	r2, #4
    e146:	701a      	strb	r2, [r3, #0]
    e148:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    e14c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e150:	781b      	ldrb	r3, [r3, #0]
    e152:	3301      	adds	r3, #1
    e154:	b2da      	uxtb	r2, r3
    e156:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    e15a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e15e:	701a      	strb	r2, [r3, #0]
    e160:	f64b 4314 	movw	r3, #48148	; 0xbc14
    e164:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e168:	681a      	ldr	r2, [r3, #0]
    e16a:	f64b 13bc 	movw	r3, #47548	; 0xb9bc
    e16e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e172:	601a      	str	r2, [r3, #0]
    e174:	f64b 4318 	movw	r3, #48152	; 0xbc18
    e178:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e17c:	681a      	ldr	r2, [r3, #0]
    e17e:	f64b 13c0 	movw	r3, #47552	; 0xb9c0
    e182:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e186:	601a      	str	r2, [r3, #0]
    e188:	f64b 13cc 	movw	r3, #47564	; 0xb9cc
    e18c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e190:	2200      	movs	r2, #0
    e192:	801a      	strh	r2, [r3, #0]
    e194:	f64b 13d0 	movw	r3, #47568	; 0xb9d0
    e198:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e19c:	f04f 0200 	mov.w	r2, #0
    e1a0:	601a      	str	r2, [r3, #0]
    e1a2:	f001 baf7 	b.w	f794 <auto_nav+0x21a4>
            fly_to(4);
    e1a6:	2004      	movs	r0, #4
    e1a8:	f001 fc36 	bl	fa18 <fly_to>
            auto_pitch = FALSE;
    e1ac:	f24b 6347 	movw	r3, #46663	; 0xb647
    e1b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1b4:	2200      	movs	r2, #0
    e1b6:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
    e1b8:	f64b 13e4 	movw	r3, #47588	; 0xb9e4
    e1bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1c0:	f04f 0200 	mov.w	r2, #0
    e1c4:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
    e1c6:	f24b 6345 	movw	r3, #46661	; 0xb645
    e1ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1ce:	2203      	movs	r2, #3
    e1d0:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[4].a;
    e1d2:	f240 1374 	movw	r3, #372	; 0x174
    e1d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e1dc:	f240 1370 	movw	r3, #368	; 0x170
    e1e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1e4:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
    e1e6:	f64b 13ac 	movw	r3, #47532	; 0xb9ac
    e1ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1ee:	f04f 0200 	mov.w	r2, #0
    e1f2:	601a      	str	r2, [r3, #0]
          }
          return;
    e1f4:	f001 bace 	b.w	f794 <auto_nav+0x21a4>
       }
       else if (nav_stage == 6)
    e1f8:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    e1fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e200:	781b      	ldrb	r3, [r3, #0]
    e202:	2b06      	cmp	r3, #6
    e204:	d16f      	bne.n	e2e6 <auto_nav+0xcf6>
       {
          nav_stage =6;
    e206:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    e20a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e20e:	2206      	movs	r2, #6
    e210:	701a      	strb	r2, [r3, #0]
          if (approaching(5)) NextStageFrom(5) else {
    e212:	2005      	movs	r0, #5
    e214:	f001 facc 	bl	f7b0 <approaching>
    e218:	4603      	mov	r3, r0
    e21a:	2b00      	cmp	r3, #0
    e21c:	d034      	beq.n	e288 <auto_nav+0xc98>
    e21e:	f64b 13c4 	movw	r3, #47556	; 0xb9c4
    e222:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e226:	2205      	movs	r2, #5
    e228:	701a      	strb	r2, [r3, #0]
    e22a:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    e22e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e232:	781b      	ldrb	r3, [r3, #0]
    e234:	3301      	adds	r3, #1
    e236:	b2da      	uxtb	r2, r3
    e238:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    e23c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e240:	701a      	strb	r2, [r3, #0]
    e242:	f64b 4314 	movw	r3, #48148	; 0xbc14
    e246:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e24a:	681a      	ldr	r2, [r3, #0]
    e24c:	f64b 13bc 	movw	r3, #47548	; 0xb9bc
    e250:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e254:	601a      	str	r2, [r3, #0]
    e256:	f64b 4318 	movw	r3, #48152	; 0xbc18
    e25a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e25e:	681a      	ldr	r2, [r3, #0]
    e260:	f64b 13c0 	movw	r3, #47552	; 0xb9c0
    e264:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e268:	601a      	str	r2, [r3, #0]
    e26a:	f64b 13cc 	movw	r3, #47564	; 0xb9cc
    e26e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e272:	2200      	movs	r2, #0
    e274:	801a      	strh	r2, [r3, #0]
    e276:	f64b 13d0 	movw	r3, #47568	; 0xb9d0
    e27a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e27e:	f04f 0200 	mov.w	r2, #0
    e282:	601a      	str	r2, [r3, #0]
    e284:	f001 ba86 	b.w	f794 <auto_nav+0x21a4>
            route_to(last_wp, 5);
    e288:	f64b 13c4 	movw	r3, #47556	; 0xb9c4
    e28c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e290:	781b      	ldrb	r3, [r3, #0]
    e292:	4618      	mov	r0, r3
    e294:	2105      	movs	r1, #5
    e296:	f001 fbe1 	bl	fa5c <route_to>
            auto_pitch = FALSE;
    e29a:	f24b 6347 	movw	r3, #46663	; 0xb647
    e29e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2a2:	2200      	movs	r2, #0
    e2a4:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
    e2a6:	f64b 13e4 	movw	r3, #47588	; 0xb9e4
    e2aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2ae:	f04f 0200 	mov.w	r2, #0
    e2b2:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
    e2b4:	f24b 6345 	movw	r3, #46661	; 0xb645
    e2b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2bc:	2203      	movs	r2, #3
    e2be:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[5].a;
    e2c0:	f240 1374 	movw	r3, #372	; 0x174
    e2c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    e2ca:	f240 1370 	movw	r3, #368	; 0x170
    e2ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2d2:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
    e2d4:	f64b 13ac 	movw	r3, #47532	; 0xb9ac
    e2d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2dc:	f04f 0200 	mov.w	r2, #0
    e2e0:	601a      	str	r2, [r3, #0]
          }
          return;
    e2e2:	f001 ba57 	b.w	f794 <auto_nav+0x21a4>
       }
       else if (nav_stage == 7)
    e2e6:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    e2ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2ee:	781b      	ldrb	r3, [r3, #0]
    e2f0:	2b07      	cmp	r3, #7
    e2f2:	d106      	bne.n	e302 <auto_nav+0xd12>
       {
	   nav_stage =7;
    e2f4:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    e2f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2fc:	2207      	movs	r2, #7
    e2fe:	701a      	strb	r2, [r3, #0]
	   Goto(while_5)
    e300:	e50a      	b.n	dd18 <auto_nav+0x728>
	}
       
       else if (nav_stage == 8){
    e302:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    e306:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e30a:	781b      	ldrb	r3, [r3, #0]
    e30c:	2b08      	cmp	r3, #8
    e30e:	f041 8241 	bne.w	f794 <auto_nav+0x21a4>
	  Label(endwhile_6)
	  nav_stage =8;
    e312:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    e316:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e31a:	2208      	movs	r2, #8
    e31c:	701a      	strb	r2, [r3, #0]
          NextBlock();
    e31e:	f64b 13b9 	movw	r3, #47545	; 0xb9b9
    e322:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e326:	781b      	ldrb	r3, [r3, #0]
    e328:	3301      	adds	r3, #1
    e32a:	b2da      	uxtb	r2, r3
    e32c:	f64b 13b9 	movw	r3, #47545	; 0xb9b9
    e330:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e334:	701a      	strb	r2, [r3, #0]
    e336:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    e33a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e33e:	2200      	movs	r2, #0
    e340:	701a      	strb	r2, [r3, #0]
    e342:	f64b 13ce 	movw	r3, #47566	; 0xb9ce
    e346:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e34a:	2200      	movs	r2, #0
    e34c:	801a      	strh	r2, [r3, #0]
    e34e:	f64b 4314 	movw	r3, #48148	; 0xbc14
    e352:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e356:	681a      	ldr	r2, [r3, #0]
    e358:	f64b 13bc 	movw	r3, #47548	; 0xb9bc
    e35c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e360:	601a      	str	r2, [r3, #0]
    e362:	f64b 4318 	movw	r3, #48152	; 0xbc18
    e366:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e36a:	681a      	ldr	r2, [r3, #0]
    e36c:	f64b 13c0 	movw	r3, #47552	; 0xb9c0
    e370:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e374:	601a      	str	r2, [r3, #0]
    e376:	f64b 13cc 	movw	r3, #47564	; 0xb9cc
    e37a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e37e:	2200      	movs	r2, #0
    e380:	801a      	strh	r2, [r3, #0]
    e382:	f64b 13d0 	movw	r3, #47568	; 0xb9d0
    e386:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e38a:	f04f 0200 	mov.w	r2, #0
    e38e:	601a      	str	r2, [r3, #0]
    e390:	f001 ba00 	b.w	f794 <auto_nav+0x21a4>
       }
       else { }
}
else if (nav_block == 3) // xyz
    e394:	f64b 13b9 	movw	r3, #47545	; 0xb9b9
    e398:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e39c:	781b      	ldrb	r3, [r3, #0]
    e39e:	2b03      	cmp	r3, #3
    e3a0:	f040 8388 	bne.w	eab4 <auto_nav+0x14c4>
{
    nav_block = 3;
    e3a4:	f64b 13b9 	movw	r3, #47545	; 0xb9b9
    e3a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3ac:	2203      	movs	r2, #3
    e3ae:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(4) }
    e3b0:	f24b 6348 	movw	r3, #46664	; 0xb648
    e3b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3b8:	781b      	ldrb	r3, [r3, #0]
    e3ba:	2b00      	cmp	r3, #0
    e3bc:	d007      	beq.n	e3ce <auto_nav+0xdde>
    e3be:	f24b 6348 	movw	r3, #46664	; 0xb648
    e3c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3c6:	2200      	movs	r2, #0
    e3c8:	701a      	strb	r2, [r3, #0]
    e3ca:	2301      	movs	r3, #1
    e3cc:	e000      	b.n	e3d0 <auto_nav+0xde0>
    e3ce:	2300      	movs	r3, #0
    e3d0:	2b00      	cmp	r3, #0
    e3d2:	d034      	beq.n	e43e <auto_nav+0xe4e>
    e3d4:	f64b 13b9 	movw	r3, #47545	; 0xb9b9
    e3d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3dc:	2204      	movs	r2, #4
    e3de:	701a      	strb	r2, [r3, #0]
    e3e0:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    e3e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3e8:	2200      	movs	r2, #0
    e3ea:	701a      	strb	r2, [r3, #0]
    e3ec:	f64b 13ce 	movw	r3, #47566	; 0xb9ce
    e3f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3f4:	2200      	movs	r2, #0
    e3f6:	801a      	strh	r2, [r3, #0]
    e3f8:	f64b 4314 	movw	r3, #48148	; 0xbc14
    e3fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e400:	681a      	ldr	r2, [r3, #0]
    e402:	f64b 13bc 	movw	r3, #47548	; 0xb9bc
    e406:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e40a:	601a      	str	r2, [r3, #0]
    e40c:	f64b 4318 	movw	r3, #48152	; 0xbc18
    e410:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e414:	681a      	ldr	r2, [r3, #0]
    e416:	f64b 13c0 	movw	r3, #47552	; 0xb9c0
    e41a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e41e:	601a      	str	r2, [r3, #0]
    e420:	f64b 13cc 	movw	r3, #47564	; 0xb9cc
    e424:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e428:	2200      	movs	r2, #0
    e42a:	801a      	strh	r2, [r3, #0]
    e42c:	f64b 13d0 	movw	r3, #47568	; 0xb9d0
    e430:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e434:	f04f 0200 	mov.w	r2, #0
    e438:	601a      	str	r2, [r3, #0]
    e43a:	f001 b9ab 	b.w	f794 <auto_nav+0x21a4>
    if(nav_stage == 0)
    e43e:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    e442:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e446:	781b      	ldrb	r3, [r3, #0]
    e448:	2b00      	cmp	r3, #0
    e44a:	f040 82ea 	bne.w	ea22 <auto_nav+0x1432>
    {
        nav_stage = 0;
    e44e:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    e452:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e456:	2200      	movs	r2, #0
    e458:	701a      	strb	r2, [r3, #0]
        Goto3D(50)
    e45a:	f24b 6344 	movw	r3, #46660	; 0xb644
    e45e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e462:	781b      	ldrb	r3, [r3, #0]
    e464:	2b02      	cmp	r3, #2
    e466:	f040 81a5 	bne.w	e7b4 <auto_nav+0x11c4>
    e46a:	f24b 7368 	movw	r3, #46952	; 0xb768
    e46e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e472:	88db      	ldrh	r3, [r3, #6]
    e474:	84fb      	strh	r3, [r7, #38]	; 0x26
    e476:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
    e47a:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
    e47e:	dc04      	bgt.n	e48a <auto_nav+0xe9a>
    e480:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
    e484:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
    e488:	da7e      	bge.n	e588 <auto_nav+0xf98>
    e48a:	f64b 2304 	movw	r3, #47620	; 0xba04
    e48e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e492:	681b      	ldr	r3, [r3, #0]
    e494:	4618      	mov	r0, r3
    e496:	f004 fb6b 	bl	12b70 <__aeabi_f2d>
    e49a:	4604      	mov	r4, r0
    e49c:	460d      	mov	r5, r1
    e49e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
    e4a2:	4618      	mov	r0, r3
    e4a4:	f004 ffa4 	bl	133f0 <__aeabi_i2f>
    e4a8:	4603      	mov	r3, r0
    e4aa:	4618      	mov	r0, r3
    e4ac:	f04f 0100 	mov.w	r1, #0
    e4b0:	f2c4 6116 	movt	r1, #17942	; 0x4616
    e4b4:	f005 f8a4 	bl	13600 <__aeabi_fdiv>
    e4b8:	4603      	mov	r3, r0
    e4ba:	4618      	mov	r0, r3
    e4bc:	f004 fb58 	bl	12b70 <__aeabi_f2d>
    e4c0:	4602      	mov	r2, r0
    e4c2:	460b      	mov	r3, r1
    e4c4:	4610      	mov	r0, r2
    e4c6:	4619      	mov	r1, r3
    e4c8:	f04f 0200 	mov.w	r2, #0
    e4cc:	f04f 0300 	mov.w	r3, #0
    e4d0:	f2cc 0334 	movt	r3, #49204	; 0xc034
    e4d4:	f004 fba0 	bl	12c18 <__aeabi_dmul>
    e4d8:	4602      	mov	r2, r0
    e4da:	460b      	mov	r3, r1
    e4dc:	4610      	mov	r0, r2
    e4de:	4619      	mov	r1, r3
    e4e0:	f04f 0200 	mov.w	r2, #0
    e4e4:	f04f 0300 	mov.w	r3, #0
    e4e8:	f004 f9e4 	bl	128b4 <__adddf3>
    e4ec:	4602      	mov	r2, r0
    e4ee:	460b      	mov	r3, r1
    e4f0:	4620      	mov	r0, r4
    e4f2:	4629      	mov	r1, r5
    e4f4:	f004 f9de 	bl	128b4 <__adddf3>
    e4f8:	4602      	mov	r2, r0
    e4fa:	460b      	mov	r3, r1
    e4fc:	4610      	mov	r0, r2
    e4fe:	4619      	mov	r1, r3
    e500:	f004 fe6c 	bl	131dc <__aeabi_d2f>
    e504:	4602      	mov	r2, r0
    e506:	f64b 2304 	movw	r3, #47620	; 0xba04
    e50a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e50e:	601a      	str	r2, [r3, #0]
    e510:	f64b 2304 	movw	r3, #47620	; 0xba04
    e514:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e518:	681b      	ldr	r3, [r3, #0]
    e51a:	4618      	mov	r0, r3
    e51c:	f04f 0100 	mov.w	r1, #0
    e520:	f2c4 317a 	movt	r1, #17274	; 0x437a
    e524:	f005 f960 	bl	137e8 <__aeabi_fcmple>
    e528:	4603      	mov	r3, r0
    e52a:	2b00      	cmp	r3, #0
    e52c:	d005      	beq.n	e53a <auto_nav+0xf4a>
    e52e:	f64b 2304 	movw	r3, #47620	; 0xba04
    e532:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e536:	681a      	ldr	r2, [r3, #0]
    e538:	e003      	b.n	e542 <auto_nav+0xf52>
    e53a:	f04f 0200 	mov.w	r2, #0
    e53e:	f2c4 327a 	movt	r2, #17274	; 0x437a
    e542:	f64b 2304 	movw	r3, #47620	; 0xba04
    e546:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e54a:	601a      	str	r2, [r3, #0]
    e54c:	f64b 2304 	movw	r3, #47620	; 0xba04
    e550:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e554:	681b      	ldr	r3, [r3, #0]
    e556:	4618      	mov	r0, r3
    e558:	f04f 0100 	mov.w	r1, #0
    e55c:	f2cc 317a 	movt	r1, #50042	; 0xc37a
    e560:	f005 f94c 	bl	137fc <__aeabi_fcmpge>
    e564:	4603      	mov	r3, r0
    e566:	2b00      	cmp	r3, #0
    e568:	d005      	beq.n	e576 <auto_nav+0xf86>
    e56a:	f64b 2304 	movw	r3, #47620	; 0xba04
    e56e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e572:	681a      	ldr	r2, [r3, #0]
    e574:	e003      	b.n	e57e <auto_nav+0xf8e>
    e576:	f04f 0200 	mov.w	r2, #0
    e57a:	f2cc 327a 	movt	r2, #50042	; 0xc37a
    e57e:	f64b 2304 	movw	r3, #47620	; 0xba04
    e582:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e586:	601a      	str	r2, [r3, #0]
    e588:	f24b 7368 	movw	r3, #46952	; 0xb768
    e58c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e590:	889b      	ldrh	r3, [r3, #4]
    e592:	84bb      	strh	r3, [r7, #36]	; 0x24
    e594:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
    e598:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
    e59c:	dc04      	bgt.n	e5a8 <auto_nav+0xfb8>
    e59e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
    e5a2:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
    e5a6:	da7e      	bge.n	e6a6 <auto_nav+0x10b6>
    e5a8:	f64b 2308 	movw	r3, #47624	; 0xba08
    e5ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5b0:	681b      	ldr	r3, [r3, #0]
    e5b2:	4618      	mov	r0, r3
    e5b4:	f004 fadc 	bl	12b70 <__aeabi_f2d>
    e5b8:	4604      	mov	r4, r0
    e5ba:	460d      	mov	r5, r1
    e5bc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
    e5c0:	4618      	mov	r0, r3
    e5c2:	f004 ff15 	bl	133f0 <__aeabi_i2f>
    e5c6:	4603      	mov	r3, r0
    e5c8:	4618      	mov	r0, r3
    e5ca:	f04f 0100 	mov.w	r1, #0
    e5ce:	f2c4 6116 	movt	r1, #17942	; 0x4616
    e5d2:	f005 f815 	bl	13600 <__aeabi_fdiv>
    e5d6:	4603      	mov	r3, r0
    e5d8:	4618      	mov	r0, r3
    e5da:	f004 fac9 	bl	12b70 <__aeabi_f2d>
    e5de:	4602      	mov	r2, r0
    e5e0:	460b      	mov	r3, r1
    e5e2:	4610      	mov	r0, r2
    e5e4:	4619      	mov	r1, r3
    e5e6:	f04f 0200 	mov.w	r2, #0
    e5ea:	f04f 0300 	mov.w	r3, #0
    e5ee:	f2cc 0334 	movt	r3, #49204	; 0xc034
    e5f2:	f004 fb11 	bl	12c18 <__aeabi_dmul>
    e5f6:	4602      	mov	r2, r0
    e5f8:	460b      	mov	r3, r1
    e5fa:	4610      	mov	r0, r2
    e5fc:	4619      	mov	r1, r3
    e5fe:	f04f 0200 	mov.w	r2, #0
    e602:	f04f 0300 	mov.w	r3, #0
    e606:	f004 f955 	bl	128b4 <__adddf3>
    e60a:	4602      	mov	r2, r0
    e60c:	460b      	mov	r3, r1
    e60e:	4620      	mov	r0, r4
    e610:	4629      	mov	r1, r5
    e612:	f004 f94f 	bl	128b4 <__adddf3>
    e616:	4602      	mov	r2, r0
    e618:	460b      	mov	r3, r1
    e61a:	4610      	mov	r0, r2
    e61c:	4619      	mov	r1, r3
    e61e:	f004 fddd 	bl	131dc <__aeabi_d2f>
    e622:	4602      	mov	r2, r0
    e624:	f64b 2308 	movw	r3, #47624	; 0xba08
    e628:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e62c:	601a      	str	r2, [r3, #0]
    e62e:	f64b 2308 	movw	r3, #47624	; 0xba08
    e632:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e636:	681b      	ldr	r3, [r3, #0]
    e638:	4618      	mov	r0, r3
    e63a:	f04f 0100 	mov.w	r1, #0
    e63e:	f2c4 317a 	movt	r1, #17274	; 0x437a
    e642:	f005 f8d1 	bl	137e8 <__aeabi_fcmple>
    e646:	4603      	mov	r3, r0
    e648:	2b00      	cmp	r3, #0
    e64a:	d005      	beq.n	e658 <auto_nav+0x1068>
    e64c:	f64b 2308 	movw	r3, #47624	; 0xba08
    e650:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e654:	681a      	ldr	r2, [r3, #0]
    e656:	e003      	b.n	e660 <auto_nav+0x1070>
    e658:	f04f 0200 	mov.w	r2, #0
    e65c:	f2c4 327a 	movt	r2, #17274	; 0x437a
    e660:	f64b 2308 	movw	r3, #47624	; 0xba08
    e664:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e668:	601a      	str	r2, [r3, #0]
    e66a:	f64b 2308 	movw	r3, #47624	; 0xba08
    e66e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e672:	681b      	ldr	r3, [r3, #0]
    e674:	4618      	mov	r0, r3
    e676:	f04f 0100 	mov.w	r1, #0
    e67a:	f2cc 317a 	movt	r1, #50042	; 0xc37a
    e67e:	f005 f8bd 	bl	137fc <__aeabi_fcmpge>
    e682:	4603      	mov	r3, r0
    e684:	2b00      	cmp	r3, #0
    e686:	d005      	beq.n	e694 <auto_nav+0x10a4>
    e688:	f64b 2308 	movw	r3, #47624	; 0xba08
    e68c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e690:	681a      	ldr	r2, [r3, #0]
    e692:	e003      	b.n	e69c <auto_nav+0x10ac>
    e694:	f04f 0200 	mov.w	r2, #0
    e698:	f2cc 327a 	movt	r2, #50042	; 0xc37a
    e69c:	f64b 2308 	movw	r3, #47624	; 0xba08
    e6a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6a4:	601a      	str	r2, [r3, #0]
    e6a6:	f24b 6345 	movw	r3, #46661	; 0xb645
    e6aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6ae:	2203      	movs	r2, #3
    e6b0:	701a      	strb	r2, [r3, #0]
    e6b2:	f24b 7368 	movw	r3, #46952	; 0xb768
    e6b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6ba:	885b      	ldrh	r3, [r3, #2]
    e6bc:	847b      	strh	r3, [r7, #34]	; 0x22
    e6be:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
    e6c2:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
    e6c6:	dc04      	bgt.n	e6d2 <auto_nav+0x10e2>
    e6c8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
    e6cc:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
    e6d0:	da70      	bge.n	e7b4 <auto_nav+0x11c4>
    e6d2:	f240 1370 	movw	r3, #368	; 0x170
    e6d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e6da:	681b      	ldr	r3, [r3, #0]
    e6dc:	4618      	mov	r0, r3
    e6de:	f004 fa47 	bl	12b70 <__aeabi_f2d>
    e6e2:	4604      	mov	r4, r0
    e6e4:	460d      	mov	r5, r1
    e6e6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
    e6ea:	4618      	mov	r0, r3
    e6ec:	f004 fe80 	bl	133f0 <__aeabi_i2f>
    e6f0:	4603      	mov	r3, r0
    e6f2:	4618      	mov	r0, r3
    e6f4:	f04f 0100 	mov.w	r1, #0
    e6f8:	f2c4 6116 	movt	r1, #17942	; 0x4616
    e6fc:	f004 ff80 	bl	13600 <__aeabi_fdiv>
    e700:	4603      	mov	r3, r0
    e702:	4618      	mov	r0, r3
    e704:	f004 fa34 	bl	12b70 <__aeabi_f2d>
    e708:	4602      	mov	r2, r0
    e70a:	460b      	mov	r3, r1
    e70c:	f04f 0000 	mov.w	r0, #0
    e710:	f04f 0100 	mov.w	r1, #0
    e714:	f004 f8cc 	bl	128b0 <__aeabi_dsub>
    e718:	4602      	mov	r2, r0
    e71a:	460b      	mov	r3, r1
    e71c:	4620      	mov	r0, r4
    e71e:	4629      	mov	r1, r5
    e720:	f004 f8c8 	bl	128b4 <__adddf3>
    e724:	4602      	mov	r2, r0
    e726:	460b      	mov	r3, r1
    e728:	4610      	mov	r0, r2
    e72a:	4619      	mov	r1, r3
    e72c:	f004 fd56 	bl	131dc <__aeabi_d2f>
    e730:	4602      	mov	r2, r0
    e732:	f240 1370 	movw	r3, #368	; 0x170
    e736:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e73a:	601a      	str	r2, [r3, #0]
    e73c:	f240 1370 	movw	r3, #368	; 0x170
    e740:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e744:	681b      	ldr	r3, [r3, #0]
    e746:	4618      	mov	r0, r3
    e748:	f04f 0100 	mov.w	r1, #0
    e74c:	f2c4 312f 	movt	r1, #17199	; 0x432f
    e750:	f005 f854 	bl	137fc <__aeabi_fcmpge>
    e754:	4603      	mov	r3, r0
    e756:	2b00      	cmp	r3, #0
    e758:	d005      	beq.n	e766 <auto_nav+0x1176>
    e75a:	f240 1370 	movw	r3, #368	; 0x170
    e75e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e762:	681a      	ldr	r2, [r3, #0]
    e764:	e003      	b.n	e76e <auto_nav+0x117e>
    e766:	f04f 0200 	mov.w	r2, #0
    e76a:	f2c4 322f 	movt	r2, #17199	; 0x432f
    e76e:	f240 1370 	movw	r3, #368	; 0x170
    e772:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e776:	601a      	str	r2, [r3, #0]
    e778:	f240 1370 	movw	r3, #368	; 0x170
    e77c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e780:	681b      	ldr	r3, [r3, #0]
    e782:	4618      	mov	r0, r3
    e784:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    e788:	f2c4 3189 	movt	r1, #17289	; 0x4389
    e78c:	f005 f82c 	bl	137e8 <__aeabi_fcmple>
    e790:	4603      	mov	r3, r0
    e792:	2b00      	cmp	r3, #0
    e794:	d005      	beq.n	e7a2 <auto_nav+0x11b2>
    e796:	f240 1370 	movw	r3, #368	; 0x170
    e79a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e79e:	681a      	ldr	r2, [r3, #0]
    e7a0:	e003      	b.n	e7aa <auto_nav+0x11ba>
    e7a2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    e7a6:	f2c4 3289 	movt	r2, #17289	; 0x4389
    e7aa:	f240 1370 	movw	r3, #368	; 0x170
    e7ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7b2:	601a      	str	r2, [r3, #0]
    e7b4:	f64b 4318 	movw	r3, #48152	; 0xbc18
    e7b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7bc:	681a      	ldr	r2, [r3, #0]
    e7be:	f64b 2308 	movw	r3, #47624	; 0xba08
    e7c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7c6:	681b      	ldr	r3, [r3, #0]
    e7c8:	4610      	mov	r0, r2
    e7ca:	4619      	mov	r1, r3
    e7cc:	f004 fd5a 	bl	13284 <__aeabi_fsub>
    e7d0:	4603      	mov	r3, r0
    e7d2:	4618      	mov	r0, r3
    e7d4:	f004 f9cc 	bl	12b70 <__aeabi_f2d>
    e7d8:	4604      	mov	r4, r0
    e7da:	460d      	mov	r5, r1
    e7dc:	f64b 4314 	movw	r3, #48148	; 0xbc14
    e7e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7e4:	681a      	ldr	r2, [r3, #0]
    e7e6:	f64b 2304 	movw	r3, #47620	; 0xba04
    e7ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7ee:	681b      	ldr	r3, [r3, #0]
    e7f0:	4610      	mov	r0, r2
    e7f2:	4619      	mov	r1, r3
    e7f4:	f004 fd46 	bl	13284 <__aeabi_fsub>
    e7f8:	4603      	mov	r3, r0
    e7fa:	4618      	mov	r0, r3
    e7fc:	f004 f9b8 	bl	12b70 <__aeabi_f2d>
    e800:	4602      	mov	r2, r0
    e802:	460b      	mov	r3, r1
    e804:	4620      	mov	r0, r4
    e806:	4629      	mov	r1, r5
    e808:	f002 fa12 	bl	10c30 <pp_atan2>
    e80c:	4602      	mov	r2, r0
    e80e:	460b      	mov	r3, r1
    e810:	4610      	mov	r0, r2
    e812:	4619      	mov	r1, r3
    e814:	f004 fce2 	bl	131dc <__aeabi_d2f>
    e818:	4603      	mov	r3, r0
    e81a:	61fb      	str	r3, [r7, #28]
    e81c:	69f8      	ldr	r0, [r7, #28]
    e81e:	f004 f9a7 	bl	12b70 <__aeabi_f2d>
    e822:	4604      	mov	r4, r0
    e824:	460d      	mov	r5, r1
    e826:	f64b 434c 	movw	r3, #48204	; 0xbc4c
    e82a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e82e:	681b      	ldr	r3, [r3, #0]
    e830:	4618      	mov	r0, r3
    e832:	f04f 0100 	mov.w	r1, #0
    e836:	f2cc 2148 	movt	r1, #49736	; 0xc248
    e83a:	f004 fe2d 	bl	13498 <__aeabi_fmul>
    e83e:	4603      	mov	r3, r0
    e840:	4618      	mov	r0, r3
    e842:	f004 f995 	bl	12b70 <__aeabi_f2d>
    e846:	4602      	mov	r2, r0
    e848:	460b      	mov	r3, r1
    e84a:	f04f 0000 	mov.w	r0, #0
    e84e:	f04f 0100 	mov.w	r1, #0
    e852:	f2c4 0114 	movt	r1, #16404	; 0x4014
    e856:	f004 fb09 	bl	12e6c <__aeabi_ddiv>
    e85a:	4602      	mov	r2, r0
    e85c:	460b      	mov	r3, r1
    e85e:	4620      	mov	r0, r4
    e860:	4629      	mov	r1, r5
    e862:	f004 f827 	bl	128b4 <__adddf3>
    e866:	4602      	mov	r2, r0
    e868:	460b      	mov	r3, r1
    e86a:	4610      	mov	r0, r2
    e86c:	4619      	mov	r1, r3
    e86e:	f004 fcb5 	bl	131dc <__aeabi_d2f>
    e872:	4603      	mov	r3, r0
    e874:	61bb      	str	r3, [r7, #24]
    e876:	f64b 2304 	movw	r3, #47620	; 0xba04
    e87a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e87e:	681b      	ldr	r3, [r3, #0]
    e880:	4618      	mov	r0, r3
    e882:	f004 f975 	bl	12b70 <__aeabi_f2d>
    e886:	4604      	mov	r4, r0
    e888:	460d      	mov	r5, r1
    e88a:	69b8      	ldr	r0, [r7, #24]
    e88c:	f004 f970 	bl	12b70 <__aeabi_f2d>
    e890:	4602      	mov	r2, r0
    e892:	460b      	mov	r3, r1
    e894:	4610      	mov	r0, r2
    e896:	4619      	mov	r1, r3
    e898:	a3b1      	add	r3, pc, #708	; (adr r3, eb60 <auto_nav+0x1570>)
    e89a:	e9d3 2300 	ldrd	r2, r3, [r3]
    e89e:	f004 f809 	bl	128b4 <__adddf3>
    e8a2:	4602      	mov	r2, r0
    e8a4:	460b      	mov	r3, r1
    e8a6:	4610      	mov	r0, r2
    e8a8:	4619      	mov	r1, r3
    e8aa:	f002 fa81 	bl	10db0 <pp_sin>
    e8ae:	4602      	mov	r2, r0
    e8b0:	460b      	mov	r3, r1
    e8b2:	4610      	mov	r0, r2
    e8b4:	4619      	mov	r1, r3
    e8b6:	f04f 0200 	mov.w	r2, #0
    e8ba:	f04f 0300 	mov.w	r3, #0
    e8be:	f2c4 0349 	movt	r3, #16457	; 0x4049
    e8c2:	f004 f9a9 	bl	12c18 <__aeabi_dmul>
    e8c6:	4602      	mov	r2, r0
    e8c8:	460b      	mov	r3, r1
    e8ca:	4620      	mov	r0, r4
    e8cc:	4629      	mov	r1, r5
    e8ce:	f003 fff1 	bl	128b4 <__adddf3>
    e8d2:	4602      	mov	r2, r0
    e8d4:	460b      	mov	r3, r1
    e8d6:	4610      	mov	r0, r2
    e8d8:	4619      	mov	r1, r3
    e8da:	f004 fc7f 	bl	131dc <__aeabi_d2f>
    e8de:	4606      	mov	r6, r0
    e8e0:	f64b 2308 	movw	r3, #47624	; 0xba08
    e8e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8e8:	681b      	ldr	r3, [r3, #0]
    e8ea:	4618      	mov	r0, r3
    e8ec:	f004 f940 	bl	12b70 <__aeabi_f2d>
    e8f0:	4604      	mov	r4, r0
    e8f2:	460d      	mov	r5, r1
    e8f4:	69b8      	ldr	r0, [r7, #24]
    e8f6:	f004 f93b 	bl	12b70 <__aeabi_f2d>
    e8fa:	4602      	mov	r2, r0
    e8fc:	460b      	mov	r3, r1
    e8fe:	4610      	mov	r0, r2
    e900:	4619      	mov	r1, r3
    e902:	f002 fa55 	bl	10db0 <pp_sin>
    e906:	4602      	mov	r2, r0
    e908:	460b      	mov	r3, r1
    e90a:	4610      	mov	r0, r2
    e90c:	4619      	mov	r1, r3
    e90e:	f04f 0200 	mov.w	r2, #0
    e912:	f04f 0300 	mov.w	r3, #0
    e916:	f2c4 0349 	movt	r3, #16457	; 0x4049
    e91a:	f004 f97d 	bl	12c18 <__aeabi_dmul>
    e91e:	4602      	mov	r2, r0
    e920:	460b      	mov	r3, r1
    e922:	4620      	mov	r0, r4
    e924:	4629      	mov	r1, r5
    e926:	f003 ffc5 	bl	128b4 <__adddf3>
    e92a:	4602      	mov	r2, r0
    e92c:	460b      	mov	r3, r1
    e92e:	4610      	mov	r0, r2
    e930:	4619      	mov	r1, r3
    e932:	f004 fc53 	bl	131dc <__aeabi_d2f>
    e936:	4603      	mov	r3, r0
    e938:	4630      	mov	r0, r6
    e93a:	4619      	mov	r1, r3
    e93c:	f001 f81c 	bl	f978 <fly_to_xy>
    e940:	69b8      	ldr	r0, [r7, #24]
    e942:	f004 f915 	bl	12b70 <__aeabi_f2d>
    e946:	4602      	mov	r2, r0
    e948:	460b      	mov	r3, r1
    e94a:	a185      	add	r1, pc, #532	; (adr r1, eb60 <auto_nav+0x1570>)
    e94c:	e9d1 0100 	ldrd	r0, r1, [r1]
    e950:	f003 ffae 	bl	128b0 <__aeabi_dsub>
    e954:	4602      	mov	r2, r0
    e956:	460b      	mov	r3, r1
    e958:	4610      	mov	r0, r2
    e95a:	4619      	mov	r1, r3
    e95c:	a382      	add	r3, pc, #520	; (adr r3, eb68 <auto_nav+0x1578>)
    e95e:	e9d3 2300 	ldrd	r2, r3, [r3]
    e962:	f004 fa83 	bl	12e6c <__aeabi_ddiv>
    e966:	4602      	mov	r2, r0
    e968:	460b      	mov	r3, r1
    e96a:	4610      	mov	r0, r2
    e96c:	4619      	mov	r1, r3
    e96e:	f04f 0200 	mov.w	r2, #0
    e972:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    e976:	f2c4 0366 	movt	r3, #16486	; 0x4066
    e97a:	f004 f94d 	bl	12c18 <__aeabi_dmul>
    e97e:	4602      	mov	r2, r0
    e980:	460b      	mov	r3, r1
    e982:	4610      	mov	r0, r2
    e984:	4619      	mov	r1, r3
    e986:	f004 fc29 	bl	131dc <__aeabi_d2f>
    e98a:	4602      	mov	r2, r0
    e98c:	f64b 13d4 	movw	r3, #47572	; 0xb9d4
    e990:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e994:	601a      	str	r2, [r3, #0]
    e996:	e012      	b.n	e9be <auto_nav+0x13ce>
    e998:	f64b 13d4 	movw	r3, #47572	; 0xb9d4
    e99c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9a0:	681b      	ldr	r3, [r3, #0]
    e9a2:	4618      	mov	r0, r3
    e9a4:	f04f 0100 	mov.w	r1, #0
    e9a8:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
    e9ac:	f004 fc6c 	bl	13288 <__addsf3>
    e9b0:	4603      	mov	r3, r0
    e9b2:	461a      	mov	r2, r3
    e9b4:	f64b 13d4 	movw	r3, #47572	; 0xb9d4
    e9b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9bc:	601a      	str	r2, [r3, #0]
    e9be:	f64b 13d4 	movw	r3, #47572	; 0xb9d4
    e9c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9c6:	681b      	ldr	r3, [r3, #0]
    e9c8:	4618      	mov	r0, r3
    e9ca:	f04f 0100 	mov.w	r1, #0
    e9ce:	f004 ff01 	bl	137d4 <__aeabi_fcmplt>
    e9d2:	4603      	mov	r3, r0
    e9d4:	2b00      	cmp	r3, #0
    e9d6:	d1df      	bne.n	e998 <auto_nav+0x13a8>
    e9d8:	e012      	b.n	ea00 <auto_nav+0x1410>
    e9da:	f64b 13d4 	movw	r3, #47572	; 0xb9d4
    e9de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9e2:	681b      	ldr	r3, [r3, #0]
    e9e4:	4618      	mov	r0, r3
    e9e6:	f04f 0100 	mov.w	r1, #0
    e9ea:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
    e9ee:	f004 fc49 	bl	13284 <__aeabi_fsub>
    e9f2:	4603      	mov	r3, r0
    e9f4:	461a      	mov	r2, r3
    e9f6:	f64b 13d4 	movw	r3, #47572	; 0xb9d4
    e9fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9fe:	601a      	str	r2, [r3, #0]
    ea00:	f64b 13d4 	movw	r3, #47572	; 0xb9d4
    ea04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea08:	681b      	ldr	r3, [r3, #0]
    ea0a:	4618      	mov	r0, r3
    ea0c:	f04f 0100 	mov.w	r1, #0
    ea10:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
    ea14:	f004 fef2 	bl	137fc <__aeabi_fcmpge>
    ea18:	4603      	mov	r3, r0
    ea1a:	2b00      	cmp	r3, #0
    ea1c:	d1dd      	bne.n	e9da <auto_nav+0x13ea>
        return;
    ea1e:	f000 beb9 	b.w	f794 <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
    ea22:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    ea26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea2a:	781b      	ldrb	r3, [r3, #0]
    ea2c:	2b01      	cmp	r3, #1
    ea2e:	f040 86b1 	bne.w	f794 <auto_nav+0x21a4>
    {
        nav_stage = 1;
    ea32:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    ea36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea3a:	2201      	movs	r2, #1
    ea3c:	701a      	strb	r2, [r3, #0]
        NextBlock()
    ea3e:	f64b 13b9 	movw	r3, #47545	; 0xb9b9
    ea42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea46:	781b      	ldrb	r3, [r3, #0]
    ea48:	3301      	adds	r3, #1
    ea4a:	b2da      	uxtb	r2, r3
    ea4c:	f64b 13b9 	movw	r3, #47545	; 0xb9b9
    ea50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea54:	701a      	strb	r2, [r3, #0]
    ea56:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    ea5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea5e:	2200      	movs	r2, #0
    ea60:	701a      	strb	r2, [r3, #0]
    ea62:	f64b 13ce 	movw	r3, #47566	; 0xb9ce
    ea66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea6a:	2200      	movs	r2, #0
    ea6c:	801a      	strh	r2, [r3, #0]
    ea6e:	f64b 4314 	movw	r3, #48148	; 0xbc14
    ea72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea76:	681a      	ldr	r2, [r3, #0]
    ea78:	f64b 13bc 	movw	r3, #47548	; 0xb9bc
    ea7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea80:	601a      	str	r2, [r3, #0]
    ea82:	f64b 4318 	movw	r3, #48152	; 0xbc18
    ea86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea8a:	681a      	ldr	r2, [r3, #0]
    ea8c:	f64b 13c0 	movw	r3, #47552	; 0xb9c0
    ea90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea94:	601a      	str	r2, [r3, #0]
    ea96:	f64b 13cc 	movw	r3, #47564	; 0xb9cc
    ea9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea9e:	2200      	movs	r2, #0
    eaa0:	801a      	strh	r2, [r3, #0]
    eaa2:	f64b 13d0 	movw	r3, #47568	; 0xb9d0
    eaa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eaaa:	f04f 0200 	mov.w	r2, #0
    eaae:	601a      	str	r2, [r3, #0]
    eab0:	f000 be70 	b.w	f794 <auto_nav+0x21a4>
    }
    else { }
}
else if (nav_block == 4)
    eab4:	f64b 13b9 	movw	r3, #47545	; 0xb9b9
    eab8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eabc:	781b      	ldrb	r3, [r3, #0]
    eabe:	2b04      	cmp	r3, #4
    eac0:	f040 8202 	bne.w	eec8 <auto_nav+0x18d8>
{
    nav_block = 4;
    eac4:	f64b 13b9 	movw	r3, #47545	; 0xb9b9
    eac8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eacc:	2204      	movs	r2, #4
    eace:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(5) }
    ead0:	f24b 6348 	movw	r3, #46664	; 0xb648
    ead4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ead8:	781b      	ldrb	r3, [r3, #0]
    eada:	2b00      	cmp	r3, #0
    eadc:	d007      	beq.n	eaee <auto_nav+0x14fe>
    eade:	f24b 6348 	movw	r3, #46664	; 0xb648
    eae2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eae6:	2200      	movs	r2, #0
    eae8:	701a      	strb	r2, [r3, #0]
    eaea:	2301      	movs	r3, #1
    eaec:	e000      	b.n	eaf0 <auto_nav+0x1500>
    eaee:	2300      	movs	r3, #0
    eaf0:	2b00      	cmp	r3, #0
    eaf2:	d03d      	beq.n	eb70 <auto_nav+0x1580>
    eaf4:	f64b 13b9 	movw	r3, #47545	; 0xb9b9
    eaf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eafc:	2205      	movs	r2, #5
    eafe:	701a      	strb	r2, [r3, #0]
    eb00:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    eb04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb08:	2200      	movs	r2, #0
    eb0a:	701a      	strb	r2, [r3, #0]
    eb0c:	f64b 13ce 	movw	r3, #47566	; 0xb9ce
    eb10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb14:	2200      	movs	r2, #0
    eb16:	801a      	strh	r2, [r3, #0]
    eb18:	f64b 4314 	movw	r3, #48148	; 0xbc14
    eb1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb20:	681a      	ldr	r2, [r3, #0]
    eb22:	f64b 13bc 	movw	r3, #47548	; 0xb9bc
    eb26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb2a:	601a      	str	r2, [r3, #0]
    eb2c:	f64b 4318 	movw	r3, #48152	; 0xbc18
    eb30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb34:	681a      	ldr	r2, [r3, #0]
    eb36:	f64b 13c0 	movw	r3, #47552	; 0xb9c0
    eb3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb3e:	601a      	str	r2, [r3, #0]
    eb40:	f64b 13cc 	movw	r3, #47564	; 0xb9cc
    eb44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb48:	2200      	movs	r2, #0
    eb4a:	801a      	strh	r2, [r3, #0]
    eb4c:	f64b 13d0 	movw	r3, #47568	; 0xb9d0
    eb50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb54:	f04f 0200 	mov.w	r2, #0
    eb58:	601a      	str	r2, [r3, #0]
    eb5a:	f000 be1b 	b.w	f794 <auto_nav+0x21a4>
    eb5e:	bf00      	nop
    eb60:	54442d18 	.word	0x54442d18
    eb64:	3ff921fb 	.word	0x3ff921fb
    eb68:	54442d18 	.word	0x54442d18
    eb6c:	400921fb 	.word	0x400921fb
    if(nav_stage == 0)
    eb70:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    eb74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb78:	781b      	ldrb	r3, [r3, #0]
    eb7a:	2b00      	cmp	r3, #0
    eb7c:	f040 815b 	bne.w	ee36 <auto_nav+0x1846>
    {
        nav_stage = 0;
    eb80:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    eb84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb88:	2200      	movs	r2, #0
    eb8a:	701a      	strb	r2, [r3, #0]
        auto_pitch = FALSE;
    eb8c:	f24b 6347 	movw	r3, #46663	; 0xb647
    eb90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb94:	2200      	movs	r2, #0
    eb96:	701a      	strb	r2, [r3, #0]
        nav_pitch = 0.000000;
    eb98:	f64b 13e4 	movw	r3, #47588	; 0xb9e4
    eb9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eba0:	f04f 0200 	mov.w	r2, #0
    eba4:	601a      	str	r2, [r3, #0]
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
    eba6:	f24b 6345 	movw	r3, #46661	; 0xb645
    ebaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebae:	2203      	movs	r2, #3
    ebb0:	701a      	strb	r2, [r3, #0]
        desired_altitude = waypoints[0].a;
    ebb2:	f240 1374 	movw	r3, #372	; 0x174
    ebb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebba:	689a      	ldr	r2, [r3, #8]
    ebbc:	f240 1370 	movw	r3, #368	; 0x170
    ebc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebc4:	601a      	str	r2, [r3, #0]
        pre_climb = 0.;
    ebc6:	f64b 13ac 	movw	r3, #47532	; 0xb9ac
    ebca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebce:	f04f 0200 	mov.w	r2, #0
    ebd2:	601a      	str	r2, [r3, #0]
        Circle(0, 150);
    ebd4:	f64b 4318 	movw	r3, #48152	; 0xbc18
    ebd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebdc:	681a      	ldr	r2, [r3, #0]
    ebde:	f240 1374 	movw	r3, #372	; 0x174
    ebe2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebe6:	685b      	ldr	r3, [r3, #4]
    ebe8:	4610      	mov	r0, r2
    ebea:	4619      	mov	r1, r3
    ebec:	f004 fb4a 	bl	13284 <__aeabi_fsub>
    ebf0:	4603      	mov	r3, r0
    ebf2:	4618      	mov	r0, r3
    ebf4:	f003 ffbc 	bl	12b70 <__aeabi_f2d>
    ebf8:	4604      	mov	r4, r0
    ebfa:	460d      	mov	r5, r1
    ebfc:	f64b 4314 	movw	r3, #48148	; 0xbc14
    ec00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec04:	681a      	ldr	r2, [r3, #0]
    ec06:	f240 1374 	movw	r3, #372	; 0x174
    ec0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec0e:	681b      	ldr	r3, [r3, #0]
    ec10:	4610      	mov	r0, r2
    ec12:	4619      	mov	r1, r3
    ec14:	f004 fb36 	bl	13284 <__aeabi_fsub>
    ec18:	4603      	mov	r3, r0
    ec1a:	4618      	mov	r0, r3
    ec1c:	f003 ffa8 	bl	12b70 <__aeabi_f2d>
    ec20:	4602      	mov	r2, r0
    ec22:	460b      	mov	r3, r1
    ec24:	4620      	mov	r0, r4
    ec26:	4629      	mov	r1, r5
    ec28:	f002 f802 	bl	10c30 <pp_atan2>
    ec2c:	4602      	mov	r2, r0
    ec2e:	460b      	mov	r3, r1
    ec30:	4610      	mov	r0, r2
    ec32:	4619      	mov	r1, r3
    ec34:	f004 fad2 	bl	131dc <__aeabi_d2f>
    ec38:	4603      	mov	r3, r0
    ec3a:	617b      	str	r3, [r7, #20]
    ec3c:	6978      	ldr	r0, [r7, #20]
    ec3e:	f003 ff97 	bl	12b70 <__aeabi_f2d>
    ec42:	4604      	mov	r4, r0
    ec44:	460d      	mov	r5, r1
    ec46:	f64b 434c 	movw	r3, #48204	; 0xbc4c
    ec4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec4e:	681b      	ldr	r3, [r3, #0]
    ec50:	4618      	mov	r0, r3
    ec52:	f04f 0100 	mov.w	r1, #0
    ec56:	f2cc 3116 	movt	r1, #49942	; 0xc316
    ec5a:	f004 fc1d 	bl	13498 <__aeabi_fmul>
    ec5e:	4603      	mov	r3, r0
    ec60:	4618      	mov	r0, r3
    ec62:	f003 ff85 	bl	12b70 <__aeabi_f2d>
    ec66:	4602      	mov	r2, r0
    ec68:	460b      	mov	r3, r1
    ec6a:	f04f 0000 	mov.w	r0, #0
    ec6e:	f04f 0100 	mov.w	r1, #0
    ec72:	f2c4 0114 	movt	r1, #16404	; 0x4014
    ec76:	f004 f8f9 	bl	12e6c <__aeabi_ddiv>
    ec7a:	4602      	mov	r2, r0
    ec7c:	460b      	mov	r3, r1
    ec7e:	4620      	mov	r0, r4
    ec80:	4629      	mov	r1, r5
    ec82:	f003 fe17 	bl	128b4 <__adddf3>
    ec86:	4602      	mov	r2, r0
    ec88:	460b      	mov	r3, r1
    ec8a:	4610      	mov	r0, r2
    ec8c:	4619      	mov	r1, r3
    ec8e:	f004 faa5 	bl	131dc <__aeabi_d2f>
    ec92:	4603      	mov	r3, r0
    ec94:	613b      	str	r3, [r7, #16]
    ec96:	f240 1374 	movw	r3, #372	; 0x174
    ec9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec9e:	681b      	ldr	r3, [r3, #0]
    eca0:	4618      	mov	r0, r3
    eca2:	f003 ff65 	bl	12b70 <__aeabi_f2d>
    eca6:	4604      	mov	r4, r0
    eca8:	460d      	mov	r5, r1
    ecaa:	6938      	ldr	r0, [r7, #16]
    ecac:	f003 ff60 	bl	12b70 <__aeabi_f2d>
    ecb0:	4602      	mov	r2, r0
    ecb2:	460b      	mov	r3, r1
    ecb4:	4610      	mov	r0, r2
    ecb6:	4619      	mov	r1, r3
    ecb8:	a3af      	add	r3, pc, #700	; (adr r3, ef78 <auto_nav+0x1988>)
    ecba:	e9d3 2300 	ldrd	r2, r3, [r3]
    ecbe:	f003 fdf9 	bl	128b4 <__adddf3>
    ecc2:	4602      	mov	r2, r0
    ecc4:	460b      	mov	r3, r1
    ecc6:	4610      	mov	r0, r2
    ecc8:	4619      	mov	r1, r3
    ecca:	f002 f871 	bl	10db0 <pp_sin>
    ecce:	4602      	mov	r2, r0
    ecd0:	460b      	mov	r3, r1
    ecd2:	4610      	mov	r0, r2
    ecd4:	4619      	mov	r1, r3
    ecd6:	a3aa      	add	r3, pc, #680	; (adr r3, ef80 <auto_nav+0x1990>)
    ecd8:	e9d3 2300 	ldrd	r2, r3, [r3]
    ecdc:	f003 ff9c 	bl	12c18 <__aeabi_dmul>
    ece0:	4602      	mov	r2, r0
    ece2:	460b      	mov	r3, r1
    ece4:	4620      	mov	r0, r4
    ece6:	4629      	mov	r1, r5
    ece8:	f003 fde4 	bl	128b4 <__adddf3>
    ecec:	4602      	mov	r2, r0
    ecee:	460b      	mov	r3, r1
    ecf0:	4610      	mov	r0, r2
    ecf2:	4619      	mov	r1, r3
    ecf4:	f004 fa72 	bl	131dc <__aeabi_d2f>
    ecf8:	4606      	mov	r6, r0
    ecfa:	f240 1374 	movw	r3, #372	; 0x174
    ecfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed02:	685b      	ldr	r3, [r3, #4]
    ed04:	4618      	mov	r0, r3
    ed06:	f003 ff33 	bl	12b70 <__aeabi_f2d>
    ed0a:	4604      	mov	r4, r0
    ed0c:	460d      	mov	r5, r1
    ed0e:	6938      	ldr	r0, [r7, #16]
    ed10:	f003 ff2e 	bl	12b70 <__aeabi_f2d>
    ed14:	4602      	mov	r2, r0
    ed16:	460b      	mov	r3, r1
    ed18:	4610      	mov	r0, r2
    ed1a:	4619      	mov	r1, r3
    ed1c:	f002 f848 	bl	10db0 <pp_sin>
    ed20:	4602      	mov	r2, r0
    ed22:	460b      	mov	r3, r1
    ed24:	4610      	mov	r0, r2
    ed26:	4619      	mov	r1, r3
    ed28:	a395      	add	r3, pc, #596	; (adr r3, ef80 <auto_nav+0x1990>)
    ed2a:	e9d3 2300 	ldrd	r2, r3, [r3]
    ed2e:	f003 ff73 	bl	12c18 <__aeabi_dmul>
    ed32:	4602      	mov	r2, r0
    ed34:	460b      	mov	r3, r1
    ed36:	4620      	mov	r0, r4
    ed38:	4629      	mov	r1, r5
    ed3a:	f003 fdbb 	bl	128b4 <__adddf3>
    ed3e:	4602      	mov	r2, r0
    ed40:	460b      	mov	r3, r1
    ed42:	4610      	mov	r0, r2
    ed44:	4619      	mov	r1, r3
    ed46:	f004 fa49 	bl	131dc <__aeabi_d2f>
    ed4a:	4603      	mov	r3, r0
    ed4c:	4630      	mov	r0, r6
    ed4e:	4619      	mov	r1, r3
    ed50:	f000 fe12 	bl	f978 <fly_to_xy>
    ed54:	6938      	ldr	r0, [r7, #16]
    ed56:	f003 ff0b 	bl	12b70 <__aeabi_f2d>
    ed5a:	4602      	mov	r2, r0
    ed5c:	460b      	mov	r3, r1
    ed5e:	a186      	add	r1, pc, #536	; (adr r1, ef78 <auto_nav+0x1988>)
    ed60:	e9d1 0100 	ldrd	r0, r1, [r1]
    ed64:	f003 fda4 	bl	128b0 <__aeabi_dsub>
    ed68:	4602      	mov	r2, r0
    ed6a:	460b      	mov	r3, r1
    ed6c:	4610      	mov	r0, r2
    ed6e:	4619      	mov	r1, r3
    ed70:	a385      	add	r3, pc, #532	; (adr r3, ef88 <auto_nav+0x1998>)
    ed72:	e9d3 2300 	ldrd	r2, r3, [r3]
    ed76:	f004 f879 	bl	12e6c <__aeabi_ddiv>
    ed7a:	4602      	mov	r2, r0
    ed7c:	460b      	mov	r3, r1
    ed7e:	4610      	mov	r0, r2
    ed80:	4619      	mov	r1, r3
    ed82:	f04f 0200 	mov.w	r2, #0
    ed86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    ed8a:	f2c4 0366 	movt	r3, #16486	; 0x4066
    ed8e:	f003 ff43 	bl	12c18 <__aeabi_dmul>
    ed92:	4602      	mov	r2, r0
    ed94:	460b      	mov	r3, r1
    ed96:	4610      	mov	r0, r2
    ed98:	4619      	mov	r1, r3
    ed9a:	f004 fa1f 	bl	131dc <__aeabi_d2f>
    ed9e:	4602      	mov	r2, r0
    eda0:	f64b 13d4 	movw	r3, #47572	; 0xb9d4
    eda4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eda8:	601a      	str	r2, [r3, #0]
    edaa:	e012      	b.n	edd2 <auto_nav+0x17e2>
    edac:	f64b 13d4 	movw	r3, #47572	; 0xb9d4
    edb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edb4:	681b      	ldr	r3, [r3, #0]
    edb6:	4618      	mov	r0, r3
    edb8:	f04f 0100 	mov.w	r1, #0
    edbc:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
    edc0:	f004 fa62 	bl	13288 <__addsf3>
    edc4:	4603      	mov	r3, r0
    edc6:	461a      	mov	r2, r3
    edc8:	f64b 13d4 	movw	r3, #47572	; 0xb9d4
    edcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edd0:	601a      	str	r2, [r3, #0]
    edd2:	f64b 13d4 	movw	r3, #47572	; 0xb9d4
    edd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edda:	681b      	ldr	r3, [r3, #0]
    eddc:	4618      	mov	r0, r3
    edde:	f04f 0100 	mov.w	r1, #0
    ede2:	f004 fcf7 	bl	137d4 <__aeabi_fcmplt>
    ede6:	4603      	mov	r3, r0
    ede8:	2b00      	cmp	r3, #0
    edea:	d1df      	bne.n	edac <auto_nav+0x17bc>
    edec:	e012      	b.n	ee14 <auto_nav+0x1824>
    edee:	f64b 13d4 	movw	r3, #47572	; 0xb9d4
    edf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edf6:	681b      	ldr	r3, [r3, #0]
    edf8:	4618      	mov	r0, r3
    edfa:	f04f 0100 	mov.w	r1, #0
    edfe:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
    ee02:	f004 fa3f 	bl	13284 <__aeabi_fsub>
    ee06:	4603      	mov	r3, r0
    ee08:	461a      	mov	r2, r3
    ee0a:	f64b 13d4 	movw	r3, #47572	; 0xb9d4
    ee0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee12:	601a      	str	r2, [r3, #0]
    ee14:	f64b 13d4 	movw	r3, #47572	; 0xb9d4
    ee18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee1c:	681b      	ldr	r3, [r3, #0]
    ee1e:	4618      	mov	r0, r3
    ee20:	f04f 0100 	mov.w	r1, #0
    ee24:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
    ee28:	f004 fce8 	bl	137fc <__aeabi_fcmpge>
    ee2c:	4603      	mov	r3, r0
    ee2e:	2b00      	cmp	r3, #0
    ee30:	d1dd      	bne.n	edee <auto_nav+0x17fe>
        return;
    ee32:	f000 bcaf 	b.w	f794 <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
    ee36:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    ee3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee3e:	781b      	ldrb	r3, [r3, #0]
    ee40:	2b01      	cmp	r3, #1
    ee42:	f040 84a7 	bne.w	f794 <auto_nav+0x21a4>
    {
        nav_stage =1;
    ee46:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    ee4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee4e:	2201      	movs	r2, #1
    ee50:	701a      	strb	r2, [r3, #0]
        NextBlock()
    ee52:	f64b 13b9 	movw	r3, #47545	; 0xb9b9
    ee56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee5a:	781b      	ldrb	r3, [r3, #0]
    ee5c:	3301      	adds	r3, #1
    ee5e:	b2da      	uxtb	r2, r3
    ee60:	f64b 13b9 	movw	r3, #47545	; 0xb9b9
    ee64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee68:	701a      	strb	r2, [r3, #0]
    ee6a:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    ee6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee72:	2200      	movs	r2, #0
    ee74:	701a      	strb	r2, [r3, #0]
    ee76:	f64b 13ce 	movw	r3, #47566	; 0xb9ce
    ee7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee7e:	2200      	movs	r2, #0
    ee80:	801a      	strh	r2, [r3, #0]
    ee82:	f64b 4314 	movw	r3, #48148	; 0xbc14
    ee86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee8a:	681a      	ldr	r2, [r3, #0]
    ee8c:	f64b 13bc 	movw	r3, #47548	; 0xb9bc
    ee90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee94:	601a      	str	r2, [r3, #0]
    ee96:	f64b 4318 	movw	r3, #48152	; 0xbc18
    ee9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee9e:	681a      	ldr	r2, [r3, #0]
    eea0:	f64b 13c0 	movw	r3, #47552	; 0xb9c0
    eea4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eea8:	601a      	str	r2, [r3, #0]
    eeaa:	f64b 13cc 	movw	r3, #47564	; 0xb9cc
    eeae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eeb2:	2200      	movs	r2, #0
    eeb4:	801a      	strh	r2, [r3, #0]
    eeb6:	f64b 13d0 	movw	r3, #47568	; 0xb9d0
    eeba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eebe:	f04f 0200 	mov.w	r2, #0
    eec2:	601a      	str	r2, [r3, #0]
    eec4:	f000 bc66 	b.w	f794 <auto_nav+0x21a4>
    }
    else {}
}
else if (nav_block == 5)
    eec8:	f64b 13b9 	movw	r3, #47545	; 0xb9b9
    eecc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eed0:	781b      	ldrb	r3, [r3, #0]
    eed2:	2b05      	cmp	r3, #5
    eed4:	f040 845e 	bne.w	f794 <auto_nav+0x21a4>
{
    nav_block = 5;
    eed8:	f64b 13b9 	movw	r3, #47545	; 0xb9b9
    eedc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eee0:	2205      	movs	r2, #5
    eee2:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(1) }
    eee4:	f24b 6348 	movw	r3, #46664	; 0xb648
    eee8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eeec:	781b      	ldrb	r3, [r3, #0]
    eeee:	2b00      	cmp	r3, #0
    eef0:	d007      	beq.n	ef02 <auto_nav+0x1912>
    eef2:	f24b 6348 	movw	r3, #46664	; 0xb648
    eef6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eefa:	2200      	movs	r2, #0
    eefc:	701a      	strb	r2, [r3, #0]
    eefe:	2301      	movs	r3, #1
    ef00:	e000      	b.n	ef04 <auto_nav+0x1914>
    ef02:	2300      	movs	r3, #0
    ef04:	2b00      	cmp	r3, #0
    ef06:	d043      	beq.n	ef90 <auto_nav+0x19a0>
    ef08:	f64b 13b9 	movw	r3, #47545	; 0xb9b9
    ef0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef10:	2201      	movs	r2, #1
    ef12:	701a      	strb	r2, [r3, #0]
    ef14:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    ef18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef1c:	2200      	movs	r2, #0
    ef1e:	701a      	strb	r2, [r3, #0]
    ef20:	f64b 13ce 	movw	r3, #47566	; 0xb9ce
    ef24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef28:	2200      	movs	r2, #0
    ef2a:	801a      	strh	r2, [r3, #0]
    ef2c:	f64b 4314 	movw	r3, #48148	; 0xbc14
    ef30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef34:	681a      	ldr	r2, [r3, #0]
    ef36:	f64b 13bc 	movw	r3, #47548	; 0xb9bc
    ef3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef3e:	601a      	str	r2, [r3, #0]
    ef40:	f64b 4318 	movw	r3, #48152	; 0xbc18
    ef44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef48:	681a      	ldr	r2, [r3, #0]
    ef4a:	f64b 13c0 	movw	r3, #47552	; 0xb9c0
    ef4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef52:	601a      	str	r2, [r3, #0]
    ef54:	f64b 13cc 	movw	r3, #47564	; 0xb9cc
    ef58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef5c:	2200      	movs	r2, #0
    ef5e:	801a      	strh	r2, [r3, #0]
    ef60:	f64b 13d0 	movw	r3, #47568	; 0xb9d0
    ef64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef68:	f04f 0200 	mov.w	r2, #0
    ef6c:	601a      	str	r2, [r3, #0]
    ef6e:	f000 bc11 	b.w	f794 <auto_nav+0x21a4>
    ef72:	bf00      	nop
    ef74:	f3af 8000 	nop.w
    ef78:	54442d18 	.word	0x54442d18
    ef7c:	3ff921fb 	.word	0x3ff921fb
    ef80:	00000000 	.word	0x00000000
    ef84:	4062c000 	.word	0x4062c000
    ef88:	54442d18 	.word	0x54442d18
    ef8c:	400921fb 	.word	0x400921fb
    if(nav_stage == 0) {
    ef90:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    ef94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef98:	781b      	ldrb	r3, [r3, #0]
    ef9a:	2b00      	cmp	r3, #0
    ef9c:	d133      	bne.n	f006 <auto_nav+0x1a16>
       Label(while_7) 
       nav_stage = 0;
    ef9e:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    efa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efa6:	2200      	movs	r2, #0
    efa8:	701a      	strb	r2, [r3, #0]
      if (! (TRUE)) Goto(endwhile_8) else NextStage();}
    efaa:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    efae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efb2:	781b      	ldrb	r3, [r3, #0]
    efb4:	3301      	adds	r3, #1
    efb6:	b2da      	uxtb	r2, r3
    efb8:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    efbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efc0:	701a      	strb	r2, [r3, #0]
    efc2:	f64b 4314 	movw	r3, #48148	; 0xbc14
    efc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efca:	681a      	ldr	r2, [r3, #0]
    efcc:	f64b 13bc 	movw	r3, #47548	; 0xb9bc
    efd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efd4:	601a      	str	r2, [r3, #0]
    efd6:	f64b 4318 	movw	r3, #48152	; 0xbc18
    efda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efde:	681a      	ldr	r2, [r3, #0]
    efe0:	f64b 13c0 	movw	r3, #47552	; 0xb9c0
    efe4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efe8:	601a      	str	r2, [r3, #0]
    efea:	f64b 13cc 	movw	r3, #47564	; 0xb9cc
    efee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eff2:	2200      	movs	r2, #0
    eff4:	801a      	strh	r2, [r3, #0]
    eff6:	f64b 13d0 	movw	r3, #47568	; 0xb9d0
    effa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    effe:	f04f 0200 	mov.w	r2, #0
    f002:	601a      	str	r2, [r3, #0]
    f004:	e3c6      	b.n	f794 <auto_nav+0x21a4>
     
    else if (nav_stage == 1)
    f006:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    f00a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f00e:	781b      	ldrb	r3, [r3, #0]
    f010:	2b01      	cmp	r3, #1
    f012:	f040 81b5 	bne.w	f380 <auto_nav+0x1d90>
    {
        nav_stage =1;
    f016:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    f01a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f01e:	2201      	movs	r2, #1
    f020:	701a      	strb	r2, [r3, #0]
        auto_pitch = FALSE;
    f022:	f24b 6347 	movw	r3, #46663	; 0xb647
    f026:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f02a:	2200      	movs	r2, #0
    f02c:	701a      	strb	r2, [r3, #0]
        nav_pitch = 0.000000;
    f02e:	f64b 13e4 	movw	r3, #47588	; 0xb9e4
    f032:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f036:	f04f 0200 	mov.w	r2, #0
    f03a:	601a      	str	r2, [r3, #0]
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
    f03c:	f24b 6345 	movw	r3, #46661	; 0xb645
    f040:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f044:	2203      	movs	r2, #3
    f046:	701a      	strb	r2, [r3, #0]
        desired_altitude = waypoints[1].a;
    f048:	f240 1374 	movw	r3, #372	; 0x174
    f04c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f050:	695a      	ldr	r2, [r3, #20]
    f052:	f240 1370 	movw	r3, #368	; 0x170
    f056:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f05a:	601a      	str	r2, [r3, #0]
        pre_climb = 0.;
    f05c:	f64b 13ac 	movw	r3, #47532	; 0xb9ac
    f060:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f064:	f04f 0200 	mov.w	r2, #0
    f068:	601a      	str	r2, [r3, #0]
        Circle(1, 100);
    f06a:	f64b 4318 	movw	r3, #48152	; 0xbc18
    f06e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f072:	681a      	ldr	r2, [r3, #0]
    f074:	f240 1374 	movw	r3, #372	; 0x174
    f078:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f07c:	691b      	ldr	r3, [r3, #16]
    f07e:	4610      	mov	r0, r2
    f080:	4619      	mov	r1, r3
    f082:	f004 f8ff 	bl	13284 <__aeabi_fsub>
    f086:	4603      	mov	r3, r0
    f088:	4618      	mov	r0, r3
    f08a:	f003 fd71 	bl	12b70 <__aeabi_f2d>
    f08e:	4604      	mov	r4, r0
    f090:	460d      	mov	r5, r1
    f092:	f64b 4314 	movw	r3, #48148	; 0xbc14
    f096:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f09a:	681a      	ldr	r2, [r3, #0]
    f09c:	f240 1374 	movw	r3, #372	; 0x174
    f0a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0a4:	68db      	ldr	r3, [r3, #12]
    f0a6:	4610      	mov	r0, r2
    f0a8:	4619      	mov	r1, r3
    f0aa:	f004 f8eb 	bl	13284 <__aeabi_fsub>
    f0ae:	4603      	mov	r3, r0
    f0b0:	4618      	mov	r0, r3
    f0b2:	f003 fd5d 	bl	12b70 <__aeabi_f2d>
    f0b6:	4602      	mov	r2, r0
    f0b8:	460b      	mov	r3, r1
    f0ba:	4620      	mov	r0, r4
    f0bc:	4629      	mov	r1, r5
    f0be:	f001 fdb7 	bl	10c30 <pp_atan2>
    f0c2:	4602      	mov	r2, r0
    f0c4:	460b      	mov	r3, r1
    f0c6:	4610      	mov	r0, r2
    f0c8:	4619      	mov	r1, r3
    f0ca:	f004 f887 	bl	131dc <__aeabi_d2f>
    f0ce:	4603      	mov	r3, r0
    f0d0:	60fb      	str	r3, [r7, #12]
    f0d2:	68f8      	ldr	r0, [r7, #12]
    f0d4:	f003 fd4c 	bl	12b70 <__aeabi_f2d>
    f0d8:	4604      	mov	r4, r0
    f0da:	460d      	mov	r5, r1
    f0dc:	f64b 434c 	movw	r3, #48204	; 0xbc4c
    f0e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0e4:	681b      	ldr	r3, [r3, #0]
    f0e6:	4618      	mov	r0, r3
    f0e8:	f04f 0100 	mov.w	r1, #0
    f0ec:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
    f0f0:	f004 f9d2 	bl	13498 <__aeabi_fmul>
    f0f4:	4603      	mov	r3, r0
    f0f6:	4618      	mov	r0, r3
    f0f8:	f003 fd3a 	bl	12b70 <__aeabi_f2d>
    f0fc:	4602      	mov	r2, r0
    f0fe:	460b      	mov	r3, r1
    f100:	f04f 0000 	mov.w	r0, #0
    f104:	f04f 0100 	mov.w	r1, #0
    f108:	f2c4 0114 	movt	r1, #16404	; 0x4014
    f10c:	f003 feae 	bl	12e6c <__aeabi_ddiv>
    f110:	4602      	mov	r2, r0
    f112:	460b      	mov	r3, r1
    f114:	4620      	mov	r0, r4
    f116:	4629      	mov	r1, r5
    f118:	f003 fbcc 	bl	128b4 <__adddf3>
    f11c:	4602      	mov	r2, r0
    f11e:	460b      	mov	r3, r1
    f120:	4610      	mov	r0, r2
    f122:	4619      	mov	r1, r3
    f124:	f004 f85a 	bl	131dc <__aeabi_d2f>
    f128:	4603      	mov	r3, r0
    f12a:	60bb      	str	r3, [r7, #8]
    f12c:	f240 1374 	movw	r3, #372	; 0x174
    f130:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f134:	68db      	ldr	r3, [r3, #12]
    f136:	4618      	mov	r0, r3
    f138:	f003 fd1a 	bl	12b70 <__aeabi_f2d>
    f13c:	4604      	mov	r4, r0
    f13e:	460d      	mov	r5, r1
    f140:	68b8      	ldr	r0, [r7, #8]
    f142:	f003 fd15 	bl	12b70 <__aeabi_f2d>
    f146:	4602      	mov	r2, r0
    f148:	460b      	mov	r3, r1
    f14a:	4610      	mov	r0, r2
    f14c:	4619      	mov	r1, r3
    f14e:	a388      	add	r3, pc, #544	; (adr r3, f370 <auto_nav+0x1d80>)
    f150:	e9d3 2300 	ldrd	r2, r3, [r3]
    f154:	f003 fbae 	bl	128b4 <__adddf3>
    f158:	4602      	mov	r2, r0
    f15a:	460b      	mov	r3, r1
    f15c:	4610      	mov	r0, r2
    f15e:	4619      	mov	r1, r3
    f160:	f001 fe26 	bl	10db0 <pp_sin>
    f164:	4602      	mov	r2, r0
    f166:	460b      	mov	r3, r1
    f168:	4610      	mov	r0, r2
    f16a:	4619      	mov	r1, r3
    f16c:	f04f 0200 	mov.w	r2, #0
    f170:	f04f 0300 	mov.w	r3, #0
    f174:	f2c4 0359 	movt	r3, #16473	; 0x4059
    f178:	f003 fd4e 	bl	12c18 <__aeabi_dmul>
    f17c:	4602      	mov	r2, r0
    f17e:	460b      	mov	r3, r1
    f180:	4620      	mov	r0, r4
    f182:	4629      	mov	r1, r5
    f184:	f003 fb96 	bl	128b4 <__adddf3>
    f188:	4602      	mov	r2, r0
    f18a:	460b      	mov	r3, r1
    f18c:	4610      	mov	r0, r2
    f18e:	4619      	mov	r1, r3
    f190:	f004 f824 	bl	131dc <__aeabi_d2f>
    f194:	4606      	mov	r6, r0
    f196:	f240 1374 	movw	r3, #372	; 0x174
    f19a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f19e:	691b      	ldr	r3, [r3, #16]
    f1a0:	4618      	mov	r0, r3
    f1a2:	f003 fce5 	bl	12b70 <__aeabi_f2d>
    f1a6:	4604      	mov	r4, r0
    f1a8:	460d      	mov	r5, r1
    f1aa:	68b8      	ldr	r0, [r7, #8]
    f1ac:	f003 fce0 	bl	12b70 <__aeabi_f2d>
    f1b0:	4602      	mov	r2, r0
    f1b2:	460b      	mov	r3, r1
    f1b4:	4610      	mov	r0, r2
    f1b6:	4619      	mov	r1, r3
    f1b8:	f001 fdfa 	bl	10db0 <pp_sin>
    f1bc:	4602      	mov	r2, r0
    f1be:	460b      	mov	r3, r1
    f1c0:	4610      	mov	r0, r2
    f1c2:	4619      	mov	r1, r3
    f1c4:	f04f 0200 	mov.w	r2, #0
    f1c8:	f04f 0300 	mov.w	r3, #0
    f1cc:	f2c4 0359 	movt	r3, #16473	; 0x4059
    f1d0:	f003 fd22 	bl	12c18 <__aeabi_dmul>
    f1d4:	4602      	mov	r2, r0
    f1d6:	460b      	mov	r3, r1
    f1d8:	4620      	mov	r0, r4
    f1da:	4629      	mov	r1, r5
    f1dc:	f003 fb6a 	bl	128b4 <__adddf3>
    f1e0:	4602      	mov	r2, r0
    f1e2:	460b      	mov	r3, r1
    f1e4:	4610      	mov	r0, r2
    f1e6:	4619      	mov	r1, r3
    f1e8:	f003 fff8 	bl	131dc <__aeabi_d2f>
    f1ec:	4603      	mov	r3, r0
    f1ee:	4630      	mov	r0, r6
    f1f0:	4619      	mov	r1, r3
    f1f2:	f000 fbc1 	bl	f978 <fly_to_xy>
    f1f6:	68b8      	ldr	r0, [r7, #8]
    f1f8:	f003 fcba 	bl	12b70 <__aeabi_f2d>
    f1fc:	4602      	mov	r2, r0
    f1fe:	460b      	mov	r3, r1
    f200:	a15b      	add	r1, pc, #364	; (adr r1, f370 <auto_nav+0x1d80>)
    f202:	e9d1 0100 	ldrd	r0, r1, [r1]
    f206:	f003 fb53 	bl	128b0 <__aeabi_dsub>
    f20a:	4602      	mov	r2, r0
    f20c:	460b      	mov	r3, r1
    f20e:	4610      	mov	r0, r2
    f210:	4619      	mov	r1, r3
    f212:	a359      	add	r3, pc, #356	; (adr r3, f378 <auto_nav+0x1d88>)
    f214:	e9d3 2300 	ldrd	r2, r3, [r3]
    f218:	f003 fe28 	bl	12e6c <__aeabi_ddiv>
    f21c:	4602      	mov	r2, r0
    f21e:	460b      	mov	r3, r1
    f220:	4610      	mov	r0, r2
    f222:	4619      	mov	r1, r3
    f224:	f04f 0200 	mov.w	r2, #0
    f228:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    f22c:	f2c4 0366 	movt	r3, #16486	; 0x4066
    f230:	f003 fcf2 	bl	12c18 <__aeabi_dmul>
    f234:	4602      	mov	r2, r0
    f236:	460b      	mov	r3, r1
    f238:	4610      	mov	r0, r2
    f23a:	4619      	mov	r1, r3
    f23c:	f003 ffce 	bl	131dc <__aeabi_d2f>
    f240:	4602      	mov	r2, r0
    f242:	f64b 13d4 	movw	r3, #47572	; 0xb9d4
    f246:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f24a:	601a      	str	r2, [r3, #0]
    f24c:	e012      	b.n	f274 <auto_nav+0x1c84>
    f24e:	f64b 13d4 	movw	r3, #47572	; 0xb9d4
    f252:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f256:	681b      	ldr	r3, [r3, #0]
    f258:	4618      	mov	r0, r3
    f25a:	f04f 0100 	mov.w	r1, #0
    f25e:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
    f262:	f004 f811 	bl	13288 <__addsf3>
    f266:	4603      	mov	r3, r0
    f268:	461a      	mov	r2, r3
    f26a:	f64b 13d4 	movw	r3, #47572	; 0xb9d4
    f26e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f272:	601a      	str	r2, [r3, #0]
    f274:	f64b 13d4 	movw	r3, #47572	; 0xb9d4
    f278:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f27c:	681b      	ldr	r3, [r3, #0]
    f27e:	4618      	mov	r0, r3
    f280:	f04f 0100 	mov.w	r1, #0
    f284:	f004 faa6 	bl	137d4 <__aeabi_fcmplt>
    f288:	4603      	mov	r3, r0
    f28a:	2b00      	cmp	r3, #0
    f28c:	d1df      	bne.n	f24e <auto_nav+0x1c5e>
    f28e:	e012      	b.n	f2b6 <auto_nav+0x1cc6>
    f290:	f64b 13d4 	movw	r3, #47572	; 0xb9d4
    f294:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f298:	681b      	ldr	r3, [r3, #0]
    f29a:	4618      	mov	r0, r3
    f29c:	f04f 0100 	mov.w	r1, #0
    f2a0:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
    f2a4:	f003 ffee 	bl	13284 <__aeabi_fsub>
    f2a8:	4603      	mov	r3, r0
    f2aa:	461a      	mov	r2, r3
    f2ac:	f64b 13d4 	movw	r3, #47572	; 0xb9d4
    f2b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2b4:	601a      	str	r2, [r3, #0]
    f2b6:	f64b 13d4 	movw	r3, #47572	; 0xb9d4
    f2ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2be:	681b      	ldr	r3, [r3, #0]
    f2c0:	4618      	mov	r0, r3
    f2c2:	f04f 0100 	mov.w	r1, #0
    f2c6:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
    f2ca:	f004 fa97 	bl	137fc <__aeabi_fcmpge>
    f2ce:	4603      	mov	r3, r0
    f2d0:	2b00      	cmp	r3, #0
    f2d2:	d1dd      	bne.n	f290 <auto_nav+0x1ca0>
        if (Qdr(0)) NextStage();
    f2d4:	f64b 13d4 	movw	r3, #47572	; 0xb9d4
    f2d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2dc:	681b      	ldr	r3, [r3, #0]
    f2de:	4618      	mov	r0, r3
    f2e0:	f04f 0100 	mov.w	r1, #0
    f2e4:	f004 fa94 	bl	13810 <__aeabi_fcmpgt>
    f2e8:	4603      	mov	r3, r0
    f2ea:	2b00      	cmp	r3, #0
    f2ec:	d100      	bne.n	f2f0 <auto_nav+0x1d00>
        return;
    f2ee:	e251      	b.n	f794 <auto_nav+0x21a4>
        nav_pitch = 0.000000;
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
        desired_altitude = waypoints[1].a;
        pre_climb = 0.;
        Circle(1, 100);
        if (Qdr(0)) NextStage();
    f2f0:	f64b 13d4 	movw	r3, #47572	; 0xb9d4
    f2f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2f8:	681b      	ldr	r3, [r3, #0]
    f2fa:	4618      	mov	r0, r3
    f2fc:	f04f 0100 	mov.w	r1, #0
    f300:	f2c4 1120 	movt	r1, #16672	; 0x4120
    f304:	f004 fa66 	bl	137d4 <__aeabi_fcmplt>
    f308:	4603      	mov	r3, r0
    f30a:	2b00      	cmp	r3, #0
    f30c:	d100      	bne.n	f310 <auto_nav+0x1d20>
        return;
    f30e:	e241      	b.n	f794 <auto_nav+0x21a4>
        nav_pitch = 0.000000;
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
        desired_altitude = waypoints[1].a;
        pre_climb = 0.;
        Circle(1, 100);
        if (Qdr(0)) NextStage();
    f310:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    f314:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f318:	781b      	ldrb	r3, [r3, #0]
    f31a:	3301      	adds	r3, #1
    f31c:	b2da      	uxtb	r2, r3
    f31e:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    f322:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f326:	701a      	strb	r2, [r3, #0]
    f328:	f64b 4314 	movw	r3, #48148	; 0xbc14
    f32c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f330:	681a      	ldr	r2, [r3, #0]
    f332:	f64b 13bc 	movw	r3, #47548	; 0xb9bc
    f336:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f33a:	601a      	str	r2, [r3, #0]
    f33c:	f64b 4318 	movw	r3, #48152	; 0xbc18
    f340:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f344:	681a      	ldr	r2, [r3, #0]
    f346:	f64b 13c0 	movw	r3, #47552	; 0xb9c0
    f34a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f34e:	601a      	str	r2, [r3, #0]
    f350:	f64b 13cc 	movw	r3, #47564	; 0xb9cc
    f354:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f358:	2200      	movs	r2, #0
    f35a:	801a      	strh	r2, [r3, #0]
    f35c:	f64b 13d0 	movw	r3, #47568	; 0xb9d0
    f360:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f364:	f04f 0200 	mov.w	r2, #0
    f368:	601a      	str	r2, [r3, #0]
    f36a:	e213      	b.n	f794 <auto_nav+0x21a4>
    f36c:	f3af 8000 	nop.w
    f370:	54442d18 	.word	0x54442d18
    f374:	3ff921fb 	.word	0x3ff921fb
    f378:	54442d18 	.word	0x54442d18
    f37c:	400921fb 	.word	0x400921fb
        return;
    }
    else if (nav_stage == 2)
    f380:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    f384:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f388:	781b      	ldrb	r3, [r3, #0]
    f38a:	2b02      	cmp	r3, #2
    f38c:	f040 81ad 	bne.w	f6ea <auto_nav+0x20fa>
    {
         nav_stage = 2;
    f390:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    f394:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f398:	2202      	movs	r2, #2
    f39a:	701a      	strb	r2, [r3, #0]
          auto_pitch = FALSE;
    f39c:	f24b 6347 	movw	r3, #46663	; 0xb647
    f3a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3a4:	2200      	movs	r2, #0
    f3a6:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.000000;
    f3a8:	f64b 13e4 	movw	r3, #47588	; 0xb9e4
    f3ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3b0:	f04f 0200 	mov.w	r2, #0
    f3b4:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
    f3b6:	f24b 6345 	movw	r3, #46661	; 0xb645
    f3ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3be:	2203      	movs	r2, #3
    f3c0:	701a      	strb	r2, [r3, #0]
          desired_altitude = waypoints[4].a;
    f3c2:	f240 1374 	movw	r3, #372	; 0x174
    f3c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    f3cc:	f240 1370 	movw	r3, #368	; 0x170
    f3d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3d4:	601a      	str	r2, [r3, #0]
          pre_climb = 0.;
    f3d6:	f64b 13ac 	movw	r3, #47532	; 0xb9ac
    f3da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3de:	f04f 0200 	mov.w	r2, #0
    f3e2:	601a      	str	r2, [r3, #0]
          Circle(4, 100);
    f3e4:	f64b 4318 	movw	r3, #48152	; 0xbc18
    f3e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3ec:	681a      	ldr	r2, [r3, #0]
    f3ee:	f240 1374 	movw	r3, #372	; 0x174
    f3f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    f3f8:	4610      	mov	r0, r2
    f3fa:	4619      	mov	r1, r3
    f3fc:	f003 ff42 	bl	13284 <__aeabi_fsub>
    f400:	4603      	mov	r3, r0
    f402:	4618      	mov	r0, r3
    f404:	f003 fbb4 	bl	12b70 <__aeabi_f2d>
    f408:	4604      	mov	r4, r0
    f40a:	460d      	mov	r5, r1
    f40c:	f64b 4314 	movw	r3, #48148	; 0xbc14
    f410:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f414:	681a      	ldr	r2, [r3, #0]
    f416:	f240 1374 	movw	r3, #372	; 0x174
    f41a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f41e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    f420:	4610      	mov	r0, r2
    f422:	4619      	mov	r1, r3
    f424:	f003 ff2e 	bl	13284 <__aeabi_fsub>
    f428:	4603      	mov	r3, r0
    f42a:	4618      	mov	r0, r3
    f42c:	f003 fba0 	bl	12b70 <__aeabi_f2d>
    f430:	4602      	mov	r2, r0
    f432:	460b      	mov	r3, r1
    f434:	4620      	mov	r0, r4
    f436:	4629      	mov	r1, r5
    f438:	f001 fbfa 	bl	10c30 <pp_atan2>
    f43c:	4602      	mov	r2, r0
    f43e:	460b      	mov	r3, r1
    f440:	4610      	mov	r0, r2
    f442:	4619      	mov	r1, r3
    f444:	f003 feca 	bl	131dc <__aeabi_d2f>
    f448:	4603      	mov	r3, r0
    f44a:	607b      	str	r3, [r7, #4]
    f44c:	6878      	ldr	r0, [r7, #4]
    f44e:	f003 fb8f 	bl	12b70 <__aeabi_f2d>
    f452:	4604      	mov	r4, r0
    f454:	460d      	mov	r5, r1
    f456:	f64b 434c 	movw	r3, #48204	; 0xbc4c
    f45a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f45e:	681b      	ldr	r3, [r3, #0]
    f460:	4618      	mov	r0, r3
    f462:	f04f 0100 	mov.w	r1, #0
    f466:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
    f46a:	f004 f815 	bl	13498 <__aeabi_fmul>
    f46e:	4603      	mov	r3, r0
    f470:	4618      	mov	r0, r3
    f472:	f003 fb7d 	bl	12b70 <__aeabi_f2d>
    f476:	4602      	mov	r2, r0
    f478:	460b      	mov	r3, r1
    f47a:	f04f 0000 	mov.w	r0, #0
    f47e:	f04f 0100 	mov.w	r1, #0
    f482:	f2c4 0114 	movt	r1, #16404	; 0x4014
    f486:	f003 fcf1 	bl	12e6c <__aeabi_ddiv>
    f48a:	4602      	mov	r2, r0
    f48c:	460b      	mov	r3, r1
    f48e:	4620      	mov	r0, r4
    f490:	4629      	mov	r1, r5
    f492:	f003 fa0f 	bl	128b4 <__adddf3>
    f496:	4602      	mov	r2, r0
    f498:	460b      	mov	r3, r1
    f49a:	4610      	mov	r0, r2
    f49c:	4619      	mov	r1, r3
    f49e:	f003 fe9d 	bl	131dc <__aeabi_d2f>
    f4a2:	4603      	mov	r3, r0
    f4a4:	603b      	str	r3, [r7, #0]
    f4a6:	f240 1374 	movw	r3, #372	; 0x174
    f4aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    f4b0:	4618      	mov	r0, r3
    f4b2:	f003 fb5d 	bl	12b70 <__aeabi_f2d>
    f4b6:	4604      	mov	r4, r0
    f4b8:	460d      	mov	r5, r1
    f4ba:	6838      	ldr	r0, [r7, #0]
    f4bc:	f003 fb58 	bl	12b70 <__aeabi_f2d>
    f4c0:	4602      	mov	r2, r0
    f4c2:	460b      	mov	r3, r1
    f4c4:	4610      	mov	r0, r2
    f4c6:	4619      	mov	r1, r3
    f4c8:	a3b5      	add	r3, pc, #724	; (adr r3, f7a0 <auto_nav+0x21b0>)
    f4ca:	e9d3 2300 	ldrd	r2, r3, [r3]
    f4ce:	f003 f9f1 	bl	128b4 <__adddf3>
    f4d2:	4602      	mov	r2, r0
    f4d4:	460b      	mov	r3, r1
    f4d6:	4610      	mov	r0, r2
    f4d8:	4619      	mov	r1, r3
    f4da:	f001 fc69 	bl	10db0 <pp_sin>
    f4de:	4602      	mov	r2, r0
    f4e0:	460b      	mov	r3, r1
    f4e2:	4610      	mov	r0, r2
    f4e4:	4619      	mov	r1, r3
    f4e6:	f04f 0200 	mov.w	r2, #0
    f4ea:	f04f 0300 	mov.w	r3, #0
    f4ee:	f2c4 0359 	movt	r3, #16473	; 0x4059
    f4f2:	f003 fb91 	bl	12c18 <__aeabi_dmul>
    f4f6:	4602      	mov	r2, r0
    f4f8:	460b      	mov	r3, r1
    f4fa:	4620      	mov	r0, r4
    f4fc:	4629      	mov	r1, r5
    f4fe:	f003 f9d9 	bl	128b4 <__adddf3>
    f502:	4602      	mov	r2, r0
    f504:	460b      	mov	r3, r1
    f506:	4610      	mov	r0, r2
    f508:	4619      	mov	r1, r3
    f50a:	f003 fe67 	bl	131dc <__aeabi_d2f>
    f50e:	4606      	mov	r6, r0
    f510:	f240 1374 	movw	r3, #372	; 0x174
    f514:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    f51a:	4618      	mov	r0, r3
    f51c:	f003 fb28 	bl	12b70 <__aeabi_f2d>
    f520:	4604      	mov	r4, r0
    f522:	460d      	mov	r5, r1
    f524:	6838      	ldr	r0, [r7, #0]
    f526:	f003 fb23 	bl	12b70 <__aeabi_f2d>
    f52a:	4602      	mov	r2, r0
    f52c:	460b      	mov	r3, r1
    f52e:	4610      	mov	r0, r2
    f530:	4619      	mov	r1, r3
    f532:	f001 fc3d 	bl	10db0 <pp_sin>
    f536:	4602      	mov	r2, r0
    f538:	460b      	mov	r3, r1
    f53a:	4610      	mov	r0, r2
    f53c:	4619      	mov	r1, r3
    f53e:	f04f 0200 	mov.w	r2, #0
    f542:	f04f 0300 	mov.w	r3, #0
    f546:	f2c4 0359 	movt	r3, #16473	; 0x4059
    f54a:	f003 fb65 	bl	12c18 <__aeabi_dmul>
    f54e:	4602      	mov	r2, r0
    f550:	460b      	mov	r3, r1
    f552:	4620      	mov	r0, r4
    f554:	4629      	mov	r1, r5
    f556:	f003 f9ad 	bl	128b4 <__adddf3>
    f55a:	4602      	mov	r2, r0
    f55c:	460b      	mov	r3, r1
    f55e:	4610      	mov	r0, r2
    f560:	4619      	mov	r1, r3
    f562:	f003 fe3b 	bl	131dc <__aeabi_d2f>
    f566:	4603      	mov	r3, r0
    f568:	4630      	mov	r0, r6
    f56a:	4619      	mov	r1, r3
    f56c:	f000 fa04 	bl	f978 <fly_to_xy>
    f570:	6838      	ldr	r0, [r7, #0]
    f572:	f003 fafd 	bl	12b70 <__aeabi_f2d>
    f576:	4602      	mov	r2, r0
    f578:	460b      	mov	r3, r1
    f57a:	a189      	add	r1, pc, #548	; (adr r1, f7a0 <auto_nav+0x21b0>)
    f57c:	e9d1 0100 	ldrd	r0, r1, [r1]
    f580:	f003 f996 	bl	128b0 <__aeabi_dsub>
    f584:	4602      	mov	r2, r0
    f586:	460b      	mov	r3, r1
    f588:	4610      	mov	r0, r2
    f58a:	4619      	mov	r1, r3
    f58c:	a386      	add	r3, pc, #536	; (adr r3, f7a8 <auto_nav+0x21b8>)
    f58e:	e9d3 2300 	ldrd	r2, r3, [r3]
    f592:	f003 fc6b 	bl	12e6c <__aeabi_ddiv>
    f596:	4602      	mov	r2, r0
    f598:	460b      	mov	r3, r1
    f59a:	4610      	mov	r0, r2
    f59c:	4619      	mov	r1, r3
    f59e:	f04f 0200 	mov.w	r2, #0
    f5a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    f5a6:	f2c4 0366 	movt	r3, #16486	; 0x4066
    f5aa:	f003 fb35 	bl	12c18 <__aeabi_dmul>
    f5ae:	4602      	mov	r2, r0
    f5b0:	460b      	mov	r3, r1
    f5b2:	4610      	mov	r0, r2
    f5b4:	4619      	mov	r1, r3
    f5b6:	f003 fe11 	bl	131dc <__aeabi_d2f>
    f5ba:	4602      	mov	r2, r0
    f5bc:	f64b 13d4 	movw	r3, #47572	; 0xb9d4
    f5c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5c4:	601a      	str	r2, [r3, #0]
    f5c6:	e012      	b.n	f5ee <auto_nav+0x1ffe>
    f5c8:	f64b 13d4 	movw	r3, #47572	; 0xb9d4
    f5cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5d0:	681b      	ldr	r3, [r3, #0]
    f5d2:	4618      	mov	r0, r3
    f5d4:	f04f 0100 	mov.w	r1, #0
    f5d8:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
    f5dc:	f003 fe54 	bl	13288 <__addsf3>
    f5e0:	4603      	mov	r3, r0
    f5e2:	461a      	mov	r2, r3
    f5e4:	f64b 13d4 	movw	r3, #47572	; 0xb9d4
    f5e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5ec:	601a      	str	r2, [r3, #0]
    f5ee:	f64b 13d4 	movw	r3, #47572	; 0xb9d4
    f5f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5f6:	681b      	ldr	r3, [r3, #0]
    f5f8:	4618      	mov	r0, r3
    f5fa:	f04f 0100 	mov.w	r1, #0
    f5fe:	f004 f8e9 	bl	137d4 <__aeabi_fcmplt>
    f602:	4603      	mov	r3, r0
    f604:	2b00      	cmp	r3, #0
    f606:	d1df      	bne.n	f5c8 <auto_nav+0x1fd8>
    f608:	e012      	b.n	f630 <auto_nav+0x2040>
    f60a:	f64b 13d4 	movw	r3, #47572	; 0xb9d4
    f60e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f612:	681b      	ldr	r3, [r3, #0]
    f614:	4618      	mov	r0, r3
    f616:	f04f 0100 	mov.w	r1, #0
    f61a:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
    f61e:	f003 fe31 	bl	13284 <__aeabi_fsub>
    f622:	4603      	mov	r3, r0
    f624:	461a      	mov	r2, r3
    f626:	f64b 13d4 	movw	r3, #47572	; 0xb9d4
    f62a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f62e:	601a      	str	r2, [r3, #0]
    f630:	f64b 13d4 	movw	r3, #47572	; 0xb9d4
    f634:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f638:	681b      	ldr	r3, [r3, #0]
    f63a:	4618      	mov	r0, r3
    f63c:	f04f 0100 	mov.w	r1, #0
    f640:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
    f644:	f004 f8da 	bl	137fc <__aeabi_fcmpge>
    f648:	4603      	mov	r3, r0
    f64a:	2b00      	cmp	r3, #0
    f64c:	d1dd      	bne.n	f60a <auto_nav+0x201a>
          if (Qdr(180)) NextStage();
    f64e:	f64b 13d4 	movw	r3, #47572	; 0xb9d4
    f652:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f656:	681b      	ldr	r3, [r3, #0]
    f658:	4618      	mov	r0, r3
    f65a:	f04f 0100 	mov.w	r1, #0
    f65e:	f2c4 3134 	movt	r1, #17204	; 0x4334
    f662:	f004 f8d5 	bl	13810 <__aeabi_fcmpgt>
    f666:	4603      	mov	r3, r0
    f668:	2b00      	cmp	r3, #0
    f66a:	d100      	bne.n	f66e <auto_nav+0x207e>
          return;
    f66c:	e092      	b.n	f794 <auto_nav+0x21a4>
          nav_pitch = 0.000000;
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
          desired_altitude = waypoints[4].a;
          pre_climb = 0.;
          Circle(4, 100);
          if (Qdr(180)) NextStage();
    f66e:	f64b 13d4 	movw	r3, #47572	; 0xb9d4
    f672:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f676:	681b      	ldr	r3, [r3, #0]
    f678:	4618      	mov	r0, r3
    f67a:	f04f 0100 	mov.w	r1, #0
    f67e:	f2c4 313e 	movt	r1, #17214	; 0x433e
    f682:	f004 f8a7 	bl	137d4 <__aeabi_fcmplt>
    f686:	4603      	mov	r3, r0
    f688:	2b00      	cmp	r3, #0
    f68a:	d100      	bne.n	f68e <auto_nav+0x209e>
          return;
    f68c:	e082      	b.n	f794 <auto_nav+0x21a4>
          nav_pitch = 0.000000;
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
          desired_altitude = waypoints[4].a;
          pre_climb = 0.;
          Circle(4, 100);
          if (Qdr(180)) NextStage();
    f68e:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    f692:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f696:	781b      	ldrb	r3, [r3, #0]
    f698:	3301      	adds	r3, #1
    f69a:	b2da      	uxtb	r2, r3
    f69c:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    f6a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6a4:	701a      	strb	r2, [r3, #0]
    f6a6:	f64b 4314 	movw	r3, #48148	; 0xbc14
    f6aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6ae:	681a      	ldr	r2, [r3, #0]
    f6b0:	f64b 13bc 	movw	r3, #47548	; 0xb9bc
    f6b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6b8:	601a      	str	r2, [r3, #0]
    f6ba:	f64b 4318 	movw	r3, #48152	; 0xbc18
    f6be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6c2:	681a      	ldr	r2, [r3, #0]
    f6c4:	f64b 13c0 	movw	r3, #47552	; 0xb9c0
    f6c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6cc:	601a      	str	r2, [r3, #0]
    f6ce:	f64b 13cc 	movw	r3, #47564	; 0xb9cc
    f6d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6d6:	2200      	movs	r2, #0
    f6d8:	801a      	strh	r2, [r3, #0]
    f6da:	f64b 13d0 	movw	r3, #47568	; 0xb9d0
    f6de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6e2:	f04f 0200 	mov.w	r2, #0
    f6e6:	601a      	str	r2, [r3, #0]
    f6e8:	e054      	b.n	f794 <auto_nav+0x21a4>
          return;
    }
    else if (nav_stage == 3) 
    f6ea:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    f6ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6f2:	781b      	ldrb	r3, [r3, #0]
    f6f4:	2b03      	cmp	r3, #3
    f6f6:	d106      	bne.n	f706 <auto_nav+0x2116>
    {
	  nav_stage = 3;
    f6f8:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    f6fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f700:	2203      	movs	r2, #3
    f702:	701a      	strb	r2, [r3, #0]
          Goto(while_7)
    f704:	e44b      	b.n	ef9e <auto_nav+0x19ae>
    }
    else if (nav_stage == 4)
    f706:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    f70a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f70e:	781b      	ldrb	r3, [r3, #0]
    f710:	2b04      	cmp	r3, #4
    f712:	d13f      	bne.n	f794 <auto_nav+0x21a4>
    {
	Label(endwhile_8)
	nav_stage = 4;
    f714:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    f718:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f71c:	2204      	movs	r2, #4
    f71e:	701a      	strb	r2, [r3, #0]
        NextBlock()
    f720:	f64b 13b9 	movw	r3, #47545	; 0xb9b9
    f724:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f728:	781b      	ldrb	r3, [r3, #0]
    f72a:	3301      	adds	r3, #1
    f72c:	b2da      	uxtb	r2, r3
    f72e:	f64b 13b9 	movw	r3, #47545	; 0xb9b9
    f732:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f736:	701a      	strb	r2, [r3, #0]
    f738:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    f73c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f740:	2200      	movs	r2, #0
    f742:	701a      	strb	r2, [r3, #0]
    f744:	f64b 13ce 	movw	r3, #47566	; 0xb9ce
    f748:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f74c:	2200      	movs	r2, #0
    f74e:	801a      	strh	r2, [r3, #0]
    f750:	f64b 4314 	movw	r3, #48148	; 0xbc14
    f754:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f758:	681a      	ldr	r2, [r3, #0]
    f75a:	f64b 13bc 	movw	r3, #47548	; 0xb9bc
    f75e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f762:	601a      	str	r2, [r3, #0]
    f764:	f64b 4318 	movw	r3, #48152	; 0xbc18
    f768:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f76c:	681a      	ldr	r2, [r3, #0]
    f76e:	f64b 13c0 	movw	r3, #47552	; 0xb9c0
    f772:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f776:	601a      	str	r2, [r3, #0]
    f778:	f64b 13cc 	movw	r3, #47564	; 0xb9cc
    f77c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f780:	2200      	movs	r2, #0
    f782:	801a      	strh	r2, [r3, #0]
    f784:	f64b 13d0 	movw	r3, #47568	; 0xb9d0
    f788:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f78c:	f04f 0200 	mov.w	r2, #0
    f790:	601a      	str	r2, [r3, #0]
    f792:	bf00      	nop
    else { }
}
else { }

//#endif
}
    f794:	372c      	adds	r7, #44	; 0x2c
    f796:	46bd      	mov	sp, r7
    f798:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f79a:	bf00      	nop
    f79c:	f3af 8000 	nop.w
    f7a0:	54442d18 	.word	0x54442d18
    f7a4:	3ff921fb 	.word	0x3ff921fb
    f7a8:	54442d18 	.word	0x54442d18
    f7ac:	400921fb 	.word	0x400921fb

0000f7b0 <approaching>:
const uint8_t nb_waypoint = NB_WAYPOINT;

struct point waypoints[NB_WAYPOINT+1] = WAYPOINTS;

static float carrot;
static bool_t approaching(uint8_t wp) {
    f7b0:	b590      	push	{r4, r7, lr}
    f7b2:	b087      	sub	sp, #28
    f7b4:	af00      	add	r7, sp, #0
    f7b6:	4603      	mov	r3, r0
    f7b8:	71fb      	strb	r3, [r7, #7]
  float pw_x = waypoints[wp].x - estimator_x;
    f7ba:	79f9      	ldrb	r1, [r7, #7]
    f7bc:	f240 1274 	movw	r2, #372	; 0x174
    f7c0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f7c4:	460b      	mov	r3, r1
    f7c6:	005b      	lsls	r3, r3, #1
    f7c8:	440b      	add	r3, r1
    f7ca:	009b      	lsls	r3, r3, #2
    f7cc:	4413      	add	r3, r2
    f7ce:	681a      	ldr	r2, [r3, #0]
    f7d0:	f64b 4314 	movw	r3, #48148	; 0xbc14
    f7d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7d8:	681b      	ldr	r3, [r3, #0]
    f7da:	4610      	mov	r0, r2
    f7dc:	4619      	mov	r1, r3
    f7de:	f003 fd51 	bl	13284 <__aeabi_fsub>
    f7e2:	4603      	mov	r3, r0
    f7e4:	617b      	str	r3, [r7, #20]
  float pw_y = waypoints[wp].y - estimator_y;
    f7e6:	79f9      	ldrb	r1, [r7, #7]
    f7e8:	f240 1274 	movw	r2, #372	; 0x174
    f7ec:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f7f0:	460b      	mov	r3, r1
    f7f2:	005b      	lsls	r3, r3, #1
    f7f4:	440b      	add	r3, r1
    f7f6:	009b      	lsls	r3, r3, #2
    f7f8:	4413      	add	r3, r2
    f7fa:	3304      	adds	r3, #4
    f7fc:	681a      	ldr	r2, [r3, #0]
    f7fe:	f64b 4318 	movw	r3, #48152	; 0xbc18
    f802:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f806:	681b      	ldr	r3, [r3, #0]
    f808:	4610      	mov	r0, r2
    f80a:	4619      	mov	r1, r3
    f80c:	f003 fd3a 	bl	13284 <__aeabi_fsub>
    f810:	4603      	mov	r3, r0
    f812:	613b      	str	r3, [r7, #16]
  float scal_prod;//changes for PowerPc Fev-06

  dist2_to_wp = pw_x*pw_x + pw_y *pw_y;
    f814:	6978      	ldr	r0, [r7, #20]
    f816:	6979      	ldr	r1, [r7, #20]
    f818:	f003 fe3e 	bl	13498 <__aeabi_fmul>
    f81c:	4603      	mov	r3, r0
    f81e:	461c      	mov	r4, r3
    f820:	6938      	ldr	r0, [r7, #16]
    f822:	6939      	ldr	r1, [r7, #16]
    f824:	f003 fe38 	bl	13498 <__aeabi_fmul>
    f828:	4603      	mov	r3, r0
    f82a:	4620      	mov	r0, r4
    f82c:	4619      	mov	r1, r3
    f82e:	f003 fd2b 	bl	13288 <__addsf3>
    f832:	4603      	mov	r3, r0
    f834:	461a      	mov	r2, r3
    f836:	f64b 13ec 	movw	r3, #47596	; 0xb9ec
    f83a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f83e:	601a      	str	r2, [r3, #0]
  carrot = CARROT * estimator_hspeed_mod;
    f840:	f64b 434c 	movw	r3, #48204	; 0xbc4c
    f844:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f848:	681b      	ldr	r3, [r3, #0]
    f84a:	4618      	mov	r0, r3
    f84c:	f04f 0100 	mov.w	r1, #0
    f850:	f2c4 01a0 	movt	r1, #16544	; 0x40a0
    f854:	f003 fe20 	bl	13498 <__aeabi_fmul>
    f858:	4603      	mov	r3, r0
    f85a:	461a      	mov	r2, r3
    f85c:	f64b 13f8 	movw	r3, #47608	; 0xb9f8
    f860:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f864:	601a      	str	r2, [r3, #0]
  carrot = (carrot < 40 ? 40 : carrot);
    f866:	f64b 13f8 	movw	r3, #47608	; 0xb9f8
    f86a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f86e:	681b      	ldr	r3, [r3, #0]
    f870:	4618      	mov	r0, r3
    f872:	f04f 0100 	mov.w	r1, #0
    f876:	f2c4 2120 	movt	r1, #16928	; 0x4220
    f87a:	f003 ffab 	bl	137d4 <__aeabi_fcmplt>
    f87e:	4603      	mov	r3, r0
    f880:	2b00      	cmp	r3, #0
    f882:	d004      	beq.n	f88e <approaching+0xde>
    f884:	f04f 0200 	mov.w	r2, #0
    f888:	f2c4 2220 	movt	r2, #16928	; 0x4220
    f88c:	e004      	b.n	f898 <approaching+0xe8>
    f88e:	f64b 13f8 	movw	r3, #47608	; 0xb9f8
    f892:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f896:	681a      	ldr	r2, [r3, #0]
    f898:	f64b 13f8 	movw	r3, #47608	; 0xb9f8
    f89c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8a0:	601a      	str	r2, [r3, #0]
  if (dist2_to_wp < carrot*carrot)
    f8a2:	f64b 13f8 	movw	r3, #47608	; 0xb9f8
    f8a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8aa:	681a      	ldr	r2, [r3, #0]
    f8ac:	f64b 13f8 	movw	r3, #47608	; 0xb9f8
    f8b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8b4:	681b      	ldr	r3, [r3, #0]
    f8b6:	4610      	mov	r0, r2
    f8b8:	4619      	mov	r1, r3
    f8ba:	f003 fded 	bl	13498 <__aeabi_fmul>
    f8be:	4603      	mov	r3, r0
    f8c0:	461a      	mov	r2, r3
    f8c2:	f64b 13ec 	movw	r3, #47596	; 0xb9ec
    f8c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8ca:	681b      	ldr	r3, [r3, #0]
    f8cc:	4610      	mov	r0, r2
    f8ce:	4619      	mov	r1, r3
    f8d0:	f003 ff9e 	bl	13810 <__aeabi_fcmpgt>
    f8d4:	4603      	mov	r3, r0
    f8d6:	2b00      	cmp	r3, #0
    f8d8:	d001      	beq.n	f8de <approaching+0x12e>
    return TRUE;
    f8da:	2301      	movs	r3, #1
    f8dc:	e048      	b.n	f970 <approaching+0x1c0>

  scal_prod = (waypoints[wp].x - last_x) * pw_x + (waypoints[wp].y - last_y) * pw_y;
    f8de:	79f9      	ldrb	r1, [r7, #7]
    f8e0:	f240 1274 	movw	r2, #372	; 0x174
    f8e4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f8e8:	460b      	mov	r3, r1
    f8ea:	005b      	lsls	r3, r3, #1
    f8ec:	440b      	add	r3, r1
    f8ee:	009b      	lsls	r3, r3, #2
    f8f0:	4413      	add	r3, r2
    f8f2:	681a      	ldr	r2, [r3, #0]
    f8f4:	f64b 13bc 	movw	r3, #47548	; 0xb9bc
    f8f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8fc:	681b      	ldr	r3, [r3, #0]
    f8fe:	4610      	mov	r0, r2
    f900:	4619      	mov	r1, r3
    f902:	f003 fcbf 	bl	13284 <__aeabi_fsub>
    f906:	4603      	mov	r3, r0
    f908:	4618      	mov	r0, r3
    f90a:	6979      	ldr	r1, [r7, #20]
    f90c:	f003 fdc4 	bl	13498 <__aeabi_fmul>
    f910:	4603      	mov	r3, r0
    f912:	461c      	mov	r4, r3
    f914:	79f9      	ldrb	r1, [r7, #7]
    f916:	f240 1274 	movw	r2, #372	; 0x174
    f91a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f91e:	460b      	mov	r3, r1
    f920:	005b      	lsls	r3, r3, #1
    f922:	440b      	add	r3, r1
    f924:	009b      	lsls	r3, r3, #2
    f926:	4413      	add	r3, r2
    f928:	3304      	adds	r3, #4
    f92a:	681a      	ldr	r2, [r3, #0]
    f92c:	f64b 13c0 	movw	r3, #47552	; 0xb9c0
    f930:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f934:	681b      	ldr	r3, [r3, #0]
    f936:	4610      	mov	r0, r2
    f938:	4619      	mov	r1, r3
    f93a:	f003 fca3 	bl	13284 <__aeabi_fsub>
    f93e:	4603      	mov	r3, r0
    f940:	4618      	mov	r0, r3
    f942:	6939      	ldr	r1, [r7, #16]
    f944:	f003 fda8 	bl	13498 <__aeabi_fmul>
    f948:	4603      	mov	r3, r0
    f94a:	4620      	mov	r0, r4
    f94c:	4619      	mov	r1, r3
    f94e:	f003 fc9b 	bl	13288 <__addsf3>
    f952:	4603      	mov	r3, r0
    f954:	60fb      	str	r3, [r7, #12]
  
  return (scal_prod < 0);
    f956:	2301      	movs	r3, #1
    f958:	461c      	mov	r4, r3
    f95a:	68f8      	ldr	r0, [r7, #12]
    f95c:	f04f 0100 	mov.w	r1, #0
    f960:	f003 ff38 	bl	137d4 <__aeabi_fcmplt>
    f964:	4603      	mov	r3, r0
    f966:	2b00      	cmp	r3, #0
    f968:	d101      	bne.n	f96e <approaching+0x1be>
    f96a:	2300      	movs	r3, #0
    f96c:	461c      	mov	r4, r3
    f96e:	b2e3      	uxtb	r3, r4
}
    f970:	4618      	mov	r0, r3
    f972:	371c      	adds	r7, #28
    f974:	46bd      	mov	sp, r7
    f976:	bd90      	pop	{r4, r7, pc}

0000f978 <fly_to_xy>:

static inline void fly_to_xy(float x, float y) 
{ 
    f978:	b5b0      	push	{r4, r5, r7, lr}
    f97a:	b082      	sub	sp, #8
    f97c:	af00      	add	r7, sp, #0
    f97e:	6078      	str	r0, [r7, #4]
    f980:	6039      	str	r1, [r7, #0]
  desired_x = x;
    f982:	f64b 13d8 	movw	r3, #47576	; 0xb9d8
    f986:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f98a:	687a      	ldr	r2, [r7, #4]
    f98c:	601a      	str	r2, [r3, #0]
  desired_y = y;
    f98e:	f64b 13dc 	movw	r3, #47580	; 0xb9dc
    f992:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f996:	683a      	ldr	r2, [r7, #0]
    f998:	601a      	str	r2, [r3, #0]
  desired_course = M_PI/2.-atan2(y - estimator_y, x - estimator_x);
    f99a:	f64b 4318 	movw	r3, #48152	; 0xbc18
    f99e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9a2:	681b      	ldr	r3, [r3, #0]
    f9a4:	6838      	ldr	r0, [r7, #0]
    f9a6:	4619      	mov	r1, r3
    f9a8:	f003 fc6c 	bl	13284 <__aeabi_fsub>
    f9ac:	4603      	mov	r3, r0
    f9ae:	4618      	mov	r0, r3
    f9b0:	f003 f8de 	bl	12b70 <__aeabi_f2d>
    f9b4:	4604      	mov	r4, r0
    f9b6:	460d      	mov	r5, r1
    f9b8:	f64b 4314 	movw	r3, #48148	; 0xbc14
    f9bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9c0:	681b      	ldr	r3, [r3, #0]
    f9c2:	6878      	ldr	r0, [r7, #4]
    f9c4:	4619      	mov	r1, r3
    f9c6:	f003 fc5d 	bl	13284 <__aeabi_fsub>
    f9ca:	4603      	mov	r3, r0
    f9cc:	4618      	mov	r0, r3
    f9ce:	f003 f8cf 	bl	12b70 <__aeabi_f2d>
    f9d2:	4602      	mov	r2, r0
    f9d4:	460b      	mov	r3, r1
    f9d6:	4620      	mov	r0, r4
    f9d8:	4629      	mov	r1, r5
    f9da:	f001 f929 	bl	10c30 <pp_atan2>
    f9de:	4602      	mov	r2, r0
    f9e0:	460b      	mov	r3, r1
    f9e2:	a10b      	add	r1, pc, #44	; (adr r1, fa10 <fly_to_xy+0x98>)
    f9e4:	e9d1 0100 	ldrd	r0, r1, [r1]
    f9e8:	f002 ff62 	bl	128b0 <__aeabi_dsub>
    f9ec:	4602      	mov	r2, r0
    f9ee:	460b      	mov	r3, r1
    f9f0:	4610      	mov	r0, r2
    f9f2:	4619      	mov	r1, r3
    f9f4:	f003 fbf2 	bl	131dc <__aeabi_d2f>
    f9f8:	4602      	mov	r2, r0
    f9fa:	f64b 13a4 	movw	r3, #47524	; 0xb9a4
    f9fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa02:	601a      	str	r2, [r3, #0]
}
    fa04:	3708      	adds	r7, #8
    fa06:	46bd      	mov	sp, r7
    fa08:	bdb0      	pop	{r4, r5, r7, pc}
    fa0a:	bf00      	nop
    fa0c:	f3af 8000 	nop.w
    fa10:	54442d18 	.word	0x54442d18
    fa14:	3ff921fb 	.word	0x3ff921fb

0000fa18 <fly_to>:

static void fly_to(uint8_t wp) { 
    fa18:	b580      	push	{r7, lr}
    fa1a:	b082      	sub	sp, #8
    fa1c:	af00      	add	r7, sp, #0
    fa1e:	4603      	mov	r3, r0
    fa20:	71fb      	strb	r3, [r7, #7]
  fly_to_xy(waypoints[wp].x, waypoints[wp].y);
    fa22:	79f9      	ldrb	r1, [r7, #7]
    fa24:	f240 1274 	movw	r2, #372	; 0x174
    fa28:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fa2c:	460b      	mov	r3, r1
    fa2e:	005b      	lsls	r3, r3, #1
    fa30:	440b      	add	r3, r1
    fa32:	009b      	lsls	r3, r3, #2
    fa34:	4413      	add	r3, r2
    fa36:	6818      	ldr	r0, [r3, #0]
    fa38:	79f9      	ldrb	r1, [r7, #7]
    fa3a:	f240 1274 	movw	r2, #372	; 0x174
    fa3e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fa42:	460b      	mov	r3, r1
    fa44:	005b      	lsls	r3, r3, #1
    fa46:	440b      	add	r3, r1
    fa48:	009b      	lsls	r3, r3, #2
    fa4a:	4413      	add	r3, r2
    fa4c:	3304      	adds	r3, #4
    fa4e:	681b      	ldr	r3, [r3, #0]
    fa50:	4619      	mov	r1, r3
    fa52:	f7ff ff91 	bl	f978 <fly_to_xy>
}
    fa56:	3708      	adds	r7, #8
    fa58:	46bd      	mov	sp, r7
    fa5a:	bd80      	pop	{r7, pc}

0000fa5c <route_to>:

static float alpha, leg;
static void route_to(uint8_t _last_wp, uint8_t wp) 
{
    fa5c:	b5b0      	push	{r4, r5, r7, lr}
    fa5e:	b088      	sub	sp, #32
    fa60:	af00      	add	r7, sp, #0
    fa62:	4602      	mov	r2, r0
    fa64:	460b      	mov	r3, r1
    fa66:	71fa      	strb	r2, [r7, #7]
    fa68:	71bb      	strb	r3, [r7, #6]
  float last_wp_x = waypoints[_last_wp].x;
    fa6a:	79f9      	ldrb	r1, [r7, #7]
    fa6c:	f240 1274 	movw	r2, #372	; 0x174
    fa70:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fa74:	460b      	mov	r3, r1
    fa76:	005b      	lsls	r3, r3, #1
    fa78:	440b      	add	r3, r1
    fa7a:	009b      	lsls	r3, r3, #2
    fa7c:	4413      	add	r3, r2
    fa7e:	681b      	ldr	r3, [r3, #0]
    fa80:	61fb      	str	r3, [r7, #28]
  float last_wp_y = waypoints[_last_wp].y;
    fa82:	79f9      	ldrb	r1, [r7, #7]
    fa84:	f240 1274 	movw	r2, #372	; 0x174
    fa88:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fa8c:	460b      	mov	r3, r1
    fa8e:	005b      	lsls	r3, r3, #1
    fa90:	440b      	add	r3, r1
    fa92:	009b      	lsls	r3, r3, #2
    fa94:	4413      	add	r3, r2
    fa96:	3304      	adds	r3, #4
    fa98:	681b      	ldr	r3, [r3, #0]
    fa9a:	61bb      	str	r3, [r7, #24]
  float leg_x = waypoints[wp].x - last_wp_x;
    fa9c:	79b9      	ldrb	r1, [r7, #6]
    fa9e:	f240 1274 	movw	r2, #372	; 0x174
    faa2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    faa6:	460b      	mov	r3, r1
    faa8:	005b      	lsls	r3, r3, #1
    faaa:	440b      	add	r3, r1
    faac:	009b      	lsls	r3, r3, #2
    faae:	4413      	add	r3, r2
    fab0:	681b      	ldr	r3, [r3, #0]
    fab2:	4618      	mov	r0, r3
    fab4:	69f9      	ldr	r1, [r7, #28]
    fab6:	f003 fbe5 	bl	13284 <__aeabi_fsub>
    faba:	4603      	mov	r3, r0
    fabc:	617b      	str	r3, [r7, #20]
  float leg_y = waypoints[wp].y - last_wp_y;
    fabe:	79b9      	ldrb	r1, [r7, #6]
    fac0:	f240 1274 	movw	r2, #372	; 0x174
    fac4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fac8:	460b      	mov	r3, r1
    faca:	005b      	lsls	r3, r3, #1
    facc:	440b      	add	r3, r1
    face:	009b      	lsls	r3, r3, #2
    fad0:	4413      	add	r3, r2
    fad2:	3304      	adds	r3, #4
    fad4:	681b      	ldr	r3, [r3, #0]
    fad6:	4618      	mov	r0, r3
    fad8:	69b9      	ldr	r1, [r7, #24]
    fada:	f003 fbd3 	bl	13284 <__aeabi_fsub>
    fade:	4603      	mov	r3, r0
    fae0:	613b      	str	r3, [r7, #16]
  float leg2 = leg_x * leg_x + leg_y * leg_y;
    fae2:	6978      	ldr	r0, [r7, #20]
    fae4:	6979      	ldr	r1, [r7, #20]
    fae6:	f003 fcd7 	bl	13498 <__aeabi_fmul>
    faea:	4603      	mov	r3, r0
    faec:	461c      	mov	r4, r3
    faee:	6938      	ldr	r0, [r7, #16]
    faf0:	6939      	ldr	r1, [r7, #16]
    faf2:	f003 fcd1 	bl	13498 <__aeabi_fmul>
    faf6:	4603      	mov	r3, r0
    faf8:	4620      	mov	r0, r4
    fafa:	4619      	mov	r1, r3
    fafc:	f003 fbc4 	bl	13288 <__addsf3>
    fb00:	4603      	mov	r3, r0
    fb02:	60fb      	str	r3, [r7, #12]
  alpha = ((estimator_x - last_wp_x) * leg_x + (estimator_y - last_wp_y) * leg_y) / leg2;
    fb04:	f64b 4314 	movw	r3, #48148	; 0xbc14
    fb08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb0c:	681b      	ldr	r3, [r3, #0]
    fb0e:	4618      	mov	r0, r3
    fb10:	69f9      	ldr	r1, [r7, #28]
    fb12:	f003 fbb7 	bl	13284 <__aeabi_fsub>
    fb16:	4603      	mov	r3, r0
    fb18:	4618      	mov	r0, r3
    fb1a:	6979      	ldr	r1, [r7, #20]
    fb1c:	f003 fcbc 	bl	13498 <__aeabi_fmul>
    fb20:	4603      	mov	r3, r0
    fb22:	461c      	mov	r4, r3
    fb24:	f64b 4318 	movw	r3, #48152	; 0xbc18
    fb28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb2c:	681b      	ldr	r3, [r3, #0]
    fb2e:	4618      	mov	r0, r3
    fb30:	69b9      	ldr	r1, [r7, #24]
    fb32:	f003 fba7 	bl	13284 <__aeabi_fsub>
    fb36:	4603      	mov	r3, r0
    fb38:	4618      	mov	r0, r3
    fb3a:	6939      	ldr	r1, [r7, #16]
    fb3c:	f003 fcac 	bl	13498 <__aeabi_fmul>
    fb40:	4603      	mov	r3, r0
    fb42:	4620      	mov	r0, r4
    fb44:	4619      	mov	r1, r3
    fb46:	f003 fb9f 	bl	13288 <__addsf3>
    fb4a:	4603      	mov	r3, r0
    fb4c:	4618      	mov	r0, r3
    fb4e:	68f9      	ldr	r1, [r7, #12]
    fb50:	f003 fd56 	bl	13600 <__aeabi_fdiv>
    fb54:	4603      	mov	r3, r0
    fb56:	461a      	mov	r2, r3
    fb58:	f64b 13fc 	movw	r3, #47612	; 0xb9fc
    fb5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb60:	601a      	str	r2, [r3, #0]
  alpha = Max(alpha, 0.);
    fb62:	f64b 13fc 	movw	r3, #47612	; 0xb9fc
    fb66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb6a:	681b      	ldr	r3, [r3, #0]
    fb6c:	4618      	mov	r0, r3
    fb6e:	f04f 0100 	mov.w	r1, #0
    fb72:	f003 fe43 	bl	137fc <__aeabi_fcmpge>
    fb76:	4603      	mov	r3, r0
    fb78:	2b00      	cmp	r3, #0
    fb7a:	d005      	beq.n	fb88 <route_to+0x12c>
    fb7c:	f64b 13fc 	movw	r3, #47612	; 0xb9fc
    fb80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb84:	681a      	ldr	r2, [r3, #0]
    fb86:	e001      	b.n	fb8c <route_to+0x130>
    fb88:	f04f 0200 	mov.w	r2, #0
    fb8c:	f64b 13fc 	movw	r3, #47612	; 0xb9fc
    fb90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb94:	601a      	str	r2, [r3, #0]
  leg = sqrt(leg2);
    fb96:	68f8      	ldr	r0, [r7, #12]
    fb98:	f002 ffea 	bl	12b70 <__aeabi_f2d>
    fb9c:	4602      	mov	r2, r0
    fb9e:	460b      	mov	r3, r1
    fba0:	4610      	mov	r0, r2
    fba2:	4619      	mov	r1, r3
    fba4:	f001 f9f4 	bl	10f90 <pp_sqrt>
    fba8:	4602      	mov	r2, r0
    fbaa:	460b      	mov	r3, r1
    fbac:	4610      	mov	r0, r2
    fbae:	4619      	mov	r1, r3
    fbb0:	f003 fb14 	bl	131dc <__aeabi_d2f>
    fbb4:	4602      	mov	r2, r0
    fbb6:	f64b 2300 	movw	r3, #47616	; 0xba00
    fbba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbbe:	601a      	str	r2, [r3, #0]
  alpha += Max(carrot / leg, 0.); /* carrot computed in approaching() */
    fbc0:	f64b 13fc 	movw	r3, #47612	; 0xb9fc
    fbc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbc8:	681b      	ldr	r3, [r3, #0]
    fbca:	4618      	mov	r0, r3
    fbcc:	f002 ffd0 	bl	12b70 <__aeabi_f2d>
    fbd0:	4604      	mov	r4, r0
    fbd2:	460d      	mov	r5, r1
    fbd4:	f64b 13f8 	movw	r3, #47608	; 0xb9f8
    fbd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbdc:	681a      	ldr	r2, [r3, #0]
    fbde:	f64b 2300 	movw	r3, #47616	; 0xba00
    fbe2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbe6:	681b      	ldr	r3, [r3, #0]
    fbe8:	4610      	mov	r0, r2
    fbea:	4619      	mov	r1, r3
    fbec:	f003 fd08 	bl	13600 <__aeabi_fdiv>
    fbf0:	4603      	mov	r3, r0
    fbf2:	4618      	mov	r0, r3
    fbf4:	f04f 0100 	mov.w	r1, #0
    fbf8:	f003 fe00 	bl	137fc <__aeabi_fcmpge>
    fbfc:	4603      	mov	r3, r0
    fbfe:	2b00      	cmp	r3, #0
    fc00:	d014      	beq.n	fc2c <route_to+0x1d0>
    fc02:	f64b 13f8 	movw	r3, #47608	; 0xb9f8
    fc06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc0a:	681a      	ldr	r2, [r3, #0]
    fc0c:	f64b 2300 	movw	r3, #47616	; 0xba00
    fc10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc14:	681b      	ldr	r3, [r3, #0]
    fc16:	4610      	mov	r0, r2
    fc18:	4619      	mov	r1, r3
    fc1a:	f003 fcf1 	bl	13600 <__aeabi_fdiv>
    fc1e:	4603      	mov	r3, r0
    fc20:	4618      	mov	r0, r3
    fc22:	f002 ffa5 	bl	12b70 <__aeabi_f2d>
    fc26:	4602      	mov	r2, r0
    fc28:	460b      	mov	r3, r1
    fc2a:	e003      	b.n	fc34 <route_to+0x1d8>
    fc2c:	f04f 0200 	mov.w	r2, #0
    fc30:	f04f 0300 	mov.w	r3, #0
    fc34:	4620      	mov	r0, r4
    fc36:	4629      	mov	r1, r5
    fc38:	f002 fe3c 	bl	128b4 <__adddf3>
    fc3c:	4602      	mov	r2, r0
    fc3e:	460b      	mov	r3, r1
    fc40:	4610      	mov	r0, r2
    fc42:	4619      	mov	r1, r3
    fc44:	f003 faca 	bl	131dc <__aeabi_d2f>
    fc48:	4602      	mov	r2, r0
    fc4a:	f64b 13fc 	movw	r3, #47612	; 0xb9fc
    fc4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc52:	601a      	str	r2, [r3, #0]
  alpha = Min(1., alpha);
    fc54:	f64b 13fc 	movw	r3, #47612	; 0xb9fc
    fc58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc5c:	681b      	ldr	r3, [r3, #0]
    fc5e:	4618      	mov	r0, r3
    fc60:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    fc64:	f003 fdca 	bl	137fc <__aeabi_fcmpge>
    fc68:	4603      	mov	r3, r0
    fc6a:	2b00      	cmp	r3, #0
    fc6c:	d002      	beq.n	fc74 <route_to+0x218>
    fc6e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    fc72:	e004      	b.n	fc7e <route_to+0x222>
    fc74:	f64b 13fc 	movw	r3, #47612	; 0xb9fc
    fc78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc7c:	681a      	ldr	r2, [r3, #0]
    fc7e:	f64b 13fc 	movw	r3, #47612	; 0xb9fc
    fc82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc86:	601a      	str	r2, [r3, #0]
  fly_to_xy(last_wp_x + alpha*leg_x, last_wp_y + alpha*leg_y);
    fc88:	f64b 13fc 	movw	r3, #47612	; 0xb9fc
    fc8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc90:	681b      	ldr	r3, [r3, #0]
    fc92:	4618      	mov	r0, r3
    fc94:	6979      	ldr	r1, [r7, #20]
    fc96:	f003 fbff 	bl	13498 <__aeabi_fmul>
    fc9a:	4603      	mov	r3, r0
    fc9c:	4618      	mov	r0, r3
    fc9e:	69f9      	ldr	r1, [r7, #28]
    fca0:	f003 faf2 	bl	13288 <__addsf3>
    fca4:	4603      	mov	r3, r0
    fca6:	461c      	mov	r4, r3
    fca8:	f64b 13fc 	movw	r3, #47612	; 0xb9fc
    fcac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcb0:	681b      	ldr	r3, [r3, #0]
    fcb2:	4618      	mov	r0, r3
    fcb4:	6939      	ldr	r1, [r7, #16]
    fcb6:	f003 fbef 	bl	13498 <__aeabi_fmul>
    fcba:	4603      	mov	r3, r0
    fcbc:	4618      	mov	r0, r3
    fcbe:	69b9      	ldr	r1, [r7, #24]
    fcc0:	f003 fae2 	bl	13288 <__addsf3>
    fcc4:	4603      	mov	r3, r0
    fcc6:	4620      	mov	r0, r4
    fcc8:	4619      	mov	r1, r3
    fcca:	f7ff fe55 	bl	f978 <fly_to_xy>
}
    fcce:	3720      	adds	r7, #32
    fcd0:	46bd      	mov	sp, r7
    fcd2:	bdb0      	pop	{r4, r5, r7, pc}

0000fcd4 <compute_dist2_to_home>:
  float last_alt = waypoints[_last_wp].a;
  desired_altitude = last_alt + alpha * (waypoints[wp].a - last_alt);
  pre_climb = NOMINAL_AIRSPEED * (waypoints[wp].a - last_alt) / leg;
}*/

static inline void compute_dist2_to_home(void) {
    fcd4:	b590      	push	{r4, r7, lr}
    fcd6:	b083      	sub	sp, #12
    fcd8:	af00      	add	r7, sp, #0
  float ph_x = waypoints[WP_HOME].x - estimator_x;
    fcda:	f240 1374 	movw	r3, #372	; 0x174
    fcde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fce2:	681a      	ldr	r2, [r3, #0]
    fce4:	f64b 4314 	movw	r3, #48148	; 0xbc14
    fce8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcec:	681b      	ldr	r3, [r3, #0]
    fcee:	4610      	mov	r0, r2
    fcf0:	4619      	mov	r1, r3
    fcf2:	f003 fac7 	bl	13284 <__aeabi_fsub>
    fcf6:	4603      	mov	r3, r0
    fcf8:	607b      	str	r3, [r7, #4]
  float ph_y = waypoints[WP_HOME].y - estimator_y;
    fcfa:	f240 1374 	movw	r3, #372	; 0x174
    fcfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd02:	685a      	ldr	r2, [r3, #4]
    fd04:	f64b 4318 	movw	r3, #48152	; 0xbc18
    fd08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd0c:	681b      	ldr	r3, [r3, #0]
    fd0e:	4610      	mov	r0, r2
    fd10:	4619      	mov	r1, r3
    fd12:	f003 fab7 	bl	13284 <__aeabi_fsub>
    fd16:	4603      	mov	r3, r0
    fd18:	603b      	str	r3, [r7, #0]
  dist2_to_home = ph_x*ph_x + ph_y *ph_y;
    fd1a:	6878      	ldr	r0, [r7, #4]
    fd1c:	6879      	ldr	r1, [r7, #4]
    fd1e:	f003 fbbb 	bl	13498 <__aeabi_fmul>
    fd22:	4603      	mov	r3, r0
    fd24:	461c      	mov	r4, r3
    fd26:	6838      	ldr	r0, [r7, #0]
    fd28:	6839      	ldr	r1, [r7, #0]
    fd2a:	f003 fbb5 	bl	13498 <__aeabi_fmul>
    fd2e:	4603      	mov	r3, r0
    fd30:	4620      	mov	r0, r4
    fd32:	4619      	mov	r1, r3
    fd34:	f003 faa8 	bl	13288 <__addsf3>
    fd38:	4603      	mov	r3, r0
    fd3a:	461a      	mov	r2, r3
    fd3c:	f64b 13f0 	movw	r3, #47600	; 0xb9f0
    fd40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd44:	601a      	str	r2, [r3, #0]
  too_far_from_home = dist2_to_home > (MAX_DIST_FROM_HOME*MAX_DIST_FROM_HOME);
    fd46:	f64b 13f0 	movw	r3, #47600	; 0xb9f0
    fd4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd4e:	681b      	ldr	r3, [r3, #0]
    fd50:	2201      	movs	r2, #1
    fd52:	4614      	mov	r4, r2
    fd54:	4618      	mov	r0, r3
    fd56:	f44f 5110 	mov.w	r1, #9216	; 0x2400
    fd5a:	f6c4 0174 	movt	r1, #18548	; 0x4874
    fd5e:	f003 fd57 	bl	13810 <__aeabi_fcmpgt>
    fd62:	4603      	mov	r3, r0
    fd64:	2b00      	cmp	r3, #0
    fd66:	d101      	bne.n	fd6c <compute_dist2_to_home+0x98>
    fd68:	2300      	movs	r3, #0
    fd6a:	461c      	mov	r4, r3
    fd6c:	b2e3      	uxtb	r3, r4
    fd6e:	461a      	mov	r2, r3
    fd70:	f64b 13f4 	movw	r3, #47604	; 0xb9f4
    fd74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd78:	701a      	strb	r2, [r3, #0]
}
    fd7a:	370c      	adds	r7, #12
    fd7c:	46bd      	mov	sp, r7
    fd7e:	bd90      	pop	{r4, r7, pc}

0000fd80 <nav_home>:

void nav_home(void) {
    fd80:	b580      	push	{r7, lr}
    fd82:	af00      	add	r7, sp, #0
  //Circle(WP_HOME, 50); /* FIXME: radius should be defined elsewhere */
  nav_pitch = 0.; /* Nominal speed */ 
    fd84:	f64b 13e4 	movw	r3, #47588	; 0xb9e4
    fd88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd8c:	f04f 0200 	mov.w	r2, #0
    fd90:	601a      	str	r2, [r3, #0]
  vertical_mode = VERTICAL_MODE_AUTO_ALT;
    fd92:	f24b 6345 	movw	r3, #46661	; 0xb645
    fd96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd9a:	2203      	movs	r2, #3
    fd9c:	701a      	strb	r2, [r3, #0]
  desired_altitude = GROUND_ALT+50;
    fd9e:	f240 1370 	movw	r3, #368	; 0x170
    fda2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fda6:	f04f 0200 	mov.w	r2, #0
    fdaa:	f2c4 322f 	movt	r2, #17199	; 0x432f
    fdae:	601a      	str	r2, [r3, #0]
  compute_dist2_to_home();
    fdb0:	f7ff ff90 	bl	fcd4 <compute_dist2_to_home>
  dist2_to_wp = dist2_to_home;
    fdb4:	f64b 13f0 	movw	r3, #47600	; 0xb9f0
    fdb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdbc:	681a      	ldr	r2, [r3, #0]
    fdbe:	f64b 13ec 	movw	r3, #47596	; 0xb9ec
    fdc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdc6:	601a      	str	r2, [r3, #0]
}
    fdc8:	bd80      	pop	{r7, pc}
    fdca:	bf00      	nop

0000fdcc <nav_update>:

void nav_update(void) {
    fdcc:	b580      	push	{r7, lr}
    fdce:	af00      	add	r7, sp, #0
  compute_dist2_to_home();
    fdd0:	f7ff ff80 	bl	fcd4 <compute_dist2_to_home>

  auto_nav();
    fdd4:	f7fd fc0c 	bl	d5f0 <auto_nav>
}
    fdd8:	bd80      	pop	{r7, pc}
    fdda:	bf00      	nop

0000fddc <nav_init>:


void nav_init(void) {
    fddc:	b480      	push	{r7}
    fdde:	af00      	add	r7, sp, #0
  nav_block = 0;
    fde0:	f64b 13b9 	movw	r3, #47545	; 0xb9b9
    fde4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fde8:	2200      	movs	r2, #0
    fdea:	701a      	strb	r2, [r3, #0]
  nav_stage = 0;
    fdec:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    fdf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdf4:	2200      	movs	r2, #0
    fdf6:	701a      	strb	r2, [r3, #0]
}
    fdf8:	46bd      	mov	sp, r7
    fdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
    fdfe:	4770      	bx	lr

0000fe00 <uart0_transmit>:

static uint8_t           tx_head1; /* next free in buf */
static volatile uint8_t  tx_tail1; /* next char to send */
static uint8_t           tx_buf1[ TX_BUF_SIZE ];

void uart0_transmit( unsigned char data ) {
    fe00:	b480      	push	{r7}
    fe02:	b083      	sub	sp, #12
    fe04:	af00      	add	r7, sp, #0
    fe06:	4603      	mov	r3, r0
    fe08:	71fb      	strb	r3, [r7, #7]
  if (UCSR0B & _BV(TXCIE)) {
    fe0a:	f248 030a 	movw	r3, #32778	; 0x800a
    fe0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe12:	781b      	ldrb	r3, [r3, #0]
    fe14:	b2db      	uxtb	r3, r3
    fe16:	f003 0340 	and.w	r3, r3, #64	; 0x40
    fe1a:	2b00      	cmp	r3, #0
    fe1c:	d028      	beq.n	fe70 <uart0_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail0 == tx_head0 + 1) { /* BUF_SIZE = 256 */
    fe1e:	f64b 230d 	movw	r3, #47629	; 0xba0d
    fe22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe26:	781b      	ldrb	r3, [r3, #0]
    fe28:	b2db      	uxtb	r3, r3
    fe2a:	461a      	mov	r2, r3
    fe2c:	f64b 230c 	movw	r3, #47628	; 0xba0c
    fe30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe34:	781b      	ldrb	r3, [r3, #0]
    fe36:	3301      	adds	r3, #1
    fe38:	429a      	cmp	r2, r3
    fe3a:	d100      	bne.n	fe3e <uart0_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
    fe3c:	e02c      	b.n	fe98 <uart0_transmit+0x98>
    }
    tx_buf0[tx_head0] = data;
    fe3e:	f64b 230c 	movw	r3, #47628	; 0xba0c
    fe42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe46:	781b      	ldrb	r3, [r3, #0]
    fe48:	461a      	mov	r2, r3
    fe4a:	f64b 2310 	movw	r3, #47632	; 0xba10
    fe4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe52:	79f9      	ldrb	r1, [r7, #7]
    fe54:	5499      	strb	r1, [r3, r2]
    tx_head0++; /* BUF_SIZE = 256 */
    fe56:	f64b 230c 	movw	r3, #47628	; 0xba0c
    fe5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe5e:	781b      	ldrb	r3, [r3, #0]
    fe60:	3301      	adds	r3, #1
    fe62:	b2da      	uxtb	r2, r3
    fe64:	f64b 230c 	movw	r3, #47628	; 0xba0c
    fe68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe6c:	701a      	strb	r2, [r3, #0]
    fe6e:	e013      	b.n	fe98 <uart0_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR0 = data;
    fe70:	f248 030c 	movw	r3, #32780	; 0x800c
    fe74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe78:	79fa      	ldrb	r2, [r7, #7]
    fe7a:	701a      	strb	r2, [r3, #0]
    sbi(UCSR0B, TXCIE);
    fe7c:	f248 030a 	movw	r3, #32778	; 0x800a
    fe80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe84:	f248 020a 	movw	r2, #32778	; 0x800a
    fe88:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fe8c:	7812      	ldrb	r2, [r2, #0]
    fe8e:	b2d2      	uxtb	r2, r2
    fe90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    fe94:	b2d2      	uxtb	r2, r2
    fe96:	701a      	strb	r2, [r3, #0]
  }
}
    fe98:	370c      	adds	r7, #12
    fe9a:	46bd      	mov	sp, r7
    fe9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    fea0:	4770      	bx	lr
    fea2:	bf00      	nop

0000fea4 <uart1_transmit>:

void uart1_transmit( unsigned char data ) {
    fea4:	b480      	push	{r7}
    fea6:	b083      	sub	sp, #12
    fea8:	af00      	add	r7, sp, #0
    feaa:	4603      	mov	r3, r0
    feac:	71fb      	strb	r3, [r7, #7]
  if (UCSR1B & _BV(TXCIE)) {
    feae:	f248 039a 	movw	r3, #32922	; 0x809a
    feb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    feb6:	781b      	ldrb	r3, [r3, #0]
    feb8:	b2db      	uxtb	r3, r3
    feba:	f003 0340 	and.w	r3, r3, #64	; 0x40
    febe:	2b00      	cmp	r3, #0
    fec0:	d028      	beq.n	ff14 <uart1_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail1 == tx_head1 + 1) { /* BUF_SIZE = 256 */
    fec2:	f64b 3311 	movw	r3, #47889	; 0xbb11
    fec6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    feca:	781b      	ldrb	r3, [r3, #0]
    fecc:	b2db      	uxtb	r3, r3
    fece:	461a      	mov	r2, r3
    fed0:	f64b 3310 	movw	r3, #47888	; 0xbb10
    fed4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fed8:	781b      	ldrb	r3, [r3, #0]
    feda:	3301      	adds	r3, #1
    fedc:	429a      	cmp	r2, r3
    fede:	d100      	bne.n	fee2 <uart1_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
    fee0:	e02c      	b.n	ff3c <uart1_transmit+0x98>
    }
    tx_buf1[tx_head1] = data;
    fee2:	f64b 3310 	movw	r3, #47888	; 0xbb10
    fee6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    feea:	781b      	ldrb	r3, [r3, #0]
    feec:	461a      	mov	r2, r3
    feee:	f64b 3314 	movw	r3, #47892	; 0xbb14
    fef2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fef6:	79f9      	ldrb	r1, [r7, #7]
    fef8:	5499      	strb	r1, [r3, r2]
    tx_head1++; /* BUF_SIZE = 256 */
    fefa:	f64b 3310 	movw	r3, #47888	; 0xbb10
    fefe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff02:	781b      	ldrb	r3, [r3, #0]
    ff04:	3301      	adds	r3, #1
    ff06:	b2da      	uxtb	r2, r3
    ff08:	f64b 3310 	movw	r3, #47888	; 0xbb10
    ff0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff10:	701a      	strb	r2, [r3, #0]
    ff12:	e013      	b.n	ff3c <uart1_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR1 = data;
    ff14:	f248 039c 	movw	r3, #32924	; 0x809c
    ff18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff1c:	79fa      	ldrb	r2, [r7, #7]
    ff1e:	701a      	strb	r2, [r3, #0]
    sbi(UCSR1B, TXCIE);
    ff20:	f248 039a 	movw	r3, #32922	; 0x809a
    ff24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff28:	f248 029a 	movw	r2, #32922	; 0x809a
    ff2c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ff30:	7812      	ldrb	r2, [r2, #0]
    ff32:	b2d2      	uxtb	r2, r2
    ff34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    ff38:	b2d2      	uxtb	r2, r2
    ff3a:	701a      	strb	r2, [r3, #0]
  }
}
    ff3c:	370c      	adds	r7, #12
    ff3e:	46bd      	mov	sp, r7
    ff40:	f85d 7b04 	ldr.w	r7, [sp], #4
    ff44:	4770      	bx	lr
    ff46:	bf00      	nop

0000ff48 <uart0_print_string>:


void uart0_print_string(const uint8_t* s) {
    ff48:	b580      	push	{r7, lr}
    ff4a:	b084      	sub	sp, #16
    ff4c:	af00      	add	r7, sp, #0
    ff4e:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
    ff50:	2300      	movs	r3, #0
    ff52:	73fb      	strb	r3, [r7, #15]
  while (s[i]) {
    ff54:	e009      	b.n	ff6a <uart0_print_string+0x22>
    uart0_transmit(s[i]);
    ff56:	7bfb      	ldrb	r3, [r7, #15]
    ff58:	687a      	ldr	r2, [r7, #4]
    ff5a:	4413      	add	r3, r2
    ff5c:	781b      	ldrb	r3, [r3, #0]
    ff5e:	4618      	mov	r0, r3
    ff60:	f7ff ff4e 	bl	fe00 <uart0_transmit>
    i++;
    ff64:	7bfb      	ldrb	r3, [r7, #15]
    ff66:	3301      	adds	r3, #1
    ff68:	73fb      	strb	r3, [r7, #15]
}


void uart0_print_string(const uint8_t* s) {
  uint8_t i = 0;
  while (s[i]) {
    ff6a:	7bfb      	ldrb	r3, [r7, #15]
    ff6c:	687a      	ldr	r2, [r7, #4]
    ff6e:	4413      	add	r3, r2
    ff70:	781b      	ldrb	r3, [r3, #0]
    ff72:	2b00      	cmp	r3, #0
    ff74:	d1ef      	bne.n	ff56 <uart0_print_string+0xe>
    uart0_transmit(s[i]);
    i++;
  }
}
    ff76:	3710      	adds	r7, #16
    ff78:	46bd      	mov	sp, r7
    ff7a:	bd80      	pop	{r7, pc}

0000ff7c <uart0_print_hex>:

void uart0_print_hex(const uint8_t c) {
    ff7c:	b590      	push	{r4, r7, lr}
    ff7e:	b089      	sub	sp, #36	; 0x24
    ff80:	af00      	add	r7, sp, #0
    ff82:	4603      	mov	r3, r0
    ff84:	71fb      	strb	r3, [r7, #7]
  const uint8_t hex[16] = { '0', '1', '2', '3', '4', '5', '6', '7', 
    ff86:	f643 3308 	movw	r3, #15112	; 0x3b08
    ff8a:	f2c0 0301 	movt	r3, #1
    ff8e:	f107 040c 	add.w	r4, r7, #12
    ff92:	6818      	ldr	r0, [r3, #0]
    ff94:	6859      	ldr	r1, [r3, #4]
    ff96:	689a      	ldr	r2, [r3, #8]
    ff98:	68db      	ldr	r3, [r3, #12]
    ff9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
  uint8_t high = (c & 0xF0)>>4;
    ff9c:	79fb      	ldrb	r3, [r7, #7]
    ff9e:	091b      	lsrs	r3, r3, #4
    ffa0:	77fb      	strb	r3, [r7, #31]
  uint8_t low  = c & 0x0F;
    ffa2:	79fb      	ldrb	r3, [r7, #7]
    ffa4:	f003 030f 	and.w	r3, r3, #15
    ffa8:	77bb      	strb	r3, [r7, #30]
    /*
    *Added by SunnyBeike
    * */
    high = 15;
    ffaa:	230f      	movs	r3, #15
    ffac:	77fb      	strb	r3, [r7, #31]
    low = 15;
    ffae:	230f      	movs	r3, #15
    ffb0:	77bb      	strb	r3, [r7, #30]
    /*
    *End
    * */
    uart0_transmit(hex[high]);
    ffb2:	7ffb      	ldrb	r3, [r7, #31]
    ffb4:	f107 0220 	add.w	r2, r7, #32
    ffb8:	4413      	add	r3, r2
    ffba:	f813 3c14 	ldrb.w	r3, [r3, #-20]
    ffbe:	4618      	mov	r0, r3
    ffc0:	f7ff ff1e 	bl	fe00 <uart0_transmit>
  uart0_transmit(hex[low]);
    ffc4:	7fbb      	ldrb	r3, [r7, #30]
    ffc6:	f107 0220 	add.w	r2, r7, #32
    ffca:	4413      	add	r3, r2
    ffcc:	f813 3c14 	ldrb.w	r3, [r3, #-20]
    ffd0:	4618      	mov	r0, r3
    ffd2:	f7ff ff15 	bl	fe00 <uart0_transmit>
}
    ffd6:	3724      	adds	r7, #36	; 0x24
    ffd8:	46bd      	mov	sp, r7
    ffda:	bd90      	pop	{r4, r7, pc}

0000ffdc <__vector_20>:


SIGNAL(SIG_UART0_TRANS) {
    ffdc:	b480      	push	{r7}
    ffde:	af00      	add	r7, sp, #0
  if (tx_head0 == tx_tail0) {
    ffe0:	f64b 230c 	movw	r3, #47628	; 0xba0c
    ffe4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffe8:	781a      	ldrb	r2, [r3, #0]
    ffea:	f64b 230d 	movw	r3, #47629	; 0xba0d
    ffee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fff2:	781b      	ldrb	r3, [r3, #0]
    fff4:	b2db      	uxtb	r3, r3
    fff6:	429a      	cmp	r2, r3
    fff8:	d10e      	bne.n	10018 <__vector_20+0x3c>
    /* Nothing more to send */
    cbi(UCSR0B, TXCIE); /* disable interrupt */
    fffa:	f248 030a 	movw	r3, #32778	; 0x800a
    fffe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10002:	f248 020a 	movw	r2, #32778	; 0x800a
   10006:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1000a:	7812      	ldrb	r2, [r2, #0]
   1000c:	b2d2      	uxtb	r2, r2
   1000e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   10012:	b2d2      	uxtb	r2, r2
   10014:	701a      	strb	r2, [r3, #0]
   10016:	e01d      	b.n	10054 <__vector_20+0x78>
  } else {
    UDR0 = tx_buf0[tx_tail0];
   10018:	f248 030c 	movw	r3, #32780	; 0x800c
   1001c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10020:	f64b 220d 	movw	r2, #47629	; 0xba0d
   10024:	f2c2 0204 	movt	r2, #8196	; 0x2004
   10028:	7812      	ldrb	r2, [r2, #0]
   1002a:	b2d2      	uxtb	r2, r2
   1002c:	4611      	mov	r1, r2
   1002e:	f64b 2210 	movw	r2, #47632	; 0xba10
   10032:	f2c2 0204 	movt	r2, #8196	; 0x2004
   10036:	5c52      	ldrb	r2, [r2, r1]
   10038:	701a      	strb	r2, [r3, #0]
    tx_tail0++; /* warning tx_buf_len is 256 */
   1003a:	f64b 230d 	movw	r3, #47629	; 0xba0d
   1003e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10042:	781b      	ldrb	r3, [r3, #0]
   10044:	b2db      	uxtb	r3, r3
   10046:	3301      	adds	r3, #1
   10048:	b2da      	uxtb	r2, r3
   1004a:	f64b 230d 	movw	r3, #47629	; 0xba0d
   1004e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10052:	701a      	strb	r2, [r3, #0]
  }
}
   10054:	46bd      	mov	sp, r7
   10056:	f85d 7b04 	ldr.w	r7, [sp], #4
   1005a:	4770      	bx	lr

0001005c <__vector_32>:

SIGNAL(SIG_UART1_TRANS) {
   1005c:	b480      	push	{r7}
   1005e:	af00      	add	r7, sp, #0
  if (tx_head1 == tx_tail1) {
   10060:	f64b 3310 	movw	r3, #47888	; 0xbb10
   10064:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10068:	781a      	ldrb	r2, [r3, #0]
   1006a:	f64b 3311 	movw	r3, #47889	; 0xbb11
   1006e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10072:	781b      	ldrb	r3, [r3, #0]
   10074:	b2db      	uxtb	r3, r3
   10076:	429a      	cmp	r2, r3
   10078:	d10e      	bne.n	10098 <__vector_32+0x3c>
    /* Nothing more to send */
    cbi(UCSR1B, TXCIE); /* disable interrupt */
   1007a:	f248 039a 	movw	r3, #32922	; 0x809a
   1007e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10082:	f248 029a 	movw	r2, #32922	; 0x809a
   10086:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1008a:	7812      	ldrb	r2, [r2, #0]
   1008c:	b2d2      	uxtb	r2, r2
   1008e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   10092:	b2d2      	uxtb	r2, r2
   10094:	701a      	strb	r2, [r3, #0]
   10096:	e01d      	b.n	100d4 <__vector_32+0x78>
  } else {
    UDR1 = tx_buf1[tx_tail1];
   10098:	f248 039c 	movw	r3, #32924	; 0x809c
   1009c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100a0:	f64b 3211 	movw	r2, #47889	; 0xbb11
   100a4:	f2c2 0204 	movt	r2, #8196	; 0x2004
   100a8:	7812      	ldrb	r2, [r2, #0]
   100aa:	b2d2      	uxtb	r2, r2
   100ac:	4611      	mov	r1, r2
   100ae:	f64b 3214 	movw	r2, #47892	; 0xbb14
   100b2:	f2c2 0204 	movt	r2, #8196	; 0x2004
   100b6:	5c52      	ldrb	r2, [r2, r1]
   100b8:	701a      	strb	r2, [r3, #0]
    tx_tail1++; /* warning tx_buf_len is 256 */
   100ba:	f64b 3311 	movw	r3, #47889	; 0xbb11
   100be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100c2:	781b      	ldrb	r3, [r3, #0]
   100c4:	b2db      	uxtb	r3, r3
   100c6:	3301      	adds	r3, #1
   100c8:	b2da      	uxtb	r2, r3
   100ca:	f64b 3311 	movw	r3, #47889	; 0xbb11
   100ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100d2:	701a      	strb	r2, [r3, #0]
  }
}
   100d4:	46bd      	mov	sp, r7
   100d6:	f85d 7b04 	ldr.w	r7, [sp], #4
   100da:	4770      	bx	lr

000100dc <uart0_init>:

void uart0_init( void ) {
   100dc:	b480      	push	{r7}
   100de:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRR0H = 0; 
   100e0:	f248 0390 	movw	r3, #32912	; 0x8090
   100e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100e8:	2200      	movs	r2, #0
   100ea:	701a      	strb	r2, [r3, #0]
  UBRR0L = 25; // 38.4
   100ec:	f248 0309 	movw	r3, #32777	; 0x8009
   100f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100f4:	2219      	movs	r2, #25
   100f6:	701a      	strb	r2, [r3, #0]
  // UBRR0L = 103; //9600
  /* single speed */ 
  UCSR0A = 0; 
   100f8:	f248 030b 	movw	r3, #32779	; 0x800b
   100fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10100:	2200      	movs	r2, #0
   10102:	701a      	strb	r2, [r3, #0]
  /* Enable receiver and transmitter */ 
  UCSR0B = _BV(RXEN) | _BV(TXEN);
   10104:	f248 030a 	movw	r3, #32778	; 0x800a
   10108:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1010c:	2218      	movs	r2, #24
   1010e:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSR0C = _BV(UCSZ1) | _BV(UCSZ0);
   10110:	f248 0395 	movw	r3, #32917	; 0x8095
   10114:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10118:	2206      	movs	r2, #6
   1011a:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi(UCSR0B, RXCIE ); 
   1011c:	f248 030a 	movw	r3, #32778	; 0x800a
   10120:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10124:	f248 020a 	movw	r2, #32778	; 0x800a
   10128:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1012c:	7812      	ldrb	r2, [r2, #0]
   1012e:	b2d2      	uxtb	r2, r2
   10130:	f062 027f 	orn	r2, r2, #127	; 0x7f
   10134:	b2d2      	uxtb	r2, r2
   10136:	701a      	strb	r2, [r3, #0]
}
   10138:	46bd      	mov	sp, r7
   1013a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1013e:	4770      	bx	lr

00010140 <uart1_init>:

void uart1_init( void ) {
   10140:	b480      	push	{r7}
   10142:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRR1H = 0; 
   10144:	f248 0398 	movw	r3, #32920	; 0x8098
   10148:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1014c:	2200      	movs	r2, #0
   1014e:	701a      	strb	r2, [r3, #0]
  UBRR1L = 25; // 38.4
   10150:	f248 0399 	movw	r3, #32921	; 0x8099
   10154:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10158:	2219      	movs	r2, #25
   1015a:	701a      	strb	r2, [r3, #0]
  // UBRR1L = 103; //9600


  /* single speed */ 
  UCSR1A = 0; 
   1015c:	f248 039b 	movw	r3, #32923	; 0x809b
   10160:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10164:	2200      	movs	r2, #0
   10166:	701a      	strb	r2, [r3, #0]
  /* Enable receiver and transmitter */ 
  UCSR1B = _BV(RXEN) | _BV(TXEN);
   10168:	f248 039a 	movw	r3, #32922	; 0x809a
   1016c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10170:	2218      	movs	r2, #24
   10172:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSR1C = _BV(UCSZ1) | _BV(UCSZ0);
   10174:	f248 039d 	movw	r3, #32925	; 0x809d
   10178:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1017c:	2206      	movs	r2, #6
   1017e:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi(UCSR1B, RXCIE ); 
   10180:	f248 039a 	movw	r3, #32922	; 0x809a
   10184:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10188:	f248 029a 	movw	r2, #32922	; 0x809a
   1018c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10190:	7812      	ldrb	r2, [r2, #0]
   10192:	b2d2      	uxtb	r2, r2
   10194:	f062 027f 	orn	r2, r2, #127	; 0x7f
   10198:	b2d2      	uxtb	r2, r2
   1019a:	701a      	strb	r2, [r3, #0]
}
   1019c:	46bd      	mov	sp, r7
   1019e:	f85d 7b04 	ldr.w	r7, [sp], #4
   101a2:	4770      	bx	lr
   101a4:	0000      	movs	r0, r0
	...

000101a8 <estimator_init>:
  estimator_theta_dot = theta_dot; \
}

inline void estimator_update_lls( void );

void estimator_init( void ) {
   101a8:	b480      	push	{r7}
   101aa:	af00      	add	r7, sp, #0

  EstimatorSetPos (0., 0., 0.);
   101ac:	f64b 4314 	movw	r3, #48148	; 0xbc14
   101b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101b4:	f04f 0200 	mov.w	r2, #0
   101b8:	601a      	str	r2, [r3, #0]
   101ba:	f64b 4318 	movw	r3, #48152	; 0xbc18
   101be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101c2:	f04f 0200 	mov.w	r2, #0
   101c6:	601a      	str	r2, [r3, #0]
   101c8:	f64b 431c 	movw	r3, #48156	; 0xbc1c
   101cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101d0:	f04f 0200 	mov.w	r2, #0
   101d4:	601a      	str	r2, [r3, #0]

  EstimatorSetAtt (0., 0., 0);
   101d6:	f64b 4320 	movw	r3, #48160	; 0xbc20
   101da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101de:	f04f 0200 	mov.w	r2, #0
   101e2:	601a      	str	r2, [r3, #0]
   101e4:	f64b 4324 	movw	r3, #48164	; 0xbc24
   101e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101ec:	f04f 0200 	mov.w	r2, #0
   101f0:	601a      	str	r2, [r3, #0]
   101f2:	f64b 4328 	movw	r3, #48168	; 0xbc28
   101f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101fa:	f04f 0200 	mov.w	r2, #0
   101fe:	601a      	str	r2, [r3, #0]

  EstimatorSetSpeedPol ( 0., 0., 0.);
   10200:	f64b 434c 	movw	r3, #48204	; 0xbc4c
   10204:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10208:	f04f 0200 	mov.w	r2, #0
   1020c:	601a      	str	r2, [r3, #0]
   1020e:	f64b 4350 	movw	r3, #48208	; 0xbc50
   10212:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10216:	f04f 0200 	mov.w	r2, #0
   1021a:	601a      	str	r2, [r3, #0]
   1021c:	f64b 4334 	movw	r3, #48180	; 0xbc34
   10220:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10224:	f04f 0200 	mov.w	r2, #0
   10228:	601a      	str	r2, [r3, #0]

  EstimatorSetRotSpeed (0., 0., 0.);
   1022a:	f64b 4338 	movw	r3, #48184	; 0xbc38
   1022e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10232:	f04f 0200 	mov.w	r2, #0
   10236:	601a      	str	r2, [r3, #0]
   10238:	f64b 433c 	movw	r3, #48188	; 0xbc3c
   1023c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10240:	f04f 0200 	mov.w	r2, #0
   10244:	601a      	str	r2, [r3, #0]
   10246:	f64b 4340 	movw	r3, #48192	; 0xbc40
   1024a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1024e:	f04f 0200 	mov.w	r2, #0
   10252:	601a      	str	r2, [r3, #0]

  estimator_flight_time = 0;
   10254:	f64b 4344 	movw	r3, #48196	; 0xbc44
   10258:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1025c:	2200      	movs	r2, #0
   1025e:	801a      	strh	r2, [r3, #0]

  estimator_rad_of_ir = ir_rad_of_ir;
   10260:	f240 1344 	movw	r3, #324	; 0x144
   10264:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10268:	681a      	ldr	r2, [r3, #0]
   1026a:	f64b 4354 	movw	r3, #48212	; 0xbc54
   1026e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10272:	601a      	str	r2, [r3, #0]
}
   10274:	46bd      	mov	sp, r7
   10276:	f85d 7b04 	ldr.w	r7, [sp], #4
   1027a:	4770      	bx	lr

0001027c <estimator_update_state_infrared>:

#define EstimatorIrGainIsCorrect() (TRUE)

void estimator_update_state_infrared( void ) {
   1027c:	b580      	push	{r7, lr}
   1027e:	b082      	sub	sp, #8
   10280:	af00      	add	r7, sp, #0
  float rad_of_ir = (ir_estim_mode == IR_ESTIM_MODE_ON && EstimatorIrGainIsCorrect()) ? 
   10282:	f240 1338 	movw	r3, #312	; 0x138
   10286:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1028a:	781b      	ldrb	r3, [r3, #0]
    estimator_rad_of_ir : ir_rad_of_ir;
   1028c:	2b01      	cmp	r3, #1
   1028e:	d105      	bne.n	1029c <estimator_update_state_infrared+0x20>
   10290:	f64b 4354 	movw	r3, #48212	; 0xbc54
   10294:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10298:	681b      	ldr	r3, [r3, #0]
   1029a:	e004      	b.n	102a6 <estimator_update_state_infrared+0x2a>
   1029c:	f240 1344 	movw	r3, #324	; 0x144
   102a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102a4:	681b      	ldr	r3, [r3, #0]
}

#define EstimatorIrGainIsCorrect() (TRUE)

void estimator_update_state_infrared( void ) {
  float rad_of_ir = (ir_estim_mode == IR_ESTIM_MODE_ON && EstimatorIrGainIsCorrect()) ? 
   102a6:	607b      	str	r3, [r7, #4]
    estimator_rad_of_ir : ir_rad_of_ir;
  estimator_phi  = rad_of_ir * ir_roll;
   102a8:	f64b 1300 	movw	r3, #47360	; 0xb900
   102ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102b0:	881b      	ldrh	r3, [r3, #0]
   102b2:	b21b      	sxth	r3, r3
   102b4:	4618      	mov	r0, r3
   102b6:	f003 f89b 	bl	133f0 <__aeabi_i2f>
   102ba:	4603      	mov	r3, r0
   102bc:	4618      	mov	r0, r3
   102be:	6879      	ldr	r1, [r7, #4]
   102c0:	f003 f8ea 	bl	13498 <__aeabi_fmul>
   102c4:	4603      	mov	r3, r0
   102c6:	461a      	mov	r2, r3
   102c8:	f64b 4320 	movw	r3, #48160	; 0xbc20
   102cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102d0:	601a      	str	r2, [r3, #0]

  estimator_theta = rad_of_ir * ir_pitch;
   102d2:	f64b 1302 	movw	r3, #47362	; 0xb902
   102d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102da:	881b      	ldrh	r3, [r3, #0]
   102dc:	b21b      	sxth	r3, r3
   102de:	4618      	mov	r0, r3
   102e0:	f003 f886 	bl	133f0 <__aeabi_i2f>
   102e4:	4603      	mov	r3, r0
   102e6:	4618      	mov	r0, r3
   102e8:	6879      	ldr	r1, [r7, #4]
   102ea:	f003 f8d5 	bl	13498 <__aeabi_fmul>
   102ee:	4603      	mov	r3, r0
   102f0:	461a      	mov	r2, r3
   102f2:	f64b 4328 	movw	r3, #48168	; 0xbc28
   102f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102fa:	601a      	str	r2, [r3, #0]
}
   102fc:	3708      	adds	r7, #8
   102fe:	46bd      	mov	sp, r7
   10300:	bd80      	pop	{r7, pc}
   10302:	bf00      	nop

00010304 <estimator_update_ir_estim>:
#define RHO 0.999 /* The higher, the slower the estimation is changing */

#define g 9.81


void estimator_update_ir_estim( void ) {
   10304:	b5b0      	push	{r4, r5, r7, lr}
   10306:	b084      	sub	sp, #16
   10308:	af00      	add	r7, sp, #0
  static bool_t initialized = FALSE;
  static float sum_xy, sum_xx;
  float absphi;
  float init_ir2;

  if (initialized) 
   1030a:	f64b 4360 	movw	r3, #48224	; 0xbc60
   1030e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10312:	781b      	ldrb	r3, [r3, #0]
   10314:	2b00      	cmp	r3, #0
   10316:	f000 81e8 	beq.w	106ea <estimator_update_ir_estim+0x3e6>
  {
    float dt = gps_ftow - last_t;
   1031a:	f24b 73d0 	movw	r3, #47056	; 0xb7d0
   1031e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10322:	681a      	ldr	r2, [r3, #0]
   10324:	f64b 4364 	movw	r3, #48228	; 0xbc64
   10328:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1032c:	681b      	ldr	r3, [r3, #0]
   1032e:	4610      	mov	r0, r2
   10330:	4619      	mov	r1, r3
   10332:	f002 ffa7 	bl	13284 <__aeabi_fsub>
   10336:	4603      	mov	r3, r0
   10338:	60bb      	str	r3, [r7, #8]
    if (dt > 0.1) { // Against division by zero
   1033a:	68b8      	ldr	r0, [r7, #8]
   1033c:	f002 fc18 	bl	12b70 <__aeabi_f2d>
   10340:	4602      	mov	r2, r0
   10342:	460b      	mov	r3, r1
   10344:	4610      	mov	r0, r2
   10346:	4619      	mov	r1, r3
   10348:	a385      	add	r3, pc, #532	; (adr r3, 10560 <estimator_update_ir_estim+0x25c>)
   1034a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1034e:	f002 fef3 	bl	13138 <__aeabi_dcmpgt>
   10352:	4603      	mov	r3, r0
   10354:	2b00      	cmp	r3, #0
   10356:	d100      	bne.n	1035a <estimator_update_ir_estim+0x56>
   10358:	e219      	b.n	1078e <estimator_update_ir_estim+0x48a>
      float phi = (estimator_hspeed_dir - last_hspeed_dir); 
   1035a:	f64b 4350 	movw	r3, #48208	; 0xbc50
   1035e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10362:	681a      	ldr	r2, [r3, #0]
   10364:	f64b 4368 	movw	r3, #48232	; 0xbc68
   10368:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1036c:	681b      	ldr	r3, [r3, #0]
   1036e:	4610      	mov	r0, r2
   10370:	4619      	mov	r1, r3
   10372:	f002 ff87 	bl	13284 <__aeabi_fsub>
   10376:	4603      	mov	r3, r0
   10378:	60fb      	str	r3, [r7, #12]
      NORM_RAD_ANGLE(phi);
   1037a:	e013      	b.n	103a4 <estimator_update_ir_estim+0xa0>
   1037c:	68f8      	ldr	r0, [r7, #12]
   1037e:	f002 fbf7 	bl	12b70 <__aeabi_f2d>
   10382:	4602      	mov	r2, r0
   10384:	460b      	mov	r3, r1
   10386:	4610      	mov	r0, r2
   10388:	4619      	mov	r1, r3
   1038a:	a377      	add	r3, pc, #476	; (adr r3, 10568 <estimator_update_ir_estim+0x264>)
   1038c:	e9d3 2300 	ldrd	r2, r3, [r3]
   10390:	f002 fa8e 	bl	128b0 <__aeabi_dsub>
   10394:	4602      	mov	r2, r0
   10396:	460b      	mov	r3, r1
   10398:	4610      	mov	r0, r2
   1039a:	4619      	mov	r1, r3
   1039c:	f002 ff1e 	bl	131dc <__aeabi_d2f>
   103a0:	4603      	mov	r3, r0
   103a2:	60fb      	str	r3, [r7, #12]
   103a4:	68f8      	ldr	r0, [r7, #12]
   103a6:	f002 fbe3 	bl	12b70 <__aeabi_f2d>
   103aa:	4602      	mov	r2, r0
   103ac:	460b      	mov	r3, r1
   103ae:	4610      	mov	r0, r2
   103b0:	4619      	mov	r1, r3
   103b2:	a36f      	add	r3, pc, #444	; (adr r3, 10570 <estimator_update_ir_estim+0x26c>)
   103b4:	e9d3 2300 	ldrd	r2, r3, [r3]
   103b8:	f002 febe 	bl	13138 <__aeabi_dcmpgt>
   103bc:	4603      	mov	r3, r0
   103be:	2b00      	cmp	r3, #0
   103c0:	d1dc      	bne.n	1037c <estimator_update_ir_estim+0x78>
   103c2:	e013      	b.n	103ec <estimator_update_ir_estim+0xe8>
   103c4:	68f8      	ldr	r0, [r7, #12]
   103c6:	f002 fbd3 	bl	12b70 <__aeabi_f2d>
   103ca:	4602      	mov	r2, r0
   103cc:	460b      	mov	r3, r1
   103ce:	4610      	mov	r0, r2
   103d0:	4619      	mov	r1, r3
   103d2:	a365      	add	r3, pc, #404	; (adr r3, 10568 <estimator_update_ir_estim+0x264>)
   103d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   103d8:	f002 fa6c 	bl	128b4 <__adddf3>
   103dc:	4602      	mov	r2, r0
   103de:	460b      	mov	r3, r1
   103e0:	4610      	mov	r0, r2
   103e2:	4619      	mov	r1, r3
   103e4:	f002 fefa 	bl	131dc <__aeabi_d2f>
   103e8:	4603      	mov	r3, r0
   103ea:	60fb      	str	r3, [r7, #12]
   103ec:	68f8      	ldr	r0, [r7, #12]
   103ee:	f002 fbbf 	bl	12b70 <__aeabi_f2d>
   103f2:	4602      	mov	r2, r0
   103f4:	460b      	mov	r3, r1
   103f6:	4610      	mov	r0, r2
   103f8:	4619      	mov	r1, r3
   103fa:	a35f      	add	r3, pc, #380	; (adr r3, 10578 <estimator_update_ir_estim+0x274>)
   103fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   10400:	f002 fe7c 	bl	130fc <__aeabi_dcmplt>
   10404:	4603      	mov	r3, r0
   10406:	2b00      	cmp	r3, #0
   10408:	d1dc      	bne.n	103c4 <estimator_update_ir_estim+0xc0>
      phi = phi/dt*NOMINAL_AIRSPEED/g; /* tan linearized */
   1040a:	68f8      	ldr	r0, [r7, #12]
   1040c:	68b9      	ldr	r1, [r7, #8]
   1040e:	f003 f8f7 	bl	13600 <__aeabi_fdiv>
   10412:	4603      	mov	r3, r0
   10414:	4618      	mov	r0, r3
   10416:	f002 fbab 	bl	12b70 <__aeabi_f2d>
   1041a:	4602      	mov	r2, r0
   1041c:	460b      	mov	r3, r1
   1041e:	4610      	mov	r0, r2
   10420:	4619      	mov	r1, r3
   10422:	f04f 0200 	mov.w	r2, #0
   10426:	f04f 0300 	mov.w	r3, #0
   1042a:	f2c4 0324 	movt	r3, #16420	; 0x4024
   1042e:	f002 fbf3 	bl	12c18 <__aeabi_dmul>
   10432:	4602      	mov	r2, r0
   10434:	460b      	mov	r3, r1
   10436:	4610      	mov	r0, r2
   10438:	4619      	mov	r1, r3
   1043a:	a351      	add	r3, pc, #324	; (adr r3, 10580 <estimator_update_ir_estim+0x27c>)
   1043c:	e9d3 2300 	ldrd	r2, r3, [r3]
   10440:	f002 fd14 	bl	12e6c <__aeabi_ddiv>
   10444:	4602      	mov	r2, r0
   10446:	460b      	mov	r3, r1
   10448:	4610      	mov	r0, r2
   1044a:	4619      	mov	r1, r3
   1044c:	f002 fec6 	bl	131dc <__aeabi_d2f>
   10450:	4603      	mov	r3, r0
   10452:	60fb      	str	r3, [r7, #12]
      NORM_RAD_ANGLE(phi);
   10454:	e013      	b.n	1047e <estimator_update_ir_estim+0x17a>
   10456:	68f8      	ldr	r0, [r7, #12]
   10458:	f002 fb8a 	bl	12b70 <__aeabi_f2d>
   1045c:	4602      	mov	r2, r0
   1045e:	460b      	mov	r3, r1
   10460:	4610      	mov	r0, r2
   10462:	4619      	mov	r1, r3
   10464:	a340      	add	r3, pc, #256	; (adr r3, 10568 <estimator_update_ir_estim+0x264>)
   10466:	e9d3 2300 	ldrd	r2, r3, [r3]
   1046a:	f002 fa21 	bl	128b0 <__aeabi_dsub>
   1046e:	4602      	mov	r2, r0
   10470:	460b      	mov	r3, r1
   10472:	4610      	mov	r0, r2
   10474:	4619      	mov	r1, r3
   10476:	f002 feb1 	bl	131dc <__aeabi_d2f>
   1047a:	4603      	mov	r3, r0
   1047c:	60fb      	str	r3, [r7, #12]
   1047e:	68f8      	ldr	r0, [r7, #12]
   10480:	f002 fb76 	bl	12b70 <__aeabi_f2d>
   10484:	4602      	mov	r2, r0
   10486:	460b      	mov	r3, r1
   10488:	4610      	mov	r0, r2
   1048a:	4619      	mov	r1, r3
   1048c:	a338      	add	r3, pc, #224	; (adr r3, 10570 <estimator_update_ir_estim+0x26c>)
   1048e:	e9d3 2300 	ldrd	r2, r3, [r3]
   10492:	f002 fe51 	bl	13138 <__aeabi_dcmpgt>
   10496:	4603      	mov	r3, r0
   10498:	2b00      	cmp	r3, #0
   1049a:	d1dc      	bne.n	10456 <estimator_update_ir_estim+0x152>
   1049c:	e013      	b.n	104c6 <estimator_update_ir_estim+0x1c2>
   1049e:	68f8      	ldr	r0, [r7, #12]
   104a0:	f002 fb66 	bl	12b70 <__aeabi_f2d>
   104a4:	4602      	mov	r2, r0
   104a6:	460b      	mov	r3, r1
   104a8:	4610      	mov	r0, r2
   104aa:	4619      	mov	r1, r3
   104ac:	a32e      	add	r3, pc, #184	; (adr r3, 10568 <estimator_update_ir_estim+0x264>)
   104ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   104b2:	f002 f9ff 	bl	128b4 <__adddf3>
   104b6:	4602      	mov	r2, r0
   104b8:	460b      	mov	r3, r1
   104ba:	4610      	mov	r0, r2
   104bc:	4619      	mov	r1, r3
   104be:	f002 fe8d 	bl	131dc <__aeabi_d2f>
   104c2:	4603      	mov	r3, r0
   104c4:	60fb      	str	r3, [r7, #12]
   104c6:	68f8      	ldr	r0, [r7, #12]
   104c8:	f002 fb52 	bl	12b70 <__aeabi_f2d>
   104cc:	4602      	mov	r2, r0
   104ce:	460b      	mov	r3, r1
   104d0:	4610      	mov	r0, r2
   104d2:	4619      	mov	r1, r3
   104d4:	a328      	add	r3, pc, #160	; (adr r3, 10578 <estimator_update_ir_estim+0x274>)
   104d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   104da:	f002 fe0f 	bl	130fc <__aeabi_dcmplt>
   104de:	4603      	mov	r3, r0
   104e0:	2b00      	cmp	r3, #0
   104e2:	d1dc      	bne.n	1049e <estimator_update_ir_estim+0x19a>
      estimator_ir = (float)ir_roll;
   104e4:	f64b 1300 	movw	r3, #47360	; 0xb900
   104e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104ec:	881b      	ldrh	r3, [r3, #0]
   104ee:	b21b      	sxth	r3, r3
   104f0:	4618      	mov	r0, r3
   104f2:	f002 ff7d 	bl	133f0 <__aeabi_i2f>
   104f6:	4602      	mov	r2, r0
   104f8:	f64b 4358 	movw	r3, #48216	; 0xbc58
   104fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10500:	601a      	str	r2, [r3, #0]
      estimator_rad = phi;
   10502:	f64b 435c 	movw	r3, #48220	; 0xbc5c
   10506:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1050a:	68fa      	ldr	r2, [r7, #12]
   1050c:	601a      	str	r2, [r3, #0]
      absphi = fabs(phi);
   1050e:	68f8      	ldr	r0, [r7, #12]
   10510:	f04f 0100 	mov.w	r1, #0
   10514:	f003 f95e 	bl	137d4 <__aeabi_fcmplt>
   10518:	4603      	mov	r3, r0
   1051a:	2b00      	cmp	r3, #0
   1051c:	d003      	beq.n	10526 <estimator_update_ir_estim+0x222>
   1051e:	68fb      	ldr	r3, [r7, #12]
   10520:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
   10524:	e000      	b.n	10528 <estimator_update_ir_estim+0x224>
   10526:	68fb      	ldr	r3, [r7, #12]
   10528:	607b      	str	r3, [r7, #4]
      if (absphi < 1.0 && absphi > 0.05 && (- ir_contrast/2 < ir_roll && ir_roll < ir_contrast/2)) {
   1052a:	6878      	ldr	r0, [r7, #4]
   1052c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   10530:	f003 f950 	bl	137d4 <__aeabi_fcmplt>
   10534:	4603      	mov	r3, r0
   10536:	2b00      	cmp	r3, #0
   10538:	d100      	bne.n	1053c <estimator_update_ir_estim+0x238>
   1053a:	e128      	b.n	1078e <estimator_update_ir_estim+0x48a>
   1053c:	6878      	ldr	r0, [r7, #4]
   1053e:	f002 fb17 	bl	12b70 <__aeabi_f2d>
   10542:	4602      	mov	r2, r0
   10544:	460b      	mov	r3, r1
   10546:	4610      	mov	r0, r2
   10548:	4619      	mov	r1, r3
   1054a:	a30f      	add	r3, pc, #60	; (adr r3, 10588 <estimator_update_ir_estim+0x284>)
   1054c:	e9d3 2300 	ldrd	r2, r3, [r3]
   10550:	f002 fdf2 	bl	13138 <__aeabi_dcmpgt>
   10554:	4603      	mov	r3, r0
   10556:	2b00      	cmp	r3, #0
   10558:	d11a      	bne.n	10590 <estimator_update_ir_estim+0x28c>
   1055a:	e118      	b.n	1078e <estimator_update_ir_estim+0x48a>
   1055c:	f3af 8000 	nop.w
   10560:	9999999a 	.word	0x9999999a
   10564:	3fb99999 	.word	0x3fb99999
   10568:	54442d18 	.word	0x54442d18
   1056c:	401921fb 	.word	0x401921fb
   10570:	54442d18 	.word	0x54442d18
   10574:	400921fb 	.word	0x400921fb
   10578:	54442d18 	.word	0x54442d18
   1057c:	c00921fb 	.word	0xc00921fb
   10580:	51eb851f 	.word	0x51eb851f
   10584:	40239eb8 	.word	0x40239eb8
   10588:	9999999a 	.word	0x9999999a
   1058c:	3fa99999 	.word	0x3fa99999
   10590:	f240 133c 	movw	r3, #316	; 0x13c
   10594:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10598:	881b      	ldrh	r3, [r3, #0]
   1059a:	b21b      	sxth	r3, r3
   1059c:	425b      	negs	r3, r3
   1059e:	0fda      	lsrs	r2, r3, #31
   105a0:	4413      	add	r3, r2
   105a2:	105b      	asrs	r3, r3, #1
   105a4:	461a      	mov	r2, r3
   105a6:	f64b 1300 	movw	r3, #47360	; 0xb900
   105aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105ae:	881b      	ldrh	r3, [r3, #0]
   105b0:	b21b      	sxth	r3, r3
   105b2:	429a      	cmp	r2, r3
   105b4:	f280 8098 	bge.w	106e8 <estimator_update_ir_estim+0x3e4>
   105b8:	f240 133c 	movw	r3, #316	; 0x13c
   105bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105c0:	881b      	ldrh	r3, [r3, #0]
   105c2:	b21b      	sxth	r3, r3
   105c4:	0fda      	lsrs	r2, r3, #31
   105c6:	4413      	add	r3, r2
   105c8:	105b      	asrs	r3, r3, #1
   105ca:	b29a      	uxth	r2, r3
   105cc:	f64b 1300 	movw	r3, #47360	; 0xb900
   105d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105d4:	881b      	ldrh	r3, [r3, #0]
   105d6:	b212      	sxth	r2, r2
   105d8:	b21b      	sxth	r3, r3
   105da:	429a      	cmp	r2, r3
   105dc:	f340 8084 	ble.w	106e8 <estimator_update_ir_estim+0x3e4>
	sum_xy = estimator_rad * estimator_ir + RHO * sum_xy;
   105e0:	f64b 435c 	movw	r3, #48220	; 0xbc5c
   105e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105e8:	681a      	ldr	r2, [r3, #0]
   105ea:	f64b 4358 	movw	r3, #48216	; 0xbc58
   105ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105f2:	681b      	ldr	r3, [r3, #0]
   105f4:	4610      	mov	r0, r2
   105f6:	4619      	mov	r1, r3
   105f8:	f002 ff4e 	bl	13498 <__aeabi_fmul>
   105fc:	4603      	mov	r3, r0
   105fe:	4618      	mov	r0, r3
   10600:	f002 fab6 	bl	12b70 <__aeabi_f2d>
   10604:	4604      	mov	r4, r0
   10606:	460d      	mov	r5, r1
   10608:	f64b 436c 	movw	r3, #48236	; 0xbc6c
   1060c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10610:	681b      	ldr	r3, [r3, #0]
   10612:	4618      	mov	r0, r3
   10614:	f002 faac 	bl	12b70 <__aeabi_f2d>
   10618:	4602      	mov	r2, r0
   1061a:	460b      	mov	r3, r1
   1061c:	4610      	mov	r0, r2
   1061e:	4619      	mov	r1, r3
   10620:	a367      	add	r3, pc, #412	; (adr r3, 107c0 <estimator_update_ir_estim+0x4bc>)
   10622:	e9d3 2300 	ldrd	r2, r3, [r3]
   10626:	f002 faf7 	bl	12c18 <__aeabi_dmul>
   1062a:	4602      	mov	r2, r0
   1062c:	460b      	mov	r3, r1
   1062e:	4620      	mov	r0, r4
   10630:	4629      	mov	r1, r5
   10632:	f002 f93f 	bl	128b4 <__adddf3>
   10636:	4602      	mov	r2, r0
   10638:	460b      	mov	r3, r1
   1063a:	4610      	mov	r0, r2
   1063c:	4619      	mov	r1, r3
   1063e:	f002 fdcd 	bl	131dc <__aeabi_d2f>
   10642:	4602      	mov	r2, r0
   10644:	f64b 436c 	movw	r3, #48236	; 0xbc6c
   10648:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1064c:	601a      	str	r2, [r3, #0]
	sum_xx = estimator_ir * estimator_ir + RHO * sum_xx;
   1064e:	f64b 4358 	movw	r3, #48216	; 0xbc58
   10652:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10656:	681a      	ldr	r2, [r3, #0]
   10658:	f64b 4358 	movw	r3, #48216	; 0xbc58
   1065c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10660:	681b      	ldr	r3, [r3, #0]
   10662:	4610      	mov	r0, r2
   10664:	4619      	mov	r1, r3
   10666:	f002 ff17 	bl	13498 <__aeabi_fmul>
   1066a:	4603      	mov	r3, r0
   1066c:	4618      	mov	r0, r3
   1066e:	f002 fa7f 	bl	12b70 <__aeabi_f2d>
   10672:	4604      	mov	r4, r0
   10674:	460d      	mov	r5, r1
   10676:	f64b 4370 	movw	r3, #48240	; 0xbc70
   1067a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1067e:	681b      	ldr	r3, [r3, #0]
   10680:	4618      	mov	r0, r3
   10682:	f002 fa75 	bl	12b70 <__aeabi_f2d>
   10686:	4602      	mov	r2, r0
   10688:	460b      	mov	r3, r1
   1068a:	4610      	mov	r0, r2
   1068c:	4619      	mov	r1, r3
   1068e:	a34c      	add	r3, pc, #304	; (adr r3, 107c0 <estimator_update_ir_estim+0x4bc>)
   10690:	e9d3 2300 	ldrd	r2, r3, [r3]
   10694:	f002 fac0 	bl	12c18 <__aeabi_dmul>
   10698:	4602      	mov	r2, r0
   1069a:	460b      	mov	r3, r1
   1069c:	4620      	mov	r0, r4
   1069e:	4629      	mov	r1, r5
   106a0:	f002 f908 	bl	128b4 <__adddf3>
   106a4:	4602      	mov	r2, r0
   106a6:	460b      	mov	r3, r1
   106a8:	4610      	mov	r0, r2
   106aa:	4619      	mov	r1, r3
   106ac:	f002 fd96 	bl	131dc <__aeabi_d2f>
   106b0:	4602      	mov	r2, r0
   106b2:	f64b 4370 	movw	r3, #48240	; 0xbc70
   106b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106ba:	601a      	str	r2, [r3, #0]
	else if (result > IR_RAD_OF_IR_MAX_VALUE)
	  estimator_rad_of_ir = IR_RAD_OF_IR_MAX_VALUE;
	else
	  estimator_rad_of_ir = result;
#else
	  estimator_rad_of_ir = sum_xy / sum_xx;
   106bc:	f64b 436c 	movw	r3, #48236	; 0xbc6c
   106c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106c4:	681a      	ldr	r2, [r3, #0]
   106c6:	f64b 4370 	movw	r3, #48240	; 0xbc70
   106ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106ce:	681b      	ldr	r3, [r3, #0]
   106d0:	4610      	mov	r0, r2
   106d2:	4619      	mov	r1, r3
   106d4:	f002 ff94 	bl	13600 <__aeabi_fdiv>
   106d8:	4603      	mov	r3, r0
   106da:	461a      	mov	r2, r3
   106dc:	f64b 4354 	movw	r3, #48212	; 0xbc54
   106e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106e4:	601a      	str	r2, [r3, #0]
   106e6:	e052      	b.n	1078e <estimator_update_ir_estim+0x48a>
   106e8:	e051      	b.n	1078e <estimator_update_ir_estim+0x48a>
#endif
      }
    } 
  } else {
    initialized = TRUE;
   106ea:	f64b 4360 	movw	r3, #48224	; 0xbc60
   106ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106f2:	2201      	movs	r2, #1
   106f4:	701a      	strb	r2, [r3, #0]
    init_ir2 = ir_contrast;
   106f6:	f240 133c 	movw	r3, #316	; 0x13c
   106fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106fe:	881b      	ldrh	r3, [r3, #0]
   10700:	b21b      	sxth	r3, r3
   10702:	4618      	mov	r0, r3
   10704:	f002 fe74 	bl	133f0 <__aeabi_i2f>
   10708:	4603      	mov	r3, r0
   1070a:	603b      	str	r3, [r7, #0]
    init_ir2 = init_ir2*init_ir2;
   1070c:	6838      	ldr	r0, [r7, #0]
   1070e:	6839      	ldr	r1, [r7, #0]
   10710:	f002 fec2 	bl	13498 <__aeabi_fmul>
   10714:	4603      	mov	r3, r0
   10716:	603b      	str	r3, [r7, #0]
    sum_xy = INIT_WEIGHT * estimator_rad_of_ir * init_ir2;
   10718:	f64b 4354 	movw	r3, #48212	; 0xbc54
   1071c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10720:	681b      	ldr	r3, [r3, #0]
   10722:	4618      	mov	r0, r3
   10724:	f002 fa24 	bl	12b70 <__aeabi_f2d>
   10728:	4602      	mov	r2, r0
   1072a:	460b      	mov	r3, r1
   1072c:	4610      	mov	r0, r2
   1072e:	4619      	mov	r1, r3
   10730:	f04f 0200 	mov.w	r2, #0
   10734:	f04f 0300 	mov.w	r3, #0
   10738:	f2c4 0359 	movt	r3, #16473	; 0x4059
   1073c:	f002 fa6c 	bl	12c18 <__aeabi_dmul>
   10740:	4602      	mov	r2, r0
   10742:	460b      	mov	r3, r1
   10744:	4614      	mov	r4, r2
   10746:	461d      	mov	r5, r3
   10748:	6838      	ldr	r0, [r7, #0]
   1074a:	f002 fa11 	bl	12b70 <__aeabi_f2d>
   1074e:	4602      	mov	r2, r0
   10750:	460b      	mov	r3, r1
   10752:	4620      	mov	r0, r4
   10754:	4629      	mov	r1, r5
   10756:	f002 fa5f 	bl	12c18 <__aeabi_dmul>
   1075a:	4602      	mov	r2, r0
   1075c:	460b      	mov	r3, r1
   1075e:	4610      	mov	r0, r2
   10760:	4619      	mov	r1, r3
   10762:	f002 fd3b 	bl	131dc <__aeabi_d2f>
   10766:	4602      	mov	r2, r0
   10768:	f64b 436c 	movw	r3, #48236	; 0xbc6c
   1076c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10770:	601a      	str	r2, [r3, #0]
    sum_xx = INIT_WEIGHT * init_ir2;
   10772:	6838      	ldr	r0, [r7, #0]
   10774:	f04f 0100 	mov.w	r1, #0
   10778:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   1077c:	f002 fe8c 	bl	13498 <__aeabi_fmul>
   10780:	4603      	mov	r3, r0
   10782:	461a      	mov	r2, r3
   10784:	f64b 4370 	movw	r3, #48240	; 0xbc70
   10788:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1078c:	601a      	str	r2, [r3, #0]
  }

  last_hspeed_dir = estimator_hspeed_dir;
   1078e:	f64b 4350 	movw	r3, #48208	; 0xbc50
   10792:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10796:	681a      	ldr	r2, [r3, #0]
   10798:	f64b 4368 	movw	r3, #48232	; 0xbc68
   1079c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107a0:	601a      	str	r2, [r3, #0]
  last_t = gps_ftow;
   107a2:	f24b 73d0 	movw	r3, #47056	; 0xb7d0
   107a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107aa:	681a      	ldr	r2, [r3, #0]
   107ac:	f64b 4364 	movw	r3, #48228	; 0xbc64
   107b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107b4:	601a      	str	r2, [r3, #0]
}
   107b6:	3710      	adds	r7, #16
   107b8:	46bd      	mov	sp, r7
   107ba:	bdb0      	pop	{r4, r5, r7, pc}
   107bc:	f3af 8000 	nop.w
   107c0:	d916872b 	.word	0xd916872b
   107c4:	3feff7ce 	.word	0x3feff7ce

000107c8 <estimator_update_state_gps>:


void estimator_update_state_gps( void ) {
   107c8:	b580      	push	{r7, lr}
   107ca:	af00      	add	r7, sp, #0
  if (GPS_FIX_VALID(gps_mode)) {
   107cc:	f24b 73f4 	movw	r3, #47092	; 0xb7f4
   107d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107d4:	781b      	ldrb	r3, [r3, #0]
   107d6:	f003 0320 	and.w	r3, r3, #32
   107da:	2b00      	cmp	r3, #0
   107dc:	d044      	beq.n	10868 <estimator_update_state_gps+0xa0>
    EstimatorSetPos(gps_east, gps_north, gps_falt);
   107de:	f24b 73ec 	movw	r3, #47084	; 0xb7ec
   107e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107e6:	681a      	ldr	r2, [r3, #0]
   107e8:	f64b 4314 	movw	r3, #48148	; 0xbc14
   107ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107f0:	601a      	str	r2, [r3, #0]
   107f2:	f24b 73f0 	movw	r3, #47088	; 0xb7f0
   107f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107fa:	681a      	ldr	r2, [r3, #0]
   107fc:	f64b 4318 	movw	r3, #48152	; 0xbc18
   10800:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10804:	601a      	str	r2, [r3, #0]
   10806:	f24b 73d4 	movw	r3, #47060	; 0xb7d4
   1080a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1080e:	681a      	ldr	r2, [r3, #0]
   10810:	f64b 431c 	movw	r3, #48156	; 0xbc1c
   10814:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10818:	601a      	str	r2, [r3, #0]
    EstimatorSetSpeedPol(gps_fspeed, gps_fcourse, gps_fclimb);
   1081a:	f24b 73d8 	movw	r3, #47064	; 0xb7d8
   1081e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10822:	681a      	ldr	r2, [r3, #0]
   10824:	f64b 434c 	movw	r3, #48204	; 0xbc4c
   10828:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1082c:	601a      	str	r2, [r3, #0]
   1082e:	f24b 73e0 	movw	r3, #47072	; 0xb7e0
   10832:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10836:	681a      	ldr	r2, [r3, #0]
   10838:	f64b 4350 	movw	r3, #48208	; 0xbc50
   1083c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10840:	601a      	str	r2, [r3, #0]
   10842:	f24b 73dc 	movw	r3, #47068	; 0xb7dc
   10846:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1084a:	681a      	ldr	r2, [r3, #0]
   1084c:	f64b 4334 	movw	r3, #48180	; 0xbc34
   10850:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10854:	601a      	str	r2, [r3, #0]
    
    if (estimator_flight_time)
   10856:	f64b 4344 	movw	r3, #48196	; 0xbc44
   1085a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1085e:	881b      	ldrh	r3, [r3, #0]
   10860:	2b00      	cmp	r3, #0
   10862:	d001      	beq.n	10868 <estimator_update_state_gps+0xa0>
      estimator_update_ir_estim();
   10864:	f7ff fd4e 	bl	10304 <estimator_update_ir_estim>
  }
}
   10868:	bd80      	pop	{r7, pc}
   1086a:	bf00      	nop

0001086c <estimator_propagate_state>:

void estimator_propagate_state( void ) {
   1086c:	b480      	push	{r7}
   1086e:	af00      	add	r7, sp, #0
  
}
   10870:	46bd      	mov	sp, r7
   10872:	f85d 7b04 	ldr.w	r7, [sp], #4
   10876:	4770      	bx	lr

00010878 <inflight_calib>:
/* Please DO NOT EDIT */

#ifndef INFLIGHT_CALIB_H
#define INFLIGHT_CALIB_H 

void inflight_calib(bool_t mode_changed) {
   10878:	b5b0      	push	{r4, r5, r7, lr}
   1087a:	b082      	sub	sp, #8
   1087c:	af00      	add	r7, sp, #0
   1087e:	4603      	mov	r3, r0
   10880:	71fb      	strb	r3, [r7, #7]
  if (pprz_mode == PPRZ_MODE_AUTO1) {
   10882:	f24b 6344 	movw	r3, #46660	; 0xb644
   10886:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1088a:	781b      	ldrb	r3, [r3, #0]
   1088c:	2b01      	cmp	r3, #1
   1088e:	f040 80e0 	bne.w	10a52 <inflight_calib+0x1da>
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   10892:	f64b 4374 	movw	r3, #48244	; 0xbc74
   10896:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1089a:	781b      	ldrb	r3, [r3, #0]
   1089c:	2b02      	cmp	r3, #2
   1089e:	d168      	bne.n	10972 <inflight_calib+0xfa>
      static int16_t ir_pitch_neutral_init;
      if (mode_changed) {
   108a0:	79fb      	ldrb	r3, [r7, #7]
   108a2:	2b00      	cmp	r3, #0
   108a4:	d013      	beq.n	108ce <inflight_calib+0x56>
        ir_pitch_neutral_init = ir_pitch_neutral;
   108a6:	f240 1340 	movw	r3, #320	; 0x140
   108aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108ae:	881a      	ldrh	r2, [r3, #0]
   108b0:	f64b 437a 	movw	r3, #48250	; 0xbc7a
   108b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108b8:	801a      	strh	r2, [r3, #0]
        slider1_init = from_fbw.channels[RADIO_GAIN1];
   108ba:	f24b 7368 	movw	r3, #46952	; 0xb768
   108be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108c2:	895a      	ldrh	r2, [r3, #10]
   108c4:	f64b 4376 	movw	r3, #48246	; 0xbc76
   108c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108cc:	801a      	strh	r2, [r3, #0]
      }
      ir_pitch_neutral = ParamValInt16(ir_pitch_neutral_init, 60.000000, from_fbw.channels[RADIO_GAIN1], slider1_init);
   108ce:	f24b 7368 	movw	r3, #46952	; 0xb768
   108d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108d6:	895b      	ldrh	r3, [r3, #10]
   108d8:	b21a      	sxth	r2, r3
   108da:	f64b 4376 	movw	r3, #48246	; 0xbc76
   108de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108e2:	881b      	ldrh	r3, [r3, #0]
   108e4:	b21b      	sxth	r3, r3
   108e6:	1ad3      	subs	r3, r2, r3
   108e8:	4618      	mov	r0, r3
   108ea:	f002 fd81 	bl	133f0 <__aeabi_i2f>
   108ee:	4603      	mov	r3, r0
   108f0:	4618      	mov	r0, r3
   108f2:	f002 f93d 	bl	12b70 <__aeabi_f2d>
   108f6:	4602      	mov	r2, r0
   108f8:	460b      	mov	r3, r1
   108fa:	4610      	mov	r0, r2
   108fc:	4619      	mov	r1, r3
   108fe:	f04f 0200 	mov.w	r2, #0
   10902:	f04f 0300 	mov.w	r3, #0
   10906:	f2c4 034e 	movt	r3, #16462	; 0x404e
   1090a:	f002 f985 	bl	12c18 <__aeabi_dmul>
   1090e:	4602      	mov	r2, r0
   10910:	460b      	mov	r3, r1
   10912:	4610      	mov	r0, r2
   10914:	4619      	mov	r1, r3
   10916:	f04f 0200 	mov.w	r2, #0
   1091a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   1091e:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   10922:	f002 faa3 	bl	12e6c <__aeabi_ddiv>
   10926:	4602      	mov	r2, r0
   10928:	460b      	mov	r3, r1
   1092a:	4610      	mov	r0, r2
   1092c:	4619      	mov	r1, r3
   1092e:	f002 fc0d 	bl	1314c <__aeabi_d2iz>
   10932:	4603      	mov	r3, r0
   10934:	b29b      	uxth	r3, r3
   10936:	b29a      	uxth	r2, r3
   10938:	f64b 437a 	movw	r3, #48250	; 0xbc7a
   1093c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10940:	881b      	ldrh	r3, [r3, #0]
   10942:	b29b      	uxth	r3, r3
   10944:	4413      	add	r3, r2
   10946:	b29b      	uxth	r3, r3
   10948:	b29a      	uxth	r2, r3
   1094a:	f240 1340 	movw	r3, #320	; 0x140
   1094e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10952:	801a      	strh	r2, [r3, #0]
      slider_1_val = (float)ir_pitch_neutral;
   10954:	f240 1340 	movw	r3, #320	; 0x140
   10958:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1095c:	881b      	ldrh	r3, [r3, #0]
   1095e:	b21b      	sxth	r3, r3
   10960:	4618      	mov	r0, r3
   10962:	f002 fd45 	bl	133f0 <__aeabi_i2f>
   10966:	4602      	mov	r2, r0
   10968:	f24b 6350 	movw	r3, #46672	; 0xb650
   1096c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10970:	601a      	str	r2, [r3, #0]
    }
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   10972:	f64b 4374 	movw	r3, #48244	; 0xbc74
   10976:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1097a:	781b      	ldrb	r3, [r3, #0]
   1097c:	2b02      	cmp	r3, #2
   1097e:	d168      	bne.n	10a52 <inflight_calib+0x1da>
      static int16_t ir_roll_neutral_init;
      if (mode_changed) {
   10980:	79fb      	ldrb	r3, [r7, #7]
   10982:	2b00      	cmp	r3, #0
   10984:	d013      	beq.n	109ae <inflight_calib+0x136>
        ir_roll_neutral_init = ir_roll_neutral;
   10986:	f240 133e 	movw	r3, #318	; 0x13e
   1098a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1098e:	881a      	ldrh	r2, [r3, #0]
   10990:	f64b 437c 	movw	r3, #48252	; 0xbc7c
   10994:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10998:	801a      	strh	r2, [r3, #0]
        slider2_init = from_fbw.channels[RADIO_GAIN2];
   1099a:	f24b 7368 	movw	r3, #46952	; 0xb768
   1099e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109a2:	899a      	ldrh	r2, [r3, #12]
   109a4:	f64b 4378 	movw	r3, #48248	; 0xbc78
   109a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109ac:	801a      	strh	r2, [r3, #0]
      }
      ir_roll_neutral = ParamValInt16(ir_roll_neutral_init, -60.000000, from_fbw.channels[RADIO_GAIN2], slider2_init);
   109ae:	f24b 7368 	movw	r3, #46952	; 0xb768
   109b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109b6:	899b      	ldrh	r3, [r3, #12]
   109b8:	b21a      	sxth	r2, r3
   109ba:	f64b 4378 	movw	r3, #48248	; 0xbc78
   109be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109c2:	881b      	ldrh	r3, [r3, #0]
   109c4:	b21b      	sxth	r3, r3
   109c6:	1ad3      	subs	r3, r2, r3
   109c8:	4618      	mov	r0, r3
   109ca:	f002 fd11 	bl	133f0 <__aeabi_i2f>
   109ce:	4603      	mov	r3, r0
   109d0:	4618      	mov	r0, r3
   109d2:	f002 f8cd 	bl	12b70 <__aeabi_f2d>
   109d6:	4602      	mov	r2, r0
   109d8:	460b      	mov	r3, r1
   109da:	4610      	mov	r0, r2
   109dc:	4619      	mov	r1, r3
   109de:	f04f 0200 	mov.w	r2, #0
   109e2:	f04f 0300 	mov.w	r3, #0
   109e6:	f2cc 034e 	movt	r3, #49230	; 0xc04e
   109ea:	f002 f915 	bl	12c18 <__aeabi_dmul>
   109ee:	4602      	mov	r2, r0
   109f0:	460b      	mov	r3, r1
   109f2:	4610      	mov	r0, r2
   109f4:	4619      	mov	r1, r3
   109f6:	f04f 0200 	mov.w	r2, #0
   109fa:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   109fe:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   10a02:	f002 fa33 	bl	12e6c <__aeabi_ddiv>
   10a06:	4602      	mov	r2, r0
   10a08:	460b      	mov	r3, r1
   10a0a:	4610      	mov	r0, r2
   10a0c:	4619      	mov	r1, r3
   10a0e:	f002 fb9d 	bl	1314c <__aeabi_d2iz>
   10a12:	4603      	mov	r3, r0
   10a14:	b29b      	uxth	r3, r3
   10a16:	b29a      	uxth	r2, r3
   10a18:	f64b 437c 	movw	r3, #48252	; 0xbc7c
   10a1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a20:	881b      	ldrh	r3, [r3, #0]
   10a22:	b29b      	uxth	r3, r3
   10a24:	4413      	add	r3, r2
   10a26:	b29b      	uxth	r3, r3
   10a28:	b29a      	uxth	r2, r3
   10a2a:	f240 133e 	movw	r3, #318	; 0x13e
   10a2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a32:	801a      	strh	r2, [r3, #0]
      slider_2_val = (float)ir_roll_neutral;
   10a34:	f240 133e 	movw	r3, #318	; 0x13e
   10a38:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a3c:	881b      	ldrh	r3, [r3, #0]
   10a3e:	b21b      	sxth	r3, r3
   10a40:	4618      	mov	r0, r3
   10a42:	f002 fcd5 	bl	133f0 <__aeabi_i2f>
   10a46:	4602      	mov	r2, r0
   10a48:	f24b 6354 	movw	r3, #46676	; 0xb654
   10a4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a50:	601a      	str	r2, [r3, #0]
    }
  }
  if (pprz_mode == PPRZ_MODE_AUTO2) {
   10a52:	f24b 6344 	movw	r3, #46660	; 0xb644
   10a56:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a5a:	781b      	ldrb	r3, [r3, #0]
   10a5c:	2b02      	cmp	r3, #2
   10a5e:	f040 80da 	bne.w	10c16 <inflight_calib+0x39e>
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   10a62:	f64b 4374 	movw	r3, #48244	; 0xbc74
   10a66:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a6a:	781b      	ldrb	r3, [r3, #0]
   10a6c:	2b02      	cmp	r3, #2
   10a6e:	d165      	bne.n	10b3c <inflight_calib+0x2c4>
      static float course_pgain_init;
      if (mode_changed) {
   10a70:	79fb      	ldrb	r3, [r7, #7]
   10a72:	2b00      	cmp	r3, #0
   10a74:	d013      	beq.n	10a9e <inflight_calib+0x226>
        course_pgain_init = course_pgain;
   10a76:	f240 1354 	movw	r3, #340	; 0x154
   10a7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a7e:	681a      	ldr	r2, [r3, #0]
   10a80:	f64b 4380 	movw	r3, #48256	; 0xbc80
   10a84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a88:	601a      	str	r2, [r3, #0]
        slider1_init = from_fbw.channels[RADIO_GAIN1];
   10a8a:	f24b 7368 	movw	r3, #46952	; 0xb768
   10a8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a92:	895a      	ldrh	r2, [r3, #10]
   10a94:	f64b 4376 	movw	r3, #48246	; 0xbc76
   10a98:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a9c:	801a      	strh	r2, [r3, #0]
      }
      course_pgain = ParamValFloat(course_pgain_init, 0.100000, from_fbw.channels[RADIO_GAIN1], slider1_init);
   10a9e:	f64b 4380 	movw	r3, #48256	; 0xbc80
   10aa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10aa6:	681b      	ldr	r3, [r3, #0]
   10aa8:	4618      	mov	r0, r3
   10aaa:	f002 f861 	bl	12b70 <__aeabi_f2d>
   10aae:	4604      	mov	r4, r0
   10ab0:	460d      	mov	r5, r1
   10ab2:	f24b 7368 	movw	r3, #46952	; 0xb768
   10ab6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10aba:	895b      	ldrh	r3, [r3, #10]
   10abc:	b21a      	sxth	r2, r3
   10abe:	f64b 4376 	movw	r3, #48246	; 0xbc76
   10ac2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ac6:	881b      	ldrh	r3, [r3, #0]
   10ac8:	b21b      	sxth	r3, r3
   10aca:	1ad3      	subs	r3, r2, r3
   10acc:	4618      	mov	r0, r3
   10ace:	f002 fc8f 	bl	133f0 <__aeabi_i2f>
   10ad2:	4603      	mov	r3, r0
   10ad4:	4618      	mov	r0, r3
   10ad6:	f002 f84b 	bl	12b70 <__aeabi_f2d>
   10ada:	4602      	mov	r2, r0
   10adc:	460b      	mov	r3, r1
   10ade:	4610      	mov	r0, r2
   10ae0:	4619      	mov	r1, r3
   10ae2:	a34f      	add	r3, pc, #316	; (adr r3, 10c20 <inflight_calib+0x3a8>)
   10ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
   10ae8:	f002 f896 	bl	12c18 <__aeabi_dmul>
   10aec:	4602      	mov	r2, r0
   10aee:	460b      	mov	r3, r1
   10af0:	4610      	mov	r0, r2
   10af2:	4619      	mov	r1, r3
   10af4:	f04f 0200 	mov.w	r2, #0
   10af8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   10afc:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   10b00:	f002 f9b4 	bl	12e6c <__aeabi_ddiv>
   10b04:	4602      	mov	r2, r0
   10b06:	460b      	mov	r3, r1
   10b08:	4620      	mov	r0, r4
   10b0a:	4629      	mov	r1, r5
   10b0c:	f001 fed2 	bl	128b4 <__adddf3>
   10b10:	4602      	mov	r2, r0
   10b12:	460b      	mov	r3, r1
   10b14:	4610      	mov	r0, r2
   10b16:	4619      	mov	r1, r3
   10b18:	f002 fb60 	bl	131dc <__aeabi_d2f>
   10b1c:	4602      	mov	r2, r0
   10b1e:	f240 1354 	movw	r3, #340	; 0x154
   10b22:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b26:	601a      	str	r2, [r3, #0]
      slider_1_val = (float)course_pgain;
   10b28:	f240 1354 	movw	r3, #340	; 0x154
   10b2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b30:	681a      	ldr	r2, [r3, #0]
   10b32:	f24b 6350 	movw	r3, #46672	; 0xb650
   10b36:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b3a:	601a      	str	r2, [r3, #0]
    }
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   10b3c:	f64b 4374 	movw	r3, #48244	; 0xbc74
   10b40:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b44:	781b      	ldrb	r3, [r3, #0]
   10b46:	2b02      	cmp	r3, #2
   10b48:	d165      	bne.n	10c16 <inflight_calib+0x39e>
      static float max_roll_init;
      if (mode_changed) {
   10b4a:	79fb      	ldrb	r3, [r7, #7]
   10b4c:	2b00      	cmp	r3, #0
   10b4e:	d013      	beq.n	10b78 <inflight_calib+0x300>
        max_roll_init = max_roll;
   10b50:	f240 1358 	movw	r3, #344	; 0x158
   10b54:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b58:	681a      	ldr	r2, [r3, #0]
   10b5a:	f64b 4384 	movw	r3, #48260	; 0xbc84
   10b5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b62:	601a      	str	r2, [r3, #0]
        slider2_init = from_fbw.channels[RADIO_GAIN2];
   10b64:	f24b 7368 	movw	r3, #46952	; 0xb768
   10b68:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b6c:	899a      	ldrh	r2, [r3, #12]
   10b6e:	f64b 4378 	movw	r3, #48248	; 0xbc78
   10b72:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b76:	801a      	strh	r2, [r3, #0]
      }
      max_roll = ParamValFloat(max_roll_init, -0.200000, from_fbw.channels[RADIO_GAIN2], slider2_init);
   10b78:	f64b 4384 	movw	r3, #48260	; 0xbc84
   10b7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b80:	681b      	ldr	r3, [r3, #0]
   10b82:	4618      	mov	r0, r3
   10b84:	f001 fff4 	bl	12b70 <__aeabi_f2d>
   10b88:	4604      	mov	r4, r0
   10b8a:	460d      	mov	r5, r1
   10b8c:	f24b 7368 	movw	r3, #46952	; 0xb768
   10b90:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b94:	899b      	ldrh	r3, [r3, #12]
   10b96:	b21a      	sxth	r2, r3
   10b98:	f64b 4378 	movw	r3, #48248	; 0xbc78
   10b9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ba0:	881b      	ldrh	r3, [r3, #0]
   10ba2:	b21b      	sxth	r3, r3
   10ba4:	1ad3      	subs	r3, r2, r3
   10ba6:	4618      	mov	r0, r3
   10ba8:	f002 fc22 	bl	133f0 <__aeabi_i2f>
   10bac:	4603      	mov	r3, r0
   10bae:	4618      	mov	r0, r3
   10bb0:	f001 ffde 	bl	12b70 <__aeabi_f2d>
   10bb4:	4602      	mov	r2, r0
   10bb6:	460b      	mov	r3, r1
   10bb8:	4610      	mov	r0, r2
   10bba:	4619      	mov	r1, r3
   10bbc:	a31a      	add	r3, pc, #104	; (adr r3, 10c28 <inflight_calib+0x3b0>)
   10bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
   10bc2:	f002 f829 	bl	12c18 <__aeabi_dmul>
   10bc6:	4602      	mov	r2, r0
   10bc8:	460b      	mov	r3, r1
   10bca:	4610      	mov	r0, r2
   10bcc:	4619      	mov	r1, r3
   10bce:	f04f 0200 	mov.w	r2, #0
   10bd2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   10bd6:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   10bda:	f002 f947 	bl	12e6c <__aeabi_ddiv>
   10bde:	4602      	mov	r2, r0
   10be0:	460b      	mov	r3, r1
   10be2:	4620      	mov	r0, r4
   10be4:	4629      	mov	r1, r5
   10be6:	f001 fe65 	bl	128b4 <__adddf3>
   10bea:	4602      	mov	r2, r0
   10bec:	460b      	mov	r3, r1
   10bee:	4610      	mov	r0, r2
   10bf0:	4619      	mov	r1, r3
   10bf2:	f002 faf3 	bl	131dc <__aeabi_d2f>
   10bf6:	4602      	mov	r2, r0
   10bf8:	f240 1358 	movw	r3, #344	; 0x158
   10bfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c00:	601a      	str	r2, [r3, #0]
      slider_2_val = (float)max_roll;
   10c02:	f240 1358 	movw	r3, #344	; 0x158
   10c06:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c0a:	681a      	ldr	r2, [r3, #0]
   10c0c:	f24b 6354 	movw	r3, #46676	; 0xb654
   10c10:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c14:	601a      	str	r2, [r3, #0]
    }
  }
}
   10c16:	3708      	adds	r7, #8
   10c18:	46bd      	mov	sp, r7
   10c1a:	bdb0      	pop	{r4, r5, r7, pc}
   10c1c:	f3af 8000 	nop.w
   10c20:	9999999a 	.word	0x9999999a
   10c24:	3fb99999 	.word	0x3fb99999
   10c28:	9999999a 	.word	0x9999999a
   10c2c:	bfc99999 	.word	0xbfc99999

00010c30 <pp_atan2>:
 *
 */
#include <math.h>

double pp_atan2(double x, double y)
{
   10c30:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
   10c34:	b08e      	sub	sp, #56	; 0x38
   10c36:	af00      	add	r7, sp, #0
   10c38:	e9c7 0102 	strd	r0, r1, [r7, #8]
   10c3c:	e9c7 2300 	strd	r2, r3, [r7]
	double coeff_1 = M_PI/4;
   10c40:	a357      	add	r3, pc, #348	; (adr r3, 10da0 <pp_atan2+0x170>)
   10c42:	e9d3 2300 	ldrd	r2, r3, [r3]
   10c46:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double coeff_2 = 3*coeff_1;
   10c4a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   10c4e:	f04f 0200 	mov.w	r2, #0
   10c52:	f04f 0300 	mov.w	r3, #0
   10c56:	f2c4 0308 	movt	r3, #16392	; 0x4008
   10c5a:	f001 ffdd 	bl	12c18 <__aeabi_dmul>
   10c5e:	4602      	mov	r2, r0
   10c60:	460b      	mov	r3, r1
   10c62:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double abs_y = fabs(y)+1e-10;
   10c66:	e9d7 0100 	ldrd	r0, r1, [r7]
   10c6a:	f04f 0200 	mov.w	r2, #0
   10c6e:	f04f 0300 	mov.w	r3, #0
   10c72:	f002 fa43 	bl	130fc <__aeabi_dcmplt>
   10c76:	4603      	mov	r3, r0
   10c78:	2b00      	cmp	r3, #0
   10c7a:	d009      	beq.n	10c90 <pp_atan2+0x60>
   10c7c:	a14a      	add	r1, pc, #296	; (adr r1, 10da8 <pp_atan2+0x178>)
   10c7e:	e9d1 0100 	ldrd	r0, r1, [r1]
   10c82:	e9d7 2300 	ldrd	r2, r3, [r7]
   10c86:	f001 fe13 	bl	128b0 <__aeabi_dsub>
   10c8a:	4602      	mov	r2, r0
   10c8c:	460b      	mov	r3, r1
   10c8e:	e008      	b.n	10ca2 <pp_atan2+0x72>
   10c90:	e9d7 0100 	ldrd	r0, r1, [r7]
   10c94:	a344      	add	r3, pc, #272	; (adr r3, 10da8 <pp_atan2+0x178>)
   10c96:	e9d3 2300 	ldrd	r2, r3, [r3]
   10c9a:	f001 fe0b 	bl	128b4 <__adddf3>
   10c9e:	4602      	mov	r2, r0
   10ca0:	460b      	mov	r3, r1
   10ca2:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double angle, r;
	if(x>0)
   10ca6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   10caa:	f04f 0200 	mov.w	r2, #0
   10cae:	f04f 0300 	mov.w	r3, #0
   10cb2:	f002 fa41 	bl	13138 <__aeabi_dcmpgt>
   10cb6:	4603      	mov	r3, r0
   10cb8:	2b00      	cmp	r3, #0
   10cba:	d02a      	beq.n	10d12 <pp_atan2+0xe2>
	{
		r = (x - abs_y)/(x + abs_y);
   10cbc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   10cc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   10cc4:	f001 fdf4 	bl	128b0 <__aeabi_dsub>
   10cc8:	4602      	mov	r2, r0
   10cca:	460b      	mov	r3, r1
   10ccc:	4690      	mov	r8, r2
   10cce:	4699      	mov	r9, r3
   10cd0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   10cd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   10cd8:	f001 fdec 	bl	128b4 <__adddf3>
   10cdc:	4602      	mov	r2, r0
   10cde:	460b      	mov	r3, r1
   10ce0:	4640      	mov	r0, r8
   10ce2:	4649      	mov	r1, r9
   10ce4:	f002 f8c2 	bl	12e6c <__aeabi_ddiv>
   10ce8:	4602      	mov	r2, r0
   10cea:	460b      	mov	r3, r1
   10cec:	e9c7 2304 	strd	r2, r3, [r7, #16]
		angle = coeff_1 - coeff_1*r;
   10cf0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   10cf4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   10cf8:	f001 ff8e 	bl	12c18 <__aeabi_dmul>
   10cfc:	4602      	mov	r2, r0
   10cfe:	460b      	mov	r3, r1
   10d00:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   10d04:	f001 fdd4 	bl	128b0 <__aeabi_dsub>
   10d08:	4602      	mov	r2, r0
   10d0a:	460b      	mov	r3, r1
   10d0c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
   10d10:	e029      	b.n	10d66 <pp_atan2+0x136>
	}
	else
	{
		r = (x + abs_y)/(abs_y - x);
   10d12:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   10d16:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   10d1a:	f001 fdcb 	bl	128b4 <__adddf3>
   10d1e:	4602      	mov	r2, r0
   10d20:	460b      	mov	r3, r1
   10d22:	4690      	mov	r8, r2
   10d24:	4699      	mov	r9, r3
   10d26:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   10d2a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   10d2e:	f001 fdbf 	bl	128b0 <__aeabi_dsub>
   10d32:	4602      	mov	r2, r0
   10d34:	460b      	mov	r3, r1
   10d36:	4640      	mov	r0, r8
   10d38:	4649      	mov	r1, r9
   10d3a:	f002 f897 	bl	12e6c <__aeabi_ddiv>
   10d3e:	4602      	mov	r2, r0
   10d40:	460b      	mov	r3, r1
   10d42:	e9c7 2304 	strd	r2, r3, [r7, #16]
		angle = coeff_2 - coeff_1*r;
   10d46:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   10d4a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   10d4e:	f001 ff63 	bl	12c18 <__aeabi_dmul>
   10d52:	4602      	mov	r2, r0
   10d54:	460b      	mov	r3, r1
   10d56:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
   10d5a:	f001 fda9 	bl	128b0 <__aeabi_dsub>
   10d5e:	4602      	mov	r2, r0
   10d60:	460b      	mov	r3, r1
   10d62:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	}
	if(y<0)
   10d66:	e9d7 0100 	ldrd	r0, r1, [r7]
   10d6a:	f04f 0200 	mov.w	r2, #0
   10d6e:	f04f 0300 	mov.w	r3, #0
   10d72:	f002 f9c3 	bl	130fc <__aeabi_dcmplt>
   10d76:	4603      	mov	r3, r0
   10d78:	2b00      	cmp	r3, #0
   10d7a:	d004      	beq.n	10d86 <pp_atan2+0x156>
		return (-angle);
   10d7c:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   10d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10d80:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   10d84:	e001      	b.n	10d8a <pp_atan2+0x15a>
	else
		return angle;
   10d86:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
   10d8a:	4622      	mov	r2, r4
   10d8c:	462b      	mov	r3, r5
}
   10d8e:	4610      	mov	r0, r2
   10d90:	4619      	mov	r1, r3
   10d92:	3738      	adds	r7, #56	; 0x38
   10d94:	46bd      	mov	sp, r7
   10d96:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
   10d9a:	bf00      	nop
   10d9c:	f3af 8000 	nop.w
   10da0:	54442d18 	.word	0x54442d18
   10da4:	3fe921fb 	.word	0x3fe921fb
   10da8:	d9d7bdbb 	.word	0xd9d7bdbb
   10dac:	3ddb7cdf 	.word	0x3ddb7cdf

00010db0 <pp_sin>:
 * Range: -pi/2 <= x <= pi/2
 * Precision: +/- .000,000,005
 */
 
double pp_sin(double x)
{
   10db0:	b5b0      	push	{r4, r5, r7, lr}
   10db2:	b08c      	sub	sp, #48	; 0x30
   10db4:	af00      	add	r7, sp, #0
   10db6:	e9c7 0100 	strd	r0, r1, [r7]
	double xi, y, q, q2;
	int sign;

	xi = x; sign = 1;
   10dba:	e9d7 2300 	ldrd	r2, r3, [r7]
   10dbe:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   10dc2:	2301      	movs	r3, #1
   10dc4:	627b      	str	r3, [r7, #36]	; 0x24
	while (xi < -1.57079632679489661923) xi += 6.28318530717958647692;
   10dc6:	e00a      	b.n	10dde <pp_sin+0x2e>
   10dc8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   10dcc:	a35a      	add	r3, pc, #360	; (adr r3, 10f38 <pp_sin+0x188>)
   10dce:	e9d3 2300 	ldrd	r2, r3, [r3]
   10dd2:	f001 fd6f 	bl	128b4 <__adddf3>
   10dd6:	4602      	mov	r2, r0
   10dd8:	460b      	mov	r3, r1
   10dda:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   10dde:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   10de2:	a357      	add	r3, pc, #348	; (adr r3, 10f40 <pp_sin+0x190>)
   10de4:	e9d3 2300 	ldrd	r2, r3, [r3]
   10de8:	f002 f988 	bl	130fc <__aeabi_dcmplt>
   10dec:	4603      	mov	r3, r0
   10dee:	2b00      	cmp	r3, #0
   10df0:	d1ea      	bne.n	10dc8 <pp_sin+0x18>
	while (xi > 4.71238898038468985769) xi -= 6.28318530717958647692;
   10df2:	e00a      	b.n	10e0a <pp_sin+0x5a>
   10df4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   10df8:	a34f      	add	r3, pc, #316	; (adr r3, 10f38 <pp_sin+0x188>)
   10dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
   10dfe:	f001 fd57 	bl	128b0 <__aeabi_dsub>
   10e02:	4602      	mov	r2, r0
   10e04:	460b      	mov	r3, r1
   10e06:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   10e0a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   10e0e:	a34e      	add	r3, pc, #312	; (adr r3, 10f48 <pp_sin+0x198>)
   10e10:	e9d3 2300 	ldrd	r2, r3, [r3]
   10e14:	f002 f990 	bl	13138 <__aeabi_dcmpgt>
   10e18:	4603      	mov	r3, r0
   10e1a:	2b00      	cmp	r3, #0
   10e1c:	d1ea      	bne.n	10df4 <pp_sin+0x44>
	if (xi > 1.57079632679489661923) {
   10e1e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   10e22:	a34b      	add	r3, pc, #300	; (adr r3, 10f50 <pp_sin+0x1a0>)
   10e24:	e9d3 2300 	ldrd	r2, r3, [r3]
   10e28:	f002 f986 	bl	13138 <__aeabi_dcmpgt>
   10e2c:	4603      	mov	r3, r0
   10e2e:	2b00      	cmp	r3, #0
   10e30:	d00d      	beq.n	10e4e <pp_sin+0x9e>
		xi -= 3.141592653589793238462643;
   10e32:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   10e36:	a348      	add	r3, pc, #288	; (adr r3, 10f58 <pp_sin+0x1a8>)
   10e38:	e9d3 2300 	ldrd	r2, r3, [r3]
   10e3c:	f001 fd38 	bl	128b0 <__aeabi_dsub>
   10e40:	4602      	mov	r2, r0
   10e42:	460b      	mov	r3, r1
   10e44:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		sign = -1;
   10e48:	f04f 33ff 	mov.w	r3, #4294967295
   10e4c:	627b      	str	r3, [r7, #36]	; 0x24
	}
	q = xi / 1.57079632679; q2 = q * q;
   10e4e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   10e52:	a343      	add	r3, pc, #268	; (adr r3, 10f60 <pp_sin+0x1b0>)
   10e54:	e9d3 2300 	ldrd	r2, r3, [r3]
   10e58:	f002 f808 	bl	12e6c <__aeabi_ddiv>
   10e5c:	4602      	mov	r2, r0
   10e5e:	460b      	mov	r3, r1
   10e60:	e9c7 2306 	strd	r2, r3, [r7, #24]
   10e64:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   10e68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   10e6c:	f001 fed4 	bl	12c18 <__aeabi_dmul>
   10e70:	4602      	mov	r2, r0
   10e72:	460b      	mov	r3, r1
   10e74:	e9c7 2304 	strd	r2, r3, [r7, #16]
	y = ((((.00015148419  * q2
   10e78:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   10e7c:	a33a      	add	r3, pc, #232	; (adr r3, 10f68 <pp_sin+0x1b8>)
   10e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
   10e82:	f001 fec9 	bl	12c18 <__aeabi_dmul>
   10e86:	4602      	mov	r2, r0
   10e88:	460b      	mov	r3, r1
	      - .00467376557) * q2
   10e8a:	4610      	mov	r0, r2
   10e8c:	4619      	mov	r1, r3
   10e8e:	a338      	add	r3, pc, #224	; (adr r3, 10f70 <pp_sin+0x1c0>)
   10e90:	e9d3 2300 	ldrd	r2, r3, [r3]
   10e94:	f001 fd0c 	bl	128b0 <__aeabi_dsub>
   10e98:	4602      	mov	r2, r0
   10e9a:	460b      	mov	r3, r1
   10e9c:	4610      	mov	r0, r2
   10e9e:	4619      	mov	r1, r3
   10ea0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   10ea4:	f001 feb8 	bl	12c18 <__aeabi_dmul>
   10ea8:	4602      	mov	r2, r0
   10eaa:	460b      	mov	r3, r1
	      + .07968967928) * q2
   10eac:	4610      	mov	r0, r2
   10eae:	4619      	mov	r1, r3
   10eb0:	a331      	add	r3, pc, #196	; (adr r3, 10f78 <pp_sin+0x1c8>)
   10eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
   10eb6:	f001 fcfd 	bl	128b4 <__adddf3>
   10eba:	4602      	mov	r2, r0
   10ebc:	460b      	mov	r3, r1
   10ebe:	4610      	mov	r0, r2
   10ec0:	4619      	mov	r1, r3
   10ec2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   10ec6:	f001 fea7 	bl	12c18 <__aeabi_dmul>
   10eca:	4602      	mov	r2, r0
   10ecc:	460b      	mov	r3, r1
	      - .64596371106) * q2
   10ece:	4610      	mov	r0, r2
   10ed0:	4619      	mov	r1, r3
   10ed2:	a32b      	add	r3, pc, #172	; (adr r3, 10f80 <pp_sin+0x1d0>)
   10ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
   10ed8:	f001 fcea 	bl	128b0 <__aeabi_dsub>
   10edc:	4602      	mov	r2, r0
   10ede:	460b      	mov	r3, r1
   10ee0:	4610      	mov	r0, r2
   10ee2:	4619      	mov	r1, r3
   10ee4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   10ee8:	f001 fe96 	bl	12c18 <__aeabi_dmul>
   10eec:	4602      	mov	r2, r0
   10eee:	460b      	mov	r3, r1
	      +1.57079631847) * q;
   10ef0:	4610      	mov	r0, r2
   10ef2:	4619      	mov	r1, r3
   10ef4:	a324      	add	r3, pc, #144	; (adr r3, 10f88 <pp_sin+0x1d8>)
   10ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
   10efa:	f001 fcdb 	bl	128b4 <__adddf3>
   10efe:	4602      	mov	r2, r0
   10f00:	460b      	mov	r3, r1
	if (xi > 1.57079632679489661923) {
		xi -= 3.141592653589793238462643;
		sign = -1;
	}
	q = xi / 1.57079632679; q2 = q * q;
	y = ((((.00015148419  * q2
   10f02:	4610      	mov	r0, r2
   10f04:	4619      	mov	r1, r3
   10f06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   10f0a:	f001 fe85 	bl	12c18 <__aeabi_dmul>
   10f0e:	4602      	mov	r2, r0
   10f10:	460b      	mov	r3, r1
   10f12:	e9c7 2302 	strd	r2, r3, [r7, #8]
	      - .00467376557) * q2
	      + .07968967928) * q2
	      - .64596371106) * q2
	      +1.57079631847) * q;
	return(sign < 0? -y : y);
   10f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10f18:	2b00      	cmp	r3, #0
   10f1a:	da04      	bge.n	10f26 <pp_sin+0x176>
   10f1c:	68bc      	ldr	r4, [r7, #8]
   10f1e:	68fb      	ldr	r3, [r7, #12]
   10f20:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   10f24:	e001      	b.n	10f2a <pp_sin+0x17a>
   10f26:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
   10f2a:	4622      	mov	r2, r4
   10f2c:	462b      	mov	r3, r5
}
   10f2e:	4610      	mov	r0, r2
   10f30:	4619      	mov	r1, r3
   10f32:	3730      	adds	r7, #48	; 0x30
   10f34:	46bd      	mov	sp, r7
   10f36:	bdb0      	pop	{r4, r5, r7, pc}
   10f38:	54442d18 	.word	0x54442d18
   10f3c:	401921fb 	.word	0x401921fb
   10f40:	54442d18 	.word	0x54442d18
   10f44:	bff921fb 	.word	0xbff921fb
   10f48:	7f3321d2 	.word	0x7f3321d2
   10f4c:	4012d97c 	.word	0x4012d97c
   10f50:	54442d18 	.word	0x54442d18
   10f54:	3ff921fb 	.word	0x3ff921fb
   10f58:	54442d18 	.word	0x54442d18
   10f5c:	400921fb 	.word	0x400921fb
   10f60:	5443d6f4 	.word	0x5443d6f4
   10f64:	3ff921fb 	.word	0x3ff921fb
   10f68:	48a890af 	.word	0x48a890af
   10f6c:	3f23daf7 	.word	0x3f23daf7
   10f70:	645b6d0e 	.word	0x645b6d0e
   10f74:	3f7324cc 	.word	0x3f7324cc
   10f78:	f65619a5 	.word	0xf65619a5
   10f7c:	3fb4668a 	.word	0x3fb4668a
   10f80:	16acf9cd 	.word	0x16acf9cd
   10f84:	3fe4abbc 	.word	0x3fe4abbc
   10f88:	520817f7 	.word	0x520817f7
   10f8c:	3ff921fb 	.word	0x3ff921fb

00010f90 <pp_sqrt>:

#define SQRT_PRECISION 5
double pp_sqrt(double n)
{
   10f90:	b480      	push	{r7}
   10f92:	b083      	sub	sp, #12
   10f94:	af00      	add	r7, sp, #0
   10f96:	e9c7 0100 	strd	r0, r1, [r7]
	/* perform the computation */
	for(i = 0; i < SQRT_PRECISION; i++)
		x = (x + n / x) / 2;
	return x;
#endif
}
   10f9a:	4610      	mov	r0, r2
   10f9c:	4619      	mov	r1, r3
   10f9e:	370c      	adds	r7, #12
   10fa0:	46bd      	mov	sp, r7
   10fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
   10fa6:	4770      	bx	lr

00010fa8 <fbw_adc_buf_channel>:

uint16_t fbw_adc_samples[ FBW_NB_ADC ];

static struct fbw_adc_buf* buffers[FBW_NB_ADC];

void fbw_adc_buf_channel(uint8_t adc_channel, struct fbw_adc_buf* s) {
   10fa8:	b480      	push	{r7}
   10faa:	b083      	sub	sp, #12
   10fac:	af00      	add	r7, sp, #0
   10fae:	4603      	mov	r3, r0
   10fb0:	6039      	str	r1, [r7, #0]
   10fb2:	71fb      	strb	r3, [r7, #7]
  buffers[adc_channel] = s;
   10fb4:	79fa      	ldrb	r2, [r7, #7]
   10fb6:	f64b 4398 	movw	r3, #48280	; 0xbc98
   10fba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10fbe:	6839      	ldr	r1, [r7, #0]
   10fc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   10fc4:	370c      	adds	r7, #12
   10fc6:	46bd      	mov	sp, r7
   10fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
   10fcc:	4770      	bx	lr
   10fce:	bf00      	nop

00010fd0 <fbw_adc_init>:

void 
fbw_adc_init( void )
{
   10fd0:	b480      	push	{r7}
   10fd2:	b083      	sub	sp, #12
   10fd4:	af00      	add	r7, sp, #0
  uint8_t i;
  /* Ensure that our port is for input with no pull-ups */
  ANALOG_PORT 	= 0x00;
   10fd6:	f248 0315 	movw	r3, #32789	; 0x8015
   10fda:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fde:	2200      	movs	r2, #0
   10fe0:	701a      	strb	r2, [r3, #0]
  ANALOG_PORT_DIR	= 0x00;
   10fe2:	f248 0314 	movw	r3, #32788	; 0x8014
   10fe6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fea:	2200      	movs	r2, #0
   10fec:	701a      	strb	r2, [r3, #0]

  /* Select our external voltage ref */
  ADMUX		= ANALOG_VREF;
   10fee:	f248 0307 	movw	r3, #32775	; 0x8007
   10ff2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ff6:	22c0      	movs	r2, #192	; 0xc0
   10ff8:	701a      	strb	r2, [r3, #0]

  /* Select out clock, turn on the ADC interrupt and start conversion */
  ADCSRA = 0
   10ffa:	f248 0306 	movw	r3, #32774	; 0x8006
   10ffe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11002:	22cf      	movs	r2, #207	; 0xcf
   11004:	701a      	strb	r2, [r3, #0]
    | _BV(ADEN )
    | _BV(ADIE )
    | _BV(ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < FBW_NB_ADC; i++)
   11006:	2300      	movs	r3, #0
   11008:	71fb      	strb	r3, [r7, #7]
   1100a:	e00a      	b.n	11022 <fbw_adc_init+0x52>
    buffers[i] = (struct fbw_adc_buf*)0;
   1100c:	79fa      	ldrb	r2, [r7, #7]
   1100e:	f64b 4398 	movw	r3, #48280	; 0xbc98
   11012:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11016:	2100      	movs	r1, #0
   11018:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    | _BV(ADEN )
    | _BV(ADIE )
    | _BV(ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < FBW_NB_ADC; i++)
   1101c:	79fb      	ldrb	r3, [r7, #7]
   1101e:	3301      	adds	r3, #1
   11020:	71fb      	strb	r3, [r7, #7]
   11022:	79fb      	ldrb	r3, [r7, #7]
   11024:	2b07      	cmp	r3, #7
   11026:	d9f1      	bls.n	1100c <fbw_adc_init+0x3c>
    buffers[i] = (struct fbw_adc_buf*)0;
}
   11028:	370c      	adds	r7, #12
   1102a:	46bd      	mov	sp, r7
   1102c:	f85d 7b04 	ldr.w	r7, [sp], #4
   11030:	4770      	bx	lr
   11032:	bf00      	nop

00011034 <__vector_34>:
#ifdef PAPABENCH_SINGLE
	SIGNAL(SIG_SPM_READY)
#else
	SIGNAL( SIG_INPUT_CAPTURE1 )
#endif
{
   11034:	b480      	push	{r7}
   11036:	b083      	sub	sp, #12
   11038:	af00      	add	r7, sp, #0
  uint16_t		this;
  uint16_t		width;
  static uint8_t		state;
  static uint8_t		sync_start;

  this		= ICR1;
   1103a:	f248 0326 	movw	r3, #32806	; 0x8026
   1103e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11042:	881b      	ldrh	r3, [r3, #0]
   11044:	80fb      	strh	r3, [r7, #6]
  width		= this - last;
   11046:	f64b 43f4 	movw	r3, #48372	; 0xbcf4
   1104a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1104e:	881b      	ldrh	r3, [r3, #0]
   11050:	88fa      	ldrh	r2, [r7, #6]
   11052:	1ad3      	subs	r3, r2, r3
   11054:	80bb      	strh	r3, [r7, #4]
  last		= this;
   11056:	f64b 43f4 	movw	r3, #48372	; 0xbcf4
   1105a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1105e:	88fa      	ldrh	r2, [r7, #6]
   11060:	801a      	strh	r2, [r3, #0]
  
  if( state == 0 ) {
   11062:	f64b 43f6 	movw	r3, #48374	; 0xbcf6
   11066:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1106a:	781b      	ldrb	r3, [r3, #0]
   1106c:	2b00      	cmp	r3, #0
   1106e:	d11e      	bne.n	110ae <__vector_34+0x7a>
    uint8_t	end = TCNT2;
   11070:	f248 0324 	movw	r3, #32804	; 0x8024
   11074:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11078:	781b      	ldrb	r3, [r3, #0]
   1107a:	70fb      	strb	r3, [r7, #3]
    uint8_t diff = (end - sync_start);
   1107c:	f64b 43f7 	movw	r3, #48375	; 0xbcf7
   11080:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11084:	781b      	ldrb	r3, [r3, #0]
   11086:	78fa      	ldrb	r2, [r7, #3]
   11088:	1ad3      	subs	r3, r2, r3
   1108a:	70bb      	strb	r3, [r7, #2]
    sync_start = end;
   1108c:	f64b 43f7 	movw	r3, #48375	; 0xbcf7
   11090:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11094:	78fa      	ldrb	r2, [r7, #3]
   11096:	701a      	strb	r2, [r3, #0]

    /* The frame period of the mc3030 seems to be 25ms. 
     * One pulse lasts from 1.05ms to 2.150ms.
     * Sync pulse is at least 7ms : (7000*CLOCK)/1024 = 109
     */
    if( diff > (uint8_t)(((uint32_t)(7000ul*CLOCK))/1024ul) ) {
   11098:	78bb      	ldrb	r3, [r7, #2]
   1109a:	2b6d      	cmp	r3, #109	; 0x6d
   1109c:	d906      	bls.n	110ac <__vector_34+0x78>
      state = 1;
   1109e:	f64b 43f6 	movw	r3, #48374	; 0xbcf6
   110a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   110a6:	2201      	movs	r2, #1
   110a8:	701a      	strb	r2, [r3, #0]
   110aa:	e053      	b.n	11154 <__vector_34+0x120>
   110ac:	e052      	b.n	11154 <__vector_34+0x120>
    }
  } 
  else {
    /* Read a data pulses */
    if( width < 700ul*CLOCK || width > 2300ul*CLOCK)
   110ae:	88bb      	ldrh	r3, [r7, #4]
   110b0:	f5b3 5f2f 	cmp.w	r3, #11200	; 0x2bc0
   110b4:	d304      	bcc.n	110c0 <__vector_34+0x8c>
   110b6:	88ba      	ldrh	r2, [r7, #4]
   110b8:	f648 73c0 	movw	r3, #36800	; 0x8fc0
   110bc:	429a      	cmp	r2, r3
   110be:	d911      	bls.n	110e4 <__vector_34+0xb0>
      RestartPpmCycle();
   110c0:	f64b 43f6 	movw	r3, #48374	; 0xbcf6
   110c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   110c8:	2200      	movs	r2, #0
   110ca:	701a      	strb	r2, [r3, #0]
   110cc:	f248 0324 	movw	r3, #32804	; 0x8024
   110d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110d4:	781b      	ldrb	r3, [r3, #0]
   110d6:	b2da      	uxtb	r2, r3
   110d8:	f64b 43f7 	movw	r3, #48375	; 0xbcf7
   110dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   110e0:	701a      	strb	r2, [r3, #0]
   110e2:	e038      	b.n	11156 <__vector_34+0x122>
    ppm_pulses[state - 1] = width;
   110e4:	f64b 43f6 	movw	r3, #48374	; 0xbcf6
   110e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   110ec:	781b      	ldrb	r3, [r3, #0]
   110ee:	1e5a      	subs	r2, r3, #1
   110f0:	f64b 43b8 	movw	r3, #48312	; 0xbcb8
   110f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   110f8:	88b9      	ldrh	r1, [r7, #4]
   110fa:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

    if (state >= PPM_NB_PULSES) {
   110fe:	f64b 43f6 	movw	r3, #48374	; 0xbcf6
   11102:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11106:	781b      	ldrb	r3, [r3, #0]
   11108:	2b08      	cmp	r3, #8
   1110a:	d917      	bls.n	1113c <__vector_34+0x108>
      ppm_valid	= 1;
   1110c:	f64b 43f3 	movw	r3, #48371	; 0xbcf3
   11110:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11114:	2201      	movs	r2, #1
   11116:	701a      	strb	r2, [r3, #0]
      RestartPpmCycle();
   11118:	f64b 43f6 	movw	r3, #48374	; 0xbcf6
   1111c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11120:	2200      	movs	r2, #0
   11122:	701a      	strb	r2, [r3, #0]
   11124:	f248 0324 	movw	r3, #32804	; 0x8024
   11128:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1112c:	781b      	ldrb	r3, [r3, #0]
   1112e:	b2da      	uxtb	r2, r3
   11130:	f64b 43f7 	movw	r3, #48375	; 0xbcf7
   11134:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11138:	701a      	strb	r2, [r3, #0]
   1113a:	e00c      	b.n	11156 <__vector_34+0x122>
    } else 
      state++;
   1113c:	f64b 43f6 	movw	r3, #48374	; 0xbcf6
   11140:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11144:	781b      	ldrb	r3, [r3, #0]
   11146:	3301      	adds	r3, #1
   11148:	b2da      	uxtb	r2, r3
   1114a:	f64b 43f6 	movw	r3, #48374	; 0xbcf6
   1114e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11152:	701a      	strb	r2, [r3, #0]
  }
  return;
   11154:	bf00      	nop
}
   11156:	370c      	adds	r7, #12
   11158:	46bd      	mov	sp, r7
   1115a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1115e:	4770      	bx	lr

00011160 <last_radio_from_ppm>:

/* Copy from the ppm receiving buffer to the buffer sent to mcu0 */
void last_radio_from_ppm() {
   11160:	b590      	push	{r4, r7, lr}
   11162:	b083      	sub	sp, #12
   11164:	af00      	add	r7, sp, #0
  LastRadioFromPpm()
   11166:	f64b 43b8 	movw	r3, #48312	; 0xbcb8
   1116a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1116e:	881b      	ldrh	r3, [r3, #0]
   11170:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
   11174:	b29b      	uxth	r3, r3
   11176:	80fb      	strh	r3, [r7, #6]
   11178:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   1117c:	4618      	mov	r0, r3
   1117e:	f002 f937 	bl	133f0 <__aeabi_i2f>
   11182:	4603      	mov	r3, r0
   11184:	4618      	mov	r0, r3
   11186:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   1118a:	f002 f985 	bl	13498 <__aeabi_fmul>
   1118e:	4603      	mov	r3, r0
   11190:	4618      	mov	r0, r3
   11192:	f002 fb47 	bl	13824 <__aeabi_f2iz>
   11196:	4603      	mov	r3, r0
   11198:	b29a      	uxth	r2, r3
   1119a:	f64b 43cc 	movw	r3, #48332	; 0xbccc
   1119e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111a2:	801a      	strh	r2, [r3, #0]
   111a4:	f64b 43cc 	movw	r3, #48332	; 0xbccc
   111a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111ac:	881b      	ldrh	r3, [r3, #0]
   111ae:	b21b      	sxth	r3, r3
   111b0:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   111b4:	dd07      	ble.n	111c6 <last_radio_from_ppm+0x66>
   111b6:	f64b 43cc 	movw	r3, #48332	; 0xbccc
   111ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111be:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   111c2:	801a      	strh	r2, [r3, #0]
   111c4:	e00d      	b.n	111e2 <last_radio_from_ppm+0x82>
   111c6:	f64b 43cc 	movw	r3, #48332	; 0xbccc
   111ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111ce:	881b      	ldrh	r3, [r3, #0]
   111d0:	b21b      	sxth	r3, r3
   111d2:	2b00      	cmp	r3, #0
   111d4:	da05      	bge.n	111e2 <last_radio_from_ppm+0x82>
   111d6:	f64b 43cc 	movw	r3, #48332	; 0xbccc
   111da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111de:	2200      	movs	r2, #0
   111e0:	801a      	strh	r2, [r3, #0]
   111e2:	f64b 43b8 	movw	r3, #48312	; 0xbcb8
   111e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111ea:	885b      	ldrh	r3, [r3, #2]
   111ec:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   111f0:	b29b      	uxth	r3, r3
   111f2:	80fb      	strh	r3, [r7, #6]
   111f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   111f8:	4618      	mov	r0, r3
   111fa:	f002 f8f9 	bl	133f0 <__aeabi_i2f>
   111fe:	4603      	mov	r3, r0
   11200:	4618      	mov	r0, r3
   11202:	f002 fb0f 	bl	13824 <__aeabi_f2iz>
   11206:	4603      	mov	r3, r0
   11208:	b29a      	uxth	r2, r3
   1120a:	f64b 43cc 	movw	r3, #48332	; 0xbccc
   1120e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11212:	805a      	strh	r2, [r3, #2]
   11214:	f64b 43cc 	movw	r3, #48332	; 0xbccc
   11218:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1121c:	885b      	ldrh	r3, [r3, #2]
   1121e:	b21b      	sxth	r3, r3
   11220:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   11224:	dd07      	ble.n	11236 <last_radio_from_ppm+0xd6>
   11226:	f64b 43cc 	movw	r3, #48332	; 0xbccc
   1122a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1122e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   11232:	805a      	strh	r2, [r3, #2]
   11234:	e00f      	b.n	11256 <last_radio_from_ppm+0xf6>
   11236:	f64b 43cc 	movw	r3, #48332	; 0xbccc
   1123a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1123e:	885b      	ldrh	r3, [r3, #2]
   11240:	b21b      	sxth	r3, r3
   11242:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   11246:	da06      	bge.n	11256 <last_radio_from_ppm+0xf6>
   11248:	f64b 43cc 	movw	r3, #48332	; 0xbccc
   1124c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11250:	f64d 2280 	movw	r2, #55936	; 0xda80
   11254:	805a      	strh	r2, [r3, #2]
   11256:	f64b 43b8 	movw	r3, #48312	; 0xbcb8
   1125a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1125e:	889b      	ldrh	r3, [r3, #4]
   11260:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   11264:	b29b      	uxth	r3, r3
   11266:	80fb      	strh	r3, [r7, #6]
   11268:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   1126c:	4618      	mov	r0, r3
   1126e:	f002 f8bf 	bl	133f0 <__aeabi_i2f>
   11272:	4603      	mov	r3, r0
   11274:	4618      	mov	r0, r3
   11276:	f002 fad5 	bl	13824 <__aeabi_f2iz>
   1127a:	4603      	mov	r3, r0
   1127c:	b29a      	uxth	r2, r3
   1127e:	f64b 43cc 	movw	r3, #48332	; 0xbccc
   11282:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11286:	809a      	strh	r2, [r3, #4]
   11288:	f64b 43cc 	movw	r3, #48332	; 0xbccc
   1128c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11290:	889b      	ldrh	r3, [r3, #4]
   11292:	b21b      	sxth	r3, r3
   11294:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   11298:	dd07      	ble.n	112aa <last_radio_from_ppm+0x14a>
   1129a:	f64b 43cc 	movw	r3, #48332	; 0xbccc
   1129e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   112a2:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   112a6:	809a      	strh	r2, [r3, #4]
   112a8:	e00f      	b.n	112ca <last_radio_from_ppm+0x16a>
   112aa:	f64b 43cc 	movw	r3, #48332	; 0xbccc
   112ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   112b2:	889b      	ldrh	r3, [r3, #4]
   112b4:	b21b      	sxth	r3, r3
   112b6:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   112ba:	da06      	bge.n	112ca <last_radio_from_ppm+0x16a>
   112bc:	f64b 43cc 	movw	r3, #48332	; 0xbccc
   112c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   112c4:	f64d 2280 	movw	r2, #55936	; 0xda80
   112c8:	809a      	strh	r2, [r3, #4]
   112ca:	f64b 43b8 	movw	r3, #48312	; 0xbcb8
   112ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   112d2:	88db      	ldrh	r3, [r3, #6]
   112d4:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   112d8:	b29b      	uxth	r3, r3
   112da:	80fb      	strh	r3, [r7, #6]
   112dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   112e0:	4618      	mov	r0, r3
   112e2:	f002 f885 	bl	133f0 <__aeabi_i2f>
   112e6:	4603      	mov	r3, r0
   112e8:	4618      	mov	r0, r3
   112ea:	f002 fa9b 	bl	13824 <__aeabi_f2iz>
   112ee:	4603      	mov	r3, r0
   112f0:	b29a      	uxth	r2, r3
   112f2:	f64b 43cc 	movw	r3, #48332	; 0xbccc
   112f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   112fa:	80da      	strh	r2, [r3, #6]
   112fc:	f64b 43cc 	movw	r3, #48332	; 0xbccc
   11300:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11304:	88db      	ldrh	r3, [r3, #6]
   11306:	b21b      	sxth	r3, r3
   11308:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1130c:	dd07      	ble.n	1131e <last_radio_from_ppm+0x1be>
   1130e:	f64b 43cc 	movw	r3, #48332	; 0xbccc
   11312:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11316:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   1131a:	80da      	strh	r2, [r3, #6]
   1131c:	e00f      	b.n	1133e <last_radio_from_ppm+0x1de>
   1131e:	f64b 43cc 	movw	r3, #48332	; 0xbccc
   11322:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11326:	88db      	ldrh	r3, [r3, #6]
   11328:	b21b      	sxth	r3, r3
   1132a:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   1132e:	da06      	bge.n	1133e <last_radio_from_ppm+0x1de>
   11330:	f64b 43cc 	movw	r3, #48332	; 0xbccc
   11334:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11338:	f64d 2280 	movw	r2, #55936	; 0xda80
   1133c:	80da      	strh	r2, [r3, #6]
   1133e:	f64b 43b8 	movw	r3, #48312	; 0xbcb8
   11342:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11346:	891b      	ldrh	r3, [r3, #8]
   11348:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   1134c:	b29b      	uxth	r3, r3
   1134e:	80fb      	strh	r3, [r7, #6]
   11350:	f64b 43e0 	movw	r3, #48352	; 0xbce0
   11354:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11358:	891b      	ldrh	r3, [r3, #8]
   1135a:	b21b      	sxth	r3, r3
   1135c:	4618      	mov	r0, r3
   1135e:	f002 f847 	bl	133f0 <__aeabi_i2f>
   11362:	4604      	mov	r4, r0
   11364:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   11368:	4618      	mov	r0, r3
   1136a:	f002 f841 	bl	133f0 <__aeabi_i2f>
   1136e:	4603      	mov	r3, r0
   11370:	4618      	mov	r0, r3
   11372:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   11376:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   1137a:	f002 f88d 	bl	13498 <__aeabi_fmul>
   1137e:	4603      	mov	r3, r0
   11380:	4620      	mov	r0, r4
   11382:	4619      	mov	r1, r3
   11384:	f001 ff80 	bl	13288 <__addsf3>
   11388:	4603      	mov	r3, r0
   1138a:	4618      	mov	r0, r3
   1138c:	f002 fa4a 	bl	13824 <__aeabi_f2iz>
   11390:	4603      	mov	r3, r0
   11392:	b29a      	uxth	r2, r3
   11394:	f64b 43e0 	movw	r3, #48352	; 0xbce0
   11398:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1139c:	811a      	strh	r2, [r3, #8]
   1139e:	f64b 43b8 	movw	r3, #48312	; 0xbcb8
   113a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113a6:	895b      	ldrh	r3, [r3, #10]
   113a8:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   113ac:	b29b      	uxth	r3, r3
   113ae:	80fb      	strh	r3, [r7, #6]
   113b0:	f64b 43e0 	movw	r3, #48352	; 0xbce0
   113b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113b8:	895b      	ldrh	r3, [r3, #10]
   113ba:	b21b      	sxth	r3, r3
   113bc:	4618      	mov	r0, r3
   113be:	f002 f817 	bl	133f0 <__aeabi_i2f>
   113c2:	4604      	mov	r4, r0
   113c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   113c8:	4618      	mov	r0, r3
   113ca:	f002 f811 	bl	133f0 <__aeabi_i2f>
   113ce:	4603      	mov	r3, r0
   113d0:	4618      	mov	r0, r3
   113d2:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   113d6:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   113da:	f002 f85d 	bl	13498 <__aeabi_fmul>
   113de:	4603      	mov	r3, r0
   113e0:	4620      	mov	r0, r4
   113e2:	4619      	mov	r1, r3
   113e4:	f001 ff50 	bl	13288 <__addsf3>
   113e8:	4603      	mov	r3, r0
   113ea:	4618      	mov	r0, r3
   113ec:	f002 fa1a 	bl	13824 <__aeabi_f2iz>
   113f0:	4603      	mov	r3, r0
   113f2:	b29a      	uxth	r2, r3
   113f4:	f64b 43e0 	movw	r3, #48352	; 0xbce0
   113f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113fc:	815a      	strh	r2, [r3, #10]
   113fe:	f64b 43b8 	movw	r3, #48312	; 0xbcb8
   11402:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11406:	899b      	ldrh	r3, [r3, #12]
   11408:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   1140c:	b29b      	uxth	r3, r3
   1140e:	80fb      	strh	r3, [r7, #6]
   11410:	f64b 43e0 	movw	r3, #48352	; 0xbce0
   11414:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11418:	899b      	ldrh	r3, [r3, #12]
   1141a:	b21b      	sxth	r3, r3
   1141c:	4618      	mov	r0, r3
   1141e:	f001 ffe7 	bl	133f0 <__aeabi_i2f>
   11422:	4604      	mov	r4, r0
   11424:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   11428:	4618      	mov	r0, r3
   1142a:	f001 ffe1 	bl	133f0 <__aeabi_i2f>
   1142e:	4603      	mov	r3, r0
   11430:	4618      	mov	r0, r3
   11432:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   11436:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   1143a:	f002 f82d 	bl	13498 <__aeabi_fmul>
   1143e:	4603      	mov	r3, r0
   11440:	4620      	mov	r0, r4
   11442:	4619      	mov	r1, r3
   11444:	f001 ff20 	bl	13288 <__addsf3>
   11448:	4603      	mov	r3, r0
   1144a:	4618      	mov	r0, r3
   1144c:	f002 f9ea 	bl	13824 <__aeabi_f2iz>
   11450:	4603      	mov	r3, r0
   11452:	b29a      	uxth	r2, r3
   11454:	f64b 43e0 	movw	r3, #48352	; 0xbce0
   11458:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1145c:	819a      	strh	r2, [r3, #12]
   1145e:	f64b 43b8 	movw	r3, #48312	; 0xbcb8
   11462:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11466:	89db      	ldrh	r3, [r3, #14]
   11468:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   1146c:	b29b      	uxth	r3, r3
   1146e:	80fb      	strh	r3, [r7, #6]
   11470:	f64b 43e0 	movw	r3, #48352	; 0xbce0
   11474:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11478:	89db      	ldrh	r3, [r3, #14]
   1147a:	b21b      	sxth	r3, r3
   1147c:	4618      	mov	r0, r3
   1147e:	f001 ffb7 	bl	133f0 <__aeabi_i2f>
   11482:	4604      	mov	r4, r0
   11484:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   11488:	4618      	mov	r0, r3
   1148a:	f001 ffb1 	bl	133f0 <__aeabi_i2f>
   1148e:	4603      	mov	r3, r0
   11490:	4618      	mov	r0, r3
   11492:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   11496:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   1149a:	f001 fffd 	bl	13498 <__aeabi_fmul>
   1149e:	4603      	mov	r3, r0
   114a0:	4620      	mov	r0, r4
   114a2:	4619      	mov	r1, r3
   114a4:	f001 fef0 	bl	13288 <__addsf3>
   114a8:	4603      	mov	r3, r0
   114aa:	4618      	mov	r0, r3
   114ac:	f002 f9ba 	bl	13824 <__aeabi_f2iz>
   114b0:	4603      	mov	r3, r0
   114b2:	b29a      	uxth	r2, r3
   114b4:	f64b 43e0 	movw	r3, #48352	; 0xbce0
   114b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114bc:	81da      	strh	r2, [r3, #14]
   114be:	f64b 43b8 	movw	r3, #48312	; 0xbcb8
   114c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114c6:	8a1b      	ldrh	r3, [r3, #16]
   114c8:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   114cc:	b29b      	uxth	r3, r3
   114ce:	80fb      	strh	r3, [r7, #6]
   114d0:	f64b 43e0 	movw	r3, #48352	; 0xbce0
   114d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114d8:	8a1b      	ldrh	r3, [r3, #16]
   114da:	b21b      	sxth	r3, r3
   114dc:	4618      	mov	r0, r3
   114de:	f001 ff87 	bl	133f0 <__aeabi_i2f>
   114e2:	4604      	mov	r4, r0
   114e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   114e8:	4618      	mov	r0, r3
   114ea:	f001 ff81 	bl	133f0 <__aeabi_i2f>
   114ee:	4603      	mov	r3, r0
   114f0:	4618      	mov	r0, r3
   114f2:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   114f6:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   114fa:	f001 ffcd 	bl	13498 <__aeabi_fmul>
   114fe:	4603      	mov	r3, r0
   11500:	4620      	mov	r0, r4
   11502:	4619      	mov	r1, r3
   11504:	f001 fec0 	bl	13288 <__addsf3>
   11508:	4603      	mov	r3, r0
   1150a:	4618      	mov	r0, r3
   1150c:	f002 f98a 	bl	13824 <__aeabi_f2iz>
   11510:	4603      	mov	r3, r0
   11512:	b29a      	uxth	r2, r3
   11514:	f64b 43e0 	movw	r3, #48352	; 0xbce0
   11518:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1151c:	821a      	strh	r2, [r3, #16]
   1151e:	f64b 43f8 	movw	r3, #48376	; 0xbcf8
   11522:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11526:	781b      	ldrb	r3, [r3, #0]
   11528:	3301      	adds	r3, #1
   1152a:	b2da      	uxtb	r2, r3
   1152c:	f64b 43f8 	movw	r3, #48376	; 0xbcf8
   11530:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11534:	701a      	strb	r2, [r3, #0]
   11536:	f64b 43f8 	movw	r3, #48376	; 0xbcf8
   1153a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1153e:	781b      	ldrb	r3, [r3, #0]
   11540:	2b0a      	cmp	r3, #10
   11542:	f040 8101 	bne.w	11748 <last_radio_from_ppm+0x5e8>
   11546:	f64b 43f8 	movw	r3, #48376	; 0xbcf8
   1154a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1154e:	2200      	movs	r2, #0
   11550:	701a      	strb	r2, [r3, #0]
   11552:	f64b 43e0 	movw	r3, #48352	; 0xbce0
   11556:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1155a:	891a      	ldrh	r2, [r3, #8]
   1155c:	f64b 43cc 	movw	r3, #48332	; 0xbccc
   11560:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11564:	811a      	strh	r2, [r3, #8]
   11566:	f64b 43e0 	movw	r3, #48352	; 0xbce0
   1156a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1156e:	2200      	movs	r2, #0
   11570:	811a      	strh	r2, [r3, #8]
   11572:	f64b 43cc 	movw	r3, #48332	; 0xbccc
   11576:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1157a:	891b      	ldrh	r3, [r3, #8]
   1157c:	b21b      	sxth	r3, r3
   1157e:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   11582:	dd07      	ble.n	11594 <last_radio_from_ppm+0x434>
   11584:	f64b 43cc 	movw	r3, #48332	; 0xbccc
   11588:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1158c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   11590:	811a      	strh	r2, [r3, #8]
   11592:	e00f      	b.n	115b4 <last_radio_from_ppm+0x454>
   11594:	f64b 43cc 	movw	r3, #48332	; 0xbccc
   11598:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1159c:	891b      	ldrh	r3, [r3, #8]
   1159e:	b21b      	sxth	r3, r3
   115a0:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   115a4:	da06      	bge.n	115b4 <last_radio_from_ppm+0x454>
   115a6:	f64b 43cc 	movw	r3, #48332	; 0xbccc
   115aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   115ae:	f64d 2280 	movw	r2, #55936	; 0xda80
   115b2:	811a      	strh	r2, [r3, #8]
   115b4:	f64b 43e0 	movw	r3, #48352	; 0xbce0
   115b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   115bc:	895a      	ldrh	r2, [r3, #10]
   115be:	f64b 43cc 	movw	r3, #48332	; 0xbccc
   115c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   115c6:	815a      	strh	r2, [r3, #10]
   115c8:	f64b 43e0 	movw	r3, #48352	; 0xbce0
   115cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   115d0:	2200      	movs	r2, #0
   115d2:	815a      	strh	r2, [r3, #10]
   115d4:	f64b 43cc 	movw	r3, #48332	; 0xbccc
   115d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   115dc:	895b      	ldrh	r3, [r3, #10]
   115de:	b21b      	sxth	r3, r3
   115e0:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   115e4:	dd07      	ble.n	115f6 <last_radio_from_ppm+0x496>
   115e6:	f64b 43cc 	movw	r3, #48332	; 0xbccc
   115ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   115ee:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   115f2:	815a      	strh	r2, [r3, #10]
   115f4:	e00f      	b.n	11616 <last_radio_from_ppm+0x4b6>
   115f6:	f64b 43cc 	movw	r3, #48332	; 0xbccc
   115fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   115fe:	895b      	ldrh	r3, [r3, #10]
   11600:	b21b      	sxth	r3, r3
   11602:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   11606:	da06      	bge.n	11616 <last_radio_from_ppm+0x4b6>
   11608:	f64b 43cc 	movw	r3, #48332	; 0xbccc
   1160c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11610:	f64d 2280 	movw	r2, #55936	; 0xda80
   11614:	815a      	strh	r2, [r3, #10]
   11616:	f64b 43e0 	movw	r3, #48352	; 0xbce0
   1161a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1161e:	899a      	ldrh	r2, [r3, #12]
   11620:	f64b 43cc 	movw	r3, #48332	; 0xbccc
   11624:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11628:	819a      	strh	r2, [r3, #12]
   1162a:	f64b 43e0 	movw	r3, #48352	; 0xbce0
   1162e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11632:	2200      	movs	r2, #0
   11634:	819a      	strh	r2, [r3, #12]
   11636:	f64b 43cc 	movw	r3, #48332	; 0xbccc
   1163a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1163e:	899b      	ldrh	r3, [r3, #12]
   11640:	b21b      	sxth	r3, r3
   11642:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   11646:	dd07      	ble.n	11658 <last_radio_from_ppm+0x4f8>
   11648:	f64b 43cc 	movw	r3, #48332	; 0xbccc
   1164c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11650:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   11654:	819a      	strh	r2, [r3, #12]
   11656:	e00f      	b.n	11678 <last_radio_from_ppm+0x518>
   11658:	f64b 43cc 	movw	r3, #48332	; 0xbccc
   1165c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11660:	899b      	ldrh	r3, [r3, #12]
   11662:	b21b      	sxth	r3, r3
   11664:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   11668:	da06      	bge.n	11678 <last_radio_from_ppm+0x518>
   1166a:	f64b 43cc 	movw	r3, #48332	; 0xbccc
   1166e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11672:	f64d 2280 	movw	r2, #55936	; 0xda80
   11676:	819a      	strh	r2, [r3, #12]
   11678:	f64b 43e0 	movw	r3, #48352	; 0xbce0
   1167c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11680:	89da      	ldrh	r2, [r3, #14]
   11682:	f64b 43cc 	movw	r3, #48332	; 0xbccc
   11686:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1168a:	81da      	strh	r2, [r3, #14]
   1168c:	f64b 43e0 	movw	r3, #48352	; 0xbce0
   11690:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11694:	2200      	movs	r2, #0
   11696:	81da      	strh	r2, [r3, #14]
   11698:	f64b 43cc 	movw	r3, #48332	; 0xbccc
   1169c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   116a0:	89db      	ldrh	r3, [r3, #14]
   116a2:	b21b      	sxth	r3, r3
   116a4:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   116a8:	dd07      	ble.n	116ba <last_radio_from_ppm+0x55a>
   116aa:	f64b 43cc 	movw	r3, #48332	; 0xbccc
   116ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   116b2:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   116b6:	81da      	strh	r2, [r3, #14]
   116b8:	e00f      	b.n	116da <last_radio_from_ppm+0x57a>
   116ba:	f64b 43cc 	movw	r3, #48332	; 0xbccc
   116be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   116c2:	89db      	ldrh	r3, [r3, #14]
   116c4:	b21b      	sxth	r3, r3
   116c6:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   116ca:	da06      	bge.n	116da <last_radio_from_ppm+0x57a>
   116cc:	f64b 43cc 	movw	r3, #48332	; 0xbccc
   116d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   116d4:	f64d 2280 	movw	r2, #55936	; 0xda80
   116d8:	81da      	strh	r2, [r3, #14]
   116da:	f64b 43e0 	movw	r3, #48352	; 0xbce0
   116de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   116e2:	8a1a      	ldrh	r2, [r3, #16]
   116e4:	f64b 43cc 	movw	r3, #48332	; 0xbccc
   116e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   116ec:	821a      	strh	r2, [r3, #16]
   116ee:	f64b 43e0 	movw	r3, #48352	; 0xbce0
   116f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   116f6:	2200      	movs	r2, #0
   116f8:	821a      	strh	r2, [r3, #16]
   116fa:	f64b 43cc 	movw	r3, #48332	; 0xbccc
   116fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11702:	8a1b      	ldrh	r3, [r3, #16]
   11704:	b21b      	sxth	r3, r3
   11706:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1170a:	dd07      	ble.n	1171c <last_radio_from_ppm+0x5bc>
   1170c:	f64b 43cc 	movw	r3, #48332	; 0xbccc
   11710:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11714:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   11718:	821a      	strh	r2, [r3, #16]
   1171a:	e00f      	b.n	1173c <last_radio_from_ppm+0x5dc>
   1171c:	f64b 43cc 	movw	r3, #48332	; 0xbccc
   11720:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11724:	8a1b      	ldrh	r3, [r3, #16]
   11726:	b21b      	sxth	r3, r3
   11728:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   1172c:	da06      	bge.n	1173c <last_radio_from_ppm+0x5dc>
   1172e:	f64b 43cc 	movw	r3, #48332	; 0xbccc
   11732:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11736:	f64d 2280 	movw	r2, #55936	; 0xda80
   1173a:	821a      	strh	r2, [r3, #16]
   1173c:	f64b 43f2 	movw	r3, #48370	; 0xbcf2
   11740:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11744:	2201      	movs	r2, #1
   11746:	701a      	strb	r2, [r3, #0]
}
   11748:	370c      	adds	r7, #12
   1174a:	46bd      	mov	sp, r7
   1174c:	bd90      	pop	{r4, r7, pc}
   1174e:	bf00      	nop

00011750 <spi_reset>:
volatile bool_t spi_was_interrupted = FALSE;

static volatile uint8_t idx_buf = 0;
static volatile uint8_t xor_in, xor_out;

void spi_reset(void) {
   11750:	b480      	push	{r7}
   11752:	af00      	add	r7, sp, #0
  idx_buf = 0;
   11754:	f64b 532c 	movw	r3, #48428	; 0xbd2c
   11758:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1175c:	2200      	movs	r2, #0
   1175e:	701a      	strb	r2, [r3, #0]
  xor_in = 0;
   11760:	f64b 532d 	movw	r3, #48429	; 0xbd2d
   11764:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11768:	2200      	movs	r2, #0
   1176a:	701a      	strb	r2, [r3, #0]
  xor_out = ((uint8_t*)&to_mega128)[idx_buf];
   1176c:	f64b 532c 	movw	r3, #48428	; 0xbd2c
   11770:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11774:	781b      	ldrb	r3, [r3, #0]
   11776:	b2db      	uxtb	r3, r3
   11778:	461a      	mov	r2, r3
   1177a:	f64b 5314 	movw	r3, #48404	; 0xbd14
   1177e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11782:	4413      	add	r3, r2
   11784:	781a      	ldrb	r2, [r3, #0]
   11786:	f64b 532e 	movw	r3, #48430	; 0xbd2e
   1178a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1178e:	701a      	strb	r2, [r3, #0]
  SPDR = xor_out;
   11790:	f248 030f 	movw	r3, #32783	; 0x800f
   11794:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11798:	f64b 522e 	movw	r2, #48430	; 0xbd2e
   1179c:	f2c2 0204 	movt	r2, #8196	; 0x2004
   117a0:	7812      	ldrb	r2, [r2, #0]
   117a2:	b2d2      	uxtb	r2, r2
   117a4:	701a      	strb	r2, [r3, #0]
  mega128_receive_valid = FALSE;
   117a6:	f64b 532a 	movw	r3, #48426	; 0xbd2a
   117aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117ae:	2200      	movs	r2, #0
   117b0:	701a      	strb	r2, [r3, #0]
}
   117b2:	46bd      	mov	sp, r7
   117b4:	f85d 7b04 	ldr.w	r7, [sp], #4
   117b8:	4770      	bx	lr
   117ba:	bf00      	nop

000117bc <fbw_spi_init>:

void fbw_spi_init(void) {
   117bc:	b480      	push	{r7}
   117be:	af00      	add	r7, sp, #0
  to_mega128.status = 0;
   117c0:	f64b 5314 	movw	r3, #48404	; 0xbd14
   117c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117c8:	2200      	movs	r2, #0
   117ca:	74da      	strb	r2, [r3, #19]
  to_mega128.nb_err = 0;
   117cc:	f64b 5314 	movw	r3, #48404	; 0xbd14
   117d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117d4:	2200      	movs	r2, #0
   117d6:	751a      	strb	r2, [r3, #20]

  /* set it pin output */
  //  IT_DDR |= _BV(IT_PIN);

  /* set MISO pin output */
  SPI_DDR |= _BV(SPI_MISO_PIN);
   117d8:	f248 0317 	movw	r3, #32791	; 0x8017
   117dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117e0:	f248 0217 	movw	r2, #32791	; 0x8017
   117e4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   117e8:	7812      	ldrb	r2, [r2, #0]
   117ea:	b2d2      	uxtb	r2, r2
   117ec:	f042 0210 	orr.w	r2, r2, #16
   117f0:	b2d2      	uxtb	r2, r2
   117f2:	701a      	strb	r2, [r3, #0]
  /* enable SPI, slave, MSB first, sck idle low */
  SPCR = _BV(SPE);
   117f4:	f248 030d 	movw	r3, #32781	; 0x800d
   117f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117fc:	2240      	movs	r2, #64	; 0x40
   117fe:	701a      	strb	r2, [r3, #0]
  /* enable interrupt */
  SPCR |= _BV(SPIE);
   11800:	f248 030d 	movw	r3, #32781	; 0x800d
   11804:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11808:	f248 020d 	movw	r2, #32781	; 0x800d
   1180c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11810:	7812      	ldrb	r2, [r2, #0]
   11812:	b2d2      	uxtb	r2, r2
   11814:	f062 027f 	orn	r2, r2, #127	; 0x7f
   11818:	b2d2      	uxtb	r2, r2
   1181a:	701a      	strb	r2, [r3, #0]
}
   1181c:	46bd      	mov	sp, r7
   1181e:	f85d 7b04 	ldr.w	r7, [sp], #4
   11822:	4770      	bx	lr
   11824:	0000      	movs	r0, r0
	...

00011828 <timer_init>:
 * running at Clk/1024.  For 16 Mhz clock, this will be every
 * 16384 microseconds, or 61 Hz.
 */
static inline void
timer_init( void )
{
   11828:	b480      	push	{r7}
   1182a:	af00      	add	r7, sp, #0
  /* Timer1 @ Clk/1: System clock, ppm and servos pulses */
  TCCR1A		= 0x00;
   1182c:	f248 032f 	movw	r3, #32815	; 0x802f
   11830:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11834:	2200      	movs	r2, #0
   11836:	701a      	strb	r2, [r3, #0]
  TCCR1B		= 0x01;
   11838:	f248 032e 	movw	r3, #32814	; 0x802e
   1183c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11840:	2201      	movs	r2, #1
   11842:	701a      	strb	r2, [r3, #0]
  
  /* Timer2 @ Clk/1024: Periodic clock            */
  TCCR2		= 0x07;
   11844:	f248 0325 	movw	r3, #32805	; 0x8025
   11848:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1184c:	2207      	movs	r2, #7
   1184e:	701a      	strb	r2, [r3, #0]
}
   11850:	46bd      	mov	sp, r7
   11852:	f85d 7b04 	ldr.w	r7, [sp], #4
   11856:	4770      	bx	lr

00011858 <ppm_init>:
 *
 * JR might be rising edge clocked; set that as an option
 */
static inline void
ppm_init( void )
{
   11858:	b480      	push	{r7}
   1185a:	af00      	add	r7, sp, #0
#if   PPM_RX_TYPE == RXFUTABA
  cbi( TCCR1B, ICES1 );
   1185c:	f248 032e 	movw	r3, #32814	; 0x802e
   11860:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11864:	f248 022e 	movw	r2, #32814	; 0x802e
   11868:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1186c:	7812      	ldrb	r2, [r2, #0]
   1186e:	b2d2      	uxtb	r2, r2
   11870:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   11874:	b2d2      	uxtb	r2, r2
   11876:	701a      	strb	r2, [r3, #0]
#else
#	error "ppm.h: Unknown receiver type in PPM_RX_TYPE"
#endif

  /* No noise cancelation */
  sbi( TCCR1B, ICNC1 );
   11878:	f248 032e 	movw	r3, #32814	; 0x802e
   1187c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11880:	f248 022e 	movw	r2, #32814	; 0x802e
   11884:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11888:	7812      	ldrb	r2, [r2, #0]
   1188a:	b2d2      	uxtb	r2, r2
   1188c:	f062 027f 	orn	r2, r2, #127	; 0x7f
   11890:	b2d2      	uxtb	r2, r2
   11892:	701a      	strb	r2, [r3, #0]
  
  /* Set ICP to input, no internal pull up */
  cbi( PPM_DDR, PPM_PIN);
   11894:	f248 0317 	movw	r3, #32791	; 0x8017
   11898:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1189c:	f248 0217 	movw	r2, #32791	; 0x8017
   118a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   118a4:	7812      	ldrb	r2, [r2, #0]
   118a6:	b2d2      	uxtb	r2, r2
   118a8:	f022 0201 	bic.w	r2, r2, #1
   118ac:	b2d2      	uxtb	r2, r2
   118ae:	701a      	strb	r2, [r3, #0]
  
  /* Enable interrupt on input capture */
  sbi( TIMSK, TICIE1 );
   118b0:	f248 0337 	movw	r3, #32823	; 0x8037
   118b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118b8:	f248 0237 	movw	r2, #32823	; 0x8037
   118bc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   118c0:	7812      	ldrb	r2, [r2, #0]
   118c2:	b2d2      	uxtb	r2, r2
   118c4:	f042 0220 	orr.w	r2, r2, #32
   118c8:	b2d2      	uxtb	r2, r2
   118ca:	701a      	strb	r2, [r3, #0]
}
   118cc:	46bd      	mov	sp, r7
   118ce:	f85d 7b04 	ldr.w	r7, [sp], #4
   118d2:	4770      	bx	lr

000118d4 <to_autopilot_from_last_radio>:
/*   uart_transmit('\n'); */
/* } */


/* Prepare data to be sent to mcu0 */
void to_autopilot_from_last_radio (void) {
   118d4:	b580      	push	{r7, lr}
   118d6:	b082      	sub	sp, #8
   118d8:	af00      	add	r7, sp, #0
  uint8_t i;
  for(i = 0; i < RADIO_CTL_NB; i++)
   118da:	2300      	movs	r3, #0
   118dc:	71fb      	strb	r3, [r7, #7]
   118de:	e010      	b.n	11902 <to_autopilot_from_last_radio+0x2e>
      to_mega128.channels[i] = last_radio[i];
   118e0:	79fa      	ldrb	r2, [r7, #7]
   118e2:	79f9      	ldrb	r1, [r7, #7]
   118e4:	f64b 43cc 	movw	r3, #48332	; 0xbccc
   118e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118ec:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
   118f0:	f64b 5314 	movw	r3, #48404	; 0xbd14
   118f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118f8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]


/* Prepare data to be sent to mcu0 */
void to_autopilot_from_last_radio (void) {
  uint8_t i;
  for(i = 0; i < RADIO_CTL_NB; i++)
   118fc:	79fb      	ldrb	r3, [r7, #7]
   118fe:	3301      	adds	r3, #1
   11900:	71fb      	strb	r3, [r7, #7]
   11902:	79fb      	ldrb	r3, [r7, #7]
   11904:	2b08      	cmp	r3, #8
   11906:	d9eb      	bls.n	118e0 <to_autopilot_from_last_radio+0xc>
      to_mega128.channels[i] = last_radio[i];

  to_mega128.status = (radio_ok ? _BV(STATUS_RADIO_OK) : 0);
   11908:	f64b 53bc 	movw	r3, #48572	; 0xbdbc
   1190c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11910:	781b      	ldrb	r3, [r3, #0]
   11912:	2b00      	cmp	r3, #0
   11914:	bf0c      	ite	eq
   11916:	2300      	moveq	r3, #0
   11918:	2301      	movne	r3, #1
   1191a:	b2db      	uxtb	r3, r3
   1191c:	461a      	mov	r2, r3
   1191e:	f64b 5314 	movw	r3, #48404	; 0xbd14
   11922:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11926:	74da      	strb	r2, [r3, #19]
  to_mega128.status |= (radio_really_lost ? _BV(RADIO_REALLY_LOST) : 0);
   11928:	f64b 5314 	movw	r3, #48404	; 0xbd14
   1192c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11930:	7cdb      	ldrb	r3, [r3, #19]
   11932:	b2da      	uxtb	r2, r3
   11934:	f64b 53be 	movw	r3, #48574	; 0xbdbe
   11938:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1193c:	781b      	ldrb	r3, [r3, #0]
   1193e:	2b00      	cmp	r3, #0
   11940:	d001      	beq.n	11946 <to_autopilot_from_last_radio+0x72>
   11942:	2302      	movs	r3, #2
   11944:	e000      	b.n	11948 <to_autopilot_from_last_radio+0x74>
   11946:	2300      	movs	r3, #0
   11948:	4313      	orrs	r3, r2
   1194a:	b2db      	uxtb	r3, r3
   1194c:	b2da      	uxtb	r2, r3
   1194e:	f64b 5314 	movw	r3, #48404	; 0xbd14
   11952:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11956:	74da      	strb	r2, [r3, #19]
  if (last_radio_contains_avg_channels) {
   11958:	f64b 43f2 	movw	r3, #48370	; 0xbcf2
   1195c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11960:	781b      	ldrb	r3, [r3, #0]
   11962:	2b00      	cmp	r3, #0
   11964:	d012      	beq.n	1198c <to_autopilot_from_last_radio+0xb8>
      to_mega128.status |= _BV(AVERAGED_CHANNELS_SENT);
   11966:	f64b 5314 	movw	r3, #48404	; 0xbd14
   1196a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1196e:	7cdb      	ldrb	r3, [r3, #19]
   11970:	f043 0304 	orr.w	r3, r3, #4
   11974:	b2da      	uxtb	r2, r3
   11976:	f64b 5314 	movw	r3, #48404	; 0xbd14
   1197a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1197e:	74da      	strb	r2, [r3, #19]
      last_radio_contains_avg_channels = FALSE;
   11980:	f64b 43f2 	movw	r3, #48370	; 0xbcf2
   11984:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11988:	2200      	movs	r2, #0
   1198a:	701a      	strb	r2, [r3, #0]
  }
  to_mega128.ppm_cpt = last_ppm_cpt;
   1198c:	f64b 53c0 	movw	r3, #48576	; 0xbdc0
   11990:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11994:	781a      	ldrb	r2, [r3, #0]
   11996:	f64b 5314 	movw	r3, #48404	; 0xbd14
   1199a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1199e:	749a      	strb	r2, [r3, #18]
#ifndef CTL_BRD_V1_1
  to_mega128.vsupply = VoltageOfAdc(vsupply_adc_buf.sum/AV_NB_SAMPLE) * 10;
   119a0:	f64b 5330 	movw	r3, #48432	; 0xbd30
   119a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119a8:	881b      	ldrh	r3, [r3, #0]
   119aa:	4618      	mov	r0, r3
   119ac:	f001 f8ce 	bl	12b4c <__aeabi_i2d>
   119b0:	4602      	mov	r2, r0
   119b2:	460b      	mov	r3, r1
   119b4:	4610      	mov	r0, r2
   119b6:	4619      	mov	r1, r3
   119b8:	a31b      	add	r3, pc, #108	; (adr r3, 11a28 <to_autopilot_from_last_radio+0x154>)
   119ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   119be:	f001 f92b 	bl	12c18 <__aeabi_dmul>
   119c2:	4602      	mov	r2, r0
   119c4:	460b      	mov	r3, r1
   119c6:	4610      	mov	r0, r2
   119c8:	4619      	mov	r1, r3
   119ca:	f04f 0200 	mov.w	r2, #0
   119ce:	f04f 0300 	mov.w	r3, #0
   119d2:	f2c4 0340 	movt	r3, #16448	; 0x4040
   119d6:	f001 fa49 	bl	12e6c <__aeabi_ddiv>
   119da:	4602      	mov	r2, r0
   119dc:	460b      	mov	r3, r1
   119de:	4610      	mov	r0, r2
   119e0:	4619      	mov	r1, r3
   119e2:	a313      	add	r3, pc, #76	; (adr r3, 11a30 <to_autopilot_from_last_radio+0x15c>)
   119e4:	e9d3 2300 	ldrd	r2, r3, [r3]
   119e8:	f000 ff64 	bl	128b4 <__adddf3>
   119ec:	4602      	mov	r2, r0
   119ee:	460b      	mov	r3, r1
   119f0:	4610      	mov	r0, r2
   119f2:	4619      	mov	r1, r3
   119f4:	f04f 0200 	mov.w	r2, #0
   119f8:	f04f 0300 	mov.w	r3, #0
   119fc:	f2c4 0324 	movt	r3, #16420	; 0x4024
   11a00:	f001 f90a 	bl	12c18 <__aeabi_dmul>
   11a04:	4602      	mov	r2, r0
   11a06:	460b      	mov	r3, r1
   11a08:	4610      	mov	r0, r2
   11a0a:	4619      	mov	r1, r3
   11a0c:	f001 fbc6 	bl	1319c <__aeabi_d2uiz>
   11a10:	4603      	mov	r3, r0
   11a12:	b2da      	uxtb	r2, r3
   11a14:	f64b 5314 	movw	r3, #48404	; 0xbd14
   11a18:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a1c:	755a      	strb	r2, [r3, #21]
#else
  to_mega128.vsupply = 0;
#endif
}
   11a1e:	3708      	adds	r7, #8
   11a20:	46bd      	mov	sp, r7
   11a22:	bd80      	pop	{r7, pc}
   11a24:	f3af 8000 	nop.w
   11a28:	1eb851ec 	.word	0x1eb851ec
   11a2c:	3f91eb85 	.word	0x3f91eb85
   11a30:	020c49ba 	.word	0x020c49ba
   11a34:	3fb6872b 	.word	0x3fb6872b

00011a38 <send_data_to_autopilot_task>:

void send_data_to_autopilot_task(void)
{
   11a38:	b580      	push	{r7, lr}
   11a3a:	af00      	add	r7, sp, #0
	//vPrintString("S_2 send_data_to_autopilot_task start! \n\r"); //SunnyBeike

    // modified by wanbo
//   if ( !SpiIsSelected() && spi_was_interrupted ) 
   {
      spi_was_interrupted = FALSE;
   11a3c:	f64b 532b 	movw	r3, #48427	; 0xbd2b
   11a40:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a44:	2200      	movs	r2, #0
   11a46:	701a      	strb	r2, [r3, #0]
      to_autopilot_from_last_radio();
   11a48:	f7ff ff44 	bl	118d4 <to_autopilot_from_last_radio>
      spi_reset();
   11a4c:	f7ff fe80 	bl	11750 <spi_reset>
   }
	//vPrintString("S_2 send_data_to_autopilot_task end! \n\r"); //SunnyBeike

}
   11a50:	bd80      	pop	{r7, pc}
   11a52:	bf00      	nop

00011a54 <fbw_init>:
	static uint8_t _1Hz;
	static uint8_t _20Hz;
#endif
*/

void fbw_init(void) {
   11a54:	b580      	push	{r7, lr}
   11a56:	af00      	add	r7, sp, #0
  uart_init_tx();
   11a58:	f000 fb16 	bl	12088 <uart_init_tx>
  uart_print_string("FBW Booting $Id: main.c,v 1.3 2008/10/22 19:41:19 casse Exp $\n\r");
   11a5c:	f643 302c 	movw	r0, #15148	; 0x3b2c
   11a60:	f2c0 0001 	movt	r0, #1
   11a64:	f000 fbee 	bl	12244 <uart_print_string>

#ifndef CTL_BRD_V1_1
  fbw_adc_init();
   11a68:	f7ff fab2 	bl	10fd0 <fbw_adc_init>
  fbw_adc_buf_channel(3, &vsupply_adc_buf);
   11a6c:	2003      	movs	r0, #3
   11a6e:	f64b 5130 	movw	r1, #48432	; 0xbd30
   11a72:	f2c2 0104 	movt	r1, #8196	; 0x2004
   11a76:	f7ff fa97 	bl	10fa8 <fbw_adc_buf_channel>
  fbw_adc_buf_channel(6, &vservos_adc_buf);
   11a7a:	2006      	movs	r0, #6
   11a7c:	f64b 5174 	movw	r1, #48500	; 0xbd74
   11a80:	f2c2 0104 	movt	r1, #8196	; 0x2004
   11a84:	f7ff fa90 	bl	10fa8 <fbw_adc_buf_channel>
#endif
  timer_init();
   11a88:	f7ff fece 	bl	11828 <timer_init>
  servo_init();
   11a8c:	f000 f8a8 	bl	11be0 <servo_init>
  ppm_init();
   11a90:	f7ff fee2 	bl	11858 <ppm_init>
  fbw_spi_init();
   11a94:	f7ff fe92 	bl	117bc <fbw_spi_init>
  //sei(); //FN
}
   11a98:	bd80      	pop	{r7, pc}
   11a9a:	bf00      	nop

00011a9c <test_ppm_task>:
  return 0;
}
#endif
*/
void test_ppm_task(void)
{
   11a9c:	b580      	push	{r7, lr}
   11a9e:	af00      	add	r7, sp, #0
	//vPrintString("S_1 test_ppm_task start! \n\r"); //SunnyBeike
    // modified by wanbo
    //if( ppm_valid ) 
    {
      ppm_valid = FALSE;
   11aa0:	f64b 43f3 	movw	r3, #48371	; 0xbcf3
   11aa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11aa8:	2200      	movs	r2, #0
   11aaa:	701a      	strb	r2, [r3, #0]
      ppm_cpt++;
   11aac:	f64b 53bf 	movw	r3, #48575	; 0xbdbf
   11ab0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ab4:	781b      	ldrb	r3, [r3, #0]
   11ab6:	3301      	adds	r3, #1
   11ab8:	b2da      	uxtb	r2, r3
   11aba:	f64b 53bf 	movw	r3, #48575	; 0xbdbf
   11abe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ac2:	701a      	strb	r2, [r3, #0]
      radio_ok = TRUE;
   11ac4:	f64b 53bc 	movw	r3, #48572	; 0xbdbc
   11ac8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11acc:	2201      	movs	r2, #1
   11ace:	701a      	strb	r2, [r3, #0]
      radio_really_lost = FALSE;
   11ad0:	f64b 53be 	movw	r3, #48574	; 0xbdbe
   11ad4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ad8:	2200      	movs	r2, #0
   11ada:	701a      	strb	r2, [r3, #0]
      time_since_last_ppm = 0;
   11adc:	f64b 53ba 	movw	r3, #48570	; 0xbdba
   11ae0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ae4:	2200      	movs	r2, #0
   11ae6:	801a      	strh	r2, [r3, #0]
      last_radio_from_ppm();
   11ae8:	f7ff fb3a 	bl	11160 <last_radio_from_ppm>
      //if (last_radio_contains_avg_channels) 
      {
	mode = MODE_OF_PPRZ(last_radio[RADIO_MODE]);
   11aec:	f64b 43cc 	movw	r3, #48332	; 0xbccc
   11af0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11af4:	891b      	ldrh	r3, [r3, #8]
   11af6:	b21b      	sxth	r3, r3
   11af8:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
   11afc:	bfb4      	ite	lt
   11afe:	2300      	movlt	r3, #0
   11b00:	2301      	movge	r3, #1
   11b02:	b2db      	uxtb	r3, r3
   11b04:	461a      	mov	r2, r3
   11b06:	f64b 53b8 	movw	r3, #48568	; 0xbdb8
   11b0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b0e:	701a      	strb	r2, [r3, #0]
      }
      if (mode == MODE_MANUAL) 
   11b10:	f64b 53b8 	movw	r3, #48568	; 0xbdb8
   11b14:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b18:	781b      	ldrb	r3, [r3, #0]
   11b1a:	2b00      	cmp	r3, #0
   11b1c:	d105      	bne.n	11b2a <test_ppm_task+0x8e>
      {
	servo_set(last_radio);
   11b1e:	f64b 40cc 	movw	r0, #48332	; 0xbccc
   11b22:	f2c2 0004 	movt	r0, #8196	; 0x2004
   11b26:	f000 f939 	bl	11d9c <servo_set>
      }
    } 
    //else if (mode == MODE_MANUAL && radio_really_lost) 
    {
      mode = MODE_AUTO;
   11b2a:	f64b 53b8 	movw	r3, #48568	; 0xbdb8
   11b2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b32:	2201      	movs	r2, #1
   11b34:	701a      	strb	r2, [r3, #0]
    }
    //if (time_since_last_ppm >= STALLED_TIME) 
    {
      radio_ok = FALSE;
   11b36:	f64b 53bc 	movw	r3, #48572	; 0xbdbc
   11b3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b3e:	2200      	movs	r2, #0
   11b40:	701a      	strb	r2, [r3, #0]
    }
    //if (time_since_last_ppm >= REALLY_STALLED_TIME) 
    {
      radio_really_lost = TRUE;
   11b42:	f64b 53be 	movw	r3, #48574	; 0xbdbe
   11b46:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b4a:	2201      	movs	r2, #1
   11b4c:	701a      	strb	r2, [r3, #0]
    }
	//vPrintString("S_1 test_ppm_task end! \n\r"); //SunnyBeike

}
   11b4e:	bd80      	pop	{r7, pc}

00011b50 <check_failsafe_task>:
void check_failsafe_task(void)
{
   11b50:	b580      	push	{r7, lr}
   11b52:	af00      	add	r7, sp, #0
	//vPrintString("S_9 check_failsafe_task start! \n\r"); //SunnyBeike
    //modified by wanbo
    if ((mode == MODE_MANUAL && !radio_ok) || (mode == MODE_AUTO && !mega128_ok)) 
   11b54:	f64b 53b8 	movw	r3, #48568	; 0xbdb8
   11b58:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b5c:	781b      	ldrb	r3, [r3, #0]
   11b5e:	2b00      	cmp	r3, #0
   11b60:	d106      	bne.n	11b70 <check_failsafe_task+0x20>
   11b62:	f64b 53bc 	movw	r3, #48572	; 0xbdbc
   11b66:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b6a:	781b      	ldrb	r3, [r3, #0]
   11b6c:	2b00      	cmp	r3, #0
   11b6e:	d00d      	beq.n	11b8c <check_failsafe_task+0x3c>
   11b70:	f64b 53b8 	movw	r3, #48568	; 0xbdb8
   11b74:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b78:	781b      	ldrb	r3, [r3, #0]
   11b7a:	2b01      	cmp	r3, #1
   11b7c:	d10c      	bne.n	11b98 <check_failsafe_task+0x48>
   11b7e:	f64b 53bd 	movw	r3, #48573	; 0xbdbd
   11b82:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b86:	781b      	ldrb	r3, [r3, #0]
   11b88:	2b00      	cmp	r3, #0
   11b8a:	d105      	bne.n	11b98 <check_failsafe_task+0x48>
    {
      servo_set(failsafe);
   11b8c:	f643 3018 	movw	r0, #15128	; 0x3b18
   11b90:	f2c0 0001 	movt	r0, #1
   11b94:	f000 f902 	bl	11d9c <servo_set>
    }
	//vPrintString("S_9 check_failsafe_task end! \n\r"); //SunnyBeike
}
   11b98:	bd80      	pop	{r7, pc}
   11b9a:	bf00      	nop

00011b9c <check_mega128_values_task>:
void check_mega128_values_task(void)
{
   11b9c:	b580      	push	{r7, lr}
   11b9e:	af00      	add	r7, sp, #0
     //if ( !SpiIsSelected() && spi_was_interrupted ) 
     {
         
        // if (mega128_receive_valid)
         { 
             time_since_last_mega128 = 0;
   11ba0:	f64b 53b9 	movw	r3, #48569	; 0xbdb9
   11ba4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ba8:	2200      	movs	r2, #0
   11baa:	701a      	strb	r2, [r3, #0]
             mega128_ok = TRUE;
   11bac:	f64b 53bd 	movw	r3, #48573	; 0xbdbd
   11bb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bb4:	2201      	movs	r2, #1
   11bb6:	701a      	strb	r2, [r3, #0]
             if (mode == MODE_AUTO)
   11bb8:	f64b 53b8 	movw	r3, #48568	; 0xbdb8
   11bbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bc0:	781b      	ldrb	r3, [r3, #0]
   11bc2:	2b01      	cmp	r3, #1
   11bc4:	d105      	bne.n	11bd2 <check_mega128_values_task+0x36>
                 servo_set(from_mega128.channels);
   11bc6:	f64b 40fc 	movw	r0, #48380	; 0xbcfc
   11bca:	f2c2 0004 	movt	r0, #8196	; 0x2004
   11bce:	f000 f8e5 	bl	11d9c <servo_set>
         }
     }
     //if (time_since_last_mega128 == STALLED_TIME) 
     {
         mega128_ok = FALSE;
   11bd2:	f64b 53bd 	movw	r3, #48573	; 0xbdbd
   11bd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bda:	2200      	movs	r2, #0
   11bdc:	701a      	strb	r2, [r3, #0]
     }
	//vPrintString("S_8 check_mega128_values_task end! \n\r"); //SunnyBeike
}
   11bde:	bd80      	pop	{r7, pc}

00011be0 <servo_init>:
 *
 * Ideally, you can use two decade counters to drive 20 servos.
 */
void
servo_init( void )
{
   11be0:	b480      	push	{r7}
   11be2:	b083      	sub	sp, #12
   11be4:	af00      	add	r7, sp, #0
  uint8_t			i;

  /* Configure the reset and clock lines */
  _4017_RESET_DDR |= _BV(_4017_RESET_PIN);
   11be6:	f248 0311 	movw	r3, #32785	; 0x8011
   11bea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11bee:	f248 0211 	movw	r2, #32785	; 0x8011
   11bf2:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11bf6:	7812      	ldrb	r2, [r2, #0]
   11bf8:	b2d2      	uxtb	r2, r2
   11bfa:	f062 027f 	orn	r2, r2, #127	; 0x7f
   11bfe:	b2d2      	uxtb	r2, r2
   11c00:	701a      	strb	r2, [r3, #0]
  _4017_CLOCK_DDR |= _BV(_4017_CLOCK_PIN);
   11c02:	f248 0317 	movw	r3, #32791	; 0x8017
   11c06:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c0a:	f248 0217 	movw	r2, #32791	; 0x8017
   11c0e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11c12:	7812      	ldrb	r2, [r2, #0]
   11c14:	b2d2      	uxtb	r2, r2
   11c16:	f042 0202 	orr.w	r2, r2, #2
   11c1a:	b2d2      	uxtb	r2, r2
   11c1c:	701a      	strb	r2, [r3, #0]

  /* Reset the decade counter */
  sbi( _4017_RESET_PORT, _4017_RESET_PIN );
   11c1e:	f248 0312 	movw	r3, #32786	; 0x8012
   11c22:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c26:	f248 0212 	movw	r2, #32786	; 0x8012
   11c2a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11c2e:	7812      	ldrb	r2, [r2, #0]
   11c30:	b2d2      	uxtb	r2, r2
   11c32:	f062 027f 	orn	r2, r2, #127	; 0x7f
   11c36:	b2d2      	uxtb	r2, r2
   11c38:	701a      	strb	r2, [r3, #0]

  /* Lower the regular servo line */
  cbi( _4017_CLOCK_PORT, _4017_CLOCK_PIN );
   11c3a:	f248 0318 	movw	r3, #32792	; 0x8018
   11c3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c42:	f248 0218 	movw	r2, #32792	; 0x8018
   11c46:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11c4a:	7812      	ldrb	r2, [r2, #0]
   11c4c:	b2d2      	uxtb	r2, r2
   11c4e:	f022 0202 	bic.w	r2, r2, #2
   11c52:	b2d2      	uxtb	r2, r2
   11c54:	701a      	strb	r2, [r3, #0]

  /* Set all servos at their midpoints */
  for( i=0 ; i < _4017_NB_CHANNELS ; i++ )
   11c56:	2300      	movs	r3, #0
   11c58:	71fb      	strb	r3, [r7, #7]
   11c5a:	e00b      	b.n	11c74 <servo_init+0x94>
    //    servo_widths[i] = SERVO_MIN;
    servo_widths[i] = (SERVO_MIN+SERVO_MAX)/2;
   11c5c:	79fa      	ldrb	r2, [r7, #7]
   11c5e:	f64b 53c4 	movw	r3, #48580	; 0xbdc4
   11c62:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c66:	f645 51c0 	movw	r1, #24000	; 0x5dc0
   11c6a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

  /* Lower the regular servo line */
  cbi( _4017_CLOCK_PORT, _4017_CLOCK_PIN );

  /* Set all servos at their midpoints */
  for( i=0 ; i < _4017_NB_CHANNELS ; i++ )
   11c6e:	79fb      	ldrb	r3, [r7, #7]
   11c70:	3301      	adds	r3, #1
   11c72:	71fb      	strb	r3, [r7, #7]
   11c74:	79fb      	ldrb	r3, [r7, #7]
   11c76:	2b09      	cmp	r3, #9
   11c78:	d9f0      	bls.n	11c5c <servo_init+0x7c>
    //    servo_widths[i] = SERVO_MIN;
    servo_widths[i] = (SERVO_MIN+SERVO_MAX)/2;
	
  /* Set servos to go off some long time from now */
  SERVO_OCR	= 32768ul;
   11c7a:	f248 032a 	movw	r3, #32810	; 0x802a
   11c7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c82:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   11c86:	801a      	strh	r2, [r3, #0]

  /*
   * Configure output compare to toggle the output bits.
   */
  TCCR1A |=  _BV(SERVO_COM0 );
   11c88:	f248 032f 	movw	r3, #32815	; 0x802f
   11c8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c90:	f248 022f 	movw	r2, #32815	; 0x802f
   11c94:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11c98:	7812      	ldrb	r2, [r2, #0]
   11c9a:	b2d2      	uxtb	r2, r2
   11c9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   11ca0:	b2d2      	uxtb	r2, r2
   11ca2:	701a      	strb	r2, [r3, #0]
	
  /* Clear the interrupt flags in case they are set */
  TIFR = _BV(SERVO_FLAG);
   11ca4:	f248 0336 	movw	r3, #32822	; 0x8036
   11ca8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11cac:	2210      	movs	r2, #16
   11cae:	701a      	strb	r2, [r3, #0]

  /* Unassert the decade counter reset to start it running */
  cbi( _4017_RESET_PORT, _4017_RESET_PIN );
   11cb0:	f248 0312 	movw	r3, #32786	; 0x8012
   11cb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11cb8:	f248 0212 	movw	r2, #32786	; 0x8012
   11cbc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11cc0:	7812      	ldrb	r2, [r2, #0]
   11cc2:	b2d2      	uxtb	r2, r2
   11cc4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   11cc8:	b2d2      	uxtb	r2, r2
   11cca:	701a      	strb	r2, [r3, #0]

  /* Enable our output compare interrupts */
  TIMSK |= _BV(SERVO_ENABLE );
   11ccc:	f248 0337 	movw	r3, #32823	; 0x8037
   11cd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11cd4:	f248 0237 	movw	r2, #32823	; 0x8037
   11cd8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11cdc:	7812      	ldrb	r2, [r2, #0]
   11cde:	b2d2      	uxtb	r2, r2
   11ce0:	f042 0210 	orr.w	r2, r2, #16
   11ce4:	b2d2      	uxtb	r2, r2
   11ce6:	701a      	strb	r2, [r3, #0]
}
   11ce8:	370c      	adds	r7, #12
   11cea:	46bd      	mov	sp, r7
   11cec:	f85d 7b04 	ldr.w	r7, [sp], #4
   11cf0:	4770      	bx	lr
   11cf2:	bf00      	nop

00011cf4 <servo_set_one>:

  servo++;
}
#endif

void servo_set_one(uint8_t servo, uint16_t value_us) {
   11cf4:	b480      	push	{r7}
   11cf6:	b083      	sub	sp, #12
   11cf8:	af00      	add	r7, sp, #0
   11cfa:	4602      	mov	r2, r0
   11cfc:	460b      	mov	r3, r1
   11cfe:	71fa      	strb	r2, [r7, #7]
   11d00:	80bb      	strh	r3, [r7, #4]
  servo_widths[servo] = ChopServo(CLOCK*value_us);
   11d02:	79f9      	ldrb	r1, [r7, #7]
   11d04:	88bb      	ldrh	r3, [r7, #4]
   11d06:	011b      	lsls	r3, r3, #4
   11d08:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   11d0c:	d308      	bcc.n	11d20 <servo_set_one+0x2c>
   11d0e:	88bb      	ldrh	r3, [r7, #4]
   11d10:	011b      	lsls	r3, r3, #4
   11d12:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   11d16:	bf28      	it	cs
   11d18:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   11d1c:	b29a      	uxth	r2, r3
   11d1e:	e001      	b.n	11d24 <servo_set_one+0x30>
   11d20:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   11d24:	f64b 53c4 	movw	r3, #48580	; 0xbdc4
   11d28:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d2c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
}
   11d30:	370c      	adds	r7, #12
   11d32:	46bd      	mov	sp, r7
   11d34:	f85d 7b04 	ldr.w	r7, [sp], #4
   11d38:	4770      	bx	lr
   11d3a:	bf00      	nop

00011d3c <servo_transmit>:

void 
servo_transmit(void) {
   11d3c:	b580      	push	{r7, lr}
   11d3e:	b082      	sub	sp, #8
   11d40:	af00      	add	r7, sp, #0
  uint8_t servo;
	//vPrintString("S_10 servo_transmit start! \n\r"); //SunnyBeike
  uart_transmit((uint8_t)0); uart_transmit((uint8_t)0);
   11d42:	2000      	movs	r0, #0
   11d44:	f000 f9e6 	bl	12114 <uart_transmit>
   11d48:	2000      	movs	r0, #0
   11d4a:	f000 f9e3 	bl	12114 <uart_transmit>

  for(servo = 0; servo < _4017_NB_CHANNELS; servo++) {
   11d4e:	2300      	movs	r3, #0
   11d50:	71fb      	strb	r3, [r7, #7]
   11d52:	e01a      	b.n	11d8a <servo_transmit+0x4e>
    uart_transmit((uint8_t)(servo_widths[servo] >> 8));
   11d54:	79fa      	ldrb	r2, [r7, #7]
   11d56:	f64b 53c4 	movw	r3, #48580	; 0xbdc4
   11d5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d5e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   11d62:	0a1b      	lsrs	r3, r3, #8
   11d64:	b29b      	uxth	r3, r3
   11d66:	b2db      	uxtb	r3, r3
   11d68:	4618      	mov	r0, r3
   11d6a:	f000 f9d3 	bl	12114 <uart_transmit>
    uart_transmit((uint8_t)(servo_widths[servo] & 0xff));
   11d6e:	79fa      	ldrb	r2, [r7, #7]
   11d70:	f64b 53c4 	movw	r3, #48580	; 0xbdc4
   11d74:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d78:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   11d7c:	b2db      	uxtb	r3, r3
   11d7e:	4618      	mov	r0, r3
   11d80:	f000 f9c8 	bl	12114 <uart_transmit>
servo_transmit(void) {
  uint8_t servo;
	//vPrintString("S_10 servo_transmit start! \n\r"); //SunnyBeike
  uart_transmit((uint8_t)0); uart_transmit((uint8_t)0);

  for(servo = 0; servo < _4017_NB_CHANNELS; servo++) {
   11d84:	79fb      	ldrb	r3, [r7, #7]
   11d86:	3301      	adds	r3, #1
   11d88:	71fb      	strb	r3, [r7, #7]
   11d8a:	79fb      	ldrb	r3, [r7, #7]
   11d8c:	2b09      	cmp	r3, #9
   11d8e:	d9e1      	bls.n	11d54 <servo_transmit+0x18>
    uart_transmit((uint8_t)(servo_widths[servo] >> 8));
    uart_transmit((uint8_t)(servo_widths[servo] & 0xff));
  }
  uart_transmit((uint8_t)'\n');
   11d90:	200a      	movs	r0, #10
   11d92:	f000 f9bf 	bl	12114 <uart_transmit>
	//vPrintString("S_10 servo_transmit end! \n\r"); //SunnyBeike
}
   11d96:	3708      	adds	r7, #8
   11d98:	46bd      	mov	sp, r7
   11d9a:	bd80      	pop	{r7, pc}

00011d9c <servo_set>:
 *
 * defines how servos react to radio control or autopilot channels
 *
 */

void servo_set(const pprz_t values[]) {
   11d9c:	b5b0      	push	{r4, r5, r7, lr}
   11d9e:	b084      	sub	sp, #16
   11da0:	af00      	add	r7, sp, #0
   11da2:	6078      	str	r0, [r7, #4]
  ServoSet(values); /*Generated from airframe.xml */
   11da4:	687b      	ldr	r3, [r7, #4]
   11da6:	330a      	adds	r3, #10
   11da8:	881b      	ldrh	r3, [r3, #0]
   11daa:	b21b      	sxth	r3, r3
   11dac:	005b      	lsls	r3, r3, #1
   11dae:	4618      	mov	r0, r3
   11db0:	f000 fecc 	bl	12b4c <__aeabi_i2d>
   11db4:	4602      	mov	r2, r0
   11db6:	460b      	mov	r3, r1
   11db8:	4610      	mov	r0, r2
   11dba:	4619      	mov	r1, r3
   11dbc:	a3a6      	add	r3, pc, #664	; (adr r3, 12058 <servo_set+0x2bc>)
   11dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
   11dc2:	f000 ff29 	bl	12c18 <__aeabi_dmul>
   11dc6:	4602      	mov	r2, r0
   11dc8:	460b      	mov	r3, r1
   11dca:	4610      	mov	r0, r2
   11dcc:	4619      	mov	r1, r3
   11dce:	f001 f9bd 	bl	1314c <__aeabi_d2iz>
   11dd2:	4603      	mov	r3, r0
   11dd4:	b29b      	uxth	r3, r3
   11dd6:	b29b      	uxth	r3, r3
   11dd8:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
   11ddc:	81fb      	strh	r3, [r7, #14]
   11dde:	89fb      	ldrh	r3, [r7, #14]
   11de0:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   11de4:	d307      	bcc.n	11df6 <servo_set+0x5a>
   11de6:	89fb      	ldrh	r3, [r7, #14]
   11de8:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   11dec:	bf28      	it	cs
   11dee:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   11df2:	b29a      	uxth	r2, r3
   11df4:	e001      	b.n	11dfa <servo_set+0x5e>
   11df6:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   11dfa:	f64b 53c4 	movw	r3, #48580	; 0xbdc4
   11dfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11e02:	80da      	strh	r2, [r3, #6]
   11e04:	687b      	ldr	r3, [r7, #4]
   11e06:	881b      	ldrh	r3, [r3, #0]
   11e08:	b21b      	sxth	r3, r3
   11e0a:	005b      	lsls	r3, r3, #1
   11e0c:	4618      	mov	r0, r3
   11e0e:	f000 fe9d 	bl	12b4c <__aeabi_i2d>
   11e12:	4602      	mov	r2, r0
   11e14:	460b      	mov	r3, r1
   11e16:	4610      	mov	r0, r2
   11e18:	4619      	mov	r1, r3
   11e1a:	a38f      	add	r3, pc, #572	; (adr r3, 12058 <servo_set+0x2bc>)
   11e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
   11e20:	f000 fefa 	bl	12c18 <__aeabi_dmul>
   11e24:	4602      	mov	r2, r0
   11e26:	460b      	mov	r3, r1
   11e28:	4610      	mov	r0, r2
   11e2a:	4619      	mov	r1, r3
   11e2c:	f001 f98e 	bl	1314c <__aeabi_d2iz>
   11e30:	4603      	mov	r3, r0
   11e32:	b29b      	uxth	r3, r3
   11e34:	b29b      	uxth	r3, r3
   11e36:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
   11e3a:	81fb      	strh	r3, [r7, #14]
   11e3c:	89fb      	ldrh	r3, [r7, #14]
   11e3e:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   11e42:	d307      	bcc.n	11e54 <servo_set+0xb8>
   11e44:	89fb      	ldrh	r3, [r7, #14]
   11e46:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   11e4a:	bf28      	it	cs
   11e4c:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   11e50:	b29a      	uxth	r2, r3
   11e52:	e001      	b.n	11e58 <servo_set+0xbc>
   11e54:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   11e58:	f64b 53c4 	movw	r3, #48580	; 0xbdc4
   11e5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11e60:	825a      	strh	r2, [r3, #18]
   11e62:	687b      	ldr	r3, [r7, #4]
   11e64:	3304      	adds	r3, #4
   11e66:	881b      	ldrh	r3, [r3, #0]
   11e68:	b21b      	sxth	r3, r3
   11e6a:	4618      	mov	r0, r3
   11e6c:	f000 fe6e 	bl	12b4c <__aeabi_i2d>
   11e70:	4602      	mov	r2, r0
   11e72:	460b      	mov	r3, r1
   11e74:	4610      	mov	r0, r2
   11e76:	4619      	mov	r1, r3
   11e78:	a379      	add	r3, pc, #484	; (adr r3, 12060 <servo_set+0x2c4>)
   11e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
   11e7e:	f000 fecb 	bl	12c18 <__aeabi_dmul>
   11e82:	4602      	mov	r2, r0
   11e84:	460b      	mov	r3, r1
   11e86:	4610      	mov	r0, r2
   11e88:	4619      	mov	r1, r3
   11e8a:	f001 f95f 	bl	1314c <__aeabi_d2iz>
   11e8e:	4603      	mov	r3, r0
   11e90:	b29b      	uxth	r3, r3
   11e92:	b29b      	uxth	r3, r3
   11e94:	f503 43bf 	add.w	r3, r3, #24448	; 0x5f80
   11e98:	3320      	adds	r3, #32
   11e9a:	81fb      	strh	r3, [r7, #14]
   11e9c:	89fb      	ldrh	r3, [r7, #14]
   11e9e:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   11ea2:	d307      	bcc.n	11eb4 <servo_set+0x118>
   11ea4:	89fb      	ldrh	r3, [r7, #14]
   11ea6:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   11eaa:	bf28      	it	cs
   11eac:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   11eb0:	b29a      	uxth	r2, r3
   11eb2:	e001      	b.n	11eb8 <servo_set+0x11c>
   11eb4:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   11eb8:	f64b 53c4 	movw	r3, #48580	; 0xbdc4
   11ebc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ec0:	819a      	strh	r2, [r3, #12]
   11ec2:	687b      	ldr	r3, [r7, #4]
   11ec4:	885b      	ldrh	r3, [r3, #2]
   11ec6:	81bb      	strh	r3, [r7, #12]
   11ec8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   11ecc:	2b00      	cmp	r3, #0
   11ece:	dd06      	ble.n	11ede <servo_set+0x142>
   11ed0:	f04f 0400 	mov.w	r4, #0
   11ed4:	f04f 0500 	mov.w	r5, #0
   11ed8:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
   11edc:	e002      	b.n	11ee4 <servo_set+0x148>
   11ede:	a562      	add	r5, pc, #392	; (adr r5, 12068 <servo_set+0x2cc>)
   11ee0:	e9d5 4500 	ldrd	r4, r5, [r5]
   11ee4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   11ee8:	4618      	mov	r0, r3
   11eea:	f000 fe2f 	bl	12b4c <__aeabi_i2d>
   11eee:	4602      	mov	r2, r0
   11ef0:	460b      	mov	r3, r1
   11ef2:	4620      	mov	r0, r4
   11ef4:	4629      	mov	r1, r5
   11ef6:	f000 fe8f 	bl	12c18 <__aeabi_dmul>
   11efa:	4602      	mov	r2, r0
   11efc:	460b      	mov	r3, r1
   11efe:	4610      	mov	r0, r2
   11f00:	4619      	mov	r1, r3
   11f02:	a35b      	add	r3, pc, #364	; (adr r3, 12070 <servo_set+0x2d4>)
   11f04:	e9d3 2300 	ldrd	r2, r3, [r3]
   11f08:	f000 fe86 	bl	12c18 <__aeabi_dmul>
   11f0c:	4602      	mov	r2, r0
   11f0e:	460b      	mov	r3, r1
   11f10:	4610      	mov	r0, r2
   11f12:	4619      	mov	r1, r3
   11f14:	f001 f91a 	bl	1314c <__aeabi_d2iz>
   11f18:	4603      	mov	r3, r0
   11f1a:	b29b      	uxth	r3, r3
   11f1c:	b29b      	uxth	r3, r3
   11f1e:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
   11f22:	81fb      	strh	r3, [r7, #14]
   11f24:	89fb      	ldrh	r3, [r7, #14]
   11f26:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   11f2a:	d307      	bcc.n	11f3c <servo_set+0x1a0>
   11f2c:	89fb      	ldrh	r3, [r7, #14]
   11f2e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   11f32:	bf28      	it	cs
   11f34:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   11f38:	b29a      	uxth	r2, r3
   11f3a:	e001      	b.n	11f40 <servo_set+0x1a4>
   11f3c:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   11f40:	f64b 53c4 	movw	r3, #48580	; 0xbdc4
   11f44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11f48:	801a      	strh	r2, [r3, #0]
   11f4a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   11f4e:	2b00      	cmp	r3, #0
   11f50:	dd03      	ble.n	11f5a <servo_set+0x1be>
   11f52:	a545      	add	r5, pc, #276	; (adr r5, 12068 <servo_set+0x2cc>)
   11f54:	e9d5 4500 	ldrd	r4, r5, [r5]
   11f58:	e005      	b.n	11f66 <servo_set+0x1ca>
   11f5a:	f04f 0400 	mov.w	r4, #0
   11f5e:	f04f 0500 	mov.w	r5, #0
   11f62:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
   11f66:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   11f6a:	4618      	mov	r0, r3
   11f6c:	f000 fdee 	bl	12b4c <__aeabi_i2d>
   11f70:	4602      	mov	r2, r0
   11f72:	460b      	mov	r3, r1
   11f74:	4620      	mov	r0, r4
   11f76:	4629      	mov	r1, r5
   11f78:	f000 fe4e 	bl	12c18 <__aeabi_dmul>
   11f7c:	4602      	mov	r2, r0
   11f7e:	460b      	mov	r3, r1
   11f80:	4610      	mov	r0, r2
   11f82:	4619      	mov	r1, r3
   11f84:	a33c      	add	r3, pc, #240	; (adr r3, 12078 <servo_set+0x2dc>)
   11f86:	e9d3 2300 	ldrd	r2, r3, [r3]
   11f8a:	f000 fe45 	bl	12c18 <__aeabi_dmul>
   11f8e:	4602      	mov	r2, r0
   11f90:	460b      	mov	r3, r1
   11f92:	4610      	mov	r0, r2
   11f94:	4619      	mov	r1, r3
   11f96:	f001 f8d9 	bl	1314c <__aeabi_d2iz>
   11f9a:	4603      	mov	r3, r0
   11f9c:	b29b      	uxth	r3, r3
   11f9e:	b29b      	uxth	r3, r3
   11fa0:	f503 43ce 	add.w	r3, r3, #26368	; 0x6700
   11fa4:	3320      	adds	r3, #32
   11fa6:	81fb      	strh	r3, [r7, #14]
   11fa8:	89fb      	ldrh	r3, [r7, #14]
   11faa:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   11fae:	d307      	bcc.n	11fc0 <servo_set+0x224>
   11fb0:	89fb      	ldrh	r3, [r7, #14]
   11fb2:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   11fb6:	bf28      	it	cs
   11fb8:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   11fbc:	b29a      	uxth	r2, r3
   11fbe:	e001      	b.n	11fc4 <servo_set+0x228>
   11fc0:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   11fc4:	f64b 53c4 	movw	r3, #48580	; 0xbdc4
   11fc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11fcc:	809a      	strh	r2, [r3, #4]
   11fce:	687b      	ldr	r3, [r7, #4]
   11fd0:	3306      	adds	r3, #6
   11fd2:	881b      	ldrh	r3, [r3, #0]
   11fd4:	b21b      	sxth	r3, r3
   11fd6:	4618      	mov	r0, r3
   11fd8:	f000 fdb8 	bl	12b4c <__aeabi_i2d>
   11fdc:	4604      	mov	r4, r0
   11fde:	460d      	mov	r5, r1
   11fe0:	687b      	ldr	r3, [r7, #4]
   11fe2:	3302      	adds	r3, #2
   11fe4:	881b      	ldrh	r3, [r3, #0]
   11fe6:	b21b      	sxth	r3, r3
   11fe8:	4618      	mov	r0, r3
   11fea:	f000 fdaf 	bl	12b4c <__aeabi_i2d>
   11fee:	4602      	mov	r2, r0
   11ff0:	460b      	mov	r3, r1
   11ff2:	4620      	mov	r0, r4
   11ff4:	4629      	mov	r1, r5
   11ff6:	f000 fc5d 	bl	128b4 <__adddf3>
   11ffa:	4602      	mov	r2, r0
   11ffc:	460b      	mov	r3, r1
   11ffe:	4610      	mov	r0, r2
   12000:	4619      	mov	r1, r3
   12002:	a31f      	add	r3, pc, #124	; (adr r3, 12080 <servo_set+0x2e4>)
   12004:	e9d3 2300 	ldrd	r2, r3, [r3]
   12008:	f000 fe06 	bl	12c18 <__aeabi_dmul>
   1200c:	4602      	mov	r2, r0
   1200e:	460b      	mov	r3, r1
   12010:	4610      	mov	r0, r2
   12012:	4619      	mov	r1, r3
   12014:	f001 f89a 	bl	1314c <__aeabi_d2iz>
   12018:	4603      	mov	r3, r0
   1201a:	b29b      	uxth	r3, r3
   1201c:	b29b      	uxth	r3, r3
   1201e:	f503 43b5 	add.w	r3, r3, #23168	; 0x5a80
   12022:	3320      	adds	r3, #32
   12024:	81fb      	strh	r3, [r7, #14]
   12026:	89fb      	ldrh	r3, [r7, #14]
   12028:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   1202c:	d307      	bcc.n	1203e <servo_set+0x2a2>
   1202e:	89fb      	ldrh	r3, [r7, #14]
   12030:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   12034:	bf28      	it	cs
   12036:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   1203a:	b29a      	uxth	r2, r3
   1203c:	e001      	b.n	12042 <servo_set+0x2a6>
   1203e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   12042:	f64b 53c4 	movw	r3, #48580	; 0xbdc4
   12046:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1204a:	81da      	strh	r2, [r3, #14]
}
   1204c:	3710      	adds	r7, #16
   1204e:	46bd      	mov	sp, r7
   12050:	bdb0      	pop	{r4, r5, r7, pc}
   12052:	bf00      	nop
   12054:	f3af 8000 	nop.w
   12058:	aaaa9ef0 	.word	0xaaaa9ef0
   1205c:	3feaaaaa 	.word	0x3feaaaaa
   12060:	fc96473e 	.word	0xfc96473e
   12064:	3fdfc962 	.word	0x3fdfc962
   12068:	51eb851f 	.word	0x51eb851f
   1206c:	3fe51eb8 	.word	0x3fe51eb8
   12070:	9999999a 	.word	0x9999999a
   12074:	bfe19999 	.word	0xbfe19999
   12078:	aaaa9ef0 	.word	0xaaaa9ef0
   1207c:	bfe0aaaa 	.word	0xbfe0aaaa
   12080:	eeeed77a 	.word	0xeeeed77a
   12084:	bfdeeeee 	.word	0xbfdeeeee

00012088 <uart_init_tx>:
 * UART Baud rate generation settings:
 *
 * With 16.0 MHz clock,UBRR=25  => 38400 baud
 *
 */
void uart_init_tx( void ) {
   12088:	b480      	push	{r7}
   1208a:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRRH = 0; 
   1208c:	f248 0320 	movw	r3, #32800	; 0x8020
   12090:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12094:	2200      	movs	r2, #0
   12096:	701a      	strb	r2, [r3, #0]
  UBRRL = 25; 
   12098:	f248 0309 	movw	r3, #32777	; 0x8009
   1209c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120a0:	2219      	movs	r2, #25
   120a2:	701a      	strb	r2, [r3, #0]
  /* single speed */ 
  UCSRA = 0; 
   120a4:	f248 030b 	movw	r3, #32779	; 0x800b
   120a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120ac:	2200      	movs	r2, #0
   120ae:	701a      	strb	r2, [r3, #0]
  /* Enable transmitter */ 
  UCSRB = _BV(TXEN); 
   120b0:	f248 030a 	movw	r3, #32778	; 0x800a
   120b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120b8:	2208      	movs	r2, #8
   120ba:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0); 
   120bc:	f248 0320 	movw	r3, #32800	; 0x8020
   120c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120c4:	2286      	movs	r2, #134	; 0x86
   120c6:	701a      	strb	r2, [r3, #0]
}
   120c8:	46bd      	mov	sp, r7
   120ca:	f85d 7b04 	ldr.w	r7, [sp], #4
   120ce:	4770      	bx	lr

000120d0 <uart_init_rx>:

void uart_init_rx() {
   120d0:	b480      	push	{r7}
   120d2:	af00      	add	r7, sp, #0
  /* Enable receiver               */ 
  UCSRB |= _BV(RXEN); 
   120d4:	f248 030a 	movw	r3, #32778	; 0x800a
   120d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120dc:	f248 020a 	movw	r2, #32778	; 0x800a
   120e0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   120e4:	7812      	ldrb	r2, [r2, #0]
   120e6:	b2d2      	uxtb	r2, r2
   120e8:	f042 0210 	orr.w	r2, r2, #16
   120ec:	b2d2      	uxtb	r2, r2
   120ee:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi( UCSRB, RXCIE ); 
   120f0:	f248 030a 	movw	r3, #32778	; 0x800a
   120f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120f8:	f248 020a 	movw	r2, #32778	; 0x800a
   120fc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   12100:	7812      	ldrb	r2, [r2, #0]
   12102:	b2d2      	uxtb	r2, r2
   12104:	f062 027f 	orn	r2, r2, #127	; 0x7f
   12108:	b2d2      	uxtb	r2, r2
   1210a:	701a      	strb	r2, [r3, #0]
}
   1210c:	46bd      	mov	sp, r7
   1210e:	f85d 7b04 	ldr.w	r7, [sp], #4
   12112:	4770      	bx	lr

00012114 <uart_transmit>:

void uart_transmit( unsigned char data ) {
   12114:	b480      	push	{r7}
   12116:	b083      	sub	sp, #12
   12118:	af00      	add	r7, sp, #0
   1211a:	4603      	mov	r3, r0
   1211c:	71fb      	strb	r3, [r7, #7]
  if (UCSRB & _BV(TXCIE)) {
   1211e:	f248 030a 	movw	r3, #32778	; 0x800a
   12122:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12126:	781b      	ldrb	r3, [r3, #0]
   12128:	b2db      	uxtb	r3, r3
   1212a:	f003 0340 	and.w	r3, r3, #64	; 0x40
   1212e:	2b00      	cmp	r3, #0
   12130:	d028      	beq.n	12184 <uart_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail == tx_head + 1) { /* BUF_SIZE = 256 */
   12132:	f64b 53d9 	movw	r3, #48601	; 0xbdd9
   12136:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1213a:	781b      	ldrb	r3, [r3, #0]
   1213c:	b2db      	uxtb	r3, r3
   1213e:	461a      	mov	r2, r3
   12140:	f64b 53d8 	movw	r3, #48600	; 0xbdd8
   12144:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12148:	781b      	ldrb	r3, [r3, #0]
   1214a:	3301      	adds	r3, #1
   1214c:	429a      	cmp	r2, r3
   1214e:	d100      	bne.n	12152 <uart_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   12150:	e02c      	b.n	121ac <uart_transmit+0x98>
    }
    tx_buf[tx_head] = data;
   12152:	f64b 53d8 	movw	r3, #48600	; 0xbdd8
   12156:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1215a:	781b      	ldrb	r3, [r3, #0]
   1215c:	461a      	mov	r2, r3
   1215e:	f64b 53dc 	movw	r3, #48604	; 0xbddc
   12162:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12166:	79f9      	ldrb	r1, [r7, #7]
   12168:	5499      	strb	r1, [r3, r2]
    tx_head++; /* BUF_SIZE = 256 */
   1216a:	f64b 53d8 	movw	r3, #48600	; 0xbdd8
   1216e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12172:	781b      	ldrb	r3, [r3, #0]
   12174:	3301      	adds	r3, #1
   12176:	b2da      	uxtb	r2, r3
   12178:	f64b 53d8 	movw	r3, #48600	; 0xbdd8
   1217c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12180:	701a      	strb	r2, [r3, #0]
   12182:	e013      	b.n	121ac <uart_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR = data;
   12184:	f248 030c 	movw	r3, #32780	; 0x800c
   12188:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1218c:	79fa      	ldrb	r2, [r7, #7]
   1218e:	701a      	strb	r2, [r3, #0]
    sbi(UCSRB, TXCIE);
   12190:	f248 030a 	movw	r3, #32778	; 0x800a
   12194:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12198:	f248 020a 	movw	r2, #32778	; 0x800a
   1219c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   121a0:	7812      	ldrb	r2, [r2, #0]
   121a2:	b2d2      	uxtb	r2, r2
   121a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   121a8:	b2d2      	uxtb	r2, r2
   121aa:	701a      	strb	r2, [r3, #0]
  }
}
   121ac:	370c      	adds	r7, #12
   121ae:	46bd      	mov	sp, r7
   121b0:	f85d 7b04 	ldr.w	r7, [sp], #4
   121b4:	4770      	bx	lr
   121b6:	bf00      	nop

000121b8 <uart_print_hex>:

void uart_print_hex ( uint8_t c ) {
   121b8:	b590      	push	{r4, r7, lr}
   121ba:	b089      	sub	sp, #36	; 0x24
   121bc:	af00      	add	r7, sp, #0
   121be:	4603      	mov	r3, r0
   121c0:	71fb      	strb	r3, [r7, #7]
  const uint8_t hex[16] = { '0', '1', '2', '3', '4', '5', '6', '7', 
   121c2:	f643 336c 	movw	r3, #15212	; 0x3b6c
   121c6:	f2c0 0301 	movt	r3, #1
   121ca:	f107 040c 	add.w	r4, r7, #12
   121ce:	6818      	ldr	r0, [r3, #0]
   121d0:	6859      	ldr	r1, [r3, #4]
   121d2:	689a      	ldr	r2, [r3, #8]
   121d4:	68db      	ldr	r3, [r3, #12]
   121d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
  uint8_t high = (c & 0xF0)>>4;
   121d8:	79fb      	ldrb	r3, [r7, #7]
   121da:	091b      	lsrs	r3, r3, #4
   121dc:	77fb      	strb	r3, [r7, #31]
  uint8_t low  = c & 0x0F;
   121de:	79fb      	ldrb	r3, [r7, #7]
   121e0:	f003 030f 	and.w	r3, r3, #15
   121e4:	77bb      	strb	r3, [r7, #30]
    /*
    *Added by SunnyBeike
    * */
        high = 15;
   121e6:	230f      	movs	r3, #15
   121e8:	77fb      	strb	r3, [r7, #31]
        low = 15;
   121ea:	230f      	movs	r3, #15
   121ec:	77bb      	strb	r3, [r7, #30]
    /*
    *End
    * */

    uart_transmit(hex[high]);
   121ee:	7ffb      	ldrb	r3, [r7, #31]
   121f0:	f107 0220 	add.w	r2, r7, #32
   121f4:	4413      	add	r3, r2
   121f6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   121fa:	4618      	mov	r0, r3
   121fc:	f7ff ff8a 	bl	12114 <uart_transmit>
  uart_transmit(hex[low]);
   12200:	7fbb      	ldrb	r3, [r7, #30]
   12202:	f107 0220 	add.w	r2, r7, #32
   12206:	4413      	add	r3, r2
   12208:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   1220c:	4618      	mov	r0, r3
   1220e:	f7ff ff81 	bl	12114 <uart_transmit>
} 
   12212:	3724      	adds	r7, #36	; 0x24
   12214:	46bd      	mov	sp, r7
   12216:	bd90      	pop	{r4, r7, pc}

00012218 <uart_print_hex16>:

void uart_print_hex16 ( uint16_t c ) {
   12218:	b580      	push	{r7, lr}
   1221a:	b084      	sub	sp, #16
   1221c:	af00      	add	r7, sp, #0
   1221e:	4603      	mov	r3, r0
   12220:	80fb      	strh	r3, [r7, #6]
  uint8_t high = (uint8_t)(c>>8);
   12222:	88fb      	ldrh	r3, [r7, #6]
   12224:	0a1b      	lsrs	r3, r3, #8
   12226:	b29b      	uxth	r3, r3
   12228:	73fb      	strb	r3, [r7, #15]
  uint8_t low  = (uint8_t)(c);
   1222a:	88fb      	ldrh	r3, [r7, #6]
   1222c:	73bb      	strb	r3, [r7, #14]
  uart_print_hex(high);
   1222e:	7bfb      	ldrb	r3, [r7, #15]
   12230:	4618      	mov	r0, r3
   12232:	f7ff ffc1 	bl	121b8 <uart_print_hex>
  uart_print_hex(low);
   12236:	7bbb      	ldrb	r3, [r7, #14]
   12238:	4618      	mov	r0, r3
   1223a:	f7ff ffbd 	bl	121b8 <uart_print_hex>
}
   1223e:	3710      	adds	r7, #16
   12240:	46bd      	mov	sp, r7
   12242:	bd80      	pop	{r7, pc}

00012244 <uart_print_string>:

void uart_print_string(const uint8_t* s) {
   12244:	b580      	push	{r7, lr}
   12246:	b084      	sub	sp, #16
   12248:	af00      	add	r7, sp, #0
   1224a:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
   1224c:	2300      	movs	r3, #0
   1224e:	73fb      	strb	r3, [r7, #15]
  while (s[i]) {
   12250:	e009      	b.n	12266 <uart_print_string+0x22>
    uart_transmit(s[i]);
   12252:	7bfb      	ldrb	r3, [r7, #15]
   12254:	687a      	ldr	r2, [r7, #4]
   12256:	4413      	add	r3, r2
   12258:	781b      	ldrb	r3, [r3, #0]
   1225a:	4618      	mov	r0, r3
   1225c:	f7ff ff5a 	bl	12114 <uart_transmit>
    i++;
   12260:	7bfb      	ldrb	r3, [r7, #15]
   12262:	3301      	adds	r3, #1
   12264:	73fb      	strb	r3, [r7, #15]
  uart_print_hex(low);
}

void uart_print_string(const uint8_t* s) {
  uint8_t i = 0;
  while (s[i]) {
   12266:	7bfb      	ldrb	r3, [r7, #15]
   12268:	687a      	ldr	r2, [r7, #4]
   1226a:	4413      	add	r3, r2
   1226c:	781b      	ldrb	r3, [r3, #0]
   1226e:	2b00      	cmp	r3, #0
   12270:	d1ef      	bne.n	12252 <uart_print_string+0xe>
    uart_transmit(s[i]);
    i++;
  }
}
   12272:	3710      	adds	r7, #16
   12274:	46bd      	mov	sp, r7
   12276:	bd80      	pop	{r7, pc}

00012278 <SIG_UART_TRANS>:

SIGNAL(SIG_UART_TRANS) {
   12278:	b480      	push	{r7}
   1227a:	af00      	add	r7, sp, #0
  if (tx_head == tx_tail) {
   1227c:	f64b 53d8 	movw	r3, #48600	; 0xbdd8
   12280:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12284:	781a      	ldrb	r2, [r3, #0]
   12286:	f64b 53d9 	movw	r3, #48601	; 0xbdd9
   1228a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1228e:	781b      	ldrb	r3, [r3, #0]
   12290:	b2db      	uxtb	r3, r3
   12292:	429a      	cmp	r2, r3
   12294:	d10e      	bne.n	122b4 <SIG_UART_TRANS+0x3c>
    /* Nothing more to send */
    cbi(UCSRB, TXCIE); /* disable interrupt */
   12296:	f248 030a 	movw	r3, #32778	; 0x800a
   1229a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1229e:	f248 020a 	movw	r2, #32778	; 0x800a
   122a2:	f2c2 0200 	movt	r2, #8192	; 0x2000
   122a6:	7812      	ldrb	r2, [r2, #0]
   122a8:	b2d2      	uxtb	r2, r2
   122aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   122ae:	b2d2      	uxtb	r2, r2
   122b0:	701a      	strb	r2, [r3, #0]
   122b2:	e01d      	b.n	122f0 <SIG_UART_TRANS+0x78>
  } else {
    UDR = tx_buf[tx_tail];
   122b4:	f248 030c 	movw	r3, #32780	; 0x800c
   122b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122bc:	f64b 52d9 	movw	r2, #48601	; 0xbdd9
   122c0:	f2c2 0204 	movt	r2, #8196	; 0x2004
   122c4:	7812      	ldrb	r2, [r2, #0]
   122c6:	b2d2      	uxtb	r2, r2
   122c8:	4611      	mov	r1, r2
   122ca:	f64b 52dc 	movw	r2, #48604	; 0xbddc
   122ce:	f2c2 0204 	movt	r2, #8196	; 0x2004
   122d2:	5c52      	ldrb	r2, [r2, r1]
   122d4:	701a      	strb	r2, [r3, #0]
    tx_tail++; /* warning tx_buf_len is 256 */
   122d6:	f64b 53d9 	movw	r3, #48601	; 0xbdd9
   122da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   122de:	781b      	ldrb	r3, [r3, #0]
   122e0:	b2db      	uxtb	r3, r3
   122e2:	3301      	adds	r3, #1
   122e4:	b2da      	uxtb	r2, r3
   122e6:	f64b 53d9 	movw	r3, #48601	; 0xbdd9
   122ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   122ee:	701a      	strb	r2, [r3, #0]
  }
}
   122f0:	46bd      	mov	sp, r7
   122f2:	f85d 7b04 	ldr.w	r7, [sp], #4
   122f6:	4770      	bx	lr

000122f8 <init_led>:
#include "stm32f10x_usart.h"
#include "stm32f10x_exti.h"
#include "misc.h"

void init_led(void)
{
   122f8:	b580      	push	{r7, lr}
   122fa:	b082      	sub	sp, #8
   122fc:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO C clock. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
   122fe:	2010      	movs	r0, #16
   12300:	2101      	movs	r1, #1
   12302:	f7ee fd5d 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Set the LED pin state such that the LED is off.  The LED is connected
     * between power and the microcontroller pin, which makes it turn on when
     * the pin is low.
     */
    GPIO_WriteBit(GPIOC,GPIO_Pin_12,Bit_SET);
   12306:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   1230a:	f2c4 0001 	movt	r0, #16385	; 0x4001
   1230e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   12312:	2201      	movs	r2, #1
   12314:	f7ef f864 	bl	13e0 <GPIO_WriteBit>

    /* Configure the LED pin as push-pull output. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_12;
   12318:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   1231c:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   1231e:	2310      	movs	r3, #16
   12320:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   12322:	2303      	movs	r3, #3
   12324:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
   12326:	1d3b      	adds	r3, r7, #4
   12328:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   1232c:	f2c4 0001 	movt	r0, #16385	; 0x4001
   12330:	4619      	mov	r1, r3
   12332:	f7ee ff19 	bl	1168 <GPIO_Init>
}
   12336:	3708      	adds	r7, #8
   12338:	46bd      	mov	sp, r7
   1233a:	bd80      	pop	{r7, pc}

0001233c <init_button>:

void init_button(void)
{
   1233c:	b580      	push	{r7, lr}
   1233e:	b082      	sub	sp, #8
   12340:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO A clock */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
   12342:	2004      	movs	r0, #4
   12344:	2101      	movs	r1, #1
   12346:	f7ee fd3b 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Configure the button pin as a floating input. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_0;
   1234a:	2301      	movs	r3, #1
   1234c:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   1234e:	2304      	movs	r3, #4
   12350:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   12352:	2303      	movs	r3, #3
   12354:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
   12356:	1d3b      	adds	r3, r7, #4
   12358:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   1235c:	f2c4 0001 	movt	r0, #16385	; 0x4001
   12360:	4619      	mov	r1, r3
   12362:	f7ee ff01 	bl	1168 <GPIO_Init>
}
   12366:	3708      	adds	r7, #8
   12368:	46bd      	mov	sp, r7
   1236a:	bd80      	pop	{r7, pc}

0001236c <enable_button_interrupts>:

void enable_button_interrupts(void)
{
   1236c:	b580      	push	{r7, lr}
   1236e:	b084      	sub	sp, #16
   12370:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable the AFIO clock.  GPIO_EXTILineConfig sets registers in
     * the AFIO.
     */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
   12372:	2001      	movs	r0, #1
   12374:	2101      	movs	r1, #1
   12376:	f7ee fd23 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Connect EXTI Line 0 to the button GPIO Pin */
    GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);
   1237a:	2000      	movs	r0, #0
   1237c:	2100      	movs	r1, #0
   1237e:	f7ef f927 	bl	15d0 <GPIO_EXTILineConfig>

    /* Configure the EXTI line to generate an interrupt when the button is
     * pressed.  The button pin is high when pressed, so it needs to trigger
     * when rising from low to high. */
    EXTI_InitStructure.EXTI_Line = EXTI_Line0;
   12382:	2301      	movs	r3, #1
   12384:	60bb      	str	r3, [r7, #8]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
   12386:	2300      	movs	r3, #0
   12388:	733b      	strb	r3, [r7, #12]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
   1238a:	2308      	movs	r3, #8
   1238c:	737b      	strb	r3, [r7, #13]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
   1238e:	2301      	movs	r3, #1
   12390:	73bb      	strb	r3, [r7, #14]
    EXTI_Init(&EXTI_InitStructure);
   12392:	f107 0308 	add.w	r3, r7, #8
   12396:	4618      	mov	r0, r3
   12398:	f7ef fe20 	bl	1fdc <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
   1239c:	2306      	movs	r3, #6
   1239e:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
   123a0:	230f      	movs	r3, #15
   123a2:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
   123a4:	230f      	movs	r3, #15
   123a6:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   123a8:	2301      	movs	r3, #1
   123aa:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
   123ac:	1d3b      	adds	r3, r7, #4
   123ae:	4618      	mov	r0, r3
   123b0:	f7ef ff4e 	bl	2250 <NVIC_Init>
}
   123b4:	3710      	adds	r7, #16
   123b6:	46bd      	mov	sp, r7
   123b8:	bd80      	pop	{r7, pc}
   123ba:	bf00      	nop

000123bc <init_rs232>:

void init_rs232(void)
{
   123bc:	b580      	push	{r7, lr}
   123be:	b086      	sub	sp, #24
   123c0:	af00      	add	r7, sp, #0
    USART_InitTypeDef USART_InitStructure;
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable peripheral clocks. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
   123c2:	2005      	movs	r0, #5
   123c4:	2101      	movs	r1, #1
   123c6:	f7ee fcfb 	bl	dc0 <RCC_APB2PeriphClockCmd>
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
   123ca:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   123ce:	2101      	movs	r1, #1
   123d0:	f7ee fd1e 	bl	e10 <RCC_APB1PeriphClockCmd>

    /* Configure USART2 Rx pin as floating input. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
   123d4:	2308      	movs	r3, #8
   123d6:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   123d8:	2304      	movs	r3, #4
   123da:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
   123dc:	1d3b      	adds	r3, r7, #4
   123de:	f44f 6000 	mov.w	r0, #2048	; 0x800
   123e2:	f2c4 0001 	movt	r0, #16385	; 0x4001
   123e6:	4619      	mov	r1, r3
   123e8:	f7ee febe 	bl	1168 <GPIO_Init>

    /* Configure USART2 Tx as alternate function push-pull. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
   123ec:	2304      	movs	r3, #4
   123ee:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   123f0:	2303      	movs	r3, #3
   123f2:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
   123f4:	2318      	movs	r3, #24
   123f6:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
   123f8:	1d3b      	adds	r3, r7, #4
   123fa:	f44f 6000 	mov.w	r0, #2048	; 0x800
   123fe:	f2c4 0001 	movt	r0, #16385	; 0x4001
   12402:	4619      	mov	r1, r3
   12404:	f7ee feb0 	bl	1168 <GPIO_Init>

    /* Configure the USART2 */
    USART_InitStructure.USART_BaudRate = 9600;
   12408:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   1240c:	60bb      	str	r3, [r7, #8]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
   1240e:	2300      	movs	r3, #0
   12410:	81bb      	strh	r3, [r7, #12]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
   12412:	2300      	movs	r3, #0
   12414:	81fb      	strh	r3, [r7, #14]
    USART_InitStructure.USART_Parity = USART_Parity_No;
   12416:	2300      	movs	r3, #0
   12418:	823b      	strh	r3, [r7, #16]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
   1241a:	2300      	movs	r3, #0
   1241c:	82bb      	strh	r3, [r7, #20]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
   1241e:	230c      	movs	r3, #12
   12420:	827b      	strh	r3, [r7, #18]
    USART_Init(USART2, &USART_InitStructure);
   12422:	f107 0308 	add.w	r3, r7, #8
   12426:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   1242a:	f2c4 0000 	movt	r0, #16384	; 0x4000
   1242e:	4619      	mov	r1, r3
   12430:	f7ef f982 	bl	1738 <USART_Init>
    USART_Cmd(USART2, ENABLE);
   12434:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   12438:	f2c4 0000 	movt	r0, #16384	; 0x4000
   1243c:	2101      	movs	r1, #1
   1243e:	f7ef fa99 	bl	1974 <USART_Cmd>
}
   12442:	3718      	adds	r7, #24
   12444:	46bd      	mov	sp, r7
   12446:	bd80      	pop	{r7, pc}

00012448 <enable_rs232_interrupts>:

void enable_rs232_interrupts(void)
{
   12448:	b580      	push	{r7, lr}
   1244a:	b082      	sub	sp, #8
   1244c:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable transmit and receive interrupts for the USART2. */
    USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
   1244e:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   12452:	f2c4 0000 	movt	r0, #16384	; 0x4000
   12456:	f240 7127 	movw	r1, #1831	; 0x727
   1245a:	2200      	movs	r2, #0
   1245c:	f7ef faaa 	bl	19b4 <USART_ITConfig>
    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
   12460:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   12464:	f2c4 0000 	movt	r0, #16384	; 0x4000
   12468:	f240 5125 	movw	r1, #1317	; 0x525
   1246c:	2201      	movs	r2, #1
   1246e:	f7ef faa1 	bl	19b4 <USART_ITConfig>

    /* Enable the USART2 IRQ in the NVIC module (so that the USART2 interrupt
     * handler is enabled). */
    NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
   12472:	2326      	movs	r3, #38	; 0x26
   12474:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
   12476:	2300      	movs	r3, #0
   12478:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   1247a:	2301      	movs	r3, #1
   1247c:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
   1247e:	1d3b      	adds	r3, r7, #4
   12480:	4618      	mov	r0, r3
   12482:	f7ef fee5 	bl	2250 <NVIC_Init>
}
   12486:	3708      	adds	r7, #8
   12488:	46bd      	mov	sp, r7
   1248a:	bd80      	pop	{r7, pc}

0001248c <enable_rs232>:

void enable_rs232(void)
{
   1248c:	b580      	push	{r7, lr}
   1248e:	af00      	add	r7, sp, #0
    /* Enable the RS232 port. */
    USART_Cmd(USART2, ENABLE);
   12490:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   12494:	f2c4 0000 	movt	r0, #16384	; 0x4000
   12498:	2101      	movs	r1, #1
   1249a:	f7ef fa6b 	bl	1974 <USART_Cmd>
}
   1249e:	bd80      	pop	{r7, pc}

000124a0 <send_byte>:


void send_byte(uint8_t b)
{
   124a0:	b580      	push	{r7, lr}
   124a2:	b082      	sub	sp, #8
   124a4:	af00      	add	r7, sp, #0
   124a6:	4603      	mov	r3, r0
   124a8:	71fb      	strb	r3, [r7, #7]
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
   124aa:	bf00      	nop
   124ac:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   124b0:	f2c4 0000 	movt	r0, #16384	; 0x4000
   124b4:	2180      	movs	r1, #128	; 0x80
   124b6:	f7ef fcc9 	bl	1e4c <USART_GetFlagStatus>
   124ba:	4603      	mov	r3, r0
   124bc:	2b00      	cmp	r3, #0
   124be:	d0f5      	beq.n	124ac <send_byte+0xc>

    GPIOC->ODR ^= 0x00001000;
   124c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   124c4:	f2c4 0301 	movt	r3, #16385	; 0x4001
   124c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   124cc:	f2c4 0201 	movt	r2, #16385	; 0x4001
   124d0:	68d2      	ldr	r2, [r2, #12]
   124d2:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
   124d6:	60da      	str	r2, [r3, #12]

    USART_SendData(USART2, b);
   124d8:	79fb      	ldrb	r3, [r7, #7]
   124da:	b29b      	uxth	r3, r3
   124dc:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   124e0:	f2c4 0000 	movt	r0, #16384	; 0x4000
   124e4:	4619      	mov	r1, r3
   124e6:	f7ef fb65 	bl	1bb4 <USART_SendData>
}
   124ea:	3708      	adds	r7, #8
   124ec:	46bd      	mov	sp, r7
   124ee:	bd80      	pop	{r7, pc}

000124f0 <send_num>:


void send_num(uint8_t b)
{
   124f0:	b580      	push	{r7, lr}
   124f2:	b082      	sub	sp, #8
   124f4:	af00      	add	r7, sp, #0
   124f6:	4603      	mov	r3, r0
   124f8:	71fb      	strb	r3, [r7, #7]
    send_byte(b+'0'); 
   124fa:	79fb      	ldrb	r3, [r7, #7]
   124fc:	3330      	adds	r3, #48	; 0x30
   124fe:	b2db      	uxtb	r3, r3
   12500:	4618      	mov	r0, r3
   12502:	f7ff ffcd 	bl	124a0 <send_byte>
}
   12506:	3708      	adds	r7, #8
   12508:	46bd      	mov	sp, r7
   1250a:	bd80      	pop	{r7, pc}

0001250c <vPrintString>:


void vPrintString( const char * string )
{
   1250c:	b580      	push	{r7, lr}
   1250e:	b084      	sub	sp, #16
   12510:	af00      	add	r7, sp, #0
   12512:	6078      	str	r0, [r7, #4]
    int i = 0;
   12514:	2300      	movs	r3, #0
   12516:	60fb      	str	r3, [r7, #12]
    while(string[i] != '\0')
   12518:	e009      	b.n	1252e <vPrintString+0x22>
    {
        send_byte(string[i]);
   1251a:	68fb      	ldr	r3, [r7, #12]
   1251c:	687a      	ldr	r2, [r7, #4]
   1251e:	4413      	add	r3, r2
   12520:	781b      	ldrb	r3, [r3, #0]
   12522:	4618      	mov	r0, r3
   12524:	f7ff ffbc 	bl	124a0 <send_byte>
        i++;
   12528:	68fb      	ldr	r3, [r7, #12]
   1252a:	3301      	adds	r3, #1
   1252c:	60fb      	str	r3, [r7, #12]


void vPrintString( const char * string )
{
    int i = 0;
    while(string[i] != '\0')
   1252e:	68fb      	ldr	r3, [r7, #12]
   12530:	687a      	ldr	r2, [r7, #4]
   12532:	4413      	add	r3, r2
   12534:	781b      	ldrb	r3, [r3, #0]
   12536:	2b00      	cmp	r3, #0
   12538:	d1ef      	bne.n	1251a <vPrintString+0xe>
    {
        send_byte(string[i]);
        i++;
    }
}
   1253a:	3710      	adds	r7, #16
   1253c:	46bd      	mov	sp, r7
   1253e:	bd80      	pop	{r7, pc}

00012540 <vPrintNumber>:

void vPrintNumber( const long c_num )
{
   12540:	b580      	push	{r7, lr}
   12542:	b08e      	sub	sp, #56	; 0x38
   12544:	af00      	add	r7, sp, #0
   12546:	6078      	str	r0, [r7, #4]
    char time[33], tmp;
    unsigned int i, count = 0;
   12548:	2300      	movs	r3, #0
   1254a:	633b      	str	r3, [r7, #48]	; 0x30
    long num = c_num;
   1254c:	687b      	ldr	r3, [r7, #4]
   1254e:	62fb      	str	r3, [r7, #44]	; 0x2c

    if(num == 0)
   12550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12552:	2b00      	cmp	r3, #0
   12554:	d106      	bne.n	12564 <vPrintNumber+0x24>
    {
        vPrintString("0\n\r");
   12556:	f643 307c 	movw	r0, #15228	; 0x3b7c
   1255a:	f2c0 0001 	movt	r0, #1
   1255e:	f7ff ffd5 	bl	1250c <vPrintString>
   12562:	e064      	b.n	1262e <vPrintNumber+0xee>
    }
    else
    {
        // transform long into char * 
        while( num   )
   12564:	e024      	b.n	125b0 <vPrintNumber+0x70>
        {
            time[count] = num%10 +'0';
   12566:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   12568:	f246 6367 	movw	r3, #26215	; 0x6667
   1256c:	f2c6 6366 	movt	r3, #26214	; 0x6666
   12570:	fb83 2301 	smull	r2, r3, r3, r1
   12574:	109a      	asrs	r2, r3, #2
   12576:	17cb      	asrs	r3, r1, #31
   12578:	1ad2      	subs	r2, r2, r3
   1257a:	4613      	mov	r3, r2
   1257c:	009b      	lsls	r3, r3, #2
   1257e:	4413      	add	r3, r2
   12580:	005b      	lsls	r3, r3, #1
   12582:	1aca      	subs	r2, r1, r3
   12584:	b2d3      	uxtb	r3, r2
   12586:	3330      	adds	r3, #48	; 0x30
   12588:	b2da      	uxtb	r2, r3
   1258a:	f107 0108 	add.w	r1, r7, #8
   1258e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12590:	440b      	add	r3, r1
   12592:	701a      	strb	r2, [r3, #0]
            count ++;
   12594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12596:	3301      	adds	r3, #1
   12598:	633b      	str	r3, [r7, #48]	; 0x30
            num /= 10;
   1259a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1259c:	f246 6367 	movw	r3, #26215	; 0x6667
   125a0:	f2c6 6366 	movt	r3, #26214	; 0x6666
   125a4:	fb83 1302 	smull	r1, r3, r3, r2
   125a8:	1099      	asrs	r1, r3, #2
   125aa:	17d3      	asrs	r3, r2, #31
   125ac:	1acb      	subs	r3, r1, r3
   125ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        vPrintString("0\n\r");
    }
    else
    {
        // transform long into char * 
        while( num   )
   125b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   125b2:	2b00      	cmp	r3, #0
   125b4:	d1d7      	bne.n	12566 <vPrintNumber+0x26>
        {
            time[count] = num%10 +'0';
            count ++;
            num /= 10;
        }
        time[count] = '\0';
   125b6:	f107 0208 	add.w	r2, r7, #8
   125ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   125bc:	4413      	add	r3, r2
   125be:	2200      	movs	r2, #0
   125c0:	701a      	strb	r2, [r3, #0]

        // reverse
        for( i = 0; i < count/2; ++i  )
   125c2:	2300      	movs	r3, #0
   125c4:	637b      	str	r3, [r7, #52]	; 0x34
   125c6:	e022      	b.n	1260e <vPrintNumber+0xce>
        {
            tmp = time[i];
   125c8:	f107 0208 	add.w	r2, r7, #8
   125cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   125ce:	4413      	add	r3, r2
   125d0:	781b      	ldrb	r3, [r3, #0]
   125d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            time[i] = time[count-1-i];
   125d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   125d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   125da:	1ad3      	subs	r3, r2, r3
   125dc:	3b01      	subs	r3, #1
   125de:	f107 0238 	add.w	r2, r7, #56	; 0x38
   125e2:	4413      	add	r3, r2
   125e4:	f813 2c30 	ldrb.w	r2, [r3, #-48]
   125e8:	f107 0108 	add.w	r1, r7, #8
   125ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   125ee:	440b      	add	r3, r1
   125f0:	701a      	strb	r2, [r3, #0]
            time[count-1-i] = tmp;
   125f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   125f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   125f6:	1ad3      	subs	r3, r2, r3
   125f8:	3b01      	subs	r3, #1
   125fa:	f107 0138 	add.w	r1, r7, #56	; 0x38
   125fe:	440b      	add	r3, r1
   12600:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
   12604:	f803 2c30 	strb.w	r2, [r3, #-48]
            num /= 10;
        }
        time[count] = '\0';

        // reverse
        for( i = 0; i < count/2; ++i  )
   12608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1260a:	3301      	adds	r3, #1
   1260c:	637b      	str	r3, [r7, #52]	; 0x34
   1260e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12610:	085a      	lsrs	r2, r3, #1
   12612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12614:	429a      	cmp	r2, r3
   12616:	d8d7      	bhi.n	125c8 <vPrintNumber+0x88>
        {
            tmp = time[i];
            time[i] = time[count-1-i];
            time[count-1-i] = tmp;
        }
        vPrintString(time);
   12618:	f107 0308 	add.w	r3, r7, #8
   1261c:	4618      	mov	r0, r3
   1261e:	f7ff ff75 	bl	1250c <vPrintString>
        vPrintString("\n\r");
   12622:	f643 3080 	movw	r0, #15232	; 0x3b80
   12626:	f2c0 0001 	movt	r0, #1
   1262a:	f7ff ff6f 	bl	1250c <vPrintString>
    }
}
   1262e:	3738      	adds	r7, #56	; 0x38
   12630:	46bd      	mov	sp, r7
   12632:	bd80      	pop	{r7, pc}

00012634 <vParametersInit>:

portBASE_TYPE miss[NUMBEROFTASK];


void vParametersInit()
{
   12634:	b480      	push	{r7}
   12636:	b083      	sub	sp, #12
   12638:	af00      	add	r7, sp, #0
    portBASE_TYPE i;
    for( i = 0; i < NUMBEROFTASK; ++ i )
   1263a:	2300      	movs	r3, #0
   1263c:	607b      	str	r3, [r7, #4]
   1263e:	e043      	b.n	126c8 <vParametersInit+0x94>
    {
        parameters[i].xMyId = i;
   12640:	f64b 63dc 	movw	r3, #48860	; 0xbedc
   12644:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12648:	687a      	ldr	r2, [r7, #4]
   1264a:	0112      	lsls	r2, r2, #4
   1264c:	4413      	add	r3, r2
   1264e:	687a      	ldr	r2, [r7, #4]
   12650:	601a      	str	r2, [r3, #0]
        parameters[i].xMyFun = xTaskTable[i];
   12652:	f240 03f8 	movw	r3, #248	; 0xf8
   12656:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1265a:	687a      	ldr	r2, [r7, #4]
   1265c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   12660:	f64b 63dc 	movw	r3, #48860	; 0xbedc
   12664:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12668:	6879      	ldr	r1, [r7, #4]
   1266a:	0109      	lsls	r1, r1, #4
   1266c:	440b      	add	r3, r1
   1266e:	3304      	adds	r3, #4
   12670:	601a      	str	r2, [r3, #0]
        parameters[i].xPeriod = xPeriodTable[i];
   12672:	f240 035c 	movw	r3, #92	; 0x5c
   12676:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1267a:	687a      	ldr	r2, [r7, #4]
   1267c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   12680:	f64b 63dc 	movw	r3, #48860	; 0xbedc
   12684:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12688:	6879      	ldr	r1, [r7, #4]
   1268a:	0109      	lsls	r1, r1, #4
   1268c:	440b      	add	r3, r1
   1268e:	3308      	adds	r3, #8
   12690:	601a      	str	r2, [r3, #0]
        parameters[i].WCET = WCET[i];
   12692:	f240 0390 	movw	r3, #144	; 0x90
   12696:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1269a:	687a      	ldr	r2, [r7, #4]
   1269c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   126a0:	f64b 63dc 	movw	r3, #48860	; 0xbedc
   126a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126a8:	6879      	ldr	r1, [r7, #4]
   126aa:	0109      	lsls	r1, r1, #4
   126ac:	440b      	add	r3, r1
   126ae:	330c      	adds	r3, #12
   126b0:	601a      	str	r2, [r3, #0]
        miss[i] = 0;
   126b2:	f64b 73e0 	movw	r3, #49120	; 0xbfe0
   126b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126ba:	687a      	ldr	r2, [r7, #4]
   126bc:	2100      	movs	r1, #0
   126be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


void vParametersInit()
{
    portBASE_TYPE i;
    for( i = 0; i < NUMBEROFTASK; ++ i )
   126c2:	687b      	ldr	r3, [r7, #4]
   126c4:	3301      	adds	r3, #1
   126c6:	607b      	str	r3, [r7, #4]
   126c8:	687b      	ldr	r3, [r7, #4]
   126ca:	2b0c      	cmp	r3, #12
   126cc:	ddb8      	ble.n	12640 <vParametersInit+0xc>
        parameters[i].xMyFun = xTaskTable[i];
        parameters[i].xPeriod = xPeriodTable[i];
        parameters[i].WCET = WCET[i];
        miss[i] = 0;
    }
}
   126ce:	370c      	adds	r7, #12
   126d0:	46bd      	mov	sp, r7
   126d2:	f85d 7b04 	ldr.w	r7, [sp], #4
   126d6:	4770      	bx	lr

000126d8 <vTimeTask>:

void vTimeTask( void * pvParameter )
{
   126d8:	b580      	push	{r7, lr}
   126da:	b08c      	sub	sp, #48	; 0x30
   126dc:	af00      	add	r7, sp, #0
   126de:	6078      	str	r0, [r7, #4]
    struct parameter *xMyParameter = (struct parameter *)pvParameter;
   126e0:	687b      	ldr	r3, [r7, #4]
   126e2:	623b      	str	r3, [r7, #32]
    portBASE_TYPE xMyId = xMyParameter->xMyId;
   126e4:	6a3b      	ldr	r3, [r7, #32]
   126e6:	681b      	ldr	r3, [r3, #0]
   126e8:	61fb      	str	r3, [r7, #28]
    pvTaskFunType xMyFun = xMyParameter->xMyFun;
   126ea:	6a3b      	ldr	r3, [r7, #32]
   126ec:	685b      	ldr	r3, [r3, #4]
   126ee:	61bb      	str	r3, [r7, #24]
    portTickType xMyPeriod = xMyParameter->xPeriod;
   126f0:	6a3b      	ldr	r3, [r7, #32]
   126f2:	689b      	ldr	r3, [r3, #8]
   126f4:	617b      	str	r3, [r7, #20]
    portTickType xMyWCET = xMyParameter->WCET;
   126f6:	6a3b      	ldr	r3, [r7, #32]
   126f8:	68db      	ldr	r3, [r3, #12]
   126fa:	613b      	str	r3, [r7, #16]

    portBASE_TYPE i;
    portTickType xCurrentTime;
    
    // used for periodic task
    portTickType xLastExecutionTime = 0; 
   126fc:	2300      	movs	r3, #0
   126fe:	60fb      	str	r3, [r7, #12]

    portTickType xReadyTime = 0;
   12700:	2300      	movs	r3, #0
   12702:	62bb      	str	r3, [r7, #40]	; 0x28
    portTickType xDeadline = xMyPeriod ;
   12704:	697b      	ldr	r3, [r7, #20]
   12706:	627b      	str	r3, [r7, #36]	; 0x24
        vPrintNumber( xTaskGetTickCount() );
        xTaskResumeAll();
#endif

        #ifdef NONPREEMPTION
        vPrintNumber(xMyId);
   12708:	69f8      	ldr	r0, [r7, #28]
   1270a:	f7ff ff19 	bl	12540 <vPrintNumber>
        vPrintNumber( xReadyTime );
   1270e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12710:	4618      	mov	r0, r3
   12712:	f7ff ff15 	bl	12540 <vPrintNumber>
        vPrintNumber( xTaskGetTickCount() );
   12716:	f7f1 fb09 	bl	3d2c <xTaskGetTickCount>
   1271a:	4603      	mov	r3, r0
   1271c:	4618      	mov	r0, r3
   1271e:	f7ff ff0f 	bl	12540 <vPrintNumber>
        #endif

        for( i = 0; i < 20; ++ i )
   12722:	2300      	movs	r3, #0
   12724:	62fb      	str	r3, [r7, #44]	; 0x2c
   12726:	e004      	b.n	12732 <vTimeTask+0x5a>
        {
            xMyFun();
   12728:	69bb      	ldr	r3, [r7, #24]
   1272a:	4798      	blx	r3
        vPrintNumber(xMyId);
        vPrintNumber( xReadyTime );
        vPrintNumber( xTaskGetTickCount() );
        #endif

        for( i = 0; i < 20; ++ i )
   1272c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1272e:	3301      	adds	r3, #1
   12730:	62fb      	str	r3, [r7, #44]	; 0x2c
   12732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12734:	2b13      	cmp	r3, #19
   12736:	ddf7      	ble.n	12728 <vTimeTask+0x50>
        {
            xMyFun();
        }

        if(xTaskGetTickCount() > xDeadline)
   12738:	f7f1 faf8 	bl	3d2c <xTaskGetTickCount>
   1273c:	4602      	mov	r2, r0
   1273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12740:	429a      	cmp	r2, r3
   12742:	d914      	bls.n	1276e <vTimeTask+0x96>
        {
            //vPrintNumber((xMyId+10)*2);
            vPrintString("miss deadline\n\r");
   12744:	f643 3084 	movw	r0, #15236	; 0x3b84
   12748:	f2c0 0001 	movt	r0, #1
   1274c:	f7ff fede 	bl	1250c <vPrintString>
            miss[xMyId] ++;
   12750:	f64b 73e0 	movw	r3, #49120	; 0xbfe0
   12754:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12758:	69fa      	ldr	r2, [r7, #28]
   1275a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1275e:	1c59      	adds	r1, r3, #1
   12760:	f64b 73e0 	movw	r3, #49120	; 0xbfe0
   12764:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12768:	69fa      	ldr	r2, [r7, #28]
   1276a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        }

        xReadyTime += xMyPeriod;
   1276e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   12770:	697b      	ldr	r3, [r7, #20]
   12772:	4413      	add	r3, r2
   12774:	62bb      	str	r3, [r7, #40]	; 0x28
        xDeadline += xMyPeriod;
   12776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   12778:	697b      	ldr	r3, [r7, #20]
   1277a:	4413      	add	r3, r2
   1277c:	627b      	str	r3, [r7, #36]	; 0x24
        vPrintNumber( xDeadline );
        vPrintNumber( xTaskGetTickCount() );
        xTaskResumeAll();
#endif
        #ifdef NONPREEMPTION
        vPrintNumber(xTaskGetTickCount());
   1277e:	f7f1 fad5 	bl	3d2c <xTaskGetTickCount>
   12782:	4603      	mov	r3, r0
   12784:	4618      	mov	r0, r3
   12786:	f7ff fedb 	bl	12540 <vPrintNumber>
        vPrintNumber( xDeadline );
   1278a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1278c:	4618      	mov	r0, r3
   1278e:	f7ff fed7 	bl	12540 <vPrintNumber>
        vPrintNumber( (xMyId + 10)* 3 );
   12792:	69fb      	ldr	r3, [r7, #28]
   12794:	f103 020a 	add.w	r2, r3, #10
   12798:	4613      	mov	r3, r2
   1279a:	005b      	lsls	r3, r3, #1
   1279c:	4413      	add	r3, r2
   1279e:	4618      	mov	r0, r3
   127a0:	f7ff fece 	bl	12540 <vPrintNumber>
        #endif
      
#if defined configUSE_EDF_SCHEDULING || defined configUSE_LSF_SCHEDULING
        vSetTaskDeadline( xDeadline );
   127a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
   127a6:	f7f0 fded 	bl	3384 <vSetTaskDeadline>
        vSetTaskRemainTime( xMyWCET );
   127aa:	6938      	ldr	r0, [r7, #16]
   127ac:	f7f0 fdfa 	bl	33a4 <vSetTaskRemainTime>
#endif
        vTaskDelayUntil( &xLastExecutionTime, xMyPeriod / portTICK_RATE_MS );
   127b0:	f107 030c 	add.w	r3, r7, #12
   127b4:	4618      	mov	r0, r3
   127b6:	6979      	ldr	r1, [r7, #20]
   127b8:	f7f0 ff74 	bl	36a4 <vTaskDelayUntil>
        //vTaskDelay( xMyPeriod / portTICK_RATE_MS );
    }
   127bc:	e7a4      	b.n	12708 <vTimeTask+0x30>
   127be:	bf00      	nop

000127c0 <main>:
}


int main()
{
   127c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   127c2:	b087      	sub	sp, #28
   127c4:	af04      	add	r7, sp, #16

    int i;
	init_led();
   127c6:	f7ff fd97 	bl	122f8 <init_led>
	init_rs232();
   127ca:	f7ff fdf7 	bl	123bc <init_rs232>
	enable_rs232_interrupts();
   127ce:	f7ff fe3b 	bl	12448 <enable_rs232_interrupts>
	enable_rs232();
   127d2:	f7ff fe5b 	bl	1248c <enable_rs232>

    vParametersInit();
   127d6:	f7ff ff2d 	bl	12634 <vParametersInit>
    vPapabenchInit();
   127da:	f7f0 f951 	bl	2a80 <vPapabenchInit>


    for( i = 0; i < NUMBEROFTASK; ++ i )
   127de:	2300      	movs	r3, #0
   127e0:	607b      	str	r3, [r7, #4]
   127e2:	e03f      	b.n	12864 <main+0xa4>
            //continue;
        }
#ifdef configUSE_EDF_SCHEDULING
        xTaskCreateForEDF(vTimeTask, pcNameOfTask[i],  256, (void *) &parameters[i], xTaskPrio[i], &xTaskOfHandle[i], parameters[i].xPeriod);
#elif defined configUSE_LSF_SCHEDULING
        xTaskCreateForLSF(vTimeTask, pcNameOfTask[i], 256, (void *) & parameters[i], xTaskPrio[i], &xTaskOfHandle[i], parameters[i].xPeriod, parameters[i].WCET);
   127e4:	f240 03c4 	movw	r3, #196	; 0xc4
   127e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127ec:	687a      	ldr	r2, [r7, #4]
   127ee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   127f2:	687b      	ldr	r3, [r7, #4]
   127f4:	0119      	lsls	r1, r3, #4
   127f6:	f64b 63dc 	movw	r3, #48860	; 0xbedc
   127fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127fe:	18cc      	adds	r4, r1, r3
   12800:	f240 0328 	movw	r3, #40	; 0x28
   12804:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12808:	6879      	ldr	r1, [r7, #4]
   1280a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   1280e:	461d      	mov	r5, r3
   12810:	687b      	ldr	r3, [r7, #4]
   12812:	0099      	lsls	r1, r3, #2
   12814:	f64b 73ac 	movw	r3, #49068	; 0xbfac
   12818:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1281c:	18c8      	adds	r0, r1, r3
   1281e:	f64b 63dc 	movw	r3, #48860	; 0xbedc
   12822:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12826:	6879      	ldr	r1, [r7, #4]
   12828:	0109      	lsls	r1, r1, #4
   1282a:	440b      	add	r3, r1
   1282c:	3308      	adds	r3, #8
   1282e:	6819      	ldr	r1, [r3, #0]
   12830:	f64b 63dc 	movw	r3, #48860	; 0xbedc
   12834:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12838:	687e      	ldr	r6, [r7, #4]
   1283a:	0136      	lsls	r6, r6, #4
   1283c:	4433      	add	r3, r6
   1283e:	330c      	adds	r3, #12
   12840:	681b      	ldr	r3, [r3, #0]
   12842:	9500      	str	r5, [sp, #0]
   12844:	9001      	str	r0, [sp, #4]
   12846:	9102      	str	r1, [sp, #8]
   12848:	9303      	str	r3, [sp, #12]
   1284a:	f242 60d9 	movw	r0, #9945	; 0x26d9
   1284e:	f2c0 0001 	movt	r0, #1
   12852:	4611      	mov	r1, r2
   12854:	f44f 7280 	mov.w	r2, #256	; 0x100
   12858:	4623      	mov	r3, r4
   1285a:	f7f0 fdd5 	bl	3408 <xTaskCreateForLSF>

    vParametersInit();
    vPapabenchInit();


    for( i = 0; i < NUMBEROFTASK; ++ i )
   1285e:	687b      	ldr	r3, [r7, #4]
   12860:	3301      	adds	r3, #1
   12862:	607b      	str	r3, [r7, #4]
   12864:	687b      	ldr	r3, [r7, #4]
   12866:	2b0c      	cmp	r3, #12
   12868:	ddbc      	ble.n	127e4 <main+0x24>
        xTaskCreate( vTimeTask, pcNameOfTask[i], 256, (void *) &parameters[i], xTaskPrio[i], &xTaskOfHandle[i] );
#endif
    }

	/* Start running the tasks. */
	vTaskStartScheduler();
   1286a:	f7f1 f965 	bl	3b38 <vTaskStartScheduler>

	return 0;
   1286e:	2300      	movs	r3, #0
}
   12870:	4618      	mov	r0, r3
   12872:	370c      	adds	r7, #12
   12874:	46bd      	mov	sp, r7
   12876:	bdf0      	pop	{r4, r5, r6, r7, pc}

00012878 <myTraceCreate>:

void myTraceCreate      (){
   12878:	b480      	push	{r7}
   1287a:	af00      	add	r7, sp, #0
}
   1287c:	46bd      	mov	sp, r7
   1287e:	f85d 7b04 	ldr.w	r7, [sp], #4
   12882:	4770      	bx	lr

00012884 <myTraceSwitchedIn>:

void myTraceSwitchedIn  (){
   12884:	b480      	push	{r7}
   12886:	af00      	add	r7, sp, #0
}
   12888:	46bd      	mov	sp, r7
   1288a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1288e:	4770      	bx	lr

00012890 <myTraceSwitchedOut>:

void myTraceSwitchedOut	(){
   12890:	b480      	push	{r7}
   12892:	af00      	add	r7, sp, #0
}
   12894:	46bd      	mov	sp, r7
   12896:	f85d 7b04 	ldr.w	r7, [sp], #4
   1289a:	4770      	bx	lr

0001289c <vApplicationTickHook>:

void vApplicationTickHook()
{
   1289c:	b480      	push	{r7}
   1289e:	af00      	add	r7, sp, #0

}
   128a0:	46bd      	mov	sp, r7
   128a2:	f85d 7b04 	ldr.w	r7, [sp], #4
   128a6:	4770      	bx	lr

000128a8 <__aeabi_drsub>:
   128a8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   128ac:	e002      	b.n	128b4 <__adddf3>
   128ae:	bf00      	nop

000128b0 <__aeabi_dsub>:
   128b0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000128b4 <__adddf3>:
   128b4:	b530      	push	{r4, r5, lr}
   128b6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   128ba:	ea4f 0543 	mov.w	r5, r3, lsl #1
   128be:	ea94 0f05 	teq	r4, r5
   128c2:	bf08      	it	eq
   128c4:	ea90 0f02 	teqeq	r0, r2
   128c8:	bf1f      	itttt	ne
   128ca:	ea54 0c00 	orrsne.w	ip, r4, r0
   128ce:	ea55 0c02 	orrsne.w	ip, r5, r2
   128d2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   128d6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   128da:	f000 80e2 	beq.w	12aa2 <__adddf3+0x1ee>
   128de:	ea4f 5454 	mov.w	r4, r4, lsr #21
   128e2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   128e6:	bfb8      	it	lt
   128e8:	426d      	neglt	r5, r5
   128ea:	dd0c      	ble.n	12906 <__adddf3+0x52>
   128ec:	442c      	add	r4, r5
   128ee:	ea80 0202 	eor.w	r2, r0, r2
   128f2:	ea81 0303 	eor.w	r3, r1, r3
   128f6:	ea82 0000 	eor.w	r0, r2, r0
   128fa:	ea83 0101 	eor.w	r1, r3, r1
   128fe:	ea80 0202 	eor.w	r2, r0, r2
   12902:	ea81 0303 	eor.w	r3, r1, r3
   12906:	2d36      	cmp	r5, #54	; 0x36
   12908:	bf88      	it	hi
   1290a:	bd30      	pophi	{r4, r5, pc}
   1290c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   12910:	ea4f 3101 	mov.w	r1, r1, lsl #12
   12914:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   12918:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   1291c:	d002      	beq.n	12924 <__adddf3+0x70>
   1291e:	4240      	negs	r0, r0
   12920:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   12924:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   12928:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1292c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   12930:	d002      	beq.n	12938 <__adddf3+0x84>
   12932:	4252      	negs	r2, r2
   12934:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   12938:	ea94 0f05 	teq	r4, r5
   1293c:	f000 80a7 	beq.w	12a8e <__adddf3+0x1da>
   12940:	f1a4 0401 	sub.w	r4, r4, #1
   12944:	f1d5 0e20 	rsbs	lr, r5, #32
   12948:	db0d      	blt.n	12966 <__adddf3+0xb2>
   1294a:	fa02 fc0e 	lsl.w	ip, r2, lr
   1294e:	fa22 f205 	lsr.w	r2, r2, r5
   12952:	1880      	adds	r0, r0, r2
   12954:	f141 0100 	adc.w	r1, r1, #0
   12958:	fa03 f20e 	lsl.w	r2, r3, lr
   1295c:	1880      	adds	r0, r0, r2
   1295e:	fa43 f305 	asr.w	r3, r3, r5
   12962:	4159      	adcs	r1, r3
   12964:	e00e      	b.n	12984 <__adddf3+0xd0>
   12966:	f1a5 0520 	sub.w	r5, r5, #32
   1296a:	f10e 0e20 	add.w	lr, lr, #32
   1296e:	2a01      	cmp	r2, #1
   12970:	fa03 fc0e 	lsl.w	ip, r3, lr
   12974:	bf28      	it	cs
   12976:	f04c 0c02 	orrcs.w	ip, ip, #2
   1297a:	fa43 f305 	asr.w	r3, r3, r5
   1297e:	18c0      	adds	r0, r0, r3
   12980:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   12984:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   12988:	d507      	bpl.n	1299a <__adddf3+0xe6>
   1298a:	f04f 0e00 	mov.w	lr, #0
   1298e:	f1dc 0c00 	rsbs	ip, ip, #0
   12992:	eb7e 0000 	sbcs.w	r0, lr, r0
   12996:	eb6e 0101 	sbc.w	r1, lr, r1
   1299a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   1299e:	d31b      	bcc.n	129d8 <__adddf3+0x124>
   129a0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   129a4:	d30c      	bcc.n	129c0 <__adddf3+0x10c>
   129a6:	0849      	lsrs	r1, r1, #1
   129a8:	ea5f 0030 	movs.w	r0, r0, rrx
   129ac:	ea4f 0c3c 	mov.w	ip, ip, rrx
   129b0:	f104 0401 	add.w	r4, r4, #1
   129b4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   129b8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   129bc:	f080 809a 	bcs.w	12af4 <__adddf3+0x240>
   129c0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   129c4:	bf08      	it	eq
   129c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   129ca:	f150 0000 	adcs.w	r0, r0, #0
   129ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   129d2:	ea41 0105 	orr.w	r1, r1, r5
   129d6:	bd30      	pop	{r4, r5, pc}
   129d8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   129dc:	4140      	adcs	r0, r0
   129de:	eb41 0101 	adc.w	r1, r1, r1
   129e2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   129e6:	f1a4 0401 	sub.w	r4, r4, #1
   129ea:	d1e9      	bne.n	129c0 <__adddf3+0x10c>
   129ec:	f091 0f00 	teq	r1, #0
   129f0:	bf04      	itt	eq
   129f2:	4601      	moveq	r1, r0
   129f4:	2000      	moveq	r0, #0
   129f6:	fab1 f381 	clz	r3, r1
   129fa:	bf08      	it	eq
   129fc:	3320      	addeq	r3, #32
   129fe:	f1a3 030b 	sub.w	r3, r3, #11
   12a02:	f1b3 0220 	subs.w	r2, r3, #32
   12a06:	da0c      	bge.n	12a22 <__adddf3+0x16e>
   12a08:	320c      	adds	r2, #12
   12a0a:	dd08      	ble.n	12a1e <__adddf3+0x16a>
   12a0c:	f102 0c14 	add.w	ip, r2, #20
   12a10:	f1c2 020c 	rsb	r2, r2, #12
   12a14:	fa01 f00c 	lsl.w	r0, r1, ip
   12a18:	fa21 f102 	lsr.w	r1, r1, r2
   12a1c:	e00c      	b.n	12a38 <__adddf3+0x184>
   12a1e:	f102 0214 	add.w	r2, r2, #20
   12a22:	bfd8      	it	le
   12a24:	f1c2 0c20 	rsble	ip, r2, #32
   12a28:	fa01 f102 	lsl.w	r1, r1, r2
   12a2c:	fa20 fc0c 	lsr.w	ip, r0, ip
   12a30:	bfdc      	itt	le
   12a32:	ea41 010c 	orrle.w	r1, r1, ip
   12a36:	4090      	lslle	r0, r2
   12a38:	1ae4      	subs	r4, r4, r3
   12a3a:	bfa2      	ittt	ge
   12a3c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   12a40:	4329      	orrge	r1, r5
   12a42:	bd30      	popge	{r4, r5, pc}
   12a44:	ea6f 0404 	mvn.w	r4, r4
   12a48:	3c1f      	subs	r4, #31
   12a4a:	da1c      	bge.n	12a86 <__adddf3+0x1d2>
   12a4c:	340c      	adds	r4, #12
   12a4e:	dc0e      	bgt.n	12a6e <__adddf3+0x1ba>
   12a50:	f104 0414 	add.w	r4, r4, #20
   12a54:	f1c4 0220 	rsb	r2, r4, #32
   12a58:	fa20 f004 	lsr.w	r0, r0, r4
   12a5c:	fa01 f302 	lsl.w	r3, r1, r2
   12a60:	ea40 0003 	orr.w	r0, r0, r3
   12a64:	fa21 f304 	lsr.w	r3, r1, r4
   12a68:	ea45 0103 	orr.w	r1, r5, r3
   12a6c:	bd30      	pop	{r4, r5, pc}
   12a6e:	f1c4 040c 	rsb	r4, r4, #12
   12a72:	f1c4 0220 	rsb	r2, r4, #32
   12a76:	fa20 f002 	lsr.w	r0, r0, r2
   12a7a:	fa01 f304 	lsl.w	r3, r1, r4
   12a7e:	ea40 0003 	orr.w	r0, r0, r3
   12a82:	4629      	mov	r1, r5
   12a84:	bd30      	pop	{r4, r5, pc}
   12a86:	fa21 f004 	lsr.w	r0, r1, r4
   12a8a:	4629      	mov	r1, r5
   12a8c:	bd30      	pop	{r4, r5, pc}
   12a8e:	f094 0f00 	teq	r4, #0
   12a92:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   12a96:	bf06      	itte	eq
   12a98:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   12a9c:	3401      	addeq	r4, #1
   12a9e:	3d01      	subne	r5, #1
   12aa0:	e74e      	b.n	12940 <__adddf3+0x8c>
   12aa2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   12aa6:	bf18      	it	ne
   12aa8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   12aac:	d029      	beq.n	12b02 <__adddf3+0x24e>
   12aae:	ea94 0f05 	teq	r4, r5
   12ab2:	bf08      	it	eq
   12ab4:	ea90 0f02 	teqeq	r0, r2
   12ab8:	d005      	beq.n	12ac6 <__adddf3+0x212>
   12aba:	ea54 0c00 	orrs.w	ip, r4, r0
   12abe:	bf04      	itt	eq
   12ac0:	4619      	moveq	r1, r3
   12ac2:	4610      	moveq	r0, r2
   12ac4:	bd30      	pop	{r4, r5, pc}
   12ac6:	ea91 0f03 	teq	r1, r3
   12aca:	bf1e      	ittt	ne
   12acc:	2100      	movne	r1, #0
   12ace:	2000      	movne	r0, #0
   12ad0:	bd30      	popne	{r4, r5, pc}
   12ad2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   12ad6:	d105      	bne.n	12ae4 <__adddf3+0x230>
   12ad8:	0040      	lsls	r0, r0, #1
   12ada:	4149      	adcs	r1, r1
   12adc:	bf28      	it	cs
   12ade:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   12ae2:	bd30      	pop	{r4, r5, pc}
   12ae4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   12ae8:	bf3c      	itt	cc
   12aea:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   12aee:	bd30      	popcc	{r4, r5, pc}
   12af0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   12af4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   12af8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   12afc:	f04f 0000 	mov.w	r0, #0
   12b00:	bd30      	pop	{r4, r5, pc}
   12b02:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   12b06:	bf1a      	itte	ne
   12b08:	4619      	movne	r1, r3
   12b0a:	4610      	movne	r0, r2
   12b0c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   12b10:	bf1c      	itt	ne
   12b12:	460b      	movne	r3, r1
   12b14:	4602      	movne	r2, r0
   12b16:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   12b1a:	bf06      	itte	eq
   12b1c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   12b20:	ea91 0f03 	teqeq	r1, r3
   12b24:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   12b28:	bd30      	pop	{r4, r5, pc}
   12b2a:	bf00      	nop

00012b2c <__aeabi_ui2d>:
   12b2c:	f090 0f00 	teq	r0, #0
   12b30:	bf04      	itt	eq
   12b32:	2100      	moveq	r1, #0
   12b34:	4770      	bxeq	lr
   12b36:	b530      	push	{r4, r5, lr}
   12b38:	f44f 6480 	mov.w	r4, #1024	; 0x400
   12b3c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   12b40:	f04f 0500 	mov.w	r5, #0
   12b44:	f04f 0100 	mov.w	r1, #0
   12b48:	e750      	b.n	129ec <__adddf3+0x138>
   12b4a:	bf00      	nop

00012b4c <__aeabi_i2d>:
   12b4c:	f090 0f00 	teq	r0, #0
   12b50:	bf04      	itt	eq
   12b52:	2100      	moveq	r1, #0
   12b54:	4770      	bxeq	lr
   12b56:	b530      	push	{r4, r5, lr}
   12b58:	f44f 6480 	mov.w	r4, #1024	; 0x400
   12b5c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   12b60:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   12b64:	bf48      	it	mi
   12b66:	4240      	negmi	r0, r0
   12b68:	f04f 0100 	mov.w	r1, #0
   12b6c:	e73e      	b.n	129ec <__adddf3+0x138>
   12b6e:	bf00      	nop

00012b70 <__aeabi_f2d>:
   12b70:	0042      	lsls	r2, r0, #1
   12b72:	ea4f 01e2 	mov.w	r1, r2, asr #3
   12b76:	ea4f 0131 	mov.w	r1, r1, rrx
   12b7a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   12b7e:	bf1f      	itttt	ne
   12b80:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   12b84:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   12b88:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   12b8c:	4770      	bxne	lr
   12b8e:	f092 0f00 	teq	r2, #0
   12b92:	bf14      	ite	ne
   12b94:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   12b98:	4770      	bxeq	lr
   12b9a:	b530      	push	{r4, r5, lr}
   12b9c:	f44f 7460 	mov.w	r4, #896	; 0x380
   12ba0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   12ba4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   12ba8:	e720      	b.n	129ec <__adddf3+0x138>
   12baa:	bf00      	nop

00012bac <__aeabi_ul2d>:
   12bac:	ea50 0201 	orrs.w	r2, r0, r1
   12bb0:	bf08      	it	eq
   12bb2:	4770      	bxeq	lr
   12bb4:	b530      	push	{r4, r5, lr}
   12bb6:	f04f 0500 	mov.w	r5, #0
   12bba:	e00a      	b.n	12bd2 <__aeabi_l2d+0x16>

00012bbc <__aeabi_l2d>:
   12bbc:	ea50 0201 	orrs.w	r2, r0, r1
   12bc0:	bf08      	it	eq
   12bc2:	4770      	bxeq	lr
   12bc4:	b530      	push	{r4, r5, lr}
   12bc6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   12bca:	d502      	bpl.n	12bd2 <__aeabi_l2d+0x16>
   12bcc:	4240      	negs	r0, r0
   12bce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   12bd2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   12bd6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   12bda:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   12bde:	f43f aedc 	beq.w	1299a <__adddf3+0xe6>
   12be2:	f04f 0203 	mov.w	r2, #3
   12be6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   12bea:	bf18      	it	ne
   12bec:	3203      	addne	r2, #3
   12bee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   12bf2:	bf18      	it	ne
   12bf4:	3203      	addne	r2, #3
   12bf6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   12bfa:	f1c2 0320 	rsb	r3, r2, #32
   12bfe:	fa00 fc03 	lsl.w	ip, r0, r3
   12c02:	fa20 f002 	lsr.w	r0, r0, r2
   12c06:	fa01 fe03 	lsl.w	lr, r1, r3
   12c0a:	ea40 000e 	orr.w	r0, r0, lr
   12c0e:	fa21 f102 	lsr.w	r1, r1, r2
   12c12:	4414      	add	r4, r2
   12c14:	e6c1      	b.n	1299a <__adddf3+0xe6>
   12c16:	bf00      	nop

00012c18 <__aeabi_dmul>:
   12c18:	b570      	push	{r4, r5, r6, lr}
   12c1a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   12c1e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   12c22:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   12c26:	bf1d      	ittte	ne
   12c28:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   12c2c:	ea94 0f0c 	teqne	r4, ip
   12c30:	ea95 0f0c 	teqne	r5, ip
   12c34:	f000 f8de 	bleq	12df4 <__aeabi_dmul+0x1dc>
   12c38:	442c      	add	r4, r5
   12c3a:	ea81 0603 	eor.w	r6, r1, r3
   12c3e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   12c42:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   12c46:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   12c4a:	bf18      	it	ne
   12c4c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   12c50:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   12c54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   12c58:	d038      	beq.n	12ccc <__aeabi_dmul+0xb4>
   12c5a:	fba0 ce02 	umull	ip, lr, r0, r2
   12c5e:	f04f 0500 	mov.w	r5, #0
   12c62:	fbe1 e502 	umlal	lr, r5, r1, r2
   12c66:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   12c6a:	fbe0 e503 	umlal	lr, r5, r0, r3
   12c6e:	f04f 0600 	mov.w	r6, #0
   12c72:	fbe1 5603 	umlal	r5, r6, r1, r3
   12c76:	f09c 0f00 	teq	ip, #0
   12c7a:	bf18      	it	ne
   12c7c:	f04e 0e01 	orrne.w	lr, lr, #1
   12c80:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   12c84:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   12c88:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   12c8c:	d204      	bcs.n	12c98 <__aeabi_dmul+0x80>
   12c8e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   12c92:	416d      	adcs	r5, r5
   12c94:	eb46 0606 	adc.w	r6, r6, r6
   12c98:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   12c9c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   12ca0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   12ca4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   12ca8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   12cac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   12cb0:	bf88      	it	hi
   12cb2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   12cb6:	d81e      	bhi.n	12cf6 <__aeabi_dmul+0xde>
   12cb8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   12cbc:	bf08      	it	eq
   12cbe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   12cc2:	f150 0000 	adcs.w	r0, r0, #0
   12cc6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   12cca:	bd70      	pop	{r4, r5, r6, pc}
   12ccc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   12cd0:	ea46 0101 	orr.w	r1, r6, r1
   12cd4:	ea40 0002 	orr.w	r0, r0, r2
   12cd8:	ea81 0103 	eor.w	r1, r1, r3
   12cdc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   12ce0:	bfc2      	ittt	gt
   12ce2:	ebd4 050c 	rsbsgt	r5, r4, ip
   12ce6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   12cea:	bd70      	popgt	{r4, r5, r6, pc}
   12cec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   12cf0:	f04f 0e00 	mov.w	lr, #0
   12cf4:	3c01      	subs	r4, #1
   12cf6:	f300 80ab 	bgt.w	12e50 <__aeabi_dmul+0x238>
   12cfa:	f114 0f36 	cmn.w	r4, #54	; 0x36
   12cfe:	bfde      	ittt	le
   12d00:	2000      	movle	r0, #0
   12d02:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   12d06:	bd70      	pople	{r4, r5, r6, pc}
   12d08:	f1c4 0400 	rsb	r4, r4, #0
   12d0c:	3c20      	subs	r4, #32
   12d0e:	da35      	bge.n	12d7c <__aeabi_dmul+0x164>
   12d10:	340c      	adds	r4, #12
   12d12:	dc1b      	bgt.n	12d4c <__aeabi_dmul+0x134>
   12d14:	f104 0414 	add.w	r4, r4, #20
   12d18:	f1c4 0520 	rsb	r5, r4, #32
   12d1c:	fa00 f305 	lsl.w	r3, r0, r5
   12d20:	fa20 f004 	lsr.w	r0, r0, r4
   12d24:	fa01 f205 	lsl.w	r2, r1, r5
   12d28:	ea40 0002 	orr.w	r0, r0, r2
   12d2c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   12d30:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   12d34:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   12d38:	fa21 f604 	lsr.w	r6, r1, r4
   12d3c:	eb42 0106 	adc.w	r1, r2, r6
   12d40:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   12d44:	bf08      	it	eq
   12d46:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   12d4a:	bd70      	pop	{r4, r5, r6, pc}
   12d4c:	f1c4 040c 	rsb	r4, r4, #12
   12d50:	f1c4 0520 	rsb	r5, r4, #32
   12d54:	fa00 f304 	lsl.w	r3, r0, r4
   12d58:	fa20 f005 	lsr.w	r0, r0, r5
   12d5c:	fa01 f204 	lsl.w	r2, r1, r4
   12d60:	ea40 0002 	orr.w	r0, r0, r2
   12d64:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   12d68:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   12d6c:	f141 0100 	adc.w	r1, r1, #0
   12d70:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   12d74:	bf08      	it	eq
   12d76:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   12d7a:	bd70      	pop	{r4, r5, r6, pc}
   12d7c:	f1c4 0520 	rsb	r5, r4, #32
   12d80:	fa00 f205 	lsl.w	r2, r0, r5
   12d84:	ea4e 0e02 	orr.w	lr, lr, r2
   12d88:	fa20 f304 	lsr.w	r3, r0, r4
   12d8c:	fa01 f205 	lsl.w	r2, r1, r5
   12d90:	ea43 0302 	orr.w	r3, r3, r2
   12d94:	fa21 f004 	lsr.w	r0, r1, r4
   12d98:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   12d9c:	fa21 f204 	lsr.w	r2, r1, r4
   12da0:	ea20 0002 	bic.w	r0, r0, r2
   12da4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   12da8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   12dac:	bf08      	it	eq
   12dae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   12db2:	bd70      	pop	{r4, r5, r6, pc}
   12db4:	f094 0f00 	teq	r4, #0
   12db8:	d10f      	bne.n	12dda <__aeabi_dmul+0x1c2>
   12dba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   12dbe:	0040      	lsls	r0, r0, #1
   12dc0:	eb41 0101 	adc.w	r1, r1, r1
   12dc4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   12dc8:	bf08      	it	eq
   12dca:	3c01      	subeq	r4, #1
   12dcc:	d0f7      	beq.n	12dbe <__aeabi_dmul+0x1a6>
   12dce:	ea41 0106 	orr.w	r1, r1, r6
   12dd2:	f095 0f00 	teq	r5, #0
   12dd6:	bf18      	it	ne
   12dd8:	4770      	bxne	lr
   12dda:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   12dde:	0052      	lsls	r2, r2, #1
   12de0:	eb43 0303 	adc.w	r3, r3, r3
   12de4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   12de8:	bf08      	it	eq
   12dea:	3d01      	subeq	r5, #1
   12dec:	d0f7      	beq.n	12dde <__aeabi_dmul+0x1c6>
   12dee:	ea43 0306 	orr.w	r3, r3, r6
   12df2:	4770      	bx	lr
   12df4:	ea94 0f0c 	teq	r4, ip
   12df8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   12dfc:	bf18      	it	ne
   12dfe:	ea95 0f0c 	teqne	r5, ip
   12e02:	d00c      	beq.n	12e1e <__aeabi_dmul+0x206>
   12e04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   12e08:	bf18      	it	ne
   12e0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   12e0e:	d1d1      	bne.n	12db4 <__aeabi_dmul+0x19c>
   12e10:	ea81 0103 	eor.w	r1, r1, r3
   12e14:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   12e18:	f04f 0000 	mov.w	r0, #0
   12e1c:	bd70      	pop	{r4, r5, r6, pc}
   12e1e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   12e22:	bf06      	itte	eq
   12e24:	4610      	moveq	r0, r2
   12e26:	4619      	moveq	r1, r3
   12e28:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   12e2c:	d019      	beq.n	12e62 <__aeabi_dmul+0x24a>
   12e2e:	ea94 0f0c 	teq	r4, ip
   12e32:	d102      	bne.n	12e3a <__aeabi_dmul+0x222>
   12e34:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   12e38:	d113      	bne.n	12e62 <__aeabi_dmul+0x24a>
   12e3a:	ea95 0f0c 	teq	r5, ip
   12e3e:	d105      	bne.n	12e4c <__aeabi_dmul+0x234>
   12e40:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   12e44:	bf1c      	itt	ne
   12e46:	4610      	movne	r0, r2
   12e48:	4619      	movne	r1, r3
   12e4a:	d10a      	bne.n	12e62 <__aeabi_dmul+0x24a>
   12e4c:	ea81 0103 	eor.w	r1, r1, r3
   12e50:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   12e54:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   12e58:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   12e5c:	f04f 0000 	mov.w	r0, #0
   12e60:	bd70      	pop	{r4, r5, r6, pc}
   12e62:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   12e66:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   12e6a:	bd70      	pop	{r4, r5, r6, pc}

00012e6c <__aeabi_ddiv>:
   12e6c:	b570      	push	{r4, r5, r6, lr}
   12e6e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   12e72:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   12e76:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   12e7a:	bf1d      	ittte	ne
   12e7c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   12e80:	ea94 0f0c 	teqne	r4, ip
   12e84:	ea95 0f0c 	teqne	r5, ip
   12e88:	f000 f8a7 	bleq	12fda <__aeabi_ddiv+0x16e>
   12e8c:	eba4 0405 	sub.w	r4, r4, r5
   12e90:	ea81 0e03 	eor.w	lr, r1, r3
   12e94:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   12e98:	ea4f 3101 	mov.w	r1, r1, lsl #12
   12e9c:	f000 8088 	beq.w	12fb0 <__aeabi_ddiv+0x144>
   12ea0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   12ea4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   12ea8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   12eac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   12eb0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   12eb4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   12eb8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   12ebc:	ea4f 2600 	mov.w	r6, r0, lsl #8
   12ec0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   12ec4:	429d      	cmp	r5, r3
   12ec6:	bf08      	it	eq
   12ec8:	4296      	cmpeq	r6, r2
   12eca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   12ece:	f504 7440 	add.w	r4, r4, #768	; 0x300
   12ed2:	d202      	bcs.n	12eda <__aeabi_ddiv+0x6e>
   12ed4:	085b      	lsrs	r3, r3, #1
   12ed6:	ea4f 0232 	mov.w	r2, r2, rrx
   12eda:	1ab6      	subs	r6, r6, r2
   12edc:	eb65 0503 	sbc.w	r5, r5, r3
   12ee0:	085b      	lsrs	r3, r3, #1
   12ee2:	ea4f 0232 	mov.w	r2, r2, rrx
   12ee6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   12eea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   12eee:	ebb6 0e02 	subs.w	lr, r6, r2
   12ef2:	eb75 0e03 	sbcs.w	lr, r5, r3
   12ef6:	bf22      	ittt	cs
   12ef8:	1ab6      	subcs	r6, r6, r2
   12efa:	4675      	movcs	r5, lr
   12efc:	ea40 000c 	orrcs.w	r0, r0, ip
   12f00:	085b      	lsrs	r3, r3, #1
   12f02:	ea4f 0232 	mov.w	r2, r2, rrx
   12f06:	ebb6 0e02 	subs.w	lr, r6, r2
   12f0a:	eb75 0e03 	sbcs.w	lr, r5, r3
   12f0e:	bf22      	ittt	cs
   12f10:	1ab6      	subcs	r6, r6, r2
   12f12:	4675      	movcs	r5, lr
   12f14:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   12f18:	085b      	lsrs	r3, r3, #1
   12f1a:	ea4f 0232 	mov.w	r2, r2, rrx
   12f1e:	ebb6 0e02 	subs.w	lr, r6, r2
   12f22:	eb75 0e03 	sbcs.w	lr, r5, r3
   12f26:	bf22      	ittt	cs
   12f28:	1ab6      	subcs	r6, r6, r2
   12f2a:	4675      	movcs	r5, lr
   12f2c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   12f30:	085b      	lsrs	r3, r3, #1
   12f32:	ea4f 0232 	mov.w	r2, r2, rrx
   12f36:	ebb6 0e02 	subs.w	lr, r6, r2
   12f3a:	eb75 0e03 	sbcs.w	lr, r5, r3
   12f3e:	bf22      	ittt	cs
   12f40:	1ab6      	subcs	r6, r6, r2
   12f42:	4675      	movcs	r5, lr
   12f44:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   12f48:	ea55 0e06 	orrs.w	lr, r5, r6
   12f4c:	d018      	beq.n	12f80 <__aeabi_ddiv+0x114>
   12f4e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   12f52:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   12f56:	ea4f 1606 	mov.w	r6, r6, lsl #4
   12f5a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   12f5e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   12f62:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   12f66:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   12f6a:	d1c0      	bne.n	12eee <__aeabi_ddiv+0x82>
   12f6c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   12f70:	d10b      	bne.n	12f8a <__aeabi_ddiv+0x11e>
   12f72:	ea41 0100 	orr.w	r1, r1, r0
   12f76:	f04f 0000 	mov.w	r0, #0
   12f7a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   12f7e:	e7b6      	b.n	12eee <__aeabi_ddiv+0x82>
   12f80:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   12f84:	bf04      	itt	eq
   12f86:	4301      	orreq	r1, r0
   12f88:	2000      	moveq	r0, #0
   12f8a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   12f8e:	bf88      	it	hi
   12f90:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   12f94:	f63f aeaf 	bhi.w	12cf6 <__aeabi_dmul+0xde>
   12f98:	ebb5 0c03 	subs.w	ip, r5, r3
   12f9c:	bf04      	itt	eq
   12f9e:	ebb6 0c02 	subseq.w	ip, r6, r2
   12fa2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   12fa6:	f150 0000 	adcs.w	r0, r0, #0
   12faa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   12fae:	bd70      	pop	{r4, r5, r6, pc}
   12fb0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   12fb4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   12fb8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   12fbc:	bfc2      	ittt	gt
   12fbe:	ebd4 050c 	rsbsgt	r5, r4, ip
   12fc2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   12fc6:	bd70      	popgt	{r4, r5, r6, pc}
   12fc8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   12fcc:	f04f 0e00 	mov.w	lr, #0
   12fd0:	3c01      	subs	r4, #1
   12fd2:	e690      	b.n	12cf6 <__aeabi_dmul+0xde>
   12fd4:	ea45 0e06 	orr.w	lr, r5, r6
   12fd8:	e68d      	b.n	12cf6 <__aeabi_dmul+0xde>
   12fda:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   12fde:	ea94 0f0c 	teq	r4, ip
   12fe2:	bf08      	it	eq
   12fe4:	ea95 0f0c 	teqeq	r5, ip
   12fe8:	f43f af3b 	beq.w	12e62 <__aeabi_dmul+0x24a>
   12fec:	ea94 0f0c 	teq	r4, ip
   12ff0:	d10a      	bne.n	13008 <__aeabi_ddiv+0x19c>
   12ff2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   12ff6:	f47f af34 	bne.w	12e62 <__aeabi_dmul+0x24a>
   12ffa:	ea95 0f0c 	teq	r5, ip
   12ffe:	f47f af25 	bne.w	12e4c <__aeabi_dmul+0x234>
   13002:	4610      	mov	r0, r2
   13004:	4619      	mov	r1, r3
   13006:	e72c      	b.n	12e62 <__aeabi_dmul+0x24a>
   13008:	ea95 0f0c 	teq	r5, ip
   1300c:	d106      	bne.n	1301c <__aeabi_ddiv+0x1b0>
   1300e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   13012:	f43f aefd 	beq.w	12e10 <__aeabi_dmul+0x1f8>
   13016:	4610      	mov	r0, r2
   13018:	4619      	mov	r1, r3
   1301a:	e722      	b.n	12e62 <__aeabi_dmul+0x24a>
   1301c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   13020:	bf18      	it	ne
   13022:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   13026:	f47f aec5 	bne.w	12db4 <__aeabi_dmul+0x19c>
   1302a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   1302e:	f47f af0d 	bne.w	12e4c <__aeabi_dmul+0x234>
   13032:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   13036:	f47f aeeb 	bne.w	12e10 <__aeabi_dmul+0x1f8>
   1303a:	e712      	b.n	12e62 <__aeabi_dmul+0x24a>

0001303c <__gedf2>:
   1303c:	f04f 3cff 	mov.w	ip, #4294967295
   13040:	e006      	b.n	13050 <__cmpdf2+0x4>
   13042:	bf00      	nop

00013044 <__ledf2>:
   13044:	f04f 0c01 	mov.w	ip, #1
   13048:	e002      	b.n	13050 <__cmpdf2+0x4>
   1304a:	bf00      	nop

0001304c <__cmpdf2>:
   1304c:	f04f 0c01 	mov.w	ip, #1
   13050:	f84d cd04 	str.w	ip, [sp, #-4]!
   13054:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   13058:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1305c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   13060:	bf18      	it	ne
   13062:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   13066:	d01b      	beq.n	130a0 <__cmpdf2+0x54>
   13068:	b001      	add	sp, #4
   1306a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   1306e:	bf0c      	ite	eq
   13070:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   13074:	ea91 0f03 	teqne	r1, r3
   13078:	bf02      	ittt	eq
   1307a:	ea90 0f02 	teqeq	r0, r2
   1307e:	2000      	moveq	r0, #0
   13080:	4770      	bxeq	lr
   13082:	f110 0f00 	cmn.w	r0, #0
   13086:	ea91 0f03 	teq	r1, r3
   1308a:	bf58      	it	pl
   1308c:	4299      	cmppl	r1, r3
   1308e:	bf08      	it	eq
   13090:	4290      	cmpeq	r0, r2
   13092:	bf2c      	ite	cs
   13094:	17d8      	asrcs	r0, r3, #31
   13096:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   1309a:	f040 0001 	orr.w	r0, r0, #1
   1309e:	4770      	bx	lr
   130a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   130a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   130a8:	d102      	bne.n	130b0 <__cmpdf2+0x64>
   130aa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   130ae:	d107      	bne.n	130c0 <__cmpdf2+0x74>
   130b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   130b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   130b8:	d1d6      	bne.n	13068 <__cmpdf2+0x1c>
   130ba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   130be:	d0d3      	beq.n	13068 <__cmpdf2+0x1c>
   130c0:	f85d 0b04 	ldr.w	r0, [sp], #4
   130c4:	4770      	bx	lr
   130c6:	bf00      	nop

000130c8 <__aeabi_cdrcmple>:
   130c8:	4684      	mov	ip, r0
   130ca:	4610      	mov	r0, r2
   130cc:	4662      	mov	r2, ip
   130ce:	468c      	mov	ip, r1
   130d0:	4619      	mov	r1, r3
   130d2:	4663      	mov	r3, ip
   130d4:	e000      	b.n	130d8 <__aeabi_cdcmpeq>
   130d6:	bf00      	nop

000130d8 <__aeabi_cdcmpeq>:
   130d8:	b501      	push	{r0, lr}
   130da:	f7ff ffb7 	bl	1304c <__cmpdf2>
   130de:	2800      	cmp	r0, #0
   130e0:	bf48      	it	mi
   130e2:	f110 0f00 	cmnmi.w	r0, #0
   130e6:	bd01      	pop	{r0, pc}

000130e8 <__aeabi_dcmpeq>:
   130e8:	f84d ed08 	str.w	lr, [sp, #-8]!
   130ec:	f7ff fff4 	bl	130d8 <__aeabi_cdcmpeq>
   130f0:	bf0c      	ite	eq
   130f2:	2001      	moveq	r0, #1
   130f4:	2000      	movne	r0, #0
   130f6:	f85d fb08 	ldr.w	pc, [sp], #8
   130fa:	bf00      	nop

000130fc <__aeabi_dcmplt>:
   130fc:	f84d ed08 	str.w	lr, [sp, #-8]!
   13100:	f7ff ffea 	bl	130d8 <__aeabi_cdcmpeq>
   13104:	bf34      	ite	cc
   13106:	2001      	movcc	r0, #1
   13108:	2000      	movcs	r0, #0
   1310a:	f85d fb08 	ldr.w	pc, [sp], #8
   1310e:	bf00      	nop

00013110 <__aeabi_dcmple>:
   13110:	f84d ed08 	str.w	lr, [sp, #-8]!
   13114:	f7ff ffe0 	bl	130d8 <__aeabi_cdcmpeq>
   13118:	bf94      	ite	ls
   1311a:	2001      	movls	r0, #1
   1311c:	2000      	movhi	r0, #0
   1311e:	f85d fb08 	ldr.w	pc, [sp], #8
   13122:	bf00      	nop

00013124 <__aeabi_dcmpge>:
   13124:	f84d ed08 	str.w	lr, [sp, #-8]!
   13128:	f7ff ffce 	bl	130c8 <__aeabi_cdrcmple>
   1312c:	bf94      	ite	ls
   1312e:	2001      	movls	r0, #1
   13130:	2000      	movhi	r0, #0
   13132:	f85d fb08 	ldr.w	pc, [sp], #8
   13136:	bf00      	nop

00013138 <__aeabi_dcmpgt>:
   13138:	f84d ed08 	str.w	lr, [sp, #-8]!
   1313c:	f7ff ffc4 	bl	130c8 <__aeabi_cdrcmple>
   13140:	bf34      	ite	cc
   13142:	2001      	movcc	r0, #1
   13144:	2000      	movcs	r0, #0
   13146:	f85d fb08 	ldr.w	pc, [sp], #8
   1314a:	bf00      	nop

0001314c <__aeabi_d2iz>:
   1314c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   13150:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   13154:	d215      	bcs.n	13182 <__aeabi_d2iz+0x36>
   13156:	d511      	bpl.n	1317c <__aeabi_d2iz+0x30>
   13158:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1315c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   13160:	d912      	bls.n	13188 <__aeabi_d2iz+0x3c>
   13162:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   13166:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1316a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1316e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   13172:	fa23 f002 	lsr.w	r0, r3, r2
   13176:	bf18      	it	ne
   13178:	4240      	negne	r0, r0
   1317a:	4770      	bx	lr
   1317c:	f04f 0000 	mov.w	r0, #0
   13180:	4770      	bx	lr
   13182:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   13186:	d105      	bne.n	13194 <__aeabi_d2iz+0x48>
   13188:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   1318c:	bf08      	it	eq
   1318e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   13192:	4770      	bx	lr
   13194:	f04f 0000 	mov.w	r0, #0
   13198:	4770      	bx	lr
   1319a:	bf00      	nop

0001319c <__aeabi_d2uiz>:
   1319c:	004a      	lsls	r2, r1, #1
   1319e:	d211      	bcs.n	131c4 <__aeabi_d2uiz+0x28>
   131a0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   131a4:	d211      	bcs.n	131ca <__aeabi_d2uiz+0x2e>
   131a6:	d50d      	bpl.n	131c4 <__aeabi_d2uiz+0x28>
   131a8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   131ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   131b0:	d40e      	bmi.n	131d0 <__aeabi_d2uiz+0x34>
   131b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   131b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   131ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   131be:	fa23 f002 	lsr.w	r0, r3, r2
   131c2:	4770      	bx	lr
   131c4:	f04f 0000 	mov.w	r0, #0
   131c8:	4770      	bx	lr
   131ca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   131ce:	d102      	bne.n	131d6 <__aeabi_d2uiz+0x3a>
   131d0:	f04f 30ff 	mov.w	r0, #4294967295
   131d4:	4770      	bx	lr
   131d6:	f04f 0000 	mov.w	r0, #0
   131da:	4770      	bx	lr

000131dc <__aeabi_d2f>:
   131dc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   131e0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   131e4:	bf24      	itt	cs
   131e6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   131ea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   131ee:	d90d      	bls.n	1320c <__aeabi_d2f+0x30>
   131f0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   131f4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   131f8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   131fc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   13200:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   13204:	bf08      	it	eq
   13206:	f020 0001 	biceq.w	r0, r0, #1
   1320a:	4770      	bx	lr
   1320c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   13210:	d121      	bne.n	13256 <__aeabi_d2f+0x7a>
   13212:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   13216:	bfbc      	itt	lt
   13218:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   1321c:	4770      	bxlt	lr
   1321e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   13222:	ea4f 5252 	mov.w	r2, r2, lsr #21
   13226:	f1c2 0218 	rsb	r2, r2, #24
   1322a:	f1c2 0c20 	rsb	ip, r2, #32
   1322e:	fa10 f30c 	lsls.w	r3, r0, ip
   13232:	fa20 f002 	lsr.w	r0, r0, r2
   13236:	bf18      	it	ne
   13238:	f040 0001 	orrne.w	r0, r0, #1
   1323c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   13240:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   13244:	fa03 fc0c 	lsl.w	ip, r3, ip
   13248:	ea40 000c 	orr.w	r0, r0, ip
   1324c:	fa23 f302 	lsr.w	r3, r3, r2
   13250:	ea4f 0343 	mov.w	r3, r3, lsl #1
   13254:	e7cc      	b.n	131f0 <__aeabi_d2f+0x14>
   13256:	ea7f 5362 	mvns.w	r3, r2, asr #21
   1325a:	d107      	bne.n	1326c <__aeabi_d2f+0x90>
   1325c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   13260:	bf1e      	ittt	ne
   13262:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   13266:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   1326a:	4770      	bxne	lr
   1326c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   13270:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   13274:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   13278:	4770      	bx	lr
   1327a:	bf00      	nop

0001327c <__aeabi_frsub>:
   1327c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   13280:	e002      	b.n	13288 <__addsf3>
   13282:	bf00      	nop

00013284 <__aeabi_fsub>:
   13284:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00013288 <__addsf3>:
   13288:	0042      	lsls	r2, r0, #1
   1328a:	bf1f      	itttt	ne
   1328c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   13290:	ea92 0f03 	teqne	r2, r3
   13294:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   13298:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1329c:	d06a      	beq.n	13374 <__addsf3+0xec>
   1329e:	ea4f 6212 	mov.w	r2, r2, lsr #24
   132a2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   132a6:	bfc1      	itttt	gt
   132a8:	18d2      	addgt	r2, r2, r3
   132aa:	4041      	eorgt	r1, r0
   132ac:	4048      	eorgt	r0, r1
   132ae:	4041      	eorgt	r1, r0
   132b0:	bfb8      	it	lt
   132b2:	425b      	neglt	r3, r3
   132b4:	2b19      	cmp	r3, #25
   132b6:	bf88      	it	hi
   132b8:	4770      	bxhi	lr
   132ba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   132be:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   132c2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   132c6:	bf18      	it	ne
   132c8:	4240      	negne	r0, r0
   132ca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   132ce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   132d2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   132d6:	bf18      	it	ne
   132d8:	4249      	negne	r1, r1
   132da:	ea92 0f03 	teq	r2, r3
   132de:	d03f      	beq.n	13360 <__addsf3+0xd8>
   132e0:	f1a2 0201 	sub.w	r2, r2, #1
   132e4:	fa41 fc03 	asr.w	ip, r1, r3
   132e8:	eb10 000c 	adds.w	r0, r0, ip
   132ec:	f1c3 0320 	rsb	r3, r3, #32
   132f0:	fa01 f103 	lsl.w	r1, r1, r3
   132f4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   132f8:	d502      	bpl.n	13300 <__addsf3+0x78>
   132fa:	4249      	negs	r1, r1
   132fc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   13300:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   13304:	d313      	bcc.n	1332e <__addsf3+0xa6>
   13306:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   1330a:	d306      	bcc.n	1331a <__addsf3+0x92>
   1330c:	0840      	lsrs	r0, r0, #1
   1330e:	ea4f 0131 	mov.w	r1, r1, rrx
   13312:	f102 0201 	add.w	r2, r2, #1
   13316:	2afe      	cmp	r2, #254	; 0xfe
   13318:	d251      	bcs.n	133be <__addsf3+0x136>
   1331a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   1331e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   13322:	bf08      	it	eq
   13324:	f020 0001 	biceq.w	r0, r0, #1
   13328:	ea40 0003 	orr.w	r0, r0, r3
   1332c:	4770      	bx	lr
   1332e:	0049      	lsls	r1, r1, #1
   13330:	eb40 0000 	adc.w	r0, r0, r0
   13334:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   13338:	f1a2 0201 	sub.w	r2, r2, #1
   1333c:	d1ed      	bne.n	1331a <__addsf3+0x92>
   1333e:	fab0 fc80 	clz	ip, r0
   13342:	f1ac 0c08 	sub.w	ip, ip, #8
   13346:	ebb2 020c 	subs.w	r2, r2, ip
   1334a:	fa00 f00c 	lsl.w	r0, r0, ip
   1334e:	bfaa      	itet	ge
   13350:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   13354:	4252      	neglt	r2, r2
   13356:	4318      	orrge	r0, r3
   13358:	bfbc      	itt	lt
   1335a:	40d0      	lsrlt	r0, r2
   1335c:	4318      	orrlt	r0, r3
   1335e:	4770      	bx	lr
   13360:	f092 0f00 	teq	r2, #0
   13364:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   13368:	bf06      	itte	eq
   1336a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   1336e:	3201      	addeq	r2, #1
   13370:	3b01      	subne	r3, #1
   13372:	e7b5      	b.n	132e0 <__addsf3+0x58>
   13374:	ea4f 0341 	mov.w	r3, r1, lsl #1
   13378:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   1337c:	bf18      	it	ne
   1337e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   13382:	d021      	beq.n	133c8 <__addsf3+0x140>
   13384:	ea92 0f03 	teq	r2, r3
   13388:	d004      	beq.n	13394 <__addsf3+0x10c>
   1338a:	f092 0f00 	teq	r2, #0
   1338e:	bf08      	it	eq
   13390:	4608      	moveq	r0, r1
   13392:	4770      	bx	lr
   13394:	ea90 0f01 	teq	r0, r1
   13398:	bf1c      	itt	ne
   1339a:	2000      	movne	r0, #0
   1339c:	4770      	bxne	lr
   1339e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   133a2:	d104      	bne.n	133ae <__addsf3+0x126>
   133a4:	0040      	lsls	r0, r0, #1
   133a6:	bf28      	it	cs
   133a8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   133ac:	4770      	bx	lr
   133ae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   133b2:	bf3c      	itt	cc
   133b4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   133b8:	4770      	bxcc	lr
   133ba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   133be:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   133c2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   133c6:	4770      	bx	lr
   133c8:	ea7f 6222 	mvns.w	r2, r2, asr #24
   133cc:	bf16      	itet	ne
   133ce:	4608      	movne	r0, r1
   133d0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   133d4:	4601      	movne	r1, r0
   133d6:	0242      	lsls	r2, r0, #9
   133d8:	bf06      	itte	eq
   133da:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   133de:	ea90 0f01 	teqeq	r0, r1
   133e2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   133e6:	4770      	bx	lr

000133e8 <__aeabi_ui2f>:
   133e8:	f04f 0300 	mov.w	r3, #0
   133ec:	e004      	b.n	133f8 <__aeabi_i2f+0x8>
   133ee:	bf00      	nop

000133f0 <__aeabi_i2f>:
   133f0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   133f4:	bf48      	it	mi
   133f6:	4240      	negmi	r0, r0
   133f8:	ea5f 0c00 	movs.w	ip, r0
   133fc:	bf08      	it	eq
   133fe:	4770      	bxeq	lr
   13400:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   13404:	4601      	mov	r1, r0
   13406:	f04f 0000 	mov.w	r0, #0
   1340a:	e01c      	b.n	13446 <__aeabi_l2f+0x2a>

0001340c <__aeabi_ul2f>:
   1340c:	ea50 0201 	orrs.w	r2, r0, r1
   13410:	bf08      	it	eq
   13412:	4770      	bxeq	lr
   13414:	f04f 0300 	mov.w	r3, #0
   13418:	e00a      	b.n	13430 <__aeabi_l2f+0x14>
   1341a:	bf00      	nop

0001341c <__aeabi_l2f>:
   1341c:	ea50 0201 	orrs.w	r2, r0, r1
   13420:	bf08      	it	eq
   13422:	4770      	bxeq	lr
   13424:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   13428:	d502      	bpl.n	13430 <__aeabi_l2f+0x14>
   1342a:	4240      	negs	r0, r0
   1342c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   13430:	ea5f 0c01 	movs.w	ip, r1
   13434:	bf02      	ittt	eq
   13436:	4684      	moveq	ip, r0
   13438:	4601      	moveq	r1, r0
   1343a:	2000      	moveq	r0, #0
   1343c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   13440:	bf08      	it	eq
   13442:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   13446:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   1344a:	fabc f28c 	clz	r2, ip
   1344e:	3a08      	subs	r2, #8
   13450:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   13454:	db10      	blt.n	13478 <__aeabi_l2f+0x5c>
   13456:	fa01 fc02 	lsl.w	ip, r1, r2
   1345a:	4463      	add	r3, ip
   1345c:	fa00 fc02 	lsl.w	ip, r0, r2
   13460:	f1c2 0220 	rsb	r2, r2, #32
   13464:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   13468:	fa20 f202 	lsr.w	r2, r0, r2
   1346c:	eb43 0002 	adc.w	r0, r3, r2
   13470:	bf08      	it	eq
   13472:	f020 0001 	biceq.w	r0, r0, #1
   13476:	4770      	bx	lr
   13478:	f102 0220 	add.w	r2, r2, #32
   1347c:	fa01 fc02 	lsl.w	ip, r1, r2
   13480:	f1c2 0220 	rsb	r2, r2, #32
   13484:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   13488:	fa21 f202 	lsr.w	r2, r1, r2
   1348c:	eb43 0002 	adc.w	r0, r3, r2
   13490:	bf08      	it	eq
   13492:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   13496:	4770      	bx	lr

00013498 <__aeabi_fmul>:
   13498:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1349c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   134a0:	bf1e      	ittt	ne
   134a2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   134a6:	ea92 0f0c 	teqne	r2, ip
   134aa:	ea93 0f0c 	teqne	r3, ip
   134ae:	d06f      	beq.n	13590 <__aeabi_fmul+0xf8>
   134b0:	441a      	add	r2, r3
   134b2:	ea80 0c01 	eor.w	ip, r0, r1
   134b6:	0240      	lsls	r0, r0, #9
   134b8:	bf18      	it	ne
   134ba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   134be:	d01e      	beq.n	134fe <__aeabi_fmul+0x66>
   134c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   134c4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   134c8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   134cc:	fba0 3101 	umull	r3, r1, r0, r1
   134d0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   134d4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   134d8:	bf3e      	ittt	cc
   134da:	0049      	lslcc	r1, r1, #1
   134dc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   134e0:	005b      	lslcc	r3, r3, #1
   134e2:	ea40 0001 	orr.w	r0, r0, r1
   134e6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   134ea:	2afd      	cmp	r2, #253	; 0xfd
   134ec:	d81d      	bhi.n	1352a <__aeabi_fmul+0x92>
   134ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   134f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   134f6:	bf08      	it	eq
   134f8:	f020 0001 	biceq.w	r0, r0, #1
   134fc:	4770      	bx	lr
   134fe:	f090 0f00 	teq	r0, #0
   13502:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   13506:	bf08      	it	eq
   13508:	0249      	lsleq	r1, r1, #9
   1350a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   1350e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   13512:	3a7f      	subs	r2, #127	; 0x7f
   13514:	bfc2      	ittt	gt
   13516:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   1351a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   1351e:	4770      	bxgt	lr
   13520:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   13524:	f04f 0300 	mov.w	r3, #0
   13528:	3a01      	subs	r2, #1
   1352a:	dc5d      	bgt.n	135e8 <__aeabi_fmul+0x150>
   1352c:	f112 0f19 	cmn.w	r2, #25
   13530:	bfdc      	itt	le
   13532:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   13536:	4770      	bxle	lr
   13538:	f1c2 0200 	rsb	r2, r2, #0
   1353c:	0041      	lsls	r1, r0, #1
   1353e:	fa21 f102 	lsr.w	r1, r1, r2
   13542:	f1c2 0220 	rsb	r2, r2, #32
   13546:	fa00 fc02 	lsl.w	ip, r0, r2
   1354a:	ea5f 0031 	movs.w	r0, r1, rrx
   1354e:	f140 0000 	adc.w	r0, r0, #0
   13552:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   13556:	bf08      	it	eq
   13558:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   1355c:	4770      	bx	lr
   1355e:	f092 0f00 	teq	r2, #0
   13562:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   13566:	bf02      	ittt	eq
   13568:	0040      	lsleq	r0, r0, #1
   1356a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   1356e:	3a01      	subeq	r2, #1
   13570:	d0f9      	beq.n	13566 <__aeabi_fmul+0xce>
   13572:	ea40 000c 	orr.w	r0, r0, ip
   13576:	f093 0f00 	teq	r3, #0
   1357a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1357e:	bf02      	ittt	eq
   13580:	0049      	lsleq	r1, r1, #1
   13582:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   13586:	3b01      	subeq	r3, #1
   13588:	d0f9      	beq.n	1357e <__aeabi_fmul+0xe6>
   1358a:	ea41 010c 	orr.w	r1, r1, ip
   1358e:	e78f      	b.n	134b0 <__aeabi_fmul+0x18>
   13590:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   13594:	ea92 0f0c 	teq	r2, ip
   13598:	bf18      	it	ne
   1359a:	ea93 0f0c 	teqne	r3, ip
   1359e:	d00a      	beq.n	135b6 <__aeabi_fmul+0x11e>
   135a0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   135a4:	bf18      	it	ne
   135a6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   135aa:	d1d8      	bne.n	1355e <__aeabi_fmul+0xc6>
   135ac:	ea80 0001 	eor.w	r0, r0, r1
   135b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   135b4:	4770      	bx	lr
   135b6:	f090 0f00 	teq	r0, #0
   135ba:	bf17      	itett	ne
   135bc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   135c0:	4608      	moveq	r0, r1
   135c2:	f091 0f00 	teqne	r1, #0
   135c6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   135ca:	d014      	beq.n	135f6 <__aeabi_fmul+0x15e>
   135cc:	ea92 0f0c 	teq	r2, ip
   135d0:	d101      	bne.n	135d6 <__aeabi_fmul+0x13e>
   135d2:	0242      	lsls	r2, r0, #9
   135d4:	d10f      	bne.n	135f6 <__aeabi_fmul+0x15e>
   135d6:	ea93 0f0c 	teq	r3, ip
   135da:	d103      	bne.n	135e4 <__aeabi_fmul+0x14c>
   135dc:	024b      	lsls	r3, r1, #9
   135de:	bf18      	it	ne
   135e0:	4608      	movne	r0, r1
   135e2:	d108      	bne.n	135f6 <__aeabi_fmul+0x15e>
   135e4:	ea80 0001 	eor.w	r0, r0, r1
   135e8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   135ec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   135f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   135f4:	4770      	bx	lr
   135f6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   135fa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   135fe:	4770      	bx	lr

00013600 <__aeabi_fdiv>:
   13600:	f04f 0cff 	mov.w	ip, #255	; 0xff
   13604:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   13608:	bf1e      	ittt	ne
   1360a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   1360e:	ea92 0f0c 	teqne	r2, ip
   13612:	ea93 0f0c 	teqne	r3, ip
   13616:	d069      	beq.n	136ec <__aeabi_fdiv+0xec>
   13618:	eba2 0203 	sub.w	r2, r2, r3
   1361c:	ea80 0c01 	eor.w	ip, r0, r1
   13620:	0249      	lsls	r1, r1, #9
   13622:	ea4f 2040 	mov.w	r0, r0, lsl #9
   13626:	d037      	beq.n	13698 <__aeabi_fdiv+0x98>
   13628:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1362c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   13630:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   13634:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   13638:	428b      	cmp	r3, r1
   1363a:	bf38      	it	cc
   1363c:	005b      	lslcc	r3, r3, #1
   1363e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   13642:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   13646:	428b      	cmp	r3, r1
   13648:	bf24      	itt	cs
   1364a:	1a5b      	subcs	r3, r3, r1
   1364c:	ea40 000c 	orrcs.w	r0, r0, ip
   13650:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   13654:	bf24      	itt	cs
   13656:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   1365a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   1365e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   13662:	bf24      	itt	cs
   13664:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   13668:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   1366c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   13670:	bf24      	itt	cs
   13672:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   13676:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   1367a:	011b      	lsls	r3, r3, #4
   1367c:	bf18      	it	ne
   1367e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   13682:	d1e0      	bne.n	13646 <__aeabi_fdiv+0x46>
   13684:	2afd      	cmp	r2, #253	; 0xfd
   13686:	f63f af50 	bhi.w	1352a <__aeabi_fmul+0x92>
   1368a:	428b      	cmp	r3, r1
   1368c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   13690:	bf08      	it	eq
   13692:	f020 0001 	biceq.w	r0, r0, #1
   13696:	4770      	bx	lr
   13698:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   1369c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   136a0:	327f      	adds	r2, #127	; 0x7f
   136a2:	bfc2      	ittt	gt
   136a4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   136a8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   136ac:	4770      	bxgt	lr
   136ae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   136b2:	f04f 0300 	mov.w	r3, #0
   136b6:	3a01      	subs	r2, #1
   136b8:	e737      	b.n	1352a <__aeabi_fmul+0x92>
   136ba:	f092 0f00 	teq	r2, #0
   136be:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   136c2:	bf02      	ittt	eq
   136c4:	0040      	lsleq	r0, r0, #1
   136c6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   136ca:	3a01      	subeq	r2, #1
   136cc:	d0f9      	beq.n	136c2 <__aeabi_fdiv+0xc2>
   136ce:	ea40 000c 	orr.w	r0, r0, ip
   136d2:	f093 0f00 	teq	r3, #0
   136d6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   136da:	bf02      	ittt	eq
   136dc:	0049      	lsleq	r1, r1, #1
   136de:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   136e2:	3b01      	subeq	r3, #1
   136e4:	d0f9      	beq.n	136da <__aeabi_fdiv+0xda>
   136e6:	ea41 010c 	orr.w	r1, r1, ip
   136ea:	e795      	b.n	13618 <__aeabi_fdiv+0x18>
   136ec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   136f0:	ea92 0f0c 	teq	r2, ip
   136f4:	d108      	bne.n	13708 <__aeabi_fdiv+0x108>
   136f6:	0242      	lsls	r2, r0, #9
   136f8:	f47f af7d 	bne.w	135f6 <__aeabi_fmul+0x15e>
   136fc:	ea93 0f0c 	teq	r3, ip
   13700:	f47f af70 	bne.w	135e4 <__aeabi_fmul+0x14c>
   13704:	4608      	mov	r0, r1
   13706:	e776      	b.n	135f6 <__aeabi_fmul+0x15e>
   13708:	ea93 0f0c 	teq	r3, ip
   1370c:	d104      	bne.n	13718 <__aeabi_fdiv+0x118>
   1370e:	024b      	lsls	r3, r1, #9
   13710:	f43f af4c 	beq.w	135ac <__aeabi_fmul+0x114>
   13714:	4608      	mov	r0, r1
   13716:	e76e      	b.n	135f6 <__aeabi_fmul+0x15e>
   13718:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   1371c:	bf18      	it	ne
   1371e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   13722:	d1ca      	bne.n	136ba <__aeabi_fdiv+0xba>
   13724:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   13728:	f47f af5c 	bne.w	135e4 <__aeabi_fmul+0x14c>
   1372c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   13730:	f47f af3c 	bne.w	135ac <__aeabi_fmul+0x114>
   13734:	e75f      	b.n	135f6 <__aeabi_fmul+0x15e>
   13736:	bf00      	nop

00013738 <__gesf2>:
   13738:	f04f 3cff 	mov.w	ip, #4294967295
   1373c:	e006      	b.n	1374c <__cmpsf2+0x4>
   1373e:	bf00      	nop

00013740 <__lesf2>:
   13740:	f04f 0c01 	mov.w	ip, #1
   13744:	e002      	b.n	1374c <__cmpsf2+0x4>
   13746:	bf00      	nop

00013748 <__cmpsf2>:
   13748:	f04f 0c01 	mov.w	ip, #1
   1374c:	f84d cd04 	str.w	ip, [sp, #-4]!
   13750:	ea4f 0240 	mov.w	r2, r0, lsl #1
   13754:	ea4f 0341 	mov.w	r3, r1, lsl #1
   13758:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   1375c:	bf18      	it	ne
   1375e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   13762:	d011      	beq.n	13788 <__cmpsf2+0x40>
   13764:	b001      	add	sp, #4
   13766:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   1376a:	bf18      	it	ne
   1376c:	ea90 0f01 	teqne	r0, r1
   13770:	bf58      	it	pl
   13772:	ebb2 0003 	subspl.w	r0, r2, r3
   13776:	bf88      	it	hi
   13778:	17c8      	asrhi	r0, r1, #31
   1377a:	bf38      	it	cc
   1377c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   13780:	bf18      	it	ne
   13782:	f040 0001 	orrne.w	r0, r0, #1
   13786:	4770      	bx	lr
   13788:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   1378c:	d102      	bne.n	13794 <__cmpsf2+0x4c>
   1378e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   13792:	d105      	bne.n	137a0 <__cmpsf2+0x58>
   13794:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   13798:	d1e4      	bne.n	13764 <__cmpsf2+0x1c>
   1379a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   1379e:	d0e1      	beq.n	13764 <__cmpsf2+0x1c>
   137a0:	f85d 0b04 	ldr.w	r0, [sp], #4
   137a4:	4770      	bx	lr
   137a6:	bf00      	nop

000137a8 <__aeabi_cfrcmple>:
   137a8:	4684      	mov	ip, r0
   137aa:	4608      	mov	r0, r1
   137ac:	4661      	mov	r1, ip
   137ae:	e7ff      	b.n	137b0 <__aeabi_cfcmpeq>

000137b0 <__aeabi_cfcmpeq>:
   137b0:	b50f      	push	{r0, r1, r2, r3, lr}
   137b2:	f7ff ffc9 	bl	13748 <__cmpsf2>
   137b6:	2800      	cmp	r0, #0
   137b8:	bf48      	it	mi
   137ba:	f110 0f00 	cmnmi.w	r0, #0
   137be:	bd0f      	pop	{r0, r1, r2, r3, pc}

000137c0 <__aeabi_fcmpeq>:
   137c0:	f84d ed08 	str.w	lr, [sp, #-8]!
   137c4:	f7ff fff4 	bl	137b0 <__aeabi_cfcmpeq>
   137c8:	bf0c      	ite	eq
   137ca:	2001      	moveq	r0, #1
   137cc:	2000      	movne	r0, #0
   137ce:	f85d fb08 	ldr.w	pc, [sp], #8
   137d2:	bf00      	nop

000137d4 <__aeabi_fcmplt>:
   137d4:	f84d ed08 	str.w	lr, [sp, #-8]!
   137d8:	f7ff ffea 	bl	137b0 <__aeabi_cfcmpeq>
   137dc:	bf34      	ite	cc
   137de:	2001      	movcc	r0, #1
   137e0:	2000      	movcs	r0, #0
   137e2:	f85d fb08 	ldr.w	pc, [sp], #8
   137e6:	bf00      	nop

000137e8 <__aeabi_fcmple>:
   137e8:	f84d ed08 	str.w	lr, [sp, #-8]!
   137ec:	f7ff ffe0 	bl	137b0 <__aeabi_cfcmpeq>
   137f0:	bf94      	ite	ls
   137f2:	2001      	movls	r0, #1
   137f4:	2000      	movhi	r0, #0
   137f6:	f85d fb08 	ldr.w	pc, [sp], #8
   137fa:	bf00      	nop

000137fc <__aeabi_fcmpge>:
   137fc:	f84d ed08 	str.w	lr, [sp, #-8]!
   13800:	f7ff ffd2 	bl	137a8 <__aeabi_cfrcmple>
   13804:	bf94      	ite	ls
   13806:	2001      	movls	r0, #1
   13808:	2000      	movhi	r0, #0
   1380a:	f85d fb08 	ldr.w	pc, [sp], #8
   1380e:	bf00      	nop

00013810 <__aeabi_fcmpgt>:
   13810:	f84d ed08 	str.w	lr, [sp, #-8]!
   13814:	f7ff ffc8 	bl	137a8 <__aeabi_cfrcmple>
   13818:	bf34      	ite	cc
   1381a:	2001      	movcc	r0, #1
   1381c:	2000      	movcs	r0, #0
   1381e:	f85d fb08 	ldr.w	pc, [sp], #8
   13822:	bf00      	nop

00013824 <__aeabi_f2iz>:
   13824:	ea4f 0240 	mov.w	r2, r0, lsl #1
   13828:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   1382c:	d30f      	bcc.n	1384e <__aeabi_f2iz+0x2a>
   1382e:	f04f 039e 	mov.w	r3, #158	; 0x9e
   13832:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   13836:	d90d      	bls.n	13854 <__aeabi_f2iz+0x30>
   13838:	ea4f 2300 	mov.w	r3, r0, lsl #8
   1383c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   13840:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   13844:	fa23 f002 	lsr.w	r0, r3, r2
   13848:	bf18      	it	ne
   1384a:	4240      	negne	r0, r0
   1384c:	4770      	bx	lr
   1384e:	f04f 0000 	mov.w	r0, #0
   13852:	4770      	bx	lr
   13854:	f112 0f61 	cmn.w	r2, #97	; 0x61
   13858:	d101      	bne.n	1385e <__aeabi_f2iz+0x3a>
   1385a:	0242      	lsls	r2, r0, #9
   1385c:	d105      	bne.n	1386a <__aeabi_f2iz+0x46>
   1385e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   13862:	bf08      	it	eq
   13864:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   13868:	4770      	bx	lr
   1386a:	f04f 0000 	mov.w	r0, #0
   1386e:	4770      	bx	lr

00013870 <memcpy>:
   13870:	2a0f      	cmp	r2, #15
   13872:	b4f0      	push	{r4, r5, r6, r7}
   13874:	d945      	bls.n	13902 <memcpy+0x92>
   13876:	ea40 0301 	orr.w	r3, r0, r1
   1387a:	079b      	lsls	r3, r3, #30
   1387c:	d145      	bne.n	1390a <memcpy+0x9a>
   1387e:	f1a2 0710 	sub.w	r7, r2, #16
   13882:	460c      	mov	r4, r1
   13884:	4603      	mov	r3, r0
   13886:	093f      	lsrs	r7, r7, #4
   13888:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   1388c:	3610      	adds	r6, #16
   1388e:	6825      	ldr	r5, [r4, #0]
   13890:	3310      	adds	r3, #16
   13892:	3410      	adds	r4, #16
   13894:	f843 5c10 	str.w	r5, [r3, #-16]
   13898:	f854 5c0c 	ldr.w	r5, [r4, #-12]
   1389c:	f843 5c0c 	str.w	r5, [r3, #-12]
   138a0:	f854 5c08 	ldr.w	r5, [r4, #-8]
   138a4:	f843 5c08 	str.w	r5, [r3, #-8]
   138a8:	f854 5c04 	ldr.w	r5, [r4, #-4]
   138ac:	f843 5c04 	str.w	r5, [r3, #-4]
   138b0:	42b3      	cmp	r3, r6
   138b2:	d1ec      	bne.n	1388e <memcpy+0x1e>
   138b4:	1c7b      	adds	r3, r7, #1
   138b6:	f002 0c0f 	and.w	ip, r2, #15
   138ba:	f1bc 0f03 	cmp.w	ip, #3
   138be:	ea4f 1303 	mov.w	r3, r3, lsl #4
   138c2:	4419      	add	r1, r3
   138c4:	4403      	add	r3, r0
   138c6:	d922      	bls.n	1390e <memcpy+0x9e>
   138c8:	460e      	mov	r6, r1
   138ca:	461d      	mov	r5, r3
   138cc:	4664      	mov	r4, ip
   138ce:	f856 7b04 	ldr.w	r7, [r6], #4
   138d2:	3c04      	subs	r4, #4
   138d4:	2c03      	cmp	r4, #3
   138d6:	f845 7b04 	str.w	r7, [r5], #4
   138da:	d8f8      	bhi.n	138ce <memcpy+0x5e>
   138dc:	f1ac 0404 	sub.w	r4, ip, #4
   138e0:	f002 0203 	and.w	r2, r2, #3
   138e4:	f024 0403 	bic.w	r4, r4, #3
   138e8:	3404      	adds	r4, #4
   138ea:	4423      	add	r3, r4
   138ec:	4421      	add	r1, r4
   138ee:	b132      	cbz	r2, 138fe <memcpy+0x8e>
   138f0:	440a      	add	r2, r1
   138f2:	f811 4b01 	ldrb.w	r4, [r1], #1
   138f6:	4291      	cmp	r1, r2
   138f8:	f803 4b01 	strb.w	r4, [r3], #1
   138fc:	d1f9      	bne.n	138f2 <memcpy+0x82>
   138fe:	bcf0      	pop	{r4, r5, r6, r7}
   13900:	4770      	bx	lr
   13902:	4603      	mov	r3, r0
   13904:	2a00      	cmp	r2, #0
   13906:	d1f3      	bne.n	138f0 <memcpy+0x80>
   13908:	e7f9      	b.n	138fe <memcpy+0x8e>
   1390a:	4603      	mov	r3, r0
   1390c:	e7f0      	b.n	138f0 <memcpy+0x80>
   1390e:	4662      	mov	r2, ip
   13910:	2a00      	cmp	r2, #0
   13912:	d1ed      	bne.n	138f0 <memcpy+0x80>
   13914:	e7f3      	b.n	138fe <memcpy+0x8e>
   13916:	bf00      	nop

00013918 <memset>:
   13918:	0783      	lsls	r3, r0, #30
   1391a:	b4f0      	push	{r4, r5, r6, r7}
   1391c:	d048      	beq.n	139b0 <memset+0x98>
   1391e:	1e54      	subs	r4, r2, #1
   13920:	2a00      	cmp	r2, #0
   13922:	d043      	beq.n	139ac <memset+0x94>
   13924:	b2cd      	uxtb	r5, r1
   13926:	4603      	mov	r3, r0
   13928:	e002      	b.n	13930 <memset+0x18>
   1392a:	2c00      	cmp	r4, #0
   1392c:	d03e      	beq.n	139ac <memset+0x94>
   1392e:	4614      	mov	r4, r2
   13930:	f803 5b01 	strb.w	r5, [r3], #1
   13934:	f013 0f03 	tst.w	r3, #3
   13938:	f104 32ff 	add.w	r2, r4, #4294967295
   1393c:	d1f5      	bne.n	1392a <memset+0x12>
   1393e:	2c03      	cmp	r4, #3
   13940:	d92d      	bls.n	1399e <memset+0x86>
   13942:	b2cd      	uxtb	r5, r1
   13944:	2c0f      	cmp	r4, #15
   13946:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   1394a:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   1394e:	d918      	bls.n	13982 <memset+0x6a>
   13950:	f1a4 0710 	sub.w	r7, r4, #16
   13954:	f103 0610 	add.w	r6, r3, #16
   13958:	461a      	mov	r2, r3
   1395a:	093f      	lsrs	r7, r7, #4
   1395c:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   13960:	6015      	str	r5, [r2, #0]
   13962:	3210      	adds	r2, #16
   13964:	f842 5c0c 	str.w	r5, [r2, #-12]
   13968:	f842 5c08 	str.w	r5, [r2, #-8]
   1396c:	f842 5c04 	str.w	r5, [r2, #-4]
   13970:	42b2      	cmp	r2, r6
   13972:	d1f5      	bne.n	13960 <memset+0x48>
   13974:	f004 040f 	and.w	r4, r4, #15
   13978:	3701      	adds	r7, #1
   1397a:	2c03      	cmp	r4, #3
   1397c:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   13980:	d90d      	bls.n	1399e <memset+0x86>
   13982:	461e      	mov	r6, r3
   13984:	4622      	mov	r2, r4
   13986:	3a04      	subs	r2, #4
   13988:	f846 5b04 	str.w	r5, [r6], #4
   1398c:	2a03      	cmp	r2, #3
   1398e:	d8fa      	bhi.n	13986 <memset+0x6e>
   13990:	1f22      	subs	r2, r4, #4
   13992:	f004 0403 	and.w	r4, r4, #3
   13996:	f022 0203 	bic.w	r2, r2, #3
   1399a:	3204      	adds	r2, #4
   1399c:	4413      	add	r3, r2
   1399e:	b12c      	cbz	r4, 139ac <memset+0x94>
   139a0:	b2c9      	uxtb	r1, r1
   139a2:	441c      	add	r4, r3
   139a4:	f803 1b01 	strb.w	r1, [r3], #1
   139a8:	42a3      	cmp	r3, r4
   139aa:	d1fb      	bne.n	139a4 <memset+0x8c>
   139ac:	bcf0      	pop	{r4, r5, r6, r7}
   139ae:	4770      	bx	lr
   139b0:	4614      	mov	r4, r2
   139b2:	4603      	mov	r3, r0
   139b4:	e7c3      	b.n	1393e <memset+0x26>
   139b6:	bf00      	nop

000139b8 <strncpy>:
   139b8:	ea40 0301 	orr.w	r3, r0, r1
   139bc:	079b      	lsls	r3, r3, #30
   139be:	b470      	push	{r4, r5, r6}
   139c0:	d12b      	bne.n	13a1a <strncpy+0x62>
   139c2:	2a03      	cmp	r2, #3
   139c4:	bf84      	itt	hi
   139c6:	460b      	movhi	r3, r1
   139c8:	4605      	movhi	r5, r0
   139ca:	d926      	bls.n	13a1a <strncpy+0x62>
   139cc:	4619      	mov	r1, r3
   139ce:	f853 4b04 	ldr.w	r4, [r3], #4
   139d2:	f1a4 3601 	sub.w	r6, r4, #16843009	; 0x1010101
   139d6:	ea26 0604 	bic.w	r6, r6, r4
   139da:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
   139de:	d105      	bne.n	139ec <strncpy+0x34>
   139e0:	3a04      	subs	r2, #4
   139e2:	f845 4b04 	str.w	r4, [r5], #4
   139e6:	2a03      	cmp	r2, #3
   139e8:	4619      	mov	r1, r3
   139ea:	d8ef      	bhi.n	139cc <strncpy+0x14>
   139ec:	b19a      	cbz	r2, 13a16 <strncpy+0x5e>
   139ee:	780c      	ldrb	r4, [r1, #0]
   139f0:	3a01      	subs	r2, #1
   139f2:	1c6b      	adds	r3, r5, #1
   139f4:	702c      	strb	r4, [r5, #0]
   139f6:	b13c      	cbz	r4, 13a08 <strncpy+0x50>
   139f8:	b16a      	cbz	r2, 13a16 <strncpy+0x5e>
   139fa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   139fe:	3a01      	subs	r2, #1
   13a00:	f803 4b01 	strb.w	r4, [r3], #1
   13a04:	2c00      	cmp	r4, #0
   13a06:	d1f7      	bne.n	139f8 <strncpy+0x40>
   13a08:	b12a      	cbz	r2, 13a16 <strncpy+0x5e>
   13a0a:	441a      	add	r2, r3
   13a0c:	2100      	movs	r1, #0
   13a0e:	f803 1b01 	strb.w	r1, [r3], #1
   13a12:	4293      	cmp	r3, r2
   13a14:	d1fb      	bne.n	13a0e <strncpy+0x56>
   13a16:	bc70      	pop	{r4, r5, r6}
   13a18:	4770      	bx	lr
   13a1a:	4605      	mov	r5, r0
   13a1c:	e7e6      	b.n	139ec <strncpy+0x34>
   13a1e:	bf00      	nop

00013a20 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:	

/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
   13a20:	2100      	movs	r1, #0
  b	LoopCopyDataInit
   13a22:	e003      	b.n	13a2c <LoopCopyDataInit>

00013a24 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
   13a24:	4b0a      	ldr	r3, [pc, #40]	; (13a50 <LoopFillZerobss+0x10>)
	ldr	r3, [r3, r1]
   13a26:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
   13a28:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
   13a2a:	3104      	adds	r1, #4

00013a2c <LoopCopyDataInit>:
    
LoopCopyDataInit:
	ldr	r0, =_sdata
   13a2c:	4809      	ldr	r0, [pc, #36]	; (13a54 <LoopFillZerobss+0x14>)
	ldr	r3, =_edata
   13a2e:	4b0a      	ldr	r3, [pc, #40]	; (13a58 <LoopFillZerobss+0x18>)
	adds	r2, r0, r1
   13a30:	1842      	adds	r2, r0, r1
	cmp	r2, r3
   13a32:	429a      	cmp	r2, r3
	bcc	CopyDataInit
   13a34:	d3f6      	bcc.n	13a24 <CopyDataInit>
	ldr	r2, =_sbss
   13a36:	4a09      	ldr	r2, [pc, #36]	; (13a5c <LoopFillZerobss+0x1c>)
	b	LoopFillZerobss
   13a38:	e002      	b.n	13a40 <LoopFillZerobss>

00013a3a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
	movs	r3, #0
   13a3a:	2300      	movs	r3, #0
	str	r3, [r2], #4
   13a3c:	f842 3b04 	str.w	r3, [r2], #4

00013a40 <LoopFillZerobss>:
    
LoopFillZerobss:
	ldr	r3, = _ebss
   13a40:	4b07      	ldr	r3, [pc, #28]	; (13a60 <LoopFillZerobss+0x20>)
	cmp	r2, r3
   13a42:	429a      	cmp	r2, r3
	bcc	FillZerobss
   13a44:	d3f9      	bcc.n	13a3a <FillZerobss>
/* Call the clock system intitialization function.*/
  bl  SystemInit 	
   13a46:	f7ec fc79 	bl	33c <SystemInit>
/* Call the application's entry point.*/
	bl	main
   13a4a:	f7fe feb9 	bl	127c0 <main>
	bx	lr    
   13a4e:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
   13a50:	00013b94 	.word	0x00013b94
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4
    
LoopCopyDataInit:
	ldr	r0, =_sdata
   13a54:	20000000 	.word	0x20000000
	ldr	r3, =_edata
   13a58:	200001d4 	.word	0x200001d4
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
   13a5c:	200001d8 	.word	0x200001d8
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4
    
LoopFillZerobss:
	ldr	r3, = _ebss
   13a60:	2004c014 	.word	0x2004c014

00013a64 <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
   13a64:	e7fe      	b.n	13a64 <ADC1_2_IRQHandler>
   13a66:	0000      	movs	r0, r0
   13a68:	00000031 	.word	0x00000031
   13a6c:	00000032 	.word	0x00000032
   13a70:	00000033 	.word	0x00000033
   13a74:	00000034 	.word	0x00000034
   13a78:	00000035 	.word	0x00000035
   13a7c:	00000036 	.word	0x00000036
   13a80:	00000037 	.word	0x00000037
   13a84:	00000038 	.word	0x00000038
   13a88:	00000039 	.word	0x00000039
   13a8c:	00003031 	.word	0x00003031
   13a90:	00003131 	.word	0x00003131
   13a94:	00003231 	.word	0x00003231
   13a98:	00003331 	.word	0x00003331
   13a9c:	454c4449 	.word	0x454c4449
   13aa0:	00000000 	.word	0x00000000
   13aa4:	65687420 	.word	0x65687420
   13aa8:	6e654c20 	.word	0x6e654c20
   13aac:	20687467 	.word	0x20687467
   13ab0:	7220666f 	.word	0x7220666f
   13ab4:	79646165 	.word	0x79646165
   13ab8:	73696c20 	.word	0x73696c20
   13abc:	73692074 	.word	0x73692074
   13ac0:	0000203a 	.word	0x0000203a
   13ac4:	72756320 	.word	0x72756320
   13ac8:	746e6572 	.word	0x746e6572
   13acc:	73617420 	.word	0x73617420
   13ad0:	7369206b 	.word	0x7369206b
   13ad4:	6c646920 	.word	0x6c646920
   13ad8:	0d0a2065 	.word	0x0d0a2065
   13adc:	00000000 	.word	0x00000000

00013ae0 <ulKernelPriority>:
   13ae0:	0000007f                                ....

00013ae4 <heapSTRUCT_SIZE>:
   13ae4:	00010010                                         ..

00013ae6 <version>:
   13ae6:	3d5a0001                                         ..

00013ae8 <utm_east0>:
   13ae8:	00093d5a                                Z=..

00013aec <utm_north0>:
   13aec:	005875e6                                .uX.

00013af0 <climb_pgain>:
   13af0:	bcf5c28f                                ....

00013af4 <climb_igain>:
   13af4:	3dcccccd                                ...=

00013af8 <level_gaz>:
   13af8:	3e9eb852                                R..>

00013afc <nav_east0>:
   13afc:	00093d5a                                Z=..

00013b00 <nav_north0>:
   13b00:	005875e6                                .uX.

00013b04 <nb_waypoint>:
   13b04:	00000007 33323130 37363534 42413938     ....0123456789AB
   13b14:	46454443                                CDEF

00013b18 <failsafe>:
	...
   13b2c:	20574246 746f6f42 20676e69 3a644924     FBW Booting $Id:
   13b3c:	69616d20 2c632e6e 2e312076 30322033      main.c,v 1.3 20
   13b4c:	312f3830 32322f30 3a393120 313a3134     08/10/22 19:41:1
   13b5c:	61632039 20657373 20707845 000d0a24     9 casse Exp $...
   13b6c:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   13b7c:	000d0a30 00000d0a 7373696d 61656420     0.......miss dea
   13b8c:	6e696c64 000d0a65                       dline...
