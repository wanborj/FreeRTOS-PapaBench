
main.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:
       0:	00 50 05 20 99 38 01 00 dd 38 01 00 dd 38 01 00     .P. .8...8...8..
      10:	dd 38 01 00 dd 38 01 00 dd 38 01 00 00 00 00 00     .8...8...8......
	...
      2c:	a9 45 00 00 dd 38 01 00 00 00 00 00 b5 46 00 00     .E...8.......F..
      3c:	f1 46 00 00 dd 38 01 00 dd 38 01 00 dd 38 01 00     .F...8...8...8..
      4c:	dd 38 01 00 dd 38 01 00 dd 38 01 00 dd 38 01 00     .8...8...8...8..
      5c:	dd 38 01 00 dd 38 01 00 dd 38 01 00 dd 38 01 00     .8...8...8...8..
      6c:	dd 38 01 00 dd 38 01 00 dd 38 01 00 dd 38 01 00     .8...8...8...8..
      7c:	dd 38 01 00 dd 38 01 00 dd 38 01 00 dd 38 01 00     .8...8...8...8..
      8c:	dd 38 01 00 dd 38 01 00 dd 38 01 00 dd 38 01 00     .8...8...8...8..
      9c:	dd 38 01 00 dd 38 01 00 dd 38 01 00 dd 38 01 00     .8...8...8...8..
      ac:	dd 38 01 00 dd 38 01 00 dd 38 01 00 dd 38 01 00     .8...8...8...8..
      bc:	dd 38 01 00 dd 38 01 00 dd 38 01 00 dd 38 01 00     .8...8...8...8..
      cc:	dd 38 01 00 dd 38 01 00 dd 38 01 00 dd 38 01 00     .8...8...8...8..
      dc:	dd 38 01 00 dd 38 01 00 dd 38 01 00 dd 38 01 00     .8...8...8...8..
	...
     108:	5f f8 08 f1                                         _...

0000010c <__get_PSP>:
 * Return the actual process stack pointer
 */
uint32_t __get_PSP(void) __attribute__( ( naked ) );
uint32_t __get_PSP(void)
{
  uint32_t result=0;
     10c:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, psp\n\t"
     10e:	f3ef 8309 	mrs	r3, PSP
     112:	4618      	mov	r0, r3
     114:	4770      	bx	lr
     116:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     118:	4623      	mov	r3, r4
}
     11a:	4618      	mov	r0, r3

0000011c <__set_PSP>:
 * Assign the value ProcessStackPointer to the MSP
 * (process stack pointer) Cortex processor register
 */
void __set_PSP(uint32_t topOfProcStack) __attribute__( ( naked ) );
void __set_PSP(uint32_t topOfProcStack)
{
     11c:	4603      	mov	r3, r0
  __ASM volatile ("MSR psp, %0\n\t"
     11e:	f383 8809 	msr	PSP, r3
     122:	4770      	bx	lr

00000124 <__get_MSP>:
 * Cortex processor register
 */
uint32_t __get_MSP(void) __attribute__( ( naked ) );
uint32_t __get_MSP(void)
{
  uint32_t result=0;
     124:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, msp\n\t"
     126:	f3ef 8308 	mrs	r3, MSP
     12a:	4618      	mov	r0, r3
     12c:	4770      	bx	lr
     12e:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     130:	4623      	mov	r3, r4
}
     132:	4618      	mov	r0, r3

00000134 <__set_MSP>:
 * Assign the value mainStackPointer to the MSP
 * (main stack pointer) Cortex processor register
 */
void __set_MSP(uint32_t topOfMainStack) __attribute__( ( naked ) );
void __set_MSP(uint32_t topOfMainStack)
{
     134:	4603      	mov	r3, r0
  __ASM volatile ("MSR msp, %0\n\t"
     136:	f383 8808 	msr	MSP, r3
     13a:	4770      	bx	lr

0000013c <__get_BASEPRI>:
 * @return BasePriority
 *
 * Return the content of the base priority register
 */
uint32_t __get_BASEPRI(void)
{
     13c:	b480      	push	{r7}
     13e:	b083      	sub	sp, #12
     140:	af00      	add	r7, sp, #0
  uint32_t result=0;
     142:	2300      	movs	r3, #0
     144:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
     146:	f3ef 8312 	mrs	r3, BASEPRI_MAX
     14a:	607b      	str	r3, [r7, #4]
  return(result);
     14c:	687b      	ldr	r3, [r7, #4]
}
     14e:	4618      	mov	r0, r3
     150:	370c      	adds	r7, #12
     152:	46bd      	mov	sp, r7
     154:	f85d 7b04 	ldr.w	r7, [sp], #4
     158:	4770      	bx	lr
     15a:	bf00      	nop

0000015c <__set_BASEPRI>:
 * @param  basePri  BasePriority
 *
 * Set the base priority register
 */
void __set_BASEPRI(uint32_t value)
{
     15c:	b480      	push	{r7}
     15e:	b083      	sub	sp, #12
     160:	af00      	add	r7, sp, #0
     162:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) );
     164:	687b      	ldr	r3, [r7, #4]
     166:	f383 8811 	msr	BASEPRI, r3
}
     16a:	370c      	adds	r7, #12
     16c:	46bd      	mov	sp, r7
     16e:	f85d 7b04 	ldr.w	r7, [sp], #4
     172:	4770      	bx	lr

00000174 <__get_PRIMASK>:
 * @return PriMask
 *
 * Return state of the priority mask bit from the priority mask register
 */
uint32_t __get_PRIMASK(void)
{
     174:	b480      	push	{r7}
     176:	b083      	sub	sp, #12
     178:	af00      	add	r7, sp, #0
  uint32_t result=0;
     17a:	2300      	movs	r3, #0
     17c:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     17e:	f3ef 8310 	mrs	r3, PRIMASK
     182:	607b      	str	r3, [r7, #4]
  return(result);
     184:	687b      	ldr	r3, [r7, #4]
}
     186:	4618      	mov	r0, r3
     188:	370c      	adds	r7, #12
     18a:	46bd      	mov	sp, r7
     18c:	f85d 7b04 	ldr.w	r7, [sp], #4
     190:	4770      	bx	lr
     192:	bf00      	nop

00000194 <__set_PRIMASK>:
 * @param  priMask  PriMask
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
     194:	b480      	push	{r7}
     196:	b083      	sub	sp, #12
     198:	af00      	add	r7, sp, #0
     19a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	f383 8810 	msr	PRIMASK, r3
}
     1a2:	370c      	adds	r7, #12
     1a4:	46bd      	mov	sp, r7
     1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
     1aa:	4770      	bx	lr

000001ac <__get_FAULTMASK>:
 * @return FaultMask
 *
 * Return the content of the fault mask register
 */
uint32_t __get_FAULTMASK(void)
{
     1ac:	b480      	push	{r7}
     1ae:	b083      	sub	sp, #12
     1b0:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1b2:	2300      	movs	r3, #0
     1b4:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
     1b6:	f3ef 8313 	mrs	r3, FAULTMASK
     1ba:	607b      	str	r3, [r7, #4]
  return(result);
     1bc:	687b      	ldr	r3, [r7, #4]
}
     1be:	4618      	mov	r0, r3
     1c0:	370c      	adds	r7, #12
     1c2:	46bd      	mov	sp, r7
     1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     1c8:	4770      	bx	lr
     1ca:	bf00      	nop

000001cc <__set_FAULTMASK>:
 * @param  faultMask  faultMask value
 *
 * Set the fault mask register
 */
void __set_FAULTMASK(uint32_t faultMask)
{
     1cc:	b480      	push	{r7}
     1ce:	b083      	sub	sp, #12
     1d0:	af00      	add	r7, sp, #0
     1d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) );
     1d4:	687b      	ldr	r3, [r7, #4]
     1d6:	f383 8813 	msr	FAULTMASK, r3
}
     1da:	370c      	adds	r7, #12
     1dc:	46bd      	mov	sp, r7
     1de:	f85d 7b04 	ldr.w	r7, [sp], #4
     1e2:	4770      	bx	lr

000001e4 <__get_CONTROL>:
*  @return Control value
 *
 * Return the content of the control register
 */
uint32_t __get_CONTROL(void)
{
     1e4:	b480      	push	{r7}
     1e6:	b083      	sub	sp, #12
     1e8:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1ea:	2300      	movs	r3, #0
     1ec:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, control" : "=r" (result) );
     1ee:	f3ef 8314 	mrs	r3, CONTROL
     1f2:	607b      	str	r3, [r7, #4]
  return(result);
     1f4:	687b      	ldr	r3, [r7, #4]
}
     1f6:	4618      	mov	r0, r3
     1f8:	370c      	adds	r7, #12
     1fa:	46bd      	mov	sp, r7
     1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     200:	4770      	bx	lr
     202:	bf00      	nop

00000204 <__set_CONTROL>:
 * @param  control  Control value
 *
 * Set the control register
 */
void __set_CONTROL(uint32_t control)
{
     204:	b480      	push	{r7}
     206:	b083      	sub	sp, #12
     208:	af00      	add	r7, sp, #0
     20a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR control, %0" : : "r" (control) );
     20c:	687b      	ldr	r3, [r7, #4]
     20e:	f383 8814 	msr	CONTROL, r3
}
     212:	370c      	adds	r7, #12
     214:	46bd      	mov	sp, r7
     216:	f85d 7b04 	ldr.w	r7, [sp], #4
     21a:	4770      	bx	lr

0000021c <__REV>:
 * @return        reversed value
 *
 * Reverse byte order in integer value
 */
uint32_t __REV(uint32_t value)
{
     21c:	b480      	push	{r7}
     21e:	b085      	sub	sp, #20
     220:	af00      	add	r7, sp, #0
     222:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     224:	2300      	movs	r3, #0
     226:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
     228:	687b      	ldr	r3, [r7, #4]
     22a:	ba1b      	rev	r3, r3
     22c:	60fb      	str	r3, [r7, #12]
  return(result);
     22e:	68fb      	ldr	r3, [r7, #12]
}
     230:	4618      	mov	r0, r3
     232:	3714      	adds	r7, #20
     234:	46bd      	mov	sp, r7
     236:	f85d 7b04 	ldr.w	r7, [sp], #4
     23a:	4770      	bx	lr

0000023c <__REV16>:
 * @return        reversed value
 *
 * Reverse byte order in unsigned short value
 */
uint32_t __REV16(uint16_t value)
{
     23c:	b480      	push	{r7}
     23e:	b085      	sub	sp, #20
     240:	af00      	add	r7, sp, #0
     242:	4603      	mov	r3, r0
     244:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     246:	2300      	movs	r3, #0
     248:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
     24a:	88fb      	ldrh	r3, [r7, #6]
     24c:	ba5b      	rev16	r3, r3
     24e:	60fb      	str	r3, [r7, #12]
  return(result);
     250:	68fb      	ldr	r3, [r7, #12]
}
     252:	4618      	mov	r0, r3
     254:	3714      	adds	r7, #20
     256:	46bd      	mov	sp, r7
     258:	f85d 7b04 	ldr.w	r7, [sp], #4
     25c:	4770      	bx	lr
     25e:	bf00      	nop

00000260 <__REVSH>:
 * @return        reversed value
 *
 * Reverse byte order in signed short value with sign extension to integer
 */
int32_t __REVSH(int16_t value)
{
     260:	b480      	push	{r7}
     262:	b085      	sub	sp, #20
     264:	af00      	add	r7, sp, #0
     266:	4603      	mov	r3, r0
     268:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     26a:	2300      	movs	r3, #0
     26c:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
     26e:	88fb      	ldrh	r3, [r7, #6]
     270:	badb      	revsh	r3, r3
     272:	60fb      	str	r3, [r7, #12]
  return(result);
     274:	68fb      	ldr	r3, [r7, #12]
}
     276:	4618      	mov	r0, r3
     278:	3714      	adds	r7, #20
     27a:	46bd      	mov	sp, r7
     27c:	f85d 7b04 	ldr.w	r7, [sp], #4
     280:	4770      	bx	lr
     282:	bf00      	nop

00000284 <__RBIT>:
 * @return        reversed value
 *
 * Reverse bit order of value
 */
uint32_t __RBIT(uint32_t value)
{
     284:	b480      	push	{r7}
     286:	b085      	sub	sp, #20
     288:	af00      	add	r7, sp, #0
     28a:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     28c:	2300      	movs	r3, #0
     28e:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
     290:	687b      	ldr	r3, [r7, #4]
     292:	fa93 f3a3 	rbit	r3, r3
     296:	60fb      	str	r3, [r7, #12]
   return(result);
     298:	68fb      	ldr	r3, [r7, #12]
}
     29a:	4618      	mov	r0, r3
     29c:	3714      	adds	r7, #20
     29e:	46bd      	mov	sp, r7
     2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
     2a4:	4770      	bx	lr
     2a6:	bf00      	nop

000002a8 <__LDREXB>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 8 bit value
 */
uint8_t __LDREXB(uint8_t *addr)
{
     2a8:	b480      	push	{r7}
     2aa:	b085      	sub	sp, #20
     2ac:	af00      	add	r7, sp, #0
     2ae:	6078      	str	r0, [r7, #4]
    uint8_t result=0;
     2b0:	2300      	movs	r3, #0
     2b2:	73fb      	strb	r3, [r7, #15]

   __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) );
     2b4:	687b      	ldr	r3, [r7, #4]
     2b6:	e8d3 3f4f 	ldrexb	r3, [r3]
     2ba:	73fb      	strb	r3, [r7, #15]
   return(result);
     2bc:	7bfb      	ldrb	r3, [r7, #15]
}
     2be:	4618      	mov	r0, r3
     2c0:	3714      	adds	r7, #20
     2c2:	46bd      	mov	sp, r7
     2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     2c8:	4770      	bx	lr
     2ca:	bf00      	nop

000002cc <__LDREXH>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 16 bit values
 */
uint16_t __LDREXH(uint16_t *addr)
{
     2cc:	b480      	push	{r7}
     2ce:	b085      	sub	sp, #20
     2d0:	af00      	add	r7, sp, #0
     2d2:	6078      	str	r0, [r7, #4]
    uint16_t result=0;
     2d4:	2300      	movs	r3, #0
     2d6:	81fb      	strh	r3, [r7, #14]

   __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) );
     2d8:	687b      	ldr	r3, [r7, #4]
     2da:	e8d3 3f5f 	ldrexh	r3, [r3]
     2de:	81fb      	strh	r3, [r7, #14]
   return(result);
     2e0:	89fb      	ldrh	r3, [r7, #14]
}
     2e2:	4618      	mov	r0, r3
     2e4:	3714      	adds	r7, #20
     2e6:	46bd      	mov	sp, r7
     2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
     2ec:	4770      	bx	lr
     2ee:	bf00      	nop

000002f0 <__LDREXW>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 32 bit values
 */
uint32_t __LDREXW(uint32_t *addr)
{
     2f0:	b480      	push	{r7}
     2f2:	b085      	sub	sp, #20
     2f4:	af00      	add	r7, sp, #0
     2f6:	6078      	str	r0, [r7, #4]
    uint32_t result=0;
     2f8:	2300      	movs	r3, #0
     2fa:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     2fc:	687b      	ldr	r3, [r7, #4]
     2fe:	e853 3f00 	ldrex	r3, [r3]
     302:	60fb      	str	r3, [r7, #12]
   return(result);
     304:	68fb      	ldr	r3, [r7, #12]
}
     306:	4618      	mov	r0, r3
     308:	3714      	adds	r7, #20
     30a:	46bd      	mov	sp, r7
     30c:	f85d 7b04 	ldr.w	r7, [sp], #4
     310:	4770      	bx	lr
     312:	bf00      	nop

00000314 <__STREXW>:
 * @return        successful / failed
 *
 * Exclusive STR command for 32 bit values
 */
uint32_t __STREXW(uint32_t value, uint32_t *addr)
{
     314:	b480      	push	{r7}
     316:	b085      	sub	sp, #20
     318:	af00      	add	r7, sp, #0
     31a:	6078      	str	r0, [r7, #4]
     31c:	6039      	str	r1, [r7, #0]
   uint32_t result=0;
     31e:	2300      	movs	r3, #0
     320:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
     322:	683b      	ldr	r3, [r7, #0]
     324:	687a      	ldr	r2, [r7, #4]
     326:	e843 2300 	strex	r3, r2, [r3]
     32a:	60fb      	str	r3, [r7, #12]
   return(result);
     32c:	68fb      	ldr	r3, [r7, #12]
}
     32e:	4618      	mov	r0, r3
     330:	3714      	adds	r7, #20
     332:	46bd      	mov	sp, r7
     334:	f85d 7b04 	ldr.w	r7, [sp], #4
     338:	4770      	bx	lr
     33a:	bf00      	nop

0000033c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
     33c:	b580      	push	{r7, lr}
     33e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     344:	f2c4 0302 	movt	r3, #16386	; 0x4002
     348:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     34c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     350:	6812      	ldr	r2, [r2, #0]
     352:	f042 0201 	orr.w	r2, r2, #1
     356:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     358:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     35c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     360:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     364:	f2c4 0302 	movt	r3, #16386	; 0x4002
     368:	6859      	ldr	r1, [r3, #4]
     36a:	2300      	movs	r3, #0
     36c:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     370:	400b      	ands	r3, r1
     372:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     378:	f2c4 0302 	movt	r3, #16386	; 0x4002
     37c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     380:	f2c4 0202 	movt	r2, #16386	; 0x4002
     384:	6812      	ldr	r2, [r2, #0]
     386:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     38a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     38e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     394:	f2c4 0302 	movt	r3, #16386	; 0x4002
     398:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     39c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3a0:	6812      	ldr	r2, [r2, #0]
     3a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     3a6:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     3a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     3b4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3b8:	6852      	ldr	r2, [r2, #4]
     3ba:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     3be:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     3c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3c8:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     3cc:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
     3ce:	f000 f8a7 	bl	520 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
     3d2:	f44f 436d 	mov.w	r3, #60672	; 0xed00
     3d6:	f2ce 0300 	movt	r3, #57344	; 0xe000
     3da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
     3de:	609a      	str	r2, [r3, #8]
#endif
}
     3e0:	bd80      	pop	{r7, pc}
     3e2:	bf00      	nop

000003e4 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
     3e4:	b480      	push	{r7}
     3e6:	b085      	sub	sp, #20
     3e8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
     3ea:	2300      	movs	r3, #0
     3ec:	60fb      	str	r3, [r7, #12]
     3ee:	2300      	movs	r3, #0
     3f0:	60bb      	str	r3, [r7, #8]
     3f2:	2300      	movs	r3, #0
     3f4:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
     3f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3fe:	685b      	ldr	r3, [r3, #4]
     400:	f003 030c 	and.w	r3, r3, #12
     404:	60fb      	str	r3, [r7, #12]

  switch (tmp)
     406:	68fb      	ldr	r3, [r7, #12]
     408:	2b04      	cmp	r3, #4
     40a:	d00d      	beq.n	428 <SystemCoreClockUpdate+0x44>
     40c:	2b08      	cmp	r3, #8
     40e:	d015      	beq.n	43c <SystemCoreClockUpdate+0x58>
     410:	2b00      	cmp	r3, #0
     412:	d15b      	bne.n	4cc <SystemCoreClockUpdate+0xe8>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
     414:	f240 0300 	movw	r3, #0
     418:	f2c2 0300 	movt	r3, #8192	; 0x2000
     41c:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     420:	f2c0 027a 	movt	r2, #122	; 0x7a
     424:	601a      	str	r2, [r3, #0]
      break;
     426:	e05b      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
     428:	f240 0300 	movw	r3, #0
     42c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     430:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     434:	f2c0 027a 	movt	r2, #122	; 0x7a
     438:	601a      	str	r2, [r3, #0]
      break;
     43a:	e051      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
     43c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     440:	f2c4 0302 	movt	r3, #16386	; 0x4002
     444:	685b      	ldr	r3, [r3, #4]
     446:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     44a:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
     44c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     450:	f2c4 0302 	movt	r3, #16386	; 0x4002
     454:	685b      	ldr	r3, [r3, #4]
     456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     45a:	607b      	str	r3, [r7, #4]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     45c:	68bb      	ldr	r3, [r7, #8]
     45e:	0c9b      	lsrs	r3, r3, #18
     460:	3302      	adds	r3, #2
     462:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00)
     464:	687b      	ldr	r3, [r7, #4]
     466:	2b00      	cmp	r3, #0
     468:	d10c      	bne.n	484 <SystemCoreClockUpdate+0xa0>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
     46a:	68ba      	ldr	r2, [r7, #8]
     46c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     470:	f2c0 033d 	movt	r3, #61	; 0x3d
     474:	fb03 f202 	mul.w	r2, r3, r2
     478:	f240 0300 	movw	r3, #0
     47c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     480:	601a      	str	r2, [r3, #0]
     482:	e022      	b.n	4ca <SystemCoreClockUpdate+0xe6>
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
     484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     488:	f2c4 0302 	movt	r3, #16386	; 0x4002
     48c:	685b      	ldr	r3, [r3, #4]
     48e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     492:	2b00      	cmp	r3, #0
     494:	d00c      	beq.n	4b0 <SystemCoreClockUpdate+0xcc>
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
     496:	68ba      	ldr	r2, [r7, #8]
     498:	f44f 6310 	mov.w	r3, #2304	; 0x900
     49c:	f2c0 033d 	movt	r3, #61	; 0x3d
     4a0:	fb03 f202 	mul.w	r2, r3, r2
     4a4:	f240 0300 	movw	r3, #0
     4a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4ac:	601a      	str	r2, [r3, #0]
     4ae:	e00c      	b.n	4ca <SystemCoreClockUpdate+0xe6>
        }
        else
        {
          SystemCoreClock = HSE_VALUE * pllmull;
     4b0:	68ba      	ldr	r2, [r7, #8]
     4b2:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     4b6:	f2c0 037a 	movt	r3, #122	; 0x7a
     4ba:	fb03 f202 	mul.w	r2, r3, r2
     4be:	f240 0300 	movw	r3, #0
     4c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4c6:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2;
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     4c8:	e00a      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
     4ca:	e009      	b.n	4e0 <SystemCoreClockUpdate+0xfc>

    default:
      SystemCoreClock = HSI_VALUE;
     4cc:	f240 0300 	movw	r3, #0
     4d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4d4:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     4d8:	f2c0 027a 	movt	r2, #122	; 0x7a
     4dc:	601a      	str	r2, [r3, #0]
      break;
     4de:	bf00      	nop
  }

  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
     4e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     4e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     4e8:	685b      	ldr	r3, [r3, #4]
     4ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     4ee:	091a      	lsrs	r2, r3, #4
     4f0:	f240 0304 	movw	r3, #4
     4f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4f8:	5c9b      	ldrb	r3, [r3, r2]
     4fa:	b2db      	uxtb	r3, r3
     4fc:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
     4fe:	f240 0300 	movw	r3, #0
     502:	f2c2 0300 	movt	r3, #8192	; 0x2000
     506:	681a      	ldr	r2, [r3, #0]
     508:	68fb      	ldr	r3, [r7, #12]
     50a:	40da      	lsrs	r2, r3
     50c:	f240 0300 	movw	r3, #0
     510:	f2c2 0300 	movt	r3, #8192	; 0x2000
     514:	601a      	str	r2, [r3, #0]
}
     516:	3714      	adds	r7, #20
     518:	46bd      	mov	sp, r7
     51a:	f85d 7b04 	ldr.w	r7, [sp], #4
     51e:	4770      	bx	lr

00000520 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
     520:	b580      	push	{r7, lr}
     522:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
     524:	f000 f802 	bl	52c <SetSysClockTo72>
#endif

 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */
}
     528:	bd80      	pop	{r7, pc}
     52a:	bf00      	nop

0000052c <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
     52c:	b480      	push	{r7}
     52e:	b083      	sub	sp, #12
     530:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
     532:	2300      	movs	r3, #0
     534:	607b      	str	r3, [r7, #4]
     536:	2300      	movs	r3, #0
     538:	603b      	str	r3, [r7, #0]

  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
     53a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     53e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     542:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     546:	f2c4 0202 	movt	r2, #16386	; 0x4002
     54a:	6812      	ldr	r2, [r2, #0]
     54c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     550:	601a      	str	r2, [r3, #0]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
     552:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     556:	f2c4 0302 	movt	r3, #16386	; 0x4002
     55a:	681b      	ldr	r3, [r3, #0]
     55c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     560:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
     562:	687b      	ldr	r3, [r7, #4]
     564:	3301      	adds	r3, #1
     566:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
     568:	683b      	ldr	r3, [r7, #0]
     56a:	2b00      	cmp	r3, #0
     56c:	d103      	bne.n	576 <SetSysClockTo72+0x4a>
     56e:	687b      	ldr	r3, [r7, #4]
     570:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     574:	d1ed      	bne.n	552 <SetSysClockTo72+0x26>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
     576:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     57a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     57e:	681b      	ldr	r3, [r3, #0]
     580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     584:	2b00      	cmp	r3, #0
     586:	d002      	beq.n	58e <SetSysClockTo72+0x62>
  {
    HSEStatus = (uint32_t)0x01;
     588:	2301      	movs	r3, #1
     58a:	603b      	str	r3, [r7, #0]
     58c:	e001      	b.n	592 <SetSysClockTo72+0x66>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
     58e:	2300      	movs	r3, #0
     590:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
     592:	683b      	ldr	r3, [r7, #0]
     594:	2b01      	cmp	r3, #1
     596:	f040 8094 	bne.w	6c2 <SetSysClockTo72+0x196>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
     59a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     59e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5a6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5aa:	6812      	ldr	r2, [r2, #0]
     5ac:	f042 0210 	orr.w	r2, r2, #16
     5b0:	601a      	str	r2, [r3, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
     5b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5be:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5c2:	6812      	ldr	r2, [r2, #0]
     5c4:	f022 0203 	bic.w	r2, r2, #3
     5c8:	601a      	str	r2, [r3, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;
     5ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5d6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5da:	6812      	ldr	r2, [r2, #0]
     5dc:	f042 0202 	orr.w	r2, r2, #2
     5e0:	601a      	str	r2, [r3, #0]


    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
     5e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     5ee:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5f2:	6852      	ldr	r2, [r2, #4]
     5f4:	605a      	str	r2, [r3, #4]

    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
     5f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     602:	f2c4 0202 	movt	r2, #16386	; 0x4002
     606:	6852      	ldr	r2, [r2, #4]
     608:	605a      	str	r2, [r3, #4]

    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
     60a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     60e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     612:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     616:	f2c4 0202 	movt	r2, #16386	; 0x4002
     61a:	6852      	ldr	r2, [r2, #4]
     61c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     620:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 |
                            RCC_CFGR_PLLMULL9);
#else
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
     622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     626:	f2c4 0302 	movt	r3, #16386	; 0x4002
     62a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     62e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     632:	6852      	ldr	r2, [r2, #4]
     634:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
     638:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
     63a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     63e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     642:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     646:	f2c4 0202 	movt	r2, #16386	; 0x4002
     64a:	6852      	ldr	r2, [r2, #4]
     64c:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
     650:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
     652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     656:	f2c4 0302 	movt	r3, #16386	; 0x4002
     65a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     65e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     662:	6812      	ldr	r2, [r2, #0]
     664:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     668:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
     66a:	bf00      	nop
     66c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     670:	f2c4 0302 	movt	r3, #16386	; 0x4002
     674:	681b      	ldr	r3, [r3, #0]
     676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
     67a:	2b00      	cmp	r3, #0
     67c:	d0f6      	beq.n	66c <SetSysClockTo72+0x140>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
     67e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     682:	f2c4 0302 	movt	r3, #16386	; 0x4002
     686:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     68a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     68e:	6852      	ldr	r2, [r2, #4]
     690:	f022 0203 	bic.w	r2, r2, #3
     694:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
     696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     69a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     69e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6a2:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6a6:	6852      	ldr	r2, [r2, #4]
     6a8:	f042 0202 	orr.w	r2, r2, #2
     6ac:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
     6ae:	bf00      	nop
     6b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6b8:	685b      	ldr	r3, [r3, #4]
     6ba:	f003 030c 	and.w	r3, r3, #12
     6be:	2b08      	cmp	r3, #8
     6c0:	d1f6      	bne.n	6b0 <SetSysClockTo72+0x184>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }
}
     6c2:	370c      	adds	r7, #12
     6c4:	46bd      	mov	sp, r7
     6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
     6ca:	4770      	bx	lr
     6cc:	000139d0 	.word	0x000139d0
     6d0:	20000000 	.word	0x20000000
     6d4:	200001a0 	.word	0x200001a0
     6d8:	200001a0 	.word	0x200001a0
     6dc:	2004be6c 	.word	0x2004be6c

000006e0 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
     6e0:	b480      	push	{r7}
     6e2:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     6e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6f0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6f4:	6812      	ldr	r2, [r2, #0]
     6f6:	f042 0201 	orr.w	r2, r2, #1
     6fa:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     6fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     700:	f2c4 0202 	movt	r2, #16386	; 0x4002
     704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     708:	f2c4 0302 	movt	r3, #16386	; 0x4002
     70c:	6859      	ldr	r1, [r3, #4]
     70e:	2300      	movs	r3, #0
     710:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     714:	400b      	ands	r3, r1
     716:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     718:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     71c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     720:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     724:	f2c4 0202 	movt	r2, #16386	; 0x4002
     728:	6812      	ldr	r2, [r2, #0]
     72a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     72e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     732:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     738:	f2c4 0302 	movt	r3, #16386	; 0x4002
     73c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     740:	f2c4 0202 	movt	r2, #16386	; 0x4002
     744:	6812      	ldr	r2, [r2, #0]
     746:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     74a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     74c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     750:	f2c4 0302 	movt	r3, #16386	; 0x4002
     754:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     758:	f2c4 0202 	movt	r2, #16386	; 0x4002
     75c:	6852      	ldr	r2, [r2, #4]
     75e:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     762:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     768:	f2c4 0302 	movt	r3, #16386	; 0x4002
     76c:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     770:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
     772:	46bd      	mov	sp, r7
     774:	f85d 7b04 	ldr.w	r7, [sp], #4
     778:	4770      	bx	lr
     77a:	bf00      	nop

0000077c <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
     77c:	b480      	push	{r7}
     77e:	b083      	sub	sp, #12
     780:	af00      	add	r7, sp, #0
     782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
     784:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     788:	f2c4 0302 	movt	r3, #16386	; 0x4002
     78c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     790:	f2c4 0202 	movt	r2, #16386	; 0x4002
     794:	6812      	ldr	r2, [r2, #0]
     796:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     79a:	601a      	str	r2, [r3, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
     79c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ac:	6812      	ldr	r2, [r2, #0]
     7ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     7b2:	601a      	str	r2, [r3, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
     7b4:	687b      	ldr	r3, [r7, #4]
     7b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
     7ba:	d003      	beq.n	7c4 <RCC_HSEConfig+0x48>
     7bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
     7c0:	d00d      	beq.n	7de <RCC_HSEConfig+0x62>
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
      break;

    default:
      break;
     7c2:	e019      	b.n	7f8 <RCC_HSEConfig+0x7c>
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
     7c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7d0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7d4:	6812      	ldr	r2, [r2, #0]
     7d6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     7da:	601a      	str	r2, [r3, #0]
      break;
     7dc:	e00c      	b.n	7f8 <RCC_HSEConfig+0x7c>

    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
     7de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7ea:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ee:	6812      	ldr	r2, [r2, #0]
     7f0:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
     7f4:	601a      	str	r2, [r3, #0]
      break;
     7f6:	bf00      	nop

    default:
      break;
  }
}
     7f8:	370c      	adds	r7, #12
     7fa:	46bd      	mov	sp, r7
     7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     800:	4770      	bx	lr
     802:	bf00      	nop

00000804 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
     804:	b580      	push	{r7, lr}
     806:	b082      	sub	sp, #8
     808:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
     80a:	2300      	movs	r3, #0
     80c:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
     80e:	2300      	movs	r3, #0
     810:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
     812:	2300      	movs	r3, #0
     814:	71bb      	strb	r3, [r7, #6]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
     816:	2031      	movs	r0, #49	; 0x31
     818:	f000 fba2 	bl	f60 <RCC_GetFlagStatus>
     81c:	4603      	mov	r3, r0
     81e:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;
     820:	683b      	ldr	r3, [r7, #0]
     822:	3301      	adds	r3, #1
     824:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
     826:	683b      	ldr	r3, [r7, #0]
     828:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     82c:	d002      	beq.n	834 <RCC_WaitForHSEStartUp+0x30>
     82e:	79bb      	ldrb	r3, [r7, #6]
     830:	2b00      	cmp	r3, #0
     832:	d0f0      	beq.n	816 <RCC_WaitForHSEStartUp+0x12>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
     834:	2031      	movs	r0, #49	; 0x31
     836:	f000 fb93 	bl	f60 <RCC_GetFlagStatus>
     83a:	4603      	mov	r3, r0
     83c:	2b00      	cmp	r3, #0
     83e:	d002      	beq.n	846 <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
     840:	2301      	movs	r3, #1
     842:	71fb      	strb	r3, [r7, #7]
     844:	e001      	b.n	84a <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
     846:	2300      	movs	r3, #0
     848:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
     84a:	79fb      	ldrb	r3, [r7, #7]
}
     84c:	4618      	mov	r0, r3
     84e:	3708      	adds	r7, #8
     850:	46bd      	mov	sp, r7
     852:	bd80      	pop	{r7, pc}

00000854 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *   This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
     854:	b480      	push	{r7}
     856:	b085      	sub	sp, #20
     858:	af00      	add	r7, sp, #0
     85a:	4603      	mov	r3, r0
     85c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
     85e:	2300      	movs	r3, #0
     860:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
     862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     866:	f2c4 0302 	movt	r3, #16386	; 0x4002
     86a:	681b      	ldr	r3, [r3, #0]
     86c:	60fb      	str	r3, [r7, #12]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
     86e:	68fb      	ldr	r3, [r7, #12]
     870:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
     874:	60fb      	str	r3, [r7, #12]
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
     876:	79fb      	ldrb	r3, [r7, #7]
     878:	00db      	lsls	r3, r3, #3
     87a:	68fa      	ldr	r2, [r7, #12]
     87c:	4313      	orrs	r3, r2
     87e:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CR = tmpreg;
     880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     884:	f2c4 0302 	movt	r3, #16386	; 0x4002
     888:	68fa      	ldr	r2, [r7, #12]
     88a:	601a      	str	r2, [r3, #0]
}
     88c:	3714      	adds	r7, #20
     88e:	46bd      	mov	sp, r7
     890:	f85d 7b04 	ldr.w	r7, [sp], #4
     894:	4770      	bx	lr
     896:	bf00      	nop

00000898 <RCC_HSICmd>:
  * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
  * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
     898:	b480      	push	{r7}
     89a:	b083      	sub	sp, #12
     89c:	af00      	add	r7, sp, #0
     89e:	4603      	mov	r3, r0
     8a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
     8a2:	2300      	movs	r3, #0
     8a4:	f2c4 2342 	movt	r3, #16962	; 0x4242
     8a8:	79fa      	ldrb	r2, [r7, #7]
     8aa:	601a      	str	r2, [r3, #0]
}
     8ac:	370c      	adds	r7, #12
     8ae:	46bd      	mov	sp, r7
     8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
     8b4:	4770      	bx	lr
     8b6:	bf00      	nop

000008b8 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
     8b8:	b480      	push	{r7}
     8ba:	b085      	sub	sp, #20
     8bc:	af00      	add	r7, sp, #0
     8be:	6078      	str	r0, [r7, #4]
     8c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
     8c2:	2300      	movs	r3, #0
     8c4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
     8c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ce:	685b      	ldr	r3, [r3, #4]
     8d0:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
     8d2:	68fb      	ldr	r3, [r7, #12]
     8d4:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
     8d8:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
     8da:	687a      	ldr	r2, [r7, #4]
     8dc:	683b      	ldr	r3, [r7, #0]
     8de:	4313      	orrs	r3, r2
     8e0:	68fa      	ldr	r2, [r7, #12]
     8e2:	4313      	orrs	r3, r2
     8e4:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     8e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ee:	68fa      	ldr	r2, [r7, #12]
     8f0:	605a      	str	r2, [r3, #4]
}
     8f2:	3714      	adds	r7, #20
     8f4:	46bd      	mov	sp, r7
     8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
     8fa:	4770      	bx	lr

000008fc <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
     8fc:	b480      	push	{r7}
     8fe:	b083      	sub	sp, #12
     900:	af00      	add	r7, sp, #0
     902:	4603      	mov	r3, r0
     904:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
     906:	2360      	movs	r3, #96	; 0x60
     908:	f2c4 2342 	movt	r3, #16962	; 0x4242
     90c:	79fa      	ldrb	r2, [r7, #7]
     90e:	601a      	str	r2, [r3, #0]
}
     910:	370c      	adds	r7, #12
     912:	46bd      	mov	sp, r7
     914:	f85d 7b04 	ldr.w	r7, [sp], #4
     918:	4770      	bx	lr
     91a:	bf00      	nop

0000091c <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
     91c:	b480      	push	{r7}
     91e:	b085      	sub	sp, #20
     920:	af00      	add	r7, sp, #0
     922:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     924:	2300      	movs	r3, #0
     926:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
     928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     92c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     930:	685b      	ldr	r3, [r3, #4]
     932:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
     934:	68fb      	ldr	r3, [r7, #12]
     936:	f023 0303 	bic.w	r3, r3, #3
     93a:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
     93c:	68fa      	ldr	r2, [r7, #12]
     93e:	687b      	ldr	r3, [r7, #4]
     940:	4313      	orrs	r3, r2
     942:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     948:	f2c4 0302 	movt	r3, #16386	; 0x4002
     94c:	68fa      	ldr	r2, [r7, #12]
     94e:	605a      	str	r2, [r3, #4]
}
     950:	3714      	adds	r7, #20
     952:	46bd      	mov	sp, r7
     954:	f85d 7b04 	ldr.w	r7, [sp], #4
     958:	4770      	bx	lr
     95a:	bf00      	nop

0000095c <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
     95c:	b480      	push	{r7}
     95e:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
     960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     964:	f2c4 0302 	movt	r3, #16386	; 0x4002
     968:	685b      	ldr	r3, [r3, #4]
     96a:	b2db      	uxtb	r3, r3
     96c:	f003 030c 	and.w	r3, r3, #12
     970:	b2db      	uxtb	r3, r3
}
     972:	4618      	mov	r0, r3
     974:	46bd      	mov	sp, r7
     976:	f85d 7b04 	ldr.w	r7, [sp], #4
     97a:	4770      	bx	lr

0000097c <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
     97c:	b480      	push	{r7}
     97e:	b085      	sub	sp, #20
     980:	af00      	add	r7, sp, #0
     982:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     984:	2300      	movs	r3, #0
     986:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
     988:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     98c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     990:	685b      	ldr	r3, [r3, #4]
     992:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
     994:	68fb      	ldr	r3, [r7, #12]
     996:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
     99a:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
     99c:	68fa      	ldr	r2, [r7, #12]
     99e:	687b      	ldr	r3, [r7, #4]
     9a0:	4313      	orrs	r3, r2
     9a2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ac:	68fa      	ldr	r2, [r7, #12]
     9ae:	605a      	str	r2, [r3, #4]
}
     9b0:	3714      	adds	r7, #20
     9b2:	46bd      	mov	sp, r7
     9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9b8:	4770      	bx	lr
     9ba:	bf00      	nop

000009bc <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
     9bc:	b480      	push	{r7}
     9be:	b085      	sub	sp, #20
     9c0:	af00      	add	r7, sp, #0
     9c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     9c4:	2300      	movs	r3, #0
     9c6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     9c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9d0:	685b      	ldr	r3, [r3, #4]
     9d2:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
     9d4:	68fb      	ldr	r3, [r7, #12]
     9d6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
     9da:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
     9dc:	68fa      	ldr	r2, [r7, #12]
     9de:	687b      	ldr	r3, [r7, #4]
     9e0:	4313      	orrs	r3, r2
     9e2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ec:	68fa      	ldr	r2, [r7, #12]
     9ee:	605a      	str	r2, [r3, #4]
}
     9f0:	3714      	adds	r7, #20
     9f2:	46bd      	mov	sp, r7
     9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9f8:	4770      	bx	lr
     9fa:	bf00      	nop

000009fc <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
     9fc:	b480      	push	{r7}
     9fe:	b085      	sub	sp, #20
     a00:	af00      	add	r7, sp, #0
     a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     a04:	2300      	movs	r3, #0
     a06:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a0c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a10:	685b      	ldr	r3, [r3, #4]
     a12:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
     a14:	68fb      	ldr	r3, [r7, #12]
     a16:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
     a1a:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
     a1c:	687b      	ldr	r3, [r7, #4]
     a1e:	00db      	lsls	r3, r3, #3
     a20:	68fa      	ldr	r2, [r7, #12]
     a22:	4313      	orrs	r3, r2
     a24:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     a26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a2a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a2e:	68fa      	ldr	r2, [r7, #12]
     a30:	605a      	str	r2, [r3, #4]
}
     a32:	3714      	adds	r7, #20
     a34:	46bd      	mov	sp, r7
     a36:	f85d 7b04 	ldr.w	r7, [sp], #4
     a3a:	4770      	bx	lr

00000a3c <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
     a3c:	b480      	push	{r7}
     a3e:	b083      	sub	sp, #12
     a40:	af00      	add	r7, sp, #0
     a42:	4602      	mov	r2, r0
     a44:	460b      	mov	r3, r1
     a46:	71fa      	strb	r2, [r7, #7]
     a48:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     a4a:	79bb      	ldrb	r3, [r7, #6]
     a4c:	2b00      	cmp	r3, #0
     a4e:	d00e      	beq.n	a6e <RCC_ITConfig+0x32>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
     a50:	f241 0309 	movw	r3, #4105	; 0x1009
     a54:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a58:	f241 0209 	movw	r2, #4105	; 0x1009
     a5c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a60:	7812      	ldrb	r2, [r2, #0]
     a62:	b2d1      	uxtb	r1, r2
     a64:	79fa      	ldrb	r2, [r7, #7]
     a66:	430a      	orrs	r2, r1
     a68:	b2d2      	uxtb	r2, r2
     a6a:	701a      	strb	r2, [r3, #0]
     a6c:	e00f      	b.n	a8e <RCC_ITConfig+0x52>
  }
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
     a6e:	f241 0309 	movw	r3, #4105	; 0x1009
     a72:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a76:	f241 0209 	movw	r2, #4105	; 0x1009
     a7a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a7e:	7812      	ldrb	r2, [r2, #0]
     a80:	b2d1      	uxtb	r1, r2
     a82:	79fa      	ldrb	r2, [r7, #7]
     a84:	43d2      	mvns	r2, r2
     a86:	b2d2      	uxtb	r2, r2
     a88:	400a      	ands	r2, r1
     a8a:	b2d2      	uxtb	r2, r2
     a8c:	701a      	strb	r2, [r3, #0]
  }
}
     a8e:	370c      	adds	r7, #12
     a90:	46bd      	mov	sp, r7
     a92:	f85d 7b04 	ldr.w	r7, [sp], #4
     a96:	4770      	bx	lr

00000a98 <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
     a98:	b480      	push	{r7}
     a9a:	b083      	sub	sp, #12
     a9c:	af00      	add	r7, sp, #0
     a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
     aa0:	23d8      	movs	r3, #216	; 0xd8
     aa2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     aa6:	687a      	ldr	r2, [r7, #4]
     aa8:	601a      	str	r2, [r3, #0]
}
     aaa:	370c      	adds	r7, #12
     aac:	46bd      	mov	sp, r7
     aae:	f85d 7b04 	ldr.w	r7, [sp], #4
     ab2:	4770      	bx	lr

00000ab4 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
     ab4:	b480      	push	{r7}
     ab6:	b085      	sub	sp, #20
     ab8:	af00      	add	r7, sp, #0
     aba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     abc:	2300      	movs	r3, #0
     abe:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
     ac0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ac4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ac8:	685b      	ldr	r3, [r3, #4]
     aca:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
     acc:	68fb      	ldr	r3, [r7, #12]
     ace:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
     ad2:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
     ad4:	68fa      	ldr	r2, [r7, #12]
     ad6:	687b      	ldr	r3, [r7, #4]
     ad8:	4313      	orrs	r3, r2
     ada:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ae0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ae4:	68fa      	ldr	r2, [r7, #12]
     ae6:	605a      	str	r2, [r3, #4]
}
     ae8:	3714      	adds	r7, #20
     aea:	46bd      	mov	sp, r7
     aec:	f85d 7b04 	ldr.w	r7, [sp], #4
     af0:	4770      	bx	lr
     af2:	bf00      	nop

00000af4 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
     af4:	b480      	push	{r7}
     af6:	b083      	sub	sp, #12
     af8:	af00      	add	r7, sp, #0
     afa:	4603      	mov	r3, r0
     afc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     afe:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b02:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b06:	2200      	movs	r2, #0
     b08:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     b0a:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b0e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b12:	2200      	movs	r2, #0
     b14:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
     b16:	79fb      	ldrb	r3, [r7, #7]
     b18:	2b01      	cmp	r3, #1
     b1a:	d002      	beq.n	b22 <RCC_LSEConfig+0x2e>
     b1c:	2b04      	cmp	r3, #4
     b1e:	d007      	beq.n	b30 <RCC_LSEConfig+0x3c>
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;

    default:
      break;
     b20:	e00d      	b.n	b3e <RCC_LSEConfig+0x4a>
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
     b22:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b2a:	2201      	movs	r2, #1
     b2c:	701a      	strb	r2, [r3, #0]
      break;
     b2e:	e006      	b.n	b3e <RCC_LSEConfig+0x4a>

    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
     b30:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b34:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b38:	2205      	movs	r2, #5
     b3a:	701a      	strb	r2, [r3, #0]
      break;
     b3c:	bf00      	nop

    default:
      break;
  }
}
     b3e:	370c      	adds	r7, #12
     b40:	46bd      	mov	sp, r7
     b42:	f85d 7b04 	ldr.w	r7, [sp], #4
     b46:	4770      	bx	lr

00000b48 <RCC_LSICmd>:
  * @note   LSI can not be disabled if the IWDG is running.
  * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
     b48:	b480      	push	{r7}
     b4a:	b083      	sub	sp, #12
     b4c:	af00      	add	r7, sp, #0
     b4e:	4603      	mov	r3, r0
     b50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
     b52:	f44f 6390 	mov.w	r3, #1152	; 0x480
     b56:	f2c4 2342 	movt	r3, #16962	; 0x4242
     b5a:	79fa      	ldrb	r2, [r7, #7]
     b5c:	601a      	str	r2, [r3, #0]
}
     b5e:	370c      	adds	r7, #12
     b60:	46bd      	mov	sp, r7
     b62:	f85d 7b04 	ldr.w	r7, [sp], #4
     b66:	4770      	bx	lr

00000b68 <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
     b68:	b480      	push	{r7}
     b6a:	b083      	sub	sp, #12
     b6c:	af00      	add	r7, sp, #0
     b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
     b70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     b74:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     b7c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     b80:	6a11      	ldr	r1, [r2, #32]
     b82:	687a      	ldr	r2, [r7, #4]
     b84:	430a      	orrs	r2, r1
     b86:	621a      	str	r2, [r3, #32]
}
     b88:	370c      	adds	r7, #12
     b8a:	46bd      	mov	sp, r7
     b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
     b90:	4770      	bx	lr
     b92:	bf00      	nop

00000b94 <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
     b94:	b480      	push	{r7}
     b96:	b083      	sub	sp, #12
     b98:	af00      	add	r7, sp, #0
     b9a:	4603      	mov	r3, r0
     b9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
     b9e:	f240 433c 	movw	r3, #1084	; 0x43c
     ba2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     ba6:	79fa      	ldrb	r2, [r7, #7]
     ba8:	601a      	str	r2, [r3, #0]
}
     baa:	370c      	adds	r7, #12
     bac:	46bd      	mov	sp, r7
     bae:	f85d 7b04 	ldr.w	r7, [sp], #4
     bb2:	4770      	bx	lr

00000bb4 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using
  *         fractional value for HSE crystal.
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
     bb4:	b480      	push	{r7}
     bb6:	b087      	sub	sp, #28
     bb8:	af00      	add	r7, sp, #0
     bba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
     bbc:	2300      	movs	r3, #0
     bbe:	617b      	str	r3, [r7, #20]
     bc0:	2300      	movs	r3, #0
     bc2:	613b      	str	r3, [r7, #16]
     bc4:	2300      	movs	r3, #0
     bc6:	60fb      	str	r3, [r7, #12]
     bc8:	2300      	movs	r3, #0
     bca:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
     bcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     bd0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     bd4:	685b      	ldr	r3, [r3, #4]
     bd6:	f003 030c 	and.w	r3, r3, #12
     bda:	617b      	str	r3, [r7, #20]

  switch (tmp)
     bdc:	697b      	ldr	r3, [r7, #20]
     bde:	2b04      	cmp	r3, #4
     be0:	d00a      	beq.n	bf8 <RCC_GetClocksFreq+0x44>
     be2:	2b08      	cmp	r3, #8
     be4:	d00f      	beq.n	c06 <RCC_GetClocksFreq+0x52>
     be6:	2b00      	cmp	r3, #0
     be8:	d14c      	bne.n	c84 <RCC_GetClocksFreq+0xd0>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     bea:	687a      	ldr	r2, [r7, #4]
     bec:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bf0:	f2c0 037a 	movt	r3, #122	; 0x7a
     bf4:	6013      	str	r3, [r2, #0]
      break;
     bf6:	e04c      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
     bf8:	687a      	ldr	r2, [r7, #4]
     bfa:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bfe:	f2c0 037a 	movt	r3, #122	; 0x7a
     c02:	6013      	str	r3, [r2, #0]
      break;
     c04:	e045      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
     c06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c0a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c0e:	685b      	ldr	r3, [r3, #4]
     c10:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     c14:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
     c16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c1a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c1e:	685b      	ldr	r3, [r3, #4]
     c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     c24:	60fb      	str	r3, [r7, #12]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     c26:	693b      	ldr	r3, [r7, #16]
     c28:	0c9b      	lsrs	r3, r3, #18
     c2a:	3302      	adds	r3, #2
     c2c:	613b      	str	r3, [r7, #16]

      if (pllsource == 0x00)
     c2e:	68fb      	ldr	r3, [r7, #12]
     c30:	2b00      	cmp	r3, #0
     c32:	d109      	bne.n	c48 <RCC_GetClocksFreq+0x94>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
     c34:	693a      	ldr	r2, [r7, #16]
     c36:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c3a:	f2c0 033d 	movt	r3, #61	; 0x3d
     c3e:	fb03 f202 	mul.w	r2, r3, r2
     c42:	687b      	ldr	r3, [r7, #4]
     c44:	601a      	str	r2, [r3, #0]
     c46:	e01c      	b.n	c82 <RCC_GetClocksFreq+0xce>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
     c48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c4c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c50:	685b      	ldr	r3, [r3, #4]
     c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     c56:	2b00      	cmp	r3, #0
     c58:	d009      	beq.n	c6e <RCC_GetClocksFreq+0xba>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
     c5a:	693a      	ldr	r2, [r7, #16]
     c5c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c60:	f2c0 033d 	movt	r3, #61	; 0x3d
     c64:	fb03 f202 	mul.w	r2, r3, r2
     c68:	687b      	ldr	r3, [r7, #4]
     c6a:	601a      	str	r2, [r3, #0]
     c6c:	e009      	b.n	c82 <RCC_GetClocksFreq+0xce>
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
     c6e:	693a      	ldr	r2, [r7, #16]
     c70:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c74:	f2c0 037a 	movt	r3, #122	; 0x7a
     c78:	fb03 f202 	mul.w	r2, r3, r2
     c7c:	687b      	ldr	r3, [r7, #4]
     c7e:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2;
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     c80:	e007      	b.n	c92 <RCC_GetClocksFreq+0xde>
     c82:	e006      	b.n	c92 <RCC_GetClocksFreq+0xde>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     c84:	687a      	ldr	r2, [r7, #4]
     c86:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c8a:	f2c0 037a 	movt	r3, #122	; 0x7a
     c8e:	6013      	str	r3, [r2, #0]
      break;
     c90:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
     c92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c96:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c9a:	685b      	ldr	r3, [r3, #4]
     c9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     ca0:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
     ca2:	697b      	ldr	r3, [r7, #20]
     ca4:	091b      	lsrs	r3, r3, #4
     ca6:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     ca8:	f240 0314 	movw	r3, #20
     cac:	f2c2 0300 	movt	r3, #8192	; 0x2000
     cb0:	697a      	ldr	r2, [r7, #20]
     cb2:	4413      	add	r3, r2
     cb4:	781b      	ldrb	r3, [r3, #0]
     cb6:	b2db      	uxtb	r3, r3
     cb8:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
     cba:	687b      	ldr	r3, [r7, #4]
     cbc:	681a      	ldr	r2, [r3, #0]
     cbe:	68bb      	ldr	r3, [r7, #8]
     cc0:	40da      	lsrs	r2, r3
     cc2:	687b      	ldr	r3, [r7, #4]
     cc4:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
     cc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     cce:	685b      	ldr	r3, [r3, #4]
     cd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
     cd4:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
     cd6:	697b      	ldr	r3, [r7, #20]
     cd8:	0a1b      	lsrs	r3, r3, #8
     cda:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     cdc:	f240 0314 	movw	r3, #20
     ce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     ce4:	697a      	ldr	r2, [r7, #20]
     ce6:	4413      	add	r3, r2
     ce8:	781b      	ldrb	r3, [r3, #0]
     cea:	b2db      	uxtb	r3, r3
     cec:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     cee:	687b      	ldr	r3, [r7, #4]
     cf0:	685a      	ldr	r2, [r3, #4]
     cf2:	68bb      	ldr	r3, [r7, #8]
     cf4:	40da      	lsrs	r2, r3
     cf6:	687b      	ldr	r3, [r7, #4]
     cf8:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
     cfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cfe:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d02:	685b      	ldr	r3, [r3, #4]
     d04:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
     d08:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
     d0a:	697b      	ldr	r3, [r7, #20]
     d0c:	0adb      	lsrs	r3, r3, #11
     d0e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     d10:	f240 0314 	movw	r3, #20
     d14:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d18:	697a      	ldr	r2, [r7, #20]
     d1a:	4413      	add	r3, r2
     d1c:	781b      	ldrb	r3, [r3, #0]
     d1e:	b2db      	uxtb	r3, r3
     d20:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     d22:	687b      	ldr	r3, [r7, #4]
     d24:	685a      	ldr	r2, [r3, #4]
     d26:	68bb      	ldr	r3, [r7, #8]
     d28:	40da      	lsrs	r2, r3
     d2a:	687b      	ldr	r3, [r7, #4]
     d2c:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
     d2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d32:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d36:	685b      	ldr	r3, [r3, #4]
     d38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
     d3c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
     d3e:	697b      	ldr	r3, [r7, #20]
     d40:	0b9b      	lsrs	r3, r3, #14
     d42:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
     d44:	f240 0324 	movw	r3, #36	; 0x24
     d48:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d4c:	697a      	ldr	r2, [r7, #20]
     d4e:	4413      	add	r3, r2
     d50:	781b      	ldrb	r3, [r3, #0]
     d52:	b2db      	uxtb	r3, r3
     d54:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
     d56:	687b      	ldr	r3, [r7, #4]
     d58:	68da      	ldr	r2, [r3, #12]
     d5a:	68bb      	ldr	r3, [r7, #8]
     d5c:	fbb2 f2f3 	udiv	r2, r2, r3
     d60:	687b      	ldr	r3, [r7, #4]
     d62:	611a      	str	r2, [r3, #16]
}
     d64:	371c      	adds	r7, #28
     d66:	46bd      	mov	sp, r7
     d68:	f85d 7b04 	ldr.w	r7, [sp], #4
     d6c:	4770      	bx	lr
     d6e:	bf00      	nop

00000d70 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
     d70:	b480      	push	{r7}
     d72:	b083      	sub	sp, #12
     d74:	af00      	add	r7, sp, #0
     d76:	6078      	str	r0, [r7, #4]
     d78:	460b      	mov	r3, r1
     d7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
     d7c:	78fb      	ldrb	r3, [r7, #3]
     d7e:	2b00      	cmp	r3, #0
     d80:	d00c      	beq.n	d9c <RCC_AHBPeriphClockCmd+0x2c>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
     d82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d86:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     d8e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     d92:	6951      	ldr	r1, [r2, #20]
     d94:	687a      	ldr	r2, [r7, #4]
     d96:	430a      	orrs	r2, r1
     d98:	615a      	str	r2, [r3, #20]
     d9a:	e00c      	b.n	db6 <RCC_AHBPeriphClockCmd+0x46>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
     d9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     da0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     da4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     da8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dac:	6951      	ldr	r1, [r2, #20]
     dae:	687a      	ldr	r2, [r7, #4]
     db0:	43d2      	mvns	r2, r2
     db2:	400a      	ands	r2, r1
     db4:	615a      	str	r2, [r3, #20]
  }
}
     db6:	370c      	adds	r7, #12
     db8:	46bd      	mov	sp, r7
     dba:	f85d 7b04 	ldr.w	r7, [sp], #4
     dbe:	4770      	bx	lr

00000dc0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     dc0:	b480      	push	{r7}
     dc2:	b083      	sub	sp, #12
     dc4:	af00      	add	r7, sp, #0
     dc6:	6078      	str	r0, [r7, #4]
     dc8:	460b      	mov	r3, r1
     dca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     dcc:	78fb      	ldrb	r3, [r7, #3]
     dce:	2b00      	cmp	r3, #0
     dd0:	d00c      	beq.n	dec <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
     dd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     dd6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     dda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     dde:	f2c4 0202 	movt	r2, #16386	; 0x4002
     de2:	6991      	ldr	r1, [r2, #24]
     de4:	687a      	ldr	r2, [r7, #4]
     de6:	430a      	orrs	r2, r1
     de8:	619a      	str	r2, [r3, #24]
     dea:	e00c      	b.n	e06 <RCC_APB2PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
     dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     df0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     df4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     df8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dfc:	6991      	ldr	r1, [r2, #24]
     dfe:	687a      	ldr	r2, [r7, #4]
     e00:	43d2      	mvns	r2, r2
     e02:	400a      	ands	r2, r1
     e04:	619a      	str	r2, [r3, #24]
  }
}
     e06:	370c      	adds	r7, #12
     e08:	46bd      	mov	sp, r7
     e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e0e:	4770      	bx	lr

00000e10 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     e10:	b480      	push	{r7}
     e12:	b083      	sub	sp, #12
     e14:	af00      	add	r7, sp, #0
     e16:	6078      	str	r0, [r7, #4]
     e18:	460b      	mov	r3, r1
     e1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e1c:	78fb      	ldrb	r3, [r7, #3]
     e1e:	2b00      	cmp	r3, #0
     e20:	d00c      	beq.n	e3c <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
     e22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e2e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e32:	69d1      	ldr	r1, [r2, #28]
     e34:	687a      	ldr	r2, [r7, #4]
     e36:	430a      	orrs	r2, r1
     e38:	61da      	str	r2, [r3, #28]
     e3a:	e00c      	b.n	e56 <RCC_APB1PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
     e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e40:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e48:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e4c:	69d1      	ldr	r1, [r2, #28]
     e4e:	687a      	ldr	r2, [r7, #4]
     e50:	43d2      	mvns	r2, r2
     e52:	400a      	ands	r2, r1
     e54:	61da      	str	r2, [r3, #28]
  }
}
     e56:	370c      	adds	r7, #12
     e58:	46bd      	mov	sp, r7
     e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e5e:	4770      	bx	lr

00000e60 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     e60:	b480      	push	{r7}
     e62:	b083      	sub	sp, #12
     e64:	af00      	add	r7, sp, #0
     e66:	6078      	str	r0, [r7, #4]
     e68:	460b      	mov	r3, r1
     e6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e6c:	78fb      	ldrb	r3, [r7, #3]
     e6e:	2b00      	cmp	r3, #0
     e70:	d00c      	beq.n	e8c <RCC_APB2PeriphResetCmd+0x2c>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
     e72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e76:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e7e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e82:	68d1      	ldr	r1, [r2, #12]
     e84:	687a      	ldr	r2, [r7, #4]
     e86:	430a      	orrs	r2, r1
     e88:	60da      	str	r2, [r3, #12]
     e8a:	e00c      	b.n	ea6 <RCC_APB2PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
     e8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e90:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e98:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e9c:	68d1      	ldr	r1, [r2, #12]
     e9e:	687a      	ldr	r2, [r7, #4]
     ea0:	43d2      	mvns	r2, r2
     ea2:	400a      	ands	r2, r1
     ea4:	60da      	str	r2, [r3, #12]
  }
}
     ea6:	370c      	adds	r7, #12
     ea8:	46bd      	mov	sp, r7
     eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
     eae:	4770      	bx	lr

00000eb0 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     eb0:	b480      	push	{r7}
     eb2:	b083      	sub	sp, #12
     eb4:	af00      	add	r7, sp, #0
     eb6:	6078      	str	r0, [r7, #4]
     eb8:	460b      	mov	r3, r1
     eba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     ebc:	78fb      	ldrb	r3, [r7, #3]
     ebe:	2b00      	cmp	r3, #0
     ec0:	d00c      	beq.n	edc <RCC_APB1PeriphResetCmd+0x2c>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
     ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ec6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     eca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ece:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ed2:	6911      	ldr	r1, [r2, #16]
     ed4:	687a      	ldr	r2, [r7, #4]
     ed6:	430a      	orrs	r2, r1
     ed8:	611a      	str	r2, [r3, #16]
     eda:	e00c      	b.n	ef6 <RCC_APB1PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
     edc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ee0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ee4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ee8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     eec:	6911      	ldr	r1, [r2, #16]
     eee:	687a      	ldr	r2, [r7, #4]
     ef0:	43d2      	mvns	r2, r2
     ef2:	400a      	ands	r2, r1
     ef4:	611a      	str	r2, [r3, #16]
  }
}
     ef6:	370c      	adds	r7, #12
     ef8:	46bd      	mov	sp, r7
     efa:	f85d 7b04 	ldr.w	r7, [sp], #4
     efe:	4770      	bx	lr

00000f00 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
     f00:	b480      	push	{r7}
     f02:	b083      	sub	sp, #12
     f04:	af00      	add	r7, sp, #0
     f06:	4603      	mov	r3, r0
     f08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
     f0a:	f44f 6388 	mov.w	r3, #1088	; 0x440
     f0e:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f12:	79fa      	ldrb	r2, [r7, #7]
     f14:	601a      	str	r2, [r3, #0]
}
     f16:	370c      	adds	r7, #12
     f18:	46bd      	mov	sp, r7
     f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f1e:	4770      	bx	lr

00000f20 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
     f20:	b480      	push	{r7}
     f22:	b083      	sub	sp, #12
     f24:	af00      	add	r7, sp, #0
     f26:	4603      	mov	r3, r0
     f28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
     f2a:	234c      	movs	r3, #76	; 0x4c
     f2c:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f30:	79fa      	ldrb	r2, [r7, #7]
     f32:	601a      	str	r2, [r3, #0]
}
     f34:	370c      	adds	r7, #12
     f36:	46bd      	mov	sp, r7
     f38:	f85d 7b04 	ldr.w	r7, [sp], #4
     f3c:	4770      	bx	lr
     f3e:	bf00      	nop

00000f40 <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
     f40:	b480      	push	{r7}
     f42:	b083      	sub	sp, #12
     f44:	af00      	add	r7, sp, #0
     f46:	4603      	mov	r3, r0
     f48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
     f4a:	f241 0307 	movw	r3, #4103	; 0x1007
     f4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f52:	79fa      	ldrb	r2, [r7, #7]
     f54:	701a      	strb	r2, [r3, #0]
}
     f56:	370c      	adds	r7, #12
     f58:	46bd      	mov	sp, r7
     f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f5e:	4770      	bx	lr

00000f60 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
     f60:	b480      	push	{r7}
     f62:	b087      	sub	sp, #28
     f64:	af00      	add	r7, sp, #0
     f66:	4603      	mov	r3, r0
     f68:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
     f6a:	2300      	movs	r3, #0
     f6c:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
     f6e:	2300      	movs	r3, #0
     f70:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
     f72:	2300      	movs	r3, #0
     f74:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
     f76:	79fb      	ldrb	r3, [r7, #7]
     f78:	095b      	lsrs	r3, r3, #5
     f7a:	b2db      	uxtb	r3, r3
     f7c:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
     f7e:	68fb      	ldr	r3, [r7, #12]
     f80:	2b01      	cmp	r3, #1
     f82:	d106      	bne.n	f92 <RCC_GetFlagStatus+0x32>
  {
    statusreg = RCC->CR;
     f84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f88:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f8c:	681b      	ldr	r3, [r3, #0]
     f8e:	617b      	str	r3, [r7, #20]
     f90:	e00f      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
     f92:	68fb      	ldr	r3, [r7, #12]
     f94:	2b02      	cmp	r3, #2
     f96:	d106      	bne.n	fa6 <RCC_GetFlagStatus+0x46>
  {
    statusreg = RCC->BDCR;
     f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f9c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fa0:	6a1b      	ldr	r3, [r3, #32]
     fa2:	617b      	str	r3, [r7, #20]
     fa4:	e005      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
     fa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     faa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     fb0:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
     fb2:	79fb      	ldrb	r3, [r7, #7]
     fb4:	f003 031f 	and.w	r3, r3, #31
     fb8:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
     fba:	68fb      	ldr	r3, [r7, #12]
     fbc:	697a      	ldr	r2, [r7, #20]
     fbe:	fa22 f303 	lsr.w	r3, r2, r3
     fc2:	f003 0301 	and.w	r3, r3, #1
     fc6:	2b00      	cmp	r3, #0
     fc8:	d002      	beq.n	fd0 <RCC_GetFlagStatus+0x70>
  {
    bitstatus = SET;
     fca:	2301      	movs	r3, #1
     fcc:	74fb      	strb	r3, [r7, #19]
     fce:	e001      	b.n	fd4 <RCC_GetFlagStatus+0x74>
  }
  else
  {
    bitstatus = RESET;
     fd0:	2300      	movs	r3, #0
     fd2:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
     fd4:	7cfb      	ldrb	r3, [r7, #19]
}
     fd6:	4618      	mov	r0, r3
     fd8:	371c      	adds	r7, #28
     fda:	46bd      	mov	sp, r7
     fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
     fe0:	4770      	bx	lr
     fe2:	bf00      	nop

00000fe4 <RCC_ClearFlag>:
  *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
     fe4:	b480      	push	{r7}
     fe6:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
     fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     fec:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ff0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ff4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ff8:	6a52      	ldr	r2, [r2, #36]	; 0x24
     ffa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     ffe:	625a      	str	r2, [r3, #36]	; 0x24
}
    1000:	46bd      	mov	sp, r7
    1002:	f85d 7b04 	ldr.w	r7, [sp], #4
    1006:	4770      	bx	lr

00001008 <RCC_GetITStatus>:
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  *
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
    1008:	b480      	push	{r7}
    100a:	b085      	sub	sp, #20
    100c:	af00      	add	r7, sp, #0
    100e:	4603      	mov	r3, r0
    1010:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
    1012:	2300      	movs	r3, #0
    1014:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
    1016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    101a:	f2c4 0302 	movt	r3, #16386	; 0x4002
    101e:	689a      	ldr	r2, [r3, #8]
    1020:	79fb      	ldrb	r3, [r7, #7]
    1022:	4013      	ands	r3, r2
    1024:	2b00      	cmp	r3, #0
    1026:	d002      	beq.n	102e <RCC_GetITStatus+0x26>
  {
    bitstatus = SET;
    1028:	2301      	movs	r3, #1
    102a:	73fb      	strb	r3, [r7, #15]
    102c:	e001      	b.n	1032 <RCC_GetITStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    102e:	2300      	movs	r3, #0
    1030:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the RCC_IT status */
  return  bitstatus;
    1032:	7bfb      	ldrb	r3, [r7, #15]
}
    1034:	4618      	mov	r0, r3
    1036:	3714      	adds	r7, #20
    1038:	46bd      	mov	sp, r7
    103a:	f85d 7b04 	ldr.w	r7, [sp], #4
    103e:	4770      	bx	lr

00001040 <RCC_ClearITPendingBit>:
  *
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
    1040:	b480      	push	{r7}
    1042:	b083      	sub	sp, #12
    1044:	af00      	add	r7, sp, #0
    1046:	4603      	mov	r3, r0
    1048:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
    104a:	f241 030a 	movw	r3, #4106	; 0x100a
    104e:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1052:	79fa      	ldrb	r2, [r7, #7]
    1054:	701a      	strb	r2, [r3, #0]
}
    1056:	370c      	adds	r7, #12
    1058:	46bd      	mov	sp, r7
    105a:	f85d 7b04 	ldr.w	r7, [sp], #4
    105e:	4770      	bx	lr

00001060 <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
    1060:	b580      	push	{r7, lr}
    1062:	b082      	sub	sp, #8
    1064:	af00      	add	r7, sp, #0
    1066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
    1068:	687a      	ldr	r2, [r7, #4]
    106a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    106e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1072:	429a      	cmp	r2, r3
    1074:	d108      	bne.n	1088 <GPIO_DeInit+0x28>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
    1076:	2004      	movs	r0, #4
    1078:	2101      	movs	r1, #1
    107a:	f7ff fef1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
    107e:	2004      	movs	r0, #4
    1080:	2100      	movs	r1, #0
    1082:	f7ff feed 	bl	e60 <RCC_APB2PeriphResetCmd>
    1086:	e060      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOB)
    1088:	687a      	ldr	r2, [r7, #4]
    108a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    108e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1092:	429a      	cmp	r2, r3
    1094:	d108      	bne.n	10a8 <GPIO_DeInit+0x48>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
    1096:	2008      	movs	r0, #8
    1098:	2101      	movs	r1, #1
    109a:	f7ff fee1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
    109e:	2008      	movs	r0, #8
    10a0:	2100      	movs	r1, #0
    10a2:	f7ff fedd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10a6:	e050      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOC)
    10a8:	687a      	ldr	r2, [r7, #4]
    10aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    10ae:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10b2:	429a      	cmp	r2, r3
    10b4:	d108      	bne.n	10c8 <GPIO_DeInit+0x68>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
    10b6:	2010      	movs	r0, #16
    10b8:	2101      	movs	r1, #1
    10ba:	f7ff fed1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
    10be:	2010      	movs	r0, #16
    10c0:	2100      	movs	r1, #0
    10c2:	f7ff fecd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10c6:	e040      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOD)
    10c8:	687a      	ldr	r2, [r7, #4]
    10ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    10ce:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10d2:	429a      	cmp	r2, r3
    10d4:	d108      	bne.n	10e8 <GPIO_DeInit+0x88>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
    10d6:	2020      	movs	r0, #32
    10d8:	2101      	movs	r1, #1
    10da:	f7ff fec1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
    10de:	2020      	movs	r0, #32
    10e0:	2100      	movs	r1, #0
    10e2:	f7ff febd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10e6:	e030      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOE)
    10e8:	687a      	ldr	r2, [r7, #4]
    10ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    10ee:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10f2:	429a      	cmp	r2, r3
    10f4:	d108      	bne.n	1108 <GPIO_DeInit+0xa8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
    10f6:	2040      	movs	r0, #64	; 0x40
    10f8:	2101      	movs	r1, #1
    10fa:	f7ff feb1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
    10fe:	2040      	movs	r0, #64	; 0x40
    1100:	2100      	movs	r1, #0
    1102:	f7ff fead 	bl	e60 <RCC_APB2PeriphResetCmd>
    1106:	e020      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOF)
    1108:	687a      	ldr	r2, [r7, #4]
    110a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
    110e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1112:	429a      	cmp	r2, r3
    1114:	d108      	bne.n	1128 <GPIO_DeInit+0xc8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
    1116:	2080      	movs	r0, #128	; 0x80
    1118:	2101      	movs	r1, #1
    111a:	f7ff fea1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
    111e:	2080      	movs	r0, #128	; 0x80
    1120:	2100      	movs	r1, #0
    1122:	f7ff fe9d 	bl	e60 <RCC_APB2PeriphResetCmd>
    1126:	e010      	b.n	114a <GPIO_DeInit+0xea>
  }
  else
  {
    if (GPIOx == GPIOG)
    1128:	687a      	ldr	r2, [r7, #4]
    112a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    112e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1132:	429a      	cmp	r2, r3
    1134:	d109      	bne.n	114a <GPIO_DeInit+0xea>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
    1136:	f44f 7080 	mov.w	r0, #256	; 0x100
    113a:	2101      	movs	r1, #1
    113c:	f7ff fe90 	bl	e60 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    1140:	f44f 7080 	mov.w	r0, #256	; 0x100
    1144:	2100      	movs	r1, #0
    1146:	f7ff fe8b 	bl	e60 <RCC_APB2PeriphResetCmd>
    }
  }
}
    114a:	3708      	adds	r7, #8
    114c:	46bd      	mov	sp, r7
    114e:	bd80      	pop	{r7, pc}

00001150 <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
    1150:	b580      	push	{r7, lr}
    1152:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
    1154:	2001      	movs	r0, #1
    1156:	2101      	movs	r1, #1
    1158:	f7ff fe82 	bl	e60 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
    115c:	2001      	movs	r0, #1
    115e:	2100      	movs	r1, #0
    1160:	f7ff fe7e 	bl	e60 <RCC_APB2PeriphResetCmd>
}
    1164:	bd80      	pop	{r7, pc}
    1166:	bf00      	nop

00001168 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
    1168:	b480      	push	{r7}
    116a:	b089      	sub	sp, #36	; 0x24
    116c:	af00      	add	r7, sp, #0
    116e:	6078      	str	r0, [r7, #4]
    1170:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
    1172:	2300      	movs	r3, #0
    1174:	61fb      	str	r3, [r7, #28]
    1176:	2300      	movs	r3, #0
    1178:	613b      	str	r3, [r7, #16]
    117a:	2300      	movs	r3, #0
    117c:	61bb      	str	r3, [r7, #24]
    117e:	2300      	movs	r3, #0
    1180:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
    1182:	2300      	movs	r3, #0
    1184:	617b      	str	r3, [r7, #20]
    1186:	2300      	movs	r3, #0
    1188:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));

/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
    118a:	683b      	ldr	r3, [r7, #0]
    118c:	78db      	ldrb	r3, [r3, #3]
    118e:	f003 030f 	and.w	r3, r3, #15
    1192:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
    1194:	683b      	ldr	r3, [r7, #0]
    1196:	78db      	ldrb	r3, [r3, #3]
    1198:	f003 0310 	and.w	r3, r3, #16
    119c:	2b00      	cmp	r3, #0
    119e:	d004      	beq.n	11aa <GPIO_Init+0x42>
  {
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
    11a0:	683b      	ldr	r3, [r7, #0]
    11a2:	789b      	ldrb	r3, [r3, #2]
    11a4:	69fa      	ldr	r2, [r7, #28]
    11a6:	4313      	orrs	r3, r2
    11a8:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
    11aa:	683b      	ldr	r3, [r7, #0]
    11ac:	881b      	ldrh	r3, [r3, #0]
    11ae:	b2db      	uxtb	r3, r3
    11b0:	2b00      	cmp	r3, #0
    11b2:	d044      	beq.n	123e <GPIO_Init+0xd6>
  {
    tmpreg = GPIOx->CRL;
    11b4:	687b      	ldr	r3, [r7, #4]
    11b6:	681b      	ldr	r3, [r3, #0]
    11b8:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    11ba:	2300      	movs	r3, #0
    11bc:	61bb      	str	r3, [r7, #24]
    11be:	e038      	b.n	1232 <GPIO_Init+0xca>
    {
      pos = ((uint32_t)0x01) << pinpos;
    11c0:	69bb      	ldr	r3, [r7, #24]
    11c2:	2201      	movs	r2, #1
    11c4:	fa02 f303 	lsl.w	r3, r2, r3
    11c8:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
    11ca:	683b      	ldr	r3, [r7, #0]
    11cc:	881b      	ldrh	r3, [r3, #0]
    11ce:	461a      	mov	r2, r3
    11d0:	68fb      	ldr	r3, [r7, #12]
    11d2:	4013      	ands	r3, r2
    11d4:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    11d6:	693a      	ldr	r2, [r7, #16]
    11d8:	68fb      	ldr	r3, [r7, #12]
    11da:	429a      	cmp	r2, r3
    11dc:	d126      	bne.n	122c <GPIO_Init+0xc4>
      {
        pos = pinpos << 2;
    11de:	69bb      	ldr	r3, [r7, #24]
    11e0:	009b      	lsls	r3, r3, #2
    11e2:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    11e4:	68fb      	ldr	r3, [r7, #12]
    11e6:	220f      	movs	r2, #15
    11e8:	fa02 f303 	lsl.w	r3, r2, r3
    11ec:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    11ee:	68bb      	ldr	r3, [r7, #8]
    11f0:	43db      	mvns	r3, r3
    11f2:	697a      	ldr	r2, [r7, #20]
    11f4:	4013      	ands	r3, r2
    11f6:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    11f8:	68fb      	ldr	r3, [r7, #12]
    11fa:	69fa      	ldr	r2, [r7, #28]
    11fc:	fa02 f303 	lsl.w	r3, r2, r3
    1200:	697a      	ldr	r2, [r7, #20]
    1202:	4313      	orrs	r3, r2
    1204:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    1206:	683b      	ldr	r3, [r7, #0]
    1208:	78db      	ldrb	r3, [r3, #3]
    120a:	2b28      	cmp	r3, #40	; 0x28
    120c:	d105      	bne.n	121a <GPIO_Init+0xb2>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
    120e:	69bb      	ldr	r3, [r7, #24]
    1210:	2201      	movs	r2, #1
    1212:	409a      	lsls	r2, r3
    1214:	687b      	ldr	r3, [r7, #4]
    1216:	615a      	str	r2, [r3, #20]
    1218:	e008      	b.n	122c <GPIO_Init+0xc4>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    121a:	683b      	ldr	r3, [r7, #0]
    121c:	78db      	ldrb	r3, [r3, #3]
    121e:	2b48      	cmp	r3, #72	; 0x48
    1220:	d104      	bne.n	122c <GPIO_Init+0xc4>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
    1222:	69bb      	ldr	r3, [r7, #24]
    1224:	2201      	movs	r2, #1
    1226:	409a      	lsls	r2, r3
    1228:	687b      	ldr	r3, [r7, #4]
    122a:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    122c:	69bb      	ldr	r3, [r7, #24]
    122e:	3301      	adds	r3, #1
    1230:	61bb      	str	r3, [r7, #24]
    1232:	69bb      	ldr	r3, [r7, #24]
    1234:	2b07      	cmp	r3, #7
    1236:	d9c3      	bls.n	11c0 <GPIO_Init+0x58>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
    1238:	687b      	ldr	r3, [r7, #4]
    123a:	697a      	ldr	r2, [r7, #20]
    123c:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
    123e:	683b      	ldr	r3, [r7, #0]
    1240:	881b      	ldrh	r3, [r3, #0]
    1242:	2bff      	cmp	r3, #255	; 0xff
    1244:	d946      	bls.n	12d4 <GPIO_Init+0x16c>
  {
    tmpreg = GPIOx->CRH;
    1246:	687b      	ldr	r3, [r7, #4]
    1248:	685b      	ldr	r3, [r3, #4]
    124a:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    124c:	2300      	movs	r3, #0
    124e:	61bb      	str	r3, [r7, #24]
    1250:	e03a      	b.n	12c8 <GPIO_Init+0x160>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
    1252:	69bb      	ldr	r3, [r7, #24]
    1254:	3308      	adds	r3, #8
    1256:	2201      	movs	r2, #1
    1258:	fa02 f303 	lsl.w	r3, r2, r3
    125c:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
    125e:	683b      	ldr	r3, [r7, #0]
    1260:	881b      	ldrh	r3, [r3, #0]
    1262:	461a      	mov	r2, r3
    1264:	68fb      	ldr	r3, [r7, #12]
    1266:	4013      	ands	r3, r2
    1268:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    126a:	693a      	ldr	r2, [r7, #16]
    126c:	68fb      	ldr	r3, [r7, #12]
    126e:	429a      	cmp	r2, r3
    1270:	d127      	bne.n	12c2 <GPIO_Init+0x15a>
      {
        pos = pinpos << 2;
    1272:	69bb      	ldr	r3, [r7, #24]
    1274:	009b      	lsls	r3, r3, #2
    1276:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    1278:	68fb      	ldr	r3, [r7, #12]
    127a:	220f      	movs	r2, #15
    127c:	fa02 f303 	lsl.w	r3, r2, r3
    1280:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    1282:	68bb      	ldr	r3, [r7, #8]
    1284:	43db      	mvns	r3, r3
    1286:	697a      	ldr	r2, [r7, #20]
    1288:	4013      	ands	r3, r2
    128a:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    128c:	68fb      	ldr	r3, [r7, #12]
    128e:	69fa      	ldr	r2, [r7, #28]
    1290:	fa02 f303 	lsl.w	r3, r2, r3
    1294:	697a      	ldr	r2, [r7, #20]
    1296:	4313      	orrs	r3, r2
    1298:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    129a:	683b      	ldr	r3, [r7, #0]
    129c:	78db      	ldrb	r3, [r3, #3]
    129e:	2b28      	cmp	r3, #40	; 0x28
    12a0:	d105      	bne.n	12ae <GPIO_Init+0x146>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12a2:	69bb      	ldr	r3, [r7, #24]
    12a4:	3308      	adds	r3, #8
    12a6:	2201      	movs	r2, #1
    12a8:	409a      	lsls	r2, r3
    12aa:	687b      	ldr	r3, [r7, #4]
    12ac:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    12ae:	683b      	ldr	r3, [r7, #0]
    12b0:	78db      	ldrb	r3, [r3, #3]
    12b2:	2b48      	cmp	r3, #72	; 0x48
    12b4:	d105      	bne.n	12c2 <GPIO_Init+0x15a>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12b6:	69bb      	ldr	r3, [r7, #24]
    12b8:	3308      	adds	r3, #8
    12ba:	2201      	movs	r2, #1
    12bc:	409a      	lsls	r2, r3
    12be:	687b      	ldr	r3, [r7, #4]
    12c0:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    12c2:	69bb      	ldr	r3, [r7, #24]
    12c4:	3301      	adds	r3, #1
    12c6:	61bb      	str	r3, [r7, #24]
    12c8:	69bb      	ldr	r3, [r7, #24]
    12ca:	2b07      	cmp	r3, #7
    12cc:	d9c1      	bls.n	1252 <GPIO_Init+0xea>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
    12ce:	687b      	ldr	r3, [r7, #4]
    12d0:	697a      	ldr	r2, [r7, #20]
    12d2:	605a      	str	r2, [r3, #4]
  }
}
    12d4:	3724      	adds	r7, #36	; 0x24
    12d6:	46bd      	mov	sp, r7
    12d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    12dc:	4770      	bx	lr
    12de:	bf00      	nop

000012e0 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
    12e0:	b480      	push	{r7}
    12e2:	b083      	sub	sp, #12
    12e4:	af00      	add	r7, sp, #0
    12e6:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
    12e8:	687b      	ldr	r3, [r7, #4]
    12ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
    12ee:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
    12f0:	687b      	ldr	r3, [r7, #4]
    12f2:	2202      	movs	r2, #2
    12f4:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
    12f6:	687b      	ldr	r3, [r7, #4]
    12f8:	2204      	movs	r2, #4
    12fa:	70da      	strb	r2, [r3, #3]
}
    12fc:	370c      	adds	r7, #12
    12fe:	46bd      	mov	sp, r7
    1300:	f85d 7b04 	ldr.w	r7, [sp], #4
    1304:	4770      	bx	lr
    1306:	bf00      	nop

00001308 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1308:	b480      	push	{r7}
    130a:	b085      	sub	sp, #20
    130c:	af00      	add	r7, sp, #0
    130e:	6078      	str	r0, [r7, #4]
    1310:	460b      	mov	r3, r1
    1312:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1314:	2300      	movs	r3, #0
    1316:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1318:	687b      	ldr	r3, [r7, #4]
    131a:	689a      	ldr	r2, [r3, #8]
    131c:	887b      	ldrh	r3, [r7, #2]
    131e:	4013      	ands	r3, r2
    1320:	2b00      	cmp	r3, #0
    1322:	d002      	beq.n	132a <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1324:	2301      	movs	r3, #1
    1326:	73fb      	strb	r3, [r7, #15]
    1328:	e001      	b.n	132e <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    132a:	2300      	movs	r3, #0
    132c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    132e:	7bfb      	ldrb	r3, [r7, #15]
}
    1330:	4618      	mov	r0, r3
    1332:	3714      	adds	r7, #20
    1334:	46bd      	mov	sp, r7
    1336:	f85d 7b04 	ldr.w	r7, [sp], #4
    133a:	4770      	bx	lr

0000133c <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
    133c:	b480      	push	{r7}
    133e:	b083      	sub	sp, #12
    1340:	af00      	add	r7, sp, #0
    1342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
    1344:	687b      	ldr	r3, [r7, #4]
    1346:	689b      	ldr	r3, [r3, #8]
    1348:	b29b      	uxth	r3, r3
}
    134a:	4618      	mov	r0, r3
    134c:	370c      	adds	r7, #12
    134e:	46bd      	mov	sp, r7
    1350:	f85d 7b04 	ldr.w	r7, [sp], #4
    1354:	4770      	bx	lr
    1356:	bf00      	nop

00001358 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1358:	b480      	push	{r7}
    135a:	b085      	sub	sp, #20
    135c:	af00      	add	r7, sp, #0
    135e:	6078      	str	r0, [r7, #4]
    1360:	460b      	mov	r3, r1
    1362:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1364:	2300      	movs	r3, #0
    1366:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1368:	687b      	ldr	r3, [r7, #4]
    136a:	68da      	ldr	r2, [r3, #12]
    136c:	887b      	ldrh	r3, [r7, #2]
    136e:	4013      	ands	r3, r2
    1370:	2b00      	cmp	r3, #0
    1372:	d002      	beq.n	137a <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1374:	2301      	movs	r3, #1
    1376:	73fb      	strb	r3, [r7, #15]
    1378:	e001      	b.n	137e <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    137a:	2300      	movs	r3, #0
    137c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    137e:	7bfb      	ldrb	r3, [r7, #15]
}
    1380:	4618      	mov	r0, r3
    1382:	3714      	adds	r7, #20
    1384:	46bd      	mov	sp, r7
    1386:	f85d 7b04 	ldr.w	r7, [sp], #4
    138a:	4770      	bx	lr

0000138c <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
    138c:	b480      	push	{r7}
    138e:	b083      	sub	sp, #12
    1390:	af00      	add	r7, sp, #0
    1392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
    1394:	687b      	ldr	r3, [r7, #4]
    1396:	68db      	ldr	r3, [r3, #12]
    1398:	b29b      	uxth	r3, r3
}
    139a:	4618      	mov	r0, r3
    139c:	370c      	adds	r7, #12
    139e:	46bd      	mov	sp, r7
    13a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    13a4:	4770      	bx	lr
    13a6:	bf00      	nop

000013a8 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13a8:	b480      	push	{r7}
    13aa:	b083      	sub	sp, #12
    13ac:	af00      	add	r7, sp, #0
    13ae:	6078      	str	r0, [r7, #4]
    13b0:	460b      	mov	r3, r1
    13b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
    13b4:	887a      	ldrh	r2, [r7, #2]
    13b6:	687b      	ldr	r3, [r7, #4]
    13b8:	611a      	str	r2, [r3, #16]
}
    13ba:	370c      	adds	r7, #12
    13bc:	46bd      	mov	sp, r7
    13be:	f85d 7b04 	ldr.w	r7, [sp], #4
    13c2:	4770      	bx	lr

000013c4 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13c4:	b480      	push	{r7}
    13c6:	b083      	sub	sp, #12
    13c8:	af00      	add	r7, sp, #0
    13ca:	6078      	str	r0, [r7, #4]
    13cc:	460b      	mov	r3, r1
    13ce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
    13d0:	887a      	ldrh	r2, [r7, #2]
    13d2:	687b      	ldr	r3, [r7, #4]
    13d4:	615a      	str	r2, [r3, #20]
}
    13d6:	370c      	adds	r7, #12
    13d8:	46bd      	mov	sp, r7
    13da:	f85d 7b04 	ldr.w	r7, [sp], #4
    13de:	4770      	bx	lr

000013e0 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
    13e0:	b480      	push	{r7}
    13e2:	b083      	sub	sp, #12
    13e4:	af00      	add	r7, sp, #0
    13e6:	6078      	str	r0, [r7, #4]
    13e8:	4613      	mov	r3, r2
    13ea:	460a      	mov	r2, r1
    13ec:	807a      	strh	r2, [r7, #2]
    13ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
    13f0:	787b      	ldrb	r3, [r7, #1]
    13f2:	2b00      	cmp	r3, #0
    13f4:	d003      	beq.n	13fe <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
    13f6:	887a      	ldrh	r2, [r7, #2]
    13f8:	687b      	ldr	r3, [r7, #4]
    13fa:	611a      	str	r2, [r3, #16]
    13fc:	e002      	b.n	1404 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
    13fe:	887a      	ldrh	r2, [r7, #2]
    1400:	687b      	ldr	r3, [r7, #4]
    1402:	615a      	str	r2, [r3, #20]
  }
}
    1404:	370c      	adds	r7, #12
    1406:	46bd      	mov	sp, r7
    1408:	f85d 7b04 	ldr.w	r7, [sp], #4
    140c:	4770      	bx	lr
    140e:	bf00      	nop

00001410 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
    1410:	b480      	push	{r7}
    1412:	b083      	sub	sp, #12
    1414:	af00      	add	r7, sp, #0
    1416:	6078      	str	r0, [r7, #4]
    1418:	460b      	mov	r3, r1
    141a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
    141c:	887a      	ldrh	r2, [r7, #2]
    141e:	687b      	ldr	r3, [r7, #4]
    1420:	60da      	str	r2, [r3, #12]
}
    1422:	370c      	adds	r7, #12
    1424:	46bd      	mov	sp, r7
    1426:	f85d 7b04 	ldr.w	r7, [sp], #4
    142a:	4770      	bx	lr

0000142c <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    142c:	b480      	push	{r7}
    142e:	b085      	sub	sp, #20
    1430:	af00      	add	r7, sp, #0
    1432:	6078      	str	r0, [r7, #4]
    1434:	460b      	mov	r3, r1
    1436:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0x00010000;
    1438:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    143c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
    143e:	887b      	ldrh	r3, [r7, #2]
    1440:	68fa      	ldr	r2, [r7, #12]
    1442:	4313      	orrs	r3, r2
    1444:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1446:	687b      	ldr	r3, [r7, #4]
    1448:	68fa      	ldr	r2, [r7, #12]
    144a:	619a      	str	r2, [r3, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
    144c:	887a      	ldrh	r2, [r7, #2]
    144e:	687b      	ldr	r3, [r7, #4]
    1450:	619a      	str	r2, [r3, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1452:	687b      	ldr	r3, [r7, #4]
    1454:	68fa      	ldr	r2, [r7, #12]
    1456:	619a      	str	r2, [r3, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    1458:	687b      	ldr	r3, [r7, #4]
    145a:	699b      	ldr	r3, [r3, #24]
    145c:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    145e:	687b      	ldr	r3, [r7, #4]
    1460:	699b      	ldr	r3, [r3, #24]
    1462:	60fb      	str	r3, [r7, #12]
}
    1464:	3714      	adds	r7, #20
    1466:	46bd      	mov	sp, r7
    1468:	f85d 7b04 	ldr.w	r7, [sp], #4
    146c:	4770      	bx	lr
    146e:	bf00      	nop

00001470 <GPIO_EventOutputConfig>:
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    1470:	b480      	push	{r7}
    1472:	b085      	sub	sp, #20
    1474:	af00      	add	r7, sp, #0
    1476:	4602      	mov	r2, r0
    1478:	460b      	mov	r3, r1
    147a:	71fa      	strb	r2, [r7, #7]
    147c:	71bb      	strb	r3, [r7, #6]
  uint32_t tmpreg = 0x00;
    147e:	2300      	movs	r3, #0
    1480:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmpreg = AFIO->EVCR;
    1482:	2300      	movs	r3, #0
    1484:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1488:	681b      	ldr	r3, [r3, #0]
    148a:	60fb      	str	r3, [r7, #12]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
    148c:	68fa      	ldr	r2, [r7, #12]
    148e:	f64f 7380 	movw	r3, #65408	; 0xff80
    1492:	4013      	ands	r3, r2
    1494:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
    1496:	79fb      	ldrb	r3, [r7, #7]
    1498:	011b      	lsls	r3, r3, #4
    149a:	68fa      	ldr	r2, [r7, #12]
    149c:	4313      	orrs	r3, r2
    149e:	60fb      	str	r3, [r7, #12]
  tmpreg |= GPIO_PinSource;
    14a0:	79bb      	ldrb	r3, [r7, #6]
    14a2:	68fa      	ldr	r2, [r7, #12]
    14a4:	4313      	orrs	r3, r2
    14a6:	60fb      	str	r3, [r7, #12]
  AFIO->EVCR = tmpreg;
    14a8:	2300      	movs	r3, #0
    14aa:	f2c4 0301 	movt	r3, #16385	; 0x4001
    14ae:	68fa      	ldr	r2, [r7, #12]
    14b0:	601a      	str	r2, [r3, #0]
}
    14b2:	3714      	adds	r7, #20
    14b4:	46bd      	mov	sp, r7
    14b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    14ba:	4770      	bx	lr

000014bc <GPIO_EventOutputCmd>:
  * @param  NewState: new state of the Event output.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_EventOutputCmd(FunctionalState NewState)
{
    14bc:	b480      	push	{r7}
    14be:	b083      	sub	sp, #12
    14c0:	af00      	add	r7, sp, #0
    14c2:	4603      	mov	r3, r0
    14c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
    14c6:	231c      	movs	r3, #28
    14c8:	f2c4 2320 	movt	r3, #16928	; 0x4220
    14cc:	79fa      	ldrb	r2, [r7, #7]
    14ce:	601a      	str	r2, [r3, #0]
}
    14d0:	370c      	adds	r7, #12
    14d2:	46bd      	mov	sp, r7
    14d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    14d8:	4770      	bx	lr
    14da:	bf00      	nop

000014dc <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
    14dc:	b480      	push	{r7}
    14de:	b087      	sub	sp, #28
    14e0:	af00      	add	r7, sp, #0
    14e2:	6078      	str	r0, [r7, #4]
    14e4:	460b      	mov	r3, r1
    14e6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
    14e8:	2300      	movs	r3, #0
    14ea:	613b      	str	r3, [r7, #16]
    14ec:	2300      	movs	r3, #0
    14ee:	60fb      	str	r3, [r7, #12]
    14f0:	2300      	movs	r3, #0
    14f2:	617b      	str	r3, [r7, #20]
    14f4:	2300      	movs	r3, #0
    14f6:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    14f8:	687b      	ldr	r3, [r7, #4]
    14fa:	2b00      	cmp	r3, #0
    14fc:	da05      	bge.n	150a <GPIO_PinRemapConfig+0x2e>
  {
    tmpreg = AFIO->MAPR2;
    14fe:	2300      	movs	r3, #0
    1500:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1504:	69db      	ldr	r3, [r3, #28]
    1506:	617b      	str	r3, [r7, #20]
    1508:	e004      	b.n	1514 <GPIO_PinRemapConfig+0x38>
  }
  else
  {
    tmpreg = AFIO->MAPR;
    150a:	2300      	movs	r3, #0
    150c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1510:	685b      	ldr	r3, [r3, #4]
    1512:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
    1514:	687b      	ldr	r3, [r7, #4]
    1516:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    151a:	0c1b      	lsrs	r3, r3, #16
    151c:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
    151e:	687b      	ldr	r3, [r7, #4]
    1520:	b29b      	uxth	r3, r3
    1522:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
    1524:	687b      	ldr	r3, [r7, #4]
    1526:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    152a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
    152e:	d10e      	bne.n	154e <GPIO_PinRemapConfig+0x72>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    1530:	697b      	ldr	r3, [r7, #20]
    1532:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    1536:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
    1538:	2300      	movs	r3, #0
    153a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    153e:	2200      	movs	r2, #0
    1540:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1544:	6852      	ldr	r2, [r2, #4]
    1546:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
    154a:	605a      	str	r2, [r3, #4]
    154c:	e021      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
    154e:	687b      	ldr	r3, [r7, #4]
    1550:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    1554:	2b00      	cmp	r3, #0
    1556:	d00e      	beq.n	1576 <GPIO_PinRemapConfig+0x9a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
    1558:	68bb      	ldr	r3, [r7, #8]
    155a:	2203      	movs	r2, #3
    155c:	fa02 f303 	lsl.w	r3, r2, r3
    1560:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
    1562:	68fb      	ldr	r3, [r7, #12]
    1564:	43db      	mvns	r3, r3
    1566:	697a      	ldr	r2, [r7, #20]
    1568:	4013      	ands	r3, r2
    156a:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    156c:	697b      	ldr	r3, [r7, #20]
    156e:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1572:	617b      	str	r3, [r7, #20]
    1574:	e00d      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    1576:	687b      	ldr	r3, [r7, #4]
    1578:	0d5b      	lsrs	r3, r3, #21
    157a:	011b      	lsls	r3, r3, #4
    157c:	693a      	ldr	r2, [r7, #16]
    157e:	fa02 f303 	lsl.w	r3, r2, r3
    1582:	43db      	mvns	r3, r3
    1584:	697a      	ldr	r2, [r7, #20]
    1586:	4013      	ands	r3, r2
    1588:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    158a:	697b      	ldr	r3, [r7, #20]
    158c:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1590:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
    1592:	78fb      	ldrb	r3, [r7, #3]
    1594:	2b00      	cmp	r3, #0
    1596:	d008      	beq.n	15aa <GPIO_PinRemapConfig+0xce>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
    1598:	687b      	ldr	r3, [r7, #4]
    159a:	0d5b      	lsrs	r3, r3, #21
    159c:	011b      	lsls	r3, r3, #4
    159e:	693a      	ldr	r2, [r7, #16]
    15a0:	fa02 f303 	lsl.w	r3, r2, r3
    15a4:	697a      	ldr	r2, [r7, #20]
    15a6:	4313      	orrs	r3, r2
    15a8:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    15aa:	687b      	ldr	r3, [r7, #4]
    15ac:	2b00      	cmp	r3, #0
    15ae:	da05      	bge.n	15bc <GPIO_PinRemapConfig+0xe0>
  {
    AFIO->MAPR2 = tmpreg;
    15b0:	2300      	movs	r3, #0
    15b2:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15b6:	697a      	ldr	r2, [r7, #20]
    15b8:	61da      	str	r2, [r3, #28]
    15ba:	e004      	b.n	15c6 <GPIO_PinRemapConfig+0xea>
  }
  else
  {
    AFIO->MAPR = tmpreg;
    15bc:	2300      	movs	r3, #0
    15be:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15c2:	697a      	ldr	r2, [r7, #20]
    15c4:	605a      	str	r2, [r3, #4]
  }
}
    15c6:	371c      	adds	r7, #28
    15c8:	46bd      	mov	sp, r7
    15ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    15ce:	4770      	bx	lr

000015d0 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    15d0:	b490      	push	{r4, r7}
    15d2:	b084      	sub	sp, #16
    15d4:	af00      	add	r7, sp, #0
    15d6:	4602      	mov	r2, r0
    15d8:	460b      	mov	r3, r1
    15da:	71fa      	strb	r2, [r7, #7]
    15dc:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
    15de:	2300      	movs	r3, #0
    15e0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
    15e2:	79bb      	ldrb	r3, [r7, #6]
    15e4:	f003 0303 	and.w	r3, r3, #3
    15e8:	009b      	lsls	r3, r3, #2
    15ea:	220f      	movs	r2, #15
    15ec:	fa02 f303 	lsl.w	r3, r2, r3
    15f0:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
    15f2:	2300      	movs	r3, #0
    15f4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15f8:	79ba      	ldrb	r2, [r7, #6]
    15fa:	0892      	lsrs	r2, r2, #2
    15fc:	b2d2      	uxtb	r2, r2
    15fe:	4610      	mov	r0, r2
    1600:	2200      	movs	r2, #0
    1602:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1606:	79b9      	ldrb	r1, [r7, #6]
    1608:	0889      	lsrs	r1, r1, #2
    160a:	b2c9      	uxtb	r1, r1
    160c:	3102      	adds	r1, #2
    160e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    1612:	68fa      	ldr	r2, [r7, #12]
    1614:	43d2      	mvns	r2, r2
    1616:	4011      	ands	r1, r2
    1618:	1c82      	adds	r2, r0, #2
    161a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
    161e:	2300      	movs	r3, #0
    1620:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1624:	79ba      	ldrb	r2, [r7, #6]
    1626:	0892      	lsrs	r2, r2, #2
    1628:	b2d2      	uxtb	r2, r2
    162a:	4610      	mov	r0, r2
    162c:	2200      	movs	r2, #0
    162e:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1632:	79b9      	ldrb	r1, [r7, #6]
    1634:	0889      	lsrs	r1, r1, #2
    1636:	b2c9      	uxtb	r1, r1
    1638:	3102      	adds	r1, #2
    163a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    163e:	79fc      	ldrb	r4, [r7, #7]
    1640:	79ba      	ldrb	r2, [r7, #6]
    1642:	f002 0203 	and.w	r2, r2, #3
    1646:	0092      	lsls	r2, r2, #2
    1648:	fa04 f202 	lsl.w	r2, r4, r2
    164c:	4311      	orrs	r1, r2
    164e:	1c82      	adds	r2, r0, #2
    1650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    1654:	3710      	adds	r7, #16
    1656:	46bd      	mov	sp, r7
    1658:	bc90      	pop	{r4, r7}
    165a:	4770      	bx	lr

0000165c <GPIO_ETH_MediaInterfaceConfig>:
  *     @arg GPIO_ETH_MediaInterface_MII: MII mode
  *     @arg GPIO_ETH_MediaInterface_RMII: RMII mode
  * @retval None
  */
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface)
{
    165c:	b480      	push	{r7}
    165e:	b083      	sub	sp, #12
    1660:	af00      	add	r7, sp, #0
    1662:	6078      	str	r0, [r7, #4]
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface));

  /* Configure MII_RMII selection bit */
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface;
    1664:	23dc      	movs	r3, #220	; 0xdc
    1666:	f2c4 2320 	movt	r3, #16928	; 0x4220
    166a:	687a      	ldr	r2, [r7, #4]
    166c:	601a      	str	r2, [r3, #0]
}
    166e:	370c      	adds	r7, #12
    1670:	46bd      	mov	sp, r7
    1672:	f85d 7b04 	ldr.w	r7, [sp], #4
    1676:	4770      	bx	lr

00001678 <USART_DeInit>:
  *   This parameter can be one of the following values:
  *      USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
    1678:	b580      	push	{r7, lr}
    167a:	b082      	sub	sp, #8
    167c:	af00      	add	r7, sp, #0
    167e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
    1680:	687a      	ldr	r2, [r7, #4]
    1682:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    1686:	f2c4 0301 	movt	r3, #16385	; 0x4001
    168a:	429a      	cmp	r2, r3
    168c:	d10a      	bne.n	16a4 <USART_DeInit+0x2c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    168e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    1692:	2101      	movs	r1, #1
    1694:	f7ff fbe4 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
    1698:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    169c:	2100      	movs	r1, #0
    169e:	f7ff fbdf 	bl	e60 <RCC_APB2PeriphResetCmd>
    16a2:	e046      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART2)
    16a4:	687a      	ldr	r2, [r7, #4]
    16a6:	f44f 4388 	mov.w	r3, #17408	; 0x4400
    16aa:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16ae:	429a      	cmp	r2, r3
    16b0:	d10a      	bne.n	16c8 <USART_DeInit+0x50>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    16b2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16b6:	2101      	movs	r1, #1
    16b8:	f7ff fbfa 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
    16bc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16c0:	2100      	movs	r1, #0
    16c2:	f7ff fbf5 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16c6:	e034      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART3)
    16c8:	687a      	ldr	r2, [r7, #4]
    16ca:	f44f 4390 	mov.w	r3, #18432	; 0x4800
    16ce:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16d2:	429a      	cmp	r2, r3
    16d4:	d10a      	bne.n	16ec <USART_DeInit+0x74>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    16d6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16da:	2101      	movs	r1, #1
    16dc:	f7ff fbe8 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
    16e0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16e4:	2100      	movs	r1, #0
    16e6:	f7ff fbe3 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16ea:	e022      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == UART4)
    16ec:	687a      	ldr	r2, [r7, #4]
    16ee:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
    16f2:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16f6:	429a      	cmp	r2, r3
    16f8:	d10a      	bne.n	1710 <USART_DeInit+0x98>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    16fa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    16fe:	2101      	movs	r1, #1
    1700:	f7ff fbd6 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
    1704:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1708:	2100      	movs	r1, #0
    170a:	f7ff fbd1 	bl	eb0 <RCC_APB1PeriphResetCmd>
    170e:	e010      	b.n	1732 <USART_DeInit+0xba>
  }
  else
  {
    if (USARTx == UART5)
    1710:	687a      	ldr	r2, [r7, #4]
    1712:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    1716:	f2c4 0300 	movt	r3, #16384	; 0x4000
    171a:	429a      	cmp	r2, r3
    171c:	d109      	bne.n	1732 <USART_DeInit+0xba>
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    171e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    1722:	2101      	movs	r1, #1
    1724:	f7ff fbc4 	bl	eb0 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    1728:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    172c:	2100      	movs	r1, #0
    172e:	f7ff fbbf 	bl	eb0 <RCC_APB1PeriphResetCmd>
    }
  }
}
    1732:	3708      	adds	r7, #8
    1734:	46bd      	mov	sp, r7
    1736:	bd80      	pop	{r7, pc}

00001738 <USART_Init>:
  *         that contains the configuration information for the specified USART
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
    1738:	b580      	push	{r7, lr}
    173a:	b08c      	sub	sp, #48	; 0x30
    173c:	af00      	add	r7, sp, #0
    173e:	6078      	str	r0, [r7, #4]
    1740:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
    1742:	2300      	movs	r3, #0
    1744:	62fb      	str	r3, [r7, #44]	; 0x2c
    1746:	2300      	movs	r3, #0
    1748:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
    174a:	2300      	movs	r3, #0
    174c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
    174e:	2300      	movs	r3, #0
    1750:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
    1752:	2300      	movs	r3, #0
    1754:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    1756:	687b      	ldr	r3, [r7, #4]
    1758:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    175a:	687b      	ldr	r3, [r7, #4]
    175c:	8a1b      	ldrh	r3, [r3, #16]
    175e:	b29b      	uxth	r3, r3
    1760:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
    1762:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1764:	f64c 73ff 	movw	r3, #53247	; 0xcfff
    1768:	4013      	ands	r3, r2
    176a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
    176c:	683b      	ldr	r3, [r7, #0]
    176e:	88db      	ldrh	r3, [r3, #6]
    1770:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1772:	4313      	orrs	r3, r2
    1774:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1778:	b29a      	uxth	r2, r3
    177a:	687b      	ldr	r3, [r7, #4]
    177c:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
    177e:	687b      	ldr	r3, [r7, #4]
    1780:	899b      	ldrh	r3, [r3, #12]
    1782:	b29b      	uxth	r3, r3
    1784:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
    1786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1788:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
    178c:	4013      	ands	r3, r2
    178e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    1790:	683b      	ldr	r3, [r7, #0]
    1792:	889a      	ldrh	r2, [r3, #4]
    1794:	683b      	ldr	r3, [r7, #0]
    1796:	891b      	ldrh	r3, [r3, #8]
    1798:	4313      	orrs	r3, r2
    179a:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
    179c:	683b      	ldr	r3, [r7, #0]
    179e:	895b      	ldrh	r3, [r3, #10]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    17a0:	4313      	orrs	r3, r2
    17a2:	b29b      	uxth	r3, r3
    17a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17a6:	4313      	orrs	r3, r2
    17a8:	62fb      	str	r3, [r7, #44]	; 0x2c
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
    17aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17ac:	b29a      	uxth	r2, r3
    17ae:	687b      	ldr	r3, [r7, #4]
    17b0:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/
  tmpreg = USARTx->CR3;
    17b2:	687b      	ldr	r3, [r7, #4]
    17b4:	8a9b      	ldrh	r3, [r3, #20]
    17b6:	b29b      	uxth	r3, r3
    17b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
    17ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17bc:	f64f 43ff 	movw	r3, #64767	; 0xfcff
    17c0:	4013      	ands	r3, r2
    17c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
    17c4:	683b      	ldr	r3, [r7, #0]
    17c6:	899b      	ldrh	r3, [r3, #12]
    17c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17ca:	4313      	orrs	r3, r2
    17cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
    17ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17d0:	b29a      	uxth	r2, r3
    17d2:	687b      	ldr	r3, [r7, #4]
    17d4:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
    17d6:	f107 0308 	add.w	r3, r7, #8
    17da:	4618      	mov	r0, r3
    17dc:	f7ff f9ea 	bl	bb4 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
    17e0:	69fa      	ldr	r2, [r7, #28]
    17e2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    17e6:	f2c4 0301 	movt	r3, #16385	; 0x4001
    17ea:	429a      	cmp	r2, r3
    17ec:	d102      	bne.n	17f4 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
    17ee:	697b      	ldr	r3, [r7, #20]
    17f0:	62bb      	str	r3, [r7, #40]	; 0x28
    17f2:	e001      	b.n	17f8 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
    17f4:	693b      	ldr	r3, [r7, #16]
    17f6:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    17f8:	687b      	ldr	r3, [r7, #4]
    17fa:	899b      	ldrh	r3, [r3, #12]
    17fc:	b29b      	uxth	r3, r3
    17fe:	b29b      	uxth	r3, r3
    1800:	b21b      	sxth	r3, r3
    1802:	2b00      	cmp	r3, #0
    1804:	da0c      	bge.n	1820 <USART_Init+0xe8>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));
    1806:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1808:	4613      	mov	r3, r2
    180a:	009b      	lsls	r3, r3, #2
    180c:	4413      	add	r3, r2
    180e:	009a      	lsls	r2, r3, #2
    1810:	441a      	add	r2, r3
    1812:	683b      	ldr	r3, [r7, #0]
    1814:	681b      	ldr	r3, [r3, #0]
    1816:	005b      	lsls	r3, r3, #1
    1818:	fbb2 f3f3 	udiv	r3, r2, r3
    181c:	627b      	str	r3, [r7, #36]	; 0x24
    181e:	e00b      	b.n	1838 <USART_Init+0x100>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));
    1820:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1822:	4613      	mov	r3, r2
    1824:	009b      	lsls	r3, r3, #2
    1826:	4413      	add	r3, r2
    1828:	009a      	lsls	r2, r3, #2
    182a:	441a      	add	r2, r3
    182c:	683b      	ldr	r3, [r7, #0]
    182e:	681b      	ldr	r3, [r3, #0]
    1830:	009b      	lsls	r3, r3, #2
    1832:	fbb2 f3f3 	udiv	r3, r2, r3
    1836:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
    1838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    183a:	f248 531f 	movw	r3, #34079	; 0x851f
    183e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    1842:	fba3 1302 	umull	r1, r3, r3, r2
    1846:	095b      	lsrs	r3, r3, #5
    1848:	011b      	lsls	r3, r3, #4
    184a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
    184c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    184e:	091b      	lsrs	r3, r3, #4
    1850:	2264      	movs	r2, #100	; 0x64
    1852:	fb02 f303 	mul.w	r3, r2, r3
    1856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1858:	1ad3      	subs	r3, r2, r3
    185a:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    185c:	687b      	ldr	r3, [r7, #4]
    185e:	899b      	ldrh	r3, [r3, #12]
    1860:	b29b      	uxth	r3, r3
    1862:	b29b      	uxth	r3, r3
    1864:	b21b      	sxth	r3, r3
    1866:	2b00      	cmp	r3, #0
    1868:	da10      	bge.n	188c <USART_Init+0x154>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
    186a:	6a3b      	ldr	r3, [r7, #32]
    186c:	00db      	lsls	r3, r3, #3
    186e:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1872:	f248 531f 	movw	r3, #34079	; 0x851f
    1876:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    187a:	fba3 1302 	umull	r1, r3, r3, r2
    187e:	095b      	lsrs	r3, r3, #5
    1880:	f003 0307 	and.w	r3, r3, #7
    1884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1886:	4313      	orrs	r3, r2
    1888:	62fb      	str	r3, [r7, #44]	; 0x2c
    188a:	e00f      	b.n	18ac <USART_Init+0x174>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
    188c:	6a3b      	ldr	r3, [r7, #32]
    188e:	011b      	lsls	r3, r3, #4
    1890:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1894:	f248 531f 	movw	r3, #34079	; 0x851f
    1898:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    189c:	fba3 1302 	umull	r1, r3, r3, r2
    18a0:	095b      	lsrs	r3, r3, #5
    18a2:	f003 030f 	and.w	r3, r3, #15
    18a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    18a8:	4313      	orrs	r3, r2
    18aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
    18ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    18ae:	b29a      	uxth	r2, r3
    18b0:	687b      	ldr	r3, [r7, #4]
    18b2:	811a      	strh	r2, [r3, #8]
}
    18b4:	3730      	adds	r7, #48	; 0x30
    18b6:	46bd      	mov	sp, r7
    18b8:	bd80      	pop	{r7, pc}
    18ba:	bf00      	nop

000018bc <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
    18bc:	b480      	push	{r7}
    18be:	b083      	sub	sp, #12
    18c0:	af00      	add	r7, sp, #0
    18c2:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
    18c4:	687b      	ldr	r3, [r7, #4]
    18c6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
    18ca:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
    18cc:	687b      	ldr	r3, [r7, #4]
    18ce:	2200      	movs	r2, #0
    18d0:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
    18d2:	687b      	ldr	r3, [r7, #4]
    18d4:	2200      	movs	r2, #0
    18d6:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
    18d8:	687b      	ldr	r3, [r7, #4]
    18da:	2200      	movs	r2, #0
    18dc:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    18de:	687b      	ldr	r3, [r7, #4]
    18e0:	220c      	movs	r2, #12
    18e2:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    18e4:	687b      	ldr	r3, [r7, #4]
    18e6:	2200      	movs	r2, #0
    18e8:	819a      	strh	r2, [r3, #12]
}
    18ea:	370c      	adds	r7, #12
    18ec:	46bd      	mov	sp, r7
    18ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    18f2:	4770      	bx	lr

000018f4 <USART_ClockInit>:
  *         USART peripheral.
  * @note The Smart Card and Synchronous modes are not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    18f4:	b480      	push	{r7}
    18f6:	b085      	sub	sp, #20
    18f8:	af00      	add	r7, sp, #0
    18fa:	6078      	str	r0, [r7, #4]
    18fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
    18fe:	2300      	movs	r3, #0
    1900:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    1902:	687b      	ldr	r3, [r7, #4]
    1904:	8a1b      	ldrh	r3, [r3, #16]
    1906:	b29b      	uxth	r3, r3
    1908:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
    190a:	68fa      	ldr	r2, [r7, #12]
    190c:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
    1910:	4013      	ands	r3, r2
    1912:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1914:	683b      	ldr	r3, [r7, #0]
    1916:	881a      	ldrh	r2, [r3, #0]
    1918:	683b      	ldr	r3, [r7, #0]
    191a:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
    191c:	4313      	orrs	r3, r2
    191e:	b29a      	uxth	r2, r3
    1920:	683b      	ldr	r3, [r7, #0]
    1922:	889b      	ldrh	r3, [r3, #4]
    1924:	4313      	orrs	r3, r2
    1926:	b29a      	uxth	r2, r3
    1928:	683b      	ldr	r3, [r7, #0]
    192a:	88db      	ldrh	r3, [r3, #6]
    192c:	4313      	orrs	r3, r2
    192e:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1930:	68fa      	ldr	r2, [r7, #12]
    1932:	4313      	orrs	r3, r2
    1934:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1936:	68fb      	ldr	r3, [r7, #12]
    1938:	b29a      	uxth	r2, r3
    193a:	687b      	ldr	r3, [r7, #4]
    193c:	821a      	strh	r2, [r3, #16]
}
    193e:	3714      	adds	r7, #20
    1940:	46bd      	mov	sp, r7
    1942:	f85d 7b04 	ldr.w	r7, [sp], #4
    1946:	4770      	bx	lr

00001948 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    1948:	b480      	push	{r7}
    194a:	b083      	sub	sp, #12
    194c:	af00      	add	r7, sp, #0
    194e:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
    1950:	687b      	ldr	r3, [r7, #4]
    1952:	2200      	movs	r2, #0
    1954:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
    1956:	687b      	ldr	r3, [r7, #4]
    1958:	2200      	movs	r2, #0
    195a:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
    195c:	687b      	ldr	r3, [r7, #4]
    195e:	2200      	movs	r2, #0
    1960:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
    1962:	687b      	ldr	r3, [r7, #4]
    1964:	2200      	movs	r2, #0
    1966:	80da      	strh	r2, [r3, #6]
}
    1968:	370c      	adds	r7, #12
    196a:	46bd      	mov	sp, r7
    196c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1970:	4770      	bx	lr
    1972:	bf00      	nop

00001974 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1974:	b480      	push	{r7}
    1976:	b083      	sub	sp, #12
    1978:	af00      	add	r7, sp, #0
    197a:	6078      	str	r0, [r7, #4]
    197c:	460b      	mov	r3, r1
    197e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1980:	78fb      	ldrb	r3, [r7, #3]
    1982:	2b00      	cmp	r3, #0
    1984:	d008      	beq.n	1998 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
    1986:	687b      	ldr	r3, [r7, #4]
    1988:	899b      	ldrh	r3, [r3, #12]
    198a:	b29b      	uxth	r3, r3
    198c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1990:	b29a      	uxth	r2, r3
    1992:	687b      	ldr	r3, [r7, #4]
    1994:	819a      	strh	r2, [r3, #12]
    1996:	e007      	b.n	19a8 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
    1998:	687b      	ldr	r3, [r7, #4]
    199a:	899b      	ldrh	r3, [r3, #12]
    199c:	b29b      	uxth	r3, r3
    199e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    19a2:	b29a      	uxth	r2, r3
    19a4:	687b      	ldr	r3, [r7, #4]
    19a6:	819a      	strh	r2, [r3, #12]
  }
}
    19a8:	370c      	adds	r7, #12
    19aa:	46bd      	mov	sp, r7
    19ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    19b0:	4770      	bx	lr
    19b2:	bf00      	nop

000019b4 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
    19b4:	b480      	push	{r7}
    19b6:	b087      	sub	sp, #28
    19b8:	af00      	add	r7, sp, #0
    19ba:	6078      	str	r0, [r7, #4]
    19bc:	4613      	mov	r3, r2
    19be:	460a      	mov	r2, r1
    19c0:	807a      	strh	r2, [r7, #2]
    19c2:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
    19c4:	2300      	movs	r3, #0
    19c6:	613b      	str	r3, [r7, #16]
    19c8:	2300      	movs	r3, #0
    19ca:	60fb      	str	r3, [r7, #12]
    19cc:	2300      	movs	r3, #0
    19ce:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
    19d0:	2300      	movs	r3, #0
    19d2:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    19d4:	687b      	ldr	r3, [r7, #4]
    19d6:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    19d8:	887b      	ldrh	r3, [r7, #2]
    19da:	b2db      	uxtb	r3, r3
    19dc:	095b      	lsrs	r3, r3, #5
    19de:	b2db      	uxtb	r3, r3
    19e0:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
    19e2:	887b      	ldrh	r3, [r7, #2]
    19e4:	f003 031f 	and.w	r3, r3, #31
    19e8:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
    19ea:	68fb      	ldr	r3, [r7, #12]
    19ec:	2201      	movs	r2, #1
    19ee:	fa02 f303 	lsl.w	r3, r2, r3
    19f2:	60bb      	str	r3, [r7, #8]

  if (usartreg == 0x01) /* The IT is in CR1 register */
    19f4:	693b      	ldr	r3, [r7, #16]
    19f6:	2b01      	cmp	r3, #1
    19f8:	d103      	bne.n	1a02 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
    19fa:	697b      	ldr	r3, [r7, #20]
    19fc:	330c      	adds	r3, #12
    19fe:	617b      	str	r3, [r7, #20]
    1a00:	e009      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
    1a02:	693b      	ldr	r3, [r7, #16]
    1a04:	2b02      	cmp	r3, #2
    1a06:	d103      	bne.n	1a10 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
    1a08:	697b      	ldr	r3, [r7, #20]
    1a0a:	3310      	adds	r3, #16
    1a0c:	617b      	str	r3, [r7, #20]
    1a0e:	e002      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14;
    1a10:	697b      	ldr	r3, [r7, #20]
    1a12:	3314      	adds	r3, #20
    1a14:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
    1a16:	787b      	ldrb	r3, [r7, #1]
    1a18:	2b00      	cmp	r3, #0
    1a1a:	d006      	beq.n	1a2a <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
    1a1c:	697b      	ldr	r3, [r7, #20]
    1a1e:	697a      	ldr	r2, [r7, #20]
    1a20:	6811      	ldr	r1, [r2, #0]
    1a22:	68ba      	ldr	r2, [r7, #8]
    1a24:	430a      	orrs	r2, r1
    1a26:	601a      	str	r2, [r3, #0]
    1a28:	e006      	b.n	1a38 <USART_ITConfig+0x84>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
    1a2a:	697b      	ldr	r3, [r7, #20]
    1a2c:	697a      	ldr	r2, [r7, #20]
    1a2e:	6811      	ldr	r1, [r2, #0]
    1a30:	68ba      	ldr	r2, [r7, #8]
    1a32:	43d2      	mvns	r2, r2
    1a34:	400a      	ands	r2, r1
    1a36:	601a      	str	r2, [r3, #0]
  }
}
    1a38:	371c      	adds	r7, #28
    1a3a:	46bd      	mov	sp, r7
    1a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a40:	4770      	bx	lr
    1a42:	bf00      	nop

00001a44 <USART_DMACmd>:
  * @note The DMA mode is not available for UART5 except in the STM32
  *       High density value line devices(STM32F10X_HD_VL).
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
    1a44:	b480      	push	{r7}
    1a46:	b083      	sub	sp, #12
    1a48:	af00      	add	r7, sp, #0
    1a4a:	6078      	str	r0, [r7, #4]
    1a4c:	4613      	mov	r3, r2
    1a4e:	460a      	mov	r2, r1
    1a50:	807a      	strh	r2, [r7, #2]
    1a52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1a54:	787b      	ldrb	r3, [r7, #1]
    1a56:	2b00      	cmp	r3, #0
    1a58:	d008      	beq.n	1a6c <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
    1a5a:	687b      	ldr	r3, [r7, #4]
    1a5c:	8a9b      	ldrh	r3, [r3, #20]
    1a5e:	b29a      	uxth	r2, r3
    1a60:	887b      	ldrh	r3, [r7, #2]
    1a62:	4313      	orrs	r3, r2
    1a64:	b29a      	uxth	r2, r3
    1a66:	687b      	ldr	r3, [r7, #4]
    1a68:	829a      	strh	r2, [r3, #20]
    1a6a:	e009      	b.n	1a80 <USART_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
    1a6c:	687b      	ldr	r3, [r7, #4]
    1a6e:	8a9b      	ldrh	r3, [r3, #20]
    1a70:	b29a      	uxth	r2, r3
    1a72:	887b      	ldrh	r3, [r7, #2]
    1a74:	43db      	mvns	r3, r3
    1a76:	b29b      	uxth	r3, r3
    1a78:	4013      	ands	r3, r2
    1a7a:	b29a      	uxth	r2, r3
    1a7c:	687b      	ldr	r3, [r7, #4]
    1a7e:	829a      	strh	r2, [r3, #20]
  }
}
    1a80:	370c      	adds	r7, #12
    1a82:	46bd      	mov	sp, r7
    1a84:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a88:	4770      	bx	lr
    1a8a:	bf00      	nop

00001a8c <USART_SetAddress>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
    1a8c:	b480      	push	{r7}
    1a8e:	b083      	sub	sp, #12
    1a90:	af00      	add	r7, sp, #0
    1a92:	6078      	str	r0, [r7, #4]
    1a94:	460b      	mov	r3, r1
    1a96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address));

  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
    1a98:	687b      	ldr	r3, [r7, #4]
    1a9a:	8a1b      	ldrh	r3, [r3, #16]
    1a9c:	b29b      	uxth	r3, r3
    1a9e:	f023 030f 	bic.w	r3, r3, #15
    1aa2:	b29a      	uxth	r2, r3
    1aa4:	687b      	ldr	r3, [r7, #4]
    1aa6:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
    1aa8:	687b      	ldr	r3, [r7, #4]
    1aaa:	8a1b      	ldrh	r3, [r3, #16]
    1aac:	b29a      	uxth	r2, r3
    1aae:	78fb      	ldrb	r3, [r7, #3]
    1ab0:	b29b      	uxth	r3, r3
    1ab2:	4313      	orrs	r3, r2
    1ab4:	b29a      	uxth	r2, r3
    1ab6:	687b      	ldr	r3, [r7, #4]
    1ab8:	821a      	strh	r2, [r3, #16]
}
    1aba:	370c      	adds	r7, #12
    1abc:	46bd      	mov	sp, r7
    1abe:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ac2:	4770      	bx	lr

00001ac4 <USART_WakeUpConfig>:
  *     @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *     @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
    1ac4:	b480      	push	{r7}
    1ac6:	b083      	sub	sp, #12
    1ac8:	af00      	add	r7, sp, #0
    1aca:	6078      	str	r0, [r7, #4]
    1acc:	460b      	mov	r3, r1
    1ace:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));

  USARTx->CR1 &= CR1_WAKE_Mask;
    1ad0:	687b      	ldr	r3, [r7, #4]
    1ad2:	899b      	ldrh	r3, [r3, #12]
    1ad4:	b29b      	uxth	r3, r3
    1ad6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1ada:	b29a      	uxth	r2, r3
    1adc:	687b      	ldr	r3, [r7, #4]
    1ade:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
    1ae0:	687b      	ldr	r3, [r7, #4]
    1ae2:	899b      	ldrh	r3, [r3, #12]
    1ae4:	b29a      	uxth	r2, r3
    1ae6:	887b      	ldrh	r3, [r7, #2]
    1ae8:	4313      	orrs	r3, r2
    1aea:	b29a      	uxth	r2, r3
    1aec:	687b      	ldr	r3, [r7, #4]
    1aee:	819a      	strh	r2, [r3, #12]
}
    1af0:	370c      	adds	r7, #12
    1af2:	46bd      	mov	sp, r7
    1af4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1af8:	4770      	bx	lr
    1afa:	bf00      	nop

00001afc <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1afc:	b480      	push	{r7}
    1afe:	b083      	sub	sp, #12
    1b00:	af00      	add	r7, sp, #0
    1b02:	6078      	str	r0, [r7, #4]
    1b04:	460b      	mov	r3, r1
    1b06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b08:	78fb      	ldrb	r3, [r7, #3]
    1b0a:	2b00      	cmp	r3, #0
    1b0c:	d008      	beq.n	1b20 <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
    1b0e:	687b      	ldr	r3, [r7, #4]
    1b10:	899b      	ldrh	r3, [r3, #12]
    1b12:	b29b      	uxth	r3, r3
    1b14:	f043 0302 	orr.w	r3, r3, #2
    1b18:	b29a      	uxth	r2, r3
    1b1a:	687b      	ldr	r3, [r7, #4]
    1b1c:	819a      	strh	r2, [r3, #12]
    1b1e:	e007      	b.n	1b30 <USART_ReceiverWakeUpCmd+0x34>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
    1b20:	687b      	ldr	r3, [r7, #4]
    1b22:	899b      	ldrh	r3, [r3, #12]
    1b24:	b29b      	uxth	r3, r3
    1b26:	f023 0302 	bic.w	r3, r3, #2
    1b2a:	b29a      	uxth	r2, r3
    1b2c:	687b      	ldr	r3, [r7, #4]
    1b2e:	819a      	strh	r2, [r3, #12]
  }
}
    1b30:	370c      	adds	r7, #12
    1b32:	46bd      	mov	sp, r7
    1b34:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b38:	4770      	bx	lr
    1b3a:	bf00      	nop

00001b3c <USART_LINBreakDetectLengthConfig>:
  *     @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *     @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
    1b3c:	b480      	push	{r7}
    1b3e:	b083      	sub	sp, #12
    1b40:	af00      	add	r7, sp, #0
    1b42:	6078      	str	r0, [r7, #4]
    1b44:	460b      	mov	r3, r1
    1b46:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));

  USARTx->CR2 &= CR2_LBDL_Mask;
    1b48:	687b      	ldr	r3, [r7, #4]
    1b4a:	8a1b      	ldrh	r3, [r3, #16]
    1b4c:	b29b      	uxth	r3, r3
    1b4e:	f023 0320 	bic.w	r3, r3, #32
    1b52:	b29a      	uxth	r2, r3
    1b54:	687b      	ldr	r3, [r7, #4]
    1b56:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;
    1b58:	687b      	ldr	r3, [r7, #4]
    1b5a:	8a1b      	ldrh	r3, [r3, #16]
    1b5c:	b29a      	uxth	r2, r3
    1b5e:	887b      	ldrh	r3, [r7, #2]
    1b60:	4313      	orrs	r3, r2
    1b62:	b29a      	uxth	r2, r3
    1b64:	687b      	ldr	r3, [r7, #4]
    1b66:	821a      	strh	r2, [r3, #16]
}
    1b68:	370c      	adds	r7, #12
    1b6a:	46bd      	mov	sp, r7
    1b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b70:	4770      	bx	lr
    1b72:	bf00      	nop

00001b74 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1b74:	b480      	push	{r7}
    1b76:	b083      	sub	sp, #12
    1b78:	af00      	add	r7, sp, #0
    1b7a:	6078      	str	r0, [r7, #4]
    1b7c:	460b      	mov	r3, r1
    1b7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b80:	78fb      	ldrb	r3, [r7, #3]
    1b82:	2b00      	cmp	r3, #0
    1b84:	d008      	beq.n	1b98 <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
    1b86:	687b      	ldr	r3, [r7, #4]
    1b88:	8a1b      	ldrh	r3, [r3, #16]
    1b8a:	b29b      	uxth	r3, r3
    1b8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1b90:	b29a      	uxth	r2, r3
    1b92:	687b      	ldr	r3, [r7, #4]
    1b94:	821a      	strh	r2, [r3, #16]
    1b96:	e007      	b.n	1ba8 <USART_LINCmd+0x34>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
    1b98:	687b      	ldr	r3, [r7, #4]
    1b9a:	8a1b      	ldrh	r3, [r3, #16]
    1b9c:	b29b      	uxth	r3, r3
    1b9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    1ba2:	b29a      	uxth	r2, r3
    1ba4:	687b      	ldr	r3, [r7, #4]
    1ba6:	821a      	strh	r2, [r3, #16]
  }
}
    1ba8:	370c      	adds	r7, #12
    1baa:	46bd      	mov	sp, r7
    1bac:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bb0:	4770      	bx	lr
    1bb2:	bf00      	nop

00001bb4 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
    1bb4:	b480      	push	{r7}
    1bb6:	b083      	sub	sp, #12
    1bb8:	af00      	add	r7, sp, #0
    1bba:	6078      	str	r0, [r7, #4]
    1bbc:	460b      	mov	r3, r1
    1bbe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data));

  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
    1bc0:	887b      	ldrh	r3, [r7, #2]
    1bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bc6:	b29a      	uxth	r2, r3
    1bc8:	687b      	ldr	r3, [r7, #4]
    1bca:	809a      	strh	r2, [r3, #4]
}
    1bcc:	370c      	adds	r7, #12
    1bce:	46bd      	mov	sp, r7
    1bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bd4:	4770      	bx	lr
    1bd6:	bf00      	nop

00001bd8 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
    1bd8:	b480      	push	{r7}
    1bda:	b083      	sub	sp, #12
    1bdc:	af00      	add	r7, sp, #0
    1bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
    1be0:	687b      	ldr	r3, [r7, #4]
    1be2:	889b      	ldrh	r3, [r3, #4]
    1be4:	b29b      	uxth	r3, r3
    1be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bea:	b29b      	uxth	r3, r3
}
    1bec:	4618      	mov	r0, r3
    1bee:	370c      	adds	r7, #12
    1bf0:	46bd      	mov	sp, r7
    1bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bf6:	4770      	bx	lr

00001bf8 <USART_SendBreak>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
    1bf8:	b480      	push	{r7}
    1bfa:	b083      	sub	sp, #12
    1bfc:	af00      	add	r7, sp, #0
    1bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
    1c00:	687b      	ldr	r3, [r7, #4]
    1c02:	899b      	ldrh	r3, [r3, #12]
    1c04:	b29b      	uxth	r3, r3
    1c06:	f043 0301 	orr.w	r3, r3, #1
    1c0a:	b29a      	uxth	r2, r3
    1c0c:	687b      	ldr	r3, [r7, #4]
    1c0e:	819a      	strh	r2, [r3, #12]
}
    1c10:	370c      	adds	r7, #12
    1c12:	46bd      	mov	sp, r7
    1c14:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c18:	4770      	bx	lr
    1c1a:	bf00      	nop

00001c1c <USART_SetGuardTime>:
  * @param  USART_GuardTime: specifies the guard time.
  * @note The guard time bits are not available for UART4 and UART5.
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{
    1c1c:	b480      	push	{r7}
    1c1e:	b083      	sub	sp, #12
    1c20:	af00      	add	r7, sp, #0
    1c22:	6078      	str	r0, [r7, #4]
    1c24:	460b      	mov	r3, r1
    1c26:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));

  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
    1c28:	687b      	ldr	r3, [r7, #4]
    1c2a:	8b1b      	ldrh	r3, [r3, #24]
    1c2c:	b29b      	uxth	r3, r3
    1c2e:	b2db      	uxtb	r3, r3
    1c30:	b29a      	uxth	r2, r3
    1c32:	687b      	ldr	r3, [r7, #4]
    1c34:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
    1c36:	687b      	ldr	r3, [r7, #4]
    1c38:	8b1b      	ldrh	r3, [r3, #24]
    1c3a:	b29a      	uxth	r2, r3
    1c3c:	78fb      	ldrb	r3, [r7, #3]
    1c3e:	b29b      	uxth	r3, r3
    1c40:	021b      	lsls	r3, r3, #8
    1c42:	b29b      	uxth	r3, r3
    1c44:	4313      	orrs	r3, r2
    1c46:	b29a      	uxth	r2, r3
    1c48:	687b      	ldr	r3, [r7, #4]
    1c4a:	831a      	strh	r2, [r3, #24]
}
    1c4c:	370c      	adds	r7, #12
    1c4e:	46bd      	mov	sp, r7
    1c50:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c54:	4770      	bx	lr
    1c56:	bf00      	nop

00001c58 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock.
  * @note   The function is used for IrDA mode with UART4 and UART5.
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{
    1c58:	b480      	push	{r7}
    1c5a:	b083      	sub	sp, #12
    1c5c:	af00      	add	r7, sp, #0
    1c5e:	6078      	str	r0, [r7, #4]
    1c60:	460b      	mov	r3, r1
    1c62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
    1c64:	687b      	ldr	r3, [r7, #4]
    1c66:	8b1b      	ldrh	r3, [r3, #24]
    1c68:	b29b      	uxth	r3, r3
    1c6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    1c6e:	b29a      	uxth	r2, r3
    1c70:	687b      	ldr	r3, [r7, #4]
    1c72:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
    1c74:	687b      	ldr	r3, [r7, #4]
    1c76:	8b1b      	ldrh	r3, [r3, #24]
    1c78:	b29a      	uxth	r2, r3
    1c7a:	78fb      	ldrb	r3, [r7, #3]
    1c7c:	b29b      	uxth	r3, r3
    1c7e:	4313      	orrs	r3, r2
    1c80:	b29a      	uxth	r2, r3
    1c82:	687b      	ldr	r3, [r7, #4]
    1c84:	831a      	strh	r2, [r3, #24]
}
    1c86:	370c      	adds	r7, #12
    1c88:	46bd      	mov	sp, r7
    1c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c8e:	4770      	bx	lr

00001c90 <USART_SmartCardCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1c90:	b480      	push	{r7}
    1c92:	b083      	sub	sp, #12
    1c94:	af00      	add	r7, sp, #0
    1c96:	6078      	str	r0, [r7, #4]
    1c98:	460b      	mov	r3, r1
    1c9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1c9c:	78fb      	ldrb	r3, [r7, #3]
    1c9e:	2b00      	cmp	r3, #0
    1ca0:	d008      	beq.n	1cb4 <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
    1ca2:	687b      	ldr	r3, [r7, #4]
    1ca4:	8a9b      	ldrh	r3, [r3, #20]
    1ca6:	b29b      	uxth	r3, r3
    1ca8:	f043 0320 	orr.w	r3, r3, #32
    1cac:	b29a      	uxth	r2, r3
    1cae:	687b      	ldr	r3, [r7, #4]
    1cb0:	829a      	strh	r2, [r3, #20]
    1cb2:	e007      	b.n	1cc4 <USART_SmartCardCmd+0x34>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
    1cb4:	687b      	ldr	r3, [r7, #4]
    1cb6:	8a9b      	ldrh	r3, [r3, #20]
    1cb8:	b29b      	uxth	r3, r3
    1cba:	f023 0320 	bic.w	r3, r3, #32
    1cbe:	b29a      	uxth	r2, r3
    1cc0:	687b      	ldr	r3, [r7, #4]
    1cc2:	829a      	strh	r2, [r3, #20]
  }
}
    1cc4:	370c      	adds	r7, #12
    1cc6:	46bd      	mov	sp, r7
    1cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ccc:	4770      	bx	lr
    1cce:	bf00      	nop

00001cd0 <USART_SmartCardNACKCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1cd0:	b480      	push	{r7}
    1cd2:	b083      	sub	sp, #12
    1cd4:	af00      	add	r7, sp, #0
    1cd6:	6078      	str	r0, [r7, #4]
    1cd8:	460b      	mov	r3, r1
    1cda:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1cdc:	78fb      	ldrb	r3, [r7, #3]
    1cde:	2b00      	cmp	r3, #0
    1ce0:	d008      	beq.n	1cf4 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
    1ce2:	687b      	ldr	r3, [r7, #4]
    1ce4:	8a9b      	ldrh	r3, [r3, #20]
    1ce6:	b29b      	uxth	r3, r3
    1ce8:	f043 0310 	orr.w	r3, r3, #16
    1cec:	b29a      	uxth	r2, r3
    1cee:	687b      	ldr	r3, [r7, #4]
    1cf0:	829a      	strh	r2, [r3, #20]
    1cf2:	e007      	b.n	1d04 <USART_SmartCardNACKCmd+0x34>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
    1cf4:	687b      	ldr	r3, [r7, #4]
    1cf6:	8a9b      	ldrh	r3, [r3, #20]
    1cf8:	b29b      	uxth	r3, r3
    1cfa:	f023 0310 	bic.w	r3, r3, #16
    1cfe:	b29a      	uxth	r2, r3
    1d00:	687b      	ldr	r3, [r7, #4]
    1d02:	829a      	strh	r2, [r3, #20]
  }
}
    1d04:	370c      	adds	r7, #12
    1d06:	46bd      	mov	sp, r7
    1d08:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d0c:	4770      	bx	lr
    1d0e:	bf00      	nop

00001d10 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d10:	b480      	push	{r7}
    1d12:	b083      	sub	sp, #12
    1d14:	af00      	add	r7, sp, #0
    1d16:	6078      	str	r0, [r7, #4]
    1d18:	460b      	mov	r3, r1
    1d1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d1c:	78fb      	ldrb	r3, [r7, #3]
    1d1e:	2b00      	cmp	r3, #0
    1d20:	d008      	beq.n	1d34 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
    1d22:	687b      	ldr	r3, [r7, #4]
    1d24:	8a9b      	ldrh	r3, [r3, #20]
    1d26:	b29b      	uxth	r3, r3
    1d28:	f043 0308 	orr.w	r3, r3, #8
    1d2c:	b29a      	uxth	r2, r3
    1d2e:	687b      	ldr	r3, [r7, #4]
    1d30:	829a      	strh	r2, [r3, #20]
    1d32:	e007      	b.n	1d44 <USART_HalfDuplexCmd+0x34>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
    1d34:	687b      	ldr	r3, [r7, #4]
    1d36:	8a9b      	ldrh	r3, [r3, #20]
    1d38:	b29b      	uxth	r3, r3
    1d3a:	f023 0308 	bic.w	r3, r3, #8
    1d3e:	b29a      	uxth	r2, r3
    1d40:	687b      	ldr	r3, [r7, #4]
    1d42:	829a      	strh	r2, [r3, #20]
  }
}
    1d44:	370c      	adds	r7, #12
    1d46:	46bd      	mov	sp, r7
    1d48:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d4c:	4770      	bx	lr
    1d4e:	bf00      	nop

00001d50 <USART_OverSampling8Cmd>:
  *     This function has to be called before calling USART_Init()
  *     function in order to have correct baudrate Divider value.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d50:	b480      	push	{r7}
    1d52:	b083      	sub	sp, #12
    1d54:	af00      	add	r7, sp, #0
    1d56:	6078      	str	r0, [r7, #4]
    1d58:	460b      	mov	r3, r1
    1d5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d5c:	78fb      	ldrb	r3, [r7, #3]
    1d5e:	2b00      	cmp	r3, #0
    1d60:	d00a      	beq.n	1d78 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= CR1_OVER8_Set;
    1d62:	687b      	ldr	r3, [r7, #4]
    1d64:	899b      	ldrh	r3, [r3, #12]
    1d66:	b29b      	uxth	r3, r3
    1d68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    1d6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    1d70:	b29a      	uxth	r2, r3
    1d72:	687b      	ldr	r3, [r7, #4]
    1d74:	819a      	strh	r2, [r3, #12]
    1d76:	e007      	b.n	1d88 <USART_OverSampling8Cmd+0x38>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= CR1_OVER8_Reset;
    1d78:	687b      	ldr	r3, [r7, #4]
    1d7a:	899b      	ldrh	r3, [r3, #12]
    1d7c:	b29b      	uxth	r3, r3
    1d7e:	f3c3 030e 	ubfx	r3, r3, #0, #15
    1d82:	b29a      	uxth	r2, r3
    1d84:	687b      	ldr	r3, [r7, #4]
    1d86:	819a      	strh	r2, [r3, #12]
  }
}
    1d88:	370c      	adds	r7, #12
    1d8a:	46bd      	mov	sp, r7
    1d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d90:	4770      	bx	lr
    1d92:	bf00      	nop

00001d94 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d94:	b480      	push	{r7}
    1d96:	b083      	sub	sp, #12
    1d98:	af00      	add	r7, sp, #0
    1d9a:	6078      	str	r0, [r7, #4]
    1d9c:	460b      	mov	r3, r1
    1d9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1da0:	78fb      	ldrb	r3, [r7, #3]
    1da2:	2b00      	cmp	r3, #0
    1da4:	d008      	beq.n	1db8 <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= CR3_ONEBITE_Set;
    1da6:	687b      	ldr	r3, [r7, #4]
    1da8:	8a9b      	ldrh	r3, [r3, #20]
    1daa:	b29b      	uxth	r3, r3
    1dac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    1db0:	b29a      	uxth	r2, r3
    1db2:	687b      	ldr	r3, [r7, #4]
    1db4:	829a      	strh	r2, [r3, #20]
    1db6:	e007      	b.n	1dc8 <USART_OneBitMethodCmd+0x34>
  }
  else
  {
    /* Disable tthe one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= CR3_ONEBITE_Reset;
    1db8:	687b      	ldr	r3, [r7, #4]
    1dba:	8a9b      	ldrh	r3, [r3, #20]
    1dbc:	b29b      	uxth	r3, r3
    1dbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1dc2:	b29a      	uxth	r2, r3
    1dc4:	687b      	ldr	r3, [r7, #4]
    1dc6:	829a      	strh	r2, [r3, #20]
  }
}
    1dc8:	370c      	adds	r7, #12
    1dca:	46bd      	mov	sp, r7
    1dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1dd0:	4770      	bx	lr
    1dd2:	bf00      	nop

00001dd4 <USART_IrDAConfig>:
  *     @arg USART_IrDAMode_LowPower
  *     @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
    1dd4:	b480      	push	{r7}
    1dd6:	b083      	sub	sp, #12
    1dd8:	af00      	add	r7, sp, #0
    1dda:	6078      	str	r0, [r7, #4]
    1ddc:	460b      	mov	r3, r1
    1dde:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));

  USARTx->CR3 &= CR3_IRLP_Mask;
    1de0:	687b      	ldr	r3, [r7, #4]
    1de2:	8a9b      	ldrh	r3, [r3, #20]
    1de4:	b29b      	uxth	r3, r3
    1de6:	f023 0304 	bic.w	r3, r3, #4
    1dea:	b29a      	uxth	r2, r3
    1dec:	687b      	ldr	r3, [r7, #4]
    1dee:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
    1df0:	687b      	ldr	r3, [r7, #4]
    1df2:	8a9b      	ldrh	r3, [r3, #20]
    1df4:	b29a      	uxth	r2, r3
    1df6:	887b      	ldrh	r3, [r7, #2]
    1df8:	4313      	orrs	r3, r2
    1dfa:	b29a      	uxth	r2, r3
    1dfc:	687b      	ldr	r3, [r7, #4]
    1dfe:	829a      	strh	r2, [r3, #20]
}
    1e00:	370c      	adds	r7, #12
    1e02:	46bd      	mov	sp, r7
    1e04:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e08:	4770      	bx	lr
    1e0a:	bf00      	nop

00001e0c <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1e0c:	b480      	push	{r7}
    1e0e:	b083      	sub	sp, #12
    1e10:	af00      	add	r7, sp, #0
    1e12:	6078      	str	r0, [r7, #4]
    1e14:	460b      	mov	r3, r1
    1e16:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1e18:	78fb      	ldrb	r3, [r7, #3]
    1e1a:	2b00      	cmp	r3, #0
    1e1c:	d008      	beq.n	1e30 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
    1e1e:	687b      	ldr	r3, [r7, #4]
    1e20:	8a9b      	ldrh	r3, [r3, #20]
    1e22:	b29b      	uxth	r3, r3
    1e24:	f043 0302 	orr.w	r3, r3, #2
    1e28:	b29a      	uxth	r2, r3
    1e2a:	687b      	ldr	r3, [r7, #4]
    1e2c:	829a      	strh	r2, [r3, #20]
    1e2e:	e007      	b.n	1e40 <USART_IrDACmd+0x34>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
    1e30:	687b      	ldr	r3, [r7, #4]
    1e32:	8a9b      	ldrh	r3, [r3, #20]
    1e34:	b29b      	uxth	r3, r3
    1e36:	f023 0302 	bic.w	r3, r3, #2
    1e3a:	b29a      	uxth	r2, r3
    1e3c:	687b      	ldr	r3, [r7, #4]
    1e3e:	829a      	strh	r2, [r3, #20]
  }
}
    1e40:	370c      	adds	r7, #12
    1e42:	46bd      	mov	sp, r7
    1e44:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e48:	4770      	bx	lr
    1e4a:	bf00      	nop

00001e4c <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e4c:	b480      	push	{r7}
    1e4e:	b085      	sub	sp, #20
    1e50:	af00      	add	r7, sp, #0
    1e52:	6078      	str	r0, [r7, #4]
    1e54:	460b      	mov	r3, r1
    1e56:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
    1e58:	2300      	movs	r3, #0
    1e5a:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
    1e5c:	687b      	ldr	r3, [r7, #4]
    1e5e:	881b      	ldrh	r3, [r3, #0]
    1e60:	b29a      	uxth	r2, r3
    1e62:	887b      	ldrh	r3, [r7, #2]
    1e64:	4013      	ands	r3, r2
    1e66:	b29b      	uxth	r3, r3
    1e68:	2b00      	cmp	r3, #0
    1e6a:	d002      	beq.n	1e72 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
    1e6c:	2301      	movs	r3, #1
    1e6e:	73fb      	strb	r3, [r7, #15]
    1e70:	e001      	b.n	1e76 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    1e72:	2300      	movs	r3, #0
    1e74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    1e76:	7bfb      	ldrb	r3, [r7, #15]
}
    1e78:	4618      	mov	r0, r3
    1e7a:	3714      	adds	r7, #20
    1e7c:	46bd      	mov	sp, r7
    1e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e82:	4770      	bx	lr

00001e84 <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e84:	b480      	push	{r7}
    1e86:	b083      	sub	sp, #12
    1e88:	af00      	add	r7, sp, #0
    1e8a:	6078      	str	r0, [r7, #4]
    1e8c:	460b      	mov	r3, r1
    1e8e:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  USARTx->SR = (uint16_t)~USART_FLAG;
    1e90:	887b      	ldrh	r3, [r7, #2]
    1e92:	43db      	mvns	r3, r3
    1e94:	b29a      	uxth	r2, r3
    1e96:	687b      	ldr	r3, [r7, #4]
    1e98:	801a      	strh	r2, [r3, #0]
}
    1e9a:	370c      	adds	r7, #12
    1e9c:	46bd      	mov	sp, r7
    1e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ea2:	4770      	bx	lr

00001ea4 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1ea4:	b480      	push	{r7}
    1ea6:	b087      	sub	sp, #28
    1ea8:	af00      	add	r7, sp, #0
    1eaa:	6078      	str	r0, [r7, #4]
    1eac:	460b      	mov	r3, r1
    1eae:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
    1eb0:	2300      	movs	r3, #0
    1eb2:	60fb      	str	r3, [r7, #12]
    1eb4:	2300      	movs	r3, #0
    1eb6:	617b      	str	r3, [r7, #20]
    1eb8:	2300      	movs	r3, #0
    1eba:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
    1ebc:	2300      	movs	r3, #0
    1ebe:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    1ec0:	887b      	ldrh	r3, [r7, #2]
    1ec2:	b2db      	uxtb	r3, r3
    1ec4:	095b      	lsrs	r3, r3, #5
    1ec6:	b2db      	uxtb	r3, r3
    1ec8:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
    1eca:	887b      	ldrh	r3, [r7, #2]
    1ecc:	f003 031f 	and.w	r3, r3, #31
    1ed0:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
    1ed2:	697b      	ldr	r3, [r7, #20]
    1ed4:	2201      	movs	r2, #1
    1ed6:	fa02 f303 	lsl.w	r3, r2, r3
    1eda:	617b      	str	r3, [r7, #20]

  if (usartreg == 0x01) /* The IT  is in CR1 register */
    1edc:	68bb      	ldr	r3, [r7, #8]
    1ede:	2b01      	cmp	r3, #1
    1ee0:	d106      	bne.n	1ef0 <USART_GetITStatus+0x4c>
  {
    itmask &= USARTx->CR1;
    1ee2:	687b      	ldr	r3, [r7, #4]
    1ee4:	899b      	ldrh	r3, [r3, #12]
    1ee6:	b29b      	uxth	r3, r3
    1ee8:	697a      	ldr	r2, [r7, #20]
    1eea:	4013      	ands	r3, r2
    1eec:	617b      	str	r3, [r7, #20]
    1eee:	e00f      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
    1ef0:	68bb      	ldr	r3, [r7, #8]
    1ef2:	2b02      	cmp	r3, #2
    1ef4:	d106      	bne.n	1f04 <USART_GetITStatus+0x60>
  {
    itmask &= USARTx->CR2;
    1ef6:	687b      	ldr	r3, [r7, #4]
    1ef8:	8a1b      	ldrh	r3, [r3, #16]
    1efa:	b29b      	uxth	r3, r3
    1efc:	697a      	ldr	r2, [r7, #20]
    1efe:	4013      	ands	r3, r2
    1f00:	617b      	str	r3, [r7, #20]
    1f02:	e005      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
    1f04:	687b      	ldr	r3, [r7, #4]
    1f06:	8a9b      	ldrh	r3, [r3, #20]
    1f08:	b29b      	uxth	r3, r3
    1f0a:	697a      	ldr	r2, [r7, #20]
    1f0c:	4013      	ands	r3, r2
    1f0e:	617b      	str	r3, [r7, #20]
  }

  bitpos = USART_IT >> 0x08;
    1f10:	887b      	ldrh	r3, [r7, #2]
    1f12:	0a1b      	lsrs	r3, r3, #8
    1f14:	b29b      	uxth	r3, r3
    1f16:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
    1f18:	68fb      	ldr	r3, [r7, #12]
    1f1a:	2201      	movs	r2, #1
    1f1c:	fa02 f303 	lsl.w	r3, r2, r3
    1f20:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
    1f22:	687b      	ldr	r3, [r7, #4]
    1f24:	881b      	ldrh	r3, [r3, #0]
    1f26:	b29b      	uxth	r3, r3
    1f28:	68fa      	ldr	r2, [r7, #12]
    1f2a:	4013      	ands	r3, r2
    1f2c:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
    1f2e:	697b      	ldr	r3, [r7, #20]
    1f30:	2b00      	cmp	r3, #0
    1f32:	d005      	beq.n	1f40 <USART_GetITStatus+0x9c>
    1f34:	68fb      	ldr	r3, [r7, #12]
    1f36:	2b00      	cmp	r3, #0
    1f38:	d002      	beq.n	1f40 <USART_GetITStatus+0x9c>
  {
    bitstatus = SET;
    1f3a:	2301      	movs	r3, #1
    1f3c:	74fb      	strb	r3, [r7, #19]
    1f3e:	e001      	b.n	1f44 <USART_GetITStatus+0xa0>
  }
  else
  {
    bitstatus = RESET;
    1f40:	2300      	movs	r3, #0
    1f42:	74fb      	strb	r3, [r7, #19]
  }

  return bitstatus;
    1f44:	7cfb      	ldrb	r3, [r7, #19]
}
    1f46:	4618      	mov	r0, r3
    1f48:	371c      	adds	r7, #28
    1f4a:	46bd      	mov	sp, r7
    1f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f50:	4770      	bx	lr
    1f52:	bf00      	nop

00001f54 <USART_ClearITPendingBit>:
  *   - TXE pending bit is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1f54:	b480      	push	{r7}
    1f56:	b085      	sub	sp, #20
    1f58:	af00      	add	r7, sp, #0
    1f5a:	6078      	str	r0, [r7, #4]
    1f5c:	460b      	mov	r3, r1
    1f5e:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
    1f60:	2300      	movs	r3, #0
    1f62:	81fb      	strh	r3, [r7, #14]
    1f64:	2300      	movs	r3, #0
    1f66:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  bitpos = USART_IT >> 0x08;
    1f68:	887b      	ldrh	r3, [r7, #2]
    1f6a:	0a1b      	lsrs	r3, r3, #8
    1f6c:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
    1f6e:	89fb      	ldrh	r3, [r7, #14]
    1f70:	2201      	movs	r2, #1
    1f72:	fa02 f303 	lsl.w	r3, r2, r3
    1f76:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
    1f78:	89bb      	ldrh	r3, [r7, #12]
    1f7a:	43db      	mvns	r3, r3
    1f7c:	b29a      	uxth	r2, r3
    1f7e:	687b      	ldr	r3, [r7, #4]
    1f80:	801a      	strh	r2, [r3, #0]
}
    1f82:	3714      	adds	r7, #20
    1f84:	46bd      	mov	sp, r7
    1f86:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f8a:	4770      	bx	lr

00001f8c <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
    1f8c:	b480      	push	{r7}
    1f8e:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
    1f90:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1f94:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1f98:	2200      	movs	r2, #0
    1f9a:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
    1f9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fa0:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fa4:	2200      	movs	r2, #0
    1fa6:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
    1fa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fac:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fb0:	2200      	movs	r2, #0
    1fb2:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
    1fb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fb8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fbc:	2200      	movs	r2, #0
    1fbe:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x000FFFFF;
    1fc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fc4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1fcc:	f2c0 020f 	movt	r2, #15
    1fd0:	615a      	str	r2, [r3, #20]
}
    1fd2:	46bd      	mov	sp, r7
    1fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1fd8:	4770      	bx	lr
    1fda:	bf00      	nop

00001fdc <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
    1fdc:	b480      	push	{r7}
    1fde:	b085      	sub	sp, #20
    1fe0:	af00      	add	r7, sp, #0
    1fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
    1fe4:	2300      	movs	r3, #0
    1fe6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
    1fe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fec:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1ff0:	60fb      	str	r3, [r7, #12]

  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
    1ff2:	687b      	ldr	r3, [r7, #4]
    1ff4:	799b      	ldrb	r3, [r3, #6]
    1ff6:	2b00      	cmp	r3, #0
    1ff8:	d074      	beq.n	20e4 <EXTI_Init+0x108>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    1ffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1ffe:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2002:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2006:	f2c4 0201 	movt	r2, #16385	; 0x4001
    200a:	6811      	ldr	r1, [r2, #0]
    200c:	687a      	ldr	r2, [r7, #4]
    200e:	6812      	ldr	r2, [r2, #0]
    2010:	43d2      	mvns	r2, r2
    2012:	400a      	ands	r2, r1
    2014:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    2016:	f44f 6380 	mov.w	r3, #1024	; 0x400
    201a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    201e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2022:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2026:	6851      	ldr	r1, [r2, #4]
    2028:	687a      	ldr	r2, [r7, #4]
    202a:	6812      	ldr	r2, [r2, #0]
    202c:	43d2      	mvns	r2, r2
    202e:	400a      	ands	r2, r1
    2030:	605a      	str	r2, [r3, #4]

    tmp += EXTI_InitStruct->EXTI_Mode;
    2032:	687b      	ldr	r3, [r7, #4]
    2034:	791b      	ldrb	r3, [r3, #4]
    2036:	68fa      	ldr	r2, [r7, #12]
    2038:	4413      	add	r3, r2
    203a:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    203c:	68fb      	ldr	r3, [r7, #12]
    203e:	68fa      	ldr	r2, [r7, #12]
    2040:	6811      	ldr	r1, [r2, #0]
    2042:	687a      	ldr	r2, [r7, #4]
    2044:	6812      	ldr	r2, [r2, #0]
    2046:	430a      	orrs	r2, r1
    2048:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    204a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    204e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2052:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2056:	f2c4 0201 	movt	r2, #16385	; 0x4001
    205a:	6891      	ldr	r1, [r2, #8]
    205c:	687a      	ldr	r2, [r7, #4]
    205e:	6812      	ldr	r2, [r2, #0]
    2060:	43d2      	mvns	r2, r2
    2062:	400a      	ands	r2, r1
    2064:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    2066:	f44f 6380 	mov.w	r3, #1024	; 0x400
    206a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    206e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2072:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2076:	68d1      	ldr	r1, [r2, #12]
    2078:	687a      	ldr	r2, [r7, #4]
    207a:	6812      	ldr	r2, [r2, #0]
    207c:	43d2      	mvns	r2, r2
    207e:	400a      	ands	r2, r1
    2080:	60da      	str	r2, [r3, #12]

    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
    2082:	687b      	ldr	r3, [r7, #4]
    2084:	795b      	ldrb	r3, [r3, #5]
    2086:	2b10      	cmp	r3, #16
    2088:	d11a      	bne.n	20c0 <EXTI_Init+0xe4>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
    208a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    208e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2092:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2096:	f2c4 0201 	movt	r2, #16385	; 0x4001
    209a:	6891      	ldr	r1, [r2, #8]
    209c:	687a      	ldr	r2, [r7, #4]
    209e:	6812      	ldr	r2, [r2, #0]
    20a0:	430a      	orrs	r2, r1
    20a2:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    20a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20a8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
    20b0:	f2c4 0201 	movt	r2, #16385	; 0x4001
    20b4:	68d1      	ldr	r1, [r2, #12]
    20b6:	687a      	ldr	r2, [r7, #4]
    20b8:	6812      	ldr	r2, [r2, #0]
    20ba:	430a      	orrs	r2, r1
    20bc:	60da      	str	r2, [r3, #12]
    20be:	e01e      	b.n	20fe <EXTI_Init+0x122>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
    20c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20c4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20c8:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
    20ca:	687b      	ldr	r3, [r7, #4]
    20cc:	795b      	ldrb	r3, [r3, #5]
    20ce:	68fa      	ldr	r2, [r7, #12]
    20d0:	4413      	add	r3, r2
    20d2:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    20d4:	68fb      	ldr	r3, [r7, #12]
    20d6:	68fa      	ldr	r2, [r7, #12]
    20d8:	6811      	ldr	r1, [r2, #0]
    20da:	687a      	ldr	r2, [r7, #4]
    20dc:	6812      	ldr	r2, [r2, #0]
    20de:	430a      	orrs	r2, r1
    20e0:	601a      	str	r2, [r3, #0]
    20e2:	e00c      	b.n	20fe <EXTI_Init+0x122>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
    20e4:	687b      	ldr	r3, [r7, #4]
    20e6:	791b      	ldrb	r3, [r3, #4]
    20e8:	68fa      	ldr	r2, [r7, #12]
    20ea:	4413      	add	r3, r2
    20ec:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
    20ee:	68fb      	ldr	r3, [r7, #12]
    20f0:	68fa      	ldr	r2, [r7, #12]
    20f2:	6811      	ldr	r1, [r2, #0]
    20f4:	687a      	ldr	r2, [r7, #4]
    20f6:	6812      	ldr	r2, [r2, #0]
    20f8:	43d2      	mvns	r2, r2
    20fa:	400a      	ands	r2, r1
    20fc:	601a      	str	r2, [r3, #0]
  }
}
    20fe:	3714      	adds	r7, #20
    2100:	46bd      	mov	sp, r7
    2102:	f85d 7b04 	ldr.w	r7, [sp], #4
    2106:	4770      	bx	lr

00002108 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
    2108:	b480      	push	{r7}
    210a:	b083      	sub	sp, #12
    210c:	af00      	add	r7, sp, #0
    210e:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
    2110:	687b      	ldr	r3, [r7, #4]
    2112:	2200      	movs	r2, #0
    2114:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
    2116:	687b      	ldr	r3, [r7, #4]
    2118:	2200      	movs	r2, #0
    211a:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
    211c:	687b      	ldr	r3, [r7, #4]
    211e:	220c      	movs	r2, #12
    2120:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
    2122:	687b      	ldr	r3, [r7, #4]
    2124:	2200      	movs	r2, #0
    2126:	719a      	strb	r2, [r3, #6]
}
    2128:	370c      	adds	r7, #12
    212a:	46bd      	mov	sp, r7
    212c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2130:	4770      	bx	lr
    2132:	bf00      	nop

00002134 <EXTI_GenerateSWInterrupt>:
  * @param  EXTI_Line: specifies the EXTI lines to be enabled or disabled.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
    2134:	b480      	push	{r7}
    2136:	b083      	sub	sp, #12
    2138:	af00      	add	r7, sp, #0
    213a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->SWIER |= EXTI_Line;
    213c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2140:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2144:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2148:	f2c4 0201 	movt	r2, #16385	; 0x4001
    214c:	6911      	ldr	r1, [r2, #16]
    214e:	687a      	ldr	r2, [r7, #4]
    2150:	430a      	orrs	r2, r1
    2152:	611a      	str	r2, [r3, #16]
}
    2154:	370c      	adds	r7, #12
    2156:	46bd      	mov	sp, r7
    2158:	f85d 7b04 	ldr.w	r7, [sp], #4
    215c:	4770      	bx	lr
    215e:	bf00      	nop

00002160 <EXTI_GetFlagStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
    2160:	b480      	push	{r7}
    2162:	b085      	sub	sp, #20
    2164:	af00      	add	r7, sp, #0
    2166:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    2168:	2300      	movs	r3, #0
    216a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
    216c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2170:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2174:	695a      	ldr	r2, [r3, #20]
    2176:	687b      	ldr	r3, [r7, #4]
    2178:	4013      	ands	r3, r2
    217a:	2b00      	cmp	r3, #0
    217c:	d002      	beq.n	2184 <EXTI_GetFlagStatus+0x24>
  {
    bitstatus = SET;
    217e:	2301      	movs	r3, #1
    2180:	73fb      	strb	r3, [r7, #15]
    2182:	e001      	b.n	2188 <EXTI_GetFlagStatus+0x28>
  }
  else
  {
    bitstatus = RESET;
    2184:	2300      	movs	r3, #0
    2186:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    2188:	7bfb      	ldrb	r3, [r7, #15]
}
    218a:	4618      	mov	r0, r3
    218c:	3714      	adds	r7, #20
    218e:	46bd      	mov	sp, r7
    2190:	f85d 7b04 	ldr.w	r7, [sp], #4
    2194:	4770      	bx	lr
    2196:	bf00      	nop

00002198 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
    2198:	b480      	push	{r7}
    219a:	b083      	sub	sp, #12
    219c:	af00      	add	r7, sp, #0
    219e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    21a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21a4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21a8:	687a      	ldr	r2, [r7, #4]
    21aa:	615a      	str	r2, [r3, #20]
}
    21ac:	370c      	adds	r7, #12
    21ae:	46bd      	mov	sp, r7
    21b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    21b4:	4770      	bx	lr
    21b6:	bf00      	nop

000021b8 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
    21b8:	b480      	push	{r7}
    21ba:	b085      	sub	sp, #20
    21bc:	af00      	add	r7, sp, #0
    21be:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
    21c0:	2300      	movs	r3, #0
    21c2:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
    21c4:	2300      	movs	r3, #0
    21c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  enablestatus =  EXTI->IMR & EXTI_Line;
    21c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21cc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21d0:	681a      	ldr	r2, [r3, #0]
    21d2:	687b      	ldr	r3, [r7, #4]
    21d4:	4013      	ands	r3, r2
    21d6:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
    21d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21dc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21e0:	695a      	ldr	r2, [r3, #20]
    21e2:	687b      	ldr	r3, [r7, #4]
    21e4:	4013      	ands	r3, r2
    21e6:	2b00      	cmp	r3, #0
    21e8:	d005      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
    21ea:	68bb      	ldr	r3, [r7, #8]
    21ec:	2b00      	cmp	r3, #0
    21ee:	d002      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
  {
    bitstatus = SET;
    21f0:	2301      	movs	r3, #1
    21f2:	73fb      	strb	r3, [r7, #15]
    21f4:	e001      	b.n	21fa <EXTI_GetITStatus+0x42>
  }
  else
  {
    bitstatus = RESET;
    21f6:	2300      	movs	r3, #0
    21f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    21fa:	7bfb      	ldrb	r3, [r7, #15]
}
    21fc:	4618      	mov	r0, r3
    21fe:	3714      	adds	r7, #20
    2200:	46bd      	mov	sp, r7
    2202:	f85d 7b04 	ldr.w	r7, [sp], #4
    2206:	4770      	bx	lr

00002208 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
    2208:	b480      	push	{r7}
    220a:	b083      	sub	sp, #12
    220c:	af00      	add	r7, sp, #0
    220e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    2210:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2214:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2218:	687a      	ldr	r2, [r7, #4]
    221a:	615a      	str	r2, [r3, #20]
}
    221c:	370c      	adds	r7, #12
    221e:	46bd      	mov	sp, r7
    2220:	f85d 7b04 	ldr.w	r7, [sp], #4
    2224:	4770      	bx	lr
    2226:	bf00      	nop

00002228 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
    2228:	b480      	push	{r7}
    222a:	b083      	sub	sp, #12
    222c:	af00      	add	r7, sp, #0
    222e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
    2230:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2234:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2238:	687a      	ldr	r2, [r7, #4]
    223a:	f042 62bf 	orr.w	r2, r2, #100139008	; 0x5f80000
    223e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    2242:	60da      	str	r2, [r3, #12]
}
    2244:	370c      	adds	r7, #12
    2246:	46bd      	mov	sp, r7
    2248:	f85d 7b04 	ldr.w	r7, [sp], #4
    224c:	4770      	bx	lr
    224e:	bf00      	nop

00002250 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
    2250:	b480      	push	{r7}
    2252:	b087      	sub	sp, #28
    2254:	af00      	add	r7, sp, #0
    2256:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
    2258:	2300      	movs	r3, #0
    225a:	617b      	str	r3, [r7, #20]
    225c:	2300      	movs	r3, #0
    225e:	613b      	str	r3, [r7, #16]
    2260:	230f      	movs	r3, #15
    2262:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
    2264:	687b      	ldr	r3, [r7, #4]
    2266:	78db      	ldrb	r3, [r3, #3]
    2268:	2b00      	cmp	r3, #0
    226a:	d042      	beq.n	22f2 <NVIC_Init+0xa2>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    226c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2270:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2274:	68db      	ldr	r3, [r3, #12]
    2276:	43db      	mvns	r3, r3
    2278:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    227c:	0a1b      	lsrs	r3, r3, #8
    227e:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
    2280:	697b      	ldr	r3, [r7, #20]
    2282:	f1c3 0304 	rsb	r3, r3, #4
    2286:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
    2288:	697b      	ldr	r3, [r7, #20]
    228a:	68fa      	ldr	r2, [r7, #12]
    228c:	fa22 f303 	lsr.w	r3, r2, r3
    2290:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    2292:	687b      	ldr	r3, [r7, #4]
    2294:	785b      	ldrb	r3, [r3, #1]
    2296:	461a      	mov	r2, r3
    2298:	693b      	ldr	r3, [r7, #16]
    229a:	fa02 f303 	lsl.w	r3, r2, r3
    229e:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
    22a0:	687b      	ldr	r3, [r7, #4]
    22a2:	789b      	ldrb	r3, [r3, #2]
    22a4:	461a      	mov	r2, r3
    22a6:	68fb      	ldr	r3, [r7, #12]
    22a8:	4013      	ands	r3, r2
    22aa:	697a      	ldr	r2, [r7, #20]
    22ac:	4313      	orrs	r3, r2
    22ae:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
    22b0:	697b      	ldr	r3, [r7, #20]
    22b2:	011b      	lsls	r3, r3, #4
    22b4:	617b      	str	r3, [r7, #20]

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    22b6:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22ba:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22be:	687a      	ldr	r2, [r7, #4]
    22c0:	7812      	ldrb	r2, [r2, #0]
    22c2:	4611      	mov	r1, r2
    22c4:	697a      	ldr	r2, [r7, #20]
    22c6:	b2d2      	uxtb	r2, r2
    22c8:	440b      	add	r3, r1
    22ca:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ce:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22d2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22d6:	687a      	ldr	r2, [r7, #4]
    22d8:	7812      	ldrb	r2, [r2, #0]
    22da:	0952      	lsrs	r2, r2, #5
    22dc:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    22de:	6879      	ldr	r1, [r7, #4]
    22e0:	7809      	ldrb	r1, [r1, #0]
    22e2:	f001 011f 	and.w	r1, r1, #31
    22e6:	2001      	movs	r0, #1
    22e8:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    22f0:	e011      	b.n	2316 <NVIC_Init+0xc6>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22f2:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22f6:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22fa:	687a      	ldr	r2, [r7, #4]
    22fc:	7812      	ldrb	r2, [r2, #0]
    22fe:	0952      	lsrs	r2, r2, #5
    2300:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    2302:	6879      	ldr	r1, [r7, #4]
    2304:	7809      	ldrb	r1, [r1, #0]
    2306:	f001 011f 	and.w	r1, r1, #31
    230a:	2001      	movs	r0, #1
    230c:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    2310:	3220      	adds	r2, #32
    2312:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
    2316:	371c      	adds	r7, #28
    2318:	46bd      	mov	sp, r7
    231a:	f85d 7b04 	ldr.w	r7, [sp], #4
    231e:	4770      	bx	lr

00002320 <NVIC_SetVectorTable>:
  * @param  Offset: Vector Table base offset field. This value must be a multiple
  *         of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{
    2320:	b480      	push	{r7}
    2322:	b083      	sub	sp, #12
    2324:	af00      	add	r7, sp, #0
    2326:	6078      	str	r0, [r7, #4]
    2328:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));

  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
    232a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    232e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2332:	683a      	ldr	r2, [r7, #0]
    2334:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
    2338:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    233c:	6879      	ldr	r1, [r7, #4]
    233e:	430a      	orrs	r2, r1
    2340:	609a      	str	r2, [r3, #8]
}
    2342:	370c      	adds	r7, #12
    2344:	46bd      	mov	sp, r7
    2346:	f85d 7b04 	ldr.w	r7, [sp], #4
    234a:	4770      	bx	lr

0000234c <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
    234c:	b480      	push	{r7}
    234e:	b083      	sub	sp, #12
    2350:	af00      	add	r7, sp, #0
    2352:	4602      	mov	r2, r0
    2354:	460b      	mov	r3, r1
    2356:	71fa      	strb	r2, [r7, #7]
    2358:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    235a:	79bb      	ldrb	r3, [r7, #6]
    235c:	2b00      	cmp	r3, #0
    235e:	d00c      	beq.n	237a <NVIC_SystemLPConfig+0x2e>
  {
    SCB->SCR |= LowPowerMode;
    2360:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2364:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2368:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    236c:	f2ce 0200 	movt	r2, #57344	; 0xe000
    2370:	6911      	ldr	r1, [r2, #16]
    2372:	79fa      	ldrb	r2, [r7, #7]
    2374:	430a      	orrs	r2, r1
    2376:	611a      	str	r2, [r3, #16]
    2378:	e00c      	b.n	2394 <NVIC_SystemLPConfig+0x48>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
    237a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    237e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2382:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    2386:	f2ce 0200 	movt	r2, #57344	; 0xe000
    238a:	6911      	ldr	r1, [r2, #16]
    238c:	79fa      	ldrb	r2, [r7, #7]
    238e:	43d2      	mvns	r2, r2
    2390:	400a      	ands	r2, r1
    2392:	611a      	str	r2, [r3, #16]
  }
}
    2394:	370c      	adds	r7, #12
    2396:	46bd      	mov	sp, r7
    2398:	f85d 7b04 	ldr.w	r7, [sp], #4
    239c:	4770      	bx	lr
    239e:	bf00      	nop

000023a0 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
    23a0:	b480      	push	{r7}
    23a2:	b083      	sub	sp, #12
    23a4:	af00      	add	r7, sp, #0
    23a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
    23a8:	687b      	ldr	r3, [r7, #4]
    23aa:	2b04      	cmp	r3, #4
    23ac:	d10c      	bne.n	23c8 <SysTick_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
    23ae:	f24e 0310 	movw	r3, #57360	; 0xe010
    23b2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23b6:	f24e 0210 	movw	r2, #57360	; 0xe010
    23ba:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23be:	6812      	ldr	r2, [r2, #0]
    23c0:	f042 0204 	orr.w	r2, r2, #4
    23c4:	601a      	str	r2, [r3, #0]
    23c6:	e00b      	b.n	23e0 <SysTick_CLKSourceConfig+0x40>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
    23c8:	f24e 0310 	movw	r3, #57360	; 0xe010
    23cc:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23d0:	f24e 0210 	movw	r2, #57360	; 0xe010
    23d4:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23d8:	6812      	ldr	r2, [r2, #0]
    23da:	f022 0204 	bic.w	r2, r2, #4
    23de:	601a      	str	r2, [r3, #0]
  }
}
    23e0:	370c      	adds	r7, #12
    23e2:	46bd      	mov	sp, r7
    23e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    23e8:	4770      	bx	lr
    23ea:	bf00      	nop

000023ec <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
    23ec:	b580      	push	{r7, lr}
    23ee:	b086      	sub	sp, #24
    23f0:	af00      	add	r7, sp, #0
    23f2:	60f8      	str	r0, [r7, #12]
    23f4:	60b9      	str	r1, [r7, #8]
    23f6:	607a      	str	r2, [r7, #4]
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
    23f8:	2038      	movs	r0, #56	; 0x38
    23fa:	f002 f9a3 	bl	4744 <pvPortMalloc>
    23fe:	6138      	str	r0, [r7, #16]
	if( pxCoRoutine )
    2400:	693b      	ldr	r3, [r7, #16]
    2402:	2b00      	cmp	r3, #0
    2404:	d058      	beq.n	24b8 <xCoRoutineCreate+0xcc>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
    2406:	f240 230c 	movw	r3, #524	; 0x20c
    240a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    240e:	681b      	ldr	r3, [r3, #0]
    2410:	2b00      	cmp	r3, #0
    2412:	d107      	bne.n	2424 <xCoRoutineCreate+0x38>
		{
			pxCurrentCoRoutine = pxCoRoutine;
    2414:	f240 230c 	movw	r3, #524	; 0x20c
    2418:	f2c2 0300 	movt	r3, #8192	; 0x2000
    241c:	693a      	ldr	r2, [r7, #16]
    241e:	601a      	str	r2, [r3, #0]
			prvInitialiseCoRoutineLists();
    2420:	f000 fa08 	bl	2834 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
    2424:	68bb      	ldr	r3, [r7, #8]
    2426:	2b01      	cmp	r3, #1
    2428:	d901      	bls.n	242e <xCoRoutineCreate+0x42>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
    242a:	2301      	movs	r3, #1
    242c:	60bb      	str	r3, [r7, #8]
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
    242e:	693b      	ldr	r3, [r7, #16]
    2430:	2200      	movs	r2, #0
    2432:	869a      	strh	r2, [r3, #52]	; 0x34
		pxCoRoutine->uxPriority = uxPriority;
    2434:	693b      	ldr	r3, [r7, #16]
    2436:	68ba      	ldr	r2, [r7, #8]
    2438:	62da      	str	r2, [r3, #44]	; 0x2c
		pxCoRoutine->uxIndex = uxIndex;
    243a:	693b      	ldr	r3, [r7, #16]
    243c:	687a      	ldr	r2, [r7, #4]
    243e:	631a      	str	r2, [r3, #48]	; 0x30
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    2440:	693b      	ldr	r3, [r7, #16]
    2442:	68fa      	ldr	r2, [r7, #12]
    2444:	601a      	str	r2, [r3, #0]

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    2446:	693b      	ldr	r3, [r7, #16]
    2448:	3304      	adds	r3, #4
    244a:	4618      	mov	r0, r3
    244c:	f000 fa7c 	bl	2948 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    2450:	693b      	ldr	r3, [r7, #16]
    2452:	3318      	adds	r3, #24
    2454:	4618      	mov	r0, r3
    2456:	f000 fa77 	bl	2948 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    245a:	693b      	ldr	r3, [r7, #16]
    245c:	693a      	ldr	r2, [r7, #16]
    245e:	611a      	str	r2, [r3, #16]
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    2460:	693b      	ldr	r3, [r7, #16]
    2462:	693a      	ldr	r2, [r7, #16]
    2464:	625a      	str	r2, [r3, #36]	; 0x24
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    2466:	68bb      	ldr	r3, [r7, #8]
    2468:	f1c3 0214 	rsb	r2, r3, #20
    246c:	693b      	ldr	r3, [r7, #16]
    246e:	619a      	str	r2, [r3, #24]
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
    2470:	693b      	ldr	r3, [r7, #16]
    2472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2474:	f240 2310 	movw	r3, #528	; 0x210
    2478:	f2c2 0300 	movt	r3, #8192	; 0x2000
    247c:	681b      	ldr	r3, [r3, #0]
    247e:	429a      	cmp	r2, r3
    2480:	d906      	bls.n	2490 <xCoRoutineCreate+0xa4>
    2482:	693b      	ldr	r3, [r7, #16]
    2484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2486:	f240 2310 	movw	r3, #528	; 0x210
    248a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    248e:	601a      	str	r2, [r3, #0]
    2490:	693b      	ldr	r3, [r7, #16]
    2492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2494:	4613      	mov	r3, r2
    2496:	009b      	lsls	r3, r3, #2
    2498:	4413      	add	r3, r2
    249a:	009b      	lsls	r3, r3, #2
    249c:	f240 12a0 	movw	r2, #416	; 0x1a0
    24a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    24a4:	441a      	add	r2, r3
    24a6:	693b      	ldr	r3, [r7, #16]
    24a8:	3304      	adds	r3, #4
    24aa:	4610      	mov	r0, r2
    24ac:	4619      	mov	r1, r3
    24ae:	f000 fa57 	bl	2960 <vListInsertEnd>

		xReturn = pdPASS;
    24b2:	2301      	movs	r3, #1
    24b4:	617b      	str	r3, [r7, #20]
    24b6:	e002      	b.n	24be <xCoRoutineCreate+0xd2>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    24b8:	f04f 33ff 	mov.w	r3, #4294967295
    24bc:	617b      	str	r3, [r7, #20]
	}
	
	return xReturn;	
    24be:	697b      	ldr	r3, [r7, #20]
}
    24c0:	4618      	mov	r0, r3
    24c2:	3718      	adds	r7, #24
    24c4:	46bd      	mov	sp, r7
    24c6:	bd80      	pop	{r7, pc}

000024c8 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
    24c8:	b580      	push	{r7, lr}
    24ca:	b084      	sub	sp, #16
    24cc:	af00      	add	r7, sp, #0
    24ce:	6078      	str	r0, [r7, #4]
    24d0:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    24d2:	f240 2314 	movw	r3, #532	; 0x214
    24d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24da:	681a      	ldr	r2, [r3, #0]
    24dc:	687b      	ldr	r3, [r7, #4]
    24de:	4413      	add	r3, r2
    24e0:	60fb      	str	r3, [r7, #12]

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    24e2:	f240 230c 	movw	r3, #524	; 0x20c
    24e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24ea:	681b      	ldr	r3, [r3, #0]
    24ec:	3304      	adds	r3, #4
    24ee:	4618      	mov	r0, r3
    24f0:	f000 fa96 	bl	2a20 <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    24f4:	f240 230c 	movw	r3, #524	; 0x20c
    24f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24fc:	681b      	ldr	r3, [r3, #0]
    24fe:	68fa      	ldr	r2, [r7, #12]
    2500:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xCoRoutineTickCount )
    2502:	f240 2314 	movw	r3, #532	; 0x214
    2506:	f2c2 0300 	movt	r3, #8192	; 0x2000
    250a:	681b      	ldr	r3, [r3, #0]
    250c:	68fa      	ldr	r2, [r7, #12]
    250e:	429a      	cmp	r2, r3
    2510:	d20f      	bcs.n	2532 <vCoRoutineAddToDelayedList+0x6a>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2512:	f240 13f4 	movw	r3, #500	; 0x1f4
    2516:	f2c2 0300 	movt	r3, #8192	; 0x2000
    251a:	681a      	ldr	r2, [r3, #0]
    251c:	f240 230c 	movw	r3, #524	; 0x20c
    2520:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2524:	681b      	ldr	r3, [r3, #0]
    2526:	3304      	adds	r3, #4
    2528:	4610      	mov	r0, r2
    252a:	4619      	mov	r1, r3
    252c:	f000 fa40 	bl	29b0 <vListInsert>
    2530:	e00e      	b.n	2550 <vCoRoutineAddToDelayedList+0x88>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2532:	f240 13f0 	movw	r3, #496	; 0x1f0
    2536:	f2c2 0300 	movt	r3, #8192	; 0x2000
    253a:	681a      	ldr	r2, [r3, #0]
    253c:	f240 230c 	movw	r3, #524	; 0x20c
    2540:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2544:	681b      	ldr	r3, [r3, #0]
    2546:	3304      	adds	r3, #4
    2548:	4610      	mov	r0, r2
    254a:	4619      	mov	r1, r3
    254c:	f000 fa30 	bl	29b0 <vListInsert>
	}

	if( pxEventList )
    2550:	683b      	ldr	r3, [r7, #0]
    2552:	2b00      	cmp	r3, #0
    2554:	d009      	beq.n	256a <vCoRoutineAddToDelayedList+0xa2>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    2556:	f240 230c 	movw	r3, #524	; 0x20c
    255a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    255e:	681b      	ldr	r3, [r3, #0]
    2560:	3318      	adds	r3, #24
    2562:	6838      	ldr	r0, [r7, #0]
    2564:	4619      	mov	r1, r3
    2566:	f000 fa23 	bl	29b0 <vListInsert>
	}
}
    256a:	3710      	adds	r7, #16
    256c:	46bd      	mov	sp, r7
    256e:	bd80      	pop	{r7, pc}

00002570 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
    2570:	b580      	push	{r7, lr}
    2572:	b082      	sub	sp, #8
    2574:	af00      	add	r7, sp, #0
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    2576:	e039      	b.n	25ec <prvCheckPendingReadyList+0x7c>
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
    2578:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    257c:	f380 8811 	msr	BASEPRI, r0
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
    2580:	f240 13f8 	movw	r3, #504	; 0x1f8
    2584:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2588:	68db      	ldr	r3, [r3, #12]
    258a:	68db      	ldr	r3, [r3, #12]
    258c:	607b      	str	r3, [r7, #4]
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    258e:	687b      	ldr	r3, [r7, #4]
    2590:	3318      	adds	r3, #24
    2592:	4618      	mov	r0, r3
    2594:	f000 fa44 	bl	2a20 <vListRemove>
		}
		portENABLE_INTERRUPTS();
    2598:	f04f 0000 	mov.w	r0, #0
    259c:	f380 8811 	msr	BASEPRI, r0

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    25a0:	687b      	ldr	r3, [r7, #4]
    25a2:	3304      	adds	r3, #4
    25a4:	4618      	mov	r0, r3
    25a6:	f000 fa3b 	bl	2a20 <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    25aa:	687b      	ldr	r3, [r7, #4]
    25ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25ae:	f240 2310 	movw	r3, #528	; 0x210
    25b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25b6:	681b      	ldr	r3, [r3, #0]
    25b8:	429a      	cmp	r2, r3
    25ba:	d906      	bls.n	25ca <prvCheckPendingReadyList+0x5a>
    25bc:	687b      	ldr	r3, [r7, #4]
    25be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25c0:	f240 2310 	movw	r3, #528	; 0x210
    25c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25c8:	601a      	str	r2, [r3, #0]
    25ca:	687b      	ldr	r3, [r7, #4]
    25cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25ce:	4613      	mov	r3, r2
    25d0:	009b      	lsls	r3, r3, #2
    25d2:	4413      	add	r3, r2
    25d4:	009b      	lsls	r3, r3, #2
    25d6:	f240 12a0 	movw	r2, #416	; 0x1a0
    25da:	f2c2 0200 	movt	r2, #8192	; 0x2000
    25de:	441a      	add	r2, r3
    25e0:	687b      	ldr	r3, [r7, #4]
    25e2:	3304      	adds	r3, #4
    25e4:	4610      	mov	r0, r2
    25e6:	4619      	mov	r1, r3
    25e8:	f000 f9ba 	bl	2960 <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    25ec:	f240 13f8 	movw	r3, #504	; 0x1f8
    25f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25f4:	681b      	ldr	r3, [r3, #0]
    25f6:	2b00      	cmp	r3, #0
    25f8:	d1be      	bne.n	2578 <prvCheckPendingReadyList+0x8>
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
    25fa:	3708      	adds	r7, #8
    25fc:	46bd      	mov	sp, r7
    25fe:	bd80      	pop	{r7, pc}

00002600 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
    2600:	b580      	push	{r7, lr}
    2602:	b082      	sub	sp, #8
    2604:	af00      	add	r7, sp, #0
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    2606:	f001 fb0b 	bl	3c20 <xTaskGetTickCount>
    260a:	4602      	mov	r2, r0
    260c:	f240 2318 	movw	r3, #536	; 0x218
    2610:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2614:	681b      	ldr	r3, [r3, #0]
    2616:	1ad2      	subs	r2, r2, r3
    2618:	f240 231c 	movw	r3, #540	; 0x21c
    261c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2620:	601a      	str	r2, [r3, #0]
	while( xPassedTicks )
    2622:	e085      	b.n	2730 <prvCheckDelayedList+0x130>
	{
		xCoRoutineTickCount++;
    2624:	f240 2314 	movw	r3, #532	; 0x214
    2628:	f2c2 0300 	movt	r3, #8192	; 0x2000
    262c:	681b      	ldr	r3, [r3, #0]
    262e:	1c5a      	adds	r2, r3, #1
    2630:	f240 2314 	movw	r3, #532	; 0x214
    2634:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2638:	601a      	str	r2, [r3, #0]
		xPassedTicks--;
    263a:	f240 231c 	movw	r3, #540	; 0x21c
    263e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2642:	681b      	ldr	r3, [r3, #0]
    2644:	1e5a      	subs	r2, r3, #1
    2646:	f240 231c 	movw	r3, #540	; 0x21c
    264a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    264e:	601a      	str	r2, [r3, #0]

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
    2650:	f240 2314 	movw	r3, #532	; 0x214
    2654:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2658:	681b      	ldr	r3, [r3, #0]
    265a:	2b00      	cmp	r3, #0
    265c:	d116      	bne.n	268c <prvCheckDelayedList+0x8c>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
    265e:	f240 13f0 	movw	r3, #496	; 0x1f0
    2662:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2666:	681b      	ldr	r3, [r3, #0]
    2668:	607b      	str	r3, [r7, #4]
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    266a:	f240 13f4 	movw	r3, #500	; 0x1f4
    266e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2672:	681a      	ldr	r2, [r3, #0]
    2674:	f240 13f0 	movw	r3, #496	; 0x1f0
    2678:	f2c2 0300 	movt	r3, #8192	; 0x2000
    267c:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedCoRoutineList = pxTemp;
    267e:	f240 13f4 	movw	r3, #500	; 0x1f4
    2682:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2686:	687a      	ldr	r2, [r7, #4]
    2688:	601a      	str	r2, [r3, #0]
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    268a:	e049      	b.n	2720 <prvCheckDelayedList+0x120>
    268c:	e048      	b.n	2720 <prvCheckDelayedList+0x120>
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    268e:	f240 13f0 	movw	r3, #496	; 0x1f0
    2692:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2696:	681b      	ldr	r3, [r3, #0]
    2698:	68db      	ldr	r3, [r3, #12]
    269a:	68db      	ldr	r3, [r3, #12]
    269c:	603b      	str	r3, [r7, #0]

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
    269e:	683b      	ldr	r3, [r7, #0]
    26a0:	685a      	ldr	r2, [r3, #4]
    26a2:	f240 2314 	movw	r3, #532	; 0x214
    26a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26aa:	681b      	ldr	r3, [r3, #0]
    26ac:	429a      	cmp	r2, r3
    26ae:	d900      	bls.n	26b2 <prvCheckDelayedList+0xb2>
			{			
				/* Timeout not yet expired. */																			
				break;																				
    26b0:	e03e      	b.n	2730 <prvCheckDelayedList+0x130>
			}																						

			portDISABLE_INTERRUPTS();
    26b2:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    26b6:	f380 8811 	msr	BASEPRI, r0
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
    26ba:	683b      	ldr	r3, [r7, #0]
    26bc:	3304      	adds	r3, #4
    26be:	4618      	mov	r0, r3
    26c0:	f000 f9ae 	bl	2a20 <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
    26c4:	683b      	ldr	r3, [r7, #0]
    26c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    26c8:	2b00      	cmp	r3, #0
    26ca:	d004      	beq.n	26d6 <prvCheckDelayedList+0xd6>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
    26cc:	683b      	ldr	r3, [r7, #0]
    26ce:	3318      	adds	r3, #24
    26d0:	4618      	mov	r0, r3
    26d2:	f000 f9a5 	bl	2a20 <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    26d6:	f04f 0000 	mov.w	r0, #0
    26da:	f380 8811 	msr	BASEPRI, r0

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    26de:	683b      	ldr	r3, [r7, #0]
    26e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    26e2:	f240 2310 	movw	r3, #528	; 0x210
    26e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26ea:	681b      	ldr	r3, [r3, #0]
    26ec:	429a      	cmp	r2, r3
    26ee:	d906      	bls.n	26fe <prvCheckDelayedList+0xfe>
    26f0:	683b      	ldr	r3, [r7, #0]
    26f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    26f4:	f240 2310 	movw	r3, #528	; 0x210
    26f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26fc:	601a      	str	r2, [r3, #0]
    26fe:	683b      	ldr	r3, [r7, #0]
    2700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2702:	4613      	mov	r3, r2
    2704:	009b      	lsls	r3, r3, #2
    2706:	4413      	add	r3, r2
    2708:	009b      	lsls	r3, r3, #2
    270a:	f240 12a0 	movw	r2, #416	; 0x1a0
    270e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2712:	441a      	add	r2, r3
    2714:	683b      	ldr	r3, [r7, #0]
    2716:	3304      	adds	r3, #4
    2718:	4610      	mov	r0, r2
    271a:	4619      	mov	r1, r3
    271c:	f000 f920 	bl	2960 <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    2720:	f240 13f0 	movw	r3, #496	; 0x1f0
    2724:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2728:	681b      	ldr	r3, [r3, #0]
    272a:	681b      	ldr	r3, [r3, #0]
    272c:	2b00      	cmp	r3, #0
    272e:	d1ae      	bne.n	268e <prvCheckDelayedList+0x8e>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    2730:	f240 231c 	movw	r3, #540	; 0x21c
    2734:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2738:	681b      	ldr	r3, [r3, #0]
    273a:	2b00      	cmp	r3, #0
    273c:	f47f af72 	bne.w	2624 <prvCheckDelayedList+0x24>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
    2740:	f240 2314 	movw	r3, #532	; 0x214
    2744:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2748:	681a      	ldr	r2, [r3, #0]
    274a:	f240 2318 	movw	r3, #536	; 0x218
    274e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2752:	601a      	str	r2, [r3, #0]
}
    2754:	3708      	adds	r7, #8
    2756:	46bd      	mov	sp, r7
    2758:	bd80      	pop	{r7, pc}
    275a:	bf00      	nop

0000275c <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    275c:	b580      	push	{r7, lr}
    275e:	b082      	sub	sp, #8
    2760:	af00      	add	r7, sp, #0
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
    2762:	f7ff ff05 	bl	2570 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
    2766:	f7ff ff4b 	bl	2600 <prvCheckDelayedList>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    276a:	e012      	b.n	2792 <vCoRoutineSchedule+0x36>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    276c:	f240 2310 	movw	r3, #528	; 0x210
    2770:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2774:	681b      	ldr	r3, [r3, #0]
    2776:	2b00      	cmp	r3, #0
    2778:	d100      	bne.n	277c <vCoRoutineSchedule+0x20>
		{
			/* No more co-routines to check. */
			return;
    277a:	e057      	b.n	282c <vCoRoutineSchedule+0xd0>
		}
		--uxTopCoRoutineReadyPriority;
    277c:	f240 2310 	movw	r3, #528	; 0x210
    2780:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2784:	681b      	ldr	r3, [r3, #0]
    2786:	1e5a      	subs	r2, r3, #1
    2788:	f240 2310 	movw	r3, #528	; 0x210
    278c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2790:	601a      	str	r2, [r3, #0]

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    2792:	f240 2310 	movw	r3, #528	; 0x210
    2796:	f2c2 0300 	movt	r3, #8192	; 0x2000
    279a:	6819      	ldr	r1, [r3, #0]
    279c:	f240 12a0 	movw	r2, #416	; 0x1a0
    27a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27a4:	460b      	mov	r3, r1
    27a6:	009b      	lsls	r3, r3, #2
    27a8:	440b      	add	r3, r1
    27aa:	009b      	lsls	r3, r3, #2
    27ac:	4413      	add	r3, r2
    27ae:	681b      	ldr	r3, [r3, #0]
    27b0:	2b00      	cmp	r3, #0
    27b2:	d0db      	beq.n	276c <vCoRoutineSchedule+0x10>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    27b4:	f240 2310 	movw	r3, #528	; 0x210
    27b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27bc:	681a      	ldr	r2, [r3, #0]
    27be:	4613      	mov	r3, r2
    27c0:	009b      	lsls	r3, r3, #2
    27c2:	4413      	add	r3, r2
    27c4:	009b      	lsls	r3, r3, #2
    27c6:	f240 12a0 	movw	r2, #416	; 0x1a0
    27ca:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27ce:	4413      	add	r3, r2
    27d0:	607b      	str	r3, [r7, #4]
    27d2:	687b      	ldr	r3, [r7, #4]
    27d4:	685b      	ldr	r3, [r3, #4]
    27d6:	685a      	ldr	r2, [r3, #4]
    27d8:	687b      	ldr	r3, [r7, #4]
    27da:	605a      	str	r2, [r3, #4]
    27dc:	687b      	ldr	r3, [r7, #4]
    27de:	685a      	ldr	r2, [r3, #4]
    27e0:	687b      	ldr	r3, [r7, #4]
    27e2:	3308      	adds	r3, #8
    27e4:	429a      	cmp	r2, r3
    27e6:	d104      	bne.n	27f2 <vCoRoutineSchedule+0x96>
    27e8:	687b      	ldr	r3, [r7, #4]
    27ea:	685b      	ldr	r3, [r3, #4]
    27ec:	685a      	ldr	r2, [r3, #4]
    27ee:	687b      	ldr	r3, [r7, #4]
    27f0:	605a      	str	r2, [r3, #4]
    27f2:	687b      	ldr	r3, [r7, #4]
    27f4:	685b      	ldr	r3, [r3, #4]
    27f6:	68da      	ldr	r2, [r3, #12]
    27f8:	f240 230c 	movw	r3, #524	; 0x20c
    27fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2800:	601a      	str	r2, [r3, #0]

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    2802:	f240 230c 	movw	r3, #524	; 0x20c
    2806:	f2c2 0300 	movt	r3, #8192	; 0x2000
    280a:	681b      	ldr	r3, [r3, #0]
    280c:	681a      	ldr	r2, [r3, #0]
    280e:	f240 230c 	movw	r3, #524	; 0x20c
    2812:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2816:	6819      	ldr	r1, [r3, #0]
    2818:	f240 230c 	movw	r3, #524	; 0x20c
    281c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2820:	681b      	ldr	r3, [r3, #0]
    2822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2824:	4608      	mov	r0, r1
    2826:	4619      	mov	r1, r3
    2828:	4790      	blx	r2

	return;
    282a:	bf00      	nop
}
    282c:	3708      	adds	r7, #8
    282e:	46bd      	mov	sp, r7
    2830:	bd80      	pop	{r7, pc}
    2832:	bf00      	nop

00002834 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
    2834:	b580      	push	{r7, lr}
    2836:	b082      	sub	sp, #8
    2838:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    283a:	2300      	movs	r3, #0
    283c:	607b      	str	r3, [r7, #4]
    283e:	e00f      	b.n	2860 <prvInitialiseCoRoutineLists+0x2c>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    2840:	687a      	ldr	r2, [r7, #4]
    2842:	4613      	mov	r3, r2
    2844:	009b      	lsls	r3, r3, #2
    2846:	4413      	add	r3, r2
    2848:	009b      	lsls	r3, r3, #2
    284a:	f240 12a0 	movw	r2, #416	; 0x1a0
    284e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2852:	4413      	add	r3, r2
    2854:	4618      	mov	r0, r3
    2856:	f000 f857 	bl	2908 <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    285a:	687b      	ldr	r3, [r7, #4]
    285c:	3301      	adds	r3, #1
    285e:	607b      	str	r3, [r7, #4]
    2860:	687b      	ldr	r3, [r7, #4]
    2862:	2b01      	cmp	r3, #1
    2864:	d9ec      	bls.n	2840 <prvInitialiseCoRoutineLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
    2866:	f240 10c8 	movw	r0, #456	; 0x1c8
    286a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    286e:	f000 f84b 	bl	2908 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
    2872:	f240 10dc 	movw	r0, #476	; 0x1dc
    2876:	f2c2 0000 	movt	r0, #8192	; 0x2000
    287a:	f000 f845 	bl	2908 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
    287e:	f240 10f8 	movw	r0, #504	; 0x1f8
    2882:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2886:	f000 f83f 	bl	2908 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    288a:	f240 13f0 	movw	r3, #496	; 0x1f0
    288e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2892:	f240 12c8 	movw	r2, #456	; 0x1c8
    2896:	f2c2 0200 	movt	r2, #8192	; 0x2000
    289a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    289c:	f240 13f4 	movw	r3, #500	; 0x1f4
    28a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28a4:	f240 12dc 	movw	r2, #476	; 0x1dc
    28a8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    28ac:	601a      	str	r2, [r3, #0]
}
    28ae:	3708      	adds	r7, #8
    28b0:	46bd      	mov	sp, r7
    28b2:	bd80      	pop	{r7, pc}

000028b4 <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
    28b4:	b580      	push	{r7, lr}
    28b6:	b084      	sub	sp, #16
    28b8:	af00      	add	r7, sp, #0
    28ba:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    28bc:	687b      	ldr	r3, [r7, #4]
    28be:	68db      	ldr	r3, [r3, #12]
    28c0:	68db      	ldr	r3, [r3, #12]
    28c2:	60bb      	str	r3, [r7, #8]
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    28c4:	68bb      	ldr	r3, [r7, #8]
    28c6:	3318      	adds	r3, #24
    28c8:	4618      	mov	r0, r3
    28ca:	f000 f8a9 	bl	2a20 <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    28ce:	68bb      	ldr	r3, [r7, #8]
    28d0:	3318      	adds	r3, #24
    28d2:	f240 10f8 	movw	r0, #504	; 0x1f8
    28d6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    28da:	4619      	mov	r1, r3
    28dc:	f000 f840 	bl	2960 <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
    28e0:	68bb      	ldr	r3, [r7, #8]
    28e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    28e4:	f240 230c 	movw	r3, #524	; 0x20c
    28e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28ec:	681b      	ldr	r3, [r3, #0]
    28ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    28f0:	429a      	cmp	r2, r3
    28f2:	d302      	bcc.n	28fa <xCoRoutineRemoveFromEventList+0x46>
	{
		xReturn = pdTRUE;
    28f4:	2301      	movs	r3, #1
    28f6:	60fb      	str	r3, [r7, #12]
    28f8:	e001      	b.n	28fe <xCoRoutineRemoveFromEventList+0x4a>
	}
	else
	{
		xReturn = pdFALSE;
    28fa:	2300      	movs	r3, #0
    28fc:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    28fe:	68fb      	ldr	r3, [r7, #12]
}
    2900:	4618      	mov	r0, r3
    2902:	3710      	adds	r7, #16
    2904:	46bd      	mov	sp, r7
    2906:	bd80      	pop	{r7, pc}

00002908 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    2908:	b480      	push	{r7}
    290a:	b083      	sub	sp, #12
    290c:	af00      	add	r7, sp, #0
    290e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    2910:	687b      	ldr	r3, [r7, #4]
    2912:	f103 0208 	add.w	r2, r3, #8
    2916:	687b      	ldr	r3, [r7, #4]
    2918:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    291a:	687b      	ldr	r3, [r7, #4]
    291c:	f04f 32ff 	mov.w	r2, #4294967295
    2920:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    2922:	687b      	ldr	r3, [r7, #4]
    2924:	f103 0208 	add.w	r2, r3, #8
    2928:	687b      	ldr	r3, [r7, #4]
    292a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    292c:	687b      	ldr	r3, [r7, #4]
    292e:	f103 0208 	add.w	r2, r3, #8
    2932:	687b      	ldr	r3, [r7, #4]
    2934:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    2936:	687b      	ldr	r3, [r7, #4]
    2938:	2200      	movs	r2, #0
    293a:	601a      	str	r2, [r3, #0]
}
    293c:	370c      	adds	r7, #12
    293e:	46bd      	mov	sp, r7
    2940:	f85d 7b04 	ldr.w	r7, [sp], #4
    2944:	4770      	bx	lr
    2946:	bf00      	nop

00002948 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
    2948:	b480      	push	{r7}
    294a:	b083      	sub	sp, #12
    294c:	af00      	add	r7, sp, #0
    294e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    2950:	687b      	ldr	r3, [r7, #4]
    2952:	2200      	movs	r2, #0
    2954:	611a      	str	r2, [r3, #16]
}
    2956:	370c      	adds	r7, #12
    2958:	46bd      	mov	sp, r7
    295a:	f85d 7b04 	ldr.w	r7, [sp], #4
    295e:	4770      	bx	lr

00002960 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    2960:	b480      	push	{r7}
    2962:	b085      	sub	sp, #20
    2964:	af00      	add	r7, sp, #0
    2966:	6078      	str	r0, [r7, #4]
    2968:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    296a:	687b      	ldr	r3, [r7, #4]
    296c:	685b      	ldr	r3, [r3, #4]
    296e:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
    2970:	68fb      	ldr	r3, [r7, #12]
    2972:	685a      	ldr	r2, [r3, #4]
    2974:	683b      	ldr	r3, [r7, #0]
    2976:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
    2978:	687b      	ldr	r3, [r7, #4]
    297a:	685a      	ldr	r2, [r3, #4]
    297c:	683b      	ldr	r3, [r7, #0]
    297e:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2980:	68fb      	ldr	r3, [r7, #12]
    2982:	685b      	ldr	r3, [r3, #4]
    2984:	683a      	ldr	r2, [r7, #0]
    2986:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    2988:	68fb      	ldr	r3, [r7, #12]
    298a:	683a      	ldr	r2, [r7, #0]
    298c:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    298e:	687b      	ldr	r3, [r7, #4]
    2990:	683a      	ldr	r2, [r7, #0]
    2992:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2994:	683b      	ldr	r3, [r7, #0]
    2996:	687a      	ldr	r2, [r7, #4]
    2998:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    299a:	687b      	ldr	r3, [r7, #4]
    299c:	681b      	ldr	r3, [r3, #0]
    299e:	1c5a      	adds	r2, r3, #1
    29a0:	687b      	ldr	r3, [r7, #4]
    29a2:	601a      	str	r2, [r3, #0]
}
    29a4:	3714      	adds	r7, #20
    29a6:	46bd      	mov	sp, r7
    29a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    29ac:	4770      	bx	lr
    29ae:	bf00      	nop

000029b0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    29b0:	b480      	push	{r7}
    29b2:	b085      	sub	sp, #20
    29b4:	af00      	add	r7, sp, #0
    29b6:	6078      	str	r0, [r7, #4]
    29b8:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    29ba:	683b      	ldr	r3, [r7, #0]
    29bc:	681b      	ldr	r3, [r3, #0]
    29be:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    29c0:	68bb      	ldr	r3, [r7, #8]
    29c2:	f1b3 3fff 	cmp.w	r3, #4294967295
    29c6:	d103      	bne.n	29d0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    29c8:	687b      	ldr	r3, [r7, #4]
    29ca:	691b      	ldr	r3, [r3, #16]
    29cc:	60fb      	str	r3, [r7, #12]
    29ce:	e00c      	b.n	29ea <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    29d0:	687b      	ldr	r3, [r7, #4]
    29d2:	3308      	adds	r3, #8
    29d4:	60fb      	str	r3, [r7, #12]
    29d6:	e002      	b.n	29de <vListInsert+0x2e>
    29d8:	68fb      	ldr	r3, [r7, #12]
    29da:	685b      	ldr	r3, [r3, #4]
    29dc:	60fb      	str	r3, [r7, #12]
    29de:	68fb      	ldr	r3, [r7, #12]
    29e0:	685b      	ldr	r3, [r3, #4]
    29e2:	681a      	ldr	r2, [r3, #0]
    29e4:	68bb      	ldr	r3, [r7, #8]
    29e6:	429a      	cmp	r2, r3
    29e8:	d9f6      	bls.n	29d8 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    29ea:	68fb      	ldr	r3, [r7, #12]
    29ec:	685a      	ldr	r2, [r3, #4]
    29ee:	683b      	ldr	r3, [r7, #0]
    29f0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    29f2:	683b      	ldr	r3, [r7, #0]
    29f4:	685b      	ldr	r3, [r3, #4]
    29f6:	683a      	ldr	r2, [r7, #0]
    29f8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    29fa:	683b      	ldr	r3, [r7, #0]
    29fc:	68fa      	ldr	r2, [r7, #12]
    29fe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    2a00:	68fb      	ldr	r3, [r7, #12]
    2a02:	683a      	ldr	r2, [r7, #0]
    2a04:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2a06:	683b      	ldr	r3, [r7, #0]
    2a08:	687a      	ldr	r2, [r7, #4]
    2a0a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    2a0c:	687b      	ldr	r3, [r7, #4]
    2a0e:	681b      	ldr	r3, [r3, #0]
    2a10:	1c5a      	adds	r2, r3, #1
    2a12:	687b      	ldr	r3, [r7, #4]
    2a14:	601a      	str	r2, [r3, #0]
}
    2a16:	3714      	adds	r7, #20
    2a18:	46bd      	mov	sp, r7
    2a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a1e:	4770      	bx	lr

00002a20 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    2a20:	b480      	push	{r7}
    2a22:	b085      	sub	sp, #20
    2a24:	af00      	add	r7, sp, #0
    2a26:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    2a28:	687b      	ldr	r3, [r7, #4]
    2a2a:	685b      	ldr	r3, [r3, #4]
    2a2c:	687a      	ldr	r2, [r7, #4]
    2a2e:	6892      	ldr	r2, [r2, #8]
    2a30:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    2a32:	687b      	ldr	r3, [r7, #4]
    2a34:	689b      	ldr	r3, [r3, #8]
    2a36:	687a      	ldr	r2, [r7, #4]
    2a38:	6852      	ldr	r2, [r2, #4]
    2a3a:	605a      	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    2a3c:	687b      	ldr	r3, [r7, #4]
    2a3e:	691b      	ldr	r3, [r3, #16]
    2a40:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    2a42:	68fb      	ldr	r3, [r7, #12]
    2a44:	685a      	ldr	r2, [r3, #4]
    2a46:	687b      	ldr	r3, [r7, #4]
    2a48:	429a      	cmp	r2, r3
    2a4a:	d103      	bne.n	2a54 <vListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    2a4c:	687b      	ldr	r3, [r7, #4]
    2a4e:	689a      	ldr	r2, [r3, #8]
    2a50:	68fb      	ldr	r3, [r7, #12]
    2a52:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
    2a54:	687b      	ldr	r3, [r7, #4]
    2a56:	2200      	movs	r2, #0
    2a58:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
    2a5a:	68fb      	ldr	r3, [r7, #12]
    2a5c:	681b      	ldr	r3, [r3, #0]
    2a5e:	1e5a      	subs	r2, r3, #1
    2a60:	68fb      	ldr	r3, [r7, #12]
    2a62:	601a      	str	r2, [r3, #0]
}
    2a64:	3714      	adds	r7, #20
    2a66:	46bd      	mov	sp, r7
    2a68:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a6c:	4770      	bx	lr
    2a6e:	bf00      	nop

00002a70 <vTask_0>:
extern void  send_mode();
extern void  send_debug();
extern void  send_nav_ref();

void vTask_0()
{
    2a70:	b580      	push	{r7, lr}
    2a72:	af00      	add	r7, sp, #0
    last_radio_from_ppm(); //ppm.h
    2a74:	f00e fa4c 	bl	10f10 <last_radio_from_ppm>
}
    2a78:	bd80      	pop	{r7, pc}
    2a7a:	bf00      	nop

00002a7c <vTask_1>:

void  vTask_1()
{
    2a7c:	b580      	push	{r7, lr}
    2a7e:	af00      	add	r7, sp, #0
    to_autopilot_from_last_radio();  //main_auto.c
    2a80:	f00e fe00 	bl	11684 <to_autopilot_from_last_radio>
    spi_reset(); // spi_fbw.h
    2a84:	f00e fd3c 	bl	11500 <spi_reset>
}
    2a88:	bd80      	pop	{r7, pc}
    2a8a:	bf00      	nop

00002a8c <vTask_2>:

void  vTask_2()
{
    2a8c:	b580      	push	{r7, lr}
    2a8e:	af00      	add	r7, sp, #0
    check_mega128_values_task(); // main_auto.c
    2a90:	f00e ff40 	bl	11914 <check_mega128_values_task>
}
    2a94:	bd80      	pop	{r7, pc}
    2a96:	bf00      	nop

00002a98 <vTask_3>:

void vTask_3()
{
    2a98:	b580      	push	{r7, lr}
    2a9a:	af00      	add	r7, sp, #0
    servo_transmit(); //servo.h
    2a9c:	f00f f812 	bl	11ac4 <servo_transmit>
}
    2aa0:	bd80      	pop	{r7, pc}
    2aa2:	bf00      	nop

00002aa4 <vTask_4>:

void vTask_4()
{
    2aa4:	b580      	push	{r7, lr}
    2aa6:	af00      	add	r7, sp, #0
    check_failsafe_task(); //main_auto.c
    2aa8:	f00e ff2a 	bl	11900 <check_failsafe_task>
}
    2aac:	bd80      	pop	{r7, pc}
    2aae:	bf00      	nop

00002ab0 <vTask_5>:

void vTask_5()
{
    2ab0:	b580      	push	{r7, lr}
    2ab2:	af00      	add	r7, sp, #0
    radio_control_task(); //main_auto.c
    2ab4:	f007 fe1a 	bl	a6ec <radio_control_task>
    ir_gain_calib();
    2ab8:	f00a f86e 	bl	cb98 <ir_gain_calib>
}
    2abc:	bd80      	pop	{r7, pc}
    2abe:	bf00      	nop

00002ac0 <vTask_6>:

void vTask_6()
{
    2ac0:	b580      	push	{r7, lr}
    2ac2:	af00      	add	r7, sp, #0
    ir_update();
    2ac4:	f00a f82a 	bl	cb1c <ir_update>
    estimator_update_state_infrared();
    2ac8:	f00d fab0 	bl	1002c <estimator_update_state_infrared>
    roll_pitch_pid_run();
    2acc:	f00a f894 	bl	cbf8 <roll_pitch_pid_run>
}
    2ad0:	bd80      	pop	{r7, pc}
    2ad2:	bf00      	nop

00002ad4 <vTask_7>:

void vTask_7()
{
    2ad4:	b580      	push	{r7, lr}
    2ad6:	af00      	add	r7, sp, #0
    link_fbw_send(); // link_fbw.h
    2ad8:	f009 fa92 	bl	c000 <link_fbw_send>
}
    2adc:	bd80      	pop	{r7, pc}
    2ade:	bf00      	nop

00002ae0 <vTask_8>:

void vTask_8()
{
    2ae0:	b580      	push	{r7, lr}
    2ae2:	af00      	add	r7, sp, #0
    parse_gps_msg();
    2ae4:	f009 fd64 	bl	c5b0 <parse_gps_msg>
    send_gps_pos();
    2ae8:	f009 f90e 	bl	bd08 <send_gps_pos>
    send_radIR();
    2aec:	f009 f91e 	bl	bd2c <send_radIR>
    send_takeOff();
    2af0:	f009 f922 	bl	bd38 <send_takeOff>
}
    2af4:	bd80      	pop	{r7, pc}
    2af6:	bf00      	nop

00002af8 <vTask_9>:

void vTask_9()
{
    2af8:	b580      	push	{r7, lr}
    2afa:	af00      	add	r7, sp, #0
    nav_home();
    2afc:	f00d f818 	bl	fb30 <nav_home>
    nav_update();
    2b00:	f00d f83c 	bl	fb7c <nav_update>
    course_pid_run();
    2b04:	f00a f964 	bl	cdd0 <course_pid_run>
}
    2b08:	bd80      	pop	{r7, pc}
    2b0a:	bf00      	nop

00002b0c <vTask_10>:

void vTask_10()
{
    2b0c:	b580      	push	{r7, lr}
    2b0e:	af00      	add	r7, sp, #0
    altitude_pid_run();
    2b10:	f00a fbe6 	bl	d2e0 <altitude_pid_run>
}
    2b14:	bd80      	pop	{r7, pc}
    2b16:	bf00      	nop

00002b18 <vTask_11>:

void vTask_11()
{
    2b18:	b580      	push	{r7, lr}
    2b1a:	af00      	add	r7, sp, #0
    climb_pid_run();
    2b1c:	f00a fa10 	bl	cf40 <climb_pid_run>
}
    2b20:	bd80      	pop	{r7, pc}
    2b22:	bf00      	nop

00002b24 <vTask_12>:

void vTask_12()
{
    2b24:	b580      	push	{r7, lr}
    2b26:	af00      	add	r7, sp, #0
    send_boot();
    2b28:	f002 f8a8 	bl	4c7c <send_boot>
    send_attitude();
    2b2c:	f003 f876 	bl	5c1c <send_attitude>
    send_adc();
    2b30:	f003 fd68 	bl	6604 <send_adc>
    send_settings();
    2b34:	f003 ffee 	bl	6b14 <send_settings>
    send_desired();
    2b38:	f004 fbf0 	bl	731c <send_desired>
    send_bat();
    2b3c:	f005 fb1e 	bl	817c <send_bat>
    send_climb();
    2b40:	f005 fed2 	bl	88e8 <send_climb>
    send_mode();
    2b44:	f006 fc42 	bl	93cc <send_mode>
    send_debug();
    2b48:	f006 ff14 	bl	9974 <send_debug>
    send_nav_ref();
    2b4c:	f007 f9e8 	bl	9f20 <send_nav_ref>
}
    2b50:	bd80      	pop	{r7, pc}
    2b52:	bf00      	nop

00002b54 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
    2b54:	b580      	push	{r7, lr}
    2b56:	b084      	sub	sp, #16
    2b58:	af00      	add	r7, sp, #0
    2b5a:	6078      	str	r0, [r7, #4]
    2b5c:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn = pdPASS;
    2b5e:	2301      	movs	r3, #1
    2b60:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	/* If the queue being reset has already been used (has not just been
	created), then only reset the queue if its event lists are empty. */
	if( xNewQueue != pdTRUE )
    2b62:	683b      	ldr	r3, [r7, #0]
    2b64:	2b01      	cmp	r3, #1
    2b66:	d00b      	beq.n	2b80 <xQueueGenericReset+0x2c>
	{
		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2b68:	687b      	ldr	r3, [r7, #4]
    2b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2b6c:	2b00      	cmp	r3, #0
    2b6e:	d001      	beq.n	2b74 <xQueueGenericReset+0x20>
		{
			xReturn = pdFAIL;
    2b70:	2300      	movs	r3, #0
    2b72:	60fb      	str	r3, [r7, #12]
		}

		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2b74:	687b      	ldr	r3, [r7, #4]
    2b76:	691b      	ldr	r3, [r3, #16]
    2b78:	2b00      	cmp	r3, #0
    2b7a:	d001      	beq.n	2b80 <xQueueGenericReset+0x2c>
		{
			xReturn = pdFAIL;
    2b7c:	2300      	movs	r3, #0
    2b7e:	60fb      	str	r3, [r7, #12]
		}
	}

	if( xReturn == pdPASS )
    2b80:	68fb      	ldr	r3, [r7, #12]
    2b82:	2b01      	cmp	r3, #1
    2b84:	d12f      	bne.n	2be6 <xQueueGenericReset+0x92>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    2b86:	687b      	ldr	r3, [r7, #4]
    2b88:	681a      	ldr	r2, [r3, #0]
    2b8a:	687b      	ldr	r3, [r7, #4]
    2b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2b8e:	6879      	ldr	r1, [r7, #4]
    2b90:	6c09      	ldr	r1, [r1, #64]	; 0x40
    2b92:	fb01 f303 	mul.w	r3, r1, r3
    2b96:	441a      	add	r2, r3
    2b98:	687b      	ldr	r3, [r7, #4]
    2b9a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    2b9c:	687b      	ldr	r3, [r7, #4]
    2b9e:	2200      	movs	r2, #0
    2ba0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    2ba2:	687b      	ldr	r3, [r7, #4]
    2ba4:	681a      	ldr	r2, [r3, #0]
    2ba6:	687b      	ldr	r3, [r7, #4]
    2ba8:	609a      	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
    2baa:	687b      	ldr	r3, [r7, #4]
    2bac:	681a      	ldr	r2, [r3, #0]
    2bae:	687b      	ldr	r3, [r7, #4]
    2bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2bb2:	3b01      	subs	r3, #1
    2bb4:	6879      	ldr	r1, [r7, #4]
    2bb6:	6c09      	ldr	r1, [r1, #64]	; 0x40
    2bb8:	fb01 f303 	mul.w	r3, r1, r3
    2bbc:	441a      	add	r2, r3
    2bbe:	687b      	ldr	r3, [r7, #4]
    2bc0:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
    2bc2:	687b      	ldr	r3, [r7, #4]
    2bc4:	f04f 32ff 	mov.w	r2, #4294967295
    2bc8:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
    2bca:	687b      	ldr	r3, [r7, #4]
    2bcc:	f04f 32ff 	mov.w	r2, #4294967295
    2bd0:	649a      	str	r2, [r3, #72]	; 0x48

		/* Ensure the event queues start with the correct state. */
		vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    2bd2:	687b      	ldr	r3, [r7, #4]
    2bd4:	3310      	adds	r3, #16
    2bd6:	4618      	mov	r0, r3
    2bd8:	f7ff fe96 	bl	2908 <vListInitialise>
		vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    2bdc:	687b      	ldr	r3, [r7, #4]
    2bde:	3324      	adds	r3, #36	; 0x24
    2be0:	4618      	mov	r0, r3
    2be2:	f7ff fe91 	bl	2908 <vListInitialise>
	}

	return xReturn;
    2be6:	68fb      	ldr	r3, [r7, #12]
}
    2be8:	4618      	mov	r0, r3
    2bea:	3710      	adds	r7, #16
    2bec:	46bd      	mov	sp, r7
    2bee:	bd80      	pop	{r7, pc}

00002bf0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
    2bf0:	b580      	push	{r7, lr}
    2bf2:	b088      	sub	sp, #32
    2bf4:	af00      	add	r7, sp, #0
    2bf6:	60f8      	str	r0, [r7, #12]
    2bf8:	60b9      	str	r1, [r7, #8]
    2bfa:	4613      	mov	r3, r2
    2bfc:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    2bfe:	2300      	movs	r3, #0
    2c00:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    2c02:	68fb      	ldr	r3, [r7, #12]
    2c04:	2b00      	cmp	r3, #0
    2c06:	d026      	beq.n	2c56 <xQueueGenericCreate+0x66>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    2c08:	204c      	movs	r0, #76	; 0x4c
    2c0a:	f001 fd9b 	bl	4744 <pvPortMalloc>
    2c0e:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
    2c10:	69bb      	ldr	r3, [r7, #24]
    2c12:	2b00      	cmp	r3, #0
    2c14:	d01f      	beq.n	2c56 <xQueueGenericCreate+0x66>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    2c16:	68fb      	ldr	r3, [r7, #12]
    2c18:	68ba      	ldr	r2, [r7, #8]
    2c1a:	fb02 f303 	mul.w	r3, r2, r3
    2c1e:	3301      	adds	r3, #1
    2c20:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    2c22:	6978      	ldr	r0, [r7, #20]
    2c24:	f001 fd8e 	bl	4744 <pvPortMalloc>
    2c28:	4602      	mov	r2, r0
    2c2a:	69bb      	ldr	r3, [r7, #24]
    2c2c:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
    2c2e:	69bb      	ldr	r3, [r7, #24]
    2c30:	681b      	ldr	r3, [r3, #0]
    2c32:	2b00      	cmp	r3, #0
    2c34:	d00c      	beq.n	2c50 <xQueueGenericCreate+0x60>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
    2c36:	69bb      	ldr	r3, [r7, #24]
    2c38:	68fa      	ldr	r2, [r7, #12]
    2c3a:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
    2c3c:	69bb      	ldr	r3, [r7, #24]
    2c3e:	68ba      	ldr	r2, [r7, #8]
    2c40:	641a      	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
    2c42:	69b8      	ldr	r0, [r7, #24]
    2c44:	2101      	movs	r1, #1
    2c46:	f7ff ff85 	bl	2b54 <xQueueGenericReset>
					pxNewQueue->ucQueueType = ucQueueType;
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    2c4a:	69bb      	ldr	r3, [r7, #24]
    2c4c:	61fb      	str	r3, [r7, #28]
    2c4e:	e002      	b.n	2c56 <xQueueGenericCreate+0x66>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
    2c50:	69b8      	ldr	r0, [r7, #24]
    2c52:	f001 fe3b 	bl	48cc <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    2c56:	69fb      	ldr	r3, [r7, #28]
}
    2c58:	4618      	mov	r0, r3
    2c5a:	3720      	adds	r7, #32
    2c5c:	46bd      	mov	sp, r7
    2c5e:	bd80      	pop	{r7, pc}

00002c60 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( unsigned char ucQueueType )
	{
    2c60:	b580      	push	{r7, lr}
    2c62:	b084      	sub	sp, #16
    2c64:	af00      	add	r7, sp, #0
    2c66:	4603      	mov	r3, r0
    2c68:	71fb      	strb	r3, [r7, #7]
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    2c6a:	204c      	movs	r0, #76	; 0x4c
    2c6c:	f001 fd6a 	bl	4744 <pvPortMalloc>
    2c70:	60f8      	str	r0, [r7, #12]
		if( pxNewQueue != NULL )
    2c72:	68fb      	ldr	r3, [r7, #12]
    2c74:	2b00      	cmp	r3, #0
    2c76:	d02c      	beq.n	2cd2 <xQueueCreateMutex+0x72>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    2c78:	68fb      	ldr	r3, [r7, #12]
    2c7a:	2200      	movs	r2, #0
    2c7c:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    2c7e:	68fb      	ldr	r3, [r7, #12]
    2c80:	2200      	movs	r2, #0
    2c82:	601a      	str	r2, [r3, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
    2c84:	68fb      	ldr	r3, [r7, #12]
    2c86:	2200      	movs	r2, #0
    2c88:	609a      	str	r2, [r3, #8]
			pxNewQueue->pcReadFrom = NULL;
    2c8a:	68fb      	ldr	r3, [r7, #12]
    2c8c:	2200      	movs	r2, #0
    2c8e:	60da      	str	r2, [r3, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    2c90:	68fb      	ldr	r3, [r7, #12]
    2c92:	2200      	movs	r2, #0
    2c94:	639a      	str	r2, [r3, #56]	; 0x38
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
    2c96:	68fb      	ldr	r3, [r7, #12]
    2c98:	2201      	movs	r2, #1
    2c9a:	63da      	str	r2, [r3, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
    2c9c:	68fb      	ldr	r3, [r7, #12]
    2c9e:	2200      	movs	r2, #0
    2ca0:	641a      	str	r2, [r3, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
    2ca2:	68fb      	ldr	r3, [r7, #12]
    2ca4:	f04f 32ff 	mov.w	r2, #4294967295
    2ca8:	645a      	str	r2, [r3, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
    2caa:	68fb      	ldr	r3, [r7, #12]
    2cac:	f04f 32ff 	mov.w	r2, #4294967295
    2cb0:	649a      	str	r2, [r3, #72]	; 0x48
				pxNewQueue->ucQueueType = ucQueueType;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    2cb2:	68fb      	ldr	r3, [r7, #12]
    2cb4:	3310      	adds	r3, #16
    2cb6:	4618      	mov	r0, r3
    2cb8:	f7ff fe26 	bl	2908 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    2cbc:	68fb      	ldr	r3, [r7, #12]
    2cbe:	3324      	adds	r3, #36	; 0x24
    2cc0:	4618      	mov	r0, r3
    2cc2:	f7ff fe21 	bl	2908 <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
    2cc6:	68f8      	ldr	r0, [r7, #12]
    2cc8:	2100      	movs	r1, #0
    2cca:	2200      	movs	r2, #0
    2ccc:	2300      	movs	r3, #0
    2cce:	f000 f81d 	bl	2d0c <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
    2cd2:	68fb      	ldr	r3, [r7, #12]
	}
    2cd4:	4618      	mov	r0, r3
    2cd6:	3710      	adds	r7, #16
    2cd8:	46bd      	mov	sp, r7
    2cda:	bd80      	pop	{r7, pc}

00002cdc <xQueueGetMutexHolder>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void* xQueueGetMutexHolder( xQueueHandle xSemaphore )
	{
    2cdc:	b580      	push	{r7, lr}
    2cde:	b084      	sub	sp, #16
    2ce0:	af00      	add	r7, sp, #0
    2ce2:	6078      	str	r0, [r7, #4]
		/* This function is called by xSemaphoreGetMutexHolder(), and should not
		be called directly.  Note:  This is is a good way of determining if the
		calling task is the mutex holder, but not a good way of determining the
		identity of the mutex holder, as the holder may change between the
		following critical section exiting and the function returning. */
		taskENTER_CRITICAL();
    2ce4:	f001 fcb4 	bl	4650 <vPortEnterCritical>
		{
			if( xSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
    2ce8:	687b      	ldr	r3, [r7, #4]
    2cea:	681b      	ldr	r3, [r3, #0]
    2cec:	2b00      	cmp	r3, #0
    2cee:	d103      	bne.n	2cf8 <xQueueGetMutexHolder+0x1c>
			{
				pxReturn = ( void * ) xSemaphore->pxMutexHolder;
    2cf0:	687b      	ldr	r3, [r7, #4]
    2cf2:	685b      	ldr	r3, [r3, #4]
    2cf4:	60fb      	str	r3, [r7, #12]
    2cf6:	e001      	b.n	2cfc <xQueueGetMutexHolder+0x20>
			}
			else
			{
				pxReturn = NULL;
    2cf8:	2300      	movs	r3, #0
    2cfa:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
    2cfc:	f001 fcbe 	bl	467c <vPortExitCritical>
		
		return pxReturn;
    2d00:	68fb      	ldr	r3, [r7, #12]
	}
    2d02:	4618      	mov	r0, r3
    2d04:	3710      	adds	r7, #16
    2d06:	46bd      	mov	sp, r7
    2d08:	bd80      	pop	{r7, pc}
    2d0a:	bf00      	nop

00002d0c <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    2d0c:	b580      	push	{r7, lr}
    2d0e:	b088      	sub	sp, #32
    2d10:	af00      	add	r7, sp, #0
    2d12:	60f8      	str	r0, [r7, #12]
    2d14:	60b9      	str	r1, [r7, #8]
    2d16:	607a      	str	r2, [r7, #4]
    2d18:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    2d1a:	2300      	movs	r3, #0
    2d1c:	61fb      	str	r3, [r7, #28]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    2d1e:	f001 fc97 	bl	4650 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    2d22:	68fb      	ldr	r3, [r7, #12]
    2d24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    2d26:	68fb      	ldr	r3, [r7, #12]
    2d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2d2a:	429a      	cmp	r2, r3
    2d2c:	d216      	bcs.n	2d5c <xQueueGenericSend+0x50>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    2d2e:	68f8      	ldr	r0, [r7, #12]
    2d30:	68b9      	ldr	r1, [r7, #8]
    2d32:	683a      	ldr	r2, [r7, #0]
    2d34:	f000 f9d6 	bl	30e4 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2d38:	68fb      	ldr	r3, [r7, #12]
    2d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2d3c:	2b00      	cmp	r3, #0
    2d3e:	d009      	beq.n	2d54 <xQueueGenericSend+0x48>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    2d40:	68fb      	ldr	r3, [r7, #12]
    2d42:	3324      	adds	r3, #36	; 0x24
    2d44:	4618      	mov	r0, r3
    2d46:	f001 f92d 	bl	3fa4 <xTaskRemoveFromEventList>
    2d4a:	4603      	mov	r3, r0
    2d4c:	2b01      	cmp	r3, #1
    2d4e:	d101      	bne.n	2d54 <xQueueGenericSend+0x48>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    2d50:	f001 fc70 	bl	4634 <vPortYieldFromISR>
					}
				}

				taskEXIT_CRITICAL();
    2d54:	f001 fc92 	bl	467c <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    2d58:	2301      	movs	r3, #1
    2d5a:	e059      	b.n	2e10 <xQueueGenericSend+0x104>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    2d5c:	687b      	ldr	r3, [r7, #4]
    2d5e:	2b00      	cmp	r3, #0
    2d60:	d103      	bne.n	2d6a <xQueueGenericSend+0x5e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    2d62:	f001 fc8b 	bl	467c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    2d66:	2300      	movs	r3, #0
    2d68:	e052      	b.n	2e10 <xQueueGenericSend+0x104>
				}
				else if( xEntryTimeSet == pdFALSE )
    2d6a:	69fb      	ldr	r3, [r7, #28]
    2d6c:	2b00      	cmp	r3, #0
    2d6e:	d106      	bne.n	2d7e <xQueueGenericSend+0x72>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    2d70:	f107 0314 	add.w	r3, r7, #20
    2d74:	4618      	mov	r0, r3
    2d76:	f001 f96d 	bl	4054 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    2d7a:	2301      	movs	r3, #1
    2d7c:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    2d7e:	f001 fc7d 	bl	467c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    2d82:	f000 fe93 	bl	3aac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    2d86:	f001 fc63 	bl	4650 <vPortEnterCritical>
    2d8a:	68fb      	ldr	r3, [r7, #12]
    2d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
    2d92:	d102      	bne.n	2d9a <xQueueGenericSend+0x8e>
    2d94:	68fb      	ldr	r3, [r7, #12]
    2d96:	2200      	movs	r2, #0
    2d98:	645a      	str	r2, [r3, #68]	; 0x44
    2d9a:	68fb      	ldr	r3, [r7, #12]
    2d9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
    2da2:	d102      	bne.n	2daa <xQueueGenericSend+0x9e>
    2da4:	68fb      	ldr	r3, [r7, #12]
    2da6:	2200      	movs	r2, #0
    2da8:	649a      	str	r2, [r3, #72]	; 0x48
    2daa:	f001 fc67 	bl	467c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2dae:	f107 0214 	add.w	r2, r7, #20
    2db2:	1d3b      	adds	r3, r7, #4
    2db4:	4610      	mov	r0, r2
    2db6:	4619      	mov	r1, r3
    2db8:	f001 f964 	bl	4084 <xTaskCheckForTimeOut>
    2dbc:	4603      	mov	r3, r0
    2dbe:	2b00      	cmp	r3, #0
    2dc0:	d11e      	bne.n	2e00 <xQueueGenericSend+0xf4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    2dc2:	68f8      	ldr	r0, [r7, #12]
    2dc4:	f000 fa86 	bl	32d4 <prvIsQueueFull>
    2dc8:	4603      	mov	r3, r0
    2dca:	2b00      	cmp	r3, #0
    2dcc:	d012      	beq.n	2df4 <xQueueGenericSend+0xe8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    2dce:	68fb      	ldr	r3, [r7, #12]
    2dd0:	f103 0210 	add.w	r2, r3, #16
    2dd4:	687b      	ldr	r3, [r7, #4]
    2dd6:	4610      	mov	r0, r2
    2dd8:	4619      	mov	r1, r3
    2dda:	f001 f8ab 	bl	3f34 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    2dde:	68f8      	ldr	r0, [r7, #12]
    2de0:	f000 fa02 	bl	31e8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    2de4:	f000 fe74 	bl	3ad0 <xTaskResumeAll>
    2de8:	4603      	mov	r3, r0
    2dea:	2b00      	cmp	r3, #0
    2dec:	d10f      	bne.n	2e0e <xQueueGenericSend+0x102>
				{
					portYIELD_WITHIN_API();
    2dee:	f001 fc21 	bl	4634 <vPortYieldFromISR>
    2df2:	e00c      	b.n	2e0e <xQueueGenericSend+0x102>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    2df4:	68f8      	ldr	r0, [r7, #12]
    2df6:	f000 f9f7 	bl	31e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    2dfa:	f000 fe69 	bl	3ad0 <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
    2dfe:	e78e      	b.n	2d1e <xQueueGenericSend+0x12>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    2e00:	68f8      	ldr	r0, [r7, #12]
    2e02:	f000 f9f1 	bl	31e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    2e06:	f000 fe63 	bl	3ad0 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    2e0a:	2300      	movs	r3, #0
    2e0c:	e000      	b.n	2e10 <xQueueGenericSend+0x104>
		}
	}
    2e0e:	e786      	b.n	2d1e <xQueueGenericSend+0x12>
}
    2e10:	4618      	mov	r0, r3
    2e12:	3720      	adds	r7, #32
    2e14:	46bd      	mov	sp, r7
    2e16:	bd80      	pop	{r7, pc}

00002e18 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    2e18:	b580      	push	{r7, lr}
    2e1a:	b086      	sub	sp, #24
    2e1c:	af00      	add	r7, sp, #0
    2e1e:	60f8      	str	r0, [r7, #12]
    2e20:	60b9      	str	r1, [r7, #8]
    2e22:	607a      	str	r2, [r7, #4]
    2e24:	603b      	str	r3, [r7, #0]
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    2e26:	2300      	movs	r3, #0
    2e28:	613b      	str	r3, [r7, #16]
    2e2a:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    2e2e:	f380 8811 	msr	BASEPRI, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    2e32:	68fb      	ldr	r3, [r7, #12]
    2e34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    2e36:	68fb      	ldr	r3, [r7, #12]
    2e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2e3a:	429a      	cmp	r2, r3
    2e3c:	d221      	bcs.n	2e82 <xQueueGenericSendFromISR+0x6a>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    2e3e:	68f8      	ldr	r0, [r7, #12]
    2e40:	68b9      	ldr	r1, [r7, #8]
    2e42:	683a      	ldr	r2, [r7, #0]
    2e44:	f000 f94e 	bl	30e4 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    2e48:	68fb      	ldr	r3, [r7, #12]
    2e4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
    2e50:	d10f      	bne.n	2e72 <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2e52:	68fb      	ldr	r3, [r7, #12]
    2e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2e56:	2b00      	cmp	r3, #0
    2e58:	d010      	beq.n	2e7c <xQueueGenericSendFromISR+0x64>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2e5a:	68fb      	ldr	r3, [r7, #12]
    2e5c:	3324      	adds	r3, #36	; 0x24
    2e5e:	4618      	mov	r0, r3
    2e60:	f001 f8a0 	bl	3fa4 <xTaskRemoveFromEventList>
    2e64:	4603      	mov	r3, r0
    2e66:	2b00      	cmp	r3, #0
    2e68:	d008      	beq.n	2e7c <xQueueGenericSendFromISR+0x64>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    2e6a:	687b      	ldr	r3, [r7, #4]
    2e6c:	2201      	movs	r2, #1
    2e6e:	601a      	str	r2, [r3, #0]
    2e70:	e004      	b.n	2e7c <xQueueGenericSendFromISR+0x64>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    2e72:	68fb      	ldr	r3, [r7, #12]
    2e74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2e76:	1c5a      	adds	r2, r3, #1
    2e78:	68fb      	ldr	r3, [r7, #12]
    2e7a:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
    2e7c:	2301      	movs	r3, #1
    2e7e:	617b      	str	r3, [r7, #20]
    2e80:	e001      	b.n	2e86 <xQueueGenericSendFromISR+0x6e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    2e82:	2300      	movs	r3, #0
    2e84:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    2e86:	f04f 0000 	mov.w	r0, #0
    2e8a:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    2e8e:	697b      	ldr	r3, [r7, #20]
}
    2e90:	4618      	mov	r0, r3
    2e92:	3718      	adds	r7, #24
    2e94:	46bd      	mov	sp, r7
    2e96:	bd80      	pop	{r7, pc}

00002e98 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    2e98:	b580      	push	{r7, lr}
    2e9a:	b088      	sub	sp, #32
    2e9c:	af00      	add	r7, sp, #0
    2e9e:	60f8      	str	r0, [r7, #12]
    2ea0:	60b9      	str	r1, [r7, #8]
    2ea2:	607a      	str	r2, [r7, #4]
    2ea4:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    2ea6:	2300      	movs	r3, #0
    2ea8:	61fb      	str	r3, [r7, #28]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    2eaa:	f001 fbd1 	bl	4650 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    2eae:	68fb      	ldr	r3, [r7, #12]
    2eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2eb2:	2b00      	cmp	r3, #0
    2eb4:	d03b      	beq.n	2f2e <xQueueGenericReceive+0x96>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    2eb6:	68fb      	ldr	r3, [r7, #12]
    2eb8:	68db      	ldr	r3, [r3, #12]
    2eba:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    2ebc:	68f8      	ldr	r0, [r7, #12]
    2ebe:	68b9      	ldr	r1, [r7, #8]
    2ec0:	f000 f96c 	bl	319c <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    2ec4:	683b      	ldr	r3, [r7, #0]
    2ec6:	2b00      	cmp	r3, #0
    2ec8:	d11c      	bne.n	2f04 <xQueueGenericReceive+0x6c>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    2eca:	68fb      	ldr	r3, [r7, #12]
    2ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2ece:	1e5a      	subs	r2, r3, #1
    2ed0:	68fb      	ldr	r3, [r7, #12]
    2ed2:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    2ed4:	68fb      	ldr	r3, [r7, #12]
    2ed6:	681b      	ldr	r3, [r3, #0]
    2ed8:	2b00      	cmp	r3, #0
    2eda:	d104      	bne.n	2ee6 <xQueueGenericReceive+0x4e>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
    2edc:	f001 fa84 	bl	43e8 <xTaskGetCurrentTaskHandle>
    2ee0:	4602      	mov	r2, r0
    2ee2:	68fb      	ldr	r3, [r7, #12]
    2ee4:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2ee6:	68fb      	ldr	r3, [r7, #12]
    2ee8:	691b      	ldr	r3, [r3, #16]
    2eea:	2b00      	cmp	r3, #0
    2eec:	d01b      	beq.n	2f26 <xQueueGenericReceive+0x8e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    2eee:	68fb      	ldr	r3, [r7, #12]
    2ef0:	3310      	adds	r3, #16
    2ef2:	4618      	mov	r0, r3
    2ef4:	f001 f856 	bl	3fa4 <xTaskRemoveFromEventList>
    2ef8:	4603      	mov	r3, r0
    2efa:	2b01      	cmp	r3, #1
    2efc:	d113      	bne.n	2f26 <xQueueGenericReceive+0x8e>
						{
							portYIELD_WITHIN_API();
    2efe:	f001 fb99 	bl	4634 <vPortYieldFromISR>
    2f02:	e010      	b.n	2f26 <xQueueGenericReceive+0x8e>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    2f04:	68fb      	ldr	r3, [r7, #12]
    2f06:	69ba      	ldr	r2, [r7, #24]
    2f08:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2f0a:	68fb      	ldr	r3, [r7, #12]
    2f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2f0e:	2b00      	cmp	r3, #0
    2f10:	d009      	beq.n	2f26 <xQueueGenericReceive+0x8e>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2f12:	68fb      	ldr	r3, [r7, #12]
    2f14:	3324      	adds	r3, #36	; 0x24
    2f16:	4618      	mov	r0, r3
    2f18:	f001 f844 	bl	3fa4 <xTaskRemoveFromEventList>
    2f1c:	4603      	mov	r3, r0
    2f1e:	2b00      	cmp	r3, #0
    2f20:	d001      	beq.n	2f26 <xQueueGenericReceive+0x8e>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    2f22:	f001 fb87 	bl	4634 <vPortYieldFromISR>
						}
					}

				}

				taskEXIT_CRITICAL();
    2f26:	f001 fba9 	bl	467c <vPortExitCritical>
				return pdPASS;
    2f2a:	2301      	movs	r3, #1
    2f2c:	e066      	b.n	2ffc <xQueueGenericReceive+0x164>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    2f2e:	687b      	ldr	r3, [r7, #4]
    2f30:	2b00      	cmp	r3, #0
    2f32:	d103      	bne.n	2f3c <xQueueGenericReceive+0xa4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    2f34:	f001 fba2 	bl	467c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    2f38:	2300      	movs	r3, #0
    2f3a:	e05f      	b.n	2ffc <xQueueGenericReceive+0x164>
				}
				else if( xEntryTimeSet == pdFALSE )
    2f3c:	69fb      	ldr	r3, [r7, #28]
    2f3e:	2b00      	cmp	r3, #0
    2f40:	d106      	bne.n	2f50 <xQueueGenericReceive+0xb8>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    2f42:	f107 0310 	add.w	r3, r7, #16
    2f46:	4618      	mov	r0, r3
    2f48:	f001 f884 	bl	4054 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    2f4c:	2301      	movs	r3, #1
    2f4e:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    2f50:	f001 fb94 	bl	467c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    2f54:	f000 fdaa 	bl	3aac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    2f58:	f001 fb7a 	bl	4650 <vPortEnterCritical>
    2f5c:	68fb      	ldr	r3, [r7, #12]
    2f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2f60:	f1b3 3fff 	cmp.w	r3, #4294967295
    2f64:	d102      	bne.n	2f6c <xQueueGenericReceive+0xd4>
    2f66:	68fb      	ldr	r3, [r7, #12]
    2f68:	2200      	movs	r2, #0
    2f6a:	645a      	str	r2, [r3, #68]	; 0x44
    2f6c:	68fb      	ldr	r3, [r7, #12]
    2f6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2f70:	f1b3 3fff 	cmp.w	r3, #4294967295
    2f74:	d102      	bne.n	2f7c <xQueueGenericReceive+0xe4>
    2f76:	68fb      	ldr	r3, [r7, #12]
    2f78:	2200      	movs	r2, #0
    2f7a:	649a      	str	r2, [r3, #72]	; 0x48
    2f7c:	f001 fb7e 	bl	467c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2f80:	f107 0210 	add.w	r2, r7, #16
    2f84:	1d3b      	adds	r3, r7, #4
    2f86:	4610      	mov	r0, r2
    2f88:	4619      	mov	r1, r3
    2f8a:	f001 f87b 	bl	4084 <xTaskCheckForTimeOut>
    2f8e:	4603      	mov	r3, r0
    2f90:	2b00      	cmp	r3, #0
    2f92:	d12b      	bne.n	2fec <xQueueGenericReceive+0x154>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    2f94:	68f8      	ldr	r0, [r7, #12]
    2f96:	f000 f973 	bl	3280 <prvIsQueueEmpty>
    2f9a:	4603      	mov	r3, r0
    2f9c:	2b00      	cmp	r3, #0
    2f9e:	d01f      	beq.n	2fe0 <xQueueGenericReceive+0x148>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    2fa0:	68fb      	ldr	r3, [r7, #12]
    2fa2:	681b      	ldr	r3, [r3, #0]
    2fa4:	2b00      	cmp	r3, #0
    2fa6:	d108      	bne.n	2fba <xQueueGenericReceive+0x122>
					{
						portENTER_CRITICAL();
    2fa8:	f001 fb52 	bl	4650 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    2fac:	68fb      	ldr	r3, [r7, #12]
    2fae:	685b      	ldr	r3, [r3, #4]
    2fb0:	4618      	mov	r0, r3
    2fb2:	f001 fa29 	bl	4408 <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
    2fb6:	f001 fb61 	bl	467c <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    2fba:	68fb      	ldr	r3, [r7, #12]
    2fbc:	f103 0224 	add.w	r2, r3, #36	; 0x24
    2fc0:	687b      	ldr	r3, [r7, #4]
    2fc2:	4610      	mov	r0, r2
    2fc4:	4619      	mov	r1, r3
    2fc6:	f000 ffb5 	bl	3f34 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    2fca:	68f8      	ldr	r0, [r7, #12]
    2fcc:	f000 f90c 	bl	31e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    2fd0:	f000 fd7e 	bl	3ad0 <xTaskResumeAll>
    2fd4:	4603      	mov	r3, r0
    2fd6:	2b00      	cmp	r3, #0
    2fd8:	d10f      	bne.n	2ffa <xQueueGenericReceive+0x162>
				{
					portYIELD_WITHIN_API();
    2fda:	f001 fb2b 	bl	4634 <vPortYieldFromISR>
    2fde:	e00c      	b.n	2ffa <xQueueGenericReceive+0x162>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    2fe0:	68f8      	ldr	r0, [r7, #12]
    2fe2:	f000 f901 	bl	31e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    2fe6:	f000 fd73 	bl	3ad0 <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
    2fea:	e75e      	b.n	2eaa <xQueueGenericReceive+0x12>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    2fec:	68f8      	ldr	r0, [r7, #12]
    2fee:	f000 f8fb 	bl	31e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    2ff2:	f000 fd6d 	bl	3ad0 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    2ff6:	2300      	movs	r3, #0
    2ff8:	e000      	b.n	2ffc <xQueueGenericReceive+0x164>
		}
	}
    2ffa:	e756      	b.n	2eaa <xQueueGenericReceive+0x12>
}
    2ffc:	4618      	mov	r0, r3
    2ffe:	3720      	adds	r7, #32
    3000:	46bd      	mov	sp, r7
    3002:	bd80      	pop	{r7, pc}

00003004 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    3004:	b580      	push	{r7, lr}
    3006:	b086      	sub	sp, #24
    3008:	af00      	add	r7, sp, #0
    300a:	60f8      	str	r0, [r7, #12]
    300c:	60b9      	str	r1, [r7, #8]
    300e:	607a      	str	r2, [r7, #4]

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    3010:	2300      	movs	r3, #0
    3012:	613b      	str	r3, [r7, #16]
    3014:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    3018:	f380 8811 	msr	BASEPRI, r0
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    301c:	68fb      	ldr	r3, [r7, #12]
    301e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3020:	2b00      	cmp	r3, #0
    3022:	d025      	beq.n	3070 <xQueueReceiveFromISR+0x6c>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    3024:	68f8      	ldr	r0, [r7, #12]
    3026:	68b9      	ldr	r1, [r7, #8]
    3028:	f000 f8b8 	bl	319c <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    302c:	68fb      	ldr	r3, [r7, #12]
    302e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3030:	1e5a      	subs	r2, r3, #1
    3032:	68fb      	ldr	r3, [r7, #12]
    3034:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    3036:	68fb      	ldr	r3, [r7, #12]
    3038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    303a:	f1b3 3fff 	cmp.w	r3, #4294967295
    303e:	d10f      	bne.n	3060 <xQueueReceiveFromISR+0x5c>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3040:	68fb      	ldr	r3, [r7, #12]
    3042:	691b      	ldr	r3, [r3, #16]
    3044:	2b00      	cmp	r3, #0
    3046:	d010      	beq.n	306a <xQueueReceiveFromISR+0x66>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3048:	68fb      	ldr	r3, [r7, #12]
    304a:	3310      	adds	r3, #16
    304c:	4618      	mov	r0, r3
    304e:	f000 ffa9 	bl	3fa4 <xTaskRemoveFromEventList>
    3052:	4603      	mov	r3, r0
    3054:	2b00      	cmp	r3, #0
    3056:	d008      	beq.n	306a <xQueueReceiveFromISR+0x66>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    3058:	687b      	ldr	r3, [r7, #4]
    305a:	2201      	movs	r2, #1
    305c:	601a      	str	r2, [r3, #0]
    305e:	e004      	b.n	306a <xQueueReceiveFromISR+0x66>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    3060:	68fb      	ldr	r3, [r7, #12]
    3062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3064:	1c5a      	adds	r2, r3, #1
    3066:	68fb      	ldr	r3, [r7, #12]
    3068:	645a      	str	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
    306a:	2301      	movs	r3, #1
    306c:	617b      	str	r3, [r7, #20]
    306e:	e001      	b.n	3074 <xQueueReceiveFromISR+0x70>
		}
		else
		{
			xReturn = pdFAIL;
    3070:	2300      	movs	r3, #0
    3072:	617b      	str	r3, [r7, #20]
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    3074:	f04f 0000 	mov.w	r0, #0
    3078:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    307c:	697b      	ldr	r3, [r7, #20]
}
    307e:	4618      	mov	r0, r3
    3080:	3718      	adds	r7, #24
    3082:	46bd      	mov	sp, r7
    3084:	bd80      	pop	{r7, pc}
    3086:	bf00      	nop

00003088 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    3088:	b580      	push	{r7, lr}
    308a:	b084      	sub	sp, #16
    308c:	af00      	add	r7, sp, #0
    308e:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    3090:	f001 fade 	bl	4650 <vPortEnterCritical>
		uxReturn = pxQueue->uxMessagesWaiting;
    3094:	687b      	ldr	r3, [r7, #4]
    3096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3098:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    309a:	f001 faef 	bl	467c <vPortExitCritical>

	return uxReturn;
    309e:	68fb      	ldr	r3, [r7, #12]
}
    30a0:	4618      	mov	r0, r3
    30a2:	3710      	adds	r7, #16
    30a4:	46bd      	mov	sp, r7
    30a6:	bd80      	pop	{r7, pc}

000030a8 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    30a8:	b480      	push	{r7}
    30aa:	b085      	sub	sp, #20
    30ac:	af00      	add	r7, sp, #0
    30ae:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    30b0:	687b      	ldr	r3, [r7, #4]
    30b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    30b4:	60fb      	str	r3, [r7, #12]

	return uxReturn;
    30b6:	68fb      	ldr	r3, [r7, #12]
}
    30b8:	4618      	mov	r0, r3
    30ba:	3714      	adds	r7, #20
    30bc:	46bd      	mov	sp, r7
    30be:	f85d 7b04 	ldr.w	r7, [sp], #4
    30c2:	4770      	bx	lr

000030c4 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    30c4:	b580      	push	{r7, lr}
    30c6:	b082      	sub	sp, #8
    30c8:	af00      	add	r7, sp, #0
    30ca:	6078      	str	r0, [r7, #4]
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    30cc:	687b      	ldr	r3, [r7, #4]
    30ce:	681b      	ldr	r3, [r3, #0]
    30d0:	4618      	mov	r0, r3
    30d2:	f001 fbfb 	bl	48cc <vPortFree>
	vPortFree( pxQueue );
    30d6:	6878      	ldr	r0, [r7, #4]
    30d8:	f001 fbf8 	bl	48cc <vPortFree>
}
    30dc:	3708      	adds	r7, #8
    30de:	46bd      	mov	sp, r7
    30e0:	bd80      	pop	{r7, pc}
    30e2:	bf00      	nop

000030e4 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    30e4:	b580      	push	{r7, lr}
    30e6:	b084      	sub	sp, #16
    30e8:	af00      	add	r7, sp, #0
    30ea:	60f8      	str	r0, [r7, #12]
    30ec:	60b9      	str	r1, [r7, #8]
    30ee:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    30f0:	68fb      	ldr	r3, [r7, #12]
    30f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    30f4:	2b00      	cmp	r3, #0
    30f6:	d10c      	bne.n	3112 <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    30f8:	68fb      	ldr	r3, [r7, #12]
    30fa:	681b      	ldr	r3, [r3, #0]
    30fc:	2b00      	cmp	r3, #0
    30fe:	d145      	bne.n	318c <prvCopyDataToQueue+0xa8>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    3100:	68fb      	ldr	r3, [r7, #12]
    3102:	685b      	ldr	r3, [r3, #4]
    3104:	4618      	mov	r0, r3
    3106:	f001 f9e3 	bl	44d0 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
    310a:	68fb      	ldr	r3, [r7, #12]
    310c:	2200      	movs	r2, #0
    310e:	605a      	str	r2, [r3, #4]
    3110:	e03c      	b.n	318c <prvCopyDataToQueue+0xa8>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    3112:	687b      	ldr	r3, [r7, #4]
    3114:	2b00      	cmp	r3, #0
    3116:	d11a      	bne.n	314e <prvCopyDataToQueue+0x6a>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    3118:	68fb      	ldr	r3, [r7, #12]
    311a:	689a      	ldr	r2, [r3, #8]
    311c:	68fb      	ldr	r3, [r7, #12]
    311e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3120:	4610      	mov	r0, r2
    3122:	68b9      	ldr	r1, [r7, #8]
    3124:	461a      	mov	r2, r3
    3126:	f010 fadf 	bl	136e8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    312a:	68fb      	ldr	r3, [r7, #12]
    312c:	689a      	ldr	r2, [r3, #8]
    312e:	68fb      	ldr	r3, [r7, #12]
    3130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3132:	441a      	add	r2, r3
    3134:	68fb      	ldr	r3, [r7, #12]
    3136:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    3138:	68fb      	ldr	r3, [r7, #12]
    313a:	689a      	ldr	r2, [r3, #8]
    313c:	68fb      	ldr	r3, [r7, #12]
    313e:	685b      	ldr	r3, [r3, #4]
    3140:	429a      	cmp	r2, r3
    3142:	d323      	bcc.n	318c <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    3144:	68fb      	ldr	r3, [r7, #12]
    3146:	681a      	ldr	r2, [r3, #0]
    3148:	68fb      	ldr	r3, [r7, #12]
    314a:	609a      	str	r2, [r3, #8]
    314c:	e01e      	b.n	318c <prvCopyDataToQueue+0xa8>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    314e:	68fb      	ldr	r3, [r7, #12]
    3150:	68da      	ldr	r2, [r3, #12]
    3152:	68fb      	ldr	r3, [r7, #12]
    3154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3156:	4610      	mov	r0, r2
    3158:	68b9      	ldr	r1, [r7, #8]
    315a:	461a      	mov	r2, r3
    315c:	f010 fac4 	bl	136e8 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    3160:	68fb      	ldr	r3, [r7, #12]
    3162:	68da      	ldr	r2, [r3, #12]
    3164:	68fb      	ldr	r3, [r7, #12]
    3166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3168:	425b      	negs	r3, r3
    316a:	441a      	add	r2, r3
    316c:	68fb      	ldr	r3, [r7, #12]
    316e:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    3170:	68fb      	ldr	r3, [r7, #12]
    3172:	68da      	ldr	r2, [r3, #12]
    3174:	68fb      	ldr	r3, [r7, #12]
    3176:	681b      	ldr	r3, [r3, #0]
    3178:	429a      	cmp	r2, r3
    317a:	d207      	bcs.n	318c <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    317c:	68fb      	ldr	r3, [r7, #12]
    317e:	685a      	ldr	r2, [r3, #4]
    3180:	68fb      	ldr	r3, [r7, #12]
    3182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3184:	425b      	negs	r3, r3
    3186:	441a      	add	r2, r3
    3188:	68fb      	ldr	r3, [r7, #12]
    318a:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
    318c:	68fb      	ldr	r3, [r7, #12]
    318e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3190:	1c5a      	adds	r2, r3, #1
    3192:	68fb      	ldr	r3, [r7, #12]
    3194:	639a      	str	r2, [r3, #56]	; 0x38
}
    3196:	3710      	adds	r7, #16
    3198:	46bd      	mov	sp, r7
    319a:	bd80      	pop	{r7, pc}

0000319c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    319c:	b580      	push	{r7, lr}
    319e:	b082      	sub	sp, #8
    31a0:	af00      	add	r7, sp, #0
    31a2:	6078      	str	r0, [r7, #4]
    31a4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    31a6:	687b      	ldr	r3, [r7, #4]
    31a8:	681b      	ldr	r3, [r3, #0]
    31aa:	2b00      	cmp	r3, #0
    31ac:	d019      	beq.n	31e2 <prvCopyDataFromQueue+0x46>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    31ae:	687b      	ldr	r3, [r7, #4]
    31b0:	68da      	ldr	r2, [r3, #12]
    31b2:	687b      	ldr	r3, [r7, #4]
    31b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    31b6:	441a      	add	r2, r3
    31b8:	687b      	ldr	r3, [r7, #4]
    31ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    31bc:	687b      	ldr	r3, [r7, #4]
    31be:	68da      	ldr	r2, [r3, #12]
    31c0:	687b      	ldr	r3, [r7, #4]
    31c2:	685b      	ldr	r3, [r3, #4]
    31c4:	429a      	cmp	r2, r3
    31c6:	d303      	bcc.n	31d0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    31c8:	687b      	ldr	r3, [r7, #4]
    31ca:	681a      	ldr	r2, [r3, #0]
    31cc:	687b      	ldr	r3, [r7, #4]
    31ce:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    31d0:	687b      	ldr	r3, [r7, #4]
    31d2:	68da      	ldr	r2, [r3, #12]
    31d4:	687b      	ldr	r3, [r7, #4]
    31d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    31d8:	6838      	ldr	r0, [r7, #0]
    31da:	4611      	mov	r1, r2
    31dc:	461a      	mov	r2, r3
    31de:	f010 fa83 	bl	136e8 <memcpy>
	}
}
    31e2:	3708      	adds	r7, #8
    31e4:	46bd      	mov	sp, r7
    31e6:	bd80      	pop	{r7, pc}

000031e8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    31e8:	b580      	push	{r7, lr}
    31ea:	b082      	sub	sp, #8
    31ec:	af00      	add	r7, sp, #0
    31ee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    31f0:	f001 fa2e 	bl	4650 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    31f4:	e014      	b.n	3220 <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    31f6:	687b      	ldr	r3, [r7, #4]
    31f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    31fa:	2b00      	cmp	r3, #0
    31fc:	d00f      	beq.n	321e <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    31fe:	687b      	ldr	r3, [r7, #4]
    3200:	3324      	adds	r3, #36	; 0x24
    3202:	4618      	mov	r0, r3
    3204:	f000 fece 	bl	3fa4 <xTaskRemoveFromEventList>
    3208:	4603      	mov	r3, r0
    320a:	2b00      	cmp	r3, #0
    320c:	d001      	beq.n	3212 <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    320e:	f000 ff85 	bl	411c <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    3212:	687b      	ldr	r3, [r7, #4]
    3214:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3216:	1e5a      	subs	r2, r3, #1
    3218:	687b      	ldr	r3, [r7, #4]
    321a:	649a      	str	r2, [r3, #72]	; 0x48
    321c:	e000      	b.n	3220 <prvUnlockQueue+0x38>
			}
			else
			{
				break;
    321e:	e003      	b.n	3228 <prvUnlockQueue+0x40>
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    3220:	687b      	ldr	r3, [r7, #4]
    3222:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3224:	2b00      	cmp	r3, #0
    3226:	dce6      	bgt.n	31f6 <prvUnlockQueue+0xe>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    3228:	687b      	ldr	r3, [r7, #4]
    322a:	f04f 32ff 	mov.w	r2, #4294967295
    322e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
    3230:	f001 fa24 	bl	467c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    3234:	f001 fa0c 	bl	4650 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    3238:	e014      	b.n	3264 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    323a:	687b      	ldr	r3, [r7, #4]
    323c:	691b      	ldr	r3, [r3, #16]
    323e:	2b00      	cmp	r3, #0
    3240:	d00f      	beq.n	3262 <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3242:	687b      	ldr	r3, [r7, #4]
    3244:	3310      	adds	r3, #16
    3246:	4618      	mov	r0, r3
    3248:	f000 feac 	bl	3fa4 <xTaskRemoveFromEventList>
    324c:	4603      	mov	r3, r0
    324e:	2b00      	cmp	r3, #0
    3250:	d001      	beq.n	3256 <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
    3252:	f000 ff63 	bl	411c <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    3256:	687b      	ldr	r3, [r7, #4]
    3258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    325a:	1e5a      	subs	r2, r3, #1
    325c:	687b      	ldr	r3, [r7, #4]
    325e:	645a      	str	r2, [r3, #68]	; 0x44
    3260:	e000      	b.n	3264 <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
    3262:	e003      	b.n	326c <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    3264:	687b      	ldr	r3, [r7, #4]
    3266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3268:	2b00      	cmp	r3, #0
    326a:	dce6      	bgt.n	323a <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    326c:	687b      	ldr	r3, [r7, #4]
    326e:	f04f 32ff 	mov.w	r2, #4294967295
    3272:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    3274:	f001 fa02 	bl	467c <vPortExitCritical>
}
    3278:	3708      	adds	r7, #8
    327a:	46bd      	mov	sp, r7
    327c:	bd80      	pop	{r7, pc}
    327e:	bf00      	nop

00003280 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    3280:	b580      	push	{r7, lr}
    3282:	b084      	sub	sp, #16
    3284:	af00      	add	r7, sp, #0
    3286:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    3288:	f001 f9e2 	bl	4650 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    328c:	687b      	ldr	r3, [r7, #4]
    328e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3290:	2b00      	cmp	r3, #0
    3292:	bf14      	ite	ne
    3294:	2300      	movne	r3, #0
    3296:	2301      	moveq	r3, #1
    3298:	b2db      	uxtb	r3, r3
    329a:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    329c:	f001 f9ee 	bl	467c <vPortExitCritical>

	return xReturn;
    32a0:	68fb      	ldr	r3, [r7, #12]
}
    32a2:	4618      	mov	r0, r3
    32a4:	3710      	adds	r7, #16
    32a6:	46bd      	mov	sp, r7
    32a8:	bd80      	pop	{r7, pc}
    32aa:	bf00      	nop

000032ac <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    32ac:	b480      	push	{r7}
    32ae:	b085      	sub	sp, #20
    32b0:	af00      	add	r7, sp, #0
    32b2:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    32b4:	687b      	ldr	r3, [r7, #4]
    32b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    32b8:	2b00      	cmp	r3, #0
    32ba:	bf14      	ite	ne
    32bc:	2300      	movne	r3, #0
    32be:	2301      	moveq	r3, #1
    32c0:	b2db      	uxtb	r3, r3
    32c2:	60fb      	str	r3, [r7, #12]

	return xReturn;
    32c4:	68fb      	ldr	r3, [r7, #12]
}
    32c6:	4618      	mov	r0, r3
    32c8:	3714      	adds	r7, #20
    32ca:	46bd      	mov	sp, r7
    32cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    32d0:	4770      	bx	lr
    32d2:	bf00      	nop

000032d4 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    32d4:	b580      	push	{r7, lr}
    32d6:	b084      	sub	sp, #16
    32d8:	af00      	add	r7, sp, #0
    32da:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    32dc:	f001 f9b8 	bl	4650 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    32e0:	687b      	ldr	r3, [r7, #4]
    32e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    32e4:	687b      	ldr	r3, [r7, #4]
    32e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    32e8:	429a      	cmp	r2, r3
    32ea:	bf14      	ite	ne
    32ec:	2300      	movne	r3, #0
    32ee:	2301      	moveq	r3, #1
    32f0:	b2db      	uxtb	r3, r3
    32f2:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    32f4:	f001 f9c2 	bl	467c <vPortExitCritical>

	return xReturn;
    32f8:	68fb      	ldr	r3, [r7, #12]
}
    32fa:	4618      	mov	r0, r3
    32fc:	3710      	adds	r7, #16
    32fe:	46bd      	mov	sp, r7
    3300:	bd80      	pop	{r7, pc}
    3302:	bf00      	nop

00003304 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    3304:	b480      	push	{r7}
    3306:	b085      	sub	sp, #20
    3308:	af00      	add	r7, sp, #0
    330a:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    330c:	687b      	ldr	r3, [r7, #4]
    330e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    3310:	687b      	ldr	r3, [r7, #4]
    3312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    3314:	429a      	cmp	r2, r3
    3316:	bf14      	ite	ne
    3318:	2300      	movne	r3, #0
    331a:	2301      	moveq	r3, #1
    331c:	b2db      	uxtb	r3, r3
    331e:	60fb      	str	r3, [r7, #12]

	return xReturn;
    3320:	68fb      	ldr	r3, [r7, #12]
}
    3322:	4618      	mov	r0, r3
    3324:	3714      	adds	r7, #20
    3326:	46bd      	mov	sp, r7
    3328:	f85d 7b04 	ldr.w	r7, [sp], #4
    332c:	4770      	bx	lr
    332e:	bf00      	nop

00003330 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    3330:	b580      	push	{r7, lr}
    3332:	b08a      	sub	sp, #40	; 0x28
    3334:	af02      	add	r7, sp, #8
    3336:	60f8      	str	r0, [r7, #12]
    3338:	60b9      	str	r1, [r7, #8]
    333a:	603b      	str	r3, [r7, #0]
    333c:	4613      	mov	r3, r2
    333e:	80fb      	strh	r3, [r7, #6]
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    3340:	88fb      	ldrh	r3, [r7, #6]
    3342:	4618      	mov	r0, r3
    3344:	6b39      	ldr	r1, [r7, #48]	; 0x30
    3346:	f001 f80d 	bl	4364 <prvAllocateTCBAndStack>
    334a:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
    334c:	69bb      	ldr	r3, [r7, #24]
    334e:	2b00      	cmp	r3, #0
    3350:	f000 80a1 	beq.w	3496 <xTaskGenericCreate+0x166>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    3354:	69bb      	ldr	r3, [r7, #24]
    3356:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    3358:	88fb      	ldrh	r3, [r7, #6]
    335a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    335e:	3b01      	subs	r3, #1
    3360:	009b      	lsls	r3, r3, #2
    3362:	4413      	add	r3, r2
    3364:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
    3366:	697b      	ldr	r3, [r7, #20]
    3368:	f023 0307 	bic.w	r3, r3, #7
    336c:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    336e:	88fb      	ldrh	r3, [r7, #6]
    3370:	9300      	str	r3, [sp, #0]
    3372:	69b8      	ldr	r0, [r7, #24]
    3374:	68b9      	ldr	r1, [r7, #8]
    3376:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    337a:	f000 fee5 	bl	4148 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    337e:	6978      	ldr	r0, [r7, #20]
    3380:	68f9      	ldr	r1, [r7, #12]
    3382:	683a      	ldr	r2, [r7, #0]
    3384:	f001 f8e6 	bl	4554 <pxPortInitialiseStack>
    3388:	4602      	mov	r2, r0
    338a:	69bb      	ldr	r3, [r7, #24]
    338c:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    338e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3390:	2b00      	cmp	r3, #0
    3392:	d002      	beq.n	339a <xTaskGenericCreate+0x6a>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    3394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3396:	69ba      	ldr	r2, [r7, #24]
    3398:	601a      	str	r2, [r3, #0]
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    339a:	f001 f959 	bl	4650 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
    339e:	f240 4358 	movw	r3, #1112	; 0x458
    33a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33a6:	681b      	ldr	r3, [r3, #0]
    33a8:	1c5a      	adds	r2, r3, #1
    33aa:	f240 4358 	movw	r3, #1112	; 0x458
    33ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33b2:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
    33b4:	f240 2354 	movw	r3, #596	; 0x254
    33b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33bc:	681b      	ldr	r3, [r3, #0]
    33be:	2b00      	cmp	r3, #0
    33c0:	d10f      	bne.n	33e2 <xTaskGenericCreate+0xb2>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    33c2:	f240 2354 	movw	r3, #596	; 0x254
    33c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33ca:	69ba      	ldr	r2, [r7, #24]
    33cc:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    33ce:	f240 4358 	movw	r3, #1112	; 0x458
    33d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33d6:	681b      	ldr	r3, [r3, #0]
    33d8:	2b01      	cmp	r3, #1
    33da:	d118      	bne.n	340e <xTaskGenericCreate+0xde>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    33dc:	f000 feea 	bl	41b4 <prvInitialiseTaskLists>
    33e0:	e015      	b.n	340e <xTaskGenericCreate+0xde>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    33e2:	f240 4368 	movw	r3, #1128	; 0x468
    33e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33ea:	681b      	ldr	r3, [r3, #0]
    33ec:	2b00      	cmp	r3, #0
    33ee:	d10e      	bne.n	340e <xTaskGenericCreate+0xde>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    33f0:	f240 2354 	movw	r3, #596	; 0x254
    33f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33f8:	681b      	ldr	r3, [r3, #0]
    33fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    33fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    33fe:	429a      	cmp	r2, r3
    3400:	d805      	bhi.n	340e <xTaskGenericCreate+0xde>
					{
						pxCurrentTCB = pxNewTCB;
    3402:	f240 2354 	movw	r3, #596	; 0x254
    3406:	f2c2 0300 	movt	r3, #8192	; 0x2000
    340a:	69ba      	ldr	r2, [r7, #24]
    340c:	601a      	str	r2, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    340e:	69bb      	ldr	r3, [r7, #24]
    3410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3412:	f240 4360 	movw	r3, #1120	; 0x460
    3416:	f2c2 0300 	movt	r3, #8192	; 0x2000
    341a:	681b      	ldr	r3, [r3, #0]
    341c:	429a      	cmp	r2, r3
    341e:	d906      	bls.n	342e <xTaskGenericCreate+0xfe>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    3420:	69bb      	ldr	r3, [r7, #24]
    3422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3424:	f240 4360 	movw	r3, #1120	; 0x460
    3428:	f2c2 0300 	movt	r3, #8192	; 0x2000
    342c:	601a      	str	r2, [r3, #0]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    342e:	f240 437c 	movw	r3, #1148	; 0x47c
    3432:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3436:	681b      	ldr	r3, [r3, #0]
    3438:	1c5a      	adds	r2, r3, #1
    343a:	f240 437c 	movw	r3, #1148	; 0x47c
    343e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3442:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
    3444:	69bb      	ldr	r3, [r7, #24]
    3446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3448:	f240 4364 	movw	r3, #1124	; 0x464
    344c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3450:	681b      	ldr	r3, [r3, #0]
    3452:	429a      	cmp	r2, r3
    3454:	d906      	bls.n	3464 <xTaskGenericCreate+0x134>
    3456:	69bb      	ldr	r3, [r7, #24]
    3458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    345a:	f240 4364 	movw	r3, #1124	; 0x464
    345e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3462:	601a      	str	r2, [r3, #0]
    3464:	69bb      	ldr	r3, [r7, #24]
    3466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3468:	4613      	mov	r3, r2
    346a:	009b      	lsls	r3, r3, #2
    346c:	4413      	add	r3, r2
    346e:	009b      	lsls	r3, r3, #2
    3470:	f240 2258 	movw	r2, #600	; 0x258
    3474:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3478:	441a      	add	r2, r3
    347a:	69bb      	ldr	r3, [r7, #24]
    347c:	3304      	adds	r3, #4
    347e:	4610      	mov	r0, r2
    3480:	4619      	mov	r1, r3
    3482:	f7ff fa6d 	bl	2960 <vListInsertEnd>

			xReturn = pdPASS;
    3486:	2301      	movs	r3, #1
    3488:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
    348a:	69b8      	ldr	r0, [r7, #24]
    348c:	f00f f8f6 	bl	1267c <myTraceCreate>
		}
		taskEXIT_CRITICAL();
    3490:	f001 f8f4 	bl	467c <vPortExitCritical>
    3494:	e002      	b.n	349c <xTaskGenericCreate+0x16c>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    3496:	f04f 33ff 	mov.w	r3, #4294967295
    349a:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    349c:	69fb      	ldr	r3, [r7, #28]
    349e:	2b01      	cmp	r3, #1
    34a0:	d111      	bne.n	34c6 <xTaskGenericCreate+0x196>
	{
		if( xSchedulerRunning != pdFALSE )
    34a2:	f240 4368 	movw	r3, #1128	; 0x468
    34a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    34aa:	681b      	ldr	r3, [r3, #0]
    34ac:	2b00      	cmp	r3, #0
    34ae:	d00a      	beq.n	34c6 <xTaskGenericCreate+0x196>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    34b0:	f240 2354 	movw	r3, #596	; 0x254
    34b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    34b8:	681b      	ldr	r3, [r3, #0]
    34ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    34bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    34be:	429a      	cmp	r2, r3
    34c0:	d201      	bcs.n	34c6 <xTaskGenericCreate+0x196>
			{
				portYIELD_WITHIN_API();
    34c2:	f001 f8b7 	bl	4634 <vPortYieldFromISR>
			}
		}
	}

	return xReturn;
    34c6:	69fb      	ldr	r3, [r7, #28]
}
    34c8:	4618      	mov	r0, r3
    34ca:	3720      	adds	r7, #32
    34cc:	46bd      	mov	sp, r7
    34ce:	bd80      	pop	{r7, pc}

000034d0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    34d0:	b580      	push	{r7, lr}
    34d2:	b084      	sub	sp, #16
    34d4:	af00      	add	r7, sp, #0
    34d6:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    34d8:	f001 f8ba 	bl	4650 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    34dc:	f240 2354 	movw	r3, #596	; 0x254
    34e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    34e4:	681b      	ldr	r3, [r3, #0]
    34e6:	687a      	ldr	r2, [r7, #4]
    34e8:	429a      	cmp	r2, r3
    34ea:	d101      	bne.n	34f0 <vTaskDelete+0x20>
			{
				pxTaskToDelete = NULL;
    34ec:	2300      	movs	r3, #0
    34ee:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    34f0:	687b      	ldr	r3, [r7, #4]
    34f2:	2b00      	cmp	r3, #0
    34f4:	d105      	bne.n	3502 <vTaskDelete+0x32>
    34f6:	f240 2354 	movw	r3, #596	; 0x254
    34fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    34fe:	681b      	ldr	r3, [r3, #0]
    3500:	e000      	b.n	3504 <vTaskDelete+0x34>
    3502:	687b      	ldr	r3, [r7, #4]
    3504:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    3506:	68fb      	ldr	r3, [r7, #12]
    3508:	3304      	adds	r3, #4
    350a:	4618      	mov	r0, r3
    350c:	f7ff fa88 	bl	2a20 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    3510:	68fb      	ldr	r3, [r7, #12]
    3512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3514:	2b00      	cmp	r3, #0
    3516:	d004      	beq.n	3522 <vTaskDelete+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    3518:	68fb      	ldr	r3, [r7, #12]
    351a:	3318      	adds	r3, #24
    351c:	4618      	mov	r0, r3
    351e:	f7ff fa7f 	bl	2a20 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    3522:	68fb      	ldr	r3, [r7, #12]
    3524:	3304      	adds	r3, #4
    3526:	f240 402c 	movw	r0, #1068	; 0x42c
    352a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    352e:	4619      	mov	r1, r3
    3530:	f7ff fa16 	bl	2960 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    3534:	f240 4340 	movw	r3, #1088	; 0x440
    3538:	f2c2 0300 	movt	r3, #8192	; 0x2000
    353c:	681b      	ldr	r3, [r3, #0]
    353e:	1c5a      	adds	r2, r3, #1
    3540:	f240 4340 	movw	r3, #1088	; 0x440
    3544:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3548:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    354a:	f240 437c 	movw	r3, #1148	; 0x47c
    354e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3552:	681b      	ldr	r3, [r3, #0]
    3554:	1c5a      	adds	r2, r3, #1
    3556:	f240 437c 	movw	r3, #1148	; 0x47c
    355a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    355e:	601a      	str	r2, [r3, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    3560:	f001 f88c 	bl	467c <vPortExitCritical>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    3564:	f240 4368 	movw	r3, #1128	; 0x468
    3568:	f2c2 0300 	movt	r3, #8192	; 0x2000
    356c:	681b      	ldr	r3, [r3, #0]
    356e:	2b00      	cmp	r3, #0
    3570:	d004      	beq.n	357c <vTaskDelete+0xac>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    3572:	687b      	ldr	r3, [r7, #4]
    3574:	2b00      	cmp	r3, #0
    3576:	d101      	bne.n	357c <vTaskDelete+0xac>
			{
				portYIELD_WITHIN_API();
    3578:	f001 f85c 	bl	4634 <vPortYieldFromISR>
			}
		}
	}
    357c:	3710      	adds	r7, #16
    357e:	46bd      	mov	sp, r7
    3580:	bd80      	pop	{r7, pc}
    3582:	bf00      	nop

00003584 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    3584:	b580      	push	{r7, lr}
    3586:	b086      	sub	sp, #24
    3588:	af00      	add	r7, sp, #0
    358a:	6078      	str	r0, [r7, #4]
    358c:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
    358e:	2300      	movs	r3, #0
    3590:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    3592:	f000 fa8b 	bl	3aac <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    3596:	687b      	ldr	r3, [r7, #4]
    3598:	681a      	ldr	r2, [r3, #0]
    359a:	683b      	ldr	r3, [r7, #0]
    359c:	4413      	add	r3, r2
    359e:	613b      	str	r3, [r7, #16]

			if( xTickCount < *pxPreviousWakeTime )
    35a0:	687b      	ldr	r3, [r7, #4]
    35a2:	681a      	ldr	r2, [r3, #0]
    35a4:	f240 435c 	movw	r3, #1116	; 0x45c
    35a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    35ac:	681b      	ldr	r3, [r3, #0]
    35ae:	429a      	cmp	r2, r3
    35b0:	d90f      	bls.n	35d2 <vTaskDelayUntil+0x4e>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    35b2:	687b      	ldr	r3, [r7, #4]
    35b4:	681a      	ldr	r2, [r3, #0]
    35b6:	693b      	ldr	r3, [r7, #16]
    35b8:	429a      	cmp	r2, r3
    35ba:	d919      	bls.n	35f0 <vTaskDelayUntil+0x6c>
    35bc:	f240 435c 	movw	r3, #1116	; 0x45c
    35c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    35c4:	681b      	ldr	r3, [r3, #0]
    35c6:	693a      	ldr	r2, [r7, #16]
    35c8:	429a      	cmp	r2, r3
    35ca:	d911      	bls.n	35f0 <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    35cc:	2301      	movs	r3, #1
    35ce:	617b      	str	r3, [r7, #20]
    35d0:	e00e      	b.n	35f0 <vTaskDelayUntil+0x6c>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    35d2:	687b      	ldr	r3, [r7, #4]
    35d4:	681a      	ldr	r2, [r3, #0]
    35d6:	693b      	ldr	r3, [r7, #16]
    35d8:	429a      	cmp	r2, r3
    35da:	d807      	bhi.n	35ec <vTaskDelayUntil+0x68>
    35dc:	f240 435c 	movw	r3, #1116	; 0x45c
    35e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    35e4:	681b      	ldr	r3, [r3, #0]
    35e6:	693a      	ldr	r2, [r7, #16]
    35e8:	429a      	cmp	r2, r3
    35ea:	d901      	bls.n	35f0 <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    35ec:	2301      	movs	r3, #1
    35ee:	617b      	str	r3, [r7, #20]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    35f0:	687b      	ldr	r3, [r7, #4]
    35f2:	693a      	ldr	r2, [r7, #16]
    35f4:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
    35f6:	697b      	ldr	r3, [r7, #20]
    35f8:	2b00      	cmp	r3, #0
    35fa:	d00b      	beq.n	3614 <vTaskDelayUntil+0x90>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    35fc:	f240 2354 	movw	r3, #596	; 0x254
    3600:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3604:	681b      	ldr	r3, [r3, #0]
    3606:	3304      	adds	r3, #4
    3608:	4618      	mov	r0, r3
    360a:	f7ff fa09 	bl	2a20 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    360e:	6938      	ldr	r0, [r7, #16]
    3610:	f000 fe64 	bl	42dc <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    3614:	f000 fa5c 	bl	3ad0 <xTaskResumeAll>
    3618:	60f8      	str	r0, [r7, #12]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    361a:	68fb      	ldr	r3, [r7, #12]
    361c:	2b00      	cmp	r3, #0
    361e:	d101      	bne.n	3624 <vTaskDelayUntil+0xa0>
		{
			portYIELD_WITHIN_API();
    3620:	f001 f808 	bl	4634 <vPortYieldFromISR>
		}
	}
    3624:	3718      	adds	r7, #24
    3626:	46bd      	mov	sp, r7
    3628:	bd80      	pop	{r7, pc}
    362a:	bf00      	nop

0000362c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    362c:	b580      	push	{r7, lr}
    362e:	b084      	sub	sp, #16
    3630:	af00      	add	r7, sp, #0
    3632:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    3634:	2300      	movs	r3, #0
    3636:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    3638:	687b      	ldr	r3, [r7, #4]
    363a:	2b00      	cmp	r3, #0
    363c:	d018      	beq.n	3670 <vTaskDelay+0x44>
		{
			vTaskSuspendAll();
    363e:	f000 fa35 	bl	3aac <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    3642:	f240 435c 	movw	r3, #1116	; 0x45c
    3646:	f2c2 0300 	movt	r3, #8192	; 0x2000
    364a:	681a      	ldr	r2, [r3, #0]
    364c:	687b      	ldr	r3, [r7, #4]
    364e:	4413      	add	r3, r2
    3650:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3652:	f240 2354 	movw	r3, #596	; 0x254
    3656:	f2c2 0300 	movt	r3, #8192	; 0x2000
    365a:	681b      	ldr	r3, [r3, #0]
    365c:	3304      	adds	r3, #4
    365e:	4618      	mov	r0, r3
    3660:	f7ff f9de 	bl	2a20 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    3664:	68b8      	ldr	r0, [r7, #8]
    3666:	f000 fe39 	bl	42dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    366a:	f000 fa31 	bl	3ad0 <xTaskResumeAll>
    366e:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    3670:	68fb      	ldr	r3, [r7, #12]
    3672:	2b00      	cmp	r3, #0
    3674:	d101      	bne.n	367a <vTaskDelay+0x4e>
		{
			portYIELD_WITHIN_API();
    3676:	f000 ffdd 	bl	4634 <vPortYieldFromISR>
		}
	}
    367a:	3710      	adds	r7, #16
    367c:	46bd      	mov	sp, r7
    367e:	bd80      	pop	{r7, pc}

00003680 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
	{
    3680:	b580      	push	{r7, lr}
    3682:	b084      	sub	sp, #16
    3684:	af00      	add	r7, sp, #0
    3686:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxReturn;

		taskENTER_CRITICAL();
    3688:	f000 ffe2 	bl	4650 <vPortEnterCritical>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    368c:	687b      	ldr	r3, [r7, #4]
    368e:	2b00      	cmp	r3, #0
    3690:	d105      	bne.n	369e <uxTaskPriorityGet+0x1e>
    3692:	f240 2354 	movw	r3, #596	; 0x254
    3696:	f2c2 0300 	movt	r3, #8192	; 0x2000
    369a:	681b      	ldr	r3, [r3, #0]
    369c:	e000      	b.n	36a0 <uxTaskPriorityGet+0x20>
    369e:	687b      	ldr	r3, [r7, #4]
    36a0:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
    36a2:	68fb      	ldr	r3, [r7, #12]
    36a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    36a6:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
    36a8:	f000 ffe8 	bl	467c <vPortExitCritical>

		return uxReturn;
    36ac:	68bb      	ldr	r3, [r7, #8]
	}
    36ae:	4618      	mov	r0, r3
    36b0:	3710      	adds	r7, #16
    36b2:	46bd      	mov	sp, r7
    36b4:	bd80      	pop	{r7, pc}
    36b6:	bf00      	nop

000036b8 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
	{
    36b8:	b580      	push	{r7, lr}
    36ba:	b086      	sub	sp, #24
    36bc:	af00      	add	r7, sp, #0
    36be:	6078      	str	r0, [r7, #4]
    36c0:	6039      	str	r1, [r7, #0]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxCurrentPriority;
	portBASE_TYPE xYieldRequired = pdFALSE;
    36c2:	2300      	movs	r3, #0
    36c4:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= configMAX_PRIORITIES )
    36c6:	683b      	ldr	r3, [r7, #0]
    36c8:	2b13      	cmp	r3, #19
    36ca:	d901      	bls.n	36d0 <vTaskPrioritySet+0x18>
		{
			uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    36cc:	2313      	movs	r3, #19
    36ce:	603b      	str	r3, [r7, #0]
		}

		taskENTER_CRITICAL();
    36d0:	f000 ffbe 	bl	4650 <vPortEnterCritical>
		{
			if( pxTask == pxCurrentTCB )
    36d4:	f240 2354 	movw	r3, #596	; 0x254
    36d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    36dc:	681b      	ldr	r3, [r3, #0]
    36de:	687a      	ldr	r2, [r7, #4]
    36e0:	429a      	cmp	r2, r3
    36e2:	d101      	bne.n	36e8 <vTaskPrioritySet+0x30>
			{
				pxTask = NULL;
    36e4:	2300      	movs	r3, #0
    36e6:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    36e8:	687b      	ldr	r3, [r7, #4]
    36ea:	2b00      	cmp	r3, #0
    36ec:	d105      	bne.n	36fa <vTaskPrioritySet+0x42>
    36ee:	f240 2354 	movw	r3, #596	; 0x254
    36f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    36f6:	681b      	ldr	r3, [r3, #0]
    36f8:	e000      	b.n	36fc <vTaskPrioritySet+0x44>
    36fa:	687b      	ldr	r3, [r7, #4]
    36fc:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentPriority = pxTCB->uxBasePriority;
    36fe:	693b      	ldr	r3, [r7, #16]
    3700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3702:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentPriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentPriority != uxNewPriority )
    3704:	68fa      	ldr	r2, [r7, #12]
    3706:	683b      	ldr	r3, [r7, #0]
    3708:	429a      	cmp	r2, r3
    370a:	d058      	beq.n	37be <vTaskPrioritySet+0x106>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentPriority )
    370c:	683a      	ldr	r2, [r7, #0]
    370e:	68fb      	ldr	r3, [r7, #12]
    3710:	429a      	cmp	r2, r3
    3712:	d905      	bls.n	3720 <vTaskPrioritySet+0x68>
				{
					if( pxTask != NULL )
    3714:	687b      	ldr	r3, [r7, #4]
    3716:	2b00      	cmp	r3, #0
    3718:	d007      	beq.n	372a <vTaskPrioritySet+0x72>
					{
						/* The priority of another task is being raised.  If we
						were raising the priority of the currently running task
						there would be no need to switch as it must have already
						been the highest priority task. */
						xYieldRequired = pdTRUE;
    371a:	2301      	movs	r3, #1
    371c:	617b      	str	r3, [r7, #20]
    371e:	e004      	b.n	372a <vTaskPrioritySet+0x72>
					}
				}
				else if( pxTask == NULL )
    3720:	687b      	ldr	r3, [r7, #4]
    3722:	2b00      	cmp	r3, #0
    3724:	d101      	bne.n	372a <vTaskPrioritySet+0x72>
				{
					/* Setting our own priority down means there may now be another
					task of higher priority that is ready to execute. */
					xYieldRequired = pdTRUE;
    3726:	2301      	movs	r3, #1
    3728:	617b      	str	r3, [r7, #20]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    372a:	693b      	ldr	r3, [r7, #16]
    372c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    372e:	693b      	ldr	r3, [r7, #16]
    3730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3732:	429a      	cmp	r2, r3
    3734:	d102      	bne.n	373c <vTaskPrioritySet+0x84>
					{
						pxTCB->uxPriority = uxNewPriority;
    3736:	693b      	ldr	r3, [r7, #16]
    3738:	683a      	ldr	r2, [r7, #0]
    373a:	62da      	str	r2, [r3, #44]	; 0x2c
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
    373c:	693b      	ldr	r3, [r7, #16]
    373e:	683a      	ldr	r2, [r7, #0]
    3740:	645a      	str	r2, [r3, #68]	; 0x44
				{
					pxTCB->uxPriority = uxNewPriority;
				}
				#endif

				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
    3742:	683b      	ldr	r3, [r7, #0]
    3744:	f1c3 0214 	rsb	r2, r3, #20
    3748:	693b      	ldr	r3, [r7, #16]
    374a:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the queue appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
    374c:	693b      	ldr	r3, [r7, #16]
    374e:	6959      	ldr	r1, [r3, #20]
    3750:	68fa      	ldr	r2, [r7, #12]
    3752:	4613      	mov	r3, r2
    3754:	009b      	lsls	r3, r3, #2
    3756:	4413      	add	r3, r2
    3758:	009b      	lsls	r3, r3, #2
    375a:	f240 2258 	movw	r2, #600	; 0x258
    375e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3762:	4413      	add	r3, r2
    3764:	4299      	cmp	r1, r3
    3766:	d125      	bne.n	37b4 <vTaskPrioritySet+0xfc>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					vListRemove( &( pxTCB->xGenericListItem ) );
    3768:	693b      	ldr	r3, [r7, #16]
    376a:	3304      	adds	r3, #4
    376c:	4618      	mov	r0, r3
    376e:	f7ff f957 	bl	2a20 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    3772:	693b      	ldr	r3, [r7, #16]
    3774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3776:	f240 4364 	movw	r3, #1124	; 0x464
    377a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    377e:	681b      	ldr	r3, [r3, #0]
    3780:	429a      	cmp	r2, r3
    3782:	d906      	bls.n	3792 <vTaskPrioritySet+0xda>
    3784:	693b      	ldr	r3, [r7, #16]
    3786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3788:	f240 4364 	movw	r3, #1124	; 0x464
    378c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3790:	601a      	str	r2, [r3, #0]
    3792:	693b      	ldr	r3, [r7, #16]
    3794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3796:	4613      	mov	r3, r2
    3798:	009b      	lsls	r3, r3, #2
    379a:	4413      	add	r3, r2
    379c:	009b      	lsls	r3, r3, #2
    379e:	f240 2258 	movw	r2, #600	; 0x258
    37a2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    37a6:	441a      	add	r2, r3
    37a8:	693b      	ldr	r3, [r7, #16]
    37aa:	3304      	adds	r3, #4
    37ac:	4610      	mov	r0, r2
    37ae:	4619      	mov	r1, r3
    37b0:	f7ff f8d6 	bl	2960 <vListInsertEnd>
				}

				if( xYieldRequired == pdTRUE )
    37b4:	697b      	ldr	r3, [r7, #20]
    37b6:	2b01      	cmp	r3, #1
    37b8:	d101      	bne.n	37be <vTaskPrioritySet+0x106>
				{
					portYIELD_WITHIN_API();
    37ba:	f000 ff3b 	bl	4634 <vPortYieldFromISR>
				}
			}
		}
		taskEXIT_CRITICAL();
    37be:	f000 ff5d 	bl	467c <vPortExitCritical>
	}
    37c2:	3718      	adds	r7, #24
    37c4:	46bd      	mov	sp, r7
    37c6:	bd80      	pop	{r7, pc}

000037c8 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
    37c8:	b580      	push	{r7, lr}
    37ca:	b084      	sub	sp, #16
    37cc:	af00      	add	r7, sp, #0
    37ce:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    37d0:	f000 ff3e 	bl	4650 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
    37d4:	f240 2354 	movw	r3, #596	; 0x254
    37d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    37dc:	681b      	ldr	r3, [r3, #0]
    37de:	687a      	ldr	r2, [r7, #4]
    37e0:	429a      	cmp	r2, r3
    37e2:	d101      	bne.n	37e8 <vTaskSuspend+0x20>
			{
				pxTaskToSuspend = NULL;
    37e4:	2300      	movs	r3, #0
    37e6:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
    37e8:	687b      	ldr	r3, [r7, #4]
    37ea:	2b00      	cmp	r3, #0
    37ec:	d105      	bne.n	37fa <vTaskSuspend+0x32>
    37ee:	f240 2354 	movw	r3, #596	; 0x254
    37f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    37f6:	681b      	ldr	r3, [r3, #0]
    37f8:	e000      	b.n	37fc <vTaskSuspend+0x34>
    37fa:	687b      	ldr	r3, [r7, #4]
    37fc:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    37fe:	68fb      	ldr	r3, [r7, #12]
    3800:	3304      	adds	r3, #4
    3802:	4618      	mov	r0, r3
    3804:	f7ff f90c 	bl	2a20 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    3808:	68fb      	ldr	r3, [r7, #12]
    380a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    380c:	2b00      	cmp	r3, #0
    380e:	d004      	beq.n	381a <vTaskSuspend+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    3810:	68fb      	ldr	r3, [r7, #12]
    3812:	3318      	adds	r3, #24
    3814:	4618      	mov	r0, r3
    3816:	f7ff f903 	bl	2a20 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
    381a:	68fb      	ldr	r3, [r7, #12]
    381c:	3304      	adds	r3, #4
    381e:	f240 4044 	movw	r0, #1092	; 0x444
    3822:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3826:	4619      	mov	r1, r3
    3828:	f7ff f89a 	bl	2960 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    382c:	f000 ff26 	bl	467c <vPortExitCritical>

		if( ( void * ) pxTaskToSuspend == NULL )
    3830:	687b      	ldr	r3, [r7, #4]
    3832:	2b00      	cmp	r3, #0
    3834:	d11e      	bne.n	3874 <vTaskSuspend+0xac>
		{
			if( xSchedulerRunning != pdFALSE )
    3836:	f240 4368 	movw	r3, #1128	; 0x468
    383a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    383e:	681b      	ldr	r3, [r3, #0]
    3840:	2b00      	cmp	r3, #0
    3842:	d002      	beq.n	384a <vTaskSuspend+0x82>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
    3844:	f000 fef6 	bl	4634 <vPortYieldFromISR>
    3848:	e014      	b.n	3874 <vTaskSuspend+0xac>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    384a:	f240 4344 	movw	r3, #1092	; 0x444
    384e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3852:	681a      	ldr	r2, [r3, #0]
    3854:	f240 4358 	movw	r3, #1112	; 0x458
    3858:	f2c2 0300 	movt	r3, #8192	; 0x2000
    385c:	681b      	ldr	r3, [r3, #0]
    385e:	429a      	cmp	r2, r3
    3860:	d106      	bne.n	3870 <vTaskSuspend+0xa8>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    3862:	f240 2354 	movw	r3, #596	; 0x254
    3866:	f2c2 0300 	movt	r3, #8192	; 0x2000
    386a:	2200      	movs	r2, #0
    386c:	601a      	str	r2, [r3, #0]
    386e:	e001      	b.n	3874 <vTaskSuspend+0xac>
				}
				else
				{
					vTaskSwitchContext();
    3870:	f000 fb04 	bl	3e7c <vTaskSwitchContext>
				}
			}
		}
	}
    3874:	3710      	adds	r7, #16
    3876:	46bd      	mov	sp, r7
    3878:	bd80      	pop	{r7, pc}
    387a:	bf00      	nop

0000387c <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
    387c:	b480      	push	{r7}
    387e:	b085      	sub	sp, #20
    3880:	af00      	add	r7, sp, #0
    3882:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xReturn = pdFALSE;
    3884:	2300      	movs	r3, #0
    3886:	60fb      	str	r3, [r7, #12]
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
    3888:	687b      	ldr	r3, [r7, #4]
    388a:	60bb      	str	r3, [r7, #8]
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    388c:	68bb      	ldr	r3, [r7, #8]
    388e:	695a      	ldr	r2, [r3, #20]
    3890:	f240 4344 	movw	r3, #1092	; 0x444
    3894:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3898:	429a      	cmp	r2, r3
    389a:	d10d      	bne.n	38b8 <xTaskIsTaskSuspended+0x3c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    389c:	68bb      	ldr	r3, [r7, #8]
    389e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    38a0:	f240 4318 	movw	r3, #1048	; 0x418
    38a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    38a8:	429a      	cmp	r2, r3
    38aa:	d005      	beq.n	38b8 <xTaskIsTaskSuspended+0x3c>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
    38ac:	68bb      	ldr	r3, [r7, #8]
    38ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    38b0:	2b00      	cmp	r3, #0
    38b2:	d101      	bne.n	38b8 <xTaskIsTaskSuspended+0x3c>
				{
					xReturn = pdTRUE;
    38b4:	2301      	movs	r3, #1
    38b6:	60fb      	str	r3, [r7, #12]
				}
			}
		}

		return xReturn;
    38b8:	68fb      	ldr	r3, [r7, #12]
	}
    38ba:	4618      	mov	r0, r3
    38bc:	3714      	adds	r7, #20
    38be:	46bd      	mov	sp, r7
    38c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    38c4:	4770      	bx	lr
    38c6:	bf00      	nop

000038c8 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
    38c8:	b580      	push	{r7, lr}
    38ca:	b084      	sub	sp, #16
    38cc:	af00      	add	r7, sp, #0
    38ce:	6078      	str	r0, [r7, #4]
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
    38d0:	687b      	ldr	r3, [r7, #4]
    38d2:	60fb      	str	r3, [r7, #12]

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    38d4:	68fb      	ldr	r3, [r7, #12]
    38d6:	2b00      	cmp	r3, #0
    38d8:	d043      	beq.n	3962 <vTaskResume+0x9a>
    38da:	f240 2354 	movw	r3, #596	; 0x254
    38de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    38e2:	681b      	ldr	r3, [r3, #0]
    38e4:	68fa      	ldr	r2, [r7, #12]
    38e6:	429a      	cmp	r2, r3
    38e8:	d03b      	beq.n	3962 <vTaskResume+0x9a>
		{
			taskENTER_CRITICAL();
    38ea:	f000 feb1 	bl	4650 <vPortEnterCritical>
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    38ee:	68f8      	ldr	r0, [r7, #12]
    38f0:	f7ff ffc4 	bl	387c <xTaskIsTaskSuspended>
    38f4:	4603      	mov	r3, r0
    38f6:	2b01      	cmp	r3, #1
    38f8:	d131      	bne.n	395e <vTaskResume+0x96>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
    38fa:	68fb      	ldr	r3, [r7, #12]
    38fc:	3304      	adds	r3, #4
    38fe:	4618      	mov	r0, r3
    3900:	f7ff f88e 	bl	2a20 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    3904:	68fb      	ldr	r3, [r7, #12]
    3906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3908:	f240 4364 	movw	r3, #1124	; 0x464
    390c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3910:	681b      	ldr	r3, [r3, #0]
    3912:	429a      	cmp	r2, r3
    3914:	d906      	bls.n	3924 <vTaskResume+0x5c>
    3916:	68fb      	ldr	r3, [r7, #12]
    3918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    391a:	f240 4364 	movw	r3, #1124	; 0x464
    391e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3922:	601a      	str	r2, [r3, #0]
    3924:	68fb      	ldr	r3, [r7, #12]
    3926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3928:	4613      	mov	r3, r2
    392a:	009b      	lsls	r3, r3, #2
    392c:	4413      	add	r3, r2
    392e:	009b      	lsls	r3, r3, #2
    3930:	f240 2258 	movw	r2, #600	; 0x258
    3934:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3938:	441a      	add	r2, r3
    393a:	68fb      	ldr	r3, [r7, #12]
    393c:	3304      	adds	r3, #4
    393e:	4610      	mov	r0, r2
    3940:	4619      	mov	r1, r3
    3942:	f7ff f80d 	bl	2960 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3946:	68fb      	ldr	r3, [r7, #12]
    3948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    394a:	f240 2354 	movw	r3, #596	; 0x254
    394e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3952:	681b      	ldr	r3, [r3, #0]
    3954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3956:	429a      	cmp	r2, r3
    3958:	d301      	bcc.n	395e <vTaskResume+0x96>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
    395a:	f000 fe6b 	bl	4634 <vPortYieldFromISR>
					}
				}
			}
			taskEXIT_CRITICAL();
    395e:	f000 fe8d 	bl	467c <vPortExitCritical>
		}
	}
    3962:	3710      	adds	r7, #16
    3964:	46bd      	mov	sp, r7
    3966:	bd80      	pop	{r7, pc}

00003968 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
    3968:	b580      	push	{r7, lr}
    396a:	b086      	sub	sp, #24
    396c:	af00      	add	r7, sp, #0
    396e:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xYieldRequired = pdFALSE;
    3970:	2300      	movs	r3, #0
    3972:	617b      	str	r3, [r7, #20]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxSavedInterruptStatus;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
    3974:	687b      	ldr	r3, [r7, #4]
    3976:	613b      	str	r3, [r7, #16]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    3978:	2300      	movs	r3, #0
    397a:	60fb      	str	r3, [r7, #12]
    397c:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    3980:	f380 8811 	msr	BASEPRI, r0
		{
			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    3984:	6938      	ldr	r0, [r7, #16]
    3986:	f7ff ff79 	bl	387c <xTaskIsTaskSuspended>
    398a:	4603      	mov	r3, r0
    398c:	2b01      	cmp	r3, #1
    398e:	d144      	bne.n	3a1a <xTaskResumeFromISR+0xb2>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3990:	f240 436c 	movw	r3, #1132	; 0x46c
    3994:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3998:	681b      	ldr	r3, [r3, #0]
    399a:	2b00      	cmp	r3, #0
    399c:	d134      	bne.n	3a08 <xTaskResumeFromISR+0xa0>
				{
					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
    399e:	693b      	ldr	r3, [r7, #16]
    39a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    39a2:	f240 2354 	movw	r3, #596	; 0x254
    39a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    39aa:	681b      	ldr	r3, [r3, #0]
    39ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    39ae:	429a      	cmp	r2, r3
    39b0:	bf34      	ite	cc
    39b2:	2300      	movcc	r3, #0
    39b4:	2301      	movcs	r3, #1
    39b6:	b2db      	uxtb	r3, r3
    39b8:	617b      	str	r3, [r7, #20]
					vListRemove(  &( pxTCB->xGenericListItem ) );
    39ba:	693b      	ldr	r3, [r7, #16]
    39bc:	3304      	adds	r3, #4
    39be:	4618      	mov	r0, r3
    39c0:	f7ff f82e 	bl	2a20 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    39c4:	693b      	ldr	r3, [r7, #16]
    39c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    39c8:	f240 4364 	movw	r3, #1124	; 0x464
    39cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    39d0:	681b      	ldr	r3, [r3, #0]
    39d2:	429a      	cmp	r2, r3
    39d4:	d906      	bls.n	39e4 <xTaskResumeFromISR+0x7c>
    39d6:	693b      	ldr	r3, [r7, #16]
    39d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    39da:	f240 4364 	movw	r3, #1124	; 0x464
    39de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    39e2:	601a      	str	r2, [r3, #0]
    39e4:	693b      	ldr	r3, [r7, #16]
    39e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    39e8:	4613      	mov	r3, r2
    39ea:	009b      	lsls	r3, r3, #2
    39ec:	4413      	add	r3, r2
    39ee:	009b      	lsls	r3, r3, #2
    39f0:	f240 2258 	movw	r2, #600	; 0x258
    39f4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    39f8:	441a      	add	r2, r3
    39fa:	693b      	ldr	r3, [r7, #16]
    39fc:	3304      	adds	r3, #4
    39fe:	4610      	mov	r0, r2
    3a00:	4619      	mov	r1, r3
    3a02:	f7fe ffad 	bl	2960 <vListInsertEnd>
    3a06:	e008      	b.n	3a1a <xTaskResumeFromISR+0xb2>
				else
				{
					/* We cannot access the delayed or ready lists, so will hold this
					task pending until the scheduler is resumed, at which point a
					yield will be performed if necessary. */
					vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    3a08:	693b      	ldr	r3, [r7, #16]
    3a0a:	3318      	adds	r3, #24
    3a0c:	f240 4018 	movw	r0, #1048	; 0x418
    3a10:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3a14:	4619      	mov	r1, r3
    3a16:	f7fe ffa3 	bl	2960 <vListInsertEnd>
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    3a1a:	f04f 0000 	mov.w	r0, #0
    3a1e:	f380 8811 	msr	BASEPRI, r0

		return xYieldRequired;
    3a22:	697b      	ldr	r3, [r7, #20]
	}
    3a24:	4618      	mov	r0, r3
    3a26:	3718      	adds	r7, #24
    3a28:	46bd      	mov	sp, r7
    3a2a:	bd80      	pop	{r7, pc}

00003a2c <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    3a2c:	b580      	push	{r7, lr}
    3a2e:	b086      	sub	sp, #24
    3a30:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    3a32:	2300      	movs	r3, #0
    3a34:	9300      	str	r3, [sp, #0]
    3a36:	2300      	movs	r3, #0
    3a38:	9301      	str	r3, [sp, #4]
    3a3a:	2300      	movs	r3, #0
    3a3c:	9302      	str	r3, [sp, #8]
    3a3e:	2300      	movs	r3, #0
    3a40:	9303      	str	r3, [sp, #12]
    3a42:	f244 1035 	movw	r0, #16693	; 0x4135
    3a46:	f2c0 0000 	movt	r0, #0
    3a4a:	f643 1114 	movw	r1, #14612	; 0x3914
    3a4e:	f2c0 0101 	movt	r1, #1
    3a52:	2280      	movs	r2, #128	; 0x80
    3a54:	2300      	movs	r3, #0
    3a56:	f7ff fc6b 	bl	3330 <xTaskGenericCreate>
    3a5a:	6078      	str	r0, [r7, #4]
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
    3a5c:	687b      	ldr	r3, [r7, #4]
    3a5e:	2b01      	cmp	r3, #1
    3a60:	d111      	bne.n	3a86 <vTaskStartScheduler+0x5a>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
    3a62:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    3a66:	f380 8811 	msr	BASEPRI, r0

		xSchedulerRunning = pdTRUE;
    3a6a:	f240 4368 	movw	r3, #1128	; 0x468
    3a6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a72:	2201      	movs	r2, #1
    3a74:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
    3a76:	f240 435c 	movw	r3, #1116	; 0x45c
    3a7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a7e:	2200      	movs	r2, #0
    3a80:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    3a82:	f000 fda9 	bl	45d8 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    3a86:	3708      	adds	r7, #8
    3a88:	46bd      	mov	sp, r7
    3a8a:	bd80      	pop	{r7, pc}

00003a8c <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    3a8c:	b580      	push	{r7, lr}
    3a8e:	af00      	add	r7, sp, #0
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    3a90:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    3a94:	f380 8811 	msr	BASEPRI, r0
	xSchedulerRunning = pdFALSE;
    3a98:	f240 4368 	movw	r3, #1128	; 0x468
    3a9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3aa0:	2200      	movs	r2, #0
    3aa2:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
    3aa4:	f000 fdc0 	bl	4628 <vPortEndScheduler>
}
    3aa8:	bd80      	pop	{r7, pc}
    3aaa:	bf00      	nop

00003aac <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    3aac:	b480      	push	{r7}
    3aae:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    3ab0:	f240 436c 	movw	r3, #1132	; 0x46c
    3ab4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ab8:	681b      	ldr	r3, [r3, #0]
    3aba:	1c5a      	adds	r2, r3, #1
    3abc:	f240 436c 	movw	r3, #1132	; 0x46c
    3ac0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ac4:	601a      	str	r2, [r3, #0]
}
    3ac6:	46bd      	mov	sp, r7
    3ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
    3acc:	4770      	bx	lr
    3ace:	bf00      	nop

00003ad0 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    3ad0:	b590      	push	{r4, r7, lr}
    3ad2:	b083      	sub	sp, #12
    3ad4:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    3ad6:	2300      	movs	r3, #0
    3ad8:	607b      	str	r3, [r7, #4]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    3ada:	f000 fdb9 	bl	4650 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
    3ade:	f240 436c 	movw	r3, #1132	; 0x46c
    3ae2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ae6:	681b      	ldr	r3, [r3, #0]
    3ae8:	1e5a      	subs	r2, r3, #1
    3aea:	f240 436c 	movw	r3, #1132	; 0x46c
    3aee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3af2:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3af4:	f240 436c 	movw	r3, #1132	; 0x46c
    3af8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3afc:	681b      	ldr	r3, [r3, #0]
    3afe:	2b00      	cmp	r3, #0
    3b00:	f040 8086 	bne.w	3c10 <xTaskResumeAll+0x140>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    3b04:	f240 4358 	movw	r3, #1112	; 0x458
    3b08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b0c:	681b      	ldr	r3, [r3, #0]
    3b0e:	2b00      	cmp	r3, #0
    3b10:	d07e      	beq.n	3c10 <xTaskResumeAll+0x140>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
    3b12:	2300      	movs	r3, #0
    3b14:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    3b16:	e036      	b.n	3b86 <xTaskResumeAll+0xb6>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    3b18:	f240 4318 	movw	r3, #1048	; 0x418
    3b1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b20:	68db      	ldr	r3, [r3, #12]
    3b22:	68dc      	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
    3b24:	f104 0318 	add.w	r3, r4, #24
    3b28:	4618      	mov	r0, r3
    3b2a:	f7fe ff79 	bl	2a20 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    3b2e:	1d23      	adds	r3, r4, #4
    3b30:	4618      	mov	r0, r3
    3b32:	f7fe ff75 	bl	2a20 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    3b36:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3b38:	f240 4364 	movw	r3, #1124	; 0x464
    3b3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b40:	681b      	ldr	r3, [r3, #0]
    3b42:	429a      	cmp	r2, r3
    3b44:	d905      	bls.n	3b52 <xTaskResumeAll+0x82>
    3b46:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3b48:	f240 4364 	movw	r3, #1124	; 0x464
    3b4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b50:	601a      	str	r2, [r3, #0]
    3b52:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3b54:	4613      	mov	r3, r2
    3b56:	009b      	lsls	r3, r3, #2
    3b58:	4413      	add	r3, r2
    3b5a:	009b      	lsls	r3, r3, #2
    3b5c:	f240 2258 	movw	r2, #600	; 0x258
    3b60:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3b64:	441a      	add	r2, r3
    3b66:	1d23      	adds	r3, r4, #4
    3b68:	4610      	mov	r0, r2
    3b6a:	4619      	mov	r1, r3
    3b6c:	f7fe fef8 	bl	2960 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3b70:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3b72:	f240 2354 	movw	r3, #596	; 0x254
    3b76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b7a:	681b      	ldr	r3, [r3, #0]
    3b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3b7e:	429a      	cmp	r2, r3
    3b80:	d301      	bcc.n	3b86 <xTaskResumeAll+0xb6>
					{
						xYieldRequired = pdTRUE;
    3b82:	2301      	movs	r3, #1
    3b84:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    3b86:	f240 4318 	movw	r3, #1048	; 0x418
    3b8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b8e:	681b      	ldr	r3, [r3, #0]
    3b90:	2b00      	cmp	r3, #0
    3b92:	d1c1      	bne.n	3b18 <xTaskResumeAll+0x48>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    3b94:	f240 4370 	movw	r3, #1136	; 0x470
    3b98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b9c:	681b      	ldr	r3, [r3, #0]
    3b9e:	2b00      	cmp	r3, #0
    3ba0:	d022      	beq.n	3be8 <xTaskResumeAll+0x118>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    3ba2:	e01a      	b.n	3bda <xTaskResumeAll+0x10a>
					{
						vTaskIncrementTick();
    3ba4:	f000 f88c 	bl	3cc0 <vTaskIncrementTick>
						--uxMissedTicks;
    3ba8:	f240 4370 	movw	r3, #1136	; 0x470
    3bac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3bb0:	681b      	ldr	r3, [r3, #0]
    3bb2:	1e5a      	subs	r2, r3, #1
    3bb4:	f240 4370 	movw	r3, #1136	; 0x470
    3bb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3bbc:	601a      	str	r2, [r3, #0]
                        // added by wanbo
                        if (uxMissedTicks > (unsigned portBASE_TYPE) 1<<31)
    3bbe:	f240 4370 	movw	r3, #1136	; 0x470
    3bc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3bc6:	681b      	ldr	r3, [r3, #0]
    3bc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    3bcc:	d905      	bls.n	3bda <xTaskResumeAll+0x10a>
                        {
                            uxMissedTicks = 0;
    3bce:	f240 4370 	movw	r3, #1136	; 0x470
    3bd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3bd6:	2200      	movs	r2, #0
    3bd8:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    3bda:	f240 4370 	movw	r3, #1136	; 0x470
    3bde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3be2:	681b      	ldr	r3, [r3, #0]
    3be4:	2b00      	cmp	r3, #0
    3be6:	d1dd      	bne.n	3ba4 <xTaskResumeAll+0xd4>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    3be8:	683b      	ldr	r3, [r7, #0]
    3bea:	2b01      	cmp	r3, #1
    3bec:	d006      	beq.n	3bfc <xTaskResumeAll+0x12c>
    3bee:	f240 4374 	movw	r3, #1140	; 0x474
    3bf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3bf6:	681b      	ldr	r3, [r3, #0]
    3bf8:	2b01      	cmp	r3, #1
    3bfa:	d109      	bne.n	3c10 <xTaskResumeAll+0x140>
				{
					xAlreadyYielded = pdTRUE;
    3bfc:	2301      	movs	r3, #1
    3bfe:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
    3c00:	f240 4374 	movw	r3, #1140	; 0x474
    3c04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c08:	2200      	movs	r2, #0
    3c0a:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
    3c0c:	f000 fd12 	bl	4634 <vPortYieldFromISR>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    3c10:	f000 fd34 	bl	467c <vPortExitCritical>

	return xAlreadyYielded;
    3c14:	687b      	ldr	r3, [r7, #4]
}
    3c16:	4618      	mov	r0, r3
    3c18:	370c      	adds	r7, #12
    3c1a:	46bd      	mov	sp, r7
    3c1c:	bd90      	pop	{r4, r7, pc}
    3c1e:	bf00      	nop

00003c20 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    3c20:	b580      	push	{r7, lr}
    3c22:	b082      	sub	sp, #8
    3c24:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    3c26:	f000 fd13 	bl	4650 <vPortEnterCritical>
	{
		xTicks = xTickCount;
    3c2a:	f240 435c 	movw	r3, #1116	; 0x45c
    3c2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c32:	681b      	ldr	r3, [r3, #0]
    3c34:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
    3c36:	f000 fd21 	bl	467c <vPortExitCritical>

	return xTicks;
    3c3a:	687b      	ldr	r3, [r7, #4]
}
    3c3c:	4618      	mov	r0, r3
    3c3e:	3708      	adds	r7, #8
    3c40:	46bd      	mov	sp, r7
    3c42:	bd80      	pop	{r7, pc}

00003c44 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
    3c44:	b480      	push	{r7}
    3c46:	b083      	sub	sp, #12
    3c48:	af00      	add	r7, sp, #0
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    3c4a:	2300      	movs	r3, #0
    3c4c:	607b      	str	r3, [r7, #4]
    3c4e:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    3c52:	f380 8811 	msr	BASEPRI, r0
	xReturn = xTickCount;
    3c56:	f240 435c 	movw	r3, #1116	; 0x45c
    3c5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c5e:	681b      	ldr	r3, [r3, #0]
    3c60:	603b      	str	r3, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    3c62:	f04f 0000 	mov.w	r0, #0
    3c66:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    3c6a:	683b      	ldr	r3, [r7, #0]
}
    3c6c:	4618      	mov	r0, r3
    3c6e:	370c      	adds	r7, #12
    3c70:	46bd      	mov	sp, r7
    3c72:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c76:	4770      	bx	lr

00003c78 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
    3c78:	b480      	push	{r7}
    3c7a:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    3c7c:	f240 4358 	movw	r3, #1112	; 0x458
    3c80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c84:	681b      	ldr	r3, [r3, #0]
}
    3c86:	4618      	mov	r0, r3
    3c88:	46bd      	mov	sp, r7
    3c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c8e:	4770      	bx	lr

00003c90 <pcTaskGetTaskName>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_pcTaskGetTaskName == 1 )

	signed char *pcTaskGetTaskName( xTaskHandle xTaskToQuery )
	{
    3c90:	b480      	push	{r7}
    3c92:	b085      	sub	sp, #20
    3c94:	af00      	add	r7, sp, #0
    3c96:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		/* If null is passed in here then the name of the calling task is being queried. */
		pxTCB = prvGetTCBFromHandle( xTaskToQuery );
    3c98:	687b      	ldr	r3, [r7, #4]
    3c9a:	2b00      	cmp	r3, #0
    3c9c:	d105      	bne.n	3caa <pcTaskGetTaskName+0x1a>
    3c9e:	f240 2354 	movw	r3, #596	; 0x254
    3ca2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ca6:	681b      	ldr	r3, [r3, #0]
    3ca8:	e000      	b.n	3cac <pcTaskGetTaskName+0x1c>
    3caa:	687b      	ldr	r3, [r7, #4]
    3cac:	60fb      	str	r3, [r7, #12]
		configASSERT( pxTCB );
		return &( pxTCB->pcTaskName[ 0 ] );
    3cae:	68fb      	ldr	r3, [r7, #12]
    3cb0:	3334      	adds	r3, #52	; 0x34
	}
    3cb2:	4618      	mov	r0, r3
    3cb4:	3714      	adds	r7, #20
    3cb6:	46bd      	mov	sp, r7
    3cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
    3cbc:	4770      	bx	lr
    3cbe:	bf00      	nop

00003cc0 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    3cc0:	b580      	push	{r7, lr}
    3cc2:	b084      	sub	sp, #16
    3cc4:	af00      	add	r7, sp, #0
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3cc6:	f240 436c 	movw	r3, #1132	; 0x46c
    3cca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3cce:	681b      	ldr	r3, [r3, #0]
    3cd0:	2b00      	cmp	r3, #0
    3cd2:	f040 80b9 	bne.w	3e48 <vTaskIncrementTick+0x188>
	{
		++xTickCount;
    3cd6:	f240 435c 	movw	r3, #1116	; 0x45c
    3cda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3cde:	681b      	ldr	r3, [r3, #0]
    3ce0:	1c5a      	adds	r2, r3, #1
    3ce2:	f240 435c 	movw	r3, #1116	; 0x45c
    3ce6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3cea:	601a      	str	r2, [r3, #0]
        //vPrintNumber(xTickCount);
		if( xTickCount == ( portTickType ) 0U )
    3cec:	f240 435c 	movw	r3, #1116	; 0x45c
    3cf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3cf4:	681b      	ldr	r3, [r3, #0]
    3cf6:	2b00      	cmp	r3, #0
    3cf8:	d13f      	bne.n	3d7a <vTaskIncrementTick+0xba>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    3cfa:	f240 4310 	movw	r3, #1040	; 0x410
    3cfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d02:	681b      	ldr	r3, [r3, #0]
    3d04:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    3d06:	f240 4314 	movw	r3, #1044	; 0x414
    3d0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d0e:	681a      	ldr	r2, [r3, #0]
    3d10:	f240 4310 	movw	r3, #1040	; 0x410
    3d14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d18:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
    3d1a:	f240 4314 	movw	r3, #1044	; 0x414
    3d1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d22:	68fa      	ldr	r2, [r7, #12]
    3d24:	601a      	str	r2, [r3, #0]
			xNumOfOverflows++;
    3d26:	f240 4378 	movw	r3, #1144	; 0x478
    3d2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d2e:	681b      	ldr	r3, [r3, #0]
    3d30:	1c5a      	adds	r2, r3, #1
    3d32:	f240 4378 	movw	r3, #1144	; 0x478
    3d36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d3a:	601a      	str	r2, [r3, #0]
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    3d3c:	f240 4310 	movw	r3, #1040	; 0x410
    3d40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d44:	681b      	ldr	r3, [r3, #0]
    3d46:	681b      	ldr	r3, [r3, #0]
    3d48:	2b00      	cmp	r3, #0
    3d4a:	d107      	bne.n	3d5c <vTaskIncrementTick+0x9c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    3d4c:	f240 03f8 	movw	r3, #248	; 0xf8
    3d50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d54:	f04f 32ff 	mov.w	r2, #4294967295
    3d58:	601a      	str	r2, [r3, #0]
    3d5a:	e00e      	b.n	3d7a <vTaskIncrementTick+0xba>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    3d5c:	f240 4310 	movw	r3, #1040	; 0x410
    3d60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d64:	681b      	ldr	r3, [r3, #0]
    3d66:	68db      	ldr	r3, [r3, #12]
    3d68:	68db      	ldr	r3, [r3, #12]
    3d6a:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    3d6c:	68bb      	ldr	r3, [r7, #8]
    3d6e:	685a      	ldr	r2, [r3, #4]
    3d70:	f240 03f8 	movw	r3, #248	; 0xf8
    3d74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d78:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    3d7a:	f240 435c 	movw	r3, #1116	; 0x45c
    3d7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d82:	681a      	ldr	r2, [r3, #0]
    3d84:	f240 03f8 	movw	r3, #248	; 0xf8
    3d88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d8c:	681b      	ldr	r3, [r3, #0]
    3d8e:	429a      	cmp	r2, r3
    3d90:	d359      	bcc.n	3e46 <vTaskIncrementTick+0x186>
    3d92:	f240 4310 	movw	r3, #1040	; 0x410
    3d96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d9a:	681b      	ldr	r3, [r3, #0]
    3d9c:	681b      	ldr	r3, [r3, #0]
    3d9e:	2b00      	cmp	r3, #0
    3da0:	d107      	bne.n	3db2 <vTaskIncrementTick+0xf2>
    3da2:	f240 03f8 	movw	r3, #248	; 0xf8
    3da6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3daa:	f04f 32ff 	mov.w	r2, #4294967295
    3dae:	601a      	str	r2, [r3, #0]
    3db0:	e049      	b.n	3e46 <vTaskIncrementTick+0x186>
    3db2:	f240 4310 	movw	r3, #1040	; 0x410
    3db6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3dba:	681b      	ldr	r3, [r3, #0]
    3dbc:	68db      	ldr	r3, [r3, #12]
    3dbe:	68db      	ldr	r3, [r3, #12]
    3dc0:	60bb      	str	r3, [r7, #8]
    3dc2:	68bb      	ldr	r3, [r7, #8]
    3dc4:	685b      	ldr	r3, [r3, #4]
    3dc6:	607b      	str	r3, [r7, #4]
    3dc8:	f240 435c 	movw	r3, #1116	; 0x45c
    3dcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3dd0:	681a      	ldr	r2, [r3, #0]
    3dd2:	687b      	ldr	r3, [r7, #4]
    3dd4:	429a      	cmp	r2, r3
    3dd6:	d206      	bcs.n	3de6 <vTaskIncrementTick+0x126>
    3dd8:	f240 03f8 	movw	r3, #248	; 0xf8
    3ddc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3de0:	687a      	ldr	r2, [r7, #4]
    3de2:	601a      	str	r2, [r3, #0]
    3de4:	e02f      	b.n	3e46 <vTaskIncrementTick+0x186>
    3de6:	68bb      	ldr	r3, [r7, #8]
    3de8:	3304      	adds	r3, #4
    3dea:	4618      	mov	r0, r3
    3dec:	f7fe fe18 	bl	2a20 <vListRemove>
    3df0:	68bb      	ldr	r3, [r7, #8]
    3df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3df4:	2b00      	cmp	r3, #0
    3df6:	d004      	beq.n	3e02 <vTaskIncrementTick+0x142>
    3df8:	68bb      	ldr	r3, [r7, #8]
    3dfa:	3318      	adds	r3, #24
    3dfc:	4618      	mov	r0, r3
    3dfe:	f7fe fe0f 	bl	2a20 <vListRemove>
    3e02:	68bb      	ldr	r3, [r7, #8]
    3e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3e06:	f240 4364 	movw	r3, #1124	; 0x464
    3e0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e0e:	681b      	ldr	r3, [r3, #0]
    3e10:	429a      	cmp	r2, r3
    3e12:	d906      	bls.n	3e22 <vTaskIncrementTick+0x162>
    3e14:	68bb      	ldr	r3, [r7, #8]
    3e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3e18:	f240 4364 	movw	r3, #1124	; 0x464
    3e1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e20:	601a      	str	r2, [r3, #0]
    3e22:	68bb      	ldr	r3, [r7, #8]
    3e24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3e26:	4613      	mov	r3, r2
    3e28:	009b      	lsls	r3, r3, #2
    3e2a:	4413      	add	r3, r2
    3e2c:	009b      	lsls	r3, r3, #2
    3e2e:	f240 2258 	movw	r2, #600	; 0x258
    3e32:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3e36:	441a      	add	r2, r3
    3e38:	68bb      	ldr	r3, [r7, #8]
    3e3a:	3304      	adds	r3, #4
    3e3c:	4610      	mov	r0, r2
    3e3e:	4619      	mov	r1, r3
    3e40:	f7fe fd8e 	bl	2960 <vListInsertEnd>
    3e44:	e7a5      	b.n	3d92 <vTaskIncrementTick+0xd2>
    3e46:	e00c      	b.n	3e62 <vTaskIncrementTick+0x1a2>
	}
	else
	{
		++uxMissedTicks;
    3e48:	f240 4370 	movw	r3, #1136	; 0x470
    3e4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e50:	681b      	ldr	r3, [r3, #0]
    3e52:	1c5a      	adds	r2, r3, #1
    3e54:	f240 4370 	movw	r3, #1136	; 0x470
    3e58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e5c:	601a      	str	r2, [r3, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
    3e5e:	f00e fc2f 	bl	126c0 <vApplicationTickHook>

	#if ( configUSE_TICK_HOOK == 1 )
	{
		/* Guard against the tick hook being called when the missed tick
		count is being unwound (when the scheduler is being unlocked. */
		if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
    3e62:	f240 4370 	movw	r3, #1136	; 0x470
    3e66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e6a:	681b      	ldr	r3, [r3, #0]
    3e6c:	2b00      	cmp	r3, #0
    3e6e:	d101      	bne.n	3e74 <vTaskIncrementTick+0x1b4>
		{
			vApplicationTickHook();
    3e70:	f00e fc26 	bl	126c0 <vApplicationTickHook>
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    3e74:	3710      	adds	r7, #16
    3e76:	46bd      	mov	sp, r7
    3e78:	bd80      	pop	{r7, pc}
    3e7a:	bf00      	nop

00003e7c <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    3e7c:	b580      	push	{r7, lr}
    3e7e:	b082      	sub	sp, #8
    3e80:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    3e82:	f240 436c 	movw	r3, #1132	; 0x46c
    3e86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e8a:	681b      	ldr	r3, [r3, #0]
    3e8c:	2b00      	cmp	r3, #0
    3e8e:	d006      	beq.n	3e9e <vTaskSwitchContext+0x22>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    3e90:	f240 4374 	movw	r3, #1140	; 0x474
    3e94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e98:	2201      	movs	r2, #1
    3e9a:	601a      	str	r2, [r3, #0]
    3e9c:	e047      	b.n	3f2e <vTaskSwitchContext+0xb2>
	}
	else
	{
		traceTASK_SWITCHED_OUT();
    3e9e:	f00e fbf9 	bl	12694 <myTraceSwitchedOut>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    3ea2:	e00a      	b.n	3eba <vTaskSwitchContext+0x3e>
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    3ea4:	f240 4364 	movw	r3, #1124	; 0x464
    3ea8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3eac:	681b      	ldr	r3, [r3, #0]
    3eae:	1e5a      	subs	r2, r3, #1
    3eb0:	f240 4364 	movw	r3, #1124	; 0x464
    3eb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3eb8:	601a      	str	r2, [r3, #0]
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    3eba:	f240 4364 	movw	r3, #1124	; 0x464
    3ebe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ec2:	6819      	ldr	r1, [r3, #0]
    3ec4:	f240 2258 	movw	r2, #600	; 0x258
    3ec8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3ecc:	460b      	mov	r3, r1
    3ece:	009b      	lsls	r3, r3, #2
    3ed0:	440b      	add	r3, r1
    3ed2:	009b      	lsls	r3, r3, #2
    3ed4:	4413      	add	r3, r2
    3ed6:	681b      	ldr	r3, [r3, #0]
    3ed8:	2b00      	cmp	r3, #0
    3eda:	d0e3      	beq.n	3ea4 <vTaskSwitchContext+0x28>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    3edc:	f240 4364 	movw	r3, #1124	; 0x464
    3ee0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ee4:	681a      	ldr	r2, [r3, #0]
    3ee6:	4613      	mov	r3, r2
    3ee8:	009b      	lsls	r3, r3, #2
    3eea:	4413      	add	r3, r2
    3eec:	009b      	lsls	r3, r3, #2
    3eee:	f240 2258 	movw	r2, #600	; 0x258
    3ef2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3ef6:	4413      	add	r3, r2
    3ef8:	607b      	str	r3, [r7, #4]
    3efa:	687b      	ldr	r3, [r7, #4]
    3efc:	685b      	ldr	r3, [r3, #4]
    3efe:	685a      	ldr	r2, [r3, #4]
    3f00:	687b      	ldr	r3, [r7, #4]
    3f02:	605a      	str	r2, [r3, #4]
    3f04:	687b      	ldr	r3, [r7, #4]
    3f06:	685a      	ldr	r2, [r3, #4]
    3f08:	687b      	ldr	r3, [r7, #4]
    3f0a:	3308      	adds	r3, #8
    3f0c:	429a      	cmp	r2, r3
    3f0e:	d104      	bne.n	3f1a <vTaskSwitchContext+0x9e>
    3f10:	687b      	ldr	r3, [r7, #4]
    3f12:	685b      	ldr	r3, [r3, #4]
    3f14:	685a      	ldr	r2, [r3, #4]
    3f16:	687b      	ldr	r3, [r7, #4]
    3f18:	605a      	str	r2, [r3, #4]
    3f1a:	687b      	ldr	r3, [r7, #4]
    3f1c:	685b      	ldr	r3, [r3, #4]
    3f1e:	68da      	ldr	r2, [r3, #12]
    3f20:	f240 2354 	movw	r3, #596	; 0x254
    3f24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f28:	601a      	str	r2, [r3, #0]
        //vPrintString(pcTaskGetTaskName(pxCurrentTCB));
	
		traceTASK_SWITCHED_IN();
    3f2a:	f00e fbad 	bl	12688 <myTraceSwitchedIn>
	}
}
    3f2e:	3708      	adds	r7, #8
    3f30:	46bd      	mov	sp, r7
    3f32:	bd80      	pop	{r7, pc}

00003f34 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    3f34:	b580      	push	{r7, lr}
    3f36:	b084      	sub	sp, #16
    3f38:	af00      	add	r7, sp, #0
    3f3a:	6078      	str	r0, [r7, #4]
    3f3c:	6039      	str	r1, [r7, #0]
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    3f3e:	f240 2354 	movw	r3, #596	; 0x254
    3f42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f46:	681b      	ldr	r3, [r3, #0]
    3f48:	3318      	adds	r3, #24
    3f4a:	6878      	ldr	r0, [r7, #4]
    3f4c:	4619      	mov	r1, r3
    3f4e:	f7fe fd2f 	bl	29b0 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3f52:	f240 2354 	movw	r3, #596	; 0x254
    3f56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f5a:	681b      	ldr	r3, [r3, #0]
    3f5c:	3304      	adds	r3, #4
    3f5e:	4618      	mov	r0, r3
    3f60:	f7fe fd5e 	bl	2a20 <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    3f64:	683b      	ldr	r3, [r7, #0]
    3f66:	f1b3 3fff 	cmp.w	r3, #4294967295
    3f6a:	d10d      	bne.n	3f88 <vTaskPlaceOnEventList+0x54>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3f6c:	f240 2354 	movw	r3, #596	; 0x254
    3f70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f74:	681b      	ldr	r3, [r3, #0]
    3f76:	3304      	adds	r3, #4
    3f78:	f240 4044 	movw	r0, #1092	; 0x444
    3f7c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3f80:	4619      	mov	r1, r3
    3f82:	f7fe fced 	bl	2960 <vListInsertEnd>
    3f86:	e00a      	b.n	3f9e <vTaskPlaceOnEventList+0x6a>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    3f88:	f240 435c 	movw	r3, #1116	; 0x45c
    3f8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f90:	681a      	ldr	r2, [r3, #0]
    3f92:	683b      	ldr	r3, [r7, #0]
    3f94:	4413      	add	r3, r2
    3f96:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    3f98:	68f8      	ldr	r0, [r7, #12]
    3f9a:	f000 f99f 	bl	42dc <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
    3f9e:	3710      	adds	r7, #16
    3fa0:	46bd      	mov	sp, r7
    3fa2:	bd80      	pop	{r7, pc}

00003fa4 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    3fa4:	b580      	push	{r7, lr}
    3fa6:	b084      	sub	sp, #16
    3fa8:	af00      	add	r7, sp, #0
    3faa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    3fac:	687b      	ldr	r3, [r7, #4]
    3fae:	68db      	ldr	r3, [r3, #12]
    3fb0:	68db      	ldr	r3, [r3, #12]
    3fb2:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    3fb4:	68bb      	ldr	r3, [r7, #8]
    3fb6:	3318      	adds	r3, #24
    3fb8:	4618      	mov	r0, r3
    3fba:	f7fe fd31 	bl	2a20 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3fbe:	f240 436c 	movw	r3, #1132	; 0x46c
    3fc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3fc6:	681b      	ldr	r3, [r3, #0]
    3fc8:	2b00      	cmp	r3, #0
    3fca:	d126      	bne.n	401a <xTaskRemoveFromEventList+0x76>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    3fcc:	68bb      	ldr	r3, [r7, #8]
    3fce:	3304      	adds	r3, #4
    3fd0:	4618      	mov	r0, r3
    3fd2:	f7fe fd25 	bl	2a20 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    3fd6:	68bb      	ldr	r3, [r7, #8]
    3fd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3fda:	f240 4364 	movw	r3, #1124	; 0x464
    3fde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3fe2:	681b      	ldr	r3, [r3, #0]
    3fe4:	429a      	cmp	r2, r3
    3fe6:	d906      	bls.n	3ff6 <xTaskRemoveFromEventList+0x52>
    3fe8:	68bb      	ldr	r3, [r7, #8]
    3fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3fec:	f240 4364 	movw	r3, #1124	; 0x464
    3ff0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ff4:	601a      	str	r2, [r3, #0]
    3ff6:	68bb      	ldr	r3, [r7, #8]
    3ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3ffa:	4613      	mov	r3, r2
    3ffc:	009b      	lsls	r3, r3, #2
    3ffe:	4413      	add	r3, r2
    4000:	009b      	lsls	r3, r3, #2
    4002:	f240 2258 	movw	r2, #600	; 0x258
    4006:	f2c2 0200 	movt	r2, #8192	; 0x2000
    400a:	441a      	add	r2, r3
    400c:	68bb      	ldr	r3, [r7, #8]
    400e:	3304      	adds	r3, #4
    4010:	4610      	mov	r0, r2
    4012:	4619      	mov	r1, r3
    4014:	f7fe fca4 	bl	2960 <vListInsertEnd>
    4018:	e008      	b.n	402c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    401a:	68bb      	ldr	r3, [r7, #8]
    401c:	3318      	adds	r3, #24
    401e:	f240 4018 	movw	r0, #1048	; 0x418
    4022:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4026:	4619      	mov	r1, r3
    4028:	f7fe fc9a 	bl	2960 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    402c:	68bb      	ldr	r3, [r7, #8]
    402e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4030:	f240 2354 	movw	r3, #596	; 0x254
    4034:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4038:	681b      	ldr	r3, [r3, #0]
    403a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    403c:	429a      	cmp	r2, r3
    403e:	d302      	bcc.n	4046 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    4040:	2301      	movs	r3, #1
    4042:	60fb      	str	r3, [r7, #12]
    4044:	e001      	b.n	404a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
    4046:	2300      	movs	r3, #0
    4048:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    404a:	68fb      	ldr	r3, [r7, #12]
}
    404c:	4618      	mov	r0, r3
    404e:	3710      	adds	r7, #16
    4050:	46bd      	mov	sp, r7
    4052:	bd80      	pop	{r7, pc}

00004054 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    4054:	b480      	push	{r7}
    4056:	b083      	sub	sp, #12
    4058:	af00      	add	r7, sp, #0
    405a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    405c:	f240 4378 	movw	r3, #1144	; 0x478
    4060:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4064:	681a      	ldr	r2, [r3, #0]
    4066:	687b      	ldr	r3, [r7, #4]
    4068:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    406a:	f240 435c 	movw	r3, #1116	; 0x45c
    406e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4072:	681a      	ldr	r2, [r3, #0]
    4074:	687b      	ldr	r3, [r7, #4]
    4076:	605a      	str	r2, [r3, #4]
}
    4078:	370c      	adds	r7, #12
    407a:	46bd      	mov	sp, r7
    407c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4080:	4770      	bx	lr
    4082:	bf00      	nop

00004084 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    4084:	b580      	push	{r7, lr}
    4086:	b084      	sub	sp, #16
    4088:	af00      	add	r7, sp, #0
    408a:	6078      	str	r0, [r7, #4]
    408c:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    408e:	f000 fadf 	bl	4650 <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    4092:	683b      	ldr	r3, [r7, #0]
    4094:	681b      	ldr	r3, [r3, #0]
    4096:	f1b3 3fff 	cmp.w	r3, #4294967295
    409a:	d102      	bne.n	40a2 <xTaskCheckForTimeOut+0x1e>
			{
				xReturn = pdFALSE;
    409c:	2300      	movs	r3, #0
    409e:	60fb      	str	r3, [r7, #12]
    40a0:	e035      	b.n	410e <xTaskCheckForTimeOut+0x8a>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    40a2:	687b      	ldr	r3, [r7, #4]
    40a4:	681a      	ldr	r2, [r3, #0]
    40a6:	f240 4378 	movw	r3, #1144	; 0x478
    40aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    40ae:	681b      	ldr	r3, [r3, #0]
    40b0:	429a      	cmp	r2, r3
    40b2:	d00b      	beq.n	40cc <xTaskCheckForTimeOut+0x48>
    40b4:	687b      	ldr	r3, [r7, #4]
    40b6:	685a      	ldr	r2, [r3, #4]
    40b8:	f240 435c 	movw	r3, #1116	; 0x45c
    40bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    40c0:	681b      	ldr	r3, [r3, #0]
    40c2:	429a      	cmp	r2, r3
    40c4:	d802      	bhi.n	40cc <xTaskCheckForTimeOut+0x48>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    40c6:	2301      	movs	r3, #1
    40c8:	60fb      	str	r3, [r7, #12]
    40ca:	e020      	b.n	410e <xTaskCheckForTimeOut+0x8a>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    40cc:	f240 435c 	movw	r3, #1116	; 0x45c
    40d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    40d4:	681a      	ldr	r2, [r3, #0]
    40d6:	687b      	ldr	r3, [r7, #4]
    40d8:	685b      	ldr	r3, [r3, #4]
    40da:	1ad2      	subs	r2, r2, r3
    40dc:	683b      	ldr	r3, [r7, #0]
    40de:	681b      	ldr	r3, [r3, #0]
    40e0:	429a      	cmp	r2, r3
    40e2:	d212      	bcs.n	410a <xTaskCheckForTimeOut+0x86>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    40e4:	683b      	ldr	r3, [r7, #0]
    40e6:	681a      	ldr	r2, [r3, #0]
    40e8:	687b      	ldr	r3, [r7, #4]
    40ea:	6859      	ldr	r1, [r3, #4]
    40ec:	f240 435c 	movw	r3, #1116	; 0x45c
    40f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    40f4:	681b      	ldr	r3, [r3, #0]
    40f6:	1acb      	subs	r3, r1, r3
    40f8:	441a      	add	r2, r3
    40fa:	683b      	ldr	r3, [r7, #0]
    40fc:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
    40fe:	6878      	ldr	r0, [r7, #4]
    4100:	f7ff ffa8 	bl	4054 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    4104:	2300      	movs	r3, #0
    4106:	60fb      	str	r3, [r7, #12]
    4108:	e001      	b.n	410e <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			xReturn = pdTRUE;
    410a:	2301      	movs	r3, #1
    410c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    410e:	f000 fab5 	bl	467c <vPortExitCritical>

	return xReturn;
    4112:	68fb      	ldr	r3, [r7, #12]
}
    4114:	4618      	mov	r0, r3
    4116:	3710      	adds	r7, #16
    4118:	46bd      	mov	sp, r7
    411a:	bd80      	pop	{r7, pc}

0000411c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    411c:	b480      	push	{r7}
    411e:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
    4120:	f240 4374 	movw	r3, #1140	; 0x474
    4124:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4128:	2201      	movs	r2, #1
    412a:	601a      	str	r2, [r3, #0]
}
    412c:	46bd      	mov	sp, r7
    412e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4132:	4770      	bx	lr

00004134 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    4134:	b580      	push	{r7, lr}
    4136:	b082      	sub	sp, #8
    4138:	af00      	add	r7, sp, #0
    413a:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    413c:	f000 f886 	bl	424c <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
    4140:	f000 fa78 	bl	4634 <vPortYieldFromISR>
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
    4144:	e7fa      	b.n	413c <prvIdleTask+0x8>
    4146:	bf00      	nop

00004148 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    4148:	b580      	push	{r7, lr}
    414a:	b084      	sub	sp, #16
    414c:	af00      	add	r7, sp, #0
    414e:	60f8      	str	r0, [r7, #12]
    4150:	60b9      	str	r1, [r7, #8]
    4152:	607a      	str	r2, [r7, #4]
    4154:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    4156:	68fb      	ldr	r3, [r7, #12]
    4158:	3334      	adds	r3, #52	; 0x34
    415a:	4618      	mov	r0, r3
    415c:	68b9      	ldr	r1, [r7, #8]
    415e:	2210      	movs	r2, #16
    4160:	f00f fb66 	bl	13830 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    4164:	68fb      	ldr	r3, [r7, #12]
    4166:	2200      	movs	r2, #0
    4168:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    416c:	687b      	ldr	r3, [r7, #4]
    416e:	2b13      	cmp	r3, #19
    4170:	d901      	bls.n	4176 <prvInitialiseTCBVariables+0x2e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    4172:	2313      	movs	r3, #19
    4174:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
    4176:	68fb      	ldr	r3, [r7, #12]
    4178:	687a      	ldr	r2, [r7, #4]
    417a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    417c:	68fb      	ldr	r3, [r7, #12]
    417e:	687a      	ldr	r2, [r7, #4]
    4180:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    4182:	68fb      	ldr	r3, [r7, #12]
    4184:	3304      	adds	r3, #4
    4186:	4618      	mov	r0, r3
    4188:	f7fe fbde 	bl	2948 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    418c:	68fb      	ldr	r3, [r7, #12]
    418e:	3318      	adds	r3, #24
    4190:	4618      	mov	r0, r3
    4192:	f7fe fbd9 	bl	2948 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    4196:	68fb      	ldr	r3, [r7, #12]
    4198:	68fa      	ldr	r2, [r7, #12]
    419a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    419c:	687b      	ldr	r3, [r7, #4]
    419e:	f1c3 0214 	rsb	r2, r3, #20
    41a2:	68fb      	ldr	r3, [r7, #12]
    41a4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    41a6:	68fb      	ldr	r3, [r7, #12]
    41a8:	68fa      	ldr	r2, [r7, #12]
    41aa:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    41ac:	3710      	adds	r7, #16
    41ae:	46bd      	mov	sp, r7
    41b0:	bd80      	pop	{r7, pc}
    41b2:	bf00      	nop

000041b4 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    41b4:	b580      	push	{r7, lr}
    41b6:	b082      	sub	sp, #8
    41b8:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    41ba:	2300      	movs	r3, #0
    41bc:	607b      	str	r3, [r7, #4]
    41be:	e00f      	b.n	41e0 <prvInitialiseTaskLists+0x2c>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    41c0:	687a      	ldr	r2, [r7, #4]
    41c2:	4613      	mov	r3, r2
    41c4:	009b      	lsls	r3, r3, #2
    41c6:	4413      	add	r3, r2
    41c8:	009b      	lsls	r3, r3, #2
    41ca:	f240 2258 	movw	r2, #600	; 0x258
    41ce:	f2c2 0200 	movt	r2, #8192	; 0x2000
    41d2:	4413      	add	r3, r2
    41d4:	4618      	mov	r0, r3
    41d6:	f7fe fb97 	bl	2908 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    41da:	687b      	ldr	r3, [r7, #4]
    41dc:	3301      	adds	r3, #1
    41de:	607b      	str	r3, [r7, #4]
    41e0:	687b      	ldr	r3, [r7, #4]
    41e2:	2b13      	cmp	r3, #19
    41e4:	d9ec      	bls.n	41c0 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    41e6:	f240 30e8 	movw	r0, #1000	; 0x3e8
    41ea:	f2c2 0000 	movt	r0, #8192	; 0x2000
    41ee:	f7fe fb8b 	bl	2908 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    41f2:	f240 30fc 	movw	r0, #1020	; 0x3fc
    41f6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    41fa:	f7fe fb85 	bl	2908 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    41fe:	f240 4018 	movw	r0, #1048	; 0x418
    4202:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4206:	f7fe fb7f 	bl	2908 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    420a:	f240 402c 	movw	r0, #1068	; 0x42c
    420e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4212:	f7fe fb79 	bl	2908 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
    4216:	f240 4044 	movw	r0, #1092	; 0x444
    421a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    421e:	f7fe fb73 	bl	2908 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    4222:	f240 4310 	movw	r3, #1040	; 0x410
    4226:	f2c2 0300 	movt	r3, #8192	; 0x2000
    422a:	f240 32e8 	movw	r2, #1000	; 0x3e8
    422e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4232:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    4234:	f240 4314 	movw	r3, #1044	; 0x414
    4238:	f2c2 0300 	movt	r3, #8192	; 0x2000
    423c:	f240 32fc 	movw	r2, #1020	; 0x3fc
    4240:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4244:	601a      	str	r2, [r3, #0]
}
    4246:	3708      	adds	r7, #8
    4248:	46bd      	mov	sp, r7
    424a:	bd80      	pop	{r7, pc}

0000424c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    424c:	b580      	push	{r7, lr}
    424e:	b082      	sub	sp, #8
    4250:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    4252:	f240 4340 	movw	r3, #1088	; 0x440
    4256:	f2c2 0300 	movt	r3, #8192	; 0x2000
    425a:	681b      	ldr	r3, [r3, #0]
    425c:	2b00      	cmp	r3, #0
    425e:	d03a      	beq.n	42d6 <prvCheckTasksWaitingTermination+0x8a>
		{
			vTaskSuspendAll();
    4260:	f7ff fc24 	bl	3aac <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    4264:	f240 432c 	movw	r3, #1068	; 0x42c
    4268:	f2c2 0300 	movt	r3, #8192	; 0x2000
    426c:	681b      	ldr	r3, [r3, #0]
    426e:	2b00      	cmp	r3, #0
    4270:	bf14      	ite	ne
    4272:	2300      	movne	r3, #0
    4274:	2301      	moveq	r3, #1
    4276:	b2db      	uxtb	r3, r3
    4278:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
    427a:	f7ff fc29 	bl	3ad0 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    427e:	687b      	ldr	r3, [r7, #4]
    4280:	2b00      	cmp	r3, #0
    4282:	d128      	bne.n	42d6 <prvCheckTasksWaitingTermination+0x8a>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    4284:	f000 f9e4 	bl	4650 <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    4288:	f240 432c 	movw	r3, #1068	; 0x42c
    428c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4290:	68db      	ldr	r3, [r3, #12]
    4292:	68db      	ldr	r3, [r3, #12]
    4294:	603b      	str	r3, [r7, #0]
					vListRemove( &( pxTCB->xGenericListItem ) );
    4296:	683b      	ldr	r3, [r7, #0]
    4298:	3304      	adds	r3, #4
    429a:	4618      	mov	r0, r3
    429c:	f7fe fbc0 	bl	2a20 <vListRemove>
					--uxCurrentNumberOfTasks;
    42a0:	f240 4358 	movw	r3, #1112	; 0x458
    42a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    42a8:	681b      	ldr	r3, [r3, #0]
    42aa:	1e5a      	subs	r2, r3, #1
    42ac:	f240 4358 	movw	r3, #1112	; 0x458
    42b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    42b4:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
    42b6:	f240 4340 	movw	r3, #1088	; 0x440
    42ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    42be:	681b      	ldr	r3, [r3, #0]
    42c0:	1e5a      	subs	r2, r3, #1
    42c2:	f240 4340 	movw	r3, #1088	; 0x440
    42c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    42ca:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
    42cc:	f000 f9d6 	bl	467c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
    42d0:	6838      	ldr	r0, [r7, #0]
    42d2:	f000 f879 	bl	43c8 <prvDeleteTCB>
			}
		}
	}
	#endif
}
    42d6:	3708      	adds	r7, #8
    42d8:	46bd      	mov	sp, r7
    42da:	bd80      	pop	{r7, pc}

000042dc <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    42dc:	b580      	push	{r7, lr}
    42de:	b082      	sub	sp, #8
    42e0:	af00      	add	r7, sp, #0
    42e2:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    42e4:	f240 2354 	movw	r3, #596	; 0x254
    42e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    42ec:	681b      	ldr	r3, [r3, #0]
    42ee:	687a      	ldr	r2, [r7, #4]
    42f0:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
    42f2:	f240 435c 	movw	r3, #1116	; 0x45c
    42f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    42fa:	681b      	ldr	r3, [r3, #0]
    42fc:	687a      	ldr	r2, [r7, #4]
    42fe:	429a      	cmp	r2, r3
    4300:	d20f      	bcs.n	4322 <prvAddCurrentTaskToDelayedList+0x46>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4302:	f240 4314 	movw	r3, #1044	; 0x414
    4306:	f2c2 0300 	movt	r3, #8192	; 0x2000
    430a:	681a      	ldr	r2, [r3, #0]
    430c:	f240 2354 	movw	r3, #596	; 0x254
    4310:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4314:	681b      	ldr	r3, [r3, #0]
    4316:	3304      	adds	r3, #4
    4318:	4610      	mov	r0, r2
    431a:	4619      	mov	r1, r3
    431c:	f7fe fb48 	bl	29b0 <vListInsert>
    4320:	e01c      	b.n	435c <prvAddCurrentTaskToDelayedList+0x80>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4322:	f240 4310 	movw	r3, #1040	; 0x410
    4326:	f2c2 0300 	movt	r3, #8192	; 0x2000
    432a:	681a      	ldr	r2, [r3, #0]
    432c:	f240 2354 	movw	r3, #596	; 0x254
    4330:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4334:	681b      	ldr	r3, [r3, #0]
    4336:	3304      	adds	r3, #4
    4338:	4610      	mov	r0, r2
    433a:	4619      	mov	r1, r3
    433c:	f7fe fb38 	bl	29b0 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    4340:	f240 03f8 	movw	r3, #248	; 0xf8
    4344:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4348:	681b      	ldr	r3, [r3, #0]
    434a:	687a      	ldr	r2, [r7, #4]
    434c:	429a      	cmp	r2, r3
    434e:	d205      	bcs.n	435c <prvAddCurrentTaskToDelayedList+0x80>
		{
			xNextTaskUnblockTime = xTimeToWake;
    4350:	f240 03f8 	movw	r3, #248	; 0xf8
    4354:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4358:	687a      	ldr	r2, [r7, #4]
    435a:	601a      	str	r2, [r3, #0]
		}
	}
}
    435c:	3708      	adds	r7, #8
    435e:	46bd      	mov	sp, r7
    4360:	bd80      	pop	{r7, pc}
    4362:	bf00      	nop

00004364 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    4364:	b580      	push	{r7, lr}
    4366:	b084      	sub	sp, #16
    4368:	af00      	add	r7, sp, #0
    436a:	4603      	mov	r3, r0
    436c:	6039      	str	r1, [r7, #0]
    436e:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    4370:	2048      	movs	r0, #72	; 0x48
    4372:	f000 f9e7 	bl	4744 <pvPortMalloc>
    4376:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
    4378:	68fb      	ldr	r3, [r7, #12]
    437a:	2b00      	cmp	r3, #0
    437c:	d01f      	beq.n	43be <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    437e:	683b      	ldr	r3, [r7, #0]
    4380:	2b00      	cmp	r3, #0
    4382:	d106      	bne.n	4392 <prvAllocateTCBAndStack+0x2e>
    4384:	88fb      	ldrh	r3, [r7, #6]
    4386:	009b      	lsls	r3, r3, #2
    4388:	4618      	mov	r0, r3
    438a:	f000 f9db 	bl	4744 <pvPortMalloc>
    438e:	4603      	mov	r3, r0
    4390:	e000      	b.n	4394 <prvAllocateTCBAndStack+0x30>
    4392:	683b      	ldr	r3, [r7, #0]
    4394:	68fa      	ldr	r2, [r7, #12]
    4396:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
    4398:	68fb      	ldr	r3, [r7, #12]
    439a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    439c:	2b00      	cmp	r3, #0
    439e:	d105      	bne.n	43ac <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    43a0:	68f8      	ldr	r0, [r7, #12]
    43a2:	f000 fa93 	bl	48cc <vPortFree>
			pxNewTCB = NULL;
    43a6:	2300      	movs	r3, #0
    43a8:	60fb      	str	r3, [r7, #12]
    43aa:	e008      	b.n	43be <prvAllocateTCBAndStack+0x5a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    43ac:	68fb      	ldr	r3, [r7, #12]
    43ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    43b0:	88fb      	ldrh	r3, [r7, #6]
    43b2:	009b      	lsls	r3, r3, #2
    43b4:	4610      	mov	r0, r2
    43b6:	21a5      	movs	r1, #165	; 0xa5
    43b8:	461a      	mov	r2, r3
    43ba:	f00f f9e9 	bl	13790 <memset>
		}
	}

	return pxNewTCB;
    43be:	68fb      	ldr	r3, [r7, #12]
}
    43c0:	4618      	mov	r0, r3
    43c2:	3710      	adds	r7, #16
    43c4:	46bd      	mov	sp, r7
    43c6:	bd80      	pop	{r7, pc}

000043c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
    43c8:	b580      	push	{r7, lr}
    43ca:	b082      	sub	sp, #8
    43cc:	af00      	add	r7, sp, #0
    43ce:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    43d0:	687b      	ldr	r3, [r7, #4]
    43d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    43d4:	4618      	mov	r0, r3
    43d6:	f000 fa79 	bl	48cc <vPortFree>
		vPortFree( pxTCB );
    43da:	6878      	ldr	r0, [r7, #4]
    43dc:	f000 fa76 	bl	48cc <vPortFree>
	}
    43e0:	3708      	adds	r7, #8
    43e2:	46bd      	mov	sp, r7
    43e4:	bd80      	pop	{r7, pc}
    43e6:	bf00      	nop

000043e8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
    43e8:	b480      	push	{r7}
    43ea:	b083      	sub	sp, #12
    43ec:	af00      	add	r7, sp, #0
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    43ee:	f240 2354 	movw	r3, #596	; 0x254
    43f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    43f6:	681b      	ldr	r3, [r3, #0]
    43f8:	607b      	str	r3, [r7, #4]

		return xReturn;
    43fa:	687b      	ldr	r3, [r7, #4]
	}
    43fc:	4618      	mov	r0, r3
    43fe:	370c      	adds	r7, #12
    4400:	46bd      	mov	sp, r7
    4402:	f85d 7b04 	ldr.w	r7, [sp], #4
    4406:	4770      	bx	lr

00004408 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    4408:	b580      	push	{r7, lr}
    440a:	b084      	sub	sp, #16
    440c:	af00      	add	r7, sp, #0
    440e:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    4410:	687b      	ldr	r3, [r7, #4]
    4412:	60fb      	str	r3, [r7, #12]

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    4414:	68fb      	ldr	r3, [r7, #12]
    4416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4418:	f240 2354 	movw	r3, #596	; 0x254
    441c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4420:	681b      	ldr	r3, [r3, #0]
    4422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4424:	429a      	cmp	r2, r3
    4426:	d24f      	bcs.n	44c8 <vTaskPriorityInherit+0xc0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    4428:	f240 2354 	movw	r3, #596	; 0x254
    442c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4430:	681b      	ldr	r3, [r3, #0]
    4432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4434:	f1c3 0214 	rsb	r2, r3, #20
    4438:	68fb      	ldr	r3, [r7, #12]
    443a:	619a      	str	r2, [r3, #24]

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    443c:	68fb      	ldr	r3, [r7, #12]
    443e:	6959      	ldr	r1, [r3, #20]
    4440:	68fb      	ldr	r3, [r7, #12]
    4442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4444:	4613      	mov	r3, r2
    4446:	009b      	lsls	r3, r3, #2
    4448:	4413      	add	r3, r2
    444a:	009b      	lsls	r3, r3, #2
    444c:	f240 2258 	movw	r2, #600	; 0x258
    4450:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4454:	4413      	add	r3, r2
    4456:	4299      	cmp	r1, r3
    4458:	d12e      	bne.n	44b8 <vTaskPriorityInherit+0xb0>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
    445a:	68fb      	ldr	r3, [r7, #12]
    445c:	3304      	adds	r3, #4
    445e:	4618      	mov	r0, r3
    4460:	f7fe fade 	bl	2a20 <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    4464:	f240 2354 	movw	r3, #596	; 0x254
    4468:	f2c2 0300 	movt	r3, #8192	; 0x2000
    446c:	681b      	ldr	r3, [r3, #0]
    446e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4470:	68fb      	ldr	r3, [r7, #12]
    4472:	62da      	str	r2, [r3, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
    4474:	68fb      	ldr	r3, [r7, #12]
    4476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4478:	f240 4364 	movw	r3, #1124	; 0x464
    447c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4480:	681b      	ldr	r3, [r3, #0]
    4482:	429a      	cmp	r2, r3
    4484:	d906      	bls.n	4494 <vTaskPriorityInherit+0x8c>
    4486:	68fb      	ldr	r3, [r7, #12]
    4488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    448a:	f240 4364 	movw	r3, #1124	; 0x464
    448e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4492:	601a      	str	r2, [r3, #0]
    4494:	68fb      	ldr	r3, [r7, #12]
    4496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4498:	4613      	mov	r3, r2
    449a:	009b      	lsls	r3, r3, #2
    449c:	4413      	add	r3, r2
    449e:	009b      	lsls	r3, r3, #2
    44a0:	f240 2258 	movw	r2, #600	; 0x258
    44a4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    44a8:	441a      	add	r2, r3
    44aa:	68fb      	ldr	r3, [r7, #12]
    44ac:	3304      	adds	r3, #4
    44ae:	4610      	mov	r0, r2
    44b0:	4619      	mov	r1, r3
    44b2:	f7fe fa55 	bl	2960 <vListInsertEnd>
    44b6:	e007      	b.n	44c8 <vTaskPriorityInherit+0xc0>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    44b8:	f240 2354 	movw	r3, #596	; 0x254
    44bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    44c0:	681b      	ldr	r3, [r3, #0]
    44c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    44c4:	68fb      	ldr	r3, [r7, #12]
    44c6:	62da      	str	r2, [r3, #44]	; 0x2c
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
    44c8:	3710      	adds	r7, #16
    44ca:	46bd      	mov	sp, r7
    44cc:	bd80      	pop	{r7, pc}
    44ce:	bf00      	nop

000044d0 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    44d0:	b580      	push	{r7, lr}
    44d2:	b084      	sub	sp, #16
    44d4:	af00      	add	r7, sp, #0
    44d6:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    44d8:	687b      	ldr	r3, [r7, #4]
    44da:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    44dc:	687b      	ldr	r3, [r7, #4]
    44de:	2b00      	cmp	r3, #0
    44e0:	d035      	beq.n	454e <vTaskPriorityDisinherit+0x7e>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    44e2:	68fb      	ldr	r3, [r7, #12]
    44e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    44e6:	68fb      	ldr	r3, [r7, #12]
    44e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    44ea:	429a      	cmp	r2, r3
    44ec:	d02f      	beq.n	454e <vTaskPriorityDisinherit+0x7e>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
    44ee:	68fb      	ldr	r3, [r7, #12]
    44f0:	3304      	adds	r3, #4
    44f2:	4618      	mov	r0, r3
    44f4:	f7fe fa94 	bl	2a20 <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    44f8:	68fb      	ldr	r3, [r7, #12]
    44fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    44fc:	68fb      	ldr	r3, [r7, #12]
    44fe:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    4500:	68fb      	ldr	r3, [r7, #12]
    4502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4504:	f1c3 0214 	rsb	r2, r3, #20
    4508:	68fb      	ldr	r3, [r7, #12]
    450a:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
    450c:	68fb      	ldr	r3, [r7, #12]
    450e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4510:	f240 4364 	movw	r3, #1124	; 0x464
    4514:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4518:	681b      	ldr	r3, [r3, #0]
    451a:	429a      	cmp	r2, r3
    451c:	d906      	bls.n	452c <vTaskPriorityDisinherit+0x5c>
    451e:	68fb      	ldr	r3, [r7, #12]
    4520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4522:	f240 4364 	movw	r3, #1124	; 0x464
    4526:	f2c2 0300 	movt	r3, #8192	; 0x2000
    452a:	601a      	str	r2, [r3, #0]
    452c:	68fb      	ldr	r3, [r7, #12]
    452e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4530:	4613      	mov	r3, r2
    4532:	009b      	lsls	r3, r3, #2
    4534:	4413      	add	r3, r2
    4536:	009b      	lsls	r3, r3, #2
    4538:	f240 2258 	movw	r2, #600	; 0x258
    453c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4540:	441a      	add	r2, r3
    4542:	68fb      	ldr	r3, [r7, #12]
    4544:	3304      	adds	r3, #4
    4546:	4610      	mov	r0, r2
    4548:	4619      	mov	r1, r3
    454a:	f7fe fa09 	bl	2960 <vListInsertEnd>
			}
		}
	}
    454e:	3710      	adds	r7, #16
    4550:	46bd      	mov	sp, r7
    4552:	bd80      	pop	{r7, pc}

00004554 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    4554:	b480      	push	{r7}
    4556:	b085      	sub	sp, #20
    4558:	af00      	add	r7, sp, #0
    455a:	60f8      	str	r0, [r7, #12]
    455c:	60b9      	str	r1, [r7, #8]
    455e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    4560:	68fb      	ldr	r3, [r7, #12]
    4562:	3b04      	subs	r3, #4
    4564:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    4566:	68fb      	ldr	r3, [r7, #12]
    4568:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    456c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    456e:	68fb      	ldr	r3, [r7, #12]
    4570:	3b04      	subs	r3, #4
    4572:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
    4574:	68ba      	ldr	r2, [r7, #8]
    4576:	68fb      	ldr	r3, [r7, #12]
    4578:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    457a:	68fb      	ldr	r3, [r7, #12]
    457c:	3b04      	subs	r3, #4
    457e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
    4580:	68fb      	ldr	r3, [r7, #12]
    4582:	2200      	movs	r2, #0
    4584:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    4586:	68fb      	ldr	r3, [r7, #12]
    4588:	3b14      	subs	r3, #20
    458a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
    458c:	687a      	ldr	r2, [r7, #4]
    458e:	68fb      	ldr	r3, [r7, #12]
    4590:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
    4592:	68fb      	ldr	r3, [r7, #12]
    4594:	3b20      	subs	r3, #32
    4596:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    4598:	68fb      	ldr	r3, [r7, #12]
}
    459a:	4618      	mov	r0, r3
    459c:	3714      	adds	r7, #20
    459e:	46bd      	mov	sp, r7
    45a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    45a4:	4770      	bx	lr
    45a6:	bf00      	nop

000045a8 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    45a8:	4b06      	ldr	r3, [pc, #24]	; (45c4 <pxCurrentTCBConst2>)
    45aa:	6819      	ldr	r1, [r3, #0]
    45ac:	6808      	ldr	r0, [r1, #0]
    45ae:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    45b2:	f380 8809 	msr	PSP, r0
    45b6:	f04f 0000 	mov.w	r0, #0
    45ba:	f380 8811 	msr	BASEPRI, r0
    45be:	f04e 0e0d 	orr.w	lr, lr, #13
    45c2:	4770      	bx	lr

000045c4 <pxCurrentTCBConst2>:
    45c4:	20000254 	.word	0x20000254

000045c8 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
    45c8:	485d      	ldr	r0, [pc, #372]	; (4740 <prvSetupTimerInterrupt+0x2c>)
    45ca:	6800      	ldr	r0, [r0, #0]
    45cc:	6800      	ldr	r0, [r0, #0]
    45ce:	f380 8808 	msr	MSP, r0
    45d2:	b662      	cpsie	i
    45d4:	df00      	svc	0
    45d6:	bf00      	nop

000045d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
    45d8:	b580      	push	{r7, lr}
    45da:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    45dc:	f64e 5320 	movw	r3, #60704	; 0xed20
    45e0:	f2ce 0300 	movt	r3, #57344	; 0xe000
    45e4:	f64e 5220 	movw	r2, #60704	; 0xed20
    45e8:	f2ce 0200 	movt	r2, #57344	; 0xe000
    45ec:	6812      	ldr	r2, [r2, #0]
    45ee:	f442 02fe 	orr.w	r2, r2, #8323072	; 0x7f0000
    45f2:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    45f4:	f64e 5320 	movw	r3, #60704	; 0xed20
    45f8:	f2ce 0300 	movt	r3, #57344	; 0xe000
    45fc:	f64e 5220 	movw	r2, #60704	; 0xed20
    4600:	f2ce 0200 	movt	r2, #57344	; 0xe000
    4604:	6812      	ldr	r2, [r2, #0]
    4606:	f042 42fe 	orr.w	r2, r2, #2130706432	; 0x7f000000
    460a:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    460c:	f000 f882 	bl	4714 <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    4610:	f240 03fc 	movw	r3, #252	; 0xfc
    4614:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4618:	2200      	movs	r2, #0
    461a:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
    461c:	f7ff ffd4 	bl	45c8 <prvPortStartFirstTask>

	/* Should not get here! */
	return 0;
    4620:	2300      	movs	r3, #0
}
    4622:	4618      	mov	r0, r3
    4624:	bd80      	pop	{r7, pc}
    4626:	bf00      	nop

00004628 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    4628:	b480      	push	{r7}
    462a:	af00      	add	r7, sp, #0
	/* It is unlikely that the CM3 port will require this function as there
	is nothing to return to.  */
}
    462c:	46bd      	mov	sp, r7
    462e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4632:	4770      	bx	lr

00004634 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
    4634:	b480      	push	{r7}
    4636:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    4638:	f64e 5304 	movw	r3, #60676	; 0xed04
    463c:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4640:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4644:	601a      	str	r2, [r3, #0]
}
    4646:	46bd      	mov	sp, r7
    4648:	f85d 7b04 	ldr.w	r7, [sp], #4
    464c:	4770      	bx	lr
    464e:	bf00      	nop

00004650 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    4650:	b480      	push	{r7}
    4652:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
    4654:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4658:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
    465c:	f240 03fc 	movw	r3, #252	; 0xfc
    4660:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4664:	681b      	ldr	r3, [r3, #0]
    4666:	1c5a      	adds	r2, r3, #1
    4668:	f240 03fc 	movw	r3, #252	; 0xfc
    466c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4670:	601a      	str	r2, [r3, #0]
}
    4672:	46bd      	mov	sp, r7
    4674:	f85d 7b04 	ldr.w	r7, [sp], #4
    4678:	4770      	bx	lr
    467a:	bf00      	nop

0000467c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    467c:	b480      	push	{r7}
    467e:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
    4680:	f240 03fc 	movw	r3, #252	; 0xfc
    4684:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4688:	681b      	ldr	r3, [r3, #0]
    468a:	1e5a      	subs	r2, r3, #1
    468c:	f240 03fc 	movw	r3, #252	; 0xfc
    4690:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4694:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
    4696:	f240 03fc 	movw	r3, #252	; 0xfc
    469a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    469e:	681b      	ldr	r3, [r3, #0]
    46a0:	2b00      	cmp	r3, #0
    46a2:	d103      	bne.n	46ac <vPortExitCritical+0x30>
	{
		portENABLE_INTERRUPTS();
    46a4:	f04f 0000 	mov.w	r0, #0
    46a8:	f380 8811 	msr	BASEPRI, r0
	}
}
    46ac:	46bd      	mov	sp, r7
    46ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    46b2:	4770      	bx	lr

000046b4 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    46b4:	f3ef 8009 	mrs	r0, PSP
    46b8:	4b0c      	ldr	r3, [pc, #48]	; (46ec <pxCurrentTCBConst>)
    46ba:	681a      	ldr	r2, [r3, #0]
    46bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    46c0:	6010      	str	r0, [r2, #0]
    46c2:	e92d 4008 	stmdb	sp!, {r3, lr}
    46c6:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    46ca:	f380 8811 	msr	BASEPRI, r0
    46ce:	f7ff fbd5 	bl	3e7c <vTaskSwitchContext>
    46d2:	f04f 0000 	mov.w	r0, #0
    46d6:	f380 8811 	msr	BASEPRI, r0
    46da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    46de:	6819      	ldr	r1, [r3, #0]
    46e0:	6808      	ldr	r0, [r1, #0]
    46e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    46e6:	f380 8809 	msr	PSP, r0
    46ea:	4770      	bx	lr

000046ec <pxCurrentTCBConst>:
    46ec:	20000254 	.word	0x20000254

000046f0 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    46f0:	b580      	push	{r7, lr}
    46f2:	b082      	sub	sp, #8
    46f4:	af00      	add	r7, sp, #0
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
    46f6:	2300      	movs	r3, #0
    46f8:	607b      	str	r3, [r7, #4]
    46fa:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    46fe:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
    4702:	f7ff fadd 	bl	3cc0 <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
    4706:	f04f 0000 	mov.w	r0, #0
    470a:	f380 8811 	msr	BASEPRI, r0
}
    470e:	3708      	adds	r7, #8
    4710:	46bd      	mov	sp, r7
    4712:	bd80      	pop	{r7, pc}

00004714 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    4714:	b480      	push	{r7}
    4716:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    4718:	f24e 0314 	movw	r3, #57364	; 0xe014
    471c:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4720:	f644 32bf 	movw	r2, #19391	; 0x4bbf
    4724:	f2c0 0203 	movt	r2, #3
    4728:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    472a:	f24e 0310 	movw	r3, #57360	; 0xe010
    472e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4732:	2207      	movs	r2, #7
    4734:	601a      	str	r2, [r3, #0]
}
    4736:	46bd      	mov	sp, r7
    4738:	f85d 7b04 	ldr.w	r7, [sp], #4
    473c:	4770      	bx	lr
    473e:	0000      	.short	0x0000
    4740:	e000ed08 	.word	0xe000ed08

00004744 <pvPortMalloc>:
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;										\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    4744:	b580      	push	{r7, lr}
    4746:	b08a      	sub	sp, #40	; 0x28
    4748:	af00      	add	r7, sp, #0
    474a:	6078      	str	r0, [r7, #4]
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
    474c:	2300      	movs	r3, #0
    474e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
    4750:	f7ff f9ac 	bl	3aac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    4754:	f24b 4390 	movw	r3, #46224	; 0xb490
    4758:	f2c2 0304 	movt	r3, #8196	; 0x2004
    475c:	681b      	ldr	r3, [r3, #0]
    475e:	2b00      	cmp	r3, #0
    4760:	d130      	bne.n	47c4 <pvPortMalloc+0x80>
		{
			prvHeapInit();
    4762:	f24b 4380 	movw	r3, #46208	; 0xb480
    4766:	f2c2 0304 	movt	r3, #8196	; 0x2004
    476a:	f240 4280 	movw	r2, #1152	; 0x480
    476e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4772:	601a      	str	r2, [r3, #0]
    4774:	f24b 4380 	movw	r3, #46208	; 0xb480
    4778:	f2c2 0304 	movt	r3, #8196	; 0x2004
    477c:	2200      	movs	r2, #0
    477e:	605a      	str	r2, [r3, #4]
    4780:	f24b 4388 	movw	r3, #46216	; 0xb488
    4784:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4788:	f44f 2296 	mov.w	r2, #307200	; 0x4b000
    478c:	605a      	str	r2, [r3, #4]
    478e:	f24b 4388 	movw	r3, #46216	; 0xb488
    4792:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4796:	2200      	movs	r2, #0
    4798:	601a      	str	r2, [r3, #0]
    479a:	f240 4380 	movw	r3, #1152	; 0x480
    479e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    47a2:	617b      	str	r3, [r7, #20]
    47a4:	697b      	ldr	r3, [r7, #20]
    47a6:	f44f 2296 	mov.w	r2, #307200	; 0x4b000
    47aa:	605a      	str	r2, [r3, #4]
    47ac:	697a      	ldr	r2, [r7, #20]
    47ae:	f24b 4388 	movw	r3, #46216	; 0xb488
    47b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    47b6:	6013      	str	r3, [r2, #0]
			xHeapHasBeenInitialised = pdTRUE;
    47b8:	f24b 4390 	movw	r3, #46224	; 0xb490
    47bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    47c0:	2201      	movs	r2, #1
    47c2:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    47c4:	687b      	ldr	r3, [r7, #4]
    47c6:	2b00      	cmp	r3, #0
    47c8:	d00d      	beq.n	47e6 <pvPortMalloc+0xa2>
		{
			xWantedSize += heapSTRUCT_SIZE;
    47ca:	2310      	movs	r3, #16
    47cc:	687a      	ldr	r2, [r7, #4]
    47ce:	4413      	add	r3, r2
    47d0:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    47d2:	687b      	ldr	r3, [r7, #4]
    47d4:	f003 0307 	and.w	r3, r3, #7
    47d8:	2b00      	cmp	r3, #0
    47da:	d004      	beq.n	47e6 <pvPortMalloc+0xa2>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    47dc:	687b      	ldr	r3, [r7, #4]
    47de:	f023 0307 	bic.w	r3, r3, #7
    47e2:	3308      	adds	r3, #8
    47e4:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
    47e6:	687b      	ldr	r3, [r7, #4]
    47e8:	2b00      	cmp	r3, #0
    47ea:	d068      	beq.n	48be <pvPortMalloc+0x17a>
    47ec:	687b      	ldr	r3, [r7, #4]
    47ee:	f5b3 2f96 	cmp.w	r3, #307200	; 0x4b000
    47f2:	d264      	bcs.n	48be <pvPortMalloc+0x17a>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
    47f4:	f24b 4380 	movw	r3, #46208	; 0xb480
    47f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    47fc:	623b      	str	r3, [r7, #32]
			pxBlock = xStart.pxNextFreeBlock;
    47fe:	f24b 4380 	movw	r3, #46208	; 0xb480
    4802:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4806:	681b      	ldr	r3, [r3, #0]
    4808:	627b      	str	r3, [r7, #36]	; 0x24
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    480a:	e004      	b.n	4816 <pvPortMalloc+0xd2>
			{
				pxPreviousBlock = pxBlock;
    480c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    480e:	623b      	str	r3, [r7, #32]
				pxBlock = pxBlock->pxNextFreeBlock;
    4810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4812:	681b      	ldr	r3, [r3, #0]
    4814:	627b      	str	r3, [r7, #36]	; 0x24
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    4816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4818:	685a      	ldr	r2, [r3, #4]
    481a:	687b      	ldr	r3, [r7, #4]
    481c:	429a      	cmp	r2, r3
    481e:	d203      	bcs.n	4828 <pvPortMalloc+0xe4>
    4820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4822:	681b      	ldr	r3, [r3, #0]
    4824:	2b00      	cmp	r3, #0
    4826:	d1f1      	bne.n	480c <pvPortMalloc+0xc8>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
    4828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    482a:	f24b 4388 	movw	r3, #46216	; 0xb488
    482e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4832:	429a      	cmp	r2, r3
    4834:	d043      	beq.n	48be <pvPortMalloc+0x17a>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    4836:	6a3b      	ldr	r3, [r7, #32]
    4838:	681a      	ldr	r2, [r3, #0]
    483a:	2310      	movs	r3, #16
    483c:	4413      	add	r3, r2
    483e:	61fb      	str	r3, [r7, #28]

				/* This block is being returned for use so must be taken our of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    4840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4842:	681a      	ldr	r2, [r3, #0]
    4844:	6a3b      	ldr	r3, [r7, #32]
    4846:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    4848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    484a:	685a      	ldr	r2, [r3, #4]
    484c:	687b      	ldr	r3, [r7, #4]
    484e:	1ad2      	subs	r2, r2, r3
    4850:	2310      	movs	r3, #16
    4852:	005b      	lsls	r3, r3, #1
    4854:	429a      	cmp	r2, r3
    4856:	d925      	bls.n	48a4 <pvPortMalloc+0x160>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
    4858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    485a:	687b      	ldr	r3, [r7, #4]
    485c:	4413      	add	r3, r2
    485e:	613b      	str	r3, [r7, #16]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    4860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4862:	685a      	ldr	r2, [r3, #4]
    4864:	687b      	ldr	r3, [r7, #4]
    4866:	1ad2      	subs	r2, r2, r3
    4868:	693b      	ldr	r3, [r7, #16]
    486a:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
    486c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    486e:	687a      	ldr	r2, [r7, #4]
    4870:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    4872:	693b      	ldr	r3, [r7, #16]
    4874:	685b      	ldr	r3, [r3, #4]
    4876:	60fb      	str	r3, [r7, #12]
    4878:	f24b 4380 	movw	r3, #46208	; 0xb480
    487c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4880:	61bb      	str	r3, [r7, #24]
    4882:	e002      	b.n	488a <pvPortMalloc+0x146>
    4884:	69bb      	ldr	r3, [r7, #24]
    4886:	681b      	ldr	r3, [r3, #0]
    4888:	61bb      	str	r3, [r7, #24]
    488a:	69bb      	ldr	r3, [r7, #24]
    488c:	681b      	ldr	r3, [r3, #0]
    488e:	685a      	ldr	r2, [r3, #4]
    4890:	68fb      	ldr	r3, [r7, #12]
    4892:	429a      	cmp	r2, r3
    4894:	d3f6      	bcc.n	4884 <pvPortMalloc+0x140>
    4896:	69bb      	ldr	r3, [r7, #24]
    4898:	681a      	ldr	r2, [r3, #0]
    489a:	693b      	ldr	r3, [r7, #16]
    489c:	601a      	str	r2, [r3, #0]
    489e:	69bb      	ldr	r3, [r7, #24]
    48a0:	693a      	ldr	r2, [r7, #16]
    48a2:	601a      	str	r2, [r3, #0]
				}
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
    48a4:	f240 1300 	movw	r3, #256	; 0x100
    48a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    48ac:	681a      	ldr	r2, [r3, #0]
    48ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    48b0:	685b      	ldr	r3, [r3, #4]
    48b2:	1ad2      	subs	r2, r2, r3
    48b4:	f240 1300 	movw	r3, #256	; 0x100
    48b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    48bc:	601a      	str	r2, [r3, #0]
			}
		}
	}
	xTaskResumeAll();
    48be:	f7ff f907 	bl	3ad0 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    48c2:	69fb      	ldr	r3, [r7, #28]
}
    48c4:	4618      	mov	r0, r3
    48c6:	3728      	adds	r7, #40	; 0x28
    48c8:	46bd      	mov	sp, r7
    48ca:	bd80      	pop	{r7, pc}

000048cc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    48cc:	b580      	push	{r7, lr}
    48ce:	b086      	sub	sp, #24
    48d0:	af00      	add	r7, sp, #0
    48d2:	6078      	str	r0, [r7, #4]
unsigned char *puc = ( unsigned char * ) pv;
    48d4:	687b      	ldr	r3, [r7, #4]
    48d6:	613b      	str	r3, [r7, #16]
xBlockLink *pxLink;

	if( pv )
    48d8:	687b      	ldr	r3, [r7, #4]
    48da:	2b00      	cmp	r3, #0
    48dc:	d030      	beq.n	4940 <vPortFree+0x74>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
    48de:	2310      	movs	r3, #16
    48e0:	425b      	negs	r3, r3
    48e2:	693a      	ldr	r2, [r7, #16]
    48e4:	4413      	add	r3, r2
    48e6:	613b      	str	r3, [r7, #16]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
    48e8:	693b      	ldr	r3, [r7, #16]
    48ea:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
    48ec:	f7ff f8de 	bl	3aac <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
    48f0:	68fb      	ldr	r3, [r7, #12]
    48f2:	685b      	ldr	r3, [r3, #4]
    48f4:	60bb      	str	r3, [r7, #8]
    48f6:	f24b 4380 	movw	r3, #46208	; 0xb480
    48fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    48fe:	617b      	str	r3, [r7, #20]
    4900:	e002      	b.n	4908 <vPortFree+0x3c>
    4902:	697b      	ldr	r3, [r7, #20]
    4904:	681b      	ldr	r3, [r3, #0]
    4906:	617b      	str	r3, [r7, #20]
    4908:	697b      	ldr	r3, [r7, #20]
    490a:	681b      	ldr	r3, [r3, #0]
    490c:	685a      	ldr	r2, [r3, #4]
    490e:	68bb      	ldr	r3, [r7, #8]
    4910:	429a      	cmp	r2, r3
    4912:	d3f6      	bcc.n	4902 <vPortFree+0x36>
    4914:	697b      	ldr	r3, [r7, #20]
    4916:	681a      	ldr	r2, [r3, #0]
    4918:	68fb      	ldr	r3, [r7, #12]
    491a:	601a      	str	r2, [r3, #0]
    491c:	697b      	ldr	r3, [r7, #20]
    491e:	68fa      	ldr	r2, [r7, #12]
    4920:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
    4922:	68fb      	ldr	r3, [r7, #12]
    4924:	685a      	ldr	r2, [r3, #4]
    4926:	f240 1300 	movw	r3, #256	; 0x100
    492a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    492e:	681b      	ldr	r3, [r3, #0]
    4930:	441a      	add	r2, r3
    4932:	f240 1300 	movw	r3, #256	; 0x100
    4936:	f2c2 0300 	movt	r3, #8192	; 0x2000
    493a:	601a      	str	r2, [r3, #0]
		}
		xTaskResumeAll();
    493c:	f7ff f8c8 	bl	3ad0 <xTaskResumeAll>
	}
}
    4940:	3718      	adds	r7, #24
    4942:	46bd      	mov	sp, r7
    4944:	bd80      	pop	{r7, pc}
    4946:	bf00      	nop

00004948 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    4948:	b480      	push	{r7}
    494a:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
    494c:	f240 1300 	movw	r3, #256	; 0x100
    4950:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4954:	681b      	ldr	r3, [r3, #0]
}
    4956:	4618      	mov	r0, r3
    4958:	46bd      	mov	sp, r7
    495a:	f85d 7b04 	ldr.w	r7, [sp], #4
    495e:	4770      	bx	lr

00004960 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    4960:	b480      	push	{r7}
    4962:	af00      	add	r7, sp, #0
	/* This just exists to keep the linker quiet. */
}
    4964:	46bd      	mov	sp, r7
    4966:	f85d 7b04 	ldr.w	r7, [sp], #4
    496a:	4770      	bx	lr
    496c:	0000      	movs	r0, r0
	...

00004970 <ground_calibrate>:
 * set to auto1 before MAX_DELAY_FOR_CALIBRATION secondes */
/**User must put verticaly the uav (nose bottom) and push
 * radio roll stick to get new calibration
 * If not, the default calibration is used.
 */
inline void ground_calibrate( void ) {
    4970:	b580      	push	{r7, lr}
    4972:	af00      	add	r7, sp, #0
    break;
  case CALIB_DONE:
    break;
  }
#else*/
if(calib_status == NO_CALIB)
    4974:	f24b 43b2 	movw	r3, #46258	; 0xb4b2
    4978:	f2c2 0304 	movt	r3, #8196	; 0x2004
    497c:	781b      	ldrb	r3, [r3, #0]
    497e:	2b00      	cmp	r3, #0
    4980:	d114      	bne.n	49ac <ground_calibrate+0x3c>
{
    if (cputime < MAX_DELAY_FOR_CALIBRATION && pprz_mode == PPRZ_MODE_AUTO1 ) {
    4982:	f24b 439a 	movw	r3, #46234	; 0xb49a
    4986:	f2c2 0304 	movt	r3, #8196	; 0x2004
    498a:	881b      	ldrh	r3, [r3, #0]
    498c:	2b09      	cmp	r3, #9
    498e:	d838      	bhi.n	4a02 <ground_calibrate+0x92>
    4990:	f24b 439c 	movw	r3, #46236	; 0xb49c
    4994:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4998:	781b      	ldrb	r3, [r3, #0]
    499a:	2b01      	cmp	r3, #1
    499c:	d131      	bne.n	4a02 <ground_calibrate+0x92>
      calib_status = WAITING_CALIB_CONTRAST;
    499e:	f24b 43b2 	movw	r3, #46258	; 0xb4b2
    49a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    49a6:	2201      	movs	r2, #1
    49a8:	701a      	strb	r2, [r3, #0]
    49aa:	e02a      	b.n	4a02 <ground_calibrate+0x92>
      //DOWNLINK_SEND_CALIB_START();
    }
}
else if (calib_status == WAITING_CALIB_CONTRAST)
    49ac:	f24b 43b2 	movw	r3, #46258	; 0xb4b2
    49b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    49b4:	781b      	ldrb	r3, [r3, #0]
    49b6:	2b01      	cmp	r3, #1
    49b8:	d123      	bne.n	4a02 <ground_calibrate+0x92>
{
    if (STICK_PUSHED(from_fbw.channels[RADIO_ROLL])) {
    49ba:	f24b 53c0 	movw	r3, #46528	; 0xb5c0
    49be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    49c2:	885b      	ldrh	r3, [r3, #2]
    49c4:	b21b      	sxth	r3, r3
    49c6:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
    49ca:	db08      	blt.n	49de <ground_calibrate+0x6e>
    49cc:	f24b 53c0 	movw	r3, #46528	; 0xb5c0
    49d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    49d4:	885b      	ldrh	r3, [r3, #2]
    49d6:	b21b      	sxth	r3, r3
    49d8:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    49dc:	dd11      	ble.n	4a02 <ground_calibrate+0x92>
      ir_gain_calib();
    49de:	f008 f8db 	bl	cb98 <ir_gain_calib>
      estimator_rad_of_ir = ir_rad_of_ir;
    49e2:	f240 1310 	movw	r3, #272	; 0x110
    49e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49ea:	681a      	ldr	r2, [r3, #0]
    49ec:	f64b 23ac 	movw	r3, #47788	; 0xbaac
    49f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    49f4:	601a      	str	r2, [r3, #0]
      //DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
      calib_status = CALIB_DONE;
    49f6:	f24b 43b2 	movw	r3, #46258	; 0xb4b2
    49fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    49fe:	2202      	movs	r2, #2
    4a00:	701a      	strb	r2, [r3, #0]
    }
}
else {}

//#endif
}
    4a02:	bd80      	pop	{r7, pc}

00004a04 <pprz_mode_update>:

/** \fn inline uint8_t pprz_mode_update( void )
 *  \brief Update paparazzi mode
 */
inline uint8_t pprz_mode_update( void ) {
    4a04:	b480      	push	{r7}
    4a06:	b083      	sub	sp, #12
    4a08:	af00      	add	r7, sp, #0
  /** We remain in home mode until explicit reset from the RC */
  if (pprz_mode != PPRZ_MODE_HOME || CheckEvent(rc_event_1)) {
    4a0a:	f24b 439c 	movw	r3, #46236	; 0xb49c
    4a0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4a12:	781b      	ldrb	r3, [r3, #0]
    4a14:	2b03      	cmp	r3, #3
    4a16:	d10c      	bne.n	4a32 <pprz_mode_update+0x2e>
    4a18:	f24b 43a0 	movw	r3, #46240	; 0xb4a0
    4a1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4a20:	781b      	ldrb	r3, [r3, #0]
    4a22:	2b00      	cmp	r3, #0
    4a24:	d032      	beq.n	4a8c <pprz_mode_update+0x88>
    4a26:	f24b 43a0 	movw	r3, #46240	; 0xb4a0
    4a2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4a2e:	2200      	movs	r2, #0
    4a30:	701a      	strb	r2, [r3, #0]
    ModeUpdate(pprz_mode, PPRZ_MODE_OF_PULSE(from_fbw.channels[RADIO_MODE], from_fbw.status));
    4a32:	f24b 53c0 	movw	r3, #46528	; 0xb5c0
    4a36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4a3a:	891b      	ldrh	r3, [r3, #8]
    4a3c:	b21b      	sxth	r3, r3
    4a3e:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    4a42:	dc0f      	bgt.n	4a64 <pprz_mode_update+0x60>
    4a44:	f24b 53c0 	movw	r3, #46528	; 0xb5c0
    4a48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4a4c:	891b      	ldrh	r3, [r3, #8]
    4a4e:	b21a      	sxth	r2, r3
    4a50:	f64e 5341 	movw	r3, #60737	; 0xed41
    4a54:	f6cf 73ff 	movt	r3, #65535	; 0xffff
    4a58:	429a      	cmp	r2, r3
    4a5a:	bfb4      	ite	lt
    4a5c:	2300      	movlt	r3, #0
    4a5e:	2301      	movge	r3, #1
    4a60:	b2db      	uxtb	r3, r3
    4a62:	e000      	b.n	4a66 <pprz_mode_update+0x62>
    4a64:	2302      	movs	r3, #2
    4a66:	71fb      	strb	r3, [r7, #7]
    4a68:	f24b 439c 	movw	r3, #46236	; 0xb49c
    4a6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4a70:	781b      	ldrb	r3, [r3, #0]
    4a72:	79fa      	ldrb	r2, [r7, #7]
    4a74:	429a      	cmp	r2, r3
    4a76:	d007      	beq.n	4a88 <pprz_mode_update+0x84>
    4a78:	f24b 439c 	movw	r3, #46236	; 0xb49c
    4a7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4a80:	79fa      	ldrb	r2, [r7, #7]
    4a82:	701a      	strb	r2, [r3, #0]
    4a84:	2301      	movs	r3, #1
    4a86:	e002      	b.n	4a8e <pprz_mode_update+0x8a>
    4a88:	2300      	movs	r3, #0
    4a8a:	e000      	b.n	4a8e <pprz_mode_update+0x8a>
  } else
    return FALSE;
    4a8c:	2300      	movs	r3, #0
}
    4a8e:	4618      	mov	r0, r3
    4a90:	370c      	adds	r7, #12
    4a92:	46bd      	mov	sp, r7
    4a94:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a98:	4770      	bx	lr
    4a9a:	bf00      	nop

00004a9c <ir_estim_mode_update>:

#ifdef RADIO_LLS
/** \fn inline uint8_t ir_estim_mode_update( void )
 *  \brief update ir estimation if RADIO_LLS is true \n
 */
inline uint8_t ir_estim_mode_update( void ) {
    4a9c:	b480      	push	{r7}
    4a9e:	b083      	sub	sp, #12
    4aa0:	af00      	add	r7, sp, #0
  ModeUpdate(ir_estim_mode, IR_ESTIM_MODE_OF_PULSE(from_fbw.channels[RADIO_LLS]));
    4aa2:	f24b 53c0 	movw	r3, #46528	; 0xb5c0
    4aa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4aaa:	89db      	ldrh	r3, [r3, #14]
    4aac:	b21a      	sxth	r2, r3
    4aae:	f640 437f 	movw	r3, #3199	; 0xc7f
    4ab2:	429a      	cmp	r2, r3
    4ab4:	bfd4      	ite	le
    4ab6:	2300      	movle	r3, #0
    4ab8:	2301      	movgt	r3, #1
    4aba:	b2db      	uxtb	r3, r3
    4abc:	71fb      	strb	r3, [r7, #7]
    4abe:	f240 1304 	movw	r3, #260	; 0x104
    4ac2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ac6:	781b      	ldrb	r3, [r3, #0]
    4ac8:	79fa      	ldrb	r2, [r7, #7]
    4aca:	429a      	cmp	r2, r3
    4acc:	d007      	beq.n	4ade <ir_estim_mode_update+0x42>
    4ace:	f240 1304 	movw	r3, #260	; 0x104
    4ad2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ad6:	79fa      	ldrb	r2, [r7, #7]
    4ad8:	701a      	strb	r2, [r3, #0]
    4ada:	2301      	movs	r3, #1
    4adc:	e000      	b.n	4ae0 <ir_estim_mode_update+0x44>
    4ade:	2300      	movs	r3, #0
}
    4ae0:	4618      	mov	r0, r3
    4ae2:	370c      	adds	r7, #12
    4ae4:	46bd      	mov	sp, r7
    4ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
    4aea:	4770      	bx	lr

00004aec <mcu1_status_update>:


/** \fn inline uint8_t mcu1_status_update( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
inline uint8_t mcu1_status_update( void ) {
    4aec:	b480      	push	{r7}
    4aee:	b083      	sub	sp, #12
    4af0:	af00      	add	r7, sp, #0
  uint8_t new_mode = from_fbw.status;
    4af2:	f24b 53c0 	movw	r3, #46528	; 0xb5c0
    4af6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4afa:	7cdb      	ldrb	r3, [r3, #19]
    4afc:	71fb      	strb	r3, [r7, #7]
  if (mcu1_status != new_mode) {
    4afe:	f24b 43a3 	movw	r3, #46243	; 0xb4a3
    4b02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4b06:	781b      	ldrb	r3, [r3, #0]
    4b08:	79fa      	ldrb	r2, [r7, #7]
    4b0a:	429a      	cmp	r2, r3
    4b0c:	d017      	beq.n	4b3e <mcu1_status_update+0x52>
    bool_t changed = ((mcu1_status&MASK_FBW_CHANGED) != (new_mode&MASK_FBW_CHANGED));
    4b0e:	f24b 43a3 	movw	r3, #46243	; 0xb4a3
    4b12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4b16:	781b      	ldrb	r3, [r3, #0]
    4b18:	461a      	mov	r2, r3
    4b1a:	79fb      	ldrb	r3, [r7, #7]
    4b1c:	4053      	eors	r3, r2
    4b1e:	f003 0303 	and.w	r3, r3, #3
    4b22:	2b00      	cmp	r3, #0
    4b24:	bf0c      	ite	eq
    4b26:	2300      	moveq	r3, #0
    4b28:	2301      	movne	r3, #1
    4b2a:	b2db      	uxtb	r3, r3
    4b2c:	71bb      	strb	r3, [r7, #6]
    mcu1_status = new_mode;
    4b2e:	f24b 43a3 	movw	r3, #46243	; 0xb4a3
    4b32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4b36:	79fa      	ldrb	r2, [r7, #7]
    4b38:	701a      	strb	r2, [r3, #0]
    return changed;
    4b3a:	79bb      	ldrb	r3, [r7, #6]
    4b3c:	e000      	b.n	4b40 <mcu1_status_update+0x54>
  }
  return FALSE;
    4b3e:	2300      	movs	r3, #0
}
    4b40:	4618      	mov	r0, r3
    4b42:	370c      	adds	r7, #12
    4b44:	46bd      	mov	sp, r7
    4b46:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b4a:	4770      	bx	lr

00004b4c <events_update>:
 EventUpdate(_cpt, (inflight_calib_mode==IF_CALIB_MODE_NONE && from_fbw.channels[_channel]<(int)(-0.75*MAX_PPRZ)), _event)

/** \fn static inline void events_update( void )
 *  @@@@@ A FIXER @@@@@
 */
static inline void events_update( void ) {
    4b4c:	b480      	push	{r7}
    4b4e:	af00      	add	r7, sp, #0
  static uint16_t event1_cpt = 0;
  static uint16_t event2_cpt = 0;
  EventPos(event1_cpt, RADIO_GAIN1, rc_event_1);
    4b50:	f64b 23cc 	movw	r3, #47820	; 0xbacc
    4b54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4b58:	781b      	ldrb	r3, [r3, #0]
    4b5a:	2b00      	cmp	r3, #0
    4b5c:	d12a      	bne.n	4bb4 <events_update+0x68>
    4b5e:	f24b 53c0 	movw	r3, #46528	; 0xb5c0
    4b62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4b66:	895b      	ldrh	r3, [r3, #10]
    4b68:	b21b      	sxth	r3, r3
    4b6a:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
    4b6e:	dd21      	ble.n	4bb4 <events_update+0x68>
    4b70:	f24b 43b4 	movw	r3, #46260	; 0xb4b4
    4b74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4b78:	881b      	ldrh	r3, [r3, #0]
    4b7a:	2b13      	cmp	r3, #19
    4b7c:	d819      	bhi.n	4bb2 <events_update+0x66>
    4b7e:	f24b 43b4 	movw	r3, #46260	; 0xb4b4
    4b82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4b86:	881b      	ldrh	r3, [r3, #0]
    4b88:	3301      	adds	r3, #1
    4b8a:	b29a      	uxth	r2, r3
    4b8c:	f24b 43b4 	movw	r3, #46260	; 0xb4b4
    4b90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4b94:	801a      	strh	r2, [r3, #0]
    4b96:	f24b 43b4 	movw	r3, #46260	; 0xb4b4
    4b9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4b9e:	881b      	ldrh	r3, [r3, #0]
    4ba0:	2b14      	cmp	r3, #20
    4ba2:	d106      	bne.n	4bb2 <events_update+0x66>
    4ba4:	f24b 43a0 	movw	r3, #46240	; 0xb4a0
    4ba8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4bac:	2201      	movs	r2, #1
    4bae:	701a      	strb	r2, [r3, #0]
    4bb0:	e00c      	b.n	4bcc <events_update+0x80>
    4bb2:	e00b      	b.n	4bcc <events_update+0x80>
    4bb4:	f24b 43b4 	movw	r3, #46260	; 0xb4b4
    4bb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4bbc:	2200      	movs	r2, #0
    4bbe:	801a      	strh	r2, [r3, #0]
    4bc0:	f24b 43a0 	movw	r3, #46240	; 0xb4a0
    4bc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4bc8:	2200      	movs	r2, #0
    4bca:	701a      	strb	r2, [r3, #0]
  EventNeg(event2_cpt, RADIO_GAIN1, rc_event_2);
    4bcc:	f64b 23cc 	movw	r3, #47820	; 0xbacc
    4bd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4bd4:	781b      	ldrb	r3, [r3, #0]
    4bd6:	2b00      	cmp	r3, #0
    4bd8:	d12a      	bne.n	4c30 <events_update+0xe4>
    4bda:	f24b 53c0 	movw	r3, #46528	; 0xb5c0
    4bde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4be2:	895b      	ldrh	r3, [r3, #10]
    4be4:	b21b      	sxth	r3, r3
    4be6:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
    4bea:	da21      	bge.n	4c30 <events_update+0xe4>
    4bec:	f24b 43b6 	movw	r3, #46262	; 0xb4b6
    4bf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4bf4:	881b      	ldrh	r3, [r3, #0]
    4bf6:	2b13      	cmp	r3, #19
    4bf8:	d819      	bhi.n	4c2e <events_update+0xe2>
    4bfa:	f24b 43b6 	movw	r3, #46262	; 0xb4b6
    4bfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4c02:	881b      	ldrh	r3, [r3, #0]
    4c04:	3301      	adds	r3, #1
    4c06:	b29a      	uxth	r2, r3
    4c08:	f24b 43b6 	movw	r3, #46262	; 0xb4b6
    4c0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4c10:	801a      	strh	r2, [r3, #0]
    4c12:	f24b 43b6 	movw	r3, #46262	; 0xb4b6
    4c16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4c1a:	881b      	ldrh	r3, [r3, #0]
    4c1c:	2b14      	cmp	r3, #20
    4c1e:	d106      	bne.n	4c2e <events_update+0xe2>
    4c20:	f24b 43a1 	movw	r3, #46241	; 0xb4a1
    4c24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4c28:	2201      	movs	r2, #1
    4c2a:	701a      	strb	r2, [r3, #0]
    4c2c:	e00c      	b.n	4c48 <events_update+0xfc>
    4c2e:	e00b      	b.n	4c48 <events_update+0xfc>
    4c30:	f24b 43b6 	movw	r3, #46262	; 0xb4b6
    4c34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4c38:	2200      	movs	r2, #0
    4c3a:	801a      	strh	r2, [r3, #0]
    4c3c:	f24b 43a1 	movw	r3, #46241	; 0xb4a1
    4c40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4c44:	2200      	movs	r2, #0
    4c46:	701a      	strb	r2, [r3, #0]
}  
    4c48:	46bd      	mov	sp, r7
    4c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c4e:	4770      	bx	lr

00004c50 <copy_from_to_fbw>:


/** \fn inline void copy_from_to_fbw ( void )
 *  \brief Send back uncontrolled channels (only rudder)
 */
inline void copy_from_to_fbw ( void ) {
    4c50:	b480      	push	{r7}
    4c52:	af00      	add	r7, sp, #0
  to_fbw.channels[RADIO_YAW] = from_fbw.channels[RADIO_YAW];
    4c54:	f24b 53c0 	movw	r3, #46528	; 0xb5c0
    4c58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4c5c:	88da      	ldrh	r2, [r3, #6]
    4c5e:	f24b 53d8 	movw	r3, #46552	; 0xb5d8
    4c62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4c66:	80da      	strh	r2, [r3, #6]
#ifdef ANTON_T7
  to_fbw.channels[RADIO_PITCH] = from_fbw.channels[RADIO_PITCH];
#endif
  to_fbw.status = 0;
    4c68:	f24b 53d8 	movw	r3, #46552	; 0xb5d8
    4c6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4c70:	2200      	movs	r2, #0
    4c72:	74da      	strb	r2, [r3, #19]
}
    4c74:	46bd      	mov	sp, r7
    4c76:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c7a:	4770      	bx	lr

00004c7c <send_boot>:
/** \fn inline void reporting_task( void )
 *  \brief Send a serie of initialisation messages followed by a stream of periodic ones\n
 * Called at 20Hz.
 */

void send_boot(void){
    4c7c:	b480      	push	{r7}
    4c7e:	af00      	add	r7, sp, #0
  /** initialisation phase during boot */
  //vPrintString("S_13 reporting_task start!\n\r");
  //add by wanbo
  //if (boot) 
  {
      DOWNLINK_SEND_BOOT(&version);
    4c80:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    4c84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4c88:	781a      	ldrb	r2, [r3, #0]
    4c8a:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    4c8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4c92:	781b      	ldrb	r3, [r3, #0]
    4c94:	b2db      	uxtb	r3, r3
    4c96:	429a      	cmp	r2, r3
    4c98:	d313      	bcc.n	4cc2 <send_boot+0x46>
    4c9a:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    4c9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4ca2:	781b      	ldrb	r3, [r3, #0]
    4ca4:	b2db      	uxtb	r3, r3
    4ca6:	461a      	mov	r2, r3
    4ca8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    4cac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4cb0:	781b      	ldrb	r3, [r3, #0]
    4cb2:	1ad3      	subs	r3, r2, r3
    4cb4:	33ff      	adds	r3, #255	; 0xff
    4cb6:	2b06      	cmp	r3, #6
    4cb8:	bfd4      	ite	le
    4cba:	2300      	movle	r3, #0
    4cbc:	2301      	movgt	r3, #1
    4cbe:	b2db      	uxtb	r3, r3
    4cc0:	e011      	b.n	4ce6 <send_boot+0x6a>
    4cc2:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    4cc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4cca:	781b      	ldrb	r3, [r3, #0]
    4ccc:	b2db      	uxtb	r3, r3
    4cce:	461a      	mov	r2, r3
    4cd0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    4cd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4cd8:	781b      	ldrb	r3, [r3, #0]
    4cda:	1ad3      	subs	r3, r2, r3
    4cdc:	2b06      	cmp	r3, #6
    4cde:	bfd4      	ite	le
    4ce0:	2300      	movle	r3, #0
    4ce2:	2301      	movgt	r3, #1
    4ce4:	b2db      	uxtb	r3, r3
    4ce6:	2b00      	cmp	r3, #0
    4ce8:	f000 8194 	beq.w	5014 <send_boot+0x398>
    4cec:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    4cf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4cf4:	781b      	ldrb	r3, [r3, #0]
    4cf6:	461a      	mov	r2, r3
    4cf8:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    4cfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4d00:	2105      	movs	r1, #5
    4d02:	5499      	strb	r1, [r3, r2]
    4d04:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    4d08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4d0c:	781b      	ldrb	r3, [r3, #0]
    4d0e:	3301      	adds	r3, #1
    4d10:	b2da      	uxtb	r2, r3
    4d12:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    4d16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4d1a:	701a      	strb	r2, [r3, #0]
    4d1c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    4d20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4d24:	781b      	ldrb	r3, [r3, #0]
    4d26:	2bff      	cmp	r3, #255	; 0xff
    4d28:	d105      	bne.n	4d36 <send_boot+0xba>
    4d2a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    4d2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4d32:	2200      	movs	r2, #0
    4d34:	701a      	strb	r2, [r3, #0]
    4d36:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    4d3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4d3e:	781b      	ldrb	r3, [r3, #0]
    4d40:	461a      	mov	r2, r3
    4d42:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    4d46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4d4a:	2101      	movs	r1, #1
    4d4c:	5499      	strb	r1, [r3, r2]
    4d4e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    4d52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4d56:	781b      	ldrb	r3, [r3, #0]
    4d58:	3301      	adds	r3, #1
    4d5a:	b2da      	uxtb	r2, r3
    4d5c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    4d60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4d64:	701a      	strb	r2, [r3, #0]
    4d66:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    4d6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4d6e:	781b      	ldrb	r3, [r3, #0]
    4d70:	2bff      	cmp	r3, #255	; 0xff
    4d72:	d105      	bne.n	4d80 <send_boot+0x104>
    4d74:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    4d78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4d7c:	2200      	movs	r2, #0
    4d7e:	701a      	strb	r2, [r3, #0]
    4d80:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    4d84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4d88:	2201      	movs	r2, #1
    4d8a:	701a      	strb	r2, [r3, #0]
    4d8c:	f24b 53be 	movw	r3, #46526	; 0xb5be
    4d90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4d94:	2201      	movs	r2, #1
    4d96:	701a      	strb	r2, [r3, #0]
    4d98:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    4d9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4da0:	781b      	ldrb	r3, [r3, #0]
    4da2:	461a      	mov	r2, r3
    4da4:	f643 1322 	movw	r3, #14626	; 0x3922
    4da8:	f2c0 0301 	movt	r3, #1
    4dac:	7819      	ldrb	r1, [r3, #0]
    4dae:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    4db2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4db6:	5499      	strb	r1, [r3, r2]
    4db8:	f643 1322 	movw	r3, #14626	; 0x3922
    4dbc:	f2c0 0301 	movt	r3, #1
    4dc0:	781a      	ldrb	r2, [r3, #0]
    4dc2:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    4dc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4dca:	781b      	ldrb	r3, [r3, #0]
    4dcc:	4413      	add	r3, r2
    4dce:	b2da      	uxtb	r2, r3
    4dd0:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    4dd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4dd8:	701a      	strb	r2, [r3, #0]
    4dda:	f24b 53be 	movw	r3, #46526	; 0xb5be
    4dde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4de2:	781a      	ldrb	r2, [r3, #0]
    4de4:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    4de8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4dec:	781b      	ldrb	r3, [r3, #0]
    4dee:	4413      	add	r3, r2
    4df0:	b2da      	uxtb	r2, r3
    4df2:	f24b 53be 	movw	r3, #46526	; 0xb5be
    4df6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4dfa:	701a      	strb	r2, [r3, #0]
    4dfc:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    4e00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4e04:	781b      	ldrb	r3, [r3, #0]
    4e06:	3301      	adds	r3, #1
    4e08:	b2da      	uxtb	r2, r3
    4e0a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    4e0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4e12:	701a      	strb	r2, [r3, #0]
    4e14:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    4e18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4e1c:	781b      	ldrb	r3, [r3, #0]
    4e1e:	2bff      	cmp	r3, #255	; 0xff
    4e20:	d105      	bne.n	4e2e <send_boot+0x1b2>
    4e22:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    4e26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4e2a:	2200      	movs	r2, #0
    4e2c:	701a      	strb	r2, [r3, #0]
    4e2e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    4e32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4e36:	781b      	ldrb	r3, [r3, #0]
    4e38:	461a      	mov	r2, r3
    4e3a:	f643 1322 	movw	r3, #14626	; 0x3922
    4e3e:	f2c0 0301 	movt	r3, #1
    4e42:	7859      	ldrb	r1, [r3, #1]
    4e44:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    4e48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4e4c:	5499      	strb	r1, [r3, r2]
    4e4e:	4b88      	ldr	r3, [pc, #544]	; (5070 <send_boot+0x3f4>)
    4e50:	781a      	ldrb	r2, [r3, #0]
    4e52:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    4e56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4e5a:	781b      	ldrb	r3, [r3, #0]
    4e5c:	4413      	add	r3, r2
    4e5e:	b2da      	uxtb	r2, r3
    4e60:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    4e64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4e68:	701a      	strb	r2, [r3, #0]
    4e6a:	f24b 53be 	movw	r3, #46526	; 0xb5be
    4e6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4e72:	781a      	ldrb	r2, [r3, #0]
    4e74:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    4e78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4e7c:	781b      	ldrb	r3, [r3, #0]
    4e7e:	4413      	add	r3, r2
    4e80:	b2da      	uxtb	r2, r3
    4e82:	f24b 53be 	movw	r3, #46526	; 0xb5be
    4e86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4e8a:	701a      	strb	r2, [r3, #0]
    4e8c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    4e90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4e94:	781b      	ldrb	r3, [r3, #0]
    4e96:	3301      	adds	r3, #1
    4e98:	b2da      	uxtb	r2, r3
    4e9a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    4e9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4ea2:	701a      	strb	r2, [r3, #0]
    4ea4:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    4ea8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4eac:	781b      	ldrb	r3, [r3, #0]
    4eae:	2bff      	cmp	r3, #255	; 0xff
    4eb0:	d105      	bne.n	4ebe <send_boot+0x242>
    4eb2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    4eb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4eba:	2200      	movs	r2, #0
    4ebc:	701a      	strb	r2, [r3, #0]
    4ebe:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    4ec2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4ec6:	781b      	ldrb	r3, [r3, #0]
    4ec8:	461a      	mov	r2, r3
    4eca:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    4ece:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4ed2:	7819      	ldrb	r1, [r3, #0]
    4ed4:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    4ed8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4edc:	5499      	strb	r1, [r3, r2]
    4ede:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    4ee2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4ee6:	781b      	ldrb	r3, [r3, #0]
    4ee8:	3301      	adds	r3, #1
    4eea:	b2da      	uxtb	r2, r3
    4eec:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    4ef0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4ef4:	701a      	strb	r2, [r3, #0]
    4ef6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    4efa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4efe:	781b      	ldrb	r3, [r3, #0]
    4f00:	2bff      	cmp	r3, #255	; 0xff
    4f02:	d105      	bne.n	4f10 <send_boot+0x294>
    4f04:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    4f08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4f0c:	2200      	movs	r2, #0
    4f0e:	701a      	strb	r2, [r3, #0]
    4f10:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    4f14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4f18:	781b      	ldrb	r3, [r3, #0]
    4f1a:	461a      	mov	r2, r3
    4f1c:	f24b 53be 	movw	r3, #46526	; 0xb5be
    4f20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4f24:	7819      	ldrb	r1, [r3, #0]
    4f26:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    4f2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4f2e:	5499      	strb	r1, [r3, r2]
    4f30:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    4f34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4f38:	781b      	ldrb	r3, [r3, #0]
    4f3a:	3301      	adds	r3, #1
    4f3c:	b2da      	uxtb	r2, r3
    4f3e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    4f42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4f46:	701a      	strb	r2, [r3, #0]
    4f48:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    4f4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4f50:	781b      	ldrb	r3, [r3, #0]
    4f52:	2bff      	cmp	r3, #255	; 0xff
    4f54:	d105      	bne.n	4f62 <send_boot+0x2e6>
    4f56:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    4f5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4f5e:	2200      	movs	r2, #0
    4f60:	701a      	strb	r2, [r3, #0]
    4f62:	f248 0339 	movw	r3, #32825	; 0x8039
    4f66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f6a:	781b      	ldrb	r3, [r3, #0]
    4f6c:	b2db      	uxtb	r3, r3
    4f6e:	f003 0310 	and.w	r3, r3, #16
    4f72:	2b00      	cmp	r3, #0
    4f74:	d15a      	bne.n	502c <send_boot+0x3b0>
    4f76:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    4f7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4f7e:	781b      	ldrb	r3, [r3, #0]
    4f80:	b2db      	uxtb	r3, r3
    4f82:	461a      	mov	r2, r3
    4f84:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    4f88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4f8c:	5c9a      	ldrb	r2, [r3, r2]
    4f8e:	f24b 53bb 	movw	r3, #46523	; 0xb5bb
    4f92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4f96:	701a      	strb	r2, [r3, #0]
    4f98:	f24b 53bc 	movw	r3, #46524	; 0xb5bc
    4f9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4fa0:	2200      	movs	r2, #0
    4fa2:	701a      	strb	r2, [r3, #0]
    4fa4:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    4fa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4fac:	781b      	ldrb	r3, [r3, #0]
    4fae:	b2db      	uxtb	r3, r3
    4fb0:	3301      	adds	r3, #1
    4fb2:	b2da      	uxtb	r2, r3
    4fb4:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    4fb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4fbc:	701a      	strb	r2, [r3, #0]
    4fbe:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    4fc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4fc6:	781b      	ldrb	r3, [r3, #0]
    4fc8:	b2db      	uxtb	r3, r3
    4fca:	2bff      	cmp	r3, #255	; 0xff
    4fcc:	d105      	bne.n	4fda <send_boot+0x35e>
    4fce:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    4fd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4fd6:	2200      	movs	r2, #0
    4fd8:	701a      	strb	r2, [r3, #0]
    4fda:	f248 0338 	movw	r3, #32824	; 0x8038
    4fde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fe2:	f248 0238 	movw	r2, #32824	; 0x8038
    4fe6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4fea:	7812      	ldrb	r2, [r2, #0]
    4fec:	b2d2      	uxtb	r2, r2
    4fee:	f042 0201 	orr.w	r2, r2, #1
    4ff2:	b2d2      	uxtb	r2, r2
    4ff4:	701a      	strb	r2, [r3, #0]
    4ff6:	f248 0339 	movw	r3, #32825	; 0x8039
    4ffa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ffe:	f248 0239 	movw	r2, #32825	; 0x8039
    5002:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5006:	7812      	ldrb	r2, [r2, #0]
    5008:	b2d2      	uxtb	r2, r2
    500a:	f042 0210 	orr.w	r2, r2, #16
    500e:	b2d2      	uxtb	r2, r2
    5010:	701a      	strb	r2, [r3, #0]
    5012:	e00b      	b.n	502c <send_boot+0x3b0>
    5014:	f24b 43b8 	movw	r3, #46264	; 0xb4b8
    5018:	f2c2 0304 	movt	r3, #8196	; 0x2004
    501c:	781b      	ldrb	r3, [r3, #0]
    501e:	3301      	adds	r3, #1
    5020:	b2da      	uxtb	r2, r3
    5022:	f24b 43b8 	movw	r3, #46264	; 0xb4b8
    5026:	f2c2 0304 	movt	r3, #8196	; 0x2004
    502a:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    502c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5030:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5034:	781a      	ldrb	r2, [r3, #0]
    5036:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    503a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    503e:	781b      	ldrb	r3, [r3, #0]
    5040:	b2db      	uxtb	r3, r3
    5042:	429a      	cmp	r2, r3
    5044:	d316      	bcc.n	5074 <send_boot+0x3f8>
    5046:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    504a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    504e:	781b      	ldrb	r3, [r3, #0]
    5050:	b2db      	uxtb	r3, r3
    5052:	461a      	mov	r2, r3
    5054:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5058:	f2c2 0304 	movt	r3, #8196	; 0x2004
    505c:	781b      	ldrb	r3, [r3, #0]
    505e:	1ad3      	subs	r3, r2, r3
    5060:	33ff      	adds	r3, #255	; 0xff
    5062:	2b14      	cmp	r3, #20
    5064:	bfd4      	ite	le
    5066:	2300      	movle	r3, #0
    5068:	2301      	movgt	r3, #1
    506a:	b2db      	uxtb	r3, r3
    506c:	e014      	b.n	5098 <send_boot+0x41c>
    506e:	bf00      	nop
    5070:	00013923 	.word	0x00013923
    5074:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    5078:	f2c2 0304 	movt	r3, #8196	; 0x2004
    507c:	781b      	ldrb	r3, [r3, #0]
    507e:	b2db      	uxtb	r3, r3
    5080:	461a      	mov	r2, r3
    5082:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5086:	f2c2 0304 	movt	r3, #8196	; 0x2004
    508a:	781b      	ldrb	r3, [r3, #0]
    508c:	1ad3      	subs	r3, r2, r3
    508e:	2b14      	cmp	r3, #20
    5090:	bfd4      	ite	le
    5092:	2300      	movle	r3, #0
    5094:	2301      	movgt	r3, #1
    5096:	b2db      	uxtb	r3, r3
    5098:	2b00      	cmp	r3, #0
    509a:	f000 85a5 	beq.w	5be8 <send_boot+0xf6c>
    509e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    50a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    50a6:	781b      	ldrb	r3, [r3, #0]
    50a8:	461a      	mov	r2, r3
    50aa:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    50ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    50b2:	2105      	movs	r1, #5
    50b4:	5499      	strb	r1, [r3, r2]
    50b6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    50ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    50be:	781b      	ldrb	r3, [r3, #0]
    50c0:	3301      	adds	r3, #1
    50c2:	b2da      	uxtb	r2, r3
    50c4:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    50c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    50cc:	701a      	strb	r2, [r3, #0]
    50ce:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    50d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    50d6:	781b      	ldrb	r3, [r3, #0]
    50d8:	2bff      	cmp	r3, #255	; 0xff
    50da:	d105      	bne.n	50e8 <send_boot+0x46c>
    50dc:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    50e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    50e4:	2200      	movs	r2, #0
    50e6:	701a      	strb	r2, [r3, #0]
    50e8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    50ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    50f0:	781b      	ldrb	r3, [r3, #0]
    50f2:	461a      	mov	r2, r3
    50f4:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    50f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    50fc:	2105      	movs	r1, #5
    50fe:	5499      	strb	r1, [r3, r2]
    5100:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5104:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5108:	781b      	ldrb	r3, [r3, #0]
    510a:	3301      	adds	r3, #1
    510c:	b2da      	uxtb	r2, r3
    510e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5112:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5116:	701a      	strb	r2, [r3, #0]
    5118:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    511c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5120:	781b      	ldrb	r3, [r3, #0]
    5122:	2bff      	cmp	r3, #255	; 0xff
    5124:	d105      	bne.n	5132 <send_boot+0x4b6>
    5126:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    512a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    512e:	2200      	movs	r2, #0
    5130:	701a      	strb	r2, [r3, #0]
    5132:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5136:	f2c2 0304 	movt	r3, #8196	; 0x2004
    513a:	2205      	movs	r2, #5
    513c:	701a      	strb	r2, [r3, #0]
    513e:	f24b 53be 	movw	r3, #46526	; 0xb5be
    5142:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5146:	2205      	movs	r2, #5
    5148:	701a      	strb	r2, [r3, #0]
    514a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    514e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5152:	781b      	ldrb	r3, [r3, #0]
    5154:	461a      	mov	r2, r3
    5156:	f64b 23b0 	movw	r3, #47792	; 0xbab0
    515a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    515e:	7819      	ldrb	r1, [r3, #0]
    5160:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    5164:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5168:	5499      	strb	r1, [r3, r2]
    516a:	f64b 23b0 	movw	r3, #47792	; 0xbab0
    516e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5172:	781a      	ldrb	r2, [r3, #0]
    5174:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5178:	f2c2 0304 	movt	r3, #8196	; 0x2004
    517c:	781b      	ldrb	r3, [r3, #0]
    517e:	4413      	add	r3, r2
    5180:	b2da      	uxtb	r2, r3
    5182:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5186:	f2c2 0304 	movt	r3, #8196	; 0x2004
    518a:	701a      	strb	r2, [r3, #0]
    518c:	f24b 53be 	movw	r3, #46526	; 0xb5be
    5190:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5194:	781a      	ldrb	r2, [r3, #0]
    5196:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    519a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    519e:	781b      	ldrb	r3, [r3, #0]
    51a0:	4413      	add	r3, r2
    51a2:	b2da      	uxtb	r2, r3
    51a4:	f24b 53be 	movw	r3, #46526	; 0xb5be
    51a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    51ac:	701a      	strb	r2, [r3, #0]
    51ae:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    51b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    51b6:	781b      	ldrb	r3, [r3, #0]
    51b8:	3301      	adds	r3, #1
    51ba:	b2da      	uxtb	r2, r3
    51bc:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    51c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    51c4:	701a      	strb	r2, [r3, #0]
    51c6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    51ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    51ce:	781b      	ldrb	r3, [r3, #0]
    51d0:	2bff      	cmp	r3, #255	; 0xff
    51d2:	d105      	bne.n	51e0 <send_boot+0x564>
    51d4:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    51d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    51dc:	2200      	movs	r2, #0
    51de:	701a      	strb	r2, [r3, #0]
    51e0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    51e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    51e8:	781b      	ldrb	r3, [r3, #0]
    51ea:	461a      	mov	r2, r3
    51ec:	f64b 23b0 	movw	r3, #47792	; 0xbab0
    51f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    51f4:	7859      	ldrb	r1, [r3, #1]
    51f6:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    51fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    51fe:	5499      	strb	r1, [r3, r2]
    5200:	4bd1      	ldr	r3, [pc, #836]	; (5548 <send_boot+0x8cc>)
    5202:	781a      	ldrb	r2, [r3, #0]
    5204:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5208:	f2c2 0304 	movt	r3, #8196	; 0x2004
    520c:	781b      	ldrb	r3, [r3, #0]
    520e:	4413      	add	r3, r2
    5210:	b2da      	uxtb	r2, r3
    5212:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5216:	f2c2 0304 	movt	r3, #8196	; 0x2004
    521a:	701a      	strb	r2, [r3, #0]
    521c:	f24b 53be 	movw	r3, #46526	; 0xb5be
    5220:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5224:	781a      	ldrb	r2, [r3, #0]
    5226:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    522a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    522e:	781b      	ldrb	r3, [r3, #0]
    5230:	4413      	add	r3, r2
    5232:	b2da      	uxtb	r2, r3
    5234:	f24b 53be 	movw	r3, #46526	; 0xb5be
    5238:	f2c2 0304 	movt	r3, #8196	; 0x2004
    523c:	701a      	strb	r2, [r3, #0]
    523e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5242:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5246:	781b      	ldrb	r3, [r3, #0]
    5248:	3301      	adds	r3, #1
    524a:	b2da      	uxtb	r2, r3
    524c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5250:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5254:	701a      	strb	r2, [r3, #0]
    5256:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    525a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    525e:	781b      	ldrb	r3, [r3, #0]
    5260:	2bff      	cmp	r3, #255	; 0xff
    5262:	d105      	bne.n	5270 <send_boot+0x5f4>
    5264:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5268:	f2c2 0304 	movt	r3, #8196	; 0x2004
    526c:	2200      	movs	r2, #0
    526e:	701a      	strb	r2, [r3, #0]
    5270:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5274:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5278:	781b      	ldrb	r3, [r3, #0]
    527a:	461a      	mov	r2, r3
    527c:	f64b 23b0 	movw	r3, #47792	; 0xbab0
    5280:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5284:	7899      	ldrb	r1, [r3, #2]
    5286:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    528a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    528e:	5499      	strb	r1, [r3, r2]
    5290:	4bae      	ldr	r3, [pc, #696]	; (554c <send_boot+0x8d0>)
    5292:	781a      	ldrb	r2, [r3, #0]
    5294:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5298:	f2c2 0304 	movt	r3, #8196	; 0x2004
    529c:	781b      	ldrb	r3, [r3, #0]
    529e:	4413      	add	r3, r2
    52a0:	b2da      	uxtb	r2, r3
    52a2:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    52a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    52aa:	701a      	strb	r2, [r3, #0]
    52ac:	f24b 53be 	movw	r3, #46526	; 0xb5be
    52b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    52b4:	781a      	ldrb	r2, [r3, #0]
    52b6:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    52ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    52be:	781b      	ldrb	r3, [r3, #0]
    52c0:	4413      	add	r3, r2
    52c2:	b2da      	uxtb	r2, r3
    52c4:	f24b 53be 	movw	r3, #46526	; 0xb5be
    52c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    52cc:	701a      	strb	r2, [r3, #0]
    52ce:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    52d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    52d6:	781b      	ldrb	r3, [r3, #0]
    52d8:	3301      	adds	r3, #1
    52da:	b2da      	uxtb	r2, r3
    52dc:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    52e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    52e4:	701a      	strb	r2, [r3, #0]
    52e6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    52ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    52ee:	781b      	ldrb	r3, [r3, #0]
    52f0:	2bff      	cmp	r3, #255	; 0xff
    52f2:	d105      	bne.n	5300 <send_boot+0x684>
    52f4:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    52f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    52fc:	2200      	movs	r2, #0
    52fe:	701a      	strb	r2, [r3, #0]
    5300:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5304:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5308:	781b      	ldrb	r3, [r3, #0]
    530a:	461a      	mov	r2, r3
    530c:	f64b 23b0 	movw	r3, #47792	; 0xbab0
    5310:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5314:	78d9      	ldrb	r1, [r3, #3]
    5316:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    531a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    531e:	5499      	strb	r1, [r3, r2]
    5320:	4b8b      	ldr	r3, [pc, #556]	; (5550 <send_boot+0x8d4>)
    5322:	781a      	ldrb	r2, [r3, #0]
    5324:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5328:	f2c2 0304 	movt	r3, #8196	; 0x2004
    532c:	781b      	ldrb	r3, [r3, #0]
    532e:	4413      	add	r3, r2
    5330:	b2da      	uxtb	r2, r3
    5332:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5336:	f2c2 0304 	movt	r3, #8196	; 0x2004
    533a:	701a      	strb	r2, [r3, #0]
    533c:	f24b 53be 	movw	r3, #46526	; 0xb5be
    5340:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5344:	781a      	ldrb	r2, [r3, #0]
    5346:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    534a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    534e:	781b      	ldrb	r3, [r3, #0]
    5350:	4413      	add	r3, r2
    5352:	b2da      	uxtb	r2, r3
    5354:	f24b 53be 	movw	r3, #46526	; 0xb5be
    5358:	f2c2 0304 	movt	r3, #8196	; 0x2004
    535c:	701a      	strb	r2, [r3, #0]
    535e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5362:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5366:	781b      	ldrb	r3, [r3, #0]
    5368:	3301      	adds	r3, #1
    536a:	b2da      	uxtb	r2, r3
    536c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5370:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5374:	701a      	strb	r2, [r3, #0]
    5376:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    537a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    537e:	781b      	ldrb	r3, [r3, #0]
    5380:	2bff      	cmp	r3, #255	; 0xff
    5382:	d105      	bne.n	5390 <send_boot+0x714>
    5384:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5388:	f2c2 0304 	movt	r3, #8196	; 0x2004
    538c:	2200      	movs	r2, #0
    538e:	701a      	strb	r2, [r3, #0]
    5390:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5394:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5398:	781b      	ldrb	r3, [r3, #0]
    539a:	461a      	mov	r2, r3
    539c:	f64b 23b4 	movw	r3, #47796	; 0xbab4
    53a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    53a4:	7819      	ldrb	r1, [r3, #0]
    53a6:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    53aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    53ae:	5499      	strb	r1, [r3, r2]
    53b0:	f64b 23b4 	movw	r3, #47796	; 0xbab4
    53b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    53b8:	781a      	ldrb	r2, [r3, #0]
    53ba:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    53be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    53c2:	781b      	ldrb	r3, [r3, #0]
    53c4:	4413      	add	r3, r2
    53c6:	b2da      	uxtb	r2, r3
    53c8:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    53cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    53d0:	701a      	strb	r2, [r3, #0]
    53d2:	f24b 53be 	movw	r3, #46526	; 0xb5be
    53d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    53da:	781a      	ldrb	r2, [r3, #0]
    53dc:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    53e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    53e4:	781b      	ldrb	r3, [r3, #0]
    53e6:	4413      	add	r3, r2
    53e8:	b2da      	uxtb	r2, r3
    53ea:	f24b 53be 	movw	r3, #46526	; 0xb5be
    53ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    53f2:	701a      	strb	r2, [r3, #0]
    53f4:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    53f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    53fc:	781b      	ldrb	r3, [r3, #0]
    53fe:	3301      	adds	r3, #1
    5400:	b2da      	uxtb	r2, r3
    5402:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5406:	f2c2 0304 	movt	r3, #8196	; 0x2004
    540a:	701a      	strb	r2, [r3, #0]
    540c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5410:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5414:	781b      	ldrb	r3, [r3, #0]
    5416:	2bff      	cmp	r3, #255	; 0xff
    5418:	d105      	bne.n	5426 <send_boot+0x7aa>
    541a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    541e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5422:	2200      	movs	r2, #0
    5424:	701a      	strb	r2, [r3, #0]
    5426:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    542a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    542e:	781b      	ldrb	r3, [r3, #0]
    5430:	461a      	mov	r2, r3
    5432:	f64b 23b4 	movw	r3, #47796	; 0xbab4
    5436:	f2c2 0304 	movt	r3, #8196	; 0x2004
    543a:	7859      	ldrb	r1, [r3, #1]
    543c:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    5440:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5444:	5499      	strb	r1, [r3, r2]
    5446:	4b43      	ldr	r3, [pc, #268]	; (5554 <send_boot+0x8d8>)
    5448:	781a      	ldrb	r2, [r3, #0]
    544a:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    544e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5452:	781b      	ldrb	r3, [r3, #0]
    5454:	4413      	add	r3, r2
    5456:	b2da      	uxtb	r2, r3
    5458:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    545c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5460:	701a      	strb	r2, [r3, #0]
    5462:	f24b 53be 	movw	r3, #46526	; 0xb5be
    5466:	f2c2 0304 	movt	r3, #8196	; 0x2004
    546a:	781a      	ldrb	r2, [r3, #0]
    546c:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5470:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5474:	781b      	ldrb	r3, [r3, #0]
    5476:	4413      	add	r3, r2
    5478:	b2da      	uxtb	r2, r3
    547a:	f24b 53be 	movw	r3, #46526	; 0xb5be
    547e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5482:	701a      	strb	r2, [r3, #0]
    5484:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5488:	f2c2 0304 	movt	r3, #8196	; 0x2004
    548c:	781b      	ldrb	r3, [r3, #0]
    548e:	3301      	adds	r3, #1
    5490:	b2da      	uxtb	r2, r3
    5492:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5496:	f2c2 0304 	movt	r3, #8196	; 0x2004
    549a:	701a      	strb	r2, [r3, #0]
    549c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    54a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    54a4:	781b      	ldrb	r3, [r3, #0]
    54a6:	2bff      	cmp	r3, #255	; 0xff
    54a8:	d105      	bne.n	54b6 <send_boot+0x83a>
    54aa:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    54ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    54b2:	2200      	movs	r2, #0
    54b4:	701a      	strb	r2, [r3, #0]
    54b6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    54ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    54be:	781b      	ldrb	r3, [r3, #0]
    54c0:	461a      	mov	r2, r3
    54c2:	f64b 23b4 	movw	r3, #47796	; 0xbab4
    54c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    54ca:	7899      	ldrb	r1, [r3, #2]
    54cc:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    54d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    54d4:	5499      	strb	r1, [r3, r2]
    54d6:	4b20      	ldr	r3, [pc, #128]	; (5558 <send_boot+0x8dc>)
    54d8:	781a      	ldrb	r2, [r3, #0]
    54da:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    54de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    54e2:	781b      	ldrb	r3, [r3, #0]
    54e4:	4413      	add	r3, r2
    54e6:	b2da      	uxtb	r2, r3
    54e8:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    54ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    54f0:	701a      	strb	r2, [r3, #0]
    54f2:	f24b 53be 	movw	r3, #46526	; 0xb5be
    54f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    54fa:	781a      	ldrb	r2, [r3, #0]
    54fc:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5500:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5504:	781b      	ldrb	r3, [r3, #0]
    5506:	4413      	add	r3, r2
    5508:	b2da      	uxtb	r2, r3
    550a:	f24b 53be 	movw	r3, #46526	; 0xb5be
    550e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5512:	701a      	strb	r2, [r3, #0]
    5514:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5518:	f2c2 0304 	movt	r3, #8196	; 0x2004
    551c:	781b      	ldrb	r3, [r3, #0]
    551e:	3301      	adds	r3, #1
    5520:	b2da      	uxtb	r2, r3
    5522:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5526:	f2c2 0304 	movt	r3, #8196	; 0x2004
    552a:	701a      	strb	r2, [r3, #0]
    552c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5530:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5534:	781b      	ldrb	r3, [r3, #0]
    5536:	2bff      	cmp	r3, #255	; 0xff
    5538:	d110      	bne.n	555c <send_boot+0x8e0>
    553a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    553e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5542:	2200      	movs	r2, #0
    5544:	701a      	strb	r2, [r3, #0]
    5546:	e009      	b.n	555c <send_boot+0x8e0>
    5548:	2004bab1 	.word	0x2004bab1
    554c:	2004bab2 	.word	0x2004bab2
    5550:	2004bab3 	.word	0x2004bab3
    5554:	2004bab5 	.word	0x2004bab5
    5558:	2004bab6 	.word	0x2004bab6
    555c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5560:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5564:	781b      	ldrb	r3, [r3, #0]
    5566:	461a      	mov	r2, r3
    5568:	f64b 23b4 	movw	r3, #47796	; 0xbab4
    556c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5570:	78d9      	ldrb	r1, [r3, #3]
    5572:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    5576:	f2c2 0304 	movt	r3, #8196	; 0x2004
    557a:	5499      	strb	r1, [r3, r2]
    557c:	4bd3      	ldr	r3, [pc, #844]	; (58cc <send_boot+0xc50>)
    557e:	781a      	ldrb	r2, [r3, #0]
    5580:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5584:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5588:	781b      	ldrb	r3, [r3, #0]
    558a:	4413      	add	r3, r2
    558c:	b2da      	uxtb	r2, r3
    558e:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5592:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5596:	701a      	strb	r2, [r3, #0]
    5598:	f24b 53be 	movw	r3, #46526	; 0xb5be
    559c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    55a0:	781a      	ldrb	r2, [r3, #0]
    55a2:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    55a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    55aa:	781b      	ldrb	r3, [r3, #0]
    55ac:	4413      	add	r3, r2
    55ae:	b2da      	uxtb	r2, r3
    55b0:	f24b 53be 	movw	r3, #46526	; 0xb5be
    55b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    55b8:	701a      	strb	r2, [r3, #0]
    55ba:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    55be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    55c2:	781b      	ldrb	r3, [r3, #0]
    55c4:	3301      	adds	r3, #1
    55c6:	b2da      	uxtb	r2, r3
    55c8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    55cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    55d0:	701a      	strb	r2, [r3, #0]
    55d2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    55d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    55da:	781b      	ldrb	r3, [r3, #0]
    55dc:	2bff      	cmp	r3, #255	; 0xff
    55de:	d105      	bne.n	55ec <send_boot+0x970>
    55e0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    55e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    55e8:	2200      	movs	r2, #0
    55ea:	701a      	strb	r2, [r3, #0]
    55ec:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    55f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    55f4:	781b      	ldrb	r3, [r3, #0]
    55f6:	461a      	mov	r2, r3
    55f8:	f64b 23ac 	movw	r3, #47788	; 0xbaac
    55fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5600:	7819      	ldrb	r1, [r3, #0]
    5602:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    5606:	f2c2 0304 	movt	r3, #8196	; 0x2004
    560a:	5499      	strb	r1, [r3, r2]
    560c:	f64b 23ac 	movw	r3, #47788	; 0xbaac
    5610:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5614:	781a      	ldrb	r2, [r3, #0]
    5616:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    561a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    561e:	781b      	ldrb	r3, [r3, #0]
    5620:	4413      	add	r3, r2
    5622:	b2da      	uxtb	r2, r3
    5624:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5628:	f2c2 0304 	movt	r3, #8196	; 0x2004
    562c:	701a      	strb	r2, [r3, #0]
    562e:	f24b 53be 	movw	r3, #46526	; 0xb5be
    5632:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5636:	781a      	ldrb	r2, [r3, #0]
    5638:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    563c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5640:	781b      	ldrb	r3, [r3, #0]
    5642:	4413      	add	r3, r2
    5644:	b2da      	uxtb	r2, r3
    5646:	f24b 53be 	movw	r3, #46526	; 0xb5be
    564a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    564e:	701a      	strb	r2, [r3, #0]
    5650:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5654:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5658:	781b      	ldrb	r3, [r3, #0]
    565a:	3301      	adds	r3, #1
    565c:	b2da      	uxtb	r2, r3
    565e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5662:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5666:	701a      	strb	r2, [r3, #0]
    5668:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    566c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5670:	781b      	ldrb	r3, [r3, #0]
    5672:	2bff      	cmp	r3, #255	; 0xff
    5674:	d105      	bne.n	5682 <send_boot+0xa06>
    5676:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    567a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    567e:	2200      	movs	r2, #0
    5680:	701a      	strb	r2, [r3, #0]
    5682:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5686:	f2c2 0304 	movt	r3, #8196	; 0x2004
    568a:	781b      	ldrb	r3, [r3, #0]
    568c:	461a      	mov	r2, r3
    568e:	f64b 23ac 	movw	r3, #47788	; 0xbaac
    5692:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5696:	7859      	ldrb	r1, [r3, #1]
    5698:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    569c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    56a0:	5499      	strb	r1, [r3, r2]
    56a2:	4b8b      	ldr	r3, [pc, #556]	; (58d0 <send_boot+0xc54>)
    56a4:	781a      	ldrb	r2, [r3, #0]
    56a6:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    56aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    56ae:	781b      	ldrb	r3, [r3, #0]
    56b0:	4413      	add	r3, r2
    56b2:	b2da      	uxtb	r2, r3
    56b4:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    56b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    56bc:	701a      	strb	r2, [r3, #0]
    56be:	f24b 53be 	movw	r3, #46526	; 0xb5be
    56c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    56c6:	781a      	ldrb	r2, [r3, #0]
    56c8:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    56cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    56d0:	781b      	ldrb	r3, [r3, #0]
    56d2:	4413      	add	r3, r2
    56d4:	b2da      	uxtb	r2, r3
    56d6:	f24b 53be 	movw	r3, #46526	; 0xb5be
    56da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    56de:	701a      	strb	r2, [r3, #0]
    56e0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    56e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    56e8:	781b      	ldrb	r3, [r3, #0]
    56ea:	3301      	adds	r3, #1
    56ec:	b2da      	uxtb	r2, r3
    56ee:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    56f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    56f6:	701a      	strb	r2, [r3, #0]
    56f8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    56fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5700:	781b      	ldrb	r3, [r3, #0]
    5702:	2bff      	cmp	r3, #255	; 0xff
    5704:	d105      	bne.n	5712 <send_boot+0xa96>
    5706:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    570a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    570e:	2200      	movs	r2, #0
    5710:	701a      	strb	r2, [r3, #0]
    5712:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5716:	f2c2 0304 	movt	r3, #8196	; 0x2004
    571a:	781b      	ldrb	r3, [r3, #0]
    571c:	461a      	mov	r2, r3
    571e:	f64b 23ac 	movw	r3, #47788	; 0xbaac
    5722:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5726:	7899      	ldrb	r1, [r3, #2]
    5728:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    572c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5730:	5499      	strb	r1, [r3, r2]
    5732:	4b68      	ldr	r3, [pc, #416]	; (58d4 <send_boot+0xc58>)
    5734:	781a      	ldrb	r2, [r3, #0]
    5736:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    573a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    573e:	781b      	ldrb	r3, [r3, #0]
    5740:	4413      	add	r3, r2
    5742:	b2da      	uxtb	r2, r3
    5744:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5748:	f2c2 0304 	movt	r3, #8196	; 0x2004
    574c:	701a      	strb	r2, [r3, #0]
    574e:	f24b 53be 	movw	r3, #46526	; 0xb5be
    5752:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5756:	781a      	ldrb	r2, [r3, #0]
    5758:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    575c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5760:	781b      	ldrb	r3, [r3, #0]
    5762:	4413      	add	r3, r2
    5764:	b2da      	uxtb	r2, r3
    5766:	f24b 53be 	movw	r3, #46526	; 0xb5be
    576a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    576e:	701a      	strb	r2, [r3, #0]
    5770:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5774:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5778:	781b      	ldrb	r3, [r3, #0]
    577a:	3301      	adds	r3, #1
    577c:	b2da      	uxtb	r2, r3
    577e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5782:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5786:	701a      	strb	r2, [r3, #0]
    5788:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    578c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5790:	781b      	ldrb	r3, [r3, #0]
    5792:	2bff      	cmp	r3, #255	; 0xff
    5794:	d105      	bne.n	57a2 <send_boot+0xb26>
    5796:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    579a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    579e:	2200      	movs	r2, #0
    57a0:	701a      	strb	r2, [r3, #0]
    57a2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    57a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    57aa:	781b      	ldrb	r3, [r3, #0]
    57ac:	461a      	mov	r2, r3
    57ae:	f64b 23ac 	movw	r3, #47788	; 0xbaac
    57b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    57b6:	78d9      	ldrb	r1, [r3, #3]
    57b8:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    57bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    57c0:	5499      	strb	r1, [r3, r2]
    57c2:	4b45      	ldr	r3, [pc, #276]	; (58d8 <send_boot+0xc5c>)
    57c4:	781a      	ldrb	r2, [r3, #0]
    57c6:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    57ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    57ce:	781b      	ldrb	r3, [r3, #0]
    57d0:	4413      	add	r3, r2
    57d2:	b2da      	uxtb	r2, r3
    57d4:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    57d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    57dc:	701a      	strb	r2, [r3, #0]
    57de:	f24b 53be 	movw	r3, #46526	; 0xb5be
    57e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    57e6:	781a      	ldrb	r2, [r3, #0]
    57e8:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    57ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    57f0:	781b      	ldrb	r3, [r3, #0]
    57f2:	4413      	add	r3, r2
    57f4:	b2da      	uxtb	r2, r3
    57f6:	f24b 53be 	movw	r3, #46526	; 0xb5be
    57fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    57fe:	701a      	strb	r2, [r3, #0]
    5800:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5804:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5808:	781b      	ldrb	r3, [r3, #0]
    580a:	3301      	adds	r3, #1
    580c:	b2da      	uxtb	r2, r3
    580e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5812:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5816:	701a      	strb	r2, [r3, #0]
    5818:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    581c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5820:	781b      	ldrb	r3, [r3, #0]
    5822:	2bff      	cmp	r3, #255	; 0xff
    5824:	d105      	bne.n	5832 <send_boot+0xbb6>
    5826:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    582a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    582e:	2200      	movs	r2, #0
    5830:	701a      	strb	r2, [r3, #0]
    5832:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5836:	f2c2 0304 	movt	r3, #8196	; 0x2004
    583a:	781b      	ldrb	r3, [r3, #0]
    583c:	461a      	mov	r2, r3
    583e:	f240 130a 	movw	r3, #266	; 0x10a
    5842:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5846:	7819      	ldrb	r1, [r3, #0]
    5848:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    584c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5850:	5499      	strb	r1, [r3, r2]
    5852:	f240 130a 	movw	r3, #266	; 0x10a
    5856:	f2c2 0300 	movt	r3, #8192	; 0x2000
    585a:	781a      	ldrb	r2, [r3, #0]
    585c:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5860:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5864:	781b      	ldrb	r3, [r3, #0]
    5866:	4413      	add	r3, r2
    5868:	b2da      	uxtb	r2, r3
    586a:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    586e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5872:	701a      	strb	r2, [r3, #0]
    5874:	f24b 53be 	movw	r3, #46526	; 0xb5be
    5878:	f2c2 0304 	movt	r3, #8196	; 0x2004
    587c:	781a      	ldrb	r2, [r3, #0]
    587e:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5882:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5886:	781b      	ldrb	r3, [r3, #0]
    5888:	4413      	add	r3, r2
    588a:	b2da      	uxtb	r2, r3
    588c:	f24b 53be 	movw	r3, #46526	; 0xb5be
    5890:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5894:	701a      	strb	r2, [r3, #0]
    5896:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    589a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    589e:	781b      	ldrb	r3, [r3, #0]
    58a0:	3301      	adds	r3, #1
    58a2:	b2da      	uxtb	r2, r3
    58a4:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    58a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    58ac:	701a      	strb	r2, [r3, #0]
    58ae:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    58b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    58b6:	781b      	ldrb	r3, [r3, #0]
    58b8:	2bff      	cmp	r3, #255	; 0xff
    58ba:	d10f      	bne.n	58dc <send_boot+0xc60>
    58bc:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    58c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    58c4:	2200      	movs	r2, #0
    58c6:	701a      	strb	r2, [r3, #0]
    58c8:	e008      	b.n	58dc <send_boot+0xc60>
    58ca:	bf00      	nop
    58cc:	2004bab7 	.word	0x2004bab7
    58d0:	2004baad 	.word	0x2004baad
    58d4:	2004baae 	.word	0x2004baae
    58d8:	2004baaf 	.word	0x2004baaf
    58dc:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    58e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    58e4:	781b      	ldrb	r3, [r3, #0]
    58e6:	461a      	mov	r2, r3
    58e8:	f240 130a 	movw	r3, #266	; 0x10a
    58ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58f0:	7859      	ldrb	r1, [r3, #1]
    58f2:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    58f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    58fa:	5499      	strb	r1, [r3, r2]
    58fc:	4bc5      	ldr	r3, [pc, #788]	; (5c14 <send_boot+0xf98>)
    58fe:	781a      	ldrb	r2, [r3, #0]
    5900:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5904:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5908:	781b      	ldrb	r3, [r3, #0]
    590a:	4413      	add	r3, r2
    590c:	b2da      	uxtb	r2, r3
    590e:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5912:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5916:	701a      	strb	r2, [r3, #0]
    5918:	f24b 53be 	movw	r3, #46526	; 0xb5be
    591c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5920:	781a      	ldrb	r2, [r3, #0]
    5922:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5926:	f2c2 0304 	movt	r3, #8196	; 0x2004
    592a:	781b      	ldrb	r3, [r3, #0]
    592c:	4413      	add	r3, r2
    592e:	b2da      	uxtb	r2, r3
    5930:	f24b 53be 	movw	r3, #46526	; 0xb5be
    5934:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5938:	701a      	strb	r2, [r3, #0]
    593a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    593e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5942:	781b      	ldrb	r3, [r3, #0]
    5944:	3301      	adds	r3, #1
    5946:	b2da      	uxtb	r2, r3
    5948:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    594c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5950:	701a      	strb	r2, [r3, #0]
    5952:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5956:	f2c2 0304 	movt	r3, #8196	; 0x2004
    595a:	781b      	ldrb	r3, [r3, #0]
    595c:	2bff      	cmp	r3, #255	; 0xff
    595e:	d105      	bne.n	596c <send_boot+0xcf0>
    5960:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5964:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5968:	2200      	movs	r2, #0
    596a:	701a      	strb	r2, [r3, #0]
    596c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5970:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5974:	781b      	ldrb	r3, [r3, #0]
    5976:	461a      	mov	r2, r3
    5978:	f240 130c 	movw	r3, #268	; 0x10c
    597c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5980:	7819      	ldrb	r1, [r3, #0]
    5982:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    5986:	f2c2 0304 	movt	r3, #8196	; 0x2004
    598a:	5499      	strb	r1, [r3, r2]
    598c:	f240 130c 	movw	r3, #268	; 0x10c
    5990:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5994:	781a      	ldrb	r2, [r3, #0]
    5996:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    599a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    599e:	781b      	ldrb	r3, [r3, #0]
    59a0:	4413      	add	r3, r2
    59a2:	b2da      	uxtb	r2, r3
    59a4:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    59a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    59ac:	701a      	strb	r2, [r3, #0]
    59ae:	f24b 53be 	movw	r3, #46526	; 0xb5be
    59b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    59b6:	781a      	ldrb	r2, [r3, #0]
    59b8:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    59bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    59c0:	781b      	ldrb	r3, [r3, #0]
    59c2:	4413      	add	r3, r2
    59c4:	b2da      	uxtb	r2, r3
    59c6:	f24b 53be 	movw	r3, #46526	; 0xb5be
    59ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    59ce:	701a      	strb	r2, [r3, #0]
    59d0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    59d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    59d8:	781b      	ldrb	r3, [r3, #0]
    59da:	3301      	adds	r3, #1
    59dc:	b2da      	uxtb	r2, r3
    59de:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    59e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    59e6:	701a      	strb	r2, [r3, #0]
    59e8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    59ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    59f0:	781b      	ldrb	r3, [r3, #0]
    59f2:	2bff      	cmp	r3, #255	; 0xff
    59f4:	d105      	bne.n	5a02 <send_boot+0xd86>
    59f6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    59fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    59fe:	2200      	movs	r2, #0
    5a00:	701a      	strb	r2, [r3, #0]
    5a02:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5a06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5a0a:	781b      	ldrb	r3, [r3, #0]
    5a0c:	461a      	mov	r2, r3
    5a0e:	f240 130c 	movw	r3, #268	; 0x10c
    5a12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a16:	7859      	ldrb	r1, [r3, #1]
    5a18:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    5a1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5a20:	5499      	strb	r1, [r3, r2]
    5a22:	4b7d      	ldr	r3, [pc, #500]	; (5c18 <send_boot+0xf9c>)
    5a24:	781a      	ldrb	r2, [r3, #0]
    5a26:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5a2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5a2e:	781b      	ldrb	r3, [r3, #0]
    5a30:	4413      	add	r3, r2
    5a32:	b2da      	uxtb	r2, r3
    5a34:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5a38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5a3c:	701a      	strb	r2, [r3, #0]
    5a3e:	f24b 53be 	movw	r3, #46526	; 0xb5be
    5a42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5a46:	781a      	ldrb	r2, [r3, #0]
    5a48:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5a4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5a50:	781b      	ldrb	r3, [r3, #0]
    5a52:	4413      	add	r3, r2
    5a54:	b2da      	uxtb	r2, r3
    5a56:	f24b 53be 	movw	r3, #46526	; 0xb5be
    5a5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5a5e:	701a      	strb	r2, [r3, #0]
    5a60:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5a64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5a68:	781b      	ldrb	r3, [r3, #0]
    5a6a:	3301      	adds	r3, #1
    5a6c:	b2da      	uxtb	r2, r3
    5a6e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5a72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5a76:	701a      	strb	r2, [r3, #0]
    5a78:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5a7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5a80:	781b      	ldrb	r3, [r3, #0]
    5a82:	2bff      	cmp	r3, #255	; 0xff
    5a84:	d105      	bne.n	5a92 <send_boot+0xe16>
    5a86:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5a8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5a8e:	2200      	movs	r2, #0
    5a90:	701a      	strb	r2, [r3, #0]
    5a92:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5a96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5a9a:	781b      	ldrb	r3, [r3, #0]
    5a9c:	461a      	mov	r2, r3
    5a9e:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5aa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5aa6:	7819      	ldrb	r1, [r3, #0]
    5aa8:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    5aac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ab0:	5499      	strb	r1, [r3, r2]
    5ab2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5ab6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5aba:	781b      	ldrb	r3, [r3, #0]
    5abc:	3301      	adds	r3, #1
    5abe:	b2da      	uxtb	r2, r3
    5ac0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5ac4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ac8:	701a      	strb	r2, [r3, #0]
    5aca:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5ace:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ad2:	781b      	ldrb	r3, [r3, #0]
    5ad4:	2bff      	cmp	r3, #255	; 0xff
    5ad6:	d105      	bne.n	5ae4 <send_boot+0xe68>
    5ad8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5adc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ae0:	2200      	movs	r2, #0
    5ae2:	701a      	strb	r2, [r3, #0]
    5ae4:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5ae8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5aec:	781b      	ldrb	r3, [r3, #0]
    5aee:	461a      	mov	r2, r3
    5af0:	f24b 53be 	movw	r3, #46526	; 0xb5be
    5af4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5af8:	7819      	ldrb	r1, [r3, #0]
    5afa:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    5afe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5b02:	5499      	strb	r1, [r3, r2]
    5b04:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5b08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5b0c:	781b      	ldrb	r3, [r3, #0]
    5b0e:	3301      	adds	r3, #1
    5b10:	b2da      	uxtb	r2, r3
    5b12:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5b16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5b1a:	701a      	strb	r2, [r3, #0]
    5b1c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5b20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5b24:	781b      	ldrb	r3, [r3, #0]
    5b26:	2bff      	cmp	r3, #255	; 0xff
    5b28:	d105      	bne.n	5b36 <send_boot+0xeba>
    5b2a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5b2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5b32:	2200      	movs	r2, #0
    5b34:	701a      	strb	r2, [r3, #0]
    5b36:	f248 0339 	movw	r3, #32825	; 0x8039
    5b3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b3e:	781b      	ldrb	r3, [r3, #0]
    5b40:	b2db      	uxtb	r3, r3
    5b42:	f003 0310 	and.w	r3, r3, #16
    5b46:	2b00      	cmp	r3, #0
    5b48:	d15a      	bne.n	5c00 <send_boot+0xf84>
    5b4a:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    5b4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5b52:	781b      	ldrb	r3, [r3, #0]
    5b54:	b2db      	uxtb	r3, r3
    5b56:	461a      	mov	r2, r3
    5b58:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    5b5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5b60:	5c9a      	ldrb	r2, [r3, r2]
    5b62:	f24b 53bb 	movw	r3, #46523	; 0xb5bb
    5b66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5b6a:	701a      	strb	r2, [r3, #0]
    5b6c:	f24b 53bc 	movw	r3, #46524	; 0xb5bc
    5b70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5b74:	2200      	movs	r2, #0
    5b76:	701a      	strb	r2, [r3, #0]
    5b78:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    5b7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5b80:	781b      	ldrb	r3, [r3, #0]
    5b82:	b2db      	uxtb	r3, r3
    5b84:	3301      	adds	r3, #1
    5b86:	b2da      	uxtb	r2, r3
    5b88:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    5b8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5b90:	701a      	strb	r2, [r3, #0]
    5b92:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    5b96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5b9a:	781b      	ldrb	r3, [r3, #0]
    5b9c:	b2db      	uxtb	r3, r3
    5b9e:	2bff      	cmp	r3, #255	; 0xff
    5ba0:	d105      	bne.n	5bae <send_boot+0xf32>
    5ba2:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    5ba6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5baa:	2200      	movs	r2, #0
    5bac:	701a      	strb	r2, [r3, #0]
    5bae:	f248 0338 	movw	r3, #32824	; 0x8038
    5bb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5bb6:	f248 0238 	movw	r2, #32824	; 0x8038
    5bba:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5bbe:	7812      	ldrb	r2, [r2, #0]
    5bc0:	b2d2      	uxtb	r2, r2
    5bc2:	f042 0201 	orr.w	r2, r2, #1
    5bc6:	b2d2      	uxtb	r2, r2
    5bc8:	701a      	strb	r2, [r3, #0]
    5bca:	f248 0339 	movw	r3, #32825	; 0x8039
    5bce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5bd2:	f248 0239 	movw	r2, #32825	; 0x8039
    5bd6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5bda:	7812      	ldrb	r2, [r2, #0]
    5bdc:	b2d2      	uxtb	r2, r2
    5bde:	f042 0210 	orr.w	r2, r2, #16
    5be2:	b2d2      	uxtb	r2, r2
    5be4:	701a      	strb	r2, [r3, #0]
    5be6:	e00b      	b.n	5c00 <send_boot+0xf84>
    5be8:	f24b 43b8 	movw	r3, #46264	; 0xb4b8
    5bec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5bf0:	781b      	ldrb	r3, [r3, #0]
    5bf2:	3301      	adds	r3, #1
    5bf4:	b2da      	uxtb	r2, r3
    5bf6:	f24b 43b8 	movw	r3, #46264	; 0xb4b8
    5bfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5bfe:	701a      	strb	r2, [r3, #0]
      boot = FALSE;
    5c00:	f240 1305 	movw	r3, #261	; 0x105
    5c04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c08:	2200      	movs	r2, #0
    5c0a:	701a      	strb	r2, [r3, #0]
  }
}
    5c0c:	46bd      	mov	sp, r7
    5c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c12:	4770      	bx	lr
    5c14:	2000010b 	.word	0x2000010b
    5c18:	2000010d 	.word	0x2000010d

00005c1c <send_attitude>:
void send_attitude(void){ //499ms
    5c1c:	b480      	push	{r7}
    5c1e:	af00      	add	r7, sp, #0
    // add by wanbo
  //if(!boot)
  {
    count++;
    5c20:	f24b 43b1 	movw	r3, #46257	; 0xb4b1
    5c24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5c28:	781b      	ldrb	r3, [r3, #0]
    5c2a:	3301      	adds	r3, #1
    5c2c:	b2da      	uxtb	r2, r3
    5c2e:	f24b 43b1 	movw	r3, #46257	; 0xb4b1
    5c32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5c36:	701a      	strb	r2, [r3, #0]
    if (count == 250) count = 0;
    5c38:	f24b 43b1 	movw	r3, #46257	; 0xb4b1
    5c3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5c40:	781b      	ldrb	r3, [r3, #0]
    5c42:	2bfa      	cmp	r3, #250	; 0xfa
    5c44:	d105      	bne.n	5c52 <send_attitude+0x36>
    5c46:	f24b 43b1 	movw	r3, #46257	; 0xb4b1
    5c4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5c4e:	2200      	movs	r2, #0
    5c50:	701a      	strb	r2, [r3, #0]
    if (count % 5 == 0) 
    5c52:	f24b 43b1 	movw	r3, #46257	; 0xb4b1
    5c56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5c5a:	781a      	ldrb	r2, [r3, #0]
    5c5c:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    5c60:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    5c64:	fba3 1302 	umull	r1, r3, r3, r2
    5c68:	0899      	lsrs	r1, r3, #2
    5c6a:	460b      	mov	r3, r1
    5c6c:	009b      	lsls	r3, r3, #2
    5c6e:	440b      	add	r3, r1
    5c70:	1ad3      	subs	r3, r2, r3
    5c72:	b2db      	uxtb	r3, r3
    5c74:	2b00      	cmp	r3, #0
    5c76:	f040 84c1 	bne.w	65fc <send_attitude+0x9e0>
       PERIODIC_SEND_ATTITUDE(); 
    5c7a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5c7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5c82:	781a      	ldrb	r2, [r3, #0]
    5c84:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    5c88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5c8c:	781b      	ldrb	r3, [r3, #0]
    5c8e:	b2db      	uxtb	r3, r3
    5c90:	429a      	cmp	r2, r3
    5c92:	d313      	bcc.n	5cbc <send_attitude+0xa0>
    5c94:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    5c98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5c9c:	781b      	ldrb	r3, [r3, #0]
    5c9e:	b2db      	uxtb	r3, r3
    5ca0:	461a      	mov	r2, r3
    5ca2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5ca6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5caa:	781b      	ldrb	r3, [r3, #0]
    5cac:	1ad3      	subs	r3, r2, r3
    5cae:	33ff      	adds	r3, #255	; 0xff
    5cb0:	2b10      	cmp	r3, #16
    5cb2:	bfd4      	ite	le
    5cb4:	2300      	movle	r3, #0
    5cb6:	2301      	movgt	r3, #1
    5cb8:	b2db      	uxtb	r3, r3
    5cba:	e011      	b.n	5ce0 <send_attitude+0xc4>
    5cbc:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    5cc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5cc4:	781b      	ldrb	r3, [r3, #0]
    5cc6:	b2db      	uxtb	r3, r3
    5cc8:	461a      	mov	r2, r3
    5cca:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5cce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5cd2:	781b      	ldrb	r3, [r3, #0]
    5cd4:	1ad3      	subs	r3, r2, r3
    5cd6:	2b10      	cmp	r3, #16
    5cd8:	bfd4      	ite	le
    5cda:	2300      	movle	r3, #0
    5cdc:	2301      	movgt	r3, #1
    5cde:	b2db      	uxtb	r3, r3
    5ce0:	2b00      	cmp	r3, #0
    5ce2:	f000 847f 	beq.w	65e4 <send_attitude+0x9c8>
    5ce6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5cea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5cee:	781b      	ldrb	r3, [r3, #0]
    5cf0:	461a      	mov	r2, r3
    5cf2:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    5cf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5cfa:	2105      	movs	r1, #5
    5cfc:	5499      	strb	r1, [r3, r2]
    5cfe:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5d02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d06:	781b      	ldrb	r3, [r3, #0]
    5d08:	3301      	adds	r3, #1
    5d0a:	b2da      	uxtb	r2, r3
    5d0c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5d10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d14:	701a      	strb	r2, [r3, #0]
    5d16:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5d1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d1e:	781b      	ldrb	r3, [r3, #0]
    5d20:	2bff      	cmp	r3, #255	; 0xff
    5d22:	d105      	bne.n	5d30 <send_attitude+0x114>
    5d24:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5d28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d2c:	2200      	movs	r2, #0
    5d2e:	701a      	strb	r2, [r3, #0]
    5d30:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5d34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d38:	781b      	ldrb	r3, [r3, #0]
    5d3a:	461a      	mov	r2, r3
    5d3c:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    5d40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d44:	2106      	movs	r1, #6
    5d46:	5499      	strb	r1, [r3, r2]
    5d48:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5d4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d50:	781b      	ldrb	r3, [r3, #0]
    5d52:	3301      	adds	r3, #1
    5d54:	b2da      	uxtb	r2, r3
    5d56:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5d5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d5e:	701a      	strb	r2, [r3, #0]
    5d60:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5d64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d68:	781b      	ldrb	r3, [r3, #0]
    5d6a:	2bff      	cmp	r3, #255	; 0xff
    5d6c:	d105      	bne.n	5d7a <send_attitude+0x15e>
    5d6e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5d72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d76:	2200      	movs	r2, #0
    5d78:	701a      	strb	r2, [r3, #0]
    5d7a:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5d7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d82:	2206      	movs	r2, #6
    5d84:	701a      	strb	r2, [r3, #0]
    5d86:	f24b 53be 	movw	r3, #46526	; 0xb5be
    5d8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d8e:	2206      	movs	r2, #6
    5d90:	701a      	strb	r2, [r3, #0]
    5d92:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5d96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d9a:	781b      	ldrb	r3, [r3, #0]
    5d9c:	461a      	mov	r2, r3
    5d9e:	f64b 2378 	movw	r3, #47736	; 0xba78
    5da2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5da6:	7819      	ldrb	r1, [r3, #0]
    5da8:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    5dac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5db0:	5499      	strb	r1, [r3, r2]
    5db2:	f64b 2378 	movw	r3, #47736	; 0xba78
    5db6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5dba:	781a      	ldrb	r2, [r3, #0]
    5dbc:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5dc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5dc4:	781b      	ldrb	r3, [r3, #0]
    5dc6:	4413      	add	r3, r2
    5dc8:	b2da      	uxtb	r2, r3
    5dca:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5dce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5dd2:	701a      	strb	r2, [r3, #0]
    5dd4:	f24b 53be 	movw	r3, #46526	; 0xb5be
    5dd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ddc:	781a      	ldrb	r2, [r3, #0]
    5dde:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5de2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5de6:	781b      	ldrb	r3, [r3, #0]
    5de8:	4413      	add	r3, r2
    5dea:	b2da      	uxtb	r2, r3
    5dec:	f24b 53be 	movw	r3, #46526	; 0xb5be
    5df0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5df4:	701a      	strb	r2, [r3, #0]
    5df6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5dfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5dfe:	781b      	ldrb	r3, [r3, #0]
    5e00:	3301      	adds	r3, #1
    5e02:	b2da      	uxtb	r2, r3
    5e04:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5e08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e0c:	701a      	strb	r2, [r3, #0]
    5e0e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5e12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e16:	781b      	ldrb	r3, [r3, #0]
    5e18:	2bff      	cmp	r3, #255	; 0xff
    5e1a:	d105      	bne.n	5e28 <send_attitude+0x20c>
    5e1c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5e20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e24:	2200      	movs	r2, #0
    5e26:	701a      	strb	r2, [r3, #0]
    5e28:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5e2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e30:	781b      	ldrb	r3, [r3, #0]
    5e32:	461a      	mov	r2, r3
    5e34:	f64b 2378 	movw	r3, #47736	; 0xba78
    5e38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e3c:	7859      	ldrb	r1, [r3, #1]
    5e3e:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    5e42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e46:	5499      	strb	r1, [r3, r2]
    5e48:	4bd1      	ldr	r3, [pc, #836]	; (6190 <send_attitude+0x574>)
    5e4a:	781a      	ldrb	r2, [r3, #0]
    5e4c:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5e50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e54:	781b      	ldrb	r3, [r3, #0]
    5e56:	4413      	add	r3, r2
    5e58:	b2da      	uxtb	r2, r3
    5e5a:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5e5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e62:	701a      	strb	r2, [r3, #0]
    5e64:	f24b 53be 	movw	r3, #46526	; 0xb5be
    5e68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e6c:	781a      	ldrb	r2, [r3, #0]
    5e6e:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5e72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e76:	781b      	ldrb	r3, [r3, #0]
    5e78:	4413      	add	r3, r2
    5e7a:	b2da      	uxtb	r2, r3
    5e7c:	f24b 53be 	movw	r3, #46526	; 0xb5be
    5e80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e84:	701a      	strb	r2, [r3, #0]
    5e86:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5e8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e8e:	781b      	ldrb	r3, [r3, #0]
    5e90:	3301      	adds	r3, #1
    5e92:	b2da      	uxtb	r2, r3
    5e94:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5e98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e9c:	701a      	strb	r2, [r3, #0]
    5e9e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5ea2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ea6:	781b      	ldrb	r3, [r3, #0]
    5ea8:	2bff      	cmp	r3, #255	; 0xff
    5eaa:	d105      	bne.n	5eb8 <send_attitude+0x29c>
    5eac:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5eb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5eb4:	2200      	movs	r2, #0
    5eb6:	701a      	strb	r2, [r3, #0]
    5eb8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5ebc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ec0:	781b      	ldrb	r3, [r3, #0]
    5ec2:	461a      	mov	r2, r3
    5ec4:	f64b 2378 	movw	r3, #47736	; 0xba78
    5ec8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ecc:	7899      	ldrb	r1, [r3, #2]
    5ece:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    5ed2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ed6:	5499      	strb	r1, [r3, r2]
    5ed8:	4bae      	ldr	r3, [pc, #696]	; (6194 <send_attitude+0x578>)
    5eda:	781a      	ldrb	r2, [r3, #0]
    5edc:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5ee0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ee4:	781b      	ldrb	r3, [r3, #0]
    5ee6:	4413      	add	r3, r2
    5ee8:	b2da      	uxtb	r2, r3
    5eea:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5eee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ef2:	701a      	strb	r2, [r3, #0]
    5ef4:	f24b 53be 	movw	r3, #46526	; 0xb5be
    5ef8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5efc:	781a      	ldrb	r2, [r3, #0]
    5efe:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5f02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f06:	781b      	ldrb	r3, [r3, #0]
    5f08:	4413      	add	r3, r2
    5f0a:	b2da      	uxtb	r2, r3
    5f0c:	f24b 53be 	movw	r3, #46526	; 0xb5be
    5f10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f14:	701a      	strb	r2, [r3, #0]
    5f16:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5f1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f1e:	781b      	ldrb	r3, [r3, #0]
    5f20:	3301      	adds	r3, #1
    5f22:	b2da      	uxtb	r2, r3
    5f24:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5f28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f2c:	701a      	strb	r2, [r3, #0]
    5f2e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5f32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f36:	781b      	ldrb	r3, [r3, #0]
    5f38:	2bff      	cmp	r3, #255	; 0xff
    5f3a:	d105      	bne.n	5f48 <send_attitude+0x32c>
    5f3c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5f40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f44:	2200      	movs	r2, #0
    5f46:	701a      	strb	r2, [r3, #0]
    5f48:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5f4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f50:	781b      	ldrb	r3, [r3, #0]
    5f52:	461a      	mov	r2, r3
    5f54:	f64b 2378 	movw	r3, #47736	; 0xba78
    5f58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f5c:	78d9      	ldrb	r1, [r3, #3]
    5f5e:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    5f62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f66:	5499      	strb	r1, [r3, r2]
    5f68:	4b8b      	ldr	r3, [pc, #556]	; (6198 <send_attitude+0x57c>)
    5f6a:	781a      	ldrb	r2, [r3, #0]
    5f6c:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5f70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f74:	781b      	ldrb	r3, [r3, #0]
    5f76:	4413      	add	r3, r2
    5f78:	b2da      	uxtb	r2, r3
    5f7a:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5f7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f82:	701a      	strb	r2, [r3, #0]
    5f84:	f24b 53be 	movw	r3, #46526	; 0xb5be
    5f88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f8c:	781a      	ldrb	r2, [r3, #0]
    5f8e:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5f92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f96:	781b      	ldrb	r3, [r3, #0]
    5f98:	4413      	add	r3, r2
    5f9a:	b2da      	uxtb	r2, r3
    5f9c:	f24b 53be 	movw	r3, #46526	; 0xb5be
    5fa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5fa4:	701a      	strb	r2, [r3, #0]
    5fa6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5faa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5fae:	781b      	ldrb	r3, [r3, #0]
    5fb0:	3301      	adds	r3, #1
    5fb2:	b2da      	uxtb	r2, r3
    5fb4:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5fb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5fbc:	701a      	strb	r2, [r3, #0]
    5fbe:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5fc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5fc6:	781b      	ldrb	r3, [r3, #0]
    5fc8:	2bff      	cmp	r3, #255	; 0xff
    5fca:	d105      	bne.n	5fd8 <send_attitude+0x3bc>
    5fcc:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5fd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5fd4:	2200      	movs	r2, #0
    5fd6:	701a      	strb	r2, [r3, #0]
    5fd8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5fdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5fe0:	781b      	ldrb	r3, [r3, #0]
    5fe2:	461a      	mov	r2, r3
    5fe4:	f64b 237c 	movw	r3, #47740	; 0xba7c
    5fe8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5fec:	7819      	ldrb	r1, [r3, #0]
    5fee:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    5ff2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ff6:	5499      	strb	r1, [r3, r2]
    5ff8:	f64b 237c 	movw	r3, #47740	; 0xba7c
    5ffc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6000:	781a      	ldrb	r2, [r3, #0]
    6002:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    6006:	f2c2 0304 	movt	r3, #8196	; 0x2004
    600a:	781b      	ldrb	r3, [r3, #0]
    600c:	4413      	add	r3, r2
    600e:	b2da      	uxtb	r2, r3
    6010:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    6014:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6018:	701a      	strb	r2, [r3, #0]
    601a:	f24b 53be 	movw	r3, #46526	; 0xb5be
    601e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6022:	781a      	ldrb	r2, [r3, #0]
    6024:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    6028:	f2c2 0304 	movt	r3, #8196	; 0x2004
    602c:	781b      	ldrb	r3, [r3, #0]
    602e:	4413      	add	r3, r2
    6030:	b2da      	uxtb	r2, r3
    6032:	f24b 53be 	movw	r3, #46526	; 0xb5be
    6036:	f2c2 0304 	movt	r3, #8196	; 0x2004
    603a:	701a      	strb	r2, [r3, #0]
    603c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6040:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6044:	781b      	ldrb	r3, [r3, #0]
    6046:	3301      	adds	r3, #1
    6048:	b2da      	uxtb	r2, r3
    604a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    604e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6052:	701a      	strb	r2, [r3, #0]
    6054:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6058:	f2c2 0304 	movt	r3, #8196	; 0x2004
    605c:	781b      	ldrb	r3, [r3, #0]
    605e:	2bff      	cmp	r3, #255	; 0xff
    6060:	d105      	bne.n	606e <send_attitude+0x452>
    6062:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6066:	f2c2 0304 	movt	r3, #8196	; 0x2004
    606a:	2200      	movs	r2, #0
    606c:	701a      	strb	r2, [r3, #0]
    606e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6072:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6076:	781b      	ldrb	r3, [r3, #0]
    6078:	461a      	mov	r2, r3
    607a:	f64b 237c 	movw	r3, #47740	; 0xba7c
    607e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6082:	7859      	ldrb	r1, [r3, #1]
    6084:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    6088:	f2c2 0304 	movt	r3, #8196	; 0x2004
    608c:	5499      	strb	r1, [r3, r2]
    608e:	4b43      	ldr	r3, [pc, #268]	; (619c <send_attitude+0x580>)
    6090:	781a      	ldrb	r2, [r3, #0]
    6092:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    6096:	f2c2 0304 	movt	r3, #8196	; 0x2004
    609a:	781b      	ldrb	r3, [r3, #0]
    609c:	4413      	add	r3, r2
    609e:	b2da      	uxtb	r2, r3
    60a0:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    60a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60a8:	701a      	strb	r2, [r3, #0]
    60aa:	f24b 53be 	movw	r3, #46526	; 0xb5be
    60ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60b2:	781a      	ldrb	r2, [r3, #0]
    60b4:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    60b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60bc:	781b      	ldrb	r3, [r3, #0]
    60be:	4413      	add	r3, r2
    60c0:	b2da      	uxtb	r2, r3
    60c2:	f24b 53be 	movw	r3, #46526	; 0xb5be
    60c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60ca:	701a      	strb	r2, [r3, #0]
    60cc:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    60d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60d4:	781b      	ldrb	r3, [r3, #0]
    60d6:	3301      	adds	r3, #1
    60d8:	b2da      	uxtb	r2, r3
    60da:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    60de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60e2:	701a      	strb	r2, [r3, #0]
    60e4:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    60e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60ec:	781b      	ldrb	r3, [r3, #0]
    60ee:	2bff      	cmp	r3, #255	; 0xff
    60f0:	d105      	bne.n	60fe <send_attitude+0x4e2>
    60f2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    60f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60fa:	2200      	movs	r2, #0
    60fc:	701a      	strb	r2, [r3, #0]
    60fe:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6102:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6106:	781b      	ldrb	r3, [r3, #0]
    6108:	461a      	mov	r2, r3
    610a:	f64b 237c 	movw	r3, #47740	; 0xba7c
    610e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6112:	7899      	ldrb	r1, [r3, #2]
    6114:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    6118:	f2c2 0304 	movt	r3, #8196	; 0x2004
    611c:	5499      	strb	r1, [r3, r2]
    611e:	4b20      	ldr	r3, [pc, #128]	; (61a0 <send_attitude+0x584>)
    6120:	781a      	ldrb	r2, [r3, #0]
    6122:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    6126:	f2c2 0304 	movt	r3, #8196	; 0x2004
    612a:	781b      	ldrb	r3, [r3, #0]
    612c:	4413      	add	r3, r2
    612e:	b2da      	uxtb	r2, r3
    6130:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    6134:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6138:	701a      	strb	r2, [r3, #0]
    613a:	f24b 53be 	movw	r3, #46526	; 0xb5be
    613e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6142:	781a      	ldrb	r2, [r3, #0]
    6144:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    6148:	f2c2 0304 	movt	r3, #8196	; 0x2004
    614c:	781b      	ldrb	r3, [r3, #0]
    614e:	4413      	add	r3, r2
    6150:	b2da      	uxtb	r2, r3
    6152:	f24b 53be 	movw	r3, #46526	; 0xb5be
    6156:	f2c2 0304 	movt	r3, #8196	; 0x2004
    615a:	701a      	strb	r2, [r3, #0]
    615c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6160:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6164:	781b      	ldrb	r3, [r3, #0]
    6166:	3301      	adds	r3, #1
    6168:	b2da      	uxtb	r2, r3
    616a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    616e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6172:	701a      	strb	r2, [r3, #0]
    6174:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6178:	f2c2 0304 	movt	r3, #8196	; 0x2004
    617c:	781b      	ldrb	r3, [r3, #0]
    617e:	2bff      	cmp	r3, #255	; 0xff
    6180:	d110      	bne.n	61a4 <send_attitude+0x588>
    6182:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6186:	f2c2 0304 	movt	r3, #8196	; 0x2004
    618a:	2200      	movs	r2, #0
    618c:	701a      	strb	r2, [r3, #0]
    618e:	e009      	b.n	61a4 <send_attitude+0x588>
    6190:	2004ba79 	.word	0x2004ba79
    6194:	2004ba7a 	.word	0x2004ba7a
    6198:	2004ba7b 	.word	0x2004ba7b
    619c:	2004ba7d 	.word	0x2004ba7d
    61a0:	2004ba7e 	.word	0x2004ba7e
    61a4:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    61a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61ac:	781b      	ldrb	r3, [r3, #0]
    61ae:	461a      	mov	r2, r3
    61b0:	f64b 237c 	movw	r3, #47740	; 0xba7c
    61b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61b8:	78d9      	ldrb	r1, [r3, #3]
    61ba:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    61be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61c2:	5499      	strb	r1, [r3, r2]
    61c4:	4bc2      	ldr	r3, [pc, #776]	; (64d0 <send_attitude+0x8b4>)
    61c6:	781a      	ldrb	r2, [r3, #0]
    61c8:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    61cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61d0:	781b      	ldrb	r3, [r3, #0]
    61d2:	4413      	add	r3, r2
    61d4:	b2da      	uxtb	r2, r3
    61d6:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    61da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61de:	701a      	strb	r2, [r3, #0]
    61e0:	f24b 53be 	movw	r3, #46526	; 0xb5be
    61e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61e8:	781a      	ldrb	r2, [r3, #0]
    61ea:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    61ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61f2:	781b      	ldrb	r3, [r3, #0]
    61f4:	4413      	add	r3, r2
    61f6:	b2da      	uxtb	r2, r3
    61f8:	f24b 53be 	movw	r3, #46526	; 0xb5be
    61fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6200:	701a      	strb	r2, [r3, #0]
    6202:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6206:	f2c2 0304 	movt	r3, #8196	; 0x2004
    620a:	781b      	ldrb	r3, [r3, #0]
    620c:	3301      	adds	r3, #1
    620e:	b2da      	uxtb	r2, r3
    6210:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6214:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6218:	701a      	strb	r2, [r3, #0]
    621a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    621e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6222:	781b      	ldrb	r3, [r3, #0]
    6224:	2bff      	cmp	r3, #255	; 0xff
    6226:	d105      	bne.n	6234 <send_attitude+0x618>
    6228:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    622c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6230:	2200      	movs	r2, #0
    6232:	701a      	strb	r2, [r3, #0]
    6234:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6238:	f2c2 0304 	movt	r3, #8196	; 0x2004
    623c:	781b      	ldrb	r3, [r3, #0]
    623e:	461a      	mov	r2, r3
    6240:	f64b 2380 	movw	r3, #47744	; 0xba80
    6244:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6248:	7819      	ldrb	r1, [r3, #0]
    624a:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    624e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6252:	5499      	strb	r1, [r3, r2]
    6254:	f64b 2380 	movw	r3, #47744	; 0xba80
    6258:	f2c2 0304 	movt	r3, #8196	; 0x2004
    625c:	781a      	ldrb	r2, [r3, #0]
    625e:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    6262:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6266:	781b      	ldrb	r3, [r3, #0]
    6268:	4413      	add	r3, r2
    626a:	b2da      	uxtb	r2, r3
    626c:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    6270:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6274:	701a      	strb	r2, [r3, #0]
    6276:	f24b 53be 	movw	r3, #46526	; 0xb5be
    627a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    627e:	781a      	ldrb	r2, [r3, #0]
    6280:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    6284:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6288:	781b      	ldrb	r3, [r3, #0]
    628a:	4413      	add	r3, r2
    628c:	b2da      	uxtb	r2, r3
    628e:	f24b 53be 	movw	r3, #46526	; 0xb5be
    6292:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6296:	701a      	strb	r2, [r3, #0]
    6298:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    629c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62a0:	781b      	ldrb	r3, [r3, #0]
    62a2:	3301      	adds	r3, #1
    62a4:	b2da      	uxtb	r2, r3
    62a6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    62aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62ae:	701a      	strb	r2, [r3, #0]
    62b0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    62b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62b8:	781b      	ldrb	r3, [r3, #0]
    62ba:	2bff      	cmp	r3, #255	; 0xff
    62bc:	d105      	bne.n	62ca <send_attitude+0x6ae>
    62be:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    62c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62c6:	2200      	movs	r2, #0
    62c8:	701a      	strb	r2, [r3, #0]
    62ca:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    62ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62d2:	781b      	ldrb	r3, [r3, #0]
    62d4:	461a      	mov	r2, r3
    62d6:	f64b 2380 	movw	r3, #47744	; 0xba80
    62da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62de:	7859      	ldrb	r1, [r3, #1]
    62e0:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    62e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62e8:	5499      	strb	r1, [r3, r2]
    62ea:	4b7a      	ldr	r3, [pc, #488]	; (64d4 <send_attitude+0x8b8>)
    62ec:	781a      	ldrb	r2, [r3, #0]
    62ee:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    62f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62f6:	781b      	ldrb	r3, [r3, #0]
    62f8:	4413      	add	r3, r2
    62fa:	b2da      	uxtb	r2, r3
    62fc:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    6300:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6304:	701a      	strb	r2, [r3, #0]
    6306:	f24b 53be 	movw	r3, #46526	; 0xb5be
    630a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    630e:	781a      	ldrb	r2, [r3, #0]
    6310:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    6314:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6318:	781b      	ldrb	r3, [r3, #0]
    631a:	4413      	add	r3, r2
    631c:	b2da      	uxtb	r2, r3
    631e:	f24b 53be 	movw	r3, #46526	; 0xb5be
    6322:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6326:	701a      	strb	r2, [r3, #0]
    6328:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    632c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6330:	781b      	ldrb	r3, [r3, #0]
    6332:	3301      	adds	r3, #1
    6334:	b2da      	uxtb	r2, r3
    6336:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    633a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    633e:	701a      	strb	r2, [r3, #0]
    6340:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6344:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6348:	781b      	ldrb	r3, [r3, #0]
    634a:	2bff      	cmp	r3, #255	; 0xff
    634c:	d105      	bne.n	635a <send_attitude+0x73e>
    634e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6352:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6356:	2200      	movs	r2, #0
    6358:	701a      	strb	r2, [r3, #0]
    635a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    635e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6362:	781b      	ldrb	r3, [r3, #0]
    6364:	461a      	mov	r2, r3
    6366:	f64b 2380 	movw	r3, #47744	; 0xba80
    636a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    636e:	7899      	ldrb	r1, [r3, #2]
    6370:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    6374:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6378:	5499      	strb	r1, [r3, r2]
    637a:	4b57      	ldr	r3, [pc, #348]	; (64d8 <send_attitude+0x8bc>)
    637c:	781a      	ldrb	r2, [r3, #0]
    637e:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    6382:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6386:	781b      	ldrb	r3, [r3, #0]
    6388:	4413      	add	r3, r2
    638a:	b2da      	uxtb	r2, r3
    638c:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    6390:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6394:	701a      	strb	r2, [r3, #0]
    6396:	f24b 53be 	movw	r3, #46526	; 0xb5be
    639a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    639e:	781a      	ldrb	r2, [r3, #0]
    63a0:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    63a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63a8:	781b      	ldrb	r3, [r3, #0]
    63aa:	4413      	add	r3, r2
    63ac:	b2da      	uxtb	r2, r3
    63ae:	f24b 53be 	movw	r3, #46526	; 0xb5be
    63b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63b6:	701a      	strb	r2, [r3, #0]
    63b8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    63bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63c0:	781b      	ldrb	r3, [r3, #0]
    63c2:	3301      	adds	r3, #1
    63c4:	b2da      	uxtb	r2, r3
    63c6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    63ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63ce:	701a      	strb	r2, [r3, #0]
    63d0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    63d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63d8:	781b      	ldrb	r3, [r3, #0]
    63da:	2bff      	cmp	r3, #255	; 0xff
    63dc:	d105      	bne.n	63ea <send_attitude+0x7ce>
    63de:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    63e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63e6:	2200      	movs	r2, #0
    63e8:	701a      	strb	r2, [r3, #0]
    63ea:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    63ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63f2:	781b      	ldrb	r3, [r3, #0]
    63f4:	461a      	mov	r2, r3
    63f6:	f64b 2380 	movw	r3, #47744	; 0xba80
    63fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63fe:	78d9      	ldrb	r1, [r3, #3]
    6400:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    6404:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6408:	5499      	strb	r1, [r3, r2]
    640a:	4b34      	ldr	r3, [pc, #208]	; (64dc <send_attitude+0x8c0>)
    640c:	781a      	ldrb	r2, [r3, #0]
    640e:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    6412:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6416:	781b      	ldrb	r3, [r3, #0]
    6418:	4413      	add	r3, r2
    641a:	b2da      	uxtb	r2, r3
    641c:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    6420:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6424:	701a      	strb	r2, [r3, #0]
    6426:	f24b 53be 	movw	r3, #46526	; 0xb5be
    642a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    642e:	781a      	ldrb	r2, [r3, #0]
    6430:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    6434:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6438:	781b      	ldrb	r3, [r3, #0]
    643a:	4413      	add	r3, r2
    643c:	b2da      	uxtb	r2, r3
    643e:	f24b 53be 	movw	r3, #46526	; 0xb5be
    6442:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6446:	701a      	strb	r2, [r3, #0]
    6448:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    644c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6450:	781b      	ldrb	r3, [r3, #0]
    6452:	3301      	adds	r3, #1
    6454:	b2da      	uxtb	r2, r3
    6456:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    645a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    645e:	701a      	strb	r2, [r3, #0]
    6460:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6464:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6468:	781b      	ldrb	r3, [r3, #0]
    646a:	2bff      	cmp	r3, #255	; 0xff
    646c:	d105      	bne.n	647a <send_attitude+0x85e>
    646e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6472:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6476:	2200      	movs	r2, #0
    6478:	701a      	strb	r2, [r3, #0]
    647a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    647e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6482:	781b      	ldrb	r3, [r3, #0]
    6484:	461a      	mov	r2, r3
    6486:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    648a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    648e:	7819      	ldrb	r1, [r3, #0]
    6490:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    6494:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6498:	5499      	strb	r1, [r3, r2]
    649a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    649e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64a2:	781b      	ldrb	r3, [r3, #0]
    64a4:	3301      	adds	r3, #1
    64a6:	b2da      	uxtb	r2, r3
    64a8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    64ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64b0:	701a      	strb	r2, [r3, #0]
    64b2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    64b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64ba:	781b      	ldrb	r3, [r3, #0]
    64bc:	2bff      	cmp	r3, #255	; 0xff
    64be:	d10f      	bne.n	64e0 <send_attitude+0x8c4>
    64c0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    64c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64c8:	2200      	movs	r2, #0
    64ca:	701a      	strb	r2, [r3, #0]
    64cc:	e008      	b.n	64e0 <send_attitude+0x8c4>
    64ce:	bf00      	nop
    64d0:	2004ba7f 	.word	0x2004ba7f
    64d4:	2004ba81 	.word	0x2004ba81
    64d8:	2004ba82 	.word	0x2004ba82
    64dc:	2004ba83 	.word	0x2004ba83
    64e0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    64e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64e8:	781b      	ldrb	r3, [r3, #0]
    64ea:	461a      	mov	r2, r3
    64ec:	f24b 53be 	movw	r3, #46526	; 0xb5be
    64f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64f4:	7819      	ldrb	r1, [r3, #0]
    64f6:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    64fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64fe:	5499      	strb	r1, [r3, r2]
    6500:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6504:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6508:	781b      	ldrb	r3, [r3, #0]
    650a:	3301      	adds	r3, #1
    650c:	b2da      	uxtb	r2, r3
    650e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6512:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6516:	701a      	strb	r2, [r3, #0]
    6518:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    651c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6520:	781b      	ldrb	r3, [r3, #0]
    6522:	2bff      	cmp	r3, #255	; 0xff
    6524:	d105      	bne.n	6532 <send_attitude+0x916>
    6526:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    652a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    652e:	2200      	movs	r2, #0
    6530:	701a      	strb	r2, [r3, #0]
    6532:	f248 0339 	movw	r3, #32825	; 0x8039
    6536:	f2c2 0300 	movt	r3, #8192	; 0x2000
    653a:	781b      	ldrb	r3, [r3, #0]
    653c:	b2db      	uxtb	r3, r3
    653e:	f003 0310 	and.w	r3, r3, #16
    6542:	2b00      	cmp	r3, #0
    6544:	d15a      	bne.n	65fc <send_attitude+0x9e0>
    6546:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    654a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    654e:	781b      	ldrb	r3, [r3, #0]
    6550:	b2db      	uxtb	r3, r3
    6552:	461a      	mov	r2, r3
    6554:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    6558:	f2c2 0304 	movt	r3, #8196	; 0x2004
    655c:	5c9a      	ldrb	r2, [r3, r2]
    655e:	f24b 53bb 	movw	r3, #46523	; 0xb5bb
    6562:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6566:	701a      	strb	r2, [r3, #0]
    6568:	f24b 53bc 	movw	r3, #46524	; 0xb5bc
    656c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6570:	2200      	movs	r2, #0
    6572:	701a      	strb	r2, [r3, #0]
    6574:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    6578:	f2c2 0304 	movt	r3, #8196	; 0x2004
    657c:	781b      	ldrb	r3, [r3, #0]
    657e:	b2db      	uxtb	r3, r3
    6580:	3301      	adds	r3, #1
    6582:	b2da      	uxtb	r2, r3
    6584:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    6588:	f2c2 0304 	movt	r3, #8196	; 0x2004
    658c:	701a      	strb	r2, [r3, #0]
    658e:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    6592:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6596:	781b      	ldrb	r3, [r3, #0]
    6598:	b2db      	uxtb	r3, r3
    659a:	2bff      	cmp	r3, #255	; 0xff
    659c:	d105      	bne.n	65aa <send_attitude+0x98e>
    659e:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    65a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65a6:	2200      	movs	r2, #0
    65a8:	701a      	strb	r2, [r3, #0]
    65aa:	f248 0338 	movw	r3, #32824	; 0x8038
    65ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65b2:	f248 0238 	movw	r2, #32824	; 0x8038
    65b6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    65ba:	7812      	ldrb	r2, [r2, #0]
    65bc:	b2d2      	uxtb	r2, r2
    65be:	f042 0201 	orr.w	r2, r2, #1
    65c2:	b2d2      	uxtb	r2, r2
    65c4:	701a      	strb	r2, [r3, #0]
    65c6:	f248 0339 	movw	r3, #32825	; 0x8039
    65ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65ce:	f248 0239 	movw	r2, #32825	; 0x8039
    65d2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    65d6:	7812      	ldrb	r2, [r2, #0]
    65d8:	b2d2      	uxtb	r2, r2
    65da:	f042 0210 	orr.w	r2, r2, #16
    65de:	b2d2      	uxtb	r2, r2
    65e0:	701a      	strb	r2, [r3, #0]
    65e2:	e00b      	b.n	65fc <send_attitude+0x9e0>
    65e4:	f24b 43b8 	movw	r3, #46264	; 0xb4b8
    65e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65ec:	781b      	ldrb	r3, [r3, #0]
    65ee:	3301      	adds	r3, #1
    65f0:	b2da      	uxtb	r2, r3
    65f2:	f24b 43b8 	movw	r3, #46264	; 0xb4b8
    65f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65fa:	701a      	strb	r2, [r3, #0]
  }
}
    65fc:	46bd      	mov	sp, r7
    65fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    6602:	4770      	bx	lr

00006604 <send_adc>:
  
void send_adc(void){  //500ms
    6604:	b480      	push	{r7}
    6606:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 5 == 1) PERIODIC_SEND_ADC();}
    6608:	f24b 43b1 	movw	r3, #46257	; 0xb4b1
    660c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6610:	781a      	ldrb	r2, [r3, #0]
    6612:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    6616:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    661a:	fba3 1302 	umull	r1, r3, r3, r2
    661e:	0899      	lsrs	r1, r3, #2
    6620:	460b      	mov	r3, r1
    6622:	009b      	lsls	r3, r3, #2
    6624:	440b      	add	r3, r1
    6626:	1ad3      	subs	r3, r2, r3
    6628:	b2db      	uxtb	r3, r3
    662a:	2b01      	cmp	r3, #1
    662c:	f040 8269 	bne.w	6b02 <send_adc+0x4fe>
    6630:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6634:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6638:	781a      	ldrb	r2, [r3, #0]
    663a:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    663e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6642:	781b      	ldrb	r3, [r3, #0]
    6644:	b2db      	uxtb	r3, r3
    6646:	429a      	cmp	r2, r3
    6648:	d313      	bcc.n	6672 <send_adc+0x6e>
    664a:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    664e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6652:	781b      	ldrb	r3, [r3, #0]
    6654:	b2db      	uxtb	r3, r3
    6656:	461a      	mov	r2, r3
    6658:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    665c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6660:	781b      	ldrb	r3, [r3, #0]
    6662:	1ad3      	subs	r3, r2, r3
    6664:	33ff      	adds	r3, #255	; 0xff
    6666:	2b08      	cmp	r3, #8
    6668:	bfd4      	ite	le
    666a:	2300      	movle	r3, #0
    666c:	2301      	movgt	r3, #1
    666e:	b2db      	uxtb	r3, r3
    6670:	e011      	b.n	6696 <send_adc+0x92>
    6672:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    6676:	f2c2 0304 	movt	r3, #8196	; 0x2004
    667a:	781b      	ldrb	r3, [r3, #0]
    667c:	b2db      	uxtb	r3, r3
    667e:	461a      	mov	r2, r3
    6680:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6684:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6688:	781b      	ldrb	r3, [r3, #0]
    668a:	1ad3      	subs	r3, r2, r3
    668c:	2b08      	cmp	r3, #8
    668e:	bfd4      	ite	le
    6690:	2300      	movle	r3, #0
    6692:	2301      	movgt	r3, #1
    6694:	b2db      	uxtb	r3, r3
    6696:	2b00      	cmp	r3, #0
    6698:	f000 8227 	beq.w	6aea <send_adc+0x4e6>
    669c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    66a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66a4:	781b      	ldrb	r3, [r3, #0]
    66a6:	461a      	mov	r2, r3
    66a8:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    66ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66b0:	2105      	movs	r1, #5
    66b2:	5499      	strb	r1, [r3, r2]
    66b4:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    66b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66bc:	781b      	ldrb	r3, [r3, #0]
    66be:	3301      	adds	r3, #1
    66c0:	b2da      	uxtb	r2, r3
    66c2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    66c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66ca:	701a      	strb	r2, [r3, #0]
    66cc:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    66d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66d4:	781b      	ldrb	r3, [r3, #0]
    66d6:	2bff      	cmp	r3, #255	; 0xff
    66d8:	d105      	bne.n	66e6 <send_adc+0xe2>
    66da:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    66de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66e2:	2200      	movs	r2, #0
    66e4:	701a      	strb	r2, [r3, #0]
    66e6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    66ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66ee:	781b      	ldrb	r3, [r3, #0]
    66f0:	461a      	mov	r2, r3
    66f2:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    66f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66fa:	2107      	movs	r1, #7
    66fc:	5499      	strb	r1, [r3, r2]
    66fe:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6702:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6706:	781b      	ldrb	r3, [r3, #0]
    6708:	3301      	adds	r3, #1
    670a:	b2da      	uxtb	r2, r3
    670c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6710:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6714:	701a      	strb	r2, [r3, #0]
    6716:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    671a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    671e:	781b      	ldrb	r3, [r3, #0]
    6720:	2bff      	cmp	r3, #255	; 0xff
    6722:	d105      	bne.n	6730 <send_adc+0x12c>
    6724:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6728:	f2c2 0304 	movt	r3, #8196	; 0x2004
    672c:	2200      	movs	r2, #0
    672e:	701a      	strb	r2, [r3, #0]
    6730:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    6734:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6738:	2207      	movs	r2, #7
    673a:	701a      	strb	r2, [r3, #0]
    673c:	f24b 53be 	movw	r3, #46526	; 0xb5be
    6740:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6744:	2207      	movs	r2, #7
    6746:	701a      	strb	r2, [r3, #0]
    6748:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    674c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6750:	781b      	ldrb	r3, [r3, #0]
    6752:	461a      	mov	r2, r3
    6754:	f24b 7358 	movw	r3, #46936	; 0xb758
    6758:	f2c2 0304 	movt	r3, #8196	; 0x2004
    675c:	7819      	ldrb	r1, [r3, #0]
    675e:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    6762:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6766:	5499      	strb	r1, [r3, r2]
    6768:	f24b 7358 	movw	r3, #46936	; 0xb758
    676c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6770:	781a      	ldrb	r2, [r3, #0]
    6772:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    6776:	f2c2 0304 	movt	r3, #8196	; 0x2004
    677a:	781b      	ldrb	r3, [r3, #0]
    677c:	4413      	add	r3, r2
    677e:	b2da      	uxtb	r2, r3
    6780:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    6784:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6788:	701a      	strb	r2, [r3, #0]
    678a:	f24b 53be 	movw	r3, #46526	; 0xb5be
    678e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6792:	781a      	ldrb	r2, [r3, #0]
    6794:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    6798:	f2c2 0304 	movt	r3, #8196	; 0x2004
    679c:	781b      	ldrb	r3, [r3, #0]
    679e:	4413      	add	r3, r2
    67a0:	b2da      	uxtb	r2, r3
    67a2:	f24b 53be 	movw	r3, #46526	; 0xb5be
    67a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67aa:	701a      	strb	r2, [r3, #0]
    67ac:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    67b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67b4:	781b      	ldrb	r3, [r3, #0]
    67b6:	3301      	adds	r3, #1
    67b8:	b2da      	uxtb	r2, r3
    67ba:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    67be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67c2:	701a      	strb	r2, [r3, #0]
    67c4:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    67c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67cc:	781b      	ldrb	r3, [r3, #0]
    67ce:	2bff      	cmp	r3, #255	; 0xff
    67d0:	d105      	bne.n	67de <send_adc+0x1da>
    67d2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    67d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67da:	2200      	movs	r2, #0
    67dc:	701a      	strb	r2, [r3, #0]
    67de:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    67e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67e6:	781b      	ldrb	r3, [r3, #0]
    67e8:	461a      	mov	r2, r3
    67ea:	f24b 7358 	movw	r3, #46936	; 0xb758
    67ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67f2:	7859      	ldrb	r1, [r3, #1]
    67f4:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    67f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67fc:	5499      	strb	r1, [r3, r2]
    67fe:	4bc3      	ldr	r3, [pc, #780]	; (6b0c <send_adc+0x508>)
    6800:	781a      	ldrb	r2, [r3, #0]
    6802:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    6806:	f2c2 0304 	movt	r3, #8196	; 0x2004
    680a:	781b      	ldrb	r3, [r3, #0]
    680c:	4413      	add	r3, r2
    680e:	b2da      	uxtb	r2, r3
    6810:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    6814:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6818:	701a      	strb	r2, [r3, #0]
    681a:	f24b 53be 	movw	r3, #46526	; 0xb5be
    681e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6822:	781a      	ldrb	r2, [r3, #0]
    6824:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    6828:	f2c2 0304 	movt	r3, #8196	; 0x2004
    682c:	781b      	ldrb	r3, [r3, #0]
    682e:	4413      	add	r3, r2
    6830:	b2da      	uxtb	r2, r3
    6832:	f24b 53be 	movw	r3, #46526	; 0xb5be
    6836:	f2c2 0304 	movt	r3, #8196	; 0x2004
    683a:	701a      	strb	r2, [r3, #0]
    683c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6840:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6844:	781b      	ldrb	r3, [r3, #0]
    6846:	3301      	adds	r3, #1
    6848:	b2da      	uxtb	r2, r3
    684a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    684e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6852:	701a      	strb	r2, [r3, #0]
    6854:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6858:	f2c2 0304 	movt	r3, #8196	; 0x2004
    685c:	781b      	ldrb	r3, [r3, #0]
    685e:	2bff      	cmp	r3, #255	; 0xff
    6860:	d105      	bne.n	686e <send_adc+0x26a>
    6862:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6866:	f2c2 0304 	movt	r3, #8196	; 0x2004
    686a:	2200      	movs	r2, #0
    686c:	701a      	strb	r2, [r3, #0]
    686e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6872:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6876:	781b      	ldrb	r3, [r3, #0]
    6878:	461a      	mov	r2, r3
    687a:	f24b 735a 	movw	r3, #46938	; 0xb75a
    687e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6882:	7819      	ldrb	r1, [r3, #0]
    6884:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    6888:	f2c2 0304 	movt	r3, #8196	; 0x2004
    688c:	5499      	strb	r1, [r3, r2]
    688e:	f24b 735a 	movw	r3, #46938	; 0xb75a
    6892:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6896:	781a      	ldrb	r2, [r3, #0]
    6898:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    689c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68a0:	781b      	ldrb	r3, [r3, #0]
    68a2:	4413      	add	r3, r2
    68a4:	b2da      	uxtb	r2, r3
    68a6:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    68aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68ae:	701a      	strb	r2, [r3, #0]
    68b0:	f24b 53be 	movw	r3, #46526	; 0xb5be
    68b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68b8:	781a      	ldrb	r2, [r3, #0]
    68ba:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    68be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68c2:	781b      	ldrb	r3, [r3, #0]
    68c4:	4413      	add	r3, r2
    68c6:	b2da      	uxtb	r2, r3
    68c8:	f24b 53be 	movw	r3, #46526	; 0xb5be
    68cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68d0:	701a      	strb	r2, [r3, #0]
    68d2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    68d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68da:	781b      	ldrb	r3, [r3, #0]
    68dc:	3301      	adds	r3, #1
    68de:	b2da      	uxtb	r2, r3
    68e0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    68e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68e8:	701a      	strb	r2, [r3, #0]
    68ea:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    68ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68f2:	781b      	ldrb	r3, [r3, #0]
    68f4:	2bff      	cmp	r3, #255	; 0xff
    68f6:	d105      	bne.n	6904 <send_adc+0x300>
    68f8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    68fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6900:	2200      	movs	r2, #0
    6902:	701a      	strb	r2, [r3, #0]
    6904:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6908:	f2c2 0304 	movt	r3, #8196	; 0x2004
    690c:	781b      	ldrb	r3, [r3, #0]
    690e:	461a      	mov	r2, r3
    6910:	f24b 735a 	movw	r3, #46938	; 0xb75a
    6914:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6918:	7859      	ldrb	r1, [r3, #1]
    691a:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    691e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6922:	5499      	strb	r1, [r3, r2]
    6924:	4b7a      	ldr	r3, [pc, #488]	; (6b10 <send_adc+0x50c>)
    6926:	781a      	ldrb	r2, [r3, #0]
    6928:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    692c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6930:	781b      	ldrb	r3, [r3, #0]
    6932:	4413      	add	r3, r2
    6934:	b2da      	uxtb	r2, r3
    6936:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    693a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    693e:	701a      	strb	r2, [r3, #0]
    6940:	f24b 53be 	movw	r3, #46526	; 0xb5be
    6944:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6948:	781a      	ldrb	r2, [r3, #0]
    694a:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    694e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6952:	781b      	ldrb	r3, [r3, #0]
    6954:	4413      	add	r3, r2
    6956:	b2da      	uxtb	r2, r3
    6958:	f24b 53be 	movw	r3, #46526	; 0xb5be
    695c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6960:	701a      	strb	r2, [r3, #0]
    6962:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6966:	f2c2 0304 	movt	r3, #8196	; 0x2004
    696a:	781b      	ldrb	r3, [r3, #0]
    696c:	3301      	adds	r3, #1
    696e:	b2da      	uxtb	r2, r3
    6970:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6974:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6978:	701a      	strb	r2, [r3, #0]
    697a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    697e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6982:	781b      	ldrb	r3, [r3, #0]
    6984:	2bff      	cmp	r3, #255	; 0xff
    6986:	d105      	bne.n	6994 <send_adc+0x390>
    6988:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    698c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6990:	2200      	movs	r2, #0
    6992:	701a      	strb	r2, [r3, #0]
    6994:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6998:	f2c2 0304 	movt	r3, #8196	; 0x2004
    699c:	781b      	ldrb	r3, [r3, #0]
    699e:	461a      	mov	r2, r3
    69a0:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    69a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69a8:	7819      	ldrb	r1, [r3, #0]
    69aa:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    69ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69b2:	5499      	strb	r1, [r3, r2]
    69b4:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    69b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69bc:	781b      	ldrb	r3, [r3, #0]
    69be:	3301      	adds	r3, #1
    69c0:	b2da      	uxtb	r2, r3
    69c2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    69c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69ca:	701a      	strb	r2, [r3, #0]
    69cc:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    69d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69d4:	781b      	ldrb	r3, [r3, #0]
    69d6:	2bff      	cmp	r3, #255	; 0xff
    69d8:	d105      	bne.n	69e6 <send_adc+0x3e2>
    69da:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    69de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69e2:	2200      	movs	r2, #0
    69e4:	701a      	strb	r2, [r3, #0]
    69e6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    69ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69ee:	781b      	ldrb	r3, [r3, #0]
    69f0:	461a      	mov	r2, r3
    69f2:	f24b 53be 	movw	r3, #46526	; 0xb5be
    69f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69fa:	7819      	ldrb	r1, [r3, #0]
    69fc:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    6a00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a04:	5499      	strb	r1, [r3, r2]
    6a06:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6a0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a0e:	781b      	ldrb	r3, [r3, #0]
    6a10:	3301      	adds	r3, #1
    6a12:	b2da      	uxtb	r2, r3
    6a14:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6a18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a1c:	701a      	strb	r2, [r3, #0]
    6a1e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6a22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a26:	781b      	ldrb	r3, [r3, #0]
    6a28:	2bff      	cmp	r3, #255	; 0xff
    6a2a:	d105      	bne.n	6a38 <send_adc+0x434>
    6a2c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6a30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a34:	2200      	movs	r2, #0
    6a36:	701a      	strb	r2, [r3, #0]
    6a38:	f248 0339 	movw	r3, #32825	; 0x8039
    6a3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a40:	781b      	ldrb	r3, [r3, #0]
    6a42:	b2db      	uxtb	r3, r3
    6a44:	f003 0310 	and.w	r3, r3, #16
    6a48:	2b00      	cmp	r3, #0
    6a4a:	d15a      	bne.n	6b02 <send_adc+0x4fe>
    6a4c:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    6a50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a54:	781b      	ldrb	r3, [r3, #0]
    6a56:	b2db      	uxtb	r3, r3
    6a58:	461a      	mov	r2, r3
    6a5a:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    6a5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a62:	5c9a      	ldrb	r2, [r3, r2]
    6a64:	f24b 53bb 	movw	r3, #46523	; 0xb5bb
    6a68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a6c:	701a      	strb	r2, [r3, #0]
    6a6e:	f24b 53bc 	movw	r3, #46524	; 0xb5bc
    6a72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a76:	2200      	movs	r2, #0
    6a78:	701a      	strb	r2, [r3, #0]
    6a7a:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    6a7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a82:	781b      	ldrb	r3, [r3, #0]
    6a84:	b2db      	uxtb	r3, r3
    6a86:	3301      	adds	r3, #1
    6a88:	b2da      	uxtb	r2, r3
    6a8a:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    6a8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a92:	701a      	strb	r2, [r3, #0]
    6a94:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    6a98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a9c:	781b      	ldrb	r3, [r3, #0]
    6a9e:	b2db      	uxtb	r3, r3
    6aa0:	2bff      	cmp	r3, #255	; 0xff
    6aa2:	d105      	bne.n	6ab0 <send_adc+0x4ac>
    6aa4:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    6aa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6aac:	2200      	movs	r2, #0
    6aae:	701a      	strb	r2, [r3, #0]
    6ab0:	f248 0338 	movw	r3, #32824	; 0x8038
    6ab4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ab8:	f248 0238 	movw	r2, #32824	; 0x8038
    6abc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6ac0:	7812      	ldrb	r2, [r2, #0]
    6ac2:	b2d2      	uxtb	r2, r2
    6ac4:	f042 0201 	orr.w	r2, r2, #1
    6ac8:	b2d2      	uxtb	r2, r2
    6aca:	701a      	strb	r2, [r3, #0]
    6acc:	f248 0339 	movw	r3, #32825	; 0x8039
    6ad0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ad4:	f248 0239 	movw	r2, #32825	; 0x8039
    6ad8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6adc:	7812      	ldrb	r2, [r2, #0]
    6ade:	b2d2      	uxtb	r2, r2
    6ae0:	f042 0210 	orr.w	r2, r2, #16
    6ae4:	b2d2      	uxtb	r2, r2
    6ae6:	701a      	strb	r2, [r3, #0]
    6ae8:	e00b      	b.n	6b02 <send_adc+0x4fe>
    6aea:	f24b 43b8 	movw	r3, #46264	; 0xb4b8
    6aee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6af2:	781b      	ldrb	r3, [r3, #0]
    6af4:	3301      	adds	r3, #1
    6af6:	b2da      	uxtb	r2, r3
    6af8:	f24b 43b8 	movw	r3, #46264	; 0xb4b8
    6afc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b00:	701a      	strb	r2, [r3, #0]
}
    6b02:	46bd      	mov	sp, r7
    6b04:	f85d 7b04 	ldr.w	r7, [sp], #4
    6b08:	4770      	bx	lr
    6b0a:	bf00      	nop
    6b0c:	2004b759 	.word	0x2004b759
    6b10:	2004b75b 	.word	0x2004b75b

00006b14 <send_settings>:
void send_settings(void){ //500ms
    6b14:	b480      	push	{r7}
    6b16:	af00      	add	r7, sp, #0
  //if(!boot)
  {if (count % 5 == 2) PERIODIC_SEND_SETTINGS();}
    6b18:	f24b 43b1 	movw	r3, #46257	; 0xb4b1
    6b1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b20:	781a      	ldrb	r2, [r3, #0]
    6b22:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    6b26:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    6b2a:	fba3 1302 	umull	r1, r3, r3, r2
    6b2e:	0899      	lsrs	r1, r3, #2
    6b30:	460b      	mov	r3, r1
    6b32:	009b      	lsls	r3, r3, #2
    6b34:	440b      	add	r3, r1
    6b36:	1ad3      	subs	r3, r2, r3
    6b38:	b2db      	uxtb	r3, r3
    6b3a:	2b02      	cmp	r3, #2
    6b3c:	f040 83e7 	bne.w	730e <send_settings+0x7fa>
    6b40:	f64b 23cc 	movw	r3, #47820	; 0xbacc
    6b44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b48:	781b      	ldrb	r3, [r3, #0]
    6b4a:	2b00      	cmp	r3, #0
    6b4c:	f000 83df 	beq.w	730e <send_settings+0x7fa>
    6b50:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6b54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b58:	781a      	ldrb	r2, [r3, #0]
    6b5a:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    6b5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b62:	781b      	ldrb	r3, [r3, #0]
    6b64:	b2db      	uxtb	r3, r3
    6b66:	429a      	cmp	r2, r3
    6b68:	d313      	bcc.n	6b92 <send_settings+0x7e>
    6b6a:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    6b6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b72:	781b      	ldrb	r3, [r3, #0]
    6b74:	b2db      	uxtb	r3, r3
    6b76:	461a      	mov	r2, r3
    6b78:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6b7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b80:	781b      	ldrb	r3, [r3, #0]
    6b82:	1ad3      	subs	r3, r2, r3
    6b84:	33ff      	adds	r3, #255	; 0xff
    6b86:	2b0d      	cmp	r3, #13
    6b88:	bfd4      	ite	le
    6b8a:	2300      	movle	r3, #0
    6b8c:	2301      	movgt	r3, #1
    6b8e:	b2db      	uxtb	r3, r3
    6b90:	e011      	b.n	6bb6 <send_settings+0xa2>
    6b92:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    6b96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b9a:	781b      	ldrb	r3, [r3, #0]
    6b9c:	b2db      	uxtb	r3, r3
    6b9e:	461a      	mov	r2, r3
    6ba0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6ba4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ba8:	781b      	ldrb	r3, [r3, #0]
    6baa:	1ad3      	subs	r3, r2, r3
    6bac:	2b0d      	cmp	r3, #13
    6bae:	bfd4      	ite	le
    6bb0:	2300      	movle	r3, #0
    6bb2:	2301      	movgt	r3, #1
    6bb4:	b2db      	uxtb	r3, r3
    6bb6:	2b00      	cmp	r3, #0
    6bb8:	f000 839d 	beq.w	72f6 <send_settings+0x7e2>
    6bbc:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6bc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bc4:	781b      	ldrb	r3, [r3, #0]
    6bc6:	461a      	mov	r2, r3
    6bc8:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    6bcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bd0:	2105      	movs	r1, #5
    6bd2:	5499      	strb	r1, [r3, r2]
    6bd4:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6bd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bdc:	781b      	ldrb	r3, [r3, #0]
    6bde:	3301      	adds	r3, #1
    6be0:	b2da      	uxtb	r2, r3
    6be2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6be6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bea:	701a      	strb	r2, [r3, #0]
    6bec:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6bf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bf4:	781b      	ldrb	r3, [r3, #0]
    6bf6:	2bff      	cmp	r3, #255	; 0xff
    6bf8:	d105      	bne.n	6c06 <send_settings+0xf2>
    6bfa:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6bfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c02:	2200      	movs	r2, #0
    6c04:	701a      	strb	r2, [r3, #0]
    6c06:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6c0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c0e:	781b      	ldrb	r3, [r3, #0]
    6c10:	461a      	mov	r2, r3
    6c12:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    6c16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c1a:	2111      	movs	r1, #17
    6c1c:	5499      	strb	r1, [r3, r2]
    6c1e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6c22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c26:	781b      	ldrb	r3, [r3, #0]
    6c28:	3301      	adds	r3, #1
    6c2a:	b2da      	uxtb	r2, r3
    6c2c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6c30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c34:	701a      	strb	r2, [r3, #0]
    6c36:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6c3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c3e:	781b      	ldrb	r3, [r3, #0]
    6c40:	2bff      	cmp	r3, #255	; 0xff
    6c42:	d105      	bne.n	6c50 <send_settings+0x13c>
    6c44:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6c48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c4c:	2200      	movs	r2, #0
    6c4e:	701a      	strb	r2, [r3, #0]
    6c50:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    6c54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c58:	2211      	movs	r2, #17
    6c5a:	701a      	strb	r2, [r3, #0]
    6c5c:	f24b 53be 	movw	r3, #46526	; 0xb5be
    6c60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c64:	2211      	movs	r2, #17
    6c66:	701a      	strb	r2, [r3, #0]
    6c68:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6c6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c70:	781b      	ldrb	r3, [r3, #0]
    6c72:	461a      	mov	r2, r3
    6c74:	f64b 23cc 	movw	r3, #47820	; 0xbacc
    6c78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c7c:	7819      	ldrb	r1, [r3, #0]
    6c7e:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    6c82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c86:	5499      	strb	r1, [r3, r2]
    6c88:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    6c8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c90:	781a      	ldrb	r2, [r3, #0]
    6c92:	f64b 23cc 	movw	r3, #47820	; 0xbacc
    6c96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c9a:	781b      	ldrb	r3, [r3, #0]
    6c9c:	4413      	add	r3, r2
    6c9e:	b2da      	uxtb	r2, r3
    6ca0:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    6ca4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ca8:	701a      	strb	r2, [r3, #0]
    6caa:	f24b 53be 	movw	r3, #46526	; 0xb5be
    6cae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cb2:	781a      	ldrb	r2, [r3, #0]
    6cb4:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    6cb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cbc:	781b      	ldrb	r3, [r3, #0]
    6cbe:	4413      	add	r3, r2
    6cc0:	b2da      	uxtb	r2, r3
    6cc2:	f24b 53be 	movw	r3, #46526	; 0xb5be
    6cc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cca:	701a      	strb	r2, [r3, #0]
    6ccc:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6cd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cd4:	781b      	ldrb	r3, [r3, #0]
    6cd6:	3301      	adds	r3, #1
    6cd8:	b2da      	uxtb	r2, r3
    6cda:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6cde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ce2:	701a      	strb	r2, [r3, #0]
    6ce4:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6ce8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cec:	781b      	ldrb	r3, [r3, #0]
    6cee:	2bff      	cmp	r3, #255	; 0xff
    6cf0:	d105      	bne.n	6cfe <send_settings+0x1ea>
    6cf2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6cf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cfa:	2200      	movs	r2, #0
    6cfc:	701a      	strb	r2, [r3, #0]
    6cfe:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6d02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d06:	781b      	ldrb	r3, [r3, #0]
    6d08:	461a      	mov	r2, r3
    6d0a:	f24b 43a8 	movw	r3, #46248	; 0xb4a8
    6d0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d12:	7819      	ldrb	r1, [r3, #0]
    6d14:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    6d18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d1c:	5499      	strb	r1, [r3, r2]
    6d1e:	f24b 43a8 	movw	r3, #46248	; 0xb4a8
    6d22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d26:	781a      	ldrb	r2, [r3, #0]
    6d28:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    6d2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d30:	781b      	ldrb	r3, [r3, #0]
    6d32:	4413      	add	r3, r2
    6d34:	b2da      	uxtb	r2, r3
    6d36:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    6d3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d3e:	701a      	strb	r2, [r3, #0]
    6d40:	f24b 53be 	movw	r3, #46526	; 0xb5be
    6d44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d48:	781a      	ldrb	r2, [r3, #0]
    6d4a:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    6d4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d52:	781b      	ldrb	r3, [r3, #0]
    6d54:	4413      	add	r3, r2
    6d56:	b2da      	uxtb	r2, r3
    6d58:	f24b 53be 	movw	r3, #46526	; 0xb5be
    6d5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d60:	701a      	strb	r2, [r3, #0]
    6d62:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6d66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d6a:	781b      	ldrb	r3, [r3, #0]
    6d6c:	3301      	adds	r3, #1
    6d6e:	b2da      	uxtb	r2, r3
    6d70:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6d74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d78:	701a      	strb	r2, [r3, #0]
    6d7a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6d7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d82:	781b      	ldrb	r3, [r3, #0]
    6d84:	2bff      	cmp	r3, #255	; 0xff
    6d86:	d105      	bne.n	6d94 <send_settings+0x280>
    6d88:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6d8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d90:	2200      	movs	r2, #0
    6d92:	701a      	strb	r2, [r3, #0]
    6d94:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6d98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d9c:	781b      	ldrb	r3, [r3, #0]
    6d9e:	461a      	mov	r2, r3
    6da0:	f24b 43a8 	movw	r3, #46248	; 0xb4a8
    6da4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6da8:	7859      	ldrb	r1, [r3, #1]
    6daa:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    6dae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6db2:	5499      	strb	r1, [r3, r2]
    6db4:	4bd1      	ldr	r3, [pc, #836]	; (70fc <send_settings+0x5e8>)
    6db6:	781a      	ldrb	r2, [r3, #0]
    6db8:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    6dbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dc0:	781b      	ldrb	r3, [r3, #0]
    6dc2:	4413      	add	r3, r2
    6dc4:	b2da      	uxtb	r2, r3
    6dc6:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    6dca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dce:	701a      	strb	r2, [r3, #0]
    6dd0:	f24b 53be 	movw	r3, #46526	; 0xb5be
    6dd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dd8:	781a      	ldrb	r2, [r3, #0]
    6dda:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    6dde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6de2:	781b      	ldrb	r3, [r3, #0]
    6de4:	4413      	add	r3, r2
    6de6:	b2da      	uxtb	r2, r3
    6de8:	f24b 53be 	movw	r3, #46526	; 0xb5be
    6dec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6df0:	701a      	strb	r2, [r3, #0]
    6df2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6df6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dfa:	781b      	ldrb	r3, [r3, #0]
    6dfc:	3301      	adds	r3, #1
    6dfe:	b2da      	uxtb	r2, r3
    6e00:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6e04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e08:	701a      	strb	r2, [r3, #0]
    6e0a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6e0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e12:	781b      	ldrb	r3, [r3, #0]
    6e14:	2bff      	cmp	r3, #255	; 0xff
    6e16:	d105      	bne.n	6e24 <send_settings+0x310>
    6e18:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6e1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e20:	2200      	movs	r2, #0
    6e22:	701a      	strb	r2, [r3, #0]
    6e24:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6e28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e2c:	781b      	ldrb	r3, [r3, #0]
    6e2e:	461a      	mov	r2, r3
    6e30:	f24b 43a8 	movw	r3, #46248	; 0xb4a8
    6e34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e38:	7899      	ldrb	r1, [r3, #2]
    6e3a:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    6e3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e42:	5499      	strb	r1, [r3, r2]
    6e44:	4bae      	ldr	r3, [pc, #696]	; (7100 <send_settings+0x5ec>)
    6e46:	781a      	ldrb	r2, [r3, #0]
    6e48:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    6e4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e50:	781b      	ldrb	r3, [r3, #0]
    6e52:	4413      	add	r3, r2
    6e54:	b2da      	uxtb	r2, r3
    6e56:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    6e5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e5e:	701a      	strb	r2, [r3, #0]
    6e60:	f24b 53be 	movw	r3, #46526	; 0xb5be
    6e64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e68:	781a      	ldrb	r2, [r3, #0]
    6e6a:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    6e6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e72:	781b      	ldrb	r3, [r3, #0]
    6e74:	4413      	add	r3, r2
    6e76:	b2da      	uxtb	r2, r3
    6e78:	f24b 53be 	movw	r3, #46526	; 0xb5be
    6e7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e80:	701a      	strb	r2, [r3, #0]
    6e82:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6e86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e8a:	781b      	ldrb	r3, [r3, #0]
    6e8c:	3301      	adds	r3, #1
    6e8e:	b2da      	uxtb	r2, r3
    6e90:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6e94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e98:	701a      	strb	r2, [r3, #0]
    6e9a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6e9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ea2:	781b      	ldrb	r3, [r3, #0]
    6ea4:	2bff      	cmp	r3, #255	; 0xff
    6ea6:	d105      	bne.n	6eb4 <send_settings+0x3a0>
    6ea8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6eac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6eb0:	2200      	movs	r2, #0
    6eb2:	701a      	strb	r2, [r3, #0]
    6eb4:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6eb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ebc:	781b      	ldrb	r3, [r3, #0]
    6ebe:	461a      	mov	r2, r3
    6ec0:	f24b 43a8 	movw	r3, #46248	; 0xb4a8
    6ec4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ec8:	78d9      	ldrb	r1, [r3, #3]
    6eca:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    6ece:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ed2:	5499      	strb	r1, [r3, r2]
    6ed4:	4b8b      	ldr	r3, [pc, #556]	; (7104 <send_settings+0x5f0>)
    6ed6:	781a      	ldrb	r2, [r3, #0]
    6ed8:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    6edc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ee0:	781b      	ldrb	r3, [r3, #0]
    6ee2:	4413      	add	r3, r2
    6ee4:	b2da      	uxtb	r2, r3
    6ee6:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    6eea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6eee:	701a      	strb	r2, [r3, #0]
    6ef0:	f24b 53be 	movw	r3, #46526	; 0xb5be
    6ef4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ef8:	781a      	ldrb	r2, [r3, #0]
    6efa:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    6efe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f02:	781b      	ldrb	r3, [r3, #0]
    6f04:	4413      	add	r3, r2
    6f06:	b2da      	uxtb	r2, r3
    6f08:	f24b 53be 	movw	r3, #46526	; 0xb5be
    6f0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f10:	701a      	strb	r2, [r3, #0]
    6f12:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6f16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f1a:	781b      	ldrb	r3, [r3, #0]
    6f1c:	3301      	adds	r3, #1
    6f1e:	b2da      	uxtb	r2, r3
    6f20:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6f24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f28:	701a      	strb	r2, [r3, #0]
    6f2a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6f2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f32:	781b      	ldrb	r3, [r3, #0]
    6f34:	2bff      	cmp	r3, #255	; 0xff
    6f36:	d105      	bne.n	6f44 <send_settings+0x430>
    6f38:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6f3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f40:	2200      	movs	r2, #0
    6f42:	701a      	strb	r2, [r3, #0]
    6f44:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6f48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f4c:	781b      	ldrb	r3, [r3, #0]
    6f4e:	461a      	mov	r2, r3
    6f50:	f24b 43ac 	movw	r3, #46252	; 0xb4ac
    6f54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f58:	7819      	ldrb	r1, [r3, #0]
    6f5a:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    6f5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f62:	5499      	strb	r1, [r3, r2]
    6f64:	f24b 43ac 	movw	r3, #46252	; 0xb4ac
    6f68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f6c:	781a      	ldrb	r2, [r3, #0]
    6f6e:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    6f72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f76:	781b      	ldrb	r3, [r3, #0]
    6f78:	4413      	add	r3, r2
    6f7a:	b2da      	uxtb	r2, r3
    6f7c:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    6f80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f84:	701a      	strb	r2, [r3, #0]
    6f86:	f24b 53be 	movw	r3, #46526	; 0xb5be
    6f8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f8e:	781a      	ldrb	r2, [r3, #0]
    6f90:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    6f94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f98:	781b      	ldrb	r3, [r3, #0]
    6f9a:	4413      	add	r3, r2
    6f9c:	b2da      	uxtb	r2, r3
    6f9e:	f24b 53be 	movw	r3, #46526	; 0xb5be
    6fa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fa6:	701a      	strb	r2, [r3, #0]
    6fa8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6fac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fb0:	781b      	ldrb	r3, [r3, #0]
    6fb2:	3301      	adds	r3, #1
    6fb4:	b2da      	uxtb	r2, r3
    6fb6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6fba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fbe:	701a      	strb	r2, [r3, #0]
    6fc0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6fc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fc8:	781b      	ldrb	r3, [r3, #0]
    6fca:	2bff      	cmp	r3, #255	; 0xff
    6fcc:	d105      	bne.n	6fda <send_settings+0x4c6>
    6fce:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6fd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fd6:	2200      	movs	r2, #0
    6fd8:	701a      	strb	r2, [r3, #0]
    6fda:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6fde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fe2:	781b      	ldrb	r3, [r3, #0]
    6fe4:	461a      	mov	r2, r3
    6fe6:	f24b 43ac 	movw	r3, #46252	; 0xb4ac
    6fea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fee:	7859      	ldrb	r1, [r3, #1]
    6ff0:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    6ff4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ff8:	5499      	strb	r1, [r3, r2]
    6ffa:	4b43      	ldr	r3, [pc, #268]	; (7108 <send_settings+0x5f4>)
    6ffc:	781a      	ldrb	r2, [r3, #0]
    6ffe:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7002:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7006:	781b      	ldrb	r3, [r3, #0]
    7008:	4413      	add	r3, r2
    700a:	b2da      	uxtb	r2, r3
    700c:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7010:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7014:	701a      	strb	r2, [r3, #0]
    7016:	f24b 53be 	movw	r3, #46526	; 0xb5be
    701a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    701e:	781a      	ldrb	r2, [r3, #0]
    7020:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7024:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7028:	781b      	ldrb	r3, [r3, #0]
    702a:	4413      	add	r3, r2
    702c:	b2da      	uxtb	r2, r3
    702e:	f24b 53be 	movw	r3, #46526	; 0xb5be
    7032:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7036:	701a      	strb	r2, [r3, #0]
    7038:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    703c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7040:	781b      	ldrb	r3, [r3, #0]
    7042:	3301      	adds	r3, #1
    7044:	b2da      	uxtb	r2, r3
    7046:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    704a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    704e:	701a      	strb	r2, [r3, #0]
    7050:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7054:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7058:	781b      	ldrb	r3, [r3, #0]
    705a:	2bff      	cmp	r3, #255	; 0xff
    705c:	d105      	bne.n	706a <send_settings+0x556>
    705e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7062:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7066:	2200      	movs	r2, #0
    7068:	701a      	strb	r2, [r3, #0]
    706a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    706e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7072:	781b      	ldrb	r3, [r3, #0]
    7074:	461a      	mov	r2, r3
    7076:	f24b 43ac 	movw	r3, #46252	; 0xb4ac
    707a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    707e:	7899      	ldrb	r1, [r3, #2]
    7080:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    7084:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7088:	5499      	strb	r1, [r3, r2]
    708a:	4b20      	ldr	r3, [pc, #128]	; (710c <send_settings+0x5f8>)
    708c:	781a      	ldrb	r2, [r3, #0]
    708e:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7092:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7096:	781b      	ldrb	r3, [r3, #0]
    7098:	4413      	add	r3, r2
    709a:	b2da      	uxtb	r2, r3
    709c:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    70a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70a4:	701a      	strb	r2, [r3, #0]
    70a6:	f24b 53be 	movw	r3, #46526	; 0xb5be
    70aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70ae:	781a      	ldrb	r2, [r3, #0]
    70b0:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    70b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70b8:	781b      	ldrb	r3, [r3, #0]
    70ba:	4413      	add	r3, r2
    70bc:	b2da      	uxtb	r2, r3
    70be:	f24b 53be 	movw	r3, #46526	; 0xb5be
    70c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70c6:	701a      	strb	r2, [r3, #0]
    70c8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    70cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70d0:	781b      	ldrb	r3, [r3, #0]
    70d2:	3301      	adds	r3, #1
    70d4:	b2da      	uxtb	r2, r3
    70d6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    70da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70de:	701a      	strb	r2, [r3, #0]
    70e0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    70e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70e8:	781b      	ldrb	r3, [r3, #0]
    70ea:	2bff      	cmp	r3, #255	; 0xff
    70ec:	d110      	bne.n	7110 <send_settings+0x5fc>
    70ee:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    70f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70f6:	2200      	movs	r2, #0
    70f8:	701a      	strb	r2, [r3, #0]
    70fa:	e009      	b.n	7110 <send_settings+0x5fc>
    70fc:	2004b4a9 	.word	0x2004b4a9
    7100:	2004b4aa 	.word	0x2004b4aa
    7104:	2004b4ab 	.word	0x2004b4ab
    7108:	2004b4ad 	.word	0x2004b4ad
    710c:	2004b4ae 	.word	0x2004b4ae
    7110:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7114:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7118:	781b      	ldrb	r3, [r3, #0]
    711a:	461a      	mov	r2, r3
    711c:	f24b 43ac 	movw	r3, #46252	; 0xb4ac
    7120:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7124:	78d9      	ldrb	r1, [r3, #3]
    7126:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    712a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    712e:	5499      	strb	r1, [r3, r2]
    7130:	4b79      	ldr	r3, [pc, #484]	; (7318 <send_settings+0x804>)
    7132:	781a      	ldrb	r2, [r3, #0]
    7134:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7138:	f2c2 0304 	movt	r3, #8196	; 0x2004
    713c:	781b      	ldrb	r3, [r3, #0]
    713e:	4413      	add	r3, r2
    7140:	b2da      	uxtb	r2, r3
    7142:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7146:	f2c2 0304 	movt	r3, #8196	; 0x2004
    714a:	701a      	strb	r2, [r3, #0]
    714c:	f24b 53be 	movw	r3, #46526	; 0xb5be
    7150:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7154:	781a      	ldrb	r2, [r3, #0]
    7156:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    715a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    715e:	781b      	ldrb	r3, [r3, #0]
    7160:	4413      	add	r3, r2
    7162:	b2da      	uxtb	r2, r3
    7164:	f24b 53be 	movw	r3, #46526	; 0xb5be
    7168:	f2c2 0304 	movt	r3, #8196	; 0x2004
    716c:	701a      	strb	r2, [r3, #0]
    716e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7172:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7176:	781b      	ldrb	r3, [r3, #0]
    7178:	3301      	adds	r3, #1
    717a:	b2da      	uxtb	r2, r3
    717c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7180:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7184:	701a      	strb	r2, [r3, #0]
    7186:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    718a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    718e:	781b      	ldrb	r3, [r3, #0]
    7190:	2bff      	cmp	r3, #255	; 0xff
    7192:	d105      	bne.n	71a0 <send_settings+0x68c>
    7194:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7198:	f2c2 0304 	movt	r3, #8196	; 0x2004
    719c:	2200      	movs	r2, #0
    719e:	701a      	strb	r2, [r3, #0]
    71a0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    71a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71a8:	781b      	ldrb	r3, [r3, #0]
    71aa:	461a      	mov	r2, r3
    71ac:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    71b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71b4:	7819      	ldrb	r1, [r3, #0]
    71b6:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    71ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71be:	5499      	strb	r1, [r3, r2]
    71c0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    71c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71c8:	781b      	ldrb	r3, [r3, #0]
    71ca:	3301      	adds	r3, #1
    71cc:	b2da      	uxtb	r2, r3
    71ce:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    71d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71d6:	701a      	strb	r2, [r3, #0]
    71d8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    71dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71e0:	781b      	ldrb	r3, [r3, #0]
    71e2:	2bff      	cmp	r3, #255	; 0xff
    71e4:	d105      	bne.n	71f2 <send_settings+0x6de>
    71e6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    71ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71ee:	2200      	movs	r2, #0
    71f0:	701a      	strb	r2, [r3, #0]
    71f2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    71f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71fa:	781b      	ldrb	r3, [r3, #0]
    71fc:	461a      	mov	r2, r3
    71fe:	f24b 53be 	movw	r3, #46526	; 0xb5be
    7202:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7206:	7819      	ldrb	r1, [r3, #0]
    7208:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    720c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7210:	5499      	strb	r1, [r3, r2]
    7212:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7216:	f2c2 0304 	movt	r3, #8196	; 0x2004
    721a:	781b      	ldrb	r3, [r3, #0]
    721c:	3301      	adds	r3, #1
    721e:	b2da      	uxtb	r2, r3
    7220:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7224:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7228:	701a      	strb	r2, [r3, #0]
    722a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    722e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7232:	781b      	ldrb	r3, [r3, #0]
    7234:	2bff      	cmp	r3, #255	; 0xff
    7236:	d105      	bne.n	7244 <send_settings+0x730>
    7238:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    723c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7240:	2200      	movs	r2, #0
    7242:	701a      	strb	r2, [r3, #0]
    7244:	f248 0339 	movw	r3, #32825	; 0x8039
    7248:	f2c2 0300 	movt	r3, #8192	; 0x2000
    724c:	781b      	ldrb	r3, [r3, #0]
    724e:	b2db      	uxtb	r3, r3
    7250:	f003 0310 	and.w	r3, r3, #16
    7254:	2b00      	cmp	r3, #0
    7256:	d15a      	bne.n	730e <send_settings+0x7fa>
    7258:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    725c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7260:	781b      	ldrb	r3, [r3, #0]
    7262:	b2db      	uxtb	r3, r3
    7264:	461a      	mov	r2, r3
    7266:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    726a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    726e:	5c9a      	ldrb	r2, [r3, r2]
    7270:	f24b 53bb 	movw	r3, #46523	; 0xb5bb
    7274:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7278:	701a      	strb	r2, [r3, #0]
    727a:	f24b 53bc 	movw	r3, #46524	; 0xb5bc
    727e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7282:	2200      	movs	r2, #0
    7284:	701a      	strb	r2, [r3, #0]
    7286:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    728a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    728e:	781b      	ldrb	r3, [r3, #0]
    7290:	b2db      	uxtb	r3, r3
    7292:	3301      	adds	r3, #1
    7294:	b2da      	uxtb	r2, r3
    7296:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    729a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    729e:	701a      	strb	r2, [r3, #0]
    72a0:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    72a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72a8:	781b      	ldrb	r3, [r3, #0]
    72aa:	b2db      	uxtb	r3, r3
    72ac:	2bff      	cmp	r3, #255	; 0xff
    72ae:	d105      	bne.n	72bc <send_settings+0x7a8>
    72b0:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    72b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72b8:	2200      	movs	r2, #0
    72ba:	701a      	strb	r2, [r3, #0]
    72bc:	f248 0338 	movw	r3, #32824	; 0x8038
    72c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72c4:	f248 0238 	movw	r2, #32824	; 0x8038
    72c8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    72cc:	7812      	ldrb	r2, [r2, #0]
    72ce:	b2d2      	uxtb	r2, r2
    72d0:	f042 0201 	orr.w	r2, r2, #1
    72d4:	b2d2      	uxtb	r2, r2
    72d6:	701a      	strb	r2, [r3, #0]
    72d8:	f248 0339 	movw	r3, #32825	; 0x8039
    72dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72e0:	f248 0239 	movw	r2, #32825	; 0x8039
    72e4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    72e8:	7812      	ldrb	r2, [r2, #0]
    72ea:	b2d2      	uxtb	r2, r2
    72ec:	f042 0210 	orr.w	r2, r2, #16
    72f0:	b2d2      	uxtb	r2, r2
    72f2:	701a      	strb	r2, [r3, #0]
    72f4:	e00b      	b.n	730e <send_settings+0x7fa>
    72f6:	f24b 43b8 	movw	r3, #46264	; 0xb4b8
    72fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72fe:	781b      	ldrb	r3, [r3, #0]
    7300:	3301      	adds	r3, #1
    7302:	b2da      	uxtb	r2, r3
    7304:	f24b 43b8 	movw	r3, #46264	; 0xb4b8
    7308:	f2c2 0304 	movt	r3, #8196	; 0x2004
    730c:	701a      	strb	r2, [r3, #0]
}
    730e:	46bd      	mov	sp, r7
    7310:	f85d 7b04 	ldr.w	r7, [sp], #4
    7314:	4770      	bx	lr
    7316:	bf00      	nop
    7318:	2004b4af 	.word	0x2004b4af

0000731c <send_desired>:
void send_desired(void){  //1000ms
    731c:	b480      	push	{r7}
    731e:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 10 == 3) PERIODIC_SEND_DESIRED();}
    7320:	f24b 43b1 	movw	r3, #46257	; 0xb4b1
    7324:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7328:	781a      	ldrb	r2, [r3, #0]
    732a:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    732e:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    7332:	fba3 1302 	umull	r1, r3, r3, r2
    7336:	08d9      	lsrs	r1, r3, #3
    7338:	460b      	mov	r3, r1
    733a:	009b      	lsls	r3, r3, #2
    733c:	440b      	add	r3, r1
    733e:	005b      	lsls	r3, r3, #1
    7340:	1ad3      	subs	r3, r2, r3
    7342:	b2db      	uxtb	r3, r3
    7344:	2b03      	cmp	r3, #3
    7346:	f040 8712 	bne.w	816e <send_desired+0xe52>
    734a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    734e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7352:	781a      	ldrb	r2, [r3, #0]
    7354:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    7358:	f2c2 0304 	movt	r3, #8196	; 0x2004
    735c:	781b      	ldrb	r3, [r3, #0]
    735e:	b2db      	uxtb	r3, r3
    7360:	429a      	cmp	r2, r3
    7362:	d313      	bcc.n	738c <send_desired+0x70>
    7364:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    7368:	f2c2 0304 	movt	r3, #8196	; 0x2004
    736c:	781b      	ldrb	r3, [r3, #0]
    736e:	b2db      	uxtb	r3, r3
    7370:	461a      	mov	r2, r3
    7372:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7376:	f2c2 0304 	movt	r3, #8196	; 0x2004
    737a:	781b      	ldrb	r3, [r3, #0]
    737c:	1ad3      	subs	r3, r2, r3
    737e:	33ff      	adds	r3, #255	; 0xff
    7380:	2b18      	cmp	r3, #24
    7382:	bfd4      	ite	le
    7384:	2300      	movle	r3, #0
    7386:	2301      	movgt	r3, #1
    7388:	b2db      	uxtb	r3, r3
    738a:	e011      	b.n	73b0 <send_desired+0x94>
    738c:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    7390:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7394:	781b      	ldrb	r3, [r3, #0]
    7396:	b2db      	uxtb	r3, r3
    7398:	461a      	mov	r2, r3
    739a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    739e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73a2:	781b      	ldrb	r3, [r3, #0]
    73a4:	1ad3      	subs	r3, r2, r3
    73a6:	2b18      	cmp	r3, #24
    73a8:	bfd4      	ite	le
    73aa:	2300      	movle	r3, #0
    73ac:	2301      	movgt	r3, #1
    73ae:	b2db      	uxtb	r3, r3
    73b0:	2b00      	cmp	r3, #0
    73b2:	f000 86d0 	beq.w	8156 <send_desired+0xe3a>
    73b6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    73ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73be:	781b      	ldrb	r3, [r3, #0]
    73c0:	461a      	mov	r2, r3
    73c2:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    73c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73ca:	2105      	movs	r1, #5
    73cc:	5499      	strb	r1, [r3, r2]
    73ce:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    73d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73d6:	781b      	ldrb	r3, [r3, #0]
    73d8:	3301      	adds	r3, #1
    73da:	b2da      	uxtb	r2, r3
    73dc:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    73e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73e4:	701a      	strb	r2, [r3, #0]
    73e6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    73ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73ee:	781b      	ldrb	r3, [r3, #0]
    73f0:	2bff      	cmp	r3, #255	; 0xff
    73f2:	d105      	bne.n	7400 <send_desired+0xe4>
    73f4:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    73f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73fc:	2200      	movs	r2, #0
    73fe:	701a      	strb	r2, [r3, #0]
    7400:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7404:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7408:	781b      	ldrb	r3, [r3, #0]
    740a:	461a      	mov	r2, r3
    740c:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    7410:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7414:	2112      	movs	r1, #18
    7416:	5499      	strb	r1, [r3, r2]
    7418:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    741c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7420:	781b      	ldrb	r3, [r3, #0]
    7422:	3301      	adds	r3, #1
    7424:	b2da      	uxtb	r2, r3
    7426:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    742a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    742e:	701a      	strb	r2, [r3, #0]
    7430:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7434:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7438:	781b      	ldrb	r3, [r3, #0]
    743a:	2bff      	cmp	r3, #255	; 0xff
    743c:	d105      	bne.n	744a <send_desired+0x12e>
    743e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7442:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7446:	2200      	movs	r2, #0
    7448:	701a      	strb	r2, [r3, #0]
    744a:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    744e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7452:	2212      	movs	r2, #18
    7454:	701a      	strb	r2, [r3, #0]
    7456:	f24b 53be 	movw	r3, #46526	; 0xb5be
    745a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    745e:	2212      	movs	r2, #18
    7460:	701a      	strb	r2, [r3, #0]
    7462:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7466:	f2c2 0304 	movt	r3, #8196	; 0x2004
    746a:	781b      	ldrb	r3, [r3, #0]
    746c:	461a      	mov	r2, r3
    746e:	f24b 73e4 	movw	r3, #47076	; 0xb7e4
    7472:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7476:	7819      	ldrb	r1, [r3, #0]
    7478:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    747c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7480:	5499      	strb	r1, [r3, r2]
    7482:	f24b 73e4 	movw	r3, #47076	; 0xb7e4
    7486:	f2c2 0304 	movt	r3, #8196	; 0x2004
    748a:	781a      	ldrb	r2, [r3, #0]
    748c:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7490:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7494:	781b      	ldrb	r3, [r3, #0]
    7496:	4413      	add	r3, r2
    7498:	b2da      	uxtb	r2, r3
    749a:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    749e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74a2:	701a      	strb	r2, [r3, #0]
    74a4:	f24b 53be 	movw	r3, #46526	; 0xb5be
    74a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74ac:	781a      	ldrb	r2, [r3, #0]
    74ae:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    74b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74b6:	781b      	ldrb	r3, [r3, #0]
    74b8:	4413      	add	r3, r2
    74ba:	b2da      	uxtb	r2, r3
    74bc:	f24b 53be 	movw	r3, #46526	; 0xb5be
    74c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74c4:	701a      	strb	r2, [r3, #0]
    74c6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    74ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74ce:	781b      	ldrb	r3, [r3, #0]
    74d0:	3301      	adds	r3, #1
    74d2:	b2da      	uxtb	r2, r3
    74d4:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    74d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74dc:	701a      	strb	r2, [r3, #0]
    74de:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    74e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74e6:	781b      	ldrb	r3, [r3, #0]
    74e8:	2bff      	cmp	r3, #255	; 0xff
    74ea:	d105      	bne.n	74f8 <send_desired+0x1dc>
    74ec:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    74f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74f4:	2200      	movs	r2, #0
    74f6:	701a      	strb	r2, [r3, #0]
    74f8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    74fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7500:	781b      	ldrb	r3, [r3, #0]
    7502:	461a      	mov	r2, r3
    7504:	f24b 73e4 	movw	r3, #47076	; 0xb7e4
    7508:	f2c2 0304 	movt	r3, #8196	; 0x2004
    750c:	7859      	ldrb	r1, [r3, #1]
    750e:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    7512:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7516:	5499      	strb	r1, [r3, r2]
    7518:	4bd1      	ldr	r3, [pc, #836]	; (7860 <send_desired+0x544>)
    751a:	781a      	ldrb	r2, [r3, #0]
    751c:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7520:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7524:	781b      	ldrb	r3, [r3, #0]
    7526:	4413      	add	r3, r2
    7528:	b2da      	uxtb	r2, r3
    752a:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    752e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7532:	701a      	strb	r2, [r3, #0]
    7534:	f24b 53be 	movw	r3, #46526	; 0xb5be
    7538:	f2c2 0304 	movt	r3, #8196	; 0x2004
    753c:	781a      	ldrb	r2, [r3, #0]
    753e:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7542:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7546:	781b      	ldrb	r3, [r3, #0]
    7548:	4413      	add	r3, r2
    754a:	b2da      	uxtb	r2, r3
    754c:	f24b 53be 	movw	r3, #46526	; 0xb5be
    7550:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7554:	701a      	strb	r2, [r3, #0]
    7556:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    755a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    755e:	781b      	ldrb	r3, [r3, #0]
    7560:	3301      	adds	r3, #1
    7562:	b2da      	uxtb	r2, r3
    7564:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7568:	f2c2 0304 	movt	r3, #8196	; 0x2004
    756c:	701a      	strb	r2, [r3, #0]
    756e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7572:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7576:	781b      	ldrb	r3, [r3, #0]
    7578:	2bff      	cmp	r3, #255	; 0xff
    757a:	d105      	bne.n	7588 <send_desired+0x26c>
    757c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7580:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7584:	2200      	movs	r2, #0
    7586:	701a      	strb	r2, [r3, #0]
    7588:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    758c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7590:	781b      	ldrb	r3, [r3, #0]
    7592:	461a      	mov	r2, r3
    7594:	f24b 73e4 	movw	r3, #47076	; 0xb7e4
    7598:	f2c2 0304 	movt	r3, #8196	; 0x2004
    759c:	7899      	ldrb	r1, [r3, #2]
    759e:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    75a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75a6:	5499      	strb	r1, [r3, r2]
    75a8:	4bae      	ldr	r3, [pc, #696]	; (7864 <send_desired+0x548>)
    75aa:	781a      	ldrb	r2, [r3, #0]
    75ac:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    75b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75b4:	781b      	ldrb	r3, [r3, #0]
    75b6:	4413      	add	r3, r2
    75b8:	b2da      	uxtb	r2, r3
    75ba:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    75be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75c2:	701a      	strb	r2, [r3, #0]
    75c4:	f24b 53be 	movw	r3, #46526	; 0xb5be
    75c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75cc:	781a      	ldrb	r2, [r3, #0]
    75ce:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    75d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75d6:	781b      	ldrb	r3, [r3, #0]
    75d8:	4413      	add	r3, r2
    75da:	b2da      	uxtb	r2, r3
    75dc:	f24b 53be 	movw	r3, #46526	; 0xb5be
    75e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75e4:	701a      	strb	r2, [r3, #0]
    75e6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    75ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75ee:	781b      	ldrb	r3, [r3, #0]
    75f0:	3301      	adds	r3, #1
    75f2:	b2da      	uxtb	r2, r3
    75f4:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    75f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75fc:	701a      	strb	r2, [r3, #0]
    75fe:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7602:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7606:	781b      	ldrb	r3, [r3, #0]
    7608:	2bff      	cmp	r3, #255	; 0xff
    760a:	d105      	bne.n	7618 <send_desired+0x2fc>
    760c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7610:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7614:	2200      	movs	r2, #0
    7616:	701a      	strb	r2, [r3, #0]
    7618:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    761c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7620:	781b      	ldrb	r3, [r3, #0]
    7622:	461a      	mov	r2, r3
    7624:	f24b 73e4 	movw	r3, #47076	; 0xb7e4
    7628:	f2c2 0304 	movt	r3, #8196	; 0x2004
    762c:	78d9      	ldrb	r1, [r3, #3]
    762e:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    7632:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7636:	5499      	strb	r1, [r3, r2]
    7638:	4b8b      	ldr	r3, [pc, #556]	; (7868 <send_desired+0x54c>)
    763a:	781a      	ldrb	r2, [r3, #0]
    763c:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7640:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7644:	781b      	ldrb	r3, [r3, #0]
    7646:	4413      	add	r3, r2
    7648:	b2da      	uxtb	r2, r3
    764a:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    764e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7652:	701a      	strb	r2, [r3, #0]
    7654:	f24b 53be 	movw	r3, #46526	; 0xb5be
    7658:	f2c2 0304 	movt	r3, #8196	; 0x2004
    765c:	781a      	ldrb	r2, [r3, #0]
    765e:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7662:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7666:	781b      	ldrb	r3, [r3, #0]
    7668:	4413      	add	r3, r2
    766a:	b2da      	uxtb	r2, r3
    766c:	f24b 53be 	movw	r3, #46526	; 0xb5be
    7670:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7674:	701a      	strb	r2, [r3, #0]
    7676:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    767a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    767e:	781b      	ldrb	r3, [r3, #0]
    7680:	3301      	adds	r3, #1
    7682:	b2da      	uxtb	r2, r3
    7684:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7688:	f2c2 0304 	movt	r3, #8196	; 0x2004
    768c:	701a      	strb	r2, [r3, #0]
    768e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7692:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7696:	781b      	ldrb	r3, [r3, #0]
    7698:	2bff      	cmp	r3, #255	; 0xff
    769a:	d105      	bne.n	76a8 <send_desired+0x38c>
    769c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    76a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76a4:	2200      	movs	r2, #0
    76a6:	701a      	strb	r2, [r3, #0]
    76a8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    76ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76b0:	781b      	ldrb	r3, [r3, #0]
    76b2:	461a      	mov	r2, r3
    76b4:	f24b 73e8 	movw	r3, #47080	; 0xb7e8
    76b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76bc:	7819      	ldrb	r1, [r3, #0]
    76be:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    76c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76c6:	5499      	strb	r1, [r3, r2]
    76c8:	f24b 73e8 	movw	r3, #47080	; 0xb7e8
    76cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76d0:	781a      	ldrb	r2, [r3, #0]
    76d2:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    76d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76da:	781b      	ldrb	r3, [r3, #0]
    76dc:	4413      	add	r3, r2
    76de:	b2da      	uxtb	r2, r3
    76e0:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    76e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76e8:	701a      	strb	r2, [r3, #0]
    76ea:	f24b 53be 	movw	r3, #46526	; 0xb5be
    76ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76f2:	781a      	ldrb	r2, [r3, #0]
    76f4:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    76f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76fc:	781b      	ldrb	r3, [r3, #0]
    76fe:	4413      	add	r3, r2
    7700:	b2da      	uxtb	r2, r3
    7702:	f24b 53be 	movw	r3, #46526	; 0xb5be
    7706:	f2c2 0304 	movt	r3, #8196	; 0x2004
    770a:	701a      	strb	r2, [r3, #0]
    770c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7710:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7714:	781b      	ldrb	r3, [r3, #0]
    7716:	3301      	adds	r3, #1
    7718:	b2da      	uxtb	r2, r3
    771a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    771e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7722:	701a      	strb	r2, [r3, #0]
    7724:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7728:	f2c2 0304 	movt	r3, #8196	; 0x2004
    772c:	781b      	ldrb	r3, [r3, #0]
    772e:	2bff      	cmp	r3, #255	; 0xff
    7730:	d105      	bne.n	773e <send_desired+0x422>
    7732:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7736:	f2c2 0304 	movt	r3, #8196	; 0x2004
    773a:	2200      	movs	r2, #0
    773c:	701a      	strb	r2, [r3, #0]
    773e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7742:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7746:	781b      	ldrb	r3, [r3, #0]
    7748:	461a      	mov	r2, r3
    774a:	f24b 73e8 	movw	r3, #47080	; 0xb7e8
    774e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7752:	7859      	ldrb	r1, [r3, #1]
    7754:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    7758:	f2c2 0304 	movt	r3, #8196	; 0x2004
    775c:	5499      	strb	r1, [r3, r2]
    775e:	4b43      	ldr	r3, [pc, #268]	; (786c <send_desired+0x550>)
    7760:	781a      	ldrb	r2, [r3, #0]
    7762:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7766:	f2c2 0304 	movt	r3, #8196	; 0x2004
    776a:	781b      	ldrb	r3, [r3, #0]
    776c:	4413      	add	r3, r2
    776e:	b2da      	uxtb	r2, r3
    7770:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7774:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7778:	701a      	strb	r2, [r3, #0]
    777a:	f24b 53be 	movw	r3, #46526	; 0xb5be
    777e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7782:	781a      	ldrb	r2, [r3, #0]
    7784:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7788:	f2c2 0304 	movt	r3, #8196	; 0x2004
    778c:	781b      	ldrb	r3, [r3, #0]
    778e:	4413      	add	r3, r2
    7790:	b2da      	uxtb	r2, r3
    7792:	f24b 53be 	movw	r3, #46526	; 0xb5be
    7796:	f2c2 0304 	movt	r3, #8196	; 0x2004
    779a:	701a      	strb	r2, [r3, #0]
    779c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    77a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77a4:	781b      	ldrb	r3, [r3, #0]
    77a6:	3301      	adds	r3, #1
    77a8:	b2da      	uxtb	r2, r3
    77aa:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    77ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77b2:	701a      	strb	r2, [r3, #0]
    77b4:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    77b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77bc:	781b      	ldrb	r3, [r3, #0]
    77be:	2bff      	cmp	r3, #255	; 0xff
    77c0:	d105      	bne.n	77ce <send_desired+0x4b2>
    77c2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    77c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77ca:	2200      	movs	r2, #0
    77cc:	701a      	strb	r2, [r3, #0]
    77ce:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    77d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77d6:	781b      	ldrb	r3, [r3, #0]
    77d8:	461a      	mov	r2, r3
    77da:	f24b 73e8 	movw	r3, #47080	; 0xb7e8
    77de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77e2:	7899      	ldrb	r1, [r3, #2]
    77e4:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    77e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77ec:	5499      	strb	r1, [r3, r2]
    77ee:	4b20      	ldr	r3, [pc, #128]	; (7870 <send_desired+0x554>)
    77f0:	781a      	ldrb	r2, [r3, #0]
    77f2:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    77f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77fa:	781b      	ldrb	r3, [r3, #0]
    77fc:	4413      	add	r3, r2
    77fe:	b2da      	uxtb	r2, r3
    7800:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7804:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7808:	701a      	strb	r2, [r3, #0]
    780a:	f24b 53be 	movw	r3, #46526	; 0xb5be
    780e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7812:	781a      	ldrb	r2, [r3, #0]
    7814:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7818:	f2c2 0304 	movt	r3, #8196	; 0x2004
    781c:	781b      	ldrb	r3, [r3, #0]
    781e:	4413      	add	r3, r2
    7820:	b2da      	uxtb	r2, r3
    7822:	f24b 53be 	movw	r3, #46526	; 0xb5be
    7826:	f2c2 0304 	movt	r3, #8196	; 0x2004
    782a:	701a      	strb	r2, [r3, #0]
    782c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7830:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7834:	781b      	ldrb	r3, [r3, #0]
    7836:	3301      	adds	r3, #1
    7838:	b2da      	uxtb	r2, r3
    783a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    783e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7842:	701a      	strb	r2, [r3, #0]
    7844:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7848:	f2c2 0304 	movt	r3, #8196	; 0x2004
    784c:	781b      	ldrb	r3, [r3, #0]
    784e:	2bff      	cmp	r3, #255	; 0xff
    7850:	d110      	bne.n	7874 <send_desired+0x558>
    7852:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7856:	f2c2 0304 	movt	r3, #8196	; 0x2004
    785a:	2200      	movs	r2, #0
    785c:	701a      	strb	r2, [r3, #0]
    785e:	e009      	b.n	7874 <send_desired+0x558>
    7860:	2004b7e5 	.word	0x2004b7e5
    7864:	2004b7e6 	.word	0x2004b7e6
    7868:	2004b7e7 	.word	0x2004b7e7
    786c:	2004b7e9 	.word	0x2004b7e9
    7870:	2004b7ea 	.word	0x2004b7ea
    7874:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7878:	f2c2 0304 	movt	r3, #8196	; 0x2004
    787c:	781b      	ldrb	r3, [r3, #0]
    787e:	461a      	mov	r2, r3
    7880:	f24b 73e8 	movw	r3, #47080	; 0xb7e8
    7884:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7888:	78d9      	ldrb	r1, [r3, #3]
    788a:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    788e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7892:	5499      	strb	r1, [r3, r2]
    7894:	4bd3      	ldr	r3, [pc, #844]	; (7be4 <send_desired+0x8c8>)
    7896:	781a      	ldrb	r2, [r3, #0]
    7898:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    789c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78a0:	781b      	ldrb	r3, [r3, #0]
    78a2:	4413      	add	r3, r2
    78a4:	b2da      	uxtb	r2, r3
    78a6:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    78aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78ae:	701a      	strb	r2, [r3, #0]
    78b0:	f24b 53be 	movw	r3, #46526	; 0xb5be
    78b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78b8:	781a      	ldrb	r2, [r3, #0]
    78ba:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    78be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78c2:	781b      	ldrb	r3, [r3, #0]
    78c4:	4413      	add	r3, r2
    78c6:	b2da      	uxtb	r2, r3
    78c8:	f24b 53be 	movw	r3, #46526	; 0xb5be
    78cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78d0:	701a      	strb	r2, [r3, #0]
    78d2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    78d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78da:	781b      	ldrb	r3, [r3, #0]
    78dc:	3301      	adds	r3, #1
    78de:	b2da      	uxtb	r2, r3
    78e0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    78e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78e8:	701a      	strb	r2, [r3, #0]
    78ea:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    78ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78f2:	781b      	ldrb	r3, [r3, #0]
    78f4:	2bff      	cmp	r3, #255	; 0xff
    78f6:	d105      	bne.n	7904 <send_desired+0x5e8>
    78f8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    78fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7900:	2200      	movs	r2, #0
    7902:	701a      	strb	r2, [r3, #0]
    7904:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7908:	f2c2 0304 	movt	r3, #8196	; 0x2004
    790c:	781b      	ldrb	r3, [r3, #0]
    790e:	461a      	mov	r2, r3
    7910:	f64b 0330 	movw	r3, #47152	; 0xb830
    7914:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7918:	7819      	ldrb	r1, [r3, #0]
    791a:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    791e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7922:	5499      	strb	r1, [r3, r2]
    7924:	f64b 0330 	movw	r3, #47152	; 0xb830
    7928:	f2c2 0304 	movt	r3, #8196	; 0x2004
    792c:	781a      	ldrb	r2, [r3, #0]
    792e:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7932:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7936:	781b      	ldrb	r3, [r3, #0]
    7938:	4413      	add	r3, r2
    793a:	b2da      	uxtb	r2, r3
    793c:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7940:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7944:	701a      	strb	r2, [r3, #0]
    7946:	f24b 53be 	movw	r3, #46526	; 0xb5be
    794a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    794e:	781a      	ldrb	r2, [r3, #0]
    7950:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7954:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7958:	781b      	ldrb	r3, [r3, #0]
    795a:	4413      	add	r3, r2
    795c:	b2da      	uxtb	r2, r3
    795e:	f24b 53be 	movw	r3, #46526	; 0xb5be
    7962:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7966:	701a      	strb	r2, [r3, #0]
    7968:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    796c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7970:	781b      	ldrb	r3, [r3, #0]
    7972:	3301      	adds	r3, #1
    7974:	b2da      	uxtb	r2, r3
    7976:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    797a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    797e:	701a      	strb	r2, [r3, #0]
    7980:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7984:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7988:	781b      	ldrb	r3, [r3, #0]
    798a:	2bff      	cmp	r3, #255	; 0xff
    798c:	d105      	bne.n	799a <send_desired+0x67e>
    798e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7992:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7996:	2200      	movs	r2, #0
    7998:	701a      	strb	r2, [r3, #0]
    799a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    799e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79a2:	781b      	ldrb	r3, [r3, #0]
    79a4:	461a      	mov	r2, r3
    79a6:	f64b 0330 	movw	r3, #47152	; 0xb830
    79aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79ae:	7859      	ldrb	r1, [r3, #1]
    79b0:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    79b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79b8:	5499      	strb	r1, [r3, r2]
    79ba:	4b8b      	ldr	r3, [pc, #556]	; (7be8 <send_desired+0x8cc>)
    79bc:	781a      	ldrb	r2, [r3, #0]
    79be:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    79c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79c6:	781b      	ldrb	r3, [r3, #0]
    79c8:	4413      	add	r3, r2
    79ca:	b2da      	uxtb	r2, r3
    79cc:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    79d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79d4:	701a      	strb	r2, [r3, #0]
    79d6:	f24b 53be 	movw	r3, #46526	; 0xb5be
    79da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79de:	781a      	ldrb	r2, [r3, #0]
    79e0:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    79e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79e8:	781b      	ldrb	r3, [r3, #0]
    79ea:	4413      	add	r3, r2
    79ec:	b2da      	uxtb	r2, r3
    79ee:	f24b 53be 	movw	r3, #46526	; 0xb5be
    79f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79f6:	701a      	strb	r2, [r3, #0]
    79f8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    79fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a00:	781b      	ldrb	r3, [r3, #0]
    7a02:	3301      	adds	r3, #1
    7a04:	b2da      	uxtb	r2, r3
    7a06:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7a0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a0e:	701a      	strb	r2, [r3, #0]
    7a10:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7a14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a18:	781b      	ldrb	r3, [r3, #0]
    7a1a:	2bff      	cmp	r3, #255	; 0xff
    7a1c:	d105      	bne.n	7a2a <send_desired+0x70e>
    7a1e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7a22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a26:	2200      	movs	r2, #0
    7a28:	701a      	strb	r2, [r3, #0]
    7a2a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7a2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a32:	781b      	ldrb	r3, [r3, #0]
    7a34:	461a      	mov	r2, r3
    7a36:	f64b 0330 	movw	r3, #47152	; 0xb830
    7a3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a3e:	7899      	ldrb	r1, [r3, #2]
    7a40:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    7a44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a48:	5499      	strb	r1, [r3, r2]
    7a4a:	4b68      	ldr	r3, [pc, #416]	; (7bec <send_desired+0x8d0>)
    7a4c:	781a      	ldrb	r2, [r3, #0]
    7a4e:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7a52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a56:	781b      	ldrb	r3, [r3, #0]
    7a58:	4413      	add	r3, r2
    7a5a:	b2da      	uxtb	r2, r3
    7a5c:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7a60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a64:	701a      	strb	r2, [r3, #0]
    7a66:	f24b 53be 	movw	r3, #46526	; 0xb5be
    7a6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a6e:	781a      	ldrb	r2, [r3, #0]
    7a70:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7a74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a78:	781b      	ldrb	r3, [r3, #0]
    7a7a:	4413      	add	r3, r2
    7a7c:	b2da      	uxtb	r2, r3
    7a7e:	f24b 53be 	movw	r3, #46526	; 0xb5be
    7a82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a86:	701a      	strb	r2, [r3, #0]
    7a88:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7a8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a90:	781b      	ldrb	r3, [r3, #0]
    7a92:	3301      	adds	r3, #1
    7a94:	b2da      	uxtb	r2, r3
    7a96:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7a9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a9e:	701a      	strb	r2, [r3, #0]
    7aa0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7aa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7aa8:	781b      	ldrb	r3, [r3, #0]
    7aaa:	2bff      	cmp	r3, #255	; 0xff
    7aac:	d105      	bne.n	7aba <send_desired+0x79e>
    7aae:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7ab2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ab6:	2200      	movs	r2, #0
    7ab8:	701a      	strb	r2, [r3, #0]
    7aba:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7abe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ac2:	781b      	ldrb	r3, [r3, #0]
    7ac4:	461a      	mov	r2, r3
    7ac6:	f64b 0330 	movw	r3, #47152	; 0xb830
    7aca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ace:	78d9      	ldrb	r1, [r3, #3]
    7ad0:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    7ad4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ad8:	5499      	strb	r1, [r3, r2]
    7ada:	4b45      	ldr	r3, [pc, #276]	; (7bf0 <send_desired+0x8d4>)
    7adc:	781a      	ldrb	r2, [r3, #0]
    7ade:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7ae2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ae6:	781b      	ldrb	r3, [r3, #0]
    7ae8:	4413      	add	r3, r2
    7aea:	b2da      	uxtb	r2, r3
    7aec:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7af0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7af4:	701a      	strb	r2, [r3, #0]
    7af6:	f24b 53be 	movw	r3, #46526	; 0xb5be
    7afa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7afe:	781a      	ldrb	r2, [r3, #0]
    7b00:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7b04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b08:	781b      	ldrb	r3, [r3, #0]
    7b0a:	4413      	add	r3, r2
    7b0c:	b2da      	uxtb	r2, r3
    7b0e:	f24b 53be 	movw	r3, #46526	; 0xb5be
    7b12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b16:	701a      	strb	r2, [r3, #0]
    7b18:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7b1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b20:	781b      	ldrb	r3, [r3, #0]
    7b22:	3301      	adds	r3, #1
    7b24:	b2da      	uxtb	r2, r3
    7b26:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7b2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b2e:	701a      	strb	r2, [r3, #0]
    7b30:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7b34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b38:	781b      	ldrb	r3, [r3, #0]
    7b3a:	2bff      	cmp	r3, #255	; 0xff
    7b3c:	d105      	bne.n	7b4a <send_desired+0x82e>
    7b3e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7b42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b46:	2200      	movs	r2, #0
    7b48:	701a      	strb	r2, [r3, #0]
    7b4a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7b4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b52:	781b      	ldrb	r3, [r3, #0]
    7b54:	461a      	mov	r2, r3
    7b56:	f64b 0334 	movw	r3, #47156	; 0xb834
    7b5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b5e:	7819      	ldrb	r1, [r3, #0]
    7b60:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    7b64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b68:	5499      	strb	r1, [r3, r2]
    7b6a:	f64b 0334 	movw	r3, #47156	; 0xb834
    7b6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b72:	781a      	ldrb	r2, [r3, #0]
    7b74:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7b78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b7c:	781b      	ldrb	r3, [r3, #0]
    7b7e:	4413      	add	r3, r2
    7b80:	b2da      	uxtb	r2, r3
    7b82:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7b86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b8a:	701a      	strb	r2, [r3, #0]
    7b8c:	f24b 53be 	movw	r3, #46526	; 0xb5be
    7b90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b94:	781a      	ldrb	r2, [r3, #0]
    7b96:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7b9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b9e:	781b      	ldrb	r3, [r3, #0]
    7ba0:	4413      	add	r3, r2
    7ba2:	b2da      	uxtb	r2, r3
    7ba4:	f24b 53be 	movw	r3, #46526	; 0xb5be
    7ba8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bac:	701a      	strb	r2, [r3, #0]
    7bae:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7bb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bb6:	781b      	ldrb	r3, [r3, #0]
    7bb8:	3301      	adds	r3, #1
    7bba:	b2da      	uxtb	r2, r3
    7bbc:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7bc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bc4:	701a      	strb	r2, [r3, #0]
    7bc6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7bca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bce:	781b      	ldrb	r3, [r3, #0]
    7bd0:	2bff      	cmp	r3, #255	; 0xff
    7bd2:	d10f      	bne.n	7bf4 <send_desired+0x8d8>
    7bd4:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7bd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bdc:	2200      	movs	r2, #0
    7bde:	701a      	strb	r2, [r3, #0]
    7be0:	e008      	b.n	7bf4 <send_desired+0x8d8>
    7be2:	bf00      	nop
    7be4:	2004b7eb 	.word	0x2004b7eb
    7be8:	2004b831 	.word	0x2004b831
    7bec:	2004b832 	.word	0x2004b832
    7bf0:	2004b833 	.word	0x2004b833
    7bf4:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7bf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bfc:	781b      	ldrb	r3, [r3, #0]
    7bfe:	461a      	mov	r2, r3
    7c00:	f64b 0334 	movw	r3, #47156	; 0xb834
    7c04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c08:	7859      	ldrb	r1, [r3, #1]
    7c0a:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    7c0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c12:	5499      	strb	r1, [r3, r2]
    7c14:	4bd1      	ldr	r3, [pc, #836]	; (7f5c <send_desired+0xc40>)
    7c16:	781a      	ldrb	r2, [r3, #0]
    7c18:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7c1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c20:	781b      	ldrb	r3, [r3, #0]
    7c22:	4413      	add	r3, r2
    7c24:	b2da      	uxtb	r2, r3
    7c26:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7c2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c2e:	701a      	strb	r2, [r3, #0]
    7c30:	f24b 53be 	movw	r3, #46526	; 0xb5be
    7c34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c38:	781a      	ldrb	r2, [r3, #0]
    7c3a:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7c3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c42:	781b      	ldrb	r3, [r3, #0]
    7c44:	4413      	add	r3, r2
    7c46:	b2da      	uxtb	r2, r3
    7c48:	f24b 53be 	movw	r3, #46526	; 0xb5be
    7c4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c50:	701a      	strb	r2, [r3, #0]
    7c52:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7c56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c5a:	781b      	ldrb	r3, [r3, #0]
    7c5c:	3301      	adds	r3, #1
    7c5e:	b2da      	uxtb	r2, r3
    7c60:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7c64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c68:	701a      	strb	r2, [r3, #0]
    7c6a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7c6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c72:	781b      	ldrb	r3, [r3, #0]
    7c74:	2bff      	cmp	r3, #255	; 0xff
    7c76:	d105      	bne.n	7c84 <send_desired+0x968>
    7c78:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7c7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c80:	2200      	movs	r2, #0
    7c82:	701a      	strb	r2, [r3, #0]
    7c84:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7c88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c8c:	781b      	ldrb	r3, [r3, #0]
    7c8e:	461a      	mov	r2, r3
    7c90:	f64b 0334 	movw	r3, #47156	; 0xb834
    7c94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c98:	7899      	ldrb	r1, [r3, #2]
    7c9a:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    7c9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ca2:	5499      	strb	r1, [r3, r2]
    7ca4:	4bae      	ldr	r3, [pc, #696]	; (7f60 <send_desired+0xc44>)
    7ca6:	781a      	ldrb	r2, [r3, #0]
    7ca8:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7cac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cb0:	781b      	ldrb	r3, [r3, #0]
    7cb2:	4413      	add	r3, r2
    7cb4:	b2da      	uxtb	r2, r3
    7cb6:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7cba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cbe:	701a      	strb	r2, [r3, #0]
    7cc0:	f24b 53be 	movw	r3, #46526	; 0xb5be
    7cc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cc8:	781a      	ldrb	r2, [r3, #0]
    7cca:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7cce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cd2:	781b      	ldrb	r3, [r3, #0]
    7cd4:	4413      	add	r3, r2
    7cd6:	b2da      	uxtb	r2, r3
    7cd8:	f24b 53be 	movw	r3, #46526	; 0xb5be
    7cdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ce0:	701a      	strb	r2, [r3, #0]
    7ce2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7ce6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cea:	781b      	ldrb	r3, [r3, #0]
    7cec:	3301      	adds	r3, #1
    7cee:	b2da      	uxtb	r2, r3
    7cf0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7cf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cf8:	701a      	strb	r2, [r3, #0]
    7cfa:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7cfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d02:	781b      	ldrb	r3, [r3, #0]
    7d04:	2bff      	cmp	r3, #255	; 0xff
    7d06:	d105      	bne.n	7d14 <send_desired+0x9f8>
    7d08:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7d0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d10:	2200      	movs	r2, #0
    7d12:	701a      	strb	r2, [r3, #0]
    7d14:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7d18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d1c:	781b      	ldrb	r3, [r3, #0]
    7d1e:	461a      	mov	r2, r3
    7d20:	f64b 0334 	movw	r3, #47156	; 0xb834
    7d24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d28:	78d9      	ldrb	r1, [r3, #3]
    7d2a:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    7d2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d32:	5499      	strb	r1, [r3, r2]
    7d34:	4b8b      	ldr	r3, [pc, #556]	; (7f64 <send_desired+0xc48>)
    7d36:	781a      	ldrb	r2, [r3, #0]
    7d38:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7d3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d40:	781b      	ldrb	r3, [r3, #0]
    7d42:	4413      	add	r3, r2
    7d44:	b2da      	uxtb	r2, r3
    7d46:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7d4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d4e:	701a      	strb	r2, [r3, #0]
    7d50:	f24b 53be 	movw	r3, #46526	; 0xb5be
    7d54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d58:	781a      	ldrb	r2, [r3, #0]
    7d5a:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7d5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d62:	781b      	ldrb	r3, [r3, #0]
    7d64:	4413      	add	r3, r2
    7d66:	b2da      	uxtb	r2, r3
    7d68:	f24b 53be 	movw	r3, #46526	; 0xb5be
    7d6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d70:	701a      	strb	r2, [r3, #0]
    7d72:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7d76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d7a:	781b      	ldrb	r3, [r3, #0]
    7d7c:	3301      	adds	r3, #1
    7d7e:	b2da      	uxtb	r2, r3
    7d80:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7d84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d88:	701a      	strb	r2, [r3, #0]
    7d8a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7d8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d92:	781b      	ldrb	r3, [r3, #0]
    7d94:	2bff      	cmp	r3, #255	; 0xff
    7d96:	d105      	bne.n	7da4 <send_desired+0xa88>
    7d98:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7d9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7da0:	2200      	movs	r2, #0
    7da2:	701a      	strb	r2, [r3, #0]
    7da4:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7da8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dac:	781b      	ldrb	r3, [r3, #0]
    7dae:	461a      	mov	r2, r3
    7db0:	f240 133c 	movw	r3, #316	; 0x13c
    7db4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7db8:	7819      	ldrb	r1, [r3, #0]
    7dba:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    7dbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dc2:	5499      	strb	r1, [r3, r2]
    7dc4:	f240 133c 	movw	r3, #316	; 0x13c
    7dc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7dcc:	781a      	ldrb	r2, [r3, #0]
    7dce:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7dd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dd6:	781b      	ldrb	r3, [r3, #0]
    7dd8:	4413      	add	r3, r2
    7dda:	b2da      	uxtb	r2, r3
    7ddc:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7de0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7de4:	701a      	strb	r2, [r3, #0]
    7de6:	f24b 53be 	movw	r3, #46526	; 0xb5be
    7dea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dee:	781a      	ldrb	r2, [r3, #0]
    7df0:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7df4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7df8:	781b      	ldrb	r3, [r3, #0]
    7dfa:	4413      	add	r3, r2
    7dfc:	b2da      	uxtb	r2, r3
    7dfe:	f24b 53be 	movw	r3, #46526	; 0xb5be
    7e02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e06:	701a      	strb	r2, [r3, #0]
    7e08:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7e0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e10:	781b      	ldrb	r3, [r3, #0]
    7e12:	3301      	adds	r3, #1
    7e14:	b2da      	uxtb	r2, r3
    7e16:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7e1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e1e:	701a      	strb	r2, [r3, #0]
    7e20:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7e24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e28:	781b      	ldrb	r3, [r3, #0]
    7e2a:	2bff      	cmp	r3, #255	; 0xff
    7e2c:	d105      	bne.n	7e3a <send_desired+0xb1e>
    7e2e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7e32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e36:	2200      	movs	r2, #0
    7e38:	701a      	strb	r2, [r3, #0]
    7e3a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7e3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e42:	781b      	ldrb	r3, [r3, #0]
    7e44:	461a      	mov	r2, r3
    7e46:	f240 133c 	movw	r3, #316	; 0x13c
    7e4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e4e:	7859      	ldrb	r1, [r3, #1]
    7e50:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    7e54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e58:	5499      	strb	r1, [r3, r2]
    7e5a:	4b43      	ldr	r3, [pc, #268]	; (7f68 <send_desired+0xc4c>)
    7e5c:	781a      	ldrb	r2, [r3, #0]
    7e5e:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7e62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e66:	781b      	ldrb	r3, [r3, #0]
    7e68:	4413      	add	r3, r2
    7e6a:	b2da      	uxtb	r2, r3
    7e6c:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7e70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e74:	701a      	strb	r2, [r3, #0]
    7e76:	f24b 53be 	movw	r3, #46526	; 0xb5be
    7e7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e7e:	781a      	ldrb	r2, [r3, #0]
    7e80:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7e84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e88:	781b      	ldrb	r3, [r3, #0]
    7e8a:	4413      	add	r3, r2
    7e8c:	b2da      	uxtb	r2, r3
    7e8e:	f24b 53be 	movw	r3, #46526	; 0xb5be
    7e92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e96:	701a      	strb	r2, [r3, #0]
    7e98:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7e9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ea0:	781b      	ldrb	r3, [r3, #0]
    7ea2:	3301      	adds	r3, #1
    7ea4:	b2da      	uxtb	r2, r3
    7ea6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7eaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7eae:	701a      	strb	r2, [r3, #0]
    7eb0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7eb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7eb8:	781b      	ldrb	r3, [r3, #0]
    7eba:	2bff      	cmp	r3, #255	; 0xff
    7ebc:	d105      	bne.n	7eca <send_desired+0xbae>
    7ebe:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7ec2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ec6:	2200      	movs	r2, #0
    7ec8:	701a      	strb	r2, [r3, #0]
    7eca:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7ece:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ed2:	781b      	ldrb	r3, [r3, #0]
    7ed4:	461a      	mov	r2, r3
    7ed6:	f240 133c 	movw	r3, #316	; 0x13c
    7eda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ede:	7899      	ldrb	r1, [r3, #2]
    7ee0:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    7ee4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ee8:	5499      	strb	r1, [r3, r2]
    7eea:	4b20      	ldr	r3, [pc, #128]	; (7f6c <send_desired+0xc50>)
    7eec:	781a      	ldrb	r2, [r3, #0]
    7eee:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7ef2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ef6:	781b      	ldrb	r3, [r3, #0]
    7ef8:	4413      	add	r3, r2
    7efa:	b2da      	uxtb	r2, r3
    7efc:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7f00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f04:	701a      	strb	r2, [r3, #0]
    7f06:	f24b 53be 	movw	r3, #46526	; 0xb5be
    7f0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f0e:	781a      	ldrb	r2, [r3, #0]
    7f10:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7f14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f18:	781b      	ldrb	r3, [r3, #0]
    7f1a:	4413      	add	r3, r2
    7f1c:	b2da      	uxtb	r2, r3
    7f1e:	f24b 53be 	movw	r3, #46526	; 0xb5be
    7f22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f26:	701a      	strb	r2, [r3, #0]
    7f28:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7f2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f30:	781b      	ldrb	r3, [r3, #0]
    7f32:	3301      	adds	r3, #1
    7f34:	b2da      	uxtb	r2, r3
    7f36:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7f3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f3e:	701a      	strb	r2, [r3, #0]
    7f40:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7f44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f48:	781b      	ldrb	r3, [r3, #0]
    7f4a:	2bff      	cmp	r3, #255	; 0xff
    7f4c:	d110      	bne.n	7f70 <send_desired+0xc54>
    7f4e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7f52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f56:	2200      	movs	r2, #0
    7f58:	701a      	strb	r2, [r3, #0]
    7f5a:	e009      	b.n	7f70 <send_desired+0xc54>
    7f5c:	2004b835 	.word	0x2004b835
    7f60:	2004b836 	.word	0x2004b836
    7f64:	2004b837 	.word	0x2004b837
    7f68:	2000013d 	.word	0x2000013d
    7f6c:	2000013e 	.word	0x2000013e
    7f70:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7f74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f78:	781b      	ldrb	r3, [r3, #0]
    7f7a:	461a      	mov	r2, r3
    7f7c:	f240 133c 	movw	r3, #316	; 0x13c
    7f80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f84:	78d9      	ldrb	r1, [r3, #3]
    7f86:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    7f8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f8e:	5499      	strb	r1, [r3, r2]
    7f90:	4b79      	ldr	r3, [pc, #484]	; (8178 <send_desired+0xe5c>)
    7f92:	781a      	ldrb	r2, [r3, #0]
    7f94:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7f98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f9c:	781b      	ldrb	r3, [r3, #0]
    7f9e:	4413      	add	r3, r2
    7fa0:	b2da      	uxtb	r2, r3
    7fa2:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7fa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7faa:	701a      	strb	r2, [r3, #0]
    7fac:	f24b 53be 	movw	r3, #46526	; 0xb5be
    7fb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fb4:	781a      	ldrb	r2, [r3, #0]
    7fb6:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7fba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fbe:	781b      	ldrb	r3, [r3, #0]
    7fc0:	4413      	add	r3, r2
    7fc2:	b2da      	uxtb	r2, r3
    7fc4:	f24b 53be 	movw	r3, #46526	; 0xb5be
    7fc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fcc:	701a      	strb	r2, [r3, #0]
    7fce:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7fd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fd6:	781b      	ldrb	r3, [r3, #0]
    7fd8:	3301      	adds	r3, #1
    7fda:	b2da      	uxtb	r2, r3
    7fdc:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7fe0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fe4:	701a      	strb	r2, [r3, #0]
    7fe6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7fea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fee:	781b      	ldrb	r3, [r3, #0]
    7ff0:	2bff      	cmp	r3, #255	; 0xff
    7ff2:	d105      	bne.n	8000 <send_desired+0xce4>
    7ff4:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7ff8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ffc:	2200      	movs	r2, #0
    7ffe:	701a      	strb	r2, [r3, #0]
    8000:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8004:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8008:	781b      	ldrb	r3, [r3, #0]
    800a:	461a      	mov	r2, r3
    800c:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8010:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8014:	7819      	ldrb	r1, [r3, #0]
    8016:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    801a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    801e:	5499      	strb	r1, [r3, r2]
    8020:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8024:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8028:	781b      	ldrb	r3, [r3, #0]
    802a:	3301      	adds	r3, #1
    802c:	b2da      	uxtb	r2, r3
    802e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8032:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8036:	701a      	strb	r2, [r3, #0]
    8038:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    803c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8040:	781b      	ldrb	r3, [r3, #0]
    8042:	2bff      	cmp	r3, #255	; 0xff
    8044:	d105      	bne.n	8052 <send_desired+0xd36>
    8046:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    804a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    804e:	2200      	movs	r2, #0
    8050:	701a      	strb	r2, [r3, #0]
    8052:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8056:	f2c2 0304 	movt	r3, #8196	; 0x2004
    805a:	781b      	ldrb	r3, [r3, #0]
    805c:	461a      	mov	r2, r3
    805e:	f24b 53be 	movw	r3, #46526	; 0xb5be
    8062:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8066:	7819      	ldrb	r1, [r3, #0]
    8068:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    806c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8070:	5499      	strb	r1, [r3, r2]
    8072:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8076:	f2c2 0304 	movt	r3, #8196	; 0x2004
    807a:	781b      	ldrb	r3, [r3, #0]
    807c:	3301      	adds	r3, #1
    807e:	b2da      	uxtb	r2, r3
    8080:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8084:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8088:	701a      	strb	r2, [r3, #0]
    808a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    808e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8092:	781b      	ldrb	r3, [r3, #0]
    8094:	2bff      	cmp	r3, #255	; 0xff
    8096:	d105      	bne.n	80a4 <send_desired+0xd88>
    8098:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    809c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80a0:	2200      	movs	r2, #0
    80a2:	701a      	strb	r2, [r3, #0]
    80a4:	f248 0339 	movw	r3, #32825	; 0x8039
    80a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80ac:	781b      	ldrb	r3, [r3, #0]
    80ae:	b2db      	uxtb	r3, r3
    80b0:	f003 0310 	and.w	r3, r3, #16
    80b4:	2b00      	cmp	r3, #0
    80b6:	d15a      	bne.n	816e <send_desired+0xe52>
    80b8:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    80bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80c0:	781b      	ldrb	r3, [r3, #0]
    80c2:	b2db      	uxtb	r3, r3
    80c4:	461a      	mov	r2, r3
    80c6:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    80ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80ce:	5c9a      	ldrb	r2, [r3, r2]
    80d0:	f24b 53bb 	movw	r3, #46523	; 0xb5bb
    80d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80d8:	701a      	strb	r2, [r3, #0]
    80da:	f24b 53bc 	movw	r3, #46524	; 0xb5bc
    80de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80e2:	2200      	movs	r2, #0
    80e4:	701a      	strb	r2, [r3, #0]
    80e6:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    80ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80ee:	781b      	ldrb	r3, [r3, #0]
    80f0:	b2db      	uxtb	r3, r3
    80f2:	3301      	adds	r3, #1
    80f4:	b2da      	uxtb	r2, r3
    80f6:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    80fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80fe:	701a      	strb	r2, [r3, #0]
    8100:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    8104:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8108:	781b      	ldrb	r3, [r3, #0]
    810a:	b2db      	uxtb	r3, r3
    810c:	2bff      	cmp	r3, #255	; 0xff
    810e:	d105      	bne.n	811c <send_desired+0xe00>
    8110:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    8114:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8118:	2200      	movs	r2, #0
    811a:	701a      	strb	r2, [r3, #0]
    811c:	f248 0338 	movw	r3, #32824	; 0x8038
    8120:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8124:	f248 0238 	movw	r2, #32824	; 0x8038
    8128:	f2c2 0200 	movt	r2, #8192	; 0x2000
    812c:	7812      	ldrb	r2, [r2, #0]
    812e:	b2d2      	uxtb	r2, r2
    8130:	f042 0201 	orr.w	r2, r2, #1
    8134:	b2d2      	uxtb	r2, r2
    8136:	701a      	strb	r2, [r3, #0]
    8138:	f248 0339 	movw	r3, #32825	; 0x8039
    813c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8140:	f248 0239 	movw	r2, #32825	; 0x8039
    8144:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8148:	7812      	ldrb	r2, [r2, #0]
    814a:	b2d2      	uxtb	r2, r2
    814c:	f042 0210 	orr.w	r2, r2, #16
    8150:	b2d2      	uxtb	r2, r2
    8152:	701a      	strb	r2, [r3, #0]
    8154:	e00b      	b.n	816e <send_desired+0xe52>
    8156:	f24b 43b8 	movw	r3, #46264	; 0xb4b8
    815a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    815e:	781b      	ldrb	r3, [r3, #0]
    8160:	3301      	adds	r3, #1
    8162:	b2da      	uxtb	r2, r3
    8164:	f24b 43b8 	movw	r3, #46264	; 0xb4b8
    8168:	f2c2 0304 	movt	r3, #8196	; 0x2004
    816c:	701a      	strb	r2, [r3, #0]
}
    816e:	46bd      	mov	sp, r7
    8170:	f85d 7b04 	ldr.w	r7, [sp], #4
    8174:	4770      	bx	lr
    8176:	bf00      	nop
    8178:	2000013f 	.word	0x2000013f

0000817c <send_bat>:
void send_bat(void){  //2000ms
    817c:	b480      	push	{r7}
    817e:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 20 == 8) PERIODIC_SEND_BAT();}
    8180:	f24b 43b1 	movw	r3, #46257	; 0xb4b1
    8184:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8188:	781a      	ldrb	r2, [r3, #0]
    818a:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    818e:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    8192:	fba3 1302 	umull	r1, r3, r3, r2
    8196:	0919      	lsrs	r1, r3, #4
    8198:	460b      	mov	r3, r1
    819a:	009b      	lsls	r3, r3, #2
    819c:	440b      	add	r3, r1
    819e:	009b      	lsls	r3, r3, #2
    81a0:	1ad3      	subs	r3, r2, r3
    81a2:	b2db      	uxtb	r3, r3
    81a4:	2b08      	cmp	r3, #8
    81a6:	f040 839a 	bne.w	88de <send_bat+0x762>
    81aa:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    81ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81b2:	781a      	ldrb	r2, [r3, #0]
    81b4:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    81b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81bc:	781b      	ldrb	r3, [r3, #0]
    81be:	b2db      	uxtb	r3, r3
    81c0:	429a      	cmp	r2, r3
    81c2:	d313      	bcc.n	81ec <send_bat+0x70>
    81c4:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    81c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81cc:	781b      	ldrb	r3, [r3, #0]
    81ce:	b2db      	uxtb	r3, r3
    81d0:	461a      	mov	r2, r3
    81d2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    81d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81da:	781b      	ldrb	r3, [r3, #0]
    81dc:	1ad3      	subs	r3, r2, r3
    81de:	33ff      	adds	r3, #255	; 0xff
    81e0:	2b0c      	cmp	r3, #12
    81e2:	bfd4      	ite	le
    81e4:	2300      	movle	r3, #0
    81e6:	2301      	movgt	r3, #1
    81e8:	b2db      	uxtb	r3, r3
    81ea:	e011      	b.n	8210 <send_bat+0x94>
    81ec:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    81f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81f4:	781b      	ldrb	r3, [r3, #0]
    81f6:	b2db      	uxtb	r3, r3
    81f8:	461a      	mov	r2, r3
    81fa:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    81fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8202:	781b      	ldrb	r3, [r3, #0]
    8204:	1ad3      	subs	r3, r2, r3
    8206:	2b0c      	cmp	r3, #12
    8208:	bfd4      	ite	le
    820a:	2300      	movle	r3, #0
    820c:	2301      	movgt	r3, #1
    820e:	b2db      	uxtb	r3, r3
    8210:	2b00      	cmp	r3, #0
    8212:	f000 8358 	beq.w	88c6 <send_bat+0x74a>
    8216:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    821a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    821e:	781b      	ldrb	r3, [r3, #0]
    8220:	461a      	mov	r2, r3
    8222:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    8226:	f2c2 0304 	movt	r3, #8196	; 0x2004
    822a:	2105      	movs	r1, #5
    822c:	5499      	strb	r1, [r3, r2]
    822e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8232:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8236:	781b      	ldrb	r3, [r3, #0]
    8238:	3301      	adds	r3, #1
    823a:	b2da      	uxtb	r2, r3
    823c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8240:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8244:	701a      	strb	r2, [r3, #0]
    8246:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    824a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    824e:	781b      	ldrb	r3, [r3, #0]
    8250:	2bff      	cmp	r3, #255	; 0xff
    8252:	d105      	bne.n	8260 <send_bat+0xe4>
    8254:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8258:	f2c2 0304 	movt	r3, #8196	; 0x2004
    825c:	2200      	movs	r2, #0
    825e:	701a      	strb	r2, [r3, #0]
    8260:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8264:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8268:	781b      	ldrb	r3, [r3, #0]
    826a:	461a      	mov	r2, r3
    826c:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    8270:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8274:	210c      	movs	r1, #12
    8276:	5499      	strb	r1, [r3, r2]
    8278:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    827c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8280:	781b      	ldrb	r3, [r3, #0]
    8282:	3301      	adds	r3, #1
    8284:	b2da      	uxtb	r2, r3
    8286:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    828a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    828e:	701a      	strb	r2, [r3, #0]
    8290:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8294:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8298:	781b      	ldrb	r3, [r3, #0]
    829a:	2bff      	cmp	r3, #255	; 0xff
    829c:	d105      	bne.n	82aa <send_bat+0x12e>
    829e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    82a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82a6:	2200      	movs	r2, #0
    82a8:	701a      	strb	r2, [r3, #0]
    82aa:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    82ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82b2:	220c      	movs	r2, #12
    82b4:	701a      	strb	r2, [r3, #0]
    82b6:	f24b 53be 	movw	r3, #46526	; 0xb5be
    82ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82be:	220c      	movs	r2, #12
    82c0:	701a      	strb	r2, [r3, #0]
    82c2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    82c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82ca:	781b      	ldrb	r3, [r3, #0]
    82cc:	461a      	mov	r2, r3
    82ce:	f24b 43a2 	movw	r3, #46242	; 0xb4a2
    82d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82d6:	7819      	ldrb	r1, [r3, #0]
    82d8:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    82dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82e0:	5499      	strb	r1, [r3, r2]
    82e2:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    82e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82ea:	781a      	ldrb	r2, [r3, #0]
    82ec:	f24b 43a2 	movw	r3, #46242	; 0xb4a2
    82f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82f4:	781b      	ldrb	r3, [r3, #0]
    82f6:	4413      	add	r3, r2
    82f8:	b2da      	uxtb	r2, r3
    82fa:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    82fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8302:	701a      	strb	r2, [r3, #0]
    8304:	f24b 53be 	movw	r3, #46526	; 0xb5be
    8308:	f2c2 0304 	movt	r3, #8196	; 0x2004
    830c:	781a      	ldrb	r2, [r3, #0]
    830e:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8312:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8316:	781b      	ldrb	r3, [r3, #0]
    8318:	4413      	add	r3, r2
    831a:	b2da      	uxtb	r2, r3
    831c:	f24b 53be 	movw	r3, #46526	; 0xb5be
    8320:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8324:	701a      	strb	r2, [r3, #0]
    8326:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    832a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    832e:	781b      	ldrb	r3, [r3, #0]
    8330:	3301      	adds	r3, #1
    8332:	b2da      	uxtb	r2, r3
    8334:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8338:	f2c2 0304 	movt	r3, #8196	; 0x2004
    833c:	701a      	strb	r2, [r3, #0]
    833e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8342:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8346:	781b      	ldrb	r3, [r3, #0]
    8348:	2bff      	cmp	r3, #255	; 0xff
    834a:	d105      	bne.n	8358 <send_bat+0x1dc>
    834c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8350:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8354:	2200      	movs	r2, #0
    8356:	701a      	strb	r2, [r3, #0]
    8358:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    835c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8360:	781b      	ldrb	r3, [r3, #0]
    8362:	461a      	mov	r2, r3
    8364:	f64b 239c 	movw	r3, #47772	; 0xba9c
    8368:	f2c2 0304 	movt	r3, #8196	; 0x2004
    836c:	7819      	ldrb	r1, [r3, #0]
    836e:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    8372:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8376:	5499      	strb	r1, [r3, r2]
    8378:	f64b 239c 	movw	r3, #47772	; 0xba9c
    837c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8380:	781a      	ldrb	r2, [r3, #0]
    8382:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8386:	f2c2 0304 	movt	r3, #8196	; 0x2004
    838a:	781b      	ldrb	r3, [r3, #0]
    838c:	4413      	add	r3, r2
    838e:	b2da      	uxtb	r2, r3
    8390:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8394:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8398:	701a      	strb	r2, [r3, #0]
    839a:	f24b 53be 	movw	r3, #46526	; 0xb5be
    839e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83a2:	781a      	ldrb	r2, [r3, #0]
    83a4:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    83a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83ac:	781b      	ldrb	r3, [r3, #0]
    83ae:	4413      	add	r3, r2
    83b0:	b2da      	uxtb	r2, r3
    83b2:	f24b 53be 	movw	r3, #46526	; 0xb5be
    83b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83ba:	701a      	strb	r2, [r3, #0]
    83bc:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    83c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83c4:	781b      	ldrb	r3, [r3, #0]
    83c6:	3301      	adds	r3, #1
    83c8:	b2da      	uxtb	r2, r3
    83ca:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    83ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83d2:	701a      	strb	r2, [r3, #0]
    83d4:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    83d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83dc:	781b      	ldrb	r3, [r3, #0]
    83de:	2bff      	cmp	r3, #255	; 0xff
    83e0:	d105      	bne.n	83ee <send_bat+0x272>
    83e2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    83e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83ea:	2200      	movs	r2, #0
    83ec:	701a      	strb	r2, [r3, #0]
    83ee:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    83f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83f6:	781b      	ldrb	r3, [r3, #0]
    83f8:	461a      	mov	r2, r3
    83fa:	f64b 239c 	movw	r3, #47772	; 0xba9c
    83fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8402:	7859      	ldrb	r1, [r3, #1]
    8404:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    8408:	f2c2 0304 	movt	r3, #8196	; 0x2004
    840c:	5499      	strb	r1, [r3, r2]
    840e:	4bd5      	ldr	r3, [pc, #852]	; (8764 <send_bat+0x5e8>)
    8410:	781a      	ldrb	r2, [r3, #0]
    8412:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8416:	f2c2 0304 	movt	r3, #8196	; 0x2004
    841a:	781b      	ldrb	r3, [r3, #0]
    841c:	4413      	add	r3, r2
    841e:	b2da      	uxtb	r2, r3
    8420:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8424:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8428:	701a      	strb	r2, [r3, #0]
    842a:	f24b 53be 	movw	r3, #46526	; 0xb5be
    842e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8432:	781a      	ldrb	r2, [r3, #0]
    8434:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8438:	f2c2 0304 	movt	r3, #8196	; 0x2004
    843c:	781b      	ldrb	r3, [r3, #0]
    843e:	4413      	add	r3, r2
    8440:	b2da      	uxtb	r2, r3
    8442:	f24b 53be 	movw	r3, #46526	; 0xb5be
    8446:	f2c2 0304 	movt	r3, #8196	; 0x2004
    844a:	701a      	strb	r2, [r3, #0]
    844c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8450:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8454:	781b      	ldrb	r3, [r3, #0]
    8456:	3301      	adds	r3, #1
    8458:	b2da      	uxtb	r2, r3
    845a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    845e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8462:	701a      	strb	r2, [r3, #0]
    8464:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8468:	f2c2 0304 	movt	r3, #8196	; 0x2004
    846c:	781b      	ldrb	r3, [r3, #0]
    846e:	2bff      	cmp	r3, #255	; 0xff
    8470:	d105      	bne.n	847e <send_bat+0x302>
    8472:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8476:	f2c2 0304 	movt	r3, #8196	; 0x2004
    847a:	2200      	movs	r2, #0
    847c:	701a      	strb	r2, [r3, #0]
    847e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8482:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8486:	781b      	ldrb	r3, [r3, #0]
    8488:	461a      	mov	r2, r3
    848a:	f24b 43a5 	movw	r3, #46245	; 0xb4a5
    848e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8492:	7819      	ldrb	r1, [r3, #0]
    8494:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    8498:	f2c2 0304 	movt	r3, #8196	; 0x2004
    849c:	5499      	strb	r1, [r3, r2]
    849e:	f24b 43a5 	movw	r3, #46245	; 0xb4a5
    84a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84a6:	781a      	ldrb	r2, [r3, #0]
    84a8:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    84ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84b0:	781b      	ldrb	r3, [r3, #0]
    84b2:	4413      	add	r3, r2
    84b4:	b2da      	uxtb	r2, r3
    84b6:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    84ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84be:	701a      	strb	r2, [r3, #0]
    84c0:	f24b 53be 	movw	r3, #46526	; 0xb5be
    84c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84c8:	781a      	ldrb	r2, [r3, #0]
    84ca:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    84ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84d2:	781b      	ldrb	r3, [r3, #0]
    84d4:	4413      	add	r3, r2
    84d6:	b2da      	uxtb	r2, r3
    84d8:	f24b 53be 	movw	r3, #46526	; 0xb5be
    84dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84e0:	701a      	strb	r2, [r3, #0]
    84e2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    84e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84ea:	781b      	ldrb	r3, [r3, #0]
    84ec:	3301      	adds	r3, #1
    84ee:	b2da      	uxtb	r2, r3
    84f0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    84f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84f8:	701a      	strb	r2, [r3, #0]
    84fa:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    84fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8502:	781b      	ldrb	r3, [r3, #0]
    8504:	2bff      	cmp	r3, #255	; 0xff
    8506:	d105      	bne.n	8514 <send_bat+0x398>
    8508:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    850c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8510:	2200      	movs	r2, #0
    8512:	701a      	strb	r2, [r3, #0]
    8514:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8518:	f2c2 0304 	movt	r3, #8196	; 0x2004
    851c:	781b      	ldrb	r3, [r3, #0]
    851e:	461a      	mov	r2, r3
    8520:	f64b 0326 	movw	r3, #47142	; 0xb826
    8524:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8528:	7819      	ldrb	r1, [r3, #0]
    852a:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    852e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8532:	5499      	strb	r1, [r3, r2]
    8534:	f64b 0326 	movw	r3, #47142	; 0xb826
    8538:	f2c2 0304 	movt	r3, #8196	; 0x2004
    853c:	781a      	ldrb	r2, [r3, #0]
    853e:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8542:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8546:	781b      	ldrb	r3, [r3, #0]
    8548:	4413      	add	r3, r2
    854a:	b2da      	uxtb	r2, r3
    854c:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8550:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8554:	701a      	strb	r2, [r3, #0]
    8556:	f24b 53be 	movw	r3, #46526	; 0xb5be
    855a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    855e:	781a      	ldrb	r2, [r3, #0]
    8560:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8564:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8568:	781b      	ldrb	r3, [r3, #0]
    856a:	4413      	add	r3, r2
    856c:	b2da      	uxtb	r2, r3
    856e:	f24b 53be 	movw	r3, #46526	; 0xb5be
    8572:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8576:	701a      	strb	r2, [r3, #0]
    8578:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    857c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8580:	781b      	ldrb	r3, [r3, #0]
    8582:	3301      	adds	r3, #1
    8584:	b2da      	uxtb	r2, r3
    8586:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    858a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    858e:	701a      	strb	r2, [r3, #0]
    8590:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8594:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8598:	781b      	ldrb	r3, [r3, #0]
    859a:	2bff      	cmp	r3, #255	; 0xff
    859c:	d105      	bne.n	85aa <send_bat+0x42e>
    859e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    85a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85a6:	2200      	movs	r2, #0
    85a8:	701a      	strb	r2, [r3, #0]
    85aa:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    85ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85b2:	781b      	ldrb	r3, [r3, #0]
    85b4:	461a      	mov	r2, r3
    85b6:	f64b 0326 	movw	r3, #47142	; 0xb826
    85ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85be:	7859      	ldrb	r1, [r3, #1]
    85c0:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    85c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85c8:	5499      	strb	r1, [r3, r2]
    85ca:	4b67      	ldr	r3, [pc, #412]	; (8768 <send_bat+0x5ec>)
    85cc:	781a      	ldrb	r2, [r3, #0]
    85ce:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    85d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85d6:	781b      	ldrb	r3, [r3, #0]
    85d8:	4413      	add	r3, r2
    85da:	b2da      	uxtb	r2, r3
    85dc:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    85e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85e4:	701a      	strb	r2, [r3, #0]
    85e6:	f24b 53be 	movw	r3, #46526	; 0xb5be
    85ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85ee:	781a      	ldrb	r2, [r3, #0]
    85f0:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    85f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85f8:	781b      	ldrb	r3, [r3, #0]
    85fa:	4413      	add	r3, r2
    85fc:	b2da      	uxtb	r2, r3
    85fe:	f24b 53be 	movw	r3, #46526	; 0xb5be
    8602:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8606:	701a      	strb	r2, [r3, #0]
    8608:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    860c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8610:	781b      	ldrb	r3, [r3, #0]
    8612:	3301      	adds	r3, #1
    8614:	b2da      	uxtb	r2, r3
    8616:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    861a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    861e:	701a      	strb	r2, [r3, #0]
    8620:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8624:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8628:	781b      	ldrb	r3, [r3, #0]
    862a:	2bff      	cmp	r3, #255	; 0xff
    862c:	d105      	bne.n	863a <send_bat+0x4be>
    862e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8632:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8636:	2200      	movs	r2, #0
    8638:	701a      	strb	r2, [r3, #0]
    863a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    863e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8642:	781b      	ldrb	r3, [r3, #0]
    8644:	461a      	mov	r2, r3
    8646:	f64b 0324 	movw	r3, #47140	; 0xb824
    864a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    864e:	7819      	ldrb	r1, [r3, #0]
    8650:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    8654:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8658:	5499      	strb	r1, [r3, r2]
    865a:	f64b 0324 	movw	r3, #47140	; 0xb824
    865e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8662:	781a      	ldrb	r2, [r3, #0]
    8664:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8668:	f2c2 0304 	movt	r3, #8196	; 0x2004
    866c:	781b      	ldrb	r3, [r3, #0]
    866e:	4413      	add	r3, r2
    8670:	b2da      	uxtb	r2, r3
    8672:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8676:	f2c2 0304 	movt	r3, #8196	; 0x2004
    867a:	701a      	strb	r2, [r3, #0]
    867c:	f24b 53be 	movw	r3, #46526	; 0xb5be
    8680:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8684:	781a      	ldrb	r2, [r3, #0]
    8686:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    868a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    868e:	781b      	ldrb	r3, [r3, #0]
    8690:	4413      	add	r3, r2
    8692:	b2da      	uxtb	r2, r3
    8694:	f24b 53be 	movw	r3, #46526	; 0xb5be
    8698:	f2c2 0304 	movt	r3, #8196	; 0x2004
    869c:	701a      	strb	r2, [r3, #0]
    869e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    86a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86a6:	781b      	ldrb	r3, [r3, #0]
    86a8:	3301      	adds	r3, #1
    86aa:	b2da      	uxtb	r2, r3
    86ac:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    86b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86b4:	701a      	strb	r2, [r3, #0]
    86b6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    86ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86be:	781b      	ldrb	r3, [r3, #0]
    86c0:	2bff      	cmp	r3, #255	; 0xff
    86c2:	d105      	bne.n	86d0 <send_bat+0x554>
    86c4:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    86c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86cc:	2200      	movs	r2, #0
    86ce:	701a      	strb	r2, [r3, #0]
    86d0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    86d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86d8:	781b      	ldrb	r3, [r3, #0]
    86da:	461a      	mov	r2, r3
    86dc:	f64b 0324 	movw	r3, #47140	; 0xb824
    86e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86e4:	7859      	ldrb	r1, [r3, #1]
    86e6:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    86ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86ee:	5499      	strb	r1, [r3, r2]
    86f0:	4b1e      	ldr	r3, [pc, #120]	; (876c <send_bat+0x5f0>)
    86f2:	781a      	ldrb	r2, [r3, #0]
    86f4:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    86f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86fc:	781b      	ldrb	r3, [r3, #0]
    86fe:	4413      	add	r3, r2
    8700:	b2da      	uxtb	r2, r3
    8702:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8706:	f2c2 0304 	movt	r3, #8196	; 0x2004
    870a:	701a      	strb	r2, [r3, #0]
    870c:	f24b 53be 	movw	r3, #46526	; 0xb5be
    8710:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8714:	781a      	ldrb	r2, [r3, #0]
    8716:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    871a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    871e:	781b      	ldrb	r3, [r3, #0]
    8720:	4413      	add	r3, r2
    8722:	b2da      	uxtb	r2, r3
    8724:	f24b 53be 	movw	r3, #46526	; 0xb5be
    8728:	f2c2 0304 	movt	r3, #8196	; 0x2004
    872c:	701a      	strb	r2, [r3, #0]
    872e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8732:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8736:	781b      	ldrb	r3, [r3, #0]
    8738:	3301      	adds	r3, #1
    873a:	b2da      	uxtb	r2, r3
    873c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8740:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8744:	701a      	strb	r2, [r3, #0]
    8746:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    874a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    874e:	781b      	ldrb	r3, [r3, #0]
    8750:	2bff      	cmp	r3, #255	; 0xff
    8752:	d10d      	bne.n	8770 <send_bat+0x5f4>
    8754:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8758:	f2c2 0304 	movt	r3, #8196	; 0x2004
    875c:	2200      	movs	r2, #0
    875e:	701a      	strb	r2, [r3, #0]
    8760:	e006      	b.n	8770 <send_bat+0x5f4>
    8762:	bf00      	nop
    8764:	2004ba9d 	.word	0x2004ba9d
    8768:	2004b827 	.word	0x2004b827
    876c:	2004b825 	.word	0x2004b825
    8770:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8774:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8778:	781b      	ldrb	r3, [r3, #0]
    877a:	461a      	mov	r2, r3
    877c:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8780:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8784:	7819      	ldrb	r1, [r3, #0]
    8786:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    878a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    878e:	5499      	strb	r1, [r3, r2]
    8790:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8794:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8798:	781b      	ldrb	r3, [r3, #0]
    879a:	3301      	adds	r3, #1
    879c:	b2da      	uxtb	r2, r3
    879e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    87a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87a6:	701a      	strb	r2, [r3, #0]
    87a8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    87ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87b0:	781b      	ldrb	r3, [r3, #0]
    87b2:	2bff      	cmp	r3, #255	; 0xff
    87b4:	d105      	bne.n	87c2 <send_bat+0x646>
    87b6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    87ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87be:	2200      	movs	r2, #0
    87c0:	701a      	strb	r2, [r3, #0]
    87c2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    87c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87ca:	781b      	ldrb	r3, [r3, #0]
    87cc:	461a      	mov	r2, r3
    87ce:	f24b 53be 	movw	r3, #46526	; 0xb5be
    87d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87d6:	7819      	ldrb	r1, [r3, #0]
    87d8:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    87dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87e0:	5499      	strb	r1, [r3, r2]
    87e2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    87e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87ea:	781b      	ldrb	r3, [r3, #0]
    87ec:	3301      	adds	r3, #1
    87ee:	b2da      	uxtb	r2, r3
    87f0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    87f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87f8:	701a      	strb	r2, [r3, #0]
    87fa:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    87fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8802:	781b      	ldrb	r3, [r3, #0]
    8804:	2bff      	cmp	r3, #255	; 0xff
    8806:	d105      	bne.n	8814 <send_bat+0x698>
    8808:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    880c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8810:	2200      	movs	r2, #0
    8812:	701a      	strb	r2, [r3, #0]
    8814:	f248 0339 	movw	r3, #32825	; 0x8039
    8818:	f2c2 0300 	movt	r3, #8192	; 0x2000
    881c:	781b      	ldrb	r3, [r3, #0]
    881e:	b2db      	uxtb	r3, r3
    8820:	f003 0310 	and.w	r3, r3, #16
    8824:	2b00      	cmp	r3, #0
    8826:	d15a      	bne.n	88de <send_bat+0x762>
    8828:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    882c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8830:	781b      	ldrb	r3, [r3, #0]
    8832:	b2db      	uxtb	r3, r3
    8834:	461a      	mov	r2, r3
    8836:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    883a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    883e:	5c9a      	ldrb	r2, [r3, r2]
    8840:	f24b 53bb 	movw	r3, #46523	; 0xb5bb
    8844:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8848:	701a      	strb	r2, [r3, #0]
    884a:	f24b 53bc 	movw	r3, #46524	; 0xb5bc
    884e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8852:	2200      	movs	r2, #0
    8854:	701a      	strb	r2, [r3, #0]
    8856:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    885a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    885e:	781b      	ldrb	r3, [r3, #0]
    8860:	b2db      	uxtb	r3, r3
    8862:	3301      	adds	r3, #1
    8864:	b2da      	uxtb	r2, r3
    8866:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    886a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    886e:	701a      	strb	r2, [r3, #0]
    8870:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    8874:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8878:	781b      	ldrb	r3, [r3, #0]
    887a:	b2db      	uxtb	r3, r3
    887c:	2bff      	cmp	r3, #255	; 0xff
    887e:	d105      	bne.n	888c <send_bat+0x710>
    8880:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    8884:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8888:	2200      	movs	r2, #0
    888a:	701a      	strb	r2, [r3, #0]
    888c:	f248 0338 	movw	r3, #32824	; 0x8038
    8890:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8894:	f248 0238 	movw	r2, #32824	; 0x8038
    8898:	f2c2 0200 	movt	r2, #8192	; 0x2000
    889c:	7812      	ldrb	r2, [r2, #0]
    889e:	b2d2      	uxtb	r2, r2
    88a0:	f042 0201 	orr.w	r2, r2, #1
    88a4:	b2d2      	uxtb	r2, r2
    88a6:	701a      	strb	r2, [r3, #0]
    88a8:	f248 0339 	movw	r3, #32825	; 0x8039
    88ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88b0:	f248 0239 	movw	r2, #32825	; 0x8039
    88b4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    88b8:	7812      	ldrb	r2, [r2, #0]
    88ba:	b2d2      	uxtb	r2, r2
    88bc:	f042 0210 	orr.w	r2, r2, #16
    88c0:	b2d2      	uxtb	r2, r2
    88c2:	701a      	strb	r2, [r3, #0]
    88c4:	e00b      	b.n	88de <send_bat+0x762>
    88c6:	f24b 43b8 	movw	r3, #46264	; 0xb4b8
    88ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88ce:	781b      	ldrb	r3, [r3, #0]
    88d0:	3301      	adds	r3, #1
    88d2:	b2da      	uxtb	r2, r3
    88d4:	f24b 43b8 	movw	r3, #46264	; 0xb4b8
    88d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88dc:	701a      	strb	r2, [r3, #0]
}
    88de:	46bd      	mov	sp, r7
    88e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    88e4:	4770      	bx	lr
    88e6:	bf00      	nop

000088e8 <send_climb>:
void send_climb(void){  //2000ms
    88e8:	b480      	push	{r7}
    88ea:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 20 == 18) PERIODIC_SEND_CLIMB_PID();}
    88ec:	f24b 43b1 	movw	r3, #46257	; 0xb4b1
    88f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88f4:	781a      	ldrb	r2, [r3, #0]
    88f6:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    88fa:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    88fe:	fba3 1302 	umull	r1, r3, r3, r2
    8902:	0919      	lsrs	r1, r3, #4
    8904:	460b      	mov	r3, r1
    8906:	009b      	lsls	r3, r3, #2
    8908:	440b      	add	r3, r1
    890a:	009b      	lsls	r3, r3, #2
    890c:	1ad3      	subs	r3, r2, r3
    890e:	b2db      	uxtb	r3, r3
    8910:	2b12      	cmp	r3, #18
    8912:	f040 8554 	bne.w	93be <send_climb+0xad6>
    8916:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    891a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    891e:	781a      	ldrb	r2, [r3, #0]
    8920:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    8924:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8928:	781b      	ldrb	r3, [r3, #0]
    892a:	b2db      	uxtb	r3, r3
    892c:	429a      	cmp	r2, r3
    892e:	d313      	bcc.n	8958 <send_climb+0x70>
    8930:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    8934:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8938:	781b      	ldrb	r3, [r3, #0]
    893a:	b2db      	uxtb	r3, r3
    893c:	461a      	mov	r2, r3
    893e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8942:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8946:	781b      	ldrb	r3, [r3, #0]
    8948:	1ad3      	subs	r3, r2, r3
    894a:	33ff      	adds	r3, #255	; 0xff
    894c:	2b12      	cmp	r3, #18
    894e:	bfd4      	ite	le
    8950:	2300      	movle	r3, #0
    8952:	2301      	movgt	r3, #1
    8954:	b2db      	uxtb	r3, r3
    8956:	e011      	b.n	897c <send_climb+0x94>
    8958:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    895c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8960:	781b      	ldrb	r3, [r3, #0]
    8962:	b2db      	uxtb	r3, r3
    8964:	461a      	mov	r2, r3
    8966:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    896a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    896e:	781b      	ldrb	r3, [r3, #0]
    8970:	1ad3      	subs	r3, r2, r3
    8972:	2b12      	cmp	r3, #18
    8974:	bfd4      	ite	le
    8976:	2300      	movle	r3, #0
    8978:	2301      	movgt	r3, #1
    897a:	b2db      	uxtb	r3, r3
    897c:	2b00      	cmp	r3, #0
    897e:	f000 8512 	beq.w	93a6 <send_climb+0xabe>
    8982:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8986:	f2c2 0304 	movt	r3, #8196	; 0x2004
    898a:	781b      	ldrb	r3, [r3, #0]
    898c:	461a      	mov	r2, r3
    898e:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    8992:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8996:	2105      	movs	r1, #5
    8998:	5499      	strb	r1, [r3, r2]
    899a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    899e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89a2:	781b      	ldrb	r3, [r3, #0]
    89a4:	3301      	adds	r3, #1
    89a6:	b2da      	uxtb	r2, r3
    89a8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    89ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89b0:	701a      	strb	r2, [r3, #0]
    89b2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    89b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89ba:	781b      	ldrb	r3, [r3, #0]
    89bc:	2bff      	cmp	r3, #255	; 0xff
    89be:	d105      	bne.n	89cc <send_climb+0xe4>
    89c0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    89c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89c8:	2200      	movs	r2, #0
    89ca:	701a      	strb	r2, [r3, #0]
    89cc:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    89d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89d4:	781b      	ldrb	r3, [r3, #0]
    89d6:	461a      	mov	r2, r3
    89d8:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    89dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89e0:	210e      	movs	r1, #14
    89e2:	5499      	strb	r1, [r3, r2]
    89e4:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    89e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89ec:	781b      	ldrb	r3, [r3, #0]
    89ee:	3301      	adds	r3, #1
    89f0:	b2da      	uxtb	r2, r3
    89f2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    89f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89fa:	701a      	strb	r2, [r3, #0]
    89fc:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8a00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a04:	781b      	ldrb	r3, [r3, #0]
    8a06:	2bff      	cmp	r3, #255	; 0xff
    8a08:	d105      	bne.n	8a16 <send_climb+0x12e>
    8a0a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8a0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a12:	2200      	movs	r2, #0
    8a14:	701a      	strb	r2, [r3, #0]
    8a16:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8a1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a1e:	220e      	movs	r2, #14
    8a20:	701a      	strb	r2, [r3, #0]
    8a22:	f24b 53be 	movw	r3, #46526	; 0xb5be
    8a26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a2a:	220e      	movs	r2, #14
    8a2c:	701a      	strb	r2, [r3, #0]
    8a2e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8a32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a36:	781b      	ldrb	r3, [r3, #0]
    8a38:	461a      	mov	r2, r3
    8a3a:	f24b 73ec 	movw	r3, #47084	; 0xb7ec
    8a3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a42:	7819      	ldrb	r1, [r3, #0]
    8a44:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    8a48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a4c:	5499      	strb	r1, [r3, r2]
    8a4e:	f24b 73ec 	movw	r3, #47084	; 0xb7ec
    8a52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a56:	781a      	ldrb	r2, [r3, #0]
    8a58:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8a5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a60:	781b      	ldrb	r3, [r3, #0]
    8a62:	4413      	add	r3, r2
    8a64:	b2da      	uxtb	r2, r3
    8a66:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8a6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a6e:	701a      	strb	r2, [r3, #0]
    8a70:	f24b 53be 	movw	r3, #46526	; 0xb5be
    8a74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a78:	781a      	ldrb	r2, [r3, #0]
    8a7a:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8a7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a82:	781b      	ldrb	r3, [r3, #0]
    8a84:	4413      	add	r3, r2
    8a86:	b2da      	uxtb	r2, r3
    8a88:	f24b 53be 	movw	r3, #46526	; 0xb5be
    8a8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a90:	701a      	strb	r2, [r3, #0]
    8a92:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8a96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a9a:	781b      	ldrb	r3, [r3, #0]
    8a9c:	3301      	adds	r3, #1
    8a9e:	b2da      	uxtb	r2, r3
    8aa0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8aa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8aa8:	701a      	strb	r2, [r3, #0]
    8aaa:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8aae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ab2:	781b      	ldrb	r3, [r3, #0]
    8ab4:	2bff      	cmp	r3, #255	; 0xff
    8ab6:	d105      	bne.n	8ac4 <send_climb+0x1dc>
    8ab8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8abc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ac0:	2200      	movs	r2, #0
    8ac2:	701a      	strb	r2, [r3, #0]
    8ac4:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8ac8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8acc:	781b      	ldrb	r3, [r3, #0]
    8ace:	461a      	mov	r2, r3
    8ad0:	f24b 73ec 	movw	r3, #47084	; 0xb7ec
    8ad4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ad8:	7859      	ldrb	r1, [r3, #1]
    8ada:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    8ade:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ae2:	5499      	strb	r1, [r3, r2]
    8ae4:	4bd3      	ldr	r3, [pc, #844]	; (8e34 <send_climb+0x54c>)
    8ae6:	781a      	ldrb	r2, [r3, #0]
    8ae8:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8aec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8af0:	781b      	ldrb	r3, [r3, #0]
    8af2:	4413      	add	r3, r2
    8af4:	b2da      	uxtb	r2, r3
    8af6:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8afa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8afe:	701a      	strb	r2, [r3, #0]
    8b00:	f24b 53be 	movw	r3, #46526	; 0xb5be
    8b04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b08:	781a      	ldrb	r2, [r3, #0]
    8b0a:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8b0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b12:	781b      	ldrb	r3, [r3, #0]
    8b14:	4413      	add	r3, r2
    8b16:	b2da      	uxtb	r2, r3
    8b18:	f24b 53be 	movw	r3, #46526	; 0xb5be
    8b1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b20:	701a      	strb	r2, [r3, #0]
    8b22:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8b26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b2a:	781b      	ldrb	r3, [r3, #0]
    8b2c:	3301      	adds	r3, #1
    8b2e:	b2da      	uxtb	r2, r3
    8b30:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8b34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b38:	701a      	strb	r2, [r3, #0]
    8b3a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8b3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b42:	781b      	ldrb	r3, [r3, #0]
    8b44:	2bff      	cmp	r3, #255	; 0xff
    8b46:	d105      	bne.n	8b54 <send_climb+0x26c>
    8b48:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8b4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b50:	2200      	movs	r2, #0
    8b52:	701a      	strb	r2, [r3, #0]
    8b54:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8b58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b5c:	781b      	ldrb	r3, [r3, #0]
    8b5e:	461a      	mov	r2, r3
    8b60:	f64b 0300 	movw	r3, #47104	; 0xb800
    8b64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b68:	7819      	ldrb	r1, [r3, #0]
    8b6a:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    8b6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b72:	5499      	strb	r1, [r3, r2]
    8b74:	f64b 0300 	movw	r3, #47104	; 0xb800
    8b78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b7c:	781a      	ldrb	r2, [r3, #0]
    8b7e:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8b82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b86:	781b      	ldrb	r3, [r3, #0]
    8b88:	4413      	add	r3, r2
    8b8a:	b2da      	uxtb	r2, r3
    8b8c:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8b90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b94:	701a      	strb	r2, [r3, #0]
    8b96:	f24b 53be 	movw	r3, #46526	; 0xb5be
    8b9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b9e:	781a      	ldrb	r2, [r3, #0]
    8ba0:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8ba4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ba8:	781b      	ldrb	r3, [r3, #0]
    8baa:	4413      	add	r3, r2
    8bac:	b2da      	uxtb	r2, r3
    8bae:	f24b 53be 	movw	r3, #46526	; 0xb5be
    8bb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bb6:	701a      	strb	r2, [r3, #0]
    8bb8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8bbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bc0:	781b      	ldrb	r3, [r3, #0]
    8bc2:	3301      	adds	r3, #1
    8bc4:	b2da      	uxtb	r2, r3
    8bc6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8bca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bce:	701a      	strb	r2, [r3, #0]
    8bd0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8bd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bd8:	781b      	ldrb	r3, [r3, #0]
    8bda:	2bff      	cmp	r3, #255	; 0xff
    8bdc:	d105      	bne.n	8bea <send_climb+0x302>
    8bde:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8be2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8be6:	2200      	movs	r2, #0
    8be8:	701a      	strb	r2, [r3, #0]
    8bea:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8bee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bf2:	781b      	ldrb	r3, [r3, #0]
    8bf4:	461a      	mov	r2, r3
    8bf6:	f64b 0300 	movw	r3, #47104	; 0xb800
    8bfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bfe:	7859      	ldrb	r1, [r3, #1]
    8c00:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    8c04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c08:	5499      	strb	r1, [r3, r2]
    8c0a:	4b8b      	ldr	r3, [pc, #556]	; (8e38 <send_climb+0x550>)
    8c0c:	781a      	ldrb	r2, [r3, #0]
    8c0e:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8c12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c16:	781b      	ldrb	r3, [r3, #0]
    8c18:	4413      	add	r3, r2
    8c1a:	b2da      	uxtb	r2, r3
    8c1c:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8c20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c24:	701a      	strb	r2, [r3, #0]
    8c26:	f24b 53be 	movw	r3, #46526	; 0xb5be
    8c2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c2e:	781a      	ldrb	r2, [r3, #0]
    8c30:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8c34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c38:	781b      	ldrb	r3, [r3, #0]
    8c3a:	4413      	add	r3, r2
    8c3c:	b2da      	uxtb	r2, r3
    8c3e:	f24b 53be 	movw	r3, #46526	; 0xb5be
    8c42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c46:	701a      	strb	r2, [r3, #0]
    8c48:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8c4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c50:	781b      	ldrb	r3, [r3, #0]
    8c52:	3301      	adds	r3, #1
    8c54:	b2da      	uxtb	r2, r3
    8c56:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8c5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c5e:	701a      	strb	r2, [r3, #0]
    8c60:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8c64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c68:	781b      	ldrb	r3, [r3, #0]
    8c6a:	2bff      	cmp	r3, #255	; 0xff
    8c6c:	d105      	bne.n	8c7a <send_climb+0x392>
    8c6e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8c72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c76:	2200      	movs	r2, #0
    8c78:	701a      	strb	r2, [r3, #0]
    8c7a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8c7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c82:	781b      	ldrb	r3, [r3, #0]
    8c84:	461a      	mov	r2, r3
    8c86:	f64b 0300 	movw	r3, #47104	; 0xb800
    8c8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c8e:	7899      	ldrb	r1, [r3, #2]
    8c90:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    8c94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c98:	5499      	strb	r1, [r3, r2]
    8c9a:	4b68      	ldr	r3, [pc, #416]	; (8e3c <send_climb+0x554>)
    8c9c:	781a      	ldrb	r2, [r3, #0]
    8c9e:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8ca2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ca6:	781b      	ldrb	r3, [r3, #0]
    8ca8:	4413      	add	r3, r2
    8caa:	b2da      	uxtb	r2, r3
    8cac:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8cb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cb4:	701a      	strb	r2, [r3, #0]
    8cb6:	f24b 53be 	movw	r3, #46526	; 0xb5be
    8cba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cbe:	781a      	ldrb	r2, [r3, #0]
    8cc0:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8cc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cc8:	781b      	ldrb	r3, [r3, #0]
    8cca:	4413      	add	r3, r2
    8ccc:	b2da      	uxtb	r2, r3
    8cce:	f24b 53be 	movw	r3, #46526	; 0xb5be
    8cd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cd6:	701a      	strb	r2, [r3, #0]
    8cd8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8cdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ce0:	781b      	ldrb	r3, [r3, #0]
    8ce2:	3301      	adds	r3, #1
    8ce4:	b2da      	uxtb	r2, r3
    8ce6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8cea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cee:	701a      	strb	r2, [r3, #0]
    8cf0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8cf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cf8:	781b      	ldrb	r3, [r3, #0]
    8cfa:	2bff      	cmp	r3, #255	; 0xff
    8cfc:	d105      	bne.n	8d0a <send_climb+0x422>
    8cfe:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8d02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d06:	2200      	movs	r2, #0
    8d08:	701a      	strb	r2, [r3, #0]
    8d0a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8d0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d12:	781b      	ldrb	r3, [r3, #0]
    8d14:	461a      	mov	r2, r3
    8d16:	f64b 0300 	movw	r3, #47104	; 0xb800
    8d1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d1e:	78d9      	ldrb	r1, [r3, #3]
    8d20:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    8d24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d28:	5499      	strb	r1, [r3, r2]
    8d2a:	4b45      	ldr	r3, [pc, #276]	; (8e40 <send_climb+0x558>)
    8d2c:	781a      	ldrb	r2, [r3, #0]
    8d2e:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8d32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d36:	781b      	ldrb	r3, [r3, #0]
    8d38:	4413      	add	r3, r2
    8d3a:	b2da      	uxtb	r2, r3
    8d3c:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8d40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d44:	701a      	strb	r2, [r3, #0]
    8d46:	f24b 53be 	movw	r3, #46526	; 0xb5be
    8d4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d4e:	781a      	ldrb	r2, [r3, #0]
    8d50:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8d54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d58:	781b      	ldrb	r3, [r3, #0]
    8d5a:	4413      	add	r3, r2
    8d5c:	b2da      	uxtb	r2, r3
    8d5e:	f24b 53be 	movw	r3, #46526	; 0xb5be
    8d62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d66:	701a      	strb	r2, [r3, #0]
    8d68:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8d6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d70:	781b      	ldrb	r3, [r3, #0]
    8d72:	3301      	adds	r3, #1
    8d74:	b2da      	uxtb	r2, r3
    8d76:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8d7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d7e:	701a      	strb	r2, [r3, #0]
    8d80:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8d84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d88:	781b      	ldrb	r3, [r3, #0]
    8d8a:	2bff      	cmp	r3, #255	; 0xff
    8d8c:	d105      	bne.n	8d9a <send_climb+0x4b2>
    8d8e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8d92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d96:	2200      	movs	r2, #0
    8d98:	701a      	strb	r2, [r3, #0]
    8d9a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8d9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8da2:	781b      	ldrb	r3, [r3, #0]
    8da4:	461a      	mov	r2, r3
    8da6:	f64b 0308 	movw	r3, #47112	; 0xb808
    8daa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dae:	7819      	ldrb	r1, [r3, #0]
    8db0:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    8db4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8db8:	5499      	strb	r1, [r3, r2]
    8dba:	f64b 0308 	movw	r3, #47112	; 0xb808
    8dbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dc2:	781a      	ldrb	r2, [r3, #0]
    8dc4:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8dc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dcc:	781b      	ldrb	r3, [r3, #0]
    8dce:	4413      	add	r3, r2
    8dd0:	b2da      	uxtb	r2, r3
    8dd2:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8dd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dda:	701a      	strb	r2, [r3, #0]
    8ddc:	f24b 53be 	movw	r3, #46526	; 0xb5be
    8de0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8de4:	781a      	ldrb	r2, [r3, #0]
    8de6:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8dea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dee:	781b      	ldrb	r3, [r3, #0]
    8df0:	4413      	add	r3, r2
    8df2:	b2da      	uxtb	r2, r3
    8df4:	f24b 53be 	movw	r3, #46526	; 0xb5be
    8df8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dfc:	701a      	strb	r2, [r3, #0]
    8dfe:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8e02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e06:	781b      	ldrb	r3, [r3, #0]
    8e08:	3301      	adds	r3, #1
    8e0a:	b2da      	uxtb	r2, r3
    8e0c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8e10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e14:	701a      	strb	r2, [r3, #0]
    8e16:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8e1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e1e:	781b      	ldrb	r3, [r3, #0]
    8e20:	2bff      	cmp	r3, #255	; 0xff
    8e22:	d10f      	bne.n	8e44 <send_climb+0x55c>
    8e24:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8e28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e2c:	2200      	movs	r2, #0
    8e2e:	701a      	strb	r2, [r3, #0]
    8e30:	e008      	b.n	8e44 <send_climb+0x55c>
    8e32:	bf00      	nop
    8e34:	2004b7ed 	.word	0x2004b7ed
    8e38:	2004b801 	.word	0x2004b801
    8e3c:	2004b802 	.word	0x2004b802
    8e40:	2004b803 	.word	0x2004b803
    8e44:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8e48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e4c:	781b      	ldrb	r3, [r3, #0]
    8e4e:	461a      	mov	r2, r3
    8e50:	f64b 0308 	movw	r3, #47112	; 0xb808
    8e54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e58:	7859      	ldrb	r1, [r3, #1]
    8e5a:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    8e5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e62:	5499      	strb	r1, [r3, r2]
    8e64:	4bd1      	ldr	r3, [pc, #836]	; (91ac <send_climb+0x8c4>)
    8e66:	781a      	ldrb	r2, [r3, #0]
    8e68:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8e6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e70:	781b      	ldrb	r3, [r3, #0]
    8e72:	4413      	add	r3, r2
    8e74:	b2da      	uxtb	r2, r3
    8e76:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8e7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e7e:	701a      	strb	r2, [r3, #0]
    8e80:	f24b 53be 	movw	r3, #46526	; 0xb5be
    8e84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e88:	781a      	ldrb	r2, [r3, #0]
    8e8a:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8e8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e92:	781b      	ldrb	r3, [r3, #0]
    8e94:	4413      	add	r3, r2
    8e96:	b2da      	uxtb	r2, r3
    8e98:	f24b 53be 	movw	r3, #46526	; 0xb5be
    8e9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ea0:	701a      	strb	r2, [r3, #0]
    8ea2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8ea6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8eaa:	781b      	ldrb	r3, [r3, #0]
    8eac:	3301      	adds	r3, #1
    8eae:	b2da      	uxtb	r2, r3
    8eb0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8eb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8eb8:	701a      	strb	r2, [r3, #0]
    8eba:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8ebe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ec2:	781b      	ldrb	r3, [r3, #0]
    8ec4:	2bff      	cmp	r3, #255	; 0xff
    8ec6:	d105      	bne.n	8ed4 <send_climb+0x5ec>
    8ec8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8ecc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ed0:	2200      	movs	r2, #0
    8ed2:	701a      	strb	r2, [r3, #0]
    8ed4:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8ed8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8edc:	781b      	ldrb	r3, [r3, #0]
    8ede:	461a      	mov	r2, r3
    8ee0:	f64b 0308 	movw	r3, #47112	; 0xb808
    8ee4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ee8:	7899      	ldrb	r1, [r3, #2]
    8eea:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    8eee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ef2:	5499      	strb	r1, [r3, r2]
    8ef4:	4bae      	ldr	r3, [pc, #696]	; (91b0 <send_climb+0x8c8>)
    8ef6:	781a      	ldrb	r2, [r3, #0]
    8ef8:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8efc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f00:	781b      	ldrb	r3, [r3, #0]
    8f02:	4413      	add	r3, r2
    8f04:	b2da      	uxtb	r2, r3
    8f06:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8f0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f0e:	701a      	strb	r2, [r3, #0]
    8f10:	f24b 53be 	movw	r3, #46526	; 0xb5be
    8f14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f18:	781a      	ldrb	r2, [r3, #0]
    8f1a:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8f1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f22:	781b      	ldrb	r3, [r3, #0]
    8f24:	4413      	add	r3, r2
    8f26:	b2da      	uxtb	r2, r3
    8f28:	f24b 53be 	movw	r3, #46526	; 0xb5be
    8f2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f30:	701a      	strb	r2, [r3, #0]
    8f32:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8f36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f3a:	781b      	ldrb	r3, [r3, #0]
    8f3c:	3301      	adds	r3, #1
    8f3e:	b2da      	uxtb	r2, r3
    8f40:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8f44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f48:	701a      	strb	r2, [r3, #0]
    8f4a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8f4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f52:	781b      	ldrb	r3, [r3, #0]
    8f54:	2bff      	cmp	r3, #255	; 0xff
    8f56:	d105      	bne.n	8f64 <send_climb+0x67c>
    8f58:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8f5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f60:	2200      	movs	r2, #0
    8f62:	701a      	strb	r2, [r3, #0]
    8f64:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8f68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f6c:	781b      	ldrb	r3, [r3, #0]
    8f6e:	461a      	mov	r2, r3
    8f70:	f64b 0308 	movw	r3, #47112	; 0xb808
    8f74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f78:	78d9      	ldrb	r1, [r3, #3]
    8f7a:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    8f7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f82:	5499      	strb	r1, [r3, r2]
    8f84:	4b8b      	ldr	r3, [pc, #556]	; (91b4 <send_climb+0x8cc>)
    8f86:	781a      	ldrb	r2, [r3, #0]
    8f88:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8f8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f90:	781b      	ldrb	r3, [r3, #0]
    8f92:	4413      	add	r3, r2
    8f94:	b2da      	uxtb	r2, r3
    8f96:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8f9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f9e:	701a      	strb	r2, [r3, #0]
    8fa0:	f24b 53be 	movw	r3, #46526	; 0xb5be
    8fa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fa8:	781a      	ldrb	r2, [r3, #0]
    8faa:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8fae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fb2:	781b      	ldrb	r3, [r3, #0]
    8fb4:	4413      	add	r3, r2
    8fb6:	b2da      	uxtb	r2, r3
    8fb8:	f24b 53be 	movw	r3, #46526	; 0xb5be
    8fbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fc0:	701a      	strb	r2, [r3, #0]
    8fc2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8fc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fca:	781b      	ldrb	r3, [r3, #0]
    8fcc:	3301      	adds	r3, #1
    8fce:	b2da      	uxtb	r2, r3
    8fd0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8fd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fd8:	701a      	strb	r2, [r3, #0]
    8fda:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8fde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fe2:	781b      	ldrb	r3, [r3, #0]
    8fe4:	2bff      	cmp	r3, #255	; 0xff
    8fe6:	d105      	bne.n	8ff4 <send_climb+0x70c>
    8fe8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8fec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ff0:	2200      	movs	r2, #0
    8ff2:	701a      	strb	r2, [r3, #0]
    8ff4:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8ff8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ffc:	781b      	ldrb	r3, [r3, #0]
    8ffe:	461a      	mov	r2, r3
    9000:	f643 132c 	movw	r3, #14636	; 0x392c
    9004:	f2c0 0301 	movt	r3, #1
    9008:	7819      	ldrb	r1, [r3, #0]
    900a:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    900e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9012:	5499      	strb	r1, [r3, r2]
    9014:	f643 132c 	movw	r3, #14636	; 0x392c
    9018:	f2c0 0301 	movt	r3, #1
    901c:	781a      	ldrb	r2, [r3, #0]
    901e:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    9022:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9026:	781b      	ldrb	r3, [r3, #0]
    9028:	4413      	add	r3, r2
    902a:	b2da      	uxtb	r2, r3
    902c:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    9030:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9034:	701a      	strb	r2, [r3, #0]
    9036:	f24b 53be 	movw	r3, #46526	; 0xb5be
    903a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    903e:	781a      	ldrb	r2, [r3, #0]
    9040:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    9044:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9048:	781b      	ldrb	r3, [r3, #0]
    904a:	4413      	add	r3, r2
    904c:	b2da      	uxtb	r2, r3
    904e:	f24b 53be 	movw	r3, #46526	; 0xb5be
    9052:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9056:	701a      	strb	r2, [r3, #0]
    9058:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    905c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9060:	781b      	ldrb	r3, [r3, #0]
    9062:	3301      	adds	r3, #1
    9064:	b2da      	uxtb	r2, r3
    9066:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    906a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    906e:	701a      	strb	r2, [r3, #0]
    9070:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9074:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9078:	781b      	ldrb	r3, [r3, #0]
    907a:	2bff      	cmp	r3, #255	; 0xff
    907c:	d105      	bne.n	908a <send_climb+0x7a2>
    907e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9082:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9086:	2200      	movs	r2, #0
    9088:	701a      	strb	r2, [r3, #0]
    908a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    908e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9092:	781b      	ldrb	r3, [r3, #0]
    9094:	461a      	mov	r2, r3
    9096:	f643 132c 	movw	r3, #14636	; 0x392c
    909a:	f2c0 0301 	movt	r3, #1
    909e:	7859      	ldrb	r1, [r3, #1]
    90a0:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    90a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90a8:	5499      	strb	r1, [r3, r2]
    90aa:	4b43      	ldr	r3, [pc, #268]	; (91b8 <send_climb+0x8d0>)
    90ac:	781a      	ldrb	r2, [r3, #0]
    90ae:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    90b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90b6:	781b      	ldrb	r3, [r3, #0]
    90b8:	4413      	add	r3, r2
    90ba:	b2da      	uxtb	r2, r3
    90bc:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    90c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90c4:	701a      	strb	r2, [r3, #0]
    90c6:	f24b 53be 	movw	r3, #46526	; 0xb5be
    90ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90ce:	781a      	ldrb	r2, [r3, #0]
    90d0:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    90d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90d8:	781b      	ldrb	r3, [r3, #0]
    90da:	4413      	add	r3, r2
    90dc:	b2da      	uxtb	r2, r3
    90de:	f24b 53be 	movw	r3, #46526	; 0xb5be
    90e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90e6:	701a      	strb	r2, [r3, #0]
    90e8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    90ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90f0:	781b      	ldrb	r3, [r3, #0]
    90f2:	3301      	adds	r3, #1
    90f4:	b2da      	uxtb	r2, r3
    90f6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    90fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90fe:	701a      	strb	r2, [r3, #0]
    9100:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9104:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9108:	781b      	ldrb	r3, [r3, #0]
    910a:	2bff      	cmp	r3, #255	; 0xff
    910c:	d105      	bne.n	911a <send_climb+0x832>
    910e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9112:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9116:	2200      	movs	r2, #0
    9118:	701a      	strb	r2, [r3, #0]
    911a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    911e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9122:	781b      	ldrb	r3, [r3, #0]
    9124:	461a      	mov	r2, r3
    9126:	f643 132c 	movw	r3, #14636	; 0x392c
    912a:	f2c0 0301 	movt	r3, #1
    912e:	7899      	ldrb	r1, [r3, #2]
    9130:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    9134:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9138:	5499      	strb	r1, [r3, r2]
    913a:	4b20      	ldr	r3, [pc, #128]	; (91bc <send_climb+0x8d4>)
    913c:	781a      	ldrb	r2, [r3, #0]
    913e:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    9142:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9146:	781b      	ldrb	r3, [r3, #0]
    9148:	4413      	add	r3, r2
    914a:	b2da      	uxtb	r2, r3
    914c:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    9150:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9154:	701a      	strb	r2, [r3, #0]
    9156:	f24b 53be 	movw	r3, #46526	; 0xb5be
    915a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    915e:	781a      	ldrb	r2, [r3, #0]
    9160:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    9164:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9168:	781b      	ldrb	r3, [r3, #0]
    916a:	4413      	add	r3, r2
    916c:	b2da      	uxtb	r2, r3
    916e:	f24b 53be 	movw	r3, #46526	; 0xb5be
    9172:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9176:	701a      	strb	r2, [r3, #0]
    9178:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    917c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9180:	781b      	ldrb	r3, [r3, #0]
    9182:	3301      	adds	r3, #1
    9184:	b2da      	uxtb	r2, r3
    9186:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    918a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    918e:	701a      	strb	r2, [r3, #0]
    9190:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9194:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9198:	781b      	ldrb	r3, [r3, #0]
    919a:	2bff      	cmp	r3, #255	; 0xff
    919c:	d110      	bne.n	91c0 <send_climb+0x8d8>
    919e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    91a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91a6:	2200      	movs	r2, #0
    91a8:	701a      	strb	r2, [r3, #0]
    91aa:	e009      	b.n	91c0 <send_climb+0x8d8>
    91ac:	2004b809 	.word	0x2004b809
    91b0:	2004b80a 	.word	0x2004b80a
    91b4:	2004b80b 	.word	0x2004b80b
    91b8:	0001392d 	.word	0x0001392d
    91bc:	0001392e 	.word	0x0001392e
    91c0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    91c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91c8:	781b      	ldrb	r3, [r3, #0]
    91ca:	461a      	mov	r2, r3
    91cc:	f643 132c 	movw	r3, #14636	; 0x392c
    91d0:	f2c0 0301 	movt	r3, #1
    91d4:	78d9      	ldrb	r1, [r3, #3]
    91d6:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    91da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91de:	5499      	strb	r1, [r3, r2]
    91e0:	4b79      	ldr	r3, [pc, #484]	; (93c8 <send_climb+0xae0>)
    91e2:	781a      	ldrb	r2, [r3, #0]
    91e4:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    91e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91ec:	781b      	ldrb	r3, [r3, #0]
    91ee:	4413      	add	r3, r2
    91f0:	b2da      	uxtb	r2, r3
    91f2:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    91f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91fa:	701a      	strb	r2, [r3, #0]
    91fc:	f24b 53be 	movw	r3, #46526	; 0xb5be
    9200:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9204:	781a      	ldrb	r2, [r3, #0]
    9206:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    920a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    920e:	781b      	ldrb	r3, [r3, #0]
    9210:	4413      	add	r3, r2
    9212:	b2da      	uxtb	r2, r3
    9214:	f24b 53be 	movw	r3, #46526	; 0xb5be
    9218:	f2c2 0304 	movt	r3, #8196	; 0x2004
    921c:	701a      	strb	r2, [r3, #0]
    921e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9222:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9226:	781b      	ldrb	r3, [r3, #0]
    9228:	3301      	adds	r3, #1
    922a:	b2da      	uxtb	r2, r3
    922c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9230:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9234:	701a      	strb	r2, [r3, #0]
    9236:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    923a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    923e:	781b      	ldrb	r3, [r3, #0]
    9240:	2bff      	cmp	r3, #255	; 0xff
    9242:	d105      	bne.n	9250 <send_climb+0x968>
    9244:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9248:	f2c2 0304 	movt	r3, #8196	; 0x2004
    924c:	2200      	movs	r2, #0
    924e:	701a      	strb	r2, [r3, #0]
    9250:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9254:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9258:	781b      	ldrb	r3, [r3, #0]
    925a:	461a      	mov	r2, r3
    925c:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    9260:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9264:	7819      	ldrb	r1, [r3, #0]
    9266:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    926a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    926e:	5499      	strb	r1, [r3, r2]
    9270:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9274:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9278:	781b      	ldrb	r3, [r3, #0]
    927a:	3301      	adds	r3, #1
    927c:	b2da      	uxtb	r2, r3
    927e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9282:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9286:	701a      	strb	r2, [r3, #0]
    9288:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    928c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9290:	781b      	ldrb	r3, [r3, #0]
    9292:	2bff      	cmp	r3, #255	; 0xff
    9294:	d105      	bne.n	92a2 <send_climb+0x9ba>
    9296:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    929a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    929e:	2200      	movs	r2, #0
    92a0:	701a      	strb	r2, [r3, #0]
    92a2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    92a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92aa:	781b      	ldrb	r3, [r3, #0]
    92ac:	461a      	mov	r2, r3
    92ae:	f24b 53be 	movw	r3, #46526	; 0xb5be
    92b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92b6:	7819      	ldrb	r1, [r3, #0]
    92b8:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    92bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92c0:	5499      	strb	r1, [r3, r2]
    92c2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    92c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92ca:	781b      	ldrb	r3, [r3, #0]
    92cc:	3301      	adds	r3, #1
    92ce:	b2da      	uxtb	r2, r3
    92d0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    92d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92d8:	701a      	strb	r2, [r3, #0]
    92da:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    92de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92e2:	781b      	ldrb	r3, [r3, #0]
    92e4:	2bff      	cmp	r3, #255	; 0xff
    92e6:	d105      	bne.n	92f4 <send_climb+0xa0c>
    92e8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    92ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92f0:	2200      	movs	r2, #0
    92f2:	701a      	strb	r2, [r3, #0]
    92f4:	f248 0339 	movw	r3, #32825	; 0x8039
    92f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92fc:	781b      	ldrb	r3, [r3, #0]
    92fe:	b2db      	uxtb	r3, r3
    9300:	f003 0310 	and.w	r3, r3, #16
    9304:	2b00      	cmp	r3, #0
    9306:	d15a      	bne.n	93be <send_climb+0xad6>
    9308:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    930c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9310:	781b      	ldrb	r3, [r3, #0]
    9312:	b2db      	uxtb	r3, r3
    9314:	461a      	mov	r2, r3
    9316:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    931a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    931e:	5c9a      	ldrb	r2, [r3, r2]
    9320:	f24b 53bb 	movw	r3, #46523	; 0xb5bb
    9324:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9328:	701a      	strb	r2, [r3, #0]
    932a:	f24b 53bc 	movw	r3, #46524	; 0xb5bc
    932e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9332:	2200      	movs	r2, #0
    9334:	701a      	strb	r2, [r3, #0]
    9336:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    933a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    933e:	781b      	ldrb	r3, [r3, #0]
    9340:	b2db      	uxtb	r3, r3
    9342:	3301      	adds	r3, #1
    9344:	b2da      	uxtb	r2, r3
    9346:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    934a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    934e:	701a      	strb	r2, [r3, #0]
    9350:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    9354:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9358:	781b      	ldrb	r3, [r3, #0]
    935a:	b2db      	uxtb	r3, r3
    935c:	2bff      	cmp	r3, #255	; 0xff
    935e:	d105      	bne.n	936c <send_climb+0xa84>
    9360:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    9364:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9368:	2200      	movs	r2, #0
    936a:	701a      	strb	r2, [r3, #0]
    936c:	f248 0338 	movw	r3, #32824	; 0x8038
    9370:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9374:	f248 0238 	movw	r2, #32824	; 0x8038
    9378:	f2c2 0200 	movt	r2, #8192	; 0x2000
    937c:	7812      	ldrb	r2, [r2, #0]
    937e:	b2d2      	uxtb	r2, r2
    9380:	f042 0201 	orr.w	r2, r2, #1
    9384:	b2d2      	uxtb	r2, r2
    9386:	701a      	strb	r2, [r3, #0]
    9388:	f248 0339 	movw	r3, #32825	; 0x8039
    938c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9390:	f248 0239 	movw	r2, #32825	; 0x8039
    9394:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9398:	7812      	ldrb	r2, [r2, #0]
    939a:	b2d2      	uxtb	r2, r2
    939c:	f042 0210 	orr.w	r2, r2, #16
    93a0:	b2d2      	uxtb	r2, r2
    93a2:	701a      	strb	r2, [r3, #0]
    93a4:	e00b      	b.n	93be <send_climb+0xad6>
    93a6:	f24b 43b8 	movw	r3, #46264	; 0xb4b8
    93aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93ae:	781b      	ldrb	r3, [r3, #0]
    93b0:	3301      	adds	r3, #1
    93b2:	b2da      	uxtb	r2, r3
    93b4:	f24b 43b8 	movw	r3, #46264	; 0xb4b8
    93b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93bc:	701a      	strb	r2, [r3, #0]
}
    93be:	46bd      	mov	sp, r7
    93c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    93c4:	4770      	bx	lr
    93c6:	bf00      	nop
    93c8:	0001392f 	.word	0x0001392f

000093cc <send_mode>:
void send_mode(void){  //5000ms
    93cc:	b480      	push	{r7}
    93ce:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 50 == 9) PERIODIC_SEND_PPRZ_MODE();}
    93d0:	f24b 43b1 	movw	r3, #46257	; 0xb4b1
    93d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93d8:	781a      	ldrb	r2, [r3, #0]
    93da:	f248 531f 	movw	r3, #34079	; 0x851f
    93de:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    93e2:	fba3 1302 	umull	r1, r3, r3, r2
    93e6:	091b      	lsrs	r3, r3, #4
    93e8:	2132      	movs	r1, #50	; 0x32
    93ea:	fb01 f303 	mul.w	r3, r1, r3
    93ee:	1ad3      	subs	r3, r2, r3
    93f0:	b2db      	uxtb	r3, r3
    93f2:	2b09      	cmp	r3, #9
    93f4:	f040 82ba 	bne.w	996c <send_mode+0x5a0>
    93f8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    93fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9400:	781a      	ldrb	r2, [r3, #0]
    9402:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    9406:	f2c2 0304 	movt	r3, #8196	; 0x2004
    940a:	781b      	ldrb	r3, [r3, #0]
    940c:	b2db      	uxtb	r3, r3
    940e:	429a      	cmp	r2, r3
    9410:	d313      	bcc.n	943a <send_mode+0x6e>
    9412:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    9416:	f2c2 0304 	movt	r3, #8196	; 0x2004
    941a:	781b      	ldrb	r3, [r3, #0]
    941c:	b2db      	uxtb	r3, r3
    941e:	461a      	mov	r2, r3
    9420:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9424:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9428:	781b      	ldrb	r3, [r3, #0]
    942a:	1ad3      	subs	r3, r2, r3
    942c:	33ff      	adds	r3, #255	; 0xff
    942e:	2b09      	cmp	r3, #9
    9430:	bfd4      	ite	le
    9432:	2300      	movle	r3, #0
    9434:	2301      	movgt	r3, #1
    9436:	b2db      	uxtb	r3, r3
    9438:	e011      	b.n	945e <send_mode+0x92>
    943a:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    943e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9442:	781b      	ldrb	r3, [r3, #0]
    9444:	b2db      	uxtb	r3, r3
    9446:	461a      	mov	r2, r3
    9448:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    944c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9450:	781b      	ldrb	r3, [r3, #0]
    9452:	1ad3      	subs	r3, r2, r3
    9454:	2b09      	cmp	r3, #9
    9456:	bfd4      	ite	le
    9458:	2300      	movle	r3, #0
    945a:	2301      	movgt	r3, #1
    945c:	b2db      	uxtb	r3, r3
    945e:	2b00      	cmp	r3, #0
    9460:	f000 8278 	beq.w	9954 <send_mode+0x588>
    9464:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9468:	f2c2 0304 	movt	r3, #8196	; 0x2004
    946c:	781b      	ldrb	r3, [r3, #0]
    946e:	461a      	mov	r2, r3
    9470:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    9474:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9478:	2105      	movs	r1, #5
    947a:	5499      	strb	r1, [r3, r2]
    947c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9480:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9484:	781b      	ldrb	r3, [r3, #0]
    9486:	3301      	adds	r3, #1
    9488:	b2da      	uxtb	r2, r3
    948a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    948e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9492:	701a      	strb	r2, [r3, #0]
    9494:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9498:	f2c2 0304 	movt	r3, #8196	; 0x2004
    949c:	781b      	ldrb	r3, [r3, #0]
    949e:	2bff      	cmp	r3, #255	; 0xff
    94a0:	d105      	bne.n	94ae <send_mode+0xe2>
    94a2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    94a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94aa:	2200      	movs	r2, #0
    94ac:	701a      	strb	r2, [r3, #0]
    94ae:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    94b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94b6:	781b      	ldrb	r3, [r3, #0]
    94b8:	461a      	mov	r2, r3
    94ba:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    94be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94c2:	210b      	movs	r1, #11
    94c4:	5499      	strb	r1, [r3, r2]
    94c6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    94ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94ce:	781b      	ldrb	r3, [r3, #0]
    94d0:	3301      	adds	r3, #1
    94d2:	b2da      	uxtb	r2, r3
    94d4:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    94d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94dc:	701a      	strb	r2, [r3, #0]
    94de:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    94e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94e6:	781b      	ldrb	r3, [r3, #0]
    94e8:	2bff      	cmp	r3, #255	; 0xff
    94ea:	d105      	bne.n	94f8 <send_mode+0x12c>
    94ec:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    94f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94f4:	2200      	movs	r2, #0
    94f6:	701a      	strb	r2, [r3, #0]
    94f8:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    94fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9500:	220b      	movs	r2, #11
    9502:	701a      	strb	r2, [r3, #0]
    9504:	f24b 53be 	movw	r3, #46526	; 0xb5be
    9508:	f2c2 0304 	movt	r3, #8196	; 0x2004
    950c:	220b      	movs	r2, #11
    950e:	701a      	strb	r2, [r3, #0]
    9510:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9514:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9518:	781b      	ldrb	r3, [r3, #0]
    951a:	461a      	mov	r2, r3
    951c:	f24b 439c 	movw	r3, #46236	; 0xb49c
    9520:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9524:	7819      	ldrb	r1, [r3, #0]
    9526:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    952a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    952e:	5499      	strb	r1, [r3, r2]
    9530:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    9534:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9538:	781a      	ldrb	r2, [r3, #0]
    953a:	f24b 439c 	movw	r3, #46236	; 0xb49c
    953e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9542:	781b      	ldrb	r3, [r3, #0]
    9544:	4413      	add	r3, r2
    9546:	b2da      	uxtb	r2, r3
    9548:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    954c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9550:	701a      	strb	r2, [r3, #0]
    9552:	f24b 53be 	movw	r3, #46526	; 0xb5be
    9556:	f2c2 0304 	movt	r3, #8196	; 0x2004
    955a:	781a      	ldrb	r2, [r3, #0]
    955c:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    9560:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9564:	781b      	ldrb	r3, [r3, #0]
    9566:	4413      	add	r3, r2
    9568:	b2da      	uxtb	r2, r3
    956a:	f24b 53be 	movw	r3, #46526	; 0xb5be
    956e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9572:	701a      	strb	r2, [r3, #0]
    9574:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9578:	f2c2 0304 	movt	r3, #8196	; 0x2004
    957c:	781b      	ldrb	r3, [r3, #0]
    957e:	3301      	adds	r3, #1
    9580:	b2da      	uxtb	r2, r3
    9582:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9586:	f2c2 0304 	movt	r3, #8196	; 0x2004
    958a:	701a      	strb	r2, [r3, #0]
    958c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9590:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9594:	781b      	ldrb	r3, [r3, #0]
    9596:	2bff      	cmp	r3, #255	; 0xff
    9598:	d105      	bne.n	95a6 <send_mode+0x1da>
    959a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    959e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95a2:	2200      	movs	r2, #0
    95a4:	701a      	strb	r2, [r3, #0]
    95a6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    95aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95ae:	781b      	ldrb	r3, [r3, #0]
    95b0:	461a      	mov	r2, r3
    95b2:	f24b 439d 	movw	r3, #46237	; 0xb49d
    95b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95ba:	7819      	ldrb	r1, [r3, #0]
    95bc:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    95c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95c4:	5499      	strb	r1, [r3, r2]
    95c6:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    95ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95ce:	781a      	ldrb	r2, [r3, #0]
    95d0:	f24b 439d 	movw	r3, #46237	; 0xb49d
    95d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95d8:	781b      	ldrb	r3, [r3, #0]
    95da:	4413      	add	r3, r2
    95dc:	b2da      	uxtb	r2, r3
    95de:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    95e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95e6:	701a      	strb	r2, [r3, #0]
    95e8:	f24b 53be 	movw	r3, #46526	; 0xb5be
    95ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95f0:	781a      	ldrb	r2, [r3, #0]
    95f2:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    95f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95fa:	781b      	ldrb	r3, [r3, #0]
    95fc:	4413      	add	r3, r2
    95fe:	b2da      	uxtb	r2, r3
    9600:	f24b 53be 	movw	r3, #46526	; 0xb5be
    9604:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9608:	701a      	strb	r2, [r3, #0]
    960a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    960e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9612:	781b      	ldrb	r3, [r3, #0]
    9614:	3301      	adds	r3, #1
    9616:	b2da      	uxtb	r2, r3
    9618:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    961c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9620:	701a      	strb	r2, [r3, #0]
    9622:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9626:	f2c2 0304 	movt	r3, #8196	; 0x2004
    962a:	781b      	ldrb	r3, [r3, #0]
    962c:	2bff      	cmp	r3, #255	; 0xff
    962e:	d105      	bne.n	963c <send_mode+0x270>
    9630:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9634:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9638:	2200      	movs	r2, #0
    963a:	701a      	strb	r2, [r3, #0]
    963c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9640:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9644:	781b      	ldrb	r3, [r3, #0]
    9646:	461a      	mov	r2, r3
    9648:	f64b 23cc 	movw	r3, #47820	; 0xbacc
    964c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9650:	7819      	ldrb	r1, [r3, #0]
    9652:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    9656:	f2c2 0304 	movt	r3, #8196	; 0x2004
    965a:	5499      	strb	r1, [r3, r2]
    965c:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    9660:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9664:	781a      	ldrb	r2, [r3, #0]
    9666:	f64b 23cc 	movw	r3, #47820	; 0xbacc
    966a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    966e:	781b      	ldrb	r3, [r3, #0]
    9670:	4413      	add	r3, r2
    9672:	b2da      	uxtb	r2, r3
    9674:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    9678:	f2c2 0304 	movt	r3, #8196	; 0x2004
    967c:	701a      	strb	r2, [r3, #0]
    967e:	f24b 53be 	movw	r3, #46526	; 0xb5be
    9682:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9686:	781a      	ldrb	r2, [r3, #0]
    9688:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    968c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9690:	781b      	ldrb	r3, [r3, #0]
    9692:	4413      	add	r3, r2
    9694:	b2da      	uxtb	r2, r3
    9696:	f24b 53be 	movw	r3, #46526	; 0xb5be
    969a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    969e:	701a      	strb	r2, [r3, #0]
    96a0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    96a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96a8:	781b      	ldrb	r3, [r3, #0]
    96aa:	3301      	adds	r3, #1
    96ac:	b2da      	uxtb	r2, r3
    96ae:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    96b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96b6:	701a      	strb	r2, [r3, #0]
    96b8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    96bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96c0:	781b      	ldrb	r3, [r3, #0]
    96c2:	2bff      	cmp	r3, #255	; 0xff
    96c4:	d105      	bne.n	96d2 <send_mode+0x306>
    96c6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    96ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96ce:	2200      	movs	r2, #0
    96d0:	701a      	strb	r2, [r3, #0]
    96d2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    96d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96da:	781b      	ldrb	r3, [r3, #0]
    96dc:	461a      	mov	r2, r3
    96de:	f24b 43a3 	movw	r3, #46243	; 0xb4a3
    96e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96e6:	7819      	ldrb	r1, [r3, #0]
    96e8:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    96ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96f0:	5499      	strb	r1, [r3, r2]
    96f2:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    96f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96fa:	781a      	ldrb	r2, [r3, #0]
    96fc:	f24b 43a3 	movw	r3, #46243	; 0xb4a3
    9700:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9704:	781b      	ldrb	r3, [r3, #0]
    9706:	4413      	add	r3, r2
    9708:	b2da      	uxtb	r2, r3
    970a:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    970e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9712:	701a      	strb	r2, [r3, #0]
    9714:	f24b 53be 	movw	r3, #46526	; 0xb5be
    9718:	f2c2 0304 	movt	r3, #8196	; 0x2004
    971c:	781a      	ldrb	r2, [r3, #0]
    971e:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    9722:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9726:	781b      	ldrb	r3, [r3, #0]
    9728:	4413      	add	r3, r2
    972a:	b2da      	uxtb	r2, r3
    972c:	f24b 53be 	movw	r3, #46526	; 0xb5be
    9730:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9734:	701a      	strb	r2, [r3, #0]
    9736:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    973a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    973e:	781b      	ldrb	r3, [r3, #0]
    9740:	3301      	adds	r3, #1
    9742:	b2da      	uxtb	r2, r3
    9744:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9748:	f2c2 0304 	movt	r3, #8196	; 0x2004
    974c:	701a      	strb	r2, [r3, #0]
    974e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9752:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9756:	781b      	ldrb	r3, [r3, #0]
    9758:	2bff      	cmp	r3, #255	; 0xff
    975a:	d105      	bne.n	9768 <send_mode+0x39c>
    975c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9760:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9764:	2200      	movs	r2, #0
    9766:	701a      	strb	r2, [r3, #0]
    9768:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    976c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9770:	781b      	ldrb	r3, [r3, #0]
    9772:	461a      	mov	r2, r3
    9774:	f240 1304 	movw	r3, #260	; 0x104
    9778:	f2c2 0300 	movt	r3, #8192	; 0x2000
    977c:	7819      	ldrb	r1, [r3, #0]
    977e:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    9782:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9786:	5499      	strb	r1, [r3, r2]
    9788:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    978c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9790:	781a      	ldrb	r2, [r3, #0]
    9792:	f240 1304 	movw	r3, #260	; 0x104
    9796:	f2c2 0300 	movt	r3, #8192	; 0x2000
    979a:	781b      	ldrb	r3, [r3, #0]
    979c:	4413      	add	r3, r2
    979e:	b2da      	uxtb	r2, r3
    97a0:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    97a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97a8:	701a      	strb	r2, [r3, #0]
    97aa:	f24b 53be 	movw	r3, #46526	; 0xb5be
    97ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97b2:	781a      	ldrb	r2, [r3, #0]
    97b4:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    97b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97bc:	781b      	ldrb	r3, [r3, #0]
    97be:	4413      	add	r3, r2
    97c0:	b2da      	uxtb	r2, r3
    97c2:	f24b 53be 	movw	r3, #46526	; 0xb5be
    97c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97ca:	701a      	strb	r2, [r3, #0]
    97cc:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    97d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97d4:	781b      	ldrb	r3, [r3, #0]
    97d6:	3301      	adds	r3, #1
    97d8:	b2da      	uxtb	r2, r3
    97da:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    97de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97e2:	701a      	strb	r2, [r3, #0]
    97e4:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    97e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97ec:	781b      	ldrb	r3, [r3, #0]
    97ee:	2bff      	cmp	r3, #255	; 0xff
    97f0:	d105      	bne.n	97fe <send_mode+0x432>
    97f2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    97f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97fa:	2200      	movs	r2, #0
    97fc:	701a      	strb	r2, [r3, #0]
    97fe:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9802:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9806:	781b      	ldrb	r3, [r3, #0]
    9808:	461a      	mov	r2, r3
    980a:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    980e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9812:	7819      	ldrb	r1, [r3, #0]
    9814:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    9818:	f2c2 0304 	movt	r3, #8196	; 0x2004
    981c:	5499      	strb	r1, [r3, r2]
    981e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9822:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9826:	781b      	ldrb	r3, [r3, #0]
    9828:	3301      	adds	r3, #1
    982a:	b2da      	uxtb	r2, r3
    982c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9830:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9834:	701a      	strb	r2, [r3, #0]
    9836:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    983a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    983e:	781b      	ldrb	r3, [r3, #0]
    9840:	2bff      	cmp	r3, #255	; 0xff
    9842:	d105      	bne.n	9850 <send_mode+0x484>
    9844:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9848:	f2c2 0304 	movt	r3, #8196	; 0x2004
    984c:	2200      	movs	r2, #0
    984e:	701a      	strb	r2, [r3, #0]
    9850:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9854:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9858:	781b      	ldrb	r3, [r3, #0]
    985a:	461a      	mov	r2, r3
    985c:	f24b 53be 	movw	r3, #46526	; 0xb5be
    9860:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9864:	7819      	ldrb	r1, [r3, #0]
    9866:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    986a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    986e:	5499      	strb	r1, [r3, r2]
    9870:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9874:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9878:	781b      	ldrb	r3, [r3, #0]
    987a:	3301      	adds	r3, #1
    987c:	b2da      	uxtb	r2, r3
    987e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9882:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9886:	701a      	strb	r2, [r3, #0]
    9888:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    988c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9890:	781b      	ldrb	r3, [r3, #0]
    9892:	2bff      	cmp	r3, #255	; 0xff
    9894:	d105      	bne.n	98a2 <send_mode+0x4d6>
    9896:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    989a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    989e:	2200      	movs	r2, #0
    98a0:	701a      	strb	r2, [r3, #0]
    98a2:	f248 0339 	movw	r3, #32825	; 0x8039
    98a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98aa:	781b      	ldrb	r3, [r3, #0]
    98ac:	b2db      	uxtb	r3, r3
    98ae:	f003 0310 	and.w	r3, r3, #16
    98b2:	2b00      	cmp	r3, #0
    98b4:	d15a      	bne.n	996c <send_mode+0x5a0>
    98b6:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    98ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98be:	781b      	ldrb	r3, [r3, #0]
    98c0:	b2db      	uxtb	r3, r3
    98c2:	461a      	mov	r2, r3
    98c4:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    98c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98cc:	5c9a      	ldrb	r2, [r3, r2]
    98ce:	f24b 53bb 	movw	r3, #46523	; 0xb5bb
    98d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98d6:	701a      	strb	r2, [r3, #0]
    98d8:	f24b 53bc 	movw	r3, #46524	; 0xb5bc
    98dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98e0:	2200      	movs	r2, #0
    98e2:	701a      	strb	r2, [r3, #0]
    98e4:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    98e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98ec:	781b      	ldrb	r3, [r3, #0]
    98ee:	b2db      	uxtb	r3, r3
    98f0:	3301      	adds	r3, #1
    98f2:	b2da      	uxtb	r2, r3
    98f4:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    98f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98fc:	701a      	strb	r2, [r3, #0]
    98fe:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    9902:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9906:	781b      	ldrb	r3, [r3, #0]
    9908:	b2db      	uxtb	r3, r3
    990a:	2bff      	cmp	r3, #255	; 0xff
    990c:	d105      	bne.n	991a <send_mode+0x54e>
    990e:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    9912:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9916:	2200      	movs	r2, #0
    9918:	701a      	strb	r2, [r3, #0]
    991a:	f248 0338 	movw	r3, #32824	; 0x8038
    991e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9922:	f248 0238 	movw	r2, #32824	; 0x8038
    9926:	f2c2 0200 	movt	r2, #8192	; 0x2000
    992a:	7812      	ldrb	r2, [r2, #0]
    992c:	b2d2      	uxtb	r2, r2
    992e:	f042 0201 	orr.w	r2, r2, #1
    9932:	b2d2      	uxtb	r2, r2
    9934:	701a      	strb	r2, [r3, #0]
    9936:	f248 0339 	movw	r3, #32825	; 0x8039
    993a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    993e:	f248 0239 	movw	r2, #32825	; 0x8039
    9942:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9946:	7812      	ldrb	r2, [r2, #0]
    9948:	b2d2      	uxtb	r2, r2
    994a:	f042 0210 	orr.w	r2, r2, #16
    994e:	b2d2      	uxtb	r2, r2
    9950:	701a      	strb	r2, [r3, #0]
    9952:	e00b      	b.n	996c <send_mode+0x5a0>
    9954:	f24b 43b8 	movw	r3, #46264	; 0xb4b8
    9958:	f2c2 0304 	movt	r3, #8196	; 0x2004
    995c:	781b      	ldrb	r3, [r3, #0]
    995e:	3301      	adds	r3, #1
    9960:	b2da      	uxtb	r2, r3
    9962:	f24b 43b8 	movw	r3, #46264	; 0xb4b8
    9966:	f2c2 0304 	movt	r3, #8196	; 0x2004
    996a:	701a      	strb	r2, [r3, #0]
}
    996c:	46bd      	mov	sp, r7
    996e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9972:	4770      	bx	lr

00009974 <send_debug>:
void send_debug(void){  //5000ms
    9974:	b480      	push	{r7}
    9976:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 50 == 29) PERIODIC_SEND_DEBUG();}
    9978:	f24b 43b1 	movw	r3, #46257	; 0xb4b1
    997c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9980:	781a      	ldrb	r2, [r3, #0]
    9982:	f248 531f 	movw	r3, #34079	; 0x851f
    9986:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    998a:	fba3 1302 	umull	r1, r3, r3, r2
    998e:	091b      	lsrs	r3, r3, #4
    9990:	2132      	movs	r1, #50	; 0x32
    9992:	fb01 f303 	mul.w	r3, r1, r3
    9996:	1ad3      	subs	r3, r2, r3
    9998:	b2db      	uxtb	r3, r3
    999a:	2b1d      	cmp	r3, #29
    999c:	f040 82bb 	bne.w	9f16 <send_debug+0x5a2>
    99a0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    99a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99a8:	781a      	ldrb	r2, [r3, #0]
    99aa:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    99ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99b2:	781b      	ldrb	r3, [r3, #0]
    99b4:	b2db      	uxtb	r3, r3
    99b6:	429a      	cmp	r2, r3
    99b8:	d313      	bcc.n	99e2 <send_debug+0x6e>
    99ba:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    99be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99c2:	781b      	ldrb	r3, [r3, #0]
    99c4:	b2db      	uxtb	r3, r3
    99c6:	461a      	mov	r2, r3
    99c8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    99cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99d0:	781b      	ldrb	r3, [r3, #0]
    99d2:	1ad3      	subs	r3, r2, r3
    99d4:	33ff      	adds	r3, #255	; 0xff
    99d6:	2b09      	cmp	r3, #9
    99d8:	bfd4      	ite	le
    99da:	2300      	movle	r3, #0
    99dc:	2301      	movgt	r3, #1
    99de:	b2db      	uxtb	r3, r3
    99e0:	e011      	b.n	9a06 <send_debug+0x92>
    99e2:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    99e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99ea:	781b      	ldrb	r3, [r3, #0]
    99ec:	b2db      	uxtb	r3, r3
    99ee:	461a      	mov	r2, r3
    99f0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    99f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99f8:	781b      	ldrb	r3, [r3, #0]
    99fa:	1ad3      	subs	r3, r2, r3
    99fc:	2b09      	cmp	r3, #9
    99fe:	bfd4      	ite	le
    9a00:	2300      	movle	r3, #0
    9a02:	2301      	movgt	r3, #1
    9a04:	b2db      	uxtb	r3, r3
    9a06:	2b00      	cmp	r3, #0
    9a08:	f000 8279 	beq.w	9efe <send_debug+0x58a>
    9a0c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9a10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a14:	781b      	ldrb	r3, [r3, #0]
    9a16:	461a      	mov	r2, r3
    9a18:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    9a1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a20:	2105      	movs	r1, #5
    9a22:	5499      	strb	r1, [r3, r2]
    9a24:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9a28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a2c:	781b      	ldrb	r3, [r3, #0]
    9a2e:	3301      	adds	r3, #1
    9a30:	b2da      	uxtb	r2, r3
    9a32:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9a36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a3a:	701a      	strb	r2, [r3, #0]
    9a3c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9a40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a44:	781b      	ldrb	r3, [r3, #0]
    9a46:	2bff      	cmp	r3, #255	; 0xff
    9a48:	d105      	bne.n	9a56 <send_debug+0xe2>
    9a4a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9a4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a52:	2200      	movs	r2, #0
    9a54:	701a      	strb	r2, [r3, #0]
    9a56:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9a5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a5e:	781b      	ldrb	r3, [r3, #0]
    9a60:	461a      	mov	r2, r3
    9a62:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    9a66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a6a:	210d      	movs	r1, #13
    9a6c:	5499      	strb	r1, [r3, r2]
    9a6e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9a72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a76:	781b      	ldrb	r3, [r3, #0]
    9a78:	3301      	adds	r3, #1
    9a7a:	b2da      	uxtb	r2, r3
    9a7c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9a80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a84:	701a      	strb	r2, [r3, #0]
    9a86:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9a8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a8e:	781b      	ldrb	r3, [r3, #0]
    9a90:	2bff      	cmp	r3, #255	; 0xff
    9a92:	d105      	bne.n	9aa0 <send_debug+0x12c>
    9a94:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9a98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a9c:	2200      	movs	r2, #0
    9a9e:	701a      	strb	r2, [r3, #0]
    9aa0:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    9aa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9aa8:	220d      	movs	r2, #13
    9aaa:	701a      	strb	r2, [r3, #0]
    9aac:	f24b 53be 	movw	r3, #46526	; 0xb5be
    9ab0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ab4:	220d      	movs	r2, #13
    9ab6:	701a      	strb	r2, [r3, #0]
    9ab8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9abc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ac0:	781b      	ldrb	r3, [r3, #0]
    9ac2:	461a      	mov	r2, r3
    9ac4:	f24b 53ef 	movw	r3, #46575	; 0xb5ef
    9ac8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9acc:	781b      	ldrb	r3, [r3, #0]
    9ace:	b2d9      	uxtb	r1, r3
    9ad0:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    9ad4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ad8:	5499      	strb	r1, [r3, r2]
    9ada:	f24b 53ef 	movw	r3, #46575	; 0xb5ef
    9ade:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ae2:	781a      	ldrb	r2, [r3, #0]
    9ae4:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    9ae8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9aec:	781b      	ldrb	r3, [r3, #0]
    9aee:	4413      	add	r3, r2
    9af0:	b2da      	uxtb	r2, r3
    9af2:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    9af6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9afa:	701a      	strb	r2, [r3, #0]
    9afc:	f24b 53be 	movw	r3, #46526	; 0xb5be
    9b00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b04:	781a      	ldrb	r2, [r3, #0]
    9b06:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    9b0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b0e:	781b      	ldrb	r3, [r3, #0]
    9b10:	4413      	add	r3, r2
    9b12:	b2da      	uxtb	r2, r3
    9b14:	f24b 53be 	movw	r3, #46526	; 0xb5be
    9b18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b1c:	701a      	strb	r2, [r3, #0]
    9b1e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9b22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b26:	781b      	ldrb	r3, [r3, #0]
    9b28:	3301      	adds	r3, #1
    9b2a:	b2da      	uxtb	r2, r3
    9b2c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9b30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b34:	701a      	strb	r2, [r3, #0]
    9b36:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9b3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b3e:	781b      	ldrb	r3, [r3, #0]
    9b40:	2bff      	cmp	r3, #255	; 0xff
    9b42:	d105      	bne.n	9b50 <send_debug+0x1dc>
    9b44:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9b48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b4c:	2200      	movs	r2, #0
    9b4e:	701a      	strb	r2, [r3, #0]
    9b50:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9b54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b58:	781b      	ldrb	r3, [r3, #0]
    9b5a:	461a      	mov	r2, r3
    9b5c:	f24b 53f0 	movw	r3, #46576	; 0xb5f0
    9b60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b64:	7819      	ldrb	r1, [r3, #0]
    9b66:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    9b6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b6e:	5499      	strb	r1, [r3, r2]
    9b70:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    9b74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b78:	781a      	ldrb	r2, [r3, #0]
    9b7a:	f24b 53f0 	movw	r3, #46576	; 0xb5f0
    9b7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b82:	781b      	ldrb	r3, [r3, #0]
    9b84:	4413      	add	r3, r2
    9b86:	b2da      	uxtb	r2, r3
    9b88:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    9b8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b90:	701a      	strb	r2, [r3, #0]
    9b92:	f24b 53be 	movw	r3, #46526	; 0xb5be
    9b96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b9a:	781a      	ldrb	r2, [r3, #0]
    9b9c:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    9ba0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ba4:	781b      	ldrb	r3, [r3, #0]
    9ba6:	4413      	add	r3, r2
    9ba8:	b2da      	uxtb	r2, r3
    9baa:	f24b 53be 	movw	r3, #46526	; 0xb5be
    9bae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bb2:	701a      	strb	r2, [r3, #0]
    9bb4:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9bb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bbc:	781b      	ldrb	r3, [r3, #0]
    9bbe:	3301      	adds	r3, #1
    9bc0:	b2da      	uxtb	r2, r3
    9bc2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9bc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bca:	701a      	strb	r2, [r3, #0]
    9bcc:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9bd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bd4:	781b      	ldrb	r3, [r3, #0]
    9bd6:	2bff      	cmp	r3, #255	; 0xff
    9bd8:	d105      	bne.n	9be6 <send_debug+0x272>
    9bda:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9bde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9be2:	2200      	movs	r2, #0
    9be4:	701a      	strb	r2, [r3, #0]
    9be6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9bea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bee:	781b      	ldrb	r3, [r3, #0]
    9bf0:	461a      	mov	r2, r3
    9bf2:	f24b 43b8 	movw	r3, #46264	; 0xb4b8
    9bf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bfa:	7819      	ldrb	r1, [r3, #0]
    9bfc:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    9c00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c04:	5499      	strb	r1, [r3, r2]
    9c06:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    9c0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c0e:	781a      	ldrb	r2, [r3, #0]
    9c10:	f24b 43b8 	movw	r3, #46264	; 0xb4b8
    9c14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c18:	781b      	ldrb	r3, [r3, #0]
    9c1a:	4413      	add	r3, r2
    9c1c:	b2da      	uxtb	r2, r3
    9c1e:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    9c22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c26:	701a      	strb	r2, [r3, #0]
    9c28:	f24b 53be 	movw	r3, #46526	; 0xb5be
    9c2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c30:	781a      	ldrb	r2, [r3, #0]
    9c32:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    9c36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c3a:	781b      	ldrb	r3, [r3, #0]
    9c3c:	4413      	add	r3, r2
    9c3e:	b2da      	uxtb	r2, r3
    9c40:	f24b 53be 	movw	r3, #46526	; 0xb5be
    9c44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c48:	701a      	strb	r2, [r3, #0]
    9c4a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9c4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c52:	781b      	ldrb	r3, [r3, #0]
    9c54:	3301      	adds	r3, #1
    9c56:	b2da      	uxtb	r2, r3
    9c58:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9c5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c60:	701a      	strb	r2, [r3, #0]
    9c62:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9c66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c6a:	781b      	ldrb	r3, [r3, #0]
    9c6c:	2bff      	cmp	r3, #255	; 0xff
    9c6e:	d105      	bne.n	9c7c <send_debug+0x308>
    9c70:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9c74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c78:	2200      	movs	r2, #0
    9c7a:	701a      	strb	r2, [r3, #0]
    9c7c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9c80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c84:	781b      	ldrb	r3, [r3, #0]
    9c86:	461a      	mov	r2, r3
    9c88:	f24b 7357 	movw	r3, #46935	; 0xb757
    9c8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c90:	7819      	ldrb	r1, [r3, #0]
    9c92:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    9c96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c9a:	5499      	strb	r1, [r3, r2]
    9c9c:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    9ca0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ca4:	781a      	ldrb	r2, [r3, #0]
    9ca6:	f24b 7357 	movw	r3, #46935	; 0xb757
    9caa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cae:	781b      	ldrb	r3, [r3, #0]
    9cb0:	4413      	add	r3, r2
    9cb2:	b2da      	uxtb	r2, r3
    9cb4:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    9cb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cbc:	701a      	strb	r2, [r3, #0]
    9cbe:	f24b 53be 	movw	r3, #46526	; 0xb5be
    9cc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cc6:	781a      	ldrb	r2, [r3, #0]
    9cc8:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    9ccc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cd0:	781b      	ldrb	r3, [r3, #0]
    9cd2:	4413      	add	r3, r2
    9cd4:	b2da      	uxtb	r2, r3
    9cd6:	f24b 53be 	movw	r3, #46526	; 0xb5be
    9cda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cde:	701a      	strb	r2, [r3, #0]
    9ce0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9ce4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ce8:	781b      	ldrb	r3, [r3, #0]
    9cea:	3301      	adds	r3, #1
    9cec:	b2da      	uxtb	r2, r3
    9cee:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9cf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cf6:	701a      	strb	r2, [r3, #0]
    9cf8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9cfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d00:	781b      	ldrb	r3, [r3, #0]
    9d02:	2bff      	cmp	r3, #255	; 0xff
    9d04:	d105      	bne.n	9d12 <send_debug+0x39e>
    9d06:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9d0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d0e:	2200      	movs	r2, #0
    9d10:	701a      	strb	r2, [r3, #0]
    9d12:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9d16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d1a:	781b      	ldrb	r3, [r3, #0]
    9d1c:	461a      	mov	r2, r3
    9d1e:	f24b 43a4 	movw	r3, #46244	; 0xb4a4
    9d22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d26:	7819      	ldrb	r1, [r3, #0]
    9d28:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    9d2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d30:	5499      	strb	r1, [r3, r2]
    9d32:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    9d36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d3a:	781a      	ldrb	r2, [r3, #0]
    9d3c:	f24b 43a4 	movw	r3, #46244	; 0xb4a4
    9d40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d44:	781b      	ldrb	r3, [r3, #0]
    9d46:	4413      	add	r3, r2
    9d48:	b2da      	uxtb	r2, r3
    9d4a:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    9d4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d52:	701a      	strb	r2, [r3, #0]
    9d54:	f24b 53be 	movw	r3, #46526	; 0xb5be
    9d58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d5c:	781a      	ldrb	r2, [r3, #0]
    9d5e:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    9d62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d66:	781b      	ldrb	r3, [r3, #0]
    9d68:	4413      	add	r3, r2
    9d6a:	b2da      	uxtb	r2, r3
    9d6c:	f24b 53be 	movw	r3, #46526	; 0xb5be
    9d70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d74:	701a      	strb	r2, [r3, #0]
    9d76:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9d7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d7e:	781b      	ldrb	r3, [r3, #0]
    9d80:	3301      	adds	r3, #1
    9d82:	b2da      	uxtb	r2, r3
    9d84:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9d88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d8c:	701a      	strb	r2, [r3, #0]
    9d8e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9d92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d96:	781b      	ldrb	r3, [r3, #0]
    9d98:	2bff      	cmp	r3, #255	; 0xff
    9d9a:	d105      	bne.n	9da8 <send_debug+0x434>
    9d9c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9da0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9da4:	2200      	movs	r2, #0
    9da6:	701a      	strb	r2, [r3, #0]
    9da8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9dac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9db0:	781b      	ldrb	r3, [r3, #0]
    9db2:	461a      	mov	r2, r3
    9db4:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    9db8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dbc:	7819      	ldrb	r1, [r3, #0]
    9dbe:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    9dc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dc6:	5499      	strb	r1, [r3, r2]
    9dc8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9dcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dd0:	781b      	ldrb	r3, [r3, #0]
    9dd2:	3301      	adds	r3, #1
    9dd4:	b2da      	uxtb	r2, r3
    9dd6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9dda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dde:	701a      	strb	r2, [r3, #0]
    9de0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9de4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9de8:	781b      	ldrb	r3, [r3, #0]
    9dea:	2bff      	cmp	r3, #255	; 0xff
    9dec:	d105      	bne.n	9dfa <send_debug+0x486>
    9dee:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9df2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9df6:	2200      	movs	r2, #0
    9df8:	701a      	strb	r2, [r3, #0]
    9dfa:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9dfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e02:	781b      	ldrb	r3, [r3, #0]
    9e04:	461a      	mov	r2, r3
    9e06:	f24b 53be 	movw	r3, #46526	; 0xb5be
    9e0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e0e:	7819      	ldrb	r1, [r3, #0]
    9e10:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    9e14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e18:	5499      	strb	r1, [r3, r2]
    9e1a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9e1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e22:	781b      	ldrb	r3, [r3, #0]
    9e24:	3301      	adds	r3, #1
    9e26:	b2da      	uxtb	r2, r3
    9e28:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9e2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e30:	701a      	strb	r2, [r3, #0]
    9e32:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9e36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e3a:	781b      	ldrb	r3, [r3, #0]
    9e3c:	2bff      	cmp	r3, #255	; 0xff
    9e3e:	d105      	bne.n	9e4c <send_debug+0x4d8>
    9e40:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9e44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e48:	2200      	movs	r2, #0
    9e4a:	701a      	strb	r2, [r3, #0]
    9e4c:	f248 0339 	movw	r3, #32825	; 0x8039
    9e50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e54:	781b      	ldrb	r3, [r3, #0]
    9e56:	b2db      	uxtb	r3, r3
    9e58:	f003 0310 	and.w	r3, r3, #16
    9e5c:	2b00      	cmp	r3, #0
    9e5e:	d15a      	bne.n	9f16 <send_debug+0x5a2>
    9e60:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    9e64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e68:	781b      	ldrb	r3, [r3, #0]
    9e6a:	b2db      	uxtb	r3, r3
    9e6c:	461a      	mov	r2, r3
    9e6e:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    9e72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e76:	5c9a      	ldrb	r2, [r3, r2]
    9e78:	f24b 53bb 	movw	r3, #46523	; 0xb5bb
    9e7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e80:	701a      	strb	r2, [r3, #0]
    9e82:	f24b 53bc 	movw	r3, #46524	; 0xb5bc
    9e86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e8a:	2200      	movs	r2, #0
    9e8c:	701a      	strb	r2, [r3, #0]
    9e8e:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    9e92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e96:	781b      	ldrb	r3, [r3, #0]
    9e98:	b2db      	uxtb	r3, r3
    9e9a:	3301      	adds	r3, #1
    9e9c:	b2da      	uxtb	r2, r3
    9e9e:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    9ea2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ea6:	701a      	strb	r2, [r3, #0]
    9ea8:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    9eac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9eb0:	781b      	ldrb	r3, [r3, #0]
    9eb2:	b2db      	uxtb	r3, r3
    9eb4:	2bff      	cmp	r3, #255	; 0xff
    9eb6:	d105      	bne.n	9ec4 <send_debug+0x550>
    9eb8:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    9ebc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ec0:	2200      	movs	r2, #0
    9ec2:	701a      	strb	r2, [r3, #0]
    9ec4:	f248 0338 	movw	r3, #32824	; 0x8038
    9ec8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ecc:	f248 0238 	movw	r2, #32824	; 0x8038
    9ed0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9ed4:	7812      	ldrb	r2, [r2, #0]
    9ed6:	b2d2      	uxtb	r2, r2
    9ed8:	f042 0201 	orr.w	r2, r2, #1
    9edc:	b2d2      	uxtb	r2, r2
    9ede:	701a      	strb	r2, [r3, #0]
    9ee0:	f248 0339 	movw	r3, #32825	; 0x8039
    9ee4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ee8:	f248 0239 	movw	r2, #32825	; 0x8039
    9eec:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9ef0:	7812      	ldrb	r2, [r2, #0]
    9ef2:	b2d2      	uxtb	r2, r2
    9ef4:	f042 0210 	orr.w	r2, r2, #16
    9ef8:	b2d2      	uxtb	r2, r2
    9efa:	701a      	strb	r2, [r3, #0]
    9efc:	e00b      	b.n	9f16 <send_debug+0x5a2>
    9efe:	f24b 43b8 	movw	r3, #46264	; 0xb4b8
    9f02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f06:	781b      	ldrb	r3, [r3, #0]
    9f08:	3301      	adds	r3, #1
    9f0a:	b2da      	uxtb	r2, r3
    9f0c:	f24b 43b8 	movw	r3, #46264	; 0xb4b8
    9f10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f14:	701a      	strb	r2, [r3, #0]
}
    9f16:	46bd      	mov	sp, r7
    9f18:	f85d 7b04 	ldr.w	r7, [sp], #4
    9f1c:	4770      	bx	lr
    9f1e:	bf00      	nop

00009f20 <send_nav_ref>:
void send_nav_ref(void){  //10000ms
    9f20:	b480      	push	{r7}
    9f22:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 100 == 49) PERIODIC_SEND_NAVIGATION_REF();}
    9f24:	f24b 43b1 	movw	r3, #46257	; 0xb4b1
    9f28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f2c:	781a      	ldrb	r2, [r3, #0]
    9f2e:	f248 531f 	movw	r3, #34079	; 0x851f
    9f32:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    9f36:	fba3 1302 	umull	r1, r3, r3, r2
    9f3a:	095b      	lsrs	r3, r3, #5
    9f3c:	2164      	movs	r1, #100	; 0x64
    9f3e:	fb01 f303 	mul.w	r3, r1, r3
    9f42:	1ad3      	subs	r3, r2, r3
    9f44:	b2db      	uxtb	r3, r3
    9f46:	2b31      	cmp	r3, #49	; 0x31
    9f48:	f040 8395 	bne.w	a676 <send_nav_ref+0x756>
    9f4c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9f50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f54:	781a      	ldrb	r2, [r3, #0]
    9f56:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    9f5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f5e:	781b      	ldrb	r3, [r3, #0]
    9f60:	b2db      	uxtb	r3, r3
    9f62:	429a      	cmp	r2, r3
    9f64:	d313      	bcc.n	9f8e <send_nav_ref+0x6e>
    9f66:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    9f6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f6e:	781b      	ldrb	r3, [r3, #0]
    9f70:	b2db      	uxtb	r3, r3
    9f72:	461a      	mov	r2, r3
    9f74:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9f78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f7c:	781b      	ldrb	r3, [r3, #0]
    9f7e:	1ad3      	subs	r3, r2, r3
    9f80:	33ff      	adds	r3, #255	; 0xff
    9f82:	2b0c      	cmp	r3, #12
    9f84:	bfd4      	ite	le
    9f86:	2300      	movle	r3, #0
    9f88:	2301      	movgt	r3, #1
    9f8a:	b2db      	uxtb	r3, r3
    9f8c:	e011      	b.n	9fb2 <send_nav_ref+0x92>
    9f8e:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    9f92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f96:	781b      	ldrb	r3, [r3, #0]
    9f98:	b2db      	uxtb	r3, r3
    9f9a:	461a      	mov	r2, r3
    9f9c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9fa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fa4:	781b      	ldrb	r3, [r3, #0]
    9fa6:	1ad3      	subs	r3, r2, r3
    9fa8:	2b0c      	cmp	r3, #12
    9faa:	bfd4      	ite	le
    9fac:	2300      	movle	r3, #0
    9fae:	2301      	movgt	r3, #1
    9fb0:	b2db      	uxtb	r3, r3
    9fb2:	2b00      	cmp	r3, #0
    9fb4:	f000 8353 	beq.w	a65e <send_nav_ref+0x73e>
    9fb8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9fbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fc0:	781b      	ldrb	r3, [r3, #0]
    9fc2:	461a      	mov	r2, r3
    9fc4:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    9fc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fcc:	2105      	movs	r1, #5
    9fce:	5499      	strb	r1, [r3, r2]
    9fd0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9fd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fd8:	781b      	ldrb	r3, [r3, #0]
    9fda:	3301      	adds	r3, #1
    9fdc:	b2da      	uxtb	r2, r3
    9fde:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9fe2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fe6:	701a      	strb	r2, [r3, #0]
    9fe8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9fec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ff0:	781b      	ldrb	r3, [r3, #0]
    9ff2:	2bff      	cmp	r3, #255	; 0xff
    9ff4:	d105      	bne.n	a002 <send_nav_ref+0xe2>
    9ff6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9ffa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ffe:	2200      	movs	r2, #0
    a000:	701a      	strb	r2, [r3, #0]
    a002:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a006:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a00a:	781b      	ldrb	r3, [r3, #0]
    a00c:	461a      	mov	r2, r3
    a00e:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    a012:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a016:	2109      	movs	r1, #9
    a018:	5499      	strb	r1, [r3, r2]
    a01a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a01e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a022:	781b      	ldrb	r3, [r3, #0]
    a024:	3301      	adds	r3, #1
    a026:	b2da      	uxtb	r2, r3
    a028:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a02c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a030:	701a      	strb	r2, [r3, #0]
    a032:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a036:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a03a:	781b      	ldrb	r3, [r3, #0]
    a03c:	2bff      	cmp	r3, #255	; 0xff
    a03e:	d105      	bne.n	a04c <send_nav_ref+0x12c>
    a040:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a044:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a048:	2200      	movs	r2, #0
    a04a:	701a      	strb	r2, [r3, #0]
    a04c:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    a050:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a054:	2209      	movs	r2, #9
    a056:	701a      	strb	r2, [r3, #0]
    a058:	f24b 53be 	movw	r3, #46526	; 0xb5be
    a05c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a060:	2209      	movs	r2, #9
    a062:	701a      	strb	r2, [r3, #0]
    a064:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a068:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a06c:	781b      	ldrb	r3, [r3, #0]
    a06e:	461a      	mov	r2, r3
    a070:	f643 1324 	movw	r3, #14628	; 0x3924
    a074:	f2c0 0301 	movt	r3, #1
    a078:	7819      	ldrb	r1, [r3, #0]
    a07a:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    a07e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a082:	5499      	strb	r1, [r3, r2]
    a084:	f643 1324 	movw	r3, #14628	; 0x3924
    a088:	f2c0 0301 	movt	r3, #1
    a08c:	781a      	ldrb	r2, [r3, #0]
    a08e:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    a092:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a096:	781b      	ldrb	r3, [r3, #0]
    a098:	4413      	add	r3, r2
    a09a:	b2da      	uxtb	r2, r3
    a09c:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    a0a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0a4:	701a      	strb	r2, [r3, #0]
    a0a6:	f24b 53be 	movw	r3, #46526	; 0xb5be
    a0aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0ae:	781a      	ldrb	r2, [r3, #0]
    a0b0:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    a0b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0b8:	781b      	ldrb	r3, [r3, #0]
    a0ba:	4413      	add	r3, r2
    a0bc:	b2da      	uxtb	r2, r3
    a0be:	f24b 53be 	movw	r3, #46526	; 0xb5be
    a0c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0c6:	701a      	strb	r2, [r3, #0]
    a0c8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a0cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0d0:	781b      	ldrb	r3, [r3, #0]
    a0d2:	3301      	adds	r3, #1
    a0d4:	b2da      	uxtb	r2, r3
    a0d6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a0da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0de:	701a      	strb	r2, [r3, #0]
    a0e0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a0e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0e8:	781b      	ldrb	r3, [r3, #0]
    a0ea:	2bff      	cmp	r3, #255	; 0xff
    a0ec:	d105      	bne.n	a0fa <send_nav_ref+0x1da>
    a0ee:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a0f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0f6:	2200      	movs	r2, #0
    a0f8:	701a      	strb	r2, [r3, #0]
    a0fa:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a0fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a102:	781b      	ldrb	r3, [r3, #0]
    a104:	461a      	mov	r2, r3
    a106:	f643 1324 	movw	r3, #14628	; 0x3924
    a10a:	f2c0 0301 	movt	r3, #1
    a10e:	7859      	ldrb	r1, [r3, #1]
    a110:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    a114:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a118:	5499      	strb	r1, [r3, r2]
    a11a:	4bd2      	ldr	r3, [pc, #840]	; (a464 <send_nav_ref+0x544>)
    a11c:	781a      	ldrb	r2, [r3, #0]
    a11e:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    a122:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a126:	781b      	ldrb	r3, [r3, #0]
    a128:	4413      	add	r3, r2
    a12a:	b2da      	uxtb	r2, r3
    a12c:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    a130:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a134:	701a      	strb	r2, [r3, #0]
    a136:	f24b 53be 	movw	r3, #46526	; 0xb5be
    a13a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a13e:	781a      	ldrb	r2, [r3, #0]
    a140:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    a144:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a148:	781b      	ldrb	r3, [r3, #0]
    a14a:	4413      	add	r3, r2
    a14c:	b2da      	uxtb	r2, r3
    a14e:	f24b 53be 	movw	r3, #46526	; 0xb5be
    a152:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a156:	701a      	strb	r2, [r3, #0]
    a158:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a15c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a160:	781b      	ldrb	r3, [r3, #0]
    a162:	3301      	adds	r3, #1
    a164:	b2da      	uxtb	r2, r3
    a166:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a16a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a16e:	701a      	strb	r2, [r3, #0]
    a170:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a174:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a178:	781b      	ldrb	r3, [r3, #0]
    a17a:	2bff      	cmp	r3, #255	; 0xff
    a17c:	d105      	bne.n	a18a <send_nav_ref+0x26a>
    a17e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a182:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a186:	2200      	movs	r2, #0
    a188:	701a      	strb	r2, [r3, #0]
    a18a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a18e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a192:	781b      	ldrb	r3, [r3, #0]
    a194:	461a      	mov	r2, r3
    a196:	f643 1324 	movw	r3, #14628	; 0x3924
    a19a:	f2c0 0301 	movt	r3, #1
    a19e:	7899      	ldrb	r1, [r3, #2]
    a1a0:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    a1a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1a8:	5499      	strb	r1, [r3, r2]
    a1aa:	4baf      	ldr	r3, [pc, #700]	; (a468 <send_nav_ref+0x548>)
    a1ac:	781a      	ldrb	r2, [r3, #0]
    a1ae:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    a1b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1b6:	781b      	ldrb	r3, [r3, #0]
    a1b8:	4413      	add	r3, r2
    a1ba:	b2da      	uxtb	r2, r3
    a1bc:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    a1c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1c4:	701a      	strb	r2, [r3, #0]
    a1c6:	f24b 53be 	movw	r3, #46526	; 0xb5be
    a1ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1ce:	781a      	ldrb	r2, [r3, #0]
    a1d0:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    a1d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1d8:	781b      	ldrb	r3, [r3, #0]
    a1da:	4413      	add	r3, r2
    a1dc:	b2da      	uxtb	r2, r3
    a1de:	f24b 53be 	movw	r3, #46526	; 0xb5be
    a1e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1e6:	701a      	strb	r2, [r3, #0]
    a1e8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a1ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1f0:	781b      	ldrb	r3, [r3, #0]
    a1f2:	3301      	adds	r3, #1
    a1f4:	b2da      	uxtb	r2, r3
    a1f6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a1fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1fe:	701a      	strb	r2, [r3, #0]
    a200:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a204:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a208:	781b      	ldrb	r3, [r3, #0]
    a20a:	2bff      	cmp	r3, #255	; 0xff
    a20c:	d105      	bne.n	a21a <send_nav_ref+0x2fa>
    a20e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a212:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a216:	2200      	movs	r2, #0
    a218:	701a      	strb	r2, [r3, #0]
    a21a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a21e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a222:	781b      	ldrb	r3, [r3, #0]
    a224:	461a      	mov	r2, r3
    a226:	f643 1324 	movw	r3, #14628	; 0x3924
    a22a:	f2c0 0301 	movt	r3, #1
    a22e:	78d9      	ldrb	r1, [r3, #3]
    a230:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    a234:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a238:	5499      	strb	r1, [r3, r2]
    a23a:	4b8c      	ldr	r3, [pc, #560]	; (a46c <send_nav_ref+0x54c>)
    a23c:	781a      	ldrb	r2, [r3, #0]
    a23e:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    a242:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a246:	781b      	ldrb	r3, [r3, #0]
    a248:	4413      	add	r3, r2
    a24a:	b2da      	uxtb	r2, r3
    a24c:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    a250:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a254:	701a      	strb	r2, [r3, #0]
    a256:	f24b 53be 	movw	r3, #46526	; 0xb5be
    a25a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a25e:	781a      	ldrb	r2, [r3, #0]
    a260:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    a264:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a268:	781b      	ldrb	r3, [r3, #0]
    a26a:	4413      	add	r3, r2
    a26c:	b2da      	uxtb	r2, r3
    a26e:	f24b 53be 	movw	r3, #46526	; 0xb5be
    a272:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a276:	701a      	strb	r2, [r3, #0]
    a278:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a27c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a280:	781b      	ldrb	r3, [r3, #0]
    a282:	3301      	adds	r3, #1
    a284:	b2da      	uxtb	r2, r3
    a286:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a28a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a28e:	701a      	strb	r2, [r3, #0]
    a290:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a294:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a298:	781b      	ldrb	r3, [r3, #0]
    a29a:	2bff      	cmp	r3, #255	; 0xff
    a29c:	d105      	bne.n	a2aa <send_nav_ref+0x38a>
    a29e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a2a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2a6:	2200      	movs	r2, #0
    a2a8:	701a      	strb	r2, [r3, #0]
    a2aa:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a2ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2b2:	781b      	ldrb	r3, [r3, #0]
    a2b4:	461a      	mov	r2, r3
    a2b6:	f643 1328 	movw	r3, #14632	; 0x3928
    a2ba:	f2c0 0301 	movt	r3, #1
    a2be:	7819      	ldrb	r1, [r3, #0]
    a2c0:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    a2c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2c8:	5499      	strb	r1, [r3, r2]
    a2ca:	f643 1328 	movw	r3, #14632	; 0x3928
    a2ce:	f2c0 0301 	movt	r3, #1
    a2d2:	781a      	ldrb	r2, [r3, #0]
    a2d4:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    a2d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2dc:	781b      	ldrb	r3, [r3, #0]
    a2de:	4413      	add	r3, r2
    a2e0:	b2da      	uxtb	r2, r3
    a2e2:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    a2e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2ea:	701a      	strb	r2, [r3, #0]
    a2ec:	f24b 53be 	movw	r3, #46526	; 0xb5be
    a2f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2f4:	781a      	ldrb	r2, [r3, #0]
    a2f6:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    a2fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2fe:	781b      	ldrb	r3, [r3, #0]
    a300:	4413      	add	r3, r2
    a302:	b2da      	uxtb	r2, r3
    a304:	f24b 53be 	movw	r3, #46526	; 0xb5be
    a308:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a30c:	701a      	strb	r2, [r3, #0]
    a30e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a312:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a316:	781b      	ldrb	r3, [r3, #0]
    a318:	3301      	adds	r3, #1
    a31a:	b2da      	uxtb	r2, r3
    a31c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a320:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a324:	701a      	strb	r2, [r3, #0]
    a326:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a32a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a32e:	781b      	ldrb	r3, [r3, #0]
    a330:	2bff      	cmp	r3, #255	; 0xff
    a332:	d105      	bne.n	a340 <send_nav_ref+0x420>
    a334:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a338:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a33c:	2200      	movs	r2, #0
    a33e:	701a      	strb	r2, [r3, #0]
    a340:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a344:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a348:	781b      	ldrb	r3, [r3, #0]
    a34a:	461a      	mov	r2, r3
    a34c:	f643 1328 	movw	r3, #14632	; 0x3928
    a350:	f2c0 0301 	movt	r3, #1
    a354:	7859      	ldrb	r1, [r3, #1]
    a356:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    a35a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a35e:	5499      	strb	r1, [r3, r2]
    a360:	4b43      	ldr	r3, [pc, #268]	; (a470 <send_nav_ref+0x550>)
    a362:	781a      	ldrb	r2, [r3, #0]
    a364:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    a368:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a36c:	781b      	ldrb	r3, [r3, #0]
    a36e:	4413      	add	r3, r2
    a370:	b2da      	uxtb	r2, r3
    a372:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    a376:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a37a:	701a      	strb	r2, [r3, #0]
    a37c:	f24b 53be 	movw	r3, #46526	; 0xb5be
    a380:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a384:	781a      	ldrb	r2, [r3, #0]
    a386:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    a38a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a38e:	781b      	ldrb	r3, [r3, #0]
    a390:	4413      	add	r3, r2
    a392:	b2da      	uxtb	r2, r3
    a394:	f24b 53be 	movw	r3, #46526	; 0xb5be
    a398:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a39c:	701a      	strb	r2, [r3, #0]
    a39e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a3a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3a6:	781b      	ldrb	r3, [r3, #0]
    a3a8:	3301      	adds	r3, #1
    a3aa:	b2da      	uxtb	r2, r3
    a3ac:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a3b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3b4:	701a      	strb	r2, [r3, #0]
    a3b6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a3ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3be:	781b      	ldrb	r3, [r3, #0]
    a3c0:	2bff      	cmp	r3, #255	; 0xff
    a3c2:	d105      	bne.n	a3d0 <send_nav_ref+0x4b0>
    a3c4:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a3c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3cc:	2200      	movs	r2, #0
    a3ce:	701a      	strb	r2, [r3, #0]
    a3d0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a3d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3d8:	781b      	ldrb	r3, [r3, #0]
    a3da:	461a      	mov	r2, r3
    a3dc:	f643 1328 	movw	r3, #14632	; 0x3928
    a3e0:	f2c0 0301 	movt	r3, #1
    a3e4:	7899      	ldrb	r1, [r3, #2]
    a3e6:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    a3ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3ee:	5499      	strb	r1, [r3, r2]
    a3f0:	4b20      	ldr	r3, [pc, #128]	; (a474 <send_nav_ref+0x554>)
    a3f2:	781a      	ldrb	r2, [r3, #0]
    a3f4:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    a3f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3fc:	781b      	ldrb	r3, [r3, #0]
    a3fe:	4413      	add	r3, r2
    a400:	b2da      	uxtb	r2, r3
    a402:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    a406:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a40a:	701a      	strb	r2, [r3, #0]
    a40c:	f24b 53be 	movw	r3, #46526	; 0xb5be
    a410:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a414:	781a      	ldrb	r2, [r3, #0]
    a416:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    a41a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a41e:	781b      	ldrb	r3, [r3, #0]
    a420:	4413      	add	r3, r2
    a422:	b2da      	uxtb	r2, r3
    a424:	f24b 53be 	movw	r3, #46526	; 0xb5be
    a428:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a42c:	701a      	strb	r2, [r3, #0]
    a42e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a432:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a436:	781b      	ldrb	r3, [r3, #0]
    a438:	3301      	adds	r3, #1
    a43a:	b2da      	uxtb	r2, r3
    a43c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a440:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a444:	701a      	strb	r2, [r3, #0]
    a446:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a44a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a44e:	781b      	ldrb	r3, [r3, #0]
    a450:	2bff      	cmp	r3, #255	; 0xff
    a452:	d111      	bne.n	a478 <send_nav_ref+0x558>
    a454:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a458:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a45c:	2200      	movs	r2, #0
    a45e:	701a      	strb	r2, [r3, #0]
    a460:	e00a      	b.n	a478 <send_nav_ref+0x558>
    a462:	bf00      	nop
    a464:	00013925 	.word	0x00013925
    a468:	00013926 	.word	0x00013926
    a46c:	00013927 	.word	0x00013927
    a470:	00013929 	.word	0x00013929
    a474:	0001392a 	.word	0x0001392a
    a478:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a47c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a480:	781b      	ldrb	r3, [r3, #0]
    a482:	461a      	mov	r2, r3
    a484:	f643 1328 	movw	r3, #14632	; 0x3928
    a488:	f2c0 0301 	movt	r3, #1
    a48c:	78d9      	ldrb	r1, [r3, #3]
    a48e:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    a492:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a496:	5499      	strb	r1, [r3, r2]
    a498:	4b79      	ldr	r3, [pc, #484]	; (a680 <send_nav_ref+0x760>)
    a49a:	781a      	ldrb	r2, [r3, #0]
    a49c:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    a4a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4a4:	781b      	ldrb	r3, [r3, #0]
    a4a6:	4413      	add	r3, r2
    a4a8:	b2da      	uxtb	r2, r3
    a4aa:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    a4ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4b2:	701a      	strb	r2, [r3, #0]
    a4b4:	f24b 53be 	movw	r3, #46526	; 0xb5be
    a4b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4bc:	781a      	ldrb	r2, [r3, #0]
    a4be:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    a4c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4c6:	781b      	ldrb	r3, [r3, #0]
    a4c8:	4413      	add	r3, r2
    a4ca:	b2da      	uxtb	r2, r3
    a4cc:	f24b 53be 	movw	r3, #46526	; 0xb5be
    a4d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4d4:	701a      	strb	r2, [r3, #0]
    a4d6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a4da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4de:	781b      	ldrb	r3, [r3, #0]
    a4e0:	3301      	adds	r3, #1
    a4e2:	b2da      	uxtb	r2, r3
    a4e4:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a4e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4ec:	701a      	strb	r2, [r3, #0]
    a4ee:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a4f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4f6:	781b      	ldrb	r3, [r3, #0]
    a4f8:	2bff      	cmp	r3, #255	; 0xff
    a4fa:	d105      	bne.n	a508 <send_nav_ref+0x5e8>
    a4fc:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a500:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a504:	2200      	movs	r2, #0
    a506:	701a      	strb	r2, [r3, #0]
    a508:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a50c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a510:	781b      	ldrb	r3, [r3, #0]
    a512:	461a      	mov	r2, r3
    a514:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    a518:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a51c:	7819      	ldrb	r1, [r3, #0]
    a51e:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    a522:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a526:	5499      	strb	r1, [r3, r2]
    a528:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a52c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a530:	781b      	ldrb	r3, [r3, #0]
    a532:	3301      	adds	r3, #1
    a534:	b2da      	uxtb	r2, r3
    a536:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a53a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a53e:	701a      	strb	r2, [r3, #0]
    a540:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a544:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a548:	781b      	ldrb	r3, [r3, #0]
    a54a:	2bff      	cmp	r3, #255	; 0xff
    a54c:	d105      	bne.n	a55a <send_nav_ref+0x63a>
    a54e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a552:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a556:	2200      	movs	r2, #0
    a558:	701a      	strb	r2, [r3, #0]
    a55a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a55e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a562:	781b      	ldrb	r3, [r3, #0]
    a564:	461a      	mov	r2, r3
    a566:	f24b 53be 	movw	r3, #46526	; 0xb5be
    a56a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a56e:	7819      	ldrb	r1, [r3, #0]
    a570:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    a574:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a578:	5499      	strb	r1, [r3, r2]
    a57a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a57e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a582:	781b      	ldrb	r3, [r3, #0]
    a584:	3301      	adds	r3, #1
    a586:	b2da      	uxtb	r2, r3
    a588:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a58c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a590:	701a      	strb	r2, [r3, #0]
    a592:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a596:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a59a:	781b      	ldrb	r3, [r3, #0]
    a59c:	2bff      	cmp	r3, #255	; 0xff
    a59e:	d105      	bne.n	a5ac <send_nav_ref+0x68c>
    a5a0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a5a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5a8:	2200      	movs	r2, #0
    a5aa:	701a      	strb	r2, [r3, #0]
    a5ac:	f248 0339 	movw	r3, #32825	; 0x8039
    a5b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5b4:	781b      	ldrb	r3, [r3, #0]
    a5b6:	b2db      	uxtb	r3, r3
    a5b8:	f003 0310 	and.w	r3, r3, #16
    a5bc:	2b00      	cmp	r3, #0
    a5be:	d15a      	bne.n	a676 <send_nav_ref+0x756>
    a5c0:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    a5c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5c8:	781b      	ldrb	r3, [r3, #0]
    a5ca:	b2db      	uxtb	r3, r3
    a5cc:	461a      	mov	r2, r3
    a5ce:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    a5d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5d6:	5c9a      	ldrb	r2, [r3, r2]
    a5d8:	f24b 53bb 	movw	r3, #46523	; 0xb5bb
    a5dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5e0:	701a      	strb	r2, [r3, #0]
    a5e2:	f24b 53bc 	movw	r3, #46524	; 0xb5bc
    a5e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5ea:	2200      	movs	r2, #0
    a5ec:	701a      	strb	r2, [r3, #0]
    a5ee:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    a5f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5f6:	781b      	ldrb	r3, [r3, #0]
    a5f8:	b2db      	uxtb	r3, r3
    a5fa:	3301      	adds	r3, #1
    a5fc:	b2da      	uxtb	r2, r3
    a5fe:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    a602:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a606:	701a      	strb	r2, [r3, #0]
    a608:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    a60c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a610:	781b      	ldrb	r3, [r3, #0]
    a612:	b2db      	uxtb	r3, r3
    a614:	2bff      	cmp	r3, #255	; 0xff
    a616:	d105      	bne.n	a624 <send_nav_ref+0x704>
    a618:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    a61c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a620:	2200      	movs	r2, #0
    a622:	701a      	strb	r2, [r3, #0]
    a624:	f248 0338 	movw	r3, #32824	; 0x8038
    a628:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a62c:	f248 0238 	movw	r2, #32824	; 0x8038
    a630:	f2c2 0200 	movt	r2, #8192	; 0x2000
    a634:	7812      	ldrb	r2, [r2, #0]
    a636:	b2d2      	uxtb	r2, r2
    a638:	f042 0201 	orr.w	r2, r2, #1
    a63c:	b2d2      	uxtb	r2, r2
    a63e:	701a      	strb	r2, [r3, #0]
    a640:	f248 0339 	movw	r3, #32825	; 0x8039
    a644:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a648:	f248 0239 	movw	r2, #32825	; 0x8039
    a64c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    a650:	7812      	ldrb	r2, [r2, #0]
    a652:	b2d2      	uxtb	r2, r2
    a654:	f042 0210 	orr.w	r2, r2, #16
    a658:	b2d2      	uxtb	r2, r2
    a65a:	701a      	strb	r2, [r3, #0]
    a65c:	e00b      	b.n	a676 <send_nav_ref+0x756>
    a65e:	f24b 43b8 	movw	r3, #46264	; 0xb4b8
    a662:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a666:	781b      	ldrb	r3, [r3, #0]
    a668:	3301      	adds	r3, #1
    a66a:	b2da      	uxtb	r2, r3
    a66c:	f24b 43b8 	movw	r3, #46264	; 0xb4b8
    a670:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a674:	701a      	strb	r2, [r3, #0]
  //vPrintString("S_13 reporting_task end!\n\r");
}
    a676:	46bd      	mov	sp, r7
    a678:	f85d 7b04 	ldr.w	r7, [sp], #4
    a67c:	4770      	bx	lr
    a67e:	bf00      	nop
    a680:	0001392b 	.word	0x0001392b

0000a684 <inflight_calib_mode_update>:

/** \fn inline uint8_t inflight_calib_mode_update ( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
inline uint8_t inflight_calib_mode_update ( void ) {
    a684:	b480      	push	{r7}
    a686:	b083      	sub	sp, #12
    a688:	af00      	add	r7, sp, #0
  ModeUpdate(inflight_calib_mode, IF_CALIB_MODE_OF_PULSE(from_fbw.channels[RADIO_CALIB]));
    a68a:	f24b 53c0 	movw	r3, #46528	; 0xb5c0
    a68e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a692:	8a1b      	ldrh	r3, [r3, #16]
    a694:	b21b      	sxth	r3, r3
    a696:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
    a69a:	db0d      	blt.n	a6b8 <inflight_calib_mode_update+0x34>
    a69c:	f24b 53c0 	movw	r3, #46528	; 0xb5c0
    a6a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6a4:	8a1b      	ldrh	r3, [r3, #16]
    a6a6:	b21a      	sxth	r2, r3
    a6a8:	f640 437f 	movw	r3, #3199	; 0xc7f
    a6ac:	429a      	cmp	r2, r3
    a6ae:	bfd4      	ite	le
    a6b0:	2300      	movle	r3, #0
    a6b2:	2301      	movgt	r3, #1
    a6b4:	b2db      	uxtb	r3, r3
    a6b6:	e000      	b.n	a6ba <inflight_calib_mode_update+0x36>
    a6b8:	2302      	movs	r3, #2
    a6ba:	71fb      	strb	r3, [r7, #7]
    a6bc:	f64b 23cc 	movw	r3, #47820	; 0xbacc
    a6c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6c4:	781b      	ldrb	r3, [r3, #0]
    a6c6:	79fa      	ldrb	r2, [r7, #7]
    a6c8:	429a      	cmp	r2, r3
    a6ca:	d007      	beq.n	a6dc <inflight_calib_mode_update+0x58>
    a6cc:	f64b 23cc 	movw	r3, #47820	; 0xbacc
    a6d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6d4:	79fa      	ldrb	r2, [r7, #7]
    a6d6:	701a      	strb	r2, [r3, #0]
    a6d8:	2301      	movs	r3, #1
    a6da:	e000      	b.n	a6de <inflight_calib_mode_update+0x5a>
    a6dc:	2300      	movs	r3, #0
}
    a6de:	4618      	mov	r0, r3
    a6e0:	370c      	adds	r7, #12
    a6e2:	46bd      	mov	sp, r7
    a6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    a6e8:	4770      	bx	lr
    a6ea:	bf00      	nop

0000a6ec <radio_control_task>:


/** \fn inline void radio_control_task( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
void radio_control_task( void ) {
    a6ec:	b580      	push	{r7, lr}
    a6ee:	b082      	sub	sp, #8
    a6f0:	af00      	add	r7, sp, #0
  bool_t calib_mode_changed;
	//vPrintString("S_3 radio_control_task start! \n\r"); //SunnyBeike
    //add by wanbo
    link_fbw_receive_valid = 1;
    a6f2:	f24b 53ee 	movw	r3, #46574	; 0xb5ee
    a6f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6fa:	2201      	movs	r2, #1
    a6fc:	701a      	strb	r2, [r3, #0]
  if (link_fbw_receive_valid) {
    a6fe:	f24b 53ee 	movw	r3, #46574	; 0xb5ee
    a702:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a706:	781b      	ldrb	r3, [r3, #0]
    a708:	b2db      	uxtb	r3, r3
    a70a:	2b00      	cmp	r3, #0
    a70c:	f000 80df 	beq.w	a8ce <radio_control_task+0x1e2>
    uint8_t mode_changed = FALSE;
    a710:	2300      	movs	r3, #0
    a712:	71fb      	strb	r3, [r7, #7]
    copy_from_to_fbw();
    a714:	f7fa fa9c 	bl	4c50 <copy_from_to_fbw>
    //if ((bit_is_set(from_fbw.status, RADIO_REALLY_LOST) && (pprz_mode == PPRZ_MODE_AUTO1 || pprz_mode == PPRZ_MODE_MANUAL)) || too_far_from_home) 
    {
      pprz_mode = PPRZ_MODE_HOME;
    a718:	f24b 439c 	movw	r3, #46236	; 0xb49c
    a71c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a720:	2203      	movs	r2, #3
    a722:	701a      	strb	r2, [r3, #0]
      mode_changed = TRUE;
    a724:	2301      	movs	r3, #1
    a726:	71fb      	strb	r3, [r7, #7]
    }
    // modified by wanbo
    //if (bit_is_set(from_fbw.status, AVERAGED_CHANNELS_SENT)) 
    {
      bool_t pprz_mode_changed = pprz_mode_update();
    a728:	f7fa f96c 	bl	4a04 <pprz_mode_update>
    a72c:	4603      	mov	r3, r0
    a72e:	71bb      	strb	r3, [r7, #6]
      mode_changed |= pprz_mode_changed;
    a730:	79fa      	ldrb	r2, [r7, #7]
    a732:	79bb      	ldrb	r3, [r7, #6]
    a734:	4313      	orrs	r3, r2
    a736:	71fb      	strb	r3, [r7, #7]
#ifdef RADIO_LLS
      mode_changed |= ir_estim_mode_update();
    a738:	f7fa f9b0 	bl	4a9c <ir_estim_mode_update>
    a73c:	4603      	mov	r3, r0
    a73e:	461a      	mov	r2, r3
    a740:	79fb      	ldrb	r3, [r7, #7]
    a742:	4313      	orrs	r3, r2
    a744:	71fb      	strb	r3, [r7, #7]
#endif
#ifdef RADIO_CALIB
      calib_mode_changed = inflight_calib_mode_update();
    a746:	f7ff ff9d 	bl	a684 <inflight_calib_mode_update>
    a74a:	4603      	mov	r3, r0
    a74c:	717b      	strb	r3, [r7, #5]
      inflight_calib(calib_mode_changed || pprz_mode_changed);
    a74e:	797b      	ldrb	r3, [r7, #5]
    a750:	2b00      	cmp	r3, #0
    a752:	d102      	bne.n	a75a <radio_control_task+0x6e>
    a754:	79bb      	ldrb	r3, [r7, #6]
    a756:	2b00      	cmp	r3, #0
    a758:	d001      	beq.n	a75e <radio_control_task+0x72>
    a75a:	2301      	movs	r3, #1
    a75c:	e000      	b.n	a760 <radio_control_task+0x74>
    a75e:	2300      	movs	r3, #0
    a760:	b2db      	uxtb	r3, r3
    a762:	4618      	mov	r0, r3
    a764:	f005 ff60 	bl	10628 <inflight_calib>
      mode_changed |= calib_mode_changed;
    a768:	79fa      	ldrb	r2, [r7, #7]
    a76a:	797b      	ldrb	r3, [r7, #5]
    a76c:	4313      	orrs	r3, r2
    a76e:	71fb      	strb	r3, [r7, #7]
#endif
    }
    mode_changed |= mcu1_status_update();
    a770:	f7fa f9bc 	bl	4aec <mcu1_status_update>
    a774:	4603      	mov	r3, r0
    a776:	461a      	mov	r2, r3
    a778:	79fb      	ldrb	r3, [r7, #7]
    a77a:	4313      	orrs	r3, r2
    a77c:	71fb      	strb	r3, [r7, #7]
    // add by wanbo
    mode_changed = 1;
    a77e:	2301      	movs	r3, #1
    a780:	71fb      	strb	r3, [r7, #7]
    if ( mode_changed )
    a782:	79fb      	ldrb	r3, [r7, #7]
    a784:	2b00      	cmp	r3, #0
    a786:	d06a      	beq.n	a85e <radio_control_task+0x172>
      //DOWNLINK_SEND_PPRZ_MODE(&pprz_mode, &vertical_mode, &inflight_calib_mode, &mcu1_status, &ir_estim_mode);
      
    // add by wanbo
    //if (pprz_mode == PPRZ_MODE_AUTO1) 
    {
      desired_roll = FLOAT_OF_PPRZ(from_fbw.channels[RADIO_ROLL], 0., -0.6);
    a788:	f24b 53c0 	movw	r3, #46528	; 0xb5c0
    a78c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a790:	885b      	ldrh	r3, [r3, #2]
    a792:	b21b      	sxth	r3, r3
    a794:	4618      	mov	r0, r3
    a796:	f008 fd67 	bl	13268 <__aeabi_i2f>
    a79a:	4603      	mov	r3, r0
    a79c:	4618      	mov	r0, r3
    a79e:	f04f 0100 	mov.w	r1, #0
    a7a2:	f2c4 6116 	movt	r1, #17942	; 0x4616
    a7a6:	f008 fe67 	bl	13478 <__aeabi_fdiv>
    a7aa:	4603      	mov	r3, r0
    a7ac:	4618      	mov	r0, r3
    a7ae:	f008 f91b 	bl	129e8 <__aeabi_f2d>
    a7b2:	4602      	mov	r2, r0
    a7b4:	460b      	mov	r3, r1
    a7b6:	4610      	mov	r0, r2
    a7b8:	4619      	mov	r1, r3
    a7ba:	a347      	add	r3, pc, #284	; (adr r3, a8d8 <radio_control_task+0x1ec>)
    a7bc:	e9d3 2300 	ldrd	r2, r3, [r3]
    a7c0:	f008 f966 	bl	12a90 <__aeabi_dmul>
    a7c4:	4602      	mov	r2, r0
    a7c6:	460b      	mov	r3, r1
    a7c8:	4610      	mov	r0, r2
    a7ca:	4619      	mov	r1, r3
    a7cc:	f04f 0200 	mov.w	r2, #0
    a7d0:	f04f 0300 	mov.w	r3, #0
    a7d4:	f007 ffaa 	bl	1272c <__adddf3>
    a7d8:	4602      	mov	r2, r0
    a7da:	460b      	mov	r3, r1
    a7dc:	4610      	mov	r0, r2
    a7de:	4619      	mov	r1, r3
    a7e0:	f008 fc38 	bl	13054 <__aeabi_d2f>
    a7e4:	4602      	mov	r2, r0
    a7e6:	f24b 73e4 	movw	r3, #47076	; 0xb7e4
    a7ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7ee:	601a      	str	r2, [r3, #0]
      desired_pitch = FLOAT_OF_PPRZ(from_fbw.channels[RADIO_PITCH], 0., 0.5);
    a7f0:	f24b 53c0 	movw	r3, #46528	; 0xb5c0
    a7f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7f8:	889b      	ldrh	r3, [r3, #4]
    a7fa:	b21b      	sxth	r3, r3
    a7fc:	4618      	mov	r0, r3
    a7fe:	f008 fd33 	bl	13268 <__aeabi_i2f>
    a802:	4603      	mov	r3, r0
    a804:	4618      	mov	r0, r3
    a806:	f04f 0100 	mov.w	r1, #0
    a80a:	f2c4 6116 	movt	r1, #17942	; 0x4616
    a80e:	f008 fe33 	bl	13478 <__aeabi_fdiv>
    a812:	4603      	mov	r3, r0
    a814:	4618      	mov	r0, r3
    a816:	f008 f8e7 	bl	129e8 <__aeabi_f2d>
    a81a:	4602      	mov	r2, r0
    a81c:	460b      	mov	r3, r1
    a81e:	4610      	mov	r0, r2
    a820:	4619      	mov	r1, r3
    a822:	f04f 0200 	mov.w	r2, #0
    a826:	f04f 0300 	mov.w	r3, #0
    a82a:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
    a82e:	f008 f92f 	bl	12a90 <__aeabi_dmul>
    a832:	4602      	mov	r2, r0
    a834:	460b      	mov	r3, r1
    a836:	4610      	mov	r0, r2
    a838:	4619      	mov	r1, r3
    a83a:	f04f 0200 	mov.w	r2, #0
    a83e:	f04f 0300 	mov.w	r3, #0
    a842:	f007 ff73 	bl	1272c <__adddf3>
    a846:	4602      	mov	r2, r0
    a848:	460b      	mov	r3, r1
    a84a:	4610      	mov	r0, r2
    a84c:	4619      	mov	r1, r3
    a84e:	f008 fc01 	bl	13054 <__aeabi_d2f>
    a852:	4602      	mov	r2, r0
    a854:	f24b 73e8 	movw	r3, #47080	; 0xb7e8
    a858:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a85c:	601a      	str	r2, [r3, #0]
    } // else asynchronously set by course_pid_run()

    // add by wanbo
   // if (pprz_mode == PPRZ_MODE_MANUAL || pprz_mode == PPRZ_MODE_AUTO1) 
    {
      desired_gaz = from_fbw.channels[RADIO_THROTTLE];
    a85e:	f24b 53c0 	movw	r3, #46528	; 0xb5c0
    a862:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a866:	881a      	ldrh	r2, [r3, #0]
    a868:	f24b 73ec 	movw	r3, #47084	; 0xb7ec
    a86c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a870:	801a      	strh	r2, [r3, #0]
      pitch_pgain = PITCH_PGAIN * ( 1 - 1. / 3. * from_fbw.channels[RADIO_THROTTLE] / MAX_PPRZ);
#endif /* ANTON_MAGICAL_MISTERY_GAINS */
    }
    // else asynchronously set by climb_pid_run();

    mcu1_ppm_cpt = from_fbw.ppm_cpt;
    a872:	f24b 53c0 	movw	r3, #46528	; 0xb5c0
    a876:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a87a:	7c9a      	ldrb	r2, [r3, #18]
    a87c:	f24b 43a4 	movw	r3, #46244	; 0xb4a4
    a880:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a884:	701a      	strb	r2, [r3, #0]
    vsupply = from_fbw.vsupply;
    a886:	f24b 53c0 	movw	r3, #46528	; 0xb5c0
    a88a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a88e:	7d5a      	ldrb	r2, [r3, #21]
    a890:	f24b 43a2 	movw	r3, #46242	; 0xb4a2
    a894:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a898:	701a      	strb	r2, [r3, #0]

    events_update();
    a89a:	f7fa f957 	bl	4b4c <events_update>

    // add by wanbo
    //if (!estimator_flight_time) 
    {
      ground_calibrate();
    a89e:	f7fa f867 	bl	4970 <ground_calibrate>
      if (pprz_mode == PPRZ_MODE_AUTO2 && from_fbw.channels[RADIO_THROTTLE] > GAZ_THRESHOLD_TAKEOFF) {
    a8a2:	f24b 439c 	movw	r3, #46236	; 0xb49c
    a8a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8aa:	781b      	ldrb	r3, [r3, #0]
    a8ac:	2b02      	cmp	r3, #2
    a8ae:	d10e      	bne.n	a8ce <radio_control_task+0x1e2>
    a8b0:	f24b 53c0 	movw	r3, #46528	; 0xb5c0
    a8b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8b8:	881b      	ldrh	r3, [r3, #0]
    a8ba:	b21b      	sxth	r3, r3
    a8bc:	f5b3 5f07 	cmp.w	r3, #8640	; 0x21c0
    a8c0:	dd05      	ble.n	a8ce <radio_control_task+0x1e2>
	launch = TRUE;
    a8c2:	f24b 43b0 	movw	r3, #46256	; 0xb4b0
    a8c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8ca:	2201      	movs	r2, #1
    a8cc:	701a      	strb	r2, [r3, #0]
      }
    }
  }

	//vPrintString("S_3 radio_control_task end! \n\r"); //SunnyBeike
}
    a8ce:	3708      	adds	r7, #8
    a8d0:	46bd      	mov	sp, r7
    a8d2:	bd80      	pop	{r7, pc}
    a8d4:	f3af 8000 	nop.w
    a8d8:	33333333 	.word	0x33333333
    a8dc:	bfe33333 	.word	0xbfe33333

0000a8e0 <navigation_update>:

/** \fn void navigation_task( void )
 *  \brief Compute desired_course
 */
void navigation_update( void ) {
    a8e0:	b580      	push	{r7, lr}
    a8e2:	af00      	add	r7, sp, #0

  /* Default to keep compatibility with previous behaviour */
  //vPrintString("S_17 Navigation task start!\n\r");
  lateral_mode = LATERAL_MODE_COURSE;
    a8e4:	f24b 439e 	movw	r3, #46238	; 0xb49e
    a8e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8ec:	2203      	movs	r2, #3
    a8ee:	701a      	strb	r2, [r3, #0]
  if (pprz_mode == PPRZ_MODE_HOME)
    a8f0:	f24b 439c 	movw	r3, #46236	; 0xb49c
    a8f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8f8:	781b      	ldrb	r3, [r3, #0]
    a8fa:	2b03      	cmp	r3, #3
    a8fc:	d102      	bne.n	a904 <navigation_update+0x24>
    nav_home();
    a8fe:	f005 f917 	bl	fb30 <nav_home>
    a902:	e001      	b.n	a908 <navigation_update+0x28>
  else
    nav_update();
    a904:	f005 f93a 	bl	fb7c <nav_update>
}
    a908:	bd80      	pop	{r7, pc}
    a90a:	bf00      	nop

0000a90c <send_nav_values>:

void send_nav_values(void){
    a90c:	b480      	push	{r7}
    a90e:	af00      	add	r7, sp, #0
  
  DOWNLINK_SEND_NAVIGATION(&nav_block, &nav_stage, &estimator_x, &estimator_y, &desired_course, &dist2_to_wp, &course_pgain, &dist2_to_home);
    a910:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a914:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a918:	781a      	ldrb	r2, [r3, #0]
    a91a:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    a91e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a922:	781b      	ldrb	r3, [r3, #0]
    a924:	b2db      	uxtb	r3, r3
    a926:	429a      	cmp	r2, r3
    a928:	d313      	bcc.n	a952 <send_nav_values+0x46>
    a92a:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    a92e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a932:	781b      	ldrb	r3, [r3, #0]
    a934:	b2db      	uxtb	r3, r3
    a936:	461a      	mov	r2, r3
    a938:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a93c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a940:	781b      	ldrb	r3, [r3, #0]
    a942:	1ad3      	subs	r3, r2, r3
    a944:	33ff      	adds	r3, #255	; 0xff
    a946:	2b1e      	cmp	r3, #30
    a948:	bfd4      	ite	le
    a94a:	2300      	movle	r3, #0
    a94c:	2301      	movgt	r3, #1
    a94e:	b2db      	uxtb	r3, r3
    a950:	e011      	b.n	a976 <send_nav_values+0x6a>
    a952:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    a956:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a95a:	781b      	ldrb	r3, [r3, #0]
    a95c:	b2db      	uxtb	r3, r3
    a95e:	461a      	mov	r2, r3
    a960:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a964:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a968:	781b      	ldrb	r3, [r3, #0]
    a96a:	1ad3      	subs	r3, r2, r3
    a96c:	2b1e      	cmp	r3, #30
    a96e:	bfd4      	ite	le
    a970:	2300      	movle	r3, #0
    a972:	2301      	movgt	r3, #1
    a974:	b2db      	uxtb	r3, r3
    a976:	2b00      	cmp	r3, #0
    a978:	f001 8094 	beq.w	baa4 <send_nav_values+0x1198>
    a97c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a980:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a984:	781b      	ldrb	r3, [r3, #0]
    a986:	461a      	mov	r2, r3
    a988:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    a98c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a990:	2105      	movs	r1, #5
    a992:	5499      	strb	r1, [r3, r2]
    a994:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a998:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a99c:	781b      	ldrb	r3, [r3, #0]
    a99e:	3301      	adds	r3, #1
    a9a0:	b2da      	uxtb	r2, r3
    a9a2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a9a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9aa:	701a      	strb	r2, [r3, #0]
    a9ac:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a9b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9b4:	781b      	ldrb	r3, [r3, #0]
    a9b6:	2bff      	cmp	r3, #255	; 0xff
    a9b8:	d105      	bne.n	a9c6 <send_nav_values+0xba>
    a9ba:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a9be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9c2:	2200      	movs	r2, #0
    a9c4:	701a      	strb	r2, [r3, #0]
    a9c6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a9ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9ce:	781b      	ldrb	r3, [r3, #0]
    a9d0:	461a      	mov	r2, r3
    a9d2:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    a9d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9da:	210a      	movs	r1, #10
    a9dc:	5499      	strb	r1, [r3, r2]
    a9de:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a9e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9e6:	781b      	ldrb	r3, [r3, #0]
    a9e8:	3301      	adds	r3, #1
    a9ea:	b2da      	uxtb	r2, r3
    a9ec:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a9f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9f4:	701a      	strb	r2, [r3, #0]
    a9f6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a9fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9fe:	781b      	ldrb	r3, [r3, #0]
    aa00:	2bff      	cmp	r3, #255	; 0xff
    aa02:	d105      	bne.n	aa10 <send_nav_values+0x104>
    aa04:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    aa08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa0c:	2200      	movs	r2, #0
    aa0e:	701a      	strb	r2, [r3, #0]
    aa10:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    aa14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa18:	220a      	movs	r2, #10
    aa1a:	701a      	strb	r2, [r3, #0]
    aa1c:	f24b 53be 	movw	r3, #46526	; 0xb5be
    aa20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa24:	220a      	movs	r2, #10
    aa26:	701a      	strb	r2, [r3, #0]
    aa28:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    aa2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa30:	781b      	ldrb	r3, [r3, #0]
    aa32:	461a      	mov	r2, r3
    aa34:	f64b 0311 	movw	r3, #47121	; 0xb811
    aa38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa3c:	7819      	ldrb	r1, [r3, #0]
    aa3e:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    aa42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa46:	5499      	strb	r1, [r3, r2]
    aa48:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    aa4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa50:	781a      	ldrb	r2, [r3, #0]
    aa52:	f64b 0311 	movw	r3, #47121	; 0xb811
    aa56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa5a:	781b      	ldrb	r3, [r3, #0]
    aa5c:	4413      	add	r3, r2
    aa5e:	b2da      	uxtb	r2, r3
    aa60:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    aa64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa68:	701a      	strb	r2, [r3, #0]
    aa6a:	f24b 53be 	movw	r3, #46526	; 0xb5be
    aa6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa72:	781a      	ldrb	r2, [r3, #0]
    aa74:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    aa78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa7c:	781b      	ldrb	r3, [r3, #0]
    aa7e:	4413      	add	r3, r2
    aa80:	b2da      	uxtb	r2, r3
    aa82:	f24b 53be 	movw	r3, #46526	; 0xb5be
    aa86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa8a:	701a      	strb	r2, [r3, #0]
    aa8c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    aa90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa94:	781b      	ldrb	r3, [r3, #0]
    aa96:	3301      	adds	r3, #1
    aa98:	b2da      	uxtb	r2, r3
    aa9a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    aa9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aaa2:	701a      	strb	r2, [r3, #0]
    aaa4:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    aaa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aaac:	781b      	ldrb	r3, [r3, #0]
    aaae:	2bff      	cmp	r3, #255	; 0xff
    aab0:	d105      	bne.n	aabe <send_nav_values+0x1b2>
    aab2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    aab6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aaba:	2200      	movs	r2, #0
    aabc:	701a      	strb	r2, [r3, #0]
    aabe:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    aac2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aac6:	781b      	ldrb	r3, [r3, #0]
    aac8:	461a      	mov	r2, r3
    aaca:	f64b 0310 	movw	r3, #47120	; 0xb810
    aace:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aad2:	7819      	ldrb	r1, [r3, #0]
    aad4:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    aad8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aadc:	5499      	strb	r1, [r3, r2]
    aade:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    aae2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aae6:	781a      	ldrb	r2, [r3, #0]
    aae8:	f64b 0310 	movw	r3, #47120	; 0xb810
    aaec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aaf0:	781b      	ldrb	r3, [r3, #0]
    aaf2:	4413      	add	r3, r2
    aaf4:	b2da      	uxtb	r2, r3
    aaf6:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    aafa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aafe:	701a      	strb	r2, [r3, #0]
    ab00:	f24b 53be 	movw	r3, #46526	; 0xb5be
    ab04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab08:	781a      	ldrb	r2, [r3, #0]
    ab0a:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    ab0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab12:	781b      	ldrb	r3, [r3, #0]
    ab14:	4413      	add	r3, r2
    ab16:	b2da      	uxtb	r2, r3
    ab18:	f24b 53be 	movw	r3, #46526	; 0xb5be
    ab1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab20:	701a      	strb	r2, [r3, #0]
    ab22:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    ab26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab2a:	781b      	ldrb	r3, [r3, #0]
    ab2c:	3301      	adds	r3, #1
    ab2e:	b2da      	uxtb	r2, r3
    ab30:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    ab34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab38:	701a      	strb	r2, [r3, #0]
    ab3a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    ab3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab42:	781b      	ldrb	r3, [r3, #0]
    ab44:	2bff      	cmp	r3, #255	; 0xff
    ab46:	d105      	bne.n	ab54 <send_nav_values+0x248>
    ab48:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    ab4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab50:	2200      	movs	r2, #0
    ab52:	701a      	strb	r2, [r3, #0]
    ab54:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    ab58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab5c:	781b      	ldrb	r3, [r3, #0]
    ab5e:	461a      	mov	r2, r3
    ab60:	f64b 236c 	movw	r3, #47724	; 0xba6c
    ab64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab68:	7819      	ldrb	r1, [r3, #0]
    ab6a:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    ab6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab72:	5499      	strb	r1, [r3, r2]
    ab74:	f64b 236c 	movw	r3, #47724	; 0xba6c
    ab78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab7c:	781a      	ldrb	r2, [r3, #0]
    ab7e:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    ab82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab86:	781b      	ldrb	r3, [r3, #0]
    ab88:	4413      	add	r3, r2
    ab8a:	b2da      	uxtb	r2, r3
    ab8c:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    ab90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab94:	701a      	strb	r2, [r3, #0]
    ab96:	f24b 53be 	movw	r3, #46526	; 0xb5be
    ab9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab9e:	781a      	ldrb	r2, [r3, #0]
    aba0:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    aba4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aba8:	781b      	ldrb	r3, [r3, #0]
    abaa:	4413      	add	r3, r2
    abac:	b2da      	uxtb	r2, r3
    abae:	f24b 53be 	movw	r3, #46526	; 0xb5be
    abb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abb6:	701a      	strb	r2, [r3, #0]
    abb8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    abbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abc0:	781b      	ldrb	r3, [r3, #0]
    abc2:	3301      	adds	r3, #1
    abc4:	b2da      	uxtb	r2, r3
    abc6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    abca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abce:	701a      	strb	r2, [r3, #0]
    abd0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    abd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abd8:	781b      	ldrb	r3, [r3, #0]
    abda:	2bff      	cmp	r3, #255	; 0xff
    abdc:	d105      	bne.n	abea <send_nav_values+0x2de>
    abde:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    abe2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abe6:	2200      	movs	r2, #0
    abe8:	701a      	strb	r2, [r3, #0]
    abea:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    abee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abf2:	781b      	ldrb	r3, [r3, #0]
    abf4:	461a      	mov	r2, r3
    abf6:	f64b 236c 	movw	r3, #47724	; 0xba6c
    abfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abfe:	7859      	ldrb	r1, [r3, #1]
    ac00:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    ac04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac08:	5499      	strb	r1, [r3, r2]
    ac0a:	4bd2      	ldr	r3, [pc, #840]	; (af54 <send_nav_values+0x648>)
    ac0c:	781a      	ldrb	r2, [r3, #0]
    ac0e:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    ac12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac16:	781b      	ldrb	r3, [r3, #0]
    ac18:	4413      	add	r3, r2
    ac1a:	b2da      	uxtb	r2, r3
    ac1c:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    ac20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac24:	701a      	strb	r2, [r3, #0]
    ac26:	f24b 53be 	movw	r3, #46526	; 0xb5be
    ac2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac2e:	781a      	ldrb	r2, [r3, #0]
    ac30:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    ac34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac38:	781b      	ldrb	r3, [r3, #0]
    ac3a:	4413      	add	r3, r2
    ac3c:	b2da      	uxtb	r2, r3
    ac3e:	f24b 53be 	movw	r3, #46526	; 0xb5be
    ac42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac46:	701a      	strb	r2, [r3, #0]
    ac48:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    ac4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac50:	781b      	ldrb	r3, [r3, #0]
    ac52:	3301      	adds	r3, #1
    ac54:	b2da      	uxtb	r2, r3
    ac56:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    ac5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac5e:	701a      	strb	r2, [r3, #0]
    ac60:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    ac64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac68:	781b      	ldrb	r3, [r3, #0]
    ac6a:	2bff      	cmp	r3, #255	; 0xff
    ac6c:	d105      	bne.n	ac7a <send_nav_values+0x36e>
    ac6e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    ac72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac76:	2200      	movs	r2, #0
    ac78:	701a      	strb	r2, [r3, #0]
    ac7a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    ac7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac82:	781b      	ldrb	r3, [r3, #0]
    ac84:	461a      	mov	r2, r3
    ac86:	f64b 236c 	movw	r3, #47724	; 0xba6c
    ac8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac8e:	7899      	ldrb	r1, [r3, #2]
    ac90:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    ac94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac98:	5499      	strb	r1, [r3, r2]
    ac9a:	4baf      	ldr	r3, [pc, #700]	; (af58 <send_nav_values+0x64c>)
    ac9c:	781a      	ldrb	r2, [r3, #0]
    ac9e:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    aca2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aca6:	781b      	ldrb	r3, [r3, #0]
    aca8:	4413      	add	r3, r2
    acaa:	b2da      	uxtb	r2, r3
    acac:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    acb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acb4:	701a      	strb	r2, [r3, #0]
    acb6:	f24b 53be 	movw	r3, #46526	; 0xb5be
    acba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acbe:	781a      	ldrb	r2, [r3, #0]
    acc0:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    acc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acc8:	781b      	ldrb	r3, [r3, #0]
    acca:	4413      	add	r3, r2
    accc:	b2da      	uxtb	r2, r3
    acce:	f24b 53be 	movw	r3, #46526	; 0xb5be
    acd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acd6:	701a      	strb	r2, [r3, #0]
    acd8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    acdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ace0:	781b      	ldrb	r3, [r3, #0]
    ace2:	3301      	adds	r3, #1
    ace4:	b2da      	uxtb	r2, r3
    ace6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    acea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acee:	701a      	strb	r2, [r3, #0]
    acf0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    acf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acf8:	781b      	ldrb	r3, [r3, #0]
    acfa:	2bff      	cmp	r3, #255	; 0xff
    acfc:	d105      	bne.n	ad0a <send_nav_values+0x3fe>
    acfe:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    ad02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad06:	2200      	movs	r2, #0
    ad08:	701a      	strb	r2, [r3, #0]
    ad0a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    ad0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad12:	781b      	ldrb	r3, [r3, #0]
    ad14:	461a      	mov	r2, r3
    ad16:	f64b 236c 	movw	r3, #47724	; 0xba6c
    ad1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad1e:	78d9      	ldrb	r1, [r3, #3]
    ad20:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    ad24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad28:	5499      	strb	r1, [r3, r2]
    ad2a:	4b8c      	ldr	r3, [pc, #560]	; (af5c <send_nav_values+0x650>)
    ad2c:	781a      	ldrb	r2, [r3, #0]
    ad2e:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    ad32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad36:	781b      	ldrb	r3, [r3, #0]
    ad38:	4413      	add	r3, r2
    ad3a:	b2da      	uxtb	r2, r3
    ad3c:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    ad40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad44:	701a      	strb	r2, [r3, #0]
    ad46:	f24b 53be 	movw	r3, #46526	; 0xb5be
    ad4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad4e:	781a      	ldrb	r2, [r3, #0]
    ad50:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    ad54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad58:	781b      	ldrb	r3, [r3, #0]
    ad5a:	4413      	add	r3, r2
    ad5c:	b2da      	uxtb	r2, r3
    ad5e:	f24b 53be 	movw	r3, #46526	; 0xb5be
    ad62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad66:	701a      	strb	r2, [r3, #0]
    ad68:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    ad6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad70:	781b      	ldrb	r3, [r3, #0]
    ad72:	3301      	adds	r3, #1
    ad74:	b2da      	uxtb	r2, r3
    ad76:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    ad7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad7e:	701a      	strb	r2, [r3, #0]
    ad80:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    ad84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad88:	781b      	ldrb	r3, [r3, #0]
    ad8a:	2bff      	cmp	r3, #255	; 0xff
    ad8c:	d105      	bne.n	ad9a <send_nav_values+0x48e>
    ad8e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    ad92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad96:	2200      	movs	r2, #0
    ad98:	701a      	strb	r2, [r3, #0]
    ad9a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    ad9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ada2:	781b      	ldrb	r3, [r3, #0]
    ada4:	461a      	mov	r2, r3
    ada6:	f64b 2370 	movw	r3, #47728	; 0xba70
    adaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adae:	7819      	ldrb	r1, [r3, #0]
    adb0:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    adb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adb8:	5499      	strb	r1, [r3, r2]
    adba:	f64b 2370 	movw	r3, #47728	; 0xba70
    adbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adc2:	781a      	ldrb	r2, [r3, #0]
    adc4:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    adc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adcc:	781b      	ldrb	r3, [r3, #0]
    adce:	4413      	add	r3, r2
    add0:	b2da      	uxtb	r2, r3
    add2:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    add6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adda:	701a      	strb	r2, [r3, #0]
    addc:	f24b 53be 	movw	r3, #46526	; 0xb5be
    ade0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ade4:	781a      	ldrb	r2, [r3, #0]
    ade6:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    adea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adee:	781b      	ldrb	r3, [r3, #0]
    adf0:	4413      	add	r3, r2
    adf2:	b2da      	uxtb	r2, r3
    adf4:	f24b 53be 	movw	r3, #46526	; 0xb5be
    adf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adfc:	701a      	strb	r2, [r3, #0]
    adfe:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    ae02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae06:	781b      	ldrb	r3, [r3, #0]
    ae08:	3301      	adds	r3, #1
    ae0a:	b2da      	uxtb	r2, r3
    ae0c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    ae10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae14:	701a      	strb	r2, [r3, #0]
    ae16:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    ae1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae1e:	781b      	ldrb	r3, [r3, #0]
    ae20:	2bff      	cmp	r3, #255	; 0xff
    ae22:	d105      	bne.n	ae30 <send_nav_values+0x524>
    ae24:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    ae28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae2c:	2200      	movs	r2, #0
    ae2e:	701a      	strb	r2, [r3, #0]
    ae30:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    ae34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae38:	781b      	ldrb	r3, [r3, #0]
    ae3a:	461a      	mov	r2, r3
    ae3c:	f64b 2370 	movw	r3, #47728	; 0xba70
    ae40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae44:	7859      	ldrb	r1, [r3, #1]
    ae46:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    ae4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae4e:	5499      	strb	r1, [r3, r2]
    ae50:	4b43      	ldr	r3, [pc, #268]	; (af60 <send_nav_values+0x654>)
    ae52:	781a      	ldrb	r2, [r3, #0]
    ae54:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    ae58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae5c:	781b      	ldrb	r3, [r3, #0]
    ae5e:	4413      	add	r3, r2
    ae60:	b2da      	uxtb	r2, r3
    ae62:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    ae66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae6a:	701a      	strb	r2, [r3, #0]
    ae6c:	f24b 53be 	movw	r3, #46526	; 0xb5be
    ae70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae74:	781a      	ldrb	r2, [r3, #0]
    ae76:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    ae7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae7e:	781b      	ldrb	r3, [r3, #0]
    ae80:	4413      	add	r3, r2
    ae82:	b2da      	uxtb	r2, r3
    ae84:	f24b 53be 	movw	r3, #46526	; 0xb5be
    ae88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae8c:	701a      	strb	r2, [r3, #0]
    ae8e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    ae92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae96:	781b      	ldrb	r3, [r3, #0]
    ae98:	3301      	adds	r3, #1
    ae9a:	b2da      	uxtb	r2, r3
    ae9c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    aea0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aea4:	701a      	strb	r2, [r3, #0]
    aea6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    aeaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aeae:	781b      	ldrb	r3, [r3, #0]
    aeb0:	2bff      	cmp	r3, #255	; 0xff
    aeb2:	d105      	bne.n	aec0 <send_nav_values+0x5b4>
    aeb4:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    aeb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aebc:	2200      	movs	r2, #0
    aebe:	701a      	strb	r2, [r3, #0]
    aec0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    aec4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aec8:	781b      	ldrb	r3, [r3, #0]
    aeca:	461a      	mov	r2, r3
    aecc:	f64b 2370 	movw	r3, #47728	; 0xba70
    aed0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aed4:	7899      	ldrb	r1, [r3, #2]
    aed6:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    aeda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aede:	5499      	strb	r1, [r3, r2]
    aee0:	4b20      	ldr	r3, [pc, #128]	; (af64 <send_nav_values+0x658>)
    aee2:	781a      	ldrb	r2, [r3, #0]
    aee4:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    aee8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aeec:	781b      	ldrb	r3, [r3, #0]
    aeee:	4413      	add	r3, r2
    aef0:	b2da      	uxtb	r2, r3
    aef2:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    aef6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aefa:	701a      	strb	r2, [r3, #0]
    aefc:	f24b 53be 	movw	r3, #46526	; 0xb5be
    af00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af04:	781a      	ldrb	r2, [r3, #0]
    af06:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    af0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af0e:	781b      	ldrb	r3, [r3, #0]
    af10:	4413      	add	r3, r2
    af12:	b2da      	uxtb	r2, r3
    af14:	f24b 53be 	movw	r3, #46526	; 0xb5be
    af18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af1c:	701a      	strb	r2, [r3, #0]
    af1e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    af22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af26:	781b      	ldrb	r3, [r3, #0]
    af28:	3301      	adds	r3, #1
    af2a:	b2da      	uxtb	r2, r3
    af2c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    af30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af34:	701a      	strb	r2, [r3, #0]
    af36:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    af3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af3e:	781b      	ldrb	r3, [r3, #0]
    af40:	2bff      	cmp	r3, #255	; 0xff
    af42:	d111      	bne.n	af68 <send_nav_values+0x65c>
    af44:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    af48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af4c:	2200      	movs	r2, #0
    af4e:	701a      	strb	r2, [r3, #0]
    af50:	e00a      	b.n	af68 <send_nav_values+0x65c>
    af52:	bf00      	nop
    af54:	2004ba6d 	.word	0x2004ba6d
    af58:	2004ba6e 	.word	0x2004ba6e
    af5c:	2004ba6f 	.word	0x2004ba6f
    af60:	2004ba71 	.word	0x2004ba71
    af64:	2004ba72 	.word	0x2004ba72
    af68:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    af6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af70:	781b      	ldrb	r3, [r3, #0]
    af72:	461a      	mov	r2, r3
    af74:	f64b 2370 	movw	r3, #47728	; 0xba70
    af78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af7c:	78d9      	ldrb	r1, [r3, #3]
    af7e:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    af82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af86:	5499      	strb	r1, [r3, r2]
    af88:	4bd3      	ldr	r3, [pc, #844]	; (b2d8 <send_nav_values+0x9cc>)
    af8a:	781a      	ldrb	r2, [r3, #0]
    af8c:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    af90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af94:	781b      	ldrb	r3, [r3, #0]
    af96:	4413      	add	r3, r2
    af98:	b2da      	uxtb	r2, r3
    af9a:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    af9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afa2:	701a      	strb	r2, [r3, #0]
    afa4:	f24b 53be 	movw	r3, #46526	; 0xb5be
    afa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afac:	781a      	ldrb	r2, [r3, #0]
    afae:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    afb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afb6:	781b      	ldrb	r3, [r3, #0]
    afb8:	4413      	add	r3, r2
    afba:	b2da      	uxtb	r2, r3
    afbc:	f24b 53be 	movw	r3, #46526	; 0xb5be
    afc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afc4:	701a      	strb	r2, [r3, #0]
    afc6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    afca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afce:	781b      	ldrb	r3, [r3, #0]
    afd0:	3301      	adds	r3, #1
    afd2:	b2da      	uxtb	r2, r3
    afd4:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    afd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afdc:	701a      	strb	r2, [r3, #0]
    afde:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    afe2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afe6:	781b      	ldrb	r3, [r3, #0]
    afe8:	2bff      	cmp	r3, #255	; 0xff
    afea:	d105      	bne.n	aff8 <send_nav_values+0x6ec>
    afec:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    aff0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aff4:	2200      	movs	r2, #0
    aff6:	701a      	strb	r2, [r3, #0]
    aff8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    affc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b000:	781b      	ldrb	r3, [r3, #0]
    b002:	461a      	mov	r2, r3
    b004:	f24b 73fc 	movw	r3, #47100	; 0xb7fc
    b008:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b00c:	7819      	ldrb	r1, [r3, #0]
    b00e:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    b012:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b016:	5499      	strb	r1, [r3, r2]
    b018:	f24b 73fc 	movw	r3, #47100	; 0xb7fc
    b01c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b020:	781a      	ldrb	r2, [r3, #0]
    b022:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b026:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b02a:	781b      	ldrb	r3, [r3, #0]
    b02c:	4413      	add	r3, r2
    b02e:	b2da      	uxtb	r2, r3
    b030:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b034:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b038:	701a      	strb	r2, [r3, #0]
    b03a:	f24b 53be 	movw	r3, #46526	; 0xb5be
    b03e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b042:	781a      	ldrb	r2, [r3, #0]
    b044:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b048:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b04c:	781b      	ldrb	r3, [r3, #0]
    b04e:	4413      	add	r3, r2
    b050:	b2da      	uxtb	r2, r3
    b052:	f24b 53be 	movw	r3, #46526	; 0xb5be
    b056:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b05a:	701a      	strb	r2, [r3, #0]
    b05c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b060:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b064:	781b      	ldrb	r3, [r3, #0]
    b066:	3301      	adds	r3, #1
    b068:	b2da      	uxtb	r2, r3
    b06a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b06e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b072:	701a      	strb	r2, [r3, #0]
    b074:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b078:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b07c:	781b      	ldrb	r3, [r3, #0]
    b07e:	2bff      	cmp	r3, #255	; 0xff
    b080:	d105      	bne.n	b08e <send_nav_values+0x782>
    b082:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b086:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b08a:	2200      	movs	r2, #0
    b08c:	701a      	strb	r2, [r3, #0]
    b08e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b092:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b096:	781b      	ldrb	r3, [r3, #0]
    b098:	461a      	mov	r2, r3
    b09a:	f24b 73fc 	movw	r3, #47100	; 0xb7fc
    b09e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0a2:	7859      	ldrb	r1, [r3, #1]
    b0a4:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    b0a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0ac:	5499      	strb	r1, [r3, r2]
    b0ae:	4b8b      	ldr	r3, [pc, #556]	; (b2dc <send_nav_values+0x9d0>)
    b0b0:	781a      	ldrb	r2, [r3, #0]
    b0b2:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b0b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0ba:	781b      	ldrb	r3, [r3, #0]
    b0bc:	4413      	add	r3, r2
    b0be:	b2da      	uxtb	r2, r3
    b0c0:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b0c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0c8:	701a      	strb	r2, [r3, #0]
    b0ca:	f24b 53be 	movw	r3, #46526	; 0xb5be
    b0ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0d2:	781a      	ldrb	r2, [r3, #0]
    b0d4:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b0d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0dc:	781b      	ldrb	r3, [r3, #0]
    b0de:	4413      	add	r3, r2
    b0e0:	b2da      	uxtb	r2, r3
    b0e2:	f24b 53be 	movw	r3, #46526	; 0xb5be
    b0e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0ea:	701a      	strb	r2, [r3, #0]
    b0ec:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b0f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0f4:	781b      	ldrb	r3, [r3, #0]
    b0f6:	3301      	adds	r3, #1
    b0f8:	b2da      	uxtb	r2, r3
    b0fa:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b0fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b102:	701a      	strb	r2, [r3, #0]
    b104:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b108:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b10c:	781b      	ldrb	r3, [r3, #0]
    b10e:	2bff      	cmp	r3, #255	; 0xff
    b110:	d105      	bne.n	b11e <send_nav_values+0x812>
    b112:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b116:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b11a:	2200      	movs	r2, #0
    b11c:	701a      	strb	r2, [r3, #0]
    b11e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b122:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b126:	781b      	ldrb	r3, [r3, #0]
    b128:	461a      	mov	r2, r3
    b12a:	f24b 73fc 	movw	r3, #47100	; 0xb7fc
    b12e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b132:	7899      	ldrb	r1, [r3, #2]
    b134:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    b138:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b13c:	5499      	strb	r1, [r3, r2]
    b13e:	4b68      	ldr	r3, [pc, #416]	; (b2e0 <send_nav_values+0x9d4>)
    b140:	781a      	ldrb	r2, [r3, #0]
    b142:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b146:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b14a:	781b      	ldrb	r3, [r3, #0]
    b14c:	4413      	add	r3, r2
    b14e:	b2da      	uxtb	r2, r3
    b150:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b154:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b158:	701a      	strb	r2, [r3, #0]
    b15a:	f24b 53be 	movw	r3, #46526	; 0xb5be
    b15e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b162:	781a      	ldrb	r2, [r3, #0]
    b164:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b168:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b16c:	781b      	ldrb	r3, [r3, #0]
    b16e:	4413      	add	r3, r2
    b170:	b2da      	uxtb	r2, r3
    b172:	f24b 53be 	movw	r3, #46526	; 0xb5be
    b176:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b17a:	701a      	strb	r2, [r3, #0]
    b17c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b180:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b184:	781b      	ldrb	r3, [r3, #0]
    b186:	3301      	adds	r3, #1
    b188:	b2da      	uxtb	r2, r3
    b18a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b18e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b192:	701a      	strb	r2, [r3, #0]
    b194:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b198:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b19c:	781b      	ldrb	r3, [r3, #0]
    b19e:	2bff      	cmp	r3, #255	; 0xff
    b1a0:	d105      	bne.n	b1ae <send_nav_values+0x8a2>
    b1a2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b1a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1aa:	2200      	movs	r2, #0
    b1ac:	701a      	strb	r2, [r3, #0]
    b1ae:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b1b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1b6:	781b      	ldrb	r3, [r3, #0]
    b1b8:	461a      	mov	r2, r3
    b1ba:	f24b 73fc 	movw	r3, #47100	; 0xb7fc
    b1be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1c2:	78d9      	ldrb	r1, [r3, #3]
    b1c4:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    b1c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1cc:	5499      	strb	r1, [r3, r2]
    b1ce:	4b45      	ldr	r3, [pc, #276]	; (b2e4 <send_nav_values+0x9d8>)
    b1d0:	781a      	ldrb	r2, [r3, #0]
    b1d2:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b1d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1da:	781b      	ldrb	r3, [r3, #0]
    b1dc:	4413      	add	r3, r2
    b1de:	b2da      	uxtb	r2, r3
    b1e0:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b1e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1e8:	701a      	strb	r2, [r3, #0]
    b1ea:	f24b 53be 	movw	r3, #46526	; 0xb5be
    b1ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1f2:	781a      	ldrb	r2, [r3, #0]
    b1f4:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b1f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1fc:	781b      	ldrb	r3, [r3, #0]
    b1fe:	4413      	add	r3, r2
    b200:	b2da      	uxtb	r2, r3
    b202:	f24b 53be 	movw	r3, #46526	; 0xb5be
    b206:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b20a:	701a      	strb	r2, [r3, #0]
    b20c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b210:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b214:	781b      	ldrb	r3, [r3, #0]
    b216:	3301      	adds	r3, #1
    b218:	b2da      	uxtb	r2, r3
    b21a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b21e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b222:	701a      	strb	r2, [r3, #0]
    b224:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b228:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b22c:	781b      	ldrb	r3, [r3, #0]
    b22e:	2bff      	cmp	r3, #255	; 0xff
    b230:	d105      	bne.n	b23e <send_nav_values+0x932>
    b232:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b236:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b23a:	2200      	movs	r2, #0
    b23c:	701a      	strb	r2, [r3, #0]
    b23e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b242:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b246:	781b      	ldrb	r3, [r3, #0]
    b248:	461a      	mov	r2, r3
    b24a:	f64b 0344 	movw	r3, #47172	; 0xb844
    b24e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b252:	7819      	ldrb	r1, [r3, #0]
    b254:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    b258:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b25c:	5499      	strb	r1, [r3, r2]
    b25e:	f64b 0344 	movw	r3, #47172	; 0xb844
    b262:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b266:	781a      	ldrb	r2, [r3, #0]
    b268:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b26c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b270:	781b      	ldrb	r3, [r3, #0]
    b272:	4413      	add	r3, r2
    b274:	b2da      	uxtb	r2, r3
    b276:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b27a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b27e:	701a      	strb	r2, [r3, #0]
    b280:	f24b 53be 	movw	r3, #46526	; 0xb5be
    b284:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b288:	781a      	ldrb	r2, [r3, #0]
    b28a:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b28e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b292:	781b      	ldrb	r3, [r3, #0]
    b294:	4413      	add	r3, r2
    b296:	b2da      	uxtb	r2, r3
    b298:	f24b 53be 	movw	r3, #46526	; 0xb5be
    b29c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2a0:	701a      	strb	r2, [r3, #0]
    b2a2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b2a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2aa:	781b      	ldrb	r3, [r3, #0]
    b2ac:	3301      	adds	r3, #1
    b2ae:	b2da      	uxtb	r2, r3
    b2b0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b2b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2b8:	701a      	strb	r2, [r3, #0]
    b2ba:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b2be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2c2:	781b      	ldrb	r3, [r3, #0]
    b2c4:	2bff      	cmp	r3, #255	; 0xff
    b2c6:	d10f      	bne.n	b2e8 <send_nav_values+0x9dc>
    b2c8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b2cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2d0:	2200      	movs	r2, #0
    b2d2:	701a      	strb	r2, [r3, #0]
    b2d4:	e008      	b.n	b2e8 <send_nav_values+0x9dc>
    b2d6:	bf00      	nop
    b2d8:	2004ba73 	.word	0x2004ba73
    b2dc:	2004b7fd 	.word	0x2004b7fd
    b2e0:	2004b7fe 	.word	0x2004b7fe
    b2e4:	2004b7ff 	.word	0x2004b7ff
    b2e8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b2ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2f0:	781b      	ldrb	r3, [r3, #0]
    b2f2:	461a      	mov	r2, r3
    b2f4:	f64b 0344 	movw	r3, #47172	; 0xb844
    b2f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2fc:	7859      	ldrb	r1, [r3, #1]
    b2fe:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    b302:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b306:	5499      	strb	r1, [r3, r2]
    b308:	4bd1      	ldr	r3, [pc, #836]	; (b650 <send_nav_values+0xd44>)
    b30a:	781a      	ldrb	r2, [r3, #0]
    b30c:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b310:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b314:	781b      	ldrb	r3, [r3, #0]
    b316:	4413      	add	r3, r2
    b318:	b2da      	uxtb	r2, r3
    b31a:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b31e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b322:	701a      	strb	r2, [r3, #0]
    b324:	f24b 53be 	movw	r3, #46526	; 0xb5be
    b328:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b32c:	781a      	ldrb	r2, [r3, #0]
    b32e:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b332:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b336:	781b      	ldrb	r3, [r3, #0]
    b338:	4413      	add	r3, r2
    b33a:	b2da      	uxtb	r2, r3
    b33c:	f24b 53be 	movw	r3, #46526	; 0xb5be
    b340:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b344:	701a      	strb	r2, [r3, #0]
    b346:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b34a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b34e:	781b      	ldrb	r3, [r3, #0]
    b350:	3301      	adds	r3, #1
    b352:	b2da      	uxtb	r2, r3
    b354:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b358:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b35c:	701a      	strb	r2, [r3, #0]
    b35e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b362:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b366:	781b      	ldrb	r3, [r3, #0]
    b368:	2bff      	cmp	r3, #255	; 0xff
    b36a:	d105      	bne.n	b378 <send_nav_values+0xa6c>
    b36c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b370:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b374:	2200      	movs	r2, #0
    b376:	701a      	strb	r2, [r3, #0]
    b378:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b37c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b380:	781b      	ldrb	r3, [r3, #0]
    b382:	461a      	mov	r2, r3
    b384:	f64b 0344 	movw	r3, #47172	; 0xb844
    b388:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b38c:	7899      	ldrb	r1, [r3, #2]
    b38e:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    b392:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b396:	5499      	strb	r1, [r3, r2]
    b398:	4bae      	ldr	r3, [pc, #696]	; (b654 <send_nav_values+0xd48>)
    b39a:	781a      	ldrb	r2, [r3, #0]
    b39c:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b3a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3a4:	781b      	ldrb	r3, [r3, #0]
    b3a6:	4413      	add	r3, r2
    b3a8:	b2da      	uxtb	r2, r3
    b3aa:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b3ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3b2:	701a      	strb	r2, [r3, #0]
    b3b4:	f24b 53be 	movw	r3, #46526	; 0xb5be
    b3b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3bc:	781a      	ldrb	r2, [r3, #0]
    b3be:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b3c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3c6:	781b      	ldrb	r3, [r3, #0]
    b3c8:	4413      	add	r3, r2
    b3ca:	b2da      	uxtb	r2, r3
    b3cc:	f24b 53be 	movw	r3, #46526	; 0xb5be
    b3d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3d4:	701a      	strb	r2, [r3, #0]
    b3d6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b3da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3de:	781b      	ldrb	r3, [r3, #0]
    b3e0:	3301      	adds	r3, #1
    b3e2:	b2da      	uxtb	r2, r3
    b3e4:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b3e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3ec:	701a      	strb	r2, [r3, #0]
    b3ee:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b3f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3f6:	781b      	ldrb	r3, [r3, #0]
    b3f8:	2bff      	cmp	r3, #255	; 0xff
    b3fa:	d105      	bne.n	b408 <send_nav_values+0xafc>
    b3fc:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b400:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b404:	2200      	movs	r2, #0
    b406:	701a      	strb	r2, [r3, #0]
    b408:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b40c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b410:	781b      	ldrb	r3, [r3, #0]
    b412:	461a      	mov	r2, r3
    b414:	f64b 0344 	movw	r3, #47172	; 0xb844
    b418:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b41c:	78d9      	ldrb	r1, [r3, #3]
    b41e:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    b422:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b426:	5499      	strb	r1, [r3, r2]
    b428:	4b8b      	ldr	r3, [pc, #556]	; (b658 <send_nav_values+0xd4c>)
    b42a:	781a      	ldrb	r2, [r3, #0]
    b42c:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b430:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b434:	781b      	ldrb	r3, [r3, #0]
    b436:	4413      	add	r3, r2
    b438:	b2da      	uxtb	r2, r3
    b43a:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b43e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b442:	701a      	strb	r2, [r3, #0]
    b444:	f24b 53be 	movw	r3, #46526	; 0xb5be
    b448:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b44c:	781a      	ldrb	r2, [r3, #0]
    b44e:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b452:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b456:	781b      	ldrb	r3, [r3, #0]
    b458:	4413      	add	r3, r2
    b45a:	b2da      	uxtb	r2, r3
    b45c:	f24b 53be 	movw	r3, #46526	; 0xb5be
    b460:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b464:	701a      	strb	r2, [r3, #0]
    b466:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b46a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b46e:	781b      	ldrb	r3, [r3, #0]
    b470:	3301      	adds	r3, #1
    b472:	b2da      	uxtb	r2, r3
    b474:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b478:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b47c:	701a      	strb	r2, [r3, #0]
    b47e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b482:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b486:	781b      	ldrb	r3, [r3, #0]
    b488:	2bff      	cmp	r3, #255	; 0xff
    b48a:	d105      	bne.n	b498 <send_nav_values+0xb8c>
    b48c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b490:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b494:	2200      	movs	r2, #0
    b496:	701a      	strb	r2, [r3, #0]
    b498:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b49c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4a0:	781b      	ldrb	r3, [r3, #0]
    b4a2:	461a      	mov	r2, r3
    b4a4:	f240 1320 	movw	r3, #288	; 0x120
    b4a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4ac:	7819      	ldrb	r1, [r3, #0]
    b4ae:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    b4b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4b6:	5499      	strb	r1, [r3, r2]
    b4b8:	f240 1320 	movw	r3, #288	; 0x120
    b4bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4c0:	781a      	ldrb	r2, [r3, #0]
    b4c2:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b4c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4ca:	781b      	ldrb	r3, [r3, #0]
    b4cc:	4413      	add	r3, r2
    b4ce:	b2da      	uxtb	r2, r3
    b4d0:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b4d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4d8:	701a      	strb	r2, [r3, #0]
    b4da:	f24b 53be 	movw	r3, #46526	; 0xb5be
    b4de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4e2:	781a      	ldrb	r2, [r3, #0]
    b4e4:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b4e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4ec:	781b      	ldrb	r3, [r3, #0]
    b4ee:	4413      	add	r3, r2
    b4f0:	b2da      	uxtb	r2, r3
    b4f2:	f24b 53be 	movw	r3, #46526	; 0xb5be
    b4f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4fa:	701a      	strb	r2, [r3, #0]
    b4fc:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b500:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b504:	781b      	ldrb	r3, [r3, #0]
    b506:	3301      	adds	r3, #1
    b508:	b2da      	uxtb	r2, r3
    b50a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b50e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b512:	701a      	strb	r2, [r3, #0]
    b514:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b518:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b51c:	781b      	ldrb	r3, [r3, #0]
    b51e:	2bff      	cmp	r3, #255	; 0xff
    b520:	d105      	bne.n	b52e <send_nav_values+0xc22>
    b522:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b526:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b52a:	2200      	movs	r2, #0
    b52c:	701a      	strb	r2, [r3, #0]
    b52e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b532:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b536:	781b      	ldrb	r3, [r3, #0]
    b538:	461a      	mov	r2, r3
    b53a:	f240 1320 	movw	r3, #288	; 0x120
    b53e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b542:	7859      	ldrb	r1, [r3, #1]
    b544:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    b548:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b54c:	5499      	strb	r1, [r3, r2]
    b54e:	4b43      	ldr	r3, [pc, #268]	; (b65c <send_nav_values+0xd50>)
    b550:	781a      	ldrb	r2, [r3, #0]
    b552:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b556:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b55a:	781b      	ldrb	r3, [r3, #0]
    b55c:	4413      	add	r3, r2
    b55e:	b2da      	uxtb	r2, r3
    b560:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b564:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b568:	701a      	strb	r2, [r3, #0]
    b56a:	f24b 53be 	movw	r3, #46526	; 0xb5be
    b56e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b572:	781a      	ldrb	r2, [r3, #0]
    b574:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b578:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b57c:	781b      	ldrb	r3, [r3, #0]
    b57e:	4413      	add	r3, r2
    b580:	b2da      	uxtb	r2, r3
    b582:	f24b 53be 	movw	r3, #46526	; 0xb5be
    b586:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b58a:	701a      	strb	r2, [r3, #0]
    b58c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b590:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b594:	781b      	ldrb	r3, [r3, #0]
    b596:	3301      	adds	r3, #1
    b598:	b2da      	uxtb	r2, r3
    b59a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b59e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5a2:	701a      	strb	r2, [r3, #0]
    b5a4:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b5a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5ac:	781b      	ldrb	r3, [r3, #0]
    b5ae:	2bff      	cmp	r3, #255	; 0xff
    b5b0:	d105      	bne.n	b5be <send_nav_values+0xcb2>
    b5b2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b5b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5ba:	2200      	movs	r2, #0
    b5bc:	701a      	strb	r2, [r3, #0]
    b5be:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b5c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5c6:	781b      	ldrb	r3, [r3, #0]
    b5c8:	461a      	mov	r2, r3
    b5ca:	f240 1320 	movw	r3, #288	; 0x120
    b5ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5d2:	7899      	ldrb	r1, [r3, #2]
    b5d4:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    b5d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5dc:	5499      	strb	r1, [r3, r2]
    b5de:	4b20      	ldr	r3, [pc, #128]	; (b660 <send_nav_values+0xd54>)
    b5e0:	781a      	ldrb	r2, [r3, #0]
    b5e2:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b5e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5ea:	781b      	ldrb	r3, [r3, #0]
    b5ec:	4413      	add	r3, r2
    b5ee:	b2da      	uxtb	r2, r3
    b5f0:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b5f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5f8:	701a      	strb	r2, [r3, #0]
    b5fa:	f24b 53be 	movw	r3, #46526	; 0xb5be
    b5fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b602:	781a      	ldrb	r2, [r3, #0]
    b604:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b608:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b60c:	781b      	ldrb	r3, [r3, #0]
    b60e:	4413      	add	r3, r2
    b610:	b2da      	uxtb	r2, r3
    b612:	f24b 53be 	movw	r3, #46526	; 0xb5be
    b616:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b61a:	701a      	strb	r2, [r3, #0]
    b61c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b620:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b624:	781b      	ldrb	r3, [r3, #0]
    b626:	3301      	adds	r3, #1
    b628:	b2da      	uxtb	r2, r3
    b62a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b62e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b632:	701a      	strb	r2, [r3, #0]
    b634:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b638:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b63c:	781b      	ldrb	r3, [r3, #0]
    b63e:	2bff      	cmp	r3, #255	; 0xff
    b640:	d110      	bne.n	b664 <send_nav_values+0xd58>
    b642:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b646:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b64a:	2200      	movs	r2, #0
    b64c:	701a      	strb	r2, [r3, #0]
    b64e:	e009      	b.n	b664 <send_nav_values+0xd58>
    b650:	2004b845 	.word	0x2004b845
    b654:	2004b846 	.word	0x2004b846
    b658:	2004b847 	.word	0x2004b847
    b65c:	20000121 	.word	0x20000121
    b660:	20000122 	.word	0x20000122
    b664:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b668:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b66c:	781b      	ldrb	r3, [r3, #0]
    b66e:	461a      	mov	r2, r3
    b670:	f240 1320 	movw	r3, #288	; 0x120
    b674:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b678:	78d9      	ldrb	r1, [r3, #3]
    b67a:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    b67e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b682:	5499      	strb	r1, [r3, r2]
    b684:	4bc2      	ldr	r3, [pc, #776]	; (b990 <send_nav_values+0x1084>)
    b686:	781a      	ldrb	r2, [r3, #0]
    b688:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b68c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b690:	781b      	ldrb	r3, [r3, #0]
    b692:	4413      	add	r3, r2
    b694:	b2da      	uxtb	r2, r3
    b696:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b69a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b69e:	701a      	strb	r2, [r3, #0]
    b6a0:	f24b 53be 	movw	r3, #46526	; 0xb5be
    b6a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6a8:	781a      	ldrb	r2, [r3, #0]
    b6aa:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b6ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6b2:	781b      	ldrb	r3, [r3, #0]
    b6b4:	4413      	add	r3, r2
    b6b6:	b2da      	uxtb	r2, r3
    b6b8:	f24b 53be 	movw	r3, #46526	; 0xb5be
    b6bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6c0:	701a      	strb	r2, [r3, #0]
    b6c2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b6c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6ca:	781b      	ldrb	r3, [r3, #0]
    b6cc:	3301      	adds	r3, #1
    b6ce:	b2da      	uxtb	r2, r3
    b6d0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b6d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6d8:	701a      	strb	r2, [r3, #0]
    b6da:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b6de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6e2:	781b      	ldrb	r3, [r3, #0]
    b6e4:	2bff      	cmp	r3, #255	; 0xff
    b6e6:	d105      	bne.n	b6f4 <send_nav_values+0xde8>
    b6e8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b6ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6f0:	2200      	movs	r2, #0
    b6f2:	701a      	strb	r2, [r3, #0]
    b6f4:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b6f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6fc:	781b      	ldrb	r3, [r3, #0]
    b6fe:	461a      	mov	r2, r3
    b700:	f64b 0348 	movw	r3, #47176	; 0xb848
    b704:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b708:	7819      	ldrb	r1, [r3, #0]
    b70a:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    b70e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b712:	5499      	strb	r1, [r3, r2]
    b714:	f64b 0348 	movw	r3, #47176	; 0xb848
    b718:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b71c:	781a      	ldrb	r2, [r3, #0]
    b71e:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b722:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b726:	781b      	ldrb	r3, [r3, #0]
    b728:	4413      	add	r3, r2
    b72a:	b2da      	uxtb	r2, r3
    b72c:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b730:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b734:	701a      	strb	r2, [r3, #0]
    b736:	f24b 53be 	movw	r3, #46526	; 0xb5be
    b73a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b73e:	781a      	ldrb	r2, [r3, #0]
    b740:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b744:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b748:	781b      	ldrb	r3, [r3, #0]
    b74a:	4413      	add	r3, r2
    b74c:	b2da      	uxtb	r2, r3
    b74e:	f24b 53be 	movw	r3, #46526	; 0xb5be
    b752:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b756:	701a      	strb	r2, [r3, #0]
    b758:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b75c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b760:	781b      	ldrb	r3, [r3, #0]
    b762:	3301      	adds	r3, #1
    b764:	b2da      	uxtb	r2, r3
    b766:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b76a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b76e:	701a      	strb	r2, [r3, #0]
    b770:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b774:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b778:	781b      	ldrb	r3, [r3, #0]
    b77a:	2bff      	cmp	r3, #255	; 0xff
    b77c:	d105      	bne.n	b78a <send_nav_values+0xe7e>
    b77e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b782:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b786:	2200      	movs	r2, #0
    b788:	701a      	strb	r2, [r3, #0]
    b78a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b78e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b792:	781b      	ldrb	r3, [r3, #0]
    b794:	461a      	mov	r2, r3
    b796:	f64b 0348 	movw	r3, #47176	; 0xb848
    b79a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b79e:	7859      	ldrb	r1, [r3, #1]
    b7a0:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    b7a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7a8:	5499      	strb	r1, [r3, r2]
    b7aa:	4b7a      	ldr	r3, [pc, #488]	; (b994 <send_nav_values+0x1088>)
    b7ac:	781a      	ldrb	r2, [r3, #0]
    b7ae:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b7b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7b6:	781b      	ldrb	r3, [r3, #0]
    b7b8:	4413      	add	r3, r2
    b7ba:	b2da      	uxtb	r2, r3
    b7bc:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b7c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7c4:	701a      	strb	r2, [r3, #0]
    b7c6:	f24b 53be 	movw	r3, #46526	; 0xb5be
    b7ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7ce:	781a      	ldrb	r2, [r3, #0]
    b7d0:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b7d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7d8:	781b      	ldrb	r3, [r3, #0]
    b7da:	4413      	add	r3, r2
    b7dc:	b2da      	uxtb	r2, r3
    b7de:	f24b 53be 	movw	r3, #46526	; 0xb5be
    b7e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7e6:	701a      	strb	r2, [r3, #0]
    b7e8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b7ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7f0:	781b      	ldrb	r3, [r3, #0]
    b7f2:	3301      	adds	r3, #1
    b7f4:	b2da      	uxtb	r2, r3
    b7f6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b7fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7fe:	701a      	strb	r2, [r3, #0]
    b800:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b804:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b808:	781b      	ldrb	r3, [r3, #0]
    b80a:	2bff      	cmp	r3, #255	; 0xff
    b80c:	d105      	bne.n	b81a <send_nav_values+0xf0e>
    b80e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b812:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b816:	2200      	movs	r2, #0
    b818:	701a      	strb	r2, [r3, #0]
    b81a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b81e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b822:	781b      	ldrb	r3, [r3, #0]
    b824:	461a      	mov	r2, r3
    b826:	f64b 0348 	movw	r3, #47176	; 0xb848
    b82a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b82e:	7899      	ldrb	r1, [r3, #2]
    b830:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    b834:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b838:	5499      	strb	r1, [r3, r2]
    b83a:	4b57      	ldr	r3, [pc, #348]	; (b998 <send_nav_values+0x108c>)
    b83c:	781a      	ldrb	r2, [r3, #0]
    b83e:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b842:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b846:	781b      	ldrb	r3, [r3, #0]
    b848:	4413      	add	r3, r2
    b84a:	b2da      	uxtb	r2, r3
    b84c:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b850:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b854:	701a      	strb	r2, [r3, #0]
    b856:	f24b 53be 	movw	r3, #46526	; 0xb5be
    b85a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b85e:	781a      	ldrb	r2, [r3, #0]
    b860:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b864:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b868:	781b      	ldrb	r3, [r3, #0]
    b86a:	4413      	add	r3, r2
    b86c:	b2da      	uxtb	r2, r3
    b86e:	f24b 53be 	movw	r3, #46526	; 0xb5be
    b872:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b876:	701a      	strb	r2, [r3, #0]
    b878:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b87c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b880:	781b      	ldrb	r3, [r3, #0]
    b882:	3301      	adds	r3, #1
    b884:	b2da      	uxtb	r2, r3
    b886:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b88a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b88e:	701a      	strb	r2, [r3, #0]
    b890:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b894:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b898:	781b      	ldrb	r3, [r3, #0]
    b89a:	2bff      	cmp	r3, #255	; 0xff
    b89c:	d105      	bne.n	b8aa <send_nav_values+0xf9e>
    b89e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b8a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8a6:	2200      	movs	r2, #0
    b8a8:	701a      	strb	r2, [r3, #0]
    b8aa:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b8ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8b2:	781b      	ldrb	r3, [r3, #0]
    b8b4:	461a      	mov	r2, r3
    b8b6:	f64b 0348 	movw	r3, #47176	; 0xb848
    b8ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8be:	78d9      	ldrb	r1, [r3, #3]
    b8c0:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    b8c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8c8:	5499      	strb	r1, [r3, r2]
    b8ca:	4b34      	ldr	r3, [pc, #208]	; (b99c <send_nav_values+0x1090>)
    b8cc:	781a      	ldrb	r2, [r3, #0]
    b8ce:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b8d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8d6:	781b      	ldrb	r3, [r3, #0]
    b8d8:	4413      	add	r3, r2
    b8da:	b2da      	uxtb	r2, r3
    b8dc:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b8e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8e4:	701a      	strb	r2, [r3, #0]
    b8e6:	f24b 53be 	movw	r3, #46526	; 0xb5be
    b8ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8ee:	781a      	ldrb	r2, [r3, #0]
    b8f0:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b8f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8f8:	781b      	ldrb	r3, [r3, #0]
    b8fa:	4413      	add	r3, r2
    b8fc:	b2da      	uxtb	r2, r3
    b8fe:	f24b 53be 	movw	r3, #46526	; 0xb5be
    b902:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b906:	701a      	strb	r2, [r3, #0]
    b908:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b90c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b910:	781b      	ldrb	r3, [r3, #0]
    b912:	3301      	adds	r3, #1
    b914:	b2da      	uxtb	r2, r3
    b916:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b91a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b91e:	701a      	strb	r2, [r3, #0]
    b920:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b924:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b928:	781b      	ldrb	r3, [r3, #0]
    b92a:	2bff      	cmp	r3, #255	; 0xff
    b92c:	d105      	bne.n	b93a <send_nav_values+0x102e>
    b92e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b932:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b936:	2200      	movs	r2, #0
    b938:	701a      	strb	r2, [r3, #0]
    b93a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b93e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b942:	781b      	ldrb	r3, [r3, #0]
    b944:	461a      	mov	r2, r3
    b946:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b94a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b94e:	7819      	ldrb	r1, [r3, #0]
    b950:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    b954:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b958:	5499      	strb	r1, [r3, r2]
    b95a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b95e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b962:	781b      	ldrb	r3, [r3, #0]
    b964:	3301      	adds	r3, #1
    b966:	b2da      	uxtb	r2, r3
    b968:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b96c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b970:	701a      	strb	r2, [r3, #0]
    b972:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b976:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b97a:	781b      	ldrb	r3, [r3, #0]
    b97c:	2bff      	cmp	r3, #255	; 0xff
    b97e:	d10f      	bne.n	b9a0 <send_nav_values+0x1094>
    b980:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b984:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b988:	2200      	movs	r2, #0
    b98a:	701a      	strb	r2, [r3, #0]
    b98c:	e008      	b.n	b9a0 <send_nav_values+0x1094>
    b98e:	bf00      	nop
    b990:	20000123 	.word	0x20000123
    b994:	2004b849 	.word	0x2004b849
    b998:	2004b84a 	.word	0x2004b84a
    b99c:	2004b84b 	.word	0x2004b84b
    b9a0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b9a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9a8:	781b      	ldrb	r3, [r3, #0]
    b9aa:	461a      	mov	r2, r3
    b9ac:	f24b 53be 	movw	r3, #46526	; 0xb5be
    b9b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9b4:	7819      	ldrb	r1, [r3, #0]
    b9b6:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    b9ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9be:	5499      	strb	r1, [r3, r2]
    b9c0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b9c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9c8:	781b      	ldrb	r3, [r3, #0]
    b9ca:	3301      	adds	r3, #1
    b9cc:	b2da      	uxtb	r2, r3
    b9ce:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b9d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9d6:	701a      	strb	r2, [r3, #0]
    b9d8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b9dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9e0:	781b      	ldrb	r3, [r3, #0]
    b9e2:	2bff      	cmp	r3, #255	; 0xff
    b9e4:	d105      	bne.n	b9f2 <send_nav_values+0x10e6>
    b9e6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b9ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9ee:	2200      	movs	r2, #0
    b9f0:	701a      	strb	r2, [r3, #0]
    b9f2:	f248 0339 	movw	r3, #32825	; 0x8039
    b9f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9fa:	781b      	ldrb	r3, [r3, #0]
    b9fc:	b2db      	uxtb	r3, r3
    b9fe:	f003 0310 	and.w	r3, r3, #16
    ba02:	2b00      	cmp	r3, #0
    ba04:	d15a      	bne.n	babc <send_nav_values+0x11b0>
    ba06:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    ba0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba0e:	781b      	ldrb	r3, [r3, #0]
    ba10:	b2db      	uxtb	r3, r3
    ba12:	461a      	mov	r2, r3
    ba14:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    ba18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba1c:	5c9a      	ldrb	r2, [r3, r2]
    ba1e:	f24b 53bb 	movw	r3, #46523	; 0xb5bb
    ba22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba26:	701a      	strb	r2, [r3, #0]
    ba28:	f24b 53bc 	movw	r3, #46524	; 0xb5bc
    ba2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba30:	2200      	movs	r2, #0
    ba32:	701a      	strb	r2, [r3, #0]
    ba34:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    ba38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba3c:	781b      	ldrb	r3, [r3, #0]
    ba3e:	b2db      	uxtb	r3, r3
    ba40:	3301      	adds	r3, #1
    ba42:	b2da      	uxtb	r2, r3
    ba44:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    ba48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba4c:	701a      	strb	r2, [r3, #0]
    ba4e:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    ba52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba56:	781b      	ldrb	r3, [r3, #0]
    ba58:	b2db      	uxtb	r3, r3
    ba5a:	2bff      	cmp	r3, #255	; 0xff
    ba5c:	d105      	bne.n	ba6a <send_nav_values+0x115e>
    ba5e:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    ba62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba66:	2200      	movs	r2, #0
    ba68:	701a      	strb	r2, [r3, #0]
    ba6a:	f248 0338 	movw	r3, #32824	; 0x8038
    ba6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba72:	f248 0238 	movw	r2, #32824	; 0x8038
    ba76:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ba7a:	7812      	ldrb	r2, [r2, #0]
    ba7c:	b2d2      	uxtb	r2, r2
    ba7e:	f042 0201 	orr.w	r2, r2, #1
    ba82:	b2d2      	uxtb	r2, r2
    ba84:	701a      	strb	r2, [r3, #0]
    ba86:	f248 0339 	movw	r3, #32825	; 0x8039
    ba8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba8e:	f248 0239 	movw	r2, #32825	; 0x8039
    ba92:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ba96:	7812      	ldrb	r2, [r2, #0]
    ba98:	b2d2      	uxtb	r2, r2
    ba9a:	f042 0210 	orr.w	r2, r2, #16
    ba9e:	b2d2      	uxtb	r2, r2
    baa0:	701a      	strb	r2, [r3, #0]
    baa2:	e00b      	b.n	babc <send_nav_values+0x11b0>
    baa4:	f24b 43b8 	movw	r3, #46264	; 0xb4b8
    baa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    baac:	781b      	ldrb	r3, [r3, #0]
    baae:	3301      	adds	r3, #1
    bab0:	b2da      	uxtb	r2, r3
    bab2:	f24b 43b8 	movw	r3, #46264	; 0xb4b8
    bab6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    baba:	701a      	strb	r2, [r3, #0]
}
    babc:	46bd      	mov	sp, r7
    babe:	f85d 7b04 	ldr.w	r7, [sp], #4
    bac2:	4770      	bx	lr

0000bac4 <course_run>:

void course_run(void){
    bac4:	b580      	push	{r7, lr}
    bac6:	af00      	add	r7, sp, #0
  
  if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) 
    bac8:	f24b 439c 	movw	r3, #46236	; 0xb49c
    bacc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bad0:	781b      	ldrb	r3, [r3, #0]
    bad2:	2b02      	cmp	r3, #2
    bad4:	d006      	beq.n	bae4 <course_run+0x20>
    bad6:	f24b 439c 	movw	r3, #46236	; 0xb49c
    bada:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bade:	781b      	ldrb	r3, [r3, #0]
    bae0:	2b03      	cmp	r3, #3
    bae2:	d112      	bne.n	bb0a <course_run+0x46>
  {
    if (lateral_mode >= LATERAL_MODE_COURSE)
    bae4:	f24b 439e 	movw	r3, #46238	; 0xb49e
    bae8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    baec:	781b      	ldrb	r3, [r3, #0]
    baee:	2b02      	cmp	r3, #2
    baf0:	d901      	bls.n	baf6 <course_run+0x32>
      course_pid_run(); /* aka compute nav_desired_roll */
    baf2:	f001 f96d 	bl	cdd0 <course_pid_run>
    desired_roll = nav_desired_roll;
    baf6:	f64b 0340 	movw	r3, #47168	; 0xb840
    bafa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bafe:	681a      	ldr	r2, [r3, #0]
    bb00:	f24b 73e4 	movw	r3, #47076	; 0xb7e4
    bb04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb08:	601a      	str	r2, [r3, #0]
  }  
  //vPrintString("S_17 Navigation task end!\n\r");
}
    bb0a:	bd80      	pop	{r7, pc}

0000bb0c <altitude_control_task>:

void altitude_control_task(void)
{
    bb0c:	b580      	push	{r7, lr}
    bb0e:	af00      	add	r7, sp, #0
	//vPrintString("S_18 navigation_task start! \n\r"); //SunnyBeike
	if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) {
    bb10:	f24b 439c 	movw	r3, #46236	; 0xb49c
    bb14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb18:	781b      	ldrb	r3, [r3, #0]
    bb1a:	2b02      	cmp	r3, #2
    bb1c:	d006      	beq.n	bb2c <altitude_control_task+0x20>
    bb1e:	f24b 439c 	movw	r3, #46236	; 0xb49c
    bb22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb26:	781b      	ldrb	r3, [r3, #0]
    bb28:	2b03      	cmp	r3, #3
    bb2a:	d108      	bne.n	bb3e <altitude_control_task+0x32>
		if (vertical_mode == VERTICAL_MODE_AUTO_ALT)
    bb2c:	f24b 439d 	movw	r3, #46237	; 0xb49d
    bb30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb34:	781b      	ldrb	r3, [r3, #0]
    bb36:	2b03      	cmp	r3, #3
    bb38:	d101      	bne.n	bb3e <altitude_control_task+0x32>
      			altitude_pid_run();
    bb3a:	f001 fbd1 	bl	d2e0 <altitude_pid_run>
	}
	//vPrintString("S_18 navigation_task end! \n\r"); //SunnyBeike
}
    bb3e:	bd80      	pop	{r7, pc}

0000bb40 <climb_control_task>:
void climb_control_task(void)
{
    bb40:	b580      	push	{r7, lr}
    bb42:	af00      	add	r7, sp, #0
	//vPrintString("S_19 navigation_task start! \n\r"); //SunnyBeike
   if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) 
    bb44:	f24b 439c 	movw	r3, #46236	; 0xb49c
    bb48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb4c:	781b      	ldrb	r3, [r3, #0]
    bb4e:	2b02      	cmp	r3, #2
    bb50:	d006      	beq.n	bb60 <climb_control_task+0x20>
    bb52:	f24b 439c 	movw	r3, #46236	; 0xb49c
    bb56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb5a:	781b      	ldrb	r3, [r3, #0]
    bb5c:	2b03      	cmp	r3, #3
    bb5e:	d135      	bne.n	bbcc <climb_control_task+0x8c>
   {
	if (vertical_mode >= VERTICAL_MODE_AUTO_CLIMB)
    bb60:	f24b 439d 	movw	r3, #46237	; 0xb49d
    bb64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb68:	781b      	ldrb	r3, [r3, #0]
    bb6a:	2b01      	cmp	r3, #1
    bb6c:	d901      	bls.n	bb72 <climb_control_task+0x32>
        	climb_pid_run();
    bb6e:	f001 f9e7 	bl	cf40 <climb_pid_run>
   	if (vertical_mode == VERTICAL_MODE_AUTO_GAZ)
    bb72:	f24b 439d 	movw	r3, #46237	; 0xb49d
    bb76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb7a:	781b      	ldrb	r3, [r3, #0]
    bb7c:	2b01      	cmp	r3, #1
    bb7e:	d10a      	bne.n	bb96 <climb_control_task+0x56>
   		 desired_gaz = nav_desired_gaz;
    bb80:	f64b 0338 	movw	r3, #47160	; 0xb838
    bb84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb88:	881b      	ldrh	r3, [r3, #0]
    bb8a:	b29a      	uxth	r2, r3
    bb8c:	f24b 73ec 	movw	r3, #47084	; 0xb7ec
    bb90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb94:	801a      	strh	r2, [r3, #0]
   	if (low_battery || (!estimator_flight_time && !launch))
    bb96:	f24b 43a5 	movw	r3, #46245	; 0xb4a5
    bb9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb9e:	781b      	ldrb	r3, [r3, #0]
    bba0:	2b00      	cmp	r3, #0
    bba2:	d10d      	bne.n	bbc0 <climb_control_task+0x80>
    bba4:	f64b 239c 	movw	r3, #47772	; 0xba9c
    bba8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbac:	881b      	ldrh	r3, [r3, #0]
    bbae:	2b00      	cmp	r3, #0
    bbb0:	d10c      	bne.n	bbcc <climb_control_task+0x8c>
    bbb2:	f24b 43b0 	movw	r3, #46256	; 0xb4b0
    bbb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbba:	781b      	ldrb	r3, [r3, #0]
    bbbc:	2b00      	cmp	r3, #0
    bbbe:	d105      	bne.n	bbcc <climb_control_task+0x8c>
   		 desired_gaz = 0.;
    bbc0:	f24b 73ec 	movw	r3, #47084	; 0xb7ec
    bbc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbc8:	2200      	movs	r2, #0
    bbca:	801a      	strh	r2, [r3, #0]
  }  
	//vPrintString("S_19 navigation_task end! \n\r"); //SunnyBeike
}
    bbcc:	bd80      	pop	{r7, pc}
    bbce:	bf00      	nop

0000bbd0 <stabilisation_task>:
//#endif
}
*/

void stabilisation_task(void)
{
    bbd0:	b580      	push	{r7, lr}
    bbd2:	af00      	add	r7, sp, #0
	//vPrintString("S_6 stabilisation_task start! \n\r"); //SunnyBeike
    ir_update();
    bbd4:	f000 ffa2 	bl	cb1c <ir_update>
    estimator_update_state_infrared();
    bbd8:	f004 fa28 	bl	1002c <estimator_update_state_infrared>
    roll_pitch_pid_run(); // Set  desired_aileron & desired_elevator
    bbdc:	f001 f80c 	bl	cbf8 <roll_pitch_pid_run>
    to_fbw.channels[RADIO_THROTTLE] = desired_gaz; // desired_gaz is set upon GPS message reception
    bbe0:	f24b 73ec 	movw	r3, #47084	; 0xb7ec
    bbe4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbe8:	881a      	ldrh	r2, [r3, #0]
    bbea:	f24b 53d8 	movw	r3, #46552	; 0xb5d8
    bbee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbf2:	801a      	strh	r2, [r3, #0]
    to_fbw.channels[RADIO_ROLL] = desired_aileron;
    bbf4:	f24b 73ee 	movw	r3, #47086	; 0xb7ee
    bbf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbfc:	881a      	ldrh	r2, [r3, #0]
    bbfe:	f24b 53d8 	movw	r3, #46552	; 0xb5d8
    bc02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc06:	805a      	strh	r2, [r3, #2]
#ifndef ANTON_T7
    to_fbw.channels[RADIO_PITCH] = desired_elevator;
    bc08:	f24b 73f0 	movw	r3, #47088	; 0xb7f0
    bc0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc10:	881a      	ldrh	r2, [r3, #0]
    bc12:	f24b 53d8 	movw	r3, #46552	; 0xb5d8
    bc16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc1a:	809a      	strh	r2, [r3, #4]
#endif
    
    // Code for camera stabilization, FIXME put that elsewhere
    to_fbw.channels[RADIO_GAIN1] = TRIM_PPRZ(MAX_PPRZ/0.75*(-estimator_phi));
    bc1c:	f64b 2378 	movw	r3, #47736	; 0xba78
    bc20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc24:	681b      	ldr	r3, [r3, #0]
    bc26:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    bc2a:	4618      	mov	r0, r3
    bc2c:	f006 fedc 	bl	129e8 <__aeabi_f2d>
    bc30:	4602      	mov	r2, r0
    bc32:	460b      	mov	r3, r1
    bc34:	4610      	mov	r0, r2
    bc36:	4619      	mov	r1, r3
    bc38:	f04f 0200 	mov.w	r2, #0
    bc3c:	f04f 0300 	mov.w	r3, #0
    bc40:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    bc44:	f006 ff24 	bl	12a90 <__aeabi_dmul>
    bc48:	4602      	mov	r2, r0
    bc4a:	460b      	mov	r3, r1
    bc4c:	4610      	mov	r0, r2
    bc4e:	4619      	mov	r1, r3
    bc50:	f04f 0200 	mov.w	r2, #0
    bc54:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    bc58:	f2cc 03c2 	movt	r3, #49346	; 0xc0c2
    bc5c:	f007 f98a 	bl	12f74 <__aeabi_dcmplt>
    bc60:	4603      	mov	r3, r0
    bc62:	2b00      	cmp	r3, #0
    bc64:	d002      	beq.n	bc6c <stabilisation_task+0x9c>
    bc66:	f64d 2280 	movw	r2, #55936	; 0xda80
    bc6a:	e046      	b.n	bcfa <stabilisation_task+0x12a>
    bc6c:	f64b 2378 	movw	r3, #47736	; 0xba78
    bc70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc74:	681b      	ldr	r3, [r3, #0]
    bc76:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    bc7a:	4618      	mov	r0, r3
    bc7c:	f006 feb4 	bl	129e8 <__aeabi_f2d>
    bc80:	4602      	mov	r2, r0
    bc82:	460b      	mov	r3, r1
    bc84:	4610      	mov	r0, r2
    bc86:	4619      	mov	r1, r3
    bc88:	f04f 0200 	mov.w	r2, #0
    bc8c:	f04f 0300 	mov.w	r3, #0
    bc90:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    bc94:	f006 fefc 	bl	12a90 <__aeabi_dmul>
    bc98:	4602      	mov	r2, r0
    bc9a:	460b      	mov	r3, r1
    bc9c:	4610      	mov	r0, r2
    bc9e:	4619      	mov	r1, r3
    bca0:	f04f 0200 	mov.w	r2, #0
    bca4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    bca8:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
    bcac:	f007 f980 	bl	12fb0 <__aeabi_dcmpgt>
    bcb0:	4603      	mov	r3, r0
    bcb2:	2b00      	cmp	r3, #0
    bcb4:	d002      	beq.n	bcbc <stabilisation_task+0xec>
    bcb6:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    bcba:	e01d      	b.n	bcf8 <stabilisation_task+0x128>
    bcbc:	f64b 2378 	movw	r3, #47736	; 0xba78
    bcc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcc4:	681b      	ldr	r3, [r3, #0]
    bcc6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    bcca:	4618      	mov	r0, r3
    bccc:	f006 fe8c 	bl	129e8 <__aeabi_f2d>
    bcd0:	4602      	mov	r2, r0
    bcd2:	460b      	mov	r3, r1
    bcd4:	4610      	mov	r0, r2
    bcd6:	4619      	mov	r1, r3
    bcd8:	f04f 0200 	mov.w	r2, #0
    bcdc:	f04f 0300 	mov.w	r3, #0
    bce0:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    bce4:	f006 fed4 	bl	12a90 <__aeabi_dmul>
    bce8:	4602      	mov	r2, r0
    bcea:	460b      	mov	r3, r1
    bcec:	4610      	mov	r0, r2
    bcee:	4619      	mov	r1, r3
    bcf0:	f007 f968 	bl	12fc4 <__aeabi_d2iz>
    bcf4:	4603      	mov	r3, r0
    bcf6:	b29b      	uxth	r3, r3
    bcf8:	b29a      	uxth	r2, r3
    bcfa:	f24b 53d8 	movw	r3, #46552	; 0xb5d8
    bcfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd02:	815a      	strh	r2, [r3, #10]
	//vPrintString("S_6 stabilisation_task end! \n\r"); //SunnyBeike
}
    bd04:	bd80      	pop	{r7, pc}
    bd06:	bf00      	nop

0000bd08 <send_gps_pos>:
 * If \a estimator_flight_time is null and \a estimator_hspeed_mod is greater
 * than \a MIN_SPEED_FOR_TAKEOFF, set the \a estimator_flight_time to 1 and \a
 * launch to true (which is not set in non auto launch. Then call
 * \a DOWNLINK_SEND_TAKEOFF
 */
void send_gps_pos( void ) {
    bd08:	b580      	push	{r7, lr}
    bd0a:	af00      	add	r7, sp, #0
  gps_msg_received = FALSE;
    bd0c:	f24b 634d 	movw	r3, #46669	; 0xb64d
    bd10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd14:	2200      	movs	r2, #0
    bd16:	701a      	strb	r2, [r3, #0]
  if (gps_pos_available){
    bd18:	f24b 634e 	movw	r3, #46670	; 0xb64e
    bd1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd20:	781b      	ldrb	r3, [r3, #0]
    bd22:	2b00      	cmp	r3, #0
    bd24:	d001      	beq.n	bd2a <send_gps_pos+0x22>
     //DOWNLINK_SEND_GPS(&gps_mode, &gps_utm_east, &gps_utm_north, &gps_fcourse, &gps_falt, &gps_fspeed,&gps_fclimb, &gps_ftow);
     estimator_update_state_gps();
    bd26:	f004 fc27 	bl	10578 <estimator_update_state_gps>
  }
}
    bd2a:	bd80      	pop	{r7, pc}

0000bd2c <send_radIR>:

void send_radIR(void){
    bd2c:	b480      	push	{r7}
    bd2e:	af00      	add	r7, sp, #0
    if (gps_pos_available){
      //DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    }
}
    bd30:	46bd      	mov	sp, r7
    bd32:	f85d 7b04 	ldr.w	r7, [sp], #4
    bd36:	4770      	bx	lr

0000bd38 <send_takeOff>:

void send_takeOff(void){
    bd38:	b580      	push	{r7, lr}
    bd3a:	af00      	add	r7, sp, #0
  if (gps_pos_available){
    bd3c:	f24b 634e 	movw	r3, #46670	; 0xb64e
    bd40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd44:	781b      	ldrb	r3, [r3, #0]
    bd46:	2b00      	cmp	r3, #0
    bd48:	d027      	beq.n	bd9a <send_takeOff+0x62>
     if (!estimator_flight_time && (estimator_hspeed_mod > MIN_SPEED_FOR_TAKEOFF)) {
    bd4a:	f64b 239c 	movw	r3, #47772	; 0xba9c
    bd4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd52:	881b      	ldrh	r3, [r3, #0]
    bd54:	2b00      	cmp	r3, #0
    bd56:	d11a      	bne.n	bd8e <send_takeOff+0x56>
    bd58:	f64b 23a4 	movw	r3, #47780	; 0xbaa4
    bd5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd60:	681b      	ldr	r3, [r3, #0]
    bd62:	4618      	mov	r0, r3
    bd64:	f04f 0100 	mov.w	r1, #0
    bd68:	f2c4 01a0 	movt	r1, #16544	; 0x40a0
    bd6c:	f007 fc8c 	bl	13688 <__aeabi_fcmpgt>
    bd70:	4603      	mov	r3, r0
    bd72:	2b00      	cmp	r3, #0
    bd74:	d00b      	beq.n	bd8e <send_takeOff+0x56>
        estimator_flight_time = 1;
    bd76:	f64b 239c 	movw	r3, #47772	; 0xba9c
    bd7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd7e:	2201      	movs	r2, #1
    bd80:	801a      	strh	r2, [r3, #0]
        launch = TRUE; /* Not set in non auto launch */
    bd82:	f24b 43b0 	movw	r3, #46256	; 0xb4b0
    bd86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd8a:	2201      	movs	r2, #1
    bd8c:	701a      	strb	r2, [r3, #0]
        //DOWNLINK_SEND_TAKEOFF(&cputime);
     }
     gps_pos_available = FALSE; 
    bd8e:	f24b 634e 	movw	r3, #46670	; 0xb64e
    bd92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd96:	2200      	movs	r2, #0
    bd98:	701a      	strb	r2, [r3, #0]
  }
  //vPrintString("S_16 receive_gps_data_task end!\n\r");
}
    bd9a:	bd80      	pop	{r7, pc}
    bd9c:	f3af 8000 	nop.w

0000bda0 <modem_init>:
uint8_t    tx_byte;
uint8_t    tx_byte_idx;

uint8_t ck_a, ck_b;

void modem_init( void ) {
    bda0:	b480      	push	{r7}
    bda2:	af00      	add	r7, sp, #0
  /* 
     on >= V1.2 boards, 4MHz modem clock is generated
     by one PWM module.
  */
#if defined CTL_BRD_V1_2 || defined CTL_BRD_V1_2_1
  MODEM_OSC_DDR |= _BV(MODEM_OSC);
    bda4:	f248 0317 	movw	r3, #32791	; 0x8017
    bda8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdac:	f248 0217 	movw	r2, #32791	; 0x8017
    bdb0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bdb4:	7812      	ldrb	r2, [r2, #0]
    bdb6:	b2d2      	uxtb	r2, r2
    bdb8:	f042 0210 	orr.w	r2, r2, #16
    bdbc:	b2d2      	uxtb	r2, r2
    bdbe:	701a      	strb	r2, [r3, #0]
  OCR0 = 1; /* 4MhZ */
    bdc0:	f248 0331 	movw	r3, #32817	; 0x8031
    bdc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdc8:	2201      	movs	r2, #1
    bdca:	701a      	strb	r2, [r3, #0]
  TCCR0 = _BV(WGM01) | _BV(COM00) | _BV(CS00);
    bdcc:	f248 0333 	movw	r3, #32819	; 0x8033
    bdd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdd4:	2219      	movs	r2, #25
    bdd6:	701a      	strb	r2, [r3, #0]
#endif

  /* setup TX_EN and TX_DATA pin as output */
  MODEM_TX_DDR |= _BV(MODEM_TX_EN) | _BV(MODEM_TX_DATA);
    bdd8:	f248 0311 	movw	r3, #32785	; 0x8011
    bddc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bde0:	f248 0211 	movw	r2, #32785	; 0x8011
    bde4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bde8:	7812      	ldrb	r2, [r2, #0]
    bdea:	b2d2      	uxtb	r2, r2
    bdec:	f062 023f 	orn	r2, r2, #63	; 0x3f
    bdf0:	b2d2      	uxtb	r2, r2
    bdf2:	701a      	strb	r2, [r3, #0]
  /* data idles hight */
  sbi(MODEM_TX_PORT, MODEM_TX_DATA);
    bdf4:	f248 0312 	movw	r3, #32786	; 0x8012
    bdf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdfc:	f248 0212 	movw	r2, #32786	; 0x8012
    be00:	f2c2 0200 	movt	r2, #8192	; 0x2000
    be04:	7812      	ldrb	r2, [r2, #0]
    be06:	b2d2      	uxtb	r2, r2
    be08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    be0c:	b2d2      	uxtb	r2, r2
    be0e:	701a      	strb	r2, [r3, #0]
  /* enable transmitter */
  cbi(MODEM_TX_PORT, MODEM_TX_EN);
    be10:	f248 0312 	movw	r3, #32786	; 0x8012
    be14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be18:	f248 0212 	movw	r2, #32786	; 0x8012
    be1c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    be20:	7812      	ldrb	r2, [r2, #0]
    be22:	b2d2      	uxtb	r2, r2
    be24:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    be28:	b2d2      	uxtb	r2, r2
    be2a:	701a      	strb	r2, [r3, #0]
  /* set interrupt on failing edge of clock */
  MODEM_CLK_INT_REG |=  MODEM_CLK_INT_CFG;
    be2c:	f248 033a 	movw	r3, #32826	; 0x803a
    be30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be34:	f248 023a 	movw	r2, #32826	; 0x803a
    be38:	f2c2 0200 	movt	r2, #8192	; 0x2000
    be3c:	7812      	ldrb	r2, [r2, #0]
    be3e:	b2d2      	uxtb	r2, r2
    be40:	f042 0202 	orr.w	r2, r2, #2
    be44:	b2d2      	uxtb	r2, r2
    be46:	701a      	strb	r2, [r3, #0]
}
    be48:	46bd      	mov	sp, r7
    be4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    be4e:	4770      	bx	lr

0000be50 <__vector_5>:

SIGNAL( MODEM_CLK_INT_SIG ) {
    be50:	b480      	push	{r7}
    be52:	af00      	add	r7, sp, #0
  /*  start bit         */
  if (tx_byte_idx == 0)
    be54:	f24b 53bc 	movw	r3, #46524	; 0xb5bc
    be58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be5c:	781b      	ldrb	r3, [r3, #0]
    be5e:	2b00      	cmp	r3, #0
    be60:	d10e      	bne.n	be80 <__vector_5+0x30>
    cbi(MODEM_TX_PORT, MODEM_TX_DATA);
    be62:	f248 0312 	movw	r3, #32786	; 0x8012
    be66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be6a:	f248 0212 	movw	r2, #32786	; 0x8012
    be6e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    be72:	7812      	ldrb	r2, [r2, #0]
    be74:	b2d2      	uxtb	r2, r2
    be76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    be7a:	b2d2      	uxtb	r2, r2
    be7c:	701a      	strb	r2, [r3, #0]
    be7e:	e047      	b.n	bf10 <__vector_5+0xc0>
  /* 8 data bits        */ 
  else if (tx_byte_idx < 9) {
    be80:	f24b 53bc 	movw	r3, #46524	; 0xb5bc
    be84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be88:	781b      	ldrb	r3, [r3, #0]
    be8a:	2b08      	cmp	r3, #8
    be8c:	d832      	bhi.n	bef4 <__vector_5+0xa4>
    if (tx_byte & 0x01)
    be8e:	f24b 53bb 	movw	r3, #46523	; 0xb5bb
    be92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be96:	781b      	ldrb	r3, [r3, #0]
    be98:	f003 0301 	and.w	r3, r3, #1
    be9c:	2b00      	cmp	r3, #0
    be9e:	d00e      	beq.n	bebe <__vector_5+0x6e>
      sbi(MODEM_TX_PORT, MODEM_TX_DATA);
    bea0:	f248 0312 	movw	r3, #32786	; 0x8012
    bea4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bea8:	f248 0212 	movw	r2, #32786	; 0x8012
    beac:	f2c2 0200 	movt	r2, #8192	; 0x2000
    beb0:	7812      	ldrb	r2, [r2, #0]
    beb2:	b2d2      	uxtb	r2, r2
    beb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    beb8:	b2d2      	uxtb	r2, r2
    beba:	701a      	strb	r2, [r3, #0]
    bebc:	e00d      	b.n	beda <__vector_5+0x8a>
    else
      cbi(MODEM_TX_PORT, MODEM_TX_DATA);
    bebe:	f248 0312 	movw	r3, #32786	; 0x8012
    bec2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bec6:	f248 0212 	movw	r2, #32786	; 0x8012
    beca:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bece:	7812      	ldrb	r2, [r2, #0]
    bed0:	b2d2      	uxtb	r2, r2
    bed2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    bed6:	b2d2      	uxtb	r2, r2
    bed8:	701a      	strb	r2, [r3, #0]
    tx_byte >>= 1;
    beda:	f24b 53bb 	movw	r3, #46523	; 0xb5bb
    bede:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bee2:	781b      	ldrb	r3, [r3, #0]
    bee4:	085b      	lsrs	r3, r3, #1
    bee6:	b2da      	uxtb	r2, r3
    bee8:	f24b 53bb 	movw	r3, #46523	; 0xb5bb
    beec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bef0:	701a      	strb	r2, [r3, #0]
    bef2:	e00d      	b.n	bf10 <__vector_5+0xc0>
  }
  /* stop_bit           */
  else {
    sbi(MODEM_TX_PORT, MODEM_TX_DATA); 
    bef4:	f248 0312 	movw	r3, #32786	; 0x8012
    bef8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    befc:	f248 0212 	movw	r2, #32786	; 0x8012
    bf00:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bf04:	7812      	ldrb	r2, [r2, #0]
    bf06:	b2d2      	uxtb	r2, r2
    bf08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    bf0c:	b2d2      	uxtb	r2, r2
    bf0e:	701a      	strb	r2, [r3, #0]
  }
  tx_byte_idx++;
    bf10:	f24b 53bc 	movw	r3, #46524	; 0xb5bc
    bf14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf18:	781b      	ldrb	r3, [r3, #0]
    bf1a:	3301      	adds	r3, #1
    bf1c:	b2da      	uxtb	r2, r3
    bf1e:	f24b 53bc 	movw	r3, #46524	; 0xb5bc
    bf22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf26:	701a      	strb	r2, [r3, #0]
  /* next byte          */
  if (tx_byte_idx >= 10) {
    bf28:	f24b 53bc 	movw	r3, #46524	; 0xb5bc
    bf2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf30:	781b      	ldrb	r3, [r3, #0]
    bf32:	2b09      	cmp	r3, #9
    bf34:	d94d      	bls.n	bfd2 <__vector_5+0x182>
    /*  if we have nothing left to transmit */
    if( tx_head == tx_tail ) {
    bf36:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    bf3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf3e:	781a      	ldrb	r2, [r3, #0]
    bf40:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    bf44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf48:	781b      	ldrb	r3, [r3, #0]
    bf4a:	b2db      	uxtb	r3, r3
    bf4c:	429a      	cmp	r2, r3
    bf4e:	d10e      	bne.n	bf6e <__vector_5+0x11e>
      /* disable clock interrupt            */
      cbi( EIMSK, MODEM_CLK_INT );
    bf50:	f248 0339 	movw	r3, #32825	; 0x8039
    bf54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf58:	f248 0239 	movw	r2, #32825	; 0x8039
    bf5c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bf60:	7812      	ldrb	r2, [r2, #0]
    bf62:	b2d2      	uxtb	r2, r2
    bf64:	f022 0210 	bic.w	r2, r2, #16
    bf68:	b2d2      	uxtb	r2, r2
    bf6a:	701a      	strb	r2, [r3, #0]
    bf6c:	e031      	b.n	bfd2 <__vector_5+0x182>
    } else {
      /* else load next byte                  */
      MODEM_LOAD_NEXT_BYTE();  
    bf6e:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    bf72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf76:	781b      	ldrb	r3, [r3, #0]
    bf78:	b2db      	uxtb	r3, r3
    bf7a:	461a      	mov	r2, r3
    bf7c:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    bf80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf84:	5c9a      	ldrb	r2, [r3, r2]
    bf86:	f24b 53bb 	movw	r3, #46523	; 0xb5bb
    bf8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf8e:	701a      	strb	r2, [r3, #0]
    bf90:	f24b 53bc 	movw	r3, #46524	; 0xb5bc
    bf94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf98:	2200      	movs	r2, #0
    bf9a:	701a      	strb	r2, [r3, #0]
    bf9c:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    bfa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfa4:	781b      	ldrb	r3, [r3, #0]
    bfa6:	b2db      	uxtb	r3, r3
    bfa8:	3301      	adds	r3, #1
    bfaa:	b2da      	uxtb	r2, r3
    bfac:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    bfb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfb4:	701a      	strb	r2, [r3, #0]
    bfb6:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    bfba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfbe:	781b      	ldrb	r3, [r3, #0]
    bfc0:	b2db      	uxtb	r3, r3
    bfc2:	2bff      	cmp	r3, #255	; 0xff
    bfc4:	d105      	bne.n	bfd2 <__vector_5+0x182>
    bfc6:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    bfca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfce:	2200      	movs	r2, #0
    bfd0:	701a      	strb	r2, [r3, #0]
    }
  }
}
    bfd2:	46bd      	mov	sp, r7
    bfd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    bfd8:	4770      	bx	lr
    bfda:	bf00      	nop

0000bfdc <link_fbw_init>:
uint8_t link_fbw_fbw_nb_err;

static uint8_t idx_buf;
static uint8_t xor_in, xor_out;

void link_fbw_init(void) {
    bfdc:	b480      	push	{r7}
    bfde:	af00      	add	r7, sp, #0
  link_fbw_nb_err;
    bfe0:	f24b 53ef 	movw	r3, #46575	; 0xb5ef
    bfe4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfe8:	781b      	ldrb	r3, [r3, #0]
  link_fbw_receive_complete = FALSE;  
    bfea:	f240 1306 	movw	r3, #262	; 0x106
    bfee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bff2:	2200      	movs	r2, #0
    bff4:	701a      	strb	r2, [r3, #0]
}
    bff6:	46bd      	mov	sp, r7
    bff8:	f85d 7b04 	ldr.w	r7, [sp], #4
    bffc:	4770      	bx	lr
    bffe:	bf00      	nop

0000c000 <link_fbw_send>:

void link_fbw_send(void) {
    c000:	b480      	push	{r7}
    c002:	b083      	sub	sp, #12
    c004:	af00      	add	r7, sp, #0
    //vPrintString("S_7 link_fbw_send start! \n\r"); //SunnyBeike

    if (spi_cur_slave != SPI_NONE) 
    c006:	f24b 53f4 	movw	r3, #46580	; 0xb5f4
    c00a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c00e:	781b      	ldrb	r3, [r3, #0]
    c010:	b2db      	uxtb	r3, r3
    c012:	2b00      	cmp	r3, #0
    c014:	d00c      	beq.n	c030 <link_fbw_send+0x30>
    {
        spi_nb_ovrn++;
    c016:	f24b 53f5 	movw	r3, #46581	; 0xb5f5
    c01a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c01e:	781b      	ldrb	r3, [r3, #0]
    c020:	3301      	adds	r3, #1
    c022:	b2da      	uxtb	r2, r3
    c024:	f24b 53f5 	movw	r3, #46581	; 0xb5f5
    c028:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c02c:	701a      	strb	r2, [r3, #0]
        //vPrintString("S_7 link_fbw_send end! \n\r"); //SunnyBeike
        return;
    c02e:	e064      	b.n	c0fa <link_fbw_send+0xfa>
    }

    /* Enable SPI, Master, set clock rate fck/16 */ 
    SPI_START(_BV(SPE) | _BV(MSTR) | _BV(SPR0)); // | _BV(SPR1);
    c030:	f248 030d 	movw	r3, #32781	; 0x800d
    c034:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c038:	2251      	movs	r2, #81	; 0x51
    c03a:	701a      	strb	r2, [r3, #0]
    c03c:	f248 030e 	movw	r3, #32782	; 0x800e
    c040:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c044:	781b      	ldrb	r3, [r3, #0]
    c046:	b2db      	uxtb	r3, r3
    c048:	b2db      	uxtb	r3, r3
    c04a:	b25b      	sxtb	r3, r3
    c04c:	2b00      	cmp	r3, #0
    c04e:	da05      	bge.n	c05c <link_fbw_send+0x5c>
    c050:	f248 030f 	movw	r3, #32783	; 0x800f
    c054:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c058:	781b      	ldrb	r3, [r3, #0]
    c05a:	71fb      	strb	r3, [r7, #7]
    c05c:	f248 030d 	movw	r3, #32781	; 0x800d
    c060:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c064:	f248 020d 	movw	r2, #32781	; 0x800d
    c068:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c06c:	7812      	ldrb	r2, [r2, #0]
    c06e:	b2d2      	uxtb	r2, r2
    c070:	f062 027f 	orn	r2, r2, #127	; 0x7f
    c074:	b2d2      	uxtb	r2, r2
    c076:	701a      	strb	r2, [r3, #0]
    SPI_SELECT_SLAVE0();
    c078:	f24b 53f4 	movw	r3, #46580	; 0xb5f4
    c07c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c080:	2201      	movs	r2, #1
    c082:	701a      	strb	r2, [r3, #0]
    c084:	f248 0318 	movw	r3, #32792	; 0x8018
    c088:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c08c:	f248 0218 	movw	r2, #32792	; 0x8018
    c090:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c094:	7812      	ldrb	r2, [r2, #0]
    c096:	b2d2      	uxtb	r2, r2
    c098:	f022 0201 	bic.w	r2, r2, #1
    c09c:	b2d2      	uxtb	r2, r2
    c09e:	701a      	strb	r2, [r3, #0]

    idx_buf = 0;
    c0a0:	f24b 53f1 	movw	r3, #46577	; 0xb5f1
    c0a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0a8:	2200      	movs	r2, #0
    c0aa:	701a      	strb	r2, [r3, #0]
    xor_in = 0;
    c0ac:	f24b 53f2 	movw	r3, #46578	; 0xb5f2
    c0b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0b4:	2200      	movs	r2, #0
    c0b6:	701a      	strb	r2, [r3, #0]
    xor_out = ((uint8_t*)&to_fbw)[idx_buf];
    c0b8:	f24b 53f1 	movw	r3, #46577	; 0xb5f1
    c0bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0c0:	781b      	ldrb	r3, [r3, #0]
    c0c2:	461a      	mov	r2, r3
    c0c4:	f24b 53d8 	movw	r3, #46552	; 0xb5d8
    c0c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0cc:	4413      	add	r3, r2
    c0ce:	781a      	ldrb	r2, [r3, #0]
    c0d0:	f24b 53f3 	movw	r3, #46579	; 0xb5f3
    c0d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0d8:	701a      	strb	r2, [r3, #0]
    SPDR = xor_out;
    c0da:	f248 030f 	movw	r3, #32783	; 0x800f
    c0de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0e2:	f24b 52f3 	movw	r2, #46579	; 0xb5f3
    c0e6:	f2c2 0204 	movt	r2, #8196	; 0x2004
    c0ea:	7812      	ldrb	r2, [r2, #0]
    c0ec:	701a      	strb	r2, [r3, #0]
    link_fbw_receive_valid = FALSE;
    c0ee:	f24b 53ee 	movw	r3, #46574	; 0xb5ee
    c0f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0f6:	2200      	movs	r2, #0
    c0f8:	701a      	strb	r2, [r3, #0]
    // Other bytes will follow SIG_SPI interrupts
    //vPrintString("S_7 link_fbw_send end! \n\r"); //SunnyBeike
}
    c0fa:	370c      	adds	r7, #12
    c0fc:	46bd      	mov	sp, r7
    c0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    c102:	4770      	bx	lr

0000c104 <link_fbw_on_spi_it>:

void link_fbw_on_spi_it( void ) {
    c104:	b480      	push	{r7}
    c106:	af00      	add	r7, sp, #0
  /* setup OCR1A to pop in 200 clock cycles */
  /* this leaves time for the slave (fbw)   */
  /* to process the byte we've sent and to  */
  /* prepare a new one to be sent           */
  OCR1A = TCNT1 + 200;
    c108:	f248 032a 	movw	r3, #32810	; 0x802a
    c10c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c110:	f248 022c 	movw	r2, #32812	; 0x802c
    c114:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c118:	8812      	ldrh	r2, [r2, #0]
    c11a:	b292      	uxth	r2, r2
    c11c:	32c8      	adds	r2, #200	; 0xc8
    c11e:	b292      	uxth	r2, r2
    c120:	801a      	strh	r2, [r3, #0]
  /* clear interrupt flag  */
  sbi(TIFR, OCF1A);
    c122:	f248 0336 	movw	r3, #32822	; 0x8036
    c126:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c12a:	f248 0236 	movw	r2, #32822	; 0x8036
    c12e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c132:	7812      	ldrb	r2, [r2, #0]
    c134:	b2d2      	uxtb	r2, r2
    c136:	f042 0210 	orr.w	r2, r2, #16
    c13a:	b2d2      	uxtb	r2, r2
    c13c:	701a      	strb	r2, [r3, #0]
  /* enable OC1A interrupt */
  sbi(TIMSK, OCIE1A);
    c13e:	f248 0337 	movw	r3, #32823	; 0x8037
    c142:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c146:	f248 0237 	movw	r2, #32823	; 0x8037
    c14a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c14e:	7812      	ldrb	r2, [r2, #0]
    c150:	b2d2      	uxtb	r2, r2
    c152:	f042 0210 	orr.w	r2, r2, #16
    c156:	b2d2      	uxtb	r2, r2
    c158:	701a      	strb	r2, [r3, #0]
}
    c15a:	46bd      	mov	sp, r7
    c15c:	f85d 7b04 	ldr.w	r7, [sp], #4
    c160:	4770      	bx	lr
    c162:	bf00      	nop

0000c164 <__vector_12>:


/* send the next byte */
SIGNAL(SIG_OUTPUT_COMPARE1A) {
    c164:	b480      	push	{r7}
    c166:	b083      	sub	sp, #12
    c168:	af00      	add	r7, sp, #0
  uint8_t tmp;

  /* disable OC1A interrupt */
  cbi(TIMSK, OCIE1A); 
    c16a:	f248 0337 	movw	r3, #32823	; 0x8037
    c16e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c172:	f248 0237 	movw	r2, #32823	; 0x8037
    c176:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c17a:	7812      	ldrb	r2, [r2, #0]
    c17c:	b2d2      	uxtb	r2, r2
    c17e:	f022 0210 	bic.w	r2, r2, #16
    c182:	b2d2      	uxtb	r2, r2
    c184:	701a      	strb	r2, [r3, #0]

  idx_buf++;
    c186:	f24b 53f1 	movw	r3, #46577	; 0xb5f1
    c18a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c18e:	781b      	ldrb	r3, [r3, #0]
    c190:	3301      	adds	r3, #1
    c192:	b2da      	uxtb	r2, r3
    c194:	f24b 53f1 	movw	r3, #46577	; 0xb5f1
    c198:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c19c:	701a      	strb	r2, [r3, #0]

  /* we have sent/received a complete frame */
  if (idx_buf == FRAME_LENGTH) {
    c19e:	f24b 53f1 	movw	r3, #46577	; 0xb5f1
    c1a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1a6:	781b      	ldrb	r3, [r3, #0]
    c1a8:	2b17      	cmp	r3, #23
    c1aa:	d162      	bne.n	c272 <__vector_12+0x10e>
    /* read checksum from receive register  */
    tmp = SPDR;
    c1ac:	f248 030f 	movw	r3, #32783	; 0x800f
    c1b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1b4:	781b      	ldrb	r3, [r3, #0]
    c1b6:	71fb      	strb	r3, [r7, #7]
    /* notify valid frame                   */
    if (tmp == xor_in) {
    c1b8:	f24b 53f2 	movw	r3, #46578	; 0xb5f2
    c1bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1c0:	781b      	ldrb	r3, [r3, #0]
    c1c2:	79fa      	ldrb	r2, [r7, #7]
    c1c4:	429a      	cmp	r2, r3
    c1c6:	d110      	bne.n	c1ea <__vector_12+0x86>
      link_fbw_receive_valid = TRUE;
    c1c8:	f24b 53ee 	movw	r3, #46574	; 0xb5ee
    c1cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1d0:	2201      	movs	r2, #1
    c1d2:	701a      	strb	r2, [r3, #0]
      link_fbw_fbw_nb_err = from_fbw.nb_err;
    c1d4:	f24b 53c0 	movw	r3, #46528	; 0xb5c0
    c1d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1dc:	7d1a      	ldrb	r2, [r3, #20]
    c1de:	f24b 53f0 	movw	r3, #46576	; 0xb5f0
    c1e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1e6:	701a      	strb	r2, [r3, #0]
    c1e8:	e00c      	b.n	c204 <__vector_12+0xa0>
    }
    else
      link_fbw_nb_err++;
    c1ea:	f24b 53ef 	movw	r3, #46575	; 0xb5ef
    c1ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1f2:	781b      	ldrb	r3, [r3, #0]
    c1f4:	b2db      	uxtb	r3, r3
    c1f6:	3301      	adds	r3, #1
    c1f8:	b2da      	uxtb	r2, r3
    c1fa:	f24b 53ef 	movw	r3, #46575	; 0xb5ef
    c1fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c202:	701a      	strb	r2, [r3, #0]
    link_fbw_receive_complete = TRUE;
    c204:	f240 1306 	movw	r3, #262	; 0x106
    c208:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c20c:	2201      	movs	r2, #1
    c20e:	701a      	strb	r2, [r3, #0]
    /* unselect slave0                      */
    SPI_UNSELECT_SLAVE0();
    c210:	f24b 53f4 	movw	r3, #46580	; 0xb5f4
    c214:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c218:	2200      	movs	r2, #0
    c21a:	701a      	strb	r2, [r3, #0]
    c21c:	f248 0318 	movw	r3, #32792	; 0x8018
    c220:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c224:	f248 0218 	movw	r2, #32792	; 0x8018
    c228:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c22c:	7812      	ldrb	r2, [r2, #0]
    c22e:	b2d2      	uxtb	r2, r2
    c230:	f042 0201 	orr.w	r2, r2, #1
    c234:	b2d2      	uxtb	r2, r2
    c236:	701a      	strb	r2, [r3, #0]
    SPI_STOP();
    c238:	f248 030d 	movw	r3, #32781	; 0x800d
    c23c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c240:	f248 020d 	movw	r2, #32781	; 0x800d
    c244:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c248:	7812      	ldrb	r2, [r2, #0]
    c24a:	b2d2      	uxtb	r2, r2
    c24c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    c250:	b2d2      	uxtb	r2, r2
    c252:	701a      	strb	r2, [r3, #0]
    c254:	f248 030d 	movw	r3, #32781	; 0x800d
    c258:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c25c:	f248 020d 	movw	r2, #32781	; 0x800d
    c260:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c264:	7812      	ldrb	r2, [r2, #0]
    c266:	b2d2      	uxtb	r2, r2
    c268:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    c26c:	b2d2      	uxtb	r2, r2
    c26e:	701a      	strb	r2, [r3, #0]
    return;
    c270:	e051      	b.n	c316 <__vector_12+0x1b2>
  }

  /* we are sending/receiving payload       */
  if (idx_buf < FRAME_LENGTH - 1) {
    c272:	f24b 53f1 	movw	r3, #46577	; 0xb5f1
    c276:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c27a:	781b      	ldrb	r3, [r3, #0]
    c27c:	2b15      	cmp	r3, #21
    c27e:	d820      	bhi.n	c2c2 <__vector_12+0x15e>
    /* place new payload byte in send register */
    tmp = ((uint8_t*)&to_fbw)[idx_buf];
    c280:	f24b 53f1 	movw	r3, #46577	; 0xb5f1
    c284:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c288:	781b      	ldrb	r3, [r3, #0]
    c28a:	461a      	mov	r2, r3
    c28c:	f24b 53d8 	movw	r3, #46552	; 0xb5d8
    c290:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c294:	4413      	add	r3, r2
    c296:	781b      	ldrb	r3, [r3, #0]
    c298:	71fb      	strb	r3, [r7, #7]
    SPI_SEND(tmp);
    c29a:	f248 030f 	movw	r3, #32783	; 0x800f
    c29e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2a2:	79fa      	ldrb	r2, [r7, #7]
    c2a4:	701a      	strb	r2, [r3, #0]
    xor_out ^= tmp;
    c2a6:	f24b 53f3 	movw	r3, #46579	; 0xb5f3
    c2aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2ae:	781a      	ldrb	r2, [r3, #0]
    c2b0:	79fb      	ldrb	r3, [r7, #7]
    c2b2:	4053      	eors	r3, r2
    c2b4:	b2da      	uxtb	r2, r3
    c2b6:	f24b 53f3 	movw	r3, #46579	; 0xb5f3
    c2ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2be:	701a      	strb	r2, [r3, #0]
    c2c0:	e009      	b.n	c2d6 <__vector_12+0x172>
  } 
  /* we are done sending the payload */
  else { // idx_buf == FRAME_LENGTH - 1
    /* place checksum in send register */
    SPI_SEND(xor_out);
    c2c2:	f248 030f 	movw	r3, #32783	; 0x800f
    c2c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2ca:	f24b 52f3 	movw	r2, #46579	; 0xb5f3
    c2ce:	f2c2 0204 	movt	r2, #8196	; 0x2004
    c2d2:	7812      	ldrb	r2, [r2, #0]
    c2d4:	701a      	strb	r2, [r3, #0]
  }
  
  /* read the byte from receive register */
  tmp = SPDR;
    c2d6:	f248 030f 	movw	r3, #32783	; 0x800f
    c2da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2de:	781b      	ldrb	r3, [r3, #0]
    c2e0:	71fb      	strb	r3, [r7, #7]
  ((uint8_t*)&from_fbw)[idx_buf-1] = tmp;
    c2e2:	f24b 53f1 	movw	r3, #46577	; 0xb5f1
    c2e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2ea:	781b      	ldrb	r3, [r3, #0]
    c2ec:	1e5a      	subs	r2, r3, #1
    c2ee:	f24b 53c0 	movw	r3, #46528	; 0xb5c0
    c2f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2f6:	4413      	add	r3, r2
    c2f8:	79fa      	ldrb	r2, [r7, #7]
    c2fa:	701a      	strb	r2, [r3, #0]
  xor_in ^= tmp;
    c2fc:	f24b 53f2 	movw	r3, #46578	; 0xb5f2
    c300:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c304:	781a      	ldrb	r2, [r3, #0]
    c306:	79fb      	ldrb	r3, [r7, #7]
    c308:	4053      	eors	r3, r2
    c30a:	b2da      	uxtb	r2, r3
    c30c:	f24b 53f2 	movw	r3, #46578	; 0xb5f2
    c310:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c314:	701a      	strb	r2, [r3, #0]
}
    c316:	370c      	adds	r7, #12
    c318:	46bd      	mov	sp, r7
    c31a:	f85d 7b04 	ldr.w	r7, [sp], #4
    c31e:	4770      	bx	lr

0000c320 <spi_init>:
#include "ad7714.h"

volatile uint8_t spi_cur_slave;
uint8_t spi_nb_ovrn;

void spi_init( void) {
    c320:	b480      	push	{r7}
    c322:	af00      	add	r7, sp, #0
  /* Set MOSI and SCK output, all others input */ 
  SPI_DDR |= _BV(SPI_MOSI_PIN)| _BV(SPI_SCK_PIN); 
    c324:	f248 0317 	movw	r3, #32791	; 0x8017
    c328:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c32c:	f248 0217 	movw	r2, #32791	; 0x8017
    c330:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c334:	7812      	ldrb	r2, [r2, #0]
    c336:	b2d2      	uxtb	r2, r2
    c338:	f042 0206 	orr.w	r2, r2, #6
    c33c:	b2d2      	uxtb	r2, r2
    c33e:	701a      	strb	r2, [r3, #0]

  /* enable pull up for miso */
  //  SPI_PORT |= _BV(SPI_MISO_PIN);

  /* Set SS0 output */
  sbi( SPI_SS0_DDR, SPI_SS0_PIN);
    c340:	f248 0317 	movw	r3, #32791	; 0x8017
    c344:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c348:	f248 0217 	movw	r2, #32791	; 0x8017
    c34c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c350:	7812      	ldrb	r2, [r2, #0]
    c352:	b2d2      	uxtb	r2, r2
    c354:	f042 0201 	orr.w	r2, r2, #1
    c358:	b2d2      	uxtb	r2, r2
    c35a:	701a      	strb	r2, [r3, #0]
  /* SS0 idles high (don't select slave yet)*/
  SPI_UNSELECT_SLAVE0();
    c35c:	f24b 53f4 	movw	r3, #46580	; 0xb5f4
    c360:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c364:	2200      	movs	r2, #0
    c366:	701a      	strb	r2, [r3, #0]
    c368:	f248 0318 	movw	r3, #32792	; 0x8018
    c36c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c370:	f248 0218 	movw	r2, #32792	; 0x8018
    c374:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c378:	7812      	ldrb	r2, [r2, #0]
    c37a:	b2d2      	uxtb	r2, r2
    c37c:	f042 0201 	orr.w	r2, r2, #1
    c380:	b2d2      	uxtb	r2, r2
    c382:	701a      	strb	r2, [r3, #0]

  /* Set SS1 output */
  sbi( SPI_SS1_DDR, SPI_SS1_PIN);
    c384:	f248 0302 	movw	r3, #32770	; 0x8002
    c388:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c38c:	f248 0202 	movw	r2, #32770	; 0x8002
    c390:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c394:	7812      	ldrb	r2, [r2, #0]
    c396:	b2d2      	uxtb	r2, r2
    c398:	f062 027f 	orn	r2, r2, #127	; 0x7f
    c39c:	b2d2      	uxtb	r2, r2
    c39e:	701a      	strb	r2, [r3, #0]
  /* SS1 idles high (don't select slave yet)*/
  SPI_UNSELECT_SLAVE1();
    c3a0:	f24b 53f4 	movw	r3, #46580	; 0xb5f4
    c3a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3a8:	2200      	movs	r2, #0
    c3aa:	701a      	strb	r2, [r3, #0]
    c3ac:	f248 0303 	movw	r3, #32771	; 0x8003
    c3b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3b4:	f248 0203 	movw	r2, #32771	; 0x8003
    c3b8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c3bc:	7812      	ldrb	r2, [r2, #0]
    c3be:	b2d2      	uxtb	r2, r2
    c3c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
    c3c4:	b2d2      	uxtb	r2, r2
    c3c6:	701a      	strb	r2, [r3, #0]
  
  spi_cur_slave = SPI_NONE;
    c3c8:	f24b 53f4 	movw	r3, #46580	; 0xb5f4
    c3cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3d0:	2200      	movs	r2, #0
    c3d2:	701a      	strb	r2, [r3, #0]
}
    c3d4:	46bd      	mov	sp, r7
    c3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    c3da:	4770      	bx	lr

0000c3dc <__vector_17>:


SIGNAL(SIG_SPI) {
    c3dc:	b580      	push	{r7, lr}
    c3de:	af00      	add	r7, sp, #0
  if (spi_cur_slave == SPI_SLAVE0)
    c3e0:	f24b 53f4 	movw	r3, #46580	; 0xb5f4
    c3e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3e8:	781b      	ldrb	r3, [r3, #0]
    c3ea:	b2db      	uxtb	r3, r3
    c3ec:	2b01      	cmp	r3, #1
    c3ee:	d102      	bne.n	c3f6 <__vector_17+0x1a>
    link_fbw_on_spi_it();
    c3f0:	f7ff fe88 	bl	c104 <link_fbw_on_spi_it>
    c3f4:	e00b      	b.n	c40e <__vector_17+0x32>
  else
    fatal_error_nb++;
    c3f6:	f24b 4398 	movw	r3, #46232	; 0xb498
    c3fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3fe:	781b      	ldrb	r3, [r3, #0]
    c400:	3301      	adds	r3, #1
    c402:	b2da      	uxtb	r2, r3
    c404:	f24b 4398 	movw	r3, #46232	; 0xb498
    c408:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c40c:	701a      	strb	r2, [r3, #0]
}
    c40e:	bd80      	pop	{r7, pc}

0000c410 <adc_buf_channel>:

uint16_t		adc_samples[ NB_ADC ];

static struct adc_buf* buffers[NB_ADC];

void adc_buf_channel(uint8_t adc_channel, struct adc_buf* s) {
    c410:	b480      	push	{r7}
    c412:	b083      	sub	sp, #12
    c414:	af00      	add	r7, sp, #0
    c416:	4603      	mov	r3, r0
    c418:	6039      	str	r1, [r7, #0]
    c41a:	71fb      	strb	r3, [r7, #7]
  buffers[adc_channel] = s;
    c41c:	79fa      	ldrb	r2, [r7, #7]
    c41e:	f24b 6308 	movw	r3, #46600	; 0xb608
    c422:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c426:	6839      	ldr	r1, [r7, #0]
    c428:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    c42c:	370c      	adds	r7, #12
    c42e:	46bd      	mov	sp, r7
    c430:	f85d 7b04 	ldr.w	r7, [sp], #4
    c434:	4770      	bx	lr
    c436:	bf00      	nop

0000c438 <adc_init>:

void 
adc_init( void )
{
    c438:	b480      	push	{r7}
    c43a:	b083      	sub	sp, #12
    c43c:	af00      	add	r7, sp, #0
  uint8_t i;
  /* Ensure that our port is for input with no pull-ups */
  ANALOG_PORT 	= 0x00;
    c43e:	f248 0362 	movw	r3, #32866	; 0x8062
    c442:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c446:	2200      	movs	r2, #0
    c448:	701a      	strb	r2, [r3, #0]
  ANALOG_PORT_DIR	= 0x00;
    c44a:	f248 0361 	movw	r3, #32865	; 0x8061
    c44e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c452:	2200      	movs	r2, #0
    c454:	701a      	strb	r2, [r3, #0]

  /* Select our external voltage ref, which is tied to Vcc */
  ADMUX		= ANALOG_VREF;
    c456:	f248 0307 	movw	r3, #32775	; 0x8007
    c45a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c45e:	2240      	movs	r2, #64	; 0x40
    c460:	701a      	strb	r2, [r3, #0]

  /* Turn off the analog comparator */
  sbi( ACSR, ACD );
    c462:	f248 0308 	movw	r3, #32776	; 0x8008
    c466:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c46a:	f248 0208 	movw	r2, #32776	; 0x8008
    c46e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c472:	7812      	ldrb	r2, [r2, #0]
    c474:	b2d2      	uxtb	r2, r2
    c476:	f062 027f 	orn	r2, r2, #127	; 0x7f
    c47a:	b2d2      	uxtb	r2, r2
    c47c:	701a      	strb	r2, [r3, #0]

  /* Select out clock, turn on the ADC interrupt and start conversion */
  ADCSR		= 0
    c47e:	f248 0306 	movw	r3, #32774	; 0x8006
    c482:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c486:	22cf      	movs	r2, #207	; 0xcf
    c488:	701a      	strb	r2, [r3, #0]
    | ( 1 << ADEN )
    | ( 1 << ADIE )
    | ( 1 << ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < NB_ADC; i++)
    c48a:	2300      	movs	r3, #0
    c48c:	71fb      	strb	r3, [r7, #7]
    c48e:	e00a      	b.n	c4a6 <adc_init+0x6e>
    buffers[i] = (struct adc_buf*)0;
    c490:	79fa      	ldrb	r2, [r7, #7]
    c492:	f24b 6308 	movw	r3, #46600	; 0xb608
    c496:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c49a:	2100      	movs	r1, #0
    c49c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    | ( 1 << ADEN )
    | ( 1 << ADIE )
    | ( 1 << ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < NB_ADC; i++)
    c4a0:	79fb      	ldrb	r3, [r7, #7]
    c4a2:	3301      	adds	r3, #1
    c4a4:	71fb      	strb	r3, [r7, #7]
    c4a6:	79fb      	ldrb	r3, [r7, #7]
    c4a8:	2b07      	cmp	r3, #7
    c4aa:	d9f1      	bls.n	c490 <adc_init+0x58>
    buffers[i] = (struct adc_buf*)0;
}
    c4ac:	370c      	adds	r7, #12
    c4ae:	46bd      	mov	sp, r7
    c4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    c4b4:	4770      	bx	lr
    c4b6:	bf00      	nop

0000c4b8 <__vector_21>:
 *  8.913kHz on mega128@16MHz 1kHz/channel ??
*/


SIGNAL( SIG_ADC )
{
    c4b8:	b480      	push	{r7}
    c4ba:	b085      	sub	sp, #20
    c4bc:	af00      	add	r7, sp, #0
  uint8_t adc_input	= ADMUX & 0x7;
    c4be:	f248 0307 	movw	r3, #32775	; 0x8007
    c4c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4c6:	781b      	ldrb	r3, [r3, #0]
    c4c8:	b2db      	uxtb	r3, r3
    c4ca:	f003 0307 	and.w	r3, r3, #7
    c4ce:	73fb      	strb	r3, [r7, #15]
  struct adc_buf* buf = buffers[adc_input];
    c4d0:	7bfa      	ldrb	r2, [r7, #15]
    c4d2:	f24b 6308 	movw	r3, #46600	; 0xb608
    c4d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    c4de:	60bb      	str	r3, [r7, #8]
  uint16_t adc_value = ADCW;
    c4e0:	f248 0304 	movw	r3, #32772	; 0x8004
    c4e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4e8:	881b      	ldrh	r3, [r3, #0]
    c4ea:	80fb      	strh	r3, [r7, #6]
  /* Store result */
  adc_samples[ adc_input ] = adc_value;
    c4ec:	7bfa      	ldrb	r2, [r7, #15]
    c4ee:	f24b 53f8 	movw	r3, #46584	; 0xb5f8
    c4f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4f6:	88f9      	ldrh	r1, [r7, #6]
    c4f8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

  if (buf) {
    c4fc:	68bb      	ldr	r3, [r7, #8]
    c4fe:	2b00      	cmp	r3, #0
    c500:	d025      	beq.n	c54e <__vector_21+0x96>
    uint8_t new_head = buf->head + 1;
    c502:	68bb      	ldr	r3, [r7, #8]
    c504:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
    c508:	3301      	adds	r3, #1
    c50a:	73bb      	strb	r3, [r7, #14]
    if (new_head >= AV_NB_SAMPLE) new_head = 0;
    c50c:	7bbb      	ldrb	r3, [r7, #14]
    c50e:	2b1f      	cmp	r3, #31
    c510:	d901      	bls.n	c516 <__vector_21+0x5e>
    c512:	2300      	movs	r3, #0
    c514:	73bb      	strb	r3, [r7, #14]
    buf->sum -= buf->values[new_head];
    c516:	68bb      	ldr	r3, [r7, #8]
    c518:	881a      	ldrh	r2, [r3, #0]
    c51a:	7bbb      	ldrb	r3, [r7, #14]
    c51c:	68b9      	ldr	r1, [r7, #8]
    c51e:	005b      	lsls	r3, r3, #1
    c520:	440b      	add	r3, r1
    c522:	885b      	ldrh	r3, [r3, #2]
    c524:	1ad3      	subs	r3, r2, r3
    c526:	b29a      	uxth	r2, r3
    c528:	68bb      	ldr	r3, [r7, #8]
    c52a:	801a      	strh	r2, [r3, #0]
    buf->values[new_head] = adc_value;
    c52c:	7bbb      	ldrb	r3, [r7, #14]
    c52e:	68ba      	ldr	r2, [r7, #8]
    c530:	005b      	lsls	r3, r3, #1
    c532:	4413      	add	r3, r2
    c534:	88fa      	ldrh	r2, [r7, #6]
    c536:	805a      	strh	r2, [r3, #2]
    buf->sum += adc_value;
    c538:	68bb      	ldr	r3, [r7, #8]
    c53a:	881a      	ldrh	r2, [r3, #0]
    c53c:	88fb      	ldrh	r3, [r7, #6]
    c53e:	4413      	add	r3, r2
    c540:	b29a      	uxth	r2, r3
    c542:	68bb      	ldr	r3, [r7, #8]
    c544:	801a      	strh	r2, [r3, #0]
    buf->head = new_head;   
    c546:	68bb      	ldr	r3, [r7, #8]
    c548:	7bba      	ldrb	r2, [r7, #14]
    c54a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Find the next input */
  adc_input++;
    c54e:	7bfb      	ldrb	r3, [r7, #15]
    c550:	3301      	adds	r3, #1
    c552:	73fb      	strb	r3, [r7, #15]
  if( adc_input >= 8 )
    c554:	7bfb      	ldrb	r3, [r7, #15]
    c556:	2b07      	cmp	r3, #7
    c558:	d901      	bls.n	c55e <__vector_21+0xa6>
    adc_input = 0;
    c55a:	2300      	movs	r3, #0
    c55c:	73fb      	strb	r3, [r7, #15]
  /* Select it */
  ADMUX = adc_input | ANALOG_VREF;
    c55e:	f248 0307 	movw	r3, #32775	; 0x8007
    c562:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c566:	7bfa      	ldrb	r2, [r7, #15]
    c568:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    c56c:	b2d2      	uxtb	r2, r2
    c56e:	701a      	strb	r2, [r3, #0]
  /* Restart the conversion */
  sbi( ADCSR, ADSC );
    c570:	f248 0306 	movw	r3, #32774	; 0x8006
    c574:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c578:	f248 0206 	movw	r2, #32774	; 0x8006
    c57c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c580:	7812      	ldrb	r2, [r2, #0]
    c582:	b2d2      	uxtb	r2, r2
    c584:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    c588:	b2d2      	uxtb	r2, r2
    c58a:	701a      	strb	r2, [r3, #0]
  
}
    c58c:	3714      	adds	r7, #20
    c58e:	46bd      	mov	sp, r7
    c590:	f85d 7b04 	ldr.w	r7, [sp], #4
    c594:	4770      	bx	lr
    c596:	bf00      	nop

0000c598 <gps_init>:
static uint8_t  ubx_status;
static uint16_t ubx_len;
static uint8_t  ubx_msg_idx;
static uint8_t ck_a, ck_b, ubx_id, ubx_class;

void gps_init( void ) {
    c598:	b580      	push	{r7, lr}
    c59a:	af00      	add	r7, sp, #0
#ifdef SIMUL
  uart0_init();
  simul_ir_roll = ir_roll_neutral;
  simul_ir_pitch = ir_pitch_neutral;
#else
  uart1_init();
    c59c:	f003 fca8 	bl	fef0 <uart1_init>
#endif
  ubx_status = UNINIT;
    c5a0:	f24b 734f 	movw	r3, #46927	; 0xb74f
    c5a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5a8:	2200      	movs	r2, #0
    c5aa:	701a      	strb	r2, [r3, #0]
}
    c5ac:	bd80      	pop	{r7, pc}
    c5ae:	bf00      	nop

0000c5b0 <parse_gps_msg>:

void parse_gps_msg( void ) {
    c5b0:	b580      	push	{r7, lr}
    c5b2:	af00      	add	r7, sp, #0
    ubx_class = 1;
    ubx_id = (ubx_id + 1)%0x40;
    */
    //end

  if (ubx_class == UBX_NAV_ID) {
    c5b4:	f24b 7356 	movw	r3, #46934	; 0xb756
    c5b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5bc:	781b      	ldrb	r3, [r3, #0]
    c5be:	2b01      	cmp	r3, #1
    c5c0:	f040 80f9 	bne.w	c7b6 <parse_gps_msg+0x206>
    if (ubx_id == UBX_NAV_POSUTM_ID) {
    c5c4:	f24b 7355 	movw	r3, #46933	; 0xb755
    c5c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5cc:	781b      	ldrb	r3, [r3, #0]
    c5ce:	2b08      	cmp	r3, #8
    c5d0:	d128      	bne.n	c624 <parse_gps_msg+0x74>
      gps_utm_east = UBX_NAV_POSUTM_EAST(ubx_msg_buf);
    c5d2:	f24b 6350 	movw	r3, #46672	; 0xb650
    c5d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5da:	685a      	ldr	r2, [r3, #4]
    c5dc:	f24b 633c 	movw	r3, #46652	; 0xb63c
    c5e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5e4:	601a      	str	r2, [r3, #0]
      gps_utm_north = UBX_NAV_POSUTM_NORTH(ubx_msg_buf);
    c5e6:	f24b 6350 	movw	r3, #46672	; 0xb650
    c5ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5ee:	689a      	ldr	r2, [r3, #8]
    c5f0:	f24b 6340 	movw	r3, #46656	; 0xb640
    c5f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5f8:	601a      	str	r2, [r3, #0]
      gps_falt = (float)UBX_NAV_POSUTM_ALT(ubx_msg_buf) / 100.;
    c5fa:	4b73      	ldr	r3, [pc, #460]	; (c7c8 <parse_gps_msg+0x218>)
    c5fc:	681b      	ldr	r3, [r3, #0]
    c5fe:	4618      	mov	r0, r3
    c600:	f006 fe32 	bl	13268 <__aeabi_i2f>
    c604:	4603      	mov	r3, r0
    c606:	4618      	mov	r0, r3
    c608:	f04f 0100 	mov.w	r1, #0
    c60c:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
    c610:	f006 ff32 	bl	13478 <__aeabi_fdiv>
    c614:	4603      	mov	r3, r0
    c616:	461a      	mov	r2, r3
    c618:	f24b 632c 	movw	r3, #46636	; 0xb62c
    c61c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c620:	601a      	str	r2, [r3, #0]
    c622:	e0c8      	b.n	c7b6 <parse_gps_msg+0x206>
        gps_utm_east = gps_utm_east + 0.5;
        gps_utm_north = gps_utm_north + 0.4;
        gps_falt = gps_falt + 0.6;
        */
        // end
    } else if (ubx_id == UBX_NAV_STATUS_ID) {
    c624:	f24b 7355 	movw	r3, #46933	; 0xb755
    c628:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c62c:	781b      	ldrb	r3, [r3, #0]
    c62e:	2b03      	cmp	r3, #3
    c630:	d10a      	bne.n	c648 <parse_gps_msg+0x98>
      gps_mode = UBX_NAV_STATUS_GPSfix(ubx_msg_buf);
    c632:	f24b 6350 	movw	r3, #46672	; 0xb650
    c636:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c63a:	791a      	ldrb	r2, [r3, #4]
    c63c:	f24b 634c 	movw	r3, #46668	; 0xb64c
    c640:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c644:	701a      	strb	r2, [r3, #0]
    c646:	e0b6      	b.n	c7b6 <parse_gps_msg+0x206>
    } else if (ubx_id == UBX_NAV_VELNED_ID) {
    c648:	f24b 7355 	movw	r3, #46933	; 0xb755
    c64c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c650:	781b      	ldrb	r3, [r3, #0]
    c652:	2b12      	cmp	r3, #18
    c654:	f040 80af 	bne.w	c7b6 <parse_gps_msg+0x206>
      gps_fspeed = ((float)UBX_NAV_VELNED_GSpeed(ubx_msg_buf)) / 1e2; 
    c658:	4b5c      	ldr	r3, [pc, #368]	; (c7cc <parse_gps_msg+0x21c>)
    c65a:	681b      	ldr	r3, [r3, #0]
    c65c:	4618      	mov	r0, r3
    c65e:	f006 fdff 	bl	13260 <__aeabi_ui2f>
    c662:	4603      	mov	r3, r0
    c664:	4618      	mov	r0, r3
    c666:	f04f 0100 	mov.w	r1, #0
    c66a:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
    c66e:	f006 ff03 	bl	13478 <__aeabi_fdiv>
    c672:	4603      	mov	r3, r0
    c674:	461a      	mov	r2, r3
    c676:	f24b 6330 	movw	r3, #46640	; 0xb630
    c67a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c67e:	601a      	str	r2, [r3, #0]
      gps_fclimb = ((float)UBX_NAV_VELNED_VEL_D(ubx_msg_buf)) / -1e2;
    c680:	4b51      	ldr	r3, [pc, #324]	; (c7c8 <parse_gps_msg+0x218>)
    c682:	681b      	ldr	r3, [r3, #0]
    c684:	4618      	mov	r0, r3
    c686:	f006 fdef 	bl	13268 <__aeabi_i2f>
    c68a:	4603      	mov	r3, r0
    c68c:	4618      	mov	r0, r3
    c68e:	f04f 0100 	mov.w	r1, #0
    c692:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
    c696:	f006 feef 	bl	13478 <__aeabi_fdiv>
    c69a:	4603      	mov	r3, r0
    c69c:	461a      	mov	r2, r3
    c69e:	f24b 6334 	movw	r3, #46644	; 0xb634
    c6a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6a6:	601a      	str	r2, [r3, #0]
      gps_fcourse = RadianOfDeg(((float)UBX_NAV_VELNED_Heading(ubx_msg_buf)) / 1e5);
    c6a8:	4b49      	ldr	r3, [pc, #292]	; (c7d0 <parse_gps_msg+0x220>)
    c6aa:	681b      	ldr	r3, [r3, #0]
    c6ac:	4618      	mov	r0, r3
    c6ae:	f006 fddb 	bl	13268 <__aeabi_i2f>
    c6b2:	4603      	mov	r3, r0
    c6b4:	4618      	mov	r0, r3
    c6b6:	f006 f997 	bl	129e8 <__aeabi_f2d>
    c6ba:	4602      	mov	r2, r0
    c6bc:	460b      	mov	r3, r1
    c6be:	4610      	mov	r0, r2
    c6c0:	4619      	mov	r1, r3
    c6c2:	a33d      	add	r3, pc, #244	; (adr r3, c7b8 <parse_gps_msg+0x208>)
    c6c4:	e9d3 2300 	ldrd	r2, r3, [r3]
    c6c8:	f006 fb0c 	bl	12ce4 <__aeabi_ddiv>
    c6cc:	4602      	mov	r2, r0
    c6ce:	460b      	mov	r3, r1
    c6d0:	4610      	mov	r0, r2
    c6d2:	4619      	mov	r1, r3
    c6d4:	f04f 0200 	mov.w	r2, #0
    c6d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    c6dc:	f2c4 0366 	movt	r3, #16486	; 0x4066
    c6e0:	f006 fb00 	bl	12ce4 <__aeabi_ddiv>
    c6e4:	4602      	mov	r2, r0
    c6e6:	460b      	mov	r3, r1
    c6e8:	4610      	mov	r0, r2
    c6ea:	4619      	mov	r1, r3
    c6ec:	a334      	add	r3, pc, #208	; (adr r3, c7c0 <parse_gps_msg+0x210>)
    c6ee:	e9d3 2300 	ldrd	r2, r3, [r3]
    c6f2:	f006 f9cd 	bl	12a90 <__aeabi_dmul>
    c6f6:	4602      	mov	r2, r0
    c6f8:	460b      	mov	r3, r1
    c6fa:	4610      	mov	r0, r2
    c6fc:	4619      	mov	r1, r3
    c6fe:	f006 fca9 	bl	13054 <__aeabi_d2f>
    c702:	4602      	mov	r2, r0
    c704:	f24b 6338 	movw	r3, #46648	; 0xb638
    c708:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c70c:	601a      	str	r2, [r3, #0]
      gps_ftow = ((float)UBX_NAV_VELNED_ITOW(ubx_msg_buf)) / 1e3;
    c70e:	f24b 6350 	movw	r3, #46672	; 0xb650
    c712:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c716:	681b      	ldr	r3, [r3, #0]
    c718:	4618      	mov	r0, r3
    c71a:	f006 fda1 	bl	13260 <__aeabi_ui2f>
    c71e:	4603      	mov	r3, r0
    c720:	4618      	mov	r0, r3
    c722:	f04f 0100 	mov.w	r1, #0
    c726:	f2c4 417a 	movt	r1, #17530	; 0x447a
    c72a:	f006 fea5 	bl	13478 <__aeabi_fdiv>
    c72e:	4603      	mov	r3, r0
    c730:	461a      	mov	r2, r3
    c732:	f24b 6328 	movw	r3, #46632	; 0xb628
    c736:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c73a:	601a      	str	r2, [r3, #0]
        gps_fcourse = gps_fcourse + 0.2;
        gps_ftow = gps_ftow + 0.1;
        */
        // end
      
      gps_east = gps_utm_east / 100 - NAV_UTM_EAST0;
    c73c:	f24b 633c 	movw	r3, #46652	; 0xb63c
    c740:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c744:	681a      	ldr	r2, [r3, #0]
    c746:	f248 531f 	movw	r3, #34079	; 0x851f
    c74a:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    c74e:	fb83 1302 	smull	r1, r3, r3, r2
    c752:	1159      	asrs	r1, r3, #5
    c754:	17d3      	asrs	r3, r2, #31
    c756:	1acb      	subs	r3, r1, r3
    c758:	f5a3 2313 	sub.w	r3, r3, #602112	; 0x93000
    c75c:	f6a3 535a 	subw	r3, r3, #3418	; 0xd5a
    c760:	4618      	mov	r0, r3
    c762:	f006 fd81 	bl	13268 <__aeabi_i2f>
    c766:	4602      	mov	r2, r0
    c768:	f24b 6344 	movw	r3, #46660	; 0xb644
    c76c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c770:	601a      	str	r2, [r3, #0]
      gps_north = gps_utm_north / 100 - NAV_UTM_NORTH0;
    c772:	f24b 6340 	movw	r3, #46656	; 0xb640
    c776:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c77a:	681a      	ldr	r2, [r3, #0]
    c77c:	f248 531f 	movw	r3, #34079	; 0x851f
    c780:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    c784:	fb83 1302 	smull	r1, r3, r3, r2
    c788:	1159      	asrs	r1, r3, #5
    c78a:	17d3      	asrs	r3, r2, #31
    c78c:	1aca      	subs	r2, r1, r3
    c78e:	f648 231a 	movw	r3, #35354	; 0x8a1a
    c792:	f6cf 73a7 	movt	r3, #65447	; 0xffa7
    c796:	4413      	add	r3, r2
    c798:	4618      	mov	r0, r3
    c79a:	f006 fd65 	bl	13268 <__aeabi_i2f>
    c79e:	4602      	mov	r2, r0
    c7a0:	f24b 6348 	movw	r3, #46664	; 0xb648
    c7a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7a8:	601a      	str	r2, [r3, #0]
      
      
      gps_pos_available = TRUE; /* The 3 UBX messages are sent in one rafale */
    c7aa:	f24b 634e 	movw	r3, #46670	; 0xb64e
    c7ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7b2:	2201      	movs	r2, #1
    c7b4:	701a      	strb	r2, [r3, #0]
      simul_ir_roll = UBX_USR_IRSIM_ROLL(ubx_msg_buf);
      simul_ir_pitch = UBX_USR_IRSIM_PITCH(ubx_msg_buf);
    }
  }
#endif
}
    c7b6:	bd80      	pop	{r7, pc}
    c7b8:	00000000 	.word	0x00000000
    c7bc:	40f86a00 	.word	0x40f86a00
    c7c0:	5a7ed197 	.word	0x5a7ed197
    c7c4:	400921fb 	.word	0x400921fb
    c7c8:	2004b65c 	.word	0x2004b65c
    c7cc:	2004b664 	.word	0x2004b664
    c7d0:	2004b668 	.word	0x2004b668

0000c7d4 <parse_ubx>:


uint8_t gps_nb_ovrn;


static void parse_ubx( uint8_t c ) {
    c7d4:	b480      	push	{r7}
    c7d6:	b083      	sub	sp, #12
    c7d8:	af00      	add	r7, sp, #0
    c7da:	4603      	mov	r3, r0
    c7dc:	71fb      	strb	r3, [r7, #7]
   if (ubx_status < GOT_PAYLOAD) {
    c7de:	f24b 734f 	movw	r3, #46927	; 0xb74f
    c7e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7e6:	781b      	ldrb	r3, [r3, #0]
    c7e8:	2b06      	cmp	r3, #6
    c7ea:	d81d      	bhi.n	c828 <parse_ubx+0x54>
    ck_a += c;
    c7ec:	f24b 7353 	movw	r3, #46931	; 0xb753
    c7f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7f4:	781a      	ldrb	r2, [r3, #0]
    c7f6:	79fb      	ldrb	r3, [r7, #7]
    c7f8:	4413      	add	r3, r2
    c7fa:	b2da      	uxtb	r2, r3
    c7fc:	f24b 7353 	movw	r3, #46931	; 0xb753
    c800:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c804:	701a      	strb	r2, [r3, #0]
    ck_b += ck_a;
    c806:	f24b 7354 	movw	r3, #46932	; 0xb754
    c80a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c80e:	781a      	ldrb	r2, [r3, #0]
    c810:	f24b 7353 	movw	r3, #46931	; 0xb753
    c814:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c818:	781b      	ldrb	r3, [r3, #0]
    c81a:	4413      	add	r3, r2
    c81c:	b2da      	uxtb	r2, r3
    c81e:	f24b 7354 	movw	r3, #46932	; 0xb754
    c822:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c826:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
    break;
  }
#else */
  if (ubx_status == UNINIT)
    c828:	f24b 734f 	movw	r3, #46927	; 0xb74f
    c82c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c830:	781b      	ldrb	r3, [r3, #0]
    c832:	2b00      	cmp	r3, #0
    c834:	d110      	bne.n	c858 <parse_ubx+0x84>
  {
    if (c == UBX_SYNC1)
    c836:	79fb      	ldrb	r3, [r7, #7]
    c838:	2bb5      	cmp	r3, #181	; 0xb5
    c83a:	f040 8135 	bne.w	caa8 <parse_ubx+0x2d4>
      ubx_status++;
    c83e:	f24b 734f 	movw	r3, #46927	; 0xb74f
    c842:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c846:	781b      	ldrb	r3, [r3, #0]
    c848:	3301      	adds	r3, #1
    c84a:	b2da      	uxtb	r2, r3
    c84c:	f24b 734f 	movw	r3, #46927	; 0xb74f
    c850:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c854:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
  }
  else {}
//#endif
  return;
    c856:	e12f      	b.n	cab8 <parse_ubx+0x2e4>
  if (ubx_status == UNINIT)
  {
    if (c == UBX_SYNC1)
      ubx_status++;
  }
  else if (ubx_status == GOT_SYNC1)
    c858:	f24b 734f 	movw	r3, #46927	; 0xb74f
    c85c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c860:	781b      	ldrb	r3, [r3, #0]
    c862:	2b01      	cmp	r3, #1
    c864:	d11c      	bne.n	c8a0 <parse_ubx+0xcc>
  {
    if (c != UBX_SYNC2)
    c866:	79fb      	ldrb	r3, [r7, #7]
    c868:	2b62      	cmp	r3, #98	; 0x62
    c86a:	d000      	beq.n	c86e <parse_ubx+0x9a>
      goto error;
    c86c:	e11d      	b.n	caaa <parse_ubx+0x2d6>
    ck_a = 0;
    c86e:	f24b 7353 	movw	r3, #46931	; 0xb753
    c872:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c876:	2200      	movs	r2, #0
    c878:	701a      	strb	r2, [r3, #0]
    ck_b = 0;
    c87a:	f24b 7354 	movw	r3, #46932	; 0xb754
    c87e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c882:	2200      	movs	r2, #0
    c884:	701a      	strb	r2, [r3, #0]
    ubx_status++;
    c886:	f24b 734f 	movw	r3, #46927	; 0xb74f
    c88a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c88e:	781b      	ldrb	r3, [r3, #0]
    c890:	3301      	adds	r3, #1
    c892:	b2da      	uxtb	r2, r3
    c894:	f24b 734f 	movw	r3, #46927	; 0xb74f
    c898:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c89c:	701a      	strb	r2, [r3, #0]
    c89e:	e103      	b.n	caa8 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_SYNC2)
    c8a0:	f24b 734f 	movw	r3, #46927	; 0xb74f
    c8a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8a8:	781b      	ldrb	r3, [r3, #0]
    c8aa:	2b02      	cmp	r3, #2
    c8ac:	d127      	bne.n	c8fe <parse_ubx+0x12a>
  {
    if (gps_msg_received) {
    c8ae:	f24b 634d 	movw	r3, #46669	; 0xb64d
    c8b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8b6:	781b      	ldrb	r3, [r3, #0]
    c8b8:	b2db      	uxtb	r3, r3
    c8ba:	2b00      	cmp	r3, #0
    c8bc:	d00c      	beq.n	c8d8 <parse_ubx+0x104>
      /* Previous message has not yet been parsed: discard this one */
      gps_nb_ovrn++;
    c8be:	f24b 7357 	movw	r3, #46935	; 0xb757
    c8c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8c6:	781b      	ldrb	r3, [r3, #0]
    c8c8:	3301      	adds	r3, #1
    c8ca:	b2da      	uxtb	r2, r3
    c8cc:	f24b 7357 	movw	r3, #46935	; 0xb757
    c8d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8d4:	701a      	strb	r2, [r3, #0]
      goto error;
    c8d6:	e0e8      	b.n	caaa <parse_ubx+0x2d6>
    }
    ubx_class = c;
    c8d8:	f24b 7356 	movw	r3, #46934	; 0xb756
    c8dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8e0:	79fa      	ldrb	r2, [r7, #7]
    c8e2:	701a      	strb	r2, [r3, #0]
    ubx_status++;
    c8e4:	f24b 734f 	movw	r3, #46927	; 0xb74f
    c8e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8ec:	781b      	ldrb	r3, [r3, #0]
    c8ee:	3301      	adds	r3, #1
    c8f0:	b2da      	uxtb	r2, r3
    c8f2:	f24b 734f 	movw	r3, #46927	; 0xb74f
    c8f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8fa:	701a      	strb	r2, [r3, #0]
    c8fc:	e0d4      	b.n	caa8 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_CLASS)
    c8fe:	f24b 734f 	movw	r3, #46927	; 0xb74f
    c902:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c906:	781b      	ldrb	r3, [r3, #0]
    c908:	2b03      	cmp	r3, #3
    c90a:	d112      	bne.n	c932 <parse_ubx+0x15e>
  {
    ubx_id = c;
    c90c:	f24b 7355 	movw	r3, #46933	; 0xb755
    c910:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c914:	79fa      	ldrb	r2, [r7, #7]
    c916:	701a      	strb	r2, [r3, #0]
    ubx_status++;
    c918:	f24b 734f 	movw	r3, #46927	; 0xb74f
    c91c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c920:	781b      	ldrb	r3, [r3, #0]
    c922:	3301      	adds	r3, #1
    c924:	b2da      	uxtb	r2, r3
    c926:	f24b 734f 	movw	r3, #46927	; 0xb74f
    c92a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c92e:	701a      	strb	r2, [r3, #0]
    c930:	e0ba      	b.n	caa8 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_ID)
    c932:	f24b 734f 	movw	r3, #46927	; 0xb74f
    c936:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c93a:	781b      	ldrb	r3, [r3, #0]
    c93c:	2b04      	cmp	r3, #4
    c93e:	d113      	bne.n	c968 <parse_ubx+0x194>
  {
    ubx_len = c;
    c940:	79fb      	ldrb	r3, [r7, #7]
    c942:	b29a      	uxth	r2, r3
    c944:	f24b 7350 	movw	r3, #46928	; 0xb750
    c948:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c94c:	801a      	strh	r2, [r3, #0]
    ubx_status++;
    c94e:	f24b 734f 	movw	r3, #46927	; 0xb74f
    c952:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c956:	781b      	ldrb	r3, [r3, #0]
    c958:	3301      	adds	r3, #1
    c95a:	b2da      	uxtb	r2, r3
    c95c:	f24b 734f 	movw	r3, #46927	; 0xb74f
    c960:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c964:	701a      	strb	r2, [r3, #0]
    c966:	e09f      	b.n	caa8 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_LEN1)
    c968:	f24b 734f 	movw	r3, #46927	; 0xb74f
    c96c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c970:	781b      	ldrb	r3, [r3, #0]
    c972:	2b05      	cmp	r3, #5
    c974:	d12b      	bne.n	c9ce <parse_ubx+0x1fa>
  {
    ubx_len |= (c<<8);
    c976:	79fb      	ldrb	r3, [r7, #7]
    c978:	021b      	lsls	r3, r3, #8
    c97a:	b29a      	uxth	r2, r3
    c97c:	f24b 7350 	movw	r3, #46928	; 0xb750
    c980:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c984:	881b      	ldrh	r3, [r3, #0]
    c986:	b29b      	uxth	r3, r3
    c988:	4313      	orrs	r3, r2
    c98a:	b29b      	uxth	r3, r3
    c98c:	b29a      	uxth	r2, r3
    c98e:	f24b 7350 	movw	r3, #46928	; 0xb750
    c992:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c996:	801a      	strh	r2, [r3, #0]
    if (ubx_len > UBX_MAX_PAYLOAD)
    c998:	f24b 7350 	movw	r3, #46928	; 0xb750
    c99c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9a0:	881b      	ldrh	r3, [r3, #0]
    c9a2:	2bff      	cmp	r3, #255	; 0xff
    c9a4:	d900      	bls.n	c9a8 <parse_ubx+0x1d4>
      goto error;
    c9a6:	e080      	b.n	caaa <parse_ubx+0x2d6>
    ubx_msg_idx = 0;
    c9a8:	f24b 7352 	movw	r3, #46930	; 0xb752
    c9ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9b0:	2200      	movs	r2, #0
    c9b2:	701a      	strb	r2, [r3, #0]
    ubx_status++;
    c9b4:	f24b 734f 	movw	r3, #46927	; 0xb74f
    c9b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9bc:	781b      	ldrb	r3, [r3, #0]
    c9be:	3301      	adds	r3, #1
    c9c0:	b2da      	uxtb	r2, r3
    c9c2:	f24b 734f 	movw	r3, #46927	; 0xb74f
    c9c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9ca:	701a      	strb	r2, [r3, #0]
    c9cc:	e06c      	b.n	caa8 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_LEN2)
    c9ce:	f24b 734f 	movw	r3, #46927	; 0xb74f
    c9d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9d6:	781b      	ldrb	r3, [r3, #0]
    c9d8:	2b06      	cmp	r3, #6
    c9da:	d131      	bne.n	ca40 <parse_ubx+0x26c>
  {
    ubx_msg_buf[ubx_msg_idx] = c;
    c9dc:	f24b 7352 	movw	r3, #46930	; 0xb752
    c9e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9e4:	781b      	ldrb	r3, [r3, #0]
    c9e6:	461a      	mov	r2, r3
    c9e8:	f24b 6350 	movw	r3, #46672	; 0xb650
    c9ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9f0:	79f9      	ldrb	r1, [r7, #7]
    c9f2:	5499      	strb	r1, [r3, r2]
    ubx_msg_idx++;
    c9f4:	f24b 7352 	movw	r3, #46930	; 0xb752
    c9f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9fc:	781b      	ldrb	r3, [r3, #0]
    c9fe:	3301      	adds	r3, #1
    ca00:	b2da      	uxtb	r2, r3
    ca02:	f24b 7352 	movw	r3, #46930	; 0xb752
    ca06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca0a:	701a      	strb	r2, [r3, #0]
    if (ubx_msg_idx >= ubx_len) {
    ca0c:	f24b 7352 	movw	r3, #46930	; 0xb752
    ca10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca14:	781b      	ldrb	r3, [r3, #0]
    ca16:	461a      	mov	r2, r3
    ca18:	f24b 7350 	movw	r3, #46928	; 0xb750
    ca1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca20:	881b      	ldrh	r3, [r3, #0]
    ca22:	429a      	cmp	r2, r3
    ca24:	d340      	bcc.n	caa8 <parse_ubx+0x2d4>
      ubx_status++;
    ca26:	f24b 734f 	movw	r3, #46927	; 0xb74f
    ca2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca2e:	781b      	ldrb	r3, [r3, #0]
    ca30:	3301      	adds	r3, #1
    ca32:	b2da      	uxtb	r2, r3
    ca34:	f24b 734f 	movw	r3, #46927	; 0xb74f
    ca38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca3c:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
  }
  else {}
//#endif
  return;
    ca3e:	e03b      	b.n	cab8 <parse_ubx+0x2e4>
    ubx_msg_idx++;
    if (ubx_msg_idx >= ubx_len) {
      ubx_status++;
    }
  }
  else if (ubx_status == GOT_PAYLOAD)
    ca40:	f24b 734f 	movw	r3, #46927	; 0xb74f
    ca44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca48:	781b      	ldrb	r3, [r3, #0]
    ca4a:	2b07      	cmp	r3, #7
    ca4c:	d115      	bne.n	ca7a <parse_ubx+0x2a6>
  {
    if (c != ck_a)
    ca4e:	f24b 7353 	movw	r3, #46931	; 0xb753
    ca52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca56:	781b      	ldrb	r3, [r3, #0]
    ca58:	79fa      	ldrb	r2, [r7, #7]
    ca5a:	429a      	cmp	r2, r3
    ca5c:	d000      	beq.n	ca60 <parse_ubx+0x28c>
      goto error;
    ca5e:	e024      	b.n	caaa <parse_ubx+0x2d6>
    ubx_status++;
    ca60:	f24b 734f 	movw	r3, #46927	; 0xb74f
    ca64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca68:	781b      	ldrb	r3, [r3, #0]
    ca6a:	3301      	adds	r3, #1
    ca6c:	b2da      	uxtb	r2, r3
    ca6e:	f24b 734f 	movw	r3, #46927	; 0xb74f
    ca72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca76:	701a      	strb	r2, [r3, #0]
    ca78:	e016      	b.n	caa8 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_CHECKSUM1)
    ca7a:	f24b 734f 	movw	r3, #46927	; 0xb74f
    ca7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca82:	781b      	ldrb	r3, [r3, #0]
    ca84:	2b08      	cmp	r3, #8
    ca86:	d10f      	bne.n	caa8 <parse_ubx+0x2d4>
  {
    if (c != ck_b)
    ca88:	f24b 7354 	movw	r3, #46932	; 0xb754
    ca8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca90:	781b      	ldrb	r3, [r3, #0]
    ca92:	79fa      	ldrb	r2, [r7, #7]
    ca94:	429a      	cmp	r2, r3
    ca96:	d000      	beq.n	ca9a <parse_ubx+0x2c6>
      goto error;
    ca98:	e007      	b.n	caaa <parse_ubx+0x2d6>
    gps_msg_received = TRUE;
    ca9a:	f24b 634d 	movw	r3, #46669	; 0xb64d
    ca9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    caa2:	2201      	movs	r2, #1
    caa4:	701a      	strb	r2, [r3, #0]
    goto restart;
    caa6:	e000      	b.n	caaa <parse_ubx+0x2d6>
  }
  else {}
//#endif
  return;
    caa8:	e006      	b.n	cab8 <parse_ubx+0x2e4>
 error:  
 restart:
  ubx_status = UNINIT;
    caaa:	f24b 734f 	movw	r3, #46927	; 0xb74f
    caae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cab2:	2200      	movs	r2, #0
    cab4:	701a      	strb	r2, [r3, #0]
  return;
    cab6:	bf00      	nop
}
    cab8:	370c      	adds	r7, #12
    caba:	46bd      	mov	sp, r7
    cabc:	f85d 7b04 	ldr.w	r7, [sp], #4
    cac0:	4770      	bx	lr
    cac2:	bf00      	nop

0000cac4 <__vector_30>:

#ifdef SIMUL
ReceiveUart0(parse_ubx);
#else
ReceiveUart1(parse_ubx);
    cac4:	b580      	push	{r7, lr}
    cac6:	b082      	sub	sp, #8
    cac8:	af00      	add	r7, sp, #0
    caca:	f248 039c 	movw	r3, #32924	; 0x809c
    cace:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cad2:	781b      	ldrb	r3, [r3, #0]
    cad4:	71fb      	strb	r3, [r7, #7]
    cad6:	79fb      	ldrb	r3, [r7, #7]
    cad8:	4618      	mov	r0, r3
    cada:	f7ff fe7b 	bl	c7d4 <parse_ubx>
    cade:	3708      	adds	r7, #8
    cae0:	46bd      	mov	sp, r7
    cae2:	bd80      	pop	{r7, pc}
    cae4:	f3af 8000 	nop.w

0000cae8 <ir_init>:
float ir_rad_of_ir = IR_RAD_OF_IR_CONTRAST / IR_DEFAULT_CONTRAST;

static struct adc_buf buf_ir1;
static struct adc_buf buf_ir2;

void ir_init(void) {
    cae8:	b580      	push	{r7, lr}
    caea:	af00      	add	r7, sp, #0
  RadOfIrFromConstrast(IR_DEFAULT_CONTRAST);
    caec:	f240 1310 	movw	r3, #272	; 0x110
    caf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    caf4:	f24c 228f 	movw	r2, #49807	; 0xc28f
    caf8:	f6c3 3275 	movt	r2, #15221	; 0x3b75
    cafc:	601a      	str	r2, [r3, #0]
  adc_buf_channel(ADC_CHANNEL_IR1, &buf_ir1);
    cafe:	2001      	movs	r0, #1
    cb00:	f24b 715c 	movw	r1, #46940	; 0xb75c
    cb04:	f2c2 0104 	movt	r1, #8196	; 0x2004
    cb08:	f7ff fc82 	bl	c410 <adc_buf_channel>
  adc_buf_channel(ADC_CHANNEL_IR2, &buf_ir2);
    cb0c:	2002      	movs	r0, #2
    cb0e:	f24b 71a0 	movw	r1, #47008	; 0xb7a0
    cb12:	f2c2 0104 	movt	r1, #8196	; 0x2004
    cb16:	f7ff fc7b 	bl	c410 <adc_buf_channel>
}
    cb1a:	bd80      	pop	{r7, pc}

0000cb1c <ir_update>:
int16_t x1 = 1;
int16_t x2 = 2;
*/
// end

void ir_update(void) {
    cb1c:	b480      	push	{r7}
    cb1e:	b083      	sub	sp, #12
    cb20:	af00      	add	r7, sp, #0
#ifndef SIMUL
  int16_t x1_mean = buf_ir1.sum/AV_NB_SAMPLE;
    cb22:	f24b 735c 	movw	r3, #46940	; 0xb75c
    cb26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb2a:	881b      	ldrh	r3, [r3, #0]
    cb2c:	095b      	lsrs	r3, r3, #5
    cb2e:	b29b      	uxth	r3, r3
    cb30:	80fb      	strh	r3, [r7, #6]
  int16_t x2_mean = buf_ir2.sum/AV_NB_SAMPLE;
    cb32:	f24b 73a0 	movw	r3, #47008	; 0xb7a0
    cb36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb3a:	881b      	ldrh	r3, [r3, #0]
    cb3c:	095b      	lsrs	r3, r3, #5
    cb3e:	b29b      	uxth	r3, r3
    cb40:	80bb      	strh	r3, [r7, #4]
    if( x1 < -900 ) x1 = x2 % x1;
    x2_mean = x2 ++;
    if( x2 > 110 ) x2 = x1 % x2;
    */
    // end
  ir_roll = IR_RollOfIrs(x1_mean, x2_mean) - ir_roll_neutral;
    cb42:	88fb      	ldrh	r3, [r7, #6]
    cb44:	425b      	negs	r3, r3
    cb46:	b29a      	uxth	r2, r3
    cb48:	88bb      	ldrh	r3, [r7, #4]
    cb4a:	1ad3      	subs	r3, r2, r3
    cb4c:	b29a      	uxth	r2, r3
    cb4e:	f240 130a 	movw	r3, #266	; 0x10a
    cb52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb56:	881b      	ldrh	r3, [r3, #0]
    cb58:	b29b      	uxth	r3, r3
    cb5a:	1ad3      	subs	r3, r2, r3
    cb5c:	b29b      	uxth	r3, r3
    cb5e:	b29a      	uxth	r2, r3
    cb60:	f24b 7358 	movw	r3, #46936	; 0xb758
    cb64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb68:	801a      	strh	r2, [r3, #0]
  ir_pitch = IR_PitchOfIrs(x1_mean, x2_mean) - ir_pitch_neutral;
    cb6a:	88ba      	ldrh	r2, [r7, #4]
    cb6c:	88fb      	ldrh	r3, [r7, #6]
    cb6e:	1ad3      	subs	r3, r2, r3
    cb70:	b29a      	uxth	r2, r3
    cb72:	f240 130c 	movw	r3, #268	; 0x10c
    cb76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb7a:	881b      	ldrh	r3, [r3, #0]
    cb7c:	b29b      	uxth	r3, r3
    cb7e:	1ad3      	subs	r3, r2, r3
    cb80:	b29b      	uxth	r3, r3
    cb82:	b29a      	uxth	r2, r3
    cb84:	f24b 735a 	movw	r3, #46938	; 0xb75a
    cb88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb8c:	801a      	strh	r2, [r3, #0]
#else
  extern volatile int16_t simul_ir_roll, simul_ir_pitch;
  ir_roll = simul_ir_roll -  ir_roll_neutral; 
  ir_pitch = simul_ir_pitch - ir_pitch_neutral;  
#endif
}
    cb8e:	370c      	adds	r7, #12
    cb90:	46bd      	mov	sp, r7
    cb92:	f85d 7b04 	ldr.w	r7, [sp], #4
    cb96:	4770      	bx	lr

0000cb98 <ir_gain_calib>:

/* 
   Contrast measurement
*/

void ir_gain_calib(void) {      // Plane nose down
    cb98:	b580      	push	{r7, lr}
    cb9a:	af00      	add	r7, sp, #0
  /* plane nose down -> negativ value */
  ir_contrast = - ir_pitch;
    cb9c:	f24b 735a 	movw	r3, #46938	; 0xb75a
    cba0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cba4:	881b      	ldrh	r3, [r3, #0]
    cba6:	b29b      	uxth	r3, r3
    cba8:	425b      	negs	r3, r3
    cbaa:	b29b      	uxth	r3, r3
    cbac:	b29a      	uxth	r2, r3
    cbae:	f240 1308 	movw	r3, #264	; 0x108
    cbb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbb6:	801a      	strh	r2, [r3, #0]
  RadOfIrFromConstrast(ir_contrast);
    cbb8:	f240 1308 	movw	r3, #264	; 0x108
    cbbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbc0:	881b      	ldrh	r3, [r3, #0]
    cbc2:	b21b      	sxth	r3, r3
    cbc4:	4618      	mov	r0, r3
    cbc6:	f005 fefd 	bl	129c4 <__aeabi_i2d>
    cbca:	4602      	mov	r2, r0
    cbcc:	460b      	mov	r3, r1
    cbce:	f04f 0000 	mov.w	r0, #0
    cbd2:	f04f 0100 	mov.w	r1, #0
    cbd6:	f6c3 71e8 	movt	r1, #16360	; 0x3fe8
    cbda:	f006 f883 	bl	12ce4 <__aeabi_ddiv>
    cbde:	4602      	mov	r2, r0
    cbe0:	460b      	mov	r3, r1
    cbe2:	4610      	mov	r0, r2
    cbe4:	4619      	mov	r1, r3
    cbe6:	f006 fa35 	bl	13054 <__aeabi_d2f>
    cbea:	4602      	mov	r2, r0
    cbec:	f240 1310 	movw	r3, #272	; 0x110
    cbf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbf4:	601a      	str	r2, [r3, #0]
}
    cbf6:	bd80      	pop	{r7, pc}

0000cbf8 <roll_pitch_pid_run>:
float pitch_of_vz_pgain = CLIMB_PITCH_OF_VZ_PGAIN;
float pitch_of_vz = 0.;


/** \brief Computes ::desired_aileron and ::desired_elevator from attitude estimation and expected attitude. */
void roll_pitch_pid_run( void ) {
    cbf8:	b590      	push	{r4, r7, lr}
    cbfa:	b083      	sub	sp, #12
    cbfc:	af00      	add	r7, sp, #0
  float err =  estimator_phi - desired_roll;
    cbfe:	f64b 2378 	movw	r3, #47736	; 0xba78
    cc02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc06:	681a      	ldr	r2, [r3, #0]
    cc08:	f24b 73e4 	movw	r3, #47076	; 0xb7e4
    cc0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc10:	681b      	ldr	r3, [r3, #0]
    cc12:	4610      	mov	r0, r2
    cc14:	4619      	mov	r1, r3
    cc16:	f006 fa71 	bl	130fc <__aeabi_fsub>
    cc1a:	4603      	mov	r3, r0
    cc1c:	607b      	str	r3, [r7, #4]
  desired_aileron = TRIM_PPRZ(roll_pgain * err);
    cc1e:	f240 1314 	movw	r3, #276	; 0x114
    cc22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc26:	681b      	ldr	r3, [r3, #0]
    cc28:	4618      	mov	r0, r3
    cc2a:	6879      	ldr	r1, [r7, #4]
    cc2c:	f006 fb70 	bl	13310 <__aeabi_fmul>
    cc30:	4603      	mov	r3, r0
    cc32:	4618      	mov	r0, r3
    cc34:	f04f 0100 	mov.w	r1, #0
    cc38:	f2cc 6116 	movt	r1, #50710	; 0xc616
    cc3c:	f006 fd06 	bl	1364c <__aeabi_fcmplt>
    cc40:	4603      	mov	r3, r0
    cc42:	2b00      	cmp	r3, #0
    cc44:	d002      	beq.n	cc4c <roll_pitch_pid_run+0x54>
    cc46:	f64d 2280 	movw	r2, #55936	; 0xda80
    cc4a:	e026      	b.n	cc9a <roll_pitch_pid_run+0xa2>
    cc4c:	f240 1314 	movw	r3, #276	; 0x114
    cc50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc54:	681b      	ldr	r3, [r3, #0]
    cc56:	4618      	mov	r0, r3
    cc58:	6879      	ldr	r1, [r7, #4]
    cc5a:	f006 fb59 	bl	13310 <__aeabi_fmul>
    cc5e:	4603      	mov	r3, r0
    cc60:	4618      	mov	r0, r3
    cc62:	f04f 0100 	mov.w	r1, #0
    cc66:	f2c4 6116 	movt	r1, #17942	; 0x4616
    cc6a:	f006 fd0d 	bl	13688 <__aeabi_fcmpgt>
    cc6e:	4603      	mov	r3, r0
    cc70:	2b00      	cmp	r3, #0
    cc72:	d002      	beq.n	cc7a <roll_pitch_pid_run+0x82>
    cc74:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    cc78:	e00e      	b.n	cc98 <roll_pitch_pid_run+0xa0>
    cc7a:	f240 1314 	movw	r3, #276	; 0x114
    cc7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc82:	681b      	ldr	r3, [r3, #0]
    cc84:	4618      	mov	r0, r3
    cc86:	6879      	ldr	r1, [r7, #4]
    cc88:	f006 fb42 	bl	13310 <__aeabi_fmul>
    cc8c:	4603      	mov	r3, r0
    cc8e:	4618      	mov	r0, r3
    cc90:	f006 fd04 	bl	1369c <__aeabi_f2iz>
    cc94:	4603      	mov	r3, r0
    cc96:	b29b      	uxth	r3, r3
    cc98:	b29a      	uxth	r2, r3
    cc9a:	f24b 73ee 	movw	r3, #47086	; 0xb7ee
    cc9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cca2:	801a      	strh	r2, [r3, #0]
  if (pitch_of_roll <0.)
    cca4:	f24b 73f4 	movw	r3, #47092	; 0xb7f4
    cca8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccac:	681b      	ldr	r3, [r3, #0]
    ccae:	4618      	mov	r0, r3
    ccb0:	f04f 0100 	mov.w	r1, #0
    ccb4:	f006 fcca 	bl	1364c <__aeabi_fcmplt>
    ccb8:	4603      	mov	r3, r0
    ccba:	2b00      	cmp	r3, #0
    ccbc:	d006      	beq.n	cccc <roll_pitch_pid_run+0xd4>
    pitch_of_roll = 0.;
    ccbe:	f24b 73f4 	movw	r3, #47092	; 0xb7f4
    ccc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccc6:	f04f 0200 	mov.w	r2, #0
    ccca:	601a      	str	r2, [r3, #0]
  err = -(estimator_theta - desired_pitch - pitch_of_roll * fabs(estimator_phi));
    cccc:	f64b 2380 	movw	r3, #47744	; 0xba80
    ccd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccd4:	681a      	ldr	r2, [r3, #0]
    ccd6:	f24b 73e8 	movw	r3, #47080	; 0xb7e8
    ccda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccde:	681b      	ldr	r3, [r3, #0]
    cce0:	4610      	mov	r0, r2
    cce2:	4619      	mov	r1, r3
    cce4:	f006 fa0a 	bl	130fc <__aeabi_fsub>
    cce8:	4603      	mov	r3, r0
    ccea:	461c      	mov	r4, r3
    ccec:	f64b 2378 	movw	r3, #47736	; 0xba78
    ccf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccf4:	681b      	ldr	r3, [r3, #0]
    ccf6:	4618      	mov	r0, r3
    ccf8:	f04f 0100 	mov.w	r1, #0
    ccfc:	f006 fca6 	bl	1364c <__aeabi_fcmplt>
    cd00:	4603      	mov	r3, r0
    cd02:	2b00      	cmp	r3, #0
    cd04:	d007      	beq.n	cd16 <roll_pitch_pid_run+0x11e>
    cd06:	f64b 2378 	movw	r3, #47736	; 0xba78
    cd0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd0e:	681b      	ldr	r3, [r3, #0]
    cd10:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
    cd14:	e004      	b.n	cd20 <roll_pitch_pid_run+0x128>
    cd16:	f64b 2378 	movw	r3, #47736	; 0xba78
    cd1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd1e:	681a      	ldr	r2, [r3, #0]
    cd20:	f24b 73f4 	movw	r3, #47092	; 0xb7f4
    cd24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd28:	681b      	ldr	r3, [r3, #0]
    cd2a:	4610      	mov	r0, r2
    cd2c:	4619      	mov	r1, r3
    cd2e:	f006 faef 	bl	13310 <__aeabi_fmul>
    cd32:	4603      	mov	r3, r0
    cd34:	4620      	mov	r0, r4
    cd36:	4619      	mov	r1, r3
    cd38:	f006 f9e0 	bl	130fc <__aeabi_fsub>
    cd3c:	4603      	mov	r3, r0
    cd3e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    cd42:	607b      	str	r3, [r7, #4]
  desired_elevator = TRIM_PPRZ(pitch_pgain * err);
    cd44:	f240 1318 	movw	r3, #280	; 0x118
    cd48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd4c:	681b      	ldr	r3, [r3, #0]
    cd4e:	4618      	mov	r0, r3
    cd50:	6879      	ldr	r1, [r7, #4]
    cd52:	f006 fadd 	bl	13310 <__aeabi_fmul>
    cd56:	4603      	mov	r3, r0
    cd58:	4618      	mov	r0, r3
    cd5a:	f04f 0100 	mov.w	r1, #0
    cd5e:	f2cc 6116 	movt	r1, #50710	; 0xc616
    cd62:	f006 fc73 	bl	1364c <__aeabi_fcmplt>
    cd66:	4603      	mov	r3, r0
    cd68:	2b00      	cmp	r3, #0
    cd6a:	d002      	beq.n	cd72 <roll_pitch_pid_run+0x17a>
    cd6c:	f64d 2280 	movw	r2, #55936	; 0xda80
    cd70:	e026      	b.n	cdc0 <roll_pitch_pid_run+0x1c8>
    cd72:	f240 1318 	movw	r3, #280	; 0x118
    cd76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd7a:	681b      	ldr	r3, [r3, #0]
    cd7c:	4618      	mov	r0, r3
    cd7e:	6879      	ldr	r1, [r7, #4]
    cd80:	f006 fac6 	bl	13310 <__aeabi_fmul>
    cd84:	4603      	mov	r3, r0
    cd86:	4618      	mov	r0, r3
    cd88:	f04f 0100 	mov.w	r1, #0
    cd8c:	f2c4 6116 	movt	r1, #17942	; 0x4616
    cd90:	f006 fc7a 	bl	13688 <__aeabi_fcmpgt>
    cd94:	4603      	mov	r3, r0
    cd96:	2b00      	cmp	r3, #0
    cd98:	d002      	beq.n	cda0 <roll_pitch_pid_run+0x1a8>
    cd9a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    cd9e:	e00e      	b.n	cdbe <roll_pitch_pid_run+0x1c6>
    cda0:	f240 1318 	movw	r3, #280	; 0x118
    cda4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cda8:	681b      	ldr	r3, [r3, #0]
    cdaa:	4618      	mov	r0, r3
    cdac:	6879      	ldr	r1, [r7, #4]
    cdae:	f006 faaf 	bl	13310 <__aeabi_fmul>
    cdb2:	4603      	mov	r3, r0
    cdb4:	4618      	mov	r0, r3
    cdb6:	f006 fc71 	bl	1369c <__aeabi_f2iz>
    cdba:	4603      	mov	r3, r0
    cdbc:	b29b      	uxth	r3, r3
    cdbe:	b29a      	uxth	r2, r3
    cdc0:	f24b 73f0 	movw	r3, #47088	; 0xb7f0
    cdc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdc8:	801a      	strh	r2, [r3, #0]
}
    cdca:	370c      	adds	r7, #12
    cdcc:	46bd      	mov	sp, r7
    cdce:	bd90      	pop	{r4, r7, pc}

0000cdd0 <course_pid_run>:

float course_pgain = COURSE_PGAIN;
float desired_course = 0.;
float max_roll = MAX_ROLL;

void course_pid_run( void ) {
    cdd0:	b580      	push	{r7, lr}
    cdd2:	b082      	sub	sp, #8
    cdd4:	af00      	add	r7, sp, #0
  float err = estimator_hspeed_dir - desired_course;
    cdd6:	f64b 23a8 	movw	r3, #47784	; 0xbaa8
    cdda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdde:	681a      	ldr	r2, [r3, #0]
    cde0:	f24b 73fc 	movw	r3, #47100	; 0xb7fc
    cde4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cde8:	681b      	ldr	r3, [r3, #0]
    cdea:	4610      	mov	r0, r2
    cdec:	4619      	mov	r1, r3
    cdee:	f006 f985 	bl	130fc <__aeabi_fsub>
    cdf2:	4603      	mov	r3, r0
    cdf4:	607b      	str	r3, [r7, #4]
  NORM_RAD_ANGLE(err);
    cdf6:	e013      	b.n	ce20 <course_pid_run+0x50>
    cdf8:	6878      	ldr	r0, [r7, #4]
    cdfa:	f005 fdf5 	bl	129e8 <__aeabi_f2d>
    cdfe:	4602      	mov	r2, r0
    ce00:	460b      	mov	r3, r1
    ce02:	4610      	mov	r0, r2
    ce04:	4619      	mov	r1, r3
    ce06:	a348      	add	r3, pc, #288	; (adr r3, cf28 <course_pid_run+0x158>)
    ce08:	e9d3 2300 	ldrd	r2, r3, [r3]
    ce0c:	f005 fc8c 	bl	12728 <__aeabi_dsub>
    ce10:	4602      	mov	r2, r0
    ce12:	460b      	mov	r3, r1
    ce14:	4610      	mov	r0, r2
    ce16:	4619      	mov	r1, r3
    ce18:	f006 f91c 	bl	13054 <__aeabi_d2f>
    ce1c:	4603      	mov	r3, r0
    ce1e:	607b      	str	r3, [r7, #4]
    ce20:	6878      	ldr	r0, [r7, #4]
    ce22:	f005 fde1 	bl	129e8 <__aeabi_f2d>
    ce26:	4602      	mov	r2, r0
    ce28:	460b      	mov	r3, r1
    ce2a:	4610      	mov	r0, r2
    ce2c:	4619      	mov	r1, r3
    ce2e:	a340      	add	r3, pc, #256	; (adr r3, cf30 <course_pid_run+0x160>)
    ce30:	e9d3 2300 	ldrd	r2, r3, [r3]
    ce34:	f006 f8bc 	bl	12fb0 <__aeabi_dcmpgt>
    ce38:	4603      	mov	r3, r0
    ce3a:	2b00      	cmp	r3, #0
    ce3c:	d1dc      	bne.n	cdf8 <course_pid_run+0x28>
    ce3e:	e013      	b.n	ce68 <course_pid_run+0x98>
    ce40:	6878      	ldr	r0, [r7, #4]
    ce42:	f005 fdd1 	bl	129e8 <__aeabi_f2d>
    ce46:	4602      	mov	r2, r0
    ce48:	460b      	mov	r3, r1
    ce4a:	4610      	mov	r0, r2
    ce4c:	4619      	mov	r1, r3
    ce4e:	a336      	add	r3, pc, #216	; (adr r3, cf28 <course_pid_run+0x158>)
    ce50:	e9d3 2300 	ldrd	r2, r3, [r3]
    ce54:	f005 fc6a 	bl	1272c <__adddf3>
    ce58:	4602      	mov	r2, r0
    ce5a:	460b      	mov	r3, r1
    ce5c:	4610      	mov	r0, r2
    ce5e:	4619      	mov	r1, r3
    ce60:	f006 f8f8 	bl	13054 <__aeabi_d2f>
    ce64:	4603      	mov	r3, r0
    ce66:	607b      	str	r3, [r7, #4]
    ce68:	6878      	ldr	r0, [r7, #4]
    ce6a:	f005 fdbd 	bl	129e8 <__aeabi_f2d>
    ce6e:	4602      	mov	r2, r0
    ce70:	460b      	mov	r3, r1
    ce72:	4610      	mov	r0, r2
    ce74:	4619      	mov	r1, r3
    ce76:	a330      	add	r3, pc, #192	; (adr r3, cf38 <course_pid_run+0x168>)
    ce78:	e9d3 2300 	ldrd	r2, r3, [r3]
    ce7c:	f006 f87a 	bl	12f74 <__aeabi_dcmplt>
    ce80:	4603      	mov	r3, r0
    ce82:	2b00      	cmp	r3, #0
    ce84:	d1dc      	bne.n	ce40 <course_pid_run+0x70>
  nav_desired_roll = course_pgain * err; //  * fspeed / AIR_SPEED;
    ce86:	f240 1320 	movw	r3, #288	; 0x120
    ce8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce8e:	681b      	ldr	r3, [r3, #0]
    ce90:	4618      	mov	r0, r3
    ce92:	6879      	ldr	r1, [r7, #4]
    ce94:	f006 fa3c 	bl	13310 <__aeabi_fmul>
    ce98:	4603      	mov	r3, r0
    ce9a:	461a      	mov	r2, r3
    ce9c:	f64b 0340 	movw	r3, #47168	; 0xb840
    cea0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cea4:	601a      	str	r2, [r3, #0]
  if (nav_desired_roll > max_roll)
    cea6:	f64b 0340 	movw	r3, #47168	; 0xb840
    ceaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ceae:	681a      	ldr	r2, [r3, #0]
    ceb0:	f240 1324 	movw	r3, #292	; 0x124
    ceb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ceb8:	681b      	ldr	r3, [r3, #0]
    ceba:	4610      	mov	r0, r2
    cebc:	4619      	mov	r1, r3
    cebe:	f006 fbe3 	bl	13688 <__aeabi_fcmpgt>
    cec2:	4603      	mov	r3, r0
    cec4:	2b00      	cmp	r3, #0
    cec6:	d00a      	beq.n	cede <course_pid_run+0x10e>
    nav_desired_roll = max_roll;
    cec8:	f240 1324 	movw	r3, #292	; 0x124
    cecc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ced0:	681a      	ldr	r2, [r3, #0]
    ced2:	f64b 0340 	movw	r3, #47168	; 0xb840
    ced6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ceda:	601a      	str	r2, [r3, #0]
    cedc:	e01e      	b.n	cf1c <course_pid_run+0x14c>
  else if (nav_desired_roll < -max_roll)
    cede:	f240 1324 	movw	r3, #292	; 0x124
    cee2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cee6:	681b      	ldr	r3, [r3, #0]
    cee8:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
    ceec:	f64b 0340 	movw	r3, #47168	; 0xb840
    cef0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cef4:	681b      	ldr	r3, [r3, #0]
    cef6:	4610      	mov	r0, r2
    cef8:	4619      	mov	r1, r3
    cefa:	f006 fbc5 	bl	13688 <__aeabi_fcmpgt>
    cefe:	4603      	mov	r3, r0
    cf00:	2b00      	cmp	r3, #0
    cf02:	d00b      	beq.n	cf1c <course_pid_run+0x14c>
    nav_desired_roll = -max_roll;
    cf04:	f240 1324 	movw	r3, #292	; 0x124
    cf08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf0c:	681b      	ldr	r3, [r3, #0]
    cf0e:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
    cf12:	f64b 0340 	movw	r3, #47168	; 0xb840
    cf16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf1a:	601a      	str	r2, [r3, #0]
}
    cf1c:	3708      	adds	r7, #8
    cf1e:	46bd      	mov	sp, r7
    cf20:	bd80      	pop	{r7, pc}
    cf22:	bf00      	nop
    cf24:	f3af 8000 	nop.w
    cf28:	54442d18 	.word	0x54442d18
    cf2c:	401921fb 	.word	0x401921fb
    cf30:	54442d18 	.word	0x54442d18
    cf34:	400921fb 	.word	0x400921fb
    cf38:	54442d18 	.word	0x54442d18
    cf3c:	c00921fb 	.word	0xc00921fb

0000cf40 <climb_pid_run>:

#define MAX_CLIMB_SUM_ERR 100
#define MAX_PITCH_CLIMB_SUM_ERR 100

/** \brief Computes desired_gaz and desired_pitch from desired_climb */
void climb_pid_run ( void ) {
    cf40:	b5b0      	push	{r4, r5, r7, lr}
    cf42:	b082      	sub	sp, #8
    cf44:	af00      	add	r7, sp, #0
  float err  = estimator_z_dot - desired_climb;
    cf46:	f64b 238c 	movw	r3, #47756	; 0xba8c
    cf4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf4e:	681a      	ldr	r2, [r3, #0]
    cf50:	f64b 0300 	movw	r3, #47104	; 0xb800
    cf54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf58:	681b      	ldr	r3, [r3, #0]
    cf5a:	4610      	mov	r0, r2
    cf5c:	4619      	mov	r1, r3
    cf5e:	f006 f8cd 	bl	130fc <__aeabi_fsub>
    cf62:	4603      	mov	r3, r0
    cf64:	607b      	str	r3, [r7, #4]
  float fgaz;
  if (auto_pitch) { /* gaz constant */
    cf66:	f24b 439f 	movw	r3, #46239	; 0xb49f
    cf6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf6e:	781b      	ldrb	r3, [r3, #0]
    cf70:	2b00      	cmp	r3, #0
    cf72:	f000 80a8 	beq.w	d0c6 <climb_pid_run+0x186>
    desired_gaz = nav_desired_gaz;
    cf76:	f64b 0338 	movw	r3, #47160	; 0xb838
    cf7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf7e:	881b      	ldrh	r3, [r3, #0]
    cf80:	b29a      	uxth	r2, r3
    cf82:	f24b 73ec 	movw	r3, #47084	; 0xb7ec
    cf86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf8a:	801a      	strh	r2, [r3, #0]
    desired_pitch = climb_pitch_pgain * (err + climb_pitch_igain * climb_pitch_sum_err);
    cf8c:	f240 132c 	movw	r3, #300	; 0x12c
    cf90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf94:	681a      	ldr	r2, [r3, #0]
    cf96:	f64b 030c 	movw	r3, #47116	; 0xb80c
    cf9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf9e:	681b      	ldr	r3, [r3, #0]
    cfa0:	4610      	mov	r0, r2
    cfa2:	4619      	mov	r1, r3
    cfa4:	f006 f9b4 	bl	13310 <__aeabi_fmul>
    cfa8:	4603      	mov	r3, r0
    cfaa:	4618      	mov	r0, r3
    cfac:	6879      	ldr	r1, [r7, #4]
    cfae:	f006 f8a7 	bl	13100 <__addsf3>
    cfb2:	4603      	mov	r3, r0
    cfb4:	461a      	mov	r2, r3
    cfb6:	f240 1328 	movw	r3, #296	; 0x128
    cfba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfbe:	681b      	ldr	r3, [r3, #0]
    cfc0:	4610      	mov	r0, r2
    cfc2:	4619      	mov	r1, r3
    cfc4:	f006 f9a4 	bl	13310 <__aeabi_fmul>
    cfc8:	4603      	mov	r3, r0
    cfca:	461a      	mov	r2, r3
    cfcc:	f24b 73e8 	movw	r3, #47080	; 0xb7e8
    cfd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfd4:	601a      	str	r2, [r3, #0]
    if (desired_pitch > max_pitch)
    cfd6:	f24b 73e8 	movw	r3, #47080	; 0xb7e8
    cfda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfde:	681a      	ldr	r2, [r3, #0]
    cfe0:	f240 1330 	movw	r3, #304	; 0x130
    cfe4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfe8:	681b      	ldr	r3, [r3, #0]
    cfea:	4610      	mov	r0, r2
    cfec:	4619      	mov	r1, r3
    cfee:	f006 fb4b 	bl	13688 <__aeabi_fcmpgt>
    cff2:	4603      	mov	r3, r0
    cff4:	2b00      	cmp	r3, #0
    cff6:	d009      	beq.n	d00c <climb_pid_run+0xcc>
      desired_pitch = max_pitch;
    cff8:	f240 1330 	movw	r3, #304	; 0x130
    cffc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d000:	681a      	ldr	r2, [r3, #0]
    d002:	f24b 73e8 	movw	r3, #47080	; 0xb7e8
    d006:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d00a:	601a      	str	r2, [r3, #0]
    if (desired_pitch < min_pitch)
    d00c:	f24b 73e8 	movw	r3, #47080	; 0xb7e8
    d010:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d014:	681a      	ldr	r2, [r3, #0]
    d016:	f240 1334 	movw	r3, #308	; 0x134
    d01a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d01e:	681b      	ldr	r3, [r3, #0]
    d020:	4610      	mov	r0, r2
    d022:	4619      	mov	r1, r3
    d024:	f006 fb12 	bl	1364c <__aeabi_fcmplt>
    d028:	4603      	mov	r3, r0
    d02a:	2b00      	cmp	r3, #0
    d02c:	d009      	beq.n	d042 <climb_pid_run+0x102>
      desired_pitch = min_pitch;
    d02e:	f240 1334 	movw	r3, #308	; 0x134
    d032:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d036:	681a      	ldr	r2, [r3, #0]
    d038:	f24b 73e8 	movw	r3, #47080	; 0xb7e8
    d03c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d040:	601a      	str	r2, [r3, #0]
    climb_pitch_sum_err += err;
    d042:	f64b 030c 	movw	r3, #47116	; 0xb80c
    d046:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d04a:	681b      	ldr	r3, [r3, #0]
    d04c:	4618      	mov	r0, r3
    d04e:	6879      	ldr	r1, [r7, #4]
    d050:	f006 f856 	bl	13100 <__addsf3>
    d054:	4603      	mov	r3, r0
    d056:	461a      	mov	r2, r3
    d058:	f64b 030c 	movw	r3, #47116	; 0xb80c
    d05c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d060:	601a      	str	r2, [r3, #0]
    if (climb_pitch_sum_err > MAX_PITCH_CLIMB_SUM_ERR)
    d062:	f64b 030c 	movw	r3, #47116	; 0xb80c
    d066:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d06a:	681b      	ldr	r3, [r3, #0]
    d06c:	4618      	mov	r0, r3
    d06e:	f04f 0100 	mov.w	r1, #0
    d072:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
    d076:	f006 fb07 	bl	13688 <__aeabi_fcmpgt>
    d07a:	4603      	mov	r3, r0
    d07c:	2b00      	cmp	r3, #0
    d07e:	d008      	beq.n	d092 <climb_pid_run+0x152>
      climb_pitch_sum_err = MAX_PITCH_CLIMB_SUM_ERR;
    d080:	f64b 030c 	movw	r3, #47116	; 0xb80c
    d084:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d088:	f04f 0200 	mov.w	r2, #0
    d08c:	f2c4 22c8 	movt	r2, #17096	; 0x42c8
    d090:	601a      	str	r2, [r3, #0]
    if (climb_pitch_sum_err < - MAX_PITCH_CLIMB_SUM_ERR)
    d092:	f64b 030c 	movw	r3, #47116	; 0xb80c
    d096:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d09a:	681b      	ldr	r3, [r3, #0]
    d09c:	4618      	mov	r0, r3
    d09e:	f04f 0100 	mov.w	r1, #0
    d0a2:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
    d0a6:	f006 fad1 	bl	1364c <__aeabi_fcmplt>
    d0aa:	4603      	mov	r3, r0
    d0ac:	2b00      	cmp	r3, #0
    d0ae:	d100      	bne.n	d0b2 <climb_pid_run+0x172>
    d0b0:	e109      	b.n	d2c6 <climb_pid_run+0x386>
      climb_pitch_sum_err = - MAX_PITCH_CLIMB_SUM_ERR; 
    d0b2:	f64b 030c 	movw	r3, #47116	; 0xb80c
    d0b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0ba:	f04f 0200 	mov.w	r2, #0
    d0be:	f2cc 22c8 	movt	r2, #49864	; 0xc2c8
    d0c2:	601a      	str	r2, [r3, #0]
    d0c4:	e0ff      	b.n	d2c6 <climb_pid_run+0x386>
  } else { /* pitch almost constant */
    /* pitch offset for climb */
    pitch_of_vz = (desired_climb > 0) ? desired_climb * pitch_of_vz_pgain : 0.;
    d0c6:	f64b 0300 	movw	r3, #47104	; 0xb800
    d0ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0ce:	681b      	ldr	r3, [r3, #0]
    d0d0:	4618      	mov	r0, r3
    d0d2:	f04f 0100 	mov.w	r1, #0
    d0d6:	f006 fad7 	bl	13688 <__aeabi_fcmpgt>
    d0da:	4603      	mov	r3, r0
    d0dc:	2b00      	cmp	r3, #0
    d0de:	d010      	beq.n	d102 <climb_pid_run+0x1c2>
    d0e0:	f64b 0300 	movw	r3, #47104	; 0xb800
    d0e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0e8:	681a      	ldr	r2, [r3, #0]
    d0ea:	f240 131c 	movw	r3, #284	; 0x11c
    d0ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0f2:	681b      	ldr	r3, [r3, #0]
    d0f4:	4610      	mov	r0, r2
    d0f6:	4619      	mov	r1, r3
    d0f8:	f006 f90a 	bl	13310 <__aeabi_fmul>
    d0fc:	4603      	mov	r3, r0
    d0fe:	461a      	mov	r2, r3
    d100:	e001      	b.n	d106 <climb_pid_run+0x1c6>
    d102:	f04f 0200 	mov.w	r2, #0
    d106:	f24b 73f8 	movw	r3, #47096	; 0xb7f8
    d10a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d10e:	601a      	str	r2, [r3, #0]
    fgaz = climb_pgain * (err + climb_igain * climb_sum_err) + CLIMB_LEVEL_GAZ + CLIMB_GAZ_OF_CLIMB*desired_climb;
    d110:	f64c 42cd 	movw	r2, #52429	; 0xcccd
    d114:	f6c3 52cc 	movt	r2, #15820	; 0x3dcc
    d118:	f64b 0308 	movw	r3, #47112	; 0xb808
    d11c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d120:	681b      	ldr	r3, [r3, #0]
    d122:	4610      	mov	r0, r2
    d124:	4619      	mov	r1, r3
    d126:	f006 f8f3 	bl	13310 <__aeabi_fmul>
    d12a:	4603      	mov	r3, r0
    d12c:	4618      	mov	r0, r3
    d12e:	6879      	ldr	r1, [r7, #4]
    d130:	f005 ffe6 	bl	13100 <__addsf3>
    d134:	4603      	mov	r3, r0
    d136:	461a      	mov	r2, r3
    d138:	f24c 238f 	movw	r3, #49807	; 0xc28f
    d13c:	f6cb 43f5 	movt	r3, #48373	; 0xbcf5
    d140:	4610      	mov	r0, r2
    d142:	4619      	mov	r1, r3
    d144:	f006 f8e4 	bl	13310 <__aeabi_fmul>
    d148:	4603      	mov	r3, r0
    d14a:	4618      	mov	r0, r3
    d14c:	f005 fc4c 	bl	129e8 <__aeabi_f2d>
    d150:	4602      	mov	r2, r0
    d152:	460b      	mov	r3, r1
    d154:	4610      	mov	r0, r2
    d156:	4619      	mov	r1, r3
    d158:	a35d      	add	r3, pc, #372	; (adr r3, d2d0 <climb_pid_run+0x390>)
    d15a:	e9d3 2300 	ldrd	r2, r3, [r3]
    d15e:	f005 fae5 	bl	1272c <__adddf3>
    d162:	4602      	mov	r2, r0
    d164:	460b      	mov	r3, r1
    d166:	4614      	mov	r4, r2
    d168:	461d      	mov	r5, r3
    d16a:	f64b 0300 	movw	r3, #47104	; 0xb800
    d16e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d172:	681b      	ldr	r3, [r3, #0]
    d174:	4618      	mov	r0, r3
    d176:	f005 fc37 	bl	129e8 <__aeabi_f2d>
    d17a:	4602      	mov	r2, r0
    d17c:	460b      	mov	r3, r1
    d17e:	4610      	mov	r0, r2
    d180:	4619      	mov	r1, r3
    d182:	a355      	add	r3, pc, #340	; (adr r3, d2d8 <climb_pid_run+0x398>)
    d184:	e9d3 2300 	ldrd	r2, r3, [r3]
    d188:	f005 fc82 	bl	12a90 <__aeabi_dmul>
    d18c:	4602      	mov	r2, r0
    d18e:	460b      	mov	r3, r1
    d190:	4620      	mov	r0, r4
    d192:	4629      	mov	r1, r5
    d194:	f005 faca 	bl	1272c <__adddf3>
    d198:	4602      	mov	r2, r0
    d19a:	460b      	mov	r3, r1
    d19c:	4610      	mov	r0, r2
    d19e:	4619      	mov	r1, r3
    d1a0:	f005 ff58 	bl	13054 <__aeabi_d2f>
    d1a4:	4603      	mov	r3, r0
    d1a6:	603b      	str	r3, [r7, #0]
    climb_sum_err += err;
    d1a8:	f64b 0308 	movw	r3, #47112	; 0xb808
    d1ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1b0:	681b      	ldr	r3, [r3, #0]
    d1b2:	4618      	mov	r0, r3
    d1b4:	6879      	ldr	r1, [r7, #4]
    d1b6:	f005 ffa3 	bl	13100 <__addsf3>
    d1ba:	4603      	mov	r3, r0
    d1bc:	461a      	mov	r2, r3
    d1be:	f64b 0308 	movw	r3, #47112	; 0xb808
    d1c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1c6:	601a      	str	r2, [r3, #0]
    if (climb_sum_err > MAX_CLIMB_SUM_ERR) climb_sum_err = MAX_CLIMB_SUM_ERR;
    d1c8:	f64b 0308 	movw	r3, #47112	; 0xb808
    d1cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1d0:	681b      	ldr	r3, [r3, #0]
    d1d2:	4618      	mov	r0, r3
    d1d4:	f04f 0100 	mov.w	r1, #0
    d1d8:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
    d1dc:	f006 fa54 	bl	13688 <__aeabi_fcmpgt>
    d1e0:	4603      	mov	r3, r0
    d1e2:	2b00      	cmp	r3, #0
    d1e4:	d008      	beq.n	d1f8 <climb_pid_run+0x2b8>
    d1e6:	f64b 0308 	movw	r3, #47112	; 0xb808
    d1ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1ee:	f04f 0200 	mov.w	r2, #0
    d1f2:	f2c4 22c8 	movt	r2, #17096	; 0x42c8
    d1f6:	601a      	str	r2, [r3, #0]
    if (climb_sum_err < - MAX_CLIMB_SUM_ERR) climb_sum_err = - MAX_CLIMB_SUM_ERR;
    d1f8:	f64b 0308 	movw	r3, #47112	; 0xb808
    d1fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d200:	681b      	ldr	r3, [r3, #0]
    d202:	4618      	mov	r0, r3
    d204:	f04f 0100 	mov.w	r1, #0
    d208:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
    d20c:	f006 fa1e 	bl	1364c <__aeabi_fcmplt>
    d210:	4603      	mov	r3, r0
    d212:	2b00      	cmp	r3, #0
    d214:	d008      	beq.n	d228 <climb_pid_run+0x2e8>
    d216:	f64b 0308 	movw	r3, #47112	; 0xb808
    d21a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d21e:	f04f 0200 	mov.w	r2, #0
    d222:	f2cc 22c8 	movt	r2, #49864	; 0xc2c8
    d226:	601a      	str	r2, [r3, #0]
    desired_gaz = TRIM_UPPRZ(fgaz * MAX_PPRZ);
    d228:	6838      	ldr	r0, [r7, #0]
    d22a:	f04f 0100 	mov.w	r1, #0
    d22e:	f2c4 6116 	movt	r1, #17942	; 0x4616
    d232:	f006 f86d 	bl	13310 <__aeabi_fmul>
    d236:	4603      	mov	r3, r0
    d238:	4618      	mov	r0, r3
    d23a:	f04f 0100 	mov.w	r1, #0
    d23e:	f006 fa05 	bl	1364c <__aeabi_fcmplt>
    d242:	4603      	mov	r3, r0
    d244:	2b00      	cmp	r3, #0
    d246:	d001      	beq.n	d24c <climb_pid_run+0x30c>
    d248:	2200      	movs	r2, #0
    d24a:	e022      	b.n	d292 <climb_pid_run+0x352>
    d24c:	6838      	ldr	r0, [r7, #0]
    d24e:	f04f 0100 	mov.w	r1, #0
    d252:	f2c4 6116 	movt	r1, #17942	; 0x4616
    d256:	f006 f85b 	bl	13310 <__aeabi_fmul>
    d25a:	4603      	mov	r3, r0
    d25c:	4618      	mov	r0, r3
    d25e:	f04f 0100 	mov.w	r1, #0
    d262:	f2c4 6116 	movt	r1, #17942	; 0x4616
    d266:	f006 fa0f 	bl	13688 <__aeabi_fcmpgt>
    d26a:	4603      	mov	r3, r0
    d26c:	2b00      	cmp	r3, #0
    d26e:	d002      	beq.n	d276 <climb_pid_run+0x336>
    d270:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    d274:	e00c      	b.n	d290 <climb_pid_run+0x350>
    d276:	6838      	ldr	r0, [r7, #0]
    d278:	f04f 0100 	mov.w	r1, #0
    d27c:	f2c4 6116 	movt	r1, #17942	; 0x4616
    d280:	f006 f846 	bl	13310 <__aeabi_fmul>
    d284:	4603      	mov	r3, r0
    d286:	4618      	mov	r0, r3
    d288:	f006 fa08 	bl	1369c <__aeabi_f2iz>
    d28c:	4603      	mov	r3, r0
    d28e:	b29b      	uxth	r3, r3
    d290:	b29a      	uxth	r2, r3
    d292:	f24b 73ec 	movw	r3, #47084	; 0xb7ec
    d296:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d29a:	801a      	strh	r2, [r3, #0]
    desired_pitch = nav_pitch + pitch_of_vz;
    d29c:	f64b 033c 	movw	r3, #47164	; 0xb83c
    d2a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2a4:	681a      	ldr	r2, [r3, #0]
    d2a6:	f24b 73f8 	movw	r3, #47096	; 0xb7f8
    d2aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2ae:	681b      	ldr	r3, [r3, #0]
    d2b0:	4610      	mov	r0, r2
    d2b2:	4619      	mov	r1, r3
    d2b4:	f005 ff24 	bl	13100 <__addsf3>
    d2b8:	4603      	mov	r3, r0
    d2ba:	461a      	mov	r2, r3
    d2bc:	f24b 73e8 	movw	r3, #47080	; 0xb7e8
    d2c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2c4:	601a      	str	r2, [r3, #0]
  }
}
    d2c6:	3708      	adds	r7, #8
    d2c8:	46bd      	mov	sp, r7
    d2ca:	bdb0      	pop	{r4, r5, r7, pc}
    d2cc:	f3af 8000 	nop.w
    d2d0:	3d70a3d7 	.word	0x3d70a3d7
    d2d4:	3fd3d70a 	.word	0x3fd3d70a
    d2d8:	9999999a 	.word	0x9999999a
    d2dc:	3fc99999 	.word	0x3fc99999

0000d2e0 <altitude_pid_run>:

float altitude_pgain = ALTITUDE_PGAIN;


void altitude_pid_run(void) {
    d2e0:	b580      	push	{r7, lr}
    d2e2:	b082      	sub	sp, #8
    d2e4:	af00      	add	r7, sp, #0
  float err = estimator_z - desired_altitude;
    d2e6:	f64b 2374 	movw	r3, #47732	; 0xba74
    d2ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2ee:	681a      	ldr	r2, [r3, #0]
    d2f0:	f240 133c 	movw	r3, #316	; 0x13c
    d2f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d2f8:	681b      	ldr	r3, [r3, #0]
    d2fa:	4610      	mov	r0, r2
    d2fc:	4619      	mov	r1, r3
    d2fe:	f005 fefd 	bl	130fc <__aeabi_fsub>
    d302:	4603      	mov	r3, r0
    d304:	607b      	str	r3, [r7, #4]
  desired_climb = pre_climb + altitude_pgain * err;
    d306:	f240 1338 	movw	r3, #312	; 0x138
    d30a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d30e:	681b      	ldr	r3, [r3, #0]
    d310:	4618      	mov	r0, r3
    d312:	6879      	ldr	r1, [r7, #4]
    d314:	f005 fffc 	bl	13310 <__aeabi_fmul>
    d318:	4603      	mov	r3, r0
    d31a:	461a      	mov	r2, r3
    d31c:	f64b 0304 	movw	r3, #47108	; 0xb804
    d320:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d324:	681b      	ldr	r3, [r3, #0]
    d326:	4610      	mov	r0, r2
    d328:	4619      	mov	r1, r3
    d32a:	f005 fee9 	bl	13100 <__addsf3>
    d32e:	4603      	mov	r3, r0
    d330:	461a      	mov	r2, r3
    d332:	f64b 0300 	movw	r3, #47104	; 0xb800
    d336:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d33a:	601a      	str	r2, [r3, #0]
  if (desired_climb < -CLIMB_MAX) desired_climb = -CLIMB_MAX;
    d33c:	f64b 0300 	movw	r3, #47104	; 0xb800
    d340:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d344:	681b      	ldr	r3, [r3, #0]
    d346:	4618      	mov	r0, r3
    d348:	f04f 0100 	mov.w	r1, #0
    d34c:	f6cb 7180 	movt	r1, #49024	; 0xbf80
    d350:	f006 f97c 	bl	1364c <__aeabi_fcmplt>
    d354:	4603      	mov	r3, r0
    d356:	2b00      	cmp	r3, #0
    d358:	d008      	beq.n	d36c <altitude_pid_run+0x8c>
    d35a:	f64b 0300 	movw	r3, #47104	; 0xb800
    d35e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d362:	f04f 0200 	mov.w	r2, #0
    d366:	f6cb 7280 	movt	r2, #49024	; 0xbf80
    d36a:	601a      	str	r2, [r3, #0]
  if (desired_climb > CLIMB_MAX) desired_climb = CLIMB_MAX;
    d36c:	f64b 0300 	movw	r3, #47104	; 0xb800
    d370:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d374:	681b      	ldr	r3, [r3, #0]
    d376:	4618      	mov	r0, r3
    d378:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    d37c:	f006 f984 	bl	13688 <__aeabi_fcmpgt>
    d380:	4603      	mov	r3, r0
    d382:	2b00      	cmp	r3, #0
    d384:	d006      	beq.n	d394 <altitude_pid_run+0xb4>
    d386:	f64b 0300 	movw	r3, #47104	; 0xb800
    d38a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d38e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    d392:	601a      	str	r2, [r3, #0]
}
    d394:	3708      	adds	r7, #8
    d396:	46bd      	mov	sp, r7
    d398:	bd80      	pop	{r7, pc}
    d39a:	bf00      	nop
    d39c:	f3af 8000 	nop.w

0000d3a0 <auto_nav>:
#define GROUND_ALT 125.
#define SECURITY_ALT 150.
#define MAX_DIST_FROM_HOME 500.
#ifdef NAV_C

static inline void auto_nav(void) {
    d3a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    d3a2:	b08b      	sub	sp, #44	; 0x2c
    d3a4:	af00      	add	r7, sp, #0
        NextBlock()
    }

}
#else*/
if(nav_block == 0)
    d3a6:	f64b 0311 	movw	r3, #47121	; 0xb811
    d3aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3ae:	781b      	ldrb	r3, [r3, #0]
    d3b0:	2b00      	cmp	r3, #0
    d3b2:	f040 8169 	bne.w	d688 <auto_nav+0x2e8>
{ // init
    
    if (nav_stage == 0) 
    d3b6:	f64b 0310 	movw	r3, #47120	; 0xb810
    d3ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3be:	781b      	ldrb	r3, [r3, #0]
    d3c0:	2b00      	cmp	r3, #0
    d3c2:	d13c      	bne.n	d43e <auto_nav+0x9e>
    {
	Label(while_1)
	nav_stage=0;
    d3c4:	f64b 0310 	movw	r3, #47120	; 0xb810
    d3c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3cc:	2200      	movs	r2, #0
    d3ce:	701a      	strb	r2, [r3, #0]
	if (! (!(estimator_flight_time))) Goto(endwhile_2) 
    d3d0:	f64b 239c 	movw	r3, #47772	; 0xba9c
    d3d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3d8:	881b      	ldrh	r3, [r3, #0]
    d3da:	2b00      	cmp	r3, #0
    d3dc:	d000      	beq.n	d3e0 <auto_nav+0x40>
    d3de:	e03d      	b.n	d45c <auto_nav+0xbc>
	else NextStage(); 
    d3e0:	f64b 0310 	movw	r3, #47120	; 0xb810
    d3e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3e8:	781b      	ldrb	r3, [r3, #0]
    d3ea:	3301      	adds	r3, #1
    d3ec:	b2da      	uxtb	r2, r3
    d3ee:	f64b 0310 	movw	r3, #47120	; 0xb810
    d3f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3f6:	701a      	strb	r2, [r3, #0]
    d3f8:	f64b 236c 	movw	r3, #47724	; 0xba6c
    d3fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d400:	681a      	ldr	r2, [r3, #0]
    d402:	f64b 0314 	movw	r3, #47124	; 0xb814
    d406:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d40a:	601a      	str	r2, [r3, #0]
    d40c:	f64b 2370 	movw	r3, #47728	; 0xba70
    d410:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d414:	681a      	ldr	r2, [r3, #0]
    d416:	f64b 0318 	movw	r3, #47128	; 0xb818
    d41a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d41e:	601a      	str	r2, [r3, #0]
    d420:	f64b 0324 	movw	r3, #47140	; 0xb824
    d424:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d428:	2200      	movs	r2, #0
    d42a:	801a      	strh	r2, [r3, #0]
    d42c:	f64b 0328 	movw	r3, #47144	; 0xb828
    d430:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d434:	f04f 0200 	mov.w	r2, #0
    d438:	601a      	str	r2, [r3, #0]
    d43a:	f002 b883 	b.w	f544 <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
    d43e:	f64b 0310 	movw	r3, #47120	; 0xb810
    d442:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d446:	781b      	ldrb	r3, [r3, #0]
    d448:	2b01      	cmp	r3, #1
    d44a:	d100      	bne.n	d44e <auto_nav+0xae>
    {   Goto(while_1)}
    d44c:	e7ba      	b.n	d3c4 <auto_nav+0x24>
    else if (nav_stage == 2)
    d44e:	f64b 0310 	movw	r3, #47120	; 0xb810
    d452:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d456:	781b      	ldrb	r3, [r3, #0]
    d458:	2b02      	cmp	r3, #2
    d45a:	d162      	bne.n	d522 <auto_nav+0x182>
    {
	Label(endwhile_2)
	nav_stage = 2;
    d45c:	f64b 0310 	movw	r3, #47120	; 0xb810
    d460:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d464:	2202      	movs	r2, #2
    d466:	701a      	strb	r2, [r3, #0]
        if ((estimator_flight_time>8)) NextStage() else {
    d468:	f64b 239c 	movw	r3, #47772	; 0xba9c
    d46c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d470:	881b      	ldrh	r3, [r3, #0]
    d472:	2b08      	cmp	r3, #8
    d474:	d92e      	bls.n	d4d4 <auto_nav+0x134>
    d476:	f64b 0310 	movw	r3, #47120	; 0xb810
    d47a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d47e:	781b      	ldrb	r3, [r3, #0]
    d480:	3301      	adds	r3, #1
    d482:	b2da      	uxtb	r2, r3
    d484:	f64b 0310 	movw	r3, #47120	; 0xb810
    d488:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d48c:	701a      	strb	r2, [r3, #0]
    d48e:	f64b 236c 	movw	r3, #47724	; 0xba6c
    d492:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d496:	681a      	ldr	r2, [r3, #0]
    d498:	f64b 0314 	movw	r3, #47124	; 0xb814
    d49c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4a0:	601a      	str	r2, [r3, #0]
    d4a2:	f64b 2370 	movw	r3, #47728	; 0xba70
    d4a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4aa:	681a      	ldr	r2, [r3, #0]
    d4ac:	f64b 0318 	movw	r3, #47128	; 0xb818
    d4b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4b4:	601a      	str	r2, [r3, #0]
    d4b6:	f64b 0324 	movw	r3, #47140	; 0xb824
    d4ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4be:	2200      	movs	r2, #0
    d4c0:	801a      	strh	r2, [r3, #0]
    d4c2:	f64b 0328 	movw	r3, #47144	; 0xb828
    d4c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4ca:	f04f 0200 	mov.w	r2, #0
    d4ce:	601a      	str	r2, [r3, #0]
    d4d0:	f002 b838 	b.w	f544 <auto_nav+0x21a4>
          desired_course = RadOfDeg(QFU);
    d4d4:	f24b 73fc 	movw	r3, #47100	; 0xb7fc
    d4d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4dc:	f64c 32e4 	movw	r2, #52196	; 0xcbe4
    d4e0:	f2c4 0296 	movt	r2, #16534	; 0x4096
    d4e4:	601a      	str	r2, [r3, #0]
          auto_pitch = FALSE;
    d4e6:	f24b 439f 	movw	r3, #46239	; 0xb49f
    d4ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4ee:	2200      	movs	r2, #0
    d4f0:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.150000;
    d4f2:	f64b 033c 	movw	r3, #47164	; 0xb83c
    d4f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4fa:	f649 129a 	movw	r2, #39322	; 0x999a
    d4fe:	f6c3 6219 	movt	r2, #15897	; 0x3e19
    d502:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_GAZ;
    d504:	f24b 439d 	movw	r3, #46237	; 0xb49d
    d508:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d50c:	2201      	movs	r2, #1
    d50e:	701a      	strb	r2, [r3, #0]
          nav_desired_gaz = TRIM_UPPRZ(0.800000*MAX_PPRZ);
    d510:	f64b 0338 	movw	r3, #47160	; 0xb838
    d514:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d518:	f44f 52f0 	mov.w	r2, #7680	; 0x1e00
    d51c:	801a      	strh	r2, [r3, #0]
        }
        return;
    d51e:	f002 b811 	b.w	f544 <auto_nav+0x21a4>
     }
     else if (nav_stage == 3)
    d522:	f64b 0310 	movw	r3, #47120	; 0xb810
    d526:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d52a:	781b      	ldrb	r3, [r3, #0]
    d52c:	2b03      	cmp	r3, #3
    d52e:	d168      	bne.n	d602 <auto_nav+0x262>
     {
	nav_stage = 3;	
    d530:	f64b 0310 	movw	r3, #47120	; 0xb810
    d534:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d538:	2203      	movs	r2, #3
    d53a:	701a      	strb	r2, [r3, #0]
        if ((estimator_z>SECURITY_ALT)) NextStage() else {
    d53c:	f64b 2374 	movw	r3, #47732	; 0xba74
    d540:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d544:	681b      	ldr	r3, [r3, #0]
    d546:	4618      	mov	r0, r3
    d548:	f04f 0100 	mov.w	r1, #0
    d54c:	f2c4 3116 	movt	r1, #17174	; 0x4316
    d550:	f006 f89a 	bl	13688 <__aeabi_fcmpgt>
    d554:	4603      	mov	r3, r0
    d556:	2b00      	cmp	r3, #0
    d558:	d02e      	beq.n	d5b8 <auto_nav+0x218>
    d55a:	f64b 0310 	movw	r3, #47120	; 0xb810
    d55e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d562:	781b      	ldrb	r3, [r3, #0]
    d564:	3301      	adds	r3, #1
    d566:	b2da      	uxtb	r2, r3
    d568:	f64b 0310 	movw	r3, #47120	; 0xb810
    d56c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d570:	701a      	strb	r2, [r3, #0]
    d572:	f64b 236c 	movw	r3, #47724	; 0xba6c
    d576:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d57a:	681a      	ldr	r2, [r3, #0]
    d57c:	f64b 0314 	movw	r3, #47124	; 0xb814
    d580:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d584:	601a      	str	r2, [r3, #0]
    d586:	f64b 2370 	movw	r3, #47728	; 0xba70
    d58a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d58e:	681a      	ldr	r2, [r3, #0]
    d590:	f64b 0318 	movw	r3, #47128	; 0xb818
    d594:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d598:	601a      	str	r2, [r3, #0]
    d59a:	f64b 0324 	movw	r3, #47140	; 0xb824
    d59e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5a2:	2200      	movs	r2, #0
    d5a4:	801a      	strh	r2, [r3, #0]
    d5a6:	f64b 0328 	movw	r3, #47144	; 0xb828
    d5aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5ae:	f04f 0200 	mov.w	r2, #0
    d5b2:	601a      	str	r2, [r3, #0]
    d5b4:	f001 bfc6 	b.w	f544 <auto_nav+0x21a4>
          desired_course = RadOfDeg(QFU);
    d5b8:	f24b 73fc 	movw	r3, #47100	; 0xb7fc
    d5bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5c0:	f64c 32e4 	movw	r2, #52196	; 0xcbe4
    d5c4:	f2c4 0296 	movt	r2, #16534	; 0x4096
    d5c8:	601a      	str	r2, [r3, #0]
          auto_pitch = FALSE;
    d5ca:	f24b 439f 	movw	r3, #46239	; 0xb49f
    d5ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5d2:	2200      	movs	r2, #0
    d5d4:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.000000;
    d5d6:	f64b 033c 	movw	r3, #47164	; 0xb83c
    d5da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5de:	f04f 0200 	mov.w	r2, #0
    d5e2:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_CLIMB;
    d5e4:	f24b 439d 	movw	r3, #46237	; 0xb49d
    d5e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5ec:	2202      	movs	r2, #2
    d5ee:	701a      	strb	r2, [r3, #0]
          desired_climb = 8.000000;
    d5f0:	f64b 0300 	movw	r3, #47104	; 0xb800
    d5f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5f8:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    d5fc:	601a      	str	r2, [r3, #0]
        }
        return;
    d5fe:	f001 bfa1 	b.w	f544 <auto_nav+0x21a4>
     }
     else if (nav_stage == 4)
    d602:	f64b 0310 	movw	r3, #47120	; 0xb810
    d606:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d60a:	781b      	ldrb	r3, [r3, #0]
    d60c:	2b04      	cmp	r3, #4
    d60e:	f041 8799 	bne.w	f544 <auto_nav+0x21a4>
        NextBlock()
    d612:	f64b 0311 	movw	r3, #47121	; 0xb811
    d616:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d61a:	781b      	ldrb	r3, [r3, #0]
    d61c:	3301      	adds	r3, #1
    d61e:	b2da      	uxtb	r2, r3
    d620:	f64b 0311 	movw	r3, #47121	; 0xb811
    d624:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d628:	701a      	strb	r2, [r3, #0]
    d62a:	f64b 0310 	movw	r3, #47120	; 0xb810
    d62e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d632:	2200      	movs	r2, #0
    d634:	701a      	strb	r2, [r3, #0]
    d636:	f64b 0326 	movw	r3, #47142	; 0xb826
    d63a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d63e:	2200      	movs	r2, #0
    d640:	801a      	strh	r2, [r3, #0]
    d642:	f64b 236c 	movw	r3, #47724	; 0xba6c
    d646:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d64a:	681a      	ldr	r2, [r3, #0]
    d64c:	f64b 0314 	movw	r3, #47124	; 0xb814
    d650:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d654:	601a      	str	r2, [r3, #0]
    d656:	f64b 2370 	movw	r3, #47728	; 0xba70
    d65a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d65e:	681a      	ldr	r2, [r3, #0]
    d660:	f64b 0318 	movw	r3, #47128	; 0xb818
    d664:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d668:	601a      	str	r2, [r3, #0]
    d66a:	f64b 0324 	movw	r3, #47140	; 0xb824
    d66e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d672:	2200      	movs	r2, #0
    d674:	801a      	strh	r2, [r3, #0]
    d676:	f64b 0328 	movw	r3, #47144	; 0xb828
    d67a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d67e:	f04f 0200 	mov.w	r2, #0
    d682:	601a      	str	r2, [r3, #0]
    d684:	f001 bf5e 	b.w	f544 <auto_nav+0x21a4>
     else { }
}
else if (nav_block == 1) // two
    d688:	f64b 0311 	movw	r3, #47121	; 0xb811
    d68c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d690:	781b      	ldrb	r3, [r3, #0]
    d692:	2b01      	cmp	r3, #1
    d694:	f040 81bc 	bne.w	da10 <auto_nav+0x670>
{
    nav_block = 1;
    d698:	f64b 0311 	movw	r3, #47121	; 0xb811
    d69c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6a0:	2201      	movs	r2, #1
    d6a2:	701a      	strb	r2, [r3, #0]
    if RcEvent1() 
    d6a4:	f24b 43a0 	movw	r3, #46240	; 0xb4a0
    d6a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6ac:	781b      	ldrb	r3, [r3, #0]
    d6ae:	2b00      	cmp	r3, #0
    d6b0:	d007      	beq.n	d6c2 <auto_nav+0x322>
    d6b2:	f24b 43a0 	movw	r3, #46240	; 0xb4a0
    d6b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6ba:	2200      	movs	r2, #0
    d6bc:	701a      	strb	r2, [r3, #0]
    d6be:	2301      	movs	r3, #1
    d6c0:	e000      	b.n	d6c4 <auto_nav+0x324>
    d6c2:	2300      	movs	r3, #0
    d6c4:	2b00      	cmp	r3, #0
    d6c6:	d034      	beq.n	d732 <auto_nav+0x392>
	{ GotoBlock(2) }
    d6c8:	f64b 0311 	movw	r3, #47121	; 0xb811
    d6cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6d0:	2202      	movs	r2, #2
    d6d2:	701a      	strb	r2, [r3, #0]
    d6d4:	f64b 0310 	movw	r3, #47120	; 0xb810
    d6d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6dc:	2200      	movs	r2, #0
    d6de:	701a      	strb	r2, [r3, #0]
    d6e0:	f64b 0326 	movw	r3, #47142	; 0xb826
    d6e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6e8:	2200      	movs	r2, #0
    d6ea:	801a      	strh	r2, [r3, #0]
    d6ec:	f64b 236c 	movw	r3, #47724	; 0xba6c
    d6f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6f4:	681a      	ldr	r2, [r3, #0]
    d6f6:	f64b 0314 	movw	r3, #47124	; 0xb814
    d6fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6fe:	601a      	str	r2, [r3, #0]
    d700:	f64b 2370 	movw	r3, #47728	; 0xba70
    d704:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d708:	681a      	ldr	r2, [r3, #0]
    d70a:	f64b 0318 	movw	r3, #47128	; 0xb818
    d70e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d712:	601a      	str	r2, [r3, #0]
    d714:	f64b 0324 	movw	r3, #47140	; 0xb824
    d718:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d71c:	2200      	movs	r2, #0
    d71e:	801a      	strh	r2, [r3, #0]
    d720:	f64b 0328 	movw	r3, #47144	; 0xb828
    d724:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d728:	f04f 0200 	mov.w	r2, #0
    d72c:	601a      	str	r2, [r3, #0]
    d72e:	f001 bf09 	b.w	f544 <auto_nav+0x21a4>
    if(nav_stage == 0)
    d732:	f64b 0310 	movw	r3, #47120	; 0xb810
    d736:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d73a:	781b      	ldrb	r3, [r3, #0]
    d73c:	2b00      	cmp	r3, #0
    d73e:	d12e      	bne.n	d79e <auto_nav+0x3fe>
    {
       Label(while_3)
       if (! (TRUE)) Goto(endwhile_4) else NextStage();
    d740:	f64b 0310 	movw	r3, #47120	; 0xb810
    d744:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d748:	781b      	ldrb	r3, [r3, #0]
    d74a:	3301      	adds	r3, #1
    d74c:	b2da      	uxtb	r2, r3
    d74e:	f64b 0310 	movw	r3, #47120	; 0xb810
    d752:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d756:	701a      	strb	r2, [r3, #0]
    d758:	f64b 236c 	movw	r3, #47724	; 0xba6c
    d75c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d760:	681a      	ldr	r2, [r3, #0]
    d762:	f64b 0314 	movw	r3, #47124	; 0xb814
    d766:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d76a:	601a      	str	r2, [r3, #0]
    d76c:	f64b 2370 	movw	r3, #47728	; 0xba70
    d770:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d774:	681a      	ldr	r2, [r3, #0]
    d776:	f64b 0318 	movw	r3, #47128	; 0xb818
    d77a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d77e:	601a      	str	r2, [r3, #0]
    d780:	f64b 0324 	movw	r3, #47140	; 0xb824
    d784:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d788:	2200      	movs	r2, #0
    d78a:	801a      	strh	r2, [r3, #0]
    d78c:	f64b 0328 	movw	r3, #47144	; 0xb828
    d790:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d794:	f04f 0200 	mov.w	r2, #0
    d798:	601a      	str	r2, [r3, #0]
    d79a:	f001 bed3 	b.w	f544 <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
    d79e:	f64b 0310 	movw	r3, #47120	; 0xb810
    d7a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7a6:	781b      	ldrb	r3, [r3, #0]
    d7a8:	2b01      	cmp	r3, #1
    d7aa:	d169      	bne.n	d880 <auto_nav+0x4e0>
    {
	  nav_stage = 1;
    d7ac:	f64b 0310 	movw	r3, #47120	; 0xb810
    d7b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7b4:	2201      	movs	r2, #1
    d7b6:	701a      	strb	r2, [r3, #0]
          if (approaching(1)) NextStageFrom(1) else {
    d7b8:	2001      	movs	r0, #1
    d7ba:	f001 fed1 	bl	f560 <approaching>
    d7be:	4603      	mov	r3, r0
    d7c0:	2b00      	cmp	r3, #0
    d7c2:	d034      	beq.n	d82e <auto_nav+0x48e>
    d7c4:	f64b 031c 	movw	r3, #47132	; 0xb81c
    d7c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7cc:	2201      	movs	r2, #1
    d7ce:	701a      	strb	r2, [r3, #0]
    d7d0:	f64b 0310 	movw	r3, #47120	; 0xb810
    d7d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7d8:	781b      	ldrb	r3, [r3, #0]
    d7da:	3301      	adds	r3, #1
    d7dc:	b2da      	uxtb	r2, r3
    d7de:	f64b 0310 	movw	r3, #47120	; 0xb810
    d7e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7e6:	701a      	strb	r2, [r3, #0]
    d7e8:	f64b 236c 	movw	r3, #47724	; 0xba6c
    d7ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7f0:	681a      	ldr	r2, [r3, #0]
    d7f2:	f64b 0314 	movw	r3, #47124	; 0xb814
    d7f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7fa:	601a      	str	r2, [r3, #0]
    d7fc:	f64b 2370 	movw	r3, #47728	; 0xba70
    d800:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d804:	681a      	ldr	r2, [r3, #0]
    d806:	f64b 0318 	movw	r3, #47128	; 0xb818
    d80a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d80e:	601a      	str	r2, [r3, #0]
    d810:	f64b 0324 	movw	r3, #47140	; 0xb824
    d814:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d818:	2200      	movs	r2, #0
    d81a:	801a      	strh	r2, [r3, #0]
    d81c:	f64b 0328 	movw	r3, #47144	; 0xb828
    d820:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d824:	f04f 0200 	mov.w	r2, #0
    d828:	601a      	str	r2, [r3, #0]
    d82a:	f001 be8b 	b.w	f544 <auto_nav+0x21a4>
            fly_to(1);
    d82e:	2001      	movs	r0, #1
    d830:	f001 ffca 	bl	f7c8 <fly_to>
            auto_pitch = FALSE;
    d834:	f24b 439f 	movw	r3, #46239	; 0xb49f
    d838:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d83c:	2200      	movs	r2, #0
    d83e:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
    d840:	f64b 033c 	movw	r3, #47164	; 0xb83c
    d844:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d848:	f04f 0200 	mov.w	r2, #0
    d84c:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
    d84e:	f24b 439d 	movw	r3, #46237	; 0xb49d
    d852:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d856:	2203      	movs	r2, #3
    d858:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[1].a;
    d85a:	f240 1340 	movw	r3, #320	; 0x140
    d85e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d862:	695a      	ldr	r2, [r3, #20]
    d864:	f240 133c 	movw	r3, #316	; 0x13c
    d868:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d86c:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
    d86e:	f64b 0304 	movw	r3, #47108	; 0xb804
    d872:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d876:	f04f 0200 	mov.w	r2, #0
    d87a:	601a      	str	r2, [r3, #0]
          }
          return;
    d87c:	f001 be62 	b.w	f544 <auto_nav+0x21a4>
     }
     else if (nav_stage == 2)
    d880:	f64b 0310 	movw	r3, #47120	; 0xb810
    d884:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d888:	781b      	ldrb	r3, [r3, #0]
    d88a:	2b02      	cmp	r3, #2
    d88c:	d169      	bne.n	d962 <auto_nav+0x5c2>
     {
	  nav_stage = 2;
    d88e:	f64b 0310 	movw	r3, #47120	; 0xb810
    d892:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d896:	2202      	movs	r2, #2
    d898:	701a      	strb	r2, [r3, #0]
          if (approaching(4)) NextStageFrom(4) else {
    d89a:	2004      	movs	r0, #4
    d89c:	f001 fe60 	bl	f560 <approaching>
    d8a0:	4603      	mov	r3, r0
    d8a2:	2b00      	cmp	r3, #0
    d8a4:	d034      	beq.n	d910 <auto_nav+0x570>
    d8a6:	f64b 031c 	movw	r3, #47132	; 0xb81c
    d8aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8ae:	2204      	movs	r2, #4
    d8b0:	701a      	strb	r2, [r3, #0]
    d8b2:	f64b 0310 	movw	r3, #47120	; 0xb810
    d8b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8ba:	781b      	ldrb	r3, [r3, #0]
    d8bc:	3301      	adds	r3, #1
    d8be:	b2da      	uxtb	r2, r3
    d8c0:	f64b 0310 	movw	r3, #47120	; 0xb810
    d8c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8c8:	701a      	strb	r2, [r3, #0]
    d8ca:	f64b 236c 	movw	r3, #47724	; 0xba6c
    d8ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8d2:	681a      	ldr	r2, [r3, #0]
    d8d4:	f64b 0314 	movw	r3, #47124	; 0xb814
    d8d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8dc:	601a      	str	r2, [r3, #0]
    d8de:	f64b 2370 	movw	r3, #47728	; 0xba70
    d8e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8e6:	681a      	ldr	r2, [r3, #0]
    d8e8:	f64b 0318 	movw	r3, #47128	; 0xb818
    d8ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8f0:	601a      	str	r2, [r3, #0]
    d8f2:	f64b 0324 	movw	r3, #47140	; 0xb824
    d8f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8fa:	2200      	movs	r2, #0
    d8fc:	801a      	strh	r2, [r3, #0]
    d8fe:	f64b 0328 	movw	r3, #47144	; 0xb828
    d902:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d906:	f04f 0200 	mov.w	r2, #0
    d90a:	601a      	str	r2, [r3, #0]
    d90c:	f001 be1a 	b.w	f544 <auto_nav+0x21a4>
            fly_to(4);
    d910:	2004      	movs	r0, #4
    d912:	f001 ff59 	bl	f7c8 <fly_to>
            auto_pitch = FALSE;
    d916:	f24b 439f 	movw	r3, #46239	; 0xb49f
    d91a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d91e:	2200      	movs	r2, #0
    d920:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
    d922:	f64b 033c 	movw	r3, #47164	; 0xb83c
    d926:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d92a:	f04f 0200 	mov.w	r2, #0
    d92e:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
    d930:	f24b 439d 	movw	r3, #46237	; 0xb49d
    d934:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d938:	2203      	movs	r2, #3
    d93a:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[4].a;
    d93c:	f240 1340 	movw	r3, #320	; 0x140
    d940:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d944:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    d946:	f240 133c 	movw	r3, #316	; 0x13c
    d94a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d94e:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
    d950:	f64b 0304 	movw	r3, #47108	; 0xb804
    d954:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d958:	f04f 0200 	mov.w	r2, #0
    d95c:	601a      	str	r2, [r3, #0]
          }
          return;
    d95e:	f001 bdf1 	b.w	f544 <auto_nav+0x21a4>
      }
      else if (nav_stage == 3)
    d962:	f64b 0310 	movw	r3, #47120	; 0xb810
    d966:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d96a:	781b      	ldrb	r3, [r3, #0]
    d96c:	2b03      	cmp	r3, #3
    d96e:	d106      	bne.n	d97e <auto_nav+0x5de>
      {
	  nav_stage = 3;
    d970:	f64b 0310 	movw	r3, #47120	; 0xb810
    d974:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d978:	2203      	movs	r2, #3
    d97a:	701a      	strb	r2, [r3, #0]
          Goto(while_3)
    d97c:	e6e0      	b.n	d740 <auto_nav+0x3a0>
      }
      else if (nav_stage == 4)
    d97e:	f64b 0310 	movw	r3, #47120	; 0xb810
    d982:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d986:	781b      	ldrb	r3, [r3, #0]
    d988:	2b04      	cmp	r3, #4
    d98a:	f041 85db 	bne.w	f544 <auto_nav+0x21a4>
      {
        Label(endwhile_4)
	nav_stage = 4;
    d98e:	f64b 0310 	movw	r3, #47120	; 0xb810
    d992:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d996:	2204      	movs	r2, #4
    d998:	701a      	strb	r2, [r3, #0]
        NextBlock()
    d99a:	f64b 0311 	movw	r3, #47121	; 0xb811
    d99e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9a2:	781b      	ldrb	r3, [r3, #0]
    d9a4:	3301      	adds	r3, #1
    d9a6:	b2da      	uxtb	r2, r3
    d9a8:	f64b 0311 	movw	r3, #47121	; 0xb811
    d9ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9b0:	701a      	strb	r2, [r3, #0]
    d9b2:	f64b 0310 	movw	r3, #47120	; 0xb810
    d9b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9ba:	2200      	movs	r2, #0
    d9bc:	701a      	strb	r2, [r3, #0]
    d9be:	f64b 0326 	movw	r3, #47142	; 0xb826
    d9c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9c6:	2200      	movs	r2, #0
    d9c8:	801a      	strh	r2, [r3, #0]
    d9ca:	f64b 236c 	movw	r3, #47724	; 0xba6c
    d9ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9d2:	681a      	ldr	r2, [r3, #0]
    d9d4:	f64b 0314 	movw	r3, #47124	; 0xb814
    d9d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9dc:	601a      	str	r2, [r3, #0]
    d9de:	f64b 2370 	movw	r3, #47728	; 0xba70
    d9e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9e6:	681a      	ldr	r2, [r3, #0]
    d9e8:	f64b 0318 	movw	r3, #47128	; 0xb818
    d9ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9f0:	601a      	str	r2, [r3, #0]
    d9f2:	f64b 0324 	movw	r3, #47140	; 0xb824
    d9f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9fa:	2200      	movs	r2, #0
    d9fc:	801a      	strh	r2, [r3, #0]
    d9fe:	f64b 0328 	movw	r3, #47144	; 0xb828
    da02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da06:	f04f 0200 	mov.w	r2, #0
    da0a:	601a      	str	r2, [r3, #0]
    da0c:	f001 bd9a 	b.w	f544 <auto_nav+0x21a4>
      }
      else { }
}
else if (nav_block == 2) // height
    da10:	f64b 0311 	movw	r3, #47121	; 0xb811
    da14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da18:	781b      	ldrb	r3, [r3, #0]
    da1a:	2b02      	cmp	r3, #2
    da1c:	f040 8392 	bne.w	e144 <auto_nav+0xda4>
{
	nav_block = 2;
    da20:	f64b 0311 	movw	r3, #47121	; 0xb811
    da24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da28:	2202      	movs	r2, #2
    da2a:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(3) }
    da2c:	f24b 43a0 	movw	r3, #46240	; 0xb4a0
    da30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da34:	781b      	ldrb	r3, [r3, #0]
    da36:	2b00      	cmp	r3, #0
    da38:	d007      	beq.n	da4a <auto_nav+0x6aa>
    da3a:	f24b 43a0 	movw	r3, #46240	; 0xb4a0
    da3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da42:	2200      	movs	r2, #0
    da44:	701a      	strb	r2, [r3, #0]
    da46:	2301      	movs	r3, #1
    da48:	e000      	b.n	da4c <auto_nav+0x6ac>
    da4a:	2300      	movs	r3, #0
    da4c:	2b00      	cmp	r3, #0
    da4e:	d034      	beq.n	daba <auto_nav+0x71a>
    da50:	f64b 0311 	movw	r3, #47121	; 0xb811
    da54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da58:	2203      	movs	r2, #3
    da5a:	701a      	strb	r2, [r3, #0]
    da5c:	f64b 0310 	movw	r3, #47120	; 0xb810
    da60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da64:	2200      	movs	r2, #0
    da66:	701a      	strb	r2, [r3, #0]
    da68:	f64b 0326 	movw	r3, #47142	; 0xb826
    da6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da70:	2200      	movs	r2, #0
    da72:	801a      	strh	r2, [r3, #0]
    da74:	f64b 236c 	movw	r3, #47724	; 0xba6c
    da78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da7c:	681a      	ldr	r2, [r3, #0]
    da7e:	f64b 0314 	movw	r3, #47124	; 0xb814
    da82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da86:	601a      	str	r2, [r3, #0]
    da88:	f64b 2370 	movw	r3, #47728	; 0xba70
    da8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da90:	681a      	ldr	r2, [r3, #0]
    da92:	f64b 0318 	movw	r3, #47128	; 0xb818
    da96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da9a:	601a      	str	r2, [r3, #0]
    da9c:	f64b 0324 	movw	r3, #47140	; 0xb824
    daa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    daa4:	2200      	movs	r2, #0
    daa6:	801a      	strh	r2, [r3, #0]
    daa8:	f64b 0328 	movw	r3, #47144	; 0xb828
    daac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dab0:	f04f 0200 	mov.w	r2, #0
    dab4:	601a      	str	r2, [r3, #0]
    dab6:	f001 bd45 	b.w	f544 <auto_nav+0x21a4>
    
    if(nav_stage == 0)
    daba:	f64b 0310 	movw	r3, #47120	; 0xb810
    dabe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dac2:	781b      	ldrb	r3, [r3, #0]
    dac4:	2b00      	cmp	r3, #0
    dac6:	d134      	bne.n	db32 <auto_nav+0x792>
    {
       Label(while_5)
       nav_stage = 0;
    dac8:	f64b 0310 	movw	r3, #47120	; 0xb810
    dacc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dad0:	2200      	movs	r2, #0
    dad2:	701a      	strb	r2, [r3, #0]
       if (! (TRUE)) Goto(endwhile_6) else NextStage();
    dad4:	f64b 0310 	movw	r3, #47120	; 0xb810
    dad8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dadc:	781b      	ldrb	r3, [r3, #0]
    dade:	3301      	adds	r3, #1
    dae0:	b2da      	uxtb	r2, r3
    dae2:	f64b 0310 	movw	r3, #47120	; 0xb810
    dae6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    daea:	701a      	strb	r2, [r3, #0]
    daec:	f64b 236c 	movw	r3, #47724	; 0xba6c
    daf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    daf4:	681a      	ldr	r2, [r3, #0]
    daf6:	f64b 0314 	movw	r3, #47124	; 0xb814
    dafa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dafe:	601a      	str	r2, [r3, #0]
    db00:	f64b 2370 	movw	r3, #47728	; 0xba70
    db04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db08:	681a      	ldr	r2, [r3, #0]
    db0a:	f64b 0318 	movw	r3, #47128	; 0xb818
    db0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db12:	601a      	str	r2, [r3, #0]
    db14:	f64b 0324 	movw	r3, #47140	; 0xb824
    db18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db1c:	2200      	movs	r2, #0
    db1e:	801a      	strh	r2, [r3, #0]
    db20:	f64b 0328 	movw	r3, #47144	; 0xb828
    db24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db28:	f04f 0200 	mov.w	r2, #0
    db2c:	601a      	str	r2, [r3, #0]
    db2e:	f001 bd09 	b.w	f544 <auto_nav+0x21a4>
    }
    else if(nav_stage == 1)
    db32:	f64b 0310 	movw	r3, #47120	; 0xb810
    db36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db3a:	781b      	ldrb	r3, [r3, #0]
    db3c:	2b01      	cmp	r3, #1
    db3e:	d169      	bne.n	dc14 <auto_nav+0x874>
    {
         nav_stage =1;
    db40:	f64b 0310 	movw	r3, #47120	; 0xb810
    db44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db48:	2201      	movs	r2, #1
    db4a:	701a      	strb	r2, [r3, #0]
          if (approaching(6)) NextStageFrom(6) else {
    db4c:	2006      	movs	r0, #6
    db4e:	f001 fd07 	bl	f560 <approaching>
    db52:	4603      	mov	r3, r0
    db54:	2b00      	cmp	r3, #0
    db56:	d034      	beq.n	dbc2 <auto_nav+0x822>
    db58:	f64b 031c 	movw	r3, #47132	; 0xb81c
    db5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db60:	2206      	movs	r2, #6
    db62:	701a      	strb	r2, [r3, #0]
    db64:	f64b 0310 	movw	r3, #47120	; 0xb810
    db68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db6c:	781b      	ldrb	r3, [r3, #0]
    db6e:	3301      	adds	r3, #1
    db70:	b2da      	uxtb	r2, r3
    db72:	f64b 0310 	movw	r3, #47120	; 0xb810
    db76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db7a:	701a      	strb	r2, [r3, #0]
    db7c:	f64b 236c 	movw	r3, #47724	; 0xba6c
    db80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db84:	681a      	ldr	r2, [r3, #0]
    db86:	f64b 0314 	movw	r3, #47124	; 0xb814
    db8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db8e:	601a      	str	r2, [r3, #0]
    db90:	f64b 2370 	movw	r3, #47728	; 0xba70
    db94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db98:	681a      	ldr	r2, [r3, #0]
    db9a:	f64b 0318 	movw	r3, #47128	; 0xb818
    db9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dba2:	601a      	str	r2, [r3, #0]
    dba4:	f64b 0324 	movw	r3, #47140	; 0xb824
    dba8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbac:	2200      	movs	r2, #0
    dbae:	801a      	strh	r2, [r3, #0]
    dbb0:	f64b 0328 	movw	r3, #47144	; 0xb828
    dbb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbb8:	f04f 0200 	mov.w	r2, #0
    dbbc:	601a      	str	r2, [r3, #0]
    dbbe:	f001 bcc1 	b.w	f544 <auto_nav+0x21a4>
            fly_to(6);
    dbc2:	2006      	movs	r0, #6
    dbc4:	f001 fe00 	bl	f7c8 <fly_to>
            auto_pitch = FALSE;
    dbc8:	f24b 439f 	movw	r3, #46239	; 0xb49f
    dbcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbd0:	2200      	movs	r2, #0
    dbd2:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
    dbd4:	f64b 033c 	movw	r3, #47164	; 0xb83c
    dbd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbdc:	f04f 0200 	mov.w	r2, #0
    dbe0:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
    dbe2:	f24b 439d 	movw	r3, #46237	; 0xb49d
    dbe6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbea:	2203      	movs	r2, #3
    dbec:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[6].a;
    dbee:	f240 1340 	movw	r3, #320	; 0x140
    dbf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbf6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    dbf8:	f240 133c 	movw	r3, #316	; 0x13c
    dbfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc00:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
    dc02:	f64b 0304 	movw	r3, #47108	; 0xb804
    dc06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc0a:	f04f 0200 	mov.w	r2, #0
    dc0e:	601a      	str	r2, [r3, #0]
          }
          return;
    dc10:	f001 bc98 	b.w	f544 <auto_nav+0x21a4>
     }
     else if (nav_stage == 2)
    dc14:	f64b 0310 	movw	r3, #47120	; 0xb810
    dc18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc1c:	781b      	ldrb	r3, [r3, #0]
    dc1e:	2b02      	cmp	r3, #2
    dc20:	d169      	bne.n	dcf6 <auto_nav+0x956>
     {
         nav_stage =2; 
    dc22:	f64b 0310 	movw	r3, #47120	; 0xb810
    dc26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc2a:	2202      	movs	r2, #2
    dc2c:	701a      	strb	r2, [r3, #0]
         if (approaching(1)) NextStageFrom(1) else {
    dc2e:	2001      	movs	r0, #1
    dc30:	f001 fc96 	bl	f560 <approaching>
    dc34:	4603      	mov	r3, r0
    dc36:	2b00      	cmp	r3, #0
    dc38:	d034      	beq.n	dca4 <auto_nav+0x904>
    dc3a:	f64b 031c 	movw	r3, #47132	; 0xb81c
    dc3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc42:	2201      	movs	r2, #1
    dc44:	701a      	strb	r2, [r3, #0]
    dc46:	f64b 0310 	movw	r3, #47120	; 0xb810
    dc4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc4e:	781b      	ldrb	r3, [r3, #0]
    dc50:	3301      	adds	r3, #1
    dc52:	b2da      	uxtb	r2, r3
    dc54:	f64b 0310 	movw	r3, #47120	; 0xb810
    dc58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc5c:	701a      	strb	r2, [r3, #0]
    dc5e:	f64b 236c 	movw	r3, #47724	; 0xba6c
    dc62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc66:	681a      	ldr	r2, [r3, #0]
    dc68:	f64b 0314 	movw	r3, #47124	; 0xb814
    dc6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc70:	601a      	str	r2, [r3, #0]
    dc72:	f64b 2370 	movw	r3, #47728	; 0xba70
    dc76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc7a:	681a      	ldr	r2, [r3, #0]
    dc7c:	f64b 0318 	movw	r3, #47128	; 0xb818
    dc80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc84:	601a      	str	r2, [r3, #0]
    dc86:	f64b 0324 	movw	r3, #47140	; 0xb824
    dc8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc8e:	2200      	movs	r2, #0
    dc90:	801a      	strh	r2, [r3, #0]
    dc92:	f64b 0328 	movw	r3, #47144	; 0xb828
    dc96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc9a:	f04f 0200 	mov.w	r2, #0
    dc9e:	601a      	str	r2, [r3, #0]
    dca0:	f001 bc50 	b.w	f544 <auto_nav+0x21a4>
            fly_to(1);
    dca4:	2001      	movs	r0, #1
    dca6:	f001 fd8f 	bl	f7c8 <fly_to>
            auto_pitch = FALSE;
    dcaa:	f24b 439f 	movw	r3, #46239	; 0xb49f
    dcae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcb2:	2200      	movs	r2, #0
    dcb4:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
    dcb6:	f64b 033c 	movw	r3, #47164	; 0xb83c
    dcba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcbe:	f04f 0200 	mov.w	r2, #0
    dcc2:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
    dcc4:	f24b 439d 	movw	r3, #46237	; 0xb49d
    dcc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dccc:	2203      	movs	r2, #3
    dcce:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[1].a;
    dcd0:	f240 1340 	movw	r3, #320	; 0x140
    dcd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcd8:	695a      	ldr	r2, [r3, #20]
    dcda:	f240 133c 	movw	r3, #316	; 0x13c
    dcde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dce2:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
    dce4:	f64b 0304 	movw	r3, #47108	; 0xb804
    dce8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcec:	f04f 0200 	mov.w	r2, #0
    dcf0:	601a      	str	r2, [r3, #0]
          }
          return;
    dcf2:	f001 bc27 	b.w	f544 <auto_nav+0x21a4>
      }
      else if (nav_stage == 3)
    dcf6:	f64b 0310 	movw	r3, #47120	; 0xb810
    dcfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcfe:	781b      	ldrb	r3, [r3, #0]
    dd00:	2b03      	cmp	r3, #3
    dd02:	d16f      	bne.n	dde4 <auto_nav+0xa44>
      {
	   nav_stage = 3;         
    dd04:	f64b 0310 	movw	r3, #47120	; 0xb810
    dd08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd0c:	2203      	movs	r2, #3
    dd0e:	701a      	strb	r2, [r3, #0]
           if (approaching(2)) NextStageFrom(2) else {
    dd10:	2002      	movs	r0, #2
    dd12:	f001 fc25 	bl	f560 <approaching>
    dd16:	4603      	mov	r3, r0
    dd18:	2b00      	cmp	r3, #0
    dd1a:	d034      	beq.n	dd86 <auto_nav+0x9e6>
    dd1c:	f64b 031c 	movw	r3, #47132	; 0xb81c
    dd20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd24:	2202      	movs	r2, #2
    dd26:	701a      	strb	r2, [r3, #0]
    dd28:	f64b 0310 	movw	r3, #47120	; 0xb810
    dd2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd30:	781b      	ldrb	r3, [r3, #0]
    dd32:	3301      	adds	r3, #1
    dd34:	b2da      	uxtb	r2, r3
    dd36:	f64b 0310 	movw	r3, #47120	; 0xb810
    dd3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd3e:	701a      	strb	r2, [r3, #0]
    dd40:	f64b 236c 	movw	r3, #47724	; 0xba6c
    dd44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd48:	681a      	ldr	r2, [r3, #0]
    dd4a:	f64b 0314 	movw	r3, #47124	; 0xb814
    dd4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd52:	601a      	str	r2, [r3, #0]
    dd54:	f64b 2370 	movw	r3, #47728	; 0xba70
    dd58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd5c:	681a      	ldr	r2, [r3, #0]
    dd5e:	f64b 0318 	movw	r3, #47128	; 0xb818
    dd62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd66:	601a      	str	r2, [r3, #0]
    dd68:	f64b 0324 	movw	r3, #47140	; 0xb824
    dd6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd70:	2200      	movs	r2, #0
    dd72:	801a      	strh	r2, [r3, #0]
    dd74:	f64b 0328 	movw	r3, #47144	; 0xb828
    dd78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd7c:	f04f 0200 	mov.w	r2, #0
    dd80:	601a      	str	r2, [r3, #0]
    dd82:	f001 bbdf 	b.w	f544 <auto_nav+0x21a4>
            route_to(last_wp, 2);
    dd86:	f64b 031c 	movw	r3, #47132	; 0xb81c
    dd8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd8e:	781b      	ldrb	r3, [r3, #0]
    dd90:	4618      	mov	r0, r3
    dd92:	2102      	movs	r1, #2
    dd94:	f001 fd3a 	bl	f80c <route_to>
            auto_pitch = FALSE;
    dd98:	f24b 439f 	movw	r3, #46239	; 0xb49f
    dd9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dda0:	2200      	movs	r2, #0
    dda2:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
    dda4:	f64b 033c 	movw	r3, #47164	; 0xb83c
    dda8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddac:	f04f 0200 	mov.w	r2, #0
    ddb0:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
    ddb2:	f24b 439d 	movw	r3, #46237	; 0xb49d
    ddb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddba:	2203      	movs	r2, #3
    ddbc:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[2].a;
    ddbe:	f240 1340 	movw	r3, #320	; 0x140
    ddc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddc6:	6a1a      	ldr	r2, [r3, #32]
    ddc8:	f240 133c 	movw	r3, #316	; 0x13c
    ddcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddd0:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
    ddd2:	f64b 0304 	movw	r3, #47108	; 0xb804
    ddd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddda:	f04f 0200 	mov.w	r2, #0
    ddde:	601a      	str	r2, [r3, #0]
          }
          return;
    dde0:	f001 bbb0 	b.w	f544 <auto_nav+0x21a4>
       }
       else if (nav_stage == 4)
    dde4:	f64b 0310 	movw	r3, #47120	; 0xb810
    dde8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddec:	781b      	ldrb	r3, [r3, #0]
    ddee:	2b04      	cmp	r3, #4
    ddf0:	d169      	bne.n	dec6 <auto_nav+0xb26>
       {
          nav_stage = 4;
    ddf2:	f64b 0310 	movw	r3, #47120	; 0xb810
    ddf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddfa:	2204      	movs	r2, #4
    ddfc:	701a      	strb	r2, [r3, #0]
          if (approaching(3)) NextStageFrom(3) else {
    ddfe:	2003      	movs	r0, #3
    de00:	f001 fbae 	bl	f560 <approaching>
    de04:	4603      	mov	r3, r0
    de06:	2b00      	cmp	r3, #0
    de08:	d034      	beq.n	de74 <auto_nav+0xad4>
    de0a:	f64b 031c 	movw	r3, #47132	; 0xb81c
    de0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de12:	2203      	movs	r2, #3
    de14:	701a      	strb	r2, [r3, #0]
    de16:	f64b 0310 	movw	r3, #47120	; 0xb810
    de1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de1e:	781b      	ldrb	r3, [r3, #0]
    de20:	3301      	adds	r3, #1
    de22:	b2da      	uxtb	r2, r3
    de24:	f64b 0310 	movw	r3, #47120	; 0xb810
    de28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de2c:	701a      	strb	r2, [r3, #0]
    de2e:	f64b 236c 	movw	r3, #47724	; 0xba6c
    de32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de36:	681a      	ldr	r2, [r3, #0]
    de38:	f64b 0314 	movw	r3, #47124	; 0xb814
    de3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de40:	601a      	str	r2, [r3, #0]
    de42:	f64b 2370 	movw	r3, #47728	; 0xba70
    de46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de4a:	681a      	ldr	r2, [r3, #0]
    de4c:	f64b 0318 	movw	r3, #47128	; 0xb818
    de50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de54:	601a      	str	r2, [r3, #0]
    de56:	f64b 0324 	movw	r3, #47140	; 0xb824
    de5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de5e:	2200      	movs	r2, #0
    de60:	801a      	strh	r2, [r3, #0]
    de62:	f64b 0328 	movw	r3, #47144	; 0xb828
    de66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de6a:	f04f 0200 	mov.w	r2, #0
    de6e:	601a      	str	r2, [r3, #0]
    de70:	f001 bb68 	b.w	f544 <auto_nav+0x21a4>
            fly_to(3);
    de74:	2003      	movs	r0, #3
    de76:	f001 fca7 	bl	f7c8 <fly_to>
            auto_pitch = FALSE;
    de7a:	f24b 439f 	movw	r3, #46239	; 0xb49f
    de7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de82:	2200      	movs	r2, #0
    de84:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
    de86:	f64b 033c 	movw	r3, #47164	; 0xb83c
    de8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de8e:	f04f 0200 	mov.w	r2, #0
    de92:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
    de94:	f24b 439d 	movw	r3, #46237	; 0xb49d
    de98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de9c:	2203      	movs	r2, #3
    de9e:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[3].a;
    dea0:	f240 1340 	movw	r3, #320	; 0x140
    dea4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    deaa:	f240 133c 	movw	r3, #316	; 0x13c
    deae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    deb2:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
    deb4:	f64b 0304 	movw	r3, #47108	; 0xb804
    deb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    debc:	f04f 0200 	mov.w	r2, #0
    dec0:	601a      	str	r2, [r3, #0]
          }
          return;
    dec2:	f001 bb3f 	b.w	f544 <auto_nav+0x21a4>
       }
       else if (nav_stage == 5)
    dec6:	f64b 0310 	movw	r3, #47120	; 0xb810
    deca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dece:	781b      	ldrb	r3, [r3, #0]
    ded0:	2b05      	cmp	r3, #5
    ded2:	d169      	bne.n	dfa8 <auto_nav+0xc08>
       {
          nav_stage =5;
    ded4:	f64b 0310 	movw	r3, #47120	; 0xb810
    ded8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dedc:	2205      	movs	r2, #5
    dede:	701a      	strb	r2, [r3, #0]
          if (approaching(4)) NextStageFrom(4) else {
    dee0:	2004      	movs	r0, #4
    dee2:	f001 fb3d 	bl	f560 <approaching>
    dee6:	4603      	mov	r3, r0
    dee8:	2b00      	cmp	r3, #0
    deea:	d034      	beq.n	df56 <auto_nav+0xbb6>
    deec:	f64b 031c 	movw	r3, #47132	; 0xb81c
    def0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    def4:	2204      	movs	r2, #4
    def6:	701a      	strb	r2, [r3, #0]
    def8:	f64b 0310 	movw	r3, #47120	; 0xb810
    defc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df00:	781b      	ldrb	r3, [r3, #0]
    df02:	3301      	adds	r3, #1
    df04:	b2da      	uxtb	r2, r3
    df06:	f64b 0310 	movw	r3, #47120	; 0xb810
    df0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df0e:	701a      	strb	r2, [r3, #0]
    df10:	f64b 236c 	movw	r3, #47724	; 0xba6c
    df14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df18:	681a      	ldr	r2, [r3, #0]
    df1a:	f64b 0314 	movw	r3, #47124	; 0xb814
    df1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df22:	601a      	str	r2, [r3, #0]
    df24:	f64b 2370 	movw	r3, #47728	; 0xba70
    df28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df2c:	681a      	ldr	r2, [r3, #0]
    df2e:	f64b 0318 	movw	r3, #47128	; 0xb818
    df32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df36:	601a      	str	r2, [r3, #0]
    df38:	f64b 0324 	movw	r3, #47140	; 0xb824
    df3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df40:	2200      	movs	r2, #0
    df42:	801a      	strh	r2, [r3, #0]
    df44:	f64b 0328 	movw	r3, #47144	; 0xb828
    df48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df4c:	f04f 0200 	mov.w	r2, #0
    df50:	601a      	str	r2, [r3, #0]
    df52:	f001 baf7 	b.w	f544 <auto_nav+0x21a4>
            fly_to(4);
    df56:	2004      	movs	r0, #4
    df58:	f001 fc36 	bl	f7c8 <fly_to>
            auto_pitch = FALSE;
    df5c:	f24b 439f 	movw	r3, #46239	; 0xb49f
    df60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df64:	2200      	movs	r2, #0
    df66:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
    df68:	f64b 033c 	movw	r3, #47164	; 0xb83c
    df6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df70:	f04f 0200 	mov.w	r2, #0
    df74:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
    df76:	f24b 439d 	movw	r3, #46237	; 0xb49d
    df7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df7e:	2203      	movs	r2, #3
    df80:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[4].a;
    df82:	f240 1340 	movw	r3, #320	; 0x140
    df86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    df8c:	f240 133c 	movw	r3, #316	; 0x13c
    df90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df94:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
    df96:	f64b 0304 	movw	r3, #47108	; 0xb804
    df9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df9e:	f04f 0200 	mov.w	r2, #0
    dfa2:	601a      	str	r2, [r3, #0]
          }
          return;
    dfa4:	f001 bace 	b.w	f544 <auto_nav+0x21a4>
       }
       else if (nav_stage == 6)
    dfa8:	f64b 0310 	movw	r3, #47120	; 0xb810
    dfac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfb0:	781b      	ldrb	r3, [r3, #0]
    dfb2:	2b06      	cmp	r3, #6
    dfb4:	d16f      	bne.n	e096 <auto_nav+0xcf6>
       {
          nav_stage =6;
    dfb6:	f64b 0310 	movw	r3, #47120	; 0xb810
    dfba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfbe:	2206      	movs	r2, #6
    dfc0:	701a      	strb	r2, [r3, #0]
          if (approaching(5)) NextStageFrom(5) else {
    dfc2:	2005      	movs	r0, #5
    dfc4:	f001 facc 	bl	f560 <approaching>
    dfc8:	4603      	mov	r3, r0
    dfca:	2b00      	cmp	r3, #0
    dfcc:	d034      	beq.n	e038 <auto_nav+0xc98>
    dfce:	f64b 031c 	movw	r3, #47132	; 0xb81c
    dfd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfd6:	2205      	movs	r2, #5
    dfd8:	701a      	strb	r2, [r3, #0]
    dfda:	f64b 0310 	movw	r3, #47120	; 0xb810
    dfde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfe2:	781b      	ldrb	r3, [r3, #0]
    dfe4:	3301      	adds	r3, #1
    dfe6:	b2da      	uxtb	r2, r3
    dfe8:	f64b 0310 	movw	r3, #47120	; 0xb810
    dfec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dff0:	701a      	strb	r2, [r3, #0]
    dff2:	f64b 236c 	movw	r3, #47724	; 0xba6c
    dff6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dffa:	681a      	ldr	r2, [r3, #0]
    dffc:	f64b 0314 	movw	r3, #47124	; 0xb814
    e000:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e004:	601a      	str	r2, [r3, #0]
    e006:	f64b 2370 	movw	r3, #47728	; 0xba70
    e00a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e00e:	681a      	ldr	r2, [r3, #0]
    e010:	f64b 0318 	movw	r3, #47128	; 0xb818
    e014:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e018:	601a      	str	r2, [r3, #0]
    e01a:	f64b 0324 	movw	r3, #47140	; 0xb824
    e01e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e022:	2200      	movs	r2, #0
    e024:	801a      	strh	r2, [r3, #0]
    e026:	f64b 0328 	movw	r3, #47144	; 0xb828
    e02a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e02e:	f04f 0200 	mov.w	r2, #0
    e032:	601a      	str	r2, [r3, #0]
    e034:	f001 ba86 	b.w	f544 <auto_nav+0x21a4>
            route_to(last_wp, 5);
    e038:	f64b 031c 	movw	r3, #47132	; 0xb81c
    e03c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e040:	781b      	ldrb	r3, [r3, #0]
    e042:	4618      	mov	r0, r3
    e044:	2105      	movs	r1, #5
    e046:	f001 fbe1 	bl	f80c <route_to>
            auto_pitch = FALSE;
    e04a:	f24b 439f 	movw	r3, #46239	; 0xb49f
    e04e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e052:	2200      	movs	r2, #0
    e054:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
    e056:	f64b 033c 	movw	r3, #47164	; 0xb83c
    e05a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e05e:	f04f 0200 	mov.w	r2, #0
    e062:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
    e064:	f24b 439d 	movw	r3, #46237	; 0xb49d
    e068:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e06c:	2203      	movs	r2, #3
    e06e:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[5].a;
    e070:	f240 1340 	movw	r3, #320	; 0x140
    e074:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e078:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    e07a:	f240 133c 	movw	r3, #316	; 0x13c
    e07e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e082:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
    e084:	f64b 0304 	movw	r3, #47108	; 0xb804
    e088:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e08c:	f04f 0200 	mov.w	r2, #0
    e090:	601a      	str	r2, [r3, #0]
          }
          return;
    e092:	f001 ba57 	b.w	f544 <auto_nav+0x21a4>
       }
       else if (nav_stage == 7)
    e096:	f64b 0310 	movw	r3, #47120	; 0xb810
    e09a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e09e:	781b      	ldrb	r3, [r3, #0]
    e0a0:	2b07      	cmp	r3, #7
    e0a2:	d106      	bne.n	e0b2 <auto_nav+0xd12>
       {
	   nav_stage =7;
    e0a4:	f64b 0310 	movw	r3, #47120	; 0xb810
    e0a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0ac:	2207      	movs	r2, #7
    e0ae:	701a      	strb	r2, [r3, #0]
	   Goto(while_5)
    e0b0:	e50a      	b.n	dac8 <auto_nav+0x728>
	}
       
       else if (nav_stage == 8){
    e0b2:	f64b 0310 	movw	r3, #47120	; 0xb810
    e0b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0ba:	781b      	ldrb	r3, [r3, #0]
    e0bc:	2b08      	cmp	r3, #8
    e0be:	f041 8241 	bne.w	f544 <auto_nav+0x21a4>
	  Label(endwhile_6)
	  nav_stage =8;
    e0c2:	f64b 0310 	movw	r3, #47120	; 0xb810
    e0c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0ca:	2208      	movs	r2, #8
    e0cc:	701a      	strb	r2, [r3, #0]
          NextBlock();
    e0ce:	f64b 0311 	movw	r3, #47121	; 0xb811
    e0d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0d6:	781b      	ldrb	r3, [r3, #0]
    e0d8:	3301      	adds	r3, #1
    e0da:	b2da      	uxtb	r2, r3
    e0dc:	f64b 0311 	movw	r3, #47121	; 0xb811
    e0e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0e4:	701a      	strb	r2, [r3, #0]
    e0e6:	f64b 0310 	movw	r3, #47120	; 0xb810
    e0ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0ee:	2200      	movs	r2, #0
    e0f0:	701a      	strb	r2, [r3, #0]
    e0f2:	f64b 0326 	movw	r3, #47142	; 0xb826
    e0f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0fa:	2200      	movs	r2, #0
    e0fc:	801a      	strh	r2, [r3, #0]
    e0fe:	f64b 236c 	movw	r3, #47724	; 0xba6c
    e102:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e106:	681a      	ldr	r2, [r3, #0]
    e108:	f64b 0314 	movw	r3, #47124	; 0xb814
    e10c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e110:	601a      	str	r2, [r3, #0]
    e112:	f64b 2370 	movw	r3, #47728	; 0xba70
    e116:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e11a:	681a      	ldr	r2, [r3, #0]
    e11c:	f64b 0318 	movw	r3, #47128	; 0xb818
    e120:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e124:	601a      	str	r2, [r3, #0]
    e126:	f64b 0324 	movw	r3, #47140	; 0xb824
    e12a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e12e:	2200      	movs	r2, #0
    e130:	801a      	strh	r2, [r3, #0]
    e132:	f64b 0328 	movw	r3, #47144	; 0xb828
    e136:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e13a:	f04f 0200 	mov.w	r2, #0
    e13e:	601a      	str	r2, [r3, #0]
    e140:	f001 ba00 	b.w	f544 <auto_nav+0x21a4>
       }
       else { }
}
else if (nav_block == 3) // xyz
    e144:	f64b 0311 	movw	r3, #47121	; 0xb811
    e148:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e14c:	781b      	ldrb	r3, [r3, #0]
    e14e:	2b03      	cmp	r3, #3
    e150:	f040 8388 	bne.w	e864 <auto_nav+0x14c4>
{
    nav_block = 3;
    e154:	f64b 0311 	movw	r3, #47121	; 0xb811
    e158:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e15c:	2203      	movs	r2, #3
    e15e:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(4) }
    e160:	f24b 43a0 	movw	r3, #46240	; 0xb4a0
    e164:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e168:	781b      	ldrb	r3, [r3, #0]
    e16a:	2b00      	cmp	r3, #0
    e16c:	d007      	beq.n	e17e <auto_nav+0xdde>
    e16e:	f24b 43a0 	movw	r3, #46240	; 0xb4a0
    e172:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e176:	2200      	movs	r2, #0
    e178:	701a      	strb	r2, [r3, #0]
    e17a:	2301      	movs	r3, #1
    e17c:	e000      	b.n	e180 <auto_nav+0xde0>
    e17e:	2300      	movs	r3, #0
    e180:	2b00      	cmp	r3, #0
    e182:	d034      	beq.n	e1ee <auto_nav+0xe4e>
    e184:	f64b 0311 	movw	r3, #47121	; 0xb811
    e188:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e18c:	2204      	movs	r2, #4
    e18e:	701a      	strb	r2, [r3, #0]
    e190:	f64b 0310 	movw	r3, #47120	; 0xb810
    e194:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e198:	2200      	movs	r2, #0
    e19a:	701a      	strb	r2, [r3, #0]
    e19c:	f64b 0326 	movw	r3, #47142	; 0xb826
    e1a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1a4:	2200      	movs	r2, #0
    e1a6:	801a      	strh	r2, [r3, #0]
    e1a8:	f64b 236c 	movw	r3, #47724	; 0xba6c
    e1ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1b0:	681a      	ldr	r2, [r3, #0]
    e1b2:	f64b 0314 	movw	r3, #47124	; 0xb814
    e1b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1ba:	601a      	str	r2, [r3, #0]
    e1bc:	f64b 2370 	movw	r3, #47728	; 0xba70
    e1c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1c4:	681a      	ldr	r2, [r3, #0]
    e1c6:	f64b 0318 	movw	r3, #47128	; 0xb818
    e1ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1ce:	601a      	str	r2, [r3, #0]
    e1d0:	f64b 0324 	movw	r3, #47140	; 0xb824
    e1d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1d8:	2200      	movs	r2, #0
    e1da:	801a      	strh	r2, [r3, #0]
    e1dc:	f64b 0328 	movw	r3, #47144	; 0xb828
    e1e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1e4:	f04f 0200 	mov.w	r2, #0
    e1e8:	601a      	str	r2, [r3, #0]
    e1ea:	f001 b9ab 	b.w	f544 <auto_nav+0x21a4>
    if(nav_stage == 0)
    e1ee:	f64b 0310 	movw	r3, #47120	; 0xb810
    e1f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1f6:	781b      	ldrb	r3, [r3, #0]
    e1f8:	2b00      	cmp	r3, #0
    e1fa:	f040 82ea 	bne.w	e7d2 <auto_nav+0x1432>
    {
        nav_stage = 0;
    e1fe:	f64b 0310 	movw	r3, #47120	; 0xb810
    e202:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e206:	2200      	movs	r2, #0
    e208:	701a      	strb	r2, [r3, #0]
        Goto3D(50)
    e20a:	f24b 439c 	movw	r3, #46236	; 0xb49c
    e20e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e212:	781b      	ldrb	r3, [r3, #0]
    e214:	2b02      	cmp	r3, #2
    e216:	f040 81a5 	bne.w	e564 <auto_nav+0x11c4>
    e21a:	f24b 53c0 	movw	r3, #46528	; 0xb5c0
    e21e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e222:	88db      	ldrh	r3, [r3, #6]
    e224:	84fb      	strh	r3, [r7, #38]	; 0x26
    e226:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
    e22a:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
    e22e:	dc04      	bgt.n	e23a <auto_nav+0xe9a>
    e230:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
    e234:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
    e238:	da7e      	bge.n	e338 <auto_nav+0xf98>
    e23a:	f64b 035c 	movw	r3, #47196	; 0xb85c
    e23e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e242:	681b      	ldr	r3, [r3, #0]
    e244:	4618      	mov	r0, r3
    e246:	f004 fbcf 	bl	129e8 <__aeabi_f2d>
    e24a:	4604      	mov	r4, r0
    e24c:	460d      	mov	r5, r1
    e24e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
    e252:	4618      	mov	r0, r3
    e254:	f005 f808 	bl	13268 <__aeabi_i2f>
    e258:	4603      	mov	r3, r0
    e25a:	4618      	mov	r0, r3
    e25c:	f04f 0100 	mov.w	r1, #0
    e260:	f2c4 6116 	movt	r1, #17942	; 0x4616
    e264:	f005 f908 	bl	13478 <__aeabi_fdiv>
    e268:	4603      	mov	r3, r0
    e26a:	4618      	mov	r0, r3
    e26c:	f004 fbbc 	bl	129e8 <__aeabi_f2d>
    e270:	4602      	mov	r2, r0
    e272:	460b      	mov	r3, r1
    e274:	4610      	mov	r0, r2
    e276:	4619      	mov	r1, r3
    e278:	f04f 0200 	mov.w	r2, #0
    e27c:	f04f 0300 	mov.w	r3, #0
    e280:	f2cc 0334 	movt	r3, #49204	; 0xc034
    e284:	f004 fc04 	bl	12a90 <__aeabi_dmul>
    e288:	4602      	mov	r2, r0
    e28a:	460b      	mov	r3, r1
    e28c:	4610      	mov	r0, r2
    e28e:	4619      	mov	r1, r3
    e290:	f04f 0200 	mov.w	r2, #0
    e294:	f04f 0300 	mov.w	r3, #0
    e298:	f004 fa48 	bl	1272c <__adddf3>
    e29c:	4602      	mov	r2, r0
    e29e:	460b      	mov	r3, r1
    e2a0:	4620      	mov	r0, r4
    e2a2:	4629      	mov	r1, r5
    e2a4:	f004 fa42 	bl	1272c <__adddf3>
    e2a8:	4602      	mov	r2, r0
    e2aa:	460b      	mov	r3, r1
    e2ac:	4610      	mov	r0, r2
    e2ae:	4619      	mov	r1, r3
    e2b0:	f004 fed0 	bl	13054 <__aeabi_d2f>
    e2b4:	4602      	mov	r2, r0
    e2b6:	f64b 035c 	movw	r3, #47196	; 0xb85c
    e2ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2be:	601a      	str	r2, [r3, #0]
    e2c0:	f64b 035c 	movw	r3, #47196	; 0xb85c
    e2c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2c8:	681b      	ldr	r3, [r3, #0]
    e2ca:	4618      	mov	r0, r3
    e2cc:	f04f 0100 	mov.w	r1, #0
    e2d0:	f2c4 317a 	movt	r1, #17274	; 0x437a
    e2d4:	f005 f9c4 	bl	13660 <__aeabi_fcmple>
    e2d8:	4603      	mov	r3, r0
    e2da:	2b00      	cmp	r3, #0
    e2dc:	d005      	beq.n	e2ea <auto_nav+0xf4a>
    e2de:	f64b 035c 	movw	r3, #47196	; 0xb85c
    e2e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2e6:	681a      	ldr	r2, [r3, #0]
    e2e8:	e003      	b.n	e2f2 <auto_nav+0xf52>
    e2ea:	f04f 0200 	mov.w	r2, #0
    e2ee:	f2c4 327a 	movt	r2, #17274	; 0x437a
    e2f2:	f64b 035c 	movw	r3, #47196	; 0xb85c
    e2f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2fa:	601a      	str	r2, [r3, #0]
    e2fc:	f64b 035c 	movw	r3, #47196	; 0xb85c
    e300:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e304:	681b      	ldr	r3, [r3, #0]
    e306:	4618      	mov	r0, r3
    e308:	f04f 0100 	mov.w	r1, #0
    e30c:	f2cc 317a 	movt	r1, #50042	; 0xc37a
    e310:	f005 f9b0 	bl	13674 <__aeabi_fcmpge>
    e314:	4603      	mov	r3, r0
    e316:	2b00      	cmp	r3, #0
    e318:	d005      	beq.n	e326 <auto_nav+0xf86>
    e31a:	f64b 035c 	movw	r3, #47196	; 0xb85c
    e31e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e322:	681a      	ldr	r2, [r3, #0]
    e324:	e003      	b.n	e32e <auto_nav+0xf8e>
    e326:	f04f 0200 	mov.w	r2, #0
    e32a:	f2cc 327a 	movt	r2, #50042	; 0xc37a
    e32e:	f64b 035c 	movw	r3, #47196	; 0xb85c
    e332:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e336:	601a      	str	r2, [r3, #0]
    e338:	f24b 53c0 	movw	r3, #46528	; 0xb5c0
    e33c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e340:	889b      	ldrh	r3, [r3, #4]
    e342:	84bb      	strh	r3, [r7, #36]	; 0x24
    e344:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
    e348:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
    e34c:	dc04      	bgt.n	e358 <auto_nav+0xfb8>
    e34e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
    e352:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
    e356:	da7e      	bge.n	e456 <auto_nav+0x10b6>
    e358:	f64b 0360 	movw	r3, #47200	; 0xb860
    e35c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e360:	681b      	ldr	r3, [r3, #0]
    e362:	4618      	mov	r0, r3
    e364:	f004 fb40 	bl	129e8 <__aeabi_f2d>
    e368:	4604      	mov	r4, r0
    e36a:	460d      	mov	r5, r1
    e36c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
    e370:	4618      	mov	r0, r3
    e372:	f004 ff79 	bl	13268 <__aeabi_i2f>
    e376:	4603      	mov	r3, r0
    e378:	4618      	mov	r0, r3
    e37a:	f04f 0100 	mov.w	r1, #0
    e37e:	f2c4 6116 	movt	r1, #17942	; 0x4616
    e382:	f005 f879 	bl	13478 <__aeabi_fdiv>
    e386:	4603      	mov	r3, r0
    e388:	4618      	mov	r0, r3
    e38a:	f004 fb2d 	bl	129e8 <__aeabi_f2d>
    e38e:	4602      	mov	r2, r0
    e390:	460b      	mov	r3, r1
    e392:	4610      	mov	r0, r2
    e394:	4619      	mov	r1, r3
    e396:	f04f 0200 	mov.w	r2, #0
    e39a:	f04f 0300 	mov.w	r3, #0
    e39e:	f2cc 0334 	movt	r3, #49204	; 0xc034
    e3a2:	f004 fb75 	bl	12a90 <__aeabi_dmul>
    e3a6:	4602      	mov	r2, r0
    e3a8:	460b      	mov	r3, r1
    e3aa:	4610      	mov	r0, r2
    e3ac:	4619      	mov	r1, r3
    e3ae:	f04f 0200 	mov.w	r2, #0
    e3b2:	f04f 0300 	mov.w	r3, #0
    e3b6:	f004 f9b9 	bl	1272c <__adddf3>
    e3ba:	4602      	mov	r2, r0
    e3bc:	460b      	mov	r3, r1
    e3be:	4620      	mov	r0, r4
    e3c0:	4629      	mov	r1, r5
    e3c2:	f004 f9b3 	bl	1272c <__adddf3>
    e3c6:	4602      	mov	r2, r0
    e3c8:	460b      	mov	r3, r1
    e3ca:	4610      	mov	r0, r2
    e3cc:	4619      	mov	r1, r3
    e3ce:	f004 fe41 	bl	13054 <__aeabi_d2f>
    e3d2:	4602      	mov	r2, r0
    e3d4:	f64b 0360 	movw	r3, #47200	; 0xb860
    e3d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3dc:	601a      	str	r2, [r3, #0]
    e3de:	f64b 0360 	movw	r3, #47200	; 0xb860
    e3e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3e6:	681b      	ldr	r3, [r3, #0]
    e3e8:	4618      	mov	r0, r3
    e3ea:	f04f 0100 	mov.w	r1, #0
    e3ee:	f2c4 317a 	movt	r1, #17274	; 0x437a
    e3f2:	f005 f935 	bl	13660 <__aeabi_fcmple>
    e3f6:	4603      	mov	r3, r0
    e3f8:	2b00      	cmp	r3, #0
    e3fa:	d005      	beq.n	e408 <auto_nav+0x1068>
    e3fc:	f64b 0360 	movw	r3, #47200	; 0xb860
    e400:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e404:	681a      	ldr	r2, [r3, #0]
    e406:	e003      	b.n	e410 <auto_nav+0x1070>
    e408:	f04f 0200 	mov.w	r2, #0
    e40c:	f2c4 327a 	movt	r2, #17274	; 0x437a
    e410:	f64b 0360 	movw	r3, #47200	; 0xb860
    e414:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e418:	601a      	str	r2, [r3, #0]
    e41a:	f64b 0360 	movw	r3, #47200	; 0xb860
    e41e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e422:	681b      	ldr	r3, [r3, #0]
    e424:	4618      	mov	r0, r3
    e426:	f04f 0100 	mov.w	r1, #0
    e42a:	f2cc 317a 	movt	r1, #50042	; 0xc37a
    e42e:	f005 f921 	bl	13674 <__aeabi_fcmpge>
    e432:	4603      	mov	r3, r0
    e434:	2b00      	cmp	r3, #0
    e436:	d005      	beq.n	e444 <auto_nav+0x10a4>
    e438:	f64b 0360 	movw	r3, #47200	; 0xb860
    e43c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e440:	681a      	ldr	r2, [r3, #0]
    e442:	e003      	b.n	e44c <auto_nav+0x10ac>
    e444:	f04f 0200 	mov.w	r2, #0
    e448:	f2cc 327a 	movt	r2, #50042	; 0xc37a
    e44c:	f64b 0360 	movw	r3, #47200	; 0xb860
    e450:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e454:	601a      	str	r2, [r3, #0]
    e456:	f24b 439d 	movw	r3, #46237	; 0xb49d
    e45a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e45e:	2203      	movs	r2, #3
    e460:	701a      	strb	r2, [r3, #0]
    e462:	f24b 53c0 	movw	r3, #46528	; 0xb5c0
    e466:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e46a:	885b      	ldrh	r3, [r3, #2]
    e46c:	847b      	strh	r3, [r7, #34]	; 0x22
    e46e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
    e472:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
    e476:	dc04      	bgt.n	e482 <auto_nav+0x10e2>
    e478:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
    e47c:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
    e480:	da70      	bge.n	e564 <auto_nav+0x11c4>
    e482:	f240 133c 	movw	r3, #316	; 0x13c
    e486:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e48a:	681b      	ldr	r3, [r3, #0]
    e48c:	4618      	mov	r0, r3
    e48e:	f004 faab 	bl	129e8 <__aeabi_f2d>
    e492:	4604      	mov	r4, r0
    e494:	460d      	mov	r5, r1
    e496:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
    e49a:	4618      	mov	r0, r3
    e49c:	f004 fee4 	bl	13268 <__aeabi_i2f>
    e4a0:	4603      	mov	r3, r0
    e4a2:	4618      	mov	r0, r3
    e4a4:	f04f 0100 	mov.w	r1, #0
    e4a8:	f2c4 6116 	movt	r1, #17942	; 0x4616
    e4ac:	f004 ffe4 	bl	13478 <__aeabi_fdiv>
    e4b0:	4603      	mov	r3, r0
    e4b2:	4618      	mov	r0, r3
    e4b4:	f004 fa98 	bl	129e8 <__aeabi_f2d>
    e4b8:	4602      	mov	r2, r0
    e4ba:	460b      	mov	r3, r1
    e4bc:	f04f 0000 	mov.w	r0, #0
    e4c0:	f04f 0100 	mov.w	r1, #0
    e4c4:	f004 f930 	bl	12728 <__aeabi_dsub>
    e4c8:	4602      	mov	r2, r0
    e4ca:	460b      	mov	r3, r1
    e4cc:	4620      	mov	r0, r4
    e4ce:	4629      	mov	r1, r5
    e4d0:	f004 f92c 	bl	1272c <__adddf3>
    e4d4:	4602      	mov	r2, r0
    e4d6:	460b      	mov	r3, r1
    e4d8:	4610      	mov	r0, r2
    e4da:	4619      	mov	r1, r3
    e4dc:	f004 fdba 	bl	13054 <__aeabi_d2f>
    e4e0:	4602      	mov	r2, r0
    e4e2:	f240 133c 	movw	r3, #316	; 0x13c
    e4e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4ea:	601a      	str	r2, [r3, #0]
    e4ec:	f240 133c 	movw	r3, #316	; 0x13c
    e4f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4f4:	681b      	ldr	r3, [r3, #0]
    e4f6:	4618      	mov	r0, r3
    e4f8:	f04f 0100 	mov.w	r1, #0
    e4fc:	f2c4 312f 	movt	r1, #17199	; 0x432f
    e500:	f005 f8b8 	bl	13674 <__aeabi_fcmpge>
    e504:	4603      	mov	r3, r0
    e506:	2b00      	cmp	r3, #0
    e508:	d005      	beq.n	e516 <auto_nav+0x1176>
    e50a:	f240 133c 	movw	r3, #316	; 0x13c
    e50e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e512:	681a      	ldr	r2, [r3, #0]
    e514:	e003      	b.n	e51e <auto_nav+0x117e>
    e516:	f04f 0200 	mov.w	r2, #0
    e51a:	f2c4 322f 	movt	r2, #17199	; 0x432f
    e51e:	f240 133c 	movw	r3, #316	; 0x13c
    e522:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e526:	601a      	str	r2, [r3, #0]
    e528:	f240 133c 	movw	r3, #316	; 0x13c
    e52c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e530:	681b      	ldr	r3, [r3, #0]
    e532:	4618      	mov	r0, r3
    e534:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    e538:	f2c4 3189 	movt	r1, #17289	; 0x4389
    e53c:	f005 f890 	bl	13660 <__aeabi_fcmple>
    e540:	4603      	mov	r3, r0
    e542:	2b00      	cmp	r3, #0
    e544:	d005      	beq.n	e552 <auto_nav+0x11b2>
    e546:	f240 133c 	movw	r3, #316	; 0x13c
    e54a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e54e:	681a      	ldr	r2, [r3, #0]
    e550:	e003      	b.n	e55a <auto_nav+0x11ba>
    e552:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    e556:	f2c4 3289 	movt	r2, #17289	; 0x4389
    e55a:	f240 133c 	movw	r3, #316	; 0x13c
    e55e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e562:	601a      	str	r2, [r3, #0]
    e564:	f64b 2370 	movw	r3, #47728	; 0xba70
    e568:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e56c:	681a      	ldr	r2, [r3, #0]
    e56e:	f64b 0360 	movw	r3, #47200	; 0xb860
    e572:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e576:	681b      	ldr	r3, [r3, #0]
    e578:	4610      	mov	r0, r2
    e57a:	4619      	mov	r1, r3
    e57c:	f004 fdbe 	bl	130fc <__aeabi_fsub>
    e580:	4603      	mov	r3, r0
    e582:	4618      	mov	r0, r3
    e584:	f004 fa30 	bl	129e8 <__aeabi_f2d>
    e588:	4604      	mov	r4, r0
    e58a:	460d      	mov	r5, r1
    e58c:	f64b 236c 	movw	r3, #47724	; 0xba6c
    e590:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e594:	681a      	ldr	r2, [r3, #0]
    e596:	f64b 035c 	movw	r3, #47196	; 0xb85c
    e59a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e59e:	681b      	ldr	r3, [r3, #0]
    e5a0:	4610      	mov	r0, r2
    e5a2:	4619      	mov	r1, r3
    e5a4:	f004 fdaa 	bl	130fc <__aeabi_fsub>
    e5a8:	4603      	mov	r3, r0
    e5aa:	4618      	mov	r0, r3
    e5ac:	f004 fa1c 	bl	129e8 <__aeabi_f2d>
    e5b0:	4602      	mov	r2, r0
    e5b2:	460b      	mov	r3, r1
    e5b4:	4620      	mov	r0, r4
    e5b6:	4629      	mov	r1, r5
    e5b8:	f002 fa12 	bl	109e0 <pp_atan2>
    e5bc:	4602      	mov	r2, r0
    e5be:	460b      	mov	r3, r1
    e5c0:	4610      	mov	r0, r2
    e5c2:	4619      	mov	r1, r3
    e5c4:	f004 fd46 	bl	13054 <__aeabi_d2f>
    e5c8:	4603      	mov	r3, r0
    e5ca:	61fb      	str	r3, [r7, #28]
    e5cc:	69f8      	ldr	r0, [r7, #28]
    e5ce:	f004 fa0b 	bl	129e8 <__aeabi_f2d>
    e5d2:	4604      	mov	r4, r0
    e5d4:	460d      	mov	r5, r1
    e5d6:	f64b 23a4 	movw	r3, #47780	; 0xbaa4
    e5da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5de:	681b      	ldr	r3, [r3, #0]
    e5e0:	4618      	mov	r0, r3
    e5e2:	f04f 0100 	mov.w	r1, #0
    e5e6:	f2cc 2148 	movt	r1, #49736	; 0xc248
    e5ea:	f004 fe91 	bl	13310 <__aeabi_fmul>
    e5ee:	4603      	mov	r3, r0
    e5f0:	4618      	mov	r0, r3
    e5f2:	f004 f9f9 	bl	129e8 <__aeabi_f2d>
    e5f6:	4602      	mov	r2, r0
    e5f8:	460b      	mov	r3, r1
    e5fa:	f04f 0000 	mov.w	r0, #0
    e5fe:	f04f 0100 	mov.w	r1, #0
    e602:	f2c4 0114 	movt	r1, #16404	; 0x4014
    e606:	f004 fb6d 	bl	12ce4 <__aeabi_ddiv>
    e60a:	4602      	mov	r2, r0
    e60c:	460b      	mov	r3, r1
    e60e:	4620      	mov	r0, r4
    e610:	4629      	mov	r1, r5
    e612:	f004 f88b 	bl	1272c <__adddf3>
    e616:	4602      	mov	r2, r0
    e618:	460b      	mov	r3, r1
    e61a:	4610      	mov	r0, r2
    e61c:	4619      	mov	r1, r3
    e61e:	f004 fd19 	bl	13054 <__aeabi_d2f>
    e622:	4603      	mov	r3, r0
    e624:	61bb      	str	r3, [r7, #24]
    e626:	f64b 035c 	movw	r3, #47196	; 0xb85c
    e62a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e62e:	681b      	ldr	r3, [r3, #0]
    e630:	4618      	mov	r0, r3
    e632:	f004 f9d9 	bl	129e8 <__aeabi_f2d>
    e636:	4604      	mov	r4, r0
    e638:	460d      	mov	r5, r1
    e63a:	69b8      	ldr	r0, [r7, #24]
    e63c:	f004 f9d4 	bl	129e8 <__aeabi_f2d>
    e640:	4602      	mov	r2, r0
    e642:	460b      	mov	r3, r1
    e644:	4610      	mov	r0, r2
    e646:	4619      	mov	r1, r3
    e648:	a3b1      	add	r3, pc, #708	; (adr r3, e910 <auto_nav+0x1570>)
    e64a:	e9d3 2300 	ldrd	r2, r3, [r3]
    e64e:	f004 f86d 	bl	1272c <__adddf3>
    e652:	4602      	mov	r2, r0
    e654:	460b      	mov	r3, r1
    e656:	4610      	mov	r0, r2
    e658:	4619      	mov	r1, r3
    e65a:	f002 fa81 	bl	10b60 <pp_sin>
    e65e:	4602      	mov	r2, r0
    e660:	460b      	mov	r3, r1
    e662:	4610      	mov	r0, r2
    e664:	4619      	mov	r1, r3
    e666:	f04f 0200 	mov.w	r2, #0
    e66a:	f04f 0300 	mov.w	r3, #0
    e66e:	f2c4 0349 	movt	r3, #16457	; 0x4049
    e672:	f004 fa0d 	bl	12a90 <__aeabi_dmul>
    e676:	4602      	mov	r2, r0
    e678:	460b      	mov	r3, r1
    e67a:	4620      	mov	r0, r4
    e67c:	4629      	mov	r1, r5
    e67e:	f004 f855 	bl	1272c <__adddf3>
    e682:	4602      	mov	r2, r0
    e684:	460b      	mov	r3, r1
    e686:	4610      	mov	r0, r2
    e688:	4619      	mov	r1, r3
    e68a:	f004 fce3 	bl	13054 <__aeabi_d2f>
    e68e:	4606      	mov	r6, r0
    e690:	f64b 0360 	movw	r3, #47200	; 0xb860
    e694:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e698:	681b      	ldr	r3, [r3, #0]
    e69a:	4618      	mov	r0, r3
    e69c:	f004 f9a4 	bl	129e8 <__aeabi_f2d>
    e6a0:	4604      	mov	r4, r0
    e6a2:	460d      	mov	r5, r1
    e6a4:	69b8      	ldr	r0, [r7, #24]
    e6a6:	f004 f99f 	bl	129e8 <__aeabi_f2d>
    e6aa:	4602      	mov	r2, r0
    e6ac:	460b      	mov	r3, r1
    e6ae:	4610      	mov	r0, r2
    e6b0:	4619      	mov	r1, r3
    e6b2:	f002 fa55 	bl	10b60 <pp_sin>
    e6b6:	4602      	mov	r2, r0
    e6b8:	460b      	mov	r3, r1
    e6ba:	4610      	mov	r0, r2
    e6bc:	4619      	mov	r1, r3
    e6be:	f04f 0200 	mov.w	r2, #0
    e6c2:	f04f 0300 	mov.w	r3, #0
    e6c6:	f2c4 0349 	movt	r3, #16457	; 0x4049
    e6ca:	f004 f9e1 	bl	12a90 <__aeabi_dmul>
    e6ce:	4602      	mov	r2, r0
    e6d0:	460b      	mov	r3, r1
    e6d2:	4620      	mov	r0, r4
    e6d4:	4629      	mov	r1, r5
    e6d6:	f004 f829 	bl	1272c <__adddf3>
    e6da:	4602      	mov	r2, r0
    e6dc:	460b      	mov	r3, r1
    e6de:	4610      	mov	r0, r2
    e6e0:	4619      	mov	r1, r3
    e6e2:	f004 fcb7 	bl	13054 <__aeabi_d2f>
    e6e6:	4603      	mov	r3, r0
    e6e8:	4630      	mov	r0, r6
    e6ea:	4619      	mov	r1, r3
    e6ec:	f001 f81c 	bl	f728 <fly_to_xy>
    e6f0:	69b8      	ldr	r0, [r7, #24]
    e6f2:	f004 f979 	bl	129e8 <__aeabi_f2d>
    e6f6:	4602      	mov	r2, r0
    e6f8:	460b      	mov	r3, r1
    e6fa:	a185      	add	r1, pc, #532	; (adr r1, e910 <auto_nav+0x1570>)
    e6fc:	e9d1 0100 	ldrd	r0, r1, [r1]
    e700:	f004 f812 	bl	12728 <__aeabi_dsub>
    e704:	4602      	mov	r2, r0
    e706:	460b      	mov	r3, r1
    e708:	4610      	mov	r0, r2
    e70a:	4619      	mov	r1, r3
    e70c:	a382      	add	r3, pc, #520	; (adr r3, e918 <auto_nav+0x1578>)
    e70e:	e9d3 2300 	ldrd	r2, r3, [r3]
    e712:	f004 fae7 	bl	12ce4 <__aeabi_ddiv>
    e716:	4602      	mov	r2, r0
    e718:	460b      	mov	r3, r1
    e71a:	4610      	mov	r0, r2
    e71c:	4619      	mov	r1, r3
    e71e:	f04f 0200 	mov.w	r2, #0
    e722:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    e726:	f2c4 0366 	movt	r3, #16486	; 0x4066
    e72a:	f004 f9b1 	bl	12a90 <__aeabi_dmul>
    e72e:	4602      	mov	r2, r0
    e730:	460b      	mov	r3, r1
    e732:	4610      	mov	r0, r2
    e734:	4619      	mov	r1, r3
    e736:	f004 fc8d 	bl	13054 <__aeabi_d2f>
    e73a:	4602      	mov	r2, r0
    e73c:	f64b 032c 	movw	r3, #47148	; 0xb82c
    e740:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e744:	601a      	str	r2, [r3, #0]
    e746:	e012      	b.n	e76e <auto_nav+0x13ce>
    e748:	f64b 032c 	movw	r3, #47148	; 0xb82c
    e74c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e750:	681b      	ldr	r3, [r3, #0]
    e752:	4618      	mov	r0, r3
    e754:	f04f 0100 	mov.w	r1, #0
    e758:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
    e75c:	f004 fcd0 	bl	13100 <__addsf3>
    e760:	4603      	mov	r3, r0
    e762:	461a      	mov	r2, r3
    e764:	f64b 032c 	movw	r3, #47148	; 0xb82c
    e768:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e76c:	601a      	str	r2, [r3, #0]
    e76e:	f64b 032c 	movw	r3, #47148	; 0xb82c
    e772:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e776:	681b      	ldr	r3, [r3, #0]
    e778:	4618      	mov	r0, r3
    e77a:	f04f 0100 	mov.w	r1, #0
    e77e:	f004 ff65 	bl	1364c <__aeabi_fcmplt>
    e782:	4603      	mov	r3, r0
    e784:	2b00      	cmp	r3, #0
    e786:	d1df      	bne.n	e748 <auto_nav+0x13a8>
    e788:	e012      	b.n	e7b0 <auto_nav+0x1410>
    e78a:	f64b 032c 	movw	r3, #47148	; 0xb82c
    e78e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e792:	681b      	ldr	r3, [r3, #0]
    e794:	4618      	mov	r0, r3
    e796:	f04f 0100 	mov.w	r1, #0
    e79a:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
    e79e:	f004 fcad 	bl	130fc <__aeabi_fsub>
    e7a2:	4603      	mov	r3, r0
    e7a4:	461a      	mov	r2, r3
    e7a6:	f64b 032c 	movw	r3, #47148	; 0xb82c
    e7aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7ae:	601a      	str	r2, [r3, #0]
    e7b0:	f64b 032c 	movw	r3, #47148	; 0xb82c
    e7b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7b8:	681b      	ldr	r3, [r3, #0]
    e7ba:	4618      	mov	r0, r3
    e7bc:	f04f 0100 	mov.w	r1, #0
    e7c0:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
    e7c4:	f004 ff56 	bl	13674 <__aeabi_fcmpge>
    e7c8:	4603      	mov	r3, r0
    e7ca:	2b00      	cmp	r3, #0
    e7cc:	d1dd      	bne.n	e78a <auto_nav+0x13ea>
        return;
    e7ce:	f000 beb9 	b.w	f544 <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
    e7d2:	f64b 0310 	movw	r3, #47120	; 0xb810
    e7d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7da:	781b      	ldrb	r3, [r3, #0]
    e7dc:	2b01      	cmp	r3, #1
    e7de:	f040 86b1 	bne.w	f544 <auto_nav+0x21a4>
    {
        nav_stage = 1;
    e7e2:	f64b 0310 	movw	r3, #47120	; 0xb810
    e7e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7ea:	2201      	movs	r2, #1
    e7ec:	701a      	strb	r2, [r3, #0]
        NextBlock()
    e7ee:	f64b 0311 	movw	r3, #47121	; 0xb811
    e7f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7f6:	781b      	ldrb	r3, [r3, #0]
    e7f8:	3301      	adds	r3, #1
    e7fa:	b2da      	uxtb	r2, r3
    e7fc:	f64b 0311 	movw	r3, #47121	; 0xb811
    e800:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e804:	701a      	strb	r2, [r3, #0]
    e806:	f64b 0310 	movw	r3, #47120	; 0xb810
    e80a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e80e:	2200      	movs	r2, #0
    e810:	701a      	strb	r2, [r3, #0]
    e812:	f64b 0326 	movw	r3, #47142	; 0xb826
    e816:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e81a:	2200      	movs	r2, #0
    e81c:	801a      	strh	r2, [r3, #0]
    e81e:	f64b 236c 	movw	r3, #47724	; 0xba6c
    e822:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e826:	681a      	ldr	r2, [r3, #0]
    e828:	f64b 0314 	movw	r3, #47124	; 0xb814
    e82c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e830:	601a      	str	r2, [r3, #0]
    e832:	f64b 2370 	movw	r3, #47728	; 0xba70
    e836:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e83a:	681a      	ldr	r2, [r3, #0]
    e83c:	f64b 0318 	movw	r3, #47128	; 0xb818
    e840:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e844:	601a      	str	r2, [r3, #0]
    e846:	f64b 0324 	movw	r3, #47140	; 0xb824
    e84a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e84e:	2200      	movs	r2, #0
    e850:	801a      	strh	r2, [r3, #0]
    e852:	f64b 0328 	movw	r3, #47144	; 0xb828
    e856:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e85a:	f04f 0200 	mov.w	r2, #0
    e85e:	601a      	str	r2, [r3, #0]
    e860:	f000 be70 	b.w	f544 <auto_nav+0x21a4>
    }
    else { }
}
else if (nav_block == 4)
    e864:	f64b 0311 	movw	r3, #47121	; 0xb811
    e868:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e86c:	781b      	ldrb	r3, [r3, #0]
    e86e:	2b04      	cmp	r3, #4
    e870:	f040 8202 	bne.w	ec78 <auto_nav+0x18d8>
{
    nav_block = 4;
    e874:	f64b 0311 	movw	r3, #47121	; 0xb811
    e878:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e87c:	2204      	movs	r2, #4
    e87e:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(5) }
    e880:	f24b 43a0 	movw	r3, #46240	; 0xb4a0
    e884:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e888:	781b      	ldrb	r3, [r3, #0]
    e88a:	2b00      	cmp	r3, #0
    e88c:	d007      	beq.n	e89e <auto_nav+0x14fe>
    e88e:	f24b 43a0 	movw	r3, #46240	; 0xb4a0
    e892:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e896:	2200      	movs	r2, #0
    e898:	701a      	strb	r2, [r3, #0]
    e89a:	2301      	movs	r3, #1
    e89c:	e000      	b.n	e8a0 <auto_nav+0x1500>
    e89e:	2300      	movs	r3, #0
    e8a0:	2b00      	cmp	r3, #0
    e8a2:	d03d      	beq.n	e920 <auto_nav+0x1580>
    e8a4:	f64b 0311 	movw	r3, #47121	; 0xb811
    e8a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8ac:	2205      	movs	r2, #5
    e8ae:	701a      	strb	r2, [r3, #0]
    e8b0:	f64b 0310 	movw	r3, #47120	; 0xb810
    e8b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8b8:	2200      	movs	r2, #0
    e8ba:	701a      	strb	r2, [r3, #0]
    e8bc:	f64b 0326 	movw	r3, #47142	; 0xb826
    e8c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8c4:	2200      	movs	r2, #0
    e8c6:	801a      	strh	r2, [r3, #0]
    e8c8:	f64b 236c 	movw	r3, #47724	; 0xba6c
    e8cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8d0:	681a      	ldr	r2, [r3, #0]
    e8d2:	f64b 0314 	movw	r3, #47124	; 0xb814
    e8d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8da:	601a      	str	r2, [r3, #0]
    e8dc:	f64b 2370 	movw	r3, #47728	; 0xba70
    e8e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8e4:	681a      	ldr	r2, [r3, #0]
    e8e6:	f64b 0318 	movw	r3, #47128	; 0xb818
    e8ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8ee:	601a      	str	r2, [r3, #0]
    e8f0:	f64b 0324 	movw	r3, #47140	; 0xb824
    e8f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8f8:	2200      	movs	r2, #0
    e8fa:	801a      	strh	r2, [r3, #0]
    e8fc:	f64b 0328 	movw	r3, #47144	; 0xb828
    e900:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e904:	f04f 0200 	mov.w	r2, #0
    e908:	601a      	str	r2, [r3, #0]
    e90a:	f000 be1b 	b.w	f544 <auto_nav+0x21a4>
    e90e:	bf00      	nop
    e910:	54442d18 	.word	0x54442d18
    e914:	3ff921fb 	.word	0x3ff921fb
    e918:	54442d18 	.word	0x54442d18
    e91c:	400921fb 	.word	0x400921fb
    if(nav_stage == 0)
    e920:	f64b 0310 	movw	r3, #47120	; 0xb810
    e924:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e928:	781b      	ldrb	r3, [r3, #0]
    e92a:	2b00      	cmp	r3, #0
    e92c:	f040 815b 	bne.w	ebe6 <auto_nav+0x1846>
    {
        nav_stage = 0;
    e930:	f64b 0310 	movw	r3, #47120	; 0xb810
    e934:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e938:	2200      	movs	r2, #0
    e93a:	701a      	strb	r2, [r3, #0]
        auto_pitch = FALSE;
    e93c:	f24b 439f 	movw	r3, #46239	; 0xb49f
    e940:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e944:	2200      	movs	r2, #0
    e946:	701a      	strb	r2, [r3, #0]
        nav_pitch = 0.000000;
    e948:	f64b 033c 	movw	r3, #47164	; 0xb83c
    e94c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e950:	f04f 0200 	mov.w	r2, #0
    e954:	601a      	str	r2, [r3, #0]
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
    e956:	f24b 439d 	movw	r3, #46237	; 0xb49d
    e95a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e95e:	2203      	movs	r2, #3
    e960:	701a      	strb	r2, [r3, #0]
        desired_altitude = waypoints[0].a;
    e962:	f240 1340 	movw	r3, #320	; 0x140
    e966:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e96a:	689a      	ldr	r2, [r3, #8]
    e96c:	f240 133c 	movw	r3, #316	; 0x13c
    e970:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e974:	601a      	str	r2, [r3, #0]
        pre_climb = 0.;
    e976:	f64b 0304 	movw	r3, #47108	; 0xb804
    e97a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e97e:	f04f 0200 	mov.w	r2, #0
    e982:	601a      	str	r2, [r3, #0]
        Circle(0, 150);
    e984:	f64b 2370 	movw	r3, #47728	; 0xba70
    e988:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e98c:	681a      	ldr	r2, [r3, #0]
    e98e:	f240 1340 	movw	r3, #320	; 0x140
    e992:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e996:	685b      	ldr	r3, [r3, #4]
    e998:	4610      	mov	r0, r2
    e99a:	4619      	mov	r1, r3
    e99c:	f004 fbae 	bl	130fc <__aeabi_fsub>
    e9a0:	4603      	mov	r3, r0
    e9a2:	4618      	mov	r0, r3
    e9a4:	f004 f820 	bl	129e8 <__aeabi_f2d>
    e9a8:	4604      	mov	r4, r0
    e9aa:	460d      	mov	r5, r1
    e9ac:	f64b 236c 	movw	r3, #47724	; 0xba6c
    e9b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9b4:	681a      	ldr	r2, [r3, #0]
    e9b6:	f240 1340 	movw	r3, #320	; 0x140
    e9ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9be:	681b      	ldr	r3, [r3, #0]
    e9c0:	4610      	mov	r0, r2
    e9c2:	4619      	mov	r1, r3
    e9c4:	f004 fb9a 	bl	130fc <__aeabi_fsub>
    e9c8:	4603      	mov	r3, r0
    e9ca:	4618      	mov	r0, r3
    e9cc:	f004 f80c 	bl	129e8 <__aeabi_f2d>
    e9d0:	4602      	mov	r2, r0
    e9d2:	460b      	mov	r3, r1
    e9d4:	4620      	mov	r0, r4
    e9d6:	4629      	mov	r1, r5
    e9d8:	f002 f802 	bl	109e0 <pp_atan2>
    e9dc:	4602      	mov	r2, r0
    e9de:	460b      	mov	r3, r1
    e9e0:	4610      	mov	r0, r2
    e9e2:	4619      	mov	r1, r3
    e9e4:	f004 fb36 	bl	13054 <__aeabi_d2f>
    e9e8:	4603      	mov	r3, r0
    e9ea:	617b      	str	r3, [r7, #20]
    e9ec:	6978      	ldr	r0, [r7, #20]
    e9ee:	f003 fffb 	bl	129e8 <__aeabi_f2d>
    e9f2:	4604      	mov	r4, r0
    e9f4:	460d      	mov	r5, r1
    e9f6:	f64b 23a4 	movw	r3, #47780	; 0xbaa4
    e9fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9fe:	681b      	ldr	r3, [r3, #0]
    ea00:	4618      	mov	r0, r3
    ea02:	f04f 0100 	mov.w	r1, #0
    ea06:	f2cc 3116 	movt	r1, #49942	; 0xc316
    ea0a:	f004 fc81 	bl	13310 <__aeabi_fmul>
    ea0e:	4603      	mov	r3, r0
    ea10:	4618      	mov	r0, r3
    ea12:	f003 ffe9 	bl	129e8 <__aeabi_f2d>
    ea16:	4602      	mov	r2, r0
    ea18:	460b      	mov	r3, r1
    ea1a:	f04f 0000 	mov.w	r0, #0
    ea1e:	f04f 0100 	mov.w	r1, #0
    ea22:	f2c4 0114 	movt	r1, #16404	; 0x4014
    ea26:	f004 f95d 	bl	12ce4 <__aeabi_ddiv>
    ea2a:	4602      	mov	r2, r0
    ea2c:	460b      	mov	r3, r1
    ea2e:	4620      	mov	r0, r4
    ea30:	4629      	mov	r1, r5
    ea32:	f003 fe7b 	bl	1272c <__adddf3>
    ea36:	4602      	mov	r2, r0
    ea38:	460b      	mov	r3, r1
    ea3a:	4610      	mov	r0, r2
    ea3c:	4619      	mov	r1, r3
    ea3e:	f004 fb09 	bl	13054 <__aeabi_d2f>
    ea42:	4603      	mov	r3, r0
    ea44:	613b      	str	r3, [r7, #16]
    ea46:	f240 1340 	movw	r3, #320	; 0x140
    ea4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea4e:	681b      	ldr	r3, [r3, #0]
    ea50:	4618      	mov	r0, r3
    ea52:	f003 ffc9 	bl	129e8 <__aeabi_f2d>
    ea56:	4604      	mov	r4, r0
    ea58:	460d      	mov	r5, r1
    ea5a:	6938      	ldr	r0, [r7, #16]
    ea5c:	f003 ffc4 	bl	129e8 <__aeabi_f2d>
    ea60:	4602      	mov	r2, r0
    ea62:	460b      	mov	r3, r1
    ea64:	4610      	mov	r0, r2
    ea66:	4619      	mov	r1, r3
    ea68:	a3af      	add	r3, pc, #700	; (adr r3, ed28 <auto_nav+0x1988>)
    ea6a:	e9d3 2300 	ldrd	r2, r3, [r3]
    ea6e:	f003 fe5d 	bl	1272c <__adddf3>
    ea72:	4602      	mov	r2, r0
    ea74:	460b      	mov	r3, r1
    ea76:	4610      	mov	r0, r2
    ea78:	4619      	mov	r1, r3
    ea7a:	f002 f871 	bl	10b60 <pp_sin>
    ea7e:	4602      	mov	r2, r0
    ea80:	460b      	mov	r3, r1
    ea82:	4610      	mov	r0, r2
    ea84:	4619      	mov	r1, r3
    ea86:	a3aa      	add	r3, pc, #680	; (adr r3, ed30 <auto_nav+0x1990>)
    ea88:	e9d3 2300 	ldrd	r2, r3, [r3]
    ea8c:	f004 f800 	bl	12a90 <__aeabi_dmul>
    ea90:	4602      	mov	r2, r0
    ea92:	460b      	mov	r3, r1
    ea94:	4620      	mov	r0, r4
    ea96:	4629      	mov	r1, r5
    ea98:	f003 fe48 	bl	1272c <__adddf3>
    ea9c:	4602      	mov	r2, r0
    ea9e:	460b      	mov	r3, r1
    eaa0:	4610      	mov	r0, r2
    eaa2:	4619      	mov	r1, r3
    eaa4:	f004 fad6 	bl	13054 <__aeabi_d2f>
    eaa8:	4606      	mov	r6, r0
    eaaa:	f240 1340 	movw	r3, #320	; 0x140
    eaae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eab2:	685b      	ldr	r3, [r3, #4]
    eab4:	4618      	mov	r0, r3
    eab6:	f003 ff97 	bl	129e8 <__aeabi_f2d>
    eaba:	4604      	mov	r4, r0
    eabc:	460d      	mov	r5, r1
    eabe:	6938      	ldr	r0, [r7, #16]
    eac0:	f003 ff92 	bl	129e8 <__aeabi_f2d>
    eac4:	4602      	mov	r2, r0
    eac6:	460b      	mov	r3, r1
    eac8:	4610      	mov	r0, r2
    eaca:	4619      	mov	r1, r3
    eacc:	f002 f848 	bl	10b60 <pp_sin>
    ead0:	4602      	mov	r2, r0
    ead2:	460b      	mov	r3, r1
    ead4:	4610      	mov	r0, r2
    ead6:	4619      	mov	r1, r3
    ead8:	a395      	add	r3, pc, #596	; (adr r3, ed30 <auto_nav+0x1990>)
    eada:	e9d3 2300 	ldrd	r2, r3, [r3]
    eade:	f003 ffd7 	bl	12a90 <__aeabi_dmul>
    eae2:	4602      	mov	r2, r0
    eae4:	460b      	mov	r3, r1
    eae6:	4620      	mov	r0, r4
    eae8:	4629      	mov	r1, r5
    eaea:	f003 fe1f 	bl	1272c <__adddf3>
    eaee:	4602      	mov	r2, r0
    eaf0:	460b      	mov	r3, r1
    eaf2:	4610      	mov	r0, r2
    eaf4:	4619      	mov	r1, r3
    eaf6:	f004 faad 	bl	13054 <__aeabi_d2f>
    eafa:	4603      	mov	r3, r0
    eafc:	4630      	mov	r0, r6
    eafe:	4619      	mov	r1, r3
    eb00:	f000 fe12 	bl	f728 <fly_to_xy>
    eb04:	6938      	ldr	r0, [r7, #16]
    eb06:	f003 ff6f 	bl	129e8 <__aeabi_f2d>
    eb0a:	4602      	mov	r2, r0
    eb0c:	460b      	mov	r3, r1
    eb0e:	a186      	add	r1, pc, #536	; (adr r1, ed28 <auto_nav+0x1988>)
    eb10:	e9d1 0100 	ldrd	r0, r1, [r1]
    eb14:	f003 fe08 	bl	12728 <__aeabi_dsub>
    eb18:	4602      	mov	r2, r0
    eb1a:	460b      	mov	r3, r1
    eb1c:	4610      	mov	r0, r2
    eb1e:	4619      	mov	r1, r3
    eb20:	a385      	add	r3, pc, #532	; (adr r3, ed38 <auto_nav+0x1998>)
    eb22:	e9d3 2300 	ldrd	r2, r3, [r3]
    eb26:	f004 f8dd 	bl	12ce4 <__aeabi_ddiv>
    eb2a:	4602      	mov	r2, r0
    eb2c:	460b      	mov	r3, r1
    eb2e:	4610      	mov	r0, r2
    eb30:	4619      	mov	r1, r3
    eb32:	f04f 0200 	mov.w	r2, #0
    eb36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    eb3a:	f2c4 0366 	movt	r3, #16486	; 0x4066
    eb3e:	f003 ffa7 	bl	12a90 <__aeabi_dmul>
    eb42:	4602      	mov	r2, r0
    eb44:	460b      	mov	r3, r1
    eb46:	4610      	mov	r0, r2
    eb48:	4619      	mov	r1, r3
    eb4a:	f004 fa83 	bl	13054 <__aeabi_d2f>
    eb4e:	4602      	mov	r2, r0
    eb50:	f64b 032c 	movw	r3, #47148	; 0xb82c
    eb54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb58:	601a      	str	r2, [r3, #0]
    eb5a:	e012      	b.n	eb82 <auto_nav+0x17e2>
    eb5c:	f64b 032c 	movw	r3, #47148	; 0xb82c
    eb60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb64:	681b      	ldr	r3, [r3, #0]
    eb66:	4618      	mov	r0, r3
    eb68:	f04f 0100 	mov.w	r1, #0
    eb6c:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
    eb70:	f004 fac6 	bl	13100 <__addsf3>
    eb74:	4603      	mov	r3, r0
    eb76:	461a      	mov	r2, r3
    eb78:	f64b 032c 	movw	r3, #47148	; 0xb82c
    eb7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb80:	601a      	str	r2, [r3, #0]
    eb82:	f64b 032c 	movw	r3, #47148	; 0xb82c
    eb86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb8a:	681b      	ldr	r3, [r3, #0]
    eb8c:	4618      	mov	r0, r3
    eb8e:	f04f 0100 	mov.w	r1, #0
    eb92:	f004 fd5b 	bl	1364c <__aeabi_fcmplt>
    eb96:	4603      	mov	r3, r0
    eb98:	2b00      	cmp	r3, #0
    eb9a:	d1df      	bne.n	eb5c <auto_nav+0x17bc>
    eb9c:	e012      	b.n	ebc4 <auto_nav+0x1824>
    eb9e:	f64b 032c 	movw	r3, #47148	; 0xb82c
    eba2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eba6:	681b      	ldr	r3, [r3, #0]
    eba8:	4618      	mov	r0, r3
    ebaa:	f04f 0100 	mov.w	r1, #0
    ebae:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
    ebb2:	f004 faa3 	bl	130fc <__aeabi_fsub>
    ebb6:	4603      	mov	r3, r0
    ebb8:	461a      	mov	r2, r3
    ebba:	f64b 032c 	movw	r3, #47148	; 0xb82c
    ebbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebc2:	601a      	str	r2, [r3, #0]
    ebc4:	f64b 032c 	movw	r3, #47148	; 0xb82c
    ebc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebcc:	681b      	ldr	r3, [r3, #0]
    ebce:	4618      	mov	r0, r3
    ebd0:	f04f 0100 	mov.w	r1, #0
    ebd4:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
    ebd8:	f004 fd4c 	bl	13674 <__aeabi_fcmpge>
    ebdc:	4603      	mov	r3, r0
    ebde:	2b00      	cmp	r3, #0
    ebe0:	d1dd      	bne.n	eb9e <auto_nav+0x17fe>
        return;
    ebe2:	f000 bcaf 	b.w	f544 <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
    ebe6:	f64b 0310 	movw	r3, #47120	; 0xb810
    ebea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebee:	781b      	ldrb	r3, [r3, #0]
    ebf0:	2b01      	cmp	r3, #1
    ebf2:	f040 84a7 	bne.w	f544 <auto_nav+0x21a4>
    {
        nav_stage =1;
    ebf6:	f64b 0310 	movw	r3, #47120	; 0xb810
    ebfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebfe:	2201      	movs	r2, #1
    ec00:	701a      	strb	r2, [r3, #0]
        NextBlock()
    ec02:	f64b 0311 	movw	r3, #47121	; 0xb811
    ec06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec0a:	781b      	ldrb	r3, [r3, #0]
    ec0c:	3301      	adds	r3, #1
    ec0e:	b2da      	uxtb	r2, r3
    ec10:	f64b 0311 	movw	r3, #47121	; 0xb811
    ec14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec18:	701a      	strb	r2, [r3, #0]
    ec1a:	f64b 0310 	movw	r3, #47120	; 0xb810
    ec1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec22:	2200      	movs	r2, #0
    ec24:	701a      	strb	r2, [r3, #0]
    ec26:	f64b 0326 	movw	r3, #47142	; 0xb826
    ec2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec2e:	2200      	movs	r2, #0
    ec30:	801a      	strh	r2, [r3, #0]
    ec32:	f64b 236c 	movw	r3, #47724	; 0xba6c
    ec36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec3a:	681a      	ldr	r2, [r3, #0]
    ec3c:	f64b 0314 	movw	r3, #47124	; 0xb814
    ec40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec44:	601a      	str	r2, [r3, #0]
    ec46:	f64b 2370 	movw	r3, #47728	; 0xba70
    ec4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec4e:	681a      	ldr	r2, [r3, #0]
    ec50:	f64b 0318 	movw	r3, #47128	; 0xb818
    ec54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec58:	601a      	str	r2, [r3, #0]
    ec5a:	f64b 0324 	movw	r3, #47140	; 0xb824
    ec5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec62:	2200      	movs	r2, #0
    ec64:	801a      	strh	r2, [r3, #0]
    ec66:	f64b 0328 	movw	r3, #47144	; 0xb828
    ec6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec6e:	f04f 0200 	mov.w	r2, #0
    ec72:	601a      	str	r2, [r3, #0]
    ec74:	f000 bc66 	b.w	f544 <auto_nav+0x21a4>
    }
    else {}
}
else if (nav_block == 5)
    ec78:	f64b 0311 	movw	r3, #47121	; 0xb811
    ec7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec80:	781b      	ldrb	r3, [r3, #0]
    ec82:	2b05      	cmp	r3, #5
    ec84:	f040 845e 	bne.w	f544 <auto_nav+0x21a4>
{
    nav_block = 5;
    ec88:	f64b 0311 	movw	r3, #47121	; 0xb811
    ec8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec90:	2205      	movs	r2, #5
    ec92:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(1) }
    ec94:	f24b 43a0 	movw	r3, #46240	; 0xb4a0
    ec98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec9c:	781b      	ldrb	r3, [r3, #0]
    ec9e:	2b00      	cmp	r3, #0
    eca0:	d007      	beq.n	ecb2 <auto_nav+0x1912>
    eca2:	f24b 43a0 	movw	r3, #46240	; 0xb4a0
    eca6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecaa:	2200      	movs	r2, #0
    ecac:	701a      	strb	r2, [r3, #0]
    ecae:	2301      	movs	r3, #1
    ecb0:	e000      	b.n	ecb4 <auto_nav+0x1914>
    ecb2:	2300      	movs	r3, #0
    ecb4:	2b00      	cmp	r3, #0
    ecb6:	d043      	beq.n	ed40 <auto_nav+0x19a0>
    ecb8:	f64b 0311 	movw	r3, #47121	; 0xb811
    ecbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecc0:	2201      	movs	r2, #1
    ecc2:	701a      	strb	r2, [r3, #0]
    ecc4:	f64b 0310 	movw	r3, #47120	; 0xb810
    ecc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eccc:	2200      	movs	r2, #0
    ecce:	701a      	strb	r2, [r3, #0]
    ecd0:	f64b 0326 	movw	r3, #47142	; 0xb826
    ecd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecd8:	2200      	movs	r2, #0
    ecda:	801a      	strh	r2, [r3, #0]
    ecdc:	f64b 236c 	movw	r3, #47724	; 0xba6c
    ece0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ece4:	681a      	ldr	r2, [r3, #0]
    ece6:	f64b 0314 	movw	r3, #47124	; 0xb814
    ecea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecee:	601a      	str	r2, [r3, #0]
    ecf0:	f64b 2370 	movw	r3, #47728	; 0xba70
    ecf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecf8:	681a      	ldr	r2, [r3, #0]
    ecfa:	f64b 0318 	movw	r3, #47128	; 0xb818
    ecfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed02:	601a      	str	r2, [r3, #0]
    ed04:	f64b 0324 	movw	r3, #47140	; 0xb824
    ed08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed0c:	2200      	movs	r2, #0
    ed0e:	801a      	strh	r2, [r3, #0]
    ed10:	f64b 0328 	movw	r3, #47144	; 0xb828
    ed14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed18:	f04f 0200 	mov.w	r2, #0
    ed1c:	601a      	str	r2, [r3, #0]
    ed1e:	f000 bc11 	b.w	f544 <auto_nav+0x21a4>
    ed22:	bf00      	nop
    ed24:	f3af 8000 	nop.w
    ed28:	54442d18 	.word	0x54442d18
    ed2c:	3ff921fb 	.word	0x3ff921fb
    ed30:	00000000 	.word	0x00000000
    ed34:	4062c000 	.word	0x4062c000
    ed38:	54442d18 	.word	0x54442d18
    ed3c:	400921fb 	.word	0x400921fb
    if(nav_stage == 0) {
    ed40:	f64b 0310 	movw	r3, #47120	; 0xb810
    ed44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed48:	781b      	ldrb	r3, [r3, #0]
    ed4a:	2b00      	cmp	r3, #0
    ed4c:	d133      	bne.n	edb6 <auto_nav+0x1a16>
       Label(while_7) 
       nav_stage = 0;
    ed4e:	f64b 0310 	movw	r3, #47120	; 0xb810
    ed52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed56:	2200      	movs	r2, #0
    ed58:	701a      	strb	r2, [r3, #0]
      if (! (TRUE)) Goto(endwhile_8) else NextStage();}
    ed5a:	f64b 0310 	movw	r3, #47120	; 0xb810
    ed5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed62:	781b      	ldrb	r3, [r3, #0]
    ed64:	3301      	adds	r3, #1
    ed66:	b2da      	uxtb	r2, r3
    ed68:	f64b 0310 	movw	r3, #47120	; 0xb810
    ed6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed70:	701a      	strb	r2, [r3, #0]
    ed72:	f64b 236c 	movw	r3, #47724	; 0xba6c
    ed76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed7a:	681a      	ldr	r2, [r3, #0]
    ed7c:	f64b 0314 	movw	r3, #47124	; 0xb814
    ed80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed84:	601a      	str	r2, [r3, #0]
    ed86:	f64b 2370 	movw	r3, #47728	; 0xba70
    ed8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed8e:	681a      	ldr	r2, [r3, #0]
    ed90:	f64b 0318 	movw	r3, #47128	; 0xb818
    ed94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed98:	601a      	str	r2, [r3, #0]
    ed9a:	f64b 0324 	movw	r3, #47140	; 0xb824
    ed9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eda2:	2200      	movs	r2, #0
    eda4:	801a      	strh	r2, [r3, #0]
    eda6:	f64b 0328 	movw	r3, #47144	; 0xb828
    edaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edae:	f04f 0200 	mov.w	r2, #0
    edb2:	601a      	str	r2, [r3, #0]
    edb4:	e3c6      	b.n	f544 <auto_nav+0x21a4>
     
    else if (nav_stage == 1)
    edb6:	f64b 0310 	movw	r3, #47120	; 0xb810
    edba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edbe:	781b      	ldrb	r3, [r3, #0]
    edc0:	2b01      	cmp	r3, #1
    edc2:	f040 81b5 	bne.w	f130 <auto_nav+0x1d90>
    {
        nav_stage =1;
    edc6:	f64b 0310 	movw	r3, #47120	; 0xb810
    edca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edce:	2201      	movs	r2, #1
    edd0:	701a      	strb	r2, [r3, #0]
        auto_pitch = FALSE;
    edd2:	f24b 439f 	movw	r3, #46239	; 0xb49f
    edd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edda:	2200      	movs	r2, #0
    eddc:	701a      	strb	r2, [r3, #0]
        nav_pitch = 0.000000;
    edde:	f64b 033c 	movw	r3, #47164	; 0xb83c
    ede2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ede6:	f04f 0200 	mov.w	r2, #0
    edea:	601a      	str	r2, [r3, #0]
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
    edec:	f24b 439d 	movw	r3, #46237	; 0xb49d
    edf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edf4:	2203      	movs	r2, #3
    edf6:	701a      	strb	r2, [r3, #0]
        desired_altitude = waypoints[1].a;
    edf8:	f240 1340 	movw	r3, #320	; 0x140
    edfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee00:	695a      	ldr	r2, [r3, #20]
    ee02:	f240 133c 	movw	r3, #316	; 0x13c
    ee06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee0a:	601a      	str	r2, [r3, #0]
        pre_climb = 0.;
    ee0c:	f64b 0304 	movw	r3, #47108	; 0xb804
    ee10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee14:	f04f 0200 	mov.w	r2, #0
    ee18:	601a      	str	r2, [r3, #0]
        Circle(1, 100);
    ee1a:	f64b 2370 	movw	r3, #47728	; 0xba70
    ee1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee22:	681a      	ldr	r2, [r3, #0]
    ee24:	f240 1340 	movw	r3, #320	; 0x140
    ee28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee2c:	691b      	ldr	r3, [r3, #16]
    ee2e:	4610      	mov	r0, r2
    ee30:	4619      	mov	r1, r3
    ee32:	f004 f963 	bl	130fc <__aeabi_fsub>
    ee36:	4603      	mov	r3, r0
    ee38:	4618      	mov	r0, r3
    ee3a:	f003 fdd5 	bl	129e8 <__aeabi_f2d>
    ee3e:	4604      	mov	r4, r0
    ee40:	460d      	mov	r5, r1
    ee42:	f64b 236c 	movw	r3, #47724	; 0xba6c
    ee46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee4a:	681a      	ldr	r2, [r3, #0]
    ee4c:	f240 1340 	movw	r3, #320	; 0x140
    ee50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee54:	68db      	ldr	r3, [r3, #12]
    ee56:	4610      	mov	r0, r2
    ee58:	4619      	mov	r1, r3
    ee5a:	f004 f94f 	bl	130fc <__aeabi_fsub>
    ee5e:	4603      	mov	r3, r0
    ee60:	4618      	mov	r0, r3
    ee62:	f003 fdc1 	bl	129e8 <__aeabi_f2d>
    ee66:	4602      	mov	r2, r0
    ee68:	460b      	mov	r3, r1
    ee6a:	4620      	mov	r0, r4
    ee6c:	4629      	mov	r1, r5
    ee6e:	f001 fdb7 	bl	109e0 <pp_atan2>
    ee72:	4602      	mov	r2, r0
    ee74:	460b      	mov	r3, r1
    ee76:	4610      	mov	r0, r2
    ee78:	4619      	mov	r1, r3
    ee7a:	f004 f8eb 	bl	13054 <__aeabi_d2f>
    ee7e:	4603      	mov	r3, r0
    ee80:	60fb      	str	r3, [r7, #12]
    ee82:	68f8      	ldr	r0, [r7, #12]
    ee84:	f003 fdb0 	bl	129e8 <__aeabi_f2d>
    ee88:	4604      	mov	r4, r0
    ee8a:	460d      	mov	r5, r1
    ee8c:	f64b 23a4 	movw	r3, #47780	; 0xbaa4
    ee90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee94:	681b      	ldr	r3, [r3, #0]
    ee96:	4618      	mov	r0, r3
    ee98:	f04f 0100 	mov.w	r1, #0
    ee9c:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
    eea0:	f004 fa36 	bl	13310 <__aeabi_fmul>
    eea4:	4603      	mov	r3, r0
    eea6:	4618      	mov	r0, r3
    eea8:	f003 fd9e 	bl	129e8 <__aeabi_f2d>
    eeac:	4602      	mov	r2, r0
    eeae:	460b      	mov	r3, r1
    eeb0:	f04f 0000 	mov.w	r0, #0
    eeb4:	f04f 0100 	mov.w	r1, #0
    eeb8:	f2c4 0114 	movt	r1, #16404	; 0x4014
    eebc:	f003 ff12 	bl	12ce4 <__aeabi_ddiv>
    eec0:	4602      	mov	r2, r0
    eec2:	460b      	mov	r3, r1
    eec4:	4620      	mov	r0, r4
    eec6:	4629      	mov	r1, r5
    eec8:	f003 fc30 	bl	1272c <__adddf3>
    eecc:	4602      	mov	r2, r0
    eece:	460b      	mov	r3, r1
    eed0:	4610      	mov	r0, r2
    eed2:	4619      	mov	r1, r3
    eed4:	f004 f8be 	bl	13054 <__aeabi_d2f>
    eed8:	4603      	mov	r3, r0
    eeda:	60bb      	str	r3, [r7, #8]
    eedc:	f240 1340 	movw	r3, #320	; 0x140
    eee0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eee4:	68db      	ldr	r3, [r3, #12]
    eee6:	4618      	mov	r0, r3
    eee8:	f003 fd7e 	bl	129e8 <__aeabi_f2d>
    eeec:	4604      	mov	r4, r0
    eeee:	460d      	mov	r5, r1
    eef0:	68b8      	ldr	r0, [r7, #8]
    eef2:	f003 fd79 	bl	129e8 <__aeabi_f2d>
    eef6:	4602      	mov	r2, r0
    eef8:	460b      	mov	r3, r1
    eefa:	4610      	mov	r0, r2
    eefc:	4619      	mov	r1, r3
    eefe:	a388      	add	r3, pc, #544	; (adr r3, f120 <auto_nav+0x1d80>)
    ef00:	e9d3 2300 	ldrd	r2, r3, [r3]
    ef04:	f003 fc12 	bl	1272c <__adddf3>
    ef08:	4602      	mov	r2, r0
    ef0a:	460b      	mov	r3, r1
    ef0c:	4610      	mov	r0, r2
    ef0e:	4619      	mov	r1, r3
    ef10:	f001 fe26 	bl	10b60 <pp_sin>
    ef14:	4602      	mov	r2, r0
    ef16:	460b      	mov	r3, r1
    ef18:	4610      	mov	r0, r2
    ef1a:	4619      	mov	r1, r3
    ef1c:	f04f 0200 	mov.w	r2, #0
    ef20:	f04f 0300 	mov.w	r3, #0
    ef24:	f2c4 0359 	movt	r3, #16473	; 0x4059
    ef28:	f003 fdb2 	bl	12a90 <__aeabi_dmul>
    ef2c:	4602      	mov	r2, r0
    ef2e:	460b      	mov	r3, r1
    ef30:	4620      	mov	r0, r4
    ef32:	4629      	mov	r1, r5
    ef34:	f003 fbfa 	bl	1272c <__adddf3>
    ef38:	4602      	mov	r2, r0
    ef3a:	460b      	mov	r3, r1
    ef3c:	4610      	mov	r0, r2
    ef3e:	4619      	mov	r1, r3
    ef40:	f004 f888 	bl	13054 <__aeabi_d2f>
    ef44:	4606      	mov	r6, r0
    ef46:	f240 1340 	movw	r3, #320	; 0x140
    ef4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef4e:	691b      	ldr	r3, [r3, #16]
    ef50:	4618      	mov	r0, r3
    ef52:	f003 fd49 	bl	129e8 <__aeabi_f2d>
    ef56:	4604      	mov	r4, r0
    ef58:	460d      	mov	r5, r1
    ef5a:	68b8      	ldr	r0, [r7, #8]
    ef5c:	f003 fd44 	bl	129e8 <__aeabi_f2d>
    ef60:	4602      	mov	r2, r0
    ef62:	460b      	mov	r3, r1
    ef64:	4610      	mov	r0, r2
    ef66:	4619      	mov	r1, r3
    ef68:	f001 fdfa 	bl	10b60 <pp_sin>
    ef6c:	4602      	mov	r2, r0
    ef6e:	460b      	mov	r3, r1
    ef70:	4610      	mov	r0, r2
    ef72:	4619      	mov	r1, r3
    ef74:	f04f 0200 	mov.w	r2, #0
    ef78:	f04f 0300 	mov.w	r3, #0
    ef7c:	f2c4 0359 	movt	r3, #16473	; 0x4059
    ef80:	f003 fd86 	bl	12a90 <__aeabi_dmul>
    ef84:	4602      	mov	r2, r0
    ef86:	460b      	mov	r3, r1
    ef88:	4620      	mov	r0, r4
    ef8a:	4629      	mov	r1, r5
    ef8c:	f003 fbce 	bl	1272c <__adddf3>
    ef90:	4602      	mov	r2, r0
    ef92:	460b      	mov	r3, r1
    ef94:	4610      	mov	r0, r2
    ef96:	4619      	mov	r1, r3
    ef98:	f004 f85c 	bl	13054 <__aeabi_d2f>
    ef9c:	4603      	mov	r3, r0
    ef9e:	4630      	mov	r0, r6
    efa0:	4619      	mov	r1, r3
    efa2:	f000 fbc1 	bl	f728 <fly_to_xy>
    efa6:	68b8      	ldr	r0, [r7, #8]
    efa8:	f003 fd1e 	bl	129e8 <__aeabi_f2d>
    efac:	4602      	mov	r2, r0
    efae:	460b      	mov	r3, r1
    efb0:	a15b      	add	r1, pc, #364	; (adr r1, f120 <auto_nav+0x1d80>)
    efb2:	e9d1 0100 	ldrd	r0, r1, [r1]
    efb6:	f003 fbb7 	bl	12728 <__aeabi_dsub>
    efba:	4602      	mov	r2, r0
    efbc:	460b      	mov	r3, r1
    efbe:	4610      	mov	r0, r2
    efc0:	4619      	mov	r1, r3
    efc2:	a359      	add	r3, pc, #356	; (adr r3, f128 <auto_nav+0x1d88>)
    efc4:	e9d3 2300 	ldrd	r2, r3, [r3]
    efc8:	f003 fe8c 	bl	12ce4 <__aeabi_ddiv>
    efcc:	4602      	mov	r2, r0
    efce:	460b      	mov	r3, r1
    efd0:	4610      	mov	r0, r2
    efd2:	4619      	mov	r1, r3
    efd4:	f04f 0200 	mov.w	r2, #0
    efd8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    efdc:	f2c4 0366 	movt	r3, #16486	; 0x4066
    efe0:	f003 fd56 	bl	12a90 <__aeabi_dmul>
    efe4:	4602      	mov	r2, r0
    efe6:	460b      	mov	r3, r1
    efe8:	4610      	mov	r0, r2
    efea:	4619      	mov	r1, r3
    efec:	f004 f832 	bl	13054 <__aeabi_d2f>
    eff0:	4602      	mov	r2, r0
    eff2:	f64b 032c 	movw	r3, #47148	; 0xb82c
    eff6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    effa:	601a      	str	r2, [r3, #0]
    effc:	e012      	b.n	f024 <auto_nav+0x1c84>
    effe:	f64b 032c 	movw	r3, #47148	; 0xb82c
    f002:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f006:	681b      	ldr	r3, [r3, #0]
    f008:	4618      	mov	r0, r3
    f00a:	f04f 0100 	mov.w	r1, #0
    f00e:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
    f012:	f004 f875 	bl	13100 <__addsf3>
    f016:	4603      	mov	r3, r0
    f018:	461a      	mov	r2, r3
    f01a:	f64b 032c 	movw	r3, #47148	; 0xb82c
    f01e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f022:	601a      	str	r2, [r3, #0]
    f024:	f64b 032c 	movw	r3, #47148	; 0xb82c
    f028:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f02c:	681b      	ldr	r3, [r3, #0]
    f02e:	4618      	mov	r0, r3
    f030:	f04f 0100 	mov.w	r1, #0
    f034:	f004 fb0a 	bl	1364c <__aeabi_fcmplt>
    f038:	4603      	mov	r3, r0
    f03a:	2b00      	cmp	r3, #0
    f03c:	d1df      	bne.n	effe <auto_nav+0x1c5e>
    f03e:	e012      	b.n	f066 <auto_nav+0x1cc6>
    f040:	f64b 032c 	movw	r3, #47148	; 0xb82c
    f044:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f048:	681b      	ldr	r3, [r3, #0]
    f04a:	4618      	mov	r0, r3
    f04c:	f04f 0100 	mov.w	r1, #0
    f050:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
    f054:	f004 f852 	bl	130fc <__aeabi_fsub>
    f058:	4603      	mov	r3, r0
    f05a:	461a      	mov	r2, r3
    f05c:	f64b 032c 	movw	r3, #47148	; 0xb82c
    f060:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f064:	601a      	str	r2, [r3, #0]
    f066:	f64b 032c 	movw	r3, #47148	; 0xb82c
    f06a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f06e:	681b      	ldr	r3, [r3, #0]
    f070:	4618      	mov	r0, r3
    f072:	f04f 0100 	mov.w	r1, #0
    f076:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
    f07a:	f004 fafb 	bl	13674 <__aeabi_fcmpge>
    f07e:	4603      	mov	r3, r0
    f080:	2b00      	cmp	r3, #0
    f082:	d1dd      	bne.n	f040 <auto_nav+0x1ca0>
        if (Qdr(0)) NextStage();
    f084:	f64b 032c 	movw	r3, #47148	; 0xb82c
    f088:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f08c:	681b      	ldr	r3, [r3, #0]
    f08e:	4618      	mov	r0, r3
    f090:	f04f 0100 	mov.w	r1, #0
    f094:	f004 faf8 	bl	13688 <__aeabi_fcmpgt>
    f098:	4603      	mov	r3, r0
    f09a:	2b00      	cmp	r3, #0
    f09c:	d100      	bne.n	f0a0 <auto_nav+0x1d00>
        return;
    f09e:	e251      	b.n	f544 <auto_nav+0x21a4>
        nav_pitch = 0.000000;
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
        desired_altitude = waypoints[1].a;
        pre_climb = 0.;
        Circle(1, 100);
        if (Qdr(0)) NextStage();
    f0a0:	f64b 032c 	movw	r3, #47148	; 0xb82c
    f0a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0a8:	681b      	ldr	r3, [r3, #0]
    f0aa:	4618      	mov	r0, r3
    f0ac:	f04f 0100 	mov.w	r1, #0
    f0b0:	f2c4 1120 	movt	r1, #16672	; 0x4120
    f0b4:	f004 faca 	bl	1364c <__aeabi_fcmplt>
    f0b8:	4603      	mov	r3, r0
    f0ba:	2b00      	cmp	r3, #0
    f0bc:	d100      	bne.n	f0c0 <auto_nav+0x1d20>
        return;
    f0be:	e241      	b.n	f544 <auto_nav+0x21a4>
        nav_pitch = 0.000000;
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
        desired_altitude = waypoints[1].a;
        pre_climb = 0.;
        Circle(1, 100);
        if (Qdr(0)) NextStage();
    f0c0:	f64b 0310 	movw	r3, #47120	; 0xb810
    f0c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0c8:	781b      	ldrb	r3, [r3, #0]
    f0ca:	3301      	adds	r3, #1
    f0cc:	b2da      	uxtb	r2, r3
    f0ce:	f64b 0310 	movw	r3, #47120	; 0xb810
    f0d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0d6:	701a      	strb	r2, [r3, #0]
    f0d8:	f64b 236c 	movw	r3, #47724	; 0xba6c
    f0dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0e0:	681a      	ldr	r2, [r3, #0]
    f0e2:	f64b 0314 	movw	r3, #47124	; 0xb814
    f0e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0ea:	601a      	str	r2, [r3, #0]
    f0ec:	f64b 2370 	movw	r3, #47728	; 0xba70
    f0f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0f4:	681a      	ldr	r2, [r3, #0]
    f0f6:	f64b 0318 	movw	r3, #47128	; 0xb818
    f0fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0fe:	601a      	str	r2, [r3, #0]
    f100:	f64b 0324 	movw	r3, #47140	; 0xb824
    f104:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f108:	2200      	movs	r2, #0
    f10a:	801a      	strh	r2, [r3, #0]
    f10c:	f64b 0328 	movw	r3, #47144	; 0xb828
    f110:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f114:	f04f 0200 	mov.w	r2, #0
    f118:	601a      	str	r2, [r3, #0]
    f11a:	e213      	b.n	f544 <auto_nav+0x21a4>
    f11c:	f3af 8000 	nop.w
    f120:	54442d18 	.word	0x54442d18
    f124:	3ff921fb 	.word	0x3ff921fb
    f128:	54442d18 	.word	0x54442d18
    f12c:	400921fb 	.word	0x400921fb
        return;
    }
    else if (nav_stage == 2)
    f130:	f64b 0310 	movw	r3, #47120	; 0xb810
    f134:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f138:	781b      	ldrb	r3, [r3, #0]
    f13a:	2b02      	cmp	r3, #2
    f13c:	f040 81ad 	bne.w	f49a <auto_nav+0x20fa>
    {
         nav_stage = 2;
    f140:	f64b 0310 	movw	r3, #47120	; 0xb810
    f144:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f148:	2202      	movs	r2, #2
    f14a:	701a      	strb	r2, [r3, #0]
          auto_pitch = FALSE;
    f14c:	f24b 439f 	movw	r3, #46239	; 0xb49f
    f150:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f154:	2200      	movs	r2, #0
    f156:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.000000;
    f158:	f64b 033c 	movw	r3, #47164	; 0xb83c
    f15c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f160:	f04f 0200 	mov.w	r2, #0
    f164:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
    f166:	f24b 439d 	movw	r3, #46237	; 0xb49d
    f16a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f16e:	2203      	movs	r2, #3
    f170:	701a      	strb	r2, [r3, #0]
          desired_altitude = waypoints[4].a;
    f172:	f240 1340 	movw	r3, #320	; 0x140
    f176:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f17a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    f17c:	f240 133c 	movw	r3, #316	; 0x13c
    f180:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f184:	601a      	str	r2, [r3, #0]
          pre_climb = 0.;
    f186:	f64b 0304 	movw	r3, #47108	; 0xb804
    f18a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f18e:	f04f 0200 	mov.w	r2, #0
    f192:	601a      	str	r2, [r3, #0]
          Circle(4, 100);
    f194:	f64b 2370 	movw	r3, #47728	; 0xba70
    f198:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f19c:	681a      	ldr	r2, [r3, #0]
    f19e:	f240 1340 	movw	r3, #320	; 0x140
    f1a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    f1a8:	4610      	mov	r0, r2
    f1aa:	4619      	mov	r1, r3
    f1ac:	f003 ffa6 	bl	130fc <__aeabi_fsub>
    f1b0:	4603      	mov	r3, r0
    f1b2:	4618      	mov	r0, r3
    f1b4:	f003 fc18 	bl	129e8 <__aeabi_f2d>
    f1b8:	4604      	mov	r4, r0
    f1ba:	460d      	mov	r5, r1
    f1bc:	f64b 236c 	movw	r3, #47724	; 0xba6c
    f1c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1c4:	681a      	ldr	r2, [r3, #0]
    f1c6:	f240 1340 	movw	r3, #320	; 0x140
    f1ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    f1d0:	4610      	mov	r0, r2
    f1d2:	4619      	mov	r1, r3
    f1d4:	f003 ff92 	bl	130fc <__aeabi_fsub>
    f1d8:	4603      	mov	r3, r0
    f1da:	4618      	mov	r0, r3
    f1dc:	f003 fc04 	bl	129e8 <__aeabi_f2d>
    f1e0:	4602      	mov	r2, r0
    f1e2:	460b      	mov	r3, r1
    f1e4:	4620      	mov	r0, r4
    f1e6:	4629      	mov	r1, r5
    f1e8:	f001 fbfa 	bl	109e0 <pp_atan2>
    f1ec:	4602      	mov	r2, r0
    f1ee:	460b      	mov	r3, r1
    f1f0:	4610      	mov	r0, r2
    f1f2:	4619      	mov	r1, r3
    f1f4:	f003 ff2e 	bl	13054 <__aeabi_d2f>
    f1f8:	4603      	mov	r3, r0
    f1fa:	607b      	str	r3, [r7, #4]
    f1fc:	6878      	ldr	r0, [r7, #4]
    f1fe:	f003 fbf3 	bl	129e8 <__aeabi_f2d>
    f202:	4604      	mov	r4, r0
    f204:	460d      	mov	r5, r1
    f206:	f64b 23a4 	movw	r3, #47780	; 0xbaa4
    f20a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f20e:	681b      	ldr	r3, [r3, #0]
    f210:	4618      	mov	r0, r3
    f212:	f04f 0100 	mov.w	r1, #0
    f216:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
    f21a:	f004 f879 	bl	13310 <__aeabi_fmul>
    f21e:	4603      	mov	r3, r0
    f220:	4618      	mov	r0, r3
    f222:	f003 fbe1 	bl	129e8 <__aeabi_f2d>
    f226:	4602      	mov	r2, r0
    f228:	460b      	mov	r3, r1
    f22a:	f04f 0000 	mov.w	r0, #0
    f22e:	f04f 0100 	mov.w	r1, #0
    f232:	f2c4 0114 	movt	r1, #16404	; 0x4014
    f236:	f003 fd55 	bl	12ce4 <__aeabi_ddiv>
    f23a:	4602      	mov	r2, r0
    f23c:	460b      	mov	r3, r1
    f23e:	4620      	mov	r0, r4
    f240:	4629      	mov	r1, r5
    f242:	f003 fa73 	bl	1272c <__adddf3>
    f246:	4602      	mov	r2, r0
    f248:	460b      	mov	r3, r1
    f24a:	4610      	mov	r0, r2
    f24c:	4619      	mov	r1, r3
    f24e:	f003 ff01 	bl	13054 <__aeabi_d2f>
    f252:	4603      	mov	r3, r0
    f254:	603b      	str	r3, [r7, #0]
    f256:	f240 1340 	movw	r3, #320	; 0x140
    f25a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f25e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    f260:	4618      	mov	r0, r3
    f262:	f003 fbc1 	bl	129e8 <__aeabi_f2d>
    f266:	4604      	mov	r4, r0
    f268:	460d      	mov	r5, r1
    f26a:	6838      	ldr	r0, [r7, #0]
    f26c:	f003 fbbc 	bl	129e8 <__aeabi_f2d>
    f270:	4602      	mov	r2, r0
    f272:	460b      	mov	r3, r1
    f274:	4610      	mov	r0, r2
    f276:	4619      	mov	r1, r3
    f278:	a3b5      	add	r3, pc, #724	; (adr r3, f550 <auto_nav+0x21b0>)
    f27a:	e9d3 2300 	ldrd	r2, r3, [r3]
    f27e:	f003 fa55 	bl	1272c <__adddf3>
    f282:	4602      	mov	r2, r0
    f284:	460b      	mov	r3, r1
    f286:	4610      	mov	r0, r2
    f288:	4619      	mov	r1, r3
    f28a:	f001 fc69 	bl	10b60 <pp_sin>
    f28e:	4602      	mov	r2, r0
    f290:	460b      	mov	r3, r1
    f292:	4610      	mov	r0, r2
    f294:	4619      	mov	r1, r3
    f296:	f04f 0200 	mov.w	r2, #0
    f29a:	f04f 0300 	mov.w	r3, #0
    f29e:	f2c4 0359 	movt	r3, #16473	; 0x4059
    f2a2:	f003 fbf5 	bl	12a90 <__aeabi_dmul>
    f2a6:	4602      	mov	r2, r0
    f2a8:	460b      	mov	r3, r1
    f2aa:	4620      	mov	r0, r4
    f2ac:	4629      	mov	r1, r5
    f2ae:	f003 fa3d 	bl	1272c <__adddf3>
    f2b2:	4602      	mov	r2, r0
    f2b4:	460b      	mov	r3, r1
    f2b6:	4610      	mov	r0, r2
    f2b8:	4619      	mov	r1, r3
    f2ba:	f003 fecb 	bl	13054 <__aeabi_d2f>
    f2be:	4606      	mov	r6, r0
    f2c0:	f240 1340 	movw	r3, #320	; 0x140
    f2c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    f2ca:	4618      	mov	r0, r3
    f2cc:	f003 fb8c 	bl	129e8 <__aeabi_f2d>
    f2d0:	4604      	mov	r4, r0
    f2d2:	460d      	mov	r5, r1
    f2d4:	6838      	ldr	r0, [r7, #0]
    f2d6:	f003 fb87 	bl	129e8 <__aeabi_f2d>
    f2da:	4602      	mov	r2, r0
    f2dc:	460b      	mov	r3, r1
    f2de:	4610      	mov	r0, r2
    f2e0:	4619      	mov	r1, r3
    f2e2:	f001 fc3d 	bl	10b60 <pp_sin>
    f2e6:	4602      	mov	r2, r0
    f2e8:	460b      	mov	r3, r1
    f2ea:	4610      	mov	r0, r2
    f2ec:	4619      	mov	r1, r3
    f2ee:	f04f 0200 	mov.w	r2, #0
    f2f2:	f04f 0300 	mov.w	r3, #0
    f2f6:	f2c4 0359 	movt	r3, #16473	; 0x4059
    f2fa:	f003 fbc9 	bl	12a90 <__aeabi_dmul>
    f2fe:	4602      	mov	r2, r0
    f300:	460b      	mov	r3, r1
    f302:	4620      	mov	r0, r4
    f304:	4629      	mov	r1, r5
    f306:	f003 fa11 	bl	1272c <__adddf3>
    f30a:	4602      	mov	r2, r0
    f30c:	460b      	mov	r3, r1
    f30e:	4610      	mov	r0, r2
    f310:	4619      	mov	r1, r3
    f312:	f003 fe9f 	bl	13054 <__aeabi_d2f>
    f316:	4603      	mov	r3, r0
    f318:	4630      	mov	r0, r6
    f31a:	4619      	mov	r1, r3
    f31c:	f000 fa04 	bl	f728 <fly_to_xy>
    f320:	6838      	ldr	r0, [r7, #0]
    f322:	f003 fb61 	bl	129e8 <__aeabi_f2d>
    f326:	4602      	mov	r2, r0
    f328:	460b      	mov	r3, r1
    f32a:	a189      	add	r1, pc, #548	; (adr r1, f550 <auto_nav+0x21b0>)
    f32c:	e9d1 0100 	ldrd	r0, r1, [r1]
    f330:	f003 f9fa 	bl	12728 <__aeabi_dsub>
    f334:	4602      	mov	r2, r0
    f336:	460b      	mov	r3, r1
    f338:	4610      	mov	r0, r2
    f33a:	4619      	mov	r1, r3
    f33c:	a386      	add	r3, pc, #536	; (adr r3, f558 <auto_nav+0x21b8>)
    f33e:	e9d3 2300 	ldrd	r2, r3, [r3]
    f342:	f003 fccf 	bl	12ce4 <__aeabi_ddiv>
    f346:	4602      	mov	r2, r0
    f348:	460b      	mov	r3, r1
    f34a:	4610      	mov	r0, r2
    f34c:	4619      	mov	r1, r3
    f34e:	f04f 0200 	mov.w	r2, #0
    f352:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    f356:	f2c4 0366 	movt	r3, #16486	; 0x4066
    f35a:	f003 fb99 	bl	12a90 <__aeabi_dmul>
    f35e:	4602      	mov	r2, r0
    f360:	460b      	mov	r3, r1
    f362:	4610      	mov	r0, r2
    f364:	4619      	mov	r1, r3
    f366:	f003 fe75 	bl	13054 <__aeabi_d2f>
    f36a:	4602      	mov	r2, r0
    f36c:	f64b 032c 	movw	r3, #47148	; 0xb82c
    f370:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f374:	601a      	str	r2, [r3, #0]
    f376:	e012      	b.n	f39e <auto_nav+0x1ffe>
    f378:	f64b 032c 	movw	r3, #47148	; 0xb82c
    f37c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f380:	681b      	ldr	r3, [r3, #0]
    f382:	4618      	mov	r0, r3
    f384:	f04f 0100 	mov.w	r1, #0
    f388:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
    f38c:	f003 feb8 	bl	13100 <__addsf3>
    f390:	4603      	mov	r3, r0
    f392:	461a      	mov	r2, r3
    f394:	f64b 032c 	movw	r3, #47148	; 0xb82c
    f398:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f39c:	601a      	str	r2, [r3, #0]
    f39e:	f64b 032c 	movw	r3, #47148	; 0xb82c
    f3a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3a6:	681b      	ldr	r3, [r3, #0]
    f3a8:	4618      	mov	r0, r3
    f3aa:	f04f 0100 	mov.w	r1, #0
    f3ae:	f004 f94d 	bl	1364c <__aeabi_fcmplt>
    f3b2:	4603      	mov	r3, r0
    f3b4:	2b00      	cmp	r3, #0
    f3b6:	d1df      	bne.n	f378 <auto_nav+0x1fd8>
    f3b8:	e012      	b.n	f3e0 <auto_nav+0x2040>
    f3ba:	f64b 032c 	movw	r3, #47148	; 0xb82c
    f3be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3c2:	681b      	ldr	r3, [r3, #0]
    f3c4:	4618      	mov	r0, r3
    f3c6:	f04f 0100 	mov.w	r1, #0
    f3ca:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
    f3ce:	f003 fe95 	bl	130fc <__aeabi_fsub>
    f3d2:	4603      	mov	r3, r0
    f3d4:	461a      	mov	r2, r3
    f3d6:	f64b 032c 	movw	r3, #47148	; 0xb82c
    f3da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3de:	601a      	str	r2, [r3, #0]
    f3e0:	f64b 032c 	movw	r3, #47148	; 0xb82c
    f3e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3e8:	681b      	ldr	r3, [r3, #0]
    f3ea:	4618      	mov	r0, r3
    f3ec:	f04f 0100 	mov.w	r1, #0
    f3f0:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
    f3f4:	f004 f93e 	bl	13674 <__aeabi_fcmpge>
    f3f8:	4603      	mov	r3, r0
    f3fa:	2b00      	cmp	r3, #0
    f3fc:	d1dd      	bne.n	f3ba <auto_nav+0x201a>
          if (Qdr(180)) NextStage();
    f3fe:	f64b 032c 	movw	r3, #47148	; 0xb82c
    f402:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f406:	681b      	ldr	r3, [r3, #0]
    f408:	4618      	mov	r0, r3
    f40a:	f04f 0100 	mov.w	r1, #0
    f40e:	f2c4 3134 	movt	r1, #17204	; 0x4334
    f412:	f004 f939 	bl	13688 <__aeabi_fcmpgt>
    f416:	4603      	mov	r3, r0
    f418:	2b00      	cmp	r3, #0
    f41a:	d100      	bne.n	f41e <auto_nav+0x207e>
          return;
    f41c:	e092      	b.n	f544 <auto_nav+0x21a4>
          nav_pitch = 0.000000;
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
          desired_altitude = waypoints[4].a;
          pre_climb = 0.;
          Circle(4, 100);
          if (Qdr(180)) NextStage();
    f41e:	f64b 032c 	movw	r3, #47148	; 0xb82c
    f422:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f426:	681b      	ldr	r3, [r3, #0]
    f428:	4618      	mov	r0, r3
    f42a:	f04f 0100 	mov.w	r1, #0
    f42e:	f2c4 313e 	movt	r1, #17214	; 0x433e
    f432:	f004 f90b 	bl	1364c <__aeabi_fcmplt>
    f436:	4603      	mov	r3, r0
    f438:	2b00      	cmp	r3, #0
    f43a:	d100      	bne.n	f43e <auto_nav+0x209e>
          return;
    f43c:	e082      	b.n	f544 <auto_nav+0x21a4>
          nav_pitch = 0.000000;
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
          desired_altitude = waypoints[4].a;
          pre_climb = 0.;
          Circle(4, 100);
          if (Qdr(180)) NextStage();
    f43e:	f64b 0310 	movw	r3, #47120	; 0xb810
    f442:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f446:	781b      	ldrb	r3, [r3, #0]
    f448:	3301      	adds	r3, #1
    f44a:	b2da      	uxtb	r2, r3
    f44c:	f64b 0310 	movw	r3, #47120	; 0xb810
    f450:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f454:	701a      	strb	r2, [r3, #0]
    f456:	f64b 236c 	movw	r3, #47724	; 0xba6c
    f45a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f45e:	681a      	ldr	r2, [r3, #0]
    f460:	f64b 0314 	movw	r3, #47124	; 0xb814
    f464:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f468:	601a      	str	r2, [r3, #0]
    f46a:	f64b 2370 	movw	r3, #47728	; 0xba70
    f46e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f472:	681a      	ldr	r2, [r3, #0]
    f474:	f64b 0318 	movw	r3, #47128	; 0xb818
    f478:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f47c:	601a      	str	r2, [r3, #0]
    f47e:	f64b 0324 	movw	r3, #47140	; 0xb824
    f482:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f486:	2200      	movs	r2, #0
    f488:	801a      	strh	r2, [r3, #0]
    f48a:	f64b 0328 	movw	r3, #47144	; 0xb828
    f48e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f492:	f04f 0200 	mov.w	r2, #0
    f496:	601a      	str	r2, [r3, #0]
    f498:	e054      	b.n	f544 <auto_nav+0x21a4>
          return;
    }
    else if (nav_stage == 3) 
    f49a:	f64b 0310 	movw	r3, #47120	; 0xb810
    f49e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4a2:	781b      	ldrb	r3, [r3, #0]
    f4a4:	2b03      	cmp	r3, #3
    f4a6:	d106      	bne.n	f4b6 <auto_nav+0x2116>
    {
	  nav_stage = 3;
    f4a8:	f64b 0310 	movw	r3, #47120	; 0xb810
    f4ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4b0:	2203      	movs	r2, #3
    f4b2:	701a      	strb	r2, [r3, #0]
          Goto(while_7)
    f4b4:	e44b      	b.n	ed4e <auto_nav+0x19ae>
    }
    else if (nav_stage == 4)
    f4b6:	f64b 0310 	movw	r3, #47120	; 0xb810
    f4ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4be:	781b      	ldrb	r3, [r3, #0]
    f4c0:	2b04      	cmp	r3, #4
    f4c2:	d13f      	bne.n	f544 <auto_nav+0x21a4>
    {
	Label(endwhile_8)
	nav_stage = 4;
    f4c4:	f64b 0310 	movw	r3, #47120	; 0xb810
    f4c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4cc:	2204      	movs	r2, #4
    f4ce:	701a      	strb	r2, [r3, #0]
        NextBlock()
    f4d0:	f64b 0311 	movw	r3, #47121	; 0xb811
    f4d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4d8:	781b      	ldrb	r3, [r3, #0]
    f4da:	3301      	adds	r3, #1
    f4dc:	b2da      	uxtb	r2, r3
    f4de:	f64b 0311 	movw	r3, #47121	; 0xb811
    f4e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4e6:	701a      	strb	r2, [r3, #0]
    f4e8:	f64b 0310 	movw	r3, #47120	; 0xb810
    f4ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4f0:	2200      	movs	r2, #0
    f4f2:	701a      	strb	r2, [r3, #0]
    f4f4:	f64b 0326 	movw	r3, #47142	; 0xb826
    f4f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4fc:	2200      	movs	r2, #0
    f4fe:	801a      	strh	r2, [r3, #0]
    f500:	f64b 236c 	movw	r3, #47724	; 0xba6c
    f504:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f508:	681a      	ldr	r2, [r3, #0]
    f50a:	f64b 0314 	movw	r3, #47124	; 0xb814
    f50e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f512:	601a      	str	r2, [r3, #0]
    f514:	f64b 2370 	movw	r3, #47728	; 0xba70
    f518:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f51c:	681a      	ldr	r2, [r3, #0]
    f51e:	f64b 0318 	movw	r3, #47128	; 0xb818
    f522:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f526:	601a      	str	r2, [r3, #0]
    f528:	f64b 0324 	movw	r3, #47140	; 0xb824
    f52c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f530:	2200      	movs	r2, #0
    f532:	801a      	strh	r2, [r3, #0]
    f534:	f64b 0328 	movw	r3, #47144	; 0xb828
    f538:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f53c:	f04f 0200 	mov.w	r2, #0
    f540:	601a      	str	r2, [r3, #0]
    f542:	bf00      	nop
    else { }
}
else { }

//#endif
}
    f544:	372c      	adds	r7, #44	; 0x2c
    f546:	46bd      	mov	sp, r7
    f548:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f54a:	bf00      	nop
    f54c:	f3af 8000 	nop.w
    f550:	54442d18 	.word	0x54442d18
    f554:	3ff921fb 	.word	0x3ff921fb
    f558:	54442d18 	.word	0x54442d18
    f55c:	400921fb 	.word	0x400921fb

0000f560 <approaching>:
const uint8_t nb_waypoint = NB_WAYPOINT;

struct point waypoints[NB_WAYPOINT+1] = WAYPOINTS;

static float carrot;
static bool_t approaching(uint8_t wp) {
    f560:	b590      	push	{r4, r7, lr}
    f562:	b087      	sub	sp, #28
    f564:	af00      	add	r7, sp, #0
    f566:	4603      	mov	r3, r0
    f568:	71fb      	strb	r3, [r7, #7]
  float pw_x = waypoints[wp].x - estimator_x;
    f56a:	79f9      	ldrb	r1, [r7, #7]
    f56c:	f240 1240 	movw	r2, #320	; 0x140
    f570:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f574:	460b      	mov	r3, r1
    f576:	005b      	lsls	r3, r3, #1
    f578:	440b      	add	r3, r1
    f57a:	009b      	lsls	r3, r3, #2
    f57c:	4413      	add	r3, r2
    f57e:	681a      	ldr	r2, [r3, #0]
    f580:	f64b 236c 	movw	r3, #47724	; 0xba6c
    f584:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f588:	681b      	ldr	r3, [r3, #0]
    f58a:	4610      	mov	r0, r2
    f58c:	4619      	mov	r1, r3
    f58e:	f003 fdb5 	bl	130fc <__aeabi_fsub>
    f592:	4603      	mov	r3, r0
    f594:	617b      	str	r3, [r7, #20]
  float pw_y = waypoints[wp].y - estimator_y;
    f596:	79f9      	ldrb	r1, [r7, #7]
    f598:	f240 1240 	movw	r2, #320	; 0x140
    f59c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f5a0:	460b      	mov	r3, r1
    f5a2:	005b      	lsls	r3, r3, #1
    f5a4:	440b      	add	r3, r1
    f5a6:	009b      	lsls	r3, r3, #2
    f5a8:	4413      	add	r3, r2
    f5aa:	3304      	adds	r3, #4
    f5ac:	681a      	ldr	r2, [r3, #0]
    f5ae:	f64b 2370 	movw	r3, #47728	; 0xba70
    f5b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5b6:	681b      	ldr	r3, [r3, #0]
    f5b8:	4610      	mov	r0, r2
    f5ba:	4619      	mov	r1, r3
    f5bc:	f003 fd9e 	bl	130fc <__aeabi_fsub>
    f5c0:	4603      	mov	r3, r0
    f5c2:	613b      	str	r3, [r7, #16]
  float scal_prod;//changes for PowerPc Fev-06

  dist2_to_wp = pw_x*pw_x + pw_y *pw_y;
    f5c4:	6978      	ldr	r0, [r7, #20]
    f5c6:	6979      	ldr	r1, [r7, #20]
    f5c8:	f003 fea2 	bl	13310 <__aeabi_fmul>
    f5cc:	4603      	mov	r3, r0
    f5ce:	461c      	mov	r4, r3
    f5d0:	6938      	ldr	r0, [r7, #16]
    f5d2:	6939      	ldr	r1, [r7, #16]
    f5d4:	f003 fe9c 	bl	13310 <__aeabi_fmul>
    f5d8:	4603      	mov	r3, r0
    f5da:	4620      	mov	r0, r4
    f5dc:	4619      	mov	r1, r3
    f5de:	f003 fd8f 	bl	13100 <__addsf3>
    f5e2:	4603      	mov	r3, r0
    f5e4:	461a      	mov	r2, r3
    f5e6:	f64b 0344 	movw	r3, #47172	; 0xb844
    f5ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5ee:	601a      	str	r2, [r3, #0]
  carrot = CARROT * estimator_hspeed_mod;
    f5f0:	f64b 23a4 	movw	r3, #47780	; 0xbaa4
    f5f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5f8:	681b      	ldr	r3, [r3, #0]
    f5fa:	4618      	mov	r0, r3
    f5fc:	f04f 0100 	mov.w	r1, #0
    f600:	f2c4 01a0 	movt	r1, #16544	; 0x40a0
    f604:	f003 fe84 	bl	13310 <__aeabi_fmul>
    f608:	4603      	mov	r3, r0
    f60a:	461a      	mov	r2, r3
    f60c:	f64b 0350 	movw	r3, #47184	; 0xb850
    f610:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f614:	601a      	str	r2, [r3, #0]
  carrot = (carrot < 40 ? 40 : carrot);
    f616:	f64b 0350 	movw	r3, #47184	; 0xb850
    f61a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f61e:	681b      	ldr	r3, [r3, #0]
    f620:	4618      	mov	r0, r3
    f622:	f04f 0100 	mov.w	r1, #0
    f626:	f2c4 2120 	movt	r1, #16928	; 0x4220
    f62a:	f004 f80f 	bl	1364c <__aeabi_fcmplt>
    f62e:	4603      	mov	r3, r0
    f630:	2b00      	cmp	r3, #0
    f632:	d004      	beq.n	f63e <approaching+0xde>
    f634:	f04f 0200 	mov.w	r2, #0
    f638:	f2c4 2220 	movt	r2, #16928	; 0x4220
    f63c:	e004      	b.n	f648 <approaching+0xe8>
    f63e:	f64b 0350 	movw	r3, #47184	; 0xb850
    f642:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f646:	681a      	ldr	r2, [r3, #0]
    f648:	f64b 0350 	movw	r3, #47184	; 0xb850
    f64c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f650:	601a      	str	r2, [r3, #0]
  if (dist2_to_wp < carrot*carrot)
    f652:	f64b 0350 	movw	r3, #47184	; 0xb850
    f656:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f65a:	681a      	ldr	r2, [r3, #0]
    f65c:	f64b 0350 	movw	r3, #47184	; 0xb850
    f660:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f664:	681b      	ldr	r3, [r3, #0]
    f666:	4610      	mov	r0, r2
    f668:	4619      	mov	r1, r3
    f66a:	f003 fe51 	bl	13310 <__aeabi_fmul>
    f66e:	4603      	mov	r3, r0
    f670:	461a      	mov	r2, r3
    f672:	f64b 0344 	movw	r3, #47172	; 0xb844
    f676:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f67a:	681b      	ldr	r3, [r3, #0]
    f67c:	4610      	mov	r0, r2
    f67e:	4619      	mov	r1, r3
    f680:	f004 f802 	bl	13688 <__aeabi_fcmpgt>
    f684:	4603      	mov	r3, r0
    f686:	2b00      	cmp	r3, #0
    f688:	d001      	beq.n	f68e <approaching+0x12e>
    return TRUE;
    f68a:	2301      	movs	r3, #1
    f68c:	e048      	b.n	f720 <approaching+0x1c0>

  scal_prod = (waypoints[wp].x - last_x) * pw_x + (waypoints[wp].y - last_y) * pw_y;
    f68e:	79f9      	ldrb	r1, [r7, #7]
    f690:	f240 1240 	movw	r2, #320	; 0x140
    f694:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f698:	460b      	mov	r3, r1
    f69a:	005b      	lsls	r3, r3, #1
    f69c:	440b      	add	r3, r1
    f69e:	009b      	lsls	r3, r3, #2
    f6a0:	4413      	add	r3, r2
    f6a2:	681a      	ldr	r2, [r3, #0]
    f6a4:	f64b 0314 	movw	r3, #47124	; 0xb814
    f6a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6ac:	681b      	ldr	r3, [r3, #0]
    f6ae:	4610      	mov	r0, r2
    f6b0:	4619      	mov	r1, r3
    f6b2:	f003 fd23 	bl	130fc <__aeabi_fsub>
    f6b6:	4603      	mov	r3, r0
    f6b8:	4618      	mov	r0, r3
    f6ba:	6979      	ldr	r1, [r7, #20]
    f6bc:	f003 fe28 	bl	13310 <__aeabi_fmul>
    f6c0:	4603      	mov	r3, r0
    f6c2:	461c      	mov	r4, r3
    f6c4:	79f9      	ldrb	r1, [r7, #7]
    f6c6:	f240 1240 	movw	r2, #320	; 0x140
    f6ca:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f6ce:	460b      	mov	r3, r1
    f6d0:	005b      	lsls	r3, r3, #1
    f6d2:	440b      	add	r3, r1
    f6d4:	009b      	lsls	r3, r3, #2
    f6d6:	4413      	add	r3, r2
    f6d8:	3304      	adds	r3, #4
    f6da:	681a      	ldr	r2, [r3, #0]
    f6dc:	f64b 0318 	movw	r3, #47128	; 0xb818
    f6e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6e4:	681b      	ldr	r3, [r3, #0]
    f6e6:	4610      	mov	r0, r2
    f6e8:	4619      	mov	r1, r3
    f6ea:	f003 fd07 	bl	130fc <__aeabi_fsub>
    f6ee:	4603      	mov	r3, r0
    f6f0:	4618      	mov	r0, r3
    f6f2:	6939      	ldr	r1, [r7, #16]
    f6f4:	f003 fe0c 	bl	13310 <__aeabi_fmul>
    f6f8:	4603      	mov	r3, r0
    f6fa:	4620      	mov	r0, r4
    f6fc:	4619      	mov	r1, r3
    f6fe:	f003 fcff 	bl	13100 <__addsf3>
    f702:	4603      	mov	r3, r0
    f704:	60fb      	str	r3, [r7, #12]
  
  return (scal_prod < 0);
    f706:	2301      	movs	r3, #1
    f708:	461c      	mov	r4, r3
    f70a:	68f8      	ldr	r0, [r7, #12]
    f70c:	f04f 0100 	mov.w	r1, #0
    f710:	f003 ff9c 	bl	1364c <__aeabi_fcmplt>
    f714:	4603      	mov	r3, r0
    f716:	2b00      	cmp	r3, #0
    f718:	d101      	bne.n	f71e <approaching+0x1be>
    f71a:	2300      	movs	r3, #0
    f71c:	461c      	mov	r4, r3
    f71e:	b2e3      	uxtb	r3, r4
}
    f720:	4618      	mov	r0, r3
    f722:	371c      	adds	r7, #28
    f724:	46bd      	mov	sp, r7
    f726:	bd90      	pop	{r4, r7, pc}

0000f728 <fly_to_xy>:

static inline void fly_to_xy(float x, float y) 
{ 
    f728:	b5b0      	push	{r4, r5, r7, lr}
    f72a:	b082      	sub	sp, #8
    f72c:	af00      	add	r7, sp, #0
    f72e:	6078      	str	r0, [r7, #4]
    f730:	6039      	str	r1, [r7, #0]
  desired_x = x;
    f732:	f64b 0330 	movw	r3, #47152	; 0xb830
    f736:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f73a:	687a      	ldr	r2, [r7, #4]
    f73c:	601a      	str	r2, [r3, #0]
  desired_y = y;
    f73e:	f64b 0334 	movw	r3, #47156	; 0xb834
    f742:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f746:	683a      	ldr	r2, [r7, #0]
    f748:	601a      	str	r2, [r3, #0]
  desired_course = M_PI/2.-atan2(y - estimator_y, x - estimator_x);
    f74a:	f64b 2370 	movw	r3, #47728	; 0xba70
    f74e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f752:	681b      	ldr	r3, [r3, #0]
    f754:	6838      	ldr	r0, [r7, #0]
    f756:	4619      	mov	r1, r3
    f758:	f003 fcd0 	bl	130fc <__aeabi_fsub>
    f75c:	4603      	mov	r3, r0
    f75e:	4618      	mov	r0, r3
    f760:	f003 f942 	bl	129e8 <__aeabi_f2d>
    f764:	4604      	mov	r4, r0
    f766:	460d      	mov	r5, r1
    f768:	f64b 236c 	movw	r3, #47724	; 0xba6c
    f76c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f770:	681b      	ldr	r3, [r3, #0]
    f772:	6878      	ldr	r0, [r7, #4]
    f774:	4619      	mov	r1, r3
    f776:	f003 fcc1 	bl	130fc <__aeabi_fsub>
    f77a:	4603      	mov	r3, r0
    f77c:	4618      	mov	r0, r3
    f77e:	f003 f933 	bl	129e8 <__aeabi_f2d>
    f782:	4602      	mov	r2, r0
    f784:	460b      	mov	r3, r1
    f786:	4620      	mov	r0, r4
    f788:	4629      	mov	r1, r5
    f78a:	f001 f929 	bl	109e0 <pp_atan2>
    f78e:	4602      	mov	r2, r0
    f790:	460b      	mov	r3, r1
    f792:	a10b      	add	r1, pc, #44	; (adr r1, f7c0 <fly_to_xy+0x98>)
    f794:	e9d1 0100 	ldrd	r0, r1, [r1]
    f798:	f002 ffc6 	bl	12728 <__aeabi_dsub>
    f79c:	4602      	mov	r2, r0
    f79e:	460b      	mov	r3, r1
    f7a0:	4610      	mov	r0, r2
    f7a2:	4619      	mov	r1, r3
    f7a4:	f003 fc56 	bl	13054 <__aeabi_d2f>
    f7a8:	4602      	mov	r2, r0
    f7aa:	f24b 73fc 	movw	r3, #47100	; 0xb7fc
    f7ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7b2:	601a      	str	r2, [r3, #0]
}
    f7b4:	3708      	adds	r7, #8
    f7b6:	46bd      	mov	sp, r7
    f7b8:	bdb0      	pop	{r4, r5, r7, pc}
    f7ba:	bf00      	nop
    f7bc:	f3af 8000 	nop.w
    f7c0:	54442d18 	.word	0x54442d18
    f7c4:	3ff921fb 	.word	0x3ff921fb

0000f7c8 <fly_to>:

static void fly_to(uint8_t wp) { 
    f7c8:	b580      	push	{r7, lr}
    f7ca:	b082      	sub	sp, #8
    f7cc:	af00      	add	r7, sp, #0
    f7ce:	4603      	mov	r3, r0
    f7d0:	71fb      	strb	r3, [r7, #7]
  fly_to_xy(waypoints[wp].x, waypoints[wp].y);
    f7d2:	79f9      	ldrb	r1, [r7, #7]
    f7d4:	f240 1240 	movw	r2, #320	; 0x140
    f7d8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f7dc:	460b      	mov	r3, r1
    f7de:	005b      	lsls	r3, r3, #1
    f7e0:	440b      	add	r3, r1
    f7e2:	009b      	lsls	r3, r3, #2
    f7e4:	4413      	add	r3, r2
    f7e6:	6818      	ldr	r0, [r3, #0]
    f7e8:	79f9      	ldrb	r1, [r7, #7]
    f7ea:	f240 1240 	movw	r2, #320	; 0x140
    f7ee:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f7f2:	460b      	mov	r3, r1
    f7f4:	005b      	lsls	r3, r3, #1
    f7f6:	440b      	add	r3, r1
    f7f8:	009b      	lsls	r3, r3, #2
    f7fa:	4413      	add	r3, r2
    f7fc:	3304      	adds	r3, #4
    f7fe:	681b      	ldr	r3, [r3, #0]
    f800:	4619      	mov	r1, r3
    f802:	f7ff ff91 	bl	f728 <fly_to_xy>
}
    f806:	3708      	adds	r7, #8
    f808:	46bd      	mov	sp, r7
    f80a:	bd80      	pop	{r7, pc}

0000f80c <route_to>:

static float alpha, leg;
static void route_to(uint8_t _last_wp, uint8_t wp) 
{
    f80c:	b5b0      	push	{r4, r5, r7, lr}
    f80e:	b088      	sub	sp, #32
    f810:	af00      	add	r7, sp, #0
    f812:	4602      	mov	r2, r0
    f814:	460b      	mov	r3, r1
    f816:	71fa      	strb	r2, [r7, #7]
    f818:	71bb      	strb	r3, [r7, #6]
  float last_wp_x = waypoints[_last_wp].x;
    f81a:	79f9      	ldrb	r1, [r7, #7]
    f81c:	f240 1240 	movw	r2, #320	; 0x140
    f820:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f824:	460b      	mov	r3, r1
    f826:	005b      	lsls	r3, r3, #1
    f828:	440b      	add	r3, r1
    f82a:	009b      	lsls	r3, r3, #2
    f82c:	4413      	add	r3, r2
    f82e:	681b      	ldr	r3, [r3, #0]
    f830:	61fb      	str	r3, [r7, #28]
  float last_wp_y = waypoints[_last_wp].y;
    f832:	79f9      	ldrb	r1, [r7, #7]
    f834:	f240 1240 	movw	r2, #320	; 0x140
    f838:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f83c:	460b      	mov	r3, r1
    f83e:	005b      	lsls	r3, r3, #1
    f840:	440b      	add	r3, r1
    f842:	009b      	lsls	r3, r3, #2
    f844:	4413      	add	r3, r2
    f846:	3304      	adds	r3, #4
    f848:	681b      	ldr	r3, [r3, #0]
    f84a:	61bb      	str	r3, [r7, #24]
  float leg_x = waypoints[wp].x - last_wp_x;
    f84c:	79b9      	ldrb	r1, [r7, #6]
    f84e:	f240 1240 	movw	r2, #320	; 0x140
    f852:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f856:	460b      	mov	r3, r1
    f858:	005b      	lsls	r3, r3, #1
    f85a:	440b      	add	r3, r1
    f85c:	009b      	lsls	r3, r3, #2
    f85e:	4413      	add	r3, r2
    f860:	681b      	ldr	r3, [r3, #0]
    f862:	4618      	mov	r0, r3
    f864:	69f9      	ldr	r1, [r7, #28]
    f866:	f003 fc49 	bl	130fc <__aeabi_fsub>
    f86a:	4603      	mov	r3, r0
    f86c:	617b      	str	r3, [r7, #20]
  float leg_y = waypoints[wp].y - last_wp_y;
    f86e:	79b9      	ldrb	r1, [r7, #6]
    f870:	f240 1240 	movw	r2, #320	; 0x140
    f874:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f878:	460b      	mov	r3, r1
    f87a:	005b      	lsls	r3, r3, #1
    f87c:	440b      	add	r3, r1
    f87e:	009b      	lsls	r3, r3, #2
    f880:	4413      	add	r3, r2
    f882:	3304      	adds	r3, #4
    f884:	681b      	ldr	r3, [r3, #0]
    f886:	4618      	mov	r0, r3
    f888:	69b9      	ldr	r1, [r7, #24]
    f88a:	f003 fc37 	bl	130fc <__aeabi_fsub>
    f88e:	4603      	mov	r3, r0
    f890:	613b      	str	r3, [r7, #16]
  float leg2 = leg_x * leg_x + leg_y * leg_y;
    f892:	6978      	ldr	r0, [r7, #20]
    f894:	6979      	ldr	r1, [r7, #20]
    f896:	f003 fd3b 	bl	13310 <__aeabi_fmul>
    f89a:	4603      	mov	r3, r0
    f89c:	461c      	mov	r4, r3
    f89e:	6938      	ldr	r0, [r7, #16]
    f8a0:	6939      	ldr	r1, [r7, #16]
    f8a2:	f003 fd35 	bl	13310 <__aeabi_fmul>
    f8a6:	4603      	mov	r3, r0
    f8a8:	4620      	mov	r0, r4
    f8aa:	4619      	mov	r1, r3
    f8ac:	f003 fc28 	bl	13100 <__addsf3>
    f8b0:	4603      	mov	r3, r0
    f8b2:	60fb      	str	r3, [r7, #12]
  alpha = ((estimator_x - last_wp_x) * leg_x + (estimator_y - last_wp_y) * leg_y) / leg2;
    f8b4:	f64b 236c 	movw	r3, #47724	; 0xba6c
    f8b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8bc:	681b      	ldr	r3, [r3, #0]
    f8be:	4618      	mov	r0, r3
    f8c0:	69f9      	ldr	r1, [r7, #28]
    f8c2:	f003 fc1b 	bl	130fc <__aeabi_fsub>
    f8c6:	4603      	mov	r3, r0
    f8c8:	4618      	mov	r0, r3
    f8ca:	6979      	ldr	r1, [r7, #20]
    f8cc:	f003 fd20 	bl	13310 <__aeabi_fmul>
    f8d0:	4603      	mov	r3, r0
    f8d2:	461c      	mov	r4, r3
    f8d4:	f64b 2370 	movw	r3, #47728	; 0xba70
    f8d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8dc:	681b      	ldr	r3, [r3, #0]
    f8de:	4618      	mov	r0, r3
    f8e0:	69b9      	ldr	r1, [r7, #24]
    f8e2:	f003 fc0b 	bl	130fc <__aeabi_fsub>
    f8e6:	4603      	mov	r3, r0
    f8e8:	4618      	mov	r0, r3
    f8ea:	6939      	ldr	r1, [r7, #16]
    f8ec:	f003 fd10 	bl	13310 <__aeabi_fmul>
    f8f0:	4603      	mov	r3, r0
    f8f2:	4620      	mov	r0, r4
    f8f4:	4619      	mov	r1, r3
    f8f6:	f003 fc03 	bl	13100 <__addsf3>
    f8fa:	4603      	mov	r3, r0
    f8fc:	4618      	mov	r0, r3
    f8fe:	68f9      	ldr	r1, [r7, #12]
    f900:	f003 fdba 	bl	13478 <__aeabi_fdiv>
    f904:	4603      	mov	r3, r0
    f906:	461a      	mov	r2, r3
    f908:	f64b 0354 	movw	r3, #47188	; 0xb854
    f90c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f910:	601a      	str	r2, [r3, #0]
  alpha = Max(alpha, 0.);
    f912:	f64b 0354 	movw	r3, #47188	; 0xb854
    f916:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f91a:	681b      	ldr	r3, [r3, #0]
    f91c:	4618      	mov	r0, r3
    f91e:	f04f 0100 	mov.w	r1, #0
    f922:	f003 fea7 	bl	13674 <__aeabi_fcmpge>
    f926:	4603      	mov	r3, r0
    f928:	2b00      	cmp	r3, #0
    f92a:	d005      	beq.n	f938 <route_to+0x12c>
    f92c:	f64b 0354 	movw	r3, #47188	; 0xb854
    f930:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f934:	681a      	ldr	r2, [r3, #0]
    f936:	e001      	b.n	f93c <route_to+0x130>
    f938:	f04f 0200 	mov.w	r2, #0
    f93c:	f64b 0354 	movw	r3, #47188	; 0xb854
    f940:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f944:	601a      	str	r2, [r3, #0]
  leg = sqrt(leg2);
    f946:	68f8      	ldr	r0, [r7, #12]
    f948:	f003 f84e 	bl	129e8 <__aeabi_f2d>
    f94c:	4602      	mov	r2, r0
    f94e:	460b      	mov	r3, r1
    f950:	4610      	mov	r0, r2
    f952:	4619      	mov	r1, r3
    f954:	f001 f9f4 	bl	10d40 <pp_sqrt>
    f958:	4602      	mov	r2, r0
    f95a:	460b      	mov	r3, r1
    f95c:	4610      	mov	r0, r2
    f95e:	4619      	mov	r1, r3
    f960:	f003 fb78 	bl	13054 <__aeabi_d2f>
    f964:	4602      	mov	r2, r0
    f966:	f64b 0358 	movw	r3, #47192	; 0xb858
    f96a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f96e:	601a      	str	r2, [r3, #0]
  alpha += Max(carrot / leg, 0.); /* carrot computed in approaching() */
    f970:	f64b 0354 	movw	r3, #47188	; 0xb854
    f974:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f978:	681b      	ldr	r3, [r3, #0]
    f97a:	4618      	mov	r0, r3
    f97c:	f003 f834 	bl	129e8 <__aeabi_f2d>
    f980:	4604      	mov	r4, r0
    f982:	460d      	mov	r5, r1
    f984:	f64b 0350 	movw	r3, #47184	; 0xb850
    f988:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f98c:	681a      	ldr	r2, [r3, #0]
    f98e:	f64b 0358 	movw	r3, #47192	; 0xb858
    f992:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f996:	681b      	ldr	r3, [r3, #0]
    f998:	4610      	mov	r0, r2
    f99a:	4619      	mov	r1, r3
    f99c:	f003 fd6c 	bl	13478 <__aeabi_fdiv>
    f9a0:	4603      	mov	r3, r0
    f9a2:	4618      	mov	r0, r3
    f9a4:	f04f 0100 	mov.w	r1, #0
    f9a8:	f003 fe64 	bl	13674 <__aeabi_fcmpge>
    f9ac:	4603      	mov	r3, r0
    f9ae:	2b00      	cmp	r3, #0
    f9b0:	d014      	beq.n	f9dc <route_to+0x1d0>
    f9b2:	f64b 0350 	movw	r3, #47184	; 0xb850
    f9b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9ba:	681a      	ldr	r2, [r3, #0]
    f9bc:	f64b 0358 	movw	r3, #47192	; 0xb858
    f9c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9c4:	681b      	ldr	r3, [r3, #0]
    f9c6:	4610      	mov	r0, r2
    f9c8:	4619      	mov	r1, r3
    f9ca:	f003 fd55 	bl	13478 <__aeabi_fdiv>
    f9ce:	4603      	mov	r3, r0
    f9d0:	4618      	mov	r0, r3
    f9d2:	f003 f809 	bl	129e8 <__aeabi_f2d>
    f9d6:	4602      	mov	r2, r0
    f9d8:	460b      	mov	r3, r1
    f9da:	e003      	b.n	f9e4 <route_to+0x1d8>
    f9dc:	f04f 0200 	mov.w	r2, #0
    f9e0:	f04f 0300 	mov.w	r3, #0
    f9e4:	4620      	mov	r0, r4
    f9e6:	4629      	mov	r1, r5
    f9e8:	f002 fea0 	bl	1272c <__adddf3>
    f9ec:	4602      	mov	r2, r0
    f9ee:	460b      	mov	r3, r1
    f9f0:	4610      	mov	r0, r2
    f9f2:	4619      	mov	r1, r3
    f9f4:	f003 fb2e 	bl	13054 <__aeabi_d2f>
    f9f8:	4602      	mov	r2, r0
    f9fa:	f64b 0354 	movw	r3, #47188	; 0xb854
    f9fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa02:	601a      	str	r2, [r3, #0]
  alpha = Min(1., alpha);
    fa04:	f64b 0354 	movw	r3, #47188	; 0xb854
    fa08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa0c:	681b      	ldr	r3, [r3, #0]
    fa0e:	4618      	mov	r0, r3
    fa10:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    fa14:	f003 fe2e 	bl	13674 <__aeabi_fcmpge>
    fa18:	4603      	mov	r3, r0
    fa1a:	2b00      	cmp	r3, #0
    fa1c:	d002      	beq.n	fa24 <route_to+0x218>
    fa1e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    fa22:	e004      	b.n	fa2e <route_to+0x222>
    fa24:	f64b 0354 	movw	r3, #47188	; 0xb854
    fa28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa2c:	681a      	ldr	r2, [r3, #0]
    fa2e:	f64b 0354 	movw	r3, #47188	; 0xb854
    fa32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa36:	601a      	str	r2, [r3, #0]
  fly_to_xy(last_wp_x + alpha*leg_x, last_wp_y + alpha*leg_y);
    fa38:	f64b 0354 	movw	r3, #47188	; 0xb854
    fa3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa40:	681b      	ldr	r3, [r3, #0]
    fa42:	4618      	mov	r0, r3
    fa44:	6979      	ldr	r1, [r7, #20]
    fa46:	f003 fc63 	bl	13310 <__aeabi_fmul>
    fa4a:	4603      	mov	r3, r0
    fa4c:	4618      	mov	r0, r3
    fa4e:	69f9      	ldr	r1, [r7, #28]
    fa50:	f003 fb56 	bl	13100 <__addsf3>
    fa54:	4603      	mov	r3, r0
    fa56:	461c      	mov	r4, r3
    fa58:	f64b 0354 	movw	r3, #47188	; 0xb854
    fa5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa60:	681b      	ldr	r3, [r3, #0]
    fa62:	4618      	mov	r0, r3
    fa64:	6939      	ldr	r1, [r7, #16]
    fa66:	f003 fc53 	bl	13310 <__aeabi_fmul>
    fa6a:	4603      	mov	r3, r0
    fa6c:	4618      	mov	r0, r3
    fa6e:	69b9      	ldr	r1, [r7, #24]
    fa70:	f003 fb46 	bl	13100 <__addsf3>
    fa74:	4603      	mov	r3, r0
    fa76:	4620      	mov	r0, r4
    fa78:	4619      	mov	r1, r3
    fa7a:	f7ff fe55 	bl	f728 <fly_to_xy>
}
    fa7e:	3720      	adds	r7, #32
    fa80:	46bd      	mov	sp, r7
    fa82:	bdb0      	pop	{r4, r5, r7, pc}

0000fa84 <compute_dist2_to_home>:
  float last_alt = waypoints[_last_wp].a;
  desired_altitude = last_alt + alpha * (waypoints[wp].a - last_alt);
  pre_climb = NOMINAL_AIRSPEED * (waypoints[wp].a - last_alt) / leg;
}*/

static inline void compute_dist2_to_home(void) {
    fa84:	b590      	push	{r4, r7, lr}
    fa86:	b083      	sub	sp, #12
    fa88:	af00      	add	r7, sp, #0
  float ph_x = waypoints[WP_HOME].x - estimator_x;
    fa8a:	f240 1340 	movw	r3, #320	; 0x140
    fa8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa92:	681a      	ldr	r2, [r3, #0]
    fa94:	f64b 236c 	movw	r3, #47724	; 0xba6c
    fa98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa9c:	681b      	ldr	r3, [r3, #0]
    fa9e:	4610      	mov	r0, r2
    faa0:	4619      	mov	r1, r3
    faa2:	f003 fb2b 	bl	130fc <__aeabi_fsub>
    faa6:	4603      	mov	r3, r0
    faa8:	607b      	str	r3, [r7, #4]
  float ph_y = waypoints[WP_HOME].y - estimator_y;
    faaa:	f240 1340 	movw	r3, #320	; 0x140
    faae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fab2:	685a      	ldr	r2, [r3, #4]
    fab4:	f64b 2370 	movw	r3, #47728	; 0xba70
    fab8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fabc:	681b      	ldr	r3, [r3, #0]
    fabe:	4610      	mov	r0, r2
    fac0:	4619      	mov	r1, r3
    fac2:	f003 fb1b 	bl	130fc <__aeabi_fsub>
    fac6:	4603      	mov	r3, r0
    fac8:	603b      	str	r3, [r7, #0]
  dist2_to_home = ph_x*ph_x + ph_y *ph_y;
    faca:	6878      	ldr	r0, [r7, #4]
    facc:	6879      	ldr	r1, [r7, #4]
    face:	f003 fc1f 	bl	13310 <__aeabi_fmul>
    fad2:	4603      	mov	r3, r0
    fad4:	461c      	mov	r4, r3
    fad6:	6838      	ldr	r0, [r7, #0]
    fad8:	6839      	ldr	r1, [r7, #0]
    fada:	f003 fc19 	bl	13310 <__aeabi_fmul>
    fade:	4603      	mov	r3, r0
    fae0:	4620      	mov	r0, r4
    fae2:	4619      	mov	r1, r3
    fae4:	f003 fb0c 	bl	13100 <__addsf3>
    fae8:	4603      	mov	r3, r0
    faea:	461a      	mov	r2, r3
    faec:	f64b 0348 	movw	r3, #47176	; 0xb848
    faf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    faf4:	601a      	str	r2, [r3, #0]
  too_far_from_home = dist2_to_home > (MAX_DIST_FROM_HOME*MAX_DIST_FROM_HOME);
    faf6:	f64b 0348 	movw	r3, #47176	; 0xb848
    fafa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fafe:	681b      	ldr	r3, [r3, #0]
    fb00:	2201      	movs	r2, #1
    fb02:	4614      	mov	r4, r2
    fb04:	4618      	mov	r0, r3
    fb06:	f44f 5110 	mov.w	r1, #9216	; 0x2400
    fb0a:	f6c4 0174 	movt	r1, #18548	; 0x4874
    fb0e:	f003 fdbb 	bl	13688 <__aeabi_fcmpgt>
    fb12:	4603      	mov	r3, r0
    fb14:	2b00      	cmp	r3, #0
    fb16:	d101      	bne.n	fb1c <compute_dist2_to_home+0x98>
    fb18:	2300      	movs	r3, #0
    fb1a:	461c      	mov	r4, r3
    fb1c:	b2e3      	uxtb	r3, r4
    fb1e:	461a      	mov	r2, r3
    fb20:	f64b 034c 	movw	r3, #47180	; 0xb84c
    fb24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb28:	701a      	strb	r2, [r3, #0]
}
    fb2a:	370c      	adds	r7, #12
    fb2c:	46bd      	mov	sp, r7
    fb2e:	bd90      	pop	{r4, r7, pc}

0000fb30 <nav_home>:

void nav_home(void) {
    fb30:	b580      	push	{r7, lr}
    fb32:	af00      	add	r7, sp, #0
  //Circle(WP_HOME, 50); /* FIXME: radius should be defined elsewhere */
  nav_pitch = 0.; /* Nominal speed */ 
    fb34:	f64b 033c 	movw	r3, #47164	; 0xb83c
    fb38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb3c:	f04f 0200 	mov.w	r2, #0
    fb40:	601a      	str	r2, [r3, #0]
  vertical_mode = VERTICAL_MODE_AUTO_ALT;
    fb42:	f24b 439d 	movw	r3, #46237	; 0xb49d
    fb46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb4a:	2203      	movs	r2, #3
    fb4c:	701a      	strb	r2, [r3, #0]
  desired_altitude = GROUND_ALT+50;
    fb4e:	f240 133c 	movw	r3, #316	; 0x13c
    fb52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb56:	f04f 0200 	mov.w	r2, #0
    fb5a:	f2c4 322f 	movt	r2, #17199	; 0x432f
    fb5e:	601a      	str	r2, [r3, #0]
  compute_dist2_to_home();
    fb60:	f7ff ff90 	bl	fa84 <compute_dist2_to_home>
  dist2_to_wp = dist2_to_home;
    fb64:	f64b 0348 	movw	r3, #47176	; 0xb848
    fb68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb6c:	681a      	ldr	r2, [r3, #0]
    fb6e:	f64b 0344 	movw	r3, #47172	; 0xb844
    fb72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb76:	601a      	str	r2, [r3, #0]
}
    fb78:	bd80      	pop	{r7, pc}
    fb7a:	bf00      	nop

0000fb7c <nav_update>:

void nav_update(void) {
    fb7c:	b580      	push	{r7, lr}
    fb7e:	af00      	add	r7, sp, #0
  compute_dist2_to_home();
    fb80:	f7ff ff80 	bl	fa84 <compute_dist2_to_home>

  auto_nav();
    fb84:	f7fd fc0c 	bl	d3a0 <auto_nav>
}
    fb88:	bd80      	pop	{r7, pc}
    fb8a:	bf00      	nop

0000fb8c <nav_init>:


void nav_init(void) {
    fb8c:	b480      	push	{r7}
    fb8e:	af00      	add	r7, sp, #0
  nav_block = 0;
    fb90:	f64b 0311 	movw	r3, #47121	; 0xb811
    fb94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb98:	2200      	movs	r2, #0
    fb9a:	701a      	strb	r2, [r3, #0]
  nav_stage = 0;
    fb9c:	f64b 0310 	movw	r3, #47120	; 0xb810
    fba0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fba4:	2200      	movs	r2, #0
    fba6:	701a      	strb	r2, [r3, #0]
}
    fba8:	46bd      	mov	sp, r7
    fbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
    fbae:	4770      	bx	lr

0000fbb0 <uart0_transmit>:

static uint8_t           tx_head1; /* next free in buf */
static volatile uint8_t  tx_tail1; /* next char to send */
static uint8_t           tx_buf1[ TX_BUF_SIZE ];

void uart0_transmit( unsigned char data ) {
    fbb0:	b480      	push	{r7}
    fbb2:	b083      	sub	sp, #12
    fbb4:	af00      	add	r7, sp, #0
    fbb6:	4603      	mov	r3, r0
    fbb8:	71fb      	strb	r3, [r7, #7]
  if (UCSR0B & _BV(TXCIE)) {
    fbba:	f248 030a 	movw	r3, #32778	; 0x800a
    fbbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbc2:	781b      	ldrb	r3, [r3, #0]
    fbc4:	b2db      	uxtb	r3, r3
    fbc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
    fbca:	2b00      	cmp	r3, #0
    fbcc:	d028      	beq.n	fc20 <uart0_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail0 == tx_head0 + 1) { /* BUF_SIZE = 256 */
    fbce:	f64b 0365 	movw	r3, #47205	; 0xb865
    fbd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbd6:	781b      	ldrb	r3, [r3, #0]
    fbd8:	b2db      	uxtb	r3, r3
    fbda:	461a      	mov	r2, r3
    fbdc:	f64b 0364 	movw	r3, #47204	; 0xb864
    fbe0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbe4:	781b      	ldrb	r3, [r3, #0]
    fbe6:	3301      	adds	r3, #1
    fbe8:	429a      	cmp	r2, r3
    fbea:	d100      	bne.n	fbee <uart0_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
    fbec:	e02c      	b.n	fc48 <uart0_transmit+0x98>
    }
    tx_buf0[tx_head0] = data;
    fbee:	f64b 0364 	movw	r3, #47204	; 0xb864
    fbf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbf6:	781b      	ldrb	r3, [r3, #0]
    fbf8:	461a      	mov	r2, r3
    fbfa:	f64b 0368 	movw	r3, #47208	; 0xb868
    fbfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc02:	79f9      	ldrb	r1, [r7, #7]
    fc04:	5499      	strb	r1, [r3, r2]
    tx_head0++; /* BUF_SIZE = 256 */
    fc06:	f64b 0364 	movw	r3, #47204	; 0xb864
    fc0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc0e:	781b      	ldrb	r3, [r3, #0]
    fc10:	3301      	adds	r3, #1
    fc12:	b2da      	uxtb	r2, r3
    fc14:	f64b 0364 	movw	r3, #47204	; 0xb864
    fc18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc1c:	701a      	strb	r2, [r3, #0]
    fc1e:	e013      	b.n	fc48 <uart0_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR0 = data;
    fc20:	f248 030c 	movw	r3, #32780	; 0x800c
    fc24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc28:	79fa      	ldrb	r2, [r7, #7]
    fc2a:	701a      	strb	r2, [r3, #0]
    sbi(UCSR0B, TXCIE);
    fc2c:	f248 030a 	movw	r3, #32778	; 0x800a
    fc30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc34:	f248 020a 	movw	r2, #32778	; 0x800a
    fc38:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fc3c:	7812      	ldrb	r2, [r2, #0]
    fc3e:	b2d2      	uxtb	r2, r2
    fc40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    fc44:	b2d2      	uxtb	r2, r2
    fc46:	701a      	strb	r2, [r3, #0]
  }
}
    fc48:	370c      	adds	r7, #12
    fc4a:	46bd      	mov	sp, r7
    fc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    fc50:	4770      	bx	lr
    fc52:	bf00      	nop

0000fc54 <uart1_transmit>:

void uart1_transmit( unsigned char data ) {
    fc54:	b480      	push	{r7}
    fc56:	b083      	sub	sp, #12
    fc58:	af00      	add	r7, sp, #0
    fc5a:	4603      	mov	r3, r0
    fc5c:	71fb      	strb	r3, [r7, #7]
  if (UCSR1B & _BV(TXCIE)) {
    fc5e:	f248 039a 	movw	r3, #32922	; 0x809a
    fc62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc66:	781b      	ldrb	r3, [r3, #0]
    fc68:	b2db      	uxtb	r3, r3
    fc6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    fc6e:	2b00      	cmp	r3, #0
    fc70:	d028      	beq.n	fcc4 <uart1_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail1 == tx_head1 + 1) { /* BUF_SIZE = 256 */
    fc72:	f64b 1369 	movw	r3, #47465	; 0xb969
    fc76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc7a:	781b      	ldrb	r3, [r3, #0]
    fc7c:	b2db      	uxtb	r3, r3
    fc7e:	461a      	mov	r2, r3
    fc80:	f64b 1368 	movw	r3, #47464	; 0xb968
    fc84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc88:	781b      	ldrb	r3, [r3, #0]
    fc8a:	3301      	adds	r3, #1
    fc8c:	429a      	cmp	r2, r3
    fc8e:	d100      	bne.n	fc92 <uart1_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
    fc90:	e02c      	b.n	fcec <uart1_transmit+0x98>
    }
    tx_buf1[tx_head1] = data;
    fc92:	f64b 1368 	movw	r3, #47464	; 0xb968
    fc96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc9a:	781b      	ldrb	r3, [r3, #0]
    fc9c:	461a      	mov	r2, r3
    fc9e:	f64b 136c 	movw	r3, #47468	; 0xb96c
    fca2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fca6:	79f9      	ldrb	r1, [r7, #7]
    fca8:	5499      	strb	r1, [r3, r2]
    tx_head1++; /* BUF_SIZE = 256 */
    fcaa:	f64b 1368 	movw	r3, #47464	; 0xb968
    fcae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcb2:	781b      	ldrb	r3, [r3, #0]
    fcb4:	3301      	adds	r3, #1
    fcb6:	b2da      	uxtb	r2, r3
    fcb8:	f64b 1368 	movw	r3, #47464	; 0xb968
    fcbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcc0:	701a      	strb	r2, [r3, #0]
    fcc2:	e013      	b.n	fcec <uart1_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR1 = data;
    fcc4:	f248 039c 	movw	r3, #32924	; 0x809c
    fcc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fccc:	79fa      	ldrb	r2, [r7, #7]
    fcce:	701a      	strb	r2, [r3, #0]
    sbi(UCSR1B, TXCIE);
    fcd0:	f248 039a 	movw	r3, #32922	; 0x809a
    fcd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fcd8:	f248 029a 	movw	r2, #32922	; 0x809a
    fcdc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fce0:	7812      	ldrb	r2, [r2, #0]
    fce2:	b2d2      	uxtb	r2, r2
    fce4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    fce8:	b2d2      	uxtb	r2, r2
    fcea:	701a      	strb	r2, [r3, #0]
  }
}
    fcec:	370c      	adds	r7, #12
    fcee:	46bd      	mov	sp, r7
    fcf0:	f85d 7b04 	ldr.w	r7, [sp], #4
    fcf4:	4770      	bx	lr
    fcf6:	bf00      	nop

0000fcf8 <uart0_print_string>:


void uart0_print_string(const uint8_t* s) {
    fcf8:	b580      	push	{r7, lr}
    fcfa:	b084      	sub	sp, #16
    fcfc:	af00      	add	r7, sp, #0
    fcfe:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
    fd00:	2300      	movs	r3, #0
    fd02:	73fb      	strb	r3, [r7, #15]
  while (s[i]) {
    fd04:	e009      	b.n	fd1a <uart0_print_string+0x22>
    uart0_transmit(s[i]);
    fd06:	7bfb      	ldrb	r3, [r7, #15]
    fd08:	687a      	ldr	r2, [r7, #4]
    fd0a:	4413      	add	r3, r2
    fd0c:	781b      	ldrb	r3, [r3, #0]
    fd0e:	4618      	mov	r0, r3
    fd10:	f7ff ff4e 	bl	fbb0 <uart0_transmit>
    i++;
    fd14:	7bfb      	ldrb	r3, [r7, #15]
    fd16:	3301      	adds	r3, #1
    fd18:	73fb      	strb	r3, [r7, #15]
}


void uart0_print_string(const uint8_t* s) {
  uint8_t i = 0;
  while (s[i]) {
    fd1a:	7bfb      	ldrb	r3, [r7, #15]
    fd1c:	687a      	ldr	r2, [r7, #4]
    fd1e:	4413      	add	r3, r2
    fd20:	781b      	ldrb	r3, [r3, #0]
    fd22:	2b00      	cmp	r3, #0
    fd24:	d1ef      	bne.n	fd06 <uart0_print_string+0xe>
    uart0_transmit(s[i]);
    i++;
  }
}
    fd26:	3710      	adds	r7, #16
    fd28:	46bd      	mov	sp, r7
    fd2a:	bd80      	pop	{r7, pc}

0000fd2c <uart0_print_hex>:

void uart0_print_hex(const uint8_t c) {
    fd2c:	b590      	push	{r4, r7, lr}
    fd2e:	b089      	sub	sp, #36	; 0x24
    fd30:	af00      	add	r7, sp, #0
    fd32:	4603      	mov	r3, r0
    fd34:	71fb      	strb	r3, [r7, #7]
  const uint8_t hex[16] = { '0', '1', '2', '3', '4', '5', '6', '7', 
    fd36:	f643 1344 	movw	r3, #14660	; 0x3944
    fd3a:	f2c0 0301 	movt	r3, #1
    fd3e:	f107 040c 	add.w	r4, r7, #12
    fd42:	6818      	ldr	r0, [r3, #0]
    fd44:	6859      	ldr	r1, [r3, #4]
    fd46:	689a      	ldr	r2, [r3, #8]
    fd48:	68db      	ldr	r3, [r3, #12]
    fd4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
  uint8_t high = (c & 0xF0)>>4;
    fd4c:	79fb      	ldrb	r3, [r7, #7]
    fd4e:	091b      	lsrs	r3, r3, #4
    fd50:	77fb      	strb	r3, [r7, #31]
  uint8_t low  = c & 0x0F;
    fd52:	79fb      	ldrb	r3, [r7, #7]
    fd54:	f003 030f 	and.w	r3, r3, #15
    fd58:	77bb      	strb	r3, [r7, #30]
    /*
    *Added by SunnyBeike
    * */
    high = 15;
    fd5a:	230f      	movs	r3, #15
    fd5c:	77fb      	strb	r3, [r7, #31]
    low = 15;
    fd5e:	230f      	movs	r3, #15
    fd60:	77bb      	strb	r3, [r7, #30]
    /*
    *End
    * */
    uart0_transmit(hex[high]);
    fd62:	7ffb      	ldrb	r3, [r7, #31]
    fd64:	f107 0220 	add.w	r2, r7, #32
    fd68:	4413      	add	r3, r2
    fd6a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
    fd6e:	4618      	mov	r0, r3
    fd70:	f7ff ff1e 	bl	fbb0 <uart0_transmit>
  uart0_transmit(hex[low]);
    fd74:	7fbb      	ldrb	r3, [r7, #30]
    fd76:	f107 0220 	add.w	r2, r7, #32
    fd7a:	4413      	add	r3, r2
    fd7c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
    fd80:	4618      	mov	r0, r3
    fd82:	f7ff ff15 	bl	fbb0 <uart0_transmit>
}
    fd86:	3724      	adds	r7, #36	; 0x24
    fd88:	46bd      	mov	sp, r7
    fd8a:	bd90      	pop	{r4, r7, pc}

0000fd8c <__vector_20>:


SIGNAL(SIG_UART0_TRANS) {
    fd8c:	b480      	push	{r7}
    fd8e:	af00      	add	r7, sp, #0
  if (tx_head0 == tx_tail0) {
    fd90:	f64b 0364 	movw	r3, #47204	; 0xb864
    fd94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd98:	781a      	ldrb	r2, [r3, #0]
    fd9a:	f64b 0365 	movw	r3, #47205	; 0xb865
    fd9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fda2:	781b      	ldrb	r3, [r3, #0]
    fda4:	b2db      	uxtb	r3, r3
    fda6:	429a      	cmp	r2, r3
    fda8:	d10e      	bne.n	fdc8 <__vector_20+0x3c>
    /* Nothing more to send */
    cbi(UCSR0B, TXCIE); /* disable interrupt */
    fdaa:	f248 030a 	movw	r3, #32778	; 0x800a
    fdae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fdb2:	f248 020a 	movw	r2, #32778	; 0x800a
    fdb6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fdba:	7812      	ldrb	r2, [r2, #0]
    fdbc:	b2d2      	uxtb	r2, r2
    fdbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    fdc2:	b2d2      	uxtb	r2, r2
    fdc4:	701a      	strb	r2, [r3, #0]
    fdc6:	e01d      	b.n	fe04 <__vector_20+0x78>
  } else {
    UDR0 = tx_buf0[tx_tail0];
    fdc8:	f248 030c 	movw	r3, #32780	; 0x800c
    fdcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fdd0:	f64b 0265 	movw	r2, #47205	; 0xb865
    fdd4:	f2c2 0204 	movt	r2, #8196	; 0x2004
    fdd8:	7812      	ldrb	r2, [r2, #0]
    fdda:	b2d2      	uxtb	r2, r2
    fddc:	4611      	mov	r1, r2
    fdde:	f64b 0268 	movw	r2, #47208	; 0xb868
    fde2:	f2c2 0204 	movt	r2, #8196	; 0x2004
    fde6:	5c52      	ldrb	r2, [r2, r1]
    fde8:	701a      	strb	r2, [r3, #0]
    tx_tail0++; /* warning tx_buf_len is 256 */
    fdea:	f64b 0365 	movw	r3, #47205	; 0xb865
    fdee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdf2:	781b      	ldrb	r3, [r3, #0]
    fdf4:	b2db      	uxtb	r3, r3
    fdf6:	3301      	adds	r3, #1
    fdf8:	b2da      	uxtb	r2, r3
    fdfa:	f64b 0365 	movw	r3, #47205	; 0xb865
    fdfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe02:	701a      	strb	r2, [r3, #0]
  }
}
    fe04:	46bd      	mov	sp, r7
    fe06:	f85d 7b04 	ldr.w	r7, [sp], #4
    fe0a:	4770      	bx	lr

0000fe0c <__vector_32>:

SIGNAL(SIG_UART1_TRANS) {
    fe0c:	b480      	push	{r7}
    fe0e:	af00      	add	r7, sp, #0
  if (tx_head1 == tx_tail1) {
    fe10:	f64b 1368 	movw	r3, #47464	; 0xb968
    fe14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe18:	781a      	ldrb	r2, [r3, #0]
    fe1a:	f64b 1369 	movw	r3, #47465	; 0xb969
    fe1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe22:	781b      	ldrb	r3, [r3, #0]
    fe24:	b2db      	uxtb	r3, r3
    fe26:	429a      	cmp	r2, r3
    fe28:	d10e      	bne.n	fe48 <__vector_32+0x3c>
    /* Nothing more to send */
    cbi(UCSR1B, TXCIE); /* disable interrupt */
    fe2a:	f248 039a 	movw	r3, #32922	; 0x809a
    fe2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe32:	f248 029a 	movw	r2, #32922	; 0x809a
    fe36:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fe3a:	7812      	ldrb	r2, [r2, #0]
    fe3c:	b2d2      	uxtb	r2, r2
    fe3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    fe42:	b2d2      	uxtb	r2, r2
    fe44:	701a      	strb	r2, [r3, #0]
    fe46:	e01d      	b.n	fe84 <__vector_32+0x78>
  } else {
    UDR1 = tx_buf1[tx_tail1];
    fe48:	f248 039c 	movw	r3, #32924	; 0x809c
    fe4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe50:	f64b 1269 	movw	r2, #47465	; 0xb969
    fe54:	f2c2 0204 	movt	r2, #8196	; 0x2004
    fe58:	7812      	ldrb	r2, [r2, #0]
    fe5a:	b2d2      	uxtb	r2, r2
    fe5c:	4611      	mov	r1, r2
    fe5e:	f64b 126c 	movw	r2, #47468	; 0xb96c
    fe62:	f2c2 0204 	movt	r2, #8196	; 0x2004
    fe66:	5c52      	ldrb	r2, [r2, r1]
    fe68:	701a      	strb	r2, [r3, #0]
    tx_tail1++; /* warning tx_buf_len is 256 */
    fe6a:	f64b 1369 	movw	r3, #47465	; 0xb969
    fe6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe72:	781b      	ldrb	r3, [r3, #0]
    fe74:	b2db      	uxtb	r3, r3
    fe76:	3301      	adds	r3, #1
    fe78:	b2da      	uxtb	r2, r3
    fe7a:	f64b 1369 	movw	r3, #47465	; 0xb969
    fe7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe82:	701a      	strb	r2, [r3, #0]
  }
}
    fe84:	46bd      	mov	sp, r7
    fe86:	f85d 7b04 	ldr.w	r7, [sp], #4
    fe8a:	4770      	bx	lr

0000fe8c <uart0_init>:

void uart0_init( void ) {
    fe8c:	b480      	push	{r7}
    fe8e:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRR0H = 0; 
    fe90:	f248 0390 	movw	r3, #32912	; 0x8090
    fe94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe98:	2200      	movs	r2, #0
    fe9a:	701a      	strb	r2, [r3, #0]
  UBRR0L = 25; // 38.4
    fe9c:	f248 0309 	movw	r3, #32777	; 0x8009
    fea0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fea4:	2219      	movs	r2, #25
    fea6:	701a      	strb	r2, [r3, #0]
  // UBRR0L = 103; //9600
  /* single speed */ 
  UCSR0A = 0; 
    fea8:	f248 030b 	movw	r3, #32779	; 0x800b
    feac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    feb0:	2200      	movs	r2, #0
    feb2:	701a      	strb	r2, [r3, #0]
  /* Enable receiver and transmitter */ 
  UCSR0B = _BV(RXEN) | _BV(TXEN);
    feb4:	f248 030a 	movw	r3, #32778	; 0x800a
    feb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    febc:	2218      	movs	r2, #24
    febe:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSR0C = _BV(UCSZ1) | _BV(UCSZ0);
    fec0:	f248 0395 	movw	r3, #32917	; 0x8095
    fec4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fec8:	2206      	movs	r2, #6
    feca:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi(UCSR0B, RXCIE ); 
    fecc:	f248 030a 	movw	r3, #32778	; 0x800a
    fed0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fed4:	f248 020a 	movw	r2, #32778	; 0x800a
    fed8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fedc:	7812      	ldrb	r2, [r2, #0]
    fede:	b2d2      	uxtb	r2, r2
    fee0:	f062 027f 	orn	r2, r2, #127	; 0x7f
    fee4:	b2d2      	uxtb	r2, r2
    fee6:	701a      	strb	r2, [r3, #0]
}
    fee8:	46bd      	mov	sp, r7
    feea:	f85d 7b04 	ldr.w	r7, [sp], #4
    feee:	4770      	bx	lr

0000fef0 <uart1_init>:

void uart1_init( void ) {
    fef0:	b480      	push	{r7}
    fef2:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRR1H = 0; 
    fef4:	f248 0398 	movw	r3, #32920	; 0x8098
    fef8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fefc:	2200      	movs	r2, #0
    fefe:	701a      	strb	r2, [r3, #0]
  UBRR1L = 25; // 38.4
    ff00:	f248 0399 	movw	r3, #32921	; 0x8099
    ff04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff08:	2219      	movs	r2, #25
    ff0a:	701a      	strb	r2, [r3, #0]
  // UBRR1L = 103; //9600


  /* single speed */ 
  UCSR1A = 0; 
    ff0c:	f248 039b 	movw	r3, #32923	; 0x809b
    ff10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff14:	2200      	movs	r2, #0
    ff16:	701a      	strb	r2, [r3, #0]
  /* Enable receiver and transmitter */ 
  UCSR1B = _BV(RXEN) | _BV(TXEN);
    ff18:	f248 039a 	movw	r3, #32922	; 0x809a
    ff1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff20:	2218      	movs	r2, #24
    ff22:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSR1C = _BV(UCSZ1) | _BV(UCSZ0);
    ff24:	f248 039d 	movw	r3, #32925	; 0x809d
    ff28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff2c:	2206      	movs	r2, #6
    ff2e:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi(UCSR1B, RXCIE ); 
    ff30:	f248 039a 	movw	r3, #32922	; 0x809a
    ff34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff38:	f248 029a 	movw	r2, #32922	; 0x809a
    ff3c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ff40:	7812      	ldrb	r2, [r2, #0]
    ff42:	b2d2      	uxtb	r2, r2
    ff44:	f062 027f 	orn	r2, r2, #127	; 0x7f
    ff48:	b2d2      	uxtb	r2, r2
    ff4a:	701a      	strb	r2, [r3, #0]
}
    ff4c:	46bd      	mov	sp, r7
    ff4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    ff52:	4770      	bx	lr
    ff54:	0000      	movs	r0, r0
	...

0000ff58 <estimator_init>:
  estimator_theta_dot = theta_dot; \
}

inline void estimator_update_lls( void );

void estimator_init( void ) {
    ff58:	b480      	push	{r7}
    ff5a:	af00      	add	r7, sp, #0

  EstimatorSetPos (0., 0., 0.);
    ff5c:	f64b 236c 	movw	r3, #47724	; 0xba6c
    ff60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff64:	f04f 0200 	mov.w	r2, #0
    ff68:	601a      	str	r2, [r3, #0]
    ff6a:	f64b 2370 	movw	r3, #47728	; 0xba70
    ff6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff72:	f04f 0200 	mov.w	r2, #0
    ff76:	601a      	str	r2, [r3, #0]
    ff78:	f64b 2374 	movw	r3, #47732	; 0xba74
    ff7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff80:	f04f 0200 	mov.w	r2, #0
    ff84:	601a      	str	r2, [r3, #0]

  EstimatorSetAtt (0., 0., 0);
    ff86:	f64b 2378 	movw	r3, #47736	; 0xba78
    ff8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff8e:	f04f 0200 	mov.w	r2, #0
    ff92:	601a      	str	r2, [r3, #0]
    ff94:	f64b 237c 	movw	r3, #47740	; 0xba7c
    ff98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff9c:	f04f 0200 	mov.w	r2, #0
    ffa0:	601a      	str	r2, [r3, #0]
    ffa2:	f64b 2380 	movw	r3, #47744	; 0xba80
    ffa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffaa:	f04f 0200 	mov.w	r2, #0
    ffae:	601a      	str	r2, [r3, #0]

  EstimatorSetSpeedPol ( 0., 0., 0.);
    ffb0:	f64b 23a4 	movw	r3, #47780	; 0xbaa4
    ffb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffb8:	f04f 0200 	mov.w	r2, #0
    ffbc:	601a      	str	r2, [r3, #0]
    ffbe:	f64b 23a8 	movw	r3, #47784	; 0xbaa8
    ffc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffc6:	f04f 0200 	mov.w	r2, #0
    ffca:	601a      	str	r2, [r3, #0]
    ffcc:	f64b 238c 	movw	r3, #47756	; 0xba8c
    ffd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffd4:	f04f 0200 	mov.w	r2, #0
    ffd8:	601a      	str	r2, [r3, #0]

  EstimatorSetRotSpeed (0., 0., 0.);
    ffda:	f64b 2390 	movw	r3, #47760	; 0xba90
    ffde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffe2:	f04f 0200 	mov.w	r2, #0
    ffe6:	601a      	str	r2, [r3, #0]
    ffe8:	f64b 2394 	movw	r3, #47764	; 0xba94
    ffec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fff0:	f04f 0200 	mov.w	r2, #0
    fff4:	601a      	str	r2, [r3, #0]
    fff6:	f64b 2398 	movw	r3, #47768	; 0xba98
    fffa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fffe:	f04f 0200 	mov.w	r2, #0
   10002:	601a      	str	r2, [r3, #0]

  estimator_flight_time = 0;
   10004:	f64b 239c 	movw	r3, #47772	; 0xba9c
   10008:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1000c:	2200      	movs	r2, #0
   1000e:	801a      	strh	r2, [r3, #0]

  estimator_rad_of_ir = ir_rad_of_ir;
   10010:	f240 1310 	movw	r3, #272	; 0x110
   10014:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10018:	681a      	ldr	r2, [r3, #0]
   1001a:	f64b 23ac 	movw	r3, #47788	; 0xbaac
   1001e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10022:	601a      	str	r2, [r3, #0]
}
   10024:	46bd      	mov	sp, r7
   10026:	f85d 7b04 	ldr.w	r7, [sp], #4
   1002a:	4770      	bx	lr

0001002c <estimator_update_state_infrared>:

#define EstimatorIrGainIsCorrect() (TRUE)

void estimator_update_state_infrared( void ) {
   1002c:	b580      	push	{r7, lr}
   1002e:	b082      	sub	sp, #8
   10030:	af00      	add	r7, sp, #0
  float rad_of_ir = (ir_estim_mode == IR_ESTIM_MODE_ON && EstimatorIrGainIsCorrect()) ? 
   10032:	f240 1304 	movw	r3, #260	; 0x104
   10036:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1003a:	781b      	ldrb	r3, [r3, #0]
    estimator_rad_of_ir : ir_rad_of_ir;
   1003c:	2b01      	cmp	r3, #1
   1003e:	d105      	bne.n	1004c <estimator_update_state_infrared+0x20>
   10040:	f64b 23ac 	movw	r3, #47788	; 0xbaac
   10044:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10048:	681b      	ldr	r3, [r3, #0]
   1004a:	e004      	b.n	10056 <estimator_update_state_infrared+0x2a>
   1004c:	f240 1310 	movw	r3, #272	; 0x110
   10050:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10054:	681b      	ldr	r3, [r3, #0]
}

#define EstimatorIrGainIsCorrect() (TRUE)

void estimator_update_state_infrared( void ) {
  float rad_of_ir = (ir_estim_mode == IR_ESTIM_MODE_ON && EstimatorIrGainIsCorrect()) ? 
   10056:	607b      	str	r3, [r7, #4]
    estimator_rad_of_ir : ir_rad_of_ir;
  estimator_phi  = rad_of_ir * ir_roll;
   10058:	f24b 7358 	movw	r3, #46936	; 0xb758
   1005c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10060:	881b      	ldrh	r3, [r3, #0]
   10062:	b21b      	sxth	r3, r3
   10064:	4618      	mov	r0, r3
   10066:	f003 f8ff 	bl	13268 <__aeabi_i2f>
   1006a:	4603      	mov	r3, r0
   1006c:	4618      	mov	r0, r3
   1006e:	6879      	ldr	r1, [r7, #4]
   10070:	f003 f94e 	bl	13310 <__aeabi_fmul>
   10074:	4603      	mov	r3, r0
   10076:	461a      	mov	r2, r3
   10078:	f64b 2378 	movw	r3, #47736	; 0xba78
   1007c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10080:	601a      	str	r2, [r3, #0]

  estimator_theta = rad_of_ir * ir_pitch;
   10082:	f24b 735a 	movw	r3, #46938	; 0xb75a
   10086:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1008a:	881b      	ldrh	r3, [r3, #0]
   1008c:	b21b      	sxth	r3, r3
   1008e:	4618      	mov	r0, r3
   10090:	f003 f8ea 	bl	13268 <__aeabi_i2f>
   10094:	4603      	mov	r3, r0
   10096:	4618      	mov	r0, r3
   10098:	6879      	ldr	r1, [r7, #4]
   1009a:	f003 f939 	bl	13310 <__aeabi_fmul>
   1009e:	4603      	mov	r3, r0
   100a0:	461a      	mov	r2, r3
   100a2:	f64b 2380 	movw	r3, #47744	; 0xba80
   100a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100aa:	601a      	str	r2, [r3, #0]
}
   100ac:	3708      	adds	r7, #8
   100ae:	46bd      	mov	sp, r7
   100b0:	bd80      	pop	{r7, pc}
   100b2:	bf00      	nop

000100b4 <estimator_update_ir_estim>:
#define RHO 0.999 /* The higher, the slower the estimation is changing */

#define g 9.81


void estimator_update_ir_estim( void ) {
   100b4:	b5b0      	push	{r4, r5, r7, lr}
   100b6:	b084      	sub	sp, #16
   100b8:	af00      	add	r7, sp, #0
  static bool_t initialized = FALSE;
  static float sum_xy, sum_xx;
  float absphi;
  float init_ir2;

  if (initialized) 
   100ba:	f64b 23b8 	movw	r3, #47800	; 0xbab8
   100be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100c2:	781b      	ldrb	r3, [r3, #0]
   100c4:	2b00      	cmp	r3, #0
   100c6:	f000 81e8 	beq.w	1049a <estimator_update_ir_estim+0x3e6>
  {
    float dt = gps_ftow - last_t;
   100ca:	f24b 6328 	movw	r3, #46632	; 0xb628
   100ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100d2:	681a      	ldr	r2, [r3, #0]
   100d4:	f64b 23bc 	movw	r3, #47804	; 0xbabc
   100d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100dc:	681b      	ldr	r3, [r3, #0]
   100de:	4610      	mov	r0, r2
   100e0:	4619      	mov	r1, r3
   100e2:	f003 f80b 	bl	130fc <__aeabi_fsub>
   100e6:	4603      	mov	r3, r0
   100e8:	60bb      	str	r3, [r7, #8]
    if (dt > 0.1) { // Against division by zero
   100ea:	68b8      	ldr	r0, [r7, #8]
   100ec:	f002 fc7c 	bl	129e8 <__aeabi_f2d>
   100f0:	4602      	mov	r2, r0
   100f2:	460b      	mov	r3, r1
   100f4:	4610      	mov	r0, r2
   100f6:	4619      	mov	r1, r3
   100f8:	a385      	add	r3, pc, #532	; (adr r3, 10310 <estimator_update_ir_estim+0x25c>)
   100fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   100fe:	f002 ff57 	bl	12fb0 <__aeabi_dcmpgt>
   10102:	4603      	mov	r3, r0
   10104:	2b00      	cmp	r3, #0
   10106:	d100      	bne.n	1010a <estimator_update_ir_estim+0x56>
   10108:	e219      	b.n	1053e <estimator_update_ir_estim+0x48a>
      float phi = (estimator_hspeed_dir - last_hspeed_dir); 
   1010a:	f64b 23a8 	movw	r3, #47784	; 0xbaa8
   1010e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10112:	681a      	ldr	r2, [r3, #0]
   10114:	f64b 23c0 	movw	r3, #47808	; 0xbac0
   10118:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1011c:	681b      	ldr	r3, [r3, #0]
   1011e:	4610      	mov	r0, r2
   10120:	4619      	mov	r1, r3
   10122:	f002 ffeb 	bl	130fc <__aeabi_fsub>
   10126:	4603      	mov	r3, r0
   10128:	60fb      	str	r3, [r7, #12]
      NORM_RAD_ANGLE(phi);
   1012a:	e013      	b.n	10154 <estimator_update_ir_estim+0xa0>
   1012c:	68f8      	ldr	r0, [r7, #12]
   1012e:	f002 fc5b 	bl	129e8 <__aeabi_f2d>
   10132:	4602      	mov	r2, r0
   10134:	460b      	mov	r3, r1
   10136:	4610      	mov	r0, r2
   10138:	4619      	mov	r1, r3
   1013a:	a377      	add	r3, pc, #476	; (adr r3, 10318 <estimator_update_ir_estim+0x264>)
   1013c:	e9d3 2300 	ldrd	r2, r3, [r3]
   10140:	f002 faf2 	bl	12728 <__aeabi_dsub>
   10144:	4602      	mov	r2, r0
   10146:	460b      	mov	r3, r1
   10148:	4610      	mov	r0, r2
   1014a:	4619      	mov	r1, r3
   1014c:	f002 ff82 	bl	13054 <__aeabi_d2f>
   10150:	4603      	mov	r3, r0
   10152:	60fb      	str	r3, [r7, #12]
   10154:	68f8      	ldr	r0, [r7, #12]
   10156:	f002 fc47 	bl	129e8 <__aeabi_f2d>
   1015a:	4602      	mov	r2, r0
   1015c:	460b      	mov	r3, r1
   1015e:	4610      	mov	r0, r2
   10160:	4619      	mov	r1, r3
   10162:	a36f      	add	r3, pc, #444	; (adr r3, 10320 <estimator_update_ir_estim+0x26c>)
   10164:	e9d3 2300 	ldrd	r2, r3, [r3]
   10168:	f002 ff22 	bl	12fb0 <__aeabi_dcmpgt>
   1016c:	4603      	mov	r3, r0
   1016e:	2b00      	cmp	r3, #0
   10170:	d1dc      	bne.n	1012c <estimator_update_ir_estim+0x78>
   10172:	e013      	b.n	1019c <estimator_update_ir_estim+0xe8>
   10174:	68f8      	ldr	r0, [r7, #12]
   10176:	f002 fc37 	bl	129e8 <__aeabi_f2d>
   1017a:	4602      	mov	r2, r0
   1017c:	460b      	mov	r3, r1
   1017e:	4610      	mov	r0, r2
   10180:	4619      	mov	r1, r3
   10182:	a365      	add	r3, pc, #404	; (adr r3, 10318 <estimator_update_ir_estim+0x264>)
   10184:	e9d3 2300 	ldrd	r2, r3, [r3]
   10188:	f002 fad0 	bl	1272c <__adddf3>
   1018c:	4602      	mov	r2, r0
   1018e:	460b      	mov	r3, r1
   10190:	4610      	mov	r0, r2
   10192:	4619      	mov	r1, r3
   10194:	f002 ff5e 	bl	13054 <__aeabi_d2f>
   10198:	4603      	mov	r3, r0
   1019a:	60fb      	str	r3, [r7, #12]
   1019c:	68f8      	ldr	r0, [r7, #12]
   1019e:	f002 fc23 	bl	129e8 <__aeabi_f2d>
   101a2:	4602      	mov	r2, r0
   101a4:	460b      	mov	r3, r1
   101a6:	4610      	mov	r0, r2
   101a8:	4619      	mov	r1, r3
   101aa:	a35f      	add	r3, pc, #380	; (adr r3, 10328 <estimator_update_ir_estim+0x274>)
   101ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   101b0:	f002 fee0 	bl	12f74 <__aeabi_dcmplt>
   101b4:	4603      	mov	r3, r0
   101b6:	2b00      	cmp	r3, #0
   101b8:	d1dc      	bne.n	10174 <estimator_update_ir_estim+0xc0>
      phi = phi/dt*NOMINAL_AIRSPEED/g; /* tan linearized */
   101ba:	68f8      	ldr	r0, [r7, #12]
   101bc:	68b9      	ldr	r1, [r7, #8]
   101be:	f003 f95b 	bl	13478 <__aeabi_fdiv>
   101c2:	4603      	mov	r3, r0
   101c4:	4618      	mov	r0, r3
   101c6:	f002 fc0f 	bl	129e8 <__aeabi_f2d>
   101ca:	4602      	mov	r2, r0
   101cc:	460b      	mov	r3, r1
   101ce:	4610      	mov	r0, r2
   101d0:	4619      	mov	r1, r3
   101d2:	f04f 0200 	mov.w	r2, #0
   101d6:	f04f 0300 	mov.w	r3, #0
   101da:	f2c4 0324 	movt	r3, #16420	; 0x4024
   101de:	f002 fc57 	bl	12a90 <__aeabi_dmul>
   101e2:	4602      	mov	r2, r0
   101e4:	460b      	mov	r3, r1
   101e6:	4610      	mov	r0, r2
   101e8:	4619      	mov	r1, r3
   101ea:	a351      	add	r3, pc, #324	; (adr r3, 10330 <estimator_update_ir_estim+0x27c>)
   101ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   101f0:	f002 fd78 	bl	12ce4 <__aeabi_ddiv>
   101f4:	4602      	mov	r2, r0
   101f6:	460b      	mov	r3, r1
   101f8:	4610      	mov	r0, r2
   101fa:	4619      	mov	r1, r3
   101fc:	f002 ff2a 	bl	13054 <__aeabi_d2f>
   10200:	4603      	mov	r3, r0
   10202:	60fb      	str	r3, [r7, #12]
      NORM_RAD_ANGLE(phi);
   10204:	e013      	b.n	1022e <estimator_update_ir_estim+0x17a>
   10206:	68f8      	ldr	r0, [r7, #12]
   10208:	f002 fbee 	bl	129e8 <__aeabi_f2d>
   1020c:	4602      	mov	r2, r0
   1020e:	460b      	mov	r3, r1
   10210:	4610      	mov	r0, r2
   10212:	4619      	mov	r1, r3
   10214:	a340      	add	r3, pc, #256	; (adr r3, 10318 <estimator_update_ir_estim+0x264>)
   10216:	e9d3 2300 	ldrd	r2, r3, [r3]
   1021a:	f002 fa85 	bl	12728 <__aeabi_dsub>
   1021e:	4602      	mov	r2, r0
   10220:	460b      	mov	r3, r1
   10222:	4610      	mov	r0, r2
   10224:	4619      	mov	r1, r3
   10226:	f002 ff15 	bl	13054 <__aeabi_d2f>
   1022a:	4603      	mov	r3, r0
   1022c:	60fb      	str	r3, [r7, #12]
   1022e:	68f8      	ldr	r0, [r7, #12]
   10230:	f002 fbda 	bl	129e8 <__aeabi_f2d>
   10234:	4602      	mov	r2, r0
   10236:	460b      	mov	r3, r1
   10238:	4610      	mov	r0, r2
   1023a:	4619      	mov	r1, r3
   1023c:	a338      	add	r3, pc, #224	; (adr r3, 10320 <estimator_update_ir_estim+0x26c>)
   1023e:	e9d3 2300 	ldrd	r2, r3, [r3]
   10242:	f002 feb5 	bl	12fb0 <__aeabi_dcmpgt>
   10246:	4603      	mov	r3, r0
   10248:	2b00      	cmp	r3, #0
   1024a:	d1dc      	bne.n	10206 <estimator_update_ir_estim+0x152>
   1024c:	e013      	b.n	10276 <estimator_update_ir_estim+0x1c2>
   1024e:	68f8      	ldr	r0, [r7, #12]
   10250:	f002 fbca 	bl	129e8 <__aeabi_f2d>
   10254:	4602      	mov	r2, r0
   10256:	460b      	mov	r3, r1
   10258:	4610      	mov	r0, r2
   1025a:	4619      	mov	r1, r3
   1025c:	a32e      	add	r3, pc, #184	; (adr r3, 10318 <estimator_update_ir_estim+0x264>)
   1025e:	e9d3 2300 	ldrd	r2, r3, [r3]
   10262:	f002 fa63 	bl	1272c <__adddf3>
   10266:	4602      	mov	r2, r0
   10268:	460b      	mov	r3, r1
   1026a:	4610      	mov	r0, r2
   1026c:	4619      	mov	r1, r3
   1026e:	f002 fef1 	bl	13054 <__aeabi_d2f>
   10272:	4603      	mov	r3, r0
   10274:	60fb      	str	r3, [r7, #12]
   10276:	68f8      	ldr	r0, [r7, #12]
   10278:	f002 fbb6 	bl	129e8 <__aeabi_f2d>
   1027c:	4602      	mov	r2, r0
   1027e:	460b      	mov	r3, r1
   10280:	4610      	mov	r0, r2
   10282:	4619      	mov	r1, r3
   10284:	a328      	add	r3, pc, #160	; (adr r3, 10328 <estimator_update_ir_estim+0x274>)
   10286:	e9d3 2300 	ldrd	r2, r3, [r3]
   1028a:	f002 fe73 	bl	12f74 <__aeabi_dcmplt>
   1028e:	4603      	mov	r3, r0
   10290:	2b00      	cmp	r3, #0
   10292:	d1dc      	bne.n	1024e <estimator_update_ir_estim+0x19a>
      estimator_ir = (float)ir_roll;
   10294:	f24b 7358 	movw	r3, #46936	; 0xb758
   10298:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1029c:	881b      	ldrh	r3, [r3, #0]
   1029e:	b21b      	sxth	r3, r3
   102a0:	4618      	mov	r0, r3
   102a2:	f002 ffe1 	bl	13268 <__aeabi_i2f>
   102a6:	4602      	mov	r2, r0
   102a8:	f64b 23b0 	movw	r3, #47792	; 0xbab0
   102ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102b0:	601a      	str	r2, [r3, #0]
      estimator_rad = phi;
   102b2:	f64b 23b4 	movw	r3, #47796	; 0xbab4
   102b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102ba:	68fa      	ldr	r2, [r7, #12]
   102bc:	601a      	str	r2, [r3, #0]
      absphi = fabs(phi);
   102be:	68f8      	ldr	r0, [r7, #12]
   102c0:	f04f 0100 	mov.w	r1, #0
   102c4:	f003 f9c2 	bl	1364c <__aeabi_fcmplt>
   102c8:	4603      	mov	r3, r0
   102ca:	2b00      	cmp	r3, #0
   102cc:	d003      	beq.n	102d6 <estimator_update_ir_estim+0x222>
   102ce:	68fb      	ldr	r3, [r7, #12]
   102d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
   102d4:	e000      	b.n	102d8 <estimator_update_ir_estim+0x224>
   102d6:	68fb      	ldr	r3, [r7, #12]
   102d8:	607b      	str	r3, [r7, #4]
      if (absphi < 1.0 && absphi > 0.05 && (- ir_contrast/2 < ir_roll && ir_roll < ir_contrast/2)) {
   102da:	6878      	ldr	r0, [r7, #4]
   102dc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   102e0:	f003 f9b4 	bl	1364c <__aeabi_fcmplt>
   102e4:	4603      	mov	r3, r0
   102e6:	2b00      	cmp	r3, #0
   102e8:	d100      	bne.n	102ec <estimator_update_ir_estim+0x238>
   102ea:	e128      	b.n	1053e <estimator_update_ir_estim+0x48a>
   102ec:	6878      	ldr	r0, [r7, #4]
   102ee:	f002 fb7b 	bl	129e8 <__aeabi_f2d>
   102f2:	4602      	mov	r2, r0
   102f4:	460b      	mov	r3, r1
   102f6:	4610      	mov	r0, r2
   102f8:	4619      	mov	r1, r3
   102fa:	a30f      	add	r3, pc, #60	; (adr r3, 10338 <estimator_update_ir_estim+0x284>)
   102fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   10300:	f002 fe56 	bl	12fb0 <__aeabi_dcmpgt>
   10304:	4603      	mov	r3, r0
   10306:	2b00      	cmp	r3, #0
   10308:	d11a      	bne.n	10340 <estimator_update_ir_estim+0x28c>
   1030a:	e118      	b.n	1053e <estimator_update_ir_estim+0x48a>
   1030c:	f3af 8000 	nop.w
   10310:	9999999a 	.word	0x9999999a
   10314:	3fb99999 	.word	0x3fb99999
   10318:	54442d18 	.word	0x54442d18
   1031c:	401921fb 	.word	0x401921fb
   10320:	54442d18 	.word	0x54442d18
   10324:	400921fb 	.word	0x400921fb
   10328:	54442d18 	.word	0x54442d18
   1032c:	c00921fb 	.word	0xc00921fb
   10330:	51eb851f 	.word	0x51eb851f
   10334:	40239eb8 	.word	0x40239eb8
   10338:	9999999a 	.word	0x9999999a
   1033c:	3fa99999 	.word	0x3fa99999
   10340:	f240 1308 	movw	r3, #264	; 0x108
   10344:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10348:	881b      	ldrh	r3, [r3, #0]
   1034a:	b21b      	sxth	r3, r3
   1034c:	425b      	negs	r3, r3
   1034e:	0fda      	lsrs	r2, r3, #31
   10350:	4413      	add	r3, r2
   10352:	105b      	asrs	r3, r3, #1
   10354:	461a      	mov	r2, r3
   10356:	f24b 7358 	movw	r3, #46936	; 0xb758
   1035a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1035e:	881b      	ldrh	r3, [r3, #0]
   10360:	b21b      	sxth	r3, r3
   10362:	429a      	cmp	r2, r3
   10364:	f280 8098 	bge.w	10498 <estimator_update_ir_estim+0x3e4>
   10368:	f240 1308 	movw	r3, #264	; 0x108
   1036c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10370:	881b      	ldrh	r3, [r3, #0]
   10372:	b21b      	sxth	r3, r3
   10374:	0fda      	lsrs	r2, r3, #31
   10376:	4413      	add	r3, r2
   10378:	105b      	asrs	r3, r3, #1
   1037a:	b29a      	uxth	r2, r3
   1037c:	f24b 7358 	movw	r3, #46936	; 0xb758
   10380:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10384:	881b      	ldrh	r3, [r3, #0]
   10386:	b212      	sxth	r2, r2
   10388:	b21b      	sxth	r3, r3
   1038a:	429a      	cmp	r2, r3
   1038c:	f340 8084 	ble.w	10498 <estimator_update_ir_estim+0x3e4>
	sum_xy = estimator_rad * estimator_ir + RHO * sum_xy;
   10390:	f64b 23b4 	movw	r3, #47796	; 0xbab4
   10394:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10398:	681a      	ldr	r2, [r3, #0]
   1039a:	f64b 23b0 	movw	r3, #47792	; 0xbab0
   1039e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103a2:	681b      	ldr	r3, [r3, #0]
   103a4:	4610      	mov	r0, r2
   103a6:	4619      	mov	r1, r3
   103a8:	f002 ffb2 	bl	13310 <__aeabi_fmul>
   103ac:	4603      	mov	r3, r0
   103ae:	4618      	mov	r0, r3
   103b0:	f002 fb1a 	bl	129e8 <__aeabi_f2d>
   103b4:	4604      	mov	r4, r0
   103b6:	460d      	mov	r5, r1
   103b8:	f64b 23c4 	movw	r3, #47812	; 0xbac4
   103bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103c0:	681b      	ldr	r3, [r3, #0]
   103c2:	4618      	mov	r0, r3
   103c4:	f002 fb10 	bl	129e8 <__aeabi_f2d>
   103c8:	4602      	mov	r2, r0
   103ca:	460b      	mov	r3, r1
   103cc:	4610      	mov	r0, r2
   103ce:	4619      	mov	r1, r3
   103d0:	a367      	add	r3, pc, #412	; (adr r3, 10570 <estimator_update_ir_estim+0x4bc>)
   103d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   103d6:	f002 fb5b 	bl	12a90 <__aeabi_dmul>
   103da:	4602      	mov	r2, r0
   103dc:	460b      	mov	r3, r1
   103de:	4620      	mov	r0, r4
   103e0:	4629      	mov	r1, r5
   103e2:	f002 f9a3 	bl	1272c <__adddf3>
   103e6:	4602      	mov	r2, r0
   103e8:	460b      	mov	r3, r1
   103ea:	4610      	mov	r0, r2
   103ec:	4619      	mov	r1, r3
   103ee:	f002 fe31 	bl	13054 <__aeabi_d2f>
   103f2:	4602      	mov	r2, r0
   103f4:	f64b 23c4 	movw	r3, #47812	; 0xbac4
   103f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103fc:	601a      	str	r2, [r3, #0]
	sum_xx = estimator_ir * estimator_ir + RHO * sum_xx;
   103fe:	f64b 23b0 	movw	r3, #47792	; 0xbab0
   10402:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10406:	681a      	ldr	r2, [r3, #0]
   10408:	f64b 23b0 	movw	r3, #47792	; 0xbab0
   1040c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10410:	681b      	ldr	r3, [r3, #0]
   10412:	4610      	mov	r0, r2
   10414:	4619      	mov	r1, r3
   10416:	f002 ff7b 	bl	13310 <__aeabi_fmul>
   1041a:	4603      	mov	r3, r0
   1041c:	4618      	mov	r0, r3
   1041e:	f002 fae3 	bl	129e8 <__aeabi_f2d>
   10422:	4604      	mov	r4, r0
   10424:	460d      	mov	r5, r1
   10426:	f64b 23c8 	movw	r3, #47816	; 0xbac8
   1042a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1042e:	681b      	ldr	r3, [r3, #0]
   10430:	4618      	mov	r0, r3
   10432:	f002 fad9 	bl	129e8 <__aeabi_f2d>
   10436:	4602      	mov	r2, r0
   10438:	460b      	mov	r3, r1
   1043a:	4610      	mov	r0, r2
   1043c:	4619      	mov	r1, r3
   1043e:	a34c      	add	r3, pc, #304	; (adr r3, 10570 <estimator_update_ir_estim+0x4bc>)
   10440:	e9d3 2300 	ldrd	r2, r3, [r3]
   10444:	f002 fb24 	bl	12a90 <__aeabi_dmul>
   10448:	4602      	mov	r2, r0
   1044a:	460b      	mov	r3, r1
   1044c:	4620      	mov	r0, r4
   1044e:	4629      	mov	r1, r5
   10450:	f002 f96c 	bl	1272c <__adddf3>
   10454:	4602      	mov	r2, r0
   10456:	460b      	mov	r3, r1
   10458:	4610      	mov	r0, r2
   1045a:	4619      	mov	r1, r3
   1045c:	f002 fdfa 	bl	13054 <__aeabi_d2f>
   10460:	4602      	mov	r2, r0
   10462:	f64b 23c8 	movw	r3, #47816	; 0xbac8
   10466:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1046a:	601a      	str	r2, [r3, #0]
	else if (result > IR_RAD_OF_IR_MAX_VALUE)
	  estimator_rad_of_ir = IR_RAD_OF_IR_MAX_VALUE;
	else
	  estimator_rad_of_ir = result;
#else
	  estimator_rad_of_ir = sum_xy / sum_xx;
   1046c:	f64b 23c4 	movw	r3, #47812	; 0xbac4
   10470:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10474:	681a      	ldr	r2, [r3, #0]
   10476:	f64b 23c8 	movw	r3, #47816	; 0xbac8
   1047a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1047e:	681b      	ldr	r3, [r3, #0]
   10480:	4610      	mov	r0, r2
   10482:	4619      	mov	r1, r3
   10484:	f002 fff8 	bl	13478 <__aeabi_fdiv>
   10488:	4603      	mov	r3, r0
   1048a:	461a      	mov	r2, r3
   1048c:	f64b 23ac 	movw	r3, #47788	; 0xbaac
   10490:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10494:	601a      	str	r2, [r3, #0]
   10496:	e052      	b.n	1053e <estimator_update_ir_estim+0x48a>
   10498:	e051      	b.n	1053e <estimator_update_ir_estim+0x48a>
#endif
      }
    } 
  } else {
    initialized = TRUE;
   1049a:	f64b 23b8 	movw	r3, #47800	; 0xbab8
   1049e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104a2:	2201      	movs	r2, #1
   104a4:	701a      	strb	r2, [r3, #0]
    init_ir2 = ir_contrast;
   104a6:	f240 1308 	movw	r3, #264	; 0x108
   104aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104ae:	881b      	ldrh	r3, [r3, #0]
   104b0:	b21b      	sxth	r3, r3
   104b2:	4618      	mov	r0, r3
   104b4:	f002 fed8 	bl	13268 <__aeabi_i2f>
   104b8:	4603      	mov	r3, r0
   104ba:	603b      	str	r3, [r7, #0]
    init_ir2 = init_ir2*init_ir2;
   104bc:	6838      	ldr	r0, [r7, #0]
   104be:	6839      	ldr	r1, [r7, #0]
   104c0:	f002 ff26 	bl	13310 <__aeabi_fmul>
   104c4:	4603      	mov	r3, r0
   104c6:	603b      	str	r3, [r7, #0]
    sum_xy = INIT_WEIGHT * estimator_rad_of_ir * init_ir2;
   104c8:	f64b 23ac 	movw	r3, #47788	; 0xbaac
   104cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104d0:	681b      	ldr	r3, [r3, #0]
   104d2:	4618      	mov	r0, r3
   104d4:	f002 fa88 	bl	129e8 <__aeabi_f2d>
   104d8:	4602      	mov	r2, r0
   104da:	460b      	mov	r3, r1
   104dc:	4610      	mov	r0, r2
   104de:	4619      	mov	r1, r3
   104e0:	f04f 0200 	mov.w	r2, #0
   104e4:	f04f 0300 	mov.w	r3, #0
   104e8:	f2c4 0359 	movt	r3, #16473	; 0x4059
   104ec:	f002 fad0 	bl	12a90 <__aeabi_dmul>
   104f0:	4602      	mov	r2, r0
   104f2:	460b      	mov	r3, r1
   104f4:	4614      	mov	r4, r2
   104f6:	461d      	mov	r5, r3
   104f8:	6838      	ldr	r0, [r7, #0]
   104fa:	f002 fa75 	bl	129e8 <__aeabi_f2d>
   104fe:	4602      	mov	r2, r0
   10500:	460b      	mov	r3, r1
   10502:	4620      	mov	r0, r4
   10504:	4629      	mov	r1, r5
   10506:	f002 fac3 	bl	12a90 <__aeabi_dmul>
   1050a:	4602      	mov	r2, r0
   1050c:	460b      	mov	r3, r1
   1050e:	4610      	mov	r0, r2
   10510:	4619      	mov	r1, r3
   10512:	f002 fd9f 	bl	13054 <__aeabi_d2f>
   10516:	4602      	mov	r2, r0
   10518:	f64b 23c4 	movw	r3, #47812	; 0xbac4
   1051c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10520:	601a      	str	r2, [r3, #0]
    sum_xx = INIT_WEIGHT * init_ir2;
   10522:	6838      	ldr	r0, [r7, #0]
   10524:	f04f 0100 	mov.w	r1, #0
   10528:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   1052c:	f002 fef0 	bl	13310 <__aeabi_fmul>
   10530:	4603      	mov	r3, r0
   10532:	461a      	mov	r2, r3
   10534:	f64b 23c8 	movw	r3, #47816	; 0xbac8
   10538:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1053c:	601a      	str	r2, [r3, #0]
  }

  last_hspeed_dir = estimator_hspeed_dir;
   1053e:	f64b 23a8 	movw	r3, #47784	; 0xbaa8
   10542:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10546:	681a      	ldr	r2, [r3, #0]
   10548:	f64b 23c0 	movw	r3, #47808	; 0xbac0
   1054c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10550:	601a      	str	r2, [r3, #0]
  last_t = gps_ftow;
   10552:	f24b 6328 	movw	r3, #46632	; 0xb628
   10556:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1055a:	681a      	ldr	r2, [r3, #0]
   1055c:	f64b 23bc 	movw	r3, #47804	; 0xbabc
   10560:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10564:	601a      	str	r2, [r3, #0]
}
   10566:	3710      	adds	r7, #16
   10568:	46bd      	mov	sp, r7
   1056a:	bdb0      	pop	{r4, r5, r7, pc}
   1056c:	f3af 8000 	nop.w
   10570:	d916872b 	.word	0xd916872b
   10574:	3feff7ce 	.word	0x3feff7ce

00010578 <estimator_update_state_gps>:


void estimator_update_state_gps( void ) {
   10578:	b580      	push	{r7, lr}
   1057a:	af00      	add	r7, sp, #0
  if (GPS_FIX_VALID(gps_mode)) {
   1057c:	f24b 634c 	movw	r3, #46668	; 0xb64c
   10580:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10584:	781b      	ldrb	r3, [r3, #0]
   10586:	f003 0320 	and.w	r3, r3, #32
   1058a:	2b00      	cmp	r3, #0
   1058c:	d044      	beq.n	10618 <estimator_update_state_gps+0xa0>
    EstimatorSetPos(gps_east, gps_north, gps_falt);
   1058e:	f24b 6344 	movw	r3, #46660	; 0xb644
   10592:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10596:	681a      	ldr	r2, [r3, #0]
   10598:	f64b 236c 	movw	r3, #47724	; 0xba6c
   1059c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105a0:	601a      	str	r2, [r3, #0]
   105a2:	f24b 6348 	movw	r3, #46664	; 0xb648
   105a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105aa:	681a      	ldr	r2, [r3, #0]
   105ac:	f64b 2370 	movw	r3, #47728	; 0xba70
   105b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105b4:	601a      	str	r2, [r3, #0]
   105b6:	f24b 632c 	movw	r3, #46636	; 0xb62c
   105ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105be:	681a      	ldr	r2, [r3, #0]
   105c0:	f64b 2374 	movw	r3, #47732	; 0xba74
   105c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105c8:	601a      	str	r2, [r3, #0]
    EstimatorSetSpeedPol(gps_fspeed, gps_fcourse, gps_fclimb);
   105ca:	f24b 6330 	movw	r3, #46640	; 0xb630
   105ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105d2:	681a      	ldr	r2, [r3, #0]
   105d4:	f64b 23a4 	movw	r3, #47780	; 0xbaa4
   105d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105dc:	601a      	str	r2, [r3, #0]
   105de:	f24b 6338 	movw	r3, #46648	; 0xb638
   105e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105e6:	681a      	ldr	r2, [r3, #0]
   105e8:	f64b 23a8 	movw	r3, #47784	; 0xbaa8
   105ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105f0:	601a      	str	r2, [r3, #0]
   105f2:	f24b 6334 	movw	r3, #46644	; 0xb634
   105f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105fa:	681a      	ldr	r2, [r3, #0]
   105fc:	f64b 238c 	movw	r3, #47756	; 0xba8c
   10600:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10604:	601a      	str	r2, [r3, #0]
    
    if (estimator_flight_time)
   10606:	f64b 239c 	movw	r3, #47772	; 0xba9c
   1060a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1060e:	881b      	ldrh	r3, [r3, #0]
   10610:	2b00      	cmp	r3, #0
   10612:	d001      	beq.n	10618 <estimator_update_state_gps+0xa0>
      estimator_update_ir_estim();
   10614:	f7ff fd4e 	bl	100b4 <estimator_update_ir_estim>
  }
}
   10618:	bd80      	pop	{r7, pc}
   1061a:	bf00      	nop

0001061c <estimator_propagate_state>:

void estimator_propagate_state( void ) {
   1061c:	b480      	push	{r7}
   1061e:	af00      	add	r7, sp, #0
  
}
   10620:	46bd      	mov	sp, r7
   10622:	f85d 7b04 	ldr.w	r7, [sp], #4
   10626:	4770      	bx	lr

00010628 <inflight_calib>:
/* Please DO NOT EDIT */

#ifndef INFLIGHT_CALIB_H
#define INFLIGHT_CALIB_H 

void inflight_calib(bool_t mode_changed) {
   10628:	b5b0      	push	{r4, r5, r7, lr}
   1062a:	b082      	sub	sp, #8
   1062c:	af00      	add	r7, sp, #0
   1062e:	4603      	mov	r3, r0
   10630:	71fb      	strb	r3, [r7, #7]
  if (pprz_mode == PPRZ_MODE_AUTO1) {
   10632:	f24b 439c 	movw	r3, #46236	; 0xb49c
   10636:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1063a:	781b      	ldrb	r3, [r3, #0]
   1063c:	2b01      	cmp	r3, #1
   1063e:	f040 80e0 	bne.w	10802 <inflight_calib+0x1da>
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   10642:	f64b 23cc 	movw	r3, #47820	; 0xbacc
   10646:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1064a:	781b      	ldrb	r3, [r3, #0]
   1064c:	2b02      	cmp	r3, #2
   1064e:	d168      	bne.n	10722 <inflight_calib+0xfa>
      static int16_t ir_pitch_neutral_init;
      if (mode_changed) {
   10650:	79fb      	ldrb	r3, [r7, #7]
   10652:	2b00      	cmp	r3, #0
   10654:	d013      	beq.n	1067e <inflight_calib+0x56>
        ir_pitch_neutral_init = ir_pitch_neutral;
   10656:	f240 130c 	movw	r3, #268	; 0x10c
   1065a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1065e:	881a      	ldrh	r2, [r3, #0]
   10660:	f64b 23d2 	movw	r3, #47826	; 0xbad2
   10664:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10668:	801a      	strh	r2, [r3, #0]
        slider1_init = from_fbw.channels[RADIO_GAIN1];
   1066a:	f24b 53c0 	movw	r3, #46528	; 0xb5c0
   1066e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10672:	895a      	ldrh	r2, [r3, #10]
   10674:	f64b 23ce 	movw	r3, #47822	; 0xbace
   10678:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1067c:	801a      	strh	r2, [r3, #0]
      }
      ir_pitch_neutral = ParamValInt16(ir_pitch_neutral_init, 60.000000, from_fbw.channels[RADIO_GAIN1], slider1_init);
   1067e:	f24b 53c0 	movw	r3, #46528	; 0xb5c0
   10682:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10686:	895b      	ldrh	r3, [r3, #10]
   10688:	b21a      	sxth	r2, r3
   1068a:	f64b 23ce 	movw	r3, #47822	; 0xbace
   1068e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10692:	881b      	ldrh	r3, [r3, #0]
   10694:	b21b      	sxth	r3, r3
   10696:	1ad3      	subs	r3, r2, r3
   10698:	4618      	mov	r0, r3
   1069a:	f002 fde5 	bl	13268 <__aeabi_i2f>
   1069e:	4603      	mov	r3, r0
   106a0:	4618      	mov	r0, r3
   106a2:	f002 f9a1 	bl	129e8 <__aeabi_f2d>
   106a6:	4602      	mov	r2, r0
   106a8:	460b      	mov	r3, r1
   106aa:	4610      	mov	r0, r2
   106ac:	4619      	mov	r1, r3
   106ae:	f04f 0200 	mov.w	r2, #0
   106b2:	f04f 0300 	mov.w	r3, #0
   106b6:	f2c4 034e 	movt	r3, #16462	; 0x404e
   106ba:	f002 f9e9 	bl	12a90 <__aeabi_dmul>
   106be:	4602      	mov	r2, r0
   106c0:	460b      	mov	r3, r1
   106c2:	4610      	mov	r0, r2
   106c4:	4619      	mov	r1, r3
   106c6:	f04f 0200 	mov.w	r2, #0
   106ca:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   106ce:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   106d2:	f002 fb07 	bl	12ce4 <__aeabi_ddiv>
   106d6:	4602      	mov	r2, r0
   106d8:	460b      	mov	r3, r1
   106da:	4610      	mov	r0, r2
   106dc:	4619      	mov	r1, r3
   106de:	f002 fc71 	bl	12fc4 <__aeabi_d2iz>
   106e2:	4603      	mov	r3, r0
   106e4:	b29b      	uxth	r3, r3
   106e6:	b29a      	uxth	r2, r3
   106e8:	f64b 23d2 	movw	r3, #47826	; 0xbad2
   106ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106f0:	881b      	ldrh	r3, [r3, #0]
   106f2:	b29b      	uxth	r3, r3
   106f4:	4413      	add	r3, r2
   106f6:	b29b      	uxth	r3, r3
   106f8:	b29a      	uxth	r2, r3
   106fa:	f240 130c 	movw	r3, #268	; 0x10c
   106fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10702:	801a      	strh	r2, [r3, #0]
      slider_1_val = (float)ir_pitch_neutral;
   10704:	f240 130c 	movw	r3, #268	; 0x10c
   10708:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1070c:	881b      	ldrh	r3, [r3, #0]
   1070e:	b21b      	sxth	r3, r3
   10710:	4618      	mov	r0, r3
   10712:	f002 fda9 	bl	13268 <__aeabi_i2f>
   10716:	4602      	mov	r2, r0
   10718:	f24b 43a8 	movw	r3, #46248	; 0xb4a8
   1071c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10720:	601a      	str	r2, [r3, #0]
    }
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   10722:	f64b 23cc 	movw	r3, #47820	; 0xbacc
   10726:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1072a:	781b      	ldrb	r3, [r3, #0]
   1072c:	2b02      	cmp	r3, #2
   1072e:	d168      	bne.n	10802 <inflight_calib+0x1da>
      static int16_t ir_roll_neutral_init;
      if (mode_changed) {
   10730:	79fb      	ldrb	r3, [r7, #7]
   10732:	2b00      	cmp	r3, #0
   10734:	d013      	beq.n	1075e <inflight_calib+0x136>
        ir_roll_neutral_init = ir_roll_neutral;
   10736:	f240 130a 	movw	r3, #266	; 0x10a
   1073a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1073e:	881a      	ldrh	r2, [r3, #0]
   10740:	f64b 23d4 	movw	r3, #47828	; 0xbad4
   10744:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10748:	801a      	strh	r2, [r3, #0]
        slider2_init = from_fbw.channels[RADIO_GAIN2];
   1074a:	f24b 53c0 	movw	r3, #46528	; 0xb5c0
   1074e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10752:	899a      	ldrh	r2, [r3, #12]
   10754:	f64b 23d0 	movw	r3, #47824	; 0xbad0
   10758:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1075c:	801a      	strh	r2, [r3, #0]
      }
      ir_roll_neutral = ParamValInt16(ir_roll_neutral_init, -60.000000, from_fbw.channels[RADIO_GAIN2], slider2_init);
   1075e:	f24b 53c0 	movw	r3, #46528	; 0xb5c0
   10762:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10766:	899b      	ldrh	r3, [r3, #12]
   10768:	b21a      	sxth	r2, r3
   1076a:	f64b 23d0 	movw	r3, #47824	; 0xbad0
   1076e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10772:	881b      	ldrh	r3, [r3, #0]
   10774:	b21b      	sxth	r3, r3
   10776:	1ad3      	subs	r3, r2, r3
   10778:	4618      	mov	r0, r3
   1077a:	f002 fd75 	bl	13268 <__aeabi_i2f>
   1077e:	4603      	mov	r3, r0
   10780:	4618      	mov	r0, r3
   10782:	f002 f931 	bl	129e8 <__aeabi_f2d>
   10786:	4602      	mov	r2, r0
   10788:	460b      	mov	r3, r1
   1078a:	4610      	mov	r0, r2
   1078c:	4619      	mov	r1, r3
   1078e:	f04f 0200 	mov.w	r2, #0
   10792:	f04f 0300 	mov.w	r3, #0
   10796:	f2cc 034e 	movt	r3, #49230	; 0xc04e
   1079a:	f002 f979 	bl	12a90 <__aeabi_dmul>
   1079e:	4602      	mov	r2, r0
   107a0:	460b      	mov	r3, r1
   107a2:	4610      	mov	r0, r2
   107a4:	4619      	mov	r1, r3
   107a6:	f04f 0200 	mov.w	r2, #0
   107aa:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   107ae:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   107b2:	f002 fa97 	bl	12ce4 <__aeabi_ddiv>
   107b6:	4602      	mov	r2, r0
   107b8:	460b      	mov	r3, r1
   107ba:	4610      	mov	r0, r2
   107bc:	4619      	mov	r1, r3
   107be:	f002 fc01 	bl	12fc4 <__aeabi_d2iz>
   107c2:	4603      	mov	r3, r0
   107c4:	b29b      	uxth	r3, r3
   107c6:	b29a      	uxth	r2, r3
   107c8:	f64b 23d4 	movw	r3, #47828	; 0xbad4
   107cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107d0:	881b      	ldrh	r3, [r3, #0]
   107d2:	b29b      	uxth	r3, r3
   107d4:	4413      	add	r3, r2
   107d6:	b29b      	uxth	r3, r3
   107d8:	b29a      	uxth	r2, r3
   107da:	f240 130a 	movw	r3, #266	; 0x10a
   107de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107e2:	801a      	strh	r2, [r3, #0]
      slider_2_val = (float)ir_roll_neutral;
   107e4:	f240 130a 	movw	r3, #266	; 0x10a
   107e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107ec:	881b      	ldrh	r3, [r3, #0]
   107ee:	b21b      	sxth	r3, r3
   107f0:	4618      	mov	r0, r3
   107f2:	f002 fd39 	bl	13268 <__aeabi_i2f>
   107f6:	4602      	mov	r2, r0
   107f8:	f24b 43ac 	movw	r3, #46252	; 0xb4ac
   107fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10800:	601a      	str	r2, [r3, #0]
    }
  }
  if (pprz_mode == PPRZ_MODE_AUTO2) {
   10802:	f24b 439c 	movw	r3, #46236	; 0xb49c
   10806:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1080a:	781b      	ldrb	r3, [r3, #0]
   1080c:	2b02      	cmp	r3, #2
   1080e:	f040 80da 	bne.w	109c6 <inflight_calib+0x39e>
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   10812:	f64b 23cc 	movw	r3, #47820	; 0xbacc
   10816:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1081a:	781b      	ldrb	r3, [r3, #0]
   1081c:	2b02      	cmp	r3, #2
   1081e:	d165      	bne.n	108ec <inflight_calib+0x2c4>
      static float course_pgain_init;
      if (mode_changed) {
   10820:	79fb      	ldrb	r3, [r7, #7]
   10822:	2b00      	cmp	r3, #0
   10824:	d013      	beq.n	1084e <inflight_calib+0x226>
        course_pgain_init = course_pgain;
   10826:	f240 1320 	movw	r3, #288	; 0x120
   1082a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1082e:	681a      	ldr	r2, [r3, #0]
   10830:	f64b 23d8 	movw	r3, #47832	; 0xbad8
   10834:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10838:	601a      	str	r2, [r3, #0]
        slider1_init = from_fbw.channels[RADIO_GAIN1];
   1083a:	f24b 53c0 	movw	r3, #46528	; 0xb5c0
   1083e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10842:	895a      	ldrh	r2, [r3, #10]
   10844:	f64b 23ce 	movw	r3, #47822	; 0xbace
   10848:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1084c:	801a      	strh	r2, [r3, #0]
      }
      course_pgain = ParamValFloat(course_pgain_init, 0.100000, from_fbw.channels[RADIO_GAIN1], slider1_init);
   1084e:	f64b 23d8 	movw	r3, #47832	; 0xbad8
   10852:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10856:	681b      	ldr	r3, [r3, #0]
   10858:	4618      	mov	r0, r3
   1085a:	f002 f8c5 	bl	129e8 <__aeabi_f2d>
   1085e:	4604      	mov	r4, r0
   10860:	460d      	mov	r5, r1
   10862:	f24b 53c0 	movw	r3, #46528	; 0xb5c0
   10866:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1086a:	895b      	ldrh	r3, [r3, #10]
   1086c:	b21a      	sxth	r2, r3
   1086e:	f64b 23ce 	movw	r3, #47822	; 0xbace
   10872:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10876:	881b      	ldrh	r3, [r3, #0]
   10878:	b21b      	sxth	r3, r3
   1087a:	1ad3      	subs	r3, r2, r3
   1087c:	4618      	mov	r0, r3
   1087e:	f002 fcf3 	bl	13268 <__aeabi_i2f>
   10882:	4603      	mov	r3, r0
   10884:	4618      	mov	r0, r3
   10886:	f002 f8af 	bl	129e8 <__aeabi_f2d>
   1088a:	4602      	mov	r2, r0
   1088c:	460b      	mov	r3, r1
   1088e:	4610      	mov	r0, r2
   10890:	4619      	mov	r1, r3
   10892:	a34f      	add	r3, pc, #316	; (adr r3, 109d0 <inflight_calib+0x3a8>)
   10894:	e9d3 2300 	ldrd	r2, r3, [r3]
   10898:	f002 f8fa 	bl	12a90 <__aeabi_dmul>
   1089c:	4602      	mov	r2, r0
   1089e:	460b      	mov	r3, r1
   108a0:	4610      	mov	r0, r2
   108a2:	4619      	mov	r1, r3
   108a4:	f04f 0200 	mov.w	r2, #0
   108a8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   108ac:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   108b0:	f002 fa18 	bl	12ce4 <__aeabi_ddiv>
   108b4:	4602      	mov	r2, r0
   108b6:	460b      	mov	r3, r1
   108b8:	4620      	mov	r0, r4
   108ba:	4629      	mov	r1, r5
   108bc:	f001 ff36 	bl	1272c <__adddf3>
   108c0:	4602      	mov	r2, r0
   108c2:	460b      	mov	r3, r1
   108c4:	4610      	mov	r0, r2
   108c6:	4619      	mov	r1, r3
   108c8:	f002 fbc4 	bl	13054 <__aeabi_d2f>
   108cc:	4602      	mov	r2, r0
   108ce:	f240 1320 	movw	r3, #288	; 0x120
   108d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108d6:	601a      	str	r2, [r3, #0]
      slider_1_val = (float)course_pgain;
   108d8:	f240 1320 	movw	r3, #288	; 0x120
   108dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108e0:	681a      	ldr	r2, [r3, #0]
   108e2:	f24b 43a8 	movw	r3, #46248	; 0xb4a8
   108e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108ea:	601a      	str	r2, [r3, #0]
    }
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   108ec:	f64b 23cc 	movw	r3, #47820	; 0xbacc
   108f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108f4:	781b      	ldrb	r3, [r3, #0]
   108f6:	2b02      	cmp	r3, #2
   108f8:	d165      	bne.n	109c6 <inflight_calib+0x39e>
      static float max_roll_init;
      if (mode_changed) {
   108fa:	79fb      	ldrb	r3, [r7, #7]
   108fc:	2b00      	cmp	r3, #0
   108fe:	d013      	beq.n	10928 <inflight_calib+0x300>
        max_roll_init = max_roll;
   10900:	f240 1324 	movw	r3, #292	; 0x124
   10904:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10908:	681a      	ldr	r2, [r3, #0]
   1090a:	f64b 23dc 	movw	r3, #47836	; 0xbadc
   1090e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10912:	601a      	str	r2, [r3, #0]
        slider2_init = from_fbw.channels[RADIO_GAIN2];
   10914:	f24b 53c0 	movw	r3, #46528	; 0xb5c0
   10918:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1091c:	899a      	ldrh	r2, [r3, #12]
   1091e:	f64b 23d0 	movw	r3, #47824	; 0xbad0
   10922:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10926:	801a      	strh	r2, [r3, #0]
      }
      max_roll = ParamValFloat(max_roll_init, -0.200000, from_fbw.channels[RADIO_GAIN2], slider2_init);
   10928:	f64b 23dc 	movw	r3, #47836	; 0xbadc
   1092c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10930:	681b      	ldr	r3, [r3, #0]
   10932:	4618      	mov	r0, r3
   10934:	f002 f858 	bl	129e8 <__aeabi_f2d>
   10938:	4604      	mov	r4, r0
   1093a:	460d      	mov	r5, r1
   1093c:	f24b 53c0 	movw	r3, #46528	; 0xb5c0
   10940:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10944:	899b      	ldrh	r3, [r3, #12]
   10946:	b21a      	sxth	r2, r3
   10948:	f64b 23d0 	movw	r3, #47824	; 0xbad0
   1094c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10950:	881b      	ldrh	r3, [r3, #0]
   10952:	b21b      	sxth	r3, r3
   10954:	1ad3      	subs	r3, r2, r3
   10956:	4618      	mov	r0, r3
   10958:	f002 fc86 	bl	13268 <__aeabi_i2f>
   1095c:	4603      	mov	r3, r0
   1095e:	4618      	mov	r0, r3
   10960:	f002 f842 	bl	129e8 <__aeabi_f2d>
   10964:	4602      	mov	r2, r0
   10966:	460b      	mov	r3, r1
   10968:	4610      	mov	r0, r2
   1096a:	4619      	mov	r1, r3
   1096c:	a31a      	add	r3, pc, #104	; (adr r3, 109d8 <inflight_calib+0x3b0>)
   1096e:	e9d3 2300 	ldrd	r2, r3, [r3]
   10972:	f002 f88d 	bl	12a90 <__aeabi_dmul>
   10976:	4602      	mov	r2, r0
   10978:	460b      	mov	r3, r1
   1097a:	4610      	mov	r0, r2
   1097c:	4619      	mov	r1, r3
   1097e:	f04f 0200 	mov.w	r2, #0
   10982:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   10986:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   1098a:	f002 f9ab 	bl	12ce4 <__aeabi_ddiv>
   1098e:	4602      	mov	r2, r0
   10990:	460b      	mov	r3, r1
   10992:	4620      	mov	r0, r4
   10994:	4629      	mov	r1, r5
   10996:	f001 fec9 	bl	1272c <__adddf3>
   1099a:	4602      	mov	r2, r0
   1099c:	460b      	mov	r3, r1
   1099e:	4610      	mov	r0, r2
   109a0:	4619      	mov	r1, r3
   109a2:	f002 fb57 	bl	13054 <__aeabi_d2f>
   109a6:	4602      	mov	r2, r0
   109a8:	f240 1324 	movw	r3, #292	; 0x124
   109ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109b0:	601a      	str	r2, [r3, #0]
      slider_2_val = (float)max_roll;
   109b2:	f240 1324 	movw	r3, #292	; 0x124
   109b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109ba:	681a      	ldr	r2, [r3, #0]
   109bc:	f24b 43ac 	movw	r3, #46252	; 0xb4ac
   109c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109c4:	601a      	str	r2, [r3, #0]
    }
  }
}
   109c6:	3708      	adds	r7, #8
   109c8:	46bd      	mov	sp, r7
   109ca:	bdb0      	pop	{r4, r5, r7, pc}
   109cc:	f3af 8000 	nop.w
   109d0:	9999999a 	.word	0x9999999a
   109d4:	3fb99999 	.word	0x3fb99999
   109d8:	9999999a 	.word	0x9999999a
   109dc:	bfc99999 	.word	0xbfc99999

000109e0 <pp_atan2>:
 *
 */
#include <math.h>

double pp_atan2(double x, double y)
{
   109e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
   109e4:	b08e      	sub	sp, #56	; 0x38
   109e6:	af00      	add	r7, sp, #0
   109e8:	e9c7 0102 	strd	r0, r1, [r7, #8]
   109ec:	e9c7 2300 	strd	r2, r3, [r7]
	double coeff_1 = M_PI/4;
   109f0:	a357      	add	r3, pc, #348	; (adr r3, 10b50 <pp_atan2+0x170>)
   109f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   109f6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double coeff_2 = 3*coeff_1;
   109fa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   109fe:	f04f 0200 	mov.w	r2, #0
   10a02:	f04f 0300 	mov.w	r3, #0
   10a06:	f2c4 0308 	movt	r3, #16392	; 0x4008
   10a0a:	f002 f841 	bl	12a90 <__aeabi_dmul>
   10a0e:	4602      	mov	r2, r0
   10a10:	460b      	mov	r3, r1
   10a12:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double abs_y = fabs(y)+1e-10;
   10a16:	e9d7 0100 	ldrd	r0, r1, [r7]
   10a1a:	f04f 0200 	mov.w	r2, #0
   10a1e:	f04f 0300 	mov.w	r3, #0
   10a22:	f002 faa7 	bl	12f74 <__aeabi_dcmplt>
   10a26:	4603      	mov	r3, r0
   10a28:	2b00      	cmp	r3, #0
   10a2a:	d009      	beq.n	10a40 <pp_atan2+0x60>
   10a2c:	a14a      	add	r1, pc, #296	; (adr r1, 10b58 <pp_atan2+0x178>)
   10a2e:	e9d1 0100 	ldrd	r0, r1, [r1]
   10a32:	e9d7 2300 	ldrd	r2, r3, [r7]
   10a36:	f001 fe77 	bl	12728 <__aeabi_dsub>
   10a3a:	4602      	mov	r2, r0
   10a3c:	460b      	mov	r3, r1
   10a3e:	e008      	b.n	10a52 <pp_atan2+0x72>
   10a40:	e9d7 0100 	ldrd	r0, r1, [r7]
   10a44:	a344      	add	r3, pc, #272	; (adr r3, 10b58 <pp_atan2+0x178>)
   10a46:	e9d3 2300 	ldrd	r2, r3, [r3]
   10a4a:	f001 fe6f 	bl	1272c <__adddf3>
   10a4e:	4602      	mov	r2, r0
   10a50:	460b      	mov	r3, r1
   10a52:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double angle, r;
	if(x>0)
   10a56:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   10a5a:	f04f 0200 	mov.w	r2, #0
   10a5e:	f04f 0300 	mov.w	r3, #0
   10a62:	f002 faa5 	bl	12fb0 <__aeabi_dcmpgt>
   10a66:	4603      	mov	r3, r0
   10a68:	2b00      	cmp	r3, #0
   10a6a:	d02a      	beq.n	10ac2 <pp_atan2+0xe2>
	{
		r = (x - abs_y)/(x + abs_y);
   10a6c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   10a70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   10a74:	f001 fe58 	bl	12728 <__aeabi_dsub>
   10a78:	4602      	mov	r2, r0
   10a7a:	460b      	mov	r3, r1
   10a7c:	4690      	mov	r8, r2
   10a7e:	4699      	mov	r9, r3
   10a80:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   10a84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   10a88:	f001 fe50 	bl	1272c <__adddf3>
   10a8c:	4602      	mov	r2, r0
   10a8e:	460b      	mov	r3, r1
   10a90:	4640      	mov	r0, r8
   10a92:	4649      	mov	r1, r9
   10a94:	f002 f926 	bl	12ce4 <__aeabi_ddiv>
   10a98:	4602      	mov	r2, r0
   10a9a:	460b      	mov	r3, r1
   10a9c:	e9c7 2304 	strd	r2, r3, [r7, #16]
		angle = coeff_1 - coeff_1*r;
   10aa0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   10aa4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   10aa8:	f001 fff2 	bl	12a90 <__aeabi_dmul>
   10aac:	4602      	mov	r2, r0
   10aae:	460b      	mov	r3, r1
   10ab0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   10ab4:	f001 fe38 	bl	12728 <__aeabi_dsub>
   10ab8:	4602      	mov	r2, r0
   10aba:	460b      	mov	r3, r1
   10abc:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
   10ac0:	e029      	b.n	10b16 <pp_atan2+0x136>
	}
	else
	{
		r = (x + abs_y)/(abs_y - x);
   10ac2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   10ac6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   10aca:	f001 fe2f 	bl	1272c <__adddf3>
   10ace:	4602      	mov	r2, r0
   10ad0:	460b      	mov	r3, r1
   10ad2:	4690      	mov	r8, r2
   10ad4:	4699      	mov	r9, r3
   10ad6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   10ada:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   10ade:	f001 fe23 	bl	12728 <__aeabi_dsub>
   10ae2:	4602      	mov	r2, r0
   10ae4:	460b      	mov	r3, r1
   10ae6:	4640      	mov	r0, r8
   10ae8:	4649      	mov	r1, r9
   10aea:	f002 f8fb 	bl	12ce4 <__aeabi_ddiv>
   10aee:	4602      	mov	r2, r0
   10af0:	460b      	mov	r3, r1
   10af2:	e9c7 2304 	strd	r2, r3, [r7, #16]
		angle = coeff_2 - coeff_1*r;
   10af6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   10afa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   10afe:	f001 ffc7 	bl	12a90 <__aeabi_dmul>
   10b02:	4602      	mov	r2, r0
   10b04:	460b      	mov	r3, r1
   10b06:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
   10b0a:	f001 fe0d 	bl	12728 <__aeabi_dsub>
   10b0e:	4602      	mov	r2, r0
   10b10:	460b      	mov	r3, r1
   10b12:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	}
	if(y<0)
   10b16:	e9d7 0100 	ldrd	r0, r1, [r7]
   10b1a:	f04f 0200 	mov.w	r2, #0
   10b1e:	f04f 0300 	mov.w	r3, #0
   10b22:	f002 fa27 	bl	12f74 <__aeabi_dcmplt>
   10b26:	4603      	mov	r3, r0
   10b28:	2b00      	cmp	r3, #0
   10b2a:	d004      	beq.n	10b36 <pp_atan2+0x156>
		return (-angle);
   10b2c:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   10b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10b30:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   10b34:	e001      	b.n	10b3a <pp_atan2+0x15a>
	else
		return angle;
   10b36:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
   10b3a:	4622      	mov	r2, r4
   10b3c:	462b      	mov	r3, r5
}
   10b3e:	4610      	mov	r0, r2
   10b40:	4619      	mov	r1, r3
   10b42:	3738      	adds	r7, #56	; 0x38
   10b44:	46bd      	mov	sp, r7
   10b46:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
   10b4a:	bf00      	nop
   10b4c:	f3af 8000 	nop.w
   10b50:	54442d18 	.word	0x54442d18
   10b54:	3fe921fb 	.word	0x3fe921fb
   10b58:	d9d7bdbb 	.word	0xd9d7bdbb
   10b5c:	3ddb7cdf 	.word	0x3ddb7cdf

00010b60 <pp_sin>:
 * Range: -pi/2 <= x <= pi/2
 * Precision: +/- .000,000,005
 */
 
double pp_sin(double x)
{
   10b60:	b5b0      	push	{r4, r5, r7, lr}
   10b62:	b08c      	sub	sp, #48	; 0x30
   10b64:	af00      	add	r7, sp, #0
   10b66:	e9c7 0100 	strd	r0, r1, [r7]
	double xi, y, q, q2;
	int sign;

	xi = x; sign = 1;
   10b6a:	e9d7 2300 	ldrd	r2, r3, [r7]
   10b6e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   10b72:	2301      	movs	r3, #1
   10b74:	627b      	str	r3, [r7, #36]	; 0x24
	while (xi < -1.57079632679489661923) xi += 6.28318530717958647692;
   10b76:	e00a      	b.n	10b8e <pp_sin+0x2e>
   10b78:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   10b7c:	a35a      	add	r3, pc, #360	; (adr r3, 10ce8 <pp_sin+0x188>)
   10b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
   10b82:	f001 fdd3 	bl	1272c <__adddf3>
   10b86:	4602      	mov	r2, r0
   10b88:	460b      	mov	r3, r1
   10b8a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   10b8e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   10b92:	a357      	add	r3, pc, #348	; (adr r3, 10cf0 <pp_sin+0x190>)
   10b94:	e9d3 2300 	ldrd	r2, r3, [r3]
   10b98:	f002 f9ec 	bl	12f74 <__aeabi_dcmplt>
   10b9c:	4603      	mov	r3, r0
   10b9e:	2b00      	cmp	r3, #0
   10ba0:	d1ea      	bne.n	10b78 <pp_sin+0x18>
	while (xi > 4.71238898038468985769) xi -= 6.28318530717958647692;
   10ba2:	e00a      	b.n	10bba <pp_sin+0x5a>
   10ba4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   10ba8:	a34f      	add	r3, pc, #316	; (adr r3, 10ce8 <pp_sin+0x188>)
   10baa:	e9d3 2300 	ldrd	r2, r3, [r3]
   10bae:	f001 fdbb 	bl	12728 <__aeabi_dsub>
   10bb2:	4602      	mov	r2, r0
   10bb4:	460b      	mov	r3, r1
   10bb6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   10bba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   10bbe:	a34e      	add	r3, pc, #312	; (adr r3, 10cf8 <pp_sin+0x198>)
   10bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
   10bc4:	f002 f9f4 	bl	12fb0 <__aeabi_dcmpgt>
   10bc8:	4603      	mov	r3, r0
   10bca:	2b00      	cmp	r3, #0
   10bcc:	d1ea      	bne.n	10ba4 <pp_sin+0x44>
	if (xi > 1.57079632679489661923) {
   10bce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   10bd2:	a34b      	add	r3, pc, #300	; (adr r3, 10d00 <pp_sin+0x1a0>)
   10bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
   10bd8:	f002 f9ea 	bl	12fb0 <__aeabi_dcmpgt>
   10bdc:	4603      	mov	r3, r0
   10bde:	2b00      	cmp	r3, #0
   10be0:	d00d      	beq.n	10bfe <pp_sin+0x9e>
		xi -= 3.141592653589793238462643;
   10be2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   10be6:	a348      	add	r3, pc, #288	; (adr r3, 10d08 <pp_sin+0x1a8>)
   10be8:	e9d3 2300 	ldrd	r2, r3, [r3]
   10bec:	f001 fd9c 	bl	12728 <__aeabi_dsub>
   10bf0:	4602      	mov	r2, r0
   10bf2:	460b      	mov	r3, r1
   10bf4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		sign = -1;
   10bf8:	f04f 33ff 	mov.w	r3, #4294967295
   10bfc:	627b      	str	r3, [r7, #36]	; 0x24
	}
	q = xi / 1.57079632679; q2 = q * q;
   10bfe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   10c02:	a343      	add	r3, pc, #268	; (adr r3, 10d10 <pp_sin+0x1b0>)
   10c04:	e9d3 2300 	ldrd	r2, r3, [r3]
   10c08:	f002 f86c 	bl	12ce4 <__aeabi_ddiv>
   10c0c:	4602      	mov	r2, r0
   10c0e:	460b      	mov	r3, r1
   10c10:	e9c7 2306 	strd	r2, r3, [r7, #24]
   10c14:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   10c18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   10c1c:	f001 ff38 	bl	12a90 <__aeabi_dmul>
   10c20:	4602      	mov	r2, r0
   10c22:	460b      	mov	r3, r1
   10c24:	e9c7 2304 	strd	r2, r3, [r7, #16]
	y = ((((.00015148419  * q2
   10c28:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   10c2c:	a33a      	add	r3, pc, #232	; (adr r3, 10d18 <pp_sin+0x1b8>)
   10c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
   10c32:	f001 ff2d 	bl	12a90 <__aeabi_dmul>
   10c36:	4602      	mov	r2, r0
   10c38:	460b      	mov	r3, r1
	      - .00467376557) * q2
   10c3a:	4610      	mov	r0, r2
   10c3c:	4619      	mov	r1, r3
   10c3e:	a338      	add	r3, pc, #224	; (adr r3, 10d20 <pp_sin+0x1c0>)
   10c40:	e9d3 2300 	ldrd	r2, r3, [r3]
   10c44:	f001 fd70 	bl	12728 <__aeabi_dsub>
   10c48:	4602      	mov	r2, r0
   10c4a:	460b      	mov	r3, r1
   10c4c:	4610      	mov	r0, r2
   10c4e:	4619      	mov	r1, r3
   10c50:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   10c54:	f001 ff1c 	bl	12a90 <__aeabi_dmul>
   10c58:	4602      	mov	r2, r0
   10c5a:	460b      	mov	r3, r1
	      + .07968967928) * q2
   10c5c:	4610      	mov	r0, r2
   10c5e:	4619      	mov	r1, r3
   10c60:	a331      	add	r3, pc, #196	; (adr r3, 10d28 <pp_sin+0x1c8>)
   10c62:	e9d3 2300 	ldrd	r2, r3, [r3]
   10c66:	f001 fd61 	bl	1272c <__adddf3>
   10c6a:	4602      	mov	r2, r0
   10c6c:	460b      	mov	r3, r1
   10c6e:	4610      	mov	r0, r2
   10c70:	4619      	mov	r1, r3
   10c72:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   10c76:	f001 ff0b 	bl	12a90 <__aeabi_dmul>
   10c7a:	4602      	mov	r2, r0
   10c7c:	460b      	mov	r3, r1
	      - .64596371106) * q2
   10c7e:	4610      	mov	r0, r2
   10c80:	4619      	mov	r1, r3
   10c82:	a32b      	add	r3, pc, #172	; (adr r3, 10d30 <pp_sin+0x1d0>)
   10c84:	e9d3 2300 	ldrd	r2, r3, [r3]
   10c88:	f001 fd4e 	bl	12728 <__aeabi_dsub>
   10c8c:	4602      	mov	r2, r0
   10c8e:	460b      	mov	r3, r1
   10c90:	4610      	mov	r0, r2
   10c92:	4619      	mov	r1, r3
   10c94:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   10c98:	f001 fefa 	bl	12a90 <__aeabi_dmul>
   10c9c:	4602      	mov	r2, r0
   10c9e:	460b      	mov	r3, r1
	      +1.57079631847) * q;
   10ca0:	4610      	mov	r0, r2
   10ca2:	4619      	mov	r1, r3
   10ca4:	a324      	add	r3, pc, #144	; (adr r3, 10d38 <pp_sin+0x1d8>)
   10ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
   10caa:	f001 fd3f 	bl	1272c <__adddf3>
   10cae:	4602      	mov	r2, r0
   10cb0:	460b      	mov	r3, r1
	if (xi > 1.57079632679489661923) {
		xi -= 3.141592653589793238462643;
		sign = -1;
	}
	q = xi / 1.57079632679; q2 = q * q;
	y = ((((.00015148419  * q2
   10cb2:	4610      	mov	r0, r2
   10cb4:	4619      	mov	r1, r3
   10cb6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   10cba:	f001 fee9 	bl	12a90 <__aeabi_dmul>
   10cbe:	4602      	mov	r2, r0
   10cc0:	460b      	mov	r3, r1
   10cc2:	e9c7 2302 	strd	r2, r3, [r7, #8]
	      - .00467376557) * q2
	      + .07968967928) * q2
	      - .64596371106) * q2
	      +1.57079631847) * q;
	return(sign < 0? -y : y);
   10cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10cc8:	2b00      	cmp	r3, #0
   10cca:	da04      	bge.n	10cd6 <pp_sin+0x176>
   10ccc:	68bc      	ldr	r4, [r7, #8]
   10cce:	68fb      	ldr	r3, [r7, #12]
   10cd0:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   10cd4:	e001      	b.n	10cda <pp_sin+0x17a>
   10cd6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
   10cda:	4622      	mov	r2, r4
   10cdc:	462b      	mov	r3, r5
}
   10cde:	4610      	mov	r0, r2
   10ce0:	4619      	mov	r1, r3
   10ce2:	3730      	adds	r7, #48	; 0x30
   10ce4:	46bd      	mov	sp, r7
   10ce6:	bdb0      	pop	{r4, r5, r7, pc}
   10ce8:	54442d18 	.word	0x54442d18
   10cec:	401921fb 	.word	0x401921fb
   10cf0:	54442d18 	.word	0x54442d18
   10cf4:	bff921fb 	.word	0xbff921fb
   10cf8:	7f3321d2 	.word	0x7f3321d2
   10cfc:	4012d97c 	.word	0x4012d97c
   10d00:	54442d18 	.word	0x54442d18
   10d04:	3ff921fb 	.word	0x3ff921fb
   10d08:	54442d18 	.word	0x54442d18
   10d0c:	400921fb 	.word	0x400921fb
   10d10:	5443d6f4 	.word	0x5443d6f4
   10d14:	3ff921fb 	.word	0x3ff921fb
   10d18:	48a890af 	.word	0x48a890af
   10d1c:	3f23daf7 	.word	0x3f23daf7
   10d20:	645b6d0e 	.word	0x645b6d0e
   10d24:	3f7324cc 	.word	0x3f7324cc
   10d28:	f65619a5 	.word	0xf65619a5
   10d2c:	3fb4668a 	.word	0x3fb4668a
   10d30:	16acf9cd 	.word	0x16acf9cd
   10d34:	3fe4abbc 	.word	0x3fe4abbc
   10d38:	520817f7 	.word	0x520817f7
   10d3c:	3ff921fb 	.word	0x3ff921fb

00010d40 <pp_sqrt>:

#define SQRT_PRECISION 5
double pp_sqrt(double n)
{
   10d40:	b480      	push	{r7}
   10d42:	b083      	sub	sp, #12
   10d44:	af00      	add	r7, sp, #0
   10d46:	e9c7 0100 	strd	r0, r1, [r7]
	/* perform the computation */
	for(i = 0; i < SQRT_PRECISION; i++)
		x = (x + n / x) / 2;
	return x;
#endif
}
   10d4a:	4610      	mov	r0, r2
   10d4c:	4619      	mov	r1, r3
   10d4e:	370c      	adds	r7, #12
   10d50:	46bd      	mov	sp, r7
   10d52:	f85d 7b04 	ldr.w	r7, [sp], #4
   10d56:	4770      	bx	lr

00010d58 <fbw_adc_buf_channel>:

uint16_t fbw_adc_samples[ FBW_NB_ADC ];

static struct fbw_adc_buf* buffers[FBW_NB_ADC];

void fbw_adc_buf_channel(uint8_t adc_channel, struct fbw_adc_buf* s) {
   10d58:	b480      	push	{r7}
   10d5a:	b083      	sub	sp, #12
   10d5c:	af00      	add	r7, sp, #0
   10d5e:	4603      	mov	r3, r0
   10d60:	6039      	str	r1, [r7, #0]
   10d62:	71fb      	strb	r3, [r7, #7]
  buffers[adc_channel] = s;
   10d64:	79fa      	ldrb	r2, [r7, #7]
   10d66:	f64b 23f0 	movw	r3, #47856	; 0xbaf0
   10d6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d6e:	6839      	ldr	r1, [r7, #0]
   10d70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   10d74:	370c      	adds	r7, #12
   10d76:	46bd      	mov	sp, r7
   10d78:	f85d 7b04 	ldr.w	r7, [sp], #4
   10d7c:	4770      	bx	lr
   10d7e:	bf00      	nop

00010d80 <fbw_adc_init>:

void 
fbw_adc_init( void )
{
   10d80:	b480      	push	{r7}
   10d82:	b083      	sub	sp, #12
   10d84:	af00      	add	r7, sp, #0
  uint8_t i;
  /* Ensure that our port is for input with no pull-ups */
  ANALOG_PORT 	= 0x00;
   10d86:	f248 0315 	movw	r3, #32789	; 0x8015
   10d8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d8e:	2200      	movs	r2, #0
   10d90:	701a      	strb	r2, [r3, #0]
  ANALOG_PORT_DIR	= 0x00;
   10d92:	f248 0314 	movw	r3, #32788	; 0x8014
   10d96:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d9a:	2200      	movs	r2, #0
   10d9c:	701a      	strb	r2, [r3, #0]

  /* Select our external voltage ref */
  ADMUX		= ANALOG_VREF;
   10d9e:	f248 0307 	movw	r3, #32775	; 0x8007
   10da2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10da6:	22c0      	movs	r2, #192	; 0xc0
   10da8:	701a      	strb	r2, [r3, #0]

  /* Select out clock, turn on the ADC interrupt and start conversion */
  ADCSRA = 0
   10daa:	f248 0306 	movw	r3, #32774	; 0x8006
   10dae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10db2:	22cf      	movs	r2, #207	; 0xcf
   10db4:	701a      	strb	r2, [r3, #0]
    | _BV(ADEN )
    | _BV(ADIE )
    | _BV(ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < FBW_NB_ADC; i++)
   10db6:	2300      	movs	r3, #0
   10db8:	71fb      	strb	r3, [r7, #7]
   10dba:	e00a      	b.n	10dd2 <fbw_adc_init+0x52>
    buffers[i] = (struct fbw_adc_buf*)0;
   10dbc:	79fa      	ldrb	r2, [r7, #7]
   10dbe:	f64b 23f0 	movw	r3, #47856	; 0xbaf0
   10dc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10dc6:	2100      	movs	r1, #0
   10dc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    | _BV(ADEN )
    | _BV(ADIE )
    | _BV(ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < FBW_NB_ADC; i++)
   10dcc:	79fb      	ldrb	r3, [r7, #7]
   10dce:	3301      	adds	r3, #1
   10dd0:	71fb      	strb	r3, [r7, #7]
   10dd2:	79fb      	ldrb	r3, [r7, #7]
   10dd4:	2b07      	cmp	r3, #7
   10dd6:	d9f1      	bls.n	10dbc <fbw_adc_init+0x3c>
    buffers[i] = (struct fbw_adc_buf*)0;
}
   10dd8:	370c      	adds	r7, #12
   10dda:	46bd      	mov	sp, r7
   10ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
   10de0:	4770      	bx	lr
   10de2:	bf00      	nop

00010de4 <__vector_34>:
#ifdef PAPABENCH_SINGLE
	SIGNAL(SIG_SPM_READY)
#else
	SIGNAL( SIG_INPUT_CAPTURE1 )
#endif
{
   10de4:	b480      	push	{r7}
   10de6:	b083      	sub	sp, #12
   10de8:	af00      	add	r7, sp, #0
  uint16_t		this;
  uint16_t		width;
  static uint8_t		state;
  static uint8_t		sync_start;

  this		= ICR1;
   10dea:	f248 0326 	movw	r3, #32806	; 0x8026
   10dee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10df2:	881b      	ldrh	r3, [r3, #0]
   10df4:	80fb      	strh	r3, [r7, #6]
  width		= this - last;
   10df6:	f64b 334c 	movw	r3, #47948	; 0xbb4c
   10dfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10dfe:	881b      	ldrh	r3, [r3, #0]
   10e00:	88fa      	ldrh	r2, [r7, #6]
   10e02:	1ad3      	subs	r3, r2, r3
   10e04:	80bb      	strh	r3, [r7, #4]
  last		= this;
   10e06:	f64b 334c 	movw	r3, #47948	; 0xbb4c
   10e0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e0e:	88fa      	ldrh	r2, [r7, #6]
   10e10:	801a      	strh	r2, [r3, #0]
  
  if( state == 0 ) {
   10e12:	f64b 334e 	movw	r3, #47950	; 0xbb4e
   10e16:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e1a:	781b      	ldrb	r3, [r3, #0]
   10e1c:	2b00      	cmp	r3, #0
   10e1e:	d11e      	bne.n	10e5e <__vector_34+0x7a>
    uint8_t	end = TCNT2;
   10e20:	f248 0324 	movw	r3, #32804	; 0x8024
   10e24:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e28:	781b      	ldrb	r3, [r3, #0]
   10e2a:	70fb      	strb	r3, [r7, #3]
    uint8_t diff = (end - sync_start);
   10e2c:	f64b 334f 	movw	r3, #47951	; 0xbb4f
   10e30:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e34:	781b      	ldrb	r3, [r3, #0]
   10e36:	78fa      	ldrb	r2, [r7, #3]
   10e38:	1ad3      	subs	r3, r2, r3
   10e3a:	70bb      	strb	r3, [r7, #2]
    sync_start = end;
   10e3c:	f64b 334f 	movw	r3, #47951	; 0xbb4f
   10e40:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e44:	78fa      	ldrb	r2, [r7, #3]
   10e46:	701a      	strb	r2, [r3, #0]

    /* The frame period of the mc3030 seems to be 25ms. 
     * One pulse lasts from 1.05ms to 2.150ms.
     * Sync pulse is at least 7ms : (7000*CLOCK)/1024 = 109
     */
    if( diff > (uint8_t)(((uint32_t)(7000ul*CLOCK))/1024ul) ) {
   10e48:	78bb      	ldrb	r3, [r7, #2]
   10e4a:	2b6d      	cmp	r3, #109	; 0x6d
   10e4c:	d906      	bls.n	10e5c <__vector_34+0x78>
      state = 1;
   10e4e:	f64b 334e 	movw	r3, #47950	; 0xbb4e
   10e52:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e56:	2201      	movs	r2, #1
   10e58:	701a      	strb	r2, [r3, #0]
   10e5a:	e053      	b.n	10f04 <__vector_34+0x120>
   10e5c:	e052      	b.n	10f04 <__vector_34+0x120>
    }
  } 
  else {
    /* Read a data pulses */
    if( width < 700ul*CLOCK || width > 2300ul*CLOCK)
   10e5e:	88bb      	ldrh	r3, [r7, #4]
   10e60:	f5b3 5f2f 	cmp.w	r3, #11200	; 0x2bc0
   10e64:	d304      	bcc.n	10e70 <__vector_34+0x8c>
   10e66:	88ba      	ldrh	r2, [r7, #4]
   10e68:	f648 73c0 	movw	r3, #36800	; 0x8fc0
   10e6c:	429a      	cmp	r2, r3
   10e6e:	d911      	bls.n	10e94 <__vector_34+0xb0>
      RestartPpmCycle();
   10e70:	f64b 334e 	movw	r3, #47950	; 0xbb4e
   10e74:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e78:	2200      	movs	r2, #0
   10e7a:	701a      	strb	r2, [r3, #0]
   10e7c:	f248 0324 	movw	r3, #32804	; 0x8024
   10e80:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e84:	781b      	ldrb	r3, [r3, #0]
   10e86:	b2da      	uxtb	r2, r3
   10e88:	f64b 334f 	movw	r3, #47951	; 0xbb4f
   10e8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e90:	701a      	strb	r2, [r3, #0]
   10e92:	e038      	b.n	10f06 <__vector_34+0x122>
    ppm_pulses[state - 1] = width;
   10e94:	f64b 334e 	movw	r3, #47950	; 0xbb4e
   10e98:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e9c:	781b      	ldrb	r3, [r3, #0]
   10e9e:	1e5a      	subs	r2, r3, #1
   10ea0:	f64b 3310 	movw	r3, #47888	; 0xbb10
   10ea4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ea8:	88b9      	ldrh	r1, [r7, #4]
   10eaa:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

    if (state >= PPM_NB_PULSES) {
   10eae:	f64b 334e 	movw	r3, #47950	; 0xbb4e
   10eb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10eb6:	781b      	ldrb	r3, [r3, #0]
   10eb8:	2b08      	cmp	r3, #8
   10eba:	d917      	bls.n	10eec <__vector_34+0x108>
      ppm_valid	= 1;
   10ebc:	f64b 334b 	movw	r3, #47947	; 0xbb4b
   10ec0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ec4:	2201      	movs	r2, #1
   10ec6:	701a      	strb	r2, [r3, #0]
      RestartPpmCycle();
   10ec8:	f64b 334e 	movw	r3, #47950	; 0xbb4e
   10ecc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ed0:	2200      	movs	r2, #0
   10ed2:	701a      	strb	r2, [r3, #0]
   10ed4:	f248 0324 	movw	r3, #32804	; 0x8024
   10ed8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10edc:	781b      	ldrb	r3, [r3, #0]
   10ede:	b2da      	uxtb	r2, r3
   10ee0:	f64b 334f 	movw	r3, #47951	; 0xbb4f
   10ee4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ee8:	701a      	strb	r2, [r3, #0]
   10eea:	e00c      	b.n	10f06 <__vector_34+0x122>
    } else 
      state++;
   10eec:	f64b 334e 	movw	r3, #47950	; 0xbb4e
   10ef0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ef4:	781b      	ldrb	r3, [r3, #0]
   10ef6:	3301      	adds	r3, #1
   10ef8:	b2da      	uxtb	r2, r3
   10efa:	f64b 334e 	movw	r3, #47950	; 0xbb4e
   10efe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f02:	701a      	strb	r2, [r3, #0]
  }
  return;
   10f04:	bf00      	nop
}
   10f06:	370c      	adds	r7, #12
   10f08:	46bd      	mov	sp, r7
   10f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
   10f0e:	4770      	bx	lr

00010f10 <last_radio_from_ppm>:

/* Copy from the ppm receiving buffer to the buffer sent to mcu0 */
void last_radio_from_ppm() {
   10f10:	b590      	push	{r4, r7, lr}
   10f12:	b083      	sub	sp, #12
   10f14:	af00      	add	r7, sp, #0
  LastRadioFromPpm()
   10f16:	f64b 3310 	movw	r3, #47888	; 0xbb10
   10f1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f1e:	881b      	ldrh	r3, [r3, #0]
   10f20:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
   10f24:	b29b      	uxth	r3, r3
   10f26:	80fb      	strh	r3, [r7, #6]
   10f28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   10f2c:	4618      	mov	r0, r3
   10f2e:	f002 f99b 	bl	13268 <__aeabi_i2f>
   10f32:	4603      	mov	r3, r0
   10f34:	4618      	mov	r0, r3
   10f36:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   10f3a:	f002 f9e9 	bl	13310 <__aeabi_fmul>
   10f3e:	4603      	mov	r3, r0
   10f40:	4618      	mov	r0, r3
   10f42:	f002 fbab 	bl	1369c <__aeabi_f2iz>
   10f46:	4603      	mov	r3, r0
   10f48:	b29a      	uxth	r2, r3
   10f4a:	f64b 3324 	movw	r3, #47908	; 0xbb24
   10f4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f52:	801a      	strh	r2, [r3, #0]
   10f54:	f64b 3324 	movw	r3, #47908	; 0xbb24
   10f58:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f5c:	881b      	ldrh	r3, [r3, #0]
   10f5e:	b21b      	sxth	r3, r3
   10f60:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   10f64:	dd07      	ble.n	10f76 <last_radio_from_ppm+0x66>
   10f66:	f64b 3324 	movw	r3, #47908	; 0xbb24
   10f6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f6e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   10f72:	801a      	strh	r2, [r3, #0]
   10f74:	e00d      	b.n	10f92 <last_radio_from_ppm+0x82>
   10f76:	f64b 3324 	movw	r3, #47908	; 0xbb24
   10f7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f7e:	881b      	ldrh	r3, [r3, #0]
   10f80:	b21b      	sxth	r3, r3
   10f82:	2b00      	cmp	r3, #0
   10f84:	da05      	bge.n	10f92 <last_radio_from_ppm+0x82>
   10f86:	f64b 3324 	movw	r3, #47908	; 0xbb24
   10f8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f8e:	2200      	movs	r2, #0
   10f90:	801a      	strh	r2, [r3, #0]
   10f92:	f64b 3310 	movw	r3, #47888	; 0xbb10
   10f96:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f9a:	885b      	ldrh	r3, [r3, #2]
   10f9c:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   10fa0:	b29b      	uxth	r3, r3
   10fa2:	80fb      	strh	r3, [r7, #6]
   10fa4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   10fa8:	4618      	mov	r0, r3
   10faa:	f002 f95d 	bl	13268 <__aeabi_i2f>
   10fae:	4603      	mov	r3, r0
   10fb0:	4618      	mov	r0, r3
   10fb2:	f002 fb73 	bl	1369c <__aeabi_f2iz>
   10fb6:	4603      	mov	r3, r0
   10fb8:	b29a      	uxth	r2, r3
   10fba:	f64b 3324 	movw	r3, #47908	; 0xbb24
   10fbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10fc2:	805a      	strh	r2, [r3, #2]
   10fc4:	f64b 3324 	movw	r3, #47908	; 0xbb24
   10fc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10fcc:	885b      	ldrh	r3, [r3, #2]
   10fce:	b21b      	sxth	r3, r3
   10fd0:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   10fd4:	dd07      	ble.n	10fe6 <last_radio_from_ppm+0xd6>
   10fd6:	f64b 3324 	movw	r3, #47908	; 0xbb24
   10fda:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10fde:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   10fe2:	805a      	strh	r2, [r3, #2]
   10fe4:	e00f      	b.n	11006 <last_radio_from_ppm+0xf6>
   10fe6:	f64b 3324 	movw	r3, #47908	; 0xbb24
   10fea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10fee:	885b      	ldrh	r3, [r3, #2]
   10ff0:	b21b      	sxth	r3, r3
   10ff2:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   10ff6:	da06      	bge.n	11006 <last_radio_from_ppm+0xf6>
   10ff8:	f64b 3324 	movw	r3, #47908	; 0xbb24
   10ffc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11000:	f64d 2280 	movw	r2, #55936	; 0xda80
   11004:	805a      	strh	r2, [r3, #2]
   11006:	f64b 3310 	movw	r3, #47888	; 0xbb10
   1100a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1100e:	889b      	ldrh	r3, [r3, #4]
   11010:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   11014:	b29b      	uxth	r3, r3
   11016:	80fb      	strh	r3, [r7, #6]
   11018:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   1101c:	4618      	mov	r0, r3
   1101e:	f002 f923 	bl	13268 <__aeabi_i2f>
   11022:	4603      	mov	r3, r0
   11024:	4618      	mov	r0, r3
   11026:	f002 fb39 	bl	1369c <__aeabi_f2iz>
   1102a:	4603      	mov	r3, r0
   1102c:	b29a      	uxth	r2, r3
   1102e:	f64b 3324 	movw	r3, #47908	; 0xbb24
   11032:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11036:	809a      	strh	r2, [r3, #4]
   11038:	f64b 3324 	movw	r3, #47908	; 0xbb24
   1103c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11040:	889b      	ldrh	r3, [r3, #4]
   11042:	b21b      	sxth	r3, r3
   11044:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   11048:	dd07      	ble.n	1105a <last_radio_from_ppm+0x14a>
   1104a:	f64b 3324 	movw	r3, #47908	; 0xbb24
   1104e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11052:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   11056:	809a      	strh	r2, [r3, #4]
   11058:	e00f      	b.n	1107a <last_radio_from_ppm+0x16a>
   1105a:	f64b 3324 	movw	r3, #47908	; 0xbb24
   1105e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11062:	889b      	ldrh	r3, [r3, #4]
   11064:	b21b      	sxth	r3, r3
   11066:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   1106a:	da06      	bge.n	1107a <last_radio_from_ppm+0x16a>
   1106c:	f64b 3324 	movw	r3, #47908	; 0xbb24
   11070:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11074:	f64d 2280 	movw	r2, #55936	; 0xda80
   11078:	809a      	strh	r2, [r3, #4]
   1107a:	f64b 3310 	movw	r3, #47888	; 0xbb10
   1107e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11082:	88db      	ldrh	r3, [r3, #6]
   11084:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   11088:	b29b      	uxth	r3, r3
   1108a:	80fb      	strh	r3, [r7, #6]
   1108c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   11090:	4618      	mov	r0, r3
   11092:	f002 f8e9 	bl	13268 <__aeabi_i2f>
   11096:	4603      	mov	r3, r0
   11098:	4618      	mov	r0, r3
   1109a:	f002 faff 	bl	1369c <__aeabi_f2iz>
   1109e:	4603      	mov	r3, r0
   110a0:	b29a      	uxth	r2, r3
   110a2:	f64b 3324 	movw	r3, #47908	; 0xbb24
   110a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   110aa:	80da      	strh	r2, [r3, #6]
   110ac:	f64b 3324 	movw	r3, #47908	; 0xbb24
   110b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   110b4:	88db      	ldrh	r3, [r3, #6]
   110b6:	b21b      	sxth	r3, r3
   110b8:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   110bc:	dd07      	ble.n	110ce <last_radio_from_ppm+0x1be>
   110be:	f64b 3324 	movw	r3, #47908	; 0xbb24
   110c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   110c6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   110ca:	80da      	strh	r2, [r3, #6]
   110cc:	e00f      	b.n	110ee <last_radio_from_ppm+0x1de>
   110ce:	f64b 3324 	movw	r3, #47908	; 0xbb24
   110d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   110d6:	88db      	ldrh	r3, [r3, #6]
   110d8:	b21b      	sxth	r3, r3
   110da:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   110de:	da06      	bge.n	110ee <last_radio_from_ppm+0x1de>
   110e0:	f64b 3324 	movw	r3, #47908	; 0xbb24
   110e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   110e8:	f64d 2280 	movw	r2, #55936	; 0xda80
   110ec:	80da      	strh	r2, [r3, #6]
   110ee:	f64b 3310 	movw	r3, #47888	; 0xbb10
   110f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   110f6:	891b      	ldrh	r3, [r3, #8]
   110f8:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   110fc:	b29b      	uxth	r3, r3
   110fe:	80fb      	strh	r3, [r7, #6]
   11100:	f64b 3338 	movw	r3, #47928	; 0xbb38
   11104:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11108:	891b      	ldrh	r3, [r3, #8]
   1110a:	b21b      	sxth	r3, r3
   1110c:	4618      	mov	r0, r3
   1110e:	f002 f8ab 	bl	13268 <__aeabi_i2f>
   11112:	4604      	mov	r4, r0
   11114:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   11118:	4618      	mov	r0, r3
   1111a:	f002 f8a5 	bl	13268 <__aeabi_i2f>
   1111e:	4603      	mov	r3, r0
   11120:	4618      	mov	r0, r3
   11122:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   11126:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   1112a:	f002 f8f1 	bl	13310 <__aeabi_fmul>
   1112e:	4603      	mov	r3, r0
   11130:	4620      	mov	r0, r4
   11132:	4619      	mov	r1, r3
   11134:	f001 ffe4 	bl	13100 <__addsf3>
   11138:	4603      	mov	r3, r0
   1113a:	4618      	mov	r0, r3
   1113c:	f002 faae 	bl	1369c <__aeabi_f2iz>
   11140:	4603      	mov	r3, r0
   11142:	b29a      	uxth	r2, r3
   11144:	f64b 3338 	movw	r3, #47928	; 0xbb38
   11148:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1114c:	811a      	strh	r2, [r3, #8]
   1114e:	f64b 3310 	movw	r3, #47888	; 0xbb10
   11152:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11156:	895b      	ldrh	r3, [r3, #10]
   11158:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   1115c:	b29b      	uxth	r3, r3
   1115e:	80fb      	strh	r3, [r7, #6]
   11160:	f64b 3338 	movw	r3, #47928	; 0xbb38
   11164:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11168:	895b      	ldrh	r3, [r3, #10]
   1116a:	b21b      	sxth	r3, r3
   1116c:	4618      	mov	r0, r3
   1116e:	f002 f87b 	bl	13268 <__aeabi_i2f>
   11172:	4604      	mov	r4, r0
   11174:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   11178:	4618      	mov	r0, r3
   1117a:	f002 f875 	bl	13268 <__aeabi_i2f>
   1117e:	4603      	mov	r3, r0
   11180:	4618      	mov	r0, r3
   11182:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   11186:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   1118a:	f002 f8c1 	bl	13310 <__aeabi_fmul>
   1118e:	4603      	mov	r3, r0
   11190:	4620      	mov	r0, r4
   11192:	4619      	mov	r1, r3
   11194:	f001 ffb4 	bl	13100 <__addsf3>
   11198:	4603      	mov	r3, r0
   1119a:	4618      	mov	r0, r3
   1119c:	f002 fa7e 	bl	1369c <__aeabi_f2iz>
   111a0:	4603      	mov	r3, r0
   111a2:	b29a      	uxth	r2, r3
   111a4:	f64b 3338 	movw	r3, #47928	; 0xbb38
   111a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111ac:	815a      	strh	r2, [r3, #10]
   111ae:	f64b 3310 	movw	r3, #47888	; 0xbb10
   111b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111b6:	899b      	ldrh	r3, [r3, #12]
   111b8:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   111bc:	b29b      	uxth	r3, r3
   111be:	80fb      	strh	r3, [r7, #6]
   111c0:	f64b 3338 	movw	r3, #47928	; 0xbb38
   111c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111c8:	899b      	ldrh	r3, [r3, #12]
   111ca:	b21b      	sxth	r3, r3
   111cc:	4618      	mov	r0, r3
   111ce:	f002 f84b 	bl	13268 <__aeabi_i2f>
   111d2:	4604      	mov	r4, r0
   111d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   111d8:	4618      	mov	r0, r3
   111da:	f002 f845 	bl	13268 <__aeabi_i2f>
   111de:	4603      	mov	r3, r0
   111e0:	4618      	mov	r0, r3
   111e2:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   111e6:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   111ea:	f002 f891 	bl	13310 <__aeabi_fmul>
   111ee:	4603      	mov	r3, r0
   111f0:	4620      	mov	r0, r4
   111f2:	4619      	mov	r1, r3
   111f4:	f001 ff84 	bl	13100 <__addsf3>
   111f8:	4603      	mov	r3, r0
   111fa:	4618      	mov	r0, r3
   111fc:	f002 fa4e 	bl	1369c <__aeabi_f2iz>
   11200:	4603      	mov	r3, r0
   11202:	b29a      	uxth	r2, r3
   11204:	f64b 3338 	movw	r3, #47928	; 0xbb38
   11208:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1120c:	819a      	strh	r2, [r3, #12]
   1120e:	f64b 3310 	movw	r3, #47888	; 0xbb10
   11212:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11216:	89db      	ldrh	r3, [r3, #14]
   11218:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   1121c:	b29b      	uxth	r3, r3
   1121e:	80fb      	strh	r3, [r7, #6]
   11220:	f64b 3338 	movw	r3, #47928	; 0xbb38
   11224:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11228:	89db      	ldrh	r3, [r3, #14]
   1122a:	b21b      	sxth	r3, r3
   1122c:	4618      	mov	r0, r3
   1122e:	f002 f81b 	bl	13268 <__aeabi_i2f>
   11232:	4604      	mov	r4, r0
   11234:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   11238:	4618      	mov	r0, r3
   1123a:	f002 f815 	bl	13268 <__aeabi_i2f>
   1123e:	4603      	mov	r3, r0
   11240:	4618      	mov	r0, r3
   11242:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   11246:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   1124a:	f002 f861 	bl	13310 <__aeabi_fmul>
   1124e:	4603      	mov	r3, r0
   11250:	4620      	mov	r0, r4
   11252:	4619      	mov	r1, r3
   11254:	f001 ff54 	bl	13100 <__addsf3>
   11258:	4603      	mov	r3, r0
   1125a:	4618      	mov	r0, r3
   1125c:	f002 fa1e 	bl	1369c <__aeabi_f2iz>
   11260:	4603      	mov	r3, r0
   11262:	b29a      	uxth	r2, r3
   11264:	f64b 3338 	movw	r3, #47928	; 0xbb38
   11268:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1126c:	81da      	strh	r2, [r3, #14]
   1126e:	f64b 3310 	movw	r3, #47888	; 0xbb10
   11272:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11276:	8a1b      	ldrh	r3, [r3, #16]
   11278:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   1127c:	b29b      	uxth	r3, r3
   1127e:	80fb      	strh	r3, [r7, #6]
   11280:	f64b 3338 	movw	r3, #47928	; 0xbb38
   11284:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11288:	8a1b      	ldrh	r3, [r3, #16]
   1128a:	b21b      	sxth	r3, r3
   1128c:	4618      	mov	r0, r3
   1128e:	f001 ffeb 	bl	13268 <__aeabi_i2f>
   11292:	4604      	mov	r4, r0
   11294:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   11298:	4618      	mov	r0, r3
   1129a:	f001 ffe5 	bl	13268 <__aeabi_i2f>
   1129e:	4603      	mov	r3, r0
   112a0:	4618      	mov	r0, r3
   112a2:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   112a6:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   112aa:	f002 f831 	bl	13310 <__aeabi_fmul>
   112ae:	4603      	mov	r3, r0
   112b0:	4620      	mov	r0, r4
   112b2:	4619      	mov	r1, r3
   112b4:	f001 ff24 	bl	13100 <__addsf3>
   112b8:	4603      	mov	r3, r0
   112ba:	4618      	mov	r0, r3
   112bc:	f002 f9ee 	bl	1369c <__aeabi_f2iz>
   112c0:	4603      	mov	r3, r0
   112c2:	b29a      	uxth	r2, r3
   112c4:	f64b 3338 	movw	r3, #47928	; 0xbb38
   112c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   112cc:	821a      	strh	r2, [r3, #16]
   112ce:	f64b 3350 	movw	r3, #47952	; 0xbb50
   112d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   112d6:	781b      	ldrb	r3, [r3, #0]
   112d8:	3301      	adds	r3, #1
   112da:	b2da      	uxtb	r2, r3
   112dc:	f64b 3350 	movw	r3, #47952	; 0xbb50
   112e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   112e4:	701a      	strb	r2, [r3, #0]
   112e6:	f64b 3350 	movw	r3, #47952	; 0xbb50
   112ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   112ee:	781b      	ldrb	r3, [r3, #0]
   112f0:	2b0a      	cmp	r3, #10
   112f2:	f040 8101 	bne.w	114f8 <last_radio_from_ppm+0x5e8>
   112f6:	f64b 3350 	movw	r3, #47952	; 0xbb50
   112fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   112fe:	2200      	movs	r2, #0
   11300:	701a      	strb	r2, [r3, #0]
   11302:	f64b 3338 	movw	r3, #47928	; 0xbb38
   11306:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1130a:	891a      	ldrh	r2, [r3, #8]
   1130c:	f64b 3324 	movw	r3, #47908	; 0xbb24
   11310:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11314:	811a      	strh	r2, [r3, #8]
   11316:	f64b 3338 	movw	r3, #47928	; 0xbb38
   1131a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1131e:	2200      	movs	r2, #0
   11320:	811a      	strh	r2, [r3, #8]
   11322:	f64b 3324 	movw	r3, #47908	; 0xbb24
   11326:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1132a:	891b      	ldrh	r3, [r3, #8]
   1132c:	b21b      	sxth	r3, r3
   1132e:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   11332:	dd07      	ble.n	11344 <last_radio_from_ppm+0x434>
   11334:	f64b 3324 	movw	r3, #47908	; 0xbb24
   11338:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1133c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   11340:	811a      	strh	r2, [r3, #8]
   11342:	e00f      	b.n	11364 <last_radio_from_ppm+0x454>
   11344:	f64b 3324 	movw	r3, #47908	; 0xbb24
   11348:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1134c:	891b      	ldrh	r3, [r3, #8]
   1134e:	b21b      	sxth	r3, r3
   11350:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   11354:	da06      	bge.n	11364 <last_radio_from_ppm+0x454>
   11356:	f64b 3324 	movw	r3, #47908	; 0xbb24
   1135a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1135e:	f64d 2280 	movw	r2, #55936	; 0xda80
   11362:	811a      	strh	r2, [r3, #8]
   11364:	f64b 3338 	movw	r3, #47928	; 0xbb38
   11368:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1136c:	895a      	ldrh	r2, [r3, #10]
   1136e:	f64b 3324 	movw	r3, #47908	; 0xbb24
   11372:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11376:	815a      	strh	r2, [r3, #10]
   11378:	f64b 3338 	movw	r3, #47928	; 0xbb38
   1137c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11380:	2200      	movs	r2, #0
   11382:	815a      	strh	r2, [r3, #10]
   11384:	f64b 3324 	movw	r3, #47908	; 0xbb24
   11388:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1138c:	895b      	ldrh	r3, [r3, #10]
   1138e:	b21b      	sxth	r3, r3
   11390:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   11394:	dd07      	ble.n	113a6 <last_radio_from_ppm+0x496>
   11396:	f64b 3324 	movw	r3, #47908	; 0xbb24
   1139a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1139e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   113a2:	815a      	strh	r2, [r3, #10]
   113a4:	e00f      	b.n	113c6 <last_radio_from_ppm+0x4b6>
   113a6:	f64b 3324 	movw	r3, #47908	; 0xbb24
   113aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113ae:	895b      	ldrh	r3, [r3, #10]
   113b0:	b21b      	sxth	r3, r3
   113b2:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   113b6:	da06      	bge.n	113c6 <last_radio_from_ppm+0x4b6>
   113b8:	f64b 3324 	movw	r3, #47908	; 0xbb24
   113bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113c0:	f64d 2280 	movw	r2, #55936	; 0xda80
   113c4:	815a      	strh	r2, [r3, #10]
   113c6:	f64b 3338 	movw	r3, #47928	; 0xbb38
   113ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113ce:	899a      	ldrh	r2, [r3, #12]
   113d0:	f64b 3324 	movw	r3, #47908	; 0xbb24
   113d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113d8:	819a      	strh	r2, [r3, #12]
   113da:	f64b 3338 	movw	r3, #47928	; 0xbb38
   113de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113e2:	2200      	movs	r2, #0
   113e4:	819a      	strh	r2, [r3, #12]
   113e6:	f64b 3324 	movw	r3, #47908	; 0xbb24
   113ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113ee:	899b      	ldrh	r3, [r3, #12]
   113f0:	b21b      	sxth	r3, r3
   113f2:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   113f6:	dd07      	ble.n	11408 <last_radio_from_ppm+0x4f8>
   113f8:	f64b 3324 	movw	r3, #47908	; 0xbb24
   113fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11400:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   11404:	819a      	strh	r2, [r3, #12]
   11406:	e00f      	b.n	11428 <last_radio_from_ppm+0x518>
   11408:	f64b 3324 	movw	r3, #47908	; 0xbb24
   1140c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11410:	899b      	ldrh	r3, [r3, #12]
   11412:	b21b      	sxth	r3, r3
   11414:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   11418:	da06      	bge.n	11428 <last_radio_from_ppm+0x518>
   1141a:	f64b 3324 	movw	r3, #47908	; 0xbb24
   1141e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11422:	f64d 2280 	movw	r2, #55936	; 0xda80
   11426:	819a      	strh	r2, [r3, #12]
   11428:	f64b 3338 	movw	r3, #47928	; 0xbb38
   1142c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11430:	89da      	ldrh	r2, [r3, #14]
   11432:	f64b 3324 	movw	r3, #47908	; 0xbb24
   11436:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1143a:	81da      	strh	r2, [r3, #14]
   1143c:	f64b 3338 	movw	r3, #47928	; 0xbb38
   11440:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11444:	2200      	movs	r2, #0
   11446:	81da      	strh	r2, [r3, #14]
   11448:	f64b 3324 	movw	r3, #47908	; 0xbb24
   1144c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11450:	89db      	ldrh	r3, [r3, #14]
   11452:	b21b      	sxth	r3, r3
   11454:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   11458:	dd07      	ble.n	1146a <last_radio_from_ppm+0x55a>
   1145a:	f64b 3324 	movw	r3, #47908	; 0xbb24
   1145e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11462:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   11466:	81da      	strh	r2, [r3, #14]
   11468:	e00f      	b.n	1148a <last_radio_from_ppm+0x57a>
   1146a:	f64b 3324 	movw	r3, #47908	; 0xbb24
   1146e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11472:	89db      	ldrh	r3, [r3, #14]
   11474:	b21b      	sxth	r3, r3
   11476:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   1147a:	da06      	bge.n	1148a <last_radio_from_ppm+0x57a>
   1147c:	f64b 3324 	movw	r3, #47908	; 0xbb24
   11480:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11484:	f64d 2280 	movw	r2, #55936	; 0xda80
   11488:	81da      	strh	r2, [r3, #14]
   1148a:	f64b 3338 	movw	r3, #47928	; 0xbb38
   1148e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11492:	8a1a      	ldrh	r2, [r3, #16]
   11494:	f64b 3324 	movw	r3, #47908	; 0xbb24
   11498:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1149c:	821a      	strh	r2, [r3, #16]
   1149e:	f64b 3338 	movw	r3, #47928	; 0xbb38
   114a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114a6:	2200      	movs	r2, #0
   114a8:	821a      	strh	r2, [r3, #16]
   114aa:	f64b 3324 	movw	r3, #47908	; 0xbb24
   114ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114b2:	8a1b      	ldrh	r3, [r3, #16]
   114b4:	b21b      	sxth	r3, r3
   114b6:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   114ba:	dd07      	ble.n	114cc <last_radio_from_ppm+0x5bc>
   114bc:	f64b 3324 	movw	r3, #47908	; 0xbb24
   114c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114c4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   114c8:	821a      	strh	r2, [r3, #16]
   114ca:	e00f      	b.n	114ec <last_radio_from_ppm+0x5dc>
   114cc:	f64b 3324 	movw	r3, #47908	; 0xbb24
   114d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114d4:	8a1b      	ldrh	r3, [r3, #16]
   114d6:	b21b      	sxth	r3, r3
   114d8:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   114dc:	da06      	bge.n	114ec <last_radio_from_ppm+0x5dc>
   114de:	f64b 3324 	movw	r3, #47908	; 0xbb24
   114e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114e6:	f64d 2280 	movw	r2, #55936	; 0xda80
   114ea:	821a      	strh	r2, [r3, #16]
   114ec:	f64b 334a 	movw	r3, #47946	; 0xbb4a
   114f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114f4:	2201      	movs	r2, #1
   114f6:	701a      	strb	r2, [r3, #0]
}
   114f8:	370c      	adds	r7, #12
   114fa:	46bd      	mov	sp, r7
   114fc:	bd90      	pop	{r4, r7, pc}
   114fe:	bf00      	nop

00011500 <spi_reset>:
volatile bool_t spi_was_interrupted = FALSE;

static volatile uint8_t idx_buf = 0;
static volatile uint8_t xor_in, xor_out;

void spi_reset(void) {
   11500:	b480      	push	{r7}
   11502:	af00      	add	r7, sp, #0
  idx_buf = 0;
   11504:	f64b 3384 	movw	r3, #48004	; 0xbb84
   11508:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1150c:	2200      	movs	r2, #0
   1150e:	701a      	strb	r2, [r3, #0]
  xor_in = 0;
   11510:	f64b 3385 	movw	r3, #48005	; 0xbb85
   11514:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11518:	2200      	movs	r2, #0
   1151a:	701a      	strb	r2, [r3, #0]
  xor_out = ((uint8_t*)&to_mega128)[idx_buf];
   1151c:	f64b 3384 	movw	r3, #48004	; 0xbb84
   11520:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11524:	781b      	ldrb	r3, [r3, #0]
   11526:	b2db      	uxtb	r3, r3
   11528:	461a      	mov	r2, r3
   1152a:	f64b 336c 	movw	r3, #47980	; 0xbb6c
   1152e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11532:	4413      	add	r3, r2
   11534:	781a      	ldrb	r2, [r3, #0]
   11536:	f64b 3386 	movw	r3, #48006	; 0xbb86
   1153a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1153e:	701a      	strb	r2, [r3, #0]
  SPDR = xor_out;
   11540:	f248 030f 	movw	r3, #32783	; 0x800f
   11544:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11548:	f64b 3286 	movw	r2, #48006	; 0xbb86
   1154c:	f2c2 0204 	movt	r2, #8196	; 0x2004
   11550:	7812      	ldrb	r2, [r2, #0]
   11552:	b2d2      	uxtb	r2, r2
   11554:	701a      	strb	r2, [r3, #0]
  mega128_receive_valid = FALSE;
   11556:	f64b 3382 	movw	r3, #48002	; 0xbb82
   1155a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1155e:	2200      	movs	r2, #0
   11560:	701a      	strb	r2, [r3, #0]
}
   11562:	46bd      	mov	sp, r7
   11564:	f85d 7b04 	ldr.w	r7, [sp], #4
   11568:	4770      	bx	lr
   1156a:	bf00      	nop

0001156c <fbw_spi_init>:

void fbw_spi_init(void) {
   1156c:	b480      	push	{r7}
   1156e:	af00      	add	r7, sp, #0
  to_mega128.status = 0;
   11570:	f64b 336c 	movw	r3, #47980	; 0xbb6c
   11574:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11578:	2200      	movs	r2, #0
   1157a:	74da      	strb	r2, [r3, #19]
  to_mega128.nb_err = 0;
   1157c:	f64b 336c 	movw	r3, #47980	; 0xbb6c
   11580:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11584:	2200      	movs	r2, #0
   11586:	751a      	strb	r2, [r3, #20]

  /* set it pin output */
  //  IT_DDR |= _BV(IT_PIN);

  /* set MISO pin output */
  SPI_DDR |= _BV(SPI_MISO_PIN);
   11588:	f248 0317 	movw	r3, #32791	; 0x8017
   1158c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11590:	f248 0217 	movw	r2, #32791	; 0x8017
   11594:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11598:	7812      	ldrb	r2, [r2, #0]
   1159a:	b2d2      	uxtb	r2, r2
   1159c:	f042 0210 	orr.w	r2, r2, #16
   115a0:	b2d2      	uxtb	r2, r2
   115a2:	701a      	strb	r2, [r3, #0]
  /* enable SPI, slave, MSB first, sck idle low */
  SPCR = _BV(SPE);
   115a4:	f248 030d 	movw	r3, #32781	; 0x800d
   115a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115ac:	2240      	movs	r2, #64	; 0x40
   115ae:	701a      	strb	r2, [r3, #0]
  /* enable interrupt */
  SPCR |= _BV(SPIE);
   115b0:	f248 030d 	movw	r3, #32781	; 0x800d
   115b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115b8:	f248 020d 	movw	r2, #32781	; 0x800d
   115bc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   115c0:	7812      	ldrb	r2, [r2, #0]
   115c2:	b2d2      	uxtb	r2, r2
   115c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
   115c8:	b2d2      	uxtb	r2, r2
   115ca:	701a      	strb	r2, [r3, #0]
}
   115cc:	46bd      	mov	sp, r7
   115ce:	f85d 7b04 	ldr.w	r7, [sp], #4
   115d2:	4770      	bx	lr
   115d4:	0000      	movs	r0, r0
	...

000115d8 <timer_init>:
 * running at Clk/1024.  For 16 Mhz clock, this will be every
 * 16384 microseconds, or 61 Hz.
 */
static inline void
timer_init( void )
{
   115d8:	b480      	push	{r7}
   115da:	af00      	add	r7, sp, #0
  /* Timer1 @ Clk/1: System clock, ppm and servos pulses */
  TCCR1A		= 0x00;
   115dc:	f248 032f 	movw	r3, #32815	; 0x802f
   115e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115e4:	2200      	movs	r2, #0
   115e6:	701a      	strb	r2, [r3, #0]
  TCCR1B		= 0x01;
   115e8:	f248 032e 	movw	r3, #32814	; 0x802e
   115ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115f0:	2201      	movs	r2, #1
   115f2:	701a      	strb	r2, [r3, #0]
  
  /* Timer2 @ Clk/1024: Periodic clock            */
  TCCR2		= 0x07;
   115f4:	f248 0325 	movw	r3, #32805	; 0x8025
   115f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115fc:	2207      	movs	r2, #7
   115fe:	701a      	strb	r2, [r3, #0]
}
   11600:	46bd      	mov	sp, r7
   11602:	f85d 7b04 	ldr.w	r7, [sp], #4
   11606:	4770      	bx	lr

00011608 <ppm_init>:
 *
 * JR might be rising edge clocked; set that as an option
 */
static inline void
ppm_init( void )
{
   11608:	b480      	push	{r7}
   1160a:	af00      	add	r7, sp, #0
#if   PPM_RX_TYPE == RXFUTABA
  cbi( TCCR1B, ICES1 );
   1160c:	f248 032e 	movw	r3, #32814	; 0x802e
   11610:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11614:	f248 022e 	movw	r2, #32814	; 0x802e
   11618:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1161c:	7812      	ldrb	r2, [r2, #0]
   1161e:	b2d2      	uxtb	r2, r2
   11620:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   11624:	b2d2      	uxtb	r2, r2
   11626:	701a      	strb	r2, [r3, #0]
#else
#	error "ppm.h: Unknown receiver type in PPM_RX_TYPE"
#endif

  /* No noise cancelation */
  sbi( TCCR1B, ICNC1 );
   11628:	f248 032e 	movw	r3, #32814	; 0x802e
   1162c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11630:	f248 022e 	movw	r2, #32814	; 0x802e
   11634:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11638:	7812      	ldrb	r2, [r2, #0]
   1163a:	b2d2      	uxtb	r2, r2
   1163c:	f062 027f 	orn	r2, r2, #127	; 0x7f
   11640:	b2d2      	uxtb	r2, r2
   11642:	701a      	strb	r2, [r3, #0]
  
  /* Set ICP to input, no internal pull up */
  cbi( PPM_DDR, PPM_PIN);
   11644:	f248 0317 	movw	r3, #32791	; 0x8017
   11648:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1164c:	f248 0217 	movw	r2, #32791	; 0x8017
   11650:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11654:	7812      	ldrb	r2, [r2, #0]
   11656:	b2d2      	uxtb	r2, r2
   11658:	f022 0201 	bic.w	r2, r2, #1
   1165c:	b2d2      	uxtb	r2, r2
   1165e:	701a      	strb	r2, [r3, #0]
  
  /* Enable interrupt on input capture */
  sbi( TIMSK, TICIE1 );
   11660:	f248 0337 	movw	r3, #32823	; 0x8037
   11664:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11668:	f248 0237 	movw	r2, #32823	; 0x8037
   1166c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11670:	7812      	ldrb	r2, [r2, #0]
   11672:	b2d2      	uxtb	r2, r2
   11674:	f042 0220 	orr.w	r2, r2, #32
   11678:	b2d2      	uxtb	r2, r2
   1167a:	701a      	strb	r2, [r3, #0]
}
   1167c:	46bd      	mov	sp, r7
   1167e:	f85d 7b04 	ldr.w	r7, [sp], #4
   11682:	4770      	bx	lr

00011684 <to_autopilot_from_last_radio>:
/*   uart_transmit('\n'); */
/* } */


/* Prepare data to be sent to mcu0 */
void to_autopilot_from_last_radio (void) {
   11684:	b580      	push	{r7, lr}
   11686:	b082      	sub	sp, #8
   11688:	af00      	add	r7, sp, #0
  uint8_t i;
  for(i = 0; i < RADIO_CTL_NB; i++)
   1168a:	2300      	movs	r3, #0
   1168c:	71fb      	strb	r3, [r7, #7]
   1168e:	e010      	b.n	116b2 <to_autopilot_from_last_radio+0x2e>
      to_mega128.channels[i] = last_radio[i];
   11690:	79fa      	ldrb	r2, [r7, #7]
   11692:	79f9      	ldrb	r1, [r7, #7]
   11694:	f64b 3324 	movw	r3, #47908	; 0xbb24
   11698:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1169c:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
   116a0:	f64b 336c 	movw	r3, #47980	; 0xbb6c
   116a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   116a8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]


/* Prepare data to be sent to mcu0 */
void to_autopilot_from_last_radio (void) {
  uint8_t i;
  for(i = 0; i < RADIO_CTL_NB; i++)
   116ac:	79fb      	ldrb	r3, [r7, #7]
   116ae:	3301      	adds	r3, #1
   116b0:	71fb      	strb	r3, [r7, #7]
   116b2:	79fb      	ldrb	r3, [r7, #7]
   116b4:	2b08      	cmp	r3, #8
   116b6:	d9eb      	bls.n	11690 <to_autopilot_from_last_radio+0xc>
      to_mega128.channels[i] = last_radio[i];

  to_mega128.status = (radio_ok ? _BV(STATUS_RADIO_OK) : 0);
   116b8:	f64b 4314 	movw	r3, #48148	; 0xbc14
   116bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   116c0:	781b      	ldrb	r3, [r3, #0]
   116c2:	2b00      	cmp	r3, #0
   116c4:	bf0c      	ite	eq
   116c6:	2300      	moveq	r3, #0
   116c8:	2301      	movne	r3, #1
   116ca:	b2db      	uxtb	r3, r3
   116cc:	461a      	mov	r2, r3
   116ce:	f64b 336c 	movw	r3, #47980	; 0xbb6c
   116d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   116d6:	74da      	strb	r2, [r3, #19]
  to_mega128.status |= (radio_really_lost ? _BV(RADIO_REALLY_LOST) : 0);
   116d8:	f64b 336c 	movw	r3, #47980	; 0xbb6c
   116dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   116e0:	7cdb      	ldrb	r3, [r3, #19]
   116e2:	b2da      	uxtb	r2, r3
   116e4:	f64b 4316 	movw	r3, #48150	; 0xbc16
   116e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   116ec:	781b      	ldrb	r3, [r3, #0]
   116ee:	2b00      	cmp	r3, #0
   116f0:	d001      	beq.n	116f6 <to_autopilot_from_last_radio+0x72>
   116f2:	2302      	movs	r3, #2
   116f4:	e000      	b.n	116f8 <to_autopilot_from_last_radio+0x74>
   116f6:	2300      	movs	r3, #0
   116f8:	4313      	orrs	r3, r2
   116fa:	b2db      	uxtb	r3, r3
   116fc:	b2da      	uxtb	r2, r3
   116fe:	f64b 336c 	movw	r3, #47980	; 0xbb6c
   11702:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11706:	74da      	strb	r2, [r3, #19]
  if (last_radio_contains_avg_channels) {
   11708:	f64b 334a 	movw	r3, #47946	; 0xbb4a
   1170c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11710:	781b      	ldrb	r3, [r3, #0]
   11712:	2b00      	cmp	r3, #0
   11714:	d012      	beq.n	1173c <to_autopilot_from_last_radio+0xb8>
      to_mega128.status |= _BV(AVERAGED_CHANNELS_SENT);
   11716:	f64b 336c 	movw	r3, #47980	; 0xbb6c
   1171a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1171e:	7cdb      	ldrb	r3, [r3, #19]
   11720:	f043 0304 	orr.w	r3, r3, #4
   11724:	b2da      	uxtb	r2, r3
   11726:	f64b 336c 	movw	r3, #47980	; 0xbb6c
   1172a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1172e:	74da      	strb	r2, [r3, #19]
      last_radio_contains_avg_channels = FALSE;
   11730:	f64b 334a 	movw	r3, #47946	; 0xbb4a
   11734:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11738:	2200      	movs	r2, #0
   1173a:	701a      	strb	r2, [r3, #0]
  }
  to_mega128.ppm_cpt = last_ppm_cpt;
   1173c:	f64b 4318 	movw	r3, #48152	; 0xbc18
   11740:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11744:	781a      	ldrb	r2, [r3, #0]
   11746:	f64b 336c 	movw	r3, #47980	; 0xbb6c
   1174a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1174e:	749a      	strb	r2, [r3, #18]
#ifndef CTL_BRD_V1_1
  to_mega128.vsupply = VoltageOfAdc(vsupply_adc_buf.sum/AV_NB_SAMPLE) * 10;
   11750:	f64b 3388 	movw	r3, #48008	; 0xbb88
   11754:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11758:	881b      	ldrh	r3, [r3, #0]
   1175a:	4618      	mov	r0, r3
   1175c:	f001 f932 	bl	129c4 <__aeabi_i2d>
   11760:	4602      	mov	r2, r0
   11762:	460b      	mov	r3, r1
   11764:	4610      	mov	r0, r2
   11766:	4619      	mov	r1, r3
   11768:	a31b      	add	r3, pc, #108	; (adr r3, 117d8 <to_autopilot_from_last_radio+0x154>)
   1176a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1176e:	f001 f98f 	bl	12a90 <__aeabi_dmul>
   11772:	4602      	mov	r2, r0
   11774:	460b      	mov	r3, r1
   11776:	4610      	mov	r0, r2
   11778:	4619      	mov	r1, r3
   1177a:	f04f 0200 	mov.w	r2, #0
   1177e:	f04f 0300 	mov.w	r3, #0
   11782:	f2c4 0340 	movt	r3, #16448	; 0x4040
   11786:	f001 faad 	bl	12ce4 <__aeabi_ddiv>
   1178a:	4602      	mov	r2, r0
   1178c:	460b      	mov	r3, r1
   1178e:	4610      	mov	r0, r2
   11790:	4619      	mov	r1, r3
   11792:	a313      	add	r3, pc, #76	; (adr r3, 117e0 <to_autopilot_from_last_radio+0x15c>)
   11794:	e9d3 2300 	ldrd	r2, r3, [r3]
   11798:	f000 ffc8 	bl	1272c <__adddf3>
   1179c:	4602      	mov	r2, r0
   1179e:	460b      	mov	r3, r1
   117a0:	4610      	mov	r0, r2
   117a2:	4619      	mov	r1, r3
   117a4:	f04f 0200 	mov.w	r2, #0
   117a8:	f04f 0300 	mov.w	r3, #0
   117ac:	f2c4 0324 	movt	r3, #16420	; 0x4024
   117b0:	f001 f96e 	bl	12a90 <__aeabi_dmul>
   117b4:	4602      	mov	r2, r0
   117b6:	460b      	mov	r3, r1
   117b8:	4610      	mov	r0, r2
   117ba:	4619      	mov	r1, r3
   117bc:	f001 fc2a 	bl	13014 <__aeabi_d2uiz>
   117c0:	4603      	mov	r3, r0
   117c2:	b2da      	uxtb	r2, r3
   117c4:	f64b 336c 	movw	r3, #47980	; 0xbb6c
   117c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117cc:	755a      	strb	r2, [r3, #21]
#else
  to_mega128.vsupply = 0;
#endif
}
   117ce:	3708      	adds	r7, #8
   117d0:	46bd      	mov	sp, r7
   117d2:	bd80      	pop	{r7, pc}
   117d4:	f3af 8000 	nop.w
   117d8:	1eb851ec 	.word	0x1eb851ec
   117dc:	3f91eb85 	.word	0x3f91eb85
   117e0:	020c49ba 	.word	0x020c49ba
   117e4:	3fb6872b 	.word	0x3fb6872b

000117e8 <send_data_to_autopilot_task>:

void send_data_to_autopilot_task(void)
{
   117e8:	b580      	push	{r7, lr}
   117ea:	af00      	add	r7, sp, #0
	//vPrintString("S_2 send_data_to_autopilot_task start! \n\r"); //SunnyBeike

    // modified by wanbo
//   if ( !SpiIsSelected() && spi_was_interrupted ) 
   {
      spi_was_interrupted = FALSE;
   117ec:	f64b 3383 	movw	r3, #48003	; 0xbb83
   117f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117f4:	2200      	movs	r2, #0
   117f6:	701a      	strb	r2, [r3, #0]
      to_autopilot_from_last_radio();
   117f8:	f7ff ff44 	bl	11684 <to_autopilot_from_last_radio>
      spi_reset();
   117fc:	f7ff fe80 	bl	11500 <spi_reset>
   }
	//vPrintString("S_2 send_data_to_autopilot_task end! \n\r"); //SunnyBeike

}
   11800:	bd80      	pop	{r7, pc}
   11802:	bf00      	nop

00011804 <fbw_init>:
	static uint8_t _1Hz;
	static uint8_t _20Hz;
#endif
*/

void fbw_init(void) {
   11804:	b580      	push	{r7, lr}
   11806:	af00      	add	r7, sp, #0
  uart_init_tx();
   11808:	f000 fb02 	bl	11e10 <uart_init_tx>
  uart_print_string("FBW Booting $Id: main.c,v 1.3 2008/10/22 19:41:19 casse Exp $\n\r");
   1180c:	f643 1068 	movw	r0, #14696	; 0x3968
   11810:	f2c0 0001 	movt	r0, #1
   11814:	f000 fbda 	bl	11fcc <uart_print_string>

#ifndef CTL_BRD_V1_1
  fbw_adc_init();
   11818:	f7ff fab2 	bl	10d80 <fbw_adc_init>
  fbw_adc_buf_channel(3, &vsupply_adc_buf);
   1181c:	2003      	movs	r0, #3
   1181e:	f64b 3188 	movw	r1, #48008	; 0xbb88
   11822:	f2c2 0104 	movt	r1, #8196	; 0x2004
   11826:	f7ff fa97 	bl	10d58 <fbw_adc_buf_channel>
  fbw_adc_buf_channel(6, &vservos_adc_buf);
   1182a:	2006      	movs	r0, #6
   1182c:	f64b 31cc 	movw	r1, #48076	; 0xbbcc
   11830:	f2c2 0104 	movt	r1, #8196	; 0x2004
   11834:	f7ff fa90 	bl	10d58 <fbw_adc_buf_channel>
#endif
  timer_init();
   11838:	f7ff fece 	bl	115d8 <timer_init>
  servo_init();
   1183c:	f000 f894 	bl	11968 <servo_init>
  ppm_init();
   11840:	f7ff fee2 	bl	11608 <ppm_init>
  fbw_spi_init();
   11844:	f7ff fe92 	bl	1156c <fbw_spi_init>
  //sei(); //FN
}
   11848:	bd80      	pop	{r7, pc}
   1184a:	bf00      	nop

0001184c <test_ppm_task>:
  return 0;
}
#endif
*/
void test_ppm_task(void)
{
   1184c:	b580      	push	{r7, lr}
   1184e:	af00      	add	r7, sp, #0
	//vPrintString("S_1 test_ppm_task start! \n\r"); //SunnyBeike
    // modified by wanbo
    //if( ppm_valid ) 
    {
      ppm_valid = FALSE;
   11850:	f64b 334b 	movw	r3, #47947	; 0xbb4b
   11854:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11858:	2200      	movs	r2, #0
   1185a:	701a      	strb	r2, [r3, #0]
      ppm_cpt++;
   1185c:	f64b 4317 	movw	r3, #48151	; 0xbc17
   11860:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11864:	781b      	ldrb	r3, [r3, #0]
   11866:	3301      	adds	r3, #1
   11868:	b2da      	uxtb	r2, r3
   1186a:	f64b 4317 	movw	r3, #48151	; 0xbc17
   1186e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11872:	701a      	strb	r2, [r3, #0]
      radio_ok = TRUE;
   11874:	f64b 4314 	movw	r3, #48148	; 0xbc14
   11878:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1187c:	2201      	movs	r2, #1
   1187e:	701a      	strb	r2, [r3, #0]
      radio_really_lost = FALSE;
   11880:	f64b 4316 	movw	r3, #48150	; 0xbc16
   11884:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11888:	2200      	movs	r2, #0
   1188a:	701a      	strb	r2, [r3, #0]
      time_since_last_ppm = 0;
   1188c:	f64b 4312 	movw	r3, #48146	; 0xbc12
   11890:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11894:	2200      	movs	r2, #0
   11896:	801a      	strh	r2, [r3, #0]
      last_radio_from_ppm();
   11898:	f7ff fb3a 	bl	10f10 <last_radio_from_ppm>
      //if (last_radio_contains_avg_channels) 
      {
	mode = MODE_OF_PPRZ(last_radio[RADIO_MODE]);
   1189c:	f64b 3324 	movw	r3, #47908	; 0xbb24
   118a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118a4:	891b      	ldrh	r3, [r3, #8]
   118a6:	b21b      	sxth	r3, r3
   118a8:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
   118ac:	bfb4      	ite	lt
   118ae:	2300      	movlt	r3, #0
   118b0:	2301      	movge	r3, #1
   118b2:	b2db      	uxtb	r3, r3
   118b4:	461a      	mov	r2, r3
   118b6:	f64b 4310 	movw	r3, #48144	; 0xbc10
   118ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118be:	701a      	strb	r2, [r3, #0]
      }
      if (mode == MODE_MANUAL) 
   118c0:	f64b 4310 	movw	r3, #48144	; 0xbc10
   118c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118c8:	781b      	ldrb	r3, [r3, #0]
   118ca:	2b00      	cmp	r3, #0
   118cc:	d105      	bne.n	118da <test_ppm_task+0x8e>
      {
	servo_set(last_radio);
   118ce:	f64b 3024 	movw	r0, #47908	; 0xbb24
   118d2:	f2c2 0004 	movt	r0, #8196	; 0x2004
   118d6:	f000 f925 	bl	11b24 <servo_set>
      }
    } 
    //else if (mode == MODE_MANUAL && radio_really_lost) 
    {
      mode = MODE_AUTO;
   118da:	f64b 4310 	movw	r3, #48144	; 0xbc10
   118de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118e2:	2201      	movs	r2, #1
   118e4:	701a      	strb	r2, [r3, #0]
    }
    //if (time_since_last_ppm >= STALLED_TIME) 
    {
      radio_ok = FALSE;
   118e6:	f64b 4314 	movw	r3, #48148	; 0xbc14
   118ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118ee:	2200      	movs	r2, #0
   118f0:	701a      	strb	r2, [r3, #0]
    }
    //if (time_since_last_ppm >= REALLY_STALLED_TIME) 
    {
      radio_really_lost = TRUE;
   118f2:	f64b 4316 	movw	r3, #48150	; 0xbc16
   118f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118fa:	2201      	movs	r2, #1
   118fc:	701a      	strb	r2, [r3, #0]
    }
	//vPrintString("S_1 test_ppm_task end! \n\r"); //SunnyBeike

}
   118fe:	bd80      	pop	{r7, pc}

00011900 <check_failsafe_task>:
void check_failsafe_task(void)
{
   11900:	b580      	push	{r7, lr}
   11902:	af00      	add	r7, sp, #0
	//vPrintString("S_9 check_failsafe_task start! \n\r"); //SunnyBeike
    //modified by wanbo
    //if ((mode == MODE_MANUAL && !radio_ok) || (mode == MODE_AUTO && !mega128_ok)) 
    {
      servo_set(failsafe);
   11904:	f643 1054 	movw	r0, #14676	; 0x3954
   11908:	f2c0 0001 	movt	r0, #1
   1190c:	f000 f90a 	bl	11b24 <servo_set>
    }
	//vPrintString("S_9 check_failsafe_task end! \n\r"); //SunnyBeike
}
   11910:	bd80      	pop	{r7, pc}
   11912:	bf00      	nop

00011914 <check_mega128_values_task>:
void check_mega128_values_task(void)
{
   11914:	b580      	push	{r7, lr}
   11916:	af00      	add	r7, sp, #0
	//vPrintString("S_8 check_mega128_values_task start! \n\r"); //SunnyBeike
// modified by wanbo
     //if ( !SpiIsSelected() && spi_was_interrupted ) 
     {
         if (mega128_receive_valid)
   11918:	f64b 3382 	movw	r3, #48002	; 0xbb82
   1191c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11920:	781b      	ldrb	r3, [r3, #0]
   11922:	b2db      	uxtb	r3, r3
   11924:	2b00      	cmp	r3, #0
   11926:	d018      	beq.n	1195a <check_mega128_values_task+0x46>
         { 
             time_since_last_mega128 = 0;
   11928:	f64b 4311 	movw	r3, #48145	; 0xbc11
   1192c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11930:	2200      	movs	r2, #0
   11932:	701a      	strb	r2, [r3, #0]
             mega128_ok = TRUE;
   11934:	f64b 4315 	movw	r3, #48149	; 0xbc15
   11938:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1193c:	2201      	movs	r2, #1
   1193e:	701a      	strb	r2, [r3, #0]
             if (mode == MODE_AUTO)
   11940:	f64b 4310 	movw	r3, #48144	; 0xbc10
   11944:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11948:	781b      	ldrb	r3, [r3, #0]
   1194a:	2b01      	cmp	r3, #1
   1194c:	d105      	bne.n	1195a <check_mega128_values_task+0x46>
                 servo_set(from_mega128.channels);
   1194e:	f64b 3054 	movw	r0, #47956	; 0xbb54
   11952:	f2c2 0004 	movt	r0, #8196	; 0x2004
   11956:	f000 f8e5 	bl	11b24 <servo_set>
         }
     }
     //if (time_since_last_mega128 == STALLED_TIME) 
     {
         mega128_ok = FALSE;
   1195a:	f64b 4315 	movw	r3, #48149	; 0xbc15
   1195e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11962:	2200      	movs	r2, #0
   11964:	701a      	strb	r2, [r3, #0]
     }
	//vPrintString("S_8 check_mega128_values_task end! \n\r"); //SunnyBeike
}
   11966:	bd80      	pop	{r7, pc}

00011968 <servo_init>:
 *
 * Ideally, you can use two decade counters to drive 20 servos.
 */
void
servo_init( void )
{
   11968:	b480      	push	{r7}
   1196a:	b083      	sub	sp, #12
   1196c:	af00      	add	r7, sp, #0
  uint8_t			i;

  /* Configure the reset and clock lines */
  _4017_RESET_DDR |= _BV(_4017_RESET_PIN);
   1196e:	f248 0311 	movw	r3, #32785	; 0x8011
   11972:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11976:	f248 0211 	movw	r2, #32785	; 0x8011
   1197a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1197e:	7812      	ldrb	r2, [r2, #0]
   11980:	b2d2      	uxtb	r2, r2
   11982:	f062 027f 	orn	r2, r2, #127	; 0x7f
   11986:	b2d2      	uxtb	r2, r2
   11988:	701a      	strb	r2, [r3, #0]
  _4017_CLOCK_DDR |= _BV(_4017_CLOCK_PIN);
   1198a:	f248 0317 	movw	r3, #32791	; 0x8017
   1198e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11992:	f248 0217 	movw	r2, #32791	; 0x8017
   11996:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1199a:	7812      	ldrb	r2, [r2, #0]
   1199c:	b2d2      	uxtb	r2, r2
   1199e:	f042 0202 	orr.w	r2, r2, #2
   119a2:	b2d2      	uxtb	r2, r2
   119a4:	701a      	strb	r2, [r3, #0]

  /* Reset the decade counter */
  sbi( _4017_RESET_PORT, _4017_RESET_PIN );
   119a6:	f248 0312 	movw	r3, #32786	; 0x8012
   119aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   119ae:	f248 0212 	movw	r2, #32786	; 0x8012
   119b2:	f2c2 0200 	movt	r2, #8192	; 0x2000
   119b6:	7812      	ldrb	r2, [r2, #0]
   119b8:	b2d2      	uxtb	r2, r2
   119ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
   119be:	b2d2      	uxtb	r2, r2
   119c0:	701a      	strb	r2, [r3, #0]

  /* Lower the regular servo line */
  cbi( _4017_CLOCK_PORT, _4017_CLOCK_PIN );
   119c2:	f248 0318 	movw	r3, #32792	; 0x8018
   119c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   119ca:	f248 0218 	movw	r2, #32792	; 0x8018
   119ce:	f2c2 0200 	movt	r2, #8192	; 0x2000
   119d2:	7812      	ldrb	r2, [r2, #0]
   119d4:	b2d2      	uxtb	r2, r2
   119d6:	f022 0202 	bic.w	r2, r2, #2
   119da:	b2d2      	uxtb	r2, r2
   119dc:	701a      	strb	r2, [r3, #0]

  /* Set all servos at their midpoints */
  for( i=0 ; i < _4017_NB_CHANNELS ; i++ )
   119de:	2300      	movs	r3, #0
   119e0:	71fb      	strb	r3, [r7, #7]
   119e2:	e00b      	b.n	119fc <servo_init+0x94>
    //    servo_widths[i] = SERVO_MIN;
    servo_widths[i] = (SERVO_MIN+SERVO_MAX)/2;
   119e4:	79fa      	ldrb	r2, [r7, #7]
   119e6:	f64b 431c 	movw	r3, #48156	; 0xbc1c
   119ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119ee:	f645 51c0 	movw	r1, #24000	; 0x5dc0
   119f2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

  /* Lower the regular servo line */
  cbi( _4017_CLOCK_PORT, _4017_CLOCK_PIN );

  /* Set all servos at their midpoints */
  for( i=0 ; i < _4017_NB_CHANNELS ; i++ )
   119f6:	79fb      	ldrb	r3, [r7, #7]
   119f8:	3301      	adds	r3, #1
   119fa:	71fb      	strb	r3, [r7, #7]
   119fc:	79fb      	ldrb	r3, [r7, #7]
   119fe:	2b09      	cmp	r3, #9
   11a00:	d9f0      	bls.n	119e4 <servo_init+0x7c>
    //    servo_widths[i] = SERVO_MIN;
    servo_widths[i] = (SERVO_MIN+SERVO_MAX)/2;
	
  /* Set servos to go off some long time from now */
  SERVO_OCR	= 32768ul;
   11a02:	f248 032a 	movw	r3, #32810	; 0x802a
   11a06:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a0a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   11a0e:	801a      	strh	r2, [r3, #0]

  /*
   * Configure output compare to toggle the output bits.
   */
  TCCR1A |=  _BV(SERVO_COM0 );
   11a10:	f248 032f 	movw	r3, #32815	; 0x802f
   11a14:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a18:	f248 022f 	movw	r2, #32815	; 0x802f
   11a1c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11a20:	7812      	ldrb	r2, [r2, #0]
   11a22:	b2d2      	uxtb	r2, r2
   11a24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   11a28:	b2d2      	uxtb	r2, r2
   11a2a:	701a      	strb	r2, [r3, #0]
	
  /* Clear the interrupt flags in case they are set */
  TIFR = _BV(SERVO_FLAG);
   11a2c:	f248 0336 	movw	r3, #32822	; 0x8036
   11a30:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a34:	2210      	movs	r2, #16
   11a36:	701a      	strb	r2, [r3, #0]

  /* Unassert the decade counter reset to start it running */
  cbi( _4017_RESET_PORT, _4017_RESET_PIN );
   11a38:	f248 0312 	movw	r3, #32786	; 0x8012
   11a3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a40:	f248 0212 	movw	r2, #32786	; 0x8012
   11a44:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11a48:	7812      	ldrb	r2, [r2, #0]
   11a4a:	b2d2      	uxtb	r2, r2
   11a4c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   11a50:	b2d2      	uxtb	r2, r2
   11a52:	701a      	strb	r2, [r3, #0]

  /* Enable our output compare interrupts */
  TIMSK |= _BV(SERVO_ENABLE );
   11a54:	f248 0337 	movw	r3, #32823	; 0x8037
   11a58:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a5c:	f248 0237 	movw	r2, #32823	; 0x8037
   11a60:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11a64:	7812      	ldrb	r2, [r2, #0]
   11a66:	b2d2      	uxtb	r2, r2
   11a68:	f042 0210 	orr.w	r2, r2, #16
   11a6c:	b2d2      	uxtb	r2, r2
   11a6e:	701a      	strb	r2, [r3, #0]
}
   11a70:	370c      	adds	r7, #12
   11a72:	46bd      	mov	sp, r7
   11a74:	f85d 7b04 	ldr.w	r7, [sp], #4
   11a78:	4770      	bx	lr
   11a7a:	bf00      	nop

00011a7c <servo_set_one>:

  servo++;
}
#endif

void servo_set_one(uint8_t servo, uint16_t value_us) {
   11a7c:	b480      	push	{r7}
   11a7e:	b083      	sub	sp, #12
   11a80:	af00      	add	r7, sp, #0
   11a82:	4602      	mov	r2, r0
   11a84:	460b      	mov	r3, r1
   11a86:	71fa      	strb	r2, [r7, #7]
   11a88:	80bb      	strh	r3, [r7, #4]
  servo_widths[servo] = ChopServo(CLOCK*value_us);
   11a8a:	79f9      	ldrb	r1, [r7, #7]
   11a8c:	88bb      	ldrh	r3, [r7, #4]
   11a8e:	011b      	lsls	r3, r3, #4
   11a90:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   11a94:	d308      	bcc.n	11aa8 <servo_set_one+0x2c>
   11a96:	88bb      	ldrh	r3, [r7, #4]
   11a98:	011b      	lsls	r3, r3, #4
   11a9a:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   11a9e:	bf28      	it	cs
   11aa0:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   11aa4:	b29a      	uxth	r2, r3
   11aa6:	e001      	b.n	11aac <servo_set_one+0x30>
   11aa8:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   11aac:	f64b 431c 	movw	r3, #48156	; 0xbc1c
   11ab0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ab4:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
}
   11ab8:	370c      	adds	r7, #12
   11aba:	46bd      	mov	sp, r7
   11abc:	f85d 7b04 	ldr.w	r7, [sp], #4
   11ac0:	4770      	bx	lr
   11ac2:	bf00      	nop

00011ac4 <servo_transmit>:

void 
servo_transmit(void) {
   11ac4:	b580      	push	{r7, lr}
   11ac6:	b082      	sub	sp, #8
   11ac8:	af00      	add	r7, sp, #0
  uint8_t servo;
	//vPrintString("S_10 servo_transmit start! \n\r"); //SunnyBeike
  uart_transmit((uint8_t)0); uart_transmit((uint8_t)0);
   11aca:	2000      	movs	r0, #0
   11acc:	f000 f9e6 	bl	11e9c <uart_transmit>
   11ad0:	2000      	movs	r0, #0
   11ad2:	f000 f9e3 	bl	11e9c <uart_transmit>

  for(servo = 0; servo < _4017_NB_CHANNELS; servo++) {
   11ad6:	2300      	movs	r3, #0
   11ad8:	71fb      	strb	r3, [r7, #7]
   11ada:	e01a      	b.n	11b12 <servo_transmit+0x4e>
    uart_transmit((uint8_t)(servo_widths[servo] >> 8));
   11adc:	79fa      	ldrb	r2, [r7, #7]
   11ade:	f64b 431c 	movw	r3, #48156	; 0xbc1c
   11ae2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ae6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   11aea:	0a1b      	lsrs	r3, r3, #8
   11aec:	b29b      	uxth	r3, r3
   11aee:	b2db      	uxtb	r3, r3
   11af0:	4618      	mov	r0, r3
   11af2:	f000 f9d3 	bl	11e9c <uart_transmit>
    uart_transmit((uint8_t)(servo_widths[servo] & 0xff));
   11af6:	79fa      	ldrb	r2, [r7, #7]
   11af8:	f64b 431c 	movw	r3, #48156	; 0xbc1c
   11afc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b00:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   11b04:	b2db      	uxtb	r3, r3
   11b06:	4618      	mov	r0, r3
   11b08:	f000 f9c8 	bl	11e9c <uart_transmit>
servo_transmit(void) {
  uint8_t servo;
	//vPrintString("S_10 servo_transmit start! \n\r"); //SunnyBeike
  uart_transmit((uint8_t)0); uart_transmit((uint8_t)0);

  for(servo = 0; servo < _4017_NB_CHANNELS; servo++) {
   11b0c:	79fb      	ldrb	r3, [r7, #7]
   11b0e:	3301      	adds	r3, #1
   11b10:	71fb      	strb	r3, [r7, #7]
   11b12:	79fb      	ldrb	r3, [r7, #7]
   11b14:	2b09      	cmp	r3, #9
   11b16:	d9e1      	bls.n	11adc <servo_transmit+0x18>
    uart_transmit((uint8_t)(servo_widths[servo] >> 8));
    uart_transmit((uint8_t)(servo_widths[servo] & 0xff));
  }
  uart_transmit((uint8_t)'\n');
   11b18:	200a      	movs	r0, #10
   11b1a:	f000 f9bf 	bl	11e9c <uart_transmit>
	//vPrintString("S_10 servo_transmit end! \n\r"); //SunnyBeike
}
   11b1e:	3708      	adds	r7, #8
   11b20:	46bd      	mov	sp, r7
   11b22:	bd80      	pop	{r7, pc}

00011b24 <servo_set>:
 *
 * defines how servos react to radio control or autopilot channels
 *
 */

void servo_set(const pprz_t values[]) {
   11b24:	b5b0      	push	{r4, r5, r7, lr}
   11b26:	b084      	sub	sp, #16
   11b28:	af00      	add	r7, sp, #0
   11b2a:	6078      	str	r0, [r7, #4]
  ServoSet(values); /*Generated from airframe.xml */
   11b2c:	687b      	ldr	r3, [r7, #4]
   11b2e:	330a      	adds	r3, #10
   11b30:	881b      	ldrh	r3, [r3, #0]
   11b32:	b21b      	sxth	r3, r3
   11b34:	005b      	lsls	r3, r3, #1
   11b36:	4618      	mov	r0, r3
   11b38:	f000 ff44 	bl	129c4 <__aeabi_i2d>
   11b3c:	4602      	mov	r2, r0
   11b3e:	460b      	mov	r3, r1
   11b40:	4610      	mov	r0, r2
   11b42:	4619      	mov	r1, r3
   11b44:	a3a6      	add	r3, pc, #664	; (adr r3, 11de0 <servo_set+0x2bc>)
   11b46:	e9d3 2300 	ldrd	r2, r3, [r3]
   11b4a:	f000 ffa1 	bl	12a90 <__aeabi_dmul>
   11b4e:	4602      	mov	r2, r0
   11b50:	460b      	mov	r3, r1
   11b52:	4610      	mov	r0, r2
   11b54:	4619      	mov	r1, r3
   11b56:	f001 fa35 	bl	12fc4 <__aeabi_d2iz>
   11b5a:	4603      	mov	r3, r0
   11b5c:	b29b      	uxth	r3, r3
   11b5e:	b29b      	uxth	r3, r3
   11b60:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
   11b64:	81fb      	strh	r3, [r7, #14]
   11b66:	89fb      	ldrh	r3, [r7, #14]
   11b68:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   11b6c:	d307      	bcc.n	11b7e <servo_set+0x5a>
   11b6e:	89fb      	ldrh	r3, [r7, #14]
   11b70:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   11b74:	bf28      	it	cs
   11b76:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   11b7a:	b29a      	uxth	r2, r3
   11b7c:	e001      	b.n	11b82 <servo_set+0x5e>
   11b7e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   11b82:	f64b 431c 	movw	r3, #48156	; 0xbc1c
   11b86:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b8a:	80da      	strh	r2, [r3, #6]
   11b8c:	687b      	ldr	r3, [r7, #4]
   11b8e:	881b      	ldrh	r3, [r3, #0]
   11b90:	b21b      	sxth	r3, r3
   11b92:	005b      	lsls	r3, r3, #1
   11b94:	4618      	mov	r0, r3
   11b96:	f000 ff15 	bl	129c4 <__aeabi_i2d>
   11b9a:	4602      	mov	r2, r0
   11b9c:	460b      	mov	r3, r1
   11b9e:	4610      	mov	r0, r2
   11ba0:	4619      	mov	r1, r3
   11ba2:	a38f      	add	r3, pc, #572	; (adr r3, 11de0 <servo_set+0x2bc>)
   11ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
   11ba8:	f000 ff72 	bl	12a90 <__aeabi_dmul>
   11bac:	4602      	mov	r2, r0
   11bae:	460b      	mov	r3, r1
   11bb0:	4610      	mov	r0, r2
   11bb2:	4619      	mov	r1, r3
   11bb4:	f001 fa06 	bl	12fc4 <__aeabi_d2iz>
   11bb8:	4603      	mov	r3, r0
   11bba:	b29b      	uxth	r3, r3
   11bbc:	b29b      	uxth	r3, r3
   11bbe:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
   11bc2:	81fb      	strh	r3, [r7, #14]
   11bc4:	89fb      	ldrh	r3, [r7, #14]
   11bc6:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   11bca:	d307      	bcc.n	11bdc <servo_set+0xb8>
   11bcc:	89fb      	ldrh	r3, [r7, #14]
   11bce:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   11bd2:	bf28      	it	cs
   11bd4:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   11bd8:	b29a      	uxth	r2, r3
   11bda:	e001      	b.n	11be0 <servo_set+0xbc>
   11bdc:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   11be0:	f64b 431c 	movw	r3, #48156	; 0xbc1c
   11be4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11be8:	825a      	strh	r2, [r3, #18]
   11bea:	687b      	ldr	r3, [r7, #4]
   11bec:	3304      	adds	r3, #4
   11bee:	881b      	ldrh	r3, [r3, #0]
   11bf0:	b21b      	sxth	r3, r3
   11bf2:	4618      	mov	r0, r3
   11bf4:	f000 fee6 	bl	129c4 <__aeabi_i2d>
   11bf8:	4602      	mov	r2, r0
   11bfa:	460b      	mov	r3, r1
   11bfc:	4610      	mov	r0, r2
   11bfe:	4619      	mov	r1, r3
   11c00:	a379      	add	r3, pc, #484	; (adr r3, 11de8 <servo_set+0x2c4>)
   11c02:	e9d3 2300 	ldrd	r2, r3, [r3]
   11c06:	f000 ff43 	bl	12a90 <__aeabi_dmul>
   11c0a:	4602      	mov	r2, r0
   11c0c:	460b      	mov	r3, r1
   11c0e:	4610      	mov	r0, r2
   11c10:	4619      	mov	r1, r3
   11c12:	f001 f9d7 	bl	12fc4 <__aeabi_d2iz>
   11c16:	4603      	mov	r3, r0
   11c18:	b29b      	uxth	r3, r3
   11c1a:	b29b      	uxth	r3, r3
   11c1c:	f503 43bf 	add.w	r3, r3, #24448	; 0x5f80
   11c20:	3320      	adds	r3, #32
   11c22:	81fb      	strh	r3, [r7, #14]
   11c24:	89fb      	ldrh	r3, [r7, #14]
   11c26:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   11c2a:	d307      	bcc.n	11c3c <servo_set+0x118>
   11c2c:	89fb      	ldrh	r3, [r7, #14]
   11c2e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   11c32:	bf28      	it	cs
   11c34:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   11c38:	b29a      	uxth	r2, r3
   11c3a:	e001      	b.n	11c40 <servo_set+0x11c>
   11c3c:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   11c40:	f64b 431c 	movw	r3, #48156	; 0xbc1c
   11c44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c48:	819a      	strh	r2, [r3, #12]
   11c4a:	687b      	ldr	r3, [r7, #4]
   11c4c:	885b      	ldrh	r3, [r3, #2]
   11c4e:	81bb      	strh	r3, [r7, #12]
   11c50:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   11c54:	2b00      	cmp	r3, #0
   11c56:	dd06      	ble.n	11c66 <servo_set+0x142>
   11c58:	f04f 0400 	mov.w	r4, #0
   11c5c:	f04f 0500 	mov.w	r5, #0
   11c60:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
   11c64:	e002      	b.n	11c6c <servo_set+0x148>
   11c66:	a562      	add	r5, pc, #392	; (adr r5, 11df0 <servo_set+0x2cc>)
   11c68:	e9d5 4500 	ldrd	r4, r5, [r5]
   11c6c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   11c70:	4618      	mov	r0, r3
   11c72:	f000 fea7 	bl	129c4 <__aeabi_i2d>
   11c76:	4602      	mov	r2, r0
   11c78:	460b      	mov	r3, r1
   11c7a:	4620      	mov	r0, r4
   11c7c:	4629      	mov	r1, r5
   11c7e:	f000 ff07 	bl	12a90 <__aeabi_dmul>
   11c82:	4602      	mov	r2, r0
   11c84:	460b      	mov	r3, r1
   11c86:	4610      	mov	r0, r2
   11c88:	4619      	mov	r1, r3
   11c8a:	a35b      	add	r3, pc, #364	; (adr r3, 11df8 <servo_set+0x2d4>)
   11c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
   11c90:	f000 fefe 	bl	12a90 <__aeabi_dmul>
   11c94:	4602      	mov	r2, r0
   11c96:	460b      	mov	r3, r1
   11c98:	4610      	mov	r0, r2
   11c9a:	4619      	mov	r1, r3
   11c9c:	f001 f992 	bl	12fc4 <__aeabi_d2iz>
   11ca0:	4603      	mov	r3, r0
   11ca2:	b29b      	uxth	r3, r3
   11ca4:	b29b      	uxth	r3, r3
   11ca6:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
   11caa:	81fb      	strh	r3, [r7, #14]
   11cac:	89fb      	ldrh	r3, [r7, #14]
   11cae:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   11cb2:	d307      	bcc.n	11cc4 <servo_set+0x1a0>
   11cb4:	89fb      	ldrh	r3, [r7, #14]
   11cb6:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   11cba:	bf28      	it	cs
   11cbc:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   11cc0:	b29a      	uxth	r2, r3
   11cc2:	e001      	b.n	11cc8 <servo_set+0x1a4>
   11cc4:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   11cc8:	f64b 431c 	movw	r3, #48156	; 0xbc1c
   11ccc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11cd0:	801a      	strh	r2, [r3, #0]
   11cd2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   11cd6:	2b00      	cmp	r3, #0
   11cd8:	dd03      	ble.n	11ce2 <servo_set+0x1be>
   11cda:	a545      	add	r5, pc, #276	; (adr r5, 11df0 <servo_set+0x2cc>)
   11cdc:	e9d5 4500 	ldrd	r4, r5, [r5]
   11ce0:	e005      	b.n	11cee <servo_set+0x1ca>
   11ce2:	f04f 0400 	mov.w	r4, #0
   11ce6:	f04f 0500 	mov.w	r5, #0
   11cea:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
   11cee:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   11cf2:	4618      	mov	r0, r3
   11cf4:	f000 fe66 	bl	129c4 <__aeabi_i2d>
   11cf8:	4602      	mov	r2, r0
   11cfa:	460b      	mov	r3, r1
   11cfc:	4620      	mov	r0, r4
   11cfe:	4629      	mov	r1, r5
   11d00:	f000 fec6 	bl	12a90 <__aeabi_dmul>
   11d04:	4602      	mov	r2, r0
   11d06:	460b      	mov	r3, r1
   11d08:	4610      	mov	r0, r2
   11d0a:	4619      	mov	r1, r3
   11d0c:	a33c      	add	r3, pc, #240	; (adr r3, 11e00 <servo_set+0x2dc>)
   11d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
   11d12:	f000 febd 	bl	12a90 <__aeabi_dmul>
   11d16:	4602      	mov	r2, r0
   11d18:	460b      	mov	r3, r1
   11d1a:	4610      	mov	r0, r2
   11d1c:	4619      	mov	r1, r3
   11d1e:	f001 f951 	bl	12fc4 <__aeabi_d2iz>
   11d22:	4603      	mov	r3, r0
   11d24:	b29b      	uxth	r3, r3
   11d26:	b29b      	uxth	r3, r3
   11d28:	f503 43ce 	add.w	r3, r3, #26368	; 0x6700
   11d2c:	3320      	adds	r3, #32
   11d2e:	81fb      	strh	r3, [r7, #14]
   11d30:	89fb      	ldrh	r3, [r7, #14]
   11d32:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   11d36:	d307      	bcc.n	11d48 <servo_set+0x224>
   11d38:	89fb      	ldrh	r3, [r7, #14]
   11d3a:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   11d3e:	bf28      	it	cs
   11d40:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   11d44:	b29a      	uxth	r2, r3
   11d46:	e001      	b.n	11d4c <servo_set+0x228>
   11d48:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   11d4c:	f64b 431c 	movw	r3, #48156	; 0xbc1c
   11d50:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d54:	809a      	strh	r2, [r3, #4]
   11d56:	687b      	ldr	r3, [r7, #4]
   11d58:	3306      	adds	r3, #6
   11d5a:	881b      	ldrh	r3, [r3, #0]
   11d5c:	b21b      	sxth	r3, r3
   11d5e:	4618      	mov	r0, r3
   11d60:	f000 fe30 	bl	129c4 <__aeabi_i2d>
   11d64:	4604      	mov	r4, r0
   11d66:	460d      	mov	r5, r1
   11d68:	687b      	ldr	r3, [r7, #4]
   11d6a:	3302      	adds	r3, #2
   11d6c:	881b      	ldrh	r3, [r3, #0]
   11d6e:	b21b      	sxth	r3, r3
   11d70:	4618      	mov	r0, r3
   11d72:	f000 fe27 	bl	129c4 <__aeabi_i2d>
   11d76:	4602      	mov	r2, r0
   11d78:	460b      	mov	r3, r1
   11d7a:	4620      	mov	r0, r4
   11d7c:	4629      	mov	r1, r5
   11d7e:	f000 fcd5 	bl	1272c <__adddf3>
   11d82:	4602      	mov	r2, r0
   11d84:	460b      	mov	r3, r1
   11d86:	4610      	mov	r0, r2
   11d88:	4619      	mov	r1, r3
   11d8a:	a31f      	add	r3, pc, #124	; (adr r3, 11e08 <servo_set+0x2e4>)
   11d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
   11d90:	f000 fe7e 	bl	12a90 <__aeabi_dmul>
   11d94:	4602      	mov	r2, r0
   11d96:	460b      	mov	r3, r1
   11d98:	4610      	mov	r0, r2
   11d9a:	4619      	mov	r1, r3
   11d9c:	f001 f912 	bl	12fc4 <__aeabi_d2iz>
   11da0:	4603      	mov	r3, r0
   11da2:	b29b      	uxth	r3, r3
   11da4:	b29b      	uxth	r3, r3
   11da6:	f503 43b5 	add.w	r3, r3, #23168	; 0x5a80
   11daa:	3320      	adds	r3, #32
   11dac:	81fb      	strh	r3, [r7, #14]
   11dae:	89fb      	ldrh	r3, [r7, #14]
   11db0:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   11db4:	d307      	bcc.n	11dc6 <servo_set+0x2a2>
   11db6:	89fb      	ldrh	r3, [r7, #14]
   11db8:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   11dbc:	bf28      	it	cs
   11dbe:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   11dc2:	b29a      	uxth	r2, r3
   11dc4:	e001      	b.n	11dca <servo_set+0x2a6>
   11dc6:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   11dca:	f64b 431c 	movw	r3, #48156	; 0xbc1c
   11dce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11dd2:	81da      	strh	r2, [r3, #14]
}
   11dd4:	3710      	adds	r7, #16
   11dd6:	46bd      	mov	sp, r7
   11dd8:	bdb0      	pop	{r4, r5, r7, pc}
   11dda:	bf00      	nop
   11ddc:	f3af 8000 	nop.w
   11de0:	aaaa9ef0 	.word	0xaaaa9ef0
   11de4:	3feaaaaa 	.word	0x3feaaaaa
   11de8:	fc96473e 	.word	0xfc96473e
   11dec:	3fdfc962 	.word	0x3fdfc962
   11df0:	51eb851f 	.word	0x51eb851f
   11df4:	3fe51eb8 	.word	0x3fe51eb8
   11df8:	9999999a 	.word	0x9999999a
   11dfc:	bfe19999 	.word	0xbfe19999
   11e00:	aaaa9ef0 	.word	0xaaaa9ef0
   11e04:	bfe0aaaa 	.word	0xbfe0aaaa
   11e08:	eeeed77a 	.word	0xeeeed77a
   11e0c:	bfdeeeee 	.word	0xbfdeeeee

00011e10 <uart_init_tx>:
 * UART Baud rate generation settings:
 *
 * With 16.0 MHz clock,UBRR=25  => 38400 baud
 *
 */
void uart_init_tx( void ) {
   11e10:	b480      	push	{r7}
   11e12:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRRH = 0; 
   11e14:	f248 0320 	movw	r3, #32800	; 0x8020
   11e18:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e1c:	2200      	movs	r2, #0
   11e1e:	701a      	strb	r2, [r3, #0]
  UBRRL = 25; 
   11e20:	f248 0309 	movw	r3, #32777	; 0x8009
   11e24:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e28:	2219      	movs	r2, #25
   11e2a:	701a      	strb	r2, [r3, #0]
  /* single speed */ 
  UCSRA = 0; 
   11e2c:	f248 030b 	movw	r3, #32779	; 0x800b
   11e30:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e34:	2200      	movs	r2, #0
   11e36:	701a      	strb	r2, [r3, #0]
  /* Enable transmitter */ 
  UCSRB = _BV(TXEN); 
   11e38:	f248 030a 	movw	r3, #32778	; 0x800a
   11e3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e40:	2208      	movs	r2, #8
   11e42:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0); 
   11e44:	f248 0320 	movw	r3, #32800	; 0x8020
   11e48:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e4c:	2286      	movs	r2, #134	; 0x86
   11e4e:	701a      	strb	r2, [r3, #0]
}
   11e50:	46bd      	mov	sp, r7
   11e52:	f85d 7b04 	ldr.w	r7, [sp], #4
   11e56:	4770      	bx	lr

00011e58 <uart_init_rx>:

void uart_init_rx() {
   11e58:	b480      	push	{r7}
   11e5a:	af00      	add	r7, sp, #0
  /* Enable receiver               */ 
  UCSRB |= _BV(RXEN); 
   11e5c:	f248 030a 	movw	r3, #32778	; 0x800a
   11e60:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e64:	f248 020a 	movw	r2, #32778	; 0x800a
   11e68:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11e6c:	7812      	ldrb	r2, [r2, #0]
   11e6e:	b2d2      	uxtb	r2, r2
   11e70:	f042 0210 	orr.w	r2, r2, #16
   11e74:	b2d2      	uxtb	r2, r2
   11e76:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi( UCSRB, RXCIE ); 
   11e78:	f248 030a 	movw	r3, #32778	; 0x800a
   11e7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e80:	f248 020a 	movw	r2, #32778	; 0x800a
   11e84:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11e88:	7812      	ldrb	r2, [r2, #0]
   11e8a:	b2d2      	uxtb	r2, r2
   11e8c:	f062 027f 	orn	r2, r2, #127	; 0x7f
   11e90:	b2d2      	uxtb	r2, r2
   11e92:	701a      	strb	r2, [r3, #0]
}
   11e94:	46bd      	mov	sp, r7
   11e96:	f85d 7b04 	ldr.w	r7, [sp], #4
   11e9a:	4770      	bx	lr

00011e9c <uart_transmit>:

void uart_transmit( unsigned char data ) {
   11e9c:	b480      	push	{r7}
   11e9e:	b083      	sub	sp, #12
   11ea0:	af00      	add	r7, sp, #0
   11ea2:	4603      	mov	r3, r0
   11ea4:	71fb      	strb	r3, [r7, #7]
  if (UCSRB & _BV(TXCIE)) {
   11ea6:	f248 030a 	movw	r3, #32778	; 0x800a
   11eaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11eae:	781b      	ldrb	r3, [r3, #0]
   11eb0:	b2db      	uxtb	r3, r3
   11eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
   11eb6:	2b00      	cmp	r3, #0
   11eb8:	d028      	beq.n	11f0c <uart_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail == tx_head + 1) { /* BUF_SIZE = 256 */
   11eba:	f64b 4331 	movw	r3, #48177	; 0xbc31
   11ebe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ec2:	781b      	ldrb	r3, [r3, #0]
   11ec4:	b2db      	uxtb	r3, r3
   11ec6:	461a      	mov	r2, r3
   11ec8:	f64b 4330 	movw	r3, #48176	; 0xbc30
   11ecc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ed0:	781b      	ldrb	r3, [r3, #0]
   11ed2:	3301      	adds	r3, #1
   11ed4:	429a      	cmp	r2, r3
   11ed6:	d100      	bne.n	11eda <uart_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   11ed8:	e02c      	b.n	11f34 <uart_transmit+0x98>
    }
    tx_buf[tx_head] = data;
   11eda:	f64b 4330 	movw	r3, #48176	; 0xbc30
   11ede:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ee2:	781b      	ldrb	r3, [r3, #0]
   11ee4:	461a      	mov	r2, r3
   11ee6:	f64b 4334 	movw	r3, #48180	; 0xbc34
   11eea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11eee:	79f9      	ldrb	r1, [r7, #7]
   11ef0:	5499      	strb	r1, [r3, r2]
    tx_head++; /* BUF_SIZE = 256 */
   11ef2:	f64b 4330 	movw	r3, #48176	; 0xbc30
   11ef6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11efa:	781b      	ldrb	r3, [r3, #0]
   11efc:	3301      	adds	r3, #1
   11efe:	b2da      	uxtb	r2, r3
   11f00:	f64b 4330 	movw	r3, #48176	; 0xbc30
   11f04:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11f08:	701a      	strb	r2, [r3, #0]
   11f0a:	e013      	b.n	11f34 <uart_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR = data;
   11f0c:	f248 030c 	movw	r3, #32780	; 0x800c
   11f10:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f14:	79fa      	ldrb	r2, [r7, #7]
   11f16:	701a      	strb	r2, [r3, #0]
    sbi(UCSRB, TXCIE);
   11f18:	f248 030a 	movw	r3, #32778	; 0x800a
   11f1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f20:	f248 020a 	movw	r2, #32778	; 0x800a
   11f24:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11f28:	7812      	ldrb	r2, [r2, #0]
   11f2a:	b2d2      	uxtb	r2, r2
   11f2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   11f30:	b2d2      	uxtb	r2, r2
   11f32:	701a      	strb	r2, [r3, #0]
  }
}
   11f34:	370c      	adds	r7, #12
   11f36:	46bd      	mov	sp, r7
   11f38:	f85d 7b04 	ldr.w	r7, [sp], #4
   11f3c:	4770      	bx	lr
   11f3e:	bf00      	nop

00011f40 <uart_print_hex>:

void uart_print_hex ( uint8_t c ) {
   11f40:	b590      	push	{r4, r7, lr}
   11f42:	b089      	sub	sp, #36	; 0x24
   11f44:	af00      	add	r7, sp, #0
   11f46:	4603      	mov	r3, r0
   11f48:	71fb      	strb	r3, [r7, #7]
  const uint8_t hex[16] = { '0', '1', '2', '3', '4', '5', '6', '7', 
   11f4a:	f643 13a8 	movw	r3, #14760	; 0x39a8
   11f4e:	f2c0 0301 	movt	r3, #1
   11f52:	f107 040c 	add.w	r4, r7, #12
   11f56:	6818      	ldr	r0, [r3, #0]
   11f58:	6859      	ldr	r1, [r3, #4]
   11f5a:	689a      	ldr	r2, [r3, #8]
   11f5c:	68db      	ldr	r3, [r3, #12]
   11f5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
  uint8_t high = (c & 0xF0)>>4;
   11f60:	79fb      	ldrb	r3, [r7, #7]
   11f62:	091b      	lsrs	r3, r3, #4
   11f64:	77fb      	strb	r3, [r7, #31]
  uint8_t low  = c & 0x0F;
   11f66:	79fb      	ldrb	r3, [r7, #7]
   11f68:	f003 030f 	and.w	r3, r3, #15
   11f6c:	77bb      	strb	r3, [r7, #30]
    /*
    *Added by SunnyBeike
    * */
        high = 15;
   11f6e:	230f      	movs	r3, #15
   11f70:	77fb      	strb	r3, [r7, #31]
        low = 15;
   11f72:	230f      	movs	r3, #15
   11f74:	77bb      	strb	r3, [r7, #30]
    /*
    *End
    * */

    uart_transmit(hex[high]);
   11f76:	7ffb      	ldrb	r3, [r7, #31]
   11f78:	f107 0220 	add.w	r2, r7, #32
   11f7c:	4413      	add	r3, r2
   11f7e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   11f82:	4618      	mov	r0, r3
   11f84:	f7ff ff8a 	bl	11e9c <uart_transmit>
  uart_transmit(hex[low]);
   11f88:	7fbb      	ldrb	r3, [r7, #30]
   11f8a:	f107 0220 	add.w	r2, r7, #32
   11f8e:	4413      	add	r3, r2
   11f90:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   11f94:	4618      	mov	r0, r3
   11f96:	f7ff ff81 	bl	11e9c <uart_transmit>
} 
   11f9a:	3724      	adds	r7, #36	; 0x24
   11f9c:	46bd      	mov	sp, r7
   11f9e:	bd90      	pop	{r4, r7, pc}

00011fa0 <uart_print_hex16>:

void uart_print_hex16 ( uint16_t c ) {
   11fa0:	b580      	push	{r7, lr}
   11fa2:	b084      	sub	sp, #16
   11fa4:	af00      	add	r7, sp, #0
   11fa6:	4603      	mov	r3, r0
   11fa8:	80fb      	strh	r3, [r7, #6]
  uint8_t high = (uint8_t)(c>>8);
   11faa:	88fb      	ldrh	r3, [r7, #6]
   11fac:	0a1b      	lsrs	r3, r3, #8
   11fae:	b29b      	uxth	r3, r3
   11fb0:	73fb      	strb	r3, [r7, #15]
  uint8_t low  = (uint8_t)(c);
   11fb2:	88fb      	ldrh	r3, [r7, #6]
   11fb4:	73bb      	strb	r3, [r7, #14]
  uart_print_hex(high);
   11fb6:	7bfb      	ldrb	r3, [r7, #15]
   11fb8:	4618      	mov	r0, r3
   11fba:	f7ff ffc1 	bl	11f40 <uart_print_hex>
  uart_print_hex(low);
   11fbe:	7bbb      	ldrb	r3, [r7, #14]
   11fc0:	4618      	mov	r0, r3
   11fc2:	f7ff ffbd 	bl	11f40 <uart_print_hex>
}
   11fc6:	3710      	adds	r7, #16
   11fc8:	46bd      	mov	sp, r7
   11fca:	bd80      	pop	{r7, pc}

00011fcc <uart_print_string>:

void uart_print_string(const uint8_t* s) {
   11fcc:	b580      	push	{r7, lr}
   11fce:	b084      	sub	sp, #16
   11fd0:	af00      	add	r7, sp, #0
   11fd2:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
   11fd4:	2300      	movs	r3, #0
   11fd6:	73fb      	strb	r3, [r7, #15]
  while (s[i]) {
   11fd8:	e009      	b.n	11fee <uart_print_string+0x22>
    uart_transmit(s[i]);
   11fda:	7bfb      	ldrb	r3, [r7, #15]
   11fdc:	687a      	ldr	r2, [r7, #4]
   11fde:	4413      	add	r3, r2
   11fe0:	781b      	ldrb	r3, [r3, #0]
   11fe2:	4618      	mov	r0, r3
   11fe4:	f7ff ff5a 	bl	11e9c <uart_transmit>
    i++;
   11fe8:	7bfb      	ldrb	r3, [r7, #15]
   11fea:	3301      	adds	r3, #1
   11fec:	73fb      	strb	r3, [r7, #15]
  uart_print_hex(low);
}

void uart_print_string(const uint8_t* s) {
  uint8_t i = 0;
  while (s[i]) {
   11fee:	7bfb      	ldrb	r3, [r7, #15]
   11ff0:	687a      	ldr	r2, [r7, #4]
   11ff2:	4413      	add	r3, r2
   11ff4:	781b      	ldrb	r3, [r3, #0]
   11ff6:	2b00      	cmp	r3, #0
   11ff8:	d1ef      	bne.n	11fda <uart_print_string+0xe>
    uart_transmit(s[i]);
    i++;
  }
}
   11ffa:	3710      	adds	r7, #16
   11ffc:	46bd      	mov	sp, r7
   11ffe:	bd80      	pop	{r7, pc}

00012000 <SIG_UART_TRANS>:

SIGNAL(SIG_UART_TRANS) {
   12000:	b480      	push	{r7}
   12002:	af00      	add	r7, sp, #0
  if (tx_head == tx_tail) {
   12004:	f64b 4330 	movw	r3, #48176	; 0xbc30
   12008:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1200c:	781a      	ldrb	r2, [r3, #0]
   1200e:	f64b 4331 	movw	r3, #48177	; 0xbc31
   12012:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12016:	781b      	ldrb	r3, [r3, #0]
   12018:	b2db      	uxtb	r3, r3
   1201a:	429a      	cmp	r2, r3
   1201c:	d10e      	bne.n	1203c <SIG_UART_TRANS+0x3c>
    /* Nothing more to send */
    cbi(UCSRB, TXCIE); /* disable interrupt */
   1201e:	f248 030a 	movw	r3, #32778	; 0x800a
   12022:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12026:	f248 020a 	movw	r2, #32778	; 0x800a
   1202a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1202e:	7812      	ldrb	r2, [r2, #0]
   12030:	b2d2      	uxtb	r2, r2
   12032:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   12036:	b2d2      	uxtb	r2, r2
   12038:	701a      	strb	r2, [r3, #0]
   1203a:	e01d      	b.n	12078 <SIG_UART_TRANS+0x78>
  } else {
    UDR = tx_buf[tx_tail];
   1203c:	f248 030c 	movw	r3, #32780	; 0x800c
   12040:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12044:	f64b 4231 	movw	r2, #48177	; 0xbc31
   12048:	f2c2 0204 	movt	r2, #8196	; 0x2004
   1204c:	7812      	ldrb	r2, [r2, #0]
   1204e:	b2d2      	uxtb	r2, r2
   12050:	4611      	mov	r1, r2
   12052:	f64b 4234 	movw	r2, #48180	; 0xbc34
   12056:	f2c2 0204 	movt	r2, #8196	; 0x2004
   1205a:	5c52      	ldrb	r2, [r2, r1]
   1205c:	701a      	strb	r2, [r3, #0]
    tx_tail++; /* warning tx_buf_len is 256 */
   1205e:	f64b 4331 	movw	r3, #48177	; 0xbc31
   12062:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12066:	781b      	ldrb	r3, [r3, #0]
   12068:	b2db      	uxtb	r3, r3
   1206a:	3301      	adds	r3, #1
   1206c:	b2da      	uxtb	r2, r3
   1206e:	f64b 4331 	movw	r3, #48177	; 0xbc31
   12072:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12076:	701a      	strb	r2, [r3, #0]
  }
}
   12078:	46bd      	mov	sp, r7
   1207a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1207e:	4770      	bx	lr

00012080 <init_led>:
#include "stm32f10x_usart.h"
#include "stm32f10x_exti.h"
#include "misc.h"

void init_led(void)
{
   12080:	b580      	push	{r7, lr}
   12082:	b082      	sub	sp, #8
   12084:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO C clock. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
   12086:	2010      	movs	r0, #16
   12088:	2101      	movs	r1, #1
   1208a:	f7ee fe99 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Set the LED pin state such that the LED is off.  The LED is connected
     * between power and the microcontroller pin, which makes it turn on when
     * the pin is low.
     */
    GPIO_WriteBit(GPIOC,GPIO_Pin_12,Bit_SET);
   1208e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   12092:	f2c4 0001 	movt	r0, #16385	; 0x4001
   12096:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   1209a:	2201      	movs	r2, #1
   1209c:	f7ef f9a0 	bl	13e0 <GPIO_WriteBit>

    /* Configure the LED pin as push-pull output. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_12;
   120a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   120a4:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   120a6:	2310      	movs	r3, #16
   120a8:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   120aa:	2303      	movs	r3, #3
   120ac:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
   120ae:	1d3b      	adds	r3, r7, #4
   120b0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   120b4:	f2c4 0001 	movt	r0, #16385	; 0x4001
   120b8:	4619      	mov	r1, r3
   120ba:	f7ef f855 	bl	1168 <GPIO_Init>
}
   120be:	3708      	adds	r7, #8
   120c0:	46bd      	mov	sp, r7
   120c2:	bd80      	pop	{r7, pc}

000120c4 <init_button>:

void init_button(void)
{
   120c4:	b580      	push	{r7, lr}
   120c6:	b082      	sub	sp, #8
   120c8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO A clock */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
   120ca:	2004      	movs	r0, #4
   120cc:	2101      	movs	r1, #1
   120ce:	f7ee fe77 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Configure the button pin as a floating input. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_0;
   120d2:	2301      	movs	r3, #1
   120d4:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   120d6:	2304      	movs	r3, #4
   120d8:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   120da:	2303      	movs	r3, #3
   120dc:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
   120de:	1d3b      	adds	r3, r7, #4
   120e0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   120e4:	f2c4 0001 	movt	r0, #16385	; 0x4001
   120e8:	4619      	mov	r1, r3
   120ea:	f7ef f83d 	bl	1168 <GPIO_Init>
}
   120ee:	3708      	adds	r7, #8
   120f0:	46bd      	mov	sp, r7
   120f2:	bd80      	pop	{r7, pc}

000120f4 <enable_button_interrupts>:

void enable_button_interrupts(void)
{
   120f4:	b580      	push	{r7, lr}
   120f6:	b084      	sub	sp, #16
   120f8:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable the AFIO clock.  GPIO_EXTILineConfig sets registers in
     * the AFIO.
     */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
   120fa:	2001      	movs	r0, #1
   120fc:	2101      	movs	r1, #1
   120fe:	f7ee fe5f 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Connect EXTI Line 0 to the button GPIO Pin */
    GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);
   12102:	2000      	movs	r0, #0
   12104:	2100      	movs	r1, #0
   12106:	f7ef fa63 	bl	15d0 <GPIO_EXTILineConfig>

    /* Configure the EXTI line to generate an interrupt when the button is
     * pressed.  The button pin is high when pressed, so it needs to trigger
     * when rising from low to high. */
    EXTI_InitStructure.EXTI_Line = EXTI_Line0;
   1210a:	2301      	movs	r3, #1
   1210c:	60bb      	str	r3, [r7, #8]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
   1210e:	2300      	movs	r3, #0
   12110:	733b      	strb	r3, [r7, #12]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
   12112:	2308      	movs	r3, #8
   12114:	737b      	strb	r3, [r7, #13]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
   12116:	2301      	movs	r3, #1
   12118:	73bb      	strb	r3, [r7, #14]
    EXTI_Init(&EXTI_InitStructure);
   1211a:	f107 0308 	add.w	r3, r7, #8
   1211e:	4618      	mov	r0, r3
   12120:	f7ef ff5c 	bl	1fdc <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
   12124:	2306      	movs	r3, #6
   12126:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
   12128:	230f      	movs	r3, #15
   1212a:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
   1212c:	230f      	movs	r3, #15
   1212e:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   12130:	2301      	movs	r3, #1
   12132:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
   12134:	1d3b      	adds	r3, r7, #4
   12136:	4618      	mov	r0, r3
   12138:	f7f0 f88a 	bl	2250 <NVIC_Init>
}
   1213c:	3710      	adds	r7, #16
   1213e:	46bd      	mov	sp, r7
   12140:	bd80      	pop	{r7, pc}
   12142:	bf00      	nop

00012144 <init_rs232>:

void init_rs232(void)
{
   12144:	b580      	push	{r7, lr}
   12146:	b086      	sub	sp, #24
   12148:	af00      	add	r7, sp, #0
    USART_InitTypeDef USART_InitStructure;
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable peripheral clocks. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
   1214a:	2005      	movs	r0, #5
   1214c:	2101      	movs	r1, #1
   1214e:	f7ee fe37 	bl	dc0 <RCC_APB2PeriphClockCmd>
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
   12152:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   12156:	2101      	movs	r1, #1
   12158:	f7ee fe5a 	bl	e10 <RCC_APB1PeriphClockCmd>

    /* Configure USART2 Rx pin as floating input. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
   1215c:	2308      	movs	r3, #8
   1215e:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   12160:	2304      	movs	r3, #4
   12162:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
   12164:	1d3b      	adds	r3, r7, #4
   12166:	f44f 6000 	mov.w	r0, #2048	; 0x800
   1216a:	f2c4 0001 	movt	r0, #16385	; 0x4001
   1216e:	4619      	mov	r1, r3
   12170:	f7ee fffa 	bl	1168 <GPIO_Init>

    /* Configure USART2 Tx as alternate function push-pull. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
   12174:	2304      	movs	r3, #4
   12176:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   12178:	2303      	movs	r3, #3
   1217a:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
   1217c:	2318      	movs	r3, #24
   1217e:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
   12180:	1d3b      	adds	r3, r7, #4
   12182:	f44f 6000 	mov.w	r0, #2048	; 0x800
   12186:	f2c4 0001 	movt	r0, #16385	; 0x4001
   1218a:	4619      	mov	r1, r3
   1218c:	f7ee ffec 	bl	1168 <GPIO_Init>

    /* Configure the USART2 */
    USART_InitStructure.USART_BaudRate = 9600;
   12190:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   12194:	60bb      	str	r3, [r7, #8]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
   12196:	2300      	movs	r3, #0
   12198:	81bb      	strh	r3, [r7, #12]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
   1219a:	2300      	movs	r3, #0
   1219c:	81fb      	strh	r3, [r7, #14]
    USART_InitStructure.USART_Parity = USART_Parity_No;
   1219e:	2300      	movs	r3, #0
   121a0:	823b      	strh	r3, [r7, #16]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
   121a2:	2300      	movs	r3, #0
   121a4:	82bb      	strh	r3, [r7, #20]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
   121a6:	230c      	movs	r3, #12
   121a8:	827b      	strh	r3, [r7, #18]
    USART_Init(USART2, &USART_InitStructure);
   121aa:	f107 0308 	add.w	r3, r7, #8
   121ae:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   121b2:	f2c4 0000 	movt	r0, #16384	; 0x4000
   121b6:	4619      	mov	r1, r3
   121b8:	f7ef fabe 	bl	1738 <USART_Init>
    USART_Cmd(USART2, ENABLE);
   121bc:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   121c0:	f2c4 0000 	movt	r0, #16384	; 0x4000
   121c4:	2101      	movs	r1, #1
   121c6:	f7ef fbd5 	bl	1974 <USART_Cmd>
}
   121ca:	3718      	adds	r7, #24
   121cc:	46bd      	mov	sp, r7
   121ce:	bd80      	pop	{r7, pc}

000121d0 <enable_rs232_interrupts>:

void enable_rs232_interrupts(void)
{
   121d0:	b580      	push	{r7, lr}
   121d2:	b082      	sub	sp, #8
   121d4:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable transmit and receive interrupts for the USART2. */
    USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
   121d6:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   121da:	f2c4 0000 	movt	r0, #16384	; 0x4000
   121de:	f240 7127 	movw	r1, #1831	; 0x727
   121e2:	2200      	movs	r2, #0
   121e4:	f7ef fbe6 	bl	19b4 <USART_ITConfig>
    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
   121e8:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   121ec:	f2c4 0000 	movt	r0, #16384	; 0x4000
   121f0:	f240 5125 	movw	r1, #1317	; 0x525
   121f4:	2201      	movs	r2, #1
   121f6:	f7ef fbdd 	bl	19b4 <USART_ITConfig>

    /* Enable the USART2 IRQ in the NVIC module (so that the USART2 interrupt
     * handler is enabled). */
    NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
   121fa:	2326      	movs	r3, #38	; 0x26
   121fc:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
   121fe:	2300      	movs	r3, #0
   12200:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   12202:	2301      	movs	r3, #1
   12204:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
   12206:	1d3b      	adds	r3, r7, #4
   12208:	4618      	mov	r0, r3
   1220a:	f7f0 f821 	bl	2250 <NVIC_Init>
}
   1220e:	3708      	adds	r7, #8
   12210:	46bd      	mov	sp, r7
   12212:	bd80      	pop	{r7, pc}

00012214 <enable_rs232>:

void enable_rs232(void)
{
   12214:	b580      	push	{r7, lr}
   12216:	af00      	add	r7, sp, #0
    /* Enable the RS232 port. */
    USART_Cmd(USART2, ENABLE);
   12218:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   1221c:	f2c4 0000 	movt	r0, #16384	; 0x4000
   12220:	2101      	movs	r1, #1
   12222:	f7ef fba7 	bl	1974 <USART_Cmd>
}
   12226:	bd80      	pop	{r7, pc}

00012228 <send_byte>:


void send_byte(uint8_t b)
{
   12228:	b580      	push	{r7, lr}
   1222a:	b082      	sub	sp, #8
   1222c:	af00      	add	r7, sp, #0
   1222e:	4603      	mov	r3, r0
   12230:	71fb      	strb	r3, [r7, #7]
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
   12232:	bf00      	nop
   12234:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   12238:	f2c4 0000 	movt	r0, #16384	; 0x4000
   1223c:	2180      	movs	r1, #128	; 0x80
   1223e:	f7ef fe05 	bl	1e4c <USART_GetFlagStatus>
   12242:	4603      	mov	r3, r0
   12244:	2b00      	cmp	r3, #0
   12246:	d0f5      	beq.n	12234 <send_byte+0xc>

    GPIOC->ODR ^= 0x00001000;
   12248:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   1224c:	f2c4 0301 	movt	r3, #16385	; 0x4001
   12250:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   12254:	f2c4 0201 	movt	r2, #16385	; 0x4001
   12258:	68d2      	ldr	r2, [r2, #12]
   1225a:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
   1225e:	60da      	str	r2, [r3, #12]

    USART_SendData(USART2, b);
   12260:	79fb      	ldrb	r3, [r7, #7]
   12262:	b29b      	uxth	r3, r3
   12264:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   12268:	f2c4 0000 	movt	r0, #16384	; 0x4000
   1226c:	4619      	mov	r1, r3
   1226e:	f7ef fca1 	bl	1bb4 <USART_SendData>
}
   12272:	3708      	adds	r7, #8
   12274:	46bd      	mov	sp, r7
   12276:	bd80      	pop	{r7, pc}

00012278 <send_num>:


void send_num(uint8_t b)
{
   12278:	b580      	push	{r7, lr}
   1227a:	b082      	sub	sp, #8
   1227c:	af00      	add	r7, sp, #0
   1227e:	4603      	mov	r3, r0
   12280:	71fb      	strb	r3, [r7, #7]
    send_byte(b+'0'); 
   12282:	79fb      	ldrb	r3, [r7, #7]
   12284:	3330      	adds	r3, #48	; 0x30
   12286:	b2db      	uxtb	r3, r3
   12288:	4618      	mov	r0, r3
   1228a:	f7ff ffcd 	bl	12228 <send_byte>
}
   1228e:	3708      	adds	r7, #8
   12290:	46bd      	mov	sp, r7
   12292:	bd80      	pop	{r7, pc}

00012294 <vPrintString>:


void vPrintString( const char * string )
{
   12294:	b580      	push	{r7, lr}
   12296:	b084      	sub	sp, #16
   12298:	af00      	add	r7, sp, #0
   1229a:	6078      	str	r0, [r7, #4]
    int i = 0;
   1229c:	2300      	movs	r3, #0
   1229e:	60fb      	str	r3, [r7, #12]
    while(string[i] != '\0')
   122a0:	e009      	b.n	122b6 <vPrintString+0x22>
    {
        send_byte(string[i]);
   122a2:	68fb      	ldr	r3, [r7, #12]
   122a4:	687a      	ldr	r2, [r7, #4]
   122a6:	4413      	add	r3, r2
   122a8:	781b      	ldrb	r3, [r3, #0]
   122aa:	4618      	mov	r0, r3
   122ac:	f7ff ffbc 	bl	12228 <send_byte>
        i++;
   122b0:	68fb      	ldr	r3, [r7, #12]
   122b2:	3301      	adds	r3, #1
   122b4:	60fb      	str	r3, [r7, #12]


void vPrintString( const char * string )
{
    int i = 0;
    while(string[i] != '\0')
   122b6:	68fb      	ldr	r3, [r7, #12]
   122b8:	687a      	ldr	r2, [r7, #4]
   122ba:	4413      	add	r3, r2
   122bc:	781b      	ldrb	r3, [r3, #0]
   122be:	2b00      	cmp	r3, #0
   122c0:	d1ef      	bne.n	122a2 <vPrintString+0xe>
    {
        send_byte(string[i]);
        i++;
    }
}
   122c2:	3710      	adds	r7, #16
   122c4:	46bd      	mov	sp, r7
   122c6:	bd80      	pop	{r7, pc}

000122c8 <vPrintNumber>:

void vPrintNumber( const long c_num )
{
   122c8:	b580      	push	{r7, lr}
   122ca:	b08e      	sub	sp, #56	; 0x38
   122cc:	af00      	add	r7, sp, #0
   122ce:	6078      	str	r0, [r7, #4]
    char time[33], tmp;
    unsigned int i, count = 0;
   122d0:	2300      	movs	r3, #0
   122d2:	633b      	str	r3, [r7, #48]	; 0x30
    long num = c_num;
   122d4:	687b      	ldr	r3, [r7, #4]
   122d6:	62fb      	str	r3, [r7, #44]	; 0x2c

    if(num == 0)
   122d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   122da:	2b00      	cmp	r3, #0
   122dc:	d106      	bne.n	122ec <vPrintNumber+0x24>
    {
        vPrintString("0\n\r");
   122de:	f643 10b8 	movw	r0, #14776	; 0x39b8
   122e2:	f2c0 0001 	movt	r0, #1
   122e6:	f7ff ffd5 	bl	12294 <vPrintString>
   122ea:	e064      	b.n	123b6 <vPrintNumber+0xee>
    }
    else
    {
        // transform long into char * 
        while( num   )
   122ec:	e024      	b.n	12338 <vPrintNumber+0x70>
        {
            time[count] = num%10 +'0';
   122ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   122f0:	f246 6367 	movw	r3, #26215	; 0x6667
   122f4:	f2c6 6366 	movt	r3, #26214	; 0x6666
   122f8:	fb83 2301 	smull	r2, r3, r3, r1
   122fc:	109a      	asrs	r2, r3, #2
   122fe:	17cb      	asrs	r3, r1, #31
   12300:	1ad2      	subs	r2, r2, r3
   12302:	4613      	mov	r3, r2
   12304:	009b      	lsls	r3, r3, #2
   12306:	4413      	add	r3, r2
   12308:	005b      	lsls	r3, r3, #1
   1230a:	1aca      	subs	r2, r1, r3
   1230c:	b2d3      	uxtb	r3, r2
   1230e:	3330      	adds	r3, #48	; 0x30
   12310:	b2da      	uxtb	r2, r3
   12312:	f107 0108 	add.w	r1, r7, #8
   12316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12318:	440b      	add	r3, r1
   1231a:	701a      	strb	r2, [r3, #0]
            count ++;
   1231c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1231e:	3301      	adds	r3, #1
   12320:	633b      	str	r3, [r7, #48]	; 0x30
            num /= 10;
   12322:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   12324:	f246 6367 	movw	r3, #26215	; 0x6667
   12328:	f2c6 6366 	movt	r3, #26214	; 0x6666
   1232c:	fb83 1302 	smull	r1, r3, r3, r2
   12330:	1099      	asrs	r1, r3, #2
   12332:	17d3      	asrs	r3, r2, #31
   12334:	1acb      	subs	r3, r1, r3
   12336:	62fb      	str	r3, [r7, #44]	; 0x2c
        vPrintString("0\n\r");
    }
    else
    {
        // transform long into char * 
        while( num   )
   12338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1233a:	2b00      	cmp	r3, #0
   1233c:	d1d7      	bne.n	122ee <vPrintNumber+0x26>
        {
            time[count] = num%10 +'0';
            count ++;
            num /= 10;
        }
        time[count] = '\0';
   1233e:	f107 0208 	add.w	r2, r7, #8
   12342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12344:	4413      	add	r3, r2
   12346:	2200      	movs	r2, #0
   12348:	701a      	strb	r2, [r3, #0]

        // reverse
        for( i = 0; i < count/2; ++i  )
   1234a:	2300      	movs	r3, #0
   1234c:	637b      	str	r3, [r7, #52]	; 0x34
   1234e:	e022      	b.n	12396 <vPrintNumber+0xce>
        {
            tmp = time[i];
   12350:	f107 0208 	add.w	r2, r7, #8
   12354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12356:	4413      	add	r3, r2
   12358:	781b      	ldrb	r3, [r3, #0]
   1235a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            time[i] = time[count-1-i];
   1235e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   12360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12362:	1ad3      	subs	r3, r2, r3
   12364:	3b01      	subs	r3, #1
   12366:	f107 0238 	add.w	r2, r7, #56	; 0x38
   1236a:	4413      	add	r3, r2
   1236c:	f813 2c30 	ldrb.w	r2, [r3, #-48]
   12370:	f107 0108 	add.w	r1, r7, #8
   12374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12376:	440b      	add	r3, r1
   12378:	701a      	strb	r2, [r3, #0]
            time[count-1-i] = tmp;
   1237a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1237c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1237e:	1ad3      	subs	r3, r2, r3
   12380:	3b01      	subs	r3, #1
   12382:	f107 0138 	add.w	r1, r7, #56	; 0x38
   12386:	440b      	add	r3, r1
   12388:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
   1238c:	f803 2c30 	strb.w	r2, [r3, #-48]
            num /= 10;
        }
        time[count] = '\0';

        // reverse
        for( i = 0; i < count/2; ++i  )
   12390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12392:	3301      	adds	r3, #1
   12394:	637b      	str	r3, [r7, #52]	; 0x34
   12396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12398:	085a      	lsrs	r2, r3, #1
   1239a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1239c:	429a      	cmp	r2, r3
   1239e:	d8d7      	bhi.n	12350 <vPrintNumber+0x88>
        {
            tmp = time[i];
            time[i] = time[count-1-i];
            time[count-1-i] = tmp;
        }
        vPrintString(time);
   123a0:	f107 0308 	add.w	r3, r7, #8
   123a4:	4618      	mov	r0, r3
   123a6:	f7ff ff75 	bl	12294 <vPrintString>
        vPrintString("\n\r");
   123aa:	f643 10bc 	movw	r0, #14780	; 0x39bc
   123ae:	f2c0 0001 	movt	r0, #1
   123b2:	f7ff ff6f 	bl	12294 <vPrintString>
    }
}
   123b6:	3738      	adds	r7, #56	; 0x38
   123b8:	46bd      	mov	sp, r7
   123ba:	bd80      	pop	{r7, pc}

000123bc <vSemaphoreInitialise>:
extern char * pcNameOfTask[NUMBEROFTASK];

portBASE_TYPE miss[NUMBEROFTASK];

void vSemaphoreInitialise()
{
   123bc:	b580      	push	{r7, lr}
   123be:	b082      	sub	sp, #8
   123c0:	af00      	add	r7, sp, #0
    portBASE_TYPE i;

    for( i = 0; i < NUMBEROFTASK; ++ i  )
   123c2:	2300      	movs	r3, #0
   123c4:	607b      	str	r3, [r7, #4]
   123c6:	e033      	b.n	12430 <vSemaphoreInitialise+0x74>
    {
        vSemaphoreCreateBinary(xSemaphoreTable[i]);
   123c8:	2001      	movs	r0, #1
   123ca:	2100      	movs	r1, #0
   123cc:	2203      	movs	r2, #3
   123ce:	f7f0 fc0f 	bl	2bf0 <xQueueGenericCreate>
   123d2:	4601      	mov	r1, r0
   123d4:	f240 2320 	movw	r3, #544	; 0x220
   123d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123dc:	687a      	ldr	r2, [r7, #4]
   123de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   123e2:	f240 2320 	movw	r3, #544	; 0x220
   123e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123ea:	687a      	ldr	r2, [r7, #4]
   123ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   123f0:	2b00      	cmp	r3, #0
   123f2:	d00c      	beq.n	1240e <vSemaphoreInitialise+0x52>
   123f4:	f240 2320 	movw	r3, #544	; 0x220
   123f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123fc:	687a      	ldr	r2, [r7, #4]
   123fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   12402:	4618      	mov	r0, r3
   12404:	2100      	movs	r1, #0
   12406:	2200      	movs	r2, #0
   12408:	2300      	movs	r3, #0
   1240a:	f7f0 fc7f 	bl	2d0c <xQueueGenericSend>
        /* when created, it is initialised to 1. So, we take it away.*/
        xSemaphoreTake(xSemaphoreTable[i], portMAX_DELAY);
   1240e:	f240 2320 	movw	r3, #544	; 0x220
   12412:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12416:	687a      	ldr	r2, [r7, #4]
   12418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1241c:	4618      	mov	r0, r3
   1241e:	2100      	movs	r1, #0
   12420:	f04f 32ff 	mov.w	r2, #4294967295
   12424:	2300      	movs	r3, #0
   12426:	f7f0 fd37 	bl	2e98 <xQueueGenericReceive>

void vSemaphoreInitialise()
{
    portBASE_TYPE i;

    for( i = 0; i < NUMBEROFTASK; ++ i  )
   1242a:	687b      	ldr	r3, [r7, #4]
   1242c:	3301      	adds	r3, #1
   1242e:	607b      	str	r3, [r7, #4]
   12430:	687b      	ldr	r3, [r7, #4]
   12432:	2b0c      	cmp	r3, #12
   12434:	ddc8      	ble.n	123c8 <vSemaphoreInitialise+0xc>
    {
        vSemaphoreCreateBinary(xSemaphoreTable[i]);
        /* when created, it is initialised to 1. So, we take it away.*/
        xSemaphoreTake(xSemaphoreTable[i], portMAX_DELAY);
    }
}
   12436:	3708      	adds	r7, #8
   12438:	46bd      	mov	sp, r7
   1243a:	bd80      	pop	{r7, pc}

0001243c <vParametersInit>:

void vParametersInit()
{
   1243c:	b480      	push	{r7}
   1243e:	b083      	sub	sp, #12
   12440:	af00      	add	r7, sp, #0
    portBASE_TYPE i;
    for( i = 0; i < NUMBEROFTASK; ++ i )
   12442:	2300      	movs	r3, #0
   12444:	607b      	str	r3, [r7, #4]
   12446:	e043      	b.n	124d0 <vParametersInit+0x94>
    {
        parameters[i].xMyId = i;
   12448:	f64b 5334 	movw	r3, #48436	; 0xbd34
   1244c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12450:	687a      	ldr	r2, [r7, #4]
   12452:	0112      	lsls	r2, r2, #4
   12454:	4413      	add	r3, r2
   12456:	687a      	ldr	r2, [r7, #4]
   12458:	601a      	str	r2, [r3, #0]
        parameters[i].xMyFun = xTaskTable[i];
   1245a:	f240 03c4 	movw	r3, #196	; 0xc4
   1245e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12462:	687a      	ldr	r2, [r7, #4]
   12464:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   12468:	f64b 5334 	movw	r3, #48436	; 0xbd34
   1246c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12470:	6879      	ldr	r1, [r7, #4]
   12472:	0109      	lsls	r1, r1, #4
   12474:	440b      	add	r3, r1
   12476:	3304      	adds	r3, #4
   12478:	601a      	str	r2, [r3, #0]
        parameters[i].xPeriod = xPeriodTable[i];
   1247a:	f240 035c 	movw	r3, #92	; 0x5c
   1247e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12482:	687a      	ldr	r2, [r7, #4]
   12484:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   12488:	f64b 5334 	movw	r3, #48436	; 0xbd34
   1248c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12490:	6879      	ldr	r1, [r7, #4]
   12492:	0109      	lsls	r1, r1, #4
   12494:	440b      	add	r3, r1
   12496:	3308      	adds	r3, #8
   12498:	601a      	str	r2, [r3, #0]
        parameters[i].xMySem = xSemaphoreTable[i];
   1249a:	f240 2320 	movw	r3, #544	; 0x220
   1249e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124a2:	687a      	ldr	r2, [r7, #4]
   124a4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   124a8:	f64b 5334 	movw	r3, #48436	; 0xbd34
   124ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   124b0:	6879      	ldr	r1, [r7, #4]
   124b2:	0109      	lsls	r1, r1, #4
   124b4:	440b      	add	r3, r1
   124b6:	330c      	adds	r3, #12
   124b8:	601a      	str	r2, [r3, #0]
        miss[i] = 0;
   124ba:	f64b 6338 	movw	r3, #48696	; 0xbe38
   124be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   124c2:	687a      	ldr	r2, [r7, #4]
   124c4:	2100      	movs	r1, #0
   124c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}

void vParametersInit()
{
    portBASE_TYPE i;
    for( i = 0; i < NUMBEROFTASK; ++ i )
   124ca:	687b      	ldr	r3, [r7, #4]
   124cc:	3301      	adds	r3, #1
   124ce:	607b      	str	r3, [r7, #4]
   124d0:	687b      	ldr	r3, [r7, #4]
   124d2:	2b0c      	cmp	r3, #12
   124d4:	ddb8      	ble.n	12448 <vParametersInit+0xc>
        parameters[i].xMyFun = xTaskTable[i];
        parameters[i].xPeriod = xPeriodTable[i];
        parameters[i].xMySem = xSemaphoreTable[i];
        miss[i] = 0;
    }
}
   124d6:	370c      	adds	r7, #12
   124d8:	46bd      	mov	sp, r7
   124da:	f85d 7b04 	ldr.w	r7, [sp], #4
   124de:	4770      	bx	lr

000124e0 <vTimeTask>:

void vTimeTask( void * pvParameter )
{
   124e0:	b580      	push	{r7, lr}
   124e2:	b08e      	sub	sp, #56	; 0x38
   124e4:	af00      	add	r7, sp, #0
   124e6:	6078      	str	r0, [r7, #4]
    struct parameter *xMyParameter = (struct parameter *)pvParameter;
   124e8:	687b      	ldr	r3, [r7, #4]
   124ea:	62bb      	str	r3, [r7, #40]	; 0x28
    portBASE_TYPE xMyId = xMyParameter->xMyId;
   124ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
   124ee:	681b      	ldr	r3, [r3, #0]
   124f0:	627b      	str	r3, [r7, #36]	; 0x24
    pvTaskFunType xMyFun = xMyParameter->xMyFun;
   124f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   124f4:	685b      	ldr	r3, [r3, #4]
   124f6:	623b      	str	r3, [r7, #32]
    portTickType xMyPeriod = xMyParameter->xPeriod;
   124f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   124fa:	689b      	ldr	r3, [r3, #8]
   124fc:	61fb      	str	r3, [r7, #28]
    xSemaphoreHandle xMySem = xMyParameter->xMySem;
   124fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12500:	68db      	ldr	r3, [r3, #12]
   12502:	61bb      	str	r3, [r7, #24]

    portBASE_TYPE i;
    portTickType xCurrentTime;
    portBASE_TYPE IS_FIRST_TIME_TO_EXE = 1;
   12504:	2301      	movs	r3, #1
   12506:	617b      	str	r3, [r7, #20]
    
    // used for periodic task
    portTickType xLastExecutionTime = xMyPeriod ; 
   12508:	69fb      	ldr	r3, [r7, #28]
   1250a:	60bb      	str	r3, [r7, #8]
    portTickType xSystemDeadline = 20000;
   1250c:	f644 6320 	movw	r3, #20000	; 0x4e20
   12510:	613b      	str	r3, [r7, #16]

    portBASE_TYPE xCount = 1;
   12512:	2301      	movs	r3, #1
   12514:	633b      	str	r3, [r7, #48]	; 0x30
    portTickType xReadyTime = xCount * xMyPeriod;
   12516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12518:	69fa      	ldr	r2, [r7, #28]
   1251a:	fb02 f303 	mul.w	r3, r2, r3
   1251e:	62fb      	str	r3, [r7, #44]	; 0x2c
    portTickType xDeadline ;
    while(1)
    {

#ifdef PREEMPTION
        vTaskSuspendAll();
   12520:	f7f1 fac4 	bl	3aac <vTaskSuspendAll>
        vPrintNumber(xMyId);
   12524:	6a78      	ldr	r0, [r7, #36]	; 0x24
   12526:	f7ff fecf 	bl	122c8 <vPrintNumber>
        vPrintNumber( xReadyTime );
   1252a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1252c:	f7ff fecc 	bl	122c8 <vPrintNumber>
        vPrintNumber( xTaskGetTickCount() );
   12530:	f7f1 fb76 	bl	3c20 <xTaskGetTickCount>
   12534:	4603      	mov	r3, r0
   12536:	4618      	mov	r0, r3
   12538:	f7ff fec6 	bl	122c8 <vPrintNumber>
        xTaskResumeAll();
   1253c:	f7f1 fac8 	bl	3ad0 <xTaskResumeAll>
        vPrintNumber(xMyId);
        vPrintNumber( xReadyTime );
        vPrintNumber( xTaskGetTickCount() );
        #endif

        for( i = 0; i < 200; ++ i )
   12540:	2300      	movs	r3, #0
   12542:	637b      	str	r3, [r7, #52]	; 0x34
   12544:	e004      	b.n	12550 <vTimeTask+0x70>
        {
            xMyFun();
   12546:	6a3b      	ldr	r3, [r7, #32]
   12548:	4798      	blx	r3
        vPrintNumber(xMyId);
        vPrintNumber( xReadyTime );
        vPrintNumber( xTaskGetTickCount() );
        #endif

        for( i = 0; i < 200; ++ i )
   1254a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1254c:	3301      	adds	r3, #1
   1254e:	637b      	str	r3, [r7, #52]	; 0x34
   12550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12552:	2bc7      	cmp	r3, #199	; 0xc7
   12554:	ddf7      	ble.n	12546 <vTimeTask+0x66>
        {
            xMyFun();
        }

        if(xTaskGetTickCount() > xLastExecutionTime + xMyPeriod)
   12556:	f7f1 fb63 	bl	3c20 <xTaskGetTickCount>
   1255a:	4602      	mov	r2, r0
   1255c:	68b9      	ldr	r1, [r7, #8]
   1255e:	69fb      	ldr	r3, [r7, #28]
   12560:	440b      	add	r3, r1
   12562:	429a      	cmp	r2, r3
   12564:	d917      	bls.n	12596 <vTimeTask+0xb6>
        {
            //vPrintNumber((xMyId+10)*2);
            vPrintNumber(xMyId);
   12566:	6a78      	ldr	r0, [r7, #36]	; 0x24
   12568:	f7ff feae 	bl	122c8 <vPrintNumber>
            vPrintString("miss deadline\n\r");
   1256c:	f643 10c0 	movw	r0, #14784	; 0x39c0
   12570:	f2c0 0001 	movt	r0, #1
   12574:	f7ff fe8e 	bl	12294 <vPrintString>
            miss[xMyId] ++;
   12578:	f64b 6338 	movw	r3, #48696	; 0xbe38
   1257c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   12582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   12586:	1c59      	adds	r1, r3, #1
   12588:	f64b 6338 	movw	r3, #48696	; 0xbe38
   1258c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   12592:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        }

        xCount ++;
   12596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12598:	3301      	adds	r3, #1
   1259a:	633b      	str	r3, [r7, #48]	; 0x30
        xReadyTime = xCount * xMyPeriod;
   1259c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1259e:	69fa      	ldr	r2, [r7, #28]
   125a0:	fb02 f303 	mul.w	r3, r2, r3
   125a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        xDeadline = xReadyTime ;
   125a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   125a8:	60fb      	str	r3, [r7, #12]


#ifdef PREEMPTION
        vTaskSuspendAll();
   125aa:	f7f1 fa7f 	bl	3aac <vTaskSuspendAll>
        vPrintNumber((xMyId + 10) * 3);
   125ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   125b0:	f103 020a 	add.w	r2, r3, #10
   125b4:	4613      	mov	r3, r2
   125b6:	005b      	lsls	r3, r3, #1
   125b8:	4413      	add	r3, r2
   125ba:	4618      	mov	r0, r3
   125bc:	f7ff fe84 	bl	122c8 <vPrintNumber>
        vPrintNumber( xDeadline );
   125c0:	68f8      	ldr	r0, [r7, #12]
   125c2:	f7ff fe81 	bl	122c8 <vPrintNumber>
        vPrintNumber( xTaskGetTickCount() );
   125c6:	f7f1 fb2b 	bl	3c20 <xTaskGetTickCount>
   125ca:	4603      	mov	r3, r0
   125cc:	4618      	mov	r0, r3
   125ce:	f7ff fe7b 	bl	122c8 <vPrintNumber>
        xTaskResumeAll();
   125d2:	f7f1 fa7d 	bl	3ad0 <xTaskResumeAll>
        vPrintNumber(xTaskGetTickCount());
        vPrintNumber( xDeadline );
        vPrintNumber( (xMyId + 10)* 3 );
        #endif
      
        vTaskDelayUntil( &xLastExecutionTime, xMyPeriod / portTICK_RATE_MS );
   125d6:	f107 0308 	add.w	r3, r7, #8
   125da:	4618      	mov	r0, r3
   125dc:	69f9      	ldr	r1, [r7, #28]
   125de:	f7f0 ffd1 	bl	3584 <vTaskDelayUntil>
    }
   125e2:	e79d      	b.n	12520 <vTimeTask+0x40>

000125e4 <main>:
}


int main()
{
   125e4:	b590      	push	{r4, r7, lr}
   125e6:	b087      	sub	sp, #28
   125e8:	af04      	add	r7, sp, #16

	init_led();
   125ea:	f7ff fd49 	bl	12080 <init_led>
	init_rs232();
   125ee:	f7ff fda9 	bl	12144 <init_rs232>
	enable_rs232_interrupts();
   125f2:	f7ff fded 	bl	121d0 <enable_rs232_interrupts>
	enable_rs232();
   125f6:	f7ff fe0d 	bl	12214 <enable_rs232>

    vSemaphoreInitialise();
   125fa:	f7ff fedf 	bl	123bc <vSemaphoreInitialise>
    vParametersInit();
   125fe:	f7ff ff1d 	bl	1243c <vParametersInit>

    portBASE_TYPE i;
    for( i = 0; i < NUMBEROFTASK; ++ i )
   12602:	2300      	movs	r3, #0
   12604:	607b      	str	r3, [r7, #4]
   12606:	e02f      	b.n	12668 <main+0x84>
    {
        xTaskCreate(vTimeTask, pcNameOfTask[i],  256, (void *) &parameters[i], xTaskPrio[i], &xTaskOfHandle[i]);
   12608:	f240 0390 	movw	r3, #144	; 0x90
   1260c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12610:	687a      	ldr	r2, [r7, #4]
   12612:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   12616:	687b      	ldr	r3, [r7, #4]
   12618:	0119      	lsls	r1, r3, #4
   1261a:	f64b 5334 	movw	r3, #48436	; 0xbd34
   1261e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12622:	18cc      	adds	r4, r1, r3
   12624:	f240 0328 	movw	r3, #40	; 0x28
   12628:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1262c:	6879      	ldr	r1, [r7, #4]
   1262e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   12632:	4619      	mov	r1, r3
   12634:	687b      	ldr	r3, [r7, #4]
   12636:	0098      	lsls	r0, r3, #2
   12638:	f64b 6304 	movw	r3, #48644	; 0xbe04
   1263c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12640:	4403      	add	r3, r0
   12642:	9100      	str	r1, [sp, #0]
   12644:	9301      	str	r3, [sp, #4]
   12646:	2300      	movs	r3, #0
   12648:	9302      	str	r3, [sp, #8]
   1264a:	2300      	movs	r3, #0
   1264c:	9303      	str	r3, [sp, #12]
   1264e:	f242 40e1 	movw	r0, #9441	; 0x24e1
   12652:	f2c0 0001 	movt	r0, #1
   12656:	4611      	mov	r1, r2
   12658:	f44f 7280 	mov.w	r2, #256	; 0x100
   1265c:	4623      	mov	r3, r4
   1265e:	f7f0 fe67 	bl	3330 <xTaskGenericCreate>

    vSemaphoreInitialise();
    vParametersInit();

    portBASE_TYPE i;
    for( i = 0; i < NUMBEROFTASK; ++ i )
   12662:	687b      	ldr	r3, [r7, #4]
   12664:	3301      	adds	r3, #1
   12666:	607b      	str	r3, [r7, #4]
   12668:	687b      	ldr	r3, [r7, #4]
   1266a:	2b0c      	cmp	r3, #12
   1266c:	ddcc      	ble.n	12608 <main+0x24>
    {
        xTaskCreate(vTimeTask, pcNameOfTask[i],  256, (void *) &parameters[i], xTaskPrio[i], &xTaskOfHandle[i]);
    }

	/* Start running the tasks. */
	vTaskStartScheduler();
   1266e:	f7f1 f9dd 	bl	3a2c <vTaskStartScheduler>

	return 0;
   12672:	2300      	movs	r3, #0
}
   12674:	4618      	mov	r0, r3
   12676:	370c      	adds	r7, #12
   12678:	46bd      	mov	sp, r7
   1267a:	bd90      	pop	{r4, r7, pc}

0001267c <myTraceCreate>:

void myTraceCreate      (){
   1267c:	b480      	push	{r7}
   1267e:	af00      	add	r7, sp, #0
}
   12680:	46bd      	mov	sp, r7
   12682:	f85d 7b04 	ldr.w	r7, [sp], #4
   12686:	4770      	bx	lr

00012688 <myTraceSwitchedIn>:

void myTraceSwitchedIn  (){
   12688:	b480      	push	{r7}
   1268a:	af00      	add	r7, sp, #0
}
   1268c:	46bd      	mov	sp, r7
   1268e:	f85d 7b04 	ldr.w	r7, [sp], #4
   12692:	4770      	bx	lr

00012694 <myTraceSwitchedOut>:

void myTraceSwitchedOut	(){
   12694:	b480      	push	{r7}
   12696:	af00      	add	r7, sp, #0
}
   12698:	46bd      	mov	sp, r7
   1269a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1269e:	4770      	bx	lr

000126a0 <myTraceGetTick>:

inline float myTraceGetTick(){
   126a0:	b480      	push	{r7}
   126a2:	af00      	add	r7, sp, #0
}
   126a4:	4618      	mov	r0, r3
   126a6:	46bd      	mov	sp, r7
   126a8:	f85d 7b04 	ldr.w	r7, [sp], #4
   126ac:	4770      	bx	lr
   126ae:	bf00      	nop

000126b0 <myTraceGetTimeMillisecond>:

inline unsigned long myTraceGetTimeMillisecond(){
   126b0:	b480      	push	{r7}
   126b2:	af00      	add	r7, sp, #0
	//return (xTaskGetTickCountFromISR() + myTraceGetTick()) * 1000 / configTICK_RATE_HZ;
}
   126b4:	4618      	mov	r0, r3
   126b6:	46bd      	mov	sp, r7
   126b8:	f85d 7b04 	ldr.w	r7, [sp], #4
   126bc:	4770      	bx	lr
   126be:	bf00      	nop

000126c0 <vApplicationTickHook>:

void vApplicationTickHook()
{
   126c0:	b580      	push	{r7, lr}
   126c2:	b082      	sub	sp, #8
   126c4:	af00      	add	r7, sp, #0
    portBASE_TYPE i;
    portTickType xCurrentTime = xTaskGetTickCount();
   126c6:	f7f1 faab 	bl	3c20 <xTaskGetTickCount>
   126ca:	6038      	str	r0, [r7, #0]
    
    if( xCurrentTime > 0 && xCurrentTime <1001 )
   126cc:	683b      	ldr	r3, [r7, #0]
   126ce:	2b00      	cmp	r3, #0
   126d0:	d023      	beq.n	1271a <vApplicationTickHook+0x5a>
   126d2:	683b      	ldr	r3, [r7, #0]
   126d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   126d8:	d81f      	bhi.n	1271a <vApplicationTickHook+0x5a>
    {
        for( i = 0; i < NUMBEROFTASK; ++ i )
   126da:	2300      	movs	r3, #0
   126dc:	607b      	str	r3, [r7, #4]
   126de:	e019      	b.n	12714 <vApplicationTickHook+0x54>
        {
            if( xCurrentTime == xPeriodTable[i] )
   126e0:	f240 035c 	movw	r3, #92	; 0x5c
   126e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126e8:	687a      	ldr	r2, [r7, #4]
   126ea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   126ee:	683b      	ldr	r3, [r7, #0]
   126f0:	429a      	cmp	r2, r3
   126f2:	d10c      	bne.n	1270e <vApplicationTickHook+0x4e>
            xSemaphoreGive( xSemaphoreTable[i] );
   126f4:	f240 2320 	movw	r3, #544	; 0x220
   126f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126fc:	687a      	ldr	r2, [r7, #4]
   126fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   12702:	4618      	mov	r0, r3
   12704:	2100      	movs	r1, #0
   12706:	2200      	movs	r2, #0
   12708:	2300      	movs	r3, #0
   1270a:	f7f0 faff 	bl	2d0c <xQueueGenericSend>
    portBASE_TYPE i;
    portTickType xCurrentTime = xTaskGetTickCount();
    
    if( xCurrentTime > 0 && xCurrentTime <1001 )
    {
        for( i = 0; i < NUMBEROFTASK; ++ i )
   1270e:	687b      	ldr	r3, [r7, #4]
   12710:	3301      	adds	r3, #1
   12712:	607b      	str	r3, [r7, #4]
   12714:	687b      	ldr	r3, [r7, #4]
   12716:	2b0c      	cmp	r3, #12
   12718:	dde2      	ble.n	126e0 <vApplicationTickHook+0x20>
        {
            if( xCurrentTime == xPeriodTable[i] )
            xSemaphoreGive( xSemaphoreTable[i] );
        }
    }
}
   1271a:	3708      	adds	r7, #8
   1271c:	46bd      	mov	sp, r7
   1271e:	bd80      	pop	{r7, pc}

00012720 <__aeabi_drsub>:
   12720:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   12724:	e002      	b.n	1272c <__adddf3>
   12726:	bf00      	nop

00012728 <__aeabi_dsub>:
   12728:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0001272c <__adddf3>:
   1272c:	b530      	push	{r4, r5, lr}
   1272e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   12732:	ea4f 0543 	mov.w	r5, r3, lsl #1
   12736:	ea94 0f05 	teq	r4, r5
   1273a:	bf08      	it	eq
   1273c:	ea90 0f02 	teqeq	r0, r2
   12740:	bf1f      	itttt	ne
   12742:	ea54 0c00 	orrsne.w	ip, r4, r0
   12746:	ea55 0c02 	orrsne.w	ip, r5, r2
   1274a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1274e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   12752:	f000 80e2 	beq.w	1291a <__adddf3+0x1ee>
   12756:	ea4f 5454 	mov.w	r4, r4, lsr #21
   1275a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1275e:	bfb8      	it	lt
   12760:	426d      	neglt	r5, r5
   12762:	dd0c      	ble.n	1277e <__adddf3+0x52>
   12764:	442c      	add	r4, r5
   12766:	ea80 0202 	eor.w	r2, r0, r2
   1276a:	ea81 0303 	eor.w	r3, r1, r3
   1276e:	ea82 0000 	eor.w	r0, r2, r0
   12772:	ea83 0101 	eor.w	r1, r3, r1
   12776:	ea80 0202 	eor.w	r2, r0, r2
   1277a:	ea81 0303 	eor.w	r3, r1, r3
   1277e:	2d36      	cmp	r5, #54	; 0x36
   12780:	bf88      	it	hi
   12782:	bd30      	pophi	{r4, r5, pc}
   12784:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   12788:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1278c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   12790:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   12794:	d002      	beq.n	1279c <__adddf3+0x70>
   12796:	4240      	negs	r0, r0
   12798:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1279c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   127a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   127a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   127a8:	d002      	beq.n	127b0 <__adddf3+0x84>
   127aa:	4252      	negs	r2, r2
   127ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   127b0:	ea94 0f05 	teq	r4, r5
   127b4:	f000 80a7 	beq.w	12906 <__adddf3+0x1da>
   127b8:	f1a4 0401 	sub.w	r4, r4, #1
   127bc:	f1d5 0e20 	rsbs	lr, r5, #32
   127c0:	db0d      	blt.n	127de <__adddf3+0xb2>
   127c2:	fa02 fc0e 	lsl.w	ip, r2, lr
   127c6:	fa22 f205 	lsr.w	r2, r2, r5
   127ca:	1880      	adds	r0, r0, r2
   127cc:	f141 0100 	adc.w	r1, r1, #0
   127d0:	fa03 f20e 	lsl.w	r2, r3, lr
   127d4:	1880      	adds	r0, r0, r2
   127d6:	fa43 f305 	asr.w	r3, r3, r5
   127da:	4159      	adcs	r1, r3
   127dc:	e00e      	b.n	127fc <__adddf3+0xd0>
   127de:	f1a5 0520 	sub.w	r5, r5, #32
   127e2:	f10e 0e20 	add.w	lr, lr, #32
   127e6:	2a01      	cmp	r2, #1
   127e8:	fa03 fc0e 	lsl.w	ip, r3, lr
   127ec:	bf28      	it	cs
   127ee:	f04c 0c02 	orrcs.w	ip, ip, #2
   127f2:	fa43 f305 	asr.w	r3, r3, r5
   127f6:	18c0      	adds	r0, r0, r3
   127f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   127fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   12800:	d507      	bpl.n	12812 <__adddf3+0xe6>
   12802:	f04f 0e00 	mov.w	lr, #0
   12806:	f1dc 0c00 	rsbs	ip, ip, #0
   1280a:	eb7e 0000 	sbcs.w	r0, lr, r0
   1280e:	eb6e 0101 	sbc.w	r1, lr, r1
   12812:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   12816:	d31b      	bcc.n	12850 <__adddf3+0x124>
   12818:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   1281c:	d30c      	bcc.n	12838 <__adddf3+0x10c>
   1281e:	0849      	lsrs	r1, r1, #1
   12820:	ea5f 0030 	movs.w	r0, r0, rrx
   12824:	ea4f 0c3c 	mov.w	ip, ip, rrx
   12828:	f104 0401 	add.w	r4, r4, #1
   1282c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   12830:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   12834:	f080 809a 	bcs.w	1296c <__adddf3+0x240>
   12838:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1283c:	bf08      	it	eq
   1283e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   12842:	f150 0000 	adcs.w	r0, r0, #0
   12846:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1284a:	ea41 0105 	orr.w	r1, r1, r5
   1284e:	bd30      	pop	{r4, r5, pc}
   12850:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   12854:	4140      	adcs	r0, r0
   12856:	eb41 0101 	adc.w	r1, r1, r1
   1285a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1285e:	f1a4 0401 	sub.w	r4, r4, #1
   12862:	d1e9      	bne.n	12838 <__adddf3+0x10c>
   12864:	f091 0f00 	teq	r1, #0
   12868:	bf04      	itt	eq
   1286a:	4601      	moveq	r1, r0
   1286c:	2000      	moveq	r0, #0
   1286e:	fab1 f381 	clz	r3, r1
   12872:	bf08      	it	eq
   12874:	3320      	addeq	r3, #32
   12876:	f1a3 030b 	sub.w	r3, r3, #11
   1287a:	f1b3 0220 	subs.w	r2, r3, #32
   1287e:	da0c      	bge.n	1289a <__adddf3+0x16e>
   12880:	320c      	adds	r2, #12
   12882:	dd08      	ble.n	12896 <__adddf3+0x16a>
   12884:	f102 0c14 	add.w	ip, r2, #20
   12888:	f1c2 020c 	rsb	r2, r2, #12
   1288c:	fa01 f00c 	lsl.w	r0, r1, ip
   12890:	fa21 f102 	lsr.w	r1, r1, r2
   12894:	e00c      	b.n	128b0 <__adddf3+0x184>
   12896:	f102 0214 	add.w	r2, r2, #20
   1289a:	bfd8      	it	le
   1289c:	f1c2 0c20 	rsble	ip, r2, #32
   128a0:	fa01 f102 	lsl.w	r1, r1, r2
   128a4:	fa20 fc0c 	lsr.w	ip, r0, ip
   128a8:	bfdc      	itt	le
   128aa:	ea41 010c 	orrle.w	r1, r1, ip
   128ae:	4090      	lslle	r0, r2
   128b0:	1ae4      	subs	r4, r4, r3
   128b2:	bfa2      	ittt	ge
   128b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   128b8:	4329      	orrge	r1, r5
   128ba:	bd30      	popge	{r4, r5, pc}
   128bc:	ea6f 0404 	mvn.w	r4, r4
   128c0:	3c1f      	subs	r4, #31
   128c2:	da1c      	bge.n	128fe <__adddf3+0x1d2>
   128c4:	340c      	adds	r4, #12
   128c6:	dc0e      	bgt.n	128e6 <__adddf3+0x1ba>
   128c8:	f104 0414 	add.w	r4, r4, #20
   128cc:	f1c4 0220 	rsb	r2, r4, #32
   128d0:	fa20 f004 	lsr.w	r0, r0, r4
   128d4:	fa01 f302 	lsl.w	r3, r1, r2
   128d8:	ea40 0003 	orr.w	r0, r0, r3
   128dc:	fa21 f304 	lsr.w	r3, r1, r4
   128e0:	ea45 0103 	orr.w	r1, r5, r3
   128e4:	bd30      	pop	{r4, r5, pc}
   128e6:	f1c4 040c 	rsb	r4, r4, #12
   128ea:	f1c4 0220 	rsb	r2, r4, #32
   128ee:	fa20 f002 	lsr.w	r0, r0, r2
   128f2:	fa01 f304 	lsl.w	r3, r1, r4
   128f6:	ea40 0003 	orr.w	r0, r0, r3
   128fa:	4629      	mov	r1, r5
   128fc:	bd30      	pop	{r4, r5, pc}
   128fe:	fa21 f004 	lsr.w	r0, r1, r4
   12902:	4629      	mov	r1, r5
   12904:	bd30      	pop	{r4, r5, pc}
   12906:	f094 0f00 	teq	r4, #0
   1290a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1290e:	bf06      	itte	eq
   12910:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   12914:	3401      	addeq	r4, #1
   12916:	3d01      	subne	r5, #1
   12918:	e74e      	b.n	127b8 <__adddf3+0x8c>
   1291a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1291e:	bf18      	it	ne
   12920:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   12924:	d029      	beq.n	1297a <__adddf3+0x24e>
   12926:	ea94 0f05 	teq	r4, r5
   1292a:	bf08      	it	eq
   1292c:	ea90 0f02 	teqeq	r0, r2
   12930:	d005      	beq.n	1293e <__adddf3+0x212>
   12932:	ea54 0c00 	orrs.w	ip, r4, r0
   12936:	bf04      	itt	eq
   12938:	4619      	moveq	r1, r3
   1293a:	4610      	moveq	r0, r2
   1293c:	bd30      	pop	{r4, r5, pc}
   1293e:	ea91 0f03 	teq	r1, r3
   12942:	bf1e      	ittt	ne
   12944:	2100      	movne	r1, #0
   12946:	2000      	movne	r0, #0
   12948:	bd30      	popne	{r4, r5, pc}
   1294a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1294e:	d105      	bne.n	1295c <__adddf3+0x230>
   12950:	0040      	lsls	r0, r0, #1
   12952:	4149      	adcs	r1, r1
   12954:	bf28      	it	cs
   12956:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1295a:	bd30      	pop	{r4, r5, pc}
   1295c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   12960:	bf3c      	itt	cc
   12962:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   12966:	bd30      	popcc	{r4, r5, pc}
   12968:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1296c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   12970:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   12974:	f04f 0000 	mov.w	r0, #0
   12978:	bd30      	pop	{r4, r5, pc}
   1297a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1297e:	bf1a      	itte	ne
   12980:	4619      	movne	r1, r3
   12982:	4610      	movne	r0, r2
   12984:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   12988:	bf1c      	itt	ne
   1298a:	460b      	movne	r3, r1
   1298c:	4602      	movne	r2, r0
   1298e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   12992:	bf06      	itte	eq
   12994:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   12998:	ea91 0f03 	teqeq	r1, r3
   1299c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   129a0:	bd30      	pop	{r4, r5, pc}
   129a2:	bf00      	nop

000129a4 <__aeabi_ui2d>:
   129a4:	f090 0f00 	teq	r0, #0
   129a8:	bf04      	itt	eq
   129aa:	2100      	moveq	r1, #0
   129ac:	4770      	bxeq	lr
   129ae:	b530      	push	{r4, r5, lr}
   129b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   129b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   129b8:	f04f 0500 	mov.w	r5, #0
   129bc:	f04f 0100 	mov.w	r1, #0
   129c0:	e750      	b.n	12864 <__adddf3+0x138>
   129c2:	bf00      	nop

000129c4 <__aeabi_i2d>:
   129c4:	f090 0f00 	teq	r0, #0
   129c8:	bf04      	itt	eq
   129ca:	2100      	moveq	r1, #0
   129cc:	4770      	bxeq	lr
   129ce:	b530      	push	{r4, r5, lr}
   129d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   129d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   129d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   129dc:	bf48      	it	mi
   129de:	4240      	negmi	r0, r0
   129e0:	f04f 0100 	mov.w	r1, #0
   129e4:	e73e      	b.n	12864 <__adddf3+0x138>
   129e6:	bf00      	nop

000129e8 <__aeabi_f2d>:
   129e8:	0042      	lsls	r2, r0, #1
   129ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   129ee:	ea4f 0131 	mov.w	r1, r1, rrx
   129f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   129f6:	bf1f      	itttt	ne
   129f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   129fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   12a00:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   12a04:	4770      	bxne	lr
   12a06:	f092 0f00 	teq	r2, #0
   12a0a:	bf14      	ite	ne
   12a0c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   12a10:	4770      	bxeq	lr
   12a12:	b530      	push	{r4, r5, lr}
   12a14:	f44f 7460 	mov.w	r4, #896	; 0x380
   12a18:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   12a1c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   12a20:	e720      	b.n	12864 <__adddf3+0x138>
   12a22:	bf00      	nop

00012a24 <__aeabi_ul2d>:
   12a24:	ea50 0201 	orrs.w	r2, r0, r1
   12a28:	bf08      	it	eq
   12a2a:	4770      	bxeq	lr
   12a2c:	b530      	push	{r4, r5, lr}
   12a2e:	f04f 0500 	mov.w	r5, #0
   12a32:	e00a      	b.n	12a4a <__aeabi_l2d+0x16>

00012a34 <__aeabi_l2d>:
   12a34:	ea50 0201 	orrs.w	r2, r0, r1
   12a38:	bf08      	it	eq
   12a3a:	4770      	bxeq	lr
   12a3c:	b530      	push	{r4, r5, lr}
   12a3e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   12a42:	d502      	bpl.n	12a4a <__aeabi_l2d+0x16>
   12a44:	4240      	negs	r0, r0
   12a46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   12a4a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   12a4e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   12a52:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   12a56:	f43f aedc 	beq.w	12812 <__adddf3+0xe6>
   12a5a:	f04f 0203 	mov.w	r2, #3
   12a5e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   12a62:	bf18      	it	ne
   12a64:	3203      	addne	r2, #3
   12a66:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   12a6a:	bf18      	it	ne
   12a6c:	3203      	addne	r2, #3
   12a6e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   12a72:	f1c2 0320 	rsb	r3, r2, #32
   12a76:	fa00 fc03 	lsl.w	ip, r0, r3
   12a7a:	fa20 f002 	lsr.w	r0, r0, r2
   12a7e:	fa01 fe03 	lsl.w	lr, r1, r3
   12a82:	ea40 000e 	orr.w	r0, r0, lr
   12a86:	fa21 f102 	lsr.w	r1, r1, r2
   12a8a:	4414      	add	r4, r2
   12a8c:	e6c1      	b.n	12812 <__adddf3+0xe6>
   12a8e:	bf00      	nop

00012a90 <__aeabi_dmul>:
   12a90:	b570      	push	{r4, r5, r6, lr}
   12a92:	f04f 0cff 	mov.w	ip, #255	; 0xff
   12a96:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   12a9a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   12a9e:	bf1d      	ittte	ne
   12aa0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   12aa4:	ea94 0f0c 	teqne	r4, ip
   12aa8:	ea95 0f0c 	teqne	r5, ip
   12aac:	f000 f8de 	bleq	12c6c <__aeabi_dmul+0x1dc>
   12ab0:	442c      	add	r4, r5
   12ab2:	ea81 0603 	eor.w	r6, r1, r3
   12ab6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   12aba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   12abe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   12ac2:	bf18      	it	ne
   12ac4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   12ac8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   12acc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   12ad0:	d038      	beq.n	12b44 <__aeabi_dmul+0xb4>
   12ad2:	fba0 ce02 	umull	ip, lr, r0, r2
   12ad6:	f04f 0500 	mov.w	r5, #0
   12ada:	fbe1 e502 	umlal	lr, r5, r1, r2
   12ade:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   12ae2:	fbe0 e503 	umlal	lr, r5, r0, r3
   12ae6:	f04f 0600 	mov.w	r6, #0
   12aea:	fbe1 5603 	umlal	r5, r6, r1, r3
   12aee:	f09c 0f00 	teq	ip, #0
   12af2:	bf18      	it	ne
   12af4:	f04e 0e01 	orrne.w	lr, lr, #1
   12af8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   12afc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   12b00:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   12b04:	d204      	bcs.n	12b10 <__aeabi_dmul+0x80>
   12b06:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   12b0a:	416d      	adcs	r5, r5
   12b0c:	eb46 0606 	adc.w	r6, r6, r6
   12b10:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   12b14:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   12b18:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   12b1c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   12b20:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   12b24:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   12b28:	bf88      	it	hi
   12b2a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   12b2e:	d81e      	bhi.n	12b6e <__aeabi_dmul+0xde>
   12b30:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   12b34:	bf08      	it	eq
   12b36:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   12b3a:	f150 0000 	adcs.w	r0, r0, #0
   12b3e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   12b42:	bd70      	pop	{r4, r5, r6, pc}
   12b44:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   12b48:	ea46 0101 	orr.w	r1, r6, r1
   12b4c:	ea40 0002 	orr.w	r0, r0, r2
   12b50:	ea81 0103 	eor.w	r1, r1, r3
   12b54:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   12b58:	bfc2      	ittt	gt
   12b5a:	ebd4 050c 	rsbsgt	r5, r4, ip
   12b5e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   12b62:	bd70      	popgt	{r4, r5, r6, pc}
   12b64:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   12b68:	f04f 0e00 	mov.w	lr, #0
   12b6c:	3c01      	subs	r4, #1
   12b6e:	f300 80ab 	bgt.w	12cc8 <__aeabi_dmul+0x238>
   12b72:	f114 0f36 	cmn.w	r4, #54	; 0x36
   12b76:	bfde      	ittt	le
   12b78:	2000      	movle	r0, #0
   12b7a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   12b7e:	bd70      	pople	{r4, r5, r6, pc}
   12b80:	f1c4 0400 	rsb	r4, r4, #0
   12b84:	3c20      	subs	r4, #32
   12b86:	da35      	bge.n	12bf4 <__aeabi_dmul+0x164>
   12b88:	340c      	adds	r4, #12
   12b8a:	dc1b      	bgt.n	12bc4 <__aeabi_dmul+0x134>
   12b8c:	f104 0414 	add.w	r4, r4, #20
   12b90:	f1c4 0520 	rsb	r5, r4, #32
   12b94:	fa00 f305 	lsl.w	r3, r0, r5
   12b98:	fa20 f004 	lsr.w	r0, r0, r4
   12b9c:	fa01 f205 	lsl.w	r2, r1, r5
   12ba0:	ea40 0002 	orr.w	r0, r0, r2
   12ba4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   12ba8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   12bac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   12bb0:	fa21 f604 	lsr.w	r6, r1, r4
   12bb4:	eb42 0106 	adc.w	r1, r2, r6
   12bb8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   12bbc:	bf08      	it	eq
   12bbe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   12bc2:	bd70      	pop	{r4, r5, r6, pc}
   12bc4:	f1c4 040c 	rsb	r4, r4, #12
   12bc8:	f1c4 0520 	rsb	r5, r4, #32
   12bcc:	fa00 f304 	lsl.w	r3, r0, r4
   12bd0:	fa20 f005 	lsr.w	r0, r0, r5
   12bd4:	fa01 f204 	lsl.w	r2, r1, r4
   12bd8:	ea40 0002 	orr.w	r0, r0, r2
   12bdc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   12be0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   12be4:	f141 0100 	adc.w	r1, r1, #0
   12be8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   12bec:	bf08      	it	eq
   12bee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   12bf2:	bd70      	pop	{r4, r5, r6, pc}
   12bf4:	f1c4 0520 	rsb	r5, r4, #32
   12bf8:	fa00 f205 	lsl.w	r2, r0, r5
   12bfc:	ea4e 0e02 	orr.w	lr, lr, r2
   12c00:	fa20 f304 	lsr.w	r3, r0, r4
   12c04:	fa01 f205 	lsl.w	r2, r1, r5
   12c08:	ea43 0302 	orr.w	r3, r3, r2
   12c0c:	fa21 f004 	lsr.w	r0, r1, r4
   12c10:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   12c14:	fa21 f204 	lsr.w	r2, r1, r4
   12c18:	ea20 0002 	bic.w	r0, r0, r2
   12c1c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   12c20:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   12c24:	bf08      	it	eq
   12c26:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   12c2a:	bd70      	pop	{r4, r5, r6, pc}
   12c2c:	f094 0f00 	teq	r4, #0
   12c30:	d10f      	bne.n	12c52 <__aeabi_dmul+0x1c2>
   12c32:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   12c36:	0040      	lsls	r0, r0, #1
   12c38:	eb41 0101 	adc.w	r1, r1, r1
   12c3c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   12c40:	bf08      	it	eq
   12c42:	3c01      	subeq	r4, #1
   12c44:	d0f7      	beq.n	12c36 <__aeabi_dmul+0x1a6>
   12c46:	ea41 0106 	orr.w	r1, r1, r6
   12c4a:	f095 0f00 	teq	r5, #0
   12c4e:	bf18      	it	ne
   12c50:	4770      	bxne	lr
   12c52:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   12c56:	0052      	lsls	r2, r2, #1
   12c58:	eb43 0303 	adc.w	r3, r3, r3
   12c5c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   12c60:	bf08      	it	eq
   12c62:	3d01      	subeq	r5, #1
   12c64:	d0f7      	beq.n	12c56 <__aeabi_dmul+0x1c6>
   12c66:	ea43 0306 	orr.w	r3, r3, r6
   12c6a:	4770      	bx	lr
   12c6c:	ea94 0f0c 	teq	r4, ip
   12c70:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   12c74:	bf18      	it	ne
   12c76:	ea95 0f0c 	teqne	r5, ip
   12c7a:	d00c      	beq.n	12c96 <__aeabi_dmul+0x206>
   12c7c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   12c80:	bf18      	it	ne
   12c82:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   12c86:	d1d1      	bne.n	12c2c <__aeabi_dmul+0x19c>
   12c88:	ea81 0103 	eor.w	r1, r1, r3
   12c8c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   12c90:	f04f 0000 	mov.w	r0, #0
   12c94:	bd70      	pop	{r4, r5, r6, pc}
   12c96:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   12c9a:	bf06      	itte	eq
   12c9c:	4610      	moveq	r0, r2
   12c9e:	4619      	moveq	r1, r3
   12ca0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   12ca4:	d019      	beq.n	12cda <__aeabi_dmul+0x24a>
   12ca6:	ea94 0f0c 	teq	r4, ip
   12caa:	d102      	bne.n	12cb2 <__aeabi_dmul+0x222>
   12cac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   12cb0:	d113      	bne.n	12cda <__aeabi_dmul+0x24a>
   12cb2:	ea95 0f0c 	teq	r5, ip
   12cb6:	d105      	bne.n	12cc4 <__aeabi_dmul+0x234>
   12cb8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   12cbc:	bf1c      	itt	ne
   12cbe:	4610      	movne	r0, r2
   12cc0:	4619      	movne	r1, r3
   12cc2:	d10a      	bne.n	12cda <__aeabi_dmul+0x24a>
   12cc4:	ea81 0103 	eor.w	r1, r1, r3
   12cc8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   12ccc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   12cd0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   12cd4:	f04f 0000 	mov.w	r0, #0
   12cd8:	bd70      	pop	{r4, r5, r6, pc}
   12cda:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   12cde:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   12ce2:	bd70      	pop	{r4, r5, r6, pc}

00012ce4 <__aeabi_ddiv>:
   12ce4:	b570      	push	{r4, r5, r6, lr}
   12ce6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   12cea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   12cee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   12cf2:	bf1d      	ittte	ne
   12cf4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   12cf8:	ea94 0f0c 	teqne	r4, ip
   12cfc:	ea95 0f0c 	teqne	r5, ip
   12d00:	f000 f8a7 	bleq	12e52 <__aeabi_ddiv+0x16e>
   12d04:	eba4 0405 	sub.w	r4, r4, r5
   12d08:	ea81 0e03 	eor.w	lr, r1, r3
   12d0c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   12d10:	ea4f 3101 	mov.w	r1, r1, lsl #12
   12d14:	f000 8088 	beq.w	12e28 <__aeabi_ddiv+0x144>
   12d18:	ea4f 3303 	mov.w	r3, r3, lsl #12
   12d1c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   12d20:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   12d24:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   12d28:	ea4f 2202 	mov.w	r2, r2, lsl #8
   12d2c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   12d30:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   12d34:	ea4f 2600 	mov.w	r6, r0, lsl #8
   12d38:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   12d3c:	429d      	cmp	r5, r3
   12d3e:	bf08      	it	eq
   12d40:	4296      	cmpeq	r6, r2
   12d42:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   12d46:	f504 7440 	add.w	r4, r4, #768	; 0x300
   12d4a:	d202      	bcs.n	12d52 <__aeabi_ddiv+0x6e>
   12d4c:	085b      	lsrs	r3, r3, #1
   12d4e:	ea4f 0232 	mov.w	r2, r2, rrx
   12d52:	1ab6      	subs	r6, r6, r2
   12d54:	eb65 0503 	sbc.w	r5, r5, r3
   12d58:	085b      	lsrs	r3, r3, #1
   12d5a:	ea4f 0232 	mov.w	r2, r2, rrx
   12d5e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   12d62:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   12d66:	ebb6 0e02 	subs.w	lr, r6, r2
   12d6a:	eb75 0e03 	sbcs.w	lr, r5, r3
   12d6e:	bf22      	ittt	cs
   12d70:	1ab6      	subcs	r6, r6, r2
   12d72:	4675      	movcs	r5, lr
   12d74:	ea40 000c 	orrcs.w	r0, r0, ip
   12d78:	085b      	lsrs	r3, r3, #1
   12d7a:	ea4f 0232 	mov.w	r2, r2, rrx
   12d7e:	ebb6 0e02 	subs.w	lr, r6, r2
   12d82:	eb75 0e03 	sbcs.w	lr, r5, r3
   12d86:	bf22      	ittt	cs
   12d88:	1ab6      	subcs	r6, r6, r2
   12d8a:	4675      	movcs	r5, lr
   12d8c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   12d90:	085b      	lsrs	r3, r3, #1
   12d92:	ea4f 0232 	mov.w	r2, r2, rrx
   12d96:	ebb6 0e02 	subs.w	lr, r6, r2
   12d9a:	eb75 0e03 	sbcs.w	lr, r5, r3
   12d9e:	bf22      	ittt	cs
   12da0:	1ab6      	subcs	r6, r6, r2
   12da2:	4675      	movcs	r5, lr
   12da4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   12da8:	085b      	lsrs	r3, r3, #1
   12daa:	ea4f 0232 	mov.w	r2, r2, rrx
   12dae:	ebb6 0e02 	subs.w	lr, r6, r2
   12db2:	eb75 0e03 	sbcs.w	lr, r5, r3
   12db6:	bf22      	ittt	cs
   12db8:	1ab6      	subcs	r6, r6, r2
   12dba:	4675      	movcs	r5, lr
   12dbc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   12dc0:	ea55 0e06 	orrs.w	lr, r5, r6
   12dc4:	d018      	beq.n	12df8 <__aeabi_ddiv+0x114>
   12dc6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   12dca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   12dce:	ea4f 1606 	mov.w	r6, r6, lsl #4
   12dd2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   12dd6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   12dda:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   12dde:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   12de2:	d1c0      	bne.n	12d66 <__aeabi_ddiv+0x82>
   12de4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   12de8:	d10b      	bne.n	12e02 <__aeabi_ddiv+0x11e>
   12dea:	ea41 0100 	orr.w	r1, r1, r0
   12dee:	f04f 0000 	mov.w	r0, #0
   12df2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   12df6:	e7b6      	b.n	12d66 <__aeabi_ddiv+0x82>
   12df8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   12dfc:	bf04      	itt	eq
   12dfe:	4301      	orreq	r1, r0
   12e00:	2000      	moveq	r0, #0
   12e02:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   12e06:	bf88      	it	hi
   12e08:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   12e0c:	f63f aeaf 	bhi.w	12b6e <__aeabi_dmul+0xde>
   12e10:	ebb5 0c03 	subs.w	ip, r5, r3
   12e14:	bf04      	itt	eq
   12e16:	ebb6 0c02 	subseq.w	ip, r6, r2
   12e1a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   12e1e:	f150 0000 	adcs.w	r0, r0, #0
   12e22:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   12e26:	bd70      	pop	{r4, r5, r6, pc}
   12e28:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   12e2c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   12e30:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   12e34:	bfc2      	ittt	gt
   12e36:	ebd4 050c 	rsbsgt	r5, r4, ip
   12e3a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   12e3e:	bd70      	popgt	{r4, r5, r6, pc}
   12e40:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   12e44:	f04f 0e00 	mov.w	lr, #0
   12e48:	3c01      	subs	r4, #1
   12e4a:	e690      	b.n	12b6e <__aeabi_dmul+0xde>
   12e4c:	ea45 0e06 	orr.w	lr, r5, r6
   12e50:	e68d      	b.n	12b6e <__aeabi_dmul+0xde>
   12e52:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   12e56:	ea94 0f0c 	teq	r4, ip
   12e5a:	bf08      	it	eq
   12e5c:	ea95 0f0c 	teqeq	r5, ip
   12e60:	f43f af3b 	beq.w	12cda <__aeabi_dmul+0x24a>
   12e64:	ea94 0f0c 	teq	r4, ip
   12e68:	d10a      	bne.n	12e80 <__aeabi_ddiv+0x19c>
   12e6a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   12e6e:	f47f af34 	bne.w	12cda <__aeabi_dmul+0x24a>
   12e72:	ea95 0f0c 	teq	r5, ip
   12e76:	f47f af25 	bne.w	12cc4 <__aeabi_dmul+0x234>
   12e7a:	4610      	mov	r0, r2
   12e7c:	4619      	mov	r1, r3
   12e7e:	e72c      	b.n	12cda <__aeabi_dmul+0x24a>
   12e80:	ea95 0f0c 	teq	r5, ip
   12e84:	d106      	bne.n	12e94 <__aeabi_ddiv+0x1b0>
   12e86:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   12e8a:	f43f aefd 	beq.w	12c88 <__aeabi_dmul+0x1f8>
   12e8e:	4610      	mov	r0, r2
   12e90:	4619      	mov	r1, r3
   12e92:	e722      	b.n	12cda <__aeabi_dmul+0x24a>
   12e94:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   12e98:	bf18      	it	ne
   12e9a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   12e9e:	f47f aec5 	bne.w	12c2c <__aeabi_dmul+0x19c>
   12ea2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   12ea6:	f47f af0d 	bne.w	12cc4 <__aeabi_dmul+0x234>
   12eaa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   12eae:	f47f aeeb 	bne.w	12c88 <__aeabi_dmul+0x1f8>
   12eb2:	e712      	b.n	12cda <__aeabi_dmul+0x24a>

00012eb4 <__gedf2>:
   12eb4:	f04f 3cff 	mov.w	ip, #4294967295
   12eb8:	e006      	b.n	12ec8 <__cmpdf2+0x4>
   12eba:	bf00      	nop

00012ebc <__ledf2>:
   12ebc:	f04f 0c01 	mov.w	ip, #1
   12ec0:	e002      	b.n	12ec8 <__cmpdf2+0x4>
   12ec2:	bf00      	nop

00012ec4 <__cmpdf2>:
   12ec4:	f04f 0c01 	mov.w	ip, #1
   12ec8:	f84d cd04 	str.w	ip, [sp, #-4]!
   12ecc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   12ed0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   12ed4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   12ed8:	bf18      	it	ne
   12eda:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   12ede:	d01b      	beq.n	12f18 <__cmpdf2+0x54>
   12ee0:	b001      	add	sp, #4
   12ee2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   12ee6:	bf0c      	ite	eq
   12ee8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   12eec:	ea91 0f03 	teqne	r1, r3
   12ef0:	bf02      	ittt	eq
   12ef2:	ea90 0f02 	teqeq	r0, r2
   12ef6:	2000      	moveq	r0, #0
   12ef8:	4770      	bxeq	lr
   12efa:	f110 0f00 	cmn.w	r0, #0
   12efe:	ea91 0f03 	teq	r1, r3
   12f02:	bf58      	it	pl
   12f04:	4299      	cmppl	r1, r3
   12f06:	bf08      	it	eq
   12f08:	4290      	cmpeq	r0, r2
   12f0a:	bf2c      	ite	cs
   12f0c:	17d8      	asrcs	r0, r3, #31
   12f0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   12f12:	f040 0001 	orr.w	r0, r0, #1
   12f16:	4770      	bx	lr
   12f18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   12f1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   12f20:	d102      	bne.n	12f28 <__cmpdf2+0x64>
   12f22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   12f26:	d107      	bne.n	12f38 <__cmpdf2+0x74>
   12f28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   12f2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   12f30:	d1d6      	bne.n	12ee0 <__cmpdf2+0x1c>
   12f32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   12f36:	d0d3      	beq.n	12ee0 <__cmpdf2+0x1c>
   12f38:	f85d 0b04 	ldr.w	r0, [sp], #4
   12f3c:	4770      	bx	lr
   12f3e:	bf00      	nop

00012f40 <__aeabi_cdrcmple>:
   12f40:	4684      	mov	ip, r0
   12f42:	4610      	mov	r0, r2
   12f44:	4662      	mov	r2, ip
   12f46:	468c      	mov	ip, r1
   12f48:	4619      	mov	r1, r3
   12f4a:	4663      	mov	r3, ip
   12f4c:	e000      	b.n	12f50 <__aeabi_cdcmpeq>
   12f4e:	bf00      	nop

00012f50 <__aeabi_cdcmpeq>:
   12f50:	b501      	push	{r0, lr}
   12f52:	f7ff ffb7 	bl	12ec4 <__cmpdf2>
   12f56:	2800      	cmp	r0, #0
   12f58:	bf48      	it	mi
   12f5a:	f110 0f00 	cmnmi.w	r0, #0
   12f5e:	bd01      	pop	{r0, pc}

00012f60 <__aeabi_dcmpeq>:
   12f60:	f84d ed08 	str.w	lr, [sp, #-8]!
   12f64:	f7ff fff4 	bl	12f50 <__aeabi_cdcmpeq>
   12f68:	bf0c      	ite	eq
   12f6a:	2001      	moveq	r0, #1
   12f6c:	2000      	movne	r0, #0
   12f6e:	f85d fb08 	ldr.w	pc, [sp], #8
   12f72:	bf00      	nop

00012f74 <__aeabi_dcmplt>:
   12f74:	f84d ed08 	str.w	lr, [sp, #-8]!
   12f78:	f7ff ffea 	bl	12f50 <__aeabi_cdcmpeq>
   12f7c:	bf34      	ite	cc
   12f7e:	2001      	movcc	r0, #1
   12f80:	2000      	movcs	r0, #0
   12f82:	f85d fb08 	ldr.w	pc, [sp], #8
   12f86:	bf00      	nop

00012f88 <__aeabi_dcmple>:
   12f88:	f84d ed08 	str.w	lr, [sp, #-8]!
   12f8c:	f7ff ffe0 	bl	12f50 <__aeabi_cdcmpeq>
   12f90:	bf94      	ite	ls
   12f92:	2001      	movls	r0, #1
   12f94:	2000      	movhi	r0, #0
   12f96:	f85d fb08 	ldr.w	pc, [sp], #8
   12f9a:	bf00      	nop

00012f9c <__aeabi_dcmpge>:
   12f9c:	f84d ed08 	str.w	lr, [sp, #-8]!
   12fa0:	f7ff ffce 	bl	12f40 <__aeabi_cdrcmple>
   12fa4:	bf94      	ite	ls
   12fa6:	2001      	movls	r0, #1
   12fa8:	2000      	movhi	r0, #0
   12faa:	f85d fb08 	ldr.w	pc, [sp], #8
   12fae:	bf00      	nop

00012fb0 <__aeabi_dcmpgt>:
   12fb0:	f84d ed08 	str.w	lr, [sp, #-8]!
   12fb4:	f7ff ffc4 	bl	12f40 <__aeabi_cdrcmple>
   12fb8:	bf34      	ite	cc
   12fba:	2001      	movcc	r0, #1
   12fbc:	2000      	movcs	r0, #0
   12fbe:	f85d fb08 	ldr.w	pc, [sp], #8
   12fc2:	bf00      	nop

00012fc4 <__aeabi_d2iz>:
   12fc4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   12fc8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   12fcc:	d215      	bcs.n	12ffa <__aeabi_d2iz+0x36>
   12fce:	d511      	bpl.n	12ff4 <__aeabi_d2iz+0x30>
   12fd0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   12fd4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   12fd8:	d912      	bls.n	13000 <__aeabi_d2iz+0x3c>
   12fda:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   12fde:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   12fe2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   12fe6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   12fea:	fa23 f002 	lsr.w	r0, r3, r2
   12fee:	bf18      	it	ne
   12ff0:	4240      	negne	r0, r0
   12ff2:	4770      	bx	lr
   12ff4:	f04f 0000 	mov.w	r0, #0
   12ff8:	4770      	bx	lr
   12ffa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   12ffe:	d105      	bne.n	1300c <__aeabi_d2iz+0x48>
   13000:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   13004:	bf08      	it	eq
   13006:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   1300a:	4770      	bx	lr
   1300c:	f04f 0000 	mov.w	r0, #0
   13010:	4770      	bx	lr
   13012:	bf00      	nop

00013014 <__aeabi_d2uiz>:
   13014:	004a      	lsls	r2, r1, #1
   13016:	d211      	bcs.n	1303c <__aeabi_d2uiz+0x28>
   13018:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1301c:	d211      	bcs.n	13042 <__aeabi_d2uiz+0x2e>
   1301e:	d50d      	bpl.n	1303c <__aeabi_d2uiz+0x28>
   13020:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   13024:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   13028:	d40e      	bmi.n	13048 <__aeabi_d2uiz+0x34>
   1302a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1302e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   13032:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   13036:	fa23 f002 	lsr.w	r0, r3, r2
   1303a:	4770      	bx	lr
   1303c:	f04f 0000 	mov.w	r0, #0
   13040:	4770      	bx	lr
   13042:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   13046:	d102      	bne.n	1304e <__aeabi_d2uiz+0x3a>
   13048:	f04f 30ff 	mov.w	r0, #4294967295
   1304c:	4770      	bx	lr
   1304e:	f04f 0000 	mov.w	r0, #0
   13052:	4770      	bx	lr

00013054 <__aeabi_d2f>:
   13054:	ea4f 0241 	mov.w	r2, r1, lsl #1
   13058:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   1305c:	bf24      	itt	cs
   1305e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   13062:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   13066:	d90d      	bls.n	13084 <__aeabi_d2f+0x30>
   13068:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1306c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   13070:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   13074:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   13078:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   1307c:	bf08      	it	eq
   1307e:	f020 0001 	biceq.w	r0, r0, #1
   13082:	4770      	bx	lr
   13084:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   13088:	d121      	bne.n	130ce <__aeabi_d2f+0x7a>
   1308a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   1308e:	bfbc      	itt	lt
   13090:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   13094:	4770      	bxlt	lr
   13096:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1309a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   1309e:	f1c2 0218 	rsb	r2, r2, #24
   130a2:	f1c2 0c20 	rsb	ip, r2, #32
   130a6:	fa10 f30c 	lsls.w	r3, r0, ip
   130aa:	fa20 f002 	lsr.w	r0, r0, r2
   130ae:	bf18      	it	ne
   130b0:	f040 0001 	orrne.w	r0, r0, #1
   130b4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   130b8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   130bc:	fa03 fc0c 	lsl.w	ip, r3, ip
   130c0:	ea40 000c 	orr.w	r0, r0, ip
   130c4:	fa23 f302 	lsr.w	r3, r3, r2
   130c8:	ea4f 0343 	mov.w	r3, r3, lsl #1
   130cc:	e7cc      	b.n	13068 <__aeabi_d2f+0x14>
   130ce:	ea7f 5362 	mvns.w	r3, r2, asr #21
   130d2:	d107      	bne.n	130e4 <__aeabi_d2f+0x90>
   130d4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   130d8:	bf1e      	ittt	ne
   130da:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   130de:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   130e2:	4770      	bxne	lr
   130e4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   130e8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   130ec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   130f0:	4770      	bx	lr
   130f2:	bf00      	nop

000130f4 <__aeabi_frsub>:
   130f4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   130f8:	e002      	b.n	13100 <__addsf3>
   130fa:	bf00      	nop

000130fc <__aeabi_fsub>:
   130fc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00013100 <__addsf3>:
   13100:	0042      	lsls	r2, r0, #1
   13102:	bf1f      	itttt	ne
   13104:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   13108:	ea92 0f03 	teqne	r2, r3
   1310c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   13110:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   13114:	d06a      	beq.n	131ec <__addsf3+0xec>
   13116:	ea4f 6212 	mov.w	r2, r2, lsr #24
   1311a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   1311e:	bfc1      	itttt	gt
   13120:	18d2      	addgt	r2, r2, r3
   13122:	4041      	eorgt	r1, r0
   13124:	4048      	eorgt	r0, r1
   13126:	4041      	eorgt	r1, r0
   13128:	bfb8      	it	lt
   1312a:	425b      	neglt	r3, r3
   1312c:	2b19      	cmp	r3, #25
   1312e:	bf88      	it	hi
   13130:	4770      	bxhi	lr
   13132:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   13136:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1313a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1313e:	bf18      	it	ne
   13140:	4240      	negne	r0, r0
   13142:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   13146:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   1314a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1314e:	bf18      	it	ne
   13150:	4249      	negne	r1, r1
   13152:	ea92 0f03 	teq	r2, r3
   13156:	d03f      	beq.n	131d8 <__addsf3+0xd8>
   13158:	f1a2 0201 	sub.w	r2, r2, #1
   1315c:	fa41 fc03 	asr.w	ip, r1, r3
   13160:	eb10 000c 	adds.w	r0, r0, ip
   13164:	f1c3 0320 	rsb	r3, r3, #32
   13168:	fa01 f103 	lsl.w	r1, r1, r3
   1316c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   13170:	d502      	bpl.n	13178 <__addsf3+0x78>
   13172:	4249      	negs	r1, r1
   13174:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   13178:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1317c:	d313      	bcc.n	131a6 <__addsf3+0xa6>
   1317e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   13182:	d306      	bcc.n	13192 <__addsf3+0x92>
   13184:	0840      	lsrs	r0, r0, #1
   13186:	ea4f 0131 	mov.w	r1, r1, rrx
   1318a:	f102 0201 	add.w	r2, r2, #1
   1318e:	2afe      	cmp	r2, #254	; 0xfe
   13190:	d251      	bcs.n	13236 <__addsf3+0x136>
   13192:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   13196:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1319a:	bf08      	it	eq
   1319c:	f020 0001 	biceq.w	r0, r0, #1
   131a0:	ea40 0003 	orr.w	r0, r0, r3
   131a4:	4770      	bx	lr
   131a6:	0049      	lsls	r1, r1, #1
   131a8:	eb40 0000 	adc.w	r0, r0, r0
   131ac:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   131b0:	f1a2 0201 	sub.w	r2, r2, #1
   131b4:	d1ed      	bne.n	13192 <__addsf3+0x92>
   131b6:	fab0 fc80 	clz	ip, r0
   131ba:	f1ac 0c08 	sub.w	ip, ip, #8
   131be:	ebb2 020c 	subs.w	r2, r2, ip
   131c2:	fa00 f00c 	lsl.w	r0, r0, ip
   131c6:	bfaa      	itet	ge
   131c8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   131cc:	4252      	neglt	r2, r2
   131ce:	4318      	orrge	r0, r3
   131d0:	bfbc      	itt	lt
   131d2:	40d0      	lsrlt	r0, r2
   131d4:	4318      	orrlt	r0, r3
   131d6:	4770      	bx	lr
   131d8:	f092 0f00 	teq	r2, #0
   131dc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   131e0:	bf06      	itte	eq
   131e2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   131e6:	3201      	addeq	r2, #1
   131e8:	3b01      	subne	r3, #1
   131ea:	e7b5      	b.n	13158 <__addsf3+0x58>
   131ec:	ea4f 0341 	mov.w	r3, r1, lsl #1
   131f0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   131f4:	bf18      	it	ne
   131f6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   131fa:	d021      	beq.n	13240 <__addsf3+0x140>
   131fc:	ea92 0f03 	teq	r2, r3
   13200:	d004      	beq.n	1320c <__addsf3+0x10c>
   13202:	f092 0f00 	teq	r2, #0
   13206:	bf08      	it	eq
   13208:	4608      	moveq	r0, r1
   1320a:	4770      	bx	lr
   1320c:	ea90 0f01 	teq	r0, r1
   13210:	bf1c      	itt	ne
   13212:	2000      	movne	r0, #0
   13214:	4770      	bxne	lr
   13216:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   1321a:	d104      	bne.n	13226 <__addsf3+0x126>
   1321c:	0040      	lsls	r0, r0, #1
   1321e:	bf28      	it	cs
   13220:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   13224:	4770      	bx	lr
   13226:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   1322a:	bf3c      	itt	cc
   1322c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   13230:	4770      	bxcc	lr
   13232:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   13236:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   1323a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1323e:	4770      	bx	lr
   13240:	ea7f 6222 	mvns.w	r2, r2, asr #24
   13244:	bf16      	itet	ne
   13246:	4608      	movne	r0, r1
   13248:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   1324c:	4601      	movne	r1, r0
   1324e:	0242      	lsls	r2, r0, #9
   13250:	bf06      	itte	eq
   13252:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   13256:	ea90 0f01 	teqeq	r0, r1
   1325a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   1325e:	4770      	bx	lr

00013260 <__aeabi_ui2f>:
   13260:	f04f 0300 	mov.w	r3, #0
   13264:	e004      	b.n	13270 <__aeabi_i2f+0x8>
   13266:	bf00      	nop

00013268 <__aeabi_i2f>:
   13268:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   1326c:	bf48      	it	mi
   1326e:	4240      	negmi	r0, r0
   13270:	ea5f 0c00 	movs.w	ip, r0
   13274:	bf08      	it	eq
   13276:	4770      	bxeq	lr
   13278:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   1327c:	4601      	mov	r1, r0
   1327e:	f04f 0000 	mov.w	r0, #0
   13282:	e01c      	b.n	132be <__aeabi_l2f+0x2a>

00013284 <__aeabi_ul2f>:
   13284:	ea50 0201 	orrs.w	r2, r0, r1
   13288:	bf08      	it	eq
   1328a:	4770      	bxeq	lr
   1328c:	f04f 0300 	mov.w	r3, #0
   13290:	e00a      	b.n	132a8 <__aeabi_l2f+0x14>
   13292:	bf00      	nop

00013294 <__aeabi_l2f>:
   13294:	ea50 0201 	orrs.w	r2, r0, r1
   13298:	bf08      	it	eq
   1329a:	4770      	bxeq	lr
   1329c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   132a0:	d502      	bpl.n	132a8 <__aeabi_l2f+0x14>
   132a2:	4240      	negs	r0, r0
   132a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   132a8:	ea5f 0c01 	movs.w	ip, r1
   132ac:	bf02      	ittt	eq
   132ae:	4684      	moveq	ip, r0
   132b0:	4601      	moveq	r1, r0
   132b2:	2000      	moveq	r0, #0
   132b4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   132b8:	bf08      	it	eq
   132ba:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   132be:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   132c2:	fabc f28c 	clz	r2, ip
   132c6:	3a08      	subs	r2, #8
   132c8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   132cc:	db10      	blt.n	132f0 <__aeabi_l2f+0x5c>
   132ce:	fa01 fc02 	lsl.w	ip, r1, r2
   132d2:	4463      	add	r3, ip
   132d4:	fa00 fc02 	lsl.w	ip, r0, r2
   132d8:	f1c2 0220 	rsb	r2, r2, #32
   132dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   132e0:	fa20 f202 	lsr.w	r2, r0, r2
   132e4:	eb43 0002 	adc.w	r0, r3, r2
   132e8:	bf08      	it	eq
   132ea:	f020 0001 	biceq.w	r0, r0, #1
   132ee:	4770      	bx	lr
   132f0:	f102 0220 	add.w	r2, r2, #32
   132f4:	fa01 fc02 	lsl.w	ip, r1, r2
   132f8:	f1c2 0220 	rsb	r2, r2, #32
   132fc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   13300:	fa21 f202 	lsr.w	r2, r1, r2
   13304:	eb43 0002 	adc.w	r0, r3, r2
   13308:	bf08      	it	eq
   1330a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   1330e:	4770      	bx	lr

00013310 <__aeabi_fmul>:
   13310:	f04f 0cff 	mov.w	ip, #255	; 0xff
   13314:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   13318:	bf1e      	ittt	ne
   1331a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   1331e:	ea92 0f0c 	teqne	r2, ip
   13322:	ea93 0f0c 	teqne	r3, ip
   13326:	d06f      	beq.n	13408 <__aeabi_fmul+0xf8>
   13328:	441a      	add	r2, r3
   1332a:	ea80 0c01 	eor.w	ip, r0, r1
   1332e:	0240      	lsls	r0, r0, #9
   13330:	bf18      	it	ne
   13332:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   13336:	d01e      	beq.n	13376 <__aeabi_fmul+0x66>
   13338:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   1333c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   13340:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   13344:	fba0 3101 	umull	r3, r1, r0, r1
   13348:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   1334c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   13350:	bf3e      	ittt	cc
   13352:	0049      	lslcc	r1, r1, #1
   13354:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   13358:	005b      	lslcc	r3, r3, #1
   1335a:	ea40 0001 	orr.w	r0, r0, r1
   1335e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   13362:	2afd      	cmp	r2, #253	; 0xfd
   13364:	d81d      	bhi.n	133a2 <__aeabi_fmul+0x92>
   13366:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   1336a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1336e:	bf08      	it	eq
   13370:	f020 0001 	biceq.w	r0, r0, #1
   13374:	4770      	bx	lr
   13376:	f090 0f00 	teq	r0, #0
   1337a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   1337e:	bf08      	it	eq
   13380:	0249      	lsleq	r1, r1, #9
   13382:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   13386:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   1338a:	3a7f      	subs	r2, #127	; 0x7f
   1338c:	bfc2      	ittt	gt
   1338e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   13392:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   13396:	4770      	bxgt	lr
   13398:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1339c:	f04f 0300 	mov.w	r3, #0
   133a0:	3a01      	subs	r2, #1
   133a2:	dc5d      	bgt.n	13460 <__aeabi_fmul+0x150>
   133a4:	f112 0f19 	cmn.w	r2, #25
   133a8:	bfdc      	itt	le
   133aa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   133ae:	4770      	bxle	lr
   133b0:	f1c2 0200 	rsb	r2, r2, #0
   133b4:	0041      	lsls	r1, r0, #1
   133b6:	fa21 f102 	lsr.w	r1, r1, r2
   133ba:	f1c2 0220 	rsb	r2, r2, #32
   133be:	fa00 fc02 	lsl.w	ip, r0, r2
   133c2:	ea5f 0031 	movs.w	r0, r1, rrx
   133c6:	f140 0000 	adc.w	r0, r0, #0
   133ca:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   133ce:	bf08      	it	eq
   133d0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   133d4:	4770      	bx	lr
   133d6:	f092 0f00 	teq	r2, #0
   133da:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   133de:	bf02      	ittt	eq
   133e0:	0040      	lsleq	r0, r0, #1
   133e2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   133e6:	3a01      	subeq	r2, #1
   133e8:	d0f9      	beq.n	133de <__aeabi_fmul+0xce>
   133ea:	ea40 000c 	orr.w	r0, r0, ip
   133ee:	f093 0f00 	teq	r3, #0
   133f2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   133f6:	bf02      	ittt	eq
   133f8:	0049      	lsleq	r1, r1, #1
   133fa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   133fe:	3b01      	subeq	r3, #1
   13400:	d0f9      	beq.n	133f6 <__aeabi_fmul+0xe6>
   13402:	ea41 010c 	orr.w	r1, r1, ip
   13406:	e78f      	b.n	13328 <__aeabi_fmul+0x18>
   13408:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   1340c:	ea92 0f0c 	teq	r2, ip
   13410:	bf18      	it	ne
   13412:	ea93 0f0c 	teqne	r3, ip
   13416:	d00a      	beq.n	1342e <__aeabi_fmul+0x11e>
   13418:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   1341c:	bf18      	it	ne
   1341e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   13422:	d1d8      	bne.n	133d6 <__aeabi_fmul+0xc6>
   13424:	ea80 0001 	eor.w	r0, r0, r1
   13428:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   1342c:	4770      	bx	lr
   1342e:	f090 0f00 	teq	r0, #0
   13432:	bf17      	itett	ne
   13434:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   13438:	4608      	moveq	r0, r1
   1343a:	f091 0f00 	teqne	r1, #0
   1343e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   13442:	d014      	beq.n	1346e <__aeabi_fmul+0x15e>
   13444:	ea92 0f0c 	teq	r2, ip
   13448:	d101      	bne.n	1344e <__aeabi_fmul+0x13e>
   1344a:	0242      	lsls	r2, r0, #9
   1344c:	d10f      	bne.n	1346e <__aeabi_fmul+0x15e>
   1344e:	ea93 0f0c 	teq	r3, ip
   13452:	d103      	bne.n	1345c <__aeabi_fmul+0x14c>
   13454:	024b      	lsls	r3, r1, #9
   13456:	bf18      	it	ne
   13458:	4608      	movne	r0, r1
   1345a:	d108      	bne.n	1346e <__aeabi_fmul+0x15e>
   1345c:	ea80 0001 	eor.w	r0, r0, r1
   13460:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   13464:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   13468:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1346c:	4770      	bx	lr
   1346e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   13472:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   13476:	4770      	bx	lr

00013478 <__aeabi_fdiv>:
   13478:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1347c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   13480:	bf1e      	ittt	ne
   13482:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   13486:	ea92 0f0c 	teqne	r2, ip
   1348a:	ea93 0f0c 	teqne	r3, ip
   1348e:	d069      	beq.n	13564 <__aeabi_fdiv+0xec>
   13490:	eba2 0203 	sub.w	r2, r2, r3
   13494:	ea80 0c01 	eor.w	ip, r0, r1
   13498:	0249      	lsls	r1, r1, #9
   1349a:	ea4f 2040 	mov.w	r0, r0, lsl #9
   1349e:	d037      	beq.n	13510 <__aeabi_fdiv+0x98>
   134a0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   134a4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   134a8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   134ac:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   134b0:	428b      	cmp	r3, r1
   134b2:	bf38      	it	cc
   134b4:	005b      	lslcc	r3, r3, #1
   134b6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   134ba:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   134be:	428b      	cmp	r3, r1
   134c0:	bf24      	itt	cs
   134c2:	1a5b      	subcs	r3, r3, r1
   134c4:	ea40 000c 	orrcs.w	r0, r0, ip
   134c8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   134cc:	bf24      	itt	cs
   134ce:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   134d2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   134d6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   134da:	bf24      	itt	cs
   134dc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   134e0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   134e4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   134e8:	bf24      	itt	cs
   134ea:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   134ee:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   134f2:	011b      	lsls	r3, r3, #4
   134f4:	bf18      	it	ne
   134f6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   134fa:	d1e0      	bne.n	134be <__aeabi_fdiv+0x46>
   134fc:	2afd      	cmp	r2, #253	; 0xfd
   134fe:	f63f af50 	bhi.w	133a2 <__aeabi_fmul+0x92>
   13502:	428b      	cmp	r3, r1
   13504:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   13508:	bf08      	it	eq
   1350a:	f020 0001 	biceq.w	r0, r0, #1
   1350e:	4770      	bx	lr
   13510:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   13514:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   13518:	327f      	adds	r2, #127	; 0x7f
   1351a:	bfc2      	ittt	gt
   1351c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   13520:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   13524:	4770      	bxgt	lr
   13526:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1352a:	f04f 0300 	mov.w	r3, #0
   1352e:	3a01      	subs	r2, #1
   13530:	e737      	b.n	133a2 <__aeabi_fmul+0x92>
   13532:	f092 0f00 	teq	r2, #0
   13536:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   1353a:	bf02      	ittt	eq
   1353c:	0040      	lsleq	r0, r0, #1
   1353e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   13542:	3a01      	subeq	r2, #1
   13544:	d0f9      	beq.n	1353a <__aeabi_fdiv+0xc2>
   13546:	ea40 000c 	orr.w	r0, r0, ip
   1354a:	f093 0f00 	teq	r3, #0
   1354e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   13552:	bf02      	ittt	eq
   13554:	0049      	lsleq	r1, r1, #1
   13556:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   1355a:	3b01      	subeq	r3, #1
   1355c:	d0f9      	beq.n	13552 <__aeabi_fdiv+0xda>
   1355e:	ea41 010c 	orr.w	r1, r1, ip
   13562:	e795      	b.n	13490 <__aeabi_fdiv+0x18>
   13564:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   13568:	ea92 0f0c 	teq	r2, ip
   1356c:	d108      	bne.n	13580 <__aeabi_fdiv+0x108>
   1356e:	0242      	lsls	r2, r0, #9
   13570:	f47f af7d 	bne.w	1346e <__aeabi_fmul+0x15e>
   13574:	ea93 0f0c 	teq	r3, ip
   13578:	f47f af70 	bne.w	1345c <__aeabi_fmul+0x14c>
   1357c:	4608      	mov	r0, r1
   1357e:	e776      	b.n	1346e <__aeabi_fmul+0x15e>
   13580:	ea93 0f0c 	teq	r3, ip
   13584:	d104      	bne.n	13590 <__aeabi_fdiv+0x118>
   13586:	024b      	lsls	r3, r1, #9
   13588:	f43f af4c 	beq.w	13424 <__aeabi_fmul+0x114>
   1358c:	4608      	mov	r0, r1
   1358e:	e76e      	b.n	1346e <__aeabi_fmul+0x15e>
   13590:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   13594:	bf18      	it	ne
   13596:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   1359a:	d1ca      	bne.n	13532 <__aeabi_fdiv+0xba>
   1359c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   135a0:	f47f af5c 	bne.w	1345c <__aeabi_fmul+0x14c>
   135a4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   135a8:	f47f af3c 	bne.w	13424 <__aeabi_fmul+0x114>
   135ac:	e75f      	b.n	1346e <__aeabi_fmul+0x15e>
   135ae:	bf00      	nop

000135b0 <__gesf2>:
   135b0:	f04f 3cff 	mov.w	ip, #4294967295
   135b4:	e006      	b.n	135c4 <__cmpsf2+0x4>
   135b6:	bf00      	nop

000135b8 <__lesf2>:
   135b8:	f04f 0c01 	mov.w	ip, #1
   135bc:	e002      	b.n	135c4 <__cmpsf2+0x4>
   135be:	bf00      	nop

000135c0 <__cmpsf2>:
   135c0:	f04f 0c01 	mov.w	ip, #1
   135c4:	f84d cd04 	str.w	ip, [sp, #-4]!
   135c8:	ea4f 0240 	mov.w	r2, r0, lsl #1
   135cc:	ea4f 0341 	mov.w	r3, r1, lsl #1
   135d0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   135d4:	bf18      	it	ne
   135d6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   135da:	d011      	beq.n	13600 <__cmpsf2+0x40>
   135dc:	b001      	add	sp, #4
   135de:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   135e2:	bf18      	it	ne
   135e4:	ea90 0f01 	teqne	r0, r1
   135e8:	bf58      	it	pl
   135ea:	ebb2 0003 	subspl.w	r0, r2, r3
   135ee:	bf88      	it	hi
   135f0:	17c8      	asrhi	r0, r1, #31
   135f2:	bf38      	it	cc
   135f4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   135f8:	bf18      	it	ne
   135fa:	f040 0001 	orrne.w	r0, r0, #1
   135fe:	4770      	bx	lr
   13600:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   13604:	d102      	bne.n	1360c <__cmpsf2+0x4c>
   13606:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   1360a:	d105      	bne.n	13618 <__cmpsf2+0x58>
   1360c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   13610:	d1e4      	bne.n	135dc <__cmpsf2+0x1c>
   13612:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   13616:	d0e1      	beq.n	135dc <__cmpsf2+0x1c>
   13618:	f85d 0b04 	ldr.w	r0, [sp], #4
   1361c:	4770      	bx	lr
   1361e:	bf00      	nop

00013620 <__aeabi_cfrcmple>:
   13620:	4684      	mov	ip, r0
   13622:	4608      	mov	r0, r1
   13624:	4661      	mov	r1, ip
   13626:	e7ff      	b.n	13628 <__aeabi_cfcmpeq>

00013628 <__aeabi_cfcmpeq>:
   13628:	b50f      	push	{r0, r1, r2, r3, lr}
   1362a:	f7ff ffc9 	bl	135c0 <__cmpsf2>
   1362e:	2800      	cmp	r0, #0
   13630:	bf48      	it	mi
   13632:	f110 0f00 	cmnmi.w	r0, #0
   13636:	bd0f      	pop	{r0, r1, r2, r3, pc}

00013638 <__aeabi_fcmpeq>:
   13638:	f84d ed08 	str.w	lr, [sp, #-8]!
   1363c:	f7ff fff4 	bl	13628 <__aeabi_cfcmpeq>
   13640:	bf0c      	ite	eq
   13642:	2001      	moveq	r0, #1
   13644:	2000      	movne	r0, #0
   13646:	f85d fb08 	ldr.w	pc, [sp], #8
   1364a:	bf00      	nop

0001364c <__aeabi_fcmplt>:
   1364c:	f84d ed08 	str.w	lr, [sp, #-8]!
   13650:	f7ff ffea 	bl	13628 <__aeabi_cfcmpeq>
   13654:	bf34      	ite	cc
   13656:	2001      	movcc	r0, #1
   13658:	2000      	movcs	r0, #0
   1365a:	f85d fb08 	ldr.w	pc, [sp], #8
   1365e:	bf00      	nop

00013660 <__aeabi_fcmple>:
   13660:	f84d ed08 	str.w	lr, [sp, #-8]!
   13664:	f7ff ffe0 	bl	13628 <__aeabi_cfcmpeq>
   13668:	bf94      	ite	ls
   1366a:	2001      	movls	r0, #1
   1366c:	2000      	movhi	r0, #0
   1366e:	f85d fb08 	ldr.w	pc, [sp], #8
   13672:	bf00      	nop

00013674 <__aeabi_fcmpge>:
   13674:	f84d ed08 	str.w	lr, [sp, #-8]!
   13678:	f7ff ffd2 	bl	13620 <__aeabi_cfrcmple>
   1367c:	bf94      	ite	ls
   1367e:	2001      	movls	r0, #1
   13680:	2000      	movhi	r0, #0
   13682:	f85d fb08 	ldr.w	pc, [sp], #8
   13686:	bf00      	nop

00013688 <__aeabi_fcmpgt>:
   13688:	f84d ed08 	str.w	lr, [sp, #-8]!
   1368c:	f7ff ffc8 	bl	13620 <__aeabi_cfrcmple>
   13690:	bf34      	ite	cc
   13692:	2001      	movcc	r0, #1
   13694:	2000      	movcs	r0, #0
   13696:	f85d fb08 	ldr.w	pc, [sp], #8
   1369a:	bf00      	nop

0001369c <__aeabi_f2iz>:
   1369c:	ea4f 0240 	mov.w	r2, r0, lsl #1
   136a0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   136a4:	d30f      	bcc.n	136c6 <__aeabi_f2iz+0x2a>
   136a6:	f04f 039e 	mov.w	r3, #158	; 0x9e
   136aa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   136ae:	d90d      	bls.n	136cc <__aeabi_f2iz+0x30>
   136b0:	ea4f 2300 	mov.w	r3, r0, lsl #8
   136b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   136b8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   136bc:	fa23 f002 	lsr.w	r0, r3, r2
   136c0:	bf18      	it	ne
   136c2:	4240      	negne	r0, r0
   136c4:	4770      	bx	lr
   136c6:	f04f 0000 	mov.w	r0, #0
   136ca:	4770      	bx	lr
   136cc:	f112 0f61 	cmn.w	r2, #97	; 0x61
   136d0:	d101      	bne.n	136d6 <__aeabi_f2iz+0x3a>
   136d2:	0242      	lsls	r2, r0, #9
   136d4:	d105      	bne.n	136e2 <__aeabi_f2iz+0x46>
   136d6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   136da:	bf08      	it	eq
   136dc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   136e0:	4770      	bx	lr
   136e2:	f04f 0000 	mov.w	r0, #0
   136e6:	4770      	bx	lr

000136e8 <memcpy>:
   136e8:	2a0f      	cmp	r2, #15
   136ea:	b4f0      	push	{r4, r5, r6, r7}
   136ec:	d945      	bls.n	1377a <memcpy+0x92>
   136ee:	ea40 0301 	orr.w	r3, r0, r1
   136f2:	079b      	lsls	r3, r3, #30
   136f4:	d145      	bne.n	13782 <memcpy+0x9a>
   136f6:	f1a2 0710 	sub.w	r7, r2, #16
   136fa:	460c      	mov	r4, r1
   136fc:	4603      	mov	r3, r0
   136fe:	093f      	lsrs	r7, r7, #4
   13700:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   13704:	3610      	adds	r6, #16
   13706:	6825      	ldr	r5, [r4, #0]
   13708:	3310      	adds	r3, #16
   1370a:	3410      	adds	r4, #16
   1370c:	f843 5c10 	str.w	r5, [r3, #-16]
   13710:	f854 5c0c 	ldr.w	r5, [r4, #-12]
   13714:	f843 5c0c 	str.w	r5, [r3, #-12]
   13718:	f854 5c08 	ldr.w	r5, [r4, #-8]
   1371c:	f843 5c08 	str.w	r5, [r3, #-8]
   13720:	f854 5c04 	ldr.w	r5, [r4, #-4]
   13724:	f843 5c04 	str.w	r5, [r3, #-4]
   13728:	42b3      	cmp	r3, r6
   1372a:	d1ec      	bne.n	13706 <memcpy+0x1e>
   1372c:	1c7b      	adds	r3, r7, #1
   1372e:	f002 0c0f 	and.w	ip, r2, #15
   13732:	f1bc 0f03 	cmp.w	ip, #3
   13736:	ea4f 1303 	mov.w	r3, r3, lsl #4
   1373a:	4419      	add	r1, r3
   1373c:	4403      	add	r3, r0
   1373e:	d922      	bls.n	13786 <memcpy+0x9e>
   13740:	460e      	mov	r6, r1
   13742:	461d      	mov	r5, r3
   13744:	4664      	mov	r4, ip
   13746:	f856 7b04 	ldr.w	r7, [r6], #4
   1374a:	3c04      	subs	r4, #4
   1374c:	2c03      	cmp	r4, #3
   1374e:	f845 7b04 	str.w	r7, [r5], #4
   13752:	d8f8      	bhi.n	13746 <memcpy+0x5e>
   13754:	f1ac 0404 	sub.w	r4, ip, #4
   13758:	f002 0203 	and.w	r2, r2, #3
   1375c:	f024 0403 	bic.w	r4, r4, #3
   13760:	3404      	adds	r4, #4
   13762:	4423      	add	r3, r4
   13764:	4421      	add	r1, r4
   13766:	b132      	cbz	r2, 13776 <memcpy+0x8e>
   13768:	440a      	add	r2, r1
   1376a:	f811 4b01 	ldrb.w	r4, [r1], #1
   1376e:	4291      	cmp	r1, r2
   13770:	f803 4b01 	strb.w	r4, [r3], #1
   13774:	d1f9      	bne.n	1376a <memcpy+0x82>
   13776:	bcf0      	pop	{r4, r5, r6, r7}
   13778:	4770      	bx	lr
   1377a:	4603      	mov	r3, r0
   1377c:	2a00      	cmp	r2, #0
   1377e:	d1f3      	bne.n	13768 <memcpy+0x80>
   13780:	e7f9      	b.n	13776 <memcpy+0x8e>
   13782:	4603      	mov	r3, r0
   13784:	e7f0      	b.n	13768 <memcpy+0x80>
   13786:	4662      	mov	r2, ip
   13788:	2a00      	cmp	r2, #0
   1378a:	d1ed      	bne.n	13768 <memcpy+0x80>
   1378c:	e7f3      	b.n	13776 <memcpy+0x8e>
   1378e:	bf00      	nop

00013790 <memset>:
   13790:	0783      	lsls	r3, r0, #30
   13792:	b4f0      	push	{r4, r5, r6, r7}
   13794:	d048      	beq.n	13828 <memset+0x98>
   13796:	1e54      	subs	r4, r2, #1
   13798:	2a00      	cmp	r2, #0
   1379a:	d043      	beq.n	13824 <memset+0x94>
   1379c:	b2cd      	uxtb	r5, r1
   1379e:	4603      	mov	r3, r0
   137a0:	e002      	b.n	137a8 <memset+0x18>
   137a2:	2c00      	cmp	r4, #0
   137a4:	d03e      	beq.n	13824 <memset+0x94>
   137a6:	4614      	mov	r4, r2
   137a8:	f803 5b01 	strb.w	r5, [r3], #1
   137ac:	f013 0f03 	tst.w	r3, #3
   137b0:	f104 32ff 	add.w	r2, r4, #4294967295
   137b4:	d1f5      	bne.n	137a2 <memset+0x12>
   137b6:	2c03      	cmp	r4, #3
   137b8:	d92d      	bls.n	13816 <memset+0x86>
   137ba:	b2cd      	uxtb	r5, r1
   137bc:	2c0f      	cmp	r4, #15
   137be:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   137c2:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   137c6:	d918      	bls.n	137fa <memset+0x6a>
   137c8:	f1a4 0710 	sub.w	r7, r4, #16
   137cc:	f103 0610 	add.w	r6, r3, #16
   137d0:	461a      	mov	r2, r3
   137d2:	093f      	lsrs	r7, r7, #4
   137d4:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   137d8:	6015      	str	r5, [r2, #0]
   137da:	3210      	adds	r2, #16
   137dc:	f842 5c0c 	str.w	r5, [r2, #-12]
   137e0:	f842 5c08 	str.w	r5, [r2, #-8]
   137e4:	f842 5c04 	str.w	r5, [r2, #-4]
   137e8:	42b2      	cmp	r2, r6
   137ea:	d1f5      	bne.n	137d8 <memset+0x48>
   137ec:	f004 040f 	and.w	r4, r4, #15
   137f0:	3701      	adds	r7, #1
   137f2:	2c03      	cmp	r4, #3
   137f4:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   137f8:	d90d      	bls.n	13816 <memset+0x86>
   137fa:	461e      	mov	r6, r3
   137fc:	4622      	mov	r2, r4
   137fe:	3a04      	subs	r2, #4
   13800:	f846 5b04 	str.w	r5, [r6], #4
   13804:	2a03      	cmp	r2, #3
   13806:	d8fa      	bhi.n	137fe <memset+0x6e>
   13808:	1f22      	subs	r2, r4, #4
   1380a:	f004 0403 	and.w	r4, r4, #3
   1380e:	f022 0203 	bic.w	r2, r2, #3
   13812:	3204      	adds	r2, #4
   13814:	4413      	add	r3, r2
   13816:	b12c      	cbz	r4, 13824 <memset+0x94>
   13818:	b2c9      	uxtb	r1, r1
   1381a:	441c      	add	r4, r3
   1381c:	f803 1b01 	strb.w	r1, [r3], #1
   13820:	42a3      	cmp	r3, r4
   13822:	d1fb      	bne.n	1381c <memset+0x8c>
   13824:	bcf0      	pop	{r4, r5, r6, r7}
   13826:	4770      	bx	lr
   13828:	4614      	mov	r4, r2
   1382a:	4603      	mov	r3, r0
   1382c:	e7c3      	b.n	137b6 <memset+0x26>
   1382e:	bf00      	nop

00013830 <strncpy>:
   13830:	ea40 0301 	orr.w	r3, r0, r1
   13834:	079b      	lsls	r3, r3, #30
   13836:	b470      	push	{r4, r5, r6}
   13838:	d12b      	bne.n	13892 <strncpy+0x62>
   1383a:	2a03      	cmp	r2, #3
   1383c:	bf84      	itt	hi
   1383e:	460b      	movhi	r3, r1
   13840:	4605      	movhi	r5, r0
   13842:	d926      	bls.n	13892 <strncpy+0x62>
   13844:	4619      	mov	r1, r3
   13846:	f853 4b04 	ldr.w	r4, [r3], #4
   1384a:	f1a4 3601 	sub.w	r6, r4, #16843009	; 0x1010101
   1384e:	ea26 0604 	bic.w	r6, r6, r4
   13852:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
   13856:	d105      	bne.n	13864 <strncpy+0x34>
   13858:	3a04      	subs	r2, #4
   1385a:	f845 4b04 	str.w	r4, [r5], #4
   1385e:	2a03      	cmp	r2, #3
   13860:	4619      	mov	r1, r3
   13862:	d8ef      	bhi.n	13844 <strncpy+0x14>
   13864:	b19a      	cbz	r2, 1388e <strncpy+0x5e>
   13866:	780c      	ldrb	r4, [r1, #0]
   13868:	3a01      	subs	r2, #1
   1386a:	1c6b      	adds	r3, r5, #1
   1386c:	702c      	strb	r4, [r5, #0]
   1386e:	b13c      	cbz	r4, 13880 <strncpy+0x50>
   13870:	b16a      	cbz	r2, 1388e <strncpy+0x5e>
   13872:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   13876:	3a01      	subs	r2, #1
   13878:	f803 4b01 	strb.w	r4, [r3], #1
   1387c:	2c00      	cmp	r4, #0
   1387e:	d1f7      	bne.n	13870 <strncpy+0x40>
   13880:	b12a      	cbz	r2, 1388e <strncpy+0x5e>
   13882:	441a      	add	r2, r3
   13884:	2100      	movs	r1, #0
   13886:	f803 1b01 	strb.w	r1, [r3], #1
   1388a:	4293      	cmp	r3, r2
   1388c:	d1fb      	bne.n	13886 <strncpy+0x56>
   1388e:	bc70      	pop	{r4, r5, r6}
   13890:	4770      	bx	lr
   13892:	4605      	mov	r5, r0
   13894:	e7e6      	b.n	13864 <strncpy+0x34>
   13896:	bf00      	nop

00013898 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:	

/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
   13898:	2100      	movs	r1, #0
  b	LoopCopyDataInit
   1389a:	e003      	b.n	138a4 <LoopCopyDataInit>

0001389c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
   1389c:	4b0a      	ldr	r3, [pc, #40]	; (138c8 <LoopFillZerobss+0x10>)
	ldr	r3, [r3, r1]
   1389e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
   138a0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
   138a2:	3104      	adds	r1, #4

000138a4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
	ldr	r0, =_sdata
   138a4:	4809      	ldr	r0, [pc, #36]	; (138cc <LoopFillZerobss+0x14>)
	ldr	r3, =_edata
   138a6:	4b0a      	ldr	r3, [pc, #40]	; (138d0 <LoopFillZerobss+0x18>)
	adds	r2, r0, r1
   138a8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
   138aa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
   138ac:	d3f6      	bcc.n	1389c <CopyDataInit>
	ldr	r2, =_sbss
   138ae:	4a09      	ldr	r2, [pc, #36]	; (138d4 <LoopFillZerobss+0x1c>)
	b	LoopFillZerobss
   138b0:	e002      	b.n	138b8 <LoopFillZerobss>

000138b2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
	movs	r3, #0
   138b2:	2300      	movs	r3, #0
	str	r3, [r2], #4
   138b4:	f842 3b04 	str.w	r3, [r2], #4

000138b8 <LoopFillZerobss>:
    
LoopFillZerobss:
	ldr	r3, = _ebss
   138b8:	4b07      	ldr	r3, [pc, #28]	; (138d8 <LoopFillZerobss+0x20>)
	cmp	r2, r3
   138ba:	429a      	cmp	r2, r3
	bcc	FillZerobss
   138bc:	d3f9      	bcc.n	138b2 <FillZerobss>
/* Call the clock system intitialization function.*/
  bl  SystemInit 	
   138be:	f7ec fd3d 	bl	33c <SystemInit>
/* Call the application's entry point.*/
	bl	main
   138c2:	f7fe fe8f 	bl	125e4 <main>
	bx	lr    
   138c6:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
   138c8:	000139d0 	.word	0x000139d0
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4
    
LoopCopyDataInit:
	ldr	r0, =_sdata
   138cc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
   138d0:	200001a0 	.word	0x200001a0
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
   138d4:	200001a0 	.word	0x200001a0
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4
    
LoopFillZerobss:
	ldr	r3, = _ebss
   138d8:	2004be6c 	.word	0x2004be6c

000138dc <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
   138dc:	e7fe      	b.n	138dc <ADC1_2_IRQHandler>
   138de:	0000      	movs	r0, r0
   138e0:	00000031 	.word	0x00000031
   138e4:	00000032 	.word	0x00000032
   138e8:	00000033 	.word	0x00000033
   138ec:	00000034 	.word	0x00000034
   138f0:	00000035 	.word	0x00000035
   138f4:	00000036 	.word	0x00000036
   138f8:	00000037 	.word	0x00000037
   138fc:	00000038 	.word	0x00000038
   13900:	00000039 	.word	0x00000039
   13904:	00003031 	.word	0x00003031
   13908:	00003131 	.word	0x00003131
   1390c:	00003231 	.word	0x00003231
   13910:	00003331 	.word	0x00003331
   13914:	454c4449 	.word	0x454c4449
   13918:	00000000 	.word	0x00000000

0001391c <ulKernelPriority>:
   1391c:	0000007f                                ....

00013920 <heapSTRUCT_SIZE>:
   13920:	00010010                                         ..

00013922 <version>:
   13922:	3d5a0001                                         ..

00013924 <utm_east0>:
   13924:	00093d5a                                Z=..

00013928 <utm_north0>:
   13928:	005875e6                                .uX.

0001392c <climb_pgain>:
   1392c:	bcf5c28f                                ....

00013930 <climb_igain>:
   13930:	3dcccccd                                ...=

00013934 <level_gaz>:
   13934:	3e9eb852                                R..>

00013938 <nav_east0>:
   13938:	00093d5a                                Z=..

0001393c <nav_north0>:
   1393c:	005875e6                                .uX.

00013940 <nb_waypoint>:
   13940:	00000007 33323130 37363534 42413938     ....0123456789AB
   13950:	46454443                                CDEF

00013954 <failsafe>:
	...
   13968:	20574246 746f6f42 20676e69 3a644924     FBW Booting $Id:
   13978:	69616d20 2c632e6e 2e312076 30322033      main.c,v 1.3 20
   13988:	312f3830 32322f30 3a393120 313a3134     08/10/22 19:41:1
   13998:	61632039 20657373 20707845 000d0a24     9 casse Exp $...
   139a8:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   139b8:	000d0a30 00000d0a 7373696d 61656420     0.......miss dea
   139c8:	6e696c64 000d0a65                       dline...
