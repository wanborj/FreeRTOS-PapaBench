
main.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:
       0:	00 50 05 20 69 38 01 00 ad 38 01 00 ad 38 01 00     .P. i8...8...8..
      10:	ad 38 01 00 ad 38 01 00 ad 38 01 00 00 00 00 00     .8...8...8......
	...
      2c:	f1 45 00 00 ad 38 01 00 00 00 00 00 fd 46 00 00     .E...8.......F..
      3c:	39 47 00 00 ad 38 01 00 ad 38 01 00 ad 38 01 00     9G...8...8...8..
      4c:	ad 38 01 00 ad 38 01 00 ad 38 01 00 ad 38 01 00     .8...8...8...8..
      5c:	ad 38 01 00 ad 38 01 00 ad 38 01 00 ad 38 01 00     .8...8...8...8..
      6c:	ad 38 01 00 ad 38 01 00 ad 38 01 00 ad 38 01 00     .8...8...8...8..
      7c:	ad 38 01 00 ad 38 01 00 ad 38 01 00 ad 38 01 00     .8...8...8...8..
      8c:	ad 38 01 00 ad 38 01 00 ad 38 01 00 ad 38 01 00     .8...8...8...8..
      9c:	ad 38 01 00 ad 38 01 00 ad 38 01 00 ad 38 01 00     .8...8...8...8..
      ac:	ad 38 01 00 ad 38 01 00 ad 38 01 00 ad 38 01 00     .8...8...8...8..
      bc:	ad 38 01 00 ad 38 01 00 ad 38 01 00 ad 38 01 00     .8...8...8...8..
      cc:	ad 38 01 00 ad 38 01 00 ad 38 01 00 ad 38 01 00     .8...8...8...8..
      dc:	ad 38 01 00 ad 38 01 00 ad 38 01 00 ad 38 01 00     .8...8...8...8..
	...
     108:	5f f8 08 f1                                         _...

0000010c <__get_PSP>:
 * Return the actual process stack pointer
 */
uint32_t __get_PSP(void) __attribute__( ( naked ) );
uint32_t __get_PSP(void)
{
  uint32_t result=0;
     10c:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, psp\n\t"
     10e:	f3ef 8309 	mrs	r3, PSP
     112:	4618      	mov	r0, r3
     114:	4770      	bx	lr
     116:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     118:	4623      	mov	r3, r4
}
     11a:	4618      	mov	r0, r3

0000011c <__set_PSP>:
 * Assign the value ProcessStackPointer to the MSP
 * (process stack pointer) Cortex processor register
 */
void __set_PSP(uint32_t topOfProcStack) __attribute__( ( naked ) );
void __set_PSP(uint32_t topOfProcStack)
{
     11c:	4603      	mov	r3, r0
  __ASM volatile ("MSR psp, %0\n\t"
     11e:	f383 8809 	msr	PSP, r3
     122:	4770      	bx	lr

00000124 <__get_MSP>:
 * Cortex processor register
 */
uint32_t __get_MSP(void) __attribute__( ( naked ) );
uint32_t __get_MSP(void)
{
  uint32_t result=0;
     124:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, msp\n\t"
     126:	f3ef 8308 	mrs	r3, MSP
     12a:	4618      	mov	r0, r3
     12c:	4770      	bx	lr
     12e:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     130:	4623      	mov	r3, r4
}
     132:	4618      	mov	r0, r3

00000134 <__set_MSP>:
 * Assign the value mainStackPointer to the MSP
 * (main stack pointer) Cortex processor register
 */
void __set_MSP(uint32_t topOfMainStack) __attribute__( ( naked ) );
void __set_MSP(uint32_t topOfMainStack)
{
     134:	4603      	mov	r3, r0
  __ASM volatile ("MSR msp, %0\n\t"
     136:	f383 8808 	msr	MSP, r3
     13a:	4770      	bx	lr

0000013c <__get_BASEPRI>:
 * @return BasePriority
 *
 * Return the content of the base priority register
 */
uint32_t __get_BASEPRI(void)
{
     13c:	b480      	push	{r7}
     13e:	b083      	sub	sp, #12
     140:	af00      	add	r7, sp, #0
  uint32_t result=0;
     142:	2300      	movs	r3, #0
     144:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
     146:	f3ef 8312 	mrs	r3, BASEPRI_MAX
     14a:	607b      	str	r3, [r7, #4]
  return(result);
     14c:	687b      	ldr	r3, [r7, #4]
}
     14e:	4618      	mov	r0, r3
     150:	370c      	adds	r7, #12
     152:	46bd      	mov	sp, r7
     154:	f85d 7b04 	ldr.w	r7, [sp], #4
     158:	4770      	bx	lr
     15a:	bf00      	nop

0000015c <__set_BASEPRI>:
 * @param  basePri  BasePriority
 *
 * Set the base priority register
 */
void __set_BASEPRI(uint32_t value)
{
     15c:	b480      	push	{r7}
     15e:	b083      	sub	sp, #12
     160:	af00      	add	r7, sp, #0
     162:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) );
     164:	687b      	ldr	r3, [r7, #4]
     166:	f383 8811 	msr	BASEPRI, r3
}
     16a:	370c      	adds	r7, #12
     16c:	46bd      	mov	sp, r7
     16e:	f85d 7b04 	ldr.w	r7, [sp], #4
     172:	4770      	bx	lr

00000174 <__get_PRIMASK>:
 * @return PriMask
 *
 * Return state of the priority mask bit from the priority mask register
 */
uint32_t __get_PRIMASK(void)
{
     174:	b480      	push	{r7}
     176:	b083      	sub	sp, #12
     178:	af00      	add	r7, sp, #0
  uint32_t result=0;
     17a:	2300      	movs	r3, #0
     17c:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     17e:	f3ef 8310 	mrs	r3, PRIMASK
     182:	607b      	str	r3, [r7, #4]
  return(result);
     184:	687b      	ldr	r3, [r7, #4]
}
     186:	4618      	mov	r0, r3
     188:	370c      	adds	r7, #12
     18a:	46bd      	mov	sp, r7
     18c:	f85d 7b04 	ldr.w	r7, [sp], #4
     190:	4770      	bx	lr
     192:	bf00      	nop

00000194 <__set_PRIMASK>:
 * @param  priMask  PriMask
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
     194:	b480      	push	{r7}
     196:	b083      	sub	sp, #12
     198:	af00      	add	r7, sp, #0
     19a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	f383 8810 	msr	PRIMASK, r3
}
     1a2:	370c      	adds	r7, #12
     1a4:	46bd      	mov	sp, r7
     1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
     1aa:	4770      	bx	lr

000001ac <__get_FAULTMASK>:
 * @return FaultMask
 *
 * Return the content of the fault mask register
 */
uint32_t __get_FAULTMASK(void)
{
     1ac:	b480      	push	{r7}
     1ae:	b083      	sub	sp, #12
     1b0:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1b2:	2300      	movs	r3, #0
     1b4:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
     1b6:	f3ef 8313 	mrs	r3, FAULTMASK
     1ba:	607b      	str	r3, [r7, #4]
  return(result);
     1bc:	687b      	ldr	r3, [r7, #4]
}
     1be:	4618      	mov	r0, r3
     1c0:	370c      	adds	r7, #12
     1c2:	46bd      	mov	sp, r7
     1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     1c8:	4770      	bx	lr
     1ca:	bf00      	nop

000001cc <__set_FAULTMASK>:
 * @param  faultMask  faultMask value
 *
 * Set the fault mask register
 */
void __set_FAULTMASK(uint32_t faultMask)
{
     1cc:	b480      	push	{r7}
     1ce:	b083      	sub	sp, #12
     1d0:	af00      	add	r7, sp, #0
     1d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) );
     1d4:	687b      	ldr	r3, [r7, #4]
     1d6:	f383 8813 	msr	FAULTMASK, r3
}
     1da:	370c      	adds	r7, #12
     1dc:	46bd      	mov	sp, r7
     1de:	f85d 7b04 	ldr.w	r7, [sp], #4
     1e2:	4770      	bx	lr

000001e4 <__get_CONTROL>:
*  @return Control value
 *
 * Return the content of the control register
 */
uint32_t __get_CONTROL(void)
{
     1e4:	b480      	push	{r7}
     1e6:	b083      	sub	sp, #12
     1e8:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1ea:	2300      	movs	r3, #0
     1ec:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, control" : "=r" (result) );
     1ee:	f3ef 8314 	mrs	r3, CONTROL
     1f2:	607b      	str	r3, [r7, #4]
  return(result);
     1f4:	687b      	ldr	r3, [r7, #4]
}
     1f6:	4618      	mov	r0, r3
     1f8:	370c      	adds	r7, #12
     1fa:	46bd      	mov	sp, r7
     1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     200:	4770      	bx	lr
     202:	bf00      	nop

00000204 <__set_CONTROL>:
 * @param  control  Control value
 *
 * Set the control register
 */
void __set_CONTROL(uint32_t control)
{
     204:	b480      	push	{r7}
     206:	b083      	sub	sp, #12
     208:	af00      	add	r7, sp, #0
     20a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR control, %0" : : "r" (control) );
     20c:	687b      	ldr	r3, [r7, #4]
     20e:	f383 8814 	msr	CONTROL, r3
}
     212:	370c      	adds	r7, #12
     214:	46bd      	mov	sp, r7
     216:	f85d 7b04 	ldr.w	r7, [sp], #4
     21a:	4770      	bx	lr

0000021c <__REV>:
 * @return        reversed value
 *
 * Reverse byte order in integer value
 */
uint32_t __REV(uint32_t value)
{
     21c:	b480      	push	{r7}
     21e:	b085      	sub	sp, #20
     220:	af00      	add	r7, sp, #0
     222:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     224:	2300      	movs	r3, #0
     226:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
     228:	687b      	ldr	r3, [r7, #4]
     22a:	ba1b      	rev	r3, r3
     22c:	60fb      	str	r3, [r7, #12]
  return(result);
     22e:	68fb      	ldr	r3, [r7, #12]
}
     230:	4618      	mov	r0, r3
     232:	3714      	adds	r7, #20
     234:	46bd      	mov	sp, r7
     236:	f85d 7b04 	ldr.w	r7, [sp], #4
     23a:	4770      	bx	lr

0000023c <__REV16>:
 * @return        reversed value
 *
 * Reverse byte order in unsigned short value
 */
uint32_t __REV16(uint16_t value)
{
     23c:	b480      	push	{r7}
     23e:	b085      	sub	sp, #20
     240:	af00      	add	r7, sp, #0
     242:	4603      	mov	r3, r0
     244:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     246:	2300      	movs	r3, #0
     248:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
     24a:	88fb      	ldrh	r3, [r7, #6]
     24c:	ba5b      	rev16	r3, r3
     24e:	60fb      	str	r3, [r7, #12]
  return(result);
     250:	68fb      	ldr	r3, [r7, #12]
}
     252:	4618      	mov	r0, r3
     254:	3714      	adds	r7, #20
     256:	46bd      	mov	sp, r7
     258:	f85d 7b04 	ldr.w	r7, [sp], #4
     25c:	4770      	bx	lr
     25e:	bf00      	nop

00000260 <__REVSH>:
 * @return        reversed value
 *
 * Reverse byte order in signed short value with sign extension to integer
 */
int32_t __REVSH(int16_t value)
{
     260:	b480      	push	{r7}
     262:	b085      	sub	sp, #20
     264:	af00      	add	r7, sp, #0
     266:	4603      	mov	r3, r0
     268:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     26a:	2300      	movs	r3, #0
     26c:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
     26e:	88fb      	ldrh	r3, [r7, #6]
     270:	badb      	revsh	r3, r3
     272:	60fb      	str	r3, [r7, #12]
  return(result);
     274:	68fb      	ldr	r3, [r7, #12]
}
     276:	4618      	mov	r0, r3
     278:	3714      	adds	r7, #20
     27a:	46bd      	mov	sp, r7
     27c:	f85d 7b04 	ldr.w	r7, [sp], #4
     280:	4770      	bx	lr
     282:	bf00      	nop

00000284 <__RBIT>:
 * @return        reversed value
 *
 * Reverse bit order of value
 */
uint32_t __RBIT(uint32_t value)
{
     284:	b480      	push	{r7}
     286:	b085      	sub	sp, #20
     288:	af00      	add	r7, sp, #0
     28a:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     28c:	2300      	movs	r3, #0
     28e:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
     290:	687b      	ldr	r3, [r7, #4]
     292:	fa93 f3a3 	rbit	r3, r3
     296:	60fb      	str	r3, [r7, #12]
   return(result);
     298:	68fb      	ldr	r3, [r7, #12]
}
     29a:	4618      	mov	r0, r3
     29c:	3714      	adds	r7, #20
     29e:	46bd      	mov	sp, r7
     2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
     2a4:	4770      	bx	lr
     2a6:	bf00      	nop

000002a8 <__LDREXB>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 8 bit value
 */
uint8_t __LDREXB(uint8_t *addr)
{
     2a8:	b480      	push	{r7}
     2aa:	b085      	sub	sp, #20
     2ac:	af00      	add	r7, sp, #0
     2ae:	6078      	str	r0, [r7, #4]
    uint8_t result=0;
     2b0:	2300      	movs	r3, #0
     2b2:	73fb      	strb	r3, [r7, #15]

   __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) );
     2b4:	687b      	ldr	r3, [r7, #4]
     2b6:	e8d3 3f4f 	ldrexb	r3, [r3]
     2ba:	73fb      	strb	r3, [r7, #15]
   return(result);
     2bc:	7bfb      	ldrb	r3, [r7, #15]
}
     2be:	4618      	mov	r0, r3
     2c0:	3714      	adds	r7, #20
     2c2:	46bd      	mov	sp, r7
     2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     2c8:	4770      	bx	lr
     2ca:	bf00      	nop

000002cc <__LDREXH>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 16 bit values
 */
uint16_t __LDREXH(uint16_t *addr)
{
     2cc:	b480      	push	{r7}
     2ce:	b085      	sub	sp, #20
     2d0:	af00      	add	r7, sp, #0
     2d2:	6078      	str	r0, [r7, #4]
    uint16_t result=0;
     2d4:	2300      	movs	r3, #0
     2d6:	81fb      	strh	r3, [r7, #14]

   __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) );
     2d8:	687b      	ldr	r3, [r7, #4]
     2da:	e8d3 3f5f 	ldrexh	r3, [r3]
     2de:	81fb      	strh	r3, [r7, #14]
   return(result);
     2e0:	89fb      	ldrh	r3, [r7, #14]
}
     2e2:	4618      	mov	r0, r3
     2e4:	3714      	adds	r7, #20
     2e6:	46bd      	mov	sp, r7
     2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
     2ec:	4770      	bx	lr
     2ee:	bf00      	nop

000002f0 <__LDREXW>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 32 bit values
 */
uint32_t __LDREXW(uint32_t *addr)
{
     2f0:	b480      	push	{r7}
     2f2:	b085      	sub	sp, #20
     2f4:	af00      	add	r7, sp, #0
     2f6:	6078      	str	r0, [r7, #4]
    uint32_t result=0;
     2f8:	2300      	movs	r3, #0
     2fa:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     2fc:	687b      	ldr	r3, [r7, #4]
     2fe:	e853 3f00 	ldrex	r3, [r3]
     302:	60fb      	str	r3, [r7, #12]
   return(result);
     304:	68fb      	ldr	r3, [r7, #12]
}
     306:	4618      	mov	r0, r3
     308:	3714      	adds	r7, #20
     30a:	46bd      	mov	sp, r7
     30c:	f85d 7b04 	ldr.w	r7, [sp], #4
     310:	4770      	bx	lr
     312:	bf00      	nop

00000314 <__STREXW>:
 * @return        successful / failed
 *
 * Exclusive STR command for 32 bit values
 */
uint32_t __STREXW(uint32_t value, uint32_t *addr)
{
     314:	b480      	push	{r7}
     316:	b085      	sub	sp, #20
     318:	af00      	add	r7, sp, #0
     31a:	6078      	str	r0, [r7, #4]
     31c:	6039      	str	r1, [r7, #0]
   uint32_t result=0;
     31e:	2300      	movs	r3, #0
     320:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
     322:	683b      	ldr	r3, [r7, #0]
     324:	687a      	ldr	r2, [r7, #4]
     326:	e843 2300 	strex	r3, r2, [r3]
     32a:	60fb      	str	r3, [r7, #12]
   return(result);
     32c:	68fb      	ldr	r3, [r7, #12]
}
     32e:	4618      	mov	r0, r3
     330:	3714      	adds	r7, #20
     332:	46bd      	mov	sp, r7
     334:	f85d 7b04 	ldr.w	r7, [sp], #4
     338:	4770      	bx	lr
     33a:	bf00      	nop

0000033c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
     33c:	b580      	push	{r7, lr}
     33e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     344:	f2c4 0302 	movt	r3, #16386	; 0x4002
     348:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     34c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     350:	6812      	ldr	r2, [r2, #0]
     352:	f042 0201 	orr.w	r2, r2, #1
     356:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     358:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     35c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     360:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     364:	f2c4 0302 	movt	r3, #16386	; 0x4002
     368:	6859      	ldr	r1, [r3, #4]
     36a:	2300      	movs	r3, #0
     36c:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     370:	400b      	ands	r3, r1
     372:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     378:	f2c4 0302 	movt	r3, #16386	; 0x4002
     37c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     380:	f2c4 0202 	movt	r2, #16386	; 0x4002
     384:	6812      	ldr	r2, [r2, #0]
     386:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     38a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     38e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     394:	f2c4 0302 	movt	r3, #16386	; 0x4002
     398:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     39c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3a0:	6812      	ldr	r2, [r2, #0]
     3a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     3a6:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     3a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     3b4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3b8:	6852      	ldr	r2, [r2, #4]
     3ba:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     3be:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     3c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3c8:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     3cc:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
     3ce:	f000 f8a7 	bl	520 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
     3d2:	f44f 436d 	mov.w	r3, #60672	; 0xed00
     3d6:	f2ce 0300 	movt	r3, #57344	; 0xe000
     3da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
     3de:	609a      	str	r2, [r3, #8]
#endif
}
     3e0:	bd80      	pop	{r7, pc}
     3e2:	bf00      	nop

000003e4 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
     3e4:	b480      	push	{r7}
     3e6:	b085      	sub	sp, #20
     3e8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
     3ea:	2300      	movs	r3, #0
     3ec:	60fb      	str	r3, [r7, #12]
     3ee:	2300      	movs	r3, #0
     3f0:	60bb      	str	r3, [r7, #8]
     3f2:	2300      	movs	r3, #0
     3f4:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
     3f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3fe:	685b      	ldr	r3, [r3, #4]
     400:	f003 030c 	and.w	r3, r3, #12
     404:	60fb      	str	r3, [r7, #12]

  switch (tmp)
     406:	68fb      	ldr	r3, [r7, #12]
     408:	2b04      	cmp	r3, #4
     40a:	d00d      	beq.n	428 <SystemCoreClockUpdate+0x44>
     40c:	2b08      	cmp	r3, #8
     40e:	d015      	beq.n	43c <SystemCoreClockUpdate+0x58>
     410:	2b00      	cmp	r3, #0
     412:	d15b      	bne.n	4cc <SystemCoreClockUpdate+0xe8>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
     414:	f240 0300 	movw	r3, #0
     418:	f2c2 0300 	movt	r3, #8192	; 0x2000
     41c:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     420:	f2c0 027a 	movt	r2, #122	; 0x7a
     424:	601a      	str	r2, [r3, #0]
      break;
     426:	e05b      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
     428:	f240 0300 	movw	r3, #0
     42c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     430:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     434:	f2c0 027a 	movt	r2, #122	; 0x7a
     438:	601a      	str	r2, [r3, #0]
      break;
     43a:	e051      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
     43c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     440:	f2c4 0302 	movt	r3, #16386	; 0x4002
     444:	685b      	ldr	r3, [r3, #4]
     446:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     44a:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
     44c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     450:	f2c4 0302 	movt	r3, #16386	; 0x4002
     454:	685b      	ldr	r3, [r3, #4]
     456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     45a:	607b      	str	r3, [r7, #4]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     45c:	68bb      	ldr	r3, [r7, #8]
     45e:	0c9b      	lsrs	r3, r3, #18
     460:	3302      	adds	r3, #2
     462:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00)
     464:	687b      	ldr	r3, [r7, #4]
     466:	2b00      	cmp	r3, #0
     468:	d10c      	bne.n	484 <SystemCoreClockUpdate+0xa0>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
     46a:	68ba      	ldr	r2, [r7, #8]
     46c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     470:	f2c0 033d 	movt	r3, #61	; 0x3d
     474:	fb03 f202 	mul.w	r2, r3, r2
     478:	f240 0300 	movw	r3, #0
     47c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     480:	601a      	str	r2, [r3, #0]
     482:	e022      	b.n	4ca <SystemCoreClockUpdate+0xe6>
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
     484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     488:	f2c4 0302 	movt	r3, #16386	; 0x4002
     48c:	685b      	ldr	r3, [r3, #4]
     48e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     492:	2b00      	cmp	r3, #0
     494:	d00c      	beq.n	4b0 <SystemCoreClockUpdate+0xcc>
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
     496:	68ba      	ldr	r2, [r7, #8]
     498:	f44f 6310 	mov.w	r3, #2304	; 0x900
     49c:	f2c0 033d 	movt	r3, #61	; 0x3d
     4a0:	fb03 f202 	mul.w	r2, r3, r2
     4a4:	f240 0300 	movw	r3, #0
     4a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4ac:	601a      	str	r2, [r3, #0]
     4ae:	e00c      	b.n	4ca <SystemCoreClockUpdate+0xe6>
        }
        else
        {
          SystemCoreClock = HSE_VALUE * pllmull;
     4b0:	68ba      	ldr	r2, [r7, #8]
     4b2:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     4b6:	f2c0 037a 	movt	r3, #122	; 0x7a
     4ba:	fb03 f202 	mul.w	r2, r3, r2
     4be:	f240 0300 	movw	r3, #0
     4c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4c6:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2;
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     4c8:	e00a      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
     4ca:	e009      	b.n	4e0 <SystemCoreClockUpdate+0xfc>

    default:
      SystemCoreClock = HSI_VALUE;
     4cc:	f240 0300 	movw	r3, #0
     4d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4d4:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     4d8:	f2c0 027a 	movt	r2, #122	; 0x7a
     4dc:	601a      	str	r2, [r3, #0]
      break;
     4de:	bf00      	nop
  }

  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
     4e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     4e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     4e8:	685b      	ldr	r3, [r3, #4]
     4ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     4ee:	091a      	lsrs	r2, r3, #4
     4f0:	f240 0304 	movw	r3, #4
     4f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4f8:	5c9b      	ldrb	r3, [r3, r2]
     4fa:	b2db      	uxtb	r3, r3
     4fc:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
     4fe:	f240 0300 	movw	r3, #0
     502:	f2c2 0300 	movt	r3, #8192	; 0x2000
     506:	681a      	ldr	r2, [r3, #0]
     508:	68fb      	ldr	r3, [r7, #12]
     50a:	40da      	lsrs	r2, r3
     50c:	f240 0300 	movw	r3, #0
     510:	f2c2 0300 	movt	r3, #8192	; 0x2000
     514:	601a      	str	r2, [r3, #0]
}
     516:	3714      	adds	r7, #20
     518:	46bd      	mov	sp, r7
     51a:	f85d 7b04 	ldr.w	r7, [sp], #4
     51e:	4770      	bx	lr

00000520 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
     520:	b580      	push	{r7, lr}
     522:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
     524:	f000 f802 	bl	52c <SetSysClockTo72>
#endif

 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */
}
     528:	bd80      	pop	{r7, pc}
     52a:	bf00      	nop

0000052c <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
     52c:	b480      	push	{r7}
     52e:	b083      	sub	sp, #12
     530:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
     532:	2300      	movs	r3, #0
     534:	607b      	str	r3, [r7, #4]
     536:	2300      	movs	r3, #0
     538:	603b      	str	r3, [r7, #0]

  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
     53a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     53e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     542:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     546:	f2c4 0202 	movt	r2, #16386	; 0x4002
     54a:	6812      	ldr	r2, [r2, #0]
     54c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     550:	601a      	str	r2, [r3, #0]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
     552:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     556:	f2c4 0302 	movt	r3, #16386	; 0x4002
     55a:	681b      	ldr	r3, [r3, #0]
     55c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     560:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
     562:	687b      	ldr	r3, [r7, #4]
     564:	3301      	adds	r3, #1
     566:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
     568:	683b      	ldr	r3, [r7, #0]
     56a:	2b00      	cmp	r3, #0
     56c:	d103      	bne.n	576 <SetSysClockTo72+0x4a>
     56e:	687b      	ldr	r3, [r7, #4]
     570:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     574:	d1ed      	bne.n	552 <SetSysClockTo72+0x26>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
     576:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     57a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     57e:	681b      	ldr	r3, [r3, #0]
     580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     584:	2b00      	cmp	r3, #0
     586:	d002      	beq.n	58e <SetSysClockTo72+0x62>
  {
    HSEStatus = (uint32_t)0x01;
     588:	2301      	movs	r3, #1
     58a:	603b      	str	r3, [r7, #0]
     58c:	e001      	b.n	592 <SetSysClockTo72+0x66>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
     58e:	2300      	movs	r3, #0
     590:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
     592:	683b      	ldr	r3, [r7, #0]
     594:	2b01      	cmp	r3, #1
     596:	f040 8094 	bne.w	6c2 <SetSysClockTo72+0x196>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
     59a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     59e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5a6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5aa:	6812      	ldr	r2, [r2, #0]
     5ac:	f042 0210 	orr.w	r2, r2, #16
     5b0:	601a      	str	r2, [r3, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
     5b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5be:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5c2:	6812      	ldr	r2, [r2, #0]
     5c4:	f022 0203 	bic.w	r2, r2, #3
     5c8:	601a      	str	r2, [r3, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;
     5ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5d6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5da:	6812      	ldr	r2, [r2, #0]
     5dc:	f042 0202 	orr.w	r2, r2, #2
     5e0:	601a      	str	r2, [r3, #0]


    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
     5e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     5ee:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5f2:	6852      	ldr	r2, [r2, #4]
     5f4:	605a      	str	r2, [r3, #4]

    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
     5f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     602:	f2c4 0202 	movt	r2, #16386	; 0x4002
     606:	6852      	ldr	r2, [r2, #4]
     608:	605a      	str	r2, [r3, #4]

    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
     60a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     60e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     612:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     616:	f2c4 0202 	movt	r2, #16386	; 0x4002
     61a:	6852      	ldr	r2, [r2, #4]
     61c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     620:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 |
                            RCC_CFGR_PLLMULL9);
#else
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
     622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     626:	f2c4 0302 	movt	r3, #16386	; 0x4002
     62a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     62e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     632:	6852      	ldr	r2, [r2, #4]
     634:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
     638:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
     63a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     63e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     642:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     646:	f2c4 0202 	movt	r2, #16386	; 0x4002
     64a:	6852      	ldr	r2, [r2, #4]
     64c:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
     650:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
     652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     656:	f2c4 0302 	movt	r3, #16386	; 0x4002
     65a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     65e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     662:	6812      	ldr	r2, [r2, #0]
     664:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     668:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
     66a:	bf00      	nop
     66c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     670:	f2c4 0302 	movt	r3, #16386	; 0x4002
     674:	681b      	ldr	r3, [r3, #0]
     676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
     67a:	2b00      	cmp	r3, #0
     67c:	d0f6      	beq.n	66c <SetSysClockTo72+0x140>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
     67e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     682:	f2c4 0302 	movt	r3, #16386	; 0x4002
     686:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     68a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     68e:	6852      	ldr	r2, [r2, #4]
     690:	f022 0203 	bic.w	r2, r2, #3
     694:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
     696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     69a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     69e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6a2:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6a6:	6852      	ldr	r2, [r2, #4]
     6a8:	f042 0202 	orr.w	r2, r2, #2
     6ac:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
     6ae:	bf00      	nop
     6b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6b8:	685b      	ldr	r3, [r3, #4]
     6ba:	f003 030c 	and.w	r3, r3, #12
     6be:	2b08      	cmp	r3, #8
     6c0:	d1f6      	bne.n	6b0 <SetSysClockTo72+0x184>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }
}
     6c2:	370c      	adds	r7, #12
     6c4:	46bd      	mov	sp, r7
     6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
     6ca:	4770      	bx	lr
     6cc:	000139a0 	.word	0x000139a0
     6d0:	20000000 	.word	0x20000000
     6d4:	200001a0 	.word	0x200001a0
     6d8:	200001a0 	.word	0x200001a0
     6dc:	2004be38 	.word	0x2004be38

000006e0 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
     6e0:	b480      	push	{r7}
     6e2:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     6e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6f0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6f4:	6812      	ldr	r2, [r2, #0]
     6f6:	f042 0201 	orr.w	r2, r2, #1
     6fa:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     6fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     700:	f2c4 0202 	movt	r2, #16386	; 0x4002
     704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     708:	f2c4 0302 	movt	r3, #16386	; 0x4002
     70c:	6859      	ldr	r1, [r3, #4]
     70e:	2300      	movs	r3, #0
     710:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     714:	400b      	ands	r3, r1
     716:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     718:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     71c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     720:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     724:	f2c4 0202 	movt	r2, #16386	; 0x4002
     728:	6812      	ldr	r2, [r2, #0]
     72a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     72e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     732:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     738:	f2c4 0302 	movt	r3, #16386	; 0x4002
     73c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     740:	f2c4 0202 	movt	r2, #16386	; 0x4002
     744:	6812      	ldr	r2, [r2, #0]
     746:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     74a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     74c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     750:	f2c4 0302 	movt	r3, #16386	; 0x4002
     754:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     758:	f2c4 0202 	movt	r2, #16386	; 0x4002
     75c:	6852      	ldr	r2, [r2, #4]
     75e:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     762:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     768:	f2c4 0302 	movt	r3, #16386	; 0x4002
     76c:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     770:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
     772:	46bd      	mov	sp, r7
     774:	f85d 7b04 	ldr.w	r7, [sp], #4
     778:	4770      	bx	lr
     77a:	bf00      	nop

0000077c <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
     77c:	b480      	push	{r7}
     77e:	b083      	sub	sp, #12
     780:	af00      	add	r7, sp, #0
     782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
     784:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     788:	f2c4 0302 	movt	r3, #16386	; 0x4002
     78c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     790:	f2c4 0202 	movt	r2, #16386	; 0x4002
     794:	6812      	ldr	r2, [r2, #0]
     796:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     79a:	601a      	str	r2, [r3, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
     79c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ac:	6812      	ldr	r2, [r2, #0]
     7ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     7b2:	601a      	str	r2, [r3, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
     7b4:	687b      	ldr	r3, [r7, #4]
     7b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
     7ba:	d003      	beq.n	7c4 <RCC_HSEConfig+0x48>
     7bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
     7c0:	d00d      	beq.n	7de <RCC_HSEConfig+0x62>
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
      break;

    default:
      break;
     7c2:	e019      	b.n	7f8 <RCC_HSEConfig+0x7c>
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
     7c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7d0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7d4:	6812      	ldr	r2, [r2, #0]
     7d6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     7da:	601a      	str	r2, [r3, #0]
      break;
     7dc:	e00c      	b.n	7f8 <RCC_HSEConfig+0x7c>

    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
     7de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7ea:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ee:	6812      	ldr	r2, [r2, #0]
     7f0:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
     7f4:	601a      	str	r2, [r3, #0]
      break;
     7f6:	bf00      	nop

    default:
      break;
  }
}
     7f8:	370c      	adds	r7, #12
     7fa:	46bd      	mov	sp, r7
     7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     800:	4770      	bx	lr
     802:	bf00      	nop

00000804 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
     804:	b580      	push	{r7, lr}
     806:	b082      	sub	sp, #8
     808:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
     80a:	2300      	movs	r3, #0
     80c:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
     80e:	2300      	movs	r3, #0
     810:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
     812:	2300      	movs	r3, #0
     814:	71bb      	strb	r3, [r7, #6]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
     816:	2031      	movs	r0, #49	; 0x31
     818:	f000 fba2 	bl	f60 <RCC_GetFlagStatus>
     81c:	4603      	mov	r3, r0
     81e:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;
     820:	683b      	ldr	r3, [r7, #0]
     822:	3301      	adds	r3, #1
     824:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
     826:	683b      	ldr	r3, [r7, #0]
     828:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     82c:	d002      	beq.n	834 <RCC_WaitForHSEStartUp+0x30>
     82e:	79bb      	ldrb	r3, [r7, #6]
     830:	2b00      	cmp	r3, #0
     832:	d0f0      	beq.n	816 <RCC_WaitForHSEStartUp+0x12>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
     834:	2031      	movs	r0, #49	; 0x31
     836:	f000 fb93 	bl	f60 <RCC_GetFlagStatus>
     83a:	4603      	mov	r3, r0
     83c:	2b00      	cmp	r3, #0
     83e:	d002      	beq.n	846 <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
     840:	2301      	movs	r3, #1
     842:	71fb      	strb	r3, [r7, #7]
     844:	e001      	b.n	84a <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
     846:	2300      	movs	r3, #0
     848:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
     84a:	79fb      	ldrb	r3, [r7, #7]
}
     84c:	4618      	mov	r0, r3
     84e:	3708      	adds	r7, #8
     850:	46bd      	mov	sp, r7
     852:	bd80      	pop	{r7, pc}

00000854 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *   This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
     854:	b480      	push	{r7}
     856:	b085      	sub	sp, #20
     858:	af00      	add	r7, sp, #0
     85a:	4603      	mov	r3, r0
     85c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
     85e:	2300      	movs	r3, #0
     860:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
     862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     866:	f2c4 0302 	movt	r3, #16386	; 0x4002
     86a:	681b      	ldr	r3, [r3, #0]
     86c:	60fb      	str	r3, [r7, #12]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
     86e:	68fb      	ldr	r3, [r7, #12]
     870:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
     874:	60fb      	str	r3, [r7, #12]
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
     876:	79fb      	ldrb	r3, [r7, #7]
     878:	00db      	lsls	r3, r3, #3
     87a:	68fa      	ldr	r2, [r7, #12]
     87c:	4313      	orrs	r3, r2
     87e:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CR = tmpreg;
     880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     884:	f2c4 0302 	movt	r3, #16386	; 0x4002
     888:	68fa      	ldr	r2, [r7, #12]
     88a:	601a      	str	r2, [r3, #0]
}
     88c:	3714      	adds	r7, #20
     88e:	46bd      	mov	sp, r7
     890:	f85d 7b04 	ldr.w	r7, [sp], #4
     894:	4770      	bx	lr
     896:	bf00      	nop

00000898 <RCC_HSICmd>:
  * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
  * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
     898:	b480      	push	{r7}
     89a:	b083      	sub	sp, #12
     89c:	af00      	add	r7, sp, #0
     89e:	4603      	mov	r3, r0
     8a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
     8a2:	2300      	movs	r3, #0
     8a4:	f2c4 2342 	movt	r3, #16962	; 0x4242
     8a8:	79fa      	ldrb	r2, [r7, #7]
     8aa:	601a      	str	r2, [r3, #0]
}
     8ac:	370c      	adds	r7, #12
     8ae:	46bd      	mov	sp, r7
     8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
     8b4:	4770      	bx	lr
     8b6:	bf00      	nop

000008b8 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
     8b8:	b480      	push	{r7}
     8ba:	b085      	sub	sp, #20
     8bc:	af00      	add	r7, sp, #0
     8be:	6078      	str	r0, [r7, #4]
     8c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
     8c2:	2300      	movs	r3, #0
     8c4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
     8c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ce:	685b      	ldr	r3, [r3, #4]
     8d0:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
     8d2:	68fb      	ldr	r3, [r7, #12]
     8d4:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
     8d8:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
     8da:	687a      	ldr	r2, [r7, #4]
     8dc:	683b      	ldr	r3, [r7, #0]
     8de:	4313      	orrs	r3, r2
     8e0:	68fa      	ldr	r2, [r7, #12]
     8e2:	4313      	orrs	r3, r2
     8e4:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     8e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ee:	68fa      	ldr	r2, [r7, #12]
     8f0:	605a      	str	r2, [r3, #4]
}
     8f2:	3714      	adds	r7, #20
     8f4:	46bd      	mov	sp, r7
     8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
     8fa:	4770      	bx	lr

000008fc <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
     8fc:	b480      	push	{r7}
     8fe:	b083      	sub	sp, #12
     900:	af00      	add	r7, sp, #0
     902:	4603      	mov	r3, r0
     904:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
     906:	2360      	movs	r3, #96	; 0x60
     908:	f2c4 2342 	movt	r3, #16962	; 0x4242
     90c:	79fa      	ldrb	r2, [r7, #7]
     90e:	601a      	str	r2, [r3, #0]
}
     910:	370c      	adds	r7, #12
     912:	46bd      	mov	sp, r7
     914:	f85d 7b04 	ldr.w	r7, [sp], #4
     918:	4770      	bx	lr
     91a:	bf00      	nop

0000091c <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
     91c:	b480      	push	{r7}
     91e:	b085      	sub	sp, #20
     920:	af00      	add	r7, sp, #0
     922:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     924:	2300      	movs	r3, #0
     926:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
     928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     92c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     930:	685b      	ldr	r3, [r3, #4]
     932:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
     934:	68fb      	ldr	r3, [r7, #12]
     936:	f023 0303 	bic.w	r3, r3, #3
     93a:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
     93c:	68fa      	ldr	r2, [r7, #12]
     93e:	687b      	ldr	r3, [r7, #4]
     940:	4313      	orrs	r3, r2
     942:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     948:	f2c4 0302 	movt	r3, #16386	; 0x4002
     94c:	68fa      	ldr	r2, [r7, #12]
     94e:	605a      	str	r2, [r3, #4]
}
     950:	3714      	adds	r7, #20
     952:	46bd      	mov	sp, r7
     954:	f85d 7b04 	ldr.w	r7, [sp], #4
     958:	4770      	bx	lr
     95a:	bf00      	nop

0000095c <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
     95c:	b480      	push	{r7}
     95e:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
     960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     964:	f2c4 0302 	movt	r3, #16386	; 0x4002
     968:	685b      	ldr	r3, [r3, #4]
     96a:	b2db      	uxtb	r3, r3
     96c:	f003 030c 	and.w	r3, r3, #12
     970:	b2db      	uxtb	r3, r3
}
     972:	4618      	mov	r0, r3
     974:	46bd      	mov	sp, r7
     976:	f85d 7b04 	ldr.w	r7, [sp], #4
     97a:	4770      	bx	lr

0000097c <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
     97c:	b480      	push	{r7}
     97e:	b085      	sub	sp, #20
     980:	af00      	add	r7, sp, #0
     982:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     984:	2300      	movs	r3, #0
     986:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
     988:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     98c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     990:	685b      	ldr	r3, [r3, #4]
     992:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
     994:	68fb      	ldr	r3, [r7, #12]
     996:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
     99a:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
     99c:	68fa      	ldr	r2, [r7, #12]
     99e:	687b      	ldr	r3, [r7, #4]
     9a0:	4313      	orrs	r3, r2
     9a2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ac:	68fa      	ldr	r2, [r7, #12]
     9ae:	605a      	str	r2, [r3, #4]
}
     9b0:	3714      	adds	r7, #20
     9b2:	46bd      	mov	sp, r7
     9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9b8:	4770      	bx	lr
     9ba:	bf00      	nop

000009bc <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
     9bc:	b480      	push	{r7}
     9be:	b085      	sub	sp, #20
     9c0:	af00      	add	r7, sp, #0
     9c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     9c4:	2300      	movs	r3, #0
     9c6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     9c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9d0:	685b      	ldr	r3, [r3, #4]
     9d2:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
     9d4:	68fb      	ldr	r3, [r7, #12]
     9d6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
     9da:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
     9dc:	68fa      	ldr	r2, [r7, #12]
     9de:	687b      	ldr	r3, [r7, #4]
     9e0:	4313      	orrs	r3, r2
     9e2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ec:	68fa      	ldr	r2, [r7, #12]
     9ee:	605a      	str	r2, [r3, #4]
}
     9f0:	3714      	adds	r7, #20
     9f2:	46bd      	mov	sp, r7
     9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9f8:	4770      	bx	lr
     9fa:	bf00      	nop

000009fc <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
     9fc:	b480      	push	{r7}
     9fe:	b085      	sub	sp, #20
     a00:	af00      	add	r7, sp, #0
     a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     a04:	2300      	movs	r3, #0
     a06:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a0c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a10:	685b      	ldr	r3, [r3, #4]
     a12:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
     a14:	68fb      	ldr	r3, [r7, #12]
     a16:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
     a1a:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
     a1c:	687b      	ldr	r3, [r7, #4]
     a1e:	00db      	lsls	r3, r3, #3
     a20:	68fa      	ldr	r2, [r7, #12]
     a22:	4313      	orrs	r3, r2
     a24:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     a26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a2a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a2e:	68fa      	ldr	r2, [r7, #12]
     a30:	605a      	str	r2, [r3, #4]
}
     a32:	3714      	adds	r7, #20
     a34:	46bd      	mov	sp, r7
     a36:	f85d 7b04 	ldr.w	r7, [sp], #4
     a3a:	4770      	bx	lr

00000a3c <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
     a3c:	b480      	push	{r7}
     a3e:	b083      	sub	sp, #12
     a40:	af00      	add	r7, sp, #0
     a42:	4602      	mov	r2, r0
     a44:	460b      	mov	r3, r1
     a46:	71fa      	strb	r2, [r7, #7]
     a48:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     a4a:	79bb      	ldrb	r3, [r7, #6]
     a4c:	2b00      	cmp	r3, #0
     a4e:	d00e      	beq.n	a6e <RCC_ITConfig+0x32>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
     a50:	f241 0309 	movw	r3, #4105	; 0x1009
     a54:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a58:	f241 0209 	movw	r2, #4105	; 0x1009
     a5c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a60:	7812      	ldrb	r2, [r2, #0]
     a62:	b2d1      	uxtb	r1, r2
     a64:	79fa      	ldrb	r2, [r7, #7]
     a66:	430a      	orrs	r2, r1
     a68:	b2d2      	uxtb	r2, r2
     a6a:	701a      	strb	r2, [r3, #0]
     a6c:	e00f      	b.n	a8e <RCC_ITConfig+0x52>
  }
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
     a6e:	f241 0309 	movw	r3, #4105	; 0x1009
     a72:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a76:	f241 0209 	movw	r2, #4105	; 0x1009
     a7a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a7e:	7812      	ldrb	r2, [r2, #0]
     a80:	b2d1      	uxtb	r1, r2
     a82:	79fa      	ldrb	r2, [r7, #7]
     a84:	43d2      	mvns	r2, r2
     a86:	b2d2      	uxtb	r2, r2
     a88:	400a      	ands	r2, r1
     a8a:	b2d2      	uxtb	r2, r2
     a8c:	701a      	strb	r2, [r3, #0]
  }
}
     a8e:	370c      	adds	r7, #12
     a90:	46bd      	mov	sp, r7
     a92:	f85d 7b04 	ldr.w	r7, [sp], #4
     a96:	4770      	bx	lr

00000a98 <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
     a98:	b480      	push	{r7}
     a9a:	b083      	sub	sp, #12
     a9c:	af00      	add	r7, sp, #0
     a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
     aa0:	23d8      	movs	r3, #216	; 0xd8
     aa2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     aa6:	687a      	ldr	r2, [r7, #4]
     aa8:	601a      	str	r2, [r3, #0]
}
     aaa:	370c      	adds	r7, #12
     aac:	46bd      	mov	sp, r7
     aae:	f85d 7b04 	ldr.w	r7, [sp], #4
     ab2:	4770      	bx	lr

00000ab4 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
     ab4:	b480      	push	{r7}
     ab6:	b085      	sub	sp, #20
     ab8:	af00      	add	r7, sp, #0
     aba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     abc:	2300      	movs	r3, #0
     abe:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
     ac0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ac4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ac8:	685b      	ldr	r3, [r3, #4]
     aca:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
     acc:	68fb      	ldr	r3, [r7, #12]
     ace:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
     ad2:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
     ad4:	68fa      	ldr	r2, [r7, #12]
     ad6:	687b      	ldr	r3, [r7, #4]
     ad8:	4313      	orrs	r3, r2
     ada:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ae0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ae4:	68fa      	ldr	r2, [r7, #12]
     ae6:	605a      	str	r2, [r3, #4]
}
     ae8:	3714      	adds	r7, #20
     aea:	46bd      	mov	sp, r7
     aec:	f85d 7b04 	ldr.w	r7, [sp], #4
     af0:	4770      	bx	lr
     af2:	bf00      	nop

00000af4 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
     af4:	b480      	push	{r7}
     af6:	b083      	sub	sp, #12
     af8:	af00      	add	r7, sp, #0
     afa:	4603      	mov	r3, r0
     afc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     afe:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b02:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b06:	2200      	movs	r2, #0
     b08:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     b0a:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b0e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b12:	2200      	movs	r2, #0
     b14:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
     b16:	79fb      	ldrb	r3, [r7, #7]
     b18:	2b01      	cmp	r3, #1
     b1a:	d002      	beq.n	b22 <RCC_LSEConfig+0x2e>
     b1c:	2b04      	cmp	r3, #4
     b1e:	d007      	beq.n	b30 <RCC_LSEConfig+0x3c>
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;

    default:
      break;
     b20:	e00d      	b.n	b3e <RCC_LSEConfig+0x4a>
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
     b22:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b2a:	2201      	movs	r2, #1
     b2c:	701a      	strb	r2, [r3, #0]
      break;
     b2e:	e006      	b.n	b3e <RCC_LSEConfig+0x4a>

    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
     b30:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b34:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b38:	2205      	movs	r2, #5
     b3a:	701a      	strb	r2, [r3, #0]
      break;
     b3c:	bf00      	nop

    default:
      break;
  }
}
     b3e:	370c      	adds	r7, #12
     b40:	46bd      	mov	sp, r7
     b42:	f85d 7b04 	ldr.w	r7, [sp], #4
     b46:	4770      	bx	lr

00000b48 <RCC_LSICmd>:
  * @note   LSI can not be disabled if the IWDG is running.
  * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
     b48:	b480      	push	{r7}
     b4a:	b083      	sub	sp, #12
     b4c:	af00      	add	r7, sp, #0
     b4e:	4603      	mov	r3, r0
     b50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
     b52:	f44f 6390 	mov.w	r3, #1152	; 0x480
     b56:	f2c4 2342 	movt	r3, #16962	; 0x4242
     b5a:	79fa      	ldrb	r2, [r7, #7]
     b5c:	601a      	str	r2, [r3, #0]
}
     b5e:	370c      	adds	r7, #12
     b60:	46bd      	mov	sp, r7
     b62:	f85d 7b04 	ldr.w	r7, [sp], #4
     b66:	4770      	bx	lr

00000b68 <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
     b68:	b480      	push	{r7}
     b6a:	b083      	sub	sp, #12
     b6c:	af00      	add	r7, sp, #0
     b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
     b70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     b74:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     b7c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     b80:	6a11      	ldr	r1, [r2, #32]
     b82:	687a      	ldr	r2, [r7, #4]
     b84:	430a      	orrs	r2, r1
     b86:	621a      	str	r2, [r3, #32]
}
     b88:	370c      	adds	r7, #12
     b8a:	46bd      	mov	sp, r7
     b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
     b90:	4770      	bx	lr
     b92:	bf00      	nop

00000b94 <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
     b94:	b480      	push	{r7}
     b96:	b083      	sub	sp, #12
     b98:	af00      	add	r7, sp, #0
     b9a:	4603      	mov	r3, r0
     b9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
     b9e:	f240 433c 	movw	r3, #1084	; 0x43c
     ba2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     ba6:	79fa      	ldrb	r2, [r7, #7]
     ba8:	601a      	str	r2, [r3, #0]
}
     baa:	370c      	adds	r7, #12
     bac:	46bd      	mov	sp, r7
     bae:	f85d 7b04 	ldr.w	r7, [sp], #4
     bb2:	4770      	bx	lr

00000bb4 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using
  *         fractional value for HSE crystal.
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
     bb4:	b480      	push	{r7}
     bb6:	b087      	sub	sp, #28
     bb8:	af00      	add	r7, sp, #0
     bba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
     bbc:	2300      	movs	r3, #0
     bbe:	617b      	str	r3, [r7, #20]
     bc0:	2300      	movs	r3, #0
     bc2:	613b      	str	r3, [r7, #16]
     bc4:	2300      	movs	r3, #0
     bc6:	60fb      	str	r3, [r7, #12]
     bc8:	2300      	movs	r3, #0
     bca:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
     bcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     bd0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     bd4:	685b      	ldr	r3, [r3, #4]
     bd6:	f003 030c 	and.w	r3, r3, #12
     bda:	617b      	str	r3, [r7, #20]

  switch (tmp)
     bdc:	697b      	ldr	r3, [r7, #20]
     bde:	2b04      	cmp	r3, #4
     be0:	d00a      	beq.n	bf8 <RCC_GetClocksFreq+0x44>
     be2:	2b08      	cmp	r3, #8
     be4:	d00f      	beq.n	c06 <RCC_GetClocksFreq+0x52>
     be6:	2b00      	cmp	r3, #0
     be8:	d14c      	bne.n	c84 <RCC_GetClocksFreq+0xd0>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     bea:	687a      	ldr	r2, [r7, #4]
     bec:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bf0:	f2c0 037a 	movt	r3, #122	; 0x7a
     bf4:	6013      	str	r3, [r2, #0]
      break;
     bf6:	e04c      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
     bf8:	687a      	ldr	r2, [r7, #4]
     bfa:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bfe:	f2c0 037a 	movt	r3, #122	; 0x7a
     c02:	6013      	str	r3, [r2, #0]
      break;
     c04:	e045      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
     c06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c0a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c0e:	685b      	ldr	r3, [r3, #4]
     c10:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     c14:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
     c16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c1a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c1e:	685b      	ldr	r3, [r3, #4]
     c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     c24:	60fb      	str	r3, [r7, #12]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     c26:	693b      	ldr	r3, [r7, #16]
     c28:	0c9b      	lsrs	r3, r3, #18
     c2a:	3302      	adds	r3, #2
     c2c:	613b      	str	r3, [r7, #16]

      if (pllsource == 0x00)
     c2e:	68fb      	ldr	r3, [r7, #12]
     c30:	2b00      	cmp	r3, #0
     c32:	d109      	bne.n	c48 <RCC_GetClocksFreq+0x94>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
     c34:	693a      	ldr	r2, [r7, #16]
     c36:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c3a:	f2c0 033d 	movt	r3, #61	; 0x3d
     c3e:	fb03 f202 	mul.w	r2, r3, r2
     c42:	687b      	ldr	r3, [r7, #4]
     c44:	601a      	str	r2, [r3, #0]
     c46:	e01c      	b.n	c82 <RCC_GetClocksFreq+0xce>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
     c48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c4c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c50:	685b      	ldr	r3, [r3, #4]
     c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     c56:	2b00      	cmp	r3, #0
     c58:	d009      	beq.n	c6e <RCC_GetClocksFreq+0xba>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
     c5a:	693a      	ldr	r2, [r7, #16]
     c5c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c60:	f2c0 033d 	movt	r3, #61	; 0x3d
     c64:	fb03 f202 	mul.w	r2, r3, r2
     c68:	687b      	ldr	r3, [r7, #4]
     c6a:	601a      	str	r2, [r3, #0]
     c6c:	e009      	b.n	c82 <RCC_GetClocksFreq+0xce>
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
     c6e:	693a      	ldr	r2, [r7, #16]
     c70:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c74:	f2c0 037a 	movt	r3, #122	; 0x7a
     c78:	fb03 f202 	mul.w	r2, r3, r2
     c7c:	687b      	ldr	r3, [r7, #4]
     c7e:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2;
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     c80:	e007      	b.n	c92 <RCC_GetClocksFreq+0xde>
     c82:	e006      	b.n	c92 <RCC_GetClocksFreq+0xde>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     c84:	687a      	ldr	r2, [r7, #4]
     c86:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c8a:	f2c0 037a 	movt	r3, #122	; 0x7a
     c8e:	6013      	str	r3, [r2, #0]
      break;
     c90:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
     c92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c96:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c9a:	685b      	ldr	r3, [r3, #4]
     c9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     ca0:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
     ca2:	697b      	ldr	r3, [r7, #20]
     ca4:	091b      	lsrs	r3, r3, #4
     ca6:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     ca8:	f240 0314 	movw	r3, #20
     cac:	f2c2 0300 	movt	r3, #8192	; 0x2000
     cb0:	697a      	ldr	r2, [r7, #20]
     cb2:	4413      	add	r3, r2
     cb4:	781b      	ldrb	r3, [r3, #0]
     cb6:	b2db      	uxtb	r3, r3
     cb8:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
     cba:	687b      	ldr	r3, [r7, #4]
     cbc:	681a      	ldr	r2, [r3, #0]
     cbe:	68bb      	ldr	r3, [r7, #8]
     cc0:	40da      	lsrs	r2, r3
     cc2:	687b      	ldr	r3, [r7, #4]
     cc4:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
     cc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     cce:	685b      	ldr	r3, [r3, #4]
     cd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
     cd4:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
     cd6:	697b      	ldr	r3, [r7, #20]
     cd8:	0a1b      	lsrs	r3, r3, #8
     cda:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     cdc:	f240 0314 	movw	r3, #20
     ce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     ce4:	697a      	ldr	r2, [r7, #20]
     ce6:	4413      	add	r3, r2
     ce8:	781b      	ldrb	r3, [r3, #0]
     cea:	b2db      	uxtb	r3, r3
     cec:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     cee:	687b      	ldr	r3, [r7, #4]
     cf0:	685a      	ldr	r2, [r3, #4]
     cf2:	68bb      	ldr	r3, [r7, #8]
     cf4:	40da      	lsrs	r2, r3
     cf6:	687b      	ldr	r3, [r7, #4]
     cf8:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
     cfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cfe:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d02:	685b      	ldr	r3, [r3, #4]
     d04:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
     d08:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
     d0a:	697b      	ldr	r3, [r7, #20]
     d0c:	0adb      	lsrs	r3, r3, #11
     d0e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     d10:	f240 0314 	movw	r3, #20
     d14:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d18:	697a      	ldr	r2, [r7, #20]
     d1a:	4413      	add	r3, r2
     d1c:	781b      	ldrb	r3, [r3, #0]
     d1e:	b2db      	uxtb	r3, r3
     d20:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     d22:	687b      	ldr	r3, [r7, #4]
     d24:	685a      	ldr	r2, [r3, #4]
     d26:	68bb      	ldr	r3, [r7, #8]
     d28:	40da      	lsrs	r2, r3
     d2a:	687b      	ldr	r3, [r7, #4]
     d2c:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
     d2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d32:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d36:	685b      	ldr	r3, [r3, #4]
     d38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
     d3c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
     d3e:	697b      	ldr	r3, [r7, #20]
     d40:	0b9b      	lsrs	r3, r3, #14
     d42:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
     d44:	f240 0324 	movw	r3, #36	; 0x24
     d48:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d4c:	697a      	ldr	r2, [r7, #20]
     d4e:	4413      	add	r3, r2
     d50:	781b      	ldrb	r3, [r3, #0]
     d52:	b2db      	uxtb	r3, r3
     d54:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
     d56:	687b      	ldr	r3, [r7, #4]
     d58:	68da      	ldr	r2, [r3, #12]
     d5a:	68bb      	ldr	r3, [r7, #8]
     d5c:	fbb2 f2f3 	udiv	r2, r2, r3
     d60:	687b      	ldr	r3, [r7, #4]
     d62:	611a      	str	r2, [r3, #16]
}
     d64:	371c      	adds	r7, #28
     d66:	46bd      	mov	sp, r7
     d68:	f85d 7b04 	ldr.w	r7, [sp], #4
     d6c:	4770      	bx	lr
     d6e:	bf00      	nop

00000d70 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
     d70:	b480      	push	{r7}
     d72:	b083      	sub	sp, #12
     d74:	af00      	add	r7, sp, #0
     d76:	6078      	str	r0, [r7, #4]
     d78:	460b      	mov	r3, r1
     d7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
     d7c:	78fb      	ldrb	r3, [r7, #3]
     d7e:	2b00      	cmp	r3, #0
     d80:	d00c      	beq.n	d9c <RCC_AHBPeriphClockCmd+0x2c>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
     d82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d86:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     d8e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     d92:	6951      	ldr	r1, [r2, #20]
     d94:	687a      	ldr	r2, [r7, #4]
     d96:	430a      	orrs	r2, r1
     d98:	615a      	str	r2, [r3, #20]
     d9a:	e00c      	b.n	db6 <RCC_AHBPeriphClockCmd+0x46>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
     d9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     da0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     da4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     da8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dac:	6951      	ldr	r1, [r2, #20]
     dae:	687a      	ldr	r2, [r7, #4]
     db0:	43d2      	mvns	r2, r2
     db2:	400a      	ands	r2, r1
     db4:	615a      	str	r2, [r3, #20]
  }
}
     db6:	370c      	adds	r7, #12
     db8:	46bd      	mov	sp, r7
     dba:	f85d 7b04 	ldr.w	r7, [sp], #4
     dbe:	4770      	bx	lr

00000dc0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     dc0:	b480      	push	{r7}
     dc2:	b083      	sub	sp, #12
     dc4:	af00      	add	r7, sp, #0
     dc6:	6078      	str	r0, [r7, #4]
     dc8:	460b      	mov	r3, r1
     dca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     dcc:	78fb      	ldrb	r3, [r7, #3]
     dce:	2b00      	cmp	r3, #0
     dd0:	d00c      	beq.n	dec <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
     dd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     dd6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     dda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     dde:	f2c4 0202 	movt	r2, #16386	; 0x4002
     de2:	6991      	ldr	r1, [r2, #24]
     de4:	687a      	ldr	r2, [r7, #4]
     de6:	430a      	orrs	r2, r1
     de8:	619a      	str	r2, [r3, #24]
     dea:	e00c      	b.n	e06 <RCC_APB2PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
     dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     df0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     df4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     df8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dfc:	6991      	ldr	r1, [r2, #24]
     dfe:	687a      	ldr	r2, [r7, #4]
     e00:	43d2      	mvns	r2, r2
     e02:	400a      	ands	r2, r1
     e04:	619a      	str	r2, [r3, #24]
  }
}
     e06:	370c      	adds	r7, #12
     e08:	46bd      	mov	sp, r7
     e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e0e:	4770      	bx	lr

00000e10 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     e10:	b480      	push	{r7}
     e12:	b083      	sub	sp, #12
     e14:	af00      	add	r7, sp, #0
     e16:	6078      	str	r0, [r7, #4]
     e18:	460b      	mov	r3, r1
     e1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e1c:	78fb      	ldrb	r3, [r7, #3]
     e1e:	2b00      	cmp	r3, #0
     e20:	d00c      	beq.n	e3c <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
     e22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e2e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e32:	69d1      	ldr	r1, [r2, #28]
     e34:	687a      	ldr	r2, [r7, #4]
     e36:	430a      	orrs	r2, r1
     e38:	61da      	str	r2, [r3, #28]
     e3a:	e00c      	b.n	e56 <RCC_APB1PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
     e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e40:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e48:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e4c:	69d1      	ldr	r1, [r2, #28]
     e4e:	687a      	ldr	r2, [r7, #4]
     e50:	43d2      	mvns	r2, r2
     e52:	400a      	ands	r2, r1
     e54:	61da      	str	r2, [r3, #28]
  }
}
     e56:	370c      	adds	r7, #12
     e58:	46bd      	mov	sp, r7
     e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e5e:	4770      	bx	lr

00000e60 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     e60:	b480      	push	{r7}
     e62:	b083      	sub	sp, #12
     e64:	af00      	add	r7, sp, #0
     e66:	6078      	str	r0, [r7, #4]
     e68:	460b      	mov	r3, r1
     e6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e6c:	78fb      	ldrb	r3, [r7, #3]
     e6e:	2b00      	cmp	r3, #0
     e70:	d00c      	beq.n	e8c <RCC_APB2PeriphResetCmd+0x2c>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
     e72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e76:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e7e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e82:	68d1      	ldr	r1, [r2, #12]
     e84:	687a      	ldr	r2, [r7, #4]
     e86:	430a      	orrs	r2, r1
     e88:	60da      	str	r2, [r3, #12]
     e8a:	e00c      	b.n	ea6 <RCC_APB2PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
     e8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e90:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e98:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e9c:	68d1      	ldr	r1, [r2, #12]
     e9e:	687a      	ldr	r2, [r7, #4]
     ea0:	43d2      	mvns	r2, r2
     ea2:	400a      	ands	r2, r1
     ea4:	60da      	str	r2, [r3, #12]
  }
}
     ea6:	370c      	adds	r7, #12
     ea8:	46bd      	mov	sp, r7
     eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
     eae:	4770      	bx	lr

00000eb0 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     eb0:	b480      	push	{r7}
     eb2:	b083      	sub	sp, #12
     eb4:	af00      	add	r7, sp, #0
     eb6:	6078      	str	r0, [r7, #4]
     eb8:	460b      	mov	r3, r1
     eba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     ebc:	78fb      	ldrb	r3, [r7, #3]
     ebe:	2b00      	cmp	r3, #0
     ec0:	d00c      	beq.n	edc <RCC_APB1PeriphResetCmd+0x2c>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
     ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ec6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     eca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ece:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ed2:	6911      	ldr	r1, [r2, #16]
     ed4:	687a      	ldr	r2, [r7, #4]
     ed6:	430a      	orrs	r2, r1
     ed8:	611a      	str	r2, [r3, #16]
     eda:	e00c      	b.n	ef6 <RCC_APB1PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
     edc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ee0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ee4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ee8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     eec:	6911      	ldr	r1, [r2, #16]
     eee:	687a      	ldr	r2, [r7, #4]
     ef0:	43d2      	mvns	r2, r2
     ef2:	400a      	ands	r2, r1
     ef4:	611a      	str	r2, [r3, #16]
  }
}
     ef6:	370c      	adds	r7, #12
     ef8:	46bd      	mov	sp, r7
     efa:	f85d 7b04 	ldr.w	r7, [sp], #4
     efe:	4770      	bx	lr

00000f00 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
     f00:	b480      	push	{r7}
     f02:	b083      	sub	sp, #12
     f04:	af00      	add	r7, sp, #0
     f06:	4603      	mov	r3, r0
     f08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
     f0a:	f44f 6388 	mov.w	r3, #1088	; 0x440
     f0e:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f12:	79fa      	ldrb	r2, [r7, #7]
     f14:	601a      	str	r2, [r3, #0]
}
     f16:	370c      	adds	r7, #12
     f18:	46bd      	mov	sp, r7
     f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f1e:	4770      	bx	lr

00000f20 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
     f20:	b480      	push	{r7}
     f22:	b083      	sub	sp, #12
     f24:	af00      	add	r7, sp, #0
     f26:	4603      	mov	r3, r0
     f28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
     f2a:	234c      	movs	r3, #76	; 0x4c
     f2c:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f30:	79fa      	ldrb	r2, [r7, #7]
     f32:	601a      	str	r2, [r3, #0]
}
     f34:	370c      	adds	r7, #12
     f36:	46bd      	mov	sp, r7
     f38:	f85d 7b04 	ldr.w	r7, [sp], #4
     f3c:	4770      	bx	lr
     f3e:	bf00      	nop

00000f40 <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
     f40:	b480      	push	{r7}
     f42:	b083      	sub	sp, #12
     f44:	af00      	add	r7, sp, #0
     f46:	4603      	mov	r3, r0
     f48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
     f4a:	f241 0307 	movw	r3, #4103	; 0x1007
     f4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f52:	79fa      	ldrb	r2, [r7, #7]
     f54:	701a      	strb	r2, [r3, #0]
}
     f56:	370c      	adds	r7, #12
     f58:	46bd      	mov	sp, r7
     f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f5e:	4770      	bx	lr

00000f60 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
     f60:	b480      	push	{r7}
     f62:	b087      	sub	sp, #28
     f64:	af00      	add	r7, sp, #0
     f66:	4603      	mov	r3, r0
     f68:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
     f6a:	2300      	movs	r3, #0
     f6c:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
     f6e:	2300      	movs	r3, #0
     f70:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
     f72:	2300      	movs	r3, #0
     f74:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
     f76:	79fb      	ldrb	r3, [r7, #7]
     f78:	095b      	lsrs	r3, r3, #5
     f7a:	b2db      	uxtb	r3, r3
     f7c:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
     f7e:	68fb      	ldr	r3, [r7, #12]
     f80:	2b01      	cmp	r3, #1
     f82:	d106      	bne.n	f92 <RCC_GetFlagStatus+0x32>
  {
    statusreg = RCC->CR;
     f84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f88:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f8c:	681b      	ldr	r3, [r3, #0]
     f8e:	617b      	str	r3, [r7, #20]
     f90:	e00f      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
     f92:	68fb      	ldr	r3, [r7, #12]
     f94:	2b02      	cmp	r3, #2
     f96:	d106      	bne.n	fa6 <RCC_GetFlagStatus+0x46>
  {
    statusreg = RCC->BDCR;
     f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f9c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fa0:	6a1b      	ldr	r3, [r3, #32]
     fa2:	617b      	str	r3, [r7, #20]
     fa4:	e005      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
     fa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     faa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     fb0:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
     fb2:	79fb      	ldrb	r3, [r7, #7]
     fb4:	f003 031f 	and.w	r3, r3, #31
     fb8:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
     fba:	68fb      	ldr	r3, [r7, #12]
     fbc:	697a      	ldr	r2, [r7, #20]
     fbe:	fa22 f303 	lsr.w	r3, r2, r3
     fc2:	f003 0301 	and.w	r3, r3, #1
     fc6:	2b00      	cmp	r3, #0
     fc8:	d002      	beq.n	fd0 <RCC_GetFlagStatus+0x70>
  {
    bitstatus = SET;
     fca:	2301      	movs	r3, #1
     fcc:	74fb      	strb	r3, [r7, #19]
     fce:	e001      	b.n	fd4 <RCC_GetFlagStatus+0x74>
  }
  else
  {
    bitstatus = RESET;
     fd0:	2300      	movs	r3, #0
     fd2:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
     fd4:	7cfb      	ldrb	r3, [r7, #19]
}
     fd6:	4618      	mov	r0, r3
     fd8:	371c      	adds	r7, #28
     fda:	46bd      	mov	sp, r7
     fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
     fe0:	4770      	bx	lr
     fe2:	bf00      	nop

00000fe4 <RCC_ClearFlag>:
  *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
     fe4:	b480      	push	{r7}
     fe6:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
     fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     fec:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ff0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ff4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ff8:	6a52      	ldr	r2, [r2, #36]	; 0x24
     ffa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     ffe:	625a      	str	r2, [r3, #36]	; 0x24
}
    1000:	46bd      	mov	sp, r7
    1002:	f85d 7b04 	ldr.w	r7, [sp], #4
    1006:	4770      	bx	lr

00001008 <RCC_GetITStatus>:
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  *
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
    1008:	b480      	push	{r7}
    100a:	b085      	sub	sp, #20
    100c:	af00      	add	r7, sp, #0
    100e:	4603      	mov	r3, r0
    1010:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
    1012:	2300      	movs	r3, #0
    1014:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
    1016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    101a:	f2c4 0302 	movt	r3, #16386	; 0x4002
    101e:	689a      	ldr	r2, [r3, #8]
    1020:	79fb      	ldrb	r3, [r7, #7]
    1022:	4013      	ands	r3, r2
    1024:	2b00      	cmp	r3, #0
    1026:	d002      	beq.n	102e <RCC_GetITStatus+0x26>
  {
    bitstatus = SET;
    1028:	2301      	movs	r3, #1
    102a:	73fb      	strb	r3, [r7, #15]
    102c:	e001      	b.n	1032 <RCC_GetITStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    102e:	2300      	movs	r3, #0
    1030:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the RCC_IT status */
  return  bitstatus;
    1032:	7bfb      	ldrb	r3, [r7, #15]
}
    1034:	4618      	mov	r0, r3
    1036:	3714      	adds	r7, #20
    1038:	46bd      	mov	sp, r7
    103a:	f85d 7b04 	ldr.w	r7, [sp], #4
    103e:	4770      	bx	lr

00001040 <RCC_ClearITPendingBit>:
  *
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
    1040:	b480      	push	{r7}
    1042:	b083      	sub	sp, #12
    1044:	af00      	add	r7, sp, #0
    1046:	4603      	mov	r3, r0
    1048:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
    104a:	f241 030a 	movw	r3, #4106	; 0x100a
    104e:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1052:	79fa      	ldrb	r2, [r7, #7]
    1054:	701a      	strb	r2, [r3, #0]
}
    1056:	370c      	adds	r7, #12
    1058:	46bd      	mov	sp, r7
    105a:	f85d 7b04 	ldr.w	r7, [sp], #4
    105e:	4770      	bx	lr

00001060 <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
    1060:	b580      	push	{r7, lr}
    1062:	b082      	sub	sp, #8
    1064:	af00      	add	r7, sp, #0
    1066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
    1068:	687a      	ldr	r2, [r7, #4]
    106a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    106e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1072:	429a      	cmp	r2, r3
    1074:	d108      	bne.n	1088 <GPIO_DeInit+0x28>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
    1076:	2004      	movs	r0, #4
    1078:	2101      	movs	r1, #1
    107a:	f7ff fef1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
    107e:	2004      	movs	r0, #4
    1080:	2100      	movs	r1, #0
    1082:	f7ff feed 	bl	e60 <RCC_APB2PeriphResetCmd>
    1086:	e060      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOB)
    1088:	687a      	ldr	r2, [r7, #4]
    108a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    108e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1092:	429a      	cmp	r2, r3
    1094:	d108      	bne.n	10a8 <GPIO_DeInit+0x48>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
    1096:	2008      	movs	r0, #8
    1098:	2101      	movs	r1, #1
    109a:	f7ff fee1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
    109e:	2008      	movs	r0, #8
    10a0:	2100      	movs	r1, #0
    10a2:	f7ff fedd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10a6:	e050      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOC)
    10a8:	687a      	ldr	r2, [r7, #4]
    10aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    10ae:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10b2:	429a      	cmp	r2, r3
    10b4:	d108      	bne.n	10c8 <GPIO_DeInit+0x68>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
    10b6:	2010      	movs	r0, #16
    10b8:	2101      	movs	r1, #1
    10ba:	f7ff fed1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
    10be:	2010      	movs	r0, #16
    10c0:	2100      	movs	r1, #0
    10c2:	f7ff fecd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10c6:	e040      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOD)
    10c8:	687a      	ldr	r2, [r7, #4]
    10ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    10ce:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10d2:	429a      	cmp	r2, r3
    10d4:	d108      	bne.n	10e8 <GPIO_DeInit+0x88>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
    10d6:	2020      	movs	r0, #32
    10d8:	2101      	movs	r1, #1
    10da:	f7ff fec1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
    10de:	2020      	movs	r0, #32
    10e0:	2100      	movs	r1, #0
    10e2:	f7ff febd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10e6:	e030      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOE)
    10e8:	687a      	ldr	r2, [r7, #4]
    10ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    10ee:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10f2:	429a      	cmp	r2, r3
    10f4:	d108      	bne.n	1108 <GPIO_DeInit+0xa8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
    10f6:	2040      	movs	r0, #64	; 0x40
    10f8:	2101      	movs	r1, #1
    10fa:	f7ff feb1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
    10fe:	2040      	movs	r0, #64	; 0x40
    1100:	2100      	movs	r1, #0
    1102:	f7ff fead 	bl	e60 <RCC_APB2PeriphResetCmd>
    1106:	e020      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOF)
    1108:	687a      	ldr	r2, [r7, #4]
    110a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
    110e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1112:	429a      	cmp	r2, r3
    1114:	d108      	bne.n	1128 <GPIO_DeInit+0xc8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
    1116:	2080      	movs	r0, #128	; 0x80
    1118:	2101      	movs	r1, #1
    111a:	f7ff fea1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
    111e:	2080      	movs	r0, #128	; 0x80
    1120:	2100      	movs	r1, #0
    1122:	f7ff fe9d 	bl	e60 <RCC_APB2PeriphResetCmd>
    1126:	e010      	b.n	114a <GPIO_DeInit+0xea>
  }
  else
  {
    if (GPIOx == GPIOG)
    1128:	687a      	ldr	r2, [r7, #4]
    112a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    112e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1132:	429a      	cmp	r2, r3
    1134:	d109      	bne.n	114a <GPIO_DeInit+0xea>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
    1136:	f44f 7080 	mov.w	r0, #256	; 0x100
    113a:	2101      	movs	r1, #1
    113c:	f7ff fe90 	bl	e60 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    1140:	f44f 7080 	mov.w	r0, #256	; 0x100
    1144:	2100      	movs	r1, #0
    1146:	f7ff fe8b 	bl	e60 <RCC_APB2PeriphResetCmd>
    }
  }
}
    114a:	3708      	adds	r7, #8
    114c:	46bd      	mov	sp, r7
    114e:	bd80      	pop	{r7, pc}

00001150 <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
    1150:	b580      	push	{r7, lr}
    1152:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
    1154:	2001      	movs	r0, #1
    1156:	2101      	movs	r1, #1
    1158:	f7ff fe82 	bl	e60 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
    115c:	2001      	movs	r0, #1
    115e:	2100      	movs	r1, #0
    1160:	f7ff fe7e 	bl	e60 <RCC_APB2PeriphResetCmd>
}
    1164:	bd80      	pop	{r7, pc}
    1166:	bf00      	nop

00001168 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
    1168:	b480      	push	{r7}
    116a:	b089      	sub	sp, #36	; 0x24
    116c:	af00      	add	r7, sp, #0
    116e:	6078      	str	r0, [r7, #4]
    1170:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
    1172:	2300      	movs	r3, #0
    1174:	61fb      	str	r3, [r7, #28]
    1176:	2300      	movs	r3, #0
    1178:	613b      	str	r3, [r7, #16]
    117a:	2300      	movs	r3, #0
    117c:	61bb      	str	r3, [r7, #24]
    117e:	2300      	movs	r3, #0
    1180:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
    1182:	2300      	movs	r3, #0
    1184:	617b      	str	r3, [r7, #20]
    1186:	2300      	movs	r3, #0
    1188:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));

/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
    118a:	683b      	ldr	r3, [r7, #0]
    118c:	78db      	ldrb	r3, [r3, #3]
    118e:	f003 030f 	and.w	r3, r3, #15
    1192:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
    1194:	683b      	ldr	r3, [r7, #0]
    1196:	78db      	ldrb	r3, [r3, #3]
    1198:	f003 0310 	and.w	r3, r3, #16
    119c:	2b00      	cmp	r3, #0
    119e:	d004      	beq.n	11aa <GPIO_Init+0x42>
  {
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
    11a0:	683b      	ldr	r3, [r7, #0]
    11a2:	789b      	ldrb	r3, [r3, #2]
    11a4:	69fa      	ldr	r2, [r7, #28]
    11a6:	4313      	orrs	r3, r2
    11a8:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
    11aa:	683b      	ldr	r3, [r7, #0]
    11ac:	881b      	ldrh	r3, [r3, #0]
    11ae:	b2db      	uxtb	r3, r3
    11b0:	2b00      	cmp	r3, #0
    11b2:	d044      	beq.n	123e <GPIO_Init+0xd6>
  {
    tmpreg = GPIOx->CRL;
    11b4:	687b      	ldr	r3, [r7, #4]
    11b6:	681b      	ldr	r3, [r3, #0]
    11b8:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    11ba:	2300      	movs	r3, #0
    11bc:	61bb      	str	r3, [r7, #24]
    11be:	e038      	b.n	1232 <GPIO_Init+0xca>
    {
      pos = ((uint32_t)0x01) << pinpos;
    11c0:	69bb      	ldr	r3, [r7, #24]
    11c2:	2201      	movs	r2, #1
    11c4:	fa02 f303 	lsl.w	r3, r2, r3
    11c8:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
    11ca:	683b      	ldr	r3, [r7, #0]
    11cc:	881b      	ldrh	r3, [r3, #0]
    11ce:	461a      	mov	r2, r3
    11d0:	68fb      	ldr	r3, [r7, #12]
    11d2:	4013      	ands	r3, r2
    11d4:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    11d6:	693a      	ldr	r2, [r7, #16]
    11d8:	68fb      	ldr	r3, [r7, #12]
    11da:	429a      	cmp	r2, r3
    11dc:	d126      	bne.n	122c <GPIO_Init+0xc4>
      {
        pos = pinpos << 2;
    11de:	69bb      	ldr	r3, [r7, #24]
    11e0:	009b      	lsls	r3, r3, #2
    11e2:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    11e4:	68fb      	ldr	r3, [r7, #12]
    11e6:	220f      	movs	r2, #15
    11e8:	fa02 f303 	lsl.w	r3, r2, r3
    11ec:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    11ee:	68bb      	ldr	r3, [r7, #8]
    11f0:	43db      	mvns	r3, r3
    11f2:	697a      	ldr	r2, [r7, #20]
    11f4:	4013      	ands	r3, r2
    11f6:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    11f8:	68fb      	ldr	r3, [r7, #12]
    11fa:	69fa      	ldr	r2, [r7, #28]
    11fc:	fa02 f303 	lsl.w	r3, r2, r3
    1200:	697a      	ldr	r2, [r7, #20]
    1202:	4313      	orrs	r3, r2
    1204:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    1206:	683b      	ldr	r3, [r7, #0]
    1208:	78db      	ldrb	r3, [r3, #3]
    120a:	2b28      	cmp	r3, #40	; 0x28
    120c:	d105      	bne.n	121a <GPIO_Init+0xb2>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
    120e:	69bb      	ldr	r3, [r7, #24]
    1210:	2201      	movs	r2, #1
    1212:	409a      	lsls	r2, r3
    1214:	687b      	ldr	r3, [r7, #4]
    1216:	615a      	str	r2, [r3, #20]
    1218:	e008      	b.n	122c <GPIO_Init+0xc4>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    121a:	683b      	ldr	r3, [r7, #0]
    121c:	78db      	ldrb	r3, [r3, #3]
    121e:	2b48      	cmp	r3, #72	; 0x48
    1220:	d104      	bne.n	122c <GPIO_Init+0xc4>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
    1222:	69bb      	ldr	r3, [r7, #24]
    1224:	2201      	movs	r2, #1
    1226:	409a      	lsls	r2, r3
    1228:	687b      	ldr	r3, [r7, #4]
    122a:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    122c:	69bb      	ldr	r3, [r7, #24]
    122e:	3301      	adds	r3, #1
    1230:	61bb      	str	r3, [r7, #24]
    1232:	69bb      	ldr	r3, [r7, #24]
    1234:	2b07      	cmp	r3, #7
    1236:	d9c3      	bls.n	11c0 <GPIO_Init+0x58>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
    1238:	687b      	ldr	r3, [r7, #4]
    123a:	697a      	ldr	r2, [r7, #20]
    123c:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
    123e:	683b      	ldr	r3, [r7, #0]
    1240:	881b      	ldrh	r3, [r3, #0]
    1242:	2bff      	cmp	r3, #255	; 0xff
    1244:	d946      	bls.n	12d4 <GPIO_Init+0x16c>
  {
    tmpreg = GPIOx->CRH;
    1246:	687b      	ldr	r3, [r7, #4]
    1248:	685b      	ldr	r3, [r3, #4]
    124a:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    124c:	2300      	movs	r3, #0
    124e:	61bb      	str	r3, [r7, #24]
    1250:	e03a      	b.n	12c8 <GPIO_Init+0x160>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
    1252:	69bb      	ldr	r3, [r7, #24]
    1254:	3308      	adds	r3, #8
    1256:	2201      	movs	r2, #1
    1258:	fa02 f303 	lsl.w	r3, r2, r3
    125c:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
    125e:	683b      	ldr	r3, [r7, #0]
    1260:	881b      	ldrh	r3, [r3, #0]
    1262:	461a      	mov	r2, r3
    1264:	68fb      	ldr	r3, [r7, #12]
    1266:	4013      	ands	r3, r2
    1268:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    126a:	693a      	ldr	r2, [r7, #16]
    126c:	68fb      	ldr	r3, [r7, #12]
    126e:	429a      	cmp	r2, r3
    1270:	d127      	bne.n	12c2 <GPIO_Init+0x15a>
      {
        pos = pinpos << 2;
    1272:	69bb      	ldr	r3, [r7, #24]
    1274:	009b      	lsls	r3, r3, #2
    1276:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    1278:	68fb      	ldr	r3, [r7, #12]
    127a:	220f      	movs	r2, #15
    127c:	fa02 f303 	lsl.w	r3, r2, r3
    1280:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    1282:	68bb      	ldr	r3, [r7, #8]
    1284:	43db      	mvns	r3, r3
    1286:	697a      	ldr	r2, [r7, #20]
    1288:	4013      	ands	r3, r2
    128a:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    128c:	68fb      	ldr	r3, [r7, #12]
    128e:	69fa      	ldr	r2, [r7, #28]
    1290:	fa02 f303 	lsl.w	r3, r2, r3
    1294:	697a      	ldr	r2, [r7, #20]
    1296:	4313      	orrs	r3, r2
    1298:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    129a:	683b      	ldr	r3, [r7, #0]
    129c:	78db      	ldrb	r3, [r3, #3]
    129e:	2b28      	cmp	r3, #40	; 0x28
    12a0:	d105      	bne.n	12ae <GPIO_Init+0x146>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12a2:	69bb      	ldr	r3, [r7, #24]
    12a4:	3308      	adds	r3, #8
    12a6:	2201      	movs	r2, #1
    12a8:	409a      	lsls	r2, r3
    12aa:	687b      	ldr	r3, [r7, #4]
    12ac:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    12ae:	683b      	ldr	r3, [r7, #0]
    12b0:	78db      	ldrb	r3, [r3, #3]
    12b2:	2b48      	cmp	r3, #72	; 0x48
    12b4:	d105      	bne.n	12c2 <GPIO_Init+0x15a>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12b6:	69bb      	ldr	r3, [r7, #24]
    12b8:	3308      	adds	r3, #8
    12ba:	2201      	movs	r2, #1
    12bc:	409a      	lsls	r2, r3
    12be:	687b      	ldr	r3, [r7, #4]
    12c0:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    12c2:	69bb      	ldr	r3, [r7, #24]
    12c4:	3301      	adds	r3, #1
    12c6:	61bb      	str	r3, [r7, #24]
    12c8:	69bb      	ldr	r3, [r7, #24]
    12ca:	2b07      	cmp	r3, #7
    12cc:	d9c1      	bls.n	1252 <GPIO_Init+0xea>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
    12ce:	687b      	ldr	r3, [r7, #4]
    12d0:	697a      	ldr	r2, [r7, #20]
    12d2:	605a      	str	r2, [r3, #4]
  }
}
    12d4:	3724      	adds	r7, #36	; 0x24
    12d6:	46bd      	mov	sp, r7
    12d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    12dc:	4770      	bx	lr
    12de:	bf00      	nop

000012e0 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
    12e0:	b480      	push	{r7}
    12e2:	b083      	sub	sp, #12
    12e4:	af00      	add	r7, sp, #0
    12e6:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
    12e8:	687b      	ldr	r3, [r7, #4]
    12ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
    12ee:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
    12f0:	687b      	ldr	r3, [r7, #4]
    12f2:	2202      	movs	r2, #2
    12f4:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
    12f6:	687b      	ldr	r3, [r7, #4]
    12f8:	2204      	movs	r2, #4
    12fa:	70da      	strb	r2, [r3, #3]
}
    12fc:	370c      	adds	r7, #12
    12fe:	46bd      	mov	sp, r7
    1300:	f85d 7b04 	ldr.w	r7, [sp], #4
    1304:	4770      	bx	lr
    1306:	bf00      	nop

00001308 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1308:	b480      	push	{r7}
    130a:	b085      	sub	sp, #20
    130c:	af00      	add	r7, sp, #0
    130e:	6078      	str	r0, [r7, #4]
    1310:	460b      	mov	r3, r1
    1312:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1314:	2300      	movs	r3, #0
    1316:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1318:	687b      	ldr	r3, [r7, #4]
    131a:	689a      	ldr	r2, [r3, #8]
    131c:	887b      	ldrh	r3, [r7, #2]
    131e:	4013      	ands	r3, r2
    1320:	2b00      	cmp	r3, #0
    1322:	d002      	beq.n	132a <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1324:	2301      	movs	r3, #1
    1326:	73fb      	strb	r3, [r7, #15]
    1328:	e001      	b.n	132e <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    132a:	2300      	movs	r3, #0
    132c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    132e:	7bfb      	ldrb	r3, [r7, #15]
}
    1330:	4618      	mov	r0, r3
    1332:	3714      	adds	r7, #20
    1334:	46bd      	mov	sp, r7
    1336:	f85d 7b04 	ldr.w	r7, [sp], #4
    133a:	4770      	bx	lr

0000133c <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
    133c:	b480      	push	{r7}
    133e:	b083      	sub	sp, #12
    1340:	af00      	add	r7, sp, #0
    1342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
    1344:	687b      	ldr	r3, [r7, #4]
    1346:	689b      	ldr	r3, [r3, #8]
    1348:	b29b      	uxth	r3, r3
}
    134a:	4618      	mov	r0, r3
    134c:	370c      	adds	r7, #12
    134e:	46bd      	mov	sp, r7
    1350:	f85d 7b04 	ldr.w	r7, [sp], #4
    1354:	4770      	bx	lr
    1356:	bf00      	nop

00001358 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1358:	b480      	push	{r7}
    135a:	b085      	sub	sp, #20
    135c:	af00      	add	r7, sp, #0
    135e:	6078      	str	r0, [r7, #4]
    1360:	460b      	mov	r3, r1
    1362:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1364:	2300      	movs	r3, #0
    1366:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1368:	687b      	ldr	r3, [r7, #4]
    136a:	68da      	ldr	r2, [r3, #12]
    136c:	887b      	ldrh	r3, [r7, #2]
    136e:	4013      	ands	r3, r2
    1370:	2b00      	cmp	r3, #0
    1372:	d002      	beq.n	137a <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1374:	2301      	movs	r3, #1
    1376:	73fb      	strb	r3, [r7, #15]
    1378:	e001      	b.n	137e <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    137a:	2300      	movs	r3, #0
    137c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    137e:	7bfb      	ldrb	r3, [r7, #15]
}
    1380:	4618      	mov	r0, r3
    1382:	3714      	adds	r7, #20
    1384:	46bd      	mov	sp, r7
    1386:	f85d 7b04 	ldr.w	r7, [sp], #4
    138a:	4770      	bx	lr

0000138c <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
    138c:	b480      	push	{r7}
    138e:	b083      	sub	sp, #12
    1390:	af00      	add	r7, sp, #0
    1392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
    1394:	687b      	ldr	r3, [r7, #4]
    1396:	68db      	ldr	r3, [r3, #12]
    1398:	b29b      	uxth	r3, r3
}
    139a:	4618      	mov	r0, r3
    139c:	370c      	adds	r7, #12
    139e:	46bd      	mov	sp, r7
    13a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    13a4:	4770      	bx	lr
    13a6:	bf00      	nop

000013a8 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13a8:	b480      	push	{r7}
    13aa:	b083      	sub	sp, #12
    13ac:	af00      	add	r7, sp, #0
    13ae:	6078      	str	r0, [r7, #4]
    13b0:	460b      	mov	r3, r1
    13b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
    13b4:	887a      	ldrh	r2, [r7, #2]
    13b6:	687b      	ldr	r3, [r7, #4]
    13b8:	611a      	str	r2, [r3, #16]
}
    13ba:	370c      	adds	r7, #12
    13bc:	46bd      	mov	sp, r7
    13be:	f85d 7b04 	ldr.w	r7, [sp], #4
    13c2:	4770      	bx	lr

000013c4 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13c4:	b480      	push	{r7}
    13c6:	b083      	sub	sp, #12
    13c8:	af00      	add	r7, sp, #0
    13ca:	6078      	str	r0, [r7, #4]
    13cc:	460b      	mov	r3, r1
    13ce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
    13d0:	887a      	ldrh	r2, [r7, #2]
    13d2:	687b      	ldr	r3, [r7, #4]
    13d4:	615a      	str	r2, [r3, #20]
}
    13d6:	370c      	adds	r7, #12
    13d8:	46bd      	mov	sp, r7
    13da:	f85d 7b04 	ldr.w	r7, [sp], #4
    13de:	4770      	bx	lr

000013e0 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
    13e0:	b480      	push	{r7}
    13e2:	b083      	sub	sp, #12
    13e4:	af00      	add	r7, sp, #0
    13e6:	6078      	str	r0, [r7, #4]
    13e8:	4613      	mov	r3, r2
    13ea:	460a      	mov	r2, r1
    13ec:	807a      	strh	r2, [r7, #2]
    13ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
    13f0:	787b      	ldrb	r3, [r7, #1]
    13f2:	2b00      	cmp	r3, #0
    13f4:	d003      	beq.n	13fe <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
    13f6:	887a      	ldrh	r2, [r7, #2]
    13f8:	687b      	ldr	r3, [r7, #4]
    13fa:	611a      	str	r2, [r3, #16]
    13fc:	e002      	b.n	1404 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
    13fe:	887a      	ldrh	r2, [r7, #2]
    1400:	687b      	ldr	r3, [r7, #4]
    1402:	615a      	str	r2, [r3, #20]
  }
}
    1404:	370c      	adds	r7, #12
    1406:	46bd      	mov	sp, r7
    1408:	f85d 7b04 	ldr.w	r7, [sp], #4
    140c:	4770      	bx	lr
    140e:	bf00      	nop

00001410 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
    1410:	b480      	push	{r7}
    1412:	b083      	sub	sp, #12
    1414:	af00      	add	r7, sp, #0
    1416:	6078      	str	r0, [r7, #4]
    1418:	460b      	mov	r3, r1
    141a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
    141c:	887a      	ldrh	r2, [r7, #2]
    141e:	687b      	ldr	r3, [r7, #4]
    1420:	60da      	str	r2, [r3, #12]
}
    1422:	370c      	adds	r7, #12
    1424:	46bd      	mov	sp, r7
    1426:	f85d 7b04 	ldr.w	r7, [sp], #4
    142a:	4770      	bx	lr

0000142c <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    142c:	b480      	push	{r7}
    142e:	b085      	sub	sp, #20
    1430:	af00      	add	r7, sp, #0
    1432:	6078      	str	r0, [r7, #4]
    1434:	460b      	mov	r3, r1
    1436:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0x00010000;
    1438:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    143c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
    143e:	887b      	ldrh	r3, [r7, #2]
    1440:	68fa      	ldr	r2, [r7, #12]
    1442:	4313      	orrs	r3, r2
    1444:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1446:	687b      	ldr	r3, [r7, #4]
    1448:	68fa      	ldr	r2, [r7, #12]
    144a:	619a      	str	r2, [r3, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
    144c:	887a      	ldrh	r2, [r7, #2]
    144e:	687b      	ldr	r3, [r7, #4]
    1450:	619a      	str	r2, [r3, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1452:	687b      	ldr	r3, [r7, #4]
    1454:	68fa      	ldr	r2, [r7, #12]
    1456:	619a      	str	r2, [r3, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    1458:	687b      	ldr	r3, [r7, #4]
    145a:	699b      	ldr	r3, [r3, #24]
    145c:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    145e:	687b      	ldr	r3, [r7, #4]
    1460:	699b      	ldr	r3, [r3, #24]
    1462:	60fb      	str	r3, [r7, #12]
}
    1464:	3714      	adds	r7, #20
    1466:	46bd      	mov	sp, r7
    1468:	f85d 7b04 	ldr.w	r7, [sp], #4
    146c:	4770      	bx	lr
    146e:	bf00      	nop

00001470 <GPIO_EventOutputConfig>:
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    1470:	b480      	push	{r7}
    1472:	b085      	sub	sp, #20
    1474:	af00      	add	r7, sp, #0
    1476:	4602      	mov	r2, r0
    1478:	460b      	mov	r3, r1
    147a:	71fa      	strb	r2, [r7, #7]
    147c:	71bb      	strb	r3, [r7, #6]
  uint32_t tmpreg = 0x00;
    147e:	2300      	movs	r3, #0
    1480:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmpreg = AFIO->EVCR;
    1482:	2300      	movs	r3, #0
    1484:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1488:	681b      	ldr	r3, [r3, #0]
    148a:	60fb      	str	r3, [r7, #12]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
    148c:	68fa      	ldr	r2, [r7, #12]
    148e:	f64f 7380 	movw	r3, #65408	; 0xff80
    1492:	4013      	ands	r3, r2
    1494:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
    1496:	79fb      	ldrb	r3, [r7, #7]
    1498:	011b      	lsls	r3, r3, #4
    149a:	68fa      	ldr	r2, [r7, #12]
    149c:	4313      	orrs	r3, r2
    149e:	60fb      	str	r3, [r7, #12]
  tmpreg |= GPIO_PinSource;
    14a0:	79bb      	ldrb	r3, [r7, #6]
    14a2:	68fa      	ldr	r2, [r7, #12]
    14a4:	4313      	orrs	r3, r2
    14a6:	60fb      	str	r3, [r7, #12]
  AFIO->EVCR = tmpreg;
    14a8:	2300      	movs	r3, #0
    14aa:	f2c4 0301 	movt	r3, #16385	; 0x4001
    14ae:	68fa      	ldr	r2, [r7, #12]
    14b0:	601a      	str	r2, [r3, #0]
}
    14b2:	3714      	adds	r7, #20
    14b4:	46bd      	mov	sp, r7
    14b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    14ba:	4770      	bx	lr

000014bc <GPIO_EventOutputCmd>:
  * @param  NewState: new state of the Event output.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_EventOutputCmd(FunctionalState NewState)
{
    14bc:	b480      	push	{r7}
    14be:	b083      	sub	sp, #12
    14c0:	af00      	add	r7, sp, #0
    14c2:	4603      	mov	r3, r0
    14c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
    14c6:	231c      	movs	r3, #28
    14c8:	f2c4 2320 	movt	r3, #16928	; 0x4220
    14cc:	79fa      	ldrb	r2, [r7, #7]
    14ce:	601a      	str	r2, [r3, #0]
}
    14d0:	370c      	adds	r7, #12
    14d2:	46bd      	mov	sp, r7
    14d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    14d8:	4770      	bx	lr
    14da:	bf00      	nop

000014dc <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
    14dc:	b480      	push	{r7}
    14de:	b087      	sub	sp, #28
    14e0:	af00      	add	r7, sp, #0
    14e2:	6078      	str	r0, [r7, #4]
    14e4:	460b      	mov	r3, r1
    14e6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
    14e8:	2300      	movs	r3, #0
    14ea:	613b      	str	r3, [r7, #16]
    14ec:	2300      	movs	r3, #0
    14ee:	60fb      	str	r3, [r7, #12]
    14f0:	2300      	movs	r3, #0
    14f2:	617b      	str	r3, [r7, #20]
    14f4:	2300      	movs	r3, #0
    14f6:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    14f8:	687b      	ldr	r3, [r7, #4]
    14fa:	2b00      	cmp	r3, #0
    14fc:	da05      	bge.n	150a <GPIO_PinRemapConfig+0x2e>
  {
    tmpreg = AFIO->MAPR2;
    14fe:	2300      	movs	r3, #0
    1500:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1504:	69db      	ldr	r3, [r3, #28]
    1506:	617b      	str	r3, [r7, #20]
    1508:	e004      	b.n	1514 <GPIO_PinRemapConfig+0x38>
  }
  else
  {
    tmpreg = AFIO->MAPR;
    150a:	2300      	movs	r3, #0
    150c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1510:	685b      	ldr	r3, [r3, #4]
    1512:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
    1514:	687b      	ldr	r3, [r7, #4]
    1516:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    151a:	0c1b      	lsrs	r3, r3, #16
    151c:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
    151e:	687b      	ldr	r3, [r7, #4]
    1520:	b29b      	uxth	r3, r3
    1522:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
    1524:	687b      	ldr	r3, [r7, #4]
    1526:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    152a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
    152e:	d10e      	bne.n	154e <GPIO_PinRemapConfig+0x72>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    1530:	697b      	ldr	r3, [r7, #20]
    1532:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    1536:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
    1538:	2300      	movs	r3, #0
    153a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    153e:	2200      	movs	r2, #0
    1540:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1544:	6852      	ldr	r2, [r2, #4]
    1546:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
    154a:	605a      	str	r2, [r3, #4]
    154c:	e021      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
    154e:	687b      	ldr	r3, [r7, #4]
    1550:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    1554:	2b00      	cmp	r3, #0
    1556:	d00e      	beq.n	1576 <GPIO_PinRemapConfig+0x9a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
    1558:	68bb      	ldr	r3, [r7, #8]
    155a:	2203      	movs	r2, #3
    155c:	fa02 f303 	lsl.w	r3, r2, r3
    1560:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
    1562:	68fb      	ldr	r3, [r7, #12]
    1564:	43db      	mvns	r3, r3
    1566:	697a      	ldr	r2, [r7, #20]
    1568:	4013      	ands	r3, r2
    156a:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    156c:	697b      	ldr	r3, [r7, #20]
    156e:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1572:	617b      	str	r3, [r7, #20]
    1574:	e00d      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    1576:	687b      	ldr	r3, [r7, #4]
    1578:	0d5b      	lsrs	r3, r3, #21
    157a:	011b      	lsls	r3, r3, #4
    157c:	693a      	ldr	r2, [r7, #16]
    157e:	fa02 f303 	lsl.w	r3, r2, r3
    1582:	43db      	mvns	r3, r3
    1584:	697a      	ldr	r2, [r7, #20]
    1586:	4013      	ands	r3, r2
    1588:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    158a:	697b      	ldr	r3, [r7, #20]
    158c:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1590:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
    1592:	78fb      	ldrb	r3, [r7, #3]
    1594:	2b00      	cmp	r3, #0
    1596:	d008      	beq.n	15aa <GPIO_PinRemapConfig+0xce>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
    1598:	687b      	ldr	r3, [r7, #4]
    159a:	0d5b      	lsrs	r3, r3, #21
    159c:	011b      	lsls	r3, r3, #4
    159e:	693a      	ldr	r2, [r7, #16]
    15a0:	fa02 f303 	lsl.w	r3, r2, r3
    15a4:	697a      	ldr	r2, [r7, #20]
    15a6:	4313      	orrs	r3, r2
    15a8:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    15aa:	687b      	ldr	r3, [r7, #4]
    15ac:	2b00      	cmp	r3, #0
    15ae:	da05      	bge.n	15bc <GPIO_PinRemapConfig+0xe0>
  {
    AFIO->MAPR2 = tmpreg;
    15b0:	2300      	movs	r3, #0
    15b2:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15b6:	697a      	ldr	r2, [r7, #20]
    15b8:	61da      	str	r2, [r3, #28]
    15ba:	e004      	b.n	15c6 <GPIO_PinRemapConfig+0xea>
  }
  else
  {
    AFIO->MAPR = tmpreg;
    15bc:	2300      	movs	r3, #0
    15be:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15c2:	697a      	ldr	r2, [r7, #20]
    15c4:	605a      	str	r2, [r3, #4]
  }
}
    15c6:	371c      	adds	r7, #28
    15c8:	46bd      	mov	sp, r7
    15ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    15ce:	4770      	bx	lr

000015d0 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    15d0:	b490      	push	{r4, r7}
    15d2:	b084      	sub	sp, #16
    15d4:	af00      	add	r7, sp, #0
    15d6:	4602      	mov	r2, r0
    15d8:	460b      	mov	r3, r1
    15da:	71fa      	strb	r2, [r7, #7]
    15dc:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
    15de:	2300      	movs	r3, #0
    15e0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
    15e2:	79bb      	ldrb	r3, [r7, #6]
    15e4:	f003 0303 	and.w	r3, r3, #3
    15e8:	009b      	lsls	r3, r3, #2
    15ea:	220f      	movs	r2, #15
    15ec:	fa02 f303 	lsl.w	r3, r2, r3
    15f0:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
    15f2:	2300      	movs	r3, #0
    15f4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15f8:	79ba      	ldrb	r2, [r7, #6]
    15fa:	0892      	lsrs	r2, r2, #2
    15fc:	b2d2      	uxtb	r2, r2
    15fe:	4610      	mov	r0, r2
    1600:	2200      	movs	r2, #0
    1602:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1606:	79b9      	ldrb	r1, [r7, #6]
    1608:	0889      	lsrs	r1, r1, #2
    160a:	b2c9      	uxtb	r1, r1
    160c:	3102      	adds	r1, #2
    160e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    1612:	68fa      	ldr	r2, [r7, #12]
    1614:	43d2      	mvns	r2, r2
    1616:	4011      	ands	r1, r2
    1618:	1c82      	adds	r2, r0, #2
    161a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
    161e:	2300      	movs	r3, #0
    1620:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1624:	79ba      	ldrb	r2, [r7, #6]
    1626:	0892      	lsrs	r2, r2, #2
    1628:	b2d2      	uxtb	r2, r2
    162a:	4610      	mov	r0, r2
    162c:	2200      	movs	r2, #0
    162e:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1632:	79b9      	ldrb	r1, [r7, #6]
    1634:	0889      	lsrs	r1, r1, #2
    1636:	b2c9      	uxtb	r1, r1
    1638:	3102      	adds	r1, #2
    163a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    163e:	79fc      	ldrb	r4, [r7, #7]
    1640:	79ba      	ldrb	r2, [r7, #6]
    1642:	f002 0203 	and.w	r2, r2, #3
    1646:	0092      	lsls	r2, r2, #2
    1648:	fa04 f202 	lsl.w	r2, r4, r2
    164c:	4311      	orrs	r1, r2
    164e:	1c82      	adds	r2, r0, #2
    1650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    1654:	3710      	adds	r7, #16
    1656:	46bd      	mov	sp, r7
    1658:	bc90      	pop	{r4, r7}
    165a:	4770      	bx	lr

0000165c <GPIO_ETH_MediaInterfaceConfig>:
  *     @arg GPIO_ETH_MediaInterface_MII: MII mode
  *     @arg GPIO_ETH_MediaInterface_RMII: RMII mode
  * @retval None
  */
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface)
{
    165c:	b480      	push	{r7}
    165e:	b083      	sub	sp, #12
    1660:	af00      	add	r7, sp, #0
    1662:	6078      	str	r0, [r7, #4]
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface));

  /* Configure MII_RMII selection bit */
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface;
    1664:	23dc      	movs	r3, #220	; 0xdc
    1666:	f2c4 2320 	movt	r3, #16928	; 0x4220
    166a:	687a      	ldr	r2, [r7, #4]
    166c:	601a      	str	r2, [r3, #0]
}
    166e:	370c      	adds	r7, #12
    1670:	46bd      	mov	sp, r7
    1672:	f85d 7b04 	ldr.w	r7, [sp], #4
    1676:	4770      	bx	lr

00001678 <USART_DeInit>:
  *   This parameter can be one of the following values:
  *      USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
    1678:	b580      	push	{r7, lr}
    167a:	b082      	sub	sp, #8
    167c:	af00      	add	r7, sp, #0
    167e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
    1680:	687a      	ldr	r2, [r7, #4]
    1682:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    1686:	f2c4 0301 	movt	r3, #16385	; 0x4001
    168a:	429a      	cmp	r2, r3
    168c:	d10a      	bne.n	16a4 <USART_DeInit+0x2c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    168e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    1692:	2101      	movs	r1, #1
    1694:	f7ff fbe4 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
    1698:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    169c:	2100      	movs	r1, #0
    169e:	f7ff fbdf 	bl	e60 <RCC_APB2PeriphResetCmd>
    16a2:	e046      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART2)
    16a4:	687a      	ldr	r2, [r7, #4]
    16a6:	f44f 4388 	mov.w	r3, #17408	; 0x4400
    16aa:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16ae:	429a      	cmp	r2, r3
    16b0:	d10a      	bne.n	16c8 <USART_DeInit+0x50>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    16b2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16b6:	2101      	movs	r1, #1
    16b8:	f7ff fbfa 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
    16bc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16c0:	2100      	movs	r1, #0
    16c2:	f7ff fbf5 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16c6:	e034      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART3)
    16c8:	687a      	ldr	r2, [r7, #4]
    16ca:	f44f 4390 	mov.w	r3, #18432	; 0x4800
    16ce:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16d2:	429a      	cmp	r2, r3
    16d4:	d10a      	bne.n	16ec <USART_DeInit+0x74>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    16d6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16da:	2101      	movs	r1, #1
    16dc:	f7ff fbe8 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
    16e0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16e4:	2100      	movs	r1, #0
    16e6:	f7ff fbe3 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16ea:	e022      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == UART4)
    16ec:	687a      	ldr	r2, [r7, #4]
    16ee:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
    16f2:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16f6:	429a      	cmp	r2, r3
    16f8:	d10a      	bne.n	1710 <USART_DeInit+0x98>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    16fa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    16fe:	2101      	movs	r1, #1
    1700:	f7ff fbd6 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
    1704:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1708:	2100      	movs	r1, #0
    170a:	f7ff fbd1 	bl	eb0 <RCC_APB1PeriphResetCmd>
    170e:	e010      	b.n	1732 <USART_DeInit+0xba>
  }
  else
  {
    if (USARTx == UART5)
    1710:	687a      	ldr	r2, [r7, #4]
    1712:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    1716:	f2c4 0300 	movt	r3, #16384	; 0x4000
    171a:	429a      	cmp	r2, r3
    171c:	d109      	bne.n	1732 <USART_DeInit+0xba>
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    171e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    1722:	2101      	movs	r1, #1
    1724:	f7ff fbc4 	bl	eb0 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    1728:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    172c:	2100      	movs	r1, #0
    172e:	f7ff fbbf 	bl	eb0 <RCC_APB1PeriphResetCmd>
    }
  }
}
    1732:	3708      	adds	r7, #8
    1734:	46bd      	mov	sp, r7
    1736:	bd80      	pop	{r7, pc}

00001738 <USART_Init>:
  *         that contains the configuration information for the specified USART
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
    1738:	b580      	push	{r7, lr}
    173a:	b08c      	sub	sp, #48	; 0x30
    173c:	af00      	add	r7, sp, #0
    173e:	6078      	str	r0, [r7, #4]
    1740:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
    1742:	2300      	movs	r3, #0
    1744:	62fb      	str	r3, [r7, #44]	; 0x2c
    1746:	2300      	movs	r3, #0
    1748:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
    174a:	2300      	movs	r3, #0
    174c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
    174e:	2300      	movs	r3, #0
    1750:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
    1752:	2300      	movs	r3, #0
    1754:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    1756:	687b      	ldr	r3, [r7, #4]
    1758:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    175a:	687b      	ldr	r3, [r7, #4]
    175c:	8a1b      	ldrh	r3, [r3, #16]
    175e:	b29b      	uxth	r3, r3
    1760:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
    1762:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1764:	f64c 73ff 	movw	r3, #53247	; 0xcfff
    1768:	4013      	ands	r3, r2
    176a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
    176c:	683b      	ldr	r3, [r7, #0]
    176e:	88db      	ldrh	r3, [r3, #6]
    1770:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1772:	4313      	orrs	r3, r2
    1774:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1778:	b29a      	uxth	r2, r3
    177a:	687b      	ldr	r3, [r7, #4]
    177c:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
    177e:	687b      	ldr	r3, [r7, #4]
    1780:	899b      	ldrh	r3, [r3, #12]
    1782:	b29b      	uxth	r3, r3
    1784:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
    1786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1788:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
    178c:	4013      	ands	r3, r2
    178e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    1790:	683b      	ldr	r3, [r7, #0]
    1792:	889a      	ldrh	r2, [r3, #4]
    1794:	683b      	ldr	r3, [r7, #0]
    1796:	891b      	ldrh	r3, [r3, #8]
    1798:	4313      	orrs	r3, r2
    179a:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
    179c:	683b      	ldr	r3, [r7, #0]
    179e:	895b      	ldrh	r3, [r3, #10]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    17a0:	4313      	orrs	r3, r2
    17a2:	b29b      	uxth	r3, r3
    17a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17a6:	4313      	orrs	r3, r2
    17a8:	62fb      	str	r3, [r7, #44]	; 0x2c
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
    17aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17ac:	b29a      	uxth	r2, r3
    17ae:	687b      	ldr	r3, [r7, #4]
    17b0:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/
  tmpreg = USARTx->CR3;
    17b2:	687b      	ldr	r3, [r7, #4]
    17b4:	8a9b      	ldrh	r3, [r3, #20]
    17b6:	b29b      	uxth	r3, r3
    17b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
    17ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17bc:	f64f 43ff 	movw	r3, #64767	; 0xfcff
    17c0:	4013      	ands	r3, r2
    17c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
    17c4:	683b      	ldr	r3, [r7, #0]
    17c6:	899b      	ldrh	r3, [r3, #12]
    17c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17ca:	4313      	orrs	r3, r2
    17cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
    17ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17d0:	b29a      	uxth	r2, r3
    17d2:	687b      	ldr	r3, [r7, #4]
    17d4:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
    17d6:	f107 0308 	add.w	r3, r7, #8
    17da:	4618      	mov	r0, r3
    17dc:	f7ff f9ea 	bl	bb4 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
    17e0:	69fa      	ldr	r2, [r7, #28]
    17e2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    17e6:	f2c4 0301 	movt	r3, #16385	; 0x4001
    17ea:	429a      	cmp	r2, r3
    17ec:	d102      	bne.n	17f4 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
    17ee:	697b      	ldr	r3, [r7, #20]
    17f0:	62bb      	str	r3, [r7, #40]	; 0x28
    17f2:	e001      	b.n	17f8 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
    17f4:	693b      	ldr	r3, [r7, #16]
    17f6:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    17f8:	687b      	ldr	r3, [r7, #4]
    17fa:	899b      	ldrh	r3, [r3, #12]
    17fc:	b29b      	uxth	r3, r3
    17fe:	b29b      	uxth	r3, r3
    1800:	b21b      	sxth	r3, r3
    1802:	2b00      	cmp	r3, #0
    1804:	da0c      	bge.n	1820 <USART_Init+0xe8>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));
    1806:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1808:	4613      	mov	r3, r2
    180a:	009b      	lsls	r3, r3, #2
    180c:	4413      	add	r3, r2
    180e:	009a      	lsls	r2, r3, #2
    1810:	441a      	add	r2, r3
    1812:	683b      	ldr	r3, [r7, #0]
    1814:	681b      	ldr	r3, [r3, #0]
    1816:	005b      	lsls	r3, r3, #1
    1818:	fbb2 f3f3 	udiv	r3, r2, r3
    181c:	627b      	str	r3, [r7, #36]	; 0x24
    181e:	e00b      	b.n	1838 <USART_Init+0x100>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));
    1820:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1822:	4613      	mov	r3, r2
    1824:	009b      	lsls	r3, r3, #2
    1826:	4413      	add	r3, r2
    1828:	009a      	lsls	r2, r3, #2
    182a:	441a      	add	r2, r3
    182c:	683b      	ldr	r3, [r7, #0]
    182e:	681b      	ldr	r3, [r3, #0]
    1830:	009b      	lsls	r3, r3, #2
    1832:	fbb2 f3f3 	udiv	r3, r2, r3
    1836:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
    1838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    183a:	f248 531f 	movw	r3, #34079	; 0x851f
    183e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    1842:	fba3 1302 	umull	r1, r3, r3, r2
    1846:	095b      	lsrs	r3, r3, #5
    1848:	011b      	lsls	r3, r3, #4
    184a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
    184c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    184e:	091b      	lsrs	r3, r3, #4
    1850:	2264      	movs	r2, #100	; 0x64
    1852:	fb02 f303 	mul.w	r3, r2, r3
    1856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1858:	1ad3      	subs	r3, r2, r3
    185a:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    185c:	687b      	ldr	r3, [r7, #4]
    185e:	899b      	ldrh	r3, [r3, #12]
    1860:	b29b      	uxth	r3, r3
    1862:	b29b      	uxth	r3, r3
    1864:	b21b      	sxth	r3, r3
    1866:	2b00      	cmp	r3, #0
    1868:	da10      	bge.n	188c <USART_Init+0x154>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
    186a:	6a3b      	ldr	r3, [r7, #32]
    186c:	00db      	lsls	r3, r3, #3
    186e:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1872:	f248 531f 	movw	r3, #34079	; 0x851f
    1876:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    187a:	fba3 1302 	umull	r1, r3, r3, r2
    187e:	095b      	lsrs	r3, r3, #5
    1880:	f003 0307 	and.w	r3, r3, #7
    1884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1886:	4313      	orrs	r3, r2
    1888:	62fb      	str	r3, [r7, #44]	; 0x2c
    188a:	e00f      	b.n	18ac <USART_Init+0x174>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
    188c:	6a3b      	ldr	r3, [r7, #32]
    188e:	011b      	lsls	r3, r3, #4
    1890:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1894:	f248 531f 	movw	r3, #34079	; 0x851f
    1898:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    189c:	fba3 1302 	umull	r1, r3, r3, r2
    18a0:	095b      	lsrs	r3, r3, #5
    18a2:	f003 030f 	and.w	r3, r3, #15
    18a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    18a8:	4313      	orrs	r3, r2
    18aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
    18ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    18ae:	b29a      	uxth	r2, r3
    18b0:	687b      	ldr	r3, [r7, #4]
    18b2:	811a      	strh	r2, [r3, #8]
}
    18b4:	3730      	adds	r7, #48	; 0x30
    18b6:	46bd      	mov	sp, r7
    18b8:	bd80      	pop	{r7, pc}
    18ba:	bf00      	nop

000018bc <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
    18bc:	b480      	push	{r7}
    18be:	b083      	sub	sp, #12
    18c0:	af00      	add	r7, sp, #0
    18c2:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
    18c4:	687b      	ldr	r3, [r7, #4]
    18c6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
    18ca:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
    18cc:	687b      	ldr	r3, [r7, #4]
    18ce:	2200      	movs	r2, #0
    18d0:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
    18d2:	687b      	ldr	r3, [r7, #4]
    18d4:	2200      	movs	r2, #0
    18d6:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
    18d8:	687b      	ldr	r3, [r7, #4]
    18da:	2200      	movs	r2, #0
    18dc:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    18de:	687b      	ldr	r3, [r7, #4]
    18e0:	220c      	movs	r2, #12
    18e2:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    18e4:	687b      	ldr	r3, [r7, #4]
    18e6:	2200      	movs	r2, #0
    18e8:	819a      	strh	r2, [r3, #12]
}
    18ea:	370c      	adds	r7, #12
    18ec:	46bd      	mov	sp, r7
    18ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    18f2:	4770      	bx	lr

000018f4 <USART_ClockInit>:
  *         USART peripheral.
  * @note The Smart Card and Synchronous modes are not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    18f4:	b480      	push	{r7}
    18f6:	b085      	sub	sp, #20
    18f8:	af00      	add	r7, sp, #0
    18fa:	6078      	str	r0, [r7, #4]
    18fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
    18fe:	2300      	movs	r3, #0
    1900:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    1902:	687b      	ldr	r3, [r7, #4]
    1904:	8a1b      	ldrh	r3, [r3, #16]
    1906:	b29b      	uxth	r3, r3
    1908:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
    190a:	68fa      	ldr	r2, [r7, #12]
    190c:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
    1910:	4013      	ands	r3, r2
    1912:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1914:	683b      	ldr	r3, [r7, #0]
    1916:	881a      	ldrh	r2, [r3, #0]
    1918:	683b      	ldr	r3, [r7, #0]
    191a:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
    191c:	4313      	orrs	r3, r2
    191e:	b29a      	uxth	r2, r3
    1920:	683b      	ldr	r3, [r7, #0]
    1922:	889b      	ldrh	r3, [r3, #4]
    1924:	4313      	orrs	r3, r2
    1926:	b29a      	uxth	r2, r3
    1928:	683b      	ldr	r3, [r7, #0]
    192a:	88db      	ldrh	r3, [r3, #6]
    192c:	4313      	orrs	r3, r2
    192e:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1930:	68fa      	ldr	r2, [r7, #12]
    1932:	4313      	orrs	r3, r2
    1934:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1936:	68fb      	ldr	r3, [r7, #12]
    1938:	b29a      	uxth	r2, r3
    193a:	687b      	ldr	r3, [r7, #4]
    193c:	821a      	strh	r2, [r3, #16]
}
    193e:	3714      	adds	r7, #20
    1940:	46bd      	mov	sp, r7
    1942:	f85d 7b04 	ldr.w	r7, [sp], #4
    1946:	4770      	bx	lr

00001948 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    1948:	b480      	push	{r7}
    194a:	b083      	sub	sp, #12
    194c:	af00      	add	r7, sp, #0
    194e:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
    1950:	687b      	ldr	r3, [r7, #4]
    1952:	2200      	movs	r2, #0
    1954:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
    1956:	687b      	ldr	r3, [r7, #4]
    1958:	2200      	movs	r2, #0
    195a:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
    195c:	687b      	ldr	r3, [r7, #4]
    195e:	2200      	movs	r2, #0
    1960:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
    1962:	687b      	ldr	r3, [r7, #4]
    1964:	2200      	movs	r2, #0
    1966:	80da      	strh	r2, [r3, #6]
}
    1968:	370c      	adds	r7, #12
    196a:	46bd      	mov	sp, r7
    196c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1970:	4770      	bx	lr
    1972:	bf00      	nop

00001974 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1974:	b480      	push	{r7}
    1976:	b083      	sub	sp, #12
    1978:	af00      	add	r7, sp, #0
    197a:	6078      	str	r0, [r7, #4]
    197c:	460b      	mov	r3, r1
    197e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1980:	78fb      	ldrb	r3, [r7, #3]
    1982:	2b00      	cmp	r3, #0
    1984:	d008      	beq.n	1998 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
    1986:	687b      	ldr	r3, [r7, #4]
    1988:	899b      	ldrh	r3, [r3, #12]
    198a:	b29b      	uxth	r3, r3
    198c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1990:	b29a      	uxth	r2, r3
    1992:	687b      	ldr	r3, [r7, #4]
    1994:	819a      	strh	r2, [r3, #12]
    1996:	e007      	b.n	19a8 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
    1998:	687b      	ldr	r3, [r7, #4]
    199a:	899b      	ldrh	r3, [r3, #12]
    199c:	b29b      	uxth	r3, r3
    199e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    19a2:	b29a      	uxth	r2, r3
    19a4:	687b      	ldr	r3, [r7, #4]
    19a6:	819a      	strh	r2, [r3, #12]
  }
}
    19a8:	370c      	adds	r7, #12
    19aa:	46bd      	mov	sp, r7
    19ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    19b0:	4770      	bx	lr
    19b2:	bf00      	nop

000019b4 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
    19b4:	b480      	push	{r7}
    19b6:	b087      	sub	sp, #28
    19b8:	af00      	add	r7, sp, #0
    19ba:	6078      	str	r0, [r7, #4]
    19bc:	4613      	mov	r3, r2
    19be:	460a      	mov	r2, r1
    19c0:	807a      	strh	r2, [r7, #2]
    19c2:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
    19c4:	2300      	movs	r3, #0
    19c6:	613b      	str	r3, [r7, #16]
    19c8:	2300      	movs	r3, #0
    19ca:	60fb      	str	r3, [r7, #12]
    19cc:	2300      	movs	r3, #0
    19ce:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
    19d0:	2300      	movs	r3, #0
    19d2:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    19d4:	687b      	ldr	r3, [r7, #4]
    19d6:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    19d8:	887b      	ldrh	r3, [r7, #2]
    19da:	b2db      	uxtb	r3, r3
    19dc:	095b      	lsrs	r3, r3, #5
    19de:	b2db      	uxtb	r3, r3
    19e0:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
    19e2:	887b      	ldrh	r3, [r7, #2]
    19e4:	f003 031f 	and.w	r3, r3, #31
    19e8:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
    19ea:	68fb      	ldr	r3, [r7, #12]
    19ec:	2201      	movs	r2, #1
    19ee:	fa02 f303 	lsl.w	r3, r2, r3
    19f2:	60bb      	str	r3, [r7, #8]

  if (usartreg == 0x01) /* The IT is in CR1 register */
    19f4:	693b      	ldr	r3, [r7, #16]
    19f6:	2b01      	cmp	r3, #1
    19f8:	d103      	bne.n	1a02 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
    19fa:	697b      	ldr	r3, [r7, #20]
    19fc:	330c      	adds	r3, #12
    19fe:	617b      	str	r3, [r7, #20]
    1a00:	e009      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
    1a02:	693b      	ldr	r3, [r7, #16]
    1a04:	2b02      	cmp	r3, #2
    1a06:	d103      	bne.n	1a10 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
    1a08:	697b      	ldr	r3, [r7, #20]
    1a0a:	3310      	adds	r3, #16
    1a0c:	617b      	str	r3, [r7, #20]
    1a0e:	e002      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14;
    1a10:	697b      	ldr	r3, [r7, #20]
    1a12:	3314      	adds	r3, #20
    1a14:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
    1a16:	787b      	ldrb	r3, [r7, #1]
    1a18:	2b00      	cmp	r3, #0
    1a1a:	d006      	beq.n	1a2a <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
    1a1c:	697b      	ldr	r3, [r7, #20]
    1a1e:	697a      	ldr	r2, [r7, #20]
    1a20:	6811      	ldr	r1, [r2, #0]
    1a22:	68ba      	ldr	r2, [r7, #8]
    1a24:	430a      	orrs	r2, r1
    1a26:	601a      	str	r2, [r3, #0]
    1a28:	e006      	b.n	1a38 <USART_ITConfig+0x84>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
    1a2a:	697b      	ldr	r3, [r7, #20]
    1a2c:	697a      	ldr	r2, [r7, #20]
    1a2e:	6811      	ldr	r1, [r2, #0]
    1a30:	68ba      	ldr	r2, [r7, #8]
    1a32:	43d2      	mvns	r2, r2
    1a34:	400a      	ands	r2, r1
    1a36:	601a      	str	r2, [r3, #0]
  }
}
    1a38:	371c      	adds	r7, #28
    1a3a:	46bd      	mov	sp, r7
    1a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a40:	4770      	bx	lr
    1a42:	bf00      	nop

00001a44 <USART_DMACmd>:
  * @note The DMA mode is not available for UART5 except in the STM32
  *       High density value line devices(STM32F10X_HD_VL).
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
    1a44:	b480      	push	{r7}
    1a46:	b083      	sub	sp, #12
    1a48:	af00      	add	r7, sp, #0
    1a4a:	6078      	str	r0, [r7, #4]
    1a4c:	4613      	mov	r3, r2
    1a4e:	460a      	mov	r2, r1
    1a50:	807a      	strh	r2, [r7, #2]
    1a52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1a54:	787b      	ldrb	r3, [r7, #1]
    1a56:	2b00      	cmp	r3, #0
    1a58:	d008      	beq.n	1a6c <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
    1a5a:	687b      	ldr	r3, [r7, #4]
    1a5c:	8a9b      	ldrh	r3, [r3, #20]
    1a5e:	b29a      	uxth	r2, r3
    1a60:	887b      	ldrh	r3, [r7, #2]
    1a62:	4313      	orrs	r3, r2
    1a64:	b29a      	uxth	r2, r3
    1a66:	687b      	ldr	r3, [r7, #4]
    1a68:	829a      	strh	r2, [r3, #20]
    1a6a:	e009      	b.n	1a80 <USART_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
    1a6c:	687b      	ldr	r3, [r7, #4]
    1a6e:	8a9b      	ldrh	r3, [r3, #20]
    1a70:	b29a      	uxth	r2, r3
    1a72:	887b      	ldrh	r3, [r7, #2]
    1a74:	43db      	mvns	r3, r3
    1a76:	b29b      	uxth	r3, r3
    1a78:	4013      	ands	r3, r2
    1a7a:	b29a      	uxth	r2, r3
    1a7c:	687b      	ldr	r3, [r7, #4]
    1a7e:	829a      	strh	r2, [r3, #20]
  }
}
    1a80:	370c      	adds	r7, #12
    1a82:	46bd      	mov	sp, r7
    1a84:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a88:	4770      	bx	lr
    1a8a:	bf00      	nop

00001a8c <USART_SetAddress>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
    1a8c:	b480      	push	{r7}
    1a8e:	b083      	sub	sp, #12
    1a90:	af00      	add	r7, sp, #0
    1a92:	6078      	str	r0, [r7, #4]
    1a94:	460b      	mov	r3, r1
    1a96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address));

  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
    1a98:	687b      	ldr	r3, [r7, #4]
    1a9a:	8a1b      	ldrh	r3, [r3, #16]
    1a9c:	b29b      	uxth	r3, r3
    1a9e:	f023 030f 	bic.w	r3, r3, #15
    1aa2:	b29a      	uxth	r2, r3
    1aa4:	687b      	ldr	r3, [r7, #4]
    1aa6:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
    1aa8:	687b      	ldr	r3, [r7, #4]
    1aaa:	8a1b      	ldrh	r3, [r3, #16]
    1aac:	b29a      	uxth	r2, r3
    1aae:	78fb      	ldrb	r3, [r7, #3]
    1ab0:	b29b      	uxth	r3, r3
    1ab2:	4313      	orrs	r3, r2
    1ab4:	b29a      	uxth	r2, r3
    1ab6:	687b      	ldr	r3, [r7, #4]
    1ab8:	821a      	strh	r2, [r3, #16]
}
    1aba:	370c      	adds	r7, #12
    1abc:	46bd      	mov	sp, r7
    1abe:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ac2:	4770      	bx	lr

00001ac4 <USART_WakeUpConfig>:
  *     @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *     @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
    1ac4:	b480      	push	{r7}
    1ac6:	b083      	sub	sp, #12
    1ac8:	af00      	add	r7, sp, #0
    1aca:	6078      	str	r0, [r7, #4]
    1acc:	460b      	mov	r3, r1
    1ace:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));

  USARTx->CR1 &= CR1_WAKE_Mask;
    1ad0:	687b      	ldr	r3, [r7, #4]
    1ad2:	899b      	ldrh	r3, [r3, #12]
    1ad4:	b29b      	uxth	r3, r3
    1ad6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1ada:	b29a      	uxth	r2, r3
    1adc:	687b      	ldr	r3, [r7, #4]
    1ade:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
    1ae0:	687b      	ldr	r3, [r7, #4]
    1ae2:	899b      	ldrh	r3, [r3, #12]
    1ae4:	b29a      	uxth	r2, r3
    1ae6:	887b      	ldrh	r3, [r7, #2]
    1ae8:	4313      	orrs	r3, r2
    1aea:	b29a      	uxth	r2, r3
    1aec:	687b      	ldr	r3, [r7, #4]
    1aee:	819a      	strh	r2, [r3, #12]
}
    1af0:	370c      	adds	r7, #12
    1af2:	46bd      	mov	sp, r7
    1af4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1af8:	4770      	bx	lr
    1afa:	bf00      	nop

00001afc <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1afc:	b480      	push	{r7}
    1afe:	b083      	sub	sp, #12
    1b00:	af00      	add	r7, sp, #0
    1b02:	6078      	str	r0, [r7, #4]
    1b04:	460b      	mov	r3, r1
    1b06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b08:	78fb      	ldrb	r3, [r7, #3]
    1b0a:	2b00      	cmp	r3, #0
    1b0c:	d008      	beq.n	1b20 <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
    1b0e:	687b      	ldr	r3, [r7, #4]
    1b10:	899b      	ldrh	r3, [r3, #12]
    1b12:	b29b      	uxth	r3, r3
    1b14:	f043 0302 	orr.w	r3, r3, #2
    1b18:	b29a      	uxth	r2, r3
    1b1a:	687b      	ldr	r3, [r7, #4]
    1b1c:	819a      	strh	r2, [r3, #12]
    1b1e:	e007      	b.n	1b30 <USART_ReceiverWakeUpCmd+0x34>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
    1b20:	687b      	ldr	r3, [r7, #4]
    1b22:	899b      	ldrh	r3, [r3, #12]
    1b24:	b29b      	uxth	r3, r3
    1b26:	f023 0302 	bic.w	r3, r3, #2
    1b2a:	b29a      	uxth	r2, r3
    1b2c:	687b      	ldr	r3, [r7, #4]
    1b2e:	819a      	strh	r2, [r3, #12]
  }
}
    1b30:	370c      	adds	r7, #12
    1b32:	46bd      	mov	sp, r7
    1b34:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b38:	4770      	bx	lr
    1b3a:	bf00      	nop

00001b3c <USART_LINBreakDetectLengthConfig>:
  *     @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *     @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
    1b3c:	b480      	push	{r7}
    1b3e:	b083      	sub	sp, #12
    1b40:	af00      	add	r7, sp, #0
    1b42:	6078      	str	r0, [r7, #4]
    1b44:	460b      	mov	r3, r1
    1b46:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));

  USARTx->CR2 &= CR2_LBDL_Mask;
    1b48:	687b      	ldr	r3, [r7, #4]
    1b4a:	8a1b      	ldrh	r3, [r3, #16]
    1b4c:	b29b      	uxth	r3, r3
    1b4e:	f023 0320 	bic.w	r3, r3, #32
    1b52:	b29a      	uxth	r2, r3
    1b54:	687b      	ldr	r3, [r7, #4]
    1b56:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;
    1b58:	687b      	ldr	r3, [r7, #4]
    1b5a:	8a1b      	ldrh	r3, [r3, #16]
    1b5c:	b29a      	uxth	r2, r3
    1b5e:	887b      	ldrh	r3, [r7, #2]
    1b60:	4313      	orrs	r3, r2
    1b62:	b29a      	uxth	r2, r3
    1b64:	687b      	ldr	r3, [r7, #4]
    1b66:	821a      	strh	r2, [r3, #16]
}
    1b68:	370c      	adds	r7, #12
    1b6a:	46bd      	mov	sp, r7
    1b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b70:	4770      	bx	lr
    1b72:	bf00      	nop

00001b74 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1b74:	b480      	push	{r7}
    1b76:	b083      	sub	sp, #12
    1b78:	af00      	add	r7, sp, #0
    1b7a:	6078      	str	r0, [r7, #4]
    1b7c:	460b      	mov	r3, r1
    1b7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b80:	78fb      	ldrb	r3, [r7, #3]
    1b82:	2b00      	cmp	r3, #0
    1b84:	d008      	beq.n	1b98 <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
    1b86:	687b      	ldr	r3, [r7, #4]
    1b88:	8a1b      	ldrh	r3, [r3, #16]
    1b8a:	b29b      	uxth	r3, r3
    1b8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1b90:	b29a      	uxth	r2, r3
    1b92:	687b      	ldr	r3, [r7, #4]
    1b94:	821a      	strh	r2, [r3, #16]
    1b96:	e007      	b.n	1ba8 <USART_LINCmd+0x34>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
    1b98:	687b      	ldr	r3, [r7, #4]
    1b9a:	8a1b      	ldrh	r3, [r3, #16]
    1b9c:	b29b      	uxth	r3, r3
    1b9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    1ba2:	b29a      	uxth	r2, r3
    1ba4:	687b      	ldr	r3, [r7, #4]
    1ba6:	821a      	strh	r2, [r3, #16]
  }
}
    1ba8:	370c      	adds	r7, #12
    1baa:	46bd      	mov	sp, r7
    1bac:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bb0:	4770      	bx	lr
    1bb2:	bf00      	nop

00001bb4 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
    1bb4:	b480      	push	{r7}
    1bb6:	b083      	sub	sp, #12
    1bb8:	af00      	add	r7, sp, #0
    1bba:	6078      	str	r0, [r7, #4]
    1bbc:	460b      	mov	r3, r1
    1bbe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data));

  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
    1bc0:	887b      	ldrh	r3, [r7, #2]
    1bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bc6:	b29a      	uxth	r2, r3
    1bc8:	687b      	ldr	r3, [r7, #4]
    1bca:	809a      	strh	r2, [r3, #4]
}
    1bcc:	370c      	adds	r7, #12
    1bce:	46bd      	mov	sp, r7
    1bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bd4:	4770      	bx	lr
    1bd6:	bf00      	nop

00001bd8 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
    1bd8:	b480      	push	{r7}
    1bda:	b083      	sub	sp, #12
    1bdc:	af00      	add	r7, sp, #0
    1bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
    1be0:	687b      	ldr	r3, [r7, #4]
    1be2:	889b      	ldrh	r3, [r3, #4]
    1be4:	b29b      	uxth	r3, r3
    1be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bea:	b29b      	uxth	r3, r3
}
    1bec:	4618      	mov	r0, r3
    1bee:	370c      	adds	r7, #12
    1bf0:	46bd      	mov	sp, r7
    1bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bf6:	4770      	bx	lr

00001bf8 <USART_SendBreak>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
    1bf8:	b480      	push	{r7}
    1bfa:	b083      	sub	sp, #12
    1bfc:	af00      	add	r7, sp, #0
    1bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
    1c00:	687b      	ldr	r3, [r7, #4]
    1c02:	899b      	ldrh	r3, [r3, #12]
    1c04:	b29b      	uxth	r3, r3
    1c06:	f043 0301 	orr.w	r3, r3, #1
    1c0a:	b29a      	uxth	r2, r3
    1c0c:	687b      	ldr	r3, [r7, #4]
    1c0e:	819a      	strh	r2, [r3, #12]
}
    1c10:	370c      	adds	r7, #12
    1c12:	46bd      	mov	sp, r7
    1c14:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c18:	4770      	bx	lr
    1c1a:	bf00      	nop

00001c1c <USART_SetGuardTime>:
  * @param  USART_GuardTime: specifies the guard time.
  * @note The guard time bits are not available for UART4 and UART5.
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{
    1c1c:	b480      	push	{r7}
    1c1e:	b083      	sub	sp, #12
    1c20:	af00      	add	r7, sp, #0
    1c22:	6078      	str	r0, [r7, #4]
    1c24:	460b      	mov	r3, r1
    1c26:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));

  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
    1c28:	687b      	ldr	r3, [r7, #4]
    1c2a:	8b1b      	ldrh	r3, [r3, #24]
    1c2c:	b29b      	uxth	r3, r3
    1c2e:	b2db      	uxtb	r3, r3
    1c30:	b29a      	uxth	r2, r3
    1c32:	687b      	ldr	r3, [r7, #4]
    1c34:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
    1c36:	687b      	ldr	r3, [r7, #4]
    1c38:	8b1b      	ldrh	r3, [r3, #24]
    1c3a:	b29a      	uxth	r2, r3
    1c3c:	78fb      	ldrb	r3, [r7, #3]
    1c3e:	b29b      	uxth	r3, r3
    1c40:	021b      	lsls	r3, r3, #8
    1c42:	b29b      	uxth	r3, r3
    1c44:	4313      	orrs	r3, r2
    1c46:	b29a      	uxth	r2, r3
    1c48:	687b      	ldr	r3, [r7, #4]
    1c4a:	831a      	strh	r2, [r3, #24]
}
    1c4c:	370c      	adds	r7, #12
    1c4e:	46bd      	mov	sp, r7
    1c50:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c54:	4770      	bx	lr
    1c56:	bf00      	nop

00001c58 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock.
  * @note   The function is used for IrDA mode with UART4 and UART5.
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{
    1c58:	b480      	push	{r7}
    1c5a:	b083      	sub	sp, #12
    1c5c:	af00      	add	r7, sp, #0
    1c5e:	6078      	str	r0, [r7, #4]
    1c60:	460b      	mov	r3, r1
    1c62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
    1c64:	687b      	ldr	r3, [r7, #4]
    1c66:	8b1b      	ldrh	r3, [r3, #24]
    1c68:	b29b      	uxth	r3, r3
    1c6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    1c6e:	b29a      	uxth	r2, r3
    1c70:	687b      	ldr	r3, [r7, #4]
    1c72:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
    1c74:	687b      	ldr	r3, [r7, #4]
    1c76:	8b1b      	ldrh	r3, [r3, #24]
    1c78:	b29a      	uxth	r2, r3
    1c7a:	78fb      	ldrb	r3, [r7, #3]
    1c7c:	b29b      	uxth	r3, r3
    1c7e:	4313      	orrs	r3, r2
    1c80:	b29a      	uxth	r2, r3
    1c82:	687b      	ldr	r3, [r7, #4]
    1c84:	831a      	strh	r2, [r3, #24]
}
    1c86:	370c      	adds	r7, #12
    1c88:	46bd      	mov	sp, r7
    1c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c8e:	4770      	bx	lr

00001c90 <USART_SmartCardCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1c90:	b480      	push	{r7}
    1c92:	b083      	sub	sp, #12
    1c94:	af00      	add	r7, sp, #0
    1c96:	6078      	str	r0, [r7, #4]
    1c98:	460b      	mov	r3, r1
    1c9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1c9c:	78fb      	ldrb	r3, [r7, #3]
    1c9e:	2b00      	cmp	r3, #0
    1ca0:	d008      	beq.n	1cb4 <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
    1ca2:	687b      	ldr	r3, [r7, #4]
    1ca4:	8a9b      	ldrh	r3, [r3, #20]
    1ca6:	b29b      	uxth	r3, r3
    1ca8:	f043 0320 	orr.w	r3, r3, #32
    1cac:	b29a      	uxth	r2, r3
    1cae:	687b      	ldr	r3, [r7, #4]
    1cb0:	829a      	strh	r2, [r3, #20]
    1cb2:	e007      	b.n	1cc4 <USART_SmartCardCmd+0x34>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
    1cb4:	687b      	ldr	r3, [r7, #4]
    1cb6:	8a9b      	ldrh	r3, [r3, #20]
    1cb8:	b29b      	uxth	r3, r3
    1cba:	f023 0320 	bic.w	r3, r3, #32
    1cbe:	b29a      	uxth	r2, r3
    1cc0:	687b      	ldr	r3, [r7, #4]
    1cc2:	829a      	strh	r2, [r3, #20]
  }
}
    1cc4:	370c      	adds	r7, #12
    1cc6:	46bd      	mov	sp, r7
    1cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ccc:	4770      	bx	lr
    1cce:	bf00      	nop

00001cd0 <USART_SmartCardNACKCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1cd0:	b480      	push	{r7}
    1cd2:	b083      	sub	sp, #12
    1cd4:	af00      	add	r7, sp, #0
    1cd6:	6078      	str	r0, [r7, #4]
    1cd8:	460b      	mov	r3, r1
    1cda:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1cdc:	78fb      	ldrb	r3, [r7, #3]
    1cde:	2b00      	cmp	r3, #0
    1ce0:	d008      	beq.n	1cf4 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
    1ce2:	687b      	ldr	r3, [r7, #4]
    1ce4:	8a9b      	ldrh	r3, [r3, #20]
    1ce6:	b29b      	uxth	r3, r3
    1ce8:	f043 0310 	orr.w	r3, r3, #16
    1cec:	b29a      	uxth	r2, r3
    1cee:	687b      	ldr	r3, [r7, #4]
    1cf0:	829a      	strh	r2, [r3, #20]
    1cf2:	e007      	b.n	1d04 <USART_SmartCardNACKCmd+0x34>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
    1cf4:	687b      	ldr	r3, [r7, #4]
    1cf6:	8a9b      	ldrh	r3, [r3, #20]
    1cf8:	b29b      	uxth	r3, r3
    1cfa:	f023 0310 	bic.w	r3, r3, #16
    1cfe:	b29a      	uxth	r2, r3
    1d00:	687b      	ldr	r3, [r7, #4]
    1d02:	829a      	strh	r2, [r3, #20]
  }
}
    1d04:	370c      	adds	r7, #12
    1d06:	46bd      	mov	sp, r7
    1d08:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d0c:	4770      	bx	lr
    1d0e:	bf00      	nop

00001d10 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d10:	b480      	push	{r7}
    1d12:	b083      	sub	sp, #12
    1d14:	af00      	add	r7, sp, #0
    1d16:	6078      	str	r0, [r7, #4]
    1d18:	460b      	mov	r3, r1
    1d1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d1c:	78fb      	ldrb	r3, [r7, #3]
    1d1e:	2b00      	cmp	r3, #0
    1d20:	d008      	beq.n	1d34 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
    1d22:	687b      	ldr	r3, [r7, #4]
    1d24:	8a9b      	ldrh	r3, [r3, #20]
    1d26:	b29b      	uxth	r3, r3
    1d28:	f043 0308 	orr.w	r3, r3, #8
    1d2c:	b29a      	uxth	r2, r3
    1d2e:	687b      	ldr	r3, [r7, #4]
    1d30:	829a      	strh	r2, [r3, #20]
    1d32:	e007      	b.n	1d44 <USART_HalfDuplexCmd+0x34>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
    1d34:	687b      	ldr	r3, [r7, #4]
    1d36:	8a9b      	ldrh	r3, [r3, #20]
    1d38:	b29b      	uxth	r3, r3
    1d3a:	f023 0308 	bic.w	r3, r3, #8
    1d3e:	b29a      	uxth	r2, r3
    1d40:	687b      	ldr	r3, [r7, #4]
    1d42:	829a      	strh	r2, [r3, #20]
  }
}
    1d44:	370c      	adds	r7, #12
    1d46:	46bd      	mov	sp, r7
    1d48:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d4c:	4770      	bx	lr
    1d4e:	bf00      	nop

00001d50 <USART_OverSampling8Cmd>:
  *     This function has to be called before calling USART_Init()
  *     function in order to have correct baudrate Divider value.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d50:	b480      	push	{r7}
    1d52:	b083      	sub	sp, #12
    1d54:	af00      	add	r7, sp, #0
    1d56:	6078      	str	r0, [r7, #4]
    1d58:	460b      	mov	r3, r1
    1d5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d5c:	78fb      	ldrb	r3, [r7, #3]
    1d5e:	2b00      	cmp	r3, #0
    1d60:	d00a      	beq.n	1d78 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= CR1_OVER8_Set;
    1d62:	687b      	ldr	r3, [r7, #4]
    1d64:	899b      	ldrh	r3, [r3, #12]
    1d66:	b29b      	uxth	r3, r3
    1d68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    1d6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    1d70:	b29a      	uxth	r2, r3
    1d72:	687b      	ldr	r3, [r7, #4]
    1d74:	819a      	strh	r2, [r3, #12]
    1d76:	e007      	b.n	1d88 <USART_OverSampling8Cmd+0x38>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= CR1_OVER8_Reset;
    1d78:	687b      	ldr	r3, [r7, #4]
    1d7a:	899b      	ldrh	r3, [r3, #12]
    1d7c:	b29b      	uxth	r3, r3
    1d7e:	f3c3 030e 	ubfx	r3, r3, #0, #15
    1d82:	b29a      	uxth	r2, r3
    1d84:	687b      	ldr	r3, [r7, #4]
    1d86:	819a      	strh	r2, [r3, #12]
  }
}
    1d88:	370c      	adds	r7, #12
    1d8a:	46bd      	mov	sp, r7
    1d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d90:	4770      	bx	lr
    1d92:	bf00      	nop

00001d94 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d94:	b480      	push	{r7}
    1d96:	b083      	sub	sp, #12
    1d98:	af00      	add	r7, sp, #0
    1d9a:	6078      	str	r0, [r7, #4]
    1d9c:	460b      	mov	r3, r1
    1d9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1da0:	78fb      	ldrb	r3, [r7, #3]
    1da2:	2b00      	cmp	r3, #0
    1da4:	d008      	beq.n	1db8 <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= CR3_ONEBITE_Set;
    1da6:	687b      	ldr	r3, [r7, #4]
    1da8:	8a9b      	ldrh	r3, [r3, #20]
    1daa:	b29b      	uxth	r3, r3
    1dac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    1db0:	b29a      	uxth	r2, r3
    1db2:	687b      	ldr	r3, [r7, #4]
    1db4:	829a      	strh	r2, [r3, #20]
    1db6:	e007      	b.n	1dc8 <USART_OneBitMethodCmd+0x34>
  }
  else
  {
    /* Disable tthe one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= CR3_ONEBITE_Reset;
    1db8:	687b      	ldr	r3, [r7, #4]
    1dba:	8a9b      	ldrh	r3, [r3, #20]
    1dbc:	b29b      	uxth	r3, r3
    1dbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1dc2:	b29a      	uxth	r2, r3
    1dc4:	687b      	ldr	r3, [r7, #4]
    1dc6:	829a      	strh	r2, [r3, #20]
  }
}
    1dc8:	370c      	adds	r7, #12
    1dca:	46bd      	mov	sp, r7
    1dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1dd0:	4770      	bx	lr
    1dd2:	bf00      	nop

00001dd4 <USART_IrDAConfig>:
  *     @arg USART_IrDAMode_LowPower
  *     @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
    1dd4:	b480      	push	{r7}
    1dd6:	b083      	sub	sp, #12
    1dd8:	af00      	add	r7, sp, #0
    1dda:	6078      	str	r0, [r7, #4]
    1ddc:	460b      	mov	r3, r1
    1dde:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));

  USARTx->CR3 &= CR3_IRLP_Mask;
    1de0:	687b      	ldr	r3, [r7, #4]
    1de2:	8a9b      	ldrh	r3, [r3, #20]
    1de4:	b29b      	uxth	r3, r3
    1de6:	f023 0304 	bic.w	r3, r3, #4
    1dea:	b29a      	uxth	r2, r3
    1dec:	687b      	ldr	r3, [r7, #4]
    1dee:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
    1df0:	687b      	ldr	r3, [r7, #4]
    1df2:	8a9b      	ldrh	r3, [r3, #20]
    1df4:	b29a      	uxth	r2, r3
    1df6:	887b      	ldrh	r3, [r7, #2]
    1df8:	4313      	orrs	r3, r2
    1dfa:	b29a      	uxth	r2, r3
    1dfc:	687b      	ldr	r3, [r7, #4]
    1dfe:	829a      	strh	r2, [r3, #20]
}
    1e00:	370c      	adds	r7, #12
    1e02:	46bd      	mov	sp, r7
    1e04:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e08:	4770      	bx	lr
    1e0a:	bf00      	nop

00001e0c <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1e0c:	b480      	push	{r7}
    1e0e:	b083      	sub	sp, #12
    1e10:	af00      	add	r7, sp, #0
    1e12:	6078      	str	r0, [r7, #4]
    1e14:	460b      	mov	r3, r1
    1e16:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1e18:	78fb      	ldrb	r3, [r7, #3]
    1e1a:	2b00      	cmp	r3, #0
    1e1c:	d008      	beq.n	1e30 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
    1e1e:	687b      	ldr	r3, [r7, #4]
    1e20:	8a9b      	ldrh	r3, [r3, #20]
    1e22:	b29b      	uxth	r3, r3
    1e24:	f043 0302 	orr.w	r3, r3, #2
    1e28:	b29a      	uxth	r2, r3
    1e2a:	687b      	ldr	r3, [r7, #4]
    1e2c:	829a      	strh	r2, [r3, #20]
    1e2e:	e007      	b.n	1e40 <USART_IrDACmd+0x34>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
    1e30:	687b      	ldr	r3, [r7, #4]
    1e32:	8a9b      	ldrh	r3, [r3, #20]
    1e34:	b29b      	uxth	r3, r3
    1e36:	f023 0302 	bic.w	r3, r3, #2
    1e3a:	b29a      	uxth	r2, r3
    1e3c:	687b      	ldr	r3, [r7, #4]
    1e3e:	829a      	strh	r2, [r3, #20]
  }
}
    1e40:	370c      	adds	r7, #12
    1e42:	46bd      	mov	sp, r7
    1e44:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e48:	4770      	bx	lr
    1e4a:	bf00      	nop

00001e4c <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e4c:	b480      	push	{r7}
    1e4e:	b085      	sub	sp, #20
    1e50:	af00      	add	r7, sp, #0
    1e52:	6078      	str	r0, [r7, #4]
    1e54:	460b      	mov	r3, r1
    1e56:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
    1e58:	2300      	movs	r3, #0
    1e5a:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
    1e5c:	687b      	ldr	r3, [r7, #4]
    1e5e:	881b      	ldrh	r3, [r3, #0]
    1e60:	b29a      	uxth	r2, r3
    1e62:	887b      	ldrh	r3, [r7, #2]
    1e64:	4013      	ands	r3, r2
    1e66:	b29b      	uxth	r3, r3
    1e68:	2b00      	cmp	r3, #0
    1e6a:	d002      	beq.n	1e72 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
    1e6c:	2301      	movs	r3, #1
    1e6e:	73fb      	strb	r3, [r7, #15]
    1e70:	e001      	b.n	1e76 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    1e72:	2300      	movs	r3, #0
    1e74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    1e76:	7bfb      	ldrb	r3, [r7, #15]
}
    1e78:	4618      	mov	r0, r3
    1e7a:	3714      	adds	r7, #20
    1e7c:	46bd      	mov	sp, r7
    1e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e82:	4770      	bx	lr

00001e84 <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e84:	b480      	push	{r7}
    1e86:	b083      	sub	sp, #12
    1e88:	af00      	add	r7, sp, #0
    1e8a:	6078      	str	r0, [r7, #4]
    1e8c:	460b      	mov	r3, r1
    1e8e:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  USARTx->SR = (uint16_t)~USART_FLAG;
    1e90:	887b      	ldrh	r3, [r7, #2]
    1e92:	43db      	mvns	r3, r3
    1e94:	b29a      	uxth	r2, r3
    1e96:	687b      	ldr	r3, [r7, #4]
    1e98:	801a      	strh	r2, [r3, #0]
}
    1e9a:	370c      	adds	r7, #12
    1e9c:	46bd      	mov	sp, r7
    1e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ea2:	4770      	bx	lr

00001ea4 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1ea4:	b480      	push	{r7}
    1ea6:	b087      	sub	sp, #28
    1ea8:	af00      	add	r7, sp, #0
    1eaa:	6078      	str	r0, [r7, #4]
    1eac:	460b      	mov	r3, r1
    1eae:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
    1eb0:	2300      	movs	r3, #0
    1eb2:	60fb      	str	r3, [r7, #12]
    1eb4:	2300      	movs	r3, #0
    1eb6:	617b      	str	r3, [r7, #20]
    1eb8:	2300      	movs	r3, #0
    1eba:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
    1ebc:	2300      	movs	r3, #0
    1ebe:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    1ec0:	887b      	ldrh	r3, [r7, #2]
    1ec2:	b2db      	uxtb	r3, r3
    1ec4:	095b      	lsrs	r3, r3, #5
    1ec6:	b2db      	uxtb	r3, r3
    1ec8:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
    1eca:	887b      	ldrh	r3, [r7, #2]
    1ecc:	f003 031f 	and.w	r3, r3, #31
    1ed0:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
    1ed2:	697b      	ldr	r3, [r7, #20]
    1ed4:	2201      	movs	r2, #1
    1ed6:	fa02 f303 	lsl.w	r3, r2, r3
    1eda:	617b      	str	r3, [r7, #20]

  if (usartreg == 0x01) /* The IT  is in CR1 register */
    1edc:	68bb      	ldr	r3, [r7, #8]
    1ede:	2b01      	cmp	r3, #1
    1ee0:	d106      	bne.n	1ef0 <USART_GetITStatus+0x4c>
  {
    itmask &= USARTx->CR1;
    1ee2:	687b      	ldr	r3, [r7, #4]
    1ee4:	899b      	ldrh	r3, [r3, #12]
    1ee6:	b29b      	uxth	r3, r3
    1ee8:	697a      	ldr	r2, [r7, #20]
    1eea:	4013      	ands	r3, r2
    1eec:	617b      	str	r3, [r7, #20]
    1eee:	e00f      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
    1ef0:	68bb      	ldr	r3, [r7, #8]
    1ef2:	2b02      	cmp	r3, #2
    1ef4:	d106      	bne.n	1f04 <USART_GetITStatus+0x60>
  {
    itmask &= USARTx->CR2;
    1ef6:	687b      	ldr	r3, [r7, #4]
    1ef8:	8a1b      	ldrh	r3, [r3, #16]
    1efa:	b29b      	uxth	r3, r3
    1efc:	697a      	ldr	r2, [r7, #20]
    1efe:	4013      	ands	r3, r2
    1f00:	617b      	str	r3, [r7, #20]
    1f02:	e005      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
    1f04:	687b      	ldr	r3, [r7, #4]
    1f06:	8a9b      	ldrh	r3, [r3, #20]
    1f08:	b29b      	uxth	r3, r3
    1f0a:	697a      	ldr	r2, [r7, #20]
    1f0c:	4013      	ands	r3, r2
    1f0e:	617b      	str	r3, [r7, #20]
  }

  bitpos = USART_IT >> 0x08;
    1f10:	887b      	ldrh	r3, [r7, #2]
    1f12:	0a1b      	lsrs	r3, r3, #8
    1f14:	b29b      	uxth	r3, r3
    1f16:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
    1f18:	68fb      	ldr	r3, [r7, #12]
    1f1a:	2201      	movs	r2, #1
    1f1c:	fa02 f303 	lsl.w	r3, r2, r3
    1f20:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
    1f22:	687b      	ldr	r3, [r7, #4]
    1f24:	881b      	ldrh	r3, [r3, #0]
    1f26:	b29b      	uxth	r3, r3
    1f28:	68fa      	ldr	r2, [r7, #12]
    1f2a:	4013      	ands	r3, r2
    1f2c:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
    1f2e:	697b      	ldr	r3, [r7, #20]
    1f30:	2b00      	cmp	r3, #0
    1f32:	d005      	beq.n	1f40 <USART_GetITStatus+0x9c>
    1f34:	68fb      	ldr	r3, [r7, #12]
    1f36:	2b00      	cmp	r3, #0
    1f38:	d002      	beq.n	1f40 <USART_GetITStatus+0x9c>
  {
    bitstatus = SET;
    1f3a:	2301      	movs	r3, #1
    1f3c:	74fb      	strb	r3, [r7, #19]
    1f3e:	e001      	b.n	1f44 <USART_GetITStatus+0xa0>
  }
  else
  {
    bitstatus = RESET;
    1f40:	2300      	movs	r3, #0
    1f42:	74fb      	strb	r3, [r7, #19]
  }

  return bitstatus;
    1f44:	7cfb      	ldrb	r3, [r7, #19]
}
    1f46:	4618      	mov	r0, r3
    1f48:	371c      	adds	r7, #28
    1f4a:	46bd      	mov	sp, r7
    1f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f50:	4770      	bx	lr
    1f52:	bf00      	nop

00001f54 <USART_ClearITPendingBit>:
  *   - TXE pending bit is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1f54:	b480      	push	{r7}
    1f56:	b085      	sub	sp, #20
    1f58:	af00      	add	r7, sp, #0
    1f5a:	6078      	str	r0, [r7, #4]
    1f5c:	460b      	mov	r3, r1
    1f5e:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
    1f60:	2300      	movs	r3, #0
    1f62:	81fb      	strh	r3, [r7, #14]
    1f64:	2300      	movs	r3, #0
    1f66:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  bitpos = USART_IT >> 0x08;
    1f68:	887b      	ldrh	r3, [r7, #2]
    1f6a:	0a1b      	lsrs	r3, r3, #8
    1f6c:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
    1f6e:	89fb      	ldrh	r3, [r7, #14]
    1f70:	2201      	movs	r2, #1
    1f72:	fa02 f303 	lsl.w	r3, r2, r3
    1f76:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
    1f78:	89bb      	ldrh	r3, [r7, #12]
    1f7a:	43db      	mvns	r3, r3
    1f7c:	b29a      	uxth	r2, r3
    1f7e:	687b      	ldr	r3, [r7, #4]
    1f80:	801a      	strh	r2, [r3, #0]
}
    1f82:	3714      	adds	r7, #20
    1f84:	46bd      	mov	sp, r7
    1f86:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f8a:	4770      	bx	lr

00001f8c <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
    1f8c:	b480      	push	{r7}
    1f8e:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
    1f90:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1f94:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1f98:	2200      	movs	r2, #0
    1f9a:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
    1f9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fa0:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fa4:	2200      	movs	r2, #0
    1fa6:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
    1fa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fac:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fb0:	2200      	movs	r2, #0
    1fb2:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
    1fb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fb8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fbc:	2200      	movs	r2, #0
    1fbe:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x000FFFFF;
    1fc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fc4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1fcc:	f2c0 020f 	movt	r2, #15
    1fd0:	615a      	str	r2, [r3, #20]
}
    1fd2:	46bd      	mov	sp, r7
    1fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1fd8:	4770      	bx	lr
    1fda:	bf00      	nop

00001fdc <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
    1fdc:	b480      	push	{r7}
    1fde:	b085      	sub	sp, #20
    1fe0:	af00      	add	r7, sp, #0
    1fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
    1fe4:	2300      	movs	r3, #0
    1fe6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
    1fe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fec:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1ff0:	60fb      	str	r3, [r7, #12]

  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
    1ff2:	687b      	ldr	r3, [r7, #4]
    1ff4:	799b      	ldrb	r3, [r3, #6]
    1ff6:	2b00      	cmp	r3, #0
    1ff8:	d074      	beq.n	20e4 <EXTI_Init+0x108>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    1ffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1ffe:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2002:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2006:	f2c4 0201 	movt	r2, #16385	; 0x4001
    200a:	6811      	ldr	r1, [r2, #0]
    200c:	687a      	ldr	r2, [r7, #4]
    200e:	6812      	ldr	r2, [r2, #0]
    2010:	43d2      	mvns	r2, r2
    2012:	400a      	ands	r2, r1
    2014:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    2016:	f44f 6380 	mov.w	r3, #1024	; 0x400
    201a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    201e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2022:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2026:	6851      	ldr	r1, [r2, #4]
    2028:	687a      	ldr	r2, [r7, #4]
    202a:	6812      	ldr	r2, [r2, #0]
    202c:	43d2      	mvns	r2, r2
    202e:	400a      	ands	r2, r1
    2030:	605a      	str	r2, [r3, #4]

    tmp += EXTI_InitStruct->EXTI_Mode;
    2032:	687b      	ldr	r3, [r7, #4]
    2034:	791b      	ldrb	r3, [r3, #4]
    2036:	68fa      	ldr	r2, [r7, #12]
    2038:	4413      	add	r3, r2
    203a:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    203c:	68fb      	ldr	r3, [r7, #12]
    203e:	68fa      	ldr	r2, [r7, #12]
    2040:	6811      	ldr	r1, [r2, #0]
    2042:	687a      	ldr	r2, [r7, #4]
    2044:	6812      	ldr	r2, [r2, #0]
    2046:	430a      	orrs	r2, r1
    2048:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    204a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    204e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2052:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2056:	f2c4 0201 	movt	r2, #16385	; 0x4001
    205a:	6891      	ldr	r1, [r2, #8]
    205c:	687a      	ldr	r2, [r7, #4]
    205e:	6812      	ldr	r2, [r2, #0]
    2060:	43d2      	mvns	r2, r2
    2062:	400a      	ands	r2, r1
    2064:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    2066:	f44f 6380 	mov.w	r3, #1024	; 0x400
    206a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    206e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2072:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2076:	68d1      	ldr	r1, [r2, #12]
    2078:	687a      	ldr	r2, [r7, #4]
    207a:	6812      	ldr	r2, [r2, #0]
    207c:	43d2      	mvns	r2, r2
    207e:	400a      	ands	r2, r1
    2080:	60da      	str	r2, [r3, #12]

    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
    2082:	687b      	ldr	r3, [r7, #4]
    2084:	795b      	ldrb	r3, [r3, #5]
    2086:	2b10      	cmp	r3, #16
    2088:	d11a      	bne.n	20c0 <EXTI_Init+0xe4>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
    208a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    208e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2092:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2096:	f2c4 0201 	movt	r2, #16385	; 0x4001
    209a:	6891      	ldr	r1, [r2, #8]
    209c:	687a      	ldr	r2, [r7, #4]
    209e:	6812      	ldr	r2, [r2, #0]
    20a0:	430a      	orrs	r2, r1
    20a2:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    20a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20a8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
    20b0:	f2c4 0201 	movt	r2, #16385	; 0x4001
    20b4:	68d1      	ldr	r1, [r2, #12]
    20b6:	687a      	ldr	r2, [r7, #4]
    20b8:	6812      	ldr	r2, [r2, #0]
    20ba:	430a      	orrs	r2, r1
    20bc:	60da      	str	r2, [r3, #12]
    20be:	e01e      	b.n	20fe <EXTI_Init+0x122>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
    20c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20c4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20c8:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
    20ca:	687b      	ldr	r3, [r7, #4]
    20cc:	795b      	ldrb	r3, [r3, #5]
    20ce:	68fa      	ldr	r2, [r7, #12]
    20d0:	4413      	add	r3, r2
    20d2:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    20d4:	68fb      	ldr	r3, [r7, #12]
    20d6:	68fa      	ldr	r2, [r7, #12]
    20d8:	6811      	ldr	r1, [r2, #0]
    20da:	687a      	ldr	r2, [r7, #4]
    20dc:	6812      	ldr	r2, [r2, #0]
    20de:	430a      	orrs	r2, r1
    20e0:	601a      	str	r2, [r3, #0]
    20e2:	e00c      	b.n	20fe <EXTI_Init+0x122>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
    20e4:	687b      	ldr	r3, [r7, #4]
    20e6:	791b      	ldrb	r3, [r3, #4]
    20e8:	68fa      	ldr	r2, [r7, #12]
    20ea:	4413      	add	r3, r2
    20ec:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
    20ee:	68fb      	ldr	r3, [r7, #12]
    20f0:	68fa      	ldr	r2, [r7, #12]
    20f2:	6811      	ldr	r1, [r2, #0]
    20f4:	687a      	ldr	r2, [r7, #4]
    20f6:	6812      	ldr	r2, [r2, #0]
    20f8:	43d2      	mvns	r2, r2
    20fa:	400a      	ands	r2, r1
    20fc:	601a      	str	r2, [r3, #0]
  }
}
    20fe:	3714      	adds	r7, #20
    2100:	46bd      	mov	sp, r7
    2102:	f85d 7b04 	ldr.w	r7, [sp], #4
    2106:	4770      	bx	lr

00002108 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
    2108:	b480      	push	{r7}
    210a:	b083      	sub	sp, #12
    210c:	af00      	add	r7, sp, #0
    210e:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
    2110:	687b      	ldr	r3, [r7, #4]
    2112:	2200      	movs	r2, #0
    2114:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
    2116:	687b      	ldr	r3, [r7, #4]
    2118:	2200      	movs	r2, #0
    211a:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
    211c:	687b      	ldr	r3, [r7, #4]
    211e:	220c      	movs	r2, #12
    2120:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
    2122:	687b      	ldr	r3, [r7, #4]
    2124:	2200      	movs	r2, #0
    2126:	719a      	strb	r2, [r3, #6]
}
    2128:	370c      	adds	r7, #12
    212a:	46bd      	mov	sp, r7
    212c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2130:	4770      	bx	lr
    2132:	bf00      	nop

00002134 <EXTI_GenerateSWInterrupt>:
  * @param  EXTI_Line: specifies the EXTI lines to be enabled or disabled.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
    2134:	b480      	push	{r7}
    2136:	b083      	sub	sp, #12
    2138:	af00      	add	r7, sp, #0
    213a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->SWIER |= EXTI_Line;
    213c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2140:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2144:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2148:	f2c4 0201 	movt	r2, #16385	; 0x4001
    214c:	6911      	ldr	r1, [r2, #16]
    214e:	687a      	ldr	r2, [r7, #4]
    2150:	430a      	orrs	r2, r1
    2152:	611a      	str	r2, [r3, #16]
}
    2154:	370c      	adds	r7, #12
    2156:	46bd      	mov	sp, r7
    2158:	f85d 7b04 	ldr.w	r7, [sp], #4
    215c:	4770      	bx	lr
    215e:	bf00      	nop

00002160 <EXTI_GetFlagStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
    2160:	b480      	push	{r7}
    2162:	b085      	sub	sp, #20
    2164:	af00      	add	r7, sp, #0
    2166:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    2168:	2300      	movs	r3, #0
    216a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
    216c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2170:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2174:	695a      	ldr	r2, [r3, #20]
    2176:	687b      	ldr	r3, [r7, #4]
    2178:	4013      	ands	r3, r2
    217a:	2b00      	cmp	r3, #0
    217c:	d002      	beq.n	2184 <EXTI_GetFlagStatus+0x24>
  {
    bitstatus = SET;
    217e:	2301      	movs	r3, #1
    2180:	73fb      	strb	r3, [r7, #15]
    2182:	e001      	b.n	2188 <EXTI_GetFlagStatus+0x28>
  }
  else
  {
    bitstatus = RESET;
    2184:	2300      	movs	r3, #0
    2186:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    2188:	7bfb      	ldrb	r3, [r7, #15]
}
    218a:	4618      	mov	r0, r3
    218c:	3714      	adds	r7, #20
    218e:	46bd      	mov	sp, r7
    2190:	f85d 7b04 	ldr.w	r7, [sp], #4
    2194:	4770      	bx	lr
    2196:	bf00      	nop

00002198 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
    2198:	b480      	push	{r7}
    219a:	b083      	sub	sp, #12
    219c:	af00      	add	r7, sp, #0
    219e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    21a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21a4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21a8:	687a      	ldr	r2, [r7, #4]
    21aa:	615a      	str	r2, [r3, #20]
}
    21ac:	370c      	adds	r7, #12
    21ae:	46bd      	mov	sp, r7
    21b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    21b4:	4770      	bx	lr
    21b6:	bf00      	nop

000021b8 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
    21b8:	b480      	push	{r7}
    21ba:	b085      	sub	sp, #20
    21bc:	af00      	add	r7, sp, #0
    21be:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
    21c0:	2300      	movs	r3, #0
    21c2:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
    21c4:	2300      	movs	r3, #0
    21c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  enablestatus =  EXTI->IMR & EXTI_Line;
    21c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21cc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21d0:	681a      	ldr	r2, [r3, #0]
    21d2:	687b      	ldr	r3, [r7, #4]
    21d4:	4013      	ands	r3, r2
    21d6:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
    21d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21dc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21e0:	695a      	ldr	r2, [r3, #20]
    21e2:	687b      	ldr	r3, [r7, #4]
    21e4:	4013      	ands	r3, r2
    21e6:	2b00      	cmp	r3, #0
    21e8:	d005      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
    21ea:	68bb      	ldr	r3, [r7, #8]
    21ec:	2b00      	cmp	r3, #0
    21ee:	d002      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
  {
    bitstatus = SET;
    21f0:	2301      	movs	r3, #1
    21f2:	73fb      	strb	r3, [r7, #15]
    21f4:	e001      	b.n	21fa <EXTI_GetITStatus+0x42>
  }
  else
  {
    bitstatus = RESET;
    21f6:	2300      	movs	r3, #0
    21f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    21fa:	7bfb      	ldrb	r3, [r7, #15]
}
    21fc:	4618      	mov	r0, r3
    21fe:	3714      	adds	r7, #20
    2200:	46bd      	mov	sp, r7
    2202:	f85d 7b04 	ldr.w	r7, [sp], #4
    2206:	4770      	bx	lr

00002208 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
    2208:	b480      	push	{r7}
    220a:	b083      	sub	sp, #12
    220c:	af00      	add	r7, sp, #0
    220e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    2210:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2214:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2218:	687a      	ldr	r2, [r7, #4]
    221a:	615a      	str	r2, [r3, #20]
}
    221c:	370c      	adds	r7, #12
    221e:	46bd      	mov	sp, r7
    2220:	f85d 7b04 	ldr.w	r7, [sp], #4
    2224:	4770      	bx	lr
    2226:	bf00      	nop

00002228 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
    2228:	b480      	push	{r7}
    222a:	b083      	sub	sp, #12
    222c:	af00      	add	r7, sp, #0
    222e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
    2230:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2234:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2238:	687a      	ldr	r2, [r7, #4]
    223a:	f042 62bf 	orr.w	r2, r2, #100139008	; 0x5f80000
    223e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    2242:	60da      	str	r2, [r3, #12]
}
    2244:	370c      	adds	r7, #12
    2246:	46bd      	mov	sp, r7
    2248:	f85d 7b04 	ldr.w	r7, [sp], #4
    224c:	4770      	bx	lr
    224e:	bf00      	nop

00002250 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
    2250:	b480      	push	{r7}
    2252:	b087      	sub	sp, #28
    2254:	af00      	add	r7, sp, #0
    2256:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
    2258:	2300      	movs	r3, #0
    225a:	617b      	str	r3, [r7, #20]
    225c:	2300      	movs	r3, #0
    225e:	613b      	str	r3, [r7, #16]
    2260:	230f      	movs	r3, #15
    2262:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
    2264:	687b      	ldr	r3, [r7, #4]
    2266:	78db      	ldrb	r3, [r3, #3]
    2268:	2b00      	cmp	r3, #0
    226a:	d042      	beq.n	22f2 <NVIC_Init+0xa2>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    226c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2270:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2274:	68db      	ldr	r3, [r3, #12]
    2276:	43db      	mvns	r3, r3
    2278:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    227c:	0a1b      	lsrs	r3, r3, #8
    227e:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
    2280:	697b      	ldr	r3, [r7, #20]
    2282:	f1c3 0304 	rsb	r3, r3, #4
    2286:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
    2288:	697b      	ldr	r3, [r7, #20]
    228a:	68fa      	ldr	r2, [r7, #12]
    228c:	fa22 f303 	lsr.w	r3, r2, r3
    2290:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    2292:	687b      	ldr	r3, [r7, #4]
    2294:	785b      	ldrb	r3, [r3, #1]
    2296:	461a      	mov	r2, r3
    2298:	693b      	ldr	r3, [r7, #16]
    229a:	fa02 f303 	lsl.w	r3, r2, r3
    229e:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
    22a0:	687b      	ldr	r3, [r7, #4]
    22a2:	789b      	ldrb	r3, [r3, #2]
    22a4:	461a      	mov	r2, r3
    22a6:	68fb      	ldr	r3, [r7, #12]
    22a8:	4013      	ands	r3, r2
    22aa:	697a      	ldr	r2, [r7, #20]
    22ac:	4313      	orrs	r3, r2
    22ae:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
    22b0:	697b      	ldr	r3, [r7, #20]
    22b2:	011b      	lsls	r3, r3, #4
    22b4:	617b      	str	r3, [r7, #20]

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    22b6:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22ba:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22be:	687a      	ldr	r2, [r7, #4]
    22c0:	7812      	ldrb	r2, [r2, #0]
    22c2:	4611      	mov	r1, r2
    22c4:	697a      	ldr	r2, [r7, #20]
    22c6:	b2d2      	uxtb	r2, r2
    22c8:	440b      	add	r3, r1
    22ca:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ce:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22d2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22d6:	687a      	ldr	r2, [r7, #4]
    22d8:	7812      	ldrb	r2, [r2, #0]
    22da:	0952      	lsrs	r2, r2, #5
    22dc:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    22de:	6879      	ldr	r1, [r7, #4]
    22e0:	7809      	ldrb	r1, [r1, #0]
    22e2:	f001 011f 	and.w	r1, r1, #31
    22e6:	2001      	movs	r0, #1
    22e8:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    22f0:	e011      	b.n	2316 <NVIC_Init+0xc6>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22f2:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22f6:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22fa:	687a      	ldr	r2, [r7, #4]
    22fc:	7812      	ldrb	r2, [r2, #0]
    22fe:	0952      	lsrs	r2, r2, #5
    2300:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    2302:	6879      	ldr	r1, [r7, #4]
    2304:	7809      	ldrb	r1, [r1, #0]
    2306:	f001 011f 	and.w	r1, r1, #31
    230a:	2001      	movs	r0, #1
    230c:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    2310:	3220      	adds	r2, #32
    2312:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
    2316:	371c      	adds	r7, #28
    2318:	46bd      	mov	sp, r7
    231a:	f85d 7b04 	ldr.w	r7, [sp], #4
    231e:	4770      	bx	lr

00002320 <NVIC_SetVectorTable>:
  * @param  Offset: Vector Table base offset field. This value must be a multiple
  *         of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{
    2320:	b480      	push	{r7}
    2322:	b083      	sub	sp, #12
    2324:	af00      	add	r7, sp, #0
    2326:	6078      	str	r0, [r7, #4]
    2328:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));

  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
    232a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    232e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2332:	683a      	ldr	r2, [r7, #0]
    2334:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
    2338:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    233c:	6879      	ldr	r1, [r7, #4]
    233e:	430a      	orrs	r2, r1
    2340:	609a      	str	r2, [r3, #8]
}
    2342:	370c      	adds	r7, #12
    2344:	46bd      	mov	sp, r7
    2346:	f85d 7b04 	ldr.w	r7, [sp], #4
    234a:	4770      	bx	lr

0000234c <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
    234c:	b480      	push	{r7}
    234e:	b083      	sub	sp, #12
    2350:	af00      	add	r7, sp, #0
    2352:	4602      	mov	r2, r0
    2354:	460b      	mov	r3, r1
    2356:	71fa      	strb	r2, [r7, #7]
    2358:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    235a:	79bb      	ldrb	r3, [r7, #6]
    235c:	2b00      	cmp	r3, #0
    235e:	d00c      	beq.n	237a <NVIC_SystemLPConfig+0x2e>
  {
    SCB->SCR |= LowPowerMode;
    2360:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2364:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2368:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    236c:	f2ce 0200 	movt	r2, #57344	; 0xe000
    2370:	6911      	ldr	r1, [r2, #16]
    2372:	79fa      	ldrb	r2, [r7, #7]
    2374:	430a      	orrs	r2, r1
    2376:	611a      	str	r2, [r3, #16]
    2378:	e00c      	b.n	2394 <NVIC_SystemLPConfig+0x48>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
    237a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    237e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2382:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    2386:	f2ce 0200 	movt	r2, #57344	; 0xe000
    238a:	6911      	ldr	r1, [r2, #16]
    238c:	79fa      	ldrb	r2, [r7, #7]
    238e:	43d2      	mvns	r2, r2
    2390:	400a      	ands	r2, r1
    2392:	611a      	str	r2, [r3, #16]
  }
}
    2394:	370c      	adds	r7, #12
    2396:	46bd      	mov	sp, r7
    2398:	f85d 7b04 	ldr.w	r7, [sp], #4
    239c:	4770      	bx	lr
    239e:	bf00      	nop

000023a0 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
    23a0:	b480      	push	{r7}
    23a2:	b083      	sub	sp, #12
    23a4:	af00      	add	r7, sp, #0
    23a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
    23a8:	687b      	ldr	r3, [r7, #4]
    23aa:	2b04      	cmp	r3, #4
    23ac:	d10c      	bne.n	23c8 <SysTick_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
    23ae:	f24e 0310 	movw	r3, #57360	; 0xe010
    23b2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23b6:	f24e 0210 	movw	r2, #57360	; 0xe010
    23ba:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23be:	6812      	ldr	r2, [r2, #0]
    23c0:	f042 0204 	orr.w	r2, r2, #4
    23c4:	601a      	str	r2, [r3, #0]
    23c6:	e00b      	b.n	23e0 <SysTick_CLKSourceConfig+0x40>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
    23c8:	f24e 0310 	movw	r3, #57360	; 0xe010
    23cc:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23d0:	f24e 0210 	movw	r2, #57360	; 0xe010
    23d4:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23d8:	6812      	ldr	r2, [r2, #0]
    23da:	f022 0204 	bic.w	r2, r2, #4
    23de:	601a      	str	r2, [r3, #0]
  }
}
    23e0:	370c      	adds	r7, #12
    23e2:	46bd      	mov	sp, r7
    23e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    23e8:	4770      	bx	lr
    23ea:	bf00      	nop

000023ec <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
    23ec:	b580      	push	{r7, lr}
    23ee:	b086      	sub	sp, #24
    23f0:	af00      	add	r7, sp, #0
    23f2:	60f8      	str	r0, [r7, #12]
    23f4:	60b9      	str	r1, [r7, #8]
    23f6:	607a      	str	r2, [r7, #4]
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
    23f8:	2038      	movs	r0, #56	; 0x38
    23fa:	f002 f9c7 	bl	478c <pvPortMalloc>
    23fe:	6138      	str	r0, [r7, #16]
	if( pxCoRoutine )
    2400:	693b      	ldr	r3, [r7, #16]
    2402:	2b00      	cmp	r3, #0
    2404:	d058      	beq.n	24b8 <xCoRoutineCreate+0xcc>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
    2406:	f240 230c 	movw	r3, #524	; 0x20c
    240a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    240e:	681b      	ldr	r3, [r3, #0]
    2410:	2b00      	cmp	r3, #0
    2412:	d107      	bne.n	2424 <xCoRoutineCreate+0x38>
		{
			pxCurrentCoRoutine = pxCoRoutine;
    2414:	f240 230c 	movw	r3, #524	; 0x20c
    2418:	f2c2 0300 	movt	r3, #8192	; 0x2000
    241c:	693a      	ldr	r2, [r7, #16]
    241e:	601a      	str	r2, [r3, #0]
			prvInitialiseCoRoutineLists();
    2420:	f000 fa08 	bl	2834 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
    2424:	68bb      	ldr	r3, [r7, #8]
    2426:	2b01      	cmp	r3, #1
    2428:	d901      	bls.n	242e <xCoRoutineCreate+0x42>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
    242a:	2301      	movs	r3, #1
    242c:	60bb      	str	r3, [r7, #8]
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
    242e:	693b      	ldr	r3, [r7, #16]
    2430:	2200      	movs	r2, #0
    2432:	869a      	strh	r2, [r3, #52]	; 0x34
		pxCoRoutine->uxPriority = uxPriority;
    2434:	693b      	ldr	r3, [r7, #16]
    2436:	68ba      	ldr	r2, [r7, #8]
    2438:	62da      	str	r2, [r3, #44]	; 0x2c
		pxCoRoutine->uxIndex = uxIndex;
    243a:	693b      	ldr	r3, [r7, #16]
    243c:	687a      	ldr	r2, [r7, #4]
    243e:	631a      	str	r2, [r3, #48]	; 0x30
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    2440:	693b      	ldr	r3, [r7, #16]
    2442:	68fa      	ldr	r2, [r7, #12]
    2444:	601a      	str	r2, [r3, #0]

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    2446:	693b      	ldr	r3, [r7, #16]
    2448:	3304      	adds	r3, #4
    244a:	4618      	mov	r0, r3
    244c:	f000 fa7c 	bl	2948 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    2450:	693b      	ldr	r3, [r7, #16]
    2452:	3318      	adds	r3, #24
    2454:	4618      	mov	r0, r3
    2456:	f000 fa77 	bl	2948 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    245a:	693b      	ldr	r3, [r7, #16]
    245c:	693a      	ldr	r2, [r7, #16]
    245e:	611a      	str	r2, [r3, #16]
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    2460:	693b      	ldr	r3, [r7, #16]
    2462:	693a      	ldr	r2, [r7, #16]
    2464:	625a      	str	r2, [r3, #36]	; 0x24
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    2466:	68bb      	ldr	r3, [r7, #8]
    2468:	f1c3 0214 	rsb	r2, r3, #20
    246c:	693b      	ldr	r3, [r7, #16]
    246e:	619a      	str	r2, [r3, #24]
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
    2470:	693b      	ldr	r3, [r7, #16]
    2472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2474:	f240 2310 	movw	r3, #528	; 0x210
    2478:	f2c2 0300 	movt	r3, #8192	; 0x2000
    247c:	681b      	ldr	r3, [r3, #0]
    247e:	429a      	cmp	r2, r3
    2480:	d906      	bls.n	2490 <xCoRoutineCreate+0xa4>
    2482:	693b      	ldr	r3, [r7, #16]
    2484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2486:	f240 2310 	movw	r3, #528	; 0x210
    248a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    248e:	601a      	str	r2, [r3, #0]
    2490:	693b      	ldr	r3, [r7, #16]
    2492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2494:	4613      	mov	r3, r2
    2496:	009b      	lsls	r3, r3, #2
    2498:	4413      	add	r3, r2
    249a:	009b      	lsls	r3, r3, #2
    249c:	f240 12a0 	movw	r2, #416	; 0x1a0
    24a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    24a4:	441a      	add	r2, r3
    24a6:	693b      	ldr	r3, [r7, #16]
    24a8:	3304      	adds	r3, #4
    24aa:	4610      	mov	r0, r2
    24ac:	4619      	mov	r1, r3
    24ae:	f000 fa57 	bl	2960 <vListInsertEnd>

		xReturn = pdPASS;
    24b2:	2301      	movs	r3, #1
    24b4:	617b      	str	r3, [r7, #20]
    24b6:	e002      	b.n	24be <xCoRoutineCreate+0xd2>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    24b8:	f04f 33ff 	mov.w	r3, #4294967295
    24bc:	617b      	str	r3, [r7, #20]
	}
	
	return xReturn;	
    24be:	697b      	ldr	r3, [r7, #20]
}
    24c0:	4618      	mov	r0, r3
    24c2:	3718      	adds	r7, #24
    24c4:	46bd      	mov	sp, r7
    24c6:	bd80      	pop	{r7, pc}

000024c8 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
    24c8:	b580      	push	{r7, lr}
    24ca:	b084      	sub	sp, #16
    24cc:	af00      	add	r7, sp, #0
    24ce:	6078      	str	r0, [r7, #4]
    24d0:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    24d2:	f240 2314 	movw	r3, #532	; 0x214
    24d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24da:	681a      	ldr	r2, [r3, #0]
    24dc:	687b      	ldr	r3, [r7, #4]
    24de:	4413      	add	r3, r2
    24e0:	60fb      	str	r3, [r7, #12]

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    24e2:	f240 230c 	movw	r3, #524	; 0x20c
    24e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24ea:	681b      	ldr	r3, [r3, #0]
    24ec:	3304      	adds	r3, #4
    24ee:	4618      	mov	r0, r3
    24f0:	f000 fa96 	bl	2a20 <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    24f4:	f240 230c 	movw	r3, #524	; 0x20c
    24f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24fc:	681b      	ldr	r3, [r3, #0]
    24fe:	68fa      	ldr	r2, [r7, #12]
    2500:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xCoRoutineTickCount )
    2502:	f240 2314 	movw	r3, #532	; 0x214
    2506:	f2c2 0300 	movt	r3, #8192	; 0x2000
    250a:	681b      	ldr	r3, [r3, #0]
    250c:	68fa      	ldr	r2, [r7, #12]
    250e:	429a      	cmp	r2, r3
    2510:	d20f      	bcs.n	2532 <vCoRoutineAddToDelayedList+0x6a>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2512:	f240 13f4 	movw	r3, #500	; 0x1f4
    2516:	f2c2 0300 	movt	r3, #8192	; 0x2000
    251a:	681a      	ldr	r2, [r3, #0]
    251c:	f240 230c 	movw	r3, #524	; 0x20c
    2520:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2524:	681b      	ldr	r3, [r3, #0]
    2526:	3304      	adds	r3, #4
    2528:	4610      	mov	r0, r2
    252a:	4619      	mov	r1, r3
    252c:	f000 fa40 	bl	29b0 <vListInsert>
    2530:	e00e      	b.n	2550 <vCoRoutineAddToDelayedList+0x88>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2532:	f240 13f0 	movw	r3, #496	; 0x1f0
    2536:	f2c2 0300 	movt	r3, #8192	; 0x2000
    253a:	681a      	ldr	r2, [r3, #0]
    253c:	f240 230c 	movw	r3, #524	; 0x20c
    2540:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2544:	681b      	ldr	r3, [r3, #0]
    2546:	3304      	adds	r3, #4
    2548:	4610      	mov	r0, r2
    254a:	4619      	mov	r1, r3
    254c:	f000 fa30 	bl	29b0 <vListInsert>
	}

	if( pxEventList )
    2550:	683b      	ldr	r3, [r7, #0]
    2552:	2b00      	cmp	r3, #0
    2554:	d009      	beq.n	256a <vCoRoutineAddToDelayedList+0xa2>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    2556:	f240 230c 	movw	r3, #524	; 0x20c
    255a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    255e:	681b      	ldr	r3, [r3, #0]
    2560:	3318      	adds	r3, #24
    2562:	6838      	ldr	r0, [r7, #0]
    2564:	4619      	mov	r1, r3
    2566:	f000 fa23 	bl	29b0 <vListInsert>
	}
}
    256a:	3710      	adds	r7, #16
    256c:	46bd      	mov	sp, r7
    256e:	bd80      	pop	{r7, pc}

00002570 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
    2570:	b580      	push	{r7, lr}
    2572:	b082      	sub	sp, #8
    2574:	af00      	add	r7, sp, #0
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    2576:	e039      	b.n	25ec <prvCheckPendingReadyList+0x7c>
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
    2578:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    257c:	f380 8811 	msr	BASEPRI, r0
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
    2580:	f240 13f8 	movw	r3, #504	; 0x1f8
    2584:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2588:	68db      	ldr	r3, [r3, #12]
    258a:	68db      	ldr	r3, [r3, #12]
    258c:	607b      	str	r3, [r7, #4]
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    258e:	687b      	ldr	r3, [r7, #4]
    2590:	3318      	adds	r3, #24
    2592:	4618      	mov	r0, r3
    2594:	f000 fa44 	bl	2a20 <vListRemove>
		}
		portENABLE_INTERRUPTS();
    2598:	f04f 0000 	mov.w	r0, #0
    259c:	f380 8811 	msr	BASEPRI, r0

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    25a0:	687b      	ldr	r3, [r7, #4]
    25a2:	3304      	adds	r3, #4
    25a4:	4618      	mov	r0, r3
    25a6:	f000 fa3b 	bl	2a20 <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    25aa:	687b      	ldr	r3, [r7, #4]
    25ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25ae:	f240 2310 	movw	r3, #528	; 0x210
    25b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25b6:	681b      	ldr	r3, [r3, #0]
    25b8:	429a      	cmp	r2, r3
    25ba:	d906      	bls.n	25ca <prvCheckPendingReadyList+0x5a>
    25bc:	687b      	ldr	r3, [r7, #4]
    25be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25c0:	f240 2310 	movw	r3, #528	; 0x210
    25c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25c8:	601a      	str	r2, [r3, #0]
    25ca:	687b      	ldr	r3, [r7, #4]
    25cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25ce:	4613      	mov	r3, r2
    25d0:	009b      	lsls	r3, r3, #2
    25d2:	4413      	add	r3, r2
    25d4:	009b      	lsls	r3, r3, #2
    25d6:	f240 12a0 	movw	r2, #416	; 0x1a0
    25da:	f2c2 0200 	movt	r2, #8192	; 0x2000
    25de:	441a      	add	r2, r3
    25e0:	687b      	ldr	r3, [r7, #4]
    25e2:	3304      	adds	r3, #4
    25e4:	4610      	mov	r0, r2
    25e6:	4619      	mov	r1, r3
    25e8:	f000 f9ba 	bl	2960 <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    25ec:	f240 13f8 	movw	r3, #504	; 0x1f8
    25f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25f4:	681b      	ldr	r3, [r3, #0]
    25f6:	2b00      	cmp	r3, #0
    25f8:	d1be      	bne.n	2578 <prvCheckPendingReadyList+0x8>
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
    25fa:	3708      	adds	r7, #8
    25fc:	46bd      	mov	sp, r7
    25fe:	bd80      	pop	{r7, pc}

00002600 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
    2600:	b580      	push	{r7, lr}
    2602:	b082      	sub	sp, #8
    2604:	af00      	add	r7, sp, #0
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    2606:	f001 fb2f 	bl	3c68 <xTaskGetTickCount>
    260a:	4602      	mov	r2, r0
    260c:	f240 2318 	movw	r3, #536	; 0x218
    2610:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2614:	681b      	ldr	r3, [r3, #0]
    2616:	1ad2      	subs	r2, r2, r3
    2618:	f240 231c 	movw	r3, #540	; 0x21c
    261c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2620:	601a      	str	r2, [r3, #0]
	while( xPassedTicks )
    2622:	e085      	b.n	2730 <prvCheckDelayedList+0x130>
	{
		xCoRoutineTickCount++;
    2624:	f240 2314 	movw	r3, #532	; 0x214
    2628:	f2c2 0300 	movt	r3, #8192	; 0x2000
    262c:	681b      	ldr	r3, [r3, #0]
    262e:	1c5a      	adds	r2, r3, #1
    2630:	f240 2314 	movw	r3, #532	; 0x214
    2634:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2638:	601a      	str	r2, [r3, #0]
		xPassedTicks--;
    263a:	f240 231c 	movw	r3, #540	; 0x21c
    263e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2642:	681b      	ldr	r3, [r3, #0]
    2644:	1e5a      	subs	r2, r3, #1
    2646:	f240 231c 	movw	r3, #540	; 0x21c
    264a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    264e:	601a      	str	r2, [r3, #0]

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
    2650:	f240 2314 	movw	r3, #532	; 0x214
    2654:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2658:	681b      	ldr	r3, [r3, #0]
    265a:	2b00      	cmp	r3, #0
    265c:	d116      	bne.n	268c <prvCheckDelayedList+0x8c>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
    265e:	f240 13f0 	movw	r3, #496	; 0x1f0
    2662:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2666:	681b      	ldr	r3, [r3, #0]
    2668:	607b      	str	r3, [r7, #4]
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    266a:	f240 13f4 	movw	r3, #500	; 0x1f4
    266e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2672:	681a      	ldr	r2, [r3, #0]
    2674:	f240 13f0 	movw	r3, #496	; 0x1f0
    2678:	f2c2 0300 	movt	r3, #8192	; 0x2000
    267c:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedCoRoutineList = pxTemp;
    267e:	f240 13f4 	movw	r3, #500	; 0x1f4
    2682:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2686:	687a      	ldr	r2, [r7, #4]
    2688:	601a      	str	r2, [r3, #0]
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    268a:	e049      	b.n	2720 <prvCheckDelayedList+0x120>
    268c:	e048      	b.n	2720 <prvCheckDelayedList+0x120>
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    268e:	f240 13f0 	movw	r3, #496	; 0x1f0
    2692:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2696:	681b      	ldr	r3, [r3, #0]
    2698:	68db      	ldr	r3, [r3, #12]
    269a:	68db      	ldr	r3, [r3, #12]
    269c:	603b      	str	r3, [r7, #0]

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
    269e:	683b      	ldr	r3, [r7, #0]
    26a0:	685a      	ldr	r2, [r3, #4]
    26a2:	f240 2314 	movw	r3, #532	; 0x214
    26a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26aa:	681b      	ldr	r3, [r3, #0]
    26ac:	429a      	cmp	r2, r3
    26ae:	d900      	bls.n	26b2 <prvCheckDelayedList+0xb2>
			{			
				/* Timeout not yet expired. */																			
				break;																				
    26b0:	e03e      	b.n	2730 <prvCheckDelayedList+0x130>
			}																						

			portDISABLE_INTERRUPTS();
    26b2:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    26b6:	f380 8811 	msr	BASEPRI, r0
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
    26ba:	683b      	ldr	r3, [r7, #0]
    26bc:	3304      	adds	r3, #4
    26be:	4618      	mov	r0, r3
    26c0:	f000 f9ae 	bl	2a20 <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
    26c4:	683b      	ldr	r3, [r7, #0]
    26c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    26c8:	2b00      	cmp	r3, #0
    26ca:	d004      	beq.n	26d6 <prvCheckDelayedList+0xd6>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
    26cc:	683b      	ldr	r3, [r7, #0]
    26ce:	3318      	adds	r3, #24
    26d0:	4618      	mov	r0, r3
    26d2:	f000 f9a5 	bl	2a20 <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    26d6:	f04f 0000 	mov.w	r0, #0
    26da:	f380 8811 	msr	BASEPRI, r0

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    26de:	683b      	ldr	r3, [r7, #0]
    26e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    26e2:	f240 2310 	movw	r3, #528	; 0x210
    26e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26ea:	681b      	ldr	r3, [r3, #0]
    26ec:	429a      	cmp	r2, r3
    26ee:	d906      	bls.n	26fe <prvCheckDelayedList+0xfe>
    26f0:	683b      	ldr	r3, [r7, #0]
    26f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    26f4:	f240 2310 	movw	r3, #528	; 0x210
    26f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26fc:	601a      	str	r2, [r3, #0]
    26fe:	683b      	ldr	r3, [r7, #0]
    2700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2702:	4613      	mov	r3, r2
    2704:	009b      	lsls	r3, r3, #2
    2706:	4413      	add	r3, r2
    2708:	009b      	lsls	r3, r3, #2
    270a:	f240 12a0 	movw	r2, #416	; 0x1a0
    270e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2712:	441a      	add	r2, r3
    2714:	683b      	ldr	r3, [r7, #0]
    2716:	3304      	adds	r3, #4
    2718:	4610      	mov	r0, r2
    271a:	4619      	mov	r1, r3
    271c:	f000 f920 	bl	2960 <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    2720:	f240 13f0 	movw	r3, #496	; 0x1f0
    2724:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2728:	681b      	ldr	r3, [r3, #0]
    272a:	681b      	ldr	r3, [r3, #0]
    272c:	2b00      	cmp	r3, #0
    272e:	d1ae      	bne.n	268e <prvCheckDelayedList+0x8e>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    2730:	f240 231c 	movw	r3, #540	; 0x21c
    2734:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2738:	681b      	ldr	r3, [r3, #0]
    273a:	2b00      	cmp	r3, #0
    273c:	f47f af72 	bne.w	2624 <prvCheckDelayedList+0x24>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
    2740:	f240 2314 	movw	r3, #532	; 0x214
    2744:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2748:	681a      	ldr	r2, [r3, #0]
    274a:	f240 2318 	movw	r3, #536	; 0x218
    274e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2752:	601a      	str	r2, [r3, #0]
}
    2754:	3708      	adds	r7, #8
    2756:	46bd      	mov	sp, r7
    2758:	bd80      	pop	{r7, pc}
    275a:	bf00      	nop

0000275c <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    275c:	b580      	push	{r7, lr}
    275e:	b082      	sub	sp, #8
    2760:	af00      	add	r7, sp, #0
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
    2762:	f7ff ff05 	bl	2570 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
    2766:	f7ff ff4b 	bl	2600 <prvCheckDelayedList>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    276a:	e012      	b.n	2792 <vCoRoutineSchedule+0x36>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    276c:	f240 2310 	movw	r3, #528	; 0x210
    2770:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2774:	681b      	ldr	r3, [r3, #0]
    2776:	2b00      	cmp	r3, #0
    2778:	d100      	bne.n	277c <vCoRoutineSchedule+0x20>
		{
			/* No more co-routines to check. */
			return;
    277a:	e057      	b.n	282c <vCoRoutineSchedule+0xd0>
		}
		--uxTopCoRoutineReadyPriority;
    277c:	f240 2310 	movw	r3, #528	; 0x210
    2780:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2784:	681b      	ldr	r3, [r3, #0]
    2786:	1e5a      	subs	r2, r3, #1
    2788:	f240 2310 	movw	r3, #528	; 0x210
    278c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2790:	601a      	str	r2, [r3, #0]

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    2792:	f240 2310 	movw	r3, #528	; 0x210
    2796:	f2c2 0300 	movt	r3, #8192	; 0x2000
    279a:	6819      	ldr	r1, [r3, #0]
    279c:	f240 12a0 	movw	r2, #416	; 0x1a0
    27a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27a4:	460b      	mov	r3, r1
    27a6:	009b      	lsls	r3, r3, #2
    27a8:	440b      	add	r3, r1
    27aa:	009b      	lsls	r3, r3, #2
    27ac:	4413      	add	r3, r2
    27ae:	681b      	ldr	r3, [r3, #0]
    27b0:	2b00      	cmp	r3, #0
    27b2:	d0db      	beq.n	276c <vCoRoutineSchedule+0x10>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    27b4:	f240 2310 	movw	r3, #528	; 0x210
    27b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27bc:	681a      	ldr	r2, [r3, #0]
    27be:	4613      	mov	r3, r2
    27c0:	009b      	lsls	r3, r3, #2
    27c2:	4413      	add	r3, r2
    27c4:	009b      	lsls	r3, r3, #2
    27c6:	f240 12a0 	movw	r2, #416	; 0x1a0
    27ca:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27ce:	4413      	add	r3, r2
    27d0:	607b      	str	r3, [r7, #4]
    27d2:	687b      	ldr	r3, [r7, #4]
    27d4:	685b      	ldr	r3, [r3, #4]
    27d6:	685a      	ldr	r2, [r3, #4]
    27d8:	687b      	ldr	r3, [r7, #4]
    27da:	605a      	str	r2, [r3, #4]
    27dc:	687b      	ldr	r3, [r7, #4]
    27de:	685a      	ldr	r2, [r3, #4]
    27e0:	687b      	ldr	r3, [r7, #4]
    27e2:	3308      	adds	r3, #8
    27e4:	429a      	cmp	r2, r3
    27e6:	d104      	bne.n	27f2 <vCoRoutineSchedule+0x96>
    27e8:	687b      	ldr	r3, [r7, #4]
    27ea:	685b      	ldr	r3, [r3, #4]
    27ec:	685a      	ldr	r2, [r3, #4]
    27ee:	687b      	ldr	r3, [r7, #4]
    27f0:	605a      	str	r2, [r3, #4]
    27f2:	687b      	ldr	r3, [r7, #4]
    27f4:	685b      	ldr	r3, [r3, #4]
    27f6:	68da      	ldr	r2, [r3, #12]
    27f8:	f240 230c 	movw	r3, #524	; 0x20c
    27fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2800:	601a      	str	r2, [r3, #0]

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    2802:	f240 230c 	movw	r3, #524	; 0x20c
    2806:	f2c2 0300 	movt	r3, #8192	; 0x2000
    280a:	681b      	ldr	r3, [r3, #0]
    280c:	681a      	ldr	r2, [r3, #0]
    280e:	f240 230c 	movw	r3, #524	; 0x20c
    2812:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2816:	6819      	ldr	r1, [r3, #0]
    2818:	f240 230c 	movw	r3, #524	; 0x20c
    281c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2820:	681b      	ldr	r3, [r3, #0]
    2822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2824:	4608      	mov	r0, r1
    2826:	4619      	mov	r1, r3
    2828:	4790      	blx	r2

	return;
    282a:	bf00      	nop
}
    282c:	3708      	adds	r7, #8
    282e:	46bd      	mov	sp, r7
    2830:	bd80      	pop	{r7, pc}
    2832:	bf00      	nop

00002834 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
    2834:	b580      	push	{r7, lr}
    2836:	b082      	sub	sp, #8
    2838:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    283a:	2300      	movs	r3, #0
    283c:	607b      	str	r3, [r7, #4]
    283e:	e00f      	b.n	2860 <prvInitialiseCoRoutineLists+0x2c>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    2840:	687a      	ldr	r2, [r7, #4]
    2842:	4613      	mov	r3, r2
    2844:	009b      	lsls	r3, r3, #2
    2846:	4413      	add	r3, r2
    2848:	009b      	lsls	r3, r3, #2
    284a:	f240 12a0 	movw	r2, #416	; 0x1a0
    284e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2852:	4413      	add	r3, r2
    2854:	4618      	mov	r0, r3
    2856:	f000 f857 	bl	2908 <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    285a:	687b      	ldr	r3, [r7, #4]
    285c:	3301      	adds	r3, #1
    285e:	607b      	str	r3, [r7, #4]
    2860:	687b      	ldr	r3, [r7, #4]
    2862:	2b01      	cmp	r3, #1
    2864:	d9ec      	bls.n	2840 <prvInitialiseCoRoutineLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
    2866:	f240 10c8 	movw	r0, #456	; 0x1c8
    286a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    286e:	f000 f84b 	bl	2908 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
    2872:	f240 10dc 	movw	r0, #476	; 0x1dc
    2876:	f2c2 0000 	movt	r0, #8192	; 0x2000
    287a:	f000 f845 	bl	2908 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
    287e:	f240 10f8 	movw	r0, #504	; 0x1f8
    2882:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2886:	f000 f83f 	bl	2908 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    288a:	f240 13f0 	movw	r3, #496	; 0x1f0
    288e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2892:	f240 12c8 	movw	r2, #456	; 0x1c8
    2896:	f2c2 0200 	movt	r2, #8192	; 0x2000
    289a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    289c:	f240 13f4 	movw	r3, #500	; 0x1f4
    28a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28a4:	f240 12dc 	movw	r2, #476	; 0x1dc
    28a8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    28ac:	601a      	str	r2, [r3, #0]
}
    28ae:	3708      	adds	r7, #8
    28b0:	46bd      	mov	sp, r7
    28b2:	bd80      	pop	{r7, pc}

000028b4 <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
    28b4:	b580      	push	{r7, lr}
    28b6:	b084      	sub	sp, #16
    28b8:	af00      	add	r7, sp, #0
    28ba:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    28bc:	687b      	ldr	r3, [r7, #4]
    28be:	68db      	ldr	r3, [r3, #12]
    28c0:	68db      	ldr	r3, [r3, #12]
    28c2:	60bb      	str	r3, [r7, #8]
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    28c4:	68bb      	ldr	r3, [r7, #8]
    28c6:	3318      	adds	r3, #24
    28c8:	4618      	mov	r0, r3
    28ca:	f000 f8a9 	bl	2a20 <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    28ce:	68bb      	ldr	r3, [r7, #8]
    28d0:	3318      	adds	r3, #24
    28d2:	f240 10f8 	movw	r0, #504	; 0x1f8
    28d6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    28da:	4619      	mov	r1, r3
    28dc:	f000 f840 	bl	2960 <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
    28e0:	68bb      	ldr	r3, [r7, #8]
    28e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    28e4:	f240 230c 	movw	r3, #524	; 0x20c
    28e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28ec:	681b      	ldr	r3, [r3, #0]
    28ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    28f0:	429a      	cmp	r2, r3
    28f2:	d302      	bcc.n	28fa <xCoRoutineRemoveFromEventList+0x46>
	{
		xReturn = pdTRUE;
    28f4:	2301      	movs	r3, #1
    28f6:	60fb      	str	r3, [r7, #12]
    28f8:	e001      	b.n	28fe <xCoRoutineRemoveFromEventList+0x4a>
	}
	else
	{
		xReturn = pdFALSE;
    28fa:	2300      	movs	r3, #0
    28fc:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    28fe:	68fb      	ldr	r3, [r7, #12]
}
    2900:	4618      	mov	r0, r3
    2902:	3710      	adds	r7, #16
    2904:	46bd      	mov	sp, r7
    2906:	bd80      	pop	{r7, pc}

00002908 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    2908:	b480      	push	{r7}
    290a:	b083      	sub	sp, #12
    290c:	af00      	add	r7, sp, #0
    290e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    2910:	687b      	ldr	r3, [r7, #4]
    2912:	f103 0208 	add.w	r2, r3, #8
    2916:	687b      	ldr	r3, [r7, #4]
    2918:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    291a:	687b      	ldr	r3, [r7, #4]
    291c:	f04f 32ff 	mov.w	r2, #4294967295
    2920:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    2922:	687b      	ldr	r3, [r7, #4]
    2924:	f103 0208 	add.w	r2, r3, #8
    2928:	687b      	ldr	r3, [r7, #4]
    292a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    292c:	687b      	ldr	r3, [r7, #4]
    292e:	f103 0208 	add.w	r2, r3, #8
    2932:	687b      	ldr	r3, [r7, #4]
    2934:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    2936:	687b      	ldr	r3, [r7, #4]
    2938:	2200      	movs	r2, #0
    293a:	601a      	str	r2, [r3, #0]
}
    293c:	370c      	adds	r7, #12
    293e:	46bd      	mov	sp, r7
    2940:	f85d 7b04 	ldr.w	r7, [sp], #4
    2944:	4770      	bx	lr
    2946:	bf00      	nop

00002948 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
    2948:	b480      	push	{r7}
    294a:	b083      	sub	sp, #12
    294c:	af00      	add	r7, sp, #0
    294e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    2950:	687b      	ldr	r3, [r7, #4]
    2952:	2200      	movs	r2, #0
    2954:	611a      	str	r2, [r3, #16]
}
    2956:	370c      	adds	r7, #12
    2958:	46bd      	mov	sp, r7
    295a:	f85d 7b04 	ldr.w	r7, [sp], #4
    295e:	4770      	bx	lr

00002960 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    2960:	b480      	push	{r7}
    2962:	b085      	sub	sp, #20
    2964:	af00      	add	r7, sp, #0
    2966:	6078      	str	r0, [r7, #4]
    2968:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    296a:	687b      	ldr	r3, [r7, #4]
    296c:	685b      	ldr	r3, [r3, #4]
    296e:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
    2970:	68fb      	ldr	r3, [r7, #12]
    2972:	685a      	ldr	r2, [r3, #4]
    2974:	683b      	ldr	r3, [r7, #0]
    2976:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
    2978:	687b      	ldr	r3, [r7, #4]
    297a:	685a      	ldr	r2, [r3, #4]
    297c:	683b      	ldr	r3, [r7, #0]
    297e:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2980:	68fb      	ldr	r3, [r7, #12]
    2982:	685b      	ldr	r3, [r3, #4]
    2984:	683a      	ldr	r2, [r7, #0]
    2986:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    2988:	68fb      	ldr	r3, [r7, #12]
    298a:	683a      	ldr	r2, [r7, #0]
    298c:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    298e:	687b      	ldr	r3, [r7, #4]
    2990:	683a      	ldr	r2, [r7, #0]
    2992:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2994:	683b      	ldr	r3, [r7, #0]
    2996:	687a      	ldr	r2, [r7, #4]
    2998:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    299a:	687b      	ldr	r3, [r7, #4]
    299c:	681b      	ldr	r3, [r3, #0]
    299e:	1c5a      	adds	r2, r3, #1
    29a0:	687b      	ldr	r3, [r7, #4]
    29a2:	601a      	str	r2, [r3, #0]
}
    29a4:	3714      	adds	r7, #20
    29a6:	46bd      	mov	sp, r7
    29a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    29ac:	4770      	bx	lr
    29ae:	bf00      	nop

000029b0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    29b0:	b480      	push	{r7}
    29b2:	b085      	sub	sp, #20
    29b4:	af00      	add	r7, sp, #0
    29b6:	6078      	str	r0, [r7, #4]
    29b8:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    29ba:	683b      	ldr	r3, [r7, #0]
    29bc:	681b      	ldr	r3, [r3, #0]
    29be:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    29c0:	68bb      	ldr	r3, [r7, #8]
    29c2:	f1b3 3fff 	cmp.w	r3, #4294967295
    29c6:	d103      	bne.n	29d0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    29c8:	687b      	ldr	r3, [r7, #4]
    29ca:	691b      	ldr	r3, [r3, #16]
    29cc:	60fb      	str	r3, [r7, #12]
    29ce:	e00c      	b.n	29ea <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    29d0:	687b      	ldr	r3, [r7, #4]
    29d2:	3308      	adds	r3, #8
    29d4:	60fb      	str	r3, [r7, #12]
    29d6:	e002      	b.n	29de <vListInsert+0x2e>
    29d8:	68fb      	ldr	r3, [r7, #12]
    29da:	685b      	ldr	r3, [r3, #4]
    29dc:	60fb      	str	r3, [r7, #12]
    29de:	68fb      	ldr	r3, [r7, #12]
    29e0:	685b      	ldr	r3, [r3, #4]
    29e2:	681a      	ldr	r2, [r3, #0]
    29e4:	68bb      	ldr	r3, [r7, #8]
    29e6:	429a      	cmp	r2, r3
    29e8:	d9f6      	bls.n	29d8 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    29ea:	68fb      	ldr	r3, [r7, #12]
    29ec:	685a      	ldr	r2, [r3, #4]
    29ee:	683b      	ldr	r3, [r7, #0]
    29f0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    29f2:	683b      	ldr	r3, [r7, #0]
    29f4:	685b      	ldr	r3, [r3, #4]
    29f6:	683a      	ldr	r2, [r7, #0]
    29f8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    29fa:	683b      	ldr	r3, [r7, #0]
    29fc:	68fa      	ldr	r2, [r7, #12]
    29fe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    2a00:	68fb      	ldr	r3, [r7, #12]
    2a02:	683a      	ldr	r2, [r7, #0]
    2a04:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2a06:	683b      	ldr	r3, [r7, #0]
    2a08:	687a      	ldr	r2, [r7, #4]
    2a0a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    2a0c:	687b      	ldr	r3, [r7, #4]
    2a0e:	681b      	ldr	r3, [r3, #0]
    2a10:	1c5a      	adds	r2, r3, #1
    2a12:	687b      	ldr	r3, [r7, #4]
    2a14:	601a      	str	r2, [r3, #0]
}
    2a16:	3714      	adds	r7, #20
    2a18:	46bd      	mov	sp, r7
    2a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a1e:	4770      	bx	lr

00002a20 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    2a20:	b480      	push	{r7}
    2a22:	b085      	sub	sp, #20
    2a24:	af00      	add	r7, sp, #0
    2a26:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    2a28:	687b      	ldr	r3, [r7, #4]
    2a2a:	685b      	ldr	r3, [r3, #4]
    2a2c:	687a      	ldr	r2, [r7, #4]
    2a2e:	6892      	ldr	r2, [r2, #8]
    2a30:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    2a32:	687b      	ldr	r3, [r7, #4]
    2a34:	689b      	ldr	r3, [r3, #8]
    2a36:	687a      	ldr	r2, [r7, #4]
    2a38:	6852      	ldr	r2, [r2, #4]
    2a3a:	605a      	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    2a3c:	687b      	ldr	r3, [r7, #4]
    2a3e:	691b      	ldr	r3, [r3, #16]
    2a40:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    2a42:	68fb      	ldr	r3, [r7, #12]
    2a44:	685a      	ldr	r2, [r3, #4]
    2a46:	687b      	ldr	r3, [r7, #4]
    2a48:	429a      	cmp	r2, r3
    2a4a:	d103      	bne.n	2a54 <vListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    2a4c:	687b      	ldr	r3, [r7, #4]
    2a4e:	689a      	ldr	r2, [r3, #8]
    2a50:	68fb      	ldr	r3, [r7, #12]
    2a52:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
    2a54:	687b      	ldr	r3, [r7, #4]
    2a56:	2200      	movs	r2, #0
    2a58:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
    2a5a:	68fb      	ldr	r3, [r7, #12]
    2a5c:	681b      	ldr	r3, [r3, #0]
    2a5e:	1e5a      	subs	r2, r3, #1
    2a60:	68fb      	ldr	r3, [r7, #12]
    2a62:	601a      	str	r2, [r3, #0]
}
    2a64:	3714      	adds	r7, #20
    2a66:	46bd      	mov	sp, r7
    2a68:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a6c:	4770      	bx	lr
    2a6e:	bf00      	nop

00002a70 <timer_init>:
 * running at Clk/1024.  For 16 Mhz clock, this will be every
 * 16384 microseconds, or 61 Hz.
 */
static inline void
timer_init( void )
{
    2a70:	b480      	push	{r7}
    2a72:	af00      	add	r7, sp, #0
  /* Timer1 @ Clk/1: System clock, ppm and servos pulses */
  TCCR1A		= 0x00;
    2a74:	f248 032f 	movw	r3, #32815	; 0x802f
    2a78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a7c:	2200      	movs	r2, #0
    2a7e:	701a      	strb	r2, [r3, #0]
  TCCR1B		= 0x01;
    2a80:	f248 032e 	movw	r3, #32814	; 0x802e
    2a84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a88:	2201      	movs	r2, #1
    2a8a:	701a      	strb	r2, [r3, #0]
  
  /* Timer2 @ Clk/1024: Periodic clock            */
  TCCR2		= 0x07;
    2a8c:	f248 0325 	movw	r3, #32805	; 0x8025
    2a90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a94:	2207      	movs	r2, #7
    2a96:	701a      	strb	r2, [r3, #0]
}
    2a98:	46bd      	mov	sp, r7
    2a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a9e:	4770      	bx	lr

00002aa0 <vPapabenchInit>:

extern uint8_t mode ;
extern uint8_t pprz_mode;

void vPapabenchInit()
{
    2aa0:	b580      	push	{r7, lr}
    2aa2:	af00      	add	r7, sp, #0
    mode = MODE_AUTO;
    2aa4:	f64b 4310 	movw	r3, #48144	; 0xbc10
    2aa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    2aac:	2201      	movs	r2, #1
    2aae:	701a      	strb	r2, [r3, #0]
    pprz_mode = PPRZ_MODE_HOME;
    2ab0:	f24b 439c 	movw	r3, #46236	; 0xb49c
    2ab4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    2ab8:	2203      	movs	r2, #3
    2aba:	701a      	strb	r2, [r3, #0]
    timer_init();
    2abc:	f7ff ffd8 	bl	2a70 <timer_init>
    modem_init();
    2ac0:	f009 f9b2 	bl	be28 <modem_init>
    adc_init();
    2ac4:	f009 fcfc 	bl	c4c0 <adc_init>
#ifdef CTL_BRD_V1_1
    adc_buf_channel(uint8_t adc_channel, struct adc_buf *s);
#endif 
    spi_init();
    2ac8:	f009 fc6e 	bl	c3a8 <spi_init>
    link_fbw_init();
    2acc:	f009 faca 	bl	c064 <link_fbw_init>
    gps_init();
    2ad0:	f009 fda6 	bl	c620 <gps_init>
    nav_init();
    2ad4:	f00d f8b6 	bl	fc44 <nav_init>
    ir_init();
    2ad8:	f00a f862 	bl	cba0 <ir_init>
    estimator_init();
    2adc:	f00d fa98 	bl	10010 <estimator_init>
#ifdef PAPABENCH_SINGLE
    fbw_init();
#endif
}
    2ae0:	bd80      	pop	{r7, pc}
    2ae2:	bf00      	nop

00002ae4 <vTask_0>:


void vTask_0()
{
    2ae4:	b580      	push	{r7, lr}
    2ae6:	af00      	add	r7, sp, #0
    last_radio_from_ppm(); //ppm.h
    2ae8:	f00e fa6e 	bl	10fc8 <last_radio_from_ppm>
}
    2aec:	bd80      	pop	{r7, pc}
    2aee:	bf00      	nop

00002af0 <vTask_1>:

void  vTask_1()
{
    2af0:	b580      	push	{r7, lr}
    2af2:	af00      	add	r7, sp, #0
    to_autopilot_from_last_radio();  //main_auto.c
    2af4:	f00e fe22 	bl	1173c <to_autopilot_from_last_radio>
    spi_reset(); // spi_fbw.h
    2af8:	f00e fd5e 	bl	115b8 <spi_reset>
}
    2afc:	bd80      	pop	{r7, pc}
    2afe:	bf00      	nop

00002b00 <vTask_2>:

void  vTask_2()
{
    2b00:	b580      	push	{r7, lr}
    2b02:	af00      	add	r7, sp, #0
    check_mega128_values_task(); // main_auto.c
    2b04:	f00e ff62 	bl	119cc <check_mega128_values_task>
}
    2b08:	bd80      	pop	{r7, pc}
    2b0a:	bf00      	nop

00002b0c <vTask_3>:

void vTask_3()
{
    2b0c:	b580      	push	{r7, lr}
    2b0e:	af00      	add	r7, sp, #0
    servo_transmit(); //servo.h
    2b10:	f00f f834 	bl	11b7c <servo_transmit>
}
    2b14:	bd80      	pop	{r7, pc}
    2b16:	bf00      	nop

00002b18 <vTask_4>:

void vTask_4()
{
    2b18:	b580      	push	{r7, lr}
    2b1a:	af00      	add	r7, sp, #0
    check_failsafe_task(); //main_auto.c
    2b1c:	f00e ff4c 	bl	119b8 <check_failsafe_task>
}
    2b20:	bd80      	pop	{r7, pc}
    2b22:	bf00      	nop

00002b24 <vTask_5>:

void vTask_5()
{
    2b24:	b580      	push	{r7, lr}
    2b26:	af00      	add	r7, sp, #0
    radio_control_task(); //main_auto.c
    2b28:	f007 fe1c 	bl	a764 <radio_control_task>
    ir_gain_calib();
    2b2c:	f00a f890 	bl	cc50 <ir_gain_calib>
}
    2b30:	bd80      	pop	{r7, pc}
    2b32:	bf00      	nop

00002b34 <vTask_6>:

void vTask_6()
{
    2b34:	b580      	push	{r7, lr}
    2b36:	af00      	add	r7, sp, #0
    ir_update();
    2b38:	f00a f84c 	bl	cbd4 <ir_update>
    estimator_update_state_infrared();
    2b3c:	f00d fad2 	bl	100e4 <estimator_update_state_infrared>
    roll_pitch_pid_run();
    2b40:	f00a f8b6 	bl	ccb0 <roll_pitch_pid_run>
}
    2b44:	bd80      	pop	{r7, pc}
    2b46:	bf00      	nop

00002b48 <vTask_7>:

void vTask_7()
{
    2b48:	b580      	push	{r7, lr}
    2b4a:	af00      	add	r7, sp, #0
    link_fbw_send(); // link_fbw.h
    2b4c:	f009 fa9c 	bl	c088 <link_fbw_send>
}
    2b50:	bd80      	pop	{r7, pc}
    2b52:	bf00      	nop

00002b54 <vTask_8>:

void vTask_8()
{
    2b54:	b580      	push	{r7, lr}
    2b56:	af00      	add	r7, sp, #0
    parse_gps_msg();
    2b58:	f009 fd6e 	bl	c638 <parse_gps_msg>
    use_gps_pos();
    2b5c:	f009 f910 	bl	bd80 <use_gps_pos>
}
    2b60:	bd80      	pop	{r7, pc}
    2b62:	bf00      	nop

00002b64 <vTask_9>:

void vTask_9()
{
    2b64:	b580      	push	{r7, lr}
    2b66:	af00      	add	r7, sp, #0
    navigation_update();
    2b68:	f007 fef6 	bl	a958 <navigation_update>
    send_nav_values();
    2b6c:	f007 ff0a 	bl	a984 <send_nav_values>
    course_run();
    2b70:	f008 ffe4 	bl	bb3c <course_run>
}
    2b74:	bd80      	pop	{r7, pc}
    2b76:	bf00      	nop

00002b78 <vTask_10>:

void vTask_10()
{
    2b78:	b580      	push	{r7, lr}
    2b7a:	af00      	add	r7, sp, #0
    altitude_control_task();
    2b7c:	f009 f802 	bl	bb84 <altitude_control_task>
}
    2b80:	bd80      	pop	{r7, pc}
    2b82:	bf00      	nop

00002b84 <vTask_11>:

void vTask_11()
{
    2b84:	b580      	push	{r7, lr}
    2b86:	af00      	add	r7, sp, #0
    climb_control_task();
    2b88:	f009 f816 	bl	bbb8 <climb_control_task>
}
    2b8c:	bd80      	pop	{r7, pc}
    2b8e:	bf00      	nop

00002b90 <vTask_12>:

void vTask_12()
{
    2b90:	b580      	push	{r7, lr}
    2b92:	af00      	add	r7, sp, #0
    reporting_task();
    2b94:	f007 fd9a 	bl	a6cc <reporting_task>
}
    2b98:	bd80      	pop	{r7, pc}
    2b9a:	bf00      	nop

00002b9c <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
    2b9c:	b580      	push	{r7, lr}
    2b9e:	b084      	sub	sp, #16
    2ba0:	af00      	add	r7, sp, #0
    2ba2:	6078      	str	r0, [r7, #4]
    2ba4:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn = pdPASS;
    2ba6:	2301      	movs	r3, #1
    2ba8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	/* If the queue being reset has already been used (has not just been
	created), then only reset the queue if its event lists are empty. */
	if( xNewQueue != pdTRUE )
    2baa:	683b      	ldr	r3, [r7, #0]
    2bac:	2b01      	cmp	r3, #1
    2bae:	d00b      	beq.n	2bc8 <xQueueGenericReset+0x2c>
	{
		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2bb0:	687b      	ldr	r3, [r7, #4]
    2bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2bb4:	2b00      	cmp	r3, #0
    2bb6:	d001      	beq.n	2bbc <xQueueGenericReset+0x20>
		{
			xReturn = pdFAIL;
    2bb8:	2300      	movs	r3, #0
    2bba:	60fb      	str	r3, [r7, #12]
		}

		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2bbc:	687b      	ldr	r3, [r7, #4]
    2bbe:	691b      	ldr	r3, [r3, #16]
    2bc0:	2b00      	cmp	r3, #0
    2bc2:	d001      	beq.n	2bc8 <xQueueGenericReset+0x2c>
		{
			xReturn = pdFAIL;
    2bc4:	2300      	movs	r3, #0
    2bc6:	60fb      	str	r3, [r7, #12]
		}
	}

	if( xReturn == pdPASS )
    2bc8:	68fb      	ldr	r3, [r7, #12]
    2bca:	2b01      	cmp	r3, #1
    2bcc:	d12f      	bne.n	2c2e <xQueueGenericReset+0x92>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    2bce:	687b      	ldr	r3, [r7, #4]
    2bd0:	681a      	ldr	r2, [r3, #0]
    2bd2:	687b      	ldr	r3, [r7, #4]
    2bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2bd6:	6879      	ldr	r1, [r7, #4]
    2bd8:	6c09      	ldr	r1, [r1, #64]	; 0x40
    2bda:	fb01 f303 	mul.w	r3, r1, r3
    2bde:	441a      	add	r2, r3
    2be0:	687b      	ldr	r3, [r7, #4]
    2be2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    2be4:	687b      	ldr	r3, [r7, #4]
    2be6:	2200      	movs	r2, #0
    2be8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    2bea:	687b      	ldr	r3, [r7, #4]
    2bec:	681a      	ldr	r2, [r3, #0]
    2bee:	687b      	ldr	r3, [r7, #4]
    2bf0:	609a      	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
    2bf2:	687b      	ldr	r3, [r7, #4]
    2bf4:	681a      	ldr	r2, [r3, #0]
    2bf6:	687b      	ldr	r3, [r7, #4]
    2bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2bfa:	3b01      	subs	r3, #1
    2bfc:	6879      	ldr	r1, [r7, #4]
    2bfe:	6c09      	ldr	r1, [r1, #64]	; 0x40
    2c00:	fb01 f303 	mul.w	r3, r1, r3
    2c04:	441a      	add	r2, r3
    2c06:	687b      	ldr	r3, [r7, #4]
    2c08:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
    2c0a:	687b      	ldr	r3, [r7, #4]
    2c0c:	f04f 32ff 	mov.w	r2, #4294967295
    2c10:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
    2c12:	687b      	ldr	r3, [r7, #4]
    2c14:	f04f 32ff 	mov.w	r2, #4294967295
    2c18:	649a      	str	r2, [r3, #72]	; 0x48

		/* Ensure the event queues start with the correct state. */
		vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    2c1a:	687b      	ldr	r3, [r7, #4]
    2c1c:	3310      	adds	r3, #16
    2c1e:	4618      	mov	r0, r3
    2c20:	f7ff fe72 	bl	2908 <vListInitialise>
		vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    2c24:	687b      	ldr	r3, [r7, #4]
    2c26:	3324      	adds	r3, #36	; 0x24
    2c28:	4618      	mov	r0, r3
    2c2a:	f7ff fe6d 	bl	2908 <vListInitialise>
	}

	return xReturn;
    2c2e:	68fb      	ldr	r3, [r7, #12]
}
    2c30:	4618      	mov	r0, r3
    2c32:	3710      	adds	r7, #16
    2c34:	46bd      	mov	sp, r7
    2c36:	bd80      	pop	{r7, pc}

00002c38 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
    2c38:	b580      	push	{r7, lr}
    2c3a:	b088      	sub	sp, #32
    2c3c:	af00      	add	r7, sp, #0
    2c3e:	60f8      	str	r0, [r7, #12]
    2c40:	60b9      	str	r1, [r7, #8]
    2c42:	4613      	mov	r3, r2
    2c44:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    2c46:	2300      	movs	r3, #0
    2c48:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    2c4a:	68fb      	ldr	r3, [r7, #12]
    2c4c:	2b00      	cmp	r3, #0
    2c4e:	d026      	beq.n	2c9e <xQueueGenericCreate+0x66>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    2c50:	204c      	movs	r0, #76	; 0x4c
    2c52:	f001 fd9b 	bl	478c <pvPortMalloc>
    2c56:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
    2c58:	69bb      	ldr	r3, [r7, #24]
    2c5a:	2b00      	cmp	r3, #0
    2c5c:	d01f      	beq.n	2c9e <xQueueGenericCreate+0x66>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    2c5e:	68fb      	ldr	r3, [r7, #12]
    2c60:	68ba      	ldr	r2, [r7, #8]
    2c62:	fb02 f303 	mul.w	r3, r2, r3
    2c66:	3301      	adds	r3, #1
    2c68:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    2c6a:	6978      	ldr	r0, [r7, #20]
    2c6c:	f001 fd8e 	bl	478c <pvPortMalloc>
    2c70:	4602      	mov	r2, r0
    2c72:	69bb      	ldr	r3, [r7, #24]
    2c74:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
    2c76:	69bb      	ldr	r3, [r7, #24]
    2c78:	681b      	ldr	r3, [r3, #0]
    2c7a:	2b00      	cmp	r3, #0
    2c7c:	d00c      	beq.n	2c98 <xQueueGenericCreate+0x60>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
    2c7e:	69bb      	ldr	r3, [r7, #24]
    2c80:	68fa      	ldr	r2, [r7, #12]
    2c82:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
    2c84:	69bb      	ldr	r3, [r7, #24]
    2c86:	68ba      	ldr	r2, [r7, #8]
    2c88:	641a      	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
    2c8a:	69b8      	ldr	r0, [r7, #24]
    2c8c:	2101      	movs	r1, #1
    2c8e:	f7ff ff85 	bl	2b9c <xQueueGenericReset>
					pxNewQueue->ucQueueType = ucQueueType;
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    2c92:	69bb      	ldr	r3, [r7, #24]
    2c94:	61fb      	str	r3, [r7, #28]
    2c96:	e002      	b.n	2c9e <xQueueGenericCreate+0x66>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
    2c98:	69b8      	ldr	r0, [r7, #24]
    2c9a:	f001 fe3b 	bl	4914 <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    2c9e:	69fb      	ldr	r3, [r7, #28]
}
    2ca0:	4618      	mov	r0, r3
    2ca2:	3720      	adds	r7, #32
    2ca4:	46bd      	mov	sp, r7
    2ca6:	bd80      	pop	{r7, pc}

00002ca8 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( unsigned char ucQueueType )
	{
    2ca8:	b580      	push	{r7, lr}
    2caa:	b084      	sub	sp, #16
    2cac:	af00      	add	r7, sp, #0
    2cae:	4603      	mov	r3, r0
    2cb0:	71fb      	strb	r3, [r7, #7]
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    2cb2:	204c      	movs	r0, #76	; 0x4c
    2cb4:	f001 fd6a 	bl	478c <pvPortMalloc>
    2cb8:	60f8      	str	r0, [r7, #12]
		if( pxNewQueue != NULL )
    2cba:	68fb      	ldr	r3, [r7, #12]
    2cbc:	2b00      	cmp	r3, #0
    2cbe:	d02c      	beq.n	2d1a <xQueueCreateMutex+0x72>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    2cc0:	68fb      	ldr	r3, [r7, #12]
    2cc2:	2200      	movs	r2, #0
    2cc4:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    2cc6:	68fb      	ldr	r3, [r7, #12]
    2cc8:	2200      	movs	r2, #0
    2cca:	601a      	str	r2, [r3, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
    2ccc:	68fb      	ldr	r3, [r7, #12]
    2cce:	2200      	movs	r2, #0
    2cd0:	609a      	str	r2, [r3, #8]
			pxNewQueue->pcReadFrom = NULL;
    2cd2:	68fb      	ldr	r3, [r7, #12]
    2cd4:	2200      	movs	r2, #0
    2cd6:	60da      	str	r2, [r3, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    2cd8:	68fb      	ldr	r3, [r7, #12]
    2cda:	2200      	movs	r2, #0
    2cdc:	639a      	str	r2, [r3, #56]	; 0x38
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
    2cde:	68fb      	ldr	r3, [r7, #12]
    2ce0:	2201      	movs	r2, #1
    2ce2:	63da      	str	r2, [r3, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
    2ce4:	68fb      	ldr	r3, [r7, #12]
    2ce6:	2200      	movs	r2, #0
    2ce8:	641a      	str	r2, [r3, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
    2cea:	68fb      	ldr	r3, [r7, #12]
    2cec:	f04f 32ff 	mov.w	r2, #4294967295
    2cf0:	645a      	str	r2, [r3, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
    2cf2:	68fb      	ldr	r3, [r7, #12]
    2cf4:	f04f 32ff 	mov.w	r2, #4294967295
    2cf8:	649a      	str	r2, [r3, #72]	; 0x48
				pxNewQueue->ucQueueType = ucQueueType;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    2cfa:	68fb      	ldr	r3, [r7, #12]
    2cfc:	3310      	adds	r3, #16
    2cfe:	4618      	mov	r0, r3
    2d00:	f7ff fe02 	bl	2908 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    2d04:	68fb      	ldr	r3, [r7, #12]
    2d06:	3324      	adds	r3, #36	; 0x24
    2d08:	4618      	mov	r0, r3
    2d0a:	f7ff fdfd 	bl	2908 <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
    2d0e:	68f8      	ldr	r0, [r7, #12]
    2d10:	2100      	movs	r1, #0
    2d12:	2200      	movs	r2, #0
    2d14:	2300      	movs	r3, #0
    2d16:	f000 f81d 	bl	2d54 <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
    2d1a:	68fb      	ldr	r3, [r7, #12]
	}
    2d1c:	4618      	mov	r0, r3
    2d1e:	3710      	adds	r7, #16
    2d20:	46bd      	mov	sp, r7
    2d22:	bd80      	pop	{r7, pc}

00002d24 <xQueueGetMutexHolder>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void* xQueueGetMutexHolder( xQueueHandle xSemaphore )
	{
    2d24:	b580      	push	{r7, lr}
    2d26:	b084      	sub	sp, #16
    2d28:	af00      	add	r7, sp, #0
    2d2a:	6078      	str	r0, [r7, #4]
		/* This function is called by xSemaphoreGetMutexHolder(), and should not
		be called directly.  Note:  This is is a good way of determining if the
		calling task is the mutex holder, but not a good way of determining the
		identity of the mutex holder, as the holder may change between the
		following critical section exiting and the function returning. */
		taskENTER_CRITICAL();
    2d2c:	f001 fcb4 	bl	4698 <vPortEnterCritical>
		{
			if( xSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
    2d30:	687b      	ldr	r3, [r7, #4]
    2d32:	681b      	ldr	r3, [r3, #0]
    2d34:	2b00      	cmp	r3, #0
    2d36:	d103      	bne.n	2d40 <xQueueGetMutexHolder+0x1c>
			{
				pxReturn = ( void * ) xSemaphore->pxMutexHolder;
    2d38:	687b      	ldr	r3, [r7, #4]
    2d3a:	685b      	ldr	r3, [r3, #4]
    2d3c:	60fb      	str	r3, [r7, #12]
    2d3e:	e001      	b.n	2d44 <xQueueGetMutexHolder+0x20>
			}
			else
			{
				pxReturn = NULL;
    2d40:	2300      	movs	r3, #0
    2d42:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
    2d44:	f001 fcbe 	bl	46c4 <vPortExitCritical>
		
		return pxReturn;
    2d48:	68fb      	ldr	r3, [r7, #12]
	}
    2d4a:	4618      	mov	r0, r3
    2d4c:	3710      	adds	r7, #16
    2d4e:	46bd      	mov	sp, r7
    2d50:	bd80      	pop	{r7, pc}
    2d52:	bf00      	nop

00002d54 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    2d54:	b580      	push	{r7, lr}
    2d56:	b088      	sub	sp, #32
    2d58:	af00      	add	r7, sp, #0
    2d5a:	60f8      	str	r0, [r7, #12]
    2d5c:	60b9      	str	r1, [r7, #8]
    2d5e:	607a      	str	r2, [r7, #4]
    2d60:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    2d62:	2300      	movs	r3, #0
    2d64:	61fb      	str	r3, [r7, #28]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    2d66:	f001 fc97 	bl	4698 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    2d6a:	68fb      	ldr	r3, [r7, #12]
    2d6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    2d6e:	68fb      	ldr	r3, [r7, #12]
    2d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2d72:	429a      	cmp	r2, r3
    2d74:	d216      	bcs.n	2da4 <xQueueGenericSend+0x50>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    2d76:	68f8      	ldr	r0, [r7, #12]
    2d78:	68b9      	ldr	r1, [r7, #8]
    2d7a:	683a      	ldr	r2, [r7, #0]
    2d7c:	f000 f9d6 	bl	312c <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2d80:	68fb      	ldr	r3, [r7, #12]
    2d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2d84:	2b00      	cmp	r3, #0
    2d86:	d009      	beq.n	2d9c <xQueueGenericSend+0x48>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    2d88:	68fb      	ldr	r3, [r7, #12]
    2d8a:	3324      	adds	r3, #36	; 0x24
    2d8c:	4618      	mov	r0, r3
    2d8e:	f001 f92d 	bl	3fec <xTaskRemoveFromEventList>
    2d92:	4603      	mov	r3, r0
    2d94:	2b01      	cmp	r3, #1
    2d96:	d101      	bne.n	2d9c <xQueueGenericSend+0x48>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    2d98:	f001 fc70 	bl	467c <vPortYieldFromISR>
					}
				}

				taskEXIT_CRITICAL();
    2d9c:	f001 fc92 	bl	46c4 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    2da0:	2301      	movs	r3, #1
    2da2:	e059      	b.n	2e58 <xQueueGenericSend+0x104>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    2da4:	687b      	ldr	r3, [r7, #4]
    2da6:	2b00      	cmp	r3, #0
    2da8:	d103      	bne.n	2db2 <xQueueGenericSend+0x5e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    2daa:	f001 fc8b 	bl	46c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    2dae:	2300      	movs	r3, #0
    2db0:	e052      	b.n	2e58 <xQueueGenericSend+0x104>
				}
				else if( xEntryTimeSet == pdFALSE )
    2db2:	69fb      	ldr	r3, [r7, #28]
    2db4:	2b00      	cmp	r3, #0
    2db6:	d106      	bne.n	2dc6 <xQueueGenericSend+0x72>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    2db8:	f107 0314 	add.w	r3, r7, #20
    2dbc:	4618      	mov	r0, r3
    2dbe:	f001 f96d 	bl	409c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    2dc2:	2301      	movs	r3, #1
    2dc4:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    2dc6:	f001 fc7d 	bl	46c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    2dca:	f000 fe93 	bl	3af4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    2dce:	f001 fc63 	bl	4698 <vPortEnterCritical>
    2dd2:	68fb      	ldr	r3, [r7, #12]
    2dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
    2dda:	d102      	bne.n	2de2 <xQueueGenericSend+0x8e>
    2ddc:	68fb      	ldr	r3, [r7, #12]
    2dde:	2200      	movs	r2, #0
    2de0:	645a      	str	r2, [r3, #68]	; 0x44
    2de2:	68fb      	ldr	r3, [r7, #12]
    2de4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2de6:	f1b3 3fff 	cmp.w	r3, #4294967295
    2dea:	d102      	bne.n	2df2 <xQueueGenericSend+0x9e>
    2dec:	68fb      	ldr	r3, [r7, #12]
    2dee:	2200      	movs	r2, #0
    2df0:	649a      	str	r2, [r3, #72]	; 0x48
    2df2:	f001 fc67 	bl	46c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2df6:	f107 0214 	add.w	r2, r7, #20
    2dfa:	1d3b      	adds	r3, r7, #4
    2dfc:	4610      	mov	r0, r2
    2dfe:	4619      	mov	r1, r3
    2e00:	f001 f964 	bl	40cc <xTaskCheckForTimeOut>
    2e04:	4603      	mov	r3, r0
    2e06:	2b00      	cmp	r3, #0
    2e08:	d11e      	bne.n	2e48 <xQueueGenericSend+0xf4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    2e0a:	68f8      	ldr	r0, [r7, #12]
    2e0c:	f000 fa86 	bl	331c <prvIsQueueFull>
    2e10:	4603      	mov	r3, r0
    2e12:	2b00      	cmp	r3, #0
    2e14:	d012      	beq.n	2e3c <xQueueGenericSend+0xe8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    2e16:	68fb      	ldr	r3, [r7, #12]
    2e18:	f103 0210 	add.w	r2, r3, #16
    2e1c:	687b      	ldr	r3, [r7, #4]
    2e1e:	4610      	mov	r0, r2
    2e20:	4619      	mov	r1, r3
    2e22:	f001 f8ab 	bl	3f7c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    2e26:	68f8      	ldr	r0, [r7, #12]
    2e28:	f000 fa02 	bl	3230 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    2e2c:	f000 fe74 	bl	3b18 <xTaskResumeAll>
    2e30:	4603      	mov	r3, r0
    2e32:	2b00      	cmp	r3, #0
    2e34:	d10f      	bne.n	2e56 <xQueueGenericSend+0x102>
				{
					portYIELD_WITHIN_API();
    2e36:	f001 fc21 	bl	467c <vPortYieldFromISR>
    2e3a:	e00c      	b.n	2e56 <xQueueGenericSend+0x102>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    2e3c:	68f8      	ldr	r0, [r7, #12]
    2e3e:	f000 f9f7 	bl	3230 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    2e42:	f000 fe69 	bl	3b18 <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
    2e46:	e78e      	b.n	2d66 <xQueueGenericSend+0x12>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    2e48:	68f8      	ldr	r0, [r7, #12]
    2e4a:	f000 f9f1 	bl	3230 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    2e4e:	f000 fe63 	bl	3b18 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    2e52:	2300      	movs	r3, #0
    2e54:	e000      	b.n	2e58 <xQueueGenericSend+0x104>
		}
	}
    2e56:	e786      	b.n	2d66 <xQueueGenericSend+0x12>
}
    2e58:	4618      	mov	r0, r3
    2e5a:	3720      	adds	r7, #32
    2e5c:	46bd      	mov	sp, r7
    2e5e:	bd80      	pop	{r7, pc}

00002e60 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    2e60:	b580      	push	{r7, lr}
    2e62:	b086      	sub	sp, #24
    2e64:	af00      	add	r7, sp, #0
    2e66:	60f8      	str	r0, [r7, #12]
    2e68:	60b9      	str	r1, [r7, #8]
    2e6a:	607a      	str	r2, [r7, #4]
    2e6c:	603b      	str	r3, [r7, #0]
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    2e6e:	2300      	movs	r3, #0
    2e70:	613b      	str	r3, [r7, #16]
    2e72:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    2e76:	f380 8811 	msr	BASEPRI, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    2e7a:	68fb      	ldr	r3, [r7, #12]
    2e7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    2e7e:	68fb      	ldr	r3, [r7, #12]
    2e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2e82:	429a      	cmp	r2, r3
    2e84:	d221      	bcs.n	2eca <xQueueGenericSendFromISR+0x6a>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    2e86:	68f8      	ldr	r0, [r7, #12]
    2e88:	68b9      	ldr	r1, [r7, #8]
    2e8a:	683a      	ldr	r2, [r7, #0]
    2e8c:	f000 f94e 	bl	312c <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    2e90:	68fb      	ldr	r3, [r7, #12]
    2e92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2e94:	f1b3 3fff 	cmp.w	r3, #4294967295
    2e98:	d10f      	bne.n	2eba <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2e9a:	68fb      	ldr	r3, [r7, #12]
    2e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2e9e:	2b00      	cmp	r3, #0
    2ea0:	d010      	beq.n	2ec4 <xQueueGenericSendFromISR+0x64>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2ea2:	68fb      	ldr	r3, [r7, #12]
    2ea4:	3324      	adds	r3, #36	; 0x24
    2ea6:	4618      	mov	r0, r3
    2ea8:	f001 f8a0 	bl	3fec <xTaskRemoveFromEventList>
    2eac:	4603      	mov	r3, r0
    2eae:	2b00      	cmp	r3, #0
    2eb0:	d008      	beq.n	2ec4 <xQueueGenericSendFromISR+0x64>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    2eb2:	687b      	ldr	r3, [r7, #4]
    2eb4:	2201      	movs	r2, #1
    2eb6:	601a      	str	r2, [r3, #0]
    2eb8:	e004      	b.n	2ec4 <xQueueGenericSendFromISR+0x64>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    2eba:	68fb      	ldr	r3, [r7, #12]
    2ebc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2ebe:	1c5a      	adds	r2, r3, #1
    2ec0:	68fb      	ldr	r3, [r7, #12]
    2ec2:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
    2ec4:	2301      	movs	r3, #1
    2ec6:	617b      	str	r3, [r7, #20]
    2ec8:	e001      	b.n	2ece <xQueueGenericSendFromISR+0x6e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    2eca:	2300      	movs	r3, #0
    2ecc:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    2ece:	f04f 0000 	mov.w	r0, #0
    2ed2:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    2ed6:	697b      	ldr	r3, [r7, #20]
}
    2ed8:	4618      	mov	r0, r3
    2eda:	3718      	adds	r7, #24
    2edc:	46bd      	mov	sp, r7
    2ede:	bd80      	pop	{r7, pc}

00002ee0 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    2ee0:	b580      	push	{r7, lr}
    2ee2:	b088      	sub	sp, #32
    2ee4:	af00      	add	r7, sp, #0
    2ee6:	60f8      	str	r0, [r7, #12]
    2ee8:	60b9      	str	r1, [r7, #8]
    2eea:	607a      	str	r2, [r7, #4]
    2eec:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    2eee:	2300      	movs	r3, #0
    2ef0:	61fb      	str	r3, [r7, #28]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    2ef2:	f001 fbd1 	bl	4698 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    2ef6:	68fb      	ldr	r3, [r7, #12]
    2ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2efa:	2b00      	cmp	r3, #0
    2efc:	d03b      	beq.n	2f76 <xQueueGenericReceive+0x96>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    2efe:	68fb      	ldr	r3, [r7, #12]
    2f00:	68db      	ldr	r3, [r3, #12]
    2f02:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    2f04:	68f8      	ldr	r0, [r7, #12]
    2f06:	68b9      	ldr	r1, [r7, #8]
    2f08:	f000 f96c 	bl	31e4 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    2f0c:	683b      	ldr	r3, [r7, #0]
    2f0e:	2b00      	cmp	r3, #0
    2f10:	d11c      	bne.n	2f4c <xQueueGenericReceive+0x6c>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    2f12:	68fb      	ldr	r3, [r7, #12]
    2f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2f16:	1e5a      	subs	r2, r3, #1
    2f18:	68fb      	ldr	r3, [r7, #12]
    2f1a:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    2f1c:	68fb      	ldr	r3, [r7, #12]
    2f1e:	681b      	ldr	r3, [r3, #0]
    2f20:	2b00      	cmp	r3, #0
    2f22:	d104      	bne.n	2f2e <xQueueGenericReceive+0x4e>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
    2f24:	f001 fa84 	bl	4430 <xTaskGetCurrentTaskHandle>
    2f28:	4602      	mov	r2, r0
    2f2a:	68fb      	ldr	r3, [r7, #12]
    2f2c:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2f2e:	68fb      	ldr	r3, [r7, #12]
    2f30:	691b      	ldr	r3, [r3, #16]
    2f32:	2b00      	cmp	r3, #0
    2f34:	d01b      	beq.n	2f6e <xQueueGenericReceive+0x8e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    2f36:	68fb      	ldr	r3, [r7, #12]
    2f38:	3310      	adds	r3, #16
    2f3a:	4618      	mov	r0, r3
    2f3c:	f001 f856 	bl	3fec <xTaskRemoveFromEventList>
    2f40:	4603      	mov	r3, r0
    2f42:	2b01      	cmp	r3, #1
    2f44:	d113      	bne.n	2f6e <xQueueGenericReceive+0x8e>
						{
							portYIELD_WITHIN_API();
    2f46:	f001 fb99 	bl	467c <vPortYieldFromISR>
    2f4a:	e010      	b.n	2f6e <xQueueGenericReceive+0x8e>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    2f4c:	68fb      	ldr	r3, [r7, #12]
    2f4e:	69ba      	ldr	r2, [r7, #24]
    2f50:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2f52:	68fb      	ldr	r3, [r7, #12]
    2f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2f56:	2b00      	cmp	r3, #0
    2f58:	d009      	beq.n	2f6e <xQueueGenericReceive+0x8e>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2f5a:	68fb      	ldr	r3, [r7, #12]
    2f5c:	3324      	adds	r3, #36	; 0x24
    2f5e:	4618      	mov	r0, r3
    2f60:	f001 f844 	bl	3fec <xTaskRemoveFromEventList>
    2f64:	4603      	mov	r3, r0
    2f66:	2b00      	cmp	r3, #0
    2f68:	d001      	beq.n	2f6e <xQueueGenericReceive+0x8e>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    2f6a:	f001 fb87 	bl	467c <vPortYieldFromISR>
						}
					}

				}

				taskEXIT_CRITICAL();
    2f6e:	f001 fba9 	bl	46c4 <vPortExitCritical>
				return pdPASS;
    2f72:	2301      	movs	r3, #1
    2f74:	e066      	b.n	3044 <xQueueGenericReceive+0x164>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    2f76:	687b      	ldr	r3, [r7, #4]
    2f78:	2b00      	cmp	r3, #0
    2f7a:	d103      	bne.n	2f84 <xQueueGenericReceive+0xa4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    2f7c:	f001 fba2 	bl	46c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    2f80:	2300      	movs	r3, #0
    2f82:	e05f      	b.n	3044 <xQueueGenericReceive+0x164>
				}
				else if( xEntryTimeSet == pdFALSE )
    2f84:	69fb      	ldr	r3, [r7, #28]
    2f86:	2b00      	cmp	r3, #0
    2f88:	d106      	bne.n	2f98 <xQueueGenericReceive+0xb8>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    2f8a:	f107 0310 	add.w	r3, r7, #16
    2f8e:	4618      	mov	r0, r3
    2f90:	f001 f884 	bl	409c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    2f94:	2301      	movs	r3, #1
    2f96:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    2f98:	f001 fb94 	bl	46c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    2f9c:	f000 fdaa 	bl	3af4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    2fa0:	f001 fb7a 	bl	4698 <vPortEnterCritical>
    2fa4:	68fb      	ldr	r3, [r7, #12]
    2fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
    2fac:	d102      	bne.n	2fb4 <xQueueGenericReceive+0xd4>
    2fae:	68fb      	ldr	r3, [r7, #12]
    2fb0:	2200      	movs	r2, #0
    2fb2:	645a      	str	r2, [r3, #68]	; 0x44
    2fb4:	68fb      	ldr	r3, [r7, #12]
    2fb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
    2fbc:	d102      	bne.n	2fc4 <xQueueGenericReceive+0xe4>
    2fbe:	68fb      	ldr	r3, [r7, #12]
    2fc0:	2200      	movs	r2, #0
    2fc2:	649a      	str	r2, [r3, #72]	; 0x48
    2fc4:	f001 fb7e 	bl	46c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2fc8:	f107 0210 	add.w	r2, r7, #16
    2fcc:	1d3b      	adds	r3, r7, #4
    2fce:	4610      	mov	r0, r2
    2fd0:	4619      	mov	r1, r3
    2fd2:	f001 f87b 	bl	40cc <xTaskCheckForTimeOut>
    2fd6:	4603      	mov	r3, r0
    2fd8:	2b00      	cmp	r3, #0
    2fda:	d12b      	bne.n	3034 <xQueueGenericReceive+0x154>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    2fdc:	68f8      	ldr	r0, [r7, #12]
    2fde:	f000 f973 	bl	32c8 <prvIsQueueEmpty>
    2fe2:	4603      	mov	r3, r0
    2fe4:	2b00      	cmp	r3, #0
    2fe6:	d01f      	beq.n	3028 <xQueueGenericReceive+0x148>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    2fe8:	68fb      	ldr	r3, [r7, #12]
    2fea:	681b      	ldr	r3, [r3, #0]
    2fec:	2b00      	cmp	r3, #0
    2fee:	d108      	bne.n	3002 <xQueueGenericReceive+0x122>
					{
						portENTER_CRITICAL();
    2ff0:	f001 fb52 	bl	4698 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    2ff4:	68fb      	ldr	r3, [r7, #12]
    2ff6:	685b      	ldr	r3, [r3, #4]
    2ff8:	4618      	mov	r0, r3
    2ffa:	f001 fa29 	bl	4450 <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
    2ffe:	f001 fb61 	bl	46c4 <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    3002:	68fb      	ldr	r3, [r7, #12]
    3004:	f103 0224 	add.w	r2, r3, #36	; 0x24
    3008:	687b      	ldr	r3, [r7, #4]
    300a:	4610      	mov	r0, r2
    300c:	4619      	mov	r1, r3
    300e:	f000 ffb5 	bl	3f7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    3012:	68f8      	ldr	r0, [r7, #12]
    3014:	f000 f90c 	bl	3230 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    3018:	f000 fd7e 	bl	3b18 <xTaskResumeAll>
    301c:	4603      	mov	r3, r0
    301e:	2b00      	cmp	r3, #0
    3020:	d10f      	bne.n	3042 <xQueueGenericReceive+0x162>
				{
					portYIELD_WITHIN_API();
    3022:	f001 fb2b 	bl	467c <vPortYieldFromISR>
    3026:	e00c      	b.n	3042 <xQueueGenericReceive+0x162>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    3028:	68f8      	ldr	r0, [r7, #12]
    302a:	f000 f901 	bl	3230 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    302e:	f000 fd73 	bl	3b18 <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
    3032:	e75e      	b.n	2ef2 <xQueueGenericReceive+0x12>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    3034:	68f8      	ldr	r0, [r7, #12]
    3036:	f000 f8fb 	bl	3230 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    303a:	f000 fd6d 	bl	3b18 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    303e:	2300      	movs	r3, #0
    3040:	e000      	b.n	3044 <xQueueGenericReceive+0x164>
		}
	}
    3042:	e756      	b.n	2ef2 <xQueueGenericReceive+0x12>
}
    3044:	4618      	mov	r0, r3
    3046:	3720      	adds	r7, #32
    3048:	46bd      	mov	sp, r7
    304a:	bd80      	pop	{r7, pc}

0000304c <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    304c:	b580      	push	{r7, lr}
    304e:	b086      	sub	sp, #24
    3050:	af00      	add	r7, sp, #0
    3052:	60f8      	str	r0, [r7, #12]
    3054:	60b9      	str	r1, [r7, #8]
    3056:	607a      	str	r2, [r7, #4]

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    3058:	2300      	movs	r3, #0
    305a:	613b      	str	r3, [r7, #16]
    305c:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    3060:	f380 8811 	msr	BASEPRI, r0
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    3064:	68fb      	ldr	r3, [r7, #12]
    3066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3068:	2b00      	cmp	r3, #0
    306a:	d025      	beq.n	30b8 <xQueueReceiveFromISR+0x6c>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    306c:	68f8      	ldr	r0, [r7, #12]
    306e:	68b9      	ldr	r1, [r7, #8]
    3070:	f000 f8b8 	bl	31e4 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    3074:	68fb      	ldr	r3, [r7, #12]
    3076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3078:	1e5a      	subs	r2, r3, #1
    307a:	68fb      	ldr	r3, [r7, #12]
    307c:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    307e:	68fb      	ldr	r3, [r7, #12]
    3080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3082:	f1b3 3fff 	cmp.w	r3, #4294967295
    3086:	d10f      	bne.n	30a8 <xQueueReceiveFromISR+0x5c>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3088:	68fb      	ldr	r3, [r7, #12]
    308a:	691b      	ldr	r3, [r3, #16]
    308c:	2b00      	cmp	r3, #0
    308e:	d010      	beq.n	30b2 <xQueueReceiveFromISR+0x66>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3090:	68fb      	ldr	r3, [r7, #12]
    3092:	3310      	adds	r3, #16
    3094:	4618      	mov	r0, r3
    3096:	f000 ffa9 	bl	3fec <xTaskRemoveFromEventList>
    309a:	4603      	mov	r3, r0
    309c:	2b00      	cmp	r3, #0
    309e:	d008      	beq.n	30b2 <xQueueReceiveFromISR+0x66>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    30a0:	687b      	ldr	r3, [r7, #4]
    30a2:	2201      	movs	r2, #1
    30a4:	601a      	str	r2, [r3, #0]
    30a6:	e004      	b.n	30b2 <xQueueReceiveFromISR+0x66>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    30a8:	68fb      	ldr	r3, [r7, #12]
    30aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    30ac:	1c5a      	adds	r2, r3, #1
    30ae:	68fb      	ldr	r3, [r7, #12]
    30b0:	645a      	str	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
    30b2:	2301      	movs	r3, #1
    30b4:	617b      	str	r3, [r7, #20]
    30b6:	e001      	b.n	30bc <xQueueReceiveFromISR+0x70>
		}
		else
		{
			xReturn = pdFAIL;
    30b8:	2300      	movs	r3, #0
    30ba:	617b      	str	r3, [r7, #20]
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    30bc:	f04f 0000 	mov.w	r0, #0
    30c0:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    30c4:	697b      	ldr	r3, [r7, #20]
}
    30c6:	4618      	mov	r0, r3
    30c8:	3718      	adds	r7, #24
    30ca:	46bd      	mov	sp, r7
    30cc:	bd80      	pop	{r7, pc}
    30ce:	bf00      	nop

000030d0 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    30d0:	b580      	push	{r7, lr}
    30d2:	b084      	sub	sp, #16
    30d4:	af00      	add	r7, sp, #0
    30d6:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    30d8:	f001 fade 	bl	4698 <vPortEnterCritical>
		uxReturn = pxQueue->uxMessagesWaiting;
    30dc:	687b      	ldr	r3, [r7, #4]
    30de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    30e0:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    30e2:	f001 faef 	bl	46c4 <vPortExitCritical>

	return uxReturn;
    30e6:	68fb      	ldr	r3, [r7, #12]
}
    30e8:	4618      	mov	r0, r3
    30ea:	3710      	adds	r7, #16
    30ec:	46bd      	mov	sp, r7
    30ee:	bd80      	pop	{r7, pc}

000030f0 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    30f0:	b480      	push	{r7}
    30f2:	b085      	sub	sp, #20
    30f4:	af00      	add	r7, sp, #0
    30f6:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    30f8:	687b      	ldr	r3, [r7, #4]
    30fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    30fc:	60fb      	str	r3, [r7, #12]

	return uxReturn;
    30fe:	68fb      	ldr	r3, [r7, #12]
}
    3100:	4618      	mov	r0, r3
    3102:	3714      	adds	r7, #20
    3104:	46bd      	mov	sp, r7
    3106:	f85d 7b04 	ldr.w	r7, [sp], #4
    310a:	4770      	bx	lr

0000310c <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    310c:	b580      	push	{r7, lr}
    310e:	b082      	sub	sp, #8
    3110:	af00      	add	r7, sp, #0
    3112:	6078      	str	r0, [r7, #4]
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    3114:	687b      	ldr	r3, [r7, #4]
    3116:	681b      	ldr	r3, [r3, #0]
    3118:	4618      	mov	r0, r3
    311a:	f001 fbfb 	bl	4914 <vPortFree>
	vPortFree( pxQueue );
    311e:	6878      	ldr	r0, [r7, #4]
    3120:	f001 fbf8 	bl	4914 <vPortFree>
}
    3124:	3708      	adds	r7, #8
    3126:	46bd      	mov	sp, r7
    3128:	bd80      	pop	{r7, pc}
    312a:	bf00      	nop

0000312c <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    312c:	b580      	push	{r7, lr}
    312e:	b084      	sub	sp, #16
    3130:	af00      	add	r7, sp, #0
    3132:	60f8      	str	r0, [r7, #12]
    3134:	60b9      	str	r1, [r7, #8]
    3136:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    3138:	68fb      	ldr	r3, [r7, #12]
    313a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    313c:	2b00      	cmp	r3, #0
    313e:	d10c      	bne.n	315a <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    3140:	68fb      	ldr	r3, [r7, #12]
    3142:	681b      	ldr	r3, [r3, #0]
    3144:	2b00      	cmp	r3, #0
    3146:	d145      	bne.n	31d4 <prvCopyDataToQueue+0xa8>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    3148:	68fb      	ldr	r3, [r7, #12]
    314a:	685b      	ldr	r3, [r3, #4]
    314c:	4618      	mov	r0, r3
    314e:	f001 f9e3 	bl	4518 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
    3152:	68fb      	ldr	r3, [r7, #12]
    3154:	2200      	movs	r2, #0
    3156:	605a      	str	r2, [r3, #4]
    3158:	e03c      	b.n	31d4 <prvCopyDataToQueue+0xa8>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    315a:	687b      	ldr	r3, [r7, #4]
    315c:	2b00      	cmp	r3, #0
    315e:	d11a      	bne.n	3196 <prvCopyDataToQueue+0x6a>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    3160:	68fb      	ldr	r3, [r7, #12]
    3162:	689a      	ldr	r2, [r3, #8]
    3164:	68fb      	ldr	r3, [r7, #12]
    3166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3168:	4610      	mov	r0, r2
    316a:	68b9      	ldr	r1, [r7, #8]
    316c:	461a      	mov	r2, r3
    316e:	f010 faa3 	bl	136b8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    3172:	68fb      	ldr	r3, [r7, #12]
    3174:	689a      	ldr	r2, [r3, #8]
    3176:	68fb      	ldr	r3, [r7, #12]
    3178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    317a:	441a      	add	r2, r3
    317c:	68fb      	ldr	r3, [r7, #12]
    317e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    3180:	68fb      	ldr	r3, [r7, #12]
    3182:	689a      	ldr	r2, [r3, #8]
    3184:	68fb      	ldr	r3, [r7, #12]
    3186:	685b      	ldr	r3, [r3, #4]
    3188:	429a      	cmp	r2, r3
    318a:	d323      	bcc.n	31d4 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    318c:	68fb      	ldr	r3, [r7, #12]
    318e:	681a      	ldr	r2, [r3, #0]
    3190:	68fb      	ldr	r3, [r7, #12]
    3192:	609a      	str	r2, [r3, #8]
    3194:	e01e      	b.n	31d4 <prvCopyDataToQueue+0xa8>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    3196:	68fb      	ldr	r3, [r7, #12]
    3198:	68da      	ldr	r2, [r3, #12]
    319a:	68fb      	ldr	r3, [r7, #12]
    319c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    319e:	4610      	mov	r0, r2
    31a0:	68b9      	ldr	r1, [r7, #8]
    31a2:	461a      	mov	r2, r3
    31a4:	f010 fa88 	bl	136b8 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    31a8:	68fb      	ldr	r3, [r7, #12]
    31aa:	68da      	ldr	r2, [r3, #12]
    31ac:	68fb      	ldr	r3, [r7, #12]
    31ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    31b0:	425b      	negs	r3, r3
    31b2:	441a      	add	r2, r3
    31b4:	68fb      	ldr	r3, [r7, #12]
    31b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    31b8:	68fb      	ldr	r3, [r7, #12]
    31ba:	68da      	ldr	r2, [r3, #12]
    31bc:	68fb      	ldr	r3, [r7, #12]
    31be:	681b      	ldr	r3, [r3, #0]
    31c0:	429a      	cmp	r2, r3
    31c2:	d207      	bcs.n	31d4 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    31c4:	68fb      	ldr	r3, [r7, #12]
    31c6:	685a      	ldr	r2, [r3, #4]
    31c8:	68fb      	ldr	r3, [r7, #12]
    31ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    31cc:	425b      	negs	r3, r3
    31ce:	441a      	add	r2, r3
    31d0:	68fb      	ldr	r3, [r7, #12]
    31d2:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
    31d4:	68fb      	ldr	r3, [r7, #12]
    31d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    31d8:	1c5a      	adds	r2, r3, #1
    31da:	68fb      	ldr	r3, [r7, #12]
    31dc:	639a      	str	r2, [r3, #56]	; 0x38
}
    31de:	3710      	adds	r7, #16
    31e0:	46bd      	mov	sp, r7
    31e2:	bd80      	pop	{r7, pc}

000031e4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    31e4:	b580      	push	{r7, lr}
    31e6:	b082      	sub	sp, #8
    31e8:	af00      	add	r7, sp, #0
    31ea:	6078      	str	r0, [r7, #4]
    31ec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    31ee:	687b      	ldr	r3, [r7, #4]
    31f0:	681b      	ldr	r3, [r3, #0]
    31f2:	2b00      	cmp	r3, #0
    31f4:	d019      	beq.n	322a <prvCopyDataFromQueue+0x46>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    31f6:	687b      	ldr	r3, [r7, #4]
    31f8:	68da      	ldr	r2, [r3, #12]
    31fa:	687b      	ldr	r3, [r7, #4]
    31fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    31fe:	441a      	add	r2, r3
    3200:	687b      	ldr	r3, [r7, #4]
    3202:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    3204:	687b      	ldr	r3, [r7, #4]
    3206:	68da      	ldr	r2, [r3, #12]
    3208:	687b      	ldr	r3, [r7, #4]
    320a:	685b      	ldr	r3, [r3, #4]
    320c:	429a      	cmp	r2, r3
    320e:	d303      	bcc.n	3218 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    3210:	687b      	ldr	r3, [r7, #4]
    3212:	681a      	ldr	r2, [r3, #0]
    3214:	687b      	ldr	r3, [r7, #4]
    3216:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    3218:	687b      	ldr	r3, [r7, #4]
    321a:	68da      	ldr	r2, [r3, #12]
    321c:	687b      	ldr	r3, [r7, #4]
    321e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3220:	6838      	ldr	r0, [r7, #0]
    3222:	4611      	mov	r1, r2
    3224:	461a      	mov	r2, r3
    3226:	f010 fa47 	bl	136b8 <memcpy>
	}
}
    322a:	3708      	adds	r7, #8
    322c:	46bd      	mov	sp, r7
    322e:	bd80      	pop	{r7, pc}

00003230 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    3230:	b580      	push	{r7, lr}
    3232:	b082      	sub	sp, #8
    3234:	af00      	add	r7, sp, #0
    3236:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    3238:	f001 fa2e 	bl	4698 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    323c:	e014      	b.n	3268 <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    323e:	687b      	ldr	r3, [r7, #4]
    3240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3242:	2b00      	cmp	r3, #0
    3244:	d00f      	beq.n	3266 <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3246:	687b      	ldr	r3, [r7, #4]
    3248:	3324      	adds	r3, #36	; 0x24
    324a:	4618      	mov	r0, r3
    324c:	f000 fece 	bl	3fec <xTaskRemoveFromEventList>
    3250:	4603      	mov	r3, r0
    3252:	2b00      	cmp	r3, #0
    3254:	d001      	beq.n	325a <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    3256:	f000 ff85 	bl	4164 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    325a:	687b      	ldr	r3, [r7, #4]
    325c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    325e:	1e5a      	subs	r2, r3, #1
    3260:	687b      	ldr	r3, [r7, #4]
    3262:	649a      	str	r2, [r3, #72]	; 0x48
    3264:	e000      	b.n	3268 <prvUnlockQueue+0x38>
			}
			else
			{
				break;
    3266:	e003      	b.n	3270 <prvUnlockQueue+0x40>
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    3268:	687b      	ldr	r3, [r7, #4]
    326a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    326c:	2b00      	cmp	r3, #0
    326e:	dce6      	bgt.n	323e <prvUnlockQueue+0xe>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    3270:	687b      	ldr	r3, [r7, #4]
    3272:	f04f 32ff 	mov.w	r2, #4294967295
    3276:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
    3278:	f001 fa24 	bl	46c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    327c:	f001 fa0c 	bl	4698 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    3280:	e014      	b.n	32ac <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3282:	687b      	ldr	r3, [r7, #4]
    3284:	691b      	ldr	r3, [r3, #16]
    3286:	2b00      	cmp	r3, #0
    3288:	d00f      	beq.n	32aa <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    328a:	687b      	ldr	r3, [r7, #4]
    328c:	3310      	adds	r3, #16
    328e:	4618      	mov	r0, r3
    3290:	f000 feac 	bl	3fec <xTaskRemoveFromEventList>
    3294:	4603      	mov	r3, r0
    3296:	2b00      	cmp	r3, #0
    3298:	d001      	beq.n	329e <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
    329a:	f000 ff63 	bl	4164 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    329e:	687b      	ldr	r3, [r7, #4]
    32a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    32a2:	1e5a      	subs	r2, r3, #1
    32a4:	687b      	ldr	r3, [r7, #4]
    32a6:	645a      	str	r2, [r3, #68]	; 0x44
    32a8:	e000      	b.n	32ac <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
    32aa:	e003      	b.n	32b4 <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    32ac:	687b      	ldr	r3, [r7, #4]
    32ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    32b0:	2b00      	cmp	r3, #0
    32b2:	dce6      	bgt.n	3282 <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    32b4:	687b      	ldr	r3, [r7, #4]
    32b6:	f04f 32ff 	mov.w	r2, #4294967295
    32ba:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    32bc:	f001 fa02 	bl	46c4 <vPortExitCritical>
}
    32c0:	3708      	adds	r7, #8
    32c2:	46bd      	mov	sp, r7
    32c4:	bd80      	pop	{r7, pc}
    32c6:	bf00      	nop

000032c8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    32c8:	b580      	push	{r7, lr}
    32ca:	b084      	sub	sp, #16
    32cc:	af00      	add	r7, sp, #0
    32ce:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    32d0:	f001 f9e2 	bl	4698 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    32d4:	687b      	ldr	r3, [r7, #4]
    32d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    32d8:	2b00      	cmp	r3, #0
    32da:	bf14      	ite	ne
    32dc:	2300      	movne	r3, #0
    32de:	2301      	moveq	r3, #1
    32e0:	b2db      	uxtb	r3, r3
    32e2:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    32e4:	f001 f9ee 	bl	46c4 <vPortExitCritical>

	return xReturn;
    32e8:	68fb      	ldr	r3, [r7, #12]
}
    32ea:	4618      	mov	r0, r3
    32ec:	3710      	adds	r7, #16
    32ee:	46bd      	mov	sp, r7
    32f0:	bd80      	pop	{r7, pc}
    32f2:	bf00      	nop

000032f4 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    32f4:	b480      	push	{r7}
    32f6:	b085      	sub	sp, #20
    32f8:	af00      	add	r7, sp, #0
    32fa:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    32fc:	687b      	ldr	r3, [r7, #4]
    32fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3300:	2b00      	cmp	r3, #0
    3302:	bf14      	ite	ne
    3304:	2300      	movne	r3, #0
    3306:	2301      	moveq	r3, #1
    3308:	b2db      	uxtb	r3, r3
    330a:	60fb      	str	r3, [r7, #12]

	return xReturn;
    330c:	68fb      	ldr	r3, [r7, #12]
}
    330e:	4618      	mov	r0, r3
    3310:	3714      	adds	r7, #20
    3312:	46bd      	mov	sp, r7
    3314:	f85d 7b04 	ldr.w	r7, [sp], #4
    3318:	4770      	bx	lr
    331a:	bf00      	nop

0000331c <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    331c:	b580      	push	{r7, lr}
    331e:	b084      	sub	sp, #16
    3320:	af00      	add	r7, sp, #0
    3322:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    3324:	f001 f9b8 	bl	4698 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    3328:	687b      	ldr	r3, [r7, #4]
    332a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    332c:	687b      	ldr	r3, [r7, #4]
    332e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    3330:	429a      	cmp	r2, r3
    3332:	bf14      	ite	ne
    3334:	2300      	movne	r3, #0
    3336:	2301      	moveq	r3, #1
    3338:	b2db      	uxtb	r3, r3
    333a:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    333c:	f001 f9c2 	bl	46c4 <vPortExitCritical>

	return xReturn;
    3340:	68fb      	ldr	r3, [r7, #12]
}
    3342:	4618      	mov	r0, r3
    3344:	3710      	adds	r7, #16
    3346:	46bd      	mov	sp, r7
    3348:	bd80      	pop	{r7, pc}
    334a:	bf00      	nop

0000334c <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    334c:	b480      	push	{r7}
    334e:	b085      	sub	sp, #20
    3350:	af00      	add	r7, sp, #0
    3352:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    3354:	687b      	ldr	r3, [r7, #4]
    3356:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    3358:	687b      	ldr	r3, [r7, #4]
    335a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    335c:	429a      	cmp	r2, r3
    335e:	bf14      	ite	ne
    3360:	2300      	movne	r3, #0
    3362:	2301      	moveq	r3, #1
    3364:	b2db      	uxtb	r3, r3
    3366:	60fb      	str	r3, [r7, #12]

	return xReturn;
    3368:	68fb      	ldr	r3, [r7, #12]
}
    336a:	4618      	mov	r0, r3
    336c:	3714      	adds	r7, #20
    336e:	46bd      	mov	sp, r7
    3370:	f85d 7b04 	ldr.w	r7, [sp], #4
    3374:	4770      	bx	lr
    3376:	bf00      	nop

00003378 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    3378:	b580      	push	{r7, lr}
    337a:	b08a      	sub	sp, #40	; 0x28
    337c:	af02      	add	r7, sp, #8
    337e:	60f8      	str	r0, [r7, #12]
    3380:	60b9      	str	r1, [r7, #8]
    3382:	603b      	str	r3, [r7, #0]
    3384:	4613      	mov	r3, r2
    3386:	80fb      	strh	r3, [r7, #6]
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    3388:	88fb      	ldrh	r3, [r7, #6]
    338a:	4618      	mov	r0, r3
    338c:	6b39      	ldr	r1, [r7, #48]	; 0x30
    338e:	f001 f80d 	bl	43ac <prvAllocateTCBAndStack>
    3392:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
    3394:	69bb      	ldr	r3, [r7, #24]
    3396:	2b00      	cmp	r3, #0
    3398:	f000 80a1 	beq.w	34de <xTaskGenericCreate+0x166>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    339c:	69bb      	ldr	r3, [r7, #24]
    339e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    33a0:	88fb      	ldrh	r3, [r7, #6]
    33a2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    33a6:	3b01      	subs	r3, #1
    33a8:	009b      	lsls	r3, r3, #2
    33aa:	4413      	add	r3, r2
    33ac:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
    33ae:	697b      	ldr	r3, [r7, #20]
    33b0:	f023 0307 	bic.w	r3, r3, #7
    33b4:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    33b6:	88fb      	ldrh	r3, [r7, #6]
    33b8:	9300      	str	r3, [sp, #0]
    33ba:	69b8      	ldr	r0, [r7, #24]
    33bc:	68b9      	ldr	r1, [r7, #8]
    33be:	6aba      	ldr	r2, [r7, #40]	; 0x28
    33c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    33c2:	f000 fee5 	bl	4190 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    33c6:	6978      	ldr	r0, [r7, #20]
    33c8:	68f9      	ldr	r1, [r7, #12]
    33ca:	683a      	ldr	r2, [r7, #0]
    33cc:	f001 f8e6 	bl	459c <pxPortInitialiseStack>
    33d0:	4602      	mov	r2, r0
    33d2:	69bb      	ldr	r3, [r7, #24]
    33d4:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    33d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    33d8:	2b00      	cmp	r3, #0
    33da:	d002      	beq.n	33e2 <xTaskGenericCreate+0x6a>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    33dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    33de:	69ba      	ldr	r2, [r7, #24]
    33e0:	601a      	str	r2, [r3, #0]
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    33e2:	f001 f959 	bl	4698 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
    33e6:	f240 4358 	movw	r3, #1112	; 0x458
    33ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33ee:	681b      	ldr	r3, [r3, #0]
    33f0:	1c5a      	adds	r2, r3, #1
    33f2:	f240 4358 	movw	r3, #1112	; 0x458
    33f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33fa:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
    33fc:	f240 2354 	movw	r3, #596	; 0x254
    3400:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3404:	681b      	ldr	r3, [r3, #0]
    3406:	2b00      	cmp	r3, #0
    3408:	d10f      	bne.n	342a <xTaskGenericCreate+0xb2>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    340a:	f240 2354 	movw	r3, #596	; 0x254
    340e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3412:	69ba      	ldr	r2, [r7, #24]
    3414:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    3416:	f240 4358 	movw	r3, #1112	; 0x458
    341a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    341e:	681b      	ldr	r3, [r3, #0]
    3420:	2b01      	cmp	r3, #1
    3422:	d118      	bne.n	3456 <xTaskGenericCreate+0xde>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    3424:	f000 feea 	bl	41fc <prvInitialiseTaskLists>
    3428:	e015      	b.n	3456 <xTaskGenericCreate+0xde>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    342a:	f240 4368 	movw	r3, #1128	; 0x468
    342e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3432:	681b      	ldr	r3, [r3, #0]
    3434:	2b00      	cmp	r3, #0
    3436:	d10e      	bne.n	3456 <xTaskGenericCreate+0xde>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    3438:	f240 2354 	movw	r3, #596	; 0x254
    343c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3440:	681b      	ldr	r3, [r3, #0]
    3442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3444:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3446:	429a      	cmp	r2, r3
    3448:	d805      	bhi.n	3456 <xTaskGenericCreate+0xde>
					{
						pxCurrentTCB = pxNewTCB;
    344a:	f240 2354 	movw	r3, #596	; 0x254
    344e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3452:	69ba      	ldr	r2, [r7, #24]
    3454:	601a      	str	r2, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    3456:	69bb      	ldr	r3, [r7, #24]
    3458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    345a:	f240 4360 	movw	r3, #1120	; 0x460
    345e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3462:	681b      	ldr	r3, [r3, #0]
    3464:	429a      	cmp	r2, r3
    3466:	d906      	bls.n	3476 <xTaskGenericCreate+0xfe>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    3468:	69bb      	ldr	r3, [r7, #24]
    346a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    346c:	f240 4360 	movw	r3, #1120	; 0x460
    3470:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3474:	601a      	str	r2, [r3, #0]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    3476:	f240 437c 	movw	r3, #1148	; 0x47c
    347a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    347e:	681b      	ldr	r3, [r3, #0]
    3480:	1c5a      	adds	r2, r3, #1
    3482:	f240 437c 	movw	r3, #1148	; 0x47c
    3486:	f2c2 0300 	movt	r3, #8192	; 0x2000
    348a:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
    348c:	69bb      	ldr	r3, [r7, #24]
    348e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3490:	f240 4364 	movw	r3, #1124	; 0x464
    3494:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3498:	681b      	ldr	r3, [r3, #0]
    349a:	429a      	cmp	r2, r3
    349c:	d906      	bls.n	34ac <xTaskGenericCreate+0x134>
    349e:	69bb      	ldr	r3, [r7, #24]
    34a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    34a2:	f240 4364 	movw	r3, #1124	; 0x464
    34a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    34aa:	601a      	str	r2, [r3, #0]
    34ac:	69bb      	ldr	r3, [r7, #24]
    34ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    34b0:	4613      	mov	r3, r2
    34b2:	009b      	lsls	r3, r3, #2
    34b4:	4413      	add	r3, r2
    34b6:	009b      	lsls	r3, r3, #2
    34b8:	f240 2258 	movw	r2, #600	; 0x258
    34bc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    34c0:	441a      	add	r2, r3
    34c2:	69bb      	ldr	r3, [r7, #24]
    34c4:	3304      	adds	r3, #4
    34c6:	4610      	mov	r0, r2
    34c8:	4619      	mov	r1, r3
    34ca:	f7ff fa49 	bl	2960 <vListInsertEnd>

			xReturn = pdPASS;
    34ce:	2301      	movs	r3, #1
    34d0:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
    34d2:	69b8      	ldr	r0, [r7, #24]
    34d4:	f00f f8e4 	bl	126a0 <myTraceCreate>
		}
		taskEXIT_CRITICAL();
    34d8:	f001 f8f4 	bl	46c4 <vPortExitCritical>
    34dc:	e002      	b.n	34e4 <xTaskGenericCreate+0x16c>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    34de:	f04f 33ff 	mov.w	r3, #4294967295
    34e2:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    34e4:	69fb      	ldr	r3, [r7, #28]
    34e6:	2b01      	cmp	r3, #1
    34e8:	d111      	bne.n	350e <xTaskGenericCreate+0x196>
	{
		if( xSchedulerRunning != pdFALSE )
    34ea:	f240 4368 	movw	r3, #1128	; 0x468
    34ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    34f2:	681b      	ldr	r3, [r3, #0]
    34f4:	2b00      	cmp	r3, #0
    34f6:	d00a      	beq.n	350e <xTaskGenericCreate+0x196>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    34f8:	f240 2354 	movw	r3, #596	; 0x254
    34fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3500:	681b      	ldr	r3, [r3, #0]
    3502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3504:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3506:	429a      	cmp	r2, r3
    3508:	d201      	bcs.n	350e <xTaskGenericCreate+0x196>
			{
				portYIELD_WITHIN_API();
    350a:	f001 f8b7 	bl	467c <vPortYieldFromISR>
			}
		}
	}

	return xReturn;
    350e:	69fb      	ldr	r3, [r7, #28]
}
    3510:	4618      	mov	r0, r3
    3512:	3720      	adds	r7, #32
    3514:	46bd      	mov	sp, r7
    3516:	bd80      	pop	{r7, pc}

00003518 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    3518:	b580      	push	{r7, lr}
    351a:	b084      	sub	sp, #16
    351c:	af00      	add	r7, sp, #0
    351e:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    3520:	f001 f8ba 	bl	4698 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    3524:	f240 2354 	movw	r3, #596	; 0x254
    3528:	f2c2 0300 	movt	r3, #8192	; 0x2000
    352c:	681b      	ldr	r3, [r3, #0]
    352e:	687a      	ldr	r2, [r7, #4]
    3530:	429a      	cmp	r2, r3
    3532:	d101      	bne.n	3538 <vTaskDelete+0x20>
			{
				pxTaskToDelete = NULL;
    3534:	2300      	movs	r3, #0
    3536:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    3538:	687b      	ldr	r3, [r7, #4]
    353a:	2b00      	cmp	r3, #0
    353c:	d105      	bne.n	354a <vTaskDelete+0x32>
    353e:	f240 2354 	movw	r3, #596	; 0x254
    3542:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3546:	681b      	ldr	r3, [r3, #0]
    3548:	e000      	b.n	354c <vTaskDelete+0x34>
    354a:	687b      	ldr	r3, [r7, #4]
    354c:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    354e:	68fb      	ldr	r3, [r7, #12]
    3550:	3304      	adds	r3, #4
    3552:	4618      	mov	r0, r3
    3554:	f7ff fa64 	bl	2a20 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    3558:	68fb      	ldr	r3, [r7, #12]
    355a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    355c:	2b00      	cmp	r3, #0
    355e:	d004      	beq.n	356a <vTaskDelete+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    3560:	68fb      	ldr	r3, [r7, #12]
    3562:	3318      	adds	r3, #24
    3564:	4618      	mov	r0, r3
    3566:	f7ff fa5b 	bl	2a20 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    356a:	68fb      	ldr	r3, [r7, #12]
    356c:	3304      	adds	r3, #4
    356e:	f240 402c 	movw	r0, #1068	; 0x42c
    3572:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3576:	4619      	mov	r1, r3
    3578:	f7ff f9f2 	bl	2960 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    357c:	f240 4340 	movw	r3, #1088	; 0x440
    3580:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3584:	681b      	ldr	r3, [r3, #0]
    3586:	1c5a      	adds	r2, r3, #1
    3588:	f240 4340 	movw	r3, #1088	; 0x440
    358c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3590:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    3592:	f240 437c 	movw	r3, #1148	; 0x47c
    3596:	f2c2 0300 	movt	r3, #8192	; 0x2000
    359a:	681b      	ldr	r3, [r3, #0]
    359c:	1c5a      	adds	r2, r3, #1
    359e:	f240 437c 	movw	r3, #1148	; 0x47c
    35a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    35a6:	601a      	str	r2, [r3, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    35a8:	f001 f88c 	bl	46c4 <vPortExitCritical>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    35ac:	f240 4368 	movw	r3, #1128	; 0x468
    35b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    35b4:	681b      	ldr	r3, [r3, #0]
    35b6:	2b00      	cmp	r3, #0
    35b8:	d004      	beq.n	35c4 <vTaskDelete+0xac>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    35ba:	687b      	ldr	r3, [r7, #4]
    35bc:	2b00      	cmp	r3, #0
    35be:	d101      	bne.n	35c4 <vTaskDelete+0xac>
			{
				portYIELD_WITHIN_API();
    35c0:	f001 f85c 	bl	467c <vPortYieldFromISR>
			}
		}
	}
    35c4:	3710      	adds	r7, #16
    35c6:	46bd      	mov	sp, r7
    35c8:	bd80      	pop	{r7, pc}
    35ca:	bf00      	nop

000035cc <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    35cc:	b580      	push	{r7, lr}
    35ce:	b086      	sub	sp, #24
    35d0:	af00      	add	r7, sp, #0
    35d2:	6078      	str	r0, [r7, #4]
    35d4:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
    35d6:	2300      	movs	r3, #0
    35d8:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    35da:	f000 fa8b 	bl	3af4 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    35de:	687b      	ldr	r3, [r7, #4]
    35e0:	681a      	ldr	r2, [r3, #0]
    35e2:	683b      	ldr	r3, [r7, #0]
    35e4:	4413      	add	r3, r2
    35e6:	613b      	str	r3, [r7, #16]

			if( xTickCount < *pxPreviousWakeTime )
    35e8:	687b      	ldr	r3, [r7, #4]
    35ea:	681a      	ldr	r2, [r3, #0]
    35ec:	f240 435c 	movw	r3, #1116	; 0x45c
    35f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    35f4:	681b      	ldr	r3, [r3, #0]
    35f6:	429a      	cmp	r2, r3
    35f8:	d90f      	bls.n	361a <vTaskDelayUntil+0x4e>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    35fa:	687b      	ldr	r3, [r7, #4]
    35fc:	681a      	ldr	r2, [r3, #0]
    35fe:	693b      	ldr	r3, [r7, #16]
    3600:	429a      	cmp	r2, r3
    3602:	d919      	bls.n	3638 <vTaskDelayUntil+0x6c>
    3604:	f240 435c 	movw	r3, #1116	; 0x45c
    3608:	f2c2 0300 	movt	r3, #8192	; 0x2000
    360c:	681b      	ldr	r3, [r3, #0]
    360e:	693a      	ldr	r2, [r7, #16]
    3610:	429a      	cmp	r2, r3
    3612:	d911      	bls.n	3638 <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    3614:	2301      	movs	r3, #1
    3616:	617b      	str	r3, [r7, #20]
    3618:	e00e      	b.n	3638 <vTaskDelayUntil+0x6c>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    361a:	687b      	ldr	r3, [r7, #4]
    361c:	681a      	ldr	r2, [r3, #0]
    361e:	693b      	ldr	r3, [r7, #16]
    3620:	429a      	cmp	r2, r3
    3622:	d807      	bhi.n	3634 <vTaskDelayUntil+0x68>
    3624:	f240 435c 	movw	r3, #1116	; 0x45c
    3628:	f2c2 0300 	movt	r3, #8192	; 0x2000
    362c:	681b      	ldr	r3, [r3, #0]
    362e:	693a      	ldr	r2, [r7, #16]
    3630:	429a      	cmp	r2, r3
    3632:	d901      	bls.n	3638 <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    3634:	2301      	movs	r3, #1
    3636:	617b      	str	r3, [r7, #20]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    3638:	687b      	ldr	r3, [r7, #4]
    363a:	693a      	ldr	r2, [r7, #16]
    363c:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
    363e:	697b      	ldr	r3, [r7, #20]
    3640:	2b00      	cmp	r3, #0
    3642:	d00b      	beq.n	365c <vTaskDelayUntil+0x90>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3644:	f240 2354 	movw	r3, #596	; 0x254
    3648:	f2c2 0300 	movt	r3, #8192	; 0x2000
    364c:	681b      	ldr	r3, [r3, #0]
    364e:	3304      	adds	r3, #4
    3650:	4618      	mov	r0, r3
    3652:	f7ff f9e5 	bl	2a20 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    3656:	6938      	ldr	r0, [r7, #16]
    3658:	f000 fe64 	bl	4324 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    365c:	f000 fa5c 	bl	3b18 <xTaskResumeAll>
    3660:	60f8      	str	r0, [r7, #12]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    3662:	68fb      	ldr	r3, [r7, #12]
    3664:	2b00      	cmp	r3, #0
    3666:	d101      	bne.n	366c <vTaskDelayUntil+0xa0>
		{
			portYIELD_WITHIN_API();
    3668:	f001 f808 	bl	467c <vPortYieldFromISR>
		}
	}
    366c:	3718      	adds	r7, #24
    366e:	46bd      	mov	sp, r7
    3670:	bd80      	pop	{r7, pc}
    3672:	bf00      	nop

00003674 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    3674:	b580      	push	{r7, lr}
    3676:	b084      	sub	sp, #16
    3678:	af00      	add	r7, sp, #0
    367a:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    367c:	2300      	movs	r3, #0
    367e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    3680:	687b      	ldr	r3, [r7, #4]
    3682:	2b00      	cmp	r3, #0
    3684:	d018      	beq.n	36b8 <vTaskDelay+0x44>
		{
			vTaskSuspendAll();
    3686:	f000 fa35 	bl	3af4 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    368a:	f240 435c 	movw	r3, #1116	; 0x45c
    368e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3692:	681a      	ldr	r2, [r3, #0]
    3694:	687b      	ldr	r3, [r7, #4]
    3696:	4413      	add	r3, r2
    3698:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    369a:	f240 2354 	movw	r3, #596	; 0x254
    369e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    36a2:	681b      	ldr	r3, [r3, #0]
    36a4:	3304      	adds	r3, #4
    36a6:	4618      	mov	r0, r3
    36a8:	f7ff f9ba 	bl	2a20 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    36ac:	68b8      	ldr	r0, [r7, #8]
    36ae:	f000 fe39 	bl	4324 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    36b2:	f000 fa31 	bl	3b18 <xTaskResumeAll>
    36b6:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    36b8:	68fb      	ldr	r3, [r7, #12]
    36ba:	2b00      	cmp	r3, #0
    36bc:	d101      	bne.n	36c2 <vTaskDelay+0x4e>
		{
			portYIELD_WITHIN_API();
    36be:	f000 ffdd 	bl	467c <vPortYieldFromISR>
		}
	}
    36c2:	3710      	adds	r7, #16
    36c4:	46bd      	mov	sp, r7
    36c6:	bd80      	pop	{r7, pc}

000036c8 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
	{
    36c8:	b580      	push	{r7, lr}
    36ca:	b084      	sub	sp, #16
    36cc:	af00      	add	r7, sp, #0
    36ce:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxReturn;

		taskENTER_CRITICAL();
    36d0:	f000 ffe2 	bl	4698 <vPortEnterCritical>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    36d4:	687b      	ldr	r3, [r7, #4]
    36d6:	2b00      	cmp	r3, #0
    36d8:	d105      	bne.n	36e6 <uxTaskPriorityGet+0x1e>
    36da:	f240 2354 	movw	r3, #596	; 0x254
    36de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    36e2:	681b      	ldr	r3, [r3, #0]
    36e4:	e000      	b.n	36e8 <uxTaskPriorityGet+0x20>
    36e6:	687b      	ldr	r3, [r7, #4]
    36e8:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
    36ea:	68fb      	ldr	r3, [r7, #12]
    36ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    36ee:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
    36f0:	f000 ffe8 	bl	46c4 <vPortExitCritical>

		return uxReturn;
    36f4:	68bb      	ldr	r3, [r7, #8]
	}
    36f6:	4618      	mov	r0, r3
    36f8:	3710      	adds	r7, #16
    36fa:	46bd      	mov	sp, r7
    36fc:	bd80      	pop	{r7, pc}
    36fe:	bf00      	nop

00003700 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
	{
    3700:	b580      	push	{r7, lr}
    3702:	b086      	sub	sp, #24
    3704:	af00      	add	r7, sp, #0
    3706:	6078      	str	r0, [r7, #4]
    3708:	6039      	str	r1, [r7, #0]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxCurrentPriority;
	portBASE_TYPE xYieldRequired = pdFALSE;
    370a:	2300      	movs	r3, #0
    370c:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= configMAX_PRIORITIES )
    370e:	683b      	ldr	r3, [r7, #0]
    3710:	2b13      	cmp	r3, #19
    3712:	d901      	bls.n	3718 <vTaskPrioritySet+0x18>
		{
			uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    3714:	2313      	movs	r3, #19
    3716:	603b      	str	r3, [r7, #0]
		}

		taskENTER_CRITICAL();
    3718:	f000 ffbe 	bl	4698 <vPortEnterCritical>
		{
			if( pxTask == pxCurrentTCB )
    371c:	f240 2354 	movw	r3, #596	; 0x254
    3720:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3724:	681b      	ldr	r3, [r3, #0]
    3726:	687a      	ldr	r2, [r7, #4]
    3728:	429a      	cmp	r2, r3
    372a:	d101      	bne.n	3730 <vTaskPrioritySet+0x30>
			{
				pxTask = NULL;
    372c:	2300      	movs	r3, #0
    372e:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    3730:	687b      	ldr	r3, [r7, #4]
    3732:	2b00      	cmp	r3, #0
    3734:	d105      	bne.n	3742 <vTaskPrioritySet+0x42>
    3736:	f240 2354 	movw	r3, #596	; 0x254
    373a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    373e:	681b      	ldr	r3, [r3, #0]
    3740:	e000      	b.n	3744 <vTaskPrioritySet+0x44>
    3742:	687b      	ldr	r3, [r7, #4]
    3744:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentPriority = pxTCB->uxBasePriority;
    3746:	693b      	ldr	r3, [r7, #16]
    3748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    374a:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentPriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentPriority != uxNewPriority )
    374c:	68fa      	ldr	r2, [r7, #12]
    374e:	683b      	ldr	r3, [r7, #0]
    3750:	429a      	cmp	r2, r3
    3752:	d058      	beq.n	3806 <vTaskPrioritySet+0x106>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentPriority )
    3754:	683a      	ldr	r2, [r7, #0]
    3756:	68fb      	ldr	r3, [r7, #12]
    3758:	429a      	cmp	r2, r3
    375a:	d905      	bls.n	3768 <vTaskPrioritySet+0x68>
				{
					if( pxTask != NULL )
    375c:	687b      	ldr	r3, [r7, #4]
    375e:	2b00      	cmp	r3, #0
    3760:	d007      	beq.n	3772 <vTaskPrioritySet+0x72>
					{
						/* The priority of another task is being raised.  If we
						were raising the priority of the currently running task
						there would be no need to switch as it must have already
						been the highest priority task. */
						xYieldRequired = pdTRUE;
    3762:	2301      	movs	r3, #1
    3764:	617b      	str	r3, [r7, #20]
    3766:	e004      	b.n	3772 <vTaskPrioritySet+0x72>
					}
				}
				else if( pxTask == NULL )
    3768:	687b      	ldr	r3, [r7, #4]
    376a:	2b00      	cmp	r3, #0
    376c:	d101      	bne.n	3772 <vTaskPrioritySet+0x72>
				{
					/* Setting our own priority down means there may now be another
					task of higher priority that is ready to execute. */
					xYieldRequired = pdTRUE;
    376e:	2301      	movs	r3, #1
    3770:	617b      	str	r3, [r7, #20]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    3772:	693b      	ldr	r3, [r7, #16]
    3774:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    3776:	693b      	ldr	r3, [r7, #16]
    3778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    377a:	429a      	cmp	r2, r3
    377c:	d102      	bne.n	3784 <vTaskPrioritySet+0x84>
					{
						pxTCB->uxPriority = uxNewPriority;
    377e:	693b      	ldr	r3, [r7, #16]
    3780:	683a      	ldr	r2, [r7, #0]
    3782:	62da      	str	r2, [r3, #44]	; 0x2c
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
    3784:	693b      	ldr	r3, [r7, #16]
    3786:	683a      	ldr	r2, [r7, #0]
    3788:	645a      	str	r2, [r3, #68]	; 0x44
				{
					pxTCB->uxPriority = uxNewPriority;
				}
				#endif

				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
    378a:	683b      	ldr	r3, [r7, #0]
    378c:	f1c3 0214 	rsb	r2, r3, #20
    3790:	693b      	ldr	r3, [r7, #16]
    3792:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the queue appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
    3794:	693b      	ldr	r3, [r7, #16]
    3796:	6959      	ldr	r1, [r3, #20]
    3798:	68fa      	ldr	r2, [r7, #12]
    379a:	4613      	mov	r3, r2
    379c:	009b      	lsls	r3, r3, #2
    379e:	4413      	add	r3, r2
    37a0:	009b      	lsls	r3, r3, #2
    37a2:	f240 2258 	movw	r2, #600	; 0x258
    37a6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    37aa:	4413      	add	r3, r2
    37ac:	4299      	cmp	r1, r3
    37ae:	d125      	bne.n	37fc <vTaskPrioritySet+0xfc>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					vListRemove( &( pxTCB->xGenericListItem ) );
    37b0:	693b      	ldr	r3, [r7, #16]
    37b2:	3304      	adds	r3, #4
    37b4:	4618      	mov	r0, r3
    37b6:	f7ff f933 	bl	2a20 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    37ba:	693b      	ldr	r3, [r7, #16]
    37bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    37be:	f240 4364 	movw	r3, #1124	; 0x464
    37c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    37c6:	681b      	ldr	r3, [r3, #0]
    37c8:	429a      	cmp	r2, r3
    37ca:	d906      	bls.n	37da <vTaskPrioritySet+0xda>
    37cc:	693b      	ldr	r3, [r7, #16]
    37ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    37d0:	f240 4364 	movw	r3, #1124	; 0x464
    37d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    37d8:	601a      	str	r2, [r3, #0]
    37da:	693b      	ldr	r3, [r7, #16]
    37dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    37de:	4613      	mov	r3, r2
    37e0:	009b      	lsls	r3, r3, #2
    37e2:	4413      	add	r3, r2
    37e4:	009b      	lsls	r3, r3, #2
    37e6:	f240 2258 	movw	r2, #600	; 0x258
    37ea:	f2c2 0200 	movt	r2, #8192	; 0x2000
    37ee:	441a      	add	r2, r3
    37f0:	693b      	ldr	r3, [r7, #16]
    37f2:	3304      	adds	r3, #4
    37f4:	4610      	mov	r0, r2
    37f6:	4619      	mov	r1, r3
    37f8:	f7ff f8b2 	bl	2960 <vListInsertEnd>
				}

				if( xYieldRequired == pdTRUE )
    37fc:	697b      	ldr	r3, [r7, #20]
    37fe:	2b01      	cmp	r3, #1
    3800:	d101      	bne.n	3806 <vTaskPrioritySet+0x106>
				{
					portYIELD_WITHIN_API();
    3802:	f000 ff3b 	bl	467c <vPortYieldFromISR>
				}
			}
		}
		taskEXIT_CRITICAL();
    3806:	f000 ff5d 	bl	46c4 <vPortExitCritical>
	}
    380a:	3718      	adds	r7, #24
    380c:	46bd      	mov	sp, r7
    380e:	bd80      	pop	{r7, pc}

00003810 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
    3810:	b580      	push	{r7, lr}
    3812:	b084      	sub	sp, #16
    3814:	af00      	add	r7, sp, #0
    3816:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    3818:	f000 ff3e 	bl	4698 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
    381c:	f240 2354 	movw	r3, #596	; 0x254
    3820:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3824:	681b      	ldr	r3, [r3, #0]
    3826:	687a      	ldr	r2, [r7, #4]
    3828:	429a      	cmp	r2, r3
    382a:	d101      	bne.n	3830 <vTaskSuspend+0x20>
			{
				pxTaskToSuspend = NULL;
    382c:	2300      	movs	r3, #0
    382e:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
    3830:	687b      	ldr	r3, [r7, #4]
    3832:	2b00      	cmp	r3, #0
    3834:	d105      	bne.n	3842 <vTaskSuspend+0x32>
    3836:	f240 2354 	movw	r3, #596	; 0x254
    383a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    383e:	681b      	ldr	r3, [r3, #0]
    3840:	e000      	b.n	3844 <vTaskSuspend+0x34>
    3842:	687b      	ldr	r3, [r7, #4]
    3844:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    3846:	68fb      	ldr	r3, [r7, #12]
    3848:	3304      	adds	r3, #4
    384a:	4618      	mov	r0, r3
    384c:	f7ff f8e8 	bl	2a20 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    3850:	68fb      	ldr	r3, [r7, #12]
    3852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3854:	2b00      	cmp	r3, #0
    3856:	d004      	beq.n	3862 <vTaskSuspend+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    3858:	68fb      	ldr	r3, [r7, #12]
    385a:	3318      	adds	r3, #24
    385c:	4618      	mov	r0, r3
    385e:	f7ff f8df 	bl	2a20 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
    3862:	68fb      	ldr	r3, [r7, #12]
    3864:	3304      	adds	r3, #4
    3866:	f240 4044 	movw	r0, #1092	; 0x444
    386a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    386e:	4619      	mov	r1, r3
    3870:	f7ff f876 	bl	2960 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    3874:	f000 ff26 	bl	46c4 <vPortExitCritical>

		if( ( void * ) pxTaskToSuspend == NULL )
    3878:	687b      	ldr	r3, [r7, #4]
    387a:	2b00      	cmp	r3, #0
    387c:	d11e      	bne.n	38bc <vTaskSuspend+0xac>
		{
			if( xSchedulerRunning != pdFALSE )
    387e:	f240 4368 	movw	r3, #1128	; 0x468
    3882:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3886:	681b      	ldr	r3, [r3, #0]
    3888:	2b00      	cmp	r3, #0
    388a:	d002      	beq.n	3892 <vTaskSuspend+0x82>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
    388c:	f000 fef6 	bl	467c <vPortYieldFromISR>
    3890:	e014      	b.n	38bc <vTaskSuspend+0xac>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    3892:	f240 4344 	movw	r3, #1092	; 0x444
    3896:	f2c2 0300 	movt	r3, #8192	; 0x2000
    389a:	681a      	ldr	r2, [r3, #0]
    389c:	f240 4358 	movw	r3, #1112	; 0x458
    38a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    38a4:	681b      	ldr	r3, [r3, #0]
    38a6:	429a      	cmp	r2, r3
    38a8:	d106      	bne.n	38b8 <vTaskSuspend+0xa8>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    38aa:	f240 2354 	movw	r3, #596	; 0x254
    38ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    38b2:	2200      	movs	r2, #0
    38b4:	601a      	str	r2, [r3, #0]
    38b6:	e001      	b.n	38bc <vTaskSuspend+0xac>
				}
				else
				{
					vTaskSwitchContext();
    38b8:	f000 fb04 	bl	3ec4 <vTaskSwitchContext>
				}
			}
		}
	}
    38bc:	3710      	adds	r7, #16
    38be:	46bd      	mov	sp, r7
    38c0:	bd80      	pop	{r7, pc}
    38c2:	bf00      	nop

000038c4 <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
    38c4:	b480      	push	{r7}
    38c6:	b085      	sub	sp, #20
    38c8:	af00      	add	r7, sp, #0
    38ca:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xReturn = pdFALSE;
    38cc:	2300      	movs	r3, #0
    38ce:	60fb      	str	r3, [r7, #12]
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
    38d0:	687b      	ldr	r3, [r7, #4]
    38d2:	60bb      	str	r3, [r7, #8]
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    38d4:	68bb      	ldr	r3, [r7, #8]
    38d6:	695a      	ldr	r2, [r3, #20]
    38d8:	f240 4344 	movw	r3, #1092	; 0x444
    38dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    38e0:	429a      	cmp	r2, r3
    38e2:	d10d      	bne.n	3900 <xTaskIsTaskSuspended+0x3c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    38e4:	68bb      	ldr	r3, [r7, #8]
    38e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    38e8:	f240 4318 	movw	r3, #1048	; 0x418
    38ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    38f0:	429a      	cmp	r2, r3
    38f2:	d005      	beq.n	3900 <xTaskIsTaskSuspended+0x3c>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
    38f4:	68bb      	ldr	r3, [r7, #8]
    38f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    38f8:	2b00      	cmp	r3, #0
    38fa:	d101      	bne.n	3900 <xTaskIsTaskSuspended+0x3c>
				{
					xReturn = pdTRUE;
    38fc:	2301      	movs	r3, #1
    38fe:	60fb      	str	r3, [r7, #12]
				}
			}
		}

		return xReturn;
    3900:	68fb      	ldr	r3, [r7, #12]
	}
    3902:	4618      	mov	r0, r3
    3904:	3714      	adds	r7, #20
    3906:	46bd      	mov	sp, r7
    3908:	f85d 7b04 	ldr.w	r7, [sp], #4
    390c:	4770      	bx	lr
    390e:	bf00      	nop

00003910 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
    3910:	b580      	push	{r7, lr}
    3912:	b084      	sub	sp, #16
    3914:	af00      	add	r7, sp, #0
    3916:	6078      	str	r0, [r7, #4]
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
    3918:	687b      	ldr	r3, [r7, #4]
    391a:	60fb      	str	r3, [r7, #12]

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    391c:	68fb      	ldr	r3, [r7, #12]
    391e:	2b00      	cmp	r3, #0
    3920:	d043      	beq.n	39aa <vTaskResume+0x9a>
    3922:	f240 2354 	movw	r3, #596	; 0x254
    3926:	f2c2 0300 	movt	r3, #8192	; 0x2000
    392a:	681b      	ldr	r3, [r3, #0]
    392c:	68fa      	ldr	r2, [r7, #12]
    392e:	429a      	cmp	r2, r3
    3930:	d03b      	beq.n	39aa <vTaskResume+0x9a>
		{
			taskENTER_CRITICAL();
    3932:	f000 feb1 	bl	4698 <vPortEnterCritical>
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    3936:	68f8      	ldr	r0, [r7, #12]
    3938:	f7ff ffc4 	bl	38c4 <xTaskIsTaskSuspended>
    393c:	4603      	mov	r3, r0
    393e:	2b01      	cmp	r3, #1
    3940:	d131      	bne.n	39a6 <vTaskResume+0x96>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
    3942:	68fb      	ldr	r3, [r7, #12]
    3944:	3304      	adds	r3, #4
    3946:	4618      	mov	r0, r3
    3948:	f7ff f86a 	bl	2a20 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    394c:	68fb      	ldr	r3, [r7, #12]
    394e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3950:	f240 4364 	movw	r3, #1124	; 0x464
    3954:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3958:	681b      	ldr	r3, [r3, #0]
    395a:	429a      	cmp	r2, r3
    395c:	d906      	bls.n	396c <vTaskResume+0x5c>
    395e:	68fb      	ldr	r3, [r7, #12]
    3960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3962:	f240 4364 	movw	r3, #1124	; 0x464
    3966:	f2c2 0300 	movt	r3, #8192	; 0x2000
    396a:	601a      	str	r2, [r3, #0]
    396c:	68fb      	ldr	r3, [r7, #12]
    396e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3970:	4613      	mov	r3, r2
    3972:	009b      	lsls	r3, r3, #2
    3974:	4413      	add	r3, r2
    3976:	009b      	lsls	r3, r3, #2
    3978:	f240 2258 	movw	r2, #600	; 0x258
    397c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3980:	441a      	add	r2, r3
    3982:	68fb      	ldr	r3, [r7, #12]
    3984:	3304      	adds	r3, #4
    3986:	4610      	mov	r0, r2
    3988:	4619      	mov	r1, r3
    398a:	f7fe ffe9 	bl	2960 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    398e:	68fb      	ldr	r3, [r7, #12]
    3990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3992:	f240 2354 	movw	r3, #596	; 0x254
    3996:	f2c2 0300 	movt	r3, #8192	; 0x2000
    399a:	681b      	ldr	r3, [r3, #0]
    399c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    399e:	429a      	cmp	r2, r3
    39a0:	d301      	bcc.n	39a6 <vTaskResume+0x96>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
    39a2:	f000 fe6b 	bl	467c <vPortYieldFromISR>
					}
				}
			}
			taskEXIT_CRITICAL();
    39a6:	f000 fe8d 	bl	46c4 <vPortExitCritical>
		}
	}
    39aa:	3710      	adds	r7, #16
    39ac:	46bd      	mov	sp, r7
    39ae:	bd80      	pop	{r7, pc}

000039b0 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
    39b0:	b580      	push	{r7, lr}
    39b2:	b086      	sub	sp, #24
    39b4:	af00      	add	r7, sp, #0
    39b6:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xYieldRequired = pdFALSE;
    39b8:	2300      	movs	r3, #0
    39ba:	617b      	str	r3, [r7, #20]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxSavedInterruptStatus;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
    39bc:	687b      	ldr	r3, [r7, #4]
    39be:	613b      	str	r3, [r7, #16]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    39c0:	2300      	movs	r3, #0
    39c2:	60fb      	str	r3, [r7, #12]
    39c4:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    39c8:	f380 8811 	msr	BASEPRI, r0
		{
			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    39cc:	6938      	ldr	r0, [r7, #16]
    39ce:	f7ff ff79 	bl	38c4 <xTaskIsTaskSuspended>
    39d2:	4603      	mov	r3, r0
    39d4:	2b01      	cmp	r3, #1
    39d6:	d144      	bne.n	3a62 <xTaskResumeFromISR+0xb2>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    39d8:	f240 436c 	movw	r3, #1132	; 0x46c
    39dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    39e0:	681b      	ldr	r3, [r3, #0]
    39e2:	2b00      	cmp	r3, #0
    39e4:	d134      	bne.n	3a50 <xTaskResumeFromISR+0xa0>
				{
					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
    39e6:	693b      	ldr	r3, [r7, #16]
    39e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    39ea:	f240 2354 	movw	r3, #596	; 0x254
    39ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    39f2:	681b      	ldr	r3, [r3, #0]
    39f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    39f6:	429a      	cmp	r2, r3
    39f8:	bf34      	ite	cc
    39fa:	2300      	movcc	r3, #0
    39fc:	2301      	movcs	r3, #1
    39fe:	b2db      	uxtb	r3, r3
    3a00:	617b      	str	r3, [r7, #20]
					vListRemove(  &( pxTCB->xGenericListItem ) );
    3a02:	693b      	ldr	r3, [r7, #16]
    3a04:	3304      	adds	r3, #4
    3a06:	4618      	mov	r0, r3
    3a08:	f7ff f80a 	bl	2a20 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    3a0c:	693b      	ldr	r3, [r7, #16]
    3a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3a10:	f240 4364 	movw	r3, #1124	; 0x464
    3a14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a18:	681b      	ldr	r3, [r3, #0]
    3a1a:	429a      	cmp	r2, r3
    3a1c:	d906      	bls.n	3a2c <xTaskResumeFromISR+0x7c>
    3a1e:	693b      	ldr	r3, [r7, #16]
    3a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3a22:	f240 4364 	movw	r3, #1124	; 0x464
    3a26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a2a:	601a      	str	r2, [r3, #0]
    3a2c:	693b      	ldr	r3, [r7, #16]
    3a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3a30:	4613      	mov	r3, r2
    3a32:	009b      	lsls	r3, r3, #2
    3a34:	4413      	add	r3, r2
    3a36:	009b      	lsls	r3, r3, #2
    3a38:	f240 2258 	movw	r2, #600	; 0x258
    3a3c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3a40:	441a      	add	r2, r3
    3a42:	693b      	ldr	r3, [r7, #16]
    3a44:	3304      	adds	r3, #4
    3a46:	4610      	mov	r0, r2
    3a48:	4619      	mov	r1, r3
    3a4a:	f7fe ff89 	bl	2960 <vListInsertEnd>
    3a4e:	e008      	b.n	3a62 <xTaskResumeFromISR+0xb2>
				else
				{
					/* We cannot access the delayed or ready lists, so will hold this
					task pending until the scheduler is resumed, at which point a
					yield will be performed if necessary. */
					vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    3a50:	693b      	ldr	r3, [r7, #16]
    3a52:	3318      	adds	r3, #24
    3a54:	f240 4018 	movw	r0, #1048	; 0x418
    3a58:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3a5c:	4619      	mov	r1, r3
    3a5e:	f7fe ff7f 	bl	2960 <vListInsertEnd>
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    3a62:	f04f 0000 	mov.w	r0, #0
    3a66:	f380 8811 	msr	BASEPRI, r0

		return xYieldRequired;
    3a6a:	697b      	ldr	r3, [r7, #20]
	}
    3a6c:	4618      	mov	r0, r3
    3a6e:	3718      	adds	r7, #24
    3a70:	46bd      	mov	sp, r7
    3a72:	bd80      	pop	{r7, pc}

00003a74 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    3a74:	b580      	push	{r7, lr}
    3a76:	b086      	sub	sp, #24
    3a78:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    3a7a:	2300      	movs	r3, #0
    3a7c:	9300      	str	r3, [sp, #0]
    3a7e:	2300      	movs	r3, #0
    3a80:	9301      	str	r3, [sp, #4]
    3a82:	2300      	movs	r3, #0
    3a84:	9302      	str	r3, [sp, #8]
    3a86:	2300      	movs	r3, #0
    3a88:	9303      	str	r3, [sp, #12]
    3a8a:	f244 107d 	movw	r0, #16765	; 0x417d
    3a8e:	f2c0 0000 	movt	r0, #0
    3a92:	f643 01e4 	movw	r1, #14564	; 0x38e4
    3a96:	f2c0 0101 	movt	r1, #1
    3a9a:	2280      	movs	r2, #128	; 0x80
    3a9c:	2300      	movs	r3, #0
    3a9e:	f7ff fc6b 	bl	3378 <xTaskGenericCreate>
    3aa2:	6078      	str	r0, [r7, #4]
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
    3aa4:	687b      	ldr	r3, [r7, #4]
    3aa6:	2b01      	cmp	r3, #1
    3aa8:	d111      	bne.n	3ace <vTaskStartScheduler+0x5a>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
    3aaa:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    3aae:	f380 8811 	msr	BASEPRI, r0

		xSchedulerRunning = pdTRUE;
    3ab2:	f240 4368 	movw	r3, #1128	; 0x468
    3ab6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3aba:	2201      	movs	r2, #1
    3abc:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
    3abe:	f240 435c 	movw	r3, #1116	; 0x45c
    3ac2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ac6:	2200      	movs	r2, #0
    3ac8:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    3aca:	f000 fda9 	bl	4620 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    3ace:	3708      	adds	r7, #8
    3ad0:	46bd      	mov	sp, r7
    3ad2:	bd80      	pop	{r7, pc}

00003ad4 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    3ad4:	b580      	push	{r7, lr}
    3ad6:	af00      	add	r7, sp, #0
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    3ad8:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    3adc:	f380 8811 	msr	BASEPRI, r0
	xSchedulerRunning = pdFALSE;
    3ae0:	f240 4368 	movw	r3, #1128	; 0x468
    3ae4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ae8:	2200      	movs	r2, #0
    3aea:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
    3aec:	f000 fdc0 	bl	4670 <vPortEndScheduler>
}
    3af0:	bd80      	pop	{r7, pc}
    3af2:	bf00      	nop

00003af4 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    3af4:	b480      	push	{r7}
    3af6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    3af8:	f240 436c 	movw	r3, #1132	; 0x46c
    3afc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b00:	681b      	ldr	r3, [r3, #0]
    3b02:	1c5a      	adds	r2, r3, #1
    3b04:	f240 436c 	movw	r3, #1132	; 0x46c
    3b08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b0c:	601a      	str	r2, [r3, #0]
}
    3b0e:	46bd      	mov	sp, r7
    3b10:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b14:	4770      	bx	lr
    3b16:	bf00      	nop

00003b18 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    3b18:	b590      	push	{r4, r7, lr}
    3b1a:	b083      	sub	sp, #12
    3b1c:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    3b1e:	2300      	movs	r3, #0
    3b20:	607b      	str	r3, [r7, #4]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    3b22:	f000 fdb9 	bl	4698 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
    3b26:	f240 436c 	movw	r3, #1132	; 0x46c
    3b2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b2e:	681b      	ldr	r3, [r3, #0]
    3b30:	1e5a      	subs	r2, r3, #1
    3b32:	f240 436c 	movw	r3, #1132	; 0x46c
    3b36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b3a:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3b3c:	f240 436c 	movw	r3, #1132	; 0x46c
    3b40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b44:	681b      	ldr	r3, [r3, #0]
    3b46:	2b00      	cmp	r3, #0
    3b48:	f040 8086 	bne.w	3c58 <xTaskResumeAll+0x140>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    3b4c:	f240 4358 	movw	r3, #1112	; 0x458
    3b50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b54:	681b      	ldr	r3, [r3, #0]
    3b56:	2b00      	cmp	r3, #0
    3b58:	d07e      	beq.n	3c58 <xTaskResumeAll+0x140>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
    3b5a:	2300      	movs	r3, #0
    3b5c:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    3b5e:	e036      	b.n	3bce <xTaskResumeAll+0xb6>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    3b60:	f240 4318 	movw	r3, #1048	; 0x418
    3b64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b68:	68db      	ldr	r3, [r3, #12]
    3b6a:	68dc      	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
    3b6c:	f104 0318 	add.w	r3, r4, #24
    3b70:	4618      	mov	r0, r3
    3b72:	f7fe ff55 	bl	2a20 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    3b76:	1d23      	adds	r3, r4, #4
    3b78:	4618      	mov	r0, r3
    3b7a:	f7fe ff51 	bl	2a20 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    3b7e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3b80:	f240 4364 	movw	r3, #1124	; 0x464
    3b84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b88:	681b      	ldr	r3, [r3, #0]
    3b8a:	429a      	cmp	r2, r3
    3b8c:	d905      	bls.n	3b9a <xTaskResumeAll+0x82>
    3b8e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3b90:	f240 4364 	movw	r3, #1124	; 0x464
    3b94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b98:	601a      	str	r2, [r3, #0]
    3b9a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3b9c:	4613      	mov	r3, r2
    3b9e:	009b      	lsls	r3, r3, #2
    3ba0:	4413      	add	r3, r2
    3ba2:	009b      	lsls	r3, r3, #2
    3ba4:	f240 2258 	movw	r2, #600	; 0x258
    3ba8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3bac:	441a      	add	r2, r3
    3bae:	1d23      	adds	r3, r4, #4
    3bb0:	4610      	mov	r0, r2
    3bb2:	4619      	mov	r1, r3
    3bb4:	f7fe fed4 	bl	2960 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3bb8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3bba:	f240 2354 	movw	r3, #596	; 0x254
    3bbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3bc2:	681b      	ldr	r3, [r3, #0]
    3bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3bc6:	429a      	cmp	r2, r3
    3bc8:	d301      	bcc.n	3bce <xTaskResumeAll+0xb6>
					{
						xYieldRequired = pdTRUE;
    3bca:	2301      	movs	r3, #1
    3bcc:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    3bce:	f240 4318 	movw	r3, #1048	; 0x418
    3bd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3bd6:	681b      	ldr	r3, [r3, #0]
    3bd8:	2b00      	cmp	r3, #0
    3bda:	d1c1      	bne.n	3b60 <xTaskResumeAll+0x48>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    3bdc:	f240 4370 	movw	r3, #1136	; 0x470
    3be0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3be4:	681b      	ldr	r3, [r3, #0]
    3be6:	2b00      	cmp	r3, #0
    3be8:	d022      	beq.n	3c30 <xTaskResumeAll+0x118>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    3bea:	e01a      	b.n	3c22 <xTaskResumeAll+0x10a>
					{
						vTaskIncrementTick();
    3bec:	f000 f88c 	bl	3d08 <vTaskIncrementTick>
						--uxMissedTicks;
    3bf0:	f240 4370 	movw	r3, #1136	; 0x470
    3bf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3bf8:	681b      	ldr	r3, [r3, #0]
    3bfa:	1e5a      	subs	r2, r3, #1
    3bfc:	f240 4370 	movw	r3, #1136	; 0x470
    3c00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c04:	601a      	str	r2, [r3, #0]
                        // added by wanbo
                        if (uxMissedTicks > (unsigned portBASE_TYPE) 1<<31)
    3c06:	f240 4370 	movw	r3, #1136	; 0x470
    3c0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c0e:	681b      	ldr	r3, [r3, #0]
    3c10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    3c14:	d905      	bls.n	3c22 <xTaskResumeAll+0x10a>
                        {
                            uxMissedTicks = 0;
    3c16:	f240 4370 	movw	r3, #1136	; 0x470
    3c1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c1e:	2200      	movs	r2, #0
    3c20:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    3c22:	f240 4370 	movw	r3, #1136	; 0x470
    3c26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c2a:	681b      	ldr	r3, [r3, #0]
    3c2c:	2b00      	cmp	r3, #0
    3c2e:	d1dd      	bne.n	3bec <xTaskResumeAll+0xd4>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    3c30:	683b      	ldr	r3, [r7, #0]
    3c32:	2b01      	cmp	r3, #1
    3c34:	d006      	beq.n	3c44 <xTaskResumeAll+0x12c>
    3c36:	f240 4374 	movw	r3, #1140	; 0x474
    3c3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c3e:	681b      	ldr	r3, [r3, #0]
    3c40:	2b01      	cmp	r3, #1
    3c42:	d109      	bne.n	3c58 <xTaskResumeAll+0x140>
				{
					xAlreadyYielded = pdTRUE;
    3c44:	2301      	movs	r3, #1
    3c46:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
    3c48:	f240 4374 	movw	r3, #1140	; 0x474
    3c4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c50:	2200      	movs	r2, #0
    3c52:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
    3c54:	f000 fd12 	bl	467c <vPortYieldFromISR>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    3c58:	f000 fd34 	bl	46c4 <vPortExitCritical>

	return xAlreadyYielded;
    3c5c:	687b      	ldr	r3, [r7, #4]
}
    3c5e:	4618      	mov	r0, r3
    3c60:	370c      	adds	r7, #12
    3c62:	46bd      	mov	sp, r7
    3c64:	bd90      	pop	{r4, r7, pc}
    3c66:	bf00      	nop

00003c68 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    3c68:	b580      	push	{r7, lr}
    3c6a:	b082      	sub	sp, #8
    3c6c:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    3c6e:	f000 fd13 	bl	4698 <vPortEnterCritical>
	{
		xTicks = xTickCount;
    3c72:	f240 435c 	movw	r3, #1116	; 0x45c
    3c76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c7a:	681b      	ldr	r3, [r3, #0]
    3c7c:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
    3c7e:	f000 fd21 	bl	46c4 <vPortExitCritical>

	return xTicks;
    3c82:	687b      	ldr	r3, [r7, #4]
}
    3c84:	4618      	mov	r0, r3
    3c86:	3708      	adds	r7, #8
    3c88:	46bd      	mov	sp, r7
    3c8a:	bd80      	pop	{r7, pc}

00003c8c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
    3c8c:	b480      	push	{r7}
    3c8e:	b083      	sub	sp, #12
    3c90:	af00      	add	r7, sp, #0
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    3c92:	2300      	movs	r3, #0
    3c94:	607b      	str	r3, [r7, #4]
    3c96:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    3c9a:	f380 8811 	msr	BASEPRI, r0
	xReturn = xTickCount;
    3c9e:	f240 435c 	movw	r3, #1116	; 0x45c
    3ca2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ca6:	681b      	ldr	r3, [r3, #0]
    3ca8:	603b      	str	r3, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    3caa:	f04f 0000 	mov.w	r0, #0
    3cae:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    3cb2:	683b      	ldr	r3, [r7, #0]
}
    3cb4:	4618      	mov	r0, r3
    3cb6:	370c      	adds	r7, #12
    3cb8:	46bd      	mov	sp, r7
    3cba:	f85d 7b04 	ldr.w	r7, [sp], #4
    3cbe:	4770      	bx	lr

00003cc0 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
    3cc0:	b480      	push	{r7}
    3cc2:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    3cc4:	f240 4358 	movw	r3, #1112	; 0x458
    3cc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ccc:	681b      	ldr	r3, [r3, #0]
}
    3cce:	4618      	mov	r0, r3
    3cd0:	46bd      	mov	sp, r7
    3cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
    3cd6:	4770      	bx	lr

00003cd8 <pcTaskGetTaskName>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_pcTaskGetTaskName == 1 )

	signed char *pcTaskGetTaskName( xTaskHandle xTaskToQuery )
	{
    3cd8:	b480      	push	{r7}
    3cda:	b085      	sub	sp, #20
    3cdc:	af00      	add	r7, sp, #0
    3cde:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		/* If null is passed in here then the name of the calling task is being queried. */
		pxTCB = prvGetTCBFromHandle( xTaskToQuery );
    3ce0:	687b      	ldr	r3, [r7, #4]
    3ce2:	2b00      	cmp	r3, #0
    3ce4:	d105      	bne.n	3cf2 <pcTaskGetTaskName+0x1a>
    3ce6:	f240 2354 	movw	r3, #596	; 0x254
    3cea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3cee:	681b      	ldr	r3, [r3, #0]
    3cf0:	e000      	b.n	3cf4 <pcTaskGetTaskName+0x1c>
    3cf2:	687b      	ldr	r3, [r7, #4]
    3cf4:	60fb      	str	r3, [r7, #12]
		configASSERT( pxTCB );
		return &( pxTCB->pcTaskName[ 0 ] );
    3cf6:	68fb      	ldr	r3, [r7, #12]
    3cf8:	3334      	adds	r3, #52	; 0x34
	}
    3cfa:	4618      	mov	r0, r3
    3cfc:	3714      	adds	r7, #20
    3cfe:	46bd      	mov	sp, r7
    3d00:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d04:	4770      	bx	lr
    3d06:	bf00      	nop

00003d08 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    3d08:	b580      	push	{r7, lr}
    3d0a:	b084      	sub	sp, #16
    3d0c:	af00      	add	r7, sp, #0
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3d0e:	f240 436c 	movw	r3, #1132	; 0x46c
    3d12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d16:	681b      	ldr	r3, [r3, #0]
    3d18:	2b00      	cmp	r3, #0
    3d1a:	f040 80b9 	bne.w	3e90 <vTaskIncrementTick+0x188>
	{
		++xTickCount;
    3d1e:	f240 435c 	movw	r3, #1116	; 0x45c
    3d22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d26:	681b      	ldr	r3, [r3, #0]
    3d28:	1c5a      	adds	r2, r3, #1
    3d2a:	f240 435c 	movw	r3, #1116	; 0x45c
    3d2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d32:	601a      	str	r2, [r3, #0]
        //vPrintNumber(xTickCount);
		if( xTickCount == ( portTickType ) 0U )
    3d34:	f240 435c 	movw	r3, #1116	; 0x45c
    3d38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d3c:	681b      	ldr	r3, [r3, #0]
    3d3e:	2b00      	cmp	r3, #0
    3d40:	d13f      	bne.n	3dc2 <vTaskIncrementTick+0xba>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    3d42:	f240 4310 	movw	r3, #1040	; 0x410
    3d46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d4a:	681b      	ldr	r3, [r3, #0]
    3d4c:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    3d4e:	f240 4314 	movw	r3, #1044	; 0x414
    3d52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d56:	681a      	ldr	r2, [r3, #0]
    3d58:	f240 4310 	movw	r3, #1040	; 0x410
    3d5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d60:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
    3d62:	f240 4314 	movw	r3, #1044	; 0x414
    3d66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d6a:	68fa      	ldr	r2, [r7, #12]
    3d6c:	601a      	str	r2, [r3, #0]
			xNumOfOverflows++;
    3d6e:	f240 4378 	movw	r3, #1144	; 0x478
    3d72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d76:	681b      	ldr	r3, [r3, #0]
    3d78:	1c5a      	adds	r2, r3, #1
    3d7a:	f240 4378 	movw	r3, #1144	; 0x478
    3d7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d82:	601a      	str	r2, [r3, #0]
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    3d84:	f240 4310 	movw	r3, #1040	; 0x410
    3d88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d8c:	681b      	ldr	r3, [r3, #0]
    3d8e:	681b      	ldr	r3, [r3, #0]
    3d90:	2b00      	cmp	r3, #0
    3d92:	d107      	bne.n	3da4 <vTaskIncrementTick+0x9c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    3d94:	f240 03f8 	movw	r3, #248	; 0xf8
    3d98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d9c:	f04f 32ff 	mov.w	r2, #4294967295
    3da0:	601a      	str	r2, [r3, #0]
    3da2:	e00e      	b.n	3dc2 <vTaskIncrementTick+0xba>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    3da4:	f240 4310 	movw	r3, #1040	; 0x410
    3da8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3dac:	681b      	ldr	r3, [r3, #0]
    3dae:	68db      	ldr	r3, [r3, #12]
    3db0:	68db      	ldr	r3, [r3, #12]
    3db2:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    3db4:	68bb      	ldr	r3, [r7, #8]
    3db6:	685a      	ldr	r2, [r3, #4]
    3db8:	f240 03f8 	movw	r3, #248	; 0xf8
    3dbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3dc0:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    3dc2:	f240 435c 	movw	r3, #1116	; 0x45c
    3dc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3dca:	681a      	ldr	r2, [r3, #0]
    3dcc:	f240 03f8 	movw	r3, #248	; 0xf8
    3dd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3dd4:	681b      	ldr	r3, [r3, #0]
    3dd6:	429a      	cmp	r2, r3
    3dd8:	d359      	bcc.n	3e8e <vTaskIncrementTick+0x186>
    3dda:	f240 4310 	movw	r3, #1040	; 0x410
    3dde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3de2:	681b      	ldr	r3, [r3, #0]
    3de4:	681b      	ldr	r3, [r3, #0]
    3de6:	2b00      	cmp	r3, #0
    3de8:	d107      	bne.n	3dfa <vTaskIncrementTick+0xf2>
    3dea:	f240 03f8 	movw	r3, #248	; 0xf8
    3dee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3df2:	f04f 32ff 	mov.w	r2, #4294967295
    3df6:	601a      	str	r2, [r3, #0]
    3df8:	e049      	b.n	3e8e <vTaskIncrementTick+0x186>
    3dfa:	f240 4310 	movw	r3, #1040	; 0x410
    3dfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e02:	681b      	ldr	r3, [r3, #0]
    3e04:	68db      	ldr	r3, [r3, #12]
    3e06:	68db      	ldr	r3, [r3, #12]
    3e08:	60bb      	str	r3, [r7, #8]
    3e0a:	68bb      	ldr	r3, [r7, #8]
    3e0c:	685b      	ldr	r3, [r3, #4]
    3e0e:	607b      	str	r3, [r7, #4]
    3e10:	f240 435c 	movw	r3, #1116	; 0x45c
    3e14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e18:	681a      	ldr	r2, [r3, #0]
    3e1a:	687b      	ldr	r3, [r7, #4]
    3e1c:	429a      	cmp	r2, r3
    3e1e:	d206      	bcs.n	3e2e <vTaskIncrementTick+0x126>
    3e20:	f240 03f8 	movw	r3, #248	; 0xf8
    3e24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e28:	687a      	ldr	r2, [r7, #4]
    3e2a:	601a      	str	r2, [r3, #0]
    3e2c:	e02f      	b.n	3e8e <vTaskIncrementTick+0x186>
    3e2e:	68bb      	ldr	r3, [r7, #8]
    3e30:	3304      	adds	r3, #4
    3e32:	4618      	mov	r0, r3
    3e34:	f7fe fdf4 	bl	2a20 <vListRemove>
    3e38:	68bb      	ldr	r3, [r7, #8]
    3e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3e3c:	2b00      	cmp	r3, #0
    3e3e:	d004      	beq.n	3e4a <vTaskIncrementTick+0x142>
    3e40:	68bb      	ldr	r3, [r7, #8]
    3e42:	3318      	adds	r3, #24
    3e44:	4618      	mov	r0, r3
    3e46:	f7fe fdeb 	bl	2a20 <vListRemove>
    3e4a:	68bb      	ldr	r3, [r7, #8]
    3e4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3e4e:	f240 4364 	movw	r3, #1124	; 0x464
    3e52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e56:	681b      	ldr	r3, [r3, #0]
    3e58:	429a      	cmp	r2, r3
    3e5a:	d906      	bls.n	3e6a <vTaskIncrementTick+0x162>
    3e5c:	68bb      	ldr	r3, [r7, #8]
    3e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3e60:	f240 4364 	movw	r3, #1124	; 0x464
    3e64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e68:	601a      	str	r2, [r3, #0]
    3e6a:	68bb      	ldr	r3, [r7, #8]
    3e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3e6e:	4613      	mov	r3, r2
    3e70:	009b      	lsls	r3, r3, #2
    3e72:	4413      	add	r3, r2
    3e74:	009b      	lsls	r3, r3, #2
    3e76:	f240 2258 	movw	r2, #600	; 0x258
    3e7a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3e7e:	441a      	add	r2, r3
    3e80:	68bb      	ldr	r3, [r7, #8]
    3e82:	3304      	adds	r3, #4
    3e84:	4610      	mov	r0, r2
    3e86:	4619      	mov	r1, r3
    3e88:	f7fe fd6a 	bl	2960 <vListInsertEnd>
    3e8c:	e7a5      	b.n	3dda <vTaskIncrementTick+0xd2>
    3e8e:	e00c      	b.n	3eaa <vTaskIncrementTick+0x1a2>
	}
	else
	{
		++uxMissedTicks;
    3e90:	f240 4370 	movw	r3, #1136	; 0x470
    3e94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e98:	681b      	ldr	r3, [r3, #0]
    3e9a:	1c5a      	adds	r2, r3, #1
    3e9c:	f240 4370 	movw	r3, #1136	; 0x470
    3ea0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ea4:	601a      	str	r2, [r3, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
    3ea6:	f00e fc1d 	bl	126e4 <vApplicationTickHook>

	#if ( configUSE_TICK_HOOK == 1 )
	{
		/* Guard against the tick hook being called when the missed tick
		count is being unwound (when the scheduler is being unlocked. */
		if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
    3eaa:	f240 4370 	movw	r3, #1136	; 0x470
    3eae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3eb2:	681b      	ldr	r3, [r3, #0]
    3eb4:	2b00      	cmp	r3, #0
    3eb6:	d101      	bne.n	3ebc <vTaskIncrementTick+0x1b4>
		{
			vApplicationTickHook();
    3eb8:	f00e fc14 	bl	126e4 <vApplicationTickHook>
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    3ebc:	3710      	adds	r7, #16
    3ebe:	46bd      	mov	sp, r7
    3ec0:	bd80      	pop	{r7, pc}
    3ec2:	bf00      	nop

00003ec4 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    3ec4:	b580      	push	{r7, lr}
    3ec6:	b082      	sub	sp, #8
    3ec8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    3eca:	f240 436c 	movw	r3, #1132	; 0x46c
    3ece:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ed2:	681b      	ldr	r3, [r3, #0]
    3ed4:	2b00      	cmp	r3, #0
    3ed6:	d006      	beq.n	3ee6 <vTaskSwitchContext+0x22>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    3ed8:	f240 4374 	movw	r3, #1140	; 0x474
    3edc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ee0:	2201      	movs	r2, #1
    3ee2:	601a      	str	r2, [r3, #0]
    3ee4:	e047      	b.n	3f76 <vTaskSwitchContext+0xb2>
	}
	else
	{
		traceTASK_SWITCHED_OUT();
    3ee6:	f00e fbe7 	bl	126b8 <myTraceSwitchedOut>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    3eea:	e00a      	b.n	3f02 <vTaskSwitchContext+0x3e>
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    3eec:	f240 4364 	movw	r3, #1124	; 0x464
    3ef0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ef4:	681b      	ldr	r3, [r3, #0]
    3ef6:	1e5a      	subs	r2, r3, #1
    3ef8:	f240 4364 	movw	r3, #1124	; 0x464
    3efc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f00:	601a      	str	r2, [r3, #0]
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    3f02:	f240 4364 	movw	r3, #1124	; 0x464
    3f06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f0a:	6819      	ldr	r1, [r3, #0]
    3f0c:	f240 2258 	movw	r2, #600	; 0x258
    3f10:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3f14:	460b      	mov	r3, r1
    3f16:	009b      	lsls	r3, r3, #2
    3f18:	440b      	add	r3, r1
    3f1a:	009b      	lsls	r3, r3, #2
    3f1c:	4413      	add	r3, r2
    3f1e:	681b      	ldr	r3, [r3, #0]
    3f20:	2b00      	cmp	r3, #0
    3f22:	d0e3      	beq.n	3eec <vTaskSwitchContext+0x28>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    3f24:	f240 4364 	movw	r3, #1124	; 0x464
    3f28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f2c:	681a      	ldr	r2, [r3, #0]
    3f2e:	4613      	mov	r3, r2
    3f30:	009b      	lsls	r3, r3, #2
    3f32:	4413      	add	r3, r2
    3f34:	009b      	lsls	r3, r3, #2
    3f36:	f240 2258 	movw	r2, #600	; 0x258
    3f3a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3f3e:	4413      	add	r3, r2
    3f40:	607b      	str	r3, [r7, #4]
    3f42:	687b      	ldr	r3, [r7, #4]
    3f44:	685b      	ldr	r3, [r3, #4]
    3f46:	685a      	ldr	r2, [r3, #4]
    3f48:	687b      	ldr	r3, [r7, #4]
    3f4a:	605a      	str	r2, [r3, #4]
    3f4c:	687b      	ldr	r3, [r7, #4]
    3f4e:	685a      	ldr	r2, [r3, #4]
    3f50:	687b      	ldr	r3, [r7, #4]
    3f52:	3308      	adds	r3, #8
    3f54:	429a      	cmp	r2, r3
    3f56:	d104      	bne.n	3f62 <vTaskSwitchContext+0x9e>
    3f58:	687b      	ldr	r3, [r7, #4]
    3f5a:	685b      	ldr	r3, [r3, #4]
    3f5c:	685a      	ldr	r2, [r3, #4]
    3f5e:	687b      	ldr	r3, [r7, #4]
    3f60:	605a      	str	r2, [r3, #4]
    3f62:	687b      	ldr	r3, [r7, #4]
    3f64:	685b      	ldr	r3, [r3, #4]
    3f66:	68da      	ldr	r2, [r3, #12]
    3f68:	f240 2354 	movw	r3, #596	; 0x254
    3f6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f70:	601a      	str	r2, [r3, #0]
        //vPrintString(pcTaskGetTaskName(pxCurrentTCB));
	
		traceTASK_SWITCHED_IN();
    3f72:	f00e fb9b 	bl	126ac <myTraceSwitchedIn>
	}
}
    3f76:	3708      	adds	r7, #8
    3f78:	46bd      	mov	sp, r7
    3f7a:	bd80      	pop	{r7, pc}

00003f7c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    3f7c:	b580      	push	{r7, lr}
    3f7e:	b084      	sub	sp, #16
    3f80:	af00      	add	r7, sp, #0
    3f82:	6078      	str	r0, [r7, #4]
    3f84:	6039      	str	r1, [r7, #0]
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    3f86:	f240 2354 	movw	r3, #596	; 0x254
    3f8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f8e:	681b      	ldr	r3, [r3, #0]
    3f90:	3318      	adds	r3, #24
    3f92:	6878      	ldr	r0, [r7, #4]
    3f94:	4619      	mov	r1, r3
    3f96:	f7fe fd0b 	bl	29b0 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3f9a:	f240 2354 	movw	r3, #596	; 0x254
    3f9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3fa2:	681b      	ldr	r3, [r3, #0]
    3fa4:	3304      	adds	r3, #4
    3fa6:	4618      	mov	r0, r3
    3fa8:	f7fe fd3a 	bl	2a20 <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    3fac:	683b      	ldr	r3, [r7, #0]
    3fae:	f1b3 3fff 	cmp.w	r3, #4294967295
    3fb2:	d10d      	bne.n	3fd0 <vTaskPlaceOnEventList+0x54>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3fb4:	f240 2354 	movw	r3, #596	; 0x254
    3fb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3fbc:	681b      	ldr	r3, [r3, #0]
    3fbe:	3304      	adds	r3, #4
    3fc0:	f240 4044 	movw	r0, #1092	; 0x444
    3fc4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3fc8:	4619      	mov	r1, r3
    3fca:	f7fe fcc9 	bl	2960 <vListInsertEnd>
    3fce:	e00a      	b.n	3fe6 <vTaskPlaceOnEventList+0x6a>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    3fd0:	f240 435c 	movw	r3, #1116	; 0x45c
    3fd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3fd8:	681a      	ldr	r2, [r3, #0]
    3fda:	683b      	ldr	r3, [r7, #0]
    3fdc:	4413      	add	r3, r2
    3fde:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    3fe0:	68f8      	ldr	r0, [r7, #12]
    3fe2:	f000 f99f 	bl	4324 <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
    3fe6:	3710      	adds	r7, #16
    3fe8:	46bd      	mov	sp, r7
    3fea:	bd80      	pop	{r7, pc}

00003fec <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    3fec:	b580      	push	{r7, lr}
    3fee:	b084      	sub	sp, #16
    3ff0:	af00      	add	r7, sp, #0
    3ff2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    3ff4:	687b      	ldr	r3, [r7, #4]
    3ff6:	68db      	ldr	r3, [r3, #12]
    3ff8:	68db      	ldr	r3, [r3, #12]
    3ffa:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    3ffc:	68bb      	ldr	r3, [r7, #8]
    3ffe:	3318      	adds	r3, #24
    4000:	4618      	mov	r0, r3
    4002:	f7fe fd0d 	bl	2a20 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    4006:	f240 436c 	movw	r3, #1132	; 0x46c
    400a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    400e:	681b      	ldr	r3, [r3, #0]
    4010:	2b00      	cmp	r3, #0
    4012:	d126      	bne.n	4062 <xTaskRemoveFromEventList+0x76>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    4014:	68bb      	ldr	r3, [r7, #8]
    4016:	3304      	adds	r3, #4
    4018:	4618      	mov	r0, r3
    401a:	f7fe fd01 	bl	2a20 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    401e:	68bb      	ldr	r3, [r7, #8]
    4020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4022:	f240 4364 	movw	r3, #1124	; 0x464
    4026:	f2c2 0300 	movt	r3, #8192	; 0x2000
    402a:	681b      	ldr	r3, [r3, #0]
    402c:	429a      	cmp	r2, r3
    402e:	d906      	bls.n	403e <xTaskRemoveFromEventList+0x52>
    4030:	68bb      	ldr	r3, [r7, #8]
    4032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4034:	f240 4364 	movw	r3, #1124	; 0x464
    4038:	f2c2 0300 	movt	r3, #8192	; 0x2000
    403c:	601a      	str	r2, [r3, #0]
    403e:	68bb      	ldr	r3, [r7, #8]
    4040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4042:	4613      	mov	r3, r2
    4044:	009b      	lsls	r3, r3, #2
    4046:	4413      	add	r3, r2
    4048:	009b      	lsls	r3, r3, #2
    404a:	f240 2258 	movw	r2, #600	; 0x258
    404e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4052:	441a      	add	r2, r3
    4054:	68bb      	ldr	r3, [r7, #8]
    4056:	3304      	adds	r3, #4
    4058:	4610      	mov	r0, r2
    405a:	4619      	mov	r1, r3
    405c:	f7fe fc80 	bl	2960 <vListInsertEnd>
    4060:	e008      	b.n	4074 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    4062:	68bb      	ldr	r3, [r7, #8]
    4064:	3318      	adds	r3, #24
    4066:	f240 4018 	movw	r0, #1048	; 0x418
    406a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    406e:	4619      	mov	r1, r3
    4070:	f7fe fc76 	bl	2960 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    4074:	68bb      	ldr	r3, [r7, #8]
    4076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4078:	f240 2354 	movw	r3, #596	; 0x254
    407c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4080:	681b      	ldr	r3, [r3, #0]
    4082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4084:	429a      	cmp	r2, r3
    4086:	d302      	bcc.n	408e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    4088:	2301      	movs	r3, #1
    408a:	60fb      	str	r3, [r7, #12]
    408c:	e001      	b.n	4092 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
    408e:	2300      	movs	r3, #0
    4090:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    4092:	68fb      	ldr	r3, [r7, #12]
}
    4094:	4618      	mov	r0, r3
    4096:	3710      	adds	r7, #16
    4098:	46bd      	mov	sp, r7
    409a:	bd80      	pop	{r7, pc}

0000409c <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    409c:	b480      	push	{r7}
    409e:	b083      	sub	sp, #12
    40a0:	af00      	add	r7, sp, #0
    40a2:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    40a4:	f240 4378 	movw	r3, #1144	; 0x478
    40a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    40ac:	681a      	ldr	r2, [r3, #0]
    40ae:	687b      	ldr	r3, [r7, #4]
    40b0:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    40b2:	f240 435c 	movw	r3, #1116	; 0x45c
    40b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    40ba:	681a      	ldr	r2, [r3, #0]
    40bc:	687b      	ldr	r3, [r7, #4]
    40be:	605a      	str	r2, [r3, #4]
}
    40c0:	370c      	adds	r7, #12
    40c2:	46bd      	mov	sp, r7
    40c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    40c8:	4770      	bx	lr
    40ca:	bf00      	nop

000040cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    40cc:	b580      	push	{r7, lr}
    40ce:	b084      	sub	sp, #16
    40d0:	af00      	add	r7, sp, #0
    40d2:	6078      	str	r0, [r7, #4]
    40d4:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    40d6:	f000 fadf 	bl	4698 <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    40da:	683b      	ldr	r3, [r7, #0]
    40dc:	681b      	ldr	r3, [r3, #0]
    40de:	f1b3 3fff 	cmp.w	r3, #4294967295
    40e2:	d102      	bne.n	40ea <xTaskCheckForTimeOut+0x1e>
			{
				xReturn = pdFALSE;
    40e4:	2300      	movs	r3, #0
    40e6:	60fb      	str	r3, [r7, #12]
    40e8:	e035      	b.n	4156 <xTaskCheckForTimeOut+0x8a>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    40ea:	687b      	ldr	r3, [r7, #4]
    40ec:	681a      	ldr	r2, [r3, #0]
    40ee:	f240 4378 	movw	r3, #1144	; 0x478
    40f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    40f6:	681b      	ldr	r3, [r3, #0]
    40f8:	429a      	cmp	r2, r3
    40fa:	d00b      	beq.n	4114 <xTaskCheckForTimeOut+0x48>
    40fc:	687b      	ldr	r3, [r7, #4]
    40fe:	685a      	ldr	r2, [r3, #4]
    4100:	f240 435c 	movw	r3, #1116	; 0x45c
    4104:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4108:	681b      	ldr	r3, [r3, #0]
    410a:	429a      	cmp	r2, r3
    410c:	d802      	bhi.n	4114 <xTaskCheckForTimeOut+0x48>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    410e:	2301      	movs	r3, #1
    4110:	60fb      	str	r3, [r7, #12]
    4112:	e020      	b.n	4156 <xTaskCheckForTimeOut+0x8a>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    4114:	f240 435c 	movw	r3, #1116	; 0x45c
    4118:	f2c2 0300 	movt	r3, #8192	; 0x2000
    411c:	681a      	ldr	r2, [r3, #0]
    411e:	687b      	ldr	r3, [r7, #4]
    4120:	685b      	ldr	r3, [r3, #4]
    4122:	1ad2      	subs	r2, r2, r3
    4124:	683b      	ldr	r3, [r7, #0]
    4126:	681b      	ldr	r3, [r3, #0]
    4128:	429a      	cmp	r2, r3
    412a:	d212      	bcs.n	4152 <xTaskCheckForTimeOut+0x86>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    412c:	683b      	ldr	r3, [r7, #0]
    412e:	681a      	ldr	r2, [r3, #0]
    4130:	687b      	ldr	r3, [r7, #4]
    4132:	6859      	ldr	r1, [r3, #4]
    4134:	f240 435c 	movw	r3, #1116	; 0x45c
    4138:	f2c2 0300 	movt	r3, #8192	; 0x2000
    413c:	681b      	ldr	r3, [r3, #0]
    413e:	1acb      	subs	r3, r1, r3
    4140:	441a      	add	r2, r3
    4142:	683b      	ldr	r3, [r7, #0]
    4144:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
    4146:	6878      	ldr	r0, [r7, #4]
    4148:	f7ff ffa8 	bl	409c <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    414c:	2300      	movs	r3, #0
    414e:	60fb      	str	r3, [r7, #12]
    4150:	e001      	b.n	4156 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			xReturn = pdTRUE;
    4152:	2301      	movs	r3, #1
    4154:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    4156:	f000 fab5 	bl	46c4 <vPortExitCritical>

	return xReturn;
    415a:	68fb      	ldr	r3, [r7, #12]
}
    415c:	4618      	mov	r0, r3
    415e:	3710      	adds	r7, #16
    4160:	46bd      	mov	sp, r7
    4162:	bd80      	pop	{r7, pc}

00004164 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    4164:	b480      	push	{r7}
    4166:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
    4168:	f240 4374 	movw	r3, #1140	; 0x474
    416c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4170:	2201      	movs	r2, #1
    4172:	601a      	str	r2, [r3, #0]
}
    4174:	46bd      	mov	sp, r7
    4176:	f85d 7b04 	ldr.w	r7, [sp], #4
    417a:	4770      	bx	lr

0000417c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    417c:	b580      	push	{r7, lr}
    417e:	b082      	sub	sp, #8
    4180:	af00      	add	r7, sp, #0
    4182:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    4184:	f000 f886 	bl	4294 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
    4188:	f000 fa78 	bl	467c <vPortYieldFromISR>
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
    418c:	e7fa      	b.n	4184 <prvIdleTask+0x8>
    418e:	bf00      	nop

00004190 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    4190:	b580      	push	{r7, lr}
    4192:	b084      	sub	sp, #16
    4194:	af00      	add	r7, sp, #0
    4196:	60f8      	str	r0, [r7, #12]
    4198:	60b9      	str	r1, [r7, #8]
    419a:	607a      	str	r2, [r7, #4]
    419c:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    419e:	68fb      	ldr	r3, [r7, #12]
    41a0:	3334      	adds	r3, #52	; 0x34
    41a2:	4618      	mov	r0, r3
    41a4:	68b9      	ldr	r1, [r7, #8]
    41a6:	2210      	movs	r2, #16
    41a8:	f00f fb2a 	bl	13800 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    41ac:	68fb      	ldr	r3, [r7, #12]
    41ae:	2200      	movs	r2, #0
    41b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    41b4:	687b      	ldr	r3, [r7, #4]
    41b6:	2b13      	cmp	r3, #19
    41b8:	d901      	bls.n	41be <prvInitialiseTCBVariables+0x2e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    41ba:	2313      	movs	r3, #19
    41bc:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
    41be:	68fb      	ldr	r3, [r7, #12]
    41c0:	687a      	ldr	r2, [r7, #4]
    41c2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    41c4:	68fb      	ldr	r3, [r7, #12]
    41c6:	687a      	ldr	r2, [r7, #4]
    41c8:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    41ca:	68fb      	ldr	r3, [r7, #12]
    41cc:	3304      	adds	r3, #4
    41ce:	4618      	mov	r0, r3
    41d0:	f7fe fbba 	bl	2948 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    41d4:	68fb      	ldr	r3, [r7, #12]
    41d6:	3318      	adds	r3, #24
    41d8:	4618      	mov	r0, r3
    41da:	f7fe fbb5 	bl	2948 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    41de:	68fb      	ldr	r3, [r7, #12]
    41e0:	68fa      	ldr	r2, [r7, #12]
    41e2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    41e4:	687b      	ldr	r3, [r7, #4]
    41e6:	f1c3 0214 	rsb	r2, r3, #20
    41ea:	68fb      	ldr	r3, [r7, #12]
    41ec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    41ee:	68fb      	ldr	r3, [r7, #12]
    41f0:	68fa      	ldr	r2, [r7, #12]
    41f2:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    41f4:	3710      	adds	r7, #16
    41f6:	46bd      	mov	sp, r7
    41f8:	bd80      	pop	{r7, pc}
    41fa:	bf00      	nop

000041fc <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    41fc:	b580      	push	{r7, lr}
    41fe:	b082      	sub	sp, #8
    4200:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    4202:	2300      	movs	r3, #0
    4204:	607b      	str	r3, [r7, #4]
    4206:	e00f      	b.n	4228 <prvInitialiseTaskLists+0x2c>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    4208:	687a      	ldr	r2, [r7, #4]
    420a:	4613      	mov	r3, r2
    420c:	009b      	lsls	r3, r3, #2
    420e:	4413      	add	r3, r2
    4210:	009b      	lsls	r3, r3, #2
    4212:	f240 2258 	movw	r2, #600	; 0x258
    4216:	f2c2 0200 	movt	r2, #8192	; 0x2000
    421a:	4413      	add	r3, r2
    421c:	4618      	mov	r0, r3
    421e:	f7fe fb73 	bl	2908 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    4222:	687b      	ldr	r3, [r7, #4]
    4224:	3301      	adds	r3, #1
    4226:	607b      	str	r3, [r7, #4]
    4228:	687b      	ldr	r3, [r7, #4]
    422a:	2b13      	cmp	r3, #19
    422c:	d9ec      	bls.n	4208 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    422e:	f240 30e8 	movw	r0, #1000	; 0x3e8
    4232:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4236:	f7fe fb67 	bl	2908 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    423a:	f240 30fc 	movw	r0, #1020	; 0x3fc
    423e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4242:	f7fe fb61 	bl	2908 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    4246:	f240 4018 	movw	r0, #1048	; 0x418
    424a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    424e:	f7fe fb5b 	bl	2908 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    4252:	f240 402c 	movw	r0, #1068	; 0x42c
    4256:	f2c2 0000 	movt	r0, #8192	; 0x2000
    425a:	f7fe fb55 	bl	2908 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
    425e:	f240 4044 	movw	r0, #1092	; 0x444
    4262:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4266:	f7fe fb4f 	bl	2908 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    426a:	f240 4310 	movw	r3, #1040	; 0x410
    426e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4272:	f240 32e8 	movw	r2, #1000	; 0x3e8
    4276:	f2c2 0200 	movt	r2, #8192	; 0x2000
    427a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    427c:	f240 4314 	movw	r3, #1044	; 0x414
    4280:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4284:	f240 32fc 	movw	r2, #1020	; 0x3fc
    4288:	f2c2 0200 	movt	r2, #8192	; 0x2000
    428c:	601a      	str	r2, [r3, #0]
}
    428e:	3708      	adds	r7, #8
    4290:	46bd      	mov	sp, r7
    4292:	bd80      	pop	{r7, pc}

00004294 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    4294:	b580      	push	{r7, lr}
    4296:	b082      	sub	sp, #8
    4298:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    429a:	f240 4340 	movw	r3, #1088	; 0x440
    429e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    42a2:	681b      	ldr	r3, [r3, #0]
    42a4:	2b00      	cmp	r3, #0
    42a6:	d03a      	beq.n	431e <prvCheckTasksWaitingTermination+0x8a>
		{
			vTaskSuspendAll();
    42a8:	f7ff fc24 	bl	3af4 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    42ac:	f240 432c 	movw	r3, #1068	; 0x42c
    42b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    42b4:	681b      	ldr	r3, [r3, #0]
    42b6:	2b00      	cmp	r3, #0
    42b8:	bf14      	ite	ne
    42ba:	2300      	movne	r3, #0
    42bc:	2301      	moveq	r3, #1
    42be:	b2db      	uxtb	r3, r3
    42c0:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
    42c2:	f7ff fc29 	bl	3b18 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    42c6:	687b      	ldr	r3, [r7, #4]
    42c8:	2b00      	cmp	r3, #0
    42ca:	d128      	bne.n	431e <prvCheckTasksWaitingTermination+0x8a>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    42cc:	f000 f9e4 	bl	4698 <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    42d0:	f240 432c 	movw	r3, #1068	; 0x42c
    42d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    42d8:	68db      	ldr	r3, [r3, #12]
    42da:	68db      	ldr	r3, [r3, #12]
    42dc:	603b      	str	r3, [r7, #0]
					vListRemove( &( pxTCB->xGenericListItem ) );
    42de:	683b      	ldr	r3, [r7, #0]
    42e0:	3304      	adds	r3, #4
    42e2:	4618      	mov	r0, r3
    42e4:	f7fe fb9c 	bl	2a20 <vListRemove>
					--uxCurrentNumberOfTasks;
    42e8:	f240 4358 	movw	r3, #1112	; 0x458
    42ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    42f0:	681b      	ldr	r3, [r3, #0]
    42f2:	1e5a      	subs	r2, r3, #1
    42f4:	f240 4358 	movw	r3, #1112	; 0x458
    42f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    42fc:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
    42fe:	f240 4340 	movw	r3, #1088	; 0x440
    4302:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4306:	681b      	ldr	r3, [r3, #0]
    4308:	1e5a      	subs	r2, r3, #1
    430a:	f240 4340 	movw	r3, #1088	; 0x440
    430e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4312:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
    4314:	f000 f9d6 	bl	46c4 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
    4318:	6838      	ldr	r0, [r7, #0]
    431a:	f000 f879 	bl	4410 <prvDeleteTCB>
			}
		}
	}
	#endif
}
    431e:	3708      	adds	r7, #8
    4320:	46bd      	mov	sp, r7
    4322:	bd80      	pop	{r7, pc}

00004324 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    4324:	b580      	push	{r7, lr}
    4326:	b082      	sub	sp, #8
    4328:	af00      	add	r7, sp, #0
    432a:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    432c:	f240 2354 	movw	r3, #596	; 0x254
    4330:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4334:	681b      	ldr	r3, [r3, #0]
    4336:	687a      	ldr	r2, [r7, #4]
    4338:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
    433a:	f240 435c 	movw	r3, #1116	; 0x45c
    433e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4342:	681b      	ldr	r3, [r3, #0]
    4344:	687a      	ldr	r2, [r7, #4]
    4346:	429a      	cmp	r2, r3
    4348:	d20f      	bcs.n	436a <prvAddCurrentTaskToDelayedList+0x46>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    434a:	f240 4314 	movw	r3, #1044	; 0x414
    434e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4352:	681a      	ldr	r2, [r3, #0]
    4354:	f240 2354 	movw	r3, #596	; 0x254
    4358:	f2c2 0300 	movt	r3, #8192	; 0x2000
    435c:	681b      	ldr	r3, [r3, #0]
    435e:	3304      	adds	r3, #4
    4360:	4610      	mov	r0, r2
    4362:	4619      	mov	r1, r3
    4364:	f7fe fb24 	bl	29b0 <vListInsert>
    4368:	e01c      	b.n	43a4 <prvAddCurrentTaskToDelayedList+0x80>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    436a:	f240 4310 	movw	r3, #1040	; 0x410
    436e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4372:	681a      	ldr	r2, [r3, #0]
    4374:	f240 2354 	movw	r3, #596	; 0x254
    4378:	f2c2 0300 	movt	r3, #8192	; 0x2000
    437c:	681b      	ldr	r3, [r3, #0]
    437e:	3304      	adds	r3, #4
    4380:	4610      	mov	r0, r2
    4382:	4619      	mov	r1, r3
    4384:	f7fe fb14 	bl	29b0 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    4388:	f240 03f8 	movw	r3, #248	; 0xf8
    438c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4390:	681b      	ldr	r3, [r3, #0]
    4392:	687a      	ldr	r2, [r7, #4]
    4394:	429a      	cmp	r2, r3
    4396:	d205      	bcs.n	43a4 <prvAddCurrentTaskToDelayedList+0x80>
		{
			xNextTaskUnblockTime = xTimeToWake;
    4398:	f240 03f8 	movw	r3, #248	; 0xf8
    439c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    43a0:	687a      	ldr	r2, [r7, #4]
    43a2:	601a      	str	r2, [r3, #0]
		}
	}
}
    43a4:	3708      	adds	r7, #8
    43a6:	46bd      	mov	sp, r7
    43a8:	bd80      	pop	{r7, pc}
    43aa:	bf00      	nop

000043ac <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    43ac:	b580      	push	{r7, lr}
    43ae:	b084      	sub	sp, #16
    43b0:	af00      	add	r7, sp, #0
    43b2:	4603      	mov	r3, r0
    43b4:	6039      	str	r1, [r7, #0]
    43b6:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    43b8:	2048      	movs	r0, #72	; 0x48
    43ba:	f000 f9e7 	bl	478c <pvPortMalloc>
    43be:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
    43c0:	68fb      	ldr	r3, [r7, #12]
    43c2:	2b00      	cmp	r3, #0
    43c4:	d01f      	beq.n	4406 <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    43c6:	683b      	ldr	r3, [r7, #0]
    43c8:	2b00      	cmp	r3, #0
    43ca:	d106      	bne.n	43da <prvAllocateTCBAndStack+0x2e>
    43cc:	88fb      	ldrh	r3, [r7, #6]
    43ce:	009b      	lsls	r3, r3, #2
    43d0:	4618      	mov	r0, r3
    43d2:	f000 f9db 	bl	478c <pvPortMalloc>
    43d6:	4603      	mov	r3, r0
    43d8:	e000      	b.n	43dc <prvAllocateTCBAndStack+0x30>
    43da:	683b      	ldr	r3, [r7, #0]
    43dc:	68fa      	ldr	r2, [r7, #12]
    43de:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
    43e0:	68fb      	ldr	r3, [r7, #12]
    43e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    43e4:	2b00      	cmp	r3, #0
    43e6:	d105      	bne.n	43f4 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    43e8:	68f8      	ldr	r0, [r7, #12]
    43ea:	f000 fa93 	bl	4914 <vPortFree>
			pxNewTCB = NULL;
    43ee:	2300      	movs	r3, #0
    43f0:	60fb      	str	r3, [r7, #12]
    43f2:	e008      	b.n	4406 <prvAllocateTCBAndStack+0x5a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    43f4:	68fb      	ldr	r3, [r7, #12]
    43f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    43f8:	88fb      	ldrh	r3, [r7, #6]
    43fa:	009b      	lsls	r3, r3, #2
    43fc:	4610      	mov	r0, r2
    43fe:	21a5      	movs	r1, #165	; 0xa5
    4400:	461a      	mov	r2, r3
    4402:	f00f f9ad 	bl	13760 <memset>
		}
	}

	return pxNewTCB;
    4406:	68fb      	ldr	r3, [r7, #12]
}
    4408:	4618      	mov	r0, r3
    440a:	3710      	adds	r7, #16
    440c:	46bd      	mov	sp, r7
    440e:	bd80      	pop	{r7, pc}

00004410 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
    4410:	b580      	push	{r7, lr}
    4412:	b082      	sub	sp, #8
    4414:	af00      	add	r7, sp, #0
    4416:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    4418:	687b      	ldr	r3, [r7, #4]
    441a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    441c:	4618      	mov	r0, r3
    441e:	f000 fa79 	bl	4914 <vPortFree>
		vPortFree( pxTCB );
    4422:	6878      	ldr	r0, [r7, #4]
    4424:	f000 fa76 	bl	4914 <vPortFree>
	}
    4428:	3708      	adds	r7, #8
    442a:	46bd      	mov	sp, r7
    442c:	bd80      	pop	{r7, pc}
    442e:	bf00      	nop

00004430 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
    4430:	b480      	push	{r7}
    4432:	b083      	sub	sp, #12
    4434:	af00      	add	r7, sp, #0
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    4436:	f240 2354 	movw	r3, #596	; 0x254
    443a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    443e:	681b      	ldr	r3, [r3, #0]
    4440:	607b      	str	r3, [r7, #4]

		return xReturn;
    4442:	687b      	ldr	r3, [r7, #4]
	}
    4444:	4618      	mov	r0, r3
    4446:	370c      	adds	r7, #12
    4448:	46bd      	mov	sp, r7
    444a:	f85d 7b04 	ldr.w	r7, [sp], #4
    444e:	4770      	bx	lr

00004450 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    4450:	b580      	push	{r7, lr}
    4452:	b084      	sub	sp, #16
    4454:	af00      	add	r7, sp, #0
    4456:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    4458:	687b      	ldr	r3, [r7, #4]
    445a:	60fb      	str	r3, [r7, #12]

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    445c:	68fb      	ldr	r3, [r7, #12]
    445e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4460:	f240 2354 	movw	r3, #596	; 0x254
    4464:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4468:	681b      	ldr	r3, [r3, #0]
    446a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    446c:	429a      	cmp	r2, r3
    446e:	d24f      	bcs.n	4510 <vTaskPriorityInherit+0xc0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    4470:	f240 2354 	movw	r3, #596	; 0x254
    4474:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4478:	681b      	ldr	r3, [r3, #0]
    447a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    447c:	f1c3 0214 	rsb	r2, r3, #20
    4480:	68fb      	ldr	r3, [r7, #12]
    4482:	619a      	str	r2, [r3, #24]

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    4484:	68fb      	ldr	r3, [r7, #12]
    4486:	6959      	ldr	r1, [r3, #20]
    4488:	68fb      	ldr	r3, [r7, #12]
    448a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    448c:	4613      	mov	r3, r2
    448e:	009b      	lsls	r3, r3, #2
    4490:	4413      	add	r3, r2
    4492:	009b      	lsls	r3, r3, #2
    4494:	f240 2258 	movw	r2, #600	; 0x258
    4498:	f2c2 0200 	movt	r2, #8192	; 0x2000
    449c:	4413      	add	r3, r2
    449e:	4299      	cmp	r1, r3
    44a0:	d12e      	bne.n	4500 <vTaskPriorityInherit+0xb0>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
    44a2:	68fb      	ldr	r3, [r7, #12]
    44a4:	3304      	adds	r3, #4
    44a6:	4618      	mov	r0, r3
    44a8:	f7fe faba 	bl	2a20 <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    44ac:	f240 2354 	movw	r3, #596	; 0x254
    44b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    44b4:	681b      	ldr	r3, [r3, #0]
    44b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    44b8:	68fb      	ldr	r3, [r7, #12]
    44ba:	62da      	str	r2, [r3, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
    44bc:	68fb      	ldr	r3, [r7, #12]
    44be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    44c0:	f240 4364 	movw	r3, #1124	; 0x464
    44c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    44c8:	681b      	ldr	r3, [r3, #0]
    44ca:	429a      	cmp	r2, r3
    44cc:	d906      	bls.n	44dc <vTaskPriorityInherit+0x8c>
    44ce:	68fb      	ldr	r3, [r7, #12]
    44d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    44d2:	f240 4364 	movw	r3, #1124	; 0x464
    44d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    44da:	601a      	str	r2, [r3, #0]
    44dc:	68fb      	ldr	r3, [r7, #12]
    44de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    44e0:	4613      	mov	r3, r2
    44e2:	009b      	lsls	r3, r3, #2
    44e4:	4413      	add	r3, r2
    44e6:	009b      	lsls	r3, r3, #2
    44e8:	f240 2258 	movw	r2, #600	; 0x258
    44ec:	f2c2 0200 	movt	r2, #8192	; 0x2000
    44f0:	441a      	add	r2, r3
    44f2:	68fb      	ldr	r3, [r7, #12]
    44f4:	3304      	adds	r3, #4
    44f6:	4610      	mov	r0, r2
    44f8:	4619      	mov	r1, r3
    44fa:	f7fe fa31 	bl	2960 <vListInsertEnd>
    44fe:	e007      	b.n	4510 <vTaskPriorityInherit+0xc0>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    4500:	f240 2354 	movw	r3, #596	; 0x254
    4504:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4508:	681b      	ldr	r3, [r3, #0]
    450a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    450c:	68fb      	ldr	r3, [r7, #12]
    450e:	62da      	str	r2, [r3, #44]	; 0x2c
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
    4510:	3710      	adds	r7, #16
    4512:	46bd      	mov	sp, r7
    4514:	bd80      	pop	{r7, pc}
    4516:	bf00      	nop

00004518 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    4518:	b580      	push	{r7, lr}
    451a:	b084      	sub	sp, #16
    451c:	af00      	add	r7, sp, #0
    451e:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    4520:	687b      	ldr	r3, [r7, #4]
    4522:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    4524:	687b      	ldr	r3, [r7, #4]
    4526:	2b00      	cmp	r3, #0
    4528:	d035      	beq.n	4596 <vTaskPriorityDisinherit+0x7e>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    452a:	68fb      	ldr	r3, [r7, #12]
    452c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    452e:	68fb      	ldr	r3, [r7, #12]
    4530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4532:	429a      	cmp	r2, r3
    4534:	d02f      	beq.n	4596 <vTaskPriorityDisinherit+0x7e>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
    4536:	68fb      	ldr	r3, [r7, #12]
    4538:	3304      	adds	r3, #4
    453a:	4618      	mov	r0, r3
    453c:	f7fe fa70 	bl	2a20 <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    4540:	68fb      	ldr	r3, [r7, #12]
    4542:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    4544:	68fb      	ldr	r3, [r7, #12]
    4546:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    4548:	68fb      	ldr	r3, [r7, #12]
    454a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    454c:	f1c3 0214 	rsb	r2, r3, #20
    4550:	68fb      	ldr	r3, [r7, #12]
    4552:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
    4554:	68fb      	ldr	r3, [r7, #12]
    4556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4558:	f240 4364 	movw	r3, #1124	; 0x464
    455c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4560:	681b      	ldr	r3, [r3, #0]
    4562:	429a      	cmp	r2, r3
    4564:	d906      	bls.n	4574 <vTaskPriorityDisinherit+0x5c>
    4566:	68fb      	ldr	r3, [r7, #12]
    4568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    456a:	f240 4364 	movw	r3, #1124	; 0x464
    456e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4572:	601a      	str	r2, [r3, #0]
    4574:	68fb      	ldr	r3, [r7, #12]
    4576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4578:	4613      	mov	r3, r2
    457a:	009b      	lsls	r3, r3, #2
    457c:	4413      	add	r3, r2
    457e:	009b      	lsls	r3, r3, #2
    4580:	f240 2258 	movw	r2, #600	; 0x258
    4584:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4588:	441a      	add	r2, r3
    458a:	68fb      	ldr	r3, [r7, #12]
    458c:	3304      	adds	r3, #4
    458e:	4610      	mov	r0, r2
    4590:	4619      	mov	r1, r3
    4592:	f7fe f9e5 	bl	2960 <vListInsertEnd>
			}
		}
	}
    4596:	3710      	adds	r7, #16
    4598:	46bd      	mov	sp, r7
    459a:	bd80      	pop	{r7, pc}

0000459c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    459c:	b480      	push	{r7}
    459e:	b085      	sub	sp, #20
    45a0:	af00      	add	r7, sp, #0
    45a2:	60f8      	str	r0, [r7, #12]
    45a4:	60b9      	str	r1, [r7, #8]
    45a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    45a8:	68fb      	ldr	r3, [r7, #12]
    45aa:	3b04      	subs	r3, #4
    45ac:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    45ae:	68fb      	ldr	r3, [r7, #12]
    45b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    45b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    45b6:	68fb      	ldr	r3, [r7, #12]
    45b8:	3b04      	subs	r3, #4
    45ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
    45bc:	68ba      	ldr	r2, [r7, #8]
    45be:	68fb      	ldr	r3, [r7, #12]
    45c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    45c2:	68fb      	ldr	r3, [r7, #12]
    45c4:	3b04      	subs	r3, #4
    45c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
    45c8:	68fb      	ldr	r3, [r7, #12]
    45ca:	2200      	movs	r2, #0
    45cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    45ce:	68fb      	ldr	r3, [r7, #12]
    45d0:	3b14      	subs	r3, #20
    45d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
    45d4:	687a      	ldr	r2, [r7, #4]
    45d6:	68fb      	ldr	r3, [r7, #12]
    45d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
    45da:	68fb      	ldr	r3, [r7, #12]
    45dc:	3b20      	subs	r3, #32
    45de:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    45e0:	68fb      	ldr	r3, [r7, #12]
}
    45e2:	4618      	mov	r0, r3
    45e4:	3714      	adds	r7, #20
    45e6:	46bd      	mov	sp, r7
    45e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    45ec:	4770      	bx	lr
    45ee:	bf00      	nop

000045f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    45f0:	4b06      	ldr	r3, [pc, #24]	; (460c <pxCurrentTCBConst2>)
    45f2:	6819      	ldr	r1, [r3, #0]
    45f4:	6808      	ldr	r0, [r1, #0]
    45f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    45fa:	f380 8809 	msr	PSP, r0
    45fe:	f04f 0000 	mov.w	r0, #0
    4602:	f380 8811 	msr	BASEPRI, r0
    4606:	f04e 0e0d 	orr.w	lr, lr, #13
    460a:	4770      	bx	lr

0000460c <pxCurrentTCBConst2>:
    460c:	20000254 	.word	0x20000254

00004610 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
    4610:	485d      	ldr	r0, [pc, #372]	; (4788 <prvSetupTimerInterrupt+0x2c>)
    4612:	6800      	ldr	r0, [r0, #0]
    4614:	6800      	ldr	r0, [r0, #0]
    4616:	f380 8808 	msr	MSP, r0
    461a:	b662      	cpsie	i
    461c:	df00      	svc	0
    461e:	bf00      	nop

00004620 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
    4620:	b580      	push	{r7, lr}
    4622:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    4624:	f64e 5320 	movw	r3, #60704	; 0xed20
    4628:	f2ce 0300 	movt	r3, #57344	; 0xe000
    462c:	f64e 5220 	movw	r2, #60704	; 0xed20
    4630:	f2ce 0200 	movt	r2, #57344	; 0xe000
    4634:	6812      	ldr	r2, [r2, #0]
    4636:	f442 02fe 	orr.w	r2, r2, #8323072	; 0x7f0000
    463a:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    463c:	f64e 5320 	movw	r3, #60704	; 0xed20
    4640:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4644:	f64e 5220 	movw	r2, #60704	; 0xed20
    4648:	f2ce 0200 	movt	r2, #57344	; 0xe000
    464c:	6812      	ldr	r2, [r2, #0]
    464e:	f042 42fe 	orr.w	r2, r2, #2130706432	; 0x7f000000
    4652:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    4654:	f000 f882 	bl	475c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    4658:	f240 03fc 	movw	r3, #252	; 0xfc
    465c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4660:	2200      	movs	r2, #0
    4662:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
    4664:	f7ff ffd4 	bl	4610 <prvPortStartFirstTask>

	/* Should not get here! */
	return 0;
    4668:	2300      	movs	r3, #0
}
    466a:	4618      	mov	r0, r3
    466c:	bd80      	pop	{r7, pc}
    466e:	bf00      	nop

00004670 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    4670:	b480      	push	{r7}
    4672:	af00      	add	r7, sp, #0
	/* It is unlikely that the CM3 port will require this function as there
	is nothing to return to.  */
}
    4674:	46bd      	mov	sp, r7
    4676:	f85d 7b04 	ldr.w	r7, [sp], #4
    467a:	4770      	bx	lr

0000467c <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
    467c:	b480      	push	{r7}
    467e:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    4680:	f64e 5304 	movw	r3, #60676	; 0xed04
    4684:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4688:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    468c:	601a      	str	r2, [r3, #0]
}
    468e:	46bd      	mov	sp, r7
    4690:	f85d 7b04 	ldr.w	r7, [sp], #4
    4694:	4770      	bx	lr
    4696:	bf00      	nop

00004698 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    4698:	b480      	push	{r7}
    469a:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
    469c:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    46a0:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
    46a4:	f240 03fc 	movw	r3, #252	; 0xfc
    46a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    46ac:	681b      	ldr	r3, [r3, #0]
    46ae:	1c5a      	adds	r2, r3, #1
    46b0:	f240 03fc 	movw	r3, #252	; 0xfc
    46b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    46b8:	601a      	str	r2, [r3, #0]
}
    46ba:	46bd      	mov	sp, r7
    46bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    46c0:	4770      	bx	lr
    46c2:	bf00      	nop

000046c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    46c4:	b480      	push	{r7}
    46c6:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
    46c8:	f240 03fc 	movw	r3, #252	; 0xfc
    46cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    46d0:	681b      	ldr	r3, [r3, #0]
    46d2:	1e5a      	subs	r2, r3, #1
    46d4:	f240 03fc 	movw	r3, #252	; 0xfc
    46d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    46dc:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
    46de:	f240 03fc 	movw	r3, #252	; 0xfc
    46e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    46e6:	681b      	ldr	r3, [r3, #0]
    46e8:	2b00      	cmp	r3, #0
    46ea:	d103      	bne.n	46f4 <vPortExitCritical+0x30>
	{
		portENABLE_INTERRUPTS();
    46ec:	f04f 0000 	mov.w	r0, #0
    46f0:	f380 8811 	msr	BASEPRI, r0
	}
}
    46f4:	46bd      	mov	sp, r7
    46f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    46fa:	4770      	bx	lr

000046fc <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    46fc:	f3ef 8009 	mrs	r0, PSP
    4700:	4b0c      	ldr	r3, [pc, #48]	; (4734 <pxCurrentTCBConst>)
    4702:	681a      	ldr	r2, [r3, #0]
    4704:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    4708:	6010      	str	r0, [r2, #0]
    470a:	e92d 4008 	stmdb	sp!, {r3, lr}
    470e:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4712:	f380 8811 	msr	BASEPRI, r0
    4716:	f7ff fbd5 	bl	3ec4 <vTaskSwitchContext>
    471a:	f04f 0000 	mov.w	r0, #0
    471e:	f380 8811 	msr	BASEPRI, r0
    4722:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    4726:	6819      	ldr	r1, [r3, #0]
    4728:	6808      	ldr	r0, [r1, #0]
    472a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    472e:	f380 8809 	msr	PSP, r0
    4732:	4770      	bx	lr

00004734 <pxCurrentTCBConst>:
    4734:	20000254 	.word	0x20000254

00004738 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    4738:	b580      	push	{r7, lr}
    473a:	b082      	sub	sp, #8
    473c:	af00      	add	r7, sp, #0
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
    473e:	2300      	movs	r3, #0
    4740:	607b      	str	r3, [r7, #4]
    4742:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4746:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
    474a:	f7ff fadd 	bl	3d08 <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
    474e:	f04f 0000 	mov.w	r0, #0
    4752:	f380 8811 	msr	BASEPRI, r0
}
    4756:	3708      	adds	r7, #8
    4758:	46bd      	mov	sp, r7
    475a:	bd80      	pop	{r7, pc}

0000475c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    475c:	b480      	push	{r7}
    475e:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    4760:	f24e 0314 	movw	r3, #57364	; 0xe014
    4764:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4768:	f644 32bf 	movw	r2, #19391	; 0x4bbf
    476c:	f2c0 0203 	movt	r2, #3
    4770:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    4772:	f24e 0310 	movw	r3, #57360	; 0xe010
    4776:	f2ce 0300 	movt	r3, #57344	; 0xe000
    477a:	2207      	movs	r2, #7
    477c:	601a      	str	r2, [r3, #0]
}
    477e:	46bd      	mov	sp, r7
    4780:	f85d 7b04 	ldr.w	r7, [sp], #4
    4784:	4770      	bx	lr
    4786:	0000      	.short	0x0000
    4788:	e000ed08 	.word	0xe000ed08

0000478c <pvPortMalloc>:
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;										\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    478c:	b580      	push	{r7, lr}
    478e:	b08a      	sub	sp, #40	; 0x28
    4790:	af00      	add	r7, sp, #0
    4792:	6078      	str	r0, [r7, #4]
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
    4794:	2300      	movs	r3, #0
    4796:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
    4798:	f7ff f9ac 	bl	3af4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    479c:	f24b 4390 	movw	r3, #46224	; 0xb490
    47a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    47a4:	681b      	ldr	r3, [r3, #0]
    47a6:	2b00      	cmp	r3, #0
    47a8:	d130      	bne.n	480c <pvPortMalloc+0x80>
		{
			prvHeapInit();
    47aa:	f24b 4380 	movw	r3, #46208	; 0xb480
    47ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    47b2:	f240 4280 	movw	r2, #1152	; 0x480
    47b6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    47ba:	601a      	str	r2, [r3, #0]
    47bc:	f24b 4380 	movw	r3, #46208	; 0xb480
    47c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    47c4:	2200      	movs	r2, #0
    47c6:	605a      	str	r2, [r3, #4]
    47c8:	f24b 4388 	movw	r3, #46216	; 0xb488
    47cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    47d0:	f44f 2296 	mov.w	r2, #307200	; 0x4b000
    47d4:	605a      	str	r2, [r3, #4]
    47d6:	f24b 4388 	movw	r3, #46216	; 0xb488
    47da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    47de:	2200      	movs	r2, #0
    47e0:	601a      	str	r2, [r3, #0]
    47e2:	f240 4380 	movw	r3, #1152	; 0x480
    47e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    47ea:	617b      	str	r3, [r7, #20]
    47ec:	697b      	ldr	r3, [r7, #20]
    47ee:	f44f 2296 	mov.w	r2, #307200	; 0x4b000
    47f2:	605a      	str	r2, [r3, #4]
    47f4:	697a      	ldr	r2, [r7, #20]
    47f6:	f24b 4388 	movw	r3, #46216	; 0xb488
    47fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    47fe:	6013      	str	r3, [r2, #0]
			xHeapHasBeenInitialised = pdTRUE;
    4800:	f24b 4390 	movw	r3, #46224	; 0xb490
    4804:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4808:	2201      	movs	r2, #1
    480a:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    480c:	687b      	ldr	r3, [r7, #4]
    480e:	2b00      	cmp	r3, #0
    4810:	d00d      	beq.n	482e <pvPortMalloc+0xa2>
		{
			xWantedSize += heapSTRUCT_SIZE;
    4812:	2310      	movs	r3, #16
    4814:	687a      	ldr	r2, [r7, #4]
    4816:	4413      	add	r3, r2
    4818:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    481a:	687b      	ldr	r3, [r7, #4]
    481c:	f003 0307 	and.w	r3, r3, #7
    4820:	2b00      	cmp	r3, #0
    4822:	d004      	beq.n	482e <pvPortMalloc+0xa2>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    4824:	687b      	ldr	r3, [r7, #4]
    4826:	f023 0307 	bic.w	r3, r3, #7
    482a:	3308      	adds	r3, #8
    482c:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
    482e:	687b      	ldr	r3, [r7, #4]
    4830:	2b00      	cmp	r3, #0
    4832:	d068      	beq.n	4906 <pvPortMalloc+0x17a>
    4834:	687b      	ldr	r3, [r7, #4]
    4836:	f5b3 2f96 	cmp.w	r3, #307200	; 0x4b000
    483a:	d264      	bcs.n	4906 <pvPortMalloc+0x17a>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
    483c:	f24b 4380 	movw	r3, #46208	; 0xb480
    4840:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4844:	623b      	str	r3, [r7, #32]
			pxBlock = xStart.pxNextFreeBlock;
    4846:	f24b 4380 	movw	r3, #46208	; 0xb480
    484a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    484e:	681b      	ldr	r3, [r3, #0]
    4850:	627b      	str	r3, [r7, #36]	; 0x24
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    4852:	e004      	b.n	485e <pvPortMalloc+0xd2>
			{
				pxPreviousBlock = pxBlock;
    4854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4856:	623b      	str	r3, [r7, #32]
				pxBlock = pxBlock->pxNextFreeBlock;
    4858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    485a:	681b      	ldr	r3, [r3, #0]
    485c:	627b      	str	r3, [r7, #36]	; 0x24
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    485e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4860:	685a      	ldr	r2, [r3, #4]
    4862:	687b      	ldr	r3, [r7, #4]
    4864:	429a      	cmp	r2, r3
    4866:	d203      	bcs.n	4870 <pvPortMalloc+0xe4>
    4868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    486a:	681b      	ldr	r3, [r3, #0]
    486c:	2b00      	cmp	r3, #0
    486e:	d1f1      	bne.n	4854 <pvPortMalloc+0xc8>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
    4870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4872:	f24b 4388 	movw	r3, #46216	; 0xb488
    4876:	f2c2 0304 	movt	r3, #8196	; 0x2004
    487a:	429a      	cmp	r2, r3
    487c:	d043      	beq.n	4906 <pvPortMalloc+0x17a>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    487e:	6a3b      	ldr	r3, [r7, #32]
    4880:	681a      	ldr	r2, [r3, #0]
    4882:	2310      	movs	r3, #16
    4884:	4413      	add	r3, r2
    4886:	61fb      	str	r3, [r7, #28]

				/* This block is being returned for use so must be taken our of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    4888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    488a:	681a      	ldr	r2, [r3, #0]
    488c:	6a3b      	ldr	r3, [r7, #32]
    488e:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    4890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4892:	685a      	ldr	r2, [r3, #4]
    4894:	687b      	ldr	r3, [r7, #4]
    4896:	1ad2      	subs	r2, r2, r3
    4898:	2310      	movs	r3, #16
    489a:	005b      	lsls	r3, r3, #1
    489c:	429a      	cmp	r2, r3
    489e:	d925      	bls.n	48ec <pvPortMalloc+0x160>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
    48a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    48a2:	687b      	ldr	r3, [r7, #4]
    48a4:	4413      	add	r3, r2
    48a6:	613b      	str	r3, [r7, #16]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    48a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    48aa:	685a      	ldr	r2, [r3, #4]
    48ac:	687b      	ldr	r3, [r7, #4]
    48ae:	1ad2      	subs	r2, r2, r3
    48b0:	693b      	ldr	r3, [r7, #16]
    48b2:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
    48b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    48b6:	687a      	ldr	r2, [r7, #4]
    48b8:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    48ba:	693b      	ldr	r3, [r7, #16]
    48bc:	685b      	ldr	r3, [r3, #4]
    48be:	60fb      	str	r3, [r7, #12]
    48c0:	f24b 4380 	movw	r3, #46208	; 0xb480
    48c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    48c8:	61bb      	str	r3, [r7, #24]
    48ca:	e002      	b.n	48d2 <pvPortMalloc+0x146>
    48cc:	69bb      	ldr	r3, [r7, #24]
    48ce:	681b      	ldr	r3, [r3, #0]
    48d0:	61bb      	str	r3, [r7, #24]
    48d2:	69bb      	ldr	r3, [r7, #24]
    48d4:	681b      	ldr	r3, [r3, #0]
    48d6:	685a      	ldr	r2, [r3, #4]
    48d8:	68fb      	ldr	r3, [r7, #12]
    48da:	429a      	cmp	r2, r3
    48dc:	d3f6      	bcc.n	48cc <pvPortMalloc+0x140>
    48de:	69bb      	ldr	r3, [r7, #24]
    48e0:	681a      	ldr	r2, [r3, #0]
    48e2:	693b      	ldr	r3, [r7, #16]
    48e4:	601a      	str	r2, [r3, #0]
    48e6:	69bb      	ldr	r3, [r7, #24]
    48e8:	693a      	ldr	r2, [r7, #16]
    48ea:	601a      	str	r2, [r3, #0]
				}
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
    48ec:	f240 1300 	movw	r3, #256	; 0x100
    48f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    48f4:	681a      	ldr	r2, [r3, #0]
    48f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    48f8:	685b      	ldr	r3, [r3, #4]
    48fa:	1ad2      	subs	r2, r2, r3
    48fc:	f240 1300 	movw	r3, #256	; 0x100
    4900:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4904:	601a      	str	r2, [r3, #0]
			}
		}
	}
	xTaskResumeAll();
    4906:	f7ff f907 	bl	3b18 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    490a:	69fb      	ldr	r3, [r7, #28]
}
    490c:	4618      	mov	r0, r3
    490e:	3728      	adds	r7, #40	; 0x28
    4910:	46bd      	mov	sp, r7
    4912:	bd80      	pop	{r7, pc}

00004914 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    4914:	b580      	push	{r7, lr}
    4916:	b086      	sub	sp, #24
    4918:	af00      	add	r7, sp, #0
    491a:	6078      	str	r0, [r7, #4]
unsigned char *puc = ( unsigned char * ) pv;
    491c:	687b      	ldr	r3, [r7, #4]
    491e:	613b      	str	r3, [r7, #16]
xBlockLink *pxLink;

	if( pv )
    4920:	687b      	ldr	r3, [r7, #4]
    4922:	2b00      	cmp	r3, #0
    4924:	d030      	beq.n	4988 <vPortFree+0x74>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
    4926:	2310      	movs	r3, #16
    4928:	425b      	negs	r3, r3
    492a:	693a      	ldr	r2, [r7, #16]
    492c:	4413      	add	r3, r2
    492e:	613b      	str	r3, [r7, #16]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
    4930:	693b      	ldr	r3, [r7, #16]
    4932:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
    4934:	f7ff f8de 	bl	3af4 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
    4938:	68fb      	ldr	r3, [r7, #12]
    493a:	685b      	ldr	r3, [r3, #4]
    493c:	60bb      	str	r3, [r7, #8]
    493e:	f24b 4380 	movw	r3, #46208	; 0xb480
    4942:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4946:	617b      	str	r3, [r7, #20]
    4948:	e002      	b.n	4950 <vPortFree+0x3c>
    494a:	697b      	ldr	r3, [r7, #20]
    494c:	681b      	ldr	r3, [r3, #0]
    494e:	617b      	str	r3, [r7, #20]
    4950:	697b      	ldr	r3, [r7, #20]
    4952:	681b      	ldr	r3, [r3, #0]
    4954:	685a      	ldr	r2, [r3, #4]
    4956:	68bb      	ldr	r3, [r7, #8]
    4958:	429a      	cmp	r2, r3
    495a:	d3f6      	bcc.n	494a <vPortFree+0x36>
    495c:	697b      	ldr	r3, [r7, #20]
    495e:	681a      	ldr	r2, [r3, #0]
    4960:	68fb      	ldr	r3, [r7, #12]
    4962:	601a      	str	r2, [r3, #0]
    4964:	697b      	ldr	r3, [r7, #20]
    4966:	68fa      	ldr	r2, [r7, #12]
    4968:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
    496a:	68fb      	ldr	r3, [r7, #12]
    496c:	685a      	ldr	r2, [r3, #4]
    496e:	f240 1300 	movw	r3, #256	; 0x100
    4972:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4976:	681b      	ldr	r3, [r3, #0]
    4978:	441a      	add	r2, r3
    497a:	f240 1300 	movw	r3, #256	; 0x100
    497e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4982:	601a      	str	r2, [r3, #0]
		}
		xTaskResumeAll();
    4984:	f7ff f8c8 	bl	3b18 <xTaskResumeAll>
	}
}
    4988:	3718      	adds	r7, #24
    498a:	46bd      	mov	sp, r7
    498c:	bd80      	pop	{r7, pc}
    498e:	bf00      	nop

00004990 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    4990:	b480      	push	{r7}
    4992:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
    4994:	f240 1300 	movw	r3, #256	; 0x100
    4998:	f2c2 0300 	movt	r3, #8192	; 0x2000
    499c:	681b      	ldr	r3, [r3, #0]
}
    499e:	4618      	mov	r0, r3
    49a0:	46bd      	mov	sp, r7
    49a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    49a6:	4770      	bx	lr

000049a8 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    49a8:	b480      	push	{r7}
    49aa:	af00      	add	r7, sp, #0
	/* This just exists to keep the linker quiet. */
}
    49ac:	46bd      	mov	sp, r7
    49ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    49b2:	4770      	bx	lr
    49b4:	0000      	movs	r0, r0
	...

000049b8 <ground_calibrate>:
 * set to auto1 before MAX_DELAY_FOR_CALIBRATION secondes */
/**User must put verticaly the uav (nose bottom) and push
 * radio roll stick to get new calibration
 * If not, the default calibration is used.
 */
inline void ground_calibrate( void ) {
    49b8:	b580      	push	{r7, lr}
    49ba:	af00      	add	r7, sp, #0
    break;
  case CALIB_DONE:
    break;
  }
#else*/
if(calib_status == NO_CALIB)
    49bc:	f24b 43b2 	movw	r3, #46258	; 0xb4b2
    49c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    49c4:	781b      	ldrb	r3, [r3, #0]
    49c6:	2b00      	cmp	r3, #0
    49c8:	d114      	bne.n	49f4 <ground_calibrate+0x3c>
{
    if (cputime < MAX_DELAY_FOR_CALIBRATION && pprz_mode == PPRZ_MODE_AUTO1 ) {
    49ca:	f24b 439a 	movw	r3, #46234	; 0xb49a
    49ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    49d2:	881b      	ldrh	r3, [r3, #0]
    49d4:	2b09      	cmp	r3, #9
    49d6:	d838      	bhi.n	4a4a <ground_calibrate+0x92>
    49d8:	f24b 439c 	movw	r3, #46236	; 0xb49c
    49dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    49e0:	781b      	ldrb	r3, [r3, #0]
    49e2:	2b01      	cmp	r3, #1
    49e4:	d131      	bne.n	4a4a <ground_calibrate+0x92>
      calib_status = WAITING_CALIB_CONTRAST;
    49e6:	f24b 43b2 	movw	r3, #46258	; 0xb4b2
    49ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    49ee:	2201      	movs	r2, #1
    49f0:	701a      	strb	r2, [r3, #0]
    49f2:	e02a      	b.n	4a4a <ground_calibrate+0x92>
      //DOWNLINK_SEND_CALIB_START();
    }
}
else if (calib_status == WAITING_CALIB_CONTRAST)
    49f4:	f24b 43b2 	movw	r3, #46258	; 0xb4b2
    49f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    49fc:	781b      	ldrb	r3, [r3, #0]
    49fe:	2b01      	cmp	r3, #1
    4a00:	d123      	bne.n	4a4a <ground_calibrate+0x92>
{
    if (STICK_PUSHED(from_fbw.channels[RADIO_ROLL])) {
    4a02:	f24b 53c0 	movw	r3, #46528	; 0xb5c0
    4a06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4a0a:	885b      	ldrh	r3, [r3, #2]
    4a0c:	b21b      	sxth	r3, r3
    4a0e:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
    4a12:	db08      	blt.n	4a26 <ground_calibrate+0x6e>
    4a14:	f24b 53c0 	movw	r3, #46528	; 0xb5c0
    4a18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4a1c:	885b      	ldrh	r3, [r3, #2]
    4a1e:	b21b      	sxth	r3, r3
    4a20:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    4a24:	dd11      	ble.n	4a4a <ground_calibrate+0x92>
      ir_gain_calib();
    4a26:	f008 f913 	bl	cc50 <ir_gain_calib>
      estimator_rad_of_ir = ir_rad_of_ir;
    4a2a:	f240 1310 	movw	r3, #272	; 0x110
    4a2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a32:	681a      	ldr	r2, [r3, #0]
    4a34:	f64b 23ac 	movw	r3, #47788	; 0xbaac
    4a38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4a3c:	601a      	str	r2, [r3, #0]
      //DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
      calib_status = CALIB_DONE;
    4a3e:	f24b 43b2 	movw	r3, #46258	; 0xb4b2
    4a42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4a46:	2202      	movs	r2, #2
    4a48:	701a      	strb	r2, [r3, #0]
    }
}
else {}

//#endif
}
    4a4a:	bd80      	pop	{r7, pc}

00004a4c <pprz_mode_update>:

/** \fn inline uint8_t pprz_mode_update( void )
 *  \brief Update paparazzi mode
 */
inline uint8_t pprz_mode_update( void ) {
    4a4c:	b480      	push	{r7}
    4a4e:	b083      	sub	sp, #12
    4a50:	af00      	add	r7, sp, #0
  /** We remain in home mode until explicit reset from the RC */
  if (pprz_mode != PPRZ_MODE_HOME || CheckEvent(rc_event_1)) {
    4a52:	f24b 439c 	movw	r3, #46236	; 0xb49c
    4a56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4a5a:	781b      	ldrb	r3, [r3, #0]
    4a5c:	2b03      	cmp	r3, #3
    4a5e:	d10c      	bne.n	4a7a <pprz_mode_update+0x2e>
    4a60:	f24b 43a0 	movw	r3, #46240	; 0xb4a0
    4a64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4a68:	781b      	ldrb	r3, [r3, #0]
    4a6a:	2b00      	cmp	r3, #0
    4a6c:	d032      	beq.n	4ad4 <pprz_mode_update+0x88>
    4a6e:	f24b 43a0 	movw	r3, #46240	; 0xb4a0
    4a72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4a76:	2200      	movs	r2, #0
    4a78:	701a      	strb	r2, [r3, #0]
    ModeUpdate(pprz_mode, PPRZ_MODE_OF_PULSE(from_fbw.channels[RADIO_MODE], from_fbw.status));
    4a7a:	f24b 53c0 	movw	r3, #46528	; 0xb5c0
    4a7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4a82:	891b      	ldrh	r3, [r3, #8]
    4a84:	b21b      	sxth	r3, r3
    4a86:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    4a8a:	dc0f      	bgt.n	4aac <pprz_mode_update+0x60>
    4a8c:	f24b 53c0 	movw	r3, #46528	; 0xb5c0
    4a90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4a94:	891b      	ldrh	r3, [r3, #8]
    4a96:	b21a      	sxth	r2, r3
    4a98:	f64e 5341 	movw	r3, #60737	; 0xed41
    4a9c:	f6cf 73ff 	movt	r3, #65535	; 0xffff
    4aa0:	429a      	cmp	r2, r3
    4aa2:	bfb4      	ite	lt
    4aa4:	2300      	movlt	r3, #0
    4aa6:	2301      	movge	r3, #1
    4aa8:	b2db      	uxtb	r3, r3
    4aaa:	e000      	b.n	4aae <pprz_mode_update+0x62>
    4aac:	2302      	movs	r3, #2
    4aae:	71fb      	strb	r3, [r7, #7]
    4ab0:	f24b 439c 	movw	r3, #46236	; 0xb49c
    4ab4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4ab8:	781b      	ldrb	r3, [r3, #0]
    4aba:	79fa      	ldrb	r2, [r7, #7]
    4abc:	429a      	cmp	r2, r3
    4abe:	d007      	beq.n	4ad0 <pprz_mode_update+0x84>
    4ac0:	f24b 439c 	movw	r3, #46236	; 0xb49c
    4ac4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4ac8:	79fa      	ldrb	r2, [r7, #7]
    4aca:	701a      	strb	r2, [r3, #0]
    4acc:	2301      	movs	r3, #1
    4ace:	e002      	b.n	4ad6 <pprz_mode_update+0x8a>
    4ad0:	2300      	movs	r3, #0
    4ad2:	e000      	b.n	4ad6 <pprz_mode_update+0x8a>
  } else
    return FALSE;
    4ad4:	2300      	movs	r3, #0
}
    4ad6:	4618      	mov	r0, r3
    4ad8:	370c      	adds	r7, #12
    4ada:	46bd      	mov	sp, r7
    4adc:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ae0:	4770      	bx	lr
    4ae2:	bf00      	nop

00004ae4 <ir_estim_mode_update>:

#ifdef RADIO_LLS
/** \fn inline uint8_t ir_estim_mode_update( void )
 *  \brief update ir estimation if RADIO_LLS is true \n
 */
inline uint8_t ir_estim_mode_update( void ) {
    4ae4:	b480      	push	{r7}
    4ae6:	b083      	sub	sp, #12
    4ae8:	af00      	add	r7, sp, #0
  ModeUpdate(ir_estim_mode, IR_ESTIM_MODE_OF_PULSE(from_fbw.channels[RADIO_LLS]));
    4aea:	f24b 53c0 	movw	r3, #46528	; 0xb5c0
    4aee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4af2:	89db      	ldrh	r3, [r3, #14]
    4af4:	b21a      	sxth	r2, r3
    4af6:	f640 437f 	movw	r3, #3199	; 0xc7f
    4afa:	429a      	cmp	r2, r3
    4afc:	bfd4      	ite	le
    4afe:	2300      	movle	r3, #0
    4b00:	2301      	movgt	r3, #1
    4b02:	b2db      	uxtb	r3, r3
    4b04:	71fb      	strb	r3, [r7, #7]
    4b06:	f240 1304 	movw	r3, #260	; 0x104
    4b0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b0e:	781b      	ldrb	r3, [r3, #0]
    4b10:	79fa      	ldrb	r2, [r7, #7]
    4b12:	429a      	cmp	r2, r3
    4b14:	d007      	beq.n	4b26 <ir_estim_mode_update+0x42>
    4b16:	f240 1304 	movw	r3, #260	; 0x104
    4b1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b1e:	79fa      	ldrb	r2, [r7, #7]
    4b20:	701a      	strb	r2, [r3, #0]
    4b22:	2301      	movs	r3, #1
    4b24:	e000      	b.n	4b28 <ir_estim_mode_update+0x44>
    4b26:	2300      	movs	r3, #0
}
    4b28:	4618      	mov	r0, r3
    4b2a:	370c      	adds	r7, #12
    4b2c:	46bd      	mov	sp, r7
    4b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b32:	4770      	bx	lr

00004b34 <mcu1_status_update>:


/** \fn inline uint8_t mcu1_status_update( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
inline uint8_t mcu1_status_update( void ) {
    4b34:	b480      	push	{r7}
    4b36:	b083      	sub	sp, #12
    4b38:	af00      	add	r7, sp, #0
  uint8_t new_mode = from_fbw.status;
    4b3a:	f24b 53c0 	movw	r3, #46528	; 0xb5c0
    4b3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4b42:	7cdb      	ldrb	r3, [r3, #19]
    4b44:	71fb      	strb	r3, [r7, #7]
  if (mcu1_status != new_mode) {
    4b46:	f24b 43a3 	movw	r3, #46243	; 0xb4a3
    4b4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4b4e:	781b      	ldrb	r3, [r3, #0]
    4b50:	79fa      	ldrb	r2, [r7, #7]
    4b52:	429a      	cmp	r2, r3
    4b54:	d017      	beq.n	4b86 <mcu1_status_update+0x52>
    bool_t changed = ((mcu1_status&MASK_FBW_CHANGED) != (new_mode&MASK_FBW_CHANGED));
    4b56:	f24b 43a3 	movw	r3, #46243	; 0xb4a3
    4b5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4b5e:	781b      	ldrb	r3, [r3, #0]
    4b60:	461a      	mov	r2, r3
    4b62:	79fb      	ldrb	r3, [r7, #7]
    4b64:	4053      	eors	r3, r2
    4b66:	f003 0303 	and.w	r3, r3, #3
    4b6a:	2b00      	cmp	r3, #0
    4b6c:	bf0c      	ite	eq
    4b6e:	2300      	moveq	r3, #0
    4b70:	2301      	movne	r3, #1
    4b72:	b2db      	uxtb	r3, r3
    4b74:	71bb      	strb	r3, [r7, #6]
    mcu1_status = new_mode;
    4b76:	f24b 43a3 	movw	r3, #46243	; 0xb4a3
    4b7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4b7e:	79fa      	ldrb	r2, [r7, #7]
    4b80:	701a      	strb	r2, [r3, #0]
    return changed;
    4b82:	79bb      	ldrb	r3, [r7, #6]
    4b84:	e000      	b.n	4b88 <mcu1_status_update+0x54>
  }
  return FALSE;
    4b86:	2300      	movs	r3, #0
}
    4b88:	4618      	mov	r0, r3
    4b8a:	370c      	adds	r7, #12
    4b8c:	46bd      	mov	sp, r7
    4b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b92:	4770      	bx	lr

00004b94 <events_update>:
 EventUpdate(_cpt, (inflight_calib_mode==IF_CALIB_MODE_NONE && from_fbw.channels[_channel]<(int)(-0.75*MAX_PPRZ)), _event)

/** \fn static inline void events_update( void )
 *  @@@@@ A FIXER @@@@@
 */
static inline void events_update( void ) {
    4b94:	b480      	push	{r7}
    4b96:	af00      	add	r7, sp, #0
  static uint16_t event1_cpt = 0;
  static uint16_t event2_cpt = 0;
  EventPos(event1_cpt, RADIO_GAIN1, rc_event_1);
    4b98:	f64b 23cc 	movw	r3, #47820	; 0xbacc
    4b9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4ba0:	781b      	ldrb	r3, [r3, #0]
    4ba2:	2b00      	cmp	r3, #0
    4ba4:	d12a      	bne.n	4bfc <events_update+0x68>
    4ba6:	f24b 53c0 	movw	r3, #46528	; 0xb5c0
    4baa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4bae:	895b      	ldrh	r3, [r3, #10]
    4bb0:	b21b      	sxth	r3, r3
    4bb2:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
    4bb6:	dd21      	ble.n	4bfc <events_update+0x68>
    4bb8:	f24b 43b4 	movw	r3, #46260	; 0xb4b4
    4bbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4bc0:	881b      	ldrh	r3, [r3, #0]
    4bc2:	2b13      	cmp	r3, #19
    4bc4:	d819      	bhi.n	4bfa <events_update+0x66>
    4bc6:	f24b 43b4 	movw	r3, #46260	; 0xb4b4
    4bca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4bce:	881b      	ldrh	r3, [r3, #0]
    4bd0:	3301      	adds	r3, #1
    4bd2:	b29a      	uxth	r2, r3
    4bd4:	f24b 43b4 	movw	r3, #46260	; 0xb4b4
    4bd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4bdc:	801a      	strh	r2, [r3, #0]
    4bde:	f24b 43b4 	movw	r3, #46260	; 0xb4b4
    4be2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4be6:	881b      	ldrh	r3, [r3, #0]
    4be8:	2b14      	cmp	r3, #20
    4bea:	d106      	bne.n	4bfa <events_update+0x66>
    4bec:	f24b 43a0 	movw	r3, #46240	; 0xb4a0
    4bf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4bf4:	2201      	movs	r2, #1
    4bf6:	701a      	strb	r2, [r3, #0]
    4bf8:	e00c      	b.n	4c14 <events_update+0x80>
    4bfa:	e00b      	b.n	4c14 <events_update+0x80>
    4bfc:	f24b 43b4 	movw	r3, #46260	; 0xb4b4
    4c00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4c04:	2200      	movs	r2, #0
    4c06:	801a      	strh	r2, [r3, #0]
    4c08:	f24b 43a0 	movw	r3, #46240	; 0xb4a0
    4c0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4c10:	2200      	movs	r2, #0
    4c12:	701a      	strb	r2, [r3, #0]
  EventNeg(event2_cpt, RADIO_GAIN1, rc_event_2);
    4c14:	f64b 23cc 	movw	r3, #47820	; 0xbacc
    4c18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4c1c:	781b      	ldrb	r3, [r3, #0]
    4c1e:	2b00      	cmp	r3, #0
    4c20:	d12a      	bne.n	4c78 <events_update+0xe4>
    4c22:	f24b 53c0 	movw	r3, #46528	; 0xb5c0
    4c26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4c2a:	895b      	ldrh	r3, [r3, #10]
    4c2c:	b21b      	sxth	r3, r3
    4c2e:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
    4c32:	da21      	bge.n	4c78 <events_update+0xe4>
    4c34:	f24b 43b6 	movw	r3, #46262	; 0xb4b6
    4c38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4c3c:	881b      	ldrh	r3, [r3, #0]
    4c3e:	2b13      	cmp	r3, #19
    4c40:	d819      	bhi.n	4c76 <events_update+0xe2>
    4c42:	f24b 43b6 	movw	r3, #46262	; 0xb4b6
    4c46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4c4a:	881b      	ldrh	r3, [r3, #0]
    4c4c:	3301      	adds	r3, #1
    4c4e:	b29a      	uxth	r2, r3
    4c50:	f24b 43b6 	movw	r3, #46262	; 0xb4b6
    4c54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4c58:	801a      	strh	r2, [r3, #0]
    4c5a:	f24b 43b6 	movw	r3, #46262	; 0xb4b6
    4c5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4c62:	881b      	ldrh	r3, [r3, #0]
    4c64:	2b14      	cmp	r3, #20
    4c66:	d106      	bne.n	4c76 <events_update+0xe2>
    4c68:	f24b 43a1 	movw	r3, #46241	; 0xb4a1
    4c6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4c70:	2201      	movs	r2, #1
    4c72:	701a      	strb	r2, [r3, #0]
    4c74:	e00c      	b.n	4c90 <events_update+0xfc>
    4c76:	e00b      	b.n	4c90 <events_update+0xfc>
    4c78:	f24b 43b6 	movw	r3, #46262	; 0xb4b6
    4c7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4c80:	2200      	movs	r2, #0
    4c82:	801a      	strh	r2, [r3, #0]
    4c84:	f24b 43a1 	movw	r3, #46241	; 0xb4a1
    4c88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4c8c:	2200      	movs	r2, #0
    4c8e:	701a      	strb	r2, [r3, #0]
}  
    4c90:	46bd      	mov	sp, r7
    4c92:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c96:	4770      	bx	lr

00004c98 <copy_from_to_fbw>:


/** \fn inline void copy_from_to_fbw ( void )
 *  \brief Send back uncontrolled channels (only rudder)
 */
inline void copy_from_to_fbw ( void ) {
    4c98:	b480      	push	{r7}
    4c9a:	af00      	add	r7, sp, #0
  to_fbw.channels[RADIO_YAW] = from_fbw.channels[RADIO_YAW];
    4c9c:	f24b 53c0 	movw	r3, #46528	; 0xb5c0
    4ca0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4ca4:	88da      	ldrh	r2, [r3, #6]
    4ca6:	f24b 53d8 	movw	r3, #46552	; 0xb5d8
    4caa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4cae:	80da      	strh	r2, [r3, #6]
#ifdef ANTON_T7
  to_fbw.channels[RADIO_PITCH] = from_fbw.channels[RADIO_PITCH];
#endif
  to_fbw.status = 0;
    4cb0:	f24b 53d8 	movw	r3, #46552	; 0xb5d8
    4cb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4cb8:	2200      	movs	r2, #0
    4cba:	74da      	strb	r2, [r3, #19]
}
    4cbc:	46bd      	mov	sp, r7
    4cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
    4cc2:	4770      	bx	lr

00004cc4 <send_boot>:
 * Called at 20Hz.
 */



void send_boot(void){
    4cc4:	b480      	push	{r7}
    4cc6:	af00      	add	r7, sp, #0
  /** initialisation phase during boot */
  //vPrintString("S_13 reporting_task start!\n\r");
  //add by wanbo
  //if (boot) 
  {
      DOWNLINK_SEND_BOOT(&version);
    4cc8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    4ccc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4cd0:	781a      	ldrb	r2, [r3, #0]
    4cd2:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    4cd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4cda:	781b      	ldrb	r3, [r3, #0]
    4cdc:	b2db      	uxtb	r3, r3
    4cde:	429a      	cmp	r2, r3
    4ce0:	d313      	bcc.n	4d0a <send_boot+0x46>
    4ce2:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    4ce6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4cea:	781b      	ldrb	r3, [r3, #0]
    4cec:	b2db      	uxtb	r3, r3
    4cee:	461a      	mov	r2, r3
    4cf0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    4cf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4cf8:	781b      	ldrb	r3, [r3, #0]
    4cfa:	1ad3      	subs	r3, r2, r3
    4cfc:	33ff      	adds	r3, #255	; 0xff
    4cfe:	2b06      	cmp	r3, #6
    4d00:	bfd4      	ite	le
    4d02:	2300      	movle	r3, #0
    4d04:	2301      	movgt	r3, #1
    4d06:	b2db      	uxtb	r3, r3
    4d08:	e011      	b.n	4d2e <send_boot+0x6a>
    4d0a:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    4d0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4d12:	781b      	ldrb	r3, [r3, #0]
    4d14:	b2db      	uxtb	r3, r3
    4d16:	461a      	mov	r2, r3
    4d18:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    4d1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4d20:	781b      	ldrb	r3, [r3, #0]
    4d22:	1ad3      	subs	r3, r2, r3
    4d24:	2b06      	cmp	r3, #6
    4d26:	bfd4      	ite	le
    4d28:	2300      	movle	r3, #0
    4d2a:	2301      	movgt	r3, #1
    4d2c:	b2db      	uxtb	r3, r3
    4d2e:	2b00      	cmp	r3, #0
    4d30:	f000 8194 	beq.w	505c <send_boot+0x398>
    4d34:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    4d38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4d3c:	781b      	ldrb	r3, [r3, #0]
    4d3e:	461a      	mov	r2, r3
    4d40:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    4d44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4d48:	2105      	movs	r1, #5
    4d4a:	5499      	strb	r1, [r3, r2]
    4d4c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    4d50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4d54:	781b      	ldrb	r3, [r3, #0]
    4d56:	3301      	adds	r3, #1
    4d58:	b2da      	uxtb	r2, r3
    4d5a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    4d5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4d62:	701a      	strb	r2, [r3, #0]
    4d64:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    4d68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4d6c:	781b      	ldrb	r3, [r3, #0]
    4d6e:	2bff      	cmp	r3, #255	; 0xff
    4d70:	d105      	bne.n	4d7e <send_boot+0xba>
    4d72:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    4d76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4d7a:	2200      	movs	r2, #0
    4d7c:	701a      	strb	r2, [r3, #0]
    4d7e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    4d82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4d86:	781b      	ldrb	r3, [r3, #0]
    4d88:	461a      	mov	r2, r3
    4d8a:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    4d8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4d92:	2101      	movs	r1, #1
    4d94:	5499      	strb	r1, [r3, r2]
    4d96:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    4d9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4d9e:	781b      	ldrb	r3, [r3, #0]
    4da0:	3301      	adds	r3, #1
    4da2:	b2da      	uxtb	r2, r3
    4da4:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    4da8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4dac:	701a      	strb	r2, [r3, #0]
    4dae:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    4db2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4db6:	781b      	ldrb	r3, [r3, #0]
    4db8:	2bff      	cmp	r3, #255	; 0xff
    4dba:	d105      	bne.n	4dc8 <send_boot+0x104>
    4dbc:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    4dc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4dc4:	2200      	movs	r2, #0
    4dc6:	701a      	strb	r2, [r3, #0]
    4dc8:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    4dcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4dd0:	2201      	movs	r2, #1
    4dd2:	701a      	strb	r2, [r3, #0]
    4dd4:	f24b 53be 	movw	r3, #46526	; 0xb5be
    4dd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4ddc:	2201      	movs	r2, #1
    4dde:	701a      	strb	r2, [r3, #0]
    4de0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    4de4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4de8:	781b      	ldrb	r3, [r3, #0]
    4dea:	461a      	mov	r2, r3
    4dec:	f643 03f2 	movw	r3, #14578	; 0x38f2
    4df0:	f2c0 0301 	movt	r3, #1
    4df4:	7819      	ldrb	r1, [r3, #0]
    4df6:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    4dfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4dfe:	5499      	strb	r1, [r3, r2]
    4e00:	f643 03f2 	movw	r3, #14578	; 0x38f2
    4e04:	f2c0 0301 	movt	r3, #1
    4e08:	781a      	ldrb	r2, [r3, #0]
    4e0a:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    4e0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4e12:	781b      	ldrb	r3, [r3, #0]
    4e14:	4413      	add	r3, r2
    4e16:	b2da      	uxtb	r2, r3
    4e18:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    4e1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4e20:	701a      	strb	r2, [r3, #0]
    4e22:	f24b 53be 	movw	r3, #46526	; 0xb5be
    4e26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4e2a:	781a      	ldrb	r2, [r3, #0]
    4e2c:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    4e30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4e34:	781b      	ldrb	r3, [r3, #0]
    4e36:	4413      	add	r3, r2
    4e38:	b2da      	uxtb	r2, r3
    4e3a:	f24b 53be 	movw	r3, #46526	; 0xb5be
    4e3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4e42:	701a      	strb	r2, [r3, #0]
    4e44:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    4e48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4e4c:	781b      	ldrb	r3, [r3, #0]
    4e4e:	3301      	adds	r3, #1
    4e50:	b2da      	uxtb	r2, r3
    4e52:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    4e56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4e5a:	701a      	strb	r2, [r3, #0]
    4e5c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    4e60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4e64:	781b      	ldrb	r3, [r3, #0]
    4e66:	2bff      	cmp	r3, #255	; 0xff
    4e68:	d105      	bne.n	4e76 <send_boot+0x1b2>
    4e6a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    4e6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4e72:	2200      	movs	r2, #0
    4e74:	701a      	strb	r2, [r3, #0]
    4e76:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    4e7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4e7e:	781b      	ldrb	r3, [r3, #0]
    4e80:	461a      	mov	r2, r3
    4e82:	f643 03f2 	movw	r3, #14578	; 0x38f2
    4e86:	f2c0 0301 	movt	r3, #1
    4e8a:	7859      	ldrb	r1, [r3, #1]
    4e8c:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    4e90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4e94:	5499      	strb	r1, [r3, r2]
    4e96:	4b88      	ldr	r3, [pc, #544]	; (50b8 <send_boot+0x3f4>)
    4e98:	781a      	ldrb	r2, [r3, #0]
    4e9a:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    4e9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4ea2:	781b      	ldrb	r3, [r3, #0]
    4ea4:	4413      	add	r3, r2
    4ea6:	b2da      	uxtb	r2, r3
    4ea8:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    4eac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4eb0:	701a      	strb	r2, [r3, #0]
    4eb2:	f24b 53be 	movw	r3, #46526	; 0xb5be
    4eb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4eba:	781a      	ldrb	r2, [r3, #0]
    4ebc:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    4ec0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4ec4:	781b      	ldrb	r3, [r3, #0]
    4ec6:	4413      	add	r3, r2
    4ec8:	b2da      	uxtb	r2, r3
    4eca:	f24b 53be 	movw	r3, #46526	; 0xb5be
    4ece:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4ed2:	701a      	strb	r2, [r3, #0]
    4ed4:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    4ed8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4edc:	781b      	ldrb	r3, [r3, #0]
    4ede:	3301      	adds	r3, #1
    4ee0:	b2da      	uxtb	r2, r3
    4ee2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    4ee6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4eea:	701a      	strb	r2, [r3, #0]
    4eec:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    4ef0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4ef4:	781b      	ldrb	r3, [r3, #0]
    4ef6:	2bff      	cmp	r3, #255	; 0xff
    4ef8:	d105      	bne.n	4f06 <send_boot+0x242>
    4efa:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    4efe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4f02:	2200      	movs	r2, #0
    4f04:	701a      	strb	r2, [r3, #0]
    4f06:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    4f0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4f0e:	781b      	ldrb	r3, [r3, #0]
    4f10:	461a      	mov	r2, r3
    4f12:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    4f16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4f1a:	7819      	ldrb	r1, [r3, #0]
    4f1c:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    4f20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4f24:	5499      	strb	r1, [r3, r2]
    4f26:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    4f2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4f2e:	781b      	ldrb	r3, [r3, #0]
    4f30:	3301      	adds	r3, #1
    4f32:	b2da      	uxtb	r2, r3
    4f34:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    4f38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4f3c:	701a      	strb	r2, [r3, #0]
    4f3e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    4f42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4f46:	781b      	ldrb	r3, [r3, #0]
    4f48:	2bff      	cmp	r3, #255	; 0xff
    4f4a:	d105      	bne.n	4f58 <send_boot+0x294>
    4f4c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    4f50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4f54:	2200      	movs	r2, #0
    4f56:	701a      	strb	r2, [r3, #0]
    4f58:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    4f5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4f60:	781b      	ldrb	r3, [r3, #0]
    4f62:	461a      	mov	r2, r3
    4f64:	f24b 53be 	movw	r3, #46526	; 0xb5be
    4f68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4f6c:	7819      	ldrb	r1, [r3, #0]
    4f6e:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    4f72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4f76:	5499      	strb	r1, [r3, r2]
    4f78:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    4f7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4f80:	781b      	ldrb	r3, [r3, #0]
    4f82:	3301      	adds	r3, #1
    4f84:	b2da      	uxtb	r2, r3
    4f86:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    4f8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4f8e:	701a      	strb	r2, [r3, #0]
    4f90:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    4f94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4f98:	781b      	ldrb	r3, [r3, #0]
    4f9a:	2bff      	cmp	r3, #255	; 0xff
    4f9c:	d105      	bne.n	4faa <send_boot+0x2e6>
    4f9e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    4fa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4fa6:	2200      	movs	r2, #0
    4fa8:	701a      	strb	r2, [r3, #0]
    4faa:	f248 0339 	movw	r3, #32825	; 0x8039
    4fae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fb2:	781b      	ldrb	r3, [r3, #0]
    4fb4:	b2db      	uxtb	r3, r3
    4fb6:	f003 0310 	and.w	r3, r3, #16
    4fba:	2b00      	cmp	r3, #0
    4fbc:	d15a      	bne.n	5074 <send_boot+0x3b0>
    4fbe:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    4fc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4fc6:	781b      	ldrb	r3, [r3, #0]
    4fc8:	b2db      	uxtb	r3, r3
    4fca:	461a      	mov	r2, r3
    4fcc:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    4fd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4fd4:	5c9a      	ldrb	r2, [r3, r2]
    4fd6:	f24b 53bb 	movw	r3, #46523	; 0xb5bb
    4fda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4fde:	701a      	strb	r2, [r3, #0]
    4fe0:	f24b 53bc 	movw	r3, #46524	; 0xb5bc
    4fe4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4fe8:	2200      	movs	r2, #0
    4fea:	701a      	strb	r2, [r3, #0]
    4fec:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    4ff0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4ff4:	781b      	ldrb	r3, [r3, #0]
    4ff6:	b2db      	uxtb	r3, r3
    4ff8:	3301      	adds	r3, #1
    4ffa:	b2da      	uxtb	r2, r3
    4ffc:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    5000:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5004:	701a      	strb	r2, [r3, #0]
    5006:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    500a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    500e:	781b      	ldrb	r3, [r3, #0]
    5010:	b2db      	uxtb	r3, r3
    5012:	2bff      	cmp	r3, #255	; 0xff
    5014:	d105      	bne.n	5022 <send_boot+0x35e>
    5016:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    501a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    501e:	2200      	movs	r2, #0
    5020:	701a      	strb	r2, [r3, #0]
    5022:	f248 0338 	movw	r3, #32824	; 0x8038
    5026:	f2c2 0300 	movt	r3, #8192	; 0x2000
    502a:	f248 0238 	movw	r2, #32824	; 0x8038
    502e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5032:	7812      	ldrb	r2, [r2, #0]
    5034:	b2d2      	uxtb	r2, r2
    5036:	f042 0201 	orr.w	r2, r2, #1
    503a:	b2d2      	uxtb	r2, r2
    503c:	701a      	strb	r2, [r3, #0]
    503e:	f248 0339 	movw	r3, #32825	; 0x8039
    5042:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5046:	f248 0239 	movw	r2, #32825	; 0x8039
    504a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    504e:	7812      	ldrb	r2, [r2, #0]
    5050:	b2d2      	uxtb	r2, r2
    5052:	f042 0210 	orr.w	r2, r2, #16
    5056:	b2d2      	uxtb	r2, r2
    5058:	701a      	strb	r2, [r3, #0]
    505a:	e00b      	b.n	5074 <send_boot+0x3b0>
    505c:	f24b 43b8 	movw	r3, #46264	; 0xb4b8
    5060:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5064:	781b      	ldrb	r3, [r3, #0]
    5066:	3301      	adds	r3, #1
    5068:	b2da      	uxtb	r2, r3
    506a:	f24b 43b8 	movw	r3, #46264	; 0xb4b8
    506e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5072:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    5074:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5078:	f2c2 0304 	movt	r3, #8196	; 0x2004
    507c:	781a      	ldrb	r2, [r3, #0]
    507e:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    5082:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5086:	781b      	ldrb	r3, [r3, #0]
    5088:	b2db      	uxtb	r3, r3
    508a:	429a      	cmp	r2, r3
    508c:	d316      	bcc.n	50bc <send_boot+0x3f8>
    508e:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    5092:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5096:	781b      	ldrb	r3, [r3, #0]
    5098:	b2db      	uxtb	r3, r3
    509a:	461a      	mov	r2, r3
    509c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    50a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    50a4:	781b      	ldrb	r3, [r3, #0]
    50a6:	1ad3      	subs	r3, r2, r3
    50a8:	33ff      	adds	r3, #255	; 0xff
    50aa:	2b14      	cmp	r3, #20
    50ac:	bfd4      	ite	le
    50ae:	2300      	movle	r3, #0
    50b0:	2301      	movgt	r3, #1
    50b2:	b2db      	uxtb	r3, r3
    50b4:	e014      	b.n	50e0 <send_boot+0x41c>
    50b6:	bf00      	nop
    50b8:	000138f3 	.word	0x000138f3
    50bc:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    50c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    50c4:	781b      	ldrb	r3, [r3, #0]
    50c6:	b2db      	uxtb	r3, r3
    50c8:	461a      	mov	r2, r3
    50ca:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    50ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    50d2:	781b      	ldrb	r3, [r3, #0]
    50d4:	1ad3      	subs	r3, r2, r3
    50d6:	2b14      	cmp	r3, #20
    50d8:	bfd4      	ite	le
    50da:	2300      	movle	r3, #0
    50dc:	2301      	movgt	r3, #1
    50de:	b2db      	uxtb	r3, r3
    50e0:	2b00      	cmp	r3, #0
    50e2:	f000 85a5 	beq.w	5c30 <send_boot+0xf6c>
    50e6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    50ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    50ee:	781b      	ldrb	r3, [r3, #0]
    50f0:	461a      	mov	r2, r3
    50f2:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    50f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    50fa:	2105      	movs	r1, #5
    50fc:	5499      	strb	r1, [r3, r2]
    50fe:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5102:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5106:	781b      	ldrb	r3, [r3, #0]
    5108:	3301      	adds	r3, #1
    510a:	b2da      	uxtb	r2, r3
    510c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5110:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5114:	701a      	strb	r2, [r3, #0]
    5116:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    511a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    511e:	781b      	ldrb	r3, [r3, #0]
    5120:	2bff      	cmp	r3, #255	; 0xff
    5122:	d105      	bne.n	5130 <send_boot+0x46c>
    5124:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5128:	f2c2 0304 	movt	r3, #8196	; 0x2004
    512c:	2200      	movs	r2, #0
    512e:	701a      	strb	r2, [r3, #0]
    5130:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5134:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5138:	781b      	ldrb	r3, [r3, #0]
    513a:	461a      	mov	r2, r3
    513c:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    5140:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5144:	2105      	movs	r1, #5
    5146:	5499      	strb	r1, [r3, r2]
    5148:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    514c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5150:	781b      	ldrb	r3, [r3, #0]
    5152:	3301      	adds	r3, #1
    5154:	b2da      	uxtb	r2, r3
    5156:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    515a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    515e:	701a      	strb	r2, [r3, #0]
    5160:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5164:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5168:	781b      	ldrb	r3, [r3, #0]
    516a:	2bff      	cmp	r3, #255	; 0xff
    516c:	d105      	bne.n	517a <send_boot+0x4b6>
    516e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5172:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5176:	2200      	movs	r2, #0
    5178:	701a      	strb	r2, [r3, #0]
    517a:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    517e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5182:	2205      	movs	r2, #5
    5184:	701a      	strb	r2, [r3, #0]
    5186:	f24b 53be 	movw	r3, #46526	; 0xb5be
    518a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    518e:	2205      	movs	r2, #5
    5190:	701a      	strb	r2, [r3, #0]
    5192:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5196:	f2c2 0304 	movt	r3, #8196	; 0x2004
    519a:	781b      	ldrb	r3, [r3, #0]
    519c:	461a      	mov	r2, r3
    519e:	f64b 23b0 	movw	r3, #47792	; 0xbab0
    51a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    51a6:	7819      	ldrb	r1, [r3, #0]
    51a8:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    51ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    51b0:	5499      	strb	r1, [r3, r2]
    51b2:	f64b 23b0 	movw	r3, #47792	; 0xbab0
    51b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    51ba:	781a      	ldrb	r2, [r3, #0]
    51bc:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    51c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    51c4:	781b      	ldrb	r3, [r3, #0]
    51c6:	4413      	add	r3, r2
    51c8:	b2da      	uxtb	r2, r3
    51ca:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    51ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    51d2:	701a      	strb	r2, [r3, #0]
    51d4:	f24b 53be 	movw	r3, #46526	; 0xb5be
    51d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    51dc:	781a      	ldrb	r2, [r3, #0]
    51de:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    51e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    51e6:	781b      	ldrb	r3, [r3, #0]
    51e8:	4413      	add	r3, r2
    51ea:	b2da      	uxtb	r2, r3
    51ec:	f24b 53be 	movw	r3, #46526	; 0xb5be
    51f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    51f4:	701a      	strb	r2, [r3, #0]
    51f6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    51fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    51fe:	781b      	ldrb	r3, [r3, #0]
    5200:	3301      	adds	r3, #1
    5202:	b2da      	uxtb	r2, r3
    5204:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5208:	f2c2 0304 	movt	r3, #8196	; 0x2004
    520c:	701a      	strb	r2, [r3, #0]
    520e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5212:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5216:	781b      	ldrb	r3, [r3, #0]
    5218:	2bff      	cmp	r3, #255	; 0xff
    521a:	d105      	bne.n	5228 <send_boot+0x564>
    521c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5220:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5224:	2200      	movs	r2, #0
    5226:	701a      	strb	r2, [r3, #0]
    5228:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    522c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5230:	781b      	ldrb	r3, [r3, #0]
    5232:	461a      	mov	r2, r3
    5234:	f64b 23b0 	movw	r3, #47792	; 0xbab0
    5238:	f2c2 0304 	movt	r3, #8196	; 0x2004
    523c:	7859      	ldrb	r1, [r3, #1]
    523e:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    5242:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5246:	5499      	strb	r1, [r3, r2]
    5248:	4bd1      	ldr	r3, [pc, #836]	; (5590 <send_boot+0x8cc>)
    524a:	781a      	ldrb	r2, [r3, #0]
    524c:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5250:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5254:	781b      	ldrb	r3, [r3, #0]
    5256:	4413      	add	r3, r2
    5258:	b2da      	uxtb	r2, r3
    525a:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    525e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5262:	701a      	strb	r2, [r3, #0]
    5264:	f24b 53be 	movw	r3, #46526	; 0xb5be
    5268:	f2c2 0304 	movt	r3, #8196	; 0x2004
    526c:	781a      	ldrb	r2, [r3, #0]
    526e:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5272:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5276:	781b      	ldrb	r3, [r3, #0]
    5278:	4413      	add	r3, r2
    527a:	b2da      	uxtb	r2, r3
    527c:	f24b 53be 	movw	r3, #46526	; 0xb5be
    5280:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5284:	701a      	strb	r2, [r3, #0]
    5286:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    528a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    528e:	781b      	ldrb	r3, [r3, #0]
    5290:	3301      	adds	r3, #1
    5292:	b2da      	uxtb	r2, r3
    5294:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5298:	f2c2 0304 	movt	r3, #8196	; 0x2004
    529c:	701a      	strb	r2, [r3, #0]
    529e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    52a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    52a6:	781b      	ldrb	r3, [r3, #0]
    52a8:	2bff      	cmp	r3, #255	; 0xff
    52aa:	d105      	bne.n	52b8 <send_boot+0x5f4>
    52ac:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    52b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    52b4:	2200      	movs	r2, #0
    52b6:	701a      	strb	r2, [r3, #0]
    52b8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    52bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    52c0:	781b      	ldrb	r3, [r3, #0]
    52c2:	461a      	mov	r2, r3
    52c4:	f64b 23b0 	movw	r3, #47792	; 0xbab0
    52c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    52cc:	7899      	ldrb	r1, [r3, #2]
    52ce:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    52d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    52d6:	5499      	strb	r1, [r3, r2]
    52d8:	4bae      	ldr	r3, [pc, #696]	; (5594 <send_boot+0x8d0>)
    52da:	781a      	ldrb	r2, [r3, #0]
    52dc:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    52e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    52e4:	781b      	ldrb	r3, [r3, #0]
    52e6:	4413      	add	r3, r2
    52e8:	b2da      	uxtb	r2, r3
    52ea:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    52ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    52f2:	701a      	strb	r2, [r3, #0]
    52f4:	f24b 53be 	movw	r3, #46526	; 0xb5be
    52f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    52fc:	781a      	ldrb	r2, [r3, #0]
    52fe:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5302:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5306:	781b      	ldrb	r3, [r3, #0]
    5308:	4413      	add	r3, r2
    530a:	b2da      	uxtb	r2, r3
    530c:	f24b 53be 	movw	r3, #46526	; 0xb5be
    5310:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5314:	701a      	strb	r2, [r3, #0]
    5316:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    531a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    531e:	781b      	ldrb	r3, [r3, #0]
    5320:	3301      	adds	r3, #1
    5322:	b2da      	uxtb	r2, r3
    5324:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5328:	f2c2 0304 	movt	r3, #8196	; 0x2004
    532c:	701a      	strb	r2, [r3, #0]
    532e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5332:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5336:	781b      	ldrb	r3, [r3, #0]
    5338:	2bff      	cmp	r3, #255	; 0xff
    533a:	d105      	bne.n	5348 <send_boot+0x684>
    533c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5340:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5344:	2200      	movs	r2, #0
    5346:	701a      	strb	r2, [r3, #0]
    5348:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    534c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5350:	781b      	ldrb	r3, [r3, #0]
    5352:	461a      	mov	r2, r3
    5354:	f64b 23b0 	movw	r3, #47792	; 0xbab0
    5358:	f2c2 0304 	movt	r3, #8196	; 0x2004
    535c:	78d9      	ldrb	r1, [r3, #3]
    535e:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    5362:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5366:	5499      	strb	r1, [r3, r2]
    5368:	4b8b      	ldr	r3, [pc, #556]	; (5598 <send_boot+0x8d4>)
    536a:	781a      	ldrb	r2, [r3, #0]
    536c:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5370:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5374:	781b      	ldrb	r3, [r3, #0]
    5376:	4413      	add	r3, r2
    5378:	b2da      	uxtb	r2, r3
    537a:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    537e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5382:	701a      	strb	r2, [r3, #0]
    5384:	f24b 53be 	movw	r3, #46526	; 0xb5be
    5388:	f2c2 0304 	movt	r3, #8196	; 0x2004
    538c:	781a      	ldrb	r2, [r3, #0]
    538e:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5392:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5396:	781b      	ldrb	r3, [r3, #0]
    5398:	4413      	add	r3, r2
    539a:	b2da      	uxtb	r2, r3
    539c:	f24b 53be 	movw	r3, #46526	; 0xb5be
    53a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    53a4:	701a      	strb	r2, [r3, #0]
    53a6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    53aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    53ae:	781b      	ldrb	r3, [r3, #0]
    53b0:	3301      	adds	r3, #1
    53b2:	b2da      	uxtb	r2, r3
    53b4:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    53b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    53bc:	701a      	strb	r2, [r3, #0]
    53be:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    53c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    53c6:	781b      	ldrb	r3, [r3, #0]
    53c8:	2bff      	cmp	r3, #255	; 0xff
    53ca:	d105      	bne.n	53d8 <send_boot+0x714>
    53cc:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    53d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    53d4:	2200      	movs	r2, #0
    53d6:	701a      	strb	r2, [r3, #0]
    53d8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    53dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    53e0:	781b      	ldrb	r3, [r3, #0]
    53e2:	461a      	mov	r2, r3
    53e4:	f64b 23b4 	movw	r3, #47796	; 0xbab4
    53e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    53ec:	7819      	ldrb	r1, [r3, #0]
    53ee:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    53f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    53f6:	5499      	strb	r1, [r3, r2]
    53f8:	f64b 23b4 	movw	r3, #47796	; 0xbab4
    53fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5400:	781a      	ldrb	r2, [r3, #0]
    5402:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5406:	f2c2 0304 	movt	r3, #8196	; 0x2004
    540a:	781b      	ldrb	r3, [r3, #0]
    540c:	4413      	add	r3, r2
    540e:	b2da      	uxtb	r2, r3
    5410:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5414:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5418:	701a      	strb	r2, [r3, #0]
    541a:	f24b 53be 	movw	r3, #46526	; 0xb5be
    541e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5422:	781a      	ldrb	r2, [r3, #0]
    5424:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5428:	f2c2 0304 	movt	r3, #8196	; 0x2004
    542c:	781b      	ldrb	r3, [r3, #0]
    542e:	4413      	add	r3, r2
    5430:	b2da      	uxtb	r2, r3
    5432:	f24b 53be 	movw	r3, #46526	; 0xb5be
    5436:	f2c2 0304 	movt	r3, #8196	; 0x2004
    543a:	701a      	strb	r2, [r3, #0]
    543c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5440:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5444:	781b      	ldrb	r3, [r3, #0]
    5446:	3301      	adds	r3, #1
    5448:	b2da      	uxtb	r2, r3
    544a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    544e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5452:	701a      	strb	r2, [r3, #0]
    5454:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5458:	f2c2 0304 	movt	r3, #8196	; 0x2004
    545c:	781b      	ldrb	r3, [r3, #0]
    545e:	2bff      	cmp	r3, #255	; 0xff
    5460:	d105      	bne.n	546e <send_boot+0x7aa>
    5462:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5466:	f2c2 0304 	movt	r3, #8196	; 0x2004
    546a:	2200      	movs	r2, #0
    546c:	701a      	strb	r2, [r3, #0]
    546e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5472:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5476:	781b      	ldrb	r3, [r3, #0]
    5478:	461a      	mov	r2, r3
    547a:	f64b 23b4 	movw	r3, #47796	; 0xbab4
    547e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5482:	7859      	ldrb	r1, [r3, #1]
    5484:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    5488:	f2c2 0304 	movt	r3, #8196	; 0x2004
    548c:	5499      	strb	r1, [r3, r2]
    548e:	4b43      	ldr	r3, [pc, #268]	; (559c <send_boot+0x8d8>)
    5490:	781a      	ldrb	r2, [r3, #0]
    5492:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5496:	f2c2 0304 	movt	r3, #8196	; 0x2004
    549a:	781b      	ldrb	r3, [r3, #0]
    549c:	4413      	add	r3, r2
    549e:	b2da      	uxtb	r2, r3
    54a0:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    54a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    54a8:	701a      	strb	r2, [r3, #0]
    54aa:	f24b 53be 	movw	r3, #46526	; 0xb5be
    54ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    54b2:	781a      	ldrb	r2, [r3, #0]
    54b4:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    54b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    54bc:	781b      	ldrb	r3, [r3, #0]
    54be:	4413      	add	r3, r2
    54c0:	b2da      	uxtb	r2, r3
    54c2:	f24b 53be 	movw	r3, #46526	; 0xb5be
    54c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    54ca:	701a      	strb	r2, [r3, #0]
    54cc:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    54d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    54d4:	781b      	ldrb	r3, [r3, #0]
    54d6:	3301      	adds	r3, #1
    54d8:	b2da      	uxtb	r2, r3
    54da:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    54de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    54e2:	701a      	strb	r2, [r3, #0]
    54e4:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    54e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    54ec:	781b      	ldrb	r3, [r3, #0]
    54ee:	2bff      	cmp	r3, #255	; 0xff
    54f0:	d105      	bne.n	54fe <send_boot+0x83a>
    54f2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    54f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    54fa:	2200      	movs	r2, #0
    54fc:	701a      	strb	r2, [r3, #0]
    54fe:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5502:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5506:	781b      	ldrb	r3, [r3, #0]
    5508:	461a      	mov	r2, r3
    550a:	f64b 23b4 	movw	r3, #47796	; 0xbab4
    550e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5512:	7899      	ldrb	r1, [r3, #2]
    5514:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    5518:	f2c2 0304 	movt	r3, #8196	; 0x2004
    551c:	5499      	strb	r1, [r3, r2]
    551e:	4b20      	ldr	r3, [pc, #128]	; (55a0 <send_boot+0x8dc>)
    5520:	781a      	ldrb	r2, [r3, #0]
    5522:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5526:	f2c2 0304 	movt	r3, #8196	; 0x2004
    552a:	781b      	ldrb	r3, [r3, #0]
    552c:	4413      	add	r3, r2
    552e:	b2da      	uxtb	r2, r3
    5530:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5534:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5538:	701a      	strb	r2, [r3, #0]
    553a:	f24b 53be 	movw	r3, #46526	; 0xb5be
    553e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5542:	781a      	ldrb	r2, [r3, #0]
    5544:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5548:	f2c2 0304 	movt	r3, #8196	; 0x2004
    554c:	781b      	ldrb	r3, [r3, #0]
    554e:	4413      	add	r3, r2
    5550:	b2da      	uxtb	r2, r3
    5552:	f24b 53be 	movw	r3, #46526	; 0xb5be
    5556:	f2c2 0304 	movt	r3, #8196	; 0x2004
    555a:	701a      	strb	r2, [r3, #0]
    555c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5560:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5564:	781b      	ldrb	r3, [r3, #0]
    5566:	3301      	adds	r3, #1
    5568:	b2da      	uxtb	r2, r3
    556a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    556e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5572:	701a      	strb	r2, [r3, #0]
    5574:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5578:	f2c2 0304 	movt	r3, #8196	; 0x2004
    557c:	781b      	ldrb	r3, [r3, #0]
    557e:	2bff      	cmp	r3, #255	; 0xff
    5580:	d110      	bne.n	55a4 <send_boot+0x8e0>
    5582:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5586:	f2c2 0304 	movt	r3, #8196	; 0x2004
    558a:	2200      	movs	r2, #0
    558c:	701a      	strb	r2, [r3, #0]
    558e:	e009      	b.n	55a4 <send_boot+0x8e0>
    5590:	2004bab1 	.word	0x2004bab1
    5594:	2004bab2 	.word	0x2004bab2
    5598:	2004bab3 	.word	0x2004bab3
    559c:	2004bab5 	.word	0x2004bab5
    55a0:	2004bab6 	.word	0x2004bab6
    55a4:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    55a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    55ac:	781b      	ldrb	r3, [r3, #0]
    55ae:	461a      	mov	r2, r3
    55b0:	f64b 23b4 	movw	r3, #47796	; 0xbab4
    55b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    55b8:	78d9      	ldrb	r1, [r3, #3]
    55ba:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    55be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    55c2:	5499      	strb	r1, [r3, r2]
    55c4:	4bd3      	ldr	r3, [pc, #844]	; (5914 <send_boot+0xc50>)
    55c6:	781a      	ldrb	r2, [r3, #0]
    55c8:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    55cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    55d0:	781b      	ldrb	r3, [r3, #0]
    55d2:	4413      	add	r3, r2
    55d4:	b2da      	uxtb	r2, r3
    55d6:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    55da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    55de:	701a      	strb	r2, [r3, #0]
    55e0:	f24b 53be 	movw	r3, #46526	; 0xb5be
    55e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    55e8:	781a      	ldrb	r2, [r3, #0]
    55ea:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    55ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    55f2:	781b      	ldrb	r3, [r3, #0]
    55f4:	4413      	add	r3, r2
    55f6:	b2da      	uxtb	r2, r3
    55f8:	f24b 53be 	movw	r3, #46526	; 0xb5be
    55fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5600:	701a      	strb	r2, [r3, #0]
    5602:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5606:	f2c2 0304 	movt	r3, #8196	; 0x2004
    560a:	781b      	ldrb	r3, [r3, #0]
    560c:	3301      	adds	r3, #1
    560e:	b2da      	uxtb	r2, r3
    5610:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5614:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5618:	701a      	strb	r2, [r3, #0]
    561a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    561e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5622:	781b      	ldrb	r3, [r3, #0]
    5624:	2bff      	cmp	r3, #255	; 0xff
    5626:	d105      	bne.n	5634 <send_boot+0x970>
    5628:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    562c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5630:	2200      	movs	r2, #0
    5632:	701a      	strb	r2, [r3, #0]
    5634:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5638:	f2c2 0304 	movt	r3, #8196	; 0x2004
    563c:	781b      	ldrb	r3, [r3, #0]
    563e:	461a      	mov	r2, r3
    5640:	f64b 23ac 	movw	r3, #47788	; 0xbaac
    5644:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5648:	7819      	ldrb	r1, [r3, #0]
    564a:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    564e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5652:	5499      	strb	r1, [r3, r2]
    5654:	f64b 23ac 	movw	r3, #47788	; 0xbaac
    5658:	f2c2 0304 	movt	r3, #8196	; 0x2004
    565c:	781a      	ldrb	r2, [r3, #0]
    565e:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5662:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5666:	781b      	ldrb	r3, [r3, #0]
    5668:	4413      	add	r3, r2
    566a:	b2da      	uxtb	r2, r3
    566c:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5670:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5674:	701a      	strb	r2, [r3, #0]
    5676:	f24b 53be 	movw	r3, #46526	; 0xb5be
    567a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    567e:	781a      	ldrb	r2, [r3, #0]
    5680:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5684:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5688:	781b      	ldrb	r3, [r3, #0]
    568a:	4413      	add	r3, r2
    568c:	b2da      	uxtb	r2, r3
    568e:	f24b 53be 	movw	r3, #46526	; 0xb5be
    5692:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5696:	701a      	strb	r2, [r3, #0]
    5698:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    569c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    56a0:	781b      	ldrb	r3, [r3, #0]
    56a2:	3301      	adds	r3, #1
    56a4:	b2da      	uxtb	r2, r3
    56a6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    56aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    56ae:	701a      	strb	r2, [r3, #0]
    56b0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    56b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    56b8:	781b      	ldrb	r3, [r3, #0]
    56ba:	2bff      	cmp	r3, #255	; 0xff
    56bc:	d105      	bne.n	56ca <send_boot+0xa06>
    56be:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    56c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    56c6:	2200      	movs	r2, #0
    56c8:	701a      	strb	r2, [r3, #0]
    56ca:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    56ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    56d2:	781b      	ldrb	r3, [r3, #0]
    56d4:	461a      	mov	r2, r3
    56d6:	f64b 23ac 	movw	r3, #47788	; 0xbaac
    56da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    56de:	7859      	ldrb	r1, [r3, #1]
    56e0:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    56e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    56e8:	5499      	strb	r1, [r3, r2]
    56ea:	4b8b      	ldr	r3, [pc, #556]	; (5918 <send_boot+0xc54>)
    56ec:	781a      	ldrb	r2, [r3, #0]
    56ee:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    56f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    56f6:	781b      	ldrb	r3, [r3, #0]
    56f8:	4413      	add	r3, r2
    56fa:	b2da      	uxtb	r2, r3
    56fc:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5700:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5704:	701a      	strb	r2, [r3, #0]
    5706:	f24b 53be 	movw	r3, #46526	; 0xb5be
    570a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    570e:	781a      	ldrb	r2, [r3, #0]
    5710:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5714:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5718:	781b      	ldrb	r3, [r3, #0]
    571a:	4413      	add	r3, r2
    571c:	b2da      	uxtb	r2, r3
    571e:	f24b 53be 	movw	r3, #46526	; 0xb5be
    5722:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5726:	701a      	strb	r2, [r3, #0]
    5728:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    572c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5730:	781b      	ldrb	r3, [r3, #0]
    5732:	3301      	adds	r3, #1
    5734:	b2da      	uxtb	r2, r3
    5736:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    573a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    573e:	701a      	strb	r2, [r3, #0]
    5740:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5744:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5748:	781b      	ldrb	r3, [r3, #0]
    574a:	2bff      	cmp	r3, #255	; 0xff
    574c:	d105      	bne.n	575a <send_boot+0xa96>
    574e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5752:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5756:	2200      	movs	r2, #0
    5758:	701a      	strb	r2, [r3, #0]
    575a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    575e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5762:	781b      	ldrb	r3, [r3, #0]
    5764:	461a      	mov	r2, r3
    5766:	f64b 23ac 	movw	r3, #47788	; 0xbaac
    576a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    576e:	7899      	ldrb	r1, [r3, #2]
    5770:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    5774:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5778:	5499      	strb	r1, [r3, r2]
    577a:	4b68      	ldr	r3, [pc, #416]	; (591c <send_boot+0xc58>)
    577c:	781a      	ldrb	r2, [r3, #0]
    577e:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5782:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5786:	781b      	ldrb	r3, [r3, #0]
    5788:	4413      	add	r3, r2
    578a:	b2da      	uxtb	r2, r3
    578c:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5790:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5794:	701a      	strb	r2, [r3, #0]
    5796:	f24b 53be 	movw	r3, #46526	; 0xb5be
    579a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    579e:	781a      	ldrb	r2, [r3, #0]
    57a0:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    57a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    57a8:	781b      	ldrb	r3, [r3, #0]
    57aa:	4413      	add	r3, r2
    57ac:	b2da      	uxtb	r2, r3
    57ae:	f24b 53be 	movw	r3, #46526	; 0xb5be
    57b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    57b6:	701a      	strb	r2, [r3, #0]
    57b8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    57bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    57c0:	781b      	ldrb	r3, [r3, #0]
    57c2:	3301      	adds	r3, #1
    57c4:	b2da      	uxtb	r2, r3
    57c6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    57ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    57ce:	701a      	strb	r2, [r3, #0]
    57d0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    57d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    57d8:	781b      	ldrb	r3, [r3, #0]
    57da:	2bff      	cmp	r3, #255	; 0xff
    57dc:	d105      	bne.n	57ea <send_boot+0xb26>
    57de:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    57e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    57e6:	2200      	movs	r2, #0
    57e8:	701a      	strb	r2, [r3, #0]
    57ea:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    57ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    57f2:	781b      	ldrb	r3, [r3, #0]
    57f4:	461a      	mov	r2, r3
    57f6:	f64b 23ac 	movw	r3, #47788	; 0xbaac
    57fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    57fe:	78d9      	ldrb	r1, [r3, #3]
    5800:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    5804:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5808:	5499      	strb	r1, [r3, r2]
    580a:	4b45      	ldr	r3, [pc, #276]	; (5920 <send_boot+0xc5c>)
    580c:	781a      	ldrb	r2, [r3, #0]
    580e:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5812:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5816:	781b      	ldrb	r3, [r3, #0]
    5818:	4413      	add	r3, r2
    581a:	b2da      	uxtb	r2, r3
    581c:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5820:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5824:	701a      	strb	r2, [r3, #0]
    5826:	f24b 53be 	movw	r3, #46526	; 0xb5be
    582a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    582e:	781a      	ldrb	r2, [r3, #0]
    5830:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5834:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5838:	781b      	ldrb	r3, [r3, #0]
    583a:	4413      	add	r3, r2
    583c:	b2da      	uxtb	r2, r3
    583e:	f24b 53be 	movw	r3, #46526	; 0xb5be
    5842:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5846:	701a      	strb	r2, [r3, #0]
    5848:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    584c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5850:	781b      	ldrb	r3, [r3, #0]
    5852:	3301      	adds	r3, #1
    5854:	b2da      	uxtb	r2, r3
    5856:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    585a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    585e:	701a      	strb	r2, [r3, #0]
    5860:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5864:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5868:	781b      	ldrb	r3, [r3, #0]
    586a:	2bff      	cmp	r3, #255	; 0xff
    586c:	d105      	bne.n	587a <send_boot+0xbb6>
    586e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5872:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5876:	2200      	movs	r2, #0
    5878:	701a      	strb	r2, [r3, #0]
    587a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    587e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5882:	781b      	ldrb	r3, [r3, #0]
    5884:	461a      	mov	r2, r3
    5886:	f240 130a 	movw	r3, #266	; 0x10a
    588a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    588e:	7819      	ldrb	r1, [r3, #0]
    5890:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    5894:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5898:	5499      	strb	r1, [r3, r2]
    589a:	f240 130a 	movw	r3, #266	; 0x10a
    589e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58a2:	781a      	ldrb	r2, [r3, #0]
    58a4:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    58a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    58ac:	781b      	ldrb	r3, [r3, #0]
    58ae:	4413      	add	r3, r2
    58b0:	b2da      	uxtb	r2, r3
    58b2:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    58b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    58ba:	701a      	strb	r2, [r3, #0]
    58bc:	f24b 53be 	movw	r3, #46526	; 0xb5be
    58c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    58c4:	781a      	ldrb	r2, [r3, #0]
    58c6:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    58ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    58ce:	781b      	ldrb	r3, [r3, #0]
    58d0:	4413      	add	r3, r2
    58d2:	b2da      	uxtb	r2, r3
    58d4:	f24b 53be 	movw	r3, #46526	; 0xb5be
    58d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    58dc:	701a      	strb	r2, [r3, #0]
    58de:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    58e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    58e6:	781b      	ldrb	r3, [r3, #0]
    58e8:	3301      	adds	r3, #1
    58ea:	b2da      	uxtb	r2, r3
    58ec:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    58f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    58f4:	701a      	strb	r2, [r3, #0]
    58f6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    58fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    58fe:	781b      	ldrb	r3, [r3, #0]
    5900:	2bff      	cmp	r3, #255	; 0xff
    5902:	d10f      	bne.n	5924 <send_boot+0xc60>
    5904:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5908:	f2c2 0304 	movt	r3, #8196	; 0x2004
    590c:	2200      	movs	r2, #0
    590e:	701a      	strb	r2, [r3, #0]
    5910:	e008      	b.n	5924 <send_boot+0xc60>
    5912:	bf00      	nop
    5914:	2004bab7 	.word	0x2004bab7
    5918:	2004baad 	.word	0x2004baad
    591c:	2004baae 	.word	0x2004baae
    5920:	2004baaf 	.word	0x2004baaf
    5924:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5928:	f2c2 0304 	movt	r3, #8196	; 0x2004
    592c:	781b      	ldrb	r3, [r3, #0]
    592e:	461a      	mov	r2, r3
    5930:	f240 130a 	movw	r3, #266	; 0x10a
    5934:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5938:	7859      	ldrb	r1, [r3, #1]
    593a:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    593e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5942:	5499      	strb	r1, [r3, r2]
    5944:	4bc5      	ldr	r3, [pc, #788]	; (5c5c <send_boot+0xf98>)
    5946:	781a      	ldrb	r2, [r3, #0]
    5948:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    594c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5950:	781b      	ldrb	r3, [r3, #0]
    5952:	4413      	add	r3, r2
    5954:	b2da      	uxtb	r2, r3
    5956:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    595a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    595e:	701a      	strb	r2, [r3, #0]
    5960:	f24b 53be 	movw	r3, #46526	; 0xb5be
    5964:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5968:	781a      	ldrb	r2, [r3, #0]
    596a:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    596e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5972:	781b      	ldrb	r3, [r3, #0]
    5974:	4413      	add	r3, r2
    5976:	b2da      	uxtb	r2, r3
    5978:	f24b 53be 	movw	r3, #46526	; 0xb5be
    597c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5980:	701a      	strb	r2, [r3, #0]
    5982:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5986:	f2c2 0304 	movt	r3, #8196	; 0x2004
    598a:	781b      	ldrb	r3, [r3, #0]
    598c:	3301      	adds	r3, #1
    598e:	b2da      	uxtb	r2, r3
    5990:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5994:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5998:	701a      	strb	r2, [r3, #0]
    599a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    599e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    59a2:	781b      	ldrb	r3, [r3, #0]
    59a4:	2bff      	cmp	r3, #255	; 0xff
    59a6:	d105      	bne.n	59b4 <send_boot+0xcf0>
    59a8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    59ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    59b0:	2200      	movs	r2, #0
    59b2:	701a      	strb	r2, [r3, #0]
    59b4:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    59b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    59bc:	781b      	ldrb	r3, [r3, #0]
    59be:	461a      	mov	r2, r3
    59c0:	f240 130c 	movw	r3, #268	; 0x10c
    59c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59c8:	7819      	ldrb	r1, [r3, #0]
    59ca:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    59ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    59d2:	5499      	strb	r1, [r3, r2]
    59d4:	f240 130c 	movw	r3, #268	; 0x10c
    59d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59dc:	781a      	ldrb	r2, [r3, #0]
    59de:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    59e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    59e6:	781b      	ldrb	r3, [r3, #0]
    59e8:	4413      	add	r3, r2
    59ea:	b2da      	uxtb	r2, r3
    59ec:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    59f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    59f4:	701a      	strb	r2, [r3, #0]
    59f6:	f24b 53be 	movw	r3, #46526	; 0xb5be
    59fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    59fe:	781a      	ldrb	r2, [r3, #0]
    5a00:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5a04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5a08:	781b      	ldrb	r3, [r3, #0]
    5a0a:	4413      	add	r3, r2
    5a0c:	b2da      	uxtb	r2, r3
    5a0e:	f24b 53be 	movw	r3, #46526	; 0xb5be
    5a12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5a16:	701a      	strb	r2, [r3, #0]
    5a18:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5a1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5a20:	781b      	ldrb	r3, [r3, #0]
    5a22:	3301      	adds	r3, #1
    5a24:	b2da      	uxtb	r2, r3
    5a26:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5a2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5a2e:	701a      	strb	r2, [r3, #0]
    5a30:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5a34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5a38:	781b      	ldrb	r3, [r3, #0]
    5a3a:	2bff      	cmp	r3, #255	; 0xff
    5a3c:	d105      	bne.n	5a4a <send_boot+0xd86>
    5a3e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5a42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5a46:	2200      	movs	r2, #0
    5a48:	701a      	strb	r2, [r3, #0]
    5a4a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5a4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5a52:	781b      	ldrb	r3, [r3, #0]
    5a54:	461a      	mov	r2, r3
    5a56:	f240 130c 	movw	r3, #268	; 0x10c
    5a5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a5e:	7859      	ldrb	r1, [r3, #1]
    5a60:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    5a64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5a68:	5499      	strb	r1, [r3, r2]
    5a6a:	4b7d      	ldr	r3, [pc, #500]	; (5c60 <send_boot+0xf9c>)
    5a6c:	781a      	ldrb	r2, [r3, #0]
    5a6e:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5a72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5a76:	781b      	ldrb	r3, [r3, #0]
    5a78:	4413      	add	r3, r2
    5a7a:	b2da      	uxtb	r2, r3
    5a7c:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5a80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5a84:	701a      	strb	r2, [r3, #0]
    5a86:	f24b 53be 	movw	r3, #46526	; 0xb5be
    5a8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5a8e:	781a      	ldrb	r2, [r3, #0]
    5a90:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5a94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5a98:	781b      	ldrb	r3, [r3, #0]
    5a9a:	4413      	add	r3, r2
    5a9c:	b2da      	uxtb	r2, r3
    5a9e:	f24b 53be 	movw	r3, #46526	; 0xb5be
    5aa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5aa6:	701a      	strb	r2, [r3, #0]
    5aa8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5aac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ab0:	781b      	ldrb	r3, [r3, #0]
    5ab2:	3301      	adds	r3, #1
    5ab4:	b2da      	uxtb	r2, r3
    5ab6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5aba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5abe:	701a      	strb	r2, [r3, #0]
    5ac0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5ac4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ac8:	781b      	ldrb	r3, [r3, #0]
    5aca:	2bff      	cmp	r3, #255	; 0xff
    5acc:	d105      	bne.n	5ada <send_boot+0xe16>
    5ace:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5ad2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ad6:	2200      	movs	r2, #0
    5ad8:	701a      	strb	r2, [r3, #0]
    5ada:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5ade:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ae2:	781b      	ldrb	r3, [r3, #0]
    5ae4:	461a      	mov	r2, r3
    5ae6:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5aea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5aee:	7819      	ldrb	r1, [r3, #0]
    5af0:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    5af4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5af8:	5499      	strb	r1, [r3, r2]
    5afa:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5afe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5b02:	781b      	ldrb	r3, [r3, #0]
    5b04:	3301      	adds	r3, #1
    5b06:	b2da      	uxtb	r2, r3
    5b08:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5b0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5b10:	701a      	strb	r2, [r3, #0]
    5b12:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5b16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5b1a:	781b      	ldrb	r3, [r3, #0]
    5b1c:	2bff      	cmp	r3, #255	; 0xff
    5b1e:	d105      	bne.n	5b2c <send_boot+0xe68>
    5b20:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5b24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5b28:	2200      	movs	r2, #0
    5b2a:	701a      	strb	r2, [r3, #0]
    5b2c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5b30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5b34:	781b      	ldrb	r3, [r3, #0]
    5b36:	461a      	mov	r2, r3
    5b38:	f24b 53be 	movw	r3, #46526	; 0xb5be
    5b3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5b40:	7819      	ldrb	r1, [r3, #0]
    5b42:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    5b46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5b4a:	5499      	strb	r1, [r3, r2]
    5b4c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5b50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5b54:	781b      	ldrb	r3, [r3, #0]
    5b56:	3301      	adds	r3, #1
    5b58:	b2da      	uxtb	r2, r3
    5b5a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5b5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5b62:	701a      	strb	r2, [r3, #0]
    5b64:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5b68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5b6c:	781b      	ldrb	r3, [r3, #0]
    5b6e:	2bff      	cmp	r3, #255	; 0xff
    5b70:	d105      	bne.n	5b7e <send_boot+0xeba>
    5b72:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5b76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5b7a:	2200      	movs	r2, #0
    5b7c:	701a      	strb	r2, [r3, #0]
    5b7e:	f248 0339 	movw	r3, #32825	; 0x8039
    5b82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b86:	781b      	ldrb	r3, [r3, #0]
    5b88:	b2db      	uxtb	r3, r3
    5b8a:	f003 0310 	and.w	r3, r3, #16
    5b8e:	2b00      	cmp	r3, #0
    5b90:	d15a      	bne.n	5c48 <send_boot+0xf84>
    5b92:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    5b96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5b9a:	781b      	ldrb	r3, [r3, #0]
    5b9c:	b2db      	uxtb	r3, r3
    5b9e:	461a      	mov	r2, r3
    5ba0:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    5ba4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ba8:	5c9a      	ldrb	r2, [r3, r2]
    5baa:	f24b 53bb 	movw	r3, #46523	; 0xb5bb
    5bae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5bb2:	701a      	strb	r2, [r3, #0]
    5bb4:	f24b 53bc 	movw	r3, #46524	; 0xb5bc
    5bb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5bbc:	2200      	movs	r2, #0
    5bbe:	701a      	strb	r2, [r3, #0]
    5bc0:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    5bc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5bc8:	781b      	ldrb	r3, [r3, #0]
    5bca:	b2db      	uxtb	r3, r3
    5bcc:	3301      	adds	r3, #1
    5bce:	b2da      	uxtb	r2, r3
    5bd0:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    5bd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5bd8:	701a      	strb	r2, [r3, #0]
    5bda:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    5bde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5be2:	781b      	ldrb	r3, [r3, #0]
    5be4:	b2db      	uxtb	r3, r3
    5be6:	2bff      	cmp	r3, #255	; 0xff
    5be8:	d105      	bne.n	5bf6 <send_boot+0xf32>
    5bea:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    5bee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5bf2:	2200      	movs	r2, #0
    5bf4:	701a      	strb	r2, [r3, #0]
    5bf6:	f248 0338 	movw	r3, #32824	; 0x8038
    5bfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5bfe:	f248 0238 	movw	r2, #32824	; 0x8038
    5c02:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5c06:	7812      	ldrb	r2, [r2, #0]
    5c08:	b2d2      	uxtb	r2, r2
    5c0a:	f042 0201 	orr.w	r2, r2, #1
    5c0e:	b2d2      	uxtb	r2, r2
    5c10:	701a      	strb	r2, [r3, #0]
    5c12:	f248 0339 	movw	r3, #32825	; 0x8039
    5c16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c1a:	f248 0239 	movw	r2, #32825	; 0x8039
    5c1e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5c22:	7812      	ldrb	r2, [r2, #0]
    5c24:	b2d2      	uxtb	r2, r2
    5c26:	f042 0210 	orr.w	r2, r2, #16
    5c2a:	b2d2      	uxtb	r2, r2
    5c2c:	701a      	strb	r2, [r3, #0]
    5c2e:	e00b      	b.n	5c48 <send_boot+0xf84>
    5c30:	f24b 43b8 	movw	r3, #46264	; 0xb4b8
    5c34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5c38:	781b      	ldrb	r3, [r3, #0]
    5c3a:	3301      	adds	r3, #1
    5c3c:	b2da      	uxtb	r2, r3
    5c3e:	f24b 43b8 	movw	r3, #46264	; 0xb4b8
    5c42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5c46:	701a      	strb	r2, [r3, #0]
      boot = FALSE;
    5c48:	f240 1305 	movw	r3, #261	; 0x105
    5c4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c50:	2200      	movs	r2, #0
    5c52:	701a      	strb	r2, [r3, #0]
  }
}
    5c54:	46bd      	mov	sp, r7
    5c56:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c5a:	4770      	bx	lr
    5c5c:	2000010b 	.word	0x2000010b
    5c60:	2000010d 	.word	0x2000010d

00005c64 <send_attitude>:
void send_attitude(void){ //499ms
    5c64:	b480      	push	{r7}
    5c66:	af00      	add	r7, sp, #0
    // add by wanbo
  //if(!boot)
  {
    count++;
    5c68:	f24b 43b1 	movw	r3, #46257	; 0xb4b1
    5c6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5c70:	781b      	ldrb	r3, [r3, #0]
    5c72:	3301      	adds	r3, #1
    5c74:	b2da      	uxtb	r2, r3
    5c76:	f24b 43b1 	movw	r3, #46257	; 0xb4b1
    5c7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5c7e:	701a      	strb	r2, [r3, #0]
    if (count == 250) count = 0;
    5c80:	f24b 43b1 	movw	r3, #46257	; 0xb4b1
    5c84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5c88:	781b      	ldrb	r3, [r3, #0]
    5c8a:	2bfa      	cmp	r3, #250	; 0xfa
    5c8c:	d105      	bne.n	5c9a <send_attitude+0x36>
    5c8e:	f24b 43b1 	movw	r3, #46257	; 0xb4b1
    5c92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5c96:	2200      	movs	r2, #0
    5c98:	701a      	strb	r2, [r3, #0]
    if (count % 5 == 0) 
    5c9a:	f24b 43b1 	movw	r3, #46257	; 0xb4b1
    5c9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ca2:	781a      	ldrb	r2, [r3, #0]
    5ca4:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    5ca8:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    5cac:	fba3 1302 	umull	r1, r3, r3, r2
    5cb0:	0899      	lsrs	r1, r3, #2
    5cb2:	460b      	mov	r3, r1
    5cb4:	009b      	lsls	r3, r3, #2
    5cb6:	440b      	add	r3, r1
    5cb8:	1ad3      	subs	r3, r2, r3
    5cba:	b2db      	uxtb	r3, r3
    5cbc:	2b00      	cmp	r3, #0
    5cbe:	f040 84c1 	bne.w	6644 <send_attitude+0x9e0>
       PERIODIC_SEND_ATTITUDE(); 
    5cc2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5cc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5cca:	781a      	ldrb	r2, [r3, #0]
    5ccc:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    5cd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5cd4:	781b      	ldrb	r3, [r3, #0]
    5cd6:	b2db      	uxtb	r3, r3
    5cd8:	429a      	cmp	r2, r3
    5cda:	d313      	bcc.n	5d04 <send_attitude+0xa0>
    5cdc:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    5ce0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ce4:	781b      	ldrb	r3, [r3, #0]
    5ce6:	b2db      	uxtb	r3, r3
    5ce8:	461a      	mov	r2, r3
    5cea:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5cee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5cf2:	781b      	ldrb	r3, [r3, #0]
    5cf4:	1ad3      	subs	r3, r2, r3
    5cf6:	33ff      	adds	r3, #255	; 0xff
    5cf8:	2b10      	cmp	r3, #16
    5cfa:	bfd4      	ite	le
    5cfc:	2300      	movle	r3, #0
    5cfe:	2301      	movgt	r3, #1
    5d00:	b2db      	uxtb	r3, r3
    5d02:	e011      	b.n	5d28 <send_attitude+0xc4>
    5d04:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    5d08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d0c:	781b      	ldrb	r3, [r3, #0]
    5d0e:	b2db      	uxtb	r3, r3
    5d10:	461a      	mov	r2, r3
    5d12:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5d16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d1a:	781b      	ldrb	r3, [r3, #0]
    5d1c:	1ad3      	subs	r3, r2, r3
    5d1e:	2b10      	cmp	r3, #16
    5d20:	bfd4      	ite	le
    5d22:	2300      	movle	r3, #0
    5d24:	2301      	movgt	r3, #1
    5d26:	b2db      	uxtb	r3, r3
    5d28:	2b00      	cmp	r3, #0
    5d2a:	f000 847f 	beq.w	662c <send_attitude+0x9c8>
    5d2e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5d32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d36:	781b      	ldrb	r3, [r3, #0]
    5d38:	461a      	mov	r2, r3
    5d3a:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    5d3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d42:	2105      	movs	r1, #5
    5d44:	5499      	strb	r1, [r3, r2]
    5d46:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5d4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d4e:	781b      	ldrb	r3, [r3, #0]
    5d50:	3301      	adds	r3, #1
    5d52:	b2da      	uxtb	r2, r3
    5d54:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5d58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d5c:	701a      	strb	r2, [r3, #0]
    5d5e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5d62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d66:	781b      	ldrb	r3, [r3, #0]
    5d68:	2bff      	cmp	r3, #255	; 0xff
    5d6a:	d105      	bne.n	5d78 <send_attitude+0x114>
    5d6c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5d70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d74:	2200      	movs	r2, #0
    5d76:	701a      	strb	r2, [r3, #0]
    5d78:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5d7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d80:	781b      	ldrb	r3, [r3, #0]
    5d82:	461a      	mov	r2, r3
    5d84:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    5d88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d8c:	2106      	movs	r1, #6
    5d8e:	5499      	strb	r1, [r3, r2]
    5d90:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5d94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d98:	781b      	ldrb	r3, [r3, #0]
    5d9a:	3301      	adds	r3, #1
    5d9c:	b2da      	uxtb	r2, r3
    5d9e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5da2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5da6:	701a      	strb	r2, [r3, #0]
    5da8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5dac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5db0:	781b      	ldrb	r3, [r3, #0]
    5db2:	2bff      	cmp	r3, #255	; 0xff
    5db4:	d105      	bne.n	5dc2 <send_attitude+0x15e>
    5db6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5dba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5dbe:	2200      	movs	r2, #0
    5dc0:	701a      	strb	r2, [r3, #0]
    5dc2:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5dc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5dca:	2206      	movs	r2, #6
    5dcc:	701a      	strb	r2, [r3, #0]
    5dce:	f24b 53be 	movw	r3, #46526	; 0xb5be
    5dd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5dd6:	2206      	movs	r2, #6
    5dd8:	701a      	strb	r2, [r3, #0]
    5dda:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5dde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5de2:	781b      	ldrb	r3, [r3, #0]
    5de4:	461a      	mov	r2, r3
    5de6:	f64b 2378 	movw	r3, #47736	; 0xba78
    5dea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5dee:	7819      	ldrb	r1, [r3, #0]
    5df0:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    5df4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5df8:	5499      	strb	r1, [r3, r2]
    5dfa:	f64b 2378 	movw	r3, #47736	; 0xba78
    5dfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e02:	781a      	ldrb	r2, [r3, #0]
    5e04:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5e08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e0c:	781b      	ldrb	r3, [r3, #0]
    5e0e:	4413      	add	r3, r2
    5e10:	b2da      	uxtb	r2, r3
    5e12:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5e16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e1a:	701a      	strb	r2, [r3, #0]
    5e1c:	f24b 53be 	movw	r3, #46526	; 0xb5be
    5e20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e24:	781a      	ldrb	r2, [r3, #0]
    5e26:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5e2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e2e:	781b      	ldrb	r3, [r3, #0]
    5e30:	4413      	add	r3, r2
    5e32:	b2da      	uxtb	r2, r3
    5e34:	f24b 53be 	movw	r3, #46526	; 0xb5be
    5e38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e3c:	701a      	strb	r2, [r3, #0]
    5e3e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5e42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e46:	781b      	ldrb	r3, [r3, #0]
    5e48:	3301      	adds	r3, #1
    5e4a:	b2da      	uxtb	r2, r3
    5e4c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5e50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e54:	701a      	strb	r2, [r3, #0]
    5e56:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5e5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e5e:	781b      	ldrb	r3, [r3, #0]
    5e60:	2bff      	cmp	r3, #255	; 0xff
    5e62:	d105      	bne.n	5e70 <send_attitude+0x20c>
    5e64:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5e68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e6c:	2200      	movs	r2, #0
    5e6e:	701a      	strb	r2, [r3, #0]
    5e70:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5e74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e78:	781b      	ldrb	r3, [r3, #0]
    5e7a:	461a      	mov	r2, r3
    5e7c:	f64b 2378 	movw	r3, #47736	; 0xba78
    5e80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e84:	7859      	ldrb	r1, [r3, #1]
    5e86:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    5e8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e8e:	5499      	strb	r1, [r3, r2]
    5e90:	4bd1      	ldr	r3, [pc, #836]	; (61d8 <send_attitude+0x574>)
    5e92:	781a      	ldrb	r2, [r3, #0]
    5e94:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5e98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e9c:	781b      	ldrb	r3, [r3, #0]
    5e9e:	4413      	add	r3, r2
    5ea0:	b2da      	uxtb	r2, r3
    5ea2:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5ea6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5eaa:	701a      	strb	r2, [r3, #0]
    5eac:	f24b 53be 	movw	r3, #46526	; 0xb5be
    5eb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5eb4:	781a      	ldrb	r2, [r3, #0]
    5eb6:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5eba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ebe:	781b      	ldrb	r3, [r3, #0]
    5ec0:	4413      	add	r3, r2
    5ec2:	b2da      	uxtb	r2, r3
    5ec4:	f24b 53be 	movw	r3, #46526	; 0xb5be
    5ec8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ecc:	701a      	strb	r2, [r3, #0]
    5ece:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5ed2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ed6:	781b      	ldrb	r3, [r3, #0]
    5ed8:	3301      	adds	r3, #1
    5eda:	b2da      	uxtb	r2, r3
    5edc:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5ee0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ee4:	701a      	strb	r2, [r3, #0]
    5ee6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5eea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5eee:	781b      	ldrb	r3, [r3, #0]
    5ef0:	2bff      	cmp	r3, #255	; 0xff
    5ef2:	d105      	bne.n	5f00 <send_attitude+0x29c>
    5ef4:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5ef8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5efc:	2200      	movs	r2, #0
    5efe:	701a      	strb	r2, [r3, #0]
    5f00:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5f04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f08:	781b      	ldrb	r3, [r3, #0]
    5f0a:	461a      	mov	r2, r3
    5f0c:	f64b 2378 	movw	r3, #47736	; 0xba78
    5f10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f14:	7899      	ldrb	r1, [r3, #2]
    5f16:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    5f1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f1e:	5499      	strb	r1, [r3, r2]
    5f20:	4bae      	ldr	r3, [pc, #696]	; (61dc <send_attitude+0x578>)
    5f22:	781a      	ldrb	r2, [r3, #0]
    5f24:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5f28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f2c:	781b      	ldrb	r3, [r3, #0]
    5f2e:	4413      	add	r3, r2
    5f30:	b2da      	uxtb	r2, r3
    5f32:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5f36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f3a:	701a      	strb	r2, [r3, #0]
    5f3c:	f24b 53be 	movw	r3, #46526	; 0xb5be
    5f40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f44:	781a      	ldrb	r2, [r3, #0]
    5f46:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5f4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f4e:	781b      	ldrb	r3, [r3, #0]
    5f50:	4413      	add	r3, r2
    5f52:	b2da      	uxtb	r2, r3
    5f54:	f24b 53be 	movw	r3, #46526	; 0xb5be
    5f58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f5c:	701a      	strb	r2, [r3, #0]
    5f5e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5f62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f66:	781b      	ldrb	r3, [r3, #0]
    5f68:	3301      	adds	r3, #1
    5f6a:	b2da      	uxtb	r2, r3
    5f6c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5f70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f74:	701a      	strb	r2, [r3, #0]
    5f76:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5f7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f7e:	781b      	ldrb	r3, [r3, #0]
    5f80:	2bff      	cmp	r3, #255	; 0xff
    5f82:	d105      	bne.n	5f90 <send_attitude+0x32c>
    5f84:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5f88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f8c:	2200      	movs	r2, #0
    5f8e:	701a      	strb	r2, [r3, #0]
    5f90:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5f94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f98:	781b      	ldrb	r3, [r3, #0]
    5f9a:	461a      	mov	r2, r3
    5f9c:	f64b 2378 	movw	r3, #47736	; 0xba78
    5fa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5fa4:	78d9      	ldrb	r1, [r3, #3]
    5fa6:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    5faa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5fae:	5499      	strb	r1, [r3, r2]
    5fb0:	4b8b      	ldr	r3, [pc, #556]	; (61e0 <send_attitude+0x57c>)
    5fb2:	781a      	ldrb	r2, [r3, #0]
    5fb4:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5fb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5fbc:	781b      	ldrb	r3, [r3, #0]
    5fbe:	4413      	add	r3, r2
    5fc0:	b2da      	uxtb	r2, r3
    5fc2:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5fc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5fca:	701a      	strb	r2, [r3, #0]
    5fcc:	f24b 53be 	movw	r3, #46526	; 0xb5be
    5fd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5fd4:	781a      	ldrb	r2, [r3, #0]
    5fd6:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    5fda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5fde:	781b      	ldrb	r3, [r3, #0]
    5fe0:	4413      	add	r3, r2
    5fe2:	b2da      	uxtb	r2, r3
    5fe4:	f24b 53be 	movw	r3, #46526	; 0xb5be
    5fe8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5fec:	701a      	strb	r2, [r3, #0]
    5fee:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5ff2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ff6:	781b      	ldrb	r3, [r3, #0]
    5ff8:	3301      	adds	r3, #1
    5ffa:	b2da      	uxtb	r2, r3
    5ffc:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6000:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6004:	701a      	strb	r2, [r3, #0]
    6006:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    600a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    600e:	781b      	ldrb	r3, [r3, #0]
    6010:	2bff      	cmp	r3, #255	; 0xff
    6012:	d105      	bne.n	6020 <send_attitude+0x3bc>
    6014:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6018:	f2c2 0304 	movt	r3, #8196	; 0x2004
    601c:	2200      	movs	r2, #0
    601e:	701a      	strb	r2, [r3, #0]
    6020:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6024:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6028:	781b      	ldrb	r3, [r3, #0]
    602a:	461a      	mov	r2, r3
    602c:	f64b 237c 	movw	r3, #47740	; 0xba7c
    6030:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6034:	7819      	ldrb	r1, [r3, #0]
    6036:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    603a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    603e:	5499      	strb	r1, [r3, r2]
    6040:	f64b 237c 	movw	r3, #47740	; 0xba7c
    6044:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6048:	781a      	ldrb	r2, [r3, #0]
    604a:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    604e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6052:	781b      	ldrb	r3, [r3, #0]
    6054:	4413      	add	r3, r2
    6056:	b2da      	uxtb	r2, r3
    6058:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    605c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6060:	701a      	strb	r2, [r3, #0]
    6062:	f24b 53be 	movw	r3, #46526	; 0xb5be
    6066:	f2c2 0304 	movt	r3, #8196	; 0x2004
    606a:	781a      	ldrb	r2, [r3, #0]
    606c:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    6070:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6074:	781b      	ldrb	r3, [r3, #0]
    6076:	4413      	add	r3, r2
    6078:	b2da      	uxtb	r2, r3
    607a:	f24b 53be 	movw	r3, #46526	; 0xb5be
    607e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6082:	701a      	strb	r2, [r3, #0]
    6084:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6088:	f2c2 0304 	movt	r3, #8196	; 0x2004
    608c:	781b      	ldrb	r3, [r3, #0]
    608e:	3301      	adds	r3, #1
    6090:	b2da      	uxtb	r2, r3
    6092:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6096:	f2c2 0304 	movt	r3, #8196	; 0x2004
    609a:	701a      	strb	r2, [r3, #0]
    609c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    60a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60a4:	781b      	ldrb	r3, [r3, #0]
    60a6:	2bff      	cmp	r3, #255	; 0xff
    60a8:	d105      	bne.n	60b6 <send_attitude+0x452>
    60aa:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    60ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60b2:	2200      	movs	r2, #0
    60b4:	701a      	strb	r2, [r3, #0]
    60b6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    60ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60be:	781b      	ldrb	r3, [r3, #0]
    60c0:	461a      	mov	r2, r3
    60c2:	f64b 237c 	movw	r3, #47740	; 0xba7c
    60c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60ca:	7859      	ldrb	r1, [r3, #1]
    60cc:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    60d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60d4:	5499      	strb	r1, [r3, r2]
    60d6:	4b43      	ldr	r3, [pc, #268]	; (61e4 <send_attitude+0x580>)
    60d8:	781a      	ldrb	r2, [r3, #0]
    60da:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    60de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60e2:	781b      	ldrb	r3, [r3, #0]
    60e4:	4413      	add	r3, r2
    60e6:	b2da      	uxtb	r2, r3
    60e8:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    60ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60f0:	701a      	strb	r2, [r3, #0]
    60f2:	f24b 53be 	movw	r3, #46526	; 0xb5be
    60f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60fa:	781a      	ldrb	r2, [r3, #0]
    60fc:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    6100:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6104:	781b      	ldrb	r3, [r3, #0]
    6106:	4413      	add	r3, r2
    6108:	b2da      	uxtb	r2, r3
    610a:	f24b 53be 	movw	r3, #46526	; 0xb5be
    610e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6112:	701a      	strb	r2, [r3, #0]
    6114:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6118:	f2c2 0304 	movt	r3, #8196	; 0x2004
    611c:	781b      	ldrb	r3, [r3, #0]
    611e:	3301      	adds	r3, #1
    6120:	b2da      	uxtb	r2, r3
    6122:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6126:	f2c2 0304 	movt	r3, #8196	; 0x2004
    612a:	701a      	strb	r2, [r3, #0]
    612c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6130:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6134:	781b      	ldrb	r3, [r3, #0]
    6136:	2bff      	cmp	r3, #255	; 0xff
    6138:	d105      	bne.n	6146 <send_attitude+0x4e2>
    613a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    613e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6142:	2200      	movs	r2, #0
    6144:	701a      	strb	r2, [r3, #0]
    6146:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    614a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    614e:	781b      	ldrb	r3, [r3, #0]
    6150:	461a      	mov	r2, r3
    6152:	f64b 237c 	movw	r3, #47740	; 0xba7c
    6156:	f2c2 0304 	movt	r3, #8196	; 0x2004
    615a:	7899      	ldrb	r1, [r3, #2]
    615c:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    6160:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6164:	5499      	strb	r1, [r3, r2]
    6166:	4b20      	ldr	r3, [pc, #128]	; (61e8 <send_attitude+0x584>)
    6168:	781a      	ldrb	r2, [r3, #0]
    616a:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    616e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6172:	781b      	ldrb	r3, [r3, #0]
    6174:	4413      	add	r3, r2
    6176:	b2da      	uxtb	r2, r3
    6178:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    617c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6180:	701a      	strb	r2, [r3, #0]
    6182:	f24b 53be 	movw	r3, #46526	; 0xb5be
    6186:	f2c2 0304 	movt	r3, #8196	; 0x2004
    618a:	781a      	ldrb	r2, [r3, #0]
    618c:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    6190:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6194:	781b      	ldrb	r3, [r3, #0]
    6196:	4413      	add	r3, r2
    6198:	b2da      	uxtb	r2, r3
    619a:	f24b 53be 	movw	r3, #46526	; 0xb5be
    619e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61a2:	701a      	strb	r2, [r3, #0]
    61a4:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    61a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61ac:	781b      	ldrb	r3, [r3, #0]
    61ae:	3301      	adds	r3, #1
    61b0:	b2da      	uxtb	r2, r3
    61b2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    61b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61ba:	701a      	strb	r2, [r3, #0]
    61bc:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    61c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61c4:	781b      	ldrb	r3, [r3, #0]
    61c6:	2bff      	cmp	r3, #255	; 0xff
    61c8:	d110      	bne.n	61ec <send_attitude+0x588>
    61ca:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    61ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61d2:	2200      	movs	r2, #0
    61d4:	701a      	strb	r2, [r3, #0]
    61d6:	e009      	b.n	61ec <send_attitude+0x588>
    61d8:	2004ba79 	.word	0x2004ba79
    61dc:	2004ba7a 	.word	0x2004ba7a
    61e0:	2004ba7b 	.word	0x2004ba7b
    61e4:	2004ba7d 	.word	0x2004ba7d
    61e8:	2004ba7e 	.word	0x2004ba7e
    61ec:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    61f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61f4:	781b      	ldrb	r3, [r3, #0]
    61f6:	461a      	mov	r2, r3
    61f8:	f64b 237c 	movw	r3, #47740	; 0xba7c
    61fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6200:	78d9      	ldrb	r1, [r3, #3]
    6202:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    6206:	f2c2 0304 	movt	r3, #8196	; 0x2004
    620a:	5499      	strb	r1, [r3, r2]
    620c:	4bc2      	ldr	r3, [pc, #776]	; (6518 <send_attitude+0x8b4>)
    620e:	781a      	ldrb	r2, [r3, #0]
    6210:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    6214:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6218:	781b      	ldrb	r3, [r3, #0]
    621a:	4413      	add	r3, r2
    621c:	b2da      	uxtb	r2, r3
    621e:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    6222:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6226:	701a      	strb	r2, [r3, #0]
    6228:	f24b 53be 	movw	r3, #46526	; 0xb5be
    622c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6230:	781a      	ldrb	r2, [r3, #0]
    6232:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    6236:	f2c2 0304 	movt	r3, #8196	; 0x2004
    623a:	781b      	ldrb	r3, [r3, #0]
    623c:	4413      	add	r3, r2
    623e:	b2da      	uxtb	r2, r3
    6240:	f24b 53be 	movw	r3, #46526	; 0xb5be
    6244:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6248:	701a      	strb	r2, [r3, #0]
    624a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    624e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6252:	781b      	ldrb	r3, [r3, #0]
    6254:	3301      	adds	r3, #1
    6256:	b2da      	uxtb	r2, r3
    6258:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    625c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6260:	701a      	strb	r2, [r3, #0]
    6262:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6266:	f2c2 0304 	movt	r3, #8196	; 0x2004
    626a:	781b      	ldrb	r3, [r3, #0]
    626c:	2bff      	cmp	r3, #255	; 0xff
    626e:	d105      	bne.n	627c <send_attitude+0x618>
    6270:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6274:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6278:	2200      	movs	r2, #0
    627a:	701a      	strb	r2, [r3, #0]
    627c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6280:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6284:	781b      	ldrb	r3, [r3, #0]
    6286:	461a      	mov	r2, r3
    6288:	f64b 2380 	movw	r3, #47744	; 0xba80
    628c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6290:	7819      	ldrb	r1, [r3, #0]
    6292:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    6296:	f2c2 0304 	movt	r3, #8196	; 0x2004
    629a:	5499      	strb	r1, [r3, r2]
    629c:	f64b 2380 	movw	r3, #47744	; 0xba80
    62a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62a4:	781a      	ldrb	r2, [r3, #0]
    62a6:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    62aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62ae:	781b      	ldrb	r3, [r3, #0]
    62b0:	4413      	add	r3, r2
    62b2:	b2da      	uxtb	r2, r3
    62b4:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    62b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62bc:	701a      	strb	r2, [r3, #0]
    62be:	f24b 53be 	movw	r3, #46526	; 0xb5be
    62c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62c6:	781a      	ldrb	r2, [r3, #0]
    62c8:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    62cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62d0:	781b      	ldrb	r3, [r3, #0]
    62d2:	4413      	add	r3, r2
    62d4:	b2da      	uxtb	r2, r3
    62d6:	f24b 53be 	movw	r3, #46526	; 0xb5be
    62da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62de:	701a      	strb	r2, [r3, #0]
    62e0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    62e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62e8:	781b      	ldrb	r3, [r3, #0]
    62ea:	3301      	adds	r3, #1
    62ec:	b2da      	uxtb	r2, r3
    62ee:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    62f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62f6:	701a      	strb	r2, [r3, #0]
    62f8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    62fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6300:	781b      	ldrb	r3, [r3, #0]
    6302:	2bff      	cmp	r3, #255	; 0xff
    6304:	d105      	bne.n	6312 <send_attitude+0x6ae>
    6306:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    630a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    630e:	2200      	movs	r2, #0
    6310:	701a      	strb	r2, [r3, #0]
    6312:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6316:	f2c2 0304 	movt	r3, #8196	; 0x2004
    631a:	781b      	ldrb	r3, [r3, #0]
    631c:	461a      	mov	r2, r3
    631e:	f64b 2380 	movw	r3, #47744	; 0xba80
    6322:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6326:	7859      	ldrb	r1, [r3, #1]
    6328:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    632c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6330:	5499      	strb	r1, [r3, r2]
    6332:	4b7a      	ldr	r3, [pc, #488]	; (651c <send_attitude+0x8b8>)
    6334:	781a      	ldrb	r2, [r3, #0]
    6336:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    633a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    633e:	781b      	ldrb	r3, [r3, #0]
    6340:	4413      	add	r3, r2
    6342:	b2da      	uxtb	r2, r3
    6344:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    6348:	f2c2 0304 	movt	r3, #8196	; 0x2004
    634c:	701a      	strb	r2, [r3, #0]
    634e:	f24b 53be 	movw	r3, #46526	; 0xb5be
    6352:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6356:	781a      	ldrb	r2, [r3, #0]
    6358:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    635c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6360:	781b      	ldrb	r3, [r3, #0]
    6362:	4413      	add	r3, r2
    6364:	b2da      	uxtb	r2, r3
    6366:	f24b 53be 	movw	r3, #46526	; 0xb5be
    636a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    636e:	701a      	strb	r2, [r3, #0]
    6370:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6374:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6378:	781b      	ldrb	r3, [r3, #0]
    637a:	3301      	adds	r3, #1
    637c:	b2da      	uxtb	r2, r3
    637e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6382:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6386:	701a      	strb	r2, [r3, #0]
    6388:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    638c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6390:	781b      	ldrb	r3, [r3, #0]
    6392:	2bff      	cmp	r3, #255	; 0xff
    6394:	d105      	bne.n	63a2 <send_attitude+0x73e>
    6396:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    639a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    639e:	2200      	movs	r2, #0
    63a0:	701a      	strb	r2, [r3, #0]
    63a2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    63a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63aa:	781b      	ldrb	r3, [r3, #0]
    63ac:	461a      	mov	r2, r3
    63ae:	f64b 2380 	movw	r3, #47744	; 0xba80
    63b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63b6:	7899      	ldrb	r1, [r3, #2]
    63b8:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    63bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63c0:	5499      	strb	r1, [r3, r2]
    63c2:	4b57      	ldr	r3, [pc, #348]	; (6520 <send_attitude+0x8bc>)
    63c4:	781a      	ldrb	r2, [r3, #0]
    63c6:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    63ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63ce:	781b      	ldrb	r3, [r3, #0]
    63d0:	4413      	add	r3, r2
    63d2:	b2da      	uxtb	r2, r3
    63d4:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    63d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63dc:	701a      	strb	r2, [r3, #0]
    63de:	f24b 53be 	movw	r3, #46526	; 0xb5be
    63e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63e6:	781a      	ldrb	r2, [r3, #0]
    63e8:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    63ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63f0:	781b      	ldrb	r3, [r3, #0]
    63f2:	4413      	add	r3, r2
    63f4:	b2da      	uxtb	r2, r3
    63f6:	f24b 53be 	movw	r3, #46526	; 0xb5be
    63fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63fe:	701a      	strb	r2, [r3, #0]
    6400:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6404:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6408:	781b      	ldrb	r3, [r3, #0]
    640a:	3301      	adds	r3, #1
    640c:	b2da      	uxtb	r2, r3
    640e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6412:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6416:	701a      	strb	r2, [r3, #0]
    6418:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    641c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6420:	781b      	ldrb	r3, [r3, #0]
    6422:	2bff      	cmp	r3, #255	; 0xff
    6424:	d105      	bne.n	6432 <send_attitude+0x7ce>
    6426:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    642a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    642e:	2200      	movs	r2, #0
    6430:	701a      	strb	r2, [r3, #0]
    6432:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6436:	f2c2 0304 	movt	r3, #8196	; 0x2004
    643a:	781b      	ldrb	r3, [r3, #0]
    643c:	461a      	mov	r2, r3
    643e:	f64b 2380 	movw	r3, #47744	; 0xba80
    6442:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6446:	78d9      	ldrb	r1, [r3, #3]
    6448:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    644c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6450:	5499      	strb	r1, [r3, r2]
    6452:	4b34      	ldr	r3, [pc, #208]	; (6524 <send_attitude+0x8c0>)
    6454:	781a      	ldrb	r2, [r3, #0]
    6456:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    645a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    645e:	781b      	ldrb	r3, [r3, #0]
    6460:	4413      	add	r3, r2
    6462:	b2da      	uxtb	r2, r3
    6464:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    6468:	f2c2 0304 	movt	r3, #8196	; 0x2004
    646c:	701a      	strb	r2, [r3, #0]
    646e:	f24b 53be 	movw	r3, #46526	; 0xb5be
    6472:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6476:	781a      	ldrb	r2, [r3, #0]
    6478:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    647c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6480:	781b      	ldrb	r3, [r3, #0]
    6482:	4413      	add	r3, r2
    6484:	b2da      	uxtb	r2, r3
    6486:	f24b 53be 	movw	r3, #46526	; 0xb5be
    648a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    648e:	701a      	strb	r2, [r3, #0]
    6490:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6494:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6498:	781b      	ldrb	r3, [r3, #0]
    649a:	3301      	adds	r3, #1
    649c:	b2da      	uxtb	r2, r3
    649e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    64a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64a6:	701a      	strb	r2, [r3, #0]
    64a8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    64ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64b0:	781b      	ldrb	r3, [r3, #0]
    64b2:	2bff      	cmp	r3, #255	; 0xff
    64b4:	d105      	bne.n	64c2 <send_attitude+0x85e>
    64b6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    64ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64be:	2200      	movs	r2, #0
    64c0:	701a      	strb	r2, [r3, #0]
    64c2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    64c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64ca:	781b      	ldrb	r3, [r3, #0]
    64cc:	461a      	mov	r2, r3
    64ce:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    64d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64d6:	7819      	ldrb	r1, [r3, #0]
    64d8:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    64dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64e0:	5499      	strb	r1, [r3, r2]
    64e2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    64e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64ea:	781b      	ldrb	r3, [r3, #0]
    64ec:	3301      	adds	r3, #1
    64ee:	b2da      	uxtb	r2, r3
    64f0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    64f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64f8:	701a      	strb	r2, [r3, #0]
    64fa:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    64fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6502:	781b      	ldrb	r3, [r3, #0]
    6504:	2bff      	cmp	r3, #255	; 0xff
    6506:	d10f      	bne.n	6528 <send_attitude+0x8c4>
    6508:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    650c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6510:	2200      	movs	r2, #0
    6512:	701a      	strb	r2, [r3, #0]
    6514:	e008      	b.n	6528 <send_attitude+0x8c4>
    6516:	bf00      	nop
    6518:	2004ba7f 	.word	0x2004ba7f
    651c:	2004ba81 	.word	0x2004ba81
    6520:	2004ba82 	.word	0x2004ba82
    6524:	2004ba83 	.word	0x2004ba83
    6528:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    652c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6530:	781b      	ldrb	r3, [r3, #0]
    6532:	461a      	mov	r2, r3
    6534:	f24b 53be 	movw	r3, #46526	; 0xb5be
    6538:	f2c2 0304 	movt	r3, #8196	; 0x2004
    653c:	7819      	ldrb	r1, [r3, #0]
    653e:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    6542:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6546:	5499      	strb	r1, [r3, r2]
    6548:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    654c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6550:	781b      	ldrb	r3, [r3, #0]
    6552:	3301      	adds	r3, #1
    6554:	b2da      	uxtb	r2, r3
    6556:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    655a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    655e:	701a      	strb	r2, [r3, #0]
    6560:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6564:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6568:	781b      	ldrb	r3, [r3, #0]
    656a:	2bff      	cmp	r3, #255	; 0xff
    656c:	d105      	bne.n	657a <send_attitude+0x916>
    656e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6572:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6576:	2200      	movs	r2, #0
    6578:	701a      	strb	r2, [r3, #0]
    657a:	f248 0339 	movw	r3, #32825	; 0x8039
    657e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6582:	781b      	ldrb	r3, [r3, #0]
    6584:	b2db      	uxtb	r3, r3
    6586:	f003 0310 	and.w	r3, r3, #16
    658a:	2b00      	cmp	r3, #0
    658c:	d15a      	bne.n	6644 <send_attitude+0x9e0>
    658e:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    6592:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6596:	781b      	ldrb	r3, [r3, #0]
    6598:	b2db      	uxtb	r3, r3
    659a:	461a      	mov	r2, r3
    659c:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    65a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65a4:	5c9a      	ldrb	r2, [r3, r2]
    65a6:	f24b 53bb 	movw	r3, #46523	; 0xb5bb
    65aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65ae:	701a      	strb	r2, [r3, #0]
    65b0:	f24b 53bc 	movw	r3, #46524	; 0xb5bc
    65b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65b8:	2200      	movs	r2, #0
    65ba:	701a      	strb	r2, [r3, #0]
    65bc:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    65c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65c4:	781b      	ldrb	r3, [r3, #0]
    65c6:	b2db      	uxtb	r3, r3
    65c8:	3301      	adds	r3, #1
    65ca:	b2da      	uxtb	r2, r3
    65cc:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    65d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65d4:	701a      	strb	r2, [r3, #0]
    65d6:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    65da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65de:	781b      	ldrb	r3, [r3, #0]
    65e0:	b2db      	uxtb	r3, r3
    65e2:	2bff      	cmp	r3, #255	; 0xff
    65e4:	d105      	bne.n	65f2 <send_attitude+0x98e>
    65e6:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    65ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65ee:	2200      	movs	r2, #0
    65f0:	701a      	strb	r2, [r3, #0]
    65f2:	f248 0338 	movw	r3, #32824	; 0x8038
    65f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65fa:	f248 0238 	movw	r2, #32824	; 0x8038
    65fe:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6602:	7812      	ldrb	r2, [r2, #0]
    6604:	b2d2      	uxtb	r2, r2
    6606:	f042 0201 	orr.w	r2, r2, #1
    660a:	b2d2      	uxtb	r2, r2
    660c:	701a      	strb	r2, [r3, #0]
    660e:	f248 0339 	movw	r3, #32825	; 0x8039
    6612:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6616:	f248 0239 	movw	r2, #32825	; 0x8039
    661a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    661e:	7812      	ldrb	r2, [r2, #0]
    6620:	b2d2      	uxtb	r2, r2
    6622:	f042 0210 	orr.w	r2, r2, #16
    6626:	b2d2      	uxtb	r2, r2
    6628:	701a      	strb	r2, [r3, #0]
    662a:	e00b      	b.n	6644 <send_attitude+0x9e0>
    662c:	f24b 43b8 	movw	r3, #46264	; 0xb4b8
    6630:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6634:	781b      	ldrb	r3, [r3, #0]
    6636:	3301      	adds	r3, #1
    6638:	b2da      	uxtb	r2, r3
    663a:	f24b 43b8 	movw	r3, #46264	; 0xb4b8
    663e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6642:	701a      	strb	r2, [r3, #0]
  }
}
    6644:	46bd      	mov	sp, r7
    6646:	f85d 7b04 	ldr.w	r7, [sp], #4
    664a:	4770      	bx	lr

0000664c <send_adc>:
  
void send_adc(void){  //500ms
    664c:	b480      	push	{r7}
    664e:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 5 == 1) PERIODIC_SEND_ADC();}
    6650:	f24b 43b1 	movw	r3, #46257	; 0xb4b1
    6654:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6658:	781a      	ldrb	r2, [r3, #0]
    665a:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    665e:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    6662:	fba3 1302 	umull	r1, r3, r3, r2
    6666:	0899      	lsrs	r1, r3, #2
    6668:	460b      	mov	r3, r1
    666a:	009b      	lsls	r3, r3, #2
    666c:	440b      	add	r3, r1
    666e:	1ad3      	subs	r3, r2, r3
    6670:	b2db      	uxtb	r3, r3
    6672:	2b01      	cmp	r3, #1
    6674:	f040 8269 	bne.w	6b4a <send_adc+0x4fe>
    6678:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    667c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6680:	781a      	ldrb	r2, [r3, #0]
    6682:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    6686:	f2c2 0304 	movt	r3, #8196	; 0x2004
    668a:	781b      	ldrb	r3, [r3, #0]
    668c:	b2db      	uxtb	r3, r3
    668e:	429a      	cmp	r2, r3
    6690:	d313      	bcc.n	66ba <send_adc+0x6e>
    6692:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    6696:	f2c2 0304 	movt	r3, #8196	; 0x2004
    669a:	781b      	ldrb	r3, [r3, #0]
    669c:	b2db      	uxtb	r3, r3
    669e:	461a      	mov	r2, r3
    66a0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    66a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66a8:	781b      	ldrb	r3, [r3, #0]
    66aa:	1ad3      	subs	r3, r2, r3
    66ac:	33ff      	adds	r3, #255	; 0xff
    66ae:	2b08      	cmp	r3, #8
    66b0:	bfd4      	ite	le
    66b2:	2300      	movle	r3, #0
    66b4:	2301      	movgt	r3, #1
    66b6:	b2db      	uxtb	r3, r3
    66b8:	e011      	b.n	66de <send_adc+0x92>
    66ba:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    66be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66c2:	781b      	ldrb	r3, [r3, #0]
    66c4:	b2db      	uxtb	r3, r3
    66c6:	461a      	mov	r2, r3
    66c8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    66cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66d0:	781b      	ldrb	r3, [r3, #0]
    66d2:	1ad3      	subs	r3, r2, r3
    66d4:	2b08      	cmp	r3, #8
    66d6:	bfd4      	ite	le
    66d8:	2300      	movle	r3, #0
    66da:	2301      	movgt	r3, #1
    66dc:	b2db      	uxtb	r3, r3
    66de:	2b00      	cmp	r3, #0
    66e0:	f000 8227 	beq.w	6b32 <send_adc+0x4e6>
    66e4:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    66e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66ec:	781b      	ldrb	r3, [r3, #0]
    66ee:	461a      	mov	r2, r3
    66f0:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    66f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66f8:	2105      	movs	r1, #5
    66fa:	5499      	strb	r1, [r3, r2]
    66fc:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6700:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6704:	781b      	ldrb	r3, [r3, #0]
    6706:	3301      	adds	r3, #1
    6708:	b2da      	uxtb	r2, r3
    670a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    670e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6712:	701a      	strb	r2, [r3, #0]
    6714:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6718:	f2c2 0304 	movt	r3, #8196	; 0x2004
    671c:	781b      	ldrb	r3, [r3, #0]
    671e:	2bff      	cmp	r3, #255	; 0xff
    6720:	d105      	bne.n	672e <send_adc+0xe2>
    6722:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6726:	f2c2 0304 	movt	r3, #8196	; 0x2004
    672a:	2200      	movs	r2, #0
    672c:	701a      	strb	r2, [r3, #0]
    672e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6732:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6736:	781b      	ldrb	r3, [r3, #0]
    6738:	461a      	mov	r2, r3
    673a:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    673e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6742:	2107      	movs	r1, #7
    6744:	5499      	strb	r1, [r3, r2]
    6746:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    674a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    674e:	781b      	ldrb	r3, [r3, #0]
    6750:	3301      	adds	r3, #1
    6752:	b2da      	uxtb	r2, r3
    6754:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6758:	f2c2 0304 	movt	r3, #8196	; 0x2004
    675c:	701a      	strb	r2, [r3, #0]
    675e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6762:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6766:	781b      	ldrb	r3, [r3, #0]
    6768:	2bff      	cmp	r3, #255	; 0xff
    676a:	d105      	bne.n	6778 <send_adc+0x12c>
    676c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6770:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6774:	2200      	movs	r2, #0
    6776:	701a      	strb	r2, [r3, #0]
    6778:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    677c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6780:	2207      	movs	r2, #7
    6782:	701a      	strb	r2, [r3, #0]
    6784:	f24b 53be 	movw	r3, #46526	; 0xb5be
    6788:	f2c2 0304 	movt	r3, #8196	; 0x2004
    678c:	2207      	movs	r2, #7
    678e:	701a      	strb	r2, [r3, #0]
    6790:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6794:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6798:	781b      	ldrb	r3, [r3, #0]
    679a:	461a      	mov	r2, r3
    679c:	f24b 7358 	movw	r3, #46936	; 0xb758
    67a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67a4:	7819      	ldrb	r1, [r3, #0]
    67a6:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    67aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67ae:	5499      	strb	r1, [r3, r2]
    67b0:	f24b 7358 	movw	r3, #46936	; 0xb758
    67b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67b8:	781a      	ldrb	r2, [r3, #0]
    67ba:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    67be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67c2:	781b      	ldrb	r3, [r3, #0]
    67c4:	4413      	add	r3, r2
    67c6:	b2da      	uxtb	r2, r3
    67c8:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    67cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67d0:	701a      	strb	r2, [r3, #0]
    67d2:	f24b 53be 	movw	r3, #46526	; 0xb5be
    67d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67da:	781a      	ldrb	r2, [r3, #0]
    67dc:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    67e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67e4:	781b      	ldrb	r3, [r3, #0]
    67e6:	4413      	add	r3, r2
    67e8:	b2da      	uxtb	r2, r3
    67ea:	f24b 53be 	movw	r3, #46526	; 0xb5be
    67ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67f2:	701a      	strb	r2, [r3, #0]
    67f4:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    67f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67fc:	781b      	ldrb	r3, [r3, #0]
    67fe:	3301      	adds	r3, #1
    6800:	b2da      	uxtb	r2, r3
    6802:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6806:	f2c2 0304 	movt	r3, #8196	; 0x2004
    680a:	701a      	strb	r2, [r3, #0]
    680c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6810:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6814:	781b      	ldrb	r3, [r3, #0]
    6816:	2bff      	cmp	r3, #255	; 0xff
    6818:	d105      	bne.n	6826 <send_adc+0x1da>
    681a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    681e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6822:	2200      	movs	r2, #0
    6824:	701a      	strb	r2, [r3, #0]
    6826:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    682a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    682e:	781b      	ldrb	r3, [r3, #0]
    6830:	461a      	mov	r2, r3
    6832:	f24b 7358 	movw	r3, #46936	; 0xb758
    6836:	f2c2 0304 	movt	r3, #8196	; 0x2004
    683a:	7859      	ldrb	r1, [r3, #1]
    683c:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    6840:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6844:	5499      	strb	r1, [r3, r2]
    6846:	4bc3      	ldr	r3, [pc, #780]	; (6b54 <send_adc+0x508>)
    6848:	781a      	ldrb	r2, [r3, #0]
    684a:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    684e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6852:	781b      	ldrb	r3, [r3, #0]
    6854:	4413      	add	r3, r2
    6856:	b2da      	uxtb	r2, r3
    6858:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    685c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6860:	701a      	strb	r2, [r3, #0]
    6862:	f24b 53be 	movw	r3, #46526	; 0xb5be
    6866:	f2c2 0304 	movt	r3, #8196	; 0x2004
    686a:	781a      	ldrb	r2, [r3, #0]
    686c:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    6870:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6874:	781b      	ldrb	r3, [r3, #0]
    6876:	4413      	add	r3, r2
    6878:	b2da      	uxtb	r2, r3
    687a:	f24b 53be 	movw	r3, #46526	; 0xb5be
    687e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6882:	701a      	strb	r2, [r3, #0]
    6884:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6888:	f2c2 0304 	movt	r3, #8196	; 0x2004
    688c:	781b      	ldrb	r3, [r3, #0]
    688e:	3301      	adds	r3, #1
    6890:	b2da      	uxtb	r2, r3
    6892:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6896:	f2c2 0304 	movt	r3, #8196	; 0x2004
    689a:	701a      	strb	r2, [r3, #0]
    689c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    68a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68a4:	781b      	ldrb	r3, [r3, #0]
    68a6:	2bff      	cmp	r3, #255	; 0xff
    68a8:	d105      	bne.n	68b6 <send_adc+0x26a>
    68aa:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    68ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68b2:	2200      	movs	r2, #0
    68b4:	701a      	strb	r2, [r3, #0]
    68b6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    68ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68be:	781b      	ldrb	r3, [r3, #0]
    68c0:	461a      	mov	r2, r3
    68c2:	f24b 735a 	movw	r3, #46938	; 0xb75a
    68c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68ca:	7819      	ldrb	r1, [r3, #0]
    68cc:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    68d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68d4:	5499      	strb	r1, [r3, r2]
    68d6:	f24b 735a 	movw	r3, #46938	; 0xb75a
    68da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68de:	781a      	ldrb	r2, [r3, #0]
    68e0:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    68e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68e8:	781b      	ldrb	r3, [r3, #0]
    68ea:	4413      	add	r3, r2
    68ec:	b2da      	uxtb	r2, r3
    68ee:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    68f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68f6:	701a      	strb	r2, [r3, #0]
    68f8:	f24b 53be 	movw	r3, #46526	; 0xb5be
    68fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6900:	781a      	ldrb	r2, [r3, #0]
    6902:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    6906:	f2c2 0304 	movt	r3, #8196	; 0x2004
    690a:	781b      	ldrb	r3, [r3, #0]
    690c:	4413      	add	r3, r2
    690e:	b2da      	uxtb	r2, r3
    6910:	f24b 53be 	movw	r3, #46526	; 0xb5be
    6914:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6918:	701a      	strb	r2, [r3, #0]
    691a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    691e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6922:	781b      	ldrb	r3, [r3, #0]
    6924:	3301      	adds	r3, #1
    6926:	b2da      	uxtb	r2, r3
    6928:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    692c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6930:	701a      	strb	r2, [r3, #0]
    6932:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6936:	f2c2 0304 	movt	r3, #8196	; 0x2004
    693a:	781b      	ldrb	r3, [r3, #0]
    693c:	2bff      	cmp	r3, #255	; 0xff
    693e:	d105      	bne.n	694c <send_adc+0x300>
    6940:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6944:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6948:	2200      	movs	r2, #0
    694a:	701a      	strb	r2, [r3, #0]
    694c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6950:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6954:	781b      	ldrb	r3, [r3, #0]
    6956:	461a      	mov	r2, r3
    6958:	f24b 735a 	movw	r3, #46938	; 0xb75a
    695c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6960:	7859      	ldrb	r1, [r3, #1]
    6962:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    6966:	f2c2 0304 	movt	r3, #8196	; 0x2004
    696a:	5499      	strb	r1, [r3, r2]
    696c:	4b7a      	ldr	r3, [pc, #488]	; (6b58 <send_adc+0x50c>)
    696e:	781a      	ldrb	r2, [r3, #0]
    6970:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    6974:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6978:	781b      	ldrb	r3, [r3, #0]
    697a:	4413      	add	r3, r2
    697c:	b2da      	uxtb	r2, r3
    697e:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    6982:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6986:	701a      	strb	r2, [r3, #0]
    6988:	f24b 53be 	movw	r3, #46526	; 0xb5be
    698c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6990:	781a      	ldrb	r2, [r3, #0]
    6992:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    6996:	f2c2 0304 	movt	r3, #8196	; 0x2004
    699a:	781b      	ldrb	r3, [r3, #0]
    699c:	4413      	add	r3, r2
    699e:	b2da      	uxtb	r2, r3
    69a0:	f24b 53be 	movw	r3, #46526	; 0xb5be
    69a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69a8:	701a      	strb	r2, [r3, #0]
    69aa:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    69ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69b2:	781b      	ldrb	r3, [r3, #0]
    69b4:	3301      	adds	r3, #1
    69b6:	b2da      	uxtb	r2, r3
    69b8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    69bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69c0:	701a      	strb	r2, [r3, #0]
    69c2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    69c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69ca:	781b      	ldrb	r3, [r3, #0]
    69cc:	2bff      	cmp	r3, #255	; 0xff
    69ce:	d105      	bne.n	69dc <send_adc+0x390>
    69d0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    69d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69d8:	2200      	movs	r2, #0
    69da:	701a      	strb	r2, [r3, #0]
    69dc:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    69e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69e4:	781b      	ldrb	r3, [r3, #0]
    69e6:	461a      	mov	r2, r3
    69e8:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    69ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69f0:	7819      	ldrb	r1, [r3, #0]
    69f2:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    69f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69fa:	5499      	strb	r1, [r3, r2]
    69fc:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6a00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a04:	781b      	ldrb	r3, [r3, #0]
    6a06:	3301      	adds	r3, #1
    6a08:	b2da      	uxtb	r2, r3
    6a0a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6a0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a12:	701a      	strb	r2, [r3, #0]
    6a14:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6a18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a1c:	781b      	ldrb	r3, [r3, #0]
    6a1e:	2bff      	cmp	r3, #255	; 0xff
    6a20:	d105      	bne.n	6a2e <send_adc+0x3e2>
    6a22:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6a26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a2a:	2200      	movs	r2, #0
    6a2c:	701a      	strb	r2, [r3, #0]
    6a2e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6a32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a36:	781b      	ldrb	r3, [r3, #0]
    6a38:	461a      	mov	r2, r3
    6a3a:	f24b 53be 	movw	r3, #46526	; 0xb5be
    6a3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a42:	7819      	ldrb	r1, [r3, #0]
    6a44:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    6a48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a4c:	5499      	strb	r1, [r3, r2]
    6a4e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6a52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a56:	781b      	ldrb	r3, [r3, #0]
    6a58:	3301      	adds	r3, #1
    6a5a:	b2da      	uxtb	r2, r3
    6a5c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6a60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a64:	701a      	strb	r2, [r3, #0]
    6a66:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6a6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a6e:	781b      	ldrb	r3, [r3, #0]
    6a70:	2bff      	cmp	r3, #255	; 0xff
    6a72:	d105      	bne.n	6a80 <send_adc+0x434>
    6a74:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6a78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a7c:	2200      	movs	r2, #0
    6a7e:	701a      	strb	r2, [r3, #0]
    6a80:	f248 0339 	movw	r3, #32825	; 0x8039
    6a84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a88:	781b      	ldrb	r3, [r3, #0]
    6a8a:	b2db      	uxtb	r3, r3
    6a8c:	f003 0310 	and.w	r3, r3, #16
    6a90:	2b00      	cmp	r3, #0
    6a92:	d15a      	bne.n	6b4a <send_adc+0x4fe>
    6a94:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    6a98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a9c:	781b      	ldrb	r3, [r3, #0]
    6a9e:	b2db      	uxtb	r3, r3
    6aa0:	461a      	mov	r2, r3
    6aa2:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    6aa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6aaa:	5c9a      	ldrb	r2, [r3, r2]
    6aac:	f24b 53bb 	movw	r3, #46523	; 0xb5bb
    6ab0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ab4:	701a      	strb	r2, [r3, #0]
    6ab6:	f24b 53bc 	movw	r3, #46524	; 0xb5bc
    6aba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6abe:	2200      	movs	r2, #0
    6ac0:	701a      	strb	r2, [r3, #0]
    6ac2:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    6ac6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6aca:	781b      	ldrb	r3, [r3, #0]
    6acc:	b2db      	uxtb	r3, r3
    6ace:	3301      	adds	r3, #1
    6ad0:	b2da      	uxtb	r2, r3
    6ad2:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    6ad6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ada:	701a      	strb	r2, [r3, #0]
    6adc:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    6ae0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ae4:	781b      	ldrb	r3, [r3, #0]
    6ae6:	b2db      	uxtb	r3, r3
    6ae8:	2bff      	cmp	r3, #255	; 0xff
    6aea:	d105      	bne.n	6af8 <send_adc+0x4ac>
    6aec:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    6af0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6af4:	2200      	movs	r2, #0
    6af6:	701a      	strb	r2, [r3, #0]
    6af8:	f248 0338 	movw	r3, #32824	; 0x8038
    6afc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b00:	f248 0238 	movw	r2, #32824	; 0x8038
    6b04:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6b08:	7812      	ldrb	r2, [r2, #0]
    6b0a:	b2d2      	uxtb	r2, r2
    6b0c:	f042 0201 	orr.w	r2, r2, #1
    6b10:	b2d2      	uxtb	r2, r2
    6b12:	701a      	strb	r2, [r3, #0]
    6b14:	f248 0339 	movw	r3, #32825	; 0x8039
    6b18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b1c:	f248 0239 	movw	r2, #32825	; 0x8039
    6b20:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6b24:	7812      	ldrb	r2, [r2, #0]
    6b26:	b2d2      	uxtb	r2, r2
    6b28:	f042 0210 	orr.w	r2, r2, #16
    6b2c:	b2d2      	uxtb	r2, r2
    6b2e:	701a      	strb	r2, [r3, #0]
    6b30:	e00b      	b.n	6b4a <send_adc+0x4fe>
    6b32:	f24b 43b8 	movw	r3, #46264	; 0xb4b8
    6b36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b3a:	781b      	ldrb	r3, [r3, #0]
    6b3c:	3301      	adds	r3, #1
    6b3e:	b2da      	uxtb	r2, r3
    6b40:	f24b 43b8 	movw	r3, #46264	; 0xb4b8
    6b44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b48:	701a      	strb	r2, [r3, #0]
}
    6b4a:	46bd      	mov	sp, r7
    6b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6b50:	4770      	bx	lr
    6b52:	bf00      	nop
    6b54:	2004b759 	.word	0x2004b759
    6b58:	2004b75b 	.word	0x2004b75b

00006b5c <send_settings>:
void send_settings(void){ //500ms
    6b5c:	b480      	push	{r7}
    6b5e:	af00      	add	r7, sp, #0
  //if(!boot)
  {if (count % 5 == 2) PERIODIC_SEND_SETTINGS();}
    6b60:	f24b 43b1 	movw	r3, #46257	; 0xb4b1
    6b64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b68:	781a      	ldrb	r2, [r3, #0]
    6b6a:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    6b6e:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    6b72:	fba3 1302 	umull	r1, r3, r3, r2
    6b76:	0899      	lsrs	r1, r3, #2
    6b78:	460b      	mov	r3, r1
    6b7a:	009b      	lsls	r3, r3, #2
    6b7c:	440b      	add	r3, r1
    6b7e:	1ad3      	subs	r3, r2, r3
    6b80:	b2db      	uxtb	r3, r3
    6b82:	2b02      	cmp	r3, #2
    6b84:	f040 83e7 	bne.w	7356 <send_settings+0x7fa>
    6b88:	f64b 23cc 	movw	r3, #47820	; 0xbacc
    6b8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b90:	781b      	ldrb	r3, [r3, #0]
    6b92:	2b00      	cmp	r3, #0
    6b94:	f000 83df 	beq.w	7356 <send_settings+0x7fa>
    6b98:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6b9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ba0:	781a      	ldrb	r2, [r3, #0]
    6ba2:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    6ba6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6baa:	781b      	ldrb	r3, [r3, #0]
    6bac:	b2db      	uxtb	r3, r3
    6bae:	429a      	cmp	r2, r3
    6bb0:	d313      	bcc.n	6bda <send_settings+0x7e>
    6bb2:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    6bb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bba:	781b      	ldrb	r3, [r3, #0]
    6bbc:	b2db      	uxtb	r3, r3
    6bbe:	461a      	mov	r2, r3
    6bc0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6bc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bc8:	781b      	ldrb	r3, [r3, #0]
    6bca:	1ad3      	subs	r3, r2, r3
    6bcc:	33ff      	adds	r3, #255	; 0xff
    6bce:	2b0d      	cmp	r3, #13
    6bd0:	bfd4      	ite	le
    6bd2:	2300      	movle	r3, #0
    6bd4:	2301      	movgt	r3, #1
    6bd6:	b2db      	uxtb	r3, r3
    6bd8:	e011      	b.n	6bfe <send_settings+0xa2>
    6bda:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    6bde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6be2:	781b      	ldrb	r3, [r3, #0]
    6be4:	b2db      	uxtb	r3, r3
    6be6:	461a      	mov	r2, r3
    6be8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6bec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bf0:	781b      	ldrb	r3, [r3, #0]
    6bf2:	1ad3      	subs	r3, r2, r3
    6bf4:	2b0d      	cmp	r3, #13
    6bf6:	bfd4      	ite	le
    6bf8:	2300      	movle	r3, #0
    6bfa:	2301      	movgt	r3, #1
    6bfc:	b2db      	uxtb	r3, r3
    6bfe:	2b00      	cmp	r3, #0
    6c00:	f000 839d 	beq.w	733e <send_settings+0x7e2>
    6c04:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6c08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c0c:	781b      	ldrb	r3, [r3, #0]
    6c0e:	461a      	mov	r2, r3
    6c10:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    6c14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c18:	2105      	movs	r1, #5
    6c1a:	5499      	strb	r1, [r3, r2]
    6c1c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6c20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c24:	781b      	ldrb	r3, [r3, #0]
    6c26:	3301      	adds	r3, #1
    6c28:	b2da      	uxtb	r2, r3
    6c2a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6c2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c32:	701a      	strb	r2, [r3, #0]
    6c34:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6c38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c3c:	781b      	ldrb	r3, [r3, #0]
    6c3e:	2bff      	cmp	r3, #255	; 0xff
    6c40:	d105      	bne.n	6c4e <send_settings+0xf2>
    6c42:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6c46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c4a:	2200      	movs	r2, #0
    6c4c:	701a      	strb	r2, [r3, #0]
    6c4e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6c52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c56:	781b      	ldrb	r3, [r3, #0]
    6c58:	461a      	mov	r2, r3
    6c5a:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    6c5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c62:	2111      	movs	r1, #17
    6c64:	5499      	strb	r1, [r3, r2]
    6c66:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6c6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c6e:	781b      	ldrb	r3, [r3, #0]
    6c70:	3301      	adds	r3, #1
    6c72:	b2da      	uxtb	r2, r3
    6c74:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6c78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c7c:	701a      	strb	r2, [r3, #0]
    6c7e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6c82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c86:	781b      	ldrb	r3, [r3, #0]
    6c88:	2bff      	cmp	r3, #255	; 0xff
    6c8a:	d105      	bne.n	6c98 <send_settings+0x13c>
    6c8c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6c90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c94:	2200      	movs	r2, #0
    6c96:	701a      	strb	r2, [r3, #0]
    6c98:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    6c9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ca0:	2211      	movs	r2, #17
    6ca2:	701a      	strb	r2, [r3, #0]
    6ca4:	f24b 53be 	movw	r3, #46526	; 0xb5be
    6ca8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cac:	2211      	movs	r2, #17
    6cae:	701a      	strb	r2, [r3, #0]
    6cb0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6cb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cb8:	781b      	ldrb	r3, [r3, #0]
    6cba:	461a      	mov	r2, r3
    6cbc:	f64b 23cc 	movw	r3, #47820	; 0xbacc
    6cc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cc4:	7819      	ldrb	r1, [r3, #0]
    6cc6:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    6cca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cce:	5499      	strb	r1, [r3, r2]
    6cd0:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    6cd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cd8:	781a      	ldrb	r2, [r3, #0]
    6cda:	f64b 23cc 	movw	r3, #47820	; 0xbacc
    6cde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ce2:	781b      	ldrb	r3, [r3, #0]
    6ce4:	4413      	add	r3, r2
    6ce6:	b2da      	uxtb	r2, r3
    6ce8:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    6cec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cf0:	701a      	strb	r2, [r3, #0]
    6cf2:	f24b 53be 	movw	r3, #46526	; 0xb5be
    6cf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cfa:	781a      	ldrb	r2, [r3, #0]
    6cfc:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    6d00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d04:	781b      	ldrb	r3, [r3, #0]
    6d06:	4413      	add	r3, r2
    6d08:	b2da      	uxtb	r2, r3
    6d0a:	f24b 53be 	movw	r3, #46526	; 0xb5be
    6d0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d12:	701a      	strb	r2, [r3, #0]
    6d14:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6d18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d1c:	781b      	ldrb	r3, [r3, #0]
    6d1e:	3301      	adds	r3, #1
    6d20:	b2da      	uxtb	r2, r3
    6d22:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6d26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d2a:	701a      	strb	r2, [r3, #0]
    6d2c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6d30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d34:	781b      	ldrb	r3, [r3, #0]
    6d36:	2bff      	cmp	r3, #255	; 0xff
    6d38:	d105      	bne.n	6d46 <send_settings+0x1ea>
    6d3a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6d3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d42:	2200      	movs	r2, #0
    6d44:	701a      	strb	r2, [r3, #0]
    6d46:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6d4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d4e:	781b      	ldrb	r3, [r3, #0]
    6d50:	461a      	mov	r2, r3
    6d52:	f24b 43a8 	movw	r3, #46248	; 0xb4a8
    6d56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d5a:	7819      	ldrb	r1, [r3, #0]
    6d5c:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    6d60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d64:	5499      	strb	r1, [r3, r2]
    6d66:	f24b 43a8 	movw	r3, #46248	; 0xb4a8
    6d6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d6e:	781a      	ldrb	r2, [r3, #0]
    6d70:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    6d74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d78:	781b      	ldrb	r3, [r3, #0]
    6d7a:	4413      	add	r3, r2
    6d7c:	b2da      	uxtb	r2, r3
    6d7e:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    6d82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d86:	701a      	strb	r2, [r3, #0]
    6d88:	f24b 53be 	movw	r3, #46526	; 0xb5be
    6d8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d90:	781a      	ldrb	r2, [r3, #0]
    6d92:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    6d96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d9a:	781b      	ldrb	r3, [r3, #0]
    6d9c:	4413      	add	r3, r2
    6d9e:	b2da      	uxtb	r2, r3
    6da0:	f24b 53be 	movw	r3, #46526	; 0xb5be
    6da4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6da8:	701a      	strb	r2, [r3, #0]
    6daa:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6dae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6db2:	781b      	ldrb	r3, [r3, #0]
    6db4:	3301      	adds	r3, #1
    6db6:	b2da      	uxtb	r2, r3
    6db8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6dbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dc0:	701a      	strb	r2, [r3, #0]
    6dc2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6dc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dca:	781b      	ldrb	r3, [r3, #0]
    6dcc:	2bff      	cmp	r3, #255	; 0xff
    6dce:	d105      	bne.n	6ddc <send_settings+0x280>
    6dd0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6dd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dd8:	2200      	movs	r2, #0
    6dda:	701a      	strb	r2, [r3, #0]
    6ddc:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6de0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6de4:	781b      	ldrb	r3, [r3, #0]
    6de6:	461a      	mov	r2, r3
    6de8:	f24b 43a8 	movw	r3, #46248	; 0xb4a8
    6dec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6df0:	7859      	ldrb	r1, [r3, #1]
    6df2:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    6df6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dfa:	5499      	strb	r1, [r3, r2]
    6dfc:	4bd1      	ldr	r3, [pc, #836]	; (7144 <send_settings+0x5e8>)
    6dfe:	781a      	ldrb	r2, [r3, #0]
    6e00:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    6e04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e08:	781b      	ldrb	r3, [r3, #0]
    6e0a:	4413      	add	r3, r2
    6e0c:	b2da      	uxtb	r2, r3
    6e0e:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    6e12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e16:	701a      	strb	r2, [r3, #0]
    6e18:	f24b 53be 	movw	r3, #46526	; 0xb5be
    6e1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e20:	781a      	ldrb	r2, [r3, #0]
    6e22:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    6e26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e2a:	781b      	ldrb	r3, [r3, #0]
    6e2c:	4413      	add	r3, r2
    6e2e:	b2da      	uxtb	r2, r3
    6e30:	f24b 53be 	movw	r3, #46526	; 0xb5be
    6e34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e38:	701a      	strb	r2, [r3, #0]
    6e3a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6e3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e42:	781b      	ldrb	r3, [r3, #0]
    6e44:	3301      	adds	r3, #1
    6e46:	b2da      	uxtb	r2, r3
    6e48:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6e4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e50:	701a      	strb	r2, [r3, #0]
    6e52:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6e56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e5a:	781b      	ldrb	r3, [r3, #0]
    6e5c:	2bff      	cmp	r3, #255	; 0xff
    6e5e:	d105      	bne.n	6e6c <send_settings+0x310>
    6e60:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6e64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e68:	2200      	movs	r2, #0
    6e6a:	701a      	strb	r2, [r3, #0]
    6e6c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6e70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e74:	781b      	ldrb	r3, [r3, #0]
    6e76:	461a      	mov	r2, r3
    6e78:	f24b 43a8 	movw	r3, #46248	; 0xb4a8
    6e7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e80:	7899      	ldrb	r1, [r3, #2]
    6e82:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    6e86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e8a:	5499      	strb	r1, [r3, r2]
    6e8c:	4bae      	ldr	r3, [pc, #696]	; (7148 <send_settings+0x5ec>)
    6e8e:	781a      	ldrb	r2, [r3, #0]
    6e90:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    6e94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e98:	781b      	ldrb	r3, [r3, #0]
    6e9a:	4413      	add	r3, r2
    6e9c:	b2da      	uxtb	r2, r3
    6e9e:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    6ea2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ea6:	701a      	strb	r2, [r3, #0]
    6ea8:	f24b 53be 	movw	r3, #46526	; 0xb5be
    6eac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6eb0:	781a      	ldrb	r2, [r3, #0]
    6eb2:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    6eb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6eba:	781b      	ldrb	r3, [r3, #0]
    6ebc:	4413      	add	r3, r2
    6ebe:	b2da      	uxtb	r2, r3
    6ec0:	f24b 53be 	movw	r3, #46526	; 0xb5be
    6ec4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ec8:	701a      	strb	r2, [r3, #0]
    6eca:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6ece:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ed2:	781b      	ldrb	r3, [r3, #0]
    6ed4:	3301      	adds	r3, #1
    6ed6:	b2da      	uxtb	r2, r3
    6ed8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6edc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ee0:	701a      	strb	r2, [r3, #0]
    6ee2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6ee6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6eea:	781b      	ldrb	r3, [r3, #0]
    6eec:	2bff      	cmp	r3, #255	; 0xff
    6eee:	d105      	bne.n	6efc <send_settings+0x3a0>
    6ef0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6ef4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ef8:	2200      	movs	r2, #0
    6efa:	701a      	strb	r2, [r3, #0]
    6efc:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6f00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f04:	781b      	ldrb	r3, [r3, #0]
    6f06:	461a      	mov	r2, r3
    6f08:	f24b 43a8 	movw	r3, #46248	; 0xb4a8
    6f0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f10:	78d9      	ldrb	r1, [r3, #3]
    6f12:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    6f16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f1a:	5499      	strb	r1, [r3, r2]
    6f1c:	4b8b      	ldr	r3, [pc, #556]	; (714c <send_settings+0x5f0>)
    6f1e:	781a      	ldrb	r2, [r3, #0]
    6f20:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    6f24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f28:	781b      	ldrb	r3, [r3, #0]
    6f2a:	4413      	add	r3, r2
    6f2c:	b2da      	uxtb	r2, r3
    6f2e:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    6f32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f36:	701a      	strb	r2, [r3, #0]
    6f38:	f24b 53be 	movw	r3, #46526	; 0xb5be
    6f3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f40:	781a      	ldrb	r2, [r3, #0]
    6f42:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    6f46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f4a:	781b      	ldrb	r3, [r3, #0]
    6f4c:	4413      	add	r3, r2
    6f4e:	b2da      	uxtb	r2, r3
    6f50:	f24b 53be 	movw	r3, #46526	; 0xb5be
    6f54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f58:	701a      	strb	r2, [r3, #0]
    6f5a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6f5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f62:	781b      	ldrb	r3, [r3, #0]
    6f64:	3301      	adds	r3, #1
    6f66:	b2da      	uxtb	r2, r3
    6f68:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6f6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f70:	701a      	strb	r2, [r3, #0]
    6f72:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6f76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f7a:	781b      	ldrb	r3, [r3, #0]
    6f7c:	2bff      	cmp	r3, #255	; 0xff
    6f7e:	d105      	bne.n	6f8c <send_settings+0x430>
    6f80:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6f84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f88:	2200      	movs	r2, #0
    6f8a:	701a      	strb	r2, [r3, #0]
    6f8c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6f90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f94:	781b      	ldrb	r3, [r3, #0]
    6f96:	461a      	mov	r2, r3
    6f98:	f24b 43ac 	movw	r3, #46252	; 0xb4ac
    6f9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fa0:	7819      	ldrb	r1, [r3, #0]
    6fa2:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    6fa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6faa:	5499      	strb	r1, [r3, r2]
    6fac:	f24b 43ac 	movw	r3, #46252	; 0xb4ac
    6fb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fb4:	781a      	ldrb	r2, [r3, #0]
    6fb6:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    6fba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fbe:	781b      	ldrb	r3, [r3, #0]
    6fc0:	4413      	add	r3, r2
    6fc2:	b2da      	uxtb	r2, r3
    6fc4:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    6fc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fcc:	701a      	strb	r2, [r3, #0]
    6fce:	f24b 53be 	movw	r3, #46526	; 0xb5be
    6fd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fd6:	781a      	ldrb	r2, [r3, #0]
    6fd8:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    6fdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fe0:	781b      	ldrb	r3, [r3, #0]
    6fe2:	4413      	add	r3, r2
    6fe4:	b2da      	uxtb	r2, r3
    6fe6:	f24b 53be 	movw	r3, #46526	; 0xb5be
    6fea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fee:	701a      	strb	r2, [r3, #0]
    6ff0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6ff4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ff8:	781b      	ldrb	r3, [r3, #0]
    6ffa:	3301      	adds	r3, #1
    6ffc:	b2da      	uxtb	r2, r3
    6ffe:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7002:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7006:	701a      	strb	r2, [r3, #0]
    7008:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    700c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7010:	781b      	ldrb	r3, [r3, #0]
    7012:	2bff      	cmp	r3, #255	; 0xff
    7014:	d105      	bne.n	7022 <send_settings+0x4c6>
    7016:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    701a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    701e:	2200      	movs	r2, #0
    7020:	701a      	strb	r2, [r3, #0]
    7022:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7026:	f2c2 0304 	movt	r3, #8196	; 0x2004
    702a:	781b      	ldrb	r3, [r3, #0]
    702c:	461a      	mov	r2, r3
    702e:	f24b 43ac 	movw	r3, #46252	; 0xb4ac
    7032:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7036:	7859      	ldrb	r1, [r3, #1]
    7038:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    703c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7040:	5499      	strb	r1, [r3, r2]
    7042:	4b43      	ldr	r3, [pc, #268]	; (7150 <send_settings+0x5f4>)
    7044:	781a      	ldrb	r2, [r3, #0]
    7046:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    704a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    704e:	781b      	ldrb	r3, [r3, #0]
    7050:	4413      	add	r3, r2
    7052:	b2da      	uxtb	r2, r3
    7054:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7058:	f2c2 0304 	movt	r3, #8196	; 0x2004
    705c:	701a      	strb	r2, [r3, #0]
    705e:	f24b 53be 	movw	r3, #46526	; 0xb5be
    7062:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7066:	781a      	ldrb	r2, [r3, #0]
    7068:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    706c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7070:	781b      	ldrb	r3, [r3, #0]
    7072:	4413      	add	r3, r2
    7074:	b2da      	uxtb	r2, r3
    7076:	f24b 53be 	movw	r3, #46526	; 0xb5be
    707a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    707e:	701a      	strb	r2, [r3, #0]
    7080:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7084:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7088:	781b      	ldrb	r3, [r3, #0]
    708a:	3301      	adds	r3, #1
    708c:	b2da      	uxtb	r2, r3
    708e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7092:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7096:	701a      	strb	r2, [r3, #0]
    7098:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    709c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70a0:	781b      	ldrb	r3, [r3, #0]
    70a2:	2bff      	cmp	r3, #255	; 0xff
    70a4:	d105      	bne.n	70b2 <send_settings+0x556>
    70a6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    70aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70ae:	2200      	movs	r2, #0
    70b0:	701a      	strb	r2, [r3, #0]
    70b2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    70b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70ba:	781b      	ldrb	r3, [r3, #0]
    70bc:	461a      	mov	r2, r3
    70be:	f24b 43ac 	movw	r3, #46252	; 0xb4ac
    70c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70c6:	7899      	ldrb	r1, [r3, #2]
    70c8:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    70cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70d0:	5499      	strb	r1, [r3, r2]
    70d2:	4b20      	ldr	r3, [pc, #128]	; (7154 <send_settings+0x5f8>)
    70d4:	781a      	ldrb	r2, [r3, #0]
    70d6:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    70da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70de:	781b      	ldrb	r3, [r3, #0]
    70e0:	4413      	add	r3, r2
    70e2:	b2da      	uxtb	r2, r3
    70e4:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    70e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70ec:	701a      	strb	r2, [r3, #0]
    70ee:	f24b 53be 	movw	r3, #46526	; 0xb5be
    70f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70f6:	781a      	ldrb	r2, [r3, #0]
    70f8:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    70fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7100:	781b      	ldrb	r3, [r3, #0]
    7102:	4413      	add	r3, r2
    7104:	b2da      	uxtb	r2, r3
    7106:	f24b 53be 	movw	r3, #46526	; 0xb5be
    710a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    710e:	701a      	strb	r2, [r3, #0]
    7110:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7114:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7118:	781b      	ldrb	r3, [r3, #0]
    711a:	3301      	adds	r3, #1
    711c:	b2da      	uxtb	r2, r3
    711e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7122:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7126:	701a      	strb	r2, [r3, #0]
    7128:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    712c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7130:	781b      	ldrb	r3, [r3, #0]
    7132:	2bff      	cmp	r3, #255	; 0xff
    7134:	d110      	bne.n	7158 <send_settings+0x5fc>
    7136:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    713a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    713e:	2200      	movs	r2, #0
    7140:	701a      	strb	r2, [r3, #0]
    7142:	e009      	b.n	7158 <send_settings+0x5fc>
    7144:	2004b4a9 	.word	0x2004b4a9
    7148:	2004b4aa 	.word	0x2004b4aa
    714c:	2004b4ab 	.word	0x2004b4ab
    7150:	2004b4ad 	.word	0x2004b4ad
    7154:	2004b4ae 	.word	0x2004b4ae
    7158:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    715c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7160:	781b      	ldrb	r3, [r3, #0]
    7162:	461a      	mov	r2, r3
    7164:	f24b 43ac 	movw	r3, #46252	; 0xb4ac
    7168:	f2c2 0304 	movt	r3, #8196	; 0x2004
    716c:	78d9      	ldrb	r1, [r3, #3]
    716e:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    7172:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7176:	5499      	strb	r1, [r3, r2]
    7178:	4b79      	ldr	r3, [pc, #484]	; (7360 <send_settings+0x804>)
    717a:	781a      	ldrb	r2, [r3, #0]
    717c:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7180:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7184:	781b      	ldrb	r3, [r3, #0]
    7186:	4413      	add	r3, r2
    7188:	b2da      	uxtb	r2, r3
    718a:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    718e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7192:	701a      	strb	r2, [r3, #0]
    7194:	f24b 53be 	movw	r3, #46526	; 0xb5be
    7198:	f2c2 0304 	movt	r3, #8196	; 0x2004
    719c:	781a      	ldrb	r2, [r3, #0]
    719e:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    71a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71a6:	781b      	ldrb	r3, [r3, #0]
    71a8:	4413      	add	r3, r2
    71aa:	b2da      	uxtb	r2, r3
    71ac:	f24b 53be 	movw	r3, #46526	; 0xb5be
    71b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71b4:	701a      	strb	r2, [r3, #0]
    71b6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    71ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71be:	781b      	ldrb	r3, [r3, #0]
    71c0:	3301      	adds	r3, #1
    71c2:	b2da      	uxtb	r2, r3
    71c4:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    71c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71cc:	701a      	strb	r2, [r3, #0]
    71ce:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    71d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71d6:	781b      	ldrb	r3, [r3, #0]
    71d8:	2bff      	cmp	r3, #255	; 0xff
    71da:	d105      	bne.n	71e8 <send_settings+0x68c>
    71dc:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    71e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71e4:	2200      	movs	r2, #0
    71e6:	701a      	strb	r2, [r3, #0]
    71e8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    71ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71f0:	781b      	ldrb	r3, [r3, #0]
    71f2:	461a      	mov	r2, r3
    71f4:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    71f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71fc:	7819      	ldrb	r1, [r3, #0]
    71fe:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    7202:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7206:	5499      	strb	r1, [r3, r2]
    7208:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    720c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7210:	781b      	ldrb	r3, [r3, #0]
    7212:	3301      	adds	r3, #1
    7214:	b2da      	uxtb	r2, r3
    7216:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    721a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    721e:	701a      	strb	r2, [r3, #0]
    7220:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7224:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7228:	781b      	ldrb	r3, [r3, #0]
    722a:	2bff      	cmp	r3, #255	; 0xff
    722c:	d105      	bne.n	723a <send_settings+0x6de>
    722e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7232:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7236:	2200      	movs	r2, #0
    7238:	701a      	strb	r2, [r3, #0]
    723a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    723e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7242:	781b      	ldrb	r3, [r3, #0]
    7244:	461a      	mov	r2, r3
    7246:	f24b 53be 	movw	r3, #46526	; 0xb5be
    724a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    724e:	7819      	ldrb	r1, [r3, #0]
    7250:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    7254:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7258:	5499      	strb	r1, [r3, r2]
    725a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    725e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7262:	781b      	ldrb	r3, [r3, #0]
    7264:	3301      	adds	r3, #1
    7266:	b2da      	uxtb	r2, r3
    7268:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    726c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7270:	701a      	strb	r2, [r3, #0]
    7272:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7276:	f2c2 0304 	movt	r3, #8196	; 0x2004
    727a:	781b      	ldrb	r3, [r3, #0]
    727c:	2bff      	cmp	r3, #255	; 0xff
    727e:	d105      	bne.n	728c <send_settings+0x730>
    7280:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7284:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7288:	2200      	movs	r2, #0
    728a:	701a      	strb	r2, [r3, #0]
    728c:	f248 0339 	movw	r3, #32825	; 0x8039
    7290:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7294:	781b      	ldrb	r3, [r3, #0]
    7296:	b2db      	uxtb	r3, r3
    7298:	f003 0310 	and.w	r3, r3, #16
    729c:	2b00      	cmp	r3, #0
    729e:	d15a      	bne.n	7356 <send_settings+0x7fa>
    72a0:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    72a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72a8:	781b      	ldrb	r3, [r3, #0]
    72aa:	b2db      	uxtb	r3, r3
    72ac:	461a      	mov	r2, r3
    72ae:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    72b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72b6:	5c9a      	ldrb	r2, [r3, r2]
    72b8:	f24b 53bb 	movw	r3, #46523	; 0xb5bb
    72bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72c0:	701a      	strb	r2, [r3, #0]
    72c2:	f24b 53bc 	movw	r3, #46524	; 0xb5bc
    72c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72ca:	2200      	movs	r2, #0
    72cc:	701a      	strb	r2, [r3, #0]
    72ce:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    72d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72d6:	781b      	ldrb	r3, [r3, #0]
    72d8:	b2db      	uxtb	r3, r3
    72da:	3301      	adds	r3, #1
    72dc:	b2da      	uxtb	r2, r3
    72de:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    72e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72e6:	701a      	strb	r2, [r3, #0]
    72e8:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    72ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72f0:	781b      	ldrb	r3, [r3, #0]
    72f2:	b2db      	uxtb	r3, r3
    72f4:	2bff      	cmp	r3, #255	; 0xff
    72f6:	d105      	bne.n	7304 <send_settings+0x7a8>
    72f8:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    72fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7300:	2200      	movs	r2, #0
    7302:	701a      	strb	r2, [r3, #0]
    7304:	f248 0338 	movw	r3, #32824	; 0x8038
    7308:	f2c2 0300 	movt	r3, #8192	; 0x2000
    730c:	f248 0238 	movw	r2, #32824	; 0x8038
    7310:	f2c2 0200 	movt	r2, #8192	; 0x2000
    7314:	7812      	ldrb	r2, [r2, #0]
    7316:	b2d2      	uxtb	r2, r2
    7318:	f042 0201 	orr.w	r2, r2, #1
    731c:	b2d2      	uxtb	r2, r2
    731e:	701a      	strb	r2, [r3, #0]
    7320:	f248 0339 	movw	r3, #32825	; 0x8039
    7324:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7328:	f248 0239 	movw	r2, #32825	; 0x8039
    732c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    7330:	7812      	ldrb	r2, [r2, #0]
    7332:	b2d2      	uxtb	r2, r2
    7334:	f042 0210 	orr.w	r2, r2, #16
    7338:	b2d2      	uxtb	r2, r2
    733a:	701a      	strb	r2, [r3, #0]
    733c:	e00b      	b.n	7356 <send_settings+0x7fa>
    733e:	f24b 43b8 	movw	r3, #46264	; 0xb4b8
    7342:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7346:	781b      	ldrb	r3, [r3, #0]
    7348:	3301      	adds	r3, #1
    734a:	b2da      	uxtb	r2, r3
    734c:	f24b 43b8 	movw	r3, #46264	; 0xb4b8
    7350:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7354:	701a      	strb	r2, [r3, #0]
}
    7356:	46bd      	mov	sp, r7
    7358:	f85d 7b04 	ldr.w	r7, [sp], #4
    735c:	4770      	bx	lr
    735e:	bf00      	nop
    7360:	2004b4af 	.word	0x2004b4af

00007364 <send_desired>:
void send_desired(void){  //1000ms
    7364:	b480      	push	{r7}
    7366:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 10 == 3) PERIODIC_SEND_DESIRED();}
    7368:	f24b 43b1 	movw	r3, #46257	; 0xb4b1
    736c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7370:	781a      	ldrb	r2, [r3, #0]
    7372:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    7376:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    737a:	fba3 1302 	umull	r1, r3, r3, r2
    737e:	08d9      	lsrs	r1, r3, #3
    7380:	460b      	mov	r3, r1
    7382:	009b      	lsls	r3, r3, #2
    7384:	440b      	add	r3, r1
    7386:	005b      	lsls	r3, r3, #1
    7388:	1ad3      	subs	r3, r2, r3
    738a:	b2db      	uxtb	r3, r3
    738c:	2b03      	cmp	r3, #3
    738e:	f040 8712 	bne.w	81b6 <send_desired+0xe52>
    7392:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7396:	f2c2 0304 	movt	r3, #8196	; 0x2004
    739a:	781a      	ldrb	r2, [r3, #0]
    739c:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    73a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73a4:	781b      	ldrb	r3, [r3, #0]
    73a6:	b2db      	uxtb	r3, r3
    73a8:	429a      	cmp	r2, r3
    73aa:	d313      	bcc.n	73d4 <send_desired+0x70>
    73ac:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    73b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73b4:	781b      	ldrb	r3, [r3, #0]
    73b6:	b2db      	uxtb	r3, r3
    73b8:	461a      	mov	r2, r3
    73ba:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    73be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73c2:	781b      	ldrb	r3, [r3, #0]
    73c4:	1ad3      	subs	r3, r2, r3
    73c6:	33ff      	adds	r3, #255	; 0xff
    73c8:	2b18      	cmp	r3, #24
    73ca:	bfd4      	ite	le
    73cc:	2300      	movle	r3, #0
    73ce:	2301      	movgt	r3, #1
    73d0:	b2db      	uxtb	r3, r3
    73d2:	e011      	b.n	73f8 <send_desired+0x94>
    73d4:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    73d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73dc:	781b      	ldrb	r3, [r3, #0]
    73de:	b2db      	uxtb	r3, r3
    73e0:	461a      	mov	r2, r3
    73e2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    73e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73ea:	781b      	ldrb	r3, [r3, #0]
    73ec:	1ad3      	subs	r3, r2, r3
    73ee:	2b18      	cmp	r3, #24
    73f0:	bfd4      	ite	le
    73f2:	2300      	movle	r3, #0
    73f4:	2301      	movgt	r3, #1
    73f6:	b2db      	uxtb	r3, r3
    73f8:	2b00      	cmp	r3, #0
    73fa:	f000 86d0 	beq.w	819e <send_desired+0xe3a>
    73fe:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7402:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7406:	781b      	ldrb	r3, [r3, #0]
    7408:	461a      	mov	r2, r3
    740a:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    740e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7412:	2105      	movs	r1, #5
    7414:	5499      	strb	r1, [r3, r2]
    7416:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    741a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    741e:	781b      	ldrb	r3, [r3, #0]
    7420:	3301      	adds	r3, #1
    7422:	b2da      	uxtb	r2, r3
    7424:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7428:	f2c2 0304 	movt	r3, #8196	; 0x2004
    742c:	701a      	strb	r2, [r3, #0]
    742e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7432:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7436:	781b      	ldrb	r3, [r3, #0]
    7438:	2bff      	cmp	r3, #255	; 0xff
    743a:	d105      	bne.n	7448 <send_desired+0xe4>
    743c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7440:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7444:	2200      	movs	r2, #0
    7446:	701a      	strb	r2, [r3, #0]
    7448:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    744c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7450:	781b      	ldrb	r3, [r3, #0]
    7452:	461a      	mov	r2, r3
    7454:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    7458:	f2c2 0304 	movt	r3, #8196	; 0x2004
    745c:	2112      	movs	r1, #18
    745e:	5499      	strb	r1, [r3, r2]
    7460:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7464:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7468:	781b      	ldrb	r3, [r3, #0]
    746a:	3301      	adds	r3, #1
    746c:	b2da      	uxtb	r2, r3
    746e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7472:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7476:	701a      	strb	r2, [r3, #0]
    7478:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    747c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7480:	781b      	ldrb	r3, [r3, #0]
    7482:	2bff      	cmp	r3, #255	; 0xff
    7484:	d105      	bne.n	7492 <send_desired+0x12e>
    7486:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    748a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    748e:	2200      	movs	r2, #0
    7490:	701a      	strb	r2, [r3, #0]
    7492:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7496:	f2c2 0304 	movt	r3, #8196	; 0x2004
    749a:	2212      	movs	r2, #18
    749c:	701a      	strb	r2, [r3, #0]
    749e:	f24b 53be 	movw	r3, #46526	; 0xb5be
    74a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74a6:	2212      	movs	r2, #18
    74a8:	701a      	strb	r2, [r3, #0]
    74aa:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    74ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74b2:	781b      	ldrb	r3, [r3, #0]
    74b4:	461a      	mov	r2, r3
    74b6:	f24b 73e4 	movw	r3, #47076	; 0xb7e4
    74ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74be:	7819      	ldrb	r1, [r3, #0]
    74c0:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    74c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74c8:	5499      	strb	r1, [r3, r2]
    74ca:	f24b 73e4 	movw	r3, #47076	; 0xb7e4
    74ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74d2:	781a      	ldrb	r2, [r3, #0]
    74d4:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    74d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74dc:	781b      	ldrb	r3, [r3, #0]
    74de:	4413      	add	r3, r2
    74e0:	b2da      	uxtb	r2, r3
    74e2:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    74e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74ea:	701a      	strb	r2, [r3, #0]
    74ec:	f24b 53be 	movw	r3, #46526	; 0xb5be
    74f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74f4:	781a      	ldrb	r2, [r3, #0]
    74f6:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    74fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74fe:	781b      	ldrb	r3, [r3, #0]
    7500:	4413      	add	r3, r2
    7502:	b2da      	uxtb	r2, r3
    7504:	f24b 53be 	movw	r3, #46526	; 0xb5be
    7508:	f2c2 0304 	movt	r3, #8196	; 0x2004
    750c:	701a      	strb	r2, [r3, #0]
    750e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7512:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7516:	781b      	ldrb	r3, [r3, #0]
    7518:	3301      	adds	r3, #1
    751a:	b2da      	uxtb	r2, r3
    751c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7520:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7524:	701a      	strb	r2, [r3, #0]
    7526:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    752a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    752e:	781b      	ldrb	r3, [r3, #0]
    7530:	2bff      	cmp	r3, #255	; 0xff
    7532:	d105      	bne.n	7540 <send_desired+0x1dc>
    7534:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7538:	f2c2 0304 	movt	r3, #8196	; 0x2004
    753c:	2200      	movs	r2, #0
    753e:	701a      	strb	r2, [r3, #0]
    7540:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7544:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7548:	781b      	ldrb	r3, [r3, #0]
    754a:	461a      	mov	r2, r3
    754c:	f24b 73e4 	movw	r3, #47076	; 0xb7e4
    7550:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7554:	7859      	ldrb	r1, [r3, #1]
    7556:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    755a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    755e:	5499      	strb	r1, [r3, r2]
    7560:	4bd1      	ldr	r3, [pc, #836]	; (78a8 <send_desired+0x544>)
    7562:	781a      	ldrb	r2, [r3, #0]
    7564:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7568:	f2c2 0304 	movt	r3, #8196	; 0x2004
    756c:	781b      	ldrb	r3, [r3, #0]
    756e:	4413      	add	r3, r2
    7570:	b2da      	uxtb	r2, r3
    7572:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7576:	f2c2 0304 	movt	r3, #8196	; 0x2004
    757a:	701a      	strb	r2, [r3, #0]
    757c:	f24b 53be 	movw	r3, #46526	; 0xb5be
    7580:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7584:	781a      	ldrb	r2, [r3, #0]
    7586:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    758a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    758e:	781b      	ldrb	r3, [r3, #0]
    7590:	4413      	add	r3, r2
    7592:	b2da      	uxtb	r2, r3
    7594:	f24b 53be 	movw	r3, #46526	; 0xb5be
    7598:	f2c2 0304 	movt	r3, #8196	; 0x2004
    759c:	701a      	strb	r2, [r3, #0]
    759e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    75a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75a6:	781b      	ldrb	r3, [r3, #0]
    75a8:	3301      	adds	r3, #1
    75aa:	b2da      	uxtb	r2, r3
    75ac:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    75b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75b4:	701a      	strb	r2, [r3, #0]
    75b6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    75ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75be:	781b      	ldrb	r3, [r3, #0]
    75c0:	2bff      	cmp	r3, #255	; 0xff
    75c2:	d105      	bne.n	75d0 <send_desired+0x26c>
    75c4:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    75c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75cc:	2200      	movs	r2, #0
    75ce:	701a      	strb	r2, [r3, #0]
    75d0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    75d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75d8:	781b      	ldrb	r3, [r3, #0]
    75da:	461a      	mov	r2, r3
    75dc:	f24b 73e4 	movw	r3, #47076	; 0xb7e4
    75e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75e4:	7899      	ldrb	r1, [r3, #2]
    75e6:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    75ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75ee:	5499      	strb	r1, [r3, r2]
    75f0:	4bae      	ldr	r3, [pc, #696]	; (78ac <send_desired+0x548>)
    75f2:	781a      	ldrb	r2, [r3, #0]
    75f4:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    75f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75fc:	781b      	ldrb	r3, [r3, #0]
    75fe:	4413      	add	r3, r2
    7600:	b2da      	uxtb	r2, r3
    7602:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7606:	f2c2 0304 	movt	r3, #8196	; 0x2004
    760a:	701a      	strb	r2, [r3, #0]
    760c:	f24b 53be 	movw	r3, #46526	; 0xb5be
    7610:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7614:	781a      	ldrb	r2, [r3, #0]
    7616:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    761a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    761e:	781b      	ldrb	r3, [r3, #0]
    7620:	4413      	add	r3, r2
    7622:	b2da      	uxtb	r2, r3
    7624:	f24b 53be 	movw	r3, #46526	; 0xb5be
    7628:	f2c2 0304 	movt	r3, #8196	; 0x2004
    762c:	701a      	strb	r2, [r3, #0]
    762e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7632:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7636:	781b      	ldrb	r3, [r3, #0]
    7638:	3301      	adds	r3, #1
    763a:	b2da      	uxtb	r2, r3
    763c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7640:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7644:	701a      	strb	r2, [r3, #0]
    7646:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    764a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    764e:	781b      	ldrb	r3, [r3, #0]
    7650:	2bff      	cmp	r3, #255	; 0xff
    7652:	d105      	bne.n	7660 <send_desired+0x2fc>
    7654:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7658:	f2c2 0304 	movt	r3, #8196	; 0x2004
    765c:	2200      	movs	r2, #0
    765e:	701a      	strb	r2, [r3, #0]
    7660:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7664:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7668:	781b      	ldrb	r3, [r3, #0]
    766a:	461a      	mov	r2, r3
    766c:	f24b 73e4 	movw	r3, #47076	; 0xb7e4
    7670:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7674:	78d9      	ldrb	r1, [r3, #3]
    7676:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    767a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    767e:	5499      	strb	r1, [r3, r2]
    7680:	4b8b      	ldr	r3, [pc, #556]	; (78b0 <send_desired+0x54c>)
    7682:	781a      	ldrb	r2, [r3, #0]
    7684:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7688:	f2c2 0304 	movt	r3, #8196	; 0x2004
    768c:	781b      	ldrb	r3, [r3, #0]
    768e:	4413      	add	r3, r2
    7690:	b2da      	uxtb	r2, r3
    7692:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7696:	f2c2 0304 	movt	r3, #8196	; 0x2004
    769a:	701a      	strb	r2, [r3, #0]
    769c:	f24b 53be 	movw	r3, #46526	; 0xb5be
    76a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76a4:	781a      	ldrb	r2, [r3, #0]
    76a6:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    76aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76ae:	781b      	ldrb	r3, [r3, #0]
    76b0:	4413      	add	r3, r2
    76b2:	b2da      	uxtb	r2, r3
    76b4:	f24b 53be 	movw	r3, #46526	; 0xb5be
    76b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76bc:	701a      	strb	r2, [r3, #0]
    76be:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    76c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76c6:	781b      	ldrb	r3, [r3, #0]
    76c8:	3301      	adds	r3, #1
    76ca:	b2da      	uxtb	r2, r3
    76cc:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    76d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76d4:	701a      	strb	r2, [r3, #0]
    76d6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    76da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76de:	781b      	ldrb	r3, [r3, #0]
    76e0:	2bff      	cmp	r3, #255	; 0xff
    76e2:	d105      	bne.n	76f0 <send_desired+0x38c>
    76e4:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    76e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76ec:	2200      	movs	r2, #0
    76ee:	701a      	strb	r2, [r3, #0]
    76f0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    76f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76f8:	781b      	ldrb	r3, [r3, #0]
    76fa:	461a      	mov	r2, r3
    76fc:	f24b 73e8 	movw	r3, #47080	; 0xb7e8
    7700:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7704:	7819      	ldrb	r1, [r3, #0]
    7706:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    770a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    770e:	5499      	strb	r1, [r3, r2]
    7710:	f24b 73e8 	movw	r3, #47080	; 0xb7e8
    7714:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7718:	781a      	ldrb	r2, [r3, #0]
    771a:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    771e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7722:	781b      	ldrb	r3, [r3, #0]
    7724:	4413      	add	r3, r2
    7726:	b2da      	uxtb	r2, r3
    7728:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    772c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7730:	701a      	strb	r2, [r3, #0]
    7732:	f24b 53be 	movw	r3, #46526	; 0xb5be
    7736:	f2c2 0304 	movt	r3, #8196	; 0x2004
    773a:	781a      	ldrb	r2, [r3, #0]
    773c:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7740:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7744:	781b      	ldrb	r3, [r3, #0]
    7746:	4413      	add	r3, r2
    7748:	b2da      	uxtb	r2, r3
    774a:	f24b 53be 	movw	r3, #46526	; 0xb5be
    774e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7752:	701a      	strb	r2, [r3, #0]
    7754:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7758:	f2c2 0304 	movt	r3, #8196	; 0x2004
    775c:	781b      	ldrb	r3, [r3, #0]
    775e:	3301      	adds	r3, #1
    7760:	b2da      	uxtb	r2, r3
    7762:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7766:	f2c2 0304 	movt	r3, #8196	; 0x2004
    776a:	701a      	strb	r2, [r3, #0]
    776c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7770:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7774:	781b      	ldrb	r3, [r3, #0]
    7776:	2bff      	cmp	r3, #255	; 0xff
    7778:	d105      	bne.n	7786 <send_desired+0x422>
    777a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    777e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7782:	2200      	movs	r2, #0
    7784:	701a      	strb	r2, [r3, #0]
    7786:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    778a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    778e:	781b      	ldrb	r3, [r3, #0]
    7790:	461a      	mov	r2, r3
    7792:	f24b 73e8 	movw	r3, #47080	; 0xb7e8
    7796:	f2c2 0304 	movt	r3, #8196	; 0x2004
    779a:	7859      	ldrb	r1, [r3, #1]
    779c:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    77a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77a4:	5499      	strb	r1, [r3, r2]
    77a6:	4b43      	ldr	r3, [pc, #268]	; (78b4 <send_desired+0x550>)
    77a8:	781a      	ldrb	r2, [r3, #0]
    77aa:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    77ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77b2:	781b      	ldrb	r3, [r3, #0]
    77b4:	4413      	add	r3, r2
    77b6:	b2da      	uxtb	r2, r3
    77b8:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    77bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77c0:	701a      	strb	r2, [r3, #0]
    77c2:	f24b 53be 	movw	r3, #46526	; 0xb5be
    77c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77ca:	781a      	ldrb	r2, [r3, #0]
    77cc:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    77d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77d4:	781b      	ldrb	r3, [r3, #0]
    77d6:	4413      	add	r3, r2
    77d8:	b2da      	uxtb	r2, r3
    77da:	f24b 53be 	movw	r3, #46526	; 0xb5be
    77de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77e2:	701a      	strb	r2, [r3, #0]
    77e4:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    77e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77ec:	781b      	ldrb	r3, [r3, #0]
    77ee:	3301      	adds	r3, #1
    77f0:	b2da      	uxtb	r2, r3
    77f2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    77f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77fa:	701a      	strb	r2, [r3, #0]
    77fc:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7800:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7804:	781b      	ldrb	r3, [r3, #0]
    7806:	2bff      	cmp	r3, #255	; 0xff
    7808:	d105      	bne.n	7816 <send_desired+0x4b2>
    780a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    780e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7812:	2200      	movs	r2, #0
    7814:	701a      	strb	r2, [r3, #0]
    7816:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    781a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    781e:	781b      	ldrb	r3, [r3, #0]
    7820:	461a      	mov	r2, r3
    7822:	f24b 73e8 	movw	r3, #47080	; 0xb7e8
    7826:	f2c2 0304 	movt	r3, #8196	; 0x2004
    782a:	7899      	ldrb	r1, [r3, #2]
    782c:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    7830:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7834:	5499      	strb	r1, [r3, r2]
    7836:	4b20      	ldr	r3, [pc, #128]	; (78b8 <send_desired+0x554>)
    7838:	781a      	ldrb	r2, [r3, #0]
    783a:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    783e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7842:	781b      	ldrb	r3, [r3, #0]
    7844:	4413      	add	r3, r2
    7846:	b2da      	uxtb	r2, r3
    7848:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    784c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7850:	701a      	strb	r2, [r3, #0]
    7852:	f24b 53be 	movw	r3, #46526	; 0xb5be
    7856:	f2c2 0304 	movt	r3, #8196	; 0x2004
    785a:	781a      	ldrb	r2, [r3, #0]
    785c:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7860:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7864:	781b      	ldrb	r3, [r3, #0]
    7866:	4413      	add	r3, r2
    7868:	b2da      	uxtb	r2, r3
    786a:	f24b 53be 	movw	r3, #46526	; 0xb5be
    786e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7872:	701a      	strb	r2, [r3, #0]
    7874:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7878:	f2c2 0304 	movt	r3, #8196	; 0x2004
    787c:	781b      	ldrb	r3, [r3, #0]
    787e:	3301      	adds	r3, #1
    7880:	b2da      	uxtb	r2, r3
    7882:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7886:	f2c2 0304 	movt	r3, #8196	; 0x2004
    788a:	701a      	strb	r2, [r3, #0]
    788c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7890:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7894:	781b      	ldrb	r3, [r3, #0]
    7896:	2bff      	cmp	r3, #255	; 0xff
    7898:	d110      	bne.n	78bc <send_desired+0x558>
    789a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    789e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78a2:	2200      	movs	r2, #0
    78a4:	701a      	strb	r2, [r3, #0]
    78a6:	e009      	b.n	78bc <send_desired+0x558>
    78a8:	2004b7e5 	.word	0x2004b7e5
    78ac:	2004b7e6 	.word	0x2004b7e6
    78b0:	2004b7e7 	.word	0x2004b7e7
    78b4:	2004b7e9 	.word	0x2004b7e9
    78b8:	2004b7ea 	.word	0x2004b7ea
    78bc:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    78c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78c4:	781b      	ldrb	r3, [r3, #0]
    78c6:	461a      	mov	r2, r3
    78c8:	f24b 73e8 	movw	r3, #47080	; 0xb7e8
    78cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78d0:	78d9      	ldrb	r1, [r3, #3]
    78d2:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    78d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78da:	5499      	strb	r1, [r3, r2]
    78dc:	4bd3      	ldr	r3, [pc, #844]	; (7c2c <send_desired+0x8c8>)
    78de:	781a      	ldrb	r2, [r3, #0]
    78e0:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    78e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78e8:	781b      	ldrb	r3, [r3, #0]
    78ea:	4413      	add	r3, r2
    78ec:	b2da      	uxtb	r2, r3
    78ee:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    78f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78f6:	701a      	strb	r2, [r3, #0]
    78f8:	f24b 53be 	movw	r3, #46526	; 0xb5be
    78fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7900:	781a      	ldrb	r2, [r3, #0]
    7902:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7906:	f2c2 0304 	movt	r3, #8196	; 0x2004
    790a:	781b      	ldrb	r3, [r3, #0]
    790c:	4413      	add	r3, r2
    790e:	b2da      	uxtb	r2, r3
    7910:	f24b 53be 	movw	r3, #46526	; 0xb5be
    7914:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7918:	701a      	strb	r2, [r3, #0]
    791a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    791e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7922:	781b      	ldrb	r3, [r3, #0]
    7924:	3301      	adds	r3, #1
    7926:	b2da      	uxtb	r2, r3
    7928:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    792c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7930:	701a      	strb	r2, [r3, #0]
    7932:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7936:	f2c2 0304 	movt	r3, #8196	; 0x2004
    793a:	781b      	ldrb	r3, [r3, #0]
    793c:	2bff      	cmp	r3, #255	; 0xff
    793e:	d105      	bne.n	794c <send_desired+0x5e8>
    7940:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7944:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7948:	2200      	movs	r2, #0
    794a:	701a      	strb	r2, [r3, #0]
    794c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7950:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7954:	781b      	ldrb	r3, [r3, #0]
    7956:	461a      	mov	r2, r3
    7958:	f64b 0330 	movw	r3, #47152	; 0xb830
    795c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7960:	7819      	ldrb	r1, [r3, #0]
    7962:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    7966:	f2c2 0304 	movt	r3, #8196	; 0x2004
    796a:	5499      	strb	r1, [r3, r2]
    796c:	f64b 0330 	movw	r3, #47152	; 0xb830
    7970:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7974:	781a      	ldrb	r2, [r3, #0]
    7976:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    797a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    797e:	781b      	ldrb	r3, [r3, #0]
    7980:	4413      	add	r3, r2
    7982:	b2da      	uxtb	r2, r3
    7984:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7988:	f2c2 0304 	movt	r3, #8196	; 0x2004
    798c:	701a      	strb	r2, [r3, #0]
    798e:	f24b 53be 	movw	r3, #46526	; 0xb5be
    7992:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7996:	781a      	ldrb	r2, [r3, #0]
    7998:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    799c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79a0:	781b      	ldrb	r3, [r3, #0]
    79a2:	4413      	add	r3, r2
    79a4:	b2da      	uxtb	r2, r3
    79a6:	f24b 53be 	movw	r3, #46526	; 0xb5be
    79aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79ae:	701a      	strb	r2, [r3, #0]
    79b0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    79b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79b8:	781b      	ldrb	r3, [r3, #0]
    79ba:	3301      	adds	r3, #1
    79bc:	b2da      	uxtb	r2, r3
    79be:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    79c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79c6:	701a      	strb	r2, [r3, #0]
    79c8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    79cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79d0:	781b      	ldrb	r3, [r3, #0]
    79d2:	2bff      	cmp	r3, #255	; 0xff
    79d4:	d105      	bne.n	79e2 <send_desired+0x67e>
    79d6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    79da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79de:	2200      	movs	r2, #0
    79e0:	701a      	strb	r2, [r3, #0]
    79e2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    79e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79ea:	781b      	ldrb	r3, [r3, #0]
    79ec:	461a      	mov	r2, r3
    79ee:	f64b 0330 	movw	r3, #47152	; 0xb830
    79f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79f6:	7859      	ldrb	r1, [r3, #1]
    79f8:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    79fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a00:	5499      	strb	r1, [r3, r2]
    7a02:	4b8b      	ldr	r3, [pc, #556]	; (7c30 <send_desired+0x8cc>)
    7a04:	781a      	ldrb	r2, [r3, #0]
    7a06:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7a0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a0e:	781b      	ldrb	r3, [r3, #0]
    7a10:	4413      	add	r3, r2
    7a12:	b2da      	uxtb	r2, r3
    7a14:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7a18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a1c:	701a      	strb	r2, [r3, #0]
    7a1e:	f24b 53be 	movw	r3, #46526	; 0xb5be
    7a22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a26:	781a      	ldrb	r2, [r3, #0]
    7a28:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7a2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a30:	781b      	ldrb	r3, [r3, #0]
    7a32:	4413      	add	r3, r2
    7a34:	b2da      	uxtb	r2, r3
    7a36:	f24b 53be 	movw	r3, #46526	; 0xb5be
    7a3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a3e:	701a      	strb	r2, [r3, #0]
    7a40:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7a44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a48:	781b      	ldrb	r3, [r3, #0]
    7a4a:	3301      	adds	r3, #1
    7a4c:	b2da      	uxtb	r2, r3
    7a4e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7a52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a56:	701a      	strb	r2, [r3, #0]
    7a58:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7a5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a60:	781b      	ldrb	r3, [r3, #0]
    7a62:	2bff      	cmp	r3, #255	; 0xff
    7a64:	d105      	bne.n	7a72 <send_desired+0x70e>
    7a66:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7a6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a6e:	2200      	movs	r2, #0
    7a70:	701a      	strb	r2, [r3, #0]
    7a72:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7a76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a7a:	781b      	ldrb	r3, [r3, #0]
    7a7c:	461a      	mov	r2, r3
    7a7e:	f64b 0330 	movw	r3, #47152	; 0xb830
    7a82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a86:	7899      	ldrb	r1, [r3, #2]
    7a88:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    7a8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a90:	5499      	strb	r1, [r3, r2]
    7a92:	4b68      	ldr	r3, [pc, #416]	; (7c34 <send_desired+0x8d0>)
    7a94:	781a      	ldrb	r2, [r3, #0]
    7a96:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7a9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a9e:	781b      	ldrb	r3, [r3, #0]
    7aa0:	4413      	add	r3, r2
    7aa2:	b2da      	uxtb	r2, r3
    7aa4:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7aa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7aac:	701a      	strb	r2, [r3, #0]
    7aae:	f24b 53be 	movw	r3, #46526	; 0xb5be
    7ab2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ab6:	781a      	ldrb	r2, [r3, #0]
    7ab8:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7abc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ac0:	781b      	ldrb	r3, [r3, #0]
    7ac2:	4413      	add	r3, r2
    7ac4:	b2da      	uxtb	r2, r3
    7ac6:	f24b 53be 	movw	r3, #46526	; 0xb5be
    7aca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ace:	701a      	strb	r2, [r3, #0]
    7ad0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7ad4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ad8:	781b      	ldrb	r3, [r3, #0]
    7ada:	3301      	adds	r3, #1
    7adc:	b2da      	uxtb	r2, r3
    7ade:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7ae2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ae6:	701a      	strb	r2, [r3, #0]
    7ae8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7aec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7af0:	781b      	ldrb	r3, [r3, #0]
    7af2:	2bff      	cmp	r3, #255	; 0xff
    7af4:	d105      	bne.n	7b02 <send_desired+0x79e>
    7af6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7afa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7afe:	2200      	movs	r2, #0
    7b00:	701a      	strb	r2, [r3, #0]
    7b02:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7b06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b0a:	781b      	ldrb	r3, [r3, #0]
    7b0c:	461a      	mov	r2, r3
    7b0e:	f64b 0330 	movw	r3, #47152	; 0xb830
    7b12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b16:	78d9      	ldrb	r1, [r3, #3]
    7b18:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    7b1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b20:	5499      	strb	r1, [r3, r2]
    7b22:	4b45      	ldr	r3, [pc, #276]	; (7c38 <send_desired+0x8d4>)
    7b24:	781a      	ldrb	r2, [r3, #0]
    7b26:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7b2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b2e:	781b      	ldrb	r3, [r3, #0]
    7b30:	4413      	add	r3, r2
    7b32:	b2da      	uxtb	r2, r3
    7b34:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7b38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b3c:	701a      	strb	r2, [r3, #0]
    7b3e:	f24b 53be 	movw	r3, #46526	; 0xb5be
    7b42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b46:	781a      	ldrb	r2, [r3, #0]
    7b48:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7b4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b50:	781b      	ldrb	r3, [r3, #0]
    7b52:	4413      	add	r3, r2
    7b54:	b2da      	uxtb	r2, r3
    7b56:	f24b 53be 	movw	r3, #46526	; 0xb5be
    7b5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b5e:	701a      	strb	r2, [r3, #0]
    7b60:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7b64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b68:	781b      	ldrb	r3, [r3, #0]
    7b6a:	3301      	adds	r3, #1
    7b6c:	b2da      	uxtb	r2, r3
    7b6e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7b72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b76:	701a      	strb	r2, [r3, #0]
    7b78:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7b7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b80:	781b      	ldrb	r3, [r3, #0]
    7b82:	2bff      	cmp	r3, #255	; 0xff
    7b84:	d105      	bne.n	7b92 <send_desired+0x82e>
    7b86:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7b8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b8e:	2200      	movs	r2, #0
    7b90:	701a      	strb	r2, [r3, #0]
    7b92:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7b96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b9a:	781b      	ldrb	r3, [r3, #0]
    7b9c:	461a      	mov	r2, r3
    7b9e:	f64b 0334 	movw	r3, #47156	; 0xb834
    7ba2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ba6:	7819      	ldrb	r1, [r3, #0]
    7ba8:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    7bac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bb0:	5499      	strb	r1, [r3, r2]
    7bb2:	f64b 0334 	movw	r3, #47156	; 0xb834
    7bb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bba:	781a      	ldrb	r2, [r3, #0]
    7bbc:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7bc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bc4:	781b      	ldrb	r3, [r3, #0]
    7bc6:	4413      	add	r3, r2
    7bc8:	b2da      	uxtb	r2, r3
    7bca:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7bce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bd2:	701a      	strb	r2, [r3, #0]
    7bd4:	f24b 53be 	movw	r3, #46526	; 0xb5be
    7bd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bdc:	781a      	ldrb	r2, [r3, #0]
    7bde:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7be2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7be6:	781b      	ldrb	r3, [r3, #0]
    7be8:	4413      	add	r3, r2
    7bea:	b2da      	uxtb	r2, r3
    7bec:	f24b 53be 	movw	r3, #46526	; 0xb5be
    7bf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bf4:	701a      	strb	r2, [r3, #0]
    7bf6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7bfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bfe:	781b      	ldrb	r3, [r3, #0]
    7c00:	3301      	adds	r3, #1
    7c02:	b2da      	uxtb	r2, r3
    7c04:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7c08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c0c:	701a      	strb	r2, [r3, #0]
    7c0e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7c12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c16:	781b      	ldrb	r3, [r3, #0]
    7c18:	2bff      	cmp	r3, #255	; 0xff
    7c1a:	d10f      	bne.n	7c3c <send_desired+0x8d8>
    7c1c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7c20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c24:	2200      	movs	r2, #0
    7c26:	701a      	strb	r2, [r3, #0]
    7c28:	e008      	b.n	7c3c <send_desired+0x8d8>
    7c2a:	bf00      	nop
    7c2c:	2004b7eb 	.word	0x2004b7eb
    7c30:	2004b831 	.word	0x2004b831
    7c34:	2004b832 	.word	0x2004b832
    7c38:	2004b833 	.word	0x2004b833
    7c3c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7c40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c44:	781b      	ldrb	r3, [r3, #0]
    7c46:	461a      	mov	r2, r3
    7c48:	f64b 0334 	movw	r3, #47156	; 0xb834
    7c4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c50:	7859      	ldrb	r1, [r3, #1]
    7c52:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    7c56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c5a:	5499      	strb	r1, [r3, r2]
    7c5c:	4bd1      	ldr	r3, [pc, #836]	; (7fa4 <send_desired+0xc40>)
    7c5e:	781a      	ldrb	r2, [r3, #0]
    7c60:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7c64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c68:	781b      	ldrb	r3, [r3, #0]
    7c6a:	4413      	add	r3, r2
    7c6c:	b2da      	uxtb	r2, r3
    7c6e:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7c72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c76:	701a      	strb	r2, [r3, #0]
    7c78:	f24b 53be 	movw	r3, #46526	; 0xb5be
    7c7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c80:	781a      	ldrb	r2, [r3, #0]
    7c82:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7c86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c8a:	781b      	ldrb	r3, [r3, #0]
    7c8c:	4413      	add	r3, r2
    7c8e:	b2da      	uxtb	r2, r3
    7c90:	f24b 53be 	movw	r3, #46526	; 0xb5be
    7c94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c98:	701a      	strb	r2, [r3, #0]
    7c9a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7c9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ca2:	781b      	ldrb	r3, [r3, #0]
    7ca4:	3301      	adds	r3, #1
    7ca6:	b2da      	uxtb	r2, r3
    7ca8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7cac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cb0:	701a      	strb	r2, [r3, #0]
    7cb2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7cb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cba:	781b      	ldrb	r3, [r3, #0]
    7cbc:	2bff      	cmp	r3, #255	; 0xff
    7cbe:	d105      	bne.n	7ccc <send_desired+0x968>
    7cc0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7cc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cc8:	2200      	movs	r2, #0
    7cca:	701a      	strb	r2, [r3, #0]
    7ccc:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7cd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cd4:	781b      	ldrb	r3, [r3, #0]
    7cd6:	461a      	mov	r2, r3
    7cd8:	f64b 0334 	movw	r3, #47156	; 0xb834
    7cdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ce0:	7899      	ldrb	r1, [r3, #2]
    7ce2:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    7ce6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cea:	5499      	strb	r1, [r3, r2]
    7cec:	4bae      	ldr	r3, [pc, #696]	; (7fa8 <send_desired+0xc44>)
    7cee:	781a      	ldrb	r2, [r3, #0]
    7cf0:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7cf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cf8:	781b      	ldrb	r3, [r3, #0]
    7cfa:	4413      	add	r3, r2
    7cfc:	b2da      	uxtb	r2, r3
    7cfe:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7d02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d06:	701a      	strb	r2, [r3, #0]
    7d08:	f24b 53be 	movw	r3, #46526	; 0xb5be
    7d0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d10:	781a      	ldrb	r2, [r3, #0]
    7d12:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7d16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d1a:	781b      	ldrb	r3, [r3, #0]
    7d1c:	4413      	add	r3, r2
    7d1e:	b2da      	uxtb	r2, r3
    7d20:	f24b 53be 	movw	r3, #46526	; 0xb5be
    7d24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d28:	701a      	strb	r2, [r3, #0]
    7d2a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7d2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d32:	781b      	ldrb	r3, [r3, #0]
    7d34:	3301      	adds	r3, #1
    7d36:	b2da      	uxtb	r2, r3
    7d38:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7d3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d40:	701a      	strb	r2, [r3, #0]
    7d42:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7d46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d4a:	781b      	ldrb	r3, [r3, #0]
    7d4c:	2bff      	cmp	r3, #255	; 0xff
    7d4e:	d105      	bne.n	7d5c <send_desired+0x9f8>
    7d50:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7d54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d58:	2200      	movs	r2, #0
    7d5a:	701a      	strb	r2, [r3, #0]
    7d5c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7d60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d64:	781b      	ldrb	r3, [r3, #0]
    7d66:	461a      	mov	r2, r3
    7d68:	f64b 0334 	movw	r3, #47156	; 0xb834
    7d6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d70:	78d9      	ldrb	r1, [r3, #3]
    7d72:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    7d76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d7a:	5499      	strb	r1, [r3, r2]
    7d7c:	4b8b      	ldr	r3, [pc, #556]	; (7fac <send_desired+0xc48>)
    7d7e:	781a      	ldrb	r2, [r3, #0]
    7d80:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7d84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d88:	781b      	ldrb	r3, [r3, #0]
    7d8a:	4413      	add	r3, r2
    7d8c:	b2da      	uxtb	r2, r3
    7d8e:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7d92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d96:	701a      	strb	r2, [r3, #0]
    7d98:	f24b 53be 	movw	r3, #46526	; 0xb5be
    7d9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7da0:	781a      	ldrb	r2, [r3, #0]
    7da2:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7da6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7daa:	781b      	ldrb	r3, [r3, #0]
    7dac:	4413      	add	r3, r2
    7dae:	b2da      	uxtb	r2, r3
    7db0:	f24b 53be 	movw	r3, #46526	; 0xb5be
    7db4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7db8:	701a      	strb	r2, [r3, #0]
    7dba:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7dbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dc2:	781b      	ldrb	r3, [r3, #0]
    7dc4:	3301      	adds	r3, #1
    7dc6:	b2da      	uxtb	r2, r3
    7dc8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7dcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dd0:	701a      	strb	r2, [r3, #0]
    7dd2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7dd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dda:	781b      	ldrb	r3, [r3, #0]
    7ddc:	2bff      	cmp	r3, #255	; 0xff
    7dde:	d105      	bne.n	7dec <send_desired+0xa88>
    7de0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7de4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7de8:	2200      	movs	r2, #0
    7dea:	701a      	strb	r2, [r3, #0]
    7dec:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7df0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7df4:	781b      	ldrb	r3, [r3, #0]
    7df6:	461a      	mov	r2, r3
    7df8:	f240 133c 	movw	r3, #316	; 0x13c
    7dfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e00:	7819      	ldrb	r1, [r3, #0]
    7e02:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    7e06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e0a:	5499      	strb	r1, [r3, r2]
    7e0c:	f240 133c 	movw	r3, #316	; 0x13c
    7e10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e14:	781a      	ldrb	r2, [r3, #0]
    7e16:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7e1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e1e:	781b      	ldrb	r3, [r3, #0]
    7e20:	4413      	add	r3, r2
    7e22:	b2da      	uxtb	r2, r3
    7e24:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7e28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e2c:	701a      	strb	r2, [r3, #0]
    7e2e:	f24b 53be 	movw	r3, #46526	; 0xb5be
    7e32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e36:	781a      	ldrb	r2, [r3, #0]
    7e38:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7e3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e40:	781b      	ldrb	r3, [r3, #0]
    7e42:	4413      	add	r3, r2
    7e44:	b2da      	uxtb	r2, r3
    7e46:	f24b 53be 	movw	r3, #46526	; 0xb5be
    7e4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e4e:	701a      	strb	r2, [r3, #0]
    7e50:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7e54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e58:	781b      	ldrb	r3, [r3, #0]
    7e5a:	3301      	adds	r3, #1
    7e5c:	b2da      	uxtb	r2, r3
    7e5e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7e62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e66:	701a      	strb	r2, [r3, #0]
    7e68:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7e6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e70:	781b      	ldrb	r3, [r3, #0]
    7e72:	2bff      	cmp	r3, #255	; 0xff
    7e74:	d105      	bne.n	7e82 <send_desired+0xb1e>
    7e76:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7e7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e7e:	2200      	movs	r2, #0
    7e80:	701a      	strb	r2, [r3, #0]
    7e82:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7e86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e8a:	781b      	ldrb	r3, [r3, #0]
    7e8c:	461a      	mov	r2, r3
    7e8e:	f240 133c 	movw	r3, #316	; 0x13c
    7e92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e96:	7859      	ldrb	r1, [r3, #1]
    7e98:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    7e9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ea0:	5499      	strb	r1, [r3, r2]
    7ea2:	4b43      	ldr	r3, [pc, #268]	; (7fb0 <send_desired+0xc4c>)
    7ea4:	781a      	ldrb	r2, [r3, #0]
    7ea6:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7eaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7eae:	781b      	ldrb	r3, [r3, #0]
    7eb0:	4413      	add	r3, r2
    7eb2:	b2da      	uxtb	r2, r3
    7eb4:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7eb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ebc:	701a      	strb	r2, [r3, #0]
    7ebe:	f24b 53be 	movw	r3, #46526	; 0xb5be
    7ec2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ec6:	781a      	ldrb	r2, [r3, #0]
    7ec8:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7ecc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ed0:	781b      	ldrb	r3, [r3, #0]
    7ed2:	4413      	add	r3, r2
    7ed4:	b2da      	uxtb	r2, r3
    7ed6:	f24b 53be 	movw	r3, #46526	; 0xb5be
    7eda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ede:	701a      	strb	r2, [r3, #0]
    7ee0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7ee4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ee8:	781b      	ldrb	r3, [r3, #0]
    7eea:	3301      	adds	r3, #1
    7eec:	b2da      	uxtb	r2, r3
    7eee:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7ef2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ef6:	701a      	strb	r2, [r3, #0]
    7ef8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7efc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f00:	781b      	ldrb	r3, [r3, #0]
    7f02:	2bff      	cmp	r3, #255	; 0xff
    7f04:	d105      	bne.n	7f12 <send_desired+0xbae>
    7f06:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7f0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f0e:	2200      	movs	r2, #0
    7f10:	701a      	strb	r2, [r3, #0]
    7f12:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7f16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f1a:	781b      	ldrb	r3, [r3, #0]
    7f1c:	461a      	mov	r2, r3
    7f1e:	f240 133c 	movw	r3, #316	; 0x13c
    7f22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f26:	7899      	ldrb	r1, [r3, #2]
    7f28:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    7f2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f30:	5499      	strb	r1, [r3, r2]
    7f32:	4b20      	ldr	r3, [pc, #128]	; (7fb4 <send_desired+0xc50>)
    7f34:	781a      	ldrb	r2, [r3, #0]
    7f36:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7f3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f3e:	781b      	ldrb	r3, [r3, #0]
    7f40:	4413      	add	r3, r2
    7f42:	b2da      	uxtb	r2, r3
    7f44:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7f48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f4c:	701a      	strb	r2, [r3, #0]
    7f4e:	f24b 53be 	movw	r3, #46526	; 0xb5be
    7f52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f56:	781a      	ldrb	r2, [r3, #0]
    7f58:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7f5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f60:	781b      	ldrb	r3, [r3, #0]
    7f62:	4413      	add	r3, r2
    7f64:	b2da      	uxtb	r2, r3
    7f66:	f24b 53be 	movw	r3, #46526	; 0xb5be
    7f6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f6e:	701a      	strb	r2, [r3, #0]
    7f70:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7f74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f78:	781b      	ldrb	r3, [r3, #0]
    7f7a:	3301      	adds	r3, #1
    7f7c:	b2da      	uxtb	r2, r3
    7f7e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7f82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f86:	701a      	strb	r2, [r3, #0]
    7f88:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7f8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f90:	781b      	ldrb	r3, [r3, #0]
    7f92:	2bff      	cmp	r3, #255	; 0xff
    7f94:	d110      	bne.n	7fb8 <send_desired+0xc54>
    7f96:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7f9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f9e:	2200      	movs	r2, #0
    7fa0:	701a      	strb	r2, [r3, #0]
    7fa2:	e009      	b.n	7fb8 <send_desired+0xc54>
    7fa4:	2004b835 	.word	0x2004b835
    7fa8:	2004b836 	.word	0x2004b836
    7fac:	2004b837 	.word	0x2004b837
    7fb0:	2000013d 	.word	0x2000013d
    7fb4:	2000013e 	.word	0x2000013e
    7fb8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    7fbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fc0:	781b      	ldrb	r3, [r3, #0]
    7fc2:	461a      	mov	r2, r3
    7fc4:	f240 133c 	movw	r3, #316	; 0x13c
    7fc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7fcc:	78d9      	ldrb	r1, [r3, #3]
    7fce:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    7fd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fd6:	5499      	strb	r1, [r3, r2]
    7fd8:	4b79      	ldr	r3, [pc, #484]	; (81c0 <send_desired+0xe5c>)
    7fda:	781a      	ldrb	r2, [r3, #0]
    7fdc:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7fe0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fe4:	781b      	ldrb	r3, [r3, #0]
    7fe6:	4413      	add	r3, r2
    7fe8:	b2da      	uxtb	r2, r3
    7fea:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    7fee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ff2:	701a      	strb	r2, [r3, #0]
    7ff4:	f24b 53be 	movw	r3, #46526	; 0xb5be
    7ff8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ffc:	781a      	ldrb	r2, [r3, #0]
    7ffe:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8002:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8006:	781b      	ldrb	r3, [r3, #0]
    8008:	4413      	add	r3, r2
    800a:	b2da      	uxtb	r2, r3
    800c:	f24b 53be 	movw	r3, #46526	; 0xb5be
    8010:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8014:	701a      	strb	r2, [r3, #0]
    8016:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    801a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    801e:	781b      	ldrb	r3, [r3, #0]
    8020:	3301      	adds	r3, #1
    8022:	b2da      	uxtb	r2, r3
    8024:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8028:	f2c2 0304 	movt	r3, #8196	; 0x2004
    802c:	701a      	strb	r2, [r3, #0]
    802e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8032:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8036:	781b      	ldrb	r3, [r3, #0]
    8038:	2bff      	cmp	r3, #255	; 0xff
    803a:	d105      	bne.n	8048 <send_desired+0xce4>
    803c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8040:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8044:	2200      	movs	r2, #0
    8046:	701a      	strb	r2, [r3, #0]
    8048:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    804c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8050:	781b      	ldrb	r3, [r3, #0]
    8052:	461a      	mov	r2, r3
    8054:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8058:	f2c2 0304 	movt	r3, #8196	; 0x2004
    805c:	7819      	ldrb	r1, [r3, #0]
    805e:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    8062:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8066:	5499      	strb	r1, [r3, r2]
    8068:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    806c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8070:	781b      	ldrb	r3, [r3, #0]
    8072:	3301      	adds	r3, #1
    8074:	b2da      	uxtb	r2, r3
    8076:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    807a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    807e:	701a      	strb	r2, [r3, #0]
    8080:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8084:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8088:	781b      	ldrb	r3, [r3, #0]
    808a:	2bff      	cmp	r3, #255	; 0xff
    808c:	d105      	bne.n	809a <send_desired+0xd36>
    808e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8092:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8096:	2200      	movs	r2, #0
    8098:	701a      	strb	r2, [r3, #0]
    809a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    809e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80a2:	781b      	ldrb	r3, [r3, #0]
    80a4:	461a      	mov	r2, r3
    80a6:	f24b 53be 	movw	r3, #46526	; 0xb5be
    80aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80ae:	7819      	ldrb	r1, [r3, #0]
    80b0:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    80b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80b8:	5499      	strb	r1, [r3, r2]
    80ba:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    80be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80c2:	781b      	ldrb	r3, [r3, #0]
    80c4:	3301      	adds	r3, #1
    80c6:	b2da      	uxtb	r2, r3
    80c8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    80cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80d0:	701a      	strb	r2, [r3, #0]
    80d2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    80d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80da:	781b      	ldrb	r3, [r3, #0]
    80dc:	2bff      	cmp	r3, #255	; 0xff
    80de:	d105      	bne.n	80ec <send_desired+0xd88>
    80e0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    80e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80e8:	2200      	movs	r2, #0
    80ea:	701a      	strb	r2, [r3, #0]
    80ec:	f248 0339 	movw	r3, #32825	; 0x8039
    80f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80f4:	781b      	ldrb	r3, [r3, #0]
    80f6:	b2db      	uxtb	r3, r3
    80f8:	f003 0310 	and.w	r3, r3, #16
    80fc:	2b00      	cmp	r3, #0
    80fe:	d15a      	bne.n	81b6 <send_desired+0xe52>
    8100:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    8104:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8108:	781b      	ldrb	r3, [r3, #0]
    810a:	b2db      	uxtb	r3, r3
    810c:	461a      	mov	r2, r3
    810e:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    8112:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8116:	5c9a      	ldrb	r2, [r3, r2]
    8118:	f24b 53bb 	movw	r3, #46523	; 0xb5bb
    811c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8120:	701a      	strb	r2, [r3, #0]
    8122:	f24b 53bc 	movw	r3, #46524	; 0xb5bc
    8126:	f2c2 0304 	movt	r3, #8196	; 0x2004
    812a:	2200      	movs	r2, #0
    812c:	701a      	strb	r2, [r3, #0]
    812e:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    8132:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8136:	781b      	ldrb	r3, [r3, #0]
    8138:	b2db      	uxtb	r3, r3
    813a:	3301      	adds	r3, #1
    813c:	b2da      	uxtb	r2, r3
    813e:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    8142:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8146:	701a      	strb	r2, [r3, #0]
    8148:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    814c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8150:	781b      	ldrb	r3, [r3, #0]
    8152:	b2db      	uxtb	r3, r3
    8154:	2bff      	cmp	r3, #255	; 0xff
    8156:	d105      	bne.n	8164 <send_desired+0xe00>
    8158:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    815c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8160:	2200      	movs	r2, #0
    8162:	701a      	strb	r2, [r3, #0]
    8164:	f248 0338 	movw	r3, #32824	; 0x8038
    8168:	f2c2 0300 	movt	r3, #8192	; 0x2000
    816c:	f248 0238 	movw	r2, #32824	; 0x8038
    8170:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8174:	7812      	ldrb	r2, [r2, #0]
    8176:	b2d2      	uxtb	r2, r2
    8178:	f042 0201 	orr.w	r2, r2, #1
    817c:	b2d2      	uxtb	r2, r2
    817e:	701a      	strb	r2, [r3, #0]
    8180:	f248 0339 	movw	r3, #32825	; 0x8039
    8184:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8188:	f248 0239 	movw	r2, #32825	; 0x8039
    818c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8190:	7812      	ldrb	r2, [r2, #0]
    8192:	b2d2      	uxtb	r2, r2
    8194:	f042 0210 	orr.w	r2, r2, #16
    8198:	b2d2      	uxtb	r2, r2
    819a:	701a      	strb	r2, [r3, #0]
    819c:	e00b      	b.n	81b6 <send_desired+0xe52>
    819e:	f24b 43b8 	movw	r3, #46264	; 0xb4b8
    81a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81a6:	781b      	ldrb	r3, [r3, #0]
    81a8:	3301      	adds	r3, #1
    81aa:	b2da      	uxtb	r2, r3
    81ac:	f24b 43b8 	movw	r3, #46264	; 0xb4b8
    81b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81b4:	701a      	strb	r2, [r3, #0]
}
    81b6:	46bd      	mov	sp, r7
    81b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    81bc:	4770      	bx	lr
    81be:	bf00      	nop
    81c0:	2000013f 	.word	0x2000013f

000081c4 <send_bat>:
void send_bat(void){  //2000ms
    81c4:	b480      	push	{r7}
    81c6:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 20 == 8) PERIODIC_SEND_BAT();}
    81c8:	f24b 43b1 	movw	r3, #46257	; 0xb4b1
    81cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81d0:	781a      	ldrb	r2, [r3, #0]
    81d2:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    81d6:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    81da:	fba3 1302 	umull	r1, r3, r3, r2
    81de:	0919      	lsrs	r1, r3, #4
    81e0:	460b      	mov	r3, r1
    81e2:	009b      	lsls	r3, r3, #2
    81e4:	440b      	add	r3, r1
    81e6:	009b      	lsls	r3, r3, #2
    81e8:	1ad3      	subs	r3, r2, r3
    81ea:	b2db      	uxtb	r3, r3
    81ec:	2b08      	cmp	r3, #8
    81ee:	f040 839a 	bne.w	8926 <send_bat+0x762>
    81f2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    81f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81fa:	781a      	ldrb	r2, [r3, #0]
    81fc:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    8200:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8204:	781b      	ldrb	r3, [r3, #0]
    8206:	b2db      	uxtb	r3, r3
    8208:	429a      	cmp	r2, r3
    820a:	d313      	bcc.n	8234 <send_bat+0x70>
    820c:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    8210:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8214:	781b      	ldrb	r3, [r3, #0]
    8216:	b2db      	uxtb	r3, r3
    8218:	461a      	mov	r2, r3
    821a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    821e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8222:	781b      	ldrb	r3, [r3, #0]
    8224:	1ad3      	subs	r3, r2, r3
    8226:	33ff      	adds	r3, #255	; 0xff
    8228:	2b0c      	cmp	r3, #12
    822a:	bfd4      	ite	le
    822c:	2300      	movle	r3, #0
    822e:	2301      	movgt	r3, #1
    8230:	b2db      	uxtb	r3, r3
    8232:	e011      	b.n	8258 <send_bat+0x94>
    8234:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    8238:	f2c2 0304 	movt	r3, #8196	; 0x2004
    823c:	781b      	ldrb	r3, [r3, #0]
    823e:	b2db      	uxtb	r3, r3
    8240:	461a      	mov	r2, r3
    8242:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8246:	f2c2 0304 	movt	r3, #8196	; 0x2004
    824a:	781b      	ldrb	r3, [r3, #0]
    824c:	1ad3      	subs	r3, r2, r3
    824e:	2b0c      	cmp	r3, #12
    8250:	bfd4      	ite	le
    8252:	2300      	movle	r3, #0
    8254:	2301      	movgt	r3, #1
    8256:	b2db      	uxtb	r3, r3
    8258:	2b00      	cmp	r3, #0
    825a:	f000 8358 	beq.w	890e <send_bat+0x74a>
    825e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8262:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8266:	781b      	ldrb	r3, [r3, #0]
    8268:	461a      	mov	r2, r3
    826a:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    826e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8272:	2105      	movs	r1, #5
    8274:	5499      	strb	r1, [r3, r2]
    8276:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    827a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    827e:	781b      	ldrb	r3, [r3, #0]
    8280:	3301      	adds	r3, #1
    8282:	b2da      	uxtb	r2, r3
    8284:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8288:	f2c2 0304 	movt	r3, #8196	; 0x2004
    828c:	701a      	strb	r2, [r3, #0]
    828e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8292:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8296:	781b      	ldrb	r3, [r3, #0]
    8298:	2bff      	cmp	r3, #255	; 0xff
    829a:	d105      	bne.n	82a8 <send_bat+0xe4>
    829c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    82a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82a4:	2200      	movs	r2, #0
    82a6:	701a      	strb	r2, [r3, #0]
    82a8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    82ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82b0:	781b      	ldrb	r3, [r3, #0]
    82b2:	461a      	mov	r2, r3
    82b4:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    82b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82bc:	210c      	movs	r1, #12
    82be:	5499      	strb	r1, [r3, r2]
    82c0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    82c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82c8:	781b      	ldrb	r3, [r3, #0]
    82ca:	3301      	adds	r3, #1
    82cc:	b2da      	uxtb	r2, r3
    82ce:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    82d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82d6:	701a      	strb	r2, [r3, #0]
    82d8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    82dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82e0:	781b      	ldrb	r3, [r3, #0]
    82e2:	2bff      	cmp	r3, #255	; 0xff
    82e4:	d105      	bne.n	82f2 <send_bat+0x12e>
    82e6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    82ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82ee:	2200      	movs	r2, #0
    82f0:	701a      	strb	r2, [r3, #0]
    82f2:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    82f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82fa:	220c      	movs	r2, #12
    82fc:	701a      	strb	r2, [r3, #0]
    82fe:	f24b 53be 	movw	r3, #46526	; 0xb5be
    8302:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8306:	220c      	movs	r2, #12
    8308:	701a      	strb	r2, [r3, #0]
    830a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    830e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8312:	781b      	ldrb	r3, [r3, #0]
    8314:	461a      	mov	r2, r3
    8316:	f24b 43a2 	movw	r3, #46242	; 0xb4a2
    831a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    831e:	7819      	ldrb	r1, [r3, #0]
    8320:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    8324:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8328:	5499      	strb	r1, [r3, r2]
    832a:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    832e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8332:	781a      	ldrb	r2, [r3, #0]
    8334:	f24b 43a2 	movw	r3, #46242	; 0xb4a2
    8338:	f2c2 0304 	movt	r3, #8196	; 0x2004
    833c:	781b      	ldrb	r3, [r3, #0]
    833e:	4413      	add	r3, r2
    8340:	b2da      	uxtb	r2, r3
    8342:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8346:	f2c2 0304 	movt	r3, #8196	; 0x2004
    834a:	701a      	strb	r2, [r3, #0]
    834c:	f24b 53be 	movw	r3, #46526	; 0xb5be
    8350:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8354:	781a      	ldrb	r2, [r3, #0]
    8356:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    835a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    835e:	781b      	ldrb	r3, [r3, #0]
    8360:	4413      	add	r3, r2
    8362:	b2da      	uxtb	r2, r3
    8364:	f24b 53be 	movw	r3, #46526	; 0xb5be
    8368:	f2c2 0304 	movt	r3, #8196	; 0x2004
    836c:	701a      	strb	r2, [r3, #0]
    836e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8372:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8376:	781b      	ldrb	r3, [r3, #0]
    8378:	3301      	adds	r3, #1
    837a:	b2da      	uxtb	r2, r3
    837c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8380:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8384:	701a      	strb	r2, [r3, #0]
    8386:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    838a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    838e:	781b      	ldrb	r3, [r3, #0]
    8390:	2bff      	cmp	r3, #255	; 0xff
    8392:	d105      	bne.n	83a0 <send_bat+0x1dc>
    8394:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8398:	f2c2 0304 	movt	r3, #8196	; 0x2004
    839c:	2200      	movs	r2, #0
    839e:	701a      	strb	r2, [r3, #0]
    83a0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    83a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83a8:	781b      	ldrb	r3, [r3, #0]
    83aa:	461a      	mov	r2, r3
    83ac:	f64b 239c 	movw	r3, #47772	; 0xba9c
    83b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83b4:	7819      	ldrb	r1, [r3, #0]
    83b6:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    83ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83be:	5499      	strb	r1, [r3, r2]
    83c0:	f64b 239c 	movw	r3, #47772	; 0xba9c
    83c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83c8:	781a      	ldrb	r2, [r3, #0]
    83ca:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    83ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83d2:	781b      	ldrb	r3, [r3, #0]
    83d4:	4413      	add	r3, r2
    83d6:	b2da      	uxtb	r2, r3
    83d8:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    83dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83e0:	701a      	strb	r2, [r3, #0]
    83e2:	f24b 53be 	movw	r3, #46526	; 0xb5be
    83e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83ea:	781a      	ldrb	r2, [r3, #0]
    83ec:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    83f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83f4:	781b      	ldrb	r3, [r3, #0]
    83f6:	4413      	add	r3, r2
    83f8:	b2da      	uxtb	r2, r3
    83fa:	f24b 53be 	movw	r3, #46526	; 0xb5be
    83fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8402:	701a      	strb	r2, [r3, #0]
    8404:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8408:	f2c2 0304 	movt	r3, #8196	; 0x2004
    840c:	781b      	ldrb	r3, [r3, #0]
    840e:	3301      	adds	r3, #1
    8410:	b2da      	uxtb	r2, r3
    8412:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8416:	f2c2 0304 	movt	r3, #8196	; 0x2004
    841a:	701a      	strb	r2, [r3, #0]
    841c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8420:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8424:	781b      	ldrb	r3, [r3, #0]
    8426:	2bff      	cmp	r3, #255	; 0xff
    8428:	d105      	bne.n	8436 <send_bat+0x272>
    842a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    842e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8432:	2200      	movs	r2, #0
    8434:	701a      	strb	r2, [r3, #0]
    8436:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    843a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    843e:	781b      	ldrb	r3, [r3, #0]
    8440:	461a      	mov	r2, r3
    8442:	f64b 239c 	movw	r3, #47772	; 0xba9c
    8446:	f2c2 0304 	movt	r3, #8196	; 0x2004
    844a:	7859      	ldrb	r1, [r3, #1]
    844c:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    8450:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8454:	5499      	strb	r1, [r3, r2]
    8456:	4bd5      	ldr	r3, [pc, #852]	; (87ac <send_bat+0x5e8>)
    8458:	781a      	ldrb	r2, [r3, #0]
    845a:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    845e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8462:	781b      	ldrb	r3, [r3, #0]
    8464:	4413      	add	r3, r2
    8466:	b2da      	uxtb	r2, r3
    8468:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    846c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8470:	701a      	strb	r2, [r3, #0]
    8472:	f24b 53be 	movw	r3, #46526	; 0xb5be
    8476:	f2c2 0304 	movt	r3, #8196	; 0x2004
    847a:	781a      	ldrb	r2, [r3, #0]
    847c:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8480:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8484:	781b      	ldrb	r3, [r3, #0]
    8486:	4413      	add	r3, r2
    8488:	b2da      	uxtb	r2, r3
    848a:	f24b 53be 	movw	r3, #46526	; 0xb5be
    848e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8492:	701a      	strb	r2, [r3, #0]
    8494:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8498:	f2c2 0304 	movt	r3, #8196	; 0x2004
    849c:	781b      	ldrb	r3, [r3, #0]
    849e:	3301      	adds	r3, #1
    84a0:	b2da      	uxtb	r2, r3
    84a2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    84a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84aa:	701a      	strb	r2, [r3, #0]
    84ac:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    84b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84b4:	781b      	ldrb	r3, [r3, #0]
    84b6:	2bff      	cmp	r3, #255	; 0xff
    84b8:	d105      	bne.n	84c6 <send_bat+0x302>
    84ba:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    84be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84c2:	2200      	movs	r2, #0
    84c4:	701a      	strb	r2, [r3, #0]
    84c6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    84ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84ce:	781b      	ldrb	r3, [r3, #0]
    84d0:	461a      	mov	r2, r3
    84d2:	f24b 43a5 	movw	r3, #46245	; 0xb4a5
    84d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84da:	7819      	ldrb	r1, [r3, #0]
    84dc:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    84e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84e4:	5499      	strb	r1, [r3, r2]
    84e6:	f24b 43a5 	movw	r3, #46245	; 0xb4a5
    84ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84ee:	781a      	ldrb	r2, [r3, #0]
    84f0:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    84f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84f8:	781b      	ldrb	r3, [r3, #0]
    84fa:	4413      	add	r3, r2
    84fc:	b2da      	uxtb	r2, r3
    84fe:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8502:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8506:	701a      	strb	r2, [r3, #0]
    8508:	f24b 53be 	movw	r3, #46526	; 0xb5be
    850c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8510:	781a      	ldrb	r2, [r3, #0]
    8512:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8516:	f2c2 0304 	movt	r3, #8196	; 0x2004
    851a:	781b      	ldrb	r3, [r3, #0]
    851c:	4413      	add	r3, r2
    851e:	b2da      	uxtb	r2, r3
    8520:	f24b 53be 	movw	r3, #46526	; 0xb5be
    8524:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8528:	701a      	strb	r2, [r3, #0]
    852a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    852e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8532:	781b      	ldrb	r3, [r3, #0]
    8534:	3301      	adds	r3, #1
    8536:	b2da      	uxtb	r2, r3
    8538:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    853c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8540:	701a      	strb	r2, [r3, #0]
    8542:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8546:	f2c2 0304 	movt	r3, #8196	; 0x2004
    854a:	781b      	ldrb	r3, [r3, #0]
    854c:	2bff      	cmp	r3, #255	; 0xff
    854e:	d105      	bne.n	855c <send_bat+0x398>
    8550:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8554:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8558:	2200      	movs	r2, #0
    855a:	701a      	strb	r2, [r3, #0]
    855c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8560:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8564:	781b      	ldrb	r3, [r3, #0]
    8566:	461a      	mov	r2, r3
    8568:	f64b 0326 	movw	r3, #47142	; 0xb826
    856c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8570:	7819      	ldrb	r1, [r3, #0]
    8572:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    8576:	f2c2 0304 	movt	r3, #8196	; 0x2004
    857a:	5499      	strb	r1, [r3, r2]
    857c:	f64b 0326 	movw	r3, #47142	; 0xb826
    8580:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8584:	781a      	ldrb	r2, [r3, #0]
    8586:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    858a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    858e:	781b      	ldrb	r3, [r3, #0]
    8590:	4413      	add	r3, r2
    8592:	b2da      	uxtb	r2, r3
    8594:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8598:	f2c2 0304 	movt	r3, #8196	; 0x2004
    859c:	701a      	strb	r2, [r3, #0]
    859e:	f24b 53be 	movw	r3, #46526	; 0xb5be
    85a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85a6:	781a      	ldrb	r2, [r3, #0]
    85a8:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    85ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85b0:	781b      	ldrb	r3, [r3, #0]
    85b2:	4413      	add	r3, r2
    85b4:	b2da      	uxtb	r2, r3
    85b6:	f24b 53be 	movw	r3, #46526	; 0xb5be
    85ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85be:	701a      	strb	r2, [r3, #0]
    85c0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    85c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85c8:	781b      	ldrb	r3, [r3, #0]
    85ca:	3301      	adds	r3, #1
    85cc:	b2da      	uxtb	r2, r3
    85ce:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    85d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85d6:	701a      	strb	r2, [r3, #0]
    85d8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    85dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85e0:	781b      	ldrb	r3, [r3, #0]
    85e2:	2bff      	cmp	r3, #255	; 0xff
    85e4:	d105      	bne.n	85f2 <send_bat+0x42e>
    85e6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    85ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85ee:	2200      	movs	r2, #0
    85f0:	701a      	strb	r2, [r3, #0]
    85f2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    85f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85fa:	781b      	ldrb	r3, [r3, #0]
    85fc:	461a      	mov	r2, r3
    85fe:	f64b 0326 	movw	r3, #47142	; 0xb826
    8602:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8606:	7859      	ldrb	r1, [r3, #1]
    8608:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    860c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8610:	5499      	strb	r1, [r3, r2]
    8612:	4b67      	ldr	r3, [pc, #412]	; (87b0 <send_bat+0x5ec>)
    8614:	781a      	ldrb	r2, [r3, #0]
    8616:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    861a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    861e:	781b      	ldrb	r3, [r3, #0]
    8620:	4413      	add	r3, r2
    8622:	b2da      	uxtb	r2, r3
    8624:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8628:	f2c2 0304 	movt	r3, #8196	; 0x2004
    862c:	701a      	strb	r2, [r3, #0]
    862e:	f24b 53be 	movw	r3, #46526	; 0xb5be
    8632:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8636:	781a      	ldrb	r2, [r3, #0]
    8638:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    863c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8640:	781b      	ldrb	r3, [r3, #0]
    8642:	4413      	add	r3, r2
    8644:	b2da      	uxtb	r2, r3
    8646:	f24b 53be 	movw	r3, #46526	; 0xb5be
    864a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    864e:	701a      	strb	r2, [r3, #0]
    8650:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8654:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8658:	781b      	ldrb	r3, [r3, #0]
    865a:	3301      	adds	r3, #1
    865c:	b2da      	uxtb	r2, r3
    865e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8662:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8666:	701a      	strb	r2, [r3, #0]
    8668:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    866c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8670:	781b      	ldrb	r3, [r3, #0]
    8672:	2bff      	cmp	r3, #255	; 0xff
    8674:	d105      	bne.n	8682 <send_bat+0x4be>
    8676:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    867a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    867e:	2200      	movs	r2, #0
    8680:	701a      	strb	r2, [r3, #0]
    8682:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8686:	f2c2 0304 	movt	r3, #8196	; 0x2004
    868a:	781b      	ldrb	r3, [r3, #0]
    868c:	461a      	mov	r2, r3
    868e:	f64b 0324 	movw	r3, #47140	; 0xb824
    8692:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8696:	7819      	ldrb	r1, [r3, #0]
    8698:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    869c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86a0:	5499      	strb	r1, [r3, r2]
    86a2:	f64b 0324 	movw	r3, #47140	; 0xb824
    86a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86aa:	781a      	ldrb	r2, [r3, #0]
    86ac:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    86b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86b4:	781b      	ldrb	r3, [r3, #0]
    86b6:	4413      	add	r3, r2
    86b8:	b2da      	uxtb	r2, r3
    86ba:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    86be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86c2:	701a      	strb	r2, [r3, #0]
    86c4:	f24b 53be 	movw	r3, #46526	; 0xb5be
    86c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86cc:	781a      	ldrb	r2, [r3, #0]
    86ce:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    86d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86d6:	781b      	ldrb	r3, [r3, #0]
    86d8:	4413      	add	r3, r2
    86da:	b2da      	uxtb	r2, r3
    86dc:	f24b 53be 	movw	r3, #46526	; 0xb5be
    86e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86e4:	701a      	strb	r2, [r3, #0]
    86e6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    86ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86ee:	781b      	ldrb	r3, [r3, #0]
    86f0:	3301      	adds	r3, #1
    86f2:	b2da      	uxtb	r2, r3
    86f4:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    86f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86fc:	701a      	strb	r2, [r3, #0]
    86fe:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8702:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8706:	781b      	ldrb	r3, [r3, #0]
    8708:	2bff      	cmp	r3, #255	; 0xff
    870a:	d105      	bne.n	8718 <send_bat+0x554>
    870c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8710:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8714:	2200      	movs	r2, #0
    8716:	701a      	strb	r2, [r3, #0]
    8718:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    871c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8720:	781b      	ldrb	r3, [r3, #0]
    8722:	461a      	mov	r2, r3
    8724:	f64b 0324 	movw	r3, #47140	; 0xb824
    8728:	f2c2 0304 	movt	r3, #8196	; 0x2004
    872c:	7859      	ldrb	r1, [r3, #1]
    872e:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    8732:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8736:	5499      	strb	r1, [r3, r2]
    8738:	4b1e      	ldr	r3, [pc, #120]	; (87b4 <send_bat+0x5f0>)
    873a:	781a      	ldrb	r2, [r3, #0]
    873c:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8740:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8744:	781b      	ldrb	r3, [r3, #0]
    8746:	4413      	add	r3, r2
    8748:	b2da      	uxtb	r2, r3
    874a:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    874e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8752:	701a      	strb	r2, [r3, #0]
    8754:	f24b 53be 	movw	r3, #46526	; 0xb5be
    8758:	f2c2 0304 	movt	r3, #8196	; 0x2004
    875c:	781a      	ldrb	r2, [r3, #0]
    875e:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8762:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8766:	781b      	ldrb	r3, [r3, #0]
    8768:	4413      	add	r3, r2
    876a:	b2da      	uxtb	r2, r3
    876c:	f24b 53be 	movw	r3, #46526	; 0xb5be
    8770:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8774:	701a      	strb	r2, [r3, #0]
    8776:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    877a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    877e:	781b      	ldrb	r3, [r3, #0]
    8780:	3301      	adds	r3, #1
    8782:	b2da      	uxtb	r2, r3
    8784:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8788:	f2c2 0304 	movt	r3, #8196	; 0x2004
    878c:	701a      	strb	r2, [r3, #0]
    878e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8792:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8796:	781b      	ldrb	r3, [r3, #0]
    8798:	2bff      	cmp	r3, #255	; 0xff
    879a:	d10d      	bne.n	87b8 <send_bat+0x5f4>
    879c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    87a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87a4:	2200      	movs	r2, #0
    87a6:	701a      	strb	r2, [r3, #0]
    87a8:	e006      	b.n	87b8 <send_bat+0x5f4>
    87aa:	bf00      	nop
    87ac:	2004ba9d 	.word	0x2004ba9d
    87b0:	2004b827 	.word	0x2004b827
    87b4:	2004b825 	.word	0x2004b825
    87b8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    87bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87c0:	781b      	ldrb	r3, [r3, #0]
    87c2:	461a      	mov	r2, r3
    87c4:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    87c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87cc:	7819      	ldrb	r1, [r3, #0]
    87ce:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    87d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87d6:	5499      	strb	r1, [r3, r2]
    87d8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    87dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87e0:	781b      	ldrb	r3, [r3, #0]
    87e2:	3301      	adds	r3, #1
    87e4:	b2da      	uxtb	r2, r3
    87e6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    87ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87ee:	701a      	strb	r2, [r3, #0]
    87f0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    87f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87f8:	781b      	ldrb	r3, [r3, #0]
    87fa:	2bff      	cmp	r3, #255	; 0xff
    87fc:	d105      	bne.n	880a <send_bat+0x646>
    87fe:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8802:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8806:	2200      	movs	r2, #0
    8808:	701a      	strb	r2, [r3, #0]
    880a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    880e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8812:	781b      	ldrb	r3, [r3, #0]
    8814:	461a      	mov	r2, r3
    8816:	f24b 53be 	movw	r3, #46526	; 0xb5be
    881a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    881e:	7819      	ldrb	r1, [r3, #0]
    8820:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    8824:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8828:	5499      	strb	r1, [r3, r2]
    882a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    882e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8832:	781b      	ldrb	r3, [r3, #0]
    8834:	3301      	adds	r3, #1
    8836:	b2da      	uxtb	r2, r3
    8838:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    883c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8840:	701a      	strb	r2, [r3, #0]
    8842:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8846:	f2c2 0304 	movt	r3, #8196	; 0x2004
    884a:	781b      	ldrb	r3, [r3, #0]
    884c:	2bff      	cmp	r3, #255	; 0xff
    884e:	d105      	bne.n	885c <send_bat+0x698>
    8850:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8854:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8858:	2200      	movs	r2, #0
    885a:	701a      	strb	r2, [r3, #0]
    885c:	f248 0339 	movw	r3, #32825	; 0x8039
    8860:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8864:	781b      	ldrb	r3, [r3, #0]
    8866:	b2db      	uxtb	r3, r3
    8868:	f003 0310 	and.w	r3, r3, #16
    886c:	2b00      	cmp	r3, #0
    886e:	d15a      	bne.n	8926 <send_bat+0x762>
    8870:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    8874:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8878:	781b      	ldrb	r3, [r3, #0]
    887a:	b2db      	uxtb	r3, r3
    887c:	461a      	mov	r2, r3
    887e:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    8882:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8886:	5c9a      	ldrb	r2, [r3, r2]
    8888:	f24b 53bb 	movw	r3, #46523	; 0xb5bb
    888c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8890:	701a      	strb	r2, [r3, #0]
    8892:	f24b 53bc 	movw	r3, #46524	; 0xb5bc
    8896:	f2c2 0304 	movt	r3, #8196	; 0x2004
    889a:	2200      	movs	r2, #0
    889c:	701a      	strb	r2, [r3, #0]
    889e:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    88a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88a6:	781b      	ldrb	r3, [r3, #0]
    88a8:	b2db      	uxtb	r3, r3
    88aa:	3301      	adds	r3, #1
    88ac:	b2da      	uxtb	r2, r3
    88ae:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    88b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88b6:	701a      	strb	r2, [r3, #0]
    88b8:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    88bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88c0:	781b      	ldrb	r3, [r3, #0]
    88c2:	b2db      	uxtb	r3, r3
    88c4:	2bff      	cmp	r3, #255	; 0xff
    88c6:	d105      	bne.n	88d4 <send_bat+0x710>
    88c8:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    88cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88d0:	2200      	movs	r2, #0
    88d2:	701a      	strb	r2, [r3, #0]
    88d4:	f248 0338 	movw	r3, #32824	; 0x8038
    88d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88dc:	f248 0238 	movw	r2, #32824	; 0x8038
    88e0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    88e4:	7812      	ldrb	r2, [r2, #0]
    88e6:	b2d2      	uxtb	r2, r2
    88e8:	f042 0201 	orr.w	r2, r2, #1
    88ec:	b2d2      	uxtb	r2, r2
    88ee:	701a      	strb	r2, [r3, #0]
    88f0:	f248 0339 	movw	r3, #32825	; 0x8039
    88f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88f8:	f248 0239 	movw	r2, #32825	; 0x8039
    88fc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8900:	7812      	ldrb	r2, [r2, #0]
    8902:	b2d2      	uxtb	r2, r2
    8904:	f042 0210 	orr.w	r2, r2, #16
    8908:	b2d2      	uxtb	r2, r2
    890a:	701a      	strb	r2, [r3, #0]
    890c:	e00b      	b.n	8926 <send_bat+0x762>
    890e:	f24b 43b8 	movw	r3, #46264	; 0xb4b8
    8912:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8916:	781b      	ldrb	r3, [r3, #0]
    8918:	3301      	adds	r3, #1
    891a:	b2da      	uxtb	r2, r3
    891c:	f24b 43b8 	movw	r3, #46264	; 0xb4b8
    8920:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8924:	701a      	strb	r2, [r3, #0]
}
    8926:	46bd      	mov	sp, r7
    8928:	f85d 7b04 	ldr.w	r7, [sp], #4
    892c:	4770      	bx	lr
    892e:	bf00      	nop

00008930 <send_climb>:
void send_climb(void){  //2000ms
    8930:	b480      	push	{r7}
    8932:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 20 == 18) PERIODIC_SEND_CLIMB_PID();}
    8934:	f24b 43b1 	movw	r3, #46257	; 0xb4b1
    8938:	f2c2 0304 	movt	r3, #8196	; 0x2004
    893c:	781a      	ldrb	r2, [r3, #0]
    893e:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    8942:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    8946:	fba3 1302 	umull	r1, r3, r3, r2
    894a:	0919      	lsrs	r1, r3, #4
    894c:	460b      	mov	r3, r1
    894e:	009b      	lsls	r3, r3, #2
    8950:	440b      	add	r3, r1
    8952:	009b      	lsls	r3, r3, #2
    8954:	1ad3      	subs	r3, r2, r3
    8956:	b2db      	uxtb	r3, r3
    8958:	2b12      	cmp	r3, #18
    895a:	f040 8554 	bne.w	9406 <send_climb+0xad6>
    895e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8962:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8966:	781a      	ldrb	r2, [r3, #0]
    8968:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    896c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8970:	781b      	ldrb	r3, [r3, #0]
    8972:	b2db      	uxtb	r3, r3
    8974:	429a      	cmp	r2, r3
    8976:	d313      	bcc.n	89a0 <send_climb+0x70>
    8978:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    897c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8980:	781b      	ldrb	r3, [r3, #0]
    8982:	b2db      	uxtb	r3, r3
    8984:	461a      	mov	r2, r3
    8986:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    898a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    898e:	781b      	ldrb	r3, [r3, #0]
    8990:	1ad3      	subs	r3, r2, r3
    8992:	33ff      	adds	r3, #255	; 0xff
    8994:	2b12      	cmp	r3, #18
    8996:	bfd4      	ite	le
    8998:	2300      	movle	r3, #0
    899a:	2301      	movgt	r3, #1
    899c:	b2db      	uxtb	r3, r3
    899e:	e011      	b.n	89c4 <send_climb+0x94>
    89a0:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    89a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89a8:	781b      	ldrb	r3, [r3, #0]
    89aa:	b2db      	uxtb	r3, r3
    89ac:	461a      	mov	r2, r3
    89ae:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    89b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89b6:	781b      	ldrb	r3, [r3, #0]
    89b8:	1ad3      	subs	r3, r2, r3
    89ba:	2b12      	cmp	r3, #18
    89bc:	bfd4      	ite	le
    89be:	2300      	movle	r3, #0
    89c0:	2301      	movgt	r3, #1
    89c2:	b2db      	uxtb	r3, r3
    89c4:	2b00      	cmp	r3, #0
    89c6:	f000 8512 	beq.w	93ee <send_climb+0xabe>
    89ca:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    89ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89d2:	781b      	ldrb	r3, [r3, #0]
    89d4:	461a      	mov	r2, r3
    89d6:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    89da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89de:	2105      	movs	r1, #5
    89e0:	5499      	strb	r1, [r3, r2]
    89e2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    89e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89ea:	781b      	ldrb	r3, [r3, #0]
    89ec:	3301      	adds	r3, #1
    89ee:	b2da      	uxtb	r2, r3
    89f0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    89f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89f8:	701a      	strb	r2, [r3, #0]
    89fa:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    89fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a02:	781b      	ldrb	r3, [r3, #0]
    8a04:	2bff      	cmp	r3, #255	; 0xff
    8a06:	d105      	bne.n	8a14 <send_climb+0xe4>
    8a08:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8a0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a10:	2200      	movs	r2, #0
    8a12:	701a      	strb	r2, [r3, #0]
    8a14:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8a18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a1c:	781b      	ldrb	r3, [r3, #0]
    8a1e:	461a      	mov	r2, r3
    8a20:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    8a24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a28:	210e      	movs	r1, #14
    8a2a:	5499      	strb	r1, [r3, r2]
    8a2c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8a30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a34:	781b      	ldrb	r3, [r3, #0]
    8a36:	3301      	adds	r3, #1
    8a38:	b2da      	uxtb	r2, r3
    8a3a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8a3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a42:	701a      	strb	r2, [r3, #0]
    8a44:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8a48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a4c:	781b      	ldrb	r3, [r3, #0]
    8a4e:	2bff      	cmp	r3, #255	; 0xff
    8a50:	d105      	bne.n	8a5e <send_climb+0x12e>
    8a52:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8a56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a5a:	2200      	movs	r2, #0
    8a5c:	701a      	strb	r2, [r3, #0]
    8a5e:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8a62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a66:	220e      	movs	r2, #14
    8a68:	701a      	strb	r2, [r3, #0]
    8a6a:	f24b 53be 	movw	r3, #46526	; 0xb5be
    8a6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a72:	220e      	movs	r2, #14
    8a74:	701a      	strb	r2, [r3, #0]
    8a76:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8a7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a7e:	781b      	ldrb	r3, [r3, #0]
    8a80:	461a      	mov	r2, r3
    8a82:	f24b 73ec 	movw	r3, #47084	; 0xb7ec
    8a86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a8a:	7819      	ldrb	r1, [r3, #0]
    8a8c:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    8a90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a94:	5499      	strb	r1, [r3, r2]
    8a96:	f24b 73ec 	movw	r3, #47084	; 0xb7ec
    8a9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a9e:	781a      	ldrb	r2, [r3, #0]
    8aa0:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8aa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8aa8:	781b      	ldrb	r3, [r3, #0]
    8aaa:	4413      	add	r3, r2
    8aac:	b2da      	uxtb	r2, r3
    8aae:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8ab2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ab6:	701a      	strb	r2, [r3, #0]
    8ab8:	f24b 53be 	movw	r3, #46526	; 0xb5be
    8abc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ac0:	781a      	ldrb	r2, [r3, #0]
    8ac2:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8ac6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8aca:	781b      	ldrb	r3, [r3, #0]
    8acc:	4413      	add	r3, r2
    8ace:	b2da      	uxtb	r2, r3
    8ad0:	f24b 53be 	movw	r3, #46526	; 0xb5be
    8ad4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ad8:	701a      	strb	r2, [r3, #0]
    8ada:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8ade:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ae2:	781b      	ldrb	r3, [r3, #0]
    8ae4:	3301      	adds	r3, #1
    8ae6:	b2da      	uxtb	r2, r3
    8ae8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8aec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8af0:	701a      	strb	r2, [r3, #0]
    8af2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8af6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8afa:	781b      	ldrb	r3, [r3, #0]
    8afc:	2bff      	cmp	r3, #255	; 0xff
    8afe:	d105      	bne.n	8b0c <send_climb+0x1dc>
    8b00:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8b04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b08:	2200      	movs	r2, #0
    8b0a:	701a      	strb	r2, [r3, #0]
    8b0c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8b10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b14:	781b      	ldrb	r3, [r3, #0]
    8b16:	461a      	mov	r2, r3
    8b18:	f24b 73ec 	movw	r3, #47084	; 0xb7ec
    8b1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b20:	7859      	ldrb	r1, [r3, #1]
    8b22:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    8b26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b2a:	5499      	strb	r1, [r3, r2]
    8b2c:	4bd3      	ldr	r3, [pc, #844]	; (8e7c <send_climb+0x54c>)
    8b2e:	781a      	ldrb	r2, [r3, #0]
    8b30:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8b34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b38:	781b      	ldrb	r3, [r3, #0]
    8b3a:	4413      	add	r3, r2
    8b3c:	b2da      	uxtb	r2, r3
    8b3e:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8b42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b46:	701a      	strb	r2, [r3, #0]
    8b48:	f24b 53be 	movw	r3, #46526	; 0xb5be
    8b4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b50:	781a      	ldrb	r2, [r3, #0]
    8b52:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8b56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b5a:	781b      	ldrb	r3, [r3, #0]
    8b5c:	4413      	add	r3, r2
    8b5e:	b2da      	uxtb	r2, r3
    8b60:	f24b 53be 	movw	r3, #46526	; 0xb5be
    8b64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b68:	701a      	strb	r2, [r3, #0]
    8b6a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8b6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b72:	781b      	ldrb	r3, [r3, #0]
    8b74:	3301      	adds	r3, #1
    8b76:	b2da      	uxtb	r2, r3
    8b78:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8b7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b80:	701a      	strb	r2, [r3, #0]
    8b82:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8b86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b8a:	781b      	ldrb	r3, [r3, #0]
    8b8c:	2bff      	cmp	r3, #255	; 0xff
    8b8e:	d105      	bne.n	8b9c <send_climb+0x26c>
    8b90:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8b94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b98:	2200      	movs	r2, #0
    8b9a:	701a      	strb	r2, [r3, #0]
    8b9c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8ba0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ba4:	781b      	ldrb	r3, [r3, #0]
    8ba6:	461a      	mov	r2, r3
    8ba8:	f64b 0300 	movw	r3, #47104	; 0xb800
    8bac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bb0:	7819      	ldrb	r1, [r3, #0]
    8bb2:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    8bb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bba:	5499      	strb	r1, [r3, r2]
    8bbc:	f64b 0300 	movw	r3, #47104	; 0xb800
    8bc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bc4:	781a      	ldrb	r2, [r3, #0]
    8bc6:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8bca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bce:	781b      	ldrb	r3, [r3, #0]
    8bd0:	4413      	add	r3, r2
    8bd2:	b2da      	uxtb	r2, r3
    8bd4:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8bd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bdc:	701a      	strb	r2, [r3, #0]
    8bde:	f24b 53be 	movw	r3, #46526	; 0xb5be
    8be2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8be6:	781a      	ldrb	r2, [r3, #0]
    8be8:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8bec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bf0:	781b      	ldrb	r3, [r3, #0]
    8bf2:	4413      	add	r3, r2
    8bf4:	b2da      	uxtb	r2, r3
    8bf6:	f24b 53be 	movw	r3, #46526	; 0xb5be
    8bfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bfe:	701a      	strb	r2, [r3, #0]
    8c00:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8c04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c08:	781b      	ldrb	r3, [r3, #0]
    8c0a:	3301      	adds	r3, #1
    8c0c:	b2da      	uxtb	r2, r3
    8c0e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8c12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c16:	701a      	strb	r2, [r3, #0]
    8c18:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8c1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c20:	781b      	ldrb	r3, [r3, #0]
    8c22:	2bff      	cmp	r3, #255	; 0xff
    8c24:	d105      	bne.n	8c32 <send_climb+0x302>
    8c26:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8c2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c2e:	2200      	movs	r2, #0
    8c30:	701a      	strb	r2, [r3, #0]
    8c32:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8c36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c3a:	781b      	ldrb	r3, [r3, #0]
    8c3c:	461a      	mov	r2, r3
    8c3e:	f64b 0300 	movw	r3, #47104	; 0xb800
    8c42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c46:	7859      	ldrb	r1, [r3, #1]
    8c48:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    8c4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c50:	5499      	strb	r1, [r3, r2]
    8c52:	4b8b      	ldr	r3, [pc, #556]	; (8e80 <send_climb+0x550>)
    8c54:	781a      	ldrb	r2, [r3, #0]
    8c56:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8c5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c5e:	781b      	ldrb	r3, [r3, #0]
    8c60:	4413      	add	r3, r2
    8c62:	b2da      	uxtb	r2, r3
    8c64:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8c68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c6c:	701a      	strb	r2, [r3, #0]
    8c6e:	f24b 53be 	movw	r3, #46526	; 0xb5be
    8c72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c76:	781a      	ldrb	r2, [r3, #0]
    8c78:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8c7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c80:	781b      	ldrb	r3, [r3, #0]
    8c82:	4413      	add	r3, r2
    8c84:	b2da      	uxtb	r2, r3
    8c86:	f24b 53be 	movw	r3, #46526	; 0xb5be
    8c8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c8e:	701a      	strb	r2, [r3, #0]
    8c90:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8c94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c98:	781b      	ldrb	r3, [r3, #0]
    8c9a:	3301      	adds	r3, #1
    8c9c:	b2da      	uxtb	r2, r3
    8c9e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8ca2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ca6:	701a      	strb	r2, [r3, #0]
    8ca8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8cac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cb0:	781b      	ldrb	r3, [r3, #0]
    8cb2:	2bff      	cmp	r3, #255	; 0xff
    8cb4:	d105      	bne.n	8cc2 <send_climb+0x392>
    8cb6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8cba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cbe:	2200      	movs	r2, #0
    8cc0:	701a      	strb	r2, [r3, #0]
    8cc2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8cc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cca:	781b      	ldrb	r3, [r3, #0]
    8ccc:	461a      	mov	r2, r3
    8cce:	f64b 0300 	movw	r3, #47104	; 0xb800
    8cd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cd6:	7899      	ldrb	r1, [r3, #2]
    8cd8:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    8cdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ce0:	5499      	strb	r1, [r3, r2]
    8ce2:	4b68      	ldr	r3, [pc, #416]	; (8e84 <send_climb+0x554>)
    8ce4:	781a      	ldrb	r2, [r3, #0]
    8ce6:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8cea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cee:	781b      	ldrb	r3, [r3, #0]
    8cf0:	4413      	add	r3, r2
    8cf2:	b2da      	uxtb	r2, r3
    8cf4:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8cf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cfc:	701a      	strb	r2, [r3, #0]
    8cfe:	f24b 53be 	movw	r3, #46526	; 0xb5be
    8d02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d06:	781a      	ldrb	r2, [r3, #0]
    8d08:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8d0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d10:	781b      	ldrb	r3, [r3, #0]
    8d12:	4413      	add	r3, r2
    8d14:	b2da      	uxtb	r2, r3
    8d16:	f24b 53be 	movw	r3, #46526	; 0xb5be
    8d1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d1e:	701a      	strb	r2, [r3, #0]
    8d20:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8d24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d28:	781b      	ldrb	r3, [r3, #0]
    8d2a:	3301      	adds	r3, #1
    8d2c:	b2da      	uxtb	r2, r3
    8d2e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8d32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d36:	701a      	strb	r2, [r3, #0]
    8d38:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8d3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d40:	781b      	ldrb	r3, [r3, #0]
    8d42:	2bff      	cmp	r3, #255	; 0xff
    8d44:	d105      	bne.n	8d52 <send_climb+0x422>
    8d46:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8d4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d4e:	2200      	movs	r2, #0
    8d50:	701a      	strb	r2, [r3, #0]
    8d52:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8d56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d5a:	781b      	ldrb	r3, [r3, #0]
    8d5c:	461a      	mov	r2, r3
    8d5e:	f64b 0300 	movw	r3, #47104	; 0xb800
    8d62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d66:	78d9      	ldrb	r1, [r3, #3]
    8d68:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    8d6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d70:	5499      	strb	r1, [r3, r2]
    8d72:	4b45      	ldr	r3, [pc, #276]	; (8e88 <send_climb+0x558>)
    8d74:	781a      	ldrb	r2, [r3, #0]
    8d76:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8d7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d7e:	781b      	ldrb	r3, [r3, #0]
    8d80:	4413      	add	r3, r2
    8d82:	b2da      	uxtb	r2, r3
    8d84:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8d88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d8c:	701a      	strb	r2, [r3, #0]
    8d8e:	f24b 53be 	movw	r3, #46526	; 0xb5be
    8d92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d96:	781a      	ldrb	r2, [r3, #0]
    8d98:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8d9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8da0:	781b      	ldrb	r3, [r3, #0]
    8da2:	4413      	add	r3, r2
    8da4:	b2da      	uxtb	r2, r3
    8da6:	f24b 53be 	movw	r3, #46526	; 0xb5be
    8daa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dae:	701a      	strb	r2, [r3, #0]
    8db0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8db4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8db8:	781b      	ldrb	r3, [r3, #0]
    8dba:	3301      	adds	r3, #1
    8dbc:	b2da      	uxtb	r2, r3
    8dbe:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8dc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dc6:	701a      	strb	r2, [r3, #0]
    8dc8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8dcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dd0:	781b      	ldrb	r3, [r3, #0]
    8dd2:	2bff      	cmp	r3, #255	; 0xff
    8dd4:	d105      	bne.n	8de2 <send_climb+0x4b2>
    8dd6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8dda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dde:	2200      	movs	r2, #0
    8de0:	701a      	strb	r2, [r3, #0]
    8de2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8de6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dea:	781b      	ldrb	r3, [r3, #0]
    8dec:	461a      	mov	r2, r3
    8dee:	f64b 0308 	movw	r3, #47112	; 0xb808
    8df2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8df6:	7819      	ldrb	r1, [r3, #0]
    8df8:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    8dfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e00:	5499      	strb	r1, [r3, r2]
    8e02:	f64b 0308 	movw	r3, #47112	; 0xb808
    8e06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e0a:	781a      	ldrb	r2, [r3, #0]
    8e0c:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8e10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e14:	781b      	ldrb	r3, [r3, #0]
    8e16:	4413      	add	r3, r2
    8e18:	b2da      	uxtb	r2, r3
    8e1a:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8e1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e22:	701a      	strb	r2, [r3, #0]
    8e24:	f24b 53be 	movw	r3, #46526	; 0xb5be
    8e28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e2c:	781a      	ldrb	r2, [r3, #0]
    8e2e:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8e32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e36:	781b      	ldrb	r3, [r3, #0]
    8e38:	4413      	add	r3, r2
    8e3a:	b2da      	uxtb	r2, r3
    8e3c:	f24b 53be 	movw	r3, #46526	; 0xb5be
    8e40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e44:	701a      	strb	r2, [r3, #0]
    8e46:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8e4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e4e:	781b      	ldrb	r3, [r3, #0]
    8e50:	3301      	adds	r3, #1
    8e52:	b2da      	uxtb	r2, r3
    8e54:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8e58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e5c:	701a      	strb	r2, [r3, #0]
    8e5e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8e62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e66:	781b      	ldrb	r3, [r3, #0]
    8e68:	2bff      	cmp	r3, #255	; 0xff
    8e6a:	d10f      	bne.n	8e8c <send_climb+0x55c>
    8e6c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8e70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e74:	2200      	movs	r2, #0
    8e76:	701a      	strb	r2, [r3, #0]
    8e78:	e008      	b.n	8e8c <send_climb+0x55c>
    8e7a:	bf00      	nop
    8e7c:	2004b7ed 	.word	0x2004b7ed
    8e80:	2004b801 	.word	0x2004b801
    8e84:	2004b802 	.word	0x2004b802
    8e88:	2004b803 	.word	0x2004b803
    8e8c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8e90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e94:	781b      	ldrb	r3, [r3, #0]
    8e96:	461a      	mov	r2, r3
    8e98:	f64b 0308 	movw	r3, #47112	; 0xb808
    8e9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ea0:	7859      	ldrb	r1, [r3, #1]
    8ea2:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    8ea6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8eaa:	5499      	strb	r1, [r3, r2]
    8eac:	4bd1      	ldr	r3, [pc, #836]	; (91f4 <send_climb+0x8c4>)
    8eae:	781a      	ldrb	r2, [r3, #0]
    8eb0:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8eb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8eb8:	781b      	ldrb	r3, [r3, #0]
    8eba:	4413      	add	r3, r2
    8ebc:	b2da      	uxtb	r2, r3
    8ebe:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8ec2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ec6:	701a      	strb	r2, [r3, #0]
    8ec8:	f24b 53be 	movw	r3, #46526	; 0xb5be
    8ecc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ed0:	781a      	ldrb	r2, [r3, #0]
    8ed2:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8ed6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8eda:	781b      	ldrb	r3, [r3, #0]
    8edc:	4413      	add	r3, r2
    8ede:	b2da      	uxtb	r2, r3
    8ee0:	f24b 53be 	movw	r3, #46526	; 0xb5be
    8ee4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ee8:	701a      	strb	r2, [r3, #0]
    8eea:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8eee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ef2:	781b      	ldrb	r3, [r3, #0]
    8ef4:	3301      	adds	r3, #1
    8ef6:	b2da      	uxtb	r2, r3
    8ef8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8efc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f00:	701a      	strb	r2, [r3, #0]
    8f02:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8f06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f0a:	781b      	ldrb	r3, [r3, #0]
    8f0c:	2bff      	cmp	r3, #255	; 0xff
    8f0e:	d105      	bne.n	8f1c <send_climb+0x5ec>
    8f10:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8f14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f18:	2200      	movs	r2, #0
    8f1a:	701a      	strb	r2, [r3, #0]
    8f1c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8f20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f24:	781b      	ldrb	r3, [r3, #0]
    8f26:	461a      	mov	r2, r3
    8f28:	f64b 0308 	movw	r3, #47112	; 0xb808
    8f2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f30:	7899      	ldrb	r1, [r3, #2]
    8f32:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    8f36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f3a:	5499      	strb	r1, [r3, r2]
    8f3c:	4bae      	ldr	r3, [pc, #696]	; (91f8 <send_climb+0x8c8>)
    8f3e:	781a      	ldrb	r2, [r3, #0]
    8f40:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8f44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f48:	781b      	ldrb	r3, [r3, #0]
    8f4a:	4413      	add	r3, r2
    8f4c:	b2da      	uxtb	r2, r3
    8f4e:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8f52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f56:	701a      	strb	r2, [r3, #0]
    8f58:	f24b 53be 	movw	r3, #46526	; 0xb5be
    8f5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f60:	781a      	ldrb	r2, [r3, #0]
    8f62:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8f66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f6a:	781b      	ldrb	r3, [r3, #0]
    8f6c:	4413      	add	r3, r2
    8f6e:	b2da      	uxtb	r2, r3
    8f70:	f24b 53be 	movw	r3, #46526	; 0xb5be
    8f74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f78:	701a      	strb	r2, [r3, #0]
    8f7a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8f7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f82:	781b      	ldrb	r3, [r3, #0]
    8f84:	3301      	adds	r3, #1
    8f86:	b2da      	uxtb	r2, r3
    8f88:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8f8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f90:	701a      	strb	r2, [r3, #0]
    8f92:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8f96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f9a:	781b      	ldrb	r3, [r3, #0]
    8f9c:	2bff      	cmp	r3, #255	; 0xff
    8f9e:	d105      	bne.n	8fac <send_climb+0x67c>
    8fa0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8fa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fa8:	2200      	movs	r2, #0
    8faa:	701a      	strb	r2, [r3, #0]
    8fac:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8fb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fb4:	781b      	ldrb	r3, [r3, #0]
    8fb6:	461a      	mov	r2, r3
    8fb8:	f64b 0308 	movw	r3, #47112	; 0xb808
    8fbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fc0:	78d9      	ldrb	r1, [r3, #3]
    8fc2:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    8fc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fca:	5499      	strb	r1, [r3, r2]
    8fcc:	4b8b      	ldr	r3, [pc, #556]	; (91fc <send_climb+0x8cc>)
    8fce:	781a      	ldrb	r2, [r3, #0]
    8fd0:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8fd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fd8:	781b      	ldrb	r3, [r3, #0]
    8fda:	4413      	add	r3, r2
    8fdc:	b2da      	uxtb	r2, r3
    8fde:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8fe2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fe6:	701a      	strb	r2, [r3, #0]
    8fe8:	f24b 53be 	movw	r3, #46526	; 0xb5be
    8fec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ff0:	781a      	ldrb	r2, [r3, #0]
    8ff2:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    8ff6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ffa:	781b      	ldrb	r3, [r3, #0]
    8ffc:	4413      	add	r3, r2
    8ffe:	b2da      	uxtb	r2, r3
    9000:	f24b 53be 	movw	r3, #46526	; 0xb5be
    9004:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9008:	701a      	strb	r2, [r3, #0]
    900a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    900e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9012:	781b      	ldrb	r3, [r3, #0]
    9014:	3301      	adds	r3, #1
    9016:	b2da      	uxtb	r2, r3
    9018:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    901c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9020:	701a      	strb	r2, [r3, #0]
    9022:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9026:	f2c2 0304 	movt	r3, #8196	; 0x2004
    902a:	781b      	ldrb	r3, [r3, #0]
    902c:	2bff      	cmp	r3, #255	; 0xff
    902e:	d105      	bne.n	903c <send_climb+0x70c>
    9030:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9034:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9038:	2200      	movs	r2, #0
    903a:	701a      	strb	r2, [r3, #0]
    903c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9040:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9044:	781b      	ldrb	r3, [r3, #0]
    9046:	461a      	mov	r2, r3
    9048:	f643 03fc 	movw	r3, #14588	; 0x38fc
    904c:	f2c0 0301 	movt	r3, #1
    9050:	7819      	ldrb	r1, [r3, #0]
    9052:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    9056:	f2c2 0304 	movt	r3, #8196	; 0x2004
    905a:	5499      	strb	r1, [r3, r2]
    905c:	f643 03fc 	movw	r3, #14588	; 0x38fc
    9060:	f2c0 0301 	movt	r3, #1
    9064:	781a      	ldrb	r2, [r3, #0]
    9066:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    906a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    906e:	781b      	ldrb	r3, [r3, #0]
    9070:	4413      	add	r3, r2
    9072:	b2da      	uxtb	r2, r3
    9074:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    9078:	f2c2 0304 	movt	r3, #8196	; 0x2004
    907c:	701a      	strb	r2, [r3, #0]
    907e:	f24b 53be 	movw	r3, #46526	; 0xb5be
    9082:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9086:	781a      	ldrb	r2, [r3, #0]
    9088:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    908c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9090:	781b      	ldrb	r3, [r3, #0]
    9092:	4413      	add	r3, r2
    9094:	b2da      	uxtb	r2, r3
    9096:	f24b 53be 	movw	r3, #46526	; 0xb5be
    909a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    909e:	701a      	strb	r2, [r3, #0]
    90a0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    90a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90a8:	781b      	ldrb	r3, [r3, #0]
    90aa:	3301      	adds	r3, #1
    90ac:	b2da      	uxtb	r2, r3
    90ae:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    90b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90b6:	701a      	strb	r2, [r3, #0]
    90b8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    90bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90c0:	781b      	ldrb	r3, [r3, #0]
    90c2:	2bff      	cmp	r3, #255	; 0xff
    90c4:	d105      	bne.n	90d2 <send_climb+0x7a2>
    90c6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    90ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90ce:	2200      	movs	r2, #0
    90d0:	701a      	strb	r2, [r3, #0]
    90d2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    90d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90da:	781b      	ldrb	r3, [r3, #0]
    90dc:	461a      	mov	r2, r3
    90de:	f643 03fc 	movw	r3, #14588	; 0x38fc
    90e2:	f2c0 0301 	movt	r3, #1
    90e6:	7859      	ldrb	r1, [r3, #1]
    90e8:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    90ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90f0:	5499      	strb	r1, [r3, r2]
    90f2:	4b43      	ldr	r3, [pc, #268]	; (9200 <send_climb+0x8d0>)
    90f4:	781a      	ldrb	r2, [r3, #0]
    90f6:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    90fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90fe:	781b      	ldrb	r3, [r3, #0]
    9100:	4413      	add	r3, r2
    9102:	b2da      	uxtb	r2, r3
    9104:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    9108:	f2c2 0304 	movt	r3, #8196	; 0x2004
    910c:	701a      	strb	r2, [r3, #0]
    910e:	f24b 53be 	movw	r3, #46526	; 0xb5be
    9112:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9116:	781a      	ldrb	r2, [r3, #0]
    9118:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    911c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9120:	781b      	ldrb	r3, [r3, #0]
    9122:	4413      	add	r3, r2
    9124:	b2da      	uxtb	r2, r3
    9126:	f24b 53be 	movw	r3, #46526	; 0xb5be
    912a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    912e:	701a      	strb	r2, [r3, #0]
    9130:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9134:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9138:	781b      	ldrb	r3, [r3, #0]
    913a:	3301      	adds	r3, #1
    913c:	b2da      	uxtb	r2, r3
    913e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9142:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9146:	701a      	strb	r2, [r3, #0]
    9148:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    914c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9150:	781b      	ldrb	r3, [r3, #0]
    9152:	2bff      	cmp	r3, #255	; 0xff
    9154:	d105      	bne.n	9162 <send_climb+0x832>
    9156:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    915a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    915e:	2200      	movs	r2, #0
    9160:	701a      	strb	r2, [r3, #0]
    9162:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9166:	f2c2 0304 	movt	r3, #8196	; 0x2004
    916a:	781b      	ldrb	r3, [r3, #0]
    916c:	461a      	mov	r2, r3
    916e:	f643 03fc 	movw	r3, #14588	; 0x38fc
    9172:	f2c0 0301 	movt	r3, #1
    9176:	7899      	ldrb	r1, [r3, #2]
    9178:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    917c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9180:	5499      	strb	r1, [r3, r2]
    9182:	4b20      	ldr	r3, [pc, #128]	; (9204 <send_climb+0x8d4>)
    9184:	781a      	ldrb	r2, [r3, #0]
    9186:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    918a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    918e:	781b      	ldrb	r3, [r3, #0]
    9190:	4413      	add	r3, r2
    9192:	b2da      	uxtb	r2, r3
    9194:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    9198:	f2c2 0304 	movt	r3, #8196	; 0x2004
    919c:	701a      	strb	r2, [r3, #0]
    919e:	f24b 53be 	movw	r3, #46526	; 0xb5be
    91a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91a6:	781a      	ldrb	r2, [r3, #0]
    91a8:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    91ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91b0:	781b      	ldrb	r3, [r3, #0]
    91b2:	4413      	add	r3, r2
    91b4:	b2da      	uxtb	r2, r3
    91b6:	f24b 53be 	movw	r3, #46526	; 0xb5be
    91ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91be:	701a      	strb	r2, [r3, #0]
    91c0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    91c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91c8:	781b      	ldrb	r3, [r3, #0]
    91ca:	3301      	adds	r3, #1
    91cc:	b2da      	uxtb	r2, r3
    91ce:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    91d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91d6:	701a      	strb	r2, [r3, #0]
    91d8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    91dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91e0:	781b      	ldrb	r3, [r3, #0]
    91e2:	2bff      	cmp	r3, #255	; 0xff
    91e4:	d110      	bne.n	9208 <send_climb+0x8d8>
    91e6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    91ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91ee:	2200      	movs	r2, #0
    91f0:	701a      	strb	r2, [r3, #0]
    91f2:	e009      	b.n	9208 <send_climb+0x8d8>
    91f4:	2004b809 	.word	0x2004b809
    91f8:	2004b80a 	.word	0x2004b80a
    91fc:	2004b80b 	.word	0x2004b80b
    9200:	000138fd 	.word	0x000138fd
    9204:	000138fe 	.word	0x000138fe
    9208:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    920c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9210:	781b      	ldrb	r3, [r3, #0]
    9212:	461a      	mov	r2, r3
    9214:	f643 03fc 	movw	r3, #14588	; 0x38fc
    9218:	f2c0 0301 	movt	r3, #1
    921c:	78d9      	ldrb	r1, [r3, #3]
    921e:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    9222:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9226:	5499      	strb	r1, [r3, r2]
    9228:	4b79      	ldr	r3, [pc, #484]	; (9410 <send_climb+0xae0>)
    922a:	781a      	ldrb	r2, [r3, #0]
    922c:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    9230:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9234:	781b      	ldrb	r3, [r3, #0]
    9236:	4413      	add	r3, r2
    9238:	b2da      	uxtb	r2, r3
    923a:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    923e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9242:	701a      	strb	r2, [r3, #0]
    9244:	f24b 53be 	movw	r3, #46526	; 0xb5be
    9248:	f2c2 0304 	movt	r3, #8196	; 0x2004
    924c:	781a      	ldrb	r2, [r3, #0]
    924e:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    9252:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9256:	781b      	ldrb	r3, [r3, #0]
    9258:	4413      	add	r3, r2
    925a:	b2da      	uxtb	r2, r3
    925c:	f24b 53be 	movw	r3, #46526	; 0xb5be
    9260:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9264:	701a      	strb	r2, [r3, #0]
    9266:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    926a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    926e:	781b      	ldrb	r3, [r3, #0]
    9270:	3301      	adds	r3, #1
    9272:	b2da      	uxtb	r2, r3
    9274:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9278:	f2c2 0304 	movt	r3, #8196	; 0x2004
    927c:	701a      	strb	r2, [r3, #0]
    927e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9282:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9286:	781b      	ldrb	r3, [r3, #0]
    9288:	2bff      	cmp	r3, #255	; 0xff
    928a:	d105      	bne.n	9298 <send_climb+0x968>
    928c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9290:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9294:	2200      	movs	r2, #0
    9296:	701a      	strb	r2, [r3, #0]
    9298:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    929c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92a0:	781b      	ldrb	r3, [r3, #0]
    92a2:	461a      	mov	r2, r3
    92a4:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    92a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92ac:	7819      	ldrb	r1, [r3, #0]
    92ae:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    92b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92b6:	5499      	strb	r1, [r3, r2]
    92b8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    92bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92c0:	781b      	ldrb	r3, [r3, #0]
    92c2:	3301      	adds	r3, #1
    92c4:	b2da      	uxtb	r2, r3
    92c6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    92ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92ce:	701a      	strb	r2, [r3, #0]
    92d0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    92d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92d8:	781b      	ldrb	r3, [r3, #0]
    92da:	2bff      	cmp	r3, #255	; 0xff
    92dc:	d105      	bne.n	92ea <send_climb+0x9ba>
    92de:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    92e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92e6:	2200      	movs	r2, #0
    92e8:	701a      	strb	r2, [r3, #0]
    92ea:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    92ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92f2:	781b      	ldrb	r3, [r3, #0]
    92f4:	461a      	mov	r2, r3
    92f6:	f24b 53be 	movw	r3, #46526	; 0xb5be
    92fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92fe:	7819      	ldrb	r1, [r3, #0]
    9300:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    9304:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9308:	5499      	strb	r1, [r3, r2]
    930a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    930e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9312:	781b      	ldrb	r3, [r3, #0]
    9314:	3301      	adds	r3, #1
    9316:	b2da      	uxtb	r2, r3
    9318:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    931c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9320:	701a      	strb	r2, [r3, #0]
    9322:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9326:	f2c2 0304 	movt	r3, #8196	; 0x2004
    932a:	781b      	ldrb	r3, [r3, #0]
    932c:	2bff      	cmp	r3, #255	; 0xff
    932e:	d105      	bne.n	933c <send_climb+0xa0c>
    9330:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9334:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9338:	2200      	movs	r2, #0
    933a:	701a      	strb	r2, [r3, #0]
    933c:	f248 0339 	movw	r3, #32825	; 0x8039
    9340:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9344:	781b      	ldrb	r3, [r3, #0]
    9346:	b2db      	uxtb	r3, r3
    9348:	f003 0310 	and.w	r3, r3, #16
    934c:	2b00      	cmp	r3, #0
    934e:	d15a      	bne.n	9406 <send_climb+0xad6>
    9350:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    9354:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9358:	781b      	ldrb	r3, [r3, #0]
    935a:	b2db      	uxtb	r3, r3
    935c:	461a      	mov	r2, r3
    935e:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    9362:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9366:	5c9a      	ldrb	r2, [r3, r2]
    9368:	f24b 53bb 	movw	r3, #46523	; 0xb5bb
    936c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9370:	701a      	strb	r2, [r3, #0]
    9372:	f24b 53bc 	movw	r3, #46524	; 0xb5bc
    9376:	f2c2 0304 	movt	r3, #8196	; 0x2004
    937a:	2200      	movs	r2, #0
    937c:	701a      	strb	r2, [r3, #0]
    937e:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    9382:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9386:	781b      	ldrb	r3, [r3, #0]
    9388:	b2db      	uxtb	r3, r3
    938a:	3301      	adds	r3, #1
    938c:	b2da      	uxtb	r2, r3
    938e:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    9392:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9396:	701a      	strb	r2, [r3, #0]
    9398:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    939c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93a0:	781b      	ldrb	r3, [r3, #0]
    93a2:	b2db      	uxtb	r3, r3
    93a4:	2bff      	cmp	r3, #255	; 0xff
    93a6:	d105      	bne.n	93b4 <send_climb+0xa84>
    93a8:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    93ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93b0:	2200      	movs	r2, #0
    93b2:	701a      	strb	r2, [r3, #0]
    93b4:	f248 0338 	movw	r3, #32824	; 0x8038
    93b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93bc:	f248 0238 	movw	r2, #32824	; 0x8038
    93c0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    93c4:	7812      	ldrb	r2, [r2, #0]
    93c6:	b2d2      	uxtb	r2, r2
    93c8:	f042 0201 	orr.w	r2, r2, #1
    93cc:	b2d2      	uxtb	r2, r2
    93ce:	701a      	strb	r2, [r3, #0]
    93d0:	f248 0339 	movw	r3, #32825	; 0x8039
    93d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93d8:	f248 0239 	movw	r2, #32825	; 0x8039
    93dc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    93e0:	7812      	ldrb	r2, [r2, #0]
    93e2:	b2d2      	uxtb	r2, r2
    93e4:	f042 0210 	orr.w	r2, r2, #16
    93e8:	b2d2      	uxtb	r2, r2
    93ea:	701a      	strb	r2, [r3, #0]
    93ec:	e00b      	b.n	9406 <send_climb+0xad6>
    93ee:	f24b 43b8 	movw	r3, #46264	; 0xb4b8
    93f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93f6:	781b      	ldrb	r3, [r3, #0]
    93f8:	3301      	adds	r3, #1
    93fa:	b2da      	uxtb	r2, r3
    93fc:	f24b 43b8 	movw	r3, #46264	; 0xb4b8
    9400:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9404:	701a      	strb	r2, [r3, #0]
}
    9406:	46bd      	mov	sp, r7
    9408:	f85d 7b04 	ldr.w	r7, [sp], #4
    940c:	4770      	bx	lr
    940e:	bf00      	nop
    9410:	000138ff 	.word	0x000138ff

00009414 <send_mode>:
void send_mode(void){  //5000ms
    9414:	b480      	push	{r7}
    9416:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 50 == 9) PERIODIC_SEND_PPRZ_MODE();}
    9418:	f24b 43b1 	movw	r3, #46257	; 0xb4b1
    941c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9420:	781a      	ldrb	r2, [r3, #0]
    9422:	f248 531f 	movw	r3, #34079	; 0x851f
    9426:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    942a:	fba3 1302 	umull	r1, r3, r3, r2
    942e:	091b      	lsrs	r3, r3, #4
    9430:	2132      	movs	r1, #50	; 0x32
    9432:	fb01 f303 	mul.w	r3, r1, r3
    9436:	1ad3      	subs	r3, r2, r3
    9438:	b2db      	uxtb	r3, r3
    943a:	2b09      	cmp	r3, #9
    943c:	f040 82ba 	bne.w	99b4 <send_mode+0x5a0>
    9440:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9444:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9448:	781a      	ldrb	r2, [r3, #0]
    944a:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    944e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9452:	781b      	ldrb	r3, [r3, #0]
    9454:	b2db      	uxtb	r3, r3
    9456:	429a      	cmp	r2, r3
    9458:	d313      	bcc.n	9482 <send_mode+0x6e>
    945a:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    945e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9462:	781b      	ldrb	r3, [r3, #0]
    9464:	b2db      	uxtb	r3, r3
    9466:	461a      	mov	r2, r3
    9468:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    946c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9470:	781b      	ldrb	r3, [r3, #0]
    9472:	1ad3      	subs	r3, r2, r3
    9474:	33ff      	adds	r3, #255	; 0xff
    9476:	2b09      	cmp	r3, #9
    9478:	bfd4      	ite	le
    947a:	2300      	movle	r3, #0
    947c:	2301      	movgt	r3, #1
    947e:	b2db      	uxtb	r3, r3
    9480:	e011      	b.n	94a6 <send_mode+0x92>
    9482:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    9486:	f2c2 0304 	movt	r3, #8196	; 0x2004
    948a:	781b      	ldrb	r3, [r3, #0]
    948c:	b2db      	uxtb	r3, r3
    948e:	461a      	mov	r2, r3
    9490:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9494:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9498:	781b      	ldrb	r3, [r3, #0]
    949a:	1ad3      	subs	r3, r2, r3
    949c:	2b09      	cmp	r3, #9
    949e:	bfd4      	ite	le
    94a0:	2300      	movle	r3, #0
    94a2:	2301      	movgt	r3, #1
    94a4:	b2db      	uxtb	r3, r3
    94a6:	2b00      	cmp	r3, #0
    94a8:	f000 8278 	beq.w	999c <send_mode+0x588>
    94ac:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    94b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94b4:	781b      	ldrb	r3, [r3, #0]
    94b6:	461a      	mov	r2, r3
    94b8:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    94bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94c0:	2105      	movs	r1, #5
    94c2:	5499      	strb	r1, [r3, r2]
    94c4:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    94c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94cc:	781b      	ldrb	r3, [r3, #0]
    94ce:	3301      	adds	r3, #1
    94d0:	b2da      	uxtb	r2, r3
    94d2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    94d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94da:	701a      	strb	r2, [r3, #0]
    94dc:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    94e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94e4:	781b      	ldrb	r3, [r3, #0]
    94e6:	2bff      	cmp	r3, #255	; 0xff
    94e8:	d105      	bne.n	94f6 <send_mode+0xe2>
    94ea:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    94ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94f2:	2200      	movs	r2, #0
    94f4:	701a      	strb	r2, [r3, #0]
    94f6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    94fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94fe:	781b      	ldrb	r3, [r3, #0]
    9500:	461a      	mov	r2, r3
    9502:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    9506:	f2c2 0304 	movt	r3, #8196	; 0x2004
    950a:	210b      	movs	r1, #11
    950c:	5499      	strb	r1, [r3, r2]
    950e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9512:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9516:	781b      	ldrb	r3, [r3, #0]
    9518:	3301      	adds	r3, #1
    951a:	b2da      	uxtb	r2, r3
    951c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9520:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9524:	701a      	strb	r2, [r3, #0]
    9526:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    952a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    952e:	781b      	ldrb	r3, [r3, #0]
    9530:	2bff      	cmp	r3, #255	; 0xff
    9532:	d105      	bne.n	9540 <send_mode+0x12c>
    9534:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9538:	f2c2 0304 	movt	r3, #8196	; 0x2004
    953c:	2200      	movs	r2, #0
    953e:	701a      	strb	r2, [r3, #0]
    9540:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    9544:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9548:	220b      	movs	r2, #11
    954a:	701a      	strb	r2, [r3, #0]
    954c:	f24b 53be 	movw	r3, #46526	; 0xb5be
    9550:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9554:	220b      	movs	r2, #11
    9556:	701a      	strb	r2, [r3, #0]
    9558:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    955c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9560:	781b      	ldrb	r3, [r3, #0]
    9562:	461a      	mov	r2, r3
    9564:	f24b 439c 	movw	r3, #46236	; 0xb49c
    9568:	f2c2 0304 	movt	r3, #8196	; 0x2004
    956c:	7819      	ldrb	r1, [r3, #0]
    956e:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    9572:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9576:	5499      	strb	r1, [r3, r2]
    9578:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    957c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9580:	781a      	ldrb	r2, [r3, #0]
    9582:	f24b 439c 	movw	r3, #46236	; 0xb49c
    9586:	f2c2 0304 	movt	r3, #8196	; 0x2004
    958a:	781b      	ldrb	r3, [r3, #0]
    958c:	4413      	add	r3, r2
    958e:	b2da      	uxtb	r2, r3
    9590:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    9594:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9598:	701a      	strb	r2, [r3, #0]
    959a:	f24b 53be 	movw	r3, #46526	; 0xb5be
    959e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95a2:	781a      	ldrb	r2, [r3, #0]
    95a4:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    95a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95ac:	781b      	ldrb	r3, [r3, #0]
    95ae:	4413      	add	r3, r2
    95b0:	b2da      	uxtb	r2, r3
    95b2:	f24b 53be 	movw	r3, #46526	; 0xb5be
    95b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95ba:	701a      	strb	r2, [r3, #0]
    95bc:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    95c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95c4:	781b      	ldrb	r3, [r3, #0]
    95c6:	3301      	adds	r3, #1
    95c8:	b2da      	uxtb	r2, r3
    95ca:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    95ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95d2:	701a      	strb	r2, [r3, #0]
    95d4:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    95d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95dc:	781b      	ldrb	r3, [r3, #0]
    95de:	2bff      	cmp	r3, #255	; 0xff
    95e0:	d105      	bne.n	95ee <send_mode+0x1da>
    95e2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    95e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95ea:	2200      	movs	r2, #0
    95ec:	701a      	strb	r2, [r3, #0]
    95ee:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    95f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95f6:	781b      	ldrb	r3, [r3, #0]
    95f8:	461a      	mov	r2, r3
    95fa:	f24b 439d 	movw	r3, #46237	; 0xb49d
    95fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9602:	7819      	ldrb	r1, [r3, #0]
    9604:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    9608:	f2c2 0304 	movt	r3, #8196	; 0x2004
    960c:	5499      	strb	r1, [r3, r2]
    960e:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    9612:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9616:	781a      	ldrb	r2, [r3, #0]
    9618:	f24b 439d 	movw	r3, #46237	; 0xb49d
    961c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9620:	781b      	ldrb	r3, [r3, #0]
    9622:	4413      	add	r3, r2
    9624:	b2da      	uxtb	r2, r3
    9626:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    962a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    962e:	701a      	strb	r2, [r3, #0]
    9630:	f24b 53be 	movw	r3, #46526	; 0xb5be
    9634:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9638:	781a      	ldrb	r2, [r3, #0]
    963a:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    963e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9642:	781b      	ldrb	r3, [r3, #0]
    9644:	4413      	add	r3, r2
    9646:	b2da      	uxtb	r2, r3
    9648:	f24b 53be 	movw	r3, #46526	; 0xb5be
    964c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9650:	701a      	strb	r2, [r3, #0]
    9652:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9656:	f2c2 0304 	movt	r3, #8196	; 0x2004
    965a:	781b      	ldrb	r3, [r3, #0]
    965c:	3301      	adds	r3, #1
    965e:	b2da      	uxtb	r2, r3
    9660:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9664:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9668:	701a      	strb	r2, [r3, #0]
    966a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    966e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9672:	781b      	ldrb	r3, [r3, #0]
    9674:	2bff      	cmp	r3, #255	; 0xff
    9676:	d105      	bne.n	9684 <send_mode+0x270>
    9678:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    967c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9680:	2200      	movs	r2, #0
    9682:	701a      	strb	r2, [r3, #0]
    9684:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9688:	f2c2 0304 	movt	r3, #8196	; 0x2004
    968c:	781b      	ldrb	r3, [r3, #0]
    968e:	461a      	mov	r2, r3
    9690:	f64b 23cc 	movw	r3, #47820	; 0xbacc
    9694:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9698:	7819      	ldrb	r1, [r3, #0]
    969a:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    969e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96a2:	5499      	strb	r1, [r3, r2]
    96a4:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    96a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96ac:	781a      	ldrb	r2, [r3, #0]
    96ae:	f64b 23cc 	movw	r3, #47820	; 0xbacc
    96b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96b6:	781b      	ldrb	r3, [r3, #0]
    96b8:	4413      	add	r3, r2
    96ba:	b2da      	uxtb	r2, r3
    96bc:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    96c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96c4:	701a      	strb	r2, [r3, #0]
    96c6:	f24b 53be 	movw	r3, #46526	; 0xb5be
    96ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96ce:	781a      	ldrb	r2, [r3, #0]
    96d0:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    96d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96d8:	781b      	ldrb	r3, [r3, #0]
    96da:	4413      	add	r3, r2
    96dc:	b2da      	uxtb	r2, r3
    96de:	f24b 53be 	movw	r3, #46526	; 0xb5be
    96e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96e6:	701a      	strb	r2, [r3, #0]
    96e8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    96ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96f0:	781b      	ldrb	r3, [r3, #0]
    96f2:	3301      	adds	r3, #1
    96f4:	b2da      	uxtb	r2, r3
    96f6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    96fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96fe:	701a      	strb	r2, [r3, #0]
    9700:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9704:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9708:	781b      	ldrb	r3, [r3, #0]
    970a:	2bff      	cmp	r3, #255	; 0xff
    970c:	d105      	bne.n	971a <send_mode+0x306>
    970e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9712:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9716:	2200      	movs	r2, #0
    9718:	701a      	strb	r2, [r3, #0]
    971a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    971e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9722:	781b      	ldrb	r3, [r3, #0]
    9724:	461a      	mov	r2, r3
    9726:	f24b 43a3 	movw	r3, #46243	; 0xb4a3
    972a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    972e:	7819      	ldrb	r1, [r3, #0]
    9730:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    9734:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9738:	5499      	strb	r1, [r3, r2]
    973a:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    973e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9742:	781a      	ldrb	r2, [r3, #0]
    9744:	f24b 43a3 	movw	r3, #46243	; 0xb4a3
    9748:	f2c2 0304 	movt	r3, #8196	; 0x2004
    974c:	781b      	ldrb	r3, [r3, #0]
    974e:	4413      	add	r3, r2
    9750:	b2da      	uxtb	r2, r3
    9752:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    9756:	f2c2 0304 	movt	r3, #8196	; 0x2004
    975a:	701a      	strb	r2, [r3, #0]
    975c:	f24b 53be 	movw	r3, #46526	; 0xb5be
    9760:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9764:	781a      	ldrb	r2, [r3, #0]
    9766:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    976a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    976e:	781b      	ldrb	r3, [r3, #0]
    9770:	4413      	add	r3, r2
    9772:	b2da      	uxtb	r2, r3
    9774:	f24b 53be 	movw	r3, #46526	; 0xb5be
    9778:	f2c2 0304 	movt	r3, #8196	; 0x2004
    977c:	701a      	strb	r2, [r3, #0]
    977e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9782:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9786:	781b      	ldrb	r3, [r3, #0]
    9788:	3301      	adds	r3, #1
    978a:	b2da      	uxtb	r2, r3
    978c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9790:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9794:	701a      	strb	r2, [r3, #0]
    9796:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    979a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    979e:	781b      	ldrb	r3, [r3, #0]
    97a0:	2bff      	cmp	r3, #255	; 0xff
    97a2:	d105      	bne.n	97b0 <send_mode+0x39c>
    97a4:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    97a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97ac:	2200      	movs	r2, #0
    97ae:	701a      	strb	r2, [r3, #0]
    97b0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    97b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97b8:	781b      	ldrb	r3, [r3, #0]
    97ba:	461a      	mov	r2, r3
    97bc:	f240 1304 	movw	r3, #260	; 0x104
    97c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97c4:	7819      	ldrb	r1, [r3, #0]
    97c6:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    97ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97ce:	5499      	strb	r1, [r3, r2]
    97d0:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    97d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97d8:	781a      	ldrb	r2, [r3, #0]
    97da:	f240 1304 	movw	r3, #260	; 0x104
    97de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97e2:	781b      	ldrb	r3, [r3, #0]
    97e4:	4413      	add	r3, r2
    97e6:	b2da      	uxtb	r2, r3
    97e8:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    97ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97f0:	701a      	strb	r2, [r3, #0]
    97f2:	f24b 53be 	movw	r3, #46526	; 0xb5be
    97f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97fa:	781a      	ldrb	r2, [r3, #0]
    97fc:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    9800:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9804:	781b      	ldrb	r3, [r3, #0]
    9806:	4413      	add	r3, r2
    9808:	b2da      	uxtb	r2, r3
    980a:	f24b 53be 	movw	r3, #46526	; 0xb5be
    980e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9812:	701a      	strb	r2, [r3, #0]
    9814:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9818:	f2c2 0304 	movt	r3, #8196	; 0x2004
    981c:	781b      	ldrb	r3, [r3, #0]
    981e:	3301      	adds	r3, #1
    9820:	b2da      	uxtb	r2, r3
    9822:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9826:	f2c2 0304 	movt	r3, #8196	; 0x2004
    982a:	701a      	strb	r2, [r3, #0]
    982c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9830:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9834:	781b      	ldrb	r3, [r3, #0]
    9836:	2bff      	cmp	r3, #255	; 0xff
    9838:	d105      	bne.n	9846 <send_mode+0x432>
    983a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    983e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9842:	2200      	movs	r2, #0
    9844:	701a      	strb	r2, [r3, #0]
    9846:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    984a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    984e:	781b      	ldrb	r3, [r3, #0]
    9850:	461a      	mov	r2, r3
    9852:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    9856:	f2c2 0304 	movt	r3, #8196	; 0x2004
    985a:	7819      	ldrb	r1, [r3, #0]
    985c:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    9860:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9864:	5499      	strb	r1, [r3, r2]
    9866:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    986a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    986e:	781b      	ldrb	r3, [r3, #0]
    9870:	3301      	adds	r3, #1
    9872:	b2da      	uxtb	r2, r3
    9874:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9878:	f2c2 0304 	movt	r3, #8196	; 0x2004
    987c:	701a      	strb	r2, [r3, #0]
    987e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9882:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9886:	781b      	ldrb	r3, [r3, #0]
    9888:	2bff      	cmp	r3, #255	; 0xff
    988a:	d105      	bne.n	9898 <send_mode+0x484>
    988c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9890:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9894:	2200      	movs	r2, #0
    9896:	701a      	strb	r2, [r3, #0]
    9898:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    989c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98a0:	781b      	ldrb	r3, [r3, #0]
    98a2:	461a      	mov	r2, r3
    98a4:	f24b 53be 	movw	r3, #46526	; 0xb5be
    98a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98ac:	7819      	ldrb	r1, [r3, #0]
    98ae:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    98b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98b6:	5499      	strb	r1, [r3, r2]
    98b8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    98bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98c0:	781b      	ldrb	r3, [r3, #0]
    98c2:	3301      	adds	r3, #1
    98c4:	b2da      	uxtb	r2, r3
    98c6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    98ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98ce:	701a      	strb	r2, [r3, #0]
    98d0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    98d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98d8:	781b      	ldrb	r3, [r3, #0]
    98da:	2bff      	cmp	r3, #255	; 0xff
    98dc:	d105      	bne.n	98ea <send_mode+0x4d6>
    98de:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    98e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98e6:	2200      	movs	r2, #0
    98e8:	701a      	strb	r2, [r3, #0]
    98ea:	f248 0339 	movw	r3, #32825	; 0x8039
    98ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98f2:	781b      	ldrb	r3, [r3, #0]
    98f4:	b2db      	uxtb	r3, r3
    98f6:	f003 0310 	and.w	r3, r3, #16
    98fa:	2b00      	cmp	r3, #0
    98fc:	d15a      	bne.n	99b4 <send_mode+0x5a0>
    98fe:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    9902:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9906:	781b      	ldrb	r3, [r3, #0]
    9908:	b2db      	uxtb	r3, r3
    990a:	461a      	mov	r2, r3
    990c:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    9910:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9914:	5c9a      	ldrb	r2, [r3, r2]
    9916:	f24b 53bb 	movw	r3, #46523	; 0xb5bb
    991a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    991e:	701a      	strb	r2, [r3, #0]
    9920:	f24b 53bc 	movw	r3, #46524	; 0xb5bc
    9924:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9928:	2200      	movs	r2, #0
    992a:	701a      	strb	r2, [r3, #0]
    992c:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    9930:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9934:	781b      	ldrb	r3, [r3, #0]
    9936:	b2db      	uxtb	r3, r3
    9938:	3301      	adds	r3, #1
    993a:	b2da      	uxtb	r2, r3
    993c:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    9940:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9944:	701a      	strb	r2, [r3, #0]
    9946:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    994a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    994e:	781b      	ldrb	r3, [r3, #0]
    9950:	b2db      	uxtb	r3, r3
    9952:	2bff      	cmp	r3, #255	; 0xff
    9954:	d105      	bne.n	9962 <send_mode+0x54e>
    9956:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    995a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    995e:	2200      	movs	r2, #0
    9960:	701a      	strb	r2, [r3, #0]
    9962:	f248 0338 	movw	r3, #32824	; 0x8038
    9966:	f2c2 0300 	movt	r3, #8192	; 0x2000
    996a:	f248 0238 	movw	r2, #32824	; 0x8038
    996e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9972:	7812      	ldrb	r2, [r2, #0]
    9974:	b2d2      	uxtb	r2, r2
    9976:	f042 0201 	orr.w	r2, r2, #1
    997a:	b2d2      	uxtb	r2, r2
    997c:	701a      	strb	r2, [r3, #0]
    997e:	f248 0339 	movw	r3, #32825	; 0x8039
    9982:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9986:	f248 0239 	movw	r2, #32825	; 0x8039
    998a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    998e:	7812      	ldrb	r2, [r2, #0]
    9990:	b2d2      	uxtb	r2, r2
    9992:	f042 0210 	orr.w	r2, r2, #16
    9996:	b2d2      	uxtb	r2, r2
    9998:	701a      	strb	r2, [r3, #0]
    999a:	e00b      	b.n	99b4 <send_mode+0x5a0>
    999c:	f24b 43b8 	movw	r3, #46264	; 0xb4b8
    99a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99a4:	781b      	ldrb	r3, [r3, #0]
    99a6:	3301      	adds	r3, #1
    99a8:	b2da      	uxtb	r2, r3
    99aa:	f24b 43b8 	movw	r3, #46264	; 0xb4b8
    99ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99b2:	701a      	strb	r2, [r3, #0]
}
    99b4:	46bd      	mov	sp, r7
    99b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    99ba:	4770      	bx	lr

000099bc <send_debug>:
void send_debug(void){  //5000ms
    99bc:	b480      	push	{r7}
    99be:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 50 == 29) PERIODIC_SEND_DEBUG();}
    99c0:	f24b 43b1 	movw	r3, #46257	; 0xb4b1
    99c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99c8:	781a      	ldrb	r2, [r3, #0]
    99ca:	f248 531f 	movw	r3, #34079	; 0x851f
    99ce:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    99d2:	fba3 1302 	umull	r1, r3, r3, r2
    99d6:	091b      	lsrs	r3, r3, #4
    99d8:	2132      	movs	r1, #50	; 0x32
    99da:	fb01 f303 	mul.w	r3, r1, r3
    99de:	1ad3      	subs	r3, r2, r3
    99e0:	b2db      	uxtb	r3, r3
    99e2:	2b1d      	cmp	r3, #29
    99e4:	f040 82bb 	bne.w	9f5e <send_debug+0x5a2>
    99e8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    99ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99f0:	781a      	ldrb	r2, [r3, #0]
    99f2:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    99f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99fa:	781b      	ldrb	r3, [r3, #0]
    99fc:	b2db      	uxtb	r3, r3
    99fe:	429a      	cmp	r2, r3
    9a00:	d313      	bcc.n	9a2a <send_debug+0x6e>
    9a02:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    9a06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a0a:	781b      	ldrb	r3, [r3, #0]
    9a0c:	b2db      	uxtb	r3, r3
    9a0e:	461a      	mov	r2, r3
    9a10:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9a14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a18:	781b      	ldrb	r3, [r3, #0]
    9a1a:	1ad3      	subs	r3, r2, r3
    9a1c:	33ff      	adds	r3, #255	; 0xff
    9a1e:	2b09      	cmp	r3, #9
    9a20:	bfd4      	ite	le
    9a22:	2300      	movle	r3, #0
    9a24:	2301      	movgt	r3, #1
    9a26:	b2db      	uxtb	r3, r3
    9a28:	e011      	b.n	9a4e <send_debug+0x92>
    9a2a:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    9a2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a32:	781b      	ldrb	r3, [r3, #0]
    9a34:	b2db      	uxtb	r3, r3
    9a36:	461a      	mov	r2, r3
    9a38:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9a3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a40:	781b      	ldrb	r3, [r3, #0]
    9a42:	1ad3      	subs	r3, r2, r3
    9a44:	2b09      	cmp	r3, #9
    9a46:	bfd4      	ite	le
    9a48:	2300      	movle	r3, #0
    9a4a:	2301      	movgt	r3, #1
    9a4c:	b2db      	uxtb	r3, r3
    9a4e:	2b00      	cmp	r3, #0
    9a50:	f000 8279 	beq.w	9f46 <send_debug+0x58a>
    9a54:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9a58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a5c:	781b      	ldrb	r3, [r3, #0]
    9a5e:	461a      	mov	r2, r3
    9a60:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    9a64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a68:	2105      	movs	r1, #5
    9a6a:	5499      	strb	r1, [r3, r2]
    9a6c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9a70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a74:	781b      	ldrb	r3, [r3, #0]
    9a76:	3301      	adds	r3, #1
    9a78:	b2da      	uxtb	r2, r3
    9a7a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9a7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a82:	701a      	strb	r2, [r3, #0]
    9a84:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9a88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a8c:	781b      	ldrb	r3, [r3, #0]
    9a8e:	2bff      	cmp	r3, #255	; 0xff
    9a90:	d105      	bne.n	9a9e <send_debug+0xe2>
    9a92:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9a96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a9a:	2200      	movs	r2, #0
    9a9c:	701a      	strb	r2, [r3, #0]
    9a9e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9aa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9aa6:	781b      	ldrb	r3, [r3, #0]
    9aa8:	461a      	mov	r2, r3
    9aaa:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    9aae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ab2:	210d      	movs	r1, #13
    9ab4:	5499      	strb	r1, [r3, r2]
    9ab6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9aba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9abe:	781b      	ldrb	r3, [r3, #0]
    9ac0:	3301      	adds	r3, #1
    9ac2:	b2da      	uxtb	r2, r3
    9ac4:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9ac8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9acc:	701a      	strb	r2, [r3, #0]
    9ace:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9ad2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ad6:	781b      	ldrb	r3, [r3, #0]
    9ad8:	2bff      	cmp	r3, #255	; 0xff
    9ada:	d105      	bne.n	9ae8 <send_debug+0x12c>
    9adc:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9ae0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ae4:	2200      	movs	r2, #0
    9ae6:	701a      	strb	r2, [r3, #0]
    9ae8:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    9aec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9af0:	220d      	movs	r2, #13
    9af2:	701a      	strb	r2, [r3, #0]
    9af4:	f24b 53be 	movw	r3, #46526	; 0xb5be
    9af8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9afc:	220d      	movs	r2, #13
    9afe:	701a      	strb	r2, [r3, #0]
    9b00:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9b04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b08:	781b      	ldrb	r3, [r3, #0]
    9b0a:	461a      	mov	r2, r3
    9b0c:	f24b 53ef 	movw	r3, #46575	; 0xb5ef
    9b10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b14:	781b      	ldrb	r3, [r3, #0]
    9b16:	b2d9      	uxtb	r1, r3
    9b18:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    9b1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b20:	5499      	strb	r1, [r3, r2]
    9b22:	f24b 53ef 	movw	r3, #46575	; 0xb5ef
    9b26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b2a:	781a      	ldrb	r2, [r3, #0]
    9b2c:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    9b30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b34:	781b      	ldrb	r3, [r3, #0]
    9b36:	4413      	add	r3, r2
    9b38:	b2da      	uxtb	r2, r3
    9b3a:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    9b3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b42:	701a      	strb	r2, [r3, #0]
    9b44:	f24b 53be 	movw	r3, #46526	; 0xb5be
    9b48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b4c:	781a      	ldrb	r2, [r3, #0]
    9b4e:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    9b52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b56:	781b      	ldrb	r3, [r3, #0]
    9b58:	4413      	add	r3, r2
    9b5a:	b2da      	uxtb	r2, r3
    9b5c:	f24b 53be 	movw	r3, #46526	; 0xb5be
    9b60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b64:	701a      	strb	r2, [r3, #0]
    9b66:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9b6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b6e:	781b      	ldrb	r3, [r3, #0]
    9b70:	3301      	adds	r3, #1
    9b72:	b2da      	uxtb	r2, r3
    9b74:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9b78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b7c:	701a      	strb	r2, [r3, #0]
    9b7e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9b82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b86:	781b      	ldrb	r3, [r3, #0]
    9b88:	2bff      	cmp	r3, #255	; 0xff
    9b8a:	d105      	bne.n	9b98 <send_debug+0x1dc>
    9b8c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9b90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b94:	2200      	movs	r2, #0
    9b96:	701a      	strb	r2, [r3, #0]
    9b98:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9b9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ba0:	781b      	ldrb	r3, [r3, #0]
    9ba2:	461a      	mov	r2, r3
    9ba4:	f24b 53f0 	movw	r3, #46576	; 0xb5f0
    9ba8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bac:	7819      	ldrb	r1, [r3, #0]
    9bae:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    9bb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bb6:	5499      	strb	r1, [r3, r2]
    9bb8:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    9bbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bc0:	781a      	ldrb	r2, [r3, #0]
    9bc2:	f24b 53f0 	movw	r3, #46576	; 0xb5f0
    9bc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bca:	781b      	ldrb	r3, [r3, #0]
    9bcc:	4413      	add	r3, r2
    9bce:	b2da      	uxtb	r2, r3
    9bd0:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    9bd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bd8:	701a      	strb	r2, [r3, #0]
    9bda:	f24b 53be 	movw	r3, #46526	; 0xb5be
    9bde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9be2:	781a      	ldrb	r2, [r3, #0]
    9be4:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    9be8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bec:	781b      	ldrb	r3, [r3, #0]
    9bee:	4413      	add	r3, r2
    9bf0:	b2da      	uxtb	r2, r3
    9bf2:	f24b 53be 	movw	r3, #46526	; 0xb5be
    9bf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bfa:	701a      	strb	r2, [r3, #0]
    9bfc:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9c00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c04:	781b      	ldrb	r3, [r3, #0]
    9c06:	3301      	adds	r3, #1
    9c08:	b2da      	uxtb	r2, r3
    9c0a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9c0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c12:	701a      	strb	r2, [r3, #0]
    9c14:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9c18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c1c:	781b      	ldrb	r3, [r3, #0]
    9c1e:	2bff      	cmp	r3, #255	; 0xff
    9c20:	d105      	bne.n	9c2e <send_debug+0x272>
    9c22:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9c26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c2a:	2200      	movs	r2, #0
    9c2c:	701a      	strb	r2, [r3, #0]
    9c2e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9c32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c36:	781b      	ldrb	r3, [r3, #0]
    9c38:	461a      	mov	r2, r3
    9c3a:	f24b 43b8 	movw	r3, #46264	; 0xb4b8
    9c3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c42:	7819      	ldrb	r1, [r3, #0]
    9c44:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    9c48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c4c:	5499      	strb	r1, [r3, r2]
    9c4e:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    9c52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c56:	781a      	ldrb	r2, [r3, #0]
    9c58:	f24b 43b8 	movw	r3, #46264	; 0xb4b8
    9c5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c60:	781b      	ldrb	r3, [r3, #0]
    9c62:	4413      	add	r3, r2
    9c64:	b2da      	uxtb	r2, r3
    9c66:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    9c6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c6e:	701a      	strb	r2, [r3, #0]
    9c70:	f24b 53be 	movw	r3, #46526	; 0xb5be
    9c74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c78:	781a      	ldrb	r2, [r3, #0]
    9c7a:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    9c7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c82:	781b      	ldrb	r3, [r3, #0]
    9c84:	4413      	add	r3, r2
    9c86:	b2da      	uxtb	r2, r3
    9c88:	f24b 53be 	movw	r3, #46526	; 0xb5be
    9c8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c90:	701a      	strb	r2, [r3, #0]
    9c92:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9c96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c9a:	781b      	ldrb	r3, [r3, #0]
    9c9c:	3301      	adds	r3, #1
    9c9e:	b2da      	uxtb	r2, r3
    9ca0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9ca4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ca8:	701a      	strb	r2, [r3, #0]
    9caa:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9cae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cb2:	781b      	ldrb	r3, [r3, #0]
    9cb4:	2bff      	cmp	r3, #255	; 0xff
    9cb6:	d105      	bne.n	9cc4 <send_debug+0x308>
    9cb8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9cbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cc0:	2200      	movs	r2, #0
    9cc2:	701a      	strb	r2, [r3, #0]
    9cc4:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9cc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ccc:	781b      	ldrb	r3, [r3, #0]
    9cce:	461a      	mov	r2, r3
    9cd0:	f24b 7357 	movw	r3, #46935	; 0xb757
    9cd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cd8:	7819      	ldrb	r1, [r3, #0]
    9cda:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    9cde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ce2:	5499      	strb	r1, [r3, r2]
    9ce4:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    9ce8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cec:	781a      	ldrb	r2, [r3, #0]
    9cee:	f24b 7357 	movw	r3, #46935	; 0xb757
    9cf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cf6:	781b      	ldrb	r3, [r3, #0]
    9cf8:	4413      	add	r3, r2
    9cfa:	b2da      	uxtb	r2, r3
    9cfc:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    9d00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d04:	701a      	strb	r2, [r3, #0]
    9d06:	f24b 53be 	movw	r3, #46526	; 0xb5be
    9d0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d0e:	781a      	ldrb	r2, [r3, #0]
    9d10:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    9d14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d18:	781b      	ldrb	r3, [r3, #0]
    9d1a:	4413      	add	r3, r2
    9d1c:	b2da      	uxtb	r2, r3
    9d1e:	f24b 53be 	movw	r3, #46526	; 0xb5be
    9d22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d26:	701a      	strb	r2, [r3, #0]
    9d28:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9d2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d30:	781b      	ldrb	r3, [r3, #0]
    9d32:	3301      	adds	r3, #1
    9d34:	b2da      	uxtb	r2, r3
    9d36:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9d3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d3e:	701a      	strb	r2, [r3, #0]
    9d40:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9d44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d48:	781b      	ldrb	r3, [r3, #0]
    9d4a:	2bff      	cmp	r3, #255	; 0xff
    9d4c:	d105      	bne.n	9d5a <send_debug+0x39e>
    9d4e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9d52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d56:	2200      	movs	r2, #0
    9d58:	701a      	strb	r2, [r3, #0]
    9d5a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9d5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d62:	781b      	ldrb	r3, [r3, #0]
    9d64:	461a      	mov	r2, r3
    9d66:	f24b 43a4 	movw	r3, #46244	; 0xb4a4
    9d6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d6e:	7819      	ldrb	r1, [r3, #0]
    9d70:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    9d74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d78:	5499      	strb	r1, [r3, r2]
    9d7a:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    9d7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d82:	781a      	ldrb	r2, [r3, #0]
    9d84:	f24b 43a4 	movw	r3, #46244	; 0xb4a4
    9d88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d8c:	781b      	ldrb	r3, [r3, #0]
    9d8e:	4413      	add	r3, r2
    9d90:	b2da      	uxtb	r2, r3
    9d92:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    9d96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d9a:	701a      	strb	r2, [r3, #0]
    9d9c:	f24b 53be 	movw	r3, #46526	; 0xb5be
    9da0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9da4:	781a      	ldrb	r2, [r3, #0]
    9da6:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    9daa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dae:	781b      	ldrb	r3, [r3, #0]
    9db0:	4413      	add	r3, r2
    9db2:	b2da      	uxtb	r2, r3
    9db4:	f24b 53be 	movw	r3, #46526	; 0xb5be
    9db8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dbc:	701a      	strb	r2, [r3, #0]
    9dbe:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9dc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dc6:	781b      	ldrb	r3, [r3, #0]
    9dc8:	3301      	adds	r3, #1
    9dca:	b2da      	uxtb	r2, r3
    9dcc:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9dd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dd4:	701a      	strb	r2, [r3, #0]
    9dd6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9dda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dde:	781b      	ldrb	r3, [r3, #0]
    9de0:	2bff      	cmp	r3, #255	; 0xff
    9de2:	d105      	bne.n	9df0 <send_debug+0x434>
    9de4:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9de8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dec:	2200      	movs	r2, #0
    9dee:	701a      	strb	r2, [r3, #0]
    9df0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9df4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9df8:	781b      	ldrb	r3, [r3, #0]
    9dfa:	461a      	mov	r2, r3
    9dfc:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    9e00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e04:	7819      	ldrb	r1, [r3, #0]
    9e06:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    9e0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e0e:	5499      	strb	r1, [r3, r2]
    9e10:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9e14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e18:	781b      	ldrb	r3, [r3, #0]
    9e1a:	3301      	adds	r3, #1
    9e1c:	b2da      	uxtb	r2, r3
    9e1e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9e22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e26:	701a      	strb	r2, [r3, #0]
    9e28:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9e2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e30:	781b      	ldrb	r3, [r3, #0]
    9e32:	2bff      	cmp	r3, #255	; 0xff
    9e34:	d105      	bne.n	9e42 <send_debug+0x486>
    9e36:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9e3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e3e:	2200      	movs	r2, #0
    9e40:	701a      	strb	r2, [r3, #0]
    9e42:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9e46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e4a:	781b      	ldrb	r3, [r3, #0]
    9e4c:	461a      	mov	r2, r3
    9e4e:	f24b 53be 	movw	r3, #46526	; 0xb5be
    9e52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e56:	7819      	ldrb	r1, [r3, #0]
    9e58:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    9e5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e60:	5499      	strb	r1, [r3, r2]
    9e62:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9e66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e6a:	781b      	ldrb	r3, [r3, #0]
    9e6c:	3301      	adds	r3, #1
    9e6e:	b2da      	uxtb	r2, r3
    9e70:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9e74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e78:	701a      	strb	r2, [r3, #0]
    9e7a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9e7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e82:	781b      	ldrb	r3, [r3, #0]
    9e84:	2bff      	cmp	r3, #255	; 0xff
    9e86:	d105      	bne.n	9e94 <send_debug+0x4d8>
    9e88:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9e8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e90:	2200      	movs	r2, #0
    9e92:	701a      	strb	r2, [r3, #0]
    9e94:	f248 0339 	movw	r3, #32825	; 0x8039
    9e98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e9c:	781b      	ldrb	r3, [r3, #0]
    9e9e:	b2db      	uxtb	r3, r3
    9ea0:	f003 0310 	and.w	r3, r3, #16
    9ea4:	2b00      	cmp	r3, #0
    9ea6:	d15a      	bne.n	9f5e <send_debug+0x5a2>
    9ea8:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    9eac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9eb0:	781b      	ldrb	r3, [r3, #0]
    9eb2:	b2db      	uxtb	r3, r3
    9eb4:	461a      	mov	r2, r3
    9eb6:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    9eba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ebe:	5c9a      	ldrb	r2, [r3, r2]
    9ec0:	f24b 53bb 	movw	r3, #46523	; 0xb5bb
    9ec4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ec8:	701a      	strb	r2, [r3, #0]
    9eca:	f24b 53bc 	movw	r3, #46524	; 0xb5bc
    9ece:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ed2:	2200      	movs	r2, #0
    9ed4:	701a      	strb	r2, [r3, #0]
    9ed6:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    9eda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ede:	781b      	ldrb	r3, [r3, #0]
    9ee0:	b2db      	uxtb	r3, r3
    9ee2:	3301      	adds	r3, #1
    9ee4:	b2da      	uxtb	r2, r3
    9ee6:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    9eea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9eee:	701a      	strb	r2, [r3, #0]
    9ef0:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    9ef4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ef8:	781b      	ldrb	r3, [r3, #0]
    9efa:	b2db      	uxtb	r3, r3
    9efc:	2bff      	cmp	r3, #255	; 0xff
    9efe:	d105      	bne.n	9f0c <send_debug+0x550>
    9f00:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    9f04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f08:	2200      	movs	r2, #0
    9f0a:	701a      	strb	r2, [r3, #0]
    9f0c:	f248 0338 	movw	r3, #32824	; 0x8038
    9f10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f14:	f248 0238 	movw	r2, #32824	; 0x8038
    9f18:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9f1c:	7812      	ldrb	r2, [r2, #0]
    9f1e:	b2d2      	uxtb	r2, r2
    9f20:	f042 0201 	orr.w	r2, r2, #1
    9f24:	b2d2      	uxtb	r2, r2
    9f26:	701a      	strb	r2, [r3, #0]
    9f28:	f248 0339 	movw	r3, #32825	; 0x8039
    9f2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f30:	f248 0239 	movw	r2, #32825	; 0x8039
    9f34:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9f38:	7812      	ldrb	r2, [r2, #0]
    9f3a:	b2d2      	uxtb	r2, r2
    9f3c:	f042 0210 	orr.w	r2, r2, #16
    9f40:	b2d2      	uxtb	r2, r2
    9f42:	701a      	strb	r2, [r3, #0]
    9f44:	e00b      	b.n	9f5e <send_debug+0x5a2>
    9f46:	f24b 43b8 	movw	r3, #46264	; 0xb4b8
    9f4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f4e:	781b      	ldrb	r3, [r3, #0]
    9f50:	3301      	adds	r3, #1
    9f52:	b2da      	uxtb	r2, r3
    9f54:	f24b 43b8 	movw	r3, #46264	; 0xb4b8
    9f58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f5c:	701a      	strb	r2, [r3, #0]
}
    9f5e:	46bd      	mov	sp, r7
    9f60:	f85d 7b04 	ldr.w	r7, [sp], #4
    9f64:	4770      	bx	lr
    9f66:	bf00      	nop

00009f68 <send_nav_ref>:
void send_nav_ref(void){  //10000ms
    9f68:	b480      	push	{r7}
    9f6a:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 100 == 49) PERIODIC_SEND_NAVIGATION_REF();}
    9f6c:	f24b 43b1 	movw	r3, #46257	; 0xb4b1
    9f70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f74:	781a      	ldrb	r2, [r3, #0]
    9f76:	f248 531f 	movw	r3, #34079	; 0x851f
    9f7a:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    9f7e:	fba3 1302 	umull	r1, r3, r3, r2
    9f82:	095b      	lsrs	r3, r3, #5
    9f84:	2164      	movs	r1, #100	; 0x64
    9f86:	fb01 f303 	mul.w	r3, r1, r3
    9f8a:	1ad3      	subs	r3, r2, r3
    9f8c:	b2db      	uxtb	r3, r3
    9f8e:	2b31      	cmp	r3, #49	; 0x31
    9f90:	f040 8395 	bne.w	a6be <send_nav_ref+0x756>
    9f94:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9f98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f9c:	781a      	ldrb	r2, [r3, #0]
    9f9e:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    9fa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fa6:	781b      	ldrb	r3, [r3, #0]
    9fa8:	b2db      	uxtb	r3, r3
    9faa:	429a      	cmp	r2, r3
    9fac:	d313      	bcc.n	9fd6 <send_nav_ref+0x6e>
    9fae:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    9fb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fb6:	781b      	ldrb	r3, [r3, #0]
    9fb8:	b2db      	uxtb	r3, r3
    9fba:	461a      	mov	r2, r3
    9fbc:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9fc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fc4:	781b      	ldrb	r3, [r3, #0]
    9fc6:	1ad3      	subs	r3, r2, r3
    9fc8:	33ff      	adds	r3, #255	; 0xff
    9fca:	2b0c      	cmp	r3, #12
    9fcc:	bfd4      	ite	le
    9fce:	2300      	movle	r3, #0
    9fd0:	2301      	movgt	r3, #1
    9fd2:	b2db      	uxtb	r3, r3
    9fd4:	e011      	b.n	9ffa <send_nav_ref+0x92>
    9fd6:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    9fda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fde:	781b      	ldrb	r3, [r3, #0]
    9fe0:	b2db      	uxtb	r3, r3
    9fe2:	461a      	mov	r2, r3
    9fe4:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9fe8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fec:	781b      	ldrb	r3, [r3, #0]
    9fee:	1ad3      	subs	r3, r2, r3
    9ff0:	2b0c      	cmp	r3, #12
    9ff2:	bfd4      	ite	le
    9ff4:	2300      	movle	r3, #0
    9ff6:	2301      	movgt	r3, #1
    9ff8:	b2db      	uxtb	r3, r3
    9ffa:	2b00      	cmp	r3, #0
    9ffc:	f000 8353 	beq.w	a6a6 <send_nav_ref+0x73e>
    a000:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a004:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a008:	781b      	ldrb	r3, [r3, #0]
    a00a:	461a      	mov	r2, r3
    a00c:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    a010:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a014:	2105      	movs	r1, #5
    a016:	5499      	strb	r1, [r3, r2]
    a018:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a01c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a020:	781b      	ldrb	r3, [r3, #0]
    a022:	3301      	adds	r3, #1
    a024:	b2da      	uxtb	r2, r3
    a026:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a02a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a02e:	701a      	strb	r2, [r3, #0]
    a030:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a034:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a038:	781b      	ldrb	r3, [r3, #0]
    a03a:	2bff      	cmp	r3, #255	; 0xff
    a03c:	d105      	bne.n	a04a <send_nav_ref+0xe2>
    a03e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a042:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a046:	2200      	movs	r2, #0
    a048:	701a      	strb	r2, [r3, #0]
    a04a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a04e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a052:	781b      	ldrb	r3, [r3, #0]
    a054:	461a      	mov	r2, r3
    a056:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    a05a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a05e:	2109      	movs	r1, #9
    a060:	5499      	strb	r1, [r3, r2]
    a062:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a066:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a06a:	781b      	ldrb	r3, [r3, #0]
    a06c:	3301      	adds	r3, #1
    a06e:	b2da      	uxtb	r2, r3
    a070:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a074:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a078:	701a      	strb	r2, [r3, #0]
    a07a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a07e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a082:	781b      	ldrb	r3, [r3, #0]
    a084:	2bff      	cmp	r3, #255	; 0xff
    a086:	d105      	bne.n	a094 <send_nav_ref+0x12c>
    a088:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a08c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a090:	2200      	movs	r2, #0
    a092:	701a      	strb	r2, [r3, #0]
    a094:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    a098:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a09c:	2209      	movs	r2, #9
    a09e:	701a      	strb	r2, [r3, #0]
    a0a0:	f24b 53be 	movw	r3, #46526	; 0xb5be
    a0a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0a8:	2209      	movs	r2, #9
    a0aa:	701a      	strb	r2, [r3, #0]
    a0ac:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a0b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0b4:	781b      	ldrb	r3, [r3, #0]
    a0b6:	461a      	mov	r2, r3
    a0b8:	f643 03f4 	movw	r3, #14580	; 0x38f4
    a0bc:	f2c0 0301 	movt	r3, #1
    a0c0:	7819      	ldrb	r1, [r3, #0]
    a0c2:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    a0c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0ca:	5499      	strb	r1, [r3, r2]
    a0cc:	f643 03f4 	movw	r3, #14580	; 0x38f4
    a0d0:	f2c0 0301 	movt	r3, #1
    a0d4:	781a      	ldrb	r2, [r3, #0]
    a0d6:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    a0da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0de:	781b      	ldrb	r3, [r3, #0]
    a0e0:	4413      	add	r3, r2
    a0e2:	b2da      	uxtb	r2, r3
    a0e4:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    a0e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0ec:	701a      	strb	r2, [r3, #0]
    a0ee:	f24b 53be 	movw	r3, #46526	; 0xb5be
    a0f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0f6:	781a      	ldrb	r2, [r3, #0]
    a0f8:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    a0fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a100:	781b      	ldrb	r3, [r3, #0]
    a102:	4413      	add	r3, r2
    a104:	b2da      	uxtb	r2, r3
    a106:	f24b 53be 	movw	r3, #46526	; 0xb5be
    a10a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a10e:	701a      	strb	r2, [r3, #0]
    a110:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a114:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a118:	781b      	ldrb	r3, [r3, #0]
    a11a:	3301      	adds	r3, #1
    a11c:	b2da      	uxtb	r2, r3
    a11e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a122:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a126:	701a      	strb	r2, [r3, #0]
    a128:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a12c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a130:	781b      	ldrb	r3, [r3, #0]
    a132:	2bff      	cmp	r3, #255	; 0xff
    a134:	d105      	bne.n	a142 <send_nav_ref+0x1da>
    a136:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a13a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a13e:	2200      	movs	r2, #0
    a140:	701a      	strb	r2, [r3, #0]
    a142:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a146:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a14a:	781b      	ldrb	r3, [r3, #0]
    a14c:	461a      	mov	r2, r3
    a14e:	f643 03f4 	movw	r3, #14580	; 0x38f4
    a152:	f2c0 0301 	movt	r3, #1
    a156:	7859      	ldrb	r1, [r3, #1]
    a158:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    a15c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a160:	5499      	strb	r1, [r3, r2]
    a162:	4bd2      	ldr	r3, [pc, #840]	; (a4ac <send_nav_ref+0x544>)
    a164:	781a      	ldrb	r2, [r3, #0]
    a166:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    a16a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a16e:	781b      	ldrb	r3, [r3, #0]
    a170:	4413      	add	r3, r2
    a172:	b2da      	uxtb	r2, r3
    a174:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    a178:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a17c:	701a      	strb	r2, [r3, #0]
    a17e:	f24b 53be 	movw	r3, #46526	; 0xb5be
    a182:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a186:	781a      	ldrb	r2, [r3, #0]
    a188:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    a18c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a190:	781b      	ldrb	r3, [r3, #0]
    a192:	4413      	add	r3, r2
    a194:	b2da      	uxtb	r2, r3
    a196:	f24b 53be 	movw	r3, #46526	; 0xb5be
    a19a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a19e:	701a      	strb	r2, [r3, #0]
    a1a0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a1a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1a8:	781b      	ldrb	r3, [r3, #0]
    a1aa:	3301      	adds	r3, #1
    a1ac:	b2da      	uxtb	r2, r3
    a1ae:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a1b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1b6:	701a      	strb	r2, [r3, #0]
    a1b8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a1bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1c0:	781b      	ldrb	r3, [r3, #0]
    a1c2:	2bff      	cmp	r3, #255	; 0xff
    a1c4:	d105      	bne.n	a1d2 <send_nav_ref+0x26a>
    a1c6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a1ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1ce:	2200      	movs	r2, #0
    a1d0:	701a      	strb	r2, [r3, #0]
    a1d2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a1d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1da:	781b      	ldrb	r3, [r3, #0]
    a1dc:	461a      	mov	r2, r3
    a1de:	f643 03f4 	movw	r3, #14580	; 0x38f4
    a1e2:	f2c0 0301 	movt	r3, #1
    a1e6:	7899      	ldrb	r1, [r3, #2]
    a1e8:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    a1ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1f0:	5499      	strb	r1, [r3, r2]
    a1f2:	4baf      	ldr	r3, [pc, #700]	; (a4b0 <send_nav_ref+0x548>)
    a1f4:	781a      	ldrb	r2, [r3, #0]
    a1f6:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    a1fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1fe:	781b      	ldrb	r3, [r3, #0]
    a200:	4413      	add	r3, r2
    a202:	b2da      	uxtb	r2, r3
    a204:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    a208:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a20c:	701a      	strb	r2, [r3, #0]
    a20e:	f24b 53be 	movw	r3, #46526	; 0xb5be
    a212:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a216:	781a      	ldrb	r2, [r3, #0]
    a218:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    a21c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a220:	781b      	ldrb	r3, [r3, #0]
    a222:	4413      	add	r3, r2
    a224:	b2da      	uxtb	r2, r3
    a226:	f24b 53be 	movw	r3, #46526	; 0xb5be
    a22a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a22e:	701a      	strb	r2, [r3, #0]
    a230:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a234:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a238:	781b      	ldrb	r3, [r3, #0]
    a23a:	3301      	adds	r3, #1
    a23c:	b2da      	uxtb	r2, r3
    a23e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a242:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a246:	701a      	strb	r2, [r3, #0]
    a248:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a24c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a250:	781b      	ldrb	r3, [r3, #0]
    a252:	2bff      	cmp	r3, #255	; 0xff
    a254:	d105      	bne.n	a262 <send_nav_ref+0x2fa>
    a256:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a25a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a25e:	2200      	movs	r2, #0
    a260:	701a      	strb	r2, [r3, #0]
    a262:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a266:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a26a:	781b      	ldrb	r3, [r3, #0]
    a26c:	461a      	mov	r2, r3
    a26e:	f643 03f4 	movw	r3, #14580	; 0x38f4
    a272:	f2c0 0301 	movt	r3, #1
    a276:	78d9      	ldrb	r1, [r3, #3]
    a278:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    a27c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a280:	5499      	strb	r1, [r3, r2]
    a282:	4b8c      	ldr	r3, [pc, #560]	; (a4b4 <send_nav_ref+0x54c>)
    a284:	781a      	ldrb	r2, [r3, #0]
    a286:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    a28a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a28e:	781b      	ldrb	r3, [r3, #0]
    a290:	4413      	add	r3, r2
    a292:	b2da      	uxtb	r2, r3
    a294:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    a298:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a29c:	701a      	strb	r2, [r3, #0]
    a29e:	f24b 53be 	movw	r3, #46526	; 0xb5be
    a2a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2a6:	781a      	ldrb	r2, [r3, #0]
    a2a8:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    a2ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2b0:	781b      	ldrb	r3, [r3, #0]
    a2b2:	4413      	add	r3, r2
    a2b4:	b2da      	uxtb	r2, r3
    a2b6:	f24b 53be 	movw	r3, #46526	; 0xb5be
    a2ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2be:	701a      	strb	r2, [r3, #0]
    a2c0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a2c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2c8:	781b      	ldrb	r3, [r3, #0]
    a2ca:	3301      	adds	r3, #1
    a2cc:	b2da      	uxtb	r2, r3
    a2ce:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a2d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2d6:	701a      	strb	r2, [r3, #0]
    a2d8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a2dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2e0:	781b      	ldrb	r3, [r3, #0]
    a2e2:	2bff      	cmp	r3, #255	; 0xff
    a2e4:	d105      	bne.n	a2f2 <send_nav_ref+0x38a>
    a2e6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a2ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2ee:	2200      	movs	r2, #0
    a2f0:	701a      	strb	r2, [r3, #0]
    a2f2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a2f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2fa:	781b      	ldrb	r3, [r3, #0]
    a2fc:	461a      	mov	r2, r3
    a2fe:	f643 03f8 	movw	r3, #14584	; 0x38f8
    a302:	f2c0 0301 	movt	r3, #1
    a306:	7819      	ldrb	r1, [r3, #0]
    a308:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    a30c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a310:	5499      	strb	r1, [r3, r2]
    a312:	f643 03f8 	movw	r3, #14584	; 0x38f8
    a316:	f2c0 0301 	movt	r3, #1
    a31a:	781a      	ldrb	r2, [r3, #0]
    a31c:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    a320:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a324:	781b      	ldrb	r3, [r3, #0]
    a326:	4413      	add	r3, r2
    a328:	b2da      	uxtb	r2, r3
    a32a:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    a32e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a332:	701a      	strb	r2, [r3, #0]
    a334:	f24b 53be 	movw	r3, #46526	; 0xb5be
    a338:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a33c:	781a      	ldrb	r2, [r3, #0]
    a33e:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    a342:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a346:	781b      	ldrb	r3, [r3, #0]
    a348:	4413      	add	r3, r2
    a34a:	b2da      	uxtb	r2, r3
    a34c:	f24b 53be 	movw	r3, #46526	; 0xb5be
    a350:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a354:	701a      	strb	r2, [r3, #0]
    a356:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a35a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a35e:	781b      	ldrb	r3, [r3, #0]
    a360:	3301      	adds	r3, #1
    a362:	b2da      	uxtb	r2, r3
    a364:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a368:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a36c:	701a      	strb	r2, [r3, #0]
    a36e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a372:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a376:	781b      	ldrb	r3, [r3, #0]
    a378:	2bff      	cmp	r3, #255	; 0xff
    a37a:	d105      	bne.n	a388 <send_nav_ref+0x420>
    a37c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a380:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a384:	2200      	movs	r2, #0
    a386:	701a      	strb	r2, [r3, #0]
    a388:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a38c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a390:	781b      	ldrb	r3, [r3, #0]
    a392:	461a      	mov	r2, r3
    a394:	f643 03f8 	movw	r3, #14584	; 0x38f8
    a398:	f2c0 0301 	movt	r3, #1
    a39c:	7859      	ldrb	r1, [r3, #1]
    a39e:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    a3a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3a6:	5499      	strb	r1, [r3, r2]
    a3a8:	4b43      	ldr	r3, [pc, #268]	; (a4b8 <send_nav_ref+0x550>)
    a3aa:	781a      	ldrb	r2, [r3, #0]
    a3ac:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    a3b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3b4:	781b      	ldrb	r3, [r3, #0]
    a3b6:	4413      	add	r3, r2
    a3b8:	b2da      	uxtb	r2, r3
    a3ba:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    a3be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3c2:	701a      	strb	r2, [r3, #0]
    a3c4:	f24b 53be 	movw	r3, #46526	; 0xb5be
    a3c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3cc:	781a      	ldrb	r2, [r3, #0]
    a3ce:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    a3d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3d6:	781b      	ldrb	r3, [r3, #0]
    a3d8:	4413      	add	r3, r2
    a3da:	b2da      	uxtb	r2, r3
    a3dc:	f24b 53be 	movw	r3, #46526	; 0xb5be
    a3e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3e4:	701a      	strb	r2, [r3, #0]
    a3e6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a3ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3ee:	781b      	ldrb	r3, [r3, #0]
    a3f0:	3301      	adds	r3, #1
    a3f2:	b2da      	uxtb	r2, r3
    a3f4:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a3f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3fc:	701a      	strb	r2, [r3, #0]
    a3fe:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a402:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a406:	781b      	ldrb	r3, [r3, #0]
    a408:	2bff      	cmp	r3, #255	; 0xff
    a40a:	d105      	bne.n	a418 <send_nav_ref+0x4b0>
    a40c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a410:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a414:	2200      	movs	r2, #0
    a416:	701a      	strb	r2, [r3, #0]
    a418:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a41c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a420:	781b      	ldrb	r3, [r3, #0]
    a422:	461a      	mov	r2, r3
    a424:	f643 03f8 	movw	r3, #14584	; 0x38f8
    a428:	f2c0 0301 	movt	r3, #1
    a42c:	7899      	ldrb	r1, [r3, #2]
    a42e:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    a432:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a436:	5499      	strb	r1, [r3, r2]
    a438:	4b20      	ldr	r3, [pc, #128]	; (a4bc <send_nav_ref+0x554>)
    a43a:	781a      	ldrb	r2, [r3, #0]
    a43c:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    a440:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a444:	781b      	ldrb	r3, [r3, #0]
    a446:	4413      	add	r3, r2
    a448:	b2da      	uxtb	r2, r3
    a44a:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    a44e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a452:	701a      	strb	r2, [r3, #0]
    a454:	f24b 53be 	movw	r3, #46526	; 0xb5be
    a458:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a45c:	781a      	ldrb	r2, [r3, #0]
    a45e:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    a462:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a466:	781b      	ldrb	r3, [r3, #0]
    a468:	4413      	add	r3, r2
    a46a:	b2da      	uxtb	r2, r3
    a46c:	f24b 53be 	movw	r3, #46526	; 0xb5be
    a470:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a474:	701a      	strb	r2, [r3, #0]
    a476:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a47a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a47e:	781b      	ldrb	r3, [r3, #0]
    a480:	3301      	adds	r3, #1
    a482:	b2da      	uxtb	r2, r3
    a484:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a488:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a48c:	701a      	strb	r2, [r3, #0]
    a48e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a492:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a496:	781b      	ldrb	r3, [r3, #0]
    a498:	2bff      	cmp	r3, #255	; 0xff
    a49a:	d111      	bne.n	a4c0 <send_nav_ref+0x558>
    a49c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a4a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4a4:	2200      	movs	r2, #0
    a4a6:	701a      	strb	r2, [r3, #0]
    a4a8:	e00a      	b.n	a4c0 <send_nav_ref+0x558>
    a4aa:	bf00      	nop
    a4ac:	000138f5 	.word	0x000138f5
    a4b0:	000138f6 	.word	0x000138f6
    a4b4:	000138f7 	.word	0x000138f7
    a4b8:	000138f9 	.word	0x000138f9
    a4bc:	000138fa 	.word	0x000138fa
    a4c0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a4c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4c8:	781b      	ldrb	r3, [r3, #0]
    a4ca:	461a      	mov	r2, r3
    a4cc:	f643 03f8 	movw	r3, #14584	; 0x38f8
    a4d0:	f2c0 0301 	movt	r3, #1
    a4d4:	78d9      	ldrb	r1, [r3, #3]
    a4d6:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    a4da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4de:	5499      	strb	r1, [r3, r2]
    a4e0:	4b79      	ldr	r3, [pc, #484]	; (a6c8 <send_nav_ref+0x760>)
    a4e2:	781a      	ldrb	r2, [r3, #0]
    a4e4:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    a4e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4ec:	781b      	ldrb	r3, [r3, #0]
    a4ee:	4413      	add	r3, r2
    a4f0:	b2da      	uxtb	r2, r3
    a4f2:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    a4f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4fa:	701a      	strb	r2, [r3, #0]
    a4fc:	f24b 53be 	movw	r3, #46526	; 0xb5be
    a500:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a504:	781a      	ldrb	r2, [r3, #0]
    a506:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    a50a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a50e:	781b      	ldrb	r3, [r3, #0]
    a510:	4413      	add	r3, r2
    a512:	b2da      	uxtb	r2, r3
    a514:	f24b 53be 	movw	r3, #46526	; 0xb5be
    a518:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a51c:	701a      	strb	r2, [r3, #0]
    a51e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a522:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a526:	781b      	ldrb	r3, [r3, #0]
    a528:	3301      	adds	r3, #1
    a52a:	b2da      	uxtb	r2, r3
    a52c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a530:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a534:	701a      	strb	r2, [r3, #0]
    a536:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a53a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a53e:	781b      	ldrb	r3, [r3, #0]
    a540:	2bff      	cmp	r3, #255	; 0xff
    a542:	d105      	bne.n	a550 <send_nav_ref+0x5e8>
    a544:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a548:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a54c:	2200      	movs	r2, #0
    a54e:	701a      	strb	r2, [r3, #0]
    a550:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a554:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a558:	781b      	ldrb	r3, [r3, #0]
    a55a:	461a      	mov	r2, r3
    a55c:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    a560:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a564:	7819      	ldrb	r1, [r3, #0]
    a566:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    a56a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a56e:	5499      	strb	r1, [r3, r2]
    a570:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a574:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a578:	781b      	ldrb	r3, [r3, #0]
    a57a:	3301      	adds	r3, #1
    a57c:	b2da      	uxtb	r2, r3
    a57e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a582:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a586:	701a      	strb	r2, [r3, #0]
    a588:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a58c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a590:	781b      	ldrb	r3, [r3, #0]
    a592:	2bff      	cmp	r3, #255	; 0xff
    a594:	d105      	bne.n	a5a2 <send_nav_ref+0x63a>
    a596:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a59a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a59e:	2200      	movs	r2, #0
    a5a0:	701a      	strb	r2, [r3, #0]
    a5a2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a5a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5aa:	781b      	ldrb	r3, [r3, #0]
    a5ac:	461a      	mov	r2, r3
    a5ae:	f24b 53be 	movw	r3, #46526	; 0xb5be
    a5b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5b6:	7819      	ldrb	r1, [r3, #0]
    a5b8:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    a5bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5c0:	5499      	strb	r1, [r3, r2]
    a5c2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a5c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5ca:	781b      	ldrb	r3, [r3, #0]
    a5cc:	3301      	adds	r3, #1
    a5ce:	b2da      	uxtb	r2, r3
    a5d0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a5d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5d8:	701a      	strb	r2, [r3, #0]
    a5da:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a5de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5e2:	781b      	ldrb	r3, [r3, #0]
    a5e4:	2bff      	cmp	r3, #255	; 0xff
    a5e6:	d105      	bne.n	a5f4 <send_nav_ref+0x68c>
    a5e8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a5ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5f0:	2200      	movs	r2, #0
    a5f2:	701a      	strb	r2, [r3, #0]
    a5f4:	f248 0339 	movw	r3, #32825	; 0x8039
    a5f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5fc:	781b      	ldrb	r3, [r3, #0]
    a5fe:	b2db      	uxtb	r3, r3
    a600:	f003 0310 	and.w	r3, r3, #16
    a604:	2b00      	cmp	r3, #0
    a606:	d15a      	bne.n	a6be <send_nav_ref+0x756>
    a608:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    a60c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a610:	781b      	ldrb	r3, [r3, #0]
    a612:	b2db      	uxtb	r3, r3
    a614:	461a      	mov	r2, r3
    a616:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    a61a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a61e:	5c9a      	ldrb	r2, [r3, r2]
    a620:	f24b 53bb 	movw	r3, #46523	; 0xb5bb
    a624:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a628:	701a      	strb	r2, [r3, #0]
    a62a:	f24b 53bc 	movw	r3, #46524	; 0xb5bc
    a62e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a632:	2200      	movs	r2, #0
    a634:	701a      	strb	r2, [r3, #0]
    a636:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    a63a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a63e:	781b      	ldrb	r3, [r3, #0]
    a640:	b2db      	uxtb	r3, r3
    a642:	3301      	adds	r3, #1
    a644:	b2da      	uxtb	r2, r3
    a646:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    a64a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a64e:	701a      	strb	r2, [r3, #0]
    a650:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    a654:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a658:	781b      	ldrb	r3, [r3, #0]
    a65a:	b2db      	uxtb	r3, r3
    a65c:	2bff      	cmp	r3, #255	; 0xff
    a65e:	d105      	bne.n	a66c <send_nav_ref+0x704>
    a660:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    a664:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a668:	2200      	movs	r2, #0
    a66a:	701a      	strb	r2, [r3, #0]
    a66c:	f248 0338 	movw	r3, #32824	; 0x8038
    a670:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a674:	f248 0238 	movw	r2, #32824	; 0x8038
    a678:	f2c2 0200 	movt	r2, #8192	; 0x2000
    a67c:	7812      	ldrb	r2, [r2, #0]
    a67e:	b2d2      	uxtb	r2, r2
    a680:	f042 0201 	orr.w	r2, r2, #1
    a684:	b2d2      	uxtb	r2, r2
    a686:	701a      	strb	r2, [r3, #0]
    a688:	f248 0339 	movw	r3, #32825	; 0x8039
    a68c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a690:	f248 0239 	movw	r2, #32825	; 0x8039
    a694:	f2c2 0200 	movt	r2, #8192	; 0x2000
    a698:	7812      	ldrb	r2, [r2, #0]
    a69a:	b2d2      	uxtb	r2, r2
    a69c:	f042 0210 	orr.w	r2, r2, #16
    a6a0:	b2d2      	uxtb	r2, r2
    a6a2:	701a      	strb	r2, [r3, #0]
    a6a4:	e00b      	b.n	a6be <send_nav_ref+0x756>
    a6a6:	f24b 43b8 	movw	r3, #46264	; 0xb4b8
    a6aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6ae:	781b      	ldrb	r3, [r3, #0]
    a6b0:	3301      	adds	r3, #1
    a6b2:	b2da      	uxtb	r2, r3
    a6b4:	f24b 43b8 	movw	r3, #46264	; 0xb4b8
    a6b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6bc:	701a      	strb	r2, [r3, #0]
  //vPrintString("S_13 reporting_task end!\n\r");
}
    a6be:	46bd      	mov	sp, r7
    a6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    a6c4:	4770      	bx	lr
    a6c6:	bf00      	nop
    a6c8:	000138fb 	.word	0x000138fb

0000a6cc <reporting_task>:

void reporting_task()
{
    a6cc:	b580      	push	{r7, lr}
    a6ce:	af00      	add	r7, sp, #0
    send_boot();
    a6d0:	f7fa faf8 	bl	4cc4 <send_boot>
    send_attitude();
    a6d4:	f7fb fac6 	bl	5c64 <send_attitude>
    send_adc();
    a6d8:	f7fb ffb8 	bl	664c <send_adc>
    send_settings();
    a6dc:	f7fc fa3e 	bl	6b5c <send_settings>
    send_desired();
    a6e0:	f7fc fe40 	bl	7364 <send_desired>
    send_bat();
    a6e4:	f7fd fd6e 	bl	81c4 <send_bat>
    send_climb();
    a6e8:	f7fe f922 	bl	8930 <send_climb>
    send_mode();
    a6ec:	f7fe fe92 	bl	9414 <send_mode>
    send_debug();
    a6f0:	f7ff f964 	bl	99bc <send_debug>
    send_nav_ref();
    a6f4:	f7ff fc38 	bl	9f68 <send_nav_ref>
}
    a6f8:	bd80      	pop	{r7, pc}
    a6fa:	bf00      	nop

0000a6fc <inflight_calib_mode_update>:

/** \fn inline uint8_t inflight_calib_mode_update ( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
inline uint8_t inflight_calib_mode_update ( void ) {
    a6fc:	b480      	push	{r7}
    a6fe:	b083      	sub	sp, #12
    a700:	af00      	add	r7, sp, #0
  ModeUpdate(inflight_calib_mode, IF_CALIB_MODE_OF_PULSE(from_fbw.channels[RADIO_CALIB]));
    a702:	f24b 53c0 	movw	r3, #46528	; 0xb5c0
    a706:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a70a:	8a1b      	ldrh	r3, [r3, #16]
    a70c:	b21b      	sxth	r3, r3
    a70e:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
    a712:	db0d      	blt.n	a730 <inflight_calib_mode_update+0x34>
    a714:	f24b 53c0 	movw	r3, #46528	; 0xb5c0
    a718:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a71c:	8a1b      	ldrh	r3, [r3, #16]
    a71e:	b21a      	sxth	r2, r3
    a720:	f640 437f 	movw	r3, #3199	; 0xc7f
    a724:	429a      	cmp	r2, r3
    a726:	bfd4      	ite	le
    a728:	2300      	movle	r3, #0
    a72a:	2301      	movgt	r3, #1
    a72c:	b2db      	uxtb	r3, r3
    a72e:	e000      	b.n	a732 <inflight_calib_mode_update+0x36>
    a730:	2302      	movs	r3, #2
    a732:	71fb      	strb	r3, [r7, #7]
    a734:	f64b 23cc 	movw	r3, #47820	; 0xbacc
    a738:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a73c:	781b      	ldrb	r3, [r3, #0]
    a73e:	79fa      	ldrb	r2, [r7, #7]
    a740:	429a      	cmp	r2, r3
    a742:	d007      	beq.n	a754 <inflight_calib_mode_update+0x58>
    a744:	f64b 23cc 	movw	r3, #47820	; 0xbacc
    a748:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a74c:	79fa      	ldrb	r2, [r7, #7]
    a74e:	701a      	strb	r2, [r3, #0]
    a750:	2301      	movs	r3, #1
    a752:	e000      	b.n	a756 <inflight_calib_mode_update+0x5a>
    a754:	2300      	movs	r3, #0
}
    a756:	4618      	mov	r0, r3
    a758:	370c      	adds	r7, #12
    a75a:	46bd      	mov	sp, r7
    a75c:	f85d 7b04 	ldr.w	r7, [sp], #4
    a760:	4770      	bx	lr
    a762:	bf00      	nop

0000a764 <radio_control_task>:


/** \fn inline void radio_control_task( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
void radio_control_task( void ) {
    a764:	b580      	push	{r7, lr}
    a766:	b082      	sub	sp, #8
    a768:	af00      	add	r7, sp, #0
  bool_t calib_mode_changed;
	//vPrintString("S_3 radio_control_task start! \n\r"); //SunnyBeike
    //add by wanbo
    link_fbw_receive_valid = 1;
    a76a:	f24b 53ee 	movw	r3, #46574	; 0xb5ee
    a76e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a772:	2201      	movs	r2, #1
    a774:	701a      	strb	r2, [r3, #0]
  if (link_fbw_receive_valid) {
    a776:	f24b 53ee 	movw	r3, #46574	; 0xb5ee
    a77a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a77e:	781b      	ldrb	r3, [r3, #0]
    a780:	b2db      	uxtb	r3, r3
    a782:	2b00      	cmp	r3, #0
    a784:	f000 80df 	beq.w	a946 <radio_control_task+0x1e2>
    uint8_t mode_changed = FALSE;
    a788:	2300      	movs	r3, #0
    a78a:	71fb      	strb	r3, [r7, #7]
    copy_from_to_fbw();
    a78c:	f7fa fa84 	bl	4c98 <copy_from_to_fbw>
    //if ((bit_is_set(from_fbw.status, RADIO_REALLY_LOST) && (pprz_mode == PPRZ_MODE_AUTO1 || pprz_mode == PPRZ_MODE_MANUAL)) || too_far_from_home) 
    {
      pprz_mode = PPRZ_MODE_HOME;
    a790:	f24b 439c 	movw	r3, #46236	; 0xb49c
    a794:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a798:	2203      	movs	r2, #3
    a79a:	701a      	strb	r2, [r3, #0]
      mode_changed = TRUE;
    a79c:	2301      	movs	r3, #1
    a79e:	71fb      	strb	r3, [r7, #7]
    }
    // modified by wanbo
    //if (bit_is_set(from_fbw.status, AVERAGED_CHANNELS_SENT)) 
    {
      bool_t pprz_mode_changed = pprz_mode_update();
    a7a0:	f7fa f954 	bl	4a4c <pprz_mode_update>
    a7a4:	4603      	mov	r3, r0
    a7a6:	71bb      	strb	r3, [r7, #6]
      mode_changed |= pprz_mode_changed;
    a7a8:	79fa      	ldrb	r2, [r7, #7]
    a7aa:	79bb      	ldrb	r3, [r7, #6]
    a7ac:	4313      	orrs	r3, r2
    a7ae:	71fb      	strb	r3, [r7, #7]
#ifdef RADIO_LLS
      mode_changed |= ir_estim_mode_update();
    a7b0:	f7fa f998 	bl	4ae4 <ir_estim_mode_update>
    a7b4:	4603      	mov	r3, r0
    a7b6:	461a      	mov	r2, r3
    a7b8:	79fb      	ldrb	r3, [r7, #7]
    a7ba:	4313      	orrs	r3, r2
    a7bc:	71fb      	strb	r3, [r7, #7]
#endif
#ifdef RADIO_CALIB
      calib_mode_changed = inflight_calib_mode_update();
    a7be:	f7ff ff9d 	bl	a6fc <inflight_calib_mode_update>
    a7c2:	4603      	mov	r3, r0
    a7c4:	717b      	strb	r3, [r7, #5]
      inflight_calib(calib_mode_changed || pprz_mode_changed);
    a7c6:	797b      	ldrb	r3, [r7, #5]
    a7c8:	2b00      	cmp	r3, #0
    a7ca:	d102      	bne.n	a7d2 <radio_control_task+0x6e>
    a7cc:	79bb      	ldrb	r3, [r7, #6]
    a7ce:	2b00      	cmp	r3, #0
    a7d0:	d001      	beq.n	a7d6 <radio_control_task+0x72>
    a7d2:	2301      	movs	r3, #1
    a7d4:	e000      	b.n	a7d8 <radio_control_task+0x74>
    a7d6:	2300      	movs	r3, #0
    a7d8:	b2db      	uxtb	r3, r3
    a7da:	4618      	mov	r0, r3
    a7dc:	f005 ff80 	bl	106e0 <inflight_calib>
      mode_changed |= calib_mode_changed;
    a7e0:	79fa      	ldrb	r2, [r7, #7]
    a7e2:	797b      	ldrb	r3, [r7, #5]
    a7e4:	4313      	orrs	r3, r2
    a7e6:	71fb      	strb	r3, [r7, #7]
#endif
    }
    mode_changed |= mcu1_status_update();
    a7e8:	f7fa f9a4 	bl	4b34 <mcu1_status_update>
    a7ec:	4603      	mov	r3, r0
    a7ee:	461a      	mov	r2, r3
    a7f0:	79fb      	ldrb	r3, [r7, #7]
    a7f2:	4313      	orrs	r3, r2
    a7f4:	71fb      	strb	r3, [r7, #7]
    // add by wanbo
    mode_changed = 1;
    a7f6:	2301      	movs	r3, #1
    a7f8:	71fb      	strb	r3, [r7, #7]
    if ( mode_changed )
    a7fa:	79fb      	ldrb	r3, [r7, #7]
    a7fc:	2b00      	cmp	r3, #0
    a7fe:	d06a      	beq.n	a8d6 <radio_control_task+0x172>
      //DOWNLINK_SEND_PPRZ_MODE(&pprz_mode, &vertical_mode, &inflight_calib_mode, &mcu1_status, &ir_estim_mode);
      
    // add by wanbo
    //if (pprz_mode == PPRZ_MODE_AUTO1) 
    {
      desired_roll = FLOAT_OF_PPRZ(from_fbw.channels[RADIO_ROLL], 0., -0.6);
    a800:	f24b 53c0 	movw	r3, #46528	; 0xb5c0
    a804:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a808:	885b      	ldrh	r3, [r3, #2]
    a80a:	b21b      	sxth	r3, r3
    a80c:	4618      	mov	r0, r3
    a80e:	f008 fd13 	bl	13238 <__aeabi_i2f>
    a812:	4603      	mov	r3, r0
    a814:	4618      	mov	r0, r3
    a816:	f04f 0100 	mov.w	r1, #0
    a81a:	f2c4 6116 	movt	r1, #17942	; 0x4616
    a81e:	f008 fe13 	bl	13448 <__aeabi_fdiv>
    a822:	4603      	mov	r3, r0
    a824:	4618      	mov	r0, r3
    a826:	f008 f8c7 	bl	129b8 <__aeabi_f2d>
    a82a:	4602      	mov	r2, r0
    a82c:	460b      	mov	r3, r1
    a82e:	4610      	mov	r0, r2
    a830:	4619      	mov	r1, r3
    a832:	a347      	add	r3, pc, #284	; (adr r3, a950 <radio_control_task+0x1ec>)
    a834:	e9d3 2300 	ldrd	r2, r3, [r3]
    a838:	f008 f912 	bl	12a60 <__aeabi_dmul>
    a83c:	4602      	mov	r2, r0
    a83e:	460b      	mov	r3, r1
    a840:	4610      	mov	r0, r2
    a842:	4619      	mov	r1, r3
    a844:	f04f 0200 	mov.w	r2, #0
    a848:	f04f 0300 	mov.w	r3, #0
    a84c:	f007 ff56 	bl	126fc <__adddf3>
    a850:	4602      	mov	r2, r0
    a852:	460b      	mov	r3, r1
    a854:	4610      	mov	r0, r2
    a856:	4619      	mov	r1, r3
    a858:	f008 fbe4 	bl	13024 <__aeabi_d2f>
    a85c:	4602      	mov	r2, r0
    a85e:	f24b 73e4 	movw	r3, #47076	; 0xb7e4
    a862:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a866:	601a      	str	r2, [r3, #0]
      desired_pitch = FLOAT_OF_PPRZ(from_fbw.channels[RADIO_PITCH], 0., 0.5);
    a868:	f24b 53c0 	movw	r3, #46528	; 0xb5c0
    a86c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a870:	889b      	ldrh	r3, [r3, #4]
    a872:	b21b      	sxth	r3, r3
    a874:	4618      	mov	r0, r3
    a876:	f008 fcdf 	bl	13238 <__aeabi_i2f>
    a87a:	4603      	mov	r3, r0
    a87c:	4618      	mov	r0, r3
    a87e:	f04f 0100 	mov.w	r1, #0
    a882:	f2c4 6116 	movt	r1, #17942	; 0x4616
    a886:	f008 fddf 	bl	13448 <__aeabi_fdiv>
    a88a:	4603      	mov	r3, r0
    a88c:	4618      	mov	r0, r3
    a88e:	f008 f893 	bl	129b8 <__aeabi_f2d>
    a892:	4602      	mov	r2, r0
    a894:	460b      	mov	r3, r1
    a896:	4610      	mov	r0, r2
    a898:	4619      	mov	r1, r3
    a89a:	f04f 0200 	mov.w	r2, #0
    a89e:	f04f 0300 	mov.w	r3, #0
    a8a2:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
    a8a6:	f008 f8db 	bl	12a60 <__aeabi_dmul>
    a8aa:	4602      	mov	r2, r0
    a8ac:	460b      	mov	r3, r1
    a8ae:	4610      	mov	r0, r2
    a8b0:	4619      	mov	r1, r3
    a8b2:	f04f 0200 	mov.w	r2, #0
    a8b6:	f04f 0300 	mov.w	r3, #0
    a8ba:	f007 ff1f 	bl	126fc <__adddf3>
    a8be:	4602      	mov	r2, r0
    a8c0:	460b      	mov	r3, r1
    a8c2:	4610      	mov	r0, r2
    a8c4:	4619      	mov	r1, r3
    a8c6:	f008 fbad 	bl	13024 <__aeabi_d2f>
    a8ca:	4602      	mov	r2, r0
    a8cc:	f24b 73e8 	movw	r3, #47080	; 0xb7e8
    a8d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8d4:	601a      	str	r2, [r3, #0]
    } // else asynchronously set by course_pid_run()

    // add by wanbo
   // if (pprz_mode == PPRZ_MODE_MANUAL || pprz_mode == PPRZ_MODE_AUTO1) 
    {
      desired_gaz = from_fbw.channels[RADIO_THROTTLE];
    a8d6:	f24b 53c0 	movw	r3, #46528	; 0xb5c0
    a8da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8de:	881a      	ldrh	r2, [r3, #0]
    a8e0:	f24b 73ec 	movw	r3, #47084	; 0xb7ec
    a8e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8e8:	801a      	strh	r2, [r3, #0]
      pitch_pgain = PITCH_PGAIN * ( 1 - 1. / 3. * from_fbw.channels[RADIO_THROTTLE] / MAX_PPRZ);
#endif /* ANTON_MAGICAL_MISTERY_GAINS */
    }
    // else asynchronously set by climb_pid_run();

    mcu1_ppm_cpt = from_fbw.ppm_cpt;
    a8ea:	f24b 53c0 	movw	r3, #46528	; 0xb5c0
    a8ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8f2:	7c9a      	ldrb	r2, [r3, #18]
    a8f4:	f24b 43a4 	movw	r3, #46244	; 0xb4a4
    a8f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8fc:	701a      	strb	r2, [r3, #0]
    vsupply = from_fbw.vsupply;
    a8fe:	f24b 53c0 	movw	r3, #46528	; 0xb5c0
    a902:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a906:	7d5a      	ldrb	r2, [r3, #21]
    a908:	f24b 43a2 	movw	r3, #46242	; 0xb4a2
    a90c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a910:	701a      	strb	r2, [r3, #0]

    events_update();
    a912:	f7fa f93f 	bl	4b94 <events_update>

    // add by wanbo
    //if (!estimator_flight_time) 
    {
      ground_calibrate();
    a916:	f7fa f84f 	bl	49b8 <ground_calibrate>
      if (pprz_mode == PPRZ_MODE_AUTO2 && from_fbw.channels[RADIO_THROTTLE] > GAZ_THRESHOLD_TAKEOFF) {
    a91a:	f24b 439c 	movw	r3, #46236	; 0xb49c
    a91e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a922:	781b      	ldrb	r3, [r3, #0]
    a924:	2b02      	cmp	r3, #2
    a926:	d10e      	bne.n	a946 <radio_control_task+0x1e2>
    a928:	f24b 53c0 	movw	r3, #46528	; 0xb5c0
    a92c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a930:	881b      	ldrh	r3, [r3, #0]
    a932:	b21b      	sxth	r3, r3
    a934:	f5b3 5f07 	cmp.w	r3, #8640	; 0x21c0
    a938:	dd05      	ble.n	a946 <radio_control_task+0x1e2>
	launch = TRUE;
    a93a:	f24b 43b0 	movw	r3, #46256	; 0xb4b0
    a93e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a942:	2201      	movs	r2, #1
    a944:	701a      	strb	r2, [r3, #0]
      }
    }
  }

	//vPrintString("S_3 radio_control_task end! \n\r"); //SunnyBeike
}
    a946:	3708      	adds	r7, #8
    a948:	46bd      	mov	sp, r7
    a94a:	bd80      	pop	{r7, pc}
    a94c:	f3af 8000 	nop.w
    a950:	33333333 	.word	0x33333333
    a954:	bfe33333 	.word	0xbfe33333

0000a958 <navigation_update>:

/** \fn void navigation_task( void )
 *  \brief Compute desired_course
 */
void navigation_update( void ) {
    a958:	b580      	push	{r7, lr}
    a95a:	af00      	add	r7, sp, #0

  /* Default to keep compatibility with previous behaviour */
  //vPrintString("S_17 Navigation task start!\n\r");
  lateral_mode = LATERAL_MODE_COURSE;
    a95c:	f24b 439e 	movw	r3, #46238	; 0xb49e
    a960:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a964:	2203      	movs	r2, #3
    a966:	701a      	strb	r2, [r3, #0]
  if (pprz_mode == PPRZ_MODE_HOME)
    a968:	f24b 439c 	movw	r3, #46236	; 0xb49c
    a96c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a970:	781b      	ldrb	r3, [r3, #0]
    a972:	2b03      	cmp	r3, #3
    a974:	d102      	bne.n	a97c <navigation_update+0x24>
    nav_home();
    a976:	f005 f937 	bl	fbe8 <nav_home>
    a97a:	e001      	b.n	a980 <navigation_update+0x28>
  else
    nav_update();
    a97c:	f005 f95a 	bl	fc34 <nav_update>
}
    a980:	bd80      	pop	{r7, pc}
    a982:	bf00      	nop

0000a984 <send_nav_values>:

void send_nav_values(void){
    a984:	b480      	push	{r7}
    a986:	af00      	add	r7, sp, #0
  
  DOWNLINK_SEND_NAVIGATION(&nav_block, &nav_stage, &estimator_x, &estimator_y, &desired_course, &dist2_to_wp, &course_pgain, &dist2_to_home);
    a988:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a98c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a990:	781a      	ldrb	r2, [r3, #0]
    a992:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    a996:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a99a:	781b      	ldrb	r3, [r3, #0]
    a99c:	b2db      	uxtb	r3, r3
    a99e:	429a      	cmp	r2, r3
    a9a0:	d313      	bcc.n	a9ca <send_nav_values+0x46>
    a9a2:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    a9a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9aa:	781b      	ldrb	r3, [r3, #0]
    a9ac:	b2db      	uxtb	r3, r3
    a9ae:	461a      	mov	r2, r3
    a9b0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a9b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9b8:	781b      	ldrb	r3, [r3, #0]
    a9ba:	1ad3      	subs	r3, r2, r3
    a9bc:	33ff      	adds	r3, #255	; 0xff
    a9be:	2b1e      	cmp	r3, #30
    a9c0:	bfd4      	ite	le
    a9c2:	2300      	movle	r3, #0
    a9c4:	2301      	movgt	r3, #1
    a9c6:	b2db      	uxtb	r3, r3
    a9c8:	e011      	b.n	a9ee <send_nav_values+0x6a>
    a9ca:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    a9ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9d2:	781b      	ldrb	r3, [r3, #0]
    a9d4:	b2db      	uxtb	r3, r3
    a9d6:	461a      	mov	r2, r3
    a9d8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a9dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9e0:	781b      	ldrb	r3, [r3, #0]
    a9e2:	1ad3      	subs	r3, r2, r3
    a9e4:	2b1e      	cmp	r3, #30
    a9e6:	bfd4      	ite	le
    a9e8:	2300      	movle	r3, #0
    a9ea:	2301      	movgt	r3, #1
    a9ec:	b2db      	uxtb	r3, r3
    a9ee:	2b00      	cmp	r3, #0
    a9f0:	f001 8094 	beq.w	bb1c <send_nav_values+0x1198>
    a9f4:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    a9f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9fc:	781b      	ldrb	r3, [r3, #0]
    a9fe:	461a      	mov	r2, r3
    aa00:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    aa04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa08:	2105      	movs	r1, #5
    aa0a:	5499      	strb	r1, [r3, r2]
    aa0c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    aa10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa14:	781b      	ldrb	r3, [r3, #0]
    aa16:	3301      	adds	r3, #1
    aa18:	b2da      	uxtb	r2, r3
    aa1a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    aa1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa22:	701a      	strb	r2, [r3, #0]
    aa24:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    aa28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa2c:	781b      	ldrb	r3, [r3, #0]
    aa2e:	2bff      	cmp	r3, #255	; 0xff
    aa30:	d105      	bne.n	aa3e <send_nav_values+0xba>
    aa32:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    aa36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa3a:	2200      	movs	r2, #0
    aa3c:	701a      	strb	r2, [r3, #0]
    aa3e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    aa42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa46:	781b      	ldrb	r3, [r3, #0]
    aa48:	461a      	mov	r2, r3
    aa4a:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    aa4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa52:	210a      	movs	r1, #10
    aa54:	5499      	strb	r1, [r3, r2]
    aa56:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    aa5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa5e:	781b      	ldrb	r3, [r3, #0]
    aa60:	3301      	adds	r3, #1
    aa62:	b2da      	uxtb	r2, r3
    aa64:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    aa68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa6c:	701a      	strb	r2, [r3, #0]
    aa6e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    aa72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa76:	781b      	ldrb	r3, [r3, #0]
    aa78:	2bff      	cmp	r3, #255	; 0xff
    aa7a:	d105      	bne.n	aa88 <send_nav_values+0x104>
    aa7c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    aa80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa84:	2200      	movs	r2, #0
    aa86:	701a      	strb	r2, [r3, #0]
    aa88:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    aa8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa90:	220a      	movs	r2, #10
    aa92:	701a      	strb	r2, [r3, #0]
    aa94:	f24b 53be 	movw	r3, #46526	; 0xb5be
    aa98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa9c:	220a      	movs	r2, #10
    aa9e:	701a      	strb	r2, [r3, #0]
    aaa0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    aaa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aaa8:	781b      	ldrb	r3, [r3, #0]
    aaaa:	461a      	mov	r2, r3
    aaac:	f64b 0311 	movw	r3, #47121	; 0xb811
    aab0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aab4:	7819      	ldrb	r1, [r3, #0]
    aab6:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    aaba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aabe:	5499      	strb	r1, [r3, r2]
    aac0:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    aac4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aac8:	781a      	ldrb	r2, [r3, #0]
    aaca:	f64b 0311 	movw	r3, #47121	; 0xb811
    aace:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aad2:	781b      	ldrb	r3, [r3, #0]
    aad4:	4413      	add	r3, r2
    aad6:	b2da      	uxtb	r2, r3
    aad8:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    aadc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aae0:	701a      	strb	r2, [r3, #0]
    aae2:	f24b 53be 	movw	r3, #46526	; 0xb5be
    aae6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aaea:	781a      	ldrb	r2, [r3, #0]
    aaec:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    aaf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aaf4:	781b      	ldrb	r3, [r3, #0]
    aaf6:	4413      	add	r3, r2
    aaf8:	b2da      	uxtb	r2, r3
    aafa:	f24b 53be 	movw	r3, #46526	; 0xb5be
    aafe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab02:	701a      	strb	r2, [r3, #0]
    ab04:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    ab08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab0c:	781b      	ldrb	r3, [r3, #0]
    ab0e:	3301      	adds	r3, #1
    ab10:	b2da      	uxtb	r2, r3
    ab12:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    ab16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab1a:	701a      	strb	r2, [r3, #0]
    ab1c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    ab20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab24:	781b      	ldrb	r3, [r3, #0]
    ab26:	2bff      	cmp	r3, #255	; 0xff
    ab28:	d105      	bne.n	ab36 <send_nav_values+0x1b2>
    ab2a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    ab2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab32:	2200      	movs	r2, #0
    ab34:	701a      	strb	r2, [r3, #0]
    ab36:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    ab3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab3e:	781b      	ldrb	r3, [r3, #0]
    ab40:	461a      	mov	r2, r3
    ab42:	f64b 0310 	movw	r3, #47120	; 0xb810
    ab46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab4a:	7819      	ldrb	r1, [r3, #0]
    ab4c:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    ab50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab54:	5499      	strb	r1, [r3, r2]
    ab56:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    ab5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab5e:	781a      	ldrb	r2, [r3, #0]
    ab60:	f64b 0310 	movw	r3, #47120	; 0xb810
    ab64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab68:	781b      	ldrb	r3, [r3, #0]
    ab6a:	4413      	add	r3, r2
    ab6c:	b2da      	uxtb	r2, r3
    ab6e:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    ab72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab76:	701a      	strb	r2, [r3, #0]
    ab78:	f24b 53be 	movw	r3, #46526	; 0xb5be
    ab7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab80:	781a      	ldrb	r2, [r3, #0]
    ab82:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    ab86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab8a:	781b      	ldrb	r3, [r3, #0]
    ab8c:	4413      	add	r3, r2
    ab8e:	b2da      	uxtb	r2, r3
    ab90:	f24b 53be 	movw	r3, #46526	; 0xb5be
    ab94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab98:	701a      	strb	r2, [r3, #0]
    ab9a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    ab9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aba2:	781b      	ldrb	r3, [r3, #0]
    aba4:	3301      	adds	r3, #1
    aba6:	b2da      	uxtb	r2, r3
    aba8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    abac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abb0:	701a      	strb	r2, [r3, #0]
    abb2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    abb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abba:	781b      	ldrb	r3, [r3, #0]
    abbc:	2bff      	cmp	r3, #255	; 0xff
    abbe:	d105      	bne.n	abcc <send_nav_values+0x248>
    abc0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    abc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abc8:	2200      	movs	r2, #0
    abca:	701a      	strb	r2, [r3, #0]
    abcc:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    abd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abd4:	781b      	ldrb	r3, [r3, #0]
    abd6:	461a      	mov	r2, r3
    abd8:	f64b 236c 	movw	r3, #47724	; 0xba6c
    abdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abe0:	7819      	ldrb	r1, [r3, #0]
    abe2:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    abe6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abea:	5499      	strb	r1, [r3, r2]
    abec:	f64b 236c 	movw	r3, #47724	; 0xba6c
    abf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abf4:	781a      	ldrb	r2, [r3, #0]
    abf6:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    abfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abfe:	781b      	ldrb	r3, [r3, #0]
    ac00:	4413      	add	r3, r2
    ac02:	b2da      	uxtb	r2, r3
    ac04:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    ac08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac0c:	701a      	strb	r2, [r3, #0]
    ac0e:	f24b 53be 	movw	r3, #46526	; 0xb5be
    ac12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac16:	781a      	ldrb	r2, [r3, #0]
    ac18:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    ac1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac20:	781b      	ldrb	r3, [r3, #0]
    ac22:	4413      	add	r3, r2
    ac24:	b2da      	uxtb	r2, r3
    ac26:	f24b 53be 	movw	r3, #46526	; 0xb5be
    ac2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac2e:	701a      	strb	r2, [r3, #0]
    ac30:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    ac34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac38:	781b      	ldrb	r3, [r3, #0]
    ac3a:	3301      	adds	r3, #1
    ac3c:	b2da      	uxtb	r2, r3
    ac3e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    ac42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac46:	701a      	strb	r2, [r3, #0]
    ac48:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    ac4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac50:	781b      	ldrb	r3, [r3, #0]
    ac52:	2bff      	cmp	r3, #255	; 0xff
    ac54:	d105      	bne.n	ac62 <send_nav_values+0x2de>
    ac56:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    ac5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac5e:	2200      	movs	r2, #0
    ac60:	701a      	strb	r2, [r3, #0]
    ac62:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    ac66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac6a:	781b      	ldrb	r3, [r3, #0]
    ac6c:	461a      	mov	r2, r3
    ac6e:	f64b 236c 	movw	r3, #47724	; 0xba6c
    ac72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac76:	7859      	ldrb	r1, [r3, #1]
    ac78:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    ac7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac80:	5499      	strb	r1, [r3, r2]
    ac82:	4bd2      	ldr	r3, [pc, #840]	; (afcc <send_nav_values+0x648>)
    ac84:	781a      	ldrb	r2, [r3, #0]
    ac86:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    ac8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac8e:	781b      	ldrb	r3, [r3, #0]
    ac90:	4413      	add	r3, r2
    ac92:	b2da      	uxtb	r2, r3
    ac94:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    ac98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac9c:	701a      	strb	r2, [r3, #0]
    ac9e:	f24b 53be 	movw	r3, #46526	; 0xb5be
    aca2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aca6:	781a      	ldrb	r2, [r3, #0]
    aca8:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    acac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acb0:	781b      	ldrb	r3, [r3, #0]
    acb2:	4413      	add	r3, r2
    acb4:	b2da      	uxtb	r2, r3
    acb6:	f24b 53be 	movw	r3, #46526	; 0xb5be
    acba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acbe:	701a      	strb	r2, [r3, #0]
    acc0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    acc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acc8:	781b      	ldrb	r3, [r3, #0]
    acca:	3301      	adds	r3, #1
    accc:	b2da      	uxtb	r2, r3
    acce:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    acd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acd6:	701a      	strb	r2, [r3, #0]
    acd8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    acdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ace0:	781b      	ldrb	r3, [r3, #0]
    ace2:	2bff      	cmp	r3, #255	; 0xff
    ace4:	d105      	bne.n	acf2 <send_nav_values+0x36e>
    ace6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    acea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acee:	2200      	movs	r2, #0
    acf0:	701a      	strb	r2, [r3, #0]
    acf2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    acf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acfa:	781b      	ldrb	r3, [r3, #0]
    acfc:	461a      	mov	r2, r3
    acfe:	f64b 236c 	movw	r3, #47724	; 0xba6c
    ad02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad06:	7899      	ldrb	r1, [r3, #2]
    ad08:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    ad0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad10:	5499      	strb	r1, [r3, r2]
    ad12:	4baf      	ldr	r3, [pc, #700]	; (afd0 <send_nav_values+0x64c>)
    ad14:	781a      	ldrb	r2, [r3, #0]
    ad16:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    ad1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad1e:	781b      	ldrb	r3, [r3, #0]
    ad20:	4413      	add	r3, r2
    ad22:	b2da      	uxtb	r2, r3
    ad24:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    ad28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad2c:	701a      	strb	r2, [r3, #0]
    ad2e:	f24b 53be 	movw	r3, #46526	; 0xb5be
    ad32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad36:	781a      	ldrb	r2, [r3, #0]
    ad38:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    ad3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad40:	781b      	ldrb	r3, [r3, #0]
    ad42:	4413      	add	r3, r2
    ad44:	b2da      	uxtb	r2, r3
    ad46:	f24b 53be 	movw	r3, #46526	; 0xb5be
    ad4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad4e:	701a      	strb	r2, [r3, #0]
    ad50:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    ad54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad58:	781b      	ldrb	r3, [r3, #0]
    ad5a:	3301      	adds	r3, #1
    ad5c:	b2da      	uxtb	r2, r3
    ad5e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    ad62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad66:	701a      	strb	r2, [r3, #0]
    ad68:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    ad6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad70:	781b      	ldrb	r3, [r3, #0]
    ad72:	2bff      	cmp	r3, #255	; 0xff
    ad74:	d105      	bne.n	ad82 <send_nav_values+0x3fe>
    ad76:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    ad7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad7e:	2200      	movs	r2, #0
    ad80:	701a      	strb	r2, [r3, #0]
    ad82:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    ad86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad8a:	781b      	ldrb	r3, [r3, #0]
    ad8c:	461a      	mov	r2, r3
    ad8e:	f64b 236c 	movw	r3, #47724	; 0xba6c
    ad92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad96:	78d9      	ldrb	r1, [r3, #3]
    ad98:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    ad9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ada0:	5499      	strb	r1, [r3, r2]
    ada2:	4b8c      	ldr	r3, [pc, #560]	; (afd4 <send_nav_values+0x650>)
    ada4:	781a      	ldrb	r2, [r3, #0]
    ada6:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    adaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adae:	781b      	ldrb	r3, [r3, #0]
    adb0:	4413      	add	r3, r2
    adb2:	b2da      	uxtb	r2, r3
    adb4:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    adb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adbc:	701a      	strb	r2, [r3, #0]
    adbe:	f24b 53be 	movw	r3, #46526	; 0xb5be
    adc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adc6:	781a      	ldrb	r2, [r3, #0]
    adc8:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    adcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    add0:	781b      	ldrb	r3, [r3, #0]
    add2:	4413      	add	r3, r2
    add4:	b2da      	uxtb	r2, r3
    add6:	f24b 53be 	movw	r3, #46526	; 0xb5be
    adda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adde:	701a      	strb	r2, [r3, #0]
    ade0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    ade4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ade8:	781b      	ldrb	r3, [r3, #0]
    adea:	3301      	adds	r3, #1
    adec:	b2da      	uxtb	r2, r3
    adee:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    adf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adf6:	701a      	strb	r2, [r3, #0]
    adf8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    adfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae00:	781b      	ldrb	r3, [r3, #0]
    ae02:	2bff      	cmp	r3, #255	; 0xff
    ae04:	d105      	bne.n	ae12 <send_nav_values+0x48e>
    ae06:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    ae0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae0e:	2200      	movs	r2, #0
    ae10:	701a      	strb	r2, [r3, #0]
    ae12:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    ae16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae1a:	781b      	ldrb	r3, [r3, #0]
    ae1c:	461a      	mov	r2, r3
    ae1e:	f64b 2370 	movw	r3, #47728	; 0xba70
    ae22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae26:	7819      	ldrb	r1, [r3, #0]
    ae28:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    ae2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae30:	5499      	strb	r1, [r3, r2]
    ae32:	f64b 2370 	movw	r3, #47728	; 0xba70
    ae36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae3a:	781a      	ldrb	r2, [r3, #0]
    ae3c:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    ae40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae44:	781b      	ldrb	r3, [r3, #0]
    ae46:	4413      	add	r3, r2
    ae48:	b2da      	uxtb	r2, r3
    ae4a:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    ae4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae52:	701a      	strb	r2, [r3, #0]
    ae54:	f24b 53be 	movw	r3, #46526	; 0xb5be
    ae58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae5c:	781a      	ldrb	r2, [r3, #0]
    ae5e:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    ae62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae66:	781b      	ldrb	r3, [r3, #0]
    ae68:	4413      	add	r3, r2
    ae6a:	b2da      	uxtb	r2, r3
    ae6c:	f24b 53be 	movw	r3, #46526	; 0xb5be
    ae70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae74:	701a      	strb	r2, [r3, #0]
    ae76:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    ae7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae7e:	781b      	ldrb	r3, [r3, #0]
    ae80:	3301      	adds	r3, #1
    ae82:	b2da      	uxtb	r2, r3
    ae84:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    ae88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae8c:	701a      	strb	r2, [r3, #0]
    ae8e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    ae92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae96:	781b      	ldrb	r3, [r3, #0]
    ae98:	2bff      	cmp	r3, #255	; 0xff
    ae9a:	d105      	bne.n	aea8 <send_nav_values+0x524>
    ae9c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    aea0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aea4:	2200      	movs	r2, #0
    aea6:	701a      	strb	r2, [r3, #0]
    aea8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    aeac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aeb0:	781b      	ldrb	r3, [r3, #0]
    aeb2:	461a      	mov	r2, r3
    aeb4:	f64b 2370 	movw	r3, #47728	; 0xba70
    aeb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aebc:	7859      	ldrb	r1, [r3, #1]
    aebe:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    aec2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aec6:	5499      	strb	r1, [r3, r2]
    aec8:	4b43      	ldr	r3, [pc, #268]	; (afd8 <send_nav_values+0x654>)
    aeca:	781a      	ldrb	r2, [r3, #0]
    aecc:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    aed0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aed4:	781b      	ldrb	r3, [r3, #0]
    aed6:	4413      	add	r3, r2
    aed8:	b2da      	uxtb	r2, r3
    aeda:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    aede:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aee2:	701a      	strb	r2, [r3, #0]
    aee4:	f24b 53be 	movw	r3, #46526	; 0xb5be
    aee8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aeec:	781a      	ldrb	r2, [r3, #0]
    aeee:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    aef2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aef6:	781b      	ldrb	r3, [r3, #0]
    aef8:	4413      	add	r3, r2
    aefa:	b2da      	uxtb	r2, r3
    aefc:	f24b 53be 	movw	r3, #46526	; 0xb5be
    af00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af04:	701a      	strb	r2, [r3, #0]
    af06:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    af0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af0e:	781b      	ldrb	r3, [r3, #0]
    af10:	3301      	adds	r3, #1
    af12:	b2da      	uxtb	r2, r3
    af14:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    af18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af1c:	701a      	strb	r2, [r3, #0]
    af1e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    af22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af26:	781b      	ldrb	r3, [r3, #0]
    af28:	2bff      	cmp	r3, #255	; 0xff
    af2a:	d105      	bne.n	af38 <send_nav_values+0x5b4>
    af2c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    af30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af34:	2200      	movs	r2, #0
    af36:	701a      	strb	r2, [r3, #0]
    af38:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    af3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af40:	781b      	ldrb	r3, [r3, #0]
    af42:	461a      	mov	r2, r3
    af44:	f64b 2370 	movw	r3, #47728	; 0xba70
    af48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af4c:	7899      	ldrb	r1, [r3, #2]
    af4e:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    af52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af56:	5499      	strb	r1, [r3, r2]
    af58:	4b20      	ldr	r3, [pc, #128]	; (afdc <send_nav_values+0x658>)
    af5a:	781a      	ldrb	r2, [r3, #0]
    af5c:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    af60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af64:	781b      	ldrb	r3, [r3, #0]
    af66:	4413      	add	r3, r2
    af68:	b2da      	uxtb	r2, r3
    af6a:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    af6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af72:	701a      	strb	r2, [r3, #0]
    af74:	f24b 53be 	movw	r3, #46526	; 0xb5be
    af78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af7c:	781a      	ldrb	r2, [r3, #0]
    af7e:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    af82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af86:	781b      	ldrb	r3, [r3, #0]
    af88:	4413      	add	r3, r2
    af8a:	b2da      	uxtb	r2, r3
    af8c:	f24b 53be 	movw	r3, #46526	; 0xb5be
    af90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af94:	701a      	strb	r2, [r3, #0]
    af96:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    af9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af9e:	781b      	ldrb	r3, [r3, #0]
    afa0:	3301      	adds	r3, #1
    afa2:	b2da      	uxtb	r2, r3
    afa4:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    afa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afac:	701a      	strb	r2, [r3, #0]
    afae:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    afb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afb6:	781b      	ldrb	r3, [r3, #0]
    afb8:	2bff      	cmp	r3, #255	; 0xff
    afba:	d111      	bne.n	afe0 <send_nav_values+0x65c>
    afbc:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    afc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afc4:	2200      	movs	r2, #0
    afc6:	701a      	strb	r2, [r3, #0]
    afc8:	e00a      	b.n	afe0 <send_nav_values+0x65c>
    afca:	bf00      	nop
    afcc:	2004ba6d 	.word	0x2004ba6d
    afd0:	2004ba6e 	.word	0x2004ba6e
    afd4:	2004ba6f 	.word	0x2004ba6f
    afd8:	2004ba71 	.word	0x2004ba71
    afdc:	2004ba72 	.word	0x2004ba72
    afe0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    afe4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afe8:	781b      	ldrb	r3, [r3, #0]
    afea:	461a      	mov	r2, r3
    afec:	f64b 2370 	movw	r3, #47728	; 0xba70
    aff0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aff4:	78d9      	ldrb	r1, [r3, #3]
    aff6:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    affa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    affe:	5499      	strb	r1, [r3, r2]
    b000:	4bd3      	ldr	r3, [pc, #844]	; (b350 <send_nav_values+0x9cc>)
    b002:	781a      	ldrb	r2, [r3, #0]
    b004:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b008:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b00c:	781b      	ldrb	r3, [r3, #0]
    b00e:	4413      	add	r3, r2
    b010:	b2da      	uxtb	r2, r3
    b012:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b016:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b01a:	701a      	strb	r2, [r3, #0]
    b01c:	f24b 53be 	movw	r3, #46526	; 0xb5be
    b020:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b024:	781a      	ldrb	r2, [r3, #0]
    b026:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b02a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b02e:	781b      	ldrb	r3, [r3, #0]
    b030:	4413      	add	r3, r2
    b032:	b2da      	uxtb	r2, r3
    b034:	f24b 53be 	movw	r3, #46526	; 0xb5be
    b038:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b03c:	701a      	strb	r2, [r3, #0]
    b03e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b042:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b046:	781b      	ldrb	r3, [r3, #0]
    b048:	3301      	adds	r3, #1
    b04a:	b2da      	uxtb	r2, r3
    b04c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b050:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b054:	701a      	strb	r2, [r3, #0]
    b056:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b05a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b05e:	781b      	ldrb	r3, [r3, #0]
    b060:	2bff      	cmp	r3, #255	; 0xff
    b062:	d105      	bne.n	b070 <send_nav_values+0x6ec>
    b064:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b068:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b06c:	2200      	movs	r2, #0
    b06e:	701a      	strb	r2, [r3, #0]
    b070:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b074:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b078:	781b      	ldrb	r3, [r3, #0]
    b07a:	461a      	mov	r2, r3
    b07c:	f24b 73fc 	movw	r3, #47100	; 0xb7fc
    b080:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b084:	7819      	ldrb	r1, [r3, #0]
    b086:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    b08a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b08e:	5499      	strb	r1, [r3, r2]
    b090:	f24b 73fc 	movw	r3, #47100	; 0xb7fc
    b094:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b098:	781a      	ldrb	r2, [r3, #0]
    b09a:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b09e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0a2:	781b      	ldrb	r3, [r3, #0]
    b0a4:	4413      	add	r3, r2
    b0a6:	b2da      	uxtb	r2, r3
    b0a8:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b0ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0b0:	701a      	strb	r2, [r3, #0]
    b0b2:	f24b 53be 	movw	r3, #46526	; 0xb5be
    b0b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0ba:	781a      	ldrb	r2, [r3, #0]
    b0bc:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b0c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0c4:	781b      	ldrb	r3, [r3, #0]
    b0c6:	4413      	add	r3, r2
    b0c8:	b2da      	uxtb	r2, r3
    b0ca:	f24b 53be 	movw	r3, #46526	; 0xb5be
    b0ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0d2:	701a      	strb	r2, [r3, #0]
    b0d4:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b0d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0dc:	781b      	ldrb	r3, [r3, #0]
    b0de:	3301      	adds	r3, #1
    b0e0:	b2da      	uxtb	r2, r3
    b0e2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b0e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0ea:	701a      	strb	r2, [r3, #0]
    b0ec:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b0f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0f4:	781b      	ldrb	r3, [r3, #0]
    b0f6:	2bff      	cmp	r3, #255	; 0xff
    b0f8:	d105      	bne.n	b106 <send_nav_values+0x782>
    b0fa:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b0fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b102:	2200      	movs	r2, #0
    b104:	701a      	strb	r2, [r3, #0]
    b106:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b10a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b10e:	781b      	ldrb	r3, [r3, #0]
    b110:	461a      	mov	r2, r3
    b112:	f24b 73fc 	movw	r3, #47100	; 0xb7fc
    b116:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b11a:	7859      	ldrb	r1, [r3, #1]
    b11c:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    b120:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b124:	5499      	strb	r1, [r3, r2]
    b126:	4b8b      	ldr	r3, [pc, #556]	; (b354 <send_nav_values+0x9d0>)
    b128:	781a      	ldrb	r2, [r3, #0]
    b12a:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b12e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b132:	781b      	ldrb	r3, [r3, #0]
    b134:	4413      	add	r3, r2
    b136:	b2da      	uxtb	r2, r3
    b138:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b13c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b140:	701a      	strb	r2, [r3, #0]
    b142:	f24b 53be 	movw	r3, #46526	; 0xb5be
    b146:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b14a:	781a      	ldrb	r2, [r3, #0]
    b14c:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b150:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b154:	781b      	ldrb	r3, [r3, #0]
    b156:	4413      	add	r3, r2
    b158:	b2da      	uxtb	r2, r3
    b15a:	f24b 53be 	movw	r3, #46526	; 0xb5be
    b15e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b162:	701a      	strb	r2, [r3, #0]
    b164:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b168:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b16c:	781b      	ldrb	r3, [r3, #0]
    b16e:	3301      	adds	r3, #1
    b170:	b2da      	uxtb	r2, r3
    b172:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b176:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b17a:	701a      	strb	r2, [r3, #0]
    b17c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b180:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b184:	781b      	ldrb	r3, [r3, #0]
    b186:	2bff      	cmp	r3, #255	; 0xff
    b188:	d105      	bne.n	b196 <send_nav_values+0x812>
    b18a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b18e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b192:	2200      	movs	r2, #0
    b194:	701a      	strb	r2, [r3, #0]
    b196:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b19a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b19e:	781b      	ldrb	r3, [r3, #0]
    b1a0:	461a      	mov	r2, r3
    b1a2:	f24b 73fc 	movw	r3, #47100	; 0xb7fc
    b1a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1aa:	7899      	ldrb	r1, [r3, #2]
    b1ac:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    b1b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1b4:	5499      	strb	r1, [r3, r2]
    b1b6:	4b68      	ldr	r3, [pc, #416]	; (b358 <send_nav_values+0x9d4>)
    b1b8:	781a      	ldrb	r2, [r3, #0]
    b1ba:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b1be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1c2:	781b      	ldrb	r3, [r3, #0]
    b1c4:	4413      	add	r3, r2
    b1c6:	b2da      	uxtb	r2, r3
    b1c8:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b1cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1d0:	701a      	strb	r2, [r3, #0]
    b1d2:	f24b 53be 	movw	r3, #46526	; 0xb5be
    b1d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1da:	781a      	ldrb	r2, [r3, #0]
    b1dc:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b1e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1e4:	781b      	ldrb	r3, [r3, #0]
    b1e6:	4413      	add	r3, r2
    b1e8:	b2da      	uxtb	r2, r3
    b1ea:	f24b 53be 	movw	r3, #46526	; 0xb5be
    b1ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1f2:	701a      	strb	r2, [r3, #0]
    b1f4:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b1f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1fc:	781b      	ldrb	r3, [r3, #0]
    b1fe:	3301      	adds	r3, #1
    b200:	b2da      	uxtb	r2, r3
    b202:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b206:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b20a:	701a      	strb	r2, [r3, #0]
    b20c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b210:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b214:	781b      	ldrb	r3, [r3, #0]
    b216:	2bff      	cmp	r3, #255	; 0xff
    b218:	d105      	bne.n	b226 <send_nav_values+0x8a2>
    b21a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b21e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b222:	2200      	movs	r2, #0
    b224:	701a      	strb	r2, [r3, #0]
    b226:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b22a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b22e:	781b      	ldrb	r3, [r3, #0]
    b230:	461a      	mov	r2, r3
    b232:	f24b 73fc 	movw	r3, #47100	; 0xb7fc
    b236:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b23a:	78d9      	ldrb	r1, [r3, #3]
    b23c:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    b240:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b244:	5499      	strb	r1, [r3, r2]
    b246:	4b45      	ldr	r3, [pc, #276]	; (b35c <send_nav_values+0x9d8>)
    b248:	781a      	ldrb	r2, [r3, #0]
    b24a:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b24e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b252:	781b      	ldrb	r3, [r3, #0]
    b254:	4413      	add	r3, r2
    b256:	b2da      	uxtb	r2, r3
    b258:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b25c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b260:	701a      	strb	r2, [r3, #0]
    b262:	f24b 53be 	movw	r3, #46526	; 0xb5be
    b266:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b26a:	781a      	ldrb	r2, [r3, #0]
    b26c:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b270:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b274:	781b      	ldrb	r3, [r3, #0]
    b276:	4413      	add	r3, r2
    b278:	b2da      	uxtb	r2, r3
    b27a:	f24b 53be 	movw	r3, #46526	; 0xb5be
    b27e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b282:	701a      	strb	r2, [r3, #0]
    b284:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b288:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b28c:	781b      	ldrb	r3, [r3, #0]
    b28e:	3301      	adds	r3, #1
    b290:	b2da      	uxtb	r2, r3
    b292:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b296:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b29a:	701a      	strb	r2, [r3, #0]
    b29c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b2a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2a4:	781b      	ldrb	r3, [r3, #0]
    b2a6:	2bff      	cmp	r3, #255	; 0xff
    b2a8:	d105      	bne.n	b2b6 <send_nav_values+0x932>
    b2aa:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b2ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2b2:	2200      	movs	r2, #0
    b2b4:	701a      	strb	r2, [r3, #0]
    b2b6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b2ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2be:	781b      	ldrb	r3, [r3, #0]
    b2c0:	461a      	mov	r2, r3
    b2c2:	f64b 0344 	movw	r3, #47172	; 0xb844
    b2c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2ca:	7819      	ldrb	r1, [r3, #0]
    b2cc:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    b2d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2d4:	5499      	strb	r1, [r3, r2]
    b2d6:	f64b 0344 	movw	r3, #47172	; 0xb844
    b2da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2de:	781a      	ldrb	r2, [r3, #0]
    b2e0:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b2e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2e8:	781b      	ldrb	r3, [r3, #0]
    b2ea:	4413      	add	r3, r2
    b2ec:	b2da      	uxtb	r2, r3
    b2ee:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b2f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2f6:	701a      	strb	r2, [r3, #0]
    b2f8:	f24b 53be 	movw	r3, #46526	; 0xb5be
    b2fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b300:	781a      	ldrb	r2, [r3, #0]
    b302:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b306:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b30a:	781b      	ldrb	r3, [r3, #0]
    b30c:	4413      	add	r3, r2
    b30e:	b2da      	uxtb	r2, r3
    b310:	f24b 53be 	movw	r3, #46526	; 0xb5be
    b314:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b318:	701a      	strb	r2, [r3, #0]
    b31a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b31e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b322:	781b      	ldrb	r3, [r3, #0]
    b324:	3301      	adds	r3, #1
    b326:	b2da      	uxtb	r2, r3
    b328:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b32c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b330:	701a      	strb	r2, [r3, #0]
    b332:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b336:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b33a:	781b      	ldrb	r3, [r3, #0]
    b33c:	2bff      	cmp	r3, #255	; 0xff
    b33e:	d10f      	bne.n	b360 <send_nav_values+0x9dc>
    b340:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b344:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b348:	2200      	movs	r2, #0
    b34a:	701a      	strb	r2, [r3, #0]
    b34c:	e008      	b.n	b360 <send_nav_values+0x9dc>
    b34e:	bf00      	nop
    b350:	2004ba73 	.word	0x2004ba73
    b354:	2004b7fd 	.word	0x2004b7fd
    b358:	2004b7fe 	.word	0x2004b7fe
    b35c:	2004b7ff 	.word	0x2004b7ff
    b360:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b364:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b368:	781b      	ldrb	r3, [r3, #0]
    b36a:	461a      	mov	r2, r3
    b36c:	f64b 0344 	movw	r3, #47172	; 0xb844
    b370:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b374:	7859      	ldrb	r1, [r3, #1]
    b376:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    b37a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b37e:	5499      	strb	r1, [r3, r2]
    b380:	4bd1      	ldr	r3, [pc, #836]	; (b6c8 <send_nav_values+0xd44>)
    b382:	781a      	ldrb	r2, [r3, #0]
    b384:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b388:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b38c:	781b      	ldrb	r3, [r3, #0]
    b38e:	4413      	add	r3, r2
    b390:	b2da      	uxtb	r2, r3
    b392:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b396:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b39a:	701a      	strb	r2, [r3, #0]
    b39c:	f24b 53be 	movw	r3, #46526	; 0xb5be
    b3a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3a4:	781a      	ldrb	r2, [r3, #0]
    b3a6:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b3aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3ae:	781b      	ldrb	r3, [r3, #0]
    b3b0:	4413      	add	r3, r2
    b3b2:	b2da      	uxtb	r2, r3
    b3b4:	f24b 53be 	movw	r3, #46526	; 0xb5be
    b3b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3bc:	701a      	strb	r2, [r3, #0]
    b3be:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b3c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3c6:	781b      	ldrb	r3, [r3, #0]
    b3c8:	3301      	adds	r3, #1
    b3ca:	b2da      	uxtb	r2, r3
    b3cc:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b3d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3d4:	701a      	strb	r2, [r3, #0]
    b3d6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b3da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3de:	781b      	ldrb	r3, [r3, #0]
    b3e0:	2bff      	cmp	r3, #255	; 0xff
    b3e2:	d105      	bne.n	b3f0 <send_nav_values+0xa6c>
    b3e4:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b3e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3ec:	2200      	movs	r2, #0
    b3ee:	701a      	strb	r2, [r3, #0]
    b3f0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b3f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3f8:	781b      	ldrb	r3, [r3, #0]
    b3fa:	461a      	mov	r2, r3
    b3fc:	f64b 0344 	movw	r3, #47172	; 0xb844
    b400:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b404:	7899      	ldrb	r1, [r3, #2]
    b406:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    b40a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b40e:	5499      	strb	r1, [r3, r2]
    b410:	4bae      	ldr	r3, [pc, #696]	; (b6cc <send_nav_values+0xd48>)
    b412:	781a      	ldrb	r2, [r3, #0]
    b414:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b418:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b41c:	781b      	ldrb	r3, [r3, #0]
    b41e:	4413      	add	r3, r2
    b420:	b2da      	uxtb	r2, r3
    b422:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b426:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b42a:	701a      	strb	r2, [r3, #0]
    b42c:	f24b 53be 	movw	r3, #46526	; 0xb5be
    b430:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b434:	781a      	ldrb	r2, [r3, #0]
    b436:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b43a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b43e:	781b      	ldrb	r3, [r3, #0]
    b440:	4413      	add	r3, r2
    b442:	b2da      	uxtb	r2, r3
    b444:	f24b 53be 	movw	r3, #46526	; 0xb5be
    b448:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b44c:	701a      	strb	r2, [r3, #0]
    b44e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b452:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b456:	781b      	ldrb	r3, [r3, #0]
    b458:	3301      	adds	r3, #1
    b45a:	b2da      	uxtb	r2, r3
    b45c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b460:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b464:	701a      	strb	r2, [r3, #0]
    b466:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b46a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b46e:	781b      	ldrb	r3, [r3, #0]
    b470:	2bff      	cmp	r3, #255	; 0xff
    b472:	d105      	bne.n	b480 <send_nav_values+0xafc>
    b474:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b478:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b47c:	2200      	movs	r2, #0
    b47e:	701a      	strb	r2, [r3, #0]
    b480:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b484:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b488:	781b      	ldrb	r3, [r3, #0]
    b48a:	461a      	mov	r2, r3
    b48c:	f64b 0344 	movw	r3, #47172	; 0xb844
    b490:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b494:	78d9      	ldrb	r1, [r3, #3]
    b496:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    b49a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b49e:	5499      	strb	r1, [r3, r2]
    b4a0:	4b8b      	ldr	r3, [pc, #556]	; (b6d0 <send_nav_values+0xd4c>)
    b4a2:	781a      	ldrb	r2, [r3, #0]
    b4a4:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b4a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4ac:	781b      	ldrb	r3, [r3, #0]
    b4ae:	4413      	add	r3, r2
    b4b0:	b2da      	uxtb	r2, r3
    b4b2:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b4b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4ba:	701a      	strb	r2, [r3, #0]
    b4bc:	f24b 53be 	movw	r3, #46526	; 0xb5be
    b4c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4c4:	781a      	ldrb	r2, [r3, #0]
    b4c6:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b4ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4ce:	781b      	ldrb	r3, [r3, #0]
    b4d0:	4413      	add	r3, r2
    b4d2:	b2da      	uxtb	r2, r3
    b4d4:	f24b 53be 	movw	r3, #46526	; 0xb5be
    b4d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4dc:	701a      	strb	r2, [r3, #0]
    b4de:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b4e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4e6:	781b      	ldrb	r3, [r3, #0]
    b4e8:	3301      	adds	r3, #1
    b4ea:	b2da      	uxtb	r2, r3
    b4ec:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b4f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4f4:	701a      	strb	r2, [r3, #0]
    b4f6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b4fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4fe:	781b      	ldrb	r3, [r3, #0]
    b500:	2bff      	cmp	r3, #255	; 0xff
    b502:	d105      	bne.n	b510 <send_nav_values+0xb8c>
    b504:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b508:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b50c:	2200      	movs	r2, #0
    b50e:	701a      	strb	r2, [r3, #0]
    b510:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b514:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b518:	781b      	ldrb	r3, [r3, #0]
    b51a:	461a      	mov	r2, r3
    b51c:	f240 1320 	movw	r3, #288	; 0x120
    b520:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b524:	7819      	ldrb	r1, [r3, #0]
    b526:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    b52a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b52e:	5499      	strb	r1, [r3, r2]
    b530:	f240 1320 	movw	r3, #288	; 0x120
    b534:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b538:	781a      	ldrb	r2, [r3, #0]
    b53a:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b53e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b542:	781b      	ldrb	r3, [r3, #0]
    b544:	4413      	add	r3, r2
    b546:	b2da      	uxtb	r2, r3
    b548:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b54c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b550:	701a      	strb	r2, [r3, #0]
    b552:	f24b 53be 	movw	r3, #46526	; 0xb5be
    b556:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b55a:	781a      	ldrb	r2, [r3, #0]
    b55c:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b560:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b564:	781b      	ldrb	r3, [r3, #0]
    b566:	4413      	add	r3, r2
    b568:	b2da      	uxtb	r2, r3
    b56a:	f24b 53be 	movw	r3, #46526	; 0xb5be
    b56e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b572:	701a      	strb	r2, [r3, #0]
    b574:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b578:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b57c:	781b      	ldrb	r3, [r3, #0]
    b57e:	3301      	adds	r3, #1
    b580:	b2da      	uxtb	r2, r3
    b582:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b586:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b58a:	701a      	strb	r2, [r3, #0]
    b58c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b590:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b594:	781b      	ldrb	r3, [r3, #0]
    b596:	2bff      	cmp	r3, #255	; 0xff
    b598:	d105      	bne.n	b5a6 <send_nav_values+0xc22>
    b59a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b59e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5a2:	2200      	movs	r2, #0
    b5a4:	701a      	strb	r2, [r3, #0]
    b5a6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b5aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5ae:	781b      	ldrb	r3, [r3, #0]
    b5b0:	461a      	mov	r2, r3
    b5b2:	f240 1320 	movw	r3, #288	; 0x120
    b5b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5ba:	7859      	ldrb	r1, [r3, #1]
    b5bc:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    b5c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5c4:	5499      	strb	r1, [r3, r2]
    b5c6:	4b43      	ldr	r3, [pc, #268]	; (b6d4 <send_nav_values+0xd50>)
    b5c8:	781a      	ldrb	r2, [r3, #0]
    b5ca:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b5ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5d2:	781b      	ldrb	r3, [r3, #0]
    b5d4:	4413      	add	r3, r2
    b5d6:	b2da      	uxtb	r2, r3
    b5d8:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b5dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5e0:	701a      	strb	r2, [r3, #0]
    b5e2:	f24b 53be 	movw	r3, #46526	; 0xb5be
    b5e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5ea:	781a      	ldrb	r2, [r3, #0]
    b5ec:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b5f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5f4:	781b      	ldrb	r3, [r3, #0]
    b5f6:	4413      	add	r3, r2
    b5f8:	b2da      	uxtb	r2, r3
    b5fa:	f24b 53be 	movw	r3, #46526	; 0xb5be
    b5fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b602:	701a      	strb	r2, [r3, #0]
    b604:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b608:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b60c:	781b      	ldrb	r3, [r3, #0]
    b60e:	3301      	adds	r3, #1
    b610:	b2da      	uxtb	r2, r3
    b612:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b616:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b61a:	701a      	strb	r2, [r3, #0]
    b61c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b620:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b624:	781b      	ldrb	r3, [r3, #0]
    b626:	2bff      	cmp	r3, #255	; 0xff
    b628:	d105      	bne.n	b636 <send_nav_values+0xcb2>
    b62a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b62e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b632:	2200      	movs	r2, #0
    b634:	701a      	strb	r2, [r3, #0]
    b636:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b63a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b63e:	781b      	ldrb	r3, [r3, #0]
    b640:	461a      	mov	r2, r3
    b642:	f240 1320 	movw	r3, #288	; 0x120
    b646:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b64a:	7899      	ldrb	r1, [r3, #2]
    b64c:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    b650:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b654:	5499      	strb	r1, [r3, r2]
    b656:	4b20      	ldr	r3, [pc, #128]	; (b6d8 <send_nav_values+0xd54>)
    b658:	781a      	ldrb	r2, [r3, #0]
    b65a:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b65e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b662:	781b      	ldrb	r3, [r3, #0]
    b664:	4413      	add	r3, r2
    b666:	b2da      	uxtb	r2, r3
    b668:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b66c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b670:	701a      	strb	r2, [r3, #0]
    b672:	f24b 53be 	movw	r3, #46526	; 0xb5be
    b676:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b67a:	781a      	ldrb	r2, [r3, #0]
    b67c:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b680:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b684:	781b      	ldrb	r3, [r3, #0]
    b686:	4413      	add	r3, r2
    b688:	b2da      	uxtb	r2, r3
    b68a:	f24b 53be 	movw	r3, #46526	; 0xb5be
    b68e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b692:	701a      	strb	r2, [r3, #0]
    b694:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b698:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b69c:	781b      	ldrb	r3, [r3, #0]
    b69e:	3301      	adds	r3, #1
    b6a0:	b2da      	uxtb	r2, r3
    b6a2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b6a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6aa:	701a      	strb	r2, [r3, #0]
    b6ac:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b6b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6b4:	781b      	ldrb	r3, [r3, #0]
    b6b6:	2bff      	cmp	r3, #255	; 0xff
    b6b8:	d110      	bne.n	b6dc <send_nav_values+0xd58>
    b6ba:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b6be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6c2:	2200      	movs	r2, #0
    b6c4:	701a      	strb	r2, [r3, #0]
    b6c6:	e009      	b.n	b6dc <send_nav_values+0xd58>
    b6c8:	2004b845 	.word	0x2004b845
    b6cc:	2004b846 	.word	0x2004b846
    b6d0:	2004b847 	.word	0x2004b847
    b6d4:	20000121 	.word	0x20000121
    b6d8:	20000122 	.word	0x20000122
    b6dc:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b6e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6e4:	781b      	ldrb	r3, [r3, #0]
    b6e6:	461a      	mov	r2, r3
    b6e8:	f240 1320 	movw	r3, #288	; 0x120
    b6ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6f0:	78d9      	ldrb	r1, [r3, #3]
    b6f2:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    b6f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6fa:	5499      	strb	r1, [r3, r2]
    b6fc:	4bc2      	ldr	r3, [pc, #776]	; (ba08 <send_nav_values+0x1084>)
    b6fe:	781a      	ldrb	r2, [r3, #0]
    b700:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b704:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b708:	781b      	ldrb	r3, [r3, #0]
    b70a:	4413      	add	r3, r2
    b70c:	b2da      	uxtb	r2, r3
    b70e:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b712:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b716:	701a      	strb	r2, [r3, #0]
    b718:	f24b 53be 	movw	r3, #46526	; 0xb5be
    b71c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b720:	781a      	ldrb	r2, [r3, #0]
    b722:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b726:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b72a:	781b      	ldrb	r3, [r3, #0]
    b72c:	4413      	add	r3, r2
    b72e:	b2da      	uxtb	r2, r3
    b730:	f24b 53be 	movw	r3, #46526	; 0xb5be
    b734:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b738:	701a      	strb	r2, [r3, #0]
    b73a:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b73e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b742:	781b      	ldrb	r3, [r3, #0]
    b744:	3301      	adds	r3, #1
    b746:	b2da      	uxtb	r2, r3
    b748:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b74c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b750:	701a      	strb	r2, [r3, #0]
    b752:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b756:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b75a:	781b      	ldrb	r3, [r3, #0]
    b75c:	2bff      	cmp	r3, #255	; 0xff
    b75e:	d105      	bne.n	b76c <send_nav_values+0xde8>
    b760:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b764:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b768:	2200      	movs	r2, #0
    b76a:	701a      	strb	r2, [r3, #0]
    b76c:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b770:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b774:	781b      	ldrb	r3, [r3, #0]
    b776:	461a      	mov	r2, r3
    b778:	f64b 0348 	movw	r3, #47176	; 0xb848
    b77c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b780:	7819      	ldrb	r1, [r3, #0]
    b782:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    b786:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b78a:	5499      	strb	r1, [r3, r2]
    b78c:	f64b 0348 	movw	r3, #47176	; 0xb848
    b790:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b794:	781a      	ldrb	r2, [r3, #0]
    b796:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b79a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b79e:	781b      	ldrb	r3, [r3, #0]
    b7a0:	4413      	add	r3, r2
    b7a2:	b2da      	uxtb	r2, r3
    b7a4:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b7a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7ac:	701a      	strb	r2, [r3, #0]
    b7ae:	f24b 53be 	movw	r3, #46526	; 0xb5be
    b7b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7b6:	781a      	ldrb	r2, [r3, #0]
    b7b8:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b7bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7c0:	781b      	ldrb	r3, [r3, #0]
    b7c2:	4413      	add	r3, r2
    b7c4:	b2da      	uxtb	r2, r3
    b7c6:	f24b 53be 	movw	r3, #46526	; 0xb5be
    b7ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7ce:	701a      	strb	r2, [r3, #0]
    b7d0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b7d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7d8:	781b      	ldrb	r3, [r3, #0]
    b7da:	3301      	adds	r3, #1
    b7dc:	b2da      	uxtb	r2, r3
    b7de:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b7e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7e6:	701a      	strb	r2, [r3, #0]
    b7e8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b7ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7f0:	781b      	ldrb	r3, [r3, #0]
    b7f2:	2bff      	cmp	r3, #255	; 0xff
    b7f4:	d105      	bne.n	b802 <send_nav_values+0xe7e>
    b7f6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b7fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7fe:	2200      	movs	r2, #0
    b800:	701a      	strb	r2, [r3, #0]
    b802:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b806:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b80a:	781b      	ldrb	r3, [r3, #0]
    b80c:	461a      	mov	r2, r3
    b80e:	f64b 0348 	movw	r3, #47176	; 0xb848
    b812:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b816:	7859      	ldrb	r1, [r3, #1]
    b818:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    b81c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b820:	5499      	strb	r1, [r3, r2]
    b822:	4b7a      	ldr	r3, [pc, #488]	; (ba0c <send_nav_values+0x1088>)
    b824:	781a      	ldrb	r2, [r3, #0]
    b826:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b82a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b82e:	781b      	ldrb	r3, [r3, #0]
    b830:	4413      	add	r3, r2
    b832:	b2da      	uxtb	r2, r3
    b834:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b838:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b83c:	701a      	strb	r2, [r3, #0]
    b83e:	f24b 53be 	movw	r3, #46526	; 0xb5be
    b842:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b846:	781a      	ldrb	r2, [r3, #0]
    b848:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b84c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b850:	781b      	ldrb	r3, [r3, #0]
    b852:	4413      	add	r3, r2
    b854:	b2da      	uxtb	r2, r3
    b856:	f24b 53be 	movw	r3, #46526	; 0xb5be
    b85a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b85e:	701a      	strb	r2, [r3, #0]
    b860:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b864:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b868:	781b      	ldrb	r3, [r3, #0]
    b86a:	3301      	adds	r3, #1
    b86c:	b2da      	uxtb	r2, r3
    b86e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b872:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b876:	701a      	strb	r2, [r3, #0]
    b878:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b87c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b880:	781b      	ldrb	r3, [r3, #0]
    b882:	2bff      	cmp	r3, #255	; 0xff
    b884:	d105      	bne.n	b892 <send_nav_values+0xf0e>
    b886:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b88a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b88e:	2200      	movs	r2, #0
    b890:	701a      	strb	r2, [r3, #0]
    b892:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b896:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b89a:	781b      	ldrb	r3, [r3, #0]
    b89c:	461a      	mov	r2, r3
    b89e:	f64b 0348 	movw	r3, #47176	; 0xb848
    b8a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8a6:	7899      	ldrb	r1, [r3, #2]
    b8a8:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    b8ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8b0:	5499      	strb	r1, [r3, r2]
    b8b2:	4b57      	ldr	r3, [pc, #348]	; (ba10 <send_nav_values+0x108c>)
    b8b4:	781a      	ldrb	r2, [r3, #0]
    b8b6:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b8ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8be:	781b      	ldrb	r3, [r3, #0]
    b8c0:	4413      	add	r3, r2
    b8c2:	b2da      	uxtb	r2, r3
    b8c4:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b8c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8cc:	701a      	strb	r2, [r3, #0]
    b8ce:	f24b 53be 	movw	r3, #46526	; 0xb5be
    b8d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8d6:	781a      	ldrb	r2, [r3, #0]
    b8d8:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b8dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8e0:	781b      	ldrb	r3, [r3, #0]
    b8e2:	4413      	add	r3, r2
    b8e4:	b2da      	uxtb	r2, r3
    b8e6:	f24b 53be 	movw	r3, #46526	; 0xb5be
    b8ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8ee:	701a      	strb	r2, [r3, #0]
    b8f0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b8f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8f8:	781b      	ldrb	r3, [r3, #0]
    b8fa:	3301      	adds	r3, #1
    b8fc:	b2da      	uxtb	r2, r3
    b8fe:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b902:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b906:	701a      	strb	r2, [r3, #0]
    b908:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b90c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b910:	781b      	ldrb	r3, [r3, #0]
    b912:	2bff      	cmp	r3, #255	; 0xff
    b914:	d105      	bne.n	b922 <send_nav_values+0xf9e>
    b916:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b91a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b91e:	2200      	movs	r2, #0
    b920:	701a      	strb	r2, [r3, #0]
    b922:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b926:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b92a:	781b      	ldrb	r3, [r3, #0]
    b92c:	461a      	mov	r2, r3
    b92e:	f64b 0348 	movw	r3, #47176	; 0xb848
    b932:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b936:	78d9      	ldrb	r1, [r3, #3]
    b938:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    b93c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b940:	5499      	strb	r1, [r3, r2]
    b942:	4b34      	ldr	r3, [pc, #208]	; (ba14 <send_nav_values+0x1090>)
    b944:	781a      	ldrb	r2, [r3, #0]
    b946:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b94a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b94e:	781b      	ldrb	r3, [r3, #0]
    b950:	4413      	add	r3, r2
    b952:	b2da      	uxtb	r2, r3
    b954:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b958:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b95c:	701a      	strb	r2, [r3, #0]
    b95e:	f24b 53be 	movw	r3, #46526	; 0xb5be
    b962:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b966:	781a      	ldrb	r2, [r3, #0]
    b968:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b96c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b970:	781b      	ldrb	r3, [r3, #0]
    b972:	4413      	add	r3, r2
    b974:	b2da      	uxtb	r2, r3
    b976:	f24b 53be 	movw	r3, #46526	; 0xb5be
    b97a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b97e:	701a      	strb	r2, [r3, #0]
    b980:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b984:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b988:	781b      	ldrb	r3, [r3, #0]
    b98a:	3301      	adds	r3, #1
    b98c:	b2da      	uxtb	r2, r3
    b98e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b992:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b996:	701a      	strb	r2, [r3, #0]
    b998:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b99c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9a0:	781b      	ldrb	r3, [r3, #0]
    b9a2:	2bff      	cmp	r3, #255	; 0xff
    b9a4:	d105      	bne.n	b9b2 <send_nav_values+0x102e>
    b9a6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b9aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9ae:	2200      	movs	r2, #0
    b9b0:	701a      	strb	r2, [r3, #0]
    b9b2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b9b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9ba:	781b      	ldrb	r3, [r3, #0]
    b9bc:	461a      	mov	r2, r3
    b9be:	f24b 53bd 	movw	r3, #46525	; 0xb5bd
    b9c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9c6:	7819      	ldrb	r1, [r3, #0]
    b9c8:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    b9cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9d0:	5499      	strb	r1, [r3, r2]
    b9d2:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b9d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9da:	781b      	ldrb	r3, [r3, #0]
    b9dc:	3301      	adds	r3, #1
    b9de:	b2da      	uxtb	r2, r3
    b9e0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b9e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9e8:	701a      	strb	r2, [r3, #0]
    b9ea:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b9ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9f2:	781b      	ldrb	r3, [r3, #0]
    b9f4:	2bff      	cmp	r3, #255	; 0xff
    b9f6:	d10f      	bne.n	ba18 <send_nav_values+0x1094>
    b9f8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    b9fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba00:	2200      	movs	r2, #0
    ba02:	701a      	strb	r2, [r3, #0]
    ba04:	e008      	b.n	ba18 <send_nav_values+0x1094>
    ba06:	bf00      	nop
    ba08:	20000123 	.word	0x20000123
    ba0c:	2004b849 	.word	0x2004b849
    ba10:	2004b84a 	.word	0x2004b84a
    ba14:	2004b84b 	.word	0x2004b84b
    ba18:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    ba1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba20:	781b      	ldrb	r3, [r3, #0]
    ba22:	461a      	mov	r2, r3
    ba24:	f24b 53be 	movw	r3, #46526	; 0xb5be
    ba28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba2c:	7819      	ldrb	r1, [r3, #0]
    ba2e:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    ba32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba36:	5499      	strb	r1, [r3, r2]
    ba38:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    ba3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba40:	781b      	ldrb	r3, [r3, #0]
    ba42:	3301      	adds	r3, #1
    ba44:	b2da      	uxtb	r2, r3
    ba46:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    ba4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba4e:	701a      	strb	r2, [r3, #0]
    ba50:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    ba54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba58:	781b      	ldrb	r3, [r3, #0]
    ba5a:	2bff      	cmp	r3, #255	; 0xff
    ba5c:	d105      	bne.n	ba6a <send_nav_values+0x10e6>
    ba5e:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    ba62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba66:	2200      	movs	r2, #0
    ba68:	701a      	strb	r2, [r3, #0]
    ba6a:	f248 0339 	movw	r3, #32825	; 0x8039
    ba6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba72:	781b      	ldrb	r3, [r3, #0]
    ba74:	b2db      	uxtb	r3, r3
    ba76:	f003 0310 	and.w	r3, r3, #16
    ba7a:	2b00      	cmp	r3, #0
    ba7c:	d15a      	bne.n	bb34 <send_nav_values+0x11b0>
    ba7e:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    ba82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba86:	781b      	ldrb	r3, [r3, #0]
    ba88:	b2db      	uxtb	r3, r3
    ba8a:	461a      	mov	r2, r3
    ba8c:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    ba90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba94:	5c9a      	ldrb	r2, [r3, r2]
    ba96:	f24b 53bb 	movw	r3, #46523	; 0xb5bb
    ba9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba9e:	701a      	strb	r2, [r3, #0]
    baa0:	f24b 53bc 	movw	r3, #46524	; 0xb5bc
    baa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    baa8:	2200      	movs	r2, #0
    baaa:	701a      	strb	r2, [r3, #0]
    baac:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    bab0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bab4:	781b      	ldrb	r3, [r3, #0]
    bab6:	b2db      	uxtb	r3, r3
    bab8:	3301      	adds	r3, #1
    baba:	b2da      	uxtb	r2, r3
    babc:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    bac0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bac4:	701a      	strb	r2, [r3, #0]
    bac6:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    baca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bace:	781b      	ldrb	r3, [r3, #0]
    bad0:	b2db      	uxtb	r3, r3
    bad2:	2bff      	cmp	r3, #255	; 0xff
    bad4:	d105      	bne.n	bae2 <send_nav_values+0x115e>
    bad6:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    bada:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bade:	2200      	movs	r2, #0
    bae0:	701a      	strb	r2, [r3, #0]
    bae2:	f248 0338 	movw	r3, #32824	; 0x8038
    bae6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    baea:	f248 0238 	movw	r2, #32824	; 0x8038
    baee:	f2c2 0200 	movt	r2, #8192	; 0x2000
    baf2:	7812      	ldrb	r2, [r2, #0]
    baf4:	b2d2      	uxtb	r2, r2
    baf6:	f042 0201 	orr.w	r2, r2, #1
    bafa:	b2d2      	uxtb	r2, r2
    bafc:	701a      	strb	r2, [r3, #0]
    bafe:	f248 0339 	movw	r3, #32825	; 0x8039
    bb02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb06:	f248 0239 	movw	r2, #32825	; 0x8039
    bb0a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bb0e:	7812      	ldrb	r2, [r2, #0]
    bb10:	b2d2      	uxtb	r2, r2
    bb12:	f042 0210 	orr.w	r2, r2, #16
    bb16:	b2d2      	uxtb	r2, r2
    bb18:	701a      	strb	r2, [r3, #0]
    bb1a:	e00b      	b.n	bb34 <send_nav_values+0x11b0>
    bb1c:	f24b 43b8 	movw	r3, #46264	; 0xb4b8
    bb20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb24:	781b      	ldrb	r3, [r3, #0]
    bb26:	3301      	adds	r3, #1
    bb28:	b2da      	uxtb	r2, r3
    bb2a:	f24b 43b8 	movw	r3, #46264	; 0xb4b8
    bb2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb32:	701a      	strb	r2, [r3, #0]
}
    bb34:	46bd      	mov	sp, r7
    bb36:	f85d 7b04 	ldr.w	r7, [sp], #4
    bb3a:	4770      	bx	lr

0000bb3c <course_run>:

void course_run(void){
    bb3c:	b580      	push	{r7, lr}
    bb3e:	af00      	add	r7, sp, #0
  
  if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) 
    bb40:	f24b 439c 	movw	r3, #46236	; 0xb49c
    bb44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb48:	781b      	ldrb	r3, [r3, #0]
    bb4a:	2b02      	cmp	r3, #2
    bb4c:	d006      	beq.n	bb5c <course_run+0x20>
    bb4e:	f24b 439c 	movw	r3, #46236	; 0xb49c
    bb52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb56:	781b      	ldrb	r3, [r3, #0]
    bb58:	2b03      	cmp	r3, #3
    bb5a:	d112      	bne.n	bb82 <course_run+0x46>
  {
    if (lateral_mode >= LATERAL_MODE_COURSE)
    bb5c:	f24b 439e 	movw	r3, #46238	; 0xb49e
    bb60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb64:	781b      	ldrb	r3, [r3, #0]
    bb66:	2b02      	cmp	r3, #2
    bb68:	d901      	bls.n	bb6e <course_run+0x32>
      course_pid_run(); /* aka compute nav_desired_roll */
    bb6a:	f001 f98d 	bl	ce88 <course_pid_run>
    desired_roll = nav_desired_roll;
    bb6e:	f64b 0340 	movw	r3, #47168	; 0xb840
    bb72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb76:	681a      	ldr	r2, [r3, #0]
    bb78:	f24b 73e4 	movw	r3, #47076	; 0xb7e4
    bb7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb80:	601a      	str	r2, [r3, #0]
  }  
  //vPrintString("S_17 Navigation task end!\n\r");
}
    bb82:	bd80      	pop	{r7, pc}

0000bb84 <altitude_control_task>:

void altitude_control_task(void)
{
    bb84:	b580      	push	{r7, lr}
    bb86:	af00      	add	r7, sp, #0
	//vPrintString("S_18 navigation_task start! \n\r"); //SunnyBeike
	if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) {
    bb88:	f24b 439c 	movw	r3, #46236	; 0xb49c
    bb8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb90:	781b      	ldrb	r3, [r3, #0]
    bb92:	2b02      	cmp	r3, #2
    bb94:	d006      	beq.n	bba4 <altitude_control_task+0x20>
    bb96:	f24b 439c 	movw	r3, #46236	; 0xb49c
    bb9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb9e:	781b      	ldrb	r3, [r3, #0]
    bba0:	2b03      	cmp	r3, #3
    bba2:	d108      	bne.n	bbb6 <altitude_control_task+0x32>
		if (vertical_mode == VERTICAL_MODE_AUTO_ALT)
    bba4:	f24b 439d 	movw	r3, #46237	; 0xb49d
    bba8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbac:	781b      	ldrb	r3, [r3, #0]
    bbae:	2b03      	cmp	r3, #3
    bbb0:	d101      	bne.n	bbb6 <altitude_control_task+0x32>
      			altitude_pid_run();
    bbb2:	f001 fbf1 	bl	d398 <altitude_pid_run>
	}
	//vPrintString("S_18 navigation_task end! \n\r"); //SunnyBeike
}
    bbb6:	bd80      	pop	{r7, pc}

0000bbb8 <climb_control_task>:
void climb_control_task(void)
{
    bbb8:	b580      	push	{r7, lr}
    bbba:	af00      	add	r7, sp, #0
	//vPrintString("S_19 navigation_task start! \n\r"); //SunnyBeike
   if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) 
    bbbc:	f24b 439c 	movw	r3, #46236	; 0xb49c
    bbc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbc4:	781b      	ldrb	r3, [r3, #0]
    bbc6:	2b02      	cmp	r3, #2
    bbc8:	d006      	beq.n	bbd8 <climb_control_task+0x20>
    bbca:	f24b 439c 	movw	r3, #46236	; 0xb49c
    bbce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbd2:	781b      	ldrb	r3, [r3, #0]
    bbd4:	2b03      	cmp	r3, #3
    bbd6:	d135      	bne.n	bc44 <climb_control_task+0x8c>
   {
	if (vertical_mode >= VERTICAL_MODE_AUTO_CLIMB)
    bbd8:	f24b 439d 	movw	r3, #46237	; 0xb49d
    bbdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbe0:	781b      	ldrb	r3, [r3, #0]
    bbe2:	2b01      	cmp	r3, #1
    bbe4:	d901      	bls.n	bbea <climb_control_task+0x32>
        	climb_pid_run();
    bbe6:	f001 fa07 	bl	cff8 <climb_pid_run>
   	if (vertical_mode == VERTICAL_MODE_AUTO_GAZ)
    bbea:	f24b 439d 	movw	r3, #46237	; 0xb49d
    bbee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbf2:	781b      	ldrb	r3, [r3, #0]
    bbf4:	2b01      	cmp	r3, #1
    bbf6:	d10a      	bne.n	bc0e <climb_control_task+0x56>
   		 desired_gaz = nav_desired_gaz;
    bbf8:	f64b 0338 	movw	r3, #47160	; 0xb838
    bbfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc00:	881b      	ldrh	r3, [r3, #0]
    bc02:	b29a      	uxth	r2, r3
    bc04:	f24b 73ec 	movw	r3, #47084	; 0xb7ec
    bc08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc0c:	801a      	strh	r2, [r3, #0]
   	if (low_battery || (!estimator_flight_time && !launch))
    bc0e:	f24b 43a5 	movw	r3, #46245	; 0xb4a5
    bc12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc16:	781b      	ldrb	r3, [r3, #0]
    bc18:	2b00      	cmp	r3, #0
    bc1a:	d10d      	bne.n	bc38 <climb_control_task+0x80>
    bc1c:	f64b 239c 	movw	r3, #47772	; 0xba9c
    bc20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc24:	881b      	ldrh	r3, [r3, #0]
    bc26:	2b00      	cmp	r3, #0
    bc28:	d10c      	bne.n	bc44 <climb_control_task+0x8c>
    bc2a:	f24b 43b0 	movw	r3, #46256	; 0xb4b0
    bc2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc32:	781b      	ldrb	r3, [r3, #0]
    bc34:	2b00      	cmp	r3, #0
    bc36:	d105      	bne.n	bc44 <climb_control_task+0x8c>
   		 desired_gaz = 0.;
    bc38:	f24b 73ec 	movw	r3, #47084	; 0xb7ec
    bc3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc40:	2200      	movs	r2, #0
    bc42:	801a      	strh	r2, [r3, #0]
  }  
	//vPrintString("S_19 navigation_task end! \n\r"); //SunnyBeike
}
    bc44:	bd80      	pop	{r7, pc}
    bc46:	bf00      	nop

0000bc48 <stabilisation_task>:
//#endif
}
*/

void stabilisation_task(void)
{
    bc48:	b580      	push	{r7, lr}
    bc4a:	af00      	add	r7, sp, #0
	//vPrintString("S_6 stabilisation_task start! \n\r"); //SunnyBeike
    ir_update();
    bc4c:	f000 ffc2 	bl	cbd4 <ir_update>
    estimator_update_state_infrared();
    bc50:	f004 fa48 	bl	100e4 <estimator_update_state_infrared>
    roll_pitch_pid_run(); // Set  desired_aileron & desired_elevator
    bc54:	f001 f82c 	bl	ccb0 <roll_pitch_pid_run>
    to_fbw.channels[RADIO_THROTTLE] = desired_gaz; // desired_gaz is set upon GPS message reception
    bc58:	f24b 73ec 	movw	r3, #47084	; 0xb7ec
    bc5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc60:	881a      	ldrh	r2, [r3, #0]
    bc62:	f24b 53d8 	movw	r3, #46552	; 0xb5d8
    bc66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc6a:	801a      	strh	r2, [r3, #0]
    to_fbw.channels[RADIO_ROLL] = desired_aileron;
    bc6c:	f24b 73ee 	movw	r3, #47086	; 0xb7ee
    bc70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc74:	881a      	ldrh	r2, [r3, #0]
    bc76:	f24b 53d8 	movw	r3, #46552	; 0xb5d8
    bc7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc7e:	805a      	strh	r2, [r3, #2]
#ifndef ANTON_T7
    to_fbw.channels[RADIO_PITCH] = desired_elevator;
    bc80:	f24b 73f0 	movw	r3, #47088	; 0xb7f0
    bc84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc88:	881a      	ldrh	r2, [r3, #0]
    bc8a:	f24b 53d8 	movw	r3, #46552	; 0xb5d8
    bc8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc92:	809a      	strh	r2, [r3, #4]
#endif
    
    // Code for camera stabilization, FIXME put that elsewhere
    to_fbw.channels[RADIO_GAIN1] = TRIM_PPRZ(MAX_PPRZ/0.75*(-estimator_phi));
    bc94:	f64b 2378 	movw	r3, #47736	; 0xba78
    bc98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc9c:	681b      	ldr	r3, [r3, #0]
    bc9e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    bca2:	4618      	mov	r0, r3
    bca4:	f006 fe88 	bl	129b8 <__aeabi_f2d>
    bca8:	4602      	mov	r2, r0
    bcaa:	460b      	mov	r3, r1
    bcac:	4610      	mov	r0, r2
    bcae:	4619      	mov	r1, r3
    bcb0:	f04f 0200 	mov.w	r2, #0
    bcb4:	f04f 0300 	mov.w	r3, #0
    bcb8:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    bcbc:	f006 fed0 	bl	12a60 <__aeabi_dmul>
    bcc0:	4602      	mov	r2, r0
    bcc2:	460b      	mov	r3, r1
    bcc4:	4610      	mov	r0, r2
    bcc6:	4619      	mov	r1, r3
    bcc8:	f04f 0200 	mov.w	r2, #0
    bccc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    bcd0:	f2cc 03c2 	movt	r3, #49346	; 0xc0c2
    bcd4:	f007 f936 	bl	12f44 <__aeabi_dcmplt>
    bcd8:	4603      	mov	r3, r0
    bcda:	2b00      	cmp	r3, #0
    bcdc:	d002      	beq.n	bce4 <stabilisation_task+0x9c>
    bcde:	f64d 2280 	movw	r2, #55936	; 0xda80
    bce2:	e046      	b.n	bd72 <stabilisation_task+0x12a>
    bce4:	f64b 2378 	movw	r3, #47736	; 0xba78
    bce8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcec:	681b      	ldr	r3, [r3, #0]
    bcee:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    bcf2:	4618      	mov	r0, r3
    bcf4:	f006 fe60 	bl	129b8 <__aeabi_f2d>
    bcf8:	4602      	mov	r2, r0
    bcfa:	460b      	mov	r3, r1
    bcfc:	4610      	mov	r0, r2
    bcfe:	4619      	mov	r1, r3
    bd00:	f04f 0200 	mov.w	r2, #0
    bd04:	f04f 0300 	mov.w	r3, #0
    bd08:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    bd0c:	f006 fea8 	bl	12a60 <__aeabi_dmul>
    bd10:	4602      	mov	r2, r0
    bd12:	460b      	mov	r3, r1
    bd14:	4610      	mov	r0, r2
    bd16:	4619      	mov	r1, r3
    bd18:	f04f 0200 	mov.w	r2, #0
    bd1c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    bd20:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
    bd24:	f007 f92c 	bl	12f80 <__aeabi_dcmpgt>
    bd28:	4603      	mov	r3, r0
    bd2a:	2b00      	cmp	r3, #0
    bd2c:	d002      	beq.n	bd34 <stabilisation_task+0xec>
    bd2e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    bd32:	e01d      	b.n	bd70 <stabilisation_task+0x128>
    bd34:	f64b 2378 	movw	r3, #47736	; 0xba78
    bd38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd3c:	681b      	ldr	r3, [r3, #0]
    bd3e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    bd42:	4618      	mov	r0, r3
    bd44:	f006 fe38 	bl	129b8 <__aeabi_f2d>
    bd48:	4602      	mov	r2, r0
    bd4a:	460b      	mov	r3, r1
    bd4c:	4610      	mov	r0, r2
    bd4e:	4619      	mov	r1, r3
    bd50:	f04f 0200 	mov.w	r2, #0
    bd54:	f04f 0300 	mov.w	r3, #0
    bd58:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    bd5c:	f006 fe80 	bl	12a60 <__aeabi_dmul>
    bd60:	4602      	mov	r2, r0
    bd62:	460b      	mov	r3, r1
    bd64:	4610      	mov	r0, r2
    bd66:	4619      	mov	r1, r3
    bd68:	f007 f914 	bl	12f94 <__aeabi_d2iz>
    bd6c:	4603      	mov	r3, r0
    bd6e:	b29b      	uxth	r3, r3
    bd70:	b29a      	uxth	r2, r3
    bd72:	f24b 53d8 	movw	r3, #46552	; 0xb5d8
    bd76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd7a:	815a      	strh	r2, [r3, #10]
	//vPrintString("S_6 stabilisation_task end! \n\r"); //SunnyBeike
}
    bd7c:	bd80      	pop	{r7, pc}
    bd7e:	bf00      	nop

0000bd80 <use_gps_pos>:
 * than \a MIN_SPEED_FOR_TAKEOFF, set the \a estimator_flight_time to 1 and \a
 * launch to true (which is not set in non auto launch. Then call
 * \a DOWNLINK_SEND_TAKEOFF
 */
void use_gps_pos()
{
    bd80:	b580      	push	{r7, lr}
    bd82:	af00      	add	r7, sp, #0
    send_gps_pos();
    bd84:	f000 f806 	bl	bd94 <send_gps_pos>
    send_radIR();
    bd88:	f000 f816 	bl	bdb8 <send_radIR>
    send_takeOff();
    bd8c:	f000 f81a 	bl	bdc4 <send_takeOff>
}
    bd90:	bd80      	pop	{r7, pc}
    bd92:	bf00      	nop

0000bd94 <send_gps_pos>:

void send_gps_pos( void ) {
    bd94:	b580      	push	{r7, lr}
    bd96:	af00      	add	r7, sp, #0
  gps_msg_received = FALSE;
    bd98:	f24b 634d 	movw	r3, #46669	; 0xb64d
    bd9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bda0:	2200      	movs	r2, #0
    bda2:	701a      	strb	r2, [r3, #0]
  if (gps_pos_available){
    bda4:	f24b 634e 	movw	r3, #46670	; 0xb64e
    bda8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdac:	781b      	ldrb	r3, [r3, #0]
    bdae:	2b00      	cmp	r3, #0
    bdb0:	d001      	beq.n	bdb6 <send_gps_pos+0x22>
     //DOWNLINK_SEND_GPS(&gps_mode, &gps_utm_east, &gps_utm_north, &gps_fcourse, &gps_falt, &gps_fspeed,&gps_fclimb, &gps_ftow);
     estimator_update_state_gps();
    bdb2:	f004 fc3d 	bl	10630 <estimator_update_state_gps>
  }
}
    bdb6:	bd80      	pop	{r7, pc}

0000bdb8 <send_radIR>:

void send_radIR(void){
    bdb8:	b480      	push	{r7}
    bdba:	af00      	add	r7, sp, #0
    if (gps_pos_available){
      //DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    }
}
    bdbc:	46bd      	mov	sp, r7
    bdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
    bdc2:	4770      	bx	lr

0000bdc4 <send_takeOff>:

void send_takeOff(void){
    bdc4:	b580      	push	{r7, lr}
    bdc6:	af00      	add	r7, sp, #0
  if (gps_pos_available){
    bdc8:	f24b 634e 	movw	r3, #46670	; 0xb64e
    bdcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdd0:	781b      	ldrb	r3, [r3, #0]
    bdd2:	2b00      	cmp	r3, #0
    bdd4:	d027      	beq.n	be26 <send_takeOff+0x62>
     if (!estimator_flight_time && (estimator_hspeed_mod > MIN_SPEED_FOR_TAKEOFF)) {
    bdd6:	f64b 239c 	movw	r3, #47772	; 0xba9c
    bdda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdde:	881b      	ldrh	r3, [r3, #0]
    bde0:	2b00      	cmp	r3, #0
    bde2:	d11a      	bne.n	be1a <send_takeOff+0x56>
    bde4:	f64b 23a4 	movw	r3, #47780	; 0xbaa4
    bde8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdec:	681b      	ldr	r3, [r3, #0]
    bdee:	4618      	mov	r0, r3
    bdf0:	f04f 0100 	mov.w	r1, #0
    bdf4:	f2c4 01a0 	movt	r1, #16544	; 0x40a0
    bdf8:	f007 fc2e 	bl	13658 <__aeabi_fcmpgt>
    bdfc:	4603      	mov	r3, r0
    bdfe:	2b00      	cmp	r3, #0
    be00:	d00b      	beq.n	be1a <send_takeOff+0x56>
        estimator_flight_time = 1;
    be02:	f64b 239c 	movw	r3, #47772	; 0xba9c
    be06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be0a:	2201      	movs	r2, #1
    be0c:	801a      	strh	r2, [r3, #0]
        launch = TRUE; /* Not set in non auto launch */
    be0e:	f24b 43b0 	movw	r3, #46256	; 0xb4b0
    be12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be16:	2201      	movs	r2, #1
    be18:	701a      	strb	r2, [r3, #0]
        //DOWNLINK_SEND_TAKEOFF(&cputime);
     }
     gps_pos_available = FALSE; 
    be1a:	f24b 634e 	movw	r3, #46670	; 0xb64e
    be1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be22:	2200      	movs	r2, #0
    be24:	701a      	strb	r2, [r3, #0]
  }
  //vPrintString("S_16 receive_gps_data_task end!\n\r");
}
    be26:	bd80      	pop	{r7, pc}

0000be28 <modem_init>:
uint8_t    tx_byte;
uint8_t    tx_byte_idx;

uint8_t ck_a, ck_b;

void modem_init( void ) {
    be28:	b480      	push	{r7}
    be2a:	af00      	add	r7, sp, #0
  /* 
     on >= V1.2 boards, 4MHz modem clock is generated
     by one PWM module.
  */
#if defined CTL_BRD_V1_2 || defined CTL_BRD_V1_2_1
  MODEM_OSC_DDR |= _BV(MODEM_OSC);
    be2c:	f248 0317 	movw	r3, #32791	; 0x8017
    be30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be34:	f248 0217 	movw	r2, #32791	; 0x8017
    be38:	f2c2 0200 	movt	r2, #8192	; 0x2000
    be3c:	7812      	ldrb	r2, [r2, #0]
    be3e:	b2d2      	uxtb	r2, r2
    be40:	f042 0210 	orr.w	r2, r2, #16
    be44:	b2d2      	uxtb	r2, r2
    be46:	701a      	strb	r2, [r3, #0]
  OCR0 = 1; /* 4MhZ */
    be48:	f248 0331 	movw	r3, #32817	; 0x8031
    be4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be50:	2201      	movs	r2, #1
    be52:	701a      	strb	r2, [r3, #0]
  TCCR0 = _BV(WGM01) | _BV(COM00) | _BV(CS00);
    be54:	f248 0333 	movw	r3, #32819	; 0x8033
    be58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be5c:	2219      	movs	r2, #25
    be5e:	701a      	strb	r2, [r3, #0]
#endif

  /* setup TX_EN and TX_DATA pin as output */
  MODEM_TX_DDR |= _BV(MODEM_TX_EN) | _BV(MODEM_TX_DATA);
    be60:	f248 0311 	movw	r3, #32785	; 0x8011
    be64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be68:	f248 0211 	movw	r2, #32785	; 0x8011
    be6c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    be70:	7812      	ldrb	r2, [r2, #0]
    be72:	b2d2      	uxtb	r2, r2
    be74:	f062 023f 	orn	r2, r2, #63	; 0x3f
    be78:	b2d2      	uxtb	r2, r2
    be7a:	701a      	strb	r2, [r3, #0]
  /* data idles hight */
  sbi(MODEM_TX_PORT, MODEM_TX_DATA);
    be7c:	f248 0312 	movw	r3, #32786	; 0x8012
    be80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be84:	f248 0212 	movw	r2, #32786	; 0x8012
    be88:	f2c2 0200 	movt	r2, #8192	; 0x2000
    be8c:	7812      	ldrb	r2, [r2, #0]
    be8e:	b2d2      	uxtb	r2, r2
    be90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    be94:	b2d2      	uxtb	r2, r2
    be96:	701a      	strb	r2, [r3, #0]
  /* enable transmitter */
  cbi(MODEM_TX_PORT, MODEM_TX_EN);
    be98:	f248 0312 	movw	r3, #32786	; 0x8012
    be9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bea0:	f248 0212 	movw	r2, #32786	; 0x8012
    bea4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bea8:	7812      	ldrb	r2, [r2, #0]
    beaa:	b2d2      	uxtb	r2, r2
    beac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    beb0:	b2d2      	uxtb	r2, r2
    beb2:	701a      	strb	r2, [r3, #0]
  /* set interrupt on failing edge of clock */
  MODEM_CLK_INT_REG |=  MODEM_CLK_INT_CFG;
    beb4:	f248 033a 	movw	r3, #32826	; 0x803a
    beb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bebc:	f248 023a 	movw	r2, #32826	; 0x803a
    bec0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bec4:	7812      	ldrb	r2, [r2, #0]
    bec6:	b2d2      	uxtb	r2, r2
    bec8:	f042 0202 	orr.w	r2, r2, #2
    becc:	b2d2      	uxtb	r2, r2
    bece:	701a      	strb	r2, [r3, #0]
}
    bed0:	46bd      	mov	sp, r7
    bed2:	f85d 7b04 	ldr.w	r7, [sp], #4
    bed6:	4770      	bx	lr

0000bed8 <__vector_5>:

SIGNAL( MODEM_CLK_INT_SIG ) {
    bed8:	b480      	push	{r7}
    beda:	af00      	add	r7, sp, #0
  /*  start bit         */
  if (tx_byte_idx == 0)
    bedc:	f24b 53bc 	movw	r3, #46524	; 0xb5bc
    bee0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bee4:	781b      	ldrb	r3, [r3, #0]
    bee6:	2b00      	cmp	r3, #0
    bee8:	d10e      	bne.n	bf08 <__vector_5+0x30>
    cbi(MODEM_TX_PORT, MODEM_TX_DATA);
    beea:	f248 0312 	movw	r3, #32786	; 0x8012
    beee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bef2:	f248 0212 	movw	r2, #32786	; 0x8012
    bef6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    befa:	7812      	ldrb	r2, [r2, #0]
    befc:	b2d2      	uxtb	r2, r2
    befe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    bf02:	b2d2      	uxtb	r2, r2
    bf04:	701a      	strb	r2, [r3, #0]
    bf06:	e047      	b.n	bf98 <__vector_5+0xc0>
  /* 8 data bits        */ 
  else if (tx_byte_idx < 9) {
    bf08:	f24b 53bc 	movw	r3, #46524	; 0xb5bc
    bf0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf10:	781b      	ldrb	r3, [r3, #0]
    bf12:	2b08      	cmp	r3, #8
    bf14:	d832      	bhi.n	bf7c <__vector_5+0xa4>
    if (tx_byte & 0x01)
    bf16:	f24b 53bb 	movw	r3, #46523	; 0xb5bb
    bf1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf1e:	781b      	ldrb	r3, [r3, #0]
    bf20:	f003 0301 	and.w	r3, r3, #1
    bf24:	2b00      	cmp	r3, #0
    bf26:	d00e      	beq.n	bf46 <__vector_5+0x6e>
      sbi(MODEM_TX_PORT, MODEM_TX_DATA);
    bf28:	f248 0312 	movw	r3, #32786	; 0x8012
    bf2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf30:	f248 0212 	movw	r2, #32786	; 0x8012
    bf34:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bf38:	7812      	ldrb	r2, [r2, #0]
    bf3a:	b2d2      	uxtb	r2, r2
    bf3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    bf40:	b2d2      	uxtb	r2, r2
    bf42:	701a      	strb	r2, [r3, #0]
    bf44:	e00d      	b.n	bf62 <__vector_5+0x8a>
    else
      cbi(MODEM_TX_PORT, MODEM_TX_DATA);
    bf46:	f248 0312 	movw	r3, #32786	; 0x8012
    bf4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf4e:	f248 0212 	movw	r2, #32786	; 0x8012
    bf52:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bf56:	7812      	ldrb	r2, [r2, #0]
    bf58:	b2d2      	uxtb	r2, r2
    bf5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    bf5e:	b2d2      	uxtb	r2, r2
    bf60:	701a      	strb	r2, [r3, #0]
    tx_byte >>= 1;
    bf62:	f24b 53bb 	movw	r3, #46523	; 0xb5bb
    bf66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf6a:	781b      	ldrb	r3, [r3, #0]
    bf6c:	085b      	lsrs	r3, r3, #1
    bf6e:	b2da      	uxtb	r2, r3
    bf70:	f24b 53bb 	movw	r3, #46523	; 0xb5bb
    bf74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf78:	701a      	strb	r2, [r3, #0]
    bf7a:	e00d      	b.n	bf98 <__vector_5+0xc0>
  }
  /* stop_bit           */
  else {
    sbi(MODEM_TX_PORT, MODEM_TX_DATA); 
    bf7c:	f248 0312 	movw	r3, #32786	; 0x8012
    bf80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf84:	f248 0212 	movw	r2, #32786	; 0x8012
    bf88:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bf8c:	7812      	ldrb	r2, [r2, #0]
    bf8e:	b2d2      	uxtb	r2, r2
    bf90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    bf94:	b2d2      	uxtb	r2, r2
    bf96:	701a      	strb	r2, [r3, #0]
  }
  tx_byte_idx++;
    bf98:	f24b 53bc 	movw	r3, #46524	; 0xb5bc
    bf9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfa0:	781b      	ldrb	r3, [r3, #0]
    bfa2:	3301      	adds	r3, #1
    bfa4:	b2da      	uxtb	r2, r3
    bfa6:	f24b 53bc 	movw	r3, #46524	; 0xb5bc
    bfaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfae:	701a      	strb	r2, [r3, #0]
  /* next byte          */
  if (tx_byte_idx >= 10) {
    bfb0:	f24b 53bc 	movw	r3, #46524	; 0xb5bc
    bfb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfb8:	781b      	ldrb	r3, [r3, #0]
    bfba:	2b09      	cmp	r3, #9
    bfbc:	d94d      	bls.n	c05a <__vector_5+0x182>
    /*  if we have nothing left to transmit */
    if( tx_head == tx_tail ) {
    bfbe:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    bfc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfc6:	781a      	ldrb	r2, [r3, #0]
    bfc8:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    bfcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfd0:	781b      	ldrb	r3, [r3, #0]
    bfd2:	b2db      	uxtb	r3, r3
    bfd4:	429a      	cmp	r2, r3
    bfd6:	d10e      	bne.n	bff6 <__vector_5+0x11e>
      /* disable clock interrupt            */
      cbi( EIMSK, MODEM_CLK_INT );
    bfd8:	f248 0339 	movw	r3, #32825	; 0x8039
    bfdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bfe0:	f248 0239 	movw	r2, #32825	; 0x8039
    bfe4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bfe8:	7812      	ldrb	r2, [r2, #0]
    bfea:	b2d2      	uxtb	r2, r2
    bfec:	f022 0210 	bic.w	r2, r2, #16
    bff0:	b2d2      	uxtb	r2, r2
    bff2:	701a      	strb	r2, [r3, #0]
    bff4:	e031      	b.n	c05a <__vector_5+0x182>
    } else {
      /* else load next byte                  */
      MODEM_LOAD_NEXT_BYTE();  
    bff6:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    bffa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bffe:	781b      	ldrb	r3, [r3, #0]
    c000:	b2db      	uxtb	r3, r3
    c002:	461a      	mov	r2, r3
    c004:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    c008:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c00c:	5c9a      	ldrb	r2, [r3, r2]
    c00e:	f24b 53bb 	movw	r3, #46523	; 0xb5bb
    c012:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c016:	701a      	strb	r2, [r3, #0]
    c018:	f24b 53bc 	movw	r3, #46524	; 0xb5bc
    c01c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c020:	2200      	movs	r2, #0
    c022:	701a      	strb	r2, [r3, #0]
    c024:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    c028:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c02c:	781b      	ldrb	r3, [r3, #0]
    c02e:	b2db      	uxtb	r3, r3
    c030:	3301      	adds	r3, #1
    c032:	b2da      	uxtb	r2, r3
    c034:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    c038:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c03c:	701a      	strb	r2, [r3, #0]
    c03e:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    c042:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c046:	781b      	ldrb	r3, [r3, #0]
    c048:	b2db      	uxtb	r3, r3
    c04a:	2bff      	cmp	r3, #255	; 0xff
    c04c:	d105      	bne.n	c05a <__vector_5+0x182>
    c04e:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    c052:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c056:	2200      	movs	r2, #0
    c058:	701a      	strb	r2, [r3, #0]
    }
  }
}
    c05a:	46bd      	mov	sp, r7
    c05c:	f85d 7b04 	ldr.w	r7, [sp], #4
    c060:	4770      	bx	lr
    c062:	bf00      	nop

0000c064 <link_fbw_init>:
uint8_t link_fbw_fbw_nb_err;

static uint8_t idx_buf;
static uint8_t xor_in, xor_out;

void link_fbw_init(void) {
    c064:	b480      	push	{r7}
    c066:	af00      	add	r7, sp, #0
  link_fbw_nb_err;
    c068:	f24b 53ef 	movw	r3, #46575	; 0xb5ef
    c06c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c070:	781b      	ldrb	r3, [r3, #0]
  link_fbw_receive_complete = FALSE;  
    c072:	f240 1306 	movw	r3, #262	; 0x106
    c076:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c07a:	2200      	movs	r2, #0
    c07c:	701a      	strb	r2, [r3, #0]
}
    c07e:	46bd      	mov	sp, r7
    c080:	f85d 7b04 	ldr.w	r7, [sp], #4
    c084:	4770      	bx	lr
    c086:	bf00      	nop

0000c088 <link_fbw_send>:

void link_fbw_send(void) {
    c088:	b480      	push	{r7}
    c08a:	b083      	sub	sp, #12
    c08c:	af00      	add	r7, sp, #0
    //vPrintString("S_7 link_fbw_send start! \n\r"); //SunnyBeike

    if (spi_cur_slave != SPI_NONE) 
    c08e:	f24b 53f4 	movw	r3, #46580	; 0xb5f4
    c092:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c096:	781b      	ldrb	r3, [r3, #0]
    c098:	b2db      	uxtb	r3, r3
    c09a:	2b00      	cmp	r3, #0
    c09c:	d00c      	beq.n	c0b8 <link_fbw_send+0x30>
    {
        spi_nb_ovrn++;
    c09e:	f24b 53f5 	movw	r3, #46581	; 0xb5f5
    c0a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0a6:	781b      	ldrb	r3, [r3, #0]
    c0a8:	3301      	adds	r3, #1
    c0aa:	b2da      	uxtb	r2, r3
    c0ac:	f24b 53f5 	movw	r3, #46581	; 0xb5f5
    c0b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0b4:	701a      	strb	r2, [r3, #0]
        //vPrintString("S_7 link_fbw_send end! \n\r"); //SunnyBeike
        return;
    c0b6:	e064      	b.n	c182 <link_fbw_send+0xfa>
    }

    /* Enable SPI, Master, set clock rate fck/16 */ 
    SPI_START(_BV(SPE) | _BV(MSTR) | _BV(SPR0)); // | _BV(SPR1);
    c0b8:	f248 030d 	movw	r3, #32781	; 0x800d
    c0bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0c0:	2251      	movs	r2, #81	; 0x51
    c0c2:	701a      	strb	r2, [r3, #0]
    c0c4:	f248 030e 	movw	r3, #32782	; 0x800e
    c0c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0cc:	781b      	ldrb	r3, [r3, #0]
    c0ce:	b2db      	uxtb	r3, r3
    c0d0:	b2db      	uxtb	r3, r3
    c0d2:	b25b      	sxtb	r3, r3
    c0d4:	2b00      	cmp	r3, #0
    c0d6:	da05      	bge.n	c0e4 <link_fbw_send+0x5c>
    c0d8:	f248 030f 	movw	r3, #32783	; 0x800f
    c0dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0e0:	781b      	ldrb	r3, [r3, #0]
    c0e2:	71fb      	strb	r3, [r7, #7]
    c0e4:	f248 030d 	movw	r3, #32781	; 0x800d
    c0e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0ec:	f248 020d 	movw	r2, #32781	; 0x800d
    c0f0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c0f4:	7812      	ldrb	r2, [r2, #0]
    c0f6:	b2d2      	uxtb	r2, r2
    c0f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
    c0fc:	b2d2      	uxtb	r2, r2
    c0fe:	701a      	strb	r2, [r3, #0]
    SPI_SELECT_SLAVE0();
    c100:	f24b 53f4 	movw	r3, #46580	; 0xb5f4
    c104:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c108:	2201      	movs	r2, #1
    c10a:	701a      	strb	r2, [r3, #0]
    c10c:	f248 0318 	movw	r3, #32792	; 0x8018
    c110:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c114:	f248 0218 	movw	r2, #32792	; 0x8018
    c118:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c11c:	7812      	ldrb	r2, [r2, #0]
    c11e:	b2d2      	uxtb	r2, r2
    c120:	f022 0201 	bic.w	r2, r2, #1
    c124:	b2d2      	uxtb	r2, r2
    c126:	701a      	strb	r2, [r3, #0]

    idx_buf = 0;
    c128:	f24b 53f1 	movw	r3, #46577	; 0xb5f1
    c12c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c130:	2200      	movs	r2, #0
    c132:	701a      	strb	r2, [r3, #0]
    xor_in = 0;
    c134:	f24b 53f2 	movw	r3, #46578	; 0xb5f2
    c138:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c13c:	2200      	movs	r2, #0
    c13e:	701a      	strb	r2, [r3, #0]
    xor_out = ((uint8_t*)&to_fbw)[idx_buf];
    c140:	f24b 53f1 	movw	r3, #46577	; 0xb5f1
    c144:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c148:	781b      	ldrb	r3, [r3, #0]
    c14a:	461a      	mov	r2, r3
    c14c:	f24b 53d8 	movw	r3, #46552	; 0xb5d8
    c150:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c154:	4413      	add	r3, r2
    c156:	781a      	ldrb	r2, [r3, #0]
    c158:	f24b 53f3 	movw	r3, #46579	; 0xb5f3
    c15c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c160:	701a      	strb	r2, [r3, #0]
    SPDR = xor_out;
    c162:	f248 030f 	movw	r3, #32783	; 0x800f
    c166:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c16a:	f24b 52f3 	movw	r2, #46579	; 0xb5f3
    c16e:	f2c2 0204 	movt	r2, #8196	; 0x2004
    c172:	7812      	ldrb	r2, [r2, #0]
    c174:	701a      	strb	r2, [r3, #0]
    link_fbw_receive_valid = FALSE;
    c176:	f24b 53ee 	movw	r3, #46574	; 0xb5ee
    c17a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c17e:	2200      	movs	r2, #0
    c180:	701a      	strb	r2, [r3, #0]
    // Other bytes will follow SIG_SPI interrupts
    //vPrintString("S_7 link_fbw_send end! \n\r"); //SunnyBeike
}
    c182:	370c      	adds	r7, #12
    c184:	46bd      	mov	sp, r7
    c186:	f85d 7b04 	ldr.w	r7, [sp], #4
    c18a:	4770      	bx	lr

0000c18c <link_fbw_on_spi_it>:

void link_fbw_on_spi_it( void ) {
    c18c:	b480      	push	{r7}
    c18e:	af00      	add	r7, sp, #0
  /* setup OCR1A to pop in 200 clock cycles */
  /* this leaves time for the slave (fbw)   */
  /* to process the byte we've sent and to  */
  /* prepare a new one to be sent           */
  OCR1A = TCNT1 + 200;
    c190:	f248 032a 	movw	r3, #32810	; 0x802a
    c194:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c198:	f248 022c 	movw	r2, #32812	; 0x802c
    c19c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c1a0:	8812      	ldrh	r2, [r2, #0]
    c1a2:	b292      	uxth	r2, r2
    c1a4:	32c8      	adds	r2, #200	; 0xc8
    c1a6:	b292      	uxth	r2, r2
    c1a8:	801a      	strh	r2, [r3, #0]
  /* clear interrupt flag  */
  sbi(TIFR, OCF1A);
    c1aa:	f248 0336 	movw	r3, #32822	; 0x8036
    c1ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1b2:	f248 0236 	movw	r2, #32822	; 0x8036
    c1b6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c1ba:	7812      	ldrb	r2, [r2, #0]
    c1bc:	b2d2      	uxtb	r2, r2
    c1be:	f042 0210 	orr.w	r2, r2, #16
    c1c2:	b2d2      	uxtb	r2, r2
    c1c4:	701a      	strb	r2, [r3, #0]
  /* enable OC1A interrupt */
  sbi(TIMSK, OCIE1A);
    c1c6:	f248 0337 	movw	r3, #32823	; 0x8037
    c1ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1ce:	f248 0237 	movw	r2, #32823	; 0x8037
    c1d2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c1d6:	7812      	ldrb	r2, [r2, #0]
    c1d8:	b2d2      	uxtb	r2, r2
    c1da:	f042 0210 	orr.w	r2, r2, #16
    c1de:	b2d2      	uxtb	r2, r2
    c1e0:	701a      	strb	r2, [r3, #0]
}
    c1e2:	46bd      	mov	sp, r7
    c1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    c1e8:	4770      	bx	lr
    c1ea:	bf00      	nop

0000c1ec <__vector_12>:


/* send the next byte */
SIGNAL(SIG_OUTPUT_COMPARE1A) {
    c1ec:	b480      	push	{r7}
    c1ee:	b083      	sub	sp, #12
    c1f0:	af00      	add	r7, sp, #0
  uint8_t tmp;

  /* disable OC1A interrupt */
  cbi(TIMSK, OCIE1A); 
    c1f2:	f248 0337 	movw	r3, #32823	; 0x8037
    c1f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1fa:	f248 0237 	movw	r2, #32823	; 0x8037
    c1fe:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c202:	7812      	ldrb	r2, [r2, #0]
    c204:	b2d2      	uxtb	r2, r2
    c206:	f022 0210 	bic.w	r2, r2, #16
    c20a:	b2d2      	uxtb	r2, r2
    c20c:	701a      	strb	r2, [r3, #0]

  idx_buf++;
    c20e:	f24b 53f1 	movw	r3, #46577	; 0xb5f1
    c212:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c216:	781b      	ldrb	r3, [r3, #0]
    c218:	3301      	adds	r3, #1
    c21a:	b2da      	uxtb	r2, r3
    c21c:	f24b 53f1 	movw	r3, #46577	; 0xb5f1
    c220:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c224:	701a      	strb	r2, [r3, #0]

  /* we have sent/received a complete frame */
  if (idx_buf == FRAME_LENGTH) {
    c226:	f24b 53f1 	movw	r3, #46577	; 0xb5f1
    c22a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c22e:	781b      	ldrb	r3, [r3, #0]
    c230:	2b17      	cmp	r3, #23
    c232:	d162      	bne.n	c2fa <__vector_12+0x10e>
    /* read checksum from receive register  */
    tmp = SPDR;
    c234:	f248 030f 	movw	r3, #32783	; 0x800f
    c238:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c23c:	781b      	ldrb	r3, [r3, #0]
    c23e:	71fb      	strb	r3, [r7, #7]
    /* notify valid frame                   */
    if (tmp == xor_in) {
    c240:	f24b 53f2 	movw	r3, #46578	; 0xb5f2
    c244:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c248:	781b      	ldrb	r3, [r3, #0]
    c24a:	79fa      	ldrb	r2, [r7, #7]
    c24c:	429a      	cmp	r2, r3
    c24e:	d110      	bne.n	c272 <__vector_12+0x86>
      link_fbw_receive_valid = TRUE;
    c250:	f24b 53ee 	movw	r3, #46574	; 0xb5ee
    c254:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c258:	2201      	movs	r2, #1
    c25a:	701a      	strb	r2, [r3, #0]
      link_fbw_fbw_nb_err = from_fbw.nb_err;
    c25c:	f24b 53c0 	movw	r3, #46528	; 0xb5c0
    c260:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c264:	7d1a      	ldrb	r2, [r3, #20]
    c266:	f24b 53f0 	movw	r3, #46576	; 0xb5f0
    c26a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c26e:	701a      	strb	r2, [r3, #0]
    c270:	e00c      	b.n	c28c <__vector_12+0xa0>
    }
    else
      link_fbw_nb_err++;
    c272:	f24b 53ef 	movw	r3, #46575	; 0xb5ef
    c276:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c27a:	781b      	ldrb	r3, [r3, #0]
    c27c:	b2db      	uxtb	r3, r3
    c27e:	3301      	adds	r3, #1
    c280:	b2da      	uxtb	r2, r3
    c282:	f24b 53ef 	movw	r3, #46575	; 0xb5ef
    c286:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c28a:	701a      	strb	r2, [r3, #0]
    link_fbw_receive_complete = TRUE;
    c28c:	f240 1306 	movw	r3, #262	; 0x106
    c290:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c294:	2201      	movs	r2, #1
    c296:	701a      	strb	r2, [r3, #0]
    /* unselect slave0                      */
    SPI_UNSELECT_SLAVE0();
    c298:	f24b 53f4 	movw	r3, #46580	; 0xb5f4
    c29c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2a0:	2200      	movs	r2, #0
    c2a2:	701a      	strb	r2, [r3, #0]
    c2a4:	f248 0318 	movw	r3, #32792	; 0x8018
    c2a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2ac:	f248 0218 	movw	r2, #32792	; 0x8018
    c2b0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c2b4:	7812      	ldrb	r2, [r2, #0]
    c2b6:	b2d2      	uxtb	r2, r2
    c2b8:	f042 0201 	orr.w	r2, r2, #1
    c2bc:	b2d2      	uxtb	r2, r2
    c2be:	701a      	strb	r2, [r3, #0]
    SPI_STOP();
    c2c0:	f248 030d 	movw	r3, #32781	; 0x800d
    c2c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2c8:	f248 020d 	movw	r2, #32781	; 0x800d
    c2cc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c2d0:	7812      	ldrb	r2, [r2, #0]
    c2d2:	b2d2      	uxtb	r2, r2
    c2d4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    c2d8:	b2d2      	uxtb	r2, r2
    c2da:	701a      	strb	r2, [r3, #0]
    c2dc:	f248 030d 	movw	r3, #32781	; 0x800d
    c2e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2e4:	f248 020d 	movw	r2, #32781	; 0x800d
    c2e8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c2ec:	7812      	ldrb	r2, [r2, #0]
    c2ee:	b2d2      	uxtb	r2, r2
    c2f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    c2f4:	b2d2      	uxtb	r2, r2
    c2f6:	701a      	strb	r2, [r3, #0]
    return;
    c2f8:	e051      	b.n	c39e <__vector_12+0x1b2>
  }

  /* we are sending/receiving payload       */
  if (idx_buf < FRAME_LENGTH - 1) {
    c2fa:	f24b 53f1 	movw	r3, #46577	; 0xb5f1
    c2fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c302:	781b      	ldrb	r3, [r3, #0]
    c304:	2b15      	cmp	r3, #21
    c306:	d820      	bhi.n	c34a <__vector_12+0x15e>
    /* place new payload byte in send register */
    tmp = ((uint8_t*)&to_fbw)[idx_buf];
    c308:	f24b 53f1 	movw	r3, #46577	; 0xb5f1
    c30c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c310:	781b      	ldrb	r3, [r3, #0]
    c312:	461a      	mov	r2, r3
    c314:	f24b 53d8 	movw	r3, #46552	; 0xb5d8
    c318:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c31c:	4413      	add	r3, r2
    c31e:	781b      	ldrb	r3, [r3, #0]
    c320:	71fb      	strb	r3, [r7, #7]
    SPI_SEND(tmp);
    c322:	f248 030f 	movw	r3, #32783	; 0x800f
    c326:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c32a:	79fa      	ldrb	r2, [r7, #7]
    c32c:	701a      	strb	r2, [r3, #0]
    xor_out ^= tmp;
    c32e:	f24b 53f3 	movw	r3, #46579	; 0xb5f3
    c332:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c336:	781a      	ldrb	r2, [r3, #0]
    c338:	79fb      	ldrb	r3, [r7, #7]
    c33a:	4053      	eors	r3, r2
    c33c:	b2da      	uxtb	r2, r3
    c33e:	f24b 53f3 	movw	r3, #46579	; 0xb5f3
    c342:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c346:	701a      	strb	r2, [r3, #0]
    c348:	e009      	b.n	c35e <__vector_12+0x172>
  } 
  /* we are done sending the payload */
  else { // idx_buf == FRAME_LENGTH - 1
    /* place checksum in send register */
    SPI_SEND(xor_out);
    c34a:	f248 030f 	movw	r3, #32783	; 0x800f
    c34e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c352:	f24b 52f3 	movw	r2, #46579	; 0xb5f3
    c356:	f2c2 0204 	movt	r2, #8196	; 0x2004
    c35a:	7812      	ldrb	r2, [r2, #0]
    c35c:	701a      	strb	r2, [r3, #0]
  }
  
  /* read the byte from receive register */
  tmp = SPDR;
    c35e:	f248 030f 	movw	r3, #32783	; 0x800f
    c362:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c366:	781b      	ldrb	r3, [r3, #0]
    c368:	71fb      	strb	r3, [r7, #7]
  ((uint8_t*)&from_fbw)[idx_buf-1] = tmp;
    c36a:	f24b 53f1 	movw	r3, #46577	; 0xb5f1
    c36e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c372:	781b      	ldrb	r3, [r3, #0]
    c374:	1e5a      	subs	r2, r3, #1
    c376:	f24b 53c0 	movw	r3, #46528	; 0xb5c0
    c37a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c37e:	4413      	add	r3, r2
    c380:	79fa      	ldrb	r2, [r7, #7]
    c382:	701a      	strb	r2, [r3, #0]
  xor_in ^= tmp;
    c384:	f24b 53f2 	movw	r3, #46578	; 0xb5f2
    c388:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c38c:	781a      	ldrb	r2, [r3, #0]
    c38e:	79fb      	ldrb	r3, [r7, #7]
    c390:	4053      	eors	r3, r2
    c392:	b2da      	uxtb	r2, r3
    c394:	f24b 53f2 	movw	r3, #46578	; 0xb5f2
    c398:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c39c:	701a      	strb	r2, [r3, #0]
}
    c39e:	370c      	adds	r7, #12
    c3a0:	46bd      	mov	sp, r7
    c3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    c3a6:	4770      	bx	lr

0000c3a8 <spi_init>:
#include "ad7714.h"

volatile uint8_t spi_cur_slave;
uint8_t spi_nb_ovrn;

void spi_init( void) {
    c3a8:	b480      	push	{r7}
    c3aa:	af00      	add	r7, sp, #0
  /* Set MOSI and SCK output, all others input */ 
  SPI_DDR |= _BV(SPI_MOSI_PIN)| _BV(SPI_SCK_PIN); 
    c3ac:	f248 0317 	movw	r3, #32791	; 0x8017
    c3b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3b4:	f248 0217 	movw	r2, #32791	; 0x8017
    c3b8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c3bc:	7812      	ldrb	r2, [r2, #0]
    c3be:	b2d2      	uxtb	r2, r2
    c3c0:	f042 0206 	orr.w	r2, r2, #6
    c3c4:	b2d2      	uxtb	r2, r2
    c3c6:	701a      	strb	r2, [r3, #0]

  /* enable pull up for miso */
  //  SPI_PORT |= _BV(SPI_MISO_PIN);

  /* Set SS0 output */
  sbi( SPI_SS0_DDR, SPI_SS0_PIN);
    c3c8:	f248 0317 	movw	r3, #32791	; 0x8017
    c3cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3d0:	f248 0217 	movw	r2, #32791	; 0x8017
    c3d4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c3d8:	7812      	ldrb	r2, [r2, #0]
    c3da:	b2d2      	uxtb	r2, r2
    c3dc:	f042 0201 	orr.w	r2, r2, #1
    c3e0:	b2d2      	uxtb	r2, r2
    c3e2:	701a      	strb	r2, [r3, #0]
  /* SS0 idles high (don't select slave yet)*/
  SPI_UNSELECT_SLAVE0();
    c3e4:	f24b 53f4 	movw	r3, #46580	; 0xb5f4
    c3e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3ec:	2200      	movs	r2, #0
    c3ee:	701a      	strb	r2, [r3, #0]
    c3f0:	f248 0318 	movw	r3, #32792	; 0x8018
    c3f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3f8:	f248 0218 	movw	r2, #32792	; 0x8018
    c3fc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c400:	7812      	ldrb	r2, [r2, #0]
    c402:	b2d2      	uxtb	r2, r2
    c404:	f042 0201 	orr.w	r2, r2, #1
    c408:	b2d2      	uxtb	r2, r2
    c40a:	701a      	strb	r2, [r3, #0]

  /* Set SS1 output */
  sbi( SPI_SS1_DDR, SPI_SS1_PIN);
    c40c:	f248 0302 	movw	r3, #32770	; 0x8002
    c410:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c414:	f248 0202 	movw	r2, #32770	; 0x8002
    c418:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c41c:	7812      	ldrb	r2, [r2, #0]
    c41e:	b2d2      	uxtb	r2, r2
    c420:	f062 027f 	orn	r2, r2, #127	; 0x7f
    c424:	b2d2      	uxtb	r2, r2
    c426:	701a      	strb	r2, [r3, #0]
  /* SS1 idles high (don't select slave yet)*/
  SPI_UNSELECT_SLAVE1();
    c428:	f24b 53f4 	movw	r3, #46580	; 0xb5f4
    c42c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c430:	2200      	movs	r2, #0
    c432:	701a      	strb	r2, [r3, #0]
    c434:	f248 0303 	movw	r3, #32771	; 0x8003
    c438:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c43c:	f248 0203 	movw	r2, #32771	; 0x8003
    c440:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c444:	7812      	ldrb	r2, [r2, #0]
    c446:	b2d2      	uxtb	r2, r2
    c448:	f062 027f 	orn	r2, r2, #127	; 0x7f
    c44c:	b2d2      	uxtb	r2, r2
    c44e:	701a      	strb	r2, [r3, #0]
  
  spi_cur_slave = SPI_NONE;
    c450:	f24b 53f4 	movw	r3, #46580	; 0xb5f4
    c454:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c458:	2200      	movs	r2, #0
    c45a:	701a      	strb	r2, [r3, #0]
}
    c45c:	46bd      	mov	sp, r7
    c45e:	f85d 7b04 	ldr.w	r7, [sp], #4
    c462:	4770      	bx	lr

0000c464 <__vector_17>:


SIGNAL(SIG_SPI) {
    c464:	b580      	push	{r7, lr}
    c466:	af00      	add	r7, sp, #0
  if (spi_cur_slave == SPI_SLAVE0)
    c468:	f24b 53f4 	movw	r3, #46580	; 0xb5f4
    c46c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c470:	781b      	ldrb	r3, [r3, #0]
    c472:	b2db      	uxtb	r3, r3
    c474:	2b01      	cmp	r3, #1
    c476:	d102      	bne.n	c47e <__vector_17+0x1a>
    link_fbw_on_spi_it();
    c478:	f7ff fe88 	bl	c18c <link_fbw_on_spi_it>
    c47c:	e00b      	b.n	c496 <__vector_17+0x32>
  else
    fatal_error_nb++;
    c47e:	f24b 4398 	movw	r3, #46232	; 0xb498
    c482:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c486:	781b      	ldrb	r3, [r3, #0]
    c488:	3301      	adds	r3, #1
    c48a:	b2da      	uxtb	r2, r3
    c48c:	f24b 4398 	movw	r3, #46232	; 0xb498
    c490:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c494:	701a      	strb	r2, [r3, #0]
}
    c496:	bd80      	pop	{r7, pc}

0000c498 <adc_buf_channel>:

uint16_t		adc_samples[ NB_ADC ];

static struct adc_buf* buffers[NB_ADC];

void adc_buf_channel(uint8_t adc_channel, struct adc_buf* s) {
    c498:	b480      	push	{r7}
    c49a:	b083      	sub	sp, #12
    c49c:	af00      	add	r7, sp, #0
    c49e:	4603      	mov	r3, r0
    c4a0:	6039      	str	r1, [r7, #0]
    c4a2:	71fb      	strb	r3, [r7, #7]
  buffers[adc_channel] = s;
    c4a4:	79fa      	ldrb	r2, [r7, #7]
    c4a6:	f24b 6308 	movw	r3, #46600	; 0xb608
    c4aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4ae:	6839      	ldr	r1, [r7, #0]
    c4b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    c4b4:	370c      	adds	r7, #12
    c4b6:	46bd      	mov	sp, r7
    c4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    c4bc:	4770      	bx	lr
    c4be:	bf00      	nop

0000c4c0 <adc_init>:

void 
adc_init( void )
{
    c4c0:	b480      	push	{r7}
    c4c2:	b083      	sub	sp, #12
    c4c4:	af00      	add	r7, sp, #0
  uint8_t i;
  /* Ensure that our port is for input with no pull-ups */
  ANALOG_PORT 	= 0x00;
    c4c6:	f248 0362 	movw	r3, #32866	; 0x8062
    c4ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4ce:	2200      	movs	r2, #0
    c4d0:	701a      	strb	r2, [r3, #0]
  ANALOG_PORT_DIR	= 0x00;
    c4d2:	f248 0361 	movw	r3, #32865	; 0x8061
    c4d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4da:	2200      	movs	r2, #0
    c4dc:	701a      	strb	r2, [r3, #0]

  /* Select our external voltage ref, which is tied to Vcc */
  ADMUX		= ANALOG_VREF;
    c4de:	f248 0307 	movw	r3, #32775	; 0x8007
    c4e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4e6:	2240      	movs	r2, #64	; 0x40
    c4e8:	701a      	strb	r2, [r3, #0]

  /* Turn off the analog comparator */
  sbi( ACSR, ACD );
    c4ea:	f248 0308 	movw	r3, #32776	; 0x8008
    c4ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4f2:	f248 0208 	movw	r2, #32776	; 0x8008
    c4f6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c4fa:	7812      	ldrb	r2, [r2, #0]
    c4fc:	b2d2      	uxtb	r2, r2
    c4fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
    c502:	b2d2      	uxtb	r2, r2
    c504:	701a      	strb	r2, [r3, #0]

  /* Select out clock, turn on the ADC interrupt and start conversion */
  ADCSR		= 0
    c506:	f248 0306 	movw	r3, #32774	; 0x8006
    c50a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c50e:	22cf      	movs	r2, #207	; 0xcf
    c510:	701a      	strb	r2, [r3, #0]
    | ( 1 << ADEN )
    | ( 1 << ADIE )
    | ( 1 << ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < NB_ADC; i++)
    c512:	2300      	movs	r3, #0
    c514:	71fb      	strb	r3, [r7, #7]
    c516:	e00a      	b.n	c52e <adc_init+0x6e>
    buffers[i] = (struct adc_buf*)0;
    c518:	79fa      	ldrb	r2, [r7, #7]
    c51a:	f24b 6308 	movw	r3, #46600	; 0xb608
    c51e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c522:	2100      	movs	r1, #0
    c524:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    | ( 1 << ADEN )
    | ( 1 << ADIE )
    | ( 1 << ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < NB_ADC; i++)
    c528:	79fb      	ldrb	r3, [r7, #7]
    c52a:	3301      	adds	r3, #1
    c52c:	71fb      	strb	r3, [r7, #7]
    c52e:	79fb      	ldrb	r3, [r7, #7]
    c530:	2b07      	cmp	r3, #7
    c532:	d9f1      	bls.n	c518 <adc_init+0x58>
    buffers[i] = (struct adc_buf*)0;
}
    c534:	370c      	adds	r7, #12
    c536:	46bd      	mov	sp, r7
    c538:	f85d 7b04 	ldr.w	r7, [sp], #4
    c53c:	4770      	bx	lr
    c53e:	bf00      	nop

0000c540 <__vector_21>:
 *  8.913kHz on mega128@16MHz 1kHz/channel ??
*/


SIGNAL( SIG_ADC )
{
    c540:	b480      	push	{r7}
    c542:	b085      	sub	sp, #20
    c544:	af00      	add	r7, sp, #0
  uint8_t adc_input	= ADMUX & 0x7;
    c546:	f248 0307 	movw	r3, #32775	; 0x8007
    c54a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c54e:	781b      	ldrb	r3, [r3, #0]
    c550:	b2db      	uxtb	r3, r3
    c552:	f003 0307 	and.w	r3, r3, #7
    c556:	73fb      	strb	r3, [r7, #15]
  struct adc_buf* buf = buffers[adc_input];
    c558:	7bfa      	ldrb	r2, [r7, #15]
    c55a:	f24b 6308 	movw	r3, #46600	; 0xb608
    c55e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c562:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    c566:	60bb      	str	r3, [r7, #8]
  uint16_t adc_value = ADCW;
    c568:	f248 0304 	movw	r3, #32772	; 0x8004
    c56c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c570:	881b      	ldrh	r3, [r3, #0]
    c572:	80fb      	strh	r3, [r7, #6]
  /* Store result */
  adc_samples[ adc_input ] = adc_value;
    c574:	7bfa      	ldrb	r2, [r7, #15]
    c576:	f24b 53f8 	movw	r3, #46584	; 0xb5f8
    c57a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c57e:	88f9      	ldrh	r1, [r7, #6]
    c580:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

  if (buf) {
    c584:	68bb      	ldr	r3, [r7, #8]
    c586:	2b00      	cmp	r3, #0
    c588:	d025      	beq.n	c5d6 <__vector_21+0x96>
    uint8_t new_head = buf->head + 1;
    c58a:	68bb      	ldr	r3, [r7, #8]
    c58c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
    c590:	3301      	adds	r3, #1
    c592:	73bb      	strb	r3, [r7, #14]
    if (new_head >= AV_NB_SAMPLE) new_head = 0;
    c594:	7bbb      	ldrb	r3, [r7, #14]
    c596:	2b1f      	cmp	r3, #31
    c598:	d901      	bls.n	c59e <__vector_21+0x5e>
    c59a:	2300      	movs	r3, #0
    c59c:	73bb      	strb	r3, [r7, #14]
    buf->sum -= buf->values[new_head];
    c59e:	68bb      	ldr	r3, [r7, #8]
    c5a0:	881a      	ldrh	r2, [r3, #0]
    c5a2:	7bbb      	ldrb	r3, [r7, #14]
    c5a4:	68b9      	ldr	r1, [r7, #8]
    c5a6:	005b      	lsls	r3, r3, #1
    c5a8:	440b      	add	r3, r1
    c5aa:	885b      	ldrh	r3, [r3, #2]
    c5ac:	1ad3      	subs	r3, r2, r3
    c5ae:	b29a      	uxth	r2, r3
    c5b0:	68bb      	ldr	r3, [r7, #8]
    c5b2:	801a      	strh	r2, [r3, #0]
    buf->values[new_head] = adc_value;
    c5b4:	7bbb      	ldrb	r3, [r7, #14]
    c5b6:	68ba      	ldr	r2, [r7, #8]
    c5b8:	005b      	lsls	r3, r3, #1
    c5ba:	4413      	add	r3, r2
    c5bc:	88fa      	ldrh	r2, [r7, #6]
    c5be:	805a      	strh	r2, [r3, #2]
    buf->sum += adc_value;
    c5c0:	68bb      	ldr	r3, [r7, #8]
    c5c2:	881a      	ldrh	r2, [r3, #0]
    c5c4:	88fb      	ldrh	r3, [r7, #6]
    c5c6:	4413      	add	r3, r2
    c5c8:	b29a      	uxth	r2, r3
    c5ca:	68bb      	ldr	r3, [r7, #8]
    c5cc:	801a      	strh	r2, [r3, #0]
    buf->head = new_head;   
    c5ce:	68bb      	ldr	r3, [r7, #8]
    c5d0:	7bba      	ldrb	r2, [r7, #14]
    c5d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Find the next input */
  adc_input++;
    c5d6:	7bfb      	ldrb	r3, [r7, #15]
    c5d8:	3301      	adds	r3, #1
    c5da:	73fb      	strb	r3, [r7, #15]
  if( adc_input >= 8 )
    c5dc:	7bfb      	ldrb	r3, [r7, #15]
    c5de:	2b07      	cmp	r3, #7
    c5e0:	d901      	bls.n	c5e6 <__vector_21+0xa6>
    adc_input = 0;
    c5e2:	2300      	movs	r3, #0
    c5e4:	73fb      	strb	r3, [r7, #15]
  /* Select it */
  ADMUX = adc_input | ANALOG_VREF;
    c5e6:	f248 0307 	movw	r3, #32775	; 0x8007
    c5ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5ee:	7bfa      	ldrb	r2, [r7, #15]
    c5f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    c5f4:	b2d2      	uxtb	r2, r2
    c5f6:	701a      	strb	r2, [r3, #0]
  /* Restart the conversion */
  sbi( ADCSR, ADSC );
    c5f8:	f248 0306 	movw	r3, #32774	; 0x8006
    c5fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c600:	f248 0206 	movw	r2, #32774	; 0x8006
    c604:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c608:	7812      	ldrb	r2, [r2, #0]
    c60a:	b2d2      	uxtb	r2, r2
    c60c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    c610:	b2d2      	uxtb	r2, r2
    c612:	701a      	strb	r2, [r3, #0]
  
}
    c614:	3714      	adds	r7, #20
    c616:	46bd      	mov	sp, r7
    c618:	f85d 7b04 	ldr.w	r7, [sp], #4
    c61c:	4770      	bx	lr
    c61e:	bf00      	nop

0000c620 <gps_init>:
static uint8_t  ubx_status;
static uint16_t ubx_len;
static uint8_t  ubx_msg_idx;
static uint8_t ck_a, ck_b, ubx_id, ubx_class;

void gps_init( void ) {
    c620:	b580      	push	{r7, lr}
    c622:	af00      	add	r7, sp, #0
#ifdef SIMUL
  uart0_init();
  simul_ir_roll = ir_roll_neutral;
  simul_ir_pitch = ir_pitch_neutral;
#else
  uart1_init();
    c624:	f003 fcc0 	bl	ffa8 <uart1_init>
#endif
  ubx_status = UNINIT;
    c628:	f24b 734f 	movw	r3, #46927	; 0xb74f
    c62c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c630:	2200      	movs	r2, #0
    c632:	701a      	strb	r2, [r3, #0]
}
    c634:	bd80      	pop	{r7, pc}
    c636:	bf00      	nop

0000c638 <parse_gps_msg>:

void parse_gps_msg( void ) {
    c638:	b580      	push	{r7, lr}
    c63a:	af00      	add	r7, sp, #0
  //vPrintString("S_16 receive_gps_data_task start!\n\r");
    //added by SunnyBeike
    
    ubx_class = UBX_NAV_ID; 
    c63c:	f24b 7356 	movw	r3, #46934	; 0xb756
    c640:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c644:	2201      	movs	r2, #1
    c646:	701a      	strb	r2, [r3, #0]
    ubx_id = (ubx_id + 1)%0x40;
    c648:	f24b 7355 	movw	r3, #46933	; 0xb755
    c64c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c650:	781b      	ldrb	r3, [r3, #0]
    c652:	1c5a      	adds	r2, r3, #1
    c654:	17d3      	asrs	r3, r2, #31
    c656:	0e9b      	lsrs	r3, r3, #26
    c658:	441a      	add	r2, r3
    c65a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    c65e:	1ad3      	subs	r3, r2, r3
    c660:	b2da      	uxtb	r2, r3
    c662:	f24b 7355 	movw	r3, #46933	; 0xb755
    c666:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c66a:	701a      	strb	r2, [r3, #0]
    
    //end

  if (ubx_class == UBX_NAV_ID) {
    c66c:	f24b 7356 	movw	r3, #46934	; 0xb756
    c670:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c674:	781b      	ldrb	r3, [r3, #0]
    c676:	2b01      	cmp	r3, #1
    c678:	f040 80f9 	bne.w	c86e <parse_gps_msg+0x236>
    if (ubx_id == UBX_NAV_POSUTM_ID) {
    c67c:	f24b 7355 	movw	r3, #46933	; 0xb755
    c680:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c684:	781b      	ldrb	r3, [r3, #0]
    c686:	2b08      	cmp	r3, #8
    c688:	d128      	bne.n	c6dc <parse_gps_msg+0xa4>
      gps_utm_east = UBX_NAV_POSUTM_EAST(ubx_msg_buf);
    c68a:	f24b 6350 	movw	r3, #46672	; 0xb650
    c68e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c692:	685a      	ldr	r2, [r3, #4]
    c694:	f24b 633c 	movw	r3, #46652	; 0xb63c
    c698:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c69c:	601a      	str	r2, [r3, #0]
      gps_utm_north = UBX_NAV_POSUTM_NORTH(ubx_msg_buf);
    c69e:	f24b 6350 	movw	r3, #46672	; 0xb650
    c6a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6a6:	689a      	ldr	r2, [r3, #8]
    c6a8:	f24b 6340 	movw	r3, #46656	; 0xb640
    c6ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6b0:	601a      	str	r2, [r3, #0]
      gps_falt = (float)UBX_NAV_POSUTM_ALT(ubx_msg_buf) / 100.;
    c6b2:	4b73      	ldr	r3, [pc, #460]	; (c880 <parse_gps_msg+0x248>)
    c6b4:	681b      	ldr	r3, [r3, #0]
    c6b6:	4618      	mov	r0, r3
    c6b8:	f006 fdbe 	bl	13238 <__aeabi_i2f>
    c6bc:	4603      	mov	r3, r0
    c6be:	4618      	mov	r0, r3
    c6c0:	f04f 0100 	mov.w	r1, #0
    c6c4:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
    c6c8:	f006 febe 	bl	13448 <__aeabi_fdiv>
    c6cc:	4603      	mov	r3, r0
    c6ce:	461a      	mov	r2, r3
    c6d0:	f24b 632c 	movw	r3, #46636	; 0xb62c
    c6d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6d8:	601a      	str	r2, [r3, #0]
    c6da:	e0c8      	b.n	c86e <parse_gps_msg+0x236>
        gps_utm_east = gps_utm_east + 0.5;
        gps_utm_north = gps_utm_north + 0.4;
        gps_falt = gps_falt + 0.6;
        */
        // end
    } else if (ubx_id == UBX_NAV_STATUS_ID) {
    c6dc:	f24b 7355 	movw	r3, #46933	; 0xb755
    c6e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6e4:	781b      	ldrb	r3, [r3, #0]
    c6e6:	2b03      	cmp	r3, #3
    c6e8:	d10a      	bne.n	c700 <parse_gps_msg+0xc8>
      gps_mode = UBX_NAV_STATUS_GPSfix(ubx_msg_buf);
    c6ea:	f24b 6350 	movw	r3, #46672	; 0xb650
    c6ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6f2:	791a      	ldrb	r2, [r3, #4]
    c6f4:	f24b 634c 	movw	r3, #46668	; 0xb64c
    c6f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6fc:	701a      	strb	r2, [r3, #0]
    c6fe:	e0b6      	b.n	c86e <parse_gps_msg+0x236>
    } else if (ubx_id == UBX_NAV_VELNED_ID) {
    c700:	f24b 7355 	movw	r3, #46933	; 0xb755
    c704:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c708:	781b      	ldrb	r3, [r3, #0]
    c70a:	2b12      	cmp	r3, #18
    c70c:	f040 80af 	bne.w	c86e <parse_gps_msg+0x236>
      gps_fspeed = ((float)UBX_NAV_VELNED_GSpeed(ubx_msg_buf)) / 1e2; 
    c710:	4b5c      	ldr	r3, [pc, #368]	; (c884 <parse_gps_msg+0x24c>)
    c712:	681b      	ldr	r3, [r3, #0]
    c714:	4618      	mov	r0, r3
    c716:	f006 fd8b 	bl	13230 <__aeabi_ui2f>
    c71a:	4603      	mov	r3, r0
    c71c:	4618      	mov	r0, r3
    c71e:	f04f 0100 	mov.w	r1, #0
    c722:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
    c726:	f006 fe8f 	bl	13448 <__aeabi_fdiv>
    c72a:	4603      	mov	r3, r0
    c72c:	461a      	mov	r2, r3
    c72e:	f24b 6330 	movw	r3, #46640	; 0xb630
    c732:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c736:	601a      	str	r2, [r3, #0]
      gps_fclimb = ((float)UBX_NAV_VELNED_VEL_D(ubx_msg_buf)) / -1e2;
    c738:	4b51      	ldr	r3, [pc, #324]	; (c880 <parse_gps_msg+0x248>)
    c73a:	681b      	ldr	r3, [r3, #0]
    c73c:	4618      	mov	r0, r3
    c73e:	f006 fd7b 	bl	13238 <__aeabi_i2f>
    c742:	4603      	mov	r3, r0
    c744:	4618      	mov	r0, r3
    c746:	f04f 0100 	mov.w	r1, #0
    c74a:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
    c74e:	f006 fe7b 	bl	13448 <__aeabi_fdiv>
    c752:	4603      	mov	r3, r0
    c754:	461a      	mov	r2, r3
    c756:	f24b 6334 	movw	r3, #46644	; 0xb634
    c75a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c75e:	601a      	str	r2, [r3, #0]
      gps_fcourse = RadianOfDeg(((float)UBX_NAV_VELNED_Heading(ubx_msg_buf)) / 1e5);
    c760:	4b49      	ldr	r3, [pc, #292]	; (c888 <parse_gps_msg+0x250>)
    c762:	681b      	ldr	r3, [r3, #0]
    c764:	4618      	mov	r0, r3
    c766:	f006 fd67 	bl	13238 <__aeabi_i2f>
    c76a:	4603      	mov	r3, r0
    c76c:	4618      	mov	r0, r3
    c76e:	f006 f923 	bl	129b8 <__aeabi_f2d>
    c772:	4602      	mov	r2, r0
    c774:	460b      	mov	r3, r1
    c776:	4610      	mov	r0, r2
    c778:	4619      	mov	r1, r3
    c77a:	a33d      	add	r3, pc, #244	; (adr r3, c870 <parse_gps_msg+0x238>)
    c77c:	e9d3 2300 	ldrd	r2, r3, [r3]
    c780:	f006 fa98 	bl	12cb4 <__aeabi_ddiv>
    c784:	4602      	mov	r2, r0
    c786:	460b      	mov	r3, r1
    c788:	4610      	mov	r0, r2
    c78a:	4619      	mov	r1, r3
    c78c:	f04f 0200 	mov.w	r2, #0
    c790:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    c794:	f2c4 0366 	movt	r3, #16486	; 0x4066
    c798:	f006 fa8c 	bl	12cb4 <__aeabi_ddiv>
    c79c:	4602      	mov	r2, r0
    c79e:	460b      	mov	r3, r1
    c7a0:	4610      	mov	r0, r2
    c7a2:	4619      	mov	r1, r3
    c7a4:	a334      	add	r3, pc, #208	; (adr r3, c878 <parse_gps_msg+0x240>)
    c7a6:	e9d3 2300 	ldrd	r2, r3, [r3]
    c7aa:	f006 f959 	bl	12a60 <__aeabi_dmul>
    c7ae:	4602      	mov	r2, r0
    c7b0:	460b      	mov	r3, r1
    c7b2:	4610      	mov	r0, r2
    c7b4:	4619      	mov	r1, r3
    c7b6:	f006 fc35 	bl	13024 <__aeabi_d2f>
    c7ba:	4602      	mov	r2, r0
    c7bc:	f24b 6338 	movw	r3, #46648	; 0xb638
    c7c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7c4:	601a      	str	r2, [r3, #0]
      gps_ftow = ((float)UBX_NAV_VELNED_ITOW(ubx_msg_buf)) / 1e3;
    c7c6:	f24b 6350 	movw	r3, #46672	; 0xb650
    c7ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7ce:	681b      	ldr	r3, [r3, #0]
    c7d0:	4618      	mov	r0, r3
    c7d2:	f006 fd2d 	bl	13230 <__aeabi_ui2f>
    c7d6:	4603      	mov	r3, r0
    c7d8:	4618      	mov	r0, r3
    c7da:	f04f 0100 	mov.w	r1, #0
    c7de:	f2c4 417a 	movt	r1, #17530	; 0x447a
    c7e2:	f006 fe31 	bl	13448 <__aeabi_fdiv>
    c7e6:	4603      	mov	r3, r0
    c7e8:	461a      	mov	r2, r3
    c7ea:	f24b 6328 	movw	r3, #46632	; 0xb628
    c7ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7f2:	601a      	str	r2, [r3, #0]
        gps_fcourse = gps_fcourse + 0.2;
        gps_ftow = gps_ftow + 0.1;
        */
        // end
      
      gps_east = gps_utm_east / 100 - NAV_UTM_EAST0;
    c7f4:	f24b 633c 	movw	r3, #46652	; 0xb63c
    c7f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7fc:	681a      	ldr	r2, [r3, #0]
    c7fe:	f248 531f 	movw	r3, #34079	; 0x851f
    c802:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    c806:	fb83 1302 	smull	r1, r3, r3, r2
    c80a:	1159      	asrs	r1, r3, #5
    c80c:	17d3      	asrs	r3, r2, #31
    c80e:	1acb      	subs	r3, r1, r3
    c810:	f5a3 2313 	sub.w	r3, r3, #602112	; 0x93000
    c814:	f6a3 535a 	subw	r3, r3, #3418	; 0xd5a
    c818:	4618      	mov	r0, r3
    c81a:	f006 fd0d 	bl	13238 <__aeabi_i2f>
    c81e:	4602      	mov	r2, r0
    c820:	f24b 6344 	movw	r3, #46660	; 0xb644
    c824:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c828:	601a      	str	r2, [r3, #0]
      gps_north = gps_utm_north / 100 - NAV_UTM_NORTH0;
    c82a:	f24b 6340 	movw	r3, #46656	; 0xb640
    c82e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c832:	681a      	ldr	r2, [r3, #0]
    c834:	f248 531f 	movw	r3, #34079	; 0x851f
    c838:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    c83c:	fb83 1302 	smull	r1, r3, r3, r2
    c840:	1159      	asrs	r1, r3, #5
    c842:	17d3      	asrs	r3, r2, #31
    c844:	1aca      	subs	r2, r1, r3
    c846:	f648 231a 	movw	r3, #35354	; 0x8a1a
    c84a:	f6cf 73a7 	movt	r3, #65447	; 0xffa7
    c84e:	4413      	add	r3, r2
    c850:	4618      	mov	r0, r3
    c852:	f006 fcf1 	bl	13238 <__aeabi_i2f>
    c856:	4602      	mov	r2, r0
    c858:	f24b 6348 	movw	r3, #46664	; 0xb648
    c85c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c860:	601a      	str	r2, [r3, #0]
      
      
      gps_pos_available = TRUE; /* The 3 UBX messages are sent in one rafale */
    c862:	f24b 634e 	movw	r3, #46670	; 0xb64e
    c866:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c86a:	2201      	movs	r2, #1
    c86c:	701a      	strb	r2, [r3, #0]
      simul_ir_roll = UBX_USR_IRSIM_ROLL(ubx_msg_buf);
      simul_ir_pitch = UBX_USR_IRSIM_PITCH(ubx_msg_buf);
    }
  }
#endif
}
    c86e:	bd80      	pop	{r7, pc}
    c870:	00000000 	.word	0x00000000
    c874:	40f86a00 	.word	0x40f86a00
    c878:	5a7ed197 	.word	0x5a7ed197
    c87c:	400921fb 	.word	0x400921fb
    c880:	2004b65c 	.word	0x2004b65c
    c884:	2004b664 	.word	0x2004b664
    c888:	2004b668 	.word	0x2004b668

0000c88c <parse_ubx>:


uint8_t gps_nb_ovrn;


static void parse_ubx( uint8_t c ) {
    c88c:	b480      	push	{r7}
    c88e:	b083      	sub	sp, #12
    c890:	af00      	add	r7, sp, #0
    c892:	4603      	mov	r3, r0
    c894:	71fb      	strb	r3, [r7, #7]
   if (ubx_status < GOT_PAYLOAD) {
    c896:	f24b 734f 	movw	r3, #46927	; 0xb74f
    c89a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c89e:	781b      	ldrb	r3, [r3, #0]
    c8a0:	2b06      	cmp	r3, #6
    c8a2:	d81d      	bhi.n	c8e0 <parse_ubx+0x54>
    ck_a += c;
    c8a4:	f24b 7353 	movw	r3, #46931	; 0xb753
    c8a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8ac:	781a      	ldrb	r2, [r3, #0]
    c8ae:	79fb      	ldrb	r3, [r7, #7]
    c8b0:	4413      	add	r3, r2
    c8b2:	b2da      	uxtb	r2, r3
    c8b4:	f24b 7353 	movw	r3, #46931	; 0xb753
    c8b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8bc:	701a      	strb	r2, [r3, #0]
    ck_b += ck_a;
    c8be:	f24b 7354 	movw	r3, #46932	; 0xb754
    c8c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8c6:	781a      	ldrb	r2, [r3, #0]
    c8c8:	f24b 7353 	movw	r3, #46931	; 0xb753
    c8cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8d0:	781b      	ldrb	r3, [r3, #0]
    c8d2:	4413      	add	r3, r2
    c8d4:	b2da      	uxtb	r2, r3
    c8d6:	f24b 7354 	movw	r3, #46932	; 0xb754
    c8da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8de:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
    break;
  }
#else */
  if (ubx_status == UNINIT)
    c8e0:	f24b 734f 	movw	r3, #46927	; 0xb74f
    c8e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8e8:	781b      	ldrb	r3, [r3, #0]
    c8ea:	2b00      	cmp	r3, #0
    c8ec:	d110      	bne.n	c910 <parse_ubx+0x84>
  {
    if (c == UBX_SYNC1)
    c8ee:	79fb      	ldrb	r3, [r7, #7]
    c8f0:	2bb5      	cmp	r3, #181	; 0xb5
    c8f2:	f040 8135 	bne.w	cb60 <parse_ubx+0x2d4>
      ubx_status++;
    c8f6:	f24b 734f 	movw	r3, #46927	; 0xb74f
    c8fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8fe:	781b      	ldrb	r3, [r3, #0]
    c900:	3301      	adds	r3, #1
    c902:	b2da      	uxtb	r2, r3
    c904:	f24b 734f 	movw	r3, #46927	; 0xb74f
    c908:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c90c:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
  }
  else {}
//#endif
  return;
    c90e:	e12f      	b.n	cb70 <parse_ubx+0x2e4>
  if (ubx_status == UNINIT)
  {
    if (c == UBX_SYNC1)
      ubx_status++;
  }
  else if (ubx_status == GOT_SYNC1)
    c910:	f24b 734f 	movw	r3, #46927	; 0xb74f
    c914:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c918:	781b      	ldrb	r3, [r3, #0]
    c91a:	2b01      	cmp	r3, #1
    c91c:	d11c      	bne.n	c958 <parse_ubx+0xcc>
  {
    if (c != UBX_SYNC2)
    c91e:	79fb      	ldrb	r3, [r7, #7]
    c920:	2b62      	cmp	r3, #98	; 0x62
    c922:	d000      	beq.n	c926 <parse_ubx+0x9a>
      goto error;
    c924:	e11d      	b.n	cb62 <parse_ubx+0x2d6>
    ck_a = 0;
    c926:	f24b 7353 	movw	r3, #46931	; 0xb753
    c92a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c92e:	2200      	movs	r2, #0
    c930:	701a      	strb	r2, [r3, #0]
    ck_b = 0;
    c932:	f24b 7354 	movw	r3, #46932	; 0xb754
    c936:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c93a:	2200      	movs	r2, #0
    c93c:	701a      	strb	r2, [r3, #0]
    ubx_status++;
    c93e:	f24b 734f 	movw	r3, #46927	; 0xb74f
    c942:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c946:	781b      	ldrb	r3, [r3, #0]
    c948:	3301      	adds	r3, #1
    c94a:	b2da      	uxtb	r2, r3
    c94c:	f24b 734f 	movw	r3, #46927	; 0xb74f
    c950:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c954:	701a      	strb	r2, [r3, #0]
    c956:	e103      	b.n	cb60 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_SYNC2)
    c958:	f24b 734f 	movw	r3, #46927	; 0xb74f
    c95c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c960:	781b      	ldrb	r3, [r3, #0]
    c962:	2b02      	cmp	r3, #2
    c964:	d127      	bne.n	c9b6 <parse_ubx+0x12a>
  {
    if (gps_msg_received) {
    c966:	f24b 634d 	movw	r3, #46669	; 0xb64d
    c96a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c96e:	781b      	ldrb	r3, [r3, #0]
    c970:	b2db      	uxtb	r3, r3
    c972:	2b00      	cmp	r3, #0
    c974:	d00c      	beq.n	c990 <parse_ubx+0x104>
      /* Previous message has not yet been parsed: discard this one */
      gps_nb_ovrn++;
    c976:	f24b 7357 	movw	r3, #46935	; 0xb757
    c97a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c97e:	781b      	ldrb	r3, [r3, #0]
    c980:	3301      	adds	r3, #1
    c982:	b2da      	uxtb	r2, r3
    c984:	f24b 7357 	movw	r3, #46935	; 0xb757
    c988:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c98c:	701a      	strb	r2, [r3, #0]
      goto error;
    c98e:	e0e8      	b.n	cb62 <parse_ubx+0x2d6>
    }
    ubx_class = c;
    c990:	f24b 7356 	movw	r3, #46934	; 0xb756
    c994:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c998:	79fa      	ldrb	r2, [r7, #7]
    c99a:	701a      	strb	r2, [r3, #0]
    ubx_status++;
    c99c:	f24b 734f 	movw	r3, #46927	; 0xb74f
    c9a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9a4:	781b      	ldrb	r3, [r3, #0]
    c9a6:	3301      	adds	r3, #1
    c9a8:	b2da      	uxtb	r2, r3
    c9aa:	f24b 734f 	movw	r3, #46927	; 0xb74f
    c9ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9b2:	701a      	strb	r2, [r3, #0]
    c9b4:	e0d4      	b.n	cb60 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_CLASS)
    c9b6:	f24b 734f 	movw	r3, #46927	; 0xb74f
    c9ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9be:	781b      	ldrb	r3, [r3, #0]
    c9c0:	2b03      	cmp	r3, #3
    c9c2:	d112      	bne.n	c9ea <parse_ubx+0x15e>
  {
    ubx_id = c;
    c9c4:	f24b 7355 	movw	r3, #46933	; 0xb755
    c9c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9cc:	79fa      	ldrb	r2, [r7, #7]
    c9ce:	701a      	strb	r2, [r3, #0]
    ubx_status++;
    c9d0:	f24b 734f 	movw	r3, #46927	; 0xb74f
    c9d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9d8:	781b      	ldrb	r3, [r3, #0]
    c9da:	3301      	adds	r3, #1
    c9dc:	b2da      	uxtb	r2, r3
    c9de:	f24b 734f 	movw	r3, #46927	; 0xb74f
    c9e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9e6:	701a      	strb	r2, [r3, #0]
    c9e8:	e0ba      	b.n	cb60 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_ID)
    c9ea:	f24b 734f 	movw	r3, #46927	; 0xb74f
    c9ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9f2:	781b      	ldrb	r3, [r3, #0]
    c9f4:	2b04      	cmp	r3, #4
    c9f6:	d113      	bne.n	ca20 <parse_ubx+0x194>
  {
    ubx_len = c;
    c9f8:	79fb      	ldrb	r3, [r7, #7]
    c9fa:	b29a      	uxth	r2, r3
    c9fc:	f24b 7350 	movw	r3, #46928	; 0xb750
    ca00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca04:	801a      	strh	r2, [r3, #0]
    ubx_status++;
    ca06:	f24b 734f 	movw	r3, #46927	; 0xb74f
    ca0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca0e:	781b      	ldrb	r3, [r3, #0]
    ca10:	3301      	adds	r3, #1
    ca12:	b2da      	uxtb	r2, r3
    ca14:	f24b 734f 	movw	r3, #46927	; 0xb74f
    ca18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca1c:	701a      	strb	r2, [r3, #0]
    ca1e:	e09f      	b.n	cb60 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_LEN1)
    ca20:	f24b 734f 	movw	r3, #46927	; 0xb74f
    ca24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca28:	781b      	ldrb	r3, [r3, #0]
    ca2a:	2b05      	cmp	r3, #5
    ca2c:	d12b      	bne.n	ca86 <parse_ubx+0x1fa>
  {
    ubx_len |= (c<<8);
    ca2e:	79fb      	ldrb	r3, [r7, #7]
    ca30:	021b      	lsls	r3, r3, #8
    ca32:	b29a      	uxth	r2, r3
    ca34:	f24b 7350 	movw	r3, #46928	; 0xb750
    ca38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca3c:	881b      	ldrh	r3, [r3, #0]
    ca3e:	b29b      	uxth	r3, r3
    ca40:	4313      	orrs	r3, r2
    ca42:	b29b      	uxth	r3, r3
    ca44:	b29a      	uxth	r2, r3
    ca46:	f24b 7350 	movw	r3, #46928	; 0xb750
    ca4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca4e:	801a      	strh	r2, [r3, #0]
    if (ubx_len > UBX_MAX_PAYLOAD)
    ca50:	f24b 7350 	movw	r3, #46928	; 0xb750
    ca54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca58:	881b      	ldrh	r3, [r3, #0]
    ca5a:	2bff      	cmp	r3, #255	; 0xff
    ca5c:	d900      	bls.n	ca60 <parse_ubx+0x1d4>
      goto error;
    ca5e:	e080      	b.n	cb62 <parse_ubx+0x2d6>
    ubx_msg_idx = 0;
    ca60:	f24b 7352 	movw	r3, #46930	; 0xb752
    ca64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca68:	2200      	movs	r2, #0
    ca6a:	701a      	strb	r2, [r3, #0]
    ubx_status++;
    ca6c:	f24b 734f 	movw	r3, #46927	; 0xb74f
    ca70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca74:	781b      	ldrb	r3, [r3, #0]
    ca76:	3301      	adds	r3, #1
    ca78:	b2da      	uxtb	r2, r3
    ca7a:	f24b 734f 	movw	r3, #46927	; 0xb74f
    ca7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca82:	701a      	strb	r2, [r3, #0]
    ca84:	e06c      	b.n	cb60 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_LEN2)
    ca86:	f24b 734f 	movw	r3, #46927	; 0xb74f
    ca8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca8e:	781b      	ldrb	r3, [r3, #0]
    ca90:	2b06      	cmp	r3, #6
    ca92:	d131      	bne.n	caf8 <parse_ubx+0x26c>
  {
    ubx_msg_buf[ubx_msg_idx] = c;
    ca94:	f24b 7352 	movw	r3, #46930	; 0xb752
    ca98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca9c:	781b      	ldrb	r3, [r3, #0]
    ca9e:	461a      	mov	r2, r3
    caa0:	f24b 6350 	movw	r3, #46672	; 0xb650
    caa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    caa8:	79f9      	ldrb	r1, [r7, #7]
    caaa:	5499      	strb	r1, [r3, r2]
    ubx_msg_idx++;
    caac:	f24b 7352 	movw	r3, #46930	; 0xb752
    cab0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cab4:	781b      	ldrb	r3, [r3, #0]
    cab6:	3301      	adds	r3, #1
    cab8:	b2da      	uxtb	r2, r3
    caba:	f24b 7352 	movw	r3, #46930	; 0xb752
    cabe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cac2:	701a      	strb	r2, [r3, #0]
    if (ubx_msg_idx >= ubx_len) {
    cac4:	f24b 7352 	movw	r3, #46930	; 0xb752
    cac8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cacc:	781b      	ldrb	r3, [r3, #0]
    cace:	461a      	mov	r2, r3
    cad0:	f24b 7350 	movw	r3, #46928	; 0xb750
    cad4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cad8:	881b      	ldrh	r3, [r3, #0]
    cada:	429a      	cmp	r2, r3
    cadc:	d340      	bcc.n	cb60 <parse_ubx+0x2d4>
      ubx_status++;
    cade:	f24b 734f 	movw	r3, #46927	; 0xb74f
    cae2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cae6:	781b      	ldrb	r3, [r3, #0]
    cae8:	3301      	adds	r3, #1
    caea:	b2da      	uxtb	r2, r3
    caec:	f24b 734f 	movw	r3, #46927	; 0xb74f
    caf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    caf4:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
  }
  else {}
//#endif
  return;
    caf6:	e03b      	b.n	cb70 <parse_ubx+0x2e4>
    ubx_msg_idx++;
    if (ubx_msg_idx >= ubx_len) {
      ubx_status++;
    }
  }
  else if (ubx_status == GOT_PAYLOAD)
    caf8:	f24b 734f 	movw	r3, #46927	; 0xb74f
    cafc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb00:	781b      	ldrb	r3, [r3, #0]
    cb02:	2b07      	cmp	r3, #7
    cb04:	d115      	bne.n	cb32 <parse_ubx+0x2a6>
  {
    if (c != ck_a)
    cb06:	f24b 7353 	movw	r3, #46931	; 0xb753
    cb0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb0e:	781b      	ldrb	r3, [r3, #0]
    cb10:	79fa      	ldrb	r2, [r7, #7]
    cb12:	429a      	cmp	r2, r3
    cb14:	d000      	beq.n	cb18 <parse_ubx+0x28c>
      goto error;
    cb16:	e024      	b.n	cb62 <parse_ubx+0x2d6>
    ubx_status++;
    cb18:	f24b 734f 	movw	r3, #46927	; 0xb74f
    cb1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb20:	781b      	ldrb	r3, [r3, #0]
    cb22:	3301      	adds	r3, #1
    cb24:	b2da      	uxtb	r2, r3
    cb26:	f24b 734f 	movw	r3, #46927	; 0xb74f
    cb2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb2e:	701a      	strb	r2, [r3, #0]
    cb30:	e016      	b.n	cb60 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_CHECKSUM1)
    cb32:	f24b 734f 	movw	r3, #46927	; 0xb74f
    cb36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb3a:	781b      	ldrb	r3, [r3, #0]
    cb3c:	2b08      	cmp	r3, #8
    cb3e:	d10f      	bne.n	cb60 <parse_ubx+0x2d4>
  {
    if (c != ck_b)
    cb40:	f24b 7354 	movw	r3, #46932	; 0xb754
    cb44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb48:	781b      	ldrb	r3, [r3, #0]
    cb4a:	79fa      	ldrb	r2, [r7, #7]
    cb4c:	429a      	cmp	r2, r3
    cb4e:	d000      	beq.n	cb52 <parse_ubx+0x2c6>
      goto error;
    cb50:	e007      	b.n	cb62 <parse_ubx+0x2d6>
    gps_msg_received = TRUE;
    cb52:	f24b 634d 	movw	r3, #46669	; 0xb64d
    cb56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb5a:	2201      	movs	r2, #1
    cb5c:	701a      	strb	r2, [r3, #0]
    goto restart;
    cb5e:	e000      	b.n	cb62 <parse_ubx+0x2d6>
  }
  else {}
//#endif
  return;
    cb60:	e006      	b.n	cb70 <parse_ubx+0x2e4>
 error:  
 restart:
  ubx_status = UNINIT;
    cb62:	f24b 734f 	movw	r3, #46927	; 0xb74f
    cb66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb6a:	2200      	movs	r2, #0
    cb6c:	701a      	strb	r2, [r3, #0]
  return;
    cb6e:	bf00      	nop
}
    cb70:	370c      	adds	r7, #12
    cb72:	46bd      	mov	sp, r7
    cb74:	f85d 7b04 	ldr.w	r7, [sp], #4
    cb78:	4770      	bx	lr
    cb7a:	bf00      	nop

0000cb7c <__vector_30>:

#ifdef SIMUL
ReceiveUart0(parse_ubx);
#else
ReceiveUart1(parse_ubx);
    cb7c:	b580      	push	{r7, lr}
    cb7e:	b082      	sub	sp, #8
    cb80:	af00      	add	r7, sp, #0
    cb82:	f248 039c 	movw	r3, #32924	; 0x809c
    cb86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb8a:	781b      	ldrb	r3, [r3, #0]
    cb8c:	71fb      	strb	r3, [r7, #7]
    cb8e:	79fb      	ldrb	r3, [r7, #7]
    cb90:	4618      	mov	r0, r3
    cb92:	f7ff fe7b 	bl	c88c <parse_ubx>
    cb96:	3708      	adds	r7, #8
    cb98:	46bd      	mov	sp, r7
    cb9a:	bd80      	pop	{r7, pc}
    cb9c:	f3af 8000 	nop.w

0000cba0 <ir_init>:
float ir_rad_of_ir = IR_RAD_OF_IR_CONTRAST / IR_DEFAULT_CONTRAST;

static struct adc_buf buf_ir1;
static struct adc_buf buf_ir2;

void ir_init(void) {
    cba0:	b580      	push	{r7, lr}
    cba2:	af00      	add	r7, sp, #0
  RadOfIrFromConstrast(IR_DEFAULT_CONTRAST);
    cba4:	f240 1310 	movw	r3, #272	; 0x110
    cba8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbac:	f24c 228f 	movw	r2, #49807	; 0xc28f
    cbb0:	f6c3 3275 	movt	r2, #15221	; 0x3b75
    cbb4:	601a      	str	r2, [r3, #0]
  adc_buf_channel(ADC_CHANNEL_IR1, &buf_ir1);
    cbb6:	2001      	movs	r0, #1
    cbb8:	f24b 715c 	movw	r1, #46940	; 0xb75c
    cbbc:	f2c2 0104 	movt	r1, #8196	; 0x2004
    cbc0:	f7ff fc6a 	bl	c498 <adc_buf_channel>
  adc_buf_channel(ADC_CHANNEL_IR2, &buf_ir2);
    cbc4:	2002      	movs	r0, #2
    cbc6:	f24b 71a0 	movw	r1, #47008	; 0xb7a0
    cbca:	f2c2 0104 	movt	r1, #8196	; 0x2004
    cbce:	f7ff fc63 	bl	c498 <adc_buf_channel>
}
    cbd2:	bd80      	pop	{r7, pc}

0000cbd4 <ir_update>:
int16_t x1 = 1;
int16_t x2 = 2;
*/
// end

void ir_update(void) {
    cbd4:	b480      	push	{r7}
    cbd6:	b083      	sub	sp, #12
    cbd8:	af00      	add	r7, sp, #0
#ifndef SIMUL
  int16_t x1_mean = buf_ir1.sum/AV_NB_SAMPLE;
    cbda:	f24b 735c 	movw	r3, #46940	; 0xb75c
    cbde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbe2:	881b      	ldrh	r3, [r3, #0]
    cbe4:	095b      	lsrs	r3, r3, #5
    cbe6:	b29b      	uxth	r3, r3
    cbe8:	80fb      	strh	r3, [r7, #6]
  int16_t x2_mean = buf_ir2.sum/AV_NB_SAMPLE;
    cbea:	f24b 73a0 	movw	r3, #47008	; 0xb7a0
    cbee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbf2:	881b      	ldrh	r3, [r3, #0]
    cbf4:	095b      	lsrs	r3, r3, #5
    cbf6:	b29b      	uxth	r3, r3
    cbf8:	80bb      	strh	r3, [r7, #4]
    if( x1 < -900 ) x1 = x2 % x1;
    x2_mean = x2 ++;
    if( x2 > 110 ) x2 = x1 % x2;
    */
    // end
  ir_roll = IR_RollOfIrs(x1_mean, x2_mean) - ir_roll_neutral;
    cbfa:	88fb      	ldrh	r3, [r7, #6]
    cbfc:	425b      	negs	r3, r3
    cbfe:	b29a      	uxth	r2, r3
    cc00:	88bb      	ldrh	r3, [r7, #4]
    cc02:	1ad3      	subs	r3, r2, r3
    cc04:	b29a      	uxth	r2, r3
    cc06:	f240 130a 	movw	r3, #266	; 0x10a
    cc0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc0e:	881b      	ldrh	r3, [r3, #0]
    cc10:	b29b      	uxth	r3, r3
    cc12:	1ad3      	subs	r3, r2, r3
    cc14:	b29b      	uxth	r3, r3
    cc16:	b29a      	uxth	r2, r3
    cc18:	f24b 7358 	movw	r3, #46936	; 0xb758
    cc1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc20:	801a      	strh	r2, [r3, #0]
  ir_pitch = IR_PitchOfIrs(x1_mean, x2_mean) - ir_pitch_neutral;
    cc22:	88ba      	ldrh	r2, [r7, #4]
    cc24:	88fb      	ldrh	r3, [r7, #6]
    cc26:	1ad3      	subs	r3, r2, r3
    cc28:	b29a      	uxth	r2, r3
    cc2a:	f240 130c 	movw	r3, #268	; 0x10c
    cc2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc32:	881b      	ldrh	r3, [r3, #0]
    cc34:	b29b      	uxth	r3, r3
    cc36:	1ad3      	subs	r3, r2, r3
    cc38:	b29b      	uxth	r3, r3
    cc3a:	b29a      	uxth	r2, r3
    cc3c:	f24b 735a 	movw	r3, #46938	; 0xb75a
    cc40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc44:	801a      	strh	r2, [r3, #0]
#else
  extern volatile int16_t simul_ir_roll, simul_ir_pitch;
  ir_roll = simul_ir_roll -  ir_roll_neutral; 
  ir_pitch = simul_ir_pitch - ir_pitch_neutral;  
#endif
}
    cc46:	370c      	adds	r7, #12
    cc48:	46bd      	mov	sp, r7
    cc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    cc4e:	4770      	bx	lr

0000cc50 <ir_gain_calib>:

/* 
   Contrast measurement
*/

void ir_gain_calib(void) {      // Plane nose down
    cc50:	b580      	push	{r7, lr}
    cc52:	af00      	add	r7, sp, #0
  /* plane nose down -> negativ value */
  ir_contrast = - ir_pitch;
    cc54:	f24b 735a 	movw	r3, #46938	; 0xb75a
    cc58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc5c:	881b      	ldrh	r3, [r3, #0]
    cc5e:	b29b      	uxth	r3, r3
    cc60:	425b      	negs	r3, r3
    cc62:	b29b      	uxth	r3, r3
    cc64:	b29a      	uxth	r2, r3
    cc66:	f240 1308 	movw	r3, #264	; 0x108
    cc6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc6e:	801a      	strh	r2, [r3, #0]
  RadOfIrFromConstrast(ir_contrast);
    cc70:	f240 1308 	movw	r3, #264	; 0x108
    cc74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc78:	881b      	ldrh	r3, [r3, #0]
    cc7a:	b21b      	sxth	r3, r3
    cc7c:	4618      	mov	r0, r3
    cc7e:	f005 fe89 	bl	12994 <__aeabi_i2d>
    cc82:	4602      	mov	r2, r0
    cc84:	460b      	mov	r3, r1
    cc86:	f04f 0000 	mov.w	r0, #0
    cc8a:	f04f 0100 	mov.w	r1, #0
    cc8e:	f6c3 71e8 	movt	r1, #16360	; 0x3fe8
    cc92:	f006 f80f 	bl	12cb4 <__aeabi_ddiv>
    cc96:	4602      	mov	r2, r0
    cc98:	460b      	mov	r3, r1
    cc9a:	4610      	mov	r0, r2
    cc9c:	4619      	mov	r1, r3
    cc9e:	f006 f9c1 	bl	13024 <__aeabi_d2f>
    cca2:	4602      	mov	r2, r0
    cca4:	f240 1310 	movw	r3, #272	; 0x110
    cca8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ccac:	601a      	str	r2, [r3, #0]
}
    ccae:	bd80      	pop	{r7, pc}

0000ccb0 <roll_pitch_pid_run>:
float pitch_of_vz_pgain = CLIMB_PITCH_OF_VZ_PGAIN;
float pitch_of_vz = 0.;


/** \brief Computes ::desired_aileron and ::desired_elevator from attitude estimation and expected attitude. */
void roll_pitch_pid_run( void ) {
    ccb0:	b590      	push	{r4, r7, lr}
    ccb2:	b083      	sub	sp, #12
    ccb4:	af00      	add	r7, sp, #0
  float err =  estimator_phi - desired_roll;
    ccb6:	f64b 2378 	movw	r3, #47736	; 0xba78
    ccba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccbe:	681a      	ldr	r2, [r3, #0]
    ccc0:	f24b 73e4 	movw	r3, #47076	; 0xb7e4
    ccc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccc8:	681b      	ldr	r3, [r3, #0]
    ccca:	4610      	mov	r0, r2
    cccc:	4619      	mov	r1, r3
    ccce:	f006 f9fd 	bl	130cc <__aeabi_fsub>
    ccd2:	4603      	mov	r3, r0
    ccd4:	607b      	str	r3, [r7, #4]
  desired_aileron = TRIM_PPRZ(roll_pgain * err);
    ccd6:	f240 1314 	movw	r3, #276	; 0x114
    ccda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ccde:	681b      	ldr	r3, [r3, #0]
    cce0:	4618      	mov	r0, r3
    cce2:	6879      	ldr	r1, [r7, #4]
    cce4:	f006 fafc 	bl	132e0 <__aeabi_fmul>
    cce8:	4603      	mov	r3, r0
    ccea:	4618      	mov	r0, r3
    ccec:	f04f 0100 	mov.w	r1, #0
    ccf0:	f2cc 6116 	movt	r1, #50710	; 0xc616
    ccf4:	f006 fc92 	bl	1361c <__aeabi_fcmplt>
    ccf8:	4603      	mov	r3, r0
    ccfa:	2b00      	cmp	r3, #0
    ccfc:	d002      	beq.n	cd04 <roll_pitch_pid_run+0x54>
    ccfe:	f64d 2280 	movw	r2, #55936	; 0xda80
    cd02:	e026      	b.n	cd52 <roll_pitch_pid_run+0xa2>
    cd04:	f240 1314 	movw	r3, #276	; 0x114
    cd08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd0c:	681b      	ldr	r3, [r3, #0]
    cd0e:	4618      	mov	r0, r3
    cd10:	6879      	ldr	r1, [r7, #4]
    cd12:	f006 fae5 	bl	132e0 <__aeabi_fmul>
    cd16:	4603      	mov	r3, r0
    cd18:	4618      	mov	r0, r3
    cd1a:	f04f 0100 	mov.w	r1, #0
    cd1e:	f2c4 6116 	movt	r1, #17942	; 0x4616
    cd22:	f006 fc99 	bl	13658 <__aeabi_fcmpgt>
    cd26:	4603      	mov	r3, r0
    cd28:	2b00      	cmp	r3, #0
    cd2a:	d002      	beq.n	cd32 <roll_pitch_pid_run+0x82>
    cd2c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    cd30:	e00e      	b.n	cd50 <roll_pitch_pid_run+0xa0>
    cd32:	f240 1314 	movw	r3, #276	; 0x114
    cd36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd3a:	681b      	ldr	r3, [r3, #0]
    cd3c:	4618      	mov	r0, r3
    cd3e:	6879      	ldr	r1, [r7, #4]
    cd40:	f006 face 	bl	132e0 <__aeabi_fmul>
    cd44:	4603      	mov	r3, r0
    cd46:	4618      	mov	r0, r3
    cd48:	f006 fc90 	bl	1366c <__aeabi_f2iz>
    cd4c:	4603      	mov	r3, r0
    cd4e:	b29b      	uxth	r3, r3
    cd50:	b29a      	uxth	r2, r3
    cd52:	f24b 73ee 	movw	r3, #47086	; 0xb7ee
    cd56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd5a:	801a      	strh	r2, [r3, #0]
  if (pitch_of_roll <0.)
    cd5c:	f24b 73f4 	movw	r3, #47092	; 0xb7f4
    cd60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd64:	681b      	ldr	r3, [r3, #0]
    cd66:	4618      	mov	r0, r3
    cd68:	f04f 0100 	mov.w	r1, #0
    cd6c:	f006 fc56 	bl	1361c <__aeabi_fcmplt>
    cd70:	4603      	mov	r3, r0
    cd72:	2b00      	cmp	r3, #0
    cd74:	d006      	beq.n	cd84 <roll_pitch_pid_run+0xd4>
    pitch_of_roll = 0.;
    cd76:	f24b 73f4 	movw	r3, #47092	; 0xb7f4
    cd7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd7e:	f04f 0200 	mov.w	r2, #0
    cd82:	601a      	str	r2, [r3, #0]
  err = -(estimator_theta - desired_pitch - pitch_of_roll * fabs(estimator_phi));
    cd84:	f64b 2380 	movw	r3, #47744	; 0xba80
    cd88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd8c:	681a      	ldr	r2, [r3, #0]
    cd8e:	f24b 73e8 	movw	r3, #47080	; 0xb7e8
    cd92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd96:	681b      	ldr	r3, [r3, #0]
    cd98:	4610      	mov	r0, r2
    cd9a:	4619      	mov	r1, r3
    cd9c:	f006 f996 	bl	130cc <__aeabi_fsub>
    cda0:	4603      	mov	r3, r0
    cda2:	461c      	mov	r4, r3
    cda4:	f64b 2378 	movw	r3, #47736	; 0xba78
    cda8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdac:	681b      	ldr	r3, [r3, #0]
    cdae:	4618      	mov	r0, r3
    cdb0:	f04f 0100 	mov.w	r1, #0
    cdb4:	f006 fc32 	bl	1361c <__aeabi_fcmplt>
    cdb8:	4603      	mov	r3, r0
    cdba:	2b00      	cmp	r3, #0
    cdbc:	d007      	beq.n	cdce <roll_pitch_pid_run+0x11e>
    cdbe:	f64b 2378 	movw	r3, #47736	; 0xba78
    cdc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdc6:	681b      	ldr	r3, [r3, #0]
    cdc8:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
    cdcc:	e004      	b.n	cdd8 <roll_pitch_pid_run+0x128>
    cdce:	f64b 2378 	movw	r3, #47736	; 0xba78
    cdd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdd6:	681a      	ldr	r2, [r3, #0]
    cdd8:	f24b 73f4 	movw	r3, #47092	; 0xb7f4
    cddc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cde0:	681b      	ldr	r3, [r3, #0]
    cde2:	4610      	mov	r0, r2
    cde4:	4619      	mov	r1, r3
    cde6:	f006 fa7b 	bl	132e0 <__aeabi_fmul>
    cdea:	4603      	mov	r3, r0
    cdec:	4620      	mov	r0, r4
    cdee:	4619      	mov	r1, r3
    cdf0:	f006 f96c 	bl	130cc <__aeabi_fsub>
    cdf4:	4603      	mov	r3, r0
    cdf6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    cdfa:	607b      	str	r3, [r7, #4]
  desired_elevator = TRIM_PPRZ(pitch_pgain * err);
    cdfc:	f240 1318 	movw	r3, #280	; 0x118
    ce00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce04:	681b      	ldr	r3, [r3, #0]
    ce06:	4618      	mov	r0, r3
    ce08:	6879      	ldr	r1, [r7, #4]
    ce0a:	f006 fa69 	bl	132e0 <__aeabi_fmul>
    ce0e:	4603      	mov	r3, r0
    ce10:	4618      	mov	r0, r3
    ce12:	f04f 0100 	mov.w	r1, #0
    ce16:	f2cc 6116 	movt	r1, #50710	; 0xc616
    ce1a:	f006 fbff 	bl	1361c <__aeabi_fcmplt>
    ce1e:	4603      	mov	r3, r0
    ce20:	2b00      	cmp	r3, #0
    ce22:	d002      	beq.n	ce2a <roll_pitch_pid_run+0x17a>
    ce24:	f64d 2280 	movw	r2, #55936	; 0xda80
    ce28:	e026      	b.n	ce78 <roll_pitch_pid_run+0x1c8>
    ce2a:	f240 1318 	movw	r3, #280	; 0x118
    ce2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce32:	681b      	ldr	r3, [r3, #0]
    ce34:	4618      	mov	r0, r3
    ce36:	6879      	ldr	r1, [r7, #4]
    ce38:	f006 fa52 	bl	132e0 <__aeabi_fmul>
    ce3c:	4603      	mov	r3, r0
    ce3e:	4618      	mov	r0, r3
    ce40:	f04f 0100 	mov.w	r1, #0
    ce44:	f2c4 6116 	movt	r1, #17942	; 0x4616
    ce48:	f006 fc06 	bl	13658 <__aeabi_fcmpgt>
    ce4c:	4603      	mov	r3, r0
    ce4e:	2b00      	cmp	r3, #0
    ce50:	d002      	beq.n	ce58 <roll_pitch_pid_run+0x1a8>
    ce52:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    ce56:	e00e      	b.n	ce76 <roll_pitch_pid_run+0x1c6>
    ce58:	f240 1318 	movw	r3, #280	; 0x118
    ce5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce60:	681b      	ldr	r3, [r3, #0]
    ce62:	4618      	mov	r0, r3
    ce64:	6879      	ldr	r1, [r7, #4]
    ce66:	f006 fa3b 	bl	132e0 <__aeabi_fmul>
    ce6a:	4603      	mov	r3, r0
    ce6c:	4618      	mov	r0, r3
    ce6e:	f006 fbfd 	bl	1366c <__aeabi_f2iz>
    ce72:	4603      	mov	r3, r0
    ce74:	b29b      	uxth	r3, r3
    ce76:	b29a      	uxth	r2, r3
    ce78:	f24b 73f0 	movw	r3, #47088	; 0xb7f0
    ce7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce80:	801a      	strh	r2, [r3, #0]
}
    ce82:	370c      	adds	r7, #12
    ce84:	46bd      	mov	sp, r7
    ce86:	bd90      	pop	{r4, r7, pc}

0000ce88 <course_pid_run>:

float course_pgain = COURSE_PGAIN;
float desired_course = 0.;
float max_roll = MAX_ROLL;

void course_pid_run( void ) {
    ce88:	b580      	push	{r7, lr}
    ce8a:	b082      	sub	sp, #8
    ce8c:	af00      	add	r7, sp, #0
  float err = estimator_hspeed_dir - desired_course;
    ce8e:	f64b 23a8 	movw	r3, #47784	; 0xbaa8
    ce92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce96:	681a      	ldr	r2, [r3, #0]
    ce98:	f24b 73fc 	movw	r3, #47100	; 0xb7fc
    ce9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cea0:	681b      	ldr	r3, [r3, #0]
    cea2:	4610      	mov	r0, r2
    cea4:	4619      	mov	r1, r3
    cea6:	f006 f911 	bl	130cc <__aeabi_fsub>
    ceaa:	4603      	mov	r3, r0
    ceac:	607b      	str	r3, [r7, #4]
  NORM_RAD_ANGLE(err);
    ceae:	e013      	b.n	ced8 <course_pid_run+0x50>
    ceb0:	6878      	ldr	r0, [r7, #4]
    ceb2:	f005 fd81 	bl	129b8 <__aeabi_f2d>
    ceb6:	4602      	mov	r2, r0
    ceb8:	460b      	mov	r3, r1
    ceba:	4610      	mov	r0, r2
    cebc:	4619      	mov	r1, r3
    cebe:	a348      	add	r3, pc, #288	; (adr r3, cfe0 <course_pid_run+0x158>)
    cec0:	e9d3 2300 	ldrd	r2, r3, [r3]
    cec4:	f005 fc18 	bl	126f8 <__aeabi_dsub>
    cec8:	4602      	mov	r2, r0
    ceca:	460b      	mov	r3, r1
    cecc:	4610      	mov	r0, r2
    cece:	4619      	mov	r1, r3
    ced0:	f006 f8a8 	bl	13024 <__aeabi_d2f>
    ced4:	4603      	mov	r3, r0
    ced6:	607b      	str	r3, [r7, #4]
    ced8:	6878      	ldr	r0, [r7, #4]
    ceda:	f005 fd6d 	bl	129b8 <__aeabi_f2d>
    cede:	4602      	mov	r2, r0
    cee0:	460b      	mov	r3, r1
    cee2:	4610      	mov	r0, r2
    cee4:	4619      	mov	r1, r3
    cee6:	a340      	add	r3, pc, #256	; (adr r3, cfe8 <course_pid_run+0x160>)
    cee8:	e9d3 2300 	ldrd	r2, r3, [r3]
    ceec:	f006 f848 	bl	12f80 <__aeabi_dcmpgt>
    cef0:	4603      	mov	r3, r0
    cef2:	2b00      	cmp	r3, #0
    cef4:	d1dc      	bne.n	ceb0 <course_pid_run+0x28>
    cef6:	e013      	b.n	cf20 <course_pid_run+0x98>
    cef8:	6878      	ldr	r0, [r7, #4]
    cefa:	f005 fd5d 	bl	129b8 <__aeabi_f2d>
    cefe:	4602      	mov	r2, r0
    cf00:	460b      	mov	r3, r1
    cf02:	4610      	mov	r0, r2
    cf04:	4619      	mov	r1, r3
    cf06:	a336      	add	r3, pc, #216	; (adr r3, cfe0 <course_pid_run+0x158>)
    cf08:	e9d3 2300 	ldrd	r2, r3, [r3]
    cf0c:	f005 fbf6 	bl	126fc <__adddf3>
    cf10:	4602      	mov	r2, r0
    cf12:	460b      	mov	r3, r1
    cf14:	4610      	mov	r0, r2
    cf16:	4619      	mov	r1, r3
    cf18:	f006 f884 	bl	13024 <__aeabi_d2f>
    cf1c:	4603      	mov	r3, r0
    cf1e:	607b      	str	r3, [r7, #4]
    cf20:	6878      	ldr	r0, [r7, #4]
    cf22:	f005 fd49 	bl	129b8 <__aeabi_f2d>
    cf26:	4602      	mov	r2, r0
    cf28:	460b      	mov	r3, r1
    cf2a:	4610      	mov	r0, r2
    cf2c:	4619      	mov	r1, r3
    cf2e:	a330      	add	r3, pc, #192	; (adr r3, cff0 <course_pid_run+0x168>)
    cf30:	e9d3 2300 	ldrd	r2, r3, [r3]
    cf34:	f006 f806 	bl	12f44 <__aeabi_dcmplt>
    cf38:	4603      	mov	r3, r0
    cf3a:	2b00      	cmp	r3, #0
    cf3c:	d1dc      	bne.n	cef8 <course_pid_run+0x70>
  nav_desired_roll = course_pgain * err; //  * fspeed / AIR_SPEED;
    cf3e:	f240 1320 	movw	r3, #288	; 0x120
    cf42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf46:	681b      	ldr	r3, [r3, #0]
    cf48:	4618      	mov	r0, r3
    cf4a:	6879      	ldr	r1, [r7, #4]
    cf4c:	f006 f9c8 	bl	132e0 <__aeabi_fmul>
    cf50:	4603      	mov	r3, r0
    cf52:	461a      	mov	r2, r3
    cf54:	f64b 0340 	movw	r3, #47168	; 0xb840
    cf58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf5c:	601a      	str	r2, [r3, #0]
  if (nav_desired_roll > max_roll)
    cf5e:	f64b 0340 	movw	r3, #47168	; 0xb840
    cf62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf66:	681a      	ldr	r2, [r3, #0]
    cf68:	f240 1324 	movw	r3, #292	; 0x124
    cf6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf70:	681b      	ldr	r3, [r3, #0]
    cf72:	4610      	mov	r0, r2
    cf74:	4619      	mov	r1, r3
    cf76:	f006 fb6f 	bl	13658 <__aeabi_fcmpgt>
    cf7a:	4603      	mov	r3, r0
    cf7c:	2b00      	cmp	r3, #0
    cf7e:	d00a      	beq.n	cf96 <course_pid_run+0x10e>
    nav_desired_roll = max_roll;
    cf80:	f240 1324 	movw	r3, #292	; 0x124
    cf84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf88:	681a      	ldr	r2, [r3, #0]
    cf8a:	f64b 0340 	movw	r3, #47168	; 0xb840
    cf8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf92:	601a      	str	r2, [r3, #0]
    cf94:	e01e      	b.n	cfd4 <course_pid_run+0x14c>
  else if (nav_desired_roll < -max_roll)
    cf96:	f240 1324 	movw	r3, #292	; 0x124
    cf9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf9e:	681b      	ldr	r3, [r3, #0]
    cfa0:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
    cfa4:	f64b 0340 	movw	r3, #47168	; 0xb840
    cfa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfac:	681b      	ldr	r3, [r3, #0]
    cfae:	4610      	mov	r0, r2
    cfb0:	4619      	mov	r1, r3
    cfb2:	f006 fb51 	bl	13658 <__aeabi_fcmpgt>
    cfb6:	4603      	mov	r3, r0
    cfb8:	2b00      	cmp	r3, #0
    cfba:	d00b      	beq.n	cfd4 <course_pid_run+0x14c>
    nav_desired_roll = -max_roll;
    cfbc:	f240 1324 	movw	r3, #292	; 0x124
    cfc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfc4:	681b      	ldr	r3, [r3, #0]
    cfc6:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
    cfca:	f64b 0340 	movw	r3, #47168	; 0xb840
    cfce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfd2:	601a      	str	r2, [r3, #0]
}
    cfd4:	3708      	adds	r7, #8
    cfd6:	46bd      	mov	sp, r7
    cfd8:	bd80      	pop	{r7, pc}
    cfda:	bf00      	nop
    cfdc:	f3af 8000 	nop.w
    cfe0:	54442d18 	.word	0x54442d18
    cfe4:	401921fb 	.word	0x401921fb
    cfe8:	54442d18 	.word	0x54442d18
    cfec:	400921fb 	.word	0x400921fb
    cff0:	54442d18 	.word	0x54442d18
    cff4:	c00921fb 	.word	0xc00921fb

0000cff8 <climb_pid_run>:

#define MAX_CLIMB_SUM_ERR 100
#define MAX_PITCH_CLIMB_SUM_ERR 100

/** \brief Computes desired_gaz and desired_pitch from desired_climb */
void climb_pid_run ( void ) {
    cff8:	b5b0      	push	{r4, r5, r7, lr}
    cffa:	b082      	sub	sp, #8
    cffc:	af00      	add	r7, sp, #0
  float err  = estimator_z_dot - desired_climb;
    cffe:	f64b 238c 	movw	r3, #47756	; 0xba8c
    d002:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d006:	681a      	ldr	r2, [r3, #0]
    d008:	f64b 0300 	movw	r3, #47104	; 0xb800
    d00c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d010:	681b      	ldr	r3, [r3, #0]
    d012:	4610      	mov	r0, r2
    d014:	4619      	mov	r1, r3
    d016:	f006 f859 	bl	130cc <__aeabi_fsub>
    d01a:	4603      	mov	r3, r0
    d01c:	607b      	str	r3, [r7, #4]
  float fgaz;
  if (auto_pitch) { /* gaz constant */
    d01e:	f24b 439f 	movw	r3, #46239	; 0xb49f
    d022:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d026:	781b      	ldrb	r3, [r3, #0]
    d028:	2b00      	cmp	r3, #0
    d02a:	f000 80a8 	beq.w	d17e <climb_pid_run+0x186>
    desired_gaz = nav_desired_gaz;
    d02e:	f64b 0338 	movw	r3, #47160	; 0xb838
    d032:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d036:	881b      	ldrh	r3, [r3, #0]
    d038:	b29a      	uxth	r2, r3
    d03a:	f24b 73ec 	movw	r3, #47084	; 0xb7ec
    d03e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d042:	801a      	strh	r2, [r3, #0]
    desired_pitch = climb_pitch_pgain * (err + climb_pitch_igain * climb_pitch_sum_err);
    d044:	f240 132c 	movw	r3, #300	; 0x12c
    d048:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d04c:	681a      	ldr	r2, [r3, #0]
    d04e:	f64b 030c 	movw	r3, #47116	; 0xb80c
    d052:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d056:	681b      	ldr	r3, [r3, #0]
    d058:	4610      	mov	r0, r2
    d05a:	4619      	mov	r1, r3
    d05c:	f006 f940 	bl	132e0 <__aeabi_fmul>
    d060:	4603      	mov	r3, r0
    d062:	4618      	mov	r0, r3
    d064:	6879      	ldr	r1, [r7, #4]
    d066:	f006 f833 	bl	130d0 <__addsf3>
    d06a:	4603      	mov	r3, r0
    d06c:	461a      	mov	r2, r3
    d06e:	f240 1328 	movw	r3, #296	; 0x128
    d072:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d076:	681b      	ldr	r3, [r3, #0]
    d078:	4610      	mov	r0, r2
    d07a:	4619      	mov	r1, r3
    d07c:	f006 f930 	bl	132e0 <__aeabi_fmul>
    d080:	4603      	mov	r3, r0
    d082:	461a      	mov	r2, r3
    d084:	f24b 73e8 	movw	r3, #47080	; 0xb7e8
    d088:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d08c:	601a      	str	r2, [r3, #0]
    if (desired_pitch > max_pitch)
    d08e:	f24b 73e8 	movw	r3, #47080	; 0xb7e8
    d092:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d096:	681a      	ldr	r2, [r3, #0]
    d098:	f240 1330 	movw	r3, #304	; 0x130
    d09c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0a0:	681b      	ldr	r3, [r3, #0]
    d0a2:	4610      	mov	r0, r2
    d0a4:	4619      	mov	r1, r3
    d0a6:	f006 fad7 	bl	13658 <__aeabi_fcmpgt>
    d0aa:	4603      	mov	r3, r0
    d0ac:	2b00      	cmp	r3, #0
    d0ae:	d009      	beq.n	d0c4 <climb_pid_run+0xcc>
      desired_pitch = max_pitch;
    d0b0:	f240 1330 	movw	r3, #304	; 0x130
    d0b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0b8:	681a      	ldr	r2, [r3, #0]
    d0ba:	f24b 73e8 	movw	r3, #47080	; 0xb7e8
    d0be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0c2:	601a      	str	r2, [r3, #0]
    if (desired_pitch < min_pitch)
    d0c4:	f24b 73e8 	movw	r3, #47080	; 0xb7e8
    d0c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0cc:	681a      	ldr	r2, [r3, #0]
    d0ce:	f240 1334 	movw	r3, #308	; 0x134
    d0d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0d6:	681b      	ldr	r3, [r3, #0]
    d0d8:	4610      	mov	r0, r2
    d0da:	4619      	mov	r1, r3
    d0dc:	f006 fa9e 	bl	1361c <__aeabi_fcmplt>
    d0e0:	4603      	mov	r3, r0
    d0e2:	2b00      	cmp	r3, #0
    d0e4:	d009      	beq.n	d0fa <climb_pid_run+0x102>
      desired_pitch = min_pitch;
    d0e6:	f240 1334 	movw	r3, #308	; 0x134
    d0ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0ee:	681a      	ldr	r2, [r3, #0]
    d0f0:	f24b 73e8 	movw	r3, #47080	; 0xb7e8
    d0f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0f8:	601a      	str	r2, [r3, #0]
    climb_pitch_sum_err += err;
    d0fa:	f64b 030c 	movw	r3, #47116	; 0xb80c
    d0fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d102:	681b      	ldr	r3, [r3, #0]
    d104:	4618      	mov	r0, r3
    d106:	6879      	ldr	r1, [r7, #4]
    d108:	f005 ffe2 	bl	130d0 <__addsf3>
    d10c:	4603      	mov	r3, r0
    d10e:	461a      	mov	r2, r3
    d110:	f64b 030c 	movw	r3, #47116	; 0xb80c
    d114:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d118:	601a      	str	r2, [r3, #0]
    if (climb_pitch_sum_err > MAX_PITCH_CLIMB_SUM_ERR)
    d11a:	f64b 030c 	movw	r3, #47116	; 0xb80c
    d11e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d122:	681b      	ldr	r3, [r3, #0]
    d124:	4618      	mov	r0, r3
    d126:	f04f 0100 	mov.w	r1, #0
    d12a:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
    d12e:	f006 fa93 	bl	13658 <__aeabi_fcmpgt>
    d132:	4603      	mov	r3, r0
    d134:	2b00      	cmp	r3, #0
    d136:	d008      	beq.n	d14a <climb_pid_run+0x152>
      climb_pitch_sum_err = MAX_PITCH_CLIMB_SUM_ERR;
    d138:	f64b 030c 	movw	r3, #47116	; 0xb80c
    d13c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d140:	f04f 0200 	mov.w	r2, #0
    d144:	f2c4 22c8 	movt	r2, #17096	; 0x42c8
    d148:	601a      	str	r2, [r3, #0]
    if (climb_pitch_sum_err < - MAX_PITCH_CLIMB_SUM_ERR)
    d14a:	f64b 030c 	movw	r3, #47116	; 0xb80c
    d14e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d152:	681b      	ldr	r3, [r3, #0]
    d154:	4618      	mov	r0, r3
    d156:	f04f 0100 	mov.w	r1, #0
    d15a:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
    d15e:	f006 fa5d 	bl	1361c <__aeabi_fcmplt>
    d162:	4603      	mov	r3, r0
    d164:	2b00      	cmp	r3, #0
    d166:	d100      	bne.n	d16a <climb_pid_run+0x172>
    d168:	e109      	b.n	d37e <climb_pid_run+0x386>
      climb_pitch_sum_err = - MAX_PITCH_CLIMB_SUM_ERR; 
    d16a:	f64b 030c 	movw	r3, #47116	; 0xb80c
    d16e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d172:	f04f 0200 	mov.w	r2, #0
    d176:	f2cc 22c8 	movt	r2, #49864	; 0xc2c8
    d17a:	601a      	str	r2, [r3, #0]
    d17c:	e0ff      	b.n	d37e <climb_pid_run+0x386>
  } else { /* pitch almost constant */
    /* pitch offset for climb */
    pitch_of_vz = (desired_climb > 0) ? desired_climb * pitch_of_vz_pgain : 0.;
    d17e:	f64b 0300 	movw	r3, #47104	; 0xb800
    d182:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d186:	681b      	ldr	r3, [r3, #0]
    d188:	4618      	mov	r0, r3
    d18a:	f04f 0100 	mov.w	r1, #0
    d18e:	f006 fa63 	bl	13658 <__aeabi_fcmpgt>
    d192:	4603      	mov	r3, r0
    d194:	2b00      	cmp	r3, #0
    d196:	d010      	beq.n	d1ba <climb_pid_run+0x1c2>
    d198:	f64b 0300 	movw	r3, #47104	; 0xb800
    d19c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1a0:	681a      	ldr	r2, [r3, #0]
    d1a2:	f240 131c 	movw	r3, #284	; 0x11c
    d1a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1aa:	681b      	ldr	r3, [r3, #0]
    d1ac:	4610      	mov	r0, r2
    d1ae:	4619      	mov	r1, r3
    d1b0:	f006 f896 	bl	132e0 <__aeabi_fmul>
    d1b4:	4603      	mov	r3, r0
    d1b6:	461a      	mov	r2, r3
    d1b8:	e001      	b.n	d1be <climb_pid_run+0x1c6>
    d1ba:	f04f 0200 	mov.w	r2, #0
    d1be:	f24b 73f8 	movw	r3, #47096	; 0xb7f8
    d1c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1c6:	601a      	str	r2, [r3, #0]
    fgaz = climb_pgain * (err + climb_igain * climb_sum_err) + CLIMB_LEVEL_GAZ + CLIMB_GAZ_OF_CLIMB*desired_climb;
    d1c8:	f64c 42cd 	movw	r2, #52429	; 0xcccd
    d1cc:	f6c3 52cc 	movt	r2, #15820	; 0x3dcc
    d1d0:	f64b 0308 	movw	r3, #47112	; 0xb808
    d1d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1d8:	681b      	ldr	r3, [r3, #0]
    d1da:	4610      	mov	r0, r2
    d1dc:	4619      	mov	r1, r3
    d1de:	f006 f87f 	bl	132e0 <__aeabi_fmul>
    d1e2:	4603      	mov	r3, r0
    d1e4:	4618      	mov	r0, r3
    d1e6:	6879      	ldr	r1, [r7, #4]
    d1e8:	f005 ff72 	bl	130d0 <__addsf3>
    d1ec:	4603      	mov	r3, r0
    d1ee:	461a      	mov	r2, r3
    d1f0:	f24c 238f 	movw	r3, #49807	; 0xc28f
    d1f4:	f6cb 43f5 	movt	r3, #48373	; 0xbcf5
    d1f8:	4610      	mov	r0, r2
    d1fa:	4619      	mov	r1, r3
    d1fc:	f006 f870 	bl	132e0 <__aeabi_fmul>
    d200:	4603      	mov	r3, r0
    d202:	4618      	mov	r0, r3
    d204:	f005 fbd8 	bl	129b8 <__aeabi_f2d>
    d208:	4602      	mov	r2, r0
    d20a:	460b      	mov	r3, r1
    d20c:	4610      	mov	r0, r2
    d20e:	4619      	mov	r1, r3
    d210:	a35d      	add	r3, pc, #372	; (adr r3, d388 <climb_pid_run+0x390>)
    d212:	e9d3 2300 	ldrd	r2, r3, [r3]
    d216:	f005 fa71 	bl	126fc <__adddf3>
    d21a:	4602      	mov	r2, r0
    d21c:	460b      	mov	r3, r1
    d21e:	4614      	mov	r4, r2
    d220:	461d      	mov	r5, r3
    d222:	f64b 0300 	movw	r3, #47104	; 0xb800
    d226:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d22a:	681b      	ldr	r3, [r3, #0]
    d22c:	4618      	mov	r0, r3
    d22e:	f005 fbc3 	bl	129b8 <__aeabi_f2d>
    d232:	4602      	mov	r2, r0
    d234:	460b      	mov	r3, r1
    d236:	4610      	mov	r0, r2
    d238:	4619      	mov	r1, r3
    d23a:	a355      	add	r3, pc, #340	; (adr r3, d390 <climb_pid_run+0x398>)
    d23c:	e9d3 2300 	ldrd	r2, r3, [r3]
    d240:	f005 fc0e 	bl	12a60 <__aeabi_dmul>
    d244:	4602      	mov	r2, r0
    d246:	460b      	mov	r3, r1
    d248:	4620      	mov	r0, r4
    d24a:	4629      	mov	r1, r5
    d24c:	f005 fa56 	bl	126fc <__adddf3>
    d250:	4602      	mov	r2, r0
    d252:	460b      	mov	r3, r1
    d254:	4610      	mov	r0, r2
    d256:	4619      	mov	r1, r3
    d258:	f005 fee4 	bl	13024 <__aeabi_d2f>
    d25c:	4603      	mov	r3, r0
    d25e:	603b      	str	r3, [r7, #0]
    climb_sum_err += err;
    d260:	f64b 0308 	movw	r3, #47112	; 0xb808
    d264:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d268:	681b      	ldr	r3, [r3, #0]
    d26a:	4618      	mov	r0, r3
    d26c:	6879      	ldr	r1, [r7, #4]
    d26e:	f005 ff2f 	bl	130d0 <__addsf3>
    d272:	4603      	mov	r3, r0
    d274:	461a      	mov	r2, r3
    d276:	f64b 0308 	movw	r3, #47112	; 0xb808
    d27a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d27e:	601a      	str	r2, [r3, #0]
    if (climb_sum_err > MAX_CLIMB_SUM_ERR) climb_sum_err = MAX_CLIMB_SUM_ERR;
    d280:	f64b 0308 	movw	r3, #47112	; 0xb808
    d284:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d288:	681b      	ldr	r3, [r3, #0]
    d28a:	4618      	mov	r0, r3
    d28c:	f04f 0100 	mov.w	r1, #0
    d290:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
    d294:	f006 f9e0 	bl	13658 <__aeabi_fcmpgt>
    d298:	4603      	mov	r3, r0
    d29a:	2b00      	cmp	r3, #0
    d29c:	d008      	beq.n	d2b0 <climb_pid_run+0x2b8>
    d29e:	f64b 0308 	movw	r3, #47112	; 0xb808
    d2a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2a6:	f04f 0200 	mov.w	r2, #0
    d2aa:	f2c4 22c8 	movt	r2, #17096	; 0x42c8
    d2ae:	601a      	str	r2, [r3, #0]
    if (climb_sum_err < - MAX_CLIMB_SUM_ERR) climb_sum_err = - MAX_CLIMB_SUM_ERR;
    d2b0:	f64b 0308 	movw	r3, #47112	; 0xb808
    d2b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2b8:	681b      	ldr	r3, [r3, #0]
    d2ba:	4618      	mov	r0, r3
    d2bc:	f04f 0100 	mov.w	r1, #0
    d2c0:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
    d2c4:	f006 f9aa 	bl	1361c <__aeabi_fcmplt>
    d2c8:	4603      	mov	r3, r0
    d2ca:	2b00      	cmp	r3, #0
    d2cc:	d008      	beq.n	d2e0 <climb_pid_run+0x2e8>
    d2ce:	f64b 0308 	movw	r3, #47112	; 0xb808
    d2d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2d6:	f04f 0200 	mov.w	r2, #0
    d2da:	f2cc 22c8 	movt	r2, #49864	; 0xc2c8
    d2de:	601a      	str	r2, [r3, #0]
    desired_gaz = TRIM_UPPRZ(fgaz * MAX_PPRZ);
    d2e0:	6838      	ldr	r0, [r7, #0]
    d2e2:	f04f 0100 	mov.w	r1, #0
    d2e6:	f2c4 6116 	movt	r1, #17942	; 0x4616
    d2ea:	f005 fff9 	bl	132e0 <__aeabi_fmul>
    d2ee:	4603      	mov	r3, r0
    d2f0:	4618      	mov	r0, r3
    d2f2:	f04f 0100 	mov.w	r1, #0
    d2f6:	f006 f991 	bl	1361c <__aeabi_fcmplt>
    d2fa:	4603      	mov	r3, r0
    d2fc:	2b00      	cmp	r3, #0
    d2fe:	d001      	beq.n	d304 <climb_pid_run+0x30c>
    d300:	2200      	movs	r2, #0
    d302:	e022      	b.n	d34a <climb_pid_run+0x352>
    d304:	6838      	ldr	r0, [r7, #0]
    d306:	f04f 0100 	mov.w	r1, #0
    d30a:	f2c4 6116 	movt	r1, #17942	; 0x4616
    d30e:	f005 ffe7 	bl	132e0 <__aeabi_fmul>
    d312:	4603      	mov	r3, r0
    d314:	4618      	mov	r0, r3
    d316:	f04f 0100 	mov.w	r1, #0
    d31a:	f2c4 6116 	movt	r1, #17942	; 0x4616
    d31e:	f006 f99b 	bl	13658 <__aeabi_fcmpgt>
    d322:	4603      	mov	r3, r0
    d324:	2b00      	cmp	r3, #0
    d326:	d002      	beq.n	d32e <climb_pid_run+0x336>
    d328:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    d32c:	e00c      	b.n	d348 <climb_pid_run+0x350>
    d32e:	6838      	ldr	r0, [r7, #0]
    d330:	f04f 0100 	mov.w	r1, #0
    d334:	f2c4 6116 	movt	r1, #17942	; 0x4616
    d338:	f005 ffd2 	bl	132e0 <__aeabi_fmul>
    d33c:	4603      	mov	r3, r0
    d33e:	4618      	mov	r0, r3
    d340:	f006 f994 	bl	1366c <__aeabi_f2iz>
    d344:	4603      	mov	r3, r0
    d346:	b29b      	uxth	r3, r3
    d348:	b29a      	uxth	r2, r3
    d34a:	f24b 73ec 	movw	r3, #47084	; 0xb7ec
    d34e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d352:	801a      	strh	r2, [r3, #0]
    desired_pitch = nav_pitch + pitch_of_vz;
    d354:	f64b 033c 	movw	r3, #47164	; 0xb83c
    d358:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d35c:	681a      	ldr	r2, [r3, #0]
    d35e:	f24b 73f8 	movw	r3, #47096	; 0xb7f8
    d362:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d366:	681b      	ldr	r3, [r3, #0]
    d368:	4610      	mov	r0, r2
    d36a:	4619      	mov	r1, r3
    d36c:	f005 feb0 	bl	130d0 <__addsf3>
    d370:	4603      	mov	r3, r0
    d372:	461a      	mov	r2, r3
    d374:	f24b 73e8 	movw	r3, #47080	; 0xb7e8
    d378:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d37c:	601a      	str	r2, [r3, #0]
  }
}
    d37e:	3708      	adds	r7, #8
    d380:	46bd      	mov	sp, r7
    d382:	bdb0      	pop	{r4, r5, r7, pc}
    d384:	f3af 8000 	nop.w
    d388:	3d70a3d7 	.word	0x3d70a3d7
    d38c:	3fd3d70a 	.word	0x3fd3d70a
    d390:	9999999a 	.word	0x9999999a
    d394:	3fc99999 	.word	0x3fc99999

0000d398 <altitude_pid_run>:

float altitude_pgain = ALTITUDE_PGAIN;


void altitude_pid_run(void) {
    d398:	b580      	push	{r7, lr}
    d39a:	b082      	sub	sp, #8
    d39c:	af00      	add	r7, sp, #0
  float err = estimator_z - desired_altitude;
    d39e:	f64b 2374 	movw	r3, #47732	; 0xba74
    d3a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3a6:	681a      	ldr	r2, [r3, #0]
    d3a8:	f240 133c 	movw	r3, #316	; 0x13c
    d3ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d3b0:	681b      	ldr	r3, [r3, #0]
    d3b2:	4610      	mov	r0, r2
    d3b4:	4619      	mov	r1, r3
    d3b6:	f005 fe89 	bl	130cc <__aeabi_fsub>
    d3ba:	4603      	mov	r3, r0
    d3bc:	607b      	str	r3, [r7, #4]
  desired_climb = pre_climb + altitude_pgain * err;
    d3be:	f240 1338 	movw	r3, #312	; 0x138
    d3c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d3c6:	681b      	ldr	r3, [r3, #0]
    d3c8:	4618      	mov	r0, r3
    d3ca:	6879      	ldr	r1, [r7, #4]
    d3cc:	f005 ff88 	bl	132e0 <__aeabi_fmul>
    d3d0:	4603      	mov	r3, r0
    d3d2:	461a      	mov	r2, r3
    d3d4:	f64b 0304 	movw	r3, #47108	; 0xb804
    d3d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3dc:	681b      	ldr	r3, [r3, #0]
    d3de:	4610      	mov	r0, r2
    d3e0:	4619      	mov	r1, r3
    d3e2:	f005 fe75 	bl	130d0 <__addsf3>
    d3e6:	4603      	mov	r3, r0
    d3e8:	461a      	mov	r2, r3
    d3ea:	f64b 0300 	movw	r3, #47104	; 0xb800
    d3ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3f2:	601a      	str	r2, [r3, #0]
  if (desired_climb < -CLIMB_MAX) desired_climb = -CLIMB_MAX;
    d3f4:	f64b 0300 	movw	r3, #47104	; 0xb800
    d3f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3fc:	681b      	ldr	r3, [r3, #0]
    d3fe:	4618      	mov	r0, r3
    d400:	f04f 0100 	mov.w	r1, #0
    d404:	f6cb 7180 	movt	r1, #49024	; 0xbf80
    d408:	f006 f908 	bl	1361c <__aeabi_fcmplt>
    d40c:	4603      	mov	r3, r0
    d40e:	2b00      	cmp	r3, #0
    d410:	d008      	beq.n	d424 <altitude_pid_run+0x8c>
    d412:	f64b 0300 	movw	r3, #47104	; 0xb800
    d416:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d41a:	f04f 0200 	mov.w	r2, #0
    d41e:	f6cb 7280 	movt	r2, #49024	; 0xbf80
    d422:	601a      	str	r2, [r3, #0]
  if (desired_climb > CLIMB_MAX) desired_climb = CLIMB_MAX;
    d424:	f64b 0300 	movw	r3, #47104	; 0xb800
    d428:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d42c:	681b      	ldr	r3, [r3, #0]
    d42e:	4618      	mov	r0, r3
    d430:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    d434:	f006 f910 	bl	13658 <__aeabi_fcmpgt>
    d438:	4603      	mov	r3, r0
    d43a:	2b00      	cmp	r3, #0
    d43c:	d006      	beq.n	d44c <altitude_pid_run+0xb4>
    d43e:	f64b 0300 	movw	r3, #47104	; 0xb800
    d442:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d446:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    d44a:	601a      	str	r2, [r3, #0]
}
    d44c:	3708      	adds	r7, #8
    d44e:	46bd      	mov	sp, r7
    d450:	bd80      	pop	{r7, pc}
    d452:	bf00      	nop
    d454:	f3af 8000 	nop.w

0000d458 <auto_nav>:
#define GROUND_ALT 125.
#define SECURITY_ALT 150.
#define MAX_DIST_FROM_HOME 500.
#ifdef NAV_C

static inline void auto_nav(void) {
    d458:	b5f0      	push	{r4, r5, r6, r7, lr}
    d45a:	b08b      	sub	sp, #44	; 0x2c
    d45c:	af00      	add	r7, sp, #0
        NextBlock()
    }

}
#else*/
if(nav_block == 0)
    d45e:	f64b 0311 	movw	r3, #47121	; 0xb811
    d462:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d466:	781b      	ldrb	r3, [r3, #0]
    d468:	2b00      	cmp	r3, #0
    d46a:	f040 8169 	bne.w	d740 <auto_nav+0x2e8>
{ // init
    
    if (nav_stage == 0) 
    d46e:	f64b 0310 	movw	r3, #47120	; 0xb810
    d472:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d476:	781b      	ldrb	r3, [r3, #0]
    d478:	2b00      	cmp	r3, #0
    d47a:	d13c      	bne.n	d4f6 <auto_nav+0x9e>
    {
	Label(while_1)
	nav_stage=0;
    d47c:	f64b 0310 	movw	r3, #47120	; 0xb810
    d480:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d484:	2200      	movs	r2, #0
    d486:	701a      	strb	r2, [r3, #0]
	if (! (!(estimator_flight_time))) Goto(endwhile_2) 
    d488:	f64b 239c 	movw	r3, #47772	; 0xba9c
    d48c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d490:	881b      	ldrh	r3, [r3, #0]
    d492:	2b00      	cmp	r3, #0
    d494:	d000      	beq.n	d498 <auto_nav+0x40>
    d496:	e03d      	b.n	d514 <auto_nav+0xbc>
	else NextStage(); 
    d498:	f64b 0310 	movw	r3, #47120	; 0xb810
    d49c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4a0:	781b      	ldrb	r3, [r3, #0]
    d4a2:	3301      	adds	r3, #1
    d4a4:	b2da      	uxtb	r2, r3
    d4a6:	f64b 0310 	movw	r3, #47120	; 0xb810
    d4aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4ae:	701a      	strb	r2, [r3, #0]
    d4b0:	f64b 236c 	movw	r3, #47724	; 0xba6c
    d4b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4b8:	681a      	ldr	r2, [r3, #0]
    d4ba:	f64b 0314 	movw	r3, #47124	; 0xb814
    d4be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4c2:	601a      	str	r2, [r3, #0]
    d4c4:	f64b 2370 	movw	r3, #47728	; 0xba70
    d4c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4cc:	681a      	ldr	r2, [r3, #0]
    d4ce:	f64b 0318 	movw	r3, #47128	; 0xb818
    d4d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4d6:	601a      	str	r2, [r3, #0]
    d4d8:	f64b 0324 	movw	r3, #47140	; 0xb824
    d4dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4e0:	2200      	movs	r2, #0
    d4e2:	801a      	strh	r2, [r3, #0]
    d4e4:	f64b 0328 	movw	r3, #47144	; 0xb828
    d4e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4ec:	f04f 0200 	mov.w	r2, #0
    d4f0:	601a      	str	r2, [r3, #0]
    d4f2:	f002 b883 	b.w	f5fc <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
    d4f6:	f64b 0310 	movw	r3, #47120	; 0xb810
    d4fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4fe:	781b      	ldrb	r3, [r3, #0]
    d500:	2b01      	cmp	r3, #1
    d502:	d100      	bne.n	d506 <auto_nav+0xae>
    {   Goto(while_1)}
    d504:	e7ba      	b.n	d47c <auto_nav+0x24>
    else if (nav_stage == 2)
    d506:	f64b 0310 	movw	r3, #47120	; 0xb810
    d50a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d50e:	781b      	ldrb	r3, [r3, #0]
    d510:	2b02      	cmp	r3, #2
    d512:	d162      	bne.n	d5da <auto_nav+0x182>
    {
	Label(endwhile_2)
	nav_stage = 2;
    d514:	f64b 0310 	movw	r3, #47120	; 0xb810
    d518:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d51c:	2202      	movs	r2, #2
    d51e:	701a      	strb	r2, [r3, #0]
        if ((estimator_flight_time>8)) NextStage() else {
    d520:	f64b 239c 	movw	r3, #47772	; 0xba9c
    d524:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d528:	881b      	ldrh	r3, [r3, #0]
    d52a:	2b08      	cmp	r3, #8
    d52c:	d92e      	bls.n	d58c <auto_nav+0x134>
    d52e:	f64b 0310 	movw	r3, #47120	; 0xb810
    d532:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d536:	781b      	ldrb	r3, [r3, #0]
    d538:	3301      	adds	r3, #1
    d53a:	b2da      	uxtb	r2, r3
    d53c:	f64b 0310 	movw	r3, #47120	; 0xb810
    d540:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d544:	701a      	strb	r2, [r3, #0]
    d546:	f64b 236c 	movw	r3, #47724	; 0xba6c
    d54a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d54e:	681a      	ldr	r2, [r3, #0]
    d550:	f64b 0314 	movw	r3, #47124	; 0xb814
    d554:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d558:	601a      	str	r2, [r3, #0]
    d55a:	f64b 2370 	movw	r3, #47728	; 0xba70
    d55e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d562:	681a      	ldr	r2, [r3, #0]
    d564:	f64b 0318 	movw	r3, #47128	; 0xb818
    d568:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d56c:	601a      	str	r2, [r3, #0]
    d56e:	f64b 0324 	movw	r3, #47140	; 0xb824
    d572:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d576:	2200      	movs	r2, #0
    d578:	801a      	strh	r2, [r3, #0]
    d57a:	f64b 0328 	movw	r3, #47144	; 0xb828
    d57e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d582:	f04f 0200 	mov.w	r2, #0
    d586:	601a      	str	r2, [r3, #0]
    d588:	f002 b838 	b.w	f5fc <auto_nav+0x21a4>
          desired_course = RadOfDeg(QFU);
    d58c:	f24b 73fc 	movw	r3, #47100	; 0xb7fc
    d590:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d594:	f64c 32e4 	movw	r2, #52196	; 0xcbe4
    d598:	f2c4 0296 	movt	r2, #16534	; 0x4096
    d59c:	601a      	str	r2, [r3, #0]
          auto_pitch = FALSE;
    d59e:	f24b 439f 	movw	r3, #46239	; 0xb49f
    d5a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5a6:	2200      	movs	r2, #0
    d5a8:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.150000;
    d5aa:	f64b 033c 	movw	r3, #47164	; 0xb83c
    d5ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5b2:	f649 129a 	movw	r2, #39322	; 0x999a
    d5b6:	f6c3 6219 	movt	r2, #15897	; 0x3e19
    d5ba:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_GAZ;
    d5bc:	f24b 439d 	movw	r3, #46237	; 0xb49d
    d5c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5c4:	2201      	movs	r2, #1
    d5c6:	701a      	strb	r2, [r3, #0]
          nav_desired_gaz = TRIM_UPPRZ(0.800000*MAX_PPRZ);
    d5c8:	f64b 0338 	movw	r3, #47160	; 0xb838
    d5cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5d0:	f44f 52f0 	mov.w	r2, #7680	; 0x1e00
    d5d4:	801a      	strh	r2, [r3, #0]
        }
        return;
    d5d6:	f002 b811 	b.w	f5fc <auto_nav+0x21a4>
     }
     else if (nav_stage == 3)
    d5da:	f64b 0310 	movw	r3, #47120	; 0xb810
    d5de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5e2:	781b      	ldrb	r3, [r3, #0]
    d5e4:	2b03      	cmp	r3, #3
    d5e6:	d168      	bne.n	d6ba <auto_nav+0x262>
     {
	nav_stage = 3;	
    d5e8:	f64b 0310 	movw	r3, #47120	; 0xb810
    d5ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5f0:	2203      	movs	r2, #3
    d5f2:	701a      	strb	r2, [r3, #0]
        if ((estimator_z>SECURITY_ALT)) NextStage() else {
    d5f4:	f64b 2374 	movw	r3, #47732	; 0xba74
    d5f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5fc:	681b      	ldr	r3, [r3, #0]
    d5fe:	4618      	mov	r0, r3
    d600:	f04f 0100 	mov.w	r1, #0
    d604:	f2c4 3116 	movt	r1, #17174	; 0x4316
    d608:	f006 f826 	bl	13658 <__aeabi_fcmpgt>
    d60c:	4603      	mov	r3, r0
    d60e:	2b00      	cmp	r3, #0
    d610:	d02e      	beq.n	d670 <auto_nav+0x218>
    d612:	f64b 0310 	movw	r3, #47120	; 0xb810
    d616:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d61a:	781b      	ldrb	r3, [r3, #0]
    d61c:	3301      	adds	r3, #1
    d61e:	b2da      	uxtb	r2, r3
    d620:	f64b 0310 	movw	r3, #47120	; 0xb810
    d624:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d628:	701a      	strb	r2, [r3, #0]
    d62a:	f64b 236c 	movw	r3, #47724	; 0xba6c
    d62e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d632:	681a      	ldr	r2, [r3, #0]
    d634:	f64b 0314 	movw	r3, #47124	; 0xb814
    d638:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d63c:	601a      	str	r2, [r3, #0]
    d63e:	f64b 2370 	movw	r3, #47728	; 0xba70
    d642:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d646:	681a      	ldr	r2, [r3, #0]
    d648:	f64b 0318 	movw	r3, #47128	; 0xb818
    d64c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d650:	601a      	str	r2, [r3, #0]
    d652:	f64b 0324 	movw	r3, #47140	; 0xb824
    d656:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d65a:	2200      	movs	r2, #0
    d65c:	801a      	strh	r2, [r3, #0]
    d65e:	f64b 0328 	movw	r3, #47144	; 0xb828
    d662:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d666:	f04f 0200 	mov.w	r2, #0
    d66a:	601a      	str	r2, [r3, #0]
    d66c:	f001 bfc6 	b.w	f5fc <auto_nav+0x21a4>
          desired_course = RadOfDeg(QFU);
    d670:	f24b 73fc 	movw	r3, #47100	; 0xb7fc
    d674:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d678:	f64c 32e4 	movw	r2, #52196	; 0xcbe4
    d67c:	f2c4 0296 	movt	r2, #16534	; 0x4096
    d680:	601a      	str	r2, [r3, #0]
          auto_pitch = FALSE;
    d682:	f24b 439f 	movw	r3, #46239	; 0xb49f
    d686:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d68a:	2200      	movs	r2, #0
    d68c:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.000000;
    d68e:	f64b 033c 	movw	r3, #47164	; 0xb83c
    d692:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d696:	f04f 0200 	mov.w	r2, #0
    d69a:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_CLIMB;
    d69c:	f24b 439d 	movw	r3, #46237	; 0xb49d
    d6a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6a4:	2202      	movs	r2, #2
    d6a6:	701a      	strb	r2, [r3, #0]
          desired_climb = 8.000000;
    d6a8:	f64b 0300 	movw	r3, #47104	; 0xb800
    d6ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6b0:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    d6b4:	601a      	str	r2, [r3, #0]
        }
        return;
    d6b6:	f001 bfa1 	b.w	f5fc <auto_nav+0x21a4>
     }
     else if (nav_stage == 4)
    d6ba:	f64b 0310 	movw	r3, #47120	; 0xb810
    d6be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6c2:	781b      	ldrb	r3, [r3, #0]
    d6c4:	2b04      	cmp	r3, #4
    d6c6:	f041 8799 	bne.w	f5fc <auto_nav+0x21a4>
        NextBlock()
    d6ca:	f64b 0311 	movw	r3, #47121	; 0xb811
    d6ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6d2:	781b      	ldrb	r3, [r3, #0]
    d6d4:	3301      	adds	r3, #1
    d6d6:	b2da      	uxtb	r2, r3
    d6d8:	f64b 0311 	movw	r3, #47121	; 0xb811
    d6dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6e0:	701a      	strb	r2, [r3, #0]
    d6e2:	f64b 0310 	movw	r3, #47120	; 0xb810
    d6e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6ea:	2200      	movs	r2, #0
    d6ec:	701a      	strb	r2, [r3, #0]
    d6ee:	f64b 0326 	movw	r3, #47142	; 0xb826
    d6f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6f6:	2200      	movs	r2, #0
    d6f8:	801a      	strh	r2, [r3, #0]
    d6fa:	f64b 236c 	movw	r3, #47724	; 0xba6c
    d6fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d702:	681a      	ldr	r2, [r3, #0]
    d704:	f64b 0314 	movw	r3, #47124	; 0xb814
    d708:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d70c:	601a      	str	r2, [r3, #0]
    d70e:	f64b 2370 	movw	r3, #47728	; 0xba70
    d712:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d716:	681a      	ldr	r2, [r3, #0]
    d718:	f64b 0318 	movw	r3, #47128	; 0xb818
    d71c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d720:	601a      	str	r2, [r3, #0]
    d722:	f64b 0324 	movw	r3, #47140	; 0xb824
    d726:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d72a:	2200      	movs	r2, #0
    d72c:	801a      	strh	r2, [r3, #0]
    d72e:	f64b 0328 	movw	r3, #47144	; 0xb828
    d732:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d736:	f04f 0200 	mov.w	r2, #0
    d73a:	601a      	str	r2, [r3, #0]
    d73c:	f001 bf5e 	b.w	f5fc <auto_nav+0x21a4>
     else { }
}
else if (nav_block == 1) // two
    d740:	f64b 0311 	movw	r3, #47121	; 0xb811
    d744:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d748:	781b      	ldrb	r3, [r3, #0]
    d74a:	2b01      	cmp	r3, #1
    d74c:	f040 81bc 	bne.w	dac8 <auto_nav+0x670>
{
    nav_block = 1;
    d750:	f64b 0311 	movw	r3, #47121	; 0xb811
    d754:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d758:	2201      	movs	r2, #1
    d75a:	701a      	strb	r2, [r3, #0]
    if RcEvent1() 
    d75c:	f24b 43a0 	movw	r3, #46240	; 0xb4a0
    d760:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d764:	781b      	ldrb	r3, [r3, #0]
    d766:	2b00      	cmp	r3, #0
    d768:	d007      	beq.n	d77a <auto_nav+0x322>
    d76a:	f24b 43a0 	movw	r3, #46240	; 0xb4a0
    d76e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d772:	2200      	movs	r2, #0
    d774:	701a      	strb	r2, [r3, #0]
    d776:	2301      	movs	r3, #1
    d778:	e000      	b.n	d77c <auto_nav+0x324>
    d77a:	2300      	movs	r3, #0
    d77c:	2b00      	cmp	r3, #0
    d77e:	d034      	beq.n	d7ea <auto_nav+0x392>
	{ GotoBlock(2) }
    d780:	f64b 0311 	movw	r3, #47121	; 0xb811
    d784:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d788:	2202      	movs	r2, #2
    d78a:	701a      	strb	r2, [r3, #0]
    d78c:	f64b 0310 	movw	r3, #47120	; 0xb810
    d790:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d794:	2200      	movs	r2, #0
    d796:	701a      	strb	r2, [r3, #0]
    d798:	f64b 0326 	movw	r3, #47142	; 0xb826
    d79c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7a0:	2200      	movs	r2, #0
    d7a2:	801a      	strh	r2, [r3, #0]
    d7a4:	f64b 236c 	movw	r3, #47724	; 0xba6c
    d7a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7ac:	681a      	ldr	r2, [r3, #0]
    d7ae:	f64b 0314 	movw	r3, #47124	; 0xb814
    d7b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7b6:	601a      	str	r2, [r3, #0]
    d7b8:	f64b 2370 	movw	r3, #47728	; 0xba70
    d7bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7c0:	681a      	ldr	r2, [r3, #0]
    d7c2:	f64b 0318 	movw	r3, #47128	; 0xb818
    d7c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7ca:	601a      	str	r2, [r3, #0]
    d7cc:	f64b 0324 	movw	r3, #47140	; 0xb824
    d7d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7d4:	2200      	movs	r2, #0
    d7d6:	801a      	strh	r2, [r3, #0]
    d7d8:	f64b 0328 	movw	r3, #47144	; 0xb828
    d7dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7e0:	f04f 0200 	mov.w	r2, #0
    d7e4:	601a      	str	r2, [r3, #0]
    d7e6:	f001 bf09 	b.w	f5fc <auto_nav+0x21a4>
    if(nav_stage == 0)
    d7ea:	f64b 0310 	movw	r3, #47120	; 0xb810
    d7ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7f2:	781b      	ldrb	r3, [r3, #0]
    d7f4:	2b00      	cmp	r3, #0
    d7f6:	d12e      	bne.n	d856 <auto_nav+0x3fe>
    {
       Label(while_3)
       if (! (TRUE)) Goto(endwhile_4) else NextStage();
    d7f8:	f64b 0310 	movw	r3, #47120	; 0xb810
    d7fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d800:	781b      	ldrb	r3, [r3, #0]
    d802:	3301      	adds	r3, #1
    d804:	b2da      	uxtb	r2, r3
    d806:	f64b 0310 	movw	r3, #47120	; 0xb810
    d80a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d80e:	701a      	strb	r2, [r3, #0]
    d810:	f64b 236c 	movw	r3, #47724	; 0xba6c
    d814:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d818:	681a      	ldr	r2, [r3, #0]
    d81a:	f64b 0314 	movw	r3, #47124	; 0xb814
    d81e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d822:	601a      	str	r2, [r3, #0]
    d824:	f64b 2370 	movw	r3, #47728	; 0xba70
    d828:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d82c:	681a      	ldr	r2, [r3, #0]
    d82e:	f64b 0318 	movw	r3, #47128	; 0xb818
    d832:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d836:	601a      	str	r2, [r3, #0]
    d838:	f64b 0324 	movw	r3, #47140	; 0xb824
    d83c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d840:	2200      	movs	r2, #0
    d842:	801a      	strh	r2, [r3, #0]
    d844:	f64b 0328 	movw	r3, #47144	; 0xb828
    d848:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d84c:	f04f 0200 	mov.w	r2, #0
    d850:	601a      	str	r2, [r3, #0]
    d852:	f001 bed3 	b.w	f5fc <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
    d856:	f64b 0310 	movw	r3, #47120	; 0xb810
    d85a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d85e:	781b      	ldrb	r3, [r3, #0]
    d860:	2b01      	cmp	r3, #1
    d862:	d169      	bne.n	d938 <auto_nav+0x4e0>
    {
	  nav_stage = 1;
    d864:	f64b 0310 	movw	r3, #47120	; 0xb810
    d868:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d86c:	2201      	movs	r2, #1
    d86e:	701a      	strb	r2, [r3, #0]
          if (approaching(1)) NextStageFrom(1) else {
    d870:	2001      	movs	r0, #1
    d872:	f001 fed1 	bl	f618 <approaching>
    d876:	4603      	mov	r3, r0
    d878:	2b00      	cmp	r3, #0
    d87a:	d034      	beq.n	d8e6 <auto_nav+0x48e>
    d87c:	f64b 031c 	movw	r3, #47132	; 0xb81c
    d880:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d884:	2201      	movs	r2, #1
    d886:	701a      	strb	r2, [r3, #0]
    d888:	f64b 0310 	movw	r3, #47120	; 0xb810
    d88c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d890:	781b      	ldrb	r3, [r3, #0]
    d892:	3301      	adds	r3, #1
    d894:	b2da      	uxtb	r2, r3
    d896:	f64b 0310 	movw	r3, #47120	; 0xb810
    d89a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d89e:	701a      	strb	r2, [r3, #0]
    d8a0:	f64b 236c 	movw	r3, #47724	; 0xba6c
    d8a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8a8:	681a      	ldr	r2, [r3, #0]
    d8aa:	f64b 0314 	movw	r3, #47124	; 0xb814
    d8ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8b2:	601a      	str	r2, [r3, #0]
    d8b4:	f64b 2370 	movw	r3, #47728	; 0xba70
    d8b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8bc:	681a      	ldr	r2, [r3, #0]
    d8be:	f64b 0318 	movw	r3, #47128	; 0xb818
    d8c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8c6:	601a      	str	r2, [r3, #0]
    d8c8:	f64b 0324 	movw	r3, #47140	; 0xb824
    d8cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8d0:	2200      	movs	r2, #0
    d8d2:	801a      	strh	r2, [r3, #0]
    d8d4:	f64b 0328 	movw	r3, #47144	; 0xb828
    d8d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8dc:	f04f 0200 	mov.w	r2, #0
    d8e0:	601a      	str	r2, [r3, #0]
    d8e2:	f001 be8b 	b.w	f5fc <auto_nav+0x21a4>
            fly_to(1);
    d8e6:	2001      	movs	r0, #1
    d8e8:	f001 ffca 	bl	f880 <fly_to>
            auto_pitch = FALSE;
    d8ec:	f24b 439f 	movw	r3, #46239	; 0xb49f
    d8f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8f4:	2200      	movs	r2, #0
    d8f6:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
    d8f8:	f64b 033c 	movw	r3, #47164	; 0xb83c
    d8fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d900:	f04f 0200 	mov.w	r2, #0
    d904:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
    d906:	f24b 439d 	movw	r3, #46237	; 0xb49d
    d90a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d90e:	2203      	movs	r2, #3
    d910:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[1].a;
    d912:	f240 1340 	movw	r3, #320	; 0x140
    d916:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d91a:	695a      	ldr	r2, [r3, #20]
    d91c:	f240 133c 	movw	r3, #316	; 0x13c
    d920:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d924:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
    d926:	f64b 0304 	movw	r3, #47108	; 0xb804
    d92a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d92e:	f04f 0200 	mov.w	r2, #0
    d932:	601a      	str	r2, [r3, #0]
          }
          return;
    d934:	f001 be62 	b.w	f5fc <auto_nav+0x21a4>
     }
     else if (nav_stage == 2)
    d938:	f64b 0310 	movw	r3, #47120	; 0xb810
    d93c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d940:	781b      	ldrb	r3, [r3, #0]
    d942:	2b02      	cmp	r3, #2
    d944:	d169      	bne.n	da1a <auto_nav+0x5c2>
     {
	  nav_stage = 2;
    d946:	f64b 0310 	movw	r3, #47120	; 0xb810
    d94a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d94e:	2202      	movs	r2, #2
    d950:	701a      	strb	r2, [r3, #0]
          if (approaching(4)) NextStageFrom(4) else {
    d952:	2004      	movs	r0, #4
    d954:	f001 fe60 	bl	f618 <approaching>
    d958:	4603      	mov	r3, r0
    d95a:	2b00      	cmp	r3, #0
    d95c:	d034      	beq.n	d9c8 <auto_nav+0x570>
    d95e:	f64b 031c 	movw	r3, #47132	; 0xb81c
    d962:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d966:	2204      	movs	r2, #4
    d968:	701a      	strb	r2, [r3, #0]
    d96a:	f64b 0310 	movw	r3, #47120	; 0xb810
    d96e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d972:	781b      	ldrb	r3, [r3, #0]
    d974:	3301      	adds	r3, #1
    d976:	b2da      	uxtb	r2, r3
    d978:	f64b 0310 	movw	r3, #47120	; 0xb810
    d97c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d980:	701a      	strb	r2, [r3, #0]
    d982:	f64b 236c 	movw	r3, #47724	; 0xba6c
    d986:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d98a:	681a      	ldr	r2, [r3, #0]
    d98c:	f64b 0314 	movw	r3, #47124	; 0xb814
    d990:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d994:	601a      	str	r2, [r3, #0]
    d996:	f64b 2370 	movw	r3, #47728	; 0xba70
    d99a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d99e:	681a      	ldr	r2, [r3, #0]
    d9a0:	f64b 0318 	movw	r3, #47128	; 0xb818
    d9a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9a8:	601a      	str	r2, [r3, #0]
    d9aa:	f64b 0324 	movw	r3, #47140	; 0xb824
    d9ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9b2:	2200      	movs	r2, #0
    d9b4:	801a      	strh	r2, [r3, #0]
    d9b6:	f64b 0328 	movw	r3, #47144	; 0xb828
    d9ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9be:	f04f 0200 	mov.w	r2, #0
    d9c2:	601a      	str	r2, [r3, #0]
    d9c4:	f001 be1a 	b.w	f5fc <auto_nav+0x21a4>
            fly_to(4);
    d9c8:	2004      	movs	r0, #4
    d9ca:	f001 ff59 	bl	f880 <fly_to>
            auto_pitch = FALSE;
    d9ce:	f24b 439f 	movw	r3, #46239	; 0xb49f
    d9d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9d6:	2200      	movs	r2, #0
    d9d8:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
    d9da:	f64b 033c 	movw	r3, #47164	; 0xb83c
    d9de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9e2:	f04f 0200 	mov.w	r2, #0
    d9e6:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
    d9e8:	f24b 439d 	movw	r3, #46237	; 0xb49d
    d9ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9f0:	2203      	movs	r2, #3
    d9f2:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[4].a;
    d9f4:	f240 1340 	movw	r3, #320	; 0x140
    d9f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    d9fe:	f240 133c 	movw	r3, #316	; 0x13c
    da02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da06:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
    da08:	f64b 0304 	movw	r3, #47108	; 0xb804
    da0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da10:	f04f 0200 	mov.w	r2, #0
    da14:	601a      	str	r2, [r3, #0]
          }
          return;
    da16:	f001 bdf1 	b.w	f5fc <auto_nav+0x21a4>
      }
      else if (nav_stage == 3)
    da1a:	f64b 0310 	movw	r3, #47120	; 0xb810
    da1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da22:	781b      	ldrb	r3, [r3, #0]
    da24:	2b03      	cmp	r3, #3
    da26:	d106      	bne.n	da36 <auto_nav+0x5de>
      {
	  nav_stage = 3;
    da28:	f64b 0310 	movw	r3, #47120	; 0xb810
    da2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da30:	2203      	movs	r2, #3
    da32:	701a      	strb	r2, [r3, #0]
          Goto(while_3)
    da34:	e6e0      	b.n	d7f8 <auto_nav+0x3a0>
      }
      else if (nav_stage == 4)
    da36:	f64b 0310 	movw	r3, #47120	; 0xb810
    da3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da3e:	781b      	ldrb	r3, [r3, #0]
    da40:	2b04      	cmp	r3, #4
    da42:	f041 85db 	bne.w	f5fc <auto_nav+0x21a4>
      {
        Label(endwhile_4)
	nav_stage = 4;
    da46:	f64b 0310 	movw	r3, #47120	; 0xb810
    da4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da4e:	2204      	movs	r2, #4
    da50:	701a      	strb	r2, [r3, #0]
        NextBlock()
    da52:	f64b 0311 	movw	r3, #47121	; 0xb811
    da56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da5a:	781b      	ldrb	r3, [r3, #0]
    da5c:	3301      	adds	r3, #1
    da5e:	b2da      	uxtb	r2, r3
    da60:	f64b 0311 	movw	r3, #47121	; 0xb811
    da64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da68:	701a      	strb	r2, [r3, #0]
    da6a:	f64b 0310 	movw	r3, #47120	; 0xb810
    da6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da72:	2200      	movs	r2, #0
    da74:	701a      	strb	r2, [r3, #0]
    da76:	f64b 0326 	movw	r3, #47142	; 0xb826
    da7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da7e:	2200      	movs	r2, #0
    da80:	801a      	strh	r2, [r3, #0]
    da82:	f64b 236c 	movw	r3, #47724	; 0xba6c
    da86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da8a:	681a      	ldr	r2, [r3, #0]
    da8c:	f64b 0314 	movw	r3, #47124	; 0xb814
    da90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da94:	601a      	str	r2, [r3, #0]
    da96:	f64b 2370 	movw	r3, #47728	; 0xba70
    da9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da9e:	681a      	ldr	r2, [r3, #0]
    daa0:	f64b 0318 	movw	r3, #47128	; 0xb818
    daa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    daa8:	601a      	str	r2, [r3, #0]
    daaa:	f64b 0324 	movw	r3, #47140	; 0xb824
    daae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dab2:	2200      	movs	r2, #0
    dab4:	801a      	strh	r2, [r3, #0]
    dab6:	f64b 0328 	movw	r3, #47144	; 0xb828
    daba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dabe:	f04f 0200 	mov.w	r2, #0
    dac2:	601a      	str	r2, [r3, #0]
    dac4:	f001 bd9a 	b.w	f5fc <auto_nav+0x21a4>
      }
      else { }
}
else if (nav_block == 2) // height
    dac8:	f64b 0311 	movw	r3, #47121	; 0xb811
    dacc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dad0:	781b      	ldrb	r3, [r3, #0]
    dad2:	2b02      	cmp	r3, #2
    dad4:	f040 8392 	bne.w	e1fc <auto_nav+0xda4>
{
	nav_block = 2;
    dad8:	f64b 0311 	movw	r3, #47121	; 0xb811
    dadc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dae0:	2202      	movs	r2, #2
    dae2:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(3) }
    dae4:	f24b 43a0 	movw	r3, #46240	; 0xb4a0
    dae8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    daec:	781b      	ldrb	r3, [r3, #0]
    daee:	2b00      	cmp	r3, #0
    daf0:	d007      	beq.n	db02 <auto_nav+0x6aa>
    daf2:	f24b 43a0 	movw	r3, #46240	; 0xb4a0
    daf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dafa:	2200      	movs	r2, #0
    dafc:	701a      	strb	r2, [r3, #0]
    dafe:	2301      	movs	r3, #1
    db00:	e000      	b.n	db04 <auto_nav+0x6ac>
    db02:	2300      	movs	r3, #0
    db04:	2b00      	cmp	r3, #0
    db06:	d034      	beq.n	db72 <auto_nav+0x71a>
    db08:	f64b 0311 	movw	r3, #47121	; 0xb811
    db0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db10:	2203      	movs	r2, #3
    db12:	701a      	strb	r2, [r3, #0]
    db14:	f64b 0310 	movw	r3, #47120	; 0xb810
    db18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db1c:	2200      	movs	r2, #0
    db1e:	701a      	strb	r2, [r3, #0]
    db20:	f64b 0326 	movw	r3, #47142	; 0xb826
    db24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db28:	2200      	movs	r2, #0
    db2a:	801a      	strh	r2, [r3, #0]
    db2c:	f64b 236c 	movw	r3, #47724	; 0xba6c
    db30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db34:	681a      	ldr	r2, [r3, #0]
    db36:	f64b 0314 	movw	r3, #47124	; 0xb814
    db3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db3e:	601a      	str	r2, [r3, #0]
    db40:	f64b 2370 	movw	r3, #47728	; 0xba70
    db44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db48:	681a      	ldr	r2, [r3, #0]
    db4a:	f64b 0318 	movw	r3, #47128	; 0xb818
    db4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db52:	601a      	str	r2, [r3, #0]
    db54:	f64b 0324 	movw	r3, #47140	; 0xb824
    db58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db5c:	2200      	movs	r2, #0
    db5e:	801a      	strh	r2, [r3, #0]
    db60:	f64b 0328 	movw	r3, #47144	; 0xb828
    db64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db68:	f04f 0200 	mov.w	r2, #0
    db6c:	601a      	str	r2, [r3, #0]
    db6e:	f001 bd45 	b.w	f5fc <auto_nav+0x21a4>
    
    if(nav_stage == 0)
    db72:	f64b 0310 	movw	r3, #47120	; 0xb810
    db76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db7a:	781b      	ldrb	r3, [r3, #0]
    db7c:	2b00      	cmp	r3, #0
    db7e:	d134      	bne.n	dbea <auto_nav+0x792>
    {
       Label(while_5)
       nav_stage = 0;
    db80:	f64b 0310 	movw	r3, #47120	; 0xb810
    db84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db88:	2200      	movs	r2, #0
    db8a:	701a      	strb	r2, [r3, #0]
       if (! (TRUE)) Goto(endwhile_6) else NextStage();
    db8c:	f64b 0310 	movw	r3, #47120	; 0xb810
    db90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db94:	781b      	ldrb	r3, [r3, #0]
    db96:	3301      	adds	r3, #1
    db98:	b2da      	uxtb	r2, r3
    db9a:	f64b 0310 	movw	r3, #47120	; 0xb810
    db9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dba2:	701a      	strb	r2, [r3, #0]
    dba4:	f64b 236c 	movw	r3, #47724	; 0xba6c
    dba8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbac:	681a      	ldr	r2, [r3, #0]
    dbae:	f64b 0314 	movw	r3, #47124	; 0xb814
    dbb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbb6:	601a      	str	r2, [r3, #0]
    dbb8:	f64b 2370 	movw	r3, #47728	; 0xba70
    dbbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbc0:	681a      	ldr	r2, [r3, #0]
    dbc2:	f64b 0318 	movw	r3, #47128	; 0xb818
    dbc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbca:	601a      	str	r2, [r3, #0]
    dbcc:	f64b 0324 	movw	r3, #47140	; 0xb824
    dbd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbd4:	2200      	movs	r2, #0
    dbd6:	801a      	strh	r2, [r3, #0]
    dbd8:	f64b 0328 	movw	r3, #47144	; 0xb828
    dbdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbe0:	f04f 0200 	mov.w	r2, #0
    dbe4:	601a      	str	r2, [r3, #0]
    dbe6:	f001 bd09 	b.w	f5fc <auto_nav+0x21a4>
    }
    else if(nav_stage == 1)
    dbea:	f64b 0310 	movw	r3, #47120	; 0xb810
    dbee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbf2:	781b      	ldrb	r3, [r3, #0]
    dbf4:	2b01      	cmp	r3, #1
    dbf6:	d169      	bne.n	dccc <auto_nav+0x874>
    {
         nav_stage =1;
    dbf8:	f64b 0310 	movw	r3, #47120	; 0xb810
    dbfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc00:	2201      	movs	r2, #1
    dc02:	701a      	strb	r2, [r3, #0]
          if (approaching(6)) NextStageFrom(6) else {
    dc04:	2006      	movs	r0, #6
    dc06:	f001 fd07 	bl	f618 <approaching>
    dc0a:	4603      	mov	r3, r0
    dc0c:	2b00      	cmp	r3, #0
    dc0e:	d034      	beq.n	dc7a <auto_nav+0x822>
    dc10:	f64b 031c 	movw	r3, #47132	; 0xb81c
    dc14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc18:	2206      	movs	r2, #6
    dc1a:	701a      	strb	r2, [r3, #0]
    dc1c:	f64b 0310 	movw	r3, #47120	; 0xb810
    dc20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc24:	781b      	ldrb	r3, [r3, #0]
    dc26:	3301      	adds	r3, #1
    dc28:	b2da      	uxtb	r2, r3
    dc2a:	f64b 0310 	movw	r3, #47120	; 0xb810
    dc2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc32:	701a      	strb	r2, [r3, #0]
    dc34:	f64b 236c 	movw	r3, #47724	; 0xba6c
    dc38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc3c:	681a      	ldr	r2, [r3, #0]
    dc3e:	f64b 0314 	movw	r3, #47124	; 0xb814
    dc42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc46:	601a      	str	r2, [r3, #0]
    dc48:	f64b 2370 	movw	r3, #47728	; 0xba70
    dc4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc50:	681a      	ldr	r2, [r3, #0]
    dc52:	f64b 0318 	movw	r3, #47128	; 0xb818
    dc56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc5a:	601a      	str	r2, [r3, #0]
    dc5c:	f64b 0324 	movw	r3, #47140	; 0xb824
    dc60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc64:	2200      	movs	r2, #0
    dc66:	801a      	strh	r2, [r3, #0]
    dc68:	f64b 0328 	movw	r3, #47144	; 0xb828
    dc6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc70:	f04f 0200 	mov.w	r2, #0
    dc74:	601a      	str	r2, [r3, #0]
    dc76:	f001 bcc1 	b.w	f5fc <auto_nav+0x21a4>
            fly_to(6);
    dc7a:	2006      	movs	r0, #6
    dc7c:	f001 fe00 	bl	f880 <fly_to>
            auto_pitch = FALSE;
    dc80:	f24b 439f 	movw	r3, #46239	; 0xb49f
    dc84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc88:	2200      	movs	r2, #0
    dc8a:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
    dc8c:	f64b 033c 	movw	r3, #47164	; 0xb83c
    dc90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc94:	f04f 0200 	mov.w	r2, #0
    dc98:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
    dc9a:	f24b 439d 	movw	r3, #46237	; 0xb49d
    dc9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dca2:	2203      	movs	r2, #3
    dca4:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[6].a;
    dca6:	f240 1340 	movw	r3, #320	; 0x140
    dcaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    dcb0:	f240 133c 	movw	r3, #316	; 0x13c
    dcb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcb8:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
    dcba:	f64b 0304 	movw	r3, #47108	; 0xb804
    dcbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcc2:	f04f 0200 	mov.w	r2, #0
    dcc6:	601a      	str	r2, [r3, #0]
          }
          return;
    dcc8:	f001 bc98 	b.w	f5fc <auto_nav+0x21a4>
     }
     else if (nav_stage == 2)
    dccc:	f64b 0310 	movw	r3, #47120	; 0xb810
    dcd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcd4:	781b      	ldrb	r3, [r3, #0]
    dcd6:	2b02      	cmp	r3, #2
    dcd8:	d169      	bne.n	ddae <auto_nav+0x956>
     {
         nav_stage =2; 
    dcda:	f64b 0310 	movw	r3, #47120	; 0xb810
    dcde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dce2:	2202      	movs	r2, #2
    dce4:	701a      	strb	r2, [r3, #0]
         if (approaching(1)) NextStageFrom(1) else {
    dce6:	2001      	movs	r0, #1
    dce8:	f001 fc96 	bl	f618 <approaching>
    dcec:	4603      	mov	r3, r0
    dcee:	2b00      	cmp	r3, #0
    dcf0:	d034      	beq.n	dd5c <auto_nav+0x904>
    dcf2:	f64b 031c 	movw	r3, #47132	; 0xb81c
    dcf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcfa:	2201      	movs	r2, #1
    dcfc:	701a      	strb	r2, [r3, #0]
    dcfe:	f64b 0310 	movw	r3, #47120	; 0xb810
    dd02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd06:	781b      	ldrb	r3, [r3, #0]
    dd08:	3301      	adds	r3, #1
    dd0a:	b2da      	uxtb	r2, r3
    dd0c:	f64b 0310 	movw	r3, #47120	; 0xb810
    dd10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd14:	701a      	strb	r2, [r3, #0]
    dd16:	f64b 236c 	movw	r3, #47724	; 0xba6c
    dd1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd1e:	681a      	ldr	r2, [r3, #0]
    dd20:	f64b 0314 	movw	r3, #47124	; 0xb814
    dd24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd28:	601a      	str	r2, [r3, #0]
    dd2a:	f64b 2370 	movw	r3, #47728	; 0xba70
    dd2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd32:	681a      	ldr	r2, [r3, #0]
    dd34:	f64b 0318 	movw	r3, #47128	; 0xb818
    dd38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd3c:	601a      	str	r2, [r3, #0]
    dd3e:	f64b 0324 	movw	r3, #47140	; 0xb824
    dd42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd46:	2200      	movs	r2, #0
    dd48:	801a      	strh	r2, [r3, #0]
    dd4a:	f64b 0328 	movw	r3, #47144	; 0xb828
    dd4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd52:	f04f 0200 	mov.w	r2, #0
    dd56:	601a      	str	r2, [r3, #0]
    dd58:	f001 bc50 	b.w	f5fc <auto_nav+0x21a4>
            fly_to(1);
    dd5c:	2001      	movs	r0, #1
    dd5e:	f001 fd8f 	bl	f880 <fly_to>
            auto_pitch = FALSE;
    dd62:	f24b 439f 	movw	r3, #46239	; 0xb49f
    dd66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd6a:	2200      	movs	r2, #0
    dd6c:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
    dd6e:	f64b 033c 	movw	r3, #47164	; 0xb83c
    dd72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd76:	f04f 0200 	mov.w	r2, #0
    dd7a:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
    dd7c:	f24b 439d 	movw	r3, #46237	; 0xb49d
    dd80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd84:	2203      	movs	r2, #3
    dd86:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[1].a;
    dd88:	f240 1340 	movw	r3, #320	; 0x140
    dd8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd90:	695a      	ldr	r2, [r3, #20]
    dd92:	f240 133c 	movw	r3, #316	; 0x13c
    dd96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd9a:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
    dd9c:	f64b 0304 	movw	r3, #47108	; 0xb804
    dda0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dda4:	f04f 0200 	mov.w	r2, #0
    dda8:	601a      	str	r2, [r3, #0]
          }
          return;
    ddaa:	f001 bc27 	b.w	f5fc <auto_nav+0x21a4>
      }
      else if (nav_stage == 3)
    ddae:	f64b 0310 	movw	r3, #47120	; 0xb810
    ddb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddb6:	781b      	ldrb	r3, [r3, #0]
    ddb8:	2b03      	cmp	r3, #3
    ddba:	d16f      	bne.n	de9c <auto_nav+0xa44>
      {
	   nav_stage = 3;         
    ddbc:	f64b 0310 	movw	r3, #47120	; 0xb810
    ddc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddc4:	2203      	movs	r2, #3
    ddc6:	701a      	strb	r2, [r3, #0]
           if (approaching(2)) NextStageFrom(2) else {
    ddc8:	2002      	movs	r0, #2
    ddca:	f001 fc25 	bl	f618 <approaching>
    ddce:	4603      	mov	r3, r0
    ddd0:	2b00      	cmp	r3, #0
    ddd2:	d034      	beq.n	de3e <auto_nav+0x9e6>
    ddd4:	f64b 031c 	movw	r3, #47132	; 0xb81c
    ddd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dddc:	2202      	movs	r2, #2
    ddde:	701a      	strb	r2, [r3, #0]
    dde0:	f64b 0310 	movw	r3, #47120	; 0xb810
    dde4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dde8:	781b      	ldrb	r3, [r3, #0]
    ddea:	3301      	adds	r3, #1
    ddec:	b2da      	uxtb	r2, r3
    ddee:	f64b 0310 	movw	r3, #47120	; 0xb810
    ddf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddf6:	701a      	strb	r2, [r3, #0]
    ddf8:	f64b 236c 	movw	r3, #47724	; 0xba6c
    ddfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de00:	681a      	ldr	r2, [r3, #0]
    de02:	f64b 0314 	movw	r3, #47124	; 0xb814
    de06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de0a:	601a      	str	r2, [r3, #0]
    de0c:	f64b 2370 	movw	r3, #47728	; 0xba70
    de10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de14:	681a      	ldr	r2, [r3, #0]
    de16:	f64b 0318 	movw	r3, #47128	; 0xb818
    de1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de1e:	601a      	str	r2, [r3, #0]
    de20:	f64b 0324 	movw	r3, #47140	; 0xb824
    de24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de28:	2200      	movs	r2, #0
    de2a:	801a      	strh	r2, [r3, #0]
    de2c:	f64b 0328 	movw	r3, #47144	; 0xb828
    de30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de34:	f04f 0200 	mov.w	r2, #0
    de38:	601a      	str	r2, [r3, #0]
    de3a:	f001 bbdf 	b.w	f5fc <auto_nav+0x21a4>
            route_to(last_wp, 2);
    de3e:	f64b 031c 	movw	r3, #47132	; 0xb81c
    de42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de46:	781b      	ldrb	r3, [r3, #0]
    de48:	4618      	mov	r0, r3
    de4a:	2102      	movs	r1, #2
    de4c:	f001 fd3a 	bl	f8c4 <route_to>
            auto_pitch = FALSE;
    de50:	f24b 439f 	movw	r3, #46239	; 0xb49f
    de54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de58:	2200      	movs	r2, #0
    de5a:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
    de5c:	f64b 033c 	movw	r3, #47164	; 0xb83c
    de60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de64:	f04f 0200 	mov.w	r2, #0
    de68:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
    de6a:	f24b 439d 	movw	r3, #46237	; 0xb49d
    de6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de72:	2203      	movs	r2, #3
    de74:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[2].a;
    de76:	f240 1340 	movw	r3, #320	; 0x140
    de7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de7e:	6a1a      	ldr	r2, [r3, #32]
    de80:	f240 133c 	movw	r3, #316	; 0x13c
    de84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de88:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
    de8a:	f64b 0304 	movw	r3, #47108	; 0xb804
    de8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de92:	f04f 0200 	mov.w	r2, #0
    de96:	601a      	str	r2, [r3, #0]
          }
          return;
    de98:	f001 bbb0 	b.w	f5fc <auto_nav+0x21a4>
       }
       else if (nav_stage == 4)
    de9c:	f64b 0310 	movw	r3, #47120	; 0xb810
    dea0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dea4:	781b      	ldrb	r3, [r3, #0]
    dea6:	2b04      	cmp	r3, #4
    dea8:	d169      	bne.n	df7e <auto_nav+0xb26>
       {
          nav_stage = 4;
    deaa:	f64b 0310 	movw	r3, #47120	; 0xb810
    deae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    deb2:	2204      	movs	r2, #4
    deb4:	701a      	strb	r2, [r3, #0]
          if (approaching(3)) NextStageFrom(3) else {
    deb6:	2003      	movs	r0, #3
    deb8:	f001 fbae 	bl	f618 <approaching>
    debc:	4603      	mov	r3, r0
    debe:	2b00      	cmp	r3, #0
    dec0:	d034      	beq.n	df2c <auto_nav+0xad4>
    dec2:	f64b 031c 	movw	r3, #47132	; 0xb81c
    dec6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    deca:	2203      	movs	r2, #3
    decc:	701a      	strb	r2, [r3, #0]
    dece:	f64b 0310 	movw	r3, #47120	; 0xb810
    ded2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ded6:	781b      	ldrb	r3, [r3, #0]
    ded8:	3301      	adds	r3, #1
    deda:	b2da      	uxtb	r2, r3
    dedc:	f64b 0310 	movw	r3, #47120	; 0xb810
    dee0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dee4:	701a      	strb	r2, [r3, #0]
    dee6:	f64b 236c 	movw	r3, #47724	; 0xba6c
    deea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    deee:	681a      	ldr	r2, [r3, #0]
    def0:	f64b 0314 	movw	r3, #47124	; 0xb814
    def4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    def8:	601a      	str	r2, [r3, #0]
    defa:	f64b 2370 	movw	r3, #47728	; 0xba70
    defe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df02:	681a      	ldr	r2, [r3, #0]
    df04:	f64b 0318 	movw	r3, #47128	; 0xb818
    df08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df0c:	601a      	str	r2, [r3, #0]
    df0e:	f64b 0324 	movw	r3, #47140	; 0xb824
    df12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df16:	2200      	movs	r2, #0
    df18:	801a      	strh	r2, [r3, #0]
    df1a:	f64b 0328 	movw	r3, #47144	; 0xb828
    df1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df22:	f04f 0200 	mov.w	r2, #0
    df26:	601a      	str	r2, [r3, #0]
    df28:	f001 bb68 	b.w	f5fc <auto_nav+0x21a4>
            fly_to(3);
    df2c:	2003      	movs	r0, #3
    df2e:	f001 fca7 	bl	f880 <fly_to>
            auto_pitch = FALSE;
    df32:	f24b 439f 	movw	r3, #46239	; 0xb49f
    df36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df3a:	2200      	movs	r2, #0
    df3c:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
    df3e:	f64b 033c 	movw	r3, #47164	; 0xb83c
    df42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df46:	f04f 0200 	mov.w	r2, #0
    df4a:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
    df4c:	f24b 439d 	movw	r3, #46237	; 0xb49d
    df50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df54:	2203      	movs	r2, #3
    df56:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[3].a;
    df58:	f240 1340 	movw	r3, #320	; 0x140
    df5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    df62:	f240 133c 	movw	r3, #316	; 0x13c
    df66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df6a:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
    df6c:	f64b 0304 	movw	r3, #47108	; 0xb804
    df70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df74:	f04f 0200 	mov.w	r2, #0
    df78:	601a      	str	r2, [r3, #0]
          }
          return;
    df7a:	f001 bb3f 	b.w	f5fc <auto_nav+0x21a4>
       }
       else if (nav_stage == 5)
    df7e:	f64b 0310 	movw	r3, #47120	; 0xb810
    df82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df86:	781b      	ldrb	r3, [r3, #0]
    df88:	2b05      	cmp	r3, #5
    df8a:	d169      	bne.n	e060 <auto_nav+0xc08>
       {
          nav_stage =5;
    df8c:	f64b 0310 	movw	r3, #47120	; 0xb810
    df90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df94:	2205      	movs	r2, #5
    df96:	701a      	strb	r2, [r3, #0]
          if (approaching(4)) NextStageFrom(4) else {
    df98:	2004      	movs	r0, #4
    df9a:	f001 fb3d 	bl	f618 <approaching>
    df9e:	4603      	mov	r3, r0
    dfa0:	2b00      	cmp	r3, #0
    dfa2:	d034      	beq.n	e00e <auto_nav+0xbb6>
    dfa4:	f64b 031c 	movw	r3, #47132	; 0xb81c
    dfa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfac:	2204      	movs	r2, #4
    dfae:	701a      	strb	r2, [r3, #0]
    dfb0:	f64b 0310 	movw	r3, #47120	; 0xb810
    dfb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfb8:	781b      	ldrb	r3, [r3, #0]
    dfba:	3301      	adds	r3, #1
    dfbc:	b2da      	uxtb	r2, r3
    dfbe:	f64b 0310 	movw	r3, #47120	; 0xb810
    dfc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfc6:	701a      	strb	r2, [r3, #0]
    dfc8:	f64b 236c 	movw	r3, #47724	; 0xba6c
    dfcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfd0:	681a      	ldr	r2, [r3, #0]
    dfd2:	f64b 0314 	movw	r3, #47124	; 0xb814
    dfd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfda:	601a      	str	r2, [r3, #0]
    dfdc:	f64b 2370 	movw	r3, #47728	; 0xba70
    dfe0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfe4:	681a      	ldr	r2, [r3, #0]
    dfe6:	f64b 0318 	movw	r3, #47128	; 0xb818
    dfea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfee:	601a      	str	r2, [r3, #0]
    dff0:	f64b 0324 	movw	r3, #47140	; 0xb824
    dff4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dff8:	2200      	movs	r2, #0
    dffa:	801a      	strh	r2, [r3, #0]
    dffc:	f64b 0328 	movw	r3, #47144	; 0xb828
    e000:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e004:	f04f 0200 	mov.w	r2, #0
    e008:	601a      	str	r2, [r3, #0]
    e00a:	f001 baf7 	b.w	f5fc <auto_nav+0x21a4>
            fly_to(4);
    e00e:	2004      	movs	r0, #4
    e010:	f001 fc36 	bl	f880 <fly_to>
            auto_pitch = FALSE;
    e014:	f24b 439f 	movw	r3, #46239	; 0xb49f
    e018:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e01c:	2200      	movs	r2, #0
    e01e:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
    e020:	f64b 033c 	movw	r3, #47164	; 0xb83c
    e024:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e028:	f04f 0200 	mov.w	r2, #0
    e02c:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
    e02e:	f24b 439d 	movw	r3, #46237	; 0xb49d
    e032:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e036:	2203      	movs	r2, #3
    e038:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[4].a;
    e03a:	f240 1340 	movw	r3, #320	; 0x140
    e03e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e042:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e044:	f240 133c 	movw	r3, #316	; 0x13c
    e048:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e04c:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
    e04e:	f64b 0304 	movw	r3, #47108	; 0xb804
    e052:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e056:	f04f 0200 	mov.w	r2, #0
    e05a:	601a      	str	r2, [r3, #0]
          }
          return;
    e05c:	f001 bace 	b.w	f5fc <auto_nav+0x21a4>
       }
       else if (nav_stage == 6)
    e060:	f64b 0310 	movw	r3, #47120	; 0xb810
    e064:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e068:	781b      	ldrb	r3, [r3, #0]
    e06a:	2b06      	cmp	r3, #6
    e06c:	d16f      	bne.n	e14e <auto_nav+0xcf6>
       {
          nav_stage =6;
    e06e:	f64b 0310 	movw	r3, #47120	; 0xb810
    e072:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e076:	2206      	movs	r2, #6
    e078:	701a      	strb	r2, [r3, #0]
          if (approaching(5)) NextStageFrom(5) else {
    e07a:	2005      	movs	r0, #5
    e07c:	f001 facc 	bl	f618 <approaching>
    e080:	4603      	mov	r3, r0
    e082:	2b00      	cmp	r3, #0
    e084:	d034      	beq.n	e0f0 <auto_nav+0xc98>
    e086:	f64b 031c 	movw	r3, #47132	; 0xb81c
    e08a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e08e:	2205      	movs	r2, #5
    e090:	701a      	strb	r2, [r3, #0]
    e092:	f64b 0310 	movw	r3, #47120	; 0xb810
    e096:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e09a:	781b      	ldrb	r3, [r3, #0]
    e09c:	3301      	adds	r3, #1
    e09e:	b2da      	uxtb	r2, r3
    e0a0:	f64b 0310 	movw	r3, #47120	; 0xb810
    e0a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0a8:	701a      	strb	r2, [r3, #0]
    e0aa:	f64b 236c 	movw	r3, #47724	; 0xba6c
    e0ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0b2:	681a      	ldr	r2, [r3, #0]
    e0b4:	f64b 0314 	movw	r3, #47124	; 0xb814
    e0b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0bc:	601a      	str	r2, [r3, #0]
    e0be:	f64b 2370 	movw	r3, #47728	; 0xba70
    e0c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0c6:	681a      	ldr	r2, [r3, #0]
    e0c8:	f64b 0318 	movw	r3, #47128	; 0xb818
    e0cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0d0:	601a      	str	r2, [r3, #0]
    e0d2:	f64b 0324 	movw	r3, #47140	; 0xb824
    e0d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0da:	2200      	movs	r2, #0
    e0dc:	801a      	strh	r2, [r3, #0]
    e0de:	f64b 0328 	movw	r3, #47144	; 0xb828
    e0e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0e6:	f04f 0200 	mov.w	r2, #0
    e0ea:	601a      	str	r2, [r3, #0]
    e0ec:	f001 ba86 	b.w	f5fc <auto_nav+0x21a4>
            route_to(last_wp, 5);
    e0f0:	f64b 031c 	movw	r3, #47132	; 0xb81c
    e0f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0f8:	781b      	ldrb	r3, [r3, #0]
    e0fa:	4618      	mov	r0, r3
    e0fc:	2105      	movs	r1, #5
    e0fe:	f001 fbe1 	bl	f8c4 <route_to>
            auto_pitch = FALSE;
    e102:	f24b 439f 	movw	r3, #46239	; 0xb49f
    e106:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e10a:	2200      	movs	r2, #0
    e10c:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
    e10e:	f64b 033c 	movw	r3, #47164	; 0xb83c
    e112:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e116:	f04f 0200 	mov.w	r2, #0
    e11a:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
    e11c:	f24b 439d 	movw	r3, #46237	; 0xb49d
    e120:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e124:	2203      	movs	r2, #3
    e126:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[5].a;
    e128:	f240 1340 	movw	r3, #320	; 0x140
    e12c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e130:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    e132:	f240 133c 	movw	r3, #316	; 0x13c
    e136:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e13a:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
    e13c:	f64b 0304 	movw	r3, #47108	; 0xb804
    e140:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e144:	f04f 0200 	mov.w	r2, #0
    e148:	601a      	str	r2, [r3, #0]
          }
          return;
    e14a:	f001 ba57 	b.w	f5fc <auto_nav+0x21a4>
       }
       else if (nav_stage == 7)
    e14e:	f64b 0310 	movw	r3, #47120	; 0xb810
    e152:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e156:	781b      	ldrb	r3, [r3, #0]
    e158:	2b07      	cmp	r3, #7
    e15a:	d106      	bne.n	e16a <auto_nav+0xd12>
       {
	   nav_stage =7;
    e15c:	f64b 0310 	movw	r3, #47120	; 0xb810
    e160:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e164:	2207      	movs	r2, #7
    e166:	701a      	strb	r2, [r3, #0]
	   Goto(while_5)
    e168:	e50a      	b.n	db80 <auto_nav+0x728>
	}
       
       else if (nav_stage == 8){
    e16a:	f64b 0310 	movw	r3, #47120	; 0xb810
    e16e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e172:	781b      	ldrb	r3, [r3, #0]
    e174:	2b08      	cmp	r3, #8
    e176:	f041 8241 	bne.w	f5fc <auto_nav+0x21a4>
	  Label(endwhile_6)
	  nav_stage =8;
    e17a:	f64b 0310 	movw	r3, #47120	; 0xb810
    e17e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e182:	2208      	movs	r2, #8
    e184:	701a      	strb	r2, [r3, #0]
          NextBlock();
    e186:	f64b 0311 	movw	r3, #47121	; 0xb811
    e18a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e18e:	781b      	ldrb	r3, [r3, #0]
    e190:	3301      	adds	r3, #1
    e192:	b2da      	uxtb	r2, r3
    e194:	f64b 0311 	movw	r3, #47121	; 0xb811
    e198:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e19c:	701a      	strb	r2, [r3, #0]
    e19e:	f64b 0310 	movw	r3, #47120	; 0xb810
    e1a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1a6:	2200      	movs	r2, #0
    e1a8:	701a      	strb	r2, [r3, #0]
    e1aa:	f64b 0326 	movw	r3, #47142	; 0xb826
    e1ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1b2:	2200      	movs	r2, #0
    e1b4:	801a      	strh	r2, [r3, #0]
    e1b6:	f64b 236c 	movw	r3, #47724	; 0xba6c
    e1ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1be:	681a      	ldr	r2, [r3, #0]
    e1c0:	f64b 0314 	movw	r3, #47124	; 0xb814
    e1c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1c8:	601a      	str	r2, [r3, #0]
    e1ca:	f64b 2370 	movw	r3, #47728	; 0xba70
    e1ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1d2:	681a      	ldr	r2, [r3, #0]
    e1d4:	f64b 0318 	movw	r3, #47128	; 0xb818
    e1d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1dc:	601a      	str	r2, [r3, #0]
    e1de:	f64b 0324 	movw	r3, #47140	; 0xb824
    e1e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1e6:	2200      	movs	r2, #0
    e1e8:	801a      	strh	r2, [r3, #0]
    e1ea:	f64b 0328 	movw	r3, #47144	; 0xb828
    e1ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1f2:	f04f 0200 	mov.w	r2, #0
    e1f6:	601a      	str	r2, [r3, #0]
    e1f8:	f001 ba00 	b.w	f5fc <auto_nav+0x21a4>
       }
       else { }
}
else if (nav_block == 3) // xyz
    e1fc:	f64b 0311 	movw	r3, #47121	; 0xb811
    e200:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e204:	781b      	ldrb	r3, [r3, #0]
    e206:	2b03      	cmp	r3, #3
    e208:	f040 8388 	bne.w	e91c <auto_nav+0x14c4>
{
    nav_block = 3;
    e20c:	f64b 0311 	movw	r3, #47121	; 0xb811
    e210:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e214:	2203      	movs	r2, #3
    e216:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(4) }
    e218:	f24b 43a0 	movw	r3, #46240	; 0xb4a0
    e21c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e220:	781b      	ldrb	r3, [r3, #0]
    e222:	2b00      	cmp	r3, #0
    e224:	d007      	beq.n	e236 <auto_nav+0xdde>
    e226:	f24b 43a0 	movw	r3, #46240	; 0xb4a0
    e22a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e22e:	2200      	movs	r2, #0
    e230:	701a      	strb	r2, [r3, #0]
    e232:	2301      	movs	r3, #1
    e234:	e000      	b.n	e238 <auto_nav+0xde0>
    e236:	2300      	movs	r3, #0
    e238:	2b00      	cmp	r3, #0
    e23a:	d034      	beq.n	e2a6 <auto_nav+0xe4e>
    e23c:	f64b 0311 	movw	r3, #47121	; 0xb811
    e240:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e244:	2204      	movs	r2, #4
    e246:	701a      	strb	r2, [r3, #0]
    e248:	f64b 0310 	movw	r3, #47120	; 0xb810
    e24c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e250:	2200      	movs	r2, #0
    e252:	701a      	strb	r2, [r3, #0]
    e254:	f64b 0326 	movw	r3, #47142	; 0xb826
    e258:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e25c:	2200      	movs	r2, #0
    e25e:	801a      	strh	r2, [r3, #0]
    e260:	f64b 236c 	movw	r3, #47724	; 0xba6c
    e264:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e268:	681a      	ldr	r2, [r3, #0]
    e26a:	f64b 0314 	movw	r3, #47124	; 0xb814
    e26e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e272:	601a      	str	r2, [r3, #0]
    e274:	f64b 2370 	movw	r3, #47728	; 0xba70
    e278:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e27c:	681a      	ldr	r2, [r3, #0]
    e27e:	f64b 0318 	movw	r3, #47128	; 0xb818
    e282:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e286:	601a      	str	r2, [r3, #0]
    e288:	f64b 0324 	movw	r3, #47140	; 0xb824
    e28c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e290:	2200      	movs	r2, #0
    e292:	801a      	strh	r2, [r3, #0]
    e294:	f64b 0328 	movw	r3, #47144	; 0xb828
    e298:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e29c:	f04f 0200 	mov.w	r2, #0
    e2a0:	601a      	str	r2, [r3, #0]
    e2a2:	f001 b9ab 	b.w	f5fc <auto_nav+0x21a4>
    if(nav_stage == 0)
    e2a6:	f64b 0310 	movw	r3, #47120	; 0xb810
    e2aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2ae:	781b      	ldrb	r3, [r3, #0]
    e2b0:	2b00      	cmp	r3, #0
    e2b2:	f040 82ea 	bne.w	e88a <auto_nav+0x1432>
    {
        nav_stage = 0;
    e2b6:	f64b 0310 	movw	r3, #47120	; 0xb810
    e2ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2be:	2200      	movs	r2, #0
    e2c0:	701a      	strb	r2, [r3, #0]
        Goto3D(50)
    e2c2:	f24b 439c 	movw	r3, #46236	; 0xb49c
    e2c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2ca:	781b      	ldrb	r3, [r3, #0]
    e2cc:	2b02      	cmp	r3, #2
    e2ce:	f040 81a5 	bne.w	e61c <auto_nav+0x11c4>
    e2d2:	f24b 53c0 	movw	r3, #46528	; 0xb5c0
    e2d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2da:	88db      	ldrh	r3, [r3, #6]
    e2dc:	84fb      	strh	r3, [r7, #38]	; 0x26
    e2de:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
    e2e2:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
    e2e6:	dc04      	bgt.n	e2f2 <auto_nav+0xe9a>
    e2e8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
    e2ec:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
    e2f0:	da7e      	bge.n	e3f0 <auto_nav+0xf98>
    e2f2:	f64b 035c 	movw	r3, #47196	; 0xb85c
    e2f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2fa:	681b      	ldr	r3, [r3, #0]
    e2fc:	4618      	mov	r0, r3
    e2fe:	f004 fb5b 	bl	129b8 <__aeabi_f2d>
    e302:	4604      	mov	r4, r0
    e304:	460d      	mov	r5, r1
    e306:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
    e30a:	4618      	mov	r0, r3
    e30c:	f004 ff94 	bl	13238 <__aeabi_i2f>
    e310:	4603      	mov	r3, r0
    e312:	4618      	mov	r0, r3
    e314:	f04f 0100 	mov.w	r1, #0
    e318:	f2c4 6116 	movt	r1, #17942	; 0x4616
    e31c:	f005 f894 	bl	13448 <__aeabi_fdiv>
    e320:	4603      	mov	r3, r0
    e322:	4618      	mov	r0, r3
    e324:	f004 fb48 	bl	129b8 <__aeabi_f2d>
    e328:	4602      	mov	r2, r0
    e32a:	460b      	mov	r3, r1
    e32c:	4610      	mov	r0, r2
    e32e:	4619      	mov	r1, r3
    e330:	f04f 0200 	mov.w	r2, #0
    e334:	f04f 0300 	mov.w	r3, #0
    e338:	f2cc 0334 	movt	r3, #49204	; 0xc034
    e33c:	f004 fb90 	bl	12a60 <__aeabi_dmul>
    e340:	4602      	mov	r2, r0
    e342:	460b      	mov	r3, r1
    e344:	4610      	mov	r0, r2
    e346:	4619      	mov	r1, r3
    e348:	f04f 0200 	mov.w	r2, #0
    e34c:	f04f 0300 	mov.w	r3, #0
    e350:	f004 f9d4 	bl	126fc <__adddf3>
    e354:	4602      	mov	r2, r0
    e356:	460b      	mov	r3, r1
    e358:	4620      	mov	r0, r4
    e35a:	4629      	mov	r1, r5
    e35c:	f004 f9ce 	bl	126fc <__adddf3>
    e360:	4602      	mov	r2, r0
    e362:	460b      	mov	r3, r1
    e364:	4610      	mov	r0, r2
    e366:	4619      	mov	r1, r3
    e368:	f004 fe5c 	bl	13024 <__aeabi_d2f>
    e36c:	4602      	mov	r2, r0
    e36e:	f64b 035c 	movw	r3, #47196	; 0xb85c
    e372:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e376:	601a      	str	r2, [r3, #0]
    e378:	f64b 035c 	movw	r3, #47196	; 0xb85c
    e37c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e380:	681b      	ldr	r3, [r3, #0]
    e382:	4618      	mov	r0, r3
    e384:	f04f 0100 	mov.w	r1, #0
    e388:	f2c4 317a 	movt	r1, #17274	; 0x437a
    e38c:	f005 f950 	bl	13630 <__aeabi_fcmple>
    e390:	4603      	mov	r3, r0
    e392:	2b00      	cmp	r3, #0
    e394:	d005      	beq.n	e3a2 <auto_nav+0xf4a>
    e396:	f64b 035c 	movw	r3, #47196	; 0xb85c
    e39a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e39e:	681a      	ldr	r2, [r3, #0]
    e3a0:	e003      	b.n	e3aa <auto_nav+0xf52>
    e3a2:	f04f 0200 	mov.w	r2, #0
    e3a6:	f2c4 327a 	movt	r2, #17274	; 0x437a
    e3aa:	f64b 035c 	movw	r3, #47196	; 0xb85c
    e3ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3b2:	601a      	str	r2, [r3, #0]
    e3b4:	f64b 035c 	movw	r3, #47196	; 0xb85c
    e3b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3bc:	681b      	ldr	r3, [r3, #0]
    e3be:	4618      	mov	r0, r3
    e3c0:	f04f 0100 	mov.w	r1, #0
    e3c4:	f2cc 317a 	movt	r1, #50042	; 0xc37a
    e3c8:	f005 f93c 	bl	13644 <__aeabi_fcmpge>
    e3cc:	4603      	mov	r3, r0
    e3ce:	2b00      	cmp	r3, #0
    e3d0:	d005      	beq.n	e3de <auto_nav+0xf86>
    e3d2:	f64b 035c 	movw	r3, #47196	; 0xb85c
    e3d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3da:	681a      	ldr	r2, [r3, #0]
    e3dc:	e003      	b.n	e3e6 <auto_nav+0xf8e>
    e3de:	f04f 0200 	mov.w	r2, #0
    e3e2:	f2cc 327a 	movt	r2, #50042	; 0xc37a
    e3e6:	f64b 035c 	movw	r3, #47196	; 0xb85c
    e3ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3ee:	601a      	str	r2, [r3, #0]
    e3f0:	f24b 53c0 	movw	r3, #46528	; 0xb5c0
    e3f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3f8:	889b      	ldrh	r3, [r3, #4]
    e3fa:	84bb      	strh	r3, [r7, #36]	; 0x24
    e3fc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
    e400:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
    e404:	dc04      	bgt.n	e410 <auto_nav+0xfb8>
    e406:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
    e40a:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
    e40e:	da7e      	bge.n	e50e <auto_nav+0x10b6>
    e410:	f64b 0360 	movw	r3, #47200	; 0xb860
    e414:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e418:	681b      	ldr	r3, [r3, #0]
    e41a:	4618      	mov	r0, r3
    e41c:	f004 facc 	bl	129b8 <__aeabi_f2d>
    e420:	4604      	mov	r4, r0
    e422:	460d      	mov	r5, r1
    e424:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
    e428:	4618      	mov	r0, r3
    e42a:	f004 ff05 	bl	13238 <__aeabi_i2f>
    e42e:	4603      	mov	r3, r0
    e430:	4618      	mov	r0, r3
    e432:	f04f 0100 	mov.w	r1, #0
    e436:	f2c4 6116 	movt	r1, #17942	; 0x4616
    e43a:	f005 f805 	bl	13448 <__aeabi_fdiv>
    e43e:	4603      	mov	r3, r0
    e440:	4618      	mov	r0, r3
    e442:	f004 fab9 	bl	129b8 <__aeabi_f2d>
    e446:	4602      	mov	r2, r0
    e448:	460b      	mov	r3, r1
    e44a:	4610      	mov	r0, r2
    e44c:	4619      	mov	r1, r3
    e44e:	f04f 0200 	mov.w	r2, #0
    e452:	f04f 0300 	mov.w	r3, #0
    e456:	f2cc 0334 	movt	r3, #49204	; 0xc034
    e45a:	f004 fb01 	bl	12a60 <__aeabi_dmul>
    e45e:	4602      	mov	r2, r0
    e460:	460b      	mov	r3, r1
    e462:	4610      	mov	r0, r2
    e464:	4619      	mov	r1, r3
    e466:	f04f 0200 	mov.w	r2, #0
    e46a:	f04f 0300 	mov.w	r3, #0
    e46e:	f004 f945 	bl	126fc <__adddf3>
    e472:	4602      	mov	r2, r0
    e474:	460b      	mov	r3, r1
    e476:	4620      	mov	r0, r4
    e478:	4629      	mov	r1, r5
    e47a:	f004 f93f 	bl	126fc <__adddf3>
    e47e:	4602      	mov	r2, r0
    e480:	460b      	mov	r3, r1
    e482:	4610      	mov	r0, r2
    e484:	4619      	mov	r1, r3
    e486:	f004 fdcd 	bl	13024 <__aeabi_d2f>
    e48a:	4602      	mov	r2, r0
    e48c:	f64b 0360 	movw	r3, #47200	; 0xb860
    e490:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e494:	601a      	str	r2, [r3, #0]
    e496:	f64b 0360 	movw	r3, #47200	; 0xb860
    e49a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e49e:	681b      	ldr	r3, [r3, #0]
    e4a0:	4618      	mov	r0, r3
    e4a2:	f04f 0100 	mov.w	r1, #0
    e4a6:	f2c4 317a 	movt	r1, #17274	; 0x437a
    e4aa:	f005 f8c1 	bl	13630 <__aeabi_fcmple>
    e4ae:	4603      	mov	r3, r0
    e4b0:	2b00      	cmp	r3, #0
    e4b2:	d005      	beq.n	e4c0 <auto_nav+0x1068>
    e4b4:	f64b 0360 	movw	r3, #47200	; 0xb860
    e4b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4bc:	681a      	ldr	r2, [r3, #0]
    e4be:	e003      	b.n	e4c8 <auto_nav+0x1070>
    e4c0:	f04f 0200 	mov.w	r2, #0
    e4c4:	f2c4 327a 	movt	r2, #17274	; 0x437a
    e4c8:	f64b 0360 	movw	r3, #47200	; 0xb860
    e4cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4d0:	601a      	str	r2, [r3, #0]
    e4d2:	f64b 0360 	movw	r3, #47200	; 0xb860
    e4d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4da:	681b      	ldr	r3, [r3, #0]
    e4dc:	4618      	mov	r0, r3
    e4de:	f04f 0100 	mov.w	r1, #0
    e4e2:	f2cc 317a 	movt	r1, #50042	; 0xc37a
    e4e6:	f005 f8ad 	bl	13644 <__aeabi_fcmpge>
    e4ea:	4603      	mov	r3, r0
    e4ec:	2b00      	cmp	r3, #0
    e4ee:	d005      	beq.n	e4fc <auto_nav+0x10a4>
    e4f0:	f64b 0360 	movw	r3, #47200	; 0xb860
    e4f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4f8:	681a      	ldr	r2, [r3, #0]
    e4fa:	e003      	b.n	e504 <auto_nav+0x10ac>
    e4fc:	f04f 0200 	mov.w	r2, #0
    e500:	f2cc 327a 	movt	r2, #50042	; 0xc37a
    e504:	f64b 0360 	movw	r3, #47200	; 0xb860
    e508:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e50c:	601a      	str	r2, [r3, #0]
    e50e:	f24b 439d 	movw	r3, #46237	; 0xb49d
    e512:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e516:	2203      	movs	r2, #3
    e518:	701a      	strb	r2, [r3, #0]
    e51a:	f24b 53c0 	movw	r3, #46528	; 0xb5c0
    e51e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e522:	885b      	ldrh	r3, [r3, #2]
    e524:	847b      	strh	r3, [r7, #34]	; 0x22
    e526:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
    e52a:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
    e52e:	dc04      	bgt.n	e53a <auto_nav+0x10e2>
    e530:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
    e534:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
    e538:	da70      	bge.n	e61c <auto_nav+0x11c4>
    e53a:	f240 133c 	movw	r3, #316	; 0x13c
    e53e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e542:	681b      	ldr	r3, [r3, #0]
    e544:	4618      	mov	r0, r3
    e546:	f004 fa37 	bl	129b8 <__aeabi_f2d>
    e54a:	4604      	mov	r4, r0
    e54c:	460d      	mov	r5, r1
    e54e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
    e552:	4618      	mov	r0, r3
    e554:	f004 fe70 	bl	13238 <__aeabi_i2f>
    e558:	4603      	mov	r3, r0
    e55a:	4618      	mov	r0, r3
    e55c:	f04f 0100 	mov.w	r1, #0
    e560:	f2c4 6116 	movt	r1, #17942	; 0x4616
    e564:	f004 ff70 	bl	13448 <__aeabi_fdiv>
    e568:	4603      	mov	r3, r0
    e56a:	4618      	mov	r0, r3
    e56c:	f004 fa24 	bl	129b8 <__aeabi_f2d>
    e570:	4602      	mov	r2, r0
    e572:	460b      	mov	r3, r1
    e574:	f04f 0000 	mov.w	r0, #0
    e578:	f04f 0100 	mov.w	r1, #0
    e57c:	f004 f8bc 	bl	126f8 <__aeabi_dsub>
    e580:	4602      	mov	r2, r0
    e582:	460b      	mov	r3, r1
    e584:	4620      	mov	r0, r4
    e586:	4629      	mov	r1, r5
    e588:	f004 f8b8 	bl	126fc <__adddf3>
    e58c:	4602      	mov	r2, r0
    e58e:	460b      	mov	r3, r1
    e590:	4610      	mov	r0, r2
    e592:	4619      	mov	r1, r3
    e594:	f004 fd46 	bl	13024 <__aeabi_d2f>
    e598:	4602      	mov	r2, r0
    e59a:	f240 133c 	movw	r3, #316	; 0x13c
    e59e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5a2:	601a      	str	r2, [r3, #0]
    e5a4:	f240 133c 	movw	r3, #316	; 0x13c
    e5a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5ac:	681b      	ldr	r3, [r3, #0]
    e5ae:	4618      	mov	r0, r3
    e5b0:	f04f 0100 	mov.w	r1, #0
    e5b4:	f2c4 312f 	movt	r1, #17199	; 0x432f
    e5b8:	f005 f844 	bl	13644 <__aeabi_fcmpge>
    e5bc:	4603      	mov	r3, r0
    e5be:	2b00      	cmp	r3, #0
    e5c0:	d005      	beq.n	e5ce <auto_nav+0x1176>
    e5c2:	f240 133c 	movw	r3, #316	; 0x13c
    e5c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5ca:	681a      	ldr	r2, [r3, #0]
    e5cc:	e003      	b.n	e5d6 <auto_nav+0x117e>
    e5ce:	f04f 0200 	mov.w	r2, #0
    e5d2:	f2c4 322f 	movt	r2, #17199	; 0x432f
    e5d6:	f240 133c 	movw	r3, #316	; 0x13c
    e5da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5de:	601a      	str	r2, [r3, #0]
    e5e0:	f240 133c 	movw	r3, #316	; 0x13c
    e5e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5e8:	681b      	ldr	r3, [r3, #0]
    e5ea:	4618      	mov	r0, r3
    e5ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    e5f0:	f2c4 3189 	movt	r1, #17289	; 0x4389
    e5f4:	f005 f81c 	bl	13630 <__aeabi_fcmple>
    e5f8:	4603      	mov	r3, r0
    e5fa:	2b00      	cmp	r3, #0
    e5fc:	d005      	beq.n	e60a <auto_nav+0x11b2>
    e5fe:	f240 133c 	movw	r3, #316	; 0x13c
    e602:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e606:	681a      	ldr	r2, [r3, #0]
    e608:	e003      	b.n	e612 <auto_nav+0x11ba>
    e60a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    e60e:	f2c4 3289 	movt	r2, #17289	; 0x4389
    e612:	f240 133c 	movw	r3, #316	; 0x13c
    e616:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e61a:	601a      	str	r2, [r3, #0]
    e61c:	f64b 2370 	movw	r3, #47728	; 0xba70
    e620:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e624:	681a      	ldr	r2, [r3, #0]
    e626:	f64b 0360 	movw	r3, #47200	; 0xb860
    e62a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e62e:	681b      	ldr	r3, [r3, #0]
    e630:	4610      	mov	r0, r2
    e632:	4619      	mov	r1, r3
    e634:	f004 fd4a 	bl	130cc <__aeabi_fsub>
    e638:	4603      	mov	r3, r0
    e63a:	4618      	mov	r0, r3
    e63c:	f004 f9bc 	bl	129b8 <__aeabi_f2d>
    e640:	4604      	mov	r4, r0
    e642:	460d      	mov	r5, r1
    e644:	f64b 236c 	movw	r3, #47724	; 0xba6c
    e648:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e64c:	681a      	ldr	r2, [r3, #0]
    e64e:	f64b 035c 	movw	r3, #47196	; 0xb85c
    e652:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e656:	681b      	ldr	r3, [r3, #0]
    e658:	4610      	mov	r0, r2
    e65a:	4619      	mov	r1, r3
    e65c:	f004 fd36 	bl	130cc <__aeabi_fsub>
    e660:	4603      	mov	r3, r0
    e662:	4618      	mov	r0, r3
    e664:	f004 f9a8 	bl	129b8 <__aeabi_f2d>
    e668:	4602      	mov	r2, r0
    e66a:	460b      	mov	r3, r1
    e66c:	4620      	mov	r0, r4
    e66e:	4629      	mov	r1, r5
    e670:	f002 fa12 	bl	10a98 <pp_atan2>
    e674:	4602      	mov	r2, r0
    e676:	460b      	mov	r3, r1
    e678:	4610      	mov	r0, r2
    e67a:	4619      	mov	r1, r3
    e67c:	f004 fcd2 	bl	13024 <__aeabi_d2f>
    e680:	4603      	mov	r3, r0
    e682:	61fb      	str	r3, [r7, #28]
    e684:	69f8      	ldr	r0, [r7, #28]
    e686:	f004 f997 	bl	129b8 <__aeabi_f2d>
    e68a:	4604      	mov	r4, r0
    e68c:	460d      	mov	r5, r1
    e68e:	f64b 23a4 	movw	r3, #47780	; 0xbaa4
    e692:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e696:	681b      	ldr	r3, [r3, #0]
    e698:	4618      	mov	r0, r3
    e69a:	f04f 0100 	mov.w	r1, #0
    e69e:	f2cc 2148 	movt	r1, #49736	; 0xc248
    e6a2:	f004 fe1d 	bl	132e0 <__aeabi_fmul>
    e6a6:	4603      	mov	r3, r0
    e6a8:	4618      	mov	r0, r3
    e6aa:	f004 f985 	bl	129b8 <__aeabi_f2d>
    e6ae:	4602      	mov	r2, r0
    e6b0:	460b      	mov	r3, r1
    e6b2:	f04f 0000 	mov.w	r0, #0
    e6b6:	f04f 0100 	mov.w	r1, #0
    e6ba:	f2c4 0114 	movt	r1, #16404	; 0x4014
    e6be:	f004 faf9 	bl	12cb4 <__aeabi_ddiv>
    e6c2:	4602      	mov	r2, r0
    e6c4:	460b      	mov	r3, r1
    e6c6:	4620      	mov	r0, r4
    e6c8:	4629      	mov	r1, r5
    e6ca:	f004 f817 	bl	126fc <__adddf3>
    e6ce:	4602      	mov	r2, r0
    e6d0:	460b      	mov	r3, r1
    e6d2:	4610      	mov	r0, r2
    e6d4:	4619      	mov	r1, r3
    e6d6:	f004 fca5 	bl	13024 <__aeabi_d2f>
    e6da:	4603      	mov	r3, r0
    e6dc:	61bb      	str	r3, [r7, #24]
    e6de:	f64b 035c 	movw	r3, #47196	; 0xb85c
    e6e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6e6:	681b      	ldr	r3, [r3, #0]
    e6e8:	4618      	mov	r0, r3
    e6ea:	f004 f965 	bl	129b8 <__aeabi_f2d>
    e6ee:	4604      	mov	r4, r0
    e6f0:	460d      	mov	r5, r1
    e6f2:	69b8      	ldr	r0, [r7, #24]
    e6f4:	f004 f960 	bl	129b8 <__aeabi_f2d>
    e6f8:	4602      	mov	r2, r0
    e6fa:	460b      	mov	r3, r1
    e6fc:	4610      	mov	r0, r2
    e6fe:	4619      	mov	r1, r3
    e700:	a3b1      	add	r3, pc, #708	; (adr r3, e9c8 <auto_nav+0x1570>)
    e702:	e9d3 2300 	ldrd	r2, r3, [r3]
    e706:	f003 fff9 	bl	126fc <__adddf3>
    e70a:	4602      	mov	r2, r0
    e70c:	460b      	mov	r3, r1
    e70e:	4610      	mov	r0, r2
    e710:	4619      	mov	r1, r3
    e712:	f002 fa81 	bl	10c18 <pp_sin>
    e716:	4602      	mov	r2, r0
    e718:	460b      	mov	r3, r1
    e71a:	4610      	mov	r0, r2
    e71c:	4619      	mov	r1, r3
    e71e:	f04f 0200 	mov.w	r2, #0
    e722:	f04f 0300 	mov.w	r3, #0
    e726:	f2c4 0349 	movt	r3, #16457	; 0x4049
    e72a:	f004 f999 	bl	12a60 <__aeabi_dmul>
    e72e:	4602      	mov	r2, r0
    e730:	460b      	mov	r3, r1
    e732:	4620      	mov	r0, r4
    e734:	4629      	mov	r1, r5
    e736:	f003 ffe1 	bl	126fc <__adddf3>
    e73a:	4602      	mov	r2, r0
    e73c:	460b      	mov	r3, r1
    e73e:	4610      	mov	r0, r2
    e740:	4619      	mov	r1, r3
    e742:	f004 fc6f 	bl	13024 <__aeabi_d2f>
    e746:	4606      	mov	r6, r0
    e748:	f64b 0360 	movw	r3, #47200	; 0xb860
    e74c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e750:	681b      	ldr	r3, [r3, #0]
    e752:	4618      	mov	r0, r3
    e754:	f004 f930 	bl	129b8 <__aeabi_f2d>
    e758:	4604      	mov	r4, r0
    e75a:	460d      	mov	r5, r1
    e75c:	69b8      	ldr	r0, [r7, #24]
    e75e:	f004 f92b 	bl	129b8 <__aeabi_f2d>
    e762:	4602      	mov	r2, r0
    e764:	460b      	mov	r3, r1
    e766:	4610      	mov	r0, r2
    e768:	4619      	mov	r1, r3
    e76a:	f002 fa55 	bl	10c18 <pp_sin>
    e76e:	4602      	mov	r2, r0
    e770:	460b      	mov	r3, r1
    e772:	4610      	mov	r0, r2
    e774:	4619      	mov	r1, r3
    e776:	f04f 0200 	mov.w	r2, #0
    e77a:	f04f 0300 	mov.w	r3, #0
    e77e:	f2c4 0349 	movt	r3, #16457	; 0x4049
    e782:	f004 f96d 	bl	12a60 <__aeabi_dmul>
    e786:	4602      	mov	r2, r0
    e788:	460b      	mov	r3, r1
    e78a:	4620      	mov	r0, r4
    e78c:	4629      	mov	r1, r5
    e78e:	f003 ffb5 	bl	126fc <__adddf3>
    e792:	4602      	mov	r2, r0
    e794:	460b      	mov	r3, r1
    e796:	4610      	mov	r0, r2
    e798:	4619      	mov	r1, r3
    e79a:	f004 fc43 	bl	13024 <__aeabi_d2f>
    e79e:	4603      	mov	r3, r0
    e7a0:	4630      	mov	r0, r6
    e7a2:	4619      	mov	r1, r3
    e7a4:	f001 f81c 	bl	f7e0 <fly_to_xy>
    e7a8:	69b8      	ldr	r0, [r7, #24]
    e7aa:	f004 f905 	bl	129b8 <__aeabi_f2d>
    e7ae:	4602      	mov	r2, r0
    e7b0:	460b      	mov	r3, r1
    e7b2:	a185      	add	r1, pc, #532	; (adr r1, e9c8 <auto_nav+0x1570>)
    e7b4:	e9d1 0100 	ldrd	r0, r1, [r1]
    e7b8:	f003 ff9e 	bl	126f8 <__aeabi_dsub>
    e7bc:	4602      	mov	r2, r0
    e7be:	460b      	mov	r3, r1
    e7c0:	4610      	mov	r0, r2
    e7c2:	4619      	mov	r1, r3
    e7c4:	a382      	add	r3, pc, #520	; (adr r3, e9d0 <auto_nav+0x1578>)
    e7c6:	e9d3 2300 	ldrd	r2, r3, [r3]
    e7ca:	f004 fa73 	bl	12cb4 <__aeabi_ddiv>
    e7ce:	4602      	mov	r2, r0
    e7d0:	460b      	mov	r3, r1
    e7d2:	4610      	mov	r0, r2
    e7d4:	4619      	mov	r1, r3
    e7d6:	f04f 0200 	mov.w	r2, #0
    e7da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    e7de:	f2c4 0366 	movt	r3, #16486	; 0x4066
    e7e2:	f004 f93d 	bl	12a60 <__aeabi_dmul>
    e7e6:	4602      	mov	r2, r0
    e7e8:	460b      	mov	r3, r1
    e7ea:	4610      	mov	r0, r2
    e7ec:	4619      	mov	r1, r3
    e7ee:	f004 fc19 	bl	13024 <__aeabi_d2f>
    e7f2:	4602      	mov	r2, r0
    e7f4:	f64b 032c 	movw	r3, #47148	; 0xb82c
    e7f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7fc:	601a      	str	r2, [r3, #0]
    e7fe:	e012      	b.n	e826 <auto_nav+0x13ce>
    e800:	f64b 032c 	movw	r3, #47148	; 0xb82c
    e804:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e808:	681b      	ldr	r3, [r3, #0]
    e80a:	4618      	mov	r0, r3
    e80c:	f04f 0100 	mov.w	r1, #0
    e810:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
    e814:	f004 fc5c 	bl	130d0 <__addsf3>
    e818:	4603      	mov	r3, r0
    e81a:	461a      	mov	r2, r3
    e81c:	f64b 032c 	movw	r3, #47148	; 0xb82c
    e820:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e824:	601a      	str	r2, [r3, #0]
    e826:	f64b 032c 	movw	r3, #47148	; 0xb82c
    e82a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e82e:	681b      	ldr	r3, [r3, #0]
    e830:	4618      	mov	r0, r3
    e832:	f04f 0100 	mov.w	r1, #0
    e836:	f004 fef1 	bl	1361c <__aeabi_fcmplt>
    e83a:	4603      	mov	r3, r0
    e83c:	2b00      	cmp	r3, #0
    e83e:	d1df      	bne.n	e800 <auto_nav+0x13a8>
    e840:	e012      	b.n	e868 <auto_nav+0x1410>
    e842:	f64b 032c 	movw	r3, #47148	; 0xb82c
    e846:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e84a:	681b      	ldr	r3, [r3, #0]
    e84c:	4618      	mov	r0, r3
    e84e:	f04f 0100 	mov.w	r1, #0
    e852:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
    e856:	f004 fc39 	bl	130cc <__aeabi_fsub>
    e85a:	4603      	mov	r3, r0
    e85c:	461a      	mov	r2, r3
    e85e:	f64b 032c 	movw	r3, #47148	; 0xb82c
    e862:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e866:	601a      	str	r2, [r3, #0]
    e868:	f64b 032c 	movw	r3, #47148	; 0xb82c
    e86c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e870:	681b      	ldr	r3, [r3, #0]
    e872:	4618      	mov	r0, r3
    e874:	f04f 0100 	mov.w	r1, #0
    e878:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
    e87c:	f004 fee2 	bl	13644 <__aeabi_fcmpge>
    e880:	4603      	mov	r3, r0
    e882:	2b00      	cmp	r3, #0
    e884:	d1dd      	bne.n	e842 <auto_nav+0x13ea>
        return;
    e886:	f000 beb9 	b.w	f5fc <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
    e88a:	f64b 0310 	movw	r3, #47120	; 0xb810
    e88e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e892:	781b      	ldrb	r3, [r3, #0]
    e894:	2b01      	cmp	r3, #1
    e896:	f040 86b1 	bne.w	f5fc <auto_nav+0x21a4>
    {
        nav_stage = 1;
    e89a:	f64b 0310 	movw	r3, #47120	; 0xb810
    e89e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8a2:	2201      	movs	r2, #1
    e8a4:	701a      	strb	r2, [r3, #0]
        NextBlock()
    e8a6:	f64b 0311 	movw	r3, #47121	; 0xb811
    e8aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8ae:	781b      	ldrb	r3, [r3, #0]
    e8b0:	3301      	adds	r3, #1
    e8b2:	b2da      	uxtb	r2, r3
    e8b4:	f64b 0311 	movw	r3, #47121	; 0xb811
    e8b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8bc:	701a      	strb	r2, [r3, #0]
    e8be:	f64b 0310 	movw	r3, #47120	; 0xb810
    e8c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8c6:	2200      	movs	r2, #0
    e8c8:	701a      	strb	r2, [r3, #0]
    e8ca:	f64b 0326 	movw	r3, #47142	; 0xb826
    e8ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8d2:	2200      	movs	r2, #0
    e8d4:	801a      	strh	r2, [r3, #0]
    e8d6:	f64b 236c 	movw	r3, #47724	; 0xba6c
    e8da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8de:	681a      	ldr	r2, [r3, #0]
    e8e0:	f64b 0314 	movw	r3, #47124	; 0xb814
    e8e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8e8:	601a      	str	r2, [r3, #0]
    e8ea:	f64b 2370 	movw	r3, #47728	; 0xba70
    e8ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8f2:	681a      	ldr	r2, [r3, #0]
    e8f4:	f64b 0318 	movw	r3, #47128	; 0xb818
    e8f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8fc:	601a      	str	r2, [r3, #0]
    e8fe:	f64b 0324 	movw	r3, #47140	; 0xb824
    e902:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e906:	2200      	movs	r2, #0
    e908:	801a      	strh	r2, [r3, #0]
    e90a:	f64b 0328 	movw	r3, #47144	; 0xb828
    e90e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e912:	f04f 0200 	mov.w	r2, #0
    e916:	601a      	str	r2, [r3, #0]
    e918:	f000 be70 	b.w	f5fc <auto_nav+0x21a4>
    }
    else { }
}
else if (nav_block == 4)
    e91c:	f64b 0311 	movw	r3, #47121	; 0xb811
    e920:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e924:	781b      	ldrb	r3, [r3, #0]
    e926:	2b04      	cmp	r3, #4
    e928:	f040 8202 	bne.w	ed30 <auto_nav+0x18d8>
{
    nav_block = 4;
    e92c:	f64b 0311 	movw	r3, #47121	; 0xb811
    e930:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e934:	2204      	movs	r2, #4
    e936:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(5) }
    e938:	f24b 43a0 	movw	r3, #46240	; 0xb4a0
    e93c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e940:	781b      	ldrb	r3, [r3, #0]
    e942:	2b00      	cmp	r3, #0
    e944:	d007      	beq.n	e956 <auto_nav+0x14fe>
    e946:	f24b 43a0 	movw	r3, #46240	; 0xb4a0
    e94a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e94e:	2200      	movs	r2, #0
    e950:	701a      	strb	r2, [r3, #0]
    e952:	2301      	movs	r3, #1
    e954:	e000      	b.n	e958 <auto_nav+0x1500>
    e956:	2300      	movs	r3, #0
    e958:	2b00      	cmp	r3, #0
    e95a:	d03d      	beq.n	e9d8 <auto_nav+0x1580>
    e95c:	f64b 0311 	movw	r3, #47121	; 0xb811
    e960:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e964:	2205      	movs	r2, #5
    e966:	701a      	strb	r2, [r3, #0]
    e968:	f64b 0310 	movw	r3, #47120	; 0xb810
    e96c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e970:	2200      	movs	r2, #0
    e972:	701a      	strb	r2, [r3, #0]
    e974:	f64b 0326 	movw	r3, #47142	; 0xb826
    e978:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e97c:	2200      	movs	r2, #0
    e97e:	801a      	strh	r2, [r3, #0]
    e980:	f64b 236c 	movw	r3, #47724	; 0xba6c
    e984:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e988:	681a      	ldr	r2, [r3, #0]
    e98a:	f64b 0314 	movw	r3, #47124	; 0xb814
    e98e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e992:	601a      	str	r2, [r3, #0]
    e994:	f64b 2370 	movw	r3, #47728	; 0xba70
    e998:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e99c:	681a      	ldr	r2, [r3, #0]
    e99e:	f64b 0318 	movw	r3, #47128	; 0xb818
    e9a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9a6:	601a      	str	r2, [r3, #0]
    e9a8:	f64b 0324 	movw	r3, #47140	; 0xb824
    e9ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9b0:	2200      	movs	r2, #0
    e9b2:	801a      	strh	r2, [r3, #0]
    e9b4:	f64b 0328 	movw	r3, #47144	; 0xb828
    e9b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9bc:	f04f 0200 	mov.w	r2, #0
    e9c0:	601a      	str	r2, [r3, #0]
    e9c2:	f000 be1b 	b.w	f5fc <auto_nav+0x21a4>
    e9c6:	bf00      	nop
    e9c8:	54442d18 	.word	0x54442d18
    e9cc:	3ff921fb 	.word	0x3ff921fb
    e9d0:	54442d18 	.word	0x54442d18
    e9d4:	400921fb 	.word	0x400921fb
    if(nav_stage == 0)
    e9d8:	f64b 0310 	movw	r3, #47120	; 0xb810
    e9dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9e0:	781b      	ldrb	r3, [r3, #0]
    e9e2:	2b00      	cmp	r3, #0
    e9e4:	f040 815b 	bne.w	ec9e <auto_nav+0x1846>
    {
        nav_stage = 0;
    e9e8:	f64b 0310 	movw	r3, #47120	; 0xb810
    e9ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9f0:	2200      	movs	r2, #0
    e9f2:	701a      	strb	r2, [r3, #0]
        auto_pitch = FALSE;
    e9f4:	f24b 439f 	movw	r3, #46239	; 0xb49f
    e9f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9fc:	2200      	movs	r2, #0
    e9fe:	701a      	strb	r2, [r3, #0]
        nav_pitch = 0.000000;
    ea00:	f64b 033c 	movw	r3, #47164	; 0xb83c
    ea04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea08:	f04f 0200 	mov.w	r2, #0
    ea0c:	601a      	str	r2, [r3, #0]
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
    ea0e:	f24b 439d 	movw	r3, #46237	; 0xb49d
    ea12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea16:	2203      	movs	r2, #3
    ea18:	701a      	strb	r2, [r3, #0]
        desired_altitude = waypoints[0].a;
    ea1a:	f240 1340 	movw	r3, #320	; 0x140
    ea1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea22:	689a      	ldr	r2, [r3, #8]
    ea24:	f240 133c 	movw	r3, #316	; 0x13c
    ea28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea2c:	601a      	str	r2, [r3, #0]
        pre_climb = 0.;
    ea2e:	f64b 0304 	movw	r3, #47108	; 0xb804
    ea32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea36:	f04f 0200 	mov.w	r2, #0
    ea3a:	601a      	str	r2, [r3, #0]
        Circle(0, 150);
    ea3c:	f64b 2370 	movw	r3, #47728	; 0xba70
    ea40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea44:	681a      	ldr	r2, [r3, #0]
    ea46:	f240 1340 	movw	r3, #320	; 0x140
    ea4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea4e:	685b      	ldr	r3, [r3, #4]
    ea50:	4610      	mov	r0, r2
    ea52:	4619      	mov	r1, r3
    ea54:	f004 fb3a 	bl	130cc <__aeabi_fsub>
    ea58:	4603      	mov	r3, r0
    ea5a:	4618      	mov	r0, r3
    ea5c:	f003 ffac 	bl	129b8 <__aeabi_f2d>
    ea60:	4604      	mov	r4, r0
    ea62:	460d      	mov	r5, r1
    ea64:	f64b 236c 	movw	r3, #47724	; 0xba6c
    ea68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea6c:	681a      	ldr	r2, [r3, #0]
    ea6e:	f240 1340 	movw	r3, #320	; 0x140
    ea72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea76:	681b      	ldr	r3, [r3, #0]
    ea78:	4610      	mov	r0, r2
    ea7a:	4619      	mov	r1, r3
    ea7c:	f004 fb26 	bl	130cc <__aeabi_fsub>
    ea80:	4603      	mov	r3, r0
    ea82:	4618      	mov	r0, r3
    ea84:	f003 ff98 	bl	129b8 <__aeabi_f2d>
    ea88:	4602      	mov	r2, r0
    ea8a:	460b      	mov	r3, r1
    ea8c:	4620      	mov	r0, r4
    ea8e:	4629      	mov	r1, r5
    ea90:	f002 f802 	bl	10a98 <pp_atan2>
    ea94:	4602      	mov	r2, r0
    ea96:	460b      	mov	r3, r1
    ea98:	4610      	mov	r0, r2
    ea9a:	4619      	mov	r1, r3
    ea9c:	f004 fac2 	bl	13024 <__aeabi_d2f>
    eaa0:	4603      	mov	r3, r0
    eaa2:	617b      	str	r3, [r7, #20]
    eaa4:	6978      	ldr	r0, [r7, #20]
    eaa6:	f003 ff87 	bl	129b8 <__aeabi_f2d>
    eaaa:	4604      	mov	r4, r0
    eaac:	460d      	mov	r5, r1
    eaae:	f64b 23a4 	movw	r3, #47780	; 0xbaa4
    eab2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eab6:	681b      	ldr	r3, [r3, #0]
    eab8:	4618      	mov	r0, r3
    eaba:	f04f 0100 	mov.w	r1, #0
    eabe:	f2cc 3116 	movt	r1, #49942	; 0xc316
    eac2:	f004 fc0d 	bl	132e0 <__aeabi_fmul>
    eac6:	4603      	mov	r3, r0
    eac8:	4618      	mov	r0, r3
    eaca:	f003 ff75 	bl	129b8 <__aeabi_f2d>
    eace:	4602      	mov	r2, r0
    ead0:	460b      	mov	r3, r1
    ead2:	f04f 0000 	mov.w	r0, #0
    ead6:	f04f 0100 	mov.w	r1, #0
    eada:	f2c4 0114 	movt	r1, #16404	; 0x4014
    eade:	f004 f8e9 	bl	12cb4 <__aeabi_ddiv>
    eae2:	4602      	mov	r2, r0
    eae4:	460b      	mov	r3, r1
    eae6:	4620      	mov	r0, r4
    eae8:	4629      	mov	r1, r5
    eaea:	f003 fe07 	bl	126fc <__adddf3>
    eaee:	4602      	mov	r2, r0
    eaf0:	460b      	mov	r3, r1
    eaf2:	4610      	mov	r0, r2
    eaf4:	4619      	mov	r1, r3
    eaf6:	f004 fa95 	bl	13024 <__aeabi_d2f>
    eafa:	4603      	mov	r3, r0
    eafc:	613b      	str	r3, [r7, #16]
    eafe:	f240 1340 	movw	r3, #320	; 0x140
    eb02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb06:	681b      	ldr	r3, [r3, #0]
    eb08:	4618      	mov	r0, r3
    eb0a:	f003 ff55 	bl	129b8 <__aeabi_f2d>
    eb0e:	4604      	mov	r4, r0
    eb10:	460d      	mov	r5, r1
    eb12:	6938      	ldr	r0, [r7, #16]
    eb14:	f003 ff50 	bl	129b8 <__aeabi_f2d>
    eb18:	4602      	mov	r2, r0
    eb1a:	460b      	mov	r3, r1
    eb1c:	4610      	mov	r0, r2
    eb1e:	4619      	mov	r1, r3
    eb20:	a3af      	add	r3, pc, #700	; (adr r3, ede0 <auto_nav+0x1988>)
    eb22:	e9d3 2300 	ldrd	r2, r3, [r3]
    eb26:	f003 fde9 	bl	126fc <__adddf3>
    eb2a:	4602      	mov	r2, r0
    eb2c:	460b      	mov	r3, r1
    eb2e:	4610      	mov	r0, r2
    eb30:	4619      	mov	r1, r3
    eb32:	f002 f871 	bl	10c18 <pp_sin>
    eb36:	4602      	mov	r2, r0
    eb38:	460b      	mov	r3, r1
    eb3a:	4610      	mov	r0, r2
    eb3c:	4619      	mov	r1, r3
    eb3e:	a3aa      	add	r3, pc, #680	; (adr r3, ede8 <auto_nav+0x1990>)
    eb40:	e9d3 2300 	ldrd	r2, r3, [r3]
    eb44:	f003 ff8c 	bl	12a60 <__aeabi_dmul>
    eb48:	4602      	mov	r2, r0
    eb4a:	460b      	mov	r3, r1
    eb4c:	4620      	mov	r0, r4
    eb4e:	4629      	mov	r1, r5
    eb50:	f003 fdd4 	bl	126fc <__adddf3>
    eb54:	4602      	mov	r2, r0
    eb56:	460b      	mov	r3, r1
    eb58:	4610      	mov	r0, r2
    eb5a:	4619      	mov	r1, r3
    eb5c:	f004 fa62 	bl	13024 <__aeabi_d2f>
    eb60:	4606      	mov	r6, r0
    eb62:	f240 1340 	movw	r3, #320	; 0x140
    eb66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb6a:	685b      	ldr	r3, [r3, #4]
    eb6c:	4618      	mov	r0, r3
    eb6e:	f003 ff23 	bl	129b8 <__aeabi_f2d>
    eb72:	4604      	mov	r4, r0
    eb74:	460d      	mov	r5, r1
    eb76:	6938      	ldr	r0, [r7, #16]
    eb78:	f003 ff1e 	bl	129b8 <__aeabi_f2d>
    eb7c:	4602      	mov	r2, r0
    eb7e:	460b      	mov	r3, r1
    eb80:	4610      	mov	r0, r2
    eb82:	4619      	mov	r1, r3
    eb84:	f002 f848 	bl	10c18 <pp_sin>
    eb88:	4602      	mov	r2, r0
    eb8a:	460b      	mov	r3, r1
    eb8c:	4610      	mov	r0, r2
    eb8e:	4619      	mov	r1, r3
    eb90:	a395      	add	r3, pc, #596	; (adr r3, ede8 <auto_nav+0x1990>)
    eb92:	e9d3 2300 	ldrd	r2, r3, [r3]
    eb96:	f003 ff63 	bl	12a60 <__aeabi_dmul>
    eb9a:	4602      	mov	r2, r0
    eb9c:	460b      	mov	r3, r1
    eb9e:	4620      	mov	r0, r4
    eba0:	4629      	mov	r1, r5
    eba2:	f003 fdab 	bl	126fc <__adddf3>
    eba6:	4602      	mov	r2, r0
    eba8:	460b      	mov	r3, r1
    ebaa:	4610      	mov	r0, r2
    ebac:	4619      	mov	r1, r3
    ebae:	f004 fa39 	bl	13024 <__aeabi_d2f>
    ebb2:	4603      	mov	r3, r0
    ebb4:	4630      	mov	r0, r6
    ebb6:	4619      	mov	r1, r3
    ebb8:	f000 fe12 	bl	f7e0 <fly_to_xy>
    ebbc:	6938      	ldr	r0, [r7, #16]
    ebbe:	f003 fefb 	bl	129b8 <__aeabi_f2d>
    ebc2:	4602      	mov	r2, r0
    ebc4:	460b      	mov	r3, r1
    ebc6:	a186      	add	r1, pc, #536	; (adr r1, ede0 <auto_nav+0x1988>)
    ebc8:	e9d1 0100 	ldrd	r0, r1, [r1]
    ebcc:	f003 fd94 	bl	126f8 <__aeabi_dsub>
    ebd0:	4602      	mov	r2, r0
    ebd2:	460b      	mov	r3, r1
    ebd4:	4610      	mov	r0, r2
    ebd6:	4619      	mov	r1, r3
    ebd8:	a385      	add	r3, pc, #532	; (adr r3, edf0 <auto_nav+0x1998>)
    ebda:	e9d3 2300 	ldrd	r2, r3, [r3]
    ebde:	f004 f869 	bl	12cb4 <__aeabi_ddiv>
    ebe2:	4602      	mov	r2, r0
    ebe4:	460b      	mov	r3, r1
    ebe6:	4610      	mov	r0, r2
    ebe8:	4619      	mov	r1, r3
    ebea:	f04f 0200 	mov.w	r2, #0
    ebee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    ebf2:	f2c4 0366 	movt	r3, #16486	; 0x4066
    ebf6:	f003 ff33 	bl	12a60 <__aeabi_dmul>
    ebfa:	4602      	mov	r2, r0
    ebfc:	460b      	mov	r3, r1
    ebfe:	4610      	mov	r0, r2
    ec00:	4619      	mov	r1, r3
    ec02:	f004 fa0f 	bl	13024 <__aeabi_d2f>
    ec06:	4602      	mov	r2, r0
    ec08:	f64b 032c 	movw	r3, #47148	; 0xb82c
    ec0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec10:	601a      	str	r2, [r3, #0]
    ec12:	e012      	b.n	ec3a <auto_nav+0x17e2>
    ec14:	f64b 032c 	movw	r3, #47148	; 0xb82c
    ec18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec1c:	681b      	ldr	r3, [r3, #0]
    ec1e:	4618      	mov	r0, r3
    ec20:	f04f 0100 	mov.w	r1, #0
    ec24:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
    ec28:	f004 fa52 	bl	130d0 <__addsf3>
    ec2c:	4603      	mov	r3, r0
    ec2e:	461a      	mov	r2, r3
    ec30:	f64b 032c 	movw	r3, #47148	; 0xb82c
    ec34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec38:	601a      	str	r2, [r3, #0]
    ec3a:	f64b 032c 	movw	r3, #47148	; 0xb82c
    ec3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec42:	681b      	ldr	r3, [r3, #0]
    ec44:	4618      	mov	r0, r3
    ec46:	f04f 0100 	mov.w	r1, #0
    ec4a:	f004 fce7 	bl	1361c <__aeabi_fcmplt>
    ec4e:	4603      	mov	r3, r0
    ec50:	2b00      	cmp	r3, #0
    ec52:	d1df      	bne.n	ec14 <auto_nav+0x17bc>
    ec54:	e012      	b.n	ec7c <auto_nav+0x1824>
    ec56:	f64b 032c 	movw	r3, #47148	; 0xb82c
    ec5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec5e:	681b      	ldr	r3, [r3, #0]
    ec60:	4618      	mov	r0, r3
    ec62:	f04f 0100 	mov.w	r1, #0
    ec66:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
    ec6a:	f004 fa2f 	bl	130cc <__aeabi_fsub>
    ec6e:	4603      	mov	r3, r0
    ec70:	461a      	mov	r2, r3
    ec72:	f64b 032c 	movw	r3, #47148	; 0xb82c
    ec76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec7a:	601a      	str	r2, [r3, #0]
    ec7c:	f64b 032c 	movw	r3, #47148	; 0xb82c
    ec80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec84:	681b      	ldr	r3, [r3, #0]
    ec86:	4618      	mov	r0, r3
    ec88:	f04f 0100 	mov.w	r1, #0
    ec8c:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
    ec90:	f004 fcd8 	bl	13644 <__aeabi_fcmpge>
    ec94:	4603      	mov	r3, r0
    ec96:	2b00      	cmp	r3, #0
    ec98:	d1dd      	bne.n	ec56 <auto_nav+0x17fe>
        return;
    ec9a:	f000 bcaf 	b.w	f5fc <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
    ec9e:	f64b 0310 	movw	r3, #47120	; 0xb810
    eca2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eca6:	781b      	ldrb	r3, [r3, #0]
    eca8:	2b01      	cmp	r3, #1
    ecaa:	f040 84a7 	bne.w	f5fc <auto_nav+0x21a4>
    {
        nav_stage =1;
    ecae:	f64b 0310 	movw	r3, #47120	; 0xb810
    ecb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecb6:	2201      	movs	r2, #1
    ecb8:	701a      	strb	r2, [r3, #0]
        NextBlock()
    ecba:	f64b 0311 	movw	r3, #47121	; 0xb811
    ecbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecc2:	781b      	ldrb	r3, [r3, #0]
    ecc4:	3301      	adds	r3, #1
    ecc6:	b2da      	uxtb	r2, r3
    ecc8:	f64b 0311 	movw	r3, #47121	; 0xb811
    eccc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecd0:	701a      	strb	r2, [r3, #0]
    ecd2:	f64b 0310 	movw	r3, #47120	; 0xb810
    ecd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecda:	2200      	movs	r2, #0
    ecdc:	701a      	strb	r2, [r3, #0]
    ecde:	f64b 0326 	movw	r3, #47142	; 0xb826
    ece2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ece6:	2200      	movs	r2, #0
    ece8:	801a      	strh	r2, [r3, #0]
    ecea:	f64b 236c 	movw	r3, #47724	; 0xba6c
    ecee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecf2:	681a      	ldr	r2, [r3, #0]
    ecf4:	f64b 0314 	movw	r3, #47124	; 0xb814
    ecf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecfc:	601a      	str	r2, [r3, #0]
    ecfe:	f64b 2370 	movw	r3, #47728	; 0xba70
    ed02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed06:	681a      	ldr	r2, [r3, #0]
    ed08:	f64b 0318 	movw	r3, #47128	; 0xb818
    ed0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed10:	601a      	str	r2, [r3, #0]
    ed12:	f64b 0324 	movw	r3, #47140	; 0xb824
    ed16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed1a:	2200      	movs	r2, #0
    ed1c:	801a      	strh	r2, [r3, #0]
    ed1e:	f64b 0328 	movw	r3, #47144	; 0xb828
    ed22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed26:	f04f 0200 	mov.w	r2, #0
    ed2a:	601a      	str	r2, [r3, #0]
    ed2c:	f000 bc66 	b.w	f5fc <auto_nav+0x21a4>
    }
    else {}
}
else if (nav_block == 5)
    ed30:	f64b 0311 	movw	r3, #47121	; 0xb811
    ed34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed38:	781b      	ldrb	r3, [r3, #0]
    ed3a:	2b05      	cmp	r3, #5
    ed3c:	f040 845e 	bne.w	f5fc <auto_nav+0x21a4>
{
    nav_block = 5;
    ed40:	f64b 0311 	movw	r3, #47121	; 0xb811
    ed44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed48:	2205      	movs	r2, #5
    ed4a:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(1) }
    ed4c:	f24b 43a0 	movw	r3, #46240	; 0xb4a0
    ed50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed54:	781b      	ldrb	r3, [r3, #0]
    ed56:	2b00      	cmp	r3, #0
    ed58:	d007      	beq.n	ed6a <auto_nav+0x1912>
    ed5a:	f24b 43a0 	movw	r3, #46240	; 0xb4a0
    ed5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed62:	2200      	movs	r2, #0
    ed64:	701a      	strb	r2, [r3, #0]
    ed66:	2301      	movs	r3, #1
    ed68:	e000      	b.n	ed6c <auto_nav+0x1914>
    ed6a:	2300      	movs	r3, #0
    ed6c:	2b00      	cmp	r3, #0
    ed6e:	d043      	beq.n	edf8 <auto_nav+0x19a0>
    ed70:	f64b 0311 	movw	r3, #47121	; 0xb811
    ed74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed78:	2201      	movs	r2, #1
    ed7a:	701a      	strb	r2, [r3, #0]
    ed7c:	f64b 0310 	movw	r3, #47120	; 0xb810
    ed80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed84:	2200      	movs	r2, #0
    ed86:	701a      	strb	r2, [r3, #0]
    ed88:	f64b 0326 	movw	r3, #47142	; 0xb826
    ed8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed90:	2200      	movs	r2, #0
    ed92:	801a      	strh	r2, [r3, #0]
    ed94:	f64b 236c 	movw	r3, #47724	; 0xba6c
    ed98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed9c:	681a      	ldr	r2, [r3, #0]
    ed9e:	f64b 0314 	movw	r3, #47124	; 0xb814
    eda2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eda6:	601a      	str	r2, [r3, #0]
    eda8:	f64b 2370 	movw	r3, #47728	; 0xba70
    edac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edb0:	681a      	ldr	r2, [r3, #0]
    edb2:	f64b 0318 	movw	r3, #47128	; 0xb818
    edb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edba:	601a      	str	r2, [r3, #0]
    edbc:	f64b 0324 	movw	r3, #47140	; 0xb824
    edc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edc4:	2200      	movs	r2, #0
    edc6:	801a      	strh	r2, [r3, #0]
    edc8:	f64b 0328 	movw	r3, #47144	; 0xb828
    edcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edd0:	f04f 0200 	mov.w	r2, #0
    edd4:	601a      	str	r2, [r3, #0]
    edd6:	f000 bc11 	b.w	f5fc <auto_nav+0x21a4>
    edda:	bf00      	nop
    eddc:	f3af 8000 	nop.w
    ede0:	54442d18 	.word	0x54442d18
    ede4:	3ff921fb 	.word	0x3ff921fb
    ede8:	00000000 	.word	0x00000000
    edec:	4062c000 	.word	0x4062c000
    edf0:	54442d18 	.word	0x54442d18
    edf4:	400921fb 	.word	0x400921fb
    if(nav_stage == 0) {
    edf8:	f64b 0310 	movw	r3, #47120	; 0xb810
    edfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee00:	781b      	ldrb	r3, [r3, #0]
    ee02:	2b00      	cmp	r3, #0
    ee04:	d133      	bne.n	ee6e <auto_nav+0x1a16>
       Label(while_7) 
       nav_stage = 0;
    ee06:	f64b 0310 	movw	r3, #47120	; 0xb810
    ee0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee0e:	2200      	movs	r2, #0
    ee10:	701a      	strb	r2, [r3, #0]
      if (! (TRUE)) Goto(endwhile_8) else NextStage();}
    ee12:	f64b 0310 	movw	r3, #47120	; 0xb810
    ee16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee1a:	781b      	ldrb	r3, [r3, #0]
    ee1c:	3301      	adds	r3, #1
    ee1e:	b2da      	uxtb	r2, r3
    ee20:	f64b 0310 	movw	r3, #47120	; 0xb810
    ee24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee28:	701a      	strb	r2, [r3, #0]
    ee2a:	f64b 236c 	movw	r3, #47724	; 0xba6c
    ee2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee32:	681a      	ldr	r2, [r3, #0]
    ee34:	f64b 0314 	movw	r3, #47124	; 0xb814
    ee38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee3c:	601a      	str	r2, [r3, #0]
    ee3e:	f64b 2370 	movw	r3, #47728	; 0xba70
    ee42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee46:	681a      	ldr	r2, [r3, #0]
    ee48:	f64b 0318 	movw	r3, #47128	; 0xb818
    ee4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee50:	601a      	str	r2, [r3, #0]
    ee52:	f64b 0324 	movw	r3, #47140	; 0xb824
    ee56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee5a:	2200      	movs	r2, #0
    ee5c:	801a      	strh	r2, [r3, #0]
    ee5e:	f64b 0328 	movw	r3, #47144	; 0xb828
    ee62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee66:	f04f 0200 	mov.w	r2, #0
    ee6a:	601a      	str	r2, [r3, #0]
    ee6c:	e3c6      	b.n	f5fc <auto_nav+0x21a4>
     
    else if (nav_stage == 1)
    ee6e:	f64b 0310 	movw	r3, #47120	; 0xb810
    ee72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee76:	781b      	ldrb	r3, [r3, #0]
    ee78:	2b01      	cmp	r3, #1
    ee7a:	f040 81b5 	bne.w	f1e8 <auto_nav+0x1d90>
    {
        nav_stage =1;
    ee7e:	f64b 0310 	movw	r3, #47120	; 0xb810
    ee82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee86:	2201      	movs	r2, #1
    ee88:	701a      	strb	r2, [r3, #0]
        auto_pitch = FALSE;
    ee8a:	f24b 439f 	movw	r3, #46239	; 0xb49f
    ee8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee92:	2200      	movs	r2, #0
    ee94:	701a      	strb	r2, [r3, #0]
        nav_pitch = 0.000000;
    ee96:	f64b 033c 	movw	r3, #47164	; 0xb83c
    ee9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee9e:	f04f 0200 	mov.w	r2, #0
    eea2:	601a      	str	r2, [r3, #0]
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
    eea4:	f24b 439d 	movw	r3, #46237	; 0xb49d
    eea8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eeac:	2203      	movs	r2, #3
    eeae:	701a      	strb	r2, [r3, #0]
        desired_altitude = waypoints[1].a;
    eeb0:	f240 1340 	movw	r3, #320	; 0x140
    eeb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eeb8:	695a      	ldr	r2, [r3, #20]
    eeba:	f240 133c 	movw	r3, #316	; 0x13c
    eebe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eec2:	601a      	str	r2, [r3, #0]
        pre_climb = 0.;
    eec4:	f64b 0304 	movw	r3, #47108	; 0xb804
    eec8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eecc:	f04f 0200 	mov.w	r2, #0
    eed0:	601a      	str	r2, [r3, #0]
        Circle(1, 100);
    eed2:	f64b 2370 	movw	r3, #47728	; 0xba70
    eed6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eeda:	681a      	ldr	r2, [r3, #0]
    eedc:	f240 1340 	movw	r3, #320	; 0x140
    eee0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eee4:	691b      	ldr	r3, [r3, #16]
    eee6:	4610      	mov	r0, r2
    eee8:	4619      	mov	r1, r3
    eeea:	f004 f8ef 	bl	130cc <__aeabi_fsub>
    eeee:	4603      	mov	r3, r0
    eef0:	4618      	mov	r0, r3
    eef2:	f003 fd61 	bl	129b8 <__aeabi_f2d>
    eef6:	4604      	mov	r4, r0
    eef8:	460d      	mov	r5, r1
    eefa:	f64b 236c 	movw	r3, #47724	; 0xba6c
    eefe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef02:	681a      	ldr	r2, [r3, #0]
    ef04:	f240 1340 	movw	r3, #320	; 0x140
    ef08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef0c:	68db      	ldr	r3, [r3, #12]
    ef0e:	4610      	mov	r0, r2
    ef10:	4619      	mov	r1, r3
    ef12:	f004 f8db 	bl	130cc <__aeabi_fsub>
    ef16:	4603      	mov	r3, r0
    ef18:	4618      	mov	r0, r3
    ef1a:	f003 fd4d 	bl	129b8 <__aeabi_f2d>
    ef1e:	4602      	mov	r2, r0
    ef20:	460b      	mov	r3, r1
    ef22:	4620      	mov	r0, r4
    ef24:	4629      	mov	r1, r5
    ef26:	f001 fdb7 	bl	10a98 <pp_atan2>
    ef2a:	4602      	mov	r2, r0
    ef2c:	460b      	mov	r3, r1
    ef2e:	4610      	mov	r0, r2
    ef30:	4619      	mov	r1, r3
    ef32:	f004 f877 	bl	13024 <__aeabi_d2f>
    ef36:	4603      	mov	r3, r0
    ef38:	60fb      	str	r3, [r7, #12]
    ef3a:	68f8      	ldr	r0, [r7, #12]
    ef3c:	f003 fd3c 	bl	129b8 <__aeabi_f2d>
    ef40:	4604      	mov	r4, r0
    ef42:	460d      	mov	r5, r1
    ef44:	f64b 23a4 	movw	r3, #47780	; 0xbaa4
    ef48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef4c:	681b      	ldr	r3, [r3, #0]
    ef4e:	4618      	mov	r0, r3
    ef50:	f04f 0100 	mov.w	r1, #0
    ef54:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
    ef58:	f004 f9c2 	bl	132e0 <__aeabi_fmul>
    ef5c:	4603      	mov	r3, r0
    ef5e:	4618      	mov	r0, r3
    ef60:	f003 fd2a 	bl	129b8 <__aeabi_f2d>
    ef64:	4602      	mov	r2, r0
    ef66:	460b      	mov	r3, r1
    ef68:	f04f 0000 	mov.w	r0, #0
    ef6c:	f04f 0100 	mov.w	r1, #0
    ef70:	f2c4 0114 	movt	r1, #16404	; 0x4014
    ef74:	f003 fe9e 	bl	12cb4 <__aeabi_ddiv>
    ef78:	4602      	mov	r2, r0
    ef7a:	460b      	mov	r3, r1
    ef7c:	4620      	mov	r0, r4
    ef7e:	4629      	mov	r1, r5
    ef80:	f003 fbbc 	bl	126fc <__adddf3>
    ef84:	4602      	mov	r2, r0
    ef86:	460b      	mov	r3, r1
    ef88:	4610      	mov	r0, r2
    ef8a:	4619      	mov	r1, r3
    ef8c:	f004 f84a 	bl	13024 <__aeabi_d2f>
    ef90:	4603      	mov	r3, r0
    ef92:	60bb      	str	r3, [r7, #8]
    ef94:	f240 1340 	movw	r3, #320	; 0x140
    ef98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef9c:	68db      	ldr	r3, [r3, #12]
    ef9e:	4618      	mov	r0, r3
    efa0:	f003 fd0a 	bl	129b8 <__aeabi_f2d>
    efa4:	4604      	mov	r4, r0
    efa6:	460d      	mov	r5, r1
    efa8:	68b8      	ldr	r0, [r7, #8]
    efaa:	f003 fd05 	bl	129b8 <__aeabi_f2d>
    efae:	4602      	mov	r2, r0
    efb0:	460b      	mov	r3, r1
    efb2:	4610      	mov	r0, r2
    efb4:	4619      	mov	r1, r3
    efb6:	a388      	add	r3, pc, #544	; (adr r3, f1d8 <auto_nav+0x1d80>)
    efb8:	e9d3 2300 	ldrd	r2, r3, [r3]
    efbc:	f003 fb9e 	bl	126fc <__adddf3>
    efc0:	4602      	mov	r2, r0
    efc2:	460b      	mov	r3, r1
    efc4:	4610      	mov	r0, r2
    efc6:	4619      	mov	r1, r3
    efc8:	f001 fe26 	bl	10c18 <pp_sin>
    efcc:	4602      	mov	r2, r0
    efce:	460b      	mov	r3, r1
    efd0:	4610      	mov	r0, r2
    efd2:	4619      	mov	r1, r3
    efd4:	f04f 0200 	mov.w	r2, #0
    efd8:	f04f 0300 	mov.w	r3, #0
    efdc:	f2c4 0359 	movt	r3, #16473	; 0x4059
    efe0:	f003 fd3e 	bl	12a60 <__aeabi_dmul>
    efe4:	4602      	mov	r2, r0
    efe6:	460b      	mov	r3, r1
    efe8:	4620      	mov	r0, r4
    efea:	4629      	mov	r1, r5
    efec:	f003 fb86 	bl	126fc <__adddf3>
    eff0:	4602      	mov	r2, r0
    eff2:	460b      	mov	r3, r1
    eff4:	4610      	mov	r0, r2
    eff6:	4619      	mov	r1, r3
    eff8:	f004 f814 	bl	13024 <__aeabi_d2f>
    effc:	4606      	mov	r6, r0
    effe:	f240 1340 	movw	r3, #320	; 0x140
    f002:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f006:	691b      	ldr	r3, [r3, #16]
    f008:	4618      	mov	r0, r3
    f00a:	f003 fcd5 	bl	129b8 <__aeabi_f2d>
    f00e:	4604      	mov	r4, r0
    f010:	460d      	mov	r5, r1
    f012:	68b8      	ldr	r0, [r7, #8]
    f014:	f003 fcd0 	bl	129b8 <__aeabi_f2d>
    f018:	4602      	mov	r2, r0
    f01a:	460b      	mov	r3, r1
    f01c:	4610      	mov	r0, r2
    f01e:	4619      	mov	r1, r3
    f020:	f001 fdfa 	bl	10c18 <pp_sin>
    f024:	4602      	mov	r2, r0
    f026:	460b      	mov	r3, r1
    f028:	4610      	mov	r0, r2
    f02a:	4619      	mov	r1, r3
    f02c:	f04f 0200 	mov.w	r2, #0
    f030:	f04f 0300 	mov.w	r3, #0
    f034:	f2c4 0359 	movt	r3, #16473	; 0x4059
    f038:	f003 fd12 	bl	12a60 <__aeabi_dmul>
    f03c:	4602      	mov	r2, r0
    f03e:	460b      	mov	r3, r1
    f040:	4620      	mov	r0, r4
    f042:	4629      	mov	r1, r5
    f044:	f003 fb5a 	bl	126fc <__adddf3>
    f048:	4602      	mov	r2, r0
    f04a:	460b      	mov	r3, r1
    f04c:	4610      	mov	r0, r2
    f04e:	4619      	mov	r1, r3
    f050:	f003 ffe8 	bl	13024 <__aeabi_d2f>
    f054:	4603      	mov	r3, r0
    f056:	4630      	mov	r0, r6
    f058:	4619      	mov	r1, r3
    f05a:	f000 fbc1 	bl	f7e0 <fly_to_xy>
    f05e:	68b8      	ldr	r0, [r7, #8]
    f060:	f003 fcaa 	bl	129b8 <__aeabi_f2d>
    f064:	4602      	mov	r2, r0
    f066:	460b      	mov	r3, r1
    f068:	a15b      	add	r1, pc, #364	; (adr r1, f1d8 <auto_nav+0x1d80>)
    f06a:	e9d1 0100 	ldrd	r0, r1, [r1]
    f06e:	f003 fb43 	bl	126f8 <__aeabi_dsub>
    f072:	4602      	mov	r2, r0
    f074:	460b      	mov	r3, r1
    f076:	4610      	mov	r0, r2
    f078:	4619      	mov	r1, r3
    f07a:	a359      	add	r3, pc, #356	; (adr r3, f1e0 <auto_nav+0x1d88>)
    f07c:	e9d3 2300 	ldrd	r2, r3, [r3]
    f080:	f003 fe18 	bl	12cb4 <__aeabi_ddiv>
    f084:	4602      	mov	r2, r0
    f086:	460b      	mov	r3, r1
    f088:	4610      	mov	r0, r2
    f08a:	4619      	mov	r1, r3
    f08c:	f04f 0200 	mov.w	r2, #0
    f090:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    f094:	f2c4 0366 	movt	r3, #16486	; 0x4066
    f098:	f003 fce2 	bl	12a60 <__aeabi_dmul>
    f09c:	4602      	mov	r2, r0
    f09e:	460b      	mov	r3, r1
    f0a0:	4610      	mov	r0, r2
    f0a2:	4619      	mov	r1, r3
    f0a4:	f003 ffbe 	bl	13024 <__aeabi_d2f>
    f0a8:	4602      	mov	r2, r0
    f0aa:	f64b 032c 	movw	r3, #47148	; 0xb82c
    f0ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0b2:	601a      	str	r2, [r3, #0]
    f0b4:	e012      	b.n	f0dc <auto_nav+0x1c84>
    f0b6:	f64b 032c 	movw	r3, #47148	; 0xb82c
    f0ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0be:	681b      	ldr	r3, [r3, #0]
    f0c0:	4618      	mov	r0, r3
    f0c2:	f04f 0100 	mov.w	r1, #0
    f0c6:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
    f0ca:	f004 f801 	bl	130d0 <__addsf3>
    f0ce:	4603      	mov	r3, r0
    f0d0:	461a      	mov	r2, r3
    f0d2:	f64b 032c 	movw	r3, #47148	; 0xb82c
    f0d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0da:	601a      	str	r2, [r3, #0]
    f0dc:	f64b 032c 	movw	r3, #47148	; 0xb82c
    f0e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0e4:	681b      	ldr	r3, [r3, #0]
    f0e6:	4618      	mov	r0, r3
    f0e8:	f04f 0100 	mov.w	r1, #0
    f0ec:	f004 fa96 	bl	1361c <__aeabi_fcmplt>
    f0f0:	4603      	mov	r3, r0
    f0f2:	2b00      	cmp	r3, #0
    f0f4:	d1df      	bne.n	f0b6 <auto_nav+0x1c5e>
    f0f6:	e012      	b.n	f11e <auto_nav+0x1cc6>
    f0f8:	f64b 032c 	movw	r3, #47148	; 0xb82c
    f0fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f100:	681b      	ldr	r3, [r3, #0]
    f102:	4618      	mov	r0, r3
    f104:	f04f 0100 	mov.w	r1, #0
    f108:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
    f10c:	f003 ffde 	bl	130cc <__aeabi_fsub>
    f110:	4603      	mov	r3, r0
    f112:	461a      	mov	r2, r3
    f114:	f64b 032c 	movw	r3, #47148	; 0xb82c
    f118:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f11c:	601a      	str	r2, [r3, #0]
    f11e:	f64b 032c 	movw	r3, #47148	; 0xb82c
    f122:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f126:	681b      	ldr	r3, [r3, #0]
    f128:	4618      	mov	r0, r3
    f12a:	f04f 0100 	mov.w	r1, #0
    f12e:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
    f132:	f004 fa87 	bl	13644 <__aeabi_fcmpge>
    f136:	4603      	mov	r3, r0
    f138:	2b00      	cmp	r3, #0
    f13a:	d1dd      	bne.n	f0f8 <auto_nav+0x1ca0>
        if (Qdr(0)) NextStage();
    f13c:	f64b 032c 	movw	r3, #47148	; 0xb82c
    f140:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f144:	681b      	ldr	r3, [r3, #0]
    f146:	4618      	mov	r0, r3
    f148:	f04f 0100 	mov.w	r1, #0
    f14c:	f004 fa84 	bl	13658 <__aeabi_fcmpgt>
    f150:	4603      	mov	r3, r0
    f152:	2b00      	cmp	r3, #0
    f154:	d100      	bne.n	f158 <auto_nav+0x1d00>
        return;
    f156:	e251      	b.n	f5fc <auto_nav+0x21a4>
        nav_pitch = 0.000000;
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
        desired_altitude = waypoints[1].a;
        pre_climb = 0.;
        Circle(1, 100);
        if (Qdr(0)) NextStage();
    f158:	f64b 032c 	movw	r3, #47148	; 0xb82c
    f15c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f160:	681b      	ldr	r3, [r3, #0]
    f162:	4618      	mov	r0, r3
    f164:	f04f 0100 	mov.w	r1, #0
    f168:	f2c4 1120 	movt	r1, #16672	; 0x4120
    f16c:	f004 fa56 	bl	1361c <__aeabi_fcmplt>
    f170:	4603      	mov	r3, r0
    f172:	2b00      	cmp	r3, #0
    f174:	d100      	bne.n	f178 <auto_nav+0x1d20>
        return;
    f176:	e241      	b.n	f5fc <auto_nav+0x21a4>
        nav_pitch = 0.000000;
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
        desired_altitude = waypoints[1].a;
        pre_climb = 0.;
        Circle(1, 100);
        if (Qdr(0)) NextStage();
    f178:	f64b 0310 	movw	r3, #47120	; 0xb810
    f17c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f180:	781b      	ldrb	r3, [r3, #0]
    f182:	3301      	adds	r3, #1
    f184:	b2da      	uxtb	r2, r3
    f186:	f64b 0310 	movw	r3, #47120	; 0xb810
    f18a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f18e:	701a      	strb	r2, [r3, #0]
    f190:	f64b 236c 	movw	r3, #47724	; 0xba6c
    f194:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f198:	681a      	ldr	r2, [r3, #0]
    f19a:	f64b 0314 	movw	r3, #47124	; 0xb814
    f19e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1a2:	601a      	str	r2, [r3, #0]
    f1a4:	f64b 2370 	movw	r3, #47728	; 0xba70
    f1a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1ac:	681a      	ldr	r2, [r3, #0]
    f1ae:	f64b 0318 	movw	r3, #47128	; 0xb818
    f1b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1b6:	601a      	str	r2, [r3, #0]
    f1b8:	f64b 0324 	movw	r3, #47140	; 0xb824
    f1bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1c0:	2200      	movs	r2, #0
    f1c2:	801a      	strh	r2, [r3, #0]
    f1c4:	f64b 0328 	movw	r3, #47144	; 0xb828
    f1c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1cc:	f04f 0200 	mov.w	r2, #0
    f1d0:	601a      	str	r2, [r3, #0]
    f1d2:	e213      	b.n	f5fc <auto_nav+0x21a4>
    f1d4:	f3af 8000 	nop.w
    f1d8:	54442d18 	.word	0x54442d18
    f1dc:	3ff921fb 	.word	0x3ff921fb
    f1e0:	54442d18 	.word	0x54442d18
    f1e4:	400921fb 	.word	0x400921fb
        return;
    }
    else if (nav_stage == 2)
    f1e8:	f64b 0310 	movw	r3, #47120	; 0xb810
    f1ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1f0:	781b      	ldrb	r3, [r3, #0]
    f1f2:	2b02      	cmp	r3, #2
    f1f4:	f040 81ad 	bne.w	f552 <auto_nav+0x20fa>
    {
         nav_stage = 2;
    f1f8:	f64b 0310 	movw	r3, #47120	; 0xb810
    f1fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f200:	2202      	movs	r2, #2
    f202:	701a      	strb	r2, [r3, #0]
          auto_pitch = FALSE;
    f204:	f24b 439f 	movw	r3, #46239	; 0xb49f
    f208:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f20c:	2200      	movs	r2, #0
    f20e:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.000000;
    f210:	f64b 033c 	movw	r3, #47164	; 0xb83c
    f214:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f218:	f04f 0200 	mov.w	r2, #0
    f21c:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
    f21e:	f24b 439d 	movw	r3, #46237	; 0xb49d
    f222:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f226:	2203      	movs	r2, #3
    f228:	701a      	strb	r2, [r3, #0]
          desired_altitude = waypoints[4].a;
    f22a:	f240 1340 	movw	r3, #320	; 0x140
    f22e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f232:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    f234:	f240 133c 	movw	r3, #316	; 0x13c
    f238:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f23c:	601a      	str	r2, [r3, #0]
          pre_climb = 0.;
    f23e:	f64b 0304 	movw	r3, #47108	; 0xb804
    f242:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f246:	f04f 0200 	mov.w	r2, #0
    f24a:	601a      	str	r2, [r3, #0]
          Circle(4, 100);
    f24c:	f64b 2370 	movw	r3, #47728	; 0xba70
    f250:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f254:	681a      	ldr	r2, [r3, #0]
    f256:	f240 1340 	movw	r3, #320	; 0x140
    f25a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f25e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    f260:	4610      	mov	r0, r2
    f262:	4619      	mov	r1, r3
    f264:	f003 ff32 	bl	130cc <__aeabi_fsub>
    f268:	4603      	mov	r3, r0
    f26a:	4618      	mov	r0, r3
    f26c:	f003 fba4 	bl	129b8 <__aeabi_f2d>
    f270:	4604      	mov	r4, r0
    f272:	460d      	mov	r5, r1
    f274:	f64b 236c 	movw	r3, #47724	; 0xba6c
    f278:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f27c:	681a      	ldr	r2, [r3, #0]
    f27e:	f240 1340 	movw	r3, #320	; 0x140
    f282:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    f288:	4610      	mov	r0, r2
    f28a:	4619      	mov	r1, r3
    f28c:	f003 ff1e 	bl	130cc <__aeabi_fsub>
    f290:	4603      	mov	r3, r0
    f292:	4618      	mov	r0, r3
    f294:	f003 fb90 	bl	129b8 <__aeabi_f2d>
    f298:	4602      	mov	r2, r0
    f29a:	460b      	mov	r3, r1
    f29c:	4620      	mov	r0, r4
    f29e:	4629      	mov	r1, r5
    f2a0:	f001 fbfa 	bl	10a98 <pp_atan2>
    f2a4:	4602      	mov	r2, r0
    f2a6:	460b      	mov	r3, r1
    f2a8:	4610      	mov	r0, r2
    f2aa:	4619      	mov	r1, r3
    f2ac:	f003 feba 	bl	13024 <__aeabi_d2f>
    f2b0:	4603      	mov	r3, r0
    f2b2:	607b      	str	r3, [r7, #4]
    f2b4:	6878      	ldr	r0, [r7, #4]
    f2b6:	f003 fb7f 	bl	129b8 <__aeabi_f2d>
    f2ba:	4604      	mov	r4, r0
    f2bc:	460d      	mov	r5, r1
    f2be:	f64b 23a4 	movw	r3, #47780	; 0xbaa4
    f2c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2c6:	681b      	ldr	r3, [r3, #0]
    f2c8:	4618      	mov	r0, r3
    f2ca:	f04f 0100 	mov.w	r1, #0
    f2ce:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
    f2d2:	f004 f805 	bl	132e0 <__aeabi_fmul>
    f2d6:	4603      	mov	r3, r0
    f2d8:	4618      	mov	r0, r3
    f2da:	f003 fb6d 	bl	129b8 <__aeabi_f2d>
    f2de:	4602      	mov	r2, r0
    f2e0:	460b      	mov	r3, r1
    f2e2:	f04f 0000 	mov.w	r0, #0
    f2e6:	f04f 0100 	mov.w	r1, #0
    f2ea:	f2c4 0114 	movt	r1, #16404	; 0x4014
    f2ee:	f003 fce1 	bl	12cb4 <__aeabi_ddiv>
    f2f2:	4602      	mov	r2, r0
    f2f4:	460b      	mov	r3, r1
    f2f6:	4620      	mov	r0, r4
    f2f8:	4629      	mov	r1, r5
    f2fa:	f003 f9ff 	bl	126fc <__adddf3>
    f2fe:	4602      	mov	r2, r0
    f300:	460b      	mov	r3, r1
    f302:	4610      	mov	r0, r2
    f304:	4619      	mov	r1, r3
    f306:	f003 fe8d 	bl	13024 <__aeabi_d2f>
    f30a:	4603      	mov	r3, r0
    f30c:	603b      	str	r3, [r7, #0]
    f30e:	f240 1340 	movw	r3, #320	; 0x140
    f312:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    f318:	4618      	mov	r0, r3
    f31a:	f003 fb4d 	bl	129b8 <__aeabi_f2d>
    f31e:	4604      	mov	r4, r0
    f320:	460d      	mov	r5, r1
    f322:	6838      	ldr	r0, [r7, #0]
    f324:	f003 fb48 	bl	129b8 <__aeabi_f2d>
    f328:	4602      	mov	r2, r0
    f32a:	460b      	mov	r3, r1
    f32c:	4610      	mov	r0, r2
    f32e:	4619      	mov	r1, r3
    f330:	a3b5      	add	r3, pc, #724	; (adr r3, f608 <auto_nav+0x21b0>)
    f332:	e9d3 2300 	ldrd	r2, r3, [r3]
    f336:	f003 f9e1 	bl	126fc <__adddf3>
    f33a:	4602      	mov	r2, r0
    f33c:	460b      	mov	r3, r1
    f33e:	4610      	mov	r0, r2
    f340:	4619      	mov	r1, r3
    f342:	f001 fc69 	bl	10c18 <pp_sin>
    f346:	4602      	mov	r2, r0
    f348:	460b      	mov	r3, r1
    f34a:	4610      	mov	r0, r2
    f34c:	4619      	mov	r1, r3
    f34e:	f04f 0200 	mov.w	r2, #0
    f352:	f04f 0300 	mov.w	r3, #0
    f356:	f2c4 0359 	movt	r3, #16473	; 0x4059
    f35a:	f003 fb81 	bl	12a60 <__aeabi_dmul>
    f35e:	4602      	mov	r2, r0
    f360:	460b      	mov	r3, r1
    f362:	4620      	mov	r0, r4
    f364:	4629      	mov	r1, r5
    f366:	f003 f9c9 	bl	126fc <__adddf3>
    f36a:	4602      	mov	r2, r0
    f36c:	460b      	mov	r3, r1
    f36e:	4610      	mov	r0, r2
    f370:	4619      	mov	r1, r3
    f372:	f003 fe57 	bl	13024 <__aeabi_d2f>
    f376:	4606      	mov	r6, r0
    f378:	f240 1340 	movw	r3, #320	; 0x140
    f37c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    f382:	4618      	mov	r0, r3
    f384:	f003 fb18 	bl	129b8 <__aeabi_f2d>
    f388:	4604      	mov	r4, r0
    f38a:	460d      	mov	r5, r1
    f38c:	6838      	ldr	r0, [r7, #0]
    f38e:	f003 fb13 	bl	129b8 <__aeabi_f2d>
    f392:	4602      	mov	r2, r0
    f394:	460b      	mov	r3, r1
    f396:	4610      	mov	r0, r2
    f398:	4619      	mov	r1, r3
    f39a:	f001 fc3d 	bl	10c18 <pp_sin>
    f39e:	4602      	mov	r2, r0
    f3a0:	460b      	mov	r3, r1
    f3a2:	4610      	mov	r0, r2
    f3a4:	4619      	mov	r1, r3
    f3a6:	f04f 0200 	mov.w	r2, #0
    f3aa:	f04f 0300 	mov.w	r3, #0
    f3ae:	f2c4 0359 	movt	r3, #16473	; 0x4059
    f3b2:	f003 fb55 	bl	12a60 <__aeabi_dmul>
    f3b6:	4602      	mov	r2, r0
    f3b8:	460b      	mov	r3, r1
    f3ba:	4620      	mov	r0, r4
    f3bc:	4629      	mov	r1, r5
    f3be:	f003 f99d 	bl	126fc <__adddf3>
    f3c2:	4602      	mov	r2, r0
    f3c4:	460b      	mov	r3, r1
    f3c6:	4610      	mov	r0, r2
    f3c8:	4619      	mov	r1, r3
    f3ca:	f003 fe2b 	bl	13024 <__aeabi_d2f>
    f3ce:	4603      	mov	r3, r0
    f3d0:	4630      	mov	r0, r6
    f3d2:	4619      	mov	r1, r3
    f3d4:	f000 fa04 	bl	f7e0 <fly_to_xy>
    f3d8:	6838      	ldr	r0, [r7, #0]
    f3da:	f003 faed 	bl	129b8 <__aeabi_f2d>
    f3de:	4602      	mov	r2, r0
    f3e0:	460b      	mov	r3, r1
    f3e2:	a189      	add	r1, pc, #548	; (adr r1, f608 <auto_nav+0x21b0>)
    f3e4:	e9d1 0100 	ldrd	r0, r1, [r1]
    f3e8:	f003 f986 	bl	126f8 <__aeabi_dsub>
    f3ec:	4602      	mov	r2, r0
    f3ee:	460b      	mov	r3, r1
    f3f0:	4610      	mov	r0, r2
    f3f2:	4619      	mov	r1, r3
    f3f4:	a386      	add	r3, pc, #536	; (adr r3, f610 <auto_nav+0x21b8>)
    f3f6:	e9d3 2300 	ldrd	r2, r3, [r3]
    f3fa:	f003 fc5b 	bl	12cb4 <__aeabi_ddiv>
    f3fe:	4602      	mov	r2, r0
    f400:	460b      	mov	r3, r1
    f402:	4610      	mov	r0, r2
    f404:	4619      	mov	r1, r3
    f406:	f04f 0200 	mov.w	r2, #0
    f40a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    f40e:	f2c4 0366 	movt	r3, #16486	; 0x4066
    f412:	f003 fb25 	bl	12a60 <__aeabi_dmul>
    f416:	4602      	mov	r2, r0
    f418:	460b      	mov	r3, r1
    f41a:	4610      	mov	r0, r2
    f41c:	4619      	mov	r1, r3
    f41e:	f003 fe01 	bl	13024 <__aeabi_d2f>
    f422:	4602      	mov	r2, r0
    f424:	f64b 032c 	movw	r3, #47148	; 0xb82c
    f428:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f42c:	601a      	str	r2, [r3, #0]
    f42e:	e012      	b.n	f456 <auto_nav+0x1ffe>
    f430:	f64b 032c 	movw	r3, #47148	; 0xb82c
    f434:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f438:	681b      	ldr	r3, [r3, #0]
    f43a:	4618      	mov	r0, r3
    f43c:	f04f 0100 	mov.w	r1, #0
    f440:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
    f444:	f003 fe44 	bl	130d0 <__addsf3>
    f448:	4603      	mov	r3, r0
    f44a:	461a      	mov	r2, r3
    f44c:	f64b 032c 	movw	r3, #47148	; 0xb82c
    f450:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f454:	601a      	str	r2, [r3, #0]
    f456:	f64b 032c 	movw	r3, #47148	; 0xb82c
    f45a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f45e:	681b      	ldr	r3, [r3, #0]
    f460:	4618      	mov	r0, r3
    f462:	f04f 0100 	mov.w	r1, #0
    f466:	f004 f8d9 	bl	1361c <__aeabi_fcmplt>
    f46a:	4603      	mov	r3, r0
    f46c:	2b00      	cmp	r3, #0
    f46e:	d1df      	bne.n	f430 <auto_nav+0x1fd8>
    f470:	e012      	b.n	f498 <auto_nav+0x2040>
    f472:	f64b 032c 	movw	r3, #47148	; 0xb82c
    f476:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f47a:	681b      	ldr	r3, [r3, #0]
    f47c:	4618      	mov	r0, r3
    f47e:	f04f 0100 	mov.w	r1, #0
    f482:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
    f486:	f003 fe21 	bl	130cc <__aeabi_fsub>
    f48a:	4603      	mov	r3, r0
    f48c:	461a      	mov	r2, r3
    f48e:	f64b 032c 	movw	r3, #47148	; 0xb82c
    f492:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f496:	601a      	str	r2, [r3, #0]
    f498:	f64b 032c 	movw	r3, #47148	; 0xb82c
    f49c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4a0:	681b      	ldr	r3, [r3, #0]
    f4a2:	4618      	mov	r0, r3
    f4a4:	f04f 0100 	mov.w	r1, #0
    f4a8:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
    f4ac:	f004 f8ca 	bl	13644 <__aeabi_fcmpge>
    f4b0:	4603      	mov	r3, r0
    f4b2:	2b00      	cmp	r3, #0
    f4b4:	d1dd      	bne.n	f472 <auto_nav+0x201a>
          if (Qdr(180)) NextStage();
    f4b6:	f64b 032c 	movw	r3, #47148	; 0xb82c
    f4ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4be:	681b      	ldr	r3, [r3, #0]
    f4c0:	4618      	mov	r0, r3
    f4c2:	f04f 0100 	mov.w	r1, #0
    f4c6:	f2c4 3134 	movt	r1, #17204	; 0x4334
    f4ca:	f004 f8c5 	bl	13658 <__aeabi_fcmpgt>
    f4ce:	4603      	mov	r3, r0
    f4d0:	2b00      	cmp	r3, #0
    f4d2:	d100      	bne.n	f4d6 <auto_nav+0x207e>
          return;
    f4d4:	e092      	b.n	f5fc <auto_nav+0x21a4>
          nav_pitch = 0.000000;
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
          desired_altitude = waypoints[4].a;
          pre_climb = 0.;
          Circle(4, 100);
          if (Qdr(180)) NextStage();
    f4d6:	f64b 032c 	movw	r3, #47148	; 0xb82c
    f4da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4de:	681b      	ldr	r3, [r3, #0]
    f4e0:	4618      	mov	r0, r3
    f4e2:	f04f 0100 	mov.w	r1, #0
    f4e6:	f2c4 313e 	movt	r1, #17214	; 0x433e
    f4ea:	f004 f897 	bl	1361c <__aeabi_fcmplt>
    f4ee:	4603      	mov	r3, r0
    f4f0:	2b00      	cmp	r3, #0
    f4f2:	d100      	bne.n	f4f6 <auto_nav+0x209e>
          return;
    f4f4:	e082      	b.n	f5fc <auto_nav+0x21a4>
          nav_pitch = 0.000000;
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
          desired_altitude = waypoints[4].a;
          pre_climb = 0.;
          Circle(4, 100);
          if (Qdr(180)) NextStage();
    f4f6:	f64b 0310 	movw	r3, #47120	; 0xb810
    f4fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4fe:	781b      	ldrb	r3, [r3, #0]
    f500:	3301      	adds	r3, #1
    f502:	b2da      	uxtb	r2, r3
    f504:	f64b 0310 	movw	r3, #47120	; 0xb810
    f508:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f50c:	701a      	strb	r2, [r3, #0]
    f50e:	f64b 236c 	movw	r3, #47724	; 0xba6c
    f512:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f516:	681a      	ldr	r2, [r3, #0]
    f518:	f64b 0314 	movw	r3, #47124	; 0xb814
    f51c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f520:	601a      	str	r2, [r3, #0]
    f522:	f64b 2370 	movw	r3, #47728	; 0xba70
    f526:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f52a:	681a      	ldr	r2, [r3, #0]
    f52c:	f64b 0318 	movw	r3, #47128	; 0xb818
    f530:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f534:	601a      	str	r2, [r3, #0]
    f536:	f64b 0324 	movw	r3, #47140	; 0xb824
    f53a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f53e:	2200      	movs	r2, #0
    f540:	801a      	strh	r2, [r3, #0]
    f542:	f64b 0328 	movw	r3, #47144	; 0xb828
    f546:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f54a:	f04f 0200 	mov.w	r2, #0
    f54e:	601a      	str	r2, [r3, #0]
    f550:	e054      	b.n	f5fc <auto_nav+0x21a4>
          return;
    }
    else if (nav_stage == 3) 
    f552:	f64b 0310 	movw	r3, #47120	; 0xb810
    f556:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f55a:	781b      	ldrb	r3, [r3, #0]
    f55c:	2b03      	cmp	r3, #3
    f55e:	d106      	bne.n	f56e <auto_nav+0x2116>
    {
	  nav_stage = 3;
    f560:	f64b 0310 	movw	r3, #47120	; 0xb810
    f564:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f568:	2203      	movs	r2, #3
    f56a:	701a      	strb	r2, [r3, #0]
          Goto(while_7)
    f56c:	e44b      	b.n	ee06 <auto_nav+0x19ae>
    }
    else if (nav_stage == 4)
    f56e:	f64b 0310 	movw	r3, #47120	; 0xb810
    f572:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f576:	781b      	ldrb	r3, [r3, #0]
    f578:	2b04      	cmp	r3, #4
    f57a:	d13f      	bne.n	f5fc <auto_nav+0x21a4>
    {
	Label(endwhile_8)
	nav_stage = 4;
    f57c:	f64b 0310 	movw	r3, #47120	; 0xb810
    f580:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f584:	2204      	movs	r2, #4
    f586:	701a      	strb	r2, [r3, #0]
        NextBlock()
    f588:	f64b 0311 	movw	r3, #47121	; 0xb811
    f58c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f590:	781b      	ldrb	r3, [r3, #0]
    f592:	3301      	adds	r3, #1
    f594:	b2da      	uxtb	r2, r3
    f596:	f64b 0311 	movw	r3, #47121	; 0xb811
    f59a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f59e:	701a      	strb	r2, [r3, #0]
    f5a0:	f64b 0310 	movw	r3, #47120	; 0xb810
    f5a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5a8:	2200      	movs	r2, #0
    f5aa:	701a      	strb	r2, [r3, #0]
    f5ac:	f64b 0326 	movw	r3, #47142	; 0xb826
    f5b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5b4:	2200      	movs	r2, #0
    f5b6:	801a      	strh	r2, [r3, #0]
    f5b8:	f64b 236c 	movw	r3, #47724	; 0xba6c
    f5bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5c0:	681a      	ldr	r2, [r3, #0]
    f5c2:	f64b 0314 	movw	r3, #47124	; 0xb814
    f5c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5ca:	601a      	str	r2, [r3, #0]
    f5cc:	f64b 2370 	movw	r3, #47728	; 0xba70
    f5d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5d4:	681a      	ldr	r2, [r3, #0]
    f5d6:	f64b 0318 	movw	r3, #47128	; 0xb818
    f5da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5de:	601a      	str	r2, [r3, #0]
    f5e0:	f64b 0324 	movw	r3, #47140	; 0xb824
    f5e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5e8:	2200      	movs	r2, #0
    f5ea:	801a      	strh	r2, [r3, #0]
    f5ec:	f64b 0328 	movw	r3, #47144	; 0xb828
    f5f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5f4:	f04f 0200 	mov.w	r2, #0
    f5f8:	601a      	str	r2, [r3, #0]
    f5fa:	bf00      	nop
    else { }
}
else { }

//#endif
}
    f5fc:	372c      	adds	r7, #44	; 0x2c
    f5fe:	46bd      	mov	sp, r7
    f600:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f602:	bf00      	nop
    f604:	f3af 8000 	nop.w
    f608:	54442d18 	.word	0x54442d18
    f60c:	3ff921fb 	.word	0x3ff921fb
    f610:	54442d18 	.word	0x54442d18
    f614:	400921fb 	.word	0x400921fb

0000f618 <approaching>:
const uint8_t nb_waypoint = NB_WAYPOINT;

struct point waypoints[NB_WAYPOINT+1] = WAYPOINTS;

static float carrot;
static bool_t approaching(uint8_t wp) {
    f618:	b590      	push	{r4, r7, lr}
    f61a:	b087      	sub	sp, #28
    f61c:	af00      	add	r7, sp, #0
    f61e:	4603      	mov	r3, r0
    f620:	71fb      	strb	r3, [r7, #7]
  float pw_x = waypoints[wp].x - estimator_x;
    f622:	79f9      	ldrb	r1, [r7, #7]
    f624:	f240 1240 	movw	r2, #320	; 0x140
    f628:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f62c:	460b      	mov	r3, r1
    f62e:	005b      	lsls	r3, r3, #1
    f630:	440b      	add	r3, r1
    f632:	009b      	lsls	r3, r3, #2
    f634:	4413      	add	r3, r2
    f636:	681a      	ldr	r2, [r3, #0]
    f638:	f64b 236c 	movw	r3, #47724	; 0xba6c
    f63c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f640:	681b      	ldr	r3, [r3, #0]
    f642:	4610      	mov	r0, r2
    f644:	4619      	mov	r1, r3
    f646:	f003 fd41 	bl	130cc <__aeabi_fsub>
    f64a:	4603      	mov	r3, r0
    f64c:	617b      	str	r3, [r7, #20]
  float pw_y = waypoints[wp].y - estimator_y;
    f64e:	79f9      	ldrb	r1, [r7, #7]
    f650:	f240 1240 	movw	r2, #320	; 0x140
    f654:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f658:	460b      	mov	r3, r1
    f65a:	005b      	lsls	r3, r3, #1
    f65c:	440b      	add	r3, r1
    f65e:	009b      	lsls	r3, r3, #2
    f660:	4413      	add	r3, r2
    f662:	3304      	adds	r3, #4
    f664:	681a      	ldr	r2, [r3, #0]
    f666:	f64b 2370 	movw	r3, #47728	; 0xba70
    f66a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f66e:	681b      	ldr	r3, [r3, #0]
    f670:	4610      	mov	r0, r2
    f672:	4619      	mov	r1, r3
    f674:	f003 fd2a 	bl	130cc <__aeabi_fsub>
    f678:	4603      	mov	r3, r0
    f67a:	613b      	str	r3, [r7, #16]
  float scal_prod;//changes for PowerPc Fev-06

  dist2_to_wp = pw_x*pw_x + pw_y *pw_y;
    f67c:	6978      	ldr	r0, [r7, #20]
    f67e:	6979      	ldr	r1, [r7, #20]
    f680:	f003 fe2e 	bl	132e0 <__aeabi_fmul>
    f684:	4603      	mov	r3, r0
    f686:	461c      	mov	r4, r3
    f688:	6938      	ldr	r0, [r7, #16]
    f68a:	6939      	ldr	r1, [r7, #16]
    f68c:	f003 fe28 	bl	132e0 <__aeabi_fmul>
    f690:	4603      	mov	r3, r0
    f692:	4620      	mov	r0, r4
    f694:	4619      	mov	r1, r3
    f696:	f003 fd1b 	bl	130d0 <__addsf3>
    f69a:	4603      	mov	r3, r0
    f69c:	461a      	mov	r2, r3
    f69e:	f64b 0344 	movw	r3, #47172	; 0xb844
    f6a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6a6:	601a      	str	r2, [r3, #0]
  carrot = CARROT * estimator_hspeed_mod;
    f6a8:	f64b 23a4 	movw	r3, #47780	; 0xbaa4
    f6ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6b0:	681b      	ldr	r3, [r3, #0]
    f6b2:	4618      	mov	r0, r3
    f6b4:	f04f 0100 	mov.w	r1, #0
    f6b8:	f2c4 01a0 	movt	r1, #16544	; 0x40a0
    f6bc:	f003 fe10 	bl	132e0 <__aeabi_fmul>
    f6c0:	4603      	mov	r3, r0
    f6c2:	461a      	mov	r2, r3
    f6c4:	f64b 0350 	movw	r3, #47184	; 0xb850
    f6c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6cc:	601a      	str	r2, [r3, #0]
  carrot = (carrot < 40 ? 40 : carrot);
    f6ce:	f64b 0350 	movw	r3, #47184	; 0xb850
    f6d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6d6:	681b      	ldr	r3, [r3, #0]
    f6d8:	4618      	mov	r0, r3
    f6da:	f04f 0100 	mov.w	r1, #0
    f6de:	f2c4 2120 	movt	r1, #16928	; 0x4220
    f6e2:	f003 ff9b 	bl	1361c <__aeabi_fcmplt>
    f6e6:	4603      	mov	r3, r0
    f6e8:	2b00      	cmp	r3, #0
    f6ea:	d004      	beq.n	f6f6 <approaching+0xde>
    f6ec:	f04f 0200 	mov.w	r2, #0
    f6f0:	f2c4 2220 	movt	r2, #16928	; 0x4220
    f6f4:	e004      	b.n	f700 <approaching+0xe8>
    f6f6:	f64b 0350 	movw	r3, #47184	; 0xb850
    f6fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6fe:	681a      	ldr	r2, [r3, #0]
    f700:	f64b 0350 	movw	r3, #47184	; 0xb850
    f704:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f708:	601a      	str	r2, [r3, #0]
  if (dist2_to_wp < carrot*carrot)
    f70a:	f64b 0350 	movw	r3, #47184	; 0xb850
    f70e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f712:	681a      	ldr	r2, [r3, #0]
    f714:	f64b 0350 	movw	r3, #47184	; 0xb850
    f718:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f71c:	681b      	ldr	r3, [r3, #0]
    f71e:	4610      	mov	r0, r2
    f720:	4619      	mov	r1, r3
    f722:	f003 fddd 	bl	132e0 <__aeabi_fmul>
    f726:	4603      	mov	r3, r0
    f728:	461a      	mov	r2, r3
    f72a:	f64b 0344 	movw	r3, #47172	; 0xb844
    f72e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f732:	681b      	ldr	r3, [r3, #0]
    f734:	4610      	mov	r0, r2
    f736:	4619      	mov	r1, r3
    f738:	f003 ff8e 	bl	13658 <__aeabi_fcmpgt>
    f73c:	4603      	mov	r3, r0
    f73e:	2b00      	cmp	r3, #0
    f740:	d001      	beq.n	f746 <approaching+0x12e>
    return TRUE;
    f742:	2301      	movs	r3, #1
    f744:	e048      	b.n	f7d8 <approaching+0x1c0>

  scal_prod = (waypoints[wp].x - last_x) * pw_x + (waypoints[wp].y - last_y) * pw_y;
    f746:	79f9      	ldrb	r1, [r7, #7]
    f748:	f240 1240 	movw	r2, #320	; 0x140
    f74c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f750:	460b      	mov	r3, r1
    f752:	005b      	lsls	r3, r3, #1
    f754:	440b      	add	r3, r1
    f756:	009b      	lsls	r3, r3, #2
    f758:	4413      	add	r3, r2
    f75a:	681a      	ldr	r2, [r3, #0]
    f75c:	f64b 0314 	movw	r3, #47124	; 0xb814
    f760:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f764:	681b      	ldr	r3, [r3, #0]
    f766:	4610      	mov	r0, r2
    f768:	4619      	mov	r1, r3
    f76a:	f003 fcaf 	bl	130cc <__aeabi_fsub>
    f76e:	4603      	mov	r3, r0
    f770:	4618      	mov	r0, r3
    f772:	6979      	ldr	r1, [r7, #20]
    f774:	f003 fdb4 	bl	132e0 <__aeabi_fmul>
    f778:	4603      	mov	r3, r0
    f77a:	461c      	mov	r4, r3
    f77c:	79f9      	ldrb	r1, [r7, #7]
    f77e:	f240 1240 	movw	r2, #320	; 0x140
    f782:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f786:	460b      	mov	r3, r1
    f788:	005b      	lsls	r3, r3, #1
    f78a:	440b      	add	r3, r1
    f78c:	009b      	lsls	r3, r3, #2
    f78e:	4413      	add	r3, r2
    f790:	3304      	adds	r3, #4
    f792:	681a      	ldr	r2, [r3, #0]
    f794:	f64b 0318 	movw	r3, #47128	; 0xb818
    f798:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f79c:	681b      	ldr	r3, [r3, #0]
    f79e:	4610      	mov	r0, r2
    f7a0:	4619      	mov	r1, r3
    f7a2:	f003 fc93 	bl	130cc <__aeabi_fsub>
    f7a6:	4603      	mov	r3, r0
    f7a8:	4618      	mov	r0, r3
    f7aa:	6939      	ldr	r1, [r7, #16]
    f7ac:	f003 fd98 	bl	132e0 <__aeabi_fmul>
    f7b0:	4603      	mov	r3, r0
    f7b2:	4620      	mov	r0, r4
    f7b4:	4619      	mov	r1, r3
    f7b6:	f003 fc8b 	bl	130d0 <__addsf3>
    f7ba:	4603      	mov	r3, r0
    f7bc:	60fb      	str	r3, [r7, #12]
  
  return (scal_prod < 0);
    f7be:	2301      	movs	r3, #1
    f7c0:	461c      	mov	r4, r3
    f7c2:	68f8      	ldr	r0, [r7, #12]
    f7c4:	f04f 0100 	mov.w	r1, #0
    f7c8:	f003 ff28 	bl	1361c <__aeabi_fcmplt>
    f7cc:	4603      	mov	r3, r0
    f7ce:	2b00      	cmp	r3, #0
    f7d0:	d101      	bne.n	f7d6 <approaching+0x1be>
    f7d2:	2300      	movs	r3, #0
    f7d4:	461c      	mov	r4, r3
    f7d6:	b2e3      	uxtb	r3, r4
}
    f7d8:	4618      	mov	r0, r3
    f7da:	371c      	adds	r7, #28
    f7dc:	46bd      	mov	sp, r7
    f7de:	bd90      	pop	{r4, r7, pc}

0000f7e0 <fly_to_xy>:

static inline void fly_to_xy(float x, float y) 
{ 
    f7e0:	b5b0      	push	{r4, r5, r7, lr}
    f7e2:	b082      	sub	sp, #8
    f7e4:	af00      	add	r7, sp, #0
    f7e6:	6078      	str	r0, [r7, #4]
    f7e8:	6039      	str	r1, [r7, #0]
  desired_x = x;
    f7ea:	f64b 0330 	movw	r3, #47152	; 0xb830
    f7ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7f2:	687a      	ldr	r2, [r7, #4]
    f7f4:	601a      	str	r2, [r3, #0]
  desired_y = y;
    f7f6:	f64b 0334 	movw	r3, #47156	; 0xb834
    f7fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7fe:	683a      	ldr	r2, [r7, #0]
    f800:	601a      	str	r2, [r3, #0]
  desired_course = M_PI/2.-atan2(y - estimator_y, x - estimator_x);
    f802:	f64b 2370 	movw	r3, #47728	; 0xba70
    f806:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f80a:	681b      	ldr	r3, [r3, #0]
    f80c:	6838      	ldr	r0, [r7, #0]
    f80e:	4619      	mov	r1, r3
    f810:	f003 fc5c 	bl	130cc <__aeabi_fsub>
    f814:	4603      	mov	r3, r0
    f816:	4618      	mov	r0, r3
    f818:	f003 f8ce 	bl	129b8 <__aeabi_f2d>
    f81c:	4604      	mov	r4, r0
    f81e:	460d      	mov	r5, r1
    f820:	f64b 236c 	movw	r3, #47724	; 0xba6c
    f824:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f828:	681b      	ldr	r3, [r3, #0]
    f82a:	6878      	ldr	r0, [r7, #4]
    f82c:	4619      	mov	r1, r3
    f82e:	f003 fc4d 	bl	130cc <__aeabi_fsub>
    f832:	4603      	mov	r3, r0
    f834:	4618      	mov	r0, r3
    f836:	f003 f8bf 	bl	129b8 <__aeabi_f2d>
    f83a:	4602      	mov	r2, r0
    f83c:	460b      	mov	r3, r1
    f83e:	4620      	mov	r0, r4
    f840:	4629      	mov	r1, r5
    f842:	f001 f929 	bl	10a98 <pp_atan2>
    f846:	4602      	mov	r2, r0
    f848:	460b      	mov	r3, r1
    f84a:	a10b      	add	r1, pc, #44	; (adr r1, f878 <fly_to_xy+0x98>)
    f84c:	e9d1 0100 	ldrd	r0, r1, [r1]
    f850:	f002 ff52 	bl	126f8 <__aeabi_dsub>
    f854:	4602      	mov	r2, r0
    f856:	460b      	mov	r3, r1
    f858:	4610      	mov	r0, r2
    f85a:	4619      	mov	r1, r3
    f85c:	f003 fbe2 	bl	13024 <__aeabi_d2f>
    f860:	4602      	mov	r2, r0
    f862:	f24b 73fc 	movw	r3, #47100	; 0xb7fc
    f866:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f86a:	601a      	str	r2, [r3, #0]
}
    f86c:	3708      	adds	r7, #8
    f86e:	46bd      	mov	sp, r7
    f870:	bdb0      	pop	{r4, r5, r7, pc}
    f872:	bf00      	nop
    f874:	f3af 8000 	nop.w
    f878:	54442d18 	.word	0x54442d18
    f87c:	3ff921fb 	.word	0x3ff921fb

0000f880 <fly_to>:

static void fly_to(uint8_t wp) { 
    f880:	b580      	push	{r7, lr}
    f882:	b082      	sub	sp, #8
    f884:	af00      	add	r7, sp, #0
    f886:	4603      	mov	r3, r0
    f888:	71fb      	strb	r3, [r7, #7]
  fly_to_xy(waypoints[wp].x, waypoints[wp].y);
    f88a:	79f9      	ldrb	r1, [r7, #7]
    f88c:	f240 1240 	movw	r2, #320	; 0x140
    f890:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f894:	460b      	mov	r3, r1
    f896:	005b      	lsls	r3, r3, #1
    f898:	440b      	add	r3, r1
    f89a:	009b      	lsls	r3, r3, #2
    f89c:	4413      	add	r3, r2
    f89e:	6818      	ldr	r0, [r3, #0]
    f8a0:	79f9      	ldrb	r1, [r7, #7]
    f8a2:	f240 1240 	movw	r2, #320	; 0x140
    f8a6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f8aa:	460b      	mov	r3, r1
    f8ac:	005b      	lsls	r3, r3, #1
    f8ae:	440b      	add	r3, r1
    f8b0:	009b      	lsls	r3, r3, #2
    f8b2:	4413      	add	r3, r2
    f8b4:	3304      	adds	r3, #4
    f8b6:	681b      	ldr	r3, [r3, #0]
    f8b8:	4619      	mov	r1, r3
    f8ba:	f7ff ff91 	bl	f7e0 <fly_to_xy>
}
    f8be:	3708      	adds	r7, #8
    f8c0:	46bd      	mov	sp, r7
    f8c2:	bd80      	pop	{r7, pc}

0000f8c4 <route_to>:

static float alpha, leg;
static void route_to(uint8_t _last_wp, uint8_t wp) 
{
    f8c4:	b5b0      	push	{r4, r5, r7, lr}
    f8c6:	b088      	sub	sp, #32
    f8c8:	af00      	add	r7, sp, #0
    f8ca:	4602      	mov	r2, r0
    f8cc:	460b      	mov	r3, r1
    f8ce:	71fa      	strb	r2, [r7, #7]
    f8d0:	71bb      	strb	r3, [r7, #6]
  float last_wp_x = waypoints[_last_wp].x;
    f8d2:	79f9      	ldrb	r1, [r7, #7]
    f8d4:	f240 1240 	movw	r2, #320	; 0x140
    f8d8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f8dc:	460b      	mov	r3, r1
    f8de:	005b      	lsls	r3, r3, #1
    f8e0:	440b      	add	r3, r1
    f8e2:	009b      	lsls	r3, r3, #2
    f8e4:	4413      	add	r3, r2
    f8e6:	681b      	ldr	r3, [r3, #0]
    f8e8:	61fb      	str	r3, [r7, #28]
  float last_wp_y = waypoints[_last_wp].y;
    f8ea:	79f9      	ldrb	r1, [r7, #7]
    f8ec:	f240 1240 	movw	r2, #320	; 0x140
    f8f0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f8f4:	460b      	mov	r3, r1
    f8f6:	005b      	lsls	r3, r3, #1
    f8f8:	440b      	add	r3, r1
    f8fa:	009b      	lsls	r3, r3, #2
    f8fc:	4413      	add	r3, r2
    f8fe:	3304      	adds	r3, #4
    f900:	681b      	ldr	r3, [r3, #0]
    f902:	61bb      	str	r3, [r7, #24]
  float leg_x = waypoints[wp].x - last_wp_x;
    f904:	79b9      	ldrb	r1, [r7, #6]
    f906:	f240 1240 	movw	r2, #320	; 0x140
    f90a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f90e:	460b      	mov	r3, r1
    f910:	005b      	lsls	r3, r3, #1
    f912:	440b      	add	r3, r1
    f914:	009b      	lsls	r3, r3, #2
    f916:	4413      	add	r3, r2
    f918:	681b      	ldr	r3, [r3, #0]
    f91a:	4618      	mov	r0, r3
    f91c:	69f9      	ldr	r1, [r7, #28]
    f91e:	f003 fbd5 	bl	130cc <__aeabi_fsub>
    f922:	4603      	mov	r3, r0
    f924:	617b      	str	r3, [r7, #20]
  float leg_y = waypoints[wp].y - last_wp_y;
    f926:	79b9      	ldrb	r1, [r7, #6]
    f928:	f240 1240 	movw	r2, #320	; 0x140
    f92c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f930:	460b      	mov	r3, r1
    f932:	005b      	lsls	r3, r3, #1
    f934:	440b      	add	r3, r1
    f936:	009b      	lsls	r3, r3, #2
    f938:	4413      	add	r3, r2
    f93a:	3304      	adds	r3, #4
    f93c:	681b      	ldr	r3, [r3, #0]
    f93e:	4618      	mov	r0, r3
    f940:	69b9      	ldr	r1, [r7, #24]
    f942:	f003 fbc3 	bl	130cc <__aeabi_fsub>
    f946:	4603      	mov	r3, r0
    f948:	613b      	str	r3, [r7, #16]
  float leg2 = leg_x * leg_x + leg_y * leg_y;
    f94a:	6978      	ldr	r0, [r7, #20]
    f94c:	6979      	ldr	r1, [r7, #20]
    f94e:	f003 fcc7 	bl	132e0 <__aeabi_fmul>
    f952:	4603      	mov	r3, r0
    f954:	461c      	mov	r4, r3
    f956:	6938      	ldr	r0, [r7, #16]
    f958:	6939      	ldr	r1, [r7, #16]
    f95a:	f003 fcc1 	bl	132e0 <__aeabi_fmul>
    f95e:	4603      	mov	r3, r0
    f960:	4620      	mov	r0, r4
    f962:	4619      	mov	r1, r3
    f964:	f003 fbb4 	bl	130d0 <__addsf3>
    f968:	4603      	mov	r3, r0
    f96a:	60fb      	str	r3, [r7, #12]
  alpha = ((estimator_x - last_wp_x) * leg_x + (estimator_y - last_wp_y) * leg_y) / leg2;
    f96c:	f64b 236c 	movw	r3, #47724	; 0xba6c
    f970:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f974:	681b      	ldr	r3, [r3, #0]
    f976:	4618      	mov	r0, r3
    f978:	69f9      	ldr	r1, [r7, #28]
    f97a:	f003 fba7 	bl	130cc <__aeabi_fsub>
    f97e:	4603      	mov	r3, r0
    f980:	4618      	mov	r0, r3
    f982:	6979      	ldr	r1, [r7, #20]
    f984:	f003 fcac 	bl	132e0 <__aeabi_fmul>
    f988:	4603      	mov	r3, r0
    f98a:	461c      	mov	r4, r3
    f98c:	f64b 2370 	movw	r3, #47728	; 0xba70
    f990:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f994:	681b      	ldr	r3, [r3, #0]
    f996:	4618      	mov	r0, r3
    f998:	69b9      	ldr	r1, [r7, #24]
    f99a:	f003 fb97 	bl	130cc <__aeabi_fsub>
    f99e:	4603      	mov	r3, r0
    f9a0:	4618      	mov	r0, r3
    f9a2:	6939      	ldr	r1, [r7, #16]
    f9a4:	f003 fc9c 	bl	132e0 <__aeabi_fmul>
    f9a8:	4603      	mov	r3, r0
    f9aa:	4620      	mov	r0, r4
    f9ac:	4619      	mov	r1, r3
    f9ae:	f003 fb8f 	bl	130d0 <__addsf3>
    f9b2:	4603      	mov	r3, r0
    f9b4:	4618      	mov	r0, r3
    f9b6:	68f9      	ldr	r1, [r7, #12]
    f9b8:	f003 fd46 	bl	13448 <__aeabi_fdiv>
    f9bc:	4603      	mov	r3, r0
    f9be:	461a      	mov	r2, r3
    f9c0:	f64b 0354 	movw	r3, #47188	; 0xb854
    f9c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9c8:	601a      	str	r2, [r3, #0]
  alpha = Max(alpha, 0.);
    f9ca:	f64b 0354 	movw	r3, #47188	; 0xb854
    f9ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9d2:	681b      	ldr	r3, [r3, #0]
    f9d4:	4618      	mov	r0, r3
    f9d6:	f04f 0100 	mov.w	r1, #0
    f9da:	f003 fe33 	bl	13644 <__aeabi_fcmpge>
    f9de:	4603      	mov	r3, r0
    f9e0:	2b00      	cmp	r3, #0
    f9e2:	d005      	beq.n	f9f0 <route_to+0x12c>
    f9e4:	f64b 0354 	movw	r3, #47188	; 0xb854
    f9e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9ec:	681a      	ldr	r2, [r3, #0]
    f9ee:	e001      	b.n	f9f4 <route_to+0x130>
    f9f0:	f04f 0200 	mov.w	r2, #0
    f9f4:	f64b 0354 	movw	r3, #47188	; 0xb854
    f9f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9fc:	601a      	str	r2, [r3, #0]
  leg = sqrt(leg2);
    f9fe:	68f8      	ldr	r0, [r7, #12]
    fa00:	f002 ffda 	bl	129b8 <__aeabi_f2d>
    fa04:	4602      	mov	r2, r0
    fa06:	460b      	mov	r3, r1
    fa08:	4610      	mov	r0, r2
    fa0a:	4619      	mov	r1, r3
    fa0c:	f001 f9f4 	bl	10df8 <pp_sqrt>
    fa10:	4602      	mov	r2, r0
    fa12:	460b      	mov	r3, r1
    fa14:	4610      	mov	r0, r2
    fa16:	4619      	mov	r1, r3
    fa18:	f003 fb04 	bl	13024 <__aeabi_d2f>
    fa1c:	4602      	mov	r2, r0
    fa1e:	f64b 0358 	movw	r3, #47192	; 0xb858
    fa22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa26:	601a      	str	r2, [r3, #0]
  alpha += Max(carrot / leg, 0.); /* carrot computed in approaching() */
    fa28:	f64b 0354 	movw	r3, #47188	; 0xb854
    fa2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa30:	681b      	ldr	r3, [r3, #0]
    fa32:	4618      	mov	r0, r3
    fa34:	f002 ffc0 	bl	129b8 <__aeabi_f2d>
    fa38:	4604      	mov	r4, r0
    fa3a:	460d      	mov	r5, r1
    fa3c:	f64b 0350 	movw	r3, #47184	; 0xb850
    fa40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa44:	681a      	ldr	r2, [r3, #0]
    fa46:	f64b 0358 	movw	r3, #47192	; 0xb858
    fa4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa4e:	681b      	ldr	r3, [r3, #0]
    fa50:	4610      	mov	r0, r2
    fa52:	4619      	mov	r1, r3
    fa54:	f003 fcf8 	bl	13448 <__aeabi_fdiv>
    fa58:	4603      	mov	r3, r0
    fa5a:	4618      	mov	r0, r3
    fa5c:	f04f 0100 	mov.w	r1, #0
    fa60:	f003 fdf0 	bl	13644 <__aeabi_fcmpge>
    fa64:	4603      	mov	r3, r0
    fa66:	2b00      	cmp	r3, #0
    fa68:	d014      	beq.n	fa94 <route_to+0x1d0>
    fa6a:	f64b 0350 	movw	r3, #47184	; 0xb850
    fa6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa72:	681a      	ldr	r2, [r3, #0]
    fa74:	f64b 0358 	movw	r3, #47192	; 0xb858
    fa78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa7c:	681b      	ldr	r3, [r3, #0]
    fa7e:	4610      	mov	r0, r2
    fa80:	4619      	mov	r1, r3
    fa82:	f003 fce1 	bl	13448 <__aeabi_fdiv>
    fa86:	4603      	mov	r3, r0
    fa88:	4618      	mov	r0, r3
    fa8a:	f002 ff95 	bl	129b8 <__aeabi_f2d>
    fa8e:	4602      	mov	r2, r0
    fa90:	460b      	mov	r3, r1
    fa92:	e003      	b.n	fa9c <route_to+0x1d8>
    fa94:	f04f 0200 	mov.w	r2, #0
    fa98:	f04f 0300 	mov.w	r3, #0
    fa9c:	4620      	mov	r0, r4
    fa9e:	4629      	mov	r1, r5
    faa0:	f002 fe2c 	bl	126fc <__adddf3>
    faa4:	4602      	mov	r2, r0
    faa6:	460b      	mov	r3, r1
    faa8:	4610      	mov	r0, r2
    faaa:	4619      	mov	r1, r3
    faac:	f003 faba 	bl	13024 <__aeabi_d2f>
    fab0:	4602      	mov	r2, r0
    fab2:	f64b 0354 	movw	r3, #47188	; 0xb854
    fab6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    faba:	601a      	str	r2, [r3, #0]
  alpha = Min(1., alpha);
    fabc:	f64b 0354 	movw	r3, #47188	; 0xb854
    fac0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fac4:	681b      	ldr	r3, [r3, #0]
    fac6:	4618      	mov	r0, r3
    fac8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    facc:	f003 fdba 	bl	13644 <__aeabi_fcmpge>
    fad0:	4603      	mov	r3, r0
    fad2:	2b00      	cmp	r3, #0
    fad4:	d002      	beq.n	fadc <route_to+0x218>
    fad6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    fada:	e004      	b.n	fae6 <route_to+0x222>
    fadc:	f64b 0354 	movw	r3, #47188	; 0xb854
    fae0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fae4:	681a      	ldr	r2, [r3, #0]
    fae6:	f64b 0354 	movw	r3, #47188	; 0xb854
    faea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    faee:	601a      	str	r2, [r3, #0]
  fly_to_xy(last_wp_x + alpha*leg_x, last_wp_y + alpha*leg_y);
    faf0:	f64b 0354 	movw	r3, #47188	; 0xb854
    faf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    faf8:	681b      	ldr	r3, [r3, #0]
    fafa:	4618      	mov	r0, r3
    fafc:	6979      	ldr	r1, [r7, #20]
    fafe:	f003 fbef 	bl	132e0 <__aeabi_fmul>
    fb02:	4603      	mov	r3, r0
    fb04:	4618      	mov	r0, r3
    fb06:	69f9      	ldr	r1, [r7, #28]
    fb08:	f003 fae2 	bl	130d0 <__addsf3>
    fb0c:	4603      	mov	r3, r0
    fb0e:	461c      	mov	r4, r3
    fb10:	f64b 0354 	movw	r3, #47188	; 0xb854
    fb14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb18:	681b      	ldr	r3, [r3, #0]
    fb1a:	4618      	mov	r0, r3
    fb1c:	6939      	ldr	r1, [r7, #16]
    fb1e:	f003 fbdf 	bl	132e0 <__aeabi_fmul>
    fb22:	4603      	mov	r3, r0
    fb24:	4618      	mov	r0, r3
    fb26:	69b9      	ldr	r1, [r7, #24]
    fb28:	f003 fad2 	bl	130d0 <__addsf3>
    fb2c:	4603      	mov	r3, r0
    fb2e:	4620      	mov	r0, r4
    fb30:	4619      	mov	r1, r3
    fb32:	f7ff fe55 	bl	f7e0 <fly_to_xy>
}
    fb36:	3720      	adds	r7, #32
    fb38:	46bd      	mov	sp, r7
    fb3a:	bdb0      	pop	{r4, r5, r7, pc}

0000fb3c <compute_dist2_to_home>:
  float last_alt = waypoints[_last_wp].a;
  desired_altitude = last_alt + alpha * (waypoints[wp].a - last_alt);
  pre_climb = NOMINAL_AIRSPEED * (waypoints[wp].a - last_alt) / leg;
}*/

static inline void compute_dist2_to_home(void) {
    fb3c:	b590      	push	{r4, r7, lr}
    fb3e:	b083      	sub	sp, #12
    fb40:	af00      	add	r7, sp, #0
  float ph_x = waypoints[WP_HOME].x - estimator_x;
    fb42:	f240 1340 	movw	r3, #320	; 0x140
    fb46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb4a:	681a      	ldr	r2, [r3, #0]
    fb4c:	f64b 236c 	movw	r3, #47724	; 0xba6c
    fb50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb54:	681b      	ldr	r3, [r3, #0]
    fb56:	4610      	mov	r0, r2
    fb58:	4619      	mov	r1, r3
    fb5a:	f003 fab7 	bl	130cc <__aeabi_fsub>
    fb5e:	4603      	mov	r3, r0
    fb60:	607b      	str	r3, [r7, #4]
  float ph_y = waypoints[WP_HOME].y - estimator_y;
    fb62:	f240 1340 	movw	r3, #320	; 0x140
    fb66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb6a:	685a      	ldr	r2, [r3, #4]
    fb6c:	f64b 2370 	movw	r3, #47728	; 0xba70
    fb70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb74:	681b      	ldr	r3, [r3, #0]
    fb76:	4610      	mov	r0, r2
    fb78:	4619      	mov	r1, r3
    fb7a:	f003 faa7 	bl	130cc <__aeabi_fsub>
    fb7e:	4603      	mov	r3, r0
    fb80:	603b      	str	r3, [r7, #0]
  dist2_to_home = ph_x*ph_x + ph_y *ph_y;
    fb82:	6878      	ldr	r0, [r7, #4]
    fb84:	6879      	ldr	r1, [r7, #4]
    fb86:	f003 fbab 	bl	132e0 <__aeabi_fmul>
    fb8a:	4603      	mov	r3, r0
    fb8c:	461c      	mov	r4, r3
    fb8e:	6838      	ldr	r0, [r7, #0]
    fb90:	6839      	ldr	r1, [r7, #0]
    fb92:	f003 fba5 	bl	132e0 <__aeabi_fmul>
    fb96:	4603      	mov	r3, r0
    fb98:	4620      	mov	r0, r4
    fb9a:	4619      	mov	r1, r3
    fb9c:	f003 fa98 	bl	130d0 <__addsf3>
    fba0:	4603      	mov	r3, r0
    fba2:	461a      	mov	r2, r3
    fba4:	f64b 0348 	movw	r3, #47176	; 0xb848
    fba8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbac:	601a      	str	r2, [r3, #0]
  too_far_from_home = dist2_to_home > (MAX_DIST_FROM_HOME*MAX_DIST_FROM_HOME);
    fbae:	f64b 0348 	movw	r3, #47176	; 0xb848
    fbb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbb6:	681b      	ldr	r3, [r3, #0]
    fbb8:	2201      	movs	r2, #1
    fbba:	4614      	mov	r4, r2
    fbbc:	4618      	mov	r0, r3
    fbbe:	f44f 5110 	mov.w	r1, #9216	; 0x2400
    fbc2:	f6c4 0174 	movt	r1, #18548	; 0x4874
    fbc6:	f003 fd47 	bl	13658 <__aeabi_fcmpgt>
    fbca:	4603      	mov	r3, r0
    fbcc:	2b00      	cmp	r3, #0
    fbce:	d101      	bne.n	fbd4 <compute_dist2_to_home+0x98>
    fbd0:	2300      	movs	r3, #0
    fbd2:	461c      	mov	r4, r3
    fbd4:	b2e3      	uxtb	r3, r4
    fbd6:	461a      	mov	r2, r3
    fbd8:	f64b 034c 	movw	r3, #47180	; 0xb84c
    fbdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbe0:	701a      	strb	r2, [r3, #0]
}
    fbe2:	370c      	adds	r7, #12
    fbe4:	46bd      	mov	sp, r7
    fbe6:	bd90      	pop	{r4, r7, pc}

0000fbe8 <nav_home>:

void nav_home(void) {
    fbe8:	b580      	push	{r7, lr}
    fbea:	af00      	add	r7, sp, #0
  //Circle(WP_HOME, 50); /* FIXME: radius should be defined elsewhere */
  nav_pitch = 0.; /* Nominal speed */ 
    fbec:	f64b 033c 	movw	r3, #47164	; 0xb83c
    fbf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbf4:	f04f 0200 	mov.w	r2, #0
    fbf8:	601a      	str	r2, [r3, #0]
  vertical_mode = VERTICAL_MODE_AUTO_ALT;
    fbfa:	f24b 439d 	movw	r3, #46237	; 0xb49d
    fbfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc02:	2203      	movs	r2, #3
    fc04:	701a      	strb	r2, [r3, #0]
  desired_altitude = GROUND_ALT+50;
    fc06:	f240 133c 	movw	r3, #316	; 0x13c
    fc0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc0e:	f04f 0200 	mov.w	r2, #0
    fc12:	f2c4 322f 	movt	r2, #17199	; 0x432f
    fc16:	601a      	str	r2, [r3, #0]
  compute_dist2_to_home();
    fc18:	f7ff ff90 	bl	fb3c <compute_dist2_to_home>
  dist2_to_wp = dist2_to_home;
    fc1c:	f64b 0348 	movw	r3, #47176	; 0xb848
    fc20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc24:	681a      	ldr	r2, [r3, #0]
    fc26:	f64b 0344 	movw	r3, #47172	; 0xb844
    fc2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc2e:	601a      	str	r2, [r3, #0]
}
    fc30:	bd80      	pop	{r7, pc}
    fc32:	bf00      	nop

0000fc34 <nav_update>:

void nav_update(void) {
    fc34:	b580      	push	{r7, lr}
    fc36:	af00      	add	r7, sp, #0
  compute_dist2_to_home();
    fc38:	f7ff ff80 	bl	fb3c <compute_dist2_to_home>

  auto_nav();
    fc3c:	f7fd fc0c 	bl	d458 <auto_nav>
}
    fc40:	bd80      	pop	{r7, pc}
    fc42:	bf00      	nop

0000fc44 <nav_init>:


void nav_init(void) {
    fc44:	b480      	push	{r7}
    fc46:	af00      	add	r7, sp, #0
  nav_block = 0;
    fc48:	f64b 0311 	movw	r3, #47121	; 0xb811
    fc4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc50:	2200      	movs	r2, #0
    fc52:	701a      	strb	r2, [r3, #0]
  nav_stage = 0;
    fc54:	f64b 0310 	movw	r3, #47120	; 0xb810
    fc58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc5c:	2200      	movs	r2, #0
    fc5e:	701a      	strb	r2, [r3, #0]
}
    fc60:	46bd      	mov	sp, r7
    fc62:	f85d 7b04 	ldr.w	r7, [sp], #4
    fc66:	4770      	bx	lr

0000fc68 <uart0_transmit>:

static uint8_t           tx_head1; /* next free in buf */
static volatile uint8_t  tx_tail1; /* next char to send */
static uint8_t           tx_buf1[ TX_BUF_SIZE ];

void uart0_transmit( unsigned char data ) {
    fc68:	b480      	push	{r7}
    fc6a:	b083      	sub	sp, #12
    fc6c:	af00      	add	r7, sp, #0
    fc6e:	4603      	mov	r3, r0
    fc70:	71fb      	strb	r3, [r7, #7]
  if (UCSR0B & _BV(TXCIE)) {
    fc72:	f248 030a 	movw	r3, #32778	; 0x800a
    fc76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc7a:	781b      	ldrb	r3, [r3, #0]
    fc7c:	b2db      	uxtb	r3, r3
    fc7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    fc82:	2b00      	cmp	r3, #0
    fc84:	d028      	beq.n	fcd8 <uart0_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail0 == tx_head0 + 1) { /* BUF_SIZE = 256 */
    fc86:	f64b 0365 	movw	r3, #47205	; 0xb865
    fc8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc8e:	781b      	ldrb	r3, [r3, #0]
    fc90:	b2db      	uxtb	r3, r3
    fc92:	461a      	mov	r2, r3
    fc94:	f64b 0364 	movw	r3, #47204	; 0xb864
    fc98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc9c:	781b      	ldrb	r3, [r3, #0]
    fc9e:	3301      	adds	r3, #1
    fca0:	429a      	cmp	r2, r3
    fca2:	d100      	bne.n	fca6 <uart0_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
    fca4:	e02c      	b.n	fd00 <uart0_transmit+0x98>
    }
    tx_buf0[tx_head0] = data;
    fca6:	f64b 0364 	movw	r3, #47204	; 0xb864
    fcaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcae:	781b      	ldrb	r3, [r3, #0]
    fcb0:	461a      	mov	r2, r3
    fcb2:	f64b 0368 	movw	r3, #47208	; 0xb868
    fcb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcba:	79f9      	ldrb	r1, [r7, #7]
    fcbc:	5499      	strb	r1, [r3, r2]
    tx_head0++; /* BUF_SIZE = 256 */
    fcbe:	f64b 0364 	movw	r3, #47204	; 0xb864
    fcc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcc6:	781b      	ldrb	r3, [r3, #0]
    fcc8:	3301      	adds	r3, #1
    fcca:	b2da      	uxtb	r2, r3
    fccc:	f64b 0364 	movw	r3, #47204	; 0xb864
    fcd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcd4:	701a      	strb	r2, [r3, #0]
    fcd6:	e013      	b.n	fd00 <uart0_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR0 = data;
    fcd8:	f248 030c 	movw	r3, #32780	; 0x800c
    fcdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fce0:	79fa      	ldrb	r2, [r7, #7]
    fce2:	701a      	strb	r2, [r3, #0]
    sbi(UCSR0B, TXCIE);
    fce4:	f248 030a 	movw	r3, #32778	; 0x800a
    fce8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fcec:	f248 020a 	movw	r2, #32778	; 0x800a
    fcf0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fcf4:	7812      	ldrb	r2, [r2, #0]
    fcf6:	b2d2      	uxtb	r2, r2
    fcf8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    fcfc:	b2d2      	uxtb	r2, r2
    fcfe:	701a      	strb	r2, [r3, #0]
  }
}
    fd00:	370c      	adds	r7, #12
    fd02:	46bd      	mov	sp, r7
    fd04:	f85d 7b04 	ldr.w	r7, [sp], #4
    fd08:	4770      	bx	lr
    fd0a:	bf00      	nop

0000fd0c <uart1_transmit>:

void uart1_transmit( unsigned char data ) {
    fd0c:	b480      	push	{r7}
    fd0e:	b083      	sub	sp, #12
    fd10:	af00      	add	r7, sp, #0
    fd12:	4603      	mov	r3, r0
    fd14:	71fb      	strb	r3, [r7, #7]
  if (UCSR1B & _BV(TXCIE)) {
    fd16:	f248 039a 	movw	r3, #32922	; 0x809a
    fd1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd1e:	781b      	ldrb	r3, [r3, #0]
    fd20:	b2db      	uxtb	r3, r3
    fd22:	f003 0340 	and.w	r3, r3, #64	; 0x40
    fd26:	2b00      	cmp	r3, #0
    fd28:	d028      	beq.n	fd7c <uart1_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail1 == tx_head1 + 1) { /* BUF_SIZE = 256 */
    fd2a:	f64b 1369 	movw	r3, #47465	; 0xb969
    fd2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd32:	781b      	ldrb	r3, [r3, #0]
    fd34:	b2db      	uxtb	r3, r3
    fd36:	461a      	mov	r2, r3
    fd38:	f64b 1368 	movw	r3, #47464	; 0xb968
    fd3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd40:	781b      	ldrb	r3, [r3, #0]
    fd42:	3301      	adds	r3, #1
    fd44:	429a      	cmp	r2, r3
    fd46:	d100      	bne.n	fd4a <uart1_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
    fd48:	e02c      	b.n	fda4 <uart1_transmit+0x98>
    }
    tx_buf1[tx_head1] = data;
    fd4a:	f64b 1368 	movw	r3, #47464	; 0xb968
    fd4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd52:	781b      	ldrb	r3, [r3, #0]
    fd54:	461a      	mov	r2, r3
    fd56:	f64b 136c 	movw	r3, #47468	; 0xb96c
    fd5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd5e:	79f9      	ldrb	r1, [r7, #7]
    fd60:	5499      	strb	r1, [r3, r2]
    tx_head1++; /* BUF_SIZE = 256 */
    fd62:	f64b 1368 	movw	r3, #47464	; 0xb968
    fd66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd6a:	781b      	ldrb	r3, [r3, #0]
    fd6c:	3301      	adds	r3, #1
    fd6e:	b2da      	uxtb	r2, r3
    fd70:	f64b 1368 	movw	r3, #47464	; 0xb968
    fd74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd78:	701a      	strb	r2, [r3, #0]
    fd7a:	e013      	b.n	fda4 <uart1_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR1 = data;
    fd7c:	f248 039c 	movw	r3, #32924	; 0x809c
    fd80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd84:	79fa      	ldrb	r2, [r7, #7]
    fd86:	701a      	strb	r2, [r3, #0]
    sbi(UCSR1B, TXCIE);
    fd88:	f248 039a 	movw	r3, #32922	; 0x809a
    fd8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd90:	f248 029a 	movw	r2, #32922	; 0x809a
    fd94:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fd98:	7812      	ldrb	r2, [r2, #0]
    fd9a:	b2d2      	uxtb	r2, r2
    fd9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    fda0:	b2d2      	uxtb	r2, r2
    fda2:	701a      	strb	r2, [r3, #0]
  }
}
    fda4:	370c      	adds	r7, #12
    fda6:	46bd      	mov	sp, r7
    fda8:	f85d 7b04 	ldr.w	r7, [sp], #4
    fdac:	4770      	bx	lr
    fdae:	bf00      	nop

0000fdb0 <uart0_print_string>:


void uart0_print_string(const uint8_t* s) {
    fdb0:	b580      	push	{r7, lr}
    fdb2:	b084      	sub	sp, #16
    fdb4:	af00      	add	r7, sp, #0
    fdb6:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
    fdb8:	2300      	movs	r3, #0
    fdba:	73fb      	strb	r3, [r7, #15]
  while (s[i]) {
    fdbc:	e009      	b.n	fdd2 <uart0_print_string+0x22>
    uart0_transmit(s[i]);
    fdbe:	7bfb      	ldrb	r3, [r7, #15]
    fdc0:	687a      	ldr	r2, [r7, #4]
    fdc2:	4413      	add	r3, r2
    fdc4:	781b      	ldrb	r3, [r3, #0]
    fdc6:	4618      	mov	r0, r3
    fdc8:	f7ff ff4e 	bl	fc68 <uart0_transmit>
    i++;
    fdcc:	7bfb      	ldrb	r3, [r7, #15]
    fdce:	3301      	adds	r3, #1
    fdd0:	73fb      	strb	r3, [r7, #15]
}


void uart0_print_string(const uint8_t* s) {
  uint8_t i = 0;
  while (s[i]) {
    fdd2:	7bfb      	ldrb	r3, [r7, #15]
    fdd4:	687a      	ldr	r2, [r7, #4]
    fdd6:	4413      	add	r3, r2
    fdd8:	781b      	ldrb	r3, [r3, #0]
    fdda:	2b00      	cmp	r3, #0
    fddc:	d1ef      	bne.n	fdbe <uart0_print_string+0xe>
    uart0_transmit(s[i]);
    i++;
  }
}
    fdde:	3710      	adds	r7, #16
    fde0:	46bd      	mov	sp, r7
    fde2:	bd80      	pop	{r7, pc}

0000fde4 <uart0_print_hex>:

void uart0_print_hex(const uint8_t c) {
    fde4:	b590      	push	{r4, r7, lr}
    fde6:	b089      	sub	sp, #36	; 0x24
    fde8:	af00      	add	r7, sp, #0
    fdea:	4603      	mov	r3, r0
    fdec:	71fb      	strb	r3, [r7, #7]
  const uint8_t hex[16] = { '0', '1', '2', '3', '4', '5', '6', '7', 
    fdee:	f643 1314 	movw	r3, #14612	; 0x3914
    fdf2:	f2c0 0301 	movt	r3, #1
    fdf6:	f107 040c 	add.w	r4, r7, #12
    fdfa:	6818      	ldr	r0, [r3, #0]
    fdfc:	6859      	ldr	r1, [r3, #4]
    fdfe:	689a      	ldr	r2, [r3, #8]
    fe00:	68db      	ldr	r3, [r3, #12]
    fe02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
  uint8_t high = (c & 0xF0)>>4;
    fe04:	79fb      	ldrb	r3, [r7, #7]
    fe06:	091b      	lsrs	r3, r3, #4
    fe08:	77fb      	strb	r3, [r7, #31]
  uint8_t low  = c & 0x0F;
    fe0a:	79fb      	ldrb	r3, [r7, #7]
    fe0c:	f003 030f 	and.w	r3, r3, #15
    fe10:	77bb      	strb	r3, [r7, #30]
    /*
    *Added by SunnyBeike
    * */
    high = 15;
    fe12:	230f      	movs	r3, #15
    fe14:	77fb      	strb	r3, [r7, #31]
    low = 15;
    fe16:	230f      	movs	r3, #15
    fe18:	77bb      	strb	r3, [r7, #30]
    /*
    *End
    * */
    uart0_transmit(hex[high]);
    fe1a:	7ffb      	ldrb	r3, [r7, #31]
    fe1c:	f107 0220 	add.w	r2, r7, #32
    fe20:	4413      	add	r3, r2
    fe22:	f813 3c14 	ldrb.w	r3, [r3, #-20]
    fe26:	4618      	mov	r0, r3
    fe28:	f7ff ff1e 	bl	fc68 <uart0_transmit>
  uart0_transmit(hex[low]);
    fe2c:	7fbb      	ldrb	r3, [r7, #30]
    fe2e:	f107 0220 	add.w	r2, r7, #32
    fe32:	4413      	add	r3, r2
    fe34:	f813 3c14 	ldrb.w	r3, [r3, #-20]
    fe38:	4618      	mov	r0, r3
    fe3a:	f7ff ff15 	bl	fc68 <uart0_transmit>
}
    fe3e:	3724      	adds	r7, #36	; 0x24
    fe40:	46bd      	mov	sp, r7
    fe42:	bd90      	pop	{r4, r7, pc}

0000fe44 <__vector_20>:


SIGNAL(SIG_UART0_TRANS) {
    fe44:	b480      	push	{r7}
    fe46:	af00      	add	r7, sp, #0
  if (tx_head0 == tx_tail0) {
    fe48:	f64b 0364 	movw	r3, #47204	; 0xb864
    fe4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe50:	781a      	ldrb	r2, [r3, #0]
    fe52:	f64b 0365 	movw	r3, #47205	; 0xb865
    fe56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe5a:	781b      	ldrb	r3, [r3, #0]
    fe5c:	b2db      	uxtb	r3, r3
    fe5e:	429a      	cmp	r2, r3
    fe60:	d10e      	bne.n	fe80 <__vector_20+0x3c>
    /* Nothing more to send */
    cbi(UCSR0B, TXCIE); /* disable interrupt */
    fe62:	f248 030a 	movw	r3, #32778	; 0x800a
    fe66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe6a:	f248 020a 	movw	r2, #32778	; 0x800a
    fe6e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fe72:	7812      	ldrb	r2, [r2, #0]
    fe74:	b2d2      	uxtb	r2, r2
    fe76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    fe7a:	b2d2      	uxtb	r2, r2
    fe7c:	701a      	strb	r2, [r3, #0]
    fe7e:	e01d      	b.n	febc <__vector_20+0x78>
  } else {
    UDR0 = tx_buf0[tx_tail0];
    fe80:	f248 030c 	movw	r3, #32780	; 0x800c
    fe84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe88:	f64b 0265 	movw	r2, #47205	; 0xb865
    fe8c:	f2c2 0204 	movt	r2, #8196	; 0x2004
    fe90:	7812      	ldrb	r2, [r2, #0]
    fe92:	b2d2      	uxtb	r2, r2
    fe94:	4611      	mov	r1, r2
    fe96:	f64b 0268 	movw	r2, #47208	; 0xb868
    fe9a:	f2c2 0204 	movt	r2, #8196	; 0x2004
    fe9e:	5c52      	ldrb	r2, [r2, r1]
    fea0:	701a      	strb	r2, [r3, #0]
    tx_tail0++; /* warning tx_buf_len is 256 */
    fea2:	f64b 0365 	movw	r3, #47205	; 0xb865
    fea6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    feaa:	781b      	ldrb	r3, [r3, #0]
    feac:	b2db      	uxtb	r3, r3
    feae:	3301      	adds	r3, #1
    feb0:	b2da      	uxtb	r2, r3
    feb2:	f64b 0365 	movw	r3, #47205	; 0xb865
    feb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    feba:	701a      	strb	r2, [r3, #0]
  }
}
    febc:	46bd      	mov	sp, r7
    febe:	f85d 7b04 	ldr.w	r7, [sp], #4
    fec2:	4770      	bx	lr

0000fec4 <__vector_32>:

SIGNAL(SIG_UART1_TRANS) {
    fec4:	b480      	push	{r7}
    fec6:	af00      	add	r7, sp, #0
  if (tx_head1 == tx_tail1) {
    fec8:	f64b 1368 	movw	r3, #47464	; 0xb968
    fecc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fed0:	781a      	ldrb	r2, [r3, #0]
    fed2:	f64b 1369 	movw	r3, #47465	; 0xb969
    fed6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    feda:	781b      	ldrb	r3, [r3, #0]
    fedc:	b2db      	uxtb	r3, r3
    fede:	429a      	cmp	r2, r3
    fee0:	d10e      	bne.n	ff00 <__vector_32+0x3c>
    /* Nothing more to send */
    cbi(UCSR1B, TXCIE); /* disable interrupt */
    fee2:	f248 039a 	movw	r3, #32922	; 0x809a
    fee6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    feea:	f248 029a 	movw	r2, #32922	; 0x809a
    feee:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fef2:	7812      	ldrb	r2, [r2, #0]
    fef4:	b2d2      	uxtb	r2, r2
    fef6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    fefa:	b2d2      	uxtb	r2, r2
    fefc:	701a      	strb	r2, [r3, #0]
    fefe:	e01d      	b.n	ff3c <__vector_32+0x78>
  } else {
    UDR1 = tx_buf1[tx_tail1];
    ff00:	f248 039c 	movw	r3, #32924	; 0x809c
    ff04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff08:	f64b 1269 	movw	r2, #47465	; 0xb969
    ff0c:	f2c2 0204 	movt	r2, #8196	; 0x2004
    ff10:	7812      	ldrb	r2, [r2, #0]
    ff12:	b2d2      	uxtb	r2, r2
    ff14:	4611      	mov	r1, r2
    ff16:	f64b 126c 	movw	r2, #47468	; 0xb96c
    ff1a:	f2c2 0204 	movt	r2, #8196	; 0x2004
    ff1e:	5c52      	ldrb	r2, [r2, r1]
    ff20:	701a      	strb	r2, [r3, #0]
    tx_tail1++; /* warning tx_buf_len is 256 */
    ff22:	f64b 1369 	movw	r3, #47465	; 0xb969
    ff26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff2a:	781b      	ldrb	r3, [r3, #0]
    ff2c:	b2db      	uxtb	r3, r3
    ff2e:	3301      	adds	r3, #1
    ff30:	b2da      	uxtb	r2, r3
    ff32:	f64b 1369 	movw	r3, #47465	; 0xb969
    ff36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff3a:	701a      	strb	r2, [r3, #0]
  }
}
    ff3c:	46bd      	mov	sp, r7
    ff3e:	f85d 7b04 	ldr.w	r7, [sp], #4
    ff42:	4770      	bx	lr

0000ff44 <uart0_init>:

void uart0_init( void ) {
    ff44:	b480      	push	{r7}
    ff46:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRR0H = 0; 
    ff48:	f248 0390 	movw	r3, #32912	; 0x8090
    ff4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff50:	2200      	movs	r2, #0
    ff52:	701a      	strb	r2, [r3, #0]
  UBRR0L = 25; // 38.4
    ff54:	f248 0309 	movw	r3, #32777	; 0x8009
    ff58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff5c:	2219      	movs	r2, #25
    ff5e:	701a      	strb	r2, [r3, #0]
  // UBRR0L = 103; //9600
  /* single speed */ 
  UCSR0A = 0; 
    ff60:	f248 030b 	movw	r3, #32779	; 0x800b
    ff64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff68:	2200      	movs	r2, #0
    ff6a:	701a      	strb	r2, [r3, #0]
  /* Enable receiver and transmitter */ 
  UCSR0B = _BV(RXEN) | _BV(TXEN);
    ff6c:	f248 030a 	movw	r3, #32778	; 0x800a
    ff70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff74:	2218      	movs	r2, #24
    ff76:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSR0C = _BV(UCSZ1) | _BV(UCSZ0);
    ff78:	f248 0395 	movw	r3, #32917	; 0x8095
    ff7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff80:	2206      	movs	r2, #6
    ff82:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi(UCSR0B, RXCIE ); 
    ff84:	f248 030a 	movw	r3, #32778	; 0x800a
    ff88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff8c:	f248 020a 	movw	r2, #32778	; 0x800a
    ff90:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ff94:	7812      	ldrb	r2, [r2, #0]
    ff96:	b2d2      	uxtb	r2, r2
    ff98:	f062 027f 	orn	r2, r2, #127	; 0x7f
    ff9c:	b2d2      	uxtb	r2, r2
    ff9e:	701a      	strb	r2, [r3, #0]
}
    ffa0:	46bd      	mov	sp, r7
    ffa2:	f85d 7b04 	ldr.w	r7, [sp], #4
    ffa6:	4770      	bx	lr

0000ffa8 <uart1_init>:

void uart1_init( void ) {
    ffa8:	b480      	push	{r7}
    ffaa:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRR1H = 0; 
    ffac:	f248 0398 	movw	r3, #32920	; 0x8098
    ffb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffb4:	2200      	movs	r2, #0
    ffb6:	701a      	strb	r2, [r3, #0]
  UBRR1L = 25; // 38.4
    ffb8:	f248 0399 	movw	r3, #32921	; 0x8099
    ffbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffc0:	2219      	movs	r2, #25
    ffc2:	701a      	strb	r2, [r3, #0]
  // UBRR1L = 103; //9600


  /* single speed */ 
  UCSR1A = 0; 
    ffc4:	f248 039b 	movw	r3, #32923	; 0x809b
    ffc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffcc:	2200      	movs	r2, #0
    ffce:	701a      	strb	r2, [r3, #0]
  /* Enable receiver and transmitter */ 
  UCSR1B = _BV(RXEN) | _BV(TXEN);
    ffd0:	f248 039a 	movw	r3, #32922	; 0x809a
    ffd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffd8:	2218      	movs	r2, #24
    ffda:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSR1C = _BV(UCSZ1) | _BV(UCSZ0);
    ffdc:	f248 039d 	movw	r3, #32925	; 0x809d
    ffe0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffe4:	2206      	movs	r2, #6
    ffe6:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi(UCSR1B, RXCIE ); 
    ffe8:	f248 039a 	movw	r3, #32922	; 0x809a
    ffec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fff0:	f248 029a 	movw	r2, #32922	; 0x809a
    fff4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fff8:	7812      	ldrb	r2, [r2, #0]
    fffa:	b2d2      	uxtb	r2, r2
    fffc:	f062 027f 	orn	r2, r2, #127	; 0x7f
   10000:	b2d2      	uxtb	r2, r2
   10002:	701a      	strb	r2, [r3, #0]
}
   10004:	46bd      	mov	sp, r7
   10006:	f85d 7b04 	ldr.w	r7, [sp], #4
   1000a:	4770      	bx	lr
   1000c:	0000      	movs	r0, r0
	...

00010010 <estimator_init>:
  estimator_theta_dot = theta_dot; \
}

inline void estimator_update_lls( void );

void estimator_init( void ) {
   10010:	b480      	push	{r7}
   10012:	af00      	add	r7, sp, #0

  EstimatorSetPos (0., 0., 0.);
   10014:	f64b 236c 	movw	r3, #47724	; 0xba6c
   10018:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1001c:	f04f 0200 	mov.w	r2, #0
   10020:	601a      	str	r2, [r3, #0]
   10022:	f64b 2370 	movw	r3, #47728	; 0xba70
   10026:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1002a:	f04f 0200 	mov.w	r2, #0
   1002e:	601a      	str	r2, [r3, #0]
   10030:	f64b 2374 	movw	r3, #47732	; 0xba74
   10034:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10038:	f04f 0200 	mov.w	r2, #0
   1003c:	601a      	str	r2, [r3, #0]

  EstimatorSetAtt (0., 0., 0);
   1003e:	f64b 2378 	movw	r3, #47736	; 0xba78
   10042:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10046:	f04f 0200 	mov.w	r2, #0
   1004a:	601a      	str	r2, [r3, #0]
   1004c:	f64b 237c 	movw	r3, #47740	; 0xba7c
   10050:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10054:	f04f 0200 	mov.w	r2, #0
   10058:	601a      	str	r2, [r3, #0]
   1005a:	f64b 2380 	movw	r3, #47744	; 0xba80
   1005e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10062:	f04f 0200 	mov.w	r2, #0
   10066:	601a      	str	r2, [r3, #0]

  EstimatorSetSpeedPol ( 0., 0., 0.);
   10068:	f64b 23a4 	movw	r3, #47780	; 0xbaa4
   1006c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10070:	f04f 0200 	mov.w	r2, #0
   10074:	601a      	str	r2, [r3, #0]
   10076:	f64b 23a8 	movw	r3, #47784	; 0xbaa8
   1007a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1007e:	f04f 0200 	mov.w	r2, #0
   10082:	601a      	str	r2, [r3, #0]
   10084:	f64b 238c 	movw	r3, #47756	; 0xba8c
   10088:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1008c:	f04f 0200 	mov.w	r2, #0
   10090:	601a      	str	r2, [r3, #0]

  EstimatorSetRotSpeed (0., 0., 0.);
   10092:	f64b 2390 	movw	r3, #47760	; 0xba90
   10096:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1009a:	f04f 0200 	mov.w	r2, #0
   1009e:	601a      	str	r2, [r3, #0]
   100a0:	f64b 2394 	movw	r3, #47764	; 0xba94
   100a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100a8:	f04f 0200 	mov.w	r2, #0
   100ac:	601a      	str	r2, [r3, #0]
   100ae:	f64b 2398 	movw	r3, #47768	; 0xba98
   100b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100b6:	f04f 0200 	mov.w	r2, #0
   100ba:	601a      	str	r2, [r3, #0]

  estimator_flight_time = 0;
   100bc:	f64b 239c 	movw	r3, #47772	; 0xba9c
   100c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100c4:	2200      	movs	r2, #0
   100c6:	801a      	strh	r2, [r3, #0]

  estimator_rad_of_ir = ir_rad_of_ir;
   100c8:	f240 1310 	movw	r3, #272	; 0x110
   100cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100d0:	681a      	ldr	r2, [r3, #0]
   100d2:	f64b 23ac 	movw	r3, #47788	; 0xbaac
   100d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100da:	601a      	str	r2, [r3, #0]
}
   100dc:	46bd      	mov	sp, r7
   100de:	f85d 7b04 	ldr.w	r7, [sp], #4
   100e2:	4770      	bx	lr

000100e4 <estimator_update_state_infrared>:

#define EstimatorIrGainIsCorrect() (TRUE)

void estimator_update_state_infrared( void ) {
   100e4:	b580      	push	{r7, lr}
   100e6:	b082      	sub	sp, #8
   100e8:	af00      	add	r7, sp, #0
  float rad_of_ir = (ir_estim_mode == IR_ESTIM_MODE_ON && EstimatorIrGainIsCorrect()) ? 
   100ea:	f240 1304 	movw	r3, #260	; 0x104
   100ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100f2:	781b      	ldrb	r3, [r3, #0]
    estimator_rad_of_ir : ir_rad_of_ir;
   100f4:	2b01      	cmp	r3, #1
   100f6:	d105      	bne.n	10104 <estimator_update_state_infrared+0x20>
   100f8:	f64b 23ac 	movw	r3, #47788	; 0xbaac
   100fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10100:	681b      	ldr	r3, [r3, #0]
   10102:	e004      	b.n	1010e <estimator_update_state_infrared+0x2a>
   10104:	f240 1310 	movw	r3, #272	; 0x110
   10108:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1010c:	681b      	ldr	r3, [r3, #0]
}

#define EstimatorIrGainIsCorrect() (TRUE)

void estimator_update_state_infrared( void ) {
  float rad_of_ir = (ir_estim_mode == IR_ESTIM_MODE_ON && EstimatorIrGainIsCorrect()) ? 
   1010e:	607b      	str	r3, [r7, #4]
    estimator_rad_of_ir : ir_rad_of_ir;
  estimator_phi  = rad_of_ir * ir_roll;
   10110:	f24b 7358 	movw	r3, #46936	; 0xb758
   10114:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10118:	881b      	ldrh	r3, [r3, #0]
   1011a:	b21b      	sxth	r3, r3
   1011c:	4618      	mov	r0, r3
   1011e:	f003 f88b 	bl	13238 <__aeabi_i2f>
   10122:	4603      	mov	r3, r0
   10124:	4618      	mov	r0, r3
   10126:	6879      	ldr	r1, [r7, #4]
   10128:	f003 f8da 	bl	132e0 <__aeabi_fmul>
   1012c:	4603      	mov	r3, r0
   1012e:	461a      	mov	r2, r3
   10130:	f64b 2378 	movw	r3, #47736	; 0xba78
   10134:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10138:	601a      	str	r2, [r3, #0]

  estimator_theta = rad_of_ir * ir_pitch;
   1013a:	f24b 735a 	movw	r3, #46938	; 0xb75a
   1013e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10142:	881b      	ldrh	r3, [r3, #0]
   10144:	b21b      	sxth	r3, r3
   10146:	4618      	mov	r0, r3
   10148:	f003 f876 	bl	13238 <__aeabi_i2f>
   1014c:	4603      	mov	r3, r0
   1014e:	4618      	mov	r0, r3
   10150:	6879      	ldr	r1, [r7, #4]
   10152:	f003 f8c5 	bl	132e0 <__aeabi_fmul>
   10156:	4603      	mov	r3, r0
   10158:	461a      	mov	r2, r3
   1015a:	f64b 2380 	movw	r3, #47744	; 0xba80
   1015e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10162:	601a      	str	r2, [r3, #0]
}
   10164:	3708      	adds	r7, #8
   10166:	46bd      	mov	sp, r7
   10168:	bd80      	pop	{r7, pc}
   1016a:	bf00      	nop

0001016c <estimator_update_ir_estim>:
#define RHO 0.999 /* The higher, the slower the estimation is changing */

#define g 9.81


void estimator_update_ir_estim( void ) {
   1016c:	b5b0      	push	{r4, r5, r7, lr}
   1016e:	b084      	sub	sp, #16
   10170:	af00      	add	r7, sp, #0
  static bool_t initialized = FALSE;
  static float sum_xy, sum_xx;
  float absphi;
  float init_ir2;

  if (initialized) 
   10172:	f64b 23b8 	movw	r3, #47800	; 0xbab8
   10176:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1017a:	781b      	ldrb	r3, [r3, #0]
   1017c:	2b00      	cmp	r3, #0
   1017e:	f000 81e8 	beq.w	10552 <estimator_update_ir_estim+0x3e6>
  {
    float dt = gps_ftow - last_t;
   10182:	f24b 6328 	movw	r3, #46632	; 0xb628
   10186:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1018a:	681a      	ldr	r2, [r3, #0]
   1018c:	f64b 23bc 	movw	r3, #47804	; 0xbabc
   10190:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10194:	681b      	ldr	r3, [r3, #0]
   10196:	4610      	mov	r0, r2
   10198:	4619      	mov	r1, r3
   1019a:	f002 ff97 	bl	130cc <__aeabi_fsub>
   1019e:	4603      	mov	r3, r0
   101a0:	60bb      	str	r3, [r7, #8]
    if (dt > 0.1) { // Against division by zero
   101a2:	68b8      	ldr	r0, [r7, #8]
   101a4:	f002 fc08 	bl	129b8 <__aeabi_f2d>
   101a8:	4602      	mov	r2, r0
   101aa:	460b      	mov	r3, r1
   101ac:	4610      	mov	r0, r2
   101ae:	4619      	mov	r1, r3
   101b0:	a385      	add	r3, pc, #532	; (adr r3, 103c8 <estimator_update_ir_estim+0x25c>)
   101b2:	e9d3 2300 	ldrd	r2, r3, [r3]
   101b6:	f002 fee3 	bl	12f80 <__aeabi_dcmpgt>
   101ba:	4603      	mov	r3, r0
   101bc:	2b00      	cmp	r3, #0
   101be:	d100      	bne.n	101c2 <estimator_update_ir_estim+0x56>
   101c0:	e219      	b.n	105f6 <estimator_update_ir_estim+0x48a>
      float phi = (estimator_hspeed_dir - last_hspeed_dir); 
   101c2:	f64b 23a8 	movw	r3, #47784	; 0xbaa8
   101c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101ca:	681a      	ldr	r2, [r3, #0]
   101cc:	f64b 23c0 	movw	r3, #47808	; 0xbac0
   101d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101d4:	681b      	ldr	r3, [r3, #0]
   101d6:	4610      	mov	r0, r2
   101d8:	4619      	mov	r1, r3
   101da:	f002 ff77 	bl	130cc <__aeabi_fsub>
   101de:	4603      	mov	r3, r0
   101e0:	60fb      	str	r3, [r7, #12]
      NORM_RAD_ANGLE(phi);
   101e2:	e013      	b.n	1020c <estimator_update_ir_estim+0xa0>
   101e4:	68f8      	ldr	r0, [r7, #12]
   101e6:	f002 fbe7 	bl	129b8 <__aeabi_f2d>
   101ea:	4602      	mov	r2, r0
   101ec:	460b      	mov	r3, r1
   101ee:	4610      	mov	r0, r2
   101f0:	4619      	mov	r1, r3
   101f2:	a377      	add	r3, pc, #476	; (adr r3, 103d0 <estimator_update_ir_estim+0x264>)
   101f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   101f8:	f002 fa7e 	bl	126f8 <__aeabi_dsub>
   101fc:	4602      	mov	r2, r0
   101fe:	460b      	mov	r3, r1
   10200:	4610      	mov	r0, r2
   10202:	4619      	mov	r1, r3
   10204:	f002 ff0e 	bl	13024 <__aeabi_d2f>
   10208:	4603      	mov	r3, r0
   1020a:	60fb      	str	r3, [r7, #12]
   1020c:	68f8      	ldr	r0, [r7, #12]
   1020e:	f002 fbd3 	bl	129b8 <__aeabi_f2d>
   10212:	4602      	mov	r2, r0
   10214:	460b      	mov	r3, r1
   10216:	4610      	mov	r0, r2
   10218:	4619      	mov	r1, r3
   1021a:	a36f      	add	r3, pc, #444	; (adr r3, 103d8 <estimator_update_ir_estim+0x26c>)
   1021c:	e9d3 2300 	ldrd	r2, r3, [r3]
   10220:	f002 feae 	bl	12f80 <__aeabi_dcmpgt>
   10224:	4603      	mov	r3, r0
   10226:	2b00      	cmp	r3, #0
   10228:	d1dc      	bne.n	101e4 <estimator_update_ir_estim+0x78>
   1022a:	e013      	b.n	10254 <estimator_update_ir_estim+0xe8>
   1022c:	68f8      	ldr	r0, [r7, #12]
   1022e:	f002 fbc3 	bl	129b8 <__aeabi_f2d>
   10232:	4602      	mov	r2, r0
   10234:	460b      	mov	r3, r1
   10236:	4610      	mov	r0, r2
   10238:	4619      	mov	r1, r3
   1023a:	a365      	add	r3, pc, #404	; (adr r3, 103d0 <estimator_update_ir_estim+0x264>)
   1023c:	e9d3 2300 	ldrd	r2, r3, [r3]
   10240:	f002 fa5c 	bl	126fc <__adddf3>
   10244:	4602      	mov	r2, r0
   10246:	460b      	mov	r3, r1
   10248:	4610      	mov	r0, r2
   1024a:	4619      	mov	r1, r3
   1024c:	f002 feea 	bl	13024 <__aeabi_d2f>
   10250:	4603      	mov	r3, r0
   10252:	60fb      	str	r3, [r7, #12]
   10254:	68f8      	ldr	r0, [r7, #12]
   10256:	f002 fbaf 	bl	129b8 <__aeabi_f2d>
   1025a:	4602      	mov	r2, r0
   1025c:	460b      	mov	r3, r1
   1025e:	4610      	mov	r0, r2
   10260:	4619      	mov	r1, r3
   10262:	a35f      	add	r3, pc, #380	; (adr r3, 103e0 <estimator_update_ir_estim+0x274>)
   10264:	e9d3 2300 	ldrd	r2, r3, [r3]
   10268:	f002 fe6c 	bl	12f44 <__aeabi_dcmplt>
   1026c:	4603      	mov	r3, r0
   1026e:	2b00      	cmp	r3, #0
   10270:	d1dc      	bne.n	1022c <estimator_update_ir_estim+0xc0>
      phi = phi/dt*NOMINAL_AIRSPEED/g; /* tan linearized */
   10272:	68f8      	ldr	r0, [r7, #12]
   10274:	68b9      	ldr	r1, [r7, #8]
   10276:	f003 f8e7 	bl	13448 <__aeabi_fdiv>
   1027a:	4603      	mov	r3, r0
   1027c:	4618      	mov	r0, r3
   1027e:	f002 fb9b 	bl	129b8 <__aeabi_f2d>
   10282:	4602      	mov	r2, r0
   10284:	460b      	mov	r3, r1
   10286:	4610      	mov	r0, r2
   10288:	4619      	mov	r1, r3
   1028a:	f04f 0200 	mov.w	r2, #0
   1028e:	f04f 0300 	mov.w	r3, #0
   10292:	f2c4 0324 	movt	r3, #16420	; 0x4024
   10296:	f002 fbe3 	bl	12a60 <__aeabi_dmul>
   1029a:	4602      	mov	r2, r0
   1029c:	460b      	mov	r3, r1
   1029e:	4610      	mov	r0, r2
   102a0:	4619      	mov	r1, r3
   102a2:	a351      	add	r3, pc, #324	; (adr r3, 103e8 <estimator_update_ir_estim+0x27c>)
   102a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   102a8:	f002 fd04 	bl	12cb4 <__aeabi_ddiv>
   102ac:	4602      	mov	r2, r0
   102ae:	460b      	mov	r3, r1
   102b0:	4610      	mov	r0, r2
   102b2:	4619      	mov	r1, r3
   102b4:	f002 feb6 	bl	13024 <__aeabi_d2f>
   102b8:	4603      	mov	r3, r0
   102ba:	60fb      	str	r3, [r7, #12]
      NORM_RAD_ANGLE(phi);
   102bc:	e013      	b.n	102e6 <estimator_update_ir_estim+0x17a>
   102be:	68f8      	ldr	r0, [r7, #12]
   102c0:	f002 fb7a 	bl	129b8 <__aeabi_f2d>
   102c4:	4602      	mov	r2, r0
   102c6:	460b      	mov	r3, r1
   102c8:	4610      	mov	r0, r2
   102ca:	4619      	mov	r1, r3
   102cc:	a340      	add	r3, pc, #256	; (adr r3, 103d0 <estimator_update_ir_estim+0x264>)
   102ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   102d2:	f002 fa11 	bl	126f8 <__aeabi_dsub>
   102d6:	4602      	mov	r2, r0
   102d8:	460b      	mov	r3, r1
   102da:	4610      	mov	r0, r2
   102dc:	4619      	mov	r1, r3
   102de:	f002 fea1 	bl	13024 <__aeabi_d2f>
   102e2:	4603      	mov	r3, r0
   102e4:	60fb      	str	r3, [r7, #12]
   102e6:	68f8      	ldr	r0, [r7, #12]
   102e8:	f002 fb66 	bl	129b8 <__aeabi_f2d>
   102ec:	4602      	mov	r2, r0
   102ee:	460b      	mov	r3, r1
   102f0:	4610      	mov	r0, r2
   102f2:	4619      	mov	r1, r3
   102f4:	a338      	add	r3, pc, #224	; (adr r3, 103d8 <estimator_update_ir_estim+0x26c>)
   102f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   102fa:	f002 fe41 	bl	12f80 <__aeabi_dcmpgt>
   102fe:	4603      	mov	r3, r0
   10300:	2b00      	cmp	r3, #0
   10302:	d1dc      	bne.n	102be <estimator_update_ir_estim+0x152>
   10304:	e013      	b.n	1032e <estimator_update_ir_estim+0x1c2>
   10306:	68f8      	ldr	r0, [r7, #12]
   10308:	f002 fb56 	bl	129b8 <__aeabi_f2d>
   1030c:	4602      	mov	r2, r0
   1030e:	460b      	mov	r3, r1
   10310:	4610      	mov	r0, r2
   10312:	4619      	mov	r1, r3
   10314:	a32e      	add	r3, pc, #184	; (adr r3, 103d0 <estimator_update_ir_estim+0x264>)
   10316:	e9d3 2300 	ldrd	r2, r3, [r3]
   1031a:	f002 f9ef 	bl	126fc <__adddf3>
   1031e:	4602      	mov	r2, r0
   10320:	460b      	mov	r3, r1
   10322:	4610      	mov	r0, r2
   10324:	4619      	mov	r1, r3
   10326:	f002 fe7d 	bl	13024 <__aeabi_d2f>
   1032a:	4603      	mov	r3, r0
   1032c:	60fb      	str	r3, [r7, #12]
   1032e:	68f8      	ldr	r0, [r7, #12]
   10330:	f002 fb42 	bl	129b8 <__aeabi_f2d>
   10334:	4602      	mov	r2, r0
   10336:	460b      	mov	r3, r1
   10338:	4610      	mov	r0, r2
   1033a:	4619      	mov	r1, r3
   1033c:	a328      	add	r3, pc, #160	; (adr r3, 103e0 <estimator_update_ir_estim+0x274>)
   1033e:	e9d3 2300 	ldrd	r2, r3, [r3]
   10342:	f002 fdff 	bl	12f44 <__aeabi_dcmplt>
   10346:	4603      	mov	r3, r0
   10348:	2b00      	cmp	r3, #0
   1034a:	d1dc      	bne.n	10306 <estimator_update_ir_estim+0x19a>
      estimator_ir = (float)ir_roll;
   1034c:	f24b 7358 	movw	r3, #46936	; 0xb758
   10350:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10354:	881b      	ldrh	r3, [r3, #0]
   10356:	b21b      	sxth	r3, r3
   10358:	4618      	mov	r0, r3
   1035a:	f002 ff6d 	bl	13238 <__aeabi_i2f>
   1035e:	4602      	mov	r2, r0
   10360:	f64b 23b0 	movw	r3, #47792	; 0xbab0
   10364:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10368:	601a      	str	r2, [r3, #0]
      estimator_rad = phi;
   1036a:	f64b 23b4 	movw	r3, #47796	; 0xbab4
   1036e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10372:	68fa      	ldr	r2, [r7, #12]
   10374:	601a      	str	r2, [r3, #0]
      absphi = fabs(phi);
   10376:	68f8      	ldr	r0, [r7, #12]
   10378:	f04f 0100 	mov.w	r1, #0
   1037c:	f003 f94e 	bl	1361c <__aeabi_fcmplt>
   10380:	4603      	mov	r3, r0
   10382:	2b00      	cmp	r3, #0
   10384:	d003      	beq.n	1038e <estimator_update_ir_estim+0x222>
   10386:	68fb      	ldr	r3, [r7, #12]
   10388:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
   1038c:	e000      	b.n	10390 <estimator_update_ir_estim+0x224>
   1038e:	68fb      	ldr	r3, [r7, #12]
   10390:	607b      	str	r3, [r7, #4]
      if (absphi < 1.0 && absphi > 0.05 && (- ir_contrast/2 < ir_roll && ir_roll < ir_contrast/2)) {
   10392:	6878      	ldr	r0, [r7, #4]
   10394:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   10398:	f003 f940 	bl	1361c <__aeabi_fcmplt>
   1039c:	4603      	mov	r3, r0
   1039e:	2b00      	cmp	r3, #0
   103a0:	d100      	bne.n	103a4 <estimator_update_ir_estim+0x238>
   103a2:	e128      	b.n	105f6 <estimator_update_ir_estim+0x48a>
   103a4:	6878      	ldr	r0, [r7, #4]
   103a6:	f002 fb07 	bl	129b8 <__aeabi_f2d>
   103aa:	4602      	mov	r2, r0
   103ac:	460b      	mov	r3, r1
   103ae:	4610      	mov	r0, r2
   103b0:	4619      	mov	r1, r3
   103b2:	a30f      	add	r3, pc, #60	; (adr r3, 103f0 <estimator_update_ir_estim+0x284>)
   103b4:	e9d3 2300 	ldrd	r2, r3, [r3]
   103b8:	f002 fde2 	bl	12f80 <__aeabi_dcmpgt>
   103bc:	4603      	mov	r3, r0
   103be:	2b00      	cmp	r3, #0
   103c0:	d11a      	bne.n	103f8 <estimator_update_ir_estim+0x28c>
   103c2:	e118      	b.n	105f6 <estimator_update_ir_estim+0x48a>
   103c4:	f3af 8000 	nop.w
   103c8:	9999999a 	.word	0x9999999a
   103cc:	3fb99999 	.word	0x3fb99999
   103d0:	54442d18 	.word	0x54442d18
   103d4:	401921fb 	.word	0x401921fb
   103d8:	54442d18 	.word	0x54442d18
   103dc:	400921fb 	.word	0x400921fb
   103e0:	54442d18 	.word	0x54442d18
   103e4:	c00921fb 	.word	0xc00921fb
   103e8:	51eb851f 	.word	0x51eb851f
   103ec:	40239eb8 	.word	0x40239eb8
   103f0:	9999999a 	.word	0x9999999a
   103f4:	3fa99999 	.word	0x3fa99999
   103f8:	f240 1308 	movw	r3, #264	; 0x108
   103fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10400:	881b      	ldrh	r3, [r3, #0]
   10402:	b21b      	sxth	r3, r3
   10404:	425b      	negs	r3, r3
   10406:	0fda      	lsrs	r2, r3, #31
   10408:	4413      	add	r3, r2
   1040a:	105b      	asrs	r3, r3, #1
   1040c:	461a      	mov	r2, r3
   1040e:	f24b 7358 	movw	r3, #46936	; 0xb758
   10412:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10416:	881b      	ldrh	r3, [r3, #0]
   10418:	b21b      	sxth	r3, r3
   1041a:	429a      	cmp	r2, r3
   1041c:	f280 8098 	bge.w	10550 <estimator_update_ir_estim+0x3e4>
   10420:	f240 1308 	movw	r3, #264	; 0x108
   10424:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10428:	881b      	ldrh	r3, [r3, #0]
   1042a:	b21b      	sxth	r3, r3
   1042c:	0fda      	lsrs	r2, r3, #31
   1042e:	4413      	add	r3, r2
   10430:	105b      	asrs	r3, r3, #1
   10432:	b29a      	uxth	r2, r3
   10434:	f24b 7358 	movw	r3, #46936	; 0xb758
   10438:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1043c:	881b      	ldrh	r3, [r3, #0]
   1043e:	b212      	sxth	r2, r2
   10440:	b21b      	sxth	r3, r3
   10442:	429a      	cmp	r2, r3
   10444:	f340 8084 	ble.w	10550 <estimator_update_ir_estim+0x3e4>
	sum_xy = estimator_rad * estimator_ir + RHO * sum_xy;
   10448:	f64b 23b4 	movw	r3, #47796	; 0xbab4
   1044c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10450:	681a      	ldr	r2, [r3, #0]
   10452:	f64b 23b0 	movw	r3, #47792	; 0xbab0
   10456:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1045a:	681b      	ldr	r3, [r3, #0]
   1045c:	4610      	mov	r0, r2
   1045e:	4619      	mov	r1, r3
   10460:	f002 ff3e 	bl	132e0 <__aeabi_fmul>
   10464:	4603      	mov	r3, r0
   10466:	4618      	mov	r0, r3
   10468:	f002 faa6 	bl	129b8 <__aeabi_f2d>
   1046c:	4604      	mov	r4, r0
   1046e:	460d      	mov	r5, r1
   10470:	f64b 23c4 	movw	r3, #47812	; 0xbac4
   10474:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10478:	681b      	ldr	r3, [r3, #0]
   1047a:	4618      	mov	r0, r3
   1047c:	f002 fa9c 	bl	129b8 <__aeabi_f2d>
   10480:	4602      	mov	r2, r0
   10482:	460b      	mov	r3, r1
   10484:	4610      	mov	r0, r2
   10486:	4619      	mov	r1, r3
   10488:	a367      	add	r3, pc, #412	; (adr r3, 10628 <estimator_update_ir_estim+0x4bc>)
   1048a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1048e:	f002 fae7 	bl	12a60 <__aeabi_dmul>
   10492:	4602      	mov	r2, r0
   10494:	460b      	mov	r3, r1
   10496:	4620      	mov	r0, r4
   10498:	4629      	mov	r1, r5
   1049a:	f002 f92f 	bl	126fc <__adddf3>
   1049e:	4602      	mov	r2, r0
   104a0:	460b      	mov	r3, r1
   104a2:	4610      	mov	r0, r2
   104a4:	4619      	mov	r1, r3
   104a6:	f002 fdbd 	bl	13024 <__aeabi_d2f>
   104aa:	4602      	mov	r2, r0
   104ac:	f64b 23c4 	movw	r3, #47812	; 0xbac4
   104b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104b4:	601a      	str	r2, [r3, #0]
	sum_xx = estimator_ir * estimator_ir + RHO * sum_xx;
   104b6:	f64b 23b0 	movw	r3, #47792	; 0xbab0
   104ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104be:	681a      	ldr	r2, [r3, #0]
   104c0:	f64b 23b0 	movw	r3, #47792	; 0xbab0
   104c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104c8:	681b      	ldr	r3, [r3, #0]
   104ca:	4610      	mov	r0, r2
   104cc:	4619      	mov	r1, r3
   104ce:	f002 ff07 	bl	132e0 <__aeabi_fmul>
   104d2:	4603      	mov	r3, r0
   104d4:	4618      	mov	r0, r3
   104d6:	f002 fa6f 	bl	129b8 <__aeabi_f2d>
   104da:	4604      	mov	r4, r0
   104dc:	460d      	mov	r5, r1
   104de:	f64b 23c8 	movw	r3, #47816	; 0xbac8
   104e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104e6:	681b      	ldr	r3, [r3, #0]
   104e8:	4618      	mov	r0, r3
   104ea:	f002 fa65 	bl	129b8 <__aeabi_f2d>
   104ee:	4602      	mov	r2, r0
   104f0:	460b      	mov	r3, r1
   104f2:	4610      	mov	r0, r2
   104f4:	4619      	mov	r1, r3
   104f6:	a34c      	add	r3, pc, #304	; (adr r3, 10628 <estimator_update_ir_estim+0x4bc>)
   104f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   104fc:	f002 fab0 	bl	12a60 <__aeabi_dmul>
   10500:	4602      	mov	r2, r0
   10502:	460b      	mov	r3, r1
   10504:	4620      	mov	r0, r4
   10506:	4629      	mov	r1, r5
   10508:	f002 f8f8 	bl	126fc <__adddf3>
   1050c:	4602      	mov	r2, r0
   1050e:	460b      	mov	r3, r1
   10510:	4610      	mov	r0, r2
   10512:	4619      	mov	r1, r3
   10514:	f002 fd86 	bl	13024 <__aeabi_d2f>
   10518:	4602      	mov	r2, r0
   1051a:	f64b 23c8 	movw	r3, #47816	; 0xbac8
   1051e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10522:	601a      	str	r2, [r3, #0]
	else if (result > IR_RAD_OF_IR_MAX_VALUE)
	  estimator_rad_of_ir = IR_RAD_OF_IR_MAX_VALUE;
	else
	  estimator_rad_of_ir = result;
#else
	  estimator_rad_of_ir = sum_xy / sum_xx;
   10524:	f64b 23c4 	movw	r3, #47812	; 0xbac4
   10528:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1052c:	681a      	ldr	r2, [r3, #0]
   1052e:	f64b 23c8 	movw	r3, #47816	; 0xbac8
   10532:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10536:	681b      	ldr	r3, [r3, #0]
   10538:	4610      	mov	r0, r2
   1053a:	4619      	mov	r1, r3
   1053c:	f002 ff84 	bl	13448 <__aeabi_fdiv>
   10540:	4603      	mov	r3, r0
   10542:	461a      	mov	r2, r3
   10544:	f64b 23ac 	movw	r3, #47788	; 0xbaac
   10548:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1054c:	601a      	str	r2, [r3, #0]
   1054e:	e052      	b.n	105f6 <estimator_update_ir_estim+0x48a>
   10550:	e051      	b.n	105f6 <estimator_update_ir_estim+0x48a>
#endif
      }
    } 
  } else {
    initialized = TRUE;
   10552:	f64b 23b8 	movw	r3, #47800	; 0xbab8
   10556:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1055a:	2201      	movs	r2, #1
   1055c:	701a      	strb	r2, [r3, #0]
    init_ir2 = ir_contrast;
   1055e:	f240 1308 	movw	r3, #264	; 0x108
   10562:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10566:	881b      	ldrh	r3, [r3, #0]
   10568:	b21b      	sxth	r3, r3
   1056a:	4618      	mov	r0, r3
   1056c:	f002 fe64 	bl	13238 <__aeabi_i2f>
   10570:	4603      	mov	r3, r0
   10572:	603b      	str	r3, [r7, #0]
    init_ir2 = init_ir2*init_ir2;
   10574:	6838      	ldr	r0, [r7, #0]
   10576:	6839      	ldr	r1, [r7, #0]
   10578:	f002 feb2 	bl	132e0 <__aeabi_fmul>
   1057c:	4603      	mov	r3, r0
   1057e:	603b      	str	r3, [r7, #0]
    sum_xy = INIT_WEIGHT * estimator_rad_of_ir * init_ir2;
   10580:	f64b 23ac 	movw	r3, #47788	; 0xbaac
   10584:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10588:	681b      	ldr	r3, [r3, #0]
   1058a:	4618      	mov	r0, r3
   1058c:	f002 fa14 	bl	129b8 <__aeabi_f2d>
   10590:	4602      	mov	r2, r0
   10592:	460b      	mov	r3, r1
   10594:	4610      	mov	r0, r2
   10596:	4619      	mov	r1, r3
   10598:	f04f 0200 	mov.w	r2, #0
   1059c:	f04f 0300 	mov.w	r3, #0
   105a0:	f2c4 0359 	movt	r3, #16473	; 0x4059
   105a4:	f002 fa5c 	bl	12a60 <__aeabi_dmul>
   105a8:	4602      	mov	r2, r0
   105aa:	460b      	mov	r3, r1
   105ac:	4614      	mov	r4, r2
   105ae:	461d      	mov	r5, r3
   105b0:	6838      	ldr	r0, [r7, #0]
   105b2:	f002 fa01 	bl	129b8 <__aeabi_f2d>
   105b6:	4602      	mov	r2, r0
   105b8:	460b      	mov	r3, r1
   105ba:	4620      	mov	r0, r4
   105bc:	4629      	mov	r1, r5
   105be:	f002 fa4f 	bl	12a60 <__aeabi_dmul>
   105c2:	4602      	mov	r2, r0
   105c4:	460b      	mov	r3, r1
   105c6:	4610      	mov	r0, r2
   105c8:	4619      	mov	r1, r3
   105ca:	f002 fd2b 	bl	13024 <__aeabi_d2f>
   105ce:	4602      	mov	r2, r0
   105d0:	f64b 23c4 	movw	r3, #47812	; 0xbac4
   105d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105d8:	601a      	str	r2, [r3, #0]
    sum_xx = INIT_WEIGHT * init_ir2;
   105da:	6838      	ldr	r0, [r7, #0]
   105dc:	f04f 0100 	mov.w	r1, #0
   105e0:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   105e4:	f002 fe7c 	bl	132e0 <__aeabi_fmul>
   105e8:	4603      	mov	r3, r0
   105ea:	461a      	mov	r2, r3
   105ec:	f64b 23c8 	movw	r3, #47816	; 0xbac8
   105f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105f4:	601a      	str	r2, [r3, #0]
  }

  last_hspeed_dir = estimator_hspeed_dir;
   105f6:	f64b 23a8 	movw	r3, #47784	; 0xbaa8
   105fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105fe:	681a      	ldr	r2, [r3, #0]
   10600:	f64b 23c0 	movw	r3, #47808	; 0xbac0
   10604:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10608:	601a      	str	r2, [r3, #0]
  last_t = gps_ftow;
   1060a:	f24b 6328 	movw	r3, #46632	; 0xb628
   1060e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10612:	681a      	ldr	r2, [r3, #0]
   10614:	f64b 23bc 	movw	r3, #47804	; 0xbabc
   10618:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1061c:	601a      	str	r2, [r3, #0]
}
   1061e:	3710      	adds	r7, #16
   10620:	46bd      	mov	sp, r7
   10622:	bdb0      	pop	{r4, r5, r7, pc}
   10624:	f3af 8000 	nop.w
   10628:	d916872b 	.word	0xd916872b
   1062c:	3feff7ce 	.word	0x3feff7ce

00010630 <estimator_update_state_gps>:


void estimator_update_state_gps( void ) {
   10630:	b580      	push	{r7, lr}
   10632:	af00      	add	r7, sp, #0
  if (GPS_FIX_VALID(gps_mode)) {
   10634:	f24b 634c 	movw	r3, #46668	; 0xb64c
   10638:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1063c:	781b      	ldrb	r3, [r3, #0]
   1063e:	f003 0320 	and.w	r3, r3, #32
   10642:	2b00      	cmp	r3, #0
   10644:	d044      	beq.n	106d0 <estimator_update_state_gps+0xa0>
    EstimatorSetPos(gps_east, gps_north, gps_falt);
   10646:	f24b 6344 	movw	r3, #46660	; 0xb644
   1064a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1064e:	681a      	ldr	r2, [r3, #0]
   10650:	f64b 236c 	movw	r3, #47724	; 0xba6c
   10654:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10658:	601a      	str	r2, [r3, #0]
   1065a:	f24b 6348 	movw	r3, #46664	; 0xb648
   1065e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10662:	681a      	ldr	r2, [r3, #0]
   10664:	f64b 2370 	movw	r3, #47728	; 0xba70
   10668:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1066c:	601a      	str	r2, [r3, #0]
   1066e:	f24b 632c 	movw	r3, #46636	; 0xb62c
   10672:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10676:	681a      	ldr	r2, [r3, #0]
   10678:	f64b 2374 	movw	r3, #47732	; 0xba74
   1067c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10680:	601a      	str	r2, [r3, #0]
    EstimatorSetSpeedPol(gps_fspeed, gps_fcourse, gps_fclimb);
   10682:	f24b 6330 	movw	r3, #46640	; 0xb630
   10686:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1068a:	681a      	ldr	r2, [r3, #0]
   1068c:	f64b 23a4 	movw	r3, #47780	; 0xbaa4
   10690:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10694:	601a      	str	r2, [r3, #0]
   10696:	f24b 6338 	movw	r3, #46648	; 0xb638
   1069a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1069e:	681a      	ldr	r2, [r3, #0]
   106a0:	f64b 23a8 	movw	r3, #47784	; 0xbaa8
   106a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106a8:	601a      	str	r2, [r3, #0]
   106aa:	f24b 6334 	movw	r3, #46644	; 0xb634
   106ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106b2:	681a      	ldr	r2, [r3, #0]
   106b4:	f64b 238c 	movw	r3, #47756	; 0xba8c
   106b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106bc:	601a      	str	r2, [r3, #0]
    
    if (estimator_flight_time)
   106be:	f64b 239c 	movw	r3, #47772	; 0xba9c
   106c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106c6:	881b      	ldrh	r3, [r3, #0]
   106c8:	2b00      	cmp	r3, #0
   106ca:	d001      	beq.n	106d0 <estimator_update_state_gps+0xa0>
      estimator_update_ir_estim();
   106cc:	f7ff fd4e 	bl	1016c <estimator_update_ir_estim>
  }
}
   106d0:	bd80      	pop	{r7, pc}
   106d2:	bf00      	nop

000106d4 <estimator_propagate_state>:

void estimator_propagate_state( void ) {
   106d4:	b480      	push	{r7}
   106d6:	af00      	add	r7, sp, #0
  
}
   106d8:	46bd      	mov	sp, r7
   106da:	f85d 7b04 	ldr.w	r7, [sp], #4
   106de:	4770      	bx	lr

000106e0 <inflight_calib>:
/* Please DO NOT EDIT */

#ifndef INFLIGHT_CALIB_H
#define INFLIGHT_CALIB_H 

void inflight_calib(bool_t mode_changed) {
   106e0:	b5b0      	push	{r4, r5, r7, lr}
   106e2:	b082      	sub	sp, #8
   106e4:	af00      	add	r7, sp, #0
   106e6:	4603      	mov	r3, r0
   106e8:	71fb      	strb	r3, [r7, #7]
  if (pprz_mode == PPRZ_MODE_AUTO1) {
   106ea:	f24b 439c 	movw	r3, #46236	; 0xb49c
   106ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106f2:	781b      	ldrb	r3, [r3, #0]
   106f4:	2b01      	cmp	r3, #1
   106f6:	f040 80e0 	bne.w	108ba <inflight_calib+0x1da>
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   106fa:	f64b 23cc 	movw	r3, #47820	; 0xbacc
   106fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10702:	781b      	ldrb	r3, [r3, #0]
   10704:	2b02      	cmp	r3, #2
   10706:	d168      	bne.n	107da <inflight_calib+0xfa>
      static int16_t ir_pitch_neutral_init;
      if (mode_changed) {
   10708:	79fb      	ldrb	r3, [r7, #7]
   1070a:	2b00      	cmp	r3, #0
   1070c:	d013      	beq.n	10736 <inflight_calib+0x56>
        ir_pitch_neutral_init = ir_pitch_neutral;
   1070e:	f240 130c 	movw	r3, #268	; 0x10c
   10712:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10716:	881a      	ldrh	r2, [r3, #0]
   10718:	f64b 23d2 	movw	r3, #47826	; 0xbad2
   1071c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10720:	801a      	strh	r2, [r3, #0]
        slider1_init = from_fbw.channels[RADIO_GAIN1];
   10722:	f24b 53c0 	movw	r3, #46528	; 0xb5c0
   10726:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1072a:	895a      	ldrh	r2, [r3, #10]
   1072c:	f64b 23ce 	movw	r3, #47822	; 0xbace
   10730:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10734:	801a      	strh	r2, [r3, #0]
      }
      ir_pitch_neutral = ParamValInt16(ir_pitch_neutral_init, 60.000000, from_fbw.channels[RADIO_GAIN1], slider1_init);
   10736:	f24b 53c0 	movw	r3, #46528	; 0xb5c0
   1073a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1073e:	895b      	ldrh	r3, [r3, #10]
   10740:	b21a      	sxth	r2, r3
   10742:	f64b 23ce 	movw	r3, #47822	; 0xbace
   10746:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1074a:	881b      	ldrh	r3, [r3, #0]
   1074c:	b21b      	sxth	r3, r3
   1074e:	1ad3      	subs	r3, r2, r3
   10750:	4618      	mov	r0, r3
   10752:	f002 fd71 	bl	13238 <__aeabi_i2f>
   10756:	4603      	mov	r3, r0
   10758:	4618      	mov	r0, r3
   1075a:	f002 f92d 	bl	129b8 <__aeabi_f2d>
   1075e:	4602      	mov	r2, r0
   10760:	460b      	mov	r3, r1
   10762:	4610      	mov	r0, r2
   10764:	4619      	mov	r1, r3
   10766:	f04f 0200 	mov.w	r2, #0
   1076a:	f04f 0300 	mov.w	r3, #0
   1076e:	f2c4 034e 	movt	r3, #16462	; 0x404e
   10772:	f002 f975 	bl	12a60 <__aeabi_dmul>
   10776:	4602      	mov	r2, r0
   10778:	460b      	mov	r3, r1
   1077a:	4610      	mov	r0, r2
   1077c:	4619      	mov	r1, r3
   1077e:	f04f 0200 	mov.w	r2, #0
   10782:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   10786:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   1078a:	f002 fa93 	bl	12cb4 <__aeabi_ddiv>
   1078e:	4602      	mov	r2, r0
   10790:	460b      	mov	r3, r1
   10792:	4610      	mov	r0, r2
   10794:	4619      	mov	r1, r3
   10796:	f002 fbfd 	bl	12f94 <__aeabi_d2iz>
   1079a:	4603      	mov	r3, r0
   1079c:	b29b      	uxth	r3, r3
   1079e:	b29a      	uxth	r2, r3
   107a0:	f64b 23d2 	movw	r3, #47826	; 0xbad2
   107a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107a8:	881b      	ldrh	r3, [r3, #0]
   107aa:	b29b      	uxth	r3, r3
   107ac:	4413      	add	r3, r2
   107ae:	b29b      	uxth	r3, r3
   107b0:	b29a      	uxth	r2, r3
   107b2:	f240 130c 	movw	r3, #268	; 0x10c
   107b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107ba:	801a      	strh	r2, [r3, #0]
      slider_1_val = (float)ir_pitch_neutral;
   107bc:	f240 130c 	movw	r3, #268	; 0x10c
   107c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107c4:	881b      	ldrh	r3, [r3, #0]
   107c6:	b21b      	sxth	r3, r3
   107c8:	4618      	mov	r0, r3
   107ca:	f002 fd35 	bl	13238 <__aeabi_i2f>
   107ce:	4602      	mov	r2, r0
   107d0:	f24b 43a8 	movw	r3, #46248	; 0xb4a8
   107d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107d8:	601a      	str	r2, [r3, #0]
    }
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   107da:	f64b 23cc 	movw	r3, #47820	; 0xbacc
   107de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107e2:	781b      	ldrb	r3, [r3, #0]
   107e4:	2b02      	cmp	r3, #2
   107e6:	d168      	bne.n	108ba <inflight_calib+0x1da>
      static int16_t ir_roll_neutral_init;
      if (mode_changed) {
   107e8:	79fb      	ldrb	r3, [r7, #7]
   107ea:	2b00      	cmp	r3, #0
   107ec:	d013      	beq.n	10816 <inflight_calib+0x136>
        ir_roll_neutral_init = ir_roll_neutral;
   107ee:	f240 130a 	movw	r3, #266	; 0x10a
   107f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107f6:	881a      	ldrh	r2, [r3, #0]
   107f8:	f64b 23d4 	movw	r3, #47828	; 0xbad4
   107fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10800:	801a      	strh	r2, [r3, #0]
        slider2_init = from_fbw.channels[RADIO_GAIN2];
   10802:	f24b 53c0 	movw	r3, #46528	; 0xb5c0
   10806:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1080a:	899a      	ldrh	r2, [r3, #12]
   1080c:	f64b 23d0 	movw	r3, #47824	; 0xbad0
   10810:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10814:	801a      	strh	r2, [r3, #0]
      }
      ir_roll_neutral = ParamValInt16(ir_roll_neutral_init, -60.000000, from_fbw.channels[RADIO_GAIN2], slider2_init);
   10816:	f24b 53c0 	movw	r3, #46528	; 0xb5c0
   1081a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1081e:	899b      	ldrh	r3, [r3, #12]
   10820:	b21a      	sxth	r2, r3
   10822:	f64b 23d0 	movw	r3, #47824	; 0xbad0
   10826:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1082a:	881b      	ldrh	r3, [r3, #0]
   1082c:	b21b      	sxth	r3, r3
   1082e:	1ad3      	subs	r3, r2, r3
   10830:	4618      	mov	r0, r3
   10832:	f002 fd01 	bl	13238 <__aeabi_i2f>
   10836:	4603      	mov	r3, r0
   10838:	4618      	mov	r0, r3
   1083a:	f002 f8bd 	bl	129b8 <__aeabi_f2d>
   1083e:	4602      	mov	r2, r0
   10840:	460b      	mov	r3, r1
   10842:	4610      	mov	r0, r2
   10844:	4619      	mov	r1, r3
   10846:	f04f 0200 	mov.w	r2, #0
   1084a:	f04f 0300 	mov.w	r3, #0
   1084e:	f2cc 034e 	movt	r3, #49230	; 0xc04e
   10852:	f002 f905 	bl	12a60 <__aeabi_dmul>
   10856:	4602      	mov	r2, r0
   10858:	460b      	mov	r3, r1
   1085a:	4610      	mov	r0, r2
   1085c:	4619      	mov	r1, r3
   1085e:	f04f 0200 	mov.w	r2, #0
   10862:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   10866:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   1086a:	f002 fa23 	bl	12cb4 <__aeabi_ddiv>
   1086e:	4602      	mov	r2, r0
   10870:	460b      	mov	r3, r1
   10872:	4610      	mov	r0, r2
   10874:	4619      	mov	r1, r3
   10876:	f002 fb8d 	bl	12f94 <__aeabi_d2iz>
   1087a:	4603      	mov	r3, r0
   1087c:	b29b      	uxth	r3, r3
   1087e:	b29a      	uxth	r2, r3
   10880:	f64b 23d4 	movw	r3, #47828	; 0xbad4
   10884:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10888:	881b      	ldrh	r3, [r3, #0]
   1088a:	b29b      	uxth	r3, r3
   1088c:	4413      	add	r3, r2
   1088e:	b29b      	uxth	r3, r3
   10890:	b29a      	uxth	r2, r3
   10892:	f240 130a 	movw	r3, #266	; 0x10a
   10896:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1089a:	801a      	strh	r2, [r3, #0]
      slider_2_val = (float)ir_roll_neutral;
   1089c:	f240 130a 	movw	r3, #266	; 0x10a
   108a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108a4:	881b      	ldrh	r3, [r3, #0]
   108a6:	b21b      	sxth	r3, r3
   108a8:	4618      	mov	r0, r3
   108aa:	f002 fcc5 	bl	13238 <__aeabi_i2f>
   108ae:	4602      	mov	r2, r0
   108b0:	f24b 43ac 	movw	r3, #46252	; 0xb4ac
   108b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108b8:	601a      	str	r2, [r3, #0]
    }
  }
  if (pprz_mode == PPRZ_MODE_AUTO2) {
   108ba:	f24b 439c 	movw	r3, #46236	; 0xb49c
   108be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108c2:	781b      	ldrb	r3, [r3, #0]
   108c4:	2b02      	cmp	r3, #2
   108c6:	f040 80da 	bne.w	10a7e <inflight_calib+0x39e>
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   108ca:	f64b 23cc 	movw	r3, #47820	; 0xbacc
   108ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108d2:	781b      	ldrb	r3, [r3, #0]
   108d4:	2b02      	cmp	r3, #2
   108d6:	d165      	bne.n	109a4 <inflight_calib+0x2c4>
      static float course_pgain_init;
      if (mode_changed) {
   108d8:	79fb      	ldrb	r3, [r7, #7]
   108da:	2b00      	cmp	r3, #0
   108dc:	d013      	beq.n	10906 <inflight_calib+0x226>
        course_pgain_init = course_pgain;
   108de:	f240 1320 	movw	r3, #288	; 0x120
   108e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108e6:	681a      	ldr	r2, [r3, #0]
   108e8:	f64b 23d8 	movw	r3, #47832	; 0xbad8
   108ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108f0:	601a      	str	r2, [r3, #0]
        slider1_init = from_fbw.channels[RADIO_GAIN1];
   108f2:	f24b 53c0 	movw	r3, #46528	; 0xb5c0
   108f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108fa:	895a      	ldrh	r2, [r3, #10]
   108fc:	f64b 23ce 	movw	r3, #47822	; 0xbace
   10900:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10904:	801a      	strh	r2, [r3, #0]
      }
      course_pgain = ParamValFloat(course_pgain_init, 0.100000, from_fbw.channels[RADIO_GAIN1], slider1_init);
   10906:	f64b 23d8 	movw	r3, #47832	; 0xbad8
   1090a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1090e:	681b      	ldr	r3, [r3, #0]
   10910:	4618      	mov	r0, r3
   10912:	f002 f851 	bl	129b8 <__aeabi_f2d>
   10916:	4604      	mov	r4, r0
   10918:	460d      	mov	r5, r1
   1091a:	f24b 53c0 	movw	r3, #46528	; 0xb5c0
   1091e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10922:	895b      	ldrh	r3, [r3, #10]
   10924:	b21a      	sxth	r2, r3
   10926:	f64b 23ce 	movw	r3, #47822	; 0xbace
   1092a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1092e:	881b      	ldrh	r3, [r3, #0]
   10930:	b21b      	sxth	r3, r3
   10932:	1ad3      	subs	r3, r2, r3
   10934:	4618      	mov	r0, r3
   10936:	f002 fc7f 	bl	13238 <__aeabi_i2f>
   1093a:	4603      	mov	r3, r0
   1093c:	4618      	mov	r0, r3
   1093e:	f002 f83b 	bl	129b8 <__aeabi_f2d>
   10942:	4602      	mov	r2, r0
   10944:	460b      	mov	r3, r1
   10946:	4610      	mov	r0, r2
   10948:	4619      	mov	r1, r3
   1094a:	a34f      	add	r3, pc, #316	; (adr r3, 10a88 <inflight_calib+0x3a8>)
   1094c:	e9d3 2300 	ldrd	r2, r3, [r3]
   10950:	f002 f886 	bl	12a60 <__aeabi_dmul>
   10954:	4602      	mov	r2, r0
   10956:	460b      	mov	r3, r1
   10958:	4610      	mov	r0, r2
   1095a:	4619      	mov	r1, r3
   1095c:	f04f 0200 	mov.w	r2, #0
   10960:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   10964:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   10968:	f002 f9a4 	bl	12cb4 <__aeabi_ddiv>
   1096c:	4602      	mov	r2, r0
   1096e:	460b      	mov	r3, r1
   10970:	4620      	mov	r0, r4
   10972:	4629      	mov	r1, r5
   10974:	f001 fec2 	bl	126fc <__adddf3>
   10978:	4602      	mov	r2, r0
   1097a:	460b      	mov	r3, r1
   1097c:	4610      	mov	r0, r2
   1097e:	4619      	mov	r1, r3
   10980:	f002 fb50 	bl	13024 <__aeabi_d2f>
   10984:	4602      	mov	r2, r0
   10986:	f240 1320 	movw	r3, #288	; 0x120
   1098a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1098e:	601a      	str	r2, [r3, #0]
      slider_1_val = (float)course_pgain;
   10990:	f240 1320 	movw	r3, #288	; 0x120
   10994:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10998:	681a      	ldr	r2, [r3, #0]
   1099a:	f24b 43a8 	movw	r3, #46248	; 0xb4a8
   1099e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109a2:	601a      	str	r2, [r3, #0]
    }
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   109a4:	f64b 23cc 	movw	r3, #47820	; 0xbacc
   109a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109ac:	781b      	ldrb	r3, [r3, #0]
   109ae:	2b02      	cmp	r3, #2
   109b0:	d165      	bne.n	10a7e <inflight_calib+0x39e>
      static float max_roll_init;
      if (mode_changed) {
   109b2:	79fb      	ldrb	r3, [r7, #7]
   109b4:	2b00      	cmp	r3, #0
   109b6:	d013      	beq.n	109e0 <inflight_calib+0x300>
        max_roll_init = max_roll;
   109b8:	f240 1324 	movw	r3, #292	; 0x124
   109bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109c0:	681a      	ldr	r2, [r3, #0]
   109c2:	f64b 23dc 	movw	r3, #47836	; 0xbadc
   109c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109ca:	601a      	str	r2, [r3, #0]
        slider2_init = from_fbw.channels[RADIO_GAIN2];
   109cc:	f24b 53c0 	movw	r3, #46528	; 0xb5c0
   109d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109d4:	899a      	ldrh	r2, [r3, #12]
   109d6:	f64b 23d0 	movw	r3, #47824	; 0xbad0
   109da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109de:	801a      	strh	r2, [r3, #0]
      }
      max_roll = ParamValFloat(max_roll_init, -0.200000, from_fbw.channels[RADIO_GAIN2], slider2_init);
   109e0:	f64b 23dc 	movw	r3, #47836	; 0xbadc
   109e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109e8:	681b      	ldr	r3, [r3, #0]
   109ea:	4618      	mov	r0, r3
   109ec:	f001 ffe4 	bl	129b8 <__aeabi_f2d>
   109f0:	4604      	mov	r4, r0
   109f2:	460d      	mov	r5, r1
   109f4:	f24b 53c0 	movw	r3, #46528	; 0xb5c0
   109f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109fc:	899b      	ldrh	r3, [r3, #12]
   109fe:	b21a      	sxth	r2, r3
   10a00:	f64b 23d0 	movw	r3, #47824	; 0xbad0
   10a04:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a08:	881b      	ldrh	r3, [r3, #0]
   10a0a:	b21b      	sxth	r3, r3
   10a0c:	1ad3      	subs	r3, r2, r3
   10a0e:	4618      	mov	r0, r3
   10a10:	f002 fc12 	bl	13238 <__aeabi_i2f>
   10a14:	4603      	mov	r3, r0
   10a16:	4618      	mov	r0, r3
   10a18:	f001 ffce 	bl	129b8 <__aeabi_f2d>
   10a1c:	4602      	mov	r2, r0
   10a1e:	460b      	mov	r3, r1
   10a20:	4610      	mov	r0, r2
   10a22:	4619      	mov	r1, r3
   10a24:	a31a      	add	r3, pc, #104	; (adr r3, 10a90 <inflight_calib+0x3b0>)
   10a26:	e9d3 2300 	ldrd	r2, r3, [r3]
   10a2a:	f002 f819 	bl	12a60 <__aeabi_dmul>
   10a2e:	4602      	mov	r2, r0
   10a30:	460b      	mov	r3, r1
   10a32:	4610      	mov	r0, r2
   10a34:	4619      	mov	r1, r3
   10a36:	f04f 0200 	mov.w	r2, #0
   10a3a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   10a3e:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   10a42:	f002 f937 	bl	12cb4 <__aeabi_ddiv>
   10a46:	4602      	mov	r2, r0
   10a48:	460b      	mov	r3, r1
   10a4a:	4620      	mov	r0, r4
   10a4c:	4629      	mov	r1, r5
   10a4e:	f001 fe55 	bl	126fc <__adddf3>
   10a52:	4602      	mov	r2, r0
   10a54:	460b      	mov	r3, r1
   10a56:	4610      	mov	r0, r2
   10a58:	4619      	mov	r1, r3
   10a5a:	f002 fae3 	bl	13024 <__aeabi_d2f>
   10a5e:	4602      	mov	r2, r0
   10a60:	f240 1324 	movw	r3, #292	; 0x124
   10a64:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a68:	601a      	str	r2, [r3, #0]
      slider_2_val = (float)max_roll;
   10a6a:	f240 1324 	movw	r3, #292	; 0x124
   10a6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a72:	681a      	ldr	r2, [r3, #0]
   10a74:	f24b 43ac 	movw	r3, #46252	; 0xb4ac
   10a78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a7c:	601a      	str	r2, [r3, #0]
    }
  }
}
   10a7e:	3708      	adds	r7, #8
   10a80:	46bd      	mov	sp, r7
   10a82:	bdb0      	pop	{r4, r5, r7, pc}
   10a84:	f3af 8000 	nop.w
   10a88:	9999999a 	.word	0x9999999a
   10a8c:	3fb99999 	.word	0x3fb99999
   10a90:	9999999a 	.word	0x9999999a
   10a94:	bfc99999 	.word	0xbfc99999

00010a98 <pp_atan2>:
 *
 */
#include <math.h>

double pp_atan2(double x, double y)
{
   10a98:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
   10a9c:	b08e      	sub	sp, #56	; 0x38
   10a9e:	af00      	add	r7, sp, #0
   10aa0:	e9c7 0102 	strd	r0, r1, [r7, #8]
   10aa4:	e9c7 2300 	strd	r2, r3, [r7]
	double coeff_1 = M_PI/4;
   10aa8:	a357      	add	r3, pc, #348	; (adr r3, 10c08 <pp_atan2+0x170>)
   10aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
   10aae:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double coeff_2 = 3*coeff_1;
   10ab2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   10ab6:	f04f 0200 	mov.w	r2, #0
   10aba:	f04f 0300 	mov.w	r3, #0
   10abe:	f2c4 0308 	movt	r3, #16392	; 0x4008
   10ac2:	f001 ffcd 	bl	12a60 <__aeabi_dmul>
   10ac6:	4602      	mov	r2, r0
   10ac8:	460b      	mov	r3, r1
   10aca:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double abs_y = fabs(y)+1e-10;
   10ace:	e9d7 0100 	ldrd	r0, r1, [r7]
   10ad2:	f04f 0200 	mov.w	r2, #0
   10ad6:	f04f 0300 	mov.w	r3, #0
   10ada:	f002 fa33 	bl	12f44 <__aeabi_dcmplt>
   10ade:	4603      	mov	r3, r0
   10ae0:	2b00      	cmp	r3, #0
   10ae2:	d009      	beq.n	10af8 <pp_atan2+0x60>
   10ae4:	a14a      	add	r1, pc, #296	; (adr r1, 10c10 <pp_atan2+0x178>)
   10ae6:	e9d1 0100 	ldrd	r0, r1, [r1]
   10aea:	e9d7 2300 	ldrd	r2, r3, [r7]
   10aee:	f001 fe03 	bl	126f8 <__aeabi_dsub>
   10af2:	4602      	mov	r2, r0
   10af4:	460b      	mov	r3, r1
   10af6:	e008      	b.n	10b0a <pp_atan2+0x72>
   10af8:	e9d7 0100 	ldrd	r0, r1, [r7]
   10afc:	a344      	add	r3, pc, #272	; (adr r3, 10c10 <pp_atan2+0x178>)
   10afe:	e9d3 2300 	ldrd	r2, r3, [r3]
   10b02:	f001 fdfb 	bl	126fc <__adddf3>
   10b06:	4602      	mov	r2, r0
   10b08:	460b      	mov	r3, r1
   10b0a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double angle, r;
	if(x>0)
   10b0e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   10b12:	f04f 0200 	mov.w	r2, #0
   10b16:	f04f 0300 	mov.w	r3, #0
   10b1a:	f002 fa31 	bl	12f80 <__aeabi_dcmpgt>
   10b1e:	4603      	mov	r3, r0
   10b20:	2b00      	cmp	r3, #0
   10b22:	d02a      	beq.n	10b7a <pp_atan2+0xe2>
	{
		r = (x - abs_y)/(x + abs_y);
   10b24:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   10b28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   10b2c:	f001 fde4 	bl	126f8 <__aeabi_dsub>
   10b30:	4602      	mov	r2, r0
   10b32:	460b      	mov	r3, r1
   10b34:	4690      	mov	r8, r2
   10b36:	4699      	mov	r9, r3
   10b38:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   10b3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   10b40:	f001 fddc 	bl	126fc <__adddf3>
   10b44:	4602      	mov	r2, r0
   10b46:	460b      	mov	r3, r1
   10b48:	4640      	mov	r0, r8
   10b4a:	4649      	mov	r1, r9
   10b4c:	f002 f8b2 	bl	12cb4 <__aeabi_ddiv>
   10b50:	4602      	mov	r2, r0
   10b52:	460b      	mov	r3, r1
   10b54:	e9c7 2304 	strd	r2, r3, [r7, #16]
		angle = coeff_1 - coeff_1*r;
   10b58:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   10b5c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   10b60:	f001 ff7e 	bl	12a60 <__aeabi_dmul>
   10b64:	4602      	mov	r2, r0
   10b66:	460b      	mov	r3, r1
   10b68:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   10b6c:	f001 fdc4 	bl	126f8 <__aeabi_dsub>
   10b70:	4602      	mov	r2, r0
   10b72:	460b      	mov	r3, r1
   10b74:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
   10b78:	e029      	b.n	10bce <pp_atan2+0x136>
	}
	else
	{
		r = (x + abs_y)/(abs_y - x);
   10b7a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   10b7e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   10b82:	f001 fdbb 	bl	126fc <__adddf3>
   10b86:	4602      	mov	r2, r0
   10b88:	460b      	mov	r3, r1
   10b8a:	4690      	mov	r8, r2
   10b8c:	4699      	mov	r9, r3
   10b8e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   10b92:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   10b96:	f001 fdaf 	bl	126f8 <__aeabi_dsub>
   10b9a:	4602      	mov	r2, r0
   10b9c:	460b      	mov	r3, r1
   10b9e:	4640      	mov	r0, r8
   10ba0:	4649      	mov	r1, r9
   10ba2:	f002 f887 	bl	12cb4 <__aeabi_ddiv>
   10ba6:	4602      	mov	r2, r0
   10ba8:	460b      	mov	r3, r1
   10baa:	e9c7 2304 	strd	r2, r3, [r7, #16]
		angle = coeff_2 - coeff_1*r;
   10bae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   10bb2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   10bb6:	f001 ff53 	bl	12a60 <__aeabi_dmul>
   10bba:	4602      	mov	r2, r0
   10bbc:	460b      	mov	r3, r1
   10bbe:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
   10bc2:	f001 fd99 	bl	126f8 <__aeabi_dsub>
   10bc6:	4602      	mov	r2, r0
   10bc8:	460b      	mov	r3, r1
   10bca:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	}
	if(y<0)
   10bce:	e9d7 0100 	ldrd	r0, r1, [r7]
   10bd2:	f04f 0200 	mov.w	r2, #0
   10bd6:	f04f 0300 	mov.w	r3, #0
   10bda:	f002 f9b3 	bl	12f44 <__aeabi_dcmplt>
   10bde:	4603      	mov	r3, r0
   10be0:	2b00      	cmp	r3, #0
   10be2:	d004      	beq.n	10bee <pp_atan2+0x156>
		return (-angle);
   10be4:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   10be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10be8:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   10bec:	e001      	b.n	10bf2 <pp_atan2+0x15a>
	else
		return angle;
   10bee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
   10bf2:	4622      	mov	r2, r4
   10bf4:	462b      	mov	r3, r5
}
   10bf6:	4610      	mov	r0, r2
   10bf8:	4619      	mov	r1, r3
   10bfa:	3738      	adds	r7, #56	; 0x38
   10bfc:	46bd      	mov	sp, r7
   10bfe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
   10c02:	bf00      	nop
   10c04:	f3af 8000 	nop.w
   10c08:	54442d18 	.word	0x54442d18
   10c0c:	3fe921fb 	.word	0x3fe921fb
   10c10:	d9d7bdbb 	.word	0xd9d7bdbb
   10c14:	3ddb7cdf 	.word	0x3ddb7cdf

00010c18 <pp_sin>:
 * Range: -pi/2 <= x <= pi/2
 * Precision: +/- .000,000,005
 */
 
double pp_sin(double x)
{
   10c18:	b5b0      	push	{r4, r5, r7, lr}
   10c1a:	b08c      	sub	sp, #48	; 0x30
   10c1c:	af00      	add	r7, sp, #0
   10c1e:	e9c7 0100 	strd	r0, r1, [r7]
	double xi, y, q, q2;
	int sign;

	xi = x; sign = 1;
   10c22:	e9d7 2300 	ldrd	r2, r3, [r7]
   10c26:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   10c2a:	2301      	movs	r3, #1
   10c2c:	627b      	str	r3, [r7, #36]	; 0x24
	while (xi < -1.57079632679489661923) xi += 6.28318530717958647692;
   10c2e:	e00a      	b.n	10c46 <pp_sin+0x2e>
   10c30:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   10c34:	a35a      	add	r3, pc, #360	; (adr r3, 10da0 <pp_sin+0x188>)
   10c36:	e9d3 2300 	ldrd	r2, r3, [r3]
   10c3a:	f001 fd5f 	bl	126fc <__adddf3>
   10c3e:	4602      	mov	r2, r0
   10c40:	460b      	mov	r3, r1
   10c42:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   10c46:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   10c4a:	a357      	add	r3, pc, #348	; (adr r3, 10da8 <pp_sin+0x190>)
   10c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
   10c50:	f002 f978 	bl	12f44 <__aeabi_dcmplt>
   10c54:	4603      	mov	r3, r0
   10c56:	2b00      	cmp	r3, #0
   10c58:	d1ea      	bne.n	10c30 <pp_sin+0x18>
	while (xi > 4.71238898038468985769) xi -= 6.28318530717958647692;
   10c5a:	e00a      	b.n	10c72 <pp_sin+0x5a>
   10c5c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   10c60:	a34f      	add	r3, pc, #316	; (adr r3, 10da0 <pp_sin+0x188>)
   10c62:	e9d3 2300 	ldrd	r2, r3, [r3]
   10c66:	f001 fd47 	bl	126f8 <__aeabi_dsub>
   10c6a:	4602      	mov	r2, r0
   10c6c:	460b      	mov	r3, r1
   10c6e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   10c72:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   10c76:	a34e      	add	r3, pc, #312	; (adr r3, 10db0 <pp_sin+0x198>)
   10c78:	e9d3 2300 	ldrd	r2, r3, [r3]
   10c7c:	f002 f980 	bl	12f80 <__aeabi_dcmpgt>
   10c80:	4603      	mov	r3, r0
   10c82:	2b00      	cmp	r3, #0
   10c84:	d1ea      	bne.n	10c5c <pp_sin+0x44>
	if (xi > 1.57079632679489661923) {
   10c86:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   10c8a:	a34b      	add	r3, pc, #300	; (adr r3, 10db8 <pp_sin+0x1a0>)
   10c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
   10c90:	f002 f976 	bl	12f80 <__aeabi_dcmpgt>
   10c94:	4603      	mov	r3, r0
   10c96:	2b00      	cmp	r3, #0
   10c98:	d00d      	beq.n	10cb6 <pp_sin+0x9e>
		xi -= 3.141592653589793238462643;
   10c9a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   10c9e:	a348      	add	r3, pc, #288	; (adr r3, 10dc0 <pp_sin+0x1a8>)
   10ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
   10ca4:	f001 fd28 	bl	126f8 <__aeabi_dsub>
   10ca8:	4602      	mov	r2, r0
   10caa:	460b      	mov	r3, r1
   10cac:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		sign = -1;
   10cb0:	f04f 33ff 	mov.w	r3, #4294967295
   10cb4:	627b      	str	r3, [r7, #36]	; 0x24
	}
	q = xi / 1.57079632679; q2 = q * q;
   10cb6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   10cba:	a343      	add	r3, pc, #268	; (adr r3, 10dc8 <pp_sin+0x1b0>)
   10cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
   10cc0:	f001 fff8 	bl	12cb4 <__aeabi_ddiv>
   10cc4:	4602      	mov	r2, r0
   10cc6:	460b      	mov	r3, r1
   10cc8:	e9c7 2306 	strd	r2, r3, [r7, #24]
   10ccc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   10cd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   10cd4:	f001 fec4 	bl	12a60 <__aeabi_dmul>
   10cd8:	4602      	mov	r2, r0
   10cda:	460b      	mov	r3, r1
   10cdc:	e9c7 2304 	strd	r2, r3, [r7, #16]
	y = ((((.00015148419  * q2
   10ce0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   10ce4:	a33a      	add	r3, pc, #232	; (adr r3, 10dd0 <pp_sin+0x1b8>)
   10ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
   10cea:	f001 feb9 	bl	12a60 <__aeabi_dmul>
   10cee:	4602      	mov	r2, r0
   10cf0:	460b      	mov	r3, r1
	      - .00467376557) * q2
   10cf2:	4610      	mov	r0, r2
   10cf4:	4619      	mov	r1, r3
   10cf6:	a338      	add	r3, pc, #224	; (adr r3, 10dd8 <pp_sin+0x1c0>)
   10cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
   10cfc:	f001 fcfc 	bl	126f8 <__aeabi_dsub>
   10d00:	4602      	mov	r2, r0
   10d02:	460b      	mov	r3, r1
   10d04:	4610      	mov	r0, r2
   10d06:	4619      	mov	r1, r3
   10d08:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   10d0c:	f001 fea8 	bl	12a60 <__aeabi_dmul>
   10d10:	4602      	mov	r2, r0
   10d12:	460b      	mov	r3, r1
	      + .07968967928) * q2
   10d14:	4610      	mov	r0, r2
   10d16:	4619      	mov	r1, r3
   10d18:	a331      	add	r3, pc, #196	; (adr r3, 10de0 <pp_sin+0x1c8>)
   10d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
   10d1e:	f001 fced 	bl	126fc <__adddf3>
   10d22:	4602      	mov	r2, r0
   10d24:	460b      	mov	r3, r1
   10d26:	4610      	mov	r0, r2
   10d28:	4619      	mov	r1, r3
   10d2a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   10d2e:	f001 fe97 	bl	12a60 <__aeabi_dmul>
   10d32:	4602      	mov	r2, r0
   10d34:	460b      	mov	r3, r1
	      - .64596371106) * q2
   10d36:	4610      	mov	r0, r2
   10d38:	4619      	mov	r1, r3
   10d3a:	a32b      	add	r3, pc, #172	; (adr r3, 10de8 <pp_sin+0x1d0>)
   10d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
   10d40:	f001 fcda 	bl	126f8 <__aeabi_dsub>
   10d44:	4602      	mov	r2, r0
   10d46:	460b      	mov	r3, r1
   10d48:	4610      	mov	r0, r2
   10d4a:	4619      	mov	r1, r3
   10d4c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   10d50:	f001 fe86 	bl	12a60 <__aeabi_dmul>
   10d54:	4602      	mov	r2, r0
   10d56:	460b      	mov	r3, r1
	      +1.57079631847) * q;
   10d58:	4610      	mov	r0, r2
   10d5a:	4619      	mov	r1, r3
   10d5c:	a324      	add	r3, pc, #144	; (adr r3, 10df0 <pp_sin+0x1d8>)
   10d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
   10d62:	f001 fccb 	bl	126fc <__adddf3>
   10d66:	4602      	mov	r2, r0
   10d68:	460b      	mov	r3, r1
	if (xi > 1.57079632679489661923) {
		xi -= 3.141592653589793238462643;
		sign = -1;
	}
	q = xi / 1.57079632679; q2 = q * q;
	y = ((((.00015148419  * q2
   10d6a:	4610      	mov	r0, r2
   10d6c:	4619      	mov	r1, r3
   10d6e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   10d72:	f001 fe75 	bl	12a60 <__aeabi_dmul>
   10d76:	4602      	mov	r2, r0
   10d78:	460b      	mov	r3, r1
   10d7a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	      - .00467376557) * q2
	      + .07968967928) * q2
	      - .64596371106) * q2
	      +1.57079631847) * q;
	return(sign < 0? -y : y);
   10d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10d80:	2b00      	cmp	r3, #0
   10d82:	da04      	bge.n	10d8e <pp_sin+0x176>
   10d84:	68bc      	ldr	r4, [r7, #8]
   10d86:	68fb      	ldr	r3, [r7, #12]
   10d88:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   10d8c:	e001      	b.n	10d92 <pp_sin+0x17a>
   10d8e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
   10d92:	4622      	mov	r2, r4
   10d94:	462b      	mov	r3, r5
}
   10d96:	4610      	mov	r0, r2
   10d98:	4619      	mov	r1, r3
   10d9a:	3730      	adds	r7, #48	; 0x30
   10d9c:	46bd      	mov	sp, r7
   10d9e:	bdb0      	pop	{r4, r5, r7, pc}
   10da0:	54442d18 	.word	0x54442d18
   10da4:	401921fb 	.word	0x401921fb
   10da8:	54442d18 	.word	0x54442d18
   10dac:	bff921fb 	.word	0xbff921fb
   10db0:	7f3321d2 	.word	0x7f3321d2
   10db4:	4012d97c 	.word	0x4012d97c
   10db8:	54442d18 	.word	0x54442d18
   10dbc:	3ff921fb 	.word	0x3ff921fb
   10dc0:	54442d18 	.word	0x54442d18
   10dc4:	400921fb 	.word	0x400921fb
   10dc8:	5443d6f4 	.word	0x5443d6f4
   10dcc:	3ff921fb 	.word	0x3ff921fb
   10dd0:	48a890af 	.word	0x48a890af
   10dd4:	3f23daf7 	.word	0x3f23daf7
   10dd8:	645b6d0e 	.word	0x645b6d0e
   10ddc:	3f7324cc 	.word	0x3f7324cc
   10de0:	f65619a5 	.word	0xf65619a5
   10de4:	3fb4668a 	.word	0x3fb4668a
   10de8:	16acf9cd 	.word	0x16acf9cd
   10dec:	3fe4abbc 	.word	0x3fe4abbc
   10df0:	520817f7 	.word	0x520817f7
   10df4:	3ff921fb 	.word	0x3ff921fb

00010df8 <pp_sqrt>:

#define SQRT_PRECISION 5
double pp_sqrt(double n)
{
   10df8:	b480      	push	{r7}
   10dfa:	b083      	sub	sp, #12
   10dfc:	af00      	add	r7, sp, #0
   10dfe:	e9c7 0100 	strd	r0, r1, [r7]
	/* perform the computation */
	for(i = 0; i < SQRT_PRECISION; i++)
		x = (x + n / x) / 2;
	return x;
#endif
}
   10e02:	4610      	mov	r0, r2
   10e04:	4619      	mov	r1, r3
   10e06:	370c      	adds	r7, #12
   10e08:	46bd      	mov	sp, r7
   10e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
   10e0e:	4770      	bx	lr

00010e10 <fbw_adc_buf_channel>:

uint16_t fbw_adc_samples[ FBW_NB_ADC ];

static struct fbw_adc_buf* buffers[FBW_NB_ADC];

void fbw_adc_buf_channel(uint8_t adc_channel, struct fbw_adc_buf* s) {
   10e10:	b480      	push	{r7}
   10e12:	b083      	sub	sp, #12
   10e14:	af00      	add	r7, sp, #0
   10e16:	4603      	mov	r3, r0
   10e18:	6039      	str	r1, [r7, #0]
   10e1a:	71fb      	strb	r3, [r7, #7]
  buffers[adc_channel] = s;
   10e1c:	79fa      	ldrb	r2, [r7, #7]
   10e1e:	f64b 23f0 	movw	r3, #47856	; 0xbaf0
   10e22:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e26:	6839      	ldr	r1, [r7, #0]
   10e28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   10e2c:	370c      	adds	r7, #12
   10e2e:	46bd      	mov	sp, r7
   10e30:	f85d 7b04 	ldr.w	r7, [sp], #4
   10e34:	4770      	bx	lr
   10e36:	bf00      	nop

00010e38 <fbw_adc_init>:

void 
fbw_adc_init( void )
{
   10e38:	b480      	push	{r7}
   10e3a:	b083      	sub	sp, #12
   10e3c:	af00      	add	r7, sp, #0
  uint8_t i;
  /* Ensure that our port is for input with no pull-ups */
  ANALOG_PORT 	= 0x00;
   10e3e:	f248 0315 	movw	r3, #32789	; 0x8015
   10e42:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e46:	2200      	movs	r2, #0
   10e48:	701a      	strb	r2, [r3, #0]
  ANALOG_PORT_DIR	= 0x00;
   10e4a:	f248 0314 	movw	r3, #32788	; 0x8014
   10e4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e52:	2200      	movs	r2, #0
   10e54:	701a      	strb	r2, [r3, #0]

  /* Select our external voltage ref */
  ADMUX		= ANALOG_VREF;
   10e56:	f248 0307 	movw	r3, #32775	; 0x8007
   10e5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e5e:	22c0      	movs	r2, #192	; 0xc0
   10e60:	701a      	strb	r2, [r3, #0]

  /* Select out clock, turn on the ADC interrupt and start conversion */
  ADCSRA = 0
   10e62:	f248 0306 	movw	r3, #32774	; 0x8006
   10e66:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e6a:	22cf      	movs	r2, #207	; 0xcf
   10e6c:	701a      	strb	r2, [r3, #0]
    | _BV(ADEN )
    | _BV(ADIE )
    | _BV(ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < FBW_NB_ADC; i++)
   10e6e:	2300      	movs	r3, #0
   10e70:	71fb      	strb	r3, [r7, #7]
   10e72:	e00a      	b.n	10e8a <fbw_adc_init+0x52>
    buffers[i] = (struct fbw_adc_buf*)0;
   10e74:	79fa      	ldrb	r2, [r7, #7]
   10e76:	f64b 23f0 	movw	r3, #47856	; 0xbaf0
   10e7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e7e:	2100      	movs	r1, #0
   10e80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    | _BV(ADEN )
    | _BV(ADIE )
    | _BV(ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < FBW_NB_ADC; i++)
   10e84:	79fb      	ldrb	r3, [r7, #7]
   10e86:	3301      	adds	r3, #1
   10e88:	71fb      	strb	r3, [r7, #7]
   10e8a:	79fb      	ldrb	r3, [r7, #7]
   10e8c:	2b07      	cmp	r3, #7
   10e8e:	d9f1      	bls.n	10e74 <fbw_adc_init+0x3c>
    buffers[i] = (struct fbw_adc_buf*)0;
}
   10e90:	370c      	adds	r7, #12
   10e92:	46bd      	mov	sp, r7
   10e94:	f85d 7b04 	ldr.w	r7, [sp], #4
   10e98:	4770      	bx	lr
   10e9a:	bf00      	nop

00010e9c <__vector_34>:
#ifdef PAPABENCH_SINGLE
	SIGNAL(SIG_SPM_READY)
#else
	SIGNAL( SIG_INPUT_CAPTURE1 )
#endif
{
   10e9c:	b480      	push	{r7}
   10e9e:	b083      	sub	sp, #12
   10ea0:	af00      	add	r7, sp, #0
  uint16_t		this;
  uint16_t		width;
  static uint8_t		state;
  static uint8_t		sync_start;

  this		= ICR1;
   10ea2:	f248 0326 	movw	r3, #32806	; 0x8026
   10ea6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10eaa:	881b      	ldrh	r3, [r3, #0]
   10eac:	80fb      	strh	r3, [r7, #6]
  width		= this - last;
   10eae:	f64b 334c 	movw	r3, #47948	; 0xbb4c
   10eb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10eb6:	881b      	ldrh	r3, [r3, #0]
   10eb8:	88fa      	ldrh	r2, [r7, #6]
   10eba:	1ad3      	subs	r3, r2, r3
   10ebc:	80bb      	strh	r3, [r7, #4]
  last		= this;
   10ebe:	f64b 334c 	movw	r3, #47948	; 0xbb4c
   10ec2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ec6:	88fa      	ldrh	r2, [r7, #6]
   10ec8:	801a      	strh	r2, [r3, #0]
  
  if( state == 0 ) {
   10eca:	f64b 334e 	movw	r3, #47950	; 0xbb4e
   10ece:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ed2:	781b      	ldrb	r3, [r3, #0]
   10ed4:	2b00      	cmp	r3, #0
   10ed6:	d11e      	bne.n	10f16 <__vector_34+0x7a>
    uint8_t	end = TCNT2;
   10ed8:	f248 0324 	movw	r3, #32804	; 0x8024
   10edc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ee0:	781b      	ldrb	r3, [r3, #0]
   10ee2:	70fb      	strb	r3, [r7, #3]
    uint8_t diff = (end - sync_start);
   10ee4:	f64b 334f 	movw	r3, #47951	; 0xbb4f
   10ee8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10eec:	781b      	ldrb	r3, [r3, #0]
   10eee:	78fa      	ldrb	r2, [r7, #3]
   10ef0:	1ad3      	subs	r3, r2, r3
   10ef2:	70bb      	strb	r3, [r7, #2]
    sync_start = end;
   10ef4:	f64b 334f 	movw	r3, #47951	; 0xbb4f
   10ef8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10efc:	78fa      	ldrb	r2, [r7, #3]
   10efe:	701a      	strb	r2, [r3, #0]

    /* The frame period of the mc3030 seems to be 25ms. 
     * One pulse lasts from 1.05ms to 2.150ms.
     * Sync pulse is at least 7ms : (7000*CLOCK)/1024 = 109
     */
    if( diff > (uint8_t)(((uint32_t)(7000ul*CLOCK))/1024ul) ) {
   10f00:	78bb      	ldrb	r3, [r7, #2]
   10f02:	2b6d      	cmp	r3, #109	; 0x6d
   10f04:	d906      	bls.n	10f14 <__vector_34+0x78>
      state = 1;
   10f06:	f64b 334e 	movw	r3, #47950	; 0xbb4e
   10f0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f0e:	2201      	movs	r2, #1
   10f10:	701a      	strb	r2, [r3, #0]
   10f12:	e053      	b.n	10fbc <__vector_34+0x120>
   10f14:	e052      	b.n	10fbc <__vector_34+0x120>
    }
  } 
  else {
    /* Read a data pulses */
    if( width < 700ul*CLOCK || width > 2300ul*CLOCK)
   10f16:	88bb      	ldrh	r3, [r7, #4]
   10f18:	f5b3 5f2f 	cmp.w	r3, #11200	; 0x2bc0
   10f1c:	d304      	bcc.n	10f28 <__vector_34+0x8c>
   10f1e:	88ba      	ldrh	r2, [r7, #4]
   10f20:	f648 73c0 	movw	r3, #36800	; 0x8fc0
   10f24:	429a      	cmp	r2, r3
   10f26:	d911      	bls.n	10f4c <__vector_34+0xb0>
      RestartPpmCycle();
   10f28:	f64b 334e 	movw	r3, #47950	; 0xbb4e
   10f2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f30:	2200      	movs	r2, #0
   10f32:	701a      	strb	r2, [r3, #0]
   10f34:	f248 0324 	movw	r3, #32804	; 0x8024
   10f38:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f3c:	781b      	ldrb	r3, [r3, #0]
   10f3e:	b2da      	uxtb	r2, r3
   10f40:	f64b 334f 	movw	r3, #47951	; 0xbb4f
   10f44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f48:	701a      	strb	r2, [r3, #0]
   10f4a:	e038      	b.n	10fbe <__vector_34+0x122>
    ppm_pulses[state - 1] = width;
   10f4c:	f64b 334e 	movw	r3, #47950	; 0xbb4e
   10f50:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f54:	781b      	ldrb	r3, [r3, #0]
   10f56:	1e5a      	subs	r2, r3, #1
   10f58:	f64b 3310 	movw	r3, #47888	; 0xbb10
   10f5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f60:	88b9      	ldrh	r1, [r7, #4]
   10f62:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

    if (state >= PPM_NB_PULSES) {
   10f66:	f64b 334e 	movw	r3, #47950	; 0xbb4e
   10f6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f6e:	781b      	ldrb	r3, [r3, #0]
   10f70:	2b08      	cmp	r3, #8
   10f72:	d917      	bls.n	10fa4 <__vector_34+0x108>
      ppm_valid	= 1;
   10f74:	f64b 334b 	movw	r3, #47947	; 0xbb4b
   10f78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f7c:	2201      	movs	r2, #1
   10f7e:	701a      	strb	r2, [r3, #0]
      RestartPpmCycle();
   10f80:	f64b 334e 	movw	r3, #47950	; 0xbb4e
   10f84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f88:	2200      	movs	r2, #0
   10f8a:	701a      	strb	r2, [r3, #0]
   10f8c:	f248 0324 	movw	r3, #32804	; 0x8024
   10f90:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f94:	781b      	ldrb	r3, [r3, #0]
   10f96:	b2da      	uxtb	r2, r3
   10f98:	f64b 334f 	movw	r3, #47951	; 0xbb4f
   10f9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10fa0:	701a      	strb	r2, [r3, #0]
   10fa2:	e00c      	b.n	10fbe <__vector_34+0x122>
    } else 
      state++;
   10fa4:	f64b 334e 	movw	r3, #47950	; 0xbb4e
   10fa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10fac:	781b      	ldrb	r3, [r3, #0]
   10fae:	3301      	adds	r3, #1
   10fb0:	b2da      	uxtb	r2, r3
   10fb2:	f64b 334e 	movw	r3, #47950	; 0xbb4e
   10fb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10fba:	701a      	strb	r2, [r3, #0]
  }
  return;
   10fbc:	bf00      	nop
}
   10fbe:	370c      	adds	r7, #12
   10fc0:	46bd      	mov	sp, r7
   10fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
   10fc6:	4770      	bx	lr

00010fc8 <last_radio_from_ppm>:

/* Copy from the ppm receiving buffer to the buffer sent to mcu0 */
void last_radio_from_ppm() {
   10fc8:	b590      	push	{r4, r7, lr}
   10fca:	b083      	sub	sp, #12
   10fcc:	af00      	add	r7, sp, #0
  LastRadioFromPpm()
   10fce:	f64b 3310 	movw	r3, #47888	; 0xbb10
   10fd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10fd6:	881b      	ldrh	r3, [r3, #0]
   10fd8:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
   10fdc:	b29b      	uxth	r3, r3
   10fde:	80fb      	strh	r3, [r7, #6]
   10fe0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   10fe4:	4618      	mov	r0, r3
   10fe6:	f002 f927 	bl	13238 <__aeabi_i2f>
   10fea:	4603      	mov	r3, r0
   10fec:	4618      	mov	r0, r3
   10fee:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   10ff2:	f002 f975 	bl	132e0 <__aeabi_fmul>
   10ff6:	4603      	mov	r3, r0
   10ff8:	4618      	mov	r0, r3
   10ffa:	f002 fb37 	bl	1366c <__aeabi_f2iz>
   10ffe:	4603      	mov	r3, r0
   11000:	b29a      	uxth	r2, r3
   11002:	f64b 3324 	movw	r3, #47908	; 0xbb24
   11006:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1100a:	801a      	strh	r2, [r3, #0]
   1100c:	f64b 3324 	movw	r3, #47908	; 0xbb24
   11010:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11014:	881b      	ldrh	r3, [r3, #0]
   11016:	b21b      	sxth	r3, r3
   11018:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1101c:	dd07      	ble.n	1102e <last_radio_from_ppm+0x66>
   1101e:	f64b 3324 	movw	r3, #47908	; 0xbb24
   11022:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11026:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   1102a:	801a      	strh	r2, [r3, #0]
   1102c:	e00d      	b.n	1104a <last_radio_from_ppm+0x82>
   1102e:	f64b 3324 	movw	r3, #47908	; 0xbb24
   11032:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11036:	881b      	ldrh	r3, [r3, #0]
   11038:	b21b      	sxth	r3, r3
   1103a:	2b00      	cmp	r3, #0
   1103c:	da05      	bge.n	1104a <last_radio_from_ppm+0x82>
   1103e:	f64b 3324 	movw	r3, #47908	; 0xbb24
   11042:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11046:	2200      	movs	r2, #0
   11048:	801a      	strh	r2, [r3, #0]
   1104a:	f64b 3310 	movw	r3, #47888	; 0xbb10
   1104e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11052:	885b      	ldrh	r3, [r3, #2]
   11054:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   11058:	b29b      	uxth	r3, r3
   1105a:	80fb      	strh	r3, [r7, #6]
   1105c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   11060:	4618      	mov	r0, r3
   11062:	f002 f8e9 	bl	13238 <__aeabi_i2f>
   11066:	4603      	mov	r3, r0
   11068:	4618      	mov	r0, r3
   1106a:	f002 faff 	bl	1366c <__aeabi_f2iz>
   1106e:	4603      	mov	r3, r0
   11070:	b29a      	uxth	r2, r3
   11072:	f64b 3324 	movw	r3, #47908	; 0xbb24
   11076:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1107a:	805a      	strh	r2, [r3, #2]
   1107c:	f64b 3324 	movw	r3, #47908	; 0xbb24
   11080:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11084:	885b      	ldrh	r3, [r3, #2]
   11086:	b21b      	sxth	r3, r3
   11088:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1108c:	dd07      	ble.n	1109e <last_radio_from_ppm+0xd6>
   1108e:	f64b 3324 	movw	r3, #47908	; 0xbb24
   11092:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11096:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   1109a:	805a      	strh	r2, [r3, #2]
   1109c:	e00f      	b.n	110be <last_radio_from_ppm+0xf6>
   1109e:	f64b 3324 	movw	r3, #47908	; 0xbb24
   110a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   110a6:	885b      	ldrh	r3, [r3, #2]
   110a8:	b21b      	sxth	r3, r3
   110aa:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   110ae:	da06      	bge.n	110be <last_radio_from_ppm+0xf6>
   110b0:	f64b 3324 	movw	r3, #47908	; 0xbb24
   110b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   110b8:	f64d 2280 	movw	r2, #55936	; 0xda80
   110bc:	805a      	strh	r2, [r3, #2]
   110be:	f64b 3310 	movw	r3, #47888	; 0xbb10
   110c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   110c6:	889b      	ldrh	r3, [r3, #4]
   110c8:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   110cc:	b29b      	uxth	r3, r3
   110ce:	80fb      	strh	r3, [r7, #6]
   110d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   110d4:	4618      	mov	r0, r3
   110d6:	f002 f8af 	bl	13238 <__aeabi_i2f>
   110da:	4603      	mov	r3, r0
   110dc:	4618      	mov	r0, r3
   110de:	f002 fac5 	bl	1366c <__aeabi_f2iz>
   110e2:	4603      	mov	r3, r0
   110e4:	b29a      	uxth	r2, r3
   110e6:	f64b 3324 	movw	r3, #47908	; 0xbb24
   110ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   110ee:	809a      	strh	r2, [r3, #4]
   110f0:	f64b 3324 	movw	r3, #47908	; 0xbb24
   110f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   110f8:	889b      	ldrh	r3, [r3, #4]
   110fa:	b21b      	sxth	r3, r3
   110fc:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   11100:	dd07      	ble.n	11112 <last_radio_from_ppm+0x14a>
   11102:	f64b 3324 	movw	r3, #47908	; 0xbb24
   11106:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1110a:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   1110e:	809a      	strh	r2, [r3, #4]
   11110:	e00f      	b.n	11132 <last_radio_from_ppm+0x16a>
   11112:	f64b 3324 	movw	r3, #47908	; 0xbb24
   11116:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1111a:	889b      	ldrh	r3, [r3, #4]
   1111c:	b21b      	sxth	r3, r3
   1111e:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   11122:	da06      	bge.n	11132 <last_radio_from_ppm+0x16a>
   11124:	f64b 3324 	movw	r3, #47908	; 0xbb24
   11128:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1112c:	f64d 2280 	movw	r2, #55936	; 0xda80
   11130:	809a      	strh	r2, [r3, #4]
   11132:	f64b 3310 	movw	r3, #47888	; 0xbb10
   11136:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1113a:	88db      	ldrh	r3, [r3, #6]
   1113c:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   11140:	b29b      	uxth	r3, r3
   11142:	80fb      	strh	r3, [r7, #6]
   11144:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   11148:	4618      	mov	r0, r3
   1114a:	f002 f875 	bl	13238 <__aeabi_i2f>
   1114e:	4603      	mov	r3, r0
   11150:	4618      	mov	r0, r3
   11152:	f002 fa8b 	bl	1366c <__aeabi_f2iz>
   11156:	4603      	mov	r3, r0
   11158:	b29a      	uxth	r2, r3
   1115a:	f64b 3324 	movw	r3, #47908	; 0xbb24
   1115e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11162:	80da      	strh	r2, [r3, #6]
   11164:	f64b 3324 	movw	r3, #47908	; 0xbb24
   11168:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1116c:	88db      	ldrh	r3, [r3, #6]
   1116e:	b21b      	sxth	r3, r3
   11170:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   11174:	dd07      	ble.n	11186 <last_radio_from_ppm+0x1be>
   11176:	f64b 3324 	movw	r3, #47908	; 0xbb24
   1117a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1117e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   11182:	80da      	strh	r2, [r3, #6]
   11184:	e00f      	b.n	111a6 <last_radio_from_ppm+0x1de>
   11186:	f64b 3324 	movw	r3, #47908	; 0xbb24
   1118a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1118e:	88db      	ldrh	r3, [r3, #6]
   11190:	b21b      	sxth	r3, r3
   11192:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   11196:	da06      	bge.n	111a6 <last_radio_from_ppm+0x1de>
   11198:	f64b 3324 	movw	r3, #47908	; 0xbb24
   1119c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111a0:	f64d 2280 	movw	r2, #55936	; 0xda80
   111a4:	80da      	strh	r2, [r3, #6]
   111a6:	f64b 3310 	movw	r3, #47888	; 0xbb10
   111aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111ae:	891b      	ldrh	r3, [r3, #8]
   111b0:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   111b4:	b29b      	uxth	r3, r3
   111b6:	80fb      	strh	r3, [r7, #6]
   111b8:	f64b 3338 	movw	r3, #47928	; 0xbb38
   111bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111c0:	891b      	ldrh	r3, [r3, #8]
   111c2:	b21b      	sxth	r3, r3
   111c4:	4618      	mov	r0, r3
   111c6:	f002 f837 	bl	13238 <__aeabi_i2f>
   111ca:	4604      	mov	r4, r0
   111cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   111d0:	4618      	mov	r0, r3
   111d2:	f002 f831 	bl	13238 <__aeabi_i2f>
   111d6:	4603      	mov	r3, r0
   111d8:	4618      	mov	r0, r3
   111da:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   111de:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   111e2:	f002 f87d 	bl	132e0 <__aeabi_fmul>
   111e6:	4603      	mov	r3, r0
   111e8:	4620      	mov	r0, r4
   111ea:	4619      	mov	r1, r3
   111ec:	f001 ff70 	bl	130d0 <__addsf3>
   111f0:	4603      	mov	r3, r0
   111f2:	4618      	mov	r0, r3
   111f4:	f002 fa3a 	bl	1366c <__aeabi_f2iz>
   111f8:	4603      	mov	r3, r0
   111fa:	b29a      	uxth	r2, r3
   111fc:	f64b 3338 	movw	r3, #47928	; 0xbb38
   11200:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11204:	811a      	strh	r2, [r3, #8]
   11206:	f64b 3310 	movw	r3, #47888	; 0xbb10
   1120a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1120e:	895b      	ldrh	r3, [r3, #10]
   11210:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   11214:	b29b      	uxth	r3, r3
   11216:	80fb      	strh	r3, [r7, #6]
   11218:	f64b 3338 	movw	r3, #47928	; 0xbb38
   1121c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11220:	895b      	ldrh	r3, [r3, #10]
   11222:	b21b      	sxth	r3, r3
   11224:	4618      	mov	r0, r3
   11226:	f002 f807 	bl	13238 <__aeabi_i2f>
   1122a:	4604      	mov	r4, r0
   1122c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   11230:	4618      	mov	r0, r3
   11232:	f002 f801 	bl	13238 <__aeabi_i2f>
   11236:	4603      	mov	r3, r0
   11238:	4618      	mov	r0, r3
   1123a:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   1123e:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   11242:	f002 f84d 	bl	132e0 <__aeabi_fmul>
   11246:	4603      	mov	r3, r0
   11248:	4620      	mov	r0, r4
   1124a:	4619      	mov	r1, r3
   1124c:	f001 ff40 	bl	130d0 <__addsf3>
   11250:	4603      	mov	r3, r0
   11252:	4618      	mov	r0, r3
   11254:	f002 fa0a 	bl	1366c <__aeabi_f2iz>
   11258:	4603      	mov	r3, r0
   1125a:	b29a      	uxth	r2, r3
   1125c:	f64b 3338 	movw	r3, #47928	; 0xbb38
   11260:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11264:	815a      	strh	r2, [r3, #10]
   11266:	f64b 3310 	movw	r3, #47888	; 0xbb10
   1126a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1126e:	899b      	ldrh	r3, [r3, #12]
   11270:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   11274:	b29b      	uxth	r3, r3
   11276:	80fb      	strh	r3, [r7, #6]
   11278:	f64b 3338 	movw	r3, #47928	; 0xbb38
   1127c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11280:	899b      	ldrh	r3, [r3, #12]
   11282:	b21b      	sxth	r3, r3
   11284:	4618      	mov	r0, r3
   11286:	f001 ffd7 	bl	13238 <__aeabi_i2f>
   1128a:	4604      	mov	r4, r0
   1128c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   11290:	4618      	mov	r0, r3
   11292:	f001 ffd1 	bl	13238 <__aeabi_i2f>
   11296:	4603      	mov	r3, r0
   11298:	4618      	mov	r0, r3
   1129a:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   1129e:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   112a2:	f002 f81d 	bl	132e0 <__aeabi_fmul>
   112a6:	4603      	mov	r3, r0
   112a8:	4620      	mov	r0, r4
   112aa:	4619      	mov	r1, r3
   112ac:	f001 ff10 	bl	130d0 <__addsf3>
   112b0:	4603      	mov	r3, r0
   112b2:	4618      	mov	r0, r3
   112b4:	f002 f9da 	bl	1366c <__aeabi_f2iz>
   112b8:	4603      	mov	r3, r0
   112ba:	b29a      	uxth	r2, r3
   112bc:	f64b 3338 	movw	r3, #47928	; 0xbb38
   112c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   112c4:	819a      	strh	r2, [r3, #12]
   112c6:	f64b 3310 	movw	r3, #47888	; 0xbb10
   112ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   112ce:	89db      	ldrh	r3, [r3, #14]
   112d0:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   112d4:	b29b      	uxth	r3, r3
   112d6:	80fb      	strh	r3, [r7, #6]
   112d8:	f64b 3338 	movw	r3, #47928	; 0xbb38
   112dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   112e0:	89db      	ldrh	r3, [r3, #14]
   112e2:	b21b      	sxth	r3, r3
   112e4:	4618      	mov	r0, r3
   112e6:	f001 ffa7 	bl	13238 <__aeabi_i2f>
   112ea:	4604      	mov	r4, r0
   112ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   112f0:	4618      	mov	r0, r3
   112f2:	f001 ffa1 	bl	13238 <__aeabi_i2f>
   112f6:	4603      	mov	r3, r0
   112f8:	4618      	mov	r0, r3
   112fa:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   112fe:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   11302:	f001 ffed 	bl	132e0 <__aeabi_fmul>
   11306:	4603      	mov	r3, r0
   11308:	4620      	mov	r0, r4
   1130a:	4619      	mov	r1, r3
   1130c:	f001 fee0 	bl	130d0 <__addsf3>
   11310:	4603      	mov	r3, r0
   11312:	4618      	mov	r0, r3
   11314:	f002 f9aa 	bl	1366c <__aeabi_f2iz>
   11318:	4603      	mov	r3, r0
   1131a:	b29a      	uxth	r2, r3
   1131c:	f64b 3338 	movw	r3, #47928	; 0xbb38
   11320:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11324:	81da      	strh	r2, [r3, #14]
   11326:	f64b 3310 	movw	r3, #47888	; 0xbb10
   1132a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1132e:	8a1b      	ldrh	r3, [r3, #16]
   11330:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   11334:	b29b      	uxth	r3, r3
   11336:	80fb      	strh	r3, [r7, #6]
   11338:	f64b 3338 	movw	r3, #47928	; 0xbb38
   1133c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11340:	8a1b      	ldrh	r3, [r3, #16]
   11342:	b21b      	sxth	r3, r3
   11344:	4618      	mov	r0, r3
   11346:	f001 ff77 	bl	13238 <__aeabi_i2f>
   1134a:	4604      	mov	r4, r0
   1134c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   11350:	4618      	mov	r0, r3
   11352:	f001 ff71 	bl	13238 <__aeabi_i2f>
   11356:	4603      	mov	r3, r0
   11358:	4618      	mov	r0, r3
   1135a:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   1135e:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   11362:	f001 ffbd 	bl	132e0 <__aeabi_fmul>
   11366:	4603      	mov	r3, r0
   11368:	4620      	mov	r0, r4
   1136a:	4619      	mov	r1, r3
   1136c:	f001 feb0 	bl	130d0 <__addsf3>
   11370:	4603      	mov	r3, r0
   11372:	4618      	mov	r0, r3
   11374:	f002 f97a 	bl	1366c <__aeabi_f2iz>
   11378:	4603      	mov	r3, r0
   1137a:	b29a      	uxth	r2, r3
   1137c:	f64b 3338 	movw	r3, #47928	; 0xbb38
   11380:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11384:	821a      	strh	r2, [r3, #16]
   11386:	f64b 3350 	movw	r3, #47952	; 0xbb50
   1138a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1138e:	781b      	ldrb	r3, [r3, #0]
   11390:	3301      	adds	r3, #1
   11392:	b2da      	uxtb	r2, r3
   11394:	f64b 3350 	movw	r3, #47952	; 0xbb50
   11398:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1139c:	701a      	strb	r2, [r3, #0]
   1139e:	f64b 3350 	movw	r3, #47952	; 0xbb50
   113a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113a6:	781b      	ldrb	r3, [r3, #0]
   113a8:	2b0a      	cmp	r3, #10
   113aa:	f040 8101 	bne.w	115b0 <last_radio_from_ppm+0x5e8>
   113ae:	f64b 3350 	movw	r3, #47952	; 0xbb50
   113b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113b6:	2200      	movs	r2, #0
   113b8:	701a      	strb	r2, [r3, #0]
   113ba:	f64b 3338 	movw	r3, #47928	; 0xbb38
   113be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113c2:	891a      	ldrh	r2, [r3, #8]
   113c4:	f64b 3324 	movw	r3, #47908	; 0xbb24
   113c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113cc:	811a      	strh	r2, [r3, #8]
   113ce:	f64b 3338 	movw	r3, #47928	; 0xbb38
   113d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113d6:	2200      	movs	r2, #0
   113d8:	811a      	strh	r2, [r3, #8]
   113da:	f64b 3324 	movw	r3, #47908	; 0xbb24
   113de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113e2:	891b      	ldrh	r3, [r3, #8]
   113e4:	b21b      	sxth	r3, r3
   113e6:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   113ea:	dd07      	ble.n	113fc <last_radio_from_ppm+0x434>
   113ec:	f64b 3324 	movw	r3, #47908	; 0xbb24
   113f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113f4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   113f8:	811a      	strh	r2, [r3, #8]
   113fa:	e00f      	b.n	1141c <last_radio_from_ppm+0x454>
   113fc:	f64b 3324 	movw	r3, #47908	; 0xbb24
   11400:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11404:	891b      	ldrh	r3, [r3, #8]
   11406:	b21b      	sxth	r3, r3
   11408:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   1140c:	da06      	bge.n	1141c <last_radio_from_ppm+0x454>
   1140e:	f64b 3324 	movw	r3, #47908	; 0xbb24
   11412:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11416:	f64d 2280 	movw	r2, #55936	; 0xda80
   1141a:	811a      	strh	r2, [r3, #8]
   1141c:	f64b 3338 	movw	r3, #47928	; 0xbb38
   11420:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11424:	895a      	ldrh	r2, [r3, #10]
   11426:	f64b 3324 	movw	r3, #47908	; 0xbb24
   1142a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1142e:	815a      	strh	r2, [r3, #10]
   11430:	f64b 3338 	movw	r3, #47928	; 0xbb38
   11434:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11438:	2200      	movs	r2, #0
   1143a:	815a      	strh	r2, [r3, #10]
   1143c:	f64b 3324 	movw	r3, #47908	; 0xbb24
   11440:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11444:	895b      	ldrh	r3, [r3, #10]
   11446:	b21b      	sxth	r3, r3
   11448:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1144c:	dd07      	ble.n	1145e <last_radio_from_ppm+0x496>
   1144e:	f64b 3324 	movw	r3, #47908	; 0xbb24
   11452:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11456:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   1145a:	815a      	strh	r2, [r3, #10]
   1145c:	e00f      	b.n	1147e <last_radio_from_ppm+0x4b6>
   1145e:	f64b 3324 	movw	r3, #47908	; 0xbb24
   11462:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11466:	895b      	ldrh	r3, [r3, #10]
   11468:	b21b      	sxth	r3, r3
   1146a:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   1146e:	da06      	bge.n	1147e <last_radio_from_ppm+0x4b6>
   11470:	f64b 3324 	movw	r3, #47908	; 0xbb24
   11474:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11478:	f64d 2280 	movw	r2, #55936	; 0xda80
   1147c:	815a      	strh	r2, [r3, #10]
   1147e:	f64b 3338 	movw	r3, #47928	; 0xbb38
   11482:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11486:	899a      	ldrh	r2, [r3, #12]
   11488:	f64b 3324 	movw	r3, #47908	; 0xbb24
   1148c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11490:	819a      	strh	r2, [r3, #12]
   11492:	f64b 3338 	movw	r3, #47928	; 0xbb38
   11496:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1149a:	2200      	movs	r2, #0
   1149c:	819a      	strh	r2, [r3, #12]
   1149e:	f64b 3324 	movw	r3, #47908	; 0xbb24
   114a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114a6:	899b      	ldrh	r3, [r3, #12]
   114a8:	b21b      	sxth	r3, r3
   114aa:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   114ae:	dd07      	ble.n	114c0 <last_radio_from_ppm+0x4f8>
   114b0:	f64b 3324 	movw	r3, #47908	; 0xbb24
   114b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114b8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   114bc:	819a      	strh	r2, [r3, #12]
   114be:	e00f      	b.n	114e0 <last_radio_from_ppm+0x518>
   114c0:	f64b 3324 	movw	r3, #47908	; 0xbb24
   114c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114c8:	899b      	ldrh	r3, [r3, #12]
   114ca:	b21b      	sxth	r3, r3
   114cc:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   114d0:	da06      	bge.n	114e0 <last_radio_from_ppm+0x518>
   114d2:	f64b 3324 	movw	r3, #47908	; 0xbb24
   114d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114da:	f64d 2280 	movw	r2, #55936	; 0xda80
   114de:	819a      	strh	r2, [r3, #12]
   114e0:	f64b 3338 	movw	r3, #47928	; 0xbb38
   114e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114e8:	89da      	ldrh	r2, [r3, #14]
   114ea:	f64b 3324 	movw	r3, #47908	; 0xbb24
   114ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114f2:	81da      	strh	r2, [r3, #14]
   114f4:	f64b 3338 	movw	r3, #47928	; 0xbb38
   114f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114fc:	2200      	movs	r2, #0
   114fe:	81da      	strh	r2, [r3, #14]
   11500:	f64b 3324 	movw	r3, #47908	; 0xbb24
   11504:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11508:	89db      	ldrh	r3, [r3, #14]
   1150a:	b21b      	sxth	r3, r3
   1150c:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   11510:	dd07      	ble.n	11522 <last_radio_from_ppm+0x55a>
   11512:	f64b 3324 	movw	r3, #47908	; 0xbb24
   11516:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1151a:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   1151e:	81da      	strh	r2, [r3, #14]
   11520:	e00f      	b.n	11542 <last_radio_from_ppm+0x57a>
   11522:	f64b 3324 	movw	r3, #47908	; 0xbb24
   11526:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1152a:	89db      	ldrh	r3, [r3, #14]
   1152c:	b21b      	sxth	r3, r3
   1152e:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   11532:	da06      	bge.n	11542 <last_radio_from_ppm+0x57a>
   11534:	f64b 3324 	movw	r3, #47908	; 0xbb24
   11538:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1153c:	f64d 2280 	movw	r2, #55936	; 0xda80
   11540:	81da      	strh	r2, [r3, #14]
   11542:	f64b 3338 	movw	r3, #47928	; 0xbb38
   11546:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1154a:	8a1a      	ldrh	r2, [r3, #16]
   1154c:	f64b 3324 	movw	r3, #47908	; 0xbb24
   11550:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11554:	821a      	strh	r2, [r3, #16]
   11556:	f64b 3338 	movw	r3, #47928	; 0xbb38
   1155a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1155e:	2200      	movs	r2, #0
   11560:	821a      	strh	r2, [r3, #16]
   11562:	f64b 3324 	movw	r3, #47908	; 0xbb24
   11566:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1156a:	8a1b      	ldrh	r3, [r3, #16]
   1156c:	b21b      	sxth	r3, r3
   1156e:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   11572:	dd07      	ble.n	11584 <last_radio_from_ppm+0x5bc>
   11574:	f64b 3324 	movw	r3, #47908	; 0xbb24
   11578:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1157c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   11580:	821a      	strh	r2, [r3, #16]
   11582:	e00f      	b.n	115a4 <last_radio_from_ppm+0x5dc>
   11584:	f64b 3324 	movw	r3, #47908	; 0xbb24
   11588:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1158c:	8a1b      	ldrh	r3, [r3, #16]
   1158e:	b21b      	sxth	r3, r3
   11590:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   11594:	da06      	bge.n	115a4 <last_radio_from_ppm+0x5dc>
   11596:	f64b 3324 	movw	r3, #47908	; 0xbb24
   1159a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1159e:	f64d 2280 	movw	r2, #55936	; 0xda80
   115a2:	821a      	strh	r2, [r3, #16]
   115a4:	f64b 334a 	movw	r3, #47946	; 0xbb4a
   115a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   115ac:	2201      	movs	r2, #1
   115ae:	701a      	strb	r2, [r3, #0]
}
   115b0:	370c      	adds	r7, #12
   115b2:	46bd      	mov	sp, r7
   115b4:	bd90      	pop	{r4, r7, pc}
   115b6:	bf00      	nop

000115b8 <spi_reset>:
volatile bool_t spi_was_interrupted = FALSE;

static volatile uint8_t idx_buf = 0;
static volatile uint8_t xor_in, xor_out;

void spi_reset(void) {
   115b8:	b480      	push	{r7}
   115ba:	af00      	add	r7, sp, #0
  idx_buf = 0;
   115bc:	f64b 3384 	movw	r3, #48004	; 0xbb84
   115c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   115c4:	2200      	movs	r2, #0
   115c6:	701a      	strb	r2, [r3, #0]
  xor_in = 0;
   115c8:	f64b 3385 	movw	r3, #48005	; 0xbb85
   115cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   115d0:	2200      	movs	r2, #0
   115d2:	701a      	strb	r2, [r3, #0]
  xor_out = ((uint8_t*)&to_mega128)[idx_buf];
   115d4:	f64b 3384 	movw	r3, #48004	; 0xbb84
   115d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   115dc:	781b      	ldrb	r3, [r3, #0]
   115de:	b2db      	uxtb	r3, r3
   115e0:	461a      	mov	r2, r3
   115e2:	f64b 336c 	movw	r3, #47980	; 0xbb6c
   115e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   115ea:	4413      	add	r3, r2
   115ec:	781a      	ldrb	r2, [r3, #0]
   115ee:	f64b 3386 	movw	r3, #48006	; 0xbb86
   115f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   115f6:	701a      	strb	r2, [r3, #0]
  SPDR = xor_out;
   115f8:	f248 030f 	movw	r3, #32783	; 0x800f
   115fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11600:	f64b 3286 	movw	r2, #48006	; 0xbb86
   11604:	f2c2 0204 	movt	r2, #8196	; 0x2004
   11608:	7812      	ldrb	r2, [r2, #0]
   1160a:	b2d2      	uxtb	r2, r2
   1160c:	701a      	strb	r2, [r3, #0]
  mega128_receive_valid = FALSE;
   1160e:	f64b 3382 	movw	r3, #48002	; 0xbb82
   11612:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11616:	2200      	movs	r2, #0
   11618:	701a      	strb	r2, [r3, #0]
}
   1161a:	46bd      	mov	sp, r7
   1161c:	f85d 7b04 	ldr.w	r7, [sp], #4
   11620:	4770      	bx	lr
   11622:	bf00      	nop

00011624 <fbw_spi_init>:

void fbw_spi_init(void) {
   11624:	b480      	push	{r7}
   11626:	af00      	add	r7, sp, #0
  to_mega128.status = 0;
   11628:	f64b 336c 	movw	r3, #47980	; 0xbb6c
   1162c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11630:	2200      	movs	r2, #0
   11632:	74da      	strb	r2, [r3, #19]
  to_mega128.nb_err = 0;
   11634:	f64b 336c 	movw	r3, #47980	; 0xbb6c
   11638:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1163c:	2200      	movs	r2, #0
   1163e:	751a      	strb	r2, [r3, #20]

  /* set it pin output */
  //  IT_DDR |= _BV(IT_PIN);

  /* set MISO pin output */
  SPI_DDR |= _BV(SPI_MISO_PIN);
   11640:	f248 0317 	movw	r3, #32791	; 0x8017
   11644:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11648:	f248 0217 	movw	r2, #32791	; 0x8017
   1164c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11650:	7812      	ldrb	r2, [r2, #0]
   11652:	b2d2      	uxtb	r2, r2
   11654:	f042 0210 	orr.w	r2, r2, #16
   11658:	b2d2      	uxtb	r2, r2
   1165a:	701a      	strb	r2, [r3, #0]
  /* enable SPI, slave, MSB first, sck idle low */
  SPCR = _BV(SPE);
   1165c:	f248 030d 	movw	r3, #32781	; 0x800d
   11660:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11664:	2240      	movs	r2, #64	; 0x40
   11666:	701a      	strb	r2, [r3, #0]
  /* enable interrupt */
  SPCR |= _BV(SPIE);
   11668:	f248 030d 	movw	r3, #32781	; 0x800d
   1166c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11670:	f248 020d 	movw	r2, #32781	; 0x800d
   11674:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11678:	7812      	ldrb	r2, [r2, #0]
   1167a:	b2d2      	uxtb	r2, r2
   1167c:	f062 027f 	orn	r2, r2, #127	; 0x7f
   11680:	b2d2      	uxtb	r2, r2
   11682:	701a      	strb	r2, [r3, #0]
}
   11684:	46bd      	mov	sp, r7
   11686:	f85d 7b04 	ldr.w	r7, [sp], #4
   1168a:	4770      	bx	lr
   1168c:	0000      	movs	r0, r0
	...

00011690 <timer_init>:
 * running at Clk/1024.  For 16 Mhz clock, this will be every
 * 16384 microseconds, or 61 Hz.
 */
static inline void
timer_init( void )
{
   11690:	b480      	push	{r7}
   11692:	af00      	add	r7, sp, #0
  /* Timer1 @ Clk/1: System clock, ppm and servos pulses */
  TCCR1A		= 0x00;
   11694:	f248 032f 	movw	r3, #32815	; 0x802f
   11698:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1169c:	2200      	movs	r2, #0
   1169e:	701a      	strb	r2, [r3, #0]
  TCCR1B		= 0x01;
   116a0:	f248 032e 	movw	r3, #32814	; 0x802e
   116a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116a8:	2201      	movs	r2, #1
   116aa:	701a      	strb	r2, [r3, #0]
  
  /* Timer2 @ Clk/1024: Periodic clock            */
  TCCR2		= 0x07;
   116ac:	f248 0325 	movw	r3, #32805	; 0x8025
   116b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116b4:	2207      	movs	r2, #7
   116b6:	701a      	strb	r2, [r3, #0]
}
   116b8:	46bd      	mov	sp, r7
   116ba:	f85d 7b04 	ldr.w	r7, [sp], #4
   116be:	4770      	bx	lr

000116c0 <ppm_init>:
 *
 * JR might be rising edge clocked; set that as an option
 */
static inline void
ppm_init( void )
{
   116c0:	b480      	push	{r7}
   116c2:	af00      	add	r7, sp, #0
#if   PPM_RX_TYPE == RXFUTABA
  cbi( TCCR1B, ICES1 );
   116c4:	f248 032e 	movw	r3, #32814	; 0x802e
   116c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116cc:	f248 022e 	movw	r2, #32814	; 0x802e
   116d0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   116d4:	7812      	ldrb	r2, [r2, #0]
   116d6:	b2d2      	uxtb	r2, r2
   116d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   116dc:	b2d2      	uxtb	r2, r2
   116de:	701a      	strb	r2, [r3, #0]
#else
#	error "ppm.h: Unknown receiver type in PPM_RX_TYPE"
#endif

  /* No noise cancelation */
  sbi( TCCR1B, ICNC1 );
   116e0:	f248 032e 	movw	r3, #32814	; 0x802e
   116e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116e8:	f248 022e 	movw	r2, #32814	; 0x802e
   116ec:	f2c2 0200 	movt	r2, #8192	; 0x2000
   116f0:	7812      	ldrb	r2, [r2, #0]
   116f2:	b2d2      	uxtb	r2, r2
   116f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
   116f8:	b2d2      	uxtb	r2, r2
   116fa:	701a      	strb	r2, [r3, #0]
  
  /* Set ICP to input, no internal pull up */
  cbi( PPM_DDR, PPM_PIN);
   116fc:	f248 0317 	movw	r3, #32791	; 0x8017
   11700:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11704:	f248 0217 	movw	r2, #32791	; 0x8017
   11708:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1170c:	7812      	ldrb	r2, [r2, #0]
   1170e:	b2d2      	uxtb	r2, r2
   11710:	f022 0201 	bic.w	r2, r2, #1
   11714:	b2d2      	uxtb	r2, r2
   11716:	701a      	strb	r2, [r3, #0]
  
  /* Enable interrupt on input capture */
  sbi( TIMSK, TICIE1 );
   11718:	f248 0337 	movw	r3, #32823	; 0x8037
   1171c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11720:	f248 0237 	movw	r2, #32823	; 0x8037
   11724:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11728:	7812      	ldrb	r2, [r2, #0]
   1172a:	b2d2      	uxtb	r2, r2
   1172c:	f042 0220 	orr.w	r2, r2, #32
   11730:	b2d2      	uxtb	r2, r2
   11732:	701a      	strb	r2, [r3, #0]
}
   11734:	46bd      	mov	sp, r7
   11736:	f85d 7b04 	ldr.w	r7, [sp], #4
   1173a:	4770      	bx	lr

0001173c <to_autopilot_from_last_radio>:
/*   uart_transmit('\n'); */
/* } */


/* Prepare data to be sent to mcu0 */
void to_autopilot_from_last_radio (void) {
   1173c:	b580      	push	{r7, lr}
   1173e:	b082      	sub	sp, #8
   11740:	af00      	add	r7, sp, #0
  uint8_t i;
  for(i = 0; i < RADIO_CTL_NB; i++)
   11742:	2300      	movs	r3, #0
   11744:	71fb      	strb	r3, [r7, #7]
   11746:	e010      	b.n	1176a <to_autopilot_from_last_radio+0x2e>
      to_mega128.channels[i] = last_radio[i];
   11748:	79fa      	ldrb	r2, [r7, #7]
   1174a:	79f9      	ldrb	r1, [r7, #7]
   1174c:	f64b 3324 	movw	r3, #47908	; 0xbb24
   11750:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11754:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
   11758:	f64b 336c 	movw	r3, #47980	; 0xbb6c
   1175c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11760:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]


/* Prepare data to be sent to mcu0 */
void to_autopilot_from_last_radio (void) {
  uint8_t i;
  for(i = 0; i < RADIO_CTL_NB; i++)
   11764:	79fb      	ldrb	r3, [r7, #7]
   11766:	3301      	adds	r3, #1
   11768:	71fb      	strb	r3, [r7, #7]
   1176a:	79fb      	ldrb	r3, [r7, #7]
   1176c:	2b08      	cmp	r3, #8
   1176e:	d9eb      	bls.n	11748 <to_autopilot_from_last_radio+0xc>
      to_mega128.channels[i] = last_radio[i];

  to_mega128.status = (radio_ok ? _BV(STATUS_RADIO_OK) : 0);
   11770:	f64b 4314 	movw	r3, #48148	; 0xbc14
   11774:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11778:	781b      	ldrb	r3, [r3, #0]
   1177a:	2b00      	cmp	r3, #0
   1177c:	bf0c      	ite	eq
   1177e:	2300      	moveq	r3, #0
   11780:	2301      	movne	r3, #1
   11782:	b2db      	uxtb	r3, r3
   11784:	461a      	mov	r2, r3
   11786:	f64b 336c 	movw	r3, #47980	; 0xbb6c
   1178a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1178e:	74da      	strb	r2, [r3, #19]
  to_mega128.status |= (radio_really_lost ? _BV(RADIO_REALLY_LOST) : 0);
   11790:	f64b 336c 	movw	r3, #47980	; 0xbb6c
   11794:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11798:	7cdb      	ldrb	r3, [r3, #19]
   1179a:	b2da      	uxtb	r2, r3
   1179c:	f64b 4316 	movw	r3, #48150	; 0xbc16
   117a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117a4:	781b      	ldrb	r3, [r3, #0]
   117a6:	2b00      	cmp	r3, #0
   117a8:	d001      	beq.n	117ae <to_autopilot_from_last_radio+0x72>
   117aa:	2302      	movs	r3, #2
   117ac:	e000      	b.n	117b0 <to_autopilot_from_last_radio+0x74>
   117ae:	2300      	movs	r3, #0
   117b0:	4313      	orrs	r3, r2
   117b2:	b2db      	uxtb	r3, r3
   117b4:	b2da      	uxtb	r2, r3
   117b6:	f64b 336c 	movw	r3, #47980	; 0xbb6c
   117ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117be:	74da      	strb	r2, [r3, #19]
  if (last_radio_contains_avg_channels) {
   117c0:	f64b 334a 	movw	r3, #47946	; 0xbb4a
   117c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117c8:	781b      	ldrb	r3, [r3, #0]
   117ca:	2b00      	cmp	r3, #0
   117cc:	d012      	beq.n	117f4 <to_autopilot_from_last_radio+0xb8>
      to_mega128.status |= _BV(AVERAGED_CHANNELS_SENT);
   117ce:	f64b 336c 	movw	r3, #47980	; 0xbb6c
   117d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117d6:	7cdb      	ldrb	r3, [r3, #19]
   117d8:	f043 0304 	orr.w	r3, r3, #4
   117dc:	b2da      	uxtb	r2, r3
   117de:	f64b 336c 	movw	r3, #47980	; 0xbb6c
   117e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117e6:	74da      	strb	r2, [r3, #19]
      last_radio_contains_avg_channels = FALSE;
   117e8:	f64b 334a 	movw	r3, #47946	; 0xbb4a
   117ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117f0:	2200      	movs	r2, #0
   117f2:	701a      	strb	r2, [r3, #0]
  }
  to_mega128.ppm_cpt = last_ppm_cpt;
   117f4:	f64b 4318 	movw	r3, #48152	; 0xbc18
   117f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117fc:	781a      	ldrb	r2, [r3, #0]
   117fe:	f64b 336c 	movw	r3, #47980	; 0xbb6c
   11802:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11806:	749a      	strb	r2, [r3, #18]
#ifndef CTL_BRD_V1_1
  to_mega128.vsupply = VoltageOfAdc(vsupply_adc_buf.sum/AV_NB_SAMPLE) * 10;
   11808:	f64b 3388 	movw	r3, #48008	; 0xbb88
   1180c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11810:	881b      	ldrh	r3, [r3, #0]
   11812:	4618      	mov	r0, r3
   11814:	f001 f8be 	bl	12994 <__aeabi_i2d>
   11818:	4602      	mov	r2, r0
   1181a:	460b      	mov	r3, r1
   1181c:	4610      	mov	r0, r2
   1181e:	4619      	mov	r1, r3
   11820:	a31b      	add	r3, pc, #108	; (adr r3, 11890 <to_autopilot_from_last_radio+0x154>)
   11822:	e9d3 2300 	ldrd	r2, r3, [r3]
   11826:	f001 f91b 	bl	12a60 <__aeabi_dmul>
   1182a:	4602      	mov	r2, r0
   1182c:	460b      	mov	r3, r1
   1182e:	4610      	mov	r0, r2
   11830:	4619      	mov	r1, r3
   11832:	f04f 0200 	mov.w	r2, #0
   11836:	f04f 0300 	mov.w	r3, #0
   1183a:	f2c4 0340 	movt	r3, #16448	; 0x4040
   1183e:	f001 fa39 	bl	12cb4 <__aeabi_ddiv>
   11842:	4602      	mov	r2, r0
   11844:	460b      	mov	r3, r1
   11846:	4610      	mov	r0, r2
   11848:	4619      	mov	r1, r3
   1184a:	a313      	add	r3, pc, #76	; (adr r3, 11898 <to_autopilot_from_last_radio+0x15c>)
   1184c:	e9d3 2300 	ldrd	r2, r3, [r3]
   11850:	f000 ff54 	bl	126fc <__adddf3>
   11854:	4602      	mov	r2, r0
   11856:	460b      	mov	r3, r1
   11858:	4610      	mov	r0, r2
   1185a:	4619      	mov	r1, r3
   1185c:	f04f 0200 	mov.w	r2, #0
   11860:	f04f 0300 	mov.w	r3, #0
   11864:	f2c4 0324 	movt	r3, #16420	; 0x4024
   11868:	f001 f8fa 	bl	12a60 <__aeabi_dmul>
   1186c:	4602      	mov	r2, r0
   1186e:	460b      	mov	r3, r1
   11870:	4610      	mov	r0, r2
   11872:	4619      	mov	r1, r3
   11874:	f001 fbb6 	bl	12fe4 <__aeabi_d2uiz>
   11878:	4603      	mov	r3, r0
   1187a:	b2da      	uxtb	r2, r3
   1187c:	f64b 336c 	movw	r3, #47980	; 0xbb6c
   11880:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11884:	755a      	strb	r2, [r3, #21]
#else
  to_mega128.vsupply = 0;
#endif
}
   11886:	3708      	adds	r7, #8
   11888:	46bd      	mov	sp, r7
   1188a:	bd80      	pop	{r7, pc}
   1188c:	f3af 8000 	nop.w
   11890:	1eb851ec 	.word	0x1eb851ec
   11894:	3f91eb85 	.word	0x3f91eb85
   11898:	020c49ba 	.word	0x020c49ba
   1189c:	3fb6872b 	.word	0x3fb6872b

000118a0 <send_data_to_autopilot_task>:

void send_data_to_autopilot_task(void)
{
   118a0:	b580      	push	{r7, lr}
   118a2:	af00      	add	r7, sp, #0
	//vPrintString("S_2 send_data_to_autopilot_task start! \n\r"); //SunnyBeike

    // modified by wanbo
//   if ( !SpiIsSelected() && spi_was_interrupted ) 
   {
      spi_was_interrupted = FALSE;
   118a4:	f64b 3383 	movw	r3, #48003	; 0xbb83
   118a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118ac:	2200      	movs	r2, #0
   118ae:	701a      	strb	r2, [r3, #0]
      to_autopilot_from_last_radio();
   118b0:	f7ff ff44 	bl	1173c <to_autopilot_from_last_radio>
      spi_reset();
   118b4:	f7ff fe80 	bl	115b8 <spi_reset>
   }
	//vPrintString("S_2 send_data_to_autopilot_task end! \n\r"); //SunnyBeike

}
   118b8:	bd80      	pop	{r7, pc}
   118ba:	bf00      	nop

000118bc <fbw_init>:
	static uint8_t _1Hz;
	static uint8_t _20Hz;
#endif
*/

void fbw_init(void) {
   118bc:	b580      	push	{r7, lr}
   118be:	af00      	add	r7, sp, #0
  uart_init_tx();
   118c0:	f000 fb02 	bl	11ec8 <uart_init_tx>
  uart_print_string("FBW Booting $Id: main.c,v 1.3 2008/10/22 19:41:19 casse Exp $\n\r");
   118c4:	f643 1038 	movw	r0, #14648	; 0x3938
   118c8:	f2c0 0001 	movt	r0, #1
   118cc:	f000 fbda 	bl	12084 <uart_print_string>

#ifndef CTL_BRD_V1_1
  fbw_adc_init();
   118d0:	f7ff fab2 	bl	10e38 <fbw_adc_init>
  fbw_adc_buf_channel(3, &vsupply_adc_buf);
   118d4:	2003      	movs	r0, #3
   118d6:	f64b 3188 	movw	r1, #48008	; 0xbb88
   118da:	f2c2 0104 	movt	r1, #8196	; 0x2004
   118de:	f7ff fa97 	bl	10e10 <fbw_adc_buf_channel>
  fbw_adc_buf_channel(6, &vservos_adc_buf);
   118e2:	2006      	movs	r0, #6
   118e4:	f64b 31cc 	movw	r1, #48076	; 0xbbcc
   118e8:	f2c2 0104 	movt	r1, #8196	; 0x2004
   118ec:	f7ff fa90 	bl	10e10 <fbw_adc_buf_channel>
#endif
  timer_init();
   118f0:	f7ff fece 	bl	11690 <timer_init>
  servo_init();
   118f4:	f000 f894 	bl	11a20 <servo_init>
  ppm_init();
   118f8:	f7ff fee2 	bl	116c0 <ppm_init>
  fbw_spi_init();
   118fc:	f7ff fe92 	bl	11624 <fbw_spi_init>
  //sei(); //FN
}
   11900:	bd80      	pop	{r7, pc}
   11902:	bf00      	nop

00011904 <test_ppm_task>:
  return 0;
}
#endif
*/
void test_ppm_task(void)
{
   11904:	b580      	push	{r7, lr}
   11906:	af00      	add	r7, sp, #0
	//vPrintString("S_1 test_ppm_task start! \n\r"); //SunnyBeike
    // modified by wanbo
    //if( ppm_valid ) 
    {
      ppm_valid = FALSE;
   11908:	f64b 334b 	movw	r3, #47947	; 0xbb4b
   1190c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11910:	2200      	movs	r2, #0
   11912:	701a      	strb	r2, [r3, #0]
      ppm_cpt++;
   11914:	f64b 4317 	movw	r3, #48151	; 0xbc17
   11918:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1191c:	781b      	ldrb	r3, [r3, #0]
   1191e:	3301      	adds	r3, #1
   11920:	b2da      	uxtb	r2, r3
   11922:	f64b 4317 	movw	r3, #48151	; 0xbc17
   11926:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1192a:	701a      	strb	r2, [r3, #0]
      radio_ok = TRUE;
   1192c:	f64b 4314 	movw	r3, #48148	; 0xbc14
   11930:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11934:	2201      	movs	r2, #1
   11936:	701a      	strb	r2, [r3, #0]
      radio_really_lost = FALSE;
   11938:	f64b 4316 	movw	r3, #48150	; 0xbc16
   1193c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11940:	2200      	movs	r2, #0
   11942:	701a      	strb	r2, [r3, #0]
      time_since_last_ppm = 0;
   11944:	f64b 4312 	movw	r3, #48146	; 0xbc12
   11948:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1194c:	2200      	movs	r2, #0
   1194e:	801a      	strh	r2, [r3, #0]
      last_radio_from_ppm();
   11950:	f7ff fb3a 	bl	10fc8 <last_radio_from_ppm>
      //if (last_radio_contains_avg_channels) 
      {
	mode = MODE_OF_PPRZ(last_radio[RADIO_MODE]);
   11954:	f64b 3324 	movw	r3, #47908	; 0xbb24
   11958:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1195c:	891b      	ldrh	r3, [r3, #8]
   1195e:	b21b      	sxth	r3, r3
   11960:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
   11964:	bfb4      	ite	lt
   11966:	2300      	movlt	r3, #0
   11968:	2301      	movge	r3, #1
   1196a:	b2db      	uxtb	r3, r3
   1196c:	461a      	mov	r2, r3
   1196e:	f64b 4310 	movw	r3, #48144	; 0xbc10
   11972:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11976:	701a      	strb	r2, [r3, #0]
      }
      if (mode == MODE_MANUAL) 
   11978:	f64b 4310 	movw	r3, #48144	; 0xbc10
   1197c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11980:	781b      	ldrb	r3, [r3, #0]
   11982:	2b00      	cmp	r3, #0
   11984:	d105      	bne.n	11992 <test_ppm_task+0x8e>
      {
	servo_set(last_radio);
   11986:	f64b 3024 	movw	r0, #47908	; 0xbb24
   1198a:	f2c2 0004 	movt	r0, #8196	; 0x2004
   1198e:	f000 f925 	bl	11bdc <servo_set>
      }
    } 
    //else if (mode == MODE_MANUAL && radio_really_lost) 
    {
      mode = MODE_AUTO;
   11992:	f64b 4310 	movw	r3, #48144	; 0xbc10
   11996:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1199a:	2201      	movs	r2, #1
   1199c:	701a      	strb	r2, [r3, #0]
    }
    //if (time_since_last_ppm >= STALLED_TIME) 
    {
      radio_ok = FALSE;
   1199e:	f64b 4314 	movw	r3, #48148	; 0xbc14
   119a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119a6:	2200      	movs	r2, #0
   119a8:	701a      	strb	r2, [r3, #0]
    }
    //if (time_since_last_ppm >= REALLY_STALLED_TIME) 
    {
      radio_really_lost = TRUE;
   119aa:	f64b 4316 	movw	r3, #48150	; 0xbc16
   119ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119b2:	2201      	movs	r2, #1
   119b4:	701a      	strb	r2, [r3, #0]
    }
	//vPrintString("S_1 test_ppm_task end! \n\r"); //SunnyBeike

}
   119b6:	bd80      	pop	{r7, pc}

000119b8 <check_failsafe_task>:
void check_failsafe_task(void)
{
   119b8:	b580      	push	{r7, lr}
   119ba:	af00      	add	r7, sp, #0
	//vPrintString("S_9 check_failsafe_task start! \n\r"); //SunnyBeike
    //modified by wanbo
    //if ((mode == MODE_MANUAL && !radio_ok) || (mode == MODE_AUTO && !mega128_ok)) 
    {
      servo_set(failsafe);
   119bc:	f643 1024 	movw	r0, #14628	; 0x3924
   119c0:	f2c0 0001 	movt	r0, #1
   119c4:	f000 f90a 	bl	11bdc <servo_set>
    }
	//vPrintString("S_9 check_failsafe_task end! \n\r"); //SunnyBeike
}
   119c8:	bd80      	pop	{r7, pc}
   119ca:	bf00      	nop

000119cc <check_mega128_values_task>:
void check_mega128_values_task(void)
{
   119cc:	b580      	push	{r7, lr}
   119ce:	af00      	add	r7, sp, #0
	//vPrintString("S_8 check_mega128_values_task start! \n\r"); //SunnyBeike
// modified by wanbo
     //if ( !SpiIsSelected() && spi_was_interrupted ) 
     {
         if (mega128_receive_valid)
   119d0:	f64b 3382 	movw	r3, #48002	; 0xbb82
   119d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119d8:	781b      	ldrb	r3, [r3, #0]
   119da:	b2db      	uxtb	r3, r3
   119dc:	2b00      	cmp	r3, #0
   119de:	d018      	beq.n	11a12 <check_mega128_values_task+0x46>
         { 
             time_since_last_mega128 = 0;
   119e0:	f64b 4311 	movw	r3, #48145	; 0xbc11
   119e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119e8:	2200      	movs	r2, #0
   119ea:	701a      	strb	r2, [r3, #0]
             mega128_ok = TRUE;
   119ec:	f64b 4315 	movw	r3, #48149	; 0xbc15
   119f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119f4:	2201      	movs	r2, #1
   119f6:	701a      	strb	r2, [r3, #0]
             if (mode == MODE_AUTO)
   119f8:	f64b 4310 	movw	r3, #48144	; 0xbc10
   119fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a00:	781b      	ldrb	r3, [r3, #0]
   11a02:	2b01      	cmp	r3, #1
   11a04:	d105      	bne.n	11a12 <check_mega128_values_task+0x46>
                 servo_set(from_mega128.channels);
   11a06:	f64b 3054 	movw	r0, #47956	; 0xbb54
   11a0a:	f2c2 0004 	movt	r0, #8196	; 0x2004
   11a0e:	f000 f8e5 	bl	11bdc <servo_set>
         }
     }
     //if (time_since_last_mega128 == STALLED_TIME) 
     {
         mega128_ok = FALSE;
   11a12:	f64b 4315 	movw	r3, #48149	; 0xbc15
   11a16:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a1a:	2200      	movs	r2, #0
   11a1c:	701a      	strb	r2, [r3, #0]
     }
	//vPrintString("S_8 check_mega128_values_task end! \n\r"); //SunnyBeike
}
   11a1e:	bd80      	pop	{r7, pc}

00011a20 <servo_init>:
 *
 * Ideally, you can use two decade counters to drive 20 servos.
 */
void
servo_init( void )
{
   11a20:	b480      	push	{r7}
   11a22:	b083      	sub	sp, #12
   11a24:	af00      	add	r7, sp, #0
  uint8_t			i;

  /* Configure the reset and clock lines */
  _4017_RESET_DDR |= _BV(_4017_RESET_PIN);
   11a26:	f248 0311 	movw	r3, #32785	; 0x8011
   11a2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a2e:	f248 0211 	movw	r2, #32785	; 0x8011
   11a32:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11a36:	7812      	ldrb	r2, [r2, #0]
   11a38:	b2d2      	uxtb	r2, r2
   11a3a:	f062 027f 	orn	r2, r2, #127	; 0x7f
   11a3e:	b2d2      	uxtb	r2, r2
   11a40:	701a      	strb	r2, [r3, #0]
  _4017_CLOCK_DDR |= _BV(_4017_CLOCK_PIN);
   11a42:	f248 0317 	movw	r3, #32791	; 0x8017
   11a46:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a4a:	f248 0217 	movw	r2, #32791	; 0x8017
   11a4e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11a52:	7812      	ldrb	r2, [r2, #0]
   11a54:	b2d2      	uxtb	r2, r2
   11a56:	f042 0202 	orr.w	r2, r2, #2
   11a5a:	b2d2      	uxtb	r2, r2
   11a5c:	701a      	strb	r2, [r3, #0]

  /* Reset the decade counter */
  sbi( _4017_RESET_PORT, _4017_RESET_PIN );
   11a5e:	f248 0312 	movw	r3, #32786	; 0x8012
   11a62:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a66:	f248 0212 	movw	r2, #32786	; 0x8012
   11a6a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11a6e:	7812      	ldrb	r2, [r2, #0]
   11a70:	b2d2      	uxtb	r2, r2
   11a72:	f062 027f 	orn	r2, r2, #127	; 0x7f
   11a76:	b2d2      	uxtb	r2, r2
   11a78:	701a      	strb	r2, [r3, #0]

  /* Lower the regular servo line */
  cbi( _4017_CLOCK_PORT, _4017_CLOCK_PIN );
   11a7a:	f248 0318 	movw	r3, #32792	; 0x8018
   11a7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a82:	f248 0218 	movw	r2, #32792	; 0x8018
   11a86:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11a8a:	7812      	ldrb	r2, [r2, #0]
   11a8c:	b2d2      	uxtb	r2, r2
   11a8e:	f022 0202 	bic.w	r2, r2, #2
   11a92:	b2d2      	uxtb	r2, r2
   11a94:	701a      	strb	r2, [r3, #0]

  /* Set all servos at their midpoints */
  for( i=0 ; i < _4017_NB_CHANNELS ; i++ )
   11a96:	2300      	movs	r3, #0
   11a98:	71fb      	strb	r3, [r7, #7]
   11a9a:	e00b      	b.n	11ab4 <servo_init+0x94>
    //    servo_widths[i] = SERVO_MIN;
    servo_widths[i] = (SERVO_MIN+SERVO_MAX)/2;
   11a9c:	79fa      	ldrb	r2, [r7, #7]
   11a9e:	f64b 431c 	movw	r3, #48156	; 0xbc1c
   11aa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11aa6:	f645 51c0 	movw	r1, #24000	; 0x5dc0
   11aaa:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

  /* Lower the regular servo line */
  cbi( _4017_CLOCK_PORT, _4017_CLOCK_PIN );

  /* Set all servos at their midpoints */
  for( i=0 ; i < _4017_NB_CHANNELS ; i++ )
   11aae:	79fb      	ldrb	r3, [r7, #7]
   11ab0:	3301      	adds	r3, #1
   11ab2:	71fb      	strb	r3, [r7, #7]
   11ab4:	79fb      	ldrb	r3, [r7, #7]
   11ab6:	2b09      	cmp	r3, #9
   11ab8:	d9f0      	bls.n	11a9c <servo_init+0x7c>
    //    servo_widths[i] = SERVO_MIN;
    servo_widths[i] = (SERVO_MIN+SERVO_MAX)/2;
	
  /* Set servos to go off some long time from now */
  SERVO_OCR	= 32768ul;
   11aba:	f248 032a 	movw	r3, #32810	; 0x802a
   11abe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ac2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   11ac6:	801a      	strh	r2, [r3, #0]

  /*
   * Configure output compare to toggle the output bits.
   */
  TCCR1A |=  _BV(SERVO_COM0 );
   11ac8:	f248 032f 	movw	r3, #32815	; 0x802f
   11acc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ad0:	f248 022f 	movw	r2, #32815	; 0x802f
   11ad4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11ad8:	7812      	ldrb	r2, [r2, #0]
   11ada:	b2d2      	uxtb	r2, r2
   11adc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   11ae0:	b2d2      	uxtb	r2, r2
   11ae2:	701a      	strb	r2, [r3, #0]
	
  /* Clear the interrupt flags in case they are set */
  TIFR = _BV(SERVO_FLAG);
   11ae4:	f248 0336 	movw	r3, #32822	; 0x8036
   11ae8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11aec:	2210      	movs	r2, #16
   11aee:	701a      	strb	r2, [r3, #0]

  /* Unassert the decade counter reset to start it running */
  cbi( _4017_RESET_PORT, _4017_RESET_PIN );
   11af0:	f248 0312 	movw	r3, #32786	; 0x8012
   11af4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11af8:	f248 0212 	movw	r2, #32786	; 0x8012
   11afc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11b00:	7812      	ldrb	r2, [r2, #0]
   11b02:	b2d2      	uxtb	r2, r2
   11b04:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   11b08:	b2d2      	uxtb	r2, r2
   11b0a:	701a      	strb	r2, [r3, #0]

  /* Enable our output compare interrupts */
  TIMSK |= _BV(SERVO_ENABLE );
   11b0c:	f248 0337 	movw	r3, #32823	; 0x8037
   11b10:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b14:	f248 0237 	movw	r2, #32823	; 0x8037
   11b18:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11b1c:	7812      	ldrb	r2, [r2, #0]
   11b1e:	b2d2      	uxtb	r2, r2
   11b20:	f042 0210 	orr.w	r2, r2, #16
   11b24:	b2d2      	uxtb	r2, r2
   11b26:	701a      	strb	r2, [r3, #0]
}
   11b28:	370c      	adds	r7, #12
   11b2a:	46bd      	mov	sp, r7
   11b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
   11b30:	4770      	bx	lr
   11b32:	bf00      	nop

00011b34 <servo_set_one>:

  servo++;
}
#endif

void servo_set_one(uint8_t servo, uint16_t value_us) {
   11b34:	b480      	push	{r7}
   11b36:	b083      	sub	sp, #12
   11b38:	af00      	add	r7, sp, #0
   11b3a:	4602      	mov	r2, r0
   11b3c:	460b      	mov	r3, r1
   11b3e:	71fa      	strb	r2, [r7, #7]
   11b40:	80bb      	strh	r3, [r7, #4]
  servo_widths[servo] = ChopServo(CLOCK*value_us);
   11b42:	79f9      	ldrb	r1, [r7, #7]
   11b44:	88bb      	ldrh	r3, [r7, #4]
   11b46:	011b      	lsls	r3, r3, #4
   11b48:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   11b4c:	d308      	bcc.n	11b60 <servo_set_one+0x2c>
   11b4e:	88bb      	ldrh	r3, [r7, #4]
   11b50:	011b      	lsls	r3, r3, #4
   11b52:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   11b56:	bf28      	it	cs
   11b58:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   11b5c:	b29a      	uxth	r2, r3
   11b5e:	e001      	b.n	11b64 <servo_set_one+0x30>
   11b60:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   11b64:	f64b 431c 	movw	r3, #48156	; 0xbc1c
   11b68:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b6c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
}
   11b70:	370c      	adds	r7, #12
   11b72:	46bd      	mov	sp, r7
   11b74:	f85d 7b04 	ldr.w	r7, [sp], #4
   11b78:	4770      	bx	lr
   11b7a:	bf00      	nop

00011b7c <servo_transmit>:

void 
servo_transmit(void) {
   11b7c:	b580      	push	{r7, lr}
   11b7e:	b082      	sub	sp, #8
   11b80:	af00      	add	r7, sp, #0
  uint8_t servo;
	//vPrintString("S_10 servo_transmit start! \n\r"); //SunnyBeike
  uart_transmit((uint8_t)0); uart_transmit((uint8_t)0);
   11b82:	2000      	movs	r0, #0
   11b84:	f000 f9e6 	bl	11f54 <uart_transmit>
   11b88:	2000      	movs	r0, #0
   11b8a:	f000 f9e3 	bl	11f54 <uart_transmit>

  for(servo = 0; servo < _4017_NB_CHANNELS; servo++) {
   11b8e:	2300      	movs	r3, #0
   11b90:	71fb      	strb	r3, [r7, #7]
   11b92:	e01a      	b.n	11bca <servo_transmit+0x4e>
    uart_transmit((uint8_t)(servo_widths[servo] >> 8));
   11b94:	79fa      	ldrb	r2, [r7, #7]
   11b96:	f64b 431c 	movw	r3, #48156	; 0xbc1c
   11b9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b9e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   11ba2:	0a1b      	lsrs	r3, r3, #8
   11ba4:	b29b      	uxth	r3, r3
   11ba6:	b2db      	uxtb	r3, r3
   11ba8:	4618      	mov	r0, r3
   11baa:	f000 f9d3 	bl	11f54 <uart_transmit>
    uart_transmit((uint8_t)(servo_widths[servo] & 0xff));
   11bae:	79fa      	ldrb	r2, [r7, #7]
   11bb0:	f64b 431c 	movw	r3, #48156	; 0xbc1c
   11bb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bb8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   11bbc:	b2db      	uxtb	r3, r3
   11bbe:	4618      	mov	r0, r3
   11bc0:	f000 f9c8 	bl	11f54 <uart_transmit>
servo_transmit(void) {
  uint8_t servo;
	//vPrintString("S_10 servo_transmit start! \n\r"); //SunnyBeike
  uart_transmit((uint8_t)0); uart_transmit((uint8_t)0);

  for(servo = 0; servo < _4017_NB_CHANNELS; servo++) {
   11bc4:	79fb      	ldrb	r3, [r7, #7]
   11bc6:	3301      	adds	r3, #1
   11bc8:	71fb      	strb	r3, [r7, #7]
   11bca:	79fb      	ldrb	r3, [r7, #7]
   11bcc:	2b09      	cmp	r3, #9
   11bce:	d9e1      	bls.n	11b94 <servo_transmit+0x18>
    uart_transmit((uint8_t)(servo_widths[servo] >> 8));
    uart_transmit((uint8_t)(servo_widths[servo] & 0xff));
  }
  uart_transmit((uint8_t)'\n');
   11bd0:	200a      	movs	r0, #10
   11bd2:	f000 f9bf 	bl	11f54 <uart_transmit>
	//vPrintString("S_10 servo_transmit end! \n\r"); //SunnyBeike
}
   11bd6:	3708      	adds	r7, #8
   11bd8:	46bd      	mov	sp, r7
   11bda:	bd80      	pop	{r7, pc}

00011bdc <servo_set>:
 *
 * defines how servos react to radio control or autopilot channels
 *
 */

void servo_set(const pprz_t values[]) {
   11bdc:	b5b0      	push	{r4, r5, r7, lr}
   11bde:	b084      	sub	sp, #16
   11be0:	af00      	add	r7, sp, #0
   11be2:	6078      	str	r0, [r7, #4]
  ServoSet(values); /*Generated from airframe.xml */
   11be4:	687b      	ldr	r3, [r7, #4]
   11be6:	330a      	adds	r3, #10
   11be8:	881b      	ldrh	r3, [r3, #0]
   11bea:	b21b      	sxth	r3, r3
   11bec:	005b      	lsls	r3, r3, #1
   11bee:	4618      	mov	r0, r3
   11bf0:	f000 fed0 	bl	12994 <__aeabi_i2d>
   11bf4:	4602      	mov	r2, r0
   11bf6:	460b      	mov	r3, r1
   11bf8:	4610      	mov	r0, r2
   11bfa:	4619      	mov	r1, r3
   11bfc:	a3a6      	add	r3, pc, #664	; (adr r3, 11e98 <servo_set+0x2bc>)
   11bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
   11c02:	f000 ff2d 	bl	12a60 <__aeabi_dmul>
   11c06:	4602      	mov	r2, r0
   11c08:	460b      	mov	r3, r1
   11c0a:	4610      	mov	r0, r2
   11c0c:	4619      	mov	r1, r3
   11c0e:	f001 f9c1 	bl	12f94 <__aeabi_d2iz>
   11c12:	4603      	mov	r3, r0
   11c14:	b29b      	uxth	r3, r3
   11c16:	b29b      	uxth	r3, r3
   11c18:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
   11c1c:	81fb      	strh	r3, [r7, #14]
   11c1e:	89fb      	ldrh	r3, [r7, #14]
   11c20:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   11c24:	d307      	bcc.n	11c36 <servo_set+0x5a>
   11c26:	89fb      	ldrh	r3, [r7, #14]
   11c28:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   11c2c:	bf28      	it	cs
   11c2e:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   11c32:	b29a      	uxth	r2, r3
   11c34:	e001      	b.n	11c3a <servo_set+0x5e>
   11c36:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   11c3a:	f64b 431c 	movw	r3, #48156	; 0xbc1c
   11c3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c42:	80da      	strh	r2, [r3, #6]
   11c44:	687b      	ldr	r3, [r7, #4]
   11c46:	881b      	ldrh	r3, [r3, #0]
   11c48:	b21b      	sxth	r3, r3
   11c4a:	005b      	lsls	r3, r3, #1
   11c4c:	4618      	mov	r0, r3
   11c4e:	f000 fea1 	bl	12994 <__aeabi_i2d>
   11c52:	4602      	mov	r2, r0
   11c54:	460b      	mov	r3, r1
   11c56:	4610      	mov	r0, r2
   11c58:	4619      	mov	r1, r3
   11c5a:	a38f      	add	r3, pc, #572	; (adr r3, 11e98 <servo_set+0x2bc>)
   11c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
   11c60:	f000 fefe 	bl	12a60 <__aeabi_dmul>
   11c64:	4602      	mov	r2, r0
   11c66:	460b      	mov	r3, r1
   11c68:	4610      	mov	r0, r2
   11c6a:	4619      	mov	r1, r3
   11c6c:	f001 f992 	bl	12f94 <__aeabi_d2iz>
   11c70:	4603      	mov	r3, r0
   11c72:	b29b      	uxth	r3, r3
   11c74:	b29b      	uxth	r3, r3
   11c76:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
   11c7a:	81fb      	strh	r3, [r7, #14]
   11c7c:	89fb      	ldrh	r3, [r7, #14]
   11c7e:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   11c82:	d307      	bcc.n	11c94 <servo_set+0xb8>
   11c84:	89fb      	ldrh	r3, [r7, #14]
   11c86:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   11c8a:	bf28      	it	cs
   11c8c:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   11c90:	b29a      	uxth	r2, r3
   11c92:	e001      	b.n	11c98 <servo_set+0xbc>
   11c94:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   11c98:	f64b 431c 	movw	r3, #48156	; 0xbc1c
   11c9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ca0:	825a      	strh	r2, [r3, #18]
   11ca2:	687b      	ldr	r3, [r7, #4]
   11ca4:	3304      	adds	r3, #4
   11ca6:	881b      	ldrh	r3, [r3, #0]
   11ca8:	b21b      	sxth	r3, r3
   11caa:	4618      	mov	r0, r3
   11cac:	f000 fe72 	bl	12994 <__aeabi_i2d>
   11cb0:	4602      	mov	r2, r0
   11cb2:	460b      	mov	r3, r1
   11cb4:	4610      	mov	r0, r2
   11cb6:	4619      	mov	r1, r3
   11cb8:	a379      	add	r3, pc, #484	; (adr r3, 11ea0 <servo_set+0x2c4>)
   11cba:	e9d3 2300 	ldrd	r2, r3, [r3]
   11cbe:	f000 fecf 	bl	12a60 <__aeabi_dmul>
   11cc2:	4602      	mov	r2, r0
   11cc4:	460b      	mov	r3, r1
   11cc6:	4610      	mov	r0, r2
   11cc8:	4619      	mov	r1, r3
   11cca:	f001 f963 	bl	12f94 <__aeabi_d2iz>
   11cce:	4603      	mov	r3, r0
   11cd0:	b29b      	uxth	r3, r3
   11cd2:	b29b      	uxth	r3, r3
   11cd4:	f503 43bf 	add.w	r3, r3, #24448	; 0x5f80
   11cd8:	3320      	adds	r3, #32
   11cda:	81fb      	strh	r3, [r7, #14]
   11cdc:	89fb      	ldrh	r3, [r7, #14]
   11cde:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   11ce2:	d307      	bcc.n	11cf4 <servo_set+0x118>
   11ce4:	89fb      	ldrh	r3, [r7, #14]
   11ce6:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   11cea:	bf28      	it	cs
   11cec:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   11cf0:	b29a      	uxth	r2, r3
   11cf2:	e001      	b.n	11cf8 <servo_set+0x11c>
   11cf4:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   11cf8:	f64b 431c 	movw	r3, #48156	; 0xbc1c
   11cfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d00:	819a      	strh	r2, [r3, #12]
   11d02:	687b      	ldr	r3, [r7, #4]
   11d04:	885b      	ldrh	r3, [r3, #2]
   11d06:	81bb      	strh	r3, [r7, #12]
   11d08:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   11d0c:	2b00      	cmp	r3, #0
   11d0e:	dd06      	ble.n	11d1e <servo_set+0x142>
   11d10:	f04f 0400 	mov.w	r4, #0
   11d14:	f04f 0500 	mov.w	r5, #0
   11d18:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
   11d1c:	e002      	b.n	11d24 <servo_set+0x148>
   11d1e:	a562      	add	r5, pc, #392	; (adr r5, 11ea8 <servo_set+0x2cc>)
   11d20:	e9d5 4500 	ldrd	r4, r5, [r5]
   11d24:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   11d28:	4618      	mov	r0, r3
   11d2a:	f000 fe33 	bl	12994 <__aeabi_i2d>
   11d2e:	4602      	mov	r2, r0
   11d30:	460b      	mov	r3, r1
   11d32:	4620      	mov	r0, r4
   11d34:	4629      	mov	r1, r5
   11d36:	f000 fe93 	bl	12a60 <__aeabi_dmul>
   11d3a:	4602      	mov	r2, r0
   11d3c:	460b      	mov	r3, r1
   11d3e:	4610      	mov	r0, r2
   11d40:	4619      	mov	r1, r3
   11d42:	a35b      	add	r3, pc, #364	; (adr r3, 11eb0 <servo_set+0x2d4>)
   11d44:	e9d3 2300 	ldrd	r2, r3, [r3]
   11d48:	f000 fe8a 	bl	12a60 <__aeabi_dmul>
   11d4c:	4602      	mov	r2, r0
   11d4e:	460b      	mov	r3, r1
   11d50:	4610      	mov	r0, r2
   11d52:	4619      	mov	r1, r3
   11d54:	f001 f91e 	bl	12f94 <__aeabi_d2iz>
   11d58:	4603      	mov	r3, r0
   11d5a:	b29b      	uxth	r3, r3
   11d5c:	b29b      	uxth	r3, r3
   11d5e:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
   11d62:	81fb      	strh	r3, [r7, #14]
   11d64:	89fb      	ldrh	r3, [r7, #14]
   11d66:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   11d6a:	d307      	bcc.n	11d7c <servo_set+0x1a0>
   11d6c:	89fb      	ldrh	r3, [r7, #14]
   11d6e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   11d72:	bf28      	it	cs
   11d74:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   11d78:	b29a      	uxth	r2, r3
   11d7a:	e001      	b.n	11d80 <servo_set+0x1a4>
   11d7c:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   11d80:	f64b 431c 	movw	r3, #48156	; 0xbc1c
   11d84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d88:	801a      	strh	r2, [r3, #0]
   11d8a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   11d8e:	2b00      	cmp	r3, #0
   11d90:	dd03      	ble.n	11d9a <servo_set+0x1be>
   11d92:	a545      	add	r5, pc, #276	; (adr r5, 11ea8 <servo_set+0x2cc>)
   11d94:	e9d5 4500 	ldrd	r4, r5, [r5]
   11d98:	e005      	b.n	11da6 <servo_set+0x1ca>
   11d9a:	f04f 0400 	mov.w	r4, #0
   11d9e:	f04f 0500 	mov.w	r5, #0
   11da2:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
   11da6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   11daa:	4618      	mov	r0, r3
   11dac:	f000 fdf2 	bl	12994 <__aeabi_i2d>
   11db0:	4602      	mov	r2, r0
   11db2:	460b      	mov	r3, r1
   11db4:	4620      	mov	r0, r4
   11db6:	4629      	mov	r1, r5
   11db8:	f000 fe52 	bl	12a60 <__aeabi_dmul>
   11dbc:	4602      	mov	r2, r0
   11dbe:	460b      	mov	r3, r1
   11dc0:	4610      	mov	r0, r2
   11dc2:	4619      	mov	r1, r3
   11dc4:	a33c      	add	r3, pc, #240	; (adr r3, 11eb8 <servo_set+0x2dc>)
   11dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
   11dca:	f000 fe49 	bl	12a60 <__aeabi_dmul>
   11dce:	4602      	mov	r2, r0
   11dd0:	460b      	mov	r3, r1
   11dd2:	4610      	mov	r0, r2
   11dd4:	4619      	mov	r1, r3
   11dd6:	f001 f8dd 	bl	12f94 <__aeabi_d2iz>
   11dda:	4603      	mov	r3, r0
   11ddc:	b29b      	uxth	r3, r3
   11dde:	b29b      	uxth	r3, r3
   11de0:	f503 43ce 	add.w	r3, r3, #26368	; 0x6700
   11de4:	3320      	adds	r3, #32
   11de6:	81fb      	strh	r3, [r7, #14]
   11de8:	89fb      	ldrh	r3, [r7, #14]
   11dea:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   11dee:	d307      	bcc.n	11e00 <servo_set+0x224>
   11df0:	89fb      	ldrh	r3, [r7, #14]
   11df2:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   11df6:	bf28      	it	cs
   11df8:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   11dfc:	b29a      	uxth	r2, r3
   11dfe:	e001      	b.n	11e04 <servo_set+0x228>
   11e00:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   11e04:	f64b 431c 	movw	r3, #48156	; 0xbc1c
   11e08:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11e0c:	809a      	strh	r2, [r3, #4]
   11e0e:	687b      	ldr	r3, [r7, #4]
   11e10:	3306      	adds	r3, #6
   11e12:	881b      	ldrh	r3, [r3, #0]
   11e14:	b21b      	sxth	r3, r3
   11e16:	4618      	mov	r0, r3
   11e18:	f000 fdbc 	bl	12994 <__aeabi_i2d>
   11e1c:	4604      	mov	r4, r0
   11e1e:	460d      	mov	r5, r1
   11e20:	687b      	ldr	r3, [r7, #4]
   11e22:	3302      	adds	r3, #2
   11e24:	881b      	ldrh	r3, [r3, #0]
   11e26:	b21b      	sxth	r3, r3
   11e28:	4618      	mov	r0, r3
   11e2a:	f000 fdb3 	bl	12994 <__aeabi_i2d>
   11e2e:	4602      	mov	r2, r0
   11e30:	460b      	mov	r3, r1
   11e32:	4620      	mov	r0, r4
   11e34:	4629      	mov	r1, r5
   11e36:	f000 fc61 	bl	126fc <__adddf3>
   11e3a:	4602      	mov	r2, r0
   11e3c:	460b      	mov	r3, r1
   11e3e:	4610      	mov	r0, r2
   11e40:	4619      	mov	r1, r3
   11e42:	a31f      	add	r3, pc, #124	; (adr r3, 11ec0 <servo_set+0x2e4>)
   11e44:	e9d3 2300 	ldrd	r2, r3, [r3]
   11e48:	f000 fe0a 	bl	12a60 <__aeabi_dmul>
   11e4c:	4602      	mov	r2, r0
   11e4e:	460b      	mov	r3, r1
   11e50:	4610      	mov	r0, r2
   11e52:	4619      	mov	r1, r3
   11e54:	f001 f89e 	bl	12f94 <__aeabi_d2iz>
   11e58:	4603      	mov	r3, r0
   11e5a:	b29b      	uxth	r3, r3
   11e5c:	b29b      	uxth	r3, r3
   11e5e:	f503 43b5 	add.w	r3, r3, #23168	; 0x5a80
   11e62:	3320      	adds	r3, #32
   11e64:	81fb      	strh	r3, [r7, #14]
   11e66:	89fb      	ldrh	r3, [r7, #14]
   11e68:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   11e6c:	d307      	bcc.n	11e7e <servo_set+0x2a2>
   11e6e:	89fb      	ldrh	r3, [r7, #14]
   11e70:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   11e74:	bf28      	it	cs
   11e76:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   11e7a:	b29a      	uxth	r2, r3
   11e7c:	e001      	b.n	11e82 <servo_set+0x2a6>
   11e7e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   11e82:	f64b 431c 	movw	r3, #48156	; 0xbc1c
   11e86:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11e8a:	81da      	strh	r2, [r3, #14]
}
   11e8c:	3710      	adds	r7, #16
   11e8e:	46bd      	mov	sp, r7
   11e90:	bdb0      	pop	{r4, r5, r7, pc}
   11e92:	bf00      	nop
   11e94:	f3af 8000 	nop.w
   11e98:	aaaa9ef0 	.word	0xaaaa9ef0
   11e9c:	3feaaaaa 	.word	0x3feaaaaa
   11ea0:	fc96473e 	.word	0xfc96473e
   11ea4:	3fdfc962 	.word	0x3fdfc962
   11ea8:	51eb851f 	.word	0x51eb851f
   11eac:	3fe51eb8 	.word	0x3fe51eb8
   11eb0:	9999999a 	.word	0x9999999a
   11eb4:	bfe19999 	.word	0xbfe19999
   11eb8:	aaaa9ef0 	.word	0xaaaa9ef0
   11ebc:	bfe0aaaa 	.word	0xbfe0aaaa
   11ec0:	eeeed77a 	.word	0xeeeed77a
   11ec4:	bfdeeeee 	.word	0xbfdeeeee

00011ec8 <uart_init_tx>:
 * UART Baud rate generation settings:
 *
 * With 16.0 MHz clock,UBRR=25  => 38400 baud
 *
 */
void uart_init_tx( void ) {
   11ec8:	b480      	push	{r7}
   11eca:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRRH = 0; 
   11ecc:	f248 0320 	movw	r3, #32800	; 0x8020
   11ed0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ed4:	2200      	movs	r2, #0
   11ed6:	701a      	strb	r2, [r3, #0]
  UBRRL = 25; 
   11ed8:	f248 0309 	movw	r3, #32777	; 0x8009
   11edc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ee0:	2219      	movs	r2, #25
   11ee2:	701a      	strb	r2, [r3, #0]
  /* single speed */ 
  UCSRA = 0; 
   11ee4:	f248 030b 	movw	r3, #32779	; 0x800b
   11ee8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11eec:	2200      	movs	r2, #0
   11eee:	701a      	strb	r2, [r3, #0]
  /* Enable transmitter */ 
  UCSRB = _BV(TXEN); 
   11ef0:	f248 030a 	movw	r3, #32778	; 0x800a
   11ef4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ef8:	2208      	movs	r2, #8
   11efa:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0); 
   11efc:	f248 0320 	movw	r3, #32800	; 0x8020
   11f00:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f04:	2286      	movs	r2, #134	; 0x86
   11f06:	701a      	strb	r2, [r3, #0]
}
   11f08:	46bd      	mov	sp, r7
   11f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
   11f0e:	4770      	bx	lr

00011f10 <uart_init_rx>:

void uart_init_rx() {
   11f10:	b480      	push	{r7}
   11f12:	af00      	add	r7, sp, #0
  /* Enable receiver               */ 
  UCSRB |= _BV(RXEN); 
   11f14:	f248 030a 	movw	r3, #32778	; 0x800a
   11f18:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f1c:	f248 020a 	movw	r2, #32778	; 0x800a
   11f20:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11f24:	7812      	ldrb	r2, [r2, #0]
   11f26:	b2d2      	uxtb	r2, r2
   11f28:	f042 0210 	orr.w	r2, r2, #16
   11f2c:	b2d2      	uxtb	r2, r2
   11f2e:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi( UCSRB, RXCIE ); 
   11f30:	f248 030a 	movw	r3, #32778	; 0x800a
   11f34:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f38:	f248 020a 	movw	r2, #32778	; 0x800a
   11f3c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11f40:	7812      	ldrb	r2, [r2, #0]
   11f42:	b2d2      	uxtb	r2, r2
   11f44:	f062 027f 	orn	r2, r2, #127	; 0x7f
   11f48:	b2d2      	uxtb	r2, r2
   11f4a:	701a      	strb	r2, [r3, #0]
}
   11f4c:	46bd      	mov	sp, r7
   11f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
   11f52:	4770      	bx	lr

00011f54 <uart_transmit>:

void uart_transmit( unsigned char data ) {
   11f54:	b480      	push	{r7}
   11f56:	b083      	sub	sp, #12
   11f58:	af00      	add	r7, sp, #0
   11f5a:	4603      	mov	r3, r0
   11f5c:	71fb      	strb	r3, [r7, #7]
  if (UCSRB & _BV(TXCIE)) {
   11f5e:	f248 030a 	movw	r3, #32778	; 0x800a
   11f62:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f66:	781b      	ldrb	r3, [r3, #0]
   11f68:	b2db      	uxtb	r3, r3
   11f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
   11f6e:	2b00      	cmp	r3, #0
   11f70:	d028      	beq.n	11fc4 <uart_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail == tx_head + 1) { /* BUF_SIZE = 256 */
   11f72:	f64b 4331 	movw	r3, #48177	; 0xbc31
   11f76:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11f7a:	781b      	ldrb	r3, [r3, #0]
   11f7c:	b2db      	uxtb	r3, r3
   11f7e:	461a      	mov	r2, r3
   11f80:	f64b 4330 	movw	r3, #48176	; 0xbc30
   11f84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11f88:	781b      	ldrb	r3, [r3, #0]
   11f8a:	3301      	adds	r3, #1
   11f8c:	429a      	cmp	r2, r3
   11f8e:	d100      	bne.n	11f92 <uart_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   11f90:	e02c      	b.n	11fec <uart_transmit+0x98>
    }
    tx_buf[tx_head] = data;
   11f92:	f64b 4330 	movw	r3, #48176	; 0xbc30
   11f96:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11f9a:	781b      	ldrb	r3, [r3, #0]
   11f9c:	461a      	mov	r2, r3
   11f9e:	f64b 4334 	movw	r3, #48180	; 0xbc34
   11fa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11fa6:	79f9      	ldrb	r1, [r7, #7]
   11fa8:	5499      	strb	r1, [r3, r2]
    tx_head++; /* BUF_SIZE = 256 */
   11faa:	f64b 4330 	movw	r3, #48176	; 0xbc30
   11fae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11fb2:	781b      	ldrb	r3, [r3, #0]
   11fb4:	3301      	adds	r3, #1
   11fb6:	b2da      	uxtb	r2, r3
   11fb8:	f64b 4330 	movw	r3, #48176	; 0xbc30
   11fbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11fc0:	701a      	strb	r2, [r3, #0]
   11fc2:	e013      	b.n	11fec <uart_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR = data;
   11fc4:	f248 030c 	movw	r3, #32780	; 0x800c
   11fc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11fcc:	79fa      	ldrb	r2, [r7, #7]
   11fce:	701a      	strb	r2, [r3, #0]
    sbi(UCSRB, TXCIE);
   11fd0:	f248 030a 	movw	r3, #32778	; 0x800a
   11fd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11fd8:	f248 020a 	movw	r2, #32778	; 0x800a
   11fdc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11fe0:	7812      	ldrb	r2, [r2, #0]
   11fe2:	b2d2      	uxtb	r2, r2
   11fe4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   11fe8:	b2d2      	uxtb	r2, r2
   11fea:	701a      	strb	r2, [r3, #0]
  }
}
   11fec:	370c      	adds	r7, #12
   11fee:	46bd      	mov	sp, r7
   11ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
   11ff4:	4770      	bx	lr
   11ff6:	bf00      	nop

00011ff8 <uart_print_hex>:

void uart_print_hex ( uint8_t c ) {
   11ff8:	b590      	push	{r4, r7, lr}
   11ffa:	b089      	sub	sp, #36	; 0x24
   11ffc:	af00      	add	r7, sp, #0
   11ffe:	4603      	mov	r3, r0
   12000:	71fb      	strb	r3, [r7, #7]
  const uint8_t hex[16] = { '0', '1', '2', '3', '4', '5', '6', '7', 
   12002:	f643 1378 	movw	r3, #14712	; 0x3978
   12006:	f2c0 0301 	movt	r3, #1
   1200a:	f107 040c 	add.w	r4, r7, #12
   1200e:	6818      	ldr	r0, [r3, #0]
   12010:	6859      	ldr	r1, [r3, #4]
   12012:	689a      	ldr	r2, [r3, #8]
   12014:	68db      	ldr	r3, [r3, #12]
   12016:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
  uint8_t high = (c & 0xF0)>>4;
   12018:	79fb      	ldrb	r3, [r7, #7]
   1201a:	091b      	lsrs	r3, r3, #4
   1201c:	77fb      	strb	r3, [r7, #31]
  uint8_t low  = c & 0x0F;
   1201e:	79fb      	ldrb	r3, [r7, #7]
   12020:	f003 030f 	and.w	r3, r3, #15
   12024:	77bb      	strb	r3, [r7, #30]
    /*
    *Added by SunnyBeike
    * */
        high = 15;
   12026:	230f      	movs	r3, #15
   12028:	77fb      	strb	r3, [r7, #31]
        low = 15;
   1202a:	230f      	movs	r3, #15
   1202c:	77bb      	strb	r3, [r7, #30]
    /*
    *End
    * */

    uart_transmit(hex[high]);
   1202e:	7ffb      	ldrb	r3, [r7, #31]
   12030:	f107 0220 	add.w	r2, r7, #32
   12034:	4413      	add	r3, r2
   12036:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   1203a:	4618      	mov	r0, r3
   1203c:	f7ff ff8a 	bl	11f54 <uart_transmit>
  uart_transmit(hex[low]);
   12040:	7fbb      	ldrb	r3, [r7, #30]
   12042:	f107 0220 	add.w	r2, r7, #32
   12046:	4413      	add	r3, r2
   12048:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   1204c:	4618      	mov	r0, r3
   1204e:	f7ff ff81 	bl	11f54 <uart_transmit>
} 
   12052:	3724      	adds	r7, #36	; 0x24
   12054:	46bd      	mov	sp, r7
   12056:	bd90      	pop	{r4, r7, pc}

00012058 <uart_print_hex16>:

void uart_print_hex16 ( uint16_t c ) {
   12058:	b580      	push	{r7, lr}
   1205a:	b084      	sub	sp, #16
   1205c:	af00      	add	r7, sp, #0
   1205e:	4603      	mov	r3, r0
   12060:	80fb      	strh	r3, [r7, #6]
  uint8_t high = (uint8_t)(c>>8);
   12062:	88fb      	ldrh	r3, [r7, #6]
   12064:	0a1b      	lsrs	r3, r3, #8
   12066:	b29b      	uxth	r3, r3
   12068:	73fb      	strb	r3, [r7, #15]
  uint8_t low  = (uint8_t)(c);
   1206a:	88fb      	ldrh	r3, [r7, #6]
   1206c:	73bb      	strb	r3, [r7, #14]
  uart_print_hex(high);
   1206e:	7bfb      	ldrb	r3, [r7, #15]
   12070:	4618      	mov	r0, r3
   12072:	f7ff ffc1 	bl	11ff8 <uart_print_hex>
  uart_print_hex(low);
   12076:	7bbb      	ldrb	r3, [r7, #14]
   12078:	4618      	mov	r0, r3
   1207a:	f7ff ffbd 	bl	11ff8 <uart_print_hex>
}
   1207e:	3710      	adds	r7, #16
   12080:	46bd      	mov	sp, r7
   12082:	bd80      	pop	{r7, pc}

00012084 <uart_print_string>:

void uart_print_string(const uint8_t* s) {
   12084:	b580      	push	{r7, lr}
   12086:	b084      	sub	sp, #16
   12088:	af00      	add	r7, sp, #0
   1208a:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
   1208c:	2300      	movs	r3, #0
   1208e:	73fb      	strb	r3, [r7, #15]
  while (s[i]) {
   12090:	e009      	b.n	120a6 <uart_print_string+0x22>
    uart_transmit(s[i]);
   12092:	7bfb      	ldrb	r3, [r7, #15]
   12094:	687a      	ldr	r2, [r7, #4]
   12096:	4413      	add	r3, r2
   12098:	781b      	ldrb	r3, [r3, #0]
   1209a:	4618      	mov	r0, r3
   1209c:	f7ff ff5a 	bl	11f54 <uart_transmit>
    i++;
   120a0:	7bfb      	ldrb	r3, [r7, #15]
   120a2:	3301      	adds	r3, #1
   120a4:	73fb      	strb	r3, [r7, #15]
  uart_print_hex(low);
}

void uart_print_string(const uint8_t* s) {
  uint8_t i = 0;
  while (s[i]) {
   120a6:	7bfb      	ldrb	r3, [r7, #15]
   120a8:	687a      	ldr	r2, [r7, #4]
   120aa:	4413      	add	r3, r2
   120ac:	781b      	ldrb	r3, [r3, #0]
   120ae:	2b00      	cmp	r3, #0
   120b0:	d1ef      	bne.n	12092 <uart_print_string+0xe>
    uart_transmit(s[i]);
    i++;
  }
}
   120b2:	3710      	adds	r7, #16
   120b4:	46bd      	mov	sp, r7
   120b6:	bd80      	pop	{r7, pc}

000120b8 <SIG_UART_TRANS>:

SIGNAL(SIG_UART_TRANS) {
   120b8:	b480      	push	{r7}
   120ba:	af00      	add	r7, sp, #0
  if (tx_head == tx_tail) {
   120bc:	f64b 4330 	movw	r3, #48176	; 0xbc30
   120c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   120c4:	781a      	ldrb	r2, [r3, #0]
   120c6:	f64b 4331 	movw	r3, #48177	; 0xbc31
   120ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   120ce:	781b      	ldrb	r3, [r3, #0]
   120d0:	b2db      	uxtb	r3, r3
   120d2:	429a      	cmp	r2, r3
   120d4:	d10e      	bne.n	120f4 <SIG_UART_TRANS+0x3c>
    /* Nothing more to send */
    cbi(UCSRB, TXCIE); /* disable interrupt */
   120d6:	f248 030a 	movw	r3, #32778	; 0x800a
   120da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120de:	f248 020a 	movw	r2, #32778	; 0x800a
   120e2:	f2c2 0200 	movt	r2, #8192	; 0x2000
   120e6:	7812      	ldrb	r2, [r2, #0]
   120e8:	b2d2      	uxtb	r2, r2
   120ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   120ee:	b2d2      	uxtb	r2, r2
   120f0:	701a      	strb	r2, [r3, #0]
   120f2:	e01d      	b.n	12130 <SIG_UART_TRANS+0x78>
  } else {
    UDR = tx_buf[tx_tail];
   120f4:	f248 030c 	movw	r3, #32780	; 0x800c
   120f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120fc:	f64b 4231 	movw	r2, #48177	; 0xbc31
   12100:	f2c2 0204 	movt	r2, #8196	; 0x2004
   12104:	7812      	ldrb	r2, [r2, #0]
   12106:	b2d2      	uxtb	r2, r2
   12108:	4611      	mov	r1, r2
   1210a:	f64b 4234 	movw	r2, #48180	; 0xbc34
   1210e:	f2c2 0204 	movt	r2, #8196	; 0x2004
   12112:	5c52      	ldrb	r2, [r2, r1]
   12114:	701a      	strb	r2, [r3, #0]
    tx_tail++; /* warning tx_buf_len is 256 */
   12116:	f64b 4331 	movw	r3, #48177	; 0xbc31
   1211a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1211e:	781b      	ldrb	r3, [r3, #0]
   12120:	b2db      	uxtb	r3, r3
   12122:	3301      	adds	r3, #1
   12124:	b2da      	uxtb	r2, r3
   12126:	f64b 4331 	movw	r3, #48177	; 0xbc31
   1212a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1212e:	701a      	strb	r2, [r3, #0]
  }
}
   12130:	46bd      	mov	sp, r7
   12132:	f85d 7b04 	ldr.w	r7, [sp], #4
   12136:	4770      	bx	lr

00012138 <init_led>:
#include "stm32f10x_usart.h"
#include "stm32f10x_exti.h"
#include "misc.h"

void init_led(void)
{
   12138:	b580      	push	{r7, lr}
   1213a:	b082      	sub	sp, #8
   1213c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO C clock. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
   1213e:	2010      	movs	r0, #16
   12140:	2101      	movs	r1, #1
   12142:	f7ee fe3d 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Set the LED pin state such that the LED is off.  The LED is connected
     * between power and the microcontroller pin, which makes it turn on when
     * the pin is low.
     */
    GPIO_WriteBit(GPIOC,GPIO_Pin_12,Bit_SET);
   12146:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   1214a:	f2c4 0001 	movt	r0, #16385	; 0x4001
   1214e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   12152:	2201      	movs	r2, #1
   12154:	f7ef f944 	bl	13e0 <GPIO_WriteBit>

    /* Configure the LED pin as push-pull output. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_12;
   12158:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   1215c:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   1215e:	2310      	movs	r3, #16
   12160:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   12162:	2303      	movs	r3, #3
   12164:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
   12166:	1d3b      	adds	r3, r7, #4
   12168:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   1216c:	f2c4 0001 	movt	r0, #16385	; 0x4001
   12170:	4619      	mov	r1, r3
   12172:	f7ee fff9 	bl	1168 <GPIO_Init>
}
   12176:	3708      	adds	r7, #8
   12178:	46bd      	mov	sp, r7
   1217a:	bd80      	pop	{r7, pc}

0001217c <init_button>:

void init_button(void)
{
   1217c:	b580      	push	{r7, lr}
   1217e:	b082      	sub	sp, #8
   12180:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO A clock */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
   12182:	2004      	movs	r0, #4
   12184:	2101      	movs	r1, #1
   12186:	f7ee fe1b 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Configure the button pin as a floating input. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_0;
   1218a:	2301      	movs	r3, #1
   1218c:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   1218e:	2304      	movs	r3, #4
   12190:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   12192:	2303      	movs	r3, #3
   12194:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
   12196:	1d3b      	adds	r3, r7, #4
   12198:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   1219c:	f2c4 0001 	movt	r0, #16385	; 0x4001
   121a0:	4619      	mov	r1, r3
   121a2:	f7ee ffe1 	bl	1168 <GPIO_Init>
}
   121a6:	3708      	adds	r7, #8
   121a8:	46bd      	mov	sp, r7
   121aa:	bd80      	pop	{r7, pc}

000121ac <enable_button_interrupts>:

void enable_button_interrupts(void)
{
   121ac:	b580      	push	{r7, lr}
   121ae:	b084      	sub	sp, #16
   121b0:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable the AFIO clock.  GPIO_EXTILineConfig sets registers in
     * the AFIO.
     */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
   121b2:	2001      	movs	r0, #1
   121b4:	2101      	movs	r1, #1
   121b6:	f7ee fe03 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Connect EXTI Line 0 to the button GPIO Pin */
    GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);
   121ba:	2000      	movs	r0, #0
   121bc:	2100      	movs	r1, #0
   121be:	f7ef fa07 	bl	15d0 <GPIO_EXTILineConfig>

    /* Configure the EXTI line to generate an interrupt when the button is
     * pressed.  The button pin is high when pressed, so it needs to trigger
     * when rising from low to high. */
    EXTI_InitStructure.EXTI_Line = EXTI_Line0;
   121c2:	2301      	movs	r3, #1
   121c4:	60bb      	str	r3, [r7, #8]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
   121c6:	2300      	movs	r3, #0
   121c8:	733b      	strb	r3, [r7, #12]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
   121ca:	2308      	movs	r3, #8
   121cc:	737b      	strb	r3, [r7, #13]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
   121ce:	2301      	movs	r3, #1
   121d0:	73bb      	strb	r3, [r7, #14]
    EXTI_Init(&EXTI_InitStructure);
   121d2:	f107 0308 	add.w	r3, r7, #8
   121d6:	4618      	mov	r0, r3
   121d8:	f7ef ff00 	bl	1fdc <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
   121dc:	2306      	movs	r3, #6
   121de:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
   121e0:	230f      	movs	r3, #15
   121e2:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
   121e4:	230f      	movs	r3, #15
   121e6:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   121e8:	2301      	movs	r3, #1
   121ea:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
   121ec:	1d3b      	adds	r3, r7, #4
   121ee:	4618      	mov	r0, r3
   121f0:	f7f0 f82e 	bl	2250 <NVIC_Init>
}
   121f4:	3710      	adds	r7, #16
   121f6:	46bd      	mov	sp, r7
   121f8:	bd80      	pop	{r7, pc}
   121fa:	bf00      	nop

000121fc <init_rs232>:

void init_rs232(void)
{
   121fc:	b580      	push	{r7, lr}
   121fe:	b086      	sub	sp, #24
   12200:	af00      	add	r7, sp, #0
    USART_InitTypeDef USART_InitStructure;
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable peripheral clocks. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
   12202:	2005      	movs	r0, #5
   12204:	2101      	movs	r1, #1
   12206:	f7ee fddb 	bl	dc0 <RCC_APB2PeriphClockCmd>
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
   1220a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   1220e:	2101      	movs	r1, #1
   12210:	f7ee fdfe 	bl	e10 <RCC_APB1PeriphClockCmd>

    /* Configure USART2 Rx pin as floating input. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
   12214:	2308      	movs	r3, #8
   12216:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   12218:	2304      	movs	r3, #4
   1221a:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
   1221c:	1d3b      	adds	r3, r7, #4
   1221e:	f44f 6000 	mov.w	r0, #2048	; 0x800
   12222:	f2c4 0001 	movt	r0, #16385	; 0x4001
   12226:	4619      	mov	r1, r3
   12228:	f7ee ff9e 	bl	1168 <GPIO_Init>

    /* Configure USART2 Tx as alternate function push-pull. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
   1222c:	2304      	movs	r3, #4
   1222e:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   12230:	2303      	movs	r3, #3
   12232:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
   12234:	2318      	movs	r3, #24
   12236:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
   12238:	1d3b      	adds	r3, r7, #4
   1223a:	f44f 6000 	mov.w	r0, #2048	; 0x800
   1223e:	f2c4 0001 	movt	r0, #16385	; 0x4001
   12242:	4619      	mov	r1, r3
   12244:	f7ee ff90 	bl	1168 <GPIO_Init>

    /* Configure the USART2 */
    USART_InitStructure.USART_BaudRate = 9600;
   12248:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   1224c:	60bb      	str	r3, [r7, #8]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
   1224e:	2300      	movs	r3, #0
   12250:	81bb      	strh	r3, [r7, #12]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
   12252:	2300      	movs	r3, #0
   12254:	81fb      	strh	r3, [r7, #14]
    USART_InitStructure.USART_Parity = USART_Parity_No;
   12256:	2300      	movs	r3, #0
   12258:	823b      	strh	r3, [r7, #16]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
   1225a:	2300      	movs	r3, #0
   1225c:	82bb      	strh	r3, [r7, #20]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
   1225e:	230c      	movs	r3, #12
   12260:	827b      	strh	r3, [r7, #18]
    USART_Init(USART2, &USART_InitStructure);
   12262:	f107 0308 	add.w	r3, r7, #8
   12266:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   1226a:	f2c4 0000 	movt	r0, #16384	; 0x4000
   1226e:	4619      	mov	r1, r3
   12270:	f7ef fa62 	bl	1738 <USART_Init>
    USART_Cmd(USART2, ENABLE);
   12274:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   12278:	f2c4 0000 	movt	r0, #16384	; 0x4000
   1227c:	2101      	movs	r1, #1
   1227e:	f7ef fb79 	bl	1974 <USART_Cmd>
}
   12282:	3718      	adds	r7, #24
   12284:	46bd      	mov	sp, r7
   12286:	bd80      	pop	{r7, pc}

00012288 <enable_rs232_interrupts>:

void enable_rs232_interrupts(void)
{
   12288:	b580      	push	{r7, lr}
   1228a:	b082      	sub	sp, #8
   1228c:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable transmit and receive interrupts for the USART2. */
    USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
   1228e:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   12292:	f2c4 0000 	movt	r0, #16384	; 0x4000
   12296:	f240 7127 	movw	r1, #1831	; 0x727
   1229a:	2200      	movs	r2, #0
   1229c:	f7ef fb8a 	bl	19b4 <USART_ITConfig>
    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
   122a0:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   122a4:	f2c4 0000 	movt	r0, #16384	; 0x4000
   122a8:	f240 5125 	movw	r1, #1317	; 0x525
   122ac:	2201      	movs	r2, #1
   122ae:	f7ef fb81 	bl	19b4 <USART_ITConfig>

    /* Enable the USART2 IRQ in the NVIC module (so that the USART2 interrupt
     * handler is enabled). */
    NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
   122b2:	2326      	movs	r3, #38	; 0x26
   122b4:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
   122b6:	2300      	movs	r3, #0
   122b8:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   122ba:	2301      	movs	r3, #1
   122bc:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
   122be:	1d3b      	adds	r3, r7, #4
   122c0:	4618      	mov	r0, r3
   122c2:	f7ef ffc5 	bl	2250 <NVIC_Init>
}
   122c6:	3708      	adds	r7, #8
   122c8:	46bd      	mov	sp, r7
   122ca:	bd80      	pop	{r7, pc}

000122cc <enable_rs232>:

void enable_rs232(void)
{
   122cc:	b580      	push	{r7, lr}
   122ce:	af00      	add	r7, sp, #0
    /* Enable the RS232 port. */
    USART_Cmd(USART2, ENABLE);
   122d0:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   122d4:	f2c4 0000 	movt	r0, #16384	; 0x4000
   122d8:	2101      	movs	r1, #1
   122da:	f7ef fb4b 	bl	1974 <USART_Cmd>
}
   122de:	bd80      	pop	{r7, pc}

000122e0 <send_byte>:


void send_byte(uint8_t b)
{
   122e0:	b580      	push	{r7, lr}
   122e2:	b082      	sub	sp, #8
   122e4:	af00      	add	r7, sp, #0
   122e6:	4603      	mov	r3, r0
   122e8:	71fb      	strb	r3, [r7, #7]
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
   122ea:	bf00      	nop
   122ec:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   122f0:	f2c4 0000 	movt	r0, #16384	; 0x4000
   122f4:	2180      	movs	r1, #128	; 0x80
   122f6:	f7ef fda9 	bl	1e4c <USART_GetFlagStatus>
   122fa:	4603      	mov	r3, r0
   122fc:	2b00      	cmp	r3, #0
   122fe:	d0f5      	beq.n	122ec <send_byte+0xc>

    GPIOC->ODR ^= 0x00001000;
   12300:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   12304:	f2c4 0301 	movt	r3, #16385	; 0x4001
   12308:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1230c:	f2c4 0201 	movt	r2, #16385	; 0x4001
   12310:	68d2      	ldr	r2, [r2, #12]
   12312:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
   12316:	60da      	str	r2, [r3, #12]

    USART_SendData(USART2, b);
   12318:	79fb      	ldrb	r3, [r7, #7]
   1231a:	b29b      	uxth	r3, r3
   1231c:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   12320:	f2c4 0000 	movt	r0, #16384	; 0x4000
   12324:	4619      	mov	r1, r3
   12326:	f7ef fc45 	bl	1bb4 <USART_SendData>
}
   1232a:	3708      	adds	r7, #8
   1232c:	46bd      	mov	sp, r7
   1232e:	bd80      	pop	{r7, pc}

00012330 <send_num>:


void send_num(uint8_t b)
{
   12330:	b580      	push	{r7, lr}
   12332:	b082      	sub	sp, #8
   12334:	af00      	add	r7, sp, #0
   12336:	4603      	mov	r3, r0
   12338:	71fb      	strb	r3, [r7, #7]
    send_byte(b+'0'); 
   1233a:	79fb      	ldrb	r3, [r7, #7]
   1233c:	3330      	adds	r3, #48	; 0x30
   1233e:	b2db      	uxtb	r3, r3
   12340:	4618      	mov	r0, r3
   12342:	f7ff ffcd 	bl	122e0 <send_byte>
}
   12346:	3708      	adds	r7, #8
   12348:	46bd      	mov	sp, r7
   1234a:	bd80      	pop	{r7, pc}

0001234c <vPrintString>:


void vPrintString( const char * string )
{
   1234c:	b580      	push	{r7, lr}
   1234e:	b084      	sub	sp, #16
   12350:	af00      	add	r7, sp, #0
   12352:	6078      	str	r0, [r7, #4]
    int i = 0;
   12354:	2300      	movs	r3, #0
   12356:	60fb      	str	r3, [r7, #12]
    while(string[i] != '\0')
   12358:	e009      	b.n	1236e <vPrintString+0x22>
    {
        send_byte(string[i]);
   1235a:	68fb      	ldr	r3, [r7, #12]
   1235c:	687a      	ldr	r2, [r7, #4]
   1235e:	4413      	add	r3, r2
   12360:	781b      	ldrb	r3, [r3, #0]
   12362:	4618      	mov	r0, r3
   12364:	f7ff ffbc 	bl	122e0 <send_byte>
        i++;
   12368:	68fb      	ldr	r3, [r7, #12]
   1236a:	3301      	adds	r3, #1
   1236c:	60fb      	str	r3, [r7, #12]


void vPrintString( const char * string )
{
    int i = 0;
    while(string[i] != '\0')
   1236e:	68fb      	ldr	r3, [r7, #12]
   12370:	687a      	ldr	r2, [r7, #4]
   12372:	4413      	add	r3, r2
   12374:	781b      	ldrb	r3, [r3, #0]
   12376:	2b00      	cmp	r3, #0
   12378:	d1ef      	bne.n	1235a <vPrintString+0xe>
    {
        send_byte(string[i]);
        i++;
    }
}
   1237a:	3710      	adds	r7, #16
   1237c:	46bd      	mov	sp, r7
   1237e:	bd80      	pop	{r7, pc}

00012380 <vPrintNumber>:

void vPrintNumber( const long c_num )
{
   12380:	b580      	push	{r7, lr}
   12382:	b08e      	sub	sp, #56	; 0x38
   12384:	af00      	add	r7, sp, #0
   12386:	6078      	str	r0, [r7, #4]
    char time[33], tmp;
    unsigned int i, count = 0;
   12388:	2300      	movs	r3, #0
   1238a:	633b      	str	r3, [r7, #48]	; 0x30
    long num = c_num;
   1238c:	687b      	ldr	r3, [r7, #4]
   1238e:	62fb      	str	r3, [r7, #44]	; 0x2c

    if(num == 0)
   12390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12392:	2b00      	cmp	r3, #0
   12394:	d106      	bne.n	123a4 <vPrintNumber+0x24>
    {
        vPrintString("0\n\r");
   12396:	f643 1088 	movw	r0, #14728	; 0x3988
   1239a:	f2c0 0001 	movt	r0, #1
   1239e:	f7ff ffd5 	bl	1234c <vPrintString>
   123a2:	e064      	b.n	1246e <vPrintNumber+0xee>
    }
    else
    {
        // transform long into char * 
        while( num   )
   123a4:	e024      	b.n	123f0 <vPrintNumber+0x70>
        {
            time[count] = num%10 +'0';
   123a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   123a8:	f246 6367 	movw	r3, #26215	; 0x6667
   123ac:	f2c6 6366 	movt	r3, #26214	; 0x6666
   123b0:	fb83 2301 	smull	r2, r3, r3, r1
   123b4:	109a      	asrs	r2, r3, #2
   123b6:	17cb      	asrs	r3, r1, #31
   123b8:	1ad2      	subs	r2, r2, r3
   123ba:	4613      	mov	r3, r2
   123bc:	009b      	lsls	r3, r3, #2
   123be:	4413      	add	r3, r2
   123c0:	005b      	lsls	r3, r3, #1
   123c2:	1aca      	subs	r2, r1, r3
   123c4:	b2d3      	uxtb	r3, r2
   123c6:	3330      	adds	r3, #48	; 0x30
   123c8:	b2da      	uxtb	r2, r3
   123ca:	f107 0108 	add.w	r1, r7, #8
   123ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   123d0:	440b      	add	r3, r1
   123d2:	701a      	strb	r2, [r3, #0]
            count ++;
   123d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   123d6:	3301      	adds	r3, #1
   123d8:	633b      	str	r3, [r7, #48]	; 0x30
            num /= 10;
   123da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   123dc:	f246 6367 	movw	r3, #26215	; 0x6667
   123e0:	f2c6 6366 	movt	r3, #26214	; 0x6666
   123e4:	fb83 1302 	smull	r1, r3, r3, r2
   123e8:	1099      	asrs	r1, r3, #2
   123ea:	17d3      	asrs	r3, r2, #31
   123ec:	1acb      	subs	r3, r1, r3
   123ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        vPrintString("0\n\r");
    }
    else
    {
        // transform long into char * 
        while( num   )
   123f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   123f2:	2b00      	cmp	r3, #0
   123f4:	d1d7      	bne.n	123a6 <vPrintNumber+0x26>
        {
            time[count] = num%10 +'0';
            count ++;
            num /= 10;
        }
        time[count] = '\0';
   123f6:	f107 0208 	add.w	r2, r7, #8
   123fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   123fc:	4413      	add	r3, r2
   123fe:	2200      	movs	r2, #0
   12400:	701a      	strb	r2, [r3, #0]

        // reverse
        for( i = 0; i < count/2; ++i  )
   12402:	2300      	movs	r3, #0
   12404:	637b      	str	r3, [r7, #52]	; 0x34
   12406:	e022      	b.n	1244e <vPrintNumber+0xce>
        {
            tmp = time[i];
   12408:	f107 0208 	add.w	r2, r7, #8
   1240c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1240e:	4413      	add	r3, r2
   12410:	781b      	ldrb	r3, [r3, #0]
   12412:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            time[i] = time[count-1-i];
   12416:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   12418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1241a:	1ad3      	subs	r3, r2, r3
   1241c:	3b01      	subs	r3, #1
   1241e:	f107 0238 	add.w	r2, r7, #56	; 0x38
   12422:	4413      	add	r3, r2
   12424:	f813 2c30 	ldrb.w	r2, [r3, #-48]
   12428:	f107 0108 	add.w	r1, r7, #8
   1242c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1242e:	440b      	add	r3, r1
   12430:	701a      	strb	r2, [r3, #0]
            time[count-1-i] = tmp;
   12432:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   12434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12436:	1ad3      	subs	r3, r2, r3
   12438:	3b01      	subs	r3, #1
   1243a:	f107 0138 	add.w	r1, r7, #56	; 0x38
   1243e:	440b      	add	r3, r1
   12440:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
   12444:	f803 2c30 	strb.w	r2, [r3, #-48]
            num /= 10;
        }
        time[count] = '\0';

        // reverse
        for( i = 0; i < count/2; ++i  )
   12448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1244a:	3301      	adds	r3, #1
   1244c:	637b      	str	r3, [r7, #52]	; 0x34
   1244e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12450:	085a      	lsrs	r2, r3, #1
   12452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12454:	429a      	cmp	r2, r3
   12456:	d8d7      	bhi.n	12408 <vPrintNumber+0x88>
        {
            tmp = time[i];
            time[i] = time[count-1-i];
            time[count-1-i] = tmp;
        }
        vPrintString(time);
   12458:	f107 0308 	add.w	r3, r7, #8
   1245c:	4618      	mov	r0, r3
   1245e:	f7ff ff75 	bl	1234c <vPrintString>
        vPrintString("\n\r");
   12462:	f643 108c 	movw	r0, #14732	; 0x398c
   12466:	f2c0 0001 	movt	r0, #1
   1246a:	f7ff ff6f 	bl	1234c <vPrintString>
    }
}
   1246e:	3738      	adds	r7, #56	; 0x38
   12470:	46bd      	mov	sp, r7
   12472:	bd80      	pop	{r7, pc}

00012474 <vParametersInit>:

portBASE_TYPE miss[NUMBEROFTASK];


void vParametersInit()
{
   12474:	b480      	push	{r7}
   12476:	b083      	sub	sp, #12
   12478:	af00      	add	r7, sp, #0
    portBASE_TYPE i;
    for( i = 0; i < NUMBEROFTASK; ++ i )
   1247a:	2300      	movs	r3, #0
   1247c:	607b      	str	r3, [r7, #4]
   1247e:	e03c      	b.n	124fa <vParametersInit+0x86>
    {
        parameters[i].xMyId = i;
   12480:	f64b 5234 	movw	r2, #48436	; 0xbd34
   12484:	f2c2 0204 	movt	r2, #8196	; 0x2004
   12488:	6879      	ldr	r1, [r7, #4]
   1248a:	460b      	mov	r3, r1
   1248c:	005b      	lsls	r3, r3, #1
   1248e:	440b      	add	r3, r1
   12490:	009b      	lsls	r3, r3, #2
   12492:	4413      	add	r3, r2
   12494:	687a      	ldr	r2, [r7, #4]
   12496:	601a      	str	r2, [r3, #0]
        parameters[i].xMyFun = xTaskTable[i];
   12498:	f240 03c4 	movw	r3, #196	; 0xc4
   1249c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124a0:	687a      	ldr	r2, [r7, #4]
   124a2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   124a6:	f64b 5234 	movw	r2, #48436	; 0xbd34
   124aa:	f2c2 0204 	movt	r2, #8196	; 0x2004
   124ae:	6879      	ldr	r1, [r7, #4]
   124b0:	460b      	mov	r3, r1
   124b2:	005b      	lsls	r3, r3, #1
   124b4:	440b      	add	r3, r1
   124b6:	009b      	lsls	r3, r3, #2
   124b8:	4413      	add	r3, r2
   124ba:	3304      	adds	r3, #4
   124bc:	6018      	str	r0, [r3, #0]
        parameters[i].xPeriod = xPeriodTable[i];
   124be:	f240 035c 	movw	r3, #92	; 0x5c
   124c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124c6:	687a      	ldr	r2, [r7, #4]
   124c8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   124cc:	f64b 5234 	movw	r2, #48436	; 0xbd34
   124d0:	f2c2 0204 	movt	r2, #8196	; 0x2004
   124d4:	6879      	ldr	r1, [r7, #4]
   124d6:	460b      	mov	r3, r1
   124d8:	005b      	lsls	r3, r3, #1
   124da:	440b      	add	r3, r1
   124dc:	009b      	lsls	r3, r3, #2
   124de:	4413      	add	r3, r2
   124e0:	3308      	adds	r3, #8
   124e2:	6018      	str	r0, [r3, #0]
        miss[i] = 0;
   124e4:	f64b 6304 	movw	r3, #48644	; 0xbe04
   124e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   124ec:	687a      	ldr	r2, [r7, #4]
   124ee:	2100      	movs	r1, #0
   124f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


void vParametersInit()
{
    portBASE_TYPE i;
    for( i = 0; i < NUMBEROFTASK; ++ i )
   124f4:	687b      	ldr	r3, [r7, #4]
   124f6:	3301      	adds	r3, #1
   124f8:	607b      	str	r3, [r7, #4]
   124fa:	687b      	ldr	r3, [r7, #4]
   124fc:	2b0c      	cmp	r3, #12
   124fe:	ddbf      	ble.n	12480 <vParametersInit+0xc>
        parameters[i].xMyId = i;
        parameters[i].xMyFun = xTaskTable[i];
        parameters[i].xPeriod = xPeriodTable[i];
        miss[i] = 0;
    }
}
   12500:	370c      	adds	r7, #12
   12502:	46bd      	mov	sp, r7
   12504:	f85d 7b04 	ldr.w	r7, [sp], #4
   12508:	4770      	bx	lr
   1250a:	bf00      	nop

0001250c <vTimeTask>:

void vTimeTask( void * pvParameter )
{
   1250c:	b580      	push	{r7, lr}
   1250e:	b08c      	sub	sp, #48	; 0x30
   12510:	af00      	add	r7, sp, #0
   12512:	6078      	str	r0, [r7, #4]
    struct parameter *xMyParameter = (struct parameter *)pvParameter;
   12514:	687b      	ldr	r3, [r7, #4]
   12516:	623b      	str	r3, [r7, #32]
    portBASE_TYPE xMyId = xMyParameter->xMyId;
   12518:	6a3b      	ldr	r3, [r7, #32]
   1251a:	681b      	ldr	r3, [r3, #0]
   1251c:	61fb      	str	r3, [r7, #28]
    pvTaskFunType xMyFun = xMyParameter->xMyFun;
   1251e:	6a3b      	ldr	r3, [r7, #32]
   12520:	685b      	ldr	r3, [r3, #4]
   12522:	61bb      	str	r3, [r7, #24]
    portTickType xMyPeriod = xMyParameter->xPeriod;
   12524:	6a3b      	ldr	r3, [r7, #32]
   12526:	689b      	ldr	r3, [r3, #8]
   12528:	617b      	str	r3, [r7, #20]

    portBASE_TYPE i;
    portTickType xCurrentTime;
    
    // used for periodic task
    portTickType xLastExecutionTime = 0; 
   1252a:	2300      	movs	r3, #0
   1252c:	60fb      	str	r3, [r7, #12]

    portBASE_TYPE xCount = 1;
   1252e:	2301      	movs	r3, #1
   12530:	62bb      	str	r3, [r7, #40]	; 0x28
    portTickType xReadyTime = xCount * xMyPeriod;
   12532:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12534:	697a      	ldr	r2, [r7, #20]
   12536:	fb02 f303 	mul.w	r3, r2, r3
   1253a:	627b      	str	r3, [r7, #36]	; 0x24
    portTickType xDeadline ;
    while(1)
    {

#ifdef PREEMPTION
        vTaskSuspendAll();
   1253c:	f7f1 fada 	bl	3af4 <vTaskSuspendAll>
        vPrintNumber(xMyId);
   12540:	69f8      	ldr	r0, [r7, #28]
   12542:	f7ff ff1d 	bl	12380 <vPrintNumber>
        vPrintNumber( xReadyTime );
   12546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12548:	4618      	mov	r0, r3
   1254a:	f7ff ff19 	bl	12380 <vPrintNumber>
        vPrintNumber( xTaskGetTickCount() );
   1254e:	f7f1 fb8b 	bl	3c68 <xTaskGetTickCount>
   12552:	4603      	mov	r3, r0
   12554:	4618      	mov	r0, r3
   12556:	f7ff ff13 	bl	12380 <vPrintNumber>
        xTaskResumeAll();
   1255a:	f7f1 fadd 	bl	3b18 <xTaskResumeAll>
        vPrintNumber(xMyId);
        vPrintNumber( xReadyTime );
        vPrintNumber( xTaskGetTickCount() );
        #endif

        for( i = 0; i < 200; ++ i )
   1255e:	2300      	movs	r3, #0
   12560:	62fb      	str	r3, [r7, #44]	; 0x2c
   12562:	e004      	b.n	1256e <vTimeTask+0x62>
        {
            xMyFun();
   12564:	69bb      	ldr	r3, [r7, #24]
   12566:	4798      	blx	r3
        vPrintNumber(xMyId);
        vPrintNumber( xReadyTime );
        vPrintNumber( xTaskGetTickCount() );
        #endif

        for( i = 0; i < 200; ++ i )
   12568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1256a:	3301      	adds	r3, #1
   1256c:	62fb      	str	r3, [r7, #44]	; 0x2c
   1256e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12570:	2bc7      	cmp	r3, #199	; 0xc7
   12572:	ddf7      	ble.n	12564 <vTimeTask+0x58>
        {
            xMyFun();
        }

        if(xTaskGetTickCount() > xLastExecutionTime + xMyPeriod)
   12574:	f7f1 fb78 	bl	3c68 <xTaskGetTickCount>
   12578:	4602      	mov	r2, r0
   1257a:	68f9      	ldr	r1, [r7, #12]
   1257c:	697b      	ldr	r3, [r7, #20]
   1257e:	440b      	add	r3, r1
   12580:	429a      	cmp	r2, r3
   12582:	d917      	bls.n	125b4 <vTimeTask+0xa8>
        {
            //vPrintNumber((xMyId+10)*2);
            vPrintNumber(xMyId);
   12584:	69f8      	ldr	r0, [r7, #28]
   12586:	f7ff fefb 	bl	12380 <vPrintNumber>
            vPrintString("miss deadline\n\r");
   1258a:	f643 1090 	movw	r0, #14736	; 0x3990
   1258e:	f2c0 0001 	movt	r0, #1
   12592:	f7ff fedb 	bl	1234c <vPrintString>
            miss[xMyId] ++;
   12596:	f64b 6304 	movw	r3, #48644	; 0xbe04
   1259a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1259e:	69fa      	ldr	r2, [r7, #28]
   125a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   125a4:	1c59      	adds	r1, r3, #1
   125a6:	f64b 6304 	movw	r3, #48644	; 0xbe04
   125aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125ae:	69fa      	ldr	r2, [r7, #28]
   125b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        }

        xCount ++;
   125b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   125b6:	3301      	adds	r3, #1
   125b8:	62bb      	str	r3, [r7, #40]	; 0x28
        xReadyTime = xCount * xMyPeriod;
   125ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
   125bc:	697a      	ldr	r2, [r7, #20]
   125be:	fb02 f303 	mul.w	r3, r2, r3
   125c2:	627b      	str	r3, [r7, #36]	; 0x24
        xDeadline = xReadyTime ;
   125c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   125c6:	613b      	str	r3, [r7, #16]


#ifdef PREEMPTION
        vTaskSuspendAll();
   125c8:	f7f1 fa94 	bl	3af4 <vTaskSuspendAll>
        vPrintNumber((xMyId + 10) * 3);
   125cc:	69fb      	ldr	r3, [r7, #28]
   125ce:	f103 020a 	add.w	r2, r3, #10
   125d2:	4613      	mov	r3, r2
   125d4:	005b      	lsls	r3, r3, #1
   125d6:	4413      	add	r3, r2
   125d8:	4618      	mov	r0, r3
   125da:	f7ff fed1 	bl	12380 <vPrintNumber>
        vPrintNumber( xDeadline );
   125de:	693b      	ldr	r3, [r7, #16]
   125e0:	4618      	mov	r0, r3
   125e2:	f7ff fecd 	bl	12380 <vPrintNumber>
        vPrintNumber( xTaskGetTickCount() );
   125e6:	f7f1 fb3f 	bl	3c68 <xTaskGetTickCount>
   125ea:	4603      	mov	r3, r0
   125ec:	4618      	mov	r0, r3
   125ee:	f7ff fec7 	bl	12380 <vPrintNumber>
        xTaskResumeAll();
   125f2:	f7f1 fa91 	bl	3b18 <xTaskResumeAll>
        vPrintNumber(xTaskGetTickCount());
        vPrintNumber( xDeadline );
        vPrintNumber( (xMyId + 10)* 3 );
        #endif
      
        vTaskDelayUntil( &xLastExecutionTime, xMyPeriod / portTICK_RATE_MS );
   125f6:	f107 030c 	add.w	r3, r7, #12
   125fa:	4618      	mov	r0, r3
   125fc:	6979      	ldr	r1, [r7, #20]
   125fe:	f7f0 ffe5 	bl	35cc <vTaskDelayUntil>
    }
   12602:	e79b      	b.n	1253c <vTimeTask+0x30>

00012604 <main>:
}


int main()
{
   12604:	b590      	push	{r4, r7, lr}
   12606:	b087      	sub	sp, #28
   12608:	af04      	add	r7, sp, #16

	init_led();
   1260a:	f7ff fd95 	bl	12138 <init_led>
	init_rs232();
   1260e:	f7ff fdf5 	bl	121fc <init_rs232>
	enable_rs232_interrupts();
   12612:	f7ff fe39 	bl	12288 <enable_rs232_interrupts>
	enable_rs232();
   12616:	f7ff fe59 	bl	122cc <enable_rs232>

    vParametersInit();
   1261a:	f7ff ff2b 	bl	12474 <vParametersInit>
    vPapabenchInit();
   1261e:	f7f0 fa3f 	bl	2aa0 <vPapabenchInit>

    int i;
    for( i = 0; i < NUMBEROFTASK; ++ i )
   12622:	2300      	movs	r3, #0
   12624:	607b      	str	r3, [r7, #4]
   12626:	e031      	b.n	1268c <main+0x88>
    {
        if(i == 0 || i == 1 || i == 5)
        {
            //continue;
        }
        xTaskCreate(vTimeTask, pcNameOfTask[i],  256, (void *) &parameters[i], xTaskPrio[i], &xTaskOfHandle[i]);
   12628:	f240 0390 	movw	r3, #144	; 0x90
   1262c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12630:	687a      	ldr	r2, [r7, #4]
   12632:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   12636:	687a      	ldr	r2, [r7, #4]
   12638:	4613      	mov	r3, r2
   1263a:	005b      	lsls	r3, r3, #1
   1263c:	4413      	add	r3, r2
   1263e:	009b      	lsls	r3, r3, #2
   12640:	f64b 5234 	movw	r2, #48436	; 0xbd34
   12644:	f2c2 0204 	movt	r2, #8196	; 0x2004
   12648:	189c      	adds	r4, r3, r2
   1264a:	f240 0328 	movw	r3, #40	; 0x28
   1264e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12652:	687a      	ldr	r2, [r7, #4]
   12654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   12658:	461a      	mov	r2, r3
   1265a:	687b      	ldr	r3, [r7, #4]
   1265c:	0098      	lsls	r0, r3, #2
   1265e:	f64b 53d0 	movw	r3, #48592	; 0xbdd0
   12662:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12666:	4403      	add	r3, r0
   12668:	9200      	str	r2, [sp, #0]
   1266a:	9301      	str	r3, [sp, #4]
   1266c:	2300      	movs	r3, #0
   1266e:	9302      	str	r3, [sp, #8]
   12670:	2300      	movs	r3, #0
   12672:	9303      	str	r3, [sp, #12]
   12674:	f242 500d 	movw	r0, #9485	; 0x250d
   12678:	f2c0 0001 	movt	r0, #1
   1267c:	f44f 7280 	mov.w	r2, #256	; 0x100
   12680:	4623      	mov	r3, r4
   12682:	f7f0 fe79 	bl	3378 <xTaskGenericCreate>

    vParametersInit();
    vPapabenchInit();

    int i;
    for( i = 0; i < NUMBEROFTASK; ++ i )
   12686:	687b      	ldr	r3, [r7, #4]
   12688:	3301      	adds	r3, #1
   1268a:	607b      	str	r3, [r7, #4]
   1268c:	687b      	ldr	r3, [r7, #4]
   1268e:	2b0c      	cmp	r3, #12
   12690:	ddca      	ble.n	12628 <main+0x24>
        }
        xTaskCreate(vTimeTask, pcNameOfTask[i],  256, (void *) &parameters[i], xTaskPrio[i], &xTaskOfHandle[i]);
    }

	/* Start running the tasks. */
	vTaskStartScheduler();
   12692:	f7f1 f9ef 	bl	3a74 <vTaskStartScheduler>

	return 0;
   12696:	2300      	movs	r3, #0
}
   12698:	4618      	mov	r0, r3
   1269a:	370c      	adds	r7, #12
   1269c:	46bd      	mov	sp, r7
   1269e:	bd90      	pop	{r4, r7, pc}

000126a0 <myTraceCreate>:

void myTraceCreate      (){
   126a0:	b480      	push	{r7}
   126a2:	af00      	add	r7, sp, #0
}
   126a4:	46bd      	mov	sp, r7
   126a6:	f85d 7b04 	ldr.w	r7, [sp], #4
   126aa:	4770      	bx	lr

000126ac <myTraceSwitchedIn>:

void myTraceSwitchedIn  (){
   126ac:	b480      	push	{r7}
   126ae:	af00      	add	r7, sp, #0
}
   126b0:	46bd      	mov	sp, r7
   126b2:	f85d 7b04 	ldr.w	r7, [sp], #4
   126b6:	4770      	bx	lr

000126b8 <myTraceSwitchedOut>:

void myTraceSwitchedOut	(){
   126b8:	b480      	push	{r7}
   126ba:	af00      	add	r7, sp, #0
}
   126bc:	46bd      	mov	sp, r7
   126be:	f85d 7b04 	ldr.w	r7, [sp], #4
   126c2:	4770      	bx	lr

000126c4 <myTraceGetTick>:

inline float myTraceGetTick(){
   126c4:	b480      	push	{r7}
   126c6:	af00      	add	r7, sp, #0
}
   126c8:	4618      	mov	r0, r3
   126ca:	46bd      	mov	sp, r7
   126cc:	f85d 7b04 	ldr.w	r7, [sp], #4
   126d0:	4770      	bx	lr
   126d2:	bf00      	nop

000126d4 <myTraceGetTimeMillisecond>:

inline unsigned long myTraceGetTimeMillisecond(){
   126d4:	b480      	push	{r7}
   126d6:	af00      	add	r7, sp, #0
	//return (xTaskGetTickCountFromISR() + myTraceGetTick()) * 1000 / configTICK_RATE_HZ;
}
   126d8:	4618      	mov	r0, r3
   126da:	46bd      	mov	sp, r7
   126dc:	f85d 7b04 	ldr.w	r7, [sp], #4
   126e0:	4770      	bx	lr
   126e2:	bf00      	nop

000126e4 <vApplicationTickHook>:

void vApplicationTickHook()
{
   126e4:	b480      	push	{r7}
   126e6:	af00      	add	r7, sp, #0

}
   126e8:	46bd      	mov	sp, r7
   126ea:	f85d 7b04 	ldr.w	r7, [sp], #4
   126ee:	4770      	bx	lr

000126f0 <__aeabi_drsub>:
   126f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   126f4:	e002      	b.n	126fc <__adddf3>
   126f6:	bf00      	nop

000126f8 <__aeabi_dsub>:
   126f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000126fc <__adddf3>:
   126fc:	b530      	push	{r4, r5, lr}
   126fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
   12702:	ea4f 0543 	mov.w	r5, r3, lsl #1
   12706:	ea94 0f05 	teq	r4, r5
   1270a:	bf08      	it	eq
   1270c:	ea90 0f02 	teqeq	r0, r2
   12710:	bf1f      	itttt	ne
   12712:	ea54 0c00 	orrsne.w	ip, r4, r0
   12716:	ea55 0c02 	orrsne.w	ip, r5, r2
   1271a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1271e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   12722:	f000 80e2 	beq.w	128ea <__adddf3+0x1ee>
   12726:	ea4f 5454 	mov.w	r4, r4, lsr #21
   1272a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1272e:	bfb8      	it	lt
   12730:	426d      	neglt	r5, r5
   12732:	dd0c      	ble.n	1274e <__adddf3+0x52>
   12734:	442c      	add	r4, r5
   12736:	ea80 0202 	eor.w	r2, r0, r2
   1273a:	ea81 0303 	eor.w	r3, r1, r3
   1273e:	ea82 0000 	eor.w	r0, r2, r0
   12742:	ea83 0101 	eor.w	r1, r3, r1
   12746:	ea80 0202 	eor.w	r2, r0, r2
   1274a:	ea81 0303 	eor.w	r3, r1, r3
   1274e:	2d36      	cmp	r5, #54	; 0x36
   12750:	bf88      	it	hi
   12752:	bd30      	pophi	{r4, r5, pc}
   12754:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   12758:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1275c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   12760:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   12764:	d002      	beq.n	1276c <__adddf3+0x70>
   12766:	4240      	negs	r0, r0
   12768:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1276c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   12770:	ea4f 3303 	mov.w	r3, r3, lsl #12
   12774:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   12778:	d002      	beq.n	12780 <__adddf3+0x84>
   1277a:	4252      	negs	r2, r2
   1277c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   12780:	ea94 0f05 	teq	r4, r5
   12784:	f000 80a7 	beq.w	128d6 <__adddf3+0x1da>
   12788:	f1a4 0401 	sub.w	r4, r4, #1
   1278c:	f1d5 0e20 	rsbs	lr, r5, #32
   12790:	db0d      	blt.n	127ae <__adddf3+0xb2>
   12792:	fa02 fc0e 	lsl.w	ip, r2, lr
   12796:	fa22 f205 	lsr.w	r2, r2, r5
   1279a:	1880      	adds	r0, r0, r2
   1279c:	f141 0100 	adc.w	r1, r1, #0
   127a0:	fa03 f20e 	lsl.w	r2, r3, lr
   127a4:	1880      	adds	r0, r0, r2
   127a6:	fa43 f305 	asr.w	r3, r3, r5
   127aa:	4159      	adcs	r1, r3
   127ac:	e00e      	b.n	127cc <__adddf3+0xd0>
   127ae:	f1a5 0520 	sub.w	r5, r5, #32
   127b2:	f10e 0e20 	add.w	lr, lr, #32
   127b6:	2a01      	cmp	r2, #1
   127b8:	fa03 fc0e 	lsl.w	ip, r3, lr
   127bc:	bf28      	it	cs
   127be:	f04c 0c02 	orrcs.w	ip, ip, #2
   127c2:	fa43 f305 	asr.w	r3, r3, r5
   127c6:	18c0      	adds	r0, r0, r3
   127c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   127cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   127d0:	d507      	bpl.n	127e2 <__adddf3+0xe6>
   127d2:	f04f 0e00 	mov.w	lr, #0
   127d6:	f1dc 0c00 	rsbs	ip, ip, #0
   127da:	eb7e 0000 	sbcs.w	r0, lr, r0
   127de:	eb6e 0101 	sbc.w	r1, lr, r1
   127e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   127e6:	d31b      	bcc.n	12820 <__adddf3+0x124>
   127e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   127ec:	d30c      	bcc.n	12808 <__adddf3+0x10c>
   127ee:	0849      	lsrs	r1, r1, #1
   127f0:	ea5f 0030 	movs.w	r0, r0, rrx
   127f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   127f8:	f104 0401 	add.w	r4, r4, #1
   127fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
   12800:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   12804:	f080 809a 	bcs.w	1293c <__adddf3+0x240>
   12808:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1280c:	bf08      	it	eq
   1280e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   12812:	f150 0000 	adcs.w	r0, r0, #0
   12816:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1281a:	ea41 0105 	orr.w	r1, r1, r5
   1281e:	bd30      	pop	{r4, r5, pc}
   12820:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   12824:	4140      	adcs	r0, r0
   12826:	eb41 0101 	adc.w	r1, r1, r1
   1282a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1282e:	f1a4 0401 	sub.w	r4, r4, #1
   12832:	d1e9      	bne.n	12808 <__adddf3+0x10c>
   12834:	f091 0f00 	teq	r1, #0
   12838:	bf04      	itt	eq
   1283a:	4601      	moveq	r1, r0
   1283c:	2000      	moveq	r0, #0
   1283e:	fab1 f381 	clz	r3, r1
   12842:	bf08      	it	eq
   12844:	3320      	addeq	r3, #32
   12846:	f1a3 030b 	sub.w	r3, r3, #11
   1284a:	f1b3 0220 	subs.w	r2, r3, #32
   1284e:	da0c      	bge.n	1286a <__adddf3+0x16e>
   12850:	320c      	adds	r2, #12
   12852:	dd08      	ble.n	12866 <__adddf3+0x16a>
   12854:	f102 0c14 	add.w	ip, r2, #20
   12858:	f1c2 020c 	rsb	r2, r2, #12
   1285c:	fa01 f00c 	lsl.w	r0, r1, ip
   12860:	fa21 f102 	lsr.w	r1, r1, r2
   12864:	e00c      	b.n	12880 <__adddf3+0x184>
   12866:	f102 0214 	add.w	r2, r2, #20
   1286a:	bfd8      	it	le
   1286c:	f1c2 0c20 	rsble	ip, r2, #32
   12870:	fa01 f102 	lsl.w	r1, r1, r2
   12874:	fa20 fc0c 	lsr.w	ip, r0, ip
   12878:	bfdc      	itt	le
   1287a:	ea41 010c 	orrle.w	r1, r1, ip
   1287e:	4090      	lslle	r0, r2
   12880:	1ae4      	subs	r4, r4, r3
   12882:	bfa2      	ittt	ge
   12884:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   12888:	4329      	orrge	r1, r5
   1288a:	bd30      	popge	{r4, r5, pc}
   1288c:	ea6f 0404 	mvn.w	r4, r4
   12890:	3c1f      	subs	r4, #31
   12892:	da1c      	bge.n	128ce <__adddf3+0x1d2>
   12894:	340c      	adds	r4, #12
   12896:	dc0e      	bgt.n	128b6 <__adddf3+0x1ba>
   12898:	f104 0414 	add.w	r4, r4, #20
   1289c:	f1c4 0220 	rsb	r2, r4, #32
   128a0:	fa20 f004 	lsr.w	r0, r0, r4
   128a4:	fa01 f302 	lsl.w	r3, r1, r2
   128a8:	ea40 0003 	orr.w	r0, r0, r3
   128ac:	fa21 f304 	lsr.w	r3, r1, r4
   128b0:	ea45 0103 	orr.w	r1, r5, r3
   128b4:	bd30      	pop	{r4, r5, pc}
   128b6:	f1c4 040c 	rsb	r4, r4, #12
   128ba:	f1c4 0220 	rsb	r2, r4, #32
   128be:	fa20 f002 	lsr.w	r0, r0, r2
   128c2:	fa01 f304 	lsl.w	r3, r1, r4
   128c6:	ea40 0003 	orr.w	r0, r0, r3
   128ca:	4629      	mov	r1, r5
   128cc:	bd30      	pop	{r4, r5, pc}
   128ce:	fa21 f004 	lsr.w	r0, r1, r4
   128d2:	4629      	mov	r1, r5
   128d4:	bd30      	pop	{r4, r5, pc}
   128d6:	f094 0f00 	teq	r4, #0
   128da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   128de:	bf06      	itte	eq
   128e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   128e4:	3401      	addeq	r4, #1
   128e6:	3d01      	subne	r5, #1
   128e8:	e74e      	b.n	12788 <__adddf3+0x8c>
   128ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   128ee:	bf18      	it	ne
   128f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   128f4:	d029      	beq.n	1294a <__adddf3+0x24e>
   128f6:	ea94 0f05 	teq	r4, r5
   128fa:	bf08      	it	eq
   128fc:	ea90 0f02 	teqeq	r0, r2
   12900:	d005      	beq.n	1290e <__adddf3+0x212>
   12902:	ea54 0c00 	orrs.w	ip, r4, r0
   12906:	bf04      	itt	eq
   12908:	4619      	moveq	r1, r3
   1290a:	4610      	moveq	r0, r2
   1290c:	bd30      	pop	{r4, r5, pc}
   1290e:	ea91 0f03 	teq	r1, r3
   12912:	bf1e      	ittt	ne
   12914:	2100      	movne	r1, #0
   12916:	2000      	movne	r0, #0
   12918:	bd30      	popne	{r4, r5, pc}
   1291a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1291e:	d105      	bne.n	1292c <__adddf3+0x230>
   12920:	0040      	lsls	r0, r0, #1
   12922:	4149      	adcs	r1, r1
   12924:	bf28      	it	cs
   12926:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1292a:	bd30      	pop	{r4, r5, pc}
   1292c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   12930:	bf3c      	itt	cc
   12932:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   12936:	bd30      	popcc	{r4, r5, pc}
   12938:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1293c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   12940:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   12944:	f04f 0000 	mov.w	r0, #0
   12948:	bd30      	pop	{r4, r5, pc}
   1294a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1294e:	bf1a      	itte	ne
   12950:	4619      	movne	r1, r3
   12952:	4610      	movne	r0, r2
   12954:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   12958:	bf1c      	itt	ne
   1295a:	460b      	movne	r3, r1
   1295c:	4602      	movne	r2, r0
   1295e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   12962:	bf06      	itte	eq
   12964:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   12968:	ea91 0f03 	teqeq	r1, r3
   1296c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   12970:	bd30      	pop	{r4, r5, pc}
   12972:	bf00      	nop

00012974 <__aeabi_ui2d>:
   12974:	f090 0f00 	teq	r0, #0
   12978:	bf04      	itt	eq
   1297a:	2100      	moveq	r1, #0
   1297c:	4770      	bxeq	lr
   1297e:	b530      	push	{r4, r5, lr}
   12980:	f44f 6480 	mov.w	r4, #1024	; 0x400
   12984:	f104 0432 	add.w	r4, r4, #50	; 0x32
   12988:	f04f 0500 	mov.w	r5, #0
   1298c:	f04f 0100 	mov.w	r1, #0
   12990:	e750      	b.n	12834 <__adddf3+0x138>
   12992:	bf00      	nop

00012994 <__aeabi_i2d>:
   12994:	f090 0f00 	teq	r0, #0
   12998:	bf04      	itt	eq
   1299a:	2100      	moveq	r1, #0
   1299c:	4770      	bxeq	lr
   1299e:	b530      	push	{r4, r5, lr}
   129a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   129a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   129a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   129ac:	bf48      	it	mi
   129ae:	4240      	negmi	r0, r0
   129b0:	f04f 0100 	mov.w	r1, #0
   129b4:	e73e      	b.n	12834 <__adddf3+0x138>
   129b6:	bf00      	nop

000129b8 <__aeabi_f2d>:
   129b8:	0042      	lsls	r2, r0, #1
   129ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
   129be:	ea4f 0131 	mov.w	r1, r1, rrx
   129c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   129c6:	bf1f      	itttt	ne
   129c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   129cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   129d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   129d4:	4770      	bxne	lr
   129d6:	f092 0f00 	teq	r2, #0
   129da:	bf14      	ite	ne
   129dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   129e0:	4770      	bxeq	lr
   129e2:	b530      	push	{r4, r5, lr}
   129e4:	f44f 7460 	mov.w	r4, #896	; 0x380
   129e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   129ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   129f0:	e720      	b.n	12834 <__adddf3+0x138>
   129f2:	bf00      	nop

000129f4 <__aeabi_ul2d>:
   129f4:	ea50 0201 	orrs.w	r2, r0, r1
   129f8:	bf08      	it	eq
   129fa:	4770      	bxeq	lr
   129fc:	b530      	push	{r4, r5, lr}
   129fe:	f04f 0500 	mov.w	r5, #0
   12a02:	e00a      	b.n	12a1a <__aeabi_l2d+0x16>

00012a04 <__aeabi_l2d>:
   12a04:	ea50 0201 	orrs.w	r2, r0, r1
   12a08:	bf08      	it	eq
   12a0a:	4770      	bxeq	lr
   12a0c:	b530      	push	{r4, r5, lr}
   12a0e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   12a12:	d502      	bpl.n	12a1a <__aeabi_l2d+0x16>
   12a14:	4240      	negs	r0, r0
   12a16:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   12a1a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   12a1e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   12a22:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   12a26:	f43f aedc 	beq.w	127e2 <__adddf3+0xe6>
   12a2a:	f04f 0203 	mov.w	r2, #3
   12a2e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   12a32:	bf18      	it	ne
   12a34:	3203      	addne	r2, #3
   12a36:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   12a3a:	bf18      	it	ne
   12a3c:	3203      	addne	r2, #3
   12a3e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   12a42:	f1c2 0320 	rsb	r3, r2, #32
   12a46:	fa00 fc03 	lsl.w	ip, r0, r3
   12a4a:	fa20 f002 	lsr.w	r0, r0, r2
   12a4e:	fa01 fe03 	lsl.w	lr, r1, r3
   12a52:	ea40 000e 	orr.w	r0, r0, lr
   12a56:	fa21 f102 	lsr.w	r1, r1, r2
   12a5a:	4414      	add	r4, r2
   12a5c:	e6c1      	b.n	127e2 <__adddf3+0xe6>
   12a5e:	bf00      	nop

00012a60 <__aeabi_dmul>:
   12a60:	b570      	push	{r4, r5, r6, lr}
   12a62:	f04f 0cff 	mov.w	ip, #255	; 0xff
   12a66:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   12a6a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   12a6e:	bf1d      	ittte	ne
   12a70:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   12a74:	ea94 0f0c 	teqne	r4, ip
   12a78:	ea95 0f0c 	teqne	r5, ip
   12a7c:	f000 f8de 	bleq	12c3c <__aeabi_dmul+0x1dc>
   12a80:	442c      	add	r4, r5
   12a82:	ea81 0603 	eor.w	r6, r1, r3
   12a86:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   12a8a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   12a8e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   12a92:	bf18      	it	ne
   12a94:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   12a98:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   12a9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   12aa0:	d038      	beq.n	12b14 <__aeabi_dmul+0xb4>
   12aa2:	fba0 ce02 	umull	ip, lr, r0, r2
   12aa6:	f04f 0500 	mov.w	r5, #0
   12aaa:	fbe1 e502 	umlal	lr, r5, r1, r2
   12aae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   12ab2:	fbe0 e503 	umlal	lr, r5, r0, r3
   12ab6:	f04f 0600 	mov.w	r6, #0
   12aba:	fbe1 5603 	umlal	r5, r6, r1, r3
   12abe:	f09c 0f00 	teq	ip, #0
   12ac2:	bf18      	it	ne
   12ac4:	f04e 0e01 	orrne.w	lr, lr, #1
   12ac8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   12acc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   12ad0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   12ad4:	d204      	bcs.n	12ae0 <__aeabi_dmul+0x80>
   12ad6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   12ada:	416d      	adcs	r5, r5
   12adc:	eb46 0606 	adc.w	r6, r6, r6
   12ae0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   12ae4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   12ae8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   12aec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   12af0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   12af4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   12af8:	bf88      	it	hi
   12afa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   12afe:	d81e      	bhi.n	12b3e <__aeabi_dmul+0xde>
   12b00:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   12b04:	bf08      	it	eq
   12b06:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   12b0a:	f150 0000 	adcs.w	r0, r0, #0
   12b0e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   12b12:	bd70      	pop	{r4, r5, r6, pc}
   12b14:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   12b18:	ea46 0101 	orr.w	r1, r6, r1
   12b1c:	ea40 0002 	orr.w	r0, r0, r2
   12b20:	ea81 0103 	eor.w	r1, r1, r3
   12b24:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   12b28:	bfc2      	ittt	gt
   12b2a:	ebd4 050c 	rsbsgt	r5, r4, ip
   12b2e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   12b32:	bd70      	popgt	{r4, r5, r6, pc}
   12b34:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   12b38:	f04f 0e00 	mov.w	lr, #0
   12b3c:	3c01      	subs	r4, #1
   12b3e:	f300 80ab 	bgt.w	12c98 <__aeabi_dmul+0x238>
   12b42:	f114 0f36 	cmn.w	r4, #54	; 0x36
   12b46:	bfde      	ittt	le
   12b48:	2000      	movle	r0, #0
   12b4a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   12b4e:	bd70      	pople	{r4, r5, r6, pc}
   12b50:	f1c4 0400 	rsb	r4, r4, #0
   12b54:	3c20      	subs	r4, #32
   12b56:	da35      	bge.n	12bc4 <__aeabi_dmul+0x164>
   12b58:	340c      	adds	r4, #12
   12b5a:	dc1b      	bgt.n	12b94 <__aeabi_dmul+0x134>
   12b5c:	f104 0414 	add.w	r4, r4, #20
   12b60:	f1c4 0520 	rsb	r5, r4, #32
   12b64:	fa00 f305 	lsl.w	r3, r0, r5
   12b68:	fa20 f004 	lsr.w	r0, r0, r4
   12b6c:	fa01 f205 	lsl.w	r2, r1, r5
   12b70:	ea40 0002 	orr.w	r0, r0, r2
   12b74:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   12b78:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   12b7c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   12b80:	fa21 f604 	lsr.w	r6, r1, r4
   12b84:	eb42 0106 	adc.w	r1, r2, r6
   12b88:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   12b8c:	bf08      	it	eq
   12b8e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   12b92:	bd70      	pop	{r4, r5, r6, pc}
   12b94:	f1c4 040c 	rsb	r4, r4, #12
   12b98:	f1c4 0520 	rsb	r5, r4, #32
   12b9c:	fa00 f304 	lsl.w	r3, r0, r4
   12ba0:	fa20 f005 	lsr.w	r0, r0, r5
   12ba4:	fa01 f204 	lsl.w	r2, r1, r4
   12ba8:	ea40 0002 	orr.w	r0, r0, r2
   12bac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   12bb0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   12bb4:	f141 0100 	adc.w	r1, r1, #0
   12bb8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   12bbc:	bf08      	it	eq
   12bbe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   12bc2:	bd70      	pop	{r4, r5, r6, pc}
   12bc4:	f1c4 0520 	rsb	r5, r4, #32
   12bc8:	fa00 f205 	lsl.w	r2, r0, r5
   12bcc:	ea4e 0e02 	orr.w	lr, lr, r2
   12bd0:	fa20 f304 	lsr.w	r3, r0, r4
   12bd4:	fa01 f205 	lsl.w	r2, r1, r5
   12bd8:	ea43 0302 	orr.w	r3, r3, r2
   12bdc:	fa21 f004 	lsr.w	r0, r1, r4
   12be0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   12be4:	fa21 f204 	lsr.w	r2, r1, r4
   12be8:	ea20 0002 	bic.w	r0, r0, r2
   12bec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   12bf0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   12bf4:	bf08      	it	eq
   12bf6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   12bfa:	bd70      	pop	{r4, r5, r6, pc}
   12bfc:	f094 0f00 	teq	r4, #0
   12c00:	d10f      	bne.n	12c22 <__aeabi_dmul+0x1c2>
   12c02:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   12c06:	0040      	lsls	r0, r0, #1
   12c08:	eb41 0101 	adc.w	r1, r1, r1
   12c0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   12c10:	bf08      	it	eq
   12c12:	3c01      	subeq	r4, #1
   12c14:	d0f7      	beq.n	12c06 <__aeabi_dmul+0x1a6>
   12c16:	ea41 0106 	orr.w	r1, r1, r6
   12c1a:	f095 0f00 	teq	r5, #0
   12c1e:	bf18      	it	ne
   12c20:	4770      	bxne	lr
   12c22:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   12c26:	0052      	lsls	r2, r2, #1
   12c28:	eb43 0303 	adc.w	r3, r3, r3
   12c2c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   12c30:	bf08      	it	eq
   12c32:	3d01      	subeq	r5, #1
   12c34:	d0f7      	beq.n	12c26 <__aeabi_dmul+0x1c6>
   12c36:	ea43 0306 	orr.w	r3, r3, r6
   12c3a:	4770      	bx	lr
   12c3c:	ea94 0f0c 	teq	r4, ip
   12c40:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   12c44:	bf18      	it	ne
   12c46:	ea95 0f0c 	teqne	r5, ip
   12c4a:	d00c      	beq.n	12c66 <__aeabi_dmul+0x206>
   12c4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   12c50:	bf18      	it	ne
   12c52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   12c56:	d1d1      	bne.n	12bfc <__aeabi_dmul+0x19c>
   12c58:	ea81 0103 	eor.w	r1, r1, r3
   12c5c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   12c60:	f04f 0000 	mov.w	r0, #0
   12c64:	bd70      	pop	{r4, r5, r6, pc}
   12c66:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   12c6a:	bf06      	itte	eq
   12c6c:	4610      	moveq	r0, r2
   12c6e:	4619      	moveq	r1, r3
   12c70:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   12c74:	d019      	beq.n	12caa <__aeabi_dmul+0x24a>
   12c76:	ea94 0f0c 	teq	r4, ip
   12c7a:	d102      	bne.n	12c82 <__aeabi_dmul+0x222>
   12c7c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   12c80:	d113      	bne.n	12caa <__aeabi_dmul+0x24a>
   12c82:	ea95 0f0c 	teq	r5, ip
   12c86:	d105      	bne.n	12c94 <__aeabi_dmul+0x234>
   12c88:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   12c8c:	bf1c      	itt	ne
   12c8e:	4610      	movne	r0, r2
   12c90:	4619      	movne	r1, r3
   12c92:	d10a      	bne.n	12caa <__aeabi_dmul+0x24a>
   12c94:	ea81 0103 	eor.w	r1, r1, r3
   12c98:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   12c9c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   12ca0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   12ca4:	f04f 0000 	mov.w	r0, #0
   12ca8:	bd70      	pop	{r4, r5, r6, pc}
   12caa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   12cae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   12cb2:	bd70      	pop	{r4, r5, r6, pc}

00012cb4 <__aeabi_ddiv>:
   12cb4:	b570      	push	{r4, r5, r6, lr}
   12cb6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   12cba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   12cbe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   12cc2:	bf1d      	ittte	ne
   12cc4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   12cc8:	ea94 0f0c 	teqne	r4, ip
   12ccc:	ea95 0f0c 	teqne	r5, ip
   12cd0:	f000 f8a7 	bleq	12e22 <__aeabi_ddiv+0x16e>
   12cd4:	eba4 0405 	sub.w	r4, r4, r5
   12cd8:	ea81 0e03 	eor.w	lr, r1, r3
   12cdc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   12ce0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   12ce4:	f000 8088 	beq.w	12df8 <__aeabi_ddiv+0x144>
   12ce8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   12cec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   12cf0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   12cf4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   12cf8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   12cfc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   12d00:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   12d04:	ea4f 2600 	mov.w	r6, r0, lsl #8
   12d08:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   12d0c:	429d      	cmp	r5, r3
   12d0e:	bf08      	it	eq
   12d10:	4296      	cmpeq	r6, r2
   12d12:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   12d16:	f504 7440 	add.w	r4, r4, #768	; 0x300
   12d1a:	d202      	bcs.n	12d22 <__aeabi_ddiv+0x6e>
   12d1c:	085b      	lsrs	r3, r3, #1
   12d1e:	ea4f 0232 	mov.w	r2, r2, rrx
   12d22:	1ab6      	subs	r6, r6, r2
   12d24:	eb65 0503 	sbc.w	r5, r5, r3
   12d28:	085b      	lsrs	r3, r3, #1
   12d2a:	ea4f 0232 	mov.w	r2, r2, rrx
   12d2e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   12d32:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   12d36:	ebb6 0e02 	subs.w	lr, r6, r2
   12d3a:	eb75 0e03 	sbcs.w	lr, r5, r3
   12d3e:	bf22      	ittt	cs
   12d40:	1ab6      	subcs	r6, r6, r2
   12d42:	4675      	movcs	r5, lr
   12d44:	ea40 000c 	orrcs.w	r0, r0, ip
   12d48:	085b      	lsrs	r3, r3, #1
   12d4a:	ea4f 0232 	mov.w	r2, r2, rrx
   12d4e:	ebb6 0e02 	subs.w	lr, r6, r2
   12d52:	eb75 0e03 	sbcs.w	lr, r5, r3
   12d56:	bf22      	ittt	cs
   12d58:	1ab6      	subcs	r6, r6, r2
   12d5a:	4675      	movcs	r5, lr
   12d5c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   12d60:	085b      	lsrs	r3, r3, #1
   12d62:	ea4f 0232 	mov.w	r2, r2, rrx
   12d66:	ebb6 0e02 	subs.w	lr, r6, r2
   12d6a:	eb75 0e03 	sbcs.w	lr, r5, r3
   12d6e:	bf22      	ittt	cs
   12d70:	1ab6      	subcs	r6, r6, r2
   12d72:	4675      	movcs	r5, lr
   12d74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   12d78:	085b      	lsrs	r3, r3, #1
   12d7a:	ea4f 0232 	mov.w	r2, r2, rrx
   12d7e:	ebb6 0e02 	subs.w	lr, r6, r2
   12d82:	eb75 0e03 	sbcs.w	lr, r5, r3
   12d86:	bf22      	ittt	cs
   12d88:	1ab6      	subcs	r6, r6, r2
   12d8a:	4675      	movcs	r5, lr
   12d8c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   12d90:	ea55 0e06 	orrs.w	lr, r5, r6
   12d94:	d018      	beq.n	12dc8 <__aeabi_ddiv+0x114>
   12d96:	ea4f 1505 	mov.w	r5, r5, lsl #4
   12d9a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   12d9e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   12da2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   12da6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   12daa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   12dae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   12db2:	d1c0      	bne.n	12d36 <__aeabi_ddiv+0x82>
   12db4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   12db8:	d10b      	bne.n	12dd2 <__aeabi_ddiv+0x11e>
   12dba:	ea41 0100 	orr.w	r1, r1, r0
   12dbe:	f04f 0000 	mov.w	r0, #0
   12dc2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   12dc6:	e7b6      	b.n	12d36 <__aeabi_ddiv+0x82>
   12dc8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   12dcc:	bf04      	itt	eq
   12dce:	4301      	orreq	r1, r0
   12dd0:	2000      	moveq	r0, #0
   12dd2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   12dd6:	bf88      	it	hi
   12dd8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   12ddc:	f63f aeaf 	bhi.w	12b3e <__aeabi_dmul+0xde>
   12de0:	ebb5 0c03 	subs.w	ip, r5, r3
   12de4:	bf04      	itt	eq
   12de6:	ebb6 0c02 	subseq.w	ip, r6, r2
   12dea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   12dee:	f150 0000 	adcs.w	r0, r0, #0
   12df2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   12df6:	bd70      	pop	{r4, r5, r6, pc}
   12df8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   12dfc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   12e00:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   12e04:	bfc2      	ittt	gt
   12e06:	ebd4 050c 	rsbsgt	r5, r4, ip
   12e0a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   12e0e:	bd70      	popgt	{r4, r5, r6, pc}
   12e10:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   12e14:	f04f 0e00 	mov.w	lr, #0
   12e18:	3c01      	subs	r4, #1
   12e1a:	e690      	b.n	12b3e <__aeabi_dmul+0xde>
   12e1c:	ea45 0e06 	orr.w	lr, r5, r6
   12e20:	e68d      	b.n	12b3e <__aeabi_dmul+0xde>
   12e22:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   12e26:	ea94 0f0c 	teq	r4, ip
   12e2a:	bf08      	it	eq
   12e2c:	ea95 0f0c 	teqeq	r5, ip
   12e30:	f43f af3b 	beq.w	12caa <__aeabi_dmul+0x24a>
   12e34:	ea94 0f0c 	teq	r4, ip
   12e38:	d10a      	bne.n	12e50 <__aeabi_ddiv+0x19c>
   12e3a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   12e3e:	f47f af34 	bne.w	12caa <__aeabi_dmul+0x24a>
   12e42:	ea95 0f0c 	teq	r5, ip
   12e46:	f47f af25 	bne.w	12c94 <__aeabi_dmul+0x234>
   12e4a:	4610      	mov	r0, r2
   12e4c:	4619      	mov	r1, r3
   12e4e:	e72c      	b.n	12caa <__aeabi_dmul+0x24a>
   12e50:	ea95 0f0c 	teq	r5, ip
   12e54:	d106      	bne.n	12e64 <__aeabi_ddiv+0x1b0>
   12e56:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   12e5a:	f43f aefd 	beq.w	12c58 <__aeabi_dmul+0x1f8>
   12e5e:	4610      	mov	r0, r2
   12e60:	4619      	mov	r1, r3
   12e62:	e722      	b.n	12caa <__aeabi_dmul+0x24a>
   12e64:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   12e68:	bf18      	it	ne
   12e6a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   12e6e:	f47f aec5 	bne.w	12bfc <__aeabi_dmul+0x19c>
   12e72:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   12e76:	f47f af0d 	bne.w	12c94 <__aeabi_dmul+0x234>
   12e7a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   12e7e:	f47f aeeb 	bne.w	12c58 <__aeabi_dmul+0x1f8>
   12e82:	e712      	b.n	12caa <__aeabi_dmul+0x24a>

00012e84 <__gedf2>:
   12e84:	f04f 3cff 	mov.w	ip, #4294967295
   12e88:	e006      	b.n	12e98 <__cmpdf2+0x4>
   12e8a:	bf00      	nop

00012e8c <__ledf2>:
   12e8c:	f04f 0c01 	mov.w	ip, #1
   12e90:	e002      	b.n	12e98 <__cmpdf2+0x4>
   12e92:	bf00      	nop

00012e94 <__cmpdf2>:
   12e94:	f04f 0c01 	mov.w	ip, #1
   12e98:	f84d cd04 	str.w	ip, [sp, #-4]!
   12e9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   12ea0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   12ea4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   12ea8:	bf18      	it	ne
   12eaa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   12eae:	d01b      	beq.n	12ee8 <__cmpdf2+0x54>
   12eb0:	b001      	add	sp, #4
   12eb2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   12eb6:	bf0c      	ite	eq
   12eb8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   12ebc:	ea91 0f03 	teqne	r1, r3
   12ec0:	bf02      	ittt	eq
   12ec2:	ea90 0f02 	teqeq	r0, r2
   12ec6:	2000      	moveq	r0, #0
   12ec8:	4770      	bxeq	lr
   12eca:	f110 0f00 	cmn.w	r0, #0
   12ece:	ea91 0f03 	teq	r1, r3
   12ed2:	bf58      	it	pl
   12ed4:	4299      	cmppl	r1, r3
   12ed6:	bf08      	it	eq
   12ed8:	4290      	cmpeq	r0, r2
   12eda:	bf2c      	ite	cs
   12edc:	17d8      	asrcs	r0, r3, #31
   12ede:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   12ee2:	f040 0001 	orr.w	r0, r0, #1
   12ee6:	4770      	bx	lr
   12ee8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   12eec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   12ef0:	d102      	bne.n	12ef8 <__cmpdf2+0x64>
   12ef2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   12ef6:	d107      	bne.n	12f08 <__cmpdf2+0x74>
   12ef8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   12efc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   12f00:	d1d6      	bne.n	12eb0 <__cmpdf2+0x1c>
   12f02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   12f06:	d0d3      	beq.n	12eb0 <__cmpdf2+0x1c>
   12f08:	f85d 0b04 	ldr.w	r0, [sp], #4
   12f0c:	4770      	bx	lr
   12f0e:	bf00      	nop

00012f10 <__aeabi_cdrcmple>:
   12f10:	4684      	mov	ip, r0
   12f12:	4610      	mov	r0, r2
   12f14:	4662      	mov	r2, ip
   12f16:	468c      	mov	ip, r1
   12f18:	4619      	mov	r1, r3
   12f1a:	4663      	mov	r3, ip
   12f1c:	e000      	b.n	12f20 <__aeabi_cdcmpeq>
   12f1e:	bf00      	nop

00012f20 <__aeabi_cdcmpeq>:
   12f20:	b501      	push	{r0, lr}
   12f22:	f7ff ffb7 	bl	12e94 <__cmpdf2>
   12f26:	2800      	cmp	r0, #0
   12f28:	bf48      	it	mi
   12f2a:	f110 0f00 	cmnmi.w	r0, #0
   12f2e:	bd01      	pop	{r0, pc}

00012f30 <__aeabi_dcmpeq>:
   12f30:	f84d ed08 	str.w	lr, [sp, #-8]!
   12f34:	f7ff fff4 	bl	12f20 <__aeabi_cdcmpeq>
   12f38:	bf0c      	ite	eq
   12f3a:	2001      	moveq	r0, #1
   12f3c:	2000      	movne	r0, #0
   12f3e:	f85d fb08 	ldr.w	pc, [sp], #8
   12f42:	bf00      	nop

00012f44 <__aeabi_dcmplt>:
   12f44:	f84d ed08 	str.w	lr, [sp, #-8]!
   12f48:	f7ff ffea 	bl	12f20 <__aeabi_cdcmpeq>
   12f4c:	bf34      	ite	cc
   12f4e:	2001      	movcc	r0, #1
   12f50:	2000      	movcs	r0, #0
   12f52:	f85d fb08 	ldr.w	pc, [sp], #8
   12f56:	bf00      	nop

00012f58 <__aeabi_dcmple>:
   12f58:	f84d ed08 	str.w	lr, [sp, #-8]!
   12f5c:	f7ff ffe0 	bl	12f20 <__aeabi_cdcmpeq>
   12f60:	bf94      	ite	ls
   12f62:	2001      	movls	r0, #1
   12f64:	2000      	movhi	r0, #0
   12f66:	f85d fb08 	ldr.w	pc, [sp], #8
   12f6a:	bf00      	nop

00012f6c <__aeabi_dcmpge>:
   12f6c:	f84d ed08 	str.w	lr, [sp, #-8]!
   12f70:	f7ff ffce 	bl	12f10 <__aeabi_cdrcmple>
   12f74:	bf94      	ite	ls
   12f76:	2001      	movls	r0, #1
   12f78:	2000      	movhi	r0, #0
   12f7a:	f85d fb08 	ldr.w	pc, [sp], #8
   12f7e:	bf00      	nop

00012f80 <__aeabi_dcmpgt>:
   12f80:	f84d ed08 	str.w	lr, [sp, #-8]!
   12f84:	f7ff ffc4 	bl	12f10 <__aeabi_cdrcmple>
   12f88:	bf34      	ite	cc
   12f8a:	2001      	movcc	r0, #1
   12f8c:	2000      	movcs	r0, #0
   12f8e:	f85d fb08 	ldr.w	pc, [sp], #8
   12f92:	bf00      	nop

00012f94 <__aeabi_d2iz>:
   12f94:	ea4f 0241 	mov.w	r2, r1, lsl #1
   12f98:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   12f9c:	d215      	bcs.n	12fca <__aeabi_d2iz+0x36>
   12f9e:	d511      	bpl.n	12fc4 <__aeabi_d2iz+0x30>
   12fa0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   12fa4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   12fa8:	d912      	bls.n	12fd0 <__aeabi_d2iz+0x3c>
   12faa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   12fae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   12fb2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   12fb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   12fba:	fa23 f002 	lsr.w	r0, r3, r2
   12fbe:	bf18      	it	ne
   12fc0:	4240      	negne	r0, r0
   12fc2:	4770      	bx	lr
   12fc4:	f04f 0000 	mov.w	r0, #0
   12fc8:	4770      	bx	lr
   12fca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   12fce:	d105      	bne.n	12fdc <__aeabi_d2iz+0x48>
   12fd0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   12fd4:	bf08      	it	eq
   12fd6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   12fda:	4770      	bx	lr
   12fdc:	f04f 0000 	mov.w	r0, #0
   12fe0:	4770      	bx	lr
   12fe2:	bf00      	nop

00012fe4 <__aeabi_d2uiz>:
   12fe4:	004a      	lsls	r2, r1, #1
   12fe6:	d211      	bcs.n	1300c <__aeabi_d2uiz+0x28>
   12fe8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   12fec:	d211      	bcs.n	13012 <__aeabi_d2uiz+0x2e>
   12fee:	d50d      	bpl.n	1300c <__aeabi_d2uiz+0x28>
   12ff0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   12ff4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   12ff8:	d40e      	bmi.n	13018 <__aeabi_d2uiz+0x34>
   12ffa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   12ffe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   13002:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   13006:	fa23 f002 	lsr.w	r0, r3, r2
   1300a:	4770      	bx	lr
   1300c:	f04f 0000 	mov.w	r0, #0
   13010:	4770      	bx	lr
   13012:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   13016:	d102      	bne.n	1301e <__aeabi_d2uiz+0x3a>
   13018:	f04f 30ff 	mov.w	r0, #4294967295
   1301c:	4770      	bx	lr
   1301e:	f04f 0000 	mov.w	r0, #0
   13022:	4770      	bx	lr

00013024 <__aeabi_d2f>:
   13024:	ea4f 0241 	mov.w	r2, r1, lsl #1
   13028:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   1302c:	bf24      	itt	cs
   1302e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   13032:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   13036:	d90d      	bls.n	13054 <__aeabi_d2f+0x30>
   13038:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1303c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   13040:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   13044:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   13048:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   1304c:	bf08      	it	eq
   1304e:	f020 0001 	biceq.w	r0, r0, #1
   13052:	4770      	bx	lr
   13054:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   13058:	d121      	bne.n	1309e <__aeabi_d2f+0x7a>
   1305a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   1305e:	bfbc      	itt	lt
   13060:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   13064:	4770      	bxlt	lr
   13066:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1306a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   1306e:	f1c2 0218 	rsb	r2, r2, #24
   13072:	f1c2 0c20 	rsb	ip, r2, #32
   13076:	fa10 f30c 	lsls.w	r3, r0, ip
   1307a:	fa20 f002 	lsr.w	r0, r0, r2
   1307e:	bf18      	it	ne
   13080:	f040 0001 	orrne.w	r0, r0, #1
   13084:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   13088:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   1308c:	fa03 fc0c 	lsl.w	ip, r3, ip
   13090:	ea40 000c 	orr.w	r0, r0, ip
   13094:	fa23 f302 	lsr.w	r3, r3, r2
   13098:	ea4f 0343 	mov.w	r3, r3, lsl #1
   1309c:	e7cc      	b.n	13038 <__aeabi_d2f+0x14>
   1309e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   130a2:	d107      	bne.n	130b4 <__aeabi_d2f+0x90>
   130a4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   130a8:	bf1e      	ittt	ne
   130aa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   130ae:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   130b2:	4770      	bxne	lr
   130b4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   130b8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   130bc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   130c0:	4770      	bx	lr
   130c2:	bf00      	nop

000130c4 <__aeabi_frsub>:
   130c4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   130c8:	e002      	b.n	130d0 <__addsf3>
   130ca:	bf00      	nop

000130cc <__aeabi_fsub>:
   130cc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000130d0 <__addsf3>:
   130d0:	0042      	lsls	r2, r0, #1
   130d2:	bf1f      	itttt	ne
   130d4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   130d8:	ea92 0f03 	teqne	r2, r3
   130dc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   130e0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   130e4:	d06a      	beq.n	131bc <__addsf3+0xec>
   130e6:	ea4f 6212 	mov.w	r2, r2, lsr #24
   130ea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   130ee:	bfc1      	itttt	gt
   130f0:	18d2      	addgt	r2, r2, r3
   130f2:	4041      	eorgt	r1, r0
   130f4:	4048      	eorgt	r0, r1
   130f6:	4041      	eorgt	r1, r0
   130f8:	bfb8      	it	lt
   130fa:	425b      	neglt	r3, r3
   130fc:	2b19      	cmp	r3, #25
   130fe:	bf88      	it	hi
   13100:	4770      	bxhi	lr
   13102:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   13106:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1310a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1310e:	bf18      	it	ne
   13110:	4240      	negne	r0, r0
   13112:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   13116:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   1311a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1311e:	bf18      	it	ne
   13120:	4249      	negne	r1, r1
   13122:	ea92 0f03 	teq	r2, r3
   13126:	d03f      	beq.n	131a8 <__addsf3+0xd8>
   13128:	f1a2 0201 	sub.w	r2, r2, #1
   1312c:	fa41 fc03 	asr.w	ip, r1, r3
   13130:	eb10 000c 	adds.w	r0, r0, ip
   13134:	f1c3 0320 	rsb	r3, r3, #32
   13138:	fa01 f103 	lsl.w	r1, r1, r3
   1313c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   13140:	d502      	bpl.n	13148 <__addsf3+0x78>
   13142:	4249      	negs	r1, r1
   13144:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   13148:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1314c:	d313      	bcc.n	13176 <__addsf3+0xa6>
   1314e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   13152:	d306      	bcc.n	13162 <__addsf3+0x92>
   13154:	0840      	lsrs	r0, r0, #1
   13156:	ea4f 0131 	mov.w	r1, r1, rrx
   1315a:	f102 0201 	add.w	r2, r2, #1
   1315e:	2afe      	cmp	r2, #254	; 0xfe
   13160:	d251      	bcs.n	13206 <__addsf3+0x136>
   13162:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   13166:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1316a:	bf08      	it	eq
   1316c:	f020 0001 	biceq.w	r0, r0, #1
   13170:	ea40 0003 	orr.w	r0, r0, r3
   13174:	4770      	bx	lr
   13176:	0049      	lsls	r1, r1, #1
   13178:	eb40 0000 	adc.w	r0, r0, r0
   1317c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   13180:	f1a2 0201 	sub.w	r2, r2, #1
   13184:	d1ed      	bne.n	13162 <__addsf3+0x92>
   13186:	fab0 fc80 	clz	ip, r0
   1318a:	f1ac 0c08 	sub.w	ip, ip, #8
   1318e:	ebb2 020c 	subs.w	r2, r2, ip
   13192:	fa00 f00c 	lsl.w	r0, r0, ip
   13196:	bfaa      	itet	ge
   13198:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   1319c:	4252      	neglt	r2, r2
   1319e:	4318      	orrge	r0, r3
   131a0:	bfbc      	itt	lt
   131a2:	40d0      	lsrlt	r0, r2
   131a4:	4318      	orrlt	r0, r3
   131a6:	4770      	bx	lr
   131a8:	f092 0f00 	teq	r2, #0
   131ac:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   131b0:	bf06      	itte	eq
   131b2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   131b6:	3201      	addeq	r2, #1
   131b8:	3b01      	subne	r3, #1
   131ba:	e7b5      	b.n	13128 <__addsf3+0x58>
   131bc:	ea4f 0341 	mov.w	r3, r1, lsl #1
   131c0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   131c4:	bf18      	it	ne
   131c6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   131ca:	d021      	beq.n	13210 <__addsf3+0x140>
   131cc:	ea92 0f03 	teq	r2, r3
   131d0:	d004      	beq.n	131dc <__addsf3+0x10c>
   131d2:	f092 0f00 	teq	r2, #0
   131d6:	bf08      	it	eq
   131d8:	4608      	moveq	r0, r1
   131da:	4770      	bx	lr
   131dc:	ea90 0f01 	teq	r0, r1
   131e0:	bf1c      	itt	ne
   131e2:	2000      	movne	r0, #0
   131e4:	4770      	bxne	lr
   131e6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   131ea:	d104      	bne.n	131f6 <__addsf3+0x126>
   131ec:	0040      	lsls	r0, r0, #1
   131ee:	bf28      	it	cs
   131f0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   131f4:	4770      	bx	lr
   131f6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   131fa:	bf3c      	itt	cc
   131fc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   13200:	4770      	bxcc	lr
   13202:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   13206:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   1320a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1320e:	4770      	bx	lr
   13210:	ea7f 6222 	mvns.w	r2, r2, asr #24
   13214:	bf16      	itet	ne
   13216:	4608      	movne	r0, r1
   13218:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   1321c:	4601      	movne	r1, r0
   1321e:	0242      	lsls	r2, r0, #9
   13220:	bf06      	itte	eq
   13222:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   13226:	ea90 0f01 	teqeq	r0, r1
   1322a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   1322e:	4770      	bx	lr

00013230 <__aeabi_ui2f>:
   13230:	f04f 0300 	mov.w	r3, #0
   13234:	e004      	b.n	13240 <__aeabi_i2f+0x8>
   13236:	bf00      	nop

00013238 <__aeabi_i2f>:
   13238:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   1323c:	bf48      	it	mi
   1323e:	4240      	negmi	r0, r0
   13240:	ea5f 0c00 	movs.w	ip, r0
   13244:	bf08      	it	eq
   13246:	4770      	bxeq	lr
   13248:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   1324c:	4601      	mov	r1, r0
   1324e:	f04f 0000 	mov.w	r0, #0
   13252:	e01c      	b.n	1328e <__aeabi_l2f+0x2a>

00013254 <__aeabi_ul2f>:
   13254:	ea50 0201 	orrs.w	r2, r0, r1
   13258:	bf08      	it	eq
   1325a:	4770      	bxeq	lr
   1325c:	f04f 0300 	mov.w	r3, #0
   13260:	e00a      	b.n	13278 <__aeabi_l2f+0x14>
   13262:	bf00      	nop

00013264 <__aeabi_l2f>:
   13264:	ea50 0201 	orrs.w	r2, r0, r1
   13268:	bf08      	it	eq
   1326a:	4770      	bxeq	lr
   1326c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   13270:	d502      	bpl.n	13278 <__aeabi_l2f+0x14>
   13272:	4240      	negs	r0, r0
   13274:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   13278:	ea5f 0c01 	movs.w	ip, r1
   1327c:	bf02      	ittt	eq
   1327e:	4684      	moveq	ip, r0
   13280:	4601      	moveq	r1, r0
   13282:	2000      	moveq	r0, #0
   13284:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   13288:	bf08      	it	eq
   1328a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   1328e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   13292:	fabc f28c 	clz	r2, ip
   13296:	3a08      	subs	r2, #8
   13298:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   1329c:	db10      	blt.n	132c0 <__aeabi_l2f+0x5c>
   1329e:	fa01 fc02 	lsl.w	ip, r1, r2
   132a2:	4463      	add	r3, ip
   132a4:	fa00 fc02 	lsl.w	ip, r0, r2
   132a8:	f1c2 0220 	rsb	r2, r2, #32
   132ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   132b0:	fa20 f202 	lsr.w	r2, r0, r2
   132b4:	eb43 0002 	adc.w	r0, r3, r2
   132b8:	bf08      	it	eq
   132ba:	f020 0001 	biceq.w	r0, r0, #1
   132be:	4770      	bx	lr
   132c0:	f102 0220 	add.w	r2, r2, #32
   132c4:	fa01 fc02 	lsl.w	ip, r1, r2
   132c8:	f1c2 0220 	rsb	r2, r2, #32
   132cc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   132d0:	fa21 f202 	lsr.w	r2, r1, r2
   132d4:	eb43 0002 	adc.w	r0, r3, r2
   132d8:	bf08      	it	eq
   132da:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   132de:	4770      	bx	lr

000132e0 <__aeabi_fmul>:
   132e0:	f04f 0cff 	mov.w	ip, #255	; 0xff
   132e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   132e8:	bf1e      	ittt	ne
   132ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   132ee:	ea92 0f0c 	teqne	r2, ip
   132f2:	ea93 0f0c 	teqne	r3, ip
   132f6:	d06f      	beq.n	133d8 <__aeabi_fmul+0xf8>
   132f8:	441a      	add	r2, r3
   132fa:	ea80 0c01 	eor.w	ip, r0, r1
   132fe:	0240      	lsls	r0, r0, #9
   13300:	bf18      	it	ne
   13302:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   13306:	d01e      	beq.n	13346 <__aeabi_fmul+0x66>
   13308:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   1330c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   13310:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   13314:	fba0 3101 	umull	r3, r1, r0, r1
   13318:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   1331c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   13320:	bf3e      	ittt	cc
   13322:	0049      	lslcc	r1, r1, #1
   13324:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   13328:	005b      	lslcc	r3, r3, #1
   1332a:	ea40 0001 	orr.w	r0, r0, r1
   1332e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   13332:	2afd      	cmp	r2, #253	; 0xfd
   13334:	d81d      	bhi.n	13372 <__aeabi_fmul+0x92>
   13336:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   1333a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1333e:	bf08      	it	eq
   13340:	f020 0001 	biceq.w	r0, r0, #1
   13344:	4770      	bx	lr
   13346:	f090 0f00 	teq	r0, #0
   1334a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   1334e:	bf08      	it	eq
   13350:	0249      	lsleq	r1, r1, #9
   13352:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   13356:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   1335a:	3a7f      	subs	r2, #127	; 0x7f
   1335c:	bfc2      	ittt	gt
   1335e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   13362:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   13366:	4770      	bxgt	lr
   13368:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1336c:	f04f 0300 	mov.w	r3, #0
   13370:	3a01      	subs	r2, #1
   13372:	dc5d      	bgt.n	13430 <__aeabi_fmul+0x150>
   13374:	f112 0f19 	cmn.w	r2, #25
   13378:	bfdc      	itt	le
   1337a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   1337e:	4770      	bxle	lr
   13380:	f1c2 0200 	rsb	r2, r2, #0
   13384:	0041      	lsls	r1, r0, #1
   13386:	fa21 f102 	lsr.w	r1, r1, r2
   1338a:	f1c2 0220 	rsb	r2, r2, #32
   1338e:	fa00 fc02 	lsl.w	ip, r0, r2
   13392:	ea5f 0031 	movs.w	r0, r1, rrx
   13396:	f140 0000 	adc.w	r0, r0, #0
   1339a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   1339e:	bf08      	it	eq
   133a0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   133a4:	4770      	bx	lr
   133a6:	f092 0f00 	teq	r2, #0
   133aa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   133ae:	bf02      	ittt	eq
   133b0:	0040      	lsleq	r0, r0, #1
   133b2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   133b6:	3a01      	subeq	r2, #1
   133b8:	d0f9      	beq.n	133ae <__aeabi_fmul+0xce>
   133ba:	ea40 000c 	orr.w	r0, r0, ip
   133be:	f093 0f00 	teq	r3, #0
   133c2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   133c6:	bf02      	ittt	eq
   133c8:	0049      	lsleq	r1, r1, #1
   133ca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   133ce:	3b01      	subeq	r3, #1
   133d0:	d0f9      	beq.n	133c6 <__aeabi_fmul+0xe6>
   133d2:	ea41 010c 	orr.w	r1, r1, ip
   133d6:	e78f      	b.n	132f8 <__aeabi_fmul+0x18>
   133d8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   133dc:	ea92 0f0c 	teq	r2, ip
   133e0:	bf18      	it	ne
   133e2:	ea93 0f0c 	teqne	r3, ip
   133e6:	d00a      	beq.n	133fe <__aeabi_fmul+0x11e>
   133e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   133ec:	bf18      	it	ne
   133ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   133f2:	d1d8      	bne.n	133a6 <__aeabi_fmul+0xc6>
   133f4:	ea80 0001 	eor.w	r0, r0, r1
   133f8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   133fc:	4770      	bx	lr
   133fe:	f090 0f00 	teq	r0, #0
   13402:	bf17      	itett	ne
   13404:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   13408:	4608      	moveq	r0, r1
   1340a:	f091 0f00 	teqne	r1, #0
   1340e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   13412:	d014      	beq.n	1343e <__aeabi_fmul+0x15e>
   13414:	ea92 0f0c 	teq	r2, ip
   13418:	d101      	bne.n	1341e <__aeabi_fmul+0x13e>
   1341a:	0242      	lsls	r2, r0, #9
   1341c:	d10f      	bne.n	1343e <__aeabi_fmul+0x15e>
   1341e:	ea93 0f0c 	teq	r3, ip
   13422:	d103      	bne.n	1342c <__aeabi_fmul+0x14c>
   13424:	024b      	lsls	r3, r1, #9
   13426:	bf18      	it	ne
   13428:	4608      	movne	r0, r1
   1342a:	d108      	bne.n	1343e <__aeabi_fmul+0x15e>
   1342c:	ea80 0001 	eor.w	r0, r0, r1
   13430:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   13434:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   13438:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1343c:	4770      	bx	lr
   1343e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   13442:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   13446:	4770      	bx	lr

00013448 <__aeabi_fdiv>:
   13448:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1344c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   13450:	bf1e      	ittt	ne
   13452:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   13456:	ea92 0f0c 	teqne	r2, ip
   1345a:	ea93 0f0c 	teqne	r3, ip
   1345e:	d069      	beq.n	13534 <__aeabi_fdiv+0xec>
   13460:	eba2 0203 	sub.w	r2, r2, r3
   13464:	ea80 0c01 	eor.w	ip, r0, r1
   13468:	0249      	lsls	r1, r1, #9
   1346a:	ea4f 2040 	mov.w	r0, r0, lsl #9
   1346e:	d037      	beq.n	134e0 <__aeabi_fdiv+0x98>
   13470:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   13474:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   13478:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   1347c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   13480:	428b      	cmp	r3, r1
   13482:	bf38      	it	cc
   13484:	005b      	lslcc	r3, r3, #1
   13486:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   1348a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   1348e:	428b      	cmp	r3, r1
   13490:	bf24      	itt	cs
   13492:	1a5b      	subcs	r3, r3, r1
   13494:	ea40 000c 	orrcs.w	r0, r0, ip
   13498:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   1349c:	bf24      	itt	cs
   1349e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   134a2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   134a6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   134aa:	bf24      	itt	cs
   134ac:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   134b0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   134b4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   134b8:	bf24      	itt	cs
   134ba:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   134be:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   134c2:	011b      	lsls	r3, r3, #4
   134c4:	bf18      	it	ne
   134c6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   134ca:	d1e0      	bne.n	1348e <__aeabi_fdiv+0x46>
   134cc:	2afd      	cmp	r2, #253	; 0xfd
   134ce:	f63f af50 	bhi.w	13372 <__aeabi_fmul+0x92>
   134d2:	428b      	cmp	r3, r1
   134d4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   134d8:	bf08      	it	eq
   134da:	f020 0001 	biceq.w	r0, r0, #1
   134de:	4770      	bx	lr
   134e0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   134e4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   134e8:	327f      	adds	r2, #127	; 0x7f
   134ea:	bfc2      	ittt	gt
   134ec:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   134f0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   134f4:	4770      	bxgt	lr
   134f6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   134fa:	f04f 0300 	mov.w	r3, #0
   134fe:	3a01      	subs	r2, #1
   13500:	e737      	b.n	13372 <__aeabi_fmul+0x92>
   13502:	f092 0f00 	teq	r2, #0
   13506:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   1350a:	bf02      	ittt	eq
   1350c:	0040      	lsleq	r0, r0, #1
   1350e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   13512:	3a01      	subeq	r2, #1
   13514:	d0f9      	beq.n	1350a <__aeabi_fdiv+0xc2>
   13516:	ea40 000c 	orr.w	r0, r0, ip
   1351a:	f093 0f00 	teq	r3, #0
   1351e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   13522:	bf02      	ittt	eq
   13524:	0049      	lsleq	r1, r1, #1
   13526:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   1352a:	3b01      	subeq	r3, #1
   1352c:	d0f9      	beq.n	13522 <__aeabi_fdiv+0xda>
   1352e:	ea41 010c 	orr.w	r1, r1, ip
   13532:	e795      	b.n	13460 <__aeabi_fdiv+0x18>
   13534:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   13538:	ea92 0f0c 	teq	r2, ip
   1353c:	d108      	bne.n	13550 <__aeabi_fdiv+0x108>
   1353e:	0242      	lsls	r2, r0, #9
   13540:	f47f af7d 	bne.w	1343e <__aeabi_fmul+0x15e>
   13544:	ea93 0f0c 	teq	r3, ip
   13548:	f47f af70 	bne.w	1342c <__aeabi_fmul+0x14c>
   1354c:	4608      	mov	r0, r1
   1354e:	e776      	b.n	1343e <__aeabi_fmul+0x15e>
   13550:	ea93 0f0c 	teq	r3, ip
   13554:	d104      	bne.n	13560 <__aeabi_fdiv+0x118>
   13556:	024b      	lsls	r3, r1, #9
   13558:	f43f af4c 	beq.w	133f4 <__aeabi_fmul+0x114>
   1355c:	4608      	mov	r0, r1
   1355e:	e76e      	b.n	1343e <__aeabi_fmul+0x15e>
   13560:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   13564:	bf18      	it	ne
   13566:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   1356a:	d1ca      	bne.n	13502 <__aeabi_fdiv+0xba>
   1356c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   13570:	f47f af5c 	bne.w	1342c <__aeabi_fmul+0x14c>
   13574:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   13578:	f47f af3c 	bne.w	133f4 <__aeabi_fmul+0x114>
   1357c:	e75f      	b.n	1343e <__aeabi_fmul+0x15e>
   1357e:	bf00      	nop

00013580 <__gesf2>:
   13580:	f04f 3cff 	mov.w	ip, #4294967295
   13584:	e006      	b.n	13594 <__cmpsf2+0x4>
   13586:	bf00      	nop

00013588 <__lesf2>:
   13588:	f04f 0c01 	mov.w	ip, #1
   1358c:	e002      	b.n	13594 <__cmpsf2+0x4>
   1358e:	bf00      	nop

00013590 <__cmpsf2>:
   13590:	f04f 0c01 	mov.w	ip, #1
   13594:	f84d cd04 	str.w	ip, [sp, #-4]!
   13598:	ea4f 0240 	mov.w	r2, r0, lsl #1
   1359c:	ea4f 0341 	mov.w	r3, r1, lsl #1
   135a0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   135a4:	bf18      	it	ne
   135a6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   135aa:	d011      	beq.n	135d0 <__cmpsf2+0x40>
   135ac:	b001      	add	sp, #4
   135ae:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   135b2:	bf18      	it	ne
   135b4:	ea90 0f01 	teqne	r0, r1
   135b8:	bf58      	it	pl
   135ba:	ebb2 0003 	subspl.w	r0, r2, r3
   135be:	bf88      	it	hi
   135c0:	17c8      	asrhi	r0, r1, #31
   135c2:	bf38      	it	cc
   135c4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   135c8:	bf18      	it	ne
   135ca:	f040 0001 	orrne.w	r0, r0, #1
   135ce:	4770      	bx	lr
   135d0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   135d4:	d102      	bne.n	135dc <__cmpsf2+0x4c>
   135d6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   135da:	d105      	bne.n	135e8 <__cmpsf2+0x58>
   135dc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   135e0:	d1e4      	bne.n	135ac <__cmpsf2+0x1c>
   135e2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   135e6:	d0e1      	beq.n	135ac <__cmpsf2+0x1c>
   135e8:	f85d 0b04 	ldr.w	r0, [sp], #4
   135ec:	4770      	bx	lr
   135ee:	bf00      	nop

000135f0 <__aeabi_cfrcmple>:
   135f0:	4684      	mov	ip, r0
   135f2:	4608      	mov	r0, r1
   135f4:	4661      	mov	r1, ip
   135f6:	e7ff      	b.n	135f8 <__aeabi_cfcmpeq>

000135f8 <__aeabi_cfcmpeq>:
   135f8:	b50f      	push	{r0, r1, r2, r3, lr}
   135fa:	f7ff ffc9 	bl	13590 <__cmpsf2>
   135fe:	2800      	cmp	r0, #0
   13600:	bf48      	it	mi
   13602:	f110 0f00 	cmnmi.w	r0, #0
   13606:	bd0f      	pop	{r0, r1, r2, r3, pc}

00013608 <__aeabi_fcmpeq>:
   13608:	f84d ed08 	str.w	lr, [sp, #-8]!
   1360c:	f7ff fff4 	bl	135f8 <__aeabi_cfcmpeq>
   13610:	bf0c      	ite	eq
   13612:	2001      	moveq	r0, #1
   13614:	2000      	movne	r0, #0
   13616:	f85d fb08 	ldr.w	pc, [sp], #8
   1361a:	bf00      	nop

0001361c <__aeabi_fcmplt>:
   1361c:	f84d ed08 	str.w	lr, [sp, #-8]!
   13620:	f7ff ffea 	bl	135f8 <__aeabi_cfcmpeq>
   13624:	bf34      	ite	cc
   13626:	2001      	movcc	r0, #1
   13628:	2000      	movcs	r0, #0
   1362a:	f85d fb08 	ldr.w	pc, [sp], #8
   1362e:	bf00      	nop

00013630 <__aeabi_fcmple>:
   13630:	f84d ed08 	str.w	lr, [sp, #-8]!
   13634:	f7ff ffe0 	bl	135f8 <__aeabi_cfcmpeq>
   13638:	bf94      	ite	ls
   1363a:	2001      	movls	r0, #1
   1363c:	2000      	movhi	r0, #0
   1363e:	f85d fb08 	ldr.w	pc, [sp], #8
   13642:	bf00      	nop

00013644 <__aeabi_fcmpge>:
   13644:	f84d ed08 	str.w	lr, [sp, #-8]!
   13648:	f7ff ffd2 	bl	135f0 <__aeabi_cfrcmple>
   1364c:	bf94      	ite	ls
   1364e:	2001      	movls	r0, #1
   13650:	2000      	movhi	r0, #0
   13652:	f85d fb08 	ldr.w	pc, [sp], #8
   13656:	bf00      	nop

00013658 <__aeabi_fcmpgt>:
   13658:	f84d ed08 	str.w	lr, [sp, #-8]!
   1365c:	f7ff ffc8 	bl	135f0 <__aeabi_cfrcmple>
   13660:	bf34      	ite	cc
   13662:	2001      	movcc	r0, #1
   13664:	2000      	movcs	r0, #0
   13666:	f85d fb08 	ldr.w	pc, [sp], #8
   1366a:	bf00      	nop

0001366c <__aeabi_f2iz>:
   1366c:	ea4f 0240 	mov.w	r2, r0, lsl #1
   13670:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   13674:	d30f      	bcc.n	13696 <__aeabi_f2iz+0x2a>
   13676:	f04f 039e 	mov.w	r3, #158	; 0x9e
   1367a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   1367e:	d90d      	bls.n	1369c <__aeabi_f2iz+0x30>
   13680:	ea4f 2300 	mov.w	r3, r0, lsl #8
   13684:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   13688:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   1368c:	fa23 f002 	lsr.w	r0, r3, r2
   13690:	bf18      	it	ne
   13692:	4240      	negne	r0, r0
   13694:	4770      	bx	lr
   13696:	f04f 0000 	mov.w	r0, #0
   1369a:	4770      	bx	lr
   1369c:	f112 0f61 	cmn.w	r2, #97	; 0x61
   136a0:	d101      	bne.n	136a6 <__aeabi_f2iz+0x3a>
   136a2:	0242      	lsls	r2, r0, #9
   136a4:	d105      	bne.n	136b2 <__aeabi_f2iz+0x46>
   136a6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   136aa:	bf08      	it	eq
   136ac:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   136b0:	4770      	bx	lr
   136b2:	f04f 0000 	mov.w	r0, #0
   136b6:	4770      	bx	lr

000136b8 <memcpy>:
   136b8:	2a0f      	cmp	r2, #15
   136ba:	b4f0      	push	{r4, r5, r6, r7}
   136bc:	d945      	bls.n	1374a <memcpy+0x92>
   136be:	ea40 0301 	orr.w	r3, r0, r1
   136c2:	079b      	lsls	r3, r3, #30
   136c4:	d145      	bne.n	13752 <memcpy+0x9a>
   136c6:	f1a2 0710 	sub.w	r7, r2, #16
   136ca:	460c      	mov	r4, r1
   136cc:	4603      	mov	r3, r0
   136ce:	093f      	lsrs	r7, r7, #4
   136d0:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   136d4:	3610      	adds	r6, #16
   136d6:	6825      	ldr	r5, [r4, #0]
   136d8:	3310      	adds	r3, #16
   136da:	3410      	adds	r4, #16
   136dc:	f843 5c10 	str.w	r5, [r3, #-16]
   136e0:	f854 5c0c 	ldr.w	r5, [r4, #-12]
   136e4:	f843 5c0c 	str.w	r5, [r3, #-12]
   136e8:	f854 5c08 	ldr.w	r5, [r4, #-8]
   136ec:	f843 5c08 	str.w	r5, [r3, #-8]
   136f0:	f854 5c04 	ldr.w	r5, [r4, #-4]
   136f4:	f843 5c04 	str.w	r5, [r3, #-4]
   136f8:	42b3      	cmp	r3, r6
   136fa:	d1ec      	bne.n	136d6 <memcpy+0x1e>
   136fc:	1c7b      	adds	r3, r7, #1
   136fe:	f002 0c0f 	and.w	ip, r2, #15
   13702:	f1bc 0f03 	cmp.w	ip, #3
   13706:	ea4f 1303 	mov.w	r3, r3, lsl #4
   1370a:	4419      	add	r1, r3
   1370c:	4403      	add	r3, r0
   1370e:	d922      	bls.n	13756 <memcpy+0x9e>
   13710:	460e      	mov	r6, r1
   13712:	461d      	mov	r5, r3
   13714:	4664      	mov	r4, ip
   13716:	f856 7b04 	ldr.w	r7, [r6], #4
   1371a:	3c04      	subs	r4, #4
   1371c:	2c03      	cmp	r4, #3
   1371e:	f845 7b04 	str.w	r7, [r5], #4
   13722:	d8f8      	bhi.n	13716 <memcpy+0x5e>
   13724:	f1ac 0404 	sub.w	r4, ip, #4
   13728:	f002 0203 	and.w	r2, r2, #3
   1372c:	f024 0403 	bic.w	r4, r4, #3
   13730:	3404      	adds	r4, #4
   13732:	4423      	add	r3, r4
   13734:	4421      	add	r1, r4
   13736:	b132      	cbz	r2, 13746 <memcpy+0x8e>
   13738:	440a      	add	r2, r1
   1373a:	f811 4b01 	ldrb.w	r4, [r1], #1
   1373e:	4291      	cmp	r1, r2
   13740:	f803 4b01 	strb.w	r4, [r3], #1
   13744:	d1f9      	bne.n	1373a <memcpy+0x82>
   13746:	bcf0      	pop	{r4, r5, r6, r7}
   13748:	4770      	bx	lr
   1374a:	4603      	mov	r3, r0
   1374c:	2a00      	cmp	r2, #0
   1374e:	d1f3      	bne.n	13738 <memcpy+0x80>
   13750:	e7f9      	b.n	13746 <memcpy+0x8e>
   13752:	4603      	mov	r3, r0
   13754:	e7f0      	b.n	13738 <memcpy+0x80>
   13756:	4662      	mov	r2, ip
   13758:	2a00      	cmp	r2, #0
   1375a:	d1ed      	bne.n	13738 <memcpy+0x80>
   1375c:	e7f3      	b.n	13746 <memcpy+0x8e>
   1375e:	bf00      	nop

00013760 <memset>:
   13760:	0783      	lsls	r3, r0, #30
   13762:	b4f0      	push	{r4, r5, r6, r7}
   13764:	d048      	beq.n	137f8 <memset+0x98>
   13766:	1e54      	subs	r4, r2, #1
   13768:	2a00      	cmp	r2, #0
   1376a:	d043      	beq.n	137f4 <memset+0x94>
   1376c:	b2cd      	uxtb	r5, r1
   1376e:	4603      	mov	r3, r0
   13770:	e002      	b.n	13778 <memset+0x18>
   13772:	2c00      	cmp	r4, #0
   13774:	d03e      	beq.n	137f4 <memset+0x94>
   13776:	4614      	mov	r4, r2
   13778:	f803 5b01 	strb.w	r5, [r3], #1
   1377c:	f013 0f03 	tst.w	r3, #3
   13780:	f104 32ff 	add.w	r2, r4, #4294967295
   13784:	d1f5      	bne.n	13772 <memset+0x12>
   13786:	2c03      	cmp	r4, #3
   13788:	d92d      	bls.n	137e6 <memset+0x86>
   1378a:	b2cd      	uxtb	r5, r1
   1378c:	2c0f      	cmp	r4, #15
   1378e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   13792:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   13796:	d918      	bls.n	137ca <memset+0x6a>
   13798:	f1a4 0710 	sub.w	r7, r4, #16
   1379c:	f103 0610 	add.w	r6, r3, #16
   137a0:	461a      	mov	r2, r3
   137a2:	093f      	lsrs	r7, r7, #4
   137a4:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   137a8:	6015      	str	r5, [r2, #0]
   137aa:	3210      	adds	r2, #16
   137ac:	f842 5c0c 	str.w	r5, [r2, #-12]
   137b0:	f842 5c08 	str.w	r5, [r2, #-8]
   137b4:	f842 5c04 	str.w	r5, [r2, #-4]
   137b8:	42b2      	cmp	r2, r6
   137ba:	d1f5      	bne.n	137a8 <memset+0x48>
   137bc:	f004 040f 	and.w	r4, r4, #15
   137c0:	3701      	adds	r7, #1
   137c2:	2c03      	cmp	r4, #3
   137c4:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   137c8:	d90d      	bls.n	137e6 <memset+0x86>
   137ca:	461e      	mov	r6, r3
   137cc:	4622      	mov	r2, r4
   137ce:	3a04      	subs	r2, #4
   137d0:	f846 5b04 	str.w	r5, [r6], #4
   137d4:	2a03      	cmp	r2, #3
   137d6:	d8fa      	bhi.n	137ce <memset+0x6e>
   137d8:	1f22      	subs	r2, r4, #4
   137da:	f004 0403 	and.w	r4, r4, #3
   137de:	f022 0203 	bic.w	r2, r2, #3
   137e2:	3204      	adds	r2, #4
   137e4:	4413      	add	r3, r2
   137e6:	b12c      	cbz	r4, 137f4 <memset+0x94>
   137e8:	b2c9      	uxtb	r1, r1
   137ea:	441c      	add	r4, r3
   137ec:	f803 1b01 	strb.w	r1, [r3], #1
   137f0:	42a3      	cmp	r3, r4
   137f2:	d1fb      	bne.n	137ec <memset+0x8c>
   137f4:	bcf0      	pop	{r4, r5, r6, r7}
   137f6:	4770      	bx	lr
   137f8:	4614      	mov	r4, r2
   137fa:	4603      	mov	r3, r0
   137fc:	e7c3      	b.n	13786 <memset+0x26>
   137fe:	bf00      	nop

00013800 <strncpy>:
   13800:	ea40 0301 	orr.w	r3, r0, r1
   13804:	079b      	lsls	r3, r3, #30
   13806:	b470      	push	{r4, r5, r6}
   13808:	d12b      	bne.n	13862 <strncpy+0x62>
   1380a:	2a03      	cmp	r2, #3
   1380c:	bf84      	itt	hi
   1380e:	460b      	movhi	r3, r1
   13810:	4605      	movhi	r5, r0
   13812:	d926      	bls.n	13862 <strncpy+0x62>
   13814:	4619      	mov	r1, r3
   13816:	f853 4b04 	ldr.w	r4, [r3], #4
   1381a:	f1a4 3601 	sub.w	r6, r4, #16843009	; 0x1010101
   1381e:	ea26 0604 	bic.w	r6, r6, r4
   13822:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
   13826:	d105      	bne.n	13834 <strncpy+0x34>
   13828:	3a04      	subs	r2, #4
   1382a:	f845 4b04 	str.w	r4, [r5], #4
   1382e:	2a03      	cmp	r2, #3
   13830:	4619      	mov	r1, r3
   13832:	d8ef      	bhi.n	13814 <strncpy+0x14>
   13834:	b19a      	cbz	r2, 1385e <strncpy+0x5e>
   13836:	780c      	ldrb	r4, [r1, #0]
   13838:	3a01      	subs	r2, #1
   1383a:	1c6b      	adds	r3, r5, #1
   1383c:	702c      	strb	r4, [r5, #0]
   1383e:	b13c      	cbz	r4, 13850 <strncpy+0x50>
   13840:	b16a      	cbz	r2, 1385e <strncpy+0x5e>
   13842:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   13846:	3a01      	subs	r2, #1
   13848:	f803 4b01 	strb.w	r4, [r3], #1
   1384c:	2c00      	cmp	r4, #0
   1384e:	d1f7      	bne.n	13840 <strncpy+0x40>
   13850:	b12a      	cbz	r2, 1385e <strncpy+0x5e>
   13852:	441a      	add	r2, r3
   13854:	2100      	movs	r1, #0
   13856:	f803 1b01 	strb.w	r1, [r3], #1
   1385a:	4293      	cmp	r3, r2
   1385c:	d1fb      	bne.n	13856 <strncpy+0x56>
   1385e:	bc70      	pop	{r4, r5, r6}
   13860:	4770      	bx	lr
   13862:	4605      	mov	r5, r0
   13864:	e7e6      	b.n	13834 <strncpy+0x34>
   13866:	bf00      	nop

00013868 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:	

/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
   13868:	2100      	movs	r1, #0
  b	LoopCopyDataInit
   1386a:	e003      	b.n	13874 <LoopCopyDataInit>

0001386c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
   1386c:	4b0a      	ldr	r3, [pc, #40]	; (13898 <LoopFillZerobss+0x10>)
	ldr	r3, [r3, r1]
   1386e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
   13870:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
   13872:	3104      	adds	r1, #4

00013874 <LoopCopyDataInit>:
    
LoopCopyDataInit:
	ldr	r0, =_sdata
   13874:	4809      	ldr	r0, [pc, #36]	; (1389c <LoopFillZerobss+0x14>)
	ldr	r3, =_edata
   13876:	4b0a      	ldr	r3, [pc, #40]	; (138a0 <LoopFillZerobss+0x18>)
	adds	r2, r0, r1
   13878:	1842      	adds	r2, r0, r1
	cmp	r2, r3
   1387a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
   1387c:	d3f6      	bcc.n	1386c <CopyDataInit>
	ldr	r2, =_sbss
   1387e:	4a09      	ldr	r2, [pc, #36]	; (138a4 <LoopFillZerobss+0x1c>)
	b	LoopFillZerobss
   13880:	e002      	b.n	13888 <LoopFillZerobss>

00013882 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
	movs	r3, #0
   13882:	2300      	movs	r3, #0
	str	r3, [r2], #4
   13884:	f842 3b04 	str.w	r3, [r2], #4

00013888 <LoopFillZerobss>:
    
LoopFillZerobss:
	ldr	r3, = _ebss
   13888:	4b07      	ldr	r3, [pc, #28]	; (138a8 <LoopFillZerobss+0x20>)
	cmp	r2, r3
   1388a:	429a      	cmp	r2, r3
	bcc	FillZerobss
   1388c:	d3f9      	bcc.n	13882 <FillZerobss>
/* Call the clock system intitialization function.*/
  bl  SystemInit 	
   1388e:	f7ec fd55 	bl	33c <SystemInit>
/* Call the application's entry point.*/
	bl	main
   13892:	f7fe feb7 	bl	12604 <main>
	bx	lr    
   13896:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
   13898:	000139a0 	.word	0x000139a0
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4
    
LoopCopyDataInit:
	ldr	r0, =_sdata
   1389c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
   138a0:	200001a0 	.word	0x200001a0
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
   138a4:	200001a0 	.word	0x200001a0
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4
    
LoopFillZerobss:
	ldr	r3, = _ebss
   138a8:	2004be38 	.word	0x2004be38

000138ac <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
   138ac:	e7fe      	b.n	138ac <ADC1_2_IRQHandler>
   138ae:	0000      	movs	r0, r0
   138b0:	00000031 	.word	0x00000031
   138b4:	00000032 	.word	0x00000032
   138b8:	00000033 	.word	0x00000033
   138bc:	00000034 	.word	0x00000034
   138c0:	00000035 	.word	0x00000035
   138c4:	00000036 	.word	0x00000036
   138c8:	00000037 	.word	0x00000037
   138cc:	00000038 	.word	0x00000038
   138d0:	00000039 	.word	0x00000039
   138d4:	00003031 	.word	0x00003031
   138d8:	00003131 	.word	0x00003131
   138dc:	00003231 	.word	0x00003231
   138e0:	00003331 	.word	0x00003331
   138e4:	454c4449 	.word	0x454c4449
   138e8:	00000000 	.word	0x00000000

000138ec <ulKernelPriority>:
   138ec:	0000007f                                ....

000138f0 <heapSTRUCT_SIZE>:
   138f0:	00010010                                         ..

000138f2 <version>:
   138f2:	3d5a0001                                         ..

000138f4 <utm_east0>:
   138f4:	00093d5a                                Z=..

000138f8 <utm_north0>:
   138f8:	005875e6                                .uX.

000138fc <climb_pgain>:
   138fc:	bcf5c28f                                ....

00013900 <climb_igain>:
   13900:	3dcccccd                                ...=

00013904 <level_gaz>:
   13904:	3e9eb852                                R..>

00013908 <nav_east0>:
   13908:	00093d5a                                Z=..

0001390c <nav_north0>:
   1390c:	005875e6                                .uX.

00013910 <nb_waypoint>:
   13910:	00000007 33323130 37363534 42413938     ....0123456789AB
   13920:	46454443                                CDEF

00013924 <failsafe>:
	...
   13938:	20574246 746f6f42 20676e69 3a644924     FBW Booting $Id:
   13948:	69616d20 2c632e6e 2e312076 30322033      main.c,v 1.3 20
   13958:	312f3830 32322f30 3a393120 313a3134     08/10/22 19:41:1
   13968:	61632039 20657373 20707845 000d0a24     9 casse Exp $...
   13978:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   13988:	000d0a30 00000d0a 7373696d 61656420     0.......miss dea
   13998:	6e696c64 000d0a65                       dline...
