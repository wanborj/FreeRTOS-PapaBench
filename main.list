
main.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:
       0:	00 c8 00 20 e9 72 01 00 2d 73 01 00 2d 73 01 00     ... .r..-s..-s..
      10:	2d 73 01 00 2d 73 01 00 2d 73 01 00 00 00 00 00     -s..-s..-s......
	...
      2c:	9d 45 00 00 2d 73 01 00 00 00 00 00 a9 46 00 00     .E..-s.......F..
      3c:	e5 46 00 00 2d 73 01 00 2d 73 01 00 2d 73 01 00     .F..-s..-s..-s..
      4c:	2d 73 01 00 2d 73 01 00 2d 73 01 00 2d 73 01 00     -s..-s..-s..-s..
      5c:	2d 73 01 00 2d 73 01 00 2d 73 01 00 2d 73 01 00     -s..-s..-s..-s..
      6c:	2d 73 01 00 2d 73 01 00 2d 73 01 00 2d 73 01 00     -s..-s..-s..-s..
      7c:	2d 73 01 00 2d 73 01 00 2d 73 01 00 2d 73 01 00     -s..-s..-s..-s..
      8c:	2d 73 01 00 2d 73 01 00 2d 73 01 00 2d 73 01 00     -s..-s..-s..-s..
      9c:	2d 73 01 00 2d 73 01 00 2d 73 01 00 2d 73 01 00     -s..-s..-s..-s..
      ac:	2d 73 01 00 2d 73 01 00 2d 73 01 00 2d 73 01 00     -s..-s..-s..-s..
      bc:	2d 73 01 00 2d 73 01 00 2d 73 01 00 2d 73 01 00     -s..-s..-s..-s..
      cc:	2d 73 01 00 2d 73 01 00 2d 73 01 00 2d 73 01 00     -s..-s..-s..-s..
      dc:	2d 73 01 00 2d 73 01 00 2d 73 01 00 2d 73 01 00     -s..-s..-s..-s..
	...
     108:	5f f8 08 f1                                         _...

0000010c <__get_PSP>:
 * Return the actual process stack pointer
 */
uint32_t __get_PSP(void) __attribute__( ( naked ) );
uint32_t __get_PSP(void)
{
  uint32_t result=0;
     10c:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, psp\n\t"
     10e:	f3ef 8309 	mrs	r3, PSP
     112:	4618      	mov	r0, r3
     114:	4770      	bx	lr
     116:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     118:	4623      	mov	r3, r4
}
     11a:	4618      	mov	r0, r3

0000011c <__set_PSP>:
 * Assign the value ProcessStackPointer to the MSP
 * (process stack pointer) Cortex processor register
 */
void __set_PSP(uint32_t topOfProcStack) __attribute__( ( naked ) );
void __set_PSP(uint32_t topOfProcStack)
{
     11c:	4603      	mov	r3, r0
  __ASM volatile ("MSR psp, %0\n\t"
     11e:	f383 8809 	msr	PSP, r3
     122:	4770      	bx	lr

00000124 <__get_MSP>:
 * Cortex processor register
 */
uint32_t __get_MSP(void) __attribute__( ( naked ) );
uint32_t __get_MSP(void)
{
  uint32_t result=0;
     124:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, msp\n\t"
     126:	f3ef 8308 	mrs	r3, MSP
     12a:	4618      	mov	r0, r3
     12c:	4770      	bx	lr
     12e:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     130:	4623      	mov	r3, r4
}
     132:	4618      	mov	r0, r3

00000134 <__set_MSP>:
 * Assign the value mainStackPointer to the MSP
 * (main stack pointer) Cortex processor register
 */
void __set_MSP(uint32_t topOfMainStack) __attribute__( ( naked ) );
void __set_MSP(uint32_t topOfMainStack)
{
     134:	4603      	mov	r3, r0
  __ASM volatile ("MSR msp, %0\n\t"
     136:	f383 8808 	msr	MSP, r3
     13a:	4770      	bx	lr

0000013c <__get_BASEPRI>:
 * @return BasePriority
 *
 * Return the content of the base priority register
 */
uint32_t __get_BASEPRI(void)
{
     13c:	b480      	push	{r7}
     13e:	b083      	sub	sp, #12
     140:	af00      	add	r7, sp, #0
  uint32_t result=0;
     142:	2300      	movs	r3, #0
     144:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
     146:	f3ef 8312 	mrs	r3, BASEPRI_MAX
     14a:	607b      	str	r3, [r7, #4]
  return(result);
     14c:	687b      	ldr	r3, [r7, #4]
}
     14e:	4618      	mov	r0, r3
     150:	370c      	adds	r7, #12
     152:	46bd      	mov	sp, r7
     154:	f85d 7b04 	ldr.w	r7, [sp], #4
     158:	4770      	bx	lr
     15a:	bf00      	nop

0000015c <__set_BASEPRI>:
 * @param  basePri  BasePriority
 *
 * Set the base priority register
 */
void __set_BASEPRI(uint32_t value)
{
     15c:	b480      	push	{r7}
     15e:	b083      	sub	sp, #12
     160:	af00      	add	r7, sp, #0
     162:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) );
     164:	687b      	ldr	r3, [r7, #4]
     166:	f383 8811 	msr	BASEPRI, r3
}
     16a:	370c      	adds	r7, #12
     16c:	46bd      	mov	sp, r7
     16e:	f85d 7b04 	ldr.w	r7, [sp], #4
     172:	4770      	bx	lr

00000174 <__get_PRIMASK>:
 * @return PriMask
 *
 * Return state of the priority mask bit from the priority mask register
 */
uint32_t __get_PRIMASK(void)
{
     174:	b480      	push	{r7}
     176:	b083      	sub	sp, #12
     178:	af00      	add	r7, sp, #0
  uint32_t result=0;
     17a:	2300      	movs	r3, #0
     17c:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     17e:	f3ef 8310 	mrs	r3, PRIMASK
     182:	607b      	str	r3, [r7, #4]
  return(result);
     184:	687b      	ldr	r3, [r7, #4]
}
     186:	4618      	mov	r0, r3
     188:	370c      	adds	r7, #12
     18a:	46bd      	mov	sp, r7
     18c:	f85d 7b04 	ldr.w	r7, [sp], #4
     190:	4770      	bx	lr
     192:	bf00      	nop

00000194 <__set_PRIMASK>:
 * @param  priMask  PriMask
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
     194:	b480      	push	{r7}
     196:	b083      	sub	sp, #12
     198:	af00      	add	r7, sp, #0
     19a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	f383 8810 	msr	PRIMASK, r3
}
     1a2:	370c      	adds	r7, #12
     1a4:	46bd      	mov	sp, r7
     1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
     1aa:	4770      	bx	lr

000001ac <__get_FAULTMASK>:
 * @return FaultMask
 *
 * Return the content of the fault mask register
 */
uint32_t __get_FAULTMASK(void)
{
     1ac:	b480      	push	{r7}
     1ae:	b083      	sub	sp, #12
     1b0:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1b2:	2300      	movs	r3, #0
     1b4:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
     1b6:	f3ef 8313 	mrs	r3, FAULTMASK
     1ba:	607b      	str	r3, [r7, #4]
  return(result);
     1bc:	687b      	ldr	r3, [r7, #4]
}
     1be:	4618      	mov	r0, r3
     1c0:	370c      	adds	r7, #12
     1c2:	46bd      	mov	sp, r7
     1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     1c8:	4770      	bx	lr
     1ca:	bf00      	nop

000001cc <__set_FAULTMASK>:
 * @param  faultMask  faultMask value
 *
 * Set the fault mask register
 */
void __set_FAULTMASK(uint32_t faultMask)
{
     1cc:	b480      	push	{r7}
     1ce:	b083      	sub	sp, #12
     1d0:	af00      	add	r7, sp, #0
     1d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) );
     1d4:	687b      	ldr	r3, [r7, #4]
     1d6:	f383 8813 	msr	FAULTMASK, r3
}
     1da:	370c      	adds	r7, #12
     1dc:	46bd      	mov	sp, r7
     1de:	f85d 7b04 	ldr.w	r7, [sp], #4
     1e2:	4770      	bx	lr

000001e4 <__get_CONTROL>:
*  @return Control value
 *
 * Return the content of the control register
 */
uint32_t __get_CONTROL(void)
{
     1e4:	b480      	push	{r7}
     1e6:	b083      	sub	sp, #12
     1e8:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1ea:	2300      	movs	r3, #0
     1ec:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, control" : "=r" (result) );
     1ee:	f3ef 8314 	mrs	r3, CONTROL
     1f2:	607b      	str	r3, [r7, #4]
  return(result);
     1f4:	687b      	ldr	r3, [r7, #4]
}
     1f6:	4618      	mov	r0, r3
     1f8:	370c      	adds	r7, #12
     1fa:	46bd      	mov	sp, r7
     1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     200:	4770      	bx	lr
     202:	bf00      	nop

00000204 <__set_CONTROL>:
 * @param  control  Control value
 *
 * Set the control register
 */
void __set_CONTROL(uint32_t control)
{
     204:	b480      	push	{r7}
     206:	b083      	sub	sp, #12
     208:	af00      	add	r7, sp, #0
     20a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR control, %0" : : "r" (control) );
     20c:	687b      	ldr	r3, [r7, #4]
     20e:	f383 8814 	msr	CONTROL, r3
}
     212:	370c      	adds	r7, #12
     214:	46bd      	mov	sp, r7
     216:	f85d 7b04 	ldr.w	r7, [sp], #4
     21a:	4770      	bx	lr

0000021c <__REV>:
 * @return        reversed value
 *
 * Reverse byte order in integer value
 */
uint32_t __REV(uint32_t value)
{
     21c:	b480      	push	{r7}
     21e:	b085      	sub	sp, #20
     220:	af00      	add	r7, sp, #0
     222:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     224:	2300      	movs	r3, #0
     226:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
     228:	687b      	ldr	r3, [r7, #4]
     22a:	ba1b      	rev	r3, r3
     22c:	60fb      	str	r3, [r7, #12]
  return(result);
     22e:	68fb      	ldr	r3, [r7, #12]
}
     230:	4618      	mov	r0, r3
     232:	3714      	adds	r7, #20
     234:	46bd      	mov	sp, r7
     236:	f85d 7b04 	ldr.w	r7, [sp], #4
     23a:	4770      	bx	lr

0000023c <__REV16>:
 * @return        reversed value
 *
 * Reverse byte order in unsigned short value
 */
uint32_t __REV16(uint16_t value)
{
     23c:	b480      	push	{r7}
     23e:	b085      	sub	sp, #20
     240:	af00      	add	r7, sp, #0
     242:	4603      	mov	r3, r0
     244:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     246:	2300      	movs	r3, #0
     248:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
     24a:	88fb      	ldrh	r3, [r7, #6]
     24c:	ba5b      	rev16	r3, r3
     24e:	60fb      	str	r3, [r7, #12]
  return(result);
     250:	68fb      	ldr	r3, [r7, #12]
}
     252:	4618      	mov	r0, r3
     254:	3714      	adds	r7, #20
     256:	46bd      	mov	sp, r7
     258:	f85d 7b04 	ldr.w	r7, [sp], #4
     25c:	4770      	bx	lr
     25e:	bf00      	nop

00000260 <__REVSH>:
 * @return        reversed value
 *
 * Reverse byte order in signed short value with sign extension to integer
 */
int32_t __REVSH(int16_t value)
{
     260:	b480      	push	{r7}
     262:	b085      	sub	sp, #20
     264:	af00      	add	r7, sp, #0
     266:	4603      	mov	r3, r0
     268:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     26a:	2300      	movs	r3, #0
     26c:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
     26e:	88fb      	ldrh	r3, [r7, #6]
     270:	badb      	revsh	r3, r3
     272:	60fb      	str	r3, [r7, #12]
  return(result);
     274:	68fb      	ldr	r3, [r7, #12]
}
     276:	4618      	mov	r0, r3
     278:	3714      	adds	r7, #20
     27a:	46bd      	mov	sp, r7
     27c:	f85d 7b04 	ldr.w	r7, [sp], #4
     280:	4770      	bx	lr
     282:	bf00      	nop

00000284 <__RBIT>:
 * @return        reversed value
 *
 * Reverse bit order of value
 */
uint32_t __RBIT(uint32_t value)
{
     284:	b480      	push	{r7}
     286:	b085      	sub	sp, #20
     288:	af00      	add	r7, sp, #0
     28a:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     28c:	2300      	movs	r3, #0
     28e:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
     290:	687b      	ldr	r3, [r7, #4]
     292:	fa93 f3a3 	rbit	r3, r3
     296:	60fb      	str	r3, [r7, #12]
   return(result);
     298:	68fb      	ldr	r3, [r7, #12]
}
     29a:	4618      	mov	r0, r3
     29c:	3714      	adds	r7, #20
     29e:	46bd      	mov	sp, r7
     2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
     2a4:	4770      	bx	lr
     2a6:	bf00      	nop

000002a8 <__LDREXB>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 8 bit value
 */
uint8_t __LDREXB(uint8_t *addr)
{
     2a8:	b480      	push	{r7}
     2aa:	b085      	sub	sp, #20
     2ac:	af00      	add	r7, sp, #0
     2ae:	6078      	str	r0, [r7, #4]
    uint8_t result=0;
     2b0:	2300      	movs	r3, #0
     2b2:	73fb      	strb	r3, [r7, #15]

   __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) );
     2b4:	687b      	ldr	r3, [r7, #4]
     2b6:	e8d3 3f4f 	ldrexb	r3, [r3]
     2ba:	73fb      	strb	r3, [r7, #15]
   return(result);
     2bc:	7bfb      	ldrb	r3, [r7, #15]
}
     2be:	4618      	mov	r0, r3
     2c0:	3714      	adds	r7, #20
     2c2:	46bd      	mov	sp, r7
     2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     2c8:	4770      	bx	lr
     2ca:	bf00      	nop

000002cc <__LDREXH>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 16 bit values
 */
uint16_t __LDREXH(uint16_t *addr)
{
     2cc:	b480      	push	{r7}
     2ce:	b085      	sub	sp, #20
     2d0:	af00      	add	r7, sp, #0
     2d2:	6078      	str	r0, [r7, #4]
    uint16_t result=0;
     2d4:	2300      	movs	r3, #0
     2d6:	81fb      	strh	r3, [r7, #14]

   __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) );
     2d8:	687b      	ldr	r3, [r7, #4]
     2da:	e8d3 3f5f 	ldrexh	r3, [r3]
     2de:	81fb      	strh	r3, [r7, #14]
   return(result);
     2e0:	89fb      	ldrh	r3, [r7, #14]
}
     2e2:	4618      	mov	r0, r3
     2e4:	3714      	adds	r7, #20
     2e6:	46bd      	mov	sp, r7
     2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
     2ec:	4770      	bx	lr
     2ee:	bf00      	nop

000002f0 <__LDREXW>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 32 bit values
 */
uint32_t __LDREXW(uint32_t *addr)
{
     2f0:	b480      	push	{r7}
     2f2:	b085      	sub	sp, #20
     2f4:	af00      	add	r7, sp, #0
     2f6:	6078      	str	r0, [r7, #4]
    uint32_t result=0;
     2f8:	2300      	movs	r3, #0
     2fa:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     2fc:	687b      	ldr	r3, [r7, #4]
     2fe:	e853 3f00 	ldrex	r3, [r3]
     302:	60fb      	str	r3, [r7, #12]
   return(result);
     304:	68fb      	ldr	r3, [r7, #12]
}
     306:	4618      	mov	r0, r3
     308:	3714      	adds	r7, #20
     30a:	46bd      	mov	sp, r7
     30c:	f85d 7b04 	ldr.w	r7, [sp], #4
     310:	4770      	bx	lr
     312:	bf00      	nop

00000314 <__STREXW>:
 * @return        successful / failed
 *
 * Exclusive STR command for 32 bit values
 */
uint32_t __STREXW(uint32_t value, uint32_t *addr)
{
     314:	b480      	push	{r7}
     316:	b085      	sub	sp, #20
     318:	af00      	add	r7, sp, #0
     31a:	6078      	str	r0, [r7, #4]
     31c:	6039      	str	r1, [r7, #0]
   uint32_t result=0;
     31e:	2300      	movs	r3, #0
     320:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
     322:	683b      	ldr	r3, [r7, #0]
     324:	687a      	ldr	r2, [r7, #4]
     326:	e843 2300 	strex	r3, r2, [r3]
     32a:	60fb      	str	r3, [r7, #12]
   return(result);
     32c:	68fb      	ldr	r3, [r7, #12]
}
     32e:	4618      	mov	r0, r3
     330:	3714      	adds	r7, #20
     332:	46bd      	mov	sp, r7
     334:	f85d 7b04 	ldr.w	r7, [sp], #4
     338:	4770      	bx	lr
     33a:	bf00      	nop

0000033c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
     33c:	b580      	push	{r7, lr}
     33e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     344:	f2c4 0302 	movt	r3, #16386	; 0x4002
     348:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     34c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     350:	6812      	ldr	r2, [r2, #0]
     352:	f042 0201 	orr.w	r2, r2, #1
     356:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     358:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     35c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     360:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     364:	f2c4 0302 	movt	r3, #16386	; 0x4002
     368:	6859      	ldr	r1, [r3, #4]
     36a:	2300      	movs	r3, #0
     36c:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     370:	400b      	ands	r3, r1
     372:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     378:	f2c4 0302 	movt	r3, #16386	; 0x4002
     37c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     380:	f2c4 0202 	movt	r2, #16386	; 0x4002
     384:	6812      	ldr	r2, [r2, #0]
     386:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     38a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     38e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     394:	f2c4 0302 	movt	r3, #16386	; 0x4002
     398:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     39c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3a0:	6812      	ldr	r2, [r2, #0]
     3a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     3a6:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     3a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     3b4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3b8:	6852      	ldr	r2, [r2, #4]
     3ba:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     3be:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     3c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3c8:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     3cc:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
     3ce:	f000 f8a7 	bl	520 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
     3d2:	f44f 436d 	mov.w	r3, #60672	; 0xed00
     3d6:	f2ce 0300 	movt	r3, #57344	; 0xe000
     3da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
     3de:	609a      	str	r2, [r3, #8]
#endif
}
     3e0:	bd80      	pop	{r7, pc}
     3e2:	bf00      	nop

000003e4 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
     3e4:	b480      	push	{r7}
     3e6:	b085      	sub	sp, #20
     3e8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
     3ea:	2300      	movs	r3, #0
     3ec:	60fb      	str	r3, [r7, #12]
     3ee:	2300      	movs	r3, #0
     3f0:	60bb      	str	r3, [r7, #8]
     3f2:	2300      	movs	r3, #0
     3f4:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
     3f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3fe:	685b      	ldr	r3, [r3, #4]
     400:	f003 030c 	and.w	r3, r3, #12
     404:	60fb      	str	r3, [r7, #12]

  switch (tmp)
     406:	68fb      	ldr	r3, [r7, #12]
     408:	2b04      	cmp	r3, #4
     40a:	d00d      	beq.n	428 <SystemCoreClockUpdate+0x44>
     40c:	2b08      	cmp	r3, #8
     40e:	d015      	beq.n	43c <SystemCoreClockUpdate+0x58>
     410:	2b00      	cmp	r3, #0
     412:	d15b      	bne.n	4cc <SystemCoreClockUpdate+0xe8>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
     414:	f240 0300 	movw	r3, #0
     418:	f2c2 0300 	movt	r3, #8192	; 0x2000
     41c:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     420:	f2c0 027a 	movt	r2, #122	; 0x7a
     424:	601a      	str	r2, [r3, #0]
      break;
     426:	e05b      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
     428:	f240 0300 	movw	r3, #0
     42c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     430:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     434:	f2c0 027a 	movt	r2, #122	; 0x7a
     438:	601a      	str	r2, [r3, #0]
      break;
     43a:	e051      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
     43c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     440:	f2c4 0302 	movt	r3, #16386	; 0x4002
     444:	685b      	ldr	r3, [r3, #4]
     446:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     44a:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
     44c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     450:	f2c4 0302 	movt	r3, #16386	; 0x4002
     454:	685b      	ldr	r3, [r3, #4]
     456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     45a:	607b      	str	r3, [r7, #4]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     45c:	68bb      	ldr	r3, [r7, #8]
     45e:	0c9b      	lsrs	r3, r3, #18
     460:	3302      	adds	r3, #2
     462:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00)
     464:	687b      	ldr	r3, [r7, #4]
     466:	2b00      	cmp	r3, #0
     468:	d10c      	bne.n	484 <SystemCoreClockUpdate+0xa0>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
     46a:	68ba      	ldr	r2, [r7, #8]
     46c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     470:	f2c0 033d 	movt	r3, #61	; 0x3d
     474:	fb03 f202 	mul.w	r2, r3, r2
     478:	f240 0300 	movw	r3, #0
     47c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     480:	601a      	str	r2, [r3, #0]
     482:	e022      	b.n	4ca <SystemCoreClockUpdate+0xe6>
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
     484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     488:	f2c4 0302 	movt	r3, #16386	; 0x4002
     48c:	685b      	ldr	r3, [r3, #4]
     48e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     492:	2b00      	cmp	r3, #0
     494:	d00c      	beq.n	4b0 <SystemCoreClockUpdate+0xcc>
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
     496:	68ba      	ldr	r2, [r7, #8]
     498:	f44f 6310 	mov.w	r3, #2304	; 0x900
     49c:	f2c0 033d 	movt	r3, #61	; 0x3d
     4a0:	fb03 f202 	mul.w	r2, r3, r2
     4a4:	f240 0300 	movw	r3, #0
     4a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4ac:	601a      	str	r2, [r3, #0]
     4ae:	e00c      	b.n	4ca <SystemCoreClockUpdate+0xe6>
        }
        else
        {
          SystemCoreClock = HSE_VALUE * pllmull;
     4b0:	68ba      	ldr	r2, [r7, #8]
     4b2:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     4b6:	f2c0 037a 	movt	r3, #122	; 0x7a
     4ba:	fb03 f202 	mul.w	r2, r3, r2
     4be:	f240 0300 	movw	r3, #0
     4c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4c6:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2;
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     4c8:	e00a      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
     4ca:	e009      	b.n	4e0 <SystemCoreClockUpdate+0xfc>

    default:
      SystemCoreClock = HSI_VALUE;
     4cc:	f240 0300 	movw	r3, #0
     4d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4d4:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     4d8:	f2c0 027a 	movt	r2, #122	; 0x7a
     4dc:	601a      	str	r2, [r3, #0]
      break;
     4de:	bf00      	nop
  }

  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
     4e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     4e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     4e8:	685b      	ldr	r3, [r3, #4]
     4ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     4ee:	091a      	lsrs	r2, r3, #4
     4f0:	f240 0304 	movw	r3, #4
     4f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4f8:	5c9b      	ldrb	r3, [r3, r2]
     4fa:	b2db      	uxtb	r3, r3
     4fc:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
     4fe:	f240 0300 	movw	r3, #0
     502:	f2c2 0300 	movt	r3, #8192	; 0x2000
     506:	681a      	ldr	r2, [r3, #0]
     508:	68fb      	ldr	r3, [r7, #12]
     50a:	40da      	lsrs	r2, r3
     50c:	f240 0300 	movw	r3, #0
     510:	f2c2 0300 	movt	r3, #8192	; 0x2000
     514:	601a      	str	r2, [r3, #0]
}
     516:	3714      	adds	r7, #20
     518:	46bd      	mov	sp, r7
     51a:	f85d 7b04 	ldr.w	r7, [sp], #4
     51e:	4770      	bx	lr

00000520 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
     520:	b580      	push	{r7, lr}
     522:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
     524:	f000 f802 	bl	52c <SetSysClockTo72>
#endif

 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */
}
     528:	bd80      	pop	{r7, pc}
     52a:	bf00      	nop

0000052c <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
     52c:	b480      	push	{r7}
     52e:	b083      	sub	sp, #12
     530:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
     532:	2300      	movs	r3, #0
     534:	607b      	str	r3, [r7, #4]
     536:	2300      	movs	r3, #0
     538:	603b      	str	r3, [r7, #0]

  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
     53a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     53e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     542:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     546:	f2c4 0202 	movt	r2, #16386	; 0x4002
     54a:	6812      	ldr	r2, [r2, #0]
     54c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     550:	601a      	str	r2, [r3, #0]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
     552:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     556:	f2c4 0302 	movt	r3, #16386	; 0x4002
     55a:	681b      	ldr	r3, [r3, #0]
     55c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     560:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
     562:	687b      	ldr	r3, [r7, #4]
     564:	3301      	adds	r3, #1
     566:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
     568:	683b      	ldr	r3, [r7, #0]
     56a:	2b00      	cmp	r3, #0
     56c:	d103      	bne.n	576 <SetSysClockTo72+0x4a>
     56e:	687b      	ldr	r3, [r7, #4]
     570:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     574:	d1ed      	bne.n	552 <SetSysClockTo72+0x26>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
     576:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     57a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     57e:	681b      	ldr	r3, [r3, #0]
     580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     584:	2b00      	cmp	r3, #0
     586:	d002      	beq.n	58e <SetSysClockTo72+0x62>
  {
    HSEStatus = (uint32_t)0x01;
     588:	2301      	movs	r3, #1
     58a:	603b      	str	r3, [r7, #0]
     58c:	e001      	b.n	592 <SetSysClockTo72+0x66>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
     58e:	2300      	movs	r3, #0
     590:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
     592:	683b      	ldr	r3, [r7, #0]
     594:	2b01      	cmp	r3, #1
     596:	f040 8094 	bne.w	6c2 <SetSysClockTo72+0x196>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
     59a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     59e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5a6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5aa:	6812      	ldr	r2, [r2, #0]
     5ac:	f042 0210 	orr.w	r2, r2, #16
     5b0:	601a      	str	r2, [r3, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
     5b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5be:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5c2:	6812      	ldr	r2, [r2, #0]
     5c4:	f022 0203 	bic.w	r2, r2, #3
     5c8:	601a      	str	r2, [r3, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;
     5ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5d6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5da:	6812      	ldr	r2, [r2, #0]
     5dc:	f042 0202 	orr.w	r2, r2, #2
     5e0:	601a      	str	r2, [r3, #0]


    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
     5e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     5ee:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5f2:	6852      	ldr	r2, [r2, #4]
     5f4:	605a      	str	r2, [r3, #4]

    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
     5f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     602:	f2c4 0202 	movt	r2, #16386	; 0x4002
     606:	6852      	ldr	r2, [r2, #4]
     608:	605a      	str	r2, [r3, #4]

    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
     60a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     60e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     612:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     616:	f2c4 0202 	movt	r2, #16386	; 0x4002
     61a:	6852      	ldr	r2, [r2, #4]
     61c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     620:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 |
                            RCC_CFGR_PLLMULL9);
#else
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
     622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     626:	f2c4 0302 	movt	r3, #16386	; 0x4002
     62a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     62e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     632:	6852      	ldr	r2, [r2, #4]
     634:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
     638:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
     63a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     63e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     642:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     646:	f2c4 0202 	movt	r2, #16386	; 0x4002
     64a:	6852      	ldr	r2, [r2, #4]
     64c:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
     650:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
     652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     656:	f2c4 0302 	movt	r3, #16386	; 0x4002
     65a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     65e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     662:	6812      	ldr	r2, [r2, #0]
     664:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     668:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
     66a:	bf00      	nop
     66c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     670:	f2c4 0302 	movt	r3, #16386	; 0x4002
     674:	681b      	ldr	r3, [r3, #0]
     676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
     67a:	2b00      	cmp	r3, #0
     67c:	d0f6      	beq.n	66c <SetSysClockTo72+0x140>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
     67e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     682:	f2c4 0302 	movt	r3, #16386	; 0x4002
     686:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     68a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     68e:	6852      	ldr	r2, [r2, #4]
     690:	f022 0203 	bic.w	r2, r2, #3
     694:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
     696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     69a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     69e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6a2:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6a6:	6852      	ldr	r2, [r2, #4]
     6a8:	f042 0202 	orr.w	r2, r2, #2
     6ac:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
     6ae:	bf00      	nop
     6b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6b8:	685b      	ldr	r3, [r3, #4]
     6ba:	f003 030c 	and.w	r3, r3, #12
     6be:	2b08      	cmp	r3, #8
     6c0:	d1f6      	bne.n	6b0 <SetSysClockTo72+0x184>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }
}
     6c2:	370c      	adds	r7, #12
     6c4:	46bd      	mov	sp, r7
     6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
     6ca:	4770      	bx	lr
     6cc:	00017410 	.word	0x00017410
     6d0:	20000000 	.word	0x20000000
     6d4:	200001a0 	.word	0x200001a0
     6d8:	200001a0 	.word	0x200001a0
     6dc:	2000ae38 	.word	0x2000ae38

000006e0 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
     6e0:	b480      	push	{r7}
     6e2:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     6e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6f0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6f4:	6812      	ldr	r2, [r2, #0]
     6f6:	f042 0201 	orr.w	r2, r2, #1
     6fa:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     6fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     700:	f2c4 0202 	movt	r2, #16386	; 0x4002
     704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     708:	f2c4 0302 	movt	r3, #16386	; 0x4002
     70c:	6859      	ldr	r1, [r3, #4]
     70e:	2300      	movs	r3, #0
     710:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     714:	400b      	ands	r3, r1
     716:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     718:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     71c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     720:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     724:	f2c4 0202 	movt	r2, #16386	; 0x4002
     728:	6812      	ldr	r2, [r2, #0]
     72a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     72e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     732:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     738:	f2c4 0302 	movt	r3, #16386	; 0x4002
     73c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     740:	f2c4 0202 	movt	r2, #16386	; 0x4002
     744:	6812      	ldr	r2, [r2, #0]
     746:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     74a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     74c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     750:	f2c4 0302 	movt	r3, #16386	; 0x4002
     754:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     758:	f2c4 0202 	movt	r2, #16386	; 0x4002
     75c:	6852      	ldr	r2, [r2, #4]
     75e:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     762:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     768:	f2c4 0302 	movt	r3, #16386	; 0x4002
     76c:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     770:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
     772:	46bd      	mov	sp, r7
     774:	f85d 7b04 	ldr.w	r7, [sp], #4
     778:	4770      	bx	lr
     77a:	bf00      	nop

0000077c <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
     77c:	b480      	push	{r7}
     77e:	b083      	sub	sp, #12
     780:	af00      	add	r7, sp, #0
     782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
     784:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     788:	f2c4 0302 	movt	r3, #16386	; 0x4002
     78c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     790:	f2c4 0202 	movt	r2, #16386	; 0x4002
     794:	6812      	ldr	r2, [r2, #0]
     796:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     79a:	601a      	str	r2, [r3, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
     79c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ac:	6812      	ldr	r2, [r2, #0]
     7ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     7b2:	601a      	str	r2, [r3, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
     7b4:	687b      	ldr	r3, [r7, #4]
     7b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
     7ba:	d003      	beq.n	7c4 <RCC_HSEConfig+0x48>
     7bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
     7c0:	d00d      	beq.n	7de <RCC_HSEConfig+0x62>
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
      break;

    default:
      break;
     7c2:	e019      	b.n	7f8 <RCC_HSEConfig+0x7c>
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
     7c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7d0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7d4:	6812      	ldr	r2, [r2, #0]
     7d6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     7da:	601a      	str	r2, [r3, #0]
      break;
     7dc:	e00c      	b.n	7f8 <RCC_HSEConfig+0x7c>

    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
     7de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7ea:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ee:	6812      	ldr	r2, [r2, #0]
     7f0:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
     7f4:	601a      	str	r2, [r3, #0]
      break;
     7f6:	bf00      	nop

    default:
      break;
  }
}
     7f8:	370c      	adds	r7, #12
     7fa:	46bd      	mov	sp, r7
     7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     800:	4770      	bx	lr
     802:	bf00      	nop

00000804 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
     804:	b580      	push	{r7, lr}
     806:	b082      	sub	sp, #8
     808:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
     80a:	2300      	movs	r3, #0
     80c:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
     80e:	2300      	movs	r3, #0
     810:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
     812:	2300      	movs	r3, #0
     814:	71bb      	strb	r3, [r7, #6]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
     816:	2031      	movs	r0, #49	; 0x31
     818:	f000 fba2 	bl	f60 <RCC_GetFlagStatus>
     81c:	4603      	mov	r3, r0
     81e:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;
     820:	683b      	ldr	r3, [r7, #0]
     822:	3301      	adds	r3, #1
     824:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
     826:	683b      	ldr	r3, [r7, #0]
     828:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     82c:	d002      	beq.n	834 <RCC_WaitForHSEStartUp+0x30>
     82e:	79bb      	ldrb	r3, [r7, #6]
     830:	2b00      	cmp	r3, #0
     832:	d0f0      	beq.n	816 <RCC_WaitForHSEStartUp+0x12>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
     834:	2031      	movs	r0, #49	; 0x31
     836:	f000 fb93 	bl	f60 <RCC_GetFlagStatus>
     83a:	4603      	mov	r3, r0
     83c:	2b00      	cmp	r3, #0
     83e:	d002      	beq.n	846 <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
     840:	2301      	movs	r3, #1
     842:	71fb      	strb	r3, [r7, #7]
     844:	e001      	b.n	84a <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
     846:	2300      	movs	r3, #0
     848:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
     84a:	79fb      	ldrb	r3, [r7, #7]
}
     84c:	4618      	mov	r0, r3
     84e:	3708      	adds	r7, #8
     850:	46bd      	mov	sp, r7
     852:	bd80      	pop	{r7, pc}

00000854 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *   This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
     854:	b480      	push	{r7}
     856:	b085      	sub	sp, #20
     858:	af00      	add	r7, sp, #0
     85a:	4603      	mov	r3, r0
     85c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
     85e:	2300      	movs	r3, #0
     860:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
     862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     866:	f2c4 0302 	movt	r3, #16386	; 0x4002
     86a:	681b      	ldr	r3, [r3, #0]
     86c:	60fb      	str	r3, [r7, #12]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
     86e:	68fb      	ldr	r3, [r7, #12]
     870:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
     874:	60fb      	str	r3, [r7, #12]
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
     876:	79fb      	ldrb	r3, [r7, #7]
     878:	00db      	lsls	r3, r3, #3
     87a:	68fa      	ldr	r2, [r7, #12]
     87c:	4313      	orrs	r3, r2
     87e:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CR = tmpreg;
     880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     884:	f2c4 0302 	movt	r3, #16386	; 0x4002
     888:	68fa      	ldr	r2, [r7, #12]
     88a:	601a      	str	r2, [r3, #0]
}
     88c:	3714      	adds	r7, #20
     88e:	46bd      	mov	sp, r7
     890:	f85d 7b04 	ldr.w	r7, [sp], #4
     894:	4770      	bx	lr
     896:	bf00      	nop

00000898 <RCC_HSICmd>:
  * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
  * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
     898:	b480      	push	{r7}
     89a:	b083      	sub	sp, #12
     89c:	af00      	add	r7, sp, #0
     89e:	4603      	mov	r3, r0
     8a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
     8a2:	2300      	movs	r3, #0
     8a4:	f2c4 2342 	movt	r3, #16962	; 0x4242
     8a8:	79fa      	ldrb	r2, [r7, #7]
     8aa:	601a      	str	r2, [r3, #0]
}
     8ac:	370c      	adds	r7, #12
     8ae:	46bd      	mov	sp, r7
     8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
     8b4:	4770      	bx	lr
     8b6:	bf00      	nop

000008b8 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
     8b8:	b480      	push	{r7}
     8ba:	b085      	sub	sp, #20
     8bc:	af00      	add	r7, sp, #0
     8be:	6078      	str	r0, [r7, #4]
     8c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
     8c2:	2300      	movs	r3, #0
     8c4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
     8c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ce:	685b      	ldr	r3, [r3, #4]
     8d0:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
     8d2:	68fb      	ldr	r3, [r7, #12]
     8d4:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
     8d8:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
     8da:	687a      	ldr	r2, [r7, #4]
     8dc:	683b      	ldr	r3, [r7, #0]
     8de:	4313      	orrs	r3, r2
     8e0:	68fa      	ldr	r2, [r7, #12]
     8e2:	4313      	orrs	r3, r2
     8e4:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     8e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ee:	68fa      	ldr	r2, [r7, #12]
     8f0:	605a      	str	r2, [r3, #4]
}
     8f2:	3714      	adds	r7, #20
     8f4:	46bd      	mov	sp, r7
     8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
     8fa:	4770      	bx	lr

000008fc <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
     8fc:	b480      	push	{r7}
     8fe:	b083      	sub	sp, #12
     900:	af00      	add	r7, sp, #0
     902:	4603      	mov	r3, r0
     904:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
     906:	2360      	movs	r3, #96	; 0x60
     908:	f2c4 2342 	movt	r3, #16962	; 0x4242
     90c:	79fa      	ldrb	r2, [r7, #7]
     90e:	601a      	str	r2, [r3, #0]
}
     910:	370c      	adds	r7, #12
     912:	46bd      	mov	sp, r7
     914:	f85d 7b04 	ldr.w	r7, [sp], #4
     918:	4770      	bx	lr
     91a:	bf00      	nop

0000091c <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
     91c:	b480      	push	{r7}
     91e:	b085      	sub	sp, #20
     920:	af00      	add	r7, sp, #0
     922:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     924:	2300      	movs	r3, #0
     926:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
     928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     92c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     930:	685b      	ldr	r3, [r3, #4]
     932:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
     934:	68fb      	ldr	r3, [r7, #12]
     936:	f023 0303 	bic.w	r3, r3, #3
     93a:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
     93c:	68fa      	ldr	r2, [r7, #12]
     93e:	687b      	ldr	r3, [r7, #4]
     940:	4313      	orrs	r3, r2
     942:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     948:	f2c4 0302 	movt	r3, #16386	; 0x4002
     94c:	68fa      	ldr	r2, [r7, #12]
     94e:	605a      	str	r2, [r3, #4]
}
     950:	3714      	adds	r7, #20
     952:	46bd      	mov	sp, r7
     954:	f85d 7b04 	ldr.w	r7, [sp], #4
     958:	4770      	bx	lr
     95a:	bf00      	nop

0000095c <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
     95c:	b480      	push	{r7}
     95e:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
     960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     964:	f2c4 0302 	movt	r3, #16386	; 0x4002
     968:	685b      	ldr	r3, [r3, #4]
     96a:	b2db      	uxtb	r3, r3
     96c:	f003 030c 	and.w	r3, r3, #12
     970:	b2db      	uxtb	r3, r3
}
     972:	4618      	mov	r0, r3
     974:	46bd      	mov	sp, r7
     976:	f85d 7b04 	ldr.w	r7, [sp], #4
     97a:	4770      	bx	lr

0000097c <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
     97c:	b480      	push	{r7}
     97e:	b085      	sub	sp, #20
     980:	af00      	add	r7, sp, #0
     982:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     984:	2300      	movs	r3, #0
     986:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
     988:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     98c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     990:	685b      	ldr	r3, [r3, #4]
     992:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
     994:	68fb      	ldr	r3, [r7, #12]
     996:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
     99a:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
     99c:	68fa      	ldr	r2, [r7, #12]
     99e:	687b      	ldr	r3, [r7, #4]
     9a0:	4313      	orrs	r3, r2
     9a2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ac:	68fa      	ldr	r2, [r7, #12]
     9ae:	605a      	str	r2, [r3, #4]
}
     9b0:	3714      	adds	r7, #20
     9b2:	46bd      	mov	sp, r7
     9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9b8:	4770      	bx	lr
     9ba:	bf00      	nop

000009bc <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
     9bc:	b480      	push	{r7}
     9be:	b085      	sub	sp, #20
     9c0:	af00      	add	r7, sp, #0
     9c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     9c4:	2300      	movs	r3, #0
     9c6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     9c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9d0:	685b      	ldr	r3, [r3, #4]
     9d2:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
     9d4:	68fb      	ldr	r3, [r7, #12]
     9d6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
     9da:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
     9dc:	68fa      	ldr	r2, [r7, #12]
     9de:	687b      	ldr	r3, [r7, #4]
     9e0:	4313      	orrs	r3, r2
     9e2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ec:	68fa      	ldr	r2, [r7, #12]
     9ee:	605a      	str	r2, [r3, #4]
}
     9f0:	3714      	adds	r7, #20
     9f2:	46bd      	mov	sp, r7
     9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9f8:	4770      	bx	lr
     9fa:	bf00      	nop

000009fc <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
     9fc:	b480      	push	{r7}
     9fe:	b085      	sub	sp, #20
     a00:	af00      	add	r7, sp, #0
     a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     a04:	2300      	movs	r3, #0
     a06:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a0c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a10:	685b      	ldr	r3, [r3, #4]
     a12:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
     a14:	68fb      	ldr	r3, [r7, #12]
     a16:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
     a1a:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
     a1c:	687b      	ldr	r3, [r7, #4]
     a1e:	00db      	lsls	r3, r3, #3
     a20:	68fa      	ldr	r2, [r7, #12]
     a22:	4313      	orrs	r3, r2
     a24:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     a26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a2a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a2e:	68fa      	ldr	r2, [r7, #12]
     a30:	605a      	str	r2, [r3, #4]
}
     a32:	3714      	adds	r7, #20
     a34:	46bd      	mov	sp, r7
     a36:	f85d 7b04 	ldr.w	r7, [sp], #4
     a3a:	4770      	bx	lr

00000a3c <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
     a3c:	b480      	push	{r7}
     a3e:	b083      	sub	sp, #12
     a40:	af00      	add	r7, sp, #0
     a42:	4602      	mov	r2, r0
     a44:	460b      	mov	r3, r1
     a46:	71fa      	strb	r2, [r7, #7]
     a48:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     a4a:	79bb      	ldrb	r3, [r7, #6]
     a4c:	2b00      	cmp	r3, #0
     a4e:	d00e      	beq.n	a6e <RCC_ITConfig+0x32>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
     a50:	f241 0309 	movw	r3, #4105	; 0x1009
     a54:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a58:	f241 0209 	movw	r2, #4105	; 0x1009
     a5c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a60:	7812      	ldrb	r2, [r2, #0]
     a62:	b2d1      	uxtb	r1, r2
     a64:	79fa      	ldrb	r2, [r7, #7]
     a66:	430a      	orrs	r2, r1
     a68:	b2d2      	uxtb	r2, r2
     a6a:	701a      	strb	r2, [r3, #0]
     a6c:	e00f      	b.n	a8e <RCC_ITConfig+0x52>
  }
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
     a6e:	f241 0309 	movw	r3, #4105	; 0x1009
     a72:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a76:	f241 0209 	movw	r2, #4105	; 0x1009
     a7a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a7e:	7812      	ldrb	r2, [r2, #0]
     a80:	b2d1      	uxtb	r1, r2
     a82:	79fa      	ldrb	r2, [r7, #7]
     a84:	43d2      	mvns	r2, r2
     a86:	b2d2      	uxtb	r2, r2
     a88:	400a      	ands	r2, r1
     a8a:	b2d2      	uxtb	r2, r2
     a8c:	701a      	strb	r2, [r3, #0]
  }
}
     a8e:	370c      	adds	r7, #12
     a90:	46bd      	mov	sp, r7
     a92:	f85d 7b04 	ldr.w	r7, [sp], #4
     a96:	4770      	bx	lr

00000a98 <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
     a98:	b480      	push	{r7}
     a9a:	b083      	sub	sp, #12
     a9c:	af00      	add	r7, sp, #0
     a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
     aa0:	23d8      	movs	r3, #216	; 0xd8
     aa2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     aa6:	687a      	ldr	r2, [r7, #4]
     aa8:	601a      	str	r2, [r3, #0]
}
     aaa:	370c      	adds	r7, #12
     aac:	46bd      	mov	sp, r7
     aae:	f85d 7b04 	ldr.w	r7, [sp], #4
     ab2:	4770      	bx	lr

00000ab4 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
     ab4:	b480      	push	{r7}
     ab6:	b085      	sub	sp, #20
     ab8:	af00      	add	r7, sp, #0
     aba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     abc:	2300      	movs	r3, #0
     abe:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
     ac0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ac4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ac8:	685b      	ldr	r3, [r3, #4]
     aca:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
     acc:	68fb      	ldr	r3, [r7, #12]
     ace:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
     ad2:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
     ad4:	68fa      	ldr	r2, [r7, #12]
     ad6:	687b      	ldr	r3, [r7, #4]
     ad8:	4313      	orrs	r3, r2
     ada:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ae0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ae4:	68fa      	ldr	r2, [r7, #12]
     ae6:	605a      	str	r2, [r3, #4]
}
     ae8:	3714      	adds	r7, #20
     aea:	46bd      	mov	sp, r7
     aec:	f85d 7b04 	ldr.w	r7, [sp], #4
     af0:	4770      	bx	lr
     af2:	bf00      	nop

00000af4 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
     af4:	b480      	push	{r7}
     af6:	b083      	sub	sp, #12
     af8:	af00      	add	r7, sp, #0
     afa:	4603      	mov	r3, r0
     afc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     afe:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b02:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b06:	2200      	movs	r2, #0
     b08:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     b0a:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b0e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b12:	2200      	movs	r2, #0
     b14:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
     b16:	79fb      	ldrb	r3, [r7, #7]
     b18:	2b01      	cmp	r3, #1
     b1a:	d002      	beq.n	b22 <RCC_LSEConfig+0x2e>
     b1c:	2b04      	cmp	r3, #4
     b1e:	d007      	beq.n	b30 <RCC_LSEConfig+0x3c>
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;

    default:
      break;
     b20:	e00d      	b.n	b3e <RCC_LSEConfig+0x4a>
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
     b22:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b2a:	2201      	movs	r2, #1
     b2c:	701a      	strb	r2, [r3, #0]
      break;
     b2e:	e006      	b.n	b3e <RCC_LSEConfig+0x4a>

    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
     b30:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b34:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b38:	2205      	movs	r2, #5
     b3a:	701a      	strb	r2, [r3, #0]
      break;
     b3c:	bf00      	nop

    default:
      break;
  }
}
     b3e:	370c      	adds	r7, #12
     b40:	46bd      	mov	sp, r7
     b42:	f85d 7b04 	ldr.w	r7, [sp], #4
     b46:	4770      	bx	lr

00000b48 <RCC_LSICmd>:
  * @note   LSI can not be disabled if the IWDG is running.
  * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
     b48:	b480      	push	{r7}
     b4a:	b083      	sub	sp, #12
     b4c:	af00      	add	r7, sp, #0
     b4e:	4603      	mov	r3, r0
     b50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
     b52:	f44f 6390 	mov.w	r3, #1152	; 0x480
     b56:	f2c4 2342 	movt	r3, #16962	; 0x4242
     b5a:	79fa      	ldrb	r2, [r7, #7]
     b5c:	601a      	str	r2, [r3, #0]
}
     b5e:	370c      	adds	r7, #12
     b60:	46bd      	mov	sp, r7
     b62:	f85d 7b04 	ldr.w	r7, [sp], #4
     b66:	4770      	bx	lr

00000b68 <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
     b68:	b480      	push	{r7}
     b6a:	b083      	sub	sp, #12
     b6c:	af00      	add	r7, sp, #0
     b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
     b70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     b74:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     b7c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     b80:	6a11      	ldr	r1, [r2, #32]
     b82:	687a      	ldr	r2, [r7, #4]
     b84:	430a      	orrs	r2, r1
     b86:	621a      	str	r2, [r3, #32]
}
     b88:	370c      	adds	r7, #12
     b8a:	46bd      	mov	sp, r7
     b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
     b90:	4770      	bx	lr
     b92:	bf00      	nop

00000b94 <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
     b94:	b480      	push	{r7}
     b96:	b083      	sub	sp, #12
     b98:	af00      	add	r7, sp, #0
     b9a:	4603      	mov	r3, r0
     b9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
     b9e:	f240 433c 	movw	r3, #1084	; 0x43c
     ba2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     ba6:	79fa      	ldrb	r2, [r7, #7]
     ba8:	601a      	str	r2, [r3, #0]
}
     baa:	370c      	adds	r7, #12
     bac:	46bd      	mov	sp, r7
     bae:	f85d 7b04 	ldr.w	r7, [sp], #4
     bb2:	4770      	bx	lr

00000bb4 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using
  *         fractional value for HSE crystal.
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
     bb4:	b480      	push	{r7}
     bb6:	b087      	sub	sp, #28
     bb8:	af00      	add	r7, sp, #0
     bba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
     bbc:	2300      	movs	r3, #0
     bbe:	617b      	str	r3, [r7, #20]
     bc0:	2300      	movs	r3, #0
     bc2:	613b      	str	r3, [r7, #16]
     bc4:	2300      	movs	r3, #0
     bc6:	60fb      	str	r3, [r7, #12]
     bc8:	2300      	movs	r3, #0
     bca:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
     bcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     bd0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     bd4:	685b      	ldr	r3, [r3, #4]
     bd6:	f003 030c 	and.w	r3, r3, #12
     bda:	617b      	str	r3, [r7, #20]

  switch (tmp)
     bdc:	697b      	ldr	r3, [r7, #20]
     bde:	2b04      	cmp	r3, #4
     be0:	d00a      	beq.n	bf8 <RCC_GetClocksFreq+0x44>
     be2:	2b08      	cmp	r3, #8
     be4:	d00f      	beq.n	c06 <RCC_GetClocksFreq+0x52>
     be6:	2b00      	cmp	r3, #0
     be8:	d14c      	bne.n	c84 <RCC_GetClocksFreq+0xd0>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     bea:	687a      	ldr	r2, [r7, #4]
     bec:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bf0:	f2c0 037a 	movt	r3, #122	; 0x7a
     bf4:	6013      	str	r3, [r2, #0]
      break;
     bf6:	e04c      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
     bf8:	687a      	ldr	r2, [r7, #4]
     bfa:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bfe:	f2c0 037a 	movt	r3, #122	; 0x7a
     c02:	6013      	str	r3, [r2, #0]
      break;
     c04:	e045      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
     c06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c0a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c0e:	685b      	ldr	r3, [r3, #4]
     c10:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     c14:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
     c16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c1a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c1e:	685b      	ldr	r3, [r3, #4]
     c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     c24:	60fb      	str	r3, [r7, #12]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     c26:	693b      	ldr	r3, [r7, #16]
     c28:	0c9b      	lsrs	r3, r3, #18
     c2a:	3302      	adds	r3, #2
     c2c:	613b      	str	r3, [r7, #16]

      if (pllsource == 0x00)
     c2e:	68fb      	ldr	r3, [r7, #12]
     c30:	2b00      	cmp	r3, #0
     c32:	d109      	bne.n	c48 <RCC_GetClocksFreq+0x94>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
     c34:	693a      	ldr	r2, [r7, #16]
     c36:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c3a:	f2c0 033d 	movt	r3, #61	; 0x3d
     c3e:	fb03 f202 	mul.w	r2, r3, r2
     c42:	687b      	ldr	r3, [r7, #4]
     c44:	601a      	str	r2, [r3, #0]
     c46:	e01c      	b.n	c82 <RCC_GetClocksFreq+0xce>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
     c48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c4c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c50:	685b      	ldr	r3, [r3, #4]
     c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     c56:	2b00      	cmp	r3, #0
     c58:	d009      	beq.n	c6e <RCC_GetClocksFreq+0xba>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
     c5a:	693a      	ldr	r2, [r7, #16]
     c5c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c60:	f2c0 033d 	movt	r3, #61	; 0x3d
     c64:	fb03 f202 	mul.w	r2, r3, r2
     c68:	687b      	ldr	r3, [r7, #4]
     c6a:	601a      	str	r2, [r3, #0]
     c6c:	e009      	b.n	c82 <RCC_GetClocksFreq+0xce>
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
     c6e:	693a      	ldr	r2, [r7, #16]
     c70:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c74:	f2c0 037a 	movt	r3, #122	; 0x7a
     c78:	fb03 f202 	mul.w	r2, r3, r2
     c7c:	687b      	ldr	r3, [r7, #4]
     c7e:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2;
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     c80:	e007      	b.n	c92 <RCC_GetClocksFreq+0xde>
     c82:	e006      	b.n	c92 <RCC_GetClocksFreq+0xde>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     c84:	687a      	ldr	r2, [r7, #4]
     c86:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c8a:	f2c0 037a 	movt	r3, #122	; 0x7a
     c8e:	6013      	str	r3, [r2, #0]
      break;
     c90:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
     c92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c96:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c9a:	685b      	ldr	r3, [r3, #4]
     c9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     ca0:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
     ca2:	697b      	ldr	r3, [r7, #20]
     ca4:	091b      	lsrs	r3, r3, #4
     ca6:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     ca8:	f240 0314 	movw	r3, #20
     cac:	f2c2 0300 	movt	r3, #8192	; 0x2000
     cb0:	697a      	ldr	r2, [r7, #20]
     cb2:	4413      	add	r3, r2
     cb4:	781b      	ldrb	r3, [r3, #0]
     cb6:	b2db      	uxtb	r3, r3
     cb8:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
     cba:	687b      	ldr	r3, [r7, #4]
     cbc:	681a      	ldr	r2, [r3, #0]
     cbe:	68bb      	ldr	r3, [r7, #8]
     cc0:	40da      	lsrs	r2, r3
     cc2:	687b      	ldr	r3, [r7, #4]
     cc4:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
     cc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     cce:	685b      	ldr	r3, [r3, #4]
     cd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
     cd4:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
     cd6:	697b      	ldr	r3, [r7, #20]
     cd8:	0a1b      	lsrs	r3, r3, #8
     cda:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     cdc:	f240 0314 	movw	r3, #20
     ce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     ce4:	697a      	ldr	r2, [r7, #20]
     ce6:	4413      	add	r3, r2
     ce8:	781b      	ldrb	r3, [r3, #0]
     cea:	b2db      	uxtb	r3, r3
     cec:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     cee:	687b      	ldr	r3, [r7, #4]
     cf0:	685a      	ldr	r2, [r3, #4]
     cf2:	68bb      	ldr	r3, [r7, #8]
     cf4:	40da      	lsrs	r2, r3
     cf6:	687b      	ldr	r3, [r7, #4]
     cf8:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
     cfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cfe:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d02:	685b      	ldr	r3, [r3, #4]
     d04:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
     d08:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
     d0a:	697b      	ldr	r3, [r7, #20]
     d0c:	0adb      	lsrs	r3, r3, #11
     d0e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     d10:	f240 0314 	movw	r3, #20
     d14:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d18:	697a      	ldr	r2, [r7, #20]
     d1a:	4413      	add	r3, r2
     d1c:	781b      	ldrb	r3, [r3, #0]
     d1e:	b2db      	uxtb	r3, r3
     d20:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     d22:	687b      	ldr	r3, [r7, #4]
     d24:	685a      	ldr	r2, [r3, #4]
     d26:	68bb      	ldr	r3, [r7, #8]
     d28:	40da      	lsrs	r2, r3
     d2a:	687b      	ldr	r3, [r7, #4]
     d2c:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
     d2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d32:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d36:	685b      	ldr	r3, [r3, #4]
     d38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
     d3c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
     d3e:	697b      	ldr	r3, [r7, #20]
     d40:	0b9b      	lsrs	r3, r3, #14
     d42:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
     d44:	f240 0324 	movw	r3, #36	; 0x24
     d48:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d4c:	697a      	ldr	r2, [r7, #20]
     d4e:	4413      	add	r3, r2
     d50:	781b      	ldrb	r3, [r3, #0]
     d52:	b2db      	uxtb	r3, r3
     d54:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
     d56:	687b      	ldr	r3, [r7, #4]
     d58:	68da      	ldr	r2, [r3, #12]
     d5a:	68bb      	ldr	r3, [r7, #8]
     d5c:	fbb2 f2f3 	udiv	r2, r2, r3
     d60:	687b      	ldr	r3, [r7, #4]
     d62:	611a      	str	r2, [r3, #16]
}
     d64:	371c      	adds	r7, #28
     d66:	46bd      	mov	sp, r7
     d68:	f85d 7b04 	ldr.w	r7, [sp], #4
     d6c:	4770      	bx	lr
     d6e:	bf00      	nop

00000d70 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
     d70:	b480      	push	{r7}
     d72:	b083      	sub	sp, #12
     d74:	af00      	add	r7, sp, #0
     d76:	6078      	str	r0, [r7, #4]
     d78:	460b      	mov	r3, r1
     d7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
     d7c:	78fb      	ldrb	r3, [r7, #3]
     d7e:	2b00      	cmp	r3, #0
     d80:	d00c      	beq.n	d9c <RCC_AHBPeriphClockCmd+0x2c>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
     d82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d86:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     d8e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     d92:	6951      	ldr	r1, [r2, #20]
     d94:	687a      	ldr	r2, [r7, #4]
     d96:	430a      	orrs	r2, r1
     d98:	615a      	str	r2, [r3, #20]
     d9a:	e00c      	b.n	db6 <RCC_AHBPeriphClockCmd+0x46>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
     d9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     da0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     da4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     da8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dac:	6951      	ldr	r1, [r2, #20]
     dae:	687a      	ldr	r2, [r7, #4]
     db0:	43d2      	mvns	r2, r2
     db2:	400a      	ands	r2, r1
     db4:	615a      	str	r2, [r3, #20]
  }
}
     db6:	370c      	adds	r7, #12
     db8:	46bd      	mov	sp, r7
     dba:	f85d 7b04 	ldr.w	r7, [sp], #4
     dbe:	4770      	bx	lr

00000dc0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     dc0:	b480      	push	{r7}
     dc2:	b083      	sub	sp, #12
     dc4:	af00      	add	r7, sp, #0
     dc6:	6078      	str	r0, [r7, #4]
     dc8:	460b      	mov	r3, r1
     dca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     dcc:	78fb      	ldrb	r3, [r7, #3]
     dce:	2b00      	cmp	r3, #0
     dd0:	d00c      	beq.n	dec <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
     dd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     dd6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     dda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     dde:	f2c4 0202 	movt	r2, #16386	; 0x4002
     de2:	6991      	ldr	r1, [r2, #24]
     de4:	687a      	ldr	r2, [r7, #4]
     de6:	430a      	orrs	r2, r1
     de8:	619a      	str	r2, [r3, #24]
     dea:	e00c      	b.n	e06 <RCC_APB2PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
     dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     df0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     df4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     df8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dfc:	6991      	ldr	r1, [r2, #24]
     dfe:	687a      	ldr	r2, [r7, #4]
     e00:	43d2      	mvns	r2, r2
     e02:	400a      	ands	r2, r1
     e04:	619a      	str	r2, [r3, #24]
  }
}
     e06:	370c      	adds	r7, #12
     e08:	46bd      	mov	sp, r7
     e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e0e:	4770      	bx	lr

00000e10 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     e10:	b480      	push	{r7}
     e12:	b083      	sub	sp, #12
     e14:	af00      	add	r7, sp, #0
     e16:	6078      	str	r0, [r7, #4]
     e18:	460b      	mov	r3, r1
     e1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e1c:	78fb      	ldrb	r3, [r7, #3]
     e1e:	2b00      	cmp	r3, #0
     e20:	d00c      	beq.n	e3c <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
     e22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e2e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e32:	69d1      	ldr	r1, [r2, #28]
     e34:	687a      	ldr	r2, [r7, #4]
     e36:	430a      	orrs	r2, r1
     e38:	61da      	str	r2, [r3, #28]
     e3a:	e00c      	b.n	e56 <RCC_APB1PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
     e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e40:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e48:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e4c:	69d1      	ldr	r1, [r2, #28]
     e4e:	687a      	ldr	r2, [r7, #4]
     e50:	43d2      	mvns	r2, r2
     e52:	400a      	ands	r2, r1
     e54:	61da      	str	r2, [r3, #28]
  }
}
     e56:	370c      	adds	r7, #12
     e58:	46bd      	mov	sp, r7
     e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e5e:	4770      	bx	lr

00000e60 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     e60:	b480      	push	{r7}
     e62:	b083      	sub	sp, #12
     e64:	af00      	add	r7, sp, #0
     e66:	6078      	str	r0, [r7, #4]
     e68:	460b      	mov	r3, r1
     e6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e6c:	78fb      	ldrb	r3, [r7, #3]
     e6e:	2b00      	cmp	r3, #0
     e70:	d00c      	beq.n	e8c <RCC_APB2PeriphResetCmd+0x2c>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
     e72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e76:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e7e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e82:	68d1      	ldr	r1, [r2, #12]
     e84:	687a      	ldr	r2, [r7, #4]
     e86:	430a      	orrs	r2, r1
     e88:	60da      	str	r2, [r3, #12]
     e8a:	e00c      	b.n	ea6 <RCC_APB2PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
     e8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e90:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e98:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e9c:	68d1      	ldr	r1, [r2, #12]
     e9e:	687a      	ldr	r2, [r7, #4]
     ea0:	43d2      	mvns	r2, r2
     ea2:	400a      	ands	r2, r1
     ea4:	60da      	str	r2, [r3, #12]
  }
}
     ea6:	370c      	adds	r7, #12
     ea8:	46bd      	mov	sp, r7
     eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
     eae:	4770      	bx	lr

00000eb0 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     eb0:	b480      	push	{r7}
     eb2:	b083      	sub	sp, #12
     eb4:	af00      	add	r7, sp, #0
     eb6:	6078      	str	r0, [r7, #4]
     eb8:	460b      	mov	r3, r1
     eba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     ebc:	78fb      	ldrb	r3, [r7, #3]
     ebe:	2b00      	cmp	r3, #0
     ec0:	d00c      	beq.n	edc <RCC_APB1PeriphResetCmd+0x2c>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
     ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ec6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     eca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ece:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ed2:	6911      	ldr	r1, [r2, #16]
     ed4:	687a      	ldr	r2, [r7, #4]
     ed6:	430a      	orrs	r2, r1
     ed8:	611a      	str	r2, [r3, #16]
     eda:	e00c      	b.n	ef6 <RCC_APB1PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
     edc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ee0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ee4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ee8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     eec:	6911      	ldr	r1, [r2, #16]
     eee:	687a      	ldr	r2, [r7, #4]
     ef0:	43d2      	mvns	r2, r2
     ef2:	400a      	ands	r2, r1
     ef4:	611a      	str	r2, [r3, #16]
  }
}
     ef6:	370c      	adds	r7, #12
     ef8:	46bd      	mov	sp, r7
     efa:	f85d 7b04 	ldr.w	r7, [sp], #4
     efe:	4770      	bx	lr

00000f00 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
     f00:	b480      	push	{r7}
     f02:	b083      	sub	sp, #12
     f04:	af00      	add	r7, sp, #0
     f06:	4603      	mov	r3, r0
     f08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
     f0a:	f44f 6388 	mov.w	r3, #1088	; 0x440
     f0e:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f12:	79fa      	ldrb	r2, [r7, #7]
     f14:	601a      	str	r2, [r3, #0]
}
     f16:	370c      	adds	r7, #12
     f18:	46bd      	mov	sp, r7
     f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f1e:	4770      	bx	lr

00000f20 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
     f20:	b480      	push	{r7}
     f22:	b083      	sub	sp, #12
     f24:	af00      	add	r7, sp, #0
     f26:	4603      	mov	r3, r0
     f28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
     f2a:	234c      	movs	r3, #76	; 0x4c
     f2c:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f30:	79fa      	ldrb	r2, [r7, #7]
     f32:	601a      	str	r2, [r3, #0]
}
     f34:	370c      	adds	r7, #12
     f36:	46bd      	mov	sp, r7
     f38:	f85d 7b04 	ldr.w	r7, [sp], #4
     f3c:	4770      	bx	lr
     f3e:	bf00      	nop

00000f40 <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
     f40:	b480      	push	{r7}
     f42:	b083      	sub	sp, #12
     f44:	af00      	add	r7, sp, #0
     f46:	4603      	mov	r3, r0
     f48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
     f4a:	f241 0307 	movw	r3, #4103	; 0x1007
     f4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f52:	79fa      	ldrb	r2, [r7, #7]
     f54:	701a      	strb	r2, [r3, #0]
}
     f56:	370c      	adds	r7, #12
     f58:	46bd      	mov	sp, r7
     f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f5e:	4770      	bx	lr

00000f60 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
     f60:	b480      	push	{r7}
     f62:	b087      	sub	sp, #28
     f64:	af00      	add	r7, sp, #0
     f66:	4603      	mov	r3, r0
     f68:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
     f6a:	2300      	movs	r3, #0
     f6c:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
     f6e:	2300      	movs	r3, #0
     f70:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
     f72:	2300      	movs	r3, #0
     f74:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
     f76:	79fb      	ldrb	r3, [r7, #7]
     f78:	095b      	lsrs	r3, r3, #5
     f7a:	b2db      	uxtb	r3, r3
     f7c:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
     f7e:	68fb      	ldr	r3, [r7, #12]
     f80:	2b01      	cmp	r3, #1
     f82:	d106      	bne.n	f92 <RCC_GetFlagStatus+0x32>
  {
    statusreg = RCC->CR;
     f84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f88:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f8c:	681b      	ldr	r3, [r3, #0]
     f8e:	617b      	str	r3, [r7, #20]
     f90:	e00f      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
     f92:	68fb      	ldr	r3, [r7, #12]
     f94:	2b02      	cmp	r3, #2
     f96:	d106      	bne.n	fa6 <RCC_GetFlagStatus+0x46>
  {
    statusreg = RCC->BDCR;
     f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f9c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fa0:	6a1b      	ldr	r3, [r3, #32]
     fa2:	617b      	str	r3, [r7, #20]
     fa4:	e005      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
     fa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     faa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     fb0:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
     fb2:	79fb      	ldrb	r3, [r7, #7]
     fb4:	f003 031f 	and.w	r3, r3, #31
     fb8:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
     fba:	68fb      	ldr	r3, [r7, #12]
     fbc:	697a      	ldr	r2, [r7, #20]
     fbe:	fa22 f303 	lsr.w	r3, r2, r3
     fc2:	f003 0301 	and.w	r3, r3, #1
     fc6:	2b00      	cmp	r3, #0
     fc8:	d002      	beq.n	fd0 <RCC_GetFlagStatus+0x70>
  {
    bitstatus = SET;
     fca:	2301      	movs	r3, #1
     fcc:	74fb      	strb	r3, [r7, #19]
     fce:	e001      	b.n	fd4 <RCC_GetFlagStatus+0x74>
  }
  else
  {
    bitstatus = RESET;
     fd0:	2300      	movs	r3, #0
     fd2:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
     fd4:	7cfb      	ldrb	r3, [r7, #19]
}
     fd6:	4618      	mov	r0, r3
     fd8:	371c      	adds	r7, #28
     fda:	46bd      	mov	sp, r7
     fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
     fe0:	4770      	bx	lr
     fe2:	bf00      	nop

00000fe4 <RCC_ClearFlag>:
  *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
     fe4:	b480      	push	{r7}
     fe6:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
     fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     fec:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ff0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ff4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ff8:	6a52      	ldr	r2, [r2, #36]	; 0x24
     ffa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     ffe:	625a      	str	r2, [r3, #36]	; 0x24
}
    1000:	46bd      	mov	sp, r7
    1002:	f85d 7b04 	ldr.w	r7, [sp], #4
    1006:	4770      	bx	lr

00001008 <RCC_GetITStatus>:
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  *
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
    1008:	b480      	push	{r7}
    100a:	b085      	sub	sp, #20
    100c:	af00      	add	r7, sp, #0
    100e:	4603      	mov	r3, r0
    1010:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
    1012:	2300      	movs	r3, #0
    1014:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
    1016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    101a:	f2c4 0302 	movt	r3, #16386	; 0x4002
    101e:	689a      	ldr	r2, [r3, #8]
    1020:	79fb      	ldrb	r3, [r7, #7]
    1022:	4013      	ands	r3, r2
    1024:	2b00      	cmp	r3, #0
    1026:	d002      	beq.n	102e <RCC_GetITStatus+0x26>
  {
    bitstatus = SET;
    1028:	2301      	movs	r3, #1
    102a:	73fb      	strb	r3, [r7, #15]
    102c:	e001      	b.n	1032 <RCC_GetITStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    102e:	2300      	movs	r3, #0
    1030:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the RCC_IT status */
  return  bitstatus;
    1032:	7bfb      	ldrb	r3, [r7, #15]
}
    1034:	4618      	mov	r0, r3
    1036:	3714      	adds	r7, #20
    1038:	46bd      	mov	sp, r7
    103a:	f85d 7b04 	ldr.w	r7, [sp], #4
    103e:	4770      	bx	lr

00001040 <RCC_ClearITPendingBit>:
  *
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
    1040:	b480      	push	{r7}
    1042:	b083      	sub	sp, #12
    1044:	af00      	add	r7, sp, #0
    1046:	4603      	mov	r3, r0
    1048:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
    104a:	f241 030a 	movw	r3, #4106	; 0x100a
    104e:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1052:	79fa      	ldrb	r2, [r7, #7]
    1054:	701a      	strb	r2, [r3, #0]
}
    1056:	370c      	adds	r7, #12
    1058:	46bd      	mov	sp, r7
    105a:	f85d 7b04 	ldr.w	r7, [sp], #4
    105e:	4770      	bx	lr

00001060 <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
    1060:	b580      	push	{r7, lr}
    1062:	b082      	sub	sp, #8
    1064:	af00      	add	r7, sp, #0
    1066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
    1068:	687a      	ldr	r2, [r7, #4]
    106a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    106e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1072:	429a      	cmp	r2, r3
    1074:	d108      	bne.n	1088 <GPIO_DeInit+0x28>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
    1076:	2004      	movs	r0, #4
    1078:	2101      	movs	r1, #1
    107a:	f7ff fef1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
    107e:	2004      	movs	r0, #4
    1080:	2100      	movs	r1, #0
    1082:	f7ff feed 	bl	e60 <RCC_APB2PeriphResetCmd>
    1086:	e060      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOB)
    1088:	687a      	ldr	r2, [r7, #4]
    108a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    108e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1092:	429a      	cmp	r2, r3
    1094:	d108      	bne.n	10a8 <GPIO_DeInit+0x48>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
    1096:	2008      	movs	r0, #8
    1098:	2101      	movs	r1, #1
    109a:	f7ff fee1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
    109e:	2008      	movs	r0, #8
    10a0:	2100      	movs	r1, #0
    10a2:	f7ff fedd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10a6:	e050      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOC)
    10a8:	687a      	ldr	r2, [r7, #4]
    10aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    10ae:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10b2:	429a      	cmp	r2, r3
    10b4:	d108      	bne.n	10c8 <GPIO_DeInit+0x68>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
    10b6:	2010      	movs	r0, #16
    10b8:	2101      	movs	r1, #1
    10ba:	f7ff fed1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
    10be:	2010      	movs	r0, #16
    10c0:	2100      	movs	r1, #0
    10c2:	f7ff fecd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10c6:	e040      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOD)
    10c8:	687a      	ldr	r2, [r7, #4]
    10ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    10ce:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10d2:	429a      	cmp	r2, r3
    10d4:	d108      	bne.n	10e8 <GPIO_DeInit+0x88>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
    10d6:	2020      	movs	r0, #32
    10d8:	2101      	movs	r1, #1
    10da:	f7ff fec1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
    10de:	2020      	movs	r0, #32
    10e0:	2100      	movs	r1, #0
    10e2:	f7ff febd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10e6:	e030      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOE)
    10e8:	687a      	ldr	r2, [r7, #4]
    10ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    10ee:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10f2:	429a      	cmp	r2, r3
    10f4:	d108      	bne.n	1108 <GPIO_DeInit+0xa8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
    10f6:	2040      	movs	r0, #64	; 0x40
    10f8:	2101      	movs	r1, #1
    10fa:	f7ff feb1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
    10fe:	2040      	movs	r0, #64	; 0x40
    1100:	2100      	movs	r1, #0
    1102:	f7ff fead 	bl	e60 <RCC_APB2PeriphResetCmd>
    1106:	e020      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOF)
    1108:	687a      	ldr	r2, [r7, #4]
    110a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
    110e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1112:	429a      	cmp	r2, r3
    1114:	d108      	bne.n	1128 <GPIO_DeInit+0xc8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
    1116:	2080      	movs	r0, #128	; 0x80
    1118:	2101      	movs	r1, #1
    111a:	f7ff fea1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
    111e:	2080      	movs	r0, #128	; 0x80
    1120:	2100      	movs	r1, #0
    1122:	f7ff fe9d 	bl	e60 <RCC_APB2PeriphResetCmd>
    1126:	e010      	b.n	114a <GPIO_DeInit+0xea>
  }
  else
  {
    if (GPIOx == GPIOG)
    1128:	687a      	ldr	r2, [r7, #4]
    112a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    112e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1132:	429a      	cmp	r2, r3
    1134:	d109      	bne.n	114a <GPIO_DeInit+0xea>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
    1136:	f44f 7080 	mov.w	r0, #256	; 0x100
    113a:	2101      	movs	r1, #1
    113c:	f7ff fe90 	bl	e60 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    1140:	f44f 7080 	mov.w	r0, #256	; 0x100
    1144:	2100      	movs	r1, #0
    1146:	f7ff fe8b 	bl	e60 <RCC_APB2PeriphResetCmd>
    }
  }
}
    114a:	3708      	adds	r7, #8
    114c:	46bd      	mov	sp, r7
    114e:	bd80      	pop	{r7, pc}

00001150 <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
    1150:	b580      	push	{r7, lr}
    1152:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
    1154:	2001      	movs	r0, #1
    1156:	2101      	movs	r1, #1
    1158:	f7ff fe82 	bl	e60 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
    115c:	2001      	movs	r0, #1
    115e:	2100      	movs	r1, #0
    1160:	f7ff fe7e 	bl	e60 <RCC_APB2PeriphResetCmd>
}
    1164:	bd80      	pop	{r7, pc}
    1166:	bf00      	nop

00001168 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
    1168:	b480      	push	{r7}
    116a:	b089      	sub	sp, #36	; 0x24
    116c:	af00      	add	r7, sp, #0
    116e:	6078      	str	r0, [r7, #4]
    1170:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
    1172:	2300      	movs	r3, #0
    1174:	61fb      	str	r3, [r7, #28]
    1176:	2300      	movs	r3, #0
    1178:	613b      	str	r3, [r7, #16]
    117a:	2300      	movs	r3, #0
    117c:	61bb      	str	r3, [r7, #24]
    117e:	2300      	movs	r3, #0
    1180:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
    1182:	2300      	movs	r3, #0
    1184:	617b      	str	r3, [r7, #20]
    1186:	2300      	movs	r3, #0
    1188:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));

/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
    118a:	683b      	ldr	r3, [r7, #0]
    118c:	78db      	ldrb	r3, [r3, #3]
    118e:	f003 030f 	and.w	r3, r3, #15
    1192:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
    1194:	683b      	ldr	r3, [r7, #0]
    1196:	78db      	ldrb	r3, [r3, #3]
    1198:	f003 0310 	and.w	r3, r3, #16
    119c:	2b00      	cmp	r3, #0
    119e:	d004      	beq.n	11aa <GPIO_Init+0x42>
  {
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
    11a0:	683b      	ldr	r3, [r7, #0]
    11a2:	789b      	ldrb	r3, [r3, #2]
    11a4:	69fa      	ldr	r2, [r7, #28]
    11a6:	4313      	orrs	r3, r2
    11a8:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
    11aa:	683b      	ldr	r3, [r7, #0]
    11ac:	881b      	ldrh	r3, [r3, #0]
    11ae:	b2db      	uxtb	r3, r3
    11b0:	2b00      	cmp	r3, #0
    11b2:	d044      	beq.n	123e <GPIO_Init+0xd6>
  {
    tmpreg = GPIOx->CRL;
    11b4:	687b      	ldr	r3, [r7, #4]
    11b6:	681b      	ldr	r3, [r3, #0]
    11b8:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    11ba:	2300      	movs	r3, #0
    11bc:	61bb      	str	r3, [r7, #24]
    11be:	e038      	b.n	1232 <GPIO_Init+0xca>
    {
      pos = ((uint32_t)0x01) << pinpos;
    11c0:	69bb      	ldr	r3, [r7, #24]
    11c2:	2201      	movs	r2, #1
    11c4:	fa02 f303 	lsl.w	r3, r2, r3
    11c8:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
    11ca:	683b      	ldr	r3, [r7, #0]
    11cc:	881b      	ldrh	r3, [r3, #0]
    11ce:	461a      	mov	r2, r3
    11d0:	68fb      	ldr	r3, [r7, #12]
    11d2:	4013      	ands	r3, r2
    11d4:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    11d6:	693a      	ldr	r2, [r7, #16]
    11d8:	68fb      	ldr	r3, [r7, #12]
    11da:	429a      	cmp	r2, r3
    11dc:	d126      	bne.n	122c <GPIO_Init+0xc4>
      {
        pos = pinpos << 2;
    11de:	69bb      	ldr	r3, [r7, #24]
    11e0:	009b      	lsls	r3, r3, #2
    11e2:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    11e4:	68fb      	ldr	r3, [r7, #12]
    11e6:	220f      	movs	r2, #15
    11e8:	fa02 f303 	lsl.w	r3, r2, r3
    11ec:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    11ee:	68bb      	ldr	r3, [r7, #8]
    11f0:	43db      	mvns	r3, r3
    11f2:	697a      	ldr	r2, [r7, #20]
    11f4:	4013      	ands	r3, r2
    11f6:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    11f8:	68fb      	ldr	r3, [r7, #12]
    11fa:	69fa      	ldr	r2, [r7, #28]
    11fc:	fa02 f303 	lsl.w	r3, r2, r3
    1200:	697a      	ldr	r2, [r7, #20]
    1202:	4313      	orrs	r3, r2
    1204:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    1206:	683b      	ldr	r3, [r7, #0]
    1208:	78db      	ldrb	r3, [r3, #3]
    120a:	2b28      	cmp	r3, #40	; 0x28
    120c:	d105      	bne.n	121a <GPIO_Init+0xb2>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
    120e:	69bb      	ldr	r3, [r7, #24]
    1210:	2201      	movs	r2, #1
    1212:	409a      	lsls	r2, r3
    1214:	687b      	ldr	r3, [r7, #4]
    1216:	615a      	str	r2, [r3, #20]
    1218:	e008      	b.n	122c <GPIO_Init+0xc4>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    121a:	683b      	ldr	r3, [r7, #0]
    121c:	78db      	ldrb	r3, [r3, #3]
    121e:	2b48      	cmp	r3, #72	; 0x48
    1220:	d104      	bne.n	122c <GPIO_Init+0xc4>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
    1222:	69bb      	ldr	r3, [r7, #24]
    1224:	2201      	movs	r2, #1
    1226:	409a      	lsls	r2, r3
    1228:	687b      	ldr	r3, [r7, #4]
    122a:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    122c:	69bb      	ldr	r3, [r7, #24]
    122e:	3301      	adds	r3, #1
    1230:	61bb      	str	r3, [r7, #24]
    1232:	69bb      	ldr	r3, [r7, #24]
    1234:	2b07      	cmp	r3, #7
    1236:	d9c3      	bls.n	11c0 <GPIO_Init+0x58>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
    1238:	687b      	ldr	r3, [r7, #4]
    123a:	697a      	ldr	r2, [r7, #20]
    123c:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
    123e:	683b      	ldr	r3, [r7, #0]
    1240:	881b      	ldrh	r3, [r3, #0]
    1242:	2bff      	cmp	r3, #255	; 0xff
    1244:	d946      	bls.n	12d4 <GPIO_Init+0x16c>
  {
    tmpreg = GPIOx->CRH;
    1246:	687b      	ldr	r3, [r7, #4]
    1248:	685b      	ldr	r3, [r3, #4]
    124a:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    124c:	2300      	movs	r3, #0
    124e:	61bb      	str	r3, [r7, #24]
    1250:	e03a      	b.n	12c8 <GPIO_Init+0x160>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
    1252:	69bb      	ldr	r3, [r7, #24]
    1254:	3308      	adds	r3, #8
    1256:	2201      	movs	r2, #1
    1258:	fa02 f303 	lsl.w	r3, r2, r3
    125c:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
    125e:	683b      	ldr	r3, [r7, #0]
    1260:	881b      	ldrh	r3, [r3, #0]
    1262:	461a      	mov	r2, r3
    1264:	68fb      	ldr	r3, [r7, #12]
    1266:	4013      	ands	r3, r2
    1268:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    126a:	693a      	ldr	r2, [r7, #16]
    126c:	68fb      	ldr	r3, [r7, #12]
    126e:	429a      	cmp	r2, r3
    1270:	d127      	bne.n	12c2 <GPIO_Init+0x15a>
      {
        pos = pinpos << 2;
    1272:	69bb      	ldr	r3, [r7, #24]
    1274:	009b      	lsls	r3, r3, #2
    1276:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    1278:	68fb      	ldr	r3, [r7, #12]
    127a:	220f      	movs	r2, #15
    127c:	fa02 f303 	lsl.w	r3, r2, r3
    1280:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    1282:	68bb      	ldr	r3, [r7, #8]
    1284:	43db      	mvns	r3, r3
    1286:	697a      	ldr	r2, [r7, #20]
    1288:	4013      	ands	r3, r2
    128a:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    128c:	68fb      	ldr	r3, [r7, #12]
    128e:	69fa      	ldr	r2, [r7, #28]
    1290:	fa02 f303 	lsl.w	r3, r2, r3
    1294:	697a      	ldr	r2, [r7, #20]
    1296:	4313      	orrs	r3, r2
    1298:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    129a:	683b      	ldr	r3, [r7, #0]
    129c:	78db      	ldrb	r3, [r3, #3]
    129e:	2b28      	cmp	r3, #40	; 0x28
    12a0:	d105      	bne.n	12ae <GPIO_Init+0x146>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12a2:	69bb      	ldr	r3, [r7, #24]
    12a4:	3308      	adds	r3, #8
    12a6:	2201      	movs	r2, #1
    12a8:	409a      	lsls	r2, r3
    12aa:	687b      	ldr	r3, [r7, #4]
    12ac:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    12ae:	683b      	ldr	r3, [r7, #0]
    12b0:	78db      	ldrb	r3, [r3, #3]
    12b2:	2b48      	cmp	r3, #72	; 0x48
    12b4:	d105      	bne.n	12c2 <GPIO_Init+0x15a>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12b6:	69bb      	ldr	r3, [r7, #24]
    12b8:	3308      	adds	r3, #8
    12ba:	2201      	movs	r2, #1
    12bc:	409a      	lsls	r2, r3
    12be:	687b      	ldr	r3, [r7, #4]
    12c0:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    12c2:	69bb      	ldr	r3, [r7, #24]
    12c4:	3301      	adds	r3, #1
    12c6:	61bb      	str	r3, [r7, #24]
    12c8:	69bb      	ldr	r3, [r7, #24]
    12ca:	2b07      	cmp	r3, #7
    12cc:	d9c1      	bls.n	1252 <GPIO_Init+0xea>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
    12ce:	687b      	ldr	r3, [r7, #4]
    12d0:	697a      	ldr	r2, [r7, #20]
    12d2:	605a      	str	r2, [r3, #4]
  }
}
    12d4:	3724      	adds	r7, #36	; 0x24
    12d6:	46bd      	mov	sp, r7
    12d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    12dc:	4770      	bx	lr
    12de:	bf00      	nop

000012e0 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
    12e0:	b480      	push	{r7}
    12e2:	b083      	sub	sp, #12
    12e4:	af00      	add	r7, sp, #0
    12e6:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
    12e8:	687b      	ldr	r3, [r7, #4]
    12ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
    12ee:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
    12f0:	687b      	ldr	r3, [r7, #4]
    12f2:	2202      	movs	r2, #2
    12f4:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
    12f6:	687b      	ldr	r3, [r7, #4]
    12f8:	2204      	movs	r2, #4
    12fa:	70da      	strb	r2, [r3, #3]
}
    12fc:	370c      	adds	r7, #12
    12fe:	46bd      	mov	sp, r7
    1300:	f85d 7b04 	ldr.w	r7, [sp], #4
    1304:	4770      	bx	lr
    1306:	bf00      	nop

00001308 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1308:	b480      	push	{r7}
    130a:	b085      	sub	sp, #20
    130c:	af00      	add	r7, sp, #0
    130e:	6078      	str	r0, [r7, #4]
    1310:	460b      	mov	r3, r1
    1312:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1314:	2300      	movs	r3, #0
    1316:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1318:	687b      	ldr	r3, [r7, #4]
    131a:	689a      	ldr	r2, [r3, #8]
    131c:	887b      	ldrh	r3, [r7, #2]
    131e:	4013      	ands	r3, r2
    1320:	2b00      	cmp	r3, #0
    1322:	d002      	beq.n	132a <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1324:	2301      	movs	r3, #1
    1326:	73fb      	strb	r3, [r7, #15]
    1328:	e001      	b.n	132e <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    132a:	2300      	movs	r3, #0
    132c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    132e:	7bfb      	ldrb	r3, [r7, #15]
}
    1330:	4618      	mov	r0, r3
    1332:	3714      	adds	r7, #20
    1334:	46bd      	mov	sp, r7
    1336:	f85d 7b04 	ldr.w	r7, [sp], #4
    133a:	4770      	bx	lr

0000133c <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
    133c:	b480      	push	{r7}
    133e:	b083      	sub	sp, #12
    1340:	af00      	add	r7, sp, #0
    1342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
    1344:	687b      	ldr	r3, [r7, #4]
    1346:	689b      	ldr	r3, [r3, #8]
    1348:	b29b      	uxth	r3, r3
}
    134a:	4618      	mov	r0, r3
    134c:	370c      	adds	r7, #12
    134e:	46bd      	mov	sp, r7
    1350:	f85d 7b04 	ldr.w	r7, [sp], #4
    1354:	4770      	bx	lr
    1356:	bf00      	nop

00001358 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1358:	b480      	push	{r7}
    135a:	b085      	sub	sp, #20
    135c:	af00      	add	r7, sp, #0
    135e:	6078      	str	r0, [r7, #4]
    1360:	460b      	mov	r3, r1
    1362:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1364:	2300      	movs	r3, #0
    1366:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1368:	687b      	ldr	r3, [r7, #4]
    136a:	68da      	ldr	r2, [r3, #12]
    136c:	887b      	ldrh	r3, [r7, #2]
    136e:	4013      	ands	r3, r2
    1370:	2b00      	cmp	r3, #0
    1372:	d002      	beq.n	137a <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1374:	2301      	movs	r3, #1
    1376:	73fb      	strb	r3, [r7, #15]
    1378:	e001      	b.n	137e <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    137a:	2300      	movs	r3, #0
    137c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    137e:	7bfb      	ldrb	r3, [r7, #15]
}
    1380:	4618      	mov	r0, r3
    1382:	3714      	adds	r7, #20
    1384:	46bd      	mov	sp, r7
    1386:	f85d 7b04 	ldr.w	r7, [sp], #4
    138a:	4770      	bx	lr

0000138c <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
    138c:	b480      	push	{r7}
    138e:	b083      	sub	sp, #12
    1390:	af00      	add	r7, sp, #0
    1392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
    1394:	687b      	ldr	r3, [r7, #4]
    1396:	68db      	ldr	r3, [r3, #12]
    1398:	b29b      	uxth	r3, r3
}
    139a:	4618      	mov	r0, r3
    139c:	370c      	adds	r7, #12
    139e:	46bd      	mov	sp, r7
    13a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    13a4:	4770      	bx	lr
    13a6:	bf00      	nop

000013a8 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13a8:	b480      	push	{r7}
    13aa:	b083      	sub	sp, #12
    13ac:	af00      	add	r7, sp, #0
    13ae:	6078      	str	r0, [r7, #4]
    13b0:	460b      	mov	r3, r1
    13b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
    13b4:	887a      	ldrh	r2, [r7, #2]
    13b6:	687b      	ldr	r3, [r7, #4]
    13b8:	611a      	str	r2, [r3, #16]
}
    13ba:	370c      	adds	r7, #12
    13bc:	46bd      	mov	sp, r7
    13be:	f85d 7b04 	ldr.w	r7, [sp], #4
    13c2:	4770      	bx	lr

000013c4 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13c4:	b480      	push	{r7}
    13c6:	b083      	sub	sp, #12
    13c8:	af00      	add	r7, sp, #0
    13ca:	6078      	str	r0, [r7, #4]
    13cc:	460b      	mov	r3, r1
    13ce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
    13d0:	887a      	ldrh	r2, [r7, #2]
    13d2:	687b      	ldr	r3, [r7, #4]
    13d4:	615a      	str	r2, [r3, #20]
}
    13d6:	370c      	adds	r7, #12
    13d8:	46bd      	mov	sp, r7
    13da:	f85d 7b04 	ldr.w	r7, [sp], #4
    13de:	4770      	bx	lr

000013e0 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
    13e0:	b480      	push	{r7}
    13e2:	b083      	sub	sp, #12
    13e4:	af00      	add	r7, sp, #0
    13e6:	6078      	str	r0, [r7, #4]
    13e8:	4613      	mov	r3, r2
    13ea:	460a      	mov	r2, r1
    13ec:	807a      	strh	r2, [r7, #2]
    13ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
    13f0:	787b      	ldrb	r3, [r7, #1]
    13f2:	2b00      	cmp	r3, #0
    13f4:	d003      	beq.n	13fe <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
    13f6:	887a      	ldrh	r2, [r7, #2]
    13f8:	687b      	ldr	r3, [r7, #4]
    13fa:	611a      	str	r2, [r3, #16]
    13fc:	e002      	b.n	1404 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
    13fe:	887a      	ldrh	r2, [r7, #2]
    1400:	687b      	ldr	r3, [r7, #4]
    1402:	615a      	str	r2, [r3, #20]
  }
}
    1404:	370c      	adds	r7, #12
    1406:	46bd      	mov	sp, r7
    1408:	f85d 7b04 	ldr.w	r7, [sp], #4
    140c:	4770      	bx	lr
    140e:	bf00      	nop

00001410 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
    1410:	b480      	push	{r7}
    1412:	b083      	sub	sp, #12
    1414:	af00      	add	r7, sp, #0
    1416:	6078      	str	r0, [r7, #4]
    1418:	460b      	mov	r3, r1
    141a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
    141c:	887a      	ldrh	r2, [r7, #2]
    141e:	687b      	ldr	r3, [r7, #4]
    1420:	60da      	str	r2, [r3, #12]
}
    1422:	370c      	adds	r7, #12
    1424:	46bd      	mov	sp, r7
    1426:	f85d 7b04 	ldr.w	r7, [sp], #4
    142a:	4770      	bx	lr

0000142c <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    142c:	b480      	push	{r7}
    142e:	b085      	sub	sp, #20
    1430:	af00      	add	r7, sp, #0
    1432:	6078      	str	r0, [r7, #4]
    1434:	460b      	mov	r3, r1
    1436:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0x00010000;
    1438:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    143c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
    143e:	887b      	ldrh	r3, [r7, #2]
    1440:	68fa      	ldr	r2, [r7, #12]
    1442:	4313      	orrs	r3, r2
    1444:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1446:	687b      	ldr	r3, [r7, #4]
    1448:	68fa      	ldr	r2, [r7, #12]
    144a:	619a      	str	r2, [r3, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
    144c:	887a      	ldrh	r2, [r7, #2]
    144e:	687b      	ldr	r3, [r7, #4]
    1450:	619a      	str	r2, [r3, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1452:	687b      	ldr	r3, [r7, #4]
    1454:	68fa      	ldr	r2, [r7, #12]
    1456:	619a      	str	r2, [r3, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    1458:	687b      	ldr	r3, [r7, #4]
    145a:	699b      	ldr	r3, [r3, #24]
    145c:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    145e:	687b      	ldr	r3, [r7, #4]
    1460:	699b      	ldr	r3, [r3, #24]
    1462:	60fb      	str	r3, [r7, #12]
}
    1464:	3714      	adds	r7, #20
    1466:	46bd      	mov	sp, r7
    1468:	f85d 7b04 	ldr.w	r7, [sp], #4
    146c:	4770      	bx	lr
    146e:	bf00      	nop

00001470 <GPIO_EventOutputConfig>:
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    1470:	b480      	push	{r7}
    1472:	b085      	sub	sp, #20
    1474:	af00      	add	r7, sp, #0
    1476:	4602      	mov	r2, r0
    1478:	460b      	mov	r3, r1
    147a:	71fa      	strb	r2, [r7, #7]
    147c:	71bb      	strb	r3, [r7, #6]
  uint32_t tmpreg = 0x00;
    147e:	2300      	movs	r3, #0
    1480:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmpreg = AFIO->EVCR;
    1482:	2300      	movs	r3, #0
    1484:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1488:	681b      	ldr	r3, [r3, #0]
    148a:	60fb      	str	r3, [r7, #12]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
    148c:	68fa      	ldr	r2, [r7, #12]
    148e:	f64f 7380 	movw	r3, #65408	; 0xff80
    1492:	4013      	ands	r3, r2
    1494:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
    1496:	79fb      	ldrb	r3, [r7, #7]
    1498:	011b      	lsls	r3, r3, #4
    149a:	68fa      	ldr	r2, [r7, #12]
    149c:	4313      	orrs	r3, r2
    149e:	60fb      	str	r3, [r7, #12]
  tmpreg |= GPIO_PinSource;
    14a0:	79bb      	ldrb	r3, [r7, #6]
    14a2:	68fa      	ldr	r2, [r7, #12]
    14a4:	4313      	orrs	r3, r2
    14a6:	60fb      	str	r3, [r7, #12]
  AFIO->EVCR = tmpreg;
    14a8:	2300      	movs	r3, #0
    14aa:	f2c4 0301 	movt	r3, #16385	; 0x4001
    14ae:	68fa      	ldr	r2, [r7, #12]
    14b0:	601a      	str	r2, [r3, #0]
}
    14b2:	3714      	adds	r7, #20
    14b4:	46bd      	mov	sp, r7
    14b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    14ba:	4770      	bx	lr

000014bc <GPIO_EventOutputCmd>:
  * @param  NewState: new state of the Event output.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_EventOutputCmd(FunctionalState NewState)
{
    14bc:	b480      	push	{r7}
    14be:	b083      	sub	sp, #12
    14c0:	af00      	add	r7, sp, #0
    14c2:	4603      	mov	r3, r0
    14c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
    14c6:	231c      	movs	r3, #28
    14c8:	f2c4 2320 	movt	r3, #16928	; 0x4220
    14cc:	79fa      	ldrb	r2, [r7, #7]
    14ce:	601a      	str	r2, [r3, #0]
}
    14d0:	370c      	adds	r7, #12
    14d2:	46bd      	mov	sp, r7
    14d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    14d8:	4770      	bx	lr
    14da:	bf00      	nop

000014dc <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
    14dc:	b480      	push	{r7}
    14de:	b087      	sub	sp, #28
    14e0:	af00      	add	r7, sp, #0
    14e2:	6078      	str	r0, [r7, #4]
    14e4:	460b      	mov	r3, r1
    14e6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
    14e8:	2300      	movs	r3, #0
    14ea:	613b      	str	r3, [r7, #16]
    14ec:	2300      	movs	r3, #0
    14ee:	60fb      	str	r3, [r7, #12]
    14f0:	2300      	movs	r3, #0
    14f2:	617b      	str	r3, [r7, #20]
    14f4:	2300      	movs	r3, #0
    14f6:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    14f8:	687b      	ldr	r3, [r7, #4]
    14fa:	2b00      	cmp	r3, #0
    14fc:	da05      	bge.n	150a <GPIO_PinRemapConfig+0x2e>
  {
    tmpreg = AFIO->MAPR2;
    14fe:	2300      	movs	r3, #0
    1500:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1504:	69db      	ldr	r3, [r3, #28]
    1506:	617b      	str	r3, [r7, #20]
    1508:	e004      	b.n	1514 <GPIO_PinRemapConfig+0x38>
  }
  else
  {
    tmpreg = AFIO->MAPR;
    150a:	2300      	movs	r3, #0
    150c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1510:	685b      	ldr	r3, [r3, #4]
    1512:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
    1514:	687b      	ldr	r3, [r7, #4]
    1516:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    151a:	0c1b      	lsrs	r3, r3, #16
    151c:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
    151e:	687b      	ldr	r3, [r7, #4]
    1520:	b29b      	uxth	r3, r3
    1522:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
    1524:	687b      	ldr	r3, [r7, #4]
    1526:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    152a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
    152e:	d10e      	bne.n	154e <GPIO_PinRemapConfig+0x72>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    1530:	697b      	ldr	r3, [r7, #20]
    1532:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    1536:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
    1538:	2300      	movs	r3, #0
    153a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    153e:	2200      	movs	r2, #0
    1540:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1544:	6852      	ldr	r2, [r2, #4]
    1546:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
    154a:	605a      	str	r2, [r3, #4]
    154c:	e021      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
    154e:	687b      	ldr	r3, [r7, #4]
    1550:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    1554:	2b00      	cmp	r3, #0
    1556:	d00e      	beq.n	1576 <GPIO_PinRemapConfig+0x9a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
    1558:	68bb      	ldr	r3, [r7, #8]
    155a:	2203      	movs	r2, #3
    155c:	fa02 f303 	lsl.w	r3, r2, r3
    1560:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
    1562:	68fb      	ldr	r3, [r7, #12]
    1564:	43db      	mvns	r3, r3
    1566:	697a      	ldr	r2, [r7, #20]
    1568:	4013      	ands	r3, r2
    156a:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    156c:	697b      	ldr	r3, [r7, #20]
    156e:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1572:	617b      	str	r3, [r7, #20]
    1574:	e00d      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    1576:	687b      	ldr	r3, [r7, #4]
    1578:	0d5b      	lsrs	r3, r3, #21
    157a:	011b      	lsls	r3, r3, #4
    157c:	693a      	ldr	r2, [r7, #16]
    157e:	fa02 f303 	lsl.w	r3, r2, r3
    1582:	43db      	mvns	r3, r3
    1584:	697a      	ldr	r2, [r7, #20]
    1586:	4013      	ands	r3, r2
    1588:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    158a:	697b      	ldr	r3, [r7, #20]
    158c:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1590:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
    1592:	78fb      	ldrb	r3, [r7, #3]
    1594:	2b00      	cmp	r3, #0
    1596:	d008      	beq.n	15aa <GPIO_PinRemapConfig+0xce>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
    1598:	687b      	ldr	r3, [r7, #4]
    159a:	0d5b      	lsrs	r3, r3, #21
    159c:	011b      	lsls	r3, r3, #4
    159e:	693a      	ldr	r2, [r7, #16]
    15a0:	fa02 f303 	lsl.w	r3, r2, r3
    15a4:	697a      	ldr	r2, [r7, #20]
    15a6:	4313      	orrs	r3, r2
    15a8:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    15aa:	687b      	ldr	r3, [r7, #4]
    15ac:	2b00      	cmp	r3, #0
    15ae:	da05      	bge.n	15bc <GPIO_PinRemapConfig+0xe0>
  {
    AFIO->MAPR2 = tmpreg;
    15b0:	2300      	movs	r3, #0
    15b2:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15b6:	697a      	ldr	r2, [r7, #20]
    15b8:	61da      	str	r2, [r3, #28]
    15ba:	e004      	b.n	15c6 <GPIO_PinRemapConfig+0xea>
  }
  else
  {
    AFIO->MAPR = tmpreg;
    15bc:	2300      	movs	r3, #0
    15be:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15c2:	697a      	ldr	r2, [r7, #20]
    15c4:	605a      	str	r2, [r3, #4]
  }
}
    15c6:	371c      	adds	r7, #28
    15c8:	46bd      	mov	sp, r7
    15ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    15ce:	4770      	bx	lr

000015d0 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    15d0:	b490      	push	{r4, r7}
    15d2:	b084      	sub	sp, #16
    15d4:	af00      	add	r7, sp, #0
    15d6:	4602      	mov	r2, r0
    15d8:	460b      	mov	r3, r1
    15da:	71fa      	strb	r2, [r7, #7]
    15dc:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
    15de:	2300      	movs	r3, #0
    15e0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
    15e2:	79bb      	ldrb	r3, [r7, #6]
    15e4:	f003 0303 	and.w	r3, r3, #3
    15e8:	009b      	lsls	r3, r3, #2
    15ea:	220f      	movs	r2, #15
    15ec:	fa02 f303 	lsl.w	r3, r2, r3
    15f0:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
    15f2:	2300      	movs	r3, #0
    15f4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15f8:	79ba      	ldrb	r2, [r7, #6]
    15fa:	0892      	lsrs	r2, r2, #2
    15fc:	b2d2      	uxtb	r2, r2
    15fe:	4610      	mov	r0, r2
    1600:	2200      	movs	r2, #0
    1602:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1606:	79b9      	ldrb	r1, [r7, #6]
    1608:	0889      	lsrs	r1, r1, #2
    160a:	b2c9      	uxtb	r1, r1
    160c:	3102      	adds	r1, #2
    160e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    1612:	68fa      	ldr	r2, [r7, #12]
    1614:	43d2      	mvns	r2, r2
    1616:	4011      	ands	r1, r2
    1618:	1c82      	adds	r2, r0, #2
    161a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
    161e:	2300      	movs	r3, #0
    1620:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1624:	79ba      	ldrb	r2, [r7, #6]
    1626:	0892      	lsrs	r2, r2, #2
    1628:	b2d2      	uxtb	r2, r2
    162a:	4610      	mov	r0, r2
    162c:	2200      	movs	r2, #0
    162e:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1632:	79b9      	ldrb	r1, [r7, #6]
    1634:	0889      	lsrs	r1, r1, #2
    1636:	b2c9      	uxtb	r1, r1
    1638:	3102      	adds	r1, #2
    163a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    163e:	79fc      	ldrb	r4, [r7, #7]
    1640:	79ba      	ldrb	r2, [r7, #6]
    1642:	f002 0203 	and.w	r2, r2, #3
    1646:	0092      	lsls	r2, r2, #2
    1648:	fa04 f202 	lsl.w	r2, r4, r2
    164c:	4311      	orrs	r1, r2
    164e:	1c82      	adds	r2, r0, #2
    1650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    1654:	3710      	adds	r7, #16
    1656:	46bd      	mov	sp, r7
    1658:	bc90      	pop	{r4, r7}
    165a:	4770      	bx	lr

0000165c <GPIO_ETH_MediaInterfaceConfig>:
  *     @arg GPIO_ETH_MediaInterface_MII: MII mode
  *     @arg GPIO_ETH_MediaInterface_RMII: RMII mode
  * @retval None
  */
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface)
{
    165c:	b480      	push	{r7}
    165e:	b083      	sub	sp, #12
    1660:	af00      	add	r7, sp, #0
    1662:	6078      	str	r0, [r7, #4]
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface));

  /* Configure MII_RMII selection bit */
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface;
    1664:	23dc      	movs	r3, #220	; 0xdc
    1666:	f2c4 2320 	movt	r3, #16928	; 0x4220
    166a:	687a      	ldr	r2, [r7, #4]
    166c:	601a      	str	r2, [r3, #0]
}
    166e:	370c      	adds	r7, #12
    1670:	46bd      	mov	sp, r7
    1672:	f85d 7b04 	ldr.w	r7, [sp], #4
    1676:	4770      	bx	lr

00001678 <USART_DeInit>:
  *   This parameter can be one of the following values:
  *      USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
    1678:	b580      	push	{r7, lr}
    167a:	b082      	sub	sp, #8
    167c:	af00      	add	r7, sp, #0
    167e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
    1680:	687a      	ldr	r2, [r7, #4]
    1682:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    1686:	f2c4 0301 	movt	r3, #16385	; 0x4001
    168a:	429a      	cmp	r2, r3
    168c:	d10a      	bne.n	16a4 <USART_DeInit+0x2c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    168e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    1692:	2101      	movs	r1, #1
    1694:	f7ff fbe4 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
    1698:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    169c:	2100      	movs	r1, #0
    169e:	f7ff fbdf 	bl	e60 <RCC_APB2PeriphResetCmd>
    16a2:	e046      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART2)
    16a4:	687a      	ldr	r2, [r7, #4]
    16a6:	f44f 4388 	mov.w	r3, #17408	; 0x4400
    16aa:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16ae:	429a      	cmp	r2, r3
    16b0:	d10a      	bne.n	16c8 <USART_DeInit+0x50>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    16b2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16b6:	2101      	movs	r1, #1
    16b8:	f7ff fbfa 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
    16bc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16c0:	2100      	movs	r1, #0
    16c2:	f7ff fbf5 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16c6:	e034      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART3)
    16c8:	687a      	ldr	r2, [r7, #4]
    16ca:	f44f 4390 	mov.w	r3, #18432	; 0x4800
    16ce:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16d2:	429a      	cmp	r2, r3
    16d4:	d10a      	bne.n	16ec <USART_DeInit+0x74>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    16d6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16da:	2101      	movs	r1, #1
    16dc:	f7ff fbe8 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
    16e0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16e4:	2100      	movs	r1, #0
    16e6:	f7ff fbe3 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16ea:	e022      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == UART4)
    16ec:	687a      	ldr	r2, [r7, #4]
    16ee:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
    16f2:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16f6:	429a      	cmp	r2, r3
    16f8:	d10a      	bne.n	1710 <USART_DeInit+0x98>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    16fa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    16fe:	2101      	movs	r1, #1
    1700:	f7ff fbd6 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
    1704:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1708:	2100      	movs	r1, #0
    170a:	f7ff fbd1 	bl	eb0 <RCC_APB1PeriphResetCmd>
    170e:	e010      	b.n	1732 <USART_DeInit+0xba>
  }
  else
  {
    if (USARTx == UART5)
    1710:	687a      	ldr	r2, [r7, #4]
    1712:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    1716:	f2c4 0300 	movt	r3, #16384	; 0x4000
    171a:	429a      	cmp	r2, r3
    171c:	d109      	bne.n	1732 <USART_DeInit+0xba>
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    171e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    1722:	2101      	movs	r1, #1
    1724:	f7ff fbc4 	bl	eb0 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    1728:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    172c:	2100      	movs	r1, #0
    172e:	f7ff fbbf 	bl	eb0 <RCC_APB1PeriphResetCmd>
    }
  }
}
    1732:	3708      	adds	r7, #8
    1734:	46bd      	mov	sp, r7
    1736:	bd80      	pop	{r7, pc}

00001738 <USART_Init>:
  *         that contains the configuration information for the specified USART
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
    1738:	b580      	push	{r7, lr}
    173a:	b08c      	sub	sp, #48	; 0x30
    173c:	af00      	add	r7, sp, #0
    173e:	6078      	str	r0, [r7, #4]
    1740:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
    1742:	2300      	movs	r3, #0
    1744:	62fb      	str	r3, [r7, #44]	; 0x2c
    1746:	2300      	movs	r3, #0
    1748:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
    174a:	2300      	movs	r3, #0
    174c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
    174e:	2300      	movs	r3, #0
    1750:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
    1752:	2300      	movs	r3, #0
    1754:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    1756:	687b      	ldr	r3, [r7, #4]
    1758:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    175a:	687b      	ldr	r3, [r7, #4]
    175c:	8a1b      	ldrh	r3, [r3, #16]
    175e:	b29b      	uxth	r3, r3
    1760:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
    1762:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1764:	f64c 73ff 	movw	r3, #53247	; 0xcfff
    1768:	4013      	ands	r3, r2
    176a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
    176c:	683b      	ldr	r3, [r7, #0]
    176e:	88db      	ldrh	r3, [r3, #6]
    1770:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1772:	4313      	orrs	r3, r2
    1774:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1778:	b29a      	uxth	r2, r3
    177a:	687b      	ldr	r3, [r7, #4]
    177c:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
    177e:	687b      	ldr	r3, [r7, #4]
    1780:	899b      	ldrh	r3, [r3, #12]
    1782:	b29b      	uxth	r3, r3
    1784:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
    1786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1788:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
    178c:	4013      	ands	r3, r2
    178e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    1790:	683b      	ldr	r3, [r7, #0]
    1792:	889a      	ldrh	r2, [r3, #4]
    1794:	683b      	ldr	r3, [r7, #0]
    1796:	891b      	ldrh	r3, [r3, #8]
    1798:	4313      	orrs	r3, r2
    179a:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
    179c:	683b      	ldr	r3, [r7, #0]
    179e:	895b      	ldrh	r3, [r3, #10]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    17a0:	4313      	orrs	r3, r2
    17a2:	b29b      	uxth	r3, r3
    17a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17a6:	4313      	orrs	r3, r2
    17a8:	62fb      	str	r3, [r7, #44]	; 0x2c
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
    17aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17ac:	b29a      	uxth	r2, r3
    17ae:	687b      	ldr	r3, [r7, #4]
    17b0:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/
  tmpreg = USARTx->CR3;
    17b2:	687b      	ldr	r3, [r7, #4]
    17b4:	8a9b      	ldrh	r3, [r3, #20]
    17b6:	b29b      	uxth	r3, r3
    17b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
    17ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17bc:	f64f 43ff 	movw	r3, #64767	; 0xfcff
    17c0:	4013      	ands	r3, r2
    17c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
    17c4:	683b      	ldr	r3, [r7, #0]
    17c6:	899b      	ldrh	r3, [r3, #12]
    17c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17ca:	4313      	orrs	r3, r2
    17cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
    17ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17d0:	b29a      	uxth	r2, r3
    17d2:	687b      	ldr	r3, [r7, #4]
    17d4:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
    17d6:	f107 0308 	add.w	r3, r7, #8
    17da:	4618      	mov	r0, r3
    17dc:	f7ff f9ea 	bl	bb4 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
    17e0:	69fa      	ldr	r2, [r7, #28]
    17e2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    17e6:	f2c4 0301 	movt	r3, #16385	; 0x4001
    17ea:	429a      	cmp	r2, r3
    17ec:	d102      	bne.n	17f4 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
    17ee:	697b      	ldr	r3, [r7, #20]
    17f0:	62bb      	str	r3, [r7, #40]	; 0x28
    17f2:	e001      	b.n	17f8 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
    17f4:	693b      	ldr	r3, [r7, #16]
    17f6:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    17f8:	687b      	ldr	r3, [r7, #4]
    17fa:	899b      	ldrh	r3, [r3, #12]
    17fc:	b29b      	uxth	r3, r3
    17fe:	b29b      	uxth	r3, r3
    1800:	b21b      	sxth	r3, r3
    1802:	2b00      	cmp	r3, #0
    1804:	da0c      	bge.n	1820 <USART_Init+0xe8>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));
    1806:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1808:	4613      	mov	r3, r2
    180a:	009b      	lsls	r3, r3, #2
    180c:	4413      	add	r3, r2
    180e:	009a      	lsls	r2, r3, #2
    1810:	441a      	add	r2, r3
    1812:	683b      	ldr	r3, [r7, #0]
    1814:	681b      	ldr	r3, [r3, #0]
    1816:	005b      	lsls	r3, r3, #1
    1818:	fbb2 f3f3 	udiv	r3, r2, r3
    181c:	627b      	str	r3, [r7, #36]	; 0x24
    181e:	e00b      	b.n	1838 <USART_Init+0x100>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));
    1820:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1822:	4613      	mov	r3, r2
    1824:	009b      	lsls	r3, r3, #2
    1826:	4413      	add	r3, r2
    1828:	009a      	lsls	r2, r3, #2
    182a:	441a      	add	r2, r3
    182c:	683b      	ldr	r3, [r7, #0]
    182e:	681b      	ldr	r3, [r3, #0]
    1830:	009b      	lsls	r3, r3, #2
    1832:	fbb2 f3f3 	udiv	r3, r2, r3
    1836:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
    1838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    183a:	f248 531f 	movw	r3, #34079	; 0x851f
    183e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    1842:	fba3 1302 	umull	r1, r3, r3, r2
    1846:	095b      	lsrs	r3, r3, #5
    1848:	011b      	lsls	r3, r3, #4
    184a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
    184c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    184e:	091b      	lsrs	r3, r3, #4
    1850:	2264      	movs	r2, #100	; 0x64
    1852:	fb02 f303 	mul.w	r3, r2, r3
    1856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1858:	1ad3      	subs	r3, r2, r3
    185a:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    185c:	687b      	ldr	r3, [r7, #4]
    185e:	899b      	ldrh	r3, [r3, #12]
    1860:	b29b      	uxth	r3, r3
    1862:	b29b      	uxth	r3, r3
    1864:	b21b      	sxth	r3, r3
    1866:	2b00      	cmp	r3, #0
    1868:	da10      	bge.n	188c <USART_Init+0x154>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
    186a:	6a3b      	ldr	r3, [r7, #32]
    186c:	00db      	lsls	r3, r3, #3
    186e:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1872:	f248 531f 	movw	r3, #34079	; 0x851f
    1876:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    187a:	fba3 1302 	umull	r1, r3, r3, r2
    187e:	095b      	lsrs	r3, r3, #5
    1880:	f003 0307 	and.w	r3, r3, #7
    1884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1886:	4313      	orrs	r3, r2
    1888:	62fb      	str	r3, [r7, #44]	; 0x2c
    188a:	e00f      	b.n	18ac <USART_Init+0x174>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
    188c:	6a3b      	ldr	r3, [r7, #32]
    188e:	011b      	lsls	r3, r3, #4
    1890:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1894:	f248 531f 	movw	r3, #34079	; 0x851f
    1898:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    189c:	fba3 1302 	umull	r1, r3, r3, r2
    18a0:	095b      	lsrs	r3, r3, #5
    18a2:	f003 030f 	and.w	r3, r3, #15
    18a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    18a8:	4313      	orrs	r3, r2
    18aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
    18ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    18ae:	b29a      	uxth	r2, r3
    18b0:	687b      	ldr	r3, [r7, #4]
    18b2:	811a      	strh	r2, [r3, #8]
}
    18b4:	3730      	adds	r7, #48	; 0x30
    18b6:	46bd      	mov	sp, r7
    18b8:	bd80      	pop	{r7, pc}
    18ba:	bf00      	nop

000018bc <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
    18bc:	b480      	push	{r7}
    18be:	b083      	sub	sp, #12
    18c0:	af00      	add	r7, sp, #0
    18c2:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
    18c4:	687b      	ldr	r3, [r7, #4]
    18c6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
    18ca:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
    18cc:	687b      	ldr	r3, [r7, #4]
    18ce:	2200      	movs	r2, #0
    18d0:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
    18d2:	687b      	ldr	r3, [r7, #4]
    18d4:	2200      	movs	r2, #0
    18d6:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
    18d8:	687b      	ldr	r3, [r7, #4]
    18da:	2200      	movs	r2, #0
    18dc:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    18de:	687b      	ldr	r3, [r7, #4]
    18e0:	220c      	movs	r2, #12
    18e2:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    18e4:	687b      	ldr	r3, [r7, #4]
    18e6:	2200      	movs	r2, #0
    18e8:	819a      	strh	r2, [r3, #12]
}
    18ea:	370c      	adds	r7, #12
    18ec:	46bd      	mov	sp, r7
    18ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    18f2:	4770      	bx	lr

000018f4 <USART_ClockInit>:
  *         USART peripheral.
  * @note The Smart Card and Synchronous modes are not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    18f4:	b480      	push	{r7}
    18f6:	b085      	sub	sp, #20
    18f8:	af00      	add	r7, sp, #0
    18fa:	6078      	str	r0, [r7, #4]
    18fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
    18fe:	2300      	movs	r3, #0
    1900:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    1902:	687b      	ldr	r3, [r7, #4]
    1904:	8a1b      	ldrh	r3, [r3, #16]
    1906:	b29b      	uxth	r3, r3
    1908:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
    190a:	68fa      	ldr	r2, [r7, #12]
    190c:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
    1910:	4013      	ands	r3, r2
    1912:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1914:	683b      	ldr	r3, [r7, #0]
    1916:	881a      	ldrh	r2, [r3, #0]
    1918:	683b      	ldr	r3, [r7, #0]
    191a:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
    191c:	4313      	orrs	r3, r2
    191e:	b29a      	uxth	r2, r3
    1920:	683b      	ldr	r3, [r7, #0]
    1922:	889b      	ldrh	r3, [r3, #4]
    1924:	4313      	orrs	r3, r2
    1926:	b29a      	uxth	r2, r3
    1928:	683b      	ldr	r3, [r7, #0]
    192a:	88db      	ldrh	r3, [r3, #6]
    192c:	4313      	orrs	r3, r2
    192e:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1930:	68fa      	ldr	r2, [r7, #12]
    1932:	4313      	orrs	r3, r2
    1934:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1936:	68fb      	ldr	r3, [r7, #12]
    1938:	b29a      	uxth	r2, r3
    193a:	687b      	ldr	r3, [r7, #4]
    193c:	821a      	strh	r2, [r3, #16]
}
    193e:	3714      	adds	r7, #20
    1940:	46bd      	mov	sp, r7
    1942:	f85d 7b04 	ldr.w	r7, [sp], #4
    1946:	4770      	bx	lr

00001948 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    1948:	b480      	push	{r7}
    194a:	b083      	sub	sp, #12
    194c:	af00      	add	r7, sp, #0
    194e:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
    1950:	687b      	ldr	r3, [r7, #4]
    1952:	2200      	movs	r2, #0
    1954:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
    1956:	687b      	ldr	r3, [r7, #4]
    1958:	2200      	movs	r2, #0
    195a:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
    195c:	687b      	ldr	r3, [r7, #4]
    195e:	2200      	movs	r2, #0
    1960:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
    1962:	687b      	ldr	r3, [r7, #4]
    1964:	2200      	movs	r2, #0
    1966:	80da      	strh	r2, [r3, #6]
}
    1968:	370c      	adds	r7, #12
    196a:	46bd      	mov	sp, r7
    196c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1970:	4770      	bx	lr
    1972:	bf00      	nop

00001974 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1974:	b480      	push	{r7}
    1976:	b083      	sub	sp, #12
    1978:	af00      	add	r7, sp, #0
    197a:	6078      	str	r0, [r7, #4]
    197c:	460b      	mov	r3, r1
    197e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1980:	78fb      	ldrb	r3, [r7, #3]
    1982:	2b00      	cmp	r3, #0
    1984:	d008      	beq.n	1998 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
    1986:	687b      	ldr	r3, [r7, #4]
    1988:	899b      	ldrh	r3, [r3, #12]
    198a:	b29b      	uxth	r3, r3
    198c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1990:	b29a      	uxth	r2, r3
    1992:	687b      	ldr	r3, [r7, #4]
    1994:	819a      	strh	r2, [r3, #12]
    1996:	e007      	b.n	19a8 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
    1998:	687b      	ldr	r3, [r7, #4]
    199a:	899b      	ldrh	r3, [r3, #12]
    199c:	b29b      	uxth	r3, r3
    199e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    19a2:	b29a      	uxth	r2, r3
    19a4:	687b      	ldr	r3, [r7, #4]
    19a6:	819a      	strh	r2, [r3, #12]
  }
}
    19a8:	370c      	adds	r7, #12
    19aa:	46bd      	mov	sp, r7
    19ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    19b0:	4770      	bx	lr
    19b2:	bf00      	nop

000019b4 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
    19b4:	b480      	push	{r7}
    19b6:	b087      	sub	sp, #28
    19b8:	af00      	add	r7, sp, #0
    19ba:	6078      	str	r0, [r7, #4]
    19bc:	4613      	mov	r3, r2
    19be:	460a      	mov	r2, r1
    19c0:	807a      	strh	r2, [r7, #2]
    19c2:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
    19c4:	2300      	movs	r3, #0
    19c6:	613b      	str	r3, [r7, #16]
    19c8:	2300      	movs	r3, #0
    19ca:	60fb      	str	r3, [r7, #12]
    19cc:	2300      	movs	r3, #0
    19ce:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
    19d0:	2300      	movs	r3, #0
    19d2:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    19d4:	687b      	ldr	r3, [r7, #4]
    19d6:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    19d8:	887b      	ldrh	r3, [r7, #2]
    19da:	b2db      	uxtb	r3, r3
    19dc:	095b      	lsrs	r3, r3, #5
    19de:	b2db      	uxtb	r3, r3
    19e0:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
    19e2:	887b      	ldrh	r3, [r7, #2]
    19e4:	f003 031f 	and.w	r3, r3, #31
    19e8:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
    19ea:	68fb      	ldr	r3, [r7, #12]
    19ec:	2201      	movs	r2, #1
    19ee:	fa02 f303 	lsl.w	r3, r2, r3
    19f2:	60bb      	str	r3, [r7, #8]

  if (usartreg == 0x01) /* The IT is in CR1 register */
    19f4:	693b      	ldr	r3, [r7, #16]
    19f6:	2b01      	cmp	r3, #1
    19f8:	d103      	bne.n	1a02 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
    19fa:	697b      	ldr	r3, [r7, #20]
    19fc:	330c      	adds	r3, #12
    19fe:	617b      	str	r3, [r7, #20]
    1a00:	e009      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
    1a02:	693b      	ldr	r3, [r7, #16]
    1a04:	2b02      	cmp	r3, #2
    1a06:	d103      	bne.n	1a10 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
    1a08:	697b      	ldr	r3, [r7, #20]
    1a0a:	3310      	adds	r3, #16
    1a0c:	617b      	str	r3, [r7, #20]
    1a0e:	e002      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14;
    1a10:	697b      	ldr	r3, [r7, #20]
    1a12:	3314      	adds	r3, #20
    1a14:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
    1a16:	787b      	ldrb	r3, [r7, #1]
    1a18:	2b00      	cmp	r3, #0
    1a1a:	d006      	beq.n	1a2a <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
    1a1c:	697b      	ldr	r3, [r7, #20]
    1a1e:	697a      	ldr	r2, [r7, #20]
    1a20:	6811      	ldr	r1, [r2, #0]
    1a22:	68ba      	ldr	r2, [r7, #8]
    1a24:	430a      	orrs	r2, r1
    1a26:	601a      	str	r2, [r3, #0]
    1a28:	e006      	b.n	1a38 <USART_ITConfig+0x84>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
    1a2a:	697b      	ldr	r3, [r7, #20]
    1a2c:	697a      	ldr	r2, [r7, #20]
    1a2e:	6811      	ldr	r1, [r2, #0]
    1a30:	68ba      	ldr	r2, [r7, #8]
    1a32:	43d2      	mvns	r2, r2
    1a34:	400a      	ands	r2, r1
    1a36:	601a      	str	r2, [r3, #0]
  }
}
    1a38:	371c      	adds	r7, #28
    1a3a:	46bd      	mov	sp, r7
    1a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a40:	4770      	bx	lr
    1a42:	bf00      	nop

00001a44 <USART_DMACmd>:
  * @note The DMA mode is not available for UART5 except in the STM32
  *       High density value line devices(STM32F10X_HD_VL).
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
    1a44:	b480      	push	{r7}
    1a46:	b083      	sub	sp, #12
    1a48:	af00      	add	r7, sp, #0
    1a4a:	6078      	str	r0, [r7, #4]
    1a4c:	4613      	mov	r3, r2
    1a4e:	460a      	mov	r2, r1
    1a50:	807a      	strh	r2, [r7, #2]
    1a52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1a54:	787b      	ldrb	r3, [r7, #1]
    1a56:	2b00      	cmp	r3, #0
    1a58:	d008      	beq.n	1a6c <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
    1a5a:	687b      	ldr	r3, [r7, #4]
    1a5c:	8a9b      	ldrh	r3, [r3, #20]
    1a5e:	b29a      	uxth	r2, r3
    1a60:	887b      	ldrh	r3, [r7, #2]
    1a62:	4313      	orrs	r3, r2
    1a64:	b29a      	uxth	r2, r3
    1a66:	687b      	ldr	r3, [r7, #4]
    1a68:	829a      	strh	r2, [r3, #20]
    1a6a:	e009      	b.n	1a80 <USART_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
    1a6c:	687b      	ldr	r3, [r7, #4]
    1a6e:	8a9b      	ldrh	r3, [r3, #20]
    1a70:	b29a      	uxth	r2, r3
    1a72:	887b      	ldrh	r3, [r7, #2]
    1a74:	43db      	mvns	r3, r3
    1a76:	b29b      	uxth	r3, r3
    1a78:	4013      	ands	r3, r2
    1a7a:	b29a      	uxth	r2, r3
    1a7c:	687b      	ldr	r3, [r7, #4]
    1a7e:	829a      	strh	r2, [r3, #20]
  }
}
    1a80:	370c      	adds	r7, #12
    1a82:	46bd      	mov	sp, r7
    1a84:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a88:	4770      	bx	lr
    1a8a:	bf00      	nop

00001a8c <USART_SetAddress>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
    1a8c:	b480      	push	{r7}
    1a8e:	b083      	sub	sp, #12
    1a90:	af00      	add	r7, sp, #0
    1a92:	6078      	str	r0, [r7, #4]
    1a94:	460b      	mov	r3, r1
    1a96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address));

  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
    1a98:	687b      	ldr	r3, [r7, #4]
    1a9a:	8a1b      	ldrh	r3, [r3, #16]
    1a9c:	b29b      	uxth	r3, r3
    1a9e:	f023 030f 	bic.w	r3, r3, #15
    1aa2:	b29a      	uxth	r2, r3
    1aa4:	687b      	ldr	r3, [r7, #4]
    1aa6:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
    1aa8:	687b      	ldr	r3, [r7, #4]
    1aaa:	8a1b      	ldrh	r3, [r3, #16]
    1aac:	b29a      	uxth	r2, r3
    1aae:	78fb      	ldrb	r3, [r7, #3]
    1ab0:	b29b      	uxth	r3, r3
    1ab2:	4313      	orrs	r3, r2
    1ab4:	b29a      	uxth	r2, r3
    1ab6:	687b      	ldr	r3, [r7, #4]
    1ab8:	821a      	strh	r2, [r3, #16]
}
    1aba:	370c      	adds	r7, #12
    1abc:	46bd      	mov	sp, r7
    1abe:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ac2:	4770      	bx	lr

00001ac4 <USART_WakeUpConfig>:
  *     @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *     @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
    1ac4:	b480      	push	{r7}
    1ac6:	b083      	sub	sp, #12
    1ac8:	af00      	add	r7, sp, #0
    1aca:	6078      	str	r0, [r7, #4]
    1acc:	460b      	mov	r3, r1
    1ace:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));

  USARTx->CR1 &= CR1_WAKE_Mask;
    1ad0:	687b      	ldr	r3, [r7, #4]
    1ad2:	899b      	ldrh	r3, [r3, #12]
    1ad4:	b29b      	uxth	r3, r3
    1ad6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1ada:	b29a      	uxth	r2, r3
    1adc:	687b      	ldr	r3, [r7, #4]
    1ade:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
    1ae0:	687b      	ldr	r3, [r7, #4]
    1ae2:	899b      	ldrh	r3, [r3, #12]
    1ae4:	b29a      	uxth	r2, r3
    1ae6:	887b      	ldrh	r3, [r7, #2]
    1ae8:	4313      	orrs	r3, r2
    1aea:	b29a      	uxth	r2, r3
    1aec:	687b      	ldr	r3, [r7, #4]
    1aee:	819a      	strh	r2, [r3, #12]
}
    1af0:	370c      	adds	r7, #12
    1af2:	46bd      	mov	sp, r7
    1af4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1af8:	4770      	bx	lr
    1afa:	bf00      	nop

00001afc <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1afc:	b480      	push	{r7}
    1afe:	b083      	sub	sp, #12
    1b00:	af00      	add	r7, sp, #0
    1b02:	6078      	str	r0, [r7, #4]
    1b04:	460b      	mov	r3, r1
    1b06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b08:	78fb      	ldrb	r3, [r7, #3]
    1b0a:	2b00      	cmp	r3, #0
    1b0c:	d008      	beq.n	1b20 <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
    1b0e:	687b      	ldr	r3, [r7, #4]
    1b10:	899b      	ldrh	r3, [r3, #12]
    1b12:	b29b      	uxth	r3, r3
    1b14:	f043 0302 	orr.w	r3, r3, #2
    1b18:	b29a      	uxth	r2, r3
    1b1a:	687b      	ldr	r3, [r7, #4]
    1b1c:	819a      	strh	r2, [r3, #12]
    1b1e:	e007      	b.n	1b30 <USART_ReceiverWakeUpCmd+0x34>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
    1b20:	687b      	ldr	r3, [r7, #4]
    1b22:	899b      	ldrh	r3, [r3, #12]
    1b24:	b29b      	uxth	r3, r3
    1b26:	f023 0302 	bic.w	r3, r3, #2
    1b2a:	b29a      	uxth	r2, r3
    1b2c:	687b      	ldr	r3, [r7, #4]
    1b2e:	819a      	strh	r2, [r3, #12]
  }
}
    1b30:	370c      	adds	r7, #12
    1b32:	46bd      	mov	sp, r7
    1b34:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b38:	4770      	bx	lr
    1b3a:	bf00      	nop

00001b3c <USART_LINBreakDetectLengthConfig>:
  *     @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *     @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
    1b3c:	b480      	push	{r7}
    1b3e:	b083      	sub	sp, #12
    1b40:	af00      	add	r7, sp, #0
    1b42:	6078      	str	r0, [r7, #4]
    1b44:	460b      	mov	r3, r1
    1b46:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));

  USARTx->CR2 &= CR2_LBDL_Mask;
    1b48:	687b      	ldr	r3, [r7, #4]
    1b4a:	8a1b      	ldrh	r3, [r3, #16]
    1b4c:	b29b      	uxth	r3, r3
    1b4e:	f023 0320 	bic.w	r3, r3, #32
    1b52:	b29a      	uxth	r2, r3
    1b54:	687b      	ldr	r3, [r7, #4]
    1b56:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;
    1b58:	687b      	ldr	r3, [r7, #4]
    1b5a:	8a1b      	ldrh	r3, [r3, #16]
    1b5c:	b29a      	uxth	r2, r3
    1b5e:	887b      	ldrh	r3, [r7, #2]
    1b60:	4313      	orrs	r3, r2
    1b62:	b29a      	uxth	r2, r3
    1b64:	687b      	ldr	r3, [r7, #4]
    1b66:	821a      	strh	r2, [r3, #16]
}
    1b68:	370c      	adds	r7, #12
    1b6a:	46bd      	mov	sp, r7
    1b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b70:	4770      	bx	lr
    1b72:	bf00      	nop

00001b74 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1b74:	b480      	push	{r7}
    1b76:	b083      	sub	sp, #12
    1b78:	af00      	add	r7, sp, #0
    1b7a:	6078      	str	r0, [r7, #4]
    1b7c:	460b      	mov	r3, r1
    1b7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b80:	78fb      	ldrb	r3, [r7, #3]
    1b82:	2b00      	cmp	r3, #0
    1b84:	d008      	beq.n	1b98 <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
    1b86:	687b      	ldr	r3, [r7, #4]
    1b88:	8a1b      	ldrh	r3, [r3, #16]
    1b8a:	b29b      	uxth	r3, r3
    1b8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1b90:	b29a      	uxth	r2, r3
    1b92:	687b      	ldr	r3, [r7, #4]
    1b94:	821a      	strh	r2, [r3, #16]
    1b96:	e007      	b.n	1ba8 <USART_LINCmd+0x34>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
    1b98:	687b      	ldr	r3, [r7, #4]
    1b9a:	8a1b      	ldrh	r3, [r3, #16]
    1b9c:	b29b      	uxth	r3, r3
    1b9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    1ba2:	b29a      	uxth	r2, r3
    1ba4:	687b      	ldr	r3, [r7, #4]
    1ba6:	821a      	strh	r2, [r3, #16]
  }
}
    1ba8:	370c      	adds	r7, #12
    1baa:	46bd      	mov	sp, r7
    1bac:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bb0:	4770      	bx	lr
    1bb2:	bf00      	nop

00001bb4 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
    1bb4:	b480      	push	{r7}
    1bb6:	b083      	sub	sp, #12
    1bb8:	af00      	add	r7, sp, #0
    1bba:	6078      	str	r0, [r7, #4]
    1bbc:	460b      	mov	r3, r1
    1bbe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data));

  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
    1bc0:	887b      	ldrh	r3, [r7, #2]
    1bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bc6:	b29a      	uxth	r2, r3
    1bc8:	687b      	ldr	r3, [r7, #4]
    1bca:	809a      	strh	r2, [r3, #4]
}
    1bcc:	370c      	adds	r7, #12
    1bce:	46bd      	mov	sp, r7
    1bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bd4:	4770      	bx	lr
    1bd6:	bf00      	nop

00001bd8 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
    1bd8:	b480      	push	{r7}
    1bda:	b083      	sub	sp, #12
    1bdc:	af00      	add	r7, sp, #0
    1bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
    1be0:	687b      	ldr	r3, [r7, #4]
    1be2:	889b      	ldrh	r3, [r3, #4]
    1be4:	b29b      	uxth	r3, r3
    1be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bea:	b29b      	uxth	r3, r3
}
    1bec:	4618      	mov	r0, r3
    1bee:	370c      	adds	r7, #12
    1bf0:	46bd      	mov	sp, r7
    1bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bf6:	4770      	bx	lr

00001bf8 <USART_SendBreak>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
    1bf8:	b480      	push	{r7}
    1bfa:	b083      	sub	sp, #12
    1bfc:	af00      	add	r7, sp, #0
    1bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
    1c00:	687b      	ldr	r3, [r7, #4]
    1c02:	899b      	ldrh	r3, [r3, #12]
    1c04:	b29b      	uxth	r3, r3
    1c06:	f043 0301 	orr.w	r3, r3, #1
    1c0a:	b29a      	uxth	r2, r3
    1c0c:	687b      	ldr	r3, [r7, #4]
    1c0e:	819a      	strh	r2, [r3, #12]
}
    1c10:	370c      	adds	r7, #12
    1c12:	46bd      	mov	sp, r7
    1c14:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c18:	4770      	bx	lr
    1c1a:	bf00      	nop

00001c1c <USART_SetGuardTime>:
  * @param  USART_GuardTime: specifies the guard time.
  * @note The guard time bits are not available for UART4 and UART5.
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{
    1c1c:	b480      	push	{r7}
    1c1e:	b083      	sub	sp, #12
    1c20:	af00      	add	r7, sp, #0
    1c22:	6078      	str	r0, [r7, #4]
    1c24:	460b      	mov	r3, r1
    1c26:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));

  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
    1c28:	687b      	ldr	r3, [r7, #4]
    1c2a:	8b1b      	ldrh	r3, [r3, #24]
    1c2c:	b29b      	uxth	r3, r3
    1c2e:	b2db      	uxtb	r3, r3
    1c30:	b29a      	uxth	r2, r3
    1c32:	687b      	ldr	r3, [r7, #4]
    1c34:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
    1c36:	687b      	ldr	r3, [r7, #4]
    1c38:	8b1b      	ldrh	r3, [r3, #24]
    1c3a:	b29a      	uxth	r2, r3
    1c3c:	78fb      	ldrb	r3, [r7, #3]
    1c3e:	b29b      	uxth	r3, r3
    1c40:	021b      	lsls	r3, r3, #8
    1c42:	b29b      	uxth	r3, r3
    1c44:	4313      	orrs	r3, r2
    1c46:	b29a      	uxth	r2, r3
    1c48:	687b      	ldr	r3, [r7, #4]
    1c4a:	831a      	strh	r2, [r3, #24]
}
    1c4c:	370c      	adds	r7, #12
    1c4e:	46bd      	mov	sp, r7
    1c50:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c54:	4770      	bx	lr
    1c56:	bf00      	nop

00001c58 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock.
  * @note   The function is used for IrDA mode with UART4 and UART5.
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{
    1c58:	b480      	push	{r7}
    1c5a:	b083      	sub	sp, #12
    1c5c:	af00      	add	r7, sp, #0
    1c5e:	6078      	str	r0, [r7, #4]
    1c60:	460b      	mov	r3, r1
    1c62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
    1c64:	687b      	ldr	r3, [r7, #4]
    1c66:	8b1b      	ldrh	r3, [r3, #24]
    1c68:	b29b      	uxth	r3, r3
    1c6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    1c6e:	b29a      	uxth	r2, r3
    1c70:	687b      	ldr	r3, [r7, #4]
    1c72:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
    1c74:	687b      	ldr	r3, [r7, #4]
    1c76:	8b1b      	ldrh	r3, [r3, #24]
    1c78:	b29a      	uxth	r2, r3
    1c7a:	78fb      	ldrb	r3, [r7, #3]
    1c7c:	b29b      	uxth	r3, r3
    1c7e:	4313      	orrs	r3, r2
    1c80:	b29a      	uxth	r2, r3
    1c82:	687b      	ldr	r3, [r7, #4]
    1c84:	831a      	strh	r2, [r3, #24]
}
    1c86:	370c      	adds	r7, #12
    1c88:	46bd      	mov	sp, r7
    1c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c8e:	4770      	bx	lr

00001c90 <USART_SmartCardCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1c90:	b480      	push	{r7}
    1c92:	b083      	sub	sp, #12
    1c94:	af00      	add	r7, sp, #0
    1c96:	6078      	str	r0, [r7, #4]
    1c98:	460b      	mov	r3, r1
    1c9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1c9c:	78fb      	ldrb	r3, [r7, #3]
    1c9e:	2b00      	cmp	r3, #0
    1ca0:	d008      	beq.n	1cb4 <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
    1ca2:	687b      	ldr	r3, [r7, #4]
    1ca4:	8a9b      	ldrh	r3, [r3, #20]
    1ca6:	b29b      	uxth	r3, r3
    1ca8:	f043 0320 	orr.w	r3, r3, #32
    1cac:	b29a      	uxth	r2, r3
    1cae:	687b      	ldr	r3, [r7, #4]
    1cb0:	829a      	strh	r2, [r3, #20]
    1cb2:	e007      	b.n	1cc4 <USART_SmartCardCmd+0x34>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
    1cb4:	687b      	ldr	r3, [r7, #4]
    1cb6:	8a9b      	ldrh	r3, [r3, #20]
    1cb8:	b29b      	uxth	r3, r3
    1cba:	f023 0320 	bic.w	r3, r3, #32
    1cbe:	b29a      	uxth	r2, r3
    1cc0:	687b      	ldr	r3, [r7, #4]
    1cc2:	829a      	strh	r2, [r3, #20]
  }
}
    1cc4:	370c      	adds	r7, #12
    1cc6:	46bd      	mov	sp, r7
    1cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ccc:	4770      	bx	lr
    1cce:	bf00      	nop

00001cd0 <USART_SmartCardNACKCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1cd0:	b480      	push	{r7}
    1cd2:	b083      	sub	sp, #12
    1cd4:	af00      	add	r7, sp, #0
    1cd6:	6078      	str	r0, [r7, #4]
    1cd8:	460b      	mov	r3, r1
    1cda:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1cdc:	78fb      	ldrb	r3, [r7, #3]
    1cde:	2b00      	cmp	r3, #0
    1ce0:	d008      	beq.n	1cf4 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
    1ce2:	687b      	ldr	r3, [r7, #4]
    1ce4:	8a9b      	ldrh	r3, [r3, #20]
    1ce6:	b29b      	uxth	r3, r3
    1ce8:	f043 0310 	orr.w	r3, r3, #16
    1cec:	b29a      	uxth	r2, r3
    1cee:	687b      	ldr	r3, [r7, #4]
    1cf0:	829a      	strh	r2, [r3, #20]
    1cf2:	e007      	b.n	1d04 <USART_SmartCardNACKCmd+0x34>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
    1cf4:	687b      	ldr	r3, [r7, #4]
    1cf6:	8a9b      	ldrh	r3, [r3, #20]
    1cf8:	b29b      	uxth	r3, r3
    1cfa:	f023 0310 	bic.w	r3, r3, #16
    1cfe:	b29a      	uxth	r2, r3
    1d00:	687b      	ldr	r3, [r7, #4]
    1d02:	829a      	strh	r2, [r3, #20]
  }
}
    1d04:	370c      	adds	r7, #12
    1d06:	46bd      	mov	sp, r7
    1d08:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d0c:	4770      	bx	lr
    1d0e:	bf00      	nop

00001d10 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d10:	b480      	push	{r7}
    1d12:	b083      	sub	sp, #12
    1d14:	af00      	add	r7, sp, #0
    1d16:	6078      	str	r0, [r7, #4]
    1d18:	460b      	mov	r3, r1
    1d1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d1c:	78fb      	ldrb	r3, [r7, #3]
    1d1e:	2b00      	cmp	r3, #0
    1d20:	d008      	beq.n	1d34 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
    1d22:	687b      	ldr	r3, [r7, #4]
    1d24:	8a9b      	ldrh	r3, [r3, #20]
    1d26:	b29b      	uxth	r3, r3
    1d28:	f043 0308 	orr.w	r3, r3, #8
    1d2c:	b29a      	uxth	r2, r3
    1d2e:	687b      	ldr	r3, [r7, #4]
    1d30:	829a      	strh	r2, [r3, #20]
    1d32:	e007      	b.n	1d44 <USART_HalfDuplexCmd+0x34>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
    1d34:	687b      	ldr	r3, [r7, #4]
    1d36:	8a9b      	ldrh	r3, [r3, #20]
    1d38:	b29b      	uxth	r3, r3
    1d3a:	f023 0308 	bic.w	r3, r3, #8
    1d3e:	b29a      	uxth	r2, r3
    1d40:	687b      	ldr	r3, [r7, #4]
    1d42:	829a      	strh	r2, [r3, #20]
  }
}
    1d44:	370c      	adds	r7, #12
    1d46:	46bd      	mov	sp, r7
    1d48:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d4c:	4770      	bx	lr
    1d4e:	bf00      	nop

00001d50 <USART_OverSampling8Cmd>:
  *     This function has to be called before calling USART_Init()
  *     function in order to have correct baudrate Divider value.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d50:	b480      	push	{r7}
    1d52:	b083      	sub	sp, #12
    1d54:	af00      	add	r7, sp, #0
    1d56:	6078      	str	r0, [r7, #4]
    1d58:	460b      	mov	r3, r1
    1d5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d5c:	78fb      	ldrb	r3, [r7, #3]
    1d5e:	2b00      	cmp	r3, #0
    1d60:	d00a      	beq.n	1d78 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= CR1_OVER8_Set;
    1d62:	687b      	ldr	r3, [r7, #4]
    1d64:	899b      	ldrh	r3, [r3, #12]
    1d66:	b29b      	uxth	r3, r3
    1d68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    1d6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    1d70:	b29a      	uxth	r2, r3
    1d72:	687b      	ldr	r3, [r7, #4]
    1d74:	819a      	strh	r2, [r3, #12]
    1d76:	e007      	b.n	1d88 <USART_OverSampling8Cmd+0x38>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= CR1_OVER8_Reset;
    1d78:	687b      	ldr	r3, [r7, #4]
    1d7a:	899b      	ldrh	r3, [r3, #12]
    1d7c:	b29b      	uxth	r3, r3
    1d7e:	f3c3 030e 	ubfx	r3, r3, #0, #15
    1d82:	b29a      	uxth	r2, r3
    1d84:	687b      	ldr	r3, [r7, #4]
    1d86:	819a      	strh	r2, [r3, #12]
  }
}
    1d88:	370c      	adds	r7, #12
    1d8a:	46bd      	mov	sp, r7
    1d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d90:	4770      	bx	lr
    1d92:	bf00      	nop

00001d94 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d94:	b480      	push	{r7}
    1d96:	b083      	sub	sp, #12
    1d98:	af00      	add	r7, sp, #0
    1d9a:	6078      	str	r0, [r7, #4]
    1d9c:	460b      	mov	r3, r1
    1d9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1da0:	78fb      	ldrb	r3, [r7, #3]
    1da2:	2b00      	cmp	r3, #0
    1da4:	d008      	beq.n	1db8 <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= CR3_ONEBITE_Set;
    1da6:	687b      	ldr	r3, [r7, #4]
    1da8:	8a9b      	ldrh	r3, [r3, #20]
    1daa:	b29b      	uxth	r3, r3
    1dac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    1db0:	b29a      	uxth	r2, r3
    1db2:	687b      	ldr	r3, [r7, #4]
    1db4:	829a      	strh	r2, [r3, #20]
    1db6:	e007      	b.n	1dc8 <USART_OneBitMethodCmd+0x34>
  }
  else
  {
    /* Disable tthe one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= CR3_ONEBITE_Reset;
    1db8:	687b      	ldr	r3, [r7, #4]
    1dba:	8a9b      	ldrh	r3, [r3, #20]
    1dbc:	b29b      	uxth	r3, r3
    1dbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1dc2:	b29a      	uxth	r2, r3
    1dc4:	687b      	ldr	r3, [r7, #4]
    1dc6:	829a      	strh	r2, [r3, #20]
  }
}
    1dc8:	370c      	adds	r7, #12
    1dca:	46bd      	mov	sp, r7
    1dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1dd0:	4770      	bx	lr
    1dd2:	bf00      	nop

00001dd4 <USART_IrDAConfig>:
  *     @arg USART_IrDAMode_LowPower
  *     @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
    1dd4:	b480      	push	{r7}
    1dd6:	b083      	sub	sp, #12
    1dd8:	af00      	add	r7, sp, #0
    1dda:	6078      	str	r0, [r7, #4]
    1ddc:	460b      	mov	r3, r1
    1dde:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));

  USARTx->CR3 &= CR3_IRLP_Mask;
    1de0:	687b      	ldr	r3, [r7, #4]
    1de2:	8a9b      	ldrh	r3, [r3, #20]
    1de4:	b29b      	uxth	r3, r3
    1de6:	f023 0304 	bic.w	r3, r3, #4
    1dea:	b29a      	uxth	r2, r3
    1dec:	687b      	ldr	r3, [r7, #4]
    1dee:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
    1df0:	687b      	ldr	r3, [r7, #4]
    1df2:	8a9b      	ldrh	r3, [r3, #20]
    1df4:	b29a      	uxth	r2, r3
    1df6:	887b      	ldrh	r3, [r7, #2]
    1df8:	4313      	orrs	r3, r2
    1dfa:	b29a      	uxth	r2, r3
    1dfc:	687b      	ldr	r3, [r7, #4]
    1dfe:	829a      	strh	r2, [r3, #20]
}
    1e00:	370c      	adds	r7, #12
    1e02:	46bd      	mov	sp, r7
    1e04:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e08:	4770      	bx	lr
    1e0a:	bf00      	nop

00001e0c <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1e0c:	b480      	push	{r7}
    1e0e:	b083      	sub	sp, #12
    1e10:	af00      	add	r7, sp, #0
    1e12:	6078      	str	r0, [r7, #4]
    1e14:	460b      	mov	r3, r1
    1e16:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1e18:	78fb      	ldrb	r3, [r7, #3]
    1e1a:	2b00      	cmp	r3, #0
    1e1c:	d008      	beq.n	1e30 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
    1e1e:	687b      	ldr	r3, [r7, #4]
    1e20:	8a9b      	ldrh	r3, [r3, #20]
    1e22:	b29b      	uxth	r3, r3
    1e24:	f043 0302 	orr.w	r3, r3, #2
    1e28:	b29a      	uxth	r2, r3
    1e2a:	687b      	ldr	r3, [r7, #4]
    1e2c:	829a      	strh	r2, [r3, #20]
    1e2e:	e007      	b.n	1e40 <USART_IrDACmd+0x34>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
    1e30:	687b      	ldr	r3, [r7, #4]
    1e32:	8a9b      	ldrh	r3, [r3, #20]
    1e34:	b29b      	uxth	r3, r3
    1e36:	f023 0302 	bic.w	r3, r3, #2
    1e3a:	b29a      	uxth	r2, r3
    1e3c:	687b      	ldr	r3, [r7, #4]
    1e3e:	829a      	strh	r2, [r3, #20]
  }
}
    1e40:	370c      	adds	r7, #12
    1e42:	46bd      	mov	sp, r7
    1e44:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e48:	4770      	bx	lr
    1e4a:	bf00      	nop

00001e4c <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e4c:	b480      	push	{r7}
    1e4e:	b085      	sub	sp, #20
    1e50:	af00      	add	r7, sp, #0
    1e52:	6078      	str	r0, [r7, #4]
    1e54:	460b      	mov	r3, r1
    1e56:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
    1e58:	2300      	movs	r3, #0
    1e5a:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
    1e5c:	687b      	ldr	r3, [r7, #4]
    1e5e:	881b      	ldrh	r3, [r3, #0]
    1e60:	b29a      	uxth	r2, r3
    1e62:	887b      	ldrh	r3, [r7, #2]
    1e64:	4013      	ands	r3, r2
    1e66:	b29b      	uxth	r3, r3
    1e68:	2b00      	cmp	r3, #0
    1e6a:	d002      	beq.n	1e72 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
    1e6c:	2301      	movs	r3, #1
    1e6e:	73fb      	strb	r3, [r7, #15]
    1e70:	e001      	b.n	1e76 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    1e72:	2300      	movs	r3, #0
    1e74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    1e76:	7bfb      	ldrb	r3, [r7, #15]
}
    1e78:	4618      	mov	r0, r3
    1e7a:	3714      	adds	r7, #20
    1e7c:	46bd      	mov	sp, r7
    1e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e82:	4770      	bx	lr

00001e84 <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e84:	b480      	push	{r7}
    1e86:	b083      	sub	sp, #12
    1e88:	af00      	add	r7, sp, #0
    1e8a:	6078      	str	r0, [r7, #4]
    1e8c:	460b      	mov	r3, r1
    1e8e:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  USARTx->SR = (uint16_t)~USART_FLAG;
    1e90:	887b      	ldrh	r3, [r7, #2]
    1e92:	43db      	mvns	r3, r3
    1e94:	b29a      	uxth	r2, r3
    1e96:	687b      	ldr	r3, [r7, #4]
    1e98:	801a      	strh	r2, [r3, #0]
}
    1e9a:	370c      	adds	r7, #12
    1e9c:	46bd      	mov	sp, r7
    1e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ea2:	4770      	bx	lr

00001ea4 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1ea4:	b480      	push	{r7}
    1ea6:	b087      	sub	sp, #28
    1ea8:	af00      	add	r7, sp, #0
    1eaa:	6078      	str	r0, [r7, #4]
    1eac:	460b      	mov	r3, r1
    1eae:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
    1eb0:	2300      	movs	r3, #0
    1eb2:	60fb      	str	r3, [r7, #12]
    1eb4:	2300      	movs	r3, #0
    1eb6:	617b      	str	r3, [r7, #20]
    1eb8:	2300      	movs	r3, #0
    1eba:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
    1ebc:	2300      	movs	r3, #0
    1ebe:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    1ec0:	887b      	ldrh	r3, [r7, #2]
    1ec2:	b2db      	uxtb	r3, r3
    1ec4:	095b      	lsrs	r3, r3, #5
    1ec6:	b2db      	uxtb	r3, r3
    1ec8:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
    1eca:	887b      	ldrh	r3, [r7, #2]
    1ecc:	f003 031f 	and.w	r3, r3, #31
    1ed0:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
    1ed2:	697b      	ldr	r3, [r7, #20]
    1ed4:	2201      	movs	r2, #1
    1ed6:	fa02 f303 	lsl.w	r3, r2, r3
    1eda:	617b      	str	r3, [r7, #20]

  if (usartreg == 0x01) /* The IT  is in CR1 register */
    1edc:	68bb      	ldr	r3, [r7, #8]
    1ede:	2b01      	cmp	r3, #1
    1ee0:	d106      	bne.n	1ef0 <USART_GetITStatus+0x4c>
  {
    itmask &= USARTx->CR1;
    1ee2:	687b      	ldr	r3, [r7, #4]
    1ee4:	899b      	ldrh	r3, [r3, #12]
    1ee6:	b29b      	uxth	r3, r3
    1ee8:	697a      	ldr	r2, [r7, #20]
    1eea:	4013      	ands	r3, r2
    1eec:	617b      	str	r3, [r7, #20]
    1eee:	e00f      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
    1ef0:	68bb      	ldr	r3, [r7, #8]
    1ef2:	2b02      	cmp	r3, #2
    1ef4:	d106      	bne.n	1f04 <USART_GetITStatus+0x60>
  {
    itmask &= USARTx->CR2;
    1ef6:	687b      	ldr	r3, [r7, #4]
    1ef8:	8a1b      	ldrh	r3, [r3, #16]
    1efa:	b29b      	uxth	r3, r3
    1efc:	697a      	ldr	r2, [r7, #20]
    1efe:	4013      	ands	r3, r2
    1f00:	617b      	str	r3, [r7, #20]
    1f02:	e005      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
    1f04:	687b      	ldr	r3, [r7, #4]
    1f06:	8a9b      	ldrh	r3, [r3, #20]
    1f08:	b29b      	uxth	r3, r3
    1f0a:	697a      	ldr	r2, [r7, #20]
    1f0c:	4013      	ands	r3, r2
    1f0e:	617b      	str	r3, [r7, #20]
  }

  bitpos = USART_IT >> 0x08;
    1f10:	887b      	ldrh	r3, [r7, #2]
    1f12:	0a1b      	lsrs	r3, r3, #8
    1f14:	b29b      	uxth	r3, r3
    1f16:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
    1f18:	68fb      	ldr	r3, [r7, #12]
    1f1a:	2201      	movs	r2, #1
    1f1c:	fa02 f303 	lsl.w	r3, r2, r3
    1f20:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
    1f22:	687b      	ldr	r3, [r7, #4]
    1f24:	881b      	ldrh	r3, [r3, #0]
    1f26:	b29b      	uxth	r3, r3
    1f28:	68fa      	ldr	r2, [r7, #12]
    1f2a:	4013      	ands	r3, r2
    1f2c:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
    1f2e:	697b      	ldr	r3, [r7, #20]
    1f30:	2b00      	cmp	r3, #0
    1f32:	d005      	beq.n	1f40 <USART_GetITStatus+0x9c>
    1f34:	68fb      	ldr	r3, [r7, #12]
    1f36:	2b00      	cmp	r3, #0
    1f38:	d002      	beq.n	1f40 <USART_GetITStatus+0x9c>
  {
    bitstatus = SET;
    1f3a:	2301      	movs	r3, #1
    1f3c:	74fb      	strb	r3, [r7, #19]
    1f3e:	e001      	b.n	1f44 <USART_GetITStatus+0xa0>
  }
  else
  {
    bitstatus = RESET;
    1f40:	2300      	movs	r3, #0
    1f42:	74fb      	strb	r3, [r7, #19]
  }

  return bitstatus;
    1f44:	7cfb      	ldrb	r3, [r7, #19]
}
    1f46:	4618      	mov	r0, r3
    1f48:	371c      	adds	r7, #28
    1f4a:	46bd      	mov	sp, r7
    1f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f50:	4770      	bx	lr
    1f52:	bf00      	nop

00001f54 <USART_ClearITPendingBit>:
  *   - TXE pending bit is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1f54:	b480      	push	{r7}
    1f56:	b085      	sub	sp, #20
    1f58:	af00      	add	r7, sp, #0
    1f5a:	6078      	str	r0, [r7, #4]
    1f5c:	460b      	mov	r3, r1
    1f5e:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
    1f60:	2300      	movs	r3, #0
    1f62:	81fb      	strh	r3, [r7, #14]
    1f64:	2300      	movs	r3, #0
    1f66:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  bitpos = USART_IT >> 0x08;
    1f68:	887b      	ldrh	r3, [r7, #2]
    1f6a:	0a1b      	lsrs	r3, r3, #8
    1f6c:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
    1f6e:	89fb      	ldrh	r3, [r7, #14]
    1f70:	2201      	movs	r2, #1
    1f72:	fa02 f303 	lsl.w	r3, r2, r3
    1f76:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
    1f78:	89bb      	ldrh	r3, [r7, #12]
    1f7a:	43db      	mvns	r3, r3
    1f7c:	b29a      	uxth	r2, r3
    1f7e:	687b      	ldr	r3, [r7, #4]
    1f80:	801a      	strh	r2, [r3, #0]
}
    1f82:	3714      	adds	r7, #20
    1f84:	46bd      	mov	sp, r7
    1f86:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f8a:	4770      	bx	lr

00001f8c <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
    1f8c:	b480      	push	{r7}
    1f8e:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
    1f90:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1f94:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1f98:	2200      	movs	r2, #0
    1f9a:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
    1f9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fa0:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fa4:	2200      	movs	r2, #0
    1fa6:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
    1fa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fac:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fb0:	2200      	movs	r2, #0
    1fb2:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
    1fb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fb8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fbc:	2200      	movs	r2, #0
    1fbe:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x000FFFFF;
    1fc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fc4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1fcc:	f2c0 020f 	movt	r2, #15
    1fd0:	615a      	str	r2, [r3, #20]
}
    1fd2:	46bd      	mov	sp, r7
    1fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1fd8:	4770      	bx	lr
    1fda:	bf00      	nop

00001fdc <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
    1fdc:	b480      	push	{r7}
    1fde:	b085      	sub	sp, #20
    1fe0:	af00      	add	r7, sp, #0
    1fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
    1fe4:	2300      	movs	r3, #0
    1fe6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
    1fe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fec:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1ff0:	60fb      	str	r3, [r7, #12]

  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
    1ff2:	687b      	ldr	r3, [r7, #4]
    1ff4:	799b      	ldrb	r3, [r3, #6]
    1ff6:	2b00      	cmp	r3, #0
    1ff8:	d074      	beq.n	20e4 <EXTI_Init+0x108>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    1ffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1ffe:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2002:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2006:	f2c4 0201 	movt	r2, #16385	; 0x4001
    200a:	6811      	ldr	r1, [r2, #0]
    200c:	687a      	ldr	r2, [r7, #4]
    200e:	6812      	ldr	r2, [r2, #0]
    2010:	43d2      	mvns	r2, r2
    2012:	400a      	ands	r2, r1
    2014:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    2016:	f44f 6380 	mov.w	r3, #1024	; 0x400
    201a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    201e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2022:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2026:	6851      	ldr	r1, [r2, #4]
    2028:	687a      	ldr	r2, [r7, #4]
    202a:	6812      	ldr	r2, [r2, #0]
    202c:	43d2      	mvns	r2, r2
    202e:	400a      	ands	r2, r1
    2030:	605a      	str	r2, [r3, #4]

    tmp += EXTI_InitStruct->EXTI_Mode;
    2032:	687b      	ldr	r3, [r7, #4]
    2034:	791b      	ldrb	r3, [r3, #4]
    2036:	68fa      	ldr	r2, [r7, #12]
    2038:	4413      	add	r3, r2
    203a:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    203c:	68fb      	ldr	r3, [r7, #12]
    203e:	68fa      	ldr	r2, [r7, #12]
    2040:	6811      	ldr	r1, [r2, #0]
    2042:	687a      	ldr	r2, [r7, #4]
    2044:	6812      	ldr	r2, [r2, #0]
    2046:	430a      	orrs	r2, r1
    2048:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    204a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    204e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2052:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2056:	f2c4 0201 	movt	r2, #16385	; 0x4001
    205a:	6891      	ldr	r1, [r2, #8]
    205c:	687a      	ldr	r2, [r7, #4]
    205e:	6812      	ldr	r2, [r2, #0]
    2060:	43d2      	mvns	r2, r2
    2062:	400a      	ands	r2, r1
    2064:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    2066:	f44f 6380 	mov.w	r3, #1024	; 0x400
    206a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    206e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2072:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2076:	68d1      	ldr	r1, [r2, #12]
    2078:	687a      	ldr	r2, [r7, #4]
    207a:	6812      	ldr	r2, [r2, #0]
    207c:	43d2      	mvns	r2, r2
    207e:	400a      	ands	r2, r1
    2080:	60da      	str	r2, [r3, #12]

    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
    2082:	687b      	ldr	r3, [r7, #4]
    2084:	795b      	ldrb	r3, [r3, #5]
    2086:	2b10      	cmp	r3, #16
    2088:	d11a      	bne.n	20c0 <EXTI_Init+0xe4>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
    208a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    208e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2092:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2096:	f2c4 0201 	movt	r2, #16385	; 0x4001
    209a:	6891      	ldr	r1, [r2, #8]
    209c:	687a      	ldr	r2, [r7, #4]
    209e:	6812      	ldr	r2, [r2, #0]
    20a0:	430a      	orrs	r2, r1
    20a2:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    20a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20a8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
    20b0:	f2c4 0201 	movt	r2, #16385	; 0x4001
    20b4:	68d1      	ldr	r1, [r2, #12]
    20b6:	687a      	ldr	r2, [r7, #4]
    20b8:	6812      	ldr	r2, [r2, #0]
    20ba:	430a      	orrs	r2, r1
    20bc:	60da      	str	r2, [r3, #12]
    20be:	e01e      	b.n	20fe <EXTI_Init+0x122>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
    20c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20c4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20c8:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
    20ca:	687b      	ldr	r3, [r7, #4]
    20cc:	795b      	ldrb	r3, [r3, #5]
    20ce:	68fa      	ldr	r2, [r7, #12]
    20d0:	4413      	add	r3, r2
    20d2:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    20d4:	68fb      	ldr	r3, [r7, #12]
    20d6:	68fa      	ldr	r2, [r7, #12]
    20d8:	6811      	ldr	r1, [r2, #0]
    20da:	687a      	ldr	r2, [r7, #4]
    20dc:	6812      	ldr	r2, [r2, #0]
    20de:	430a      	orrs	r2, r1
    20e0:	601a      	str	r2, [r3, #0]
    20e2:	e00c      	b.n	20fe <EXTI_Init+0x122>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
    20e4:	687b      	ldr	r3, [r7, #4]
    20e6:	791b      	ldrb	r3, [r3, #4]
    20e8:	68fa      	ldr	r2, [r7, #12]
    20ea:	4413      	add	r3, r2
    20ec:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
    20ee:	68fb      	ldr	r3, [r7, #12]
    20f0:	68fa      	ldr	r2, [r7, #12]
    20f2:	6811      	ldr	r1, [r2, #0]
    20f4:	687a      	ldr	r2, [r7, #4]
    20f6:	6812      	ldr	r2, [r2, #0]
    20f8:	43d2      	mvns	r2, r2
    20fa:	400a      	ands	r2, r1
    20fc:	601a      	str	r2, [r3, #0]
  }
}
    20fe:	3714      	adds	r7, #20
    2100:	46bd      	mov	sp, r7
    2102:	f85d 7b04 	ldr.w	r7, [sp], #4
    2106:	4770      	bx	lr

00002108 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
    2108:	b480      	push	{r7}
    210a:	b083      	sub	sp, #12
    210c:	af00      	add	r7, sp, #0
    210e:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
    2110:	687b      	ldr	r3, [r7, #4]
    2112:	2200      	movs	r2, #0
    2114:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
    2116:	687b      	ldr	r3, [r7, #4]
    2118:	2200      	movs	r2, #0
    211a:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
    211c:	687b      	ldr	r3, [r7, #4]
    211e:	220c      	movs	r2, #12
    2120:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
    2122:	687b      	ldr	r3, [r7, #4]
    2124:	2200      	movs	r2, #0
    2126:	719a      	strb	r2, [r3, #6]
}
    2128:	370c      	adds	r7, #12
    212a:	46bd      	mov	sp, r7
    212c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2130:	4770      	bx	lr
    2132:	bf00      	nop

00002134 <EXTI_GenerateSWInterrupt>:
  * @param  EXTI_Line: specifies the EXTI lines to be enabled or disabled.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
    2134:	b480      	push	{r7}
    2136:	b083      	sub	sp, #12
    2138:	af00      	add	r7, sp, #0
    213a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->SWIER |= EXTI_Line;
    213c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2140:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2144:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2148:	f2c4 0201 	movt	r2, #16385	; 0x4001
    214c:	6911      	ldr	r1, [r2, #16]
    214e:	687a      	ldr	r2, [r7, #4]
    2150:	430a      	orrs	r2, r1
    2152:	611a      	str	r2, [r3, #16]
}
    2154:	370c      	adds	r7, #12
    2156:	46bd      	mov	sp, r7
    2158:	f85d 7b04 	ldr.w	r7, [sp], #4
    215c:	4770      	bx	lr
    215e:	bf00      	nop

00002160 <EXTI_GetFlagStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
    2160:	b480      	push	{r7}
    2162:	b085      	sub	sp, #20
    2164:	af00      	add	r7, sp, #0
    2166:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    2168:	2300      	movs	r3, #0
    216a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
    216c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2170:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2174:	695a      	ldr	r2, [r3, #20]
    2176:	687b      	ldr	r3, [r7, #4]
    2178:	4013      	ands	r3, r2
    217a:	2b00      	cmp	r3, #0
    217c:	d002      	beq.n	2184 <EXTI_GetFlagStatus+0x24>
  {
    bitstatus = SET;
    217e:	2301      	movs	r3, #1
    2180:	73fb      	strb	r3, [r7, #15]
    2182:	e001      	b.n	2188 <EXTI_GetFlagStatus+0x28>
  }
  else
  {
    bitstatus = RESET;
    2184:	2300      	movs	r3, #0
    2186:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    2188:	7bfb      	ldrb	r3, [r7, #15]
}
    218a:	4618      	mov	r0, r3
    218c:	3714      	adds	r7, #20
    218e:	46bd      	mov	sp, r7
    2190:	f85d 7b04 	ldr.w	r7, [sp], #4
    2194:	4770      	bx	lr
    2196:	bf00      	nop

00002198 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
    2198:	b480      	push	{r7}
    219a:	b083      	sub	sp, #12
    219c:	af00      	add	r7, sp, #0
    219e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    21a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21a4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21a8:	687a      	ldr	r2, [r7, #4]
    21aa:	615a      	str	r2, [r3, #20]
}
    21ac:	370c      	adds	r7, #12
    21ae:	46bd      	mov	sp, r7
    21b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    21b4:	4770      	bx	lr
    21b6:	bf00      	nop

000021b8 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
    21b8:	b480      	push	{r7}
    21ba:	b085      	sub	sp, #20
    21bc:	af00      	add	r7, sp, #0
    21be:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
    21c0:	2300      	movs	r3, #0
    21c2:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
    21c4:	2300      	movs	r3, #0
    21c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  enablestatus =  EXTI->IMR & EXTI_Line;
    21c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21cc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21d0:	681a      	ldr	r2, [r3, #0]
    21d2:	687b      	ldr	r3, [r7, #4]
    21d4:	4013      	ands	r3, r2
    21d6:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
    21d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21dc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21e0:	695a      	ldr	r2, [r3, #20]
    21e2:	687b      	ldr	r3, [r7, #4]
    21e4:	4013      	ands	r3, r2
    21e6:	2b00      	cmp	r3, #0
    21e8:	d005      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
    21ea:	68bb      	ldr	r3, [r7, #8]
    21ec:	2b00      	cmp	r3, #0
    21ee:	d002      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
  {
    bitstatus = SET;
    21f0:	2301      	movs	r3, #1
    21f2:	73fb      	strb	r3, [r7, #15]
    21f4:	e001      	b.n	21fa <EXTI_GetITStatus+0x42>
  }
  else
  {
    bitstatus = RESET;
    21f6:	2300      	movs	r3, #0
    21f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    21fa:	7bfb      	ldrb	r3, [r7, #15]
}
    21fc:	4618      	mov	r0, r3
    21fe:	3714      	adds	r7, #20
    2200:	46bd      	mov	sp, r7
    2202:	f85d 7b04 	ldr.w	r7, [sp], #4
    2206:	4770      	bx	lr

00002208 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
    2208:	b480      	push	{r7}
    220a:	b083      	sub	sp, #12
    220c:	af00      	add	r7, sp, #0
    220e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    2210:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2214:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2218:	687a      	ldr	r2, [r7, #4]
    221a:	615a      	str	r2, [r3, #20]
}
    221c:	370c      	adds	r7, #12
    221e:	46bd      	mov	sp, r7
    2220:	f85d 7b04 	ldr.w	r7, [sp], #4
    2224:	4770      	bx	lr
    2226:	bf00      	nop

00002228 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
    2228:	b480      	push	{r7}
    222a:	b083      	sub	sp, #12
    222c:	af00      	add	r7, sp, #0
    222e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
    2230:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2234:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2238:	687a      	ldr	r2, [r7, #4]
    223a:	f042 62bf 	orr.w	r2, r2, #100139008	; 0x5f80000
    223e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    2242:	60da      	str	r2, [r3, #12]
}
    2244:	370c      	adds	r7, #12
    2246:	46bd      	mov	sp, r7
    2248:	f85d 7b04 	ldr.w	r7, [sp], #4
    224c:	4770      	bx	lr
    224e:	bf00      	nop

00002250 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
    2250:	b480      	push	{r7}
    2252:	b087      	sub	sp, #28
    2254:	af00      	add	r7, sp, #0
    2256:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
    2258:	2300      	movs	r3, #0
    225a:	617b      	str	r3, [r7, #20]
    225c:	2300      	movs	r3, #0
    225e:	613b      	str	r3, [r7, #16]
    2260:	230f      	movs	r3, #15
    2262:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
    2264:	687b      	ldr	r3, [r7, #4]
    2266:	78db      	ldrb	r3, [r3, #3]
    2268:	2b00      	cmp	r3, #0
    226a:	d042      	beq.n	22f2 <NVIC_Init+0xa2>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    226c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2270:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2274:	68db      	ldr	r3, [r3, #12]
    2276:	43db      	mvns	r3, r3
    2278:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    227c:	0a1b      	lsrs	r3, r3, #8
    227e:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
    2280:	697b      	ldr	r3, [r7, #20]
    2282:	f1c3 0304 	rsb	r3, r3, #4
    2286:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
    2288:	697b      	ldr	r3, [r7, #20]
    228a:	68fa      	ldr	r2, [r7, #12]
    228c:	fa22 f303 	lsr.w	r3, r2, r3
    2290:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    2292:	687b      	ldr	r3, [r7, #4]
    2294:	785b      	ldrb	r3, [r3, #1]
    2296:	461a      	mov	r2, r3
    2298:	693b      	ldr	r3, [r7, #16]
    229a:	fa02 f303 	lsl.w	r3, r2, r3
    229e:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
    22a0:	687b      	ldr	r3, [r7, #4]
    22a2:	789b      	ldrb	r3, [r3, #2]
    22a4:	461a      	mov	r2, r3
    22a6:	68fb      	ldr	r3, [r7, #12]
    22a8:	4013      	ands	r3, r2
    22aa:	697a      	ldr	r2, [r7, #20]
    22ac:	4313      	orrs	r3, r2
    22ae:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
    22b0:	697b      	ldr	r3, [r7, #20]
    22b2:	011b      	lsls	r3, r3, #4
    22b4:	617b      	str	r3, [r7, #20]

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    22b6:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22ba:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22be:	687a      	ldr	r2, [r7, #4]
    22c0:	7812      	ldrb	r2, [r2, #0]
    22c2:	4611      	mov	r1, r2
    22c4:	697a      	ldr	r2, [r7, #20]
    22c6:	b2d2      	uxtb	r2, r2
    22c8:	440b      	add	r3, r1
    22ca:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ce:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22d2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22d6:	687a      	ldr	r2, [r7, #4]
    22d8:	7812      	ldrb	r2, [r2, #0]
    22da:	0952      	lsrs	r2, r2, #5
    22dc:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    22de:	6879      	ldr	r1, [r7, #4]
    22e0:	7809      	ldrb	r1, [r1, #0]
    22e2:	f001 011f 	and.w	r1, r1, #31
    22e6:	2001      	movs	r0, #1
    22e8:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    22f0:	e011      	b.n	2316 <NVIC_Init+0xc6>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22f2:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22f6:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22fa:	687a      	ldr	r2, [r7, #4]
    22fc:	7812      	ldrb	r2, [r2, #0]
    22fe:	0952      	lsrs	r2, r2, #5
    2300:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    2302:	6879      	ldr	r1, [r7, #4]
    2304:	7809      	ldrb	r1, [r1, #0]
    2306:	f001 011f 	and.w	r1, r1, #31
    230a:	2001      	movs	r0, #1
    230c:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    2310:	3220      	adds	r2, #32
    2312:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
    2316:	371c      	adds	r7, #28
    2318:	46bd      	mov	sp, r7
    231a:	f85d 7b04 	ldr.w	r7, [sp], #4
    231e:	4770      	bx	lr

00002320 <NVIC_SetVectorTable>:
  * @param  Offset: Vector Table base offset field. This value must be a multiple
  *         of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{
    2320:	b480      	push	{r7}
    2322:	b083      	sub	sp, #12
    2324:	af00      	add	r7, sp, #0
    2326:	6078      	str	r0, [r7, #4]
    2328:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));

  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
    232a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    232e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2332:	683a      	ldr	r2, [r7, #0]
    2334:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
    2338:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    233c:	6879      	ldr	r1, [r7, #4]
    233e:	430a      	orrs	r2, r1
    2340:	609a      	str	r2, [r3, #8]
}
    2342:	370c      	adds	r7, #12
    2344:	46bd      	mov	sp, r7
    2346:	f85d 7b04 	ldr.w	r7, [sp], #4
    234a:	4770      	bx	lr

0000234c <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
    234c:	b480      	push	{r7}
    234e:	b083      	sub	sp, #12
    2350:	af00      	add	r7, sp, #0
    2352:	4602      	mov	r2, r0
    2354:	460b      	mov	r3, r1
    2356:	71fa      	strb	r2, [r7, #7]
    2358:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    235a:	79bb      	ldrb	r3, [r7, #6]
    235c:	2b00      	cmp	r3, #0
    235e:	d00c      	beq.n	237a <NVIC_SystemLPConfig+0x2e>
  {
    SCB->SCR |= LowPowerMode;
    2360:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2364:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2368:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    236c:	f2ce 0200 	movt	r2, #57344	; 0xe000
    2370:	6911      	ldr	r1, [r2, #16]
    2372:	79fa      	ldrb	r2, [r7, #7]
    2374:	430a      	orrs	r2, r1
    2376:	611a      	str	r2, [r3, #16]
    2378:	e00c      	b.n	2394 <NVIC_SystemLPConfig+0x48>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
    237a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    237e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2382:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    2386:	f2ce 0200 	movt	r2, #57344	; 0xe000
    238a:	6911      	ldr	r1, [r2, #16]
    238c:	79fa      	ldrb	r2, [r7, #7]
    238e:	43d2      	mvns	r2, r2
    2390:	400a      	ands	r2, r1
    2392:	611a      	str	r2, [r3, #16]
  }
}
    2394:	370c      	adds	r7, #12
    2396:	46bd      	mov	sp, r7
    2398:	f85d 7b04 	ldr.w	r7, [sp], #4
    239c:	4770      	bx	lr
    239e:	bf00      	nop

000023a0 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
    23a0:	b480      	push	{r7}
    23a2:	b083      	sub	sp, #12
    23a4:	af00      	add	r7, sp, #0
    23a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
    23a8:	687b      	ldr	r3, [r7, #4]
    23aa:	2b04      	cmp	r3, #4
    23ac:	d10c      	bne.n	23c8 <SysTick_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
    23ae:	f24e 0310 	movw	r3, #57360	; 0xe010
    23b2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23b6:	f24e 0210 	movw	r2, #57360	; 0xe010
    23ba:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23be:	6812      	ldr	r2, [r2, #0]
    23c0:	f042 0204 	orr.w	r2, r2, #4
    23c4:	601a      	str	r2, [r3, #0]
    23c6:	e00b      	b.n	23e0 <SysTick_CLKSourceConfig+0x40>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
    23c8:	f24e 0310 	movw	r3, #57360	; 0xe010
    23cc:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23d0:	f24e 0210 	movw	r2, #57360	; 0xe010
    23d4:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23d8:	6812      	ldr	r2, [r2, #0]
    23da:	f022 0204 	bic.w	r2, r2, #4
    23de:	601a      	str	r2, [r3, #0]
  }
}
    23e0:	370c      	adds	r7, #12
    23e2:	46bd      	mov	sp, r7
    23e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    23e8:	4770      	bx	lr
    23ea:	bf00      	nop

000023ec <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
    23ec:	b580      	push	{r7, lr}
    23ee:	b086      	sub	sp, #24
    23f0:	af00      	add	r7, sp, #0
    23f2:	60f8      	str	r0, [r7, #12]
    23f4:	60b9      	str	r1, [r7, #8]
    23f6:	607a      	str	r2, [r7, #4]
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
    23f8:	2038      	movs	r0, #56	; 0x38
    23fa:	f002 f9a5 	bl	4748 <pvPortMalloc>
    23fe:	6138      	str	r0, [r7, #16]
	if( pxCoRoutine )
    2400:	693b      	ldr	r3, [r7, #16]
    2402:	2b00      	cmp	r3, #0
    2404:	d058      	beq.n	24b8 <xCoRoutineCreate+0xcc>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
    2406:	f240 230c 	movw	r3, #524	; 0x20c
    240a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    240e:	681b      	ldr	r3, [r3, #0]
    2410:	2b00      	cmp	r3, #0
    2412:	d107      	bne.n	2424 <xCoRoutineCreate+0x38>
		{
			pxCurrentCoRoutine = pxCoRoutine;
    2414:	f240 230c 	movw	r3, #524	; 0x20c
    2418:	f2c2 0300 	movt	r3, #8192	; 0x2000
    241c:	693a      	ldr	r2, [r7, #16]
    241e:	601a      	str	r2, [r3, #0]
			prvInitialiseCoRoutineLists();
    2420:	f000 fa08 	bl	2834 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
    2424:	68bb      	ldr	r3, [r7, #8]
    2426:	2b01      	cmp	r3, #1
    2428:	d901      	bls.n	242e <xCoRoutineCreate+0x42>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
    242a:	2301      	movs	r3, #1
    242c:	60bb      	str	r3, [r7, #8]
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
    242e:	693b      	ldr	r3, [r7, #16]
    2430:	2200      	movs	r2, #0
    2432:	869a      	strh	r2, [r3, #52]	; 0x34
		pxCoRoutine->uxPriority = uxPriority;
    2434:	693b      	ldr	r3, [r7, #16]
    2436:	68ba      	ldr	r2, [r7, #8]
    2438:	62da      	str	r2, [r3, #44]	; 0x2c
		pxCoRoutine->uxIndex = uxIndex;
    243a:	693b      	ldr	r3, [r7, #16]
    243c:	687a      	ldr	r2, [r7, #4]
    243e:	631a      	str	r2, [r3, #48]	; 0x30
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    2440:	693b      	ldr	r3, [r7, #16]
    2442:	68fa      	ldr	r2, [r7, #12]
    2444:	601a      	str	r2, [r3, #0]

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    2446:	693b      	ldr	r3, [r7, #16]
    2448:	3304      	adds	r3, #4
    244a:	4618      	mov	r0, r3
    244c:	f000 fa7c 	bl	2948 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    2450:	693b      	ldr	r3, [r7, #16]
    2452:	3318      	adds	r3, #24
    2454:	4618      	mov	r0, r3
    2456:	f000 fa77 	bl	2948 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    245a:	693b      	ldr	r3, [r7, #16]
    245c:	693a      	ldr	r2, [r7, #16]
    245e:	611a      	str	r2, [r3, #16]
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    2460:	693b      	ldr	r3, [r7, #16]
    2462:	693a      	ldr	r2, [r7, #16]
    2464:	625a      	str	r2, [r3, #36]	; 0x24
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    2466:	68bb      	ldr	r3, [r7, #8]
    2468:	f1c3 0214 	rsb	r2, r3, #20
    246c:	693b      	ldr	r3, [r7, #16]
    246e:	619a      	str	r2, [r3, #24]
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
    2470:	693b      	ldr	r3, [r7, #16]
    2472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2474:	f240 2310 	movw	r3, #528	; 0x210
    2478:	f2c2 0300 	movt	r3, #8192	; 0x2000
    247c:	681b      	ldr	r3, [r3, #0]
    247e:	429a      	cmp	r2, r3
    2480:	d906      	bls.n	2490 <xCoRoutineCreate+0xa4>
    2482:	693b      	ldr	r3, [r7, #16]
    2484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2486:	f240 2310 	movw	r3, #528	; 0x210
    248a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    248e:	601a      	str	r2, [r3, #0]
    2490:	693b      	ldr	r3, [r7, #16]
    2492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2494:	4613      	mov	r3, r2
    2496:	009b      	lsls	r3, r3, #2
    2498:	4413      	add	r3, r2
    249a:	009b      	lsls	r3, r3, #2
    249c:	f240 12a0 	movw	r2, #416	; 0x1a0
    24a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    24a4:	441a      	add	r2, r3
    24a6:	693b      	ldr	r3, [r7, #16]
    24a8:	3304      	adds	r3, #4
    24aa:	4610      	mov	r0, r2
    24ac:	4619      	mov	r1, r3
    24ae:	f000 fa57 	bl	2960 <vListInsertEnd>

		xReturn = pdPASS;
    24b2:	2301      	movs	r3, #1
    24b4:	617b      	str	r3, [r7, #20]
    24b6:	e002      	b.n	24be <xCoRoutineCreate+0xd2>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    24b8:	f04f 33ff 	mov.w	r3, #4294967295
    24bc:	617b      	str	r3, [r7, #20]
	}
	
	return xReturn;	
    24be:	697b      	ldr	r3, [r7, #20]
}
    24c0:	4618      	mov	r0, r3
    24c2:	3718      	adds	r7, #24
    24c4:	46bd      	mov	sp, r7
    24c6:	bd80      	pop	{r7, pc}

000024c8 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
    24c8:	b580      	push	{r7, lr}
    24ca:	b084      	sub	sp, #16
    24cc:	af00      	add	r7, sp, #0
    24ce:	6078      	str	r0, [r7, #4]
    24d0:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    24d2:	f240 2314 	movw	r3, #532	; 0x214
    24d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24da:	681a      	ldr	r2, [r3, #0]
    24dc:	687b      	ldr	r3, [r7, #4]
    24de:	4413      	add	r3, r2
    24e0:	60fb      	str	r3, [r7, #12]

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    24e2:	f240 230c 	movw	r3, #524	; 0x20c
    24e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24ea:	681b      	ldr	r3, [r3, #0]
    24ec:	3304      	adds	r3, #4
    24ee:	4618      	mov	r0, r3
    24f0:	f000 fa96 	bl	2a20 <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    24f4:	f240 230c 	movw	r3, #524	; 0x20c
    24f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24fc:	681b      	ldr	r3, [r3, #0]
    24fe:	68fa      	ldr	r2, [r7, #12]
    2500:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xCoRoutineTickCount )
    2502:	f240 2314 	movw	r3, #532	; 0x214
    2506:	f2c2 0300 	movt	r3, #8192	; 0x2000
    250a:	681b      	ldr	r3, [r3, #0]
    250c:	68fa      	ldr	r2, [r7, #12]
    250e:	429a      	cmp	r2, r3
    2510:	d20f      	bcs.n	2532 <vCoRoutineAddToDelayedList+0x6a>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2512:	f240 13f4 	movw	r3, #500	; 0x1f4
    2516:	f2c2 0300 	movt	r3, #8192	; 0x2000
    251a:	681a      	ldr	r2, [r3, #0]
    251c:	f240 230c 	movw	r3, #524	; 0x20c
    2520:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2524:	681b      	ldr	r3, [r3, #0]
    2526:	3304      	adds	r3, #4
    2528:	4610      	mov	r0, r2
    252a:	4619      	mov	r1, r3
    252c:	f000 fa40 	bl	29b0 <vListInsert>
    2530:	e00e      	b.n	2550 <vCoRoutineAddToDelayedList+0x88>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2532:	f240 13f0 	movw	r3, #496	; 0x1f0
    2536:	f2c2 0300 	movt	r3, #8192	; 0x2000
    253a:	681a      	ldr	r2, [r3, #0]
    253c:	f240 230c 	movw	r3, #524	; 0x20c
    2540:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2544:	681b      	ldr	r3, [r3, #0]
    2546:	3304      	adds	r3, #4
    2548:	4610      	mov	r0, r2
    254a:	4619      	mov	r1, r3
    254c:	f000 fa30 	bl	29b0 <vListInsert>
	}

	if( pxEventList )
    2550:	683b      	ldr	r3, [r7, #0]
    2552:	2b00      	cmp	r3, #0
    2554:	d009      	beq.n	256a <vCoRoutineAddToDelayedList+0xa2>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    2556:	f240 230c 	movw	r3, #524	; 0x20c
    255a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    255e:	681b      	ldr	r3, [r3, #0]
    2560:	3318      	adds	r3, #24
    2562:	6838      	ldr	r0, [r7, #0]
    2564:	4619      	mov	r1, r3
    2566:	f000 fa23 	bl	29b0 <vListInsert>
	}
}
    256a:	3710      	adds	r7, #16
    256c:	46bd      	mov	sp, r7
    256e:	bd80      	pop	{r7, pc}

00002570 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
    2570:	b580      	push	{r7, lr}
    2572:	b082      	sub	sp, #8
    2574:	af00      	add	r7, sp, #0
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    2576:	e039      	b.n	25ec <prvCheckPendingReadyList+0x7c>
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
    2578:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    257c:	f380 8811 	msr	BASEPRI, r0
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
    2580:	f240 13f8 	movw	r3, #504	; 0x1f8
    2584:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2588:	68db      	ldr	r3, [r3, #12]
    258a:	68db      	ldr	r3, [r3, #12]
    258c:	607b      	str	r3, [r7, #4]
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    258e:	687b      	ldr	r3, [r7, #4]
    2590:	3318      	adds	r3, #24
    2592:	4618      	mov	r0, r3
    2594:	f000 fa44 	bl	2a20 <vListRemove>
		}
		portENABLE_INTERRUPTS();
    2598:	f04f 0000 	mov.w	r0, #0
    259c:	f380 8811 	msr	BASEPRI, r0

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    25a0:	687b      	ldr	r3, [r7, #4]
    25a2:	3304      	adds	r3, #4
    25a4:	4618      	mov	r0, r3
    25a6:	f000 fa3b 	bl	2a20 <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    25aa:	687b      	ldr	r3, [r7, #4]
    25ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25ae:	f240 2310 	movw	r3, #528	; 0x210
    25b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25b6:	681b      	ldr	r3, [r3, #0]
    25b8:	429a      	cmp	r2, r3
    25ba:	d906      	bls.n	25ca <prvCheckPendingReadyList+0x5a>
    25bc:	687b      	ldr	r3, [r7, #4]
    25be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25c0:	f240 2310 	movw	r3, #528	; 0x210
    25c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25c8:	601a      	str	r2, [r3, #0]
    25ca:	687b      	ldr	r3, [r7, #4]
    25cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25ce:	4613      	mov	r3, r2
    25d0:	009b      	lsls	r3, r3, #2
    25d2:	4413      	add	r3, r2
    25d4:	009b      	lsls	r3, r3, #2
    25d6:	f240 12a0 	movw	r2, #416	; 0x1a0
    25da:	f2c2 0200 	movt	r2, #8192	; 0x2000
    25de:	441a      	add	r2, r3
    25e0:	687b      	ldr	r3, [r7, #4]
    25e2:	3304      	adds	r3, #4
    25e4:	4610      	mov	r0, r2
    25e6:	4619      	mov	r1, r3
    25e8:	f000 f9ba 	bl	2960 <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    25ec:	f240 13f8 	movw	r3, #504	; 0x1f8
    25f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25f4:	681b      	ldr	r3, [r3, #0]
    25f6:	2b00      	cmp	r3, #0
    25f8:	d1be      	bne.n	2578 <prvCheckPendingReadyList+0x8>
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
    25fa:	3708      	adds	r7, #8
    25fc:	46bd      	mov	sp, r7
    25fe:	bd80      	pop	{r7, pc}

00002600 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
    2600:	b580      	push	{r7, lr}
    2602:	b082      	sub	sp, #8
    2604:	af00      	add	r7, sp, #0
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    2606:	f001 fafd 	bl	3c04 <xTaskGetTickCount>
    260a:	4602      	mov	r2, r0
    260c:	f240 2318 	movw	r3, #536	; 0x218
    2610:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2614:	681b      	ldr	r3, [r3, #0]
    2616:	1ad2      	subs	r2, r2, r3
    2618:	f240 231c 	movw	r3, #540	; 0x21c
    261c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2620:	601a      	str	r2, [r3, #0]
	while( xPassedTicks )
    2622:	e085      	b.n	2730 <prvCheckDelayedList+0x130>
	{
		xCoRoutineTickCount++;
    2624:	f240 2314 	movw	r3, #532	; 0x214
    2628:	f2c2 0300 	movt	r3, #8192	; 0x2000
    262c:	681b      	ldr	r3, [r3, #0]
    262e:	1c5a      	adds	r2, r3, #1
    2630:	f240 2314 	movw	r3, #532	; 0x214
    2634:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2638:	601a      	str	r2, [r3, #0]
		xPassedTicks--;
    263a:	f240 231c 	movw	r3, #540	; 0x21c
    263e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2642:	681b      	ldr	r3, [r3, #0]
    2644:	1e5a      	subs	r2, r3, #1
    2646:	f240 231c 	movw	r3, #540	; 0x21c
    264a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    264e:	601a      	str	r2, [r3, #0]

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
    2650:	f240 2314 	movw	r3, #532	; 0x214
    2654:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2658:	681b      	ldr	r3, [r3, #0]
    265a:	2b00      	cmp	r3, #0
    265c:	d116      	bne.n	268c <prvCheckDelayedList+0x8c>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
    265e:	f240 13f0 	movw	r3, #496	; 0x1f0
    2662:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2666:	681b      	ldr	r3, [r3, #0]
    2668:	607b      	str	r3, [r7, #4]
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    266a:	f240 13f4 	movw	r3, #500	; 0x1f4
    266e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2672:	681a      	ldr	r2, [r3, #0]
    2674:	f240 13f0 	movw	r3, #496	; 0x1f0
    2678:	f2c2 0300 	movt	r3, #8192	; 0x2000
    267c:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedCoRoutineList = pxTemp;
    267e:	f240 13f4 	movw	r3, #500	; 0x1f4
    2682:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2686:	687a      	ldr	r2, [r7, #4]
    2688:	601a      	str	r2, [r3, #0]
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    268a:	e049      	b.n	2720 <prvCheckDelayedList+0x120>
    268c:	e048      	b.n	2720 <prvCheckDelayedList+0x120>
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    268e:	f240 13f0 	movw	r3, #496	; 0x1f0
    2692:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2696:	681b      	ldr	r3, [r3, #0]
    2698:	68db      	ldr	r3, [r3, #12]
    269a:	68db      	ldr	r3, [r3, #12]
    269c:	603b      	str	r3, [r7, #0]

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
    269e:	683b      	ldr	r3, [r7, #0]
    26a0:	685a      	ldr	r2, [r3, #4]
    26a2:	f240 2314 	movw	r3, #532	; 0x214
    26a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26aa:	681b      	ldr	r3, [r3, #0]
    26ac:	429a      	cmp	r2, r3
    26ae:	d900      	bls.n	26b2 <prvCheckDelayedList+0xb2>
			{			
				/* Timeout not yet expired. */																			
				break;																				
    26b0:	e03e      	b.n	2730 <prvCheckDelayedList+0x130>
			}																						

			portDISABLE_INTERRUPTS();
    26b2:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    26b6:	f380 8811 	msr	BASEPRI, r0
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
    26ba:	683b      	ldr	r3, [r7, #0]
    26bc:	3304      	adds	r3, #4
    26be:	4618      	mov	r0, r3
    26c0:	f000 f9ae 	bl	2a20 <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
    26c4:	683b      	ldr	r3, [r7, #0]
    26c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    26c8:	2b00      	cmp	r3, #0
    26ca:	d004      	beq.n	26d6 <prvCheckDelayedList+0xd6>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
    26cc:	683b      	ldr	r3, [r7, #0]
    26ce:	3318      	adds	r3, #24
    26d0:	4618      	mov	r0, r3
    26d2:	f000 f9a5 	bl	2a20 <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    26d6:	f04f 0000 	mov.w	r0, #0
    26da:	f380 8811 	msr	BASEPRI, r0

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    26de:	683b      	ldr	r3, [r7, #0]
    26e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    26e2:	f240 2310 	movw	r3, #528	; 0x210
    26e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26ea:	681b      	ldr	r3, [r3, #0]
    26ec:	429a      	cmp	r2, r3
    26ee:	d906      	bls.n	26fe <prvCheckDelayedList+0xfe>
    26f0:	683b      	ldr	r3, [r7, #0]
    26f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    26f4:	f240 2310 	movw	r3, #528	; 0x210
    26f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26fc:	601a      	str	r2, [r3, #0]
    26fe:	683b      	ldr	r3, [r7, #0]
    2700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2702:	4613      	mov	r3, r2
    2704:	009b      	lsls	r3, r3, #2
    2706:	4413      	add	r3, r2
    2708:	009b      	lsls	r3, r3, #2
    270a:	f240 12a0 	movw	r2, #416	; 0x1a0
    270e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2712:	441a      	add	r2, r3
    2714:	683b      	ldr	r3, [r7, #0]
    2716:	3304      	adds	r3, #4
    2718:	4610      	mov	r0, r2
    271a:	4619      	mov	r1, r3
    271c:	f000 f920 	bl	2960 <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    2720:	f240 13f0 	movw	r3, #496	; 0x1f0
    2724:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2728:	681b      	ldr	r3, [r3, #0]
    272a:	681b      	ldr	r3, [r3, #0]
    272c:	2b00      	cmp	r3, #0
    272e:	d1ae      	bne.n	268e <prvCheckDelayedList+0x8e>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    2730:	f240 231c 	movw	r3, #540	; 0x21c
    2734:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2738:	681b      	ldr	r3, [r3, #0]
    273a:	2b00      	cmp	r3, #0
    273c:	f47f af72 	bne.w	2624 <prvCheckDelayedList+0x24>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
    2740:	f240 2314 	movw	r3, #532	; 0x214
    2744:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2748:	681a      	ldr	r2, [r3, #0]
    274a:	f240 2318 	movw	r3, #536	; 0x218
    274e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2752:	601a      	str	r2, [r3, #0]
}
    2754:	3708      	adds	r7, #8
    2756:	46bd      	mov	sp, r7
    2758:	bd80      	pop	{r7, pc}
    275a:	bf00      	nop

0000275c <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    275c:	b580      	push	{r7, lr}
    275e:	b082      	sub	sp, #8
    2760:	af00      	add	r7, sp, #0
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
    2762:	f7ff ff05 	bl	2570 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
    2766:	f7ff ff4b 	bl	2600 <prvCheckDelayedList>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    276a:	e012      	b.n	2792 <vCoRoutineSchedule+0x36>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    276c:	f240 2310 	movw	r3, #528	; 0x210
    2770:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2774:	681b      	ldr	r3, [r3, #0]
    2776:	2b00      	cmp	r3, #0
    2778:	d100      	bne.n	277c <vCoRoutineSchedule+0x20>
		{
			/* No more co-routines to check. */
			return;
    277a:	e057      	b.n	282c <vCoRoutineSchedule+0xd0>
		}
		--uxTopCoRoutineReadyPriority;
    277c:	f240 2310 	movw	r3, #528	; 0x210
    2780:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2784:	681b      	ldr	r3, [r3, #0]
    2786:	1e5a      	subs	r2, r3, #1
    2788:	f240 2310 	movw	r3, #528	; 0x210
    278c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2790:	601a      	str	r2, [r3, #0]

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    2792:	f240 2310 	movw	r3, #528	; 0x210
    2796:	f2c2 0300 	movt	r3, #8192	; 0x2000
    279a:	6819      	ldr	r1, [r3, #0]
    279c:	f240 12a0 	movw	r2, #416	; 0x1a0
    27a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27a4:	460b      	mov	r3, r1
    27a6:	009b      	lsls	r3, r3, #2
    27a8:	440b      	add	r3, r1
    27aa:	009b      	lsls	r3, r3, #2
    27ac:	4413      	add	r3, r2
    27ae:	681b      	ldr	r3, [r3, #0]
    27b0:	2b00      	cmp	r3, #0
    27b2:	d0db      	beq.n	276c <vCoRoutineSchedule+0x10>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    27b4:	f240 2310 	movw	r3, #528	; 0x210
    27b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27bc:	681a      	ldr	r2, [r3, #0]
    27be:	4613      	mov	r3, r2
    27c0:	009b      	lsls	r3, r3, #2
    27c2:	4413      	add	r3, r2
    27c4:	009b      	lsls	r3, r3, #2
    27c6:	f240 12a0 	movw	r2, #416	; 0x1a0
    27ca:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27ce:	4413      	add	r3, r2
    27d0:	607b      	str	r3, [r7, #4]
    27d2:	687b      	ldr	r3, [r7, #4]
    27d4:	685b      	ldr	r3, [r3, #4]
    27d6:	685a      	ldr	r2, [r3, #4]
    27d8:	687b      	ldr	r3, [r7, #4]
    27da:	605a      	str	r2, [r3, #4]
    27dc:	687b      	ldr	r3, [r7, #4]
    27de:	685a      	ldr	r2, [r3, #4]
    27e0:	687b      	ldr	r3, [r7, #4]
    27e2:	3308      	adds	r3, #8
    27e4:	429a      	cmp	r2, r3
    27e6:	d104      	bne.n	27f2 <vCoRoutineSchedule+0x96>
    27e8:	687b      	ldr	r3, [r7, #4]
    27ea:	685b      	ldr	r3, [r3, #4]
    27ec:	685a      	ldr	r2, [r3, #4]
    27ee:	687b      	ldr	r3, [r7, #4]
    27f0:	605a      	str	r2, [r3, #4]
    27f2:	687b      	ldr	r3, [r7, #4]
    27f4:	685b      	ldr	r3, [r3, #4]
    27f6:	68da      	ldr	r2, [r3, #12]
    27f8:	f240 230c 	movw	r3, #524	; 0x20c
    27fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2800:	601a      	str	r2, [r3, #0]

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    2802:	f240 230c 	movw	r3, #524	; 0x20c
    2806:	f2c2 0300 	movt	r3, #8192	; 0x2000
    280a:	681b      	ldr	r3, [r3, #0]
    280c:	681a      	ldr	r2, [r3, #0]
    280e:	f240 230c 	movw	r3, #524	; 0x20c
    2812:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2816:	6819      	ldr	r1, [r3, #0]
    2818:	f240 230c 	movw	r3, #524	; 0x20c
    281c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2820:	681b      	ldr	r3, [r3, #0]
    2822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2824:	4608      	mov	r0, r1
    2826:	4619      	mov	r1, r3
    2828:	4790      	blx	r2

	return;
    282a:	bf00      	nop
}
    282c:	3708      	adds	r7, #8
    282e:	46bd      	mov	sp, r7
    2830:	bd80      	pop	{r7, pc}
    2832:	bf00      	nop

00002834 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
    2834:	b580      	push	{r7, lr}
    2836:	b082      	sub	sp, #8
    2838:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    283a:	2300      	movs	r3, #0
    283c:	607b      	str	r3, [r7, #4]
    283e:	e00f      	b.n	2860 <prvInitialiseCoRoutineLists+0x2c>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    2840:	687a      	ldr	r2, [r7, #4]
    2842:	4613      	mov	r3, r2
    2844:	009b      	lsls	r3, r3, #2
    2846:	4413      	add	r3, r2
    2848:	009b      	lsls	r3, r3, #2
    284a:	f240 12a0 	movw	r2, #416	; 0x1a0
    284e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2852:	4413      	add	r3, r2
    2854:	4618      	mov	r0, r3
    2856:	f000 f857 	bl	2908 <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    285a:	687b      	ldr	r3, [r7, #4]
    285c:	3301      	adds	r3, #1
    285e:	607b      	str	r3, [r7, #4]
    2860:	687b      	ldr	r3, [r7, #4]
    2862:	2b01      	cmp	r3, #1
    2864:	d9ec      	bls.n	2840 <prvInitialiseCoRoutineLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
    2866:	f240 10c8 	movw	r0, #456	; 0x1c8
    286a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    286e:	f000 f84b 	bl	2908 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
    2872:	f240 10dc 	movw	r0, #476	; 0x1dc
    2876:	f2c2 0000 	movt	r0, #8192	; 0x2000
    287a:	f000 f845 	bl	2908 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
    287e:	f240 10f8 	movw	r0, #504	; 0x1f8
    2882:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2886:	f000 f83f 	bl	2908 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    288a:	f240 13f0 	movw	r3, #496	; 0x1f0
    288e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2892:	f240 12c8 	movw	r2, #456	; 0x1c8
    2896:	f2c2 0200 	movt	r2, #8192	; 0x2000
    289a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    289c:	f240 13f4 	movw	r3, #500	; 0x1f4
    28a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28a4:	f240 12dc 	movw	r2, #476	; 0x1dc
    28a8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    28ac:	601a      	str	r2, [r3, #0]
}
    28ae:	3708      	adds	r7, #8
    28b0:	46bd      	mov	sp, r7
    28b2:	bd80      	pop	{r7, pc}

000028b4 <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
    28b4:	b580      	push	{r7, lr}
    28b6:	b084      	sub	sp, #16
    28b8:	af00      	add	r7, sp, #0
    28ba:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    28bc:	687b      	ldr	r3, [r7, #4]
    28be:	68db      	ldr	r3, [r3, #12]
    28c0:	68db      	ldr	r3, [r3, #12]
    28c2:	60bb      	str	r3, [r7, #8]
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    28c4:	68bb      	ldr	r3, [r7, #8]
    28c6:	3318      	adds	r3, #24
    28c8:	4618      	mov	r0, r3
    28ca:	f000 f8a9 	bl	2a20 <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    28ce:	68bb      	ldr	r3, [r7, #8]
    28d0:	3318      	adds	r3, #24
    28d2:	f240 10f8 	movw	r0, #504	; 0x1f8
    28d6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    28da:	4619      	mov	r1, r3
    28dc:	f000 f840 	bl	2960 <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
    28e0:	68bb      	ldr	r3, [r7, #8]
    28e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    28e4:	f240 230c 	movw	r3, #524	; 0x20c
    28e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28ec:	681b      	ldr	r3, [r3, #0]
    28ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    28f0:	429a      	cmp	r2, r3
    28f2:	d302      	bcc.n	28fa <xCoRoutineRemoveFromEventList+0x46>
	{
		xReturn = pdTRUE;
    28f4:	2301      	movs	r3, #1
    28f6:	60fb      	str	r3, [r7, #12]
    28f8:	e001      	b.n	28fe <xCoRoutineRemoveFromEventList+0x4a>
	}
	else
	{
		xReturn = pdFALSE;
    28fa:	2300      	movs	r3, #0
    28fc:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    28fe:	68fb      	ldr	r3, [r7, #12]
}
    2900:	4618      	mov	r0, r3
    2902:	3710      	adds	r7, #16
    2904:	46bd      	mov	sp, r7
    2906:	bd80      	pop	{r7, pc}

00002908 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    2908:	b480      	push	{r7}
    290a:	b083      	sub	sp, #12
    290c:	af00      	add	r7, sp, #0
    290e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    2910:	687b      	ldr	r3, [r7, #4]
    2912:	f103 0208 	add.w	r2, r3, #8
    2916:	687b      	ldr	r3, [r7, #4]
    2918:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    291a:	687b      	ldr	r3, [r7, #4]
    291c:	f04f 32ff 	mov.w	r2, #4294967295
    2920:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    2922:	687b      	ldr	r3, [r7, #4]
    2924:	f103 0208 	add.w	r2, r3, #8
    2928:	687b      	ldr	r3, [r7, #4]
    292a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    292c:	687b      	ldr	r3, [r7, #4]
    292e:	f103 0208 	add.w	r2, r3, #8
    2932:	687b      	ldr	r3, [r7, #4]
    2934:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    2936:	687b      	ldr	r3, [r7, #4]
    2938:	2200      	movs	r2, #0
    293a:	601a      	str	r2, [r3, #0]
}
    293c:	370c      	adds	r7, #12
    293e:	46bd      	mov	sp, r7
    2940:	f85d 7b04 	ldr.w	r7, [sp], #4
    2944:	4770      	bx	lr
    2946:	bf00      	nop

00002948 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
    2948:	b480      	push	{r7}
    294a:	b083      	sub	sp, #12
    294c:	af00      	add	r7, sp, #0
    294e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    2950:	687b      	ldr	r3, [r7, #4]
    2952:	2200      	movs	r2, #0
    2954:	611a      	str	r2, [r3, #16]
}
    2956:	370c      	adds	r7, #12
    2958:	46bd      	mov	sp, r7
    295a:	f85d 7b04 	ldr.w	r7, [sp], #4
    295e:	4770      	bx	lr

00002960 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    2960:	b480      	push	{r7}
    2962:	b085      	sub	sp, #20
    2964:	af00      	add	r7, sp, #0
    2966:	6078      	str	r0, [r7, #4]
    2968:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    296a:	687b      	ldr	r3, [r7, #4]
    296c:	685b      	ldr	r3, [r3, #4]
    296e:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
    2970:	68fb      	ldr	r3, [r7, #12]
    2972:	685a      	ldr	r2, [r3, #4]
    2974:	683b      	ldr	r3, [r7, #0]
    2976:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
    2978:	687b      	ldr	r3, [r7, #4]
    297a:	685a      	ldr	r2, [r3, #4]
    297c:	683b      	ldr	r3, [r7, #0]
    297e:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2980:	68fb      	ldr	r3, [r7, #12]
    2982:	685b      	ldr	r3, [r3, #4]
    2984:	683a      	ldr	r2, [r7, #0]
    2986:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    2988:	68fb      	ldr	r3, [r7, #12]
    298a:	683a      	ldr	r2, [r7, #0]
    298c:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    298e:	687b      	ldr	r3, [r7, #4]
    2990:	683a      	ldr	r2, [r7, #0]
    2992:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2994:	683b      	ldr	r3, [r7, #0]
    2996:	687a      	ldr	r2, [r7, #4]
    2998:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    299a:	687b      	ldr	r3, [r7, #4]
    299c:	681b      	ldr	r3, [r3, #0]
    299e:	1c5a      	adds	r2, r3, #1
    29a0:	687b      	ldr	r3, [r7, #4]
    29a2:	601a      	str	r2, [r3, #0]
}
    29a4:	3714      	adds	r7, #20
    29a6:	46bd      	mov	sp, r7
    29a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    29ac:	4770      	bx	lr
    29ae:	bf00      	nop

000029b0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    29b0:	b480      	push	{r7}
    29b2:	b085      	sub	sp, #20
    29b4:	af00      	add	r7, sp, #0
    29b6:	6078      	str	r0, [r7, #4]
    29b8:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    29ba:	683b      	ldr	r3, [r7, #0]
    29bc:	681b      	ldr	r3, [r3, #0]
    29be:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    29c0:	68bb      	ldr	r3, [r7, #8]
    29c2:	f1b3 3fff 	cmp.w	r3, #4294967295
    29c6:	d103      	bne.n	29d0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    29c8:	687b      	ldr	r3, [r7, #4]
    29ca:	691b      	ldr	r3, [r3, #16]
    29cc:	60fb      	str	r3, [r7, #12]
    29ce:	e00c      	b.n	29ea <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    29d0:	687b      	ldr	r3, [r7, #4]
    29d2:	3308      	adds	r3, #8
    29d4:	60fb      	str	r3, [r7, #12]
    29d6:	e002      	b.n	29de <vListInsert+0x2e>
    29d8:	68fb      	ldr	r3, [r7, #12]
    29da:	685b      	ldr	r3, [r3, #4]
    29dc:	60fb      	str	r3, [r7, #12]
    29de:	68fb      	ldr	r3, [r7, #12]
    29e0:	685b      	ldr	r3, [r3, #4]
    29e2:	681a      	ldr	r2, [r3, #0]
    29e4:	68bb      	ldr	r3, [r7, #8]
    29e6:	429a      	cmp	r2, r3
    29e8:	d9f6      	bls.n	29d8 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    29ea:	68fb      	ldr	r3, [r7, #12]
    29ec:	685a      	ldr	r2, [r3, #4]
    29ee:	683b      	ldr	r3, [r7, #0]
    29f0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    29f2:	683b      	ldr	r3, [r7, #0]
    29f4:	685b      	ldr	r3, [r3, #4]
    29f6:	683a      	ldr	r2, [r7, #0]
    29f8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    29fa:	683b      	ldr	r3, [r7, #0]
    29fc:	68fa      	ldr	r2, [r7, #12]
    29fe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    2a00:	68fb      	ldr	r3, [r7, #12]
    2a02:	683a      	ldr	r2, [r7, #0]
    2a04:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2a06:	683b      	ldr	r3, [r7, #0]
    2a08:	687a      	ldr	r2, [r7, #4]
    2a0a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    2a0c:	687b      	ldr	r3, [r7, #4]
    2a0e:	681b      	ldr	r3, [r3, #0]
    2a10:	1c5a      	adds	r2, r3, #1
    2a12:	687b      	ldr	r3, [r7, #4]
    2a14:	601a      	str	r2, [r3, #0]
}
    2a16:	3714      	adds	r7, #20
    2a18:	46bd      	mov	sp, r7
    2a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a1e:	4770      	bx	lr

00002a20 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    2a20:	b480      	push	{r7}
    2a22:	b085      	sub	sp, #20
    2a24:	af00      	add	r7, sp, #0
    2a26:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    2a28:	687b      	ldr	r3, [r7, #4]
    2a2a:	685b      	ldr	r3, [r3, #4]
    2a2c:	687a      	ldr	r2, [r7, #4]
    2a2e:	6892      	ldr	r2, [r2, #8]
    2a30:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    2a32:	687b      	ldr	r3, [r7, #4]
    2a34:	689b      	ldr	r3, [r3, #8]
    2a36:	687a      	ldr	r2, [r7, #4]
    2a38:	6852      	ldr	r2, [r2, #4]
    2a3a:	605a      	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    2a3c:	687b      	ldr	r3, [r7, #4]
    2a3e:	691b      	ldr	r3, [r3, #16]
    2a40:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    2a42:	68fb      	ldr	r3, [r7, #12]
    2a44:	685a      	ldr	r2, [r3, #4]
    2a46:	687b      	ldr	r3, [r7, #4]
    2a48:	429a      	cmp	r2, r3
    2a4a:	d103      	bne.n	2a54 <vListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    2a4c:	687b      	ldr	r3, [r7, #4]
    2a4e:	689a      	ldr	r2, [r3, #8]
    2a50:	68fb      	ldr	r3, [r7, #12]
    2a52:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
    2a54:	687b      	ldr	r3, [r7, #4]
    2a56:	2200      	movs	r2, #0
    2a58:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
    2a5a:	68fb      	ldr	r3, [r7, #12]
    2a5c:	681b      	ldr	r3, [r3, #0]
    2a5e:	1e5a      	subs	r2, r3, #1
    2a60:	68fb      	ldr	r3, [r7, #12]
    2a62:	601a      	str	r2, [r3, #0]
}
    2a64:	3714      	adds	r7, #20
    2a66:	46bd      	mov	sp, r7
    2a68:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a6c:	4770      	bx	lr
    2a6e:	bf00      	nop

00002a70 <vTask_0>:
extern void  send_mode();
extern void  send_debug();
extern void  send_nav_ref();

void vTask_0()
{
    2a70:	b580      	push	{r7, lr}
    2a72:	af00      	add	r7, sp, #0
    last_radio_from_ppm(); //ppm.h
    2a74:	f011 ffb8 	bl	149e8 <last_radio_from_ppm>
}
    2a78:	bd80      	pop	{r7, pc}
    2a7a:	bf00      	nop

00002a7c <vTask_1>:

void vTask_1()
{
    2a7c:	b580      	push	{r7, lr}
    2a7e:	af00      	add	r7, sp, #0
    to_autopilot_from_last_radio();  //main_auto.c
    2a80:	f012 fb6c 	bl	1515c <to_autopilot_from_last_radio>
    spi_reset(); // spi_fbw.h
    2a84:	f012 faa8 	bl	14fd8 <spi_reset>
}
    2a88:	bd80      	pop	{r7, pc}
    2a8a:	bf00      	nop

00002a8c <vTask_2>:

void vTask_2()
{
    2a8c:	b580      	push	{r7, lr}
    2a8e:	af00      	add	r7, sp, #0
    check_mega128_values_task(); // main_auto.c
    2a90:	f012 fcac 	bl	153ec <check_mega128_values_task>
}
    2a94:	bd80      	pop	{r7, pc}
    2a96:	bf00      	nop

00002a98 <vTask_3>:

void vTask_3()
{
    2a98:	b580      	push	{r7, lr}
    2a9a:	af00      	add	r7, sp, #0
    servo_transmit(); //servo.h
    2a9c:	f012 fd7e 	bl	1559c <servo_transmit>
}
    2aa0:	bd80      	pop	{r7, pc}
    2aa2:	bf00      	nop

00002aa4 <vTask_4>:

void vTask_4()
{
    2aa4:	b580      	push	{r7, lr}
    2aa6:	af00      	add	r7, sp, #0
    check_failsafe_task(); //main_auto.c
    2aa8:	f012 fc96 	bl	153d8 <check_failsafe_task>
}
    2aac:	bd80      	pop	{r7, pc}
    2aae:	bf00      	nop

00002ab0 <vTask_5>:

void vTask_5()
{
    2ab0:	b580      	push	{r7, lr}
    2ab2:	af00      	add	r7, sp, #0
    radio_control_task(); //main_auto.c
    2ab4:	f008 ff2a 	bl	b90c <radio_control_task>
    ir_gain_calib();
    2ab8:	f00d fdda 	bl	10670 <ir_gain_calib>
}
    2abc:	bd80      	pop	{r7, pc}
    2abe:	bf00      	nop

00002ac0 <vTask_6>:

void vTask_6()
{
    2ac0:	b580      	push	{r7, lr}
    2ac2:	af00      	add	r7, sp, #0
    ir_update();
    2ac4:	f00d fd96 	bl	105f4 <ir_update>
    estimator_update_state_infrared();
    2ac8:	f011 f81c 	bl	13b04 <estimator_update_state_infrared>
    roll_pitch_pid_run();
    2acc:	f00d fe00 	bl	106d0 <roll_pitch_pid_run>
}
    2ad0:	bd80      	pop	{r7, pc}
    2ad2:	bf00      	nop

00002ad4 <vTask_7>:

void vTask_7()
{
    2ad4:	b580      	push	{r7, lr}
    2ad6:	af00      	add	r7, sp, #0
    link_fbw_send(); // link_fbw.h
    2ad8:	f00c fffe 	bl	fad8 <link_fbw_send>
}
    2adc:	bd80      	pop	{r7, pc}
    2ade:	bf00      	nop

00002ae0 <vTask_8>:

void vTask_8()
{
    2ae0:	b580      	push	{r7, lr}
    2ae2:	af00      	add	r7, sp, #0
    parse_gps_msg();
    2ae4:	f00d fad0 	bl	10088 <parse_gps_msg>
    send_gps_pos();
    2ae8:	f00a fcf6 	bl	d4d8 <send_gps_pos>
    send_radIR();
    2aec:	f00b feba 	bl	e864 <send_radIR>
    send_takeOff();
    2af0:	f00c fcb2 	bl	f458 <send_takeOff>
}
    2af4:	bd80      	pop	{r7, pc}
    2af6:	bf00      	nop

00002af8 <vTask_9>:

void vTask_9()
{
    2af8:	b580      	push	{r7, lr}
    2afa:	af00      	add	r7, sp, #0
    nav_home();
    2afc:	f010 fd84 	bl	13608 <nav_home>
    nav_update();
    2b00:	f010 fda8 	bl	13654 <nav_update>
    course_pid_run();
    2b04:	f00d fed0 	bl	108a8 <course_pid_run>
}
    2b08:	bd80      	pop	{r7, pc}
    2b0a:	bf00      	nop

00002b0c <vTask_10>:

void vTask_10()
{
    2b0c:	b580      	push	{r7, lr}
    2b0e:	af00      	add	r7, sp, #0
    altitude_pid_run();
    2b10:	f00e f952 	bl	10db8 <altitude_pid_run>
}
    2b14:	bd80      	pop	{r7, pc}
    2b16:	bf00      	nop

00002b18 <vTask_11>:

void vTask_11()
{
    2b18:	b580      	push	{r7, lr}
    2b1a:	af00      	add	r7, sp, #0
    climb_pid_run();
    2b1c:	f00d ff7c 	bl	10a18 <climb_pid_run>
}
    2b20:	bd80      	pop	{r7, pc}
    2b22:	bf00      	nop

00002b24 <vTask_12>:

void vTask_12()
{
    2b24:	b580      	push	{r7, lr}
    2b26:	af00      	add	r7, sp, #0
    send_boot();
    2b28:	f003 f9b8 	bl	5e9c <send_boot>
    send_attitude();
    2b2c:	f004 f986 	bl	6e3c <send_attitude>
    send_adc();
    2b30:	f004 fe78 	bl	7824 <send_adc>
    send_settings();
    2b34:	f005 f8fe 	bl	7d34 <send_settings>
    send_desired();
    2b38:	f005 fd00 	bl	853c <send_desired>
    send_bat();
    2b3c:	f006 fc2e 	bl	939c <send_bat>
    send_climb();
    2b40:	f006 ffe2 	bl	9b08 <send_climb>
    send_mode();
    2b44:	f007 fd52 	bl	a5ec <send_mode>
    send_debug();
    2b48:	f008 f824 	bl	ab94 <send_debug>
    send_nav_ref();
    2b4c:	f008 faf8 	bl	b140 <send_nav_ref>
}
    2b50:	bd80      	pop	{r7, pc}
    2b52:	bf00      	nop

00002b54 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
    2b54:	b580      	push	{r7, lr}
    2b56:	b084      	sub	sp, #16
    2b58:	af00      	add	r7, sp, #0
    2b5a:	6078      	str	r0, [r7, #4]
    2b5c:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn = pdPASS;
    2b5e:	2301      	movs	r3, #1
    2b60:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	/* If the queue being reset has already been used (has not just been
	created), then only reset the queue if its event lists are empty. */
	if( xNewQueue != pdTRUE )
    2b62:	683b      	ldr	r3, [r7, #0]
    2b64:	2b01      	cmp	r3, #1
    2b66:	d00b      	beq.n	2b80 <xQueueGenericReset+0x2c>
	{
		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2b68:	687b      	ldr	r3, [r7, #4]
    2b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2b6c:	2b00      	cmp	r3, #0
    2b6e:	d001      	beq.n	2b74 <xQueueGenericReset+0x20>
		{
			xReturn = pdFAIL;
    2b70:	2300      	movs	r3, #0
    2b72:	60fb      	str	r3, [r7, #12]
		}

		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2b74:	687b      	ldr	r3, [r7, #4]
    2b76:	691b      	ldr	r3, [r3, #16]
    2b78:	2b00      	cmp	r3, #0
    2b7a:	d001      	beq.n	2b80 <xQueueGenericReset+0x2c>
		{
			xReturn = pdFAIL;
    2b7c:	2300      	movs	r3, #0
    2b7e:	60fb      	str	r3, [r7, #12]
		}
	}

	if( xReturn == pdPASS )
    2b80:	68fb      	ldr	r3, [r7, #12]
    2b82:	2b01      	cmp	r3, #1
    2b84:	d12f      	bne.n	2be6 <xQueueGenericReset+0x92>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    2b86:	687b      	ldr	r3, [r7, #4]
    2b88:	681a      	ldr	r2, [r3, #0]
    2b8a:	687b      	ldr	r3, [r7, #4]
    2b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2b8e:	6879      	ldr	r1, [r7, #4]
    2b90:	6c09      	ldr	r1, [r1, #64]	; 0x40
    2b92:	fb01 f303 	mul.w	r3, r1, r3
    2b96:	441a      	add	r2, r3
    2b98:	687b      	ldr	r3, [r7, #4]
    2b9a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    2b9c:	687b      	ldr	r3, [r7, #4]
    2b9e:	2200      	movs	r2, #0
    2ba0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    2ba2:	687b      	ldr	r3, [r7, #4]
    2ba4:	681a      	ldr	r2, [r3, #0]
    2ba6:	687b      	ldr	r3, [r7, #4]
    2ba8:	609a      	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
    2baa:	687b      	ldr	r3, [r7, #4]
    2bac:	681a      	ldr	r2, [r3, #0]
    2bae:	687b      	ldr	r3, [r7, #4]
    2bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2bb2:	3b01      	subs	r3, #1
    2bb4:	6879      	ldr	r1, [r7, #4]
    2bb6:	6c09      	ldr	r1, [r1, #64]	; 0x40
    2bb8:	fb01 f303 	mul.w	r3, r1, r3
    2bbc:	441a      	add	r2, r3
    2bbe:	687b      	ldr	r3, [r7, #4]
    2bc0:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
    2bc2:	687b      	ldr	r3, [r7, #4]
    2bc4:	f04f 32ff 	mov.w	r2, #4294967295
    2bc8:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
    2bca:	687b      	ldr	r3, [r7, #4]
    2bcc:	f04f 32ff 	mov.w	r2, #4294967295
    2bd0:	649a      	str	r2, [r3, #72]	; 0x48

		/* Ensure the event queues start with the correct state. */
		vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    2bd2:	687b      	ldr	r3, [r7, #4]
    2bd4:	3310      	adds	r3, #16
    2bd6:	4618      	mov	r0, r3
    2bd8:	f7ff fe96 	bl	2908 <vListInitialise>
		vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    2bdc:	687b      	ldr	r3, [r7, #4]
    2bde:	3324      	adds	r3, #36	; 0x24
    2be0:	4618      	mov	r0, r3
    2be2:	f7ff fe91 	bl	2908 <vListInitialise>
	}

	return xReturn;
    2be6:	68fb      	ldr	r3, [r7, #12]
}
    2be8:	4618      	mov	r0, r3
    2bea:	3710      	adds	r7, #16
    2bec:	46bd      	mov	sp, r7
    2bee:	bd80      	pop	{r7, pc}

00002bf0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
    2bf0:	b580      	push	{r7, lr}
    2bf2:	b088      	sub	sp, #32
    2bf4:	af00      	add	r7, sp, #0
    2bf6:	60f8      	str	r0, [r7, #12]
    2bf8:	60b9      	str	r1, [r7, #8]
    2bfa:	4613      	mov	r3, r2
    2bfc:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    2bfe:	2300      	movs	r3, #0
    2c00:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    2c02:	68fb      	ldr	r3, [r7, #12]
    2c04:	2b00      	cmp	r3, #0
    2c06:	d026      	beq.n	2c56 <xQueueGenericCreate+0x66>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    2c08:	204c      	movs	r0, #76	; 0x4c
    2c0a:	f001 fd9d 	bl	4748 <pvPortMalloc>
    2c0e:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
    2c10:	69bb      	ldr	r3, [r7, #24]
    2c12:	2b00      	cmp	r3, #0
    2c14:	d01f      	beq.n	2c56 <xQueueGenericCreate+0x66>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    2c16:	68fb      	ldr	r3, [r7, #12]
    2c18:	68ba      	ldr	r2, [r7, #8]
    2c1a:	fb02 f303 	mul.w	r3, r2, r3
    2c1e:	3301      	adds	r3, #1
    2c20:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    2c22:	6978      	ldr	r0, [r7, #20]
    2c24:	f001 fd90 	bl	4748 <pvPortMalloc>
    2c28:	4602      	mov	r2, r0
    2c2a:	69bb      	ldr	r3, [r7, #24]
    2c2c:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
    2c2e:	69bb      	ldr	r3, [r7, #24]
    2c30:	681b      	ldr	r3, [r3, #0]
    2c32:	2b00      	cmp	r3, #0
    2c34:	d00c      	beq.n	2c50 <xQueueGenericCreate+0x60>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
    2c36:	69bb      	ldr	r3, [r7, #24]
    2c38:	68fa      	ldr	r2, [r7, #12]
    2c3a:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
    2c3c:	69bb      	ldr	r3, [r7, #24]
    2c3e:	68ba      	ldr	r2, [r7, #8]
    2c40:	641a      	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
    2c42:	69b8      	ldr	r0, [r7, #24]
    2c44:	2101      	movs	r1, #1
    2c46:	f7ff ff85 	bl	2b54 <xQueueGenericReset>
					pxNewQueue->ucQueueType = ucQueueType;
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    2c4a:	69bb      	ldr	r3, [r7, #24]
    2c4c:	61fb      	str	r3, [r7, #28]
    2c4e:	e002      	b.n	2c56 <xQueueGenericCreate+0x66>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
    2c50:	69b8      	ldr	r0, [r7, #24]
    2c52:	f001 fe3d 	bl	48d0 <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    2c56:	69fb      	ldr	r3, [r7, #28]
}
    2c58:	4618      	mov	r0, r3
    2c5a:	3720      	adds	r7, #32
    2c5c:	46bd      	mov	sp, r7
    2c5e:	bd80      	pop	{r7, pc}

00002c60 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( unsigned char ucQueueType )
	{
    2c60:	b580      	push	{r7, lr}
    2c62:	b084      	sub	sp, #16
    2c64:	af00      	add	r7, sp, #0
    2c66:	4603      	mov	r3, r0
    2c68:	71fb      	strb	r3, [r7, #7]
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    2c6a:	204c      	movs	r0, #76	; 0x4c
    2c6c:	f001 fd6c 	bl	4748 <pvPortMalloc>
    2c70:	60f8      	str	r0, [r7, #12]
		if( pxNewQueue != NULL )
    2c72:	68fb      	ldr	r3, [r7, #12]
    2c74:	2b00      	cmp	r3, #0
    2c76:	d02c      	beq.n	2cd2 <xQueueCreateMutex+0x72>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    2c78:	68fb      	ldr	r3, [r7, #12]
    2c7a:	2200      	movs	r2, #0
    2c7c:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    2c7e:	68fb      	ldr	r3, [r7, #12]
    2c80:	2200      	movs	r2, #0
    2c82:	601a      	str	r2, [r3, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
    2c84:	68fb      	ldr	r3, [r7, #12]
    2c86:	2200      	movs	r2, #0
    2c88:	609a      	str	r2, [r3, #8]
			pxNewQueue->pcReadFrom = NULL;
    2c8a:	68fb      	ldr	r3, [r7, #12]
    2c8c:	2200      	movs	r2, #0
    2c8e:	60da      	str	r2, [r3, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    2c90:	68fb      	ldr	r3, [r7, #12]
    2c92:	2200      	movs	r2, #0
    2c94:	639a      	str	r2, [r3, #56]	; 0x38
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
    2c96:	68fb      	ldr	r3, [r7, #12]
    2c98:	2201      	movs	r2, #1
    2c9a:	63da      	str	r2, [r3, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
    2c9c:	68fb      	ldr	r3, [r7, #12]
    2c9e:	2200      	movs	r2, #0
    2ca0:	641a      	str	r2, [r3, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
    2ca2:	68fb      	ldr	r3, [r7, #12]
    2ca4:	f04f 32ff 	mov.w	r2, #4294967295
    2ca8:	645a      	str	r2, [r3, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
    2caa:	68fb      	ldr	r3, [r7, #12]
    2cac:	f04f 32ff 	mov.w	r2, #4294967295
    2cb0:	649a      	str	r2, [r3, #72]	; 0x48
				pxNewQueue->ucQueueType = ucQueueType;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    2cb2:	68fb      	ldr	r3, [r7, #12]
    2cb4:	3310      	adds	r3, #16
    2cb6:	4618      	mov	r0, r3
    2cb8:	f7ff fe26 	bl	2908 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    2cbc:	68fb      	ldr	r3, [r7, #12]
    2cbe:	3324      	adds	r3, #36	; 0x24
    2cc0:	4618      	mov	r0, r3
    2cc2:	f7ff fe21 	bl	2908 <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
    2cc6:	68f8      	ldr	r0, [r7, #12]
    2cc8:	2100      	movs	r1, #0
    2cca:	2200      	movs	r2, #0
    2ccc:	2300      	movs	r3, #0
    2cce:	f000 f81d 	bl	2d0c <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
    2cd2:	68fb      	ldr	r3, [r7, #12]
	}
    2cd4:	4618      	mov	r0, r3
    2cd6:	3710      	adds	r7, #16
    2cd8:	46bd      	mov	sp, r7
    2cda:	bd80      	pop	{r7, pc}

00002cdc <xQueueGetMutexHolder>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void* xQueueGetMutexHolder( xQueueHandle xSemaphore )
	{
    2cdc:	b580      	push	{r7, lr}
    2cde:	b084      	sub	sp, #16
    2ce0:	af00      	add	r7, sp, #0
    2ce2:	6078      	str	r0, [r7, #4]
		/* This function is called by xSemaphoreGetMutexHolder(), and should not
		be called directly.  Note:  This is is a good way of determining if the
		calling task is the mutex holder, but not a good way of determining the
		identity of the mutex holder, as the holder may change between the
		following critical section exiting and the function returning. */
		taskENTER_CRITICAL();
    2ce4:	f001 fcae 	bl	4644 <vPortEnterCritical>
		{
			if( xSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
    2ce8:	687b      	ldr	r3, [r7, #4]
    2cea:	681b      	ldr	r3, [r3, #0]
    2cec:	2b00      	cmp	r3, #0
    2cee:	d103      	bne.n	2cf8 <xQueueGetMutexHolder+0x1c>
			{
				pxReturn = ( void * ) xSemaphore->pxMutexHolder;
    2cf0:	687b      	ldr	r3, [r7, #4]
    2cf2:	685b      	ldr	r3, [r3, #4]
    2cf4:	60fb      	str	r3, [r7, #12]
    2cf6:	e001      	b.n	2cfc <xQueueGetMutexHolder+0x20>
			}
			else
			{
				pxReturn = NULL;
    2cf8:	2300      	movs	r3, #0
    2cfa:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
    2cfc:	f001 fcb8 	bl	4670 <vPortExitCritical>
		
		return pxReturn;
    2d00:	68fb      	ldr	r3, [r7, #12]
	}
    2d02:	4618      	mov	r0, r3
    2d04:	3710      	adds	r7, #16
    2d06:	46bd      	mov	sp, r7
    2d08:	bd80      	pop	{r7, pc}
    2d0a:	bf00      	nop

00002d0c <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    2d0c:	b580      	push	{r7, lr}
    2d0e:	b088      	sub	sp, #32
    2d10:	af00      	add	r7, sp, #0
    2d12:	60f8      	str	r0, [r7, #12]
    2d14:	60b9      	str	r1, [r7, #8]
    2d16:	607a      	str	r2, [r7, #4]
    2d18:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    2d1a:	2300      	movs	r3, #0
    2d1c:	61fb      	str	r3, [r7, #28]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    2d1e:	f001 fc91 	bl	4644 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    2d22:	68fb      	ldr	r3, [r7, #12]
    2d24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    2d26:	68fb      	ldr	r3, [r7, #12]
    2d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2d2a:	429a      	cmp	r2, r3
    2d2c:	d216      	bcs.n	2d5c <xQueueGenericSend+0x50>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    2d2e:	68f8      	ldr	r0, [r7, #12]
    2d30:	68b9      	ldr	r1, [r7, #8]
    2d32:	683a      	ldr	r2, [r7, #0]
    2d34:	f000 f9d6 	bl	30e4 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2d38:	68fb      	ldr	r3, [r7, #12]
    2d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2d3c:	2b00      	cmp	r3, #0
    2d3e:	d009      	beq.n	2d54 <xQueueGenericSend+0x48>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    2d40:	68fb      	ldr	r3, [r7, #12]
    2d42:	3324      	adds	r3, #36	; 0x24
    2d44:	4618      	mov	r0, r3
    2d46:	f001 f91f 	bl	3f88 <xTaskRemoveFromEventList>
    2d4a:	4603      	mov	r3, r0
    2d4c:	2b01      	cmp	r3, #1
    2d4e:	d101      	bne.n	2d54 <xQueueGenericSend+0x48>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    2d50:	f001 fc6a 	bl	4628 <vPortYieldFromISR>
					}
				}

				taskEXIT_CRITICAL();
    2d54:	f001 fc8c 	bl	4670 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    2d58:	2301      	movs	r3, #1
    2d5a:	e059      	b.n	2e10 <xQueueGenericSend+0x104>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    2d5c:	687b      	ldr	r3, [r7, #4]
    2d5e:	2b00      	cmp	r3, #0
    2d60:	d103      	bne.n	2d6a <xQueueGenericSend+0x5e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    2d62:	f001 fc85 	bl	4670 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    2d66:	2300      	movs	r3, #0
    2d68:	e052      	b.n	2e10 <xQueueGenericSend+0x104>
				}
				else if( xEntryTimeSet == pdFALSE )
    2d6a:	69fb      	ldr	r3, [r7, #28]
    2d6c:	2b00      	cmp	r3, #0
    2d6e:	d106      	bne.n	2d7e <xQueueGenericSend+0x72>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    2d70:	f107 0314 	add.w	r3, r7, #20
    2d74:	4618      	mov	r0, r3
    2d76:	f001 f95f 	bl	4038 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    2d7a:	2301      	movs	r3, #1
    2d7c:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    2d7e:	f001 fc77 	bl	4670 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    2d82:	f000 fe93 	bl	3aac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    2d86:	f001 fc5d 	bl	4644 <vPortEnterCritical>
    2d8a:	68fb      	ldr	r3, [r7, #12]
    2d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
    2d92:	d102      	bne.n	2d9a <xQueueGenericSend+0x8e>
    2d94:	68fb      	ldr	r3, [r7, #12]
    2d96:	2200      	movs	r2, #0
    2d98:	645a      	str	r2, [r3, #68]	; 0x44
    2d9a:	68fb      	ldr	r3, [r7, #12]
    2d9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
    2da2:	d102      	bne.n	2daa <xQueueGenericSend+0x9e>
    2da4:	68fb      	ldr	r3, [r7, #12]
    2da6:	2200      	movs	r2, #0
    2da8:	649a      	str	r2, [r3, #72]	; 0x48
    2daa:	f001 fc61 	bl	4670 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2dae:	f107 0214 	add.w	r2, r7, #20
    2db2:	1d3b      	adds	r3, r7, #4
    2db4:	4610      	mov	r0, r2
    2db6:	4619      	mov	r1, r3
    2db8:	f001 f956 	bl	4068 <xTaskCheckForTimeOut>
    2dbc:	4603      	mov	r3, r0
    2dbe:	2b00      	cmp	r3, #0
    2dc0:	d11e      	bne.n	2e00 <xQueueGenericSend+0xf4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    2dc2:	68f8      	ldr	r0, [r7, #12]
    2dc4:	f000 fa86 	bl	32d4 <prvIsQueueFull>
    2dc8:	4603      	mov	r3, r0
    2dca:	2b00      	cmp	r3, #0
    2dcc:	d012      	beq.n	2df4 <xQueueGenericSend+0xe8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    2dce:	68fb      	ldr	r3, [r7, #12]
    2dd0:	f103 0210 	add.w	r2, r3, #16
    2dd4:	687b      	ldr	r3, [r7, #4]
    2dd6:	4610      	mov	r0, r2
    2dd8:	4619      	mov	r1, r3
    2dda:	f001 f89d 	bl	3f18 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    2dde:	68f8      	ldr	r0, [r7, #12]
    2de0:	f000 fa02 	bl	31e8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    2de4:	f000 fe74 	bl	3ad0 <xTaskResumeAll>
    2de8:	4603      	mov	r3, r0
    2dea:	2b00      	cmp	r3, #0
    2dec:	d10f      	bne.n	2e0e <xQueueGenericSend+0x102>
				{
					portYIELD_WITHIN_API();
    2dee:	f001 fc1b 	bl	4628 <vPortYieldFromISR>
    2df2:	e00c      	b.n	2e0e <xQueueGenericSend+0x102>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    2df4:	68f8      	ldr	r0, [r7, #12]
    2df6:	f000 f9f7 	bl	31e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    2dfa:	f000 fe69 	bl	3ad0 <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
    2dfe:	e78e      	b.n	2d1e <xQueueGenericSend+0x12>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    2e00:	68f8      	ldr	r0, [r7, #12]
    2e02:	f000 f9f1 	bl	31e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    2e06:	f000 fe63 	bl	3ad0 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    2e0a:	2300      	movs	r3, #0
    2e0c:	e000      	b.n	2e10 <xQueueGenericSend+0x104>
		}
	}
    2e0e:	e786      	b.n	2d1e <xQueueGenericSend+0x12>
}
    2e10:	4618      	mov	r0, r3
    2e12:	3720      	adds	r7, #32
    2e14:	46bd      	mov	sp, r7
    2e16:	bd80      	pop	{r7, pc}

00002e18 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    2e18:	b580      	push	{r7, lr}
    2e1a:	b086      	sub	sp, #24
    2e1c:	af00      	add	r7, sp, #0
    2e1e:	60f8      	str	r0, [r7, #12]
    2e20:	60b9      	str	r1, [r7, #8]
    2e22:	607a      	str	r2, [r7, #4]
    2e24:	603b      	str	r3, [r7, #0]
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    2e26:	2300      	movs	r3, #0
    2e28:	613b      	str	r3, [r7, #16]
    2e2a:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    2e2e:	f380 8811 	msr	BASEPRI, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    2e32:	68fb      	ldr	r3, [r7, #12]
    2e34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    2e36:	68fb      	ldr	r3, [r7, #12]
    2e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2e3a:	429a      	cmp	r2, r3
    2e3c:	d221      	bcs.n	2e82 <xQueueGenericSendFromISR+0x6a>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    2e3e:	68f8      	ldr	r0, [r7, #12]
    2e40:	68b9      	ldr	r1, [r7, #8]
    2e42:	683a      	ldr	r2, [r7, #0]
    2e44:	f000 f94e 	bl	30e4 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    2e48:	68fb      	ldr	r3, [r7, #12]
    2e4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
    2e50:	d10f      	bne.n	2e72 <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2e52:	68fb      	ldr	r3, [r7, #12]
    2e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2e56:	2b00      	cmp	r3, #0
    2e58:	d010      	beq.n	2e7c <xQueueGenericSendFromISR+0x64>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2e5a:	68fb      	ldr	r3, [r7, #12]
    2e5c:	3324      	adds	r3, #36	; 0x24
    2e5e:	4618      	mov	r0, r3
    2e60:	f001 f892 	bl	3f88 <xTaskRemoveFromEventList>
    2e64:	4603      	mov	r3, r0
    2e66:	2b00      	cmp	r3, #0
    2e68:	d008      	beq.n	2e7c <xQueueGenericSendFromISR+0x64>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    2e6a:	687b      	ldr	r3, [r7, #4]
    2e6c:	2201      	movs	r2, #1
    2e6e:	601a      	str	r2, [r3, #0]
    2e70:	e004      	b.n	2e7c <xQueueGenericSendFromISR+0x64>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    2e72:	68fb      	ldr	r3, [r7, #12]
    2e74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2e76:	1c5a      	adds	r2, r3, #1
    2e78:	68fb      	ldr	r3, [r7, #12]
    2e7a:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
    2e7c:	2301      	movs	r3, #1
    2e7e:	617b      	str	r3, [r7, #20]
    2e80:	e001      	b.n	2e86 <xQueueGenericSendFromISR+0x6e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    2e82:	2300      	movs	r3, #0
    2e84:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    2e86:	f04f 0000 	mov.w	r0, #0
    2e8a:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    2e8e:	697b      	ldr	r3, [r7, #20]
}
    2e90:	4618      	mov	r0, r3
    2e92:	3718      	adds	r7, #24
    2e94:	46bd      	mov	sp, r7
    2e96:	bd80      	pop	{r7, pc}

00002e98 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    2e98:	b580      	push	{r7, lr}
    2e9a:	b088      	sub	sp, #32
    2e9c:	af00      	add	r7, sp, #0
    2e9e:	60f8      	str	r0, [r7, #12]
    2ea0:	60b9      	str	r1, [r7, #8]
    2ea2:	607a      	str	r2, [r7, #4]
    2ea4:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    2ea6:	2300      	movs	r3, #0
    2ea8:	61fb      	str	r3, [r7, #28]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    2eaa:	f001 fbcb 	bl	4644 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    2eae:	68fb      	ldr	r3, [r7, #12]
    2eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2eb2:	2b00      	cmp	r3, #0
    2eb4:	d03b      	beq.n	2f2e <xQueueGenericReceive+0x96>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    2eb6:	68fb      	ldr	r3, [r7, #12]
    2eb8:	68db      	ldr	r3, [r3, #12]
    2eba:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    2ebc:	68f8      	ldr	r0, [r7, #12]
    2ebe:	68b9      	ldr	r1, [r7, #8]
    2ec0:	f000 f96c 	bl	319c <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    2ec4:	683b      	ldr	r3, [r7, #0]
    2ec6:	2b00      	cmp	r3, #0
    2ec8:	d11c      	bne.n	2f04 <xQueueGenericReceive+0x6c>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    2eca:	68fb      	ldr	r3, [r7, #12]
    2ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2ece:	1e5a      	subs	r2, r3, #1
    2ed0:	68fb      	ldr	r3, [r7, #12]
    2ed2:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    2ed4:	68fb      	ldr	r3, [r7, #12]
    2ed6:	681b      	ldr	r3, [r3, #0]
    2ed8:	2b00      	cmp	r3, #0
    2eda:	d104      	bne.n	2ee6 <xQueueGenericReceive+0x4e>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
    2edc:	f001 fa7e 	bl	43dc <xTaskGetCurrentTaskHandle>
    2ee0:	4602      	mov	r2, r0
    2ee2:	68fb      	ldr	r3, [r7, #12]
    2ee4:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2ee6:	68fb      	ldr	r3, [r7, #12]
    2ee8:	691b      	ldr	r3, [r3, #16]
    2eea:	2b00      	cmp	r3, #0
    2eec:	d01b      	beq.n	2f26 <xQueueGenericReceive+0x8e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    2eee:	68fb      	ldr	r3, [r7, #12]
    2ef0:	3310      	adds	r3, #16
    2ef2:	4618      	mov	r0, r3
    2ef4:	f001 f848 	bl	3f88 <xTaskRemoveFromEventList>
    2ef8:	4603      	mov	r3, r0
    2efa:	2b01      	cmp	r3, #1
    2efc:	d113      	bne.n	2f26 <xQueueGenericReceive+0x8e>
						{
							portYIELD_WITHIN_API();
    2efe:	f001 fb93 	bl	4628 <vPortYieldFromISR>
    2f02:	e010      	b.n	2f26 <xQueueGenericReceive+0x8e>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    2f04:	68fb      	ldr	r3, [r7, #12]
    2f06:	69ba      	ldr	r2, [r7, #24]
    2f08:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2f0a:	68fb      	ldr	r3, [r7, #12]
    2f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2f0e:	2b00      	cmp	r3, #0
    2f10:	d009      	beq.n	2f26 <xQueueGenericReceive+0x8e>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2f12:	68fb      	ldr	r3, [r7, #12]
    2f14:	3324      	adds	r3, #36	; 0x24
    2f16:	4618      	mov	r0, r3
    2f18:	f001 f836 	bl	3f88 <xTaskRemoveFromEventList>
    2f1c:	4603      	mov	r3, r0
    2f1e:	2b00      	cmp	r3, #0
    2f20:	d001      	beq.n	2f26 <xQueueGenericReceive+0x8e>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    2f22:	f001 fb81 	bl	4628 <vPortYieldFromISR>
						}
					}

				}

				taskEXIT_CRITICAL();
    2f26:	f001 fba3 	bl	4670 <vPortExitCritical>
				return pdPASS;
    2f2a:	2301      	movs	r3, #1
    2f2c:	e066      	b.n	2ffc <xQueueGenericReceive+0x164>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    2f2e:	687b      	ldr	r3, [r7, #4]
    2f30:	2b00      	cmp	r3, #0
    2f32:	d103      	bne.n	2f3c <xQueueGenericReceive+0xa4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    2f34:	f001 fb9c 	bl	4670 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    2f38:	2300      	movs	r3, #0
    2f3a:	e05f      	b.n	2ffc <xQueueGenericReceive+0x164>
				}
				else if( xEntryTimeSet == pdFALSE )
    2f3c:	69fb      	ldr	r3, [r7, #28]
    2f3e:	2b00      	cmp	r3, #0
    2f40:	d106      	bne.n	2f50 <xQueueGenericReceive+0xb8>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    2f42:	f107 0310 	add.w	r3, r7, #16
    2f46:	4618      	mov	r0, r3
    2f48:	f001 f876 	bl	4038 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    2f4c:	2301      	movs	r3, #1
    2f4e:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    2f50:	f001 fb8e 	bl	4670 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    2f54:	f000 fdaa 	bl	3aac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    2f58:	f001 fb74 	bl	4644 <vPortEnterCritical>
    2f5c:	68fb      	ldr	r3, [r7, #12]
    2f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2f60:	f1b3 3fff 	cmp.w	r3, #4294967295
    2f64:	d102      	bne.n	2f6c <xQueueGenericReceive+0xd4>
    2f66:	68fb      	ldr	r3, [r7, #12]
    2f68:	2200      	movs	r2, #0
    2f6a:	645a      	str	r2, [r3, #68]	; 0x44
    2f6c:	68fb      	ldr	r3, [r7, #12]
    2f6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2f70:	f1b3 3fff 	cmp.w	r3, #4294967295
    2f74:	d102      	bne.n	2f7c <xQueueGenericReceive+0xe4>
    2f76:	68fb      	ldr	r3, [r7, #12]
    2f78:	2200      	movs	r2, #0
    2f7a:	649a      	str	r2, [r3, #72]	; 0x48
    2f7c:	f001 fb78 	bl	4670 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2f80:	f107 0210 	add.w	r2, r7, #16
    2f84:	1d3b      	adds	r3, r7, #4
    2f86:	4610      	mov	r0, r2
    2f88:	4619      	mov	r1, r3
    2f8a:	f001 f86d 	bl	4068 <xTaskCheckForTimeOut>
    2f8e:	4603      	mov	r3, r0
    2f90:	2b00      	cmp	r3, #0
    2f92:	d12b      	bne.n	2fec <xQueueGenericReceive+0x154>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    2f94:	68f8      	ldr	r0, [r7, #12]
    2f96:	f000 f973 	bl	3280 <prvIsQueueEmpty>
    2f9a:	4603      	mov	r3, r0
    2f9c:	2b00      	cmp	r3, #0
    2f9e:	d01f      	beq.n	2fe0 <xQueueGenericReceive+0x148>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    2fa0:	68fb      	ldr	r3, [r7, #12]
    2fa2:	681b      	ldr	r3, [r3, #0]
    2fa4:	2b00      	cmp	r3, #0
    2fa6:	d108      	bne.n	2fba <xQueueGenericReceive+0x122>
					{
						portENTER_CRITICAL();
    2fa8:	f001 fb4c 	bl	4644 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    2fac:	68fb      	ldr	r3, [r7, #12]
    2fae:	685b      	ldr	r3, [r3, #4]
    2fb0:	4618      	mov	r0, r3
    2fb2:	f001 fa23 	bl	43fc <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
    2fb6:	f001 fb5b 	bl	4670 <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    2fba:	68fb      	ldr	r3, [r7, #12]
    2fbc:	f103 0224 	add.w	r2, r3, #36	; 0x24
    2fc0:	687b      	ldr	r3, [r7, #4]
    2fc2:	4610      	mov	r0, r2
    2fc4:	4619      	mov	r1, r3
    2fc6:	f000 ffa7 	bl	3f18 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    2fca:	68f8      	ldr	r0, [r7, #12]
    2fcc:	f000 f90c 	bl	31e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    2fd0:	f000 fd7e 	bl	3ad0 <xTaskResumeAll>
    2fd4:	4603      	mov	r3, r0
    2fd6:	2b00      	cmp	r3, #0
    2fd8:	d10f      	bne.n	2ffa <xQueueGenericReceive+0x162>
				{
					portYIELD_WITHIN_API();
    2fda:	f001 fb25 	bl	4628 <vPortYieldFromISR>
    2fde:	e00c      	b.n	2ffa <xQueueGenericReceive+0x162>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    2fe0:	68f8      	ldr	r0, [r7, #12]
    2fe2:	f000 f901 	bl	31e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    2fe6:	f000 fd73 	bl	3ad0 <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
    2fea:	e75e      	b.n	2eaa <xQueueGenericReceive+0x12>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    2fec:	68f8      	ldr	r0, [r7, #12]
    2fee:	f000 f8fb 	bl	31e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    2ff2:	f000 fd6d 	bl	3ad0 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    2ff6:	2300      	movs	r3, #0
    2ff8:	e000      	b.n	2ffc <xQueueGenericReceive+0x164>
		}
	}
    2ffa:	e756      	b.n	2eaa <xQueueGenericReceive+0x12>
}
    2ffc:	4618      	mov	r0, r3
    2ffe:	3720      	adds	r7, #32
    3000:	46bd      	mov	sp, r7
    3002:	bd80      	pop	{r7, pc}

00003004 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    3004:	b580      	push	{r7, lr}
    3006:	b086      	sub	sp, #24
    3008:	af00      	add	r7, sp, #0
    300a:	60f8      	str	r0, [r7, #12]
    300c:	60b9      	str	r1, [r7, #8]
    300e:	607a      	str	r2, [r7, #4]

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    3010:	2300      	movs	r3, #0
    3012:	613b      	str	r3, [r7, #16]
    3014:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    3018:	f380 8811 	msr	BASEPRI, r0
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    301c:	68fb      	ldr	r3, [r7, #12]
    301e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3020:	2b00      	cmp	r3, #0
    3022:	d025      	beq.n	3070 <xQueueReceiveFromISR+0x6c>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    3024:	68f8      	ldr	r0, [r7, #12]
    3026:	68b9      	ldr	r1, [r7, #8]
    3028:	f000 f8b8 	bl	319c <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    302c:	68fb      	ldr	r3, [r7, #12]
    302e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3030:	1e5a      	subs	r2, r3, #1
    3032:	68fb      	ldr	r3, [r7, #12]
    3034:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    3036:	68fb      	ldr	r3, [r7, #12]
    3038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    303a:	f1b3 3fff 	cmp.w	r3, #4294967295
    303e:	d10f      	bne.n	3060 <xQueueReceiveFromISR+0x5c>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3040:	68fb      	ldr	r3, [r7, #12]
    3042:	691b      	ldr	r3, [r3, #16]
    3044:	2b00      	cmp	r3, #0
    3046:	d010      	beq.n	306a <xQueueReceiveFromISR+0x66>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3048:	68fb      	ldr	r3, [r7, #12]
    304a:	3310      	adds	r3, #16
    304c:	4618      	mov	r0, r3
    304e:	f000 ff9b 	bl	3f88 <xTaskRemoveFromEventList>
    3052:	4603      	mov	r3, r0
    3054:	2b00      	cmp	r3, #0
    3056:	d008      	beq.n	306a <xQueueReceiveFromISR+0x66>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    3058:	687b      	ldr	r3, [r7, #4]
    305a:	2201      	movs	r2, #1
    305c:	601a      	str	r2, [r3, #0]
    305e:	e004      	b.n	306a <xQueueReceiveFromISR+0x66>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    3060:	68fb      	ldr	r3, [r7, #12]
    3062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3064:	1c5a      	adds	r2, r3, #1
    3066:	68fb      	ldr	r3, [r7, #12]
    3068:	645a      	str	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
    306a:	2301      	movs	r3, #1
    306c:	617b      	str	r3, [r7, #20]
    306e:	e001      	b.n	3074 <xQueueReceiveFromISR+0x70>
		}
		else
		{
			xReturn = pdFAIL;
    3070:	2300      	movs	r3, #0
    3072:	617b      	str	r3, [r7, #20]
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    3074:	f04f 0000 	mov.w	r0, #0
    3078:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    307c:	697b      	ldr	r3, [r7, #20]
}
    307e:	4618      	mov	r0, r3
    3080:	3718      	adds	r7, #24
    3082:	46bd      	mov	sp, r7
    3084:	bd80      	pop	{r7, pc}
    3086:	bf00      	nop

00003088 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    3088:	b580      	push	{r7, lr}
    308a:	b084      	sub	sp, #16
    308c:	af00      	add	r7, sp, #0
    308e:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    3090:	f001 fad8 	bl	4644 <vPortEnterCritical>
		uxReturn = pxQueue->uxMessagesWaiting;
    3094:	687b      	ldr	r3, [r7, #4]
    3096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3098:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    309a:	f001 fae9 	bl	4670 <vPortExitCritical>

	return uxReturn;
    309e:	68fb      	ldr	r3, [r7, #12]
}
    30a0:	4618      	mov	r0, r3
    30a2:	3710      	adds	r7, #16
    30a4:	46bd      	mov	sp, r7
    30a6:	bd80      	pop	{r7, pc}

000030a8 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    30a8:	b480      	push	{r7}
    30aa:	b085      	sub	sp, #20
    30ac:	af00      	add	r7, sp, #0
    30ae:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    30b0:	687b      	ldr	r3, [r7, #4]
    30b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    30b4:	60fb      	str	r3, [r7, #12]

	return uxReturn;
    30b6:	68fb      	ldr	r3, [r7, #12]
}
    30b8:	4618      	mov	r0, r3
    30ba:	3714      	adds	r7, #20
    30bc:	46bd      	mov	sp, r7
    30be:	f85d 7b04 	ldr.w	r7, [sp], #4
    30c2:	4770      	bx	lr

000030c4 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    30c4:	b580      	push	{r7, lr}
    30c6:	b082      	sub	sp, #8
    30c8:	af00      	add	r7, sp, #0
    30ca:	6078      	str	r0, [r7, #4]
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    30cc:	687b      	ldr	r3, [r7, #4]
    30ce:	681b      	ldr	r3, [r3, #0]
    30d0:	4618      	mov	r0, r3
    30d2:	f001 fbfd 	bl	48d0 <vPortFree>
	vPortFree( pxQueue );
    30d6:	6878      	ldr	r0, [r7, #4]
    30d8:	f001 fbfa 	bl	48d0 <vPortFree>
}
    30dc:	3708      	adds	r7, #8
    30de:	46bd      	mov	sp, r7
    30e0:	bd80      	pop	{r7, pc}
    30e2:	bf00      	nop

000030e4 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    30e4:	b580      	push	{r7, lr}
    30e6:	b084      	sub	sp, #16
    30e8:	af00      	add	r7, sp, #0
    30ea:	60f8      	str	r0, [r7, #12]
    30ec:	60b9      	str	r1, [r7, #8]
    30ee:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    30f0:	68fb      	ldr	r3, [r7, #12]
    30f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    30f4:	2b00      	cmp	r3, #0
    30f6:	d10c      	bne.n	3112 <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    30f8:	68fb      	ldr	r3, [r7, #12]
    30fa:	681b      	ldr	r3, [r3, #0]
    30fc:	2b00      	cmp	r3, #0
    30fe:	d145      	bne.n	318c <prvCopyDataToQueue+0xa8>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    3100:	68fb      	ldr	r3, [r7, #12]
    3102:	685b      	ldr	r3, [r3, #4]
    3104:	4618      	mov	r0, r3
    3106:	f001 f9dd 	bl	44c4 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
    310a:	68fb      	ldr	r3, [r7, #12]
    310c:	2200      	movs	r2, #0
    310e:	605a      	str	r2, [r3, #4]
    3110:	e03c      	b.n	318c <prvCopyDataToQueue+0xa8>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    3112:	687b      	ldr	r3, [r7, #4]
    3114:	2b00      	cmp	r3, #0
    3116:	d11a      	bne.n	314e <prvCopyDataToQueue+0x6a>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    3118:	68fb      	ldr	r3, [r7, #12]
    311a:	689a      	ldr	r2, [r3, #8]
    311c:	68fb      	ldr	r3, [r7, #12]
    311e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3120:	4610      	mov	r0, r2
    3122:	68b9      	ldr	r1, [r7, #8]
    3124:	461a      	mov	r2, r3
    3126:	f014 f807 	bl	17138 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    312a:	68fb      	ldr	r3, [r7, #12]
    312c:	689a      	ldr	r2, [r3, #8]
    312e:	68fb      	ldr	r3, [r7, #12]
    3130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3132:	441a      	add	r2, r3
    3134:	68fb      	ldr	r3, [r7, #12]
    3136:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    3138:	68fb      	ldr	r3, [r7, #12]
    313a:	689a      	ldr	r2, [r3, #8]
    313c:	68fb      	ldr	r3, [r7, #12]
    313e:	685b      	ldr	r3, [r3, #4]
    3140:	429a      	cmp	r2, r3
    3142:	d323      	bcc.n	318c <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    3144:	68fb      	ldr	r3, [r7, #12]
    3146:	681a      	ldr	r2, [r3, #0]
    3148:	68fb      	ldr	r3, [r7, #12]
    314a:	609a      	str	r2, [r3, #8]
    314c:	e01e      	b.n	318c <prvCopyDataToQueue+0xa8>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    314e:	68fb      	ldr	r3, [r7, #12]
    3150:	68da      	ldr	r2, [r3, #12]
    3152:	68fb      	ldr	r3, [r7, #12]
    3154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3156:	4610      	mov	r0, r2
    3158:	68b9      	ldr	r1, [r7, #8]
    315a:	461a      	mov	r2, r3
    315c:	f013 ffec 	bl	17138 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    3160:	68fb      	ldr	r3, [r7, #12]
    3162:	68da      	ldr	r2, [r3, #12]
    3164:	68fb      	ldr	r3, [r7, #12]
    3166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3168:	425b      	negs	r3, r3
    316a:	441a      	add	r2, r3
    316c:	68fb      	ldr	r3, [r7, #12]
    316e:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    3170:	68fb      	ldr	r3, [r7, #12]
    3172:	68da      	ldr	r2, [r3, #12]
    3174:	68fb      	ldr	r3, [r7, #12]
    3176:	681b      	ldr	r3, [r3, #0]
    3178:	429a      	cmp	r2, r3
    317a:	d207      	bcs.n	318c <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    317c:	68fb      	ldr	r3, [r7, #12]
    317e:	685a      	ldr	r2, [r3, #4]
    3180:	68fb      	ldr	r3, [r7, #12]
    3182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3184:	425b      	negs	r3, r3
    3186:	441a      	add	r2, r3
    3188:	68fb      	ldr	r3, [r7, #12]
    318a:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
    318c:	68fb      	ldr	r3, [r7, #12]
    318e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3190:	1c5a      	adds	r2, r3, #1
    3192:	68fb      	ldr	r3, [r7, #12]
    3194:	639a      	str	r2, [r3, #56]	; 0x38
}
    3196:	3710      	adds	r7, #16
    3198:	46bd      	mov	sp, r7
    319a:	bd80      	pop	{r7, pc}

0000319c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    319c:	b580      	push	{r7, lr}
    319e:	b082      	sub	sp, #8
    31a0:	af00      	add	r7, sp, #0
    31a2:	6078      	str	r0, [r7, #4]
    31a4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    31a6:	687b      	ldr	r3, [r7, #4]
    31a8:	681b      	ldr	r3, [r3, #0]
    31aa:	2b00      	cmp	r3, #0
    31ac:	d019      	beq.n	31e2 <prvCopyDataFromQueue+0x46>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    31ae:	687b      	ldr	r3, [r7, #4]
    31b0:	68da      	ldr	r2, [r3, #12]
    31b2:	687b      	ldr	r3, [r7, #4]
    31b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    31b6:	441a      	add	r2, r3
    31b8:	687b      	ldr	r3, [r7, #4]
    31ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    31bc:	687b      	ldr	r3, [r7, #4]
    31be:	68da      	ldr	r2, [r3, #12]
    31c0:	687b      	ldr	r3, [r7, #4]
    31c2:	685b      	ldr	r3, [r3, #4]
    31c4:	429a      	cmp	r2, r3
    31c6:	d303      	bcc.n	31d0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    31c8:	687b      	ldr	r3, [r7, #4]
    31ca:	681a      	ldr	r2, [r3, #0]
    31cc:	687b      	ldr	r3, [r7, #4]
    31ce:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    31d0:	687b      	ldr	r3, [r7, #4]
    31d2:	68da      	ldr	r2, [r3, #12]
    31d4:	687b      	ldr	r3, [r7, #4]
    31d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    31d8:	6838      	ldr	r0, [r7, #0]
    31da:	4611      	mov	r1, r2
    31dc:	461a      	mov	r2, r3
    31de:	f013 ffab 	bl	17138 <memcpy>
	}
}
    31e2:	3708      	adds	r7, #8
    31e4:	46bd      	mov	sp, r7
    31e6:	bd80      	pop	{r7, pc}

000031e8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    31e8:	b580      	push	{r7, lr}
    31ea:	b082      	sub	sp, #8
    31ec:	af00      	add	r7, sp, #0
    31ee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    31f0:	f001 fa28 	bl	4644 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    31f4:	e014      	b.n	3220 <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    31f6:	687b      	ldr	r3, [r7, #4]
    31f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    31fa:	2b00      	cmp	r3, #0
    31fc:	d00f      	beq.n	321e <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    31fe:	687b      	ldr	r3, [r7, #4]
    3200:	3324      	adds	r3, #36	; 0x24
    3202:	4618      	mov	r0, r3
    3204:	f000 fec0 	bl	3f88 <xTaskRemoveFromEventList>
    3208:	4603      	mov	r3, r0
    320a:	2b00      	cmp	r3, #0
    320c:	d001      	beq.n	3212 <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    320e:	f000 ff77 	bl	4100 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    3212:	687b      	ldr	r3, [r7, #4]
    3214:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3216:	1e5a      	subs	r2, r3, #1
    3218:	687b      	ldr	r3, [r7, #4]
    321a:	649a      	str	r2, [r3, #72]	; 0x48
    321c:	e000      	b.n	3220 <prvUnlockQueue+0x38>
			}
			else
			{
				break;
    321e:	e003      	b.n	3228 <prvUnlockQueue+0x40>
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    3220:	687b      	ldr	r3, [r7, #4]
    3222:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3224:	2b00      	cmp	r3, #0
    3226:	dce6      	bgt.n	31f6 <prvUnlockQueue+0xe>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    3228:	687b      	ldr	r3, [r7, #4]
    322a:	f04f 32ff 	mov.w	r2, #4294967295
    322e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
    3230:	f001 fa1e 	bl	4670 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    3234:	f001 fa06 	bl	4644 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    3238:	e014      	b.n	3264 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    323a:	687b      	ldr	r3, [r7, #4]
    323c:	691b      	ldr	r3, [r3, #16]
    323e:	2b00      	cmp	r3, #0
    3240:	d00f      	beq.n	3262 <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3242:	687b      	ldr	r3, [r7, #4]
    3244:	3310      	adds	r3, #16
    3246:	4618      	mov	r0, r3
    3248:	f000 fe9e 	bl	3f88 <xTaskRemoveFromEventList>
    324c:	4603      	mov	r3, r0
    324e:	2b00      	cmp	r3, #0
    3250:	d001      	beq.n	3256 <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
    3252:	f000 ff55 	bl	4100 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    3256:	687b      	ldr	r3, [r7, #4]
    3258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    325a:	1e5a      	subs	r2, r3, #1
    325c:	687b      	ldr	r3, [r7, #4]
    325e:	645a      	str	r2, [r3, #68]	; 0x44
    3260:	e000      	b.n	3264 <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
    3262:	e003      	b.n	326c <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    3264:	687b      	ldr	r3, [r7, #4]
    3266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3268:	2b00      	cmp	r3, #0
    326a:	dce6      	bgt.n	323a <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    326c:	687b      	ldr	r3, [r7, #4]
    326e:	f04f 32ff 	mov.w	r2, #4294967295
    3272:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    3274:	f001 f9fc 	bl	4670 <vPortExitCritical>
}
    3278:	3708      	adds	r7, #8
    327a:	46bd      	mov	sp, r7
    327c:	bd80      	pop	{r7, pc}
    327e:	bf00      	nop

00003280 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    3280:	b580      	push	{r7, lr}
    3282:	b084      	sub	sp, #16
    3284:	af00      	add	r7, sp, #0
    3286:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    3288:	f001 f9dc 	bl	4644 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    328c:	687b      	ldr	r3, [r7, #4]
    328e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3290:	2b00      	cmp	r3, #0
    3292:	bf14      	ite	ne
    3294:	2300      	movne	r3, #0
    3296:	2301      	moveq	r3, #1
    3298:	b2db      	uxtb	r3, r3
    329a:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    329c:	f001 f9e8 	bl	4670 <vPortExitCritical>

	return xReturn;
    32a0:	68fb      	ldr	r3, [r7, #12]
}
    32a2:	4618      	mov	r0, r3
    32a4:	3710      	adds	r7, #16
    32a6:	46bd      	mov	sp, r7
    32a8:	bd80      	pop	{r7, pc}
    32aa:	bf00      	nop

000032ac <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    32ac:	b480      	push	{r7}
    32ae:	b085      	sub	sp, #20
    32b0:	af00      	add	r7, sp, #0
    32b2:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    32b4:	687b      	ldr	r3, [r7, #4]
    32b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    32b8:	2b00      	cmp	r3, #0
    32ba:	bf14      	ite	ne
    32bc:	2300      	movne	r3, #0
    32be:	2301      	moveq	r3, #1
    32c0:	b2db      	uxtb	r3, r3
    32c2:	60fb      	str	r3, [r7, #12]

	return xReturn;
    32c4:	68fb      	ldr	r3, [r7, #12]
}
    32c6:	4618      	mov	r0, r3
    32c8:	3714      	adds	r7, #20
    32ca:	46bd      	mov	sp, r7
    32cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    32d0:	4770      	bx	lr
    32d2:	bf00      	nop

000032d4 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    32d4:	b580      	push	{r7, lr}
    32d6:	b084      	sub	sp, #16
    32d8:	af00      	add	r7, sp, #0
    32da:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    32dc:	f001 f9b2 	bl	4644 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    32e0:	687b      	ldr	r3, [r7, #4]
    32e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    32e4:	687b      	ldr	r3, [r7, #4]
    32e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    32e8:	429a      	cmp	r2, r3
    32ea:	bf14      	ite	ne
    32ec:	2300      	movne	r3, #0
    32ee:	2301      	moveq	r3, #1
    32f0:	b2db      	uxtb	r3, r3
    32f2:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    32f4:	f001 f9bc 	bl	4670 <vPortExitCritical>

	return xReturn;
    32f8:	68fb      	ldr	r3, [r7, #12]
}
    32fa:	4618      	mov	r0, r3
    32fc:	3710      	adds	r7, #16
    32fe:	46bd      	mov	sp, r7
    3300:	bd80      	pop	{r7, pc}
    3302:	bf00      	nop

00003304 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    3304:	b480      	push	{r7}
    3306:	b085      	sub	sp, #20
    3308:	af00      	add	r7, sp, #0
    330a:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    330c:	687b      	ldr	r3, [r7, #4]
    330e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    3310:	687b      	ldr	r3, [r7, #4]
    3312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    3314:	429a      	cmp	r2, r3
    3316:	bf14      	ite	ne
    3318:	2300      	movne	r3, #0
    331a:	2301      	moveq	r3, #1
    331c:	b2db      	uxtb	r3, r3
    331e:	60fb      	str	r3, [r7, #12]

	return xReturn;
    3320:	68fb      	ldr	r3, [r7, #12]
}
    3322:	4618      	mov	r0, r3
    3324:	3714      	adds	r7, #20
    3326:	46bd      	mov	sp, r7
    3328:	f85d 7b04 	ldr.w	r7, [sp], #4
    332c:	4770      	bx	lr
    332e:	bf00      	nop

00003330 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    3330:	b580      	push	{r7, lr}
    3332:	b08a      	sub	sp, #40	; 0x28
    3334:	af02      	add	r7, sp, #8
    3336:	60f8      	str	r0, [r7, #12]
    3338:	60b9      	str	r1, [r7, #8]
    333a:	603b      	str	r3, [r7, #0]
    333c:	4613      	mov	r3, r2
    333e:	80fb      	strh	r3, [r7, #6]
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    3340:	88fb      	ldrh	r3, [r7, #6]
    3342:	4618      	mov	r0, r3
    3344:	6b39      	ldr	r1, [r7, #48]	; 0x30
    3346:	f001 f807 	bl	4358 <prvAllocateTCBAndStack>
    334a:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
    334c:	69bb      	ldr	r3, [r7, #24]
    334e:	2b00      	cmp	r3, #0
    3350:	f000 80a1 	beq.w	3496 <xTaskGenericCreate+0x166>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    3354:	69bb      	ldr	r3, [r7, #24]
    3356:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    3358:	88fb      	ldrh	r3, [r7, #6]
    335a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    335e:	3b01      	subs	r3, #1
    3360:	009b      	lsls	r3, r3, #2
    3362:	4413      	add	r3, r2
    3364:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
    3366:	697b      	ldr	r3, [r7, #20]
    3368:	f023 0307 	bic.w	r3, r3, #7
    336c:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    336e:	88fb      	ldrh	r3, [r7, #6]
    3370:	9300      	str	r3, [sp, #0]
    3372:	69b8      	ldr	r0, [r7, #24]
    3374:	68b9      	ldr	r1, [r7, #8]
    3376:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    337a:	f000 fedf 	bl	413c <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    337e:	6978      	ldr	r0, [r7, #20]
    3380:	68f9      	ldr	r1, [r7, #12]
    3382:	683a      	ldr	r2, [r7, #0]
    3384:	f001 f8e0 	bl	4548 <pxPortInitialiseStack>
    3388:	4602      	mov	r2, r0
    338a:	69bb      	ldr	r3, [r7, #24]
    338c:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    338e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3390:	2b00      	cmp	r3, #0
    3392:	d002      	beq.n	339a <xTaskGenericCreate+0x6a>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    3394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3396:	69ba      	ldr	r2, [r7, #24]
    3398:	601a      	str	r2, [r3, #0]
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    339a:	f001 f953 	bl	4644 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
    339e:	f240 4358 	movw	r3, #1112	; 0x458
    33a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33a6:	681b      	ldr	r3, [r3, #0]
    33a8:	1c5a      	adds	r2, r3, #1
    33aa:	f240 4358 	movw	r3, #1112	; 0x458
    33ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33b2:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
    33b4:	f240 2354 	movw	r3, #596	; 0x254
    33b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33bc:	681b      	ldr	r3, [r3, #0]
    33be:	2b00      	cmp	r3, #0
    33c0:	d10f      	bne.n	33e2 <xTaskGenericCreate+0xb2>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    33c2:	f240 2354 	movw	r3, #596	; 0x254
    33c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33ca:	69ba      	ldr	r2, [r7, #24]
    33cc:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    33ce:	f240 4358 	movw	r3, #1112	; 0x458
    33d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33d6:	681b      	ldr	r3, [r3, #0]
    33d8:	2b01      	cmp	r3, #1
    33da:	d118      	bne.n	340e <xTaskGenericCreate+0xde>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    33dc:	f000 fee4 	bl	41a8 <prvInitialiseTaskLists>
    33e0:	e015      	b.n	340e <xTaskGenericCreate+0xde>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    33e2:	f240 4368 	movw	r3, #1128	; 0x468
    33e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33ea:	681b      	ldr	r3, [r3, #0]
    33ec:	2b00      	cmp	r3, #0
    33ee:	d10e      	bne.n	340e <xTaskGenericCreate+0xde>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    33f0:	f240 2354 	movw	r3, #596	; 0x254
    33f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33f8:	681b      	ldr	r3, [r3, #0]
    33fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    33fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    33fe:	429a      	cmp	r2, r3
    3400:	d805      	bhi.n	340e <xTaskGenericCreate+0xde>
					{
						pxCurrentTCB = pxNewTCB;
    3402:	f240 2354 	movw	r3, #596	; 0x254
    3406:	f2c2 0300 	movt	r3, #8192	; 0x2000
    340a:	69ba      	ldr	r2, [r7, #24]
    340c:	601a      	str	r2, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    340e:	69bb      	ldr	r3, [r7, #24]
    3410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3412:	f240 4360 	movw	r3, #1120	; 0x460
    3416:	f2c2 0300 	movt	r3, #8192	; 0x2000
    341a:	681b      	ldr	r3, [r3, #0]
    341c:	429a      	cmp	r2, r3
    341e:	d906      	bls.n	342e <xTaskGenericCreate+0xfe>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    3420:	69bb      	ldr	r3, [r7, #24]
    3422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3424:	f240 4360 	movw	r3, #1120	; 0x460
    3428:	f2c2 0300 	movt	r3, #8192	; 0x2000
    342c:	601a      	str	r2, [r3, #0]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    342e:	f240 437c 	movw	r3, #1148	; 0x47c
    3432:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3436:	681b      	ldr	r3, [r3, #0]
    3438:	1c5a      	adds	r2, r3, #1
    343a:	f240 437c 	movw	r3, #1148	; 0x47c
    343e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3442:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
    3444:	69bb      	ldr	r3, [r7, #24]
    3446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3448:	f240 4364 	movw	r3, #1124	; 0x464
    344c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3450:	681b      	ldr	r3, [r3, #0]
    3452:	429a      	cmp	r2, r3
    3454:	d906      	bls.n	3464 <xTaskGenericCreate+0x134>
    3456:	69bb      	ldr	r3, [r7, #24]
    3458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    345a:	f240 4364 	movw	r3, #1124	; 0x464
    345e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3462:	601a      	str	r2, [r3, #0]
    3464:	69bb      	ldr	r3, [r7, #24]
    3466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3468:	4613      	mov	r3, r2
    346a:	009b      	lsls	r3, r3, #2
    346c:	4413      	add	r3, r2
    346e:	009b      	lsls	r3, r3, #2
    3470:	f240 2258 	movw	r2, #600	; 0x258
    3474:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3478:	441a      	add	r2, r3
    347a:	69bb      	ldr	r3, [r7, #24]
    347c:	3304      	adds	r3, #4
    347e:	4610      	mov	r0, r2
    3480:	4619      	mov	r1, r3
    3482:	f7ff fa6d 	bl	2960 <vListInsertEnd>

			xReturn = pdPASS;
    3486:	2301      	movs	r3, #1
    3488:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
    348a:	69b8      	ldr	r0, [r7, #24]
    348c:	f012 fe2c 	bl	160e8 <myTraceCreate>
		}
		taskEXIT_CRITICAL();
    3490:	f001 f8ee 	bl	4670 <vPortExitCritical>
    3494:	e002      	b.n	349c <xTaskGenericCreate+0x16c>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    3496:	f04f 33ff 	mov.w	r3, #4294967295
    349a:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    349c:	69fb      	ldr	r3, [r7, #28]
    349e:	2b01      	cmp	r3, #1
    34a0:	d111      	bne.n	34c6 <xTaskGenericCreate+0x196>
	{
		if( xSchedulerRunning != pdFALSE )
    34a2:	f240 4368 	movw	r3, #1128	; 0x468
    34a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    34aa:	681b      	ldr	r3, [r3, #0]
    34ac:	2b00      	cmp	r3, #0
    34ae:	d00a      	beq.n	34c6 <xTaskGenericCreate+0x196>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    34b0:	f240 2354 	movw	r3, #596	; 0x254
    34b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    34b8:	681b      	ldr	r3, [r3, #0]
    34ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    34bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    34be:	429a      	cmp	r2, r3
    34c0:	d201      	bcs.n	34c6 <xTaskGenericCreate+0x196>
			{
				portYIELD_WITHIN_API();
    34c2:	f001 f8b1 	bl	4628 <vPortYieldFromISR>
			}
		}
	}

	return xReturn;
    34c6:	69fb      	ldr	r3, [r7, #28]
}
    34c8:	4618      	mov	r0, r3
    34ca:	3720      	adds	r7, #32
    34cc:	46bd      	mov	sp, r7
    34ce:	bd80      	pop	{r7, pc}

000034d0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    34d0:	b580      	push	{r7, lr}
    34d2:	b084      	sub	sp, #16
    34d4:	af00      	add	r7, sp, #0
    34d6:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    34d8:	f001 f8b4 	bl	4644 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    34dc:	f240 2354 	movw	r3, #596	; 0x254
    34e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    34e4:	681b      	ldr	r3, [r3, #0]
    34e6:	687a      	ldr	r2, [r7, #4]
    34e8:	429a      	cmp	r2, r3
    34ea:	d101      	bne.n	34f0 <vTaskDelete+0x20>
			{
				pxTaskToDelete = NULL;
    34ec:	2300      	movs	r3, #0
    34ee:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    34f0:	687b      	ldr	r3, [r7, #4]
    34f2:	2b00      	cmp	r3, #0
    34f4:	d105      	bne.n	3502 <vTaskDelete+0x32>
    34f6:	f240 2354 	movw	r3, #596	; 0x254
    34fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    34fe:	681b      	ldr	r3, [r3, #0]
    3500:	e000      	b.n	3504 <vTaskDelete+0x34>
    3502:	687b      	ldr	r3, [r7, #4]
    3504:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    3506:	68fb      	ldr	r3, [r7, #12]
    3508:	3304      	adds	r3, #4
    350a:	4618      	mov	r0, r3
    350c:	f7ff fa88 	bl	2a20 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    3510:	68fb      	ldr	r3, [r7, #12]
    3512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3514:	2b00      	cmp	r3, #0
    3516:	d004      	beq.n	3522 <vTaskDelete+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    3518:	68fb      	ldr	r3, [r7, #12]
    351a:	3318      	adds	r3, #24
    351c:	4618      	mov	r0, r3
    351e:	f7ff fa7f 	bl	2a20 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    3522:	68fb      	ldr	r3, [r7, #12]
    3524:	3304      	adds	r3, #4
    3526:	f240 402c 	movw	r0, #1068	; 0x42c
    352a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    352e:	4619      	mov	r1, r3
    3530:	f7ff fa16 	bl	2960 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    3534:	f240 4340 	movw	r3, #1088	; 0x440
    3538:	f2c2 0300 	movt	r3, #8192	; 0x2000
    353c:	681b      	ldr	r3, [r3, #0]
    353e:	1c5a      	adds	r2, r3, #1
    3540:	f240 4340 	movw	r3, #1088	; 0x440
    3544:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3548:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    354a:	f240 437c 	movw	r3, #1148	; 0x47c
    354e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3552:	681b      	ldr	r3, [r3, #0]
    3554:	1c5a      	adds	r2, r3, #1
    3556:	f240 437c 	movw	r3, #1148	; 0x47c
    355a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    355e:	601a      	str	r2, [r3, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    3560:	f001 f886 	bl	4670 <vPortExitCritical>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    3564:	f240 4368 	movw	r3, #1128	; 0x468
    3568:	f2c2 0300 	movt	r3, #8192	; 0x2000
    356c:	681b      	ldr	r3, [r3, #0]
    356e:	2b00      	cmp	r3, #0
    3570:	d004      	beq.n	357c <vTaskDelete+0xac>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    3572:	687b      	ldr	r3, [r7, #4]
    3574:	2b00      	cmp	r3, #0
    3576:	d101      	bne.n	357c <vTaskDelete+0xac>
			{
				portYIELD_WITHIN_API();
    3578:	f001 f856 	bl	4628 <vPortYieldFromISR>
			}
		}
	}
    357c:	3710      	adds	r7, #16
    357e:	46bd      	mov	sp, r7
    3580:	bd80      	pop	{r7, pc}
    3582:	bf00      	nop

00003584 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    3584:	b580      	push	{r7, lr}
    3586:	b086      	sub	sp, #24
    3588:	af00      	add	r7, sp, #0
    358a:	6078      	str	r0, [r7, #4]
    358c:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
    358e:	2300      	movs	r3, #0
    3590:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    3592:	f000 fa8b 	bl	3aac <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    3596:	687b      	ldr	r3, [r7, #4]
    3598:	681a      	ldr	r2, [r3, #0]
    359a:	683b      	ldr	r3, [r7, #0]
    359c:	4413      	add	r3, r2
    359e:	613b      	str	r3, [r7, #16]

			if( xTickCount < *pxPreviousWakeTime )
    35a0:	687b      	ldr	r3, [r7, #4]
    35a2:	681a      	ldr	r2, [r3, #0]
    35a4:	f240 435c 	movw	r3, #1116	; 0x45c
    35a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    35ac:	681b      	ldr	r3, [r3, #0]
    35ae:	429a      	cmp	r2, r3
    35b0:	d90f      	bls.n	35d2 <vTaskDelayUntil+0x4e>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    35b2:	687b      	ldr	r3, [r7, #4]
    35b4:	681a      	ldr	r2, [r3, #0]
    35b6:	693b      	ldr	r3, [r7, #16]
    35b8:	429a      	cmp	r2, r3
    35ba:	d919      	bls.n	35f0 <vTaskDelayUntil+0x6c>
    35bc:	f240 435c 	movw	r3, #1116	; 0x45c
    35c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    35c4:	681b      	ldr	r3, [r3, #0]
    35c6:	693a      	ldr	r2, [r7, #16]
    35c8:	429a      	cmp	r2, r3
    35ca:	d911      	bls.n	35f0 <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    35cc:	2301      	movs	r3, #1
    35ce:	617b      	str	r3, [r7, #20]
    35d0:	e00e      	b.n	35f0 <vTaskDelayUntil+0x6c>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    35d2:	687b      	ldr	r3, [r7, #4]
    35d4:	681a      	ldr	r2, [r3, #0]
    35d6:	693b      	ldr	r3, [r7, #16]
    35d8:	429a      	cmp	r2, r3
    35da:	d807      	bhi.n	35ec <vTaskDelayUntil+0x68>
    35dc:	f240 435c 	movw	r3, #1116	; 0x45c
    35e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    35e4:	681b      	ldr	r3, [r3, #0]
    35e6:	693a      	ldr	r2, [r7, #16]
    35e8:	429a      	cmp	r2, r3
    35ea:	d901      	bls.n	35f0 <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    35ec:	2301      	movs	r3, #1
    35ee:	617b      	str	r3, [r7, #20]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    35f0:	687b      	ldr	r3, [r7, #4]
    35f2:	693a      	ldr	r2, [r7, #16]
    35f4:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
    35f6:	697b      	ldr	r3, [r7, #20]
    35f8:	2b00      	cmp	r3, #0
    35fa:	d00b      	beq.n	3614 <vTaskDelayUntil+0x90>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    35fc:	f240 2354 	movw	r3, #596	; 0x254
    3600:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3604:	681b      	ldr	r3, [r3, #0]
    3606:	3304      	adds	r3, #4
    3608:	4618      	mov	r0, r3
    360a:	f7ff fa09 	bl	2a20 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    360e:	6938      	ldr	r0, [r7, #16]
    3610:	f000 fe5e 	bl	42d0 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    3614:	f000 fa5c 	bl	3ad0 <xTaskResumeAll>
    3618:	60f8      	str	r0, [r7, #12]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    361a:	68fb      	ldr	r3, [r7, #12]
    361c:	2b00      	cmp	r3, #0
    361e:	d101      	bne.n	3624 <vTaskDelayUntil+0xa0>
		{
			portYIELD_WITHIN_API();
    3620:	f001 f802 	bl	4628 <vPortYieldFromISR>
		}
	}
    3624:	3718      	adds	r7, #24
    3626:	46bd      	mov	sp, r7
    3628:	bd80      	pop	{r7, pc}
    362a:	bf00      	nop

0000362c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    362c:	b580      	push	{r7, lr}
    362e:	b084      	sub	sp, #16
    3630:	af00      	add	r7, sp, #0
    3632:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    3634:	2300      	movs	r3, #0
    3636:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    3638:	687b      	ldr	r3, [r7, #4]
    363a:	2b00      	cmp	r3, #0
    363c:	d018      	beq.n	3670 <vTaskDelay+0x44>
		{
			vTaskSuspendAll();
    363e:	f000 fa35 	bl	3aac <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    3642:	f240 435c 	movw	r3, #1116	; 0x45c
    3646:	f2c2 0300 	movt	r3, #8192	; 0x2000
    364a:	681a      	ldr	r2, [r3, #0]
    364c:	687b      	ldr	r3, [r7, #4]
    364e:	4413      	add	r3, r2
    3650:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3652:	f240 2354 	movw	r3, #596	; 0x254
    3656:	f2c2 0300 	movt	r3, #8192	; 0x2000
    365a:	681b      	ldr	r3, [r3, #0]
    365c:	3304      	adds	r3, #4
    365e:	4618      	mov	r0, r3
    3660:	f7ff f9de 	bl	2a20 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    3664:	68b8      	ldr	r0, [r7, #8]
    3666:	f000 fe33 	bl	42d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    366a:	f000 fa31 	bl	3ad0 <xTaskResumeAll>
    366e:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    3670:	68fb      	ldr	r3, [r7, #12]
    3672:	2b00      	cmp	r3, #0
    3674:	d101      	bne.n	367a <vTaskDelay+0x4e>
		{
			portYIELD_WITHIN_API();
    3676:	f000 ffd7 	bl	4628 <vPortYieldFromISR>
		}
	}
    367a:	3710      	adds	r7, #16
    367c:	46bd      	mov	sp, r7
    367e:	bd80      	pop	{r7, pc}

00003680 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
	{
    3680:	b580      	push	{r7, lr}
    3682:	b084      	sub	sp, #16
    3684:	af00      	add	r7, sp, #0
    3686:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxReturn;

		taskENTER_CRITICAL();
    3688:	f000 ffdc 	bl	4644 <vPortEnterCritical>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    368c:	687b      	ldr	r3, [r7, #4]
    368e:	2b00      	cmp	r3, #0
    3690:	d105      	bne.n	369e <uxTaskPriorityGet+0x1e>
    3692:	f240 2354 	movw	r3, #596	; 0x254
    3696:	f2c2 0300 	movt	r3, #8192	; 0x2000
    369a:	681b      	ldr	r3, [r3, #0]
    369c:	e000      	b.n	36a0 <uxTaskPriorityGet+0x20>
    369e:	687b      	ldr	r3, [r7, #4]
    36a0:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
    36a2:	68fb      	ldr	r3, [r7, #12]
    36a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    36a6:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
    36a8:	f000 ffe2 	bl	4670 <vPortExitCritical>

		return uxReturn;
    36ac:	68bb      	ldr	r3, [r7, #8]
	}
    36ae:	4618      	mov	r0, r3
    36b0:	3710      	adds	r7, #16
    36b2:	46bd      	mov	sp, r7
    36b4:	bd80      	pop	{r7, pc}
    36b6:	bf00      	nop

000036b8 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
	{
    36b8:	b580      	push	{r7, lr}
    36ba:	b086      	sub	sp, #24
    36bc:	af00      	add	r7, sp, #0
    36be:	6078      	str	r0, [r7, #4]
    36c0:	6039      	str	r1, [r7, #0]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxCurrentPriority;
	portBASE_TYPE xYieldRequired = pdFALSE;
    36c2:	2300      	movs	r3, #0
    36c4:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= configMAX_PRIORITIES )
    36c6:	683b      	ldr	r3, [r7, #0]
    36c8:	2b13      	cmp	r3, #19
    36ca:	d901      	bls.n	36d0 <vTaskPrioritySet+0x18>
		{
			uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    36cc:	2313      	movs	r3, #19
    36ce:	603b      	str	r3, [r7, #0]
		}

		taskENTER_CRITICAL();
    36d0:	f000 ffb8 	bl	4644 <vPortEnterCritical>
		{
			if( pxTask == pxCurrentTCB )
    36d4:	f240 2354 	movw	r3, #596	; 0x254
    36d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    36dc:	681b      	ldr	r3, [r3, #0]
    36de:	687a      	ldr	r2, [r7, #4]
    36e0:	429a      	cmp	r2, r3
    36e2:	d101      	bne.n	36e8 <vTaskPrioritySet+0x30>
			{
				pxTask = NULL;
    36e4:	2300      	movs	r3, #0
    36e6:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    36e8:	687b      	ldr	r3, [r7, #4]
    36ea:	2b00      	cmp	r3, #0
    36ec:	d105      	bne.n	36fa <vTaskPrioritySet+0x42>
    36ee:	f240 2354 	movw	r3, #596	; 0x254
    36f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    36f6:	681b      	ldr	r3, [r3, #0]
    36f8:	e000      	b.n	36fc <vTaskPrioritySet+0x44>
    36fa:	687b      	ldr	r3, [r7, #4]
    36fc:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentPriority = pxTCB->uxBasePriority;
    36fe:	693b      	ldr	r3, [r7, #16]
    3700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3702:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentPriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentPriority != uxNewPriority )
    3704:	68fa      	ldr	r2, [r7, #12]
    3706:	683b      	ldr	r3, [r7, #0]
    3708:	429a      	cmp	r2, r3
    370a:	d058      	beq.n	37be <vTaskPrioritySet+0x106>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentPriority )
    370c:	683a      	ldr	r2, [r7, #0]
    370e:	68fb      	ldr	r3, [r7, #12]
    3710:	429a      	cmp	r2, r3
    3712:	d905      	bls.n	3720 <vTaskPrioritySet+0x68>
				{
					if( pxTask != NULL )
    3714:	687b      	ldr	r3, [r7, #4]
    3716:	2b00      	cmp	r3, #0
    3718:	d007      	beq.n	372a <vTaskPrioritySet+0x72>
					{
						/* The priority of another task is being raised.  If we
						were raising the priority of the currently running task
						there would be no need to switch as it must have already
						been the highest priority task. */
						xYieldRequired = pdTRUE;
    371a:	2301      	movs	r3, #1
    371c:	617b      	str	r3, [r7, #20]
    371e:	e004      	b.n	372a <vTaskPrioritySet+0x72>
					}
				}
				else if( pxTask == NULL )
    3720:	687b      	ldr	r3, [r7, #4]
    3722:	2b00      	cmp	r3, #0
    3724:	d101      	bne.n	372a <vTaskPrioritySet+0x72>
				{
					/* Setting our own priority down means there may now be another
					task of higher priority that is ready to execute. */
					xYieldRequired = pdTRUE;
    3726:	2301      	movs	r3, #1
    3728:	617b      	str	r3, [r7, #20]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    372a:	693b      	ldr	r3, [r7, #16]
    372c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    372e:	693b      	ldr	r3, [r7, #16]
    3730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3732:	429a      	cmp	r2, r3
    3734:	d102      	bne.n	373c <vTaskPrioritySet+0x84>
					{
						pxTCB->uxPriority = uxNewPriority;
    3736:	693b      	ldr	r3, [r7, #16]
    3738:	683a      	ldr	r2, [r7, #0]
    373a:	62da      	str	r2, [r3, #44]	; 0x2c
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
    373c:	693b      	ldr	r3, [r7, #16]
    373e:	683a      	ldr	r2, [r7, #0]
    3740:	645a      	str	r2, [r3, #68]	; 0x44
				{
					pxTCB->uxPriority = uxNewPriority;
				}
				#endif

				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
    3742:	683b      	ldr	r3, [r7, #0]
    3744:	f1c3 0214 	rsb	r2, r3, #20
    3748:	693b      	ldr	r3, [r7, #16]
    374a:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the queue appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
    374c:	693b      	ldr	r3, [r7, #16]
    374e:	6959      	ldr	r1, [r3, #20]
    3750:	68fa      	ldr	r2, [r7, #12]
    3752:	4613      	mov	r3, r2
    3754:	009b      	lsls	r3, r3, #2
    3756:	4413      	add	r3, r2
    3758:	009b      	lsls	r3, r3, #2
    375a:	f240 2258 	movw	r2, #600	; 0x258
    375e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3762:	4413      	add	r3, r2
    3764:	4299      	cmp	r1, r3
    3766:	d125      	bne.n	37b4 <vTaskPrioritySet+0xfc>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					vListRemove( &( pxTCB->xGenericListItem ) );
    3768:	693b      	ldr	r3, [r7, #16]
    376a:	3304      	adds	r3, #4
    376c:	4618      	mov	r0, r3
    376e:	f7ff f957 	bl	2a20 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    3772:	693b      	ldr	r3, [r7, #16]
    3774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3776:	f240 4364 	movw	r3, #1124	; 0x464
    377a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    377e:	681b      	ldr	r3, [r3, #0]
    3780:	429a      	cmp	r2, r3
    3782:	d906      	bls.n	3792 <vTaskPrioritySet+0xda>
    3784:	693b      	ldr	r3, [r7, #16]
    3786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3788:	f240 4364 	movw	r3, #1124	; 0x464
    378c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3790:	601a      	str	r2, [r3, #0]
    3792:	693b      	ldr	r3, [r7, #16]
    3794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3796:	4613      	mov	r3, r2
    3798:	009b      	lsls	r3, r3, #2
    379a:	4413      	add	r3, r2
    379c:	009b      	lsls	r3, r3, #2
    379e:	f240 2258 	movw	r2, #600	; 0x258
    37a2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    37a6:	441a      	add	r2, r3
    37a8:	693b      	ldr	r3, [r7, #16]
    37aa:	3304      	adds	r3, #4
    37ac:	4610      	mov	r0, r2
    37ae:	4619      	mov	r1, r3
    37b0:	f7ff f8d6 	bl	2960 <vListInsertEnd>
				}

				if( xYieldRequired == pdTRUE )
    37b4:	697b      	ldr	r3, [r7, #20]
    37b6:	2b01      	cmp	r3, #1
    37b8:	d101      	bne.n	37be <vTaskPrioritySet+0x106>
				{
					portYIELD_WITHIN_API();
    37ba:	f000 ff35 	bl	4628 <vPortYieldFromISR>
				}
			}
		}
		taskEXIT_CRITICAL();
    37be:	f000 ff57 	bl	4670 <vPortExitCritical>
	}
    37c2:	3718      	adds	r7, #24
    37c4:	46bd      	mov	sp, r7
    37c6:	bd80      	pop	{r7, pc}

000037c8 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
    37c8:	b580      	push	{r7, lr}
    37ca:	b084      	sub	sp, #16
    37cc:	af00      	add	r7, sp, #0
    37ce:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    37d0:	f000 ff38 	bl	4644 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
    37d4:	f240 2354 	movw	r3, #596	; 0x254
    37d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    37dc:	681b      	ldr	r3, [r3, #0]
    37de:	687a      	ldr	r2, [r7, #4]
    37e0:	429a      	cmp	r2, r3
    37e2:	d101      	bne.n	37e8 <vTaskSuspend+0x20>
			{
				pxTaskToSuspend = NULL;
    37e4:	2300      	movs	r3, #0
    37e6:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
    37e8:	687b      	ldr	r3, [r7, #4]
    37ea:	2b00      	cmp	r3, #0
    37ec:	d105      	bne.n	37fa <vTaskSuspend+0x32>
    37ee:	f240 2354 	movw	r3, #596	; 0x254
    37f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    37f6:	681b      	ldr	r3, [r3, #0]
    37f8:	e000      	b.n	37fc <vTaskSuspend+0x34>
    37fa:	687b      	ldr	r3, [r7, #4]
    37fc:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    37fe:	68fb      	ldr	r3, [r7, #12]
    3800:	3304      	adds	r3, #4
    3802:	4618      	mov	r0, r3
    3804:	f7ff f90c 	bl	2a20 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    3808:	68fb      	ldr	r3, [r7, #12]
    380a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    380c:	2b00      	cmp	r3, #0
    380e:	d004      	beq.n	381a <vTaskSuspend+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    3810:	68fb      	ldr	r3, [r7, #12]
    3812:	3318      	adds	r3, #24
    3814:	4618      	mov	r0, r3
    3816:	f7ff f903 	bl	2a20 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
    381a:	68fb      	ldr	r3, [r7, #12]
    381c:	3304      	adds	r3, #4
    381e:	f240 4044 	movw	r0, #1092	; 0x444
    3822:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3826:	4619      	mov	r1, r3
    3828:	f7ff f89a 	bl	2960 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    382c:	f000 ff20 	bl	4670 <vPortExitCritical>

		if( ( void * ) pxTaskToSuspend == NULL )
    3830:	687b      	ldr	r3, [r7, #4]
    3832:	2b00      	cmp	r3, #0
    3834:	d11e      	bne.n	3874 <vTaskSuspend+0xac>
		{
			if( xSchedulerRunning != pdFALSE )
    3836:	f240 4368 	movw	r3, #1128	; 0x468
    383a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    383e:	681b      	ldr	r3, [r3, #0]
    3840:	2b00      	cmp	r3, #0
    3842:	d002      	beq.n	384a <vTaskSuspend+0x82>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
    3844:	f000 fef0 	bl	4628 <vPortYieldFromISR>
    3848:	e014      	b.n	3874 <vTaskSuspend+0xac>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    384a:	f240 4344 	movw	r3, #1092	; 0x444
    384e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3852:	681a      	ldr	r2, [r3, #0]
    3854:	f240 4358 	movw	r3, #1112	; 0x458
    3858:	f2c2 0300 	movt	r3, #8192	; 0x2000
    385c:	681b      	ldr	r3, [r3, #0]
    385e:	429a      	cmp	r2, r3
    3860:	d106      	bne.n	3870 <vTaskSuspend+0xa8>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    3862:	f240 2354 	movw	r3, #596	; 0x254
    3866:	f2c2 0300 	movt	r3, #8192	; 0x2000
    386a:	2200      	movs	r2, #0
    386c:	601a      	str	r2, [r3, #0]
    386e:	e001      	b.n	3874 <vTaskSuspend+0xac>
				}
				else
				{
					vTaskSwitchContext();
    3870:	f000 faf6 	bl	3e60 <vTaskSwitchContext>
				}
			}
		}
	}
    3874:	3710      	adds	r7, #16
    3876:	46bd      	mov	sp, r7
    3878:	bd80      	pop	{r7, pc}
    387a:	bf00      	nop

0000387c <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
    387c:	b480      	push	{r7}
    387e:	b085      	sub	sp, #20
    3880:	af00      	add	r7, sp, #0
    3882:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xReturn = pdFALSE;
    3884:	2300      	movs	r3, #0
    3886:	60fb      	str	r3, [r7, #12]
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
    3888:	687b      	ldr	r3, [r7, #4]
    388a:	60bb      	str	r3, [r7, #8]
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    388c:	68bb      	ldr	r3, [r7, #8]
    388e:	695a      	ldr	r2, [r3, #20]
    3890:	f240 4344 	movw	r3, #1092	; 0x444
    3894:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3898:	429a      	cmp	r2, r3
    389a:	d10d      	bne.n	38b8 <xTaskIsTaskSuspended+0x3c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    389c:	68bb      	ldr	r3, [r7, #8]
    389e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    38a0:	f240 4318 	movw	r3, #1048	; 0x418
    38a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    38a8:	429a      	cmp	r2, r3
    38aa:	d005      	beq.n	38b8 <xTaskIsTaskSuspended+0x3c>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
    38ac:	68bb      	ldr	r3, [r7, #8]
    38ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    38b0:	2b00      	cmp	r3, #0
    38b2:	d101      	bne.n	38b8 <xTaskIsTaskSuspended+0x3c>
				{
					xReturn = pdTRUE;
    38b4:	2301      	movs	r3, #1
    38b6:	60fb      	str	r3, [r7, #12]
				}
			}
		}

		return xReturn;
    38b8:	68fb      	ldr	r3, [r7, #12]
	}
    38ba:	4618      	mov	r0, r3
    38bc:	3714      	adds	r7, #20
    38be:	46bd      	mov	sp, r7
    38c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    38c4:	4770      	bx	lr
    38c6:	bf00      	nop

000038c8 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
    38c8:	b580      	push	{r7, lr}
    38ca:	b084      	sub	sp, #16
    38cc:	af00      	add	r7, sp, #0
    38ce:	6078      	str	r0, [r7, #4]
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
    38d0:	687b      	ldr	r3, [r7, #4]
    38d2:	60fb      	str	r3, [r7, #12]

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    38d4:	68fb      	ldr	r3, [r7, #12]
    38d6:	2b00      	cmp	r3, #0
    38d8:	d043      	beq.n	3962 <vTaskResume+0x9a>
    38da:	f240 2354 	movw	r3, #596	; 0x254
    38de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    38e2:	681b      	ldr	r3, [r3, #0]
    38e4:	68fa      	ldr	r2, [r7, #12]
    38e6:	429a      	cmp	r2, r3
    38e8:	d03b      	beq.n	3962 <vTaskResume+0x9a>
		{
			taskENTER_CRITICAL();
    38ea:	f000 feab 	bl	4644 <vPortEnterCritical>
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    38ee:	68f8      	ldr	r0, [r7, #12]
    38f0:	f7ff ffc4 	bl	387c <xTaskIsTaskSuspended>
    38f4:	4603      	mov	r3, r0
    38f6:	2b01      	cmp	r3, #1
    38f8:	d131      	bne.n	395e <vTaskResume+0x96>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
    38fa:	68fb      	ldr	r3, [r7, #12]
    38fc:	3304      	adds	r3, #4
    38fe:	4618      	mov	r0, r3
    3900:	f7ff f88e 	bl	2a20 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    3904:	68fb      	ldr	r3, [r7, #12]
    3906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3908:	f240 4364 	movw	r3, #1124	; 0x464
    390c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3910:	681b      	ldr	r3, [r3, #0]
    3912:	429a      	cmp	r2, r3
    3914:	d906      	bls.n	3924 <vTaskResume+0x5c>
    3916:	68fb      	ldr	r3, [r7, #12]
    3918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    391a:	f240 4364 	movw	r3, #1124	; 0x464
    391e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3922:	601a      	str	r2, [r3, #0]
    3924:	68fb      	ldr	r3, [r7, #12]
    3926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3928:	4613      	mov	r3, r2
    392a:	009b      	lsls	r3, r3, #2
    392c:	4413      	add	r3, r2
    392e:	009b      	lsls	r3, r3, #2
    3930:	f240 2258 	movw	r2, #600	; 0x258
    3934:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3938:	441a      	add	r2, r3
    393a:	68fb      	ldr	r3, [r7, #12]
    393c:	3304      	adds	r3, #4
    393e:	4610      	mov	r0, r2
    3940:	4619      	mov	r1, r3
    3942:	f7ff f80d 	bl	2960 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3946:	68fb      	ldr	r3, [r7, #12]
    3948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    394a:	f240 2354 	movw	r3, #596	; 0x254
    394e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3952:	681b      	ldr	r3, [r3, #0]
    3954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3956:	429a      	cmp	r2, r3
    3958:	d301      	bcc.n	395e <vTaskResume+0x96>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
    395a:	f000 fe65 	bl	4628 <vPortYieldFromISR>
					}
				}
			}
			taskEXIT_CRITICAL();
    395e:	f000 fe87 	bl	4670 <vPortExitCritical>
		}
	}
    3962:	3710      	adds	r7, #16
    3964:	46bd      	mov	sp, r7
    3966:	bd80      	pop	{r7, pc}

00003968 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
    3968:	b580      	push	{r7, lr}
    396a:	b086      	sub	sp, #24
    396c:	af00      	add	r7, sp, #0
    396e:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xYieldRequired = pdFALSE;
    3970:	2300      	movs	r3, #0
    3972:	617b      	str	r3, [r7, #20]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxSavedInterruptStatus;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
    3974:	687b      	ldr	r3, [r7, #4]
    3976:	613b      	str	r3, [r7, #16]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    3978:	2300      	movs	r3, #0
    397a:	60fb      	str	r3, [r7, #12]
    397c:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    3980:	f380 8811 	msr	BASEPRI, r0
		{
			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    3984:	6938      	ldr	r0, [r7, #16]
    3986:	f7ff ff79 	bl	387c <xTaskIsTaskSuspended>
    398a:	4603      	mov	r3, r0
    398c:	2b01      	cmp	r3, #1
    398e:	d144      	bne.n	3a1a <xTaskResumeFromISR+0xb2>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3990:	f240 436c 	movw	r3, #1132	; 0x46c
    3994:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3998:	681b      	ldr	r3, [r3, #0]
    399a:	2b00      	cmp	r3, #0
    399c:	d134      	bne.n	3a08 <xTaskResumeFromISR+0xa0>
				{
					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
    399e:	693b      	ldr	r3, [r7, #16]
    39a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    39a2:	f240 2354 	movw	r3, #596	; 0x254
    39a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    39aa:	681b      	ldr	r3, [r3, #0]
    39ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    39ae:	429a      	cmp	r2, r3
    39b0:	bf34      	ite	cc
    39b2:	2300      	movcc	r3, #0
    39b4:	2301      	movcs	r3, #1
    39b6:	b2db      	uxtb	r3, r3
    39b8:	617b      	str	r3, [r7, #20]
					vListRemove(  &( pxTCB->xGenericListItem ) );
    39ba:	693b      	ldr	r3, [r7, #16]
    39bc:	3304      	adds	r3, #4
    39be:	4618      	mov	r0, r3
    39c0:	f7ff f82e 	bl	2a20 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    39c4:	693b      	ldr	r3, [r7, #16]
    39c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    39c8:	f240 4364 	movw	r3, #1124	; 0x464
    39cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    39d0:	681b      	ldr	r3, [r3, #0]
    39d2:	429a      	cmp	r2, r3
    39d4:	d906      	bls.n	39e4 <xTaskResumeFromISR+0x7c>
    39d6:	693b      	ldr	r3, [r7, #16]
    39d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    39da:	f240 4364 	movw	r3, #1124	; 0x464
    39de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    39e2:	601a      	str	r2, [r3, #0]
    39e4:	693b      	ldr	r3, [r7, #16]
    39e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    39e8:	4613      	mov	r3, r2
    39ea:	009b      	lsls	r3, r3, #2
    39ec:	4413      	add	r3, r2
    39ee:	009b      	lsls	r3, r3, #2
    39f0:	f240 2258 	movw	r2, #600	; 0x258
    39f4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    39f8:	441a      	add	r2, r3
    39fa:	693b      	ldr	r3, [r7, #16]
    39fc:	3304      	adds	r3, #4
    39fe:	4610      	mov	r0, r2
    3a00:	4619      	mov	r1, r3
    3a02:	f7fe ffad 	bl	2960 <vListInsertEnd>
    3a06:	e008      	b.n	3a1a <xTaskResumeFromISR+0xb2>
				else
				{
					/* We cannot access the delayed or ready lists, so will hold this
					task pending until the scheduler is resumed, at which point a
					yield will be performed if necessary. */
					vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    3a08:	693b      	ldr	r3, [r7, #16]
    3a0a:	3318      	adds	r3, #24
    3a0c:	f240 4018 	movw	r0, #1048	; 0x418
    3a10:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3a14:	4619      	mov	r1, r3
    3a16:	f7fe ffa3 	bl	2960 <vListInsertEnd>
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    3a1a:	f04f 0000 	mov.w	r0, #0
    3a1e:	f380 8811 	msr	BASEPRI, r0

		return xYieldRequired;
    3a22:	697b      	ldr	r3, [r7, #20]
	}
    3a24:	4618      	mov	r0, r3
    3a26:	3718      	adds	r7, #24
    3a28:	46bd      	mov	sp, r7
    3a2a:	bd80      	pop	{r7, pc}

00003a2c <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    3a2c:	b580      	push	{r7, lr}
    3a2e:	b086      	sub	sp, #24
    3a30:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    3a32:	2300      	movs	r3, #0
    3a34:	9300      	str	r3, [sp, #0]
    3a36:	2300      	movs	r3, #0
    3a38:	9301      	str	r3, [sp, #4]
    3a3a:	2300      	movs	r3, #0
    3a3c:	9302      	str	r3, [sp, #8]
    3a3e:	2300      	movs	r3, #0
    3a40:	9303      	str	r3, [sp, #12]
    3a42:	f244 1019 	movw	r0, #16665	; 0x4119
    3a46:	f2c0 0000 	movt	r0, #0
    3a4a:	f247 3164 	movw	r1, #29540	; 0x7364
    3a4e:	f2c0 0101 	movt	r1, #1
    3a52:	2280      	movs	r2, #128	; 0x80
    3a54:	2300      	movs	r3, #0
    3a56:	f7ff fc6b 	bl	3330 <xTaskGenericCreate>
    3a5a:	6078      	str	r0, [r7, #4]
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
    3a5c:	687b      	ldr	r3, [r7, #4]
    3a5e:	2b01      	cmp	r3, #1
    3a60:	d111      	bne.n	3a86 <vTaskStartScheduler+0x5a>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
    3a62:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    3a66:	f380 8811 	msr	BASEPRI, r0

		xSchedulerRunning = pdTRUE;
    3a6a:	f240 4368 	movw	r3, #1128	; 0x468
    3a6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a72:	2201      	movs	r2, #1
    3a74:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
    3a76:	f240 435c 	movw	r3, #1116	; 0x45c
    3a7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a7e:	2200      	movs	r2, #0
    3a80:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    3a82:	f000 fda3 	bl	45cc <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    3a86:	3708      	adds	r7, #8
    3a88:	46bd      	mov	sp, r7
    3a8a:	bd80      	pop	{r7, pc}

00003a8c <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    3a8c:	b580      	push	{r7, lr}
    3a8e:	af00      	add	r7, sp, #0
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    3a90:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    3a94:	f380 8811 	msr	BASEPRI, r0
	xSchedulerRunning = pdFALSE;
    3a98:	f240 4368 	movw	r3, #1128	; 0x468
    3a9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3aa0:	2200      	movs	r2, #0
    3aa2:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
    3aa4:	f000 fdba 	bl	461c <vPortEndScheduler>
}
    3aa8:	bd80      	pop	{r7, pc}
    3aaa:	bf00      	nop

00003aac <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    3aac:	b480      	push	{r7}
    3aae:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    3ab0:	f240 436c 	movw	r3, #1132	; 0x46c
    3ab4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ab8:	681b      	ldr	r3, [r3, #0]
    3aba:	1c5a      	adds	r2, r3, #1
    3abc:	f240 436c 	movw	r3, #1132	; 0x46c
    3ac0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ac4:	601a      	str	r2, [r3, #0]
}
    3ac6:	46bd      	mov	sp, r7
    3ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
    3acc:	4770      	bx	lr
    3ace:	bf00      	nop

00003ad0 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    3ad0:	b590      	push	{r4, r7, lr}
    3ad2:	b083      	sub	sp, #12
    3ad4:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    3ad6:	2300      	movs	r3, #0
    3ad8:	607b      	str	r3, [r7, #4]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    3ada:	f000 fdb3 	bl	4644 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
    3ade:	f240 436c 	movw	r3, #1132	; 0x46c
    3ae2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ae6:	681b      	ldr	r3, [r3, #0]
    3ae8:	1e5a      	subs	r2, r3, #1
    3aea:	f240 436c 	movw	r3, #1132	; 0x46c
    3aee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3af2:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3af4:	f240 436c 	movw	r3, #1132	; 0x46c
    3af8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3afc:	681b      	ldr	r3, [r3, #0]
    3afe:	2b00      	cmp	r3, #0
    3b00:	d179      	bne.n	3bf6 <xTaskResumeAll+0x126>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    3b02:	f240 4358 	movw	r3, #1112	; 0x458
    3b06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b0a:	681b      	ldr	r3, [r3, #0]
    3b0c:	2b00      	cmp	r3, #0
    3b0e:	d072      	beq.n	3bf6 <xTaskResumeAll+0x126>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
    3b10:	2300      	movs	r3, #0
    3b12:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    3b14:	e036      	b.n	3b84 <xTaskResumeAll+0xb4>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    3b16:	f240 4318 	movw	r3, #1048	; 0x418
    3b1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b1e:	68db      	ldr	r3, [r3, #12]
    3b20:	68dc      	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
    3b22:	f104 0318 	add.w	r3, r4, #24
    3b26:	4618      	mov	r0, r3
    3b28:	f7fe ff7a 	bl	2a20 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    3b2c:	1d23      	adds	r3, r4, #4
    3b2e:	4618      	mov	r0, r3
    3b30:	f7fe ff76 	bl	2a20 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    3b34:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3b36:	f240 4364 	movw	r3, #1124	; 0x464
    3b3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b3e:	681b      	ldr	r3, [r3, #0]
    3b40:	429a      	cmp	r2, r3
    3b42:	d905      	bls.n	3b50 <xTaskResumeAll+0x80>
    3b44:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3b46:	f240 4364 	movw	r3, #1124	; 0x464
    3b4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b4e:	601a      	str	r2, [r3, #0]
    3b50:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3b52:	4613      	mov	r3, r2
    3b54:	009b      	lsls	r3, r3, #2
    3b56:	4413      	add	r3, r2
    3b58:	009b      	lsls	r3, r3, #2
    3b5a:	f240 2258 	movw	r2, #600	; 0x258
    3b5e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3b62:	441a      	add	r2, r3
    3b64:	1d23      	adds	r3, r4, #4
    3b66:	4610      	mov	r0, r2
    3b68:	4619      	mov	r1, r3
    3b6a:	f7fe fef9 	bl	2960 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3b6e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3b70:	f240 2354 	movw	r3, #596	; 0x254
    3b74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b78:	681b      	ldr	r3, [r3, #0]
    3b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3b7c:	429a      	cmp	r2, r3
    3b7e:	d301      	bcc.n	3b84 <xTaskResumeAll+0xb4>
					{
						xYieldRequired = pdTRUE;
    3b80:	2301      	movs	r3, #1
    3b82:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    3b84:	f240 4318 	movw	r3, #1048	; 0x418
    3b88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b8c:	681b      	ldr	r3, [r3, #0]
    3b8e:	2b00      	cmp	r3, #0
    3b90:	d1c1      	bne.n	3b16 <xTaskResumeAll+0x46>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    3b92:	f240 4370 	movw	r3, #1136	; 0x470
    3b96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b9a:	681b      	ldr	r3, [r3, #0]
    3b9c:	2b00      	cmp	r3, #0
    3b9e:	d016      	beq.n	3bce <xTaskResumeAll+0xfe>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    3ba0:	e00c      	b.n	3bbc <xTaskResumeAll+0xec>
					{
						vTaskIncrementTick();
    3ba2:	f000 f87f 	bl	3ca4 <vTaskIncrementTick>
						--uxMissedTicks;
    3ba6:	f240 4370 	movw	r3, #1136	; 0x470
    3baa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3bae:	681b      	ldr	r3, [r3, #0]
    3bb0:	1e5a      	subs	r2, r3, #1
    3bb2:	f240 4370 	movw	r3, #1136	; 0x470
    3bb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3bba:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    3bbc:	f240 4370 	movw	r3, #1136	; 0x470
    3bc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3bc4:	681b      	ldr	r3, [r3, #0]
    3bc6:	2b00      	cmp	r3, #0
    3bc8:	d1eb      	bne.n	3ba2 <xTaskResumeAll+0xd2>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
    3bca:	2301      	movs	r3, #1
    3bcc:	603b      	str	r3, [r7, #0]
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    3bce:	683b      	ldr	r3, [r7, #0]
    3bd0:	2b01      	cmp	r3, #1
    3bd2:	d006      	beq.n	3be2 <xTaskResumeAll+0x112>
    3bd4:	f240 4374 	movw	r3, #1140	; 0x474
    3bd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3bdc:	681b      	ldr	r3, [r3, #0]
    3bde:	2b01      	cmp	r3, #1
    3be0:	d109      	bne.n	3bf6 <xTaskResumeAll+0x126>
				{
					xAlreadyYielded = pdTRUE;
    3be2:	2301      	movs	r3, #1
    3be4:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
    3be6:	f240 4374 	movw	r3, #1140	; 0x474
    3bea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3bee:	2200      	movs	r2, #0
    3bf0:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
    3bf2:	f000 fd19 	bl	4628 <vPortYieldFromISR>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    3bf6:	f000 fd3b 	bl	4670 <vPortExitCritical>

	return xAlreadyYielded;
    3bfa:	687b      	ldr	r3, [r7, #4]
}
    3bfc:	4618      	mov	r0, r3
    3bfe:	370c      	adds	r7, #12
    3c00:	46bd      	mov	sp, r7
    3c02:	bd90      	pop	{r4, r7, pc}

00003c04 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    3c04:	b580      	push	{r7, lr}
    3c06:	b082      	sub	sp, #8
    3c08:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    3c0a:	f000 fd1b 	bl	4644 <vPortEnterCritical>
	{
		xTicks = xTickCount;
    3c0e:	f240 435c 	movw	r3, #1116	; 0x45c
    3c12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c16:	681b      	ldr	r3, [r3, #0]
    3c18:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
    3c1a:	f000 fd29 	bl	4670 <vPortExitCritical>

	return xTicks;
    3c1e:	687b      	ldr	r3, [r7, #4]
}
    3c20:	4618      	mov	r0, r3
    3c22:	3708      	adds	r7, #8
    3c24:	46bd      	mov	sp, r7
    3c26:	bd80      	pop	{r7, pc}

00003c28 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
    3c28:	b480      	push	{r7}
    3c2a:	b083      	sub	sp, #12
    3c2c:	af00      	add	r7, sp, #0
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    3c2e:	2300      	movs	r3, #0
    3c30:	607b      	str	r3, [r7, #4]
    3c32:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    3c36:	f380 8811 	msr	BASEPRI, r0
	xReturn = xTickCount;
    3c3a:	f240 435c 	movw	r3, #1116	; 0x45c
    3c3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c42:	681b      	ldr	r3, [r3, #0]
    3c44:	603b      	str	r3, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    3c46:	f04f 0000 	mov.w	r0, #0
    3c4a:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    3c4e:	683b      	ldr	r3, [r7, #0]
}
    3c50:	4618      	mov	r0, r3
    3c52:	370c      	adds	r7, #12
    3c54:	46bd      	mov	sp, r7
    3c56:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c5a:	4770      	bx	lr

00003c5c <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
    3c5c:	b480      	push	{r7}
    3c5e:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    3c60:	f240 4358 	movw	r3, #1112	; 0x458
    3c64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c68:	681b      	ldr	r3, [r3, #0]
}
    3c6a:	4618      	mov	r0, r3
    3c6c:	46bd      	mov	sp, r7
    3c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c72:	4770      	bx	lr

00003c74 <pcTaskGetTaskName>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_pcTaskGetTaskName == 1 )

	signed char *pcTaskGetTaskName( xTaskHandle xTaskToQuery )
	{
    3c74:	b480      	push	{r7}
    3c76:	b085      	sub	sp, #20
    3c78:	af00      	add	r7, sp, #0
    3c7a:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		/* If null is passed in here then the name of the calling task is being queried. */
		pxTCB = prvGetTCBFromHandle( xTaskToQuery );
    3c7c:	687b      	ldr	r3, [r7, #4]
    3c7e:	2b00      	cmp	r3, #0
    3c80:	d105      	bne.n	3c8e <pcTaskGetTaskName+0x1a>
    3c82:	f240 2354 	movw	r3, #596	; 0x254
    3c86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c8a:	681b      	ldr	r3, [r3, #0]
    3c8c:	e000      	b.n	3c90 <pcTaskGetTaskName+0x1c>
    3c8e:	687b      	ldr	r3, [r7, #4]
    3c90:	60fb      	str	r3, [r7, #12]
		configASSERT( pxTCB );
		return &( pxTCB->pcTaskName[ 0 ] );
    3c92:	68fb      	ldr	r3, [r7, #12]
    3c94:	3334      	adds	r3, #52	; 0x34
	}
    3c96:	4618      	mov	r0, r3
    3c98:	3714      	adds	r7, #20
    3c9a:	46bd      	mov	sp, r7
    3c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ca0:	4770      	bx	lr
    3ca2:	bf00      	nop

00003ca4 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    3ca4:	b580      	push	{r7, lr}
    3ca6:	b084      	sub	sp, #16
    3ca8:	af00      	add	r7, sp, #0
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3caa:	f240 436c 	movw	r3, #1132	; 0x46c
    3cae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3cb2:	681b      	ldr	r3, [r3, #0]
    3cb4:	2b00      	cmp	r3, #0
    3cb6:	f040 80b9 	bne.w	3e2c <vTaskIncrementTick+0x188>
	{
		++xTickCount;
    3cba:	f240 435c 	movw	r3, #1116	; 0x45c
    3cbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3cc2:	681b      	ldr	r3, [r3, #0]
    3cc4:	1c5a      	adds	r2, r3, #1
    3cc6:	f240 435c 	movw	r3, #1116	; 0x45c
    3cca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3cce:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
    3cd0:	f240 435c 	movw	r3, #1116	; 0x45c
    3cd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3cd8:	681b      	ldr	r3, [r3, #0]
    3cda:	2b00      	cmp	r3, #0
    3cdc:	d13f      	bne.n	3d5e <vTaskIncrementTick+0xba>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    3cde:	f240 4310 	movw	r3, #1040	; 0x410
    3ce2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ce6:	681b      	ldr	r3, [r3, #0]
    3ce8:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    3cea:	f240 4314 	movw	r3, #1044	; 0x414
    3cee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3cf2:	681a      	ldr	r2, [r3, #0]
    3cf4:	f240 4310 	movw	r3, #1040	; 0x410
    3cf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3cfc:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
    3cfe:	f240 4314 	movw	r3, #1044	; 0x414
    3d02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d06:	68fa      	ldr	r2, [r7, #12]
    3d08:	601a      	str	r2, [r3, #0]
			xNumOfOverflows++;
    3d0a:	f240 4378 	movw	r3, #1144	; 0x478
    3d0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d12:	681b      	ldr	r3, [r3, #0]
    3d14:	1c5a      	adds	r2, r3, #1
    3d16:	f240 4378 	movw	r3, #1144	; 0x478
    3d1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d1e:	601a      	str	r2, [r3, #0]
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    3d20:	f240 4310 	movw	r3, #1040	; 0x410
    3d24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d28:	681b      	ldr	r3, [r3, #0]
    3d2a:	681b      	ldr	r3, [r3, #0]
    3d2c:	2b00      	cmp	r3, #0
    3d2e:	d107      	bne.n	3d40 <vTaskIncrementTick+0x9c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    3d30:	f240 03f8 	movw	r3, #248	; 0xf8
    3d34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d38:	f04f 32ff 	mov.w	r2, #4294967295
    3d3c:	601a      	str	r2, [r3, #0]
    3d3e:	e00e      	b.n	3d5e <vTaskIncrementTick+0xba>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    3d40:	f240 4310 	movw	r3, #1040	; 0x410
    3d44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d48:	681b      	ldr	r3, [r3, #0]
    3d4a:	68db      	ldr	r3, [r3, #12]
    3d4c:	68db      	ldr	r3, [r3, #12]
    3d4e:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    3d50:	68bb      	ldr	r3, [r7, #8]
    3d52:	685a      	ldr	r2, [r3, #4]
    3d54:	f240 03f8 	movw	r3, #248	; 0xf8
    3d58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d5c:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    3d5e:	f240 435c 	movw	r3, #1116	; 0x45c
    3d62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d66:	681a      	ldr	r2, [r3, #0]
    3d68:	f240 03f8 	movw	r3, #248	; 0xf8
    3d6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d70:	681b      	ldr	r3, [r3, #0]
    3d72:	429a      	cmp	r2, r3
    3d74:	d359      	bcc.n	3e2a <vTaskIncrementTick+0x186>
    3d76:	f240 4310 	movw	r3, #1040	; 0x410
    3d7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d7e:	681b      	ldr	r3, [r3, #0]
    3d80:	681b      	ldr	r3, [r3, #0]
    3d82:	2b00      	cmp	r3, #0
    3d84:	d107      	bne.n	3d96 <vTaskIncrementTick+0xf2>
    3d86:	f240 03f8 	movw	r3, #248	; 0xf8
    3d8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d8e:	f04f 32ff 	mov.w	r2, #4294967295
    3d92:	601a      	str	r2, [r3, #0]
    3d94:	e049      	b.n	3e2a <vTaskIncrementTick+0x186>
    3d96:	f240 4310 	movw	r3, #1040	; 0x410
    3d9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d9e:	681b      	ldr	r3, [r3, #0]
    3da0:	68db      	ldr	r3, [r3, #12]
    3da2:	68db      	ldr	r3, [r3, #12]
    3da4:	60bb      	str	r3, [r7, #8]
    3da6:	68bb      	ldr	r3, [r7, #8]
    3da8:	685b      	ldr	r3, [r3, #4]
    3daa:	607b      	str	r3, [r7, #4]
    3dac:	f240 435c 	movw	r3, #1116	; 0x45c
    3db0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3db4:	681a      	ldr	r2, [r3, #0]
    3db6:	687b      	ldr	r3, [r7, #4]
    3db8:	429a      	cmp	r2, r3
    3dba:	d206      	bcs.n	3dca <vTaskIncrementTick+0x126>
    3dbc:	f240 03f8 	movw	r3, #248	; 0xf8
    3dc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3dc4:	687a      	ldr	r2, [r7, #4]
    3dc6:	601a      	str	r2, [r3, #0]
    3dc8:	e02f      	b.n	3e2a <vTaskIncrementTick+0x186>
    3dca:	68bb      	ldr	r3, [r7, #8]
    3dcc:	3304      	adds	r3, #4
    3dce:	4618      	mov	r0, r3
    3dd0:	f7fe fe26 	bl	2a20 <vListRemove>
    3dd4:	68bb      	ldr	r3, [r7, #8]
    3dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3dd8:	2b00      	cmp	r3, #0
    3dda:	d004      	beq.n	3de6 <vTaskIncrementTick+0x142>
    3ddc:	68bb      	ldr	r3, [r7, #8]
    3dde:	3318      	adds	r3, #24
    3de0:	4618      	mov	r0, r3
    3de2:	f7fe fe1d 	bl	2a20 <vListRemove>
    3de6:	68bb      	ldr	r3, [r7, #8]
    3de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3dea:	f240 4364 	movw	r3, #1124	; 0x464
    3dee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3df2:	681b      	ldr	r3, [r3, #0]
    3df4:	429a      	cmp	r2, r3
    3df6:	d906      	bls.n	3e06 <vTaskIncrementTick+0x162>
    3df8:	68bb      	ldr	r3, [r7, #8]
    3dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3dfc:	f240 4364 	movw	r3, #1124	; 0x464
    3e00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e04:	601a      	str	r2, [r3, #0]
    3e06:	68bb      	ldr	r3, [r7, #8]
    3e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3e0a:	4613      	mov	r3, r2
    3e0c:	009b      	lsls	r3, r3, #2
    3e0e:	4413      	add	r3, r2
    3e10:	009b      	lsls	r3, r3, #2
    3e12:	f240 2258 	movw	r2, #600	; 0x258
    3e16:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3e1a:	441a      	add	r2, r3
    3e1c:	68bb      	ldr	r3, [r7, #8]
    3e1e:	3304      	adds	r3, #4
    3e20:	4610      	mov	r0, r2
    3e22:	4619      	mov	r1, r3
    3e24:	f7fe fd9c 	bl	2960 <vListInsertEnd>
    3e28:	e7a5      	b.n	3d76 <vTaskIncrementTick+0xd2>
    3e2a:	e00c      	b.n	3e46 <vTaskIncrementTick+0x1a2>
	}
	else
	{
		++uxMissedTicks;
    3e2c:	f240 4370 	movw	r3, #1136	; 0x470
    3e30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e34:	681b      	ldr	r3, [r3, #0]
    3e36:	1c5a      	adds	r2, r3, #1
    3e38:	f240 4370 	movw	r3, #1136	; 0x470
    3e3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e40:	601a      	str	r2, [r3, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
    3e42:	f012 f973 	bl	1612c <vApplicationTickHook>

	#if ( configUSE_TICK_HOOK == 1 )
	{
		/* Guard against the tick hook being called when the missed tick
		count is being unwound (when the scheduler is being unlocked. */
		if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
    3e46:	f240 4370 	movw	r3, #1136	; 0x470
    3e4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e4e:	681b      	ldr	r3, [r3, #0]
    3e50:	2b00      	cmp	r3, #0
    3e52:	d101      	bne.n	3e58 <vTaskIncrementTick+0x1b4>
		{
			vApplicationTickHook();
    3e54:	f012 f96a 	bl	1612c <vApplicationTickHook>
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    3e58:	3710      	adds	r7, #16
    3e5a:	46bd      	mov	sp, r7
    3e5c:	bd80      	pop	{r7, pc}
    3e5e:	bf00      	nop

00003e60 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    3e60:	b580      	push	{r7, lr}
    3e62:	b082      	sub	sp, #8
    3e64:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    3e66:	f240 436c 	movw	r3, #1132	; 0x46c
    3e6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e6e:	681b      	ldr	r3, [r3, #0]
    3e70:	2b00      	cmp	r3, #0
    3e72:	d006      	beq.n	3e82 <vTaskSwitchContext+0x22>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    3e74:	f240 4374 	movw	r3, #1140	; 0x474
    3e78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e7c:	2201      	movs	r2, #1
    3e7e:	601a      	str	r2, [r3, #0]
    3e80:	e047      	b.n	3f12 <vTaskSwitchContext+0xb2>
	}
	else
	{
		traceTASK_SWITCHED_OUT();
    3e82:	f012 f93d 	bl	16100 <myTraceSwitchedOut>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    3e86:	e00a      	b.n	3e9e <vTaskSwitchContext+0x3e>
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    3e88:	f240 4364 	movw	r3, #1124	; 0x464
    3e8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e90:	681b      	ldr	r3, [r3, #0]
    3e92:	1e5a      	subs	r2, r3, #1
    3e94:	f240 4364 	movw	r3, #1124	; 0x464
    3e98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e9c:	601a      	str	r2, [r3, #0]
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    3e9e:	f240 4364 	movw	r3, #1124	; 0x464
    3ea2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ea6:	6819      	ldr	r1, [r3, #0]
    3ea8:	f240 2258 	movw	r2, #600	; 0x258
    3eac:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3eb0:	460b      	mov	r3, r1
    3eb2:	009b      	lsls	r3, r3, #2
    3eb4:	440b      	add	r3, r1
    3eb6:	009b      	lsls	r3, r3, #2
    3eb8:	4413      	add	r3, r2
    3eba:	681b      	ldr	r3, [r3, #0]
    3ebc:	2b00      	cmp	r3, #0
    3ebe:	d0e3      	beq.n	3e88 <vTaskSwitchContext+0x28>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    3ec0:	f240 4364 	movw	r3, #1124	; 0x464
    3ec4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ec8:	681a      	ldr	r2, [r3, #0]
    3eca:	4613      	mov	r3, r2
    3ecc:	009b      	lsls	r3, r3, #2
    3ece:	4413      	add	r3, r2
    3ed0:	009b      	lsls	r3, r3, #2
    3ed2:	f240 2258 	movw	r2, #600	; 0x258
    3ed6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3eda:	4413      	add	r3, r2
    3edc:	607b      	str	r3, [r7, #4]
    3ede:	687b      	ldr	r3, [r7, #4]
    3ee0:	685b      	ldr	r3, [r3, #4]
    3ee2:	685a      	ldr	r2, [r3, #4]
    3ee4:	687b      	ldr	r3, [r7, #4]
    3ee6:	605a      	str	r2, [r3, #4]
    3ee8:	687b      	ldr	r3, [r7, #4]
    3eea:	685a      	ldr	r2, [r3, #4]
    3eec:	687b      	ldr	r3, [r7, #4]
    3eee:	3308      	adds	r3, #8
    3ef0:	429a      	cmp	r2, r3
    3ef2:	d104      	bne.n	3efe <vTaskSwitchContext+0x9e>
    3ef4:	687b      	ldr	r3, [r7, #4]
    3ef6:	685b      	ldr	r3, [r3, #4]
    3ef8:	685a      	ldr	r2, [r3, #4]
    3efa:	687b      	ldr	r3, [r7, #4]
    3efc:	605a      	str	r2, [r3, #4]
    3efe:	687b      	ldr	r3, [r7, #4]
    3f00:	685b      	ldr	r3, [r3, #4]
    3f02:	68da      	ldr	r2, [r3, #12]
    3f04:	f240 2354 	movw	r3, #596	; 0x254
    3f08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f0c:	601a      	str	r2, [r3, #0]
        //vPrintString(pcTaskGetTaskName(pxCurrentTCB));
	
		traceTASK_SWITCHED_IN();
    3f0e:	f012 f8f1 	bl	160f4 <myTraceSwitchedIn>
	}
}
    3f12:	3708      	adds	r7, #8
    3f14:	46bd      	mov	sp, r7
    3f16:	bd80      	pop	{r7, pc}

00003f18 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    3f18:	b580      	push	{r7, lr}
    3f1a:	b084      	sub	sp, #16
    3f1c:	af00      	add	r7, sp, #0
    3f1e:	6078      	str	r0, [r7, #4]
    3f20:	6039      	str	r1, [r7, #0]
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    3f22:	f240 2354 	movw	r3, #596	; 0x254
    3f26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f2a:	681b      	ldr	r3, [r3, #0]
    3f2c:	3318      	adds	r3, #24
    3f2e:	6878      	ldr	r0, [r7, #4]
    3f30:	4619      	mov	r1, r3
    3f32:	f7fe fd3d 	bl	29b0 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3f36:	f240 2354 	movw	r3, #596	; 0x254
    3f3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f3e:	681b      	ldr	r3, [r3, #0]
    3f40:	3304      	adds	r3, #4
    3f42:	4618      	mov	r0, r3
    3f44:	f7fe fd6c 	bl	2a20 <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    3f48:	683b      	ldr	r3, [r7, #0]
    3f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
    3f4e:	d10d      	bne.n	3f6c <vTaskPlaceOnEventList+0x54>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3f50:	f240 2354 	movw	r3, #596	; 0x254
    3f54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f58:	681b      	ldr	r3, [r3, #0]
    3f5a:	3304      	adds	r3, #4
    3f5c:	f240 4044 	movw	r0, #1092	; 0x444
    3f60:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3f64:	4619      	mov	r1, r3
    3f66:	f7fe fcfb 	bl	2960 <vListInsertEnd>
    3f6a:	e00a      	b.n	3f82 <vTaskPlaceOnEventList+0x6a>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    3f6c:	f240 435c 	movw	r3, #1116	; 0x45c
    3f70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f74:	681a      	ldr	r2, [r3, #0]
    3f76:	683b      	ldr	r3, [r7, #0]
    3f78:	4413      	add	r3, r2
    3f7a:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    3f7c:	68f8      	ldr	r0, [r7, #12]
    3f7e:	f000 f9a7 	bl	42d0 <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
    3f82:	3710      	adds	r7, #16
    3f84:	46bd      	mov	sp, r7
    3f86:	bd80      	pop	{r7, pc}

00003f88 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    3f88:	b580      	push	{r7, lr}
    3f8a:	b084      	sub	sp, #16
    3f8c:	af00      	add	r7, sp, #0
    3f8e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    3f90:	687b      	ldr	r3, [r7, #4]
    3f92:	68db      	ldr	r3, [r3, #12]
    3f94:	68db      	ldr	r3, [r3, #12]
    3f96:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    3f98:	68bb      	ldr	r3, [r7, #8]
    3f9a:	3318      	adds	r3, #24
    3f9c:	4618      	mov	r0, r3
    3f9e:	f7fe fd3f 	bl	2a20 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3fa2:	f240 436c 	movw	r3, #1132	; 0x46c
    3fa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3faa:	681b      	ldr	r3, [r3, #0]
    3fac:	2b00      	cmp	r3, #0
    3fae:	d126      	bne.n	3ffe <xTaskRemoveFromEventList+0x76>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    3fb0:	68bb      	ldr	r3, [r7, #8]
    3fb2:	3304      	adds	r3, #4
    3fb4:	4618      	mov	r0, r3
    3fb6:	f7fe fd33 	bl	2a20 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    3fba:	68bb      	ldr	r3, [r7, #8]
    3fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3fbe:	f240 4364 	movw	r3, #1124	; 0x464
    3fc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3fc6:	681b      	ldr	r3, [r3, #0]
    3fc8:	429a      	cmp	r2, r3
    3fca:	d906      	bls.n	3fda <xTaskRemoveFromEventList+0x52>
    3fcc:	68bb      	ldr	r3, [r7, #8]
    3fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3fd0:	f240 4364 	movw	r3, #1124	; 0x464
    3fd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3fd8:	601a      	str	r2, [r3, #0]
    3fda:	68bb      	ldr	r3, [r7, #8]
    3fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3fde:	4613      	mov	r3, r2
    3fe0:	009b      	lsls	r3, r3, #2
    3fe2:	4413      	add	r3, r2
    3fe4:	009b      	lsls	r3, r3, #2
    3fe6:	f240 2258 	movw	r2, #600	; 0x258
    3fea:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3fee:	441a      	add	r2, r3
    3ff0:	68bb      	ldr	r3, [r7, #8]
    3ff2:	3304      	adds	r3, #4
    3ff4:	4610      	mov	r0, r2
    3ff6:	4619      	mov	r1, r3
    3ff8:	f7fe fcb2 	bl	2960 <vListInsertEnd>
    3ffc:	e008      	b.n	4010 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    3ffe:	68bb      	ldr	r3, [r7, #8]
    4000:	3318      	adds	r3, #24
    4002:	f240 4018 	movw	r0, #1048	; 0x418
    4006:	f2c2 0000 	movt	r0, #8192	; 0x2000
    400a:	4619      	mov	r1, r3
    400c:	f7fe fca8 	bl	2960 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    4010:	68bb      	ldr	r3, [r7, #8]
    4012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4014:	f240 2354 	movw	r3, #596	; 0x254
    4018:	f2c2 0300 	movt	r3, #8192	; 0x2000
    401c:	681b      	ldr	r3, [r3, #0]
    401e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4020:	429a      	cmp	r2, r3
    4022:	d302      	bcc.n	402a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    4024:	2301      	movs	r3, #1
    4026:	60fb      	str	r3, [r7, #12]
    4028:	e001      	b.n	402e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
    402a:	2300      	movs	r3, #0
    402c:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    402e:	68fb      	ldr	r3, [r7, #12]
}
    4030:	4618      	mov	r0, r3
    4032:	3710      	adds	r7, #16
    4034:	46bd      	mov	sp, r7
    4036:	bd80      	pop	{r7, pc}

00004038 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    4038:	b480      	push	{r7}
    403a:	b083      	sub	sp, #12
    403c:	af00      	add	r7, sp, #0
    403e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    4040:	f240 4378 	movw	r3, #1144	; 0x478
    4044:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4048:	681a      	ldr	r2, [r3, #0]
    404a:	687b      	ldr	r3, [r7, #4]
    404c:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    404e:	f240 435c 	movw	r3, #1116	; 0x45c
    4052:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4056:	681a      	ldr	r2, [r3, #0]
    4058:	687b      	ldr	r3, [r7, #4]
    405a:	605a      	str	r2, [r3, #4]
}
    405c:	370c      	adds	r7, #12
    405e:	46bd      	mov	sp, r7
    4060:	f85d 7b04 	ldr.w	r7, [sp], #4
    4064:	4770      	bx	lr
    4066:	bf00      	nop

00004068 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    4068:	b580      	push	{r7, lr}
    406a:	b084      	sub	sp, #16
    406c:	af00      	add	r7, sp, #0
    406e:	6078      	str	r0, [r7, #4]
    4070:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    4072:	f000 fae7 	bl	4644 <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    4076:	683b      	ldr	r3, [r7, #0]
    4078:	681b      	ldr	r3, [r3, #0]
    407a:	f1b3 3fff 	cmp.w	r3, #4294967295
    407e:	d102      	bne.n	4086 <xTaskCheckForTimeOut+0x1e>
			{
				xReturn = pdFALSE;
    4080:	2300      	movs	r3, #0
    4082:	60fb      	str	r3, [r7, #12]
    4084:	e035      	b.n	40f2 <xTaskCheckForTimeOut+0x8a>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    4086:	687b      	ldr	r3, [r7, #4]
    4088:	681a      	ldr	r2, [r3, #0]
    408a:	f240 4378 	movw	r3, #1144	; 0x478
    408e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4092:	681b      	ldr	r3, [r3, #0]
    4094:	429a      	cmp	r2, r3
    4096:	d00b      	beq.n	40b0 <xTaskCheckForTimeOut+0x48>
    4098:	687b      	ldr	r3, [r7, #4]
    409a:	685a      	ldr	r2, [r3, #4]
    409c:	f240 435c 	movw	r3, #1116	; 0x45c
    40a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    40a4:	681b      	ldr	r3, [r3, #0]
    40a6:	429a      	cmp	r2, r3
    40a8:	d802      	bhi.n	40b0 <xTaskCheckForTimeOut+0x48>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    40aa:	2301      	movs	r3, #1
    40ac:	60fb      	str	r3, [r7, #12]
    40ae:	e020      	b.n	40f2 <xTaskCheckForTimeOut+0x8a>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    40b0:	f240 435c 	movw	r3, #1116	; 0x45c
    40b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    40b8:	681a      	ldr	r2, [r3, #0]
    40ba:	687b      	ldr	r3, [r7, #4]
    40bc:	685b      	ldr	r3, [r3, #4]
    40be:	1ad2      	subs	r2, r2, r3
    40c0:	683b      	ldr	r3, [r7, #0]
    40c2:	681b      	ldr	r3, [r3, #0]
    40c4:	429a      	cmp	r2, r3
    40c6:	d212      	bcs.n	40ee <xTaskCheckForTimeOut+0x86>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    40c8:	683b      	ldr	r3, [r7, #0]
    40ca:	681a      	ldr	r2, [r3, #0]
    40cc:	687b      	ldr	r3, [r7, #4]
    40ce:	6859      	ldr	r1, [r3, #4]
    40d0:	f240 435c 	movw	r3, #1116	; 0x45c
    40d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    40d8:	681b      	ldr	r3, [r3, #0]
    40da:	1acb      	subs	r3, r1, r3
    40dc:	441a      	add	r2, r3
    40de:	683b      	ldr	r3, [r7, #0]
    40e0:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
    40e2:	6878      	ldr	r0, [r7, #4]
    40e4:	f7ff ffa8 	bl	4038 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    40e8:	2300      	movs	r3, #0
    40ea:	60fb      	str	r3, [r7, #12]
    40ec:	e001      	b.n	40f2 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			xReturn = pdTRUE;
    40ee:	2301      	movs	r3, #1
    40f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    40f2:	f000 fabd 	bl	4670 <vPortExitCritical>

	return xReturn;
    40f6:	68fb      	ldr	r3, [r7, #12]
}
    40f8:	4618      	mov	r0, r3
    40fa:	3710      	adds	r7, #16
    40fc:	46bd      	mov	sp, r7
    40fe:	bd80      	pop	{r7, pc}

00004100 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    4100:	b480      	push	{r7}
    4102:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
    4104:	f240 4374 	movw	r3, #1140	; 0x474
    4108:	f2c2 0300 	movt	r3, #8192	; 0x2000
    410c:	2201      	movs	r2, #1
    410e:	601a      	str	r2, [r3, #0]
}
    4110:	46bd      	mov	sp, r7
    4112:	f85d 7b04 	ldr.w	r7, [sp], #4
    4116:	4770      	bx	lr

00004118 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    4118:	b580      	push	{r7, lr}
    411a:	b082      	sub	sp, #8
    411c:	af00      	add	r7, sp, #0
    411e:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    4120:	f000 f88e 	bl	4240 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    4124:	f240 2358 	movw	r3, #600	; 0x258
    4128:	f2c2 0300 	movt	r3, #8192	; 0x2000
    412c:	681b      	ldr	r3, [r3, #0]
    412e:	2b01      	cmp	r3, #1
    4130:	d902      	bls.n	4138 <prvIdleTask+0x20>
			{
				taskYIELD();
    4132:	f000 fa79 	bl	4628 <vPortYieldFromISR>
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
    4136:	e7f3      	b.n	4120 <prvIdleTask+0x8>
    4138:	e7f2      	b.n	4120 <prvIdleTask+0x8>
    413a:	bf00      	nop

0000413c <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    413c:	b580      	push	{r7, lr}
    413e:	b084      	sub	sp, #16
    4140:	af00      	add	r7, sp, #0
    4142:	60f8      	str	r0, [r7, #12]
    4144:	60b9      	str	r1, [r7, #8]
    4146:	607a      	str	r2, [r7, #4]
    4148:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    414a:	68fb      	ldr	r3, [r7, #12]
    414c:	3334      	adds	r3, #52	; 0x34
    414e:	4618      	mov	r0, r3
    4150:	68b9      	ldr	r1, [r7, #8]
    4152:	2210      	movs	r2, #16
    4154:	f013 f894 	bl	17280 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    4158:	68fb      	ldr	r3, [r7, #12]
    415a:	2200      	movs	r2, #0
    415c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    4160:	687b      	ldr	r3, [r7, #4]
    4162:	2b13      	cmp	r3, #19
    4164:	d901      	bls.n	416a <prvInitialiseTCBVariables+0x2e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    4166:	2313      	movs	r3, #19
    4168:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
    416a:	68fb      	ldr	r3, [r7, #12]
    416c:	687a      	ldr	r2, [r7, #4]
    416e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    4170:	68fb      	ldr	r3, [r7, #12]
    4172:	687a      	ldr	r2, [r7, #4]
    4174:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    4176:	68fb      	ldr	r3, [r7, #12]
    4178:	3304      	adds	r3, #4
    417a:	4618      	mov	r0, r3
    417c:	f7fe fbe4 	bl	2948 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    4180:	68fb      	ldr	r3, [r7, #12]
    4182:	3318      	adds	r3, #24
    4184:	4618      	mov	r0, r3
    4186:	f7fe fbdf 	bl	2948 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    418a:	68fb      	ldr	r3, [r7, #12]
    418c:	68fa      	ldr	r2, [r7, #12]
    418e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    4190:	687b      	ldr	r3, [r7, #4]
    4192:	f1c3 0214 	rsb	r2, r3, #20
    4196:	68fb      	ldr	r3, [r7, #12]
    4198:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    419a:	68fb      	ldr	r3, [r7, #12]
    419c:	68fa      	ldr	r2, [r7, #12]
    419e:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    41a0:	3710      	adds	r7, #16
    41a2:	46bd      	mov	sp, r7
    41a4:	bd80      	pop	{r7, pc}
    41a6:	bf00      	nop

000041a8 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    41a8:	b580      	push	{r7, lr}
    41aa:	b082      	sub	sp, #8
    41ac:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    41ae:	2300      	movs	r3, #0
    41b0:	607b      	str	r3, [r7, #4]
    41b2:	e00f      	b.n	41d4 <prvInitialiseTaskLists+0x2c>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    41b4:	687a      	ldr	r2, [r7, #4]
    41b6:	4613      	mov	r3, r2
    41b8:	009b      	lsls	r3, r3, #2
    41ba:	4413      	add	r3, r2
    41bc:	009b      	lsls	r3, r3, #2
    41be:	f240 2258 	movw	r2, #600	; 0x258
    41c2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    41c6:	4413      	add	r3, r2
    41c8:	4618      	mov	r0, r3
    41ca:	f7fe fb9d 	bl	2908 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    41ce:	687b      	ldr	r3, [r7, #4]
    41d0:	3301      	adds	r3, #1
    41d2:	607b      	str	r3, [r7, #4]
    41d4:	687b      	ldr	r3, [r7, #4]
    41d6:	2b13      	cmp	r3, #19
    41d8:	d9ec      	bls.n	41b4 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    41da:	f240 30e8 	movw	r0, #1000	; 0x3e8
    41de:	f2c2 0000 	movt	r0, #8192	; 0x2000
    41e2:	f7fe fb91 	bl	2908 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    41e6:	f240 30fc 	movw	r0, #1020	; 0x3fc
    41ea:	f2c2 0000 	movt	r0, #8192	; 0x2000
    41ee:	f7fe fb8b 	bl	2908 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    41f2:	f240 4018 	movw	r0, #1048	; 0x418
    41f6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    41fa:	f7fe fb85 	bl	2908 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    41fe:	f240 402c 	movw	r0, #1068	; 0x42c
    4202:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4206:	f7fe fb7f 	bl	2908 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
    420a:	f240 4044 	movw	r0, #1092	; 0x444
    420e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4212:	f7fe fb79 	bl	2908 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    4216:	f240 4310 	movw	r3, #1040	; 0x410
    421a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    421e:	f240 32e8 	movw	r2, #1000	; 0x3e8
    4222:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4226:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    4228:	f240 4314 	movw	r3, #1044	; 0x414
    422c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4230:	f240 32fc 	movw	r2, #1020	; 0x3fc
    4234:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4238:	601a      	str	r2, [r3, #0]
}
    423a:	3708      	adds	r7, #8
    423c:	46bd      	mov	sp, r7
    423e:	bd80      	pop	{r7, pc}

00004240 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    4240:	b580      	push	{r7, lr}
    4242:	b082      	sub	sp, #8
    4244:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    4246:	f240 4340 	movw	r3, #1088	; 0x440
    424a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    424e:	681b      	ldr	r3, [r3, #0]
    4250:	2b00      	cmp	r3, #0
    4252:	d03a      	beq.n	42ca <prvCheckTasksWaitingTermination+0x8a>
		{
			vTaskSuspendAll();
    4254:	f7ff fc2a 	bl	3aac <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    4258:	f240 432c 	movw	r3, #1068	; 0x42c
    425c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4260:	681b      	ldr	r3, [r3, #0]
    4262:	2b00      	cmp	r3, #0
    4264:	bf14      	ite	ne
    4266:	2300      	movne	r3, #0
    4268:	2301      	moveq	r3, #1
    426a:	b2db      	uxtb	r3, r3
    426c:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
    426e:	f7ff fc2f 	bl	3ad0 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    4272:	687b      	ldr	r3, [r7, #4]
    4274:	2b00      	cmp	r3, #0
    4276:	d128      	bne.n	42ca <prvCheckTasksWaitingTermination+0x8a>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    4278:	f000 f9e4 	bl	4644 <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    427c:	f240 432c 	movw	r3, #1068	; 0x42c
    4280:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4284:	68db      	ldr	r3, [r3, #12]
    4286:	68db      	ldr	r3, [r3, #12]
    4288:	603b      	str	r3, [r7, #0]
					vListRemove( &( pxTCB->xGenericListItem ) );
    428a:	683b      	ldr	r3, [r7, #0]
    428c:	3304      	adds	r3, #4
    428e:	4618      	mov	r0, r3
    4290:	f7fe fbc6 	bl	2a20 <vListRemove>
					--uxCurrentNumberOfTasks;
    4294:	f240 4358 	movw	r3, #1112	; 0x458
    4298:	f2c2 0300 	movt	r3, #8192	; 0x2000
    429c:	681b      	ldr	r3, [r3, #0]
    429e:	1e5a      	subs	r2, r3, #1
    42a0:	f240 4358 	movw	r3, #1112	; 0x458
    42a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    42a8:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
    42aa:	f240 4340 	movw	r3, #1088	; 0x440
    42ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    42b2:	681b      	ldr	r3, [r3, #0]
    42b4:	1e5a      	subs	r2, r3, #1
    42b6:	f240 4340 	movw	r3, #1088	; 0x440
    42ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    42be:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
    42c0:	f000 f9d6 	bl	4670 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
    42c4:	6838      	ldr	r0, [r7, #0]
    42c6:	f000 f879 	bl	43bc <prvDeleteTCB>
			}
		}
	}
	#endif
}
    42ca:	3708      	adds	r7, #8
    42cc:	46bd      	mov	sp, r7
    42ce:	bd80      	pop	{r7, pc}

000042d0 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    42d0:	b580      	push	{r7, lr}
    42d2:	b082      	sub	sp, #8
    42d4:	af00      	add	r7, sp, #0
    42d6:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    42d8:	f240 2354 	movw	r3, #596	; 0x254
    42dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    42e0:	681b      	ldr	r3, [r3, #0]
    42e2:	687a      	ldr	r2, [r7, #4]
    42e4:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
    42e6:	f240 435c 	movw	r3, #1116	; 0x45c
    42ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    42ee:	681b      	ldr	r3, [r3, #0]
    42f0:	687a      	ldr	r2, [r7, #4]
    42f2:	429a      	cmp	r2, r3
    42f4:	d20f      	bcs.n	4316 <prvAddCurrentTaskToDelayedList+0x46>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    42f6:	f240 4314 	movw	r3, #1044	; 0x414
    42fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    42fe:	681a      	ldr	r2, [r3, #0]
    4300:	f240 2354 	movw	r3, #596	; 0x254
    4304:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4308:	681b      	ldr	r3, [r3, #0]
    430a:	3304      	adds	r3, #4
    430c:	4610      	mov	r0, r2
    430e:	4619      	mov	r1, r3
    4310:	f7fe fb4e 	bl	29b0 <vListInsert>
    4314:	e01c      	b.n	4350 <prvAddCurrentTaskToDelayedList+0x80>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4316:	f240 4310 	movw	r3, #1040	; 0x410
    431a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    431e:	681a      	ldr	r2, [r3, #0]
    4320:	f240 2354 	movw	r3, #596	; 0x254
    4324:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4328:	681b      	ldr	r3, [r3, #0]
    432a:	3304      	adds	r3, #4
    432c:	4610      	mov	r0, r2
    432e:	4619      	mov	r1, r3
    4330:	f7fe fb3e 	bl	29b0 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    4334:	f240 03f8 	movw	r3, #248	; 0xf8
    4338:	f2c2 0300 	movt	r3, #8192	; 0x2000
    433c:	681b      	ldr	r3, [r3, #0]
    433e:	687a      	ldr	r2, [r7, #4]
    4340:	429a      	cmp	r2, r3
    4342:	d205      	bcs.n	4350 <prvAddCurrentTaskToDelayedList+0x80>
		{
			xNextTaskUnblockTime = xTimeToWake;
    4344:	f240 03f8 	movw	r3, #248	; 0xf8
    4348:	f2c2 0300 	movt	r3, #8192	; 0x2000
    434c:	687a      	ldr	r2, [r7, #4]
    434e:	601a      	str	r2, [r3, #0]
		}
	}
}
    4350:	3708      	adds	r7, #8
    4352:	46bd      	mov	sp, r7
    4354:	bd80      	pop	{r7, pc}
    4356:	bf00      	nop

00004358 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    4358:	b580      	push	{r7, lr}
    435a:	b084      	sub	sp, #16
    435c:	af00      	add	r7, sp, #0
    435e:	4603      	mov	r3, r0
    4360:	6039      	str	r1, [r7, #0]
    4362:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    4364:	2048      	movs	r0, #72	; 0x48
    4366:	f000 f9ef 	bl	4748 <pvPortMalloc>
    436a:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
    436c:	68fb      	ldr	r3, [r7, #12]
    436e:	2b00      	cmp	r3, #0
    4370:	d01f      	beq.n	43b2 <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    4372:	683b      	ldr	r3, [r7, #0]
    4374:	2b00      	cmp	r3, #0
    4376:	d106      	bne.n	4386 <prvAllocateTCBAndStack+0x2e>
    4378:	88fb      	ldrh	r3, [r7, #6]
    437a:	009b      	lsls	r3, r3, #2
    437c:	4618      	mov	r0, r3
    437e:	f000 f9e3 	bl	4748 <pvPortMalloc>
    4382:	4603      	mov	r3, r0
    4384:	e000      	b.n	4388 <prvAllocateTCBAndStack+0x30>
    4386:	683b      	ldr	r3, [r7, #0]
    4388:	68fa      	ldr	r2, [r7, #12]
    438a:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
    438c:	68fb      	ldr	r3, [r7, #12]
    438e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4390:	2b00      	cmp	r3, #0
    4392:	d105      	bne.n	43a0 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    4394:	68f8      	ldr	r0, [r7, #12]
    4396:	f000 fa9b 	bl	48d0 <vPortFree>
			pxNewTCB = NULL;
    439a:	2300      	movs	r3, #0
    439c:	60fb      	str	r3, [r7, #12]
    439e:	e008      	b.n	43b2 <prvAllocateTCBAndStack+0x5a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    43a0:	68fb      	ldr	r3, [r7, #12]
    43a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    43a4:	88fb      	ldrh	r3, [r7, #6]
    43a6:	009b      	lsls	r3, r3, #2
    43a8:	4610      	mov	r0, r2
    43aa:	21a5      	movs	r1, #165	; 0xa5
    43ac:	461a      	mov	r2, r3
    43ae:	f012 ff17 	bl	171e0 <memset>
		}
	}

	return pxNewTCB;
    43b2:	68fb      	ldr	r3, [r7, #12]
}
    43b4:	4618      	mov	r0, r3
    43b6:	3710      	adds	r7, #16
    43b8:	46bd      	mov	sp, r7
    43ba:	bd80      	pop	{r7, pc}

000043bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
    43bc:	b580      	push	{r7, lr}
    43be:	b082      	sub	sp, #8
    43c0:	af00      	add	r7, sp, #0
    43c2:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    43c4:	687b      	ldr	r3, [r7, #4]
    43c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    43c8:	4618      	mov	r0, r3
    43ca:	f000 fa81 	bl	48d0 <vPortFree>
		vPortFree( pxTCB );
    43ce:	6878      	ldr	r0, [r7, #4]
    43d0:	f000 fa7e 	bl	48d0 <vPortFree>
	}
    43d4:	3708      	adds	r7, #8
    43d6:	46bd      	mov	sp, r7
    43d8:	bd80      	pop	{r7, pc}
    43da:	bf00      	nop

000043dc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
    43dc:	b480      	push	{r7}
    43de:	b083      	sub	sp, #12
    43e0:	af00      	add	r7, sp, #0
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    43e2:	f240 2354 	movw	r3, #596	; 0x254
    43e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    43ea:	681b      	ldr	r3, [r3, #0]
    43ec:	607b      	str	r3, [r7, #4]

		return xReturn;
    43ee:	687b      	ldr	r3, [r7, #4]
	}
    43f0:	4618      	mov	r0, r3
    43f2:	370c      	adds	r7, #12
    43f4:	46bd      	mov	sp, r7
    43f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    43fa:	4770      	bx	lr

000043fc <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    43fc:	b580      	push	{r7, lr}
    43fe:	b084      	sub	sp, #16
    4400:	af00      	add	r7, sp, #0
    4402:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    4404:	687b      	ldr	r3, [r7, #4]
    4406:	60fb      	str	r3, [r7, #12]

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    4408:	68fb      	ldr	r3, [r7, #12]
    440a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    440c:	f240 2354 	movw	r3, #596	; 0x254
    4410:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4414:	681b      	ldr	r3, [r3, #0]
    4416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4418:	429a      	cmp	r2, r3
    441a:	d24f      	bcs.n	44bc <vTaskPriorityInherit+0xc0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    441c:	f240 2354 	movw	r3, #596	; 0x254
    4420:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4424:	681b      	ldr	r3, [r3, #0]
    4426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4428:	f1c3 0214 	rsb	r2, r3, #20
    442c:	68fb      	ldr	r3, [r7, #12]
    442e:	619a      	str	r2, [r3, #24]

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    4430:	68fb      	ldr	r3, [r7, #12]
    4432:	6959      	ldr	r1, [r3, #20]
    4434:	68fb      	ldr	r3, [r7, #12]
    4436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4438:	4613      	mov	r3, r2
    443a:	009b      	lsls	r3, r3, #2
    443c:	4413      	add	r3, r2
    443e:	009b      	lsls	r3, r3, #2
    4440:	f240 2258 	movw	r2, #600	; 0x258
    4444:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4448:	4413      	add	r3, r2
    444a:	4299      	cmp	r1, r3
    444c:	d12e      	bne.n	44ac <vTaskPriorityInherit+0xb0>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
    444e:	68fb      	ldr	r3, [r7, #12]
    4450:	3304      	adds	r3, #4
    4452:	4618      	mov	r0, r3
    4454:	f7fe fae4 	bl	2a20 <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    4458:	f240 2354 	movw	r3, #596	; 0x254
    445c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4460:	681b      	ldr	r3, [r3, #0]
    4462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4464:	68fb      	ldr	r3, [r7, #12]
    4466:	62da      	str	r2, [r3, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
    4468:	68fb      	ldr	r3, [r7, #12]
    446a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    446c:	f240 4364 	movw	r3, #1124	; 0x464
    4470:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4474:	681b      	ldr	r3, [r3, #0]
    4476:	429a      	cmp	r2, r3
    4478:	d906      	bls.n	4488 <vTaskPriorityInherit+0x8c>
    447a:	68fb      	ldr	r3, [r7, #12]
    447c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    447e:	f240 4364 	movw	r3, #1124	; 0x464
    4482:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4486:	601a      	str	r2, [r3, #0]
    4488:	68fb      	ldr	r3, [r7, #12]
    448a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    448c:	4613      	mov	r3, r2
    448e:	009b      	lsls	r3, r3, #2
    4490:	4413      	add	r3, r2
    4492:	009b      	lsls	r3, r3, #2
    4494:	f240 2258 	movw	r2, #600	; 0x258
    4498:	f2c2 0200 	movt	r2, #8192	; 0x2000
    449c:	441a      	add	r2, r3
    449e:	68fb      	ldr	r3, [r7, #12]
    44a0:	3304      	adds	r3, #4
    44a2:	4610      	mov	r0, r2
    44a4:	4619      	mov	r1, r3
    44a6:	f7fe fa5b 	bl	2960 <vListInsertEnd>
    44aa:	e007      	b.n	44bc <vTaskPriorityInherit+0xc0>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    44ac:	f240 2354 	movw	r3, #596	; 0x254
    44b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    44b4:	681b      	ldr	r3, [r3, #0]
    44b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    44b8:	68fb      	ldr	r3, [r7, #12]
    44ba:	62da      	str	r2, [r3, #44]	; 0x2c
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
    44bc:	3710      	adds	r7, #16
    44be:	46bd      	mov	sp, r7
    44c0:	bd80      	pop	{r7, pc}
    44c2:	bf00      	nop

000044c4 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    44c4:	b580      	push	{r7, lr}
    44c6:	b084      	sub	sp, #16
    44c8:	af00      	add	r7, sp, #0
    44ca:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    44cc:	687b      	ldr	r3, [r7, #4]
    44ce:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    44d0:	687b      	ldr	r3, [r7, #4]
    44d2:	2b00      	cmp	r3, #0
    44d4:	d035      	beq.n	4542 <vTaskPriorityDisinherit+0x7e>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    44d6:	68fb      	ldr	r3, [r7, #12]
    44d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    44da:	68fb      	ldr	r3, [r7, #12]
    44dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    44de:	429a      	cmp	r2, r3
    44e0:	d02f      	beq.n	4542 <vTaskPriorityDisinherit+0x7e>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
    44e2:	68fb      	ldr	r3, [r7, #12]
    44e4:	3304      	adds	r3, #4
    44e6:	4618      	mov	r0, r3
    44e8:	f7fe fa9a 	bl	2a20 <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    44ec:	68fb      	ldr	r3, [r7, #12]
    44ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    44f0:	68fb      	ldr	r3, [r7, #12]
    44f2:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    44f4:	68fb      	ldr	r3, [r7, #12]
    44f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    44f8:	f1c3 0214 	rsb	r2, r3, #20
    44fc:	68fb      	ldr	r3, [r7, #12]
    44fe:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
    4500:	68fb      	ldr	r3, [r7, #12]
    4502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4504:	f240 4364 	movw	r3, #1124	; 0x464
    4508:	f2c2 0300 	movt	r3, #8192	; 0x2000
    450c:	681b      	ldr	r3, [r3, #0]
    450e:	429a      	cmp	r2, r3
    4510:	d906      	bls.n	4520 <vTaskPriorityDisinherit+0x5c>
    4512:	68fb      	ldr	r3, [r7, #12]
    4514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4516:	f240 4364 	movw	r3, #1124	; 0x464
    451a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    451e:	601a      	str	r2, [r3, #0]
    4520:	68fb      	ldr	r3, [r7, #12]
    4522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4524:	4613      	mov	r3, r2
    4526:	009b      	lsls	r3, r3, #2
    4528:	4413      	add	r3, r2
    452a:	009b      	lsls	r3, r3, #2
    452c:	f240 2258 	movw	r2, #600	; 0x258
    4530:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4534:	441a      	add	r2, r3
    4536:	68fb      	ldr	r3, [r7, #12]
    4538:	3304      	adds	r3, #4
    453a:	4610      	mov	r0, r2
    453c:	4619      	mov	r1, r3
    453e:	f7fe fa0f 	bl	2960 <vListInsertEnd>
			}
		}
	}
    4542:	3710      	adds	r7, #16
    4544:	46bd      	mov	sp, r7
    4546:	bd80      	pop	{r7, pc}

00004548 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    4548:	b480      	push	{r7}
    454a:	b085      	sub	sp, #20
    454c:	af00      	add	r7, sp, #0
    454e:	60f8      	str	r0, [r7, #12]
    4550:	60b9      	str	r1, [r7, #8]
    4552:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    4554:	68fb      	ldr	r3, [r7, #12]
    4556:	3b04      	subs	r3, #4
    4558:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    455a:	68fb      	ldr	r3, [r7, #12]
    455c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    4560:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    4562:	68fb      	ldr	r3, [r7, #12]
    4564:	3b04      	subs	r3, #4
    4566:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
    4568:	68ba      	ldr	r2, [r7, #8]
    456a:	68fb      	ldr	r3, [r7, #12]
    456c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    456e:	68fb      	ldr	r3, [r7, #12]
    4570:	3b04      	subs	r3, #4
    4572:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
    4574:	68fb      	ldr	r3, [r7, #12]
    4576:	2200      	movs	r2, #0
    4578:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    457a:	68fb      	ldr	r3, [r7, #12]
    457c:	3b14      	subs	r3, #20
    457e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
    4580:	687a      	ldr	r2, [r7, #4]
    4582:	68fb      	ldr	r3, [r7, #12]
    4584:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
    4586:	68fb      	ldr	r3, [r7, #12]
    4588:	3b20      	subs	r3, #32
    458a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    458c:	68fb      	ldr	r3, [r7, #12]
}
    458e:	4618      	mov	r0, r3
    4590:	3714      	adds	r7, #20
    4592:	46bd      	mov	sp, r7
    4594:	f85d 7b04 	ldr.w	r7, [sp], #4
    4598:	4770      	bx	lr
    459a:	bf00      	nop

0000459c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    459c:	4b06      	ldr	r3, [pc, #24]	; (45b8 <pxCurrentTCBConst2>)
    459e:	6819      	ldr	r1, [r3, #0]
    45a0:	6808      	ldr	r0, [r1, #0]
    45a2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    45a6:	f380 8809 	msr	PSP, r0
    45aa:	f04f 0000 	mov.w	r0, #0
    45ae:	f380 8811 	msr	BASEPRI, r0
    45b2:	f04e 0e0d 	orr.w	lr, lr, #13
    45b6:	4770      	bx	lr

000045b8 <pxCurrentTCBConst2>:
    45b8:	20000254 	.word	0x20000254

000045bc <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
    45bc:	4861      	ldr	r0, [pc, #388]	; (4744 <prvSetupTimerInterrupt+0x2c>)
    45be:	6800      	ldr	r0, [r0, #0]
    45c0:	6800      	ldr	r0, [r0, #0]
    45c2:	f380 8808 	msr	MSP, r0
    45c6:	b662      	cpsie	i
    45c8:	df00      	svc	0
    45ca:	bf00      	nop

000045cc <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
    45cc:	b580      	push	{r7, lr}
    45ce:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    45d0:	f64e 5320 	movw	r3, #60704	; 0xed20
    45d4:	f2ce 0300 	movt	r3, #57344	; 0xe000
    45d8:	f64e 5220 	movw	r2, #60704	; 0xed20
    45dc:	f2ce 0200 	movt	r2, #57344	; 0xe000
    45e0:	6812      	ldr	r2, [r2, #0]
    45e2:	f442 02fe 	orr.w	r2, r2, #8323072	; 0x7f0000
    45e6:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    45e8:	f64e 5320 	movw	r3, #60704	; 0xed20
    45ec:	f2ce 0300 	movt	r3, #57344	; 0xe000
    45f0:	f64e 5220 	movw	r2, #60704	; 0xed20
    45f4:	f2ce 0200 	movt	r2, #57344	; 0xe000
    45f8:	6812      	ldr	r2, [r2, #0]
    45fa:	f042 42fe 	orr.w	r2, r2, #2130706432	; 0x7f000000
    45fe:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    4600:	f000 f88a 	bl	4718 <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    4604:	f240 03fc 	movw	r3, #252	; 0xfc
    4608:	f2c2 0300 	movt	r3, #8192	; 0x2000
    460c:	2200      	movs	r2, #0
    460e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
    4610:	f7ff ffd4 	bl	45bc <prvPortStartFirstTask>

	/* Should not get here! */
	return 0;
    4614:	2300      	movs	r3, #0
}
    4616:	4618      	mov	r0, r3
    4618:	bd80      	pop	{r7, pc}
    461a:	bf00      	nop

0000461c <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    461c:	b480      	push	{r7}
    461e:	af00      	add	r7, sp, #0
	/* It is unlikely that the CM3 port will require this function as there
	is nothing to return to.  */
}
    4620:	46bd      	mov	sp, r7
    4622:	f85d 7b04 	ldr.w	r7, [sp], #4
    4626:	4770      	bx	lr

00004628 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
    4628:	b480      	push	{r7}
    462a:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    462c:	f64e 5304 	movw	r3, #60676	; 0xed04
    4630:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4634:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4638:	601a      	str	r2, [r3, #0]
}
    463a:	46bd      	mov	sp, r7
    463c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4640:	4770      	bx	lr
    4642:	bf00      	nop

00004644 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    4644:	b480      	push	{r7}
    4646:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
    4648:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    464c:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
    4650:	f240 03fc 	movw	r3, #252	; 0xfc
    4654:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4658:	681b      	ldr	r3, [r3, #0]
    465a:	1c5a      	adds	r2, r3, #1
    465c:	f240 03fc 	movw	r3, #252	; 0xfc
    4660:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4664:	601a      	str	r2, [r3, #0]
}
    4666:	46bd      	mov	sp, r7
    4668:	f85d 7b04 	ldr.w	r7, [sp], #4
    466c:	4770      	bx	lr
    466e:	bf00      	nop

00004670 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    4670:	b480      	push	{r7}
    4672:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
    4674:	f240 03fc 	movw	r3, #252	; 0xfc
    4678:	f2c2 0300 	movt	r3, #8192	; 0x2000
    467c:	681b      	ldr	r3, [r3, #0]
    467e:	1e5a      	subs	r2, r3, #1
    4680:	f240 03fc 	movw	r3, #252	; 0xfc
    4684:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4688:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
    468a:	f240 03fc 	movw	r3, #252	; 0xfc
    468e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4692:	681b      	ldr	r3, [r3, #0]
    4694:	2b00      	cmp	r3, #0
    4696:	d103      	bne.n	46a0 <vPortExitCritical+0x30>
	{
		portENABLE_INTERRUPTS();
    4698:	f04f 0000 	mov.w	r0, #0
    469c:	f380 8811 	msr	BASEPRI, r0
	}
}
    46a0:	46bd      	mov	sp, r7
    46a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    46a6:	4770      	bx	lr

000046a8 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    46a8:	f3ef 8009 	mrs	r0, PSP
    46ac:	4b0c      	ldr	r3, [pc, #48]	; (46e0 <pxCurrentTCBConst>)
    46ae:	681a      	ldr	r2, [r3, #0]
    46b0:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    46b4:	6010      	str	r0, [r2, #0]
    46b6:	e92d 4008 	stmdb	sp!, {r3, lr}
    46ba:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    46be:	f380 8811 	msr	BASEPRI, r0
    46c2:	f7ff fbcd 	bl	3e60 <vTaskSwitchContext>
    46c6:	f04f 0000 	mov.w	r0, #0
    46ca:	f380 8811 	msr	BASEPRI, r0
    46ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    46d2:	6819      	ldr	r1, [r3, #0]
    46d4:	6808      	ldr	r0, [r1, #0]
    46d6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    46da:	f380 8809 	msr	PSP, r0
    46de:	4770      	bx	lr

000046e0 <pxCurrentTCBConst>:
    46e0:	20000254 	.word	0x20000254

000046e4 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    46e4:	b580      	push	{r7, lr}
    46e6:	b082      	sub	sp, #8
    46e8:	af00      	add	r7, sp, #0
unsigned long ulDummy;

	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    46ea:	f64e 5304 	movw	r3, #60676	; 0xed04
    46ee:	f2ce 0300 	movt	r3, #57344	; 0xe000
    46f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    46f6:	601a      	str	r2, [r3, #0]
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
    46f8:	2300      	movs	r3, #0
    46fa:	607b      	str	r3, [r7, #4]
    46fc:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4700:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
    4704:	f7ff face 	bl	3ca4 <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
    4708:	f04f 0000 	mov.w	r0, #0
    470c:	f380 8811 	msr	BASEPRI, r0
}
    4710:	3708      	adds	r7, #8
    4712:	46bd      	mov	sp, r7
    4714:	bd80      	pop	{r7, pc}
    4716:	bf00      	nop

00004718 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    4718:	b480      	push	{r7}
    471a:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    471c:	f24e 0314 	movw	r3, #57364	; 0xe014
    4720:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4724:	f641 123f 	movw	r2, #6463	; 0x193f
    4728:	f2c0 0201 	movt	r2, #1
    472c:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    472e:	f24e 0310 	movw	r3, #57360	; 0xe010
    4732:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4736:	2207      	movs	r2, #7
    4738:	601a      	str	r2, [r3, #0]
}
    473a:	46bd      	mov	sp, r7
    473c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4740:	4770      	bx	lr
    4742:	0000      	.short	0x0000
    4744:	e000ed08 	.word	0xe000ed08

00004748 <pvPortMalloc>:
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;										\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    4748:	b580      	push	{r7, lr}
    474a:	b08a      	sub	sp, #40	; 0x28
    474c:	af00      	add	r7, sp, #0
    474e:	6078      	str	r0, [r7, #4]
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
    4750:	2300      	movs	r3, #0
    4752:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
    4754:	f7ff f9aa 	bl	3aac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    4758:	f24a 4390 	movw	r3, #42128	; 0xa490
    475c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4760:	681b      	ldr	r3, [r3, #0]
    4762:	2b00      	cmp	r3, #0
    4764:	d130      	bne.n	47c8 <pvPortMalloc+0x80>
		{
			prvHeapInit();
    4766:	f24a 4380 	movw	r3, #42112	; 0xa480
    476a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    476e:	f240 4280 	movw	r2, #1152	; 0x480
    4772:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4776:	601a      	str	r2, [r3, #0]
    4778:	f24a 4380 	movw	r3, #42112	; 0xa480
    477c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4780:	2200      	movs	r2, #0
    4782:	605a      	str	r2, [r3, #4]
    4784:	f24a 4388 	movw	r3, #42120	; 0xa488
    4788:	f2c2 0300 	movt	r3, #8192	; 0x2000
    478c:	f44f 4220 	mov.w	r2, #40960	; 0xa000
    4790:	605a      	str	r2, [r3, #4]
    4792:	f24a 4388 	movw	r3, #42120	; 0xa488
    4796:	f2c2 0300 	movt	r3, #8192	; 0x2000
    479a:	2200      	movs	r2, #0
    479c:	601a      	str	r2, [r3, #0]
    479e:	f240 4380 	movw	r3, #1152	; 0x480
    47a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    47a6:	617b      	str	r3, [r7, #20]
    47a8:	697b      	ldr	r3, [r7, #20]
    47aa:	f44f 4220 	mov.w	r2, #40960	; 0xa000
    47ae:	605a      	str	r2, [r3, #4]
    47b0:	697a      	ldr	r2, [r7, #20]
    47b2:	f24a 4388 	movw	r3, #42120	; 0xa488
    47b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    47ba:	6013      	str	r3, [r2, #0]
			xHeapHasBeenInitialised = pdTRUE;
    47bc:	f24a 4390 	movw	r3, #42128	; 0xa490
    47c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    47c4:	2201      	movs	r2, #1
    47c6:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    47c8:	687b      	ldr	r3, [r7, #4]
    47ca:	2b00      	cmp	r3, #0
    47cc:	d00d      	beq.n	47ea <pvPortMalloc+0xa2>
		{
			xWantedSize += heapSTRUCT_SIZE;
    47ce:	2310      	movs	r3, #16
    47d0:	687a      	ldr	r2, [r7, #4]
    47d2:	4413      	add	r3, r2
    47d4:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    47d6:	687b      	ldr	r3, [r7, #4]
    47d8:	f003 0307 	and.w	r3, r3, #7
    47dc:	2b00      	cmp	r3, #0
    47de:	d004      	beq.n	47ea <pvPortMalloc+0xa2>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    47e0:	687b      	ldr	r3, [r7, #4]
    47e2:	f023 0307 	bic.w	r3, r3, #7
    47e6:	3308      	adds	r3, #8
    47e8:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
    47ea:	687b      	ldr	r3, [r7, #4]
    47ec:	2b00      	cmp	r3, #0
    47ee:	d068      	beq.n	48c2 <pvPortMalloc+0x17a>
    47f0:	687b      	ldr	r3, [r7, #4]
    47f2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
    47f6:	d264      	bcs.n	48c2 <pvPortMalloc+0x17a>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
    47f8:	f24a 4380 	movw	r3, #42112	; 0xa480
    47fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4800:	623b      	str	r3, [r7, #32]
			pxBlock = xStart.pxNextFreeBlock;
    4802:	f24a 4380 	movw	r3, #42112	; 0xa480
    4806:	f2c2 0300 	movt	r3, #8192	; 0x2000
    480a:	681b      	ldr	r3, [r3, #0]
    480c:	627b      	str	r3, [r7, #36]	; 0x24
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    480e:	e004      	b.n	481a <pvPortMalloc+0xd2>
			{
				pxPreviousBlock = pxBlock;
    4810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4812:	623b      	str	r3, [r7, #32]
				pxBlock = pxBlock->pxNextFreeBlock;
    4814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4816:	681b      	ldr	r3, [r3, #0]
    4818:	627b      	str	r3, [r7, #36]	; 0x24
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    481a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    481c:	685a      	ldr	r2, [r3, #4]
    481e:	687b      	ldr	r3, [r7, #4]
    4820:	429a      	cmp	r2, r3
    4822:	d203      	bcs.n	482c <pvPortMalloc+0xe4>
    4824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4826:	681b      	ldr	r3, [r3, #0]
    4828:	2b00      	cmp	r3, #0
    482a:	d1f1      	bne.n	4810 <pvPortMalloc+0xc8>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
    482c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    482e:	f24a 4388 	movw	r3, #42120	; 0xa488
    4832:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4836:	429a      	cmp	r2, r3
    4838:	d043      	beq.n	48c2 <pvPortMalloc+0x17a>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    483a:	6a3b      	ldr	r3, [r7, #32]
    483c:	681a      	ldr	r2, [r3, #0]
    483e:	2310      	movs	r3, #16
    4840:	4413      	add	r3, r2
    4842:	61fb      	str	r3, [r7, #28]

				/* This block is being returned for use so must be taken our of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    4844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4846:	681a      	ldr	r2, [r3, #0]
    4848:	6a3b      	ldr	r3, [r7, #32]
    484a:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    484c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    484e:	685a      	ldr	r2, [r3, #4]
    4850:	687b      	ldr	r3, [r7, #4]
    4852:	1ad2      	subs	r2, r2, r3
    4854:	2310      	movs	r3, #16
    4856:	005b      	lsls	r3, r3, #1
    4858:	429a      	cmp	r2, r3
    485a:	d925      	bls.n	48a8 <pvPortMalloc+0x160>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
    485c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    485e:	687b      	ldr	r3, [r7, #4]
    4860:	4413      	add	r3, r2
    4862:	613b      	str	r3, [r7, #16]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    4864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4866:	685a      	ldr	r2, [r3, #4]
    4868:	687b      	ldr	r3, [r7, #4]
    486a:	1ad2      	subs	r2, r2, r3
    486c:	693b      	ldr	r3, [r7, #16]
    486e:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
    4870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4872:	687a      	ldr	r2, [r7, #4]
    4874:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    4876:	693b      	ldr	r3, [r7, #16]
    4878:	685b      	ldr	r3, [r3, #4]
    487a:	60fb      	str	r3, [r7, #12]
    487c:	f24a 4380 	movw	r3, #42112	; 0xa480
    4880:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4884:	61bb      	str	r3, [r7, #24]
    4886:	e002      	b.n	488e <pvPortMalloc+0x146>
    4888:	69bb      	ldr	r3, [r7, #24]
    488a:	681b      	ldr	r3, [r3, #0]
    488c:	61bb      	str	r3, [r7, #24]
    488e:	69bb      	ldr	r3, [r7, #24]
    4890:	681b      	ldr	r3, [r3, #0]
    4892:	685a      	ldr	r2, [r3, #4]
    4894:	68fb      	ldr	r3, [r7, #12]
    4896:	429a      	cmp	r2, r3
    4898:	d3f6      	bcc.n	4888 <pvPortMalloc+0x140>
    489a:	69bb      	ldr	r3, [r7, #24]
    489c:	681a      	ldr	r2, [r3, #0]
    489e:	693b      	ldr	r3, [r7, #16]
    48a0:	601a      	str	r2, [r3, #0]
    48a2:	69bb      	ldr	r3, [r7, #24]
    48a4:	693a      	ldr	r2, [r7, #16]
    48a6:	601a      	str	r2, [r3, #0]
				}
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
    48a8:	f240 1300 	movw	r3, #256	; 0x100
    48ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    48b0:	681a      	ldr	r2, [r3, #0]
    48b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    48b4:	685b      	ldr	r3, [r3, #4]
    48b6:	1ad2      	subs	r2, r2, r3
    48b8:	f240 1300 	movw	r3, #256	; 0x100
    48bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    48c0:	601a      	str	r2, [r3, #0]
			}
		}
	}
	xTaskResumeAll();
    48c2:	f7ff f905 	bl	3ad0 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    48c6:	69fb      	ldr	r3, [r7, #28]
}
    48c8:	4618      	mov	r0, r3
    48ca:	3728      	adds	r7, #40	; 0x28
    48cc:	46bd      	mov	sp, r7
    48ce:	bd80      	pop	{r7, pc}

000048d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    48d0:	b580      	push	{r7, lr}
    48d2:	b086      	sub	sp, #24
    48d4:	af00      	add	r7, sp, #0
    48d6:	6078      	str	r0, [r7, #4]
unsigned char *puc = ( unsigned char * ) pv;
    48d8:	687b      	ldr	r3, [r7, #4]
    48da:	613b      	str	r3, [r7, #16]
xBlockLink *pxLink;

	if( pv )
    48dc:	687b      	ldr	r3, [r7, #4]
    48de:	2b00      	cmp	r3, #0
    48e0:	d030      	beq.n	4944 <vPortFree+0x74>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
    48e2:	2310      	movs	r3, #16
    48e4:	425b      	negs	r3, r3
    48e6:	693a      	ldr	r2, [r7, #16]
    48e8:	4413      	add	r3, r2
    48ea:	613b      	str	r3, [r7, #16]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
    48ec:	693b      	ldr	r3, [r7, #16]
    48ee:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
    48f0:	f7ff f8dc 	bl	3aac <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
    48f4:	68fb      	ldr	r3, [r7, #12]
    48f6:	685b      	ldr	r3, [r3, #4]
    48f8:	60bb      	str	r3, [r7, #8]
    48fa:	f24a 4380 	movw	r3, #42112	; 0xa480
    48fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4902:	617b      	str	r3, [r7, #20]
    4904:	e002      	b.n	490c <vPortFree+0x3c>
    4906:	697b      	ldr	r3, [r7, #20]
    4908:	681b      	ldr	r3, [r3, #0]
    490a:	617b      	str	r3, [r7, #20]
    490c:	697b      	ldr	r3, [r7, #20]
    490e:	681b      	ldr	r3, [r3, #0]
    4910:	685a      	ldr	r2, [r3, #4]
    4912:	68bb      	ldr	r3, [r7, #8]
    4914:	429a      	cmp	r2, r3
    4916:	d3f6      	bcc.n	4906 <vPortFree+0x36>
    4918:	697b      	ldr	r3, [r7, #20]
    491a:	681a      	ldr	r2, [r3, #0]
    491c:	68fb      	ldr	r3, [r7, #12]
    491e:	601a      	str	r2, [r3, #0]
    4920:	697b      	ldr	r3, [r7, #20]
    4922:	68fa      	ldr	r2, [r7, #12]
    4924:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
    4926:	68fb      	ldr	r3, [r7, #12]
    4928:	685a      	ldr	r2, [r3, #4]
    492a:	f240 1300 	movw	r3, #256	; 0x100
    492e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4932:	681b      	ldr	r3, [r3, #0]
    4934:	441a      	add	r2, r3
    4936:	f240 1300 	movw	r3, #256	; 0x100
    493a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    493e:	601a      	str	r2, [r3, #0]
		}
		xTaskResumeAll();
    4940:	f7ff f8c6 	bl	3ad0 <xTaskResumeAll>
	}
}
    4944:	3718      	adds	r7, #24
    4946:	46bd      	mov	sp, r7
    4948:	bd80      	pop	{r7, pc}
    494a:	bf00      	nop

0000494c <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    494c:	b480      	push	{r7}
    494e:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
    4950:	f240 1300 	movw	r3, #256	; 0x100
    4954:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4958:	681b      	ldr	r3, [r3, #0]
}
    495a:	4618      	mov	r0, r3
    495c:	46bd      	mov	sp, r7
    495e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4962:	4770      	bx	lr

00004964 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    4964:	b480      	push	{r7}
    4966:	af00      	add	r7, sp, #0
	/* This just exists to keep the linker quiet. */
}
    4968:	46bd      	mov	sp, r7
    496a:	f85d 7b04 	ldr.w	r7, [sp], #4
    496e:	4770      	bx	lr

00004970 <ground_calibrate>:
 * set to auto1 before MAX_DELAY_FOR_CALIBRATION secondes */
/**User must put verticaly the uav (nose bottom) and push
 * radio roll stick to get new calibration
 * If not, the default calibration is used.
 */
inline void ground_calibrate( void ) {
    4970:	b580      	push	{r7, lr}
    4972:	af00      	add	r7, sp, #0
    break;
  case CALIB_DONE:
    break;
  }
#else*/
if(calib_status == NO_CALIB)
    4974:	f24a 43b2 	movw	r3, #42162	; 0xa4b2
    4978:	f2c2 0300 	movt	r3, #8192	; 0x2000
    497c:	781b      	ldrb	r3, [r3, #0]
    497e:	2b00      	cmp	r3, #0
    4980:	f040 815d 	bne.w	4c3e <ground_calibrate+0x2ce>
{
    if (cputime < MAX_DELAY_FOR_CALIBRATION && pprz_mode == PPRZ_MODE_AUTO1 ) {
    4984:	f24a 439a 	movw	r3, #42138	; 0xa49a
    4988:	f2c2 0300 	movt	r3, #8192	; 0x2000
    498c:	881b      	ldrh	r3, [r3, #0]
    498e:	2b09      	cmp	r3, #9
    4990:	f201 8145 	bhi.w	5c1e <ground_calibrate+0x12ae>
    4994:	f24a 439c 	movw	r3, #42140	; 0xa49c
    4998:	f2c2 0300 	movt	r3, #8192	; 0x2000
    499c:	781b      	ldrb	r3, [r3, #0]
    499e:	2b01      	cmp	r3, #1
    49a0:	f041 813d 	bne.w	5c1e <ground_calibrate+0x12ae>
      calib_status = WAITING_CALIB_CONTRAST;
    49a4:	f24a 43b2 	movw	r3, #42162	; 0xa4b2
    49a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49ac:	2201      	movs	r2, #1
    49ae:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_CALIB_START();
    49b0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    49b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49b8:	781a      	ldrb	r2, [r3, #0]
    49ba:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    49be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49c2:	781b      	ldrb	r3, [r3, #0]
    49c4:	b2db      	uxtb	r3, r3
    49c6:	429a      	cmp	r2, r3
    49c8:	d313      	bcc.n	49f2 <ground_calibrate+0x82>
    49ca:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    49ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49d2:	781b      	ldrb	r3, [r3, #0]
    49d4:	b2db      	uxtb	r3, r3
    49d6:	461a      	mov	r2, r3
    49d8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    49dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49e0:	781b      	ldrb	r3, [r3, #0]
    49e2:	1ad3      	subs	r3, r2, r3
    49e4:	33ff      	adds	r3, #255	; 0xff
    49e6:	2b04      	cmp	r3, #4
    49e8:	bfd4      	ite	le
    49ea:	2300      	movle	r3, #0
    49ec:	2301      	movgt	r3, #1
    49ee:	b2db      	uxtb	r3, r3
    49f0:	e011      	b.n	4a16 <ground_calibrate+0xa6>
    49f2:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    49f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49fa:	781b      	ldrb	r3, [r3, #0]
    49fc:	b2db      	uxtb	r3, r3
    49fe:	461a      	mov	r2, r3
    4a00:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4a04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a08:	781b      	ldrb	r3, [r3, #0]
    4a0a:	1ad3      	subs	r3, r2, r3
    4a0c:	2b04      	cmp	r3, #4
    4a0e:	bfd4      	ite	le
    4a10:	2300      	movle	r3, #0
    4a12:	2301      	movgt	r3, #1
    4a14:	b2db      	uxtb	r3, r3
    4a16:	2b00      	cmp	r3, #0
    4a18:	f000 8103 	beq.w	4c22 <ground_calibrate+0x2b2>
    4a1c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4a20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a24:	781b      	ldrb	r3, [r3, #0]
    4a26:	461a      	mov	r2, r3
    4a28:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    4a2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a30:	2105      	movs	r1, #5
    4a32:	5499      	strb	r1, [r3, r2]
    4a34:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4a38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a3c:	781b      	ldrb	r3, [r3, #0]
    4a3e:	3301      	adds	r3, #1
    4a40:	b2da      	uxtb	r2, r3
    4a42:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4a46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a4a:	701a      	strb	r2, [r3, #0]
    4a4c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4a50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a54:	781b      	ldrb	r3, [r3, #0]
    4a56:	2bff      	cmp	r3, #255	; 0xff
    4a58:	d105      	bne.n	4a66 <ground_calibrate+0xf6>
    4a5a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4a5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a62:	2200      	movs	r2, #0
    4a64:	701a      	strb	r2, [r3, #0]
    4a66:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4a6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a6e:	781b      	ldrb	r3, [r3, #0]
    4a70:	461a      	mov	r2, r3
    4a72:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    4a76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a7a:	2102      	movs	r1, #2
    4a7c:	5499      	strb	r1, [r3, r2]
    4a7e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4a82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a86:	781b      	ldrb	r3, [r3, #0]
    4a88:	3301      	adds	r3, #1
    4a8a:	b2da      	uxtb	r2, r3
    4a8c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4a90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a94:	701a      	strb	r2, [r3, #0]
    4a96:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4a9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a9e:	781b      	ldrb	r3, [r3, #0]
    4aa0:	2bff      	cmp	r3, #255	; 0xff
    4aa2:	d105      	bne.n	4ab0 <ground_calibrate+0x140>
    4aa4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4aa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4aac:	2200      	movs	r2, #0
    4aae:	701a      	strb	r2, [r3, #0]
    4ab0:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    4ab4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ab8:	2202      	movs	r2, #2
    4aba:	701a      	strb	r2, [r3, #0]
    4abc:	f24a 53be 	movw	r3, #42430	; 0xa5be
    4ac0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ac4:	2202      	movs	r2, #2
    4ac6:	701a      	strb	r2, [r3, #0]
    4ac8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4acc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ad0:	781b      	ldrb	r3, [r3, #0]
    4ad2:	461a      	mov	r2, r3
    4ad4:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    4ad8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4adc:	7819      	ldrb	r1, [r3, #0]
    4ade:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    4ae2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ae6:	5499      	strb	r1, [r3, r2]
    4ae8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4aec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4af0:	781b      	ldrb	r3, [r3, #0]
    4af2:	3301      	adds	r3, #1
    4af4:	b2da      	uxtb	r2, r3
    4af6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4afa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4afe:	701a      	strb	r2, [r3, #0]
    4b00:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4b04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b08:	781b      	ldrb	r3, [r3, #0]
    4b0a:	2bff      	cmp	r3, #255	; 0xff
    4b0c:	d105      	bne.n	4b1a <ground_calibrate+0x1aa>
    4b0e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4b12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b16:	2200      	movs	r2, #0
    4b18:	701a      	strb	r2, [r3, #0]
    4b1a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4b1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b22:	781b      	ldrb	r3, [r3, #0]
    4b24:	461a      	mov	r2, r3
    4b26:	f24a 53be 	movw	r3, #42430	; 0xa5be
    4b2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b2e:	7819      	ldrb	r1, [r3, #0]
    4b30:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    4b34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b38:	5499      	strb	r1, [r3, r2]
    4b3a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4b3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b42:	781b      	ldrb	r3, [r3, #0]
    4b44:	3301      	adds	r3, #1
    4b46:	b2da      	uxtb	r2, r3
    4b48:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4b4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b50:	701a      	strb	r2, [r3, #0]
    4b52:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4b56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b5a:	781b      	ldrb	r3, [r3, #0]
    4b5c:	2bff      	cmp	r3, #255	; 0xff
    4b5e:	d105      	bne.n	4b6c <ground_calibrate+0x1fc>
    4b60:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4b64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b68:	2200      	movs	r2, #0
    4b6a:	701a      	strb	r2, [r3, #0]
    4b6c:	f242 0339 	movw	r3, #8249	; 0x2039
    4b70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b74:	781b      	ldrb	r3, [r3, #0]
    4b76:	b2db      	uxtb	r3, r3
    4b78:	f003 0310 	and.w	r3, r3, #16
    4b7c:	2b00      	cmp	r3, #0
    4b7e:	f041 804e 	bne.w	5c1e <ground_calibrate+0x12ae>
    4b82:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    4b86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b8a:	781b      	ldrb	r3, [r3, #0]
    4b8c:	b2db      	uxtb	r3, r3
    4b8e:	461a      	mov	r2, r3
    4b90:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    4b94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b98:	5c9a      	ldrb	r2, [r3, r2]
    4b9a:	f24a 53bb 	movw	r3, #42427	; 0xa5bb
    4b9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ba2:	701a      	strb	r2, [r3, #0]
    4ba4:	f24a 53bc 	movw	r3, #42428	; 0xa5bc
    4ba8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bac:	2200      	movs	r2, #0
    4bae:	701a      	strb	r2, [r3, #0]
    4bb0:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    4bb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bb8:	781b      	ldrb	r3, [r3, #0]
    4bba:	b2db      	uxtb	r3, r3
    4bbc:	3301      	adds	r3, #1
    4bbe:	b2da      	uxtb	r2, r3
    4bc0:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    4bc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bc8:	701a      	strb	r2, [r3, #0]
    4bca:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    4bce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bd2:	781b      	ldrb	r3, [r3, #0]
    4bd4:	b2db      	uxtb	r3, r3
    4bd6:	2bff      	cmp	r3, #255	; 0xff
    4bd8:	d105      	bne.n	4be6 <ground_calibrate+0x276>
    4bda:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    4bde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4be2:	2200      	movs	r2, #0
    4be4:	701a      	strb	r2, [r3, #0]
    4be6:	f242 0338 	movw	r3, #8248	; 0x2038
    4bea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bee:	f242 0238 	movw	r2, #8248	; 0x2038
    4bf2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4bf6:	7812      	ldrb	r2, [r2, #0]
    4bf8:	b2d2      	uxtb	r2, r2
    4bfa:	f042 0201 	orr.w	r2, r2, #1
    4bfe:	b2d2      	uxtb	r2, r2
    4c00:	701a      	strb	r2, [r3, #0]
    4c02:	f242 0339 	movw	r3, #8249	; 0x2039
    4c06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c0a:	f242 0239 	movw	r2, #8249	; 0x2039
    4c0e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4c12:	7812      	ldrb	r2, [r2, #0]
    4c14:	b2d2      	uxtb	r2, r2
    4c16:	f042 0210 	orr.w	r2, r2, #16
    4c1a:	b2d2      	uxtb	r2, r2
    4c1c:	701a      	strb	r2, [r3, #0]
    4c1e:	f000 bffe 	b.w	5c1e <ground_calibrate+0x12ae>
    4c22:	f24a 43b8 	movw	r3, #42168	; 0xa4b8
    4c26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c2a:	781b      	ldrb	r3, [r3, #0]
    4c2c:	3301      	adds	r3, #1
    4c2e:	b2da      	uxtb	r2, r3
    4c30:	f24a 43b8 	movw	r3, #42168	; 0xa4b8
    4c34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c38:	701a      	strb	r2, [r3, #0]
    4c3a:	f000 bff0 	b.w	5c1e <ground_calibrate+0x12ae>
    }
}
else if (calib_status == WAITING_CALIB_CONTRAST)
    4c3e:	f24a 43b2 	movw	r3, #42162	; 0xa4b2
    4c42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c46:	781b      	ldrb	r3, [r3, #0]
    4c48:	2b01      	cmp	r3, #1
    4c4a:	f040 87e8 	bne.w	5c1e <ground_calibrate+0x12ae>
{
    if (STICK_PUSHED(from_fbw.channels[RADIO_ROLL])) {
    4c4e:	f24a 53c0 	movw	r3, #42432	; 0xa5c0
    4c52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c56:	885b      	ldrh	r3, [r3, #2]
    4c58:	b21b      	sxth	r3, r3
    4c5a:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
    4c5e:	db09      	blt.n	4c74 <ground_calibrate+0x304>
    4c60:	f24a 53c0 	movw	r3, #42432	; 0xa5c0
    4c64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c68:	885b      	ldrh	r3, [r3, #2]
    4c6a:	b21b      	sxth	r3, r3
    4c6c:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    4c70:	f340 87d5 	ble.w	5c1e <ground_calibrate+0x12ae>
      ir_gain_calib();
    4c74:	f00b fcfc 	bl	10670 <ir_gain_calib>
      estimator_rad_of_ir = ir_rad_of_ir;
    4c78:	f240 1310 	movw	r3, #272	; 0x110
    4c7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c80:	681a      	ldr	r2, [r3, #0]
    4c82:	f64a 23ac 	movw	r3, #43692	; 0xaaac
    4c86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c8a:	601a      	str	r2, [r3, #0]
      DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    4c8c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4c90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c94:	781a      	ldrb	r2, [r3, #0]
    4c96:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    4c9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c9e:	781b      	ldrb	r3, [r3, #0]
    4ca0:	b2db      	uxtb	r3, r3
    4ca2:	429a      	cmp	r2, r3
    4ca4:	d313      	bcc.n	4cce <ground_calibrate+0x35e>
    4ca6:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    4caa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cae:	781b      	ldrb	r3, [r3, #0]
    4cb0:	b2db      	uxtb	r3, r3
    4cb2:	461a      	mov	r2, r3
    4cb4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4cb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cbc:	781b      	ldrb	r3, [r3, #0]
    4cbe:	1ad3      	subs	r3, r2, r3
    4cc0:	33ff      	adds	r3, #255	; 0xff
    4cc2:	2b14      	cmp	r3, #20
    4cc4:	bfd4      	ite	le
    4cc6:	2300      	movle	r3, #0
    4cc8:	2301      	movgt	r3, #1
    4cca:	b2db      	uxtb	r3, r3
    4ccc:	e011      	b.n	4cf2 <ground_calibrate+0x382>
    4cce:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    4cd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cd6:	781b      	ldrb	r3, [r3, #0]
    4cd8:	b2db      	uxtb	r3, r3
    4cda:	461a      	mov	r2, r3
    4cdc:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4ce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ce4:	781b      	ldrb	r3, [r3, #0]
    4ce6:	1ad3      	subs	r3, r2, r3
    4ce8:	2b14      	cmp	r3, #20
    4cea:	bfd4      	ite	le
    4cec:	2300      	movle	r3, #0
    4cee:	2301      	movgt	r3, #1
    4cf0:	b2db      	uxtb	r3, r3
    4cf2:	2b00      	cmp	r3, #0
    4cf4:	f000 85a6 	beq.w	5844 <ground_calibrate+0xed4>
    4cf8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4cfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d00:	781b      	ldrb	r3, [r3, #0]
    4d02:	461a      	mov	r2, r3
    4d04:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    4d08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d0c:	2105      	movs	r1, #5
    4d0e:	5499      	strb	r1, [r3, r2]
    4d10:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4d14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d18:	781b      	ldrb	r3, [r3, #0]
    4d1a:	3301      	adds	r3, #1
    4d1c:	b2da      	uxtb	r2, r3
    4d1e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4d22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d26:	701a      	strb	r2, [r3, #0]
    4d28:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4d2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d30:	781b      	ldrb	r3, [r3, #0]
    4d32:	2bff      	cmp	r3, #255	; 0xff
    4d34:	d105      	bne.n	4d42 <ground_calibrate+0x3d2>
    4d36:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4d3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d3e:	2200      	movs	r2, #0
    4d40:	701a      	strb	r2, [r3, #0]
    4d42:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4d46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d4a:	781b      	ldrb	r3, [r3, #0]
    4d4c:	461a      	mov	r2, r3
    4d4e:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    4d52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d56:	2105      	movs	r1, #5
    4d58:	5499      	strb	r1, [r3, r2]
    4d5a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4d5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d62:	781b      	ldrb	r3, [r3, #0]
    4d64:	3301      	adds	r3, #1
    4d66:	b2da      	uxtb	r2, r3
    4d68:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4d6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d70:	701a      	strb	r2, [r3, #0]
    4d72:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4d76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d7a:	781b      	ldrb	r3, [r3, #0]
    4d7c:	2bff      	cmp	r3, #255	; 0xff
    4d7e:	d105      	bne.n	4d8c <ground_calibrate+0x41c>
    4d80:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4d84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d88:	2200      	movs	r2, #0
    4d8a:	701a      	strb	r2, [r3, #0]
    4d8c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    4d90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d94:	2205      	movs	r2, #5
    4d96:	701a      	strb	r2, [r3, #0]
    4d98:	f24a 53be 	movw	r3, #42430	; 0xa5be
    4d9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4da0:	2205      	movs	r2, #5
    4da2:	701a      	strb	r2, [r3, #0]
    4da4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4da8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4dac:	781b      	ldrb	r3, [r3, #0]
    4dae:	461a      	mov	r2, r3
    4db0:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    4db4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4db8:	7819      	ldrb	r1, [r3, #0]
    4dba:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    4dbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4dc2:	5499      	strb	r1, [r3, r2]
    4dc4:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    4dc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4dcc:	781a      	ldrb	r2, [r3, #0]
    4dce:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    4dd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4dd6:	781b      	ldrb	r3, [r3, #0]
    4dd8:	4413      	add	r3, r2
    4dda:	b2da      	uxtb	r2, r3
    4ddc:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    4de0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4de4:	701a      	strb	r2, [r3, #0]
    4de6:	f24a 53be 	movw	r3, #42430	; 0xa5be
    4dea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4dee:	781a      	ldrb	r2, [r3, #0]
    4df0:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    4df4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4df8:	781b      	ldrb	r3, [r3, #0]
    4dfa:	4413      	add	r3, r2
    4dfc:	b2da      	uxtb	r2, r3
    4dfe:	f24a 53be 	movw	r3, #42430	; 0xa5be
    4e02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e06:	701a      	strb	r2, [r3, #0]
    4e08:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4e0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e10:	781b      	ldrb	r3, [r3, #0]
    4e12:	3301      	adds	r3, #1
    4e14:	b2da      	uxtb	r2, r3
    4e16:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4e1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e1e:	701a      	strb	r2, [r3, #0]
    4e20:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4e24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e28:	781b      	ldrb	r3, [r3, #0]
    4e2a:	2bff      	cmp	r3, #255	; 0xff
    4e2c:	d105      	bne.n	4e3a <ground_calibrate+0x4ca>
    4e2e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4e32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e36:	2200      	movs	r2, #0
    4e38:	701a      	strb	r2, [r3, #0]
    4e3a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4e3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e42:	781b      	ldrb	r3, [r3, #0]
    4e44:	461a      	mov	r2, r3
    4e46:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    4e4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e4e:	7859      	ldrb	r1, [r3, #1]
    4e50:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    4e54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e58:	5499      	strb	r1, [r3, r2]
    4e5a:	4bd2      	ldr	r3, [pc, #840]	; (51a4 <ground_calibrate+0x834>)
    4e5c:	781a      	ldrb	r2, [r3, #0]
    4e5e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    4e62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e66:	781b      	ldrb	r3, [r3, #0]
    4e68:	4413      	add	r3, r2
    4e6a:	b2da      	uxtb	r2, r3
    4e6c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    4e70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e74:	701a      	strb	r2, [r3, #0]
    4e76:	f24a 53be 	movw	r3, #42430	; 0xa5be
    4e7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e7e:	781a      	ldrb	r2, [r3, #0]
    4e80:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    4e84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e88:	781b      	ldrb	r3, [r3, #0]
    4e8a:	4413      	add	r3, r2
    4e8c:	b2da      	uxtb	r2, r3
    4e8e:	f24a 53be 	movw	r3, #42430	; 0xa5be
    4e92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e96:	701a      	strb	r2, [r3, #0]
    4e98:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4e9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ea0:	781b      	ldrb	r3, [r3, #0]
    4ea2:	3301      	adds	r3, #1
    4ea4:	b2da      	uxtb	r2, r3
    4ea6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4eaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4eae:	701a      	strb	r2, [r3, #0]
    4eb0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4eb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4eb8:	781b      	ldrb	r3, [r3, #0]
    4eba:	2bff      	cmp	r3, #255	; 0xff
    4ebc:	d105      	bne.n	4eca <ground_calibrate+0x55a>
    4ebe:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4ec2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ec6:	2200      	movs	r2, #0
    4ec8:	701a      	strb	r2, [r3, #0]
    4eca:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4ece:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ed2:	781b      	ldrb	r3, [r3, #0]
    4ed4:	461a      	mov	r2, r3
    4ed6:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    4eda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ede:	7899      	ldrb	r1, [r3, #2]
    4ee0:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    4ee4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ee8:	5499      	strb	r1, [r3, r2]
    4eea:	4baf      	ldr	r3, [pc, #700]	; (51a8 <ground_calibrate+0x838>)
    4eec:	781a      	ldrb	r2, [r3, #0]
    4eee:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    4ef2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ef6:	781b      	ldrb	r3, [r3, #0]
    4ef8:	4413      	add	r3, r2
    4efa:	b2da      	uxtb	r2, r3
    4efc:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    4f00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f04:	701a      	strb	r2, [r3, #0]
    4f06:	f24a 53be 	movw	r3, #42430	; 0xa5be
    4f0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f0e:	781a      	ldrb	r2, [r3, #0]
    4f10:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    4f14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f18:	781b      	ldrb	r3, [r3, #0]
    4f1a:	4413      	add	r3, r2
    4f1c:	b2da      	uxtb	r2, r3
    4f1e:	f24a 53be 	movw	r3, #42430	; 0xa5be
    4f22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f26:	701a      	strb	r2, [r3, #0]
    4f28:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4f2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f30:	781b      	ldrb	r3, [r3, #0]
    4f32:	3301      	adds	r3, #1
    4f34:	b2da      	uxtb	r2, r3
    4f36:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4f3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f3e:	701a      	strb	r2, [r3, #0]
    4f40:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4f44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f48:	781b      	ldrb	r3, [r3, #0]
    4f4a:	2bff      	cmp	r3, #255	; 0xff
    4f4c:	d105      	bne.n	4f5a <ground_calibrate+0x5ea>
    4f4e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4f52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f56:	2200      	movs	r2, #0
    4f58:	701a      	strb	r2, [r3, #0]
    4f5a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4f5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f62:	781b      	ldrb	r3, [r3, #0]
    4f64:	461a      	mov	r2, r3
    4f66:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    4f6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f6e:	78d9      	ldrb	r1, [r3, #3]
    4f70:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    4f74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f78:	5499      	strb	r1, [r3, r2]
    4f7a:	4b8c      	ldr	r3, [pc, #560]	; (51ac <ground_calibrate+0x83c>)
    4f7c:	781a      	ldrb	r2, [r3, #0]
    4f7e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    4f82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f86:	781b      	ldrb	r3, [r3, #0]
    4f88:	4413      	add	r3, r2
    4f8a:	b2da      	uxtb	r2, r3
    4f8c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    4f90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f94:	701a      	strb	r2, [r3, #0]
    4f96:	f24a 53be 	movw	r3, #42430	; 0xa5be
    4f9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f9e:	781a      	ldrb	r2, [r3, #0]
    4fa0:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    4fa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fa8:	781b      	ldrb	r3, [r3, #0]
    4faa:	4413      	add	r3, r2
    4fac:	b2da      	uxtb	r2, r3
    4fae:	f24a 53be 	movw	r3, #42430	; 0xa5be
    4fb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fb6:	701a      	strb	r2, [r3, #0]
    4fb8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4fbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fc0:	781b      	ldrb	r3, [r3, #0]
    4fc2:	3301      	adds	r3, #1
    4fc4:	b2da      	uxtb	r2, r3
    4fc6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4fca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fce:	701a      	strb	r2, [r3, #0]
    4fd0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4fd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fd8:	781b      	ldrb	r3, [r3, #0]
    4fda:	2bff      	cmp	r3, #255	; 0xff
    4fdc:	d105      	bne.n	4fea <ground_calibrate+0x67a>
    4fde:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4fe2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fe6:	2200      	movs	r2, #0
    4fe8:	701a      	strb	r2, [r3, #0]
    4fea:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4fee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ff2:	781b      	ldrb	r3, [r3, #0]
    4ff4:	461a      	mov	r2, r3
    4ff6:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    4ffa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ffe:	7819      	ldrb	r1, [r3, #0]
    5000:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    5004:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5008:	5499      	strb	r1, [r3, r2]
    500a:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    500e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5012:	781a      	ldrb	r2, [r3, #0]
    5014:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    5018:	f2c2 0300 	movt	r3, #8192	; 0x2000
    501c:	781b      	ldrb	r3, [r3, #0]
    501e:	4413      	add	r3, r2
    5020:	b2da      	uxtb	r2, r3
    5022:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    5026:	f2c2 0300 	movt	r3, #8192	; 0x2000
    502a:	701a      	strb	r2, [r3, #0]
    502c:	f24a 53be 	movw	r3, #42430	; 0xa5be
    5030:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5034:	781a      	ldrb	r2, [r3, #0]
    5036:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    503a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    503e:	781b      	ldrb	r3, [r3, #0]
    5040:	4413      	add	r3, r2
    5042:	b2da      	uxtb	r2, r3
    5044:	f24a 53be 	movw	r3, #42430	; 0xa5be
    5048:	f2c2 0300 	movt	r3, #8192	; 0x2000
    504c:	701a      	strb	r2, [r3, #0]
    504e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5052:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5056:	781b      	ldrb	r3, [r3, #0]
    5058:	3301      	adds	r3, #1
    505a:	b2da      	uxtb	r2, r3
    505c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5060:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5064:	701a      	strb	r2, [r3, #0]
    5066:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    506a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    506e:	781b      	ldrb	r3, [r3, #0]
    5070:	2bff      	cmp	r3, #255	; 0xff
    5072:	d105      	bne.n	5080 <ground_calibrate+0x710>
    5074:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5078:	f2c2 0300 	movt	r3, #8192	; 0x2000
    507c:	2200      	movs	r2, #0
    507e:	701a      	strb	r2, [r3, #0]
    5080:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5084:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5088:	781b      	ldrb	r3, [r3, #0]
    508a:	461a      	mov	r2, r3
    508c:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    5090:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5094:	7859      	ldrb	r1, [r3, #1]
    5096:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    509a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    509e:	5499      	strb	r1, [r3, r2]
    50a0:	4b43      	ldr	r3, [pc, #268]	; (51b0 <ground_calibrate+0x840>)
    50a2:	781a      	ldrb	r2, [r3, #0]
    50a4:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    50a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50ac:	781b      	ldrb	r3, [r3, #0]
    50ae:	4413      	add	r3, r2
    50b0:	b2da      	uxtb	r2, r3
    50b2:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    50b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50ba:	701a      	strb	r2, [r3, #0]
    50bc:	f24a 53be 	movw	r3, #42430	; 0xa5be
    50c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50c4:	781a      	ldrb	r2, [r3, #0]
    50c6:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    50ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50ce:	781b      	ldrb	r3, [r3, #0]
    50d0:	4413      	add	r3, r2
    50d2:	b2da      	uxtb	r2, r3
    50d4:	f24a 53be 	movw	r3, #42430	; 0xa5be
    50d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50dc:	701a      	strb	r2, [r3, #0]
    50de:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    50e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50e6:	781b      	ldrb	r3, [r3, #0]
    50e8:	3301      	adds	r3, #1
    50ea:	b2da      	uxtb	r2, r3
    50ec:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    50f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50f4:	701a      	strb	r2, [r3, #0]
    50f6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    50fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50fe:	781b      	ldrb	r3, [r3, #0]
    5100:	2bff      	cmp	r3, #255	; 0xff
    5102:	d105      	bne.n	5110 <ground_calibrate+0x7a0>
    5104:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5108:	f2c2 0300 	movt	r3, #8192	; 0x2000
    510c:	2200      	movs	r2, #0
    510e:	701a      	strb	r2, [r3, #0]
    5110:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5114:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5118:	781b      	ldrb	r3, [r3, #0]
    511a:	461a      	mov	r2, r3
    511c:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    5120:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5124:	7899      	ldrb	r1, [r3, #2]
    5126:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    512a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    512e:	5499      	strb	r1, [r3, r2]
    5130:	4b20      	ldr	r3, [pc, #128]	; (51b4 <ground_calibrate+0x844>)
    5132:	781a      	ldrb	r2, [r3, #0]
    5134:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    5138:	f2c2 0300 	movt	r3, #8192	; 0x2000
    513c:	781b      	ldrb	r3, [r3, #0]
    513e:	4413      	add	r3, r2
    5140:	b2da      	uxtb	r2, r3
    5142:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    5146:	f2c2 0300 	movt	r3, #8192	; 0x2000
    514a:	701a      	strb	r2, [r3, #0]
    514c:	f24a 53be 	movw	r3, #42430	; 0xa5be
    5150:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5154:	781a      	ldrb	r2, [r3, #0]
    5156:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    515a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    515e:	781b      	ldrb	r3, [r3, #0]
    5160:	4413      	add	r3, r2
    5162:	b2da      	uxtb	r2, r3
    5164:	f24a 53be 	movw	r3, #42430	; 0xa5be
    5168:	f2c2 0300 	movt	r3, #8192	; 0x2000
    516c:	701a      	strb	r2, [r3, #0]
    516e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5172:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5176:	781b      	ldrb	r3, [r3, #0]
    5178:	3301      	adds	r3, #1
    517a:	b2da      	uxtb	r2, r3
    517c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5180:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5184:	701a      	strb	r2, [r3, #0]
    5186:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    518a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    518e:	781b      	ldrb	r3, [r3, #0]
    5190:	2bff      	cmp	r3, #255	; 0xff
    5192:	d111      	bne.n	51b8 <ground_calibrate+0x848>
    5194:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5198:	f2c2 0300 	movt	r3, #8192	; 0x2000
    519c:	2200      	movs	r2, #0
    519e:	701a      	strb	r2, [r3, #0]
    51a0:	e00a      	b.n	51b8 <ground_calibrate+0x848>
    51a2:	bf00      	nop
    51a4:	2000aab1 	.word	0x2000aab1
    51a8:	2000aab2 	.word	0x2000aab2
    51ac:	2000aab3 	.word	0x2000aab3
    51b0:	2000aab5 	.word	0x2000aab5
    51b4:	2000aab6 	.word	0x2000aab6
    51b8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    51bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51c0:	781b      	ldrb	r3, [r3, #0]
    51c2:	461a      	mov	r2, r3
    51c4:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    51c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51cc:	78d9      	ldrb	r1, [r3, #3]
    51ce:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    51d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51d6:	5499      	strb	r1, [r3, r2]
    51d8:	4bd3      	ldr	r3, [pc, #844]	; (5528 <ground_calibrate+0xbb8>)
    51da:	781a      	ldrb	r2, [r3, #0]
    51dc:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    51e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51e4:	781b      	ldrb	r3, [r3, #0]
    51e6:	4413      	add	r3, r2
    51e8:	b2da      	uxtb	r2, r3
    51ea:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    51ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51f2:	701a      	strb	r2, [r3, #0]
    51f4:	f24a 53be 	movw	r3, #42430	; 0xa5be
    51f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51fc:	781a      	ldrb	r2, [r3, #0]
    51fe:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    5202:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5206:	781b      	ldrb	r3, [r3, #0]
    5208:	4413      	add	r3, r2
    520a:	b2da      	uxtb	r2, r3
    520c:	f24a 53be 	movw	r3, #42430	; 0xa5be
    5210:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5214:	701a      	strb	r2, [r3, #0]
    5216:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    521a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    521e:	781b      	ldrb	r3, [r3, #0]
    5220:	3301      	adds	r3, #1
    5222:	b2da      	uxtb	r2, r3
    5224:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5228:	f2c2 0300 	movt	r3, #8192	; 0x2000
    522c:	701a      	strb	r2, [r3, #0]
    522e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5232:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5236:	781b      	ldrb	r3, [r3, #0]
    5238:	2bff      	cmp	r3, #255	; 0xff
    523a:	d105      	bne.n	5248 <ground_calibrate+0x8d8>
    523c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5240:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5244:	2200      	movs	r2, #0
    5246:	701a      	strb	r2, [r3, #0]
    5248:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    524c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5250:	781b      	ldrb	r3, [r3, #0]
    5252:	461a      	mov	r2, r3
    5254:	f64a 23ac 	movw	r3, #43692	; 0xaaac
    5258:	f2c2 0300 	movt	r3, #8192	; 0x2000
    525c:	7819      	ldrb	r1, [r3, #0]
    525e:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    5262:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5266:	5499      	strb	r1, [r3, r2]
    5268:	f64a 23ac 	movw	r3, #43692	; 0xaaac
    526c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5270:	781a      	ldrb	r2, [r3, #0]
    5272:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    5276:	f2c2 0300 	movt	r3, #8192	; 0x2000
    527a:	781b      	ldrb	r3, [r3, #0]
    527c:	4413      	add	r3, r2
    527e:	b2da      	uxtb	r2, r3
    5280:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    5284:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5288:	701a      	strb	r2, [r3, #0]
    528a:	f24a 53be 	movw	r3, #42430	; 0xa5be
    528e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5292:	781a      	ldrb	r2, [r3, #0]
    5294:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    5298:	f2c2 0300 	movt	r3, #8192	; 0x2000
    529c:	781b      	ldrb	r3, [r3, #0]
    529e:	4413      	add	r3, r2
    52a0:	b2da      	uxtb	r2, r3
    52a2:	f24a 53be 	movw	r3, #42430	; 0xa5be
    52a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52aa:	701a      	strb	r2, [r3, #0]
    52ac:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    52b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52b4:	781b      	ldrb	r3, [r3, #0]
    52b6:	3301      	adds	r3, #1
    52b8:	b2da      	uxtb	r2, r3
    52ba:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    52be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52c2:	701a      	strb	r2, [r3, #0]
    52c4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    52c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52cc:	781b      	ldrb	r3, [r3, #0]
    52ce:	2bff      	cmp	r3, #255	; 0xff
    52d0:	d105      	bne.n	52de <ground_calibrate+0x96e>
    52d2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    52d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52da:	2200      	movs	r2, #0
    52dc:	701a      	strb	r2, [r3, #0]
    52de:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    52e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52e6:	781b      	ldrb	r3, [r3, #0]
    52e8:	461a      	mov	r2, r3
    52ea:	f64a 23ac 	movw	r3, #43692	; 0xaaac
    52ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52f2:	7859      	ldrb	r1, [r3, #1]
    52f4:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    52f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52fc:	5499      	strb	r1, [r3, r2]
    52fe:	4b8b      	ldr	r3, [pc, #556]	; (552c <ground_calibrate+0xbbc>)
    5300:	781a      	ldrb	r2, [r3, #0]
    5302:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    5306:	f2c2 0300 	movt	r3, #8192	; 0x2000
    530a:	781b      	ldrb	r3, [r3, #0]
    530c:	4413      	add	r3, r2
    530e:	b2da      	uxtb	r2, r3
    5310:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    5314:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5318:	701a      	strb	r2, [r3, #0]
    531a:	f24a 53be 	movw	r3, #42430	; 0xa5be
    531e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5322:	781a      	ldrb	r2, [r3, #0]
    5324:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    5328:	f2c2 0300 	movt	r3, #8192	; 0x2000
    532c:	781b      	ldrb	r3, [r3, #0]
    532e:	4413      	add	r3, r2
    5330:	b2da      	uxtb	r2, r3
    5332:	f24a 53be 	movw	r3, #42430	; 0xa5be
    5336:	f2c2 0300 	movt	r3, #8192	; 0x2000
    533a:	701a      	strb	r2, [r3, #0]
    533c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5340:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5344:	781b      	ldrb	r3, [r3, #0]
    5346:	3301      	adds	r3, #1
    5348:	b2da      	uxtb	r2, r3
    534a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    534e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5352:	701a      	strb	r2, [r3, #0]
    5354:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5358:	f2c2 0300 	movt	r3, #8192	; 0x2000
    535c:	781b      	ldrb	r3, [r3, #0]
    535e:	2bff      	cmp	r3, #255	; 0xff
    5360:	d105      	bne.n	536e <ground_calibrate+0x9fe>
    5362:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5366:	f2c2 0300 	movt	r3, #8192	; 0x2000
    536a:	2200      	movs	r2, #0
    536c:	701a      	strb	r2, [r3, #0]
    536e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5372:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5376:	781b      	ldrb	r3, [r3, #0]
    5378:	461a      	mov	r2, r3
    537a:	f64a 23ac 	movw	r3, #43692	; 0xaaac
    537e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5382:	7899      	ldrb	r1, [r3, #2]
    5384:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    5388:	f2c2 0300 	movt	r3, #8192	; 0x2000
    538c:	5499      	strb	r1, [r3, r2]
    538e:	4b68      	ldr	r3, [pc, #416]	; (5530 <ground_calibrate+0xbc0>)
    5390:	781a      	ldrb	r2, [r3, #0]
    5392:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    5396:	f2c2 0300 	movt	r3, #8192	; 0x2000
    539a:	781b      	ldrb	r3, [r3, #0]
    539c:	4413      	add	r3, r2
    539e:	b2da      	uxtb	r2, r3
    53a0:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    53a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53a8:	701a      	strb	r2, [r3, #0]
    53aa:	f24a 53be 	movw	r3, #42430	; 0xa5be
    53ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53b2:	781a      	ldrb	r2, [r3, #0]
    53b4:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    53b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53bc:	781b      	ldrb	r3, [r3, #0]
    53be:	4413      	add	r3, r2
    53c0:	b2da      	uxtb	r2, r3
    53c2:	f24a 53be 	movw	r3, #42430	; 0xa5be
    53c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53ca:	701a      	strb	r2, [r3, #0]
    53cc:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    53d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53d4:	781b      	ldrb	r3, [r3, #0]
    53d6:	3301      	adds	r3, #1
    53d8:	b2da      	uxtb	r2, r3
    53da:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    53de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53e2:	701a      	strb	r2, [r3, #0]
    53e4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    53e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53ec:	781b      	ldrb	r3, [r3, #0]
    53ee:	2bff      	cmp	r3, #255	; 0xff
    53f0:	d105      	bne.n	53fe <ground_calibrate+0xa8e>
    53f2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    53f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53fa:	2200      	movs	r2, #0
    53fc:	701a      	strb	r2, [r3, #0]
    53fe:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5402:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5406:	781b      	ldrb	r3, [r3, #0]
    5408:	461a      	mov	r2, r3
    540a:	f64a 23ac 	movw	r3, #43692	; 0xaaac
    540e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5412:	78d9      	ldrb	r1, [r3, #3]
    5414:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    5418:	f2c2 0300 	movt	r3, #8192	; 0x2000
    541c:	5499      	strb	r1, [r3, r2]
    541e:	4b45      	ldr	r3, [pc, #276]	; (5534 <ground_calibrate+0xbc4>)
    5420:	781a      	ldrb	r2, [r3, #0]
    5422:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    5426:	f2c2 0300 	movt	r3, #8192	; 0x2000
    542a:	781b      	ldrb	r3, [r3, #0]
    542c:	4413      	add	r3, r2
    542e:	b2da      	uxtb	r2, r3
    5430:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    5434:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5438:	701a      	strb	r2, [r3, #0]
    543a:	f24a 53be 	movw	r3, #42430	; 0xa5be
    543e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5442:	781a      	ldrb	r2, [r3, #0]
    5444:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    5448:	f2c2 0300 	movt	r3, #8192	; 0x2000
    544c:	781b      	ldrb	r3, [r3, #0]
    544e:	4413      	add	r3, r2
    5450:	b2da      	uxtb	r2, r3
    5452:	f24a 53be 	movw	r3, #42430	; 0xa5be
    5456:	f2c2 0300 	movt	r3, #8192	; 0x2000
    545a:	701a      	strb	r2, [r3, #0]
    545c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5460:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5464:	781b      	ldrb	r3, [r3, #0]
    5466:	3301      	adds	r3, #1
    5468:	b2da      	uxtb	r2, r3
    546a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    546e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5472:	701a      	strb	r2, [r3, #0]
    5474:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5478:	f2c2 0300 	movt	r3, #8192	; 0x2000
    547c:	781b      	ldrb	r3, [r3, #0]
    547e:	2bff      	cmp	r3, #255	; 0xff
    5480:	d105      	bne.n	548e <ground_calibrate+0xb1e>
    5482:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5486:	f2c2 0300 	movt	r3, #8192	; 0x2000
    548a:	2200      	movs	r2, #0
    548c:	701a      	strb	r2, [r3, #0]
    548e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5492:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5496:	781b      	ldrb	r3, [r3, #0]
    5498:	461a      	mov	r2, r3
    549a:	f240 130a 	movw	r3, #266	; 0x10a
    549e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54a2:	7819      	ldrb	r1, [r3, #0]
    54a4:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    54a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54ac:	5499      	strb	r1, [r3, r2]
    54ae:	f240 130a 	movw	r3, #266	; 0x10a
    54b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54b6:	781a      	ldrb	r2, [r3, #0]
    54b8:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    54bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54c0:	781b      	ldrb	r3, [r3, #0]
    54c2:	4413      	add	r3, r2
    54c4:	b2da      	uxtb	r2, r3
    54c6:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    54ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54ce:	701a      	strb	r2, [r3, #0]
    54d0:	f24a 53be 	movw	r3, #42430	; 0xa5be
    54d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54d8:	781a      	ldrb	r2, [r3, #0]
    54da:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    54de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54e2:	781b      	ldrb	r3, [r3, #0]
    54e4:	4413      	add	r3, r2
    54e6:	b2da      	uxtb	r2, r3
    54e8:	f24a 53be 	movw	r3, #42430	; 0xa5be
    54ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54f0:	701a      	strb	r2, [r3, #0]
    54f2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    54f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54fa:	781b      	ldrb	r3, [r3, #0]
    54fc:	3301      	adds	r3, #1
    54fe:	b2da      	uxtb	r2, r3
    5500:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5504:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5508:	701a      	strb	r2, [r3, #0]
    550a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    550e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5512:	781b      	ldrb	r3, [r3, #0]
    5514:	2bff      	cmp	r3, #255	; 0xff
    5516:	d10f      	bne.n	5538 <ground_calibrate+0xbc8>
    5518:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    551c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5520:	2200      	movs	r2, #0
    5522:	701a      	strb	r2, [r3, #0]
    5524:	e008      	b.n	5538 <ground_calibrate+0xbc8>
    5526:	bf00      	nop
    5528:	2000aab7 	.word	0x2000aab7
    552c:	2000aaad 	.word	0x2000aaad
    5530:	2000aaae 	.word	0x2000aaae
    5534:	2000aaaf 	.word	0x2000aaaf
    5538:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    553c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5540:	781b      	ldrb	r3, [r3, #0]
    5542:	461a      	mov	r2, r3
    5544:	f240 130a 	movw	r3, #266	; 0x10a
    5548:	f2c2 0300 	movt	r3, #8192	; 0x2000
    554c:	7859      	ldrb	r1, [r3, #1]
    554e:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    5552:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5556:	5499      	strb	r1, [r3, r2]
    5558:	4bd4      	ldr	r3, [pc, #848]	; (58ac <ground_calibrate+0xf3c>)
    555a:	781a      	ldrb	r2, [r3, #0]
    555c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    5560:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5564:	781b      	ldrb	r3, [r3, #0]
    5566:	4413      	add	r3, r2
    5568:	b2da      	uxtb	r2, r3
    556a:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    556e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5572:	701a      	strb	r2, [r3, #0]
    5574:	f24a 53be 	movw	r3, #42430	; 0xa5be
    5578:	f2c2 0300 	movt	r3, #8192	; 0x2000
    557c:	781a      	ldrb	r2, [r3, #0]
    557e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    5582:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5586:	781b      	ldrb	r3, [r3, #0]
    5588:	4413      	add	r3, r2
    558a:	b2da      	uxtb	r2, r3
    558c:	f24a 53be 	movw	r3, #42430	; 0xa5be
    5590:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5594:	701a      	strb	r2, [r3, #0]
    5596:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    559a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    559e:	781b      	ldrb	r3, [r3, #0]
    55a0:	3301      	adds	r3, #1
    55a2:	b2da      	uxtb	r2, r3
    55a4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    55a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55ac:	701a      	strb	r2, [r3, #0]
    55ae:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    55b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55b6:	781b      	ldrb	r3, [r3, #0]
    55b8:	2bff      	cmp	r3, #255	; 0xff
    55ba:	d105      	bne.n	55c8 <ground_calibrate+0xc58>
    55bc:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    55c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55c4:	2200      	movs	r2, #0
    55c6:	701a      	strb	r2, [r3, #0]
    55c8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    55cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55d0:	781b      	ldrb	r3, [r3, #0]
    55d2:	461a      	mov	r2, r3
    55d4:	f240 130c 	movw	r3, #268	; 0x10c
    55d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55dc:	7819      	ldrb	r1, [r3, #0]
    55de:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    55e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55e6:	5499      	strb	r1, [r3, r2]
    55e8:	f240 130c 	movw	r3, #268	; 0x10c
    55ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55f0:	781a      	ldrb	r2, [r3, #0]
    55f2:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    55f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55fa:	781b      	ldrb	r3, [r3, #0]
    55fc:	4413      	add	r3, r2
    55fe:	b2da      	uxtb	r2, r3
    5600:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    5604:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5608:	701a      	strb	r2, [r3, #0]
    560a:	f24a 53be 	movw	r3, #42430	; 0xa5be
    560e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5612:	781a      	ldrb	r2, [r3, #0]
    5614:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    5618:	f2c2 0300 	movt	r3, #8192	; 0x2000
    561c:	781b      	ldrb	r3, [r3, #0]
    561e:	4413      	add	r3, r2
    5620:	b2da      	uxtb	r2, r3
    5622:	f24a 53be 	movw	r3, #42430	; 0xa5be
    5626:	f2c2 0300 	movt	r3, #8192	; 0x2000
    562a:	701a      	strb	r2, [r3, #0]
    562c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5630:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5634:	781b      	ldrb	r3, [r3, #0]
    5636:	3301      	adds	r3, #1
    5638:	b2da      	uxtb	r2, r3
    563a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    563e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5642:	701a      	strb	r2, [r3, #0]
    5644:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5648:	f2c2 0300 	movt	r3, #8192	; 0x2000
    564c:	781b      	ldrb	r3, [r3, #0]
    564e:	2bff      	cmp	r3, #255	; 0xff
    5650:	d105      	bne.n	565e <ground_calibrate+0xcee>
    5652:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5656:	f2c2 0300 	movt	r3, #8192	; 0x2000
    565a:	2200      	movs	r2, #0
    565c:	701a      	strb	r2, [r3, #0]
    565e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5662:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5666:	781b      	ldrb	r3, [r3, #0]
    5668:	461a      	mov	r2, r3
    566a:	f240 130c 	movw	r3, #268	; 0x10c
    566e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5672:	7859      	ldrb	r1, [r3, #1]
    5674:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    5678:	f2c2 0300 	movt	r3, #8192	; 0x2000
    567c:	5499      	strb	r1, [r3, r2]
    567e:	4b8c      	ldr	r3, [pc, #560]	; (58b0 <ground_calibrate+0xf40>)
    5680:	781a      	ldrb	r2, [r3, #0]
    5682:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    5686:	f2c2 0300 	movt	r3, #8192	; 0x2000
    568a:	781b      	ldrb	r3, [r3, #0]
    568c:	4413      	add	r3, r2
    568e:	b2da      	uxtb	r2, r3
    5690:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    5694:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5698:	701a      	strb	r2, [r3, #0]
    569a:	f24a 53be 	movw	r3, #42430	; 0xa5be
    569e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56a2:	781a      	ldrb	r2, [r3, #0]
    56a4:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    56a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56ac:	781b      	ldrb	r3, [r3, #0]
    56ae:	4413      	add	r3, r2
    56b0:	b2da      	uxtb	r2, r3
    56b2:	f24a 53be 	movw	r3, #42430	; 0xa5be
    56b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56ba:	701a      	strb	r2, [r3, #0]
    56bc:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    56c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56c4:	781b      	ldrb	r3, [r3, #0]
    56c6:	3301      	adds	r3, #1
    56c8:	b2da      	uxtb	r2, r3
    56ca:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    56ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56d2:	701a      	strb	r2, [r3, #0]
    56d4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    56d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56dc:	781b      	ldrb	r3, [r3, #0]
    56de:	2bff      	cmp	r3, #255	; 0xff
    56e0:	d105      	bne.n	56ee <ground_calibrate+0xd7e>
    56e2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    56e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56ea:	2200      	movs	r2, #0
    56ec:	701a      	strb	r2, [r3, #0]
    56ee:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    56f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56f6:	781b      	ldrb	r3, [r3, #0]
    56f8:	461a      	mov	r2, r3
    56fa:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    56fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5702:	7819      	ldrb	r1, [r3, #0]
    5704:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    5708:	f2c2 0300 	movt	r3, #8192	; 0x2000
    570c:	5499      	strb	r1, [r3, r2]
    570e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5712:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5716:	781b      	ldrb	r3, [r3, #0]
    5718:	3301      	adds	r3, #1
    571a:	b2da      	uxtb	r2, r3
    571c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5720:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5724:	701a      	strb	r2, [r3, #0]
    5726:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    572a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    572e:	781b      	ldrb	r3, [r3, #0]
    5730:	2bff      	cmp	r3, #255	; 0xff
    5732:	d105      	bne.n	5740 <ground_calibrate+0xdd0>
    5734:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5738:	f2c2 0300 	movt	r3, #8192	; 0x2000
    573c:	2200      	movs	r2, #0
    573e:	701a      	strb	r2, [r3, #0]
    5740:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5744:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5748:	781b      	ldrb	r3, [r3, #0]
    574a:	461a      	mov	r2, r3
    574c:	f24a 53be 	movw	r3, #42430	; 0xa5be
    5750:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5754:	7819      	ldrb	r1, [r3, #0]
    5756:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    575a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    575e:	5499      	strb	r1, [r3, r2]
    5760:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5764:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5768:	781b      	ldrb	r3, [r3, #0]
    576a:	3301      	adds	r3, #1
    576c:	b2da      	uxtb	r2, r3
    576e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5772:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5776:	701a      	strb	r2, [r3, #0]
    5778:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    577c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5780:	781b      	ldrb	r3, [r3, #0]
    5782:	2bff      	cmp	r3, #255	; 0xff
    5784:	d105      	bne.n	5792 <ground_calibrate+0xe22>
    5786:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    578a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    578e:	2200      	movs	r2, #0
    5790:	701a      	strb	r2, [r3, #0]
    5792:	f242 0339 	movw	r3, #8249	; 0x2039
    5796:	f2c2 0300 	movt	r3, #8192	; 0x2000
    579a:	781b      	ldrb	r3, [r3, #0]
    579c:	b2db      	uxtb	r3, r3
    579e:	f003 0310 	and.w	r3, r3, #16
    57a2:	2b00      	cmp	r3, #0
    57a4:	d15a      	bne.n	585c <ground_calibrate+0xeec>
    57a6:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    57aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57ae:	781b      	ldrb	r3, [r3, #0]
    57b0:	b2db      	uxtb	r3, r3
    57b2:	461a      	mov	r2, r3
    57b4:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    57b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57bc:	5c9a      	ldrb	r2, [r3, r2]
    57be:	f24a 53bb 	movw	r3, #42427	; 0xa5bb
    57c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57c6:	701a      	strb	r2, [r3, #0]
    57c8:	f24a 53bc 	movw	r3, #42428	; 0xa5bc
    57cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57d0:	2200      	movs	r2, #0
    57d2:	701a      	strb	r2, [r3, #0]
    57d4:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    57d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57dc:	781b      	ldrb	r3, [r3, #0]
    57de:	b2db      	uxtb	r3, r3
    57e0:	3301      	adds	r3, #1
    57e2:	b2da      	uxtb	r2, r3
    57e4:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    57e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57ec:	701a      	strb	r2, [r3, #0]
    57ee:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    57f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57f6:	781b      	ldrb	r3, [r3, #0]
    57f8:	b2db      	uxtb	r3, r3
    57fa:	2bff      	cmp	r3, #255	; 0xff
    57fc:	d105      	bne.n	580a <ground_calibrate+0xe9a>
    57fe:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    5802:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5806:	2200      	movs	r2, #0
    5808:	701a      	strb	r2, [r3, #0]
    580a:	f242 0338 	movw	r3, #8248	; 0x2038
    580e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5812:	f242 0238 	movw	r2, #8248	; 0x2038
    5816:	f2c2 0200 	movt	r2, #8192	; 0x2000
    581a:	7812      	ldrb	r2, [r2, #0]
    581c:	b2d2      	uxtb	r2, r2
    581e:	f042 0201 	orr.w	r2, r2, #1
    5822:	b2d2      	uxtb	r2, r2
    5824:	701a      	strb	r2, [r3, #0]
    5826:	f242 0339 	movw	r3, #8249	; 0x2039
    582a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    582e:	f242 0239 	movw	r2, #8249	; 0x2039
    5832:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5836:	7812      	ldrb	r2, [r2, #0]
    5838:	b2d2      	uxtb	r2, r2
    583a:	f042 0210 	orr.w	r2, r2, #16
    583e:	b2d2      	uxtb	r2, r2
    5840:	701a      	strb	r2, [r3, #0]
    5842:	e00b      	b.n	585c <ground_calibrate+0xeec>
    5844:	f24a 43b8 	movw	r3, #42168	; 0xa4b8
    5848:	f2c2 0300 	movt	r3, #8192	; 0x2000
    584c:	781b      	ldrb	r3, [r3, #0]
    584e:	3301      	adds	r3, #1
    5850:	b2da      	uxtb	r2, r3
    5852:	f24a 43b8 	movw	r3, #42168	; 0xa4b8
    5856:	f2c2 0300 	movt	r3, #8192	; 0x2000
    585a:	701a      	strb	r2, [r3, #0]
      calib_status = CALIB_DONE;
    585c:	f24a 43b2 	movw	r3, #42162	; 0xa4b2
    5860:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5864:	2202      	movs	r2, #2
    5866:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_CALIB_CONTRAST(&ir_contrast);
    5868:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    586c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5870:	781a      	ldrb	r2, [r3, #0]
    5872:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    5876:	f2c2 0300 	movt	r3, #8192	; 0x2000
    587a:	781b      	ldrb	r3, [r3, #0]
    587c:	b2db      	uxtb	r3, r3
    587e:	429a      	cmp	r2, r3
    5880:	d318      	bcc.n	58b4 <ground_calibrate+0xf44>
    5882:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    5886:	f2c2 0300 	movt	r3, #8192	; 0x2000
    588a:	781b      	ldrb	r3, [r3, #0]
    588c:	b2db      	uxtb	r3, r3
    588e:	461a      	mov	r2, r3
    5890:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5894:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5898:	781b      	ldrb	r3, [r3, #0]
    589a:	1ad3      	subs	r3, r2, r3
    589c:	33ff      	adds	r3, #255	; 0xff
    589e:	2b06      	cmp	r3, #6
    58a0:	bfd4      	ite	le
    58a2:	2300      	movle	r3, #0
    58a4:	2301      	movgt	r3, #1
    58a6:	b2db      	uxtb	r3, r3
    58a8:	e016      	b.n	58d8 <ground_calibrate+0xf68>
    58aa:	bf00      	nop
    58ac:	2000010b 	.word	0x2000010b
    58b0:	2000010d 	.word	0x2000010d
    58b4:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    58b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58bc:	781b      	ldrb	r3, [r3, #0]
    58be:	b2db      	uxtb	r3, r3
    58c0:	461a      	mov	r2, r3
    58c2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    58c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58ca:	781b      	ldrb	r3, [r3, #0]
    58cc:	1ad3      	subs	r3, r2, r3
    58ce:	2b06      	cmp	r3, #6
    58d0:	bfd4      	ite	le
    58d2:	2300      	movle	r3, #0
    58d4:	2301      	movgt	r3, #1
    58d6:	b2db      	uxtb	r3, r3
    58d8:	2b00      	cmp	r3, #0
    58da:	f000 8194 	beq.w	5c06 <ground_calibrate+0x1296>
    58de:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    58e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58e6:	781b      	ldrb	r3, [r3, #0]
    58e8:	461a      	mov	r2, r3
    58ea:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    58ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58f2:	2105      	movs	r1, #5
    58f4:	5499      	strb	r1, [r3, r2]
    58f6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    58fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58fe:	781b      	ldrb	r3, [r3, #0]
    5900:	3301      	adds	r3, #1
    5902:	b2da      	uxtb	r2, r3
    5904:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5908:	f2c2 0300 	movt	r3, #8192	; 0x2000
    590c:	701a      	strb	r2, [r3, #0]
    590e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5912:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5916:	781b      	ldrb	r3, [r3, #0]
    5918:	2bff      	cmp	r3, #255	; 0xff
    591a:	d105      	bne.n	5928 <ground_calibrate+0xfb8>
    591c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5920:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5924:	2200      	movs	r2, #0
    5926:	701a      	strb	r2, [r3, #0]
    5928:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    592c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5930:	781b      	ldrb	r3, [r3, #0]
    5932:	461a      	mov	r2, r3
    5934:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    5938:	f2c2 0300 	movt	r3, #8192	; 0x2000
    593c:	2103      	movs	r1, #3
    593e:	5499      	strb	r1, [r3, r2]
    5940:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5944:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5948:	781b      	ldrb	r3, [r3, #0]
    594a:	3301      	adds	r3, #1
    594c:	b2da      	uxtb	r2, r3
    594e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5952:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5956:	701a      	strb	r2, [r3, #0]
    5958:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    595c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5960:	781b      	ldrb	r3, [r3, #0]
    5962:	2bff      	cmp	r3, #255	; 0xff
    5964:	d105      	bne.n	5972 <ground_calibrate+0x1002>
    5966:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    596a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    596e:	2200      	movs	r2, #0
    5970:	701a      	strb	r2, [r3, #0]
    5972:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    5976:	f2c2 0300 	movt	r3, #8192	; 0x2000
    597a:	2203      	movs	r2, #3
    597c:	701a      	strb	r2, [r3, #0]
    597e:	f24a 53be 	movw	r3, #42430	; 0xa5be
    5982:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5986:	2203      	movs	r2, #3
    5988:	701a      	strb	r2, [r3, #0]
    598a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    598e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5992:	781b      	ldrb	r3, [r3, #0]
    5994:	461a      	mov	r2, r3
    5996:	f240 1308 	movw	r3, #264	; 0x108
    599a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    599e:	7819      	ldrb	r1, [r3, #0]
    59a0:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    59a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59a8:	5499      	strb	r1, [r3, r2]
    59aa:	f240 1308 	movw	r3, #264	; 0x108
    59ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59b2:	781a      	ldrb	r2, [r3, #0]
    59b4:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    59b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59bc:	781b      	ldrb	r3, [r3, #0]
    59be:	4413      	add	r3, r2
    59c0:	b2da      	uxtb	r2, r3
    59c2:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    59c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59ca:	701a      	strb	r2, [r3, #0]
    59cc:	f24a 53be 	movw	r3, #42430	; 0xa5be
    59d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59d4:	781a      	ldrb	r2, [r3, #0]
    59d6:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    59da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59de:	781b      	ldrb	r3, [r3, #0]
    59e0:	4413      	add	r3, r2
    59e2:	b2da      	uxtb	r2, r3
    59e4:	f24a 53be 	movw	r3, #42430	; 0xa5be
    59e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59ec:	701a      	strb	r2, [r3, #0]
    59ee:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    59f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59f6:	781b      	ldrb	r3, [r3, #0]
    59f8:	3301      	adds	r3, #1
    59fa:	b2da      	uxtb	r2, r3
    59fc:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5a00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a04:	701a      	strb	r2, [r3, #0]
    5a06:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5a0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a0e:	781b      	ldrb	r3, [r3, #0]
    5a10:	2bff      	cmp	r3, #255	; 0xff
    5a12:	d105      	bne.n	5a20 <ground_calibrate+0x10b0>
    5a14:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5a18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a1c:	2200      	movs	r2, #0
    5a1e:	701a      	strb	r2, [r3, #0]
    5a20:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5a24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a28:	781b      	ldrb	r3, [r3, #0]
    5a2a:	461a      	mov	r2, r3
    5a2c:	f240 1308 	movw	r3, #264	; 0x108
    5a30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a34:	7859      	ldrb	r1, [r3, #1]
    5a36:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    5a3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a3e:	5499      	strb	r1, [r3, r2]
    5a40:	4b77      	ldr	r3, [pc, #476]	; (5c20 <ground_calibrate+0x12b0>)
    5a42:	781a      	ldrb	r2, [r3, #0]
    5a44:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    5a48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a4c:	781b      	ldrb	r3, [r3, #0]
    5a4e:	4413      	add	r3, r2
    5a50:	b2da      	uxtb	r2, r3
    5a52:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    5a56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a5a:	701a      	strb	r2, [r3, #0]
    5a5c:	f24a 53be 	movw	r3, #42430	; 0xa5be
    5a60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a64:	781a      	ldrb	r2, [r3, #0]
    5a66:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    5a6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a6e:	781b      	ldrb	r3, [r3, #0]
    5a70:	4413      	add	r3, r2
    5a72:	b2da      	uxtb	r2, r3
    5a74:	f24a 53be 	movw	r3, #42430	; 0xa5be
    5a78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a7c:	701a      	strb	r2, [r3, #0]
    5a7e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5a82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a86:	781b      	ldrb	r3, [r3, #0]
    5a88:	3301      	adds	r3, #1
    5a8a:	b2da      	uxtb	r2, r3
    5a8c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5a90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a94:	701a      	strb	r2, [r3, #0]
    5a96:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5a9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a9e:	781b      	ldrb	r3, [r3, #0]
    5aa0:	2bff      	cmp	r3, #255	; 0xff
    5aa2:	d105      	bne.n	5ab0 <ground_calibrate+0x1140>
    5aa4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5aa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5aac:	2200      	movs	r2, #0
    5aae:	701a      	strb	r2, [r3, #0]
    5ab0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5ab4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ab8:	781b      	ldrb	r3, [r3, #0]
    5aba:	461a      	mov	r2, r3
    5abc:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    5ac0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ac4:	7819      	ldrb	r1, [r3, #0]
    5ac6:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    5aca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ace:	5499      	strb	r1, [r3, r2]
    5ad0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5ad4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ad8:	781b      	ldrb	r3, [r3, #0]
    5ada:	3301      	adds	r3, #1
    5adc:	b2da      	uxtb	r2, r3
    5ade:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5ae2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ae6:	701a      	strb	r2, [r3, #0]
    5ae8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5aec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5af0:	781b      	ldrb	r3, [r3, #0]
    5af2:	2bff      	cmp	r3, #255	; 0xff
    5af4:	d105      	bne.n	5b02 <ground_calibrate+0x1192>
    5af6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5afa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5afe:	2200      	movs	r2, #0
    5b00:	701a      	strb	r2, [r3, #0]
    5b02:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5b06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b0a:	781b      	ldrb	r3, [r3, #0]
    5b0c:	461a      	mov	r2, r3
    5b0e:	f24a 53be 	movw	r3, #42430	; 0xa5be
    5b12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b16:	7819      	ldrb	r1, [r3, #0]
    5b18:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    5b1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b20:	5499      	strb	r1, [r3, r2]
    5b22:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5b26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b2a:	781b      	ldrb	r3, [r3, #0]
    5b2c:	3301      	adds	r3, #1
    5b2e:	b2da      	uxtb	r2, r3
    5b30:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5b34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b38:	701a      	strb	r2, [r3, #0]
    5b3a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5b3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b42:	781b      	ldrb	r3, [r3, #0]
    5b44:	2bff      	cmp	r3, #255	; 0xff
    5b46:	d105      	bne.n	5b54 <ground_calibrate+0x11e4>
    5b48:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5b4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b50:	2200      	movs	r2, #0
    5b52:	701a      	strb	r2, [r3, #0]
    5b54:	f242 0339 	movw	r3, #8249	; 0x2039
    5b58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b5c:	781b      	ldrb	r3, [r3, #0]
    5b5e:	b2db      	uxtb	r3, r3
    5b60:	f003 0310 	and.w	r3, r3, #16
    5b64:	2b00      	cmp	r3, #0
    5b66:	d15a      	bne.n	5c1e <ground_calibrate+0x12ae>
    5b68:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    5b6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b70:	781b      	ldrb	r3, [r3, #0]
    5b72:	b2db      	uxtb	r3, r3
    5b74:	461a      	mov	r2, r3
    5b76:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    5b7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b7e:	5c9a      	ldrb	r2, [r3, r2]
    5b80:	f24a 53bb 	movw	r3, #42427	; 0xa5bb
    5b84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b88:	701a      	strb	r2, [r3, #0]
    5b8a:	f24a 53bc 	movw	r3, #42428	; 0xa5bc
    5b8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b92:	2200      	movs	r2, #0
    5b94:	701a      	strb	r2, [r3, #0]
    5b96:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    5b9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b9e:	781b      	ldrb	r3, [r3, #0]
    5ba0:	b2db      	uxtb	r3, r3
    5ba2:	3301      	adds	r3, #1
    5ba4:	b2da      	uxtb	r2, r3
    5ba6:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    5baa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5bae:	701a      	strb	r2, [r3, #0]
    5bb0:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    5bb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5bb8:	781b      	ldrb	r3, [r3, #0]
    5bba:	b2db      	uxtb	r3, r3
    5bbc:	2bff      	cmp	r3, #255	; 0xff
    5bbe:	d105      	bne.n	5bcc <ground_calibrate+0x125c>
    5bc0:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    5bc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5bc8:	2200      	movs	r2, #0
    5bca:	701a      	strb	r2, [r3, #0]
    5bcc:	f242 0338 	movw	r3, #8248	; 0x2038
    5bd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5bd4:	f242 0238 	movw	r2, #8248	; 0x2038
    5bd8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5bdc:	7812      	ldrb	r2, [r2, #0]
    5bde:	b2d2      	uxtb	r2, r2
    5be0:	f042 0201 	orr.w	r2, r2, #1
    5be4:	b2d2      	uxtb	r2, r2
    5be6:	701a      	strb	r2, [r3, #0]
    5be8:	f242 0339 	movw	r3, #8249	; 0x2039
    5bec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5bf0:	f242 0239 	movw	r2, #8249	; 0x2039
    5bf4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5bf8:	7812      	ldrb	r2, [r2, #0]
    5bfa:	b2d2      	uxtb	r2, r2
    5bfc:	f042 0210 	orr.w	r2, r2, #16
    5c00:	b2d2      	uxtb	r2, r2
    5c02:	701a      	strb	r2, [r3, #0]
    5c04:	e00b      	b.n	5c1e <ground_calibrate+0x12ae>
    5c06:	f24a 43b8 	movw	r3, #42168	; 0xa4b8
    5c0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c0e:	781b      	ldrb	r3, [r3, #0]
    5c10:	3301      	adds	r3, #1
    5c12:	b2da      	uxtb	r2, r3
    5c14:	f24a 43b8 	movw	r3, #42168	; 0xa4b8
    5c18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c1c:	701a      	strb	r2, [r3, #0]
    }
}
else {}

//#endif
}
    5c1e:	bd80      	pop	{r7, pc}
    5c20:	20000109 	.word	0x20000109

00005c24 <pprz_mode_update>:

/** \fn inline uint8_t pprz_mode_update( void )
 *  \brief Update paparazzi mode
 */
inline uint8_t pprz_mode_update( void ) {
    5c24:	b480      	push	{r7}
    5c26:	b083      	sub	sp, #12
    5c28:	af00      	add	r7, sp, #0
  /** We remain in home mode until explicit reset from the RC */
  if (pprz_mode != PPRZ_MODE_HOME || CheckEvent(rc_event_1)) {
    5c2a:	f24a 439c 	movw	r3, #42140	; 0xa49c
    5c2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c32:	781b      	ldrb	r3, [r3, #0]
    5c34:	2b03      	cmp	r3, #3
    5c36:	d10c      	bne.n	5c52 <pprz_mode_update+0x2e>
    5c38:	f24a 43a0 	movw	r3, #42144	; 0xa4a0
    5c3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c40:	781b      	ldrb	r3, [r3, #0]
    5c42:	2b00      	cmp	r3, #0
    5c44:	d032      	beq.n	5cac <pprz_mode_update+0x88>
    5c46:	f24a 43a0 	movw	r3, #42144	; 0xa4a0
    5c4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c4e:	2200      	movs	r2, #0
    5c50:	701a      	strb	r2, [r3, #0]
    ModeUpdate(pprz_mode, PPRZ_MODE_OF_PULSE(from_fbw.channels[RADIO_MODE], from_fbw.status));
    5c52:	f24a 53c0 	movw	r3, #42432	; 0xa5c0
    5c56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c5a:	891b      	ldrh	r3, [r3, #8]
    5c5c:	b21b      	sxth	r3, r3
    5c5e:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    5c62:	dc0f      	bgt.n	5c84 <pprz_mode_update+0x60>
    5c64:	f24a 53c0 	movw	r3, #42432	; 0xa5c0
    5c68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c6c:	891b      	ldrh	r3, [r3, #8]
    5c6e:	b21a      	sxth	r2, r3
    5c70:	f64e 5341 	movw	r3, #60737	; 0xed41
    5c74:	f6cf 73ff 	movt	r3, #65535	; 0xffff
    5c78:	429a      	cmp	r2, r3
    5c7a:	bfb4      	ite	lt
    5c7c:	2300      	movlt	r3, #0
    5c7e:	2301      	movge	r3, #1
    5c80:	b2db      	uxtb	r3, r3
    5c82:	e000      	b.n	5c86 <pprz_mode_update+0x62>
    5c84:	2302      	movs	r3, #2
    5c86:	71fb      	strb	r3, [r7, #7]
    5c88:	f24a 439c 	movw	r3, #42140	; 0xa49c
    5c8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c90:	781b      	ldrb	r3, [r3, #0]
    5c92:	79fa      	ldrb	r2, [r7, #7]
    5c94:	429a      	cmp	r2, r3
    5c96:	d007      	beq.n	5ca8 <pprz_mode_update+0x84>
    5c98:	f24a 439c 	movw	r3, #42140	; 0xa49c
    5c9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ca0:	79fa      	ldrb	r2, [r7, #7]
    5ca2:	701a      	strb	r2, [r3, #0]
    5ca4:	2301      	movs	r3, #1
    5ca6:	e002      	b.n	5cae <pprz_mode_update+0x8a>
    5ca8:	2300      	movs	r3, #0
    5caa:	e000      	b.n	5cae <pprz_mode_update+0x8a>
  } else
    return FALSE;
    5cac:	2300      	movs	r3, #0
}
    5cae:	4618      	mov	r0, r3
    5cb0:	370c      	adds	r7, #12
    5cb2:	46bd      	mov	sp, r7
    5cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
    5cb8:	4770      	bx	lr
    5cba:	bf00      	nop

00005cbc <ir_estim_mode_update>:

#ifdef RADIO_LLS
/** \fn inline uint8_t ir_estim_mode_update( void )
 *  \brief update ir estimation if RADIO_LLS is true \n
 */
inline uint8_t ir_estim_mode_update( void ) {
    5cbc:	b480      	push	{r7}
    5cbe:	b083      	sub	sp, #12
    5cc0:	af00      	add	r7, sp, #0
  ModeUpdate(ir_estim_mode, IR_ESTIM_MODE_OF_PULSE(from_fbw.channels[RADIO_LLS]));
    5cc2:	f24a 53c0 	movw	r3, #42432	; 0xa5c0
    5cc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5cca:	89db      	ldrh	r3, [r3, #14]
    5ccc:	b21a      	sxth	r2, r3
    5cce:	f640 437f 	movw	r3, #3199	; 0xc7f
    5cd2:	429a      	cmp	r2, r3
    5cd4:	bfd4      	ite	le
    5cd6:	2300      	movle	r3, #0
    5cd8:	2301      	movgt	r3, #1
    5cda:	b2db      	uxtb	r3, r3
    5cdc:	71fb      	strb	r3, [r7, #7]
    5cde:	f240 1304 	movw	r3, #260	; 0x104
    5ce2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ce6:	781b      	ldrb	r3, [r3, #0]
    5ce8:	79fa      	ldrb	r2, [r7, #7]
    5cea:	429a      	cmp	r2, r3
    5cec:	d007      	beq.n	5cfe <ir_estim_mode_update+0x42>
    5cee:	f240 1304 	movw	r3, #260	; 0x104
    5cf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5cf6:	79fa      	ldrb	r2, [r7, #7]
    5cf8:	701a      	strb	r2, [r3, #0]
    5cfa:	2301      	movs	r3, #1
    5cfc:	e000      	b.n	5d00 <ir_estim_mode_update+0x44>
    5cfe:	2300      	movs	r3, #0
}
    5d00:	4618      	mov	r0, r3
    5d02:	370c      	adds	r7, #12
    5d04:	46bd      	mov	sp, r7
    5d06:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d0a:	4770      	bx	lr

00005d0c <mcu1_status_update>:


/** \fn inline uint8_t mcu1_status_update( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
inline uint8_t mcu1_status_update( void ) {
    5d0c:	b480      	push	{r7}
    5d0e:	b083      	sub	sp, #12
    5d10:	af00      	add	r7, sp, #0
  uint8_t new_mode = from_fbw.status;
    5d12:	f24a 53c0 	movw	r3, #42432	; 0xa5c0
    5d16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d1a:	7cdb      	ldrb	r3, [r3, #19]
    5d1c:	71fb      	strb	r3, [r7, #7]
  if (mcu1_status != new_mode) {
    5d1e:	f24a 43a3 	movw	r3, #42147	; 0xa4a3
    5d22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d26:	781b      	ldrb	r3, [r3, #0]
    5d28:	79fa      	ldrb	r2, [r7, #7]
    5d2a:	429a      	cmp	r2, r3
    5d2c:	d017      	beq.n	5d5e <mcu1_status_update+0x52>
    bool_t changed = ((mcu1_status&MASK_FBW_CHANGED) != (new_mode&MASK_FBW_CHANGED));
    5d2e:	f24a 43a3 	movw	r3, #42147	; 0xa4a3
    5d32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d36:	781b      	ldrb	r3, [r3, #0]
    5d38:	461a      	mov	r2, r3
    5d3a:	79fb      	ldrb	r3, [r7, #7]
    5d3c:	4053      	eors	r3, r2
    5d3e:	f003 0303 	and.w	r3, r3, #3
    5d42:	2b00      	cmp	r3, #0
    5d44:	bf0c      	ite	eq
    5d46:	2300      	moveq	r3, #0
    5d48:	2301      	movne	r3, #1
    5d4a:	b2db      	uxtb	r3, r3
    5d4c:	71bb      	strb	r3, [r7, #6]
    mcu1_status = new_mode;
    5d4e:	f24a 43a3 	movw	r3, #42147	; 0xa4a3
    5d52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d56:	79fa      	ldrb	r2, [r7, #7]
    5d58:	701a      	strb	r2, [r3, #0]
    return changed;
    5d5a:	79bb      	ldrb	r3, [r7, #6]
    5d5c:	e000      	b.n	5d60 <mcu1_status_update+0x54>
  }
  return FALSE;
    5d5e:	2300      	movs	r3, #0
}
    5d60:	4618      	mov	r0, r3
    5d62:	370c      	adds	r7, #12
    5d64:	46bd      	mov	sp, r7
    5d66:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d6a:	4770      	bx	lr

00005d6c <events_update>:
 EventUpdate(_cpt, (inflight_calib_mode==IF_CALIB_MODE_NONE && from_fbw.channels[_channel]<(int)(-0.75*MAX_PPRZ)), _event)

/** \fn static inline void events_update( void )
 *  @@@@@ A FIXER @@@@@
 */
static inline void events_update( void ) {
    5d6c:	b480      	push	{r7}
    5d6e:	af00      	add	r7, sp, #0
  static uint16_t event1_cpt = 0;
  static uint16_t event2_cpt = 0;
  EventPos(event1_cpt, RADIO_GAIN1, rc_event_1);
    5d70:	f64a 23cc 	movw	r3, #43724	; 0xaacc
    5d74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d78:	781b      	ldrb	r3, [r3, #0]
    5d7a:	2b00      	cmp	r3, #0
    5d7c:	d12a      	bne.n	5dd4 <events_update+0x68>
    5d7e:	f24a 53c0 	movw	r3, #42432	; 0xa5c0
    5d82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d86:	895b      	ldrh	r3, [r3, #10]
    5d88:	b21b      	sxth	r3, r3
    5d8a:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
    5d8e:	dd21      	ble.n	5dd4 <events_update+0x68>
    5d90:	f24a 43b4 	movw	r3, #42164	; 0xa4b4
    5d94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d98:	881b      	ldrh	r3, [r3, #0]
    5d9a:	2b13      	cmp	r3, #19
    5d9c:	d819      	bhi.n	5dd2 <events_update+0x66>
    5d9e:	f24a 43b4 	movw	r3, #42164	; 0xa4b4
    5da2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5da6:	881b      	ldrh	r3, [r3, #0]
    5da8:	3301      	adds	r3, #1
    5daa:	b29a      	uxth	r2, r3
    5dac:	f24a 43b4 	movw	r3, #42164	; 0xa4b4
    5db0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5db4:	801a      	strh	r2, [r3, #0]
    5db6:	f24a 43b4 	movw	r3, #42164	; 0xa4b4
    5dba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5dbe:	881b      	ldrh	r3, [r3, #0]
    5dc0:	2b14      	cmp	r3, #20
    5dc2:	d106      	bne.n	5dd2 <events_update+0x66>
    5dc4:	f24a 43a0 	movw	r3, #42144	; 0xa4a0
    5dc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5dcc:	2201      	movs	r2, #1
    5dce:	701a      	strb	r2, [r3, #0]
    5dd0:	e00c      	b.n	5dec <events_update+0x80>
    5dd2:	e00b      	b.n	5dec <events_update+0x80>
    5dd4:	f24a 43b4 	movw	r3, #42164	; 0xa4b4
    5dd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ddc:	2200      	movs	r2, #0
    5dde:	801a      	strh	r2, [r3, #0]
    5de0:	f24a 43a0 	movw	r3, #42144	; 0xa4a0
    5de4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5de8:	2200      	movs	r2, #0
    5dea:	701a      	strb	r2, [r3, #0]
  EventNeg(event2_cpt, RADIO_GAIN1, rc_event_2);
    5dec:	f64a 23cc 	movw	r3, #43724	; 0xaacc
    5df0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5df4:	781b      	ldrb	r3, [r3, #0]
    5df6:	2b00      	cmp	r3, #0
    5df8:	d12a      	bne.n	5e50 <events_update+0xe4>
    5dfa:	f24a 53c0 	movw	r3, #42432	; 0xa5c0
    5dfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e02:	895b      	ldrh	r3, [r3, #10]
    5e04:	b21b      	sxth	r3, r3
    5e06:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
    5e0a:	da21      	bge.n	5e50 <events_update+0xe4>
    5e0c:	f24a 43b6 	movw	r3, #42166	; 0xa4b6
    5e10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e14:	881b      	ldrh	r3, [r3, #0]
    5e16:	2b13      	cmp	r3, #19
    5e18:	d819      	bhi.n	5e4e <events_update+0xe2>
    5e1a:	f24a 43b6 	movw	r3, #42166	; 0xa4b6
    5e1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e22:	881b      	ldrh	r3, [r3, #0]
    5e24:	3301      	adds	r3, #1
    5e26:	b29a      	uxth	r2, r3
    5e28:	f24a 43b6 	movw	r3, #42166	; 0xa4b6
    5e2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e30:	801a      	strh	r2, [r3, #0]
    5e32:	f24a 43b6 	movw	r3, #42166	; 0xa4b6
    5e36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e3a:	881b      	ldrh	r3, [r3, #0]
    5e3c:	2b14      	cmp	r3, #20
    5e3e:	d106      	bne.n	5e4e <events_update+0xe2>
    5e40:	f24a 43a1 	movw	r3, #42145	; 0xa4a1
    5e44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e48:	2201      	movs	r2, #1
    5e4a:	701a      	strb	r2, [r3, #0]
    5e4c:	e00c      	b.n	5e68 <events_update+0xfc>
    5e4e:	e00b      	b.n	5e68 <events_update+0xfc>
    5e50:	f24a 43b6 	movw	r3, #42166	; 0xa4b6
    5e54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e58:	2200      	movs	r2, #0
    5e5a:	801a      	strh	r2, [r3, #0]
    5e5c:	f24a 43a1 	movw	r3, #42145	; 0xa4a1
    5e60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e64:	2200      	movs	r2, #0
    5e66:	701a      	strb	r2, [r3, #0]
}  
    5e68:	46bd      	mov	sp, r7
    5e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e6e:	4770      	bx	lr

00005e70 <copy_from_to_fbw>:


/** \fn inline void copy_from_to_fbw ( void )
 *  \brief Send back uncontrolled channels (only rudder)
 */
inline void copy_from_to_fbw ( void ) {
    5e70:	b480      	push	{r7}
    5e72:	af00      	add	r7, sp, #0
  to_fbw.channels[RADIO_YAW] = from_fbw.channels[RADIO_YAW];
    5e74:	f24a 53c0 	movw	r3, #42432	; 0xa5c0
    5e78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e7c:	88da      	ldrh	r2, [r3, #6]
    5e7e:	f24a 53d8 	movw	r3, #42456	; 0xa5d8
    5e82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e86:	80da      	strh	r2, [r3, #6]
#ifdef ANTON_T7
  to_fbw.channels[RADIO_PITCH] = from_fbw.channels[RADIO_PITCH];
#endif
  to_fbw.status = 0;
    5e88:	f24a 53d8 	movw	r3, #42456	; 0xa5d8
    5e8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e90:	2200      	movs	r2, #0
    5e92:	74da      	strb	r2, [r3, #19]
}
    5e94:	46bd      	mov	sp, r7
    5e96:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e9a:	4770      	bx	lr

00005e9c <send_boot>:
/** \fn inline void reporting_task( void )
 *  \brief Send a serie of initialisation messages followed by a stream of periodic ones\n
 * Called at 20Hz.
 */

void send_boot(void){
    5e9c:	b480      	push	{r7}
    5e9e:	af00      	add	r7, sp, #0
  /** initialisation phase during boot */
  //vPrintString("S_13 reporting_task start!\n\r");
  //add by wanbo
  //if (boot) 
  {
      DOWNLINK_SEND_BOOT(&version);
    5ea0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5ea4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ea8:	781a      	ldrb	r2, [r3, #0]
    5eaa:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    5eae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5eb2:	781b      	ldrb	r3, [r3, #0]
    5eb4:	b2db      	uxtb	r3, r3
    5eb6:	429a      	cmp	r2, r3
    5eb8:	d313      	bcc.n	5ee2 <send_boot+0x46>
    5eba:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    5ebe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ec2:	781b      	ldrb	r3, [r3, #0]
    5ec4:	b2db      	uxtb	r3, r3
    5ec6:	461a      	mov	r2, r3
    5ec8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5ecc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ed0:	781b      	ldrb	r3, [r3, #0]
    5ed2:	1ad3      	subs	r3, r2, r3
    5ed4:	33ff      	adds	r3, #255	; 0xff
    5ed6:	2b06      	cmp	r3, #6
    5ed8:	bfd4      	ite	le
    5eda:	2300      	movle	r3, #0
    5edc:	2301      	movgt	r3, #1
    5ede:	b2db      	uxtb	r3, r3
    5ee0:	e011      	b.n	5f06 <send_boot+0x6a>
    5ee2:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    5ee6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5eea:	781b      	ldrb	r3, [r3, #0]
    5eec:	b2db      	uxtb	r3, r3
    5eee:	461a      	mov	r2, r3
    5ef0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5ef4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ef8:	781b      	ldrb	r3, [r3, #0]
    5efa:	1ad3      	subs	r3, r2, r3
    5efc:	2b06      	cmp	r3, #6
    5efe:	bfd4      	ite	le
    5f00:	2300      	movle	r3, #0
    5f02:	2301      	movgt	r3, #1
    5f04:	b2db      	uxtb	r3, r3
    5f06:	2b00      	cmp	r3, #0
    5f08:	f000 8194 	beq.w	6234 <send_boot+0x398>
    5f0c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5f10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f14:	781b      	ldrb	r3, [r3, #0]
    5f16:	461a      	mov	r2, r3
    5f18:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    5f1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f20:	2105      	movs	r1, #5
    5f22:	5499      	strb	r1, [r3, r2]
    5f24:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5f28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f2c:	781b      	ldrb	r3, [r3, #0]
    5f2e:	3301      	adds	r3, #1
    5f30:	b2da      	uxtb	r2, r3
    5f32:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5f36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f3a:	701a      	strb	r2, [r3, #0]
    5f3c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5f40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f44:	781b      	ldrb	r3, [r3, #0]
    5f46:	2bff      	cmp	r3, #255	; 0xff
    5f48:	d105      	bne.n	5f56 <send_boot+0xba>
    5f4a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5f4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f52:	2200      	movs	r2, #0
    5f54:	701a      	strb	r2, [r3, #0]
    5f56:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5f5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f5e:	781b      	ldrb	r3, [r3, #0]
    5f60:	461a      	mov	r2, r3
    5f62:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    5f66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f6a:	2101      	movs	r1, #1
    5f6c:	5499      	strb	r1, [r3, r2]
    5f6e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5f72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f76:	781b      	ldrb	r3, [r3, #0]
    5f78:	3301      	adds	r3, #1
    5f7a:	b2da      	uxtb	r2, r3
    5f7c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5f80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f84:	701a      	strb	r2, [r3, #0]
    5f86:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5f8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f8e:	781b      	ldrb	r3, [r3, #0]
    5f90:	2bff      	cmp	r3, #255	; 0xff
    5f92:	d105      	bne.n	5fa0 <send_boot+0x104>
    5f94:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5f98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f9c:	2200      	movs	r2, #0
    5f9e:	701a      	strb	r2, [r3, #0]
    5fa0:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    5fa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fa8:	2201      	movs	r2, #1
    5faa:	701a      	strb	r2, [r3, #0]
    5fac:	f24a 53be 	movw	r3, #42430	; 0xa5be
    5fb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fb4:	2201      	movs	r2, #1
    5fb6:	701a      	strb	r2, [r3, #0]
    5fb8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5fbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fc0:	781b      	ldrb	r3, [r3, #0]
    5fc2:	461a      	mov	r2, r3
    5fc4:	f247 3372 	movw	r3, #29554	; 0x7372
    5fc8:	f2c0 0301 	movt	r3, #1
    5fcc:	7819      	ldrb	r1, [r3, #0]
    5fce:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    5fd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fd6:	5499      	strb	r1, [r3, r2]
    5fd8:	f247 3372 	movw	r3, #29554	; 0x7372
    5fdc:	f2c0 0301 	movt	r3, #1
    5fe0:	781a      	ldrb	r2, [r3, #0]
    5fe2:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    5fe6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fea:	781b      	ldrb	r3, [r3, #0]
    5fec:	4413      	add	r3, r2
    5fee:	b2da      	uxtb	r2, r3
    5ff0:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    5ff4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ff8:	701a      	strb	r2, [r3, #0]
    5ffa:	f24a 53be 	movw	r3, #42430	; 0xa5be
    5ffe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6002:	781a      	ldrb	r2, [r3, #0]
    6004:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    6008:	f2c2 0300 	movt	r3, #8192	; 0x2000
    600c:	781b      	ldrb	r3, [r3, #0]
    600e:	4413      	add	r3, r2
    6010:	b2da      	uxtb	r2, r3
    6012:	f24a 53be 	movw	r3, #42430	; 0xa5be
    6016:	f2c2 0300 	movt	r3, #8192	; 0x2000
    601a:	701a      	strb	r2, [r3, #0]
    601c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6020:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6024:	781b      	ldrb	r3, [r3, #0]
    6026:	3301      	adds	r3, #1
    6028:	b2da      	uxtb	r2, r3
    602a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    602e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6032:	701a      	strb	r2, [r3, #0]
    6034:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6038:	f2c2 0300 	movt	r3, #8192	; 0x2000
    603c:	781b      	ldrb	r3, [r3, #0]
    603e:	2bff      	cmp	r3, #255	; 0xff
    6040:	d105      	bne.n	604e <send_boot+0x1b2>
    6042:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6046:	f2c2 0300 	movt	r3, #8192	; 0x2000
    604a:	2200      	movs	r2, #0
    604c:	701a      	strb	r2, [r3, #0]
    604e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6052:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6056:	781b      	ldrb	r3, [r3, #0]
    6058:	461a      	mov	r2, r3
    605a:	f247 3372 	movw	r3, #29554	; 0x7372
    605e:	f2c0 0301 	movt	r3, #1
    6062:	7859      	ldrb	r1, [r3, #1]
    6064:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    6068:	f2c2 0300 	movt	r3, #8192	; 0x2000
    606c:	5499      	strb	r1, [r3, r2]
    606e:	4b88      	ldr	r3, [pc, #544]	; (6290 <send_boot+0x3f4>)
    6070:	781a      	ldrb	r2, [r3, #0]
    6072:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    6076:	f2c2 0300 	movt	r3, #8192	; 0x2000
    607a:	781b      	ldrb	r3, [r3, #0]
    607c:	4413      	add	r3, r2
    607e:	b2da      	uxtb	r2, r3
    6080:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    6084:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6088:	701a      	strb	r2, [r3, #0]
    608a:	f24a 53be 	movw	r3, #42430	; 0xa5be
    608e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6092:	781a      	ldrb	r2, [r3, #0]
    6094:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    6098:	f2c2 0300 	movt	r3, #8192	; 0x2000
    609c:	781b      	ldrb	r3, [r3, #0]
    609e:	4413      	add	r3, r2
    60a0:	b2da      	uxtb	r2, r3
    60a2:	f24a 53be 	movw	r3, #42430	; 0xa5be
    60a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60aa:	701a      	strb	r2, [r3, #0]
    60ac:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    60b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60b4:	781b      	ldrb	r3, [r3, #0]
    60b6:	3301      	adds	r3, #1
    60b8:	b2da      	uxtb	r2, r3
    60ba:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    60be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60c2:	701a      	strb	r2, [r3, #0]
    60c4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    60c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60cc:	781b      	ldrb	r3, [r3, #0]
    60ce:	2bff      	cmp	r3, #255	; 0xff
    60d0:	d105      	bne.n	60de <send_boot+0x242>
    60d2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    60d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60da:	2200      	movs	r2, #0
    60dc:	701a      	strb	r2, [r3, #0]
    60de:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    60e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60e6:	781b      	ldrb	r3, [r3, #0]
    60e8:	461a      	mov	r2, r3
    60ea:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    60ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60f2:	7819      	ldrb	r1, [r3, #0]
    60f4:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    60f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60fc:	5499      	strb	r1, [r3, r2]
    60fe:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6102:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6106:	781b      	ldrb	r3, [r3, #0]
    6108:	3301      	adds	r3, #1
    610a:	b2da      	uxtb	r2, r3
    610c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6110:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6114:	701a      	strb	r2, [r3, #0]
    6116:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    611a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    611e:	781b      	ldrb	r3, [r3, #0]
    6120:	2bff      	cmp	r3, #255	; 0xff
    6122:	d105      	bne.n	6130 <send_boot+0x294>
    6124:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6128:	f2c2 0300 	movt	r3, #8192	; 0x2000
    612c:	2200      	movs	r2, #0
    612e:	701a      	strb	r2, [r3, #0]
    6130:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6134:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6138:	781b      	ldrb	r3, [r3, #0]
    613a:	461a      	mov	r2, r3
    613c:	f24a 53be 	movw	r3, #42430	; 0xa5be
    6140:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6144:	7819      	ldrb	r1, [r3, #0]
    6146:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    614a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    614e:	5499      	strb	r1, [r3, r2]
    6150:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6154:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6158:	781b      	ldrb	r3, [r3, #0]
    615a:	3301      	adds	r3, #1
    615c:	b2da      	uxtb	r2, r3
    615e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6162:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6166:	701a      	strb	r2, [r3, #0]
    6168:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    616c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6170:	781b      	ldrb	r3, [r3, #0]
    6172:	2bff      	cmp	r3, #255	; 0xff
    6174:	d105      	bne.n	6182 <send_boot+0x2e6>
    6176:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    617a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    617e:	2200      	movs	r2, #0
    6180:	701a      	strb	r2, [r3, #0]
    6182:	f242 0339 	movw	r3, #8249	; 0x2039
    6186:	f2c2 0300 	movt	r3, #8192	; 0x2000
    618a:	781b      	ldrb	r3, [r3, #0]
    618c:	b2db      	uxtb	r3, r3
    618e:	f003 0310 	and.w	r3, r3, #16
    6192:	2b00      	cmp	r3, #0
    6194:	d15a      	bne.n	624c <send_boot+0x3b0>
    6196:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    619a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    619e:	781b      	ldrb	r3, [r3, #0]
    61a0:	b2db      	uxtb	r3, r3
    61a2:	461a      	mov	r2, r3
    61a4:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    61a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61ac:	5c9a      	ldrb	r2, [r3, r2]
    61ae:	f24a 53bb 	movw	r3, #42427	; 0xa5bb
    61b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61b6:	701a      	strb	r2, [r3, #0]
    61b8:	f24a 53bc 	movw	r3, #42428	; 0xa5bc
    61bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61c0:	2200      	movs	r2, #0
    61c2:	701a      	strb	r2, [r3, #0]
    61c4:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    61c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61cc:	781b      	ldrb	r3, [r3, #0]
    61ce:	b2db      	uxtb	r3, r3
    61d0:	3301      	adds	r3, #1
    61d2:	b2da      	uxtb	r2, r3
    61d4:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    61d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61dc:	701a      	strb	r2, [r3, #0]
    61de:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    61e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61e6:	781b      	ldrb	r3, [r3, #0]
    61e8:	b2db      	uxtb	r3, r3
    61ea:	2bff      	cmp	r3, #255	; 0xff
    61ec:	d105      	bne.n	61fa <send_boot+0x35e>
    61ee:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    61f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61f6:	2200      	movs	r2, #0
    61f8:	701a      	strb	r2, [r3, #0]
    61fa:	f242 0338 	movw	r3, #8248	; 0x2038
    61fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6202:	f242 0238 	movw	r2, #8248	; 0x2038
    6206:	f2c2 0200 	movt	r2, #8192	; 0x2000
    620a:	7812      	ldrb	r2, [r2, #0]
    620c:	b2d2      	uxtb	r2, r2
    620e:	f042 0201 	orr.w	r2, r2, #1
    6212:	b2d2      	uxtb	r2, r2
    6214:	701a      	strb	r2, [r3, #0]
    6216:	f242 0339 	movw	r3, #8249	; 0x2039
    621a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    621e:	f242 0239 	movw	r2, #8249	; 0x2039
    6222:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6226:	7812      	ldrb	r2, [r2, #0]
    6228:	b2d2      	uxtb	r2, r2
    622a:	f042 0210 	orr.w	r2, r2, #16
    622e:	b2d2      	uxtb	r2, r2
    6230:	701a      	strb	r2, [r3, #0]
    6232:	e00b      	b.n	624c <send_boot+0x3b0>
    6234:	f24a 43b8 	movw	r3, #42168	; 0xa4b8
    6238:	f2c2 0300 	movt	r3, #8192	; 0x2000
    623c:	781b      	ldrb	r3, [r3, #0]
    623e:	3301      	adds	r3, #1
    6240:	b2da      	uxtb	r2, r3
    6242:	f24a 43b8 	movw	r3, #42168	; 0xa4b8
    6246:	f2c2 0300 	movt	r3, #8192	; 0x2000
    624a:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    624c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6250:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6254:	781a      	ldrb	r2, [r3, #0]
    6256:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    625a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    625e:	781b      	ldrb	r3, [r3, #0]
    6260:	b2db      	uxtb	r3, r3
    6262:	429a      	cmp	r2, r3
    6264:	d316      	bcc.n	6294 <send_boot+0x3f8>
    6266:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    626a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    626e:	781b      	ldrb	r3, [r3, #0]
    6270:	b2db      	uxtb	r3, r3
    6272:	461a      	mov	r2, r3
    6274:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6278:	f2c2 0300 	movt	r3, #8192	; 0x2000
    627c:	781b      	ldrb	r3, [r3, #0]
    627e:	1ad3      	subs	r3, r2, r3
    6280:	33ff      	adds	r3, #255	; 0xff
    6282:	2b14      	cmp	r3, #20
    6284:	bfd4      	ite	le
    6286:	2300      	movle	r3, #0
    6288:	2301      	movgt	r3, #1
    628a:	b2db      	uxtb	r3, r3
    628c:	e014      	b.n	62b8 <send_boot+0x41c>
    628e:	bf00      	nop
    6290:	00017373 	.word	0x00017373
    6294:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    6298:	f2c2 0300 	movt	r3, #8192	; 0x2000
    629c:	781b      	ldrb	r3, [r3, #0]
    629e:	b2db      	uxtb	r3, r3
    62a0:	461a      	mov	r2, r3
    62a2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    62a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62aa:	781b      	ldrb	r3, [r3, #0]
    62ac:	1ad3      	subs	r3, r2, r3
    62ae:	2b14      	cmp	r3, #20
    62b0:	bfd4      	ite	le
    62b2:	2300      	movle	r3, #0
    62b4:	2301      	movgt	r3, #1
    62b6:	b2db      	uxtb	r3, r3
    62b8:	2b00      	cmp	r3, #0
    62ba:	f000 85a5 	beq.w	6e08 <send_boot+0xf6c>
    62be:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    62c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62c6:	781b      	ldrb	r3, [r3, #0]
    62c8:	461a      	mov	r2, r3
    62ca:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    62ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62d2:	2105      	movs	r1, #5
    62d4:	5499      	strb	r1, [r3, r2]
    62d6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    62da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62de:	781b      	ldrb	r3, [r3, #0]
    62e0:	3301      	adds	r3, #1
    62e2:	b2da      	uxtb	r2, r3
    62e4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    62e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62ec:	701a      	strb	r2, [r3, #0]
    62ee:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    62f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62f6:	781b      	ldrb	r3, [r3, #0]
    62f8:	2bff      	cmp	r3, #255	; 0xff
    62fa:	d105      	bne.n	6308 <send_boot+0x46c>
    62fc:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6300:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6304:	2200      	movs	r2, #0
    6306:	701a      	strb	r2, [r3, #0]
    6308:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    630c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6310:	781b      	ldrb	r3, [r3, #0]
    6312:	461a      	mov	r2, r3
    6314:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    6318:	f2c2 0300 	movt	r3, #8192	; 0x2000
    631c:	2105      	movs	r1, #5
    631e:	5499      	strb	r1, [r3, r2]
    6320:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6324:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6328:	781b      	ldrb	r3, [r3, #0]
    632a:	3301      	adds	r3, #1
    632c:	b2da      	uxtb	r2, r3
    632e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6332:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6336:	701a      	strb	r2, [r3, #0]
    6338:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    633c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6340:	781b      	ldrb	r3, [r3, #0]
    6342:	2bff      	cmp	r3, #255	; 0xff
    6344:	d105      	bne.n	6352 <send_boot+0x4b6>
    6346:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    634a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    634e:	2200      	movs	r2, #0
    6350:	701a      	strb	r2, [r3, #0]
    6352:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    6356:	f2c2 0300 	movt	r3, #8192	; 0x2000
    635a:	2205      	movs	r2, #5
    635c:	701a      	strb	r2, [r3, #0]
    635e:	f24a 53be 	movw	r3, #42430	; 0xa5be
    6362:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6366:	2205      	movs	r2, #5
    6368:	701a      	strb	r2, [r3, #0]
    636a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    636e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6372:	781b      	ldrb	r3, [r3, #0]
    6374:	461a      	mov	r2, r3
    6376:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    637a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    637e:	7819      	ldrb	r1, [r3, #0]
    6380:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    6384:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6388:	5499      	strb	r1, [r3, r2]
    638a:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    638e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6392:	781a      	ldrb	r2, [r3, #0]
    6394:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    6398:	f2c2 0300 	movt	r3, #8192	; 0x2000
    639c:	781b      	ldrb	r3, [r3, #0]
    639e:	4413      	add	r3, r2
    63a0:	b2da      	uxtb	r2, r3
    63a2:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    63a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63aa:	701a      	strb	r2, [r3, #0]
    63ac:	f24a 53be 	movw	r3, #42430	; 0xa5be
    63b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63b4:	781a      	ldrb	r2, [r3, #0]
    63b6:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    63ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63be:	781b      	ldrb	r3, [r3, #0]
    63c0:	4413      	add	r3, r2
    63c2:	b2da      	uxtb	r2, r3
    63c4:	f24a 53be 	movw	r3, #42430	; 0xa5be
    63c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63cc:	701a      	strb	r2, [r3, #0]
    63ce:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    63d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63d6:	781b      	ldrb	r3, [r3, #0]
    63d8:	3301      	adds	r3, #1
    63da:	b2da      	uxtb	r2, r3
    63dc:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    63e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63e4:	701a      	strb	r2, [r3, #0]
    63e6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    63ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63ee:	781b      	ldrb	r3, [r3, #0]
    63f0:	2bff      	cmp	r3, #255	; 0xff
    63f2:	d105      	bne.n	6400 <send_boot+0x564>
    63f4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    63f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63fc:	2200      	movs	r2, #0
    63fe:	701a      	strb	r2, [r3, #0]
    6400:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6404:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6408:	781b      	ldrb	r3, [r3, #0]
    640a:	461a      	mov	r2, r3
    640c:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    6410:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6414:	7859      	ldrb	r1, [r3, #1]
    6416:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    641a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    641e:	5499      	strb	r1, [r3, r2]
    6420:	4bd1      	ldr	r3, [pc, #836]	; (6768 <send_boot+0x8cc>)
    6422:	781a      	ldrb	r2, [r3, #0]
    6424:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    6428:	f2c2 0300 	movt	r3, #8192	; 0x2000
    642c:	781b      	ldrb	r3, [r3, #0]
    642e:	4413      	add	r3, r2
    6430:	b2da      	uxtb	r2, r3
    6432:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    6436:	f2c2 0300 	movt	r3, #8192	; 0x2000
    643a:	701a      	strb	r2, [r3, #0]
    643c:	f24a 53be 	movw	r3, #42430	; 0xa5be
    6440:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6444:	781a      	ldrb	r2, [r3, #0]
    6446:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    644a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    644e:	781b      	ldrb	r3, [r3, #0]
    6450:	4413      	add	r3, r2
    6452:	b2da      	uxtb	r2, r3
    6454:	f24a 53be 	movw	r3, #42430	; 0xa5be
    6458:	f2c2 0300 	movt	r3, #8192	; 0x2000
    645c:	701a      	strb	r2, [r3, #0]
    645e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6462:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6466:	781b      	ldrb	r3, [r3, #0]
    6468:	3301      	adds	r3, #1
    646a:	b2da      	uxtb	r2, r3
    646c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6470:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6474:	701a      	strb	r2, [r3, #0]
    6476:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    647a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    647e:	781b      	ldrb	r3, [r3, #0]
    6480:	2bff      	cmp	r3, #255	; 0xff
    6482:	d105      	bne.n	6490 <send_boot+0x5f4>
    6484:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6488:	f2c2 0300 	movt	r3, #8192	; 0x2000
    648c:	2200      	movs	r2, #0
    648e:	701a      	strb	r2, [r3, #0]
    6490:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6494:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6498:	781b      	ldrb	r3, [r3, #0]
    649a:	461a      	mov	r2, r3
    649c:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    64a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64a4:	7899      	ldrb	r1, [r3, #2]
    64a6:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    64aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64ae:	5499      	strb	r1, [r3, r2]
    64b0:	4bae      	ldr	r3, [pc, #696]	; (676c <send_boot+0x8d0>)
    64b2:	781a      	ldrb	r2, [r3, #0]
    64b4:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    64b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64bc:	781b      	ldrb	r3, [r3, #0]
    64be:	4413      	add	r3, r2
    64c0:	b2da      	uxtb	r2, r3
    64c2:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    64c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64ca:	701a      	strb	r2, [r3, #0]
    64cc:	f24a 53be 	movw	r3, #42430	; 0xa5be
    64d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64d4:	781a      	ldrb	r2, [r3, #0]
    64d6:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    64da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64de:	781b      	ldrb	r3, [r3, #0]
    64e0:	4413      	add	r3, r2
    64e2:	b2da      	uxtb	r2, r3
    64e4:	f24a 53be 	movw	r3, #42430	; 0xa5be
    64e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64ec:	701a      	strb	r2, [r3, #0]
    64ee:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    64f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64f6:	781b      	ldrb	r3, [r3, #0]
    64f8:	3301      	adds	r3, #1
    64fa:	b2da      	uxtb	r2, r3
    64fc:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6500:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6504:	701a      	strb	r2, [r3, #0]
    6506:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    650a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    650e:	781b      	ldrb	r3, [r3, #0]
    6510:	2bff      	cmp	r3, #255	; 0xff
    6512:	d105      	bne.n	6520 <send_boot+0x684>
    6514:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6518:	f2c2 0300 	movt	r3, #8192	; 0x2000
    651c:	2200      	movs	r2, #0
    651e:	701a      	strb	r2, [r3, #0]
    6520:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6524:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6528:	781b      	ldrb	r3, [r3, #0]
    652a:	461a      	mov	r2, r3
    652c:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    6530:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6534:	78d9      	ldrb	r1, [r3, #3]
    6536:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    653a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    653e:	5499      	strb	r1, [r3, r2]
    6540:	4b8b      	ldr	r3, [pc, #556]	; (6770 <send_boot+0x8d4>)
    6542:	781a      	ldrb	r2, [r3, #0]
    6544:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    6548:	f2c2 0300 	movt	r3, #8192	; 0x2000
    654c:	781b      	ldrb	r3, [r3, #0]
    654e:	4413      	add	r3, r2
    6550:	b2da      	uxtb	r2, r3
    6552:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    6556:	f2c2 0300 	movt	r3, #8192	; 0x2000
    655a:	701a      	strb	r2, [r3, #0]
    655c:	f24a 53be 	movw	r3, #42430	; 0xa5be
    6560:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6564:	781a      	ldrb	r2, [r3, #0]
    6566:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    656a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    656e:	781b      	ldrb	r3, [r3, #0]
    6570:	4413      	add	r3, r2
    6572:	b2da      	uxtb	r2, r3
    6574:	f24a 53be 	movw	r3, #42430	; 0xa5be
    6578:	f2c2 0300 	movt	r3, #8192	; 0x2000
    657c:	701a      	strb	r2, [r3, #0]
    657e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6582:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6586:	781b      	ldrb	r3, [r3, #0]
    6588:	3301      	adds	r3, #1
    658a:	b2da      	uxtb	r2, r3
    658c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6590:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6594:	701a      	strb	r2, [r3, #0]
    6596:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    659a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    659e:	781b      	ldrb	r3, [r3, #0]
    65a0:	2bff      	cmp	r3, #255	; 0xff
    65a2:	d105      	bne.n	65b0 <send_boot+0x714>
    65a4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    65a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65ac:	2200      	movs	r2, #0
    65ae:	701a      	strb	r2, [r3, #0]
    65b0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    65b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65b8:	781b      	ldrb	r3, [r3, #0]
    65ba:	461a      	mov	r2, r3
    65bc:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    65c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65c4:	7819      	ldrb	r1, [r3, #0]
    65c6:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    65ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65ce:	5499      	strb	r1, [r3, r2]
    65d0:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    65d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65d8:	781a      	ldrb	r2, [r3, #0]
    65da:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    65de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65e2:	781b      	ldrb	r3, [r3, #0]
    65e4:	4413      	add	r3, r2
    65e6:	b2da      	uxtb	r2, r3
    65e8:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    65ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65f0:	701a      	strb	r2, [r3, #0]
    65f2:	f24a 53be 	movw	r3, #42430	; 0xa5be
    65f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65fa:	781a      	ldrb	r2, [r3, #0]
    65fc:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    6600:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6604:	781b      	ldrb	r3, [r3, #0]
    6606:	4413      	add	r3, r2
    6608:	b2da      	uxtb	r2, r3
    660a:	f24a 53be 	movw	r3, #42430	; 0xa5be
    660e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6612:	701a      	strb	r2, [r3, #0]
    6614:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6618:	f2c2 0300 	movt	r3, #8192	; 0x2000
    661c:	781b      	ldrb	r3, [r3, #0]
    661e:	3301      	adds	r3, #1
    6620:	b2da      	uxtb	r2, r3
    6622:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6626:	f2c2 0300 	movt	r3, #8192	; 0x2000
    662a:	701a      	strb	r2, [r3, #0]
    662c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6630:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6634:	781b      	ldrb	r3, [r3, #0]
    6636:	2bff      	cmp	r3, #255	; 0xff
    6638:	d105      	bne.n	6646 <send_boot+0x7aa>
    663a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    663e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6642:	2200      	movs	r2, #0
    6644:	701a      	strb	r2, [r3, #0]
    6646:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    664a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    664e:	781b      	ldrb	r3, [r3, #0]
    6650:	461a      	mov	r2, r3
    6652:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    6656:	f2c2 0300 	movt	r3, #8192	; 0x2000
    665a:	7859      	ldrb	r1, [r3, #1]
    665c:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    6660:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6664:	5499      	strb	r1, [r3, r2]
    6666:	4b43      	ldr	r3, [pc, #268]	; (6774 <send_boot+0x8d8>)
    6668:	781a      	ldrb	r2, [r3, #0]
    666a:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    666e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6672:	781b      	ldrb	r3, [r3, #0]
    6674:	4413      	add	r3, r2
    6676:	b2da      	uxtb	r2, r3
    6678:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    667c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6680:	701a      	strb	r2, [r3, #0]
    6682:	f24a 53be 	movw	r3, #42430	; 0xa5be
    6686:	f2c2 0300 	movt	r3, #8192	; 0x2000
    668a:	781a      	ldrb	r2, [r3, #0]
    668c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    6690:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6694:	781b      	ldrb	r3, [r3, #0]
    6696:	4413      	add	r3, r2
    6698:	b2da      	uxtb	r2, r3
    669a:	f24a 53be 	movw	r3, #42430	; 0xa5be
    669e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66a2:	701a      	strb	r2, [r3, #0]
    66a4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    66a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66ac:	781b      	ldrb	r3, [r3, #0]
    66ae:	3301      	adds	r3, #1
    66b0:	b2da      	uxtb	r2, r3
    66b2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    66b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66ba:	701a      	strb	r2, [r3, #0]
    66bc:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    66c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66c4:	781b      	ldrb	r3, [r3, #0]
    66c6:	2bff      	cmp	r3, #255	; 0xff
    66c8:	d105      	bne.n	66d6 <send_boot+0x83a>
    66ca:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    66ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66d2:	2200      	movs	r2, #0
    66d4:	701a      	strb	r2, [r3, #0]
    66d6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    66da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66de:	781b      	ldrb	r3, [r3, #0]
    66e0:	461a      	mov	r2, r3
    66e2:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    66e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66ea:	7899      	ldrb	r1, [r3, #2]
    66ec:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    66f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66f4:	5499      	strb	r1, [r3, r2]
    66f6:	4b20      	ldr	r3, [pc, #128]	; (6778 <send_boot+0x8dc>)
    66f8:	781a      	ldrb	r2, [r3, #0]
    66fa:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    66fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6702:	781b      	ldrb	r3, [r3, #0]
    6704:	4413      	add	r3, r2
    6706:	b2da      	uxtb	r2, r3
    6708:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    670c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6710:	701a      	strb	r2, [r3, #0]
    6712:	f24a 53be 	movw	r3, #42430	; 0xa5be
    6716:	f2c2 0300 	movt	r3, #8192	; 0x2000
    671a:	781a      	ldrb	r2, [r3, #0]
    671c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    6720:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6724:	781b      	ldrb	r3, [r3, #0]
    6726:	4413      	add	r3, r2
    6728:	b2da      	uxtb	r2, r3
    672a:	f24a 53be 	movw	r3, #42430	; 0xa5be
    672e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6732:	701a      	strb	r2, [r3, #0]
    6734:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6738:	f2c2 0300 	movt	r3, #8192	; 0x2000
    673c:	781b      	ldrb	r3, [r3, #0]
    673e:	3301      	adds	r3, #1
    6740:	b2da      	uxtb	r2, r3
    6742:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6746:	f2c2 0300 	movt	r3, #8192	; 0x2000
    674a:	701a      	strb	r2, [r3, #0]
    674c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6750:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6754:	781b      	ldrb	r3, [r3, #0]
    6756:	2bff      	cmp	r3, #255	; 0xff
    6758:	d110      	bne.n	677c <send_boot+0x8e0>
    675a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    675e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6762:	2200      	movs	r2, #0
    6764:	701a      	strb	r2, [r3, #0]
    6766:	e009      	b.n	677c <send_boot+0x8e0>
    6768:	2000aab1 	.word	0x2000aab1
    676c:	2000aab2 	.word	0x2000aab2
    6770:	2000aab3 	.word	0x2000aab3
    6774:	2000aab5 	.word	0x2000aab5
    6778:	2000aab6 	.word	0x2000aab6
    677c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6780:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6784:	781b      	ldrb	r3, [r3, #0]
    6786:	461a      	mov	r2, r3
    6788:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    678c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6790:	78d9      	ldrb	r1, [r3, #3]
    6792:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    6796:	f2c2 0300 	movt	r3, #8192	; 0x2000
    679a:	5499      	strb	r1, [r3, r2]
    679c:	4bd3      	ldr	r3, [pc, #844]	; (6aec <send_boot+0xc50>)
    679e:	781a      	ldrb	r2, [r3, #0]
    67a0:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    67a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67a8:	781b      	ldrb	r3, [r3, #0]
    67aa:	4413      	add	r3, r2
    67ac:	b2da      	uxtb	r2, r3
    67ae:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    67b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67b6:	701a      	strb	r2, [r3, #0]
    67b8:	f24a 53be 	movw	r3, #42430	; 0xa5be
    67bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67c0:	781a      	ldrb	r2, [r3, #0]
    67c2:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    67c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67ca:	781b      	ldrb	r3, [r3, #0]
    67cc:	4413      	add	r3, r2
    67ce:	b2da      	uxtb	r2, r3
    67d0:	f24a 53be 	movw	r3, #42430	; 0xa5be
    67d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67d8:	701a      	strb	r2, [r3, #0]
    67da:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    67de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67e2:	781b      	ldrb	r3, [r3, #0]
    67e4:	3301      	adds	r3, #1
    67e6:	b2da      	uxtb	r2, r3
    67e8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    67ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67f0:	701a      	strb	r2, [r3, #0]
    67f2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    67f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67fa:	781b      	ldrb	r3, [r3, #0]
    67fc:	2bff      	cmp	r3, #255	; 0xff
    67fe:	d105      	bne.n	680c <send_boot+0x970>
    6800:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6804:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6808:	2200      	movs	r2, #0
    680a:	701a      	strb	r2, [r3, #0]
    680c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6810:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6814:	781b      	ldrb	r3, [r3, #0]
    6816:	461a      	mov	r2, r3
    6818:	f64a 23ac 	movw	r3, #43692	; 0xaaac
    681c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6820:	7819      	ldrb	r1, [r3, #0]
    6822:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    6826:	f2c2 0300 	movt	r3, #8192	; 0x2000
    682a:	5499      	strb	r1, [r3, r2]
    682c:	f64a 23ac 	movw	r3, #43692	; 0xaaac
    6830:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6834:	781a      	ldrb	r2, [r3, #0]
    6836:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    683a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    683e:	781b      	ldrb	r3, [r3, #0]
    6840:	4413      	add	r3, r2
    6842:	b2da      	uxtb	r2, r3
    6844:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    6848:	f2c2 0300 	movt	r3, #8192	; 0x2000
    684c:	701a      	strb	r2, [r3, #0]
    684e:	f24a 53be 	movw	r3, #42430	; 0xa5be
    6852:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6856:	781a      	ldrb	r2, [r3, #0]
    6858:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    685c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6860:	781b      	ldrb	r3, [r3, #0]
    6862:	4413      	add	r3, r2
    6864:	b2da      	uxtb	r2, r3
    6866:	f24a 53be 	movw	r3, #42430	; 0xa5be
    686a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    686e:	701a      	strb	r2, [r3, #0]
    6870:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6874:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6878:	781b      	ldrb	r3, [r3, #0]
    687a:	3301      	adds	r3, #1
    687c:	b2da      	uxtb	r2, r3
    687e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6882:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6886:	701a      	strb	r2, [r3, #0]
    6888:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    688c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6890:	781b      	ldrb	r3, [r3, #0]
    6892:	2bff      	cmp	r3, #255	; 0xff
    6894:	d105      	bne.n	68a2 <send_boot+0xa06>
    6896:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    689a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    689e:	2200      	movs	r2, #0
    68a0:	701a      	strb	r2, [r3, #0]
    68a2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    68a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68aa:	781b      	ldrb	r3, [r3, #0]
    68ac:	461a      	mov	r2, r3
    68ae:	f64a 23ac 	movw	r3, #43692	; 0xaaac
    68b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68b6:	7859      	ldrb	r1, [r3, #1]
    68b8:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    68bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68c0:	5499      	strb	r1, [r3, r2]
    68c2:	4b8b      	ldr	r3, [pc, #556]	; (6af0 <send_boot+0xc54>)
    68c4:	781a      	ldrb	r2, [r3, #0]
    68c6:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    68ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68ce:	781b      	ldrb	r3, [r3, #0]
    68d0:	4413      	add	r3, r2
    68d2:	b2da      	uxtb	r2, r3
    68d4:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    68d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68dc:	701a      	strb	r2, [r3, #0]
    68de:	f24a 53be 	movw	r3, #42430	; 0xa5be
    68e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68e6:	781a      	ldrb	r2, [r3, #0]
    68e8:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    68ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68f0:	781b      	ldrb	r3, [r3, #0]
    68f2:	4413      	add	r3, r2
    68f4:	b2da      	uxtb	r2, r3
    68f6:	f24a 53be 	movw	r3, #42430	; 0xa5be
    68fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68fe:	701a      	strb	r2, [r3, #0]
    6900:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6904:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6908:	781b      	ldrb	r3, [r3, #0]
    690a:	3301      	adds	r3, #1
    690c:	b2da      	uxtb	r2, r3
    690e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6912:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6916:	701a      	strb	r2, [r3, #0]
    6918:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    691c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6920:	781b      	ldrb	r3, [r3, #0]
    6922:	2bff      	cmp	r3, #255	; 0xff
    6924:	d105      	bne.n	6932 <send_boot+0xa96>
    6926:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    692a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    692e:	2200      	movs	r2, #0
    6930:	701a      	strb	r2, [r3, #0]
    6932:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6936:	f2c2 0300 	movt	r3, #8192	; 0x2000
    693a:	781b      	ldrb	r3, [r3, #0]
    693c:	461a      	mov	r2, r3
    693e:	f64a 23ac 	movw	r3, #43692	; 0xaaac
    6942:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6946:	7899      	ldrb	r1, [r3, #2]
    6948:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    694c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6950:	5499      	strb	r1, [r3, r2]
    6952:	4b68      	ldr	r3, [pc, #416]	; (6af4 <send_boot+0xc58>)
    6954:	781a      	ldrb	r2, [r3, #0]
    6956:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    695a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    695e:	781b      	ldrb	r3, [r3, #0]
    6960:	4413      	add	r3, r2
    6962:	b2da      	uxtb	r2, r3
    6964:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    6968:	f2c2 0300 	movt	r3, #8192	; 0x2000
    696c:	701a      	strb	r2, [r3, #0]
    696e:	f24a 53be 	movw	r3, #42430	; 0xa5be
    6972:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6976:	781a      	ldrb	r2, [r3, #0]
    6978:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    697c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6980:	781b      	ldrb	r3, [r3, #0]
    6982:	4413      	add	r3, r2
    6984:	b2da      	uxtb	r2, r3
    6986:	f24a 53be 	movw	r3, #42430	; 0xa5be
    698a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    698e:	701a      	strb	r2, [r3, #0]
    6990:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6994:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6998:	781b      	ldrb	r3, [r3, #0]
    699a:	3301      	adds	r3, #1
    699c:	b2da      	uxtb	r2, r3
    699e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    69a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69a6:	701a      	strb	r2, [r3, #0]
    69a8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    69ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69b0:	781b      	ldrb	r3, [r3, #0]
    69b2:	2bff      	cmp	r3, #255	; 0xff
    69b4:	d105      	bne.n	69c2 <send_boot+0xb26>
    69b6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    69ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69be:	2200      	movs	r2, #0
    69c0:	701a      	strb	r2, [r3, #0]
    69c2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    69c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69ca:	781b      	ldrb	r3, [r3, #0]
    69cc:	461a      	mov	r2, r3
    69ce:	f64a 23ac 	movw	r3, #43692	; 0xaaac
    69d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69d6:	78d9      	ldrb	r1, [r3, #3]
    69d8:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    69dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69e0:	5499      	strb	r1, [r3, r2]
    69e2:	4b45      	ldr	r3, [pc, #276]	; (6af8 <send_boot+0xc5c>)
    69e4:	781a      	ldrb	r2, [r3, #0]
    69e6:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    69ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69ee:	781b      	ldrb	r3, [r3, #0]
    69f0:	4413      	add	r3, r2
    69f2:	b2da      	uxtb	r2, r3
    69f4:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    69f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69fc:	701a      	strb	r2, [r3, #0]
    69fe:	f24a 53be 	movw	r3, #42430	; 0xa5be
    6a02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a06:	781a      	ldrb	r2, [r3, #0]
    6a08:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    6a0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a10:	781b      	ldrb	r3, [r3, #0]
    6a12:	4413      	add	r3, r2
    6a14:	b2da      	uxtb	r2, r3
    6a16:	f24a 53be 	movw	r3, #42430	; 0xa5be
    6a1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a1e:	701a      	strb	r2, [r3, #0]
    6a20:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6a24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a28:	781b      	ldrb	r3, [r3, #0]
    6a2a:	3301      	adds	r3, #1
    6a2c:	b2da      	uxtb	r2, r3
    6a2e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6a32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a36:	701a      	strb	r2, [r3, #0]
    6a38:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6a3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a40:	781b      	ldrb	r3, [r3, #0]
    6a42:	2bff      	cmp	r3, #255	; 0xff
    6a44:	d105      	bne.n	6a52 <send_boot+0xbb6>
    6a46:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6a4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a4e:	2200      	movs	r2, #0
    6a50:	701a      	strb	r2, [r3, #0]
    6a52:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6a56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a5a:	781b      	ldrb	r3, [r3, #0]
    6a5c:	461a      	mov	r2, r3
    6a5e:	f240 130a 	movw	r3, #266	; 0x10a
    6a62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a66:	7819      	ldrb	r1, [r3, #0]
    6a68:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    6a6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a70:	5499      	strb	r1, [r3, r2]
    6a72:	f240 130a 	movw	r3, #266	; 0x10a
    6a76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a7a:	781a      	ldrb	r2, [r3, #0]
    6a7c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    6a80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a84:	781b      	ldrb	r3, [r3, #0]
    6a86:	4413      	add	r3, r2
    6a88:	b2da      	uxtb	r2, r3
    6a8a:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    6a8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a92:	701a      	strb	r2, [r3, #0]
    6a94:	f24a 53be 	movw	r3, #42430	; 0xa5be
    6a98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a9c:	781a      	ldrb	r2, [r3, #0]
    6a9e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    6aa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6aa6:	781b      	ldrb	r3, [r3, #0]
    6aa8:	4413      	add	r3, r2
    6aaa:	b2da      	uxtb	r2, r3
    6aac:	f24a 53be 	movw	r3, #42430	; 0xa5be
    6ab0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ab4:	701a      	strb	r2, [r3, #0]
    6ab6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6aba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6abe:	781b      	ldrb	r3, [r3, #0]
    6ac0:	3301      	adds	r3, #1
    6ac2:	b2da      	uxtb	r2, r3
    6ac4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6ac8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6acc:	701a      	strb	r2, [r3, #0]
    6ace:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6ad2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ad6:	781b      	ldrb	r3, [r3, #0]
    6ad8:	2bff      	cmp	r3, #255	; 0xff
    6ada:	d10f      	bne.n	6afc <send_boot+0xc60>
    6adc:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6ae0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ae4:	2200      	movs	r2, #0
    6ae6:	701a      	strb	r2, [r3, #0]
    6ae8:	e008      	b.n	6afc <send_boot+0xc60>
    6aea:	bf00      	nop
    6aec:	2000aab7 	.word	0x2000aab7
    6af0:	2000aaad 	.word	0x2000aaad
    6af4:	2000aaae 	.word	0x2000aaae
    6af8:	2000aaaf 	.word	0x2000aaaf
    6afc:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6b00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b04:	781b      	ldrb	r3, [r3, #0]
    6b06:	461a      	mov	r2, r3
    6b08:	f240 130a 	movw	r3, #266	; 0x10a
    6b0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b10:	7859      	ldrb	r1, [r3, #1]
    6b12:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    6b16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b1a:	5499      	strb	r1, [r3, r2]
    6b1c:	4bc5      	ldr	r3, [pc, #788]	; (6e34 <send_boot+0xf98>)
    6b1e:	781a      	ldrb	r2, [r3, #0]
    6b20:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    6b24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b28:	781b      	ldrb	r3, [r3, #0]
    6b2a:	4413      	add	r3, r2
    6b2c:	b2da      	uxtb	r2, r3
    6b2e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    6b32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b36:	701a      	strb	r2, [r3, #0]
    6b38:	f24a 53be 	movw	r3, #42430	; 0xa5be
    6b3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b40:	781a      	ldrb	r2, [r3, #0]
    6b42:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    6b46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b4a:	781b      	ldrb	r3, [r3, #0]
    6b4c:	4413      	add	r3, r2
    6b4e:	b2da      	uxtb	r2, r3
    6b50:	f24a 53be 	movw	r3, #42430	; 0xa5be
    6b54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b58:	701a      	strb	r2, [r3, #0]
    6b5a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6b5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b62:	781b      	ldrb	r3, [r3, #0]
    6b64:	3301      	adds	r3, #1
    6b66:	b2da      	uxtb	r2, r3
    6b68:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6b6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b70:	701a      	strb	r2, [r3, #0]
    6b72:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6b76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b7a:	781b      	ldrb	r3, [r3, #0]
    6b7c:	2bff      	cmp	r3, #255	; 0xff
    6b7e:	d105      	bne.n	6b8c <send_boot+0xcf0>
    6b80:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6b84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b88:	2200      	movs	r2, #0
    6b8a:	701a      	strb	r2, [r3, #0]
    6b8c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6b90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b94:	781b      	ldrb	r3, [r3, #0]
    6b96:	461a      	mov	r2, r3
    6b98:	f240 130c 	movw	r3, #268	; 0x10c
    6b9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ba0:	7819      	ldrb	r1, [r3, #0]
    6ba2:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    6ba6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6baa:	5499      	strb	r1, [r3, r2]
    6bac:	f240 130c 	movw	r3, #268	; 0x10c
    6bb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bb4:	781a      	ldrb	r2, [r3, #0]
    6bb6:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    6bba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bbe:	781b      	ldrb	r3, [r3, #0]
    6bc0:	4413      	add	r3, r2
    6bc2:	b2da      	uxtb	r2, r3
    6bc4:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    6bc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bcc:	701a      	strb	r2, [r3, #0]
    6bce:	f24a 53be 	movw	r3, #42430	; 0xa5be
    6bd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bd6:	781a      	ldrb	r2, [r3, #0]
    6bd8:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    6bdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6be0:	781b      	ldrb	r3, [r3, #0]
    6be2:	4413      	add	r3, r2
    6be4:	b2da      	uxtb	r2, r3
    6be6:	f24a 53be 	movw	r3, #42430	; 0xa5be
    6bea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bee:	701a      	strb	r2, [r3, #0]
    6bf0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6bf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bf8:	781b      	ldrb	r3, [r3, #0]
    6bfa:	3301      	adds	r3, #1
    6bfc:	b2da      	uxtb	r2, r3
    6bfe:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6c02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c06:	701a      	strb	r2, [r3, #0]
    6c08:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6c0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c10:	781b      	ldrb	r3, [r3, #0]
    6c12:	2bff      	cmp	r3, #255	; 0xff
    6c14:	d105      	bne.n	6c22 <send_boot+0xd86>
    6c16:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6c1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c1e:	2200      	movs	r2, #0
    6c20:	701a      	strb	r2, [r3, #0]
    6c22:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6c26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c2a:	781b      	ldrb	r3, [r3, #0]
    6c2c:	461a      	mov	r2, r3
    6c2e:	f240 130c 	movw	r3, #268	; 0x10c
    6c32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c36:	7859      	ldrb	r1, [r3, #1]
    6c38:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    6c3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c40:	5499      	strb	r1, [r3, r2]
    6c42:	4b7d      	ldr	r3, [pc, #500]	; (6e38 <send_boot+0xf9c>)
    6c44:	781a      	ldrb	r2, [r3, #0]
    6c46:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    6c4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c4e:	781b      	ldrb	r3, [r3, #0]
    6c50:	4413      	add	r3, r2
    6c52:	b2da      	uxtb	r2, r3
    6c54:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    6c58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c5c:	701a      	strb	r2, [r3, #0]
    6c5e:	f24a 53be 	movw	r3, #42430	; 0xa5be
    6c62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c66:	781a      	ldrb	r2, [r3, #0]
    6c68:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    6c6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c70:	781b      	ldrb	r3, [r3, #0]
    6c72:	4413      	add	r3, r2
    6c74:	b2da      	uxtb	r2, r3
    6c76:	f24a 53be 	movw	r3, #42430	; 0xa5be
    6c7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c7e:	701a      	strb	r2, [r3, #0]
    6c80:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6c84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c88:	781b      	ldrb	r3, [r3, #0]
    6c8a:	3301      	adds	r3, #1
    6c8c:	b2da      	uxtb	r2, r3
    6c8e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6c92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c96:	701a      	strb	r2, [r3, #0]
    6c98:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6c9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ca0:	781b      	ldrb	r3, [r3, #0]
    6ca2:	2bff      	cmp	r3, #255	; 0xff
    6ca4:	d105      	bne.n	6cb2 <send_boot+0xe16>
    6ca6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6caa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6cae:	2200      	movs	r2, #0
    6cb0:	701a      	strb	r2, [r3, #0]
    6cb2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6cb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6cba:	781b      	ldrb	r3, [r3, #0]
    6cbc:	461a      	mov	r2, r3
    6cbe:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    6cc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6cc6:	7819      	ldrb	r1, [r3, #0]
    6cc8:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    6ccc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6cd0:	5499      	strb	r1, [r3, r2]
    6cd2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6cd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6cda:	781b      	ldrb	r3, [r3, #0]
    6cdc:	3301      	adds	r3, #1
    6cde:	b2da      	uxtb	r2, r3
    6ce0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6ce4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ce8:	701a      	strb	r2, [r3, #0]
    6cea:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6cee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6cf2:	781b      	ldrb	r3, [r3, #0]
    6cf4:	2bff      	cmp	r3, #255	; 0xff
    6cf6:	d105      	bne.n	6d04 <send_boot+0xe68>
    6cf8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6cfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d00:	2200      	movs	r2, #0
    6d02:	701a      	strb	r2, [r3, #0]
    6d04:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6d08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d0c:	781b      	ldrb	r3, [r3, #0]
    6d0e:	461a      	mov	r2, r3
    6d10:	f24a 53be 	movw	r3, #42430	; 0xa5be
    6d14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d18:	7819      	ldrb	r1, [r3, #0]
    6d1a:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    6d1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d22:	5499      	strb	r1, [r3, r2]
    6d24:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6d28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d2c:	781b      	ldrb	r3, [r3, #0]
    6d2e:	3301      	adds	r3, #1
    6d30:	b2da      	uxtb	r2, r3
    6d32:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6d36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d3a:	701a      	strb	r2, [r3, #0]
    6d3c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6d40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d44:	781b      	ldrb	r3, [r3, #0]
    6d46:	2bff      	cmp	r3, #255	; 0xff
    6d48:	d105      	bne.n	6d56 <send_boot+0xeba>
    6d4a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6d4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d52:	2200      	movs	r2, #0
    6d54:	701a      	strb	r2, [r3, #0]
    6d56:	f242 0339 	movw	r3, #8249	; 0x2039
    6d5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d5e:	781b      	ldrb	r3, [r3, #0]
    6d60:	b2db      	uxtb	r3, r3
    6d62:	f003 0310 	and.w	r3, r3, #16
    6d66:	2b00      	cmp	r3, #0
    6d68:	d15a      	bne.n	6e20 <send_boot+0xf84>
    6d6a:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    6d6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d72:	781b      	ldrb	r3, [r3, #0]
    6d74:	b2db      	uxtb	r3, r3
    6d76:	461a      	mov	r2, r3
    6d78:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    6d7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d80:	5c9a      	ldrb	r2, [r3, r2]
    6d82:	f24a 53bb 	movw	r3, #42427	; 0xa5bb
    6d86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d8a:	701a      	strb	r2, [r3, #0]
    6d8c:	f24a 53bc 	movw	r3, #42428	; 0xa5bc
    6d90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d94:	2200      	movs	r2, #0
    6d96:	701a      	strb	r2, [r3, #0]
    6d98:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    6d9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6da0:	781b      	ldrb	r3, [r3, #0]
    6da2:	b2db      	uxtb	r3, r3
    6da4:	3301      	adds	r3, #1
    6da6:	b2da      	uxtb	r2, r3
    6da8:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    6dac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6db0:	701a      	strb	r2, [r3, #0]
    6db2:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    6db6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6dba:	781b      	ldrb	r3, [r3, #0]
    6dbc:	b2db      	uxtb	r3, r3
    6dbe:	2bff      	cmp	r3, #255	; 0xff
    6dc0:	d105      	bne.n	6dce <send_boot+0xf32>
    6dc2:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    6dc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6dca:	2200      	movs	r2, #0
    6dcc:	701a      	strb	r2, [r3, #0]
    6dce:	f242 0338 	movw	r3, #8248	; 0x2038
    6dd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6dd6:	f242 0238 	movw	r2, #8248	; 0x2038
    6dda:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6dde:	7812      	ldrb	r2, [r2, #0]
    6de0:	b2d2      	uxtb	r2, r2
    6de2:	f042 0201 	orr.w	r2, r2, #1
    6de6:	b2d2      	uxtb	r2, r2
    6de8:	701a      	strb	r2, [r3, #0]
    6dea:	f242 0339 	movw	r3, #8249	; 0x2039
    6dee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6df2:	f242 0239 	movw	r2, #8249	; 0x2039
    6df6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6dfa:	7812      	ldrb	r2, [r2, #0]
    6dfc:	b2d2      	uxtb	r2, r2
    6dfe:	f042 0210 	orr.w	r2, r2, #16
    6e02:	b2d2      	uxtb	r2, r2
    6e04:	701a      	strb	r2, [r3, #0]
    6e06:	e00b      	b.n	6e20 <send_boot+0xf84>
    6e08:	f24a 43b8 	movw	r3, #42168	; 0xa4b8
    6e0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e10:	781b      	ldrb	r3, [r3, #0]
    6e12:	3301      	adds	r3, #1
    6e14:	b2da      	uxtb	r2, r3
    6e16:	f24a 43b8 	movw	r3, #42168	; 0xa4b8
    6e1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e1e:	701a      	strb	r2, [r3, #0]
      boot = FALSE;
    6e20:	f240 1305 	movw	r3, #261	; 0x105
    6e24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e28:	2200      	movs	r2, #0
    6e2a:	701a      	strb	r2, [r3, #0]
  }
}
    6e2c:	46bd      	mov	sp, r7
    6e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e32:	4770      	bx	lr
    6e34:	2000010b 	.word	0x2000010b
    6e38:	2000010d 	.word	0x2000010d

00006e3c <send_attitude>:
void send_attitude(void){ //499ms
    6e3c:	b480      	push	{r7}
    6e3e:	af00      	add	r7, sp, #0
    // add by wanbo
  //if(!boot)
  {
    count++;
    6e40:	f24a 43b1 	movw	r3, #42161	; 0xa4b1
    6e44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e48:	781b      	ldrb	r3, [r3, #0]
    6e4a:	3301      	adds	r3, #1
    6e4c:	b2da      	uxtb	r2, r3
    6e4e:	f24a 43b1 	movw	r3, #42161	; 0xa4b1
    6e52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e56:	701a      	strb	r2, [r3, #0]
    if (count == 250) count = 0;
    6e58:	f24a 43b1 	movw	r3, #42161	; 0xa4b1
    6e5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e60:	781b      	ldrb	r3, [r3, #0]
    6e62:	2bfa      	cmp	r3, #250	; 0xfa
    6e64:	d105      	bne.n	6e72 <send_attitude+0x36>
    6e66:	f24a 43b1 	movw	r3, #42161	; 0xa4b1
    6e6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e6e:	2200      	movs	r2, #0
    6e70:	701a      	strb	r2, [r3, #0]
    if (count % 5 == 0) 
    6e72:	f24a 43b1 	movw	r3, #42161	; 0xa4b1
    6e76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e7a:	781a      	ldrb	r2, [r3, #0]
    6e7c:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    6e80:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    6e84:	fba3 1302 	umull	r1, r3, r3, r2
    6e88:	0899      	lsrs	r1, r3, #2
    6e8a:	460b      	mov	r3, r1
    6e8c:	009b      	lsls	r3, r3, #2
    6e8e:	440b      	add	r3, r1
    6e90:	1ad3      	subs	r3, r2, r3
    6e92:	b2db      	uxtb	r3, r3
    6e94:	2b00      	cmp	r3, #0
    6e96:	f040 84c1 	bne.w	781c <send_attitude+0x9e0>
       PERIODIC_SEND_ATTITUDE(); 
    6e9a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6e9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ea2:	781a      	ldrb	r2, [r3, #0]
    6ea4:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    6ea8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6eac:	781b      	ldrb	r3, [r3, #0]
    6eae:	b2db      	uxtb	r3, r3
    6eb0:	429a      	cmp	r2, r3
    6eb2:	d313      	bcc.n	6edc <send_attitude+0xa0>
    6eb4:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    6eb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ebc:	781b      	ldrb	r3, [r3, #0]
    6ebe:	b2db      	uxtb	r3, r3
    6ec0:	461a      	mov	r2, r3
    6ec2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6ec6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6eca:	781b      	ldrb	r3, [r3, #0]
    6ecc:	1ad3      	subs	r3, r2, r3
    6ece:	33ff      	adds	r3, #255	; 0xff
    6ed0:	2b10      	cmp	r3, #16
    6ed2:	bfd4      	ite	le
    6ed4:	2300      	movle	r3, #0
    6ed6:	2301      	movgt	r3, #1
    6ed8:	b2db      	uxtb	r3, r3
    6eda:	e011      	b.n	6f00 <send_attitude+0xc4>
    6edc:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    6ee0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ee4:	781b      	ldrb	r3, [r3, #0]
    6ee6:	b2db      	uxtb	r3, r3
    6ee8:	461a      	mov	r2, r3
    6eea:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6eee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ef2:	781b      	ldrb	r3, [r3, #0]
    6ef4:	1ad3      	subs	r3, r2, r3
    6ef6:	2b10      	cmp	r3, #16
    6ef8:	bfd4      	ite	le
    6efa:	2300      	movle	r3, #0
    6efc:	2301      	movgt	r3, #1
    6efe:	b2db      	uxtb	r3, r3
    6f00:	2b00      	cmp	r3, #0
    6f02:	f000 847f 	beq.w	7804 <send_attitude+0x9c8>
    6f06:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6f0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f0e:	781b      	ldrb	r3, [r3, #0]
    6f10:	461a      	mov	r2, r3
    6f12:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    6f16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f1a:	2105      	movs	r1, #5
    6f1c:	5499      	strb	r1, [r3, r2]
    6f1e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6f22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f26:	781b      	ldrb	r3, [r3, #0]
    6f28:	3301      	adds	r3, #1
    6f2a:	b2da      	uxtb	r2, r3
    6f2c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6f30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f34:	701a      	strb	r2, [r3, #0]
    6f36:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6f3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f3e:	781b      	ldrb	r3, [r3, #0]
    6f40:	2bff      	cmp	r3, #255	; 0xff
    6f42:	d105      	bne.n	6f50 <send_attitude+0x114>
    6f44:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6f48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f4c:	2200      	movs	r2, #0
    6f4e:	701a      	strb	r2, [r3, #0]
    6f50:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6f54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f58:	781b      	ldrb	r3, [r3, #0]
    6f5a:	461a      	mov	r2, r3
    6f5c:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    6f60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f64:	2106      	movs	r1, #6
    6f66:	5499      	strb	r1, [r3, r2]
    6f68:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6f6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f70:	781b      	ldrb	r3, [r3, #0]
    6f72:	3301      	adds	r3, #1
    6f74:	b2da      	uxtb	r2, r3
    6f76:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6f7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f7e:	701a      	strb	r2, [r3, #0]
    6f80:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6f84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f88:	781b      	ldrb	r3, [r3, #0]
    6f8a:	2bff      	cmp	r3, #255	; 0xff
    6f8c:	d105      	bne.n	6f9a <send_attitude+0x15e>
    6f8e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6f92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f96:	2200      	movs	r2, #0
    6f98:	701a      	strb	r2, [r3, #0]
    6f9a:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    6f9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fa2:	2206      	movs	r2, #6
    6fa4:	701a      	strb	r2, [r3, #0]
    6fa6:	f24a 53be 	movw	r3, #42430	; 0xa5be
    6faa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fae:	2206      	movs	r2, #6
    6fb0:	701a      	strb	r2, [r3, #0]
    6fb2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6fb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fba:	781b      	ldrb	r3, [r3, #0]
    6fbc:	461a      	mov	r2, r3
    6fbe:	f64a 2378 	movw	r3, #43640	; 0xaa78
    6fc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fc6:	7819      	ldrb	r1, [r3, #0]
    6fc8:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    6fcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fd0:	5499      	strb	r1, [r3, r2]
    6fd2:	f64a 2378 	movw	r3, #43640	; 0xaa78
    6fd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fda:	781a      	ldrb	r2, [r3, #0]
    6fdc:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    6fe0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fe4:	781b      	ldrb	r3, [r3, #0]
    6fe6:	4413      	add	r3, r2
    6fe8:	b2da      	uxtb	r2, r3
    6fea:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    6fee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ff2:	701a      	strb	r2, [r3, #0]
    6ff4:	f24a 53be 	movw	r3, #42430	; 0xa5be
    6ff8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ffc:	781a      	ldrb	r2, [r3, #0]
    6ffe:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7002:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7006:	781b      	ldrb	r3, [r3, #0]
    7008:	4413      	add	r3, r2
    700a:	b2da      	uxtb	r2, r3
    700c:	f24a 53be 	movw	r3, #42430	; 0xa5be
    7010:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7014:	701a      	strb	r2, [r3, #0]
    7016:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    701a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    701e:	781b      	ldrb	r3, [r3, #0]
    7020:	3301      	adds	r3, #1
    7022:	b2da      	uxtb	r2, r3
    7024:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7028:	f2c2 0300 	movt	r3, #8192	; 0x2000
    702c:	701a      	strb	r2, [r3, #0]
    702e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7032:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7036:	781b      	ldrb	r3, [r3, #0]
    7038:	2bff      	cmp	r3, #255	; 0xff
    703a:	d105      	bne.n	7048 <send_attitude+0x20c>
    703c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7040:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7044:	2200      	movs	r2, #0
    7046:	701a      	strb	r2, [r3, #0]
    7048:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    704c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7050:	781b      	ldrb	r3, [r3, #0]
    7052:	461a      	mov	r2, r3
    7054:	f64a 2378 	movw	r3, #43640	; 0xaa78
    7058:	f2c2 0300 	movt	r3, #8192	; 0x2000
    705c:	7859      	ldrb	r1, [r3, #1]
    705e:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    7062:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7066:	5499      	strb	r1, [r3, r2]
    7068:	4bd1      	ldr	r3, [pc, #836]	; (73b0 <send_attitude+0x574>)
    706a:	781a      	ldrb	r2, [r3, #0]
    706c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7070:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7074:	781b      	ldrb	r3, [r3, #0]
    7076:	4413      	add	r3, r2
    7078:	b2da      	uxtb	r2, r3
    707a:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    707e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7082:	701a      	strb	r2, [r3, #0]
    7084:	f24a 53be 	movw	r3, #42430	; 0xa5be
    7088:	f2c2 0300 	movt	r3, #8192	; 0x2000
    708c:	781a      	ldrb	r2, [r3, #0]
    708e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7092:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7096:	781b      	ldrb	r3, [r3, #0]
    7098:	4413      	add	r3, r2
    709a:	b2da      	uxtb	r2, r3
    709c:	f24a 53be 	movw	r3, #42430	; 0xa5be
    70a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70a4:	701a      	strb	r2, [r3, #0]
    70a6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    70aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70ae:	781b      	ldrb	r3, [r3, #0]
    70b0:	3301      	adds	r3, #1
    70b2:	b2da      	uxtb	r2, r3
    70b4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    70b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70bc:	701a      	strb	r2, [r3, #0]
    70be:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    70c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70c6:	781b      	ldrb	r3, [r3, #0]
    70c8:	2bff      	cmp	r3, #255	; 0xff
    70ca:	d105      	bne.n	70d8 <send_attitude+0x29c>
    70cc:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    70d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70d4:	2200      	movs	r2, #0
    70d6:	701a      	strb	r2, [r3, #0]
    70d8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    70dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70e0:	781b      	ldrb	r3, [r3, #0]
    70e2:	461a      	mov	r2, r3
    70e4:	f64a 2378 	movw	r3, #43640	; 0xaa78
    70e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70ec:	7899      	ldrb	r1, [r3, #2]
    70ee:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    70f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70f6:	5499      	strb	r1, [r3, r2]
    70f8:	4bae      	ldr	r3, [pc, #696]	; (73b4 <send_attitude+0x578>)
    70fa:	781a      	ldrb	r2, [r3, #0]
    70fc:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7100:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7104:	781b      	ldrb	r3, [r3, #0]
    7106:	4413      	add	r3, r2
    7108:	b2da      	uxtb	r2, r3
    710a:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    710e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7112:	701a      	strb	r2, [r3, #0]
    7114:	f24a 53be 	movw	r3, #42430	; 0xa5be
    7118:	f2c2 0300 	movt	r3, #8192	; 0x2000
    711c:	781a      	ldrb	r2, [r3, #0]
    711e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7122:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7126:	781b      	ldrb	r3, [r3, #0]
    7128:	4413      	add	r3, r2
    712a:	b2da      	uxtb	r2, r3
    712c:	f24a 53be 	movw	r3, #42430	; 0xa5be
    7130:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7134:	701a      	strb	r2, [r3, #0]
    7136:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    713a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    713e:	781b      	ldrb	r3, [r3, #0]
    7140:	3301      	adds	r3, #1
    7142:	b2da      	uxtb	r2, r3
    7144:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7148:	f2c2 0300 	movt	r3, #8192	; 0x2000
    714c:	701a      	strb	r2, [r3, #0]
    714e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7152:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7156:	781b      	ldrb	r3, [r3, #0]
    7158:	2bff      	cmp	r3, #255	; 0xff
    715a:	d105      	bne.n	7168 <send_attitude+0x32c>
    715c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7160:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7164:	2200      	movs	r2, #0
    7166:	701a      	strb	r2, [r3, #0]
    7168:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    716c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7170:	781b      	ldrb	r3, [r3, #0]
    7172:	461a      	mov	r2, r3
    7174:	f64a 2378 	movw	r3, #43640	; 0xaa78
    7178:	f2c2 0300 	movt	r3, #8192	; 0x2000
    717c:	78d9      	ldrb	r1, [r3, #3]
    717e:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    7182:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7186:	5499      	strb	r1, [r3, r2]
    7188:	4b8b      	ldr	r3, [pc, #556]	; (73b8 <send_attitude+0x57c>)
    718a:	781a      	ldrb	r2, [r3, #0]
    718c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7190:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7194:	781b      	ldrb	r3, [r3, #0]
    7196:	4413      	add	r3, r2
    7198:	b2da      	uxtb	r2, r3
    719a:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    719e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71a2:	701a      	strb	r2, [r3, #0]
    71a4:	f24a 53be 	movw	r3, #42430	; 0xa5be
    71a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71ac:	781a      	ldrb	r2, [r3, #0]
    71ae:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    71b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71b6:	781b      	ldrb	r3, [r3, #0]
    71b8:	4413      	add	r3, r2
    71ba:	b2da      	uxtb	r2, r3
    71bc:	f24a 53be 	movw	r3, #42430	; 0xa5be
    71c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71c4:	701a      	strb	r2, [r3, #0]
    71c6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    71ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71ce:	781b      	ldrb	r3, [r3, #0]
    71d0:	3301      	adds	r3, #1
    71d2:	b2da      	uxtb	r2, r3
    71d4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    71d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71dc:	701a      	strb	r2, [r3, #0]
    71de:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    71e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71e6:	781b      	ldrb	r3, [r3, #0]
    71e8:	2bff      	cmp	r3, #255	; 0xff
    71ea:	d105      	bne.n	71f8 <send_attitude+0x3bc>
    71ec:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    71f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71f4:	2200      	movs	r2, #0
    71f6:	701a      	strb	r2, [r3, #0]
    71f8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    71fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7200:	781b      	ldrb	r3, [r3, #0]
    7202:	461a      	mov	r2, r3
    7204:	f64a 237c 	movw	r3, #43644	; 0xaa7c
    7208:	f2c2 0300 	movt	r3, #8192	; 0x2000
    720c:	7819      	ldrb	r1, [r3, #0]
    720e:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    7212:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7216:	5499      	strb	r1, [r3, r2]
    7218:	f64a 237c 	movw	r3, #43644	; 0xaa7c
    721c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7220:	781a      	ldrb	r2, [r3, #0]
    7222:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7226:	f2c2 0300 	movt	r3, #8192	; 0x2000
    722a:	781b      	ldrb	r3, [r3, #0]
    722c:	4413      	add	r3, r2
    722e:	b2da      	uxtb	r2, r3
    7230:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7234:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7238:	701a      	strb	r2, [r3, #0]
    723a:	f24a 53be 	movw	r3, #42430	; 0xa5be
    723e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7242:	781a      	ldrb	r2, [r3, #0]
    7244:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7248:	f2c2 0300 	movt	r3, #8192	; 0x2000
    724c:	781b      	ldrb	r3, [r3, #0]
    724e:	4413      	add	r3, r2
    7250:	b2da      	uxtb	r2, r3
    7252:	f24a 53be 	movw	r3, #42430	; 0xa5be
    7256:	f2c2 0300 	movt	r3, #8192	; 0x2000
    725a:	701a      	strb	r2, [r3, #0]
    725c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7260:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7264:	781b      	ldrb	r3, [r3, #0]
    7266:	3301      	adds	r3, #1
    7268:	b2da      	uxtb	r2, r3
    726a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    726e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7272:	701a      	strb	r2, [r3, #0]
    7274:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7278:	f2c2 0300 	movt	r3, #8192	; 0x2000
    727c:	781b      	ldrb	r3, [r3, #0]
    727e:	2bff      	cmp	r3, #255	; 0xff
    7280:	d105      	bne.n	728e <send_attitude+0x452>
    7282:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7286:	f2c2 0300 	movt	r3, #8192	; 0x2000
    728a:	2200      	movs	r2, #0
    728c:	701a      	strb	r2, [r3, #0]
    728e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7292:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7296:	781b      	ldrb	r3, [r3, #0]
    7298:	461a      	mov	r2, r3
    729a:	f64a 237c 	movw	r3, #43644	; 0xaa7c
    729e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72a2:	7859      	ldrb	r1, [r3, #1]
    72a4:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    72a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72ac:	5499      	strb	r1, [r3, r2]
    72ae:	4b43      	ldr	r3, [pc, #268]	; (73bc <send_attitude+0x580>)
    72b0:	781a      	ldrb	r2, [r3, #0]
    72b2:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    72b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72ba:	781b      	ldrb	r3, [r3, #0]
    72bc:	4413      	add	r3, r2
    72be:	b2da      	uxtb	r2, r3
    72c0:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    72c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72c8:	701a      	strb	r2, [r3, #0]
    72ca:	f24a 53be 	movw	r3, #42430	; 0xa5be
    72ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72d2:	781a      	ldrb	r2, [r3, #0]
    72d4:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    72d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72dc:	781b      	ldrb	r3, [r3, #0]
    72de:	4413      	add	r3, r2
    72e0:	b2da      	uxtb	r2, r3
    72e2:	f24a 53be 	movw	r3, #42430	; 0xa5be
    72e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72ea:	701a      	strb	r2, [r3, #0]
    72ec:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    72f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72f4:	781b      	ldrb	r3, [r3, #0]
    72f6:	3301      	adds	r3, #1
    72f8:	b2da      	uxtb	r2, r3
    72fa:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    72fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7302:	701a      	strb	r2, [r3, #0]
    7304:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7308:	f2c2 0300 	movt	r3, #8192	; 0x2000
    730c:	781b      	ldrb	r3, [r3, #0]
    730e:	2bff      	cmp	r3, #255	; 0xff
    7310:	d105      	bne.n	731e <send_attitude+0x4e2>
    7312:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7316:	f2c2 0300 	movt	r3, #8192	; 0x2000
    731a:	2200      	movs	r2, #0
    731c:	701a      	strb	r2, [r3, #0]
    731e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7322:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7326:	781b      	ldrb	r3, [r3, #0]
    7328:	461a      	mov	r2, r3
    732a:	f64a 237c 	movw	r3, #43644	; 0xaa7c
    732e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7332:	7899      	ldrb	r1, [r3, #2]
    7334:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    7338:	f2c2 0300 	movt	r3, #8192	; 0x2000
    733c:	5499      	strb	r1, [r3, r2]
    733e:	4b20      	ldr	r3, [pc, #128]	; (73c0 <send_attitude+0x584>)
    7340:	781a      	ldrb	r2, [r3, #0]
    7342:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7346:	f2c2 0300 	movt	r3, #8192	; 0x2000
    734a:	781b      	ldrb	r3, [r3, #0]
    734c:	4413      	add	r3, r2
    734e:	b2da      	uxtb	r2, r3
    7350:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7354:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7358:	701a      	strb	r2, [r3, #0]
    735a:	f24a 53be 	movw	r3, #42430	; 0xa5be
    735e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7362:	781a      	ldrb	r2, [r3, #0]
    7364:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7368:	f2c2 0300 	movt	r3, #8192	; 0x2000
    736c:	781b      	ldrb	r3, [r3, #0]
    736e:	4413      	add	r3, r2
    7370:	b2da      	uxtb	r2, r3
    7372:	f24a 53be 	movw	r3, #42430	; 0xa5be
    7376:	f2c2 0300 	movt	r3, #8192	; 0x2000
    737a:	701a      	strb	r2, [r3, #0]
    737c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7380:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7384:	781b      	ldrb	r3, [r3, #0]
    7386:	3301      	adds	r3, #1
    7388:	b2da      	uxtb	r2, r3
    738a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    738e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7392:	701a      	strb	r2, [r3, #0]
    7394:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7398:	f2c2 0300 	movt	r3, #8192	; 0x2000
    739c:	781b      	ldrb	r3, [r3, #0]
    739e:	2bff      	cmp	r3, #255	; 0xff
    73a0:	d110      	bne.n	73c4 <send_attitude+0x588>
    73a2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    73a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73aa:	2200      	movs	r2, #0
    73ac:	701a      	strb	r2, [r3, #0]
    73ae:	e009      	b.n	73c4 <send_attitude+0x588>
    73b0:	2000aa79 	.word	0x2000aa79
    73b4:	2000aa7a 	.word	0x2000aa7a
    73b8:	2000aa7b 	.word	0x2000aa7b
    73bc:	2000aa7d 	.word	0x2000aa7d
    73c0:	2000aa7e 	.word	0x2000aa7e
    73c4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    73c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73cc:	781b      	ldrb	r3, [r3, #0]
    73ce:	461a      	mov	r2, r3
    73d0:	f64a 237c 	movw	r3, #43644	; 0xaa7c
    73d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73d8:	78d9      	ldrb	r1, [r3, #3]
    73da:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    73de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73e2:	5499      	strb	r1, [r3, r2]
    73e4:	4bc2      	ldr	r3, [pc, #776]	; (76f0 <send_attitude+0x8b4>)
    73e6:	781a      	ldrb	r2, [r3, #0]
    73e8:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    73ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73f0:	781b      	ldrb	r3, [r3, #0]
    73f2:	4413      	add	r3, r2
    73f4:	b2da      	uxtb	r2, r3
    73f6:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    73fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73fe:	701a      	strb	r2, [r3, #0]
    7400:	f24a 53be 	movw	r3, #42430	; 0xa5be
    7404:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7408:	781a      	ldrb	r2, [r3, #0]
    740a:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    740e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7412:	781b      	ldrb	r3, [r3, #0]
    7414:	4413      	add	r3, r2
    7416:	b2da      	uxtb	r2, r3
    7418:	f24a 53be 	movw	r3, #42430	; 0xa5be
    741c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7420:	701a      	strb	r2, [r3, #0]
    7422:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7426:	f2c2 0300 	movt	r3, #8192	; 0x2000
    742a:	781b      	ldrb	r3, [r3, #0]
    742c:	3301      	adds	r3, #1
    742e:	b2da      	uxtb	r2, r3
    7430:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7434:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7438:	701a      	strb	r2, [r3, #0]
    743a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    743e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7442:	781b      	ldrb	r3, [r3, #0]
    7444:	2bff      	cmp	r3, #255	; 0xff
    7446:	d105      	bne.n	7454 <send_attitude+0x618>
    7448:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    744c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7450:	2200      	movs	r2, #0
    7452:	701a      	strb	r2, [r3, #0]
    7454:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7458:	f2c2 0300 	movt	r3, #8192	; 0x2000
    745c:	781b      	ldrb	r3, [r3, #0]
    745e:	461a      	mov	r2, r3
    7460:	f64a 2380 	movw	r3, #43648	; 0xaa80
    7464:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7468:	7819      	ldrb	r1, [r3, #0]
    746a:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    746e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7472:	5499      	strb	r1, [r3, r2]
    7474:	f64a 2380 	movw	r3, #43648	; 0xaa80
    7478:	f2c2 0300 	movt	r3, #8192	; 0x2000
    747c:	781a      	ldrb	r2, [r3, #0]
    747e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7482:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7486:	781b      	ldrb	r3, [r3, #0]
    7488:	4413      	add	r3, r2
    748a:	b2da      	uxtb	r2, r3
    748c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7490:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7494:	701a      	strb	r2, [r3, #0]
    7496:	f24a 53be 	movw	r3, #42430	; 0xa5be
    749a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    749e:	781a      	ldrb	r2, [r3, #0]
    74a0:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    74a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74a8:	781b      	ldrb	r3, [r3, #0]
    74aa:	4413      	add	r3, r2
    74ac:	b2da      	uxtb	r2, r3
    74ae:	f24a 53be 	movw	r3, #42430	; 0xa5be
    74b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74b6:	701a      	strb	r2, [r3, #0]
    74b8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    74bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74c0:	781b      	ldrb	r3, [r3, #0]
    74c2:	3301      	adds	r3, #1
    74c4:	b2da      	uxtb	r2, r3
    74c6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    74ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74ce:	701a      	strb	r2, [r3, #0]
    74d0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    74d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74d8:	781b      	ldrb	r3, [r3, #0]
    74da:	2bff      	cmp	r3, #255	; 0xff
    74dc:	d105      	bne.n	74ea <send_attitude+0x6ae>
    74de:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    74e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74e6:	2200      	movs	r2, #0
    74e8:	701a      	strb	r2, [r3, #0]
    74ea:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    74ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74f2:	781b      	ldrb	r3, [r3, #0]
    74f4:	461a      	mov	r2, r3
    74f6:	f64a 2380 	movw	r3, #43648	; 0xaa80
    74fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74fe:	7859      	ldrb	r1, [r3, #1]
    7500:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    7504:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7508:	5499      	strb	r1, [r3, r2]
    750a:	4b7a      	ldr	r3, [pc, #488]	; (76f4 <send_attitude+0x8b8>)
    750c:	781a      	ldrb	r2, [r3, #0]
    750e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7512:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7516:	781b      	ldrb	r3, [r3, #0]
    7518:	4413      	add	r3, r2
    751a:	b2da      	uxtb	r2, r3
    751c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7520:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7524:	701a      	strb	r2, [r3, #0]
    7526:	f24a 53be 	movw	r3, #42430	; 0xa5be
    752a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    752e:	781a      	ldrb	r2, [r3, #0]
    7530:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7534:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7538:	781b      	ldrb	r3, [r3, #0]
    753a:	4413      	add	r3, r2
    753c:	b2da      	uxtb	r2, r3
    753e:	f24a 53be 	movw	r3, #42430	; 0xa5be
    7542:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7546:	701a      	strb	r2, [r3, #0]
    7548:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    754c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7550:	781b      	ldrb	r3, [r3, #0]
    7552:	3301      	adds	r3, #1
    7554:	b2da      	uxtb	r2, r3
    7556:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    755a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    755e:	701a      	strb	r2, [r3, #0]
    7560:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7564:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7568:	781b      	ldrb	r3, [r3, #0]
    756a:	2bff      	cmp	r3, #255	; 0xff
    756c:	d105      	bne.n	757a <send_attitude+0x73e>
    756e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7572:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7576:	2200      	movs	r2, #0
    7578:	701a      	strb	r2, [r3, #0]
    757a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    757e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7582:	781b      	ldrb	r3, [r3, #0]
    7584:	461a      	mov	r2, r3
    7586:	f64a 2380 	movw	r3, #43648	; 0xaa80
    758a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    758e:	7899      	ldrb	r1, [r3, #2]
    7590:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    7594:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7598:	5499      	strb	r1, [r3, r2]
    759a:	4b57      	ldr	r3, [pc, #348]	; (76f8 <send_attitude+0x8bc>)
    759c:	781a      	ldrb	r2, [r3, #0]
    759e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    75a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75a6:	781b      	ldrb	r3, [r3, #0]
    75a8:	4413      	add	r3, r2
    75aa:	b2da      	uxtb	r2, r3
    75ac:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    75b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75b4:	701a      	strb	r2, [r3, #0]
    75b6:	f24a 53be 	movw	r3, #42430	; 0xa5be
    75ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75be:	781a      	ldrb	r2, [r3, #0]
    75c0:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    75c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75c8:	781b      	ldrb	r3, [r3, #0]
    75ca:	4413      	add	r3, r2
    75cc:	b2da      	uxtb	r2, r3
    75ce:	f24a 53be 	movw	r3, #42430	; 0xa5be
    75d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75d6:	701a      	strb	r2, [r3, #0]
    75d8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    75dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75e0:	781b      	ldrb	r3, [r3, #0]
    75e2:	3301      	adds	r3, #1
    75e4:	b2da      	uxtb	r2, r3
    75e6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    75ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75ee:	701a      	strb	r2, [r3, #0]
    75f0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    75f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75f8:	781b      	ldrb	r3, [r3, #0]
    75fa:	2bff      	cmp	r3, #255	; 0xff
    75fc:	d105      	bne.n	760a <send_attitude+0x7ce>
    75fe:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7602:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7606:	2200      	movs	r2, #0
    7608:	701a      	strb	r2, [r3, #0]
    760a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    760e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7612:	781b      	ldrb	r3, [r3, #0]
    7614:	461a      	mov	r2, r3
    7616:	f64a 2380 	movw	r3, #43648	; 0xaa80
    761a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    761e:	78d9      	ldrb	r1, [r3, #3]
    7620:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    7624:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7628:	5499      	strb	r1, [r3, r2]
    762a:	4b34      	ldr	r3, [pc, #208]	; (76fc <send_attitude+0x8c0>)
    762c:	781a      	ldrb	r2, [r3, #0]
    762e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7632:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7636:	781b      	ldrb	r3, [r3, #0]
    7638:	4413      	add	r3, r2
    763a:	b2da      	uxtb	r2, r3
    763c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7640:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7644:	701a      	strb	r2, [r3, #0]
    7646:	f24a 53be 	movw	r3, #42430	; 0xa5be
    764a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    764e:	781a      	ldrb	r2, [r3, #0]
    7650:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7654:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7658:	781b      	ldrb	r3, [r3, #0]
    765a:	4413      	add	r3, r2
    765c:	b2da      	uxtb	r2, r3
    765e:	f24a 53be 	movw	r3, #42430	; 0xa5be
    7662:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7666:	701a      	strb	r2, [r3, #0]
    7668:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    766c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7670:	781b      	ldrb	r3, [r3, #0]
    7672:	3301      	adds	r3, #1
    7674:	b2da      	uxtb	r2, r3
    7676:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    767a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    767e:	701a      	strb	r2, [r3, #0]
    7680:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7684:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7688:	781b      	ldrb	r3, [r3, #0]
    768a:	2bff      	cmp	r3, #255	; 0xff
    768c:	d105      	bne.n	769a <send_attitude+0x85e>
    768e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7692:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7696:	2200      	movs	r2, #0
    7698:	701a      	strb	r2, [r3, #0]
    769a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    769e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76a2:	781b      	ldrb	r3, [r3, #0]
    76a4:	461a      	mov	r2, r3
    76a6:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    76aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76ae:	7819      	ldrb	r1, [r3, #0]
    76b0:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    76b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76b8:	5499      	strb	r1, [r3, r2]
    76ba:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    76be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76c2:	781b      	ldrb	r3, [r3, #0]
    76c4:	3301      	adds	r3, #1
    76c6:	b2da      	uxtb	r2, r3
    76c8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    76cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76d0:	701a      	strb	r2, [r3, #0]
    76d2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    76d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76da:	781b      	ldrb	r3, [r3, #0]
    76dc:	2bff      	cmp	r3, #255	; 0xff
    76de:	d10f      	bne.n	7700 <send_attitude+0x8c4>
    76e0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    76e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76e8:	2200      	movs	r2, #0
    76ea:	701a      	strb	r2, [r3, #0]
    76ec:	e008      	b.n	7700 <send_attitude+0x8c4>
    76ee:	bf00      	nop
    76f0:	2000aa7f 	.word	0x2000aa7f
    76f4:	2000aa81 	.word	0x2000aa81
    76f8:	2000aa82 	.word	0x2000aa82
    76fc:	2000aa83 	.word	0x2000aa83
    7700:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7704:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7708:	781b      	ldrb	r3, [r3, #0]
    770a:	461a      	mov	r2, r3
    770c:	f24a 53be 	movw	r3, #42430	; 0xa5be
    7710:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7714:	7819      	ldrb	r1, [r3, #0]
    7716:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    771a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    771e:	5499      	strb	r1, [r3, r2]
    7720:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7724:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7728:	781b      	ldrb	r3, [r3, #0]
    772a:	3301      	adds	r3, #1
    772c:	b2da      	uxtb	r2, r3
    772e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7732:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7736:	701a      	strb	r2, [r3, #0]
    7738:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    773c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7740:	781b      	ldrb	r3, [r3, #0]
    7742:	2bff      	cmp	r3, #255	; 0xff
    7744:	d105      	bne.n	7752 <send_attitude+0x916>
    7746:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    774a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    774e:	2200      	movs	r2, #0
    7750:	701a      	strb	r2, [r3, #0]
    7752:	f242 0339 	movw	r3, #8249	; 0x2039
    7756:	f2c2 0300 	movt	r3, #8192	; 0x2000
    775a:	781b      	ldrb	r3, [r3, #0]
    775c:	b2db      	uxtb	r3, r3
    775e:	f003 0310 	and.w	r3, r3, #16
    7762:	2b00      	cmp	r3, #0
    7764:	d15a      	bne.n	781c <send_attitude+0x9e0>
    7766:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    776a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    776e:	781b      	ldrb	r3, [r3, #0]
    7770:	b2db      	uxtb	r3, r3
    7772:	461a      	mov	r2, r3
    7774:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    7778:	f2c2 0300 	movt	r3, #8192	; 0x2000
    777c:	5c9a      	ldrb	r2, [r3, r2]
    777e:	f24a 53bb 	movw	r3, #42427	; 0xa5bb
    7782:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7786:	701a      	strb	r2, [r3, #0]
    7788:	f24a 53bc 	movw	r3, #42428	; 0xa5bc
    778c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7790:	2200      	movs	r2, #0
    7792:	701a      	strb	r2, [r3, #0]
    7794:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    7798:	f2c2 0300 	movt	r3, #8192	; 0x2000
    779c:	781b      	ldrb	r3, [r3, #0]
    779e:	b2db      	uxtb	r3, r3
    77a0:	3301      	adds	r3, #1
    77a2:	b2da      	uxtb	r2, r3
    77a4:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    77a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77ac:	701a      	strb	r2, [r3, #0]
    77ae:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    77b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77b6:	781b      	ldrb	r3, [r3, #0]
    77b8:	b2db      	uxtb	r3, r3
    77ba:	2bff      	cmp	r3, #255	; 0xff
    77bc:	d105      	bne.n	77ca <send_attitude+0x98e>
    77be:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    77c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77c6:	2200      	movs	r2, #0
    77c8:	701a      	strb	r2, [r3, #0]
    77ca:	f242 0338 	movw	r3, #8248	; 0x2038
    77ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77d2:	f242 0238 	movw	r2, #8248	; 0x2038
    77d6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    77da:	7812      	ldrb	r2, [r2, #0]
    77dc:	b2d2      	uxtb	r2, r2
    77de:	f042 0201 	orr.w	r2, r2, #1
    77e2:	b2d2      	uxtb	r2, r2
    77e4:	701a      	strb	r2, [r3, #0]
    77e6:	f242 0339 	movw	r3, #8249	; 0x2039
    77ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77ee:	f242 0239 	movw	r2, #8249	; 0x2039
    77f2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    77f6:	7812      	ldrb	r2, [r2, #0]
    77f8:	b2d2      	uxtb	r2, r2
    77fa:	f042 0210 	orr.w	r2, r2, #16
    77fe:	b2d2      	uxtb	r2, r2
    7800:	701a      	strb	r2, [r3, #0]
    7802:	e00b      	b.n	781c <send_attitude+0x9e0>
    7804:	f24a 43b8 	movw	r3, #42168	; 0xa4b8
    7808:	f2c2 0300 	movt	r3, #8192	; 0x2000
    780c:	781b      	ldrb	r3, [r3, #0]
    780e:	3301      	adds	r3, #1
    7810:	b2da      	uxtb	r2, r3
    7812:	f24a 43b8 	movw	r3, #42168	; 0xa4b8
    7816:	f2c2 0300 	movt	r3, #8192	; 0x2000
    781a:	701a      	strb	r2, [r3, #0]
  }
}
    781c:	46bd      	mov	sp, r7
    781e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7822:	4770      	bx	lr

00007824 <send_adc>:
  
void send_adc(void){  //500ms
    7824:	b480      	push	{r7}
    7826:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 5 == 1) PERIODIC_SEND_ADC();}
    7828:	f24a 43b1 	movw	r3, #42161	; 0xa4b1
    782c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7830:	781a      	ldrb	r2, [r3, #0]
    7832:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    7836:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    783a:	fba3 1302 	umull	r1, r3, r3, r2
    783e:	0899      	lsrs	r1, r3, #2
    7840:	460b      	mov	r3, r1
    7842:	009b      	lsls	r3, r3, #2
    7844:	440b      	add	r3, r1
    7846:	1ad3      	subs	r3, r2, r3
    7848:	b2db      	uxtb	r3, r3
    784a:	2b01      	cmp	r3, #1
    784c:	f040 8269 	bne.w	7d22 <send_adc+0x4fe>
    7850:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7854:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7858:	781a      	ldrb	r2, [r3, #0]
    785a:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    785e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7862:	781b      	ldrb	r3, [r3, #0]
    7864:	b2db      	uxtb	r3, r3
    7866:	429a      	cmp	r2, r3
    7868:	d313      	bcc.n	7892 <send_adc+0x6e>
    786a:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    786e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7872:	781b      	ldrb	r3, [r3, #0]
    7874:	b2db      	uxtb	r3, r3
    7876:	461a      	mov	r2, r3
    7878:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    787c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7880:	781b      	ldrb	r3, [r3, #0]
    7882:	1ad3      	subs	r3, r2, r3
    7884:	33ff      	adds	r3, #255	; 0xff
    7886:	2b08      	cmp	r3, #8
    7888:	bfd4      	ite	le
    788a:	2300      	movle	r3, #0
    788c:	2301      	movgt	r3, #1
    788e:	b2db      	uxtb	r3, r3
    7890:	e011      	b.n	78b6 <send_adc+0x92>
    7892:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    7896:	f2c2 0300 	movt	r3, #8192	; 0x2000
    789a:	781b      	ldrb	r3, [r3, #0]
    789c:	b2db      	uxtb	r3, r3
    789e:	461a      	mov	r2, r3
    78a0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    78a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78a8:	781b      	ldrb	r3, [r3, #0]
    78aa:	1ad3      	subs	r3, r2, r3
    78ac:	2b08      	cmp	r3, #8
    78ae:	bfd4      	ite	le
    78b0:	2300      	movle	r3, #0
    78b2:	2301      	movgt	r3, #1
    78b4:	b2db      	uxtb	r3, r3
    78b6:	2b00      	cmp	r3, #0
    78b8:	f000 8227 	beq.w	7d0a <send_adc+0x4e6>
    78bc:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    78c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78c4:	781b      	ldrb	r3, [r3, #0]
    78c6:	461a      	mov	r2, r3
    78c8:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    78cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78d0:	2105      	movs	r1, #5
    78d2:	5499      	strb	r1, [r3, r2]
    78d4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    78d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78dc:	781b      	ldrb	r3, [r3, #0]
    78de:	3301      	adds	r3, #1
    78e0:	b2da      	uxtb	r2, r3
    78e2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    78e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78ea:	701a      	strb	r2, [r3, #0]
    78ec:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    78f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78f4:	781b      	ldrb	r3, [r3, #0]
    78f6:	2bff      	cmp	r3, #255	; 0xff
    78f8:	d105      	bne.n	7906 <send_adc+0xe2>
    78fa:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    78fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7902:	2200      	movs	r2, #0
    7904:	701a      	strb	r2, [r3, #0]
    7906:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    790a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    790e:	781b      	ldrb	r3, [r3, #0]
    7910:	461a      	mov	r2, r3
    7912:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    7916:	f2c2 0300 	movt	r3, #8192	; 0x2000
    791a:	2107      	movs	r1, #7
    791c:	5499      	strb	r1, [r3, r2]
    791e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7922:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7926:	781b      	ldrb	r3, [r3, #0]
    7928:	3301      	adds	r3, #1
    792a:	b2da      	uxtb	r2, r3
    792c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7930:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7934:	701a      	strb	r2, [r3, #0]
    7936:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    793a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    793e:	781b      	ldrb	r3, [r3, #0]
    7940:	2bff      	cmp	r3, #255	; 0xff
    7942:	d105      	bne.n	7950 <send_adc+0x12c>
    7944:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7948:	f2c2 0300 	movt	r3, #8192	; 0x2000
    794c:	2200      	movs	r2, #0
    794e:	701a      	strb	r2, [r3, #0]
    7950:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7954:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7958:	2207      	movs	r2, #7
    795a:	701a      	strb	r2, [r3, #0]
    795c:	f24a 53be 	movw	r3, #42430	; 0xa5be
    7960:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7964:	2207      	movs	r2, #7
    7966:	701a      	strb	r2, [r3, #0]
    7968:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    796c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7970:	781b      	ldrb	r3, [r3, #0]
    7972:	461a      	mov	r2, r3
    7974:	f24a 7358 	movw	r3, #42840	; 0xa758
    7978:	f2c2 0300 	movt	r3, #8192	; 0x2000
    797c:	7819      	ldrb	r1, [r3, #0]
    797e:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    7982:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7986:	5499      	strb	r1, [r3, r2]
    7988:	f24a 7358 	movw	r3, #42840	; 0xa758
    798c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7990:	781a      	ldrb	r2, [r3, #0]
    7992:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7996:	f2c2 0300 	movt	r3, #8192	; 0x2000
    799a:	781b      	ldrb	r3, [r3, #0]
    799c:	4413      	add	r3, r2
    799e:	b2da      	uxtb	r2, r3
    79a0:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    79a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79a8:	701a      	strb	r2, [r3, #0]
    79aa:	f24a 53be 	movw	r3, #42430	; 0xa5be
    79ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79b2:	781a      	ldrb	r2, [r3, #0]
    79b4:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    79b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79bc:	781b      	ldrb	r3, [r3, #0]
    79be:	4413      	add	r3, r2
    79c0:	b2da      	uxtb	r2, r3
    79c2:	f24a 53be 	movw	r3, #42430	; 0xa5be
    79c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79ca:	701a      	strb	r2, [r3, #0]
    79cc:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    79d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79d4:	781b      	ldrb	r3, [r3, #0]
    79d6:	3301      	adds	r3, #1
    79d8:	b2da      	uxtb	r2, r3
    79da:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    79de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79e2:	701a      	strb	r2, [r3, #0]
    79e4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    79e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79ec:	781b      	ldrb	r3, [r3, #0]
    79ee:	2bff      	cmp	r3, #255	; 0xff
    79f0:	d105      	bne.n	79fe <send_adc+0x1da>
    79f2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    79f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79fa:	2200      	movs	r2, #0
    79fc:	701a      	strb	r2, [r3, #0]
    79fe:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7a02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a06:	781b      	ldrb	r3, [r3, #0]
    7a08:	461a      	mov	r2, r3
    7a0a:	f24a 7358 	movw	r3, #42840	; 0xa758
    7a0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a12:	7859      	ldrb	r1, [r3, #1]
    7a14:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    7a18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a1c:	5499      	strb	r1, [r3, r2]
    7a1e:	4bc3      	ldr	r3, [pc, #780]	; (7d2c <send_adc+0x508>)
    7a20:	781a      	ldrb	r2, [r3, #0]
    7a22:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7a26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a2a:	781b      	ldrb	r3, [r3, #0]
    7a2c:	4413      	add	r3, r2
    7a2e:	b2da      	uxtb	r2, r3
    7a30:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7a34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a38:	701a      	strb	r2, [r3, #0]
    7a3a:	f24a 53be 	movw	r3, #42430	; 0xa5be
    7a3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a42:	781a      	ldrb	r2, [r3, #0]
    7a44:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7a48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a4c:	781b      	ldrb	r3, [r3, #0]
    7a4e:	4413      	add	r3, r2
    7a50:	b2da      	uxtb	r2, r3
    7a52:	f24a 53be 	movw	r3, #42430	; 0xa5be
    7a56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a5a:	701a      	strb	r2, [r3, #0]
    7a5c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7a60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a64:	781b      	ldrb	r3, [r3, #0]
    7a66:	3301      	adds	r3, #1
    7a68:	b2da      	uxtb	r2, r3
    7a6a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7a6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a72:	701a      	strb	r2, [r3, #0]
    7a74:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7a78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a7c:	781b      	ldrb	r3, [r3, #0]
    7a7e:	2bff      	cmp	r3, #255	; 0xff
    7a80:	d105      	bne.n	7a8e <send_adc+0x26a>
    7a82:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7a86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a8a:	2200      	movs	r2, #0
    7a8c:	701a      	strb	r2, [r3, #0]
    7a8e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7a92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a96:	781b      	ldrb	r3, [r3, #0]
    7a98:	461a      	mov	r2, r3
    7a9a:	f24a 735a 	movw	r3, #42842	; 0xa75a
    7a9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7aa2:	7819      	ldrb	r1, [r3, #0]
    7aa4:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    7aa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7aac:	5499      	strb	r1, [r3, r2]
    7aae:	f24a 735a 	movw	r3, #42842	; 0xa75a
    7ab2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ab6:	781a      	ldrb	r2, [r3, #0]
    7ab8:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7abc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ac0:	781b      	ldrb	r3, [r3, #0]
    7ac2:	4413      	add	r3, r2
    7ac4:	b2da      	uxtb	r2, r3
    7ac6:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7aca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ace:	701a      	strb	r2, [r3, #0]
    7ad0:	f24a 53be 	movw	r3, #42430	; 0xa5be
    7ad4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ad8:	781a      	ldrb	r2, [r3, #0]
    7ada:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7ade:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ae2:	781b      	ldrb	r3, [r3, #0]
    7ae4:	4413      	add	r3, r2
    7ae6:	b2da      	uxtb	r2, r3
    7ae8:	f24a 53be 	movw	r3, #42430	; 0xa5be
    7aec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7af0:	701a      	strb	r2, [r3, #0]
    7af2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7af6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7afa:	781b      	ldrb	r3, [r3, #0]
    7afc:	3301      	adds	r3, #1
    7afe:	b2da      	uxtb	r2, r3
    7b00:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7b04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b08:	701a      	strb	r2, [r3, #0]
    7b0a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7b0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b12:	781b      	ldrb	r3, [r3, #0]
    7b14:	2bff      	cmp	r3, #255	; 0xff
    7b16:	d105      	bne.n	7b24 <send_adc+0x300>
    7b18:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7b1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b20:	2200      	movs	r2, #0
    7b22:	701a      	strb	r2, [r3, #0]
    7b24:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7b28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b2c:	781b      	ldrb	r3, [r3, #0]
    7b2e:	461a      	mov	r2, r3
    7b30:	f24a 735a 	movw	r3, #42842	; 0xa75a
    7b34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b38:	7859      	ldrb	r1, [r3, #1]
    7b3a:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    7b3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b42:	5499      	strb	r1, [r3, r2]
    7b44:	4b7a      	ldr	r3, [pc, #488]	; (7d30 <send_adc+0x50c>)
    7b46:	781a      	ldrb	r2, [r3, #0]
    7b48:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7b4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b50:	781b      	ldrb	r3, [r3, #0]
    7b52:	4413      	add	r3, r2
    7b54:	b2da      	uxtb	r2, r3
    7b56:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7b5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b5e:	701a      	strb	r2, [r3, #0]
    7b60:	f24a 53be 	movw	r3, #42430	; 0xa5be
    7b64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b68:	781a      	ldrb	r2, [r3, #0]
    7b6a:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7b6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b72:	781b      	ldrb	r3, [r3, #0]
    7b74:	4413      	add	r3, r2
    7b76:	b2da      	uxtb	r2, r3
    7b78:	f24a 53be 	movw	r3, #42430	; 0xa5be
    7b7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b80:	701a      	strb	r2, [r3, #0]
    7b82:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7b86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b8a:	781b      	ldrb	r3, [r3, #0]
    7b8c:	3301      	adds	r3, #1
    7b8e:	b2da      	uxtb	r2, r3
    7b90:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7b94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b98:	701a      	strb	r2, [r3, #0]
    7b9a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7b9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ba2:	781b      	ldrb	r3, [r3, #0]
    7ba4:	2bff      	cmp	r3, #255	; 0xff
    7ba6:	d105      	bne.n	7bb4 <send_adc+0x390>
    7ba8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7bac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7bb0:	2200      	movs	r2, #0
    7bb2:	701a      	strb	r2, [r3, #0]
    7bb4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7bb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7bbc:	781b      	ldrb	r3, [r3, #0]
    7bbe:	461a      	mov	r2, r3
    7bc0:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7bc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7bc8:	7819      	ldrb	r1, [r3, #0]
    7bca:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    7bce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7bd2:	5499      	strb	r1, [r3, r2]
    7bd4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7bd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7bdc:	781b      	ldrb	r3, [r3, #0]
    7bde:	3301      	adds	r3, #1
    7be0:	b2da      	uxtb	r2, r3
    7be2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7be6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7bea:	701a      	strb	r2, [r3, #0]
    7bec:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7bf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7bf4:	781b      	ldrb	r3, [r3, #0]
    7bf6:	2bff      	cmp	r3, #255	; 0xff
    7bf8:	d105      	bne.n	7c06 <send_adc+0x3e2>
    7bfa:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7bfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c02:	2200      	movs	r2, #0
    7c04:	701a      	strb	r2, [r3, #0]
    7c06:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7c0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c0e:	781b      	ldrb	r3, [r3, #0]
    7c10:	461a      	mov	r2, r3
    7c12:	f24a 53be 	movw	r3, #42430	; 0xa5be
    7c16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c1a:	7819      	ldrb	r1, [r3, #0]
    7c1c:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    7c20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c24:	5499      	strb	r1, [r3, r2]
    7c26:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7c2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c2e:	781b      	ldrb	r3, [r3, #0]
    7c30:	3301      	adds	r3, #1
    7c32:	b2da      	uxtb	r2, r3
    7c34:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7c38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c3c:	701a      	strb	r2, [r3, #0]
    7c3e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7c42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c46:	781b      	ldrb	r3, [r3, #0]
    7c48:	2bff      	cmp	r3, #255	; 0xff
    7c4a:	d105      	bne.n	7c58 <send_adc+0x434>
    7c4c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7c50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c54:	2200      	movs	r2, #0
    7c56:	701a      	strb	r2, [r3, #0]
    7c58:	f242 0339 	movw	r3, #8249	; 0x2039
    7c5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c60:	781b      	ldrb	r3, [r3, #0]
    7c62:	b2db      	uxtb	r3, r3
    7c64:	f003 0310 	and.w	r3, r3, #16
    7c68:	2b00      	cmp	r3, #0
    7c6a:	d15a      	bne.n	7d22 <send_adc+0x4fe>
    7c6c:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    7c70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c74:	781b      	ldrb	r3, [r3, #0]
    7c76:	b2db      	uxtb	r3, r3
    7c78:	461a      	mov	r2, r3
    7c7a:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    7c7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c82:	5c9a      	ldrb	r2, [r3, r2]
    7c84:	f24a 53bb 	movw	r3, #42427	; 0xa5bb
    7c88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c8c:	701a      	strb	r2, [r3, #0]
    7c8e:	f24a 53bc 	movw	r3, #42428	; 0xa5bc
    7c92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c96:	2200      	movs	r2, #0
    7c98:	701a      	strb	r2, [r3, #0]
    7c9a:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    7c9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ca2:	781b      	ldrb	r3, [r3, #0]
    7ca4:	b2db      	uxtb	r3, r3
    7ca6:	3301      	adds	r3, #1
    7ca8:	b2da      	uxtb	r2, r3
    7caa:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    7cae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7cb2:	701a      	strb	r2, [r3, #0]
    7cb4:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    7cb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7cbc:	781b      	ldrb	r3, [r3, #0]
    7cbe:	b2db      	uxtb	r3, r3
    7cc0:	2bff      	cmp	r3, #255	; 0xff
    7cc2:	d105      	bne.n	7cd0 <send_adc+0x4ac>
    7cc4:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    7cc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ccc:	2200      	movs	r2, #0
    7cce:	701a      	strb	r2, [r3, #0]
    7cd0:	f242 0338 	movw	r3, #8248	; 0x2038
    7cd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7cd8:	f242 0238 	movw	r2, #8248	; 0x2038
    7cdc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    7ce0:	7812      	ldrb	r2, [r2, #0]
    7ce2:	b2d2      	uxtb	r2, r2
    7ce4:	f042 0201 	orr.w	r2, r2, #1
    7ce8:	b2d2      	uxtb	r2, r2
    7cea:	701a      	strb	r2, [r3, #0]
    7cec:	f242 0339 	movw	r3, #8249	; 0x2039
    7cf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7cf4:	f242 0239 	movw	r2, #8249	; 0x2039
    7cf8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    7cfc:	7812      	ldrb	r2, [r2, #0]
    7cfe:	b2d2      	uxtb	r2, r2
    7d00:	f042 0210 	orr.w	r2, r2, #16
    7d04:	b2d2      	uxtb	r2, r2
    7d06:	701a      	strb	r2, [r3, #0]
    7d08:	e00b      	b.n	7d22 <send_adc+0x4fe>
    7d0a:	f24a 43b8 	movw	r3, #42168	; 0xa4b8
    7d0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d12:	781b      	ldrb	r3, [r3, #0]
    7d14:	3301      	adds	r3, #1
    7d16:	b2da      	uxtb	r2, r3
    7d18:	f24a 43b8 	movw	r3, #42168	; 0xa4b8
    7d1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d20:	701a      	strb	r2, [r3, #0]
}
    7d22:	46bd      	mov	sp, r7
    7d24:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d28:	4770      	bx	lr
    7d2a:	bf00      	nop
    7d2c:	2000a759 	.word	0x2000a759
    7d30:	2000a75b 	.word	0x2000a75b

00007d34 <send_settings>:
void send_settings(void){ //500ms
    7d34:	b480      	push	{r7}
    7d36:	af00      	add	r7, sp, #0
  //if(!boot)
  {if (count % 5 == 2) PERIODIC_SEND_SETTINGS();}
    7d38:	f24a 43b1 	movw	r3, #42161	; 0xa4b1
    7d3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d40:	781a      	ldrb	r2, [r3, #0]
    7d42:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    7d46:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    7d4a:	fba3 1302 	umull	r1, r3, r3, r2
    7d4e:	0899      	lsrs	r1, r3, #2
    7d50:	460b      	mov	r3, r1
    7d52:	009b      	lsls	r3, r3, #2
    7d54:	440b      	add	r3, r1
    7d56:	1ad3      	subs	r3, r2, r3
    7d58:	b2db      	uxtb	r3, r3
    7d5a:	2b02      	cmp	r3, #2
    7d5c:	f040 83e7 	bne.w	852e <send_settings+0x7fa>
    7d60:	f64a 23cc 	movw	r3, #43724	; 0xaacc
    7d64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d68:	781b      	ldrb	r3, [r3, #0]
    7d6a:	2b00      	cmp	r3, #0
    7d6c:	f000 83df 	beq.w	852e <send_settings+0x7fa>
    7d70:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7d74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d78:	781a      	ldrb	r2, [r3, #0]
    7d7a:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    7d7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d82:	781b      	ldrb	r3, [r3, #0]
    7d84:	b2db      	uxtb	r3, r3
    7d86:	429a      	cmp	r2, r3
    7d88:	d313      	bcc.n	7db2 <send_settings+0x7e>
    7d8a:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    7d8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d92:	781b      	ldrb	r3, [r3, #0]
    7d94:	b2db      	uxtb	r3, r3
    7d96:	461a      	mov	r2, r3
    7d98:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7d9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7da0:	781b      	ldrb	r3, [r3, #0]
    7da2:	1ad3      	subs	r3, r2, r3
    7da4:	33ff      	adds	r3, #255	; 0xff
    7da6:	2b0d      	cmp	r3, #13
    7da8:	bfd4      	ite	le
    7daa:	2300      	movle	r3, #0
    7dac:	2301      	movgt	r3, #1
    7dae:	b2db      	uxtb	r3, r3
    7db0:	e011      	b.n	7dd6 <send_settings+0xa2>
    7db2:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    7db6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7dba:	781b      	ldrb	r3, [r3, #0]
    7dbc:	b2db      	uxtb	r3, r3
    7dbe:	461a      	mov	r2, r3
    7dc0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7dc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7dc8:	781b      	ldrb	r3, [r3, #0]
    7dca:	1ad3      	subs	r3, r2, r3
    7dcc:	2b0d      	cmp	r3, #13
    7dce:	bfd4      	ite	le
    7dd0:	2300      	movle	r3, #0
    7dd2:	2301      	movgt	r3, #1
    7dd4:	b2db      	uxtb	r3, r3
    7dd6:	2b00      	cmp	r3, #0
    7dd8:	f000 839d 	beq.w	8516 <send_settings+0x7e2>
    7ddc:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7de0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7de4:	781b      	ldrb	r3, [r3, #0]
    7de6:	461a      	mov	r2, r3
    7de8:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    7dec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7df0:	2105      	movs	r1, #5
    7df2:	5499      	strb	r1, [r3, r2]
    7df4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7df8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7dfc:	781b      	ldrb	r3, [r3, #0]
    7dfe:	3301      	adds	r3, #1
    7e00:	b2da      	uxtb	r2, r3
    7e02:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7e06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e0a:	701a      	strb	r2, [r3, #0]
    7e0c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7e10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e14:	781b      	ldrb	r3, [r3, #0]
    7e16:	2bff      	cmp	r3, #255	; 0xff
    7e18:	d105      	bne.n	7e26 <send_settings+0xf2>
    7e1a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7e1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e22:	2200      	movs	r2, #0
    7e24:	701a      	strb	r2, [r3, #0]
    7e26:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7e2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e2e:	781b      	ldrb	r3, [r3, #0]
    7e30:	461a      	mov	r2, r3
    7e32:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    7e36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e3a:	2111      	movs	r1, #17
    7e3c:	5499      	strb	r1, [r3, r2]
    7e3e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7e42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e46:	781b      	ldrb	r3, [r3, #0]
    7e48:	3301      	adds	r3, #1
    7e4a:	b2da      	uxtb	r2, r3
    7e4c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7e50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e54:	701a      	strb	r2, [r3, #0]
    7e56:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7e5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e5e:	781b      	ldrb	r3, [r3, #0]
    7e60:	2bff      	cmp	r3, #255	; 0xff
    7e62:	d105      	bne.n	7e70 <send_settings+0x13c>
    7e64:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7e68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e6c:	2200      	movs	r2, #0
    7e6e:	701a      	strb	r2, [r3, #0]
    7e70:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7e74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e78:	2211      	movs	r2, #17
    7e7a:	701a      	strb	r2, [r3, #0]
    7e7c:	f24a 53be 	movw	r3, #42430	; 0xa5be
    7e80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e84:	2211      	movs	r2, #17
    7e86:	701a      	strb	r2, [r3, #0]
    7e88:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7e8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e90:	781b      	ldrb	r3, [r3, #0]
    7e92:	461a      	mov	r2, r3
    7e94:	f64a 23cc 	movw	r3, #43724	; 0xaacc
    7e98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e9c:	7819      	ldrb	r1, [r3, #0]
    7e9e:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    7ea2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ea6:	5499      	strb	r1, [r3, r2]
    7ea8:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7eac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7eb0:	781a      	ldrb	r2, [r3, #0]
    7eb2:	f64a 23cc 	movw	r3, #43724	; 0xaacc
    7eb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7eba:	781b      	ldrb	r3, [r3, #0]
    7ebc:	4413      	add	r3, r2
    7ebe:	b2da      	uxtb	r2, r3
    7ec0:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7ec4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ec8:	701a      	strb	r2, [r3, #0]
    7eca:	f24a 53be 	movw	r3, #42430	; 0xa5be
    7ece:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ed2:	781a      	ldrb	r2, [r3, #0]
    7ed4:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7ed8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7edc:	781b      	ldrb	r3, [r3, #0]
    7ede:	4413      	add	r3, r2
    7ee0:	b2da      	uxtb	r2, r3
    7ee2:	f24a 53be 	movw	r3, #42430	; 0xa5be
    7ee6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7eea:	701a      	strb	r2, [r3, #0]
    7eec:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7ef0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ef4:	781b      	ldrb	r3, [r3, #0]
    7ef6:	3301      	adds	r3, #1
    7ef8:	b2da      	uxtb	r2, r3
    7efa:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7efe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f02:	701a      	strb	r2, [r3, #0]
    7f04:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7f08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f0c:	781b      	ldrb	r3, [r3, #0]
    7f0e:	2bff      	cmp	r3, #255	; 0xff
    7f10:	d105      	bne.n	7f1e <send_settings+0x1ea>
    7f12:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7f16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f1a:	2200      	movs	r2, #0
    7f1c:	701a      	strb	r2, [r3, #0]
    7f1e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7f22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f26:	781b      	ldrb	r3, [r3, #0]
    7f28:	461a      	mov	r2, r3
    7f2a:	f24a 43a8 	movw	r3, #42152	; 0xa4a8
    7f2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f32:	7819      	ldrb	r1, [r3, #0]
    7f34:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    7f38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f3c:	5499      	strb	r1, [r3, r2]
    7f3e:	f24a 43a8 	movw	r3, #42152	; 0xa4a8
    7f42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f46:	781a      	ldrb	r2, [r3, #0]
    7f48:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7f4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f50:	781b      	ldrb	r3, [r3, #0]
    7f52:	4413      	add	r3, r2
    7f54:	b2da      	uxtb	r2, r3
    7f56:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7f5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f5e:	701a      	strb	r2, [r3, #0]
    7f60:	f24a 53be 	movw	r3, #42430	; 0xa5be
    7f64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f68:	781a      	ldrb	r2, [r3, #0]
    7f6a:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7f6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f72:	781b      	ldrb	r3, [r3, #0]
    7f74:	4413      	add	r3, r2
    7f76:	b2da      	uxtb	r2, r3
    7f78:	f24a 53be 	movw	r3, #42430	; 0xa5be
    7f7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f80:	701a      	strb	r2, [r3, #0]
    7f82:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7f86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f8a:	781b      	ldrb	r3, [r3, #0]
    7f8c:	3301      	adds	r3, #1
    7f8e:	b2da      	uxtb	r2, r3
    7f90:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7f94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f98:	701a      	strb	r2, [r3, #0]
    7f9a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7f9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7fa2:	781b      	ldrb	r3, [r3, #0]
    7fa4:	2bff      	cmp	r3, #255	; 0xff
    7fa6:	d105      	bne.n	7fb4 <send_settings+0x280>
    7fa8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7fac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7fb0:	2200      	movs	r2, #0
    7fb2:	701a      	strb	r2, [r3, #0]
    7fb4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7fb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7fbc:	781b      	ldrb	r3, [r3, #0]
    7fbe:	461a      	mov	r2, r3
    7fc0:	f24a 43a8 	movw	r3, #42152	; 0xa4a8
    7fc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7fc8:	7859      	ldrb	r1, [r3, #1]
    7fca:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    7fce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7fd2:	5499      	strb	r1, [r3, r2]
    7fd4:	4bd1      	ldr	r3, [pc, #836]	; (831c <send_settings+0x5e8>)
    7fd6:	781a      	ldrb	r2, [r3, #0]
    7fd8:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7fdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7fe0:	781b      	ldrb	r3, [r3, #0]
    7fe2:	4413      	add	r3, r2
    7fe4:	b2da      	uxtb	r2, r3
    7fe6:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7fea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7fee:	701a      	strb	r2, [r3, #0]
    7ff0:	f24a 53be 	movw	r3, #42430	; 0xa5be
    7ff4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ff8:	781a      	ldrb	r2, [r3, #0]
    7ffa:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7ffe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8002:	781b      	ldrb	r3, [r3, #0]
    8004:	4413      	add	r3, r2
    8006:	b2da      	uxtb	r2, r3
    8008:	f24a 53be 	movw	r3, #42430	; 0xa5be
    800c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8010:	701a      	strb	r2, [r3, #0]
    8012:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8016:	f2c2 0300 	movt	r3, #8192	; 0x2000
    801a:	781b      	ldrb	r3, [r3, #0]
    801c:	3301      	adds	r3, #1
    801e:	b2da      	uxtb	r2, r3
    8020:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8024:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8028:	701a      	strb	r2, [r3, #0]
    802a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    802e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8032:	781b      	ldrb	r3, [r3, #0]
    8034:	2bff      	cmp	r3, #255	; 0xff
    8036:	d105      	bne.n	8044 <send_settings+0x310>
    8038:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    803c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8040:	2200      	movs	r2, #0
    8042:	701a      	strb	r2, [r3, #0]
    8044:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8048:	f2c2 0300 	movt	r3, #8192	; 0x2000
    804c:	781b      	ldrb	r3, [r3, #0]
    804e:	461a      	mov	r2, r3
    8050:	f24a 43a8 	movw	r3, #42152	; 0xa4a8
    8054:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8058:	7899      	ldrb	r1, [r3, #2]
    805a:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    805e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8062:	5499      	strb	r1, [r3, r2]
    8064:	4bae      	ldr	r3, [pc, #696]	; (8320 <send_settings+0x5ec>)
    8066:	781a      	ldrb	r2, [r3, #0]
    8068:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    806c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8070:	781b      	ldrb	r3, [r3, #0]
    8072:	4413      	add	r3, r2
    8074:	b2da      	uxtb	r2, r3
    8076:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    807a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    807e:	701a      	strb	r2, [r3, #0]
    8080:	f24a 53be 	movw	r3, #42430	; 0xa5be
    8084:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8088:	781a      	ldrb	r2, [r3, #0]
    808a:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    808e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8092:	781b      	ldrb	r3, [r3, #0]
    8094:	4413      	add	r3, r2
    8096:	b2da      	uxtb	r2, r3
    8098:	f24a 53be 	movw	r3, #42430	; 0xa5be
    809c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80a0:	701a      	strb	r2, [r3, #0]
    80a2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    80a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80aa:	781b      	ldrb	r3, [r3, #0]
    80ac:	3301      	adds	r3, #1
    80ae:	b2da      	uxtb	r2, r3
    80b0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    80b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80b8:	701a      	strb	r2, [r3, #0]
    80ba:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    80be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80c2:	781b      	ldrb	r3, [r3, #0]
    80c4:	2bff      	cmp	r3, #255	; 0xff
    80c6:	d105      	bne.n	80d4 <send_settings+0x3a0>
    80c8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    80cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80d0:	2200      	movs	r2, #0
    80d2:	701a      	strb	r2, [r3, #0]
    80d4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    80d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80dc:	781b      	ldrb	r3, [r3, #0]
    80de:	461a      	mov	r2, r3
    80e0:	f24a 43a8 	movw	r3, #42152	; 0xa4a8
    80e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80e8:	78d9      	ldrb	r1, [r3, #3]
    80ea:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    80ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80f2:	5499      	strb	r1, [r3, r2]
    80f4:	4b8b      	ldr	r3, [pc, #556]	; (8324 <send_settings+0x5f0>)
    80f6:	781a      	ldrb	r2, [r3, #0]
    80f8:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    80fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8100:	781b      	ldrb	r3, [r3, #0]
    8102:	4413      	add	r3, r2
    8104:	b2da      	uxtb	r2, r3
    8106:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    810a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    810e:	701a      	strb	r2, [r3, #0]
    8110:	f24a 53be 	movw	r3, #42430	; 0xa5be
    8114:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8118:	781a      	ldrb	r2, [r3, #0]
    811a:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    811e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8122:	781b      	ldrb	r3, [r3, #0]
    8124:	4413      	add	r3, r2
    8126:	b2da      	uxtb	r2, r3
    8128:	f24a 53be 	movw	r3, #42430	; 0xa5be
    812c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8130:	701a      	strb	r2, [r3, #0]
    8132:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8136:	f2c2 0300 	movt	r3, #8192	; 0x2000
    813a:	781b      	ldrb	r3, [r3, #0]
    813c:	3301      	adds	r3, #1
    813e:	b2da      	uxtb	r2, r3
    8140:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8144:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8148:	701a      	strb	r2, [r3, #0]
    814a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    814e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8152:	781b      	ldrb	r3, [r3, #0]
    8154:	2bff      	cmp	r3, #255	; 0xff
    8156:	d105      	bne.n	8164 <send_settings+0x430>
    8158:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    815c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8160:	2200      	movs	r2, #0
    8162:	701a      	strb	r2, [r3, #0]
    8164:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8168:	f2c2 0300 	movt	r3, #8192	; 0x2000
    816c:	781b      	ldrb	r3, [r3, #0]
    816e:	461a      	mov	r2, r3
    8170:	f24a 43ac 	movw	r3, #42156	; 0xa4ac
    8174:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8178:	7819      	ldrb	r1, [r3, #0]
    817a:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    817e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8182:	5499      	strb	r1, [r3, r2]
    8184:	f24a 43ac 	movw	r3, #42156	; 0xa4ac
    8188:	f2c2 0300 	movt	r3, #8192	; 0x2000
    818c:	781a      	ldrb	r2, [r3, #0]
    818e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8192:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8196:	781b      	ldrb	r3, [r3, #0]
    8198:	4413      	add	r3, r2
    819a:	b2da      	uxtb	r2, r3
    819c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    81a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81a4:	701a      	strb	r2, [r3, #0]
    81a6:	f24a 53be 	movw	r3, #42430	; 0xa5be
    81aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81ae:	781a      	ldrb	r2, [r3, #0]
    81b0:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    81b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81b8:	781b      	ldrb	r3, [r3, #0]
    81ba:	4413      	add	r3, r2
    81bc:	b2da      	uxtb	r2, r3
    81be:	f24a 53be 	movw	r3, #42430	; 0xa5be
    81c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81c6:	701a      	strb	r2, [r3, #0]
    81c8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    81cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81d0:	781b      	ldrb	r3, [r3, #0]
    81d2:	3301      	adds	r3, #1
    81d4:	b2da      	uxtb	r2, r3
    81d6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    81da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81de:	701a      	strb	r2, [r3, #0]
    81e0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    81e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81e8:	781b      	ldrb	r3, [r3, #0]
    81ea:	2bff      	cmp	r3, #255	; 0xff
    81ec:	d105      	bne.n	81fa <send_settings+0x4c6>
    81ee:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    81f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81f6:	2200      	movs	r2, #0
    81f8:	701a      	strb	r2, [r3, #0]
    81fa:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    81fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8202:	781b      	ldrb	r3, [r3, #0]
    8204:	461a      	mov	r2, r3
    8206:	f24a 43ac 	movw	r3, #42156	; 0xa4ac
    820a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    820e:	7859      	ldrb	r1, [r3, #1]
    8210:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    8214:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8218:	5499      	strb	r1, [r3, r2]
    821a:	4b43      	ldr	r3, [pc, #268]	; (8328 <send_settings+0x5f4>)
    821c:	781a      	ldrb	r2, [r3, #0]
    821e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8222:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8226:	781b      	ldrb	r3, [r3, #0]
    8228:	4413      	add	r3, r2
    822a:	b2da      	uxtb	r2, r3
    822c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8230:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8234:	701a      	strb	r2, [r3, #0]
    8236:	f24a 53be 	movw	r3, #42430	; 0xa5be
    823a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    823e:	781a      	ldrb	r2, [r3, #0]
    8240:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8244:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8248:	781b      	ldrb	r3, [r3, #0]
    824a:	4413      	add	r3, r2
    824c:	b2da      	uxtb	r2, r3
    824e:	f24a 53be 	movw	r3, #42430	; 0xa5be
    8252:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8256:	701a      	strb	r2, [r3, #0]
    8258:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    825c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8260:	781b      	ldrb	r3, [r3, #0]
    8262:	3301      	adds	r3, #1
    8264:	b2da      	uxtb	r2, r3
    8266:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    826a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    826e:	701a      	strb	r2, [r3, #0]
    8270:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8274:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8278:	781b      	ldrb	r3, [r3, #0]
    827a:	2bff      	cmp	r3, #255	; 0xff
    827c:	d105      	bne.n	828a <send_settings+0x556>
    827e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8282:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8286:	2200      	movs	r2, #0
    8288:	701a      	strb	r2, [r3, #0]
    828a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    828e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8292:	781b      	ldrb	r3, [r3, #0]
    8294:	461a      	mov	r2, r3
    8296:	f24a 43ac 	movw	r3, #42156	; 0xa4ac
    829a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    829e:	7899      	ldrb	r1, [r3, #2]
    82a0:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    82a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82a8:	5499      	strb	r1, [r3, r2]
    82aa:	4b20      	ldr	r3, [pc, #128]	; (832c <send_settings+0x5f8>)
    82ac:	781a      	ldrb	r2, [r3, #0]
    82ae:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    82b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82b6:	781b      	ldrb	r3, [r3, #0]
    82b8:	4413      	add	r3, r2
    82ba:	b2da      	uxtb	r2, r3
    82bc:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    82c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82c4:	701a      	strb	r2, [r3, #0]
    82c6:	f24a 53be 	movw	r3, #42430	; 0xa5be
    82ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82ce:	781a      	ldrb	r2, [r3, #0]
    82d0:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    82d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82d8:	781b      	ldrb	r3, [r3, #0]
    82da:	4413      	add	r3, r2
    82dc:	b2da      	uxtb	r2, r3
    82de:	f24a 53be 	movw	r3, #42430	; 0xa5be
    82e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82e6:	701a      	strb	r2, [r3, #0]
    82e8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    82ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82f0:	781b      	ldrb	r3, [r3, #0]
    82f2:	3301      	adds	r3, #1
    82f4:	b2da      	uxtb	r2, r3
    82f6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    82fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82fe:	701a      	strb	r2, [r3, #0]
    8300:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8304:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8308:	781b      	ldrb	r3, [r3, #0]
    830a:	2bff      	cmp	r3, #255	; 0xff
    830c:	d110      	bne.n	8330 <send_settings+0x5fc>
    830e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8312:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8316:	2200      	movs	r2, #0
    8318:	701a      	strb	r2, [r3, #0]
    831a:	e009      	b.n	8330 <send_settings+0x5fc>
    831c:	2000a4a9 	.word	0x2000a4a9
    8320:	2000a4aa 	.word	0x2000a4aa
    8324:	2000a4ab 	.word	0x2000a4ab
    8328:	2000a4ad 	.word	0x2000a4ad
    832c:	2000a4ae 	.word	0x2000a4ae
    8330:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8334:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8338:	781b      	ldrb	r3, [r3, #0]
    833a:	461a      	mov	r2, r3
    833c:	f24a 43ac 	movw	r3, #42156	; 0xa4ac
    8340:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8344:	78d9      	ldrb	r1, [r3, #3]
    8346:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    834a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    834e:	5499      	strb	r1, [r3, r2]
    8350:	4b79      	ldr	r3, [pc, #484]	; (8538 <send_settings+0x804>)
    8352:	781a      	ldrb	r2, [r3, #0]
    8354:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8358:	f2c2 0300 	movt	r3, #8192	; 0x2000
    835c:	781b      	ldrb	r3, [r3, #0]
    835e:	4413      	add	r3, r2
    8360:	b2da      	uxtb	r2, r3
    8362:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8366:	f2c2 0300 	movt	r3, #8192	; 0x2000
    836a:	701a      	strb	r2, [r3, #0]
    836c:	f24a 53be 	movw	r3, #42430	; 0xa5be
    8370:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8374:	781a      	ldrb	r2, [r3, #0]
    8376:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    837a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    837e:	781b      	ldrb	r3, [r3, #0]
    8380:	4413      	add	r3, r2
    8382:	b2da      	uxtb	r2, r3
    8384:	f24a 53be 	movw	r3, #42430	; 0xa5be
    8388:	f2c2 0300 	movt	r3, #8192	; 0x2000
    838c:	701a      	strb	r2, [r3, #0]
    838e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8392:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8396:	781b      	ldrb	r3, [r3, #0]
    8398:	3301      	adds	r3, #1
    839a:	b2da      	uxtb	r2, r3
    839c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    83a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83a4:	701a      	strb	r2, [r3, #0]
    83a6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    83aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83ae:	781b      	ldrb	r3, [r3, #0]
    83b0:	2bff      	cmp	r3, #255	; 0xff
    83b2:	d105      	bne.n	83c0 <send_settings+0x68c>
    83b4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    83b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83bc:	2200      	movs	r2, #0
    83be:	701a      	strb	r2, [r3, #0]
    83c0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    83c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83c8:	781b      	ldrb	r3, [r3, #0]
    83ca:	461a      	mov	r2, r3
    83cc:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    83d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83d4:	7819      	ldrb	r1, [r3, #0]
    83d6:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    83da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83de:	5499      	strb	r1, [r3, r2]
    83e0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    83e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83e8:	781b      	ldrb	r3, [r3, #0]
    83ea:	3301      	adds	r3, #1
    83ec:	b2da      	uxtb	r2, r3
    83ee:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    83f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83f6:	701a      	strb	r2, [r3, #0]
    83f8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    83fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8400:	781b      	ldrb	r3, [r3, #0]
    8402:	2bff      	cmp	r3, #255	; 0xff
    8404:	d105      	bne.n	8412 <send_settings+0x6de>
    8406:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    840a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    840e:	2200      	movs	r2, #0
    8410:	701a      	strb	r2, [r3, #0]
    8412:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8416:	f2c2 0300 	movt	r3, #8192	; 0x2000
    841a:	781b      	ldrb	r3, [r3, #0]
    841c:	461a      	mov	r2, r3
    841e:	f24a 53be 	movw	r3, #42430	; 0xa5be
    8422:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8426:	7819      	ldrb	r1, [r3, #0]
    8428:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    842c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8430:	5499      	strb	r1, [r3, r2]
    8432:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8436:	f2c2 0300 	movt	r3, #8192	; 0x2000
    843a:	781b      	ldrb	r3, [r3, #0]
    843c:	3301      	adds	r3, #1
    843e:	b2da      	uxtb	r2, r3
    8440:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8444:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8448:	701a      	strb	r2, [r3, #0]
    844a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    844e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8452:	781b      	ldrb	r3, [r3, #0]
    8454:	2bff      	cmp	r3, #255	; 0xff
    8456:	d105      	bne.n	8464 <send_settings+0x730>
    8458:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    845c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8460:	2200      	movs	r2, #0
    8462:	701a      	strb	r2, [r3, #0]
    8464:	f242 0339 	movw	r3, #8249	; 0x2039
    8468:	f2c2 0300 	movt	r3, #8192	; 0x2000
    846c:	781b      	ldrb	r3, [r3, #0]
    846e:	b2db      	uxtb	r3, r3
    8470:	f003 0310 	and.w	r3, r3, #16
    8474:	2b00      	cmp	r3, #0
    8476:	d15a      	bne.n	852e <send_settings+0x7fa>
    8478:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    847c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8480:	781b      	ldrb	r3, [r3, #0]
    8482:	b2db      	uxtb	r3, r3
    8484:	461a      	mov	r2, r3
    8486:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    848a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    848e:	5c9a      	ldrb	r2, [r3, r2]
    8490:	f24a 53bb 	movw	r3, #42427	; 0xa5bb
    8494:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8498:	701a      	strb	r2, [r3, #0]
    849a:	f24a 53bc 	movw	r3, #42428	; 0xa5bc
    849e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84a2:	2200      	movs	r2, #0
    84a4:	701a      	strb	r2, [r3, #0]
    84a6:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    84aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84ae:	781b      	ldrb	r3, [r3, #0]
    84b0:	b2db      	uxtb	r3, r3
    84b2:	3301      	adds	r3, #1
    84b4:	b2da      	uxtb	r2, r3
    84b6:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    84ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84be:	701a      	strb	r2, [r3, #0]
    84c0:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    84c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84c8:	781b      	ldrb	r3, [r3, #0]
    84ca:	b2db      	uxtb	r3, r3
    84cc:	2bff      	cmp	r3, #255	; 0xff
    84ce:	d105      	bne.n	84dc <send_settings+0x7a8>
    84d0:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    84d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84d8:	2200      	movs	r2, #0
    84da:	701a      	strb	r2, [r3, #0]
    84dc:	f242 0338 	movw	r3, #8248	; 0x2038
    84e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84e4:	f242 0238 	movw	r2, #8248	; 0x2038
    84e8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    84ec:	7812      	ldrb	r2, [r2, #0]
    84ee:	b2d2      	uxtb	r2, r2
    84f0:	f042 0201 	orr.w	r2, r2, #1
    84f4:	b2d2      	uxtb	r2, r2
    84f6:	701a      	strb	r2, [r3, #0]
    84f8:	f242 0339 	movw	r3, #8249	; 0x2039
    84fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8500:	f242 0239 	movw	r2, #8249	; 0x2039
    8504:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8508:	7812      	ldrb	r2, [r2, #0]
    850a:	b2d2      	uxtb	r2, r2
    850c:	f042 0210 	orr.w	r2, r2, #16
    8510:	b2d2      	uxtb	r2, r2
    8512:	701a      	strb	r2, [r3, #0]
    8514:	e00b      	b.n	852e <send_settings+0x7fa>
    8516:	f24a 43b8 	movw	r3, #42168	; 0xa4b8
    851a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    851e:	781b      	ldrb	r3, [r3, #0]
    8520:	3301      	adds	r3, #1
    8522:	b2da      	uxtb	r2, r3
    8524:	f24a 43b8 	movw	r3, #42168	; 0xa4b8
    8528:	f2c2 0300 	movt	r3, #8192	; 0x2000
    852c:	701a      	strb	r2, [r3, #0]
}
    852e:	46bd      	mov	sp, r7
    8530:	f85d 7b04 	ldr.w	r7, [sp], #4
    8534:	4770      	bx	lr
    8536:	bf00      	nop
    8538:	2000a4af 	.word	0x2000a4af

0000853c <send_desired>:
void send_desired(void){  //1000ms
    853c:	b480      	push	{r7}
    853e:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 10 == 3) PERIODIC_SEND_DESIRED();}
    8540:	f24a 43b1 	movw	r3, #42161	; 0xa4b1
    8544:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8548:	781a      	ldrb	r2, [r3, #0]
    854a:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    854e:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    8552:	fba3 1302 	umull	r1, r3, r3, r2
    8556:	08d9      	lsrs	r1, r3, #3
    8558:	460b      	mov	r3, r1
    855a:	009b      	lsls	r3, r3, #2
    855c:	440b      	add	r3, r1
    855e:	005b      	lsls	r3, r3, #1
    8560:	1ad3      	subs	r3, r2, r3
    8562:	b2db      	uxtb	r3, r3
    8564:	2b03      	cmp	r3, #3
    8566:	f040 8712 	bne.w	938e <send_desired+0xe52>
    856a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    856e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8572:	781a      	ldrb	r2, [r3, #0]
    8574:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    8578:	f2c2 0300 	movt	r3, #8192	; 0x2000
    857c:	781b      	ldrb	r3, [r3, #0]
    857e:	b2db      	uxtb	r3, r3
    8580:	429a      	cmp	r2, r3
    8582:	d313      	bcc.n	85ac <send_desired+0x70>
    8584:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    8588:	f2c2 0300 	movt	r3, #8192	; 0x2000
    858c:	781b      	ldrb	r3, [r3, #0]
    858e:	b2db      	uxtb	r3, r3
    8590:	461a      	mov	r2, r3
    8592:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8596:	f2c2 0300 	movt	r3, #8192	; 0x2000
    859a:	781b      	ldrb	r3, [r3, #0]
    859c:	1ad3      	subs	r3, r2, r3
    859e:	33ff      	adds	r3, #255	; 0xff
    85a0:	2b18      	cmp	r3, #24
    85a2:	bfd4      	ite	le
    85a4:	2300      	movle	r3, #0
    85a6:	2301      	movgt	r3, #1
    85a8:	b2db      	uxtb	r3, r3
    85aa:	e011      	b.n	85d0 <send_desired+0x94>
    85ac:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    85b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85b4:	781b      	ldrb	r3, [r3, #0]
    85b6:	b2db      	uxtb	r3, r3
    85b8:	461a      	mov	r2, r3
    85ba:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    85be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85c2:	781b      	ldrb	r3, [r3, #0]
    85c4:	1ad3      	subs	r3, r2, r3
    85c6:	2b18      	cmp	r3, #24
    85c8:	bfd4      	ite	le
    85ca:	2300      	movle	r3, #0
    85cc:	2301      	movgt	r3, #1
    85ce:	b2db      	uxtb	r3, r3
    85d0:	2b00      	cmp	r3, #0
    85d2:	f000 86d0 	beq.w	9376 <send_desired+0xe3a>
    85d6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    85da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85de:	781b      	ldrb	r3, [r3, #0]
    85e0:	461a      	mov	r2, r3
    85e2:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    85e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85ea:	2105      	movs	r1, #5
    85ec:	5499      	strb	r1, [r3, r2]
    85ee:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    85f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85f6:	781b      	ldrb	r3, [r3, #0]
    85f8:	3301      	adds	r3, #1
    85fa:	b2da      	uxtb	r2, r3
    85fc:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8600:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8604:	701a      	strb	r2, [r3, #0]
    8606:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    860a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    860e:	781b      	ldrb	r3, [r3, #0]
    8610:	2bff      	cmp	r3, #255	; 0xff
    8612:	d105      	bne.n	8620 <send_desired+0xe4>
    8614:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8618:	f2c2 0300 	movt	r3, #8192	; 0x2000
    861c:	2200      	movs	r2, #0
    861e:	701a      	strb	r2, [r3, #0]
    8620:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8624:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8628:	781b      	ldrb	r3, [r3, #0]
    862a:	461a      	mov	r2, r3
    862c:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    8630:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8634:	2112      	movs	r1, #18
    8636:	5499      	strb	r1, [r3, r2]
    8638:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    863c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8640:	781b      	ldrb	r3, [r3, #0]
    8642:	3301      	adds	r3, #1
    8644:	b2da      	uxtb	r2, r3
    8646:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    864a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    864e:	701a      	strb	r2, [r3, #0]
    8650:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8654:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8658:	781b      	ldrb	r3, [r3, #0]
    865a:	2bff      	cmp	r3, #255	; 0xff
    865c:	d105      	bne.n	866a <send_desired+0x12e>
    865e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8662:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8666:	2200      	movs	r2, #0
    8668:	701a      	strb	r2, [r3, #0]
    866a:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    866e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8672:	2212      	movs	r2, #18
    8674:	701a      	strb	r2, [r3, #0]
    8676:	f24a 53be 	movw	r3, #42430	; 0xa5be
    867a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    867e:	2212      	movs	r2, #18
    8680:	701a      	strb	r2, [r3, #0]
    8682:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8686:	f2c2 0300 	movt	r3, #8192	; 0x2000
    868a:	781b      	ldrb	r3, [r3, #0]
    868c:	461a      	mov	r2, r3
    868e:	f24a 73e4 	movw	r3, #42980	; 0xa7e4
    8692:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8696:	7819      	ldrb	r1, [r3, #0]
    8698:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    869c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86a0:	5499      	strb	r1, [r3, r2]
    86a2:	f24a 73e4 	movw	r3, #42980	; 0xa7e4
    86a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86aa:	781a      	ldrb	r2, [r3, #0]
    86ac:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    86b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86b4:	781b      	ldrb	r3, [r3, #0]
    86b6:	4413      	add	r3, r2
    86b8:	b2da      	uxtb	r2, r3
    86ba:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    86be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86c2:	701a      	strb	r2, [r3, #0]
    86c4:	f24a 53be 	movw	r3, #42430	; 0xa5be
    86c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86cc:	781a      	ldrb	r2, [r3, #0]
    86ce:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    86d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86d6:	781b      	ldrb	r3, [r3, #0]
    86d8:	4413      	add	r3, r2
    86da:	b2da      	uxtb	r2, r3
    86dc:	f24a 53be 	movw	r3, #42430	; 0xa5be
    86e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86e4:	701a      	strb	r2, [r3, #0]
    86e6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    86ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86ee:	781b      	ldrb	r3, [r3, #0]
    86f0:	3301      	adds	r3, #1
    86f2:	b2da      	uxtb	r2, r3
    86f4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    86f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86fc:	701a      	strb	r2, [r3, #0]
    86fe:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8702:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8706:	781b      	ldrb	r3, [r3, #0]
    8708:	2bff      	cmp	r3, #255	; 0xff
    870a:	d105      	bne.n	8718 <send_desired+0x1dc>
    870c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8710:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8714:	2200      	movs	r2, #0
    8716:	701a      	strb	r2, [r3, #0]
    8718:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    871c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8720:	781b      	ldrb	r3, [r3, #0]
    8722:	461a      	mov	r2, r3
    8724:	f24a 73e4 	movw	r3, #42980	; 0xa7e4
    8728:	f2c2 0300 	movt	r3, #8192	; 0x2000
    872c:	7859      	ldrb	r1, [r3, #1]
    872e:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    8732:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8736:	5499      	strb	r1, [r3, r2]
    8738:	4bd1      	ldr	r3, [pc, #836]	; (8a80 <send_desired+0x544>)
    873a:	781a      	ldrb	r2, [r3, #0]
    873c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8740:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8744:	781b      	ldrb	r3, [r3, #0]
    8746:	4413      	add	r3, r2
    8748:	b2da      	uxtb	r2, r3
    874a:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    874e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8752:	701a      	strb	r2, [r3, #0]
    8754:	f24a 53be 	movw	r3, #42430	; 0xa5be
    8758:	f2c2 0300 	movt	r3, #8192	; 0x2000
    875c:	781a      	ldrb	r2, [r3, #0]
    875e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8762:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8766:	781b      	ldrb	r3, [r3, #0]
    8768:	4413      	add	r3, r2
    876a:	b2da      	uxtb	r2, r3
    876c:	f24a 53be 	movw	r3, #42430	; 0xa5be
    8770:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8774:	701a      	strb	r2, [r3, #0]
    8776:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    877a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    877e:	781b      	ldrb	r3, [r3, #0]
    8780:	3301      	adds	r3, #1
    8782:	b2da      	uxtb	r2, r3
    8784:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8788:	f2c2 0300 	movt	r3, #8192	; 0x2000
    878c:	701a      	strb	r2, [r3, #0]
    878e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8792:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8796:	781b      	ldrb	r3, [r3, #0]
    8798:	2bff      	cmp	r3, #255	; 0xff
    879a:	d105      	bne.n	87a8 <send_desired+0x26c>
    879c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    87a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87a4:	2200      	movs	r2, #0
    87a6:	701a      	strb	r2, [r3, #0]
    87a8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    87ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87b0:	781b      	ldrb	r3, [r3, #0]
    87b2:	461a      	mov	r2, r3
    87b4:	f24a 73e4 	movw	r3, #42980	; 0xa7e4
    87b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87bc:	7899      	ldrb	r1, [r3, #2]
    87be:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    87c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87c6:	5499      	strb	r1, [r3, r2]
    87c8:	4bae      	ldr	r3, [pc, #696]	; (8a84 <send_desired+0x548>)
    87ca:	781a      	ldrb	r2, [r3, #0]
    87cc:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    87d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87d4:	781b      	ldrb	r3, [r3, #0]
    87d6:	4413      	add	r3, r2
    87d8:	b2da      	uxtb	r2, r3
    87da:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    87de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87e2:	701a      	strb	r2, [r3, #0]
    87e4:	f24a 53be 	movw	r3, #42430	; 0xa5be
    87e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87ec:	781a      	ldrb	r2, [r3, #0]
    87ee:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    87f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87f6:	781b      	ldrb	r3, [r3, #0]
    87f8:	4413      	add	r3, r2
    87fa:	b2da      	uxtb	r2, r3
    87fc:	f24a 53be 	movw	r3, #42430	; 0xa5be
    8800:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8804:	701a      	strb	r2, [r3, #0]
    8806:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    880a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    880e:	781b      	ldrb	r3, [r3, #0]
    8810:	3301      	adds	r3, #1
    8812:	b2da      	uxtb	r2, r3
    8814:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8818:	f2c2 0300 	movt	r3, #8192	; 0x2000
    881c:	701a      	strb	r2, [r3, #0]
    881e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8822:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8826:	781b      	ldrb	r3, [r3, #0]
    8828:	2bff      	cmp	r3, #255	; 0xff
    882a:	d105      	bne.n	8838 <send_desired+0x2fc>
    882c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8830:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8834:	2200      	movs	r2, #0
    8836:	701a      	strb	r2, [r3, #0]
    8838:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    883c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8840:	781b      	ldrb	r3, [r3, #0]
    8842:	461a      	mov	r2, r3
    8844:	f24a 73e4 	movw	r3, #42980	; 0xa7e4
    8848:	f2c2 0300 	movt	r3, #8192	; 0x2000
    884c:	78d9      	ldrb	r1, [r3, #3]
    884e:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    8852:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8856:	5499      	strb	r1, [r3, r2]
    8858:	4b8b      	ldr	r3, [pc, #556]	; (8a88 <send_desired+0x54c>)
    885a:	781a      	ldrb	r2, [r3, #0]
    885c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8860:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8864:	781b      	ldrb	r3, [r3, #0]
    8866:	4413      	add	r3, r2
    8868:	b2da      	uxtb	r2, r3
    886a:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    886e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8872:	701a      	strb	r2, [r3, #0]
    8874:	f24a 53be 	movw	r3, #42430	; 0xa5be
    8878:	f2c2 0300 	movt	r3, #8192	; 0x2000
    887c:	781a      	ldrb	r2, [r3, #0]
    887e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8882:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8886:	781b      	ldrb	r3, [r3, #0]
    8888:	4413      	add	r3, r2
    888a:	b2da      	uxtb	r2, r3
    888c:	f24a 53be 	movw	r3, #42430	; 0xa5be
    8890:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8894:	701a      	strb	r2, [r3, #0]
    8896:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    889a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    889e:	781b      	ldrb	r3, [r3, #0]
    88a0:	3301      	adds	r3, #1
    88a2:	b2da      	uxtb	r2, r3
    88a4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    88a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88ac:	701a      	strb	r2, [r3, #0]
    88ae:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    88b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88b6:	781b      	ldrb	r3, [r3, #0]
    88b8:	2bff      	cmp	r3, #255	; 0xff
    88ba:	d105      	bne.n	88c8 <send_desired+0x38c>
    88bc:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    88c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88c4:	2200      	movs	r2, #0
    88c6:	701a      	strb	r2, [r3, #0]
    88c8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    88cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88d0:	781b      	ldrb	r3, [r3, #0]
    88d2:	461a      	mov	r2, r3
    88d4:	f24a 73e8 	movw	r3, #42984	; 0xa7e8
    88d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88dc:	7819      	ldrb	r1, [r3, #0]
    88de:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    88e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88e6:	5499      	strb	r1, [r3, r2]
    88e8:	f24a 73e8 	movw	r3, #42984	; 0xa7e8
    88ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88f0:	781a      	ldrb	r2, [r3, #0]
    88f2:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    88f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88fa:	781b      	ldrb	r3, [r3, #0]
    88fc:	4413      	add	r3, r2
    88fe:	b2da      	uxtb	r2, r3
    8900:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8904:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8908:	701a      	strb	r2, [r3, #0]
    890a:	f24a 53be 	movw	r3, #42430	; 0xa5be
    890e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8912:	781a      	ldrb	r2, [r3, #0]
    8914:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8918:	f2c2 0300 	movt	r3, #8192	; 0x2000
    891c:	781b      	ldrb	r3, [r3, #0]
    891e:	4413      	add	r3, r2
    8920:	b2da      	uxtb	r2, r3
    8922:	f24a 53be 	movw	r3, #42430	; 0xa5be
    8926:	f2c2 0300 	movt	r3, #8192	; 0x2000
    892a:	701a      	strb	r2, [r3, #0]
    892c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8930:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8934:	781b      	ldrb	r3, [r3, #0]
    8936:	3301      	adds	r3, #1
    8938:	b2da      	uxtb	r2, r3
    893a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    893e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8942:	701a      	strb	r2, [r3, #0]
    8944:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8948:	f2c2 0300 	movt	r3, #8192	; 0x2000
    894c:	781b      	ldrb	r3, [r3, #0]
    894e:	2bff      	cmp	r3, #255	; 0xff
    8950:	d105      	bne.n	895e <send_desired+0x422>
    8952:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8956:	f2c2 0300 	movt	r3, #8192	; 0x2000
    895a:	2200      	movs	r2, #0
    895c:	701a      	strb	r2, [r3, #0]
    895e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8962:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8966:	781b      	ldrb	r3, [r3, #0]
    8968:	461a      	mov	r2, r3
    896a:	f24a 73e8 	movw	r3, #42984	; 0xa7e8
    896e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8972:	7859      	ldrb	r1, [r3, #1]
    8974:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    8978:	f2c2 0300 	movt	r3, #8192	; 0x2000
    897c:	5499      	strb	r1, [r3, r2]
    897e:	4b43      	ldr	r3, [pc, #268]	; (8a8c <send_desired+0x550>)
    8980:	781a      	ldrb	r2, [r3, #0]
    8982:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8986:	f2c2 0300 	movt	r3, #8192	; 0x2000
    898a:	781b      	ldrb	r3, [r3, #0]
    898c:	4413      	add	r3, r2
    898e:	b2da      	uxtb	r2, r3
    8990:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8994:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8998:	701a      	strb	r2, [r3, #0]
    899a:	f24a 53be 	movw	r3, #42430	; 0xa5be
    899e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89a2:	781a      	ldrb	r2, [r3, #0]
    89a4:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    89a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89ac:	781b      	ldrb	r3, [r3, #0]
    89ae:	4413      	add	r3, r2
    89b0:	b2da      	uxtb	r2, r3
    89b2:	f24a 53be 	movw	r3, #42430	; 0xa5be
    89b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89ba:	701a      	strb	r2, [r3, #0]
    89bc:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    89c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89c4:	781b      	ldrb	r3, [r3, #0]
    89c6:	3301      	adds	r3, #1
    89c8:	b2da      	uxtb	r2, r3
    89ca:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    89ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89d2:	701a      	strb	r2, [r3, #0]
    89d4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    89d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89dc:	781b      	ldrb	r3, [r3, #0]
    89de:	2bff      	cmp	r3, #255	; 0xff
    89e0:	d105      	bne.n	89ee <send_desired+0x4b2>
    89e2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    89e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89ea:	2200      	movs	r2, #0
    89ec:	701a      	strb	r2, [r3, #0]
    89ee:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    89f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89f6:	781b      	ldrb	r3, [r3, #0]
    89f8:	461a      	mov	r2, r3
    89fa:	f24a 73e8 	movw	r3, #42984	; 0xa7e8
    89fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a02:	7899      	ldrb	r1, [r3, #2]
    8a04:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    8a08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a0c:	5499      	strb	r1, [r3, r2]
    8a0e:	4b20      	ldr	r3, [pc, #128]	; (8a90 <send_desired+0x554>)
    8a10:	781a      	ldrb	r2, [r3, #0]
    8a12:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8a16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a1a:	781b      	ldrb	r3, [r3, #0]
    8a1c:	4413      	add	r3, r2
    8a1e:	b2da      	uxtb	r2, r3
    8a20:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8a24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a28:	701a      	strb	r2, [r3, #0]
    8a2a:	f24a 53be 	movw	r3, #42430	; 0xa5be
    8a2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a32:	781a      	ldrb	r2, [r3, #0]
    8a34:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8a38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a3c:	781b      	ldrb	r3, [r3, #0]
    8a3e:	4413      	add	r3, r2
    8a40:	b2da      	uxtb	r2, r3
    8a42:	f24a 53be 	movw	r3, #42430	; 0xa5be
    8a46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a4a:	701a      	strb	r2, [r3, #0]
    8a4c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8a50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a54:	781b      	ldrb	r3, [r3, #0]
    8a56:	3301      	adds	r3, #1
    8a58:	b2da      	uxtb	r2, r3
    8a5a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8a5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a62:	701a      	strb	r2, [r3, #0]
    8a64:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8a68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a6c:	781b      	ldrb	r3, [r3, #0]
    8a6e:	2bff      	cmp	r3, #255	; 0xff
    8a70:	d110      	bne.n	8a94 <send_desired+0x558>
    8a72:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8a76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a7a:	2200      	movs	r2, #0
    8a7c:	701a      	strb	r2, [r3, #0]
    8a7e:	e009      	b.n	8a94 <send_desired+0x558>
    8a80:	2000a7e5 	.word	0x2000a7e5
    8a84:	2000a7e6 	.word	0x2000a7e6
    8a88:	2000a7e7 	.word	0x2000a7e7
    8a8c:	2000a7e9 	.word	0x2000a7e9
    8a90:	2000a7ea 	.word	0x2000a7ea
    8a94:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8a98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a9c:	781b      	ldrb	r3, [r3, #0]
    8a9e:	461a      	mov	r2, r3
    8aa0:	f24a 73e8 	movw	r3, #42984	; 0xa7e8
    8aa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8aa8:	78d9      	ldrb	r1, [r3, #3]
    8aaa:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    8aae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ab2:	5499      	strb	r1, [r3, r2]
    8ab4:	4bd3      	ldr	r3, [pc, #844]	; (8e04 <send_desired+0x8c8>)
    8ab6:	781a      	ldrb	r2, [r3, #0]
    8ab8:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8abc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ac0:	781b      	ldrb	r3, [r3, #0]
    8ac2:	4413      	add	r3, r2
    8ac4:	b2da      	uxtb	r2, r3
    8ac6:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8aca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ace:	701a      	strb	r2, [r3, #0]
    8ad0:	f24a 53be 	movw	r3, #42430	; 0xa5be
    8ad4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ad8:	781a      	ldrb	r2, [r3, #0]
    8ada:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8ade:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ae2:	781b      	ldrb	r3, [r3, #0]
    8ae4:	4413      	add	r3, r2
    8ae6:	b2da      	uxtb	r2, r3
    8ae8:	f24a 53be 	movw	r3, #42430	; 0xa5be
    8aec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8af0:	701a      	strb	r2, [r3, #0]
    8af2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8af6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8afa:	781b      	ldrb	r3, [r3, #0]
    8afc:	3301      	adds	r3, #1
    8afe:	b2da      	uxtb	r2, r3
    8b00:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8b04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b08:	701a      	strb	r2, [r3, #0]
    8b0a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8b0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b12:	781b      	ldrb	r3, [r3, #0]
    8b14:	2bff      	cmp	r3, #255	; 0xff
    8b16:	d105      	bne.n	8b24 <send_desired+0x5e8>
    8b18:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8b1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b20:	2200      	movs	r2, #0
    8b22:	701a      	strb	r2, [r3, #0]
    8b24:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8b28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b2c:	781b      	ldrb	r3, [r3, #0]
    8b2e:	461a      	mov	r2, r3
    8b30:	f64a 0330 	movw	r3, #43056	; 0xa830
    8b34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b38:	7819      	ldrb	r1, [r3, #0]
    8b3a:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    8b3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b42:	5499      	strb	r1, [r3, r2]
    8b44:	f64a 0330 	movw	r3, #43056	; 0xa830
    8b48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b4c:	781a      	ldrb	r2, [r3, #0]
    8b4e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8b52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b56:	781b      	ldrb	r3, [r3, #0]
    8b58:	4413      	add	r3, r2
    8b5a:	b2da      	uxtb	r2, r3
    8b5c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8b60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b64:	701a      	strb	r2, [r3, #0]
    8b66:	f24a 53be 	movw	r3, #42430	; 0xa5be
    8b6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b6e:	781a      	ldrb	r2, [r3, #0]
    8b70:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8b74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b78:	781b      	ldrb	r3, [r3, #0]
    8b7a:	4413      	add	r3, r2
    8b7c:	b2da      	uxtb	r2, r3
    8b7e:	f24a 53be 	movw	r3, #42430	; 0xa5be
    8b82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b86:	701a      	strb	r2, [r3, #0]
    8b88:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8b8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b90:	781b      	ldrb	r3, [r3, #0]
    8b92:	3301      	adds	r3, #1
    8b94:	b2da      	uxtb	r2, r3
    8b96:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8b9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b9e:	701a      	strb	r2, [r3, #0]
    8ba0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8ba4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ba8:	781b      	ldrb	r3, [r3, #0]
    8baa:	2bff      	cmp	r3, #255	; 0xff
    8bac:	d105      	bne.n	8bba <send_desired+0x67e>
    8bae:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8bb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8bb6:	2200      	movs	r2, #0
    8bb8:	701a      	strb	r2, [r3, #0]
    8bba:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8bbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8bc2:	781b      	ldrb	r3, [r3, #0]
    8bc4:	461a      	mov	r2, r3
    8bc6:	f64a 0330 	movw	r3, #43056	; 0xa830
    8bca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8bce:	7859      	ldrb	r1, [r3, #1]
    8bd0:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    8bd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8bd8:	5499      	strb	r1, [r3, r2]
    8bda:	4b8b      	ldr	r3, [pc, #556]	; (8e08 <send_desired+0x8cc>)
    8bdc:	781a      	ldrb	r2, [r3, #0]
    8bde:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8be2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8be6:	781b      	ldrb	r3, [r3, #0]
    8be8:	4413      	add	r3, r2
    8bea:	b2da      	uxtb	r2, r3
    8bec:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8bf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8bf4:	701a      	strb	r2, [r3, #0]
    8bf6:	f24a 53be 	movw	r3, #42430	; 0xa5be
    8bfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8bfe:	781a      	ldrb	r2, [r3, #0]
    8c00:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8c04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c08:	781b      	ldrb	r3, [r3, #0]
    8c0a:	4413      	add	r3, r2
    8c0c:	b2da      	uxtb	r2, r3
    8c0e:	f24a 53be 	movw	r3, #42430	; 0xa5be
    8c12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c16:	701a      	strb	r2, [r3, #0]
    8c18:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8c1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c20:	781b      	ldrb	r3, [r3, #0]
    8c22:	3301      	adds	r3, #1
    8c24:	b2da      	uxtb	r2, r3
    8c26:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8c2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c2e:	701a      	strb	r2, [r3, #0]
    8c30:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8c34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c38:	781b      	ldrb	r3, [r3, #0]
    8c3a:	2bff      	cmp	r3, #255	; 0xff
    8c3c:	d105      	bne.n	8c4a <send_desired+0x70e>
    8c3e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8c42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c46:	2200      	movs	r2, #0
    8c48:	701a      	strb	r2, [r3, #0]
    8c4a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8c4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c52:	781b      	ldrb	r3, [r3, #0]
    8c54:	461a      	mov	r2, r3
    8c56:	f64a 0330 	movw	r3, #43056	; 0xa830
    8c5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c5e:	7899      	ldrb	r1, [r3, #2]
    8c60:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    8c64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c68:	5499      	strb	r1, [r3, r2]
    8c6a:	4b68      	ldr	r3, [pc, #416]	; (8e0c <send_desired+0x8d0>)
    8c6c:	781a      	ldrb	r2, [r3, #0]
    8c6e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8c72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c76:	781b      	ldrb	r3, [r3, #0]
    8c78:	4413      	add	r3, r2
    8c7a:	b2da      	uxtb	r2, r3
    8c7c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8c80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c84:	701a      	strb	r2, [r3, #0]
    8c86:	f24a 53be 	movw	r3, #42430	; 0xa5be
    8c8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c8e:	781a      	ldrb	r2, [r3, #0]
    8c90:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8c94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c98:	781b      	ldrb	r3, [r3, #0]
    8c9a:	4413      	add	r3, r2
    8c9c:	b2da      	uxtb	r2, r3
    8c9e:	f24a 53be 	movw	r3, #42430	; 0xa5be
    8ca2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ca6:	701a      	strb	r2, [r3, #0]
    8ca8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8cac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8cb0:	781b      	ldrb	r3, [r3, #0]
    8cb2:	3301      	adds	r3, #1
    8cb4:	b2da      	uxtb	r2, r3
    8cb6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8cba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8cbe:	701a      	strb	r2, [r3, #0]
    8cc0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8cc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8cc8:	781b      	ldrb	r3, [r3, #0]
    8cca:	2bff      	cmp	r3, #255	; 0xff
    8ccc:	d105      	bne.n	8cda <send_desired+0x79e>
    8cce:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8cd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8cd6:	2200      	movs	r2, #0
    8cd8:	701a      	strb	r2, [r3, #0]
    8cda:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8cde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ce2:	781b      	ldrb	r3, [r3, #0]
    8ce4:	461a      	mov	r2, r3
    8ce6:	f64a 0330 	movw	r3, #43056	; 0xa830
    8cea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8cee:	78d9      	ldrb	r1, [r3, #3]
    8cf0:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    8cf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8cf8:	5499      	strb	r1, [r3, r2]
    8cfa:	4b45      	ldr	r3, [pc, #276]	; (8e10 <send_desired+0x8d4>)
    8cfc:	781a      	ldrb	r2, [r3, #0]
    8cfe:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8d02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d06:	781b      	ldrb	r3, [r3, #0]
    8d08:	4413      	add	r3, r2
    8d0a:	b2da      	uxtb	r2, r3
    8d0c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8d10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d14:	701a      	strb	r2, [r3, #0]
    8d16:	f24a 53be 	movw	r3, #42430	; 0xa5be
    8d1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d1e:	781a      	ldrb	r2, [r3, #0]
    8d20:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8d24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d28:	781b      	ldrb	r3, [r3, #0]
    8d2a:	4413      	add	r3, r2
    8d2c:	b2da      	uxtb	r2, r3
    8d2e:	f24a 53be 	movw	r3, #42430	; 0xa5be
    8d32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d36:	701a      	strb	r2, [r3, #0]
    8d38:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8d3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d40:	781b      	ldrb	r3, [r3, #0]
    8d42:	3301      	adds	r3, #1
    8d44:	b2da      	uxtb	r2, r3
    8d46:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8d4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d4e:	701a      	strb	r2, [r3, #0]
    8d50:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8d54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d58:	781b      	ldrb	r3, [r3, #0]
    8d5a:	2bff      	cmp	r3, #255	; 0xff
    8d5c:	d105      	bne.n	8d6a <send_desired+0x82e>
    8d5e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8d62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d66:	2200      	movs	r2, #0
    8d68:	701a      	strb	r2, [r3, #0]
    8d6a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8d6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d72:	781b      	ldrb	r3, [r3, #0]
    8d74:	461a      	mov	r2, r3
    8d76:	f64a 0334 	movw	r3, #43060	; 0xa834
    8d7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d7e:	7819      	ldrb	r1, [r3, #0]
    8d80:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    8d84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d88:	5499      	strb	r1, [r3, r2]
    8d8a:	f64a 0334 	movw	r3, #43060	; 0xa834
    8d8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d92:	781a      	ldrb	r2, [r3, #0]
    8d94:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8d98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d9c:	781b      	ldrb	r3, [r3, #0]
    8d9e:	4413      	add	r3, r2
    8da0:	b2da      	uxtb	r2, r3
    8da2:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8da6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8daa:	701a      	strb	r2, [r3, #0]
    8dac:	f24a 53be 	movw	r3, #42430	; 0xa5be
    8db0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8db4:	781a      	ldrb	r2, [r3, #0]
    8db6:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8dba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8dbe:	781b      	ldrb	r3, [r3, #0]
    8dc0:	4413      	add	r3, r2
    8dc2:	b2da      	uxtb	r2, r3
    8dc4:	f24a 53be 	movw	r3, #42430	; 0xa5be
    8dc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8dcc:	701a      	strb	r2, [r3, #0]
    8dce:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8dd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8dd6:	781b      	ldrb	r3, [r3, #0]
    8dd8:	3301      	adds	r3, #1
    8dda:	b2da      	uxtb	r2, r3
    8ddc:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8de0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8de4:	701a      	strb	r2, [r3, #0]
    8de6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8dea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8dee:	781b      	ldrb	r3, [r3, #0]
    8df0:	2bff      	cmp	r3, #255	; 0xff
    8df2:	d10f      	bne.n	8e14 <send_desired+0x8d8>
    8df4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8df8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8dfc:	2200      	movs	r2, #0
    8dfe:	701a      	strb	r2, [r3, #0]
    8e00:	e008      	b.n	8e14 <send_desired+0x8d8>
    8e02:	bf00      	nop
    8e04:	2000a7eb 	.word	0x2000a7eb
    8e08:	2000a831 	.word	0x2000a831
    8e0c:	2000a832 	.word	0x2000a832
    8e10:	2000a833 	.word	0x2000a833
    8e14:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8e18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e1c:	781b      	ldrb	r3, [r3, #0]
    8e1e:	461a      	mov	r2, r3
    8e20:	f64a 0334 	movw	r3, #43060	; 0xa834
    8e24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e28:	7859      	ldrb	r1, [r3, #1]
    8e2a:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    8e2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e32:	5499      	strb	r1, [r3, r2]
    8e34:	4bd1      	ldr	r3, [pc, #836]	; (917c <send_desired+0xc40>)
    8e36:	781a      	ldrb	r2, [r3, #0]
    8e38:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8e3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e40:	781b      	ldrb	r3, [r3, #0]
    8e42:	4413      	add	r3, r2
    8e44:	b2da      	uxtb	r2, r3
    8e46:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8e4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e4e:	701a      	strb	r2, [r3, #0]
    8e50:	f24a 53be 	movw	r3, #42430	; 0xa5be
    8e54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e58:	781a      	ldrb	r2, [r3, #0]
    8e5a:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8e5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e62:	781b      	ldrb	r3, [r3, #0]
    8e64:	4413      	add	r3, r2
    8e66:	b2da      	uxtb	r2, r3
    8e68:	f24a 53be 	movw	r3, #42430	; 0xa5be
    8e6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e70:	701a      	strb	r2, [r3, #0]
    8e72:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8e76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e7a:	781b      	ldrb	r3, [r3, #0]
    8e7c:	3301      	adds	r3, #1
    8e7e:	b2da      	uxtb	r2, r3
    8e80:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8e84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e88:	701a      	strb	r2, [r3, #0]
    8e8a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8e8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e92:	781b      	ldrb	r3, [r3, #0]
    8e94:	2bff      	cmp	r3, #255	; 0xff
    8e96:	d105      	bne.n	8ea4 <send_desired+0x968>
    8e98:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8e9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ea0:	2200      	movs	r2, #0
    8ea2:	701a      	strb	r2, [r3, #0]
    8ea4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8ea8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8eac:	781b      	ldrb	r3, [r3, #0]
    8eae:	461a      	mov	r2, r3
    8eb0:	f64a 0334 	movw	r3, #43060	; 0xa834
    8eb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8eb8:	7899      	ldrb	r1, [r3, #2]
    8eba:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    8ebe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ec2:	5499      	strb	r1, [r3, r2]
    8ec4:	4bae      	ldr	r3, [pc, #696]	; (9180 <send_desired+0xc44>)
    8ec6:	781a      	ldrb	r2, [r3, #0]
    8ec8:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8ecc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ed0:	781b      	ldrb	r3, [r3, #0]
    8ed2:	4413      	add	r3, r2
    8ed4:	b2da      	uxtb	r2, r3
    8ed6:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8eda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ede:	701a      	strb	r2, [r3, #0]
    8ee0:	f24a 53be 	movw	r3, #42430	; 0xa5be
    8ee4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ee8:	781a      	ldrb	r2, [r3, #0]
    8eea:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8eee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ef2:	781b      	ldrb	r3, [r3, #0]
    8ef4:	4413      	add	r3, r2
    8ef6:	b2da      	uxtb	r2, r3
    8ef8:	f24a 53be 	movw	r3, #42430	; 0xa5be
    8efc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f00:	701a      	strb	r2, [r3, #0]
    8f02:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8f06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f0a:	781b      	ldrb	r3, [r3, #0]
    8f0c:	3301      	adds	r3, #1
    8f0e:	b2da      	uxtb	r2, r3
    8f10:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8f14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f18:	701a      	strb	r2, [r3, #0]
    8f1a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8f1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f22:	781b      	ldrb	r3, [r3, #0]
    8f24:	2bff      	cmp	r3, #255	; 0xff
    8f26:	d105      	bne.n	8f34 <send_desired+0x9f8>
    8f28:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8f2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f30:	2200      	movs	r2, #0
    8f32:	701a      	strb	r2, [r3, #0]
    8f34:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8f38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f3c:	781b      	ldrb	r3, [r3, #0]
    8f3e:	461a      	mov	r2, r3
    8f40:	f64a 0334 	movw	r3, #43060	; 0xa834
    8f44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f48:	78d9      	ldrb	r1, [r3, #3]
    8f4a:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    8f4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f52:	5499      	strb	r1, [r3, r2]
    8f54:	4b8b      	ldr	r3, [pc, #556]	; (9184 <send_desired+0xc48>)
    8f56:	781a      	ldrb	r2, [r3, #0]
    8f58:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8f5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f60:	781b      	ldrb	r3, [r3, #0]
    8f62:	4413      	add	r3, r2
    8f64:	b2da      	uxtb	r2, r3
    8f66:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8f6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f6e:	701a      	strb	r2, [r3, #0]
    8f70:	f24a 53be 	movw	r3, #42430	; 0xa5be
    8f74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f78:	781a      	ldrb	r2, [r3, #0]
    8f7a:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8f7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f82:	781b      	ldrb	r3, [r3, #0]
    8f84:	4413      	add	r3, r2
    8f86:	b2da      	uxtb	r2, r3
    8f88:	f24a 53be 	movw	r3, #42430	; 0xa5be
    8f8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f90:	701a      	strb	r2, [r3, #0]
    8f92:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8f96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f9a:	781b      	ldrb	r3, [r3, #0]
    8f9c:	3301      	adds	r3, #1
    8f9e:	b2da      	uxtb	r2, r3
    8fa0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8fa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fa8:	701a      	strb	r2, [r3, #0]
    8faa:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8fae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fb2:	781b      	ldrb	r3, [r3, #0]
    8fb4:	2bff      	cmp	r3, #255	; 0xff
    8fb6:	d105      	bne.n	8fc4 <send_desired+0xa88>
    8fb8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8fbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fc0:	2200      	movs	r2, #0
    8fc2:	701a      	strb	r2, [r3, #0]
    8fc4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8fc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fcc:	781b      	ldrb	r3, [r3, #0]
    8fce:	461a      	mov	r2, r3
    8fd0:	f240 133c 	movw	r3, #316	; 0x13c
    8fd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fd8:	7819      	ldrb	r1, [r3, #0]
    8fda:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    8fde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fe2:	5499      	strb	r1, [r3, r2]
    8fe4:	f240 133c 	movw	r3, #316	; 0x13c
    8fe8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fec:	781a      	ldrb	r2, [r3, #0]
    8fee:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8ff2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ff6:	781b      	ldrb	r3, [r3, #0]
    8ff8:	4413      	add	r3, r2
    8ffa:	b2da      	uxtb	r2, r3
    8ffc:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9000:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9004:	701a      	strb	r2, [r3, #0]
    9006:	f24a 53be 	movw	r3, #42430	; 0xa5be
    900a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    900e:	781a      	ldrb	r2, [r3, #0]
    9010:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9014:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9018:	781b      	ldrb	r3, [r3, #0]
    901a:	4413      	add	r3, r2
    901c:	b2da      	uxtb	r2, r3
    901e:	f24a 53be 	movw	r3, #42430	; 0xa5be
    9022:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9026:	701a      	strb	r2, [r3, #0]
    9028:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    902c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9030:	781b      	ldrb	r3, [r3, #0]
    9032:	3301      	adds	r3, #1
    9034:	b2da      	uxtb	r2, r3
    9036:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    903a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    903e:	701a      	strb	r2, [r3, #0]
    9040:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9044:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9048:	781b      	ldrb	r3, [r3, #0]
    904a:	2bff      	cmp	r3, #255	; 0xff
    904c:	d105      	bne.n	905a <send_desired+0xb1e>
    904e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9052:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9056:	2200      	movs	r2, #0
    9058:	701a      	strb	r2, [r3, #0]
    905a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    905e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9062:	781b      	ldrb	r3, [r3, #0]
    9064:	461a      	mov	r2, r3
    9066:	f240 133c 	movw	r3, #316	; 0x13c
    906a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    906e:	7859      	ldrb	r1, [r3, #1]
    9070:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    9074:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9078:	5499      	strb	r1, [r3, r2]
    907a:	4b43      	ldr	r3, [pc, #268]	; (9188 <send_desired+0xc4c>)
    907c:	781a      	ldrb	r2, [r3, #0]
    907e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9082:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9086:	781b      	ldrb	r3, [r3, #0]
    9088:	4413      	add	r3, r2
    908a:	b2da      	uxtb	r2, r3
    908c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9090:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9094:	701a      	strb	r2, [r3, #0]
    9096:	f24a 53be 	movw	r3, #42430	; 0xa5be
    909a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    909e:	781a      	ldrb	r2, [r3, #0]
    90a0:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    90a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90a8:	781b      	ldrb	r3, [r3, #0]
    90aa:	4413      	add	r3, r2
    90ac:	b2da      	uxtb	r2, r3
    90ae:	f24a 53be 	movw	r3, #42430	; 0xa5be
    90b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90b6:	701a      	strb	r2, [r3, #0]
    90b8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    90bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90c0:	781b      	ldrb	r3, [r3, #0]
    90c2:	3301      	adds	r3, #1
    90c4:	b2da      	uxtb	r2, r3
    90c6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    90ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90ce:	701a      	strb	r2, [r3, #0]
    90d0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    90d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90d8:	781b      	ldrb	r3, [r3, #0]
    90da:	2bff      	cmp	r3, #255	; 0xff
    90dc:	d105      	bne.n	90ea <send_desired+0xbae>
    90de:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    90e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90e6:	2200      	movs	r2, #0
    90e8:	701a      	strb	r2, [r3, #0]
    90ea:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    90ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90f2:	781b      	ldrb	r3, [r3, #0]
    90f4:	461a      	mov	r2, r3
    90f6:	f240 133c 	movw	r3, #316	; 0x13c
    90fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90fe:	7899      	ldrb	r1, [r3, #2]
    9100:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    9104:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9108:	5499      	strb	r1, [r3, r2]
    910a:	4b20      	ldr	r3, [pc, #128]	; (918c <send_desired+0xc50>)
    910c:	781a      	ldrb	r2, [r3, #0]
    910e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9112:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9116:	781b      	ldrb	r3, [r3, #0]
    9118:	4413      	add	r3, r2
    911a:	b2da      	uxtb	r2, r3
    911c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9120:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9124:	701a      	strb	r2, [r3, #0]
    9126:	f24a 53be 	movw	r3, #42430	; 0xa5be
    912a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    912e:	781a      	ldrb	r2, [r3, #0]
    9130:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9134:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9138:	781b      	ldrb	r3, [r3, #0]
    913a:	4413      	add	r3, r2
    913c:	b2da      	uxtb	r2, r3
    913e:	f24a 53be 	movw	r3, #42430	; 0xa5be
    9142:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9146:	701a      	strb	r2, [r3, #0]
    9148:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    914c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9150:	781b      	ldrb	r3, [r3, #0]
    9152:	3301      	adds	r3, #1
    9154:	b2da      	uxtb	r2, r3
    9156:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    915a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    915e:	701a      	strb	r2, [r3, #0]
    9160:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9164:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9168:	781b      	ldrb	r3, [r3, #0]
    916a:	2bff      	cmp	r3, #255	; 0xff
    916c:	d110      	bne.n	9190 <send_desired+0xc54>
    916e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9172:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9176:	2200      	movs	r2, #0
    9178:	701a      	strb	r2, [r3, #0]
    917a:	e009      	b.n	9190 <send_desired+0xc54>
    917c:	2000a835 	.word	0x2000a835
    9180:	2000a836 	.word	0x2000a836
    9184:	2000a837 	.word	0x2000a837
    9188:	2000013d 	.word	0x2000013d
    918c:	2000013e 	.word	0x2000013e
    9190:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9194:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9198:	781b      	ldrb	r3, [r3, #0]
    919a:	461a      	mov	r2, r3
    919c:	f240 133c 	movw	r3, #316	; 0x13c
    91a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91a4:	78d9      	ldrb	r1, [r3, #3]
    91a6:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    91aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91ae:	5499      	strb	r1, [r3, r2]
    91b0:	4b79      	ldr	r3, [pc, #484]	; (9398 <send_desired+0xe5c>)
    91b2:	781a      	ldrb	r2, [r3, #0]
    91b4:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    91b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91bc:	781b      	ldrb	r3, [r3, #0]
    91be:	4413      	add	r3, r2
    91c0:	b2da      	uxtb	r2, r3
    91c2:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    91c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91ca:	701a      	strb	r2, [r3, #0]
    91cc:	f24a 53be 	movw	r3, #42430	; 0xa5be
    91d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91d4:	781a      	ldrb	r2, [r3, #0]
    91d6:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    91da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91de:	781b      	ldrb	r3, [r3, #0]
    91e0:	4413      	add	r3, r2
    91e2:	b2da      	uxtb	r2, r3
    91e4:	f24a 53be 	movw	r3, #42430	; 0xa5be
    91e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91ec:	701a      	strb	r2, [r3, #0]
    91ee:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    91f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91f6:	781b      	ldrb	r3, [r3, #0]
    91f8:	3301      	adds	r3, #1
    91fa:	b2da      	uxtb	r2, r3
    91fc:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9200:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9204:	701a      	strb	r2, [r3, #0]
    9206:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    920a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    920e:	781b      	ldrb	r3, [r3, #0]
    9210:	2bff      	cmp	r3, #255	; 0xff
    9212:	d105      	bne.n	9220 <send_desired+0xce4>
    9214:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9218:	f2c2 0300 	movt	r3, #8192	; 0x2000
    921c:	2200      	movs	r2, #0
    921e:	701a      	strb	r2, [r3, #0]
    9220:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9224:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9228:	781b      	ldrb	r3, [r3, #0]
    922a:	461a      	mov	r2, r3
    922c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9230:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9234:	7819      	ldrb	r1, [r3, #0]
    9236:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    923a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    923e:	5499      	strb	r1, [r3, r2]
    9240:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9244:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9248:	781b      	ldrb	r3, [r3, #0]
    924a:	3301      	adds	r3, #1
    924c:	b2da      	uxtb	r2, r3
    924e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9252:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9256:	701a      	strb	r2, [r3, #0]
    9258:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    925c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9260:	781b      	ldrb	r3, [r3, #0]
    9262:	2bff      	cmp	r3, #255	; 0xff
    9264:	d105      	bne.n	9272 <send_desired+0xd36>
    9266:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    926a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    926e:	2200      	movs	r2, #0
    9270:	701a      	strb	r2, [r3, #0]
    9272:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9276:	f2c2 0300 	movt	r3, #8192	; 0x2000
    927a:	781b      	ldrb	r3, [r3, #0]
    927c:	461a      	mov	r2, r3
    927e:	f24a 53be 	movw	r3, #42430	; 0xa5be
    9282:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9286:	7819      	ldrb	r1, [r3, #0]
    9288:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    928c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9290:	5499      	strb	r1, [r3, r2]
    9292:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9296:	f2c2 0300 	movt	r3, #8192	; 0x2000
    929a:	781b      	ldrb	r3, [r3, #0]
    929c:	3301      	adds	r3, #1
    929e:	b2da      	uxtb	r2, r3
    92a0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    92a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92a8:	701a      	strb	r2, [r3, #0]
    92aa:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    92ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92b2:	781b      	ldrb	r3, [r3, #0]
    92b4:	2bff      	cmp	r3, #255	; 0xff
    92b6:	d105      	bne.n	92c4 <send_desired+0xd88>
    92b8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    92bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92c0:	2200      	movs	r2, #0
    92c2:	701a      	strb	r2, [r3, #0]
    92c4:	f242 0339 	movw	r3, #8249	; 0x2039
    92c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92cc:	781b      	ldrb	r3, [r3, #0]
    92ce:	b2db      	uxtb	r3, r3
    92d0:	f003 0310 	and.w	r3, r3, #16
    92d4:	2b00      	cmp	r3, #0
    92d6:	d15a      	bne.n	938e <send_desired+0xe52>
    92d8:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    92dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92e0:	781b      	ldrb	r3, [r3, #0]
    92e2:	b2db      	uxtb	r3, r3
    92e4:	461a      	mov	r2, r3
    92e6:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    92ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92ee:	5c9a      	ldrb	r2, [r3, r2]
    92f0:	f24a 53bb 	movw	r3, #42427	; 0xa5bb
    92f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92f8:	701a      	strb	r2, [r3, #0]
    92fa:	f24a 53bc 	movw	r3, #42428	; 0xa5bc
    92fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9302:	2200      	movs	r2, #0
    9304:	701a      	strb	r2, [r3, #0]
    9306:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    930a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    930e:	781b      	ldrb	r3, [r3, #0]
    9310:	b2db      	uxtb	r3, r3
    9312:	3301      	adds	r3, #1
    9314:	b2da      	uxtb	r2, r3
    9316:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    931a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    931e:	701a      	strb	r2, [r3, #0]
    9320:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    9324:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9328:	781b      	ldrb	r3, [r3, #0]
    932a:	b2db      	uxtb	r3, r3
    932c:	2bff      	cmp	r3, #255	; 0xff
    932e:	d105      	bne.n	933c <send_desired+0xe00>
    9330:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    9334:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9338:	2200      	movs	r2, #0
    933a:	701a      	strb	r2, [r3, #0]
    933c:	f242 0338 	movw	r3, #8248	; 0x2038
    9340:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9344:	f242 0238 	movw	r2, #8248	; 0x2038
    9348:	f2c2 0200 	movt	r2, #8192	; 0x2000
    934c:	7812      	ldrb	r2, [r2, #0]
    934e:	b2d2      	uxtb	r2, r2
    9350:	f042 0201 	orr.w	r2, r2, #1
    9354:	b2d2      	uxtb	r2, r2
    9356:	701a      	strb	r2, [r3, #0]
    9358:	f242 0339 	movw	r3, #8249	; 0x2039
    935c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9360:	f242 0239 	movw	r2, #8249	; 0x2039
    9364:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9368:	7812      	ldrb	r2, [r2, #0]
    936a:	b2d2      	uxtb	r2, r2
    936c:	f042 0210 	orr.w	r2, r2, #16
    9370:	b2d2      	uxtb	r2, r2
    9372:	701a      	strb	r2, [r3, #0]
    9374:	e00b      	b.n	938e <send_desired+0xe52>
    9376:	f24a 43b8 	movw	r3, #42168	; 0xa4b8
    937a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    937e:	781b      	ldrb	r3, [r3, #0]
    9380:	3301      	adds	r3, #1
    9382:	b2da      	uxtb	r2, r3
    9384:	f24a 43b8 	movw	r3, #42168	; 0xa4b8
    9388:	f2c2 0300 	movt	r3, #8192	; 0x2000
    938c:	701a      	strb	r2, [r3, #0]
}
    938e:	46bd      	mov	sp, r7
    9390:	f85d 7b04 	ldr.w	r7, [sp], #4
    9394:	4770      	bx	lr
    9396:	bf00      	nop
    9398:	2000013f 	.word	0x2000013f

0000939c <send_bat>:
void send_bat(void){  //2000ms
    939c:	b480      	push	{r7}
    939e:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 20 == 8) PERIODIC_SEND_BAT();}
    93a0:	f24a 43b1 	movw	r3, #42161	; 0xa4b1
    93a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93a8:	781a      	ldrb	r2, [r3, #0]
    93aa:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    93ae:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    93b2:	fba3 1302 	umull	r1, r3, r3, r2
    93b6:	0919      	lsrs	r1, r3, #4
    93b8:	460b      	mov	r3, r1
    93ba:	009b      	lsls	r3, r3, #2
    93bc:	440b      	add	r3, r1
    93be:	009b      	lsls	r3, r3, #2
    93c0:	1ad3      	subs	r3, r2, r3
    93c2:	b2db      	uxtb	r3, r3
    93c4:	2b08      	cmp	r3, #8
    93c6:	f040 839a 	bne.w	9afe <send_bat+0x762>
    93ca:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    93ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93d2:	781a      	ldrb	r2, [r3, #0]
    93d4:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    93d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93dc:	781b      	ldrb	r3, [r3, #0]
    93de:	b2db      	uxtb	r3, r3
    93e0:	429a      	cmp	r2, r3
    93e2:	d313      	bcc.n	940c <send_bat+0x70>
    93e4:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    93e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93ec:	781b      	ldrb	r3, [r3, #0]
    93ee:	b2db      	uxtb	r3, r3
    93f0:	461a      	mov	r2, r3
    93f2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    93f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93fa:	781b      	ldrb	r3, [r3, #0]
    93fc:	1ad3      	subs	r3, r2, r3
    93fe:	33ff      	adds	r3, #255	; 0xff
    9400:	2b0c      	cmp	r3, #12
    9402:	bfd4      	ite	le
    9404:	2300      	movle	r3, #0
    9406:	2301      	movgt	r3, #1
    9408:	b2db      	uxtb	r3, r3
    940a:	e011      	b.n	9430 <send_bat+0x94>
    940c:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    9410:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9414:	781b      	ldrb	r3, [r3, #0]
    9416:	b2db      	uxtb	r3, r3
    9418:	461a      	mov	r2, r3
    941a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    941e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9422:	781b      	ldrb	r3, [r3, #0]
    9424:	1ad3      	subs	r3, r2, r3
    9426:	2b0c      	cmp	r3, #12
    9428:	bfd4      	ite	le
    942a:	2300      	movle	r3, #0
    942c:	2301      	movgt	r3, #1
    942e:	b2db      	uxtb	r3, r3
    9430:	2b00      	cmp	r3, #0
    9432:	f000 8358 	beq.w	9ae6 <send_bat+0x74a>
    9436:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    943a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    943e:	781b      	ldrb	r3, [r3, #0]
    9440:	461a      	mov	r2, r3
    9442:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    9446:	f2c2 0300 	movt	r3, #8192	; 0x2000
    944a:	2105      	movs	r1, #5
    944c:	5499      	strb	r1, [r3, r2]
    944e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9452:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9456:	781b      	ldrb	r3, [r3, #0]
    9458:	3301      	adds	r3, #1
    945a:	b2da      	uxtb	r2, r3
    945c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9460:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9464:	701a      	strb	r2, [r3, #0]
    9466:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    946a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    946e:	781b      	ldrb	r3, [r3, #0]
    9470:	2bff      	cmp	r3, #255	; 0xff
    9472:	d105      	bne.n	9480 <send_bat+0xe4>
    9474:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9478:	f2c2 0300 	movt	r3, #8192	; 0x2000
    947c:	2200      	movs	r2, #0
    947e:	701a      	strb	r2, [r3, #0]
    9480:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9484:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9488:	781b      	ldrb	r3, [r3, #0]
    948a:	461a      	mov	r2, r3
    948c:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    9490:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9494:	210c      	movs	r1, #12
    9496:	5499      	strb	r1, [r3, r2]
    9498:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    949c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94a0:	781b      	ldrb	r3, [r3, #0]
    94a2:	3301      	adds	r3, #1
    94a4:	b2da      	uxtb	r2, r3
    94a6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    94aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94ae:	701a      	strb	r2, [r3, #0]
    94b0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    94b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94b8:	781b      	ldrb	r3, [r3, #0]
    94ba:	2bff      	cmp	r3, #255	; 0xff
    94bc:	d105      	bne.n	94ca <send_bat+0x12e>
    94be:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    94c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94c6:	2200      	movs	r2, #0
    94c8:	701a      	strb	r2, [r3, #0]
    94ca:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    94ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94d2:	220c      	movs	r2, #12
    94d4:	701a      	strb	r2, [r3, #0]
    94d6:	f24a 53be 	movw	r3, #42430	; 0xa5be
    94da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94de:	220c      	movs	r2, #12
    94e0:	701a      	strb	r2, [r3, #0]
    94e2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    94e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94ea:	781b      	ldrb	r3, [r3, #0]
    94ec:	461a      	mov	r2, r3
    94ee:	f24a 43a2 	movw	r3, #42146	; 0xa4a2
    94f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94f6:	7819      	ldrb	r1, [r3, #0]
    94f8:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    94fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9500:	5499      	strb	r1, [r3, r2]
    9502:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9506:	f2c2 0300 	movt	r3, #8192	; 0x2000
    950a:	781a      	ldrb	r2, [r3, #0]
    950c:	f24a 43a2 	movw	r3, #42146	; 0xa4a2
    9510:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9514:	781b      	ldrb	r3, [r3, #0]
    9516:	4413      	add	r3, r2
    9518:	b2da      	uxtb	r2, r3
    951a:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    951e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9522:	701a      	strb	r2, [r3, #0]
    9524:	f24a 53be 	movw	r3, #42430	; 0xa5be
    9528:	f2c2 0300 	movt	r3, #8192	; 0x2000
    952c:	781a      	ldrb	r2, [r3, #0]
    952e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9532:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9536:	781b      	ldrb	r3, [r3, #0]
    9538:	4413      	add	r3, r2
    953a:	b2da      	uxtb	r2, r3
    953c:	f24a 53be 	movw	r3, #42430	; 0xa5be
    9540:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9544:	701a      	strb	r2, [r3, #0]
    9546:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    954a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    954e:	781b      	ldrb	r3, [r3, #0]
    9550:	3301      	adds	r3, #1
    9552:	b2da      	uxtb	r2, r3
    9554:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9558:	f2c2 0300 	movt	r3, #8192	; 0x2000
    955c:	701a      	strb	r2, [r3, #0]
    955e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9562:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9566:	781b      	ldrb	r3, [r3, #0]
    9568:	2bff      	cmp	r3, #255	; 0xff
    956a:	d105      	bne.n	9578 <send_bat+0x1dc>
    956c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9570:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9574:	2200      	movs	r2, #0
    9576:	701a      	strb	r2, [r3, #0]
    9578:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    957c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9580:	781b      	ldrb	r3, [r3, #0]
    9582:	461a      	mov	r2, r3
    9584:	f64a 239c 	movw	r3, #43676	; 0xaa9c
    9588:	f2c2 0300 	movt	r3, #8192	; 0x2000
    958c:	7819      	ldrb	r1, [r3, #0]
    958e:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    9592:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9596:	5499      	strb	r1, [r3, r2]
    9598:	f64a 239c 	movw	r3, #43676	; 0xaa9c
    959c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95a0:	781a      	ldrb	r2, [r3, #0]
    95a2:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    95a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95aa:	781b      	ldrb	r3, [r3, #0]
    95ac:	4413      	add	r3, r2
    95ae:	b2da      	uxtb	r2, r3
    95b0:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    95b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95b8:	701a      	strb	r2, [r3, #0]
    95ba:	f24a 53be 	movw	r3, #42430	; 0xa5be
    95be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95c2:	781a      	ldrb	r2, [r3, #0]
    95c4:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    95c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95cc:	781b      	ldrb	r3, [r3, #0]
    95ce:	4413      	add	r3, r2
    95d0:	b2da      	uxtb	r2, r3
    95d2:	f24a 53be 	movw	r3, #42430	; 0xa5be
    95d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95da:	701a      	strb	r2, [r3, #0]
    95dc:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    95e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95e4:	781b      	ldrb	r3, [r3, #0]
    95e6:	3301      	adds	r3, #1
    95e8:	b2da      	uxtb	r2, r3
    95ea:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    95ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95f2:	701a      	strb	r2, [r3, #0]
    95f4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    95f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95fc:	781b      	ldrb	r3, [r3, #0]
    95fe:	2bff      	cmp	r3, #255	; 0xff
    9600:	d105      	bne.n	960e <send_bat+0x272>
    9602:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9606:	f2c2 0300 	movt	r3, #8192	; 0x2000
    960a:	2200      	movs	r2, #0
    960c:	701a      	strb	r2, [r3, #0]
    960e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9612:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9616:	781b      	ldrb	r3, [r3, #0]
    9618:	461a      	mov	r2, r3
    961a:	f64a 239c 	movw	r3, #43676	; 0xaa9c
    961e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9622:	7859      	ldrb	r1, [r3, #1]
    9624:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    9628:	f2c2 0300 	movt	r3, #8192	; 0x2000
    962c:	5499      	strb	r1, [r3, r2]
    962e:	4bd5      	ldr	r3, [pc, #852]	; (9984 <send_bat+0x5e8>)
    9630:	781a      	ldrb	r2, [r3, #0]
    9632:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9636:	f2c2 0300 	movt	r3, #8192	; 0x2000
    963a:	781b      	ldrb	r3, [r3, #0]
    963c:	4413      	add	r3, r2
    963e:	b2da      	uxtb	r2, r3
    9640:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9644:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9648:	701a      	strb	r2, [r3, #0]
    964a:	f24a 53be 	movw	r3, #42430	; 0xa5be
    964e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9652:	781a      	ldrb	r2, [r3, #0]
    9654:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9658:	f2c2 0300 	movt	r3, #8192	; 0x2000
    965c:	781b      	ldrb	r3, [r3, #0]
    965e:	4413      	add	r3, r2
    9660:	b2da      	uxtb	r2, r3
    9662:	f24a 53be 	movw	r3, #42430	; 0xa5be
    9666:	f2c2 0300 	movt	r3, #8192	; 0x2000
    966a:	701a      	strb	r2, [r3, #0]
    966c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9670:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9674:	781b      	ldrb	r3, [r3, #0]
    9676:	3301      	adds	r3, #1
    9678:	b2da      	uxtb	r2, r3
    967a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    967e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9682:	701a      	strb	r2, [r3, #0]
    9684:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9688:	f2c2 0300 	movt	r3, #8192	; 0x2000
    968c:	781b      	ldrb	r3, [r3, #0]
    968e:	2bff      	cmp	r3, #255	; 0xff
    9690:	d105      	bne.n	969e <send_bat+0x302>
    9692:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9696:	f2c2 0300 	movt	r3, #8192	; 0x2000
    969a:	2200      	movs	r2, #0
    969c:	701a      	strb	r2, [r3, #0]
    969e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    96a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96a6:	781b      	ldrb	r3, [r3, #0]
    96a8:	461a      	mov	r2, r3
    96aa:	f24a 43a5 	movw	r3, #42149	; 0xa4a5
    96ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96b2:	7819      	ldrb	r1, [r3, #0]
    96b4:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    96b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96bc:	5499      	strb	r1, [r3, r2]
    96be:	f24a 43a5 	movw	r3, #42149	; 0xa4a5
    96c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96c6:	781a      	ldrb	r2, [r3, #0]
    96c8:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    96cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96d0:	781b      	ldrb	r3, [r3, #0]
    96d2:	4413      	add	r3, r2
    96d4:	b2da      	uxtb	r2, r3
    96d6:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    96da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96de:	701a      	strb	r2, [r3, #0]
    96e0:	f24a 53be 	movw	r3, #42430	; 0xa5be
    96e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96e8:	781a      	ldrb	r2, [r3, #0]
    96ea:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    96ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96f2:	781b      	ldrb	r3, [r3, #0]
    96f4:	4413      	add	r3, r2
    96f6:	b2da      	uxtb	r2, r3
    96f8:	f24a 53be 	movw	r3, #42430	; 0xa5be
    96fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9700:	701a      	strb	r2, [r3, #0]
    9702:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9706:	f2c2 0300 	movt	r3, #8192	; 0x2000
    970a:	781b      	ldrb	r3, [r3, #0]
    970c:	3301      	adds	r3, #1
    970e:	b2da      	uxtb	r2, r3
    9710:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9714:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9718:	701a      	strb	r2, [r3, #0]
    971a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    971e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9722:	781b      	ldrb	r3, [r3, #0]
    9724:	2bff      	cmp	r3, #255	; 0xff
    9726:	d105      	bne.n	9734 <send_bat+0x398>
    9728:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    972c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9730:	2200      	movs	r2, #0
    9732:	701a      	strb	r2, [r3, #0]
    9734:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9738:	f2c2 0300 	movt	r3, #8192	; 0x2000
    973c:	781b      	ldrb	r3, [r3, #0]
    973e:	461a      	mov	r2, r3
    9740:	f64a 0326 	movw	r3, #43046	; 0xa826
    9744:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9748:	7819      	ldrb	r1, [r3, #0]
    974a:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    974e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9752:	5499      	strb	r1, [r3, r2]
    9754:	f64a 0326 	movw	r3, #43046	; 0xa826
    9758:	f2c2 0300 	movt	r3, #8192	; 0x2000
    975c:	781a      	ldrb	r2, [r3, #0]
    975e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9762:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9766:	781b      	ldrb	r3, [r3, #0]
    9768:	4413      	add	r3, r2
    976a:	b2da      	uxtb	r2, r3
    976c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9770:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9774:	701a      	strb	r2, [r3, #0]
    9776:	f24a 53be 	movw	r3, #42430	; 0xa5be
    977a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    977e:	781a      	ldrb	r2, [r3, #0]
    9780:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9784:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9788:	781b      	ldrb	r3, [r3, #0]
    978a:	4413      	add	r3, r2
    978c:	b2da      	uxtb	r2, r3
    978e:	f24a 53be 	movw	r3, #42430	; 0xa5be
    9792:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9796:	701a      	strb	r2, [r3, #0]
    9798:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    979c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97a0:	781b      	ldrb	r3, [r3, #0]
    97a2:	3301      	adds	r3, #1
    97a4:	b2da      	uxtb	r2, r3
    97a6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    97aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97ae:	701a      	strb	r2, [r3, #0]
    97b0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    97b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97b8:	781b      	ldrb	r3, [r3, #0]
    97ba:	2bff      	cmp	r3, #255	; 0xff
    97bc:	d105      	bne.n	97ca <send_bat+0x42e>
    97be:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    97c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97c6:	2200      	movs	r2, #0
    97c8:	701a      	strb	r2, [r3, #0]
    97ca:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    97ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97d2:	781b      	ldrb	r3, [r3, #0]
    97d4:	461a      	mov	r2, r3
    97d6:	f64a 0326 	movw	r3, #43046	; 0xa826
    97da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97de:	7859      	ldrb	r1, [r3, #1]
    97e0:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    97e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97e8:	5499      	strb	r1, [r3, r2]
    97ea:	4b67      	ldr	r3, [pc, #412]	; (9988 <send_bat+0x5ec>)
    97ec:	781a      	ldrb	r2, [r3, #0]
    97ee:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    97f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97f6:	781b      	ldrb	r3, [r3, #0]
    97f8:	4413      	add	r3, r2
    97fa:	b2da      	uxtb	r2, r3
    97fc:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9800:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9804:	701a      	strb	r2, [r3, #0]
    9806:	f24a 53be 	movw	r3, #42430	; 0xa5be
    980a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    980e:	781a      	ldrb	r2, [r3, #0]
    9810:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9814:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9818:	781b      	ldrb	r3, [r3, #0]
    981a:	4413      	add	r3, r2
    981c:	b2da      	uxtb	r2, r3
    981e:	f24a 53be 	movw	r3, #42430	; 0xa5be
    9822:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9826:	701a      	strb	r2, [r3, #0]
    9828:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    982c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9830:	781b      	ldrb	r3, [r3, #0]
    9832:	3301      	adds	r3, #1
    9834:	b2da      	uxtb	r2, r3
    9836:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    983a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    983e:	701a      	strb	r2, [r3, #0]
    9840:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9844:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9848:	781b      	ldrb	r3, [r3, #0]
    984a:	2bff      	cmp	r3, #255	; 0xff
    984c:	d105      	bne.n	985a <send_bat+0x4be>
    984e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9852:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9856:	2200      	movs	r2, #0
    9858:	701a      	strb	r2, [r3, #0]
    985a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    985e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9862:	781b      	ldrb	r3, [r3, #0]
    9864:	461a      	mov	r2, r3
    9866:	f64a 0324 	movw	r3, #43044	; 0xa824
    986a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    986e:	7819      	ldrb	r1, [r3, #0]
    9870:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    9874:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9878:	5499      	strb	r1, [r3, r2]
    987a:	f64a 0324 	movw	r3, #43044	; 0xa824
    987e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9882:	781a      	ldrb	r2, [r3, #0]
    9884:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9888:	f2c2 0300 	movt	r3, #8192	; 0x2000
    988c:	781b      	ldrb	r3, [r3, #0]
    988e:	4413      	add	r3, r2
    9890:	b2da      	uxtb	r2, r3
    9892:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9896:	f2c2 0300 	movt	r3, #8192	; 0x2000
    989a:	701a      	strb	r2, [r3, #0]
    989c:	f24a 53be 	movw	r3, #42430	; 0xa5be
    98a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98a4:	781a      	ldrb	r2, [r3, #0]
    98a6:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    98aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98ae:	781b      	ldrb	r3, [r3, #0]
    98b0:	4413      	add	r3, r2
    98b2:	b2da      	uxtb	r2, r3
    98b4:	f24a 53be 	movw	r3, #42430	; 0xa5be
    98b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98bc:	701a      	strb	r2, [r3, #0]
    98be:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    98c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98c6:	781b      	ldrb	r3, [r3, #0]
    98c8:	3301      	adds	r3, #1
    98ca:	b2da      	uxtb	r2, r3
    98cc:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    98d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98d4:	701a      	strb	r2, [r3, #0]
    98d6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    98da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98de:	781b      	ldrb	r3, [r3, #0]
    98e0:	2bff      	cmp	r3, #255	; 0xff
    98e2:	d105      	bne.n	98f0 <send_bat+0x554>
    98e4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    98e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98ec:	2200      	movs	r2, #0
    98ee:	701a      	strb	r2, [r3, #0]
    98f0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    98f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98f8:	781b      	ldrb	r3, [r3, #0]
    98fa:	461a      	mov	r2, r3
    98fc:	f64a 0324 	movw	r3, #43044	; 0xa824
    9900:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9904:	7859      	ldrb	r1, [r3, #1]
    9906:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    990a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    990e:	5499      	strb	r1, [r3, r2]
    9910:	4b1e      	ldr	r3, [pc, #120]	; (998c <send_bat+0x5f0>)
    9912:	781a      	ldrb	r2, [r3, #0]
    9914:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9918:	f2c2 0300 	movt	r3, #8192	; 0x2000
    991c:	781b      	ldrb	r3, [r3, #0]
    991e:	4413      	add	r3, r2
    9920:	b2da      	uxtb	r2, r3
    9922:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9926:	f2c2 0300 	movt	r3, #8192	; 0x2000
    992a:	701a      	strb	r2, [r3, #0]
    992c:	f24a 53be 	movw	r3, #42430	; 0xa5be
    9930:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9934:	781a      	ldrb	r2, [r3, #0]
    9936:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    993a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    993e:	781b      	ldrb	r3, [r3, #0]
    9940:	4413      	add	r3, r2
    9942:	b2da      	uxtb	r2, r3
    9944:	f24a 53be 	movw	r3, #42430	; 0xa5be
    9948:	f2c2 0300 	movt	r3, #8192	; 0x2000
    994c:	701a      	strb	r2, [r3, #0]
    994e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9952:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9956:	781b      	ldrb	r3, [r3, #0]
    9958:	3301      	adds	r3, #1
    995a:	b2da      	uxtb	r2, r3
    995c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9960:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9964:	701a      	strb	r2, [r3, #0]
    9966:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    996a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    996e:	781b      	ldrb	r3, [r3, #0]
    9970:	2bff      	cmp	r3, #255	; 0xff
    9972:	d10d      	bne.n	9990 <send_bat+0x5f4>
    9974:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9978:	f2c2 0300 	movt	r3, #8192	; 0x2000
    997c:	2200      	movs	r2, #0
    997e:	701a      	strb	r2, [r3, #0]
    9980:	e006      	b.n	9990 <send_bat+0x5f4>
    9982:	bf00      	nop
    9984:	2000aa9d 	.word	0x2000aa9d
    9988:	2000a827 	.word	0x2000a827
    998c:	2000a825 	.word	0x2000a825
    9990:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9994:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9998:	781b      	ldrb	r3, [r3, #0]
    999a:	461a      	mov	r2, r3
    999c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    99a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99a4:	7819      	ldrb	r1, [r3, #0]
    99a6:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    99aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99ae:	5499      	strb	r1, [r3, r2]
    99b0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    99b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99b8:	781b      	ldrb	r3, [r3, #0]
    99ba:	3301      	adds	r3, #1
    99bc:	b2da      	uxtb	r2, r3
    99be:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    99c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99c6:	701a      	strb	r2, [r3, #0]
    99c8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    99cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99d0:	781b      	ldrb	r3, [r3, #0]
    99d2:	2bff      	cmp	r3, #255	; 0xff
    99d4:	d105      	bne.n	99e2 <send_bat+0x646>
    99d6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    99da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99de:	2200      	movs	r2, #0
    99e0:	701a      	strb	r2, [r3, #0]
    99e2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    99e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99ea:	781b      	ldrb	r3, [r3, #0]
    99ec:	461a      	mov	r2, r3
    99ee:	f24a 53be 	movw	r3, #42430	; 0xa5be
    99f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99f6:	7819      	ldrb	r1, [r3, #0]
    99f8:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    99fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a00:	5499      	strb	r1, [r3, r2]
    9a02:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9a06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a0a:	781b      	ldrb	r3, [r3, #0]
    9a0c:	3301      	adds	r3, #1
    9a0e:	b2da      	uxtb	r2, r3
    9a10:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9a14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a18:	701a      	strb	r2, [r3, #0]
    9a1a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9a1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a22:	781b      	ldrb	r3, [r3, #0]
    9a24:	2bff      	cmp	r3, #255	; 0xff
    9a26:	d105      	bne.n	9a34 <send_bat+0x698>
    9a28:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9a2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a30:	2200      	movs	r2, #0
    9a32:	701a      	strb	r2, [r3, #0]
    9a34:	f242 0339 	movw	r3, #8249	; 0x2039
    9a38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a3c:	781b      	ldrb	r3, [r3, #0]
    9a3e:	b2db      	uxtb	r3, r3
    9a40:	f003 0310 	and.w	r3, r3, #16
    9a44:	2b00      	cmp	r3, #0
    9a46:	d15a      	bne.n	9afe <send_bat+0x762>
    9a48:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    9a4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a50:	781b      	ldrb	r3, [r3, #0]
    9a52:	b2db      	uxtb	r3, r3
    9a54:	461a      	mov	r2, r3
    9a56:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    9a5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a5e:	5c9a      	ldrb	r2, [r3, r2]
    9a60:	f24a 53bb 	movw	r3, #42427	; 0xa5bb
    9a64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a68:	701a      	strb	r2, [r3, #0]
    9a6a:	f24a 53bc 	movw	r3, #42428	; 0xa5bc
    9a6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a72:	2200      	movs	r2, #0
    9a74:	701a      	strb	r2, [r3, #0]
    9a76:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    9a7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a7e:	781b      	ldrb	r3, [r3, #0]
    9a80:	b2db      	uxtb	r3, r3
    9a82:	3301      	adds	r3, #1
    9a84:	b2da      	uxtb	r2, r3
    9a86:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    9a8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a8e:	701a      	strb	r2, [r3, #0]
    9a90:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    9a94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a98:	781b      	ldrb	r3, [r3, #0]
    9a9a:	b2db      	uxtb	r3, r3
    9a9c:	2bff      	cmp	r3, #255	; 0xff
    9a9e:	d105      	bne.n	9aac <send_bat+0x710>
    9aa0:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    9aa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9aa8:	2200      	movs	r2, #0
    9aaa:	701a      	strb	r2, [r3, #0]
    9aac:	f242 0338 	movw	r3, #8248	; 0x2038
    9ab0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ab4:	f242 0238 	movw	r2, #8248	; 0x2038
    9ab8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9abc:	7812      	ldrb	r2, [r2, #0]
    9abe:	b2d2      	uxtb	r2, r2
    9ac0:	f042 0201 	orr.w	r2, r2, #1
    9ac4:	b2d2      	uxtb	r2, r2
    9ac6:	701a      	strb	r2, [r3, #0]
    9ac8:	f242 0339 	movw	r3, #8249	; 0x2039
    9acc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ad0:	f242 0239 	movw	r2, #8249	; 0x2039
    9ad4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9ad8:	7812      	ldrb	r2, [r2, #0]
    9ada:	b2d2      	uxtb	r2, r2
    9adc:	f042 0210 	orr.w	r2, r2, #16
    9ae0:	b2d2      	uxtb	r2, r2
    9ae2:	701a      	strb	r2, [r3, #0]
    9ae4:	e00b      	b.n	9afe <send_bat+0x762>
    9ae6:	f24a 43b8 	movw	r3, #42168	; 0xa4b8
    9aea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9aee:	781b      	ldrb	r3, [r3, #0]
    9af0:	3301      	adds	r3, #1
    9af2:	b2da      	uxtb	r2, r3
    9af4:	f24a 43b8 	movw	r3, #42168	; 0xa4b8
    9af8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9afc:	701a      	strb	r2, [r3, #0]
}
    9afe:	46bd      	mov	sp, r7
    9b00:	f85d 7b04 	ldr.w	r7, [sp], #4
    9b04:	4770      	bx	lr
    9b06:	bf00      	nop

00009b08 <send_climb>:
void send_climb(void){  //2000ms
    9b08:	b480      	push	{r7}
    9b0a:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 20 == 18) PERIODIC_SEND_CLIMB_PID();}
    9b0c:	f24a 43b1 	movw	r3, #42161	; 0xa4b1
    9b10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b14:	781a      	ldrb	r2, [r3, #0]
    9b16:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    9b1a:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    9b1e:	fba3 1302 	umull	r1, r3, r3, r2
    9b22:	0919      	lsrs	r1, r3, #4
    9b24:	460b      	mov	r3, r1
    9b26:	009b      	lsls	r3, r3, #2
    9b28:	440b      	add	r3, r1
    9b2a:	009b      	lsls	r3, r3, #2
    9b2c:	1ad3      	subs	r3, r2, r3
    9b2e:	b2db      	uxtb	r3, r3
    9b30:	2b12      	cmp	r3, #18
    9b32:	f040 8554 	bne.w	a5de <send_climb+0xad6>
    9b36:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9b3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b3e:	781a      	ldrb	r2, [r3, #0]
    9b40:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    9b44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b48:	781b      	ldrb	r3, [r3, #0]
    9b4a:	b2db      	uxtb	r3, r3
    9b4c:	429a      	cmp	r2, r3
    9b4e:	d313      	bcc.n	9b78 <send_climb+0x70>
    9b50:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    9b54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b58:	781b      	ldrb	r3, [r3, #0]
    9b5a:	b2db      	uxtb	r3, r3
    9b5c:	461a      	mov	r2, r3
    9b5e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9b62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b66:	781b      	ldrb	r3, [r3, #0]
    9b68:	1ad3      	subs	r3, r2, r3
    9b6a:	33ff      	adds	r3, #255	; 0xff
    9b6c:	2b12      	cmp	r3, #18
    9b6e:	bfd4      	ite	le
    9b70:	2300      	movle	r3, #0
    9b72:	2301      	movgt	r3, #1
    9b74:	b2db      	uxtb	r3, r3
    9b76:	e011      	b.n	9b9c <send_climb+0x94>
    9b78:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    9b7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b80:	781b      	ldrb	r3, [r3, #0]
    9b82:	b2db      	uxtb	r3, r3
    9b84:	461a      	mov	r2, r3
    9b86:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9b8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b8e:	781b      	ldrb	r3, [r3, #0]
    9b90:	1ad3      	subs	r3, r2, r3
    9b92:	2b12      	cmp	r3, #18
    9b94:	bfd4      	ite	le
    9b96:	2300      	movle	r3, #0
    9b98:	2301      	movgt	r3, #1
    9b9a:	b2db      	uxtb	r3, r3
    9b9c:	2b00      	cmp	r3, #0
    9b9e:	f000 8512 	beq.w	a5c6 <send_climb+0xabe>
    9ba2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9ba6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9baa:	781b      	ldrb	r3, [r3, #0]
    9bac:	461a      	mov	r2, r3
    9bae:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    9bb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bb6:	2105      	movs	r1, #5
    9bb8:	5499      	strb	r1, [r3, r2]
    9bba:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9bbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bc2:	781b      	ldrb	r3, [r3, #0]
    9bc4:	3301      	adds	r3, #1
    9bc6:	b2da      	uxtb	r2, r3
    9bc8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9bcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bd0:	701a      	strb	r2, [r3, #0]
    9bd2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9bd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bda:	781b      	ldrb	r3, [r3, #0]
    9bdc:	2bff      	cmp	r3, #255	; 0xff
    9bde:	d105      	bne.n	9bec <send_climb+0xe4>
    9be0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9be4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9be8:	2200      	movs	r2, #0
    9bea:	701a      	strb	r2, [r3, #0]
    9bec:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9bf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bf4:	781b      	ldrb	r3, [r3, #0]
    9bf6:	461a      	mov	r2, r3
    9bf8:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    9bfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c00:	210e      	movs	r1, #14
    9c02:	5499      	strb	r1, [r3, r2]
    9c04:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9c08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c0c:	781b      	ldrb	r3, [r3, #0]
    9c0e:	3301      	adds	r3, #1
    9c10:	b2da      	uxtb	r2, r3
    9c12:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9c16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c1a:	701a      	strb	r2, [r3, #0]
    9c1c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9c20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c24:	781b      	ldrb	r3, [r3, #0]
    9c26:	2bff      	cmp	r3, #255	; 0xff
    9c28:	d105      	bne.n	9c36 <send_climb+0x12e>
    9c2a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9c2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c32:	2200      	movs	r2, #0
    9c34:	701a      	strb	r2, [r3, #0]
    9c36:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9c3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c3e:	220e      	movs	r2, #14
    9c40:	701a      	strb	r2, [r3, #0]
    9c42:	f24a 53be 	movw	r3, #42430	; 0xa5be
    9c46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c4a:	220e      	movs	r2, #14
    9c4c:	701a      	strb	r2, [r3, #0]
    9c4e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9c52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c56:	781b      	ldrb	r3, [r3, #0]
    9c58:	461a      	mov	r2, r3
    9c5a:	f24a 73ec 	movw	r3, #42988	; 0xa7ec
    9c5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c62:	7819      	ldrb	r1, [r3, #0]
    9c64:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    9c68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c6c:	5499      	strb	r1, [r3, r2]
    9c6e:	f24a 73ec 	movw	r3, #42988	; 0xa7ec
    9c72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c76:	781a      	ldrb	r2, [r3, #0]
    9c78:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9c7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c80:	781b      	ldrb	r3, [r3, #0]
    9c82:	4413      	add	r3, r2
    9c84:	b2da      	uxtb	r2, r3
    9c86:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9c8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c8e:	701a      	strb	r2, [r3, #0]
    9c90:	f24a 53be 	movw	r3, #42430	; 0xa5be
    9c94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c98:	781a      	ldrb	r2, [r3, #0]
    9c9a:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9c9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ca2:	781b      	ldrb	r3, [r3, #0]
    9ca4:	4413      	add	r3, r2
    9ca6:	b2da      	uxtb	r2, r3
    9ca8:	f24a 53be 	movw	r3, #42430	; 0xa5be
    9cac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9cb0:	701a      	strb	r2, [r3, #0]
    9cb2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9cb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9cba:	781b      	ldrb	r3, [r3, #0]
    9cbc:	3301      	adds	r3, #1
    9cbe:	b2da      	uxtb	r2, r3
    9cc0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9cc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9cc8:	701a      	strb	r2, [r3, #0]
    9cca:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9cce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9cd2:	781b      	ldrb	r3, [r3, #0]
    9cd4:	2bff      	cmp	r3, #255	; 0xff
    9cd6:	d105      	bne.n	9ce4 <send_climb+0x1dc>
    9cd8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9cdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ce0:	2200      	movs	r2, #0
    9ce2:	701a      	strb	r2, [r3, #0]
    9ce4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9ce8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9cec:	781b      	ldrb	r3, [r3, #0]
    9cee:	461a      	mov	r2, r3
    9cf0:	f24a 73ec 	movw	r3, #42988	; 0xa7ec
    9cf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9cf8:	7859      	ldrb	r1, [r3, #1]
    9cfa:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    9cfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d02:	5499      	strb	r1, [r3, r2]
    9d04:	4bd3      	ldr	r3, [pc, #844]	; (a054 <send_climb+0x54c>)
    9d06:	781a      	ldrb	r2, [r3, #0]
    9d08:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9d0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d10:	781b      	ldrb	r3, [r3, #0]
    9d12:	4413      	add	r3, r2
    9d14:	b2da      	uxtb	r2, r3
    9d16:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9d1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d1e:	701a      	strb	r2, [r3, #0]
    9d20:	f24a 53be 	movw	r3, #42430	; 0xa5be
    9d24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d28:	781a      	ldrb	r2, [r3, #0]
    9d2a:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9d2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d32:	781b      	ldrb	r3, [r3, #0]
    9d34:	4413      	add	r3, r2
    9d36:	b2da      	uxtb	r2, r3
    9d38:	f24a 53be 	movw	r3, #42430	; 0xa5be
    9d3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d40:	701a      	strb	r2, [r3, #0]
    9d42:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9d46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d4a:	781b      	ldrb	r3, [r3, #0]
    9d4c:	3301      	adds	r3, #1
    9d4e:	b2da      	uxtb	r2, r3
    9d50:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9d54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d58:	701a      	strb	r2, [r3, #0]
    9d5a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9d5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d62:	781b      	ldrb	r3, [r3, #0]
    9d64:	2bff      	cmp	r3, #255	; 0xff
    9d66:	d105      	bne.n	9d74 <send_climb+0x26c>
    9d68:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9d6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d70:	2200      	movs	r2, #0
    9d72:	701a      	strb	r2, [r3, #0]
    9d74:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9d78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d7c:	781b      	ldrb	r3, [r3, #0]
    9d7e:	461a      	mov	r2, r3
    9d80:	f64a 0300 	movw	r3, #43008	; 0xa800
    9d84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d88:	7819      	ldrb	r1, [r3, #0]
    9d8a:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    9d8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d92:	5499      	strb	r1, [r3, r2]
    9d94:	f64a 0300 	movw	r3, #43008	; 0xa800
    9d98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d9c:	781a      	ldrb	r2, [r3, #0]
    9d9e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9da2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9da6:	781b      	ldrb	r3, [r3, #0]
    9da8:	4413      	add	r3, r2
    9daa:	b2da      	uxtb	r2, r3
    9dac:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9db0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9db4:	701a      	strb	r2, [r3, #0]
    9db6:	f24a 53be 	movw	r3, #42430	; 0xa5be
    9dba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9dbe:	781a      	ldrb	r2, [r3, #0]
    9dc0:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9dc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9dc8:	781b      	ldrb	r3, [r3, #0]
    9dca:	4413      	add	r3, r2
    9dcc:	b2da      	uxtb	r2, r3
    9dce:	f24a 53be 	movw	r3, #42430	; 0xa5be
    9dd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9dd6:	701a      	strb	r2, [r3, #0]
    9dd8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9ddc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9de0:	781b      	ldrb	r3, [r3, #0]
    9de2:	3301      	adds	r3, #1
    9de4:	b2da      	uxtb	r2, r3
    9de6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9dea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9dee:	701a      	strb	r2, [r3, #0]
    9df0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9df4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9df8:	781b      	ldrb	r3, [r3, #0]
    9dfa:	2bff      	cmp	r3, #255	; 0xff
    9dfc:	d105      	bne.n	9e0a <send_climb+0x302>
    9dfe:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9e02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e06:	2200      	movs	r2, #0
    9e08:	701a      	strb	r2, [r3, #0]
    9e0a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9e0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e12:	781b      	ldrb	r3, [r3, #0]
    9e14:	461a      	mov	r2, r3
    9e16:	f64a 0300 	movw	r3, #43008	; 0xa800
    9e1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e1e:	7859      	ldrb	r1, [r3, #1]
    9e20:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    9e24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e28:	5499      	strb	r1, [r3, r2]
    9e2a:	4b8b      	ldr	r3, [pc, #556]	; (a058 <send_climb+0x550>)
    9e2c:	781a      	ldrb	r2, [r3, #0]
    9e2e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9e32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e36:	781b      	ldrb	r3, [r3, #0]
    9e38:	4413      	add	r3, r2
    9e3a:	b2da      	uxtb	r2, r3
    9e3c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9e40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e44:	701a      	strb	r2, [r3, #0]
    9e46:	f24a 53be 	movw	r3, #42430	; 0xa5be
    9e4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e4e:	781a      	ldrb	r2, [r3, #0]
    9e50:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9e54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e58:	781b      	ldrb	r3, [r3, #0]
    9e5a:	4413      	add	r3, r2
    9e5c:	b2da      	uxtb	r2, r3
    9e5e:	f24a 53be 	movw	r3, #42430	; 0xa5be
    9e62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e66:	701a      	strb	r2, [r3, #0]
    9e68:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9e6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e70:	781b      	ldrb	r3, [r3, #0]
    9e72:	3301      	adds	r3, #1
    9e74:	b2da      	uxtb	r2, r3
    9e76:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9e7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e7e:	701a      	strb	r2, [r3, #0]
    9e80:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9e84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e88:	781b      	ldrb	r3, [r3, #0]
    9e8a:	2bff      	cmp	r3, #255	; 0xff
    9e8c:	d105      	bne.n	9e9a <send_climb+0x392>
    9e8e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9e92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e96:	2200      	movs	r2, #0
    9e98:	701a      	strb	r2, [r3, #0]
    9e9a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9e9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ea2:	781b      	ldrb	r3, [r3, #0]
    9ea4:	461a      	mov	r2, r3
    9ea6:	f64a 0300 	movw	r3, #43008	; 0xa800
    9eaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9eae:	7899      	ldrb	r1, [r3, #2]
    9eb0:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    9eb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9eb8:	5499      	strb	r1, [r3, r2]
    9eba:	4b68      	ldr	r3, [pc, #416]	; (a05c <send_climb+0x554>)
    9ebc:	781a      	ldrb	r2, [r3, #0]
    9ebe:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9ec2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ec6:	781b      	ldrb	r3, [r3, #0]
    9ec8:	4413      	add	r3, r2
    9eca:	b2da      	uxtb	r2, r3
    9ecc:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9ed0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ed4:	701a      	strb	r2, [r3, #0]
    9ed6:	f24a 53be 	movw	r3, #42430	; 0xa5be
    9eda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ede:	781a      	ldrb	r2, [r3, #0]
    9ee0:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9ee4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ee8:	781b      	ldrb	r3, [r3, #0]
    9eea:	4413      	add	r3, r2
    9eec:	b2da      	uxtb	r2, r3
    9eee:	f24a 53be 	movw	r3, #42430	; 0xa5be
    9ef2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ef6:	701a      	strb	r2, [r3, #0]
    9ef8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9efc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f00:	781b      	ldrb	r3, [r3, #0]
    9f02:	3301      	adds	r3, #1
    9f04:	b2da      	uxtb	r2, r3
    9f06:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9f0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f0e:	701a      	strb	r2, [r3, #0]
    9f10:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9f14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f18:	781b      	ldrb	r3, [r3, #0]
    9f1a:	2bff      	cmp	r3, #255	; 0xff
    9f1c:	d105      	bne.n	9f2a <send_climb+0x422>
    9f1e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9f22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f26:	2200      	movs	r2, #0
    9f28:	701a      	strb	r2, [r3, #0]
    9f2a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9f2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f32:	781b      	ldrb	r3, [r3, #0]
    9f34:	461a      	mov	r2, r3
    9f36:	f64a 0300 	movw	r3, #43008	; 0xa800
    9f3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f3e:	78d9      	ldrb	r1, [r3, #3]
    9f40:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    9f44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f48:	5499      	strb	r1, [r3, r2]
    9f4a:	4b45      	ldr	r3, [pc, #276]	; (a060 <send_climb+0x558>)
    9f4c:	781a      	ldrb	r2, [r3, #0]
    9f4e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9f52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f56:	781b      	ldrb	r3, [r3, #0]
    9f58:	4413      	add	r3, r2
    9f5a:	b2da      	uxtb	r2, r3
    9f5c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9f60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f64:	701a      	strb	r2, [r3, #0]
    9f66:	f24a 53be 	movw	r3, #42430	; 0xa5be
    9f6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f6e:	781a      	ldrb	r2, [r3, #0]
    9f70:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9f74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f78:	781b      	ldrb	r3, [r3, #0]
    9f7a:	4413      	add	r3, r2
    9f7c:	b2da      	uxtb	r2, r3
    9f7e:	f24a 53be 	movw	r3, #42430	; 0xa5be
    9f82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f86:	701a      	strb	r2, [r3, #0]
    9f88:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9f8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f90:	781b      	ldrb	r3, [r3, #0]
    9f92:	3301      	adds	r3, #1
    9f94:	b2da      	uxtb	r2, r3
    9f96:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9f9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f9e:	701a      	strb	r2, [r3, #0]
    9fa0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9fa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9fa8:	781b      	ldrb	r3, [r3, #0]
    9faa:	2bff      	cmp	r3, #255	; 0xff
    9fac:	d105      	bne.n	9fba <send_climb+0x4b2>
    9fae:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9fb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9fb6:	2200      	movs	r2, #0
    9fb8:	701a      	strb	r2, [r3, #0]
    9fba:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9fbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9fc2:	781b      	ldrb	r3, [r3, #0]
    9fc4:	461a      	mov	r2, r3
    9fc6:	f64a 0308 	movw	r3, #43016	; 0xa808
    9fca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9fce:	7819      	ldrb	r1, [r3, #0]
    9fd0:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    9fd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9fd8:	5499      	strb	r1, [r3, r2]
    9fda:	f64a 0308 	movw	r3, #43016	; 0xa808
    9fde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9fe2:	781a      	ldrb	r2, [r3, #0]
    9fe4:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9fe8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9fec:	781b      	ldrb	r3, [r3, #0]
    9fee:	4413      	add	r3, r2
    9ff0:	b2da      	uxtb	r2, r3
    9ff2:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9ff6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ffa:	701a      	strb	r2, [r3, #0]
    9ffc:	f24a 53be 	movw	r3, #42430	; 0xa5be
    a000:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a004:	781a      	ldrb	r2, [r3, #0]
    a006:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    a00a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a00e:	781b      	ldrb	r3, [r3, #0]
    a010:	4413      	add	r3, r2
    a012:	b2da      	uxtb	r2, r3
    a014:	f24a 53be 	movw	r3, #42430	; 0xa5be
    a018:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a01c:	701a      	strb	r2, [r3, #0]
    a01e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a022:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a026:	781b      	ldrb	r3, [r3, #0]
    a028:	3301      	adds	r3, #1
    a02a:	b2da      	uxtb	r2, r3
    a02c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a030:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a034:	701a      	strb	r2, [r3, #0]
    a036:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a03a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a03e:	781b      	ldrb	r3, [r3, #0]
    a040:	2bff      	cmp	r3, #255	; 0xff
    a042:	d10f      	bne.n	a064 <send_climb+0x55c>
    a044:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a048:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a04c:	2200      	movs	r2, #0
    a04e:	701a      	strb	r2, [r3, #0]
    a050:	e008      	b.n	a064 <send_climb+0x55c>
    a052:	bf00      	nop
    a054:	2000a7ed 	.word	0x2000a7ed
    a058:	2000a801 	.word	0x2000a801
    a05c:	2000a802 	.word	0x2000a802
    a060:	2000a803 	.word	0x2000a803
    a064:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a068:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a06c:	781b      	ldrb	r3, [r3, #0]
    a06e:	461a      	mov	r2, r3
    a070:	f64a 0308 	movw	r3, #43016	; 0xa808
    a074:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a078:	7859      	ldrb	r1, [r3, #1]
    a07a:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    a07e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a082:	5499      	strb	r1, [r3, r2]
    a084:	4bd1      	ldr	r3, [pc, #836]	; (a3cc <send_climb+0x8c4>)
    a086:	781a      	ldrb	r2, [r3, #0]
    a088:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    a08c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a090:	781b      	ldrb	r3, [r3, #0]
    a092:	4413      	add	r3, r2
    a094:	b2da      	uxtb	r2, r3
    a096:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    a09a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a09e:	701a      	strb	r2, [r3, #0]
    a0a0:	f24a 53be 	movw	r3, #42430	; 0xa5be
    a0a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0a8:	781a      	ldrb	r2, [r3, #0]
    a0aa:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    a0ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0b2:	781b      	ldrb	r3, [r3, #0]
    a0b4:	4413      	add	r3, r2
    a0b6:	b2da      	uxtb	r2, r3
    a0b8:	f24a 53be 	movw	r3, #42430	; 0xa5be
    a0bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0c0:	701a      	strb	r2, [r3, #0]
    a0c2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a0c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0ca:	781b      	ldrb	r3, [r3, #0]
    a0cc:	3301      	adds	r3, #1
    a0ce:	b2da      	uxtb	r2, r3
    a0d0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a0d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0d8:	701a      	strb	r2, [r3, #0]
    a0da:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a0de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0e2:	781b      	ldrb	r3, [r3, #0]
    a0e4:	2bff      	cmp	r3, #255	; 0xff
    a0e6:	d105      	bne.n	a0f4 <send_climb+0x5ec>
    a0e8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a0ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0f0:	2200      	movs	r2, #0
    a0f2:	701a      	strb	r2, [r3, #0]
    a0f4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a0f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0fc:	781b      	ldrb	r3, [r3, #0]
    a0fe:	461a      	mov	r2, r3
    a100:	f64a 0308 	movw	r3, #43016	; 0xa808
    a104:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a108:	7899      	ldrb	r1, [r3, #2]
    a10a:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    a10e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a112:	5499      	strb	r1, [r3, r2]
    a114:	4bae      	ldr	r3, [pc, #696]	; (a3d0 <send_climb+0x8c8>)
    a116:	781a      	ldrb	r2, [r3, #0]
    a118:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    a11c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a120:	781b      	ldrb	r3, [r3, #0]
    a122:	4413      	add	r3, r2
    a124:	b2da      	uxtb	r2, r3
    a126:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    a12a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a12e:	701a      	strb	r2, [r3, #0]
    a130:	f24a 53be 	movw	r3, #42430	; 0xa5be
    a134:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a138:	781a      	ldrb	r2, [r3, #0]
    a13a:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    a13e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a142:	781b      	ldrb	r3, [r3, #0]
    a144:	4413      	add	r3, r2
    a146:	b2da      	uxtb	r2, r3
    a148:	f24a 53be 	movw	r3, #42430	; 0xa5be
    a14c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a150:	701a      	strb	r2, [r3, #0]
    a152:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a156:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a15a:	781b      	ldrb	r3, [r3, #0]
    a15c:	3301      	adds	r3, #1
    a15e:	b2da      	uxtb	r2, r3
    a160:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a164:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a168:	701a      	strb	r2, [r3, #0]
    a16a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a16e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a172:	781b      	ldrb	r3, [r3, #0]
    a174:	2bff      	cmp	r3, #255	; 0xff
    a176:	d105      	bne.n	a184 <send_climb+0x67c>
    a178:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a17c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a180:	2200      	movs	r2, #0
    a182:	701a      	strb	r2, [r3, #0]
    a184:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a188:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a18c:	781b      	ldrb	r3, [r3, #0]
    a18e:	461a      	mov	r2, r3
    a190:	f64a 0308 	movw	r3, #43016	; 0xa808
    a194:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a198:	78d9      	ldrb	r1, [r3, #3]
    a19a:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    a19e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1a2:	5499      	strb	r1, [r3, r2]
    a1a4:	4b8b      	ldr	r3, [pc, #556]	; (a3d4 <send_climb+0x8cc>)
    a1a6:	781a      	ldrb	r2, [r3, #0]
    a1a8:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    a1ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1b0:	781b      	ldrb	r3, [r3, #0]
    a1b2:	4413      	add	r3, r2
    a1b4:	b2da      	uxtb	r2, r3
    a1b6:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    a1ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1be:	701a      	strb	r2, [r3, #0]
    a1c0:	f24a 53be 	movw	r3, #42430	; 0xa5be
    a1c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1c8:	781a      	ldrb	r2, [r3, #0]
    a1ca:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    a1ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1d2:	781b      	ldrb	r3, [r3, #0]
    a1d4:	4413      	add	r3, r2
    a1d6:	b2da      	uxtb	r2, r3
    a1d8:	f24a 53be 	movw	r3, #42430	; 0xa5be
    a1dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1e0:	701a      	strb	r2, [r3, #0]
    a1e2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a1e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1ea:	781b      	ldrb	r3, [r3, #0]
    a1ec:	3301      	adds	r3, #1
    a1ee:	b2da      	uxtb	r2, r3
    a1f0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a1f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1f8:	701a      	strb	r2, [r3, #0]
    a1fa:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a1fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a202:	781b      	ldrb	r3, [r3, #0]
    a204:	2bff      	cmp	r3, #255	; 0xff
    a206:	d105      	bne.n	a214 <send_climb+0x70c>
    a208:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a20c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a210:	2200      	movs	r2, #0
    a212:	701a      	strb	r2, [r3, #0]
    a214:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a218:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a21c:	781b      	ldrb	r3, [r3, #0]
    a21e:	461a      	mov	r2, r3
    a220:	f247 337c 	movw	r3, #29564	; 0x737c
    a224:	f2c0 0301 	movt	r3, #1
    a228:	7819      	ldrb	r1, [r3, #0]
    a22a:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    a22e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a232:	5499      	strb	r1, [r3, r2]
    a234:	f247 337c 	movw	r3, #29564	; 0x737c
    a238:	f2c0 0301 	movt	r3, #1
    a23c:	781a      	ldrb	r2, [r3, #0]
    a23e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    a242:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a246:	781b      	ldrb	r3, [r3, #0]
    a248:	4413      	add	r3, r2
    a24a:	b2da      	uxtb	r2, r3
    a24c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    a250:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a254:	701a      	strb	r2, [r3, #0]
    a256:	f24a 53be 	movw	r3, #42430	; 0xa5be
    a25a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a25e:	781a      	ldrb	r2, [r3, #0]
    a260:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    a264:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a268:	781b      	ldrb	r3, [r3, #0]
    a26a:	4413      	add	r3, r2
    a26c:	b2da      	uxtb	r2, r3
    a26e:	f24a 53be 	movw	r3, #42430	; 0xa5be
    a272:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a276:	701a      	strb	r2, [r3, #0]
    a278:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a27c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a280:	781b      	ldrb	r3, [r3, #0]
    a282:	3301      	adds	r3, #1
    a284:	b2da      	uxtb	r2, r3
    a286:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a28a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a28e:	701a      	strb	r2, [r3, #0]
    a290:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a294:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a298:	781b      	ldrb	r3, [r3, #0]
    a29a:	2bff      	cmp	r3, #255	; 0xff
    a29c:	d105      	bne.n	a2aa <send_climb+0x7a2>
    a29e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a2a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2a6:	2200      	movs	r2, #0
    a2a8:	701a      	strb	r2, [r3, #0]
    a2aa:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a2ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2b2:	781b      	ldrb	r3, [r3, #0]
    a2b4:	461a      	mov	r2, r3
    a2b6:	f247 337c 	movw	r3, #29564	; 0x737c
    a2ba:	f2c0 0301 	movt	r3, #1
    a2be:	7859      	ldrb	r1, [r3, #1]
    a2c0:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    a2c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2c8:	5499      	strb	r1, [r3, r2]
    a2ca:	4b43      	ldr	r3, [pc, #268]	; (a3d8 <send_climb+0x8d0>)
    a2cc:	781a      	ldrb	r2, [r3, #0]
    a2ce:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    a2d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2d6:	781b      	ldrb	r3, [r3, #0]
    a2d8:	4413      	add	r3, r2
    a2da:	b2da      	uxtb	r2, r3
    a2dc:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    a2e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2e4:	701a      	strb	r2, [r3, #0]
    a2e6:	f24a 53be 	movw	r3, #42430	; 0xa5be
    a2ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2ee:	781a      	ldrb	r2, [r3, #0]
    a2f0:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    a2f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2f8:	781b      	ldrb	r3, [r3, #0]
    a2fa:	4413      	add	r3, r2
    a2fc:	b2da      	uxtb	r2, r3
    a2fe:	f24a 53be 	movw	r3, #42430	; 0xa5be
    a302:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a306:	701a      	strb	r2, [r3, #0]
    a308:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a30c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a310:	781b      	ldrb	r3, [r3, #0]
    a312:	3301      	adds	r3, #1
    a314:	b2da      	uxtb	r2, r3
    a316:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a31a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a31e:	701a      	strb	r2, [r3, #0]
    a320:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a324:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a328:	781b      	ldrb	r3, [r3, #0]
    a32a:	2bff      	cmp	r3, #255	; 0xff
    a32c:	d105      	bne.n	a33a <send_climb+0x832>
    a32e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a332:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a336:	2200      	movs	r2, #0
    a338:	701a      	strb	r2, [r3, #0]
    a33a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a33e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a342:	781b      	ldrb	r3, [r3, #0]
    a344:	461a      	mov	r2, r3
    a346:	f247 337c 	movw	r3, #29564	; 0x737c
    a34a:	f2c0 0301 	movt	r3, #1
    a34e:	7899      	ldrb	r1, [r3, #2]
    a350:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    a354:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a358:	5499      	strb	r1, [r3, r2]
    a35a:	4b20      	ldr	r3, [pc, #128]	; (a3dc <send_climb+0x8d4>)
    a35c:	781a      	ldrb	r2, [r3, #0]
    a35e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    a362:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a366:	781b      	ldrb	r3, [r3, #0]
    a368:	4413      	add	r3, r2
    a36a:	b2da      	uxtb	r2, r3
    a36c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    a370:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a374:	701a      	strb	r2, [r3, #0]
    a376:	f24a 53be 	movw	r3, #42430	; 0xa5be
    a37a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a37e:	781a      	ldrb	r2, [r3, #0]
    a380:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    a384:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a388:	781b      	ldrb	r3, [r3, #0]
    a38a:	4413      	add	r3, r2
    a38c:	b2da      	uxtb	r2, r3
    a38e:	f24a 53be 	movw	r3, #42430	; 0xa5be
    a392:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a396:	701a      	strb	r2, [r3, #0]
    a398:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a39c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3a0:	781b      	ldrb	r3, [r3, #0]
    a3a2:	3301      	adds	r3, #1
    a3a4:	b2da      	uxtb	r2, r3
    a3a6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a3aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3ae:	701a      	strb	r2, [r3, #0]
    a3b0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a3b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3b8:	781b      	ldrb	r3, [r3, #0]
    a3ba:	2bff      	cmp	r3, #255	; 0xff
    a3bc:	d110      	bne.n	a3e0 <send_climb+0x8d8>
    a3be:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a3c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3c6:	2200      	movs	r2, #0
    a3c8:	701a      	strb	r2, [r3, #0]
    a3ca:	e009      	b.n	a3e0 <send_climb+0x8d8>
    a3cc:	2000a809 	.word	0x2000a809
    a3d0:	2000a80a 	.word	0x2000a80a
    a3d4:	2000a80b 	.word	0x2000a80b
    a3d8:	0001737d 	.word	0x0001737d
    a3dc:	0001737e 	.word	0x0001737e
    a3e0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a3e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3e8:	781b      	ldrb	r3, [r3, #0]
    a3ea:	461a      	mov	r2, r3
    a3ec:	f247 337c 	movw	r3, #29564	; 0x737c
    a3f0:	f2c0 0301 	movt	r3, #1
    a3f4:	78d9      	ldrb	r1, [r3, #3]
    a3f6:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    a3fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3fe:	5499      	strb	r1, [r3, r2]
    a400:	4b79      	ldr	r3, [pc, #484]	; (a5e8 <send_climb+0xae0>)
    a402:	781a      	ldrb	r2, [r3, #0]
    a404:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    a408:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a40c:	781b      	ldrb	r3, [r3, #0]
    a40e:	4413      	add	r3, r2
    a410:	b2da      	uxtb	r2, r3
    a412:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    a416:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a41a:	701a      	strb	r2, [r3, #0]
    a41c:	f24a 53be 	movw	r3, #42430	; 0xa5be
    a420:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a424:	781a      	ldrb	r2, [r3, #0]
    a426:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    a42a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a42e:	781b      	ldrb	r3, [r3, #0]
    a430:	4413      	add	r3, r2
    a432:	b2da      	uxtb	r2, r3
    a434:	f24a 53be 	movw	r3, #42430	; 0xa5be
    a438:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a43c:	701a      	strb	r2, [r3, #0]
    a43e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a442:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a446:	781b      	ldrb	r3, [r3, #0]
    a448:	3301      	adds	r3, #1
    a44a:	b2da      	uxtb	r2, r3
    a44c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a450:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a454:	701a      	strb	r2, [r3, #0]
    a456:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a45a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a45e:	781b      	ldrb	r3, [r3, #0]
    a460:	2bff      	cmp	r3, #255	; 0xff
    a462:	d105      	bne.n	a470 <send_climb+0x968>
    a464:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a468:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a46c:	2200      	movs	r2, #0
    a46e:	701a      	strb	r2, [r3, #0]
    a470:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a474:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a478:	781b      	ldrb	r3, [r3, #0]
    a47a:	461a      	mov	r2, r3
    a47c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    a480:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a484:	7819      	ldrb	r1, [r3, #0]
    a486:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    a48a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a48e:	5499      	strb	r1, [r3, r2]
    a490:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a494:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a498:	781b      	ldrb	r3, [r3, #0]
    a49a:	3301      	adds	r3, #1
    a49c:	b2da      	uxtb	r2, r3
    a49e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a4a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4a6:	701a      	strb	r2, [r3, #0]
    a4a8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a4ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4b0:	781b      	ldrb	r3, [r3, #0]
    a4b2:	2bff      	cmp	r3, #255	; 0xff
    a4b4:	d105      	bne.n	a4c2 <send_climb+0x9ba>
    a4b6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a4ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4be:	2200      	movs	r2, #0
    a4c0:	701a      	strb	r2, [r3, #0]
    a4c2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a4c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4ca:	781b      	ldrb	r3, [r3, #0]
    a4cc:	461a      	mov	r2, r3
    a4ce:	f24a 53be 	movw	r3, #42430	; 0xa5be
    a4d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4d6:	7819      	ldrb	r1, [r3, #0]
    a4d8:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    a4dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4e0:	5499      	strb	r1, [r3, r2]
    a4e2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a4e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4ea:	781b      	ldrb	r3, [r3, #0]
    a4ec:	3301      	adds	r3, #1
    a4ee:	b2da      	uxtb	r2, r3
    a4f0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a4f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4f8:	701a      	strb	r2, [r3, #0]
    a4fa:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a4fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a502:	781b      	ldrb	r3, [r3, #0]
    a504:	2bff      	cmp	r3, #255	; 0xff
    a506:	d105      	bne.n	a514 <send_climb+0xa0c>
    a508:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a50c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a510:	2200      	movs	r2, #0
    a512:	701a      	strb	r2, [r3, #0]
    a514:	f242 0339 	movw	r3, #8249	; 0x2039
    a518:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a51c:	781b      	ldrb	r3, [r3, #0]
    a51e:	b2db      	uxtb	r3, r3
    a520:	f003 0310 	and.w	r3, r3, #16
    a524:	2b00      	cmp	r3, #0
    a526:	d15a      	bne.n	a5de <send_climb+0xad6>
    a528:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    a52c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a530:	781b      	ldrb	r3, [r3, #0]
    a532:	b2db      	uxtb	r3, r3
    a534:	461a      	mov	r2, r3
    a536:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    a53a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a53e:	5c9a      	ldrb	r2, [r3, r2]
    a540:	f24a 53bb 	movw	r3, #42427	; 0xa5bb
    a544:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a548:	701a      	strb	r2, [r3, #0]
    a54a:	f24a 53bc 	movw	r3, #42428	; 0xa5bc
    a54e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a552:	2200      	movs	r2, #0
    a554:	701a      	strb	r2, [r3, #0]
    a556:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    a55a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a55e:	781b      	ldrb	r3, [r3, #0]
    a560:	b2db      	uxtb	r3, r3
    a562:	3301      	adds	r3, #1
    a564:	b2da      	uxtb	r2, r3
    a566:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    a56a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a56e:	701a      	strb	r2, [r3, #0]
    a570:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    a574:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a578:	781b      	ldrb	r3, [r3, #0]
    a57a:	b2db      	uxtb	r3, r3
    a57c:	2bff      	cmp	r3, #255	; 0xff
    a57e:	d105      	bne.n	a58c <send_climb+0xa84>
    a580:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    a584:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a588:	2200      	movs	r2, #0
    a58a:	701a      	strb	r2, [r3, #0]
    a58c:	f242 0338 	movw	r3, #8248	; 0x2038
    a590:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a594:	f242 0238 	movw	r2, #8248	; 0x2038
    a598:	f2c2 0200 	movt	r2, #8192	; 0x2000
    a59c:	7812      	ldrb	r2, [r2, #0]
    a59e:	b2d2      	uxtb	r2, r2
    a5a0:	f042 0201 	orr.w	r2, r2, #1
    a5a4:	b2d2      	uxtb	r2, r2
    a5a6:	701a      	strb	r2, [r3, #0]
    a5a8:	f242 0339 	movw	r3, #8249	; 0x2039
    a5ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5b0:	f242 0239 	movw	r2, #8249	; 0x2039
    a5b4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    a5b8:	7812      	ldrb	r2, [r2, #0]
    a5ba:	b2d2      	uxtb	r2, r2
    a5bc:	f042 0210 	orr.w	r2, r2, #16
    a5c0:	b2d2      	uxtb	r2, r2
    a5c2:	701a      	strb	r2, [r3, #0]
    a5c4:	e00b      	b.n	a5de <send_climb+0xad6>
    a5c6:	f24a 43b8 	movw	r3, #42168	; 0xa4b8
    a5ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5ce:	781b      	ldrb	r3, [r3, #0]
    a5d0:	3301      	adds	r3, #1
    a5d2:	b2da      	uxtb	r2, r3
    a5d4:	f24a 43b8 	movw	r3, #42168	; 0xa4b8
    a5d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5dc:	701a      	strb	r2, [r3, #0]
}
    a5de:	46bd      	mov	sp, r7
    a5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    a5e4:	4770      	bx	lr
    a5e6:	bf00      	nop
    a5e8:	0001737f 	.word	0x0001737f

0000a5ec <send_mode>:
void send_mode(void){  //5000ms
    a5ec:	b480      	push	{r7}
    a5ee:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 50 == 9) PERIODIC_SEND_PPRZ_MODE();}
    a5f0:	f24a 43b1 	movw	r3, #42161	; 0xa4b1
    a5f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5f8:	781a      	ldrb	r2, [r3, #0]
    a5fa:	f248 531f 	movw	r3, #34079	; 0x851f
    a5fe:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    a602:	fba3 1302 	umull	r1, r3, r3, r2
    a606:	091b      	lsrs	r3, r3, #4
    a608:	2132      	movs	r1, #50	; 0x32
    a60a:	fb01 f303 	mul.w	r3, r1, r3
    a60e:	1ad3      	subs	r3, r2, r3
    a610:	b2db      	uxtb	r3, r3
    a612:	2b09      	cmp	r3, #9
    a614:	f040 82ba 	bne.w	ab8c <send_mode+0x5a0>
    a618:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a61c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a620:	781a      	ldrb	r2, [r3, #0]
    a622:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    a626:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a62a:	781b      	ldrb	r3, [r3, #0]
    a62c:	b2db      	uxtb	r3, r3
    a62e:	429a      	cmp	r2, r3
    a630:	d313      	bcc.n	a65a <send_mode+0x6e>
    a632:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    a636:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a63a:	781b      	ldrb	r3, [r3, #0]
    a63c:	b2db      	uxtb	r3, r3
    a63e:	461a      	mov	r2, r3
    a640:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a644:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a648:	781b      	ldrb	r3, [r3, #0]
    a64a:	1ad3      	subs	r3, r2, r3
    a64c:	33ff      	adds	r3, #255	; 0xff
    a64e:	2b09      	cmp	r3, #9
    a650:	bfd4      	ite	le
    a652:	2300      	movle	r3, #0
    a654:	2301      	movgt	r3, #1
    a656:	b2db      	uxtb	r3, r3
    a658:	e011      	b.n	a67e <send_mode+0x92>
    a65a:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    a65e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a662:	781b      	ldrb	r3, [r3, #0]
    a664:	b2db      	uxtb	r3, r3
    a666:	461a      	mov	r2, r3
    a668:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a66c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a670:	781b      	ldrb	r3, [r3, #0]
    a672:	1ad3      	subs	r3, r2, r3
    a674:	2b09      	cmp	r3, #9
    a676:	bfd4      	ite	le
    a678:	2300      	movle	r3, #0
    a67a:	2301      	movgt	r3, #1
    a67c:	b2db      	uxtb	r3, r3
    a67e:	2b00      	cmp	r3, #0
    a680:	f000 8278 	beq.w	ab74 <send_mode+0x588>
    a684:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a688:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a68c:	781b      	ldrb	r3, [r3, #0]
    a68e:	461a      	mov	r2, r3
    a690:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    a694:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a698:	2105      	movs	r1, #5
    a69a:	5499      	strb	r1, [r3, r2]
    a69c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a6a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6a4:	781b      	ldrb	r3, [r3, #0]
    a6a6:	3301      	adds	r3, #1
    a6a8:	b2da      	uxtb	r2, r3
    a6aa:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a6ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6b2:	701a      	strb	r2, [r3, #0]
    a6b4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a6b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6bc:	781b      	ldrb	r3, [r3, #0]
    a6be:	2bff      	cmp	r3, #255	; 0xff
    a6c0:	d105      	bne.n	a6ce <send_mode+0xe2>
    a6c2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a6c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6ca:	2200      	movs	r2, #0
    a6cc:	701a      	strb	r2, [r3, #0]
    a6ce:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a6d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6d6:	781b      	ldrb	r3, [r3, #0]
    a6d8:	461a      	mov	r2, r3
    a6da:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    a6de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6e2:	210b      	movs	r1, #11
    a6e4:	5499      	strb	r1, [r3, r2]
    a6e6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a6ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6ee:	781b      	ldrb	r3, [r3, #0]
    a6f0:	3301      	adds	r3, #1
    a6f2:	b2da      	uxtb	r2, r3
    a6f4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a6f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6fc:	701a      	strb	r2, [r3, #0]
    a6fe:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a702:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a706:	781b      	ldrb	r3, [r3, #0]
    a708:	2bff      	cmp	r3, #255	; 0xff
    a70a:	d105      	bne.n	a718 <send_mode+0x12c>
    a70c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a710:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a714:	2200      	movs	r2, #0
    a716:	701a      	strb	r2, [r3, #0]
    a718:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    a71c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a720:	220b      	movs	r2, #11
    a722:	701a      	strb	r2, [r3, #0]
    a724:	f24a 53be 	movw	r3, #42430	; 0xa5be
    a728:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a72c:	220b      	movs	r2, #11
    a72e:	701a      	strb	r2, [r3, #0]
    a730:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a734:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a738:	781b      	ldrb	r3, [r3, #0]
    a73a:	461a      	mov	r2, r3
    a73c:	f24a 439c 	movw	r3, #42140	; 0xa49c
    a740:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a744:	7819      	ldrb	r1, [r3, #0]
    a746:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    a74a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a74e:	5499      	strb	r1, [r3, r2]
    a750:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    a754:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a758:	781a      	ldrb	r2, [r3, #0]
    a75a:	f24a 439c 	movw	r3, #42140	; 0xa49c
    a75e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a762:	781b      	ldrb	r3, [r3, #0]
    a764:	4413      	add	r3, r2
    a766:	b2da      	uxtb	r2, r3
    a768:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    a76c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a770:	701a      	strb	r2, [r3, #0]
    a772:	f24a 53be 	movw	r3, #42430	; 0xa5be
    a776:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a77a:	781a      	ldrb	r2, [r3, #0]
    a77c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    a780:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a784:	781b      	ldrb	r3, [r3, #0]
    a786:	4413      	add	r3, r2
    a788:	b2da      	uxtb	r2, r3
    a78a:	f24a 53be 	movw	r3, #42430	; 0xa5be
    a78e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a792:	701a      	strb	r2, [r3, #0]
    a794:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a798:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a79c:	781b      	ldrb	r3, [r3, #0]
    a79e:	3301      	adds	r3, #1
    a7a0:	b2da      	uxtb	r2, r3
    a7a2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a7a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7aa:	701a      	strb	r2, [r3, #0]
    a7ac:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a7b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7b4:	781b      	ldrb	r3, [r3, #0]
    a7b6:	2bff      	cmp	r3, #255	; 0xff
    a7b8:	d105      	bne.n	a7c6 <send_mode+0x1da>
    a7ba:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a7be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7c2:	2200      	movs	r2, #0
    a7c4:	701a      	strb	r2, [r3, #0]
    a7c6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a7ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7ce:	781b      	ldrb	r3, [r3, #0]
    a7d0:	461a      	mov	r2, r3
    a7d2:	f24a 439d 	movw	r3, #42141	; 0xa49d
    a7d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7da:	7819      	ldrb	r1, [r3, #0]
    a7dc:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    a7e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7e4:	5499      	strb	r1, [r3, r2]
    a7e6:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    a7ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7ee:	781a      	ldrb	r2, [r3, #0]
    a7f0:	f24a 439d 	movw	r3, #42141	; 0xa49d
    a7f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7f8:	781b      	ldrb	r3, [r3, #0]
    a7fa:	4413      	add	r3, r2
    a7fc:	b2da      	uxtb	r2, r3
    a7fe:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    a802:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a806:	701a      	strb	r2, [r3, #0]
    a808:	f24a 53be 	movw	r3, #42430	; 0xa5be
    a80c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a810:	781a      	ldrb	r2, [r3, #0]
    a812:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    a816:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a81a:	781b      	ldrb	r3, [r3, #0]
    a81c:	4413      	add	r3, r2
    a81e:	b2da      	uxtb	r2, r3
    a820:	f24a 53be 	movw	r3, #42430	; 0xa5be
    a824:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a828:	701a      	strb	r2, [r3, #0]
    a82a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a82e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a832:	781b      	ldrb	r3, [r3, #0]
    a834:	3301      	adds	r3, #1
    a836:	b2da      	uxtb	r2, r3
    a838:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a83c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a840:	701a      	strb	r2, [r3, #0]
    a842:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a846:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a84a:	781b      	ldrb	r3, [r3, #0]
    a84c:	2bff      	cmp	r3, #255	; 0xff
    a84e:	d105      	bne.n	a85c <send_mode+0x270>
    a850:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a854:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a858:	2200      	movs	r2, #0
    a85a:	701a      	strb	r2, [r3, #0]
    a85c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a860:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a864:	781b      	ldrb	r3, [r3, #0]
    a866:	461a      	mov	r2, r3
    a868:	f64a 23cc 	movw	r3, #43724	; 0xaacc
    a86c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a870:	7819      	ldrb	r1, [r3, #0]
    a872:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    a876:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a87a:	5499      	strb	r1, [r3, r2]
    a87c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    a880:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a884:	781a      	ldrb	r2, [r3, #0]
    a886:	f64a 23cc 	movw	r3, #43724	; 0xaacc
    a88a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a88e:	781b      	ldrb	r3, [r3, #0]
    a890:	4413      	add	r3, r2
    a892:	b2da      	uxtb	r2, r3
    a894:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    a898:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a89c:	701a      	strb	r2, [r3, #0]
    a89e:	f24a 53be 	movw	r3, #42430	; 0xa5be
    a8a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8a6:	781a      	ldrb	r2, [r3, #0]
    a8a8:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    a8ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8b0:	781b      	ldrb	r3, [r3, #0]
    a8b2:	4413      	add	r3, r2
    a8b4:	b2da      	uxtb	r2, r3
    a8b6:	f24a 53be 	movw	r3, #42430	; 0xa5be
    a8ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8be:	701a      	strb	r2, [r3, #0]
    a8c0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a8c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8c8:	781b      	ldrb	r3, [r3, #0]
    a8ca:	3301      	adds	r3, #1
    a8cc:	b2da      	uxtb	r2, r3
    a8ce:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a8d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8d6:	701a      	strb	r2, [r3, #0]
    a8d8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a8dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8e0:	781b      	ldrb	r3, [r3, #0]
    a8e2:	2bff      	cmp	r3, #255	; 0xff
    a8e4:	d105      	bne.n	a8f2 <send_mode+0x306>
    a8e6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a8ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8ee:	2200      	movs	r2, #0
    a8f0:	701a      	strb	r2, [r3, #0]
    a8f2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a8f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8fa:	781b      	ldrb	r3, [r3, #0]
    a8fc:	461a      	mov	r2, r3
    a8fe:	f24a 43a3 	movw	r3, #42147	; 0xa4a3
    a902:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a906:	7819      	ldrb	r1, [r3, #0]
    a908:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    a90c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a910:	5499      	strb	r1, [r3, r2]
    a912:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    a916:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a91a:	781a      	ldrb	r2, [r3, #0]
    a91c:	f24a 43a3 	movw	r3, #42147	; 0xa4a3
    a920:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a924:	781b      	ldrb	r3, [r3, #0]
    a926:	4413      	add	r3, r2
    a928:	b2da      	uxtb	r2, r3
    a92a:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    a92e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a932:	701a      	strb	r2, [r3, #0]
    a934:	f24a 53be 	movw	r3, #42430	; 0xa5be
    a938:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a93c:	781a      	ldrb	r2, [r3, #0]
    a93e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    a942:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a946:	781b      	ldrb	r3, [r3, #0]
    a948:	4413      	add	r3, r2
    a94a:	b2da      	uxtb	r2, r3
    a94c:	f24a 53be 	movw	r3, #42430	; 0xa5be
    a950:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a954:	701a      	strb	r2, [r3, #0]
    a956:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a95a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a95e:	781b      	ldrb	r3, [r3, #0]
    a960:	3301      	adds	r3, #1
    a962:	b2da      	uxtb	r2, r3
    a964:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a968:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a96c:	701a      	strb	r2, [r3, #0]
    a96e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a972:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a976:	781b      	ldrb	r3, [r3, #0]
    a978:	2bff      	cmp	r3, #255	; 0xff
    a97a:	d105      	bne.n	a988 <send_mode+0x39c>
    a97c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a980:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a984:	2200      	movs	r2, #0
    a986:	701a      	strb	r2, [r3, #0]
    a988:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a98c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a990:	781b      	ldrb	r3, [r3, #0]
    a992:	461a      	mov	r2, r3
    a994:	f240 1304 	movw	r3, #260	; 0x104
    a998:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a99c:	7819      	ldrb	r1, [r3, #0]
    a99e:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    a9a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9a6:	5499      	strb	r1, [r3, r2]
    a9a8:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    a9ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9b0:	781a      	ldrb	r2, [r3, #0]
    a9b2:	f240 1304 	movw	r3, #260	; 0x104
    a9b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9ba:	781b      	ldrb	r3, [r3, #0]
    a9bc:	4413      	add	r3, r2
    a9be:	b2da      	uxtb	r2, r3
    a9c0:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    a9c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9c8:	701a      	strb	r2, [r3, #0]
    a9ca:	f24a 53be 	movw	r3, #42430	; 0xa5be
    a9ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9d2:	781a      	ldrb	r2, [r3, #0]
    a9d4:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    a9d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9dc:	781b      	ldrb	r3, [r3, #0]
    a9de:	4413      	add	r3, r2
    a9e0:	b2da      	uxtb	r2, r3
    a9e2:	f24a 53be 	movw	r3, #42430	; 0xa5be
    a9e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9ea:	701a      	strb	r2, [r3, #0]
    a9ec:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a9f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9f4:	781b      	ldrb	r3, [r3, #0]
    a9f6:	3301      	adds	r3, #1
    a9f8:	b2da      	uxtb	r2, r3
    a9fa:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a9fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa02:	701a      	strb	r2, [r3, #0]
    aa04:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    aa08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa0c:	781b      	ldrb	r3, [r3, #0]
    aa0e:	2bff      	cmp	r3, #255	; 0xff
    aa10:	d105      	bne.n	aa1e <send_mode+0x432>
    aa12:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    aa16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa1a:	2200      	movs	r2, #0
    aa1c:	701a      	strb	r2, [r3, #0]
    aa1e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    aa22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa26:	781b      	ldrb	r3, [r3, #0]
    aa28:	461a      	mov	r2, r3
    aa2a:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    aa2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa32:	7819      	ldrb	r1, [r3, #0]
    aa34:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    aa38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa3c:	5499      	strb	r1, [r3, r2]
    aa3e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    aa42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa46:	781b      	ldrb	r3, [r3, #0]
    aa48:	3301      	adds	r3, #1
    aa4a:	b2da      	uxtb	r2, r3
    aa4c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    aa50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa54:	701a      	strb	r2, [r3, #0]
    aa56:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    aa5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa5e:	781b      	ldrb	r3, [r3, #0]
    aa60:	2bff      	cmp	r3, #255	; 0xff
    aa62:	d105      	bne.n	aa70 <send_mode+0x484>
    aa64:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    aa68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa6c:	2200      	movs	r2, #0
    aa6e:	701a      	strb	r2, [r3, #0]
    aa70:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    aa74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa78:	781b      	ldrb	r3, [r3, #0]
    aa7a:	461a      	mov	r2, r3
    aa7c:	f24a 53be 	movw	r3, #42430	; 0xa5be
    aa80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa84:	7819      	ldrb	r1, [r3, #0]
    aa86:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    aa8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa8e:	5499      	strb	r1, [r3, r2]
    aa90:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    aa94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa98:	781b      	ldrb	r3, [r3, #0]
    aa9a:	3301      	adds	r3, #1
    aa9c:	b2da      	uxtb	r2, r3
    aa9e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    aaa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aaa6:	701a      	strb	r2, [r3, #0]
    aaa8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    aaac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aab0:	781b      	ldrb	r3, [r3, #0]
    aab2:	2bff      	cmp	r3, #255	; 0xff
    aab4:	d105      	bne.n	aac2 <send_mode+0x4d6>
    aab6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    aaba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aabe:	2200      	movs	r2, #0
    aac0:	701a      	strb	r2, [r3, #0]
    aac2:	f242 0339 	movw	r3, #8249	; 0x2039
    aac6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aaca:	781b      	ldrb	r3, [r3, #0]
    aacc:	b2db      	uxtb	r3, r3
    aace:	f003 0310 	and.w	r3, r3, #16
    aad2:	2b00      	cmp	r3, #0
    aad4:	d15a      	bne.n	ab8c <send_mode+0x5a0>
    aad6:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    aada:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aade:	781b      	ldrb	r3, [r3, #0]
    aae0:	b2db      	uxtb	r3, r3
    aae2:	461a      	mov	r2, r3
    aae4:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    aae8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aaec:	5c9a      	ldrb	r2, [r3, r2]
    aaee:	f24a 53bb 	movw	r3, #42427	; 0xa5bb
    aaf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aaf6:	701a      	strb	r2, [r3, #0]
    aaf8:	f24a 53bc 	movw	r3, #42428	; 0xa5bc
    aafc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab00:	2200      	movs	r2, #0
    ab02:	701a      	strb	r2, [r3, #0]
    ab04:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    ab08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab0c:	781b      	ldrb	r3, [r3, #0]
    ab0e:	b2db      	uxtb	r3, r3
    ab10:	3301      	adds	r3, #1
    ab12:	b2da      	uxtb	r2, r3
    ab14:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    ab18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab1c:	701a      	strb	r2, [r3, #0]
    ab1e:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    ab22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab26:	781b      	ldrb	r3, [r3, #0]
    ab28:	b2db      	uxtb	r3, r3
    ab2a:	2bff      	cmp	r3, #255	; 0xff
    ab2c:	d105      	bne.n	ab3a <send_mode+0x54e>
    ab2e:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    ab32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab36:	2200      	movs	r2, #0
    ab38:	701a      	strb	r2, [r3, #0]
    ab3a:	f242 0338 	movw	r3, #8248	; 0x2038
    ab3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab42:	f242 0238 	movw	r2, #8248	; 0x2038
    ab46:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ab4a:	7812      	ldrb	r2, [r2, #0]
    ab4c:	b2d2      	uxtb	r2, r2
    ab4e:	f042 0201 	orr.w	r2, r2, #1
    ab52:	b2d2      	uxtb	r2, r2
    ab54:	701a      	strb	r2, [r3, #0]
    ab56:	f242 0339 	movw	r3, #8249	; 0x2039
    ab5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab5e:	f242 0239 	movw	r2, #8249	; 0x2039
    ab62:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ab66:	7812      	ldrb	r2, [r2, #0]
    ab68:	b2d2      	uxtb	r2, r2
    ab6a:	f042 0210 	orr.w	r2, r2, #16
    ab6e:	b2d2      	uxtb	r2, r2
    ab70:	701a      	strb	r2, [r3, #0]
    ab72:	e00b      	b.n	ab8c <send_mode+0x5a0>
    ab74:	f24a 43b8 	movw	r3, #42168	; 0xa4b8
    ab78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab7c:	781b      	ldrb	r3, [r3, #0]
    ab7e:	3301      	adds	r3, #1
    ab80:	b2da      	uxtb	r2, r3
    ab82:	f24a 43b8 	movw	r3, #42168	; 0xa4b8
    ab86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab8a:	701a      	strb	r2, [r3, #0]
}
    ab8c:	46bd      	mov	sp, r7
    ab8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    ab92:	4770      	bx	lr

0000ab94 <send_debug>:
void send_debug(void){  //5000ms
    ab94:	b480      	push	{r7}
    ab96:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 50 == 29) PERIODIC_SEND_DEBUG();}
    ab98:	f24a 43b1 	movw	r3, #42161	; 0xa4b1
    ab9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aba0:	781a      	ldrb	r2, [r3, #0]
    aba2:	f248 531f 	movw	r3, #34079	; 0x851f
    aba6:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    abaa:	fba3 1302 	umull	r1, r3, r3, r2
    abae:	091b      	lsrs	r3, r3, #4
    abb0:	2132      	movs	r1, #50	; 0x32
    abb2:	fb01 f303 	mul.w	r3, r1, r3
    abb6:	1ad3      	subs	r3, r2, r3
    abb8:	b2db      	uxtb	r3, r3
    abba:	2b1d      	cmp	r3, #29
    abbc:	f040 82bb 	bne.w	b136 <send_debug+0x5a2>
    abc0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    abc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abc8:	781a      	ldrb	r2, [r3, #0]
    abca:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    abce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abd2:	781b      	ldrb	r3, [r3, #0]
    abd4:	b2db      	uxtb	r3, r3
    abd6:	429a      	cmp	r2, r3
    abd8:	d313      	bcc.n	ac02 <send_debug+0x6e>
    abda:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    abde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abe2:	781b      	ldrb	r3, [r3, #0]
    abe4:	b2db      	uxtb	r3, r3
    abe6:	461a      	mov	r2, r3
    abe8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    abec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abf0:	781b      	ldrb	r3, [r3, #0]
    abf2:	1ad3      	subs	r3, r2, r3
    abf4:	33ff      	adds	r3, #255	; 0xff
    abf6:	2b09      	cmp	r3, #9
    abf8:	bfd4      	ite	le
    abfa:	2300      	movle	r3, #0
    abfc:	2301      	movgt	r3, #1
    abfe:	b2db      	uxtb	r3, r3
    ac00:	e011      	b.n	ac26 <send_debug+0x92>
    ac02:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    ac06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac0a:	781b      	ldrb	r3, [r3, #0]
    ac0c:	b2db      	uxtb	r3, r3
    ac0e:	461a      	mov	r2, r3
    ac10:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ac14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac18:	781b      	ldrb	r3, [r3, #0]
    ac1a:	1ad3      	subs	r3, r2, r3
    ac1c:	2b09      	cmp	r3, #9
    ac1e:	bfd4      	ite	le
    ac20:	2300      	movle	r3, #0
    ac22:	2301      	movgt	r3, #1
    ac24:	b2db      	uxtb	r3, r3
    ac26:	2b00      	cmp	r3, #0
    ac28:	f000 8279 	beq.w	b11e <send_debug+0x58a>
    ac2c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ac30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac34:	781b      	ldrb	r3, [r3, #0]
    ac36:	461a      	mov	r2, r3
    ac38:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    ac3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac40:	2105      	movs	r1, #5
    ac42:	5499      	strb	r1, [r3, r2]
    ac44:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ac48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac4c:	781b      	ldrb	r3, [r3, #0]
    ac4e:	3301      	adds	r3, #1
    ac50:	b2da      	uxtb	r2, r3
    ac52:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ac56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac5a:	701a      	strb	r2, [r3, #0]
    ac5c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ac60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac64:	781b      	ldrb	r3, [r3, #0]
    ac66:	2bff      	cmp	r3, #255	; 0xff
    ac68:	d105      	bne.n	ac76 <send_debug+0xe2>
    ac6a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ac6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac72:	2200      	movs	r2, #0
    ac74:	701a      	strb	r2, [r3, #0]
    ac76:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ac7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac7e:	781b      	ldrb	r3, [r3, #0]
    ac80:	461a      	mov	r2, r3
    ac82:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    ac86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac8a:	210d      	movs	r1, #13
    ac8c:	5499      	strb	r1, [r3, r2]
    ac8e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ac92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac96:	781b      	ldrb	r3, [r3, #0]
    ac98:	3301      	adds	r3, #1
    ac9a:	b2da      	uxtb	r2, r3
    ac9c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    aca0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aca4:	701a      	strb	r2, [r3, #0]
    aca6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    acaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    acae:	781b      	ldrb	r3, [r3, #0]
    acb0:	2bff      	cmp	r3, #255	; 0xff
    acb2:	d105      	bne.n	acc0 <send_debug+0x12c>
    acb4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    acb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    acbc:	2200      	movs	r2, #0
    acbe:	701a      	strb	r2, [r3, #0]
    acc0:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    acc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    acc8:	220d      	movs	r2, #13
    acca:	701a      	strb	r2, [r3, #0]
    accc:	f24a 53be 	movw	r3, #42430	; 0xa5be
    acd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    acd4:	220d      	movs	r2, #13
    acd6:	701a      	strb	r2, [r3, #0]
    acd8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    acdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ace0:	781b      	ldrb	r3, [r3, #0]
    ace2:	461a      	mov	r2, r3
    ace4:	f24a 53ef 	movw	r3, #42479	; 0xa5ef
    ace8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    acec:	781b      	ldrb	r3, [r3, #0]
    acee:	b2d9      	uxtb	r1, r3
    acf0:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    acf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    acf8:	5499      	strb	r1, [r3, r2]
    acfa:	f24a 53ef 	movw	r3, #42479	; 0xa5ef
    acfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad02:	781a      	ldrb	r2, [r3, #0]
    ad04:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    ad08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad0c:	781b      	ldrb	r3, [r3, #0]
    ad0e:	4413      	add	r3, r2
    ad10:	b2da      	uxtb	r2, r3
    ad12:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    ad16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad1a:	701a      	strb	r2, [r3, #0]
    ad1c:	f24a 53be 	movw	r3, #42430	; 0xa5be
    ad20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad24:	781a      	ldrb	r2, [r3, #0]
    ad26:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    ad2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad2e:	781b      	ldrb	r3, [r3, #0]
    ad30:	4413      	add	r3, r2
    ad32:	b2da      	uxtb	r2, r3
    ad34:	f24a 53be 	movw	r3, #42430	; 0xa5be
    ad38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad3c:	701a      	strb	r2, [r3, #0]
    ad3e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ad42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad46:	781b      	ldrb	r3, [r3, #0]
    ad48:	3301      	adds	r3, #1
    ad4a:	b2da      	uxtb	r2, r3
    ad4c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ad50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad54:	701a      	strb	r2, [r3, #0]
    ad56:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ad5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad5e:	781b      	ldrb	r3, [r3, #0]
    ad60:	2bff      	cmp	r3, #255	; 0xff
    ad62:	d105      	bne.n	ad70 <send_debug+0x1dc>
    ad64:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ad68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad6c:	2200      	movs	r2, #0
    ad6e:	701a      	strb	r2, [r3, #0]
    ad70:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ad74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad78:	781b      	ldrb	r3, [r3, #0]
    ad7a:	461a      	mov	r2, r3
    ad7c:	f24a 53f0 	movw	r3, #42480	; 0xa5f0
    ad80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad84:	7819      	ldrb	r1, [r3, #0]
    ad86:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    ad8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad8e:	5499      	strb	r1, [r3, r2]
    ad90:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    ad94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad98:	781a      	ldrb	r2, [r3, #0]
    ad9a:	f24a 53f0 	movw	r3, #42480	; 0xa5f0
    ad9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ada2:	781b      	ldrb	r3, [r3, #0]
    ada4:	4413      	add	r3, r2
    ada6:	b2da      	uxtb	r2, r3
    ada8:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    adac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    adb0:	701a      	strb	r2, [r3, #0]
    adb2:	f24a 53be 	movw	r3, #42430	; 0xa5be
    adb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    adba:	781a      	ldrb	r2, [r3, #0]
    adbc:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    adc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    adc4:	781b      	ldrb	r3, [r3, #0]
    adc6:	4413      	add	r3, r2
    adc8:	b2da      	uxtb	r2, r3
    adca:	f24a 53be 	movw	r3, #42430	; 0xa5be
    adce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    add2:	701a      	strb	r2, [r3, #0]
    add4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    add8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    addc:	781b      	ldrb	r3, [r3, #0]
    adde:	3301      	adds	r3, #1
    ade0:	b2da      	uxtb	r2, r3
    ade2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ade6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    adea:	701a      	strb	r2, [r3, #0]
    adec:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    adf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    adf4:	781b      	ldrb	r3, [r3, #0]
    adf6:	2bff      	cmp	r3, #255	; 0xff
    adf8:	d105      	bne.n	ae06 <send_debug+0x272>
    adfa:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    adfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae02:	2200      	movs	r2, #0
    ae04:	701a      	strb	r2, [r3, #0]
    ae06:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ae0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae0e:	781b      	ldrb	r3, [r3, #0]
    ae10:	461a      	mov	r2, r3
    ae12:	f24a 43b8 	movw	r3, #42168	; 0xa4b8
    ae16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae1a:	7819      	ldrb	r1, [r3, #0]
    ae1c:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    ae20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae24:	5499      	strb	r1, [r3, r2]
    ae26:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    ae2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae2e:	781a      	ldrb	r2, [r3, #0]
    ae30:	f24a 43b8 	movw	r3, #42168	; 0xa4b8
    ae34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae38:	781b      	ldrb	r3, [r3, #0]
    ae3a:	4413      	add	r3, r2
    ae3c:	b2da      	uxtb	r2, r3
    ae3e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    ae42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae46:	701a      	strb	r2, [r3, #0]
    ae48:	f24a 53be 	movw	r3, #42430	; 0xa5be
    ae4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae50:	781a      	ldrb	r2, [r3, #0]
    ae52:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    ae56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae5a:	781b      	ldrb	r3, [r3, #0]
    ae5c:	4413      	add	r3, r2
    ae5e:	b2da      	uxtb	r2, r3
    ae60:	f24a 53be 	movw	r3, #42430	; 0xa5be
    ae64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae68:	701a      	strb	r2, [r3, #0]
    ae6a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ae6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae72:	781b      	ldrb	r3, [r3, #0]
    ae74:	3301      	adds	r3, #1
    ae76:	b2da      	uxtb	r2, r3
    ae78:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ae7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae80:	701a      	strb	r2, [r3, #0]
    ae82:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ae86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae8a:	781b      	ldrb	r3, [r3, #0]
    ae8c:	2bff      	cmp	r3, #255	; 0xff
    ae8e:	d105      	bne.n	ae9c <send_debug+0x308>
    ae90:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ae94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae98:	2200      	movs	r2, #0
    ae9a:	701a      	strb	r2, [r3, #0]
    ae9c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    aea0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aea4:	781b      	ldrb	r3, [r3, #0]
    aea6:	461a      	mov	r2, r3
    aea8:	f24a 7357 	movw	r3, #42839	; 0xa757
    aeac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aeb0:	7819      	ldrb	r1, [r3, #0]
    aeb2:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    aeb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aeba:	5499      	strb	r1, [r3, r2]
    aebc:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    aec0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aec4:	781a      	ldrb	r2, [r3, #0]
    aec6:	f24a 7357 	movw	r3, #42839	; 0xa757
    aeca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aece:	781b      	ldrb	r3, [r3, #0]
    aed0:	4413      	add	r3, r2
    aed2:	b2da      	uxtb	r2, r3
    aed4:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    aed8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aedc:	701a      	strb	r2, [r3, #0]
    aede:	f24a 53be 	movw	r3, #42430	; 0xa5be
    aee2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aee6:	781a      	ldrb	r2, [r3, #0]
    aee8:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    aeec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aef0:	781b      	ldrb	r3, [r3, #0]
    aef2:	4413      	add	r3, r2
    aef4:	b2da      	uxtb	r2, r3
    aef6:	f24a 53be 	movw	r3, #42430	; 0xa5be
    aefa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aefe:	701a      	strb	r2, [r3, #0]
    af00:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    af04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af08:	781b      	ldrb	r3, [r3, #0]
    af0a:	3301      	adds	r3, #1
    af0c:	b2da      	uxtb	r2, r3
    af0e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    af12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af16:	701a      	strb	r2, [r3, #0]
    af18:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    af1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af20:	781b      	ldrb	r3, [r3, #0]
    af22:	2bff      	cmp	r3, #255	; 0xff
    af24:	d105      	bne.n	af32 <send_debug+0x39e>
    af26:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    af2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af2e:	2200      	movs	r2, #0
    af30:	701a      	strb	r2, [r3, #0]
    af32:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    af36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af3a:	781b      	ldrb	r3, [r3, #0]
    af3c:	461a      	mov	r2, r3
    af3e:	f24a 43a4 	movw	r3, #42148	; 0xa4a4
    af42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af46:	7819      	ldrb	r1, [r3, #0]
    af48:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    af4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af50:	5499      	strb	r1, [r3, r2]
    af52:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    af56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af5a:	781a      	ldrb	r2, [r3, #0]
    af5c:	f24a 43a4 	movw	r3, #42148	; 0xa4a4
    af60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af64:	781b      	ldrb	r3, [r3, #0]
    af66:	4413      	add	r3, r2
    af68:	b2da      	uxtb	r2, r3
    af6a:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    af6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af72:	701a      	strb	r2, [r3, #0]
    af74:	f24a 53be 	movw	r3, #42430	; 0xa5be
    af78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af7c:	781a      	ldrb	r2, [r3, #0]
    af7e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    af82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af86:	781b      	ldrb	r3, [r3, #0]
    af88:	4413      	add	r3, r2
    af8a:	b2da      	uxtb	r2, r3
    af8c:	f24a 53be 	movw	r3, #42430	; 0xa5be
    af90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af94:	701a      	strb	r2, [r3, #0]
    af96:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    af9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af9e:	781b      	ldrb	r3, [r3, #0]
    afa0:	3301      	adds	r3, #1
    afa2:	b2da      	uxtb	r2, r3
    afa4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    afa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    afac:	701a      	strb	r2, [r3, #0]
    afae:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    afb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    afb6:	781b      	ldrb	r3, [r3, #0]
    afb8:	2bff      	cmp	r3, #255	; 0xff
    afba:	d105      	bne.n	afc8 <send_debug+0x434>
    afbc:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    afc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    afc4:	2200      	movs	r2, #0
    afc6:	701a      	strb	r2, [r3, #0]
    afc8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    afcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    afd0:	781b      	ldrb	r3, [r3, #0]
    afd2:	461a      	mov	r2, r3
    afd4:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    afd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    afdc:	7819      	ldrb	r1, [r3, #0]
    afde:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    afe2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    afe6:	5499      	strb	r1, [r3, r2]
    afe8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    afec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aff0:	781b      	ldrb	r3, [r3, #0]
    aff2:	3301      	adds	r3, #1
    aff4:	b2da      	uxtb	r2, r3
    aff6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    affa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    affe:	701a      	strb	r2, [r3, #0]
    b000:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b004:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b008:	781b      	ldrb	r3, [r3, #0]
    b00a:	2bff      	cmp	r3, #255	; 0xff
    b00c:	d105      	bne.n	b01a <send_debug+0x486>
    b00e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b012:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b016:	2200      	movs	r2, #0
    b018:	701a      	strb	r2, [r3, #0]
    b01a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b01e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b022:	781b      	ldrb	r3, [r3, #0]
    b024:	461a      	mov	r2, r3
    b026:	f24a 53be 	movw	r3, #42430	; 0xa5be
    b02a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b02e:	7819      	ldrb	r1, [r3, #0]
    b030:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    b034:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b038:	5499      	strb	r1, [r3, r2]
    b03a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b03e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b042:	781b      	ldrb	r3, [r3, #0]
    b044:	3301      	adds	r3, #1
    b046:	b2da      	uxtb	r2, r3
    b048:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b04c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b050:	701a      	strb	r2, [r3, #0]
    b052:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b056:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b05a:	781b      	ldrb	r3, [r3, #0]
    b05c:	2bff      	cmp	r3, #255	; 0xff
    b05e:	d105      	bne.n	b06c <send_debug+0x4d8>
    b060:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b064:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b068:	2200      	movs	r2, #0
    b06a:	701a      	strb	r2, [r3, #0]
    b06c:	f242 0339 	movw	r3, #8249	; 0x2039
    b070:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b074:	781b      	ldrb	r3, [r3, #0]
    b076:	b2db      	uxtb	r3, r3
    b078:	f003 0310 	and.w	r3, r3, #16
    b07c:	2b00      	cmp	r3, #0
    b07e:	d15a      	bne.n	b136 <send_debug+0x5a2>
    b080:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    b084:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b088:	781b      	ldrb	r3, [r3, #0]
    b08a:	b2db      	uxtb	r3, r3
    b08c:	461a      	mov	r2, r3
    b08e:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    b092:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b096:	5c9a      	ldrb	r2, [r3, r2]
    b098:	f24a 53bb 	movw	r3, #42427	; 0xa5bb
    b09c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0a0:	701a      	strb	r2, [r3, #0]
    b0a2:	f24a 53bc 	movw	r3, #42428	; 0xa5bc
    b0a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0aa:	2200      	movs	r2, #0
    b0ac:	701a      	strb	r2, [r3, #0]
    b0ae:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    b0b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0b6:	781b      	ldrb	r3, [r3, #0]
    b0b8:	b2db      	uxtb	r3, r3
    b0ba:	3301      	adds	r3, #1
    b0bc:	b2da      	uxtb	r2, r3
    b0be:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    b0c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0c6:	701a      	strb	r2, [r3, #0]
    b0c8:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    b0cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0d0:	781b      	ldrb	r3, [r3, #0]
    b0d2:	b2db      	uxtb	r3, r3
    b0d4:	2bff      	cmp	r3, #255	; 0xff
    b0d6:	d105      	bne.n	b0e4 <send_debug+0x550>
    b0d8:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    b0dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0e0:	2200      	movs	r2, #0
    b0e2:	701a      	strb	r2, [r3, #0]
    b0e4:	f242 0338 	movw	r3, #8248	; 0x2038
    b0e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0ec:	f242 0238 	movw	r2, #8248	; 0x2038
    b0f0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    b0f4:	7812      	ldrb	r2, [r2, #0]
    b0f6:	b2d2      	uxtb	r2, r2
    b0f8:	f042 0201 	orr.w	r2, r2, #1
    b0fc:	b2d2      	uxtb	r2, r2
    b0fe:	701a      	strb	r2, [r3, #0]
    b100:	f242 0339 	movw	r3, #8249	; 0x2039
    b104:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b108:	f242 0239 	movw	r2, #8249	; 0x2039
    b10c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    b110:	7812      	ldrb	r2, [r2, #0]
    b112:	b2d2      	uxtb	r2, r2
    b114:	f042 0210 	orr.w	r2, r2, #16
    b118:	b2d2      	uxtb	r2, r2
    b11a:	701a      	strb	r2, [r3, #0]
    b11c:	e00b      	b.n	b136 <send_debug+0x5a2>
    b11e:	f24a 43b8 	movw	r3, #42168	; 0xa4b8
    b122:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b126:	781b      	ldrb	r3, [r3, #0]
    b128:	3301      	adds	r3, #1
    b12a:	b2da      	uxtb	r2, r3
    b12c:	f24a 43b8 	movw	r3, #42168	; 0xa4b8
    b130:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b134:	701a      	strb	r2, [r3, #0]
}
    b136:	46bd      	mov	sp, r7
    b138:	f85d 7b04 	ldr.w	r7, [sp], #4
    b13c:	4770      	bx	lr
    b13e:	bf00      	nop

0000b140 <send_nav_ref>:
void send_nav_ref(void){  //10000ms
    b140:	b480      	push	{r7}
    b142:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 100 == 49) PERIODIC_SEND_NAVIGATION_REF();}
    b144:	f24a 43b1 	movw	r3, #42161	; 0xa4b1
    b148:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b14c:	781a      	ldrb	r2, [r3, #0]
    b14e:	f248 531f 	movw	r3, #34079	; 0x851f
    b152:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    b156:	fba3 1302 	umull	r1, r3, r3, r2
    b15a:	095b      	lsrs	r3, r3, #5
    b15c:	2164      	movs	r1, #100	; 0x64
    b15e:	fb01 f303 	mul.w	r3, r1, r3
    b162:	1ad3      	subs	r3, r2, r3
    b164:	b2db      	uxtb	r3, r3
    b166:	2b31      	cmp	r3, #49	; 0x31
    b168:	f040 8395 	bne.w	b896 <send_nav_ref+0x756>
    b16c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b170:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b174:	781a      	ldrb	r2, [r3, #0]
    b176:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    b17a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b17e:	781b      	ldrb	r3, [r3, #0]
    b180:	b2db      	uxtb	r3, r3
    b182:	429a      	cmp	r2, r3
    b184:	d313      	bcc.n	b1ae <send_nav_ref+0x6e>
    b186:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    b18a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b18e:	781b      	ldrb	r3, [r3, #0]
    b190:	b2db      	uxtb	r3, r3
    b192:	461a      	mov	r2, r3
    b194:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b198:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b19c:	781b      	ldrb	r3, [r3, #0]
    b19e:	1ad3      	subs	r3, r2, r3
    b1a0:	33ff      	adds	r3, #255	; 0xff
    b1a2:	2b0c      	cmp	r3, #12
    b1a4:	bfd4      	ite	le
    b1a6:	2300      	movle	r3, #0
    b1a8:	2301      	movgt	r3, #1
    b1aa:	b2db      	uxtb	r3, r3
    b1ac:	e011      	b.n	b1d2 <send_nav_ref+0x92>
    b1ae:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    b1b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1b6:	781b      	ldrb	r3, [r3, #0]
    b1b8:	b2db      	uxtb	r3, r3
    b1ba:	461a      	mov	r2, r3
    b1bc:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b1c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1c4:	781b      	ldrb	r3, [r3, #0]
    b1c6:	1ad3      	subs	r3, r2, r3
    b1c8:	2b0c      	cmp	r3, #12
    b1ca:	bfd4      	ite	le
    b1cc:	2300      	movle	r3, #0
    b1ce:	2301      	movgt	r3, #1
    b1d0:	b2db      	uxtb	r3, r3
    b1d2:	2b00      	cmp	r3, #0
    b1d4:	f000 8353 	beq.w	b87e <send_nav_ref+0x73e>
    b1d8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b1dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1e0:	781b      	ldrb	r3, [r3, #0]
    b1e2:	461a      	mov	r2, r3
    b1e4:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    b1e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1ec:	2105      	movs	r1, #5
    b1ee:	5499      	strb	r1, [r3, r2]
    b1f0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b1f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1f8:	781b      	ldrb	r3, [r3, #0]
    b1fa:	3301      	adds	r3, #1
    b1fc:	b2da      	uxtb	r2, r3
    b1fe:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b202:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b206:	701a      	strb	r2, [r3, #0]
    b208:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b20c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b210:	781b      	ldrb	r3, [r3, #0]
    b212:	2bff      	cmp	r3, #255	; 0xff
    b214:	d105      	bne.n	b222 <send_nav_ref+0xe2>
    b216:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b21a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b21e:	2200      	movs	r2, #0
    b220:	701a      	strb	r2, [r3, #0]
    b222:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b226:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b22a:	781b      	ldrb	r3, [r3, #0]
    b22c:	461a      	mov	r2, r3
    b22e:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    b232:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b236:	2109      	movs	r1, #9
    b238:	5499      	strb	r1, [r3, r2]
    b23a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b23e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b242:	781b      	ldrb	r3, [r3, #0]
    b244:	3301      	adds	r3, #1
    b246:	b2da      	uxtb	r2, r3
    b248:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b24c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b250:	701a      	strb	r2, [r3, #0]
    b252:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b256:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b25a:	781b      	ldrb	r3, [r3, #0]
    b25c:	2bff      	cmp	r3, #255	; 0xff
    b25e:	d105      	bne.n	b26c <send_nav_ref+0x12c>
    b260:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b264:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b268:	2200      	movs	r2, #0
    b26a:	701a      	strb	r2, [r3, #0]
    b26c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    b270:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b274:	2209      	movs	r2, #9
    b276:	701a      	strb	r2, [r3, #0]
    b278:	f24a 53be 	movw	r3, #42430	; 0xa5be
    b27c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b280:	2209      	movs	r2, #9
    b282:	701a      	strb	r2, [r3, #0]
    b284:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b288:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b28c:	781b      	ldrb	r3, [r3, #0]
    b28e:	461a      	mov	r2, r3
    b290:	f247 3374 	movw	r3, #29556	; 0x7374
    b294:	f2c0 0301 	movt	r3, #1
    b298:	7819      	ldrb	r1, [r3, #0]
    b29a:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    b29e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2a2:	5499      	strb	r1, [r3, r2]
    b2a4:	f247 3374 	movw	r3, #29556	; 0x7374
    b2a8:	f2c0 0301 	movt	r3, #1
    b2ac:	781a      	ldrb	r2, [r3, #0]
    b2ae:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    b2b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2b6:	781b      	ldrb	r3, [r3, #0]
    b2b8:	4413      	add	r3, r2
    b2ba:	b2da      	uxtb	r2, r3
    b2bc:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    b2c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2c4:	701a      	strb	r2, [r3, #0]
    b2c6:	f24a 53be 	movw	r3, #42430	; 0xa5be
    b2ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2ce:	781a      	ldrb	r2, [r3, #0]
    b2d0:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    b2d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2d8:	781b      	ldrb	r3, [r3, #0]
    b2da:	4413      	add	r3, r2
    b2dc:	b2da      	uxtb	r2, r3
    b2de:	f24a 53be 	movw	r3, #42430	; 0xa5be
    b2e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2e6:	701a      	strb	r2, [r3, #0]
    b2e8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b2ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2f0:	781b      	ldrb	r3, [r3, #0]
    b2f2:	3301      	adds	r3, #1
    b2f4:	b2da      	uxtb	r2, r3
    b2f6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b2fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2fe:	701a      	strb	r2, [r3, #0]
    b300:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b304:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b308:	781b      	ldrb	r3, [r3, #0]
    b30a:	2bff      	cmp	r3, #255	; 0xff
    b30c:	d105      	bne.n	b31a <send_nav_ref+0x1da>
    b30e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b312:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b316:	2200      	movs	r2, #0
    b318:	701a      	strb	r2, [r3, #0]
    b31a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b31e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b322:	781b      	ldrb	r3, [r3, #0]
    b324:	461a      	mov	r2, r3
    b326:	f247 3374 	movw	r3, #29556	; 0x7374
    b32a:	f2c0 0301 	movt	r3, #1
    b32e:	7859      	ldrb	r1, [r3, #1]
    b330:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    b334:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b338:	5499      	strb	r1, [r3, r2]
    b33a:	4bd2      	ldr	r3, [pc, #840]	; (b684 <send_nav_ref+0x544>)
    b33c:	781a      	ldrb	r2, [r3, #0]
    b33e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    b342:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b346:	781b      	ldrb	r3, [r3, #0]
    b348:	4413      	add	r3, r2
    b34a:	b2da      	uxtb	r2, r3
    b34c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    b350:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b354:	701a      	strb	r2, [r3, #0]
    b356:	f24a 53be 	movw	r3, #42430	; 0xa5be
    b35a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b35e:	781a      	ldrb	r2, [r3, #0]
    b360:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    b364:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b368:	781b      	ldrb	r3, [r3, #0]
    b36a:	4413      	add	r3, r2
    b36c:	b2da      	uxtb	r2, r3
    b36e:	f24a 53be 	movw	r3, #42430	; 0xa5be
    b372:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b376:	701a      	strb	r2, [r3, #0]
    b378:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b37c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b380:	781b      	ldrb	r3, [r3, #0]
    b382:	3301      	adds	r3, #1
    b384:	b2da      	uxtb	r2, r3
    b386:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b38a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b38e:	701a      	strb	r2, [r3, #0]
    b390:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b394:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b398:	781b      	ldrb	r3, [r3, #0]
    b39a:	2bff      	cmp	r3, #255	; 0xff
    b39c:	d105      	bne.n	b3aa <send_nav_ref+0x26a>
    b39e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b3a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3a6:	2200      	movs	r2, #0
    b3a8:	701a      	strb	r2, [r3, #0]
    b3aa:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b3ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3b2:	781b      	ldrb	r3, [r3, #0]
    b3b4:	461a      	mov	r2, r3
    b3b6:	f247 3374 	movw	r3, #29556	; 0x7374
    b3ba:	f2c0 0301 	movt	r3, #1
    b3be:	7899      	ldrb	r1, [r3, #2]
    b3c0:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    b3c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3c8:	5499      	strb	r1, [r3, r2]
    b3ca:	4baf      	ldr	r3, [pc, #700]	; (b688 <send_nav_ref+0x548>)
    b3cc:	781a      	ldrb	r2, [r3, #0]
    b3ce:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    b3d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3d6:	781b      	ldrb	r3, [r3, #0]
    b3d8:	4413      	add	r3, r2
    b3da:	b2da      	uxtb	r2, r3
    b3dc:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    b3e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3e4:	701a      	strb	r2, [r3, #0]
    b3e6:	f24a 53be 	movw	r3, #42430	; 0xa5be
    b3ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3ee:	781a      	ldrb	r2, [r3, #0]
    b3f0:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    b3f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3f8:	781b      	ldrb	r3, [r3, #0]
    b3fa:	4413      	add	r3, r2
    b3fc:	b2da      	uxtb	r2, r3
    b3fe:	f24a 53be 	movw	r3, #42430	; 0xa5be
    b402:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b406:	701a      	strb	r2, [r3, #0]
    b408:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b40c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b410:	781b      	ldrb	r3, [r3, #0]
    b412:	3301      	adds	r3, #1
    b414:	b2da      	uxtb	r2, r3
    b416:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b41a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b41e:	701a      	strb	r2, [r3, #0]
    b420:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b424:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b428:	781b      	ldrb	r3, [r3, #0]
    b42a:	2bff      	cmp	r3, #255	; 0xff
    b42c:	d105      	bne.n	b43a <send_nav_ref+0x2fa>
    b42e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b432:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b436:	2200      	movs	r2, #0
    b438:	701a      	strb	r2, [r3, #0]
    b43a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b43e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b442:	781b      	ldrb	r3, [r3, #0]
    b444:	461a      	mov	r2, r3
    b446:	f247 3374 	movw	r3, #29556	; 0x7374
    b44a:	f2c0 0301 	movt	r3, #1
    b44e:	78d9      	ldrb	r1, [r3, #3]
    b450:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    b454:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b458:	5499      	strb	r1, [r3, r2]
    b45a:	4b8c      	ldr	r3, [pc, #560]	; (b68c <send_nav_ref+0x54c>)
    b45c:	781a      	ldrb	r2, [r3, #0]
    b45e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    b462:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b466:	781b      	ldrb	r3, [r3, #0]
    b468:	4413      	add	r3, r2
    b46a:	b2da      	uxtb	r2, r3
    b46c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    b470:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b474:	701a      	strb	r2, [r3, #0]
    b476:	f24a 53be 	movw	r3, #42430	; 0xa5be
    b47a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b47e:	781a      	ldrb	r2, [r3, #0]
    b480:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    b484:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b488:	781b      	ldrb	r3, [r3, #0]
    b48a:	4413      	add	r3, r2
    b48c:	b2da      	uxtb	r2, r3
    b48e:	f24a 53be 	movw	r3, #42430	; 0xa5be
    b492:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b496:	701a      	strb	r2, [r3, #0]
    b498:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b49c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4a0:	781b      	ldrb	r3, [r3, #0]
    b4a2:	3301      	adds	r3, #1
    b4a4:	b2da      	uxtb	r2, r3
    b4a6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b4aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4ae:	701a      	strb	r2, [r3, #0]
    b4b0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b4b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4b8:	781b      	ldrb	r3, [r3, #0]
    b4ba:	2bff      	cmp	r3, #255	; 0xff
    b4bc:	d105      	bne.n	b4ca <send_nav_ref+0x38a>
    b4be:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b4c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4c6:	2200      	movs	r2, #0
    b4c8:	701a      	strb	r2, [r3, #0]
    b4ca:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b4ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4d2:	781b      	ldrb	r3, [r3, #0]
    b4d4:	461a      	mov	r2, r3
    b4d6:	f247 3378 	movw	r3, #29560	; 0x7378
    b4da:	f2c0 0301 	movt	r3, #1
    b4de:	7819      	ldrb	r1, [r3, #0]
    b4e0:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    b4e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4e8:	5499      	strb	r1, [r3, r2]
    b4ea:	f247 3378 	movw	r3, #29560	; 0x7378
    b4ee:	f2c0 0301 	movt	r3, #1
    b4f2:	781a      	ldrb	r2, [r3, #0]
    b4f4:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    b4f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4fc:	781b      	ldrb	r3, [r3, #0]
    b4fe:	4413      	add	r3, r2
    b500:	b2da      	uxtb	r2, r3
    b502:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    b506:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b50a:	701a      	strb	r2, [r3, #0]
    b50c:	f24a 53be 	movw	r3, #42430	; 0xa5be
    b510:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b514:	781a      	ldrb	r2, [r3, #0]
    b516:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    b51a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b51e:	781b      	ldrb	r3, [r3, #0]
    b520:	4413      	add	r3, r2
    b522:	b2da      	uxtb	r2, r3
    b524:	f24a 53be 	movw	r3, #42430	; 0xa5be
    b528:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b52c:	701a      	strb	r2, [r3, #0]
    b52e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b532:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b536:	781b      	ldrb	r3, [r3, #0]
    b538:	3301      	adds	r3, #1
    b53a:	b2da      	uxtb	r2, r3
    b53c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b540:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b544:	701a      	strb	r2, [r3, #0]
    b546:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b54a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b54e:	781b      	ldrb	r3, [r3, #0]
    b550:	2bff      	cmp	r3, #255	; 0xff
    b552:	d105      	bne.n	b560 <send_nav_ref+0x420>
    b554:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b558:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b55c:	2200      	movs	r2, #0
    b55e:	701a      	strb	r2, [r3, #0]
    b560:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b564:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b568:	781b      	ldrb	r3, [r3, #0]
    b56a:	461a      	mov	r2, r3
    b56c:	f247 3378 	movw	r3, #29560	; 0x7378
    b570:	f2c0 0301 	movt	r3, #1
    b574:	7859      	ldrb	r1, [r3, #1]
    b576:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    b57a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b57e:	5499      	strb	r1, [r3, r2]
    b580:	4b43      	ldr	r3, [pc, #268]	; (b690 <send_nav_ref+0x550>)
    b582:	781a      	ldrb	r2, [r3, #0]
    b584:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    b588:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b58c:	781b      	ldrb	r3, [r3, #0]
    b58e:	4413      	add	r3, r2
    b590:	b2da      	uxtb	r2, r3
    b592:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    b596:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b59a:	701a      	strb	r2, [r3, #0]
    b59c:	f24a 53be 	movw	r3, #42430	; 0xa5be
    b5a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5a4:	781a      	ldrb	r2, [r3, #0]
    b5a6:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    b5aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5ae:	781b      	ldrb	r3, [r3, #0]
    b5b0:	4413      	add	r3, r2
    b5b2:	b2da      	uxtb	r2, r3
    b5b4:	f24a 53be 	movw	r3, #42430	; 0xa5be
    b5b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5bc:	701a      	strb	r2, [r3, #0]
    b5be:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b5c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5c6:	781b      	ldrb	r3, [r3, #0]
    b5c8:	3301      	adds	r3, #1
    b5ca:	b2da      	uxtb	r2, r3
    b5cc:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b5d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5d4:	701a      	strb	r2, [r3, #0]
    b5d6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b5da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5de:	781b      	ldrb	r3, [r3, #0]
    b5e0:	2bff      	cmp	r3, #255	; 0xff
    b5e2:	d105      	bne.n	b5f0 <send_nav_ref+0x4b0>
    b5e4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b5e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5ec:	2200      	movs	r2, #0
    b5ee:	701a      	strb	r2, [r3, #0]
    b5f0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b5f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5f8:	781b      	ldrb	r3, [r3, #0]
    b5fa:	461a      	mov	r2, r3
    b5fc:	f247 3378 	movw	r3, #29560	; 0x7378
    b600:	f2c0 0301 	movt	r3, #1
    b604:	7899      	ldrb	r1, [r3, #2]
    b606:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    b60a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b60e:	5499      	strb	r1, [r3, r2]
    b610:	4b20      	ldr	r3, [pc, #128]	; (b694 <send_nav_ref+0x554>)
    b612:	781a      	ldrb	r2, [r3, #0]
    b614:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    b618:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b61c:	781b      	ldrb	r3, [r3, #0]
    b61e:	4413      	add	r3, r2
    b620:	b2da      	uxtb	r2, r3
    b622:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    b626:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b62a:	701a      	strb	r2, [r3, #0]
    b62c:	f24a 53be 	movw	r3, #42430	; 0xa5be
    b630:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b634:	781a      	ldrb	r2, [r3, #0]
    b636:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    b63a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b63e:	781b      	ldrb	r3, [r3, #0]
    b640:	4413      	add	r3, r2
    b642:	b2da      	uxtb	r2, r3
    b644:	f24a 53be 	movw	r3, #42430	; 0xa5be
    b648:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b64c:	701a      	strb	r2, [r3, #0]
    b64e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b652:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b656:	781b      	ldrb	r3, [r3, #0]
    b658:	3301      	adds	r3, #1
    b65a:	b2da      	uxtb	r2, r3
    b65c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b660:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b664:	701a      	strb	r2, [r3, #0]
    b666:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b66a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b66e:	781b      	ldrb	r3, [r3, #0]
    b670:	2bff      	cmp	r3, #255	; 0xff
    b672:	d111      	bne.n	b698 <send_nav_ref+0x558>
    b674:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b678:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b67c:	2200      	movs	r2, #0
    b67e:	701a      	strb	r2, [r3, #0]
    b680:	e00a      	b.n	b698 <send_nav_ref+0x558>
    b682:	bf00      	nop
    b684:	00017375 	.word	0x00017375
    b688:	00017376 	.word	0x00017376
    b68c:	00017377 	.word	0x00017377
    b690:	00017379 	.word	0x00017379
    b694:	0001737a 	.word	0x0001737a
    b698:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b69c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6a0:	781b      	ldrb	r3, [r3, #0]
    b6a2:	461a      	mov	r2, r3
    b6a4:	f247 3378 	movw	r3, #29560	; 0x7378
    b6a8:	f2c0 0301 	movt	r3, #1
    b6ac:	78d9      	ldrb	r1, [r3, #3]
    b6ae:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    b6b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6b6:	5499      	strb	r1, [r3, r2]
    b6b8:	4b79      	ldr	r3, [pc, #484]	; (b8a0 <send_nav_ref+0x760>)
    b6ba:	781a      	ldrb	r2, [r3, #0]
    b6bc:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    b6c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6c4:	781b      	ldrb	r3, [r3, #0]
    b6c6:	4413      	add	r3, r2
    b6c8:	b2da      	uxtb	r2, r3
    b6ca:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    b6ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6d2:	701a      	strb	r2, [r3, #0]
    b6d4:	f24a 53be 	movw	r3, #42430	; 0xa5be
    b6d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6dc:	781a      	ldrb	r2, [r3, #0]
    b6de:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    b6e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6e6:	781b      	ldrb	r3, [r3, #0]
    b6e8:	4413      	add	r3, r2
    b6ea:	b2da      	uxtb	r2, r3
    b6ec:	f24a 53be 	movw	r3, #42430	; 0xa5be
    b6f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6f4:	701a      	strb	r2, [r3, #0]
    b6f6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b6fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6fe:	781b      	ldrb	r3, [r3, #0]
    b700:	3301      	adds	r3, #1
    b702:	b2da      	uxtb	r2, r3
    b704:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b708:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b70c:	701a      	strb	r2, [r3, #0]
    b70e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b712:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b716:	781b      	ldrb	r3, [r3, #0]
    b718:	2bff      	cmp	r3, #255	; 0xff
    b71a:	d105      	bne.n	b728 <send_nav_ref+0x5e8>
    b71c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b720:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b724:	2200      	movs	r2, #0
    b726:	701a      	strb	r2, [r3, #0]
    b728:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b72c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b730:	781b      	ldrb	r3, [r3, #0]
    b732:	461a      	mov	r2, r3
    b734:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    b738:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b73c:	7819      	ldrb	r1, [r3, #0]
    b73e:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    b742:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b746:	5499      	strb	r1, [r3, r2]
    b748:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b74c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b750:	781b      	ldrb	r3, [r3, #0]
    b752:	3301      	adds	r3, #1
    b754:	b2da      	uxtb	r2, r3
    b756:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b75a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b75e:	701a      	strb	r2, [r3, #0]
    b760:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b764:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b768:	781b      	ldrb	r3, [r3, #0]
    b76a:	2bff      	cmp	r3, #255	; 0xff
    b76c:	d105      	bne.n	b77a <send_nav_ref+0x63a>
    b76e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b772:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b776:	2200      	movs	r2, #0
    b778:	701a      	strb	r2, [r3, #0]
    b77a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b77e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b782:	781b      	ldrb	r3, [r3, #0]
    b784:	461a      	mov	r2, r3
    b786:	f24a 53be 	movw	r3, #42430	; 0xa5be
    b78a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b78e:	7819      	ldrb	r1, [r3, #0]
    b790:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    b794:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b798:	5499      	strb	r1, [r3, r2]
    b79a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b79e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7a2:	781b      	ldrb	r3, [r3, #0]
    b7a4:	3301      	adds	r3, #1
    b7a6:	b2da      	uxtb	r2, r3
    b7a8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b7ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7b0:	701a      	strb	r2, [r3, #0]
    b7b2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b7b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7ba:	781b      	ldrb	r3, [r3, #0]
    b7bc:	2bff      	cmp	r3, #255	; 0xff
    b7be:	d105      	bne.n	b7cc <send_nav_ref+0x68c>
    b7c0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b7c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7c8:	2200      	movs	r2, #0
    b7ca:	701a      	strb	r2, [r3, #0]
    b7cc:	f242 0339 	movw	r3, #8249	; 0x2039
    b7d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7d4:	781b      	ldrb	r3, [r3, #0]
    b7d6:	b2db      	uxtb	r3, r3
    b7d8:	f003 0310 	and.w	r3, r3, #16
    b7dc:	2b00      	cmp	r3, #0
    b7de:	d15a      	bne.n	b896 <send_nav_ref+0x756>
    b7e0:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    b7e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7e8:	781b      	ldrb	r3, [r3, #0]
    b7ea:	b2db      	uxtb	r3, r3
    b7ec:	461a      	mov	r2, r3
    b7ee:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    b7f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7f6:	5c9a      	ldrb	r2, [r3, r2]
    b7f8:	f24a 53bb 	movw	r3, #42427	; 0xa5bb
    b7fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b800:	701a      	strb	r2, [r3, #0]
    b802:	f24a 53bc 	movw	r3, #42428	; 0xa5bc
    b806:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b80a:	2200      	movs	r2, #0
    b80c:	701a      	strb	r2, [r3, #0]
    b80e:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    b812:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b816:	781b      	ldrb	r3, [r3, #0]
    b818:	b2db      	uxtb	r3, r3
    b81a:	3301      	adds	r3, #1
    b81c:	b2da      	uxtb	r2, r3
    b81e:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    b822:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b826:	701a      	strb	r2, [r3, #0]
    b828:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    b82c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b830:	781b      	ldrb	r3, [r3, #0]
    b832:	b2db      	uxtb	r3, r3
    b834:	2bff      	cmp	r3, #255	; 0xff
    b836:	d105      	bne.n	b844 <send_nav_ref+0x704>
    b838:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    b83c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b840:	2200      	movs	r2, #0
    b842:	701a      	strb	r2, [r3, #0]
    b844:	f242 0338 	movw	r3, #8248	; 0x2038
    b848:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b84c:	f242 0238 	movw	r2, #8248	; 0x2038
    b850:	f2c2 0200 	movt	r2, #8192	; 0x2000
    b854:	7812      	ldrb	r2, [r2, #0]
    b856:	b2d2      	uxtb	r2, r2
    b858:	f042 0201 	orr.w	r2, r2, #1
    b85c:	b2d2      	uxtb	r2, r2
    b85e:	701a      	strb	r2, [r3, #0]
    b860:	f242 0339 	movw	r3, #8249	; 0x2039
    b864:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b868:	f242 0239 	movw	r2, #8249	; 0x2039
    b86c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    b870:	7812      	ldrb	r2, [r2, #0]
    b872:	b2d2      	uxtb	r2, r2
    b874:	f042 0210 	orr.w	r2, r2, #16
    b878:	b2d2      	uxtb	r2, r2
    b87a:	701a      	strb	r2, [r3, #0]
    b87c:	e00b      	b.n	b896 <send_nav_ref+0x756>
    b87e:	f24a 43b8 	movw	r3, #42168	; 0xa4b8
    b882:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b886:	781b      	ldrb	r3, [r3, #0]
    b888:	3301      	adds	r3, #1
    b88a:	b2da      	uxtb	r2, r3
    b88c:	f24a 43b8 	movw	r3, #42168	; 0xa4b8
    b890:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b894:	701a      	strb	r2, [r3, #0]
  //vPrintString("S_13 reporting_task end!\n\r");
}
    b896:	46bd      	mov	sp, r7
    b898:	f85d 7b04 	ldr.w	r7, [sp], #4
    b89c:	4770      	bx	lr
    b89e:	bf00      	nop
    b8a0:	0001737b 	.word	0x0001737b

0000b8a4 <inflight_calib_mode_update>:

/** \fn inline uint8_t inflight_calib_mode_update ( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
inline uint8_t inflight_calib_mode_update ( void ) {
    b8a4:	b480      	push	{r7}
    b8a6:	b083      	sub	sp, #12
    b8a8:	af00      	add	r7, sp, #0
  ModeUpdate(inflight_calib_mode, IF_CALIB_MODE_OF_PULSE(from_fbw.channels[RADIO_CALIB]));
    b8aa:	f24a 53c0 	movw	r3, #42432	; 0xa5c0
    b8ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8b2:	8a1b      	ldrh	r3, [r3, #16]
    b8b4:	b21b      	sxth	r3, r3
    b8b6:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
    b8ba:	db0d      	blt.n	b8d8 <inflight_calib_mode_update+0x34>
    b8bc:	f24a 53c0 	movw	r3, #42432	; 0xa5c0
    b8c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8c4:	8a1b      	ldrh	r3, [r3, #16]
    b8c6:	b21a      	sxth	r2, r3
    b8c8:	f640 437f 	movw	r3, #3199	; 0xc7f
    b8cc:	429a      	cmp	r2, r3
    b8ce:	bfd4      	ite	le
    b8d0:	2300      	movle	r3, #0
    b8d2:	2301      	movgt	r3, #1
    b8d4:	b2db      	uxtb	r3, r3
    b8d6:	e000      	b.n	b8da <inflight_calib_mode_update+0x36>
    b8d8:	2302      	movs	r3, #2
    b8da:	71fb      	strb	r3, [r7, #7]
    b8dc:	f64a 23cc 	movw	r3, #43724	; 0xaacc
    b8e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8e4:	781b      	ldrb	r3, [r3, #0]
    b8e6:	79fa      	ldrb	r2, [r7, #7]
    b8e8:	429a      	cmp	r2, r3
    b8ea:	d007      	beq.n	b8fc <inflight_calib_mode_update+0x58>
    b8ec:	f64a 23cc 	movw	r3, #43724	; 0xaacc
    b8f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8f4:	79fa      	ldrb	r2, [r7, #7]
    b8f6:	701a      	strb	r2, [r3, #0]
    b8f8:	2301      	movs	r3, #1
    b8fa:	e000      	b.n	b8fe <inflight_calib_mode_update+0x5a>
    b8fc:	2300      	movs	r3, #0
}
    b8fe:	4618      	mov	r0, r3
    b900:	370c      	adds	r7, #12
    b902:	46bd      	mov	sp, r7
    b904:	f85d 7b04 	ldr.w	r7, [sp], #4
    b908:	4770      	bx	lr
    b90a:	bf00      	nop

0000b90c <radio_control_task>:


/** \fn inline void radio_control_task( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
void radio_control_task( void ) {
    b90c:	b580      	push	{r7, lr}
    b90e:	b082      	sub	sp, #8
    b910:	af00      	add	r7, sp, #0
  bool_t calib_mode_changed;
	//vPrintString("S_3 radio_control_task start! \n\r"); //SunnyBeike
    //add by wanbo
    link_fbw_receive_valid = 1;
    b912:	f24a 53ee 	movw	r3, #42478	; 0xa5ee
    b916:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b91a:	2201      	movs	r2, #1
    b91c:	701a      	strb	r2, [r3, #0]
  if (link_fbw_receive_valid) {
    b91e:	f24a 53ee 	movw	r3, #42478	; 0xa5ee
    b922:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b926:	781b      	ldrb	r3, [r3, #0]
    b928:	b2db      	uxtb	r3, r3
    b92a:	2b00      	cmp	r3, #0
    b92c:	f000 83b8 	beq.w	c0a0 <radio_control_task+0x794>
    uint8_t mode_changed = FALSE;
    b930:	2300      	movs	r3, #0
    b932:	71fb      	strb	r3, [r7, #7]
    copy_from_to_fbw();
    b934:	f7fa fa9c 	bl	5e70 <copy_from_to_fbw>
    if ((bit_is_set(from_fbw.status, RADIO_REALLY_LOST) && (pprz_mode == PPRZ_MODE_AUTO1 || pprz_mode == PPRZ_MODE_MANUAL)) || too_far_from_home) {
    b938:	4b3a      	ldr	r3, [pc, #232]	; (ba24 <radio_control_task+0x118>)
    b93a:	781b      	ldrb	r3, [r3, #0]
    b93c:	b2db      	uxtb	r3, r3
    b93e:	f003 0302 	and.w	r3, r3, #2
    b942:	2b00      	cmp	r3, #0
    b944:	d00d      	beq.n	b962 <radio_control_task+0x56>
    b946:	f24a 439c 	movw	r3, #42140	; 0xa49c
    b94a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b94e:	781b      	ldrb	r3, [r3, #0]
    b950:	2b01      	cmp	r3, #1
    b952:	d00d      	beq.n	b970 <radio_control_task+0x64>
    b954:	f24a 439c 	movw	r3, #42140	; 0xa49c
    b958:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b95c:	781b      	ldrb	r3, [r3, #0]
    b95e:	2b00      	cmp	r3, #0
    b960:	d006      	beq.n	b970 <radio_control_task+0x64>
    b962:	f64a 034c 	movw	r3, #43084	; 0xa84c
    b966:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b96a:	781b      	ldrb	r3, [r3, #0]
    b96c:	2b00      	cmp	r3, #0
    b96e:	d007      	beq.n	b980 <radio_control_task+0x74>
      pprz_mode = PPRZ_MODE_HOME;
    b970:	f24a 439c 	movw	r3, #42140	; 0xa49c
    b974:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b978:	2203      	movs	r2, #3
    b97a:	701a      	strb	r2, [r3, #0]
      mode_changed = TRUE;
    b97c:	2301      	movs	r3, #1
    b97e:	71fb      	strb	r3, [r7, #7]
    }
    // modified by wanbo
    //if (bit_is_set(from_fbw.status, AVERAGED_CHANNELS_SENT)) 
    {
      bool_t pprz_mode_changed = pprz_mode_update();
    b980:	f7fa f950 	bl	5c24 <pprz_mode_update>
    b984:	4603      	mov	r3, r0
    b986:	71bb      	strb	r3, [r7, #6]
      mode_changed |= pprz_mode_changed;
    b988:	79fa      	ldrb	r2, [r7, #7]
    b98a:	79bb      	ldrb	r3, [r7, #6]
    b98c:	4313      	orrs	r3, r2
    b98e:	71fb      	strb	r3, [r7, #7]
#ifdef RADIO_LLS
      mode_changed |= ir_estim_mode_update();
    b990:	f7fa f994 	bl	5cbc <ir_estim_mode_update>
    b994:	4603      	mov	r3, r0
    b996:	461a      	mov	r2, r3
    b998:	79fb      	ldrb	r3, [r7, #7]
    b99a:	4313      	orrs	r3, r2
    b99c:	71fb      	strb	r3, [r7, #7]
#endif
#ifdef RADIO_CALIB
      calib_mode_changed = inflight_calib_mode_update();
    b99e:	f7ff ff81 	bl	b8a4 <inflight_calib_mode_update>
    b9a2:	4603      	mov	r3, r0
    b9a4:	717b      	strb	r3, [r7, #5]
      inflight_calib(calib_mode_changed || pprz_mode_changed);
    b9a6:	797b      	ldrb	r3, [r7, #5]
    b9a8:	2b00      	cmp	r3, #0
    b9aa:	d102      	bne.n	b9b2 <radio_control_task+0xa6>
    b9ac:	79bb      	ldrb	r3, [r7, #6]
    b9ae:	2b00      	cmp	r3, #0
    b9b0:	d001      	beq.n	b9b6 <radio_control_task+0xaa>
    b9b2:	2301      	movs	r3, #1
    b9b4:	e000      	b.n	b9b8 <radio_control_task+0xac>
    b9b6:	2300      	movs	r3, #0
    b9b8:	b2db      	uxtb	r3, r3
    b9ba:	4618      	mov	r0, r3
    b9bc:	f008 fba0 	bl	14100 <inflight_calib>
      mode_changed |= calib_mode_changed;
    b9c0:	79fa      	ldrb	r2, [r7, #7]
    b9c2:	797b      	ldrb	r3, [r7, #5]
    b9c4:	4313      	orrs	r3, r2
    b9c6:	71fb      	strb	r3, [r7, #7]
#endif
    }
    mode_changed |= mcu1_status_update();
    b9c8:	f7fa f9a0 	bl	5d0c <mcu1_status_update>
    b9cc:	4603      	mov	r3, r0
    b9ce:	461a      	mov	r2, r3
    b9d0:	79fb      	ldrb	r3, [r7, #7]
    b9d2:	4313      	orrs	r3, r2
    b9d4:	71fb      	strb	r3, [r7, #7]
    // add by wanbo
    mode_changed = 1;
    b9d6:	2301      	movs	r3, #1
    b9d8:	71fb      	strb	r3, [r7, #7]
    if ( mode_changed )
    b9da:	79fb      	ldrb	r3, [r7, #7]
    b9dc:	2b00      	cmp	r3, #0
    b9de:	f000 82bc 	beq.w	bf5a <radio_control_task+0x64e>
      DOWNLINK_SEND_PPRZ_MODE(&pprz_mode, &vertical_mode, &inflight_calib_mode, &mcu1_status, &ir_estim_mode);
    b9e2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b9e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9ea:	781a      	ldrb	r2, [r3, #0]
    b9ec:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    b9f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9f4:	781b      	ldrb	r3, [r3, #0]
    b9f6:	b2db      	uxtb	r3, r3
    b9f8:	429a      	cmp	r2, r3
    b9fa:	d315      	bcc.n	ba28 <radio_control_task+0x11c>
    b9fc:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    ba00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba04:	781b      	ldrb	r3, [r3, #0]
    ba06:	b2db      	uxtb	r3, r3
    ba08:	461a      	mov	r2, r3
    ba0a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ba0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba12:	781b      	ldrb	r3, [r3, #0]
    ba14:	1ad3      	subs	r3, r2, r3
    ba16:	33ff      	adds	r3, #255	; 0xff
    ba18:	2b09      	cmp	r3, #9
    ba1a:	bfd4      	ite	le
    ba1c:	2300      	movle	r3, #0
    ba1e:	2301      	movgt	r3, #1
    ba20:	b2db      	uxtb	r3, r3
    ba22:	e013      	b.n	ba4c <radio_control_task+0x140>
    ba24:	2000a5d3 	.word	0x2000a5d3
    ba28:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    ba2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba30:	781b      	ldrb	r3, [r3, #0]
    ba32:	b2db      	uxtb	r3, r3
    ba34:	461a      	mov	r2, r3
    ba36:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ba3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba3e:	781b      	ldrb	r3, [r3, #0]
    ba40:	1ad3      	subs	r3, r2, r3
    ba42:	2b09      	cmp	r3, #9
    ba44:	bfd4      	ite	le
    ba46:	2300      	movle	r3, #0
    ba48:	2301      	movgt	r3, #1
    ba4a:	b2db      	uxtb	r3, r3
    ba4c:	2b00      	cmp	r3, #0
    ba4e:	f000 8278 	beq.w	bf42 <radio_control_task+0x636>
    ba52:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ba56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba5a:	781b      	ldrb	r3, [r3, #0]
    ba5c:	461a      	mov	r2, r3
    ba5e:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    ba62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba66:	2105      	movs	r1, #5
    ba68:	5499      	strb	r1, [r3, r2]
    ba6a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ba6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba72:	781b      	ldrb	r3, [r3, #0]
    ba74:	3301      	adds	r3, #1
    ba76:	b2da      	uxtb	r2, r3
    ba78:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ba7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba80:	701a      	strb	r2, [r3, #0]
    ba82:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ba86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba8a:	781b      	ldrb	r3, [r3, #0]
    ba8c:	2bff      	cmp	r3, #255	; 0xff
    ba8e:	d105      	bne.n	ba9c <radio_control_task+0x190>
    ba90:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ba94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba98:	2200      	movs	r2, #0
    ba9a:	701a      	strb	r2, [r3, #0]
    ba9c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    baa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    baa4:	781b      	ldrb	r3, [r3, #0]
    baa6:	461a      	mov	r2, r3
    baa8:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    baac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bab0:	210b      	movs	r1, #11
    bab2:	5499      	strb	r1, [r3, r2]
    bab4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    bab8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    babc:	781b      	ldrb	r3, [r3, #0]
    babe:	3301      	adds	r3, #1
    bac0:	b2da      	uxtb	r2, r3
    bac2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    bac6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    baca:	701a      	strb	r2, [r3, #0]
    bacc:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    bad0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bad4:	781b      	ldrb	r3, [r3, #0]
    bad6:	2bff      	cmp	r3, #255	; 0xff
    bad8:	d105      	bne.n	bae6 <radio_control_task+0x1da>
    bada:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    bade:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bae2:	2200      	movs	r2, #0
    bae4:	701a      	strb	r2, [r3, #0]
    bae6:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    baea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    baee:	220b      	movs	r2, #11
    baf0:	701a      	strb	r2, [r3, #0]
    baf2:	f24a 53be 	movw	r3, #42430	; 0xa5be
    baf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bafa:	220b      	movs	r2, #11
    bafc:	701a      	strb	r2, [r3, #0]
    bafe:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    bb02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb06:	781b      	ldrb	r3, [r3, #0]
    bb08:	461a      	mov	r2, r3
    bb0a:	f24a 439c 	movw	r3, #42140	; 0xa49c
    bb0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb12:	7819      	ldrb	r1, [r3, #0]
    bb14:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    bb18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb1c:	5499      	strb	r1, [r3, r2]
    bb1e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    bb22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb26:	781a      	ldrb	r2, [r3, #0]
    bb28:	f24a 439c 	movw	r3, #42140	; 0xa49c
    bb2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb30:	781b      	ldrb	r3, [r3, #0]
    bb32:	4413      	add	r3, r2
    bb34:	b2da      	uxtb	r2, r3
    bb36:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    bb3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb3e:	701a      	strb	r2, [r3, #0]
    bb40:	f24a 53be 	movw	r3, #42430	; 0xa5be
    bb44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb48:	781a      	ldrb	r2, [r3, #0]
    bb4a:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    bb4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb52:	781b      	ldrb	r3, [r3, #0]
    bb54:	4413      	add	r3, r2
    bb56:	b2da      	uxtb	r2, r3
    bb58:	f24a 53be 	movw	r3, #42430	; 0xa5be
    bb5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb60:	701a      	strb	r2, [r3, #0]
    bb62:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    bb66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb6a:	781b      	ldrb	r3, [r3, #0]
    bb6c:	3301      	adds	r3, #1
    bb6e:	b2da      	uxtb	r2, r3
    bb70:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    bb74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb78:	701a      	strb	r2, [r3, #0]
    bb7a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    bb7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb82:	781b      	ldrb	r3, [r3, #0]
    bb84:	2bff      	cmp	r3, #255	; 0xff
    bb86:	d105      	bne.n	bb94 <radio_control_task+0x288>
    bb88:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    bb8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb90:	2200      	movs	r2, #0
    bb92:	701a      	strb	r2, [r3, #0]
    bb94:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    bb98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb9c:	781b      	ldrb	r3, [r3, #0]
    bb9e:	461a      	mov	r2, r3
    bba0:	f24a 439d 	movw	r3, #42141	; 0xa49d
    bba4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bba8:	7819      	ldrb	r1, [r3, #0]
    bbaa:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    bbae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbb2:	5499      	strb	r1, [r3, r2]
    bbb4:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    bbb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbbc:	781a      	ldrb	r2, [r3, #0]
    bbbe:	f24a 439d 	movw	r3, #42141	; 0xa49d
    bbc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbc6:	781b      	ldrb	r3, [r3, #0]
    bbc8:	4413      	add	r3, r2
    bbca:	b2da      	uxtb	r2, r3
    bbcc:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    bbd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbd4:	701a      	strb	r2, [r3, #0]
    bbd6:	f24a 53be 	movw	r3, #42430	; 0xa5be
    bbda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbde:	781a      	ldrb	r2, [r3, #0]
    bbe0:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    bbe4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbe8:	781b      	ldrb	r3, [r3, #0]
    bbea:	4413      	add	r3, r2
    bbec:	b2da      	uxtb	r2, r3
    bbee:	f24a 53be 	movw	r3, #42430	; 0xa5be
    bbf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbf6:	701a      	strb	r2, [r3, #0]
    bbf8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    bbfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc00:	781b      	ldrb	r3, [r3, #0]
    bc02:	3301      	adds	r3, #1
    bc04:	b2da      	uxtb	r2, r3
    bc06:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    bc0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc0e:	701a      	strb	r2, [r3, #0]
    bc10:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    bc14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc18:	781b      	ldrb	r3, [r3, #0]
    bc1a:	2bff      	cmp	r3, #255	; 0xff
    bc1c:	d105      	bne.n	bc2a <radio_control_task+0x31e>
    bc1e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    bc22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc26:	2200      	movs	r2, #0
    bc28:	701a      	strb	r2, [r3, #0]
    bc2a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    bc2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc32:	781b      	ldrb	r3, [r3, #0]
    bc34:	461a      	mov	r2, r3
    bc36:	f64a 23cc 	movw	r3, #43724	; 0xaacc
    bc3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc3e:	7819      	ldrb	r1, [r3, #0]
    bc40:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    bc44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc48:	5499      	strb	r1, [r3, r2]
    bc4a:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    bc4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc52:	781a      	ldrb	r2, [r3, #0]
    bc54:	f64a 23cc 	movw	r3, #43724	; 0xaacc
    bc58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc5c:	781b      	ldrb	r3, [r3, #0]
    bc5e:	4413      	add	r3, r2
    bc60:	b2da      	uxtb	r2, r3
    bc62:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    bc66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc6a:	701a      	strb	r2, [r3, #0]
    bc6c:	f24a 53be 	movw	r3, #42430	; 0xa5be
    bc70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc74:	781a      	ldrb	r2, [r3, #0]
    bc76:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    bc7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc7e:	781b      	ldrb	r3, [r3, #0]
    bc80:	4413      	add	r3, r2
    bc82:	b2da      	uxtb	r2, r3
    bc84:	f24a 53be 	movw	r3, #42430	; 0xa5be
    bc88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc8c:	701a      	strb	r2, [r3, #0]
    bc8e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    bc92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc96:	781b      	ldrb	r3, [r3, #0]
    bc98:	3301      	adds	r3, #1
    bc9a:	b2da      	uxtb	r2, r3
    bc9c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    bca0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bca4:	701a      	strb	r2, [r3, #0]
    bca6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    bcaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bcae:	781b      	ldrb	r3, [r3, #0]
    bcb0:	2bff      	cmp	r3, #255	; 0xff
    bcb2:	d105      	bne.n	bcc0 <radio_control_task+0x3b4>
    bcb4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    bcb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bcbc:	2200      	movs	r2, #0
    bcbe:	701a      	strb	r2, [r3, #0]
    bcc0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    bcc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bcc8:	781b      	ldrb	r3, [r3, #0]
    bcca:	461a      	mov	r2, r3
    bccc:	f24a 43a3 	movw	r3, #42147	; 0xa4a3
    bcd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bcd4:	7819      	ldrb	r1, [r3, #0]
    bcd6:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    bcda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bcde:	5499      	strb	r1, [r3, r2]
    bce0:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    bce4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bce8:	781a      	ldrb	r2, [r3, #0]
    bcea:	f24a 43a3 	movw	r3, #42147	; 0xa4a3
    bcee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bcf2:	781b      	ldrb	r3, [r3, #0]
    bcf4:	4413      	add	r3, r2
    bcf6:	b2da      	uxtb	r2, r3
    bcf8:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    bcfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd00:	701a      	strb	r2, [r3, #0]
    bd02:	f24a 53be 	movw	r3, #42430	; 0xa5be
    bd06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd0a:	781a      	ldrb	r2, [r3, #0]
    bd0c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    bd10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd14:	781b      	ldrb	r3, [r3, #0]
    bd16:	4413      	add	r3, r2
    bd18:	b2da      	uxtb	r2, r3
    bd1a:	f24a 53be 	movw	r3, #42430	; 0xa5be
    bd1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd22:	701a      	strb	r2, [r3, #0]
    bd24:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    bd28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd2c:	781b      	ldrb	r3, [r3, #0]
    bd2e:	3301      	adds	r3, #1
    bd30:	b2da      	uxtb	r2, r3
    bd32:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    bd36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd3a:	701a      	strb	r2, [r3, #0]
    bd3c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    bd40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd44:	781b      	ldrb	r3, [r3, #0]
    bd46:	2bff      	cmp	r3, #255	; 0xff
    bd48:	d105      	bne.n	bd56 <radio_control_task+0x44a>
    bd4a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    bd4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd52:	2200      	movs	r2, #0
    bd54:	701a      	strb	r2, [r3, #0]
    bd56:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    bd5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd5e:	781b      	ldrb	r3, [r3, #0]
    bd60:	461a      	mov	r2, r3
    bd62:	f240 1304 	movw	r3, #260	; 0x104
    bd66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd6a:	7819      	ldrb	r1, [r3, #0]
    bd6c:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    bd70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd74:	5499      	strb	r1, [r3, r2]
    bd76:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    bd7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd7e:	781a      	ldrb	r2, [r3, #0]
    bd80:	f240 1304 	movw	r3, #260	; 0x104
    bd84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd88:	781b      	ldrb	r3, [r3, #0]
    bd8a:	4413      	add	r3, r2
    bd8c:	b2da      	uxtb	r2, r3
    bd8e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    bd92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd96:	701a      	strb	r2, [r3, #0]
    bd98:	f24a 53be 	movw	r3, #42430	; 0xa5be
    bd9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bda0:	781a      	ldrb	r2, [r3, #0]
    bda2:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    bda6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdaa:	781b      	ldrb	r3, [r3, #0]
    bdac:	4413      	add	r3, r2
    bdae:	b2da      	uxtb	r2, r3
    bdb0:	f24a 53be 	movw	r3, #42430	; 0xa5be
    bdb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdb8:	701a      	strb	r2, [r3, #0]
    bdba:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    bdbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdc2:	781b      	ldrb	r3, [r3, #0]
    bdc4:	3301      	adds	r3, #1
    bdc6:	b2da      	uxtb	r2, r3
    bdc8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    bdcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdd0:	701a      	strb	r2, [r3, #0]
    bdd2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    bdd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdda:	781b      	ldrb	r3, [r3, #0]
    bddc:	2bff      	cmp	r3, #255	; 0xff
    bdde:	d105      	bne.n	bdec <radio_control_task+0x4e0>
    bde0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    bde4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bde8:	2200      	movs	r2, #0
    bdea:	701a      	strb	r2, [r3, #0]
    bdec:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    bdf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdf4:	781b      	ldrb	r3, [r3, #0]
    bdf6:	461a      	mov	r2, r3
    bdf8:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    bdfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be00:	7819      	ldrb	r1, [r3, #0]
    be02:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    be06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be0a:	5499      	strb	r1, [r3, r2]
    be0c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    be10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be14:	781b      	ldrb	r3, [r3, #0]
    be16:	3301      	adds	r3, #1
    be18:	b2da      	uxtb	r2, r3
    be1a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    be1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be22:	701a      	strb	r2, [r3, #0]
    be24:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    be28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be2c:	781b      	ldrb	r3, [r3, #0]
    be2e:	2bff      	cmp	r3, #255	; 0xff
    be30:	d105      	bne.n	be3e <radio_control_task+0x532>
    be32:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    be36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be3a:	2200      	movs	r2, #0
    be3c:	701a      	strb	r2, [r3, #0]
    be3e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    be42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be46:	781b      	ldrb	r3, [r3, #0]
    be48:	461a      	mov	r2, r3
    be4a:	f24a 53be 	movw	r3, #42430	; 0xa5be
    be4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be52:	7819      	ldrb	r1, [r3, #0]
    be54:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    be58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be5c:	5499      	strb	r1, [r3, r2]
    be5e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    be62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be66:	781b      	ldrb	r3, [r3, #0]
    be68:	3301      	adds	r3, #1
    be6a:	b2da      	uxtb	r2, r3
    be6c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    be70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be74:	701a      	strb	r2, [r3, #0]
    be76:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    be7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be7e:	781b      	ldrb	r3, [r3, #0]
    be80:	2bff      	cmp	r3, #255	; 0xff
    be82:	d105      	bne.n	be90 <radio_control_task+0x584>
    be84:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    be88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be8c:	2200      	movs	r2, #0
    be8e:	701a      	strb	r2, [r3, #0]
    be90:	f242 0339 	movw	r3, #8249	; 0x2039
    be94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be98:	781b      	ldrb	r3, [r3, #0]
    be9a:	b2db      	uxtb	r3, r3
    be9c:	f003 0310 	and.w	r3, r3, #16
    bea0:	2b00      	cmp	r3, #0
    bea2:	d15a      	bne.n	bf5a <radio_control_task+0x64e>
    bea4:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    bea8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    beac:	781b      	ldrb	r3, [r3, #0]
    beae:	b2db      	uxtb	r3, r3
    beb0:	461a      	mov	r2, r3
    beb2:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    beb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    beba:	5c9a      	ldrb	r2, [r3, r2]
    bebc:	f24a 53bb 	movw	r3, #42427	; 0xa5bb
    bec0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bec4:	701a      	strb	r2, [r3, #0]
    bec6:	f24a 53bc 	movw	r3, #42428	; 0xa5bc
    beca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bece:	2200      	movs	r2, #0
    bed0:	701a      	strb	r2, [r3, #0]
    bed2:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    bed6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    beda:	781b      	ldrb	r3, [r3, #0]
    bedc:	b2db      	uxtb	r3, r3
    bede:	3301      	adds	r3, #1
    bee0:	b2da      	uxtb	r2, r3
    bee2:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    bee6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    beea:	701a      	strb	r2, [r3, #0]
    beec:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    bef0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bef4:	781b      	ldrb	r3, [r3, #0]
    bef6:	b2db      	uxtb	r3, r3
    bef8:	2bff      	cmp	r3, #255	; 0xff
    befa:	d105      	bne.n	bf08 <radio_control_task+0x5fc>
    befc:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    bf00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf04:	2200      	movs	r2, #0
    bf06:	701a      	strb	r2, [r3, #0]
    bf08:	f242 0338 	movw	r3, #8248	; 0x2038
    bf0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf10:	f242 0238 	movw	r2, #8248	; 0x2038
    bf14:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bf18:	7812      	ldrb	r2, [r2, #0]
    bf1a:	b2d2      	uxtb	r2, r2
    bf1c:	f042 0201 	orr.w	r2, r2, #1
    bf20:	b2d2      	uxtb	r2, r2
    bf22:	701a      	strb	r2, [r3, #0]
    bf24:	f242 0339 	movw	r3, #8249	; 0x2039
    bf28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf2c:	f242 0239 	movw	r2, #8249	; 0x2039
    bf30:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bf34:	7812      	ldrb	r2, [r2, #0]
    bf36:	b2d2      	uxtb	r2, r2
    bf38:	f042 0210 	orr.w	r2, r2, #16
    bf3c:	b2d2      	uxtb	r2, r2
    bf3e:	701a      	strb	r2, [r3, #0]
    bf40:	e00b      	b.n	bf5a <radio_control_task+0x64e>
    bf42:	f24a 43b8 	movw	r3, #42168	; 0xa4b8
    bf46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf4a:	781b      	ldrb	r3, [r3, #0]
    bf4c:	3301      	adds	r3, #1
    bf4e:	b2da      	uxtb	r2, r3
    bf50:	f24a 43b8 	movw	r3, #42168	; 0xa4b8
    bf54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf58:	701a      	strb	r2, [r3, #0]
      
    // add by wanbo
    //if (pprz_mode == PPRZ_MODE_AUTO1) 
    {
      desired_roll = FLOAT_OF_PPRZ(from_fbw.channels[RADIO_ROLL], 0., -0.6);
    bf5a:	f24a 53c0 	movw	r3, #42432	; 0xa5c0
    bf5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf62:	885b      	ldrh	r3, [r3, #2]
    bf64:	b21b      	sxth	r3, r3
    bf66:	4618      	mov	r0, r3
    bf68:	f00a fea6 	bl	16cb8 <__aeabi_i2f>
    bf6c:	4603      	mov	r3, r0
    bf6e:	4618      	mov	r0, r3
    bf70:	f04f 0100 	mov.w	r1, #0
    bf74:	f2c4 6116 	movt	r1, #17942	; 0x4616
    bf78:	f00a ffa6 	bl	16ec8 <__aeabi_fdiv>
    bf7c:	4603      	mov	r3, r0
    bf7e:	4618      	mov	r0, r3
    bf80:	f00a fa5a 	bl	16438 <__aeabi_f2d>
    bf84:	4602      	mov	r2, r0
    bf86:	460b      	mov	r3, r1
    bf88:	4610      	mov	r0, r2
    bf8a:	4619      	mov	r1, r3
    bf8c:	a346      	add	r3, pc, #280	; (adr r3, c0a8 <radio_control_task+0x79c>)
    bf8e:	e9d3 2300 	ldrd	r2, r3, [r3]
    bf92:	f00a faa5 	bl	164e0 <__aeabi_dmul>
    bf96:	4602      	mov	r2, r0
    bf98:	460b      	mov	r3, r1
    bf9a:	4610      	mov	r0, r2
    bf9c:	4619      	mov	r1, r3
    bf9e:	f04f 0200 	mov.w	r2, #0
    bfa2:	f04f 0300 	mov.w	r3, #0
    bfa6:	f00a f8e9 	bl	1617c <__adddf3>
    bfaa:	4602      	mov	r2, r0
    bfac:	460b      	mov	r3, r1
    bfae:	4610      	mov	r0, r2
    bfb0:	4619      	mov	r1, r3
    bfb2:	f00a fd77 	bl	16aa4 <__aeabi_d2f>
    bfb6:	4602      	mov	r2, r0
    bfb8:	f24a 73e4 	movw	r3, #42980	; 0xa7e4
    bfbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bfc0:	601a      	str	r2, [r3, #0]
      desired_pitch = FLOAT_OF_PPRZ(from_fbw.channels[RADIO_PITCH], 0., 0.5);
    bfc2:	f24a 53c0 	movw	r3, #42432	; 0xa5c0
    bfc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bfca:	889b      	ldrh	r3, [r3, #4]
    bfcc:	b21b      	sxth	r3, r3
    bfce:	4618      	mov	r0, r3
    bfd0:	f00a fe72 	bl	16cb8 <__aeabi_i2f>
    bfd4:	4603      	mov	r3, r0
    bfd6:	4618      	mov	r0, r3
    bfd8:	f04f 0100 	mov.w	r1, #0
    bfdc:	f2c4 6116 	movt	r1, #17942	; 0x4616
    bfe0:	f00a ff72 	bl	16ec8 <__aeabi_fdiv>
    bfe4:	4603      	mov	r3, r0
    bfe6:	4618      	mov	r0, r3
    bfe8:	f00a fa26 	bl	16438 <__aeabi_f2d>
    bfec:	4602      	mov	r2, r0
    bfee:	460b      	mov	r3, r1
    bff0:	4610      	mov	r0, r2
    bff2:	4619      	mov	r1, r3
    bff4:	f04f 0200 	mov.w	r2, #0
    bff8:	f04f 0300 	mov.w	r3, #0
    bffc:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
    c000:	f00a fa6e 	bl	164e0 <__aeabi_dmul>
    c004:	4602      	mov	r2, r0
    c006:	460b      	mov	r3, r1
    c008:	4610      	mov	r0, r2
    c00a:	4619      	mov	r1, r3
    c00c:	f04f 0200 	mov.w	r2, #0
    c010:	f04f 0300 	mov.w	r3, #0
    c014:	f00a f8b2 	bl	1617c <__adddf3>
    c018:	4602      	mov	r2, r0
    c01a:	460b      	mov	r3, r1
    c01c:	4610      	mov	r0, r2
    c01e:	4619      	mov	r1, r3
    c020:	f00a fd40 	bl	16aa4 <__aeabi_d2f>
    c024:	4602      	mov	r2, r0
    c026:	f24a 73e8 	movw	r3, #42984	; 0xa7e8
    c02a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c02e:	601a      	str	r2, [r3, #0]
    } // else asynchronously set by course_pid_run()

    // add by wanbo
   // if (pprz_mode == PPRZ_MODE_MANUAL || pprz_mode == PPRZ_MODE_AUTO1) 
    {
      desired_gaz = from_fbw.channels[RADIO_THROTTLE];
    c030:	f24a 53c0 	movw	r3, #42432	; 0xa5c0
    c034:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c038:	881a      	ldrh	r2, [r3, #0]
    c03a:	f24a 73ec 	movw	r3, #42988	; 0xa7ec
    c03e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c042:	801a      	strh	r2, [r3, #0]
      pitch_pgain = PITCH_PGAIN * ( 1 - 1. / 3. * from_fbw.channels[RADIO_THROTTLE] / MAX_PPRZ);
#endif /* ANTON_MAGICAL_MISTERY_GAINS */
    }
    // else asynchronously set by climb_pid_run();

    mcu1_ppm_cpt = from_fbw.ppm_cpt;
    c044:	f24a 53c0 	movw	r3, #42432	; 0xa5c0
    c048:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c04c:	7c9a      	ldrb	r2, [r3, #18]
    c04e:	f24a 43a4 	movw	r3, #42148	; 0xa4a4
    c052:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c056:	701a      	strb	r2, [r3, #0]
    vsupply = from_fbw.vsupply;
    c058:	f24a 53c0 	movw	r3, #42432	; 0xa5c0
    c05c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c060:	7d5a      	ldrb	r2, [r3, #21]
    c062:	f24a 43a2 	movw	r3, #42146	; 0xa4a2
    c066:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c06a:	701a      	strb	r2, [r3, #0]

    events_update();
    c06c:	f7f9 fe7e 	bl	5d6c <events_update>

    // add by wanbo
    //if (!estimator_flight_time) 
    {
      ground_calibrate();
    c070:	f7f8 fc7e 	bl	4970 <ground_calibrate>
      if (pprz_mode == PPRZ_MODE_AUTO2 && from_fbw.channels[RADIO_THROTTLE] > GAZ_THRESHOLD_TAKEOFF) {
    c074:	f24a 439c 	movw	r3, #42140	; 0xa49c
    c078:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c07c:	781b      	ldrb	r3, [r3, #0]
    c07e:	2b02      	cmp	r3, #2
    c080:	d10e      	bne.n	c0a0 <radio_control_task+0x794>
    c082:	f24a 53c0 	movw	r3, #42432	; 0xa5c0
    c086:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c08a:	881b      	ldrh	r3, [r3, #0]
    c08c:	b21b      	sxth	r3, r3
    c08e:	f5b3 5f07 	cmp.w	r3, #8640	; 0x21c0
    c092:	dd05      	ble.n	c0a0 <radio_control_task+0x794>
	launch = TRUE;
    c094:	f24a 43b0 	movw	r3, #42160	; 0xa4b0
    c098:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c09c:	2201      	movs	r2, #1
    c09e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

	//vPrintString("S_3 radio_control_task end! \n\r"); //SunnyBeike
}
    c0a0:	3708      	adds	r7, #8
    c0a2:	46bd      	mov	sp, r7
    c0a4:	bd80      	pop	{r7, pc}
    c0a6:	bf00      	nop
    c0a8:	33333333 	.word	0x33333333
    c0ac:	bfe33333 	.word	0xbfe33333

0000c0b0 <navigation_update>:

/** \fn void navigation_task( void )
 *  \brief Compute desired_course
 */
void navigation_update( void ) {
    c0b0:	b580      	push	{r7, lr}
    c0b2:	af00      	add	r7, sp, #0

  /* Default to keep compatibility with previous behaviour */
  //vPrintString("S_17 Navigation task start!\n\r");
  lateral_mode = LATERAL_MODE_COURSE;
    c0b4:	f24a 439e 	movw	r3, #42142	; 0xa49e
    c0b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0bc:	2203      	movs	r2, #3
    c0be:	701a      	strb	r2, [r3, #0]
  if (pprz_mode == PPRZ_MODE_HOME)
    c0c0:	f24a 439c 	movw	r3, #42140	; 0xa49c
    c0c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0c8:	781b      	ldrb	r3, [r3, #0]
    c0ca:	2b03      	cmp	r3, #3
    c0cc:	d102      	bne.n	c0d4 <navigation_update+0x24>
    nav_home();
    c0ce:	f007 fa9b 	bl	13608 <nav_home>
    c0d2:	e001      	b.n	c0d8 <navigation_update+0x28>
  else
    nav_update();
    c0d4:	f007 fabe 	bl	13654 <nav_update>
}
    c0d8:	bd80      	pop	{r7, pc}
    c0da:	bf00      	nop

0000c0dc <send_nav_values>:

void send_nav_values(void){
    c0dc:	b480      	push	{r7}
    c0de:	af00      	add	r7, sp, #0
  
  DOWNLINK_SEND_NAVIGATION(&nav_block, &nav_stage, &estimator_x, &estimator_y, &desired_course, &dist2_to_wp, &course_pgain, &dist2_to_home);
    c0e0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c0e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0e8:	781a      	ldrb	r2, [r3, #0]
    c0ea:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    c0ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0f2:	781b      	ldrb	r3, [r3, #0]
    c0f4:	b2db      	uxtb	r3, r3
    c0f6:	429a      	cmp	r2, r3
    c0f8:	d313      	bcc.n	c122 <send_nav_values+0x46>
    c0fa:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    c0fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c102:	781b      	ldrb	r3, [r3, #0]
    c104:	b2db      	uxtb	r3, r3
    c106:	461a      	mov	r2, r3
    c108:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c10c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c110:	781b      	ldrb	r3, [r3, #0]
    c112:	1ad3      	subs	r3, r2, r3
    c114:	33ff      	adds	r3, #255	; 0xff
    c116:	2b1e      	cmp	r3, #30
    c118:	bfd4      	ite	le
    c11a:	2300      	movle	r3, #0
    c11c:	2301      	movgt	r3, #1
    c11e:	b2db      	uxtb	r3, r3
    c120:	e011      	b.n	c146 <send_nav_values+0x6a>
    c122:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    c126:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c12a:	781b      	ldrb	r3, [r3, #0]
    c12c:	b2db      	uxtb	r3, r3
    c12e:	461a      	mov	r2, r3
    c130:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c134:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c138:	781b      	ldrb	r3, [r3, #0]
    c13a:	1ad3      	subs	r3, r2, r3
    c13c:	2b1e      	cmp	r3, #30
    c13e:	bfd4      	ite	le
    c140:	2300      	movle	r3, #0
    c142:	2301      	movgt	r3, #1
    c144:	b2db      	uxtb	r3, r3
    c146:	2b00      	cmp	r3, #0
    c148:	f001 8094 	beq.w	d274 <send_nav_values+0x1198>
    c14c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c150:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c154:	781b      	ldrb	r3, [r3, #0]
    c156:	461a      	mov	r2, r3
    c158:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    c15c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c160:	2105      	movs	r1, #5
    c162:	5499      	strb	r1, [r3, r2]
    c164:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c168:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c16c:	781b      	ldrb	r3, [r3, #0]
    c16e:	3301      	adds	r3, #1
    c170:	b2da      	uxtb	r2, r3
    c172:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c176:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c17a:	701a      	strb	r2, [r3, #0]
    c17c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c180:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c184:	781b      	ldrb	r3, [r3, #0]
    c186:	2bff      	cmp	r3, #255	; 0xff
    c188:	d105      	bne.n	c196 <send_nav_values+0xba>
    c18a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c18e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c192:	2200      	movs	r2, #0
    c194:	701a      	strb	r2, [r3, #0]
    c196:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c19a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c19e:	781b      	ldrb	r3, [r3, #0]
    c1a0:	461a      	mov	r2, r3
    c1a2:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    c1a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1aa:	210a      	movs	r1, #10
    c1ac:	5499      	strb	r1, [r3, r2]
    c1ae:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c1b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1b6:	781b      	ldrb	r3, [r3, #0]
    c1b8:	3301      	adds	r3, #1
    c1ba:	b2da      	uxtb	r2, r3
    c1bc:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c1c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1c4:	701a      	strb	r2, [r3, #0]
    c1c6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c1ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1ce:	781b      	ldrb	r3, [r3, #0]
    c1d0:	2bff      	cmp	r3, #255	; 0xff
    c1d2:	d105      	bne.n	c1e0 <send_nav_values+0x104>
    c1d4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c1d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1dc:	2200      	movs	r2, #0
    c1de:	701a      	strb	r2, [r3, #0]
    c1e0:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    c1e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1e8:	220a      	movs	r2, #10
    c1ea:	701a      	strb	r2, [r3, #0]
    c1ec:	f24a 53be 	movw	r3, #42430	; 0xa5be
    c1f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1f4:	220a      	movs	r2, #10
    c1f6:	701a      	strb	r2, [r3, #0]
    c1f8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c1fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c200:	781b      	ldrb	r3, [r3, #0]
    c202:	461a      	mov	r2, r3
    c204:	f64a 0311 	movw	r3, #43025	; 0xa811
    c208:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c20c:	7819      	ldrb	r1, [r3, #0]
    c20e:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    c212:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c216:	5499      	strb	r1, [r3, r2]
    c218:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    c21c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c220:	781a      	ldrb	r2, [r3, #0]
    c222:	f64a 0311 	movw	r3, #43025	; 0xa811
    c226:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c22a:	781b      	ldrb	r3, [r3, #0]
    c22c:	4413      	add	r3, r2
    c22e:	b2da      	uxtb	r2, r3
    c230:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    c234:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c238:	701a      	strb	r2, [r3, #0]
    c23a:	f24a 53be 	movw	r3, #42430	; 0xa5be
    c23e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c242:	781a      	ldrb	r2, [r3, #0]
    c244:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    c248:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c24c:	781b      	ldrb	r3, [r3, #0]
    c24e:	4413      	add	r3, r2
    c250:	b2da      	uxtb	r2, r3
    c252:	f24a 53be 	movw	r3, #42430	; 0xa5be
    c256:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c25a:	701a      	strb	r2, [r3, #0]
    c25c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c260:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c264:	781b      	ldrb	r3, [r3, #0]
    c266:	3301      	adds	r3, #1
    c268:	b2da      	uxtb	r2, r3
    c26a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c26e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c272:	701a      	strb	r2, [r3, #0]
    c274:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c278:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c27c:	781b      	ldrb	r3, [r3, #0]
    c27e:	2bff      	cmp	r3, #255	; 0xff
    c280:	d105      	bne.n	c28e <send_nav_values+0x1b2>
    c282:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c286:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c28a:	2200      	movs	r2, #0
    c28c:	701a      	strb	r2, [r3, #0]
    c28e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c292:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c296:	781b      	ldrb	r3, [r3, #0]
    c298:	461a      	mov	r2, r3
    c29a:	f64a 0310 	movw	r3, #43024	; 0xa810
    c29e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2a2:	7819      	ldrb	r1, [r3, #0]
    c2a4:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    c2a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2ac:	5499      	strb	r1, [r3, r2]
    c2ae:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    c2b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2b6:	781a      	ldrb	r2, [r3, #0]
    c2b8:	f64a 0310 	movw	r3, #43024	; 0xa810
    c2bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2c0:	781b      	ldrb	r3, [r3, #0]
    c2c2:	4413      	add	r3, r2
    c2c4:	b2da      	uxtb	r2, r3
    c2c6:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    c2ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2ce:	701a      	strb	r2, [r3, #0]
    c2d0:	f24a 53be 	movw	r3, #42430	; 0xa5be
    c2d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2d8:	781a      	ldrb	r2, [r3, #0]
    c2da:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    c2de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2e2:	781b      	ldrb	r3, [r3, #0]
    c2e4:	4413      	add	r3, r2
    c2e6:	b2da      	uxtb	r2, r3
    c2e8:	f24a 53be 	movw	r3, #42430	; 0xa5be
    c2ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2f0:	701a      	strb	r2, [r3, #0]
    c2f2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c2f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2fa:	781b      	ldrb	r3, [r3, #0]
    c2fc:	3301      	adds	r3, #1
    c2fe:	b2da      	uxtb	r2, r3
    c300:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c304:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c308:	701a      	strb	r2, [r3, #0]
    c30a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c30e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c312:	781b      	ldrb	r3, [r3, #0]
    c314:	2bff      	cmp	r3, #255	; 0xff
    c316:	d105      	bne.n	c324 <send_nav_values+0x248>
    c318:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c31c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c320:	2200      	movs	r2, #0
    c322:	701a      	strb	r2, [r3, #0]
    c324:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c328:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c32c:	781b      	ldrb	r3, [r3, #0]
    c32e:	461a      	mov	r2, r3
    c330:	f64a 236c 	movw	r3, #43628	; 0xaa6c
    c334:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c338:	7819      	ldrb	r1, [r3, #0]
    c33a:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    c33e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c342:	5499      	strb	r1, [r3, r2]
    c344:	f64a 236c 	movw	r3, #43628	; 0xaa6c
    c348:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c34c:	781a      	ldrb	r2, [r3, #0]
    c34e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    c352:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c356:	781b      	ldrb	r3, [r3, #0]
    c358:	4413      	add	r3, r2
    c35a:	b2da      	uxtb	r2, r3
    c35c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    c360:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c364:	701a      	strb	r2, [r3, #0]
    c366:	f24a 53be 	movw	r3, #42430	; 0xa5be
    c36a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c36e:	781a      	ldrb	r2, [r3, #0]
    c370:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    c374:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c378:	781b      	ldrb	r3, [r3, #0]
    c37a:	4413      	add	r3, r2
    c37c:	b2da      	uxtb	r2, r3
    c37e:	f24a 53be 	movw	r3, #42430	; 0xa5be
    c382:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c386:	701a      	strb	r2, [r3, #0]
    c388:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c38c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c390:	781b      	ldrb	r3, [r3, #0]
    c392:	3301      	adds	r3, #1
    c394:	b2da      	uxtb	r2, r3
    c396:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c39a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c39e:	701a      	strb	r2, [r3, #0]
    c3a0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c3a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3a8:	781b      	ldrb	r3, [r3, #0]
    c3aa:	2bff      	cmp	r3, #255	; 0xff
    c3ac:	d105      	bne.n	c3ba <send_nav_values+0x2de>
    c3ae:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c3b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3b6:	2200      	movs	r2, #0
    c3b8:	701a      	strb	r2, [r3, #0]
    c3ba:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c3be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3c2:	781b      	ldrb	r3, [r3, #0]
    c3c4:	461a      	mov	r2, r3
    c3c6:	f64a 236c 	movw	r3, #43628	; 0xaa6c
    c3ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3ce:	7859      	ldrb	r1, [r3, #1]
    c3d0:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    c3d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3d8:	5499      	strb	r1, [r3, r2]
    c3da:	4bd2      	ldr	r3, [pc, #840]	; (c724 <send_nav_values+0x648>)
    c3dc:	781a      	ldrb	r2, [r3, #0]
    c3de:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    c3e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3e6:	781b      	ldrb	r3, [r3, #0]
    c3e8:	4413      	add	r3, r2
    c3ea:	b2da      	uxtb	r2, r3
    c3ec:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    c3f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3f4:	701a      	strb	r2, [r3, #0]
    c3f6:	f24a 53be 	movw	r3, #42430	; 0xa5be
    c3fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3fe:	781a      	ldrb	r2, [r3, #0]
    c400:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    c404:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c408:	781b      	ldrb	r3, [r3, #0]
    c40a:	4413      	add	r3, r2
    c40c:	b2da      	uxtb	r2, r3
    c40e:	f24a 53be 	movw	r3, #42430	; 0xa5be
    c412:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c416:	701a      	strb	r2, [r3, #0]
    c418:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c41c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c420:	781b      	ldrb	r3, [r3, #0]
    c422:	3301      	adds	r3, #1
    c424:	b2da      	uxtb	r2, r3
    c426:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c42a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c42e:	701a      	strb	r2, [r3, #0]
    c430:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c434:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c438:	781b      	ldrb	r3, [r3, #0]
    c43a:	2bff      	cmp	r3, #255	; 0xff
    c43c:	d105      	bne.n	c44a <send_nav_values+0x36e>
    c43e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c442:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c446:	2200      	movs	r2, #0
    c448:	701a      	strb	r2, [r3, #0]
    c44a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c44e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c452:	781b      	ldrb	r3, [r3, #0]
    c454:	461a      	mov	r2, r3
    c456:	f64a 236c 	movw	r3, #43628	; 0xaa6c
    c45a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c45e:	7899      	ldrb	r1, [r3, #2]
    c460:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    c464:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c468:	5499      	strb	r1, [r3, r2]
    c46a:	4baf      	ldr	r3, [pc, #700]	; (c728 <send_nav_values+0x64c>)
    c46c:	781a      	ldrb	r2, [r3, #0]
    c46e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    c472:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c476:	781b      	ldrb	r3, [r3, #0]
    c478:	4413      	add	r3, r2
    c47a:	b2da      	uxtb	r2, r3
    c47c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    c480:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c484:	701a      	strb	r2, [r3, #0]
    c486:	f24a 53be 	movw	r3, #42430	; 0xa5be
    c48a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c48e:	781a      	ldrb	r2, [r3, #0]
    c490:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    c494:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c498:	781b      	ldrb	r3, [r3, #0]
    c49a:	4413      	add	r3, r2
    c49c:	b2da      	uxtb	r2, r3
    c49e:	f24a 53be 	movw	r3, #42430	; 0xa5be
    c4a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4a6:	701a      	strb	r2, [r3, #0]
    c4a8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c4ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4b0:	781b      	ldrb	r3, [r3, #0]
    c4b2:	3301      	adds	r3, #1
    c4b4:	b2da      	uxtb	r2, r3
    c4b6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c4ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4be:	701a      	strb	r2, [r3, #0]
    c4c0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c4c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4c8:	781b      	ldrb	r3, [r3, #0]
    c4ca:	2bff      	cmp	r3, #255	; 0xff
    c4cc:	d105      	bne.n	c4da <send_nav_values+0x3fe>
    c4ce:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c4d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4d6:	2200      	movs	r2, #0
    c4d8:	701a      	strb	r2, [r3, #0]
    c4da:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c4de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4e2:	781b      	ldrb	r3, [r3, #0]
    c4e4:	461a      	mov	r2, r3
    c4e6:	f64a 236c 	movw	r3, #43628	; 0xaa6c
    c4ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4ee:	78d9      	ldrb	r1, [r3, #3]
    c4f0:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    c4f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4f8:	5499      	strb	r1, [r3, r2]
    c4fa:	4b8c      	ldr	r3, [pc, #560]	; (c72c <send_nav_values+0x650>)
    c4fc:	781a      	ldrb	r2, [r3, #0]
    c4fe:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    c502:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c506:	781b      	ldrb	r3, [r3, #0]
    c508:	4413      	add	r3, r2
    c50a:	b2da      	uxtb	r2, r3
    c50c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    c510:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c514:	701a      	strb	r2, [r3, #0]
    c516:	f24a 53be 	movw	r3, #42430	; 0xa5be
    c51a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c51e:	781a      	ldrb	r2, [r3, #0]
    c520:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    c524:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c528:	781b      	ldrb	r3, [r3, #0]
    c52a:	4413      	add	r3, r2
    c52c:	b2da      	uxtb	r2, r3
    c52e:	f24a 53be 	movw	r3, #42430	; 0xa5be
    c532:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c536:	701a      	strb	r2, [r3, #0]
    c538:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c53c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c540:	781b      	ldrb	r3, [r3, #0]
    c542:	3301      	adds	r3, #1
    c544:	b2da      	uxtb	r2, r3
    c546:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c54a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c54e:	701a      	strb	r2, [r3, #0]
    c550:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c554:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c558:	781b      	ldrb	r3, [r3, #0]
    c55a:	2bff      	cmp	r3, #255	; 0xff
    c55c:	d105      	bne.n	c56a <send_nav_values+0x48e>
    c55e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c562:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c566:	2200      	movs	r2, #0
    c568:	701a      	strb	r2, [r3, #0]
    c56a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c56e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c572:	781b      	ldrb	r3, [r3, #0]
    c574:	461a      	mov	r2, r3
    c576:	f64a 2370 	movw	r3, #43632	; 0xaa70
    c57a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c57e:	7819      	ldrb	r1, [r3, #0]
    c580:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    c584:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c588:	5499      	strb	r1, [r3, r2]
    c58a:	f64a 2370 	movw	r3, #43632	; 0xaa70
    c58e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c592:	781a      	ldrb	r2, [r3, #0]
    c594:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    c598:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c59c:	781b      	ldrb	r3, [r3, #0]
    c59e:	4413      	add	r3, r2
    c5a0:	b2da      	uxtb	r2, r3
    c5a2:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    c5a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5aa:	701a      	strb	r2, [r3, #0]
    c5ac:	f24a 53be 	movw	r3, #42430	; 0xa5be
    c5b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5b4:	781a      	ldrb	r2, [r3, #0]
    c5b6:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    c5ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5be:	781b      	ldrb	r3, [r3, #0]
    c5c0:	4413      	add	r3, r2
    c5c2:	b2da      	uxtb	r2, r3
    c5c4:	f24a 53be 	movw	r3, #42430	; 0xa5be
    c5c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5cc:	701a      	strb	r2, [r3, #0]
    c5ce:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c5d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5d6:	781b      	ldrb	r3, [r3, #0]
    c5d8:	3301      	adds	r3, #1
    c5da:	b2da      	uxtb	r2, r3
    c5dc:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c5e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5e4:	701a      	strb	r2, [r3, #0]
    c5e6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c5ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5ee:	781b      	ldrb	r3, [r3, #0]
    c5f0:	2bff      	cmp	r3, #255	; 0xff
    c5f2:	d105      	bne.n	c600 <send_nav_values+0x524>
    c5f4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c5f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5fc:	2200      	movs	r2, #0
    c5fe:	701a      	strb	r2, [r3, #0]
    c600:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c604:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c608:	781b      	ldrb	r3, [r3, #0]
    c60a:	461a      	mov	r2, r3
    c60c:	f64a 2370 	movw	r3, #43632	; 0xaa70
    c610:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c614:	7859      	ldrb	r1, [r3, #1]
    c616:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    c61a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c61e:	5499      	strb	r1, [r3, r2]
    c620:	4b43      	ldr	r3, [pc, #268]	; (c730 <send_nav_values+0x654>)
    c622:	781a      	ldrb	r2, [r3, #0]
    c624:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    c628:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c62c:	781b      	ldrb	r3, [r3, #0]
    c62e:	4413      	add	r3, r2
    c630:	b2da      	uxtb	r2, r3
    c632:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    c636:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c63a:	701a      	strb	r2, [r3, #0]
    c63c:	f24a 53be 	movw	r3, #42430	; 0xa5be
    c640:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c644:	781a      	ldrb	r2, [r3, #0]
    c646:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    c64a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c64e:	781b      	ldrb	r3, [r3, #0]
    c650:	4413      	add	r3, r2
    c652:	b2da      	uxtb	r2, r3
    c654:	f24a 53be 	movw	r3, #42430	; 0xa5be
    c658:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c65c:	701a      	strb	r2, [r3, #0]
    c65e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c662:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c666:	781b      	ldrb	r3, [r3, #0]
    c668:	3301      	adds	r3, #1
    c66a:	b2da      	uxtb	r2, r3
    c66c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c670:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c674:	701a      	strb	r2, [r3, #0]
    c676:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c67a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c67e:	781b      	ldrb	r3, [r3, #0]
    c680:	2bff      	cmp	r3, #255	; 0xff
    c682:	d105      	bne.n	c690 <send_nav_values+0x5b4>
    c684:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c688:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c68c:	2200      	movs	r2, #0
    c68e:	701a      	strb	r2, [r3, #0]
    c690:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c694:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c698:	781b      	ldrb	r3, [r3, #0]
    c69a:	461a      	mov	r2, r3
    c69c:	f64a 2370 	movw	r3, #43632	; 0xaa70
    c6a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6a4:	7899      	ldrb	r1, [r3, #2]
    c6a6:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    c6aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6ae:	5499      	strb	r1, [r3, r2]
    c6b0:	4b20      	ldr	r3, [pc, #128]	; (c734 <send_nav_values+0x658>)
    c6b2:	781a      	ldrb	r2, [r3, #0]
    c6b4:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    c6b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6bc:	781b      	ldrb	r3, [r3, #0]
    c6be:	4413      	add	r3, r2
    c6c0:	b2da      	uxtb	r2, r3
    c6c2:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    c6c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6ca:	701a      	strb	r2, [r3, #0]
    c6cc:	f24a 53be 	movw	r3, #42430	; 0xa5be
    c6d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6d4:	781a      	ldrb	r2, [r3, #0]
    c6d6:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    c6da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6de:	781b      	ldrb	r3, [r3, #0]
    c6e0:	4413      	add	r3, r2
    c6e2:	b2da      	uxtb	r2, r3
    c6e4:	f24a 53be 	movw	r3, #42430	; 0xa5be
    c6e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6ec:	701a      	strb	r2, [r3, #0]
    c6ee:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c6f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6f6:	781b      	ldrb	r3, [r3, #0]
    c6f8:	3301      	adds	r3, #1
    c6fa:	b2da      	uxtb	r2, r3
    c6fc:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c700:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c704:	701a      	strb	r2, [r3, #0]
    c706:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c70a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c70e:	781b      	ldrb	r3, [r3, #0]
    c710:	2bff      	cmp	r3, #255	; 0xff
    c712:	d111      	bne.n	c738 <send_nav_values+0x65c>
    c714:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c718:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c71c:	2200      	movs	r2, #0
    c71e:	701a      	strb	r2, [r3, #0]
    c720:	e00a      	b.n	c738 <send_nav_values+0x65c>
    c722:	bf00      	nop
    c724:	2000aa6d 	.word	0x2000aa6d
    c728:	2000aa6e 	.word	0x2000aa6e
    c72c:	2000aa6f 	.word	0x2000aa6f
    c730:	2000aa71 	.word	0x2000aa71
    c734:	2000aa72 	.word	0x2000aa72
    c738:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c73c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c740:	781b      	ldrb	r3, [r3, #0]
    c742:	461a      	mov	r2, r3
    c744:	f64a 2370 	movw	r3, #43632	; 0xaa70
    c748:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c74c:	78d9      	ldrb	r1, [r3, #3]
    c74e:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    c752:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c756:	5499      	strb	r1, [r3, r2]
    c758:	4bd3      	ldr	r3, [pc, #844]	; (caa8 <send_nav_values+0x9cc>)
    c75a:	781a      	ldrb	r2, [r3, #0]
    c75c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    c760:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c764:	781b      	ldrb	r3, [r3, #0]
    c766:	4413      	add	r3, r2
    c768:	b2da      	uxtb	r2, r3
    c76a:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    c76e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c772:	701a      	strb	r2, [r3, #0]
    c774:	f24a 53be 	movw	r3, #42430	; 0xa5be
    c778:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c77c:	781a      	ldrb	r2, [r3, #0]
    c77e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    c782:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c786:	781b      	ldrb	r3, [r3, #0]
    c788:	4413      	add	r3, r2
    c78a:	b2da      	uxtb	r2, r3
    c78c:	f24a 53be 	movw	r3, #42430	; 0xa5be
    c790:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c794:	701a      	strb	r2, [r3, #0]
    c796:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c79a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c79e:	781b      	ldrb	r3, [r3, #0]
    c7a0:	3301      	adds	r3, #1
    c7a2:	b2da      	uxtb	r2, r3
    c7a4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c7a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7ac:	701a      	strb	r2, [r3, #0]
    c7ae:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c7b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7b6:	781b      	ldrb	r3, [r3, #0]
    c7b8:	2bff      	cmp	r3, #255	; 0xff
    c7ba:	d105      	bne.n	c7c8 <send_nav_values+0x6ec>
    c7bc:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c7c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7c4:	2200      	movs	r2, #0
    c7c6:	701a      	strb	r2, [r3, #0]
    c7c8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c7cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7d0:	781b      	ldrb	r3, [r3, #0]
    c7d2:	461a      	mov	r2, r3
    c7d4:	f24a 73fc 	movw	r3, #43004	; 0xa7fc
    c7d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7dc:	7819      	ldrb	r1, [r3, #0]
    c7de:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    c7e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7e6:	5499      	strb	r1, [r3, r2]
    c7e8:	f24a 73fc 	movw	r3, #43004	; 0xa7fc
    c7ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7f0:	781a      	ldrb	r2, [r3, #0]
    c7f2:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    c7f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7fa:	781b      	ldrb	r3, [r3, #0]
    c7fc:	4413      	add	r3, r2
    c7fe:	b2da      	uxtb	r2, r3
    c800:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    c804:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c808:	701a      	strb	r2, [r3, #0]
    c80a:	f24a 53be 	movw	r3, #42430	; 0xa5be
    c80e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c812:	781a      	ldrb	r2, [r3, #0]
    c814:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    c818:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c81c:	781b      	ldrb	r3, [r3, #0]
    c81e:	4413      	add	r3, r2
    c820:	b2da      	uxtb	r2, r3
    c822:	f24a 53be 	movw	r3, #42430	; 0xa5be
    c826:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c82a:	701a      	strb	r2, [r3, #0]
    c82c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c830:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c834:	781b      	ldrb	r3, [r3, #0]
    c836:	3301      	adds	r3, #1
    c838:	b2da      	uxtb	r2, r3
    c83a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c83e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c842:	701a      	strb	r2, [r3, #0]
    c844:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c848:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c84c:	781b      	ldrb	r3, [r3, #0]
    c84e:	2bff      	cmp	r3, #255	; 0xff
    c850:	d105      	bne.n	c85e <send_nav_values+0x782>
    c852:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c856:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c85a:	2200      	movs	r2, #0
    c85c:	701a      	strb	r2, [r3, #0]
    c85e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c862:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c866:	781b      	ldrb	r3, [r3, #0]
    c868:	461a      	mov	r2, r3
    c86a:	f24a 73fc 	movw	r3, #43004	; 0xa7fc
    c86e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c872:	7859      	ldrb	r1, [r3, #1]
    c874:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    c878:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c87c:	5499      	strb	r1, [r3, r2]
    c87e:	4b8b      	ldr	r3, [pc, #556]	; (caac <send_nav_values+0x9d0>)
    c880:	781a      	ldrb	r2, [r3, #0]
    c882:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    c886:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c88a:	781b      	ldrb	r3, [r3, #0]
    c88c:	4413      	add	r3, r2
    c88e:	b2da      	uxtb	r2, r3
    c890:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    c894:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c898:	701a      	strb	r2, [r3, #0]
    c89a:	f24a 53be 	movw	r3, #42430	; 0xa5be
    c89e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8a2:	781a      	ldrb	r2, [r3, #0]
    c8a4:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    c8a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8ac:	781b      	ldrb	r3, [r3, #0]
    c8ae:	4413      	add	r3, r2
    c8b0:	b2da      	uxtb	r2, r3
    c8b2:	f24a 53be 	movw	r3, #42430	; 0xa5be
    c8b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8ba:	701a      	strb	r2, [r3, #0]
    c8bc:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c8c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8c4:	781b      	ldrb	r3, [r3, #0]
    c8c6:	3301      	adds	r3, #1
    c8c8:	b2da      	uxtb	r2, r3
    c8ca:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c8ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8d2:	701a      	strb	r2, [r3, #0]
    c8d4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c8d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8dc:	781b      	ldrb	r3, [r3, #0]
    c8de:	2bff      	cmp	r3, #255	; 0xff
    c8e0:	d105      	bne.n	c8ee <send_nav_values+0x812>
    c8e2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c8e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8ea:	2200      	movs	r2, #0
    c8ec:	701a      	strb	r2, [r3, #0]
    c8ee:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c8f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8f6:	781b      	ldrb	r3, [r3, #0]
    c8f8:	461a      	mov	r2, r3
    c8fa:	f24a 73fc 	movw	r3, #43004	; 0xa7fc
    c8fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c902:	7899      	ldrb	r1, [r3, #2]
    c904:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    c908:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c90c:	5499      	strb	r1, [r3, r2]
    c90e:	4b68      	ldr	r3, [pc, #416]	; (cab0 <send_nav_values+0x9d4>)
    c910:	781a      	ldrb	r2, [r3, #0]
    c912:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    c916:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c91a:	781b      	ldrb	r3, [r3, #0]
    c91c:	4413      	add	r3, r2
    c91e:	b2da      	uxtb	r2, r3
    c920:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    c924:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c928:	701a      	strb	r2, [r3, #0]
    c92a:	f24a 53be 	movw	r3, #42430	; 0xa5be
    c92e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c932:	781a      	ldrb	r2, [r3, #0]
    c934:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    c938:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c93c:	781b      	ldrb	r3, [r3, #0]
    c93e:	4413      	add	r3, r2
    c940:	b2da      	uxtb	r2, r3
    c942:	f24a 53be 	movw	r3, #42430	; 0xa5be
    c946:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c94a:	701a      	strb	r2, [r3, #0]
    c94c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c950:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c954:	781b      	ldrb	r3, [r3, #0]
    c956:	3301      	adds	r3, #1
    c958:	b2da      	uxtb	r2, r3
    c95a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c95e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c962:	701a      	strb	r2, [r3, #0]
    c964:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c968:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c96c:	781b      	ldrb	r3, [r3, #0]
    c96e:	2bff      	cmp	r3, #255	; 0xff
    c970:	d105      	bne.n	c97e <send_nav_values+0x8a2>
    c972:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c976:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c97a:	2200      	movs	r2, #0
    c97c:	701a      	strb	r2, [r3, #0]
    c97e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c982:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c986:	781b      	ldrb	r3, [r3, #0]
    c988:	461a      	mov	r2, r3
    c98a:	f24a 73fc 	movw	r3, #43004	; 0xa7fc
    c98e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c992:	78d9      	ldrb	r1, [r3, #3]
    c994:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    c998:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c99c:	5499      	strb	r1, [r3, r2]
    c99e:	4b45      	ldr	r3, [pc, #276]	; (cab4 <send_nav_values+0x9d8>)
    c9a0:	781a      	ldrb	r2, [r3, #0]
    c9a2:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    c9a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9aa:	781b      	ldrb	r3, [r3, #0]
    c9ac:	4413      	add	r3, r2
    c9ae:	b2da      	uxtb	r2, r3
    c9b0:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    c9b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9b8:	701a      	strb	r2, [r3, #0]
    c9ba:	f24a 53be 	movw	r3, #42430	; 0xa5be
    c9be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9c2:	781a      	ldrb	r2, [r3, #0]
    c9c4:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    c9c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9cc:	781b      	ldrb	r3, [r3, #0]
    c9ce:	4413      	add	r3, r2
    c9d0:	b2da      	uxtb	r2, r3
    c9d2:	f24a 53be 	movw	r3, #42430	; 0xa5be
    c9d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9da:	701a      	strb	r2, [r3, #0]
    c9dc:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c9e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9e4:	781b      	ldrb	r3, [r3, #0]
    c9e6:	3301      	adds	r3, #1
    c9e8:	b2da      	uxtb	r2, r3
    c9ea:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c9ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9f2:	701a      	strb	r2, [r3, #0]
    c9f4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    c9f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9fc:	781b      	ldrb	r3, [r3, #0]
    c9fe:	2bff      	cmp	r3, #255	; 0xff
    ca00:	d105      	bne.n	ca0e <send_nav_values+0x932>
    ca02:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ca06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca0a:	2200      	movs	r2, #0
    ca0c:	701a      	strb	r2, [r3, #0]
    ca0e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ca12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca16:	781b      	ldrb	r3, [r3, #0]
    ca18:	461a      	mov	r2, r3
    ca1a:	f64a 0344 	movw	r3, #43076	; 0xa844
    ca1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca22:	7819      	ldrb	r1, [r3, #0]
    ca24:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    ca28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca2c:	5499      	strb	r1, [r3, r2]
    ca2e:	f64a 0344 	movw	r3, #43076	; 0xa844
    ca32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca36:	781a      	ldrb	r2, [r3, #0]
    ca38:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    ca3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca40:	781b      	ldrb	r3, [r3, #0]
    ca42:	4413      	add	r3, r2
    ca44:	b2da      	uxtb	r2, r3
    ca46:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    ca4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca4e:	701a      	strb	r2, [r3, #0]
    ca50:	f24a 53be 	movw	r3, #42430	; 0xa5be
    ca54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca58:	781a      	ldrb	r2, [r3, #0]
    ca5a:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    ca5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca62:	781b      	ldrb	r3, [r3, #0]
    ca64:	4413      	add	r3, r2
    ca66:	b2da      	uxtb	r2, r3
    ca68:	f24a 53be 	movw	r3, #42430	; 0xa5be
    ca6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca70:	701a      	strb	r2, [r3, #0]
    ca72:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ca76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca7a:	781b      	ldrb	r3, [r3, #0]
    ca7c:	3301      	adds	r3, #1
    ca7e:	b2da      	uxtb	r2, r3
    ca80:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ca84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca88:	701a      	strb	r2, [r3, #0]
    ca8a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ca8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca92:	781b      	ldrb	r3, [r3, #0]
    ca94:	2bff      	cmp	r3, #255	; 0xff
    ca96:	d10f      	bne.n	cab8 <send_nav_values+0x9dc>
    ca98:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ca9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    caa0:	2200      	movs	r2, #0
    caa2:	701a      	strb	r2, [r3, #0]
    caa4:	e008      	b.n	cab8 <send_nav_values+0x9dc>
    caa6:	bf00      	nop
    caa8:	2000aa73 	.word	0x2000aa73
    caac:	2000a7fd 	.word	0x2000a7fd
    cab0:	2000a7fe 	.word	0x2000a7fe
    cab4:	2000a7ff 	.word	0x2000a7ff
    cab8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    cabc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cac0:	781b      	ldrb	r3, [r3, #0]
    cac2:	461a      	mov	r2, r3
    cac4:	f64a 0344 	movw	r3, #43076	; 0xa844
    cac8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cacc:	7859      	ldrb	r1, [r3, #1]
    cace:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    cad2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cad6:	5499      	strb	r1, [r3, r2]
    cad8:	4bd1      	ldr	r3, [pc, #836]	; (ce20 <send_nav_values+0xd44>)
    cada:	781a      	ldrb	r2, [r3, #0]
    cadc:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    cae0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cae4:	781b      	ldrb	r3, [r3, #0]
    cae6:	4413      	add	r3, r2
    cae8:	b2da      	uxtb	r2, r3
    caea:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    caee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    caf2:	701a      	strb	r2, [r3, #0]
    caf4:	f24a 53be 	movw	r3, #42430	; 0xa5be
    caf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cafc:	781a      	ldrb	r2, [r3, #0]
    cafe:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    cb02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb06:	781b      	ldrb	r3, [r3, #0]
    cb08:	4413      	add	r3, r2
    cb0a:	b2da      	uxtb	r2, r3
    cb0c:	f24a 53be 	movw	r3, #42430	; 0xa5be
    cb10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb14:	701a      	strb	r2, [r3, #0]
    cb16:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    cb1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb1e:	781b      	ldrb	r3, [r3, #0]
    cb20:	3301      	adds	r3, #1
    cb22:	b2da      	uxtb	r2, r3
    cb24:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    cb28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb2c:	701a      	strb	r2, [r3, #0]
    cb2e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    cb32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb36:	781b      	ldrb	r3, [r3, #0]
    cb38:	2bff      	cmp	r3, #255	; 0xff
    cb3a:	d105      	bne.n	cb48 <send_nav_values+0xa6c>
    cb3c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    cb40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb44:	2200      	movs	r2, #0
    cb46:	701a      	strb	r2, [r3, #0]
    cb48:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    cb4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb50:	781b      	ldrb	r3, [r3, #0]
    cb52:	461a      	mov	r2, r3
    cb54:	f64a 0344 	movw	r3, #43076	; 0xa844
    cb58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb5c:	7899      	ldrb	r1, [r3, #2]
    cb5e:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    cb62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb66:	5499      	strb	r1, [r3, r2]
    cb68:	4bae      	ldr	r3, [pc, #696]	; (ce24 <send_nav_values+0xd48>)
    cb6a:	781a      	ldrb	r2, [r3, #0]
    cb6c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    cb70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb74:	781b      	ldrb	r3, [r3, #0]
    cb76:	4413      	add	r3, r2
    cb78:	b2da      	uxtb	r2, r3
    cb7a:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    cb7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb82:	701a      	strb	r2, [r3, #0]
    cb84:	f24a 53be 	movw	r3, #42430	; 0xa5be
    cb88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb8c:	781a      	ldrb	r2, [r3, #0]
    cb8e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    cb92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb96:	781b      	ldrb	r3, [r3, #0]
    cb98:	4413      	add	r3, r2
    cb9a:	b2da      	uxtb	r2, r3
    cb9c:	f24a 53be 	movw	r3, #42430	; 0xa5be
    cba0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cba4:	701a      	strb	r2, [r3, #0]
    cba6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    cbaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbae:	781b      	ldrb	r3, [r3, #0]
    cbb0:	3301      	adds	r3, #1
    cbb2:	b2da      	uxtb	r2, r3
    cbb4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    cbb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbbc:	701a      	strb	r2, [r3, #0]
    cbbe:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    cbc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbc6:	781b      	ldrb	r3, [r3, #0]
    cbc8:	2bff      	cmp	r3, #255	; 0xff
    cbca:	d105      	bne.n	cbd8 <send_nav_values+0xafc>
    cbcc:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    cbd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbd4:	2200      	movs	r2, #0
    cbd6:	701a      	strb	r2, [r3, #0]
    cbd8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    cbdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbe0:	781b      	ldrb	r3, [r3, #0]
    cbe2:	461a      	mov	r2, r3
    cbe4:	f64a 0344 	movw	r3, #43076	; 0xa844
    cbe8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbec:	78d9      	ldrb	r1, [r3, #3]
    cbee:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    cbf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbf6:	5499      	strb	r1, [r3, r2]
    cbf8:	4b8b      	ldr	r3, [pc, #556]	; (ce28 <send_nav_values+0xd4c>)
    cbfa:	781a      	ldrb	r2, [r3, #0]
    cbfc:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    cc00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc04:	781b      	ldrb	r3, [r3, #0]
    cc06:	4413      	add	r3, r2
    cc08:	b2da      	uxtb	r2, r3
    cc0a:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    cc0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc12:	701a      	strb	r2, [r3, #0]
    cc14:	f24a 53be 	movw	r3, #42430	; 0xa5be
    cc18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc1c:	781a      	ldrb	r2, [r3, #0]
    cc1e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    cc22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc26:	781b      	ldrb	r3, [r3, #0]
    cc28:	4413      	add	r3, r2
    cc2a:	b2da      	uxtb	r2, r3
    cc2c:	f24a 53be 	movw	r3, #42430	; 0xa5be
    cc30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc34:	701a      	strb	r2, [r3, #0]
    cc36:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    cc3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc3e:	781b      	ldrb	r3, [r3, #0]
    cc40:	3301      	adds	r3, #1
    cc42:	b2da      	uxtb	r2, r3
    cc44:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    cc48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc4c:	701a      	strb	r2, [r3, #0]
    cc4e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    cc52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc56:	781b      	ldrb	r3, [r3, #0]
    cc58:	2bff      	cmp	r3, #255	; 0xff
    cc5a:	d105      	bne.n	cc68 <send_nav_values+0xb8c>
    cc5c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    cc60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc64:	2200      	movs	r2, #0
    cc66:	701a      	strb	r2, [r3, #0]
    cc68:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    cc6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc70:	781b      	ldrb	r3, [r3, #0]
    cc72:	461a      	mov	r2, r3
    cc74:	f240 1320 	movw	r3, #288	; 0x120
    cc78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc7c:	7819      	ldrb	r1, [r3, #0]
    cc7e:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    cc82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc86:	5499      	strb	r1, [r3, r2]
    cc88:	f240 1320 	movw	r3, #288	; 0x120
    cc8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc90:	781a      	ldrb	r2, [r3, #0]
    cc92:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    cc96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc9a:	781b      	ldrb	r3, [r3, #0]
    cc9c:	4413      	add	r3, r2
    cc9e:	b2da      	uxtb	r2, r3
    cca0:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    cca4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cca8:	701a      	strb	r2, [r3, #0]
    ccaa:	f24a 53be 	movw	r3, #42430	; 0xa5be
    ccae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ccb2:	781a      	ldrb	r2, [r3, #0]
    ccb4:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    ccb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ccbc:	781b      	ldrb	r3, [r3, #0]
    ccbe:	4413      	add	r3, r2
    ccc0:	b2da      	uxtb	r2, r3
    ccc2:	f24a 53be 	movw	r3, #42430	; 0xa5be
    ccc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ccca:	701a      	strb	r2, [r3, #0]
    cccc:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ccd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ccd4:	781b      	ldrb	r3, [r3, #0]
    ccd6:	3301      	adds	r3, #1
    ccd8:	b2da      	uxtb	r2, r3
    ccda:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ccde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cce2:	701a      	strb	r2, [r3, #0]
    cce4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    cce8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ccec:	781b      	ldrb	r3, [r3, #0]
    ccee:	2bff      	cmp	r3, #255	; 0xff
    ccf0:	d105      	bne.n	ccfe <send_nav_values+0xc22>
    ccf2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ccf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ccfa:	2200      	movs	r2, #0
    ccfc:	701a      	strb	r2, [r3, #0]
    ccfe:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    cd02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd06:	781b      	ldrb	r3, [r3, #0]
    cd08:	461a      	mov	r2, r3
    cd0a:	f240 1320 	movw	r3, #288	; 0x120
    cd0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd12:	7859      	ldrb	r1, [r3, #1]
    cd14:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    cd18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd1c:	5499      	strb	r1, [r3, r2]
    cd1e:	4b43      	ldr	r3, [pc, #268]	; (ce2c <send_nav_values+0xd50>)
    cd20:	781a      	ldrb	r2, [r3, #0]
    cd22:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    cd26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd2a:	781b      	ldrb	r3, [r3, #0]
    cd2c:	4413      	add	r3, r2
    cd2e:	b2da      	uxtb	r2, r3
    cd30:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    cd34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd38:	701a      	strb	r2, [r3, #0]
    cd3a:	f24a 53be 	movw	r3, #42430	; 0xa5be
    cd3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd42:	781a      	ldrb	r2, [r3, #0]
    cd44:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    cd48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd4c:	781b      	ldrb	r3, [r3, #0]
    cd4e:	4413      	add	r3, r2
    cd50:	b2da      	uxtb	r2, r3
    cd52:	f24a 53be 	movw	r3, #42430	; 0xa5be
    cd56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd5a:	701a      	strb	r2, [r3, #0]
    cd5c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    cd60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd64:	781b      	ldrb	r3, [r3, #0]
    cd66:	3301      	adds	r3, #1
    cd68:	b2da      	uxtb	r2, r3
    cd6a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    cd6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd72:	701a      	strb	r2, [r3, #0]
    cd74:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    cd78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd7c:	781b      	ldrb	r3, [r3, #0]
    cd7e:	2bff      	cmp	r3, #255	; 0xff
    cd80:	d105      	bne.n	cd8e <send_nav_values+0xcb2>
    cd82:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    cd86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd8a:	2200      	movs	r2, #0
    cd8c:	701a      	strb	r2, [r3, #0]
    cd8e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    cd92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd96:	781b      	ldrb	r3, [r3, #0]
    cd98:	461a      	mov	r2, r3
    cd9a:	f240 1320 	movw	r3, #288	; 0x120
    cd9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cda2:	7899      	ldrb	r1, [r3, #2]
    cda4:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    cda8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cdac:	5499      	strb	r1, [r3, r2]
    cdae:	4b20      	ldr	r3, [pc, #128]	; (ce30 <send_nav_values+0xd54>)
    cdb0:	781a      	ldrb	r2, [r3, #0]
    cdb2:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    cdb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cdba:	781b      	ldrb	r3, [r3, #0]
    cdbc:	4413      	add	r3, r2
    cdbe:	b2da      	uxtb	r2, r3
    cdc0:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    cdc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cdc8:	701a      	strb	r2, [r3, #0]
    cdca:	f24a 53be 	movw	r3, #42430	; 0xa5be
    cdce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cdd2:	781a      	ldrb	r2, [r3, #0]
    cdd4:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    cdd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cddc:	781b      	ldrb	r3, [r3, #0]
    cdde:	4413      	add	r3, r2
    cde0:	b2da      	uxtb	r2, r3
    cde2:	f24a 53be 	movw	r3, #42430	; 0xa5be
    cde6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cdea:	701a      	strb	r2, [r3, #0]
    cdec:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    cdf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cdf4:	781b      	ldrb	r3, [r3, #0]
    cdf6:	3301      	adds	r3, #1
    cdf8:	b2da      	uxtb	r2, r3
    cdfa:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    cdfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce02:	701a      	strb	r2, [r3, #0]
    ce04:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ce08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce0c:	781b      	ldrb	r3, [r3, #0]
    ce0e:	2bff      	cmp	r3, #255	; 0xff
    ce10:	d110      	bne.n	ce34 <send_nav_values+0xd58>
    ce12:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ce16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce1a:	2200      	movs	r2, #0
    ce1c:	701a      	strb	r2, [r3, #0]
    ce1e:	e009      	b.n	ce34 <send_nav_values+0xd58>
    ce20:	2000a845 	.word	0x2000a845
    ce24:	2000a846 	.word	0x2000a846
    ce28:	2000a847 	.word	0x2000a847
    ce2c:	20000121 	.word	0x20000121
    ce30:	20000122 	.word	0x20000122
    ce34:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ce38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce3c:	781b      	ldrb	r3, [r3, #0]
    ce3e:	461a      	mov	r2, r3
    ce40:	f240 1320 	movw	r3, #288	; 0x120
    ce44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce48:	78d9      	ldrb	r1, [r3, #3]
    ce4a:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    ce4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce52:	5499      	strb	r1, [r3, r2]
    ce54:	4bc2      	ldr	r3, [pc, #776]	; (d160 <send_nav_values+0x1084>)
    ce56:	781a      	ldrb	r2, [r3, #0]
    ce58:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    ce5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce60:	781b      	ldrb	r3, [r3, #0]
    ce62:	4413      	add	r3, r2
    ce64:	b2da      	uxtb	r2, r3
    ce66:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    ce6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce6e:	701a      	strb	r2, [r3, #0]
    ce70:	f24a 53be 	movw	r3, #42430	; 0xa5be
    ce74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce78:	781a      	ldrb	r2, [r3, #0]
    ce7a:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    ce7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce82:	781b      	ldrb	r3, [r3, #0]
    ce84:	4413      	add	r3, r2
    ce86:	b2da      	uxtb	r2, r3
    ce88:	f24a 53be 	movw	r3, #42430	; 0xa5be
    ce8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce90:	701a      	strb	r2, [r3, #0]
    ce92:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ce96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce9a:	781b      	ldrb	r3, [r3, #0]
    ce9c:	3301      	adds	r3, #1
    ce9e:	b2da      	uxtb	r2, r3
    cea0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    cea4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cea8:	701a      	strb	r2, [r3, #0]
    ceaa:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ceae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ceb2:	781b      	ldrb	r3, [r3, #0]
    ceb4:	2bff      	cmp	r3, #255	; 0xff
    ceb6:	d105      	bne.n	cec4 <send_nav_values+0xde8>
    ceb8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    cebc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cec0:	2200      	movs	r2, #0
    cec2:	701a      	strb	r2, [r3, #0]
    cec4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    cec8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cecc:	781b      	ldrb	r3, [r3, #0]
    cece:	461a      	mov	r2, r3
    ced0:	f64a 0348 	movw	r3, #43080	; 0xa848
    ced4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ced8:	7819      	ldrb	r1, [r3, #0]
    ceda:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    cede:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cee2:	5499      	strb	r1, [r3, r2]
    cee4:	f64a 0348 	movw	r3, #43080	; 0xa848
    cee8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ceec:	781a      	ldrb	r2, [r3, #0]
    ceee:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    cef2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cef6:	781b      	ldrb	r3, [r3, #0]
    cef8:	4413      	add	r3, r2
    cefa:	b2da      	uxtb	r2, r3
    cefc:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    cf00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf04:	701a      	strb	r2, [r3, #0]
    cf06:	f24a 53be 	movw	r3, #42430	; 0xa5be
    cf0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf0e:	781a      	ldrb	r2, [r3, #0]
    cf10:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    cf14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf18:	781b      	ldrb	r3, [r3, #0]
    cf1a:	4413      	add	r3, r2
    cf1c:	b2da      	uxtb	r2, r3
    cf1e:	f24a 53be 	movw	r3, #42430	; 0xa5be
    cf22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf26:	701a      	strb	r2, [r3, #0]
    cf28:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    cf2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf30:	781b      	ldrb	r3, [r3, #0]
    cf32:	3301      	adds	r3, #1
    cf34:	b2da      	uxtb	r2, r3
    cf36:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    cf3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf3e:	701a      	strb	r2, [r3, #0]
    cf40:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    cf44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf48:	781b      	ldrb	r3, [r3, #0]
    cf4a:	2bff      	cmp	r3, #255	; 0xff
    cf4c:	d105      	bne.n	cf5a <send_nav_values+0xe7e>
    cf4e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    cf52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf56:	2200      	movs	r2, #0
    cf58:	701a      	strb	r2, [r3, #0]
    cf5a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    cf5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf62:	781b      	ldrb	r3, [r3, #0]
    cf64:	461a      	mov	r2, r3
    cf66:	f64a 0348 	movw	r3, #43080	; 0xa848
    cf6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf6e:	7859      	ldrb	r1, [r3, #1]
    cf70:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    cf74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf78:	5499      	strb	r1, [r3, r2]
    cf7a:	4b7a      	ldr	r3, [pc, #488]	; (d164 <send_nav_values+0x1088>)
    cf7c:	781a      	ldrb	r2, [r3, #0]
    cf7e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    cf82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf86:	781b      	ldrb	r3, [r3, #0]
    cf88:	4413      	add	r3, r2
    cf8a:	b2da      	uxtb	r2, r3
    cf8c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    cf90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf94:	701a      	strb	r2, [r3, #0]
    cf96:	f24a 53be 	movw	r3, #42430	; 0xa5be
    cf9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf9e:	781a      	ldrb	r2, [r3, #0]
    cfa0:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    cfa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfa8:	781b      	ldrb	r3, [r3, #0]
    cfaa:	4413      	add	r3, r2
    cfac:	b2da      	uxtb	r2, r3
    cfae:	f24a 53be 	movw	r3, #42430	; 0xa5be
    cfb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfb6:	701a      	strb	r2, [r3, #0]
    cfb8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    cfbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfc0:	781b      	ldrb	r3, [r3, #0]
    cfc2:	3301      	adds	r3, #1
    cfc4:	b2da      	uxtb	r2, r3
    cfc6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    cfca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfce:	701a      	strb	r2, [r3, #0]
    cfd0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    cfd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfd8:	781b      	ldrb	r3, [r3, #0]
    cfda:	2bff      	cmp	r3, #255	; 0xff
    cfdc:	d105      	bne.n	cfea <send_nav_values+0xf0e>
    cfde:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    cfe2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfe6:	2200      	movs	r2, #0
    cfe8:	701a      	strb	r2, [r3, #0]
    cfea:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    cfee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cff2:	781b      	ldrb	r3, [r3, #0]
    cff4:	461a      	mov	r2, r3
    cff6:	f64a 0348 	movw	r3, #43080	; 0xa848
    cffa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cffe:	7899      	ldrb	r1, [r3, #2]
    d000:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    d004:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d008:	5499      	strb	r1, [r3, r2]
    d00a:	4b57      	ldr	r3, [pc, #348]	; (d168 <send_nav_values+0x108c>)
    d00c:	781a      	ldrb	r2, [r3, #0]
    d00e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    d012:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d016:	781b      	ldrb	r3, [r3, #0]
    d018:	4413      	add	r3, r2
    d01a:	b2da      	uxtb	r2, r3
    d01c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    d020:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d024:	701a      	strb	r2, [r3, #0]
    d026:	f24a 53be 	movw	r3, #42430	; 0xa5be
    d02a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d02e:	781a      	ldrb	r2, [r3, #0]
    d030:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    d034:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d038:	781b      	ldrb	r3, [r3, #0]
    d03a:	4413      	add	r3, r2
    d03c:	b2da      	uxtb	r2, r3
    d03e:	f24a 53be 	movw	r3, #42430	; 0xa5be
    d042:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d046:	701a      	strb	r2, [r3, #0]
    d048:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    d04c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d050:	781b      	ldrb	r3, [r3, #0]
    d052:	3301      	adds	r3, #1
    d054:	b2da      	uxtb	r2, r3
    d056:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    d05a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d05e:	701a      	strb	r2, [r3, #0]
    d060:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    d064:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d068:	781b      	ldrb	r3, [r3, #0]
    d06a:	2bff      	cmp	r3, #255	; 0xff
    d06c:	d105      	bne.n	d07a <send_nav_values+0xf9e>
    d06e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    d072:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d076:	2200      	movs	r2, #0
    d078:	701a      	strb	r2, [r3, #0]
    d07a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    d07e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d082:	781b      	ldrb	r3, [r3, #0]
    d084:	461a      	mov	r2, r3
    d086:	f64a 0348 	movw	r3, #43080	; 0xa848
    d08a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d08e:	78d9      	ldrb	r1, [r3, #3]
    d090:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    d094:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d098:	5499      	strb	r1, [r3, r2]
    d09a:	4b34      	ldr	r3, [pc, #208]	; (d16c <send_nav_values+0x1090>)
    d09c:	781a      	ldrb	r2, [r3, #0]
    d09e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    d0a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0a6:	781b      	ldrb	r3, [r3, #0]
    d0a8:	4413      	add	r3, r2
    d0aa:	b2da      	uxtb	r2, r3
    d0ac:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    d0b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0b4:	701a      	strb	r2, [r3, #0]
    d0b6:	f24a 53be 	movw	r3, #42430	; 0xa5be
    d0ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0be:	781a      	ldrb	r2, [r3, #0]
    d0c0:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    d0c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0c8:	781b      	ldrb	r3, [r3, #0]
    d0ca:	4413      	add	r3, r2
    d0cc:	b2da      	uxtb	r2, r3
    d0ce:	f24a 53be 	movw	r3, #42430	; 0xa5be
    d0d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0d6:	701a      	strb	r2, [r3, #0]
    d0d8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    d0dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0e0:	781b      	ldrb	r3, [r3, #0]
    d0e2:	3301      	adds	r3, #1
    d0e4:	b2da      	uxtb	r2, r3
    d0e6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    d0ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0ee:	701a      	strb	r2, [r3, #0]
    d0f0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    d0f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0f8:	781b      	ldrb	r3, [r3, #0]
    d0fa:	2bff      	cmp	r3, #255	; 0xff
    d0fc:	d105      	bne.n	d10a <send_nav_values+0x102e>
    d0fe:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    d102:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d106:	2200      	movs	r2, #0
    d108:	701a      	strb	r2, [r3, #0]
    d10a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    d10e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d112:	781b      	ldrb	r3, [r3, #0]
    d114:	461a      	mov	r2, r3
    d116:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    d11a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d11e:	7819      	ldrb	r1, [r3, #0]
    d120:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    d124:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d128:	5499      	strb	r1, [r3, r2]
    d12a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    d12e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d132:	781b      	ldrb	r3, [r3, #0]
    d134:	3301      	adds	r3, #1
    d136:	b2da      	uxtb	r2, r3
    d138:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    d13c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d140:	701a      	strb	r2, [r3, #0]
    d142:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    d146:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d14a:	781b      	ldrb	r3, [r3, #0]
    d14c:	2bff      	cmp	r3, #255	; 0xff
    d14e:	d10f      	bne.n	d170 <send_nav_values+0x1094>
    d150:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    d154:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d158:	2200      	movs	r2, #0
    d15a:	701a      	strb	r2, [r3, #0]
    d15c:	e008      	b.n	d170 <send_nav_values+0x1094>
    d15e:	bf00      	nop
    d160:	20000123 	.word	0x20000123
    d164:	2000a849 	.word	0x2000a849
    d168:	2000a84a 	.word	0x2000a84a
    d16c:	2000a84b 	.word	0x2000a84b
    d170:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    d174:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d178:	781b      	ldrb	r3, [r3, #0]
    d17a:	461a      	mov	r2, r3
    d17c:	f24a 53be 	movw	r3, #42430	; 0xa5be
    d180:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d184:	7819      	ldrb	r1, [r3, #0]
    d186:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    d18a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d18e:	5499      	strb	r1, [r3, r2]
    d190:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    d194:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d198:	781b      	ldrb	r3, [r3, #0]
    d19a:	3301      	adds	r3, #1
    d19c:	b2da      	uxtb	r2, r3
    d19e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    d1a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1a6:	701a      	strb	r2, [r3, #0]
    d1a8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    d1ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1b0:	781b      	ldrb	r3, [r3, #0]
    d1b2:	2bff      	cmp	r3, #255	; 0xff
    d1b4:	d105      	bne.n	d1c2 <send_nav_values+0x10e6>
    d1b6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    d1ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1be:	2200      	movs	r2, #0
    d1c0:	701a      	strb	r2, [r3, #0]
    d1c2:	f242 0339 	movw	r3, #8249	; 0x2039
    d1c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1ca:	781b      	ldrb	r3, [r3, #0]
    d1cc:	b2db      	uxtb	r3, r3
    d1ce:	f003 0310 	and.w	r3, r3, #16
    d1d2:	2b00      	cmp	r3, #0
    d1d4:	d15a      	bne.n	d28c <send_nav_values+0x11b0>
    d1d6:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    d1da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1de:	781b      	ldrb	r3, [r3, #0]
    d1e0:	b2db      	uxtb	r3, r3
    d1e2:	461a      	mov	r2, r3
    d1e4:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    d1e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1ec:	5c9a      	ldrb	r2, [r3, r2]
    d1ee:	f24a 53bb 	movw	r3, #42427	; 0xa5bb
    d1f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1f6:	701a      	strb	r2, [r3, #0]
    d1f8:	f24a 53bc 	movw	r3, #42428	; 0xa5bc
    d1fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d200:	2200      	movs	r2, #0
    d202:	701a      	strb	r2, [r3, #0]
    d204:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    d208:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d20c:	781b      	ldrb	r3, [r3, #0]
    d20e:	b2db      	uxtb	r3, r3
    d210:	3301      	adds	r3, #1
    d212:	b2da      	uxtb	r2, r3
    d214:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    d218:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d21c:	701a      	strb	r2, [r3, #0]
    d21e:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    d222:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d226:	781b      	ldrb	r3, [r3, #0]
    d228:	b2db      	uxtb	r3, r3
    d22a:	2bff      	cmp	r3, #255	; 0xff
    d22c:	d105      	bne.n	d23a <send_nav_values+0x115e>
    d22e:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    d232:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d236:	2200      	movs	r2, #0
    d238:	701a      	strb	r2, [r3, #0]
    d23a:	f242 0338 	movw	r3, #8248	; 0x2038
    d23e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d242:	f242 0238 	movw	r2, #8248	; 0x2038
    d246:	f2c2 0200 	movt	r2, #8192	; 0x2000
    d24a:	7812      	ldrb	r2, [r2, #0]
    d24c:	b2d2      	uxtb	r2, r2
    d24e:	f042 0201 	orr.w	r2, r2, #1
    d252:	b2d2      	uxtb	r2, r2
    d254:	701a      	strb	r2, [r3, #0]
    d256:	f242 0339 	movw	r3, #8249	; 0x2039
    d25a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d25e:	f242 0239 	movw	r2, #8249	; 0x2039
    d262:	f2c2 0200 	movt	r2, #8192	; 0x2000
    d266:	7812      	ldrb	r2, [r2, #0]
    d268:	b2d2      	uxtb	r2, r2
    d26a:	f042 0210 	orr.w	r2, r2, #16
    d26e:	b2d2      	uxtb	r2, r2
    d270:	701a      	strb	r2, [r3, #0]
    d272:	e00b      	b.n	d28c <send_nav_values+0x11b0>
    d274:	f24a 43b8 	movw	r3, #42168	; 0xa4b8
    d278:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d27c:	781b      	ldrb	r3, [r3, #0]
    d27e:	3301      	adds	r3, #1
    d280:	b2da      	uxtb	r2, r3
    d282:	f24a 43b8 	movw	r3, #42168	; 0xa4b8
    d286:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d28a:	701a      	strb	r2, [r3, #0]
}
    d28c:	46bd      	mov	sp, r7
    d28e:	f85d 7b04 	ldr.w	r7, [sp], #4
    d292:	4770      	bx	lr

0000d294 <course_run>:

void course_run(void){
    d294:	b580      	push	{r7, lr}
    d296:	af00      	add	r7, sp, #0
  
  if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) 
    d298:	f24a 439c 	movw	r3, #42140	; 0xa49c
    d29c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d2a0:	781b      	ldrb	r3, [r3, #0]
    d2a2:	2b02      	cmp	r3, #2
    d2a4:	d006      	beq.n	d2b4 <course_run+0x20>
    d2a6:	f24a 439c 	movw	r3, #42140	; 0xa49c
    d2aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d2ae:	781b      	ldrb	r3, [r3, #0]
    d2b0:	2b03      	cmp	r3, #3
    d2b2:	d112      	bne.n	d2da <course_run+0x46>
  {
    if (lateral_mode >= LATERAL_MODE_COURSE)
    d2b4:	f24a 439e 	movw	r3, #42142	; 0xa49e
    d2b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d2bc:	781b      	ldrb	r3, [r3, #0]
    d2be:	2b02      	cmp	r3, #2
    d2c0:	d901      	bls.n	d2c6 <course_run+0x32>
      course_pid_run(); /* aka compute nav_desired_roll */
    d2c2:	f003 faf1 	bl	108a8 <course_pid_run>
    desired_roll = nav_desired_roll;
    d2c6:	f64a 0340 	movw	r3, #43072	; 0xa840
    d2ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d2ce:	681a      	ldr	r2, [r3, #0]
    d2d0:	f24a 73e4 	movw	r3, #42980	; 0xa7e4
    d2d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d2d8:	601a      	str	r2, [r3, #0]
  }  
  //vPrintString("S_17 Navigation task end!\n\r");
}
    d2da:	bd80      	pop	{r7, pc}

0000d2dc <altitude_control_task>:

void altitude_control_task(void)
{
    d2dc:	b580      	push	{r7, lr}
    d2de:	af00      	add	r7, sp, #0
	//vPrintString("S_18 navigation_task start! \n\r"); //SunnyBeike
	if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) {
    d2e0:	f24a 439c 	movw	r3, #42140	; 0xa49c
    d2e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d2e8:	781b      	ldrb	r3, [r3, #0]
    d2ea:	2b02      	cmp	r3, #2
    d2ec:	d006      	beq.n	d2fc <altitude_control_task+0x20>
    d2ee:	f24a 439c 	movw	r3, #42140	; 0xa49c
    d2f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d2f6:	781b      	ldrb	r3, [r3, #0]
    d2f8:	2b03      	cmp	r3, #3
    d2fa:	d108      	bne.n	d30e <altitude_control_task+0x32>
		if (vertical_mode == VERTICAL_MODE_AUTO_ALT)
    d2fc:	f24a 439d 	movw	r3, #42141	; 0xa49d
    d300:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d304:	781b      	ldrb	r3, [r3, #0]
    d306:	2b03      	cmp	r3, #3
    d308:	d101      	bne.n	d30e <altitude_control_task+0x32>
      			altitude_pid_run();
    d30a:	f003 fd55 	bl	10db8 <altitude_pid_run>
	}
	//vPrintString("S_18 navigation_task end! \n\r"); //SunnyBeike
}
    d30e:	bd80      	pop	{r7, pc}

0000d310 <climb_control_task>:
void climb_control_task(void)
{
    d310:	b580      	push	{r7, lr}
    d312:	af00      	add	r7, sp, #0
	//vPrintString("S_19 navigation_task start! \n\r"); //SunnyBeike
   if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) 
    d314:	f24a 439c 	movw	r3, #42140	; 0xa49c
    d318:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d31c:	781b      	ldrb	r3, [r3, #0]
    d31e:	2b02      	cmp	r3, #2
    d320:	d006      	beq.n	d330 <climb_control_task+0x20>
    d322:	f24a 439c 	movw	r3, #42140	; 0xa49c
    d326:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d32a:	781b      	ldrb	r3, [r3, #0]
    d32c:	2b03      	cmp	r3, #3
    d32e:	d135      	bne.n	d39c <climb_control_task+0x8c>
   {
	if (vertical_mode >= VERTICAL_MODE_AUTO_CLIMB)
    d330:	f24a 439d 	movw	r3, #42141	; 0xa49d
    d334:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d338:	781b      	ldrb	r3, [r3, #0]
    d33a:	2b01      	cmp	r3, #1
    d33c:	d901      	bls.n	d342 <climb_control_task+0x32>
        	climb_pid_run();
    d33e:	f003 fb6b 	bl	10a18 <climb_pid_run>
   	if (vertical_mode == VERTICAL_MODE_AUTO_GAZ)
    d342:	f24a 439d 	movw	r3, #42141	; 0xa49d
    d346:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d34a:	781b      	ldrb	r3, [r3, #0]
    d34c:	2b01      	cmp	r3, #1
    d34e:	d10a      	bne.n	d366 <climb_control_task+0x56>
   		 desired_gaz = nav_desired_gaz;
    d350:	f64a 0338 	movw	r3, #43064	; 0xa838
    d354:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d358:	881b      	ldrh	r3, [r3, #0]
    d35a:	b29a      	uxth	r2, r3
    d35c:	f24a 73ec 	movw	r3, #42988	; 0xa7ec
    d360:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d364:	801a      	strh	r2, [r3, #0]
   	if (low_battery || (!estimator_flight_time && !launch))
    d366:	f24a 43a5 	movw	r3, #42149	; 0xa4a5
    d36a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d36e:	781b      	ldrb	r3, [r3, #0]
    d370:	2b00      	cmp	r3, #0
    d372:	d10d      	bne.n	d390 <climb_control_task+0x80>
    d374:	f64a 239c 	movw	r3, #43676	; 0xaa9c
    d378:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d37c:	881b      	ldrh	r3, [r3, #0]
    d37e:	2b00      	cmp	r3, #0
    d380:	d10c      	bne.n	d39c <climb_control_task+0x8c>
    d382:	f24a 43b0 	movw	r3, #42160	; 0xa4b0
    d386:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d38a:	781b      	ldrb	r3, [r3, #0]
    d38c:	2b00      	cmp	r3, #0
    d38e:	d105      	bne.n	d39c <climb_control_task+0x8c>
   		 desired_gaz = 0.;
    d390:	f24a 73ec 	movw	r3, #42988	; 0xa7ec
    d394:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d398:	2200      	movs	r2, #0
    d39a:	801a      	strh	r2, [r3, #0]
  }  
	//vPrintString("S_19 navigation_task end! \n\r"); //SunnyBeike
}
    d39c:	bd80      	pop	{r7, pc}
    d39e:	bf00      	nop

0000d3a0 <stabilisation_task>:
//#endif
}
*/

void stabilisation_task(void)
{
    d3a0:	b580      	push	{r7, lr}
    d3a2:	af00      	add	r7, sp, #0
	//vPrintString("S_6 stabilisation_task start! \n\r"); //SunnyBeike
    ir_update();
    d3a4:	f003 f926 	bl	105f4 <ir_update>
    estimator_update_state_infrared();
    d3a8:	f006 fbac 	bl	13b04 <estimator_update_state_infrared>
    roll_pitch_pid_run(); // Set  desired_aileron & desired_elevator
    d3ac:	f003 f990 	bl	106d0 <roll_pitch_pid_run>
    to_fbw.channels[RADIO_THROTTLE] = desired_gaz; // desired_gaz is set upon GPS message reception
    d3b0:	f24a 73ec 	movw	r3, #42988	; 0xa7ec
    d3b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d3b8:	881a      	ldrh	r2, [r3, #0]
    d3ba:	f24a 53d8 	movw	r3, #42456	; 0xa5d8
    d3be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d3c2:	801a      	strh	r2, [r3, #0]
    to_fbw.channels[RADIO_ROLL] = desired_aileron;
    d3c4:	f24a 73ee 	movw	r3, #42990	; 0xa7ee
    d3c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d3cc:	881a      	ldrh	r2, [r3, #0]
    d3ce:	f24a 53d8 	movw	r3, #42456	; 0xa5d8
    d3d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d3d6:	805a      	strh	r2, [r3, #2]
#ifndef ANTON_T7
    to_fbw.channels[RADIO_PITCH] = desired_elevator;
    d3d8:	f24a 73f0 	movw	r3, #42992	; 0xa7f0
    d3dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d3e0:	881a      	ldrh	r2, [r3, #0]
    d3e2:	f24a 53d8 	movw	r3, #42456	; 0xa5d8
    d3e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d3ea:	809a      	strh	r2, [r3, #4]
#endif
    
    // Code for camera stabilization, FIXME put that elsewhere
    to_fbw.channels[RADIO_GAIN1] = TRIM_PPRZ(MAX_PPRZ/0.75*(-estimator_phi));
    d3ec:	f64a 2378 	movw	r3, #43640	; 0xaa78
    d3f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d3f4:	681b      	ldr	r3, [r3, #0]
    d3f6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    d3fa:	4618      	mov	r0, r3
    d3fc:	f009 f81c 	bl	16438 <__aeabi_f2d>
    d400:	4602      	mov	r2, r0
    d402:	460b      	mov	r3, r1
    d404:	4610      	mov	r0, r2
    d406:	4619      	mov	r1, r3
    d408:	f04f 0200 	mov.w	r2, #0
    d40c:	f04f 0300 	mov.w	r3, #0
    d410:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    d414:	f009 f864 	bl	164e0 <__aeabi_dmul>
    d418:	4602      	mov	r2, r0
    d41a:	460b      	mov	r3, r1
    d41c:	4610      	mov	r0, r2
    d41e:	4619      	mov	r1, r3
    d420:	f04f 0200 	mov.w	r2, #0
    d424:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    d428:	f2cc 03c2 	movt	r3, #49346	; 0xc0c2
    d42c:	f009 faca 	bl	169c4 <__aeabi_dcmplt>
    d430:	4603      	mov	r3, r0
    d432:	2b00      	cmp	r3, #0
    d434:	d002      	beq.n	d43c <stabilisation_task+0x9c>
    d436:	f64d 2280 	movw	r2, #55936	; 0xda80
    d43a:	e046      	b.n	d4ca <stabilisation_task+0x12a>
    d43c:	f64a 2378 	movw	r3, #43640	; 0xaa78
    d440:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d444:	681b      	ldr	r3, [r3, #0]
    d446:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    d44a:	4618      	mov	r0, r3
    d44c:	f008 fff4 	bl	16438 <__aeabi_f2d>
    d450:	4602      	mov	r2, r0
    d452:	460b      	mov	r3, r1
    d454:	4610      	mov	r0, r2
    d456:	4619      	mov	r1, r3
    d458:	f04f 0200 	mov.w	r2, #0
    d45c:	f04f 0300 	mov.w	r3, #0
    d460:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    d464:	f009 f83c 	bl	164e0 <__aeabi_dmul>
    d468:	4602      	mov	r2, r0
    d46a:	460b      	mov	r3, r1
    d46c:	4610      	mov	r0, r2
    d46e:	4619      	mov	r1, r3
    d470:	f04f 0200 	mov.w	r2, #0
    d474:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    d478:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
    d47c:	f009 fac0 	bl	16a00 <__aeabi_dcmpgt>
    d480:	4603      	mov	r3, r0
    d482:	2b00      	cmp	r3, #0
    d484:	d002      	beq.n	d48c <stabilisation_task+0xec>
    d486:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    d48a:	e01d      	b.n	d4c8 <stabilisation_task+0x128>
    d48c:	f64a 2378 	movw	r3, #43640	; 0xaa78
    d490:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d494:	681b      	ldr	r3, [r3, #0]
    d496:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    d49a:	4618      	mov	r0, r3
    d49c:	f008 ffcc 	bl	16438 <__aeabi_f2d>
    d4a0:	4602      	mov	r2, r0
    d4a2:	460b      	mov	r3, r1
    d4a4:	4610      	mov	r0, r2
    d4a6:	4619      	mov	r1, r3
    d4a8:	f04f 0200 	mov.w	r2, #0
    d4ac:	f04f 0300 	mov.w	r3, #0
    d4b0:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    d4b4:	f009 f814 	bl	164e0 <__aeabi_dmul>
    d4b8:	4602      	mov	r2, r0
    d4ba:	460b      	mov	r3, r1
    d4bc:	4610      	mov	r0, r2
    d4be:	4619      	mov	r1, r3
    d4c0:	f009 faa8 	bl	16a14 <__aeabi_d2iz>
    d4c4:	4603      	mov	r3, r0
    d4c6:	b29b      	uxth	r3, r3
    d4c8:	b29a      	uxth	r2, r3
    d4ca:	f24a 53d8 	movw	r3, #42456	; 0xa5d8
    d4ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4d2:	815a      	strh	r2, [r3, #10]
	//vPrintString("S_6 stabilisation_task end! \n\r"); //SunnyBeike
}
    d4d4:	bd80      	pop	{r7, pc}
    d4d6:	bf00      	nop

0000d4d8 <send_gps_pos>:
 * If \a estimator_flight_time is null and \a estimator_hspeed_mod is greater
 * than \a MIN_SPEED_FOR_TAKEOFF, set the \a estimator_flight_time to 1 and \a
 * launch to true (which is not set in non auto launch. Then call
 * \a DOWNLINK_SEND_TAKEOFF
 */
void send_gps_pos( void ) {
    d4d8:	b580      	push	{r7, lr}
    d4da:	af00      	add	r7, sp, #0
  gps_msg_received = FALSE;
    d4dc:	f24a 634d 	movw	r3, #42573	; 0xa64d
    d4e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4e4:	2200      	movs	r2, #0
    d4e6:	701a      	strb	r2, [r3, #0]
  if (gps_pos_available){
    d4e8:	f24a 634e 	movw	r3, #42574	; 0xa64e
    d4ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4f0:	781b      	ldrb	r3, [r3, #0]
    d4f2:	2b00      	cmp	r3, #0
    d4f4:	f001 81af 	beq.w	e856 <send_gps_pos+0x137e>
     DOWNLINK_SEND_GPS(&gps_mode, &gps_utm_east, &gps_utm_north, &gps_fcourse, &gps_falt, &gps_fspeed,&gps_fclimb, &gps_ftow);
    d4f8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    d4fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d500:	781a      	ldrb	r2, [r3, #0]
    d502:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    d506:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d50a:	781b      	ldrb	r3, [r3, #0]
    d50c:	b2db      	uxtb	r3, r3
    d50e:	429a      	cmp	r2, r3
    d510:	d313      	bcc.n	d53a <send_gps_pos+0x62>
    d512:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    d516:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d51a:	781b      	ldrb	r3, [r3, #0]
    d51c:	b2db      	uxtb	r3, r3
    d51e:	461a      	mov	r2, r3
    d520:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    d524:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d528:	781b      	ldrb	r3, [r3, #0]
    d52a:	1ad3      	subs	r3, r2, r3
    d52c:	33ff      	adds	r3, #255	; 0xff
    d52e:	2b21      	cmp	r3, #33	; 0x21
    d530:	bfd4      	ite	le
    d532:	2300      	movle	r3, #0
    d534:	2301      	movgt	r3, #1
    d536:	b2db      	uxtb	r3, r3
    d538:	e011      	b.n	d55e <send_gps_pos+0x86>
    d53a:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    d53e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d542:	781b      	ldrb	r3, [r3, #0]
    d544:	b2db      	uxtb	r3, r3
    d546:	461a      	mov	r2, r3
    d548:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    d54c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d550:	781b      	ldrb	r3, [r3, #0]
    d552:	1ad3      	subs	r3, r2, r3
    d554:	2b21      	cmp	r3, #33	; 0x21
    d556:	bfd4      	ite	le
    d558:	2300      	movle	r3, #0
    d55a:	2301      	movgt	r3, #1
    d55c:	b2db      	uxtb	r3, r3
    d55e:	2b00      	cmp	r3, #0
    d560:	f001 816b 	beq.w	e83a <send_gps_pos+0x1362>
    d564:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    d568:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d56c:	781b      	ldrb	r3, [r3, #0]
    d56e:	461a      	mov	r2, r3
    d570:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    d574:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d578:	2105      	movs	r1, #5
    d57a:	5499      	strb	r1, [r3, r2]
    d57c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    d580:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d584:	781b      	ldrb	r3, [r3, #0]
    d586:	3301      	adds	r3, #1
    d588:	b2da      	uxtb	r2, r3
    d58a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    d58e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d592:	701a      	strb	r2, [r3, #0]
    d594:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    d598:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d59c:	781b      	ldrb	r3, [r3, #0]
    d59e:	2bff      	cmp	r3, #255	; 0xff
    d5a0:	d105      	bne.n	d5ae <send_gps_pos+0xd6>
    d5a2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    d5a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5aa:	2200      	movs	r2, #0
    d5ac:	701a      	strb	r2, [r3, #0]
    d5ae:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    d5b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5b6:	781b      	ldrb	r3, [r3, #0]
    d5b8:	461a      	mov	r2, r3
    d5ba:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    d5be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5c2:	2108      	movs	r1, #8
    d5c4:	5499      	strb	r1, [r3, r2]
    d5c6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    d5ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5ce:	781b      	ldrb	r3, [r3, #0]
    d5d0:	3301      	adds	r3, #1
    d5d2:	b2da      	uxtb	r2, r3
    d5d4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    d5d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5dc:	701a      	strb	r2, [r3, #0]
    d5de:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    d5e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5e6:	781b      	ldrb	r3, [r3, #0]
    d5e8:	2bff      	cmp	r3, #255	; 0xff
    d5ea:	d105      	bne.n	d5f8 <send_gps_pos+0x120>
    d5ec:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    d5f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5f4:	2200      	movs	r2, #0
    d5f6:	701a      	strb	r2, [r3, #0]
    d5f8:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    d5fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d600:	2208      	movs	r2, #8
    d602:	701a      	strb	r2, [r3, #0]
    d604:	f24a 53be 	movw	r3, #42430	; 0xa5be
    d608:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d60c:	2208      	movs	r2, #8
    d60e:	701a      	strb	r2, [r3, #0]
    d610:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    d614:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d618:	781b      	ldrb	r3, [r3, #0]
    d61a:	461a      	mov	r2, r3
    d61c:	f24a 634c 	movw	r3, #42572	; 0xa64c
    d620:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d624:	7819      	ldrb	r1, [r3, #0]
    d626:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    d62a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d62e:	5499      	strb	r1, [r3, r2]
    d630:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    d634:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d638:	781a      	ldrb	r2, [r3, #0]
    d63a:	f24a 634c 	movw	r3, #42572	; 0xa64c
    d63e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d642:	781b      	ldrb	r3, [r3, #0]
    d644:	4413      	add	r3, r2
    d646:	b2da      	uxtb	r2, r3
    d648:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    d64c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d650:	701a      	strb	r2, [r3, #0]
    d652:	f24a 53be 	movw	r3, #42430	; 0xa5be
    d656:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d65a:	781a      	ldrb	r2, [r3, #0]
    d65c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    d660:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d664:	781b      	ldrb	r3, [r3, #0]
    d666:	4413      	add	r3, r2
    d668:	b2da      	uxtb	r2, r3
    d66a:	f24a 53be 	movw	r3, #42430	; 0xa5be
    d66e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d672:	701a      	strb	r2, [r3, #0]
    d674:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    d678:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d67c:	781b      	ldrb	r3, [r3, #0]
    d67e:	3301      	adds	r3, #1
    d680:	b2da      	uxtb	r2, r3
    d682:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    d686:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d68a:	701a      	strb	r2, [r3, #0]
    d68c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    d690:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d694:	781b      	ldrb	r3, [r3, #0]
    d696:	2bff      	cmp	r3, #255	; 0xff
    d698:	d105      	bne.n	d6a6 <send_gps_pos+0x1ce>
    d69a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    d69e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6a2:	2200      	movs	r2, #0
    d6a4:	701a      	strb	r2, [r3, #0]
    d6a6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    d6aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6ae:	781b      	ldrb	r3, [r3, #0]
    d6b0:	461a      	mov	r2, r3
    d6b2:	f24a 633c 	movw	r3, #42556	; 0xa63c
    d6b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6ba:	7819      	ldrb	r1, [r3, #0]
    d6bc:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    d6c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6c4:	5499      	strb	r1, [r3, r2]
    d6c6:	f24a 633c 	movw	r3, #42556	; 0xa63c
    d6ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6ce:	781a      	ldrb	r2, [r3, #0]
    d6d0:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    d6d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6d8:	781b      	ldrb	r3, [r3, #0]
    d6da:	4413      	add	r3, r2
    d6dc:	b2da      	uxtb	r2, r3
    d6de:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    d6e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6e6:	701a      	strb	r2, [r3, #0]
    d6e8:	f24a 53be 	movw	r3, #42430	; 0xa5be
    d6ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6f0:	781a      	ldrb	r2, [r3, #0]
    d6f2:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    d6f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6fa:	781b      	ldrb	r3, [r3, #0]
    d6fc:	4413      	add	r3, r2
    d6fe:	b2da      	uxtb	r2, r3
    d700:	f24a 53be 	movw	r3, #42430	; 0xa5be
    d704:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d708:	701a      	strb	r2, [r3, #0]
    d70a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    d70e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d712:	781b      	ldrb	r3, [r3, #0]
    d714:	3301      	adds	r3, #1
    d716:	b2da      	uxtb	r2, r3
    d718:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    d71c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d720:	701a      	strb	r2, [r3, #0]
    d722:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    d726:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d72a:	781b      	ldrb	r3, [r3, #0]
    d72c:	2bff      	cmp	r3, #255	; 0xff
    d72e:	d105      	bne.n	d73c <send_gps_pos+0x264>
    d730:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    d734:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d738:	2200      	movs	r2, #0
    d73a:	701a      	strb	r2, [r3, #0]
    d73c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    d740:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d744:	781b      	ldrb	r3, [r3, #0]
    d746:	461a      	mov	r2, r3
    d748:	f24a 633c 	movw	r3, #42556	; 0xa63c
    d74c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d750:	7859      	ldrb	r1, [r3, #1]
    d752:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    d756:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d75a:	5499      	strb	r1, [r3, r2]
    d75c:	4bd1      	ldr	r3, [pc, #836]	; (daa4 <send_gps_pos+0x5cc>)
    d75e:	781a      	ldrb	r2, [r3, #0]
    d760:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    d764:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d768:	781b      	ldrb	r3, [r3, #0]
    d76a:	4413      	add	r3, r2
    d76c:	b2da      	uxtb	r2, r3
    d76e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    d772:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d776:	701a      	strb	r2, [r3, #0]
    d778:	f24a 53be 	movw	r3, #42430	; 0xa5be
    d77c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d780:	781a      	ldrb	r2, [r3, #0]
    d782:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    d786:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d78a:	781b      	ldrb	r3, [r3, #0]
    d78c:	4413      	add	r3, r2
    d78e:	b2da      	uxtb	r2, r3
    d790:	f24a 53be 	movw	r3, #42430	; 0xa5be
    d794:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d798:	701a      	strb	r2, [r3, #0]
    d79a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    d79e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7a2:	781b      	ldrb	r3, [r3, #0]
    d7a4:	3301      	adds	r3, #1
    d7a6:	b2da      	uxtb	r2, r3
    d7a8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    d7ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7b0:	701a      	strb	r2, [r3, #0]
    d7b2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    d7b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7ba:	781b      	ldrb	r3, [r3, #0]
    d7bc:	2bff      	cmp	r3, #255	; 0xff
    d7be:	d105      	bne.n	d7cc <send_gps_pos+0x2f4>
    d7c0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    d7c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7c8:	2200      	movs	r2, #0
    d7ca:	701a      	strb	r2, [r3, #0]
    d7cc:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    d7d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7d4:	781b      	ldrb	r3, [r3, #0]
    d7d6:	461a      	mov	r2, r3
    d7d8:	f24a 633c 	movw	r3, #42556	; 0xa63c
    d7dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7e0:	7899      	ldrb	r1, [r3, #2]
    d7e2:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    d7e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7ea:	5499      	strb	r1, [r3, r2]
    d7ec:	4bae      	ldr	r3, [pc, #696]	; (daa8 <send_gps_pos+0x5d0>)
    d7ee:	781a      	ldrb	r2, [r3, #0]
    d7f0:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    d7f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7f8:	781b      	ldrb	r3, [r3, #0]
    d7fa:	4413      	add	r3, r2
    d7fc:	b2da      	uxtb	r2, r3
    d7fe:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    d802:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d806:	701a      	strb	r2, [r3, #0]
    d808:	f24a 53be 	movw	r3, #42430	; 0xa5be
    d80c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d810:	781a      	ldrb	r2, [r3, #0]
    d812:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    d816:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d81a:	781b      	ldrb	r3, [r3, #0]
    d81c:	4413      	add	r3, r2
    d81e:	b2da      	uxtb	r2, r3
    d820:	f24a 53be 	movw	r3, #42430	; 0xa5be
    d824:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d828:	701a      	strb	r2, [r3, #0]
    d82a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    d82e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d832:	781b      	ldrb	r3, [r3, #0]
    d834:	3301      	adds	r3, #1
    d836:	b2da      	uxtb	r2, r3
    d838:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    d83c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d840:	701a      	strb	r2, [r3, #0]
    d842:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    d846:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d84a:	781b      	ldrb	r3, [r3, #0]
    d84c:	2bff      	cmp	r3, #255	; 0xff
    d84e:	d105      	bne.n	d85c <send_gps_pos+0x384>
    d850:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    d854:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d858:	2200      	movs	r2, #0
    d85a:	701a      	strb	r2, [r3, #0]
    d85c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    d860:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d864:	781b      	ldrb	r3, [r3, #0]
    d866:	461a      	mov	r2, r3
    d868:	f24a 633c 	movw	r3, #42556	; 0xa63c
    d86c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d870:	78d9      	ldrb	r1, [r3, #3]
    d872:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    d876:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d87a:	5499      	strb	r1, [r3, r2]
    d87c:	4b8b      	ldr	r3, [pc, #556]	; (daac <send_gps_pos+0x5d4>)
    d87e:	781a      	ldrb	r2, [r3, #0]
    d880:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    d884:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d888:	781b      	ldrb	r3, [r3, #0]
    d88a:	4413      	add	r3, r2
    d88c:	b2da      	uxtb	r2, r3
    d88e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    d892:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d896:	701a      	strb	r2, [r3, #0]
    d898:	f24a 53be 	movw	r3, #42430	; 0xa5be
    d89c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8a0:	781a      	ldrb	r2, [r3, #0]
    d8a2:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    d8a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8aa:	781b      	ldrb	r3, [r3, #0]
    d8ac:	4413      	add	r3, r2
    d8ae:	b2da      	uxtb	r2, r3
    d8b0:	f24a 53be 	movw	r3, #42430	; 0xa5be
    d8b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8b8:	701a      	strb	r2, [r3, #0]
    d8ba:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    d8be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8c2:	781b      	ldrb	r3, [r3, #0]
    d8c4:	3301      	adds	r3, #1
    d8c6:	b2da      	uxtb	r2, r3
    d8c8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    d8cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8d0:	701a      	strb	r2, [r3, #0]
    d8d2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    d8d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8da:	781b      	ldrb	r3, [r3, #0]
    d8dc:	2bff      	cmp	r3, #255	; 0xff
    d8de:	d105      	bne.n	d8ec <send_gps_pos+0x414>
    d8e0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    d8e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8e8:	2200      	movs	r2, #0
    d8ea:	701a      	strb	r2, [r3, #0]
    d8ec:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    d8f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8f4:	781b      	ldrb	r3, [r3, #0]
    d8f6:	461a      	mov	r2, r3
    d8f8:	f24a 6340 	movw	r3, #42560	; 0xa640
    d8fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d900:	7819      	ldrb	r1, [r3, #0]
    d902:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    d906:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d90a:	5499      	strb	r1, [r3, r2]
    d90c:	f24a 6340 	movw	r3, #42560	; 0xa640
    d910:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d914:	781a      	ldrb	r2, [r3, #0]
    d916:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    d91a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d91e:	781b      	ldrb	r3, [r3, #0]
    d920:	4413      	add	r3, r2
    d922:	b2da      	uxtb	r2, r3
    d924:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    d928:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d92c:	701a      	strb	r2, [r3, #0]
    d92e:	f24a 53be 	movw	r3, #42430	; 0xa5be
    d932:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d936:	781a      	ldrb	r2, [r3, #0]
    d938:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    d93c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d940:	781b      	ldrb	r3, [r3, #0]
    d942:	4413      	add	r3, r2
    d944:	b2da      	uxtb	r2, r3
    d946:	f24a 53be 	movw	r3, #42430	; 0xa5be
    d94a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d94e:	701a      	strb	r2, [r3, #0]
    d950:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    d954:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d958:	781b      	ldrb	r3, [r3, #0]
    d95a:	3301      	adds	r3, #1
    d95c:	b2da      	uxtb	r2, r3
    d95e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    d962:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d966:	701a      	strb	r2, [r3, #0]
    d968:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    d96c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d970:	781b      	ldrb	r3, [r3, #0]
    d972:	2bff      	cmp	r3, #255	; 0xff
    d974:	d105      	bne.n	d982 <send_gps_pos+0x4aa>
    d976:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    d97a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d97e:	2200      	movs	r2, #0
    d980:	701a      	strb	r2, [r3, #0]
    d982:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    d986:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d98a:	781b      	ldrb	r3, [r3, #0]
    d98c:	461a      	mov	r2, r3
    d98e:	f24a 6340 	movw	r3, #42560	; 0xa640
    d992:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d996:	7859      	ldrb	r1, [r3, #1]
    d998:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    d99c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9a0:	5499      	strb	r1, [r3, r2]
    d9a2:	4b43      	ldr	r3, [pc, #268]	; (dab0 <send_gps_pos+0x5d8>)
    d9a4:	781a      	ldrb	r2, [r3, #0]
    d9a6:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    d9aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9ae:	781b      	ldrb	r3, [r3, #0]
    d9b0:	4413      	add	r3, r2
    d9b2:	b2da      	uxtb	r2, r3
    d9b4:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    d9b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9bc:	701a      	strb	r2, [r3, #0]
    d9be:	f24a 53be 	movw	r3, #42430	; 0xa5be
    d9c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9c6:	781a      	ldrb	r2, [r3, #0]
    d9c8:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    d9cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9d0:	781b      	ldrb	r3, [r3, #0]
    d9d2:	4413      	add	r3, r2
    d9d4:	b2da      	uxtb	r2, r3
    d9d6:	f24a 53be 	movw	r3, #42430	; 0xa5be
    d9da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9de:	701a      	strb	r2, [r3, #0]
    d9e0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    d9e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9e8:	781b      	ldrb	r3, [r3, #0]
    d9ea:	3301      	adds	r3, #1
    d9ec:	b2da      	uxtb	r2, r3
    d9ee:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    d9f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9f6:	701a      	strb	r2, [r3, #0]
    d9f8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    d9fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da00:	781b      	ldrb	r3, [r3, #0]
    da02:	2bff      	cmp	r3, #255	; 0xff
    da04:	d105      	bne.n	da12 <send_gps_pos+0x53a>
    da06:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    da0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da0e:	2200      	movs	r2, #0
    da10:	701a      	strb	r2, [r3, #0]
    da12:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    da16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da1a:	781b      	ldrb	r3, [r3, #0]
    da1c:	461a      	mov	r2, r3
    da1e:	f24a 6340 	movw	r3, #42560	; 0xa640
    da22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da26:	7899      	ldrb	r1, [r3, #2]
    da28:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    da2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da30:	5499      	strb	r1, [r3, r2]
    da32:	4b20      	ldr	r3, [pc, #128]	; (dab4 <send_gps_pos+0x5dc>)
    da34:	781a      	ldrb	r2, [r3, #0]
    da36:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    da3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da3e:	781b      	ldrb	r3, [r3, #0]
    da40:	4413      	add	r3, r2
    da42:	b2da      	uxtb	r2, r3
    da44:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    da48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da4c:	701a      	strb	r2, [r3, #0]
    da4e:	f24a 53be 	movw	r3, #42430	; 0xa5be
    da52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da56:	781a      	ldrb	r2, [r3, #0]
    da58:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    da5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da60:	781b      	ldrb	r3, [r3, #0]
    da62:	4413      	add	r3, r2
    da64:	b2da      	uxtb	r2, r3
    da66:	f24a 53be 	movw	r3, #42430	; 0xa5be
    da6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da6e:	701a      	strb	r2, [r3, #0]
    da70:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    da74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da78:	781b      	ldrb	r3, [r3, #0]
    da7a:	3301      	adds	r3, #1
    da7c:	b2da      	uxtb	r2, r3
    da7e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    da82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da86:	701a      	strb	r2, [r3, #0]
    da88:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    da8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da90:	781b      	ldrb	r3, [r3, #0]
    da92:	2bff      	cmp	r3, #255	; 0xff
    da94:	d110      	bne.n	dab8 <send_gps_pos+0x5e0>
    da96:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    da9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da9e:	2200      	movs	r2, #0
    daa0:	701a      	strb	r2, [r3, #0]
    daa2:	e009      	b.n	dab8 <send_gps_pos+0x5e0>
    daa4:	2000a63d 	.word	0x2000a63d
    daa8:	2000a63e 	.word	0x2000a63e
    daac:	2000a63f 	.word	0x2000a63f
    dab0:	2000a641 	.word	0x2000a641
    dab4:	2000a642 	.word	0x2000a642
    dab8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    dabc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dac0:	781b      	ldrb	r3, [r3, #0]
    dac2:	461a      	mov	r2, r3
    dac4:	f24a 6340 	movw	r3, #42560	; 0xa640
    dac8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dacc:	78d9      	ldrb	r1, [r3, #3]
    dace:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    dad2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dad6:	5499      	strb	r1, [r3, r2]
    dad8:	4bd3      	ldr	r3, [pc, #844]	; (de28 <send_gps_pos+0x950>)
    dada:	781a      	ldrb	r2, [r3, #0]
    dadc:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    dae0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dae4:	781b      	ldrb	r3, [r3, #0]
    dae6:	4413      	add	r3, r2
    dae8:	b2da      	uxtb	r2, r3
    daea:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    daee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    daf2:	701a      	strb	r2, [r3, #0]
    daf4:	f24a 53be 	movw	r3, #42430	; 0xa5be
    daf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dafc:	781a      	ldrb	r2, [r3, #0]
    dafe:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    db02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db06:	781b      	ldrb	r3, [r3, #0]
    db08:	4413      	add	r3, r2
    db0a:	b2da      	uxtb	r2, r3
    db0c:	f24a 53be 	movw	r3, #42430	; 0xa5be
    db10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db14:	701a      	strb	r2, [r3, #0]
    db16:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    db1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db1e:	781b      	ldrb	r3, [r3, #0]
    db20:	3301      	adds	r3, #1
    db22:	b2da      	uxtb	r2, r3
    db24:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    db28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db2c:	701a      	strb	r2, [r3, #0]
    db2e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    db32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db36:	781b      	ldrb	r3, [r3, #0]
    db38:	2bff      	cmp	r3, #255	; 0xff
    db3a:	d105      	bne.n	db48 <send_gps_pos+0x670>
    db3c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    db40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db44:	2200      	movs	r2, #0
    db46:	701a      	strb	r2, [r3, #0]
    db48:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    db4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db50:	781b      	ldrb	r3, [r3, #0]
    db52:	461a      	mov	r2, r3
    db54:	f24a 6338 	movw	r3, #42552	; 0xa638
    db58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db5c:	7819      	ldrb	r1, [r3, #0]
    db5e:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    db62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db66:	5499      	strb	r1, [r3, r2]
    db68:	f24a 6338 	movw	r3, #42552	; 0xa638
    db6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db70:	781a      	ldrb	r2, [r3, #0]
    db72:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    db76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db7a:	781b      	ldrb	r3, [r3, #0]
    db7c:	4413      	add	r3, r2
    db7e:	b2da      	uxtb	r2, r3
    db80:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    db84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db88:	701a      	strb	r2, [r3, #0]
    db8a:	f24a 53be 	movw	r3, #42430	; 0xa5be
    db8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db92:	781a      	ldrb	r2, [r3, #0]
    db94:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    db98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db9c:	781b      	ldrb	r3, [r3, #0]
    db9e:	4413      	add	r3, r2
    dba0:	b2da      	uxtb	r2, r3
    dba2:	f24a 53be 	movw	r3, #42430	; 0xa5be
    dba6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbaa:	701a      	strb	r2, [r3, #0]
    dbac:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    dbb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbb4:	781b      	ldrb	r3, [r3, #0]
    dbb6:	3301      	adds	r3, #1
    dbb8:	b2da      	uxtb	r2, r3
    dbba:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    dbbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbc2:	701a      	strb	r2, [r3, #0]
    dbc4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    dbc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbcc:	781b      	ldrb	r3, [r3, #0]
    dbce:	2bff      	cmp	r3, #255	; 0xff
    dbd0:	d105      	bne.n	dbde <send_gps_pos+0x706>
    dbd2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    dbd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbda:	2200      	movs	r2, #0
    dbdc:	701a      	strb	r2, [r3, #0]
    dbde:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    dbe2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbe6:	781b      	ldrb	r3, [r3, #0]
    dbe8:	461a      	mov	r2, r3
    dbea:	f24a 6338 	movw	r3, #42552	; 0xa638
    dbee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbf2:	7859      	ldrb	r1, [r3, #1]
    dbf4:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    dbf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbfc:	5499      	strb	r1, [r3, r2]
    dbfe:	4b8b      	ldr	r3, [pc, #556]	; (de2c <send_gps_pos+0x954>)
    dc00:	781a      	ldrb	r2, [r3, #0]
    dc02:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    dc06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc0a:	781b      	ldrb	r3, [r3, #0]
    dc0c:	4413      	add	r3, r2
    dc0e:	b2da      	uxtb	r2, r3
    dc10:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    dc14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc18:	701a      	strb	r2, [r3, #0]
    dc1a:	f24a 53be 	movw	r3, #42430	; 0xa5be
    dc1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc22:	781a      	ldrb	r2, [r3, #0]
    dc24:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    dc28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc2c:	781b      	ldrb	r3, [r3, #0]
    dc2e:	4413      	add	r3, r2
    dc30:	b2da      	uxtb	r2, r3
    dc32:	f24a 53be 	movw	r3, #42430	; 0xa5be
    dc36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc3a:	701a      	strb	r2, [r3, #0]
    dc3c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    dc40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc44:	781b      	ldrb	r3, [r3, #0]
    dc46:	3301      	adds	r3, #1
    dc48:	b2da      	uxtb	r2, r3
    dc4a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    dc4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc52:	701a      	strb	r2, [r3, #0]
    dc54:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    dc58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc5c:	781b      	ldrb	r3, [r3, #0]
    dc5e:	2bff      	cmp	r3, #255	; 0xff
    dc60:	d105      	bne.n	dc6e <send_gps_pos+0x796>
    dc62:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    dc66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc6a:	2200      	movs	r2, #0
    dc6c:	701a      	strb	r2, [r3, #0]
    dc6e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    dc72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc76:	781b      	ldrb	r3, [r3, #0]
    dc78:	461a      	mov	r2, r3
    dc7a:	f24a 6338 	movw	r3, #42552	; 0xa638
    dc7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc82:	7899      	ldrb	r1, [r3, #2]
    dc84:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    dc88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc8c:	5499      	strb	r1, [r3, r2]
    dc8e:	4b68      	ldr	r3, [pc, #416]	; (de30 <send_gps_pos+0x958>)
    dc90:	781a      	ldrb	r2, [r3, #0]
    dc92:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    dc96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc9a:	781b      	ldrb	r3, [r3, #0]
    dc9c:	4413      	add	r3, r2
    dc9e:	b2da      	uxtb	r2, r3
    dca0:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    dca4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dca8:	701a      	strb	r2, [r3, #0]
    dcaa:	f24a 53be 	movw	r3, #42430	; 0xa5be
    dcae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcb2:	781a      	ldrb	r2, [r3, #0]
    dcb4:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    dcb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcbc:	781b      	ldrb	r3, [r3, #0]
    dcbe:	4413      	add	r3, r2
    dcc0:	b2da      	uxtb	r2, r3
    dcc2:	f24a 53be 	movw	r3, #42430	; 0xa5be
    dcc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcca:	701a      	strb	r2, [r3, #0]
    dccc:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    dcd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcd4:	781b      	ldrb	r3, [r3, #0]
    dcd6:	3301      	adds	r3, #1
    dcd8:	b2da      	uxtb	r2, r3
    dcda:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    dcde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dce2:	701a      	strb	r2, [r3, #0]
    dce4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    dce8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcec:	781b      	ldrb	r3, [r3, #0]
    dcee:	2bff      	cmp	r3, #255	; 0xff
    dcf0:	d105      	bne.n	dcfe <send_gps_pos+0x826>
    dcf2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    dcf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcfa:	2200      	movs	r2, #0
    dcfc:	701a      	strb	r2, [r3, #0]
    dcfe:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    dd02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd06:	781b      	ldrb	r3, [r3, #0]
    dd08:	461a      	mov	r2, r3
    dd0a:	f24a 6338 	movw	r3, #42552	; 0xa638
    dd0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd12:	78d9      	ldrb	r1, [r3, #3]
    dd14:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    dd18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd1c:	5499      	strb	r1, [r3, r2]
    dd1e:	4b45      	ldr	r3, [pc, #276]	; (de34 <send_gps_pos+0x95c>)
    dd20:	781a      	ldrb	r2, [r3, #0]
    dd22:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    dd26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd2a:	781b      	ldrb	r3, [r3, #0]
    dd2c:	4413      	add	r3, r2
    dd2e:	b2da      	uxtb	r2, r3
    dd30:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    dd34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd38:	701a      	strb	r2, [r3, #0]
    dd3a:	f24a 53be 	movw	r3, #42430	; 0xa5be
    dd3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd42:	781a      	ldrb	r2, [r3, #0]
    dd44:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    dd48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd4c:	781b      	ldrb	r3, [r3, #0]
    dd4e:	4413      	add	r3, r2
    dd50:	b2da      	uxtb	r2, r3
    dd52:	f24a 53be 	movw	r3, #42430	; 0xa5be
    dd56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd5a:	701a      	strb	r2, [r3, #0]
    dd5c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    dd60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd64:	781b      	ldrb	r3, [r3, #0]
    dd66:	3301      	adds	r3, #1
    dd68:	b2da      	uxtb	r2, r3
    dd6a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    dd6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd72:	701a      	strb	r2, [r3, #0]
    dd74:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    dd78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd7c:	781b      	ldrb	r3, [r3, #0]
    dd7e:	2bff      	cmp	r3, #255	; 0xff
    dd80:	d105      	bne.n	dd8e <send_gps_pos+0x8b6>
    dd82:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    dd86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd8a:	2200      	movs	r2, #0
    dd8c:	701a      	strb	r2, [r3, #0]
    dd8e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    dd92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd96:	781b      	ldrb	r3, [r3, #0]
    dd98:	461a      	mov	r2, r3
    dd9a:	f24a 632c 	movw	r3, #42540	; 0xa62c
    dd9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dda2:	7819      	ldrb	r1, [r3, #0]
    dda4:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    dda8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddac:	5499      	strb	r1, [r3, r2]
    ddae:	f24a 632c 	movw	r3, #42540	; 0xa62c
    ddb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddb6:	781a      	ldrb	r2, [r3, #0]
    ddb8:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    ddbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddc0:	781b      	ldrb	r3, [r3, #0]
    ddc2:	4413      	add	r3, r2
    ddc4:	b2da      	uxtb	r2, r3
    ddc6:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    ddca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddce:	701a      	strb	r2, [r3, #0]
    ddd0:	f24a 53be 	movw	r3, #42430	; 0xa5be
    ddd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddd8:	781a      	ldrb	r2, [r3, #0]
    ddda:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    ddde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dde2:	781b      	ldrb	r3, [r3, #0]
    dde4:	4413      	add	r3, r2
    dde6:	b2da      	uxtb	r2, r3
    dde8:	f24a 53be 	movw	r3, #42430	; 0xa5be
    ddec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddf0:	701a      	strb	r2, [r3, #0]
    ddf2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ddf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddfa:	781b      	ldrb	r3, [r3, #0]
    ddfc:	3301      	adds	r3, #1
    ddfe:	b2da      	uxtb	r2, r3
    de00:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    de04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de08:	701a      	strb	r2, [r3, #0]
    de0a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    de0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de12:	781b      	ldrb	r3, [r3, #0]
    de14:	2bff      	cmp	r3, #255	; 0xff
    de16:	d10f      	bne.n	de38 <send_gps_pos+0x960>
    de18:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    de1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de20:	2200      	movs	r2, #0
    de22:	701a      	strb	r2, [r3, #0]
    de24:	e008      	b.n	de38 <send_gps_pos+0x960>
    de26:	bf00      	nop
    de28:	2000a643 	.word	0x2000a643
    de2c:	2000a639 	.word	0x2000a639
    de30:	2000a63a 	.word	0x2000a63a
    de34:	2000a63b 	.word	0x2000a63b
    de38:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    de3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de40:	781b      	ldrb	r3, [r3, #0]
    de42:	461a      	mov	r2, r3
    de44:	f24a 632c 	movw	r3, #42540	; 0xa62c
    de48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de4c:	7859      	ldrb	r1, [r3, #1]
    de4e:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    de52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de56:	5499      	strb	r1, [r3, r2]
    de58:	4bd1      	ldr	r3, [pc, #836]	; (e1a0 <send_gps_pos+0xcc8>)
    de5a:	781a      	ldrb	r2, [r3, #0]
    de5c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    de60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de64:	781b      	ldrb	r3, [r3, #0]
    de66:	4413      	add	r3, r2
    de68:	b2da      	uxtb	r2, r3
    de6a:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    de6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de72:	701a      	strb	r2, [r3, #0]
    de74:	f24a 53be 	movw	r3, #42430	; 0xa5be
    de78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de7c:	781a      	ldrb	r2, [r3, #0]
    de7e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    de82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de86:	781b      	ldrb	r3, [r3, #0]
    de88:	4413      	add	r3, r2
    de8a:	b2da      	uxtb	r2, r3
    de8c:	f24a 53be 	movw	r3, #42430	; 0xa5be
    de90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de94:	701a      	strb	r2, [r3, #0]
    de96:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    de9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de9e:	781b      	ldrb	r3, [r3, #0]
    dea0:	3301      	adds	r3, #1
    dea2:	b2da      	uxtb	r2, r3
    dea4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    dea8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    deac:	701a      	strb	r2, [r3, #0]
    deae:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    deb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    deb6:	781b      	ldrb	r3, [r3, #0]
    deb8:	2bff      	cmp	r3, #255	; 0xff
    deba:	d105      	bne.n	dec8 <send_gps_pos+0x9f0>
    debc:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    dec0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dec4:	2200      	movs	r2, #0
    dec6:	701a      	strb	r2, [r3, #0]
    dec8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    decc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ded0:	781b      	ldrb	r3, [r3, #0]
    ded2:	461a      	mov	r2, r3
    ded4:	f24a 632c 	movw	r3, #42540	; 0xa62c
    ded8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dedc:	7899      	ldrb	r1, [r3, #2]
    dede:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    dee2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dee6:	5499      	strb	r1, [r3, r2]
    dee8:	4bae      	ldr	r3, [pc, #696]	; (e1a4 <send_gps_pos+0xccc>)
    deea:	781a      	ldrb	r2, [r3, #0]
    deec:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    def0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    def4:	781b      	ldrb	r3, [r3, #0]
    def6:	4413      	add	r3, r2
    def8:	b2da      	uxtb	r2, r3
    defa:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    defe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df02:	701a      	strb	r2, [r3, #0]
    df04:	f24a 53be 	movw	r3, #42430	; 0xa5be
    df08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df0c:	781a      	ldrb	r2, [r3, #0]
    df0e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    df12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df16:	781b      	ldrb	r3, [r3, #0]
    df18:	4413      	add	r3, r2
    df1a:	b2da      	uxtb	r2, r3
    df1c:	f24a 53be 	movw	r3, #42430	; 0xa5be
    df20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df24:	701a      	strb	r2, [r3, #0]
    df26:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    df2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df2e:	781b      	ldrb	r3, [r3, #0]
    df30:	3301      	adds	r3, #1
    df32:	b2da      	uxtb	r2, r3
    df34:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    df38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df3c:	701a      	strb	r2, [r3, #0]
    df3e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    df42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df46:	781b      	ldrb	r3, [r3, #0]
    df48:	2bff      	cmp	r3, #255	; 0xff
    df4a:	d105      	bne.n	df58 <send_gps_pos+0xa80>
    df4c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    df50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df54:	2200      	movs	r2, #0
    df56:	701a      	strb	r2, [r3, #0]
    df58:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    df5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df60:	781b      	ldrb	r3, [r3, #0]
    df62:	461a      	mov	r2, r3
    df64:	f24a 632c 	movw	r3, #42540	; 0xa62c
    df68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df6c:	78d9      	ldrb	r1, [r3, #3]
    df6e:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    df72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df76:	5499      	strb	r1, [r3, r2]
    df78:	4b8b      	ldr	r3, [pc, #556]	; (e1a8 <send_gps_pos+0xcd0>)
    df7a:	781a      	ldrb	r2, [r3, #0]
    df7c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    df80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df84:	781b      	ldrb	r3, [r3, #0]
    df86:	4413      	add	r3, r2
    df88:	b2da      	uxtb	r2, r3
    df8a:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    df8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df92:	701a      	strb	r2, [r3, #0]
    df94:	f24a 53be 	movw	r3, #42430	; 0xa5be
    df98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df9c:	781a      	ldrb	r2, [r3, #0]
    df9e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    dfa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfa6:	781b      	ldrb	r3, [r3, #0]
    dfa8:	4413      	add	r3, r2
    dfaa:	b2da      	uxtb	r2, r3
    dfac:	f24a 53be 	movw	r3, #42430	; 0xa5be
    dfb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfb4:	701a      	strb	r2, [r3, #0]
    dfb6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    dfba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfbe:	781b      	ldrb	r3, [r3, #0]
    dfc0:	3301      	adds	r3, #1
    dfc2:	b2da      	uxtb	r2, r3
    dfc4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    dfc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfcc:	701a      	strb	r2, [r3, #0]
    dfce:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    dfd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfd6:	781b      	ldrb	r3, [r3, #0]
    dfd8:	2bff      	cmp	r3, #255	; 0xff
    dfda:	d105      	bne.n	dfe8 <send_gps_pos+0xb10>
    dfdc:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    dfe0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfe4:	2200      	movs	r2, #0
    dfe6:	701a      	strb	r2, [r3, #0]
    dfe8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    dfec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dff0:	781b      	ldrb	r3, [r3, #0]
    dff2:	461a      	mov	r2, r3
    dff4:	f24a 6330 	movw	r3, #42544	; 0xa630
    dff8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dffc:	7819      	ldrb	r1, [r3, #0]
    dffe:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    e002:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e006:	5499      	strb	r1, [r3, r2]
    e008:	f24a 6330 	movw	r3, #42544	; 0xa630
    e00c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e010:	781a      	ldrb	r2, [r3, #0]
    e012:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    e016:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e01a:	781b      	ldrb	r3, [r3, #0]
    e01c:	4413      	add	r3, r2
    e01e:	b2da      	uxtb	r2, r3
    e020:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    e024:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e028:	701a      	strb	r2, [r3, #0]
    e02a:	f24a 53be 	movw	r3, #42430	; 0xa5be
    e02e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e032:	781a      	ldrb	r2, [r3, #0]
    e034:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    e038:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e03c:	781b      	ldrb	r3, [r3, #0]
    e03e:	4413      	add	r3, r2
    e040:	b2da      	uxtb	r2, r3
    e042:	f24a 53be 	movw	r3, #42430	; 0xa5be
    e046:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e04a:	701a      	strb	r2, [r3, #0]
    e04c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e050:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e054:	781b      	ldrb	r3, [r3, #0]
    e056:	3301      	adds	r3, #1
    e058:	b2da      	uxtb	r2, r3
    e05a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e05e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e062:	701a      	strb	r2, [r3, #0]
    e064:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e068:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e06c:	781b      	ldrb	r3, [r3, #0]
    e06e:	2bff      	cmp	r3, #255	; 0xff
    e070:	d105      	bne.n	e07e <send_gps_pos+0xba6>
    e072:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e076:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e07a:	2200      	movs	r2, #0
    e07c:	701a      	strb	r2, [r3, #0]
    e07e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e082:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e086:	781b      	ldrb	r3, [r3, #0]
    e088:	461a      	mov	r2, r3
    e08a:	f24a 6330 	movw	r3, #42544	; 0xa630
    e08e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e092:	7859      	ldrb	r1, [r3, #1]
    e094:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    e098:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e09c:	5499      	strb	r1, [r3, r2]
    e09e:	4b43      	ldr	r3, [pc, #268]	; (e1ac <send_gps_pos+0xcd4>)
    e0a0:	781a      	ldrb	r2, [r3, #0]
    e0a2:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    e0a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0aa:	781b      	ldrb	r3, [r3, #0]
    e0ac:	4413      	add	r3, r2
    e0ae:	b2da      	uxtb	r2, r3
    e0b0:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    e0b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0b8:	701a      	strb	r2, [r3, #0]
    e0ba:	f24a 53be 	movw	r3, #42430	; 0xa5be
    e0be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0c2:	781a      	ldrb	r2, [r3, #0]
    e0c4:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    e0c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0cc:	781b      	ldrb	r3, [r3, #0]
    e0ce:	4413      	add	r3, r2
    e0d0:	b2da      	uxtb	r2, r3
    e0d2:	f24a 53be 	movw	r3, #42430	; 0xa5be
    e0d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0da:	701a      	strb	r2, [r3, #0]
    e0dc:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e0e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0e4:	781b      	ldrb	r3, [r3, #0]
    e0e6:	3301      	adds	r3, #1
    e0e8:	b2da      	uxtb	r2, r3
    e0ea:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e0ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0f2:	701a      	strb	r2, [r3, #0]
    e0f4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e0f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0fc:	781b      	ldrb	r3, [r3, #0]
    e0fe:	2bff      	cmp	r3, #255	; 0xff
    e100:	d105      	bne.n	e10e <send_gps_pos+0xc36>
    e102:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e106:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e10a:	2200      	movs	r2, #0
    e10c:	701a      	strb	r2, [r3, #0]
    e10e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e112:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e116:	781b      	ldrb	r3, [r3, #0]
    e118:	461a      	mov	r2, r3
    e11a:	f24a 6330 	movw	r3, #42544	; 0xa630
    e11e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e122:	7899      	ldrb	r1, [r3, #2]
    e124:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    e128:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e12c:	5499      	strb	r1, [r3, r2]
    e12e:	4b20      	ldr	r3, [pc, #128]	; (e1b0 <send_gps_pos+0xcd8>)
    e130:	781a      	ldrb	r2, [r3, #0]
    e132:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    e136:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e13a:	781b      	ldrb	r3, [r3, #0]
    e13c:	4413      	add	r3, r2
    e13e:	b2da      	uxtb	r2, r3
    e140:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    e144:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e148:	701a      	strb	r2, [r3, #0]
    e14a:	f24a 53be 	movw	r3, #42430	; 0xa5be
    e14e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e152:	781a      	ldrb	r2, [r3, #0]
    e154:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    e158:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e15c:	781b      	ldrb	r3, [r3, #0]
    e15e:	4413      	add	r3, r2
    e160:	b2da      	uxtb	r2, r3
    e162:	f24a 53be 	movw	r3, #42430	; 0xa5be
    e166:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e16a:	701a      	strb	r2, [r3, #0]
    e16c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e170:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e174:	781b      	ldrb	r3, [r3, #0]
    e176:	3301      	adds	r3, #1
    e178:	b2da      	uxtb	r2, r3
    e17a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e17e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e182:	701a      	strb	r2, [r3, #0]
    e184:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e188:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e18c:	781b      	ldrb	r3, [r3, #0]
    e18e:	2bff      	cmp	r3, #255	; 0xff
    e190:	d110      	bne.n	e1b4 <send_gps_pos+0xcdc>
    e192:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e196:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e19a:	2200      	movs	r2, #0
    e19c:	701a      	strb	r2, [r3, #0]
    e19e:	e009      	b.n	e1b4 <send_gps_pos+0xcdc>
    e1a0:	2000a62d 	.word	0x2000a62d
    e1a4:	2000a62e 	.word	0x2000a62e
    e1a8:	2000a62f 	.word	0x2000a62f
    e1ac:	2000a631 	.word	0x2000a631
    e1b0:	2000a632 	.word	0x2000a632
    e1b4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e1b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1bc:	781b      	ldrb	r3, [r3, #0]
    e1be:	461a      	mov	r2, r3
    e1c0:	f24a 6330 	movw	r3, #42544	; 0xa630
    e1c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1c8:	78d9      	ldrb	r1, [r3, #3]
    e1ca:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    e1ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1d2:	5499      	strb	r1, [r3, r2]
    e1d4:	4bd3      	ldr	r3, [pc, #844]	; (e524 <send_gps_pos+0x104c>)
    e1d6:	781a      	ldrb	r2, [r3, #0]
    e1d8:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    e1dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1e0:	781b      	ldrb	r3, [r3, #0]
    e1e2:	4413      	add	r3, r2
    e1e4:	b2da      	uxtb	r2, r3
    e1e6:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    e1ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1ee:	701a      	strb	r2, [r3, #0]
    e1f0:	f24a 53be 	movw	r3, #42430	; 0xa5be
    e1f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1f8:	781a      	ldrb	r2, [r3, #0]
    e1fa:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    e1fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e202:	781b      	ldrb	r3, [r3, #0]
    e204:	4413      	add	r3, r2
    e206:	b2da      	uxtb	r2, r3
    e208:	f24a 53be 	movw	r3, #42430	; 0xa5be
    e20c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e210:	701a      	strb	r2, [r3, #0]
    e212:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e216:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e21a:	781b      	ldrb	r3, [r3, #0]
    e21c:	3301      	adds	r3, #1
    e21e:	b2da      	uxtb	r2, r3
    e220:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e224:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e228:	701a      	strb	r2, [r3, #0]
    e22a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e22e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e232:	781b      	ldrb	r3, [r3, #0]
    e234:	2bff      	cmp	r3, #255	; 0xff
    e236:	d105      	bne.n	e244 <send_gps_pos+0xd6c>
    e238:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e23c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e240:	2200      	movs	r2, #0
    e242:	701a      	strb	r2, [r3, #0]
    e244:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e248:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e24c:	781b      	ldrb	r3, [r3, #0]
    e24e:	461a      	mov	r2, r3
    e250:	f24a 6334 	movw	r3, #42548	; 0xa634
    e254:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e258:	7819      	ldrb	r1, [r3, #0]
    e25a:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    e25e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e262:	5499      	strb	r1, [r3, r2]
    e264:	f24a 6334 	movw	r3, #42548	; 0xa634
    e268:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e26c:	781a      	ldrb	r2, [r3, #0]
    e26e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    e272:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e276:	781b      	ldrb	r3, [r3, #0]
    e278:	4413      	add	r3, r2
    e27a:	b2da      	uxtb	r2, r3
    e27c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    e280:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e284:	701a      	strb	r2, [r3, #0]
    e286:	f24a 53be 	movw	r3, #42430	; 0xa5be
    e28a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e28e:	781a      	ldrb	r2, [r3, #0]
    e290:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    e294:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e298:	781b      	ldrb	r3, [r3, #0]
    e29a:	4413      	add	r3, r2
    e29c:	b2da      	uxtb	r2, r3
    e29e:	f24a 53be 	movw	r3, #42430	; 0xa5be
    e2a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2a6:	701a      	strb	r2, [r3, #0]
    e2a8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e2ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2b0:	781b      	ldrb	r3, [r3, #0]
    e2b2:	3301      	adds	r3, #1
    e2b4:	b2da      	uxtb	r2, r3
    e2b6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e2ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2be:	701a      	strb	r2, [r3, #0]
    e2c0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e2c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2c8:	781b      	ldrb	r3, [r3, #0]
    e2ca:	2bff      	cmp	r3, #255	; 0xff
    e2cc:	d105      	bne.n	e2da <send_gps_pos+0xe02>
    e2ce:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e2d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2d6:	2200      	movs	r2, #0
    e2d8:	701a      	strb	r2, [r3, #0]
    e2da:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e2de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2e2:	781b      	ldrb	r3, [r3, #0]
    e2e4:	461a      	mov	r2, r3
    e2e6:	f24a 6334 	movw	r3, #42548	; 0xa634
    e2ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2ee:	7859      	ldrb	r1, [r3, #1]
    e2f0:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    e2f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2f8:	5499      	strb	r1, [r3, r2]
    e2fa:	4b8b      	ldr	r3, [pc, #556]	; (e528 <send_gps_pos+0x1050>)
    e2fc:	781a      	ldrb	r2, [r3, #0]
    e2fe:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    e302:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e306:	781b      	ldrb	r3, [r3, #0]
    e308:	4413      	add	r3, r2
    e30a:	b2da      	uxtb	r2, r3
    e30c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    e310:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e314:	701a      	strb	r2, [r3, #0]
    e316:	f24a 53be 	movw	r3, #42430	; 0xa5be
    e31a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e31e:	781a      	ldrb	r2, [r3, #0]
    e320:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    e324:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e328:	781b      	ldrb	r3, [r3, #0]
    e32a:	4413      	add	r3, r2
    e32c:	b2da      	uxtb	r2, r3
    e32e:	f24a 53be 	movw	r3, #42430	; 0xa5be
    e332:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e336:	701a      	strb	r2, [r3, #0]
    e338:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e33c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e340:	781b      	ldrb	r3, [r3, #0]
    e342:	3301      	adds	r3, #1
    e344:	b2da      	uxtb	r2, r3
    e346:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e34a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e34e:	701a      	strb	r2, [r3, #0]
    e350:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e354:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e358:	781b      	ldrb	r3, [r3, #0]
    e35a:	2bff      	cmp	r3, #255	; 0xff
    e35c:	d105      	bne.n	e36a <send_gps_pos+0xe92>
    e35e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e362:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e366:	2200      	movs	r2, #0
    e368:	701a      	strb	r2, [r3, #0]
    e36a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e36e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e372:	781b      	ldrb	r3, [r3, #0]
    e374:	461a      	mov	r2, r3
    e376:	f24a 6334 	movw	r3, #42548	; 0xa634
    e37a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e37e:	7899      	ldrb	r1, [r3, #2]
    e380:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    e384:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e388:	5499      	strb	r1, [r3, r2]
    e38a:	4b68      	ldr	r3, [pc, #416]	; (e52c <send_gps_pos+0x1054>)
    e38c:	781a      	ldrb	r2, [r3, #0]
    e38e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    e392:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e396:	781b      	ldrb	r3, [r3, #0]
    e398:	4413      	add	r3, r2
    e39a:	b2da      	uxtb	r2, r3
    e39c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    e3a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3a4:	701a      	strb	r2, [r3, #0]
    e3a6:	f24a 53be 	movw	r3, #42430	; 0xa5be
    e3aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3ae:	781a      	ldrb	r2, [r3, #0]
    e3b0:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    e3b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3b8:	781b      	ldrb	r3, [r3, #0]
    e3ba:	4413      	add	r3, r2
    e3bc:	b2da      	uxtb	r2, r3
    e3be:	f24a 53be 	movw	r3, #42430	; 0xa5be
    e3c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3c6:	701a      	strb	r2, [r3, #0]
    e3c8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e3cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3d0:	781b      	ldrb	r3, [r3, #0]
    e3d2:	3301      	adds	r3, #1
    e3d4:	b2da      	uxtb	r2, r3
    e3d6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e3da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3de:	701a      	strb	r2, [r3, #0]
    e3e0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e3e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3e8:	781b      	ldrb	r3, [r3, #0]
    e3ea:	2bff      	cmp	r3, #255	; 0xff
    e3ec:	d105      	bne.n	e3fa <send_gps_pos+0xf22>
    e3ee:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e3f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3f6:	2200      	movs	r2, #0
    e3f8:	701a      	strb	r2, [r3, #0]
    e3fa:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e3fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e402:	781b      	ldrb	r3, [r3, #0]
    e404:	461a      	mov	r2, r3
    e406:	f24a 6334 	movw	r3, #42548	; 0xa634
    e40a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e40e:	78d9      	ldrb	r1, [r3, #3]
    e410:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    e414:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e418:	5499      	strb	r1, [r3, r2]
    e41a:	4b45      	ldr	r3, [pc, #276]	; (e530 <send_gps_pos+0x1058>)
    e41c:	781a      	ldrb	r2, [r3, #0]
    e41e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    e422:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e426:	781b      	ldrb	r3, [r3, #0]
    e428:	4413      	add	r3, r2
    e42a:	b2da      	uxtb	r2, r3
    e42c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    e430:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e434:	701a      	strb	r2, [r3, #0]
    e436:	f24a 53be 	movw	r3, #42430	; 0xa5be
    e43a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e43e:	781a      	ldrb	r2, [r3, #0]
    e440:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    e444:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e448:	781b      	ldrb	r3, [r3, #0]
    e44a:	4413      	add	r3, r2
    e44c:	b2da      	uxtb	r2, r3
    e44e:	f24a 53be 	movw	r3, #42430	; 0xa5be
    e452:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e456:	701a      	strb	r2, [r3, #0]
    e458:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e45c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e460:	781b      	ldrb	r3, [r3, #0]
    e462:	3301      	adds	r3, #1
    e464:	b2da      	uxtb	r2, r3
    e466:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e46a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e46e:	701a      	strb	r2, [r3, #0]
    e470:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e474:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e478:	781b      	ldrb	r3, [r3, #0]
    e47a:	2bff      	cmp	r3, #255	; 0xff
    e47c:	d105      	bne.n	e48a <send_gps_pos+0xfb2>
    e47e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e482:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e486:	2200      	movs	r2, #0
    e488:	701a      	strb	r2, [r3, #0]
    e48a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e48e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e492:	781b      	ldrb	r3, [r3, #0]
    e494:	461a      	mov	r2, r3
    e496:	f24a 6328 	movw	r3, #42536	; 0xa628
    e49a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e49e:	7819      	ldrb	r1, [r3, #0]
    e4a0:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    e4a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4a8:	5499      	strb	r1, [r3, r2]
    e4aa:	f24a 6328 	movw	r3, #42536	; 0xa628
    e4ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4b2:	781a      	ldrb	r2, [r3, #0]
    e4b4:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    e4b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4bc:	781b      	ldrb	r3, [r3, #0]
    e4be:	4413      	add	r3, r2
    e4c0:	b2da      	uxtb	r2, r3
    e4c2:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    e4c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4ca:	701a      	strb	r2, [r3, #0]
    e4cc:	f24a 53be 	movw	r3, #42430	; 0xa5be
    e4d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4d4:	781a      	ldrb	r2, [r3, #0]
    e4d6:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    e4da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4de:	781b      	ldrb	r3, [r3, #0]
    e4e0:	4413      	add	r3, r2
    e4e2:	b2da      	uxtb	r2, r3
    e4e4:	f24a 53be 	movw	r3, #42430	; 0xa5be
    e4e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4ec:	701a      	strb	r2, [r3, #0]
    e4ee:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e4f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4f6:	781b      	ldrb	r3, [r3, #0]
    e4f8:	3301      	adds	r3, #1
    e4fa:	b2da      	uxtb	r2, r3
    e4fc:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e500:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e504:	701a      	strb	r2, [r3, #0]
    e506:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e50a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e50e:	781b      	ldrb	r3, [r3, #0]
    e510:	2bff      	cmp	r3, #255	; 0xff
    e512:	d10f      	bne.n	e534 <send_gps_pos+0x105c>
    e514:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e518:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e51c:	2200      	movs	r2, #0
    e51e:	701a      	strb	r2, [r3, #0]
    e520:	e008      	b.n	e534 <send_gps_pos+0x105c>
    e522:	bf00      	nop
    e524:	2000a633 	.word	0x2000a633
    e528:	2000a635 	.word	0x2000a635
    e52c:	2000a636 	.word	0x2000a636
    e530:	2000a637 	.word	0x2000a637
    e534:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e538:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e53c:	781b      	ldrb	r3, [r3, #0]
    e53e:	461a      	mov	r2, r3
    e540:	f24a 6328 	movw	r3, #42536	; 0xa628
    e544:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e548:	7859      	ldrb	r1, [r3, #1]
    e54a:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    e54e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e552:	5499      	strb	r1, [r3, r2]
    e554:	4bc0      	ldr	r3, [pc, #768]	; (e858 <send_gps_pos+0x1380>)
    e556:	781a      	ldrb	r2, [r3, #0]
    e558:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    e55c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e560:	781b      	ldrb	r3, [r3, #0]
    e562:	4413      	add	r3, r2
    e564:	b2da      	uxtb	r2, r3
    e566:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    e56a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e56e:	701a      	strb	r2, [r3, #0]
    e570:	f24a 53be 	movw	r3, #42430	; 0xa5be
    e574:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e578:	781a      	ldrb	r2, [r3, #0]
    e57a:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    e57e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e582:	781b      	ldrb	r3, [r3, #0]
    e584:	4413      	add	r3, r2
    e586:	b2da      	uxtb	r2, r3
    e588:	f24a 53be 	movw	r3, #42430	; 0xa5be
    e58c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e590:	701a      	strb	r2, [r3, #0]
    e592:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e596:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e59a:	781b      	ldrb	r3, [r3, #0]
    e59c:	3301      	adds	r3, #1
    e59e:	b2da      	uxtb	r2, r3
    e5a0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e5a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5a8:	701a      	strb	r2, [r3, #0]
    e5aa:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e5ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5b2:	781b      	ldrb	r3, [r3, #0]
    e5b4:	2bff      	cmp	r3, #255	; 0xff
    e5b6:	d105      	bne.n	e5c4 <send_gps_pos+0x10ec>
    e5b8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e5bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5c0:	2200      	movs	r2, #0
    e5c2:	701a      	strb	r2, [r3, #0]
    e5c4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e5c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5cc:	781b      	ldrb	r3, [r3, #0]
    e5ce:	461a      	mov	r2, r3
    e5d0:	f24a 6328 	movw	r3, #42536	; 0xa628
    e5d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5d8:	7899      	ldrb	r1, [r3, #2]
    e5da:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    e5de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5e2:	5499      	strb	r1, [r3, r2]
    e5e4:	4b9d      	ldr	r3, [pc, #628]	; (e85c <send_gps_pos+0x1384>)
    e5e6:	781a      	ldrb	r2, [r3, #0]
    e5e8:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    e5ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5f0:	781b      	ldrb	r3, [r3, #0]
    e5f2:	4413      	add	r3, r2
    e5f4:	b2da      	uxtb	r2, r3
    e5f6:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    e5fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5fe:	701a      	strb	r2, [r3, #0]
    e600:	f24a 53be 	movw	r3, #42430	; 0xa5be
    e604:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e608:	781a      	ldrb	r2, [r3, #0]
    e60a:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    e60e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e612:	781b      	ldrb	r3, [r3, #0]
    e614:	4413      	add	r3, r2
    e616:	b2da      	uxtb	r2, r3
    e618:	f24a 53be 	movw	r3, #42430	; 0xa5be
    e61c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e620:	701a      	strb	r2, [r3, #0]
    e622:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e626:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e62a:	781b      	ldrb	r3, [r3, #0]
    e62c:	3301      	adds	r3, #1
    e62e:	b2da      	uxtb	r2, r3
    e630:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e634:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e638:	701a      	strb	r2, [r3, #0]
    e63a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e63e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e642:	781b      	ldrb	r3, [r3, #0]
    e644:	2bff      	cmp	r3, #255	; 0xff
    e646:	d105      	bne.n	e654 <send_gps_pos+0x117c>
    e648:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e64c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e650:	2200      	movs	r2, #0
    e652:	701a      	strb	r2, [r3, #0]
    e654:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e658:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e65c:	781b      	ldrb	r3, [r3, #0]
    e65e:	461a      	mov	r2, r3
    e660:	f24a 6328 	movw	r3, #42536	; 0xa628
    e664:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e668:	78d9      	ldrb	r1, [r3, #3]
    e66a:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    e66e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e672:	5499      	strb	r1, [r3, r2]
    e674:	4b7a      	ldr	r3, [pc, #488]	; (e860 <send_gps_pos+0x1388>)
    e676:	781a      	ldrb	r2, [r3, #0]
    e678:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    e67c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e680:	781b      	ldrb	r3, [r3, #0]
    e682:	4413      	add	r3, r2
    e684:	b2da      	uxtb	r2, r3
    e686:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    e68a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e68e:	701a      	strb	r2, [r3, #0]
    e690:	f24a 53be 	movw	r3, #42430	; 0xa5be
    e694:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e698:	781a      	ldrb	r2, [r3, #0]
    e69a:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    e69e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e6a2:	781b      	ldrb	r3, [r3, #0]
    e6a4:	4413      	add	r3, r2
    e6a6:	b2da      	uxtb	r2, r3
    e6a8:	f24a 53be 	movw	r3, #42430	; 0xa5be
    e6ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e6b0:	701a      	strb	r2, [r3, #0]
    e6b2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e6b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e6ba:	781b      	ldrb	r3, [r3, #0]
    e6bc:	3301      	adds	r3, #1
    e6be:	b2da      	uxtb	r2, r3
    e6c0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e6c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e6c8:	701a      	strb	r2, [r3, #0]
    e6ca:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e6ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e6d2:	781b      	ldrb	r3, [r3, #0]
    e6d4:	2bff      	cmp	r3, #255	; 0xff
    e6d6:	d105      	bne.n	e6e4 <send_gps_pos+0x120c>
    e6d8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e6dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e6e0:	2200      	movs	r2, #0
    e6e2:	701a      	strb	r2, [r3, #0]
    e6e4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e6e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e6ec:	781b      	ldrb	r3, [r3, #0]
    e6ee:	461a      	mov	r2, r3
    e6f0:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    e6f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e6f8:	7819      	ldrb	r1, [r3, #0]
    e6fa:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    e6fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e702:	5499      	strb	r1, [r3, r2]
    e704:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e708:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e70c:	781b      	ldrb	r3, [r3, #0]
    e70e:	3301      	adds	r3, #1
    e710:	b2da      	uxtb	r2, r3
    e712:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e716:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e71a:	701a      	strb	r2, [r3, #0]
    e71c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e720:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e724:	781b      	ldrb	r3, [r3, #0]
    e726:	2bff      	cmp	r3, #255	; 0xff
    e728:	d105      	bne.n	e736 <send_gps_pos+0x125e>
    e72a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e72e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e732:	2200      	movs	r2, #0
    e734:	701a      	strb	r2, [r3, #0]
    e736:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e73a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e73e:	781b      	ldrb	r3, [r3, #0]
    e740:	461a      	mov	r2, r3
    e742:	f24a 53be 	movw	r3, #42430	; 0xa5be
    e746:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e74a:	7819      	ldrb	r1, [r3, #0]
    e74c:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    e750:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e754:	5499      	strb	r1, [r3, r2]
    e756:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e75a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e75e:	781b      	ldrb	r3, [r3, #0]
    e760:	3301      	adds	r3, #1
    e762:	b2da      	uxtb	r2, r3
    e764:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e768:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e76c:	701a      	strb	r2, [r3, #0]
    e76e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e772:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e776:	781b      	ldrb	r3, [r3, #0]
    e778:	2bff      	cmp	r3, #255	; 0xff
    e77a:	d105      	bne.n	e788 <send_gps_pos+0x12b0>
    e77c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e780:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e784:	2200      	movs	r2, #0
    e786:	701a      	strb	r2, [r3, #0]
    e788:	f242 0339 	movw	r3, #8249	; 0x2039
    e78c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e790:	781b      	ldrb	r3, [r3, #0]
    e792:	b2db      	uxtb	r3, r3
    e794:	f003 0310 	and.w	r3, r3, #16
    e798:	2b00      	cmp	r3, #0
    e79a:	d15a      	bne.n	e852 <send_gps_pos+0x137a>
    e79c:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    e7a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7a4:	781b      	ldrb	r3, [r3, #0]
    e7a6:	b2db      	uxtb	r3, r3
    e7a8:	461a      	mov	r2, r3
    e7aa:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    e7ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7b2:	5c9a      	ldrb	r2, [r3, r2]
    e7b4:	f24a 53bb 	movw	r3, #42427	; 0xa5bb
    e7b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7bc:	701a      	strb	r2, [r3, #0]
    e7be:	f24a 53bc 	movw	r3, #42428	; 0xa5bc
    e7c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7c6:	2200      	movs	r2, #0
    e7c8:	701a      	strb	r2, [r3, #0]
    e7ca:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    e7ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7d2:	781b      	ldrb	r3, [r3, #0]
    e7d4:	b2db      	uxtb	r3, r3
    e7d6:	3301      	adds	r3, #1
    e7d8:	b2da      	uxtb	r2, r3
    e7da:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    e7de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7e2:	701a      	strb	r2, [r3, #0]
    e7e4:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    e7e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7ec:	781b      	ldrb	r3, [r3, #0]
    e7ee:	b2db      	uxtb	r3, r3
    e7f0:	2bff      	cmp	r3, #255	; 0xff
    e7f2:	d105      	bne.n	e800 <send_gps_pos+0x1328>
    e7f4:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    e7f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7fc:	2200      	movs	r2, #0
    e7fe:	701a      	strb	r2, [r3, #0]
    e800:	f242 0338 	movw	r3, #8248	; 0x2038
    e804:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e808:	f242 0238 	movw	r2, #8248	; 0x2038
    e80c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    e810:	7812      	ldrb	r2, [r2, #0]
    e812:	b2d2      	uxtb	r2, r2
    e814:	f042 0201 	orr.w	r2, r2, #1
    e818:	b2d2      	uxtb	r2, r2
    e81a:	701a      	strb	r2, [r3, #0]
    e81c:	f242 0339 	movw	r3, #8249	; 0x2039
    e820:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e824:	f242 0239 	movw	r2, #8249	; 0x2039
    e828:	f2c2 0200 	movt	r2, #8192	; 0x2000
    e82c:	7812      	ldrb	r2, [r2, #0]
    e82e:	b2d2      	uxtb	r2, r2
    e830:	f042 0210 	orr.w	r2, r2, #16
    e834:	b2d2      	uxtb	r2, r2
    e836:	701a      	strb	r2, [r3, #0]
    e838:	e00b      	b.n	e852 <send_gps_pos+0x137a>
    e83a:	f24a 43b8 	movw	r3, #42168	; 0xa4b8
    e83e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e842:	781b      	ldrb	r3, [r3, #0]
    e844:	3301      	adds	r3, #1
    e846:	b2da      	uxtb	r2, r3
    e848:	f24a 43b8 	movw	r3, #42168	; 0xa4b8
    e84c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e850:	701a      	strb	r2, [r3, #0]
     estimator_update_state_gps();
    e852:	f005 fbfd 	bl	14050 <estimator_update_state_gps>
  }
}
    e856:	bd80      	pop	{r7, pc}
    e858:	2000a629 	.word	0x2000a629
    e85c:	2000a62a 	.word	0x2000a62a
    e860:	2000a62b 	.word	0x2000a62b

0000e864 <send_radIR>:

void send_radIR(void){
    e864:	b480      	push	{r7}
    e866:	af00      	add	r7, sp, #0
  if (gps_pos_available)
    e868:	f24a 634e 	movw	r3, #42574	; 0xa64e
    e86c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e870:	781b      	ldrb	r3, [r3, #0]
    e872:	2b00      	cmp	r3, #0
    e874:	f000 85e8 	beq.w	f448 <send_radIR+0xbe4>
     DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    e878:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e87c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e880:	781a      	ldrb	r2, [r3, #0]
    e882:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    e886:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e88a:	781b      	ldrb	r3, [r3, #0]
    e88c:	b2db      	uxtb	r3, r3
    e88e:	429a      	cmp	r2, r3
    e890:	d313      	bcc.n	e8ba <send_radIR+0x56>
    e892:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    e896:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e89a:	781b      	ldrb	r3, [r3, #0]
    e89c:	b2db      	uxtb	r3, r3
    e89e:	461a      	mov	r2, r3
    e8a0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e8a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8a8:	781b      	ldrb	r3, [r3, #0]
    e8aa:	1ad3      	subs	r3, r2, r3
    e8ac:	33ff      	adds	r3, #255	; 0xff
    e8ae:	2b14      	cmp	r3, #20
    e8b0:	bfd4      	ite	le
    e8b2:	2300      	movle	r3, #0
    e8b4:	2301      	movgt	r3, #1
    e8b6:	b2db      	uxtb	r3, r3
    e8b8:	e011      	b.n	e8de <send_radIR+0x7a>
    e8ba:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    e8be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8c2:	781b      	ldrb	r3, [r3, #0]
    e8c4:	b2db      	uxtb	r3, r3
    e8c6:	461a      	mov	r2, r3
    e8c8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e8cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8d0:	781b      	ldrb	r3, [r3, #0]
    e8d2:	1ad3      	subs	r3, r2, r3
    e8d4:	2b14      	cmp	r3, #20
    e8d6:	bfd4      	ite	le
    e8d8:	2300      	movle	r3, #0
    e8da:	2301      	movgt	r3, #1
    e8dc:	b2db      	uxtb	r3, r3
    e8de:	2b00      	cmp	r3, #0
    e8e0:	f000 85a6 	beq.w	f430 <send_radIR+0xbcc>
    e8e4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e8e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8ec:	781b      	ldrb	r3, [r3, #0]
    e8ee:	461a      	mov	r2, r3
    e8f0:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    e8f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8f8:	2105      	movs	r1, #5
    e8fa:	5499      	strb	r1, [r3, r2]
    e8fc:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e900:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e904:	781b      	ldrb	r3, [r3, #0]
    e906:	3301      	adds	r3, #1
    e908:	b2da      	uxtb	r2, r3
    e90a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e90e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e912:	701a      	strb	r2, [r3, #0]
    e914:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e918:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e91c:	781b      	ldrb	r3, [r3, #0]
    e91e:	2bff      	cmp	r3, #255	; 0xff
    e920:	d105      	bne.n	e92e <send_radIR+0xca>
    e922:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e926:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e92a:	2200      	movs	r2, #0
    e92c:	701a      	strb	r2, [r3, #0]
    e92e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e932:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e936:	781b      	ldrb	r3, [r3, #0]
    e938:	461a      	mov	r2, r3
    e93a:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    e93e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e942:	2105      	movs	r1, #5
    e944:	5499      	strb	r1, [r3, r2]
    e946:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e94a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e94e:	781b      	ldrb	r3, [r3, #0]
    e950:	3301      	adds	r3, #1
    e952:	b2da      	uxtb	r2, r3
    e954:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e958:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e95c:	701a      	strb	r2, [r3, #0]
    e95e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e962:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e966:	781b      	ldrb	r3, [r3, #0]
    e968:	2bff      	cmp	r3, #255	; 0xff
    e96a:	d105      	bne.n	e978 <send_radIR+0x114>
    e96c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e970:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e974:	2200      	movs	r2, #0
    e976:	701a      	strb	r2, [r3, #0]
    e978:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    e97c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e980:	2205      	movs	r2, #5
    e982:	701a      	strb	r2, [r3, #0]
    e984:	f24a 53be 	movw	r3, #42430	; 0xa5be
    e988:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e98c:	2205      	movs	r2, #5
    e98e:	701a      	strb	r2, [r3, #0]
    e990:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e994:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e998:	781b      	ldrb	r3, [r3, #0]
    e99a:	461a      	mov	r2, r3
    e99c:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    e9a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9a4:	7819      	ldrb	r1, [r3, #0]
    e9a6:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    e9aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9ae:	5499      	strb	r1, [r3, r2]
    e9b0:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    e9b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9b8:	781a      	ldrb	r2, [r3, #0]
    e9ba:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    e9be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9c2:	781b      	ldrb	r3, [r3, #0]
    e9c4:	4413      	add	r3, r2
    e9c6:	b2da      	uxtb	r2, r3
    e9c8:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    e9cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9d0:	701a      	strb	r2, [r3, #0]
    e9d2:	f24a 53be 	movw	r3, #42430	; 0xa5be
    e9d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9da:	781a      	ldrb	r2, [r3, #0]
    e9dc:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    e9e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9e4:	781b      	ldrb	r3, [r3, #0]
    e9e6:	4413      	add	r3, r2
    e9e8:	b2da      	uxtb	r2, r3
    e9ea:	f24a 53be 	movw	r3, #42430	; 0xa5be
    e9ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9f2:	701a      	strb	r2, [r3, #0]
    e9f4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    e9f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9fc:	781b      	ldrb	r3, [r3, #0]
    e9fe:	3301      	adds	r3, #1
    ea00:	b2da      	uxtb	r2, r3
    ea02:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ea06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea0a:	701a      	strb	r2, [r3, #0]
    ea0c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ea10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea14:	781b      	ldrb	r3, [r3, #0]
    ea16:	2bff      	cmp	r3, #255	; 0xff
    ea18:	d105      	bne.n	ea26 <send_radIR+0x1c2>
    ea1a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ea1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea22:	2200      	movs	r2, #0
    ea24:	701a      	strb	r2, [r3, #0]
    ea26:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ea2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea2e:	781b      	ldrb	r3, [r3, #0]
    ea30:	461a      	mov	r2, r3
    ea32:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    ea36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea3a:	7859      	ldrb	r1, [r3, #1]
    ea3c:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    ea40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea44:	5499      	strb	r1, [r3, r2]
    ea46:	4bd2      	ldr	r3, [pc, #840]	; (ed90 <send_radIR+0x52c>)
    ea48:	781a      	ldrb	r2, [r3, #0]
    ea4a:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    ea4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea52:	781b      	ldrb	r3, [r3, #0]
    ea54:	4413      	add	r3, r2
    ea56:	b2da      	uxtb	r2, r3
    ea58:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    ea5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea60:	701a      	strb	r2, [r3, #0]
    ea62:	f24a 53be 	movw	r3, #42430	; 0xa5be
    ea66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea6a:	781a      	ldrb	r2, [r3, #0]
    ea6c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    ea70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea74:	781b      	ldrb	r3, [r3, #0]
    ea76:	4413      	add	r3, r2
    ea78:	b2da      	uxtb	r2, r3
    ea7a:	f24a 53be 	movw	r3, #42430	; 0xa5be
    ea7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea82:	701a      	strb	r2, [r3, #0]
    ea84:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ea88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea8c:	781b      	ldrb	r3, [r3, #0]
    ea8e:	3301      	adds	r3, #1
    ea90:	b2da      	uxtb	r2, r3
    ea92:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ea96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea9a:	701a      	strb	r2, [r3, #0]
    ea9c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    eaa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eaa4:	781b      	ldrb	r3, [r3, #0]
    eaa6:	2bff      	cmp	r3, #255	; 0xff
    eaa8:	d105      	bne.n	eab6 <send_radIR+0x252>
    eaaa:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    eaae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eab2:	2200      	movs	r2, #0
    eab4:	701a      	strb	r2, [r3, #0]
    eab6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    eaba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eabe:	781b      	ldrb	r3, [r3, #0]
    eac0:	461a      	mov	r2, r3
    eac2:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    eac6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eaca:	7899      	ldrb	r1, [r3, #2]
    eacc:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    ead0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ead4:	5499      	strb	r1, [r3, r2]
    ead6:	4baf      	ldr	r3, [pc, #700]	; (ed94 <send_radIR+0x530>)
    ead8:	781a      	ldrb	r2, [r3, #0]
    eada:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    eade:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eae2:	781b      	ldrb	r3, [r3, #0]
    eae4:	4413      	add	r3, r2
    eae6:	b2da      	uxtb	r2, r3
    eae8:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    eaec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eaf0:	701a      	strb	r2, [r3, #0]
    eaf2:	f24a 53be 	movw	r3, #42430	; 0xa5be
    eaf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eafa:	781a      	ldrb	r2, [r3, #0]
    eafc:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    eb00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb04:	781b      	ldrb	r3, [r3, #0]
    eb06:	4413      	add	r3, r2
    eb08:	b2da      	uxtb	r2, r3
    eb0a:	f24a 53be 	movw	r3, #42430	; 0xa5be
    eb0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb12:	701a      	strb	r2, [r3, #0]
    eb14:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    eb18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb1c:	781b      	ldrb	r3, [r3, #0]
    eb1e:	3301      	adds	r3, #1
    eb20:	b2da      	uxtb	r2, r3
    eb22:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    eb26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb2a:	701a      	strb	r2, [r3, #0]
    eb2c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    eb30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb34:	781b      	ldrb	r3, [r3, #0]
    eb36:	2bff      	cmp	r3, #255	; 0xff
    eb38:	d105      	bne.n	eb46 <send_radIR+0x2e2>
    eb3a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    eb3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb42:	2200      	movs	r2, #0
    eb44:	701a      	strb	r2, [r3, #0]
    eb46:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    eb4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb4e:	781b      	ldrb	r3, [r3, #0]
    eb50:	461a      	mov	r2, r3
    eb52:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    eb56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb5a:	78d9      	ldrb	r1, [r3, #3]
    eb5c:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    eb60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb64:	5499      	strb	r1, [r3, r2]
    eb66:	4b8c      	ldr	r3, [pc, #560]	; (ed98 <send_radIR+0x534>)
    eb68:	781a      	ldrb	r2, [r3, #0]
    eb6a:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    eb6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb72:	781b      	ldrb	r3, [r3, #0]
    eb74:	4413      	add	r3, r2
    eb76:	b2da      	uxtb	r2, r3
    eb78:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    eb7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb80:	701a      	strb	r2, [r3, #0]
    eb82:	f24a 53be 	movw	r3, #42430	; 0xa5be
    eb86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb8a:	781a      	ldrb	r2, [r3, #0]
    eb8c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    eb90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb94:	781b      	ldrb	r3, [r3, #0]
    eb96:	4413      	add	r3, r2
    eb98:	b2da      	uxtb	r2, r3
    eb9a:	f24a 53be 	movw	r3, #42430	; 0xa5be
    eb9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eba2:	701a      	strb	r2, [r3, #0]
    eba4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    eba8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebac:	781b      	ldrb	r3, [r3, #0]
    ebae:	3301      	adds	r3, #1
    ebb0:	b2da      	uxtb	r2, r3
    ebb2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ebb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebba:	701a      	strb	r2, [r3, #0]
    ebbc:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ebc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebc4:	781b      	ldrb	r3, [r3, #0]
    ebc6:	2bff      	cmp	r3, #255	; 0xff
    ebc8:	d105      	bne.n	ebd6 <send_radIR+0x372>
    ebca:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ebce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebd2:	2200      	movs	r2, #0
    ebd4:	701a      	strb	r2, [r3, #0]
    ebd6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ebda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebde:	781b      	ldrb	r3, [r3, #0]
    ebe0:	461a      	mov	r2, r3
    ebe2:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    ebe6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebea:	7819      	ldrb	r1, [r3, #0]
    ebec:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    ebf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebf4:	5499      	strb	r1, [r3, r2]
    ebf6:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    ebfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebfe:	781a      	ldrb	r2, [r3, #0]
    ec00:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    ec04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec08:	781b      	ldrb	r3, [r3, #0]
    ec0a:	4413      	add	r3, r2
    ec0c:	b2da      	uxtb	r2, r3
    ec0e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    ec12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec16:	701a      	strb	r2, [r3, #0]
    ec18:	f24a 53be 	movw	r3, #42430	; 0xa5be
    ec1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec20:	781a      	ldrb	r2, [r3, #0]
    ec22:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    ec26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec2a:	781b      	ldrb	r3, [r3, #0]
    ec2c:	4413      	add	r3, r2
    ec2e:	b2da      	uxtb	r2, r3
    ec30:	f24a 53be 	movw	r3, #42430	; 0xa5be
    ec34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec38:	701a      	strb	r2, [r3, #0]
    ec3a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ec3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec42:	781b      	ldrb	r3, [r3, #0]
    ec44:	3301      	adds	r3, #1
    ec46:	b2da      	uxtb	r2, r3
    ec48:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ec4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec50:	701a      	strb	r2, [r3, #0]
    ec52:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ec56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec5a:	781b      	ldrb	r3, [r3, #0]
    ec5c:	2bff      	cmp	r3, #255	; 0xff
    ec5e:	d105      	bne.n	ec6c <send_radIR+0x408>
    ec60:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ec64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec68:	2200      	movs	r2, #0
    ec6a:	701a      	strb	r2, [r3, #0]
    ec6c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ec70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec74:	781b      	ldrb	r3, [r3, #0]
    ec76:	461a      	mov	r2, r3
    ec78:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    ec7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec80:	7859      	ldrb	r1, [r3, #1]
    ec82:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    ec86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec8a:	5499      	strb	r1, [r3, r2]
    ec8c:	4b43      	ldr	r3, [pc, #268]	; (ed9c <send_radIR+0x538>)
    ec8e:	781a      	ldrb	r2, [r3, #0]
    ec90:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    ec94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec98:	781b      	ldrb	r3, [r3, #0]
    ec9a:	4413      	add	r3, r2
    ec9c:	b2da      	uxtb	r2, r3
    ec9e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    eca2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eca6:	701a      	strb	r2, [r3, #0]
    eca8:	f24a 53be 	movw	r3, #42430	; 0xa5be
    ecac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ecb0:	781a      	ldrb	r2, [r3, #0]
    ecb2:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    ecb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ecba:	781b      	ldrb	r3, [r3, #0]
    ecbc:	4413      	add	r3, r2
    ecbe:	b2da      	uxtb	r2, r3
    ecc0:	f24a 53be 	movw	r3, #42430	; 0xa5be
    ecc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ecc8:	701a      	strb	r2, [r3, #0]
    ecca:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ecce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ecd2:	781b      	ldrb	r3, [r3, #0]
    ecd4:	3301      	adds	r3, #1
    ecd6:	b2da      	uxtb	r2, r3
    ecd8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ecdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ece0:	701a      	strb	r2, [r3, #0]
    ece2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ece6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ecea:	781b      	ldrb	r3, [r3, #0]
    ecec:	2bff      	cmp	r3, #255	; 0xff
    ecee:	d105      	bne.n	ecfc <send_radIR+0x498>
    ecf0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ecf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ecf8:	2200      	movs	r2, #0
    ecfa:	701a      	strb	r2, [r3, #0]
    ecfc:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ed00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed04:	781b      	ldrb	r3, [r3, #0]
    ed06:	461a      	mov	r2, r3
    ed08:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    ed0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed10:	7899      	ldrb	r1, [r3, #2]
    ed12:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    ed16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed1a:	5499      	strb	r1, [r3, r2]
    ed1c:	4b20      	ldr	r3, [pc, #128]	; (eda0 <send_radIR+0x53c>)
    ed1e:	781a      	ldrb	r2, [r3, #0]
    ed20:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    ed24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed28:	781b      	ldrb	r3, [r3, #0]
    ed2a:	4413      	add	r3, r2
    ed2c:	b2da      	uxtb	r2, r3
    ed2e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    ed32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed36:	701a      	strb	r2, [r3, #0]
    ed38:	f24a 53be 	movw	r3, #42430	; 0xa5be
    ed3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed40:	781a      	ldrb	r2, [r3, #0]
    ed42:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    ed46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed4a:	781b      	ldrb	r3, [r3, #0]
    ed4c:	4413      	add	r3, r2
    ed4e:	b2da      	uxtb	r2, r3
    ed50:	f24a 53be 	movw	r3, #42430	; 0xa5be
    ed54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed58:	701a      	strb	r2, [r3, #0]
    ed5a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ed5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed62:	781b      	ldrb	r3, [r3, #0]
    ed64:	3301      	adds	r3, #1
    ed66:	b2da      	uxtb	r2, r3
    ed68:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ed6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed70:	701a      	strb	r2, [r3, #0]
    ed72:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ed76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed7a:	781b      	ldrb	r3, [r3, #0]
    ed7c:	2bff      	cmp	r3, #255	; 0xff
    ed7e:	d111      	bne.n	eda4 <send_radIR+0x540>
    ed80:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ed84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed88:	2200      	movs	r2, #0
    ed8a:	701a      	strb	r2, [r3, #0]
    ed8c:	e00a      	b.n	eda4 <send_radIR+0x540>
    ed8e:	bf00      	nop
    ed90:	2000aab1 	.word	0x2000aab1
    ed94:	2000aab2 	.word	0x2000aab2
    ed98:	2000aab3 	.word	0x2000aab3
    ed9c:	2000aab5 	.word	0x2000aab5
    eda0:	2000aab6 	.word	0x2000aab6
    eda4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    eda8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    edac:	781b      	ldrb	r3, [r3, #0]
    edae:	461a      	mov	r2, r3
    edb0:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    edb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    edb8:	78d9      	ldrb	r1, [r3, #3]
    edba:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    edbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    edc2:	5499      	strb	r1, [r3, r2]
    edc4:	4bd3      	ldr	r3, [pc, #844]	; (f114 <send_radIR+0x8b0>)
    edc6:	781a      	ldrb	r2, [r3, #0]
    edc8:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    edcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    edd0:	781b      	ldrb	r3, [r3, #0]
    edd2:	4413      	add	r3, r2
    edd4:	b2da      	uxtb	r2, r3
    edd6:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    edda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    edde:	701a      	strb	r2, [r3, #0]
    ede0:	f24a 53be 	movw	r3, #42430	; 0xa5be
    ede4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ede8:	781a      	ldrb	r2, [r3, #0]
    edea:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    edee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    edf2:	781b      	ldrb	r3, [r3, #0]
    edf4:	4413      	add	r3, r2
    edf6:	b2da      	uxtb	r2, r3
    edf8:	f24a 53be 	movw	r3, #42430	; 0xa5be
    edfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee00:	701a      	strb	r2, [r3, #0]
    ee02:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ee06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee0a:	781b      	ldrb	r3, [r3, #0]
    ee0c:	3301      	adds	r3, #1
    ee0e:	b2da      	uxtb	r2, r3
    ee10:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ee14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee18:	701a      	strb	r2, [r3, #0]
    ee1a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ee1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee22:	781b      	ldrb	r3, [r3, #0]
    ee24:	2bff      	cmp	r3, #255	; 0xff
    ee26:	d105      	bne.n	ee34 <send_radIR+0x5d0>
    ee28:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ee2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee30:	2200      	movs	r2, #0
    ee32:	701a      	strb	r2, [r3, #0]
    ee34:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ee38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee3c:	781b      	ldrb	r3, [r3, #0]
    ee3e:	461a      	mov	r2, r3
    ee40:	f64a 23ac 	movw	r3, #43692	; 0xaaac
    ee44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee48:	7819      	ldrb	r1, [r3, #0]
    ee4a:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    ee4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee52:	5499      	strb	r1, [r3, r2]
    ee54:	f64a 23ac 	movw	r3, #43692	; 0xaaac
    ee58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee5c:	781a      	ldrb	r2, [r3, #0]
    ee5e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    ee62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee66:	781b      	ldrb	r3, [r3, #0]
    ee68:	4413      	add	r3, r2
    ee6a:	b2da      	uxtb	r2, r3
    ee6c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    ee70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee74:	701a      	strb	r2, [r3, #0]
    ee76:	f24a 53be 	movw	r3, #42430	; 0xa5be
    ee7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee7e:	781a      	ldrb	r2, [r3, #0]
    ee80:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    ee84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee88:	781b      	ldrb	r3, [r3, #0]
    ee8a:	4413      	add	r3, r2
    ee8c:	b2da      	uxtb	r2, r3
    ee8e:	f24a 53be 	movw	r3, #42430	; 0xa5be
    ee92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee96:	701a      	strb	r2, [r3, #0]
    ee98:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ee9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eea0:	781b      	ldrb	r3, [r3, #0]
    eea2:	3301      	adds	r3, #1
    eea4:	b2da      	uxtb	r2, r3
    eea6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    eeaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eeae:	701a      	strb	r2, [r3, #0]
    eeb0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    eeb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eeb8:	781b      	ldrb	r3, [r3, #0]
    eeba:	2bff      	cmp	r3, #255	; 0xff
    eebc:	d105      	bne.n	eeca <send_radIR+0x666>
    eebe:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    eec2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eec6:	2200      	movs	r2, #0
    eec8:	701a      	strb	r2, [r3, #0]
    eeca:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    eece:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eed2:	781b      	ldrb	r3, [r3, #0]
    eed4:	461a      	mov	r2, r3
    eed6:	f64a 23ac 	movw	r3, #43692	; 0xaaac
    eeda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eede:	7859      	ldrb	r1, [r3, #1]
    eee0:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    eee4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eee8:	5499      	strb	r1, [r3, r2]
    eeea:	4b8b      	ldr	r3, [pc, #556]	; (f118 <send_radIR+0x8b4>)
    eeec:	781a      	ldrb	r2, [r3, #0]
    eeee:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    eef2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eef6:	781b      	ldrb	r3, [r3, #0]
    eef8:	4413      	add	r3, r2
    eefa:	b2da      	uxtb	r2, r3
    eefc:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    ef00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef04:	701a      	strb	r2, [r3, #0]
    ef06:	f24a 53be 	movw	r3, #42430	; 0xa5be
    ef0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef0e:	781a      	ldrb	r2, [r3, #0]
    ef10:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    ef14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef18:	781b      	ldrb	r3, [r3, #0]
    ef1a:	4413      	add	r3, r2
    ef1c:	b2da      	uxtb	r2, r3
    ef1e:	f24a 53be 	movw	r3, #42430	; 0xa5be
    ef22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef26:	701a      	strb	r2, [r3, #0]
    ef28:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ef2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef30:	781b      	ldrb	r3, [r3, #0]
    ef32:	3301      	adds	r3, #1
    ef34:	b2da      	uxtb	r2, r3
    ef36:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ef3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef3e:	701a      	strb	r2, [r3, #0]
    ef40:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ef44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef48:	781b      	ldrb	r3, [r3, #0]
    ef4a:	2bff      	cmp	r3, #255	; 0xff
    ef4c:	d105      	bne.n	ef5a <send_radIR+0x6f6>
    ef4e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ef52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef56:	2200      	movs	r2, #0
    ef58:	701a      	strb	r2, [r3, #0]
    ef5a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ef5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef62:	781b      	ldrb	r3, [r3, #0]
    ef64:	461a      	mov	r2, r3
    ef66:	f64a 23ac 	movw	r3, #43692	; 0xaaac
    ef6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef6e:	7899      	ldrb	r1, [r3, #2]
    ef70:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    ef74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef78:	5499      	strb	r1, [r3, r2]
    ef7a:	4b68      	ldr	r3, [pc, #416]	; (f11c <send_radIR+0x8b8>)
    ef7c:	781a      	ldrb	r2, [r3, #0]
    ef7e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    ef82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef86:	781b      	ldrb	r3, [r3, #0]
    ef88:	4413      	add	r3, r2
    ef8a:	b2da      	uxtb	r2, r3
    ef8c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    ef90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef94:	701a      	strb	r2, [r3, #0]
    ef96:	f24a 53be 	movw	r3, #42430	; 0xa5be
    ef9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef9e:	781a      	ldrb	r2, [r3, #0]
    efa0:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    efa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    efa8:	781b      	ldrb	r3, [r3, #0]
    efaa:	4413      	add	r3, r2
    efac:	b2da      	uxtb	r2, r3
    efae:	f24a 53be 	movw	r3, #42430	; 0xa5be
    efb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    efb6:	701a      	strb	r2, [r3, #0]
    efb8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    efbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    efc0:	781b      	ldrb	r3, [r3, #0]
    efc2:	3301      	adds	r3, #1
    efc4:	b2da      	uxtb	r2, r3
    efc6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    efca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    efce:	701a      	strb	r2, [r3, #0]
    efd0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    efd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    efd8:	781b      	ldrb	r3, [r3, #0]
    efda:	2bff      	cmp	r3, #255	; 0xff
    efdc:	d105      	bne.n	efea <send_radIR+0x786>
    efde:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    efe2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    efe6:	2200      	movs	r2, #0
    efe8:	701a      	strb	r2, [r3, #0]
    efea:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    efee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eff2:	781b      	ldrb	r3, [r3, #0]
    eff4:	461a      	mov	r2, r3
    eff6:	f64a 23ac 	movw	r3, #43692	; 0xaaac
    effa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    effe:	78d9      	ldrb	r1, [r3, #3]
    f000:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    f004:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f008:	5499      	strb	r1, [r3, r2]
    f00a:	4b45      	ldr	r3, [pc, #276]	; (f120 <send_radIR+0x8bc>)
    f00c:	781a      	ldrb	r2, [r3, #0]
    f00e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    f012:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f016:	781b      	ldrb	r3, [r3, #0]
    f018:	4413      	add	r3, r2
    f01a:	b2da      	uxtb	r2, r3
    f01c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    f020:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f024:	701a      	strb	r2, [r3, #0]
    f026:	f24a 53be 	movw	r3, #42430	; 0xa5be
    f02a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f02e:	781a      	ldrb	r2, [r3, #0]
    f030:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    f034:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f038:	781b      	ldrb	r3, [r3, #0]
    f03a:	4413      	add	r3, r2
    f03c:	b2da      	uxtb	r2, r3
    f03e:	f24a 53be 	movw	r3, #42430	; 0xa5be
    f042:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f046:	701a      	strb	r2, [r3, #0]
    f048:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    f04c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f050:	781b      	ldrb	r3, [r3, #0]
    f052:	3301      	adds	r3, #1
    f054:	b2da      	uxtb	r2, r3
    f056:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    f05a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f05e:	701a      	strb	r2, [r3, #0]
    f060:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    f064:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f068:	781b      	ldrb	r3, [r3, #0]
    f06a:	2bff      	cmp	r3, #255	; 0xff
    f06c:	d105      	bne.n	f07a <send_radIR+0x816>
    f06e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    f072:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f076:	2200      	movs	r2, #0
    f078:	701a      	strb	r2, [r3, #0]
    f07a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    f07e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f082:	781b      	ldrb	r3, [r3, #0]
    f084:	461a      	mov	r2, r3
    f086:	f240 130a 	movw	r3, #266	; 0x10a
    f08a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f08e:	7819      	ldrb	r1, [r3, #0]
    f090:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    f094:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f098:	5499      	strb	r1, [r3, r2]
    f09a:	f240 130a 	movw	r3, #266	; 0x10a
    f09e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0a2:	781a      	ldrb	r2, [r3, #0]
    f0a4:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    f0a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0ac:	781b      	ldrb	r3, [r3, #0]
    f0ae:	4413      	add	r3, r2
    f0b0:	b2da      	uxtb	r2, r3
    f0b2:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    f0b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0ba:	701a      	strb	r2, [r3, #0]
    f0bc:	f24a 53be 	movw	r3, #42430	; 0xa5be
    f0c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0c4:	781a      	ldrb	r2, [r3, #0]
    f0c6:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    f0ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0ce:	781b      	ldrb	r3, [r3, #0]
    f0d0:	4413      	add	r3, r2
    f0d2:	b2da      	uxtb	r2, r3
    f0d4:	f24a 53be 	movw	r3, #42430	; 0xa5be
    f0d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0dc:	701a      	strb	r2, [r3, #0]
    f0de:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    f0e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0e6:	781b      	ldrb	r3, [r3, #0]
    f0e8:	3301      	adds	r3, #1
    f0ea:	b2da      	uxtb	r2, r3
    f0ec:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    f0f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0f4:	701a      	strb	r2, [r3, #0]
    f0f6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    f0fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0fe:	781b      	ldrb	r3, [r3, #0]
    f100:	2bff      	cmp	r3, #255	; 0xff
    f102:	d10f      	bne.n	f124 <send_radIR+0x8c0>
    f104:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    f108:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f10c:	2200      	movs	r2, #0
    f10e:	701a      	strb	r2, [r3, #0]
    f110:	e008      	b.n	f124 <send_radIR+0x8c0>
    f112:	bf00      	nop
    f114:	2000aab7 	.word	0x2000aab7
    f118:	2000aaad 	.word	0x2000aaad
    f11c:	2000aaae 	.word	0x2000aaae
    f120:	2000aaaf 	.word	0x2000aaaf
    f124:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    f128:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f12c:	781b      	ldrb	r3, [r3, #0]
    f12e:	461a      	mov	r2, r3
    f130:	f240 130a 	movw	r3, #266	; 0x10a
    f134:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f138:	7859      	ldrb	r1, [r3, #1]
    f13a:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    f13e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f142:	5499      	strb	r1, [r3, r2]
    f144:	4bc2      	ldr	r3, [pc, #776]	; (f450 <send_radIR+0xbec>)
    f146:	781a      	ldrb	r2, [r3, #0]
    f148:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    f14c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f150:	781b      	ldrb	r3, [r3, #0]
    f152:	4413      	add	r3, r2
    f154:	b2da      	uxtb	r2, r3
    f156:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    f15a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f15e:	701a      	strb	r2, [r3, #0]
    f160:	f24a 53be 	movw	r3, #42430	; 0xa5be
    f164:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f168:	781a      	ldrb	r2, [r3, #0]
    f16a:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    f16e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f172:	781b      	ldrb	r3, [r3, #0]
    f174:	4413      	add	r3, r2
    f176:	b2da      	uxtb	r2, r3
    f178:	f24a 53be 	movw	r3, #42430	; 0xa5be
    f17c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f180:	701a      	strb	r2, [r3, #0]
    f182:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    f186:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f18a:	781b      	ldrb	r3, [r3, #0]
    f18c:	3301      	adds	r3, #1
    f18e:	b2da      	uxtb	r2, r3
    f190:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    f194:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f198:	701a      	strb	r2, [r3, #0]
    f19a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    f19e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1a2:	781b      	ldrb	r3, [r3, #0]
    f1a4:	2bff      	cmp	r3, #255	; 0xff
    f1a6:	d105      	bne.n	f1b4 <send_radIR+0x950>
    f1a8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    f1ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1b0:	2200      	movs	r2, #0
    f1b2:	701a      	strb	r2, [r3, #0]
    f1b4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    f1b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1bc:	781b      	ldrb	r3, [r3, #0]
    f1be:	461a      	mov	r2, r3
    f1c0:	f240 130c 	movw	r3, #268	; 0x10c
    f1c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1c8:	7819      	ldrb	r1, [r3, #0]
    f1ca:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    f1ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1d2:	5499      	strb	r1, [r3, r2]
    f1d4:	f240 130c 	movw	r3, #268	; 0x10c
    f1d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1dc:	781a      	ldrb	r2, [r3, #0]
    f1de:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    f1e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1e6:	781b      	ldrb	r3, [r3, #0]
    f1e8:	4413      	add	r3, r2
    f1ea:	b2da      	uxtb	r2, r3
    f1ec:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    f1f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1f4:	701a      	strb	r2, [r3, #0]
    f1f6:	f24a 53be 	movw	r3, #42430	; 0xa5be
    f1fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1fe:	781a      	ldrb	r2, [r3, #0]
    f200:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    f204:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f208:	781b      	ldrb	r3, [r3, #0]
    f20a:	4413      	add	r3, r2
    f20c:	b2da      	uxtb	r2, r3
    f20e:	f24a 53be 	movw	r3, #42430	; 0xa5be
    f212:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f216:	701a      	strb	r2, [r3, #0]
    f218:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    f21c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f220:	781b      	ldrb	r3, [r3, #0]
    f222:	3301      	adds	r3, #1
    f224:	b2da      	uxtb	r2, r3
    f226:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    f22a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f22e:	701a      	strb	r2, [r3, #0]
    f230:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    f234:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f238:	781b      	ldrb	r3, [r3, #0]
    f23a:	2bff      	cmp	r3, #255	; 0xff
    f23c:	d105      	bne.n	f24a <send_radIR+0x9e6>
    f23e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    f242:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f246:	2200      	movs	r2, #0
    f248:	701a      	strb	r2, [r3, #0]
    f24a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    f24e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f252:	781b      	ldrb	r3, [r3, #0]
    f254:	461a      	mov	r2, r3
    f256:	f240 130c 	movw	r3, #268	; 0x10c
    f25a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f25e:	7859      	ldrb	r1, [r3, #1]
    f260:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    f264:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f268:	5499      	strb	r1, [r3, r2]
    f26a:	4b7a      	ldr	r3, [pc, #488]	; (f454 <send_radIR+0xbf0>)
    f26c:	781a      	ldrb	r2, [r3, #0]
    f26e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    f272:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f276:	781b      	ldrb	r3, [r3, #0]
    f278:	4413      	add	r3, r2
    f27a:	b2da      	uxtb	r2, r3
    f27c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    f280:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f284:	701a      	strb	r2, [r3, #0]
    f286:	f24a 53be 	movw	r3, #42430	; 0xa5be
    f28a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f28e:	781a      	ldrb	r2, [r3, #0]
    f290:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    f294:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f298:	781b      	ldrb	r3, [r3, #0]
    f29a:	4413      	add	r3, r2
    f29c:	b2da      	uxtb	r2, r3
    f29e:	f24a 53be 	movw	r3, #42430	; 0xa5be
    f2a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2a6:	701a      	strb	r2, [r3, #0]
    f2a8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    f2ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2b0:	781b      	ldrb	r3, [r3, #0]
    f2b2:	3301      	adds	r3, #1
    f2b4:	b2da      	uxtb	r2, r3
    f2b6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    f2ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2be:	701a      	strb	r2, [r3, #0]
    f2c0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    f2c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2c8:	781b      	ldrb	r3, [r3, #0]
    f2ca:	2bff      	cmp	r3, #255	; 0xff
    f2cc:	d105      	bne.n	f2da <send_radIR+0xa76>
    f2ce:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    f2d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2d6:	2200      	movs	r2, #0
    f2d8:	701a      	strb	r2, [r3, #0]
    f2da:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    f2de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2e2:	781b      	ldrb	r3, [r3, #0]
    f2e4:	461a      	mov	r2, r3
    f2e6:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    f2ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2ee:	7819      	ldrb	r1, [r3, #0]
    f2f0:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    f2f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2f8:	5499      	strb	r1, [r3, r2]
    f2fa:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    f2fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f302:	781b      	ldrb	r3, [r3, #0]
    f304:	3301      	adds	r3, #1
    f306:	b2da      	uxtb	r2, r3
    f308:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    f30c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f310:	701a      	strb	r2, [r3, #0]
    f312:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    f316:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f31a:	781b      	ldrb	r3, [r3, #0]
    f31c:	2bff      	cmp	r3, #255	; 0xff
    f31e:	d105      	bne.n	f32c <send_radIR+0xac8>
    f320:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    f324:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f328:	2200      	movs	r2, #0
    f32a:	701a      	strb	r2, [r3, #0]
    f32c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    f330:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f334:	781b      	ldrb	r3, [r3, #0]
    f336:	461a      	mov	r2, r3
    f338:	f24a 53be 	movw	r3, #42430	; 0xa5be
    f33c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f340:	7819      	ldrb	r1, [r3, #0]
    f342:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    f346:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f34a:	5499      	strb	r1, [r3, r2]
    f34c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    f350:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f354:	781b      	ldrb	r3, [r3, #0]
    f356:	3301      	adds	r3, #1
    f358:	b2da      	uxtb	r2, r3
    f35a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    f35e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f362:	701a      	strb	r2, [r3, #0]
    f364:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    f368:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f36c:	781b      	ldrb	r3, [r3, #0]
    f36e:	2bff      	cmp	r3, #255	; 0xff
    f370:	d105      	bne.n	f37e <send_radIR+0xb1a>
    f372:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    f376:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f37a:	2200      	movs	r2, #0
    f37c:	701a      	strb	r2, [r3, #0]
    f37e:	f242 0339 	movw	r3, #8249	; 0x2039
    f382:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f386:	781b      	ldrb	r3, [r3, #0]
    f388:	b2db      	uxtb	r3, r3
    f38a:	f003 0310 	and.w	r3, r3, #16
    f38e:	2b00      	cmp	r3, #0
    f390:	d15a      	bne.n	f448 <send_radIR+0xbe4>
    f392:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    f396:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f39a:	781b      	ldrb	r3, [r3, #0]
    f39c:	b2db      	uxtb	r3, r3
    f39e:	461a      	mov	r2, r3
    f3a0:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    f3a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3a8:	5c9a      	ldrb	r2, [r3, r2]
    f3aa:	f24a 53bb 	movw	r3, #42427	; 0xa5bb
    f3ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3b2:	701a      	strb	r2, [r3, #0]
    f3b4:	f24a 53bc 	movw	r3, #42428	; 0xa5bc
    f3b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3bc:	2200      	movs	r2, #0
    f3be:	701a      	strb	r2, [r3, #0]
    f3c0:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    f3c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3c8:	781b      	ldrb	r3, [r3, #0]
    f3ca:	b2db      	uxtb	r3, r3
    f3cc:	3301      	adds	r3, #1
    f3ce:	b2da      	uxtb	r2, r3
    f3d0:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    f3d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3d8:	701a      	strb	r2, [r3, #0]
    f3da:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    f3de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3e2:	781b      	ldrb	r3, [r3, #0]
    f3e4:	b2db      	uxtb	r3, r3
    f3e6:	2bff      	cmp	r3, #255	; 0xff
    f3e8:	d105      	bne.n	f3f6 <send_radIR+0xb92>
    f3ea:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    f3ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3f2:	2200      	movs	r2, #0
    f3f4:	701a      	strb	r2, [r3, #0]
    f3f6:	f242 0338 	movw	r3, #8248	; 0x2038
    f3fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3fe:	f242 0238 	movw	r2, #8248	; 0x2038
    f402:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f406:	7812      	ldrb	r2, [r2, #0]
    f408:	b2d2      	uxtb	r2, r2
    f40a:	f042 0201 	orr.w	r2, r2, #1
    f40e:	b2d2      	uxtb	r2, r2
    f410:	701a      	strb	r2, [r3, #0]
    f412:	f242 0339 	movw	r3, #8249	; 0x2039
    f416:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f41a:	f242 0239 	movw	r2, #8249	; 0x2039
    f41e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f422:	7812      	ldrb	r2, [r2, #0]
    f424:	b2d2      	uxtb	r2, r2
    f426:	f042 0210 	orr.w	r2, r2, #16
    f42a:	b2d2      	uxtb	r2, r2
    f42c:	701a      	strb	r2, [r3, #0]
    f42e:	e00b      	b.n	f448 <send_radIR+0xbe4>
    f430:	f24a 43b8 	movw	r3, #42168	; 0xa4b8
    f434:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f438:	781b      	ldrb	r3, [r3, #0]
    f43a:	3301      	adds	r3, #1
    f43c:	b2da      	uxtb	r2, r3
    f43e:	f24a 43b8 	movw	r3, #42168	; 0xa4b8
    f442:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f446:	701a      	strb	r2, [r3, #0]
}
    f448:	46bd      	mov	sp, r7
    f44a:	f85d 7b04 	ldr.w	r7, [sp], #4
    f44e:	4770      	bx	lr
    f450:	2000010b 	.word	0x2000010b
    f454:	2000010d 	.word	0x2000010d

0000f458 <send_takeOff>:

void send_takeOff(void){
    f458:	b580      	push	{r7, lr}
    f45a:	af00      	add	r7, sp, #0
  if (gps_pos_available){
    f45c:	f24a 634e 	movw	r3, #42574	; 0xa64e
    f460:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f464:	781b      	ldrb	r3, [r3, #0]
    f466:	2b00      	cmp	r3, #0
    f468:	f000 8200 	beq.w	f86c <send_takeOff+0x414>
     if (!estimator_flight_time && (estimator_hspeed_mod > MIN_SPEED_FOR_TAKEOFF)) {
    f46c:	f64a 239c 	movw	r3, #43676	; 0xaa9c
    f470:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f474:	881b      	ldrh	r3, [r3, #0]
    f476:	2b00      	cmp	r3, #0
    f478:	f040 81f2 	bne.w	f860 <send_takeOff+0x408>
    f47c:	f64a 23a4 	movw	r3, #43684	; 0xaaa4
    f480:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f484:	681b      	ldr	r3, [r3, #0]
    f486:	4618      	mov	r0, r3
    f488:	f04f 0100 	mov.w	r1, #0
    f48c:	f2c4 01a0 	movt	r1, #16544	; 0x40a0
    f490:	f007 fe22 	bl	170d8 <__aeabi_fcmpgt>
    f494:	4603      	mov	r3, r0
    f496:	2b00      	cmp	r3, #0
    f498:	f000 81e2 	beq.w	f860 <send_takeOff+0x408>
        estimator_flight_time = 1;
    f49c:	f64a 239c 	movw	r3, #43676	; 0xaa9c
    f4a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4a4:	2201      	movs	r2, #1
    f4a6:	801a      	strh	r2, [r3, #0]
        launch = TRUE; /* Not set in non auto launch */
    f4a8:	f24a 43b0 	movw	r3, #42160	; 0xa4b0
    f4ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4b0:	2201      	movs	r2, #1
    f4b2:	701a      	strb	r2, [r3, #0]
        DOWNLINK_SEND_TAKEOFF(&cputime);
    f4b4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    f4b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4bc:	781a      	ldrb	r2, [r3, #0]
    f4be:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    f4c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4c6:	781b      	ldrb	r3, [r3, #0]
    f4c8:	b2db      	uxtb	r3, r3
    f4ca:	429a      	cmp	r2, r3
    f4cc:	d313      	bcc.n	f4f6 <send_takeOff+0x9e>
    f4ce:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    f4d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4d6:	781b      	ldrb	r3, [r3, #0]
    f4d8:	b2db      	uxtb	r3, r3
    f4da:	461a      	mov	r2, r3
    f4dc:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    f4e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4e4:	781b      	ldrb	r3, [r3, #0]
    f4e6:	1ad3      	subs	r3, r2, r3
    f4e8:	33ff      	adds	r3, #255	; 0xff
    f4ea:	2b06      	cmp	r3, #6
    f4ec:	bfd4      	ite	le
    f4ee:	2300      	movle	r3, #0
    f4f0:	2301      	movgt	r3, #1
    f4f2:	b2db      	uxtb	r3, r3
    f4f4:	e011      	b.n	f51a <send_takeOff+0xc2>
    f4f6:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    f4fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4fe:	781b      	ldrb	r3, [r3, #0]
    f500:	b2db      	uxtb	r3, r3
    f502:	461a      	mov	r2, r3
    f504:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    f508:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f50c:	781b      	ldrb	r3, [r3, #0]
    f50e:	1ad3      	subs	r3, r2, r3
    f510:	2b06      	cmp	r3, #6
    f512:	bfd4      	ite	le
    f514:	2300      	movle	r3, #0
    f516:	2301      	movgt	r3, #1
    f518:	b2db      	uxtb	r3, r3
    f51a:	2b00      	cmp	r3, #0
    f51c:	f000 8194 	beq.w	f848 <send_takeOff+0x3f0>
    f520:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    f524:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f528:	781b      	ldrb	r3, [r3, #0]
    f52a:	461a      	mov	r2, r3
    f52c:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    f530:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f534:	2105      	movs	r1, #5
    f536:	5499      	strb	r1, [r3, r2]
    f538:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    f53c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f540:	781b      	ldrb	r3, [r3, #0]
    f542:	3301      	adds	r3, #1
    f544:	b2da      	uxtb	r2, r3
    f546:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    f54a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f54e:	701a      	strb	r2, [r3, #0]
    f550:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    f554:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f558:	781b      	ldrb	r3, [r3, #0]
    f55a:	2bff      	cmp	r3, #255	; 0xff
    f55c:	d105      	bne.n	f56a <send_takeOff+0x112>
    f55e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    f562:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f566:	2200      	movs	r2, #0
    f568:	701a      	strb	r2, [r3, #0]
    f56a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    f56e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f572:	781b      	ldrb	r3, [r3, #0]
    f574:	461a      	mov	r2, r3
    f576:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    f57a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f57e:	2104      	movs	r1, #4
    f580:	5499      	strb	r1, [r3, r2]
    f582:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    f586:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f58a:	781b      	ldrb	r3, [r3, #0]
    f58c:	3301      	adds	r3, #1
    f58e:	b2da      	uxtb	r2, r3
    f590:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    f594:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f598:	701a      	strb	r2, [r3, #0]
    f59a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    f59e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5a2:	781b      	ldrb	r3, [r3, #0]
    f5a4:	2bff      	cmp	r3, #255	; 0xff
    f5a6:	d105      	bne.n	f5b4 <send_takeOff+0x15c>
    f5a8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    f5ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5b0:	2200      	movs	r2, #0
    f5b2:	701a      	strb	r2, [r3, #0]
    f5b4:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    f5b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5bc:	2204      	movs	r2, #4
    f5be:	701a      	strb	r2, [r3, #0]
    f5c0:	f24a 53be 	movw	r3, #42430	; 0xa5be
    f5c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5c8:	2204      	movs	r2, #4
    f5ca:	701a      	strb	r2, [r3, #0]
    f5cc:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    f5d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5d4:	781b      	ldrb	r3, [r3, #0]
    f5d6:	461a      	mov	r2, r3
    f5d8:	f24a 439a 	movw	r3, #42138	; 0xa49a
    f5dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5e0:	7819      	ldrb	r1, [r3, #0]
    f5e2:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    f5e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5ea:	5499      	strb	r1, [r3, r2]
    f5ec:	f24a 439a 	movw	r3, #42138	; 0xa49a
    f5f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5f4:	781a      	ldrb	r2, [r3, #0]
    f5f6:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    f5fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5fe:	781b      	ldrb	r3, [r3, #0]
    f600:	4413      	add	r3, r2
    f602:	b2da      	uxtb	r2, r3
    f604:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    f608:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f60c:	701a      	strb	r2, [r3, #0]
    f60e:	f24a 53be 	movw	r3, #42430	; 0xa5be
    f612:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f616:	781a      	ldrb	r2, [r3, #0]
    f618:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    f61c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f620:	781b      	ldrb	r3, [r3, #0]
    f622:	4413      	add	r3, r2
    f624:	b2da      	uxtb	r2, r3
    f626:	f24a 53be 	movw	r3, #42430	; 0xa5be
    f62a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f62e:	701a      	strb	r2, [r3, #0]
    f630:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    f634:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f638:	781b      	ldrb	r3, [r3, #0]
    f63a:	3301      	adds	r3, #1
    f63c:	b2da      	uxtb	r2, r3
    f63e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    f642:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f646:	701a      	strb	r2, [r3, #0]
    f648:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    f64c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f650:	781b      	ldrb	r3, [r3, #0]
    f652:	2bff      	cmp	r3, #255	; 0xff
    f654:	d105      	bne.n	f662 <send_takeOff+0x20a>
    f656:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    f65a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f65e:	2200      	movs	r2, #0
    f660:	701a      	strb	r2, [r3, #0]
    f662:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    f666:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f66a:	781b      	ldrb	r3, [r3, #0]
    f66c:	461a      	mov	r2, r3
    f66e:	f24a 439a 	movw	r3, #42138	; 0xa49a
    f672:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f676:	7859      	ldrb	r1, [r3, #1]
    f678:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    f67c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f680:	5499      	strb	r1, [r3, r2]
    f682:	4b7b      	ldr	r3, [pc, #492]	; (f870 <send_takeOff+0x418>)
    f684:	781a      	ldrb	r2, [r3, #0]
    f686:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    f68a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f68e:	781b      	ldrb	r3, [r3, #0]
    f690:	4413      	add	r3, r2
    f692:	b2da      	uxtb	r2, r3
    f694:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    f698:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f69c:	701a      	strb	r2, [r3, #0]
    f69e:	f24a 53be 	movw	r3, #42430	; 0xa5be
    f6a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6a6:	781a      	ldrb	r2, [r3, #0]
    f6a8:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    f6ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6b0:	781b      	ldrb	r3, [r3, #0]
    f6b2:	4413      	add	r3, r2
    f6b4:	b2da      	uxtb	r2, r3
    f6b6:	f24a 53be 	movw	r3, #42430	; 0xa5be
    f6ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6be:	701a      	strb	r2, [r3, #0]
    f6c0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    f6c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6c8:	781b      	ldrb	r3, [r3, #0]
    f6ca:	3301      	adds	r3, #1
    f6cc:	b2da      	uxtb	r2, r3
    f6ce:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    f6d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6d6:	701a      	strb	r2, [r3, #0]
    f6d8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    f6dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6e0:	781b      	ldrb	r3, [r3, #0]
    f6e2:	2bff      	cmp	r3, #255	; 0xff
    f6e4:	d105      	bne.n	f6f2 <send_takeOff+0x29a>
    f6e6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    f6ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6ee:	2200      	movs	r2, #0
    f6f0:	701a      	strb	r2, [r3, #0]
    f6f2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    f6f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6fa:	781b      	ldrb	r3, [r3, #0]
    f6fc:	461a      	mov	r2, r3
    f6fe:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    f702:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f706:	7819      	ldrb	r1, [r3, #0]
    f708:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    f70c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f710:	5499      	strb	r1, [r3, r2]
    f712:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    f716:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f71a:	781b      	ldrb	r3, [r3, #0]
    f71c:	3301      	adds	r3, #1
    f71e:	b2da      	uxtb	r2, r3
    f720:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    f724:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f728:	701a      	strb	r2, [r3, #0]
    f72a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    f72e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f732:	781b      	ldrb	r3, [r3, #0]
    f734:	2bff      	cmp	r3, #255	; 0xff
    f736:	d105      	bne.n	f744 <send_takeOff+0x2ec>
    f738:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    f73c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f740:	2200      	movs	r2, #0
    f742:	701a      	strb	r2, [r3, #0]
    f744:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    f748:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f74c:	781b      	ldrb	r3, [r3, #0]
    f74e:	461a      	mov	r2, r3
    f750:	f24a 53be 	movw	r3, #42430	; 0xa5be
    f754:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f758:	7819      	ldrb	r1, [r3, #0]
    f75a:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    f75e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f762:	5499      	strb	r1, [r3, r2]
    f764:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    f768:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f76c:	781b      	ldrb	r3, [r3, #0]
    f76e:	3301      	adds	r3, #1
    f770:	b2da      	uxtb	r2, r3
    f772:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    f776:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f77a:	701a      	strb	r2, [r3, #0]
    f77c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    f780:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f784:	781b      	ldrb	r3, [r3, #0]
    f786:	2bff      	cmp	r3, #255	; 0xff
    f788:	d105      	bne.n	f796 <send_takeOff+0x33e>
    f78a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    f78e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f792:	2200      	movs	r2, #0
    f794:	701a      	strb	r2, [r3, #0]
    f796:	f242 0339 	movw	r3, #8249	; 0x2039
    f79a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f79e:	781b      	ldrb	r3, [r3, #0]
    f7a0:	b2db      	uxtb	r3, r3
    f7a2:	f003 0310 	and.w	r3, r3, #16
    f7a6:	2b00      	cmp	r3, #0
    f7a8:	d15a      	bne.n	f860 <send_takeOff+0x408>
    f7aa:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    f7ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7b2:	781b      	ldrb	r3, [r3, #0]
    f7b4:	b2db      	uxtb	r3, r3
    f7b6:	461a      	mov	r2, r3
    f7b8:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    f7bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7c0:	5c9a      	ldrb	r2, [r3, r2]
    f7c2:	f24a 53bb 	movw	r3, #42427	; 0xa5bb
    f7c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7ca:	701a      	strb	r2, [r3, #0]
    f7cc:	f24a 53bc 	movw	r3, #42428	; 0xa5bc
    f7d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7d4:	2200      	movs	r2, #0
    f7d6:	701a      	strb	r2, [r3, #0]
    f7d8:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    f7dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7e0:	781b      	ldrb	r3, [r3, #0]
    f7e2:	b2db      	uxtb	r3, r3
    f7e4:	3301      	adds	r3, #1
    f7e6:	b2da      	uxtb	r2, r3
    f7e8:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    f7ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7f0:	701a      	strb	r2, [r3, #0]
    f7f2:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    f7f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7fa:	781b      	ldrb	r3, [r3, #0]
    f7fc:	b2db      	uxtb	r3, r3
    f7fe:	2bff      	cmp	r3, #255	; 0xff
    f800:	d105      	bne.n	f80e <send_takeOff+0x3b6>
    f802:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    f806:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f80a:	2200      	movs	r2, #0
    f80c:	701a      	strb	r2, [r3, #0]
    f80e:	f242 0338 	movw	r3, #8248	; 0x2038
    f812:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f816:	f242 0238 	movw	r2, #8248	; 0x2038
    f81a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f81e:	7812      	ldrb	r2, [r2, #0]
    f820:	b2d2      	uxtb	r2, r2
    f822:	f042 0201 	orr.w	r2, r2, #1
    f826:	b2d2      	uxtb	r2, r2
    f828:	701a      	strb	r2, [r3, #0]
    f82a:	f242 0339 	movw	r3, #8249	; 0x2039
    f82e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f832:	f242 0239 	movw	r2, #8249	; 0x2039
    f836:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f83a:	7812      	ldrb	r2, [r2, #0]
    f83c:	b2d2      	uxtb	r2, r2
    f83e:	f042 0210 	orr.w	r2, r2, #16
    f842:	b2d2      	uxtb	r2, r2
    f844:	701a      	strb	r2, [r3, #0]
    f846:	e00b      	b.n	f860 <send_takeOff+0x408>
    f848:	f24a 43b8 	movw	r3, #42168	; 0xa4b8
    f84c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f850:	781b      	ldrb	r3, [r3, #0]
    f852:	3301      	adds	r3, #1
    f854:	b2da      	uxtb	r2, r3
    f856:	f24a 43b8 	movw	r3, #42168	; 0xa4b8
    f85a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f85e:	701a      	strb	r2, [r3, #0]
     }
     gps_pos_available = FALSE; 
    f860:	f24a 634e 	movw	r3, #42574	; 0xa64e
    f864:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f868:	2200      	movs	r2, #0
    f86a:	701a      	strb	r2, [r3, #0]
  }
  //vPrintString("S_16 receive_gps_data_task end!\n\r");
}
    f86c:	bd80      	pop	{r7, pc}
    f86e:	bf00      	nop
    f870:	2000a49b 	.word	0x2000a49b
    f874:	f3af 8000 	nop.w

0000f878 <modem_init>:
uint8_t    tx_byte;
uint8_t    tx_byte_idx;

uint8_t ck_a, ck_b;

void modem_init( void ) {
    f878:	b480      	push	{r7}
    f87a:	af00      	add	r7, sp, #0
  /* 
     on >= V1.2 boards, 4MHz modem clock is generated
     by one PWM module.
  */
#if defined CTL_BRD_V1_2 || defined CTL_BRD_V1_2_1
  MODEM_OSC_DDR |= _BV(MODEM_OSC);
    f87c:	f242 0317 	movw	r3, #8215	; 0x2017
    f880:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f884:	f242 0217 	movw	r2, #8215	; 0x2017
    f888:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f88c:	7812      	ldrb	r2, [r2, #0]
    f88e:	b2d2      	uxtb	r2, r2
    f890:	f042 0210 	orr.w	r2, r2, #16
    f894:	b2d2      	uxtb	r2, r2
    f896:	701a      	strb	r2, [r3, #0]
  OCR0 = 1; /* 4MhZ */
    f898:	f242 0331 	movw	r3, #8241	; 0x2031
    f89c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8a0:	2201      	movs	r2, #1
    f8a2:	701a      	strb	r2, [r3, #0]
  TCCR0 = _BV(WGM01) | _BV(COM00) | _BV(CS00);
    f8a4:	f242 0333 	movw	r3, #8243	; 0x2033
    f8a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8ac:	2219      	movs	r2, #25
    f8ae:	701a      	strb	r2, [r3, #0]
#endif

  /* setup TX_EN and TX_DATA pin as output */
  MODEM_TX_DDR |= _BV(MODEM_TX_EN) | _BV(MODEM_TX_DATA);
    f8b0:	f242 0311 	movw	r3, #8209	; 0x2011
    f8b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8b8:	f242 0211 	movw	r2, #8209	; 0x2011
    f8bc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f8c0:	7812      	ldrb	r2, [r2, #0]
    f8c2:	b2d2      	uxtb	r2, r2
    f8c4:	f062 023f 	orn	r2, r2, #63	; 0x3f
    f8c8:	b2d2      	uxtb	r2, r2
    f8ca:	701a      	strb	r2, [r3, #0]
  /* data idles hight */
  sbi(MODEM_TX_PORT, MODEM_TX_DATA);
    f8cc:	f242 0312 	movw	r3, #8210	; 0x2012
    f8d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8d4:	f242 0212 	movw	r2, #8210	; 0x2012
    f8d8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f8dc:	7812      	ldrb	r2, [r2, #0]
    f8de:	b2d2      	uxtb	r2, r2
    f8e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    f8e4:	b2d2      	uxtb	r2, r2
    f8e6:	701a      	strb	r2, [r3, #0]
  /* enable transmitter */
  cbi(MODEM_TX_PORT, MODEM_TX_EN);
    f8e8:	f242 0312 	movw	r3, #8210	; 0x2012
    f8ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8f0:	f242 0212 	movw	r2, #8210	; 0x2012
    f8f4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f8f8:	7812      	ldrb	r2, [r2, #0]
    f8fa:	b2d2      	uxtb	r2, r2
    f8fc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    f900:	b2d2      	uxtb	r2, r2
    f902:	701a      	strb	r2, [r3, #0]
  /* set interrupt on failing edge of clock */
  MODEM_CLK_INT_REG |=  MODEM_CLK_INT_CFG;
    f904:	f242 033a 	movw	r3, #8250	; 0x203a
    f908:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f90c:	f242 023a 	movw	r2, #8250	; 0x203a
    f910:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f914:	7812      	ldrb	r2, [r2, #0]
    f916:	b2d2      	uxtb	r2, r2
    f918:	f042 0202 	orr.w	r2, r2, #2
    f91c:	b2d2      	uxtb	r2, r2
    f91e:	701a      	strb	r2, [r3, #0]
}
    f920:	46bd      	mov	sp, r7
    f922:	f85d 7b04 	ldr.w	r7, [sp], #4
    f926:	4770      	bx	lr

0000f928 <__vector_5>:

SIGNAL( MODEM_CLK_INT_SIG ) {
    f928:	b480      	push	{r7}
    f92a:	af00      	add	r7, sp, #0
  /*  start bit         */
  if (tx_byte_idx == 0)
    f92c:	f24a 53bc 	movw	r3, #42428	; 0xa5bc
    f930:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f934:	781b      	ldrb	r3, [r3, #0]
    f936:	2b00      	cmp	r3, #0
    f938:	d10e      	bne.n	f958 <__vector_5+0x30>
    cbi(MODEM_TX_PORT, MODEM_TX_DATA);
    f93a:	f242 0312 	movw	r3, #8210	; 0x2012
    f93e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f942:	f242 0212 	movw	r2, #8210	; 0x2012
    f946:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f94a:	7812      	ldrb	r2, [r2, #0]
    f94c:	b2d2      	uxtb	r2, r2
    f94e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    f952:	b2d2      	uxtb	r2, r2
    f954:	701a      	strb	r2, [r3, #0]
    f956:	e047      	b.n	f9e8 <__vector_5+0xc0>
  /* 8 data bits        */ 
  else if (tx_byte_idx < 9) {
    f958:	f24a 53bc 	movw	r3, #42428	; 0xa5bc
    f95c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f960:	781b      	ldrb	r3, [r3, #0]
    f962:	2b08      	cmp	r3, #8
    f964:	d832      	bhi.n	f9cc <__vector_5+0xa4>
    if (tx_byte & 0x01)
    f966:	f24a 53bb 	movw	r3, #42427	; 0xa5bb
    f96a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f96e:	781b      	ldrb	r3, [r3, #0]
    f970:	f003 0301 	and.w	r3, r3, #1
    f974:	2b00      	cmp	r3, #0
    f976:	d00e      	beq.n	f996 <__vector_5+0x6e>
      sbi(MODEM_TX_PORT, MODEM_TX_DATA);
    f978:	f242 0312 	movw	r3, #8210	; 0x2012
    f97c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f980:	f242 0212 	movw	r2, #8210	; 0x2012
    f984:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f988:	7812      	ldrb	r2, [r2, #0]
    f98a:	b2d2      	uxtb	r2, r2
    f98c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    f990:	b2d2      	uxtb	r2, r2
    f992:	701a      	strb	r2, [r3, #0]
    f994:	e00d      	b.n	f9b2 <__vector_5+0x8a>
    else
      cbi(MODEM_TX_PORT, MODEM_TX_DATA);
    f996:	f242 0312 	movw	r3, #8210	; 0x2012
    f99a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f99e:	f242 0212 	movw	r2, #8210	; 0x2012
    f9a2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f9a6:	7812      	ldrb	r2, [r2, #0]
    f9a8:	b2d2      	uxtb	r2, r2
    f9aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    f9ae:	b2d2      	uxtb	r2, r2
    f9b0:	701a      	strb	r2, [r3, #0]
    tx_byte >>= 1;
    f9b2:	f24a 53bb 	movw	r3, #42427	; 0xa5bb
    f9b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9ba:	781b      	ldrb	r3, [r3, #0]
    f9bc:	085b      	lsrs	r3, r3, #1
    f9be:	b2da      	uxtb	r2, r3
    f9c0:	f24a 53bb 	movw	r3, #42427	; 0xa5bb
    f9c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9c8:	701a      	strb	r2, [r3, #0]
    f9ca:	e00d      	b.n	f9e8 <__vector_5+0xc0>
  }
  /* stop_bit           */
  else {
    sbi(MODEM_TX_PORT, MODEM_TX_DATA); 
    f9cc:	f242 0312 	movw	r3, #8210	; 0x2012
    f9d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9d4:	f242 0212 	movw	r2, #8210	; 0x2012
    f9d8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f9dc:	7812      	ldrb	r2, [r2, #0]
    f9de:	b2d2      	uxtb	r2, r2
    f9e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    f9e4:	b2d2      	uxtb	r2, r2
    f9e6:	701a      	strb	r2, [r3, #0]
  }
  tx_byte_idx++;
    f9e8:	f24a 53bc 	movw	r3, #42428	; 0xa5bc
    f9ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9f0:	781b      	ldrb	r3, [r3, #0]
    f9f2:	3301      	adds	r3, #1
    f9f4:	b2da      	uxtb	r2, r3
    f9f6:	f24a 53bc 	movw	r3, #42428	; 0xa5bc
    f9fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9fe:	701a      	strb	r2, [r3, #0]
  /* next byte          */
  if (tx_byte_idx >= 10) {
    fa00:	f24a 53bc 	movw	r3, #42428	; 0xa5bc
    fa04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa08:	781b      	ldrb	r3, [r3, #0]
    fa0a:	2b09      	cmp	r3, #9
    fa0c:	d94d      	bls.n	faaa <__vector_5+0x182>
    /*  if we have nothing left to transmit */
    if( tx_head == tx_tail ) {
    fa0e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    fa12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa16:	781a      	ldrb	r2, [r3, #0]
    fa18:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    fa1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa20:	781b      	ldrb	r3, [r3, #0]
    fa22:	b2db      	uxtb	r3, r3
    fa24:	429a      	cmp	r2, r3
    fa26:	d10e      	bne.n	fa46 <__vector_5+0x11e>
      /* disable clock interrupt            */
      cbi( EIMSK, MODEM_CLK_INT );
    fa28:	f242 0339 	movw	r3, #8249	; 0x2039
    fa2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa30:	f242 0239 	movw	r2, #8249	; 0x2039
    fa34:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fa38:	7812      	ldrb	r2, [r2, #0]
    fa3a:	b2d2      	uxtb	r2, r2
    fa3c:	f022 0210 	bic.w	r2, r2, #16
    fa40:	b2d2      	uxtb	r2, r2
    fa42:	701a      	strb	r2, [r3, #0]
    fa44:	e031      	b.n	faaa <__vector_5+0x182>
    } else {
      /* else load next byte                  */
      MODEM_LOAD_NEXT_BYTE();  
    fa46:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    fa4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa4e:	781b      	ldrb	r3, [r3, #0]
    fa50:	b2db      	uxtb	r3, r3
    fa52:	461a      	mov	r2, r3
    fa54:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    fa58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa5c:	5c9a      	ldrb	r2, [r3, r2]
    fa5e:	f24a 53bb 	movw	r3, #42427	; 0xa5bb
    fa62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa66:	701a      	strb	r2, [r3, #0]
    fa68:	f24a 53bc 	movw	r3, #42428	; 0xa5bc
    fa6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa70:	2200      	movs	r2, #0
    fa72:	701a      	strb	r2, [r3, #0]
    fa74:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    fa78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa7c:	781b      	ldrb	r3, [r3, #0]
    fa7e:	b2db      	uxtb	r3, r3
    fa80:	3301      	adds	r3, #1
    fa82:	b2da      	uxtb	r2, r3
    fa84:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    fa88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa8c:	701a      	strb	r2, [r3, #0]
    fa8e:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    fa92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa96:	781b      	ldrb	r3, [r3, #0]
    fa98:	b2db      	uxtb	r3, r3
    fa9a:	2bff      	cmp	r3, #255	; 0xff
    fa9c:	d105      	bne.n	faaa <__vector_5+0x182>
    fa9e:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    faa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    faa6:	2200      	movs	r2, #0
    faa8:	701a      	strb	r2, [r3, #0]
    }
  }
}
    faaa:	46bd      	mov	sp, r7
    faac:	f85d 7b04 	ldr.w	r7, [sp], #4
    fab0:	4770      	bx	lr
    fab2:	bf00      	nop

0000fab4 <link_fbw_init>:
uint8_t link_fbw_fbw_nb_err;

static uint8_t idx_buf;
static uint8_t xor_in, xor_out;

void link_fbw_init(void) {
    fab4:	b480      	push	{r7}
    fab6:	af00      	add	r7, sp, #0
  link_fbw_nb_err;
    fab8:	f24a 53ef 	movw	r3, #42479	; 0xa5ef
    fabc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fac0:	781b      	ldrb	r3, [r3, #0]
  link_fbw_receive_complete = FALSE;  
    fac2:	f240 1306 	movw	r3, #262	; 0x106
    fac6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    faca:	2200      	movs	r2, #0
    facc:	701a      	strb	r2, [r3, #0]
}
    face:	46bd      	mov	sp, r7
    fad0:	f85d 7b04 	ldr.w	r7, [sp], #4
    fad4:	4770      	bx	lr
    fad6:	bf00      	nop

0000fad8 <link_fbw_send>:

void link_fbw_send(void) {
    fad8:	b480      	push	{r7}
    fada:	b083      	sub	sp, #12
    fadc:	af00      	add	r7, sp, #0
    //vPrintString("S_7 link_fbw_send start! \n\r"); //SunnyBeike

    if (spi_cur_slave != SPI_NONE) 
    fade:	f24a 53f4 	movw	r3, #42484	; 0xa5f4
    fae2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fae6:	781b      	ldrb	r3, [r3, #0]
    fae8:	b2db      	uxtb	r3, r3
    faea:	2b00      	cmp	r3, #0
    faec:	d00c      	beq.n	fb08 <link_fbw_send+0x30>
    {
        spi_nb_ovrn++;
    faee:	f24a 53f5 	movw	r3, #42485	; 0xa5f5
    faf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    faf6:	781b      	ldrb	r3, [r3, #0]
    faf8:	3301      	adds	r3, #1
    fafa:	b2da      	uxtb	r2, r3
    fafc:	f24a 53f5 	movw	r3, #42485	; 0xa5f5
    fb00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb04:	701a      	strb	r2, [r3, #0]
        //vPrintString("S_7 link_fbw_send end! \n\r"); //SunnyBeike
        return;
    fb06:	e064      	b.n	fbd2 <link_fbw_send+0xfa>
    }

    /* Enable SPI, Master, set clock rate fck/16 */ 
    SPI_START(_BV(SPE) | _BV(MSTR) | _BV(SPR0)); // | _BV(SPR1);
    fb08:	f242 030d 	movw	r3, #8205	; 0x200d
    fb0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb10:	2251      	movs	r2, #81	; 0x51
    fb12:	701a      	strb	r2, [r3, #0]
    fb14:	f242 030e 	movw	r3, #8206	; 0x200e
    fb18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb1c:	781b      	ldrb	r3, [r3, #0]
    fb1e:	b2db      	uxtb	r3, r3
    fb20:	b2db      	uxtb	r3, r3
    fb22:	b25b      	sxtb	r3, r3
    fb24:	2b00      	cmp	r3, #0
    fb26:	da05      	bge.n	fb34 <link_fbw_send+0x5c>
    fb28:	f242 030f 	movw	r3, #8207	; 0x200f
    fb2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb30:	781b      	ldrb	r3, [r3, #0]
    fb32:	71fb      	strb	r3, [r7, #7]
    fb34:	f242 030d 	movw	r3, #8205	; 0x200d
    fb38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb3c:	f242 020d 	movw	r2, #8205	; 0x200d
    fb40:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fb44:	7812      	ldrb	r2, [r2, #0]
    fb46:	b2d2      	uxtb	r2, r2
    fb48:	f062 027f 	orn	r2, r2, #127	; 0x7f
    fb4c:	b2d2      	uxtb	r2, r2
    fb4e:	701a      	strb	r2, [r3, #0]
    SPI_SELECT_SLAVE0();
    fb50:	f24a 53f4 	movw	r3, #42484	; 0xa5f4
    fb54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb58:	2201      	movs	r2, #1
    fb5a:	701a      	strb	r2, [r3, #0]
    fb5c:	f242 0318 	movw	r3, #8216	; 0x2018
    fb60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb64:	f242 0218 	movw	r2, #8216	; 0x2018
    fb68:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fb6c:	7812      	ldrb	r2, [r2, #0]
    fb6e:	b2d2      	uxtb	r2, r2
    fb70:	f022 0201 	bic.w	r2, r2, #1
    fb74:	b2d2      	uxtb	r2, r2
    fb76:	701a      	strb	r2, [r3, #0]

    idx_buf = 0;
    fb78:	f24a 53f1 	movw	r3, #42481	; 0xa5f1
    fb7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb80:	2200      	movs	r2, #0
    fb82:	701a      	strb	r2, [r3, #0]
    xor_in = 0;
    fb84:	f24a 53f2 	movw	r3, #42482	; 0xa5f2
    fb88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb8c:	2200      	movs	r2, #0
    fb8e:	701a      	strb	r2, [r3, #0]
    xor_out = ((uint8_t*)&to_fbw)[idx_buf];
    fb90:	f24a 53f1 	movw	r3, #42481	; 0xa5f1
    fb94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb98:	781b      	ldrb	r3, [r3, #0]
    fb9a:	461a      	mov	r2, r3
    fb9c:	f24a 53d8 	movw	r3, #42456	; 0xa5d8
    fba0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fba4:	4413      	add	r3, r2
    fba6:	781a      	ldrb	r2, [r3, #0]
    fba8:	f24a 53f3 	movw	r3, #42483	; 0xa5f3
    fbac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbb0:	701a      	strb	r2, [r3, #0]
    SPDR = xor_out;
    fbb2:	f242 030f 	movw	r3, #8207	; 0x200f
    fbb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbba:	f24a 52f3 	movw	r2, #42483	; 0xa5f3
    fbbe:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fbc2:	7812      	ldrb	r2, [r2, #0]
    fbc4:	701a      	strb	r2, [r3, #0]
    link_fbw_receive_valid = FALSE;
    fbc6:	f24a 53ee 	movw	r3, #42478	; 0xa5ee
    fbca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbce:	2200      	movs	r2, #0
    fbd0:	701a      	strb	r2, [r3, #0]
    // Other bytes will follow SIG_SPI interrupts
    //vPrintString("S_7 link_fbw_send end! \n\r"); //SunnyBeike
}
    fbd2:	370c      	adds	r7, #12
    fbd4:	46bd      	mov	sp, r7
    fbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
    fbda:	4770      	bx	lr

0000fbdc <link_fbw_on_spi_it>:

void link_fbw_on_spi_it( void ) {
    fbdc:	b480      	push	{r7}
    fbde:	af00      	add	r7, sp, #0
  /* setup OCR1A to pop in 200 clock cycles */
  /* this leaves time for the slave (fbw)   */
  /* to process the byte we've sent and to  */
  /* prepare a new one to be sent           */
  OCR1A = TCNT1 + 200;
    fbe0:	f242 032a 	movw	r3, #8234	; 0x202a
    fbe4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbe8:	f242 022c 	movw	r2, #8236	; 0x202c
    fbec:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fbf0:	8812      	ldrh	r2, [r2, #0]
    fbf2:	b292      	uxth	r2, r2
    fbf4:	32c8      	adds	r2, #200	; 0xc8
    fbf6:	b292      	uxth	r2, r2
    fbf8:	801a      	strh	r2, [r3, #0]
  /* clear interrupt flag  */
  sbi(TIFR, OCF1A);
    fbfa:	f242 0336 	movw	r3, #8246	; 0x2036
    fbfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc02:	f242 0236 	movw	r2, #8246	; 0x2036
    fc06:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fc0a:	7812      	ldrb	r2, [r2, #0]
    fc0c:	b2d2      	uxtb	r2, r2
    fc0e:	f042 0210 	orr.w	r2, r2, #16
    fc12:	b2d2      	uxtb	r2, r2
    fc14:	701a      	strb	r2, [r3, #0]
  /* enable OC1A interrupt */
  sbi(TIMSK, OCIE1A);
    fc16:	f242 0337 	movw	r3, #8247	; 0x2037
    fc1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc1e:	f242 0237 	movw	r2, #8247	; 0x2037
    fc22:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fc26:	7812      	ldrb	r2, [r2, #0]
    fc28:	b2d2      	uxtb	r2, r2
    fc2a:	f042 0210 	orr.w	r2, r2, #16
    fc2e:	b2d2      	uxtb	r2, r2
    fc30:	701a      	strb	r2, [r3, #0]
}
    fc32:	46bd      	mov	sp, r7
    fc34:	f85d 7b04 	ldr.w	r7, [sp], #4
    fc38:	4770      	bx	lr
    fc3a:	bf00      	nop

0000fc3c <__vector_12>:


/* send the next byte */
SIGNAL(SIG_OUTPUT_COMPARE1A) {
    fc3c:	b480      	push	{r7}
    fc3e:	b083      	sub	sp, #12
    fc40:	af00      	add	r7, sp, #0
  uint8_t tmp;

  /* disable OC1A interrupt */
  cbi(TIMSK, OCIE1A); 
    fc42:	f242 0337 	movw	r3, #8247	; 0x2037
    fc46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc4a:	f242 0237 	movw	r2, #8247	; 0x2037
    fc4e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fc52:	7812      	ldrb	r2, [r2, #0]
    fc54:	b2d2      	uxtb	r2, r2
    fc56:	f022 0210 	bic.w	r2, r2, #16
    fc5a:	b2d2      	uxtb	r2, r2
    fc5c:	701a      	strb	r2, [r3, #0]

  idx_buf++;
    fc5e:	f24a 53f1 	movw	r3, #42481	; 0xa5f1
    fc62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc66:	781b      	ldrb	r3, [r3, #0]
    fc68:	3301      	adds	r3, #1
    fc6a:	b2da      	uxtb	r2, r3
    fc6c:	f24a 53f1 	movw	r3, #42481	; 0xa5f1
    fc70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc74:	701a      	strb	r2, [r3, #0]

  /* we have sent/received a complete frame */
  if (idx_buf == FRAME_LENGTH) {
    fc76:	f24a 53f1 	movw	r3, #42481	; 0xa5f1
    fc7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc7e:	781b      	ldrb	r3, [r3, #0]
    fc80:	2b17      	cmp	r3, #23
    fc82:	d162      	bne.n	fd4a <__vector_12+0x10e>
    /* read checksum from receive register  */
    tmp = SPDR;
    fc84:	f242 030f 	movw	r3, #8207	; 0x200f
    fc88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc8c:	781b      	ldrb	r3, [r3, #0]
    fc8e:	71fb      	strb	r3, [r7, #7]
    /* notify valid frame                   */
    if (tmp == xor_in) {
    fc90:	f24a 53f2 	movw	r3, #42482	; 0xa5f2
    fc94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc98:	781b      	ldrb	r3, [r3, #0]
    fc9a:	79fa      	ldrb	r2, [r7, #7]
    fc9c:	429a      	cmp	r2, r3
    fc9e:	d110      	bne.n	fcc2 <__vector_12+0x86>
      link_fbw_receive_valid = TRUE;
    fca0:	f24a 53ee 	movw	r3, #42478	; 0xa5ee
    fca4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fca8:	2201      	movs	r2, #1
    fcaa:	701a      	strb	r2, [r3, #0]
      link_fbw_fbw_nb_err = from_fbw.nb_err;
    fcac:	f24a 53c0 	movw	r3, #42432	; 0xa5c0
    fcb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fcb4:	7d1a      	ldrb	r2, [r3, #20]
    fcb6:	f24a 53f0 	movw	r3, #42480	; 0xa5f0
    fcba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fcbe:	701a      	strb	r2, [r3, #0]
    fcc0:	e00c      	b.n	fcdc <__vector_12+0xa0>
    }
    else
      link_fbw_nb_err++;
    fcc2:	f24a 53ef 	movw	r3, #42479	; 0xa5ef
    fcc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fcca:	781b      	ldrb	r3, [r3, #0]
    fccc:	b2db      	uxtb	r3, r3
    fcce:	3301      	adds	r3, #1
    fcd0:	b2da      	uxtb	r2, r3
    fcd2:	f24a 53ef 	movw	r3, #42479	; 0xa5ef
    fcd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fcda:	701a      	strb	r2, [r3, #0]
    link_fbw_receive_complete = TRUE;
    fcdc:	f240 1306 	movw	r3, #262	; 0x106
    fce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fce4:	2201      	movs	r2, #1
    fce6:	701a      	strb	r2, [r3, #0]
    /* unselect slave0                      */
    SPI_UNSELECT_SLAVE0();
    fce8:	f24a 53f4 	movw	r3, #42484	; 0xa5f4
    fcec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fcf0:	2200      	movs	r2, #0
    fcf2:	701a      	strb	r2, [r3, #0]
    fcf4:	f242 0318 	movw	r3, #8216	; 0x2018
    fcf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fcfc:	f242 0218 	movw	r2, #8216	; 0x2018
    fd00:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fd04:	7812      	ldrb	r2, [r2, #0]
    fd06:	b2d2      	uxtb	r2, r2
    fd08:	f042 0201 	orr.w	r2, r2, #1
    fd0c:	b2d2      	uxtb	r2, r2
    fd0e:	701a      	strb	r2, [r3, #0]
    SPI_STOP();
    fd10:	f242 030d 	movw	r3, #8205	; 0x200d
    fd14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd18:	f242 020d 	movw	r2, #8205	; 0x200d
    fd1c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fd20:	7812      	ldrb	r2, [r2, #0]
    fd22:	b2d2      	uxtb	r2, r2
    fd24:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    fd28:	b2d2      	uxtb	r2, r2
    fd2a:	701a      	strb	r2, [r3, #0]
    fd2c:	f242 030d 	movw	r3, #8205	; 0x200d
    fd30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd34:	f242 020d 	movw	r2, #8205	; 0x200d
    fd38:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fd3c:	7812      	ldrb	r2, [r2, #0]
    fd3e:	b2d2      	uxtb	r2, r2
    fd40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    fd44:	b2d2      	uxtb	r2, r2
    fd46:	701a      	strb	r2, [r3, #0]
    return;
    fd48:	e051      	b.n	fdee <__vector_12+0x1b2>
  }

  /* we are sending/receiving payload       */
  if (idx_buf < FRAME_LENGTH - 1) {
    fd4a:	f24a 53f1 	movw	r3, #42481	; 0xa5f1
    fd4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd52:	781b      	ldrb	r3, [r3, #0]
    fd54:	2b15      	cmp	r3, #21
    fd56:	d820      	bhi.n	fd9a <__vector_12+0x15e>
    /* place new payload byte in send register */
    tmp = ((uint8_t*)&to_fbw)[idx_buf];
    fd58:	f24a 53f1 	movw	r3, #42481	; 0xa5f1
    fd5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd60:	781b      	ldrb	r3, [r3, #0]
    fd62:	461a      	mov	r2, r3
    fd64:	f24a 53d8 	movw	r3, #42456	; 0xa5d8
    fd68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd6c:	4413      	add	r3, r2
    fd6e:	781b      	ldrb	r3, [r3, #0]
    fd70:	71fb      	strb	r3, [r7, #7]
    SPI_SEND(tmp);
    fd72:	f242 030f 	movw	r3, #8207	; 0x200f
    fd76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd7a:	79fa      	ldrb	r2, [r7, #7]
    fd7c:	701a      	strb	r2, [r3, #0]
    xor_out ^= tmp;
    fd7e:	f24a 53f3 	movw	r3, #42483	; 0xa5f3
    fd82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd86:	781a      	ldrb	r2, [r3, #0]
    fd88:	79fb      	ldrb	r3, [r7, #7]
    fd8a:	4053      	eors	r3, r2
    fd8c:	b2da      	uxtb	r2, r3
    fd8e:	f24a 53f3 	movw	r3, #42483	; 0xa5f3
    fd92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd96:	701a      	strb	r2, [r3, #0]
    fd98:	e009      	b.n	fdae <__vector_12+0x172>
  } 
  /* we are done sending the payload */
  else { // idx_buf == FRAME_LENGTH - 1
    /* place checksum in send register */
    SPI_SEND(xor_out);
    fd9a:	f242 030f 	movw	r3, #8207	; 0x200f
    fd9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fda2:	f24a 52f3 	movw	r2, #42483	; 0xa5f3
    fda6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fdaa:	7812      	ldrb	r2, [r2, #0]
    fdac:	701a      	strb	r2, [r3, #0]
  }
  
  /* read the byte from receive register */
  tmp = SPDR;
    fdae:	f242 030f 	movw	r3, #8207	; 0x200f
    fdb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fdb6:	781b      	ldrb	r3, [r3, #0]
    fdb8:	71fb      	strb	r3, [r7, #7]
  ((uint8_t*)&from_fbw)[idx_buf-1] = tmp;
    fdba:	f24a 53f1 	movw	r3, #42481	; 0xa5f1
    fdbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fdc2:	781b      	ldrb	r3, [r3, #0]
    fdc4:	1e5a      	subs	r2, r3, #1
    fdc6:	f24a 53c0 	movw	r3, #42432	; 0xa5c0
    fdca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fdce:	4413      	add	r3, r2
    fdd0:	79fa      	ldrb	r2, [r7, #7]
    fdd2:	701a      	strb	r2, [r3, #0]
  xor_in ^= tmp;
    fdd4:	f24a 53f2 	movw	r3, #42482	; 0xa5f2
    fdd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fddc:	781a      	ldrb	r2, [r3, #0]
    fdde:	79fb      	ldrb	r3, [r7, #7]
    fde0:	4053      	eors	r3, r2
    fde2:	b2da      	uxtb	r2, r3
    fde4:	f24a 53f2 	movw	r3, #42482	; 0xa5f2
    fde8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fdec:	701a      	strb	r2, [r3, #0]
}
    fdee:	370c      	adds	r7, #12
    fdf0:	46bd      	mov	sp, r7
    fdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
    fdf6:	4770      	bx	lr

0000fdf8 <spi_init>:
#include "ad7714.h"

volatile uint8_t spi_cur_slave;
uint8_t spi_nb_ovrn;

void spi_init( void) {
    fdf8:	b480      	push	{r7}
    fdfa:	af00      	add	r7, sp, #0
  /* Set MOSI and SCK output, all others input */ 
  SPI_DDR |= _BV(SPI_MOSI_PIN)| _BV(SPI_SCK_PIN); 
    fdfc:	f242 0317 	movw	r3, #8215	; 0x2017
    fe00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe04:	f242 0217 	movw	r2, #8215	; 0x2017
    fe08:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fe0c:	7812      	ldrb	r2, [r2, #0]
    fe0e:	b2d2      	uxtb	r2, r2
    fe10:	f042 0206 	orr.w	r2, r2, #6
    fe14:	b2d2      	uxtb	r2, r2
    fe16:	701a      	strb	r2, [r3, #0]

  /* enable pull up for miso */
  //  SPI_PORT |= _BV(SPI_MISO_PIN);

  /* Set SS0 output */
  sbi( SPI_SS0_DDR, SPI_SS0_PIN);
    fe18:	f242 0317 	movw	r3, #8215	; 0x2017
    fe1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe20:	f242 0217 	movw	r2, #8215	; 0x2017
    fe24:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fe28:	7812      	ldrb	r2, [r2, #0]
    fe2a:	b2d2      	uxtb	r2, r2
    fe2c:	f042 0201 	orr.w	r2, r2, #1
    fe30:	b2d2      	uxtb	r2, r2
    fe32:	701a      	strb	r2, [r3, #0]
  /* SS0 idles high (don't select slave yet)*/
  SPI_UNSELECT_SLAVE0();
    fe34:	f24a 53f4 	movw	r3, #42484	; 0xa5f4
    fe38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe3c:	2200      	movs	r2, #0
    fe3e:	701a      	strb	r2, [r3, #0]
    fe40:	f242 0318 	movw	r3, #8216	; 0x2018
    fe44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe48:	f242 0218 	movw	r2, #8216	; 0x2018
    fe4c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fe50:	7812      	ldrb	r2, [r2, #0]
    fe52:	b2d2      	uxtb	r2, r2
    fe54:	f042 0201 	orr.w	r2, r2, #1
    fe58:	b2d2      	uxtb	r2, r2
    fe5a:	701a      	strb	r2, [r3, #0]

  /* Set SS1 output */
  sbi( SPI_SS1_DDR, SPI_SS1_PIN);
    fe5c:	f242 0302 	movw	r3, #8194	; 0x2002
    fe60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe64:	f242 0202 	movw	r2, #8194	; 0x2002
    fe68:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fe6c:	7812      	ldrb	r2, [r2, #0]
    fe6e:	b2d2      	uxtb	r2, r2
    fe70:	f062 027f 	orn	r2, r2, #127	; 0x7f
    fe74:	b2d2      	uxtb	r2, r2
    fe76:	701a      	strb	r2, [r3, #0]
  /* SS1 idles high (don't select slave yet)*/
  SPI_UNSELECT_SLAVE1();
    fe78:	f24a 53f4 	movw	r3, #42484	; 0xa5f4
    fe7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe80:	2200      	movs	r2, #0
    fe82:	701a      	strb	r2, [r3, #0]
    fe84:	f242 0303 	movw	r3, #8195	; 0x2003
    fe88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe8c:	f242 0203 	movw	r2, #8195	; 0x2003
    fe90:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fe94:	7812      	ldrb	r2, [r2, #0]
    fe96:	b2d2      	uxtb	r2, r2
    fe98:	f062 027f 	orn	r2, r2, #127	; 0x7f
    fe9c:	b2d2      	uxtb	r2, r2
    fe9e:	701a      	strb	r2, [r3, #0]
  
  spi_cur_slave = SPI_NONE;
    fea0:	f24a 53f4 	movw	r3, #42484	; 0xa5f4
    fea4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fea8:	2200      	movs	r2, #0
    feaa:	701a      	strb	r2, [r3, #0]
}
    feac:	46bd      	mov	sp, r7
    feae:	f85d 7b04 	ldr.w	r7, [sp], #4
    feb2:	4770      	bx	lr

0000feb4 <__vector_17>:


SIGNAL(SIG_SPI) {
    feb4:	b580      	push	{r7, lr}
    feb6:	af00      	add	r7, sp, #0
  if (spi_cur_slave == SPI_SLAVE0)
    feb8:	f24a 53f4 	movw	r3, #42484	; 0xa5f4
    febc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fec0:	781b      	ldrb	r3, [r3, #0]
    fec2:	b2db      	uxtb	r3, r3
    fec4:	2b01      	cmp	r3, #1
    fec6:	d102      	bne.n	fece <__vector_17+0x1a>
    link_fbw_on_spi_it();
    fec8:	f7ff fe88 	bl	fbdc <link_fbw_on_spi_it>
    fecc:	e00b      	b.n	fee6 <__vector_17+0x32>
  else
    fatal_error_nb++;
    fece:	f24a 4398 	movw	r3, #42136	; 0xa498
    fed2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fed6:	781b      	ldrb	r3, [r3, #0]
    fed8:	3301      	adds	r3, #1
    feda:	b2da      	uxtb	r2, r3
    fedc:	f24a 4398 	movw	r3, #42136	; 0xa498
    fee0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fee4:	701a      	strb	r2, [r3, #0]
}
    fee6:	bd80      	pop	{r7, pc}

0000fee8 <adc_buf_channel>:

uint16_t		adc_samples[ NB_ADC ];

static struct adc_buf* buffers[NB_ADC];

void adc_buf_channel(uint8_t adc_channel, struct adc_buf* s) {
    fee8:	b480      	push	{r7}
    feea:	b083      	sub	sp, #12
    feec:	af00      	add	r7, sp, #0
    feee:	4603      	mov	r3, r0
    fef0:	6039      	str	r1, [r7, #0]
    fef2:	71fb      	strb	r3, [r7, #7]
  buffers[adc_channel] = s;
    fef4:	79fa      	ldrb	r2, [r7, #7]
    fef6:	f24a 6308 	movw	r3, #42504	; 0xa608
    fefa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fefe:	6839      	ldr	r1, [r7, #0]
    ff00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    ff04:	370c      	adds	r7, #12
    ff06:	46bd      	mov	sp, r7
    ff08:	f85d 7b04 	ldr.w	r7, [sp], #4
    ff0c:	4770      	bx	lr
    ff0e:	bf00      	nop

0000ff10 <adc_init>:

void 
adc_init( void )
{
    ff10:	b480      	push	{r7}
    ff12:	b083      	sub	sp, #12
    ff14:	af00      	add	r7, sp, #0
  uint8_t i;
  /* Ensure that our port is for input with no pull-ups */
  ANALOG_PORT 	= 0x00;
    ff16:	f242 0362 	movw	r3, #8290	; 0x2062
    ff1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff1e:	2200      	movs	r2, #0
    ff20:	701a      	strb	r2, [r3, #0]
  ANALOG_PORT_DIR	= 0x00;
    ff22:	f242 0361 	movw	r3, #8289	; 0x2061
    ff26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff2a:	2200      	movs	r2, #0
    ff2c:	701a      	strb	r2, [r3, #0]

  /* Select our external voltage ref, which is tied to Vcc */
  ADMUX		= ANALOG_VREF;
    ff2e:	f242 0307 	movw	r3, #8199	; 0x2007
    ff32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff36:	2240      	movs	r2, #64	; 0x40
    ff38:	701a      	strb	r2, [r3, #0]

  /* Turn off the analog comparator */
  sbi( ACSR, ACD );
    ff3a:	f242 0308 	movw	r3, #8200	; 0x2008
    ff3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff42:	f242 0208 	movw	r2, #8200	; 0x2008
    ff46:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ff4a:	7812      	ldrb	r2, [r2, #0]
    ff4c:	b2d2      	uxtb	r2, r2
    ff4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
    ff52:	b2d2      	uxtb	r2, r2
    ff54:	701a      	strb	r2, [r3, #0]

  /* Select out clock, turn on the ADC interrupt and start conversion */
  ADCSR		= 0
    ff56:	f242 0306 	movw	r3, #8198	; 0x2006
    ff5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff5e:	22cf      	movs	r2, #207	; 0xcf
    ff60:	701a      	strb	r2, [r3, #0]
    | ( 1 << ADEN )
    | ( 1 << ADIE )
    | ( 1 << ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < NB_ADC; i++)
    ff62:	2300      	movs	r3, #0
    ff64:	71fb      	strb	r3, [r7, #7]
    ff66:	e00a      	b.n	ff7e <adc_init+0x6e>
    buffers[i] = (struct adc_buf*)0;
    ff68:	79fa      	ldrb	r2, [r7, #7]
    ff6a:	f24a 6308 	movw	r3, #42504	; 0xa608
    ff6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff72:	2100      	movs	r1, #0
    ff74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    | ( 1 << ADEN )
    | ( 1 << ADIE )
    | ( 1 << ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < NB_ADC; i++)
    ff78:	79fb      	ldrb	r3, [r7, #7]
    ff7a:	3301      	adds	r3, #1
    ff7c:	71fb      	strb	r3, [r7, #7]
    ff7e:	79fb      	ldrb	r3, [r7, #7]
    ff80:	2b07      	cmp	r3, #7
    ff82:	d9f1      	bls.n	ff68 <adc_init+0x58>
    buffers[i] = (struct adc_buf*)0;
}
    ff84:	370c      	adds	r7, #12
    ff86:	46bd      	mov	sp, r7
    ff88:	f85d 7b04 	ldr.w	r7, [sp], #4
    ff8c:	4770      	bx	lr
    ff8e:	bf00      	nop

0000ff90 <__vector_21>:
 *  8.913kHz on mega128@16MHz 1kHz/channel ??
*/


SIGNAL( SIG_ADC )
{
    ff90:	b480      	push	{r7}
    ff92:	b085      	sub	sp, #20
    ff94:	af00      	add	r7, sp, #0
  uint8_t adc_input	= ADMUX & 0x7;
    ff96:	f242 0307 	movw	r3, #8199	; 0x2007
    ff9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff9e:	781b      	ldrb	r3, [r3, #0]
    ffa0:	b2db      	uxtb	r3, r3
    ffa2:	f003 0307 	and.w	r3, r3, #7
    ffa6:	73fb      	strb	r3, [r7, #15]
  struct adc_buf* buf = buffers[adc_input];
    ffa8:	7bfa      	ldrb	r2, [r7, #15]
    ffaa:	f24a 6308 	movw	r3, #42504	; 0xa608
    ffae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    ffb6:	60bb      	str	r3, [r7, #8]
  uint16_t adc_value = ADCW;
    ffb8:	f242 0304 	movw	r3, #8196	; 0x2004
    ffbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffc0:	881b      	ldrh	r3, [r3, #0]
    ffc2:	80fb      	strh	r3, [r7, #6]
  /* Store result */
  adc_samples[ adc_input ] = adc_value;
    ffc4:	7bfa      	ldrb	r2, [r7, #15]
    ffc6:	f24a 53f8 	movw	r3, #42488	; 0xa5f8
    ffca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffce:	88f9      	ldrh	r1, [r7, #6]
    ffd0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

  if (buf) {
    ffd4:	68bb      	ldr	r3, [r7, #8]
    ffd6:	2b00      	cmp	r3, #0
    ffd8:	d025      	beq.n	10026 <__vector_21+0x96>
    uint8_t new_head = buf->head + 1;
    ffda:	68bb      	ldr	r3, [r7, #8]
    ffdc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
    ffe0:	3301      	adds	r3, #1
    ffe2:	73bb      	strb	r3, [r7, #14]
    if (new_head >= AV_NB_SAMPLE) new_head = 0;
    ffe4:	7bbb      	ldrb	r3, [r7, #14]
    ffe6:	2b1f      	cmp	r3, #31
    ffe8:	d901      	bls.n	ffee <__vector_21+0x5e>
    ffea:	2300      	movs	r3, #0
    ffec:	73bb      	strb	r3, [r7, #14]
    buf->sum -= buf->values[new_head];
    ffee:	68bb      	ldr	r3, [r7, #8]
    fff0:	881a      	ldrh	r2, [r3, #0]
    fff2:	7bbb      	ldrb	r3, [r7, #14]
    fff4:	68b9      	ldr	r1, [r7, #8]
    fff6:	005b      	lsls	r3, r3, #1
    fff8:	440b      	add	r3, r1
    fffa:	885b      	ldrh	r3, [r3, #2]
    fffc:	1ad3      	subs	r3, r2, r3
    fffe:	b29a      	uxth	r2, r3
   10000:	68bb      	ldr	r3, [r7, #8]
   10002:	801a      	strh	r2, [r3, #0]
    buf->values[new_head] = adc_value;
   10004:	7bbb      	ldrb	r3, [r7, #14]
   10006:	68ba      	ldr	r2, [r7, #8]
   10008:	005b      	lsls	r3, r3, #1
   1000a:	4413      	add	r3, r2
   1000c:	88fa      	ldrh	r2, [r7, #6]
   1000e:	805a      	strh	r2, [r3, #2]
    buf->sum += adc_value;
   10010:	68bb      	ldr	r3, [r7, #8]
   10012:	881a      	ldrh	r2, [r3, #0]
   10014:	88fb      	ldrh	r3, [r7, #6]
   10016:	4413      	add	r3, r2
   10018:	b29a      	uxth	r2, r3
   1001a:	68bb      	ldr	r3, [r7, #8]
   1001c:	801a      	strh	r2, [r3, #0]
    buf->head = new_head;   
   1001e:	68bb      	ldr	r3, [r7, #8]
   10020:	7bba      	ldrb	r2, [r7, #14]
   10022:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Find the next input */
  adc_input++;
   10026:	7bfb      	ldrb	r3, [r7, #15]
   10028:	3301      	adds	r3, #1
   1002a:	73fb      	strb	r3, [r7, #15]
  if( adc_input >= 8 )
   1002c:	7bfb      	ldrb	r3, [r7, #15]
   1002e:	2b07      	cmp	r3, #7
   10030:	d901      	bls.n	10036 <__vector_21+0xa6>
    adc_input = 0;
   10032:	2300      	movs	r3, #0
   10034:	73fb      	strb	r3, [r7, #15]
  /* Select it */
  ADMUX = adc_input | ANALOG_VREF;
   10036:	f242 0307 	movw	r3, #8199	; 0x2007
   1003a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1003e:	7bfa      	ldrb	r2, [r7, #15]
   10040:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   10044:	b2d2      	uxtb	r2, r2
   10046:	701a      	strb	r2, [r3, #0]
  /* Restart the conversion */
  sbi( ADCSR, ADSC );
   10048:	f242 0306 	movw	r3, #8198	; 0x2006
   1004c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10050:	f242 0206 	movw	r2, #8198	; 0x2006
   10054:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10058:	7812      	ldrb	r2, [r2, #0]
   1005a:	b2d2      	uxtb	r2, r2
   1005c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   10060:	b2d2      	uxtb	r2, r2
   10062:	701a      	strb	r2, [r3, #0]
  
}
   10064:	3714      	adds	r7, #20
   10066:	46bd      	mov	sp, r7
   10068:	f85d 7b04 	ldr.w	r7, [sp], #4
   1006c:	4770      	bx	lr
   1006e:	bf00      	nop

00010070 <gps_init>:
static uint8_t  ubx_status;
static uint16_t ubx_len;
static uint8_t  ubx_msg_idx;
static uint8_t ck_a, ck_b, ubx_id, ubx_class;

void gps_init( void ) {
   10070:	b580      	push	{r7, lr}
   10072:	af00      	add	r7, sp, #0
#ifdef SIMUL
  uart0_init();
  simul_ir_roll = ir_roll_neutral;
  simul_ir_pitch = ir_pitch_neutral;
#else
  uart1_init();
   10074:	f003 fca8 	bl	139c8 <uart1_init>
#endif
  ubx_status = UNINIT;
   10078:	f24a 734f 	movw	r3, #42831	; 0xa74f
   1007c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10080:	2200      	movs	r2, #0
   10082:	701a      	strb	r2, [r3, #0]
}
   10084:	bd80      	pop	{r7, pc}
   10086:	bf00      	nop

00010088 <parse_gps_msg>:

void parse_gps_msg( void ) {
   10088:	b580      	push	{r7, lr}
   1008a:	af00      	add	r7, sp, #0
    ubx_class = 1;
    ubx_id = (ubx_id + 1)%0x40;
    */
    //end

  if (ubx_class == UBX_NAV_ID) {
   1008c:	f24a 7356 	movw	r3, #42838	; 0xa756
   10090:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10094:	781b      	ldrb	r3, [r3, #0]
   10096:	2b01      	cmp	r3, #1
   10098:	f040 80f9 	bne.w	1028e <parse_gps_msg+0x206>
    if (ubx_id == UBX_NAV_POSUTM_ID) {
   1009c:	f24a 7355 	movw	r3, #42837	; 0xa755
   100a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100a4:	781b      	ldrb	r3, [r3, #0]
   100a6:	2b08      	cmp	r3, #8
   100a8:	d128      	bne.n	100fc <parse_gps_msg+0x74>
      gps_utm_east = UBX_NAV_POSUTM_EAST(ubx_msg_buf);
   100aa:	f24a 6350 	movw	r3, #42576	; 0xa650
   100ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100b2:	685a      	ldr	r2, [r3, #4]
   100b4:	f24a 633c 	movw	r3, #42556	; 0xa63c
   100b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100bc:	601a      	str	r2, [r3, #0]
      gps_utm_north = UBX_NAV_POSUTM_NORTH(ubx_msg_buf);
   100be:	f24a 6350 	movw	r3, #42576	; 0xa650
   100c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100c6:	689a      	ldr	r2, [r3, #8]
   100c8:	f24a 6340 	movw	r3, #42560	; 0xa640
   100cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100d0:	601a      	str	r2, [r3, #0]
      gps_falt = (float)UBX_NAV_POSUTM_ALT(ubx_msg_buf) / 100.;
   100d2:	4b73      	ldr	r3, [pc, #460]	; (102a0 <parse_gps_msg+0x218>)
   100d4:	681b      	ldr	r3, [r3, #0]
   100d6:	4618      	mov	r0, r3
   100d8:	f006 fdee 	bl	16cb8 <__aeabi_i2f>
   100dc:	4603      	mov	r3, r0
   100de:	4618      	mov	r0, r3
   100e0:	f04f 0100 	mov.w	r1, #0
   100e4:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   100e8:	f006 feee 	bl	16ec8 <__aeabi_fdiv>
   100ec:	4603      	mov	r3, r0
   100ee:	461a      	mov	r2, r3
   100f0:	f24a 632c 	movw	r3, #42540	; 0xa62c
   100f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100f8:	601a      	str	r2, [r3, #0]
   100fa:	e0c8      	b.n	1028e <parse_gps_msg+0x206>
        gps_utm_east = gps_utm_east + 0.5;
        gps_utm_north = gps_utm_north + 0.4;
        gps_falt = gps_falt + 0.6;
        */
        // end
    } else if (ubx_id == UBX_NAV_STATUS_ID) {
   100fc:	f24a 7355 	movw	r3, #42837	; 0xa755
   10100:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10104:	781b      	ldrb	r3, [r3, #0]
   10106:	2b03      	cmp	r3, #3
   10108:	d10a      	bne.n	10120 <parse_gps_msg+0x98>
      gps_mode = UBX_NAV_STATUS_GPSfix(ubx_msg_buf);
   1010a:	f24a 6350 	movw	r3, #42576	; 0xa650
   1010e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10112:	791a      	ldrb	r2, [r3, #4]
   10114:	f24a 634c 	movw	r3, #42572	; 0xa64c
   10118:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1011c:	701a      	strb	r2, [r3, #0]
   1011e:	e0b6      	b.n	1028e <parse_gps_msg+0x206>
    } else if (ubx_id == UBX_NAV_VELNED_ID) {
   10120:	f24a 7355 	movw	r3, #42837	; 0xa755
   10124:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10128:	781b      	ldrb	r3, [r3, #0]
   1012a:	2b12      	cmp	r3, #18
   1012c:	f040 80af 	bne.w	1028e <parse_gps_msg+0x206>
      gps_fspeed = ((float)UBX_NAV_VELNED_GSpeed(ubx_msg_buf)) / 1e2; 
   10130:	4b5c      	ldr	r3, [pc, #368]	; (102a4 <parse_gps_msg+0x21c>)
   10132:	681b      	ldr	r3, [r3, #0]
   10134:	4618      	mov	r0, r3
   10136:	f006 fdbb 	bl	16cb0 <__aeabi_ui2f>
   1013a:	4603      	mov	r3, r0
   1013c:	4618      	mov	r0, r3
   1013e:	f04f 0100 	mov.w	r1, #0
   10142:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   10146:	f006 febf 	bl	16ec8 <__aeabi_fdiv>
   1014a:	4603      	mov	r3, r0
   1014c:	461a      	mov	r2, r3
   1014e:	f24a 6330 	movw	r3, #42544	; 0xa630
   10152:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10156:	601a      	str	r2, [r3, #0]
      gps_fclimb = ((float)UBX_NAV_VELNED_VEL_D(ubx_msg_buf)) / -1e2;
   10158:	4b51      	ldr	r3, [pc, #324]	; (102a0 <parse_gps_msg+0x218>)
   1015a:	681b      	ldr	r3, [r3, #0]
   1015c:	4618      	mov	r0, r3
   1015e:	f006 fdab 	bl	16cb8 <__aeabi_i2f>
   10162:	4603      	mov	r3, r0
   10164:	4618      	mov	r0, r3
   10166:	f04f 0100 	mov.w	r1, #0
   1016a:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   1016e:	f006 feab 	bl	16ec8 <__aeabi_fdiv>
   10172:	4603      	mov	r3, r0
   10174:	461a      	mov	r2, r3
   10176:	f24a 6334 	movw	r3, #42548	; 0xa634
   1017a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1017e:	601a      	str	r2, [r3, #0]
      gps_fcourse = RadianOfDeg(((float)UBX_NAV_VELNED_Heading(ubx_msg_buf)) / 1e5);
   10180:	4b49      	ldr	r3, [pc, #292]	; (102a8 <parse_gps_msg+0x220>)
   10182:	681b      	ldr	r3, [r3, #0]
   10184:	4618      	mov	r0, r3
   10186:	f006 fd97 	bl	16cb8 <__aeabi_i2f>
   1018a:	4603      	mov	r3, r0
   1018c:	4618      	mov	r0, r3
   1018e:	f006 f953 	bl	16438 <__aeabi_f2d>
   10192:	4602      	mov	r2, r0
   10194:	460b      	mov	r3, r1
   10196:	4610      	mov	r0, r2
   10198:	4619      	mov	r1, r3
   1019a:	a33d      	add	r3, pc, #244	; (adr r3, 10290 <parse_gps_msg+0x208>)
   1019c:	e9d3 2300 	ldrd	r2, r3, [r3]
   101a0:	f006 fac8 	bl	16734 <__aeabi_ddiv>
   101a4:	4602      	mov	r2, r0
   101a6:	460b      	mov	r3, r1
   101a8:	4610      	mov	r0, r2
   101aa:	4619      	mov	r1, r3
   101ac:	f04f 0200 	mov.w	r2, #0
   101b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   101b4:	f2c4 0366 	movt	r3, #16486	; 0x4066
   101b8:	f006 fabc 	bl	16734 <__aeabi_ddiv>
   101bc:	4602      	mov	r2, r0
   101be:	460b      	mov	r3, r1
   101c0:	4610      	mov	r0, r2
   101c2:	4619      	mov	r1, r3
   101c4:	a334      	add	r3, pc, #208	; (adr r3, 10298 <parse_gps_msg+0x210>)
   101c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   101ca:	f006 f989 	bl	164e0 <__aeabi_dmul>
   101ce:	4602      	mov	r2, r0
   101d0:	460b      	mov	r3, r1
   101d2:	4610      	mov	r0, r2
   101d4:	4619      	mov	r1, r3
   101d6:	f006 fc65 	bl	16aa4 <__aeabi_d2f>
   101da:	4602      	mov	r2, r0
   101dc:	f24a 6338 	movw	r3, #42552	; 0xa638
   101e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101e4:	601a      	str	r2, [r3, #0]
      gps_ftow = ((float)UBX_NAV_VELNED_ITOW(ubx_msg_buf)) / 1e3;
   101e6:	f24a 6350 	movw	r3, #42576	; 0xa650
   101ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101ee:	681b      	ldr	r3, [r3, #0]
   101f0:	4618      	mov	r0, r3
   101f2:	f006 fd5d 	bl	16cb0 <__aeabi_ui2f>
   101f6:	4603      	mov	r3, r0
   101f8:	4618      	mov	r0, r3
   101fa:	f04f 0100 	mov.w	r1, #0
   101fe:	f2c4 417a 	movt	r1, #17530	; 0x447a
   10202:	f006 fe61 	bl	16ec8 <__aeabi_fdiv>
   10206:	4603      	mov	r3, r0
   10208:	461a      	mov	r2, r3
   1020a:	f24a 6328 	movw	r3, #42536	; 0xa628
   1020e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10212:	601a      	str	r2, [r3, #0]
        gps_fcourse = gps_fcourse + 0.2;
        gps_ftow = gps_ftow + 0.1;
        */
        // end
      
      gps_east = gps_utm_east / 100 - NAV_UTM_EAST0;
   10214:	f24a 633c 	movw	r3, #42556	; 0xa63c
   10218:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1021c:	681a      	ldr	r2, [r3, #0]
   1021e:	f248 531f 	movw	r3, #34079	; 0x851f
   10222:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
   10226:	fb83 1302 	smull	r1, r3, r3, r2
   1022a:	1159      	asrs	r1, r3, #5
   1022c:	17d3      	asrs	r3, r2, #31
   1022e:	1acb      	subs	r3, r1, r3
   10230:	f5a3 2313 	sub.w	r3, r3, #602112	; 0x93000
   10234:	f6a3 535a 	subw	r3, r3, #3418	; 0xd5a
   10238:	4618      	mov	r0, r3
   1023a:	f006 fd3d 	bl	16cb8 <__aeabi_i2f>
   1023e:	4602      	mov	r2, r0
   10240:	f24a 6344 	movw	r3, #42564	; 0xa644
   10244:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10248:	601a      	str	r2, [r3, #0]
      gps_north = gps_utm_north / 100 - NAV_UTM_NORTH0;
   1024a:	f24a 6340 	movw	r3, #42560	; 0xa640
   1024e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10252:	681a      	ldr	r2, [r3, #0]
   10254:	f248 531f 	movw	r3, #34079	; 0x851f
   10258:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
   1025c:	fb83 1302 	smull	r1, r3, r3, r2
   10260:	1159      	asrs	r1, r3, #5
   10262:	17d3      	asrs	r3, r2, #31
   10264:	1aca      	subs	r2, r1, r3
   10266:	f648 231a 	movw	r3, #35354	; 0x8a1a
   1026a:	f6cf 73a7 	movt	r3, #65447	; 0xffa7
   1026e:	4413      	add	r3, r2
   10270:	4618      	mov	r0, r3
   10272:	f006 fd21 	bl	16cb8 <__aeabi_i2f>
   10276:	4602      	mov	r2, r0
   10278:	f24a 6348 	movw	r3, #42568	; 0xa648
   1027c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10280:	601a      	str	r2, [r3, #0]
      
      
      gps_pos_available = TRUE; /* The 3 UBX messages are sent in one rafale */
   10282:	f24a 634e 	movw	r3, #42574	; 0xa64e
   10286:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1028a:	2201      	movs	r2, #1
   1028c:	701a      	strb	r2, [r3, #0]
      simul_ir_roll = UBX_USR_IRSIM_ROLL(ubx_msg_buf);
      simul_ir_pitch = UBX_USR_IRSIM_PITCH(ubx_msg_buf);
    }
  }
#endif
}
   1028e:	bd80      	pop	{r7, pc}
   10290:	00000000 	.word	0x00000000
   10294:	40f86a00 	.word	0x40f86a00
   10298:	5a7ed197 	.word	0x5a7ed197
   1029c:	400921fb 	.word	0x400921fb
   102a0:	2000a65c 	.word	0x2000a65c
   102a4:	2000a664 	.word	0x2000a664
   102a8:	2000a668 	.word	0x2000a668

000102ac <parse_ubx>:


uint8_t gps_nb_ovrn;


static void parse_ubx( uint8_t c ) {
   102ac:	b480      	push	{r7}
   102ae:	b083      	sub	sp, #12
   102b0:	af00      	add	r7, sp, #0
   102b2:	4603      	mov	r3, r0
   102b4:	71fb      	strb	r3, [r7, #7]
   if (ubx_status < GOT_PAYLOAD) {
   102b6:	f24a 734f 	movw	r3, #42831	; 0xa74f
   102ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102be:	781b      	ldrb	r3, [r3, #0]
   102c0:	2b06      	cmp	r3, #6
   102c2:	d81d      	bhi.n	10300 <parse_ubx+0x54>
    ck_a += c;
   102c4:	f24a 7353 	movw	r3, #42835	; 0xa753
   102c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102cc:	781a      	ldrb	r2, [r3, #0]
   102ce:	79fb      	ldrb	r3, [r7, #7]
   102d0:	4413      	add	r3, r2
   102d2:	b2da      	uxtb	r2, r3
   102d4:	f24a 7353 	movw	r3, #42835	; 0xa753
   102d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102dc:	701a      	strb	r2, [r3, #0]
    ck_b += ck_a;
   102de:	f24a 7354 	movw	r3, #42836	; 0xa754
   102e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102e6:	781a      	ldrb	r2, [r3, #0]
   102e8:	f24a 7353 	movw	r3, #42835	; 0xa753
   102ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102f0:	781b      	ldrb	r3, [r3, #0]
   102f2:	4413      	add	r3, r2
   102f4:	b2da      	uxtb	r2, r3
   102f6:	f24a 7354 	movw	r3, #42836	; 0xa754
   102fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102fe:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
    break;
  }
#else */
  if (ubx_status == UNINIT)
   10300:	f24a 734f 	movw	r3, #42831	; 0xa74f
   10304:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10308:	781b      	ldrb	r3, [r3, #0]
   1030a:	2b00      	cmp	r3, #0
   1030c:	d110      	bne.n	10330 <parse_ubx+0x84>
  {
    if (c == UBX_SYNC1)
   1030e:	79fb      	ldrb	r3, [r7, #7]
   10310:	2bb5      	cmp	r3, #181	; 0xb5
   10312:	f040 8135 	bne.w	10580 <parse_ubx+0x2d4>
      ubx_status++;
   10316:	f24a 734f 	movw	r3, #42831	; 0xa74f
   1031a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1031e:	781b      	ldrb	r3, [r3, #0]
   10320:	3301      	adds	r3, #1
   10322:	b2da      	uxtb	r2, r3
   10324:	f24a 734f 	movw	r3, #42831	; 0xa74f
   10328:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1032c:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
  }
  else {}
//#endif
  return;
   1032e:	e12f      	b.n	10590 <parse_ubx+0x2e4>
  if (ubx_status == UNINIT)
  {
    if (c == UBX_SYNC1)
      ubx_status++;
  }
  else if (ubx_status == GOT_SYNC1)
   10330:	f24a 734f 	movw	r3, #42831	; 0xa74f
   10334:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10338:	781b      	ldrb	r3, [r3, #0]
   1033a:	2b01      	cmp	r3, #1
   1033c:	d11c      	bne.n	10378 <parse_ubx+0xcc>
  {
    if (c != UBX_SYNC2)
   1033e:	79fb      	ldrb	r3, [r7, #7]
   10340:	2b62      	cmp	r3, #98	; 0x62
   10342:	d000      	beq.n	10346 <parse_ubx+0x9a>
      goto error;
   10344:	e11d      	b.n	10582 <parse_ubx+0x2d6>
    ck_a = 0;
   10346:	f24a 7353 	movw	r3, #42835	; 0xa753
   1034a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1034e:	2200      	movs	r2, #0
   10350:	701a      	strb	r2, [r3, #0]
    ck_b = 0;
   10352:	f24a 7354 	movw	r3, #42836	; 0xa754
   10356:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1035a:	2200      	movs	r2, #0
   1035c:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   1035e:	f24a 734f 	movw	r3, #42831	; 0xa74f
   10362:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10366:	781b      	ldrb	r3, [r3, #0]
   10368:	3301      	adds	r3, #1
   1036a:	b2da      	uxtb	r2, r3
   1036c:	f24a 734f 	movw	r3, #42831	; 0xa74f
   10370:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10374:	701a      	strb	r2, [r3, #0]
   10376:	e103      	b.n	10580 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_SYNC2)
   10378:	f24a 734f 	movw	r3, #42831	; 0xa74f
   1037c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10380:	781b      	ldrb	r3, [r3, #0]
   10382:	2b02      	cmp	r3, #2
   10384:	d127      	bne.n	103d6 <parse_ubx+0x12a>
  {
    if (gps_msg_received) {
   10386:	f24a 634d 	movw	r3, #42573	; 0xa64d
   1038a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1038e:	781b      	ldrb	r3, [r3, #0]
   10390:	b2db      	uxtb	r3, r3
   10392:	2b00      	cmp	r3, #0
   10394:	d00c      	beq.n	103b0 <parse_ubx+0x104>
      /* Previous message has not yet been parsed: discard this one */
      gps_nb_ovrn++;
   10396:	f24a 7357 	movw	r3, #42839	; 0xa757
   1039a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1039e:	781b      	ldrb	r3, [r3, #0]
   103a0:	3301      	adds	r3, #1
   103a2:	b2da      	uxtb	r2, r3
   103a4:	f24a 7357 	movw	r3, #42839	; 0xa757
   103a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103ac:	701a      	strb	r2, [r3, #0]
      goto error;
   103ae:	e0e8      	b.n	10582 <parse_ubx+0x2d6>
    }
    ubx_class = c;
   103b0:	f24a 7356 	movw	r3, #42838	; 0xa756
   103b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103b8:	79fa      	ldrb	r2, [r7, #7]
   103ba:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   103bc:	f24a 734f 	movw	r3, #42831	; 0xa74f
   103c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103c4:	781b      	ldrb	r3, [r3, #0]
   103c6:	3301      	adds	r3, #1
   103c8:	b2da      	uxtb	r2, r3
   103ca:	f24a 734f 	movw	r3, #42831	; 0xa74f
   103ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103d2:	701a      	strb	r2, [r3, #0]
   103d4:	e0d4      	b.n	10580 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_CLASS)
   103d6:	f24a 734f 	movw	r3, #42831	; 0xa74f
   103da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103de:	781b      	ldrb	r3, [r3, #0]
   103e0:	2b03      	cmp	r3, #3
   103e2:	d112      	bne.n	1040a <parse_ubx+0x15e>
  {
    ubx_id = c;
   103e4:	f24a 7355 	movw	r3, #42837	; 0xa755
   103e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103ec:	79fa      	ldrb	r2, [r7, #7]
   103ee:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   103f0:	f24a 734f 	movw	r3, #42831	; 0xa74f
   103f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103f8:	781b      	ldrb	r3, [r3, #0]
   103fa:	3301      	adds	r3, #1
   103fc:	b2da      	uxtb	r2, r3
   103fe:	f24a 734f 	movw	r3, #42831	; 0xa74f
   10402:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10406:	701a      	strb	r2, [r3, #0]
   10408:	e0ba      	b.n	10580 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_ID)
   1040a:	f24a 734f 	movw	r3, #42831	; 0xa74f
   1040e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10412:	781b      	ldrb	r3, [r3, #0]
   10414:	2b04      	cmp	r3, #4
   10416:	d113      	bne.n	10440 <parse_ubx+0x194>
  {
    ubx_len = c;
   10418:	79fb      	ldrb	r3, [r7, #7]
   1041a:	b29a      	uxth	r2, r3
   1041c:	f24a 7350 	movw	r3, #42832	; 0xa750
   10420:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10424:	801a      	strh	r2, [r3, #0]
    ubx_status++;
   10426:	f24a 734f 	movw	r3, #42831	; 0xa74f
   1042a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1042e:	781b      	ldrb	r3, [r3, #0]
   10430:	3301      	adds	r3, #1
   10432:	b2da      	uxtb	r2, r3
   10434:	f24a 734f 	movw	r3, #42831	; 0xa74f
   10438:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1043c:	701a      	strb	r2, [r3, #0]
   1043e:	e09f      	b.n	10580 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_LEN1)
   10440:	f24a 734f 	movw	r3, #42831	; 0xa74f
   10444:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10448:	781b      	ldrb	r3, [r3, #0]
   1044a:	2b05      	cmp	r3, #5
   1044c:	d12b      	bne.n	104a6 <parse_ubx+0x1fa>
  {
    ubx_len |= (c<<8);
   1044e:	79fb      	ldrb	r3, [r7, #7]
   10450:	021b      	lsls	r3, r3, #8
   10452:	b29a      	uxth	r2, r3
   10454:	f24a 7350 	movw	r3, #42832	; 0xa750
   10458:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1045c:	881b      	ldrh	r3, [r3, #0]
   1045e:	b29b      	uxth	r3, r3
   10460:	4313      	orrs	r3, r2
   10462:	b29b      	uxth	r3, r3
   10464:	b29a      	uxth	r2, r3
   10466:	f24a 7350 	movw	r3, #42832	; 0xa750
   1046a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1046e:	801a      	strh	r2, [r3, #0]
    if (ubx_len > UBX_MAX_PAYLOAD)
   10470:	f24a 7350 	movw	r3, #42832	; 0xa750
   10474:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10478:	881b      	ldrh	r3, [r3, #0]
   1047a:	2bff      	cmp	r3, #255	; 0xff
   1047c:	d900      	bls.n	10480 <parse_ubx+0x1d4>
      goto error;
   1047e:	e080      	b.n	10582 <parse_ubx+0x2d6>
    ubx_msg_idx = 0;
   10480:	f24a 7352 	movw	r3, #42834	; 0xa752
   10484:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10488:	2200      	movs	r2, #0
   1048a:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   1048c:	f24a 734f 	movw	r3, #42831	; 0xa74f
   10490:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10494:	781b      	ldrb	r3, [r3, #0]
   10496:	3301      	adds	r3, #1
   10498:	b2da      	uxtb	r2, r3
   1049a:	f24a 734f 	movw	r3, #42831	; 0xa74f
   1049e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104a2:	701a      	strb	r2, [r3, #0]
   104a4:	e06c      	b.n	10580 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_LEN2)
   104a6:	f24a 734f 	movw	r3, #42831	; 0xa74f
   104aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104ae:	781b      	ldrb	r3, [r3, #0]
   104b0:	2b06      	cmp	r3, #6
   104b2:	d131      	bne.n	10518 <parse_ubx+0x26c>
  {
    ubx_msg_buf[ubx_msg_idx] = c;
   104b4:	f24a 7352 	movw	r3, #42834	; 0xa752
   104b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104bc:	781b      	ldrb	r3, [r3, #0]
   104be:	461a      	mov	r2, r3
   104c0:	f24a 6350 	movw	r3, #42576	; 0xa650
   104c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104c8:	79f9      	ldrb	r1, [r7, #7]
   104ca:	5499      	strb	r1, [r3, r2]
    ubx_msg_idx++;
   104cc:	f24a 7352 	movw	r3, #42834	; 0xa752
   104d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104d4:	781b      	ldrb	r3, [r3, #0]
   104d6:	3301      	adds	r3, #1
   104d8:	b2da      	uxtb	r2, r3
   104da:	f24a 7352 	movw	r3, #42834	; 0xa752
   104de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104e2:	701a      	strb	r2, [r3, #0]
    if (ubx_msg_idx >= ubx_len) {
   104e4:	f24a 7352 	movw	r3, #42834	; 0xa752
   104e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104ec:	781b      	ldrb	r3, [r3, #0]
   104ee:	461a      	mov	r2, r3
   104f0:	f24a 7350 	movw	r3, #42832	; 0xa750
   104f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104f8:	881b      	ldrh	r3, [r3, #0]
   104fa:	429a      	cmp	r2, r3
   104fc:	d340      	bcc.n	10580 <parse_ubx+0x2d4>
      ubx_status++;
   104fe:	f24a 734f 	movw	r3, #42831	; 0xa74f
   10502:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10506:	781b      	ldrb	r3, [r3, #0]
   10508:	3301      	adds	r3, #1
   1050a:	b2da      	uxtb	r2, r3
   1050c:	f24a 734f 	movw	r3, #42831	; 0xa74f
   10510:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10514:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
  }
  else {}
//#endif
  return;
   10516:	e03b      	b.n	10590 <parse_ubx+0x2e4>
    ubx_msg_idx++;
    if (ubx_msg_idx >= ubx_len) {
      ubx_status++;
    }
  }
  else if (ubx_status == GOT_PAYLOAD)
   10518:	f24a 734f 	movw	r3, #42831	; 0xa74f
   1051c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10520:	781b      	ldrb	r3, [r3, #0]
   10522:	2b07      	cmp	r3, #7
   10524:	d115      	bne.n	10552 <parse_ubx+0x2a6>
  {
    if (c != ck_a)
   10526:	f24a 7353 	movw	r3, #42835	; 0xa753
   1052a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1052e:	781b      	ldrb	r3, [r3, #0]
   10530:	79fa      	ldrb	r2, [r7, #7]
   10532:	429a      	cmp	r2, r3
   10534:	d000      	beq.n	10538 <parse_ubx+0x28c>
      goto error;
   10536:	e024      	b.n	10582 <parse_ubx+0x2d6>
    ubx_status++;
   10538:	f24a 734f 	movw	r3, #42831	; 0xa74f
   1053c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10540:	781b      	ldrb	r3, [r3, #0]
   10542:	3301      	adds	r3, #1
   10544:	b2da      	uxtb	r2, r3
   10546:	f24a 734f 	movw	r3, #42831	; 0xa74f
   1054a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1054e:	701a      	strb	r2, [r3, #0]
   10550:	e016      	b.n	10580 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_CHECKSUM1)
   10552:	f24a 734f 	movw	r3, #42831	; 0xa74f
   10556:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1055a:	781b      	ldrb	r3, [r3, #0]
   1055c:	2b08      	cmp	r3, #8
   1055e:	d10f      	bne.n	10580 <parse_ubx+0x2d4>
  {
    if (c != ck_b)
   10560:	f24a 7354 	movw	r3, #42836	; 0xa754
   10564:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10568:	781b      	ldrb	r3, [r3, #0]
   1056a:	79fa      	ldrb	r2, [r7, #7]
   1056c:	429a      	cmp	r2, r3
   1056e:	d000      	beq.n	10572 <parse_ubx+0x2c6>
      goto error;
   10570:	e007      	b.n	10582 <parse_ubx+0x2d6>
    gps_msg_received = TRUE;
   10572:	f24a 634d 	movw	r3, #42573	; 0xa64d
   10576:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1057a:	2201      	movs	r2, #1
   1057c:	701a      	strb	r2, [r3, #0]
    goto restart;
   1057e:	e000      	b.n	10582 <parse_ubx+0x2d6>
  }
  else {}
//#endif
  return;
   10580:	e006      	b.n	10590 <parse_ubx+0x2e4>
 error:  
 restart:
  ubx_status = UNINIT;
   10582:	f24a 734f 	movw	r3, #42831	; 0xa74f
   10586:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1058a:	2200      	movs	r2, #0
   1058c:	701a      	strb	r2, [r3, #0]
  return;
   1058e:	bf00      	nop
}
   10590:	370c      	adds	r7, #12
   10592:	46bd      	mov	sp, r7
   10594:	f85d 7b04 	ldr.w	r7, [sp], #4
   10598:	4770      	bx	lr
   1059a:	bf00      	nop

0001059c <__vector_30>:

#ifdef SIMUL
ReceiveUart0(parse_ubx);
#else
ReceiveUart1(parse_ubx);
   1059c:	b580      	push	{r7, lr}
   1059e:	b082      	sub	sp, #8
   105a0:	af00      	add	r7, sp, #0
   105a2:	f242 039c 	movw	r3, #8348	; 0x209c
   105a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105aa:	781b      	ldrb	r3, [r3, #0]
   105ac:	71fb      	strb	r3, [r7, #7]
   105ae:	79fb      	ldrb	r3, [r7, #7]
   105b0:	4618      	mov	r0, r3
   105b2:	f7ff fe7b 	bl	102ac <parse_ubx>
   105b6:	3708      	adds	r7, #8
   105b8:	46bd      	mov	sp, r7
   105ba:	bd80      	pop	{r7, pc}
   105bc:	f3af 8000 	nop.w

000105c0 <ir_init>:
float ir_rad_of_ir = IR_RAD_OF_IR_CONTRAST / IR_DEFAULT_CONTRAST;

static struct adc_buf buf_ir1;
static struct adc_buf buf_ir2;

void ir_init(void) {
   105c0:	b580      	push	{r7, lr}
   105c2:	af00      	add	r7, sp, #0
  RadOfIrFromConstrast(IR_DEFAULT_CONTRAST);
   105c4:	f240 1310 	movw	r3, #272	; 0x110
   105c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105cc:	f24c 228f 	movw	r2, #49807	; 0xc28f
   105d0:	f6c3 3275 	movt	r2, #15221	; 0x3b75
   105d4:	601a      	str	r2, [r3, #0]
  adc_buf_channel(ADC_CHANNEL_IR1, &buf_ir1);
   105d6:	2001      	movs	r0, #1
   105d8:	f24a 715c 	movw	r1, #42844	; 0xa75c
   105dc:	f2c2 0100 	movt	r1, #8192	; 0x2000
   105e0:	f7ff fc82 	bl	fee8 <adc_buf_channel>
  adc_buf_channel(ADC_CHANNEL_IR2, &buf_ir2);
   105e4:	2002      	movs	r0, #2
   105e6:	f24a 71a0 	movw	r1, #42912	; 0xa7a0
   105ea:	f2c2 0100 	movt	r1, #8192	; 0x2000
   105ee:	f7ff fc7b 	bl	fee8 <adc_buf_channel>
}
   105f2:	bd80      	pop	{r7, pc}

000105f4 <ir_update>:
int16_t x1 = 1;
int16_t x2 = 2;
*/
// end

void ir_update(void) {
   105f4:	b480      	push	{r7}
   105f6:	b083      	sub	sp, #12
   105f8:	af00      	add	r7, sp, #0
#ifndef SIMUL
  int16_t x1_mean = buf_ir1.sum/AV_NB_SAMPLE;
   105fa:	f24a 735c 	movw	r3, #42844	; 0xa75c
   105fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10602:	881b      	ldrh	r3, [r3, #0]
   10604:	095b      	lsrs	r3, r3, #5
   10606:	b29b      	uxth	r3, r3
   10608:	80fb      	strh	r3, [r7, #6]
  int16_t x2_mean = buf_ir2.sum/AV_NB_SAMPLE;
   1060a:	f24a 73a0 	movw	r3, #42912	; 0xa7a0
   1060e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10612:	881b      	ldrh	r3, [r3, #0]
   10614:	095b      	lsrs	r3, r3, #5
   10616:	b29b      	uxth	r3, r3
   10618:	80bb      	strh	r3, [r7, #4]
    if( x1 < -900 ) x1 = x2 % x1;
    x2_mean = x2 ++;
    if( x2 > 110 ) x2 = x1 % x2;
    */
    // end
  ir_roll = IR_RollOfIrs(x1_mean, x2_mean) - ir_roll_neutral;
   1061a:	88fb      	ldrh	r3, [r7, #6]
   1061c:	425b      	negs	r3, r3
   1061e:	b29a      	uxth	r2, r3
   10620:	88bb      	ldrh	r3, [r7, #4]
   10622:	1ad3      	subs	r3, r2, r3
   10624:	b29a      	uxth	r2, r3
   10626:	f240 130a 	movw	r3, #266	; 0x10a
   1062a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1062e:	881b      	ldrh	r3, [r3, #0]
   10630:	b29b      	uxth	r3, r3
   10632:	1ad3      	subs	r3, r2, r3
   10634:	b29b      	uxth	r3, r3
   10636:	b29a      	uxth	r2, r3
   10638:	f24a 7358 	movw	r3, #42840	; 0xa758
   1063c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10640:	801a      	strh	r2, [r3, #0]
  ir_pitch = IR_PitchOfIrs(x1_mean, x2_mean) - ir_pitch_neutral;
   10642:	88ba      	ldrh	r2, [r7, #4]
   10644:	88fb      	ldrh	r3, [r7, #6]
   10646:	1ad3      	subs	r3, r2, r3
   10648:	b29a      	uxth	r2, r3
   1064a:	f240 130c 	movw	r3, #268	; 0x10c
   1064e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10652:	881b      	ldrh	r3, [r3, #0]
   10654:	b29b      	uxth	r3, r3
   10656:	1ad3      	subs	r3, r2, r3
   10658:	b29b      	uxth	r3, r3
   1065a:	b29a      	uxth	r2, r3
   1065c:	f24a 735a 	movw	r3, #42842	; 0xa75a
   10660:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10664:	801a      	strh	r2, [r3, #0]
#else
  extern volatile int16_t simul_ir_roll, simul_ir_pitch;
  ir_roll = simul_ir_roll -  ir_roll_neutral; 
  ir_pitch = simul_ir_pitch - ir_pitch_neutral;  
#endif
}
   10666:	370c      	adds	r7, #12
   10668:	46bd      	mov	sp, r7
   1066a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1066e:	4770      	bx	lr

00010670 <ir_gain_calib>:

/* 
   Contrast measurement
*/

void ir_gain_calib(void) {      // Plane nose down
   10670:	b580      	push	{r7, lr}
   10672:	af00      	add	r7, sp, #0
  /* plane nose down -> negativ value */
  ir_contrast = - ir_pitch;
   10674:	f24a 735a 	movw	r3, #42842	; 0xa75a
   10678:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1067c:	881b      	ldrh	r3, [r3, #0]
   1067e:	b29b      	uxth	r3, r3
   10680:	425b      	negs	r3, r3
   10682:	b29b      	uxth	r3, r3
   10684:	b29a      	uxth	r2, r3
   10686:	f240 1308 	movw	r3, #264	; 0x108
   1068a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1068e:	801a      	strh	r2, [r3, #0]
  RadOfIrFromConstrast(ir_contrast);
   10690:	f240 1308 	movw	r3, #264	; 0x108
   10694:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10698:	881b      	ldrh	r3, [r3, #0]
   1069a:	b21b      	sxth	r3, r3
   1069c:	4618      	mov	r0, r3
   1069e:	f005 feb9 	bl	16414 <__aeabi_i2d>
   106a2:	4602      	mov	r2, r0
   106a4:	460b      	mov	r3, r1
   106a6:	f04f 0000 	mov.w	r0, #0
   106aa:	f04f 0100 	mov.w	r1, #0
   106ae:	f6c3 71e8 	movt	r1, #16360	; 0x3fe8
   106b2:	f006 f83f 	bl	16734 <__aeabi_ddiv>
   106b6:	4602      	mov	r2, r0
   106b8:	460b      	mov	r3, r1
   106ba:	4610      	mov	r0, r2
   106bc:	4619      	mov	r1, r3
   106be:	f006 f9f1 	bl	16aa4 <__aeabi_d2f>
   106c2:	4602      	mov	r2, r0
   106c4:	f240 1310 	movw	r3, #272	; 0x110
   106c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106cc:	601a      	str	r2, [r3, #0]
}
   106ce:	bd80      	pop	{r7, pc}

000106d0 <roll_pitch_pid_run>:
float pitch_of_vz_pgain = CLIMB_PITCH_OF_VZ_PGAIN;
float pitch_of_vz = 0.;


/** \brief Computes ::desired_aileron and ::desired_elevator from attitude estimation and expected attitude. */
void roll_pitch_pid_run( void ) {
   106d0:	b590      	push	{r4, r7, lr}
   106d2:	b083      	sub	sp, #12
   106d4:	af00      	add	r7, sp, #0
  float err =  estimator_phi - desired_roll;
   106d6:	f64a 2378 	movw	r3, #43640	; 0xaa78
   106da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106de:	681a      	ldr	r2, [r3, #0]
   106e0:	f24a 73e4 	movw	r3, #42980	; 0xa7e4
   106e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106e8:	681b      	ldr	r3, [r3, #0]
   106ea:	4610      	mov	r0, r2
   106ec:	4619      	mov	r1, r3
   106ee:	f006 fa2d 	bl	16b4c <__aeabi_fsub>
   106f2:	4603      	mov	r3, r0
   106f4:	607b      	str	r3, [r7, #4]
  desired_aileron = TRIM_PPRZ(roll_pgain * err);
   106f6:	f240 1314 	movw	r3, #276	; 0x114
   106fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106fe:	681b      	ldr	r3, [r3, #0]
   10700:	4618      	mov	r0, r3
   10702:	6879      	ldr	r1, [r7, #4]
   10704:	f006 fb2c 	bl	16d60 <__aeabi_fmul>
   10708:	4603      	mov	r3, r0
   1070a:	4618      	mov	r0, r3
   1070c:	f04f 0100 	mov.w	r1, #0
   10710:	f2cc 6116 	movt	r1, #50710	; 0xc616
   10714:	f006 fcc2 	bl	1709c <__aeabi_fcmplt>
   10718:	4603      	mov	r3, r0
   1071a:	2b00      	cmp	r3, #0
   1071c:	d002      	beq.n	10724 <roll_pitch_pid_run+0x54>
   1071e:	f64d 2280 	movw	r2, #55936	; 0xda80
   10722:	e026      	b.n	10772 <roll_pitch_pid_run+0xa2>
   10724:	f240 1314 	movw	r3, #276	; 0x114
   10728:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1072c:	681b      	ldr	r3, [r3, #0]
   1072e:	4618      	mov	r0, r3
   10730:	6879      	ldr	r1, [r7, #4]
   10732:	f006 fb15 	bl	16d60 <__aeabi_fmul>
   10736:	4603      	mov	r3, r0
   10738:	4618      	mov	r0, r3
   1073a:	f04f 0100 	mov.w	r1, #0
   1073e:	f2c4 6116 	movt	r1, #17942	; 0x4616
   10742:	f006 fcc9 	bl	170d8 <__aeabi_fcmpgt>
   10746:	4603      	mov	r3, r0
   10748:	2b00      	cmp	r3, #0
   1074a:	d002      	beq.n	10752 <roll_pitch_pid_run+0x82>
   1074c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   10750:	e00e      	b.n	10770 <roll_pitch_pid_run+0xa0>
   10752:	f240 1314 	movw	r3, #276	; 0x114
   10756:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1075a:	681b      	ldr	r3, [r3, #0]
   1075c:	4618      	mov	r0, r3
   1075e:	6879      	ldr	r1, [r7, #4]
   10760:	f006 fafe 	bl	16d60 <__aeabi_fmul>
   10764:	4603      	mov	r3, r0
   10766:	4618      	mov	r0, r3
   10768:	f006 fcc0 	bl	170ec <__aeabi_f2iz>
   1076c:	4603      	mov	r3, r0
   1076e:	b29b      	uxth	r3, r3
   10770:	b29a      	uxth	r2, r3
   10772:	f24a 73ee 	movw	r3, #42990	; 0xa7ee
   10776:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1077a:	801a      	strh	r2, [r3, #0]
  if (pitch_of_roll <0.)
   1077c:	f24a 73f4 	movw	r3, #42996	; 0xa7f4
   10780:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10784:	681b      	ldr	r3, [r3, #0]
   10786:	4618      	mov	r0, r3
   10788:	f04f 0100 	mov.w	r1, #0
   1078c:	f006 fc86 	bl	1709c <__aeabi_fcmplt>
   10790:	4603      	mov	r3, r0
   10792:	2b00      	cmp	r3, #0
   10794:	d006      	beq.n	107a4 <roll_pitch_pid_run+0xd4>
    pitch_of_roll = 0.;
   10796:	f24a 73f4 	movw	r3, #42996	; 0xa7f4
   1079a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1079e:	f04f 0200 	mov.w	r2, #0
   107a2:	601a      	str	r2, [r3, #0]
  err = -(estimator_theta - desired_pitch - pitch_of_roll * fabs(estimator_phi));
   107a4:	f64a 2380 	movw	r3, #43648	; 0xaa80
   107a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107ac:	681a      	ldr	r2, [r3, #0]
   107ae:	f24a 73e8 	movw	r3, #42984	; 0xa7e8
   107b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107b6:	681b      	ldr	r3, [r3, #0]
   107b8:	4610      	mov	r0, r2
   107ba:	4619      	mov	r1, r3
   107bc:	f006 f9c6 	bl	16b4c <__aeabi_fsub>
   107c0:	4603      	mov	r3, r0
   107c2:	461c      	mov	r4, r3
   107c4:	f64a 2378 	movw	r3, #43640	; 0xaa78
   107c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107cc:	681b      	ldr	r3, [r3, #0]
   107ce:	4618      	mov	r0, r3
   107d0:	f04f 0100 	mov.w	r1, #0
   107d4:	f006 fc62 	bl	1709c <__aeabi_fcmplt>
   107d8:	4603      	mov	r3, r0
   107da:	2b00      	cmp	r3, #0
   107dc:	d007      	beq.n	107ee <roll_pitch_pid_run+0x11e>
   107de:	f64a 2378 	movw	r3, #43640	; 0xaa78
   107e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107e6:	681b      	ldr	r3, [r3, #0]
   107e8:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   107ec:	e004      	b.n	107f8 <roll_pitch_pid_run+0x128>
   107ee:	f64a 2378 	movw	r3, #43640	; 0xaa78
   107f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107f6:	681a      	ldr	r2, [r3, #0]
   107f8:	f24a 73f4 	movw	r3, #42996	; 0xa7f4
   107fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10800:	681b      	ldr	r3, [r3, #0]
   10802:	4610      	mov	r0, r2
   10804:	4619      	mov	r1, r3
   10806:	f006 faab 	bl	16d60 <__aeabi_fmul>
   1080a:	4603      	mov	r3, r0
   1080c:	4620      	mov	r0, r4
   1080e:	4619      	mov	r1, r3
   10810:	f006 f99c 	bl	16b4c <__aeabi_fsub>
   10814:	4603      	mov	r3, r0
   10816:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
   1081a:	607b      	str	r3, [r7, #4]
  desired_elevator = TRIM_PPRZ(pitch_pgain * err);
   1081c:	f240 1318 	movw	r3, #280	; 0x118
   10820:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10824:	681b      	ldr	r3, [r3, #0]
   10826:	4618      	mov	r0, r3
   10828:	6879      	ldr	r1, [r7, #4]
   1082a:	f006 fa99 	bl	16d60 <__aeabi_fmul>
   1082e:	4603      	mov	r3, r0
   10830:	4618      	mov	r0, r3
   10832:	f04f 0100 	mov.w	r1, #0
   10836:	f2cc 6116 	movt	r1, #50710	; 0xc616
   1083a:	f006 fc2f 	bl	1709c <__aeabi_fcmplt>
   1083e:	4603      	mov	r3, r0
   10840:	2b00      	cmp	r3, #0
   10842:	d002      	beq.n	1084a <roll_pitch_pid_run+0x17a>
   10844:	f64d 2280 	movw	r2, #55936	; 0xda80
   10848:	e026      	b.n	10898 <roll_pitch_pid_run+0x1c8>
   1084a:	f240 1318 	movw	r3, #280	; 0x118
   1084e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10852:	681b      	ldr	r3, [r3, #0]
   10854:	4618      	mov	r0, r3
   10856:	6879      	ldr	r1, [r7, #4]
   10858:	f006 fa82 	bl	16d60 <__aeabi_fmul>
   1085c:	4603      	mov	r3, r0
   1085e:	4618      	mov	r0, r3
   10860:	f04f 0100 	mov.w	r1, #0
   10864:	f2c4 6116 	movt	r1, #17942	; 0x4616
   10868:	f006 fc36 	bl	170d8 <__aeabi_fcmpgt>
   1086c:	4603      	mov	r3, r0
   1086e:	2b00      	cmp	r3, #0
   10870:	d002      	beq.n	10878 <roll_pitch_pid_run+0x1a8>
   10872:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   10876:	e00e      	b.n	10896 <roll_pitch_pid_run+0x1c6>
   10878:	f240 1318 	movw	r3, #280	; 0x118
   1087c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10880:	681b      	ldr	r3, [r3, #0]
   10882:	4618      	mov	r0, r3
   10884:	6879      	ldr	r1, [r7, #4]
   10886:	f006 fa6b 	bl	16d60 <__aeabi_fmul>
   1088a:	4603      	mov	r3, r0
   1088c:	4618      	mov	r0, r3
   1088e:	f006 fc2d 	bl	170ec <__aeabi_f2iz>
   10892:	4603      	mov	r3, r0
   10894:	b29b      	uxth	r3, r3
   10896:	b29a      	uxth	r2, r3
   10898:	f24a 73f0 	movw	r3, #42992	; 0xa7f0
   1089c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108a0:	801a      	strh	r2, [r3, #0]
}
   108a2:	370c      	adds	r7, #12
   108a4:	46bd      	mov	sp, r7
   108a6:	bd90      	pop	{r4, r7, pc}

000108a8 <course_pid_run>:

float course_pgain = COURSE_PGAIN;
float desired_course = 0.;
float max_roll = MAX_ROLL;

void course_pid_run( void ) {
   108a8:	b580      	push	{r7, lr}
   108aa:	b082      	sub	sp, #8
   108ac:	af00      	add	r7, sp, #0
  float err = estimator_hspeed_dir - desired_course;
   108ae:	f64a 23a8 	movw	r3, #43688	; 0xaaa8
   108b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108b6:	681a      	ldr	r2, [r3, #0]
   108b8:	f24a 73fc 	movw	r3, #43004	; 0xa7fc
   108bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108c0:	681b      	ldr	r3, [r3, #0]
   108c2:	4610      	mov	r0, r2
   108c4:	4619      	mov	r1, r3
   108c6:	f006 f941 	bl	16b4c <__aeabi_fsub>
   108ca:	4603      	mov	r3, r0
   108cc:	607b      	str	r3, [r7, #4]
  NORM_RAD_ANGLE(err);
   108ce:	e013      	b.n	108f8 <course_pid_run+0x50>
   108d0:	6878      	ldr	r0, [r7, #4]
   108d2:	f005 fdb1 	bl	16438 <__aeabi_f2d>
   108d6:	4602      	mov	r2, r0
   108d8:	460b      	mov	r3, r1
   108da:	4610      	mov	r0, r2
   108dc:	4619      	mov	r1, r3
   108de:	a348      	add	r3, pc, #288	; (adr r3, 10a00 <course_pid_run+0x158>)
   108e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   108e4:	f005 fc48 	bl	16178 <__aeabi_dsub>
   108e8:	4602      	mov	r2, r0
   108ea:	460b      	mov	r3, r1
   108ec:	4610      	mov	r0, r2
   108ee:	4619      	mov	r1, r3
   108f0:	f006 f8d8 	bl	16aa4 <__aeabi_d2f>
   108f4:	4603      	mov	r3, r0
   108f6:	607b      	str	r3, [r7, #4]
   108f8:	6878      	ldr	r0, [r7, #4]
   108fa:	f005 fd9d 	bl	16438 <__aeabi_f2d>
   108fe:	4602      	mov	r2, r0
   10900:	460b      	mov	r3, r1
   10902:	4610      	mov	r0, r2
   10904:	4619      	mov	r1, r3
   10906:	a340      	add	r3, pc, #256	; (adr r3, 10a08 <course_pid_run+0x160>)
   10908:	e9d3 2300 	ldrd	r2, r3, [r3]
   1090c:	f006 f878 	bl	16a00 <__aeabi_dcmpgt>
   10910:	4603      	mov	r3, r0
   10912:	2b00      	cmp	r3, #0
   10914:	d1dc      	bne.n	108d0 <course_pid_run+0x28>
   10916:	e013      	b.n	10940 <course_pid_run+0x98>
   10918:	6878      	ldr	r0, [r7, #4]
   1091a:	f005 fd8d 	bl	16438 <__aeabi_f2d>
   1091e:	4602      	mov	r2, r0
   10920:	460b      	mov	r3, r1
   10922:	4610      	mov	r0, r2
   10924:	4619      	mov	r1, r3
   10926:	a336      	add	r3, pc, #216	; (adr r3, 10a00 <course_pid_run+0x158>)
   10928:	e9d3 2300 	ldrd	r2, r3, [r3]
   1092c:	f005 fc26 	bl	1617c <__adddf3>
   10930:	4602      	mov	r2, r0
   10932:	460b      	mov	r3, r1
   10934:	4610      	mov	r0, r2
   10936:	4619      	mov	r1, r3
   10938:	f006 f8b4 	bl	16aa4 <__aeabi_d2f>
   1093c:	4603      	mov	r3, r0
   1093e:	607b      	str	r3, [r7, #4]
   10940:	6878      	ldr	r0, [r7, #4]
   10942:	f005 fd79 	bl	16438 <__aeabi_f2d>
   10946:	4602      	mov	r2, r0
   10948:	460b      	mov	r3, r1
   1094a:	4610      	mov	r0, r2
   1094c:	4619      	mov	r1, r3
   1094e:	a330      	add	r3, pc, #192	; (adr r3, 10a10 <course_pid_run+0x168>)
   10950:	e9d3 2300 	ldrd	r2, r3, [r3]
   10954:	f006 f836 	bl	169c4 <__aeabi_dcmplt>
   10958:	4603      	mov	r3, r0
   1095a:	2b00      	cmp	r3, #0
   1095c:	d1dc      	bne.n	10918 <course_pid_run+0x70>
  nav_desired_roll = course_pgain * err; //  * fspeed / AIR_SPEED;
   1095e:	f240 1320 	movw	r3, #288	; 0x120
   10962:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10966:	681b      	ldr	r3, [r3, #0]
   10968:	4618      	mov	r0, r3
   1096a:	6879      	ldr	r1, [r7, #4]
   1096c:	f006 f9f8 	bl	16d60 <__aeabi_fmul>
   10970:	4603      	mov	r3, r0
   10972:	461a      	mov	r2, r3
   10974:	f64a 0340 	movw	r3, #43072	; 0xa840
   10978:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1097c:	601a      	str	r2, [r3, #0]
  if (nav_desired_roll > max_roll)
   1097e:	f64a 0340 	movw	r3, #43072	; 0xa840
   10982:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10986:	681a      	ldr	r2, [r3, #0]
   10988:	f240 1324 	movw	r3, #292	; 0x124
   1098c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10990:	681b      	ldr	r3, [r3, #0]
   10992:	4610      	mov	r0, r2
   10994:	4619      	mov	r1, r3
   10996:	f006 fb9f 	bl	170d8 <__aeabi_fcmpgt>
   1099a:	4603      	mov	r3, r0
   1099c:	2b00      	cmp	r3, #0
   1099e:	d00a      	beq.n	109b6 <course_pid_run+0x10e>
    nav_desired_roll = max_roll;
   109a0:	f240 1324 	movw	r3, #292	; 0x124
   109a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109a8:	681a      	ldr	r2, [r3, #0]
   109aa:	f64a 0340 	movw	r3, #43072	; 0xa840
   109ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109b2:	601a      	str	r2, [r3, #0]
   109b4:	e01e      	b.n	109f4 <course_pid_run+0x14c>
  else if (nav_desired_roll < -max_roll)
   109b6:	f240 1324 	movw	r3, #292	; 0x124
   109ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109be:	681b      	ldr	r3, [r3, #0]
   109c0:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   109c4:	f64a 0340 	movw	r3, #43072	; 0xa840
   109c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109cc:	681b      	ldr	r3, [r3, #0]
   109ce:	4610      	mov	r0, r2
   109d0:	4619      	mov	r1, r3
   109d2:	f006 fb81 	bl	170d8 <__aeabi_fcmpgt>
   109d6:	4603      	mov	r3, r0
   109d8:	2b00      	cmp	r3, #0
   109da:	d00b      	beq.n	109f4 <course_pid_run+0x14c>
    nav_desired_roll = -max_roll;
   109dc:	f240 1324 	movw	r3, #292	; 0x124
   109e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109e4:	681b      	ldr	r3, [r3, #0]
   109e6:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   109ea:	f64a 0340 	movw	r3, #43072	; 0xa840
   109ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109f2:	601a      	str	r2, [r3, #0]
}
   109f4:	3708      	adds	r7, #8
   109f6:	46bd      	mov	sp, r7
   109f8:	bd80      	pop	{r7, pc}
   109fa:	bf00      	nop
   109fc:	f3af 8000 	nop.w
   10a00:	54442d18 	.word	0x54442d18
   10a04:	401921fb 	.word	0x401921fb
   10a08:	54442d18 	.word	0x54442d18
   10a0c:	400921fb 	.word	0x400921fb
   10a10:	54442d18 	.word	0x54442d18
   10a14:	c00921fb 	.word	0xc00921fb

00010a18 <climb_pid_run>:

#define MAX_CLIMB_SUM_ERR 100
#define MAX_PITCH_CLIMB_SUM_ERR 100

/** \brief Computes desired_gaz and desired_pitch from desired_climb */
void climb_pid_run ( void ) {
   10a18:	b5b0      	push	{r4, r5, r7, lr}
   10a1a:	b082      	sub	sp, #8
   10a1c:	af00      	add	r7, sp, #0
  float err  = estimator_z_dot - desired_climb;
   10a1e:	f64a 238c 	movw	r3, #43660	; 0xaa8c
   10a22:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a26:	681a      	ldr	r2, [r3, #0]
   10a28:	f64a 0300 	movw	r3, #43008	; 0xa800
   10a2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a30:	681b      	ldr	r3, [r3, #0]
   10a32:	4610      	mov	r0, r2
   10a34:	4619      	mov	r1, r3
   10a36:	f006 f889 	bl	16b4c <__aeabi_fsub>
   10a3a:	4603      	mov	r3, r0
   10a3c:	607b      	str	r3, [r7, #4]
  float fgaz;
  if (auto_pitch) { /* gaz constant */
   10a3e:	f24a 439f 	movw	r3, #42143	; 0xa49f
   10a42:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a46:	781b      	ldrb	r3, [r3, #0]
   10a48:	2b00      	cmp	r3, #0
   10a4a:	f000 80a8 	beq.w	10b9e <climb_pid_run+0x186>
    desired_gaz = nav_desired_gaz;
   10a4e:	f64a 0338 	movw	r3, #43064	; 0xa838
   10a52:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a56:	881b      	ldrh	r3, [r3, #0]
   10a58:	b29a      	uxth	r2, r3
   10a5a:	f24a 73ec 	movw	r3, #42988	; 0xa7ec
   10a5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a62:	801a      	strh	r2, [r3, #0]
    desired_pitch = climb_pitch_pgain * (err + climb_pitch_igain * climb_pitch_sum_err);
   10a64:	f240 132c 	movw	r3, #300	; 0x12c
   10a68:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a6c:	681a      	ldr	r2, [r3, #0]
   10a6e:	f64a 030c 	movw	r3, #43020	; 0xa80c
   10a72:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a76:	681b      	ldr	r3, [r3, #0]
   10a78:	4610      	mov	r0, r2
   10a7a:	4619      	mov	r1, r3
   10a7c:	f006 f970 	bl	16d60 <__aeabi_fmul>
   10a80:	4603      	mov	r3, r0
   10a82:	4618      	mov	r0, r3
   10a84:	6879      	ldr	r1, [r7, #4]
   10a86:	f006 f863 	bl	16b50 <__addsf3>
   10a8a:	4603      	mov	r3, r0
   10a8c:	461a      	mov	r2, r3
   10a8e:	f240 1328 	movw	r3, #296	; 0x128
   10a92:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a96:	681b      	ldr	r3, [r3, #0]
   10a98:	4610      	mov	r0, r2
   10a9a:	4619      	mov	r1, r3
   10a9c:	f006 f960 	bl	16d60 <__aeabi_fmul>
   10aa0:	4603      	mov	r3, r0
   10aa2:	461a      	mov	r2, r3
   10aa4:	f24a 73e8 	movw	r3, #42984	; 0xa7e8
   10aa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10aac:	601a      	str	r2, [r3, #0]
    if (desired_pitch > max_pitch)
   10aae:	f24a 73e8 	movw	r3, #42984	; 0xa7e8
   10ab2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ab6:	681a      	ldr	r2, [r3, #0]
   10ab8:	f240 1330 	movw	r3, #304	; 0x130
   10abc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ac0:	681b      	ldr	r3, [r3, #0]
   10ac2:	4610      	mov	r0, r2
   10ac4:	4619      	mov	r1, r3
   10ac6:	f006 fb07 	bl	170d8 <__aeabi_fcmpgt>
   10aca:	4603      	mov	r3, r0
   10acc:	2b00      	cmp	r3, #0
   10ace:	d009      	beq.n	10ae4 <climb_pid_run+0xcc>
      desired_pitch = max_pitch;
   10ad0:	f240 1330 	movw	r3, #304	; 0x130
   10ad4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ad8:	681a      	ldr	r2, [r3, #0]
   10ada:	f24a 73e8 	movw	r3, #42984	; 0xa7e8
   10ade:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ae2:	601a      	str	r2, [r3, #0]
    if (desired_pitch < min_pitch)
   10ae4:	f24a 73e8 	movw	r3, #42984	; 0xa7e8
   10ae8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10aec:	681a      	ldr	r2, [r3, #0]
   10aee:	f240 1334 	movw	r3, #308	; 0x134
   10af2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10af6:	681b      	ldr	r3, [r3, #0]
   10af8:	4610      	mov	r0, r2
   10afa:	4619      	mov	r1, r3
   10afc:	f006 face 	bl	1709c <__aeabi_fcmplt>
   10b00:	4603      	mov	r3, r0
   10b02:	2b00      	cmp	r3, #0
   10b04:	d009      	beq.n	10b1a <climb_pid_run+0x102>
      desired_pitch = min_pitch;
   10b06:	f240 1334 	movw	r3, #308	; 0x134
   10b0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b0e:	681a      	ldr	r2, [r3, #0]
   10b10:	f24a 73e8 	movw	r3, #42984	; 0xa7e8
   10b14:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b18:	601a      	str	r2, [r3, #0]
    climb_pitch_sum_err += err;
   10b1a:	f64a 030c 	movw	r3, #43020	; 0xa80c
   10b1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b22:	681b      	ldr	r3, [r3, #0]
   10b24:	4618      	mov	r0, r3
   10b26:	6879      	ldr	r1, [r7, #4]
   10b28:	f006 f812 	bl	16b50 <__addsf3>
   10b2c:	4603      	mov	r3, r0
   10b2e:	461a      	mov	r2, r3
   10b30:	f64a 030c 	movw	r3, #43020	; 0xa80c
   10b34:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b38:	601a      	str	r2, [r3, #0]
    if (climb_pitch_sum_err > MAX_PITCH_CLIMB_SUM_ERR)
   10b3a:	f64a 030c 	movw	r3, #43020	; 0xa80c
   10b3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b42:	681b      	ldr	r3, [r3, #0]
   10b44:	4618      	mov	r0, r3
   10b46:	f04f 0100 	mov.w	r1, #0
   10b4a:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   10b4e:	f006 fac3 	bl	170d8 <__aeabi_fcmpgt>
   10b52:	4603      	mov	r3, r0
   10b54:	2b00      	cmp	r3, #0
   10b56:	d008      	beq.n	10b6a <climb_pid_run+0x152>
      climb_pitch_sum_err = MAX_PITCH_CLIMB_SUM_ERR;
   10b58:	f64a 030c 	movw	r3, #43020	; 0xa80c
   10b5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b60:	f04f 0200 	mov.w	r2, #0
   10b64:	f2c4 22c8 	movt	r2, #17096	; 0x42c8
   10b68:	601a      	str	r2, [r3, #0]
    if (climb_pitch_sum_err < - MAX_PITCH_CLIMB_SUM_ERR)
   10b6a:	f64a 030c 	movw	r3, #43020	; 0xa80c
   10b6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b72:	681b      	ldr	r3, [r3, #0]
   10b74:	4618      	mov	r0, r3
   10b76:	f04f 0100 	mov.w	r1, #0
   10b7a:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   10b7e:	f006 fa8d 	bl	1709c <__aeabi_fcmplt>
   10b82:	4603      	mov	r3, r0
   10b84:	2b00      	cmp	r3, #0
   10b86:	d100      	bne.n	10b8a <climb_pid_run+0x172>
   10b88:	e109      	b.n	10d9e <climb_pid_run+0x386>
      climb_pitch_sum_err = - MAX_PITCH_CLIMB_SUM_ERR; 
   10b8a:	f64a 030c 	movw	r3, #43020	; 0xa80c
   10b8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b92:	f04f 0200 	mov.w	r2, #0
   10b96:	f2cc 22c8 	movt	r2, #49864	; 0xc2c8
   10b9a:	601a      	str	r2, [r3, #0]
   10b9c:	e0ff      	b.n	10d9e <climb_pid_run+0x386>
  } else { /* pitch almost constant */
    /* pitch offset for climb */
    pitch_of_vz = (desired_climb > 0) ? desired_climb * pitch_of_vz_pgain : 0.;
   10b9e:	f64a 0300 	movw	r3, #43008	; 0xa800
   10ba2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ba6:	681b      	ldr	r3, [r3, #0]
   10ba8:	4618      	mov	r0, r3
   10baa:	f04f 0100 	mov.w	r1, #0
   10bae:	f006 fa93 	bl	170d8 <__aeabi_fcmpgt>
   10bb2:	4603      	mov	r3, r0
   10bb4:	2b00      	cmp	r3, #0
   10bb6:	d010      	beq.n	10bda <climb_pid_run+0x1c2>
   10bb8:	f64a 0300 	movw	r3, #43008	; 0xa800
   10bbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10bc0:	681a      	ldr	r2, [r3, #0]
   10bc2:	f240 131c 	movw	r3, #284	; 0x11c
   10bc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10bca:	681b      	ldr	r3, [r3, #0]
   10bcc:	4610      	mov	r0, r2
   10bce:	4619      	mov	r1, r3
   10bd0:	f006 f8c6 	bl	16d60 <__aeabi_fmul>
   10bd4:	4603      	mov	r3, r0
   10bd6:	461a      	mov	r2, r3
   10bd8:	e001      	b.n	10bde <climb_pid_run+0x1c6>
   10bda:	f04f 0200 	mov.w	r2, #0
   10bde:	f24a 73f8 	movw	r3, #43000	; 0xa7f8
   10be2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10be6:	601a      	str	r2, [r3, #0]
    fgaz = climb_pgain * (err + climb_igain * climb_sum_err) + CLIMB_LEVEL_GAZ + CLIMB_GAZ_OF_CLIMB*desired_climb;
   10be8:	f64c 42cd 	movw	r2, #52429	; 0xcccd
   10bec:	f6c3 52cc 	movt	r2, #15820	; 0x3dcc
   10bf0:	f64a 0308 	movw	r3, #43016	; 0xa808
   10bf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10bf8:	681b      	ldr	r3, [r3, #0]
   10bfa:	4610      	mov	r0, r2
   10bfc:	4619      	mov	r1, r3
   10bfe:	f006 f8af 	bl	16d60 <__aeabi_fmul>
   10c02:	4603      	mov	r3, r0
   10c04:	4618      	mov	r0, r3
   10c06:	6879      	ldr	r1, [r7, #4]
   10c08:	f005 ffa2 	bl	16b50 <__addsf3>
   10c0c:	4603      	mov	r3, r0
   10c0e:	461a      	mov	r2, r3
   10c10:	f24c 238f 	movw	r3, #49807	; 0xc28f
   10c14:	f6cb 43f5 	movt	r3, #48373	; 0xbcf5
   10c18:	4610      	mov	r0, r2
   10c1a:	4619      	mov	r1, r3
   10c1c:	f006 f8a0 	bl	16d60 <__aeabi_fmul>
   10c20:	4603      	mov	r3, r0
   10c22:	4618      	mov	r0, r3
   10c24:	f005 fc08 	bl	16438 <__aeabi_f2d>
   10c28:	4602      	mov	r2, r0
   10c2a:	460b      	mov	r3, r1
   10c2c:	4610      	mov	r0, r2
   10c2e:	4619      	mov	r1, r3
   10c30:	a35d      	add	r3, pc, #372	; (adr r3, 10da8 <climb_pid_run+0x390>)
   10c32:	e9d3 2300 	ldrd	r2, r3, [r3]
   10c36:	f005 faa1 	bl	1617c <__adddf3>
   10c3a:	4602      	mov	r2, r0
   10c3c:	460b      	mov	r3, r1
   10c3e:	4614      	mov	r4, r2
   10c40:	461d      	mov	r5, r3
   10c42:	f64a 0300 	movw	r3, #43008	; 0xa800
   10c46:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c4a:	681b      	ldr	r3, [r3, #0]
   10c4c:	4618      	mov	r0, r3
   10c4e:	f005 fbf3 	bl	16438 <__aeabi_f2d>
   10c52:	4602      	mov	r2, r0
   10c54:	460b      	mov	r3, r1
   10c56:	4610      	mov	r0, r2
   10c58:	4619      	mov	r1, r3
   10c5a:	a355      	add	r3, pc, #340	; (adr r3, 10db0 <climb_pid_run+0x398>)
   10c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
   10c60:	f005 fc3e 	bl	164e0 <__aeabi_dmul>
   10c64:	4602      	mov	r2, r0
   10c66:	460b      	mov	r3, r1
   10c68:	4620      	mov	r0, r4
   10c6a:	4629      	mov	r1, r5
   10c6c:	f005 fa86 	bl	1617c <__adddf3>
   10c70:	4602      	mov	r2, r0
   10c72:	460b      	mov	r3, r1
   10c74:	4610      	mov	r0, r2
   10c76:	4619      	mov	r1, r3
   10c78:	f005 ff14 	bl	16aa4 <__aeabi_d2f>
   10c7c:	4603      	mov	r3, r0
   10c7e:	603b      	str	r3, [r7, #0]
    climb_sum_err += err;
   10c80:	f64a 0308 	movw	r3, #43016	; 0xa808
   10c84:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c88:	681b      	ldr	r3, [r3, #0]
   10c8a:	4618      	mov	r0, r3
   10c8c:	6879      	ldr	r1, [r7, #4]
   10c8e:	f005 ff5f 	bl	16b50 <__addsf3>
   10c92:	4603      	mov	r3, r0
   10c94:	461a      	mov	r2, r3
   10c96:	f64a 0308 	movw	r3, #43016	; 0xa808
   10c9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c9e:	601a      	str	r2, [r3, #0]
    if (climb_sum_err > MAX_CLIMB_SUM_ERR) climb_sum_err = MAX_CLIMB_SUM_ERR;
   10ca0:	f64a 0308 	movw	r3, #43016	; 0xa808
   10ca4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ca8:	681b      	ldr	r3, [r3, #0]
   10caa:	4618      	mov	r0, r3
   10cac:	f04f 0100 	mov.w	r1, #0
   10cb0:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   10cb4:	f006 fa10 	bl	170d8 <__aeabi_fcmpgt>
   10cb8:	4603      	mov	r3, r0
   10cba:	2b00      	cmp	r3, #0
   10cbc:	d008      	beq.n	10cd0 <climb_pid_run+0x2b8>
   10cbe:	f64a 0308 	movw	r3, #43016	; 0xa808
   10cc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10cc6:	f04f 0200 	mov.w	r2, #0
   10cca:	f2c4 22c8 	movt	r2, #17096	; 0x42c8
   10cce:	601a      	str	r2, [r3, #0]
    if (climb_sum_err < - MAX_CLIMB_SUM_ERR) climb_sum_err = - MAX_CLIMB_SUM_ERR;
   10cd0:	f64a 0308 	movw	r3, #43016	; 0xa808
   10cd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10cd8:	681b      	ldr	r3, [r3, #0]
   10cda:	4618      	mov	r0, r3
   10cdc:	f04f 0100 	mov.w	r1, #0
   10ce0:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   10ce4:	f006 f9da 	bl	1709c <__aeabi_fcmplt>
   10ce8:	4603      	mov	r3, r0
   10cea:	2b00      	cmp	r3, #0
   10cec:	d008      	beq.n	10d00 <climb_pid_run+0x2e8>
   10cee:	f64a 0308 	movw	r3, #43016	; 0xa808
   10cf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10cf6:	f04f 0200 	mov.w	r2, #0
   10cfa:	f2cc 22c8 	movt	r2, #49864	; 0xc2c8
   10cfe:	601a      	str	r2, [r3, #0]
    desired_gaz = TRIM_UPPRZ(fgaz * MAX_PPRZ);
   10d00:	6838      	ldr	r0, [r7, #0]
   10d02:	f04f 0100 	mov.w	r1, #0
   10d06:	f2c4 6116 	movt	r1, #17942	; 0x4616
   10d0a:	f006 f829 	bl	16d60 <__aeabi_fmul>
   10d0e:	4603      	mov	r3, r0
   10d10:	4618      	mov	r0, r3
   10d12:	f04f 0100 	mov.w	r1, #0
   10d16:	f006 f9c1 	bl	1709c <__aeabi_fcmplt>
   10d1a:	4603      	mov	r3, r0
   10d1c:	2b00      	cmp	r3, #0
   10d1e:	d001      	beq.n	10d24 <climb_pid_run+0x30c>
   10d20:	2200      	movs	r2, #0
   10d22:	e022      	b.n	10d6a <climb_pid_run+0x352>
   10d24:	6838      	ldr	r0, [r7, #0]
   10d26:	f04f 0100 	mov.w	r1, #0
   10d2a:	f2c4 6116 	movt	r1, #17942	; 0x4616
   10d2e:	f006 f817 	bl	16d60 <__aeabi_fmul>
   10d32:	4603      	mov	r3, r0
   10d34:	4618      	mov	r0, r3
   10d36:	f04f 0100 	mov.w	r1, #0
   10d3a:	f2c4 6116 	movt	r1, #17942	; 0x4616
   10d3e:	f006 f9cb 	bl	170d8 <__aeabi_fcmpgt>
   10d42:	4603      	mov	r3, r0
   10d44:	2b00      	cmp	r3, #0
   10d46:	d002      	beq.n	10d4e <climb_pid_run+0x336>
   10d48:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   10d4c:	e00c      	b.n	10d68 <climb_pid_run+0x350>
   10d4e:	6838      	ldr	r0, [r7, #0]
   10d50:	f04f 0100 	mov.w	r1, #0
   10d54:	f2c4 6116 	movt	r1, #17942	; 0x4616
   10d58:	f006 f802 	bl	16d60 <__aeabi_fmul>
   10d5c:	4603      	mov	r3, r0
   10d5e:	4618      	mov	r0, r3
   10d60:	f006 f9c4 	bl	170ec <__aeabi_f2iz>
   10d64:	4603      	mov	r3, r0
   10d66:	b29b      	uxth	r3, r3
   10d68:	b29a      	uxth	r2, r3
   10d6a:	f24a 73ec 	movw	r3, #42988	; 0xa7ec
   10d6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d72:	801a      	strh	r2, [r3, #0]
    desired_pitch = nav_pitch + pitch_of_vz;
   10d74:	f64a 033c 	movw	r3, #43068	; 0xa83c
   10d78:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d7c:	681a      	ldr	r2, [r3, #0]
   10d7e:	f24a 73f8 	movw	r3, #43000	; 0xa7f8
   10d82:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d86:	681b      	ldr	r3, [r3, #0]
   10d88:	4610      	mov	r0, r2
   10d8a:	4619      	mov	r1, r3
   10d8c:	f005 fee0 	bl	16b50 <__addsf3>
   10d90:	4603      	mov	r3, r0
   10d92:	461a      	mov	r2, r3
   10d94:	f24a 73e8 	movw	r3, #42984	; 0xa7e8
   10d98:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d9c:	601a      	str	r2, [r3, #0]
  }
}
   10d9e:	3708      	adds	r7, #8
   10da0:	46bd      	mov	sp, r7
   10da2:	bdb0      	pop	{r4, r5, r7, pc}
   10da4:	f3af 8000 	nop.w
   10da8:	3d70a3d7 	.word	0x3d70a3d7
   10dac:	3fd3d70a 	.word	0x3fd3d70a
   10db0:	9999999a 	.word	0x9999999a
   10db4:	3fc99999 	.word	0x3fc99999

00010db8 <altitude_pid_run>:

float altitude_pgain = ALTITUDE_PGAIN;


void altitude_pid_run(void) {
   10db8:	b580      	push	{r7, lr}
   10dba:	b082      	sub	sp, #8
   10dbc:	af00      	add	r7, sp, #0
  float err = estimator_z - desired_altitude;
   10dbe:	f64a 2374 	movw	r3, #43636	; 0xaa74
   10dc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10dc6:	681a      	ldr	r2, [r3, #0]
   10dc8:	f240 133c 	movw	r3, #316	; 0x13c
   10dcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10dd0:	681b      	ldr	r3, [r3, #0]
   10dd2:	4610      	mov	r0, r2
   10dd4:	4619      	mov	r1, r3
   10dd6:	f005 feb9 	bl	16b4c <__aeabi_fsub>
   10dda:	4603      	mov	r3, r0
   10ddc:	607b      	str	r3, [r7, #4]
  desired_climb = pre_climb + altitude_pgain * err;
   10dde:	f240 1338 	movw	r3, #312	; 0x138
   10de2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10de6:	681b      	ldr	r3, [r3, #0]
   10de8:	4618      	mov	r0, r3
   10dea:	6879      	ldr	r1, [r7, #4]
   10dec:	f005 ffb8 	bl	16d60 <__aeabi_fmul>
   10df0:	4603      	mov	r3, r0
   10df2:	461a      	mov	r2, r3
   10df4:	f64a 0304 	movw	r3, #43012	; 0xa804
   10df8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10dfc:	681b      	ldr	r3, [r3, #0]
   10dfe:	4610      	mov	r0, r2
   10e00:	4619      	mov	r1, r3
   10e02:	f005 fea5 	bl	16b50 <__addsf3>
   10e06:	4603      	mov	r3, r0
   10e08:	461a      	mov	r2, r3
   10e0a:	f64a 0300 	movw	r3, #43008	; 0xa800
   10e0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e12:	601a      	str	r2, [r3, #0]
  if (desired_climb < -CLIMB_MAX) desired_climb = -CLIMB_MAX;
   10e14:	f64a 0300 	movw	r3, #43008	; 0xa800
   10e18:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e1c:	681b      	ldr	r3, [r3, #0]
   10e1e:	4618      	mov	r0, r3
   10e20:	f04f 0100 	mov.w	r1, #0
   10e24:	f6cb 7180 	movt	r1, #49024	; 0xbf80
   10e28:	f006 f938 	bl	1709c <__aeabi_fcmplt>
   10e2c:	4603      	mov	r3, r0
   10e2e:	2b00      	cmp	r3, #0
   10e30:	d008      	beq.n	10e44 <altitude_pid_run+0x8c>
   10e32:	f64a 0300 	movw	r3, #43008	; 0xa800
   10e36:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e3a:	f04f 0200 	mov.w	r2, #0
   10e3e:	f6cb 7280 	movt	r2, #49024	; 0xbf80
   10e42:	601a      	str	r2, [r3, #0]
  if (desired_climb > CLIMB_MAX) desired_climb = CLIMB_MAX;
   10e44:	f64a 0300 	movw	r3, #43008	; 0xa800
   10e48:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e4c:	681b      	ldr	r3, [r3, #0]
   10e4e:	4618      	mov	r0, r3
   10e50:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   10e54:	f006 f940 	bl	170d8 <__aeabi_fcmpgt>
   10e58:	4603      	mov	r3, r0
   10e5a:	2b00      	cmp	r3, #0
   10e5c:	d006      	beq.n	10e6c <altitude_pid_run+0xb4>
   10e5e:	f64a 0300 	movw	r3, #43008	; 0xa800
   10e62:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e66:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   10e6a:	601a      	str	r2, [r3, #0]
}
   10e6c:	3708      	adds	r7, #8
   10e6e:	46bd      	mov	sp, r7
   10e70:	bd80      	pop	{r7, pc}
   10e72:	bf00      	nop
   10e74:	f3af 8000 	nop.w

00010e78 <auto_nav>:
#define GROUND_ALT 125.
#define SECURITY_ALT 150.
#define MAX_DIST_FROM_HOME 500.
#ifdef NAV_C

static inline void auto_nav(void) {
   10e78:	b5f0      	push	{r4, r5, r6, r7, lr}
   10e7a:	b08b      	sub	sp, #44	; 0x2c
   10e7c:	af00      	add	r7, sp, #0
        NextBlock()
    }

}
#else*/
if(nav_block == 0)
   10e7e:	f64a 0311 	movw	r3, #43025	; 0xa811
   10e82:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e86:	781b      	ldrb	r3, [r3, #0]
   10e88:	2b00      	cmp	r3, #0
   10e8a:	f040 8169 	bne.w	11160 <auto_nav+0x2e8>
{ // init
    
    if (nav_stage == 0) 
   10e8e:	f64a 0310 	movw	r3, #43024	; 0xa810
   10e92:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e96:	781b      	ldrb	r3, [r3, #0]
   10e98:	2b00      	cmp	r3, #0
   10e9a:	d13c      	bne.n	10f16 <auto_nav+0x9e>
    {
	Label(while_1)
	nav_stage=0;
   10e9c:	f64a 0310 	movw	r3, #43024	; 0xa810
   10ea0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ea4:	2200      	movs	r2, #0
   10ea6:	701a      	strb	r2, [r3, #0]
	if (! (!(estimator_flight_time))) Goto(endwhile_2) 
   10ea8:	f64a 239c 	movw	r3, #43676	; 0xaa9c
   10eac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10eb0:	881b      	ldrh	r3, [r3, #0]
   10eb2:	2b00      	cmp	r3, #0
   10eb4:	d000      	beq.n	10eb8 <auto_nav+0x40>
   10eb6:	e03d      	b.n	10f34 <auto_nav+0xbc>
	else NextStage(); 
   10eb8:	f64a 0310 	movw	r3, #43024	; 0xa810
   10ebc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ec0:	781b      	ldrb	r3, [r3, #0]
   10ec2:	3301      	adds	r3, #1
   10ec4:	b2da      	uxtb	r2, r3
   10ec6:	f64a 0310 	movw	r3, #43024	; 0xa810
   10eca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ece:	701a      	strb	r2, [r3, #0]
   10ed0:	f64a 236c 	movw	r3, #43628	; 0xaa6c
   10ed4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ed8:	681a      	ldr	r2, [r3, #0]
   10eda:	f64a 0314 	movw	r3, #43028	; 0xa814
   10ede:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ee2:	601a      	str	r2, [r3, #0]
   10ee4:	f64a 2370 	movw	r3, #43632	; 0xaa70
   10ee8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10eec:	681a      	ldr	r2, [r3, #0]
   10eee:	f64a 0318 	movw	r3, #43032	; 0xa818
   10ef2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ef6:	601a      	str	r2, [r3, #0]
   10ef8:	f64a 0324 	movw	r3, #43044	; 0xa824
   10efc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f00:	2200      	movs	r2, #0
   10f02:	801a      	strh	r2, [r3, #0]
   10f04:	f64a 0328 	movw	r3, #43048	; 0xa828
   10f08:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f0c:	f04f 0200 	mov.w	r2, #0
   10f10:	601a      	str	r2, [r3, #0]
   10f12:	f002 b883 	b.w	1301c <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   10f16:	f64a 0310 	movw	r3, #43024	; 0xa810
   10f1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f1e:	781b      	ldrb	r3, [r3, #0]
   10f20:	2b01      	cmp	r3, #1
   10f22:	d100      	bne.n	10f26 <auto_nav+0xae>
    {   Goto(while_1)}
   10f24:	e7ba      	b.n	10e9c <auto_nav+0x24>
    else if (nav_stage == 2)
   10f26:	f64a 0310 	movw	r3, #43024	; 0xa810
   10f2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f2e:	781b      	ldrb	r3, [r3, #0]
   10f30:	2b02      	cmp	r3, #2
   10f32:	d162      	bne.n	10ffa <auto_nav+0x182>
    {
	Label(endwhile_2)
	nav_stage = 2;
   10f34:	f64a 0310 	movw	r3, #43024	; 0xa810
   10f38:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f3c:	2202      	movs	r2, #2
   10f3e:	701a      	strb	r2, [r3, #0]
        if ((estimator_flight_time>8)) NextStage() else {
   10f40:	f64a 239c 	movw	r3, #43676	; 0xaa9c
   10f44:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f48:	881b      	ldrh	r3, [r3, #0]
   10f4a:	2b08      	cmp	r3, #8
   10f4c:	d92e      	bls.n	10fac <auto_nav+0x134>
   10f4e:	f64a 0310 	movw	r3, #43024	; 0xa810
   10f52:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f56:	781b      	ldrb	r3, [r3, #0]
   10f58:	3301      	adds	r3, #1
   10f5a:	b2da      	uxtb	r2, r3
   10f5c:	f64a 0310 	movw	r3, #43024	; 0xa810
   10f60:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f64:	701a      	strb	r2, [r3, #0]
   10f66:	f64a 236c 	movw	r3, #43628	; 0xaa6c
   10f6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f6e:	681a      	ldr	r2, [r3, #0]
   10f70:	f64a 0314 	movw	r3, #43028	; 0xa814
   10f74:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f78:	601a      	str	r2, [r3, #0]
   10f7a:	f64a 2370 	movw	r3, #43632	; 0xaa70
   10f7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f82:	681a      	ldr	r2, [r3, #0]
   10f84:	f64a 0318 	movw	r3, #43032	; 0xa818
   10f88:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f8c:	601a      	str	r2, [r3, #0]
   10f8e:	f64a 0324 	movw	r3, #43044	; 0xa824
   10f92:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f96:	2200      	movs	r2, #0
   10f98:	801a      	strh	r2, [r3, #0]
   10f9a:	f64a 0328 	movw	r3, #43048	; 0xa828
   10f9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fa2:	f04f 0200 	mov.w	r2, #0
   10fa6:	601a      	str	r2, [r3, #0]
   10fa8:	f002 b838 	b.w	1301c <auto_nav+0x21a4>
          desired_course = RadOfDeg(QFU);
   10fac:	f24a 73fc 	movw	r3, #43004	; 0xa7fc
   10fb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fb4:	f64c 32e4 	movw	r2, #52196	; 0xcbe4
   10fb8:	f2c4 0296 	movt	r2, #16534	; 0x4096
   10fbc:	601a      	str	r2, [r3, #0]
          auto_pitch = FALSE;
   10fbe:	f24a 439f 	movw	r3, #42143	; 0xa49f
   10fc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fc6:	2200      	movs	r2, #0
   10fc8:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.150000;
   10fca:	f64a 033c 	movw	r3, #43068	; 0xa83c
   10fce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fd2:	f649 129a 	movw	r2, #39322	; 0x999a
   10fd6:	f6c3 6219 	movt	r2, #15897	; 0x3e19
   10fda:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_GAZ;
   10fdc:	f24a 439d 	movw	r3, #42141	; 0xa49d
   10fe0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fe4:	2201      	movs	r2, #1
   10fe6:	701a      	strb	r2, [r3, #0]
          nav_desired_gaz = TRIM_UPPRZ(0.800000*MAX_PPRZ);
   10fe8:	f64a 0338 	movw	r3, #43064	; 0xa838
   10fec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ff0:	f44f 52f0 	mov.w	r2, #7680	; 0x1e00
   10ff4:	801a      	strh	r2, [r3, #0]
        }
        return;
   10ff6:	f002 b811 	b.w	1301c <auto_nav+0x21a4>
     }
     else if (nav_stage == 3)
   10ffa:	f64a 0310 	movw	r3, #43024	; 0xa810
   10ffe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11002:	781b      	ldrb	r3, [r3, #0]
   11004:	2b03      	cmp	r3, #3
   11006:	d168      	bne.n	110da <auto_nav+0x262>
     {
	nav_stage = 3;	
   11008:	f64a 0310 	movw	r3, #43024	; 0xa810
   1100c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11010:	2203      	movs	r2, #3
   11012:	701a      	strb	r2, [r3, #0]
        if ((estimator_z>SECURITY_ALT)) NextStage() else {
   11014:	f64a 2374 	movw	r3, #43636	; 0xaa74
   11018:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1101c:	681b      	ldr	r3, [r3, #0]
   1101e:	4618      	mov	r0, r3
   11020:	f04f 0100 	mov.w	r1, #0
   11024:	f2c4 3116 	movt	r1, #17174	; 0x4316
   11028:	f006 f856 	bl	170d8 <__aeabi_fcmpgt>
   1102c:	4603      	mov	r3, r0
   1102e:	2b00      	cmp	r3, #0
   11030:	d02e      	beq.n	11090 <auto_nav+0x218>
   11032:	f64a 0310 	movw	r3, #43024	; 0xa810
   11036:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1103a:	781b      	ldrb	r3, [r3, #0]
   1103c:	3301      	adds	r3, #1
   1103e:	b2da      	uxtb	r2, r3
   11040:	f64a 0310 	movw	r3, #43024	; 0xa810
   11044:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11048:	701a      	strb	r2, [r3, #0]
   1104a:	f64a 236c 	movw	r3, #43628	; 0xaa6c
   1104e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11052:	681a      	ldr	r2, [r3, #0]
   11054:	f64a 0314 	movw	r3, #43028	; 0xa814
   11058:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1105c:	601a      	str	r2, [r3, #0]
   1105e:	f64a 2370 	movw	r3, #43632	; 0xaa70
   11062:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11066:	681a      	ldr	r2, [r3, #0]
   11068:	f64a 0318 	movw	r3, #43032	; 0xa818
   1106c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11070:	601a      	str	r2, [r3, #0]
   11072:	f64a 0324 	movw	r3, #43044	; 0xa824
   11076:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1107a:	2200      	movs	r2, #0
   1107c:	801a      	strh	r2, [r3, #0]
   1107e:	f64a 0328 	movw	r3, #43048	; 0xa828
   11082:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11086:	f04f 0200 	mov.w	r2, #0
   1108a:	601a      	str	r2, [r3, #0]
   1108c:	f001 bfc6 	b.w	1301c <auto_nav+0x21a4>
          desired_course = RadOfDeg(QFU);
   11090:	f24a 73fc 	movw	r3, #43004	; 0xa7fc
   11094:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11098:	f64c 32e4 	movw	r2, #52196	; 0xcbe4
   1109c:	f2c4 0296 	movt	r2, #16534	; 0x4096
   110a0:	601a      	str	r2, [r3, #0]
          auto_pitch = FALSE;
   110a2:	f24a 439f 	movw	r3, #42143	; 0xa49f
   110a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110aa:	2200      	movs	r2, #0
   110ac:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.000000;
   110ae:	f64a 033c 	movw	r3, #43068	; 0xa83c
   110b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110b6:	f04f 0200 	mov.w	r2, #0
   110ba:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_CLIMB;
   110bc:	f24a 439d 	movw	r3, #42141	; 0xa49d
   110c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110c4:	2202      	movs	r2, #2
   110c6:	701a      	strb	r2, [r3, #0]
          desired_climb = 8.000000;
   110c8:	f64a 0300 	movw	r3, #43008	; 0xa800
   110cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110d0:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   110d4:	601a      	str	r2, [r3, #0]
        }
        return;
   110d6:	f001 bfa1 	b.w	1301c <auto_nav+0x21a4>
     }
     else if (nav_stage == 4)
   110da:	f64a 0310 	movw	r3, #43024	; 0xa810
   110de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110e2:	781b      	ldrb	r3, [r3, #0]
   110e4:	2b04      	cmp	r3, #4
   110e6:	f041 8799 	bne.w	1301c <auto_nav+0x21a4>
        NextBlock()
   110ea:	f64a 0311 	movw	r3, #43025	; 0xa811
   110ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110f2:	781b      	ldrb	r3, [r3, #0]
   110f4:	3301      	adds	r3, #1
   110f6:	b2da      	uxtb	r2, r3
   110f8:	f64a 0311 	movw	r3, #43025	; 0xa811
   110fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11100:	701a      	strb	r2, [r3, #0]
   11102:	f64a 0310 	movw	r3, #43024	; 0xa810
   11106:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1110a:	2200      	movs	r2, #0
   1110c:	701a      	strb	r2, [r3, #0]
   1110e:	f64a 0326 	movw	r3, #43046	; 0xa826
   11112:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11116:	2200      	movs	r2, #0
   11118:	801a      	strh	r2, [r3, #0]
   1111a:	f64a 236c 	movw	r3, #43628	; 0xaa6c
   1111e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11122:	681a      	ldr	r2, [r3, #0]
   11124:	f64a 0314 	movw	r3, #43028	; 0xa814
   11128:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1112c:	601a      	str	r2, [r3, #0]
   1112e:	f64a 2370 	movw	r3, #43632	; 0xaa70
   11132:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11136:	681a      	ldr	r2, [r3, #0]
   11138:	f64a 0318 	movw	r3, #43032	; 0xa818
   1113c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11140:	601a      	str	r2, [r3, #0]
   11142:	f64a 0324 	movw	r3, #43044	; 0xa824
   11146:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1114a:	2200      	movs	r2, #0
   1114c:	801a      	strh	r2, [r3, #0]
   1114e:	f64a 0328 	movw	r3, #43048	; 0xa828
   11152:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11156:	f04f 0200 	mov.w	r2, #0
   1115a:	601a      	str	r2, [r3, #0]
   1115c:	f001 bf5e 	b.w	1301c <auto_nav+0x21a4>
     else { }
}
else if (nav_block == 1) // two
   11160:	f64a 0311 	movw	r3, #43025	; 0xa811
   11164:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11168:	781b      	ldrb	r3, [r3, #0]
   1116a:	2b01      	cmp	r3, #1
   1116c:	f040 81bc 	bne.w	114e8 <auto_nav+0x670>
{
    nav_block = 1;
   11170:	f64a 0311 	movw	r3, #43025	; 0xa811
   11174:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11178:	2201      	movs	r2, #1
   1117a:	701a      	strb	r2, [r3, #0]
    if RcEvent1() 
   1117c:	f24a 43a0 	movw	r3, #42144	; 0xa4a0
   11180:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11184:	781b      	ldrb	r3, [r3, #0]
   11186:	2b00      	cmp	r3, #0
   11188:	d007      	beq.n	1119a <auto_nav+0x322>
   1118a:	f24a 43a0 	movw	r3, #42144	; 0xa4a0
   1118e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11192:	2200      	movs	r2, #0
   11194:	701a      	strb	r2, [r3, #0]
   11196:	2301      	movs	r3, #1
   11198:	e000      	b.n	1119c <auto_nav+0x324>
   1119a:	2300      	movs	r3, #0
   1119c:	2b00      	cmp	r3, #0
   1119e:	d034      	beq.n	1120a <auto_nav+0x392>
	{ GotoBlock(2) }
   111a0:	f64a 0311 	movw	r3, #43025	; 0xa811
   111a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111a8:	2202      	movs	r2, #2
   111aa:	701a      	strb	r2, [r3, #0]
   111ac:	f64a 0310 	movw	r3, #43024	; 0xa810
   111b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111b4:	2200      	movs	r2, #0
   111b6:	701a      	strb	r2, [r3, #0]
   111b8:	f64a 0326 	movw	r3, #43046	; 0xa826
   111bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111c0:	2200      	movs	r2, #0
   111c2:	801a      	strh	r2, [r3, #0]
   111c4:	f64a 236c 	movw	r3, #43628	; 0xaa6c
   111c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111cc:	681a      	ldr	r2, [r3, #0]
   111ce:	f64a 0314 	movw	r3, #43028	; 0xa814
   111d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111d6:	601a      	str	r2, [r3, #0]
   111d8:	f64a 2370 	movw	r3, #43632	; 0xaa70
   111dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111e0:	681a      	ldr	r2, [r3, #0]
   111e2:	f64a 0318 	movw	r3, #43032	; 0xa818
   111e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111ea:	601a      	str	r2, [r3, #0]
   111ec:	f64a 0324 	movw	r3, #43044	; 0xa824
   111f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111f4:	2200      	movs	r2, #0
   111f6:	801a      	strh	r2, [r3, #0]
   111f8:	f64a 0328 	movw	r3, #43048	; 0xa828
   111fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11200:	f04f 0200 	mov.w	r2, #0
   11204:	601a      	str	r2, [r3, #0]
   11206:	f001 bf09 	b.w	1301c <auto_nav+0x21a4>
    if(nav_stage == 0)
   1120a:	f64a 0310 	movw	r3, #43024	; 0xa810
   1120e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11212:	781b      	ldrb	r3, [r3, #0]
   11214:	2b00      	cmp	r3, #0
   11216:	d12e      	bne.n	11276 <auto_nav+0x3fe>
    {
       Label(while_3)
       if (! (TRUE)) Goto(endwhile_4) else NextStage();
   11218:	f64a 0310 	movw	r3, #43024	; 0xa810
   1121c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11220:	781b      	ldrb	r3, [r3, #0]
   11222:	3301      	adds	r3, #1
   11224:	b2da      	uxtb	r2, r3
   11226:	f64a 0310 	movw	r3, #43024	; 0xa810
   1122a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1122e:	701a      	strb	r2, [r3, #0]
   11230:	f64a 236c 	movw	r3, #43628	; 0xaa6c
   11234:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11238:	681a      	ldr	r2, [r3, #0]
   1123a:	f64a 0314 	movw	r3, #43028	; 0xa814
   1123e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11242:	601a      	str	r2, [r3, #0]
   11244:	f64a 2370 	movw	r3, #43632	; 0xaa70
   11248:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1124c:	681a      	ldr	r2, [r3, #0]
   1124e:	f64a 0318 	movw	r3, #43032	; 0xa818
   11252:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11256:	601a      	str	r2, [r3, #0]
   11258:	f64a 0324 	movw	r3, #43044	; 0xa824
   1125c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11260:	2200      	movs	r2, #0
   11262:	801a      	strh	r2, [r3, #0]
   11264:	f64a 0328 	movw	r3, #43048	; 0xa828
   11268:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1126c:	f04f 0200 	mov.w	r2, #0
   11270:	601a      	str	r2, [r3, #0]
   11272:	f001 bed3 	b.w	1301c <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   11276:	f64a 0310 	movw	r3, #43024	; 0xa810
   1127a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1127e:	781b      	ldrb	r3, [r3, #0]
   11280:	2b01      	cmp	r3, #1
   11282:	d169      	bne.n	11358 <auto_nav+0x4e0>
    {
	  nav_stage = 1;
   11284:	f64a 0310 	movw	r3, #43024	; 0xa810
   11288:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1128c:	2201      	movs	r2, #1
   1128e:	701a      	strb	r2, [r3, #0]
          if (approaching(1)) NextStageFrom(1) else {
   11290:	2001      	movs	r0, #1
   11292:	f001 fed1 	bl	13038 <approaching>
   11296:	4603      	mov	r3, r0
   11298:	2b00      	cmp	r3, #0
   1129a:	d034      	beq.n	11306 <auto_nav+0x48e>
   1129c:	f64a 031c 	movw	r3, #43036	; 0xa81c
   112a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112a4:	2201      	movs	r2, #1
   112a6:	701a      	strb	r2, [r3, #0]
   112a8:	f64a 0310 	movw	r3, #43024	; 0xa810
   112ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112b0:	781b      	ldrb	r3, [r3, #0]
   112b2:	3301      	adds	r3, #1
   112b4:	b2da      	uxtb	r2, r3
   112b6:	f64a 0310 	movw	r3, #43024	; 0xa810
   112ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112be:	701a      	strb	r2, [r3, #0]
   112c0:	f64a 236c 	movw	r3, #43628	; 0xaa6c
   112c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112c8:	681a      	ldr	r2, [r3, #0]
   112ca:	f64a 0314 	movw	r3, #43028	; 0xa814
   112ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112d2:	601a      	str	r2, [r3, #0]
   112d4:	f64a 2370 	movw	r3, #43632	; 0xaa70
   112d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112dc:	681a      	ldr	r2, [r3, #0]
   112de:	f64a 0318 	movw	r3, #43032	; 0xa818
   112e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112e6:	601a      	str	r2, [r3, #0]
   112e8:	f64a 0324 	movw	r3, #43044	; 0xa824
   112ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112f0:	2200      	movs	r2, #0
   112f2:	801a      	strh	r2, [r3, #0]
   112f4:	f64a 0328 	movw	r3, #43048	; 0xa828
   112f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112fc:	f04f 0200 	mov.w	r2, #0
   11300:	601a      	str	r2, [r3, #0]
   11302:	f001 be8b 	b.w	1301c <auto_nav+0x21a4>
            fly_to(1);
   11306:	2001      	movs	r0, #1
   11308:	f001 ffca 	bl	132a0 <fly_to>
            auto_pitch = FALSE;
   1130c:	f24a 439f 	movw	r3, #42143	; 0xa49f
   11310:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11314:	2200      	movs	r2, #0
   11316:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   11318:	f64a 033c 	movw	r3, #43068	; 0xa83c
   1131c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11320:	f04f 0200 	mov.w	r2, #0
   11324:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   11326:	f24a 439d 	movw	r3, #42141	; 0xa49d
   1132a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1132e:	2203      	movs	r2, #3
   11330:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[1].a;
   11332:	f240 1340 	movw	r3, #320	; 0x140
   11336:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1133a:	695a      	ldr	r2, [r3, #20]
   1133c:	f240 133c 	movw	r3, #316	; 0x13c
   11340:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11344:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   11346:	f64a 0304 	movw	r3, #43012	; 0xa804
   1134a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1134e:	f04f 0200 	mov.w	r2, #0
   11352:	601a      	str	r2, [r3, #0]
          }
          return;
   11354:	f001 be62 	b.w	1301c <auto_nav+0x21a4>
     }
     else if (nav_stage == 2)
   11358:	f64a 0310 	movw	r3, #43024	; 0xa810
   1135c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11360:	781b      	ldrb	r3, [r3, #0]
   11362:	2b02      	cmp	r3, #2
   11364:	d169      	bne.n	1143a <auto_nav+0x5c2>
     {
	  nav_stage = 2;
   11366:	f64a 0310 	movw	r3, #43024	; 0xa810
   1136a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1136e:	2202      	movs	r2, #2
   11370:	701a      	strb	r2, [r3, #0]
          if (approaching(4)) NextStageFrom(4) else {
   11372:	2004      	movs	r0, #4
   11374:	f001 fe60 	bl	13038 <approaching>
   11378:	4603      	mov	r3, r0
   1137a:	2b00      	cmp	r3, #0
   1137c:	d034      	beq.n	113e8 <auto_nav+0x570>
   1137e:	f64a 031c 	movw	r3, #43036	; 0xa81c
   11382:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11386:	2204      	movs	r2, #4
   11388:	701a      	strb	r2, [r3, #0]
   1138a:	f64a 0310 	movw	r3, #43024	; 0xa810
   1138e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11392:	781b      	ldrb	r3, [r3, #0]
   11394:	3301      	adds	r3, #1
   11396:	b2da      	uxtb	r2, r3
   11398:	f64a 0310 	movw	r3, #43024	; 0xa810
   1139c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113a0:	701a      	strb	r2, [r3, #0]
   113a2:	f64a 236c 	movw	r3, #43628	; 0xaa6c
   113a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113aa:	681a      	ldr	r2, [r3, #0]
   113ac:	f64a 0314 	movw	r3, #43028	; 0xa814
   113b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113b4:	601a      	str	r2, [r3, #0]
   113b6:	f64a 2370 	movw	r3, #43632	; 0xaa70
   113ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113be:	681a      	ldr	r2, [r3, #0]
   113c0:	f64a 0318 	movw	r3, #43032	; 0xa818
   113c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113c8:	601a      	str	r2, [r3, #0]
   113ca:	f64a 0324 	movw	r3, #43044	; 0xa824
   113ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113d2:	2200      	movs	r2, #0
   113d4:	801a      	strh	r2, [r3, #0]
   113d6:	f64a 0328 	movw	r3, #43048	; 0xa828
   113da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113de:	f04f 0200 	mov.w	r2, #0
   113e2:	601a      	str	r2, [r3, #0]
   113e4:	f001 be1a 	b.w	1301c <auto_nav+0x21a4>
            fly_to(4);
   113e8:	2004      	movs	r0, #4
   113ea:	f001 ff59 	bl	132a0 <fly_to>
            auto_pitch = FALSE;
   113ee:	f24a 439f 	movw	r3, #42143	; 0xa49f
   113f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113f6:	2200      	movs	r2, #0
   113f8:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   113fa:	f64a 033c 	movw	r3, #43068	; 0xa83c
   113fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11402:	f04f 0200 	mov.w	r2, #0
   11406:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   11408:	f24a 439d 	movw	r3, #42141	; 0xa49d
   1140c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11410:	2203      	movs	r2, #3
   11412:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[4].a;
   11414:	f240 1340 	movw	r3, #320	; 0x140
   11418:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1141c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1141e:	f240 133c 	movw	r3, #316	; 0x13c
   11422:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11426:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   11428:	f64a 0304 	movw	r3, #43012	; 0xa804
   1142c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11430:	f04f 0200 	mov.w	r2, #0
   11434:	601a      	str	r2, [r3, #0]
          }
          return;
   11436:	f001 bdf1 	b.w	1301c <auto_nav+0x21a4>
      }
      else if (nav_stage == 3)
   1143a:	f64a 0310 	movw	r3, #43024	; 0xa810
   1143e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11442:	781b      	ldrb	r3, [r3, #0]
   11444:	2b03      	cmp	r3, #3
   11446:	d106      	bne.n	11456 <auto_nav+0x5de>
      {
	  nav_stage = 3;
   11448:	f64a 0310 	movw	r3, #43024	; 0xa810
   1144c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11450:	2203      	movs	r2, #3
   11452:	701a      	strb	r2, [r3, #0]
          Goto(while_3)
   11454:	e6e0      	b.n	11218 <auto_nav+0x3a0>
      }
      else if (nav_stage == 4)
   11456:	f64a 0310 	movw	r3, #43024	; 0xa810
   1145a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1145e:	781b      	ldrb	r3, [r3, #0]
   11460:	2b04      	cmp	r3, #4
   11462:	f041 85db 	bne.w	1301c <auto_nav+0x21a4>
      {
        Label(endwhile_4)
	nav_stage = 4;
   11466:	f64a 0310 	movw	r3, #43024	; 0xa810
   1146a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1146e:	2204      	movs	r2, #4
   11470:	701a      	strb	r2, [r3, #0]
        NextBlock()
   11472:	f64a 0311 	movw	r3, #43025	; 0xa811
   11476:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1147a:	781b      	ldrb	r3, [r3, #0]
   1147c:	3301      	adds	r3, #1
   1147e:	b2da      	uxtb	r2, r3
   11480:	f64a 0311 	movw	r3, #43025	; 0xa811
   11484:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11488:	701a      	strb	r2, [r3, #0]
   1148a:	f64a 0310 	movw	r3, #43024	; 0xa810
   1148e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11492:	2200      	movs	r2, #0
   11494:	701a      	strb	r2, [r3, #0]
   11496:	f64a 0326 	movw	r3, #43046	; 0xa826
   1149a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1149e:	2200      	movs	r2, #0
   114a0:	801a      	strh	r2, [r3, #0]
   114a2:	f64a 236c 	movw	r3, #43628	; 0xaa6c
   114a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114aa:	681a      	ldr	r2, [r3, #0]
   114ac:	f64a 0314 	movw	r3, #43028	; 0xa814
   114b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114b4:	601a      	str	r2, [r3, #0]
   114b6:	f64a 2370 	movw	r3, #43632	; 0xaa70
   114ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114be:	681a      	ldr	r2, [r3, #0]
   114c0:	f64a 0318 	movw	r3, #43032	; 0xa818
   114c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114c8:	601a      	str	r2, [r3, #0]
   114ca:	f64a 0324 	movw	r3, #43044	; 0xa824
   114ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114d2:	2200      	movs	r2, #0
   114d4:	801a      	strh	r2, [r3, #0]
   114d6:	f64a 0328 	movw	r3, #43048	; 0xa828
   114da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114de:	f04f 0200 	mov.w	r2, #0
   114e2:	601a      	str	r2, [r3, #0]
   114e4:	f001 bd9a 	b.w	1301c <auto_nav+0x21a4>
      }
      else { }
}
else if (nav_block == 2) // height
   114e8:	f64a 0311 	movw	r3, #43025	; 0xa811
   114ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114f0:	781b      	ldrb	r3, [r3, #0]
   114f2:	2b02      	cmp	r3, #2
   114f4:	f040 8392 	bne.w	11c1c <auto_nav+0xda4>
{
	nav_block = 2;
   114f8:	f64a 0311 	movw	r3, #43025	; 0xa811
   114fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11500:	2202      	movs	r2, #2
   11502:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(3) }
   11504:	f24a 43a0 	movw	r3, #42144	; 0xa4a0
   11508:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1150c:	781b      	ldrb	r3, [r3, #0]
   1150e:	2b00      	cmp	r3, #0
   11510:	d007      	beq.n	11522 <auto_nav+0x6aa>
   11512:	f24a 43a0 	movw	r3, #42144	; 0xa4a0
   11516:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1151a:	2200      	movs	r2, #0
   1151c:	701a      	strb	r2, [r3, #0]
   1151e:	2301      	movs	r3, #1
   11520:	e000      	b.n	11524 <auto_nav+0x6ac>
   11522:	2300      	movs	r3, #0
   11524:	2b00      	cmp	r3, #0
   11526:	d034      	beq.n	11592 <auto_nav+0x71a>
   11528:	f64a 0311 	movw	r3, #43025	; 0xa811
   1152c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11530:	2203      	movs	r2, #3
   11532:	701a      	strb	r2, [r3, #0]
   11534:	f64a 0310 	movw	r3, #43024	; 0xa810
   11538:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1153c:	2200      	movs	r2, #0
   1153e:	701a      	strb	r2, [r3, #0]
   11540:	f64a 0326 	movw	r3, #43046	; 0xa826
   11544:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11548:	2200      	movs	r2, #0
   1154a:	801a      	strh	r2, [r3, #0]
   1154c:	f64a 236c 	movw	r3, #43628	; 0xaa6c
   11550:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11554:	681a      	ldr	r2, [r3, #0]
   11556:	f64a 0314 	movw	r3, #43028	; 0xa814
   1155a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1155e:	601a      	str	r2, [r3, #0]
   11560:	f64a 2370 	movw	r3, #43632	; 0xaa70
   11564:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11568:	681a      	ldr	r2, [r3, #0]
   1156a:	f64a 0318 	movw	r3, #43032	; 0xa818
   1156e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11572:	601a      	str	r2, [r3, #0]
   11574:	f64a 0324 	movw	r3, #43044	; 0xa824
   11578:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1157c:	2200      	movs	r2, #0
   1157e:	801a      	strh	r2, [r3, #0]
   11580:	f64a 0328 	movw	r3, #43048	; 0xa828
   11584:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11588:	f04f 0200 	mov.w	r2, #0
   1158c:	601a      	str	r2, [r3, #0]
   1158e:	f001 bd45 	b.w	1301c <auto_nav+0x21a4>
    
    if(nav_stage == 0)
   11592:	f64a 0310 	movw	r3, #43024	; 0xa810
   11596:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1159a:	781b      	ldrb	r3, [r3, #0]
   1159c:	2b00      	cmp	r3, #0
   1159e:	d134      	bne.n	1160a <auto_nav+0x792>
    {
       Label(while_5)
       nav_stage = 0;
   115a0:	f64a 0310 	movw	r3, #43024	; 0xa810
   115a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115a8:	2200      	movs	r2, #0
   115aa:	701a      	strb	r2, [r3, #0]
       if (! (TRUE)) Goto(endwhile_6) else NextStage();
   115ac:	f64a 0310 	movw	r3, #43024	; 0xa810
   115b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115b4:	781b      	ldrb	r3, [r3, #0]
   115b6:	3301      	adds	r3, #1
   115b8:	b2da      	uxtb	r2, r3
   115ba:	f64a 0310 	movw	r3, #43024	; 0xa810
   115be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115c2:	701a      	strb	r2, [r3, #0]
   115c4:	f64a 236c 	movw	r3, #43628	; 0xaa6c
   115c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115cc:	681a      	ldr	r2, [r3, #0]
   115ce:	f64a 0314 	movw	r3, #43028	; 0xa814
   115d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115d6:	601a      	str	r2, [r3, #0]
   115d8:	f64a 2370 	movw	r3, #43632	; 0xaa70
   115dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115e0:	681a      	ldr	r2, [r3, #0]
   115e2:	f64a 0318 	movw	r3, #43032	; 0xa818
   115e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115ea:	601a      	str	r2, [r3, #0]
   115ec:	f64a 0324 	movw	r3, #43044	; 0xa824
   115f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115f4:	2200      	movs	r2, #0
   115f6:	801a      	strh	r2, [r3, #0]
   115f8:	f64a 0328 	movw	r3, #43048	; 0xa828
   115fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11600:	f04f 0200 	mov.w	r2, #0
   11604:	601a      	str	r2, [r3, #0]
   11606:	f001 bd09 	b.w	1301c <auto_nav+0x21a4>
    }
    else if(nav_stage == 1)
   1160a:	f64a 0310 	movw	r3, #43024	; 0xa810
   1160e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11612:	781b      	ldrb	r3, [r3, #0]
   11614:	2b01      	cmp	r3, #1
   11616:	d169      	bne.n	116ec <auto_nav+0x874>
    {
         nav_stage =1;
   11618:	f64a 0310 	movw	r3, #43024	; 0xa810
   1161c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11620:	2201      	movs	r2, #1
   11622:	701a      	strb	r2, [r3, #0]
          if (approaching(6)) NextStageFrom(6) else {
   11624:	2006      	movs	r0, #6
   11626:	f001 fd07 	bl	13038 <approaching>
   1162a:	4603      	mov	r3, r0
   1162c:	2b00      	cmp	r3, #0
   1162e:	d034      	beq.n	1169a <auto_nav+0x822>
   11630:	f64a 031c 	movw	r3, #43036	; 0xa81c
   11634:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11638:	2206      	movs	r2, #6
   1163a:	701a      	strb	r2, [r3, #0]
   1163c:	f64a 0310 	movw	r3, #43024	; 0xa810
   11640:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11644:	781b      	ldrb	r3, [r3, #0]
   11646:	3301      	adds	r3, #1
   11648:	b2da      	uxtb	r2, r3
   1164a:	f64a 0310 	movw	r3, #43024	; 0xa810
   1164e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11652:	701a      	strb	r2, [r3, #0]
   11654:	f64a 236c 	movw	r3, #43628	; 0xaa6c
   11658:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1165c:	681a      	ldr	r2, [r3, #0]
   1165e:	f64a 0314 	movw	r3, #43028	; 0xa814
   11662:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11666:	601a      	str	r2, [r3, #0]
   11668:	f64a 2370 	movw	r3, #43632	; 0xaa70
   1166c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11670:	681a      	ldr	r2, [r3, #0]
   11672:	f64a 0318 	movw	r3, #43032	; 0xa818
   11676:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1167a:	601a      	str	r2, [r3, #0]
   1167c:	f64a 0324 	movw	r3, #43044	; 0xa824
   11680:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11684:	2200      	movs	r2, #0
   11686:	801a      	strh	r2, [r3, #0]
   11688:	f64a 0328 	movw	r3, #43048	; 0xa828
   1168c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11690:	f04f 0200 	mov.w	r2, #0
   11694:	601a      	str	r2, [r3, #0]
   11696:	f001 bcc1 	b.w	1301c <auto_nav+0x21a4>
            fly_to(6);
   1169a:	2006      	movs	r0, #6
   1169c:	f001 fe00 	bl	132a0 <fly_to>
            auto_pitch = FALSE;
   116a0:	f24a 439f 	movw	r3, #42143	; 0xa49f
   116a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116a8:	2200      	movs	r2, #0
   116aa:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   116ac:	f64a 033c 	movw	r3, #43068	; 0xa83c
   116b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116b4:	f04f 0200 	mov.w	r2, #0
   116b8:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   116ba:	f24a 439d 	movw	r3, #42141	; 0xa49d
   116be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116c2:	2203      	movs	r2, #3
   116c4:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[6].a;
   116c6:	f240 1340 	movw	r3, #320	; 0x140
   116ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   116d0:	f240 133c 	movw	r3, #316	; 0x13c
   116d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116d8:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   116da:	f64a 0304 	movw	r3, #43012	; 0xa804
   116de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116e2:	f04f 0200 	mov.w	r2, #0
   116e6:	601a      	str	r2, [r3, #0]
          }
          return;
   116e8:	f001 bc98 	b.w	1301c <auto_nav+0x21a4>
     }
     else if (nav_stage == 2)
   116ec:	f64a 0310 	movw	r3, #43024	; 0xa810
   116f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116f4:	781b      	ldrb	r3, [r3, #0]
   116f6:	2b02      	cmp	r3, #2
   116f8:	d169      	bne.n	117ce <auto_nav+0x956>
     {
         nav_stage =2; 
   116fa:	f64a 0310 	movw	r3, #43024	; 0xa810
   116fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11702:	2202      	movs	r2, #2
   11704:	701a      	strb	r2, [r3, #0]
         if (approaching(1)) NextStageFrom(1) else {
   11706:	2001      	movs	r0, #1
   11708:	f001 fc96 	bl	13038 <approaching>
   1170c:	4603      	mov	r3, r0
   1170e:	2b00      	cmp	r3, #0
   11710:	d034      	beq.n	1177c <auto_nav+0x904>
   11712:	f64a 031c 	movw	r3, #43036	; 0xa81c
   11716:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1171a:	2201      	movs	r2, #1
   1171c:	701a      	strb	r2, [r3, #0]
   1171e:	f64a 0310 	movw	r3, #43024	; 0xa810
   11722:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11726:	781b      	ldrb	r3, [r3, #0]
   11728:	3301      	adds	r3, #1
   1172a:	b2da      	uxtb	r2, r3
   1172c:	f64a 0310 	movw	r3, #43024	; 0xa810
   11730:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11734:	701a      	strb	r2, [r3, #0]
   11736:	f64a 236c 	movw	r3, #43628	; 0xaa6c
   1173a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1173e:	681a      	ldr	r2, [r3, #0]
   11740:	f64a 0314 	movw	r3, #43028	; 0xa814
   11744:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11748:	601a      	str	r2, [r3, #0]
   1174a:	f64a 2370 	movw	r3, #43632	; 0xaa70
   1174e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11752:	681a      	ldr	r2, [r3, #0]
   11754:	f64a 0318 	movw	r3, #43032	; 0xa818
   11758:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1175c:	601a      	str	r2, [r3, #0]
   1175e:	f64a 0324 	movw	r3, #43044	; 0xa824
   11762:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11766:	2200      	movs	r2, #0
   11768:	801a      	strh	r2, [r3, #0]
   1176a:	f64a 0328 	movw	r3, #43048	; 0xa828
   1176e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11772:	f04f 0200 	mov.w	r2, #0
   11776:	601a      	str	r2, [r3, #0]
   11778:	f001 bc50 	b.w	1301c <auto_nav+0x21a4>
            fly_to(1);
   1177c:	2001      	movs	r0, #1
   1177e:	f001 fd8f 	bl	132a0 <fly_to>
            auto_pitch = FALSE;
   11782:	f24a 439f 	movw	r3, #42143	; 0xa49f
   11786:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1178a:	2200      	movs	r2, #0
   1178c:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   1178e:	f64a 033c 	movw	r3, #43068	; 0xa83c
   11792:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11796:	f04f 0200 	mov.w	r2, #0
   1179a:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   1179c:	f24a 439d 	movw	r3, #42141	; 0xa49d
   117a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117a4:	2203      	movs	r2, #3
   117a6:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[1].a;
   117a8:	f240 1340 	movw	r3, #320	; 0x140
   117ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117b0:	695a      	ldr	r2, [r3, #20]
   117b2:	f240 133c 	movw	r3, #316	; 0x13c
   117b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117ba:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   117bc:	f64a 0304 	movw	r3, #43012	; 0xa804
   117c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117c4:	f04f 0200 	mov.w	r2, #0
   117c8:	601a      	str	r2, [r3, #0]
          }
          return;
   117ca:	f001 bc27 	b.w	1301c <auto_nav+0x21a4>
      }
      else if (nav_stage == 3)
   117ce:	f64a 0310 	movw	r3, #43024	; 0xa810
   117d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117d6:	781b      	ldrb	r3, [r3, #0]
   117d8:	2b03      	cmp	r3, #3
   117da:	d16f      	bne.n	118bc <auto_nav+0xa44>
      {
	   nav_stage = 3;         
   117dc:	f64a 0310 	movw	r3, #43024	; 0xa810
   117e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117e4:	2203      	movs	r2, #3
   117e6:	701a      	strb	r2, [r3, #0]
           if (approaching(2)) NextStageFrom(2) else {
   117e8:	2002      	movs	r0, #2
   117ea:	f001 fc25 	bl	13038 <approaching>
   117ee:	4603      	mov	r3, r0
   117f0:	2b00      	cmp	r3, #0
   117f2:	d034      	beq.n	1185e <auto_nav+0x9e6>
   117f4:	f64a 031c 	movw	r3, #43036	; 0xa81c
   117f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117fc:	2202      	movs	r2, #2
   117fe:	701a      	strb	r2, [r3, #0]
   11800:	f64a 0310 	movw	r3, #43024	; 0xa810
   11804:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11808:	781b      	ldrb	r3, [r3, #0]
   1180a:	3301      	adds	r3, #1
   1180c:	b2da      	uxtb	r2, r3
   1180e:	f64a 0310 	movw	r3, #43024	; 0xa810
   11812:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11816:	701a      	strb	r2, [r3, #0]
   11818:	f64a 236c 	movw	r3, #43628	; 0xaa6c
   1181c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11820:	681a      	ldr	r2, [r3, #0]
   11822:	f64a 0314 	movw	r3, #43028	; 0xa814
   11826:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1182a:	601a      	str	r2, [r3, #0]
   1182c:	f64a 2370 	movw	r3, #43632	; 0xaa70
   11830:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11834:	681a      	ldr	r2, [r3, #0]
   11836:	f64a 0318 	movw	r3, #43032	; 0xa818
   1183a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1183e:	601a      	str	r2, [r3, #0]
   11840:	f64a 0324 	movw	r3, #43044	; 0xa824
   11844:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11848:	2200      	movs	r2, #0
   1184a:	801a      	strh	r2, [r3, #0]
   1184c:	f64a 0328 	movw	r3, #43048	; 0xa828
   11850:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11854:	f04f 0200 	mov.w	r2, #0
   11858:	601a      	str	r2, [r3, #0]
   1185a:	f001 bbdf 	b.w	1301c <auto_nav+0x21a4>
            route_to(last_wp, 2);
   1185e:	f64a 031c 	movw	r3, #43036	; 0xa81c
   11862:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11866:	781b      	ldrb	r3, [r3, #0]
   11868:	4618      	mov	r0, r3
   1186a:	2102      	movs	r1, #2
   1186c:	f001 fd3a 	bl	132e4 <route_to>
            auto_pitch = FALSE;
   11870:	f24a 439f 	movw	r3, #42143	; 0xa49f
   11874:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11878:	2200      	movs	r2, #0
   1187a:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   1187c:	f64a 033c 	movw	r3, #43068	; 0xa83c
   11880:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11884:	f04f 0200 	mov.w	r2, #0
   11888:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   1188a:	f24a 439d 	movw	r3, #42141	; 0xa49d
   1188e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11892:	2203      	movs	r2, #3
   11894:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[2].a;
   11896:	f240 1340 	movw	r3, #320	; 0x140
   1189a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1189e:	6a1a      	ldr	r2, [r3, #32]
   118a0:	f240 133c 	movw	r3, #316	; 0x13c
   118a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118a8:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   118aa:	f64a 0304 	movw	r3, #43012	; 0xa804
   118ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118b2:	f04f 0200 	mov.w	r2, #0
   118b6:	601a      	str	r2, [r3, #0]
          }
          return;
   118b8:	f001 bbb0 	b.w	1301c <auto_nav+0x21a4>
       }
       else if (nav_stage == 4)
   118bc:	f64a 0310 	movw	r3, #43024	; 0xa810
   118c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118c4:	781b      	ldrb	r3, [r3, #0]
   118c6:	2b04      	cmp	r3, #4
   118c8:	d169      	bne.n	1199e <auto_nav+0xb26>
       {
          nav_stage = 4;
   118ca:	f64a 0310 	movw	r3, #43024	; 0xa810
   118ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118d2:	2204      	movs	r2, #4
   118d4:	701a      	strb	r2, [r3, #0]
          if (approaching(3)) NextStageFrom(3) else {
   118d6:	2003      	movs	r0, #3
   118d8:	f001 fbae 	bl	13038 <approaching>
   118dc:	4603      	mov	r3, r0
   118de:	2b00      	cmp	r3, #0
   118e0:	d034      	beq.n	1194c <auto_nav+0xad4>
   118e2:	f64a 031c 	movw	r3, #43036	; 0xa81c
   118e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118ea:	2203      	movs	r2, #3
   118ec:	701a      	strb	r2, [r3, #0]
   118ee:	f64a 0310 	movw	r3, #43024	; 0xa810
   118f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118f6:	781b      	ldrb	r3, [r3, #0]
   118f8:	3301      	adds	r3, #1
   118fa:	b2da      	uxtb	r2, r3
   118fc:	f64a 0310 	movw	r3, #43024	; 0xa810
   11900:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11904:	701a      	strb	r2, [r3, #0]
   11906:	f64a 236c 	movw	r3, #43628	; 0xaa6c
   1190a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1190e:	681a      	ldr	r2, [r3, #0]
   11910:	f64a 0314 	movw	r3, #43028	; 0xa814
   11914:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11918:	601a      	str	r2, [r3, #0]
   1191a:	f64a 2370 	movw	r3, #43632	; 0xaa70
   1191e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11922:	681a      	ldr	r2, [r3, #0]
   11924:	f64a 0318 	movw	r3, #43032	; 0xa818
   11928:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1192c:	601a      	str	r2, [r3, #0]
   1192e:	f64a 0324 	movw	r3, #43044	; 0xa824
   11932:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11936:	2200      	movs	r2, #0
   11938:	801a      	strh	r2, [r3, #0]
   1193a:	f64a 0328 	movw	r3, #43048	; 0xa828
   1193e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11942:	f04f 0200 	mov.w	r2, #0
   11946:	601a      	str	r2, [r3, #0]
   11948:	f001 bb68 	b.w	1301c <auto_nav+0x21a4>
            fly_to(3);
   1194c:	2003      	movs	r0, #3
   1194e:	f001 fca7 	bl	132a0 <fly_to>
            auto_pitch = FALSE;
   11952:	f24a 439f 	movw	r3, #42143	; 0xa49f
   11956:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1195a:	2200      	movs	r2, #0
   1195c:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   1195e:	f64a 033c 	movw	r3, #43068	; 0xa83c
   11962:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11966:	f04f 0200 	mov.w	r2, #0
   1196a:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   1196c:	f24a 439d 	movw	r3, #42141	; 0xa49d
   11970:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11974:	2203      	movs	r2, #3
   11976:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[3].a;
   11978:	f240 1340 	movw	r3, #320	; 0x140
   1197c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   11982:	f240 133c 	movw	r3, #316	; 0x13c
   11986:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1198a:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   1198c:	f64a 0304 	movw	r3, #43012	; 0xa804
   11990:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11994:	f04f 0200 	mov.w	r2, #0
   11998:	601a      	str	r2, [r3, #0]
          }
          return;
   1199a:	f001 bb3f 	b.w	1301c <auto_nav+0x21a4>
       }
       else if (nav_stage == 5)
   1199e:	f64a 0310 	movw	r3, #43024	; 0xa810
   119a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   119a6:	781b      	ldrb	r3, [r3, #0]
   119a8:	2b05      	cmp	r3, #5
   119aa:	d169      	bne.n	11a80 <auto_nav+0xc08>
       {
          nav_stage =5;
   119ac:	f64a 0310 	movw	r3, #43024	; 0xa810
   119b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   119b4:	2205      	movs	r2, #5
   119b6:	701a      	strb	r2, [r3, #0]
          if (approaching(4)) NextStageFrom(4) else {
   119b8:	2004      	movs	r0, #4
   119ba:	f001 fb3d 	bl	13038 <approaching>
   119be:	4603      	mov	r3, r0
   119c0:	2b00      	cmp	r3, #0
   119c2:	d034      	beq.n	11a2e <auto_nav+0xbb6>
   119c4:	f64a 031c 	movw	r3, #43036	; 0xa81c
   119c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   119cc:	2204      	movs	r2, #4
   119ce:	701a      	strb	r2, [r3, #0]
   119d0:	f64a 0310 	movw	r3, #43024	; 0xa810
   119d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   119d8:	781b      	ldrb	r3, [r3, #0]
   119da:	3301      	adds	r3, #1
   119dc:	b2da      	uxtb	r2, r3
   119de:	f64a 0310 	movw	r3, #43024	; 0xa810
   119e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   119e6:	701a      	strb	r2, [r3, #0]
   119e8:	f64a 236c 	movw	r3, #43628	; 0xaa6c
   119ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   119f0:	681a      	ldr	r2, [r3, #0]
   119f2:	f64a 0314 	movw	r3, #43028	; 0xa814
   119f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   119fa:	601a      	str	r2, [r3, #0]
   119fc:	f64a 2370 	movw	r3, #43632	; 0xaa70
   11a00:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a04:	681a      	ldr	r2, [r3, #0]
   11a06:	f64a 0318 	movw	r3, #43032	; 0xa818
   11a0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a0e:	601a      	str	r2, [r3, #0]
   11a10:	f64a 0324 	movw	r3, #43044	; 0xa824
   11a14:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a18:	2200      	movs	r2, #0
   11a1a:	801a      	strh	r2, [r3, #0]
   11a1c:	f64a 0328 	movw	r3, #43048	; 0xa828
   11a20:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a24:	f04f 0200 	mov.w	r2, #0
   11a28:	601a      	str	r2, [r3, #0]
   11a2a:	f001 baf7 	b.w	1301c <auto_nav+0x21a4>
            fly_to(4);
   11a2e:	2004      	movs	r0, #4
   11a30:	f001 fc36 	bl	132a0 <fly_to>
            auto_pitch = FALSE;
   11a34:	f24a 439f 	movw	r3, #42143	; 0xa49f
   11a38:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a3c:	2200      	movs	r2, #0
   11a3e:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   11a40:	f64a 033c 	movw	r3, #43068	; 0xa83c
   11a44:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a48:	f04f 0200 	mov.w	r2, #0
   11a4c:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   11a4e:	f24a 439d 	movw	r3, #42141	; 0xa49d
   11a52:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a56:	2203      	movs	r2, #3
   11a58:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[4].a;
   11a5a:	f240 1340 	movw	r3, #320	; 0x140
   11a5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   11a64:	f240 133c 	movw	r3, #316	; 0x13c
   11a68:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a6c:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   11a6e:	f64a 0304 	movw	r3, #43012	; 0xa804
   11a72:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a76:	f04f 0200 	mov.w	r2, #0
   11a7a:	601a      	str	r2, [r3, #0]
          }
          return;
   11a7c:	f001 bace 	b.w	1301c <auto_nav+0x21a4>
       }
       else if (nav_stage == 6)
   11a80:	f64a 0310 	movw	r3, #43024	; 0xa810
   11a84:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a88:	781b      	ldrb	r3, [r3, #0]
   11a8a:	2b06      	cmp	r3, #6
   11a8c:	d16f      	bne.n	11b6e <auto_nav+0xcf6>
       {
          nav_stage =6;
   11a8e:	f64a 0310 	movw	r3, #43024	; 0xa810
   11a92:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a96:	2206      	movs	r2, #6
   11a98:	701a      	strb	r2, [r3, #0]
          if (approaching(5)) NextStageFrom(5) else {
   11a9a:	2005      	movs	r0, #5
   11a9c:	f001 facc 	bl	13038 <approaching>
   11aa0:	4603      	mov	r3, r0
   11aa2:	2b00      	cmp	r3, #0
   11aa4:	d034      	beq.n	11b10 <auto_nav+0xc98>
   11aa6:	f64a 031c 	movw	r3, #43036	; 0xa81c
   11aaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11aae:	2205      	movs	r2, #5
   11ab0:	701a      	strb	r2, [r3, #0]
   11ab2:	f64a 0310 	movw	r3, #43024	; 0xa810
   11ab6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11aba:	781b      	ldrb	r3, [r3, #0]
   11abc:	3301      	adds	r3, #1
   11abe:	b2da      	uxtb	r2, r3
   11ac0:	f64a 0310 	movw	r3, #43024	; 0xa810
   11ac4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ac8:	701a      	strb	r2, [r3, #0]
   11aca:	f64a 236c 	movw	r3, #43628	; 0xaa6c
   11ace:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ad2:	681a      	ldr	r2, [r3, #0]
   11ad4:	f64a 0314 	movw	r3, #43028	; 0xa814
   11ad8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11adc:	601a      	str	r2, [r3, #0]
   11ade:	f64a 2370 	movw	r3, #43632	; 0xaa70
   11ae2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ae6:	681a      	ldr	r2, [r3, #0]
   11ae8:	f64a 0318 	movw	r3, #43032	; 0xa818
   11aec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11af0:	601a      	str	r2, [r3, #0]
   11af2:	f64a 0324 	movw	r3, #43044	; 0xa824
   11af6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11afa:	2200      	movs	r2, #0
   11afc:	801a      	strh	r2, [r3, #0]
   11afe:	f64a 0328 	movw	r3, #43048	; 0xa828
   11b02:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b06:	f04f 0200 	mov.w	r2, #0
   11b0a:	601a      	str	r2, [r3, #0]
   11b0c:	f001 ba86 	b.w	1301c <auto_nav+0x21a4>
            route_to(last_wp, 5);
   11b10:	f64a 031c 	movw	r3, #43036	; 0xa81c
   11b14:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b18:	781b      	ldrb	r3, [r3, #0]
   11b1a:	4618      	mov	r0, r3
   11b1c:	2105      	movs	r1, #5
   11b1e:	f001 fbe1 	bl	132e4 <route_to>
            auto_pitch = FALSE;
   11b22:	f24a 439f 	movw	r3, #42143	; 0xa49f
   11b26:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b2a:	2200      	movs	r2, #0
   11b2c:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   11b2e:	f64a 033c 	movw	r3, #43068	; 0xa83c
   11b32:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b36:	f04f 0200 	mov.w	r2, #0
   11b3a:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   11b3c:	f24a 439d 	movw	r3, #42141	; 0xa49d
   11b40:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b44:	2203      	movs	r2, #3
   11b46:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[5].a;
   11b48:	f240 1340 	movw	r3, #320	; 0x140
   11b4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   11b52:	f240 133c 	movw	r3, #316	; 0x13c
   11b56:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b5a:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   11b5c:	f64a 0304 	movw	r3, #43012	; 0xa804
   11b60:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b64:	f04f 0200 	mov.w	r2, #0
   11b68:	601a      	str	r2, [r3, #0]
          }
          return;
   11b6a:	f001 ba57 	b.w	1301c <auto_nav+0x21a4>
       }
       else if (nav_stage == 7)
   11b6e:	f64a 0310 	movw	r3, #43024	; 0xa810
   11b72:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b76:	781b      	ldrb	r3, [r3, #0]
   11b78:	2b07      	cmp	r3, #7
   11b7a:	d106      	bne.n	11b8a <auto_nav+0xd12>
       {
	   nav_stage =7;
   11b7c:	f64a 0310 	movw	r3, #43024	; 0xa810
   11b80:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b84:	2207      	movs	r2, #7
   11b86:	701a      	strb	r2, [r3, #0]
	   Goto(while_5)
   11b88:	e50a      	b.n	115a0 <auto_nav+0x728>
	}
       
       else if (nav_stage == 8){
   11b8a:	f64a 0310 	movw	r3, #43024	; 0xa810
   11b8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b92:	781b      	ldrb	r3, [r3, #0]
   11b94:	2b08      	cmp	r3, #8
   11b96:	f041 8241 	bne.w	1301c <auto_nav+0x21a4>
	  Label(endwhile_6)
	  nav_stage =8;
   11b9a:	f64a 0310 	movw	r3, #43024	; 0xa810
   11b9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ba2:	2208      	movs	r2, #8
   11ba4:	701a      	strb	r2, [r3, #0]
          NextBlock();
   11ba6:	f64a 0311 	movw	r3, #43025	; 0xa811
   11baa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11bae:	781b      	ldrb	r3, [r3, #0]
   11bb0:	3301      	adds	r3, #1
   11bb2:	b2da      	uxtb	r2, r3
   11bb4:	f64a 0311 	movw	r3, #43025	; 0xa811
   11bb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11bbc:	701a      	strb	r2, [r3, #0]
   11bbe:	f64a 0310 	movw	r3, #43024	; 0xa810
   11bc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11bc6:	2200      	movs	r2, #0
   11bc8:	701a      	strb	r2, [r3, #0]
   11bca:	f64a 0326 	movw	r3, #43046	; 0xa826
   11bce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11bd2:	2200      	movs	r2, #0
   11bd4:	801a      	strh	r2, [r3, #0]
   11bd6:	f64a 236c 	movw	r3, #43628	; 0xaa6c
   11bda:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11bde:	681a      	ldr	r2, [r3, #0]
   11be0:	f64a 0314 	movw	r3, #43028	; 0xa814
   11be4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11be8:	601a      	str	r2, [r3, #0]
   11bea:	f64a 2370 	movw	r3, #43632	; 0xaa70
   11bee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11bf2:	681a      	ldr	r2, [r3, #0]
   11bf4:	f64a 0318 	movw	r3, #43032	; 0xa818
   11bf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11bfc:	601a      	str	r2, [r3, #0]
   11bfe:	f64a 0324 	movw	r3, #43044	; 0xa824
   11c02:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c06:	2200      	movs	r2, #0
   11c08:	801a      	strh	r2, [r3, #0]
   11c0a:	f64a 0328 	movw	r3, #43048	; 0xa828
   11c0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c12:	f04f 0200 	mov.w	r2, #0
   11c16:	601a      	str	r2, [r3, #0]
   11c18:	f001 ba00 	b.w	1301c <auto_nav+0x21a4>
       }
       else { }
}
else if (nav_block == 3) // xyz
   11c1c:	f64a 0311 	movw	r3, #43025	; 0xa811
   11c20:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c24:	781b      	ldrb	r3, [r3, #0]
   11c26:	2b03      	cmp	r3, #3
   11c28:	f040 8388 	bne.w	1233c <auto_nav+0x14c4>
{
    nav_block = 3;
   11c2c:	f64a 0311 	movw	r3, #43025	; 0xa811
   11c30:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c34:	2203      	movs	r2, #3
   11c36:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(4) }
   11c38:	f24a 43a0 	movw	r3, #42144	; 0xa4a0
   11c3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c40:	781b      	ldrb	r3, [r3, #0]
   11c42:	2b00      	cmp	r3, #0
   11c44:	d007      	beq.n	11c56 <auto_nav+0xdde>
   11c46:	f24a 43a0 	movw	r3, #42144	; 0xa4a0
   11c4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c4e:	2200      	movs	r2, #0
   11c50:	701a      	strb	r2, [r3, #0]
   11c52:	2301      	movs	r3, #1
   11c54:	e000      	b.n	11c58 <auto_nav+0xde0>
   11c56:	2300      	movs	r3, #0
   11c58:	2b00      	cmp	r3, #0
   11c5a:	d034      	beq.n	11cc6 <auto_nav+0xe4e>
   11c5c:	f64a 0311 	movw	r3, #43025	; 0xa811
   11c60:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c64:	2204      	movs	r2, #4
   11c66:	701a      	strb	r2, [r3, #0]
   11c68:	f64a 0310 	movw	r3, #43024	; 0xa810
   11c6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c70:	2200      	movs	r2, #0
   11c72:	701a      	strb	r2, [r3, #0]
   11c74:	f64a 0326 	movw	r3, #43046	; 0xa826
   11c78:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c7c:	2200      	movs	r2, #0
   11c7e:	801a      	strh	r2, [r3, #0]
   11c80:	f64a 236c 	movw	r3, #43628	; 0xaa6c
   11c84:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c88:	681a      	ldr	r2, [r3, #0]
   11c8a:	f64a 0314 	movw	r3, #43028	; 0xa814
   11c8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c92:	601a      	str	r2, [r3, #0]
   11c94:	f64a 2370 	movw	r3, #43632	; 0xaa70
   11c98:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c9c:	681a      	ldr	r2, [r3, #0]
   11c9e:	f64a 0318 	movw	r3, #43032	; 0xa818
   11ca2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ca6:	601a      	str	r2, [r3, #0]
   11ca8:	f64a 0324 	movw	r3, #43044	; 0xa824
   11cac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11cb0:	2200      	movs	r2, #0
   11cb2:	801a      	strh	r2, [r3, #0]
   11cb4:	f64a 0328 	movw	r3, #43048	; 0xa828
   11cb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11cbc:	f04f 0200 	mov.w	r2, #0
   11cc0:	601a      	str	r2, [r3, #0]
   11cc2:	f001 b9ab 	b.w	1301c <auto_nav+0x21a4>
    if(nav_stage == 0)
   11cc6:	f64a 0310 	movw	r3, #43024	; 0xa810
   11cca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11cce:	781b      	ldrb	r3, [r3, #0]
   11cd0:	2b00      	cmp	r3, #0
   11cd2:	f040 82ea 	bne.w	122aa <auto_nav+0x1432>
    {
        nav_stage = 0;
   11cd6:	f64a 0310 	movw	r3, #43024	; 0xa810
   11cda:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11cde:	2200      	movs	r2, #0
   11ce0:	701a      	strb	r2, [r3, #0]
        Goto3D(50)
   11ce2:	f24a 439c 	movw	r3, #42140	; 0xa49c
   11ce6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11cea:	781b      	ldrb	r3, [r3, #0]
   11cec:	2b02      	cmp	r3, #2
   11cee:	f040 81a5 	bne.w	1203c <auto_nav+0x11c4>
   11cf2:	f24a 53c0 	movw	r3, #42432	; 0xa5c0
   11cf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11cfa:	88db      	ldrh	r3, [r3, #6]
   11cfc:	84fb      	strh	r3, [r7, #38]	; 0x26
   11cfe:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   11d02:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   11d06:	dc04      	bgt.n	11d12 <auto_nav+0xe9a>
   11d08:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   11d0c:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   11d10:	da7e      	bge.n	11e10 <auto_nav+0xf98>
   11d12:	f64a 035c 	movw	r3, #43100	; 0xa85c
   11d16:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d1a:	681b      	ldr	r3, [r3, #0]
   11d1c:	4618      	mov	r0, r3
   11d1e:	f004 fb8b 	bl	16438 <__aeabi_f2d>
   11d22:	4604      	mov	r4, r0
   11d24:	460d      	mov	r5, r1
   11d26:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   11d2a:	4618      	mov	r0, r3
   11d2c:	f004 ffc4 	bl	16cb8 <__aeabi_i2f>
   11d30:	4603      	mov	r3, r0
   11d32:	4618      	mov	r0, r3
   11d34:	f04f 0100 	mov.w	r1, #0
   11d38:	f2c4 6116 	movt	r1, #17942	; 0x4616
   11d3c:	f005 f8c4 	bl	16ec8 <__aeabi_fdiv>
   11d40:	4603      	mov	r3, r0
   11d42:	4618      	mov	r0, r3
   11d44:	f004 fb78 	bl	16438 <__aeabi_f2d>
   11d48:	4602      	mov	r2, r0
   11d4a:	460b      	mov	r3, r1
   11d4c:	4610      	mov	r0, r2
   11d4e:	4619      	mov	r1, r3
   11d50:	f04f 0200 	mov.w	r2, #0
   11d54:	f04f 0300 	mov.w	r3, #0
   11d58:	f2cc 0334 	movt	r3, #49204	; 0xc034
   11d5c:	f004 fbc0 	bl	164e0 <__aeabi_dmul>
   11d60:	4602      	mov	r2, r0
   11d62:	460b      	mov	r3, r1
   11d64:	4610      	mov	r0, r2
   11d66:	4619      	mov	r1, r3
   11d68:	f04f 0200 	mov.w	r2, #0
   11d6c:	f04f 0300 	mov.w	r3, #0
   11d70:	f004 fa04 	bl	1617c <__adddf3>
   11d74:	4602      	mov	r2, r0
   11d76:	460b      	mov	r3, r1
   11d78:	4620      	mov	r0, r4
   11d7a:	4629      	mov	r1, r5
   11d7c:	f004 f9fe 	bl	1617c <__adddf3>
   11d80:	4602      	mov	r2, r0
   11d82:	460b      	mov	r3, r1
   11d84:	4610      	mov	r0, r2
   11d86:	4619      	mov	r1, r3
   11d88:	f004 fe8c 	bl	16aa4 <__aeabi_d2f>
   11d8c:	4602      	mov	r2, r0
   11d8e:	f64a 035c 	movw	r3, #43100	; 0xa85c
   11d92:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d96:	601a      	str	r2, [r3, #0]
   11d98:	f64a 035c 	movw	r3, #43100	; 0xa85c
   11d9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11da0:	681b      	ldr	r3, [r3, #0]
   11da2:	4618      	mov	r0, r3
   11da4:	f04f 0100 	mov.w	r1, #0
   11da8:	f2c4 317a 	movt	r1, #17274	; 0x437a
   11dac:	f005 f980 	bl	170b0 <__aeabi_fcmple>
   11db0:	4603      	mov	r3, r0
   11db2:	2b00      	cmp	r3, #0
   11db4:	d005      	beq.n	11dc2 <auto_nav+0xf4a>
   11db6:	f64a 035c 	movw	r3, #43100	; 0xa85c
   11dba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11dbe:	681a      	ldr	r2, [r3, #0]
   11dc0:	e003      	b.n	11dca <auto_nav+0xf52>
   11dc2:	f04f 0200 	mov.w	r2, #0
   11dc6:	f2c4 327a 	movt	r2, #17274	; 0x437a
   11dca:	f64a 035c 	movw	r3, #43100	; 0xa85c
   11dce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11dd2:	601a      	str	r2, [r3, #0]
   11dd4:	f64a 035c 	movw	r3, #43100	; 0xa85c
   11dd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ddc:	681b      	ldr	r3, [r3, #0]
   11dde:	4618      	mov	r0, r3
   11de0:	f04f 0100 	mov.w	r1, #0
   11de4:	f2cc 317a 	movt	r1, #50042	; 0xc37a
   11de8:	f005 f96c 	bl	170c4 <__aeabi_fcmpge>
   11dec:	4603      	mov	r3, r0
   11dee:	2b00      	cmp	r3, #0
   11df0:	d005      	beq.n	11dfe <auto_nav+0xf86>
   11df2:	f64a 035c 	movw	r3, #43100	; 0xa85c
   11df6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11dfa:	681a      	ldr	r2, [r3, #0]
   11dfc:	e003      	b.n	11e06 <auto_nav+0xf8e>
   11dfe:	f04f 0200 	mov.w	r2, #0
   11e02:	f2cc 327a 	movt	r2, #50042	; 0xc37a
   11e06:	f64a 035c 	movw	r3, #43100	; 0xa85c
   11e0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e0e:	601a      	str	r2, [r3, #0]
   11e10:	f24a 53c0 	movw	r3, #42432	; 0xa5c0
   11e14:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e18:	889b      	ldrh	r3, [r3, #4]
   11e1a:	84bb      	strh	r3, [r7, #36]	; 0x24
   11e1c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   11e20:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   11e24:	dc04      	bgt.n	11e30 <auto_nav+0xfb8>
   11e26:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   11e2a:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   11e2e:	da7e      	bge.n	11f2e <auto_nav+0x10b6>
   11e30:	f64a 0360 	movw	r3, #43104	; 0xa860
   11e34:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e38:	681b      	ldr	r3, [r3, #0]
   11e3a:	4618      	mov	r0, r3
   11e3c:	f004 fafc 	bl	16438 <__aeabi_f2d>
   11e40:	4604      	mov	r4, r0
   11e42:	460d      	mov	r5, r1
   11e44:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   11e48:	4618      	mov	r0, r3
   11e4a:	f004 ff35 	bl	16cb8 <__aeabi_i2f>
   11e4e:	4603      	mov	r3, r0
   11e50:	4618      	mov	r0, r3
   11e52:	f04f 0100 	mov.w	r1, #0
   11e56:	f2c4 6116 	movt	r1, #17942	; 0x4616
   11e5a:	f005 f835 	bl	16ec8 <__aeabi_fdiv>
   11e5e:	4603      	mov	r3, r0
   11e60:	4618      	mov	r0, r3
   11e62:	f004 fae9 	bl	16438 <__aeabi_f2d>
   11e66:	4602      	mov	r2, r0
   11e68:	460b      	mov	r3, r1
   11e6a:	4610      	mov	r0, r2
   11e6c:	4619      	mov	r1, r3
   11e6e:	f04f 0200 	mov.w	r2, #0
   11e72:	f04f 0300 	mov.w	r3, #0
   11e76:	f2cc 0334 	movt	r3, #49204	; 0xc034
   11e7a:	f004 fb31 	bl	164e0 <__aeabi_dmul>
   11e7e:	4602      	mov	r2, r0
   11e80:	460b      	mov	r3, r1
   11e82:	4610      	mov	r0, r2
   11e84:	4619      	mov	r1, r3
   11e86:	f04f 0200 	mov.w	r2, #0
   11e8a:	f04f 0300 	mov.w	r3, #0
   11e8e:	f004 f975 	bl	1617c <__adddf3>
   11e92:	4602      	mov	r2, r0
   11e94:	460b      	mov	r3, r1
   11e96:	4620      	mov	r0, r4
   11e98:	4629      	mov	r1, r5
   11e9a:	f004 f96f 	bl	1617c <__adddf3>
   11e9e:	4602      	mov	r2, r0
   11ea0:	460b      	mov	r3, r1
   11ea2:	4610      	mov	r0, r2
   11ea4:	4619      	mov	r1, r3
   11ea6:	f004 fdfd 	bl	16aa4 <__aeabi_d2f>
   11eaa:	4602      	mov	r2, r0
   11eac:	f64a 0360 	movw	r3, #43104	; 0xa860
   11eb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11eb4:	601a      	str	r2, [r3, #0]
   11eb6:	f64a 0360 	movw	r3, #43104	; 0xa860
   11eba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ebe:	681b      	ldr	r3, [r3, #0]
   11ec0:	4618      	mov	r0, r3
   11ec2:	f04f 0100 	mov.w	r1, #0
   11ec6:	f2c4 317a 	movt	r1, #17274	; 0x437a
   11eca:	f005 f8f1 	bl	170b0 <__aeabi_fcmple>
   11ece:	4603      	mov	r3, r0
   11ed0:	2b00      	cmp	r3, #0
   11ed2:	d005      	beq.n	11ee0 <auto_nav+0x1068>
   11ed4:	f64a 0360 	movw	r3, #43104	; 0xa860
   11ed8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11edc:	681a      	ldr	r2, [r3, #0]
   11ede:	e003      	b.n	11ee8 <auto_nav+0x1070>
   11ee0:	f04f 0200 	mov.w	r2, #0
   11ee4:	f2c4 327a 	movt	r2, #17274	; 0x437a
   11ee8:	f64a 0360 	movw	r3, #43104	; 0xa860
   11eec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ef0:	601a      	str	r2, [r3, #0]
   11ef2:	f64a 0360 	movw	r3, #43104	; 0xa860
   11ef6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11efa:	681b      	ldr	r3, [r3, #0]
   11efc:	4618      	mov	r0, r3
   11efe:	f04f 0100 	mov.w	r1, #0
   11f02:	f2cc 317a 	movt	r1, #50042	; 0xc37a
   11f06:	f005 f8dd 	bl	170c4 <__aeabi_fcmpge>
   11f0a:	4603      	mov	r3, r0
   11f0c:	2b00      	cmp	r3, #0
   11f0e:	d005      	beq.n	11f1c <auto_nav+0x10a4>
   11f10:	f64a 0360 	movw	r3, #43104	; 0xa860
   11f14:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f18:	681a      	ldr	r2, [r3, #0]
   11f1a:	e003      	b.n	11f24 <auto_nav+0x10ac>
   11f1c:	f04f 0200 	mov.w	r2, #0
   11f20:	f2cc 327a 	movt	r2, #50042	; 0xc37a
   11f24:	f64a 0360 	movw	r3, #43104	; 0xa860
   11f28:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f2c:	601a      	str	r2, [r3, #0]
   11f2e:	f24a 439d 	movw	r3, #42141	; 0xa49d
   11f32:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f36:	2203      	movs	r2, #3
   11f38:	701a      	strb	r2, [r3, #0]
   11f3a:	f24a 53c0 	movw	r3, #42432	; 0xa5c0
   11f3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f42:	885b      	ldrh	r3, [r3, #2]
   11f44:	847b      	strh	r3, [r7, #34]	; 0x22
   11f46:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   11f4a:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   11f4e:	dc04      	bgt.n	11f5a <auto_nav+0x10e2>
   11f50:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   11f54:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   11f58:	da70      	bge.n	1203c <auto_nav+0x11c4>
   11f5a:	f240 133c 	movw	r3, #316	; 0x13c
   11f5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f62:	681b      	ldr	r3, [r3, #0]
   11f64:	4618      	mov	r0, r3
   11f66:	f004 fa67 	bl	16438 <__aeabi_f2d>
   11f6a:	4604      	mov	r4, r0
   11f6c:	460d      	mov	r5, r1
   11f6e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   11f72:	4618      	mov	r0, r3
   11f74:	f004 fea0 	bl	16cb8 <__aeabi_i2f>
   11f78:	4603      	mov	r3, r0
   11f7a:	4618      	mov	r0, r3
   11f7c:	f04f 0100 	mov.w	r1, #0
   11f80:	f2c4 6116 	movt	r1, #17942	; 0x4616
   11f84:	f004 ffa0 	bl	16ec8 <__aeabi_fdiv>
   11f88:	4603      	mov	r3, r0
   11f8a:	4618      	mov	r0, r3
   11f8c:	f004 fa54 	bl	16438 <__aeabi_f2d>
   11f90:	4602      	mov	r2, r0
   11f92:	460b      	mov	r3, r1
   11f94:	f04f 0000 	mov.w	r0, #0
   11f98:	f04f 0100 	mov.w	r1, #0
   11f9c:	f004 f8ec 	bl	16178 <__aeabi_dsub>
   11fa0:	4602      	mov	r2, r0
   11fa2:	460b      	mov	r3, r1
   11fa4:	4620      	mov	r0, r4
   11fa6:	4629      	mov	r1, r5
   11fa8:	f004 f8e8 	bl	1617c <__adddf3>
   11fac:	4602      	mov	r2, r0
   11fae:	460b      	mov	r3, r1
   11fb0:	4610      	mov	r0, r2
   11fb2:	4619      	mov	r1, r3
   11fb4:	f004 fd76 	bl	16aa4 <__aeabi_d2f>
   11fb8:	4602      	mov	r2, r0
   11fba:	f240 133c 	movw	r3, #316	; 0x13c
   11fbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11fc2:	601a      	str	r2, [r3, #0]
   11fc4:	f240 133c 	movw	r3, #316	; 0x13c
   11fc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11fcc:	681b      	ldr	r3, [r3, #0]
   11fce:	4618      	mov	r0, r3
   11fd0:	f04f 0100 	mov.w	r1, #0
   11fd4:	f2c4 312f 	movt	r1, #17199	; 0x432f
   11fd8:	f005 f874 	bl	170c4 <__aeabi_fcmpge>
   11fdc:	4603      	mov	r3, r0
   11fde:	2b00      	cmp	r3, #0
   11fe0:	d005      	beq.n	11fee <auto_nav+0x1176>
   11fe2:	f240 133c 	movw	r3, #316	; 0x13c
   11fe6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11fea:	681a      	ldr	r2, [r3, #0]
   11fec:	e003      	b.n	11ff6 <auto_nav+0x117e>
   11fee:	f04f 0200 	mov.w	r2, #0
   11ff2:	f2c4 322f 	movt	r2, #17199	; 0x432f
   11ff6:	f240 133c 	movw	r3, #316	; 0x13c
   11ffa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ffe:	601a      	str	r2, [r3, #0]
   12000:	f240 133c 	movw	r3, #316	; 0x13c
   12004:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12008:	681b      	ldr	r3, [r3, #0]
   1200a:	4618      	mov	r0, r3
   1200c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   12010:	f2c4 3189 	movt	r1, #17289	; 0x4389
   12014:	f005 f84c 	bl	170b0 <__aeabi_fcmple>
   12018:	4603      	mov	r3, r0
   1201a:	2b00      	cmp	r3, #0
   1201c:	d005      	beq.n	1202a <auto_nav+0x11b2>
   1201e:	f240 133c 	movw	r3, #316	; 0x13c
   12022:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12026:	681a      	ldr	r2, [r3, #0]
   12028:	e003      	b.n	12032 <auto_nav+0x11ba>
   1202a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   1202e:	f2c4 3289 	movt	r2, #17289	; 0x4389
   12032:	f240 133c 	movw	r3, #316	; 0x13c
   12036:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1203a:	601a      	str	r2, [r3, #0]
   1203c:	f64a 2370 	movw	r3, #43632	; 0xaa70
   12040:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12044:	681a      	ldr	r2, [r3, #0]
   12046:	f64a 0360 	movw	r3, #43104	; 0xa860
   1204a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1204e:	681b      	ldr	r3, [r3, #0]
   12050:	4610      	mov	r0, r2
   12052:	4619      	mov	r1, r3
   12054:	f004 fd7a 	bl	16b4c <__aeabi_fsub>
   12058:	4603      	mov	r3, r0
   1205a:	4618      	mov	r0, r3
   1205c:	f004 f9ec 	bl	16438 <__aeabi_f2d>
   12060:	4604      	mov	r4, r0
   12062:	460d      	mov	r5, r1
   12064:	f64a 236c 	movw	r3, #43628	; 0xaa6c
   12068:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1206c:	681a      	ldr	r2, [r3, #0]
   1206e:	f64a 035c 	movw	r3, #43100	; 0xa85c
   12072:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12076:	681b      	ldr	r3, [r3, #0]
   12078:	4610      	mov	r0, r2
   1207a:	4619      	mov	r1, r3
   1207c:	f004 fd66 	bl	16b4c <__aeabi_fsub>
   12080:	4603      	mov	r3, r0
   12082:	4618      	mov	r0, r3
   12084:	f004 f9d8 	bl	16438 <__aeabi_f2d>
   12088:	4602      	mov	r2, r0
   1208a:	460b      	mov	r3, r1
   1208c:	4620      	mov	r0, r4
   1208e:	4629      	mov	r1, r5
   12090:	f002 fa12 	bl	144b8 <pp_atan2>
   12094:	4602      	mov	r2, r0
   12096:	460b      	mov	r3, r1
   12098:	4610      	mov	r0, r2
   1209a:	4619      	mov	r1, r3
   1209c:	f004 fd02 	bl	16aa4 <__aeabi_d2f>
   120a0:	4603      	mov	r3, r0
   120a2:	61fb      	str	r3, [r7, #28]
   120a4:	69f8      	ldr	r0, [r7, #28]
   120a6:	f004 f9c7 	bl	16438 <__aeabi_f2d>
   120aa:	4604      	mov	r4, r0
   120ac:	460d      	mov	r5, r1
   120ae:	f64a 23a4 	movw	r3, #43684	; 0xaaa4
   120b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120b6:	681b      	ldr	r3, [r3, #0]
   120b8:	4618      	mov	r0, r3
   120ba:	f04f 0100 	mov.w	r1, #0
   120be:	f2cc 2148 	movt	r1, #49736	; 0xc248
   120c2:	f004 fe4d 	bl	16d60 <__aeabi_fmul>
   120c6:	4603      	mov	r3, r0
   120c8:	4618      	mov	r0, r3
   120ca:	f004 f9b5 	bl	16438 <__aeabi_f2d>
   120ce:	4602      	mov	r2, r0
   120d0:	460b      	mov	r3, r1
   120d2:	f04f 0000 	mov.w	r0, #0
   120d6:	f04f 0100 	mov.w	r1, #0
   120da:	f2c4 0114 	movt	r1, #16404	; 0x4014
   120de:	f004 fb29 	bl	16734 <__aeabi_ddiv>
   120e2:	4602      	mov	r2, r0
   120e4:	460b      	mov	r3, r1
   120e6:	4620      	mov	r0, r4
   120e8:	4629      	mov	r1, r5
   120ea:	f004 f847 	bl	1617c <__adddf3>
   120ee:	4602      	mov	r2, r0
   120f0:	460b      	mov	r3, r1
   120f2:	4610      	mov	r0, r2
   120f4:	4619      	mov	r1, r3
   120f6:	f004 fcd5 	bl	16aa4 <__aeabi_d2f>
   120fa:	4603      	mov	r3, r0
   120fc:	61bb      	str	r3, [r7, #24]
   120fe:	f64a 035c 	movw	r3, #43100	; 0xa85c
   12102:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12106:	681b      	ldr	r3, [r3, #0]
   12108:	4618      	mov	r0, r3
   1210a:	f004 f995 	bl	16438 <__aeabi_f2d>
   1210e:	4604      	mov	r4, r0
   12110:	460d      	mov	r5, r1
   12112:	69b8      	ldr	r0, [r7, #24]
   12114:	f004 f990 	bl	16438 <__aeabi_f2d>
   12118:	4602      	mov	r2, r0
   1211a:	460b      	mov	r3, r1
   1211c:	4610      	mov	r0, r2
   1211e:	4619      	mov	r1, r3
   12120:	a3b1      	add	r3, pc, #708	; (adr r3, 123e8 <auto_nav+0x1570>)
   12122:	e9d3 2300 	ldrd	r2, r3, [r3]
   12126:	f004 f829 	bl	1617c <__adddf3>
   1212a:	4602      	mov	r2, r0
   1212c:	460b      	mov	r3, r1
   1212e:	4610      	mov	r0, r2
   12130:	4619      	mov	r1, r3
   12132:	f002 fa81 	bl	14638 <pp_sin>
   12136:	4602      	mov	r2, r0
   12138:	460b      	mov	r3, r1
   1213a:	4610      	mov	r0, r2
   1213c:	4619      	mov	r1, r3
   1213e:	f04f 0200 	mov.w	r2, #0
   12142:	f04f 0300 	mov.w	r3, #0
   12146:	f2c4 0349 	movt	r3, #16457	; 0x4049
   1214a:	f004 f9c9 	bl	164e0 <__aeabi_dmul>
   1214e:	4602      	mov	r2, r0
   12150:	460b      	mov	r3, r1
   12152:	4620      	mov	r0, r4
   12154:	4629      	mov	r1, r5
   12156:	f004 f811 	bl	1617c <__adddf3>
   1215a:	4602      	mov	r2, r0
   1215c:	460b      	mov	r3, r1
   1215e:	4610      	mov	r0, r2
   12160:	4619      	mov	r1, r3
   12162:	f004 fc9f 	bl	16aa4 <__aeabi_d2f>
   12166:	4606      	mov	r6, r0
   12168:	f64a 0360 	movw	r3, #43104	; 0xa860
   1216c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12170:	681b      	ldr	r3, [r3, #0]
   12172:	4618      	mov	r0, r3
   12174:	f004 f960 	bl	16438 <__aeabi_f2d>
   12178:	4604      	mov	r4, r0
   1217a:	460d      	mov	r5, r1
   1217c:	69b8      	ldr	r0, [r7, #24]
   1217e:	f004 f95b 	bl	16438 <__aeabi_f2d>
   12182:	4602      	mov	r2, r0
   12184:	460b      	mov	r3, r1
   12186:	4610      	mov	r0, r2
   12188:	4619      	mov	r1, r3
   1218a:	f002 fa55 	bl	14638 <pp_sin>
   1218e:	4602      	mov	r2, r0
   12190:	460b      	mov	r3, r1
   12192:	4610      	mov	r0, r2
   12194:	4619      	mov	r1, r3
   12196:	f04f 0200 	mov.w	r2, #0
   1219a:	f04f 0300 	mov.w	r3, #0
   1219e:	f2c4 0349 	movt	r3, #16457	; 0x4049
   121a2:	f004 f99d 	bl	164e0 <__aeabi_dmul>
   121a6:	4602      	mov	r2, r0
   121a8:	460b      	mov	r3, r1
   121aa:	4620      	mov	r0, r4
   121ac:	4629      	mov	r1, r5
   121ae:	f003 ffe5 	bl	1617c <__adddf3>
   121b2:	4602      	mov	r2, r0
   121b4:	460b      	mov	r3, r1
   121b6:	4610      	mov	r0, r2
   121b8:	4619      	mov	r1, r3
   121ba:	f004 fc73 	bl	16aa4 <__aeabi_d2f>
   121be:	4603      	mov	r3, r0
   121c0:	4630      	mov	r0, r6
   121c2:	4619      	mov	r1, r3
   121c4:	f001 f81c 	bl	13200 <fly_to_xy>
   121c8:	69b8      	ldr	r0, [r7, #24]
   121ca:	f004 f935 	bl	16438 <__aeabi_f2d>
   121ce:	4602      	mov	r2, r0
   121d0:	460b      	mov	r3, r1
   121d2:	a185      	add	r1, pc, #532	; (adr r1, 123e8 <auto_nav+0x1570>)
   121d4:	e9d1 0100 	ldrd	r0, r1, [r1]
   121d8:	f003 ffce 	bl	16178 <__aeabi_dsub>
   121dc:	4602      	mov	r2, r0
   121de:	460b      	mov	r3, r1
   121e0:	4610      	mov	r0, r2
   121e2:	4619      	mov	r1, r3
   121e4:	a382      	add	r3, pc, #520	; (adr r3, 123f0 <auto_nav+0x1578>)
   121e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   121ea:	f004 faa3 	bl	16734 <__aeabi_ddiv>
   121ee:	4602      	mov	r2, r0
   121f0:	460b      	mov	r3, r1
   121f2:	4610      	mov	r0, r2
   121f4:	4619      	mov	r1, r3
   121f6:	f04f 0200 	mov.w	r2, #0
   121fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   121fe:	f2c4 0366 	movt	r3, #16486	; 0x4066
   12202:	f004 f96d 	bl	164e0 <__aeabi_dmul>
   12206:	4602      	mov	r2, r0
   12208:	460b      	mov	r3, r1
   1220a:	4610      	mov	r0, r2
   1220c:	4619      	mov	r1, r3
   1220e:	f004 fc49 	bl	16aa4 <__aeabi_d2f>
   12212:	4602      	mov	r2, r0
   12214:	f64a 032c 	movw	r3, #43052	; 0xa82c
   12218:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1221c:	601a      	str	r2, [r3, #0]
   1221e:	e012      	b.n	12246 <auto_nav+0x13ce>
   12220:	f64a 032c 	movw	r3, #43052	; 0xa82c
   12224:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12228:	681b      	ldr	r3, [r3, #0]
   1222a:	4618      	mov	r0, r3
   1222c:	f04f 0100 	mov.w	r1, #0
   12230:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   12234:	f004 fc8c 	bl	16b50 <__addsf3>
   12238:	4603      	mov	r3, r0
   1223a:	461a      	mov	r2, r3
   1223c:	f64a 032c 	movw	r3, #43052	; 0xa82c
   12240:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12244:	601a      	str	r2, [r3, #0]
   12246:	f64a 032c 	movw	r3, #43052	; 0xa82c
   1224a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1224e:	681b      	ldr	r3, [r3, #0]
   12250:	4618      	mov	r0, r3
   12252:	f04f 0100 	mov.w	r1, #0
   12256:	f004 ff21 	bl	1709c <__aeabi_fcmplt>
   1225a:	4603      	mov	r3, r0
   1225c:	2b00      	cmp	r3, #0
   1225e:	d1df      	bne.n	12220 <auto_nav+0x13a8>
   12260:	e012      	b.n	12288 <auto_nav+0x1410>
   12262:	f64a 032c 	movw	r3, #43052	; 0xa82c
   12266:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1226a:	681b      	ldr	r3, [r3, #0]
   1226c:	4618      	mov	r0, r3
   1226e:	f04f 0100 	mov.w	r1, #0
   12272:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   12276:	f004 fc69 	bl	16b4c <__aeabi_fsub>
   1227a:	4603      	mov	r3, r0
   1227c:	461a      	mov	r2, r3
   1227e:	f64a 032c 	movw	r3, #43052	; 0xa82c
   12282:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12286:	601a      	str	r2, [r3, #0]
   12288:	f64a 032c 	movw	r3, #43052	; 0xa82c
   1228c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12290:	681b      	ldr	r3, [r3, #0]
   12292:	4618      	mov	r0, r3
   12294:	f04f 0100 	mov.w	r1, #0
   12298:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   1229c:	f004 ff12 	bl	170c4 <__aeabi_fcmpge>
   122a0:	4603      	mov	r3, r0
   122a2:	2b00      	cmp	r3, #0
   122a4:	d1dd      	bne.n	12262 <auto_nav+0x13ea>
        return;
   122a6:	f000 beb9 	b.w	1301c <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   122aa:	f64a 0310 	movw	r3, #43024	; 0xa810
   122ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122b2:	781b      	ldrb	r3, [r3, #0]
   122b4:	2b01      	cmp	r3, #1
   122b6:	f040 86b1 	bne.w	1301c <auto_nav+0x21a4>
    {
        nav_stage = 1;
   122ba:	f64a 0310 	movw	r3, #43024	; 0xa810
   122be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122c2:	2201      	movs	r2, #1
   122c4:	701a      	strb	r2, [r3, #0]
        NextBlock()
   122c6:	f64a 0311 	movw	r3, #43025	; 0xa811
   122ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122ce:	781b      	ldrb	r3, [r3, #0]
   122d0:	3301      	adds	r3, #1
   122d2:	b2da      	uxtb	r2, r3
   122d4:	f64a 0311 	movw	r3, #43025	; 0xa811
   122d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122dc:	701a      	strb	r2, [r3, #0]
   122de:	f64a 0310 	movw	r3, #43024	; 0xa810
   122e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122e6:	2200      	movs	r2, #0
   122e8:	701a      	strb	r2, [r3, #0]
   122ea:	f64a 0326 	movw	r3, #43046	; 0xa826
   122ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122f2:	2200      	movs	r2, #0
   122f4:	801a      	strh	r2, [r3, #0]
   122f6:	f64a 236c 	movw	r3, #43628	; 0xaa6c
   122fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122fe:	681a      	ldr	r2, [r3, #0]
   12300:	f64a 0314 	movw	r3, #43028	; 0xa814
   12304:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12308:	601a      	str	r2, [r3, #0]
   1230a:	f64a 2370 	movw	r3, #43632	; 0xaa70
   1230e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12312:	681a      	ldr	r2, [r3, #0]
   12314:	f64a 0318 	movw	r3, #43032	; 0xa818
   12318:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1231c:	601a      	str	r2, [r3, #0]
   1231e:	f64a 0324 	movw	r3, #43044	; 0xa824
   12322:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12326:	2200      	movs	r2, #0
   12328:	801a      	strh	r2, [r3, #0]
   1232a:	f64a 0328 	movw	r3, #43048	; 0xa828
   1232e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12332:	f04f 0200 	mov.w	r2, #0
   12336:	601a      	str	r2, [r3, #0]
   12338:	f000 be70 	b.w	1301c <auto_nav+0x21a4>
    }
    else { }
}
else if (nav_block == 4)
   1233c:	f64a 0311 	movw	r3, #43025	; 0xa811
   12340:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12344:	781b      	ldrb	r3, [r3, #0]
   12346:	2b04      	cmp	r3, #4
   12348:	f040 8202 	bne.w	12750 <auto_nav+0x18d8>
{
    nav_block = 4;
   1234c:	f64a 0311 	movw	r3, #43025	; 0xa811
   12350:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12354:	2204      	movs	r2, #4
   12356:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(5) }
   12358:	f24a 43a0 	movw	r3, #42144	; 0xa4a0
   1235c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12360:	781b      	ldrb	r3, [r3, #0]
   12362:	2b00      	cmp	r3, #0
   12364:	d007      	beq.n	12376 <auto_nav+0x14fe>
   12366:	f24a 43a0 	movw	r3, #42144	; 0xa4a0
   1236a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1236e:	2200      	movs	r2, #0
   12370:	701a      	strb	r2, [r3, #0]
   12372:	2301      	movs	r3, #1
   12374:	e000      	b.n	12378 <auto_nav+0x1500>
   12376:	2300      	movs	r3, #0
   12378:	2b00      	cmp	r3, #0
   1237a:	d03d      	beq.n	123f8 <auto_nav+0x1580>
   1237c:	f64a 0311 	movw	r3, #43025	; 0xa811
   12380:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12384:	2205      	movs	r2, #5
   12386:	701a      	strb	r2, [r3, #0]
   12388:	f64a 0310 	movw	r3, #43024	; 0xa810
   1238c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12390:	2200      	movs	r2, #0
   12392:	701a      	strb	r2, [r3, #0]
   12394:	f64a 0326 	movw	r3, #43046	; 0xa826
   12398:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1239c:	2200      	movs	r2, #0
   1239e:	801a      	strh	r2, [r3, #0]
   123a0:	f64a 236c 	movw	r3, #43628	; 0xaa6c
   123a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123a8:	681a      	ldr	r2, [r3, #0]
   123aa:	f64a 0314 	movw	r3, #43028	; 0xa814
   123ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123b2:	601a      	str	r2, [r3, #0]
   123b4:	f64a 2370 	movw	r3, #43632	; 0xaa70
   123b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123bc:	681a      	ldr	r2, [r3, #0]
   123be:	f64a 0318 	movw	r3, #43032	; 0xa818
   123c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123c6:	601a      	str	r2, [r3, #0]
   123c8:	f64a 0324 	movw	r3, #43044	; 0xa824
   123cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123d0:	2200      	movs	r2, #0
   123d2:	801a      	strh	r2, [r3, #0]
   123d4:	f64a 0328 	movw	r3, #43048	; 0xa828
   123d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123dc:	f04f 0200 	mov.w	r2, #0
   123e0:	601a      	str	r2, [r3, #0]
   123e2:	f000 be1b 	b.w	1301c <auto_nav+0x21a4>
   123e6:	bf00      	nop
   123e8:	54442d18 	.word	0x54442d18
   123ec:	3ff921fb 	.word	0x3ff921fb
   123f0:	54442d18 	.word	0x54442d18
   123f4:	400921fb 	.word	0x400921fb
    if(nav_stage == 0)
   123f8:	f64a 0310 	movw	r3, #43024	; 0xa810
   123fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12400:	781b      	ldrb	r3, [r3, #0]
   12402:	2b00      	cmp	r3, #0
   12404:	f040 815b 	bne.w	126be <auto_nav+0x1846>
    {
        nav_stage = 0;
   12408:	f64a 0310 	movw	r3, #43024	; 0xa810
   1240c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12410:	2200      	movs	r2, #0
   12412:	701a      	strb	r2, [r3, #0]
        auto_pitch = FALSE;
   12414:	f24a 439f 	movw	r3, #42143	; 0xa49f
   12418:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1241c:	2200      	movs	r2, #0
   1241e:	701a      	strb	r2, [r3, #0]
        nav_pitch = 0.000000;
   12420:	f64a 033c 	movw	r3, #43068	; 0xa83c
   12424:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12428:	f04f 0200 	mov.w	r2, #0
   1242c:	601a      	str	r2, [r3, #0]
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
   1242e:	f24a 439d 	movw	r3, #42141	; 0xa49d
   12432:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12436:	2203      	movs	r2, #3
   12438:	701a      	strb	r2, [r3, #0]
        desired_altitude = waypoints[0].a;
   1243a:	f240 1340 	movw	r3, #320	; 0x140
   1243e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12442:	689a      	ldr	r2, [r3, #8]
   12444:	f240 133c 	movw	r3, #316	; 0x13c
   12448:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1244c:	601a      	str	r2, [r3, #0]
        pre_climb = 0.;
   1244e:	f64a 0304 	movw	r3, #43012	; 0xa804
   12452:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12456:	f04f 0200 	mov.w	r2, #0
   1245a:	601a      	str	r2, [r3, #0]
        Circle(0, 150);
   1245c:	f64a 2370 	movw	r3, #43632	; 0xaa70
   12460:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12464:	681a      	ldr	r2, [r3, #0]
   12466:	f240 1340 	movw	r3, #320	; 0x140
   1246a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1246e:	685b      	ldr	r3, [r3, #4]
   12470:	4610      	mov	r0, r2
   12472:	4619      	mov	r1, r3
   12474:	f004 fb6a 	bl	16b4c <__aeabi_fsub>
   12478:	4603      	mov	r3, r0
   1247a:	4618      	mov	r0, r3
   1247c:	f003 ffdc 	bl	16438 <__aeabi_f2d>
   12480:	4604      	mov	r4, r0
   12482:	460d      	mov	r5, r1
   12484:	f64a 236c 	movw	r3, #43628	; 0xaa6c
   12488:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1248c:	681a      	ldr	r2, [r3, #0]
   1248e:	f240 1340 	movw	r3, #320	; 0x140
   12492:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12496:	681b      	ldr	r3, [r3, #0]
   12498:	4610      	mov	r0, r2
   1249a:	4619      	mov	r1, r3
   1249c:	f004 fb56 	bl	16b4c <__aeabi_fsub>
   124a0:	4603      	mov	r3, r0
   124a2:	4618      	mov	r0, r3
   124a4:	f003 ffc8 	bl	16438 <__aeabi_f2d>
   124a8:	4602      	mov	r2, r0
   124aa:	460b      	mov	r3, r1
   124ac:	4620      	mov	r0, r4
   124ae:	4629      	mov	r1, r5
   124b0:	f002 f802 	bl	144b8 <pp_atan2>
   124b4:	4602      	mov	r2, r0
   124b6:	460b      	mov	r3, r1
   124b8:	4610      	mov	r0, r2
   124ba:	4619      	mov	r1, r3
   124bc:	f004 faf2 	bl	16aa4 <__aeabi_d2f>
   124c0:	4603      	mov	r3, r0
   124c2:	617b      	str	r3, [r7, #20]
   124c4:	6978      	ldr	r0, [r7, #20]
   124c6:	f003 ffb7 	bl	16438 <__aeabi_f2d>
   124ca:	4604      	mov	r4, r0
   124cc:	460d      	mov	r5, r1
   124ce:	f64a 23a4 	movw	r3, #43684	; 0xaaa4
   124d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124d6:	681b      	ldr	r3, [r3, #0]
   124d8:	4618      	mov	r0, r3
   124da:	f04f 0100 	mov.w	r1, #0
   124de:	f2cc 3116 	movt	r1, #49942	; 0xc316
   124e2:	f004 fc3d 	bl	16d60 <__aeabi_fmul>
   124e6:	4603      	mov	r3, r0
   124e8:	4618      	mov	r0, r3
   124ea:	f003 ffa5 	bl	16438 <__aeabi_f2d>
   124ee:	4602      	mov	r2, r0
   124f0:	460b      	mov	r3, r1
   124f2:	f04f 0000 	mov.w	r0, #0
   124f6:	f04f 0100 	mov.w	r1, #0
   124fa:	f2c4 0114 	movt	r1, #16404	; 0x4014
   124fe:	f004 f919 	bl	16734 <__aeabi_ddiv>
   12502:	4602      	mov	r2, r0
   12504:	460b      	mov	r3, r1
   12506:	4620      	mov	r0, r4
   12508:	4629      	mov	r1, r5
   1250a:	f003 fe37 	bl	1617c <__adddf3>
   1250e:	4602      	mov	r2, r0
   12510:	460b      	mov	r3, r1
   12512:	4610      	mov	r0, r2
   12514:	4619      	mov	r1, r3
   12516:	f004 fac5 	bl	16aa4 <__aeabi_d2f>
   1251a:	4603      	mov	r3, r0
   1251c:	613b      	str	r3, [r7, #16]
   1251e:	f240 1340 	movw	r3, #320	; 0x140
   12522:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12526:	681b      	ldr	r3, [r3, #0]
   12528:	4618      	mov	r0, r3
   1252a:	f003 ff85 	bl	16438 <__aeabi_f2d>
   1252e:	4604      	mov	r4, r0
   12530:	460d      	mov	r5, r1
   12532:	6938      	ldr	r0, [r7, #16]
   12534:	f003 ff80 	bl	16438 <__aeabi_f2d>
   12538:	4602      	mov	r2, r0
   1253a:	460b      	mov	r3, r1
   1253c:	4610      	mov	r0, r2
   1253e:	4619      	mov	r1, r3
   12540:	a3af      	add	r3, pc, #700	; (adr r3, 12800 <auto_nav+0x1988>)
   12542:	e9d3 2300 	ldrd	r2, r3, [r3]
   12546:	f003 fe19 	bl	1617c <__adddf3>
   1254a:	4602      	mov	r2, r0
   1254c:	460b      	mov	r3, r1
   1254e:	4610      	mov	r0, r2
   12550:	4619      	mov	r1, r3
   12552:	f002 f871 	bl	14638 <pp_sin>
   12556:	4602      	mov	r2, r0
   12558:	460b      	mov	r3, r1
   1255a:	4610      	mov	r0, r2
   1255c:	4619      	mov	r1, r3
   1255e:	a3aa      	add	r3, pc, #680	; (adr r3, 12808 <auto_nav+0x1990>)
   12560:	e9d3 2300 	ldrd	r2, r3, [r3]
   12564:	f003 ffbc 	bl	164e0 <__aeabi_dmul>
   12568:	4602      	mov	r2, r0
   1256a:	460b      	mov	r3, r1
   1256c:	4620      	mov	r0, r4
   1256e:	4629      	mov	r1, r5
   12570:	f003 fe04 	bl	1617c <__adddf3>
   12574:	4602      	mov	r2, r0
   12576:	460b      	mov	r3, r1
   12578:	4610      	mov	r0, r2
   1257a:	4619      	mov	r1, r3
   1257c:	f004 fa92 	bl	16aa4 <__aeabi_d2f>
   12580:	4606      	mov	r6, r0
   12582:	f240 1340 	movw	r3, #320	; 0x140
   12586:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1258a:	685b      	ldr	r3, [r3, #4]
   1258c:	4618      	mov	r0, r3
   1258e:	f003 ff53 	bl	16438 <__aeabi_f2d>
   12592:	4604      	mov	r4, r0
   12594:	460d      	mov	r5, r1
   12596:	6938      	ldr	r0, [r7, #16]
   12598:	f003 ff4e 	bl	16438 <__aeabi_f2d>
   1259c:	4602      	mov	r2, r0
   1259e:	460b      	mov	r3, r1
   125a0:	4610      	mov	r0, r2
   125a2:	4619      	mov	r1, r3
   125a4:	f002 f848 	bl	14638 <pp_sin>
   125a8:	4602      	mov	r2, r0
   125aa:	460b      	mov	r3, r1
   125ac:	4610      	mov	r0, r2
   125ae:	4619      	mov	r1, r3
   125b0:	a395      	add	r3, pc, #596	; (adr r3, 12808 <auto_nav+0x1990>)
   125b2:	e9d3 2300 	ldrd	r2, r3, [r3]
   125b6:	f003 ff93 	bl	164e0 <__aeabi_dmul>
   125ba:	4602      	mov	r2, r0
   125bc:	460b      	mov	r3, r1
   125be:	4620      	mov	r0, r4
   125c0:	4629      	mov	r1, r5
   125c2:	f003 fddb 	bl	1617c <__adddf3>
   125c6:	4602      	mov	r2, r0
   125c8:	460b      	mov	r3, r1
   125ca:	4610      	mov	r0, r2
   125cc:	4619      	mov	r1, r3
   125ce:	f004 fa69 	bl	16aa4 <__aeabi_d2f>
   125d2:	4603      	mov	r3, r0
   125d4:	4630      	mov	r0, r6
   125d6:	4619      	mov	r1, r3
   125d8:	f000 fe12 	bl	13200 <fly_to_xy>
   125dc:	6938      	ldr	r0, [r7, #16]
   125de:	f003 ff2b 	bl	16438 <__aeabi_f2d>
   125e2:	4602      	mov	r2, r0
   125e4:	460b      	mov	r3, r1
   125e6:	a186      	add	r1, pc, #536	; (adr r1, 12800 <auto_nav+0x1988>)
   125e8:	e9d1 0100 	ldrd	r0, r1, [r1]
   125ec:	f003 fdc4 	bl	16178 <__aeabi_dsub>
   125f0:	4602      	mov	r2, r0
   125f2:	460b      	mov	r3, r1
   125f4:	4610      	mov	r0, r2
   125f6:	4619      	mov	r1, r3
   125f8:	a385      	add	r3, pc, #532	; (adr r3, 12810 <auto_nav+0x1998>)
   125fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   125fe:	f004 f899 	bl	16734 <__aeabi_ddiv>
   12602:	4602      	mov	r2, r0
   12604:	460b      	mov	r3, r1
   12606:	4610      	mov	r0, r2
   12608:	4619      	mov	r1, r3
   1260a:	f04f 0200 	mov.w	r2, #0
   1260e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   12612:	f2c4 0366 	movt	r3, #16486	; 0x4066
   12616:	f003 ff63 	bl	164e0 <__aeabi_dmul>
   1261a:	4602      	mov	r2, r0
   1261c:	460b      	mov	r3, r1
   1261e:	4610      	mov	r0, r2
   12620:	4619      	mov	r1, r3
   12622:	f004 fa3f 	bl	16aa4 <__aeabi_d2f>
   12626:	4602      	mov	r2, r0
   12628:	f64a 032c 	movw	r3, #43052	; 0xa82c
   1262c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12630:	601a      	str	r2, [r3, #0]
   12632:	e012      	b.n	1265a <auto_nav+0x17e2>
   12634:	f64a 032c 	movw	r3, #43052	; 0xa82c
   12638:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1263c:	681b      	ldr	r3, [r3, #0]
   1263e:	4618      	mov	r0, r3
   12640:	f04f 0100 	mov.w	r1, #0
   12644:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   12648:	f004 fa82 	bl	16b50 <__addsf3>
   1264c:	4603      	mov	r3, r0
   1264e:	461a      	mov	r2, r3
   12650:	f64a 032c 	movw	r3, #43052	; 0xa82c
   12654:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12658:	601a      	str	r2, [r3, #0]
   1265a:	f64a 032c 	movw	r3, #43052	; 0xa82c
   1265e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12662:	681b      	ldr	r3, [r3, #0]
   12664:	4618      	mov	r0, r3
   12666:	f04f 0100 	mov.w	r1, #0
   1266a:	f004 fd17 	bl	1709c <__aeabi_fcmplt>
   1266e:	4603      	mov	r3, r0
   12670:	2b00      	cmp	r3, #0
   12672:	d1df      	bne.n	12634 <auto_nav+0x17bc>
   12674:	e012      	b.n	1269c <auto_nav+0x1824>
   12676:	f64a 032c 	movw	r3, #43052	; 0xa82c
   1267a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1267e:	681b      	ldr	r3, [r3, #0]
   12680:	4618      	mov	r0, r3
   12682:	f04f 0100 	mov.w	r1, #0
   12686:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   1268a:	f004 fa5f 	bl	16b4c <__aeabi_fsub>
   1268e:	4603      	mov	r3, r0
   12690:	461a      	mov	r2, r3
   12692:	f64a 032c 	movw	r3, #43052	; 0xa82c
   12696:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1269a:	601a      	str	r2, [r3, #0]
   1269c:	f64a 032c 	movw	r3, #43052	; 0xa82c
   126a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126a4:	681b      	ldr	r3, [r3, #0]
   126a6:	4618      	mov	r0, r3
   126a8:	f04f 0100 	mov.w	r1, #0
   126ac:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   126b0:	f004 fd08 	bl	170c4 <__aeabi_fcmpge>
   126b4:	4603      	mov	r3, r0
   126b6:	2b00      	cmp	r3, #0
   126b8:	d1dd      	bne.n	12676 <auto_nav+0x17fe>
        return;
   126ba:	f000 bcaf 	b.w	1301c <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   126be:	f64a 0310 	movw	r3, #43024	; 0xa810
   126c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126c6:	781b      	ldrb	r3, [r3, #0]
   126c8:	2b01      	cmp	r3, #1
   126ca:	f040 84a7 	bne.w	1301c <auto_nav+0x21a4>
    {
        nav_stage =1;
   126ce:	f64a 0310 	movw	r3, #43024	; 0xa810
   126d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126d6:	2201      	movs	r2, #1
   126d8:	701a      	strb	r2, [r3, #0]
        NextBlock()
   126da:	f64a 0311 	movw	r3, #43025	; 0xa811
   126de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126e2:	781b      	ldrb	r3, [r3, #0]
   126e4:	3301      	adds	r3, #1
   126e6:	b2da      	uxtb	r2, r3
   126e8:	f64a 0311 	movw	r3, #43025	; 0xa811
   126ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126f0:	701a      	strb	r2, [r3, #0]
   126f2:	f64a 0310 	movw	r3, #43024	; 0xa810
   126f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126fa:	2200      	movs	r2, #0
   126fc:	701a      	strb	r2, [r3, #0]
   126fe:	f64a 0326 	movw	r3, #43046	; 0xa826
   12702:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12706:	2200      	movs	r2, #0
   12708:	801a      	strh	r2, [r3, #0]
   1270a:	f64a 236c 	movw	r3, #43628	; 0xaa6c
   1270e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12712:	681a      	ldr	r2, [r3, #0]
   12714:	f64a 0314 	movw	r3, #43028	; 0xa814
   12718:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1271c:	601a      	str	r2, [r3, #0]
   1271e:	f64a 2370 	movw	r3, #43632	; 0xaa70
   12722:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12726:	681a      	ldr	r2, [r3, #0]
   12728:	f64a 0318 	movw	r3, #43032	; 0xa818
   1272c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12730:	601a      	str	r2, [r3, #0]
   12732:	f64a 0324 	movw	r3, #43044	; 0xa824
   12736:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1273a:	2200      	movs	r2, #0
   1273c:	801a      	strh	r2, [r3, #0]
   1273e:	f64a 0328 	movw	r3, #43048	; 0xa828
   12742:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12746:	f04f 0200 	mov.w	r2, #0
   1274a:	601a      	str	r2, [r3, #0]
   1274c:	f000 bc66 	b.w	1301c <auto_nav+0x21a4>
    }
    else {}
}
else if (nav_block == 5)
   12750:	f64a 0311 	movw	r3, #43025	; 0xa811
   12754:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12758:	781b      	ldrb	r3, [r3, #0]
   1275a:	2b05      	cmp	r3, #5
   1275c:	f040 845e 	bne.w	1301c <auto_nav+0x21a4>
{
    nav_block = 5;
   12760:	f64a 0311 	movw	r3, #43025	; 0xa811
   12764:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12768:	2205      	movs	r2, #5
   1276a:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(1) }
   1276c:	f24a 43a0 	movw	r3, #42144	; 0xa4a0
   12770:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12774:	781b      	ldrb	r3, [r3, #0]
   12776:	2b00      	cmp	r3, #0
   12778:	d007      	beq.n	1278a <auto_nav+0x1912>
   1277a:	f24a 43a0 	movw	r3, #42144	; 0xa4a0
   1277e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12782:	2200      	movs	r2, #0
   12784:	701a      	strb	r2, [r3, #0]
   12786:	2301      	movs	r3, #1
   12788:	e000      	b.n	1278c <auto_nav+0x1914>
   1278a:	2300      	movs	r3, #0
   1278c:	2b00      	cmp	r3, #0
   1278e:	d043      	beq.n	12818 <auto_nav+0x19a0>
   12790:	f64a 0311 	movw	r3, #43025	; 0xa811
   12794:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12798:	2201      	movs	r2, #1
   1279a:	701a      	strb	r2, [r3, #0]
   1279c:	f64a 0310 	movw	r3, #43024	; 0xa810
   127a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127a4:	2200      	movs	r2, #0
   127a6:	701a      	strb	r2, [r3, #0]
   127a8:	f64a 0326 	movw	r3, #43046	; 0xa826
   127ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127b0:	2200      	movs	r2, #0
   127b2:	801a      	strh	r2, [r3, #0]
   127b4:	f64a 236c 	movw	r3, #43628	; 0xaa6c
   127b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127bc:	681a      	ldr	r2, [r3, #0]
   127be:	f64a 0314 	movw	r3, #43028	; 0xa814
   127c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127c6:	601a      	str	r2, [r3, #0]
   127c8:	f64a 2370 	movw	r3, #43632	; 0xaa70
   127cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127d0:	681a      	ldr	r2, [r3, #0]
   127d2:	f64a 0318 	movw	r3, #43032	; 0xa818
   127d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127da:	601a      	str	r2, [r3, #0]
   127dc:	f64a 0324 	movw	r3, #43044	; 0xa824
   127e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127e4:	2200      	movs	r2, #0
   127e6:	801a      	strh	r2, [r3, #0]
   127e8:	f64a 0328 	movw	r3, #43048	; 0xa828
   127ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127f0:	f04f 0200 	mov.w	r2, #0
   127f4:	601a      	str	r2, [r3, #0]
   127f6:	f000 bc11 	b.w	1301c <auto_nav+0x21a4>
   127fa:	bf00      	nop
   127fc:	f3af 8000 	nop.w
   12800:	54442d18 	.word	0x54442d18
   12804:	3ff921fb 	.word	0x3ff921fb
   12808:	00000000 	.word	0x00000000
   1280c:	4062c000 	.word	0x4062c000
   12810:	54442d18 	.word	0x54442d18
   12814:	400921fb 	.word	0x400921fb
    if(nav_stage == 0) {
   12818:	f64a 0310 	movw	r3, #43024	; 0xa810
   1281c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12820:	781b      	ldrb	r3, [r3, #0]
   12822:	2b00      	cmp	r3, #0
   12824:	d133      	bne.n	1288e <auto_nav+0x1a16>
       Label(while_7) 
       nav_stage = 0;
   12826:	f64a 0310 	movw	r3, #43024	; 0xa810
   1282a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1282e:	2200      	movs	r2, #0
   12830:	701a      	strb	r2, [r3, #0]
      if (! (TRUE)) Goto(endwhile_8) else NextStage();}
   12832:	f64a 0310 	movw	r3, #43024	; 0xa810
   12836:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1283a:	781b      	ldrb	r3, [r3, #0]
   1283c:	3301      	adds	r3, #1
   1283e:	b2da      	uxtb	r2, r3
   12840:	f64a 0310 	movw	r3, #43024	; 0xa810
   12844:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12848:	701a      	strb	r2, [r3, #0]
   1284a:	f64a 236c 	movw	r3, #43628	; 0xaa6c
   1284e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12852:	681a      	ldr	r2, [r3, #0]
   12854:	f64a 0314 	movw	r3, #43028	; 0xa814
   12858:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1285c:	601a      	str	r2, [r3, #0]
   1285e:	f64a 2370 	movw	r3, #43632	; 0xaa70
   12862:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12866:	681a      	ldr	r2, [r3, #0]
   12868:	f64a 0318 	movw	r3, #43032	; 0xa818
   1286c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12870:	601a      	str	r2, [r3, #0]
   12872:	f64a 0324 	movw	r3, #43044	; 0xa824
   12876:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1287a:	2200      	movs	r2, #0
   1287c:	801a      	strh	r2, [r3, #0]
   1287e:	f64a 0328 	movw	r3, #43048	; 0xa828
   12882:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12886:	f04f 0200 	mov.w	r2, #0
   1288a:	601a      	str	r2, [r3, #0]
   1288c:	e3c6      	b.n	1301c <auto_nav+0x21a4>
     
    else if (nav_stage == 1)
   1288e:	f64a 0310 	movw	r3, #43024	; 0xa810
   12892:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12896:	781b      	ldrb	r3, [r3, #0]
   12898:	2b01      	cmp	r3, #1
   1289a:	f040 81b5 	bne.w	12c08 <auto_nav+0x1d90>
    {
        nav_stage =1;
   1289e:	f64a 0310 	movw	r3, #43024	; 0xa810
   128a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128a6:	2201      	movs	r2, #1
   128a8:	701a      	strb	r2, [r3, #0]
        auto_pitch = FALSE;
   128aa:	f24a 439f 	movw	r3, #42143	; 0xa49f
   128ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128b2:	2200      	movs	r2, #0
   128b4:	701a      	strb	r2, [r3, #0]
        nav_pitch = 0.000000;
   128b6:	f64a 033c 	movw	r3, #43068	; 0xa83c
   128ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128be:	f04f 0200 	mov.w	r2, #0
   128c2:	601a      	str	r2, [r3, #0]
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
   128c4:	f24a 439d 	movw	r3, #42141	; 0xa49d
   128c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128cc:	2203      	movs	r2, #3
   128ce:	701a      	strb	r2, [r3, #0]
        desired_altitude = waypoints[1].a;
   128d0:	f240 1340 	movw	r3, #320	; 0x140
   128d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128d8:	695a      	ldr	r2, [r3, #20]
   128da:	f240 133c 	movw	r3, #316	; 0x13c
   128de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128e2:	601a      	str	r2, [r3, #0]
        pre_climb = 0.;
   128e4:	f64a 0304 	movw	r3, #43012	; 0xa804
   128e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128ec:	f04f 0200 	mov.w	r2, #0
   128f0:	601a      	str	r2, [r3, #0]
        Circle(1, 100);
   128f2:	f64a 2370 	movw	r3, #43632	; 0xaa70
   128f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128fa:	681a      	ldr	r2, [r3, #0]
   128fc:	f240 1340 	movw	r3, #320	; 0x140
   12900:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12904:	691b      	ldr	r3, [r3, #16]
   12906:	4610      	mov	r0, r2
   12908:	4619      	mov	r1, r3
   1290a:	f004 f91f 	bl	16b4c <__aeabi_fsub>
   1290e:	4603      	mov	r3, r0
   12910:	4618      	mov	r0, r3
   12912:	f003 fd91 	bl	16438 <__aeabi_f2d>
   12916:	4604      	mov	r4, r0
   12918:	460d      	mov	r5, r1
   1291a:	f64a 236c 	movw	r3, #43628	; 0xaa6c
   1291e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12922:	681a      	ldr	r2, [r3, #0]
   12924:	f240 1340 	movw	r3, #320	; 0x140
   12928:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1292c:	68db      	ldr	r3, [r3, #12]
   1292e:	4610      	mov	r0, r2
   12930:	4619      	mov	r1, r3
   12932:	f004 f90b 	bl	16b4c <__aeabi_fsub>
   12936:	4603      	mov	r3, r0
   12938:	4618      	mov	r0, r3
   1293a:	f003 fd7d 	bl	16438 <__aeabi_f2d>
   1293e:	4602      	mov	r2, r0
   12940:	460b      	mov	r3, r1
   12942:	4620      	mov	r0, r4
   12944:	4629      	mov	r1, r5
   12946:	f001 fdb7 	bl	144b8 <pp_atan2>
   1294a:	4602      	mov	r2, r0
   1294c:	460b      	mov	r3, r1
   1294e:	4610      	mov	r0, r2
   12950:	4619      	mov	r1, r3
   12952:	f004 f8a7 	bl	16aa4 <__aeabi_d2f>
   12956:	4603      	mov	r3, r0
   12958:	60fb      	str	r3, [r7, #12]
   1295a:	68f8      	ldr	r0, [r7, #12]
   1295c:	f003 fd6c 	bl	16438 <__aeabi_f2d>
   12960:	4604      	mov	r4, r0
   12962:	460d      	mov	r5, r1
   12964:	f64a 23a4 	movw	r3, #43684	; 0xaaa4
   12968:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1296c:	681b      	ldr	r3, [r3, #0]
   1296e:	4618      	mov	r0, r3
   12970:	f04f 0100 	mov.w	r1, #0
   12974:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   12978:	f004 f9f2 	bl	16d60 <__aeabi_fmul>
   1297c:	4603      	mov	r3, r0
   1297e:	4618      	mov	r0, r3
   12980:	f003 fd5a 	bl	16438 <__aeabi_f2d>
   12984:	4602      	mov	r2, r0
   12986:	460b      	mov	r3, r1
   12988:	f04f 0000 	mov.w	r0, #0
   1298c:	f04f 0100 	mov.w	r1, #0
   12990:	f2c4 0114 	movt	r1, #16404	; 0x4014
   12994:	f003 fece 	bl	16734 <__aeabi_ddiv>
   12998:	4602      	mov	r2, r0
   1299a:	460b      	mov	r3, r1
   1299c:	4620      	mov	r0, r4
   1299e:	4629      	mov	r1, r5
   129a0:	f003 fbec 	bl	1617c <__adddf3>
   129a4:	4602      	mov	r2, r0
   129a6:	460b      	mov	r3, r1
   129a8:	4610      	mov	r0, r2
   129aa:	4619      	mov	r1, r3
   129ac:	f004 f87a 	bl	16aa4 <__aeabi_d2f>
   129b0:	4603      	mov	r3, r0
   129b2:	60bb      	str	r3, [r7, #8]
   129b4:	f240 1340 	movw	r3, #320	; 0x140
   129b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129bc:	68db      	ldr	r3, [r3, #12]
   129be:	4618      	mov	r0, r3
   129c0:	f003 fd3a 	bl	16438 <__aeabi_f2d>
   129c4:	4604      	mov	r4, r0
   129c6:	460d      	mov	r5, r1
   129c8:	68b8      	ldr	r0, [r7, #8]
   129ca:	f003 fd35 	bl	16438 <__aeabi_f2d>
   129ce:	4602      	mov	r2, r0
   129d0:	460b      	mov	r3, r1
   129d2:	4610      	mov	r0, r2
   129d4:	4619      	mov	r1, r3
   129d6:	a388      	add	r3, pc, #544	; (adr r3, 12bf8 <auto_nav+0x1d80>)
   129d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   129dc:	f003 fbce 	bl	1617c <__adddf3>
   129e0:	4602      	mov	r2, r0
   129e2:	460b      	mov	r3, r1
   129e4:	4610      	mov	r0, r2
   129e6:	4619      	mov	r1, r3
   129e8:	f001 fe26 	bl	14638 <pp_sin>
   129ec:	4602      	mov	r2, r0
   129ee:	460b      	mov	r3, r1
   129f0:	4610      	mov	r0, r2
   129f2:	4619      	mov	r1, r3
   129f4:	f04f 0200 	mov.w	r2, #0
   129f8:	f04f 0300 	mov.w	r3, #0
   129fc:	f2c4 0359 	movt	r3, #16473	; 0x4059
   12a00:	f003 fd6e 	bl	164e0 <__aeabi_dmul>
   12a04:	4602      	mov	r2, r0
   12a06:	460b      	mov	r3, r1
   12a08:	4620      	mov	r0, r4
   12a0a:	4629      	mov	r1, r5
   12a0c:	f003 fbb6 	bl	1617c <__adddf3>
   12a10:	4602      	mov	r2, r0
   12a12:	460b      	mov	r3, r1
   12a14:	4610      	mov	r0, r2
   12a16:	4619      	mov	r1, r3
   12a18:	f004 f844 	bl	16aa4 <__aeabi_d2f>
   12a1c:	4606      	mov	r6, r0
   12a1e:	f240 1340 	movw	r3, #320	; 0x140
   12a22:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a26:	691b      	ldr	r3, [r3, #16]
   12a28:	4618      	mov	r0, r3
   12a2a:	f003 fd05 	bl	16438 <__aeabi_f2d>
   12a2e:	4604      	mov	r4, r0
   12a30:	460d      	mov	r5, r1
   12a32:	68b8      	ldr	r0, [r7, #8]
   12a34:	f003 fd00 	bl	16438 <__aeabi_f2d>
   12a38:	4602      	mov	r2, r0
   12a3a:	460b      	mov	r3, r1
   12a3c:	4610      	mov	r0, r2
   12a3e:	4619      	mov	r1, r3
   12a40:	f001 fdfa 	bl	14638 <pp_sin>
   12a44:	4602      	mov	r2, r0
   12a46:	460b      	mov	r3, r1
   12a48:	4610      	mov	r0, r2
   12a4a:	4619      	mov	r1, r3
   12a4c:	f04f 0200 	mov.w	r2, #0
   12a50:	f04f 0300 	mov.w	r3, #0
   12a54:	f2c4 0359 	movt	r3, #16473	; 0x4059
   12a58:	f003 fd42 	bl	164e0 <__aeabi_dmul>
   12a5c:	4602      	mov	r2, r0
   12a5e:	460b      	mov	r3, r1
   12a60:	4620      	mov	r0, r4
   12a62:	4629      	mov	r1, r5
   12a64:	f003 fb8a 	bl	1617c <__adddf3>
   12a68:	4602      	mov	r2, r0
   12a6a:	460b      	mov	r3, r1
   12a6c:	4610      	mov	r0, r2
   12a6e:	4619      	mov	r1, r3
   12a70:	f004 f818 	bl	16aa4 <__aeabi_d2f>
   12a74:	4603      	mov	r3, r0
   12a76:	4630      	mov	r0, r6
   12a78:	4619      	mov	r1, r3
   12a7a:	f000 fbc1 	bl	13200 <fly_to_xy>
   12a7e:	68b8      	ldr	r0, [r7, #8]
   12a80:	f003 fcda 	bl	16438 <__aeabi_f2d>
   12a84:	4602      	mov	r2, r0
   12a86:	460b      	mov	r3, r1
   12a88:	a15b      	add	r1, pc, #364	; (adr r1, 12bf8 <auto_nav+0x1d80>)
   12a8a:	e9d1 0100 	ldrd	r0, r1, [r1]
   12a8e:	f003 fb73 	bl	16178 <__aeabi_dsub>
   12a92:	4602      	mov	r2, r0
   12a94:	460b      	mov	r3, r1
   12a96:	4610      	mov	r0, r2
   12a98:	4619      	mov	r1, r3
   12a9a:	a359      	add	r3, pc, #356	; (adr r3, 12c00 <auto_nav+0x1d88>)
   12a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
   12aa0:	f003 fe48 	bl	16734 <__aeabi_ddiv>
   12aa4:	4602      	mov	r2, r0
   12aa6:	460b      	mov	r3, r1
   12aa8:	4610      	mov	r0, r2
   12aaa:	4619      	mov	r1, r3
   12aac:	f04f 0200 	mov.w	r2, #0
   12ab0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   12ab4:	f2c4 0366 	movt	r3, #16486	; 0x4066
   12ab8:	f003 fd12 	bl	164e0 <__aeabi_dmul>
   12abc:	4602      	mov	r2, r0
   12abe:	460b      	mov	r3, r1
   12ac0:	4610      	mov	r0, r2
   12ac2:	4619      	mov	r1, r3
   12ac4:	f003 ffee 	bl	16aa4 <__aeabi_d2f>
   12ac8:	4602      	mov	r2, r0
   12aca:	f64a 032c 	movw	r3, #43052	; 0xa82c
   12ace:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ad2:	601a      	str	r2, [r3, #0]
   12ad4:	e012      	b.n	12afc <auto_nav+0x1c84>
   12ad6:	f64a 032c 	movw	r3, #43052	; 0xa82c
   12ada:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ade:	681b      	ldr	r3, [r3, #0]
   12ae0:	4618      	mov	r0, r3
   12ae2:	f04f 0100 	mov.w	r1, #0
   12ae6:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   12aea:	f004 f831 	bl	16b50 <__addsf3>
   12aee:	4603      	mov	r3, r0
   12af0:	461a      	mov	r2, r3
   12af2:	f64a 032c 	movw	r3, #43052	; 0xa82c
   12af6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12afa:	601a      	str	r2, [r3, #0]
   12afc:	f64a 032c 	movw	r3, #43052	; 0xa82c
   12b00:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b04:	681b      	ldr	r3, [r3, #0]
   12b06:	4618      	mov	r0, r3
   12b08:	f04f 0100 	mov.w	r1, #0
   12b0c:	f004 fac6 	bl	1709c <__aeabi_fcmplt>
   12b10:	4603      	mov	r3, r0
   12b12:	2b00      	cmp	r3, #0
   12b14:	d1df      	bne.n	12ad6 <auto_nav+0x1c5e>
   12b16:	e012      	b.n	12b3e <auto_nav+0x1cc6>
   12b18:	f64a 032c 	movw	r3, #43052	; 0xa82c
   12b1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b20:	681b      	ldr	r3, [r3, #0]
   12b22:	4618      	mov	r0, r3
   12b24:	f04f 0100 	mov.w	r1, #0
   12b28:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   12b2c:	f004 f80e 	bl	16b4c <__aeabi_fsub>
   12b30:	4603      	mov	r3, r0
   12b32:	461a      	mov	r2, r3
   12b34:	f64a 032c 	movw	r3, #43052	; 0xa82c
   12b38:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b3c:	601a      	str	r2, [r3, #0]
   12b3e:	f64a 032c 	movw	r3, #43052	; 0xa82c
   12b42:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b46:	681b      	ldr	r3, [r3, #0]
   12b48:	4618      	mov	r0, r3
   12b4a:	f04f 0100 	mov.w	r1, #0
   12b4e:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   12b52:	f004 fab7 	bl	170c4 <__aeabi_fcmpge>
   12b56:	4603      	mov	r3, r0
   12b58:	2b00      	cmp	r3, #0
   12b5a:	d1dd      	bne.n	12b18 <auto_nav+0x1ca0>
        if (Qdr(0)) NextStage();
   12b5c:	f64a 032c 	movw	r3, #43052	; 0xa82c
   12b60:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b64:	681b      	ldr	r3, [r3, #0]
   12b66:	4618      	mov	r0, r3
   12b68:	f04f 0100 	mov.w	r1, #0
   12b6c:	f004 fab4 	bl	170d8 <__aeabi_fcmpgt>
   12b70:	4603      	mov	r3, r0
   12b72:	2b00      	cmp	r3, #0
   12b74:	d100      	bne.n	12b78 <auto_nav+0x1d00>
        return;
   12b76:	e251      	b.n	1301c <auto_nav+0x21a4>
        nav_pitch = 0.000000;
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
        desired_altitude = waypoints[1].a;
        pre_climb = 0.;
        Circle(1, 100);
        if (Qdr(0)) NextStage();
   12b78:	f64a 032c 	movw	r3, #43052	; 0xa82c
   12b7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b80:	681b      	ldr	r3, [r3, #0]
   12b82:	4618      	mov	r0, r3
   12b84:	f04f 0100 	mov.w	r1, #0
   12b88:	f2c4 1120 	movt	r1, #16672	; 0x4120
   12b8c:	f004 fa86 	bl	1709c <__aeabi_fcmplt>
   12b90:	4603      	mov	r3, r0
   12b92:	2b00      	cmp	r3, #0
   12b94:	d100      	bne.n	12b98 <auto_nav+0x1d20>
        return;
   12b96:	e241      	b.n	1301c <auto_nav+0x21a4>
        nav_pitch = 0.000000;
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
        desired_altitude = waypoints[1].a;
        pre_climb = 0.;
        Circle(1, 100);
        if (Qdr(0)) NextStage();
   12b98:	f64a 0310 	movw	r3, #43024	; 0xa810
   12b9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ba0:	781b      	ldrb	r3, [r3, #0]
   12ba2:	3301      	adds	r3, #1
   12ba4:	b2da      	uxtb	r2, r3
   12ba6:	f64a 0310 	movw	r3, #43024	; 0xa810
   12baa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12bae:	701a      	strb	r2, [r3, #0]
   12bb0:	f64a 236c 	movw	r3, #43628	; 0xaa6c
   12bb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12bb8:	681a      	ldr	r2, [r3, #0]
   12bba:	f64a 0314 	movw	r3, #43028	; 0xa814
   12bbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12bc2:	601a      	str	r2, [r3, #0]
   12bc4:	f64a 2370 	movw	r3, #43632	; 0xaa70
   12bc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12bcc:	681a      	ldr	r2, [r3, #0]
   12bce:	f64a 0318 	movw	r3, #43032	; 0xa818
   12bd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12bd6:	601a      	str	r2, [r3, #0]
   12bd8:	f64a 0324 	movw	r3, #43044	; 0xa824
   12bdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12be0:	2200      	movs	r2, #0
   12be2:	801a      	strh	r2, [r3, #0]
   12be4:	f64a 0328 	movw	r3, #43048	; 0xa828
   12be8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12bec:	f04f 0200 	mov.w	r2, #0
   12bf0:	601a      	str	r2, [r3, #0]
   12bf2:	e213      	b.n	1301c <auto_nav+0x21a4>
   12bf4:	f3af 8000 	nop.w
   12bf8:	54442d18 	.word	0x54442d18
   12bfc:	3ff921fb 	.word	0x3ff921fb
   12c00:	54442d18 	.word	0x54442d18
   12c04:	400921fb 	.word	0x400921fb
        return;
    }
    else if (nav_stage == 2)
   12c08:	f64a 0310 	movw	r3, #43024	; 0xa810
   12c0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c10:	781b      	ldrb	r3, [r3, #0]
   12c12:	2b02      	cmp	r3, #2
   12c14:	f040 81ad 	bne.w	12f72 <auto_nav+0x20fa>
    {
         nav_stage = 2;
   12c18:	f64a 0310 	movw	r3, #43024	; 0xa810
   12c1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c20:	2202      	movs	r2, #2
   12c22:	701a      	strb	r2, [r3, #0]
          auto_pitch = FALSE;
   12c24:	f24a 439f 	movw	r3, #42143	; 0xa49f
   12c28:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c2c:	2200      	movs	r2, #0
   12c2e:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.000000;
   12c30:	f64a 033c 	movw	r3, #43068	; 0xa83c
   12c34:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c38:	f04f 0200 	mov.w	r2, #0
   12c3c:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12c3e:	f24a 439d 	movw	r3, #42141	; 0xa49d
   12c42:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c46:	2203      	movs	r2, #3
   12c48:	701a      	strb	r2, [r3, #0]
          desired_altitude = waypoints[4].a;
   12c4a:	f240 1340 	movw	r3, #320	; 0x140
   12c4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   12c54:	f240 133c 	movw	r3, #316	; 0x13c
   12c58:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c5c:	601a      	str	r2, [r3, #0]
          pre_climb = 0.;
   12c5e:	f64a 0304 	movw	r3, #43012	; 0xa804
   12c62:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c66:	f04f 0200 	mov.w	r2, #0
   12c6a:	601a      	str	r2, [r3, #0]
          Circle(4, 100);
   12c6c:	f64a 2370 	movw	r3, #43632	; 0xaa70
   12c70:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c74:	681a      	ldr	r2, [r3, #0]
   12c76:	f240 1340 	movw	r3, #320	; 0x140
   12c7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   12c80:	4610      	mov	r0, r2
   12c82:	4619      	mov	r1, r3
   12c84:	f003 ff62 	bl	16b4c <__aeabi_fsub>
   12c88:	4603      	mov	r3, r0
   12c8a:	4618      	mov	r0, r3
   12c8c:	f003 fbd4 	bl	16438 <__aeabi_f2d>
   12c90:	4604      	mov	r4, r0
   12c92:	460d      	mov	r5, r1
   12c94:	f64a 236c 	movw	r3, #43628	; 0xaa6c
   12c98:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c9c:	681a      	ldr	r2, [r3, #0]
   12c9e:	f240 1340 	movw	r3, #320	; 0x140
   12ca2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   12ca8:	4610      	mov	r0, r2
   12caa:	4619      	mov	r1, r3
   12cac:	f003 ff4e 	bl	16b4c <__aeabi_fsub>
   12cb0:	4603      	mov	r3, r0
   12cb2:	4618      	mov	r0, r3
   12cb4:	f003 fbc0 	bl	16438 <__aeabi_f2d>
   12cb8:	4602      	mov	r2, r0
   12cba:	460b      	mov	r3, r1
   12cbc:	4620      	mov	r0, r4
   12cbe:	4629      	mov	r1, r5
   12cc0:	f001 fbfa 	bl	144b8 <pp_atan2>
   12cc4:	4602      	mov	r2, r0
   12cc6:	460b      	mov	r3, r1
   12cc8:	4610      	mov	r0, r2
   12cca:	4619      	mov	r1, r3
   12ccc:	f003 feea 	bl	16aa4 <__aeabi_d2f>
   12cd0:	4603      	mov	r3, r0
   12cd2:	607b      	str	r3, [r7, #4]
   12cd4:	6878      	ldr	r0, [r7, #4]
   12cd6:	f003 fbaf 	bl	16438 <__aeabi_f2d>
   12cda:	4604      	mov	r4, r0
   12cdc:	460d      	mov	r5, r1
   12cde:	f64a 23a4 	movw	r3, #43684	; 0xaaa4
   12ce2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ce6:	681b      	ldr	r3, [r3, #0]
   12ce8:	4618      	mov	r0, r3
   12cea:	f04f 0100 	mov.w	r1, #0
   12cee:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   12cf2:	f004 f835 	bl	16d60 <__aeabi_fmul>
   12cf6:	4603      	mov	r3, r0
   12cf8:	4618      	mov	r0, r3
   12cfa:	f003 fb9d 	bl	16438 <__aeabi_f2d>
   12cfe:	4602      	mov	r2, r0
   12d00:	460b      	mov	r3, r1
   12d02:	f04f 0000 	mov.w	r0, #0
   12d06:	f04f 0100 	mov.w	r1, #0
   12d0a:	f2c4 0114 	movt	r1, #16404	; 0x4014
   12d0e:	f003 fd11 	bl	16734 <__aeabi_ddiv>
   12d12:	4602      	mov	r2, r0
   12d14:	460b      	mov	r3, r1
   12d16:	4620      	mov	r0, r4
   12d18:	4629      	mov	r1, r5
   12d1a:	f003 fa2f 	bl	1617c <__adddf3>
   12d1e:	4602      	mov	r2, r0
   12d20:	460b      	mov	r3, r1
   12d22:	4610      	mov	r0, r2
   12d24:	4619      	mov	r1, r3
   12d26:	f003 febd 	bl	16aa4 <__aeabi_d2f>
   12d2a:	4603      	mov	r3, r0
   12d2c:	603b      	str	r3, [r7, #0]
   12d2e:	f240 1340 	movw	r3, #320	; 0x140
   12d32:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   12d38:	4618      	mov	r0, r3
   12d3a:	f003 fb7d 	bl	16438 <__aeabi_f2d>
   12d3e:	4604      	mov	r4, r0
   12d40:	460d      	mov	r5, r1
   12d42:	6838      	ldr	r0, [r7, #0]
   12d44:	f003 fb78 	bl	16438 <__aeabi_f2d>
   12d48:	4602      	mov	r2, r0
   12d4a:	460b      	mov	r3, r1
   12d4c:	4610      	mov	r0, r2
   12d4e:	4619      	mov	r1, r3
   12d50:	a3b5      	add	r3, pc, #724	; (adr r3, 13028 <auto_nav+0x21b0>)
   12d52:	e9d3 2300 	ldrd	r2, r3, [r3]
   12d56:	f003 fa11 	bl	1617c <__adddf3>
   12d5a:	4602      	mov	r2, r0
   12d5c:	460b      	mov	r3, r1
   12d5e:	4610      	mov	r0, r2
   12d60:	4619      	mov	r1, r3
   12d62:	f001 fc69 	bl	14638 <pp_sin>
   12d66:	4602      	mov	r2, r0
   12d68:	460b      	mov	r3, r1
   12d6a:	4610      	mov	r0, r2
   12d6c:	4619      	mov	r1, r3
   12d6e:	f04f 0200 	mov.w	r2, #0
   12d72:	f04f 0300 	mov.w	r3, #0
   12d76:	f2c4 0359 	movt	r3, #16473	; 0x4059
   12d7a:	f003 fbb1 	bl	164e0 <__aeabi_dmul>
   12d7e:	4602      	mov	r2, r0
   12d80:	460b      	mov	r3, r1
   12d82:	4620      	mov	r0, r4
   12d84:	4629      	mov	r1, r5
   12d86:	f003 f9f9 	bl	1617c <__adddf3>
   12d8a:	4602      	mov	r2, r0
   12d8c:	460b      	mov	r3, r1
   12d8e:	4610      	mov	r0, r2
   12d90:	4619      	mov	r1, r3
   12d92:	f003 fe87 	bl	16aa4 <__aeabi_d2f>
   12d96:	4606      	mov	r6, r0
   12d98:	f240 1340 	movw	r3, #320	; 0x140
   12d9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   12da2:	4618      	mov	r0, r3
   12da4:	f003 fb48 	bl	16438 <__aeabi_f2d>
   12da8:	4604      	mov	r4, r0
   12daa:	460d      	mov	r5, r1
   12dac:	6838      	ldr	r0, [r7, #0]
   12dae:	f003 fb43 	bl	16438 <__aeabi_f2d>
   12db2:	4602      	mov	r2, r0
   12db4:	460b      	mov	r3, r1
   12db6:	4610      	mov	r0, r2
   12db8:	4619      	mov	r1, r3
   12dba:	f001 fc3d 	bl	14638 <pp_sin>
   12dbe:	4602      	mov	r2, r0
   12dc0:	460b      	mov	r3, r1
   12dc2:	4610      	mov	r0, r2
   12dc4:	4619      	mov	r1, r3
   12dc6:	f04f 0200 	mov.w	r2, #0
   12dca:	f04f 0300 	mov.w	r3, #0
   12dce:	f2c4 0359 	movt	r3, #16473	; 0x4059
   12dd2:	f003 fb85 	bl	164e0 <__aeabi_dmul>
   12dd6:	4602      	mov	r2, r0
   12dd8:	460b      	mov	r3, r1
   12dda:	4620      	mov	r0, r4
   12ddc:	4629      	mov	r1, r5
   12dde:	f003 f9cd 	bl	1617c <__adddf3>
   12de2:	4602      	mov	r2, r0
   12de4:	460b      	mov	r3, r1
   12de6:	4610      	mov	r0, r2
   12de8:	4619      	mov	r1, r3
   12dea:	f003 fe5b 	bl	16aa4 <__aeabi_d2f>
   12dee:	4603      	mov	r3, r0
   12df0:	4630      	mov	r0, r6
   12df2:	4619      	mov	r1, r3
   12df4:	f000 fa04 	bl	13200 <fly_to_xy>
   12df8:	6838      	ldr	r0, [r7, #0]
   12dfa:	f003 fb1d 	bl	16438 <__aeabi_f2d>
   12dfe:	4602      	mov	r2, r0
   12e00:	460b      	mov	r3, r1
   12e02:	a189      	add	r1, pc, #548	; (adr r1, 13028 <auto_nav+0x21b0>)
   12e04:	e9d1 0100 	ldrd	r0, r1, [r1]
   12e08:	f003 f9b6 	bl	16178 <__aeabi_dsub>
   12e0c:	4602      	mov	r2, r0
   12e0e:	460b      	mov	r3, r1
   12e10:	4610      	mov	r0, r2
   12e12:	4619      	mov	r1, r3
   12e14:	a386      	add	r3, pc, #536	; (adr r3, 13030 <auto_nav+0x21b8>)
   12e16:	e9d3 2300 	ldrd	r2, r3, [r3]
   12e1a:	f003 fc8b 	bl	16734 <__aeabi_ddiv>
   12e1e:	4602      	mov	r2, r0
   12e20:	460b      	mov	r3, r1
   12e22:	4610      	mov	r0, r2
   12e24:	4619      	mov	r1, r3
   12e26:	f04f 0200 	mov.w	r2, #0
   12e2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   12e2e:	f2c4 0366 	movt	r3, #16486	; 0x4066
   12e32:	f003 fb55 	bl	164e0 <__aeabi_dmul>
   12e36:	4602      	mov	r2, r0
   12e38:	460b      	mov	r3, r1
   12e3a:	4610      	mov	r0, r2
   12e3c:	4619      	mov	r1, r3
   12e3e:	f003 fe31 	bl	16aa4 <__aeabi_d2f>
   12e42:	4602      	mov	r2, r0
   12e44:	f64a 032c 	movw	r3, #43052	; 0xa82c
   12e48:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e4c:	601a      	str	r2, [r3, #0]
   12e4e:	e012      	b.n	12e76 <auto_nav+0x1ffe>
   12e50:	f64a 032c 	movw	r3, #43052	; 0xa82c
   12e54:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e58:	681b      	ldr	r3, [r3, #0]
   12e5a:	4618      	mov	r0, r3
   12e5c:	f04f 0100 	mov.w	r1, #0
   12e60:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   12e64:	f003 fe74 	bl	16b50 <__addsf3>
   12e68:	4603      	mov	r3, r0
   12e6a:	461a      	mov	r2, r3
   12e6c:	f64a 032c 	movw	r3, #43052	; 0xa82c
   12e70:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e74:	601a      	str	r2, [r3, #0]
   12e76:	f64a 032c 	movw	r3, #43052	; 0xa82c
   12e7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e7e:	681b      	ldr	r3, [r3, #0]
   12e80:	4618      	mov	r0, r3
   12e82:	f04f 0100 	mov.w	r1, #0
   12e86:	f004 f909 	bl	1709c <__aeabi_fcmplt>
   12e8a:	4603      	mov	r3, r0
   12e8c:	2b00      	cmp	r3, #0
   12e8e:	d1df      	bne.n	12e50 <auto_nav+0x1fd8>
   12e90:	e012      	b.n	12eb8 <auto_nav+0x2040>
   12e92:	f64a 032c 	movw	r3, #43052	; 0xa82c
   12e96:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e9a:	681b      	ldr	r3, [r3, #0]
   12e9c:	4618      	mov	r0, r3
   12e9e:	f04f 0100 	mov.w	r1, #0
   12ea2:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   12ea6:	f003 fe51 	bl	16b4c <__aeabi_fsub>
   12eaa:	4603      	mov	r3, r0
   12eac:	461a      	mov	r2, r3
   12eae:	f64a 032c 	movw	r3, #43052	; 0xa82c
   12eb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12eb6:	601a      	str	r2, [r3, #0]
   12eb8:	f64a 032c 	movw	r3, #43052	; 0xa82c
   12ebc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ec0:	681b      	ldr	r3, [r3, #0]
   12ec2:	4618      	mov	r0, r3
   12ec4:	f04f 0100 	mov.w	r1, #0
   12ec8:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   12ecc:	f004 f8fa 	bl	170c4 <__aeabi_fcmpge>
   12ed0:	4603      	mov	r3, r0
   12ed2:	2b00      	cmp	r3, #0
   12ed4:	d1dd      	bne.n	12e92 <auto_nav+0x201a>
          if (Qdr(180)) NextStage();
   12ed6:	f64a 032c 	movw	r3, #43052	; 0xa82c
   12eda:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ede:	681b      	ldr	r3, [r3, #0]
   12ee0:	4618      	mov	r0, r3
   12ee2:	f04f 0100 	mov.w	r1, #0
   12ee6:	f2c4 3134 	movt	r1, #17204	; 0x4334
   12eea:	f004 f8f5 	bl	170d8 <__aeabi_fcmpgt>
   12eee:	4603      	mov	r3, r0
   12ef0:	2b00      	cmp	r3, #0
   12ef2:	d100      	bne.n	12ef6 <auto_nav+0x207e>
          return;
   12ef4:	e092      	b.n	1301c <auto_nav+0x21a4>
          nav_pitch = 0.000000;
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
          desired_altitude = waypoints[4].a;
          pre_climb = 0.;
          Circle(4, 100);
          if (Qdr(180)) NextStage();
   12ef6:	f64a 032c 	movw	r3, #43052	; 0xa82c
   12efa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12efe:	681b      	ldr	r3, [r3, #0]
   12f00:	4618      	mov	r0, r3
   12f02:	f04f 0100 	mov.w	r1, #0
   12f06:	f2c4 313e 	movt	r1, #17214	; 0x433e
   12f0a:	f004 f8c7 	bl	1709c <__aeabi_fcmplt>
   12f0e:	4603      	mov	r3, r0
   12f10:	2b00      	cmp	r3, #0
   12f12:	d100      	bne.n	12f16 <auto_nav+0x209e>
          return;
   12f14:	e082      	b.n	1301c <auto_nav+0x21a4>
          nav_pitch = 0.000000;
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
          desired_altitude = waypoints[4].a;
          pre_climb = 0.;
          Circle(4, 100);
          if (Qdr(180)) NextStage();
   12f16:	f64a 0310 	movw	r3, #43024	; 0xa810
   12f1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f1e:	781b      	ldrb	r3, [r3, #0]
   12f20:	3301      	adds	r3, #1
   12f22:	b2da      	uxtb	r2, r3
   12f24:	f64a 0310 	movw	r3, #43024	; 0xa810
   12f28:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f2c:	701a      	strb	r2, [r3, #0]
   12f2e:	f64a 236c 	movw	r3, #43628	; 0xaa6c
   12f32:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f36:	681a      	ldr	r2, [r3, #0]
   12f38:	f64a 0314 	movw	r3, #43028	; 0xa814
   12f3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f40:	601a      	str	r2, [r3, #0]
   12f42:	f64a 2370 	movw	r3, #43632	; 0xaa70
   12f46:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f4a:	681a      	ldr	r2, [r3, #0]
   12f4c:	f64a 0318 	movw	r3, #43032	; 0xa818
   12f50:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f54:	601a      	str	r2, [r3, #0]
   12f56:	f64a 0324 	movw	r3, #43044	; 0xa824
   12f5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f5e:	2200      	movs	r2, #0
   12f60:	801a      	strh	r2, [r3, #0]
   12f62:	f64a 0328 	movw	r3, #43048	; 0xa828
   12f66:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f6a:	f04f 0200 	mov.w	r2, #0
   12f6e:	601a      	str	r2, [r3, #0]
   12f70:	e054      	b.n	1301c <auto_nav+0x21a4>
          return;
    }
    else if (nav_stage == 3) 
   12f72:	f64a 0310 	movw	r3, #43024	; 0xa810
   12f76:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f7a:	781b      	ldrb	r3, [r3, #0]
   12f7c:	2b03      	cmp	r3, #3
   12f7e:	d106      	bne.n	12f8e <auto_nav+0x2116>
    {
	  nav_stage = 3;
   12f80:	f64a 0310 	movw	r3, #43024	; 0xa810
   12f84:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f88:	2203      	movs	r2, #3
   12f8a:	701a      	strb	r2, [r3, #0]
          Goto(while_7)
   12f8c:	e44b      	b.n	12826 <auto_nav+0x19ae>
    }
    else if (nav_stage == 4)
   12f8e:	f64a 0310 	movw	r3, #43024	; 0xa810
   12f92:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f96:	781b      	ldrb	r3, [r3, #0]
   12f98:	2b04      	cmp	r3, #4
   12f9a:	d13f      	bne.n	1301c <auto_nav+0x21a4>
    {
	Label(endwhile_8)
	nav_stage = 4;
   12f9c:	f64a 0310 	movw	r3, #43024	; 0xa810
   12fa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12fa4:	2204      	movs	r2, #4
   12fa6:	701a      	strb	r2, [r3, #0]
        NextBlock()
   12fa8:	f64a 0311 	movw	r3, #43025	; 0xa811
   12fac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12fb0:	781b      	ldrb	r3, [r3, #0]
   12fb2:	3301      	adds	r3, #1
   12fb4:	b2da      	uxtb	r2, r3
   12fb6:	f64a 0311 	movw	r3, #43025	; 0xa811
   12fba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12fbe:	701a      	strb	r2, [r3, #0]
   12fc0:	f64a 0310 	movw	r3, #43024	; 0xa810
   12fc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12fc8:	2200      	movs	r2, #0
   12fca:	701a      	strb	r2, [r3, #0]
   12fcc:	f64a 0326 	movw	r3, #43046	; 0xa826
   12fd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12fd4:	2200      	movs	r2, #0
   12fd6:	801a      	strh	r2, [r3, #0]
   12fd8:	f64a 236c 	movw	r3, #43628	; 0xaa6c
   12fdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12fe0:	681a      	ldr	r2, [r3, #0]
   12fe2:	f64a 0314 	movw	r3, #43028	; 0xa814
   12fe6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12fea:	601a      	str	r2, [r3, #0]
   12fec:	f64a 2370 	movw	r3, #43632	; 0xaa70
   12ff0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ff4:	681a      	ldr	r2, [r3, #0]
   12ff6:	f64a 0318 	movw	r3, #43032	; 0xa818
   12ffa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ffe:	601a      	str	r2, [r3, #0]
   13000:	f64a 0324 	movw	r3, #43044	; 0xa824
   13004:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13008:	2200      	movs	r2, #0
   1300a:	801a      	strh	r2, [r3, #0]
   1300c:	f64a 0328 	movw	r3, #43048	; 0xa828
   13010:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13014:	f04f 0200 	mov.w	r2, #0
   13018:	601a      	str	r2, [r3, #0]
   1301a:	bf00      	nop
    else { }
}
else { }

//#endif
}
   1301c:	372c      	adds	r7, #44	; 0x2c
   1301e:	46bd      	mov	sp, r7
   13020:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13022:	bf00      	nop
   13024:	f3af 8000 	nop.w
   13028:	54442d18 	.word	0x54442d18
   1302c:	3ff921fb 	.word	0x3ff921fb
   13030:	54442d18 	.word	0x54442d18
   13034:	400921fb 	.word	0x400921fb

00013038 <approaching>:
const uint8_t nb_waypoint = NB_WAYPOINT;

struct point waypoints[NB_WAYPOINT+1] = WAYPOINTS;

static float carrot;
static bool_t approaching(uint8_t wp) {
   13038:	b590      	push	{r4, r7, lr}
   1303a:	b087      	sub	sp, #28
   1303c:	af00      	add	r7, sp, #0
   1303e:	4603      	mov	r3, r0
   13040:	71fb      	strb	r3, [r7, #7]
  float pw_x = waypoints[wp].x - estimator_x;
   13042:	79f9      	ldrb	r1, [r7, #7]
   13044:	f240 1240 	movw	r2, #320	; 0x140
   13048:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1304c:	460b      	mov	r3, r1
   1304e:	005b      	lsls	r3, r3, #1
   13050:	440b      	add	r3, r1
   13052:	009b      	lsls	r3, r3, #2
   13054:	4413      	add	r3, r2
   13056:	681a      	ldr	r2, [r3, #0]
   13058:	f64a 236c 	movw	r3, #43628	; 0xaa6c
   1305c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13060:	681b      	ldr	r3, [r3, #0]
   13062:	4610      	mov	r0, r2
   13064:	4619      	mov	r1, r3
   13066:	f003 fd71 	bl	16b4c <__aeabi_fsub>
   1306a:	4603      	mov	r3, r0
   1306c:	617b      	str	r3, [r7, #20]
  float pw_y = waypoints[wp].y - estimator_y;
   1306e:	79f9      	ldrb	r1, [r7, #7]
   13070:	f240 1240 	movw	r2, #320	; 0x140
   13074:	f2c2 0200 	movt	r2, #8192	; 0x2000
   13078:	460b      	mov	r3, r1
   1307a:	005b      	lsls	r3, r3, #1
   1307c:	440b      	add	r3, r1
   1307e:	009b      	lsls	r3, r3, #2
   13080:	4413      	add	r3, r2
   13082:	3304      	adds	r3, #4
   13084:	681a      	ldr	r2, [r3, #0]
   13086:	f64a 2370 	movw	r3, #43632	; 0xaa70
   1308a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1308e:	681b      	ldr	r3, [r3, #0]
   13090:	4610      	mov	r0, r2
   13092:	4619      	mov	r1, r3
   13094:	f003 fd5a 	bl	16b4c <__aeabi_fsub>
   13098:	4603      	mov	r3, r0
   1309a:	613b      	str	r3, [r7, #16]
  float scal_prod;//changes for PowerPc Fev-06

  dist2_to_wp = pw_x*pw_x + pw_y *pw_y;
   1309c:	6978      	ldr	r0, [r7, #20]
   1309e:	6979      	ldr	r1, [r7, #20]
   130a0:	f003 fe5e 	bl	16d60 <__aeabi_fmul>
   130a4:	4603      	mov	r3, r0
   130a6:	461c      	mov	r4, r3
   130a8:	6938      	ldr	r0, [r7, #16]
   130aa:	6939      	ldr	r1, [r7, #16]
   130ac:	f003 fe58 	bl	16d60 <__aeabi_fmul>
   130b0:	4603      	mov	r3, r0
   130b2:	4620      	mov	r0, r4
   130b4:	4619      	mov	r1, r3
   130b6:	f003 fd4b 	bl	16b50 <__addsf3>
   130ba:	4603      	mov	r3, r0
   130bc:	461a      	mov	r2, r3
   130be:	f64a 0344 	movw	r3, #43076	; 0xa844
   130c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   130c6:	601a      	str	r2, [r3, #0]
  carrot = CARROT * estimator_hspeed_mod;
   130c8:	f64a 23a4 	movw	r3, #43684	; 0xaaa4
   130cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   130d0:	681b      	ldr	r3, [r3, #0]
   130d2:	4618      	mov	r0, r3
   130d4:	f04f 0100 	mov.w	r1, #0
   130d8:	f2c4 01a0 	movt	r1, #16544	; 0x40a0
   130dc:	f003 fe40 	bl	16d60 <__aeabi_fmul>
   130e0:	4603      	mov	r3, r0
   130e2:	461a      	mov	r2, r3
   130e4:	f64a 0350 	movw	r3, #43088	; 0xa850
   130e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   130ec:	601a      	str	r2, [r3, #0]
  carrot = (carrot < 40 ? 40 : carrot);
   130ee:	f64a 0350 	movw	r3, #43088	; 0xa850
   130f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   130f6:	681b      	ldr	r3, [r3, #0]
   130f8:	4618      	mov	r0, r3
   130fa:	f04f 0100 	mov.w	r1, #0
   130fe:	f2c4 2120 	movt	r1, #16928	; 0x4220
   13102:	f003 ffcb 	bl	1709c <__aeabi_fcmplt>
   13106:	4603      	mov	r3, r0
   13108:	2b00      	cmp	r3, #0
   1310a:	d004      	beq.n	13116 <approaching+0xde>
   1310c:	f04f 0200 	mov.w	r2, #0
   13110:	f2c4 2220 	movt	r2, #16928	; 0x4220
   13114:	e004      	b.n	13120 <approaching+0xe8>
   13116:	f64a 0350 	movw	r3, #43088	; 0xa850
   1311a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1311e:	681a      	ldr	r2, [r3, #0]
   13120:	f64a 0350 	movw	r3, #43088	; 0xa850
   13124:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13128:	601a      	str	r2, [r3, #0]
  if (dist2_to_wp < carrot*carrot)
   1312a:	f64a 0350 	movw	r3, #43088	; 0xa850
   1312e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13132:	681a      	ldr	r2, [r3, #0]
   13134:	f64a 0350 	movw	r3, #43088	; 0xa850
   13138:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1313c:	681b      	ldr	r3, [r3, #0]
   1313e:	4610      	mov	r0, r2
   13140:	4619      	mov	r1, r3
   13142:	f003 fe0d 	bl	16d60 <__aeabi_fmul>
   13146:	4603      	mov	r3, r0
   13148:	461a      	mov	r2, r3
   1314a:	f64a 0344 	movw	r3, #43076	; 0xa844
   1314e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13152:	681b      	ldr	r3, [r3, #0]
   13154:	4610      	mov	r0, r2
   13156:	4619      	mov	r1, r3
   13158:	f003 ffbe 	bl	170d8 <__aeabi_fcmpgt>
   1315c:	4603      	mov	r3, r0
   1315e:	2b00      	cmp	r3, #0
   13160:	d001      	beq.n	13166 <approaching+0x12e>
    return TRUE;
   13162:	2301      	movs	r3, #1
   13164:	e048      	b.n	131f8 <approaching+0x1c0>

  scal_prod = (waypoints[wp].x - last_x) * pw_x + (waypoints[wp].y - last_y) * pw_y;
   13166:	79f9      	ldrb	r1, [r7, #7]
   13168:	f240 1240 	movw	r2, #320	; 0x140
   1316c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   13170:	460b      	mov	r3, r1
   13172:	005b      	lsls	r3, r3, #1
   13174:	440b      	add	r3, r1
   13176:	009b      	lsls	r3, r3, #2
   13178:	4413      	add	r3, r2
   1317a:	681a      	ldr	r2, [r3, #0]
   1317c:	f64a 0314 	movw	r3, #43028	; 0xa814
   13180:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13184:	681b      	ldr	r3, [r3, #0]
   13186:	4610      	mov	r0, r2
   13188:	4619      	mov	r1, r3
   1318a:	f003 fcdf 	bl	16b4c <__aeabi_fsub>
   1318e:	4603      	mov	r3, r0
   13190:	4618      	mov	r0, r3
   13192:	6979      	ldr	r1, [r7, #20]
   13194:	f003 fde4 	bl	16d60 <__aeabi_fmul>
   13198:	4603      	mov	r3, r0
   1319a:	461c      	mov	r4, r3
   1319c:	79f9      	ldrb	r1, [r7, #7]
   1319e:	f240 1240 	movw	r2, #320	; 0x140
   131a2:	f2c2 0200 	movt	r2, #8192	; 0x2000
   131a6:	460b      	mov	r3, r1
   131a8:	005b      	lsls	r3, r3, #1
   131aa:	440b      	add	r3, r1
   131ac:	009b      	lsls	r3, r3, #2
   131ae:	4413      	add	r3, r2
   131b0:	3304      	adds	r3, #4
   131b2:	681a      	ldr	r2, [r3, #0]
   131b4:	f64a 0318 	movw	r3, #43032	; 0xa818
   131b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   131bc:	681b      	ldr	r3, [r3, #0]
   131be:	4610      	mov	r0, r2
   131c0:	4619      	mov	r1, r3
   131c2:	f003 fcc3 	bl	16b4c <__aeabi_fsub>
   131c6:	4603      	mov	r3, r0
   131c8:	4618      	mov	r0, r3
   131ca:	6939      	ldr	r1, [r7, #16]
   131cc:	f003 fdc8 	bl	16d60 <__aeabi_fmul>
   131d0:	4603      	mov	r3, r0
   131d2:	4620      	mov	r0, r4
   131d4:	4619      	mov	r1, r3
   131d6:	f003 fcbb 	bl	16b50 <__addsf3>
   131da:	4603      	mov	r3, r0
   131dc:	60fb      	str	r3, [r7, #12]
  
  return (scal_prod < 0);
   131de:	2301      	movs	r3, #1
   131e0:	461c      	mov	r4, r3
   131e2:	68f8      	ldr	r0, [r7, #12]
   131e4:	f04f 0100 	mov.w	r1, #0
   131e8:	f003 ff58 	bl	1709c <__aeabi_fcmplt>
   131ec:	4603      	mov	r3, r0
   131ee:	2b00      	cmp	r3, #0
   131f0:	d101      	bne.n	131f6 <approaching+0x1be>
   131f2:	2300      	movs	r3, #0
   131f4:	461c      	mov	r4, r3
   131f6:	b2e3      	uxtb	r3, r4
}
   131f8:	4618      	mov	r0, r3
   131fa:	371c      	adds	r7, #28
   131fc:	46bd      	mov	sp, r7
   131fe:	bd90      	pop	{r4, r7, pc}

00013200 <fly_to_xy>:

static inline void fly_to_xy(float x, float y) 
{ 
   13200:	b5b0      	push	{r4, r5, r7, lr}
   13202:	b082      	sub	sp, #8
   13204:	af00      	add	r7, sp, #0
   13206:	6078      	str	r0, [r7, #4]
   13208:	6039      	str	r1, [r7, #0]
  desired_x = x;
   1320a:	f64a 0330 	movw	r3, #43056	; 0xa830
   1320e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13212:	687a      	ldr	r2, [r7, #4]
   13214:	601a      	str	r2, [r3, #0]
  desired_y = y;
   13216:	f64a 0334 	movw	r3, #43060	; 0xa834
   1321a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1321e:	683a      	ldr	r2, [r7, #0]
   13220:	601a      	str	r2, [r3, #0]
  desired_course = M_PI/2.-atan2(y - estimator_y, x - estimator_x);
   13222:	f64a 2370 	movw	r3, #43632	; 0xaa70
   13226:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1322a:	681b      	ldr	r3, [r3, #0]
   1322c:	6838      	ldr	r0, [r7, #0]
   1322e:	4619      	mov	r1, r3
   13230:	f003 fc8c 	bl	16b4c <__aeabi_fsub>
   13234:	4603      	mov	r3, r0
   13236:	4618      	mov	r0, r3
   13238:	f003 f8fe 	bl	16438 <__aeabi_f2d>
   1323c:	4604      	mov	r4, r0
   1323e:	460d      	mov	r5, r1
   13240:	f64a 236c 	movw	r3, #43628	; 0xaa6c
   13244:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13248:	681b      	ldr	r3, [r3, #0]
   1324a:	6878      	ldr	r0, [r7, #4]
   1324c:	4619      	mov	r1, r3
   1324e:	f003 fc7d 	bl	16b4c <__aeabi_fsub>
   13252:	4603      	mov	r3, r0
   13254:	4618      	mov	r0, r3
   13256:	f003 f8ef 	bl	16438 <__aeabi_f2d>
   1325a:	4602      	mov	r2, r0
   1325c:	460b      	mov	r3, r1
   1325e:	4620      	mov	r0, r4
   13260:	4629      	mov	r1, r5
   13262:	f001 f929 	bl	144b8 <pp_atan2>
   13266:	4602      	mov	r2, r0
   13268:	460b      	mov	r3, r1
   1326a:	a10b      	add	r1, pc, #44	; (adr r1, 13298 <fly_to_xy+0x98>)
   1326c:	e9d1 0100 	ldrd	r0, r1, [r1]
   13270:	f002 ff82 	bl	16178 <__aeabi_dsub>
   13274:	4602      	mov	r2, r0
   13276:	460b      	mov	r3, r1
   13278:	4610      	mov	r0, r2
   1327a:	4619      	mov	r1, r3
   1327c:	f003 fc12 	bl	16aa4 <__aeabi_d2f>
   13280:	4602      	mov	r2, r0
   13282:	f24a 73fc 	movw	r3, #43004	; 0xa7fc
   13286:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1328a:	601a      	str	r2, [r3, #0]
}
   1328c:	3708      	adds	r7, #8
   1328e:	46bd      	mov	sp, r7
   13290:	bdb0      	pop	{r4, r5, r7, pc}
   13292:	bf00      	nop
   13294:	f3af 8000 	nop.w
   13298:	54442d18 	.word	0x54442d18
   1329c:	3ff921fb 	.word	0x3ff921fb

000132a0 <fly_to>:

static void fly_to(uint8_t wp) { 
   132a0:	b580      	push	{r7, lr}
   132a2:	b082      	sub	sp, #8
   132a4:	af00      	add	r7, sp, #0
   132a6:	4603      	mov	r3, r0
   132a8:	71fb      	strb	r3, [r7, #7]
  fly_to_xy(waypoints[wp].x, waypoints[wp].y);
   132aa:	79f9      	ldrb	r1, [r7, #7]
   132ac:	f240 1240 	movw	r2, #320	; 0x140
   132b0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   132b4:	460b      	mov	r3, r1
   132b6:	005b      	lsls	r3, r3, #1
   132b8:	440b      	add	r3, r1
   132ba:	009b      	lsls	r3, r3, #2
   132bc:	4413      	add	r3, r2
   132be:	6818      	ldr	r0, [r3, #0]
   132c0:	79f9      	ldrb	r1, [r7, #7]
   132c2:	f240 1240 	movw	r2, #320	; 0x140
   132c6:	f2c2 0200 	movt	r2, #8192	; 0x2000
   132ca:	460b      	mov	r3, r1
   132cc:	005b      	lsls	r3, r3, #1
   132ce:	440b      	add	r3, r1
   132d0:	009b      	lsls	r3, r3, #2
   132d2:	4413      	add	r3, r2
   132d4:	3304      	adds	r3, #4
   132d6:	681b      	ldr	r3, [r3, #0]
   132d8:	4619      	mov	r1, r3
   132da:	f7ff ff91 	bl	13200 <fly_to_xy>
}
   132de:	3708      	adds	r7, #8
   132e0:	46bd      	mov	sp, r7
   132e2:	bd80      	pop	{r7, pc}

000132e4 <route_to>:

static float alpha, leg;
static void route_to(uint8_t _last_wp, uint8_t wp) 
{
   132e4:	b5b0      	push	{r4, r5, r7, lr}
   132e6:	b088      	sub	sp, #32
   132e8:	af00      	add	r7, sp, #0
   132ea:	4602      	mov	r2, r0
   132ec:	460b      	mov	r3, r1
   132ee:	71fa      	strb	r2, [r7, #7]
   132f0:	71bb      	strb	r3, [r7, #6]
  float last_wp_x = waypoints[_last_wp].x;
   132f2:	79f9      	ldrb	r1, [r7, #7]
   132f4:	f240 1240 	movw	r2, #320	; 0x140
   132f8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   132fc:	460b      	mov	r3, r1
   132fe:	005b      	lsls	r3, r3, #1
   13300:	440b      	add	r3, r1
   13302:	009b      	lsls	r3, r3, #2
   13304:	4413      	add	r3, r2
   13306:	681b      	ldr	r3, [r3, #0]
   13308:	61fb      	str	r3, [r7, #28]
  float last_wp_y = waypoints[_last_wp].y;
   1330a:	79f9      	ldrb	r1, [r7, #7]
   1330c:	f240 1240 	movw	r2, #320	; 0x140
   13310:	f2c2 0200 	movt	r2, #8192	; 0x2000
   13314:	460b      	mov	r3, r1
   13316:	005b      	lsls	r3, r3, #1
   13318:	440b      	add	r3, r1
   1331a:	009b      	lsls	r3, r3, #2
   1331c:	4413      	add	r3, r2
   1331e:	3304      	adds	r3, #4
   13320:	681b      	ldr	r3, [r3, #0]
   13322:	61bb      	str	r3, [r7, #24]
  float leg_x = waypoints[wp].x - last_wp_x;
   13324:	79b9      	ldrb	r1, [r7, #6]
   13326:	f240 1240 	movw	r2, #320	; 0x140
   1332a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1332e:	460b      	mov	r3, r1
   13330:	005b      	lsls	r3, r3, #1
   13332:	440b      	add	r3, r1
   13334:	009b      	lsls	r3, r3, #2
   13336:	4413      	add	r3, r2
   13338:	681b      	ldr	r3, [r3, #0]
   1333a:	4618      	mov	r0, r3
   1333c:	69f9      	ldr	r1, [r7, #28]
   1333e:	f003 fc05 	bl	16b4c <__aeabi_fsub>
   13342:	4603      	mov	r3, r0
   13344:	617b      	str	r3, [r7, #20]
  float leg_y = waypoints[wp].y - last_wp_y;
   13346:	79b9      	ldrb	r1, [r7, #6]
   13348:	f240 1240 	movw	r2, #320	; 0x140
   1334c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   13350:	460b      	mov	r3, r1
   13352:	005b      	lsls	r3, r3, #1
   13354:	440b      	add	r3, r1
   13356:	009b      	lsls	r3, r3, #2
   13358:	4413      	add	r3, r2
   1335a:	3304      	adds	r3, #4
   1335c:	681b      	ldr	r3, [r3, #0]
   1335e:	4618      	mov	r0, r3
   13360:	69b9      	ldr	r1, [r7, #24]
   13362:	f003 fbf3 	bl	16b4c <__aeabi_fsub>
   13366:	4603      	mov	r3, r0
   13368:	613b      	str	r3, [r7, #16]
  float leg2 = leg_x * leg_x + leg_y * leg_y;
   1336a:	6978      	ldr	r0, [r7, #20]
   1336c:	6979      	ldr	r1, [r7, #20]
   1336e:	f003 fcf7 	bl	16d60 <__aeabi_fmul>
   13372:	4603      	mov	r3, r0
   13374:	461c      	mov	r4, r3
   13376:	6938      	ldr	r0, [r7, #16]
   13378:	6939      	ldr	r1, [r7, #16]
   1337a:	f003 fcf1 	bl	16d60 <__aeabi_fmul>
   1337e:	4603      	mov	r3, r0
   13380:	4620      	mov	r0, r4
   13382:	4619      	mov	r1, r3
   13384:	f003 fbe4 	bl	16b50 <__addsf3>
   13388:	4603      	mov	r3, r0
   1338a:	60fb      	str	r3, [r7, #12]
  alpha = ((estimator_x - last_wp_x) * leg_x + (estimator_y - last_wp_y) * leg_y) / leg2;
   1338c:	f64a 236c 	movw	r3, #43628	; 0xaa6c
   13390:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13394:	681b      	ldr	r3, [r3, #0]
   13396:	4618      	mov	r0, r3
   13398:	69f9      	ldr	r1, [r7, #28]
   1339a:	f003 fbd7 	bl	16b4c <__aeabi_fsub>
   1339e:	4603      	mov	r3, r0
   133a0:	4618      	mov	r0, r3
   133a2:	6979      	ldr	r1, [r7, #20]
   133a4:	f003 fcdc 	bl	16d60 <__aeabi_fmul>
   133a8:	4603      	mov	r3, r0
   133aa:	461c      	mov	r4, r3
   133ac:	f64a 2370 	movw	r3, #43632	; 0xaa70
   133b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   133b4:	681b      	ldr	r3, [r3, #0]
   133b6:	4618      	mov	r0, r3
   133b8:	69b9      	ldr	r1, [r7, #24]
   133ba:	f003 fbc7 	bl	16b4c <__aeabi_fsub>
   133be:	4603      	mov	r3, r0
   133c0:	4618      	mov	r0, r3
   133c2:	6939      	ldr	r1, [r7, #16]
   133c4:	f003 fccc 	bl	16d60 <__aeabi_fmul>
   133c8:	4603      	mov	r3, r0
   133ca:	4620      	mov	r0, r4
   133cc:	4619      	mov	r1, r3
   133ce:	f003 fbbf 	bl	16b50 <__addsf3>
   133d2:	4603      	mov	r3, r0
   133d4:	4618      	mov	r0, r3
   133d6:	68f9      	ldr	r1, [r7, #12]
   133d8:	f003 fd76 	bl	16ec8 <__aeabi_fdiv>
   133dc:	4603      	mov	r3, r0
   133de:	461a      	mov	r2, r3
   133e0:	f64a 0354 	movw	r3, #43092	; 0xa854
   133e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   133e8:	601a      	str	r2, [r3, #0]
  alpha = Max(alpha, 0.);
   133ea:	f64a 0354 	movw	r3, #43092	; 0xa854
   133ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   133f2:	681b      	ldr	r3, [r3, #0]
   133f4:	4618      	mov	r0, r3
   133f6:	f04f 0100 	mov.w	r1, #0
   133fa:	f003 fe63 	bl	170c4 <__aeabi_fcmpge>
   133fe:	4603      	mov	r3, r0
   13400:	2b00      	cmp	r3, #0
   13402:	d005      	beq.n	13410 <route_to+0x12c>
   13404:	f64a 0354 	movw	r3, #43092	; 0xa854
   13408:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1340c:	681a      	ldr	r2, [r3, #0]
   1340e:	e001      	b.n	13414 <route_to+0x130>
   13410:	f04f 0200 	mov.w	r2, #0
   13414:	f64a 0354 	movw	r3, #43092	; 0xa854
   13418:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1341c:	601a      	str	r2, [r3, #0]
  leg = sqrt(leg2);
   1341e:	68f8      	ldr	r0, [r7, #12]
   13420:	f003 f80a 	bl	16438 <__aeabi_f2d>
   13424:	4602      	mov	r2, r0
   13426:	460b      	mov	r3, r1
   13428:	4610      	mov	r0, r2
   1342a:	4619      	mov	r1, r3
   1342c:	f001 f9f4 	bl	14818 <pp_sqrt>
   13430:	4602      	mov	r2, r0
   13432:	460b      	mov	r3, r1
   13434:	4610      	mov	r0, r2
   13436:	4619      	mov	r1, r3
   13438:	f003 fb34 	bl	16aa4 <__aeabi_d2f>
   1343c:	4602      	mov	r2, r0
   1343e:	f64a 0358 	movw	r3, #43096	; 0xa858
   13442:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13446:	601a      	str	r2, [r3, #0]
  alpha += Max(carrot / leg, 0.); /* carrot computed in approaching() */
   13448:	f64a 0354 	movw	r3, #43092	; 0xa854
   1344c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13450:	681b      	ldr	r3, [r3, #0]
   13452:	4618      	mov	r0, r3
   13454:	f002 fff0 	bl	16438 <__aeabi_f2d>
   13458:	4604      	mov	r4, r0
   1345a:	460d      	mov	r5, r1
   1345c:	f64a 0350 	movw	r3, #43088	; 0xa850
   13460:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13464:	681a      	ldr	r2, [r3, #0]
   13466:	f64a 0358 	movw	r3, #43096	; 0xa858
   1346a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1346e:	681b      	ldr	r3, [r3, #0]
   13470:	4610      	mov	r0, r2
   13472:	4619      	mov	r1, r3
   13474:	f003 fd28 	bl	16ec8 <__aeabi_fdiv>
   13478:	4603      	mov	r3, r0
   1347a:	4618      	mov	r0, r3
   1347c:	f04f 0100 	mov.w	r1, #0
   13480:	f003 fe20 	bl	170c4 <__aeabi_fcmpge>
   13484:	4603      	mov	r3, r0
   13486:	2b00      	cmp	r3, #0
   13488:	d014      	beq.n	134b4 <route_to+0x1d0>
   1348a:	f64a 0350 	movw	r3, #43088	; 0xa850
   1348e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13492:	681a      	ldr	r2, [r3, #0]
   13494:	f64a 0358 	movw	r3, #43096	; 0xa858
   13498:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1349c:	681b      	ldr	r3, [r3, #0]
   1349e:	4610      	mov	r0, r2
   134a0:	4619      	mov	r1, r3
   134a2:	f003 fd11 	bl	16ec8 <__aeabi_fdiv>
   134a6:	4603      	mov	r3, r0
   134a8:	4618      	mov	r0, r3
   134aa:	f002 ffc5 	bl	16438 <__aeabi_f2d>
   134ae:	4602      	mov	r2, r0
   134b0:	460b      	mov	r3, r1
   134b2:	e003      	b.n	134bc <route_to+0x1d8>
   134b4:	f04f 0200 	mov.w	r2, #0
   134b8:	f04f 0300 	mov.w	r3, #0
   134bc:	4620      	mov	r0, r4
   134be:	4629      	mov	r1, r5
   134c0:	f002 fe5c 	bl	1617c <__adddf3>
   134c4:	4602      	mov	r2, r0
   134c6:	460b      	mov	r3, r1
   134c8:	4610      	mov	r0, r2
   134ca:	4619      	mov	r1, r3
   134cc:	f003 faea 	bl	16aa4 <__aeabi_d2f>
   134d0:	4602      	mov	r2, r0
   134d2:	f64a 0354 	movw	r3, #43092	; 0xa854
   134d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   134da:	601a      	str	r2, [r3, #0]
  alpha = Min(1., alpha);
   134dc:	f64a 0354 	movw	r3, #43092	; 0xa854
   134e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   134e4:	681b      	ldr	r3, [r3, #0]
   134e6:	4618      	mov	r0, r3
   134e8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   134ec:	f003 fdea 	bl	170c4 <__aeabi_fcmpge>
   134f0:	4603      	mov	r3, r0
   134f2:	2b00      	cmp	r3, #0
   134f4:	d002      	beq.n	134fc <route_to+0x218>
   134f6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   134fa:	e004      	b.n	13506 <route_to+0x222>
   134fc:	f64a 0354 	movw	r3, #43092	; 0xa854
   13500:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13504:	681a      	ldr	r2, [r3, #0]
   13506:	f64a 0354 	movw	r3, #43092	; 0xa854
   1350a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1350e:	601a      	str	r2, [r3, #0]
  fly_to_xy(last_wp_x + alpha*leg_x, last_wp_y + alpha*leg_y);
   13510:	f64a 0354 	movw	r3, #43092	; 0xa854
   13514:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13518:	681b      	ldr	r3, [r3, #0]
   1351a:	4618      	mov	r0, r3
   1351c:	6979      	ldr	r1, [r7, #20]
   1351e:	f003 fc1f 	bl	16d60 <__aeabi_fmul>
   13522:	4603      	mov	r3, r0
   13524:	4618      	mov	r0, r3
   13526:	69f9      	ldr	r1, [r7, #28]
   13528:	f003 fb12 	bl	16b50 <__addsf3>
   1352c:	4603      	mov	r3, r0
   1352e:	461c      	mov	r4, r3
   13530:	f64a 0354 	movw	r3, #43092	; 0xa854
   13534:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13538:	681b      	ldr	r3, [r3, #0]
   1353a:	4618      	mov	r0, r3
   1353c:	6939      	ldr	r1, [r7, #16]
   1353e:	f003 fc0f 	bl	16d60 <__aeabi_fmul>
   13542:	4603      	mov	r3, r0
   13544:	4618      	mov	r0, r3
   13546:	69b9      	ldr	r1, [r7, #24]
   13548:	f003 fb02 	bl	16b50 <__addsf3>
   1354c:	4603      	mov	r3, r0
   1354e:	4620      	mov	r0, r4
   13550:	4619      	mov	r1, r3
   13552:	f7ff fe55 	bl	13200 <fly_to_xy>
}
   13556:	3720      	adds	r7, #32
   13558:	46bd      	mov	sp, r7
   1355a:	bdb0      	pop	{r4, r5, r7, pc}

0001355c <compute_dist2_to_home>:
  float last_alt = waypoints[_last_wp].a;
  desired_altitude = last_alt + alpha * (waypoints[wp].a - last_alt);
  pre_climb = NOMINAL_AIRSPEED * (waypoints[wp].a - last_alt) / leg;
}*/

static inline void compute_dist2_to_home(void) {
   1355c:	b590      	push	{r4, r7, lr}
   1355e:	b083      	sub	sp, #12
   13560:	af00      	add	r7, sp, #0
  float ph_x = waypoints[WP_HOME].x - estimator_x;
   13562:	f240 1340 	movw	r3, #320	; 0x140
   13566:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1356a:	681a      	ldr	r2, [r3, #0]
   1356c:	f64a 236c 	movw	r3, #43628	; 0xaa6c
   13570:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13574:	681b      	ldr	r3, [r3, #0]
   13576:	4610      	mov	r0, r2
   13578:	4619      	mov	r1, r3
   1357a:	f003 fae7 	bl	16b4c <__aeabi_fsub>
   1357e:	4603      	mov	r3, r0
   13580:	607b      	str	r3, [r7, #4]
  float ph_y = waypoints[WP_HOME].y - estimator_y;
   13582:	f240 1340 	movw	r3, #320	; 0x140
   13586:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1358a:	685a      	ldr	r2, [r3, #4]
   1358c:	f64a 2370 	movw	r3, #43632	; 0xaa70
   13590:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13594:	681b      	ldr	r3, [r3, #0]
   13596:	4610      	mov	r0, r2
   13598:	4619      	mov	r1, r3
   1359a:	f003 fad7 	bl	16b4c <__aeabi_fsub>
   1359e:	4603      	mov	r3, r0
   135a0:	603b      	str	r3, [r7, #0]
  dist2_to_home = ph_x*ph_x + ph_y *ph_y;
   135a2:	6878      	ldr	r0, [r7, #4]
   135a4:	6879      	ldr	r1, [r7, #4]
   135a6:	f003 fbdb 	bl	16d60 <__aeabi_fmul>
   135aa:	4603      	mov	r3, r0
   135ac:	461c      	mov	r4, r3
   135ae:	6838      	ldr	r0, [r7, #0]
   135b0:	6839      	ldr	r1, [r7, #0]
   135b2:	f003 fbd5 	bl	16d60 <__aeabi_fmul>
   135b6:	4603      	mov	r3, r0
   135b8:	4620      	mov	r0, r4
   135ba:	4619      	mov	r1, r3
   135bc:	f003 fac8 	bl	16b50 <__addsf3>
   135c0:	4603      	mov	r3, r0
   135c2:	461a      	mov	r2, r3
   135c4:	f64a 0348 	movw	r3, #43080	; 0xa848
   135c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   135cc:	601a      	str	r2, [r3, #0]
  too_far_from_home = dist2_to_home > (MAX_DIST_FROM_HOME*MAX_DIST_FROM_HOME);
   135ce:	f64a 0348 	movw	r3, #43080	; 0xa848
   135d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   135d6:	681b      	ldr	r3, [r3, #0]
   135d8:	2201      	movs	r2, #1
   135da:	4614      	mov	r4, r2
   135dc:	4618      	mov	r0, r3
   135de:	f44f 5110 	mov.w	r1, #9216	; 0x2400
   135e2:	f6c4 0174 	movt	r1, #18548	; 0x4874
   135e6:	f003 fd77 	bl	170d8 <__aeabi_fcmpgt>
   135ea:	4603      	mov	r3, r0
   135ec:	2b00      	cmp	r3, #0
   135ee:	d101      	bne.n	135f4 <compute_dist2_to_home+0x98>
   135f0:	2300      	movs	r3, #0
   135f2:	461c      	mov	r4, r3
   135f4:	b2e3      	uxtb	r3, r4
   135f6:	461a      	mov	r2, r3
   135f8:	f64a 034c 	movw	r3, #43084	; 0xa84c
   135fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13600:	701a      	strb	r2, [r3, #0]
}
   13602:	370c      	adds	r7, #12
   13604:	46bd      	mov	sp, r7
   13606:	bd90      	pop	{r4, r7, pc}

00013608 <nav_home>:

void nav_home(void) {
   13608:	b580      	push	{r7, lr}
   1360a:	af00      	add	r7, sp, #0
  //Circle(WP_HOME, 50); /* FIXME: radius should be defined elsewhere */
  nav_pitch = 0.; /* Nominal speed */ 
   1360c:	f64a 033c 	movw	r3, #43068	; 0xa83c
   13610:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13614:	f04f 0200 	mov.w	r2, #0
   13618:	601a      	str	r2, [r3, #0]
  vertical_mode = VERTICAL_MODE_AUTO_ALT;
   1361a:	f24a 439d 	movw	r3, #42141	; 0xa49d
   1361e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13622:	2203      	movs	r2, #3
   13624:	701a      	strb	r2, [r3, #0]
  desired_altitude = GROUND_ALT+50;
   13626:	f240 133c 	movw	r3, #316	; 0x13c
   1362a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1362e:	f04f 0200 	mov.w	r2, #0
   13632:	f2c4 322f 	movt	r2, #17199	; 0x432f
   13636:	601a      	str	r2, [r3, #0]
  compute_dist2_to_home();
   13638:	f7ff ff90 	bl	1355c <compute_dist2_to_home>
  dist2_to_wp = dist2_to_home;
   1363c:	f64a 0348 	movw	r3, #43080	; 0xa848
   13640:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13644:	681a      	ldr	r2, [r3, #0]
   13646:	f64a 0344 	movw	r3, #43076	; 0xa844
   1364a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1364e:	601a      	str	r2, [r3, #0]
}
   13650:	bd80      	pop	{r7, pc}
   13652:	bf00      	nop

00013654 <nav_update>:

void nav_update(void) {
   13654:	b580      	push	{r7, lr}
   13656:	af00      	add	r7, sp, #0
  compute_dist2_to_home();
   13658:	f7ff ff80 	bl	1355c <compute_dist2_to_home>

  auto_nav();
   1365c:	f7fd fc0c 	bl	10e78 <auto_nav>
}
   13660:	bd80      	pop	{r7, pc}
   13662:	bf00      	nop

00013664 <nav_init>:


void nav_init(void) {
   13664:	b480      	push	{r7}
   13666:	af00      	add	r7, sp, #0
  nav_block = 0;
   13668:	f64a 0311 	movw	r3, #43025	; 0xa811
   1366c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13670:	2200      	movs	r2, #0
   13672:	701a      	strb	r2, [r3, #0]
  nav_stage = 0;
   13674:	f64a 0310 	movw	r3, #43024	; 0xa810
   13678:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1367c:	2200      	movs	r2, #0
   1367e:	701a      	strb	r2, [r3, #0]
}
   13680:	46bd      	mov	sp, r7
   13682:	f85d 7b04 	ldr.w	r7, [sp], #4
   13686:	4770      	bx	lr

00013688 <uart0_transmit>:

static uint8_t           tx_head1; /* next free in buf */
static volatile uint8_t  tx_tail1; /* next char to send */
static uint8_t           tx_buf1[ TX_BUF_SIZE ];

void uart0_transmit( unsigned char data ) {
   13688:	b480      	push	{r7}
   1368a:	b083      	sub	sp, #12
   1368c:	af00      	add	r7, sp, #0
   1368e:	4603      	mov	r3, r0
   13690:	71fb      	strb	r3, [r7, #7]
  if (UCSR0B & _BV(TXCIE)) {
   13692:	f242 030a 	movw	r3, #8202	; 0x200a
   13696:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1369a:	781b      	ldrb	r3, [r3, #0]
   1369c:	b2db      	uxtb	r3, r3
   1369e:	f003 0340 	and.w	r3, r3, #64	; 0x40
   136a2:	2b00      	cmp	r3, #0
   136a4:	d028      	beq.n	136f8 <uart0_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail0 == tx_head0 + 1) { /* BUF_SIZE = 256 */
   136a6:	f64a 0365 	movw	r3, #43109	; 0xa865
   136aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   136ae:	781b      	ldrb	r3, [r3, #0]
   136b0:	b2db      	uxtb	r3, r3
   136b2:	461a      	mov	r2, r3
   136b4:	f64a 0364 	movw	r3, #43108	; 0xa864
   136b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   136bc:	781b      	ldrb	r3, [r3, #0]
   136be:	3301      	adds	r3, #1
   136c0:	429a      	cmp	r2, r3
   136c2:	d100      	bne.n	136c6 <uart0_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   136c4:	e02c      	b.n	13720 <uart0_transmit+0x98>
    }
    tx_buf0[tx_head0] = data;
   136c6:	f64a 0364 	movw	r3, #43108	; 0xa864
   136ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   136ce:	781b      	ldrb	r3, [r3, #0]
   136d0:	461a      	mov	r2, r3
   136d2:	f64a 0368 	movw	r3, #43112	; 0xa868
   136d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   136da:	79f9      	ldrb	r1, [r7, #7]
   136dc:	5499      	strb	r1, [r3, r2]
    tx_head0++; /* BUF_SIZE = 256 */
   136de:	f64a 0364 	movw	r3, #43108	; 0xa864
   136e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   136e6:	781b      	ldrb	r3, [r3, #0]
   136e8:	3301      	adds	r3, #1
   136ea:	b2da      	uxtb	r2, r3
   136ec:	f64a 0364 	movw	r3, #43108	; 0xa864
   136f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   136f4:	701a      	strb	r2, [r3, #0]
   136f6:	e013      	b.n	13720 <uart0_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR0 = data;
   136f8:	f242 030c 	movw	r3, #8204	; 0x200c
   136fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13700:	79fa      	ldrb	r2, [r7, #7]
   13702:	701a      	strb	r2, [r3, #0]
    sbi(UCSR0B, TXCIE);
   13704:	f242 030a 	movw	r3, #8202	; 0x200a
   13708:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1370c:	f242 020a 	movw	r2, #8202	; 0x200a
   13710:	f2c2 0200 	movt	r2, #8192	; 0x2000
   13714:	7812      	ldrb	r2, [r2, #0]
   13716:	b2d2      	uxtb	r2, r2
   13718:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1371c:	b2d2      	uxtb	r2, r2
   1371e:	701a      	strb	r2, [r3, #0]
  }
}
   13720:	370c      	adds	r7, #12
   13722:	46bd      	mov	sp, r7
   13724:	f85d 7b04 	ldr.w	r7, [sp], #4
   13728:	4770      	bx	lr
   1372a:	bf00      	nop

0001372c <uart1_transmit>:

void uart1_transmit( unsigned char data ) {
   1372c:	b480      	push	{r7}
   1372e:	b083      	sub	sp, #12
   13730:	af00      	add	r7, sp, #0
   13732:	4603      	mov	r3, r0
   13734:	71fb      	strb	r3, [r7, #7]
  if (UCSR1B & _BV(TXCIE)) {
   13736:	f242 039a 	movw	r3, #8346	; 0x209a
   1373a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1373e:	781b      	ldrb	r3, [r3, #0]
   13740:	b2db      	uxtb	r3, r3
   13742:	f003 0340 	and.w	r3, r3, #64	; 0x40
   13746:	2b00      	cmp	r3, #0
   13748:	d028      	beq.n	1379c <uart1_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail1 == tx_head1 + 1) { /* BUF_SIZE = 256 */
   1374a:	f64a 1369 	movw	r3, #43369	; 0xa969
   1374e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13752:	781b      	ldrb	r3, [r3, #0]
   13754:	b2db      	uxtb	r3, r3
   13756:	461a      	mov	r2, r3
   13758:	f64a 1368 	movw	r3, #43368	; 0xa968
   1375c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13760:	781b      	ldrb	r3, [r3, #0]
   13762:	3301      	adds	r3, #1
   13764:	429a      	cmp	r2, r3
   13766:	d100      	bne.n	1376a <uart1_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   13768:	e02c      	b.n	137c4 <uart1_transmit+0x98>
    }
    tx_buf1[tx_head1] = data;
   1376a:	f64a 1368 	movw	r3, #43368	; 0xa968
   1376e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13772:	781b      	ldrb	r3, [r3, #0]
   13774:	461a      	mov	r2, r3
   13776:	f64a 136c 	movw	r3, #43372	; 0xa96c
   1377a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1377e:	79f9      	ldrb	r1, [r7, #7]
   13780:	5499      	strb	r1, [r3, r2]
    tx_head1++; /* BUF_SIZE = 256 */
   13782:	f64a 1368 	movw	r3, #43368	; 0xa968
   13786:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1378a:	781b      	ldrb	r3, [r3, #0]
   1378c:	3301      	adds	r3, #1
   1378e:	b2da      	uxtb	r2, r3
   13790:	f64a 1368 	movw	r3, #43368	; 0xa968
   13794:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13798:	701a      	strb	r2, [r3, #0]
   1379a:	e013      	b.n	137c4 <uart1_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR1 = data;
   1379c:	f242 039c 	movw	r3, #8348	; 0x209c
   137a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   137a4:	79fa      	ldrb	r2, [r7, #7]
   137a6:	701a      	strb	r2, [r3, #0]
    sbi(UCSR1B, TXCIE);
   137a8:	f242 039a 	movw	r3, #8346	; 0x209a
   137ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   137b0:	f242 029a 	movw	r2, #8346	; 0x209a
   137b4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   137b8:	7812      	ldrb	r2, [r2, #0]
   137ba:	b2d2      	uxtb	r2, r2
   137bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   137c0:	b2d2      	uxtb	r2, r2
   137c2:	701a      	strb	r2, [r3, #0]
  }
}
   137c4:	370c      	adds	r7, #12
   137c6:	46bd      	mov	sp, r7
   137c8:	f85d 7b04 	ldr.w	r7, [sp], #4
   137cc:	4770      	bx	lr
   137ce:	bf00      	nop

000137d0 <uart0_print_string>:


void uart0_print_string(const uint8_t* s) {
   137d0:	b580      	push	{r7, lr}
   137d2:	b084      	sub	sp, #16
   137d4:	af00      	add	r7, sp, #0
   137d6:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
   137d8:	2300      	movs	r3, #0
   137da:	73fb      	strb	r3, [r7, #15]
  while (s[i]) {
   137dc:	e009      	b.n	137f2 <uart0_print_string+0x22>
    uart0_transmit(s[i]);
   137de:	7bfb      	ldrb	r3, [r7, #15]
   137e0:	687a      	ldr	r2, [r7, #4]
   137e2:	4413      	add	r3, r2
   137e4:	781b      	ldrb	r3, [r3, #0]
   137e6:	4618      	mov	r0, r3
   137e8:	f7ff ff4e 	bl	13688 <uart0_transmit>
    i++;
   137ec:	7bfb      	ldrb	r3, [r7, #15]
   137ee:	3301      	adds	r3, #1
   137f0:	73fb      	strb	r3, [r7, #15]
}


void uart0_print_string(const uint8_t* s) {
  uint8_t i = 0;
  while (s[i]) {
   137f2:	7bfb      	ldrb	r3, [r7, #15]
   137f4:	687a      	ldr	r2, [r7, #4]
   137f6:	4413      	add	r3, r2
   137f8:	781b      	ldrb	r3, [r3, #0]
   137fa:	2b00      	cmp	r3, #0
   137fc:	d1ef      	bne.n	137de <uart0_print_string+0xe>
    uart0_transmit(s[i]);
    i++;
  }
}
   137fe:	3710      	adds	r7, #16
   13800:	46bd      	mov	sp, r7
   13802:	bd80      	pop	{r7, pc}

00013804 <uart0_print_hex>:

void uart0_print_hex(const uint8_t c) {
   13804:	b590      	push	{r4, r7, lr}
   13806:	b089      	sub	sp, #36	; 0x24
   13808:	af00      	add	r7, sp, #0
   1380a:	4603      	mov	r3, r0
   1380c:	71fb      	strb	r3, [r7, #7]
  const uint8_t hex[16] = { '0', '1', '2', '3', '4', '5', '6', '7', 
   1380e:	f247 3394 	movw	r3, #29588	; 0x7394
   13812:	f2c0 0301 	movt	r3, #1
   13816:	f107 040c 	add.w	r4, r7, #12
   1381a:	6818      	ldr	r0, [r3, #0]
   1381c:	6859      	ldr	r1, [r3, #4]
   1381e:	689a      	ldr	r2, [r3, #8]
   13820:	68db      	ldr	r3, [r3, #12]
   13822:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
  uint8_t high = (c & 0xF0)>>4;
   13824:	79fb      	ldrb	r3, [r7, #7]
   13826:	091b      	lsrs	r3, r3, #4
   13828:	77fb      	strb	r3, [r7, #31]
  uint8_t low  = c & 0x0F;
   1382a:	79fb      	ldrb	r3, [r7, #7]
   1382c:	f003 030f 	and.w	r3, r3, #15
   13830:	77bb      	strb	r3, [r7, #30]
    /*
    *Added by SunnyBeike
    * */
    high = 15;
   13832:	230f      	movs	r3, #15
   13834:	77fb      	strb	r3, [r7, #31]
    low = 15;
   13836:	230f      	movs	r3, #15
   13838:	77bb      	strb	r3, [r7, #30]
    /*
    *End
    * */
    uart0_transmit(hex[high]);
   1383a:	7ffb      	ldrb	r3, [r7, #31]
   1383c:	f107 0220 	add.w	r2, r7, #32
   13840:	4413      	add	r3, r2
   13842:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   13846:	4618      	mov	r0, r3
   13848:	f7ff ff1e 	bl	13688 <uart0_transmit>
  uart0_transmit(hex[low]);
   1384c:	7fbb      	ldrb	r3, [r7, #30]
   1384e:	f107 0220 	add.w	r2, r7, #32
   13852:	4413      	add	r3, r2
   13854:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   13858:	4618      	mov	r0, r3
   1385a:	f7ff ff15 	bl	13688 <uart0_transmit>
}
   1385e:	3724      	adds	r7, #36	; 0x24
   13860:	46bd      	mov	sp, r7
   13862:	bd90      	pop	{r4, r7, pc}

00013864 <__vector_20>:


SIGNAL(SIG_UART0_TRANS) {
   13864:	b480      	push	{r7}
   13866:	af00      	add	r7, sp, #0
  if (tx_head0 == tx_tail0) {
   13868:	f64a 0364 	movw	r3, #43108	; 0xa864
   1386c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13870:	781a      	ldrb	r2, [r3, #0]
   13872:	f64a 0365 	movw	r3, #43109	; 0xa865
   13876:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1387a:	781b      	ldrb	r3, [r3, #0]
   1387c:	b2db      	uxtb	r3, r3
   1387e:	429a      	cmp	r2, r3
   13880:	d10e      	bne.n	138a0 <__vector_20+0x3c>
    /* Nothing more to send */
    cbi(UCSR0B, TXCIE); /* disable interrupt */
   13882:	f242 030a 	movw	r3, #8202	; 0x200a
   13886:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1388a:	f242 020a 	movw	r2, #8202	; 0x200a
   1388e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   13892:	7812      	ldrb	r2, [r2, #0]
   13894:	b2d2      	uxtb	r2, r2
   13896:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   1389a:	b2d2      	uxtb	r2, r2
   1389c:	701a      	strb	r2, [r3, #0]
   1389e:	e01d      	b.n	138dc <__vector_20+0x78>
  } else {
    UDR0 = tx_buf0[tx_tail0];
   138a0:	f242 030c 	movw	r3, #8204	; 0x200c
   138a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   138a8:	f64a 0265 	movw	r2, #43109	; 0xa865
   138ac:	f2c2 0200 	movt	r2, #8192	; 0x2000
   138b0:	7812      	ldrb	r2, [r2, #0]
   138b2:	b2d2      	uxtb	r2, r2
   138b4:	4611      	mov	r1, r2
   138b6:	f64a 0268 	movw	r2, #43112	; 0xa868
   138ba:	f2c2 0200 	movt	r2, #8192	; 0x2000
   138be:	5c52      	ldrb	r2, [r2, r1]
   138c0:	701a      	strb	r2, [r3, #0]
    tx_tail0++; /* warning tx_buf_len is 256 */
   138c2:	f64a 0365 	movw	r3, #43109	; 0xa865
   138c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   138ca:	781b      	ldrb	r3, [r3, #0]
   138cc:	b2db      	uxtb	r3, r3
   138ce:	3301      	adds	r3, #1
   138d0:	b2da      	uxtb	r2, r3
   138d2:	f64a 0365 	movw	r3, #43109	; 0xa865
   138d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   138da:	701a      	strb	r2, [r3, #0]
  }
}
   138dc:	46bd      	mov	sp, r7
   138de:	f85d 7b04 	ldr.w	r7, [sp], #4
   138e2:	4770      	bx	lr

000138e4 <__vector_32>:

SIGNAL(SIG_UART1_TRANS) {
   138e4:	b480      	push	{r7}
   138e6:	af00      	add	r7, sp, #0
  if (tx_head1 == tx_tail1) {
   138e8:	f64a 1368 	movw	r3, #43368	; 0xa968
   138ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   138f0:	781a      	ldrb	r2, [r3, #0]
   138f2:	f64a 1369 	movw	r3, #43369	; 0xa969
   138f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   138fa:	781b      	ldrb	r3, [r3, #0]
   138fc:	b2db      	uxtb	r3, r3
   138fe:	429a      	cmp	r2, r3
   13900:	d10e      	bne.n	13920 <__vector_32+0x3c>
    /* Nothing more to send */
    cbi(UCSR1B, TXCIE); /* disable interrupt */
   13902:	f242 039a 	movw	r3, #8346	; 0x209a
   13906:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1390a:	f242 029a 	movw	r2, #8346	; 0x209a
   1390e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   13912:	7812      	ldrb	r2, [r2, #0]
   13914:	b2d2      	uxtb	r2, r2
   13916:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   1391a:	b2d2      	uxtb	r2, r2
   1391c:	701a      	strb	r2, [r3, #0]
   1391e:	e01d      	b.n	1395c <__vector_32+0x78>
  } else {
    UDR1 = tx_buf1[tx_tail1];
   13920:	f242 039c 	movw	r3, #8348	; 0x209c
   13924:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13928:	f64a 1269 	movw	r2, #43369	; 0xa969
   1392c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   13930:	7812      	ldrb	r2, [r2, #0]
   13932:	b2d2      	uxtb	r2, r2
   13934:	4611      	mov	r1, r2
   13936:	f64a 126c 	movw	r2, #43372	; 0xa96c
   1393a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1393e:	5c52      	ldrb	r2, [r2, r1]
   13940:	701a      	strb	r2, [r3, #0]
    tx_tail1++; /* warning tx_buf_len is 256 */
   13942:	f64a 1369 	movw	r3, #43369	; 0xa969
   13946:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1394a:	781b      	ldrb	r3, [r3, #0]
   1394c:	b2db      	uxtb	r3, r3
   1394e:	3301      	adds	r3, #1
   13950:	b2da      	uxtb	r2, r3
   13952:	f64a 1369 	movw	r3, #43369	; 0xa969
   13956:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1395a:	701a      	strb	r2, [r3, #0]
  }
}
   1395c:	46bd      	mov	sp, r7
   1395e:	f85d 7b04 	ldr.w	r7, [sp], #4
   13962:	4770      	bx	lr

00013964 <uart0_init>:

void uart0_init( void ) {
   13964:	b480      	push	{r7}
   13966:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRR0H = 0; 
   13968:	f242 0390 	movw	r3, #8336	; 0x2090
   1396c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13970:	2200      	movs	r2, #0
   13972:	701a      	strb	r2, [r3, #0]
  UBRR0L = 25; // 38.4
   13974:	f242 0309 	movw	r3, #8201	; 0x2009
   13978:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1397c:	2219      	movs	r2, #25
   1397e:	701a      	strb	r2, [r3, #0]
  // UBRR0L = 103; //9600
  /* single speed */ 
  UCSR0A = 0; 
   13980:	f242 030b 	movw	r3, #8203	; 0x200b
   13984:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13988:	2200      	movs	r2, #0
   1398a:	701a      	strb	r2, [r3, #0]
  /* Enable receiver and transmitter */ 
  UCSR0B = _BV(RXEN) | _BV(TXEN);
   1398c:	f242 030a 	movw	r3, #8202	; 0x200a
   13990:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13994:	2218      	movs	r2, #24
   13996:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSR0C = _BV(UCSZ1) | _BV(UCSZ0);
   13998:	f242 0395 	movw	r3, #8341	; 0x2095
   1399c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   139a0:	2206      	movs	r2, #6
   139a2:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi(UCSR0B, RXCIE ); 
   139a4:	f242 030a 	movw	r3, #8202	; 0x200a
   139a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   139ac:	f242 020a 	movw	r2, #8202	; 0x200a
   139b0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   139b4:	7812      	ldrb	r2, [r2, #0]
   139b6:	b2d2      	uxtb	r2, r2
   139b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
   139bc:	b2d2      	uxtb	r2, r2
   139be:	701a      	strb	r2, [r3, #0]
}
   139c0:	46bd      	mov	sp, r7
   139c2:	f85d 7b04 	ldr.w	r7, [sp], #4
   139c6:	4770      	bx	lr

000139c8 <uart1_init>:

void uart1_init( void ) {
   139c8:	b480      	push	{r7}
   139ca:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRR1H = 0; 
   139cc:	f242 0398 	movw	r3, #8344	; 0x2098
   139d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   139d4:	2200      	movs	r2, #0
   139d6:	701a      	strb	r2, [r3, #0]
  UBRR1L = 25; // 38.4
   139d8:	f242 0399 	movw	r3, #8345	; 0x2099
   139dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   139e0:	2219      	movs	r2, #25
   139e2:	701a      	strb	r2, [r3, #0]
  // UBRR1L = 103; //9600


  /* single speed */ 
  UCSR1A = 0; 
   139e4:	f242 039b 	movw	r3, #8347	; 0x209b
   139e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   139ec:	2200      	movs	r2, #0
   139ee:	701a      	strb	r2, [r3, #0]
  /* Enable receiver and transmitter */ 
  UCSR1B = _BV(RXEN) | _BV(TXEN);
   139f0:	f242 039a 	movw	r3, #8346	; 0x209a
   139f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   139f8:	2218      	movs	r2, #24
   139fa:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSR1C = _BV(UCSZ1) | _BV(UCSZ0);
   139fc:	f242 039d 	movw	r3, #8349	; 0x209d
   13a00:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a04:	2206      	movs	r2, #6
   13a06:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi(UCSR1B, RXCIE ); 
   13a08:	f242 039a 	movw	r3, #8346	; 0x209a
   13a0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a10:	f242 029a 	movw	r2, #8346	; 0x209a
   13a14:	f2c2 0200 	movt	r2, #8192	; 0x2000
   13a18:	7812      	ldrb	r2, [r2, #0]
   13a1a:	b2d2      	uxtb	r2, r2
   13a1c:	f062 027f 	orn	r2, r2, #127	; 0x7f
   13a20:	b2d2      	uxtb	r2, r2
   13a22:	701a      	strb	r2, [r3, #0]
}
   13a24:	46bd      	mov	sp, r7
   13a26:	f85d 7b04 	ldr.w	r7, [sp], #4
   13a2a:	4770      	bx	lr
   13a2c:	0000      	movs	r0, r0
	...

00013a30 <estimator_init>:
  estimator_theta_dot = theta_dot; \
}

inline void estimator_update_lls( void );

void estimator_init( void ) {
   13a30:	b480      	push	{r7}
   13a32:	af00      	add	r7, sp, #0

  EstimatorSetPos (0., 0., 0.);
   13a34:	f64a 236c 	movw	r3, #43628	; 0xaa6c
   13a38:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a3c:	f04f 0200 	mov.w	r2, #0
   13a40:	601a      	str	r2, [r3, #0]
   13a42:	f64a 2370 	movw	r3, #43632	; 0xaa70
   13a46:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a4a:	f04f 0200 	mov.w	r2, #0
   13a4e:	601a      	str	r2, [r3, #0]
   13a50:	f64a 2374 	movw	r3, #43636	; 0xaa74
   13a54:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a58:	f04f 0200 	mov.w	r2, #0
   13a5c:	601a      	str	r2, [r3, #0]

  EstimatorSetAtt (0., 0., 0);
   13a5e:	f64a 2378 	movw	r3, #43640	; 0xaa78
   13a62:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a66:	f04f 0200 	mov.w	r2, #0
   13a6a:	601a      	str	r2, [r3, #0]
   13a6c:	f64a 237c 	movw	r3, #43644	; 0xaa7c
   13a70:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a74:	f04f 0200 	mov.w	r2, #0
   13a78:	601a      	str	r2, [r3, #0]
   13a7a:	f64a 2380 	movw	r3, #43648	; 0xaa80
   13a7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a82:	f04f 0200 	mov.w	r2, #0
   13a86:	601a      	str	r2, [r3, #0]

  EstimatorSetSpeedPol ( 0., 0., 0.);
   13a88:	f64a 23a4 	movw	r3, #43684	; 0xaaa4
   13a8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a90:	f04f 0200 	mov.w	r2, #0
   13a94:	601a      	str	r2, [r3, #0]
   13a96:	f64a 23a8 	movw	r3, #43688	; 0xaaa8
   13a9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a9e:	f04f 0200 	mov.w	r2, #0
   13aa2:	601a      	str	r2, [r3, #0]
   13aa4:	f64a 238c 	movw	r3, #43660	; 0xaa8c
   13aa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13aac:	f04f 0200 	mov.w	r2, #0
   13ab0:	601a      	str	r2, [r3, #0]

  EstimatorSetRotSpeed (0., 0., 0.);
   13ab2:	f64a 2390 	movw	r3, #43664	; 0xaa90
   13ab6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13aba:	f04f 0200 	mov.w	r2, #0
   13abe:	601a      	str	r2, [r3, #0]
   13ac0:	f64a 2394 	movw	r3, #43668	; 0xaa94
   13ac4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ac8:	f04f 0200 	mov.w	r2, #0
   13acc:	601a      	str	r2, [r3, #0]
   13ace:	f64a 2398 	movw	r3, #43672	; 0xaa98
   13ad2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ad6:	f04f 0200 	mov.w	r2, #0
   13ada:	601a      	str	r2, [r3, #0]

  estimator_flight_time = 0;
   13adc:	f64a 239c 	movw	r3, #43676	; 0xaa9c
   13ae0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ae4:	2200      	movs	r2, #0
   13ae6:	801a      	strh	r2, [r3, #0]

  estimator_rad_of_ir = ir_rad_of_ir;
   13ae8:	f240 1310 	movw	r3, #272	; 0x110
   13aec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13af0:	681a      	ldr	r2, [r3, #0]
   13af2:	f64a 23ac 	movw	r3, #43692	; 0xaaac
   13af6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13afa:	601a      	str	r2, [r3, #0]
}
   13afc:	46bd      	mov	sp, r7
   13afe:	f85d 7b04 	ldr.w	r7, [sp], #4
   13b02:	4770      	bx	lr

00013b04 <estimator_update_state_infrared>:

#define EstimatorIrGainIsCorrect() (TRUE)

void estimator_update_state_infrared( void ) {
   13b04:	b580      	push	{r7, lr}
   13b06:	b082      	sub	sp, #8
   13b08:	af00      	add	r7, sp, #0
  float rad_of_ir = (ir_estim_mode == IR_ESTIM_MODE_ON && EstimatorIrGainIsCorrect()) ? 
   13b0a:	f240 1304 	movw	r3, #260	; 0x104
   13b0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b12:	781b      	ldrb	r3, [r3, #0]
    estimator_rad_of_ir : ir_rad_of_ir;
   13b14:	2b01      	cmp	r3, #1
   13b16:	d105      	bne.n	13b24 <estimator_update_state_infrared+0x20>
   13b18:	f64a 23ac 	movw	r3, #43692	; 0xaaac
   13b1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b20:	681b      	ldr	r3, [r3, #0]
   13b22:	e004      	b.n	13b2e <estimator_update_state_infrared+0x2a>
   13b24:	f240 1310 	movw	r3, #272	; 0x110
   13b28:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b2c:	681b      	ldr	r3, [r3, #0]
}

#define EstimatorIrGainIsCorrect() (TRUE)

void estimator_update_state_infrared( void ) {
  float rad_of_ir = (ir_estim_mode == IR_ESTIM_MODE_ON && EstimatorIrGainIsCorrect()) ? 
   13b2e:	607b      	str	r3, [r7, #4]
    estimator_rad_of_ir : ir_rad_of_ir;
  estimator_phi  = rad_of_ir * ir_roll;
   13b30:	f24a 7358 	movw	r3, #42840	; 0xa758
   13b34:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b38:	881b      	ldrh	r3, [r3, #0]
   13b3a:	b21b      	sxth	r3, r3
   13b3c:	4618      	mov	r0, r3
   13b3e:	f003 f8bb 	bl	16cb8 <__aeabi_i2f>
   13b42:	4603      	mov	r3, r0
   13b44:	4618      	mov	r0, r3
   13b46:	6879      	ldr	r1, [r7, #4]
   13b48:	f003 f90a 	bl	16d60 <__aeabi_fmul>
   13b4c:	4603      	mov	r3, r0
   13b4e:	461a      	mov	r2, r3
   13b50:	f64a 2378 	movw	r3, #43640	; 0xaa78
   13b54:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b58:	601a      	str	r2, [r3, #0]

  estimator_theta = rad_of_ir * ir_pitch;
   13b5a:	f24a 735a 	movw	r3, #42842	; 0xa75a
   13b5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b62:	881b      	ldrh	r3, [r3, #0]
   13b64:	b21b      	sxth	r3, r3
   13b66:	4618      	mov	r0, r3
   13b68:	f003 f8a6 	bl	16cb8 <__aeabi_i2f>
   13b6c:	4603      	mov	r3, r0
   13b6e:	4618      	mov	r0, r3
   13b70:	6879      	ldr	r1, [r7, #4]
   13b72:	f003 f8f5 	bl	16d60 <__aeabi_fmul>
   13b76:	4603      	mov	r3, r0
   13b78:	461a      	mov	r2, r3
   13b7a:	f64a 2380 	movw	r3, #43648	; 0xaa80
   13b7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b82:	601a      	str	r2, [r3, #0]
}
   13b84:	3708      	adds	r7, #8
   13b86:	46bd      	mov	sp, r7
   13b88:	bd80      	pop	{r7, pc}
   13b8a:	bf00      	nop

00013b8c <estimator_update_ir_estim>:
#define RHO 0.999 /* The higher, the slower the estimation is changing */

#define g 9.81


void estimator_update_ir_estim( void ) {
   13b8c:	b5b0      	push	{r4, r5, r7, lr}
   13b8e:	b084      	sub	sp, #16
   13b90:	af00      	add	r7, sp, #0
  static bool_t initialized = FALSE;
  static float sum_xy, sum_xx;
  float absphi;
  float init_ir2;

  if (initialized) 
   13b92:	f64a 23b8 	movw	r3, #43704	; 0xaab8
   13b96:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b9a:	781b      	ldrb	r3, [r3, #0]
   13b9c:	2b00      	cmp	r3, #0
   13b9e:	f000 81e8 	beq.w	13f72 <estimator_update_ir_estim+0x3e6>
  {
    float dt = gps_ftow - last_t;
   13ba2:	f24a 6328 	movw	r3, #42536	; 0xa628
   13ba6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13baa:	681a      	ldr	r2, [r3, #0]
   13bac:	f64a 23bc 	movw	r3, #43708	; 0xaabc
   13bb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13bb4:	681b      	ldr	r3, [r3, #0]
   13bb6:	4610      	mov	r0, r2
   13bb8:	4619      	mov	r1, r3
   13bba:	f002 ffc7 	bl	16b4c <__aeabi_fsub>
   13bbe:	4603      	mov	r3, r0
   13bc0:	60bb      	str	r3, [r7, #8]
    if (dt > 0.1) { // Against division by zero
   13bc2:	68b8      	ldr	r0, [r7, #8]
   13bc4:	f002 fc38 	bl	16438 <__aeabi_f2d>
   13bc8:	4602      	mov	r2, r0
   13bca:	460b      	mov	r3, r1
   13bcc:	4610      	mov	r0, r2
   13bce:	4619      	mov	r1, r3
   13bd0:	a385      	add	r3, pc, #532	; (adr r3, 13de8 <estimator_update_ir_estim+0x25c>)
   13bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
   13bd6:	f002 ff13 	bl	16a00 <__aeabi_dcmpgt>
   13bda:	4603      	mov	r3, r0
   13bdc:	2b00      	cmp	r3, #0
   13bde:	d100      	bne.n	13be2 <estimator_update_ir_estim+0x56>
   13be0:	e219      	b.n	14016 <estimator_update_ir_estim+0x48a>
      float phi = (estimator_hspeed_dir - last_hspeed_dir); 
   13be2:	f64a 23a8 	movw	r3, #43688	; 0xaaa8
   13be6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13bea:	681a      	ldr	r2, [r3, #0]
   13bec:	f64a 23c0 	movw	r3, #43712	; 0xaac0
   13bf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13bf4:	681b      	ldr	r3, [r3, #0]
   13bf6:	4610      	mov	r0, r2
   13bf8:	4619      	mov	r1, r3
   13bfa:	f002 ffa7 	bl	16b4c <__aeabi_fsub>
   13bfe:	4603      	mov	r3, r0
   13c00:	60fb      	str	r3, [r7, #12]
      NORM_RAD_ANGLE(phi);
   13c02:	e013      	b.n	13c2c <estimator_update_ir_estim+0xa0>
   13c04:	68f8      	ldr	r0, [r7, #12]
   13c06:	f002 fc17 	bl	16438 <__aeabi_f2d>
   13c0a:	4602      	mov	r2, r0
   13c0c:	460b      	mov	r3, r1
   13c0e:	4610      	mov	r0, r2
   13c10:	4619      	mov	r1, r3
   13c12:	a377      	add	r3, pc, #476	; (adr r3, 13df0 <estimator_update_ir_estim+0x264>)
   13c14:	e9d3 2300 	ldrd	r2, r3, [r3]
   13c18:	f002 faae 	bl	16178 <__aeabi_dsub>
   13c1c:	4602      	mov	r2, r0
   13c1e:	460b      	mov	r3, r1
   13c20:	4610      	mov	r0, r2
   13c22:	4619      	mov	r1, r3
   13c24:	f002 ff3e 	bl	16aa4 <__aeabi_d2f>
   13c28:	4603      	mov	r3, r0
   13c2a:	60fb      	str	r3, [r7, #12]
   13c2c:	68f8      	ldr	r0, [r7, #12]
   13c2e:	f002 fc03 	bl	16438 <__aeabi_f2d>
   13c32:	4602      	mov	r2, r0
   13c34:	460b      	mov	r3, r1
   13c36:	4610      	mov	r0, r2
   13c38:	4619      	mov	r1, r3
   13c3a:	a36f      	add	r3, pc, #444	; (adr r3, 13df8 <estimator_update_ir_estim+0x26c>)
   13c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
   13c40:	f002 fede 	bl	16a00 <__aeabi_dcmpgt>
   13c44:	4603      	mov	r3, r0
   13c46:	2b00      	cmp	r3, #0
   13c48:	d1dc      	bne.n	13c04 <estimator_update_ir_estim+0x78>
   13c4a:	e013      	b.n	13c74 <estimator_update_ir_estim+0xe8>
   13c4c:	68f8      	ldr	r0, [r7, #12]
   13c4e:	f002 fbf3 	bl	16438 <__aeabi_f2d>
   13c52:	4602      	mov	r2, r0
   13c54:	460b      	mov	r3, r1
   13c56:	4610      	mov	r0, r2
   13c58:	4619      	mov	r1, r3
   13c5a:	a365      	add	r3, pc, #404	; (adr r3, 13df0 <estimator_update_ir_estim+0x264>)
   13c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
   13c60:	f002 fa8c 	bl	1617c <__adddf3>
   13c64:	4602      	mov	r2, r0
   13c66:	460b      	mov	r3, r1
   13c68:	4610      	mov	r0, r2
   13c6a:	4619      	mov	r1, r3
   13c6c:	f002 ff1a 	bl	16aa4 <__aeabi_d2f>
   13c70:	4603      	mov	r3, r0
   13c72:	60fb      	str	r3, [r7, #12]
   13c74:	68f8      	ldr	r0, [r7, #12]
   13c76:	f002 fbdf 	bl	16438 <__aeabi_f2d>
   13c7a:	4602      	mov	r2, r0
   13c7c:	460b      	mov	r3, r1
   13c7e:	4610      	mov	r0, r2
   13c80:	4619      	mov	r1, r3
   13c82:	a35f      	add	r3, pc, #380	; (adr r3, 13e00 <estimator_update_ir_estim+0x274>)
   13c84:	e9d3 2300 	ldrd	r2, r3, [r3]
   13c88:	f002 fe9c 	bl	169c4 <__aeabi_dcmplt>
   13c8c:	4603      	mov	r3, r0
   13c8e:	2b00      	cmp	r3, #0
   13c90:	d1dc      	bne.n	13c4c <estimator_update_ir_estim+0xc0>
      phi = phi/dt*NOMINAL_AIRSPEED/g; /* tan linearized */
   13c92:	68f8      	ldr	r0, [r7, #12]
   13c94:	68b9      	ldr	r1, [r7, #8]
   13c96:	f003 f917 	bl	16ec8 <__aeabi_fdiv>
   13c9a:	4603      	mov	r3, r0
   13c9c:	4618      	mov	r0, r3
   13c9e:	f002 fbcb 	bl	16438 <__aeabi_f2d>
   13ca2:	4602      	mov	r2, r0
   13ca4:	460b      	mov	r3, r1
   13ca6:	4610      	mov	r0, r2
   13ca8:	4619      	mov	r1, r3
   13caa:	f04f 0200 	mov.w	r2, #0
   13cae:	f04f 0300 	mov.w	r3, #0
   13cb2:	f2c4 0324 	movt	r3, #16420	; 0x4024
   13cb6:	f002 fc13 	bl	164e0 <__aeabi_dmul>
   13cba:	4602      	mov	r2, r0
   13cbc:	460b      	mov	r3, r1
   13cbe:	4610      	mov	r0, r2
   13cc0:	4619      	mov	r1, r3
   13cc2:	a351      	add	r3, pc, #324	; (adr r3, 13e08 <estimator_update_ir_estim+0x27c>)
   13cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
   13cc8:	f002 fd34 	bl	16734 <__aeabi_ddiv>
   13ccc:	4602      	mov	r2, r0
   13cce:	460b      	mov	r3, r1
   13cd0:	4610      	mov	r0, r2
   13cd2:	4619      	mov	r1, r3
   13cd4:	f002 fee6 	bl	16aa4 <__aeabi_d2f>
   13cd8:	4603      	mov	r3, r0
   13cda:	60fb      	str	r3, [r7, #12]
      NORM_RAD_ANGLE(phi);
   13cdc:	e013      	b.n	13d06 <estimator_update_ir_estim+0x17a>
   13cde:	68f8      	ldr	r0, [r7, #12]
   13ce0:	f002 fbaa 	bl	16438 <__aeabi_f2d>
   13ce4:	4602      	mov	r2, r0
   13ce6:	460b      	mov	r3, r1
   13ce8:	4610      	mov	r0, r2
   13cea:	4619      	mov	r1, r3
   13cec:	a340      	add	r3, pc, #256	; (adr r3, 13df0 <estimator_update_ir_estim+0x264>)
   13cee:	e9d3 2300 	ldrd	r2, r3, [r3]
   13cf2:	f002 fa41 	bl	16178 <__aeabi_dsub>
   13cf6:	4602      	mov	r2, r0
   13cf8:	460b      	mov	r3, r1
   13cfa:	4610      	mov	r0, r2
   13cfc:	4619      	mov	r1, r3
   13cfe:	f002 fed1 	bl	16aa4 <__aeabi_d2f>
   13d02:	4603      	mov	r3, r0
   13d04:	60fb      	str	r3, [r7, #12]
   13d06:	68f8      	ldr	r0, [r7, #12]
   13d08:	f002 fb96 	bl	16438 <__aeabi_f2d>
   13d0c:	4602      	mov	r2, r0
   13d0e:	460b      	mov	r3, r1
   13d10:	4610      	mov	r0, r2
   13d12:	4619      	mov	r1, r3
   13d14:	a338      	add	r3, pc, #224	; (adr r3, 13df8 <estimator_update_ir_estim+0x26c>)
   13d16:	e9d3 2300 	ldrd	r2, r3, [r3]
   13d1a:	f002 fe71 	bl	16a00 <__aeabi_dcmpgt>
   13d1e:	4603      	mov	r3, r0
   13d20:	2b00      	cmp	r3, #0
   13d22:	d1dc      	bne.n	13cde <estimator_update_ir_estim+0x152>
   13d24:	e013      	b.n	13d4e <estimator_update_ir_estim+0x1c2>
   13d26:	68f8      	ldr	r0, [r7, #12]
   13d28:	f002 fb86 	bl	16438 <__aeabi_f2d>
   13d2c:	4602      	mov	r2, r0
   13d2e:	460b      	mov	r3, r1
   13d30:	4610      	mov	r0, r2
   13d32:	4619      	mov	r1, r3
   13d34:	a32e      	add	r3, pc, #184	; (adr r3, 13df0 <estimator_update_ir_estim+0x264>)
   13d36:	e9d3 2300 	ldrd	r2, r3, [r3]
   13d3a:	f002 fa1f 	bl	1617c <__adddf3>
   13d3e:	4602      	mov	r2, r0
   13d40:	460b      	mov	r3, r1
   13d42:	4610      	mov	r0, r2
   13d44:	4619      	mov	r1, r3
   13d46:	f002 fead 	bl	16aa4 <__aeabi_d2f>
   13d4a:	4603      	mov	r3, r0
   13d4c:	60fb      	str	r3, [r7, #12]
   13d4e:	68f8      	ldr	r0, [r7, #12]
   13d50:	f002 fb72 	bl	16438 <__aeabi_f2d>
   13d54:	4602      	mov	r2, r0
   13d56:	460b      	mov	r3, r1
   13d58:	4610      	mov	r0, r2
   13d5a:	4619      	mov	r1, r3
   13d5c:	a328      	add	r3, pc, #160	; (adr r3, 13e00 <estimator_update_ir_estim+0x274>)
   13d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
   13d62:	f002 fe2f 	bl	169c4 <__aeabi_dcmplt>
   13d66:	4603      	mov	r3, r0
   13d68:	2b00      	cmp	r3, #0
   13d6a:	d1dc      	bne.n	13d26 <estimator_update_ir_estim+0x19a>
      estimator_ir = (float)ir_roll;
   13d6c:	f24a 7358 	movw	r3, #42840	; 0xa758
   13d70:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d74:	881b      	ldrh	r3, [r3, #0]
   13d76:	b21b      	sxth	r3, r3
   13d78:	4618      	mov	r0, r3
   13d7a:	f002 ff9d 	bl	16cb8 <__aeabi_i2f>
   13d7e:	4602      	mov	r2, r0
   13d80:	f64a 23b0 	movw	r3, #43696	; 0xaab0
   13d84:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d88:	601a      	str	r2, [r3, #0]
      estimator_rad = phi;
   13d8a:	f64a 23b4 	movw	r3, #43700	; 0xaab4
   13d8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d92:	68fa      	ldr	r2, [r7, #12]
   13d94:	601a      	str	r2, [r3, #0]
      absphi = fabs(phi);
   13d96:	68f8      	ldr	r0, [r7, #12]
   13d98:	f04f 0100 	mov.w	r1, #0
   13d9c:	f003 f97e 	bl	1709c <__aeabi_fcmplt>
   13da0:	4603      	mov	r3, r0
   13da2:	2b00      	cmp	r3, #0
   13da4:	d003      	beq.n	13dae <estimator_update_ir_estim+0x222>
   13da6:	68fb      	ldr	r3, [r7, #12]
   13da8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
   13dac:	e000      	b.n	13db0 <estimator_update_ir_estim+0x224>
   13dae:	68fb      	ldr	r3, [r7, #12]
   13db0:	607b      	str	r3, [r7, #4]
      if (absphi < 1.0 && absphi > 0.05 && (- ir_contrast/2 < ir_roll && ir_roll < ir_contrast/2)) {
   13db2:	6878      	ldr	r0, [r7, #4]
   13db4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   13db8:	f003 f970 	bl	1709c <__aeabi_fcmplt>
   13dbc:	4603      	mov	r3, r0
   13dbe:	2b00      	cmp	r3, #0
   13dc0:	d100      	bne.n	13dc4 <estimator_update_ir_estim+0x238>
   13dc2:	e128      	b.n	14016 <estimator_update_ir_estim+0x48a>
   13dc4:	6878      	ldr	r0, [r7, #4]
   13dc6:	f002 fb37 	bl	16438 <__aeabi_f2d>
   13dca:	4602      	mov	r2, r0
   13dcc:	460b      	mov	r3, r1
   13dce:	4610      	mov	r0, r2
   13dd0:	4619      	mov	r1, r3
   13dd2:	a30f      	add	r3, pc, #60	; (adr r3, 13e10 <estimator_update_ir_estim+0x284>)
   13dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
   13dd8:	f002 fe12 	bl	16a00 <__aeabi_dcmpgt>
   13ddc:	4603      	mov	r3, r0
   13dde:	2b00      	cmp	r3, #0
   13de0:	d11a      	bne.n	13e18 <estimator_update_ir_estim+0x28c>
   13de2:	e118      	b.n	14016 <estimator_update_ir_estim+0x48a>
   13de4:	f3af 8000 	nop.w
   13de8:	9999999a 	.word	0x9999999a
   13dec:	3fb99999 	.word	0x3fb99999
   13df0:	54442d18 	.word	0x54442d18
   13df4:	401921fb 	.word	0x401921fb
   13df8:	54442d18 	.word	0x54442d18
   13dfc:	400921fb 	.word	0x400921fb
   13e00:	54442d18 	.word	0x54442d18
   13e04:	c00921fb 	.word	0xc00921fb
   13e08:	51eb851f 	.word	0x51eb851f
   13e0c:	40239eb8 	.word	0x40239eb8
   13e10:	9999999a 	.word	0x9999999a
   13e14:	3fa99999 	.word	0x3fa99999
   13e18:	f240 1308 	movw	r3, #264	; 0x108
   13e1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13e20:	881b      	ldrh	r3, [r3, #0]
   13e22:	b21b      	sxth	r3, r3
   13e24:	425b      	negs	r3, r3
   13e26:	0fda      	lsrs	r2, r3, #31
   13e28:	4413      	add	r3, r2
   13e2a:	105b      	asrs	r3, r3, #1
   13e2c:	461a      	mov	r2, r3
   13e2e:	f24a 7358 	movw	r3, #42840	; 0xa758
   13e32:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13e36:	881b      	ldrh	r3, [r3, #0]
   13e38:	b21b      	sxth	r3, r3
   13e3a:	429a      	cmp	r2, r3
   13e3c:	f280 8098 	bge.w	13f70 <estimator_update_ir_estim+0x3e4>
   13e40:	f240 1308 	movw	r3, #264	; 0x108
   13e44:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13e48:	881b      	ldrh	r3, [r3, #0]
   13e4a:	b21b      	sxth	r3, r3
   13e4c:	0fda      	lsrs	r2, r3, #31
   13e4e:	4413      	add	r3, r2
   13e50:	105b      	asrs	r3, r3, #1
   13e52:	b29a      	uxth	r2, r3
   13e54:	f24a 7358 	movw	r3, #42840	; 0xa758
   13e58:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13e5c:	881b      	ldrh	r3, [r3, #0]
   13e5e:	b212      	sxth	r2, r2
   13e60:	b21b      	sxth	r3, r3
   13e62:	429a      	cmp	r2, r3
   13e64:	f340 8084 	ble.w	13f70 <estimator_update_ir_estim+0x3e4>
	sum_xy = estimator_rad * estimator_ir + RHO * sum_xy;
   13e68:	f64a 23b4 	movw	r3, #43700	; 0xaab4
   13e6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13e70:	681a      	ldr	r2, [r3, #0]
   13e72:	f64a 23b0 	movw	r3, #43696	; 0xaab0
   13e76:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13e7a:	681b      	ldr	r3, [r3, #0]
   13e7c:	4610      	mov	r0, r2
   13e7e:	4619      	mov	r1, r3
   13e80:	f002 ff6e 	bl	16d60 <__aeabi_fmul>
   13e84:	4603      	mov	r3, r0
   13e86:	4618      	mov	r0, r3
   13e88:	f002 fad6 	bl	16438 <__aeabi_f2d>
   13e8c:	4604      	mov	r4, r0
   13e8e:	460d      	mov	r5, r1
   13e90:	f64a 23c4 	movw	r3, #43716	; 0xaac4
   13e94:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13e98:	681b      	ldr	r3, [r3, #0]
   13e9a:	4618      	mov	r0, r3
   13e9c:	f002 facc 	bl	16438 <__aeabi_f2d>
   13ea0:	4602      	mov	r2, r0
   13ea2:	460b      	mov	r3, r1
   13ea4:	4610      	mov	r0, r2
   13ea6:	4619      	mov	r1, r3
   13ea8:	a367      	add	r3, pc, #412	; (adr r3, 14048 <estimator_update_ir_estim+0x4bc>)
   13eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
   13eae:	f002 fb17 	bl	164e0 <__aeabi_dmul>
   13eb2:	4602      	mov	r2, r0
   13eb4:	460b      	mov	r3, r1
   13eb6:	4620      	mov	r0, r4
   13eb8:	4629      	mov	r1, r5
   13eba:	f002 f95f 	bl	1617c <__adddf3>
   13ebe:	4602      	mov	r2, r0
   13ec0:	460b      	mov	r3, r1
   13ec2:	4610      	mov	r0, r2
   13ec4:	4619      	mov	r1, r3
   13ec6:	f002 fded 	bl	16aa4 <__aeabi_d2f>
   13eca:	4602      	mov	r2, r0
   13ecc:	f64a 23c4 	movw	r3, #43716	; 0xaac4
   13ed0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ed4:	601a      	str	r2, [r3, #0]
	sum_xx = estimator_ir * estimator_ir + RHO * sum_xx;
   13ed6:	f64a 23b0 	movw	r3, #43696	; 0xaab0
   13eda:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ede:	681a      	ldr	r2, [r3, #0]
   13ee0:	f64a 23b0 	movw	r3, #43696	; 0xaab0
   13ee4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ee8:	681b      	ldr	r3, [r3, #0]
   13eea:	4610      	mov	r0, r2
   13eec:	4619      	mov	r1, r3
   13eee:	f002 ff37 	bl	16d60 <__aeabi_fmul>
   13ef2:	4603      	mov	r3, r0
   13ef4:	4618      	mov	r0, r3
   13ef6:	f002 fa9f 	bl	16438 <__aeabi_f2d>
   13efa:	4604      	mov	r4, r0
   13efc:	460d      	mov	r5, r1
   13efe:	f64a 23c8 	movw	r3, #43720	; 0xaac8
   13f02:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13f06:	681b      	ldr	r3, [r3, #0]
   13f08:	4618      	mov	r0, r3
   13f0a:	f002 fa95 	bl	16438 <__aeabi_f2d>
   13f0e:	4602      	mov	r2, r0
   13f10:	460b      	mov	r3, r1
   13f12:	4610      	mov	r0, r2
   13f14:	4619      	mov	r1, r3
   13f16:	a34c      	add	r3, pc, #304	; (adr r3, 14048 <estimator_update_ir_estim+0x4bc>)
   13f18:	e9d3 2300 	ldrd	r2, r3, [r3]
   13f1c:	f002 fae0 	bl	164e0 <__aeabi_dmul>
   13f20:	4602      	mov	r2, r0
   13f22:	460b      	mov	r3, r1
   13f24:	4620      	mov	r0, r4
   13f26:	4629      	mov	r1, r5
   13f28:	f002 f928 	bl	1617c <__adddf3>
   13f2c:	4602      	mov	r2, r0
   13f2e:	460b      	mov	r3, r1
   13f30:	4610      	mov	r0, r2
   13f32:	4619      	mov	r1, r3
   13f34:	f002 fdb6 	bl	16aa4 <__aeabi_d2f>
   13f38:	4602      	mov	r2, r0
   13f3a:	f64a 23c8 	movw	r3, #43720	; 0xaac8
   13f3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13f42:	601a      	str	r2, [r3, #0]
	else if (result > IR_RAD_OF_IR_MAX_VALUE)
	  estimator_rad_of_ir = IR_RAD_OF_IR_MAX_VALUE;
	else
	  estimator_rad_of_ir = result;
#else
	  estimator_rad_of_ir = sum_xy / sum_xx;
   13f44:	f64a 23c4 	movw	r3, #43716	; 0xaac4
   13f48:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13f4c:	681a      	ldr	r2, [r3, #0]
   13f4e:	f64a 23c8 	movw	r3, #43720	; 0xaac8
   13f52:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13f56:	681b      	ldr	r3, [r3, #0]
   13f58:	4610      	mov	r0, r2
   13f5a:	4619      	mov	r1, r3
   13f5c:	f002 ffb4 	bl	16ec8 <__aeabi_fdiv>
   13f60:	4603      	mov	r3, r0
   13f62:	461a      	mov	r2, r3
   13f64:	f64a 23ac 	movw	r3, #43692	; 0xaaac
   13f68:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13f6c:	601a      	str	r2, [r3, #0]
   13f6e:	e052      	b.n	14016 <estimator_update_ir_estim+0x48a>
   13f70:	e051      	b.n	14016 <estimator_update_ir_estim+0x48a>
#endif
      }
    } 
  } else {
    initialized = TRUE;
   13f72:	f64a 23b8 	movw	r3, #43704	; 0xaab8
   13f76:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13f7a:	2201      	movs	r2, #1
   13f7c:	701a      	strb	r2, [r3, #0]
    init_ir2 = ir_contrast;
   13f7e:	f240 1308 	movw	r3, #264	; 0x108
   13f82:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13f86:	881b      	ldrh	r3, [r3, #0]
   13f88:	b21b      	sxth	r3, r3
   13f8a:	4618      	mov	r0, r3
   13f8c:	f002 fe94 	bl	16cb8 <__aeabi_i2f>
   13f90:	4603      	mov	r3, r0
   13f92:	603b      	str	r3, [r7, #0]
    init_ir2 = init_ir2*init_ir2;
   13f94:	6838      	ldr	r0, [r7, #0]
   13f96:	6839      	ldr	r1, [r7, #0]
   13f98:	f002 fee2 	bl	16d60 <__aeabi_fmul>
   13f9c:	4603      	mov	r3, r0
   13f9e:	603b      	str	r3, [r7, #0]
    sum_xy = INIT_WEIGHT * estimator_rad_of_ir * init_ir2;
   13fa0:	f64a 23ac 	movw	r3, #43692	; 0xaaac
   13fa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13fa8:	681b      	ldr	r3, [r3, #0]
   13faa:	4618      	mov	r0, r3
   13fac:	f002 fa44 	bl	16438 <__aeabi_f2d>
   13fb0:	4602      	mov	r2, r0
   13fb2:	460b      	mov	r3, r1
   13fb4:	4610      	mov	r0, r2
   13fb6:	4619      	mov	r1, r3
   13fb8:	f04f 0200 	mov.w	r2, #0
   13fbc:	f04f 0300 	mov.w	r3, #0
   13fc0:	f2c4 0359 	movt	r3, #16473	; 0x4059
   13fc4:	f002 fa8c 	bl	164e0 <__aeabi_dmul>
   13fc8:	4602      	mov	r2, r0
   13fca:	460b      	mov	r3, r1
   13fcc:	4614      	mov	r4, r2
   13fce:	461d      	mov	r5, r3
   13fd0:	6838      	ldr	r0, [r7, #0]
   13fd2:	f002 fa31 	bl	16438 <__aeabi_f2d>
   13fd6:	4602      	mov	r2, r0
   13fd8:	460b      	mov	r3, r1
   13fda:	4620      	mov	r0, r4
   13fdc:	4629      	mov	r1, r5
   13fde:	f002 fa7f 	bl	164e0 <__aeabi_dmul>
   13fe2:	4602      	mov	r2, r0
   13fe4:	460b      	mov	r3, r1
   13fe6:	4610      	mov	r0, r2
   13fe8:	4619      	mov	r1, r3
   13fea:	f002 fd5b 	bl	16aa4 <__aeabi_d2f>
   13fee:	4602      	mov	r2, r0
   13ff0:	f64a 23c4 	movw	r3, #43716	; 0xaac4
   13ff4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ff8:	601a      	str	r2, [r3, #0]
    sum_xx = INIT_WEIGHT * init_ir2;
   13ffa:	6838      	ldr	r0, [r7, #0]
   13ffc:	f04f 0100 	mov.w	r1, #0
   14000:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   14004:	f002 feac 	bl	16d60 <__aeabi_fmul>
   14008:	4603      	mov	r3, r0
   1400a:	461a      	mov	r2, r3
   1400c:	f64a 23c8 	movw	r3, #43720	; 0xaac8
   14010:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14014:	601a      	str	r2, [r3, #0]
  }

  last_hspeed_dir = estimator_hspeed_dir;
   14016:	f64a 23a8 	movw	r3, #43688	; 0xaaa8
   1401a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1401e:	681a      	ldr	r2, [r3, #0]
   14020:	f64a 23c0 	movw	r3, #43712	; 0xaac0
   14024:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14028:	601a      	str	r2, [r3, #0]
  last_t = gps_ftow;
   1402a:	f24a 6328 	movw	r3, #42536	; 0xa628
   1402e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14032:	681a      	ldr	r2, [r3, #0]
   14034:	f64a 23bc 	movw	r3, #43708	; 0xaabc
   14038:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1403c:	601a      	str	r2, [r3, #0]
}
   1403e:	3710      	adds	r7, #16
   14040:	46bd      	mov	sp, r7
   14042:	bdb0      	pop	{r4, r5, r7, pc}
   14044:	f3af 8000 	nop.w
   14048:	d916872b 	.word	0xd916872b
   1404c:	3feff7ce 	.word	0x3feff7ce

00014050 <estimator_update_state_gps>:


void estimator_update_state_gps( void ) {
   14050:	b580      	push	{r7, lr}
   14052:	af00      	add	r7, sp, #0
  if (GPS_FIX_VALID(gps_mode)) {
   14054:	f24a 634c 	movw	r3, #42572	; 0xa64c
   14058:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1405c:	781b      	ldrb	r3, [r3, #0]
   1405e:	f003 0320 	and.w	r3, r3, #32
   14062:	2b00      	cmp	r3, #0
   14064:	d044      	beq.n	140f0 <estimator_update_state_gps+0xa0>
    EstimatorSetPos(gps_east, gps_north, gps_falt);
   14066:	f24a 6344 	movw	r3, #42564	; 0xa644
   1406a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1406e:	681a      	ldr	r2, [r3, #0]
   14070:	f64a 236c 	movw	r3, #43628	; 0xaa6c
   14074:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14078:	601a      	str	r2, [r3, #0]
   1407a:	f24a 6348 	movw	r3, #42568	; 0xa648
   1407e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14082:	681a      	ldr	r2, [r3, #0]
   14084:	f64a 2370 	movw	r3, #43632	; 0xaa70
   14088:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1408c:	601a      	str	r2, [r3, #0]
   1408e:	f24a 632c 	movw	r3, #42540	; 0xa62c
   14092:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14096:	681a      	ldr	r2, [r3, #0]
   14098:	f64a 2374 	movw	r3, #43636	; 0xaa74
   1409c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   140a0:	601a      	str	r2, [r3, #0]
    EstimatorSetSpeedPol(gps_fspeed, gps_fcourse, gps_fclimb);
   140a2:	f24a 6330 	movw	r3, #42544	; 0xa630
   140a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   140aa:	681a      	ldr	r2, [r3, #0]
   140ac:	f64a 23a4 	movw	r3, #43684	; 0xaaa4
   140b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   140b4:	601a      	str	r2, [r3, #0]
   140b6:	f24a 6338 	movw	r3, #42552	; 0xa638
   140ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   140be:	681a      	ldr	r2, [r3, #0]
   140c0:	f64a 23a8 	movw	r3, #43688	; 0xaaa8
   140c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   140c8:	601a      	str	r2, [r3, #0]
   140ca:	f24a 6334 	movw	r3, #42548	; 0xa634
   140ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   140d2:	681a      	ldr	r2, [r3, #0]
   140d4:	f64a 238c 	movw	r3, #43660	; 0xaa8c
   140d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   140dc:	601a      	str	r2, [r3, #0]
    
    if (estimator_flight_time)
   140de:	f64a 239c 	movw	r3, #43676	; 0xaa9c
   140e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   140e6:	881b      	ldrh	r3, [r3, #0]
   140e8:	2b00      	cmp	r3, #0
   140ea:	d001      	beq.n	140f0 <estimator_update_state_gps+0xa0>
      estimator_update_ir_estim();
   140ec:	f7ff fd4e 	bl	13b8c <estimator_update_ir_estim>
  }
}
   140f0:	bd80      	pop	{r7, pc}
   140f2:	bf00      	nop

000140f4 <estimator_propagate_state>:

void estimator_propagate_state( void ) {
   140f4:	b480      	push	{r7}
   140f6:	af00      	add	r7, sp, #0
  
}
   140f8:	46bd      	mov	sp, r7
   140fa:	f85d 7b04 	ldr.w	r7, [sp], #4
   140fe:	4770      	bx	lr

00014100 <inflight_calib>:
/* Please DO NOT EDIT */

#ifndef INFLIGHT_CALIB_H
#define INFLIGHT_CALIB_H 

void inflight_calib(bool_t mode_changed) {
   14100:	b5b0      	push	{r4, r5, r7, lr}
   14102:	b082      	sub	sp, #8
   14104:	af00      	add	r7, sp, #0
   14106:	4603      	mov	r3, r0
   14108:	71fb      	strb	r3, [r7, #7]
  if (pprz_mode == PPRZ_MODE_AUTO1) {
   1410a:	f24a 439c 	movw	r3, #42140	; 0xa49c
   1410e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14112:	781b      	ldrb	r3, [r3, #0]
   14114:	2b01      	cmp	r3, #1
   14116:	f040 80e0 	bne.w	142da <inflight_calib+0x1da>
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   1411a:	f64a 23cc 	movw	r3, #43724	; 0xaacc
   1411e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14122:	781b      	ldrb	r3, [r3, #0]
   14124:	2b02      	cmp	r3, #2
   14126:	d168      	bne.n	141fa <inflight_calib+0xfa>
      static int16_t ir_pitch_neutral_init;
      if (mode_changed) {
   14128:	79fb      	ldrb	r3, [r7, #7]
   1412a:	2b00      	cmp	r3, #0
   1412c:	d013      	beq.n	14156 <inflight_calib+0x56>
        ir_pitch_neutral_init = ir_pitch_neutral;
   1412e:	f240 130c 	movw	r3, #268	; 0x10c
   14132:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14136:	881a      	ldrh	r2, [r3, #0]
   14138:	f64a 23d2 	movw	r3, #43730	; 0xaad2
   1413c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14140:	801a      	strh	r2, [r3, #0]
        slider1_init = from_fbw.channels[RADIO_GAIN1];
   14142:	f24a 53c0 	movw	r3, #42432	; 0xa5c0
   14146:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1414a:	895a      	ldrh	r2, [r3, #10]
   1414c:	f64a 23ce 	movw	r3, #43726	; 0xaace
   14150:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14154:	801a      	strh	r2, [r3, #0]
      }
      ir_pitch_neutral = ParamValInt16(ir_pitch_neutral_init, 60.000000, from_fbw.channels[RADIO_GAIN1], slider1_init);
   14156:	f24a 53c0 	movw	r3, #42432	; 0xa5c0
   1415a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1415e:	895b      	ldrh	r3, [r3, #10]
   14160:	b21a      	sxth	r2, r3
   14162:	f64a 23ce 	movw	r3, #43726	; 0xaace
   14166:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1416a:	881b      	ldrh	r3, [r3, #0]
   1416c:	b21b      	sxth	r3, r3
   1416e:	1ad3      	subs	r3, r2, r3
   14170:	4618      	mov	r0, r3
   14172:	f002 fda1 	bl	16cb8 <__aeabi_i2f>
   14176:	4603      	mov	r3, r0
   14178:	4618      	mov	r0, r3
   1417a:	f002 f95d 	bl	16438 <__aeabi_f2d>
   1417e:	4602      	mov	r2, r0
   14180:	460b      	mov	r3, r1
   14182:	4610      	mov	r0, r2
   14184:	4619      	mov	r1, r3
   14186:	f04f 0200 	mov.w	r2, #0
   1418a:	f04f 0300 	mov.w	r3, #0
   1418e:	f2c4 034e 	movt	r3, #16462	; 0x404e
   14192:	f002 f9a5 	bl	164e0 <__aeabi_dmul>
   14196:	4602      	mov	r2, r0
   14198:	460b      	mov	r3, r1
   1419a:	4610      	mov	r0, r2
   1419c:	4619      	mov	r1, r3
   1419e:	f04f 0200 	mov.w	r2, #0
   141a2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   141a6:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   141aa:	f002 fac3 	bl	16734 <__aeabi_ddiv>
   141ae:	4602      	mov	r2, r0
   141b0:	460b      	mov	r3, r1
   141b2:	4610      	mov	r0, r2
   141b4:	4619      	mov	r1, r3
   141b6:	f002 fc2d 	bl	16a14 <__aeabi_d2iz>
   141ba:	4603      	mov	r3, r0
   141bc:	b29b      	uxth	r3, r3
   141be:	b29a      	uxth	r2, r3
   141c0:	f64a 23d2 	movw	r3, #43730	; 0xaad2
   141c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   141c8:	881b      	ldrh	r3, [r3, #0]
   141ca:	b29b      	uxth	r3, r3
   141cc:	4413      	add	r3, r2
   141ce:	b29b      	uxth	r3, r3
   141d0:	b29a      	uxth	r2, r3
   141d2:	f240 130c 	movw	r3, #268	; 0x10c
   141d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   141da:	801a      	strh	r2, [r3, #0]
      slider_1_val = (float)ir_pitch_neutral;
   141dc:	f240 130c 	movw	r3, #268	; 0x10c
   141e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   141e4:	881b      	ldrh	r3, [r3, #0]
   141e6:	b21b      	sxth	r3, r3
   141e8:	4618      	mov	r0, r3
   141ea:	f002 fd65 	bl	16cb8 <__aeabi_i2f>
   141ee:	4602      	mov	r2, r0
   141f0:	f24a 43a8 	movw	r3, #42152	; 0xa4a8
   141f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   141f8:	601a      	str	r2, [r3, #0]
    }
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   141fa:	f64a 23cc 	movw	r3, #43724	; 0xaacc
   141fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14202:	781b      	ldrb	r3, [r3, #0]
   14204:	2b02      	cmp	r3, #2
   14206:	d168      	bne.n	142da <inflight_calib+0x1da>
      static int16_t ir_roll_neutral_init;
      if (mode_changed) {
   14208:	79fb      	ldrb	r3, [r7, #7]
   1420a:	2b00      	cmp	r3, #0
   1420c:	d013      	beq.n	14236 <inflight_calib+0x136>
        ir_roll_neutral_init = ir_roll_neutral;
   1420e:	f240 130a 	movw	r3, #266	; 0x10a
   14212:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14216:	881a      	ldrh	r2, [r3, #0]
   14218:	f64a 23d4 	movw	r3, #43732	; 0xaad4
   1421c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14220:	801a      	strh	r2, [r3, #0]
        slider2_init = from_fbw.channels[RADIO_GAIN2];
   14222:	f24a 53c0 	movw	r3, #42432	; 0xa5c0
   14226:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1422a:	899a      	ldrh	r2, [r3, #12]
   1422c:	f64a 23d0 	movw	r3, #43728	; 0xaad0
   14230:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14234:	801a      	strh	r2, [r3, #0]
      }
      ir_roll_neutral = ParamValInt16(ir_roll_neutral_init, -60.000000, from_fbw.channels[RADIO_GAIN2], slider2_init);
   14236:	f24a 53c0 	movw	r3, #42432	; 0xa5c0
   1423a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1423e:	899b      	ldrh	r3, [r3, #12]
   14240:	b21a      	sxth	r2, r3
   14242:	f64a 23d0 	movw	r3, #43728	; 0xaad0
   14246:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1424a:	881b      	ldrh	r3, [r3, #0]
   1424c:	b21b      	sxth	r3, r3
   1424e:	1ad3      	subs	r3, r2, r3
   14250:	4618      	mov	r0, r3
   14252:	f002 fd31 	bl	16cb8 <__aeabi_i2f>
   14256:	4603      	mov	r3, r0
   14258:	4618      	mov	r0, r3
   1425a:	f002 f8ed 	bl	16438 <__aeabi_f2d>
   1425e:	4602      	mov	r2, r0
   14260:	460b      	mov	r3, r1
   14262:	4610      	mov	r0, r2
   14264:	4619      	mov	r1, r3
   14266:	f04f 0200 	mov.w	r2, #0
   1426a:	f04f 0300 	mov.w	r3, #0
   1426e:	f2cc 034e 	movt	r3, #49230	; 0xc04e
   14272:	f002 f935 	bl	164e0 <__aeabi_dmul>
   14276:	4602      	mov	r2, r0
   14278:	460b      	mov	r3, r1
   1427a:	4610      	mov	r0, r2
   1427c:	4619      	mov	r1, r3
   1427e:	f04f 0200 	mov.w	r2, #0
   14282:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   14286:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   1428a:	f002 fa53 	bl	16734 <__aeabi_ddiv>
   1428e:	4602      	mov	r2, r0
   14290:	460b      	mov	r3, r1
   14292:	4610      	mov	r0, r2
   14294:	4619      	mov	r1, r3
   14296:	f002 fbbd 	bl	16a14 <__aeabi_d2iz>
   1429a:	4603      	mov	r3, r0
   1429c:	b29b      	uxth	r3, r3
   1429e:	b29a      	uxth	r2, r3
   142a0:	f64a 23d4 	movw	r3, #43732	; 0xaad4
   142a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   142a8:	881b      	ldrh	r3, [r3, #0]
   142aa:	b29b      	uxth	r3, r3
   142ac:	4413      	add	r3, r2
   142ae:	b29b      	uxth	r3, r3
   142b0:	b29a      	uxth	r2, r3
   142b2:	f240 130a 	movw	r3, #266	; 0x10a
   142b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   142ba:	801a      	strh	r2, [r3, #0]
      slider_2_val = (float)ir_roll_neutral;
   142bc:	f240 130a 	movw	r3, #266	; 0x10a
   142c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   142c4:	881b      	ldrh	r3, [r3, #0]
   142c6:	b21b      	sxth	r3, r3
   142c8:	4618      	mov	r0, r3
   142ca:	f002 fcf5 	bl	16cb8 <__aeabi_i2f>
   142ce:	4602      	mov	r2, r0
   142d0:	f24a 43ac 	movw	r3, #42156	; 0xa4ac
   142d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   142d8:	601a      	str	r2, [r3, #0]
    }
  }
  if (pprz_mode == PPRZ_MODE_AUTO2) {
   142da:	f24a 439c 	movw	r3, #42140	; 0xa49c
   142de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   142e2:	781b      	ldrb	r3, [r3, #0]
   142e4:	2b02      	cmp	r3, #2
   142e6:	f040 80da 	bne.w	1449e <inflight_calib+0x39e>
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   142ea:	f64a 23cc 	movw	r3, #43724	; 0xaacc
   142ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   142f2:	781b      	ldrb	r3, [r3, #0]
   142f4:	2b02      	cmp	r3, #2
   142f6:	d165      	bne.n	143c4 <inflight_calib+0x2c4>
      static float course_pgain_init;
      if (mode_changed) {
   142f8:	79fb      	ldrb	r3, [r7, #7]
   142fa:	2b00      	cmp	r3, #0
   142fc:	d013      	beq.n	14326 <inflight_calib+0x226>
        course_pgain_init = course_pgain;
   142fe:	f240 1320 	movw	r3, #288	; 0x120
   14302:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14306:	681a      	ldr	r2, [r3, #0]
   14308:	f64a 23d8 	movw	r3, #43736	; 0xaad8
   1430c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14310:	601a      	str	r2, [r3, #0]
        slider1_init = from_fbw.channels[RADIO_GAIN1];
   14312:	f24a 53c0 	movw	r3, #42432	; 0xa5c0
   14316:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1431a:	895a      	ldrh	r2, [r3, #10]
   1431c:	f64a 23ce 	movw	r3, #43726	; 0xaace
   14320:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14324:	801a      	strh	r2, [r3, #0]
      }
      course_pgain = ParamValFloat(course_pgain_init, 0.100000, from_fbw.channels[RADIO_GAIN1], slider1_init);
   14326:	f64a 23d8 	movw	r3, #43736	; 0xaad8
   1432a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1432e:	681b      	ldr	r3, [r3, #0]
   14330:	4618      	mov	r0, r3
   14332:	f002 f881 	bl	16438 <__aeabi_f2d>
   14336:	4604      	mov	r4, r0
   14338:	460d      	mov	r5, r1
   1433a:	f24a 53c0 	movw	r3, #42432	; 0xa5c0
   1433e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14342:	895b      	ldrh	r3, [r3, #10]
   14344:	b21a      	sxth	r2, r3
   14346:	f64a 23ce 	movw	r3, #43726	; 0xaace
   1434a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1434e:	881b      	ldrh	r3, [r3, #0]
   14350:	b21b      	sxth	r3, r3
   14352:	1ad3      	subs	r3, r2, r3
   14354:	4618      	mov	r0, r3
   14356:	f002 fcaf 	bl	16cb8 <__aeabi_i2f>
   1435a:	4603      	mov	r3, r0
   1435c:	4618      	mov	r0, r3
   1435e:	f002 f86b 	bl	16438 <__aeabi_f2d>
   14362:	4602      	mov	r2, r0
   14364:	460b      	mov	r3, r1
   14366:	4610      	mov	r0, r2
   14368:	4619      	mov	r1, r3
   1436a:	a34f      	add	r3, pc, #316	; (adr r3, 144a8 <inflight_calib+0x3a8>)
   1436c:	e9d3 2300 	ldrd	r2, r3, [r3]
   14370:	f002 f8b6 	bl	164e0 <__aeabi_dmul>
   14374:	4602      	mov	r2, r0
   14376:	460b      	mov	r3, r1
   14378:	4610      	mov	r0, r2
   1437a:	4619      	mov	r1, r3
   1437c:	f04f 0200 	mov.w	r2, #0
   14380:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   14384:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   14388:	f002 f9d4 	bl	16734 <__aeabi_ddiv>
   1438c:	4602      	mov	r2, r0
   1438e:	460b      	mov	r3, r1
   14390:	4620      	mov	r0, r4
   14392:	4629      	mov	r1, r5
   14394:	f001 fef2 	bl	1617c <__adddf3>
   14398:	4602      	mov	r2, r0
   1439a:	460b      	mov	r3, r1
   1439c:	4610      	mov	r0, r2
   1439e:	4619      	mov	r1, r3
   143a0:	f002 fb80 	bl	16aa4 <__aeabi_d2f>
   143a4:	4602      	mov	r2, r0
   143a6:	f240 1320 	movw	r3, #288	; 0x120
   143aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   143ae:	601a      	str	r2, [r3, #0]
      slider_1_val = (float)course_pgain;
   143b0:	f240 1320 	movw	r3, #288	; 0x120
   143b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   143b8:	681a      	ldr	r2, [r3, #0]
   143ba:	f24a 43a8 	movw	r3, #42152	; 0xa4a8
   143be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   143c2:	601a      	str	r2, [r3, #0]
    }
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   143c4:	f64a 23cc 	movw	r3, #43724	; 0xaacc
   143c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   143cc:	781b      	ldrb	r3, [r3, #0]
   143ce:	2b02      	cmp	r3, #2
   143d0:	d165      	bne.n	1449e <inflight_calib+0x39e>
      static float max_roll_init;
      if (mode_changed) {
   143d2:	79fb      	ldrb	r3, [r7, #7]
   143d4:	2b00      	cmp	r3, #0
   143d6:	d013      	beq.n	14400 <inflight_calib+0x300>
        max_roll_init = max_roll;
   143d8:	f240 1324 	movw	r3, #292	; 0x124
   143dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   143e0:	681a      	ldr	r2, [r3, #0]
   143e2:	f64a 23dc 	movw	r3, #43740	; 0xaadc
   143e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   143ea:	601a      	str	r2, [r3, #0]
        slider2_init = from_fbw.channels[RADIO_GAIN2];
   143ec:	f24a 53c0 	movw	r3, #42432	; 0xa5c0
   143f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   143f4:	899a      	ldrh	r2, [r3, #12]
   143f6:	f64a 23d0 	movw	r3, #43728	; 0xaad0
   143fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   143fe:	801a      	strh	r2, [r3, #0]
      }
      max_roll = ParamValFloat(max_roll_init, -0.200000, from_fbw.channels[RADIO_GAIN2], slider2_init);
   14400:	f64a 23dc 	movw	r3, #43740	; 0xaadc
   14404:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14408:	681b      	ldr	r3, [r3, #0]
   1440a:	4618      	mov	r0, r3
   1440c:	f002 f814 	bl	16438 <__aeabi_f2d>
   14410:	4604      	mov	r4, r0
   14412:	460d      	mov	r5, r1
   14414:	f24a 53c0 	movw	r3, #42432	; 0xa5c0
   14418:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1441c:	899b      	ldrh	r3, [r3, #12]
   1441e:	b21a      	sxth	r2, r3
   14420:	f64a 23d0 	movw	r3, #43728	; 0xaad0
   14424:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14428:	881b      	ldrh	r3, [r3, #0]
   1442a:	b21b      	sxth	r3, r3
   1442c:	1ad3      	subs	r3, r2, r3
   1442e:	4618      	mov	r0, r3
   14430:	f002 fc42 	bl	16cb8 <__aeabi_i2f>
   14434:	4603      	mov	r3, r0
   14436:	4618      	mov	r0, r3
   14438:	f001 fffe 	bl	16438 <__aeabi_f2d>
   1443c:	4602      	mov	r2, r0
   1443e:	460b      	mov	r3, r1
   14440:	4610      	mov	r0, r2
   14442:	4619      	mov	r1, r3
   14444:	a31a      	add	r3, pc, #104	; (adr r3, 144b0 <inflight_calib+0x3b0>)
   14446:	e9d3 2300 	ldrd	r2, r3, [r3]
   1444a:	f002 f849 	bl	164e0 <__aeabi_dmul>
   1444e:	4602      	mov	r2, r0
   14450:	460b      	mov	r3, r1
   14452:	4610      	mov	r0, r2
   14454:	4619      	mov	r1, r3
   14456:	f04f 0200 	mov.w	r2, #0
   1445a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   1445e:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   14462:	f002 f967 	bl	16734 <__aeabi_ddiv>
   14466:	4602      	mov	r2, r0
   14468:	460b      	mov	r3, r1
   1446a:	4620      	mov	r0, r4
   1446c:	4629      	mov	r1, r5
   1446e:	f001 fe85 	bl	1617c <__adddf3>
   14472:	4602      	mov	r2, r0
   14474:	460b      	mov	r3, r1
   14476:	4610      	mov	r0, r2
   14478:	4619      	mov	r1, r3
   1447a:	f002 fb13 	bl	16aa4 <__aeabi_d2f>
   1447e:	4602      	mov	r2, r0
   14480:	f240 1324 	movw	r3, #292	; 0x124
   14484:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14488:	601a      	str	r2, [r3, #0]
      slider_2_val = (float)max_roll;
   1448a:	f240 1324 	movw	r3, #292	; 0x124
   1448e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14492:	681a      	ldr	r2, [r3, #0]
   14494:	f24a 43ac 	movw	r3, #42156	; 0xa4ac
   14498:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1449c:	601a      	str	r2, [r3, #0]
    }
  }
}
   1449e:	3708      	adds	r7, #8
   144a0:	46bd      	mov	sp, r7
   144a2:	bdb0      	pop	{r4, r5, r7, pc}
   144a4:	f3af 8000 	nop.w
   144a8:	9999999a 	.word	0x9999999a
   144ac:	3fb99999 	.word	0x3fb99999
   144b0:	9999999a 	.word	0x9999999a
   144b4:	bfc99999 	.word	0xbfc99999

000144b8 <pp_atan2>:
 *
 */
#include <math.h>

double pp_atan2(double x, double y)
{
   144b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
   144bc:	b08e      	sub	sp, #56	; 0x38
   144be:	af00      	add	r7, sp, #0
   144c0:	e9c7 0102 	strd	r0, r1, [r7, #8]
   144c4:	e9c7 2300 	strd	r2, r3, [r7]
	double coeff_1 = M_PI/4;
   144c8:	a357      	add	r3, pc, #348	; (adr r3, 14628 <pp_atan2+0x170>)
   144ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   144ce:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double coeff_2 = 3*coeff_1;
   144d2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   144d6:	f04f 0200 	mov.w	r2, #0
   144da:	f04f 0300 	mov.w	r3, #0
   144de:	f2c4 0308 	movt	r3, #16392	; 0x4008
   144e2:	f001 fffd 	bl	164e0 <__aeabi_dmul>
   144e6:	4602      	mov	r2, r0
   144e8:	460b      	mov	r3, r1
   144ea:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double abs_y = fabs(y)+1e-10;
   144ee:	e9d7 0100 	ldrd	r0, r1, [r7]
   144f2:	f04f 0200 	mov.w	r2, #0
   144f6:	f04f 0300 	mov.w	r3, #0
   144fa:	f002 fa63 	bl	169c4 <__aeabi_dcmplt>
   144fe:	4603      	mov	r3, r0
   14500:	2b00      	cmp	r3, #0
   14502:	d009      	beq.n	14518 <pp_atan2+0x60>
   14504:	a14a      	add	r1, pc, #296	; (adr r1, 14630 <pp_atan2+0x178>)
   14506:	e9d1 0100 	ldrd	r0, r1, [r1]
   1450a:	e9d7 2300 	ldrd	r2, r3, [r7]
   1450e:	f001 fe33 	bl	16178 <__aeabi_dsub>
   14512:	4602      	mov	r2, r0
   14514:	460b      	mov	r3, r1
   14516:	e008      	b.n	1452a <pp_atan2+0x72>
   14518:	e9d7 0100 	ldrd	r0, r1, [r7]
   1451c:	a344      	add	r3, pc, #272	; (adr r3, 14630 <pp_atan2+0x178>)
   1451e:	e9d3 2300 	ldrd	r2, r3, [r3]
   14522:	f001 fe2b 	bl	1617c <__adddf3>
   14526:	4602      	mov	r2, r0
   14528:	460b      	mov	r3, r1
   1452a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double angle, r;
	if(x>0)
   1452e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   14532:	f04f 0200 	mov.w	r2, #0
   14536:	f04f 0300 	mov.w	r3, #0
   1453a:	f002 fa61 	bl	16a00 <__aeabi_dcmpgt>
   1453e:	4603      	mov	r3, r0
   14540:	2b00      	cmp	r3, #0
   14542:	d02a      	beq.n	1459a <pp_atan2+0xe2>
	{
		r = (x - abs_y)/(x + abs_y);
   14544:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   14548:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   1454c:	f001 fe14 	bl	16178 <__aeabi_dsub>
   14550:	4602      	mov	r2, r0
   14552:	460b      	mov	r3, r1
   14554:	4690      	mov	r8, r2
   14556:	4699      	mov	r9, r3
   14558:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   1455c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   14560:	f001 fe0c 	bl	1617c <__adddf3>
   14564:	4602      	mov	r2, r0
   14566:	460b      	mov	r3, r1
   14568:	4640      	mov	r0, r8
   1456a:	4649      	mov	r1, r9
   1456c:	f002 f8e2 	bl	16734 <__aeabi_ddiv>
   14570:	4602      	mov	r2, r0
   14572:	460b      	mov	r3, r1
   14574:	e9c7 2304 	strd	r2, r3, [r7, #16]
		angle = coeff_1 - coeff_1*r;
   14578:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   1457c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   14580:	f001 ffae 	bl	164e0 <__aeabi_dmul>
   14584:	4602      	mov	r2, r0
   14586:	460b      	mov	r3, r1
   14588:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   1458c:	f001 fdf4 	bl	16178 <__aeabi_dsub>
   14590:	4602      	mov	r2, r0
   14592:	460b      	mov	r3, r1
   14594:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
   14598:	e029      	b.n	145ee <pp_atan2+0x136>
	}
	else
	{
		r = (x + abs_y)/(abs_y - x);
   1459a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   1459e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   145a2:	f001 fdeb 	bl	1617c <__adddf3>
   145a6:	4602      	mov	r2, r0
   145a8:	460b      	mov	r3, r1
   145aa:	4690      	mov	r8, r2
   145ac:	4699      	mov	r9, r3
   145ae:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   145b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   145b6:	f001 fddf 	bl	16178 <__aeabi_dsub>
   145ba:	4602      	mov	r2, r0
   145bc:	460b      	mov	r3, r1
   145be:	4640      	mov	r0, r8
   145c0:	4649      	mov	r1, r9
   145c2:	f002 f8b7 	bl	16734 <__aeabi_ddiv>
   145c6:	4602      	mov	r2, r0
   145c8:	460b      	mov	r3, r1
   145ca:	e9c7 2304 	strd	r2, r3, [r7, #16]
		angle = coeff_2 - coeff_1*r;
   145ce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   145d2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   145d6:	f001 ff83 	bl	164e0 <__aeabi_dmul>
   145da:	4602      	mov	r2, r0
   145dc:	460b      	mov	r3, r1
   145de:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
   145e2:	f001 fdc9 	bl	16178 <__aeabi_dsub>
   145e6:	4602      	mov	r2, r0
   145e8:	460b      	mov	r3, r1
   145ea:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	}
	if(y<0)
   145ee:	e9d7 0100 	ldrd	r0, r1, [r7]
   145f2:	f04f 0200 	mov.w	r2, #0
   145f6:	f04f 0300 	mov.w	r3, #0
   145fa:	f002 f9e3 	bl	169c4 <__aeabi_dcmplt>
   145fe:	4603      	mov	r3, r0
   14600:	2b00      	cmp	r3, #0
   14602:	d004      	beq.n	1460e <pp_atan2+0x156>
		return (-angle);
   14604:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   14606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14608:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   1460c:	e001      	b.n	14612 <pp_atan2+0x15a>
	else
		return angle;
   1460e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
   14612:	4622      	mov	r2, r4
   14614:	462b      	mov	r3, r5
}
   14616:	4610      	mov	r0, r2
   14618:	4619      	mov	r1, r3
   1461a:	3738      	adds	r7, #56	; 0x38
   1461c:	46bd      	mov	sp, r7
   1461e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
   14622:	bf00      	nop
   14624:	f3af 8000 	nop.w
   14628:	54442d18 	.word	0x54442d18
   1462c:	3fe921fb 	.word	0x3fe921fb
   14630:	d9d7bdbb 	.word	0xd9d7bdbb
   14634:	3ddb7cdf 	.word	0x3ddb7cdf

00014638 <pp_sin>:
 * Range: -pi/2 <= x <= pi/2
 * Precision: +/- .000,000,005
 */
 
double pp_sin(double x)
{
   14638:	b5b0      	push	{r4, r5, r7, lr}
   1463a:	b08c      	sub	sp, #48	; 0x30
   1463c:	af00      	add	r7, sp, #0
   1463e:	e9c7 0100 	strd	r0, r1, [r7]
	double xi, y, q, q2;
	int sign;

	xi = x; sign = 1;
   14642:	e9d7 2300 	ldrd	r2, r3, [r7]
   14646:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   1464a:	2301      	movs	r3, #1
   1464c:	627b      	str	r3, [r7, #36]	; 0x24
	while (xi < -1.57079632679489661923) xi += 6.28318530717958647692;
   1464e:	e00a      	b.n	14666 <pp_sin+0x2e>
   14650:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   14654:	a35a      	add	r3, pc, #360	; (adr r3, 147c0 <pp_sin+0x188>)
   14656:	e9d3 2300 	ldrd	r2, r3, [r3]
   1465a:	f001 fd8f 	bl	1617c <__adddf3>
   1465e:	4602      	mov	r2, r0
   14660:	460b      	mov	r3, r1
   14662:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   14666:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   1466a:	a357      	add	r3, pc, #348	; (adr r3, 147c8 <pp_sin+0x190>)
   1466c:	e9d3 2300 	ldrd	r2, r3, [r3]
   14670:	f002 f9a8 	bl	169c4 <__aeabi_dcmplt>
   14674:	4603      	mov	r3, r0
   14676:	2b00      	cmp	r3, #0
   14678:	d1ea      	bne.n	14650 <pp_sin+0x18>
	while (xi > 4.71238898038468985769) xi -= 6.28318530717958647692;
   1467a:	e00a      	b.n	14692 <pp_sin+0x5a>
   1467c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   14680:	a34f      	add	r3, pc, #316	; (adr r3, 147c0 <pp_sin+0x188>)
   14682:	e9d3 2300 	ldrd	r2, r3, [r3]
   14686:	f001 fd77 	bl	16178 <__aeabi_dsub>
   1468a:	4602      	mov	r2, r0
   1468c:	460b      	mov	r3, r1
   1468e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   14692:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   14696:	a34e      	add	r3, pc, #312	; (adr r3, 147d0 <pp_sin+0x198>)
   14698:	e9d3 2300 	ldrd	r2, r3, [r3]
   1469c:	f002 f9b0 	bl	16a00 <__aeabi_dcmpgt>
   146a0:	4603      	mov	r3, r0
   146a2:	2b00      	cmp	r3, #0
   146a4:	d1ea      	bne.n	1467c <pp_sin+0x44>
	if (xi > 1.57079632679489661923) {
   146a6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   146aa:	a34b      	add	r3, pc, #300	; (adr r3, 147d8 <pp_sin+0x1a0>)
   146ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   146b0:	f002 f9a6 	bl	16a00 <__aeabi_dcmpgt>
   146b4:	4603      	mov	r3, r0
   146b6:	2b00      	cmp	r3, #0
   146b8:	d00d      	beq.n	146d6 <pp_sin+0x9e>
		xi -= 3.141592653589793238462643;
   146ba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   146be:	a348      	add	r3, pc, #288	; (adr r3, 147e0 <pp_sin+0x1a8>)
   146c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   146c4:	f001 fd58 	bl	16178 <__aeabi_dsub>
   146c8:	4602      	mov	r2, r0
   146ca:	460b      	mov	r3, r1
   146cc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		sign = -1;
   146d0:	f04f 33ff 	mov.w	r3, #4294967295
   146d4:	627b      	str	r3, [r7, #36]	; 0x24
	}
	q = xi / 1.57079632679; q2 = q * q;
   146d6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   146da:	a343      	add	r3, pc, #268	; (adr r3, 147e8 <pp_sin+0x1b0>)
   146dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   146e0:	f002 f828 	bl	16734 <__aeabi_ddiv>
   146e4:	4602      	mov	r2, r0
   146e6:	460b      	mov	r3, r1
   146e8:	e9c7 2306 	strd	r2, r3, [r7, #24]
   146ec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   146f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   146f4:	f001 fef4 	bl	164e0 <__aeabi_dmul>
   146f8:	4602      	mov	r2, r0
   146fa:	460b      	mov	r3, r1
   146fc:	e9c7 2304 	strd	r2, r3, [r7, #16]
	y = ((((.00015148419  * q2
   14700:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   14704:	a33a      	add	r3, pc, #232	; (adr r3, 147f0 <pp_sin+0x1b8>)
   14706:	e9d3 2300 	ldrd	r2, r3, [r3]
   1470a:	f001 fee9 	bl	164e0 <__aeabi_dmul>
   1470e:	4602      	mov	r2, r0
   14710:	460b      	mov	r3, r1
	      - .00467376557) * q2
   14712:	4610      	mov	r0, r2
   14714:	4619      	mov	r1, r3
   14716:	a338      	add	r3, pc, #224	; (adr r3, 147f8 <pp_sin+0x1c0>)
   14718:	e9d3 2300 	ldrd	r2, r3, [r3]
   1471c:	f001 fd2c 	bl	16178 <__aeabi_dsub>
   14720:	4602      	mov	r2, r0
   14722:	460b      	mov	r3, r1
   14724:	4610      	mov	r0, r2
   14726:	4619      	mov	r1, r3
   14728:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   1472c:	f001 fed8 	bl	164e0 <__aeabi_dmul>
   14730:	4602      	mov	r2, r0
   14732:	460b      	mov	r3, r1
	      + .07968967928) * q2
   14734:	4610      	mov	r0, r2
   14736:	4619      	mov	r1, r3
   14738:	a331      	add	r3, pc, #196	; (adr r3, 14800 <pp_sin+0x1c8>)
   1473a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1473e:	f001 fd1d 	bl	1617c <__adddf3>
   14742:	4602      	mov	r2, r0
   14744:	460b      	mov	r3, r1
   14746:	4610      	mov	r0, r2
   14748:	4619      	mov	r1, r3
   1474a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   1474e:	f001 fec7 	bl	164e0 <__aeabi_dmul>
   14752:	4602      	mov	r2, r0
   14754:	460b      	mov	r3, r1
	      - .64596371106) * q2
   14756:	4610      	mov	r0, r2
   14758:	4619      	mov	r1, r3
   1475a:	a32b      	add	r3, pc, #172	; (adr r3, 14808 <pp_sin+0x1d0>)
   1475c:	e9d3 2300 	ldrd	r2, r3, [r3]
   14760:	f001 fd0a 	bl	16178 <__aeabi_dsub>
   14764:	4602      	mov	r2, r0
   14766:	460b      	mov	r3, r1
   14768:	4610      	mov	r0, r2
   1476a:	4619      	mov	r1, r3
   1476c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   14770:	f001 feb6 	bl	164e0 <__aeabi_dmul>
   14774:	4602      	mov	r2, r0
   14776:	460b      	mov	r3, r1
	      +1.57079631847) * q;
   14778:	4610      	mov	r0, r2
   1477a:	4619      	mov	r1, r3
   1477c:	a324      	add	r3, pc, #144	; (adr r3, 14810 <pp_sin+0x1d8>)
   1477e:	e9d3 2300 	ldrd	r2, r3, [r3]
   14782:	f001 fcfb 	bl	1617c <__adddf3>
   14786:	4602      	mov	r2, r0
   14788:	460b      	mov	r3, r1
	if (xi > 1.57079632679489661923) {
		xi -= 3.141592653589793238462643;
		sign = -1;
	}
	q = xi / 1.57079632679; q2 = q * q;
	y = ((((.00015148419  * q2
   1478a:	4610      	mov	r0, r2
   1478c:	4619      	mov	r1, r3
   1478e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   14792:	f001 fea5 	bl	164e0 <__aeabi_dmul>
   14796:	4602      	mov	r2, r0
   14798:	460b      	mov	r3, r1
   1479a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	      - .00467376557) * q2
	      + .07968967928) * q2
	      - .64596371106) * q2
	      +1.57079631847) * q;
	return(sign < 0? -y : y);
   1479e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   147a0:	2b00      	cmp	r3, #0
   147a2:	da04      	bge.n	147ae <pp_sin+0x176>
   147a4:	68bc      	ldr	r4, [r7, #8]
   147a6:	68fb      	ldr	r3, [r7, #12]
   147a8:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   147ac:	e001      	b.n	147b2 <pp_sin+0x17a>
   147ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
   147b2:	4622      	mov	r2, r4
   147b4:	462b      	mov	r3, r5
}
   147b6:	4610      	mov	r0, r2
   147b8:	4619      	mov	r1, r3
   147ba:	3730      	adds	r7, #48	; 0x30
   147bc:	46bd      	mov	sp, r7
   147be:	bdb0      	pop	{r4, r5, r7, pc}
   147c0:	54442d18 	.word	0x54442d18
   147c4:	401921fb 	.word	0x401921fb
   147c8:	54442d18 	.word	0x54442d18
   147cc:	bff921fb 	.word	0xbff921fb
   147d0:	7f3321d2 	.word	0x7f3321d2
   147d4:	4012d97c 	.word	0x4012d97c
   147d8:	54442d18 	.word	0x54442d18
   147dc:	3ff921fb 	.word	0x3ff921fb
   147e0:	54442d18 	.word	0x54442d18
   147e4:	400921fb 	.word	0x400921fb
   147e8:	5443d6f4 	.word	0x5443d6f4
   147ec:	3ff921fb 	.word	0x3ff921fb
   147f0:	48a890af 	.word	0x48a890af
   147f4:	3f23daf7 	.word	0x3f23daf7
   147f8:	645b6d0e 	.word	0x645b6d0e
   147fc:	3f7324cc 	.word	0x3f7324cc
   14800:	f65619a5 	.word	0xf65619a5
   14804:	3fb4668a 	.word	0x3fb4668a
   14808:	16acf9cd 	.word	0x16acf9cd
   1480c:	3fe4abbc 	.word	0x3fe4abbc
   14810:	520817f7 	.word	0x520817f7
   14814:	3ff921fb 	.word	0x3ff921fb

00014818 <pp_sqrt>:

#define SQRT_PRECISION 5
double pp_sqrt(double n)
{
   14818:	b480      	push	{r7}
   1481a:	b083      	sub	sp, #12
   1481c:	af00      	add	r7, sp, #0
   1481e:	e9c7 0100 	strd	r0, r1, [r7]
	/* perform the computation */
	for(i = 0; i < SQRT_PRECISION; i++)
		x = (x + n / x) / 2;
	return x;
#endif
}
   14822:	4610      	mov	r0, r2
   14824:	4619      	mov	r1, r3
   14826:	370c      	adds	r7, #12
   14828:	46bd      	mov	sp, r7
   1482a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1482e:	4770      	bx	lr

00014830 <fbw_adc_buf_channel>:

uint16_t fbw_adc_samples[ FBW_NB_ADC ];

static struct fbw_adc_buf* buffers[FBW_NB_ADC];

void fbw_adc_buf_channel(uint8_t adc_channel, struct fbw_adc_buf* s) {
   14830:	b480      	push	{r7}
   14832:	b083      	sub	sp, #12
   14834:	af00      	add	r7, sp, #0
   14836:	4603      	mov	r3, r0
   14838:	6039      	str	r1, [r7, #0]
   1483a:	71fb      	strb	r3, [r7, #7]
  buffers[adc_channel] = s;
   1483c:	79fa      	ldrb	r2, [r7, #7]
   1483e:	f64a 23f0 	movw	r3, #43760	; 0xaaf0
   14842:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14846:	6839      	ldr	r1, [r7, #0]
   14848:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   1484c:	370c      	adds	r7, #12
   1484e:	46bd      	mov	sp, r7
   14850:	f85d 7b04 	ldr.w	r7, [sp], #4
   14854:	4770      	bx	lr
   14856:	bf00      	nop

00014858 <fbw_adc_init>:

void 
fbw_adc_init( void )
{
   14858:	b480      	push	{r7}
   1485a:	b083      	sub	sp, #12
   1485c:	af00      	add	r7, sp, #0
  uint8_t i;
  /* Ensure that our port is for input with no pull-ups */
  ANALOG_PORT 	= 0x00;
   1485e:	f242 0315 	movw	r3, #8213	; 0x2015
   14862:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14866:	2200      	movs	r2, #0
   14868:	701a      	strb	r2, [r3, #0]
  ANALOG_PORT_DIR	= 0x00;
   1486a:	f242 0314 	movw	r3, #8212	; 0x2014
   1486e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14872:	2200      	movs	r2, #0
   14874:	701a      	strb	r2, [r3, #0]

  /* Select our external voltage ref */
  ADMUX		= ANALOG_VREF;
   14876:	f242 0307 	movw	r3, #8199	; 0x2007
   1487a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1487e:	22c0      	movs	r2, #192	; 0xc0
   14880:	701a      	strb	r2, [r3, #0]

  /* Select out clock, turn on the ADC interrupt and start conversion */
  ADCSRA = 0
   14882:	f242 0306 	movw	r3, #8198	; 0x2006
   14886:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1488a:	22cf      	movs	r2, #207	; 0xcf
   1488c:	701a      	strb	r2, [r3, #0]
    | _BV(ADEN )
    | _BV(ADIE )
    | _BV(ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < FBW_NB_ADC; i++)
   1488e:	2300      	movs	r3, #0
   14890:	71fb      	strb	r3, [r7, #7]
   14892:	e00a      	b.n	148aa <fbw_adc_init+0x52>
    buffers[i] = (struct fbw_adc_buf*)0;
   14894:	79fa      	ldrb	r2, [r7, #7]
   14896:	f64a 23f0 	movw	r3, #43760	; 0xaaf0
   1489a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1489e:	2100      	movs	r1, #0
   148a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    | _BV(ADEN )
    | _BV(ADIE )
    | _BV(ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < FBW_NB_ADC; i++)
   148a4:	79fb      	ldrb	r3, [r7, #7]
   148a6:	3301      	adds	r3, #1
   148a8:	71fb      	strb	r3, [r7, #7]
   148aa:	79fb      	ldrb	r3, [r7, #7]
   148ac:	2b07      	cmp	r3, #7
   148ae:	d9f1      	bls.n	14894 <fbw_adc_init+0x3c>
    buffers[i] = (struct fbw_adc_buf*)0;
}
   148b0:	370c      	adds	r7, #12
   148b2:	46bd      	mov	sp, r7
   148b4:	f85d 7b04 	ldr.w	r7, [sp], #4
   148b8:	4770      	bx	lr
   148ba:	bf00      	nop

000148bc <__vector_34>:
#ifdef PAPABENCH_SINGLE
	SIGNAL(SIG_SPM_READY)
#else
	SIGNAL( SIG_INPUT_CAPTURE1 )
#endif
{
   148bc:	b480      	push	{r7}
   148be:	b083      	sub	sp, #12
   148c0:	af00      	add	r7, sp, #0
  uint16_t		this;
  uint16_t		width;
  static uint8_t		state;
  static uint8_t		sync_start;

  this		= ICR1;
   148c2:	f242 0326 	movw	r3, #8230	; 0x2026
   148c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   148ca:	881b      	ldrh	r3, [r3, #0]
   148cc:	80fb      	strh	r3, [r7, #6]
  width		= this - last;
   148ce:	f64a 334c 	movw	r3, #43852	; 0xab4c
   148d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   148d6:	881b      	ldrh	r3, [r3, #0]
   148d8:	88fa      	ldrh	r2, [r7, #6]
   148da:	1ad3      	subs	r3, r2, r3
   148dc:	80bb      	strh	r3, [r7, #4]
  last		= this;
   148de:	f64a 334c 	movw	r3, #43852	; 0xab4c
   148e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   148e6:	88fa      	ldrh	r2, [r7, #6]
   148e8:	801a      	strh	r2, [r3, #0]
  
  if( state == 0 ) {
   148ea:	f64a 334e 	movw	r3, #43854	; 0xab4e
   148ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   148f2:	781b      	ldrb	r3, [r3, #0]
   148f4:	2b00      	cmp	r3, #0
   148f6:	d11e      	bne.n	14936 <__vector_34+0x7a>
    uint8_t	end = TCNT2;
   148f8:	f242 0324 	movw	r3, #8228	; 0x2024
   148fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14900:	781b      	ldrb	r3, [r3, #0]
   14902:	70fb      	strb	r3, [r7, #3]
    uint8_t diff = (end - sync_start);
   14904:	f64a 334f 	movw	r3, #43855	; 0xab4f
   14908:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1490c:	781b      	ldrb	r3, [r3, #0]
   1490e:	78fa      	ldrb	r2, [r7, #3]
   14910:	1ad3      	subs	r3, r2, r3
   14912:	70bb      	strb	r3, [r7, #2]
    sync_start = end;
   14914:	f64a 334f 	movw	r3, #43855	; 0xab4f
   14918:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1491c:	78fa      	ldrb	r2, [r7, #3]
   1491e:	701a      	strb	r2, [r3, #0]

    /* The frame period of the mc3030 seems to be 25ms. 
     * One pulse lasts from 1.05ms to 2.150ms.
     * Sync pulse is at least 7ms : (7000*CLOCK)/1024 = 109
     */
    if( diff > (uint8_t)(((uint32_t)(7000ul*CLOCK))/1024ul) ) {
   14920:	78bb      	ldrb	r3, [r7, #2]
   14922:	2b6d      	cmp	r3, #109	; 0x6d
   14924:	d906      	bls.n	14934 <__vector_34+0x78>
      state = 1;
   14926:	f64a 334e 	movw	r3, #43854	; 0xab4e
   1492a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1492e:	2201      	movs	r2, #1
   14930:	701a      	strb	r2, [r3, #0]
   14932:	e053      	b.n	149dc <__vector_34+0x120>
   14934:	e052      	b.n	149dc <__vector_34+0x120>
    }
  } 
  else {
    /* Read a data pulses */
    if( width < 700ul*CLOCK || width > 2300ul*CLOCK)
   14936:	88bb      	ldrh	r3, [r7, #4]
   14938:	f5b3 5f2f 	cmp.w	r3, #11200	; 0x2bc0
   1493c:	d304      	bcc.n	14948 <__vector_34+0x8c>
   1493e:	88ba      	ldrh	r2, [r7, #4]
   14940:	f648 73c0 	movw	r3, #36800	; 0x8fc0
   14944:	429a      	cmp	r2, r3
   14946:	d911      	bls.n	1496c <__vector_34+0xb0>
      RestartPpmCycle();
   14948:	f64a 334e 	movw	r3, #43854	; 0xab4e
   1494c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14950:	2200      	movs	r2, #0
   14952:	701a      	strb	r2, [r3, #0]
   14954:	f242 0324 	movw	r3, #8228	; 0x2024
   14958:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1495c:	781b      	ldrb	r3, [r3, #0]
   1495e:	b2da      	uxtb	r2, r3
   14960:	f64a 334f 	movw	r3, #43855	; 0xab4f
   14964:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14968:	701a      	strb	r2, [r3, #0]
   1496a:	e038      	b.n	149de <__vector_34+0x122>
    ppm_pulses[state - 1] = width;
   1496c:	f64a 334e 	movw	r3, #43854	; 0xab4e
   14970:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14974:	781b      	ldrb	r3, [r3, #0]
   14976:	1e5a      	subs	r2, r3, #1
   14978:	f64a 3310 	movw	r3, #43792	; 0xab10
   1497c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14980:	88b9      	ldrh	r1, [r7, #4]
   14982:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

    if (state >= PPM_NB_PULSES) {
   14986:	f64a 334e 	movw	r3, #43854	; 0xab4e
   1498a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1498e:	781b      	ldrb	r3, [r3, #0]
   14990:	2b08      	cmp	r3, #8
   14992:	d917      	bls.n	149c4 <__vector_34+0x108>
      ppm_valid	= 1;
   14994:	f64a 334b 	movw	r3, #43851	; 0xab4b
   14998:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1499c:	2201      	movs	r2, #1
   1499e:	701a      	strb	r2, [r3, #0]
      RestartPpmCycle();
   149a0:	f64a 334e 	movw	r3, #43854	; 0xab4e
   149a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   149a8:	2200      	movs	r2, #0
   149aa:	701a      	strb	r2, [r3, #0]
   149ac:	f242 0324 	movw	r3, #8228	; 0x2024
   149b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   149b4:	781b      	ldrb	r3, [r3, #0]
   149b6:	b2da      	uxtb	r2, r3
   149b8:	f64a 334f 	movw	r3, #43855	; 0xab4f
   149bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   149c0:	701a      	strb	r2, [r3, #0]
   149c2:	e00c      	b.n	149de <__vector_34+0x122>
    } else 
      state++;
   149c4:	f64a 334e 	movw	r3, #43854	; 0xab4e
   149c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   149cc:	781b      	ldrb	r3, [r3, #0]
   149ce:	3301      	adds	r3, #1
   149d0:	b2da      	uxtb	r2, r3
   149d2:	f64a 334e 	movw	r3, #43854	; 0xab4e
   149d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   149da:	701a      	strb	r2, [r3, #0]
  }
  return;
   149dc:	bf00      	nop
}
   149de:	370c      	adds	r7, #12
   149e0:	46bd      	mov	sp, r7
   149e2:	f85d 7b04 	ldr.w	r7, [sp], #4
   149e6:	4770      	bx	lr

000149e8 <last_radio_from_ppm>:

/* Copy from the ppm receiving buffer to the buffer sent to mcu0 */
void last_radio_from_ppm() {
   149e8:	b590      	push	{r4, r7, lr}
   149ea:	b083      	sub	sp, #12
   149ec:	af00      	add	r7, sp, #0
  LastRadioFromPpm()
   149ee:	f64a 3310 	movw	r3, #43792	; 0xab10
   149f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   149f6:	881b      	ldrh	r3, [r3, #0]
   149f8:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
   149fc:	b29b      	uxth	r3, r3
   149fe:	80fb      	strh	r3, [r7, #6]
   14a00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   14a04:	4618      	mov	r0, r3
   14a06:	f002 f957 	bl	16cb8 <__aeabi_i2f>
   14a0a:	4603      	mov	r3, r0
   14a0c:	4618      	mov	r0, r3
   14a0e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   14a12:	f002 f9a5 	bl	16d60 <__aeabi_fmul>
   14a16:	4603      	mov	r3, r0
   14a18:	4618      	mov	r0, r3
   14a1a:	f002 fb67 	bl	170ec <__aeabi_f2iz>
   14a1e:	4603      	mov	r3, r0
   14a20:	b29a      	uxth	r2, r3
   14a22:	f64a 3324 	movw	r3, #43812	; 0xab24
   14a26:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a2a:	801a      	strh	r2, [r3, #0]
   14a2c:	f64a 3324 	movw	r3, #43812	; 0xab24
   14a30:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a34:	881b      	ldrh	r3, [r3, #0]
   14a36:	b21b      	sxth	r3, r3
   14a38:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   14a3c:	dd07      	ble.n	14a4e <last_radio_from_ppm+0x66>
   14a3e:	f64a 3324 	movw	r3, #43812	; 0xab24
   14a42:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a46:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   14a4a:	801a      	strh	r2, [r3, #0]
   14a4c:	e00d      	b.n	14a6a <last_radio_from_ppm+0x82>
   14a4e:	f64a 3324 	movw	r3, #43812	; 0xab24
   14a52:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a56:	881b      	ldrh	r3, [r3, #0]
   14a58:	b21b      	sxth	r3, r3
   14a5a:	2b00      	cmp	r3, #0
   14a5c:	da05      	bge.n	14a6a <last_radio_from_ppm+0x82>
   14a5e:	f64a 3324 	movw	r3, #43812	; 0xab24
   14a62:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a66:	2200      	movs	r2, #0
   14a68:	801a      	strh	r2, [r3, #0]
   14a6a:	f64a 3310 	movw	r3, #43792	; 0xab10
   14a6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a72:	885b      	ldrh	r3, [r3, #2]
   14a74:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   14a78:	b29b      	uxth	r3, r3
   14a7a:	80fb      	strh	r3, [r7, #6]
   14a7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   14a80:	4618      	mov	r0, r3
   14a82:	f002 f919 	bl	16cb8 <__aeabi_i2f>
   14a86:	4603      	mov	r3, r0
   14a88:	4618      	mov	r0, r3
   14a8a:	f002 fb2f 	bl	170ec <__aeabi_f2iz>
   14a8e:	4603      	mov	r3, r0
   14a90:	b29a      	uxth	r2, r3
   14a92:	f64a 3324 	movw	r3, #43812	; 0xab24
   14a96:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a9a:	805a      	strh	r2, [r3, #2]
   14a9c:	f64a 3324 	movw	r3, #43812	; 0xab24
   14aa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14aa4:	885b      	ldrh	r3, [r3, #2]
   14aa6:	b21b      	sxth	r3, r3
   14aa8:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   14aac:	dd07      	ble.n	14abe <last_radio_from_ppm+0xd6>
   14aae:	f64a 3324 	movw	r3, #43812	; 0xab24
   14ab2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ab6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   14aba:	805a      	strh	r2, [r3, #2]
   14abc:	e00f      	b.n	14ade <last_radio_from_ppm+0xf6>
   14abe:	f64a 3324 	movw	r3, #43812	; 0xab24
   14ac2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ac6:	885b      	ldrh	r3, [r3, #2]
   14ac8:	b21b      	sxth	r3, r3
   14aca:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   14ace:	da06      	bge.n	14ade <last_radio_from_ppm+0xf6>
   14ad0:	f64a 3324 	movw	r3, #43812	; 0xab24
   14ad4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ad8:	f64d 2280 	movw	r2, #55936	; 0xda80
   14adc:	805a      	strh	r2, [r3, #2]
   14ade:	f64a 3310 	movw	r3, #43792	; 0xab10
   14ae2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ae6:	889b      	ldrh	r3, [r3, #4]
   14ae8:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   14aec:	b29b      	uxth	r3, r3
   14aee:	80fb      	strh	r3, [r7, #6]
   14af0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   14af4:	4618      	mov	r0, r3
   14af6:	f002 f8df 	bl	16cb8 <__aeabi_i2f>
   14afa:	4603      	mov	r3, r0
   14afc:	4618      	mov	r0, r3
   14afe:	f002 faf5 	bl	170ec <__aeabi_f2iz>
   14b02:	4603      	mov	r3, r0
   14b04:	b29a      	uxth	r2, r3
   14b06:	f64a 3324 	movw	r3, #43812	; 0xab24
   14b0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b0e:	809a      	strh	r2, [r3, #4]
   14b10:	f64a 3324 	movw	r3, #43812	; 0xab24
   14b14:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b18:	889b      	ldrh	r3, [r3, #4]
   14b1a:	b21b      	sxth	r3, r3
   14b1c:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   14b20:	dd07      	ble.n	14b32 <last_radio_from_ppm+0x14a>
   14b22:	f64a 3324 	movw	r3, #43812	; 0xab24
   14b26:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b2a:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   14b2e:	809a      	strh	r2, [r3, #4]
   14b30:	e00f      	b.n	14b52 <last_radio_from_ppm+0x16a>
   14b32:	f64a 3324 	movw	r3, #43812	; 0xab24
   14b36:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b3a:	889b      	ldrh	r3, [r3, #4]
   14b3c:	b21b      	sxth	r3, r3
   14b3e:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   14b42:	da06      	bge.n	14b52 <last_radio_from_ppm+0x16a>
   14b44:	f64a 3324 	movw	r3, #43812	; 0xab24
   14b48:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b4c:	f64d 2280 	movw	r2, #55936	; 0xda80
   14b50:	809a      	strh	r2, [r3, #4]
   14b52:	f64a 3310 	movw	r3, #43792	; 0xab10
   14b56:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b5a:	88db      	ldrh	r3, [r3, #6]
   14b5c:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   14b60:	b29b      	uxth	r3, r3
   14b62:	80fb      	strh	r3, [r7, #6]
   14b64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   14b68:	4618      	mov	r0, r3
   14b6a:	f002 f8a5 	bl	16cb8 <__aeabi_i2f>
   14b6e:	4603      	mov	r3, r0
   14b70:	4618      	mov	r0, r3
   14b72:	f002 fabb 	bl	170ec <__aeabi_f2iz>
   14b76:	4603      	mov	r3, r0
   14b78:	b29a      	uxth	r2, r3
   14b7a:	f64a 3324 	movw	r3, #43812	; 0xab24
   14b7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b82:	80da      	strh	r2, [r3, #6]
   14b84:	f64a 3324 	movw	r3, #43812	; 0xab24
   14b88:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b8c:	88db      	ldrh	r3, [r3, #6]
   14b8e:	b21b      	sxth	r3, r3
   14b90:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   14b94:	dd07      	ble.n	14ba6 <last_radio_from_ppm+0x1be>
   14b96:	f64a 3324 	movw	r3, #43812	; 0xab24
   14b9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b9e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   14ba2:	80da      	strh	r2, [r3, #6]
   14ba4:	e00f      	b.n	14bc6 <last_radio_from_ppm+0x1de>
   14ba6:	f64a 3324 	movw	r3, #43812	; 0xab24
   14baa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14bae:	88db      	ldrh	r3, [r3, #6]
   14bb0:	b21b      	sxth	r3, r3
   14bb2:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   14bb6:	da06      	bge.n	14bc6 <last_radio_from_ppm+0x1de>
   14bb8:	f64a 3324 	movw	r3, #43812	; 0xab24
   14bbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14bc0:	f64d 2280 	movw	r2, #55936	; 0xda80
   14bc4:	80da      	strh	r2, [r3, #6]
   14bc6:	f64a 3310 	movw	r3, #43792	; 0xab10
   14bca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14bce:	891b      	ldrh	r3, [r3, #8]
   14bd0:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   14bd4:	b29b      	uxth	r3, r3
   14bd6:	80fb      	strh	r3, [r7, #6]
   14bd8:	f64a 3338 	movw	r3, #43832	; 0xab38
   14bdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14be0:	891b      	ldrh	r3, [r3, #8]
   14be2:	b21b      	sxth	r3, r3
   14be4:	4618      	mov	r0, r3
   14be6:	f002 f867 	bl	16cb8 <__aeabi_i2f>
   14bea:	4604      	mov	r4, r0
   14bec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   14bf0:	4618      	mov	r0, r3
   14bf2:	f002 f861 	bl	16cb8 <__aeabi_i2f>
   14bf6:	4603      	mov	r3, r0
   14bf8:	4618      	mov	r0, r3
   14bfa:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   14bfe:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   14c02:	f002 f8ad 	bl	16d60 <__aeabi_fmul>
   14c06:	4603      	mov	r3, r0
   14c08:	4620      	mov	r0, r4
   14c0a:	4619      	mov	r1, r3
   14c0c:	f001 ffa0 	bl	16b50 <__addsf3>
   14c10:	4603      	mov	r3, r0
   14c12:	4618      	mov	r0, r3
   14c14:	f002 fa6a 	bl	170ec <__aeabi_f2iz>
   14c18:	4603      	mov	r3, r0
   14c1a:	b29a      	uxth	r2, r3
   14c1c:	f64a 3338 	movw	r3, #43832	; 0xab38
   14c20:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c24:	811a      	strh	r2, [r3, #8]
   14c26:	f64a 3310 	movw	r3, #43792	; 0xab10
   14c2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c2e:	895b      	ldrh	r3, [r3, #10]
   14c30:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   14c34:	b29b      	uxth	r3, r3
   14c36:	80fb      	strh	r3, [r7, #6]
   14c38:	f64a 3338 	movw	r3, #43832	; 0xab38
   14c3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c40:	895b      	ldrh	r3, [r3, #10]
   14c42:	b21b      	sxth	r3, r3
   14c44:	4618      	mov	r0, r3
   14c46:	f002 f837 	bl	16cb8 <__aeabi_i2f>
   14c4a:	4604      	mov	r4, r0
   14c4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   14c50:	4618      	mov	r0, r3
   14c52:	f002 f831 	bl	16cb8 <__aeabi_i2f>
   14c56:	4603      	mov	r3, r0
   14c58:	4618      	mov	r0, r3
   14c5a:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   14c5e:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   14c62:	f002 f87d 	bl	16d60 <__aeabi_fmul>
   14c66:	4603      	mov	r3, r0
   14c68:	4620      	mov	r0, r4
   14c6a:	4619      	mov	r1, r3
   14c6c:	f001 ff70 	bl	16b50 <__addsf3>
   14c70:	4603      	mov	r3, r0
   14c72:	4618      	mov	r0, r3
   14c74:	f002 fa3a 	bl	170ec <__aeabi_f2iz>
   14c78:	4603      	mov	r3, r0
   14c7a:	b29a      	uxth	r2, r3
   14c7c:	f64a 3338 	movw	r3, #43832	; 0xab38
   14c80:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c84:	815a      	strh	r2, [r3, #10]
   14c86:	f64a 3310 	movw	r3, #43792	; 0xab10
   14c8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c8e:	899b      	ldrh	r3, [r3, #12]
   14c90:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   14c94:	b29b      	uxth	r3, r3
   14c96:	80fb      	strh	r3, [r7, #6]
   14c98:	f64a 3338 	movw	r3, #43832	; 0xab38
   14c9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ca0:	899b      	ldrh	r3, [r3, #12]
   14ca2:	b21b      	sxth	r3, r3
   14ca4:	4618      	mov	r0, r3
   14ca6:	f002 f807 	bl	16cb8 <__aeabi_i2f>
   14caa:	4604      	mov	r4, r0
   14cac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   14cb0:	4618      	mov	r0, r3
   14cb2:	f002 f801 	bl	16cb8 <__aeabi_i2f>
   14cb6:	4603      	mov	r3, r0
   14cb8:	4618      	mov	r0, r3
   14cba:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   14cbe:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   14cc2:	f002 f84d 	bl	16d60 <__aeabi_fmul>
   14cc6:	4603      	mov	r3, r0
   14cc8:	4620      	mov	r0, r4
   14cca:	4619      	mov	r1, r3
   14ccc:	f001 ff40 	bl	16b50 <__addsf3>
   14cd0:	4603      	mov	r3, r0
   14cd2:	4618      	mov	r0, r3
   14cd4:	f002 fa0a 	bl	170ec <__aeabi_f2iz>
   14cd8:	4603      	mov	r3, r0
   14cda:	b29a      	uxth	r2, r3
   14cdc:	f64a 3338 	movw	r3, #43832	; 0xab38
   14ce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ce4:	819a      	strh	r2, [r3, #12]
   14ce6:	f64a 3310 	movw	r3, #43792	; 0xab10
   14cea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14cee:	89db      	ldrh	r3, [r3, #14]
   14cf0:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   14cf4:	b29b      	uxth	r3, r3
   14cf6:	80fb      	strh	r3, [r7, #6]
   14cf8:	f64a 3338 	movw	r3, #43832	; 0xab38
   14cfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d00:	89db      	ldrh	r3, [r3, #14]
   14d02:	b21b      	sxth	r3, r3
   14d04:	4618      	mov	r0, r3
   14d06:	f001 ffd7 	bl	16cb8 <__aeabi_i2f>
   14d0a:	4604      	mov	r4, r0
   14d0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   14d10:	4618      	mov	r0, r3
   14d12:	f001 ffd1 	bl	16cb8 <__aeabi_i2f>
   14d16:	4603      	mov	r3, r0
   14d18:	4618      	mov	r0, r3
   14d1a:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   14d1e:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   14d22:	f002 f81d 	bl	16d60 <__aeabi_fmul>
   14d26:	4603      	mov	r3, r0
   14d28:	4620      	mov	r0, r4
   14d2a:	4619      	mov	r1, r3
   14d2c:	f001 ff10 	bl	16b50 <__addsf3>
   14d30:	4603      	mov	r3, r0
   14d32:	4618      	mov	r0, r3
   14d34:	f002 f9da 	bl	170ec <__aeabi_f2iz>
   14d38:	4603      	mov	r3, r0
   14d3a:	b29a      	uxth	r2, r3
   14d3c:	f64a 3338 	movw	r3, #43832	; 0xab38
   14d40:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d44:	81da      	strh	r2, [r3, #14]
   14d46:	f64a 3310 	movw	r3, #43792	; 0xab10
   14d4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d4e:	8a1b      	ldrh	r3, [r3, #16]
   14d50:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   14d54:	b29b      	uxth	r3, r3
   14d56:	80fb      	strh	r3, [r7, #6]
   14d58:	f64a 3338 	movw	r3, #43832	; 0xab38
   14d5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d60:	8a1b      	ldrh	r3, [r3, #16]
   14d62:	b21b      	sxth	r3, r3
   14d64:	4618      	mov	r0, r3
   14d66:	f001 ffa7 	bl	16cb8 <__aeabi_i2f>
   14d6a:	4604      	mov	r4, r0
   14d6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   14d70:	4618      	mov	r0, r3
   14d72:	f001 ffa1 	bl	16cb8 <__aeabi_i2f>
   14d76:	4603      	mov	r3, r0
   14d78:	4618      	mov	r0, r3
   14d7a:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   14d7e:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   14d82:	f001 ffed 	bl	16d60 <__aeabi_fmul>
   14d86:	4603      	mov	r3, r0
   14d88:	4620      	mov	r0, r4
   14d8a:	4619      	mov	r1, r3
   14d8c:	f001 fee0 	bl	16b50 <__addsf3>
   14d90:	4603      	mov	r3, r0
   14d92:	4618      	mov	r0, r3
   14d94:	f002 f9aa 	bl	170ec <__aeabi_f2iz>
   14d98:	4603      	mov	r3, r0
   14d9a:	b29a      	uxth	r2, r3
   14d9c:	f64a 3338 	movw	r3, #43832	; 0xab38
   14da0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14da4:	821a      	strh	r2, [r3, #16]
   14da6:	f64a 3350 	movw	r3, #43856	; 0xab50
   14daa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14dae:	781b      	ldrb	r3, [r3, #0]
   14db0:	3301      	adds	r3, #1
   14db2:	b2da      	uxtb	r2, r3
   14db4:	f64a 3350 	movw	r3, #43856	; 0xab50
   14db8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14dbc:	701a      	strb	r2, [r3, #0]
   14dbe:	f64a 3350 	movw	r3, #43856	; 0xab50
   14dc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14dc6:	781b      	ldrb	r3, [r3, #0]
   14dc8:	2b0a      	cmp	r3, #10
   14dca:	f040 8101 	bne.w	14fd0 <last_radio_from_ppm+0x5e8>
   14dce:	f64a 3350 	movw	r3, #43856	; 0xab50
   14dd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14dd6:	2200      	movs	r2, #0
   14dd8:	701a      	strb	r2, [r3, #0]
   14dda:	f64a 3338 	movw	r3, #43832	; 0xab38
   14dde:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14de2:	891a      	ldrh	r2, [r3, #8]
   14de4:	f64a 3324 	movw	r3, #43812	; 0xab24
   14de8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14dec:	811a      	strh	r2, [r3, #8]
   14dee:	f64a 3338 	movw	r3, #43832	; 0xab38
   14df2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14df6:	2200      	movs	r2, #0
   14df8:	811a      	strh	r2, [r3, #8]
   14dfa:	f64a 3324 	movw	r3, #43812	; 0xab24
   14dfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e02:	891b      	ldrh	r3, [r3, #8]
   14e04:	b21b      	sxth	r3, r3
   14e06:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   14e0a:	dd07      	ble.n	14e1c <last_radio_from_ppm+0x434>
   14e0c:	f64a 3324 	movw	r3, #43812	; 0xab24
   14e10:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e14:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   14e18:	811a      	strh	r2, [r3, #8]
   14e1a:	e00f      	b.n	14e3c <last_radio_from_ppm+0x454>
   14e1c:	f64a 3324 	movw	r3, #43812	; 0xab24
   14e20:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e24:	891b      	ldrh	r3, [r3, #8]
   14e26:	b21b      	sxth	r3, r3
   14e28:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   14e2c:	da06      	bge.n	14e3c <last_radio_from_ppm+0x454>
   14e2e:	f64a 3324 	movw	r3, #43812	; 0xab24
   14e32:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e36:	f64d 2280 	movw	r2, #55936	; 0xda80
   14e3a:	811a      	strh	r2, [r3, #8]
   14e3c:	f64a 3338 	movw	r3, #43832	; 0xab38
   14e40:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e44:	895a      	ldrh	r2, [r3, #10]
   14e46:	f64a 3324 	movw	r3, #43812	; 0xab24
   14e4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e4e:	815a      	strh	r2, [r3, #10]
   14e50:	f64a 3338 	movw	r3, #43832	; 0xab38
   14e54:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e58:	2200      	movs	r2, #0
   14e5a:	815a      	strh	r2, [r3, #10]
   14e5c:	f64a 3324 	movw	r3, #43812	; 0xab24
   14e60:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e64:	895b      	ldrh	r3, [r3, #10]
   14e66:	b21b      	sxth	r3, r3
   14e68:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   14e6c:	dd07      	ble.n	14e7e <last_radio_from_ppm+0x496>
   14e6e:	f64a 3324 	movw	r3, #43812	; 0xab24
   14e72:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e76:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   14e7a:	815a      	strh	r2, [r3, #10]
   14e7c:	e00f      	b.n	14e9e <last_radio_from_ppm+0x4b6>
   14e7e:	f64a 3324 	movw	r3, #43812	; 0xab24
   14e82:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e86:	895b      	ldrh	r3, [r3, #10]
   14e88:	b21b      	sxth	r3, r3
   14e8a:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   14e8e:	da06      	bge.n	14e9e <last_radio_from_ppm+0x4b6>
   14e90:	f64a 3324 	movw	r3, #43812	; 0xab24
   14e94:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e98:	f64d 2280 	movw	r2, #55936	; 0xda80
   14e9c:	815a      	strh	r2, [r3, #10]
   14e9e:	f64a 3338 	movw	r3, #43832	; 0xab38
   14ea2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ea6:	899a      	ldrh	r2, [r3, #12]
   14ea8:	f64a 3324 	movw	r3, #43812	; 0xab24
   14eac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14eb0:	819a      	strh	r2, [r3, #12]
   14eb2:	f64a 3338 	movw	r3, #43832	; 0xab38
   14eb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14eba:	2200      	movs	r2, #0
   14ebc:	819a      	strh	r2, [r3, #12]
   14ebe:	f64a 3324 	movw	r3, #43812	; 0xab24
   14ec2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ec6:	899b      	ldrh	r3, [r3, #12]
   14ec8:	b21b      	sxth	r3, r3
   14eca:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   14ece:	dd07      	ble.n	14ee0 <last_radio_from_ppm+0x4f8>
   14ed0:	f64a 3324 	movw	r3, #43812	; 0xab24
   14ed4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ed8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   14edc:	819a      	strh	r2, [r3, #12]
   14ede:	e00f      	b.n	14f00 <last_radio_from_ppm+0x518>
   14ee0:	f64a 3324 	movw	r3, #43812	; 0xab24
   14ee4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ee8:	899b      	ldrh	r3, [r3, #12]
   14eea:	b21b      	sxth	r3, r3
   14eec:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   14ef0:	da06      	bge.n	14f00 <last_radio_from_ppm+0x518>
   14ef2:	f64a 3324 	movw	r3, #43812	; 0xab24
   14ef6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14efa:	f64d 2280 	movw	r2, #55936	; 0xda80
   14efe:	819a      	strh	r2, [r3, #12]
   14f00:	f64a 3338 	movw	r3, #43832	; 0xab38
   14f04:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f08:	89da      	ldrh	r2, [r3, #14]
   14f0a:	f64a 3324 	movw	r3, #43812	; 0xab24
   14f0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f12:	81da      	strh	r2, [r3, #14]
   14f14:	f64a 3338 	movw	r3, #43832	; 0xab38
   14f18:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f1c:	2200      	movs	r2, #0
   14f1e:	81da      	strh	r2, [r3, #14]
   14f20:	f64a 3324 	movw	r3, #43812	; 0xab24
   14f24:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f28:	89db      	ldrh	r3, [r3, #14]
   14f2a:	b21b      	sxth	r3, r3
   14f2c:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   14f30:	dd07      	ble.n	14f42 <last_radio_from_ppm+0x55a>
   14f32:	f64a 3324 	movw	r3, #43812	; 0xab24
   14f36:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f3a:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   14f3e:	81da      	strh	r2, [r3, #14]
   14f40:	e00f      	b.n	14f62 <last_radio_from_ppm+0x57a>
   14f42:	f64a 3324 	movw	r3, #43812	; 0xab24
   14f46:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f4a:	89db      	ldrh	r3, [r3, #14]
   14f4c:	b21b      	sxth	r3, r3
   14f4e:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   14f52:	da06      	bge.n	14f62 <last_radio_from_ppm+0x57a>
   14f54:	f64a 3324 	movw	r3, #43812	; 0xab24
   14f58:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f5c:	f64d 2280 	movw	r2, #55936	; 0xda80
   14f60:	81da      	strh	r2, [r3, #14]
   14f62:	f64a 3338 	movw	r3, #43832	; 0xab38
   14f66:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f6a:	8a1a      	ldrh	r2, [r3, #16]
   14f6c:	f64a 3324 	movw	r3, #43812	; 0xab24
   14f70:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f74:	821a      	strh	r2, [r3, #16]
   14f76:	f64a 3338 	movw	r3, #43832	; 0xab38
   14f7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f7e:	2200      	movs	r2, #0
   14f80:	821a      	strh	r2, [r3, #16]
   14f82:	f64a 3324 	movw	r3, #43812	; 0xab24
   14f86:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f8a:	8a1b      	ldrh	r3, [r3, #16]
   14f8c:	b21b      	sxth	r3, r3
   14f8e:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   14f92:	dd07      	ble.n	14fa4 <last_radio_from_ppm+0x5bc>
   14f94:	f64a 3324 	movw	r3, #43812	; 0xab24
   14f98:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f9c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   14fa0:	821a      	strh	r2, [r3, #16]
   14fa2:	e00f      	b.n	14fc4 <last_radio_from_ppm+0x5dc>
   14fa4:	f64a 3324 	movw	r3, #43812	; 0xab24
   14fa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14fac:	8a1b      	ldrh	r3, [r3, #16]
   14fae:	b21b      	sxth	r3, r3
   14fb0:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   14fb4:	da06      	bge.n	14fc4 <last_radio_from_ppm+0x5dc>
   14fb6:	f64a 3324 	movw	r3, #43812	; 0xab24
   14fba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14fbe:	f64d 2280 	movw	r2, #55936	; 0xda80
   14fc2:	821a      	strh	r2, [r3, #16]
   14fc4:	f64a 334a 	movw	r3, #43850	; 0xab4a
   14fc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14fcc:	2201      	movs	r2, #1
   14fce:	701a      	strb	r2, [r3, #0]
}
   14fd0:	370c      	adds	r7, #12
   14fd2:	46bd      	mov	sp, r7
   14fd4:	bd90      	pop	{r4, r7, pc}
   14fd6:	bf00      	nop

00014fd8 <spi_reset>:
volatile bool_t spi_was_interrupted = FALSE;

static volatile uint8_t idx_buf = 0;
static volatile uint8_t xor_in, xor_out;

void spi_reset(void) {
   14fd8:	b480      	push	{r7}
   14fda:	af00      	add	r7, sp, #0
  idx_buf = 0;
   14fdc:	f64a 3384 	movw	r3, #43908	; 0xab84
   14fe0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14fe4:	2200      	movs	r2, #0
   14fe6:	701a      	strb	r2, [r3, #0]
  xor_in = 0;
   14fe8:	f64a 3385 	movw	r3, #43909	; 0xab85
   14fec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ff0:	2200      	movs	r2, #0
   14ff2:	701a      	strb	r2, [r3, #0]
  xor_out = ((uint8_t*)&to_mega128)[idx_buf];
   14ff4:	f64a 3384 	movw	r3, #43908	; 0xab84
   14ff8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ffc:	781b      	ldrb	r3, [r3, #0]
   14ffe:	b2db      	uxtb	r3, r3
   15000:	461a      	mov	r2, r3
   15002:	f64a 336c 	movw	r3, #43884	; 0xab6c
   15006:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1500a:	4413      	add	r3, r2
   1500c:	781a      	ldrb	r2, [r3, #0]
   1500e:	f64a 3386 	movw	r3, #43910	; 0xab86
   15012:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15016:	701a      	strb	r2, [r3, #0]
  SPDR = xor_out;
   15018:	f242 030f 	movw	r3, #8207	; 0x200f
   1501c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15020:	f64a 3286 	movw	r2, #43910	; 0xab86
   15024:	f2c2 0200 	movt	r2, #8192	; 0x2000
   15028:	7812      	ldrb	r2, [r2, #0]
   1502a:	b2d2      	uxtb	r2, r2
   1502c:	701a      	strb	r2, [r3, #0]
  mega128_receive_valid = FALSE;
   1502e:	f64a 3382 	movw	r3, #43906	; 0xab82
   15032:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15036:	2200      	movs	r2, #0
   15038:	701a      	strb	r2, [r3, #0]
}
   1503a:	46bd      	mov	sp, r7
   1503c:	f85d 7b04 	ldr.w	r7, [sp], #4
   15040:	4770      	bx	lr
   15042:	bf00      	nop

00015044 <fbw_spi_init>:

void fbw_spi_init(void) {
   15044:	b480      	push	{r7}
   15046:	af00      	add	r7, sp, #0
  to_mega128.status = 0;
   15048:	f64a 336c 	movw	r3, #43884	; 0xab6c
   1504c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15050:	2200      	movs	r2, #0
   15052:	74da      	strb	r2, [r3, #19]
  to_mega128.nb_err = 0;
   15054:	f64a 336c 	movw	r3, #43884	; 0xab6c
   15058:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1505c:	2200      	movs	r2, #0
   1505e:	751a      	strb	r2, [r3, #20]

  /* set it pin output */
  //  IT_DDR |= _BV(IT_PIN);

  /* set MISO pin output */
  SPI_DDR |= _BV(SPI_MISO_PIN);
   15060:	f242 0317 	movw	r3, #8215	; 0x2017
   15064:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15068:	f242 0217 	movw	r2, #8215	; 0x2017
   1506c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   15070:	7812      	ldrb	r2, [r2, #0]
   15072:	b2d2      	uxtb	r2, r2
   15074:	f042 0210 	orr.w	r2, r2, #16
   15078:	b2d2      	uxtb	r2, r2
   1507a:	701a      	strb	r2, [r3, #0]
  /* enable SPI, slave, MSB first, sck idle low */
  SPCR = _BV(SPE);
   1507c:	f242 030d 	movw	r3, #8205	; 0x200d
   15080:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15084:	2240      	movs	r2, #64	; 0x40
   15086:	701a      	strb	r2, [r3, #0]
  /* enable interrupt */
  SPCR |= _BV(SPIE);
   15088:	f242 030d 	movw	r3, #8205	; 0x200d
   1508c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15090:	f242 020d 	movw	r2, #8205	; 0x200d
   15094:	f2c2 0200 	movt	r2, #8192	; 0x2000
   15098:	7812      	ldrb	r2, [r2, #0]
   1509a:	b2d2      	uxtb	r2, r2
   1509c:	f062 027f 	orn	r2, r2, #127	; 0x7f
   150a0:	b2d2      	uxtb	r2, r2
   150a2:	701a      	strb	r2, [r3, #0]
}
   150a4:	46bd      	mov	sp, r7
   150a6:	f85d 7b04 	ldr.w	r7, [sp], #4
   150aa:	4770      	bx	lr
   150ac:	0000      	movs	r0, r0
	...

000150b0 <timer_init>:
 * running at Clk/1024.  For 16 Mhz clock, this will be every
 * 16384 microseconds, or 61 Hz.
 */
static inline void
timer_init( void )
{
   150b0:	b480      	push	{r7}
   150b2:	af00      	add	r7, sp, #0
  /* Timer1 @ Clk/1: System clock, ppm and servos pulses */
  TCCR1A		= 0x00;
   150b4:	f242 032f 	movw	r3, #8239	; 0x202f
   150b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150bc:	2200      	movs	r2, #0
   150be:	701a      	strb	r2, [r3, #0]
  TCCR1B		= 0x01;
   150c0:	f242 032e 	movw	r3, #8238	; 0x202e
   150c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150c8:	2201      	movs	r2, #1
   150ca:	701a      	strb	r2, [r3, #0]
  
  /* Timer2 @ Clk/1024: Periodic clock            */
  TCCR2		= 0x07;
   150cc:	f242 0325 	movw	r3, #8229	; 0x2025
   150d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150d4:	2207      	movs	r2, #7
   150d6:	701a      	strb	r2, [r3, #0]
}
   150d8:	46bd      	mov	sp, r7
   150da:	f85d 7b04 	ldr.w	r7, [sp], #4
   150de:	4770      	bx	lr

000150e0 <ppm_init>:
 *
 * JR might be rising edge clocked; set that as an option
 */
static inline void
ppm_init( void )
{
   150e0:	b480      	push	{r7}
   150e2:	af00      	add	r7, sp, #0
#if   PPM_RX_TYPE == RXFUTABA
  cbi( TCCR1B, ICES1 );
   150e4:	f242 032e 	movw	r3, #8238	; 0x202e
   150e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150ec:	f242 022e 	movw	r2, #8238	; 0x202e
   150f0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   150f4:	7812      	ldrb	r2, [r2, #0]
   150f6:	b2d2      	uxtb	r2, r2
   150f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   150fc:	b2d2      	uxtb	r2, r2
   150fe:	701a      	strb	r2, [r3, #0]
#else
#	error "ppm.h: Unknown receiver type in PPM_RX_TYPE"
#endif

  /* No noise cancelation */
  sbi( TCCR1B, ICNC1 );
   15100:	f242 032e 	movw	r3, #8238	; 0x202e
   15104:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15108:	f242 022e 	movw	r2, #8238	; 0x202e
   1510c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   15110:	7812      	ldrb	r2, [r2, #0]
   15112:	b2d2      	uxtb	r2, r2
   15114:	f062 027f 	orn	r2, r2, #127	; 0x7f
   15118:	b2d2      	uxtb	r2, r2
   1511a:	701a      	strb	r2, [r3, #0]
  
  /* Set ICP to input, no internal pull up */
  cbi( PPM_DDR, PPM_PIN);
   1511c:	f242 0317 	movw	r3, #8215	; 0x2017
   15120:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15124:	f242 0217 	movw	r2, #8215	; 0x2017
   15128:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1512c:	7812      	ldrb	r2, [r2, #0]
   1512e:	b2d2      	uxtb	r2, r2
   15130:	f022 0201 	bic.w	r2, r2, #1
   15134:	b2d2      	uxtb	r2, r2
   15136:	701a      	strb	r2, [r3, #0]
  
  /* Enable interrupt on input capture */
  sbi( TIMSK, TICIE1 );
   15138:	f242 0337 	movw	r3, #8247	; 0x2037
   1513c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15140:	f242 0237 	movw	r2, #8247	; 0x2037
   15144:	f2c2 0200 	movt	r2, #8192	; 0x2000
   15148:	7812      	ldrb	r2, [r2, #0]
   1514a:	b2d2      	uxtb	r2, r2
   1514c:	f042 0220 	orr.w	r2, r2, #32
   15150:	b2d2      	uxtb	r2, r2
   15152:	701a      	strb	r2, [r3, #0]
}
   15154:	46bd      	mov	sp, r7
   15156:	f85d 7b04 	ldr.w	r7, [sp], #4
   1515a:	4770      	bx	lr

0001515c <to_autopilot_from_last_radio>:
/*   uart_transmit('\n'); */
/* } */


/* Prepare data to be sent to mcu0 */
void to_autopilot_from_last_radio (void) {
   1515c:	b580      	push	{r7, lr}
   1515e:	b082      	sub	sp, #8
   15160:	af00      	add	r7, sp, #0
  uint8_t i;
  for(i = 0; i < RADIO_CTL_NB; i++)
   15162:	2300      	movs	r3, #0
   15164:	71fb      	strb	r3, [r7, #7]
   15166:	e010      	b.n	1518a <to_autopilot_from_last_radio+0x2e>
     to_mega128.channels[i] = last_radio[i];
   15168:	79fa      	ldrb	r2, [r7, #7]
   1516a:	79f9      	ldrb	r1, [r7, #7]
   1516c:	f64a 3324 	movw	r3, #43812	; 0xab24
   15170:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15174:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
   15178:	f64a 336c 	movw	r3, #43884	; 0xab6c
   1517c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15180:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]


/* Prepare data to be sent to mcu0 */
void to_autopilot_from_last_radio (void) {
  uint8_t i;
  for(i = 0; i < RADIO_CTL_NB; i++)
   15184:	79fb      	ldrb	r3, [r7, #7]
   15186:	3301      	adds	r3, #1
   15188:	71fb      	strb	r3, [r7, #7]
   1518a:	79fb      	ldrb	r3, [r7, #7]
   1518c:	2b08      	cmp	r3, #8
   1518e:	d9eb      	bls.n	15168 <to_autopilot_from_last_radio+0xc>
     to_mega128.channels[i] = last_radio[i];
  to_mega128.status = (radio_ok ? _BV(STATUS_RADIO_OK) : 0);
   15190:	f64a 4314 	movw	r3, #44052	; 0xac14
   15194:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15198:	781b      	ldrb	r3, [r3, #0]
   1519a:	2b00      	cmp	r3, #0
   1519c:	bf0c      	ite	eq
   1519e:	2300      	moveq	r3, #0
   151a0:	2301      	movne	r3, #1
   151a2:	b2db      	uxtb	r3, r3
   151a4:	461a      	mov	r2, r3
   151a6:	f64a 336c 	movw	r3, #43884	; 0xab6c
   151aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151ae:	74da      	strb	r2, [r3, #19]
  to_mega128.status |= (radio_really_lost ? _BV(RADIO_REALLY_LOST) : 0);
   151b0:	f64a 336c 	movw	r3, #43884	; 0xab6c
   151b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151b8:	7cdb      	ldrb	r3, [r3, #19]
   151ba:	b2da      	uxtb	r2, r3
   151bc:	f64a 4316 	movw	r3, #44054	; 0xac16
   151c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151c4:	781b      	ldrb	r3, [r3, #0]
   151c6:	2b00      	cmp	r3, #0
   151c8:	d001      	beq.n	151ce <to_autopilot_from_last_radio+0x72>
   151ca:	2302      	movs	r3, #2
   151cc:	e000      	b.n	151d0 <to_autopilot_from_last_radio+0x74>
   151ce:	2300      	movs	r3, #0
   151d0:	4313      	orrs	r3, r2
   151d2:	b2db      	uxtb	r3, r3
   151d4:	b2da      	uxtb	r2, r3
   151d6:	f64a 336c 	movw	r3, #43884	; 0xab6c
   151da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151de:	74da      	strb	r2, [r3, #19]
  if (last_radio_contains_avg_channels) {
   151e0:	f64a 334a 	movw	r3, #43850	; 0xab4a
   151e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151e8:	781b      	ldrb	r3, [r3, #0]
   151ea:	2b00      	cmp	r3, #0
   151ec:	d012      	beq.n	15214 <to_autopilot_from_last_radio+0xb8>
    to_mega128.status |= _BV(AVERAGED_CHANNELS_SENT);
   151ee:	f64a 336c 	movw	r3, #43884	; 0xab6c
   151f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151f6:	7cdb      	ldrb	r3, [r3, #19]
   151f8:	f043 0304 	orr.w	r3, r3, #4
   151fc:	b2da      	uxtb	r2, r3
   151fe:	f64a 336c 	movw	r3, #43884	; 0xab6c
   15202:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15206:	74da      	strb	r2, [r3, #19]
    last_radio_contains_avg_channels = FALSE;
   15208:	f64a 334a 	movw	r3, #43850	; 0xab4a
   1520c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15210:	2200      	movs	r2, #0
   15212:	701a      	strb	r2, [r3, #0]
  }
  to_mega128.ppm_cpt = last_ppm_cpt;
   15214:	f64a 4318 	movw	r3, #44056	; 0xac18
   15218:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1521c:	781a      	ldrb	r2, [r3, #0]
   1521e:	f64a 336c 	movw	r3, #43884	; 0xab6c
   15222:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15226:	749a      	strb	r2, [r3, #18]
#ifndef CTL_BRD_V1_1
  to_mega128.vsupply = VoltageOfAdc(vsupply_adc_buf.sum/AV_NB_SAMPLE) * 10;
   15228:	f64a 3388 	movw	r3, #43912	; 0xab88
   1522c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15230:	881b      	ldrh	r3, [r3, #0]
   15232:	4618      	mov	r0, r3
   15234:	f001 f8ee 	bl	16414 <__aeabi_i2d>
   15238:	4602      	mov	r2, r0
   1523a:	460b      	mov	r3, r1
   1523c:	4610      	mov	r0, r2
   1523e:	4619      	mov	r1, r3
   15240:	a31b      	add	r3, pc, #108	; (adr r3, 152b0 <to_autopilot_from_last_radio+0x154>)
   15242:	e9d3 2300 	ldrd	r2, r3, [r3]
   15246:	f001 f94b 	bl	164e0 <__aeabi_dmul>
   1524a:	4602      	mov	r2, r0
   1524c:	460b      	mov	r3, r1
   1524e:	4610      	mov	r0, r2
   15250:	4619      	mov	r1, r3
   15252:	f04f 0200 	mov.w	r2, #0
   15256:	f04f 0300 	mov.w	r3, #0
   1525a:	f2c4 0340 	movt	r3, #16448	; 0x4040
   1525e:	f001 fa69 	bl	16734 <__aeabi_ddiv>
   15262:	4602      	mov	r2, r0
   15264:	460b      	mov	r3, r1
   15266:	4610      	mov	r0, r2
   15268:	4619      	mov	r1, r3
   1526a:	a313      	add	r3, pc, #76	; (adr r3, 152b8 <to_autopilot_from_last_radio+0x15c>)
   1526c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15270:	f000 ff84 	bl	1617c <__adddf3>
   15274:	4602      	mov	r2, r0
   15276:	460b      	mov	r3, r1
   15278:	4610      	mov	r0, r2
   1527a:	4619      	mov	r1, r3
   1527c:	f04f 0200 	mov.w	r2, #0
   15280:	f04f 0300 	mov.w	r3, #0
   15284:	f2c4 0324 	movt	r3, #16420	; 0x4024
   15288:	f001 f92a 	bl	164e0 <__aeabi_dmul>
   1528c:	4602      	mov	r2, r0
   1528e:	460b      	mov	r3, r1
   15290:	4610      	mov	r0, r2
   15292:	4619      	mov	r1, r3
   15294:	f001 fbe6 	bl	16a64 <__aeabi_d2uiz>
   15298:	4603      	mov	r3, r0
   1529a:	b2da      	uxtb	r2, r3
   1529c:	f64a 336c 	movw	r3, #43884	; 0xab6c
   152a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   152a4:	755a      	strb	r2, [r3, #21]
#else
  to_mega128.vsupply = 0;
#endif
}
   152a6:	3708      	adds	r7, #8
   152a8:	46bd      	mov	sp, r7
   152aa:	bd80      	pop	{r7, pc}
   152ac:	f3af 8000 	nop.w
   152b0:	1eb851ec 	.word	0x1eb851ec
   152b4:	3f91eb85 	.word	0x3f91eb85
   152b8:	020c49ba 	.word	0x020c49ba
   152bc:	3fb6872b 	.word	0x3fb6872b

000152c0 <send_data_to_autopilot_task>:

void send_data_to_autopilot_task(void)
{
   152c0:	b580      	push	{r7, lr}
   152c2:	af00      	add	r7, sp, #0
	//vPrintString("S_2 send_data_to_autopilot_task start! \n\r"); //SunnyBeike

    // modified by wanbo
//   if ( !SpiIsSelected() && spi_was_interrupted ) 
   {
      spi_was_interrupted = FALSE;
   152c4:	f64a 3383 	movw	r3, #43907	; 0xab83
   152c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   152cc:	2200      	movs	r2, #0
   152ce:	701a      	strb	r2, [r3, #0]
      to_autopilot_from_last_radio();
   152d0:	f7ff ff44 	bl	1515c <to_autopilot_from_last_radio>
      spi_reset();
   152d4:	f7ff fe80 	bl	14fd8 <spi_reset>
   }
	//vPrintString("S_2 send_data_to_autopilot_task end! \n\r"); //SunnyBeike

}
   152d8:	bd80      	pop	{r7, pc}
   152da:	bf00      	nop

000152dc <fbw_init>:
	static uint8_t _1Hz;
	static uint8_t _20Hz;
#endif
*/

void fbw_init(void) {
   152dc:	b580      	push	{r7, lr}
   152de:	af00      	add	r7, sp, #0
  uart_init_tx();
   152e0:	f000 fb02 	bl	158e8 <uart_init_tx>
  uart_print_string("FBW Booting $Id: main.c,v 1.3 2008/10/22 19:41:19 casse Exp $\n\r");
   152e4:	f247 30b8 	movw	r0, #29624	; 0x73b8
   152e8:	f2c0 0001 	movt	r0, #1
   152ec:	f000 fbda 	bl	15aa4 <uart_print_string>

#ifndef CTL_BRD_V1_1
  fbw_adc_init();
   152f0:	f7ff fab2 	bl	14858 <fbw_adc_init>
  fbw_adc_buf_channel(3, &vsupply_adc_buf);
   152f4:	2003      	movs	r0, #3
   152f6:	f64a 3188 	movw	r1, #43912	; 0xab88
   152fa:	f2c2 0100 	movt	r1, #8192	; 0x2000
   152fe:	f7ff fa97 	bl	14830 <fbw_adc_buf_channel>
  fbw_adc_buf_channel(6, &vservos_adc_buf);
   15302:	2006      	movs	r0, #6
   15304:	f64a 31cc 	movw	r1, #43980	; 0xabcc
   15308:	f2c2 0100 	movt	r1, #8192	; 0x2000
   1530c:	f7ff fa90 	bl	14830 <fbw_adc_buf_channel>
#endif
  timer_init();
   15310:	f7ff fece 	bl	150b0 <timer_init>
  servo_init();
   15314:	f000 f894 	bl	15440 <servo_init>
  ppm_init();
   15318:	f7ff fee2 	bl	150e0 <ppm_init>
  fbw_spi_init();
   1531c:	f7ff fe92 	bl	15044 <fbw_spi_init>
  //sei(); //FN
}
   15320:	bd80      	pop	{r7, pc}
   15322:	bf00      	nop

00015324 <test_ppm_task>:
  return 0;
}
#endif
*/
void test_ppm_task(void)
{
   15324:	b580      	push	{r7, lr}
   15326:	af00      	add	r7, sp, #0
	//vPrintString("S_1 test_ppm_task start! \n\r"); //SunnyBeike
    // modified by wanbo
    //if( ppm_valid ) 
    {
      ppm_valid = FALSE;
   15328:	f64a 334b 	movw	r3, #43851	; 0xab4b
   1532c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15330:	2200      	movs	r2, #0
   15332:	701a      	strb	r2, [r3, #0]
      ppm_cpt++;
   15334:	f64a 4317 	movw	r3, #44055	; 0xac17
   15338:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1533c:	781b      	ldrb	r3, [r3, #0]
   1533e:	3301      	adds	r3, #1
   15340:	b2da      	uxtb	r2, r3
   15342:	f64a 4317 	movw	r3, #44055	; 0xac17
   15346:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1534a:	701a      	strb	r2, [r3, #0]
      radio_ok = TRUE;
   1534c:	f64a 4314 	movw	r3, #44052	; 0xac14
   15350:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15354:	2201      	movs	r2, #1
   15356:	701a      	strb	r2, [r3, #0]
      radio_really_lost = FALSE;
   15358:	f64a 4316 	movw	r3, #44054	; 0xac16
   1535c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15360:	2200      	movs	r2, #0
   15362:	701a      	strb	r2, [r3, #0]
      time_since_last_ppm = 0;
   15364:	f64a 4312 	movw	r3, #44050	; 0xac12
   15368:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1536c:	2200      	movs	r2, #0
   1536e:	801a      	strh	r2, [r3, #0]
      last_radio_from_ppm();
   15370:	f7ff fb3a 	bl	149e8 <last_radio_from_ppm>
      //if (last_radio_contains_avg_channels) 
      {
	mode = MODE_OF_PPRZ(last_radio[RADIO_MODE]);
   15374:	f64a 3324 	movw	r3, #43812	; 0xab24
   15378:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1537c:	891b      	ldrh	r3, [r3, #8]
   1537e:	b21b      	sxth	r3, r3
   15380:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
   15384:	bfb4      	ite	lt
   15386:	2300      	movlt	r3, #0
   15388:	2301      	movge	r3, #1
   1538a:	b2db      	uxtb	r3, r3
   1538c:	461a      	mov	r2, r3
   1538e:	f64a 4310 	movw	r3, #44048	; 0xac10
   15392:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15396:	701a      	strb	r2, [r3, #0]
      }
      if (mode == MODE_MANUAL) 
   15398:	f64a 4310 	movw	r3, #44048	; 0xac10
   1539c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   153a0:	781b      	ldrb	r3, [r3, #0]
   153a2:	2b00      	cmp	r3, #0
   153a4:	d105      	bne.n	153b2 <test_ppm_task+0x8e>
      {
	servo_set(last_radio);
   153a6:	f64a 3024 	movw	r0, #43812	; 0xab24
   153aa:	f2c2 0000 	movt	r0, #8192	; 0x2000
   153ae:	f000 f925 	bl	155fc <servo_set>
      }
    } 
    //else if (mode == MODE_MANUAL && radio_really_lost) 
    {
      mode = MODE_AUTO;
   153b2:	f64a 4310 	movw	r3, #44048	; 0xac10
   153b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   153ba:	2201      	movs	r2, #1
   153bc:	701a      	strb	r2, [r3, #0]
    }
    //if (time_since_last_ppm >= STALLED_TIME) 
    {
      radio_ok = FALSE;
   153be:	f64a 4314 	movw	r3, #44052	; 0xac14
   153c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   153c6:	2200      	movs	r2, #0
   153c8:	701a      	strb	r2, [r3, #0]
    }
    //if (time_since_last_ppm >= REALLY_STALLED_TIME) 
    {
      radio_really_lost = TRUE;
   153ca:	f64a 4316 	movw	r3, #44054	; 0xac16
   153ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   153d2:	2201      	movs	r2, #1
   153d4:	701a      	strb	r2, [r3, #0]
    }
	//vPrintString("S_1 test_ppm_task end! \n\r"); //SunnyBeike

}
   153d6:	bd80      	pop	{r7, pc}

000153d8 <check_failsafe_task>:
void check_failsafe_task(void)
{
   153d8:	b580      	push	{r7, lr}
   153da:	af00      	add	r7, sp, #0
	//vPrintString("S_9 check_failsafe_task start! \n\r"); //SunnyBeike
    //modified by wanbo
    //if ((mode == MODE_MANUAL && !radio_ok) || (mode == MODE_AUTO && !mega128_ok)) 
    {
      servo_set(failsafe);
   153dc:	f247 30a4 	movw	r0, #29604	; 0x73a4
   153e0:	f2c0 0001 	movt	r0, #1
   153e4:	f000 f90a 	bl	155fc <servo_set>
    }
	//vPrintString("S_9 check_failsafe_task end! \n\r"); //SunnyBeike
}
   153e8:	bd80      	pop	{r7, pc}
   153ea:	bf00      	nop

000153ec <check_mega128_values_task>:
void check_mega128_values_task(void)
{
   153ec:	b580      	push	{r7, lr}
   153ee:	af00      	add	r7, sp, #0
	//vPrintString("S_8 check_mega128_values_task start! \n\r"); //SunnyBeike
// modified by wanbo
     //if ( !SpiIsSelected() && spi_was_interrupted ) 
     {
         if (mega128_receive_valid)
   153f0:	f64a 3382 	movw	r3, #43906	; 0xab82
   153f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   153f8:	781b      	ldrb	r3, [r3, #0]
   153fa:	b2db      	uxtb	r3, r3
   153fc:	2b00      	cmp	r3, #0
   153fe:	d018      	beq.n	15432 <check_mega128_values_task+0x46>
         { 
             time_since_last_mega128 = 0;
   15400:	f64a 4311 	movw	r3, #44049	; 0xac11
   15404:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15408:	2200      	movs	r2, #0
   1540a:	701a      	strb	r2, [r3, #0]
             mega128_ok = TRUE;
   1540c:	f64a 4315 	movw	r3, #44053	; 0xac15
   15410:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15414:	2201      	movs	r2, #1
   15416:	701a      	strb	r2, [r3, #0]
             if (mode == MODE_AUTO)
   15418:	f64a 4310 	movw	r3, #44048	; 0xac10
   1541c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15420:	781b      	ldrb	r3, [r3, #0]
   15422:	2b01      	cmp	r3, #1
   15424:	d105      	bne.n	15432 <check_mega128_values_task+0x46>
                 servo_set(from_mega128.channels);
   15426:	f64a 3054 	movw	r0, #43860	; 0xab54
   1542a:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1542e:	f000 f8e5 	bl	155fc <servo_set>
         }
     }
     //if (time_since_last_mega128 == STALLED_TIME) 
     {
         mega128_ok = FALSE;
   15432:	f64a 4315 	movw	r3, #44053	; 0xac15
   15436:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1543a:	2200      	movs	r2, #0
   1543c:	701a      	strb	r2, [r3, #0]
     }
	//vPrintString("S_8 check_mega128_values_task end! \n\r"); //SunnyBeike
}
   1543e:	bd80      	pop	{r7, pc}

00015440 <servo_init>:
 *
 * Ideally, you can use two decade counters to drive 20 servos.
 */
void
servo_init( void )
{
   15440:	b480      	push	{r7}
   15442:	b083      	sub	sp, #12
   15444:	af00      	add	r7, sp, #0
  uint8_t			i;

  /* Configure the reset and clock lines */
  _4017_RESET_DDR |= _BV(_4017_RESET_PIN);
   15446:	f242 0311 	movw	r3, #8209	; 0x2011
   1544a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1544e:	f242 0211 	movw	r2, #8209	; 0x2011
   15452:	f2c2 0200 	movt	r2, #8192	; 0x2000
   15456:	7812      	ldrb	r2, [r2, #0]
   15458:	b2d2      	uxtb	r2, r2
   1545a:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1545e:	b2d2      	uxtb	r2, r2
   15460:	701a      	strb	r2, [r3, #0]
  _4017_CLOCK_DDR |= _BV(_4017_CLOCK_PIN);
   15462:	f242 0317 	movw	r3, #8215	; 0x2017
   15466:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1546a:	f242 0217 	movw	r2, #8215	; 0x2017
   1546e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   15472:	7812      	ldrb	r2, [r2, #0]
   15474:	b2d2      	uxtb	r2, r2
   15476:	f042 0202 	orr.w	r2, r2, #2
   1547a:	b2d2      	uxtb	r2, r2
   1547c:	701a      	strb	r2, [r3, #0]

  /* Reset the decade counter */
  sbi( _4017_RESET_PORT, _4017_RESET_PIN );
   1547e:	f242 0312 	movw	r3, #8210	; 0x2012
   15482:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15486:	f242 0212 	movw	r2, #8210	; 0x2012
   1548a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1548e:	7812      	ldrb	r2, [r2, #0]
   15490:	b2d2      	uxtb	r2, r2
   15492:	f062 027f 	orn	r2, r2, #127	; 0x7f
   15496:	b2d2      	uxtb	r2, r2
   15498:	701a      	strb	r2, [r3, #0]

  /* Lower the regular servo line */
  cbi( _4017_CLOCK_PORT, _4017_CLOCK_PIN );
   1549a:	f242 0318 	movw	r3, #8216	; 0x2018
   1549e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   154a2:	f242 0218 	movw	r2, #8216	; 0x2018
   154a6:	f2c2 0200 	movt	r2, #8192	; 0x2000
   154aa:	7812      	ldrb	r2, [r2, #0]
   154ac:	b2d2      	uxtb	r2, r2
   154ae:	f022 0202 	bic.w	r2, r2, #2
   154b2:	b2d2      	uxtb	r2, r2
   154b4:	701a      	strb	r2, [r3, #0]

  /* Set all servos at their midpoints */
  for( i=0 ; i < _4017_NB_CHANNELS ; i++ )
   154b6:	2300      	movs	r3, #0
   154b8:	71fb      	strb	r3, [r7, #7]
   154ba:	e00b      	b.n	154d4 <servo_init+0x94>
    //    servo_widths[i] = SERVO_MIN;
    servo_widths[i] = (SERVO_MIN+SERVO_MAX)/2;
   154bc:	79fa      	ldrb	r2, [r7, #7]
   154be:	f64a 431c 	movw	r3, #44060	; 0xac1c
   154c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   154c6:	f645 51c0 	movw	r1, #24000	; 0x5dc0
   154ca:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

  /* Lower the regular servo line */
  cbi( _4017_CLOCK_PORT, _4017_CLOCK_PIN );

  /* Set all servos at their midpoints */
  for( i=0 ; i < _4017_NB_CHANNELS ; i++ )
   154ce:	79fb      	ldrb	r3, [r7, #7]
   154d0:	3301      	adds	r3, #1
   154d2:	71fb      	strb	r3, [r7, #7]
   154d4:	79fb      	ldrb	r3, [r7, #7]
   154d6:	2b09      	cmp	r3, #9
   154d8:	d9f0      	bls.n	154bc <servo_init+0x7c>
    //    servo_widths[i] = SERVO_MIN;
    servo_widths[i] = (SERVO_MIN+SERVO_MAX)/2;
	
  /* Set servos to go off some long time from now */
  SERVO_OCR	= 32768ul;
   154da:	f242 032a 	movw	r3, #8234	; 0x202a
   154de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   154e2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   154e6:	801a      	strh	r2, [r3, #0]

  /*
   * Configure output compare to toggle the output bits.
   */
  TCCR1A |=  _BV(SERVO_COM0 );
   154e8:	f242 032f 	movw	r3, #8239	; 0x202f
   154ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   154f0:	f242 022f 	movw	r2, #8239	; 0x202f
   154f4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   154f8:	7812      	ldrb	r2, [r2, #0]
   154fa:	b2d2      	uxtb	r2, r2
   154fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   15500:	b2d2      	uxtb	r2, r2
   15502:	701a      	strb	r2, [r3, #0]
	
  /* Clear the interrupt flags in case they are set */
  TIFR = _BV(SERVO_FLAG);
   15504:	f242 0336 	movw	r3, #8246	; 0x2036
   15508:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1550c:	2210      	movs	r2, #16
   1550e:	701a      	strb	r2, [r3, #0]

  /* Unassert the decade counter reset to start it running */
  cbi( _4017_RESET_PORT, _4017_RESET_PIN );
   15510:	f242 0312 	movw	r3, #8210	; 0x2012
   15514:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15518:	f242 0212 	movw	r2, #8210	; 0x2012
   1551c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   15520:	7812      	ldrb	r2, [r2, #0]
   15522:	b2d2      	uxtb	r2, r2
   15524:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   15528:	b2d2      	uxtb	r2, r2
   1552a:	701a      	strb	r2, [r3, #0]

  /* Enable our output compare interrupts */
  TIMSK |= _BV(SERVO_ENABLE );
   1552c:	f242 0337 	movw	r3, #8247	; 0x2037
   15530:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15534:	f242 0237 	movw	r2, #8247	; 0x2037
   15538:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1553c:	7812      	ldrb	r2, [r2, #0]
   1553e:	b2d2      	uxtb	r2, r2
   15540:	f042 0210 	orr.w	r2, r2, #16
   15544:	b2d2      	uxtb	r2, r2
   15546:	701a      	strb	r2, [r3, #0]
}
   15548:	370c      	adds	r7, #12
   1554a:	46bd      	mov	sp, r7
   1554c:	f85d 7b04 	ldr.w	r7, [sp], #4
   15550:	4770      	bx	lr
   15552:	bf00      	nop

00015554 <servo_set_one>:

  servo++;
}
#endif

void servo_set_one(uint8_t servo, uint16_t value_us) {
   15554:	b480      	push	{r7}
   15556:	b083      	sub	sp, #12
   15558:	af00      	add	r7, sp, #0
   1555a:	4602      	mov	r2, r0
   1555c:	460b      	mov	r3, r1
   1555e:	71fa      	strb	r2, [r7, #7]
   15560:	80bb      	strh	r3, [r7, #4]
  servo_widths[servo] = ChopServo(CLOCK*value_us);
   15562:	79f9      	ldrb	r1, [r7, #7]
   15564:	88bb      	ldrh	r3, [r7, #4]
   15566:	011b      	lsls	r3, r3, #4
   15568:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   1556c:	d308      	bcc.n	15580 <servo_set_one+0x2c>
   1556e:	88bb      	ldrh	r3, [r7, #4]
   15570:	011b      	lsls	r3, r3, #4
   15572:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   15576:	bf28      	it	cs
   15578:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   1557c:	b29a      	uxth	r2, r3
   1557e:	e001      	b.n	15584 <servo_set_one+0x30>
   15580:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   15584:	f64a 431c 	movw	r3, #44060	; 0xac1c
   15588:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1558c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
}
   15590:	370c      	adds	r7, #12
   15592:	46bd      	mov	sp, r7
   15594:	f85d 7b04 	ldr.w	r7, [sp], #4
   15598:	4770      	bx	lr
   1559a:	bf00      	nop

0001559c <servo_transmit>:

void 
servo_transmit(void) {
   1559c:	b580      	push	{r7, lr}
   1559e:	b082      	sub	sp, #8
   155a0:	af00      	add	r7, sp, #0
  uint8_t servo;
	//vPrintString("S_10 servo_transmit start! \n\r"); //SunnyBeike
  uart_transmit((uint8_t)0); uart_transmit((uint8_t)0);
   155a2:	2000      	movs	r0, #0
   155a4:	f000 f9e6 	bl	15974 <uart_transmit>
   155a8:	2000      	movs	r0, #0
   155aa:	f000 f9e3 	bl	15974 <uart_transmit>

  for(servo = 0; servo < _4017_NB_CHANNELS; servo++) {
   155ae:	2300      	movs	r3, #0
   155b0:	71fb      	strb	r3, [r7, #7]
   155b2:	e01a      	b.n	155ea <servo_transmit+0x4e>
    uart_transmit((uint8_t)(servo_widths[servo] >> 8));
   155b4:	79fa      	ldrb	r2, [r7, #7]
   155b6:	f64a 431c 	movw	r3, #44060	; 0xac1c
   155ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   155be:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   155c2:	0a1b      	lsrs	r3, r3, #8
   155c4:	b29b      	uxth	r3, r3
   155c6:	b2db      	uxtb	r3, r3
   155c8:	4618      	mov	r0, r3
   155ca:	f000 f9d3 	bl	15974 <uart_transmit>
    uart_transmit((uint8_t)(servo_widths[servo] & 0xff));
   155ce:	79fa      	ldrb	r2, [r7, #7]
   155d0:	f64a 431c 	movw	r3, #44060	; 0xac1c
   155d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   155d8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   155dc:	b2db      	uxtb	r3, r3
   155de:	4618      	mov	r0, r3
   155e0:	f000 f9c8 	bl	15974 <uart_transmit>
servo_transmit(void) {
  uint8_t servo;
	//vPrintString("S_10 servo_transmit start! \n\r"); //SunnyBeike
  uart_transmit((uint8_t)0); uart_transmit((uint8_t)0);

  for(servo = 0; servo < _4017_NB_CHANNELS; servo++) {
   155e4:	79fb      	ldrb	r3, [r7, #7]
   155e6:	3301      	adds	r3, #1
   155e8:	71fb      	strb	r3, [r7, #7]
   155ea:	79fb      	ldrb	r3, [r7, #7]
   155ec:	2b09      	cmp	r3, #9
   155ee:	d9e1      	bls.n	155b4 <servo_transmit+0x18>
    uart_transmit((uint8_t)(servo_widths[servo] >> 8));
    uart_transmit((uint8_t)(servo_widths[servo] & 0xff));
  }
  uart_transmit((uint8_t)'\n');
   155f0:	200a      	movs	r0, #10
   155f2:	f000 f9bf 	bl	15974 <uart_transmit>
	//vPrintString("S_10 servo_transmit end! \n\r"); //SunnyBeike
}
   155f6:	3708      	adds	r7, #8
   155f8:	46bd      	mov	sp, r7
   155fa:	bd80      	pop	{r7, pc}

000155fc <servo_set>:
 *
 * defines how servos react to radio control or autopilot channels
 *
 */

void servo_set(const pprz_t values[]) {
   155fc:	b5b0      	push	{r4, r5, r7, lr}
   155fe:	b084      	sub	sp, #16
   15600:	af00      	add	r7, sp, #0
   15602:	6078      	str	r0, [r7, #4]
  ServoSet(values); /*Generated from airframe.xml */
   15604:	687b      	ldr	r3, [r7, #4]
   15606:	330a      	adds	r3, #10
   15608:	881b      	ldrh	r3, [r3, #0]
   1560a:	b21b      	sxth	r3, r3
   1560c:	005b      	lsls	r3, r3, #1
   1560e:	4618      	mov	r0, r3
   15610:	f000 ff00 	bl	16414 <__aeabi_i2d>
   15614:	4602      	mov	r2, r0
   15616:	460b      	mov	r3, r1
   15618:	4610      	mov	r0, r2
   1561a:	4619      	mov	r1, r3
   1561c:	a3a6      	add	r3, pc, #664	; (adr r3, 158b8 <servo_set+0x2bc>)
   1561e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15622:	f000 ff5d 	bl	164e0 <__aeabi_dmul>
   15626:	4602      	mov	r2, r0
   15628:	460b      	mov	r3, r1
   1562a:	4610      	mov	r0, r2
   1562c:	4619      	mov	r1, r3
   1562e:	f001 f9f1 	bl	16a14 <__aeabi_d2iz>
   15632:	4603      	mov	r3, r0
   15634:	b29b      	uxth	r3, r3
   15636:	b29b      	uxth	r3, r3
   15638:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
   1563c:	81fb      	strh	r3, [r7, #14]
   1563e:	89fb      	ldrh	r3, [r7, #14]
   15640:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   15644:	d307      	bcc.n	15656 <servo_set+0x5a>
   15646:	89fb      	ldrh	r3, [r7, #14]
   15648:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   1564c:	bf28      	it	cs
   1564e:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   15652:	b29a      	uxth	r2, r3
   15654:	e001      	b.n	1565a <servo_set+0x5e>
   15656:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   1565a:	f64a 431c 	movw	r3, #44060	; 0xac1c
   1565e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15662:	80da      	strh	r2, [r3, #6]
   15664:	687b      	ldr	r3, [r7, #4]
   15666:	881b      	ldrh	r3, [r3, #0]
   15668:	b21b      	sxth	r3, r3
   1566a:	005b      	lsls	r3, r3, #1
   1566c:	4618      	mov	r0, r3
   1566e:	f000 fed1 	bl	16414 <__aeabi_i2d>
   15672:	4602      	mov	r2, r0
   15674:	460b      	mov	r3, r1
   15676:	4610      	mov	r0, r2
   15678:	4619      	mov	r1, r3
   1567a:	a38f      	add	r3, pc, #572	; (adr r3, 158b8 <servo_set+0x2bc>)
   1567c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15680:	f000 ff2e 	bl	164e0 <__aeabi_dmul>
   15684:	4602      	mov	r2, r0
   15686:	460b      	mov	r3, r1
   15688:	4610      	mov	r0, r2
   1568a:	4619      	mov	r1, r3
   1568c:	f001 f9c2 	bl	16a14 <__aeabi_d2iz>
   15690:	4603      	mov	r3, r0
   15692:	b29b      	uxth	r3, r3
   15694:	b29b      	uxth	r3, r3
   15696:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
   1569a:	81fb      	strh	r3, [r7, #14]
   1569c:	89fb      	ldrh	r3, [r7, #14]
   1569e:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   156a2:	d307      	bcc.n	156b4 <servo_set+0xb8>
   156a4:	89fb      	ldrh	r3, [r7, #14]
   156a6:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   156aa:	bf28      	it	cs
   156ac:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   156b0:	b29a      	uxth	r2, r3
   156b2:	e001      	b.n	156b8 <servo_set+0xbc>
   156b4:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   156b8:	f64a 431c 	movw	r3, #44060	; 0xac1c
   156bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   156c0:	825a      	strh	r2, [r3, #18]
   156c2:	687b      	ldr	r3, [r7, #4]
   156c4:	3304      	adds	r3, #4
   156c6:	881b      	ldrh	r3, [r3, #0]
   156c8:	b21b      	sxth	r3, r3
   156ca:	4618      	mov	r0, r3
   156cc:	f000 fea2 	bl	16414 <__aeabi_i2d>
   156d0:	4602      	mov	r2, r0
   156d2:	460b      	mov	r3, r1
   156d4:	4610      	mov	r0, r2
   156d6:	4619      	mov	r1, r3
   156d8:	a379      	add	r3, pc, #484	; (adr r3, 158c0 <servo_set+0x2c4>)
   156da:	e9d3 2300 	ldrd	r2, r3, [r3]
   156de:	f000 feff 	bl	164e0 <__aeabi_dmul>
   156e2:	4602      	mov	r2, r0
   156e4:	460b      	mov	r3, r1
   156e6:	4610      	mov	r0, r2
   156e8:	4619      	mov	r1, r3
   156ea:	f001 f993 	bl	16a14 <__aeabi_d2iz>
   156ee:	4603      	mov	r3, r0
   156f0:	b29b      	uxth	r3, r3
   156f2:	b29b      	uxth	r3, r3
   156f4:	f503 43bf 	add.w	r3, r3, #24448	; 0x5f80
   156f8:	3320      	adds	r3, #32
   156fa:	81fb      	strh	r3, [r7, #14]
   156fc:	89fb      	ldrh	r3, [r7, #14]
   156fe:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   15702:	d307      	bcc.n	15714 <servo_set+0x118>
   15704:	89fb      	ldrh	r3, [r7, #14]
   15706:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   1570a:	bf28      	it	cs
   1570c:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   15710:	b29a      	uxth	r2, r3
   15712:	e001      	b.n	15718 <servo_set+0x11c>
   15714:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   15718:	f64a 431c 	movw	r3, #44060	; 0xac1c
   1571c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15720:	819a      	strh	r2, [r3, #12]
   15722:	687b      	ldr	r3, [r7, #4]
   15724:	885b      	ldrh	r3, [r3, #2]
   15726:	81bb      	strh	r3, [r7, #12]
   15728:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   1572c:	2b00      	cmp	r3, #0
   1572e:	dd06      	ble.n	1573e <servo_set+0x142>
   15730:	f04f 0400 	mov.w	r4, #0
   15734:	f04f 0500 	mov.w	r5, #0
   15738:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
   1573c:	e002      	b.n	15744 <servo_set+0x148>
   1573e:	a562      	add	r5, pc, #392	; (adr r5, 158c8 <servo_set+0x2cc>)
   15740:	e9d5 4500 	ldrd	r4, r5, [r5]
   15744:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   15748:	4618      	mov	r0, r3
   1574a:	f000 fe63 	bl	16414 <__aeabi_i2d>
   1574e:	4602      	mov	r2, r0
   15750:	460b      	mov	r3, r1
   15752:	4620      	mov	r0, r4
   15754:	4629      	mov	r1, r5
   15756:	f000 fec3 	bl	164e0 <__aeabi_dmul>
   1575a:	4602      	mov	r2, r0
   1575c:	460b      	mov	r3, r1
   1575e:	4610      	mov	r0, r2
   15760:	4619      	mov	r1, r3
   15762:	a35b      	add	r3, pc, #364	; (adr r3, 158d0 <servo_set+0x2d4>)
   15764:	e9d3 2300 	ldrd	r2, r3, [r3]
   15768:	f000 feba 	bl	164e0 <__aeabi_dmul>
   1576c:	4602      	mov	r2, r0
   1576e:	460b      	mov	r3, r1
   15770:	4610      	mov	r0, r2
   15772:	4619      	mov	r1, r3
   15774:	f001 f94e 	bl	16a14 <__aeabi_d2iz>
   15778:	4603      	mov	r3, r0
   1577a:	b29b      	uxth	r3, r3
   1577c:	b29b      	uxth	r3, r3
   1577e:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
   15782:	81fb      	strh	r3, [r7, #14]
   15784:	89fb      	ldrh	r3, [r7, #14]
   15786:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   1578a:	d307      	bcc.n	1579c <servo_set+0x1a0>
   1578c:	89fb      	ldrh	r3, [r7, #14]
   1578e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   15792:	bf28      	it	cs
   15794:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   15798:	b29a      	uxth	r2, r3
   1579a:	e001      	b.n	157a0 <servo_set+0x1a4>
   1579c:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   157a0:	f64a 431c 	movw	r3, #44060	; 0xac1c
   157a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   157a8:	801a      	strh	r2, [r3, #0]
   157aa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   157ae:	2b00      	cmp	r3, #0
   157b0:	dd03      	ble.n	157ba <servo_set+0x1be>
   157b2:	a545      	add	r5, pc, #276	; (adr r5, 158c8 <servo_set+0x2cc>)
   157b4:	e9d5 4500 	ldrd	r4, r5, [r5]
   157b8:	e005      	b.n	157c6 <servo_set+0x1ca>
   157ba:	f04f 0400 	mov.w	r4, #0
   157be:	f04f 0500 	mov.w	r5, #0
   157c2:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
   157c6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   157ca:	4618      	mov	r0, r3
   157cc:	f000 fe22 	bl	16414 <__aeabi_i2d>
   157d0:	4602      	mov	r2, r0
   157d2:	460b      	mov	r3, r1
   157d4:	4620      	mov	r0, r4
   157d6:	4629      	mov	r1, r5
   157d8:	f000 fe82 	bl	164e0 <__aeabi_dmul>
   157dc:	4602      	mov	r2, r0
   157de:	460b      	mov	r3, r1
   157e0:	4610      	mov	r0, r2
   157e2:	4619      	mov	r1, r3
   157e4:	a33c      	add	r3, pc, #240	; (adr r3, 158d8 <servo_set+0x2dc>)
   157e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   157ea:	f000 fe79 	bl	164e0 <__aeabi_dmul>
   157ee:	4602      	mov	r2, r0
   157f0:	460b      	mov	r3, r1
   157f2:	4610      	mov	r0, r2
   157f4:	4619      	mov	r1, r3
   157f6:	f001 f90d 	bl	16a14 <__aeabi_d2iz>
   157fa:	4603      	mov	r3, r0
   157fc:	b29b      	uxth	r3, r3
   157fe:	b29b      	uxth	r3, r3
   15800:	f503 43ce 	add.w	r3, r3, #26368	; 0x6700
   15804:	3320      	adds	r3, #32
   15806:	81fb      	strh	r3, [r7, #14]
   15808:	89fb      	ldrh	r3, [r7, #14]
   1580a:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   1580e:	d307      	bcc.n	15820 <servo_set+0x224>
   15810:	89fb      	ldrh	r3, [r7, #14]
   15812:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   15816:	bf28      	it	cs
   15818:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   1581c:	b29a      	uxth	r2, r3
   1581e:	e001      	b.n	15824 <servo_set+0x228>
   15820:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   15824:	f64a 431c 	movw	r3, #44060	; 0xac1c
   15828:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1582c:	809a      	strh	r2, [r3, #4]
   1582e:	687b      	ldr	r3, [r7, #4]
   15830:	3306      	adds	r3, #6
   15832:	881b      	ldrh	r3, [r3, #0]
   15834:	b21b      	sxth	r3, r3
   15836:	4618      	mov	r0, r3
   15838:	f000 fdec 	bl	16414 <__aeabi_i2d>
   1583c:	4604      	mov	r4, r0
   1583e:	460d      	mov	r5, r1
   15840:	687b      	ldr	r3, [r7, #4]
   15842:	3302      	adds	r3, #2
   15844:	881b      	ldrh	r3, [r3, #0]
   15846:	b21b      	sxth	r3, r3
   15848:	4618      	mov	r0, r3
   1584a:	f000 fde3 	bl	16414 <__aeabi_i2d>
   1584e:	4602      	mov	r2, r0
   15850:	460b      	mov	r3, r1
   15852:	4620      	mov	r0, r4
   15854:	4629      	mov	r1, r5
   15856:	f000 fc91 	bl	1617c <__adddf3>
   1585a:	4602      	mov	r2, r0
   1585c:	460b      	mov	r3, r1
   1585e:	4610      	mov	r0, r2
   15860:	4619      	mov	r1, r3
   15862:	a31f      	add	r3, pc, #124	; (adr r3, 158e0 <servo_set+0x2e4>)
   15864:	e9d3 2300 	ldrd	r2, r3, [r3]
   15868:	f000 fe3a 	bl	164e0 <__aeabi_dmul>
   1586c:	4602      	mov	r2, r0
   1586e:	460b      	mov	r3, r1
   15870:	4610      	mov	r0, r2
   15872:	4619      	mov	r1, r3
   15874:	f001 f8ce 	bl	16a14 <__aeabi_d2iz>
   15878:	4603      	mov	r3, r0
   1587a:	b29b      	uxth	r3, r3
   1587c:	b29b      	uxth	r3, r3
   1587e:	f503 43b5 	add.w	r3, r3, #23168	; 0x5a80
   15882:	3320      	adds	r3, #32
   15884:	81fb      	strh	r3, [r7, #14]
   15886:	89fb      	ldrh	r3, [r7, #14]
   15888:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   1588c:	d307      	bcc.n	1589e <servo_set+0x2a2>
   1588e:	89fb      	ldrh	r3, [r7, #14]
   15890:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   15894:	bf28      	it	cs
   15896:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   1589a:	b29a      	uxth	r2, r3
   1589c:	e001      	b.n	158a2 <servo_set+0x2a6>
   1589e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   158a2:	f64a 431c 	movw	r3, #44060	; 0xac1c
   158a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   158aa:	81da      	strh	r2, [r3, #14]
}
   158ac:	3710      	adds	r7, #16
   158ae:	46bd      	mov	sp, r7
   158b0:	bdb0      	pop	{r4, r5, r7, pc}
   158b2:	bf00      	nop
   158b4:	f3af 8000 	nop.w
   158b8:	aaaa9ef0 	.word	0xaaaa9ef0
   158bc:	3feaaaaa 	.word	0x3feaaaaa
   158c0:	fc96473e 	.word	0xfc96473e
   158c4:	3fdfc962 	.word	0x3fdfc962
   158c8:	51eb851f 	.word	0x51eb851f
   158cc:	3fe51eb8 	.word	0x3fe51eb8
   158d0:	9999999a 	.word	0x9999999a
   158d4:	bfe19999 	.word	0xbfe19999
   158d8:	aaaa9ef0 	.word	0xaaaa9ef0
   158dc:	bfe0aaaa 	.word	0xbfe0aaaa
   158e0:	eeeed77a 	.word	0xeeeed77a
   158e4:	bfdeeeee 	.word	0xbfdeeeee

000158e8 <uart_init_tx>:
 * UART Baud rate generation settings:
 *
 * With 16.0 MHz clock,UBRR=25  => 38400 baud
 *
 */
void uart_init_tx( void ) {
   158e8:	b480      	push	{r7}
   158ea:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRRH = 0; 
   158ec:	f242 0320 	movw	r3, #8224	; 0x2020
   158f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   158f4:	2200      	movs	r2, #0
   158f6:	701a      	strb	r2, [r3, #0]
  UBRRL = 25; 
   158f8:	f242 0309 	movw	r3, #8201	; 0x2009
   158fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15900:	2219      	movs	r2, #25
   15902:	701a      	strb	r2, [r3, #0]
  /* single speed */ 
  UCSRA = 0; 
   15904:	f242 030b 	movw	r3, #8203	; 0x200b
   15908:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1590c:	2200      	movs	r2, #0
   1590e:	701a      	strb	r2, [r3, #0]
  /* Enable transmitter */ 
  UCSRB = _BV(TXEN); 
   15910:	f242 030a 	movw	r3, #8202	; 0x200a
   15914:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15918:	2208      	movs	r2, #8
   1591a:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0); 
   1591c:	f242 0320 	movw	r3, #8224	; 0x2020
   15920:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15924:	2286      	movs	r2, #134	; 0x86
   15926:	701a      	strb	r2, [r3, #0]
}
   15928:	46bd      	mov	sp, r7
   1592a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1592e:	4770      	bx	lr

00015930 <uart_init_rx>:

void uart_init_rx() {
   15930:	b480      	push	{r7}
   15932:	af00      	add	r7, sp, #0
  /* Enable receiver               */ 
  UCSRB |= _BV(RXEN); 
   15934:	f242 030a 	movw	r3, #8202	; 0x200a
   15938:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1593c:	f242 020a 	movw	r2, #8202	; 0x200a
   15940:	f2c2 0200 	movt	r2, #8192	; 0x2000
   15944:	7812      	ldrb	r2, [r2, #0]
   15946:	b2d2      	uxtb	r2, r2
   15948:	f042 0210 	orr.w	r2, r2, #16
   1594c:	b2d2      	uxtb	r2, r2
   1594e:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi( UCSRB, RXCIE ); 
   15950:	f242 030a 	movw	r3, #8202	; 0x200a
   15954:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15958:	f242 020a 	movw	r2, #8202	; 0x200a
   1595c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   15960:	7812      	ldrb	r2, [r2, #0]
   15962:	b2d2      	uxtb	r2, r2
   15964:	f062 027f 	orn	r2, r2, #127	; 0x7f
   15968:	b2d2      	uxtb	r2, r2
   1596a:	701a      	strb	r2, [r3, #0]
}
   1596c:	46bd      	mov	sp, r7
   1596e:	f85d 7b04 	ldr.w	r7, [sp], #4
   15972:	4770      	bx	lr

00015974 <uart_transmit>:

void uart_transmit( unsigned char data ) {
   15974:	b480      	push	{r7}
   15976:	b083      	sub	sp, #12
   15978:	af00      	add	r7, sp, #0
   1597a:	4603      	mov	r3, r0
   1597c:	71fb      	strb	r3, [r7, #7]
  if (UCSRB & _BV(TXCIE)) {
   1597e:	f242 030a 	movw	r3, #8202	; 0x200a
   15982:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15986:	781b      	ldrb	r3, [r3, #0]
   15988:	b2db      	uxtb	r3, r3
   1598a:	f003 0340 	and.w	r3, r3, #64	; 0x40
   1598e:	2b00      	cmp	r3, #0
   15990:	d028      	beq.n	159e4 <uart_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail == tx_head + 1) { /* BUF_SIZE = 256 */
   15992:	f64a 4331 	movw	r3, #44081	; 0xac31
   15996:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1599a:	781b      	ldrb	r3, [r3, #0]
   1599c:	b2db      	uxtb	r3, r3
   1599e:	461a      	mov	r2, r3
   159a0:	f64a 4330 	movw	r3, #44080	; 0xac30
   159a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   159a8:	781b      	ldrb	r3, [r3, #0]
   159aa:	3301      	adds	r3, #1
   159ac:	429a      	cmp	r2, r3
   159ae:	d100      	bne.n	159b2 <uart_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   159b0:	e02c      	b.n	15a0c <uart_transmit+0x98>
    }
    tx_buf[tx_head] = data;
   159b2:	f64a 4330 	movw	r3, #44080	; 0xac30
   159b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   159ba:	781b      	ldrb	r3, [r3, #0]
   159bc:	461a      	mov	r2, r3
   159be:	f64a 4334 	movw	r3, #44084	; 0xac34
   159c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   159c6:	79f9      	ldrb	r1, [r7, #7]
   159c8:	5499      	strb	r1, [r3, r2]
    tx_head++; /* BUF_SIZE = 256 */
   159ca:	f64a 4330 	movw	r3, #44080	; 0xac30
   159ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   159d2:	781b      	ldrb	r3, [r3, #0]
   159d4:	3301      	adds	r3, #1
   159d6:	b2da      	uxtb	r2, r3
   159d8:	f64a 4330 	movw	r3, #44080	; 0xac30
   159dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   159e0:	701a      	strb	r2, [r3, #0]
   159e2:	e013      	b.n	15a0c <uart_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR = data;
   159e4:	f242 030c 	movw	r3, #8204	; 0x200c
   159e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   159ec:	79fa      	ldrb	r2, [r7, #7]
   159ee:	701a      	strb	r2, [r3, #0]
    sbi(UCSRB, TXCIE);
   159f0:	f242 030a 	movw	r3, #8202	; 0x200a
   159f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   159f8:	f242 020a 	movw	r2, #8202	; 0x200a
   159fc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   15a00:	7812      	ldrb	r2, [r2, #0]
   15a02:	b2d2      	uxtb	r2, r2
   15a04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   15a08:	b2d2      	uxtb	r2, r2
   15a0a:	701a      	strb	r2, [r3, #0]
  }
}
   15a0c:	370c      	adds	r7, #12
   15a0e:	46bd      	mov	sp, r7
   15a10:	f85d 7b04 	ldr.w	r7, [sp], #4
   15a14:	4770      	bx	lr
   15a16:	bf00      	nop

00015a18 <uart_print_hex>:

void uart_print_hex ( uint8_t c ) {
   15a18:	b590      	push	{r4, r7, lr}
   15a1a:	b089      	sub	sp, #36	; 0x24
   15a1c:	af00      	add	r7, sp, #0
   15a1e:	4603      	mov	r3, r0
   15a20:	71fb      	strb	r3, [r7, #7]
  const uint8_t hex[16] = { '0', '1', '2', '3', '4', '5', '6', '7', 
   15a22:	f247 33f8 	movw	r3, #29688	; 0x73f8
   15a26:	f2c0 0301 	movt	r3, #1
   15a2a:	f107 040c 	add.w	r4, r7, #12
   15a2e:	6818      	ldr	r0, [r3, #0]
   15a30:	6859      	ldr	r1, [r3, #4]
   15a32:	689a      	ldr	r2, [r3, #8]
   15a34:	68db      	ldr	r3, [r3, #12]
   15a36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
  uint8_t high = (c & 0xF0)>>4;
   15a38:	79fb      	ldrb	r3, [r7, #7]
   15a3a:	091b      	lsrs	r3, r3, #4
   15a3c:	77fb      	strb	r3, [r7, #31]
  uint8_t low  = c & 0x0F;
   15a3e:	79fb      	ldrb	r3, [r7, #7]
   15a40:	f003 030f 	and.w	r3, r3, #15
   15a44:	77bb      	strb	r3, [r7, #30]
    /*
    *Added by SunnyBeike
    * */
        high = 15;
   15a46:	230f      	movs	r3, #15
   15a48:	77fb      	strb	r3, [r7, #31]
        low = 15;
   15a4a:	230f      	movs	r3, #15
   15a4c:	77bb      	strb	r3, [r7, #30]
    /*
    *End
    * */

    uart_transmit(hex[high]);
   15a4e:	7ffb      	ldrb	r3, [r7, #31]
   15a50:	f107 0220 	add.w	r2, r7, #32
   15a54:	4413      	add	r3, r2
   15a56:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   15a5a:	4618      	mov	r0, r3
   15a5c:	f7ff ff8a 	bl	15974 <uart_transmit>
  uart_transmit(hex[low]);
   15a60:	7fbb      	ldrb	r3, [r7, #30]
   15a62:	f107 0220 	add.w	r2, r7, #32
   15a66:	4413      	add	r3, r2
   15a68:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   15a6c:	4618      	mov	r0, r3
   15a6e:	f7ff ff81 	bl	15974 <uart_transmit>
} 
   15a72:	3724      	adds	r7, #36	; 0x24
   15a74:	46bd      	mov	sp, r7
   15a76:	bd90      	pop	{r4, r7, pc}

00015a78 <uart_print_hex16>:

void uart_print_hex16 ( uint16_t c ) {
   15a78:	b580      	push	{r7, lr}
   15a7a:	b084      	sub	sp, #16
   15a7c:	af00      	add	r7, sp, #0
   15a7e:	4603      	mov	r3, r0
   15a80:	80fb      	strh	r3, [r7, #6]
  uint8_t high = (uint8_t)(c>>8);
   15a82:	88fb      	ldrh	r3, [r7, #6]
   15a84:	0a1b      	lsrs	r3, r3, #8
   15a86:	b29b      	uxth	r3, r3
   15a88:	73fb      	strb	r3, [r7, #15]
  uint8_t low  = (uint8_t)(c);
   15a8a:	88fb      	ldrh	r3, [r7, #6]
   15a8c:	73bb      	strb	r3, [r7, #14]
  uart_print_hex(high);
   15a8e:	7bfb      	ldrb	r3, [r7, #15]
   15a90:	4618      	mov	r0, r3
   15a92:	f7ff ffc1 	bl	15a18 <uart_print_hex>
  uart_print_hex(low);
   15a96:	7bbb      	ldrb	r3, [r7, #14]
   15a98:	4618      	mov	r0, r3
   15a9a:	f7ff ffbd 	bl	15a18 <uart_print_hex>
}
   15a9e:	3710      	adds	r7, #16
   15aa0:	46bd      	mov	sp, r7
   15aa2:	bd80      	pop	{r7, pc}

00015aa4 <uart_print_string>:

void uart_print_string(const uint8_t* s) {
   15aa4:	b580      	push	{r7, lr}
   15aa6:	b084      	sub	sp, #16
   15aa8:	af00      	add	r7, sp, #0
   15aaa:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
   15aac:	2300      	movs	r3, #0
   15aae:	73fb      	strb	r3, [r7, #15]
  while (s[i]) {
   15ab0:	e009      	b.n	15ac6 <uart_print_string+0x22>
    uart_transmit(s[i]);
   15ab2:	7bfb      	ldrb	r3, [r7, #15]
   15ab4:	687a      	ldr	r2, [r7, #4]
   15ab6:	4413      	add	r3, r2
   15ab8:	781b      	ldrb	r3, [r3, #0]
   15aba:	4618      	mov	r0, r3
   15abc:	f7ff ff5a 	bl	15974 <uart_transmit>
    i++;
   15ac0:	7bfb      	ldrb	r3, [r7, #15]
   15ac2:	3301      	adds	r3, #1
   15ac4:	73fb      	strb	r3, [r7, #15]
  uart_print_hex(low);
}

void uart_print_string(const uint8_t* s) {
  uint8_t i = 0;
  while (s[i]) {
   15ac6:	7bfb      	ldrb	r3, [r7, #15]
   15ac8:	687a      	ldr	r2, [r7, #4]
   15aca:	4413      	add	r3, r2
   15acc:	781b      	ldrb	r3, [r3, #0]
   15ace:	2b00      	cmp	r3, #0
   15ad0:	d1ef      	bne.n	15ab2 <uart_print_string+0xe>
    uart_transmit(s[i]);
    i++;
  }
}
   15ad2:	3710      	adds	r7, #16
   15ad4:	46bd      	mov	sp, r7
   15ad6:	bd80      	pop	{r7, pc}

00015ad8 <SIG_UART_TRANS>:

SIGNAL(SIG_UART_TRANS) {
   15ad8:	b480      	push	{r7}
   15ada:	af00      	add	r7, sp, #0
  if (tx_head == tx_tail) {
   15adc:	f64a 4330 	movw	r3, #44080	; 0xac30
   15ae0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15ae4:	781a      	ldrb	r2, [r3, #0]
   15ae6:	f64a 4331 	movw	r3, #44081	; 0xac31
   15aea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15aee:	781b      	ldrb	r3, [r3, #0]
   15af0:	b2db      	uxtb	r3, r3
   15af2:	429a      	cmp	r2, r3
   15af4:	d10e      	bne.n	15b14 <SIG_UART_TRANS+0x3c>
    /* Nothing more to send */
    cbi(UCSRB, TXCIE); /* disable interrupt */
   15af6:	f242 030a 	movw	r3, #8202	; 0x200a
   15afa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15afe:	f242 020a 	movw	r2, #8202	; 0x200a
   15b02:	f2c2 0200 	movt	r2, #8192	; 0x2000
   15b06:	7812      	ldrb	r2, [r2, #0]
   15b08:	b2d2      	uxtb	r2, r2
   15b0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   15b0e:	b2d2      	uxtb	r2, r2
   15b10:	701a      	strb	r2, [r3, #0]
   15b12:	e01d      	b.n	15b50 <SIG_UART_TRANS+0x78>
  } else {
    UDR = tx_buf[tx_tail];
   15b14:	f242 030c 	movw	r3, #8204	; 0x200c
   15b18:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b1c:	f64a 4231 	movw	r2, #44081	; 0xac31
   15b20:	f2c2 0200 	movt	r2, #8192	; 0x2000
   15b24:	7812      	ldrb	r2, [r2, #0]
   15b26:	b2d2      	uxtb	r2, r2
   15b28:	4611      	mov	r1, r2
   15b2a:	f64a 4234 	movw	r2, #44084	; 0xac34
   15b2e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   15b32:	5c52      	ldrb	r2, [r2, r1]
   15b34:	701a      	strb	r2, [r3, #0]
    tx_tail++; /* warning tx_buf_len is 256 */
   15b36:	f64a 4331 	movw	r3, #44081	; 0xac31
   15b3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b3e:	781b      	ldrb	r3, [r3, #0]
   15b40:	b2db      	uxtb	r3, r3
   15b42:	3301      	adds	r3, #1
   15b44:	b2da      	uxtb	r2, r3
   15b46:	f64a 4331 	movw	r3, #44081	; 0xac31
   15b4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b4e:	701a      	strb	r2, [r3, #0]
  }
}
   15b50:	46bd      	mov	sp, r7
   15b52:	f85d 7b04 	ldr.w	r7, [sp], #4
   15b56:	4770      	bx	lr

00015b58 <init_led>:
#include "stm32f10x_usart.h"
#include "stm32f10x_exti.h"
#include "misc.h"

void init_led(void)
{
   15b58:	b580      	push	{r7, lr}
   15b5a:	b082      	sub	sp, #8
   15b5c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO C clock. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
   15b5e:	2010      	movs	r0, #16
   15b60:	2101      	movs	r1, #1
   15b62:	f7eb f92d 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Set the LED pin state such that the LED is off.  The LED is connected
     * between power and the microcontroller pin, which makes it turn on when
     * the pin is low.
     */
    GPIO_WriteBit(GPIOC,GPIO_Pin_12,Bit_SET);
   15b66:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   15b6a:	f2c4 0001 	movt	r0, #16385	; 0x4001
   15b6e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   15b72:	2201      	movs	r2, #1
   15b74:	f7eb fc34 	bl	13e0 <GPIO_WriteBit>

    /* Configure the LED pin as push-pull output. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_12;
   15b78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   15b7c:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   15b7e:	2310      	movs	r3, #16
   15b80:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   15b82:	2303      	movs	r3, #3
   15b84:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
   15b86:	1d3b      	adds	r3, r7, #4
   15b88:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   15b8c:	f2c4 0001 	movt	r0, #16385	; 0x4001
   15b90:	4619      	mov	r1, r3
   15b92:	f7eb fae9 	bl	1168 <GPIO_Init>
}
   15b96:	3708      	adds	r7, #8
   15b98:	46bd      	mov	sp, r7
   15b9a:	bd80      	pop	{r7, pc}

00015b9c <init_button>:

void init_button(void)
{
   15b9c:	b580      	push	{r7, lr}
   15b9e:	b082      	sub	sp, #8
   15ba0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO A clock */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
   15ba2:	2004      	movs	r0, #4
   15ba4:	2101      	movs	r1, #1
   15ba6:	f7eb f90b 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Configure the button pin as a floating input. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_0;
   15baa:	2301      	movs	r3, #1
   15bac:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   15bae:	2304      	movs	r3, #4
   15bb0:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   15bb2:	2303      	movs	r3, #3
   15bb4:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
   15bb6:	1d3b      	adds	r3, r7, #4
   15bb8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   15bbc:	f2c4 0001 	movt	r0, #16385	; 0x4001
   15bc0:	4619      	mov	r1, r3
   15bc2:	f7eb fad1 	bl	1168 <GPIO_Init>
}
   15bc6:	3708      	adds	r7, #8
   15bc8:	46bd      	mov	sp, r7
   15bca:	bd80      	pop	{r7, pc}

00015bcc <enable_button_interrupts>:

void enable_button_interrupts(void)
{
   15bcc:	b580      	push	{r7, lr}
   15bce:	b084      	sub	sp, #16
   15bd0:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable the AFIO clock.  GPIO_EXTILineConfig sets registers in
     * the AFIO.
     */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
   15bd2:	2001      	movs	r0, #1
   15bd4:	2101      	movs	r1, #1
   15bd6:	f7eb f8f3 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Connect EXTI Line 0 to the button GPIO Pin */
    GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);
   15bda:	2000      	movs	r0, #0
   15bdc:	2100      	movs	r1, #0
   15bde:	f7eb fcf7 	bl	15d0 <GPIO_EXTILineConfig>

    /* Configure the EXTI line to generate an interrupt when the button is
     * pressed.  The button pin is high when pressed, so it needs to trigger
     * when rising from low to high. */
    EXTI_InitStructure.EXTI_Line = EXTI_Line0;
   15be2:	2301      	movs	r3, #1
   15be4:	60bb      	str	r3, [r7, #8]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
   15be6:	2300      	movs	r3, #0
   15be8:	733b      	strb	r3, [r7, #12]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
   15bea:	2308      	movs	r3, #8
   15bec:	737b      	strb	r3, [r7, #13]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
   15bee:	2301      	movs	r3, #1
   15bf0:	73bb      	strb	r3, [r7, #14]
    EXTI_Init(&EXTI_InitStructure);
   15bf2:	f107 0308 	add.w	r3, r7, #8
   15bf6:	4618      	mov	r0, r3
   15bf8:	f7ec f9f0 	bl	1fdc <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
   15bfc:	2306      	movs	r3, #6
   15bfe:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
   15c00:	230f      	movs	r3, #15
   15c02:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
   15c04:	230f      	movs	r3, #15
   15c06:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   15c08:	2301      	movs	r3, #1
   15c0a:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
   15c0c:	1d3b      	adds	r3, r7, #4
   15c0e:	4618      	mov	r0, r3
   15c10:	f7ec fb1e 	bl	2250 <NVIC_Init>
}
   15c14:	3710      	adds	r7, #16
   15c16:	46bd      	mov	sp, r7
   15c18:	bd80      	pop	{r7, pc}
   15c1a:	bf00      	nop

00015c1c <init_rs232>:

void init_rs232(void)
{
   15c1c:	b580      	push	{r7, lr}
   15c1e:	b086      	sub	sp, #24
   15c20:	af00      	add	r7, sp, #0
    USART_InitTypeDef USART_InitStructure;
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable peripheral clocks. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
   15c22:	2005      	movs	r0, #5
   15c24:	2101      	movs	r1, #1
   15c26:	f7eb f8cb 	bl	dc0 <RCC_APB2PeriphClockCmd>
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
   15c2a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   15c2e:	2101      	movs	r1, #1
   15c30:	f7eb f8ee 	bl	e10 <RCC_APB1PeriphClockCmd>

    /* Configure USART2 Rx pin as floating input. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
   15c34:	2308      	movs	r3, #8
   15c36:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   15c38:	2304      	movs	r3, #4
   15c3a:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
   15c3c:	1d3b      	adds	r3, r7, #4
   15c3e:	f44f 6000 	mov.w	r0, #2048	; 0x800
   15c42:	f2c4 0001 	movt	r0, #16385	; 0x4001
   15c46:	4619      	mov	r1, r3
   15c48:	f7eb fa8e 	bl	1168 <GPIO_Init>

    /* Configure USART2 Tx as alternate function push-pull. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
   15c4c:	2304      	movs	r3, #4
   15c4e:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   15c50:	2303      	movs	r3, #3
   15c52:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
   15c54:	2318      	movs	r3, #24
   15c56:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
   15c58:	1d3b      	adds	r3, r7, #4
   15c5a:	f44f 6000 	mov.w	r0, #2048	; 0x800
   15c5e:	f2c4 0001 	movt	r0, #16385	; 0x4001
   15c62:	4619      	mov	r1, r3
   15c64:	f7eb fa80 	bl	1168 <GPIO_Init>

    /* Configure the USART2 */
    USART_InitStructure.USART_BaudRate = 9600;
   15c68:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   15c6c:	60bb      	str	r3, [r7, #8]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
   15c6e:	2300      	movs	r3, #0
   15c70:	81bb      	strh	r3, [r7, #12]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
   15c72:	2300      	movs	r3, #0
   15c74:	81fb      	strh	r3, [r7, #14]
    USART_InitStructure.USART_Parity = USART_Parity_No;
   15c76:	2300      	movs	r3, #0
   15c78:	823b      	strh	r3, [r7, #16]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
   15c7a:	2300      	movs	r3, #0
   15c7c:	82bb      	strh	r3, [r7, #20]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
   15c7e:	230c      	movs	r3, #12
   15c80:	827b      	strh	r3, [r7, #18]
    USART_Init(USART2, &USART_InitStructure);
   15c82:	f107 0308 	add.w	r3, r7, #8
   15c86:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   15c8a:	f2c4 0000 	movt	r0, #16384	; 0x4000
   15c8e:	4619      	mov	r1, r3
   15c90:	f7eb fd52 	bl	1738 <USART_Init>
    USART_Cmd(USART2, ENABLE);
   15c94:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   15c98:	f2c4 0000 	movt	r0, #16384	; 0x4000
   15c9c:	2101      	movs	r1, #1
   15c9e:	f7eb fe69 	bl	1974 <USART_Cmd>
}
   15ca2:	3718      	adds	r7, #24
   15ca4:	46bd      	mov	sp, r7
   15ca6:	bd80      	pop	{r7, pc}

00015ca8 <enable_rs232_interrupts>:

void enable_rs232_interrupts(void)
{
   15ca8:	b580      	push	{r7, lr}
   15caa:	b082      	sub	sp, #8
   15cac:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable transmit and receive interrupts for the USART2. */
    USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
   15cae:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   15cb2:	f2c4 0000 	movt	r0, #16384	; 0x4000
   15cb6:	f240 7127 	movw	r1, #1831	; 0x727
   15cba:	2200      	movs	r2, #0
   15cbc:	f7eb fe7a 	bl	19b4 <USART_ITConfig>
    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
   15cc0:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   15cc4:	f2c4 0000 	movt	r0, #16384	; 0x4000
   15cc8:	f240 5125 	movw	r1, #1317	; 0x525
   15ccc:	2201      	movs	r2, #1
   15cce:	f7eb fe71 	bl	19b4 <USART_ITConfig>

    /* Enable the USART2 IRQ in the NVIC module (so that the USART2 interrupt
     * handler is enabled). */
    NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
   15cd2:	2326      	movs	r3, #38	; 0x26
   15cd4:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
   15cd6:	2300      	movs	r3, #0
   15cd8:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   15cda:	2301      	movs	r3, #1
   15cdc:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
   15cde:	1d3b      	adds	r3, r7, #4
   15ce0:	4618      	mov	r0, r3
   15ce2:	f7ec fab5 	bl	2250 <NVIC_Init>
}
   15ce6:	3708      	adds	r7, #8
   15ce8:	46bd      	mov	sp, r7
   15cea:	bd80      	pop	{r7, pc}

00015cec <enable_rs232>:

void enable_rs232(void)
{
   15cec:	b580      	push	{r7, lr}
   15cee:	af00      	add	r7, sp, #0
    /* Enable the RS232 port. */
    USART_Cmd(USART2, ENABLE);
   15cf0:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   15cf4:	f2c4 0000 	movt	r0, #16384	; 0x4000
   15cf8:	2101      	movs	r1, #1
   15cfa:	f7eb fe3b 	bl	1974 <USART_Cmd>
}
   15cfe:	bd80      	pop	{r7, pc}

00015d00 <send_byte>:


void send_byte(uint8_t b)
{
   15d00:	b580      	push	{r7, lr}
   15d02:	b082      	sub	sp, #8
   15d04:	af00      	add	r7, sp, #0
   15d06:	4603      	mov	r3, r0
   15d08:	71fb      	strb	r3, [r7, #7]
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
   15d0a:	bf00      	nop
   15d0c:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   15d10:	f2c4 0000 	movt	r0, #16384	; 0x4000
   15d14:	2180      	movs	r1, #128	; 0x80
   15d16:	f7ec f899 	bl	1e4c <USART_GetFlagStatus>
   15d1a:	4603      	mov	r3, r0
   15d1c:	2b00      	cmp	r3, #0
   15d1e:	d0f5      	beq.n	15d0c <send_byte+0xc>

    GPIOC->ODR ^= 0x00001000;
   15d20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   15d24:	f2c4 0301 	movt	r3, #16385	; 0x4001
   15d28:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   15d2c:	f2c4 0201 	movt	r2, #16385	; 0x4001
   15d30:	68d2      	ldr	r2, [r2, #12]
   15d32:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
   15d36:	60da      	str	r2, [r3, #12]

    USART_SendData(USART2, b);
   15d38:	79fb      	ldrb	r3, [r7, #7]
   15d3a:	b29b      	uxth	r3, r3
   15d3c:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   15d40:	f2c4 0000 	movt	r0, #16384	; 0x4000
   15d44:	4619      	mov	r1, r3
   15d46:	f7eb ff35 	bl	1bb4 <USART_SendData>
}
   15d4a:	3708      	adds	r7, #8
   15d4c:	46bd      	mov	sp, r7
   15d4e:	bd80      	pop	{r7, pc}

00015d50 <send_num>:


void send_num(uint8_t b)
{
   15d50:	b580      	push	{r7, lr}
   15d52:	b082      	sub	sp, #8
   15d54:	af00      	add	r7, sp, #0
   15d56:	4603      	mov	r3, r0
   15d58:	71fb      	strb	r3, [r7, #7]
    send_byte(b+'0'); 
   15d5a:	79fb      	ldrb	r3, [r7, #7]
   15d5c:	3330      	adds	r3, #48	; 0x30
   15d5e:	b2db      	uxtb	r3, r3
   15d60:	4618      	mov	r0, r3
   15d62:	f7ff ffcd 	bl	15d00 <send_byte>
}
   15d66:	3708      	adds	r7, #8
   15d68:	46bd      	mov	sp, r7
   15d6a:	bd80      	pop	{r7, pc}

00015d6c <vPrintString>:


void vPrintString( const char * string )
{
   15d6c:	b580      	push	{r7, lr}
   15d6e:	b084      	sub	sp, #16
   15d70:	af00      	add	r7, sp, #0
   15d72:	6078      	str	r0, [r7, #4]
    int i = 0;
   15d74:	2300      	movs	r3, #0
   15d76:	60fb      	str	r3, [r7, #12]
    while(string[i] != '\0')
   15d78:	e009      	b.n	15d8e <vPrintString+0x22>
    {
        send_byte(string[i]);
   15d7a:	68fb      	ldr	r3, [r7, #12]
   15d7c:	687a      	ldr	r2, [r7, #4]
   15d7e:	4413      	add	r3, r2
   15d80:	781b      	ldrb	r3, [r3, #0]
   15d82:	4618      	mov	r0, r3
   15d84:	f7ff ffbc 	bl	15d00 <send_byte>
        i++;
   15d88:	68fb      	ldr	r3, [r7, #12]
   15d8a:	3301      	adds	r3, #1
   15d8c:	60fb      	str	r3, [r7, #12]


void vPrintString( const char * string )
{
    int i = 0;
    while(string[i] != '\0')
   15d8e:	68fb      	ldr	r3, [r7, #12]
   15d90:	687a      	ldr	r2, [r7, #4]
   15d92:	4413      	add	r3, r2
   15d94:	781b      	ldrb	r3, [r3, #0]
   15d96:	2b00      	cmp	r3, #0
   15d98:	d1ef      	bne.n	15d7a <vPrintString+0xe>
    {
        send_byte(string[i]);
        i++;
    }
}
   15d9a:	3710      	adds	r7, #16
   15d9c:	46bd      	mov	sp, r7
   15d9e:	bd80      	pop	{r7, pc}

00015da0 <vPrintNumber>:

void vPrintNumber( const long c_num )
{
   15da0:	b580      	push	{r7, lr}
   15da2:	b08a      	sub	sp, #40	; 0x28
   15da4:	af00      	add	r7, sp, #0
   15da6:	6078      	str	r0, [r7, #4]
    char time[15], tmp;
    unsigned int i, count = 0;
   15da8:	2300      	movs	r3, #0
   15daa:	623b      	str	r3, [r7, #32]
    long num = c_num;
   15dac:	687b      	ldr	r3, [r7, #4]
   15dae:	61fb      	str	r3, [r7, #28]

    if(num == 0)
   15db0:	69fb      	ldr	r3, [r7, #28]
   15db2:	2b00      	cmp	r3, #0
   15db4:	d106      	bne.n	15dc4 <vPrintNumber+0x24>
    {
        vPrintString("0\n\r");
   15db6:	f247 4008 	movw	r0, #29704	; 0x7408
   15dba:	f2c0 0001 	movt	r0, #1
   15dbe:	f7ff ffd5 	bl	15d6c <vPrintString>
   15dc2:	e062      	b.n	15e8a <vPrintNumber+0xea>
    }
    else
    {
        // transform long into char * 
        while( num   )
   15dc4:	e024      	b.n	15e10 <vPrintNumber+0x70>
        {
            time[count] = num%10 +'0';
   15dc6:	69f9      	ldr	r1, [r7, #28]
   15dc8:	f246 6367 	movw	r3, #26215	; 0x6667
   15dcc:	f2c6 6366 	movt	r3, #26214	; 0x6666
   15dd0:	fb83 2301 	smull	r2, r3, r3, r1
   15dd4:	109a      	asrs	r2, r3, #2
   15dd6:	17cb      	asrs	r3, r1, #31
   15dd8:	1ad2      	subs	r2, r2, r3
   15dda:	4613      	mov	r3, r2
   15ddc:	009b      	lsls	r3, r3, #2
   15dde:	4413      	add	r3, r2
   15de0:	005b      	lsls	r3, r3, #1
   15de2:	1aca      	subs	r2, r1, r3
   15de4:	b2d3      	uxtb	r3, r2
   15de6:	3330      	adds	r3, #48	; 0x30
   15de8:	b2da      	uxtb	r2, r3
   15dea:	f107 010c 	add.w	r1, r7, #12
   15dee:	6a3b      	ldr	r3, [r7, #32]
   15df0:	440b      	add	r3, r1
   15df2:	701a      	strb	r2, [r3, #0]
            count ++;
   15df4:	6a3b      	ldr	r3, [r7, #32]
   15df6:	3301      	adds	r3, #1
   15df8:	623b      	str	r3, [r7, #32]
            num /= 10;
   15dfa:	69fa      	ldr	r2, [r7, #28]
   15dfc:	f246 6367 	movw	r3, #26215	; 0x6667
   15e00:	f2c6 6366 	movt	r3, #26214	; 0x6666
   15e04:	fb83 1302 	smull	r1, r3, r3, r2
   15e08:	1099      	asrs	r1, r3, #2
   15e0a:	17d3      	asrs	r3, r2, #31
   15e0c:	1acb      	subs	r3, r1, r3
   15e0e:	61fb      	str	r3, [r7, #28]
        vPrintString("0\n\r");
    }
    else
    {
        // transform long into char * 
        while( num   )
   15e10:	69fb      	ldr	r3, [r7, #28]
   15e12:	2b00      	cmp	r3, #0
   15e14:	d1d7      	bne.n	15dc6 <vPrintNumber+0x26>
        {
            time[count] = num%10 +'0';
            count ++;
            num /= 10;
        }
        time[count] = '\0';
   15e16:	f107 020c 	add.w	r2, r7, #12
   15e1a:	6a3b      	ldr	r3, [r7, #32]
   15e1c:	4413      	add	r3, r2
   15e1e:	2200      	movs	r2, #0
   15e20:	701a      	strb	r2, [r3, #0]

        // reverse
        for( i = 0; i < count/2; ++i  )
   15e22:	2300      	movs	r3, #0
   15e24:	627b      	str	r3, [r7, #36]	; 0x24
   15e26:	e020      	b.n	15e6a <vPrintNumber+0xca>
        {
            tmp = time[i];
   15e28:	f107 020c 	add.w	r2, r7, #12
   15e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15e2e:	4413      	add	r3, r2
   15e30:	781b      	ldrb	r3, [r3, #0]
   15e32:	76fb      	strb	r3, [r7, #27]
            time[i] = time[count-1-i];
   15e34:	6a3a      	ldr	r2, [r7, #32]
   15e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15e38:	1ad3      	subs	r3, r2, r3
   15e3a:	3b01      	subs	r3, #1
   15e3c:	f107 0228 	add.w	r2, r7, #40	; 0x28
   15e40:	4413      	add	r3, r2
   15e42:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
   15e46:	f107 010c 	add.w	r1, r7, #12
   15e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15e4c:	440b      	add	r3, r1
   15e4e:	701a      	strb	r2, [r3, #0]
            time[count-1-i] = tmp;
   15e50:	6a3a      	ldr	r2, [r7, #32]
   15e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15e54:	1ad3      	subs	r3, r2, r3
   15e56:	3b01      	subs	r3, #1
   15e58:	f107 0128 	add.w	r1, r7, #40	; 0x28
   15e5c:	440b      	add	r3, r1
   15e5e:	7efa      	ldrb	r2, [r7, #27]
   15e60:	f803 2c1c 	strb.w	r2, [r3, #-28]
            num /= 10;
        }
        time[count] = '\0';

        // reverse
        for( i = 0; i < count/2; ++i  )
   15e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15e66:	3301      	adds	r3, #1
   15e68:	627b      	str	r3, [r7, #36]	; 0x24
   15e6a:	6a3b      	ldr	r3, [r7, #32]
   15e6c:	085a      	lsrs	r2, r3, #1
   15e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15e70:	429a      	cmp	r2, r3
   15e72:	d8d9      	bhi.n	15e28 <vPrintNumber+0x88>
        {
            tmp = time[i];
            time[i] = time[count-1-i];
            time[count-1-i] = tmp;
        }
        vPrintString(time);
   15e74:	f107 030c 	add.w	r3, r7, #12
   15e78:	4618      	mov	r0, r3
   15e7a:	f7ff ff77 	bl	15d6c <vPrintString>
        vPrintString("\n\r");
   15e7e:	f247 400c 	movw	r0, #29708	; 0x740c
   15e82:	f2c0 0001 	movt	r0, #1
   15e86:	f7ff ff71 	bl	15d6c <vPrintString>
    }
}
   15e8a:	3728      	adds	r7, #40	; 0x28
   15e8c:	46bd      	mov	sp, r7
   15e8e:	bd80      	pop	{r7, pc}

00015e90 <vSemaphoreInitialise>:
extern pvTaskFunType xTaskTable[NUMBEROFTASK];
extern xSemaphoreHandle xSemaphoreTable[NUMBEROFTASK];
extern char * pcNameOfTask[NUMBEROFTASK];

void vSemaphoreInitialise()
{
   15e90:	b580      	push	{r7, lr}
   15e92:	b082      	sub	sp, #8
   15e94:	af00      	add	r7, sp, #0
    portBASE_TYPE i;

    for( i = 0; i < NUMBEROFTASK; ++ i  )
   15e96:	2300      	movs	r3, #0
   15e98:	607b      	str	r3, [r7, #4]
   15e9a:	e033      	b.n	15f04 <vSemaphoreInitialise+0x74>
    {
        vSemaphoreCreateBinary(xSemaphoreTable[i]);
   15e9c:	2001      	movs	r0, #1
   15e9e:	2100      	movs	r1, #0
   15ea0:	2203      	movs	r2, #3
   15ea2:	f7ec fea5 	bl	2bf0 <xQueueGenericCreate>
   15ea6:	4601      	mov	r1, r0
   15ea8:	f240 2320 	movw	r3, #544	; 0x220
   15eac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15eb0:	687a      	ldr	r2, [r7, #4]
   15eb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   15eb6:	f240 2320 	movw	r3, #544	; 0x220
   15eba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15ebe:	687a      	ldr	r2, [r7, #4]
   15ec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   15ec4:	2b00      	cmp	r3, #0
   15ec6:	d00c      	beq.n	15ee2 <vSemaphoreInitialise+0x52>
   15ec8:	f240 2320 	movw	r3, #544	; 0x220
   15ecc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15ed0:	687a      	ldr	r2, [r7, #4]
   15ed2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   15ed6:	4618      	mov	r0, r3
   15ed8:	2100      	movs	r1, #0
   15eda:	2200      	movs	r2, #0
   15edc:	2300      	movs	r3, #0
   15ede:	f7ec ff15 	bl	2d0c <xQueueGenericSend>
        /* when created, it is initialised to 1. So, we take it away.*/
        xSemaphoreTake(xSemaphoreTable[i], portMAX_DELAY);
   15ee2:	f240 2320 	movw	r3, #544	; 0x220
   15ee6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15eea:	687a      	ldr	r2, [r7, #4]
   15eec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   15ef0:	4618      	mov	r0, r3
   15ef2:	2100      	movs	r1, #0
   15ef4:	f04f 32ff 	mov.w	r2, #4294967295
   15ef8:	2300      	movs	r3, #0
   15efa:	f7ec ffcd 	bl	2e98 <xQueueGenericReceive>

void vSemaphoreInitialise()
{
    portBASE_TYPE i;

    for( i = 0; i < NUMBEROFTASK; ++ i  )
   15efe:	687b      	ldr	r3, [r7, #4]
   15f00:	3301      	adds	r3, #1
   15f02:	607b      	str	r3, [r7, #4]
   15f04:	687b      	ldr	r3, [r7, #4]
   15f06:	2b0c      	cmp	r3, #12
   15f08:	ddc8      	ble.n	15e9c <vSemaphoreInitialise+0xc>
    {
        vSemaphoreCreateBinary(xSemaphoreTable[i]);
        /* when created, it is initialised to 1. So, we take it away.*/
        xSemaphoreTake(xSemaphoreTable[i], portMAX_DELAY);
    }
}
   15f0a:	3708      	adds	r7, #8
   15f0c:	46bd      	mov	sp, r7
   15f0e:	bd80      	pop	{r7, pc}

00015f10 <vParametersInit>:

void vParametersInit()
{
   15f10:	b480      	push	{r7}
   15f12:	b083      	sub	sp, #12
   15f14:	af00      	add	r7, sp, #0
    portBASE_TYPE i;
    for( i = 0; i < NUMBEROFTASK; ++ i )
   15f16:	2300      	movs	r3, #0
   15f18:	607b      	str	r3, [r7, #4]
   15f1a:	e03b      	b.n	15f94 <vParametersInit+0x84>
    {
        parameters[i].xMyId = i;
   15f1c:	f64a 5334 	movw	r3, #44340	; 0xad34
   15f20:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f24:	687a      	ldr	r2, [r7, #4]
   15f26:	0112      	lsls	r2, r2, #4
   15f28:	4413      	add	r3, r2
   15f2a:	687a      	ldr	r2, [r7, #4]
   15f2c:	601a      	str	r2, [r3, #0]
        parameters[i].xMyFun = xTaskTable[i];
   15f2e:	f240 03c4 	movw	r3, #196	; 0xc4
   15f32:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f36:	687a      	ldr	r2, [r7, #4]
   15f38:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   15f3c:	f64a 5334 	movw	r3, #44340	; 0xad34
   15f40:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f44:	6879      	ldr	r1, [r7, #4]
   15f46:	0109      	lsls	r1, r1, #4
   15f48:	440b      	add	r3, r1
   15f4a:	3304      	adds	r3, #4
   15f4c:	601a      	str	r2, [r3, #0]
        parameters[i].xPeriod = xPeriodTable[i];
   15f4e:	f240 035c 	movw	r3, #92	; 0x5c
   15f52:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f56:	687a      	ldr	r2, [r7, #4]
   15f58:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   15f5c:	f64a 5334 	movw	r3, #44340	; 0xad34
   15f60:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f64:	6879      	ldr	r1, [r7, #4]
   15f66:	0109      	lsls	r1, r1, #4
   15f68:	440b      	add	r3, r1
   15f6a:	3308      	adds	r3, #8
   15f6c:	601a      	str	r2, [r3, #0]
        parameters[i].xMySem = xSemaphoreTable[i];
   15f6e:	f240 2320 	movw	r3, #544	; 0x220
   15f72:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f76:	687a      	ldr	r2, [r7, #4]
   15f78:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   15f7c:	f64a 5334 	movw	r3, #44340	; 0xad34
   15f80:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f84:	6879      	ldr	r1, [r7, #4]
   15f86:	0109      	lsls	r1, r1, #4
   15f88:	440b      	add	r3, r1
   15f8a:	330c      	adds	r3, #12
   15f8c:	601a      	str	r2, [r3, #0]
}

void vParametersInit()
{
    portBASE_TYPE i;
    for( i = 0; i < NUMBEROFTASK; ++ i )
   15f8e:	687b      	ldr	r3, [r7, #4]
   15f90:	3301      	adds	r3, #1
   15f92:	607b      	str	r3, [r7, #4]
   15f94:	687b      	ldr	r3, [r7, #4]
   15f96:	2b0c      	cmp	r3, #12
   15f98:	ddc0      	ble.n	15f1c <vParametersInit+0xc>
        parameters[i].xMyId = i;
        parameters[i].xMyFun = xTaskTable[i];
        parameters[i].xPeriod = xPeriodTable[i];
        parameters[i].xMySem = xSemaphoreTable[i];
    }
}
   15f9a:	370c      	adds	r7, #12
   15f9c:	46bd      	mov	sp, r7
   15f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
   15fa2:	4770      	bx	lr

00015fa4 <vTimeTask>:

void vTimeTask( void * pvParameter )
{
   15fa4:	b580      	push	{r7, lr}
   15fa6:	b08a      	sub	sp, #40	; 0x28
   15fa8:	af00      	add	r7, sp, #0
   15faa:	6078      	str	r0, [r7, #4]
    struct parameter *xMyParameter = (struct parameter *)pvParameter;
   15fac:	687b      	ldr	r3, [r7, #4]
   15fae:	61fb      	str	r3, [r7, #28]
    portBASE_TYPE xMyId = xMyParameter->xMyId;
   15fb0:	69fb      	ldr	r3, [r7, #28]
   15fb2:	681b      	ldr	r3, [r3, #0]
   15fb4:	61bb      	str	r3, [r7, #24]
    pvTaskFunType xMyFun = xMyParameter->xMyFun;
   15fb6:	69fb      	ldr	r3, [r7, #28]
   15fb8:	685b      	ldr	r3, [r3, #4]
   15fba:	617b      	str	r3, [r7, #20]
    portTickType xMyPeriod = xMyParameter->xPeriod;
   15fbc:	69fb      	ldr	r3, [r7, #28]
   15fbe:	689b      	ldr	r3, [r3, #8]
   15fc0:	613b      	str	r3, [r7, #16]
    xSemaphoreHandle xMySem = xMyParameter->xMySem;
   15fc2:	69fb      	ldr	r3, [r7, #28]
   15fc4:	68db      	ldr	r3, [r3, #12]
   15fc6:	60fb      	str	r3, [r7, #12]

    portBASE_TYPE i;
    portTickType xCurrentTime;
    portBASE_TYPE IS_FIRST_TIME_TO_EXE = 1;
   15fc8:	2301      	movs	r3, #1
   15fca:	623b      	str	r3, [r7, #32]
    
    // used for periodic task
    portTickType xLastExecutionTime = 125; 
   15fcc:	237d      	movs	r3, #125	; 0x7d
   15fce:	60bb      	str	r3, [r7, #8]

    while(1)
    {
        // all the task start to execute from 100 ms.
        if( IS_FIRST_TIME_TO_EXE == 1 )
   15fd0:	6a3b      	ldr	r3, [r7, #32]
   15fd2:	2b01      	cmp	r3, #1
   15fd4:	d108      	bne.n	15fe8 <vTimeTask+0x44>
        {
            xSemaphoreTake(xMySem, portMAX_DELAY);
   15fd6:	68f8      	ldr	r0, [r7, #12]
   15fd8:	2100      	movs	r1, #0
   15fda:	f04f 32ff 	mov.w	r2, #4294967295
   15fde:	2300      	movs	r3, #0
   15fe0:	f7ec ff5a 	bl	2e98 <xQueueGenericReceive>
            IS_FIRST_TIME_TO_EXE = 0;
   15fe4:	2300      	movs	r3, #0
   15fe6:	623b      	str	r3, [r7, #32]
        }

        vTaskSuspendAll();
   15fe8:	f7ed fd60 	bl	3aac <vTaskSuspendAll>
        vPrintNumber(xMyId);
   15fec:	69b8      	ldr	r0, [r7, #24]
   15fee:	f7ff fed7 	bl	15da0 <vPrintNumber>
        xTaskResumeAll();
   15ff2:	f7ed fd6d 	bl	3ad0 <xTaskResumeAll>

        for( i = 0; i < 500; ++ i )
   15ff6:	2300      	movs	r3, #0
   15ff8:	627b      	str	r3, [r7, #36]	; 0x24
   15ffa:	e004      	b.n	16006 <vTimeTask+0x62>
        {
            xMyFun();
   15ffc:	697b      	ldr	r3, [r7, #20]
   15ffe:	4798      	blx	r3

        vTaskSuspendAll();
        vPrintNumber(xMyId);
        xTaskResumeAll();

        for( i = 0; i < 500; ++ i )
   16000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16002:	3301      	adds	r3, #1
   16004:	627b      	str	r3, [r7, #36]	; 0x24
   16006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16008:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   1600c:	dbf6      	blt.n	15ffc <vTimeTask+0x58>
        {
            xMyFun();
        }

        vTaskSuspendAll();
   1600e:	f7ed fd4d 	bl	3aac <vTaskSuspendAll>
        vPrintNumber((xMyId + 10) * 3);
   16012:	69bb      	ldr	r3, [r7, #24]
   16014:	f103 020a 	add.w	r2, r3, #10
   16018:	4613      	mov	r3, r2
   1601a:	005b      	lsls	r3, r3, #1
   1601c:	4413      	add	r3, r2
   1601e:	4618      	mov	r0, r3
   16020:	f7ff febe 	bl	15da0 <vPrintNumber>
        xTaskResumeAll();
   16024:	f7ed fd54 	bl	3ad0 <xTaskResumeAll>

        if(xTaskGetTickCountFromISR() > 1000000)
   16028:	f7ed fdfe 	bl	3c28 <xTaskGetTickCountFromISR>
   1602c:	4602      	mov	r2, r0
   1602e:	f244 2340 	movw	r3, #16960	; 0x4240
   16032:	f2c0 030f 	movt	r3, #15
   16036:	429a      	cmp	r2, r3
   16038:	d900      	bls.n	1603c <vTimeTask+0x98>
        {
            break;
   1603a:	e006      	b.n	1604a <vTimeTask+0xa6>
        }
        vTaskDelayUntil( &xLastExecutionTime, xMyPeriod / portTICK_RATE_MS );
   1603c:	f107 0308 	add.w	r3, r7, #8
   16040:	4618      	mov	r0, r3
   16042:	6939      	ldr	r1, [r7, #16]
   16044:	f7ed fa9e 	bl	3584 <vTaskDelayUntil>
    }
   16048:	e7c2      	b.n	15fd0 <vTimeTask+0x2c>
}
   1604a:	3728      	adds	r7, #40	; 0x28
   1604c:	46bd      	mov	sp, r7
   1604e:	bd80      	pop	{r7, pc}

00016050 <main>:


int main()
{
   16050:	b590      	push	{r4, r7, lr}
   16052:	b087      	sub	sp, #28
   16054:	af04      	add	r7, sp, #16

	init_led();
   16056:	f7ff fd7f 	bl	15b58 <init_led>
	init_rs232();
   1605a:	f7ff fddf 	bl	15c1c <init_rs232>
	enable_rs232_interrupts();
   1605e:	f7ff fe23 	bl	15ca8 <enable_rs232_interrupts>
	enable_rs232();
   16062:	f7ff fe43 	bl	15cec <enable_rs232>

    vSemaphoreInitialise();
   16066:	f7ff ff13 	bl	15e90 <vSemaphoreInitialise>
    vParametersInit();
   1606a:	f7ff ff51 	bl	15f10 <vParametersInit>

    portBASE_TYPE i;
    for( i = 0; i < NUMBEROFTASK; ++ i )
   1606e:	2300      	movs	r3, #0
   16070:	607b      	str	r3, [r7, #4]
   16072:	e02e      	b.n	160d2 <main+0x82>
    {
        xTaskCreate(vTimeTask, pcNameOfTask[i],  128, (void *) &parameters[i], xTaskPrio[i], &xTaskOfHandle[i]);
   16074:	f240 0390 	movw	r3, #144	; 0x90
   16078:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1607c:	687a      	ldr	r2, [r7, #4]
   1607e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   16082:	687b      	ldr	r3, [r7, #4]
   16084:	0119      	lsls	r1, r3, #4
   16086:	f64a 5334 	movw	r3, #44340	; 0xad34
   1608a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1608e:	18cc      	adds	r4, r1, r3
   16090:	f240 0328 	movw	r3, #40	; 0x28
   16094:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16098:	6879      	ldr	r1, [r7, #4]
   1609a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   1609e:	4619      	mov	r1, r3
   160a0:	687b      	ldr	r3, [r7, #4]
   160a2:	0098      	lsls	r0, r3, #2
   160a4:	f64a 6304 	movw	r3, #44548	; 0xae04
   160a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   160ac:	4403      	add	r3, r0
   160ae:	9100      	str	r1, [sp, #0]
   160b0:	9301      	str	r3, [sp, #4]
   160b2:	2300      	movs	r3, #0
   160b4:	9302      	str	r3, [sp, #8]
   160b6:	2300      	movs	r3, #0
   160b8:	9303      	str	r3, [sp, #12]
   160ba:	f645 70a5 	movw	r0, #24485	; 0x5fa5
   160be:	f2c0 0001 	movt	r0, #1
   160c2:	4611      	mov	r1, r2
   160c4:	2280      	movs	r2, #128	; 0x80
   160c6:	4623      	mov	r3, r4
   160c8:	f7ed f932 	bl	3330 <xTaskGenericCreate>

    vSemaphoreInitialise();
    vParametersInit();

    portBASE_TYPE i;
    for( i = 0; i < NUMBEROFTASK; ++ i )
   160cc:	687b      	ldr	r3, [r7, #4]
   160ce:	3301      	adds	r3, #1
   160d0:	607b      	str	r3, [r7, #4]
   160d2:	687b      	ldr	r3, [r7, #4]
   160d4:	2b0c      	cmp	r3, #12
   160d6:	ddcd      	ble.n	16074 <main+0x24>
    {
        xTaskCreate(vTimeTask, pcNameOfTask[i],  128, (void *) &parameters[i], xTaskPrio[i], &xTaskOfHandle[i]);
    }

	/* Start running the tasks. */
	vTaskStartScheduler();
   160d8:	f7ed fca8 	bl	3a2c <vTaskStartScheduler>

	return 0;
   160dc:	2300      	movs	r3, #0
}
   160de:	4618      	mov	r0, r3
   160e0:	370c      	adds	r7, #12
   160e2:	46bd      	mov	sp, r7
   160e4:	bd90      	pop	{r4, r7, pc}
   160e6:	bf00      	nop

000160e8 <myTraceCreate>:

void myTraceCreate      (){
   160e8:	b480      	push	{r7}
   160ea:	af00      	add	r7, sp, #0
}
   160ec:	46bd      	mov	sp, r7
   160ee:	f85d 7b04 	ldr.w	r7, [sp], #4
   160f2:	4770      	bx	lr

000160f4 <myTraceSwitchedIn>:

void myTraceSwitchedIn  (){
   160f4:	b480      	push	{r7}
   160f6:	af00      	add	r7, sp, #0
}
   160f8:	46bd      	mov	sp, r7
   160fa:	f85d 7b04 	ldr.w	r7, [sp], #4
   160fe:	4770      	bx	lr

00016100 <myTraceSwitchedOut>:

void myTraceSwitchedOut	(){
   16100:	b480      	push	{r7}
   16102:	af00      	add	r7, sp, #0
}
   16104:	46bd      	mov	sp, r7
   16106:	f85d 7b04 	ldr.w	r7, [sp], #4
   1610a:	4770      	bx	lr

0001610c <myTraceGetTick>:

inline float myTraceGetTick(){
   1610c:	b480      	push	{r7}
   1610e:	af00      	add	r7, sp, #0
}
   16110:	4618      	mov	r0, r3
   16112:	46bd      	mov	sp, r7
   16114:	f85d 7b04 	ldr.w	r7, [sp], #4
   16118:	4770      	bx	lr
   1611a:	bf00      	nop

0001611c <myTraceGetTimeMillisecond>:

inline unsigned long myTraceGetTimeMillisecond(){
   1611c:	b480      	push	{r7}
   1611e:	af00      	add	r7, sp, #0
	//return (xTaskGetTickCountFromISR() + myTraceGetTick()) * 1000 / configTICK_RATE_HZ;
}
   16120:	4618      	mov	r0, r3
   16122:	46bd      	mov	sp, r7
   16124:	f85d 7b04 	ldr.w	r7, [sp], #4
   16128:	4770      	bx	lr
   1612a:	bf00      	nop

0001612c <vApplicationTickHook>:

void vApplicationTickHook()
{
   1612c:	b580      	push	{r7, lr}
   1612e:	b082      	sub	sp, #8
   16130:	af00      	add	r7, sp, #0
    portBASE_TYPE i;
    portTickType xCurrentTime = xTaskGetTickCount();
   16132:	f7ed fd67 	bl	3c04 <xTaskGetTickCount>
   16136:	6038      	str	r0, [r7, #0]
    
    if( xCurrentTime == 125 )
   16138:	683b      	ldr	r3, [r7, #0]
   1613a:	2b7d      	cmp	r3, #125	; 0x7d
   1613c:	d115      	bne.n	1616a <vApplicationTickHook+0x3e>
    {
        for( i = 0; i < NUMBEROFTASK; ++ i )
   1613e:	2300      	movs	r3, #0
   16140:	607b      	str	r3, [r7, #4]
   16142:	e00f      	b.n	16164 <vApplicationTickHook+0x38>
        {
            xSemaphoreGive( xSemaphoreTable[i] );
   16144:	f240 2320 	movw	r3, #544	; 0x220
   16148:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1614c:	687a      	ldr	r2, [r7, #4]
   1614e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   16152:	4618      	mov	r0, r3
   16154:	2100      	movs	r1, #0
   16156:	2200      	movs	r2, #0
   16158:	2300      	movs	r3, #0
   1615a:	f7ec fdd7 	bl	2d0c <xQueueGenericSend>
    portBASE_TYPE i;
    portTickType xCurrentTime = xTaskGetTickCount();
    
    if( xCurrentTime == 125 )
    {
        for( i = 0; i < NUMBEROFTASK; ++ i )
   1615e:	687b      	ldr	r3, [r7, #4]
   16160:	3301      	adds	r3, #1
   16162:	607b      	str	r3, [r7, #4]
   16164:	687b      	ldr	r3, [r7, #4]
   16166:	2b0c      	cmp	r3, #12
   16168:	ddec      	ble.n	16144 <vApplicationTickHook+0x18>
        {
            xSemaphoreGive( xSemaphoreTable[i] );
        }
    }
}
   1616a:	3708      	adds	r7, #8
   1616c:	46bd      	mov	sp, r7
   1616e:	bd80      	pop	{r7, pc}

00016170 <__aeabi_drsub>:
   16170:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   16174:	e002      	b.n	1617c <__adddf3>
   16176:	bf00      	nop

00016178 <__aeabi_dsub>:
   16178:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0001617c <__adddf3>:
   1617c:	b530      	push	{r4, r5, lr}
   1617e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   16182:	ea4f 0543 	mov.w	r5, r3, lsl #1
   16186:	ea94 0f05 	teq	r4, r5
   1618a:	bf08      	it	eq
   1618c:	ea90 0f02 	teqeq	r0, r2
   16190:	bf1f      	itttt	ne
   16192:	ea54 0c00 	orrsne.w	ip, r4, r0
   16196:	ea55 0c02 	orrsne.w	ip, r5, r2
   1619a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1619e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   161a2:	f000 80e2 	beq.w	1636a <__adddf3+0x1ee>
   161a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   161aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   161ae:	bfb8      	it	lt
   161b0:	426d      	neglt	r5, r5
   161b2:	dd0c      	ble.n	161ce <__adddf3+0x52>
   161b4:	442c      	add	r4, r5
   161b6:	ea80 0202 	eor.w	r2, r0, r2
   161ba:	ea81 0303 	eor.w	r3, r1, r3
   161be:	ea82 0000 	eor.w	r0, r2, r0
   161c2:	ea83 0101 	eor.w	r1, r3, r1
   161c6:	ea80 0202 	eor.w	r2, r0, r2
   161ca:	ea81 0303 	eor.w	r3, r1, r3
   161ce:	2d36      	cmp	r5, #54	; 0x36
   161d0:	bf88      	it	hi
   161d2:	bd30      	pophi	{r4, r5, pc}
   161d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   161d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   161dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   161e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   161e4:	d002      	beq.n	161ec <__adddf3+0x70>
   161e6:	4240      	negs	r0, r0
   161e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   161ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   161f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   161f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   161f8:	d002      	beq.n	16200 <__adddf3+0x84>
   161fa:	4252      	negs	r2, r2
   161fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   16200:	ea94 0f05 	teq	r4, r5
   16204:	f000 80a7 	beq.w	16356 <__adddf3+0x1da>
   16208:	f1a4 0401 	sub.w	r4, r4, #1
   1620c:	f1d5 0e20 	rsbs	lr, r5, #32
   16210:	db0d      	blt.n	1622e <__adddf3+0xb2>
   16212:	fa02 fc0e 	lsl.w	ip, r2, lr
   16216:	fa22 f205 	lsr.w	r2, r2, r5
   1621a:	1880      	adds	r0, r0, r2
   1621c:	f141 0100 	adc.w	r1, r1, #0
   16220:	fa03 f20e 	lsl.w	r2, r3, lr
   16224:	1880      	adds	r0, r0, r2
   16226:	fa43 f305 	asr.w	r3, r3, r5
   1622a:	4159      	adcs	r1, r3
   1622c:	e00e      	b.n	1624c <__adddf3+0xd0>
   1622e:	f1a5 0520 	sub.w	r5, r5, #32
   16232:	f10e 0e20 	add.w	lr, lr, #32
   16236:	2a01      	cmp	r2, #1
   16238:	fa03 fc0e 	lsl.w	ip, r3, lr
   1623c:	bf28      	it	cs
   1623e:	f04c 0c02 	orrcs.w	ip, ip, #2
   16242:	fa43 f305 	asr.w	r3, r3, r5
   16246:	18c0      	adds	r0, r0, r3
   16248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   1624c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   16250:	d507      	bpl.n	16262 <__adddf3+0xe6>
   16252:	f04f 0e00 	mov.w	lr, #0
   16256:	f1dc 0c00 	rsbs	ip, ip, #0
   1625a:	eb7e 0000 	sbcs.w	r0, lr, r0
   1625e:	eb6e 0101 	sbc.w	r1, lr, r1
   16262:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   16266:	d31b      	bcc.n	162a0 <__adddf3+0x124>
   16268:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   1626c:	d30c      	bcc.n	16288 <__adddf3+0x10c>
   1626e:	0849      	lsrs	r1, r1, #1
   16270:	ea5f 0030 	movs.w	r0, r0, rrx
   16274:	ea4f 0c3c 	mov.w	ip, ip, rrx
   16278:	f104 0401 	add.w	r4, r4, #1
   1627c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   16280:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   16284:	f080 809a 	bcs.w	163bc <__adddf3+0x240>
   16288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1628c:	bf08      	it	eq
   1628e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   16292:	f150 0000 	adcs.w	r0, r0, #0
   16296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1629a:	ea41 0105 	orr.w	r1, r1, r5
   1629e:	bd30      	pop	{r4, r5, pc}
   162a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   162a4:	4140      	adcs	r0, r0
   162a6:	eb41 0101 	adc.w	r1, r1, r1
   162aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   162ae:	f1a4 0401 	sub.w	r4, r4, #1
   162b2:	d1e9      	bne.n	16288 <__adddf3+0x10c>
   162b4:	f091 0f00 	teq	r1, #0
   162b8:	bf04      	itt	eq
   162ba:	4601      	moveq	r1, r0
   162bc:	2000      	moveq	r0, #0
   162be:	fab1 f381 	clz	r3, r1
   162c2:	bf08      	it	eq
   162c4:	3320      	addeq	r3, #32
   162c6:	f1a3 030b 	sub.w	r3, r3, #11
   162ca:	f1b3 0220 	subs.w	r2, r3, #32
   162ce:	da0c      	bge.n	162ea <__adddf3+0x16e>
   162d0:	320c      	adds	r2, #12
   162d2:	dd08      	ble.n	162e6 <__adddf3+0x16a>
   162d4:	f102 0c14 	add.w	ip, r2, #20
   162d8:	f1c2 020c 	rsb	r2, r2, #12
   162dc:	fa01 f00c 	lsl.w	r0, r1, ip
   162e0:	fa21 f102 	lsr.w	r1, r1, r2
   162e4:	e00c      	b.n	16300 <__adddf3+0x184>
   162e6:	f102 0214 	add.w	r2, r2, #20
   162ea:	bfd8      	it	le
   162ec:	f1c2 0c20 	rsble	ip, r2, #32
   162f0:	fa01 f102 	lsl.w	r1, r1, r2
   162f4:	fa20 fc0c 	lsr.w	ip, r0, ip
   162f8:	bfdc      	itt	le
   162fa:	ea41 010c 	orrle.w	r1, r1, ip
   162fe:	4090      	lslle	r0, r2
   16300:	1ae4      	subs	r4, r4, r3
   16302:	bfa2      	ittt	ge
   16304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   16308:	4329      	orrge	r1, r5
   1630a:	bd30      	popge	{r4, r5, pc}
   1630c:	ea6f 0404 	mvn.w	r4, r4
   16310:	3c1f      	subs	r4, #31
   16312:	da1c      	bge.n	1634e <__adddf3+0x1d2>
   16314:	340c      	adds	r4, #12
   16316:	dc0e      	bgt.n	16336 <__adddf3+0x1ba>
   16318:	f104 0414 	add.w	r4, r4, #20
   1631c:	f1c4 0220 	rsb	r2, r4, #32
   16320:	fa20 f004 	lsr.w	r0, r0, r4
   16324:	fa01 f302 	lsl.w	r3, r1, r2
   16328:	ea40 0003 	orr.w	r0, r0, r3
   1632c:	fa21 f304 	lsr.w	r3, r1, r4
   16330:	ea45 0103 	orr.w	r1, r5, r3
   16334:	bd30      	pop	{r4, r5, pc}
   16336:	f1c4 040c 	rsb	r4, r4, #12
   1633a:	f1c4 0220 	rsb	r2, r4, #32
   1633e:	fa20 f002 	lsr.w	r0, r0, r2
   16342:	fa01 f304 	lsl.w	r3, r1, r4
   16346:	ea40 0003 	orr.w	r0, r0, r3
   1634a:	4629      	mov	r1, r5
   1634c:	bd30      	pop	{r4, r5, pc}
   1634e:	fa21 f004 	lsr.w	r0, r1, r4
   16352:	4629      	mov	r1, r5
   16354:	bd30      	pop	{r4, r5, pc}
   16356:	f094 0f00 	teq	r4, #0
   1635a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1635e:	bf06      	itte	eq
   16360:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   16364:	3401      	addeq	r4, #1
   16366:	3d01      	subne	r5, #1
   16368:	e74e      	b.n	16208 <__adddf3+0x8c>
   1636a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1636e:	bf18      	it	ne
   16370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   16374:	d029      	beq.n	163ca <__adddf3+0x24e>
   16376:	ea94 0f05 	teq	r4, r5
   1637a:	bf08      	it	eq
   1637c:	ea90 0f02 	teqeq	r0, r2
   16380:	d005      	beq.n	1638e <__adddf3+0x212>
   16382:	ea54 0c00 	orrs.w	ip, r4, r0
   16386:	bf04      	itt	eq
   16388:	4619      	moveq	r1, r3
   1638a:	4610      	moveq	r0, r2
   1638c:	bd30      	pop	{r4, r5, pc}
   1638e:	ea91 0f03 	teq	r1, r3
   16392:	bf1e      	ittt	ne
   16394:	2100      	movne	r1, #0
   16396:	2000      	movne	r0, #0
   16398:	bd30      	popne	{r4, r5, pc}
   1639a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1639e:	d105      	bne.n	163ac <__adddf3+0x230>
   163a0:	0040      	lsls	r0, r0, #1
   163a2:	4149      	adcs	r1, r1
   163a4:	bf28      	it	cs
   163a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   163aa:	bd30      	pop	{r4, r5, pc}
   163ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   163b0:	bf3c      	itt	cc
   163b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   163b6:	bd30      	popcc	{r4, r5, pc}
   163b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   163bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   163c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   163c4:	f04f 0000 	mov.w	r0, #0
   163c8:	bd30      	pop	{r4, r5, pc}
   163ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   163ce:	bf1a      	itte	ne
   163d0:	4619      	movne	r1, r3
   163d2:	4610      	movne	r0, r2
   163d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   163d8:	bf1c      	itt	ne
   163da:	460b      	movne	r3, r1
   163dc:	4602      	movne	r2, r0
   163de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   163e2:	bf06      	itte	eq
   163e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   163e8:	ea91 0f03 	teqeq	r1, r3
   163ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   163f0:	bd30      	pop	{r4, r5, pc}
   163f2:	bf00      	nop

000163f4 <__aeabi_ui2d>:
   163f4:	f090 0f00 	teq	r0, #0
   163f8:	bf04      	itt	eq
   163fa:	2100      	moveq	r1, #0
   163fc:	4770      	bxeq	lr
   163fe:	b530      	push	{r4, r5, lr}
   16400:	f44f 6480 	mov.w	r4, #1024	; 0x400
   16404:	f104 0432 	add.w	r4, r4, #50	; 0x32
   16408:	f04f 0500 	mov.w	r5, #0
   1640c:	f04f 0100 	mov.w	r1, #0
   16410:	e750      	b.n	162b4 <__adddf3+0x138>
   16412:	bf00      	nop

00016414 <__aeabi_i2d>:
   16414:	f090 0f00 	teq	r0, #0
   16418:	bf04      	itt	eq
   1641a:	2100      	moveq	r1, #0
   1641c:	4770      	bxeq	lr
   1641e:	b530      	push	{r4, r5, lr}
   16420:	f44f 6480 	mov.w	r4, #1024	; 0x400
   16424:	f104 0432 	add.w	r4, r4, #50	; 0x32
   16428:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   1642c:	bf48      	it	mi
   1642e:	4240      	negmi	r0, r0
   16430:	f04f 0100 	mov.w	r1, #0
   16434:	e73e      	b.n	162b4 <__adddf3+0x138>
   16436:	bf00      	nop

00016438 <__aeabi_f2d>:
   16438:	0042      	lsls	r2, r0, #1
   1643a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1643e:	ea4f 0131 	mov.w	r1, r1, rrx
   16442:	ea4f 7002 	mov.w	r0, r2, lsl #28
   16446:	bf1f      	itttt	ne
   16448:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   1644c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   16450:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   16454:	4770      	bxne	lr
   16456:	f092 0f00 	teq	r2, #0
   1645a:	bf14      	ite	ne
   1645c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   16460:	4770      	bxeq	lr
   16462:	b530      	push	{r4, r5, lr}
   16464:	f44f 7460 	mov.w	r4, #896	; 0x380
   16468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1646c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   16470:	e720      	b.n	162b4 <__adddf3+0x138>
   16472:	bf00      	nop

00016474 <__aeabi_ul2d>:
   16474:	ea50 0201 	orrs.w	r2, r0, r1
   16478:	bf08      	it	eq
   1647a:	4770      	bxeq	lr
   1647c:	b530      	push	{r4, r5, lr}
   1647e:	f04f 0500 	mov.w	r5, #0
   16482:	e00a      	b.n	1649a <__aeabi_l2d+0x16>

00016484 <__aeabi_l2d>:
   16484:	ea50 0201 	orrs.w	r2, r0, r1
   16488:	bf08      	it	eq
   1648a:	4770      	bxeq	lr
   1648c:	b530      	push	{r4, r5, lr}
   1648e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   16492:	d502      	bpl.n	1649a <__aeabi_l2d+0x16>
   16494:	4240      	negs	r0, r0
   16496:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1649a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1649e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   164a2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   164a6:	f43f aedc 	beq.w	16262 <__adddf3+0xe6>
   164aa:	f04f 0203 	mov.w	r2, #3
   164ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   164b2:	bf18      	it	ne
   164b4:	3203      	addne	r2, #3
   164b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   164ba:	bf18      	it	ne
   164bc:	3203      	addne	r2, #3
   164be:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   164c2:	f1c2 0320 	rsb	r3, r2, #32
   164c6:	fa00 fc03 	lsl.w	ip, r0, r3
   164ca:	fa20 f002 	lsr.w	r0, r0, r2
   164ce:	fa01 fe03 	lsl.w	lr, r1, r3
   164d2:	ea40 000e 	orr.w	r0, r0, lr
   164d6:	fa21 f102 	lsr.w	r1, r1, r2
   164da:	4414      	add	r4, r2
   164dc:	e6c1      	b.n	16262 <__adddf3+0xe6>
   164de:	bf00      	nop

000164e0 <__aeabi_dmul>:
   164e0:	b570      	push	{r4, r5, r6, lr}
   164e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   164e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   164ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   164ee:	bf1d      	ittte	ne
   164f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   164f4:	ea94 0f0c 	teqne	r4, ip
   164f8:	ea95 0f0c 	teqne	r5, ip
   164fc:	f000 f8de 	bleq	166bc <__aeabi_dmul+0x1dc>
   16500:	442c      	add	r4, r5
   16502:	ea81 0603 	eor.w	r6, r1, r3
   16506:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   1650a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   1650e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   16512:	bf18      	it	ne
   16514:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   16518:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1651c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   16520:	d038      	beq.n	16594 <__aeabi_dmul+0xb4>
   16522:	fba0 ce02 	umull	ip, lr, r0, r2
   16526:	f04f 0500 	mov.w	r5, #0
   1652a:	fbe1 e502 	umlal	lr, r5, r1, r2
   1652e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   16532:	fbe0 e503 	umlal	lr, r5, r0, r3
   16536:	f04f 0600 	mov.w	r6, #0
   1653a:	fbe1 5603 	umlal	r5, r6, r1, r3
   1653e:	f09c 0f00 	teq	ip, #0
   16542:	bf18      	it	ne
   16544:	f04e 0e01 	orrne.w	lr, lr, #1
   16548:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   1654c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   16550:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   16554:	d204      	bcs.n	16560 <__aeabi_dmul+0x80>
   16556:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   1655a:	416d      	adcs	r5, r5
   1655c:	eb46 0606 	adc.w	r6, r6, r6
   16560:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   16564:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   16568:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   1656c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   16570:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   16574:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   16578:	bf88      	it	hi
   1657a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1657e:	d81e      	bhi.n	165be <__aeabi_dmul+0xde>
   16580:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   16584:	bf08      	it	eq
   16586:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   1658a:	f150 0000 	adcs.w	r0, r0, #0
   1658e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   16592:	bd70      	pop	{r4, r5, r6, pc}
   16594:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   16598:	ea46 0101 	orr.w	r1, r6, r1
   1659c:	ea40 0002 	orr.w	r0, r0, r2
   165a0:	ea81 0103 	eor.w	r1, r1, r3
   165a4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   165a8:	bfc2      	ittt	gt
   165aa:	ebd4 050c 	rsbsgt	r5, r4, ip
   165ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   165b2:	bd70      	popgt	{r4, r5, r6, pc}
   165b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   165b8:	f04f 0e00 	mov.w	lr, #0
   165bc:	3c01      	subs	r4, #1
   165be:	f300 80ab 	bgt.w	16718 <__aeabi_dmul+0x238>
   165c2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   165c6:	bfde      	ittt	le
   165c8:	2000      	movle	r0, #0
   165ca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   165ce:	bd70      	pople	{r4, r5, r6, pc}
   165d0:	f1c4 0400 	rsb	r4, r4, #0
   165d4:	3c20      	subs	r4, #32
   165d6:	da35      	bge.n	16644 <__aeabi_dmul+0x164>
   165d8:	340c      	adds	r4, #12
   165da:	dc1b      	bgt.n	16614 <__aeabi_dmul+0x134>
   165dc:	f104 0414 	add.w	r4, r4, #20
   165e0:	f1c4 0520 	rsb	r5, r4, #32
   165e4:	fa00 f305 	lsl.w	r3, r0, r5
   165e8:	fa20 f004 	lsr.w	r0, r0, r4
   165ec:	fa01 f205 	lsl.w	r2, r1, r5
   165f0:	ea40 0002 	orr.w	r0, r0, r2
   165f4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   165f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   165fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   16600:	fa21 f604 	lsr.w	r6, r1, r4
   16604:	eb42 0106 	adc.w	r1, r2, r6
   16608:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1660c:	bf08      	it	eq
   1660e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   16612:	bd70      	pop	{r4, r5, r6, pc}
   16614:	f1c4 040c 	rsb	r4, r4, #12
   16618:	f1c4 0520 	rsb	r5, r4, #32
   1661c:	fa00 f304 	lsl.w	r3, r0, r4
   16620:	fa20 f005 	lsr.w	r0, r0, r5
   16624:	fa01 f204 	lsl.w	r2, r1, r4
   16628:	ea40 0002 	orr.w	r0, r0, r2
   1662c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   16630:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   16634:	f141 0100 	adc.w	r1, r1, #0
   16638:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1663c:	bf08      	it	eq
   1663e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   16642:	bd70      	pop	{r4, r5, r6, pc}
   16644:	f1c4 0520 	rsb	r5, r4, #32
   16648:	fa00 f205 	lsl.w	r2, r0, r5
   1664c:	ea4e 0e02 	orr.w	lr, lr, r2
   16650:	fa20 f304 	lsr.w	r3, r0, r4
   16654:	fa01 f205 	lsl.w	r2, r1, r5
   16658:	ea43 0302 	orr.w	r3, r3, r2
   1665c:	fa21 f004 	lsr.w	r0, r1, r4
   16660:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   16664:	fa21 f204 	lsr.w	r2, r1, r4
   16668:	ea20 0002 	bic.w	r0, r0, r2
   1666c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   16670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   16674:	bf08      	it	eq
   16676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1667a:	bd70      	pop	{r4, r5, r6, pc}
   1667c:	f094 0f00 	teq	r4, #0
   16680:	d10f      	bne.n	166a2 <__aeabi_dmul+0x1c2>
   16682:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   16686:	0040      	lsls	r0, r0, #1
   16688:	eb41 0101 	adc.w	r1, r1, r1
   1668c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   16690:	bf08      	it	eq
   16692:	3c01      	subeq	r4, #1
   16694:	d0f7      	beq.n	16686 <__aeabi_dmul+0x1a6>
   16696:	ea41 0106 	orr.w	r1, r1, r6
   1669a:	f095 0f00 	teq	r5, #0
   1669e:	bf18      	it	ne
   166a0:	4770      	bxne	lr
   166a2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   166a6:	0052      	lsls	r2, r2, #1
   166a8:	eb43 0303 	adc.w	r3, r3, r3
   166ac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   166b0:	bf08      	it	eq
   166b2:	3d01      	subeq	r5, #1
   166b4:	d0f7      	beq.n	166a6 <__aeabi_dmul+0x1c6>
   166b6:	ea43 0306 	orr.w	r3, r3, r6
   166ba:	4770      	bx	lr
   166bc:	ea94 0f0c 	teq	r4, ip
   166c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   166c4:	bf18      	it	ne
   166c6:	ea95 0f0c 	teqne	r5, ip
   166ca:	d00c      	beq.n	166e6 <__aeabi_dmul+0x206>
   166cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   166d0:	bf18      	it	ne
   166d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   166d6:	d1d1      	bne.n	1667c <__aeabi_dmul+0x19c>
   166d8:	ea81 0103 	eor.w	r1, r1, r3
   166dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   166e0:	f04f 0000 	mov.w	r0, #0
   166e4:	bd70      	pop	{r4, r5, r6, pc}
   166e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   166ea:	bf06      	itte	eq
   166ec:	4610      	moveq	r0, r2
   166ee:	4619      	moveq	r1, r3
   166f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   166f4:	d019      	beq.n	1672a <__aeabi_dmul+0x24a>
   166f6:	ea94 0f0c 	teq	r4, ip
   166fa:	d102      	bne.n	16702 <__aeabi_dmul+0x222>
   166fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   16700:	d113      	bne.n	1672a <__aeabi_dmul+0x24a>
   16702:	ea95 0f0c 	teq	r5, ip
   16706:	d105      	bne.n	16714 <__aeabi_dmul+0x234>
   16708:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   1670c:	bf1c      	itt	ne
   1670e:	4610      	movne	r0, r2
   16710:	4619      	movne	r1, r3
   16712:	d10a      	bne.n	1672a <__aeabi_dmul+0x24a>
   16714:	ea81 0103 	eor.w	r1, r1, r3
   16718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1671c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   16720:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   16724:	f04f 0000 	mov.w	r0, #0
   16728:	bd70      	pop	{r4, r5, r6, pc}
   1672a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1672e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   16732:	bd70      	pop	{r4, r5, r6, pc}

00016734 <__aeabi_ddiv>:
   16734:	b570      	push	{r4, r5, r6, lr}
   16736:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1673a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1673e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   16742:	bf1d      	ittte	ne
   16744:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   16748:	ea94 0f0c 	teqne	r4, ip
   1674c:	ea95 0f0c 	teqne	r5, ip
   16750:	f000 f8a7 	bleq	168a2 <__aeabi_ddiv+0x16e>
   16754:	eba4 0405 	sub.w	r4, r4, r5
   16758:	ea81 0e03 	eor.w	lr, r1, r3
   1675c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   16760:	ea4f 3101 	mov.w	r1, r1, lsl #12
   16764:	f000 8088 	beq.w	16878 <__aeabi_ddiv+0x144>
   16768:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1676c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   16770:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   16774:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   16778:	ea4f 2202 	mov.w	r2, r2, lsl #8
   1677c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   16780:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   16784:	ea4f 2600 	mov.w	r6, r0, lsl #8
   16788:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   1678c:	429d      	cmp	r5, r3
   1678e:	bf08      	it	eq
   16790:	4296      	cmpeq	r6, r2
   16792:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   16796:	f504 7440 	add.w	r4, r4, #768	; 0x300
   1679a:	d202      	bcs.n	167a2 <__aeabi_ddiv+0x6e>
   1679c:	085b      	lsrs	r3, r3, #1
   1679e:	ea4f 0232 	mov.w	r2, r2, rrx
   167a2:	1ab6      	subs	r6, r6, r2
   167a4:	eb65 0503 	sbc.w	r5, r5, r3
   167a8:	085b      	lsrs	r3, r3, #1
   167aa:	ea4f 0232 	mov.w	r2, r2, rrx
   167ae:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   167b2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   167b6:	ebb6 0e02 	subs.w	lr, r6, r2
   167ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   167be:	bf22      	ittt	cs
   167c0:	1ab6      	subcs	r6, r6, r2
   167c2:	4675      	movcs	r5, lr
   167c4:	ea40 000c 	orrcs.w	r0, r0, ip
   167c8:	085b      	lsrs	r3, r3, #1
   167ca:	ea4f 0232 	mov.w	r2, r2, rrx
   167ce:	ebb6 0e02 	subs.w	lr, r6, r2
   167d2:	eb75 0e03 	sbcs.w	lr, r5, r3
   167d6:	bf22      	ittt	cs
   167d8:	1ab6      	subcs	r6, r6, r2
   167da:	4675      	movcs	r5, lr
   167dc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   167e0:	085b      	lsrs	r3, r3, #1
   167e2:	ea4f 0232 	mov.w	r2, r2, rrx
   167e6:	ebb6 0e02 	subs.w	lr, r6, r2
   167ea:	eb75 0e03 	sbcs.w	lr, r5, r3
   167ee:	bf22      	ittt	cs
   167f0:	1ab6      	subcs	r6, r6, r2
   167f2:	4675      	movcs	r5, lr
   167f4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   167f8:	085b      	lsrs	r3, r3, #1
   167fa:	ea4f 0232 	mov.w	r2, r2, rrx
   167fe:	ebb6 0e02 	subs.w	lr, r6, r2
   16802:	eb75 0e03 	sbcs.w	lr, r5, r3
   16806:	bf22      	ittt	cs
   16808:	1ab6      	subcs	r6, r6, r2
   1680a:	4675      	movcs	r5, lr
   1680c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   16810:	ea55 0e06 	orrs.w	lr, r5, r6
   16814:	d018      	beq.n	16848 <__aeabi_ddiv+0x114>
   16816:	ea4f 1505 	mov.w	r5, r5, lsl #4
   1681a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   1681e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   16822:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   16826:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   1682a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   1682e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   16832:	d1c0      	bne.n	167b6 <__aeabi_ddiv+0x82>
   16834:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   16838:	d10b      	bne.n	16852 <__aeabi_ddiv+0x11e>
   1683a:	ea41 0100 	orr.w	r1, r1, r0
   1683e:	f04f 0000 	mov.w	r0, #0
   16842:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   16846:	e7b6      	b.n	167b6 <__aeabi_ddiv+0x82>
   16848:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1684c:	bf04      	itt	eq
   1684e:	4301      	orreq	r1, r0
   16850:	2000      	moveq	r0, #0
   16852:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   16856:	bf88      	it	hi
   16858:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1685c:	f63f aeaf 	bhi.w	165be <__aeabi_dmul+0xde>
   16860:	ebb5 0c03 	subs.w	ip, r5, r3
   16864:	bf04      	itt	eq
   16866:	ebb6 0c02 	subseq.w	ip, r6, r2
   1686a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1686e:	f150 0000 	adcs.w	r0, r0, #0
   16872:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   16876:	bd70      	pop	{r4, r5, r6, pc}
   16878:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   1687c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   16880:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   16884:	bfc2      	ittt	gt
   16886:	ebd4 050c 	rsbsgt	r5, r4, ip
   1688a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1688e:	bd70      	popgt	{r4, r5, r6, pc}
   16890:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   16894:	f04f 0e00 	mov.w	lr, #0
   16898:	3c01      	subs	r4, #1
   1689a:	e690      	b.n	165be <__aeabi_dmul+0xde>
   1689c:	ea45 0e06 	orr.w	lr, r5, r6
   168a0:	e68d      	b.n	165be <__aeabi_dmul+0xde>
   168a2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   168a6:	ea94 0f0c 	teq	r4, ip
   168aa:	bf08      	it	eq
   168ac:	ea95 0f0c 	teqeq	r5, ip
   168b0:	f43f af3b 	beq.w	1672a <__aeabi_dmul+0x24a>
   168b4:	ea94 0f0c 	teq	r4, ip
   168b8:	d10a      	bne.n	168d0 <__aeabi_ddiv+0x19c>
   168ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   168be:	f47f af34 	bne.w	1672a <__aeabi_dmul+0x24a>
   168c2:	ea95 0f0c 	teq	r5, ip
   168c6:	f47f af25 	bne.w	16714 <__aeabi_dmul+0x234>
   168ca:	4610      	mov	r0, r2
   168cc:	4619      	mov	r1, r3
   168ce:	e72c      	b.n	1672a <__aeabi_dmul+0x24a>
   168d0:	ea95 0f0c 	teq	r5, ip
   168d4:	d106      	bne.n	168e4 <__aeabi_ddiv+0x1b0>
   168d6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   168da:	f43f aefd 	beq.w	166d8 <__aeabi_dmul+0x1f8>
   168de:	4610      	mov	r0, r2
   168e0:	4619      	mov	r1, r3
   168e2:	e722      	b.n	1672a <__aeabi_dmul+0x24a>
   168e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   168e8:	bf18      	it	ne
   168ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   168ee:	f47f aec5 	bne.w	1667c <__aeabi_dmul+0x19c>
   168f2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   168f6:	f47f af0d 	bne.w	16714 <__aeabi_dmul+0x234>
   168fa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   168fe:	f47f aeeb 	bne.w	166d8 <__aeabi_dmul+0x1f8>
   16902:	e712      	b.n	1672a <__aeabi_dmul+0x24a>

00016904 <__gedf2>:
   16904:	f04f 3cff 	mov.w	ip, #4294967295
   16908:	e006      	b.n	16918 <__cmpdf2+0x4>
   1690a:	bf00      	nop

0001690c <__ledf2>:
   1690c:	f04f 0c01 	mov.w	ip, #1
   16910:	e002      	b.n	16918 <__cmpdf2+0x4>
   16912:	bf00      	nop

00016914 <__cmpdf2>:
   16914:	f04f 0c01 	mov.w	ip, #1
   16918:	f84d cd04 	str.w	ip, [sp, #-4]!
   1691c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   16920:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   16924:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   16928:	bf18      	it	ne
   1692a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   1692e:	d01b      	beq.n	16968 <__cmpdf2+0x54>
   16930:	b001      	add	sp, #4
   16932:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   16936:	bf0c      	ite	eq
   16938:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   1693c:	ea91 0f03 	teqne	r1, r3
   16940:	bf02      	ittt	eq
   16942:	ea90 0f02 	teqeq	r0, r2
   16946:	2000      	moveq	r0, #0
   16948:	4770      	bxeq	lr
   1694a:	f110 0f00 	cmn.w	r0, #0
   1694e:	ea91 0f03 	teq	r1, r3
   16952:	bf58      	it	pl
   16954:	4299      	cmppl	r1, r3
   16956:	bf08      	it	eq
   16958:	4290      	cmpeq	r0, r2
   1695a:	bf2c      	ite	cs
   1695c:	17d8      	asrcs	r0, r3, #31
   1695e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   16962:	f040 0001 	orr.w	r0, r0, #1
   16966:	4770      	bx	lr
   16968:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1696c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   16970:	d102      	bne.n	16978 <__cmpdf2+0x64>
   16972:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   16976:	d107      	bne.n	16988 <__cmpdf2+0x74>
   16978:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1697c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   16980:	d1d6      	bne.n	16930 <__cmpdf2+0x1c>
   16982:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   16986:	d0d3      	beq.n	16930 <__cmpdf2+0x1c>
   16988:	f85d 0b04 	ldr.w	r0, [sp], #4
   1698c:	4770      	bx	lr
   1698e:	bf00      	nop

00016990 <__aeabi_cdrcmple>:
   16990:	4684      	mov	ip, r0
   16992:	4610      	mov	r0, r2
   16994:	4662      	mov	r2, ip
   16996:	468c      	mov	ip, r1
   16998:	4619      	mov	r1, r3
   1699a:	4663      	mov	r3, ip
   1699c:	e000      	b.n	169a0 <__aeabi_cdcmpeq>
   1699e:	bf00      	nop

000169a0 <__aeabi_cdcmpeq>:
   169a0:	b501      	push	{r0, lr}
   169a2:	f7ff ffb7 	bl	16914 <__cmpdf2>
   169a6:	2800      	cmp	r0, #0
   169a8:	bf48      	it	mi
   169aa:	f110 0f00 	cmnmi.w	r0, #0
   169ae:	bd01      	pop	{r0, pc}

000169b0 <__aeabi_dcmpeq>:
   169b0:	f84d ed08 	str.w	lr, [sp, #-8]!
   169b4:	f7ff fff4 	bl	169a0 <__aeabi_cdcmpeq>
   169b8:	bf0c      	ite	eq
   169ba:	2001      	moveq	r0, #1
   169bc:	2000      	movne	r0, #0
   169be:	f85d fb08 	ldr.w	pc, [sp], #8
   169c2:	bf00      	nop

000169c4 <__aeabi_dcmplt>:
   169c4:	f84d ed08 	str.w	lr, [sp, #-8]!
   169c8:	f7ff ffea 	bl	169a0 <__aeabi_cdcmpeq>
   169cc:	bf34      	ite	cc
   169ce:	2001      	movcc	r0, #1
   169d0:	2000      	movcs	r0, #0
   169d2:	f85d fb08 	ldr.w	pc, [sp], #8
   169d6:	bf00      	nop

000169d8 <__aeabi_dcmple>:
   169d8:	f84d ed08 	str.w	lr, [sp, #-8]!
   169dc:	f7ff ffe0 	bl	169a0 <__aeabi_cdcmpeq>
   169e0:	bf94      	ite	ls
   169e2:	2001      	movls	r0, #1
   169e4:	2000      	movhi	r0, #0
   169e6:	f85d fb08 	ldr.w	pc, [sp], #8
   169ea:	bf00      	nop

000169ec <__aeabi_dcmpge>:
   169ec:	f84d ed08 	str.w	lr, [sp, #-8]!
   169f0:	f7ff ffce 	bl	16990 <__aeabi_cdrcmple>
   169f4:	bf94      	ite	ls
   169f6:	2001      	movls	r0, #1
   169f8:	2000      	movhi	r0, #0
   169fa:	f85d fb08 	ldr.w	pc, [sp], #8
   169fe:	bf00      	nop

00016a00 <__aeabi_dcmpgt>:
   16a00:	f84d ed08 	str.w	lr, [sp, #-8]!
   16a04:	f7ff ffc4 	bl	16990 <__aeabi_cdrcmple>
   16a08:	bf34      	ite	cc
   16a0a:	2001      	movcc	r0, #1
   16a0c:	2000      	movcs	r0, #0
   16a0e:	f85d fb08 	ldr.w	pc, [sp], #8
   16a12:	bf00      	nop

00016a14 <__aeabi_d2iz>:
   16a14:	ea4f 0241 	mov.w	r2, r1, lsl #1
   16a18:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   16a1c:	d215      	bcs.n	16a4a <__aeabi_d2iz+0x36>
   16a1e:	d511      	bpl.n	16a44 <__aeabi_d2iz+0x30>
   16a20:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   16a24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   16a28:	d912      	bls.n	16a50 <__aeabi_d2iz+0x3c>
   16a2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   16a2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   16a32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   16a36:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   16a3a:	fa23 f002 	lsr.w	r0, r3, r2
   16a3e:	bf18      	it	ne
   16a40:	4240      	negne	r0, r0
   16a42:	4770      	bx	lr
   16a44:	f04f 0000 	mov.w	r0, #0
   16a48:	4770      	bx	lr
   16a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   16a4e:	d105      	bne.n	16a5c <__aeabi_d2iz+0x48>
   16a50:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   16a54:	bf08      	it	eq
   16a56:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   16a5a:	4770      	bx	lr
   16a5c:	f04f 0000 	mov.w	r0, #0
   16a60:	4770      	bx	lr
   16a62:	bf00      	nop

00016a64 <__aeabi_d2uiz>:
   16a64:	004a      	lsls	r2, r1, #1
   16a66:	d211      	bcs.n	16a8c <__aeabi_d2uiz+0x28>
   16a68:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   16a6c:	d211      	bcs.n	16a92 <__aeabi_d2uiz+0x2e>
   16a6e:	d50d      	bpl.n	16a8c <__aeabi_d2uiz+0x28>
   16a70:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   16a74:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   16a78:	d40e      	bmi.n	16a98 <__aeabi_d2uiz+0x34>
   16a7a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   16a7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   16a82:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   16a86:	fa23 f002 	lsr.w	r0, r3, r2
   16a8a:	4770      	bx	lr
   16a8c:	f04f 0000 	mov.w	r0, #0
   16a90:	4770      	bx	lr
   16a92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   16a96:	d102      	bne.n	16a9e <__aeabi_d2uiz+0x3a>
   16a98:	f04f 30ff 	mov.w	r0, #4294967295
   16a9c:	4770      	bx	lr
   16a9e:	f04f 0000 	mov.w	r0, #0
   16aa2:	4770      	bx	lr

00016aa4 <__aeabi_d2f>:
   16aa4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   16aa8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   16aac:	bf24      	itt	cs
   16aae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   16ab2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   16ab6:	d90d      	bls.n	16ad4 <__aeabi_d2f+0x30>
   16ab8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   16abc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   16ac0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   16ac4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   16ac8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   16acc:	bf08      	it	eq
   16ace:	f020 0001 	biceq.w	r0, r0, #1
   16ad2:	4770      	bx	lr
   16ad4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   16ad8:	d121      	bne.n	16b1e <__aeabi_d2f+0x7a>
   16ada:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   16ade:	bfbc      	itt	lt
   16ae0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   16ae4:	4770      	bxlt	lr
   16ae6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   16aea:	ea4f 5252 	mov.w	r2, r2, lsr #21
   16aee:	f1c2 0218 	rsb	r2, r2, #24
   16af2:	f1c2 0c20 	rsb	ip, r2, #32
   16af6:	fa10 f30c 	lsls.w	r3, r0, ip
   16afa:	fa20 f002 	lsr.w	r0, r0, r2
   16afe:	bf18      	it	ne
   16b00:	f040 0001 	orrne.w	r0, r0, #1
   16b04:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   16b08:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   16b0c:	fa03 fc0c 	lsl.w	ip, r3, ip
   16b10:	ea40 000c 	orr.w	r0, r0, ip
   16b14:	fa23 f302 	lsr.w	r3, r3, r2
   16b18:	ea4f 0343 	mov.w	r3, r3, lsl #1
   16b1c:	e7cc      	b.n	16ab8 <__aeabi_d2f+0x14>
   16b1e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   16b22:	d107      	bne.n	16b34 <__aeabi_d2f+0x90>
   16b24:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   16b28:	bf1e      	ittt	ne
   16b2a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   16b2e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   16b32:	4770      	bxne	lr
   16b34:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   16b38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   16b3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   16b40:	4770      	bx	lr
   16b42:	bf00      	nop

00016b44 <__aeabi_frsub>:
   16b44:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   16b48:	e002      	b.n	16b50 <__addsf3>
   16b4a:	bf00      	nop

00016b4c <__aeabi_fsub>:
   16b4c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00016b50 <__addsf3>:
   16b50:	0042      	lsls	r2, r0, #1
   16b52:	bf1f      	itttt	ne
   16b54:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   16b58:	ea92 0f03 	teqne	r2, r3
   16b5c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   16b60:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   16b64:	d06a      	beq.n	16c3c <__addsf3+0xec>
   16b66:	ea4f 6212 	mov.w	r2, r2, lsr #24
   16b6a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   16b6e:	bfc1      	itttt	gt
   16b70:	18d2      	addgt	r2, r2, r3
   16b72:	4041      	eorgt	r1, r0
   16b74:	4048      	eorgt	r0, r1
   16b76:	4041      	eorgt	r1, r0
   16b78:	bfb8      	it	lt
   16b7a:	425b      	neglt	r3, r3
   16b7c:	2b19      	cmp	r3, #25
   16b7e:	bf88      	it	hi
   16b80:	4770      	bxhi	lr
   16b82:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   16b86:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   16b8a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   16b8e:	bf18      	it	ne
   16b90:	4240      	negne	r0, r0
   16b92:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   16b96:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   16b9a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   16b9e:	bf18      	it	ne
   16ba0:	4249      	negne	r1, r1
   16ba2:	ea92 0f03 	teq	r2, r3
   16ba6:	d03f      	beq.n	16c28 <__addsf3+0xd8>
   16ba8:	f1a2 0201 	sub.w	r2, r2, #1
   16bac:	fa41 fc03 	asr.w	ip, r1, r3
   16bb0:	eb10 000c 	adds.w	r0, r0, ip
   16bb4:	f1c3 0320 	rsb	r3, r3, #32
   16bb8:	fa01 f103 	lsl.w	r1, r1, r3
   16bbc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   16bc0:	d502      	bpl.n	16bc8 <__addsf3+0x78>
   16bc2:	4249      	negs	r1, r1
   16bc4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   16bc8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   16bcc:	d313      	bcc.n	16bf6 <__addsf3+0xa6>
   16bce:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   16bd2:	d306      	bcc.n	16be2 <__addsf3+0x92>
   16bd4:	0840      	lsrs	r0, r0, #1
   16bd6:	ea4f 0131 	mov.w	r1, r1, rrx
   16bda:	f102 0201 	add.w	r2, r2, #1
   16bde:	2afe      	cmp	r2, #254	; 0xfe
   16be0:	d251      	bcs.n	16c86 <__addsf3+0x136>
   16be2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   16be6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   16bea:	bf08      	it	eq
   16bec:	f020 0001 	biceq.w	r0, r0, #1
   16bf0:	ea40 0003 	orr.w	r0, r0, r3
   16bf4:	4770      	bx	lr
   16bf6:	0049      	lsls	r1, r1, #1
   16bf8:	eb40 0000 	adc.w	r0, r0, r0
   16bfc:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   16c00:	f1a2 0201 	sub.w	r2, r2, #1
   16c04:	d1ed      	bne.n	16be2 <__addsf3+0x92>
   16c06:	fab0 fc80 	clz	ip, r0
   16c0a:	f1ac 0c08 	sub.w	ip, ip, #8
   16c0e:	ebb2 020c 	subs.w	r2, r2, ip
   16c12:	fa00 f00c 	lsl.w	r0, r0, ip
   16c16:	bfaa      	itet	ge
   16c18:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   16c1c:	4252      	neglt	r2, r2
   16c1e:	4318      	orrge	r0, r3
   16c20:	bfbc      	itt	lt
   16c22:	40d0      	lsrlt	r0, r2
   16c24:	4318      	orrlt	r0, r3
   16c26:	4770      	bx	lr
   16c28:	f092 0f00 	teq	r2, #0
   16c2c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   16c30:	bf06      	itte	eq
   16c32:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   16c36:	3201      	addeq	r2, #1
   16c38:	3b01      	subne	r3, #1
   16c3a:	e7b5      	b.n	16ba8 <__addsf3+0x58>
   16c3c:	ea4f 0341 	mov.w	r3, r1, lsl #1
   16c40:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   16c44:	bf18      	it	ne
   16c46:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   16c4a:	d021      	beq.n	16c90 <__addsf3+0x140>
   16c4c:	ea92 0f03 	teq	r2, r3
   16c50:	d004      	beq.n	16c5c <__addsf3+0x10c>
   16c52:	f092 0f00 	teq	r2, #0
   16c56:	bf08      	it	eq
   16c58:	4608      	moveq	r0, r1
   16c5a:	4770      	bx	lr
   16c5c:	ea90 0f01 	teq	r0, r1
   16c60:	bf1c      	itt	ne
   16c62:	2000      	movne	r0, #0
   16c64:	4770      	bxne	lr
   16c66:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   16c6a:	d104      	bne.n	16c76 <__addsf3+0x126>
   16c6c:	0040      	lsls	r0, r0, #1
   16c6e:	bf28      	it	cs
   16c70:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   16c74:	4770      	bx	lr
   16c76:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   16c7a:	bf3c      	itt	cc
   16c7c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   16c80:	4770      	bxcc	lr
   16c82:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   16c86:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   16c8a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   16c8e:	4770      	bx	lr
   16c90:	ea7f 6222 	mvns.w	r2, r2, asr #24
   16c94:	bf16      	itet	ne
   16c96:	4608      	movne	r0, r1
   16c98:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   16c9c:	4601      	movne	r1, r0
   16c9e:	0242      	lsls	r2, r0, #9
   16ca0:	bf06      	itte	eq
   16ca2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   16ca6:	ea90 0f01 	teqeq	r0, r1
   16caa:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   16cae:	4770      	bx	lr

00016cb0 <__aeabi_ui2f>:
   16cb0:	f04f 0300 	mov.w	r3, #0
   16cb4:	e004      	b.n	16cc0 <__aeabi_i2f+0x8>
   16cb6:	bf00      	nop

00016cb8 <__aeabi_i2f>:
   16cb8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   16cbc:	bf48      	it	mi
   16cbe:	4240      	negmi	r0, r0
   16cc0:	ea5f 0c00 	movs.w	ip, r0
   16cc4:	bf08      	it	eq
   16cc6:	4770      	bxeq	lr
   16cc8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   16ccc:	4601      	mov	r1, r0
   16cce:	f04f 0000 	mov.w	r0, #0
   16cd2:	e01c      	b.n	16d0e <__aeabi_l2f+0x2a>

00016cd4 <__aeabi_ul2f>:
   16cd4:	ea50 0201 	orrs.w	r2, r0, r1
   16cd8:	bf08      	it	eq
   16cda:	4770      	bxeq	lr
   16cdc:	f04f 0300 	mov.w	r3, #0
   16ce0:	e00a      	b.n	16cf8 <__aeabi_l2f+0x14>
   16ce2:	bf00      	nop

00016ce4 <__aeabi_l2f>:
   16ce4:	ea50 0201 	orrs.w	r2, r0, r1
   16ce8:	bf08      	it	eq
   16cea:	4770      	bxeq	lr
   16cec:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   16cf0:	d502      	bpl.n	16cf8 <__aeabi_l2f+0x14>
   16cf2:	4240      	negs	r0, r0
   16cf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   16cf8:	ea5f 0c01 	movs.w	ip, r1
   16cfc:	bf02      	ittt	eq
   16cfe:	4684      	moveq	ip, r0
   16d00:	4601      	moveq	r1, r0
   16d02:	2000      	moveq	r0, #0
   16d04:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   16d08:	bf08      	it	eq
   16d0a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   16d0e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   16d12:	fabc f28c 	clz	r2, ip
   16d16:	3a08      	subs	r2, #8
   16d18:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   16d1c:	db10      	blt.n	16d40 <__aeabi_l2f+0x5c>
   16d1e:	fa01 fc02 	lsl.w	ip, r1, r2
   16d22:	4463      	add	r3, ip
   16d24:	fa00 fc02 	lsl.w	ip, r0, r2
   16d28:	f1c2 0220 	rsb	r2, r2, #32
   16d2c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   16d30:	fa20 f202 	lsr.w	r2, r0, r2
   16d34:	eb43 0002 	adc.w	r0, r3, r2
   16d38:	bf08      	it	eq
   16d3a:	f020 0001 	biceq.w	r0, r0, #1
   16d3e:	4770      	bx	lr
   16d40:	f102 0220 	add.w	r2, r2, #32
   16d44:	fa01 fc02 	lsl.w	ip, r1, r2
   16d48:	f1c2 0220 	rsb	r2, r2, #32
   16d4c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   16d50:	fa21 f202 	lsr.w	r2, r1, r2
   16d54:	eb43 0002 	adc.w	r0, r3, r2
   16d58:	bf08      	it	eq
   16d5a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   16d5e:	4770      	bx	lr

00016d60 <__aeabi_fmul>:
   16d60:	f04f 0cff 	mov.w	ip, #255	; 0xff
   16d64:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   16d68:	bf1e      	ittt	ne
   16d6a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   16d6e:	ea92 0f0c 	teqne	r2, ip
   16d72:	ea93 0f0c 	teqne	r3, ip
   16d76:	d06f      	beq.n	16e58 <__aeabi_fmul+0xf8>
   16d78:	441a      	add	r2, r3
   16d7a:	ea80 0c01 	eor.w	ip, r0, r1
   16d7e:	0240      	lsls	r0, r0, #9
   16d80:	bf18      	it	ne
   16d82:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   16d86:	d01e      	beq.n	16dc6 <__aeabi_fmul+0x66>
   16d88:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   16d8c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   16d90:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   16d94:	fba0 3101 	umull	r3, r1, r0, r1
   16d98:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   16d9c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   16da0:	bf3e      	ittt	cc
   16da2:	0049      	lslcc	r1, r1, #1
   16da4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   16da8:	005b      	lslcc	r3, r3, #1
   16daa:	ea40 0001 	orr.w	r0, r0, r1
   16dae:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   16db2:	2afd      	cmp	r2, #253	; 0xfd
   16db4:	d81d      	bhi.n	16df2 <__aeabi_fmul+0x92>
   16db6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   16dba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   16dbe:	bf08      	it	eq
   16dc0:	f020 0001 	biceq.w	r0, r0, #1
   16dc4:	4770      	bx	lr
   16dc6:	f090 0f00 	teq	r0, #0
   16dca:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   16dce:	bf08      	it	eq
   16dd0:	0249      	lsleq	r1, r1, #9
   16dd2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   16dd6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   16dda:	3a7f      	subs	r2, #127	; 0x7f
   16ddc:	bfc2      	ittt	gt
   16dde:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   16de2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   16de6:	4770      	bxgt	lr
   16de8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   16dec:	f04f 0300 	mov.w	r3, #0
   16df0:	3a01      	subs	r2, #1
   16df2:	dc5d      	bgt.n	16eb0 <__aeabi_fmul+0x150>
   16df4:	f112 0f19 	cmn.w	r2, #25
   16df8:	bfdc      	itt	le
   16dfa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   16dfe:	4770      	bxle	lr
   16e00:	f1c2 0200 	rsb	r2, r2, #0
   16e04:	0041      	lsls	r1, r0, #1
   16e06:	fa21 f102 	lsr.w	r1, r1, r2
   16e0a:	f1c2 0220 	rsb	r2, r2, #32
   16e0e:	fa00 fc02 	lsl.w	ip, r0, r2
   16e12:	ea5f 0031 	movs.w	r0, r1, rrx
   16e16:	f140 0000 	adc.w	r0, r0, #0
   16e1a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   16e1e:	bf08      	it	eq
   16e20:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   16e24:	4770      	bx	lr
   16e26:	f092 0f00 	teq	r2, #0
   16e2a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   16e2e:	bf02      	ittt	eq
   16e30:	0040      	lsleq	r0, r0, #1
   16e32:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   16e36:	3a01      	subeq	r2, #1
   16e38:	d0f9      	beq.n	16e2e <__aeabi_fmul+0xce>
   16e3a:	ea40 000c 	orr.w	r0, r0, ip
   16e3e:	f093 0f00 	teq	r3, #0
   16e42:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   16e46:	bf02      	ittt	eq
   16e48:	0049      	lsleq	r1, r1, #1
   16e4a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   16e4e:	3b01      	subeq	r3, #1
   16e50:	d0f9      	beq.n	16e46 <__aeabi_fmul+0xe6>
   16e52:	ea41 010c 	orr.w	r1, r1, ip
   16e56:	e78f      	b.n	16d78 <__aeabi_fmul+0x18>
   16e58:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   16e5c:	ea92 0f0c 	teq	r2, ip
   16e60:	bf18      	it	ne
   16e62:	ea93 0f0c 	teqne	r3, ip
   16e66:	d00a      	beq.n	16e7e <__aeabi_fmul+0x11e>
   16e68:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   16e6c:	bf18      	it	ne
   16e6e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   16e72:	d1d8      	bne.n	16e26 <__aeabi_fmul+0xc6>
   16e74:	ea80 0001 	eor.w	r0, r0, r1
   16e78:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   16e7c:	4770      	bx	lr
   16e7e:	f090 0f00 	teq	r0, #0
   16e82:	bf17      	itett	ne
   16e84:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   16e88:	4608      	moveq	r0, r1
   16e8a:	f091 0f00 	teqne	r1, #0
   16e8e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   16e92:	d014      	beq.n	16ebe <__aeabi_fmul+0x15e>
   16e94:	ea92 0f0c 	teq	r2, ip
   16e98:	d101      	bne.n	16e9e <__aeabi_fmul+0x13e>
   16e9a:	0242      	lsls	r2, r0, #9
   16e9c:	d10f      	bne.n	16ebe <__aeabi_fmul+0x15e>
   16e9e:	ea93 0f0c 	teq	r3, ip
   16ea2:	d103      	bne.n	16eac <__aeabi_fmul+0x14c>
   16ea4:	024b      	lsls	r3, r1, #9
   16ea6:	bf18      	it	ne
   16ea8:	4608      	movne	r0, r1
   16eaa:	d108      	bne.n	16ebe <__aeabi_fmul+0x15e>
   16eac:	ea80 0001 	eor.w	r0, r0, r1
   16eb0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   16eb4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   16eb8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   16ebc:	4770      	bx	lr
   16ebe:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   16ec2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   16ec6:	4770      	bx	lr

00016ec8 <__aeabi_fdiv>:
   16ec8:	f04f 0cff 	mov.w	ip, #255	; 0xff
   16ecc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   16ed0:	bf1e      	ittt	ne
   16ed2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   16ed6:	ea92 0f0c 	teqne	r2, ip
   16eda:	ea93 0f0c 	teqne	r3, ip
   16ede:	d069      	beq.n	16fb4 <__aeabi_fdiv+0xec>
   16ee0:	eba2 0203 	sub.w	r2, r2, r3
   16ee4:	ea80 0c01 	eor.w	ip, r0, r1
   16ee8:	0249      	lsls	r1, r1, #9
   16eea:	ea4f 2040 	mov.w	r0, r0, lsl #9
   16eee:	d037      	beq.n	16f60 <__aeabi_fdiv+0x98>
   16ef0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   16ef4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   16ef8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   16efc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   16f00:	428b      	cmp	r3, r1
   16f02:	bf38      	it	cc
   16f04:	005b      	lslcc	r3, r3, #1
   16f06:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   16f0a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   16f0e:	428b      	cmp	r3, r1
   16f10:	bf24      	itt	cs
   16f12:	1a5b      	subcs	r3, r3, r1
   16f14:	ea40 000c 	orrcs.w	r0, r0, ip
   16f18:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   16f1c:	bf24      	itt	cs
   16f1e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   16f22:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   16f26:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   16f2a:	bf24      	itt	cs
   16f2c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   16f30:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   16f34:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   16f38:	bf24      	itt	cs
   16f3a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   16f3e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   16f42:	011b      	lsls	r3, r3, #4
   16f44:	bf18      	it	ne
   16f46:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   16f4a:	d1e0      	bne.n	16f0e <__aeabi_fdiv+0x46>
   16f4c:	2afd      	cmp	r2, #253	; 0xfd
   16f4e:	f63f af50 	bhi.w	16df2 <__aeabi_fmul+0x92>
   16f52:	428b      	cmp	r3, r1
   16f54:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   16f58:	bf08      	it	eq
   16f5a:	f020 0001 	biceq.w	r0, r0, #1
   16f5e:	4770      	bx	lr
   16f60:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   16f64:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   16f68:	327f      	adds	r2, #127	; 0x7f
   16f6a:	bfc2      	ittt	gt
   16f6c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   16f70:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   16f74:	4770      	bxgt	lr
   16f76:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   16f7a:	f04f 0300 	mov.w	r3, #0
   16f7e:	3a01      	subs	r2, #1
   16f80:	e737      	b.n	16df2 <__aeabi_fmul+0x92>
   16f82:	f092 0f00 	teq	r2, #0
   16f86:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   16f8a:	bf02      	ittt	eq
   16f8c:	0040      	lsleq	r0, r0, #1
   16f8e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   16f92:	3a01      	subeq	r2, #1
   16f94:	d0f9      	beq.n	16f8a <__aeabi_fdiv+0xc2>
   16f96:	ea40 000c 	orr.w	r0, r0, ip
   16f9a:	f093 0f00 	teq	r3, #0
   16f9e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   16fa2:	bf02      	ittt	eq
   16fa4:	0049      	lsleq	r1, r1, #1
   16fa6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   16faa:	3b01      	subeq	r3, #1
   16fac:	d0f9      	beq.n	16fa2 <__aeabi_fdiv+0xda>
   16fae:	ea41 010c 	orr.w	r1, r1, ip
   16fb2:	e795      	b.n	16ee0 <__aeabi_fdiv+0x18>
   16fb4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   16fb8:	ea92 0f0c 	teq	r2, ip
   16fbc:	d108      	bne.n	16fd0 <__aeabi_fdiv+0x108>
   16fbe:	0242      	lsls	r2, r0, #9
   16fc0:	f47f af7d 	bne.w	16ebe <__aeabi_fmul+0x15e>
   16fc4:	ea93 0f0c 	teq	r3, ip
   16fc8:	f47f af70 	bne.w	16eac <__aeabi_fmul+0x14c>
   16fcc:	4608      	mov	r0, r1
   16fce:	e776      	b.n	16ebe <__aeabi_fmul+0x15e>
   16fd0:	ea93 0f0c 	teq	r3, ip
   16fd4:	d104      	bne.n	16fe0 <__aeabi_fdiv+0x118>
   16fd6:	024b      	lsls	r3, r1, #9
   16fd8:	f43f af4c 	beq.w	16e74 <__aeabi_fmul+0x114>
   16fdc:	4608      	mov	r0, r1
   16fde:	e76e      	b.n	16ebe <__aeabi_fmul+0x15e>
   16fe0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   16fe4:	bf18      	it	ne
   16fe6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   16fea:	d1ca      	bne.n	16f82 <__aeabi_fdiv+0xba>
   16fec:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   16ff0:	f47f af5c 	bne.w	16eac <__aeabi_fmul+0x14c>
   16ff4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   16ff8:	f47f af3c 	bne.w	16e74 <__aeabi_fmul+0x114>
   16ffc:	e75f      	b.n	16ebe <__aeabi_fmul+0x15e>
   16ffe:	bf00      	nop

00017000 <__gesf2>:
   17000:	f04f 3cff 	mov.w	ip, #4294967295
   17004:	e006      	b.n	17014 <__cmpsf2+0x4>
   17006:	bf00      	nop

00017008 <__lesf2>:
   17008:	f04f 0c01 	mov.w	ip, #1
   1700c:	e002      	b.n	17014 <__cmpsf2+0x4>
   1700e:	bf00      	nop

00017010 <__cmpsf2>:
   17010:	f04f 0c01 	mov.w	ip, #1
   17014:	f84d cd04 	str.w	ip, [sp, #-4]!
   17018:	ea4f 0240 	mov.w	r2, r0, lsl #1
   1701c:	ea4f 0341 	mov.w	r3, r1, lsl #1
   17020:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   17024:	bf18      	it	ne
   17026:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1702a:	d011      	beq.n	17050 <__cmpsf2+0x40>
   1702c:	b001      	add	sp, #4
   1702e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   17032:	bf18      	it	ne
   17034:	ea90 0f01 	teqne	r0, r1
   17038:	bf58      	it	pl
   1703a:	ebb2 0003 	subspl.w	r0, r2, r3
   1703e:	bf88      	it	hi
   17040:	17c8      	asrhi	r0, r1, #31
   17042:	bf38      	it	cc
   17044:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   17048:	bf18      	it	ne
   1704a:	f040 0001 	orrne.w	r0, r0, #1
   1704e:	4770      	bx	lr
   17050:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   17054:	d102      	bne.n	1705c <__cmpsf2+0x4c>
   17056:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   1705a:	d105      	bne.n	17068 <__cmpsf2+0x58>
   1705c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   17060:	d1e4      	bne.n	1702c <__cmpsf2+0x1c>
   17062:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   17066:	d0e1      	beq.n	1702c <__cmpsf2+0x1c>
   17068:	f85d 0b04 	ldr.w	r0, [sp], #4
   1706c:	4770      	bx	lr
   1706e:	bf00      	nop

00017070 <__aeabi_cfrcmple>:
   17070:	4684      	mov	ip, r0
   17072:	4608      	mov	r0, r1
   17074:	4661      	mov	r1, ip
   17076:	e7ff      	b.n	17078 <__aeabi_cfcmpeq>

00017078 <__aeabi_cfcmpeq>:
   17078:	b50f      	push	{r0, r1, r2, r3, lr}
   1707a:	f7ff ffc9 	bl	17010 <__cmpsf2>
   1707e:	2800      	cmp	r0, #0
   17080:	bf48      	it	mi
   17082:	f110 0f00 	cmnmi.w	r0, #0
   17086:	bd0f      	pop	{r0, r1, r2, r3, pc}

00017088 <__aeabi_fcmpeq>:
   17088:	f84d ed08 	str.w	lr, [sp, #-8]!
   1708c:	f7ff fff4 	bl	17078 <__aeabi_cfcmpeq>
   17090:	bf0c      	ite	eq
   17092:	2001      	moveq	r0, #1
   17094:	2000      	movne	r0, #0
   17096:	f85d fb08 	ldr.w	pc, [sp], #8
   1709a:	bf00      	nop

0001709c <__aeabi_fcmplt>:
   1709c:	f84d ed08 	str.w	lr, [sp, #-8]!
   170a0:	f7ff ffea 	bl	17078 <__aeabi_cfcmpeq>
   170a4:	bf34      	ite	cc
   170a6:	2001      	movcc	r0, #1
   170a8:	2000      	movcs	r0, #0
   170aa:	f85d fb08 	ldr.w	pc, [sp], #8
   170ae:	bf00      	nop

000170b0 <__aeabi_fcmple>:
   170b0:	f84d ed08 	str.w	lr, [sp, #-8]!
   170b4:	f7ff ffe0 	bl	17078 <__aeabi_cfcmpeq>
   170b8:	bf94      	ite	ls
   170ba:	2001      	movls	r0, #1
   170bc:	2000      	movhi	r0, #0
   170be:	f85d fb08 	ldr.w	pc, [sp], #8
   170c2:	bf00      	nop

000170c4 <__aeabi_fcmpge>:
   170c4:	f84d ed08 	str.w	lr, [sp, #-8]!
   170c8:	f7ff ffd2 	bl	17070 <__aeabi_cfrcmple>
   170cc:	bf94      	ite	ls
   170ce:	2001      	movls	r0, #1
   170d0:	2000      	movhi	r0, #0
   170d2:	f85d fb08 	ldr.w	pc, [sp], #8
   170d6:	bf00      	nop

000170d8 <__aeabi_fcmpgt>:
   170d8:	f84d ed08 	str.w	lr, [sp, #-8]!
   170dc:	f7ff ffc8 	bl	17070 <__aeabi_cfrcmple>
   170e0:	bf34      	ite	cc
   170e2:	2001      	movcc	r0, #1
   170e4:	2000      	movcs	r0, #0
   170e6:	f85d fb08 	ldr.w	pc, [sp], #8
   170ea:	bf00      	nop

000170ec <__aeabi_f2iz>:
   170ec:	ea4f 0240 	mov.w	r2, r0, lsl #1
   170f0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   170f4:	d30f      	bcc.n	17116 <__aeabi_f2iz+0x2a>
   170f6:	f04f 039e 	mov.w	r3, #158	; 0x9e
   170fa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   170fe:	d90d      	bls.n	1711c <__aeabi_f2iz+0x30>
   17100:	ea4f 2300 	mov.w	r3, r0, lsl #8
   17104:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   17108:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   1710c:	fa23 f002 	lsr.w	r0, r3, r2
   17110:	bf18      	it	ne
   17112:	4240      	negne	r0, r0
   17114:	4770      	bx	lr
   17116:	f04f 0000 	mov.w	r0, #0
   1711a:	4770      	bx	lr
   1711c:	f112 0f61 	cmn.w	r2, #97	; 0x61
   17120:	d101      	bne.n	17126 <__aeabi_f2iz+0x3a>
   17122:	0242      	lsls	r2, r0, #9
   17124:	d105      	bne.n	17132 <__aeabi_f2iz+0x46>
   17126:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   1712a:	bf08      	it	eq
   1712c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   17130:	4770      	bx	lr
   17132:	f04f 0000 	mov.w	r0, #0
   17136:	4770      	bx	lr

00017138 <memcpy>:
   17138:	2a0f      	cmp	r2, #15
   1713a:	b4f0      	push	{r4, r5, r6, r7}
   1713c:	d945      	bls.n	171ca <memcpy+0x92>
   1713e:	ea40 0301 	orr.w	r3, r0, r1
   17142:	079b      	lsls	r3, r3, #30
   17144:	d145      	bne.n	171d2 <memcpy+0x9a>
   17146:	f1a2 0710 	sub.w	r7, r2, #16
   1714a:	460c      	mov	r4, r1
   1714c:	4603      	mov	r3, r0
   1714e:	093f      	lsrs	r7, r7, #4
   17150:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   17154:	3610      	adds	r6, #16
   17156:	6825      	ldr	r5, [r4, #0]
   17158:	3310      	adds	r3, #16
   1715a:	3410      	adds	r4, #16
   1715c:	f843 5c10 	str.w	r5, [r3, #-16]
   17160:	f854 5c0c 	ldr.w	r5, [r4, #-12]
   17164:	f843 5c0c 	str.w	r5, [r3, #-12]
   17168:	f854 5c08 	ldr.w	r5, [r4, #-8]
   1716c:	f843 5c08 	str.w	r5, [r3, #-8]
   17170:	f854 5c04 	ldr.w	r5, [r4, #-4]
   17174:	f843 5c04 	str.w	r5, [r3, #-4]
   17178:	42b3      	cmp	r3, r6
   1717a:	d1ec      	bne.n	17156 <memcpy+0x1e>
   1717c:	1c7b      	adds	r3, r7, #1
   1717e:	f002 0c0f 	and.w	ip, r2, #15
   17182:	f1bc 0f03 	cmp.w	ip, #3
   17186:	ea4f 1303 	mov.w	r3, r3, lsl #4
   1718a:	4419      	add	r1, r3
   1718c:	4403      	add	r3, r0
   1718e:	d922      	bls.n	171d6 <memcpy+0x9e>
   17190:	460e      	mov	r6, r1
   17192:	461d      	mov	r5, r3
   17194:	4664      	mov	r4, ip
   17196:	f856 7b04 	ldr.w	r7, [r6], #4
   1719a:	3c04      	subs	r4, #4
   1719c:	2c03      	cmp	r4, #3
   1719e:	f845 7b04 	str.w	r7, [r5], #4
   171a2:	d8f8      	bhi.n	17196 <memcpy+0x5e>
   171a4:	f1ac 0404 	sub.w	r4, ip, #4
   171a8:	f002 0203 	and.w	r2, r2, #3
   171ac:	f024 0403 	bic.w	r4, r4, #3
   171b0:	3404      	adds	r4, #4
   171b2:	4423      	add	r3, r4
   171b4:	4421      	add	r1, r4
   171b6:	b132      	cbz	r2, 171c6 <memcpy+0x8e>
   171b8:	440a      	add	r2, r1
   171ba:	f811 4b01 	ldrb.w	r4, [r1], #1
   171be:	4291      	cmp	r1, r2
   171c0:	f803 4b01 	strb.w	r4, [r3], #1
   171c4:	d1f9      	bne.n	171ba <memcpy+0x82>
   171c6:	bcf0      	pop	{r4, r5, r6, r7}
   171c8:	4770      	bx	lr
   171ca:	4603      	mov	r3, r0
   171cc:	2a00      	cmp	r2, #0
   171ce:	d1f3      	bne.n	171b8 <memcpy+0x80>
   171d0:	e7f9      	b.n	171c6 <memcpy+0x8e>
   171d2:	4603      	mov	r3, r0
   171d4:	e7f0      	b.n	171b8 <memcpy+0x80>
   171d6:	4662      	mov	r2, ip
   171d8:	2a00      	cmp	r2, #0
   171da:	d1ed      	bne.n	171b8 <memcpy+0x80>
   171dc:	e7f3      	b.n	171c6 <memcpy+0x8e>
   171de:	bf00      	nop

000171e0 <memset>:
   171e0:	0783      	lsls	r3, r0, #30
   171e2:	b4f0      	push	{r4, r5, r6, r7}
   171e4:	d048      	beq.n	17278 <memset+0x98>
   171e6:	1e54      	subs	r4, r2, #1
   171e8:	2a00      	cmp	r2, #0
   171ea:	d043      	beq.n	17274 <memset+0x94>
   171ec:	b2cd      	uxtb	r5, r1
   171ee:	4603      	mov	r3, r0
   171f0:	e002      	b.n	171f8 <memset+0x18>
   171f2:	2c00      	cmp	r4, #0
   171f4:	d03e      	beq.n	17274 <memset+0x94>
   171f6:	4614      	mov	r4, r2
   171f8:	f803 5b01 	strb.w	r5, [r3], #1
   171fc:	f013 0f03 	tst.w	r3, #3
   17200:	f104 32ff 	add.w	r2, r4, #4294967295
   17204:	d1f5      	bne.n	171f2 <memset+0x12>
   17206:	2c03      	cmp	r4, #3
   17208:	d92d      	bls.n	17266 <memset+0x86>
   1720a:	b2cd      	uxtb	r5, r1
   1720c:	2c0f      	cmp	r4, #15
   1720e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   17212:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   17216:	d918      	bls.n	1724a <memset+0x6a>
   17218:	f1a4 0710 	sub.w	r7, r4, #16
   1721c:	f103 0610 	add.w	r6, r3, #16
   17220:	461a      	mov	r2, r3
   17222:	093f      	lsrs	r7, r7, #4
   17224:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   17228:	6015      	str	r5, [r2, #0]
   1722a:	3210      	adds	r2, #16
   1722c:	f842 5c0c 	str.w	r5, [r2, #-12]
   17230:	f842 5c08 	str.w	r5, [r2, #-8]
   17234:	f842 5c04 	str.w	r5, [r2, #-4]
   17238:	42b2      	cmp	r2, r6
   1723a:	d1f5      	bne.n	17228 <memset+0x48>
   1723c:	f004 040f 	and.w	r4, r4, #15
   17240:	3701      	adds	r7, #1
   17242:	2c03      	cmp	r4, #3
   17244:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   17248:	d90d      	bls.n	17266 <memset+0x86>
   1724a:	461e      	mov	r6, r3
   1724c:	4622      	mov	r2, r4
   1724e:	3a04      	subs	r2, #4
   17250:	f846 5b04 	str.w	r5, [r6], #4
   17254:	2a03      	cmp	r2, #3
   17256:	d8fa      	bhi.n	1724e <memset+0x6e>
   17258:	1f22      	subs	r2, r4, #4
   1725a:	f004 0403 	and.w	r4, r4, #3
   1725e:	f022 0203 	bic.w	r2, r2, #3
   17262:	3204      	adds	r2, #4
   17264:	4413      	add	r3, r2
   17266:	b12c      	cbz	r4, 17274 <memset+0x94>
   17268:	b2c9      	uxtb	r1, r1
   1726a:	441c      	add	r4, r3
   1726c:	f803 1b01 	strb.w	r1, [r3], #1
   17270:	42a3      	cmp	r3, r4
   17272:	d1fb      	bne.n	1726c <memset+0x8c>
   17274:	bcf0      	pop	{r4, r5, r6, r7}
   17276:	4770      	bx	lr
   17278:	4614      	mov	r4, r2
   1727a:	4603      	mov	r3, r0
   1727c:	e7c3      	b.n	17206 <memset+0x26>
   1727e:	bf00      	nop

00017280 <strncpy>:
   17280:	ea40 0301 	orr.w	r3, r0, r1
   17284:	079b      	lsls	r3, r3, #30
   17286:	b470      	push	{r4, r5, r6}
   17288:	d12b      	bne.n	172e2 <strncpy+0x62>
   1728a:	2a03      	cmp	r2, #3
   1728c:	bf84      	itt	hi
   1728e:	460b      	movhi	r3, r1
   17290:	4605      	movhi	r5, r0
   17292:	d926      	bls.n	172e2 <strncpy+0x62>
   17294:	4619      	mov	r1, r3
   17296:	f853 4b04 	ldr.w	r4, [r3], #4
   1729a:	f1a4 3601 	sub.w	r6, r4, #16843009	; 0x1010101
   1729e:	ea26 0604 	bic.w	r6, r6, r4
   172a2:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
   172a6:	d105      	bne.n	172b4 <strncpy+0x34>
   172a8:	3a04      	subs	r2, #4
   172aa:	f845 4b04 	str.w	r4, [r5], #4
   172ae:	2a03      	cmp	r2, #3
   172b0:	4619      	mov	r1, r3
   172b2:	d8ef      	bhi.n	17294 <strncpy+0x14>
   172b4:	b19a      	cbz	r2, 172de <strncpy+0x5e>
   172b6:	780c      	ldrb	r4, [r1, #0]
   172b8:	3a01      	subs	r2, #1
   172ba:	1c6b      	adds	r3, r5, #1
   172bc:	702c      	strb	r4, [r5, #0]
   172be:	b13c      	cbz	r4, 172d0 <strncpy+0x50>
   172c0:	b16a      	cbz	r2, 172de <strncpy+0x5e>
   172c2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   172c6:	3a01      	subs	r2, #1
   172c8:	f803 4b01 	strb.w	r4, [r3], #1
   172cc:	2c00      	cmp	r4, #0
   172ce:	d1f7      	bne.n	172c0 <strncpy+0x40>
   172d0:	b12a      	cbz	r2, 172de <strncpy+0x5e>
   172d2:	441a      	add	r2, r3
   172d4:	2100      	movs	r1, #0
   172d6:	f803 1b01 	strb.w	r1, [r3], #1
   172da:	4293      	cmp	r3, r2
   172dc:	d1fb      	bne.n	172d6 <strncpy+0x56>
   172de:	bc70      	pop	{r4, r5, r6}
   172e0:	4770      	bx	lr
   172e2:	4605      	mov	r5, r0
   172e4:	e7e6      	b.n	172b4 <strncpy+0x34>
   172e6:	bf00      	nop

000172e8 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:	

/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
   172e8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
   172ea:	e003      	b.n	172f4 <LoopCopyDataInit>

000172ec <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
   172ec:	4b0a      	ldr	r3, [pc, #40]	; (17318 <LoopFillZerobss+0x10>)
	ldr	r3, [r3, r1]
   172ee:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
   172f0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
   172f2:	3104      	adds	r1, #4

000172f4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
	ldr	r0, =_sdata
   172f4:	4809      	ldr	r0, [pc, #36]	; (1731c <LoopFillZerobss+0x14>)
	ldr	r3, =_edata
   172f6:	4b0a      	ldr	r3, [pc, #40]	; (17320 <LoopFillZerobss+0x18>)
	adds	r2, r0, r1
   172f8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
   172fa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
   172fc:	d3f6      	bcc.n	172ec <CopyDataInit>
	ldr	r2, =_sbss
   172fe:	4a09      	ldr	r2, [pc, #36]	; (17324 <LoopFillZerobss+0x1c>)
	b	LoopFillZerobss
   17300:	e002      	b.n	17308 <LoopFillZerobss>

00017302 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
	movs	r3, #0
   17302:	2300      	movs	r3, #0
	str	r3, [r2], #4
   17304:	f842 3b04 	str.w	r3, [r2], #4

00017308 <LoopFillZerobss>:
    
LoopFillZerobss:
	ldr	r3, = _ebss
   17308:	4b07      	ldr	r3, [pc, #28]	; (17328 <LoopFillZerobss+0x20>)
	cmp	r2, r3
   1730a:	429a      	cmp	r2, r3
	bcc	FillZerobss
   1730c:	d3f9      	bcc.n	17302 <FillZerobss>
/* Call the clock system intitialization function.*/
  bl  SystemInit 	
   1730e:	f7e9 f815 	bl	33c <SystemInit>
/* Call the application's entry point.*/
	bl	main
   17312:	f7fe fe9d 	bl	16050 <main>
	bx	lr    
   17316:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
   17318:	00017410 	.word	0x00017410
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4
    
LoopCopyDataInit:
	ldr	r0, =_sdata
   1731c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
   17320:	200001a0 	.word	0x200001a0
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
   17324:	200001a0 	.word	0x200001a0
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4
    
LoopFillZerobss:
	ldr	r3, = _ebss
   17328:	2000ae38 	.word	0x2000ae38

0001732c <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
   1732c:	e7fe      	b.n	1732c <ADC1_2_IRQHandler>
   1732e:	0000      	movs	r0, r0
   17330:	00000031 	.word	0x00000031
   17334:	00000032 	.word	0x00000032
   17338:	00000033 	.word	0x00000033
   1733c:	00000034 	.word	0x00000034
   17340:	00000035 	.word	0x00000035
   17344:	00000036 	.word	0x00000036
   17348:	00000037 	.word	0x00000037
   1734c:	00000038 	.word	0x00000038
   17350:	00000039 	.word	0x00000039
   17354:	00003031 	.word	0x00003031
   17358:	00003131 	.word	0x00003131
   1735c:	00003231 	.word	0x00003231
   17360:	00003331 	.word	0x00003331
   17364:	454c4449 	.word	0x454c4449
   17368:	00000000 	.word	0x00000000

0001736c <ulKernelPriority>:
   1736c:	0000007f                                ....

00017370 <heapSTRUCT_SIZE>:
   17370:	00010010                                         ..

00017372 <version>:
   17372:	3d5a0001                                         ..

00017374 <utm_east0>:
   17374:	00093d5a                                Z=..

00017378 <utm_north0>:
   17378:	005875e6                                .uX.

0001737c <climb_pgain>:
   1737c:	bcf5c28f                                ....

00017380 <climb_igain>:
   17380:	3dcccccd                                ...=

00017384 <level_gaz>:
   17384:	3e9eb852                                R..>

00017388 <nav_east0>:
   17388:	00093d5a                                Z=..

0001738c <nav_north0>:
   1738c:	005875e6                                .uX.

00017390 <nb_waypoint>:
   17390:	00000007 33323130 37363534 42413938     ....0123456789AB
   173a0:	46454443                                CDEF

000173a4 <failsafe>:
	...
   173b8:	20574246 746f6f42 20676e69 3a644924     FBW Booting $Id:
   173c8:	69616d20 2c632e6e 2e312076 30322033      main.c,v 1.3 20
   173d8:	312f3830 32322f30 3a393120 313a3134     08/10/22 19:41:1
   173e8:	61632039 20657373 20707845 000d0a24     9 casse Exp $...
   173f8:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   17408:	000d0a30 00000d0a                       0.......
