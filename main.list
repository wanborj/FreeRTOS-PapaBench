
main.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:
       0:	00 50 00 20 b1 55 00 00 f5 55 00 00 f5 55 00 00     .P. .U...U...U..
      10:	f5 55 00 00 f5 55 00 00 f5 55 00 00 00 00 00 00     .U...U...U......
	...
      2c:	89 44 00 00 f5 55 00 00 00 00 00 00 95 45 00 00     .D...U.......E..
      3c:	d1 45 00 00 f5 55 00 00 f5 55 00 00 f5 55 00 00     .E...U...U...U..
      4c:	f5 55 00 00 f5 55 00 00 f5 55 00 00 f5 55 00 00     .U...U...U...U..
      5c:	f5 55 00 00 f5 55 00 00 f5 55 00 00 f5 55 00 00     .U...U...U...U..
      6c:	f5 55 00 00 f5 55 00 00 f5 55 00 00 f5 55 00 00     .U...U...U...U..
      7c:	f5 55 00 00 f5 55 00 00 f5 55 00 00 f5 55 00 00     .U...U...U...U..
      8c:	f5 55 00 00 f5 55 00 00 f5 55 00 00 f5 55 00 00     .U...U...U...U..
      9c:	f5 55 00 00 f5 55 00 00 f5 55 00 00 f5 55 00 00     .U...U...U...U..
      ac:	f5 55 00 00 f5 55 00 00 f5 55 00 00 f5 55 00 00     .U...U...U...U..
      bc:	f5 55 00 00 f5 55 00 00 f5 55 00 00 f5 55 00 00     .U...U...U...U..
      cc:	f5 55 00 00 f5 55 00 00 f5 55 00 00 b5 48 00 00     .U...U...U...H..
      dc:	f5 55 00 00 f5 55 00 00 f5 55 00 00 f5 55 00 00     .U...U...U...U..
	...
     108:	5f f8 08 f1                                         _...

0000010c <__get_PSP>:
 * Return the actual process stack pointer
 */
uint32_t __get_PSP(void) __attribute__( ( naked ) );
uint32_t __get_PSP(void)
{
  uint32_t result=0;
     10c:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, psp\n\t"
     10e:	f3ef 8309 	mrs	r3, PSP
     112:	4618      	mov	r0, r3
     114:	4770      	bx	lr
     116:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     118:	4623      	mov	r3, r4
}
     11a:	4618      	mov	r0, r3

0000011c <__set_PSP>:
 * Assign the value ProcessStackPointer to the MSP
 * (process stack pointer) Cortex processor register
 */
void __set_PSP(uint32_t topOfProcStack) __attribute__( ( naked ) );
void __set_PSP(uint32_t topOfProcStack)
{
     11c:	4603      	mov	r3, r0
  __ASM volatile ("MSR psp, %0\n\t"
     11e:	f383 8809 	msr	PSP, r3
     122:	4770      	bx	lr

00000124 <__get_MSP>:
 * Cortex processor register
 */
uint32_t __get_MSP(void) __attribute__( ( naked ) );
uint32_t __get_MSP(void)
{
  uint32_t result=0;
     124:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, msp\n\t"
     126:	f3ef 8308 	mrs	r3, MSP
     12a:	4618      	mov	r0, r3
     12c:	4770      	bx	lr
     12e:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     130:	4623      	mov	r3, r4
}
     132:	4618      	mov	r0, r3

00000134 <__set_MSP>:
 * Assign the value mainStackPointer to the MSP
 * (main stack pointer) Cortex processor register
 */
void __set_MSP(uint32_t topOfMainStack) __attribute__( ( naked ) );
void __set_MSP(uint32_t topOfMainStack)
{
     134:	4603      	mov	r3, r0
  __ASM volatile ("MSR msp, %0\n\t"
     136:	f383 8808 	msr	MSP, r3
     13a:	4770      	bx	lr

0000013c <__get_BASEPRI>:
 * @return BasePriority
 *
 * Return the content of the base priority register
 */
uint32_t __get_BASEPRI(void)
{
     13c:	b480      	push	{r7}
     13e:	b083      	sub	sp, #12
     140:	af00      	add	r7, sp, #0
  uint32_t result=0;
     142:	2300      	movs	r3, #0
     144:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
     146:	f3ef 8312 	mrs	r3, BASEPRI_MAX
     14a:	607b      	str	r3, [r7, #4]
  return(result);
     14c:	687b      	ldr	r3, [r7, #4]
}
     14e:	4618      	mov	r0, r3
     150:	370c      	adds	r7, #12
     152:	46bd      	mov	sp, r7
     154:	f85d 7b04 	ldr.w	r7, [sp], #4
     158:	4770      	bx	lr
     15a:	bf00      	nop

0000015c <__set_BASEPRI>:
 * @param  basePri  BasePriority
 *
 * Set the base priority register
 */
void __set_BASEPRI(uint32_t value)
{
     15c:	b480      	push	{r7}
     15e:	b083      	sub	sp, #12
     160:	af00      	add	r7, sp, #0
     162:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) );
     164:	687b      	ldr	r3, [r7, #4]
     166:	f383 8811 	msr	BASEPRI, r3
}
     16a:	370c      	adds	r7, #12
     16c:	46bd      	mov	sp, r7
     16e:	f85d 7b04 	ldr.w	r7, [sp], #4
     172:	4770      	bx	lr

00000174 <__get_PRIMASK>:
 * @return PriMask
 *
 * Return state of the priority mask bit from the priority mask register
 */
uint32_t __get_PRIMASK(void)
{
     174:	b480      	push	{r7}
     176:	b083      	sub	sp, #12
     178:	af00      	add	r7, sp, #0
  uint32_t result=0;
     17a:	2300      	movs	r3, #0
     17c:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     17e:	f3ef 8310 	mrs	r3, PRIMASK
     182:	607b      	str	r3, [r7, #4]
  return(result);
     184:	687b      	ldr	r3, [r7, #4]
}
     186:	4618      	mov	r0, r3
     188:	370c      	adds	r7, #12
     18a:	46bd      	mov	sp, r7
     18c:	f85d 7b04 	ldr.w	r7, [sp], #4
     190:	4770      	bx	lr
     192:	bf00      	nop

00000194 <__set_PRIMASK>:
 * @param  priMask  PriMask
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
     194:	b480      	push	{r7}
     196:	b083      	sub	sp, #12
     198:	af00      	add	r7, sp, #0
     19a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	f383 8810 	msr	PRIMASK, r3
}
     1a2:	370c      	adds	r7, #12
     1a4:	46bd      	mov	sp, r7
     1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
     1aa:	4770      	bx	lr

000001ac <__get_FAULTMASK>:
 * @return FaultMask
 *
 * Return the content of the fault mask register
 */
uint32_t __get_FAULTMASK(void)
{
     1ac:	b480      	push	{r7}
     1ae:	b083      	sub	sp, #12
     1b0:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1b2:	2300      	movs	r3, #0
     1b4:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
     1b6:	f3ef 8313 	mrs	r3, FAULTMASK
     1ba:	607b      	str	r3, [r7, #4]
  return(result);
     1bc:	687b      	ldr	r3, [r7, #4]
}
     1be:	4618      	mov	r0, r3
     1c0:	370c      	adds	r7, #12
     1c2:	46bd      	mov	sp, r7
     1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     1c8:	4770      	bx	lr
     1ca:	bf00      	nop

000001cc <__set_FAULTMASK>:
 * @param  faultMask  faultMask value
 *
 * Set the fault mask register
 */
void __set_FAULTMASK(uint32_t faultMask)
{
     1cc:	b480      	push	{r7}
     1ce:	b083      	sub	sp, #12
     1d0:	af00      	add	r7, sp, #0
     1d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) );
     1d4:	687b      	ldr	r3, [r7, #4]
     1d6:	f383 8813 	msr	FAULTMASK, r3
}
     1da:	370c      	adds	r7, #12
     1dc:	46bd      	mov	sp, r7
     1de:	f85d 7b04 	ldr.w	r7, [sp], #4
     1e2:	4770      	bx	lr

000001e4 <__get_CONTROL>:
*  @return Control value
 *
 * Return the content of the control register
 */
uint32_t __get_CONTROL(void)
{
     1e4:	b480      	push	{r7}
     1e6:	b083      	sub	sp, #12
     1e8:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1ea:	2300      	movs	r3, #0
     1ec:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, control" : "=r" (result) );
     1ee:	f3ef 8314 	mrs	r3, CONTROL
     1f2:	607b      	str	r3, [r7, #4]
  return(result);
     1f4:	687b      	ldr	r3, [r7, #4]
}
     1f6:	4618      	mov	r0, r3
     1f8:	370c      	adds	r7, #12
     1fa:	46bd      	mov	sp, r7
     1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     200:	4770      	bx	lr
     202:	bf00      	nop

00000204 <__set_CONTROL>:
 * @param  control  Control value
 *
 * Set the control register
 */
void __set_CONTROL(uint32_t control)
{
     204:	b480      	push	{r7}
     206:	b083      	sub	sp, #12
     208:	af00      	add	r7, sp, #0
     20a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR control, %0" : : "r" (control) );
     20c:	687b      	ldr	r3, [r7, #4]
     20e:	f383 8814 	msr	CONTROL, r3
}
     212:	370c      	adds	r7, #12
     214:	46bd      	mov	sp, r7
     216:	f85d 7b04 	ldr.w	r7, [sp], #4
     21a:	4770      	bx	lr

0000021c <__REV>:
 * @return        reversed value
 *
 * Reverse byte order in integer value
 */
uint32_t __REV(uint32_t value)
{
     21c:	b480      	push	{r7}
     21e:	b085      	sub	sp, #20
     220:	af00      	add	r7, sp, #0
     222:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     224:	2300      	movs	r3, #0
     226:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
     228:	687b      	ldr	r3, [r7, #4]
     22a:	ba1b      	rev	r3, r3
     22c:	60fb      	str	r3, [r7, #12]
  return(result);
     22e:	68fb      	ldr	r3, [r7, #12]
}
     230:	4618      	mov	r0, r3
     232:	3714      	adds	r7, #20
     234:	46bd      	mov	sp, r7
     236:	f85d 7b04 	ldr.w	r7, [sp], #4
     23a:	4770      	bx	lr

0000023c <__REV16>:
 * @return        reversed value
 *
 * Reverse byte order in unsigned short value
 */
uint32_t __REV16(uint16_t value)
{
     23c:	b480      	push	{r7}
     23e:	b085      	sub	sp, #20
     240:	af00      	add	r7, sp, #0
     242:	4603      	mov	r3, r0
     244:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     246:	2300      	movs	r3, #0
     248:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
     24a:	88fb      	ldrh	r3, [r7, #6]
     24c:	ba5b      	rev16	r3, r3
     24e:	60fb      	str	r3, [r7, #12]
  return(result);
     250:	68fb      	ldr	r3, [r7, #12]
}
     252:	4618      	mov	r0, r3
     254:	3714      	adds	r7, #20
     256:	46bd      	mov	sp, r7
     258:	f85d 7b04 	ldr.w	r7, [sp], #4
     25c:	4770      	bx	lr
     25e:	bf00      	nop

00000260 <__REVSH>:
 * @return        reversed value
 *
 * Reverse byte order in signed short value with sign extension to integer
 */
int32_t __REVSH(int16_t value)
{
     260:	b480      	push	{r7}
     262:	b085      	sub	sp, #20
     264:	af00      	add	r7, sp, #0
     266:	4603      	mov	r3, r0
     268:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     26a:	2300      	movs	r3, #0
     26c:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
     26e:	88fb      	ldrh	r3, [r7, #6]
     270:	badb      	revsh	r3, r3
     272:	60fb      	str	r3, [r7, #12]
  return(result);
     274:	68fb      	ldr	r3, [r7, #12]
}
     276:	4618      	mov	r0, r3
     278:	3714      	adds	r7, #20
     27a:	46bd      	mov	sp, r7
     27c:	f85d 7b04 	ldr.w	r7, [sp], #4
     280:	4770      	bx	lr
     282:	bf00      	nop

00000284 <__RBIT>:
 * @return        reversed value
 *
 * Reverse bit order of value
 */
uint32_t __RBIT(uint32_t value)
{
     284:	b480      	push	{r7}
     286:	b085      	sub	sp, #20
     288:	af00      	add	r7, sp, #0
     28a:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     28c:	2300      	movs	r3, #0
     28e:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
     290:	687b      	ldr	r3, [r7, #4]
     292:	fa93 f3a3 	rbit	r3, r3
     296:	60fb      	str	r3, [r7, #12]
   return(result);
     298:	68fb      	ldr	r3, [r7, #12]
}
     29a:	4618      	mov	r0, r3
     29c:	3714      	adds	r7, #20
     29e:	46bd      	mov	sp, r7
     2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
     2a4:	4770      	bx	lr
     2a6:	bf00      	nop

000002a8 <__LDREXB>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 8 bit value
 */
uint8_t __LDREXB(uint8_t *addr)
{
     2a8:	b480      	push	{r7}
     2aa:	b085      	sub	sp, #20
     2ac:	af00      	add	r7, sp, #0
     2ae:	6078      	str	r0, [r7, #4]
    uint8_t result=0;
     2b0:	2300      	movs	r3, #0
     2b2:	73fb      	strb	r3, [r7, #15]

   __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) );
     2b4:	687b      	ldr	r3, [r7, #4]
     2b6:	e8d3 3f4f 	ldrexb	r3, [r3]
     2ba:	73fb      	strb	r3, [r7, #15]
   return(result);
     2bc:	7bfb      	ldrb	r3, [r7, #15]
}
     2be:	4618      	mov	r0, r3
     2c0:	3714      	adds	r7, #20
     2c2:	46bd      	mov	sp, r7
     2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     2c8:	4770      	bx	lr
     2ca:	bf00      	nop

000002cc <__LDREXH>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 16 bit values
 */
uint16_t __LDREXH(uint16_t *addr)
{
     2cc:	b480      	push	{r7}
     2ce:	b085      	sub	sp, #20
     2d0:	af00      	add	r7, sp, #0
     2d2:	6078      	str	r0, [r7, #4]
    uint16_t result=0;
     2d4:	2300      	movs	r3, #0
     2d6:	81fb      	strh	r3, [r7, #14]

   __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) );
     2d8:	687b      	ldr	r3, [r7, #4]
     2da:	e8d3 3f5f 	ldrexh	r3, [r3]
     2de:	81fb      	strh	r3, [r7, #14]
   return(result);
     2e0:	89fb      	ldrh	r3, [r7, #14]
}
     2e2:	4618      	mov	r0, r3
     2e4:	3714      	adds	r7, #20
     2e6:	46bd      	mov	sp, r7
     2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
     2ec:	4770      	bx	lr
     2ee:	bf00      	nop

000002f0 <__LDREXW>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 32 bit values
 */
uint32_t __LDREXW(uint32_t *addr)
{
     2f0:	b480      	push	{r7}
     2f2:	b085      	sub	sp, #20
     2f4:	af00      	add	r7, sp, #0
     2f6:	6078      	str	r0, [r7, #4]
    uint32_t result=0;
     2f8:	2300      	movs	r3, #0
     2fa:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     2fc:	687b      	ldr	r3, [r7, #4]
     2fe:	e853 3f00 	ldrex	r3, [r3]
     302:	60fb      	str	r3, [r7, #12]
   return(result);
     304:	68fb      	ldr	r3, [r7, #12]
}
     306:	4618      	mov	r0, r3
     308:	3714      	adds	r7, #20
     30a:	46bd      	mov	sp, r7
     30c:	f85d 7b04 	ldr.w	r7, [sp], #4
     310:	4770      	bx	lr
     312:	bf00      	nop

00000314 <__STREXW>:
 * @return        successful / failed
 *
 * Exclusive STR command for 32 bit values
 */
uint32_t __STREXW(uint32_t value, uint32_t *addr)
{
     314:	b480      	push	{r7}
     316:	b085      	sub	sp, #20
     318:	af00      	add	r7, sp, #0
     31a:	6078      	str	r0, [r7, #4]
     31c:	6039      	str	r1, [r7, #0]
   uint32_t result=0;
     31e:	2300      	movs	r3, #0
     320:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
     322:	683b      	ldr	r3, [r7, #0]
     324:	687a      	ldr	r2, [r7, #4]
     326:	e843 2300 	strex	r3, r2, [r3]
     32a:	60fb      	str	r3, [r7, #12]
   return(result);
     32c:	68fb      	ldr	r3, [r7, #12]
}
     32e:	4618      	mov	r0, r3
     330:	3714      	adds	r7, #20
     332:	46bd      	mov	sp, r7
     334:	f85d 7b04 	ldr.w	r7, [sp], #4
     338:	4770      	bx	lr
     33a:	bf00      	nop

0000033c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
     33c:	b580      	push	{r7, lr}
     33e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     344:	f2c4 0302 	movt	r3, #16386	; 0x4002
     348:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     34c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     350:	6812      	ldr	r2, [r2, #0]
     352:	f042 0201 	orr.w	r2, r2, #1
     356:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     358:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     35c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     360:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     364:	f2c4 0302 	movt	r3, #16386	; 0x4002
     368:	6859      	ldr	r1, [r3, #4]
     36a:	2300      	movs	r3, #0
     36c:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     370:	400b      	ands	r3, r1
     372:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     378:	f2c4 0302 	movt	r3, #16386	; 0x4002
     37c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     380:	f2c4 0202 	movt	r2, #16386	; 0x4002
     384:	6812      	ldr	r2, [r2, #0]
     386:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     38a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     38e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     394:	f2c4 0302 	movt	r3, #16386	; 0x4002
     398:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     39c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3a0:	6812      	ldr	r2, [r2, #0]
     3a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     3a6:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     3a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     3b4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3b8:	6852      	ldr	r2, [r2, #4]
     3ba:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     3be:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     3c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3c8:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     3cc:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
     3ce:	f000 f8a7 	bl	520 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
     3d2:	f44f 436d 	mov.w	r3, #60672	; 0xed00
     3d6:	f2ce 0300 	movt	r3, #57344	; 0xe000
     3da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
     3de:	609a      	str	r2, [r3, #8]
#endif
}
     3e0:	bd80      	pop	{r7, pc}
     3e2:	bf00      	nop

000003e4 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
     3e4:	b480      	push	{r7}
     3e6:	b085      	sub	sp, #20
     3e8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
     3ea:	2300      	movs	r3, #0
     3ec:	60fb      	str	r3, [r7, #12]
     3ee:	2300      	movs	r3, #0
     3f0:	60bb      	str	r3, [r7, #8]
     3f2:	2300      	movs	r3, #0
     3f4:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
     3f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3fe:	685b      	ldr	r3, [r3, #4]
     400:	f003 030c 	and.w	r3, r3, #12
     404:	60fb      	str	r3, [r7, #12]

  switch (tmp)
     406:	68fb      	ldr	r3, [r7, #12]
     408:	2b04      	cmp	r3, #4
     40a:	d00d      	beq.n	428 <SystemCoreClockUpdate+0x44>
     40c:	2b08      	cmp	r3, #8
     40e:	d015      	beq.n	43c <SystemCoreClockUpdate+0x58>
     410:	2b00      	cmp	r3, #0
     412:	d15b      	bne.n	4cc <SystemCoreClockUpdate+0xe8>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
     414:	f240 0300 	movw	r3, #0
     418:	f2c2 0300 	movt	r3, #8192	; 0x2000
     41c:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     420:	f2c0 027a 	movt	r2, #122	; 0x7a
     424:	601a      	str	r2, [r3, #0]
      break;
     426:	e05b      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
     428:	f240 0300 	movw	r3, #0
     42c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     430:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     434:	f2c0 027a 	movt	r2, #122	; 0x7a
     438:	601a      	str	r2, [r3, #0]
      break;
     43a:	e051      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
     43c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     440:	f2c4 0302 	movt	r3, #16386	; 0x4002
     444:	685b      	ldr	r3, [r3, #4]
     446:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     44a:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
     44c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     450:	f2c4 0302 	movt	r3, #16386	; 0x4002
     454:	685b      	ldr	r3, [r3, #4]
     456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     45a:	607b      	str	r3, [r7, #4]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     45c:	68bb      	ldr	r3, [r7, #8]
     45e:	0c9b      	lsrs	r3, r3, #18
     460:	3302      	adds	r3, #2
     462:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00)
     464:	687b      	ldr	r3, [r7, #4]
     466:	2b00      	cmp	r3, #0
     468:	d10c      	bne.n	484 <SystemCoreClockUpdate+0xa0>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
     46a:	68ba      	ldr	r2, [r7, #8]
     46c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     470:	f2c0 033d 	movt	r3, #61	; 0x3d
     474:	fb03 f202 	mul.w	r2, r3, r2
     478:	f240 0300 	movw	r3, #0
     47c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     480:	601a      	str	r2, [r3, #0]
     482:	e022      	b.n	4ca <SystemCoreClockUpdate+0xe6>
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
     484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     488:	f2c4 0302 	movt	r3, #16386	; 0x4002
     48c:	685b      	ldr	r3, [r3, #4]
     48e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     492:	2b00      	cmp	r3, #0
     494:	d00c      	beq.n	4b0 <SystemCoreClockUpdate+0xcc>
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
     496:	68ba      	ldr	r2, [r7, #8]
     498:	f44f 6310 	mov.w	r3, #2304	; 0x900
     49c:	f2c0 033d 	movt	r3, #61	; 0x3d
     4a0:	fb03 f202 	mul.w	r2, r3, r2
     4a4:	f240 0300 	movw	r3, #0
     4a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4ac:	601a      	str	r2, [r3, #0]
     4ae:	e00c      	b.n	4ca <SystemCoreClockUpdate+0xe6>
        }
        else
        {
          SystemCoreClock = HSE_VALUE * pllmull;
     4b0:	68ba      	ldr	r2, [r7, #8]
     4b2:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     4b6:	f2c0 037a 	movt	r3, #122	; 0x7a
     4ba:	fb03 f202 	mul.w	r2, r3, r2
     4be:	f240 0300 	movw	r3, #0
     4c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4c6:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2;
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     4c8:	e00a      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
     4ca:	e009      	b.n	4e0 <SystemCoreClockUpdate+0xfc>

    default:
      SystemCoreClock = HSI_VALUE;
     4cc:	f240 0300 	movw	r3, #0
     4d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4d4:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     4d8:	f2c0 027a 	movt	r2, #122	; 0x7a
     4dc:	601a      	str	r2, [r3, #0]
      break;
     4de:	bf00      	nop
  }

  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
     4e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     4e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     4e8:	685b      	ldr	r3, [r3, #4]
     4ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     4ee:	091a      	lsrs	r2, r3, #4
     4f0:	f240 0304 	movw	r3, #4
     4f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4f8:	5c9b      	ldrb	r3, [r3, r2]
     4fa:	b2db      	uxtb	r3, r3
     4fc:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
     4fe:	f240 0300 	movw	r3, #0
     502:	f2c2 0300 	movt	r3, #8192	; 0x2000
     506:	681a      	ldr	r2, [r3, #0]
     508:	68fb      	ldr	r3, [r7, #12]
     50a:	40da      	lsrs	r2, r3
     50c:	f240 0300 	movw	r3, #0
     510:	f2c2 0300 	movt	r3, #8192	; 0x2000
     514:	601a      	str	r2, [r3, #0]
}
     516:	3714      	adds	r7, #20
     518:	46bd      	mov	sp, r7
     51a:	f85d 7b04 	ldr.w	r7, [sp], #4
     51e:	4770      	bx	lr

00000520 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
     520:	b580      	push	{r7, lr}
     522:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
     524:	f000 f802 	bl	52c <SetSysClockTo72>
#endif

 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */
}
     528:	bd80      	pop	{r7, pc}
     52a:	bf00      	nop

0000052c <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
     52c:	b480      	push	{r7}
     52e:	b083      	sub	sp, #12
     530:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
     532:	2300      	movs	r3, #0
     534:	607b      	str	r3, [r7, #4]
     536:	2300      	movs	r3, #0
     538:	603b      	str	r3, [r7, #0]

  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
     53a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     53e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     542:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     546:	f2c4 0202 	movt	r2, #16386	; 0x4002
     54a:	6812      	ldr	r2, [r2, #0]
     54c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     550:	601a      	str	r2, [r3, #0]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
     552:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     556:	f2c4 0302 	movt	r3, #16386	; 0x4002
     55a:	681b      	ldr	r3, [r3, #0]
     55c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     560:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
     562:	687b      	ldr	r3, [r7, #4]
     564:	3301      	adds	r3, #1
     566:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
     568:	683b      	ldr	r3, [r7, #0]
     56a:	2b00      	cmp	r3, #0
     56c:	d103      	bne.n	576 <SetSysClockTo72+0x4a>
     56e:	687b      	ldr	r3, [r7, #4]
     570:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     574:	d1ed      	bne.n	552 <SetSysClockTo72+0x26>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
     576:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     57a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     57e:	681b      	ldr	r3, [r3, #0]
     580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     584:	2b00      	cmp	r3, #0
     586:	d002      	beq.n	58e <SetSysClockTo72+0x62>
  {
    HSEStatus = (uint32_t)0x01;
     588:	2301      	movs	r3, #1
     58a:	603b      	str	r3, [r7, #0]
     58c:	e001      	b.n	592 <SetSysClockTo72+0x66>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
     58e:	2300      	movs	r3, #0
     590:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
     592:	683b      	ldr	r3, [r7, #0]
     594:	2b01      	cmp	r3, #1
     596:	f040 8094 	bne.w	6c2 <SetSysClockTo72+0x196>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
     59a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     59e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5a6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5aa:	6812      	ldr	r2, [r2, #0]
     5ac:	f042 0210 	orr.w	r2, r2, #16
     5b0:	601a      	str	r2, [r3, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
     5b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5be:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5c2:	6812      	ldr	r2, [r2, #0]
     5c4:	f022 0203 	bic.w	r2, r2, #3
     5c8:	601a      	str	r2, [r3, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;
     5ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5d6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5da:	6812      	ldr	r2, [r2, #0]
     5dc:	f042 0202 	orr.w	r2, r2, #2
     5e0:	601a      	str	r2, [r3, #0]


    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
     5e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     5ee:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5f2:	6852      	ldr	r2, [r2, #4]
     5f4:	605a      	str	r2, [r3, #4]

    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
     5f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     602:	f2c4 0202 	movt	r2, #16386	; 0x4002
     606:	6852      	ldr	r2, [r2, #4]
     608:	605a      	str	r2, [r3, #4]

    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
     60a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     60e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     612:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     616:	f2c4 0202 	movt	r2, #16386	; 0x4002
     61a:	6852      	ldr	r2, [r2, #4]
     61c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     620:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 |
                            RCC_CFGR_PLLMULL9);
#else
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
     622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     626:	f2c4 0302 	movt	r3, #16386	; 0x4002
     62a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     62e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     632:	6852      	ldr	r2, [r2, #4]
     634:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
     638:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
     63a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     63e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     642:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     646:	f2c4 0202 	movt	r2, #16386	; 0x4002
     64a:	6852      	ldr	r2, [r2, #4]
     64c:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
     650:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
     652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     656:	f2c4 0302 	movt	r3, #16386	; 0x4002
     65a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     65e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     662:	6812      	ldr	r2, [r2, #0]
     664:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     668:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
     66a:	bf00      	nop
     66c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     670:	f2c4 0302 	movt	r3, #16386	; 0x4002
     674:	681b      	ldr	r3, [r3, #0]
     676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
     67a:	2b00      	cmp	r3, #0
     67c:	d0f6      	beq.n	66c <SetSysClockTo72+0x140>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
     67e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     682:	f2c4 0302 	movt	r3, #16386	; 0x4002
     686:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     68a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     68e:	6852      	ldr	r2, [r2, #4]
     690:	f022 0203 	bic.w	r2, r2, #3
     694:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
     696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     69a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     69e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6a2:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6a6:	6852      	ldr	r2, [r2, #4]
     6a8:	f042 0202 	orr.w	r2, r2, #2
     6ac:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
     6ae:	bf00      	nop
     6b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6b8:	685b      	ldr	r3, [r3, #4]
     6ba:	f003 030c 	and.w	r3, r3, #12
     6be:	2b08      	cmp	r3, #8
     6c0:	d1f6      	bne.n	6b0 <SetSysClockTo72+0x184>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }
}
     6c2:	370c      	adds	r7, #12
     6c4:	46bd      	mov	sp, r7
     6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
     6ca:	4770      	bx	lr
     6cc:	00005620 	.word	0x00005620
     6d0:	20000000 	.word	0x20000000
     6d4:	20000030 	.word	0x20000030
     6d8:	20000030 	.word	0x20000030
     6dc:	200045c8 	.word	0x200045c8

000006e0 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
     6e0:	b480      	push	{r7}
     6e2:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     6e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6f0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6f4:	6812      	ldr	r2, [r2, #0]
     6f6:	f042 0201 	orr.w	r2, r2, #1
     6fa:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     6fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     700:	f2c4 0202 	movt	r2, #16386	; 0x4002
     704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     708:	f2c4 0302 	movt	r3, #16386	; 0x4002
     70c:	6859      	ldr	r1, [r3, #4]
     70e:	2300      	movs	r3, #0
     710:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     714:	400b      	ands	r3, r1
     716:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     718:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     71c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     720:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     724:	f2c4 0202 	movt	r2, #16386	; 0x4002
     728:	6812      	ldr	r2, [r2, #0]
     72a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     72e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     732:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     738:	f2c4 0302 	movt	r3, #16386	; 0x4002
     73c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     740:	f2c4 0202 	movt	r2, #16386	; 0x4002
     744:	6812      	ldr	r2, [r2, #0]
     746:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     74a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     74c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     750:	f2c4 0302 	movt	r3, #16386	; 0x4002
     754:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     758:	f2c4 0202 	movt	r2, #16386	; 0x4002
     75c:	6852      	ldr	r2, [r2, #4]
     75e:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     762:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     768:	f2c4 0302 	movt	r3, #16386	; 0x4002
     76c:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     770:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
     772:	46bd      	mov	sp, r7
     774:	f85d 7b04 	ldr.w	r7, [sp], #4
     778:	4770      	bx	lr
     77a:	bf00      	nop

0000077c <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
     77c:	b480      	push	{r7}
     77e:	b083      	sub	sp, #12
     780:	af00      	add	r7, sp, #0
     782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
     784:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     788:	f2c4 0302 	movt	r3, #16386	; 0x4002
     78c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     790:	f2c4 0202 	movt	r2, #16386	; 0x4002
     794:	6812      	ldr	r2, [r2, #0]
     796:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     79a:	601a      	str	r2, [r3, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
     79c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ac:	6812      	ldr	r2, [r2, #0]
     7ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     7b2:	601a      	str	r2, [r3, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
     7b4:	687b      	ldr	r3, [r7, #4]
     7b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
     7ba:	d003      	beq.n	7c4 <RCC_HSEConfig+0x48>
     7bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
     7c0:	d00d      	beq.n	7de <RCC_HSEConfig+0x62>
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
      break;

    default:
      break;
     7c2:	e019      	b.n	7f8 <RCC_HSEConfig+0x7c>
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
     7c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7d0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7d4:	6812      	ldr	r2, [r2, #0]
     7d6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     7da:	601a      	str	r2, [r3, #0]
      break;
     7dc:	e00c      	b.n	7f8 <RCC_HSEConfig+0x7c>

    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
     7de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7ea:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ee:	6812      	ldr	r2, [r2, #0]
     7f0:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
     7f4:	601a      	str	r2, [r3, #0]
      break;
     7f6:	bf00      	nop

    default:
      break;
  }
}
     7f8:	370c      	adds	r7, #12
     7fa:	46bd      	mov	sp, r7
     7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     800:	4770      	bx	lr
     802:	bf00      	nop

00000804 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
     804:	b580      	push	{r7, lr}
     806:	b082      	sub	sp, #8
     808:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
     80a:	2300      	movs	r3, #0
     80c:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
     80e:	2300      	movs	r3, #0
     810:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
     812:	2300      	movs	r3, #0
     814:	71bb      	strb	r3, [r7, #6]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
     816:	2031      	movs	r0, #49	; 0x31
     818:	f000 fba2 	bl	f60 <RCC_GetFlagStatus>
     81c:	4603      	mov	r3, r0
     81e:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;
     820:	683b      	ldr	r3, [r7, #0]
     822:	3301      	adds	r3, #1
     824:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
     826:	683b      	ldr	r3, [r7, #0]
     828:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     82c:	d002      	beq.n	834 <RCC_WaitForHSEStartUp+0x30>
     82e:	79bb      	ldrb	r3, [r7, #6]
     830:	2b00      	cmp	r3, #0
     832:	d0f0      	beq.n	816 <RCC_WaitForHSEStartUp+0x12>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
     834:	2031      	movs	r0, #49	; 0x31
     836:	f000 fb93 	bl	f60 <RCC_GetFlagStatus>
     83a:	4603      	mov	r3, r0
     83c:	2b00      	cmp	r3, #0
     83e:	d002      	beq.n	846 <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
     840:	2301      	movs	r3, #1
     842:	71fb      	strb	r3, [r7, #7]
     844:	e001      	b.n	84a <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
     846:	2300      	movs	r3, #0
     848:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
     84a:	79fb      	ldrb	r3, [r7, #7]
}
     84c:	4618      	mov	r0, r3
     84e:	3708      	adds	r7, #8
     850:	46bd      	mov	sp, r7
     852:	bd80      	pop	{r7, pc}

00000854 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *   This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
     854:	b480      	push	{r7}
     856:	b085      	sub	sp, #20
     858:	af00      	add	r7, sp, #0
     85a:	4603      	mov	r3, r0
     85c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
     85e:	2300      	movs	r3, #0
     860:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
     862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     866:	f2c4 0302 	movt	r3, #16386	; 0x4002
     86a:	681b      	ldr	r3, [r3, #0]
     86c:	60fb      	str	r3, [r7, #12]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
     86e:	68fb      	ldr	r3, [r7, #12]
     870:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
     874:	60fb      	str	r3, [r7, #12]
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
     876:	79fb      	ldrb	r3, [r7, #7]
     878:	00db      	lsls	r3, r3, #3
     87a:	68fa      	ldr	r2, [r7, #12]
     87c:	4313      	orrs	r3, r2
     87e:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CR = tmpreg;
     880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     884:	f2c4 0302 	movt	r3, #16386	; 0x4002
     888:	68fa      	ldr	r2, [r7, #12]
     88a:	601a      	str	r2, [r3, #0]
}
     88c:	3714      	adds	r7, #20
     88e:	46bd      	mov	sp, r7
     890:	f85d 7b04 	ldr.w	r7, [sp], #4
     894:	4770      	bx	lr
     896:	bf00      	nop

00000898 <RCC_HSICmd>:
  * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
  * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
     898:	b480      	push	{r7}
     89a:	b083      	sub	sp, #12
     89c:	af00      	add	r7, sp, #0
     89e:	4603      	mov	r3, r0
     8a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
     8a2:	2300      	movs	r3, #0
     8a4:	f2c4 2342 	movt	r3, #16962	; 0x4242
     8a8:	79fa      	ldrb	r2, [r7, #7]
     8aa:	601a      	str	r2, [r3, #0]
}
     8ac:	370c      	adds	r7, #12
     8ae:	46bd      	mov	sp, r7
     8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
     8b4:	4770      	bx	lr
     8b6:	bf00      	nop

000008b8 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
     8b8:	b480      	push	{r7}
     8ba:	b085      	sub	sp, #20
     8bc:	af00      	add	r7, sp, #0
     8be:	6078      	str	r0, [r7, #4]
     8c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
     8c2:	2300      	movs	r3, #0
     8c4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
     8c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ce:	685b      	ldr	r3, [r3, #4]
     8d0:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
     8d2:	68fb      	ldr	r3, [r7, #12]
     8d4:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
     8d8:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
     8da:	687a      	ldr	r2, [r7, #4]
     8dc:	683b      	ldr	r3, [r7, #0]
     8de:	4313      	orrs	r3, r2
     8e0:	68fa      	ldr	r2, [r7, #12]
     8e2:	4313      	orrs	r3, r2
     8e4:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     8e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ee:	68fa      	ldr	r2, [r7, #12]
     8f0:	605a      	str	r2, [r3, #4]
}
     8f2:	3714      	adds	r7, #20
     8f4:	46bd      	mov	sp, r7
     8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
     8fa:	4770      	bx	lr

000008fc <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
     8fc:	b480      	push	{r7}
     8fe:	b083      	sub	sp, #12
     900:	af00      	add	r7, sp, #0
     902:	4603      	mov	r3, r0
     904:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
     906:	2360      	movs	r3, #96	; 0x60
     908:	f2c4 2342 	movt	r3, #16962	; 0x4242
     90c:	79fa      	ldrb	r2, [r7, #7]
     90e:	601a      	str	r2, [r3, #0]
}
     910:	370c      	adds	r7, #12
     912:	46bd      	mov	sp, r7
     914:	f85d 7b04 	ldr.w	r7, [sp], #4
     918:	4770      	bx	lr
     91a:	bf00      	nop

0000091c <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
     91c:	b480      	push	{r7}
     91e:	b085      	sub	sp, #20
     920:	af00      	add	r7, sp, #0
     922:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     924:	2300      	movs	r3, #0
     926:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
     928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     92c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     930:	685b      	ldr	r3, [r3, #4]
     932:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
     934:	68fb      	ldr	r3, [r7, #12]
     936:	f023 0303 	bic.w	r3, r3, #3
     93a:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
     93c:	68fa      	ldr	r2, [r7, #12]
     93e:	687b      	ldr	r3, [r7, #4]
     940:	4313      	orrs	r3, r2
     942:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     948:	f2c4 0302 	movt	r3, #16386	; 0x4002
     94c:	68fa      	ldr	r2, [r7, #12]
     94e:	605a      	str	r2, [r3, #4]
}
     950:	3714      	adds	r7, #20
     952:	46bd      	mov	sp, r7
     954:	f85d 7b04 	ldr.w	r7, [sp], #4
     958:	4770      	bx	lr
     95a:	bf00      	nop

0000095c <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
     95c:	b480      	push	{r7}
     95e:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
     960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     964:	f2c4 0302 	movt	r3, #16386	; 0x4002
     968:	685b      	ldr	r3, [r3, #4]
     96a:	b2db      	uxtb	r3, r3
     96c:	f003 030c 	and.w	r3, r3, #12
     970:	b2db      	uxtb	r3, r3
}
     972:	4618      	mov	r0, r3
     974:	46bd      	mov	sp, r7
     976:	f85d 7b04 	ldr.w	r7, [sp], #4
     97a:	4770      	bx	lr

0000097c <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
     97c:	b480      	push	{r7}
     97e:	b085      	sub	sp, #20
     980:	af00      	add	r7, sp, #0
     982:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     984:	2300      	movs	r3, #0
     986:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
     988:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     98c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     990:	685b      	ldr	r3, [r3, #4]
     992:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
     994:	68fb      	ldr	r3, [r7, #12]
     996:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
     99a:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
     99c:	68fa      	ldr	r2, [r7, #12]
     99e:	687b      	ldr	r3, [r7, #4]
     9a0:	4313      	orrs	r3, r2
     9a2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ac:	68fa      	ldr	r2, [r7, #12]
     9ae:	605a      	str	r2, [r3, #4]
}
     9b0:	3714      	adds	r7, #20
     9b2:	46bd      	mov	sp, r7
     9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9b8:	4770      	bx	lr
     9ba:	bf00      	nop

000009bc <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
     9bc:	b480      	push	{r7}
     9be:	b085      	sub	sp, #20
     9c0:	af00      	add	r7, sp, #0
     9c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     9c4:	2300      	movs	r3, #0
     9c6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     9c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9d0:	685b      	ldr	r3, [r3, #4]
     9d2:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
     9d4:	68fb      	ldr	r3, [r7, #12]
     9d6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
     9da:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
     9dc:	68fa      	ldr	r2, [r7, #12]
     9de:	687b      	ldr	r3, [r7, #4]
     9e0:	4313      	orrs	r3, r2
     9e2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ec:	68fa      	ldr	r2, [r7, #12]
     9ee:	605a      	str	r2, [r3, #4]
}
     9f0:	3714      	adds	r7, #20
     9f2:	46bd      	mov	sp, r7
     9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9f8:	4770      	bx	lr
     9fa:	bf00      	nop

000009fc <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
     9fc:	b480      	push	{r7}
     9fe:	b085      	sub	sp, #20
     a00:	af00      	add	r7, sp, #0
     a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     a04:	2300      	movs	r3, #0
     a06:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a0c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a10:	685b      	ldr	r3, [r3, #4]
     a12:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
     a14:	68fb      	ldr	r3, [r7, #12]
     a16:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
     a1a:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
     a1c:	687b      	ldr	r3, [r7, #4]
     a1e:	00db      	lsls	r3, r3, #3
     a20:	68fa      	ldr	r2, [r7, #12]
     a22:	4313      	orrs	r3, r2
     a24:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     a26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a2a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a2e:	68fa      	ldr	r2, [r7, #12]
     a30:	605a      	str	r2, [r3, #4]
}
     a32:	3714      	adds	r7, #20
     a34:	46bd      	mov	sp, r7
     a36:	f85d 7b04 	ldr.w	r7, [sp], #4
     a3a:	4770      	bx	lr

00000a3c <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
     a3c:	b480      	push	{r7}
     a3e:	b083      	sub	sp, #12
     a40:	af00      	add	r7, sp, #0
     a42:	4602      	mov	r2, r0
     a44:	460b      	mov	r3, r1
     a46:	71fa      	strb	r2, [r7, #7]
     a48:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     a4a:	79bb      	ldrb	r3, [r7, #6]
     a4c:	2b00      	cmp	r3, #0
     a4e:	d00e      	beq.n	a6e <RCC_ITConfig+0x32>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
     a50:	f241 0309 	movw	r3, #4105	; 0x1009
     a54:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a58:	f241 0209 	movw	r2, #4105	; 0x1009
     a5c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a60:	7812      	ldrb	r2, [r2, #0]
     a62:	b2d1      	uxtb	r1, r2
     a64:	79fa      	ldrb	r2, [r7, #7]
     a66:	430a      	orrs	r2, r1
     a68:	b2d2      	uxtb	r2, r2
     a6a:	701a      	strb	r2, [r3, #0]
     a6c:	e00f      	b.n	a8e <RCC_ITConfig+0x52>
  }
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
     a6e:	f241 0309 	movw	r3, #4105	; 0x1009
     a72:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a76:	f241 0209 	movw	r2, #4105	; 0x1009
     a7a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a7e:	7812      	ldrb	r2, [r2, #0]
     a80:	b2d1      	uxtb	r1, r2
     a82:	79fa      	ldrb	r2, [r7, #7]
     a84:	43d2      	mvns	r2, r2
     a86:	b2d2      	uxtb	r2, r2
     a88:	400a      	ands	r2, r1
     a8a:	b2d2      	uxtb	r2, r2
     a8c:	701a      	strb	r2, [r3, #0]
  }
}
     a8e:	370c      	adds	r7, #12
     a90:	46bd      	mov	sp, r7
     a92:	f85d 7b04 	ldr.w	r7, [sp], #4
     a96:	4770      	bx	lr

00000a98 <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
     a98:	b480      	push	{r7}
     a9a:	b083      	sub	sp, #12
     a9c:	af00      	add	r7, sp, #0
     a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
     aa0:	23d8      	movs	r3, #216	; 0xd8
     aa2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     aa6:	687a      	ldr	r2, [r7, #4]
     aa8:	601a      	str	r2, [r3, #0]
}
     aaa:	370c      	adds	r7, #12
     aac:	46bd      	mov	sp, r7
     aae:	f85d 7b04 	ldr.w	r7, [sp], #4
     ab2:	4770      	bx	lr

00000ab4 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
     ab4:	b480      	push	{r7}
     ab6:	b085      	sub	sp, #20
     ab8:	af00      	add	r7, sp, #0
     aba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     abc:	2300      	movs	r3, #0
     abe:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
     ac0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ac4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ac8:	685b      	ldr	r3, [r3, #4]
     aca:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
     acc:	68fb      	ldr	r3, [r7, #12]
     ace:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
     ad2:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
     ad4:	68fa      	ldr	r2, [r7, #12]
     ad6:	687b      	ldr	r3, [r7, #4]
     ad8:	4313      	orrs	r3, r2
     ada:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ae0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ae4:	68fa      	ldr	r2, [r7, #12]
     ae6:	605a      	str	r2, [r3, #4]
}
     ae8:	3714      	adds	r7, #20
     aea:	46bd      	mov	sp, r7
     aec:	f85d 7b04 	ldr.w	r7, [sp], #4
     af0:	4770      	bx	lr
     af2:	bf00      	nop

00000af4 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
     af4:	b480      	push	{r7}
     af6:	b083      	sub	sp, #12
     af8:	af00      	add	r7, sp, #0
     afa:	4603      	mov	r3, r0
     afc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     afe:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b02:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b06:	2200      	movs	r2, #0
     b08:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     b0a:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b0e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b12:	2200      	movs	r2, #0
     b14:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
     b16:	79fb      	ldrb	r3, [r7, #7]
     b18:	2b01      	cmp	r3, #1
     b1a:	d002      	beq.n	b22 <RCC_LSEConfig+0x2e>
     b1c:	2b04      	cmp	r3, #4
     b1e:	d007      	beq.n	b30 <RCC_LSEConfig+0x3c>
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;

    default:
      break;
     b20:	e00d      	b.n	b3e <RCC_LSEConfig+0x4a>
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
     b22:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b2a:	2201      	movs	r2, #1
     b2c:	701a      	strb	r2, [r3, #0]
      break;
     b2e:	e006      	b.n	b3e <RCC_LSEConfig+0x4a>

    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
     b30:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b34:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b38:	2205      	movs	r2, #5
     b3a:	701a      	strb	r2, [r3, #0]
      break;
     b3c:	bf00      	nop

    default:
      break;
  }
}
     b3e:	370c      	adds	r7, #12
     b40:	46bd      	mov	sp, r7
     b42:	f85d 7b04 	ldr.w	r7, [sp], #4
     b46:	4770      	bx	lr

00000b48 <RCC_LSICmd>:
  * @note   LSI can not be disabled if the IWDG is running.
  * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
     b48:	b480      	push	{r7}
     b4a:	b083      	sub	sp, #12
     b4c:	af00      	add	r7, sp, #0
     b4e:	4603      	mov	r3, r0
     b50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
     b52:	f44f 6390 	mov.w	r3, #1152	; 0x480
     b56:	f2c4 2342 	movt	r3, #16962	; 0x4242
     b5a:	79fa      	ldrb	r2, [r7, #7]
     b5c:	601a      	str	r2, [r3, #0]
}
     b5e:	370c      	adds	r7, #12
     b60:	46bd      	mov	sp, r7
     b62:	f85d 7b04 	ldr.w	r7, [sp], #4
     b66:	4770      	bx	lr

00000b68 <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
     b68:	b480      	push	{r7}
     b6a:	b083      	sub	sp, #12
     b6c:	af00      	add	r7, sp, #0
     b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
     b70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     b74:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     b7c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     b80:	6a11      	ldr	r1, [r2, #32]
     b82:	687a      	ldr	r2, [r7, #4]
     b84:	430a      	orrs	r2, r1
     b86:	621a      	str	r2, [r3, #32]
}
     b88:	370c      	adds	r7, #12
     b8a:	46bd      	mov	sp, r7
     b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
     b90:	4770      	bx	lr
     b92:	bf00      	nop

00000b94 <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
     b94:	b480      	push	{r7}
     b96:	b083      	sub	sp, #12
     b98:	af00      	add	r7, sp, #0
     b9a:	4603      	mov	r3, r0
     b9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
     b9e:	f240 433c 	movw	r3, #1084	; 0x43c
     ba2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     ba6:	79fa      	ldrb	r2, [r7, #7]
     ba8:	601a      	str	r2, [r3, #0]
}
     baa:	370c      	adds	r7, #12
     bac:	46bd      	mov	sp, r7
     bae:	f85d 7b04 	ldr.w	r7, [sp], #4
     bb2:	4770      	bx	lr

00000bb4 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using
  *         fractional value for HSE crystal.
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
     bb4:	b480      	push	{r7}
     bb6:	b087      	sub	sp, #28
     bb8:	af00      	add	r7, sp, #0
     bba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
     bbc:	2300      	movs	r3, #0
     bbe:	617b      	str	r3, [r7, #20]
     bc0:	2300      	movs	r3, #0
     bc2:	613b      	str	r3, [r7, #16]
     bc4:	2300      	movs	r3, #0
     bc6:	60fb      	str	r3, [r7, #12]
     bc8:	2300      	movs	r3, #0
     bca:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
     bcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     bd0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     bd4:	685b      	ldr	r3, [r3, #4]
     bd6:	f003 030c 	and.w	r3, r3, #12
     bda:	617b      	str	r3, [r7, #20]

  switch (tmp)
     bdc:	697b      	ldr	r3, [r7, #20]
     bde:	2b04      	cmp	r3, #4
     be0:	d00a      	beq.n	bf8 <RCC_GetClocksFreq+0x44>
     be2:	2b08      	cmp	r3, #8
     be4:	d00f      	beq.n	c06 <RCC_GetClocksFreq+0x52>
     be6:	2b00      	cmp	r3, #0
     be8:	d14c      	bne.n	c84 <RCC_GetClocksFreq+0xd0>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     bea:	687a      	ldr	r2, [r7, #4]
     bec:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bf0:	f2c0 037a 	movt	r3, #122	; 0x7a
     bf4:	6013      	str	r3, [r2, #0]
      break;
     bf6:	e04c      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
     bf8:	687a      	ldr	r2, [r7, #4]
     bfa:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bfe:	f2c0 037a 	movt	r3, #122	; 0x7a
     c02:	6013      	str	r3, [r2, #0]
      break;
     c04:	e045      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
     c06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c0a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c0e:	685b      	ldr	r3, [r3, #4]
     c10:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     c14:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
     c16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c1a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c1e:	685b      	ldr	r3, [r3, #4]
     c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     c24:	60fb      	str	r3, [r7, #12]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     c26:	693b      	ldr	r3, [r7, #16]
     c28:	0c9b      	lsrs	r3, r3, #18
     c2a:	3302      	adds	r3, #2
     c2c:	613b      	str	r3, [r7, #16]

      if (pllsource == 0x00)
     c2e:	68fb      	ldr	r3, [r7, #12]
     c30:	2b00      	cmp	r3, #0
     c32:	d109      	bne.n	c48 <RCC_GetClocksFreq+0x94>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
     c34:	693a      	ldr	r2, [r7, #16]
     c36:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c3a:	f2c0 033d 	movt	r3, #61	; 0x3d
     c3e:	fb03 f202 	mul.w	r2, r3, r2
     c42:	687b      	ldr	r3, [r7, #4]
     c44:	601a      	str	r2, [r3, #0]
     c46:	e01c      	b.n	c82 <RCC_GetClocksFreq+0xce>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
     c48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c4c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c50:	685b      	ldr	r3, [r3, #4]
     c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     c56:	2b00      	cmp	r3, #0
     c58:	d009      	beq.n	c6e <RCC_GetClocksFreq+0xba>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
     c5a:	693a      	ldr	r2, [r7, #16]
     c5c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c60:	f2c0 033d 	movt	r3, #61	; 0x3d
     c64:	fb03 f202 	mul.w	r2, r3, r2
     c68:	687b      	ldr	r3, [r7, #4]
     c6a:	601a      	str	r2, [r3, #0]
     c6c:	e009      	b.n	c82 <RCC_GetClocksFreq+0xce>
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
     c6e:	693a      	ldr	r2, [r7, #16]
     c70:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c74:	f2c0 037a 	movt	r3, #122	; 0x7a
     c78:	fb03 f202 	mul.w	r2, r3, r2
     c7c:	687b      	ldr	r3, [r7, #4]
     c7e:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2;
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     c80:	e007      	b.n	c92 <RCC_GetClocksFreq+0xde>
     c82:	e006      	b.n	c92 <RCC_GetClocksFreq+0xde>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     c84:	687a      	ldr	r2, [r7, #4]
     c86:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c8a:	f2c0 037a 	movt	r3, #122	; 0x7a
     c8e:	6013      	str	r3, [r2, #0]
      break;
     c90:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
     c92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c96:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c9a:	685b      	ldr	r3, [r3, #4]
     c9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     ca0:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
     ca2:	697b      	ldr	r3, [r7, #20]
     ca4:	091b      	lsrs	r3, r3, #4
     ca6:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     ca8:	f240 0314 	movw	r3, #20
     cac:	f2c2 0300 	movt	r3, #8192	; 0x2000
     cb0:	697a      	ldr	r2, [r7, #20]
     cb2:	4413      	add	r3, r2
     cb4:	781b      	ldrb	r3, [r3, #0]
     cb6:	b2db      	uxtb	r3, r3
     cb8:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
     cba:	687b      	ldr	r3, [r7, #4]
     cbc:	681a      	ldr	r2, [r3, #0]
     cbe:	68bb      	ldr	r3, [r7, #8]
     cc0:	40da      	lsrs	r2, r3
     cc2:	687b      	ldr	r3, [r7, #4]
     cc4:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
     cc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     cce:	685b      	ldr	r3, [r3, #4]
     cd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
     cd4:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
     cd6:	697b      	ldr	r3, [r7, #20]
     cd8:	0a1b      	lsrs	r3, r3, #8
     cda:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     cdc:	f240 0314 	movw	r3, #20
     ce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     ce4:	697a      	ldr	r2, [r7, #20]
     ce6:	4413      	add	r3, r2
     ce8:	781b      	ldrb	r3, [r3, #0]
     cea:	b2db      	uxtb	r3, r3
     cec:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     cee:	687b      	ldr	r3, [r7, #4]
     cf0:	685a      	ldr	r2, [r3, #4]
     cf2:	68bb      	ldr	r3, [r7, #8]
     cf4:	40da      	lsrs	r2, r3
     cf6:	687b      	ldr	r3, [r7, #4]
     cf8:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
     cfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cfe:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d02:	685b      	ldr	r3, [r3, #4]
     d04:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
     d08:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
     d0a:	697b      	ldr	r3, [r7, #20]
     d0c:	0adb      	lsrs	r3, r3, #11
     d0e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     d10:	f240 0314 	movw	r3, #20
     d14:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d18:	697a      	ldr	r2, [r7, #20]
     d1a:	4413      	add	r3, r2
     d1c:	781b      	ldrb	r3, [r3, #0]
     d1e:	b2db      	uxtb	r3, r3
     d20:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     d22:	687b      	ldr	r3, [r7, #4]
     d24:	685a      	ldr	r2, [r3, #4]
     d26:	68bb      	ldr	r3, [r7, #8]
     d28:	40da      	lsrs	r2, r3
     d2a:	687b      	ldr	r3, [r7, #4]
     d2c:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
     d2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d32:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d36:	685b      	ldr	r3, [r3, #4]
     d38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
     d3c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
     d3e:	697b      	ldr	r3, [r7, #20]
     d40:	0b9b      	lsrs	r3, r3, #14
     d42:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
     d44:	f240 0324 	movw	r3, #36	; 0x24
     d48:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d4c:	697a      	ldr	r2, [r7, #20]
     d4e:	4413      	add	r3, r2
     d50:	781b      	ldrb	r3, [r3, #0]
     d52:	b2db      	uxtb	r3, r3
     d54:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
     d56:	687b      	ldr	r3, [r7, #4]
     d58:	68da      	ldr	r2, [r3, #12]
     d5a:	68bb      	ldr	r3, [r7, #8]
     d5c:	fbb2 f2f3 	udiv	r2, r2, r3
     d60:	687b      	ldr	r3, [r7, #4]
     d62:	611a      	str	r2, [r3, #16]
}
     d64:	371c      	adds	r7, #28
     d66:	46bd      	mov	sp, r7
     d68:	f85d 7b04 	ldr.w	r7, [sp], #4
     d6c:	4770      	bx	lr
     d6e:	bf00      	nop

00000d70 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
     d70:	b480      	push	{r7}
     d72:	b083      	sub	sp, #12
     d74:	af00      	add	r7, sp, #0
     d76:	6078      	str	r0, [r7, #4]
     d78:	460b      	mov	r3, r1
     d7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
     d7c:	78fb      	ldrb	r3, [r7, #3]
     d7e:	2b00      	cmp	r3, #0
     d80:	d00c      	beq.n	d9c <RCC_AHBPeriphClockCmd+0x2c>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
     d82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d86:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     d8e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     d92:	6951      	ldr	r1, [r2, #20]
     d94:	687a      	ldr	r2, [r7, #4]
     d96:	430a      	orrs	r2, r1
     d98:	615a      	str	r2, [r3, #20]
     d9a:	e00c      	b.n	db6 <RCC_AHBPeriphClockCmd+0x46>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
     d9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     da0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     da4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     da8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dac:	6951      	ldr	r1, [r2, #20]
     dae:	687a      	ldr	r2, [r7, #4]
     db0:	43d2      	mvns	r2, r2
     db2:	400a      	ands	r2, r1
     db4:	615a      	str	r2, [r3, #20]
  }
}
     db6:	370c      	adds	r7, #12
     db8:	46bd      	mov	sp, r7
     dba:	f85d 7b04 	ldr.w	r7, [sp], #4
     dbe:	4770      	bx	lr

00000dc0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     dc0:	b480      	push	{r7}
     dc2:	b083      	sub	sp, #12
     dc4:	af00      	add	r7, sp, #0
     dc6:	6078      	str	r0, [r7, #4]
     dc8:	460b      	mov	r3, r1
     dca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     dcc:	78fb      	ldrb	r3, [r7, #3]
     dce:	2b00      	cmp	r3, #0
     dd0:	d00c      	beq.n	dec <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
     dd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     dd6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     dda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     dde:	f2c4 0202 	movt	r2, #16386	; 0x4002
     de2:	6991      	ldr	r1, [r2, #24]
     de4:	687a      	ldr	r2, [r7, #4]
     de6:	430a      	orrs	r2, r1
     de8:	619a      	str	r2, [r3, #24]
     dea:	e00c      	b.n	e06 <RCC_APB2PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
     dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     df0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     df4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     df8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dfc:	6991      	ldr	r1, [r2, #24]
     dfe:	687a      	ldr	r2, [r7, #4]
     e00:	43d2      	mvns	r2, r2
     e02:	400a      	ands	r2, r1
     e04:	619a      	str	r2, [r3, #24]
  }
}
     e06:	370c      	adds	r7, #12
     e08:	46bd      	mov	sp, r7
     e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e0e:	4770      	bx	lr

00000e10 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     e10:	b480      	push	{r7}
     e12:	b083      	sub	sp, #12
     e14:	af00      	add	r7, sp, #0
     e16:	6078      	str	r0, [r7, #4]
     e18:	460b      	mov	r3, r1
     e1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e1c:	78fb      	ldrb	r3, [r7, #3]
     e1e:	2b00      	cmp	r3, #0
     e20:	d00c      	beq.n	e3c <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
     e22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e2e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e32:	69d1      	ldr	r1, [r2, #28]
     e34:	687a      	ldr	r2, [r7, #4]
     e36:	430a      	orrs	r2, r1
     e38:	61da      	str	r2, [r3, #28]
     e3a:	e00c      	b.n	e56 <RCC_APB1PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
     e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e40:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e48:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e4c:	69d1      	ldr	r1, [r2, #28]
     e4e:	687a      	ldr	r2, [r7, #4]
     e50:	43d2      	mvns	r2, r2
     e52:	400a      	ands	r2, r1
     e54:	61da      	str	r2, [r3, #28]
  }
}
     e56:	370c      	adds	r7, #12
     e58:	46bd      	mov	sp, r7
     e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e5e:	4770      	bx	lr

00000e60 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     e60:	b480      	push	{r7}
     e62:	b083      	sub	sp, #12
     e64:	af00      	add	r7, sp, #0
     e66:	6078      	str	r0, [r7, #4]
     e68:	460b      	mov	r3, r1
     e6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e6c:	78fb      	ldrb	r3, [r7, #3]
     e6e:	2b00      	cmp	r3, #0
     e70:	d00c      	beq.n	e8c <RCC_APB2PeriphResetCmd+0x2c>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
     e72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e76:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e7e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e82:	68d1      	ldr	r1, [r2, #12]
     e84:	687a      	ldr	r2, [r7, #4]
     e86:	430a      	orrs	r2, r1
     e88:	60da      	str	r2, [r3, #12]
     e8a:	e00c      	b.n	ea6 <RCC_APB2PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
     e8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e90:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e98:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e9c:	68d1      	ldr	r1, [r2, #12]
     e9e:	687a      	ldr	r2, [r7, #4]
     ea0:	43d2      	mvns	r2, r2
     ea2:	400a      	ands	r2, r1
     ea4:	60da      	str	r2, [r3, #12]
  }
}
     ea6:	370c      	adds	r7, #12
     ea8:	46bd      	mov	sp, r7
     eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
     eae:	4770      	bx	lr

00000eb0 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     eb0:	b480      	push	{r7}
     eb2:	b083      	sub	sp, #12
     eb4:	af00      	add	r7, sp, #0
     eb6:	6078      	str	r0, [r7, #4]
     eb8:	460b      	mov	r3, r1
     eba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     ebc:	78fb      	ldrb	r3, [r7, #3]
     ebe:	2b00      	cmp	r3, #0
     ec0:	d00c      	beq.n	edc <RCC_APB1PeriphResetCmd+0x2c>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
     ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ec6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     eca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ece:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ed2:	6911      	ldr	r1, [r2, #16]
     ed4:	687a      	ldr	r2, [r7, #4]
     ed6:	430a      	orrs	r2, r1
     ed8:	611a      	str	r2, [r3, #16]
     eda:	e00c      	b.n	ef6 <RCC_APB1PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
     edc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ee0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ee4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ee8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     eec:	6911      	ldr	r1, [r2, #16]
     eee:	687a      	ldr	r2, [r7, #4]
     ef0:	43d2      	mvns	r2, r2
     ef2:	400a      	ands	r2, r1
     ef4:	611a      	str	r2, [r3, #16]
  }
}
     ef6:	370c      	adds	r7, #12
     ef8:	46bd      	mov	sp, r7
     efa:	f85d 7b04 	ldr.w	r7, [sp], #4
     efe:	4770      	bx	lr

00000f00 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
     f00:	b480      	push	{r7}
     f02:	b083      	sub	sp, #12
     f04:	af00      	add	r7, sp, #0
     f06:	4603      	mov	r3, r0
     f08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
     f0a:	f44f 6388 	mov.w	r3, #1088	; 0x440
     f0e:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f12:	79fa      	ldrb	r2, [r7, #7]
     f14:	601a      	str	r2, [r3, #0]
}
     f16:	370c      	adds	r7, #12
     f18:	46bd      	mov	sp, r7
     f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f1e:	4770      	bx	lr

00000f20 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
     f20:	b480      	push	{r7}
     f22:	b083      	sub	sp, #12
     f24:	af00      	add	r7, sp, #0
     f26:	4603      	mov	r3, r0
     f28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
     f2a:	234c      	movs	r3, #76	; 0x4c
     f2c:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f30:	79fa      	ldrb	r2, [r7, #7]
     f32:	601a      	str	r2, [r3, #0]
}
     f34:	370c      	adds	r7, #12
     f36:	46bd      	mov	sp, r7
     f38:	f85d 7b04 	ldr.w	r7, [sp], #4
     f3c:	4770      	bx	lr
     f3e:	bf00      	nop

00000f40 <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
     f40:	b480      	push	{r7}
     f42:	b083      	sub	sp, #12
     f44:	af00      	add	r7, sp, #0
     f46:	4603      	mov	r3, r0
     f48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
     f4a:	f241 0307 	movw	r3, #4103	; 0x1007
     f4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f52:	79fa      	ldrb	r2, [r7, #7]
     f54:	701a      	strb	r2, [r3, #0]
}
     f56:	370c      	adds	r7, #12
     f58:	46bd      	mov	sp, r7
     f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f5e:	4770      	bx	lr

00000f60 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
     f60:	b480      	push	{r7}
     f62:	b087      	sub	sp, #28
     f64:	af00      	add	r7, sp, #0
     f66:	4603      	mov	r3, r0
     f68:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
     f6a:	2300      	movs	r3, #0
     f6c:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
     f6e:	2300      	movs	r3, #0
     f70:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
     f72:	2300      	movs	r3, #0
     f74:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
     f76:	79fb      	ldrb	r3, [r7, #7]
     f78:	095b      	lsrs	r3, r3, #5
     f7a:	b2db      	uxtb	r3, r3
     f7c:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
     f7e:	68fb      	ldr	r3, [r7, #12]
     f80:	2b01      	cmp	r3, #1
     f82:	d106      	bne.n	f92 <RCC_GetFlagStatus+0x32>
  {
    statusreg = RCC->CR;
     f84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f88:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f8c:	681b      	ldr	r3, [r3, #0]
     f8e:	617b      	str	r3, [r7, #20]
     f90:	e00f      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
     f92:	68fb      	ldr	r3, [r7, #12]
     f94:	2b02      	cmp	r3, #2
     f96:	d106      	bne.n	fa6 <RCC_GetFlagStatus+0x46>
  {
    statusreg = RCC->BDCR;
     f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f9c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fa0:	6a1b      	ldr	r3, [r3, #32]
     fa2:	617b      	str	r3, [r7, #20]
     fa4:	e005      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
     fa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     faa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     fb0:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
     fb2:	79fb      	ldrb	r3, [r7, #7]
     fb4:	f003 031f 	and.w	r3, r3, #31
     fb8:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
     fba:	68fb      	ldr	r3, [r7, #12]
     fbc:	697a      	ldr	r2, [r7, #20]
     fbe:	fa22 f303 	lsr.w	r3, r2, r3
     fc2:	f003 0301 	and.w	r3, r3, #1
     fc6:	2b00      	cmp	r3, #0
     fc8:	d002      	beq.n	fd0 <RCC_GetFlagStatus+0x70>
  {
    bitstatus = SET;
     fca:	2301      	movs	r3, #1
     fcc:	74fb      	strb	r3, [r7, #19]
     fce:	e001      	b.n	fd4 <RCC_GetFlagStatus+0x74>
  }
  else
  {
    bitstatus = RESET;
     fd0:	2300      	movs	r3, #0
     fd2:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
     fd4:	7cfb      	ldrb	r3, [r7, #19]
}
     fd6:	4618      	mov	r0, r3
     fd8:	371c      	adds	r7, #28
     fda:	46bd      	mov	sp, r7
     fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
     fe0:	4770      	bx	lr
     fe2:	bf00      	nop

00000fe4 <RCC_ClearFlag>:
  *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
     fe4:	b480      	push	{r7}
     fe6:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
     fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     fec:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ff0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ff4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ff8:	6a52      	ldr	r2, [r2, #36]	; 0x24
     ffa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     ffe:	625a      	str	r2, [r3, #36]	; 0x24
}
    1000:	46bd      	mov	sp, r7
    1002:	f85d 7b04 	ldr.w	r7, [sp], #4
    1006:	4770      	bx	lr

00001008 <RCC_GetITStatus>:
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  *
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
    1008:	b480      	push	{r7}
    100a:	b085      	sub	sp, #20
    100c:	af00      	add	r7, sp, #0
    100e:	4603      	mov	r3, r0
    1010:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
    1012:	2300      	movs	r3, #0
    1014:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
    1016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    101a:	f2c4 0302 	movt	r3, #16386	; 0x4002
    101e:	689a      	ldr	r2, [r3, #8]
    1020:	79fb      	ldrb	r3, [r7, #7]
    1022:	4013      	ands	r3, r2
    1024:	2b00      	cmp	r3, #0
    1026:	d002      	beq.n	102e <RCC_GetITStatus+0x26>
  {
    bitstatus = SET;
    1028:	2301      	movs	r3, #1
    102a:	73fb      	strb	r3, [r7, #15]
    102c:	e001      	b.n	1032 <RCC_GetITStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    102e:	2300      	movs	r3, #0
    1030:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the RCC_IT status */
  return  bitstatus;
    1032:	7bfb      	ldrb	r3, [r7, #15]
}
    1034:	4618      	mov	r0, r3
    1036:	3714      	adds	r7, #20
    1038:	46bd      	mov	sp, r7
    103a:	f85d 7b04 	ldr.w	r7, [sp], #4
    103e:	4770      	bx	lr

00001040 <RCC_ClearITPendingBit>:
  *
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
    1040:	b480      	push	{r7}
    1042:	b083      	sub	sp, #12
    1044:	af00      	add	r7, sp, #0
    1046:	4603      	mov	r3, r0
    1048:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
    104a:	f241 030a 	movw	r3, #4106	; 0x100a
    104e:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1052:	79fa      	ldrb	r2, [r7, #7]
    1054:	701a      	strb	r2, [r3, #0]
}
    1056:	370c      	adds	r7, #12
    1058:	46bd      	mov	sp, r7
    105a:	f85d 7b04 	ldr.w	r7, [sp], #4
    105e:	4770      	bx	lr

00001060 <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
    1060:	b580      	push	{r7, lr}
    1062:	b082      	sub	sp, #8
    1064:	af00      	add	r7, sp, #0
    1066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
    1068:	687a      	ldr	r2, [r7, #4]
    106a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    106e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1072:	429a      	cmp	r2, r3
    1074:	d108      	bne.n	1088 <GPIO_DeInit+0x28>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
    1076:	2004      	movs	r0, #4
    1078:	2101      	movs	r1, #1
    107a:	f7ff fef1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
    107e:	2004      	movs	r0, #4
    1080:	2100      	movs	r1, #0
    1082:	f7ff feed 	bl	e60 <RCC_APB2PeriphResetCmd>
    1086:	e060      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOB)
    1088:	687a      	ldr	r2, [r7, #4]
    108a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    108e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1092:	429a      	cmp	r2, r3
    1094:	d108      	bne.n	10a8 <GPIO_DeInit+0x48>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
    1096:	2008      	movs	r0, #8
    1098:	2101      	movs	r1, #1
    109a:	f7ff fee1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
    109e:	2008      	movs	r0, #8
    10a0:	2100      	movs	r1, #0
    10a2:	f7ff fedd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10a6:	e050      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOC)
    10a8:	687a      	ldr	r2, [r7, #4]
    10aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    10ae:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10b2:	429a      	cmp	r2, r3
    10b4:	d108      	bne.n	10c8 <GPIO_DeInit+0x68>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
    10b6:	2010      	movs	r0, #16
    10b8:	2101      	movs	r1, #1
    10ba:	f7ff fed1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
    10be:	2010      	movs	r0, #16
    10c0:	2100      	movs	r1, #0
    10c2:	f7ff fecd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10c6:	e040      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOD)
    10c8:	687a      	ldr	r2, [r7, #4]
    10ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    10ce:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10d2:	429a      	cmp	r2, r3
    10d4:	d108      	bne.n	10e8 <GPIO_DeInit+0x88>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
    10d6:	2020      	movs	r0, #32
    10d8:	2101      	movs	r1, #1
    10da:	f7ff fec1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
    10de:	2020      	movs	r0, #32
    10e0:	2100      	movs	r1, #0
    10e2:	f7ff febd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10e6:	e030      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOE)
    10e8:	687a      	ldr	r2, [r7, #4]
    10ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    10ee:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10f2:	429a      	cmp	r2, r3
    10f4:	d108      	bne.n	1108 <GPIO_DeInit+0xa8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
    10f6:	2040      	movs	r0, #64	; 0x40
    10f8:	2101      	movs	r1, #1
    10fa:	f7ff feb1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
    10fe:	2040      	movs	r0, #64	; 0x40
    1100:	2100      	movs	r1, #0
    1102:	f7ff fead 	bl	e60 <RCC_APB2PeriphResetCmd>
    1106:	e020      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOF)
    1108:	687a      	ldr	r2, [r7, #4]
    110a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
    110e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1112:	429a      	cmp	r2, r3
    1114:	d108      	bne.n	1128 <GPIO_DeInit+0xc8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
    1116:	2080      	movs	r0, #128	; 0x80
    1118:	2101      	movs	r1, #1
    111a:	f7ff fea1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
    111e:	2080      	movs	r0, #128	; 0x80
    1120:	2100      	movs	r1, #0
    1122:	f7ff fe9d 	bl	e60 <RCC_APB2PeriphResetCmd>
    1126:	e010      	b.n	114a <GPIO_DeInit+0xea>
  }
  else
  {
    if (GPIOx == GPIOG)
    1128:	687a      	ldr	r2, [r7, #4]
    112a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    112e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1132:	429a      	cmp	r2, r3
    1134:	d109      	bne.n	114a <GPIO_DeInit+0xea>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
    1136:	f44f 7080 	mov.w	r0, #256	; 0x100
    113a:	2101      	movs	r1, #1
    113c:	f7ff fe90 	bl	e60 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    1140:	f44f 7080 	mov.w	r0, #256	; 0x100
    1144:	2100      	movs	r1, #0
    1146:	f7ff fe8b 	bl	e60 <RCC_APB2PeriphResetCmd>
    }
  }
}
    114a:	3708      	adds	r7, #8
    114c:	46bd      	mov	sp, r7
    114e:	bd80      	pop	{r7, pc}

00001150 <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
    1150:	b580      	push	{r7, lr}
    1152:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
    1154:	2001      	movs	r0, #1
    1156:	2101      	movs	r1, #1
    1158:	f7ff fe82 	bl	e60 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
    115c:	2001      	movs	r0, #1
    115e:	2100      	movs	r1, #0
    1160:	f7ff fe7e 	bl	e60 <RCC_APB2PeriphResetCmd>
}
    1164:	bd80      	pop	{r7, pc}
    1166:	bf00      	nop

00001168 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
    1168:	b480      	push	{r7}
    116a:	b089      	sub	sp, #36	; 0x24
    116c:	af00      	add	r7, sp, #0
    116e:	6078      	str	r0, [r7, #4]
    1170:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
    1172:	2300      	movs	r3, #0
    1174:	61fb      	str	r3, [r7, #28]
    1176:	2300      	movs	r3, #0
    1178:	613b      	str	r3, [r7, #16]
    117a:	2300      	movs	r3, #0
    117c:	61bb      	str	r3, [r7, #24]
    117e:	2300      	movs	r3, #0
    1180:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
    1182:	2300      	movs	r3, #0
    1184:	617b      	str	r3, [r7, #20]
    1186:	2300      	movs	r3, #0
    1188:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));

/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
    118a:	683b      	ldr	r3, [r7, #0]
    118c:	78db      	ldrb	r3, [r3, #3]
    118e:	f003 030f 	and.w	r3, r3, #15
    1192:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
    1194:	683b      	ldr	r3, [r7, #0]
    1196:	78db      	ldrb	r3, [r3, #3]
    1198:	f003 0310 	and.w	r3, r3, #16
    119c:	2b00      	cmp	r3, #0
    119e:	d004      	beq.n	11aa <GPIO_Init+0x42>
  {
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
    11a0:	683b      	ldr	r3, [r7, #0]
    11a2:	789b      	ldrb	r3, [r3, #2]
    11a4:	69fa      	ldr	r2, [r7, #28]
    11a6:	4313      	orrs	r3, r2
    11a8:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
    11aa:	683b      	ldr	r3, [r7, #0]
    11ac:	881b      	ldrh	r3, [r3, #0]
    11ae:	b2db      	uxtb	r3, r3
    11b0:	2b00      	cmp	r3, #0
    11b2:	d044      	beq.n	123e <GPIO_Init+0xd6>
  {
    tmpreg = GPIOx->CRL;
    11b4:	687b      	ldr	r3, [r7, #4]
    11b6:	681b      	ldr	r3, [r3, #0]
    11b8:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    11ba:	2300      	movs	r3, #0
    11bc:	61bb      	str	r3, [r7, #24]
    11be:	e038      	b.n	1232 <GPIO_Init+0xca>
    {
      pos = ((uint32_t)0x01) << pinpos;
    11c0:	69bb      	ldr	r3, [r7, #24]
    11c2:	2201      	movs	r2, #1
    11c4:	fa02 f303 	lsl.w	r3, r2, r3
    11c8:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
    11ca:	683b      	ldr	r3, [r7, #0]
    11cc:	881b      	ldrh	r3, [r3, #0]
    11ce:	461a      	mov	r2, r3
    11d0:	68fb      	ldr	r3, [r7, #12]
    11d2:	4013      	ands	r3, r2
    11d4:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    11d6:	693a      	ldr	r2, [r7, #16]
    11d8:	68fb      	ldr	r3, [r7, #12]
    11da:	429a      	cmp	r2, r3
    11dc:	d126      	bne.n	122c <GPIO_Init+0xc4>
      {
        pos = pinpos << 2;
    11de:	69bb      	ldr	r3, [r7, #24]
    11e0:	009b      	lsls	r3, r3, #2
    11e2:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    11e4:	68fb      	ldr	r3, [r7, #12]
    11e6:	220f      	movs	r2, #15
    11e8:	fa02 f303 	lsl.w	r3, r2, r3
    11ec:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    11ee:	68bb      	ldr	r3, [r7, #8]
    11f0:	43db      	mvns	r3, r3
    11f2:	697a      	ldr	r2, [r7, #20]
    11f4:	4013      	ands	r3, r2
    11f6:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    11f8:	68fb      	ldr	r3, [r7, #12]
    11fa:	69fa      	ldr	r2, [r7, #28]
    11fc:	fa02 f303 	lsl.w	r3, r2, r3
    1200:	697a      	ldr	r2, [r7, #20]
    1202:	4313      	orrs	r3, r2
    1204:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    1206:	683b      	ldr	r3, [r7, #0]
    1208:	78db      	ldrb	r3, [r3, #3]
    120a:	2b28      	cmp	r3, #40	; 0x28
    120c:	d105      	bne.n	121a <GPIO_Init+0xb2>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
    120e:	69bb      	ldr	r3, [r7, #24]
    1210:	2201      	movs	r2, #1
    1212:	409a      	lsls	r2, r3
    1214:	687b      	ldr	r3, [r7, #4]
    1216:	615a      	str	r2, [r3, #20]
    1218:	e008      	b.n	122c <GPIO_Init+0xc4>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    121a:	683b      	ldr	r3, [r7, #0]
    121c:	78db      	ldrb	r3, [r3, #3]
    121e:	2b48      	cmp	r3, #72	; 0x48
    1220:	d104      	bne.n	122c <GPIO_Init+0xc4>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
    1222:	69bb      	ldr	r3, [r7, #24]
    1224:	2201      	movs	r2, #1
    1226:	409a      	lsls	r2, r3
    1228:	687b      	ldr	r3, [r7, #4]
    122a:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    122c:	69bb      	ldr	r3, [r7, #24]
    122e:	3301      	adds	r3, #1
    1230:	61bb      	str	r3, [r7, #24]
    1232:	69bb      	ldr	r3, [r7, #24]
    1234:	2b07      	cmp	r3, #7
    1236:	d9c3      	bls.n	11c0 <GPIO_Init+0x58>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
    1238:	687b      	ldr	r3, [r7, #4]
    123a:	697a      	ldr	r2, [r7, #20]
    123c:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
    123e:	683b      	ldr	r3, [r7, #0]
    1240:	881b      	ldrh	r3, [r3, #0]
    1242:	2bff      	cmp	r3, #255	; 0xff
    1244:	d946      	bls.n	12d4 <GPIO_Init+0x16c>
  {
    tmpreg = GPIOx->CRH;
    1246:	687b      	ldr	r3, [r7, #4]
    1248:	685b      	ldr	r3, [r3, #4]
    124a:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    124c:	2300      	movs	r3, #0
    124e:	61bb      	str	r3, [r7, #24]
    1250:	e03a      	b.n	12c8 <GPIO_Init+0x160>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
    1252:	69bb      	ldr	r3, [r7, #24]
    1254:	3308      	adds	r3, #8
    1256:	2201      	movs	r2, #1
    1258:	fa02 f303 	lsl.w	r3, r2, r3
    125c:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
    125e:	683b      	ldr	r3, [r7, #0]
    1260:	881b      	ldrh	r3, [r3, #0]
    1262:	461a      	mov	r2, r3
    1264:	68fb      	ldr	r3, [r7, #12]
    1266:	4013      	ands	r3, r2
    1268:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    126a:	693a      	ldr	r2, [r7, #16]
    126c:	68fb      	ldr	r3, [r7, #12]
    126e:	429a      	cmp	r2, r3
    1270:	d127      	bne.n	12c2 <GPIO_Init+0x15a>
      {
        pos = pinpos << 2;
    1272:	69bb      	ldr	r3, [r7, #24]
    1274:	009b      	lsls	r3, r3, #2
    1276:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    1278:	68fb      	ldr	r3, [r7, #12]
    127a:	220f      	movs	r2, #15
    127c:	fa02 f303 	lsl.w	r3, r2, r3
    1280:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    1282:	68bb      	ldr	r3, [r7, #8]
    1284:	43db      	mvns	r3, r3
    1286:	697a      	ldr	r2, [r7, #20]
    1288:	4013      	ands	r3, r2
    128a:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    128c:	68fb      	ldr	r3, [r7, #12]
    128e:	69fa      	ldr	r2, [r7, #28]
    1290:	fa02 f303 	lsl.w	r3, r2, r3
    1294:	697a      	ldr	r2, [r7, #20]
    1296:	4313      	orrs	r3, r2
    1298:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    129a:	683b      	ldr	r3, [r7, #0]
    129c:	78db      	ldrb	r3, [r3, #3]
    129e:	2b28      	cmp	r3, #40	; 0x28
    12a0:	d105      	bne.n	12ae <GPIO_Init+0x146>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12a2:	69bb      	ldr	r3, [r7, #24]
    12a4:	3308      	adds	r3, #8
    12a6:	2201      	movs	r2, #1
    12a8:	409a      	lsls	r2, r3
    12aa:	687b      	ldr	r3, [r7, #4]
    12ac:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    12ae:	683b      	ldr	r3, [r7, #0]
    12b0:	78db      	ldrb	r3, [r3, #3]
    12b2:	2b48      	cmp	r3, #72	; 0x48
    12b4:	d105      	bne.n	12c2 <GPIO_Init+0x15a>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12b6:	69bb      	ldr	r3, [r7, #24]
    12b8:	3308      	adds	r3, #8
    12ba:	2201      	movs	r2, #1
    12bc:	409a      	lsls	r2, r3
    12be:	687b      	ldr	r3, [r7, #4]
    12c0:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    12c2:	69bb      	ldr	r3, [r7, #24]
    12c4:	3301      	adds	r3, #1
    12c6:	61bb      	str	r3, [r7, #24]
    12c8:	69bb      	ldr	r3, [r7, #24]
    12ca:	2b07      	cmp	r3, #7
    12cc:	d9c1      	bls.n	1252 <GPIO_Init+0xea>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
    12ce:	687b      	ldr	r3, [r7, #4]
    12d0:	697a      	ldr	r2, [r7, #20]
    12d2:	605a      	str	r2, [r3, #4]
  }
}
    12d4:	3724      	adds	r7, #36	; 0x24
    12d6:	46bd      	mov	sp, r7
    12d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    12dc:	4770      	bx	lr
    12de:	bf00      	nop

000012e0 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
    12e0:	b480      	push	{r7}
    12e2:	b083      	sub	sp, #12
    12e4:	af00      	add	r7, sp, #0
    12e6:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
    12e8:	687b      	ldr	r3, [r7, #4]
    12ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
    12ee:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
    12f0:	687b      	ldr	r3, [r7, #4]
    12f2:	2202      	movs	r2, #2
    12f4:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
    12f6:	687b      	ldr	r3, [r7, #4]
    12f8:	2204      	movs	r2, #4
    12fa:	70da      	strb	r2, [r3, #3]
}
    12fc:	370c      	adds	r7, #12
    12fe:	46bd      	mov	sp, r7
    1300:	f85d 7b04 	ldr.w	r7, [sp], #4
    1304:	4770      	bx	lr
    1306:	bf00      	nop

00001308 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1308:	b480      	push	{r7}
    130a:	b085      	sub	sp, #20
    130c:	af00      	add	r7, sp, #0
    130e:	6078      	str	r0, [r7, #4]
    1310:	460b      	mov	r3, r1
    1312:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1314:	2300      	movs	r3, #0
    1316:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1318:	687b      	ldr	r3, [r7, #4]
    131a:	689a      	ldr	r2, [r3, #8]
    131c:	887b      	ldrh	r3, [r7, #2]
    131e:	4013      	ands	r3, r2
    1320:	2b00      	cmp	r3, #0
    1322:	d002      	beq.n	132a <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1324:	2301      	movs	r3, #1
    1326:	73fb      	strb	r3, [r7, #15]
    1328:	e001      	b.n	132e <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    132a:	2300      	movs	r3, #0
    132c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    132e:	7bfb      	ldrb	r3, [r7, #15]
}
    1330:	4618      	mov	r0, r3
    1332:	3714      	adds	r7, #20
    1334:	46bd      	mov	sp, r7
    1336:	f85d 7b04 	ldr.w	r7, [sp], #4
    133a:	4770      	bx	lr

0000133c <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
    133c:	b480      	push	{r7}
    133e:	b083      	sub	sp, #12
    1340:	af00      	add	r7, sp, #0
    1342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
    1344:	687b      	ldr	r3, [r7, #4]
    1346:	689b      	ldr	r3, [r3, #8]
    1348:	b29b      	uxth	r3, r3
}
    134a:	4618      	mov	r0, r3
    134c:	370c      	adds	r7, #12
    134e:	46bd      	mov	sp, r7
    1350:	f85d 7b04 	ldr.w	r7, [sp], #4
    1354:	4770      	bx	lr
    1356:	bf00      	nop

00001358 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1358:	b480      	push	{r7}
    135a:	b085      	sub	sp, #20
    135c:	af00      	add	r7, sp, #0
    135e:	6078      	str	r0, [r7, #4]
    1360:	460b      	mov	r3, r1
    1362:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1364:	2300      	movs	r3, #0
    1366:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1368:	687b      	ldr	r3, [r7, #4]
    136a:	68da      	ldr	r2, [r3, #12]
    136c:	887b      	ldrh	r3, [r7, #2]
    136e:	4013      	ands	r3, r2
    1370:	2b00      	cmp	r3, #0
    1372:	d002      	beq.n	137a <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1374:	2301      	movs	r3, #1
    1376:	73fb      	strb	r3, [r7, #15]
    1378:	e001      	b.n	137e <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    137a:	2300      	movs	r3, #0
    137c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    137e:	7bfb      	ldrb	r3, [r7, #15]
}
    1380:	4618      	mov	r0, r3
    1382:	3714      	adds	r7, #20
    1384:	46bd      	mov	sp, r7
    1386:	f85d 7b04 	ldr.w	r7, [sp], #4
    138a:	4770      	bx	lr

0000138c <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
    138c:	b480      	push	{r7}
    138e:	b083      	sub	sp, #12
    1390:	af00      	add	r7, sp, #0
    1392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
    1394:	687b      	ldr	r3, [r7, #4]
    1396:	68db      	ldr	r3, [r3, #12]
    1398:	b29b      	uxth	r3, r3
}
    139a:	4618      	mov	r0, r3
    139c:	370c      	adds	r7, #12
    139e:	46bd      	mov	sp, r7
    13a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    13a4:	4770      	bx	lr
    13a6:	bf00      	nop

000013a8 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13a8:	b480      	push	{r7}
    13aa:	b083      	sub	sp, #12
    13ac:	af00      	add	r7, sp, #0
    13ae:	6078      	str	r0, [r7, #4]
    13b0:	460b      	mov	r3, r1
    13b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
    13b4:	887a      	ldrh	r2, [r7, #2]
    13b6:	687b      	ldr	r3, [r7, #4]
    13b8:	611a      	str	r2, [r3, #16]
}
    13ba:	370c      	adds	r7, #12
    13bc:	46bd      	mov	sp, r7
    13be:	f85d 7b04 	ldr.w	r7, [sp], #4
    13c2:	4770      	bx	lr

000013c4 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13c4:	b480      	push	{r7}
    13c6:	b083      	sub	sp, #12
    13c8:	af00      	add	r7, sp, #0
    13ca:	6078      	str	r0, [r7, #4]
    13cc:	460b      	mov	r3, r1
    13ce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
    13d0:	887a      	ldrh	r2, [r7, #2]
    13d2:	687b      	ldr	r3, [r7, #4]
    13d4:	615a      	str	r2, [r3, #20]
}
    13d6:	370c      	adds	r7, #12
    13d8:	46bd      	mov	sp, r7
    13da:	f85d 7b04 	ldr.w	r7, [sp], #4
    13de:	4770      	bx	lr

000013e0 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
    13e0:	b480      	push	{r7}
    13e2:	b083      	sub	sp, #12
    13e4:	af00      	add	r7, sp, #0
    13e6:	6078      	str	r0, [r7, #4]
    13e8:	4613      	mov	r3, r2
    13ea:	460a      	mov	r2, r1
    13ec:	807a      	strh	r2, [r7, #2]
    13ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
    13f0:	787b      	ldrb	r3, [r7, #1]
    13f2:	2b00      	cmp	r3, #0
    13f4:	d003      	beq.n	13fe <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
    13f6:	887a      	ldrh	r2, [r7, #2]
    13f8:	687b      	ldr	r3, [r7, #4]
    13fa:	611a      	str	r2, [r3, #16]
    13fc:	e002      	b.n	1404 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
    13fe:	887a      	ldrh	r2, [r7, #2]
    1400:	687b      	ldr	r3, [r7, #4]
    1402:	615a      	str	r2, [r3, #20]
  }
}
    1404:	370c      	adds	r7, #12
    1406:	46bd      	mov	sp, r7
    1408:	f85d 7b04 	ldr.w	r7, [sp], #4
    140c:	4770      	bx	lr
    140e:	bf00      	nop

00001410 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
    1410:	b480      	push	{r7}
    1412:	b083      	sub	sp, #12
    1414:	af00      	add	r7, sp, #0
    1416:	6078      	str	r0, [r7, #4]
    1418:	460b      	mov	r3, r1
    141a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
    141c:	887a      	ldrh	r2, [r7, #2]
    141e:	687b      	ldr	r3, [r7, #4]
    1420:	60da      	str	r2, [r3, #12]
}
    1422:	370c      	adds	r7, #12
    1424:	46bd      	mov	sp, r7
    1426:	f85d 7b04 	ldr.w	r7, [sp], #4
    142a:	4770      	bx	lr

0000142c <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    142c:	b480      	push	{r7}
    142e:	b085      	sub	sp, #20
    1430:	af00      	add	r7, sp, #0
    1432:	6078      	str	r0, [r7, #4]
    1434:	460b      	mov	r3, r1
    1436:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0x00010000;
    1438:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    143c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
    143e:	887b      	ldrh	r3, [r7, #2]
    1440:	68fa      	ldr	r2, [r7, #12]
    1442:	4313      	orrs	r3, r2
    1444:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1446:	687b      	ldr	r3, [r7, #4]
    1448:	68fa      	ldr	r2, [r7, #12]
    144a:	619a      	str	r2, [r3, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
    144c:	887a      	ldrh	r2, [r7, #2]
    144e:	687b      	ldr	r3, [r7, #4]
    1450:	619a      	str	r2, [r3, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1452:	687b      	ldr	r3, [r7, #4]
    1454:	68fa      	ldr	r2, [r7, #12]
    1456:	619a      	str	r2, [r3, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    1458:	687b      	ldr	r3, [r7, #4]
    145a:	699b      	ldr	r3, [r3, #24]
    145c:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    145e:	687b      	ldr	r3, [r7, #4]
    1460:	699b      	ldr	r3, [r3, #24]
    1462:	60fb      	str	r3, [r7, #12]
}
    1464:	3714      	adds	r7, #20
    1466:	46bd      	mov	sp, r7
    1468:	f85d 7b04 	ldr.w	r7, [sp], #4
    146c:	4770      	bx	lr
    146e:	bf00      	nop

00001470 <GPIO_EventOutputConfig>:
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    1470:	b480      	push	{r7}
    1472:	b085      	sub	sp, #20
    1474:	af00      	add	r7, sp, #0
    1476:	4602      	mov	r2, r0
    1478:	460b      	mov	r3, r1
    147a:	71fa      	strb	r2, [r7, #7]
    147c:	71bb      	strb	r3, [r7, #6]
  uint32_t tmpreg = 0x00;
    147e:	2300      	movs	r3, #0
    1480:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmpreg = AFIO->EVCR;
    1482:	2300      	movs	r3, #0
    1484:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1488:	681b      	ldr	r3, [r3, #0]
    148a:	60fb      	str	r3, [r7, #12]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
    148c:	68fa      	ldr	r2, [r7, #12]
    148e:	f64f 7380 	movw	r3, #65408	; 0xff80
    1492:	4013      	ands	r3, r2
    1494:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
    1496:	79fb      	ldrb	r3, [r7, #7]
    1498:	011b      	lsls	r3, r3, #4
    149a:	68fa      	ldr	r2, [r7, #12]
    149c:	4313      	orrs	r3, r2
    149e:	60fb      	str	r3, [r7, #12]
  tmpreg |= GPIO_PinSource;
    14a0:	79bb      	ldrb	r3, [r7, #6]
    14a2:	68fa      	ldr	r2, [r7, #12]
    14a4:	4313      	orrs	r3, r2
    14a6:	60fb      	str	r3, [r7, #12]
  AFIO->EVCR = tmpreg;
    14a8:	2300      	movs	r3, #0
    14aa:	f2c4 0301 	movt	r3, #16385	; 0x4001
    14ae:	68fa      	ldr	r2, [r7, #12]
    14b0:	601a      	str	r2, [r3, #0]
}
    14b2:	3714      	adds	r7, #20
    14b4:	46bd      	mov	sp, r7
    14b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    14ba:	4770      	bx	lr

000014bc <GPIO_EventOutputCmd>:
  * @param  NewState: new state of the Event output.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_EventOutputCmd(FunctionalState NewState)
{
    14bc:	b480      	push	{r7}
    14be:	b083      	sub	sp, #12
    14c0:	af00      	add	r7, sp, #0
    14c2:	4603      	mov	r3, r0
    14c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
    14c6:	231c      	movs	r3, #28
    14c8:	f2c4 2320 	movt	r3, #16928	; 0x4220
    14cc:	79fa      	ldrb	r2, [r7, #7]
    14ce:	601a      	str	r2, [r3, #0]
}
    14d0:	370c      	adds	r7, #12
    14d2:	46bd      	mov	sp, r7
    14d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    14d8:	4770      	bx	lr
    14da:	bf00      	nop

000014dc <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
    14dc:	b480      	push	{r7}
    14de:	b087      	sub	sp, #28
    14e0:	af00      	add	r7, sp, #0
    14e2:	6078      	str	r0, [r7, #4]
    14e4:	460b      	mov	r3, r1
    14e6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
    14e8:	2300      	movs	r3, #0
    14ea:	613b      	str	r3, [r7, #16]
    14ec:	2300      	movs	r3, #0
    14ee:	60fb      	str	r3, [r7, #12]
    14f0:	2300      	movs	r3, #0
    14f2:	617b      	str	r3, [r7, #20]
    14f4:	2300      	movs	r3, #0
    14f6:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    14f8:	687b      	ldr	r3, [r7, #4]
    14fa:	2b00      	cmp	r3, #0
    14fc:	da05      	bge.n	150a <GPIO_PinRemapConfig+0x2e>
  {
    tmpreg = AFIO->MAPR2;
    14fe:	2300      	movs	r3, #0
    1500:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1504:	69db      	ldr	r3, [r3, #28]
    1506:	617b      	str	r3, [r7, #20]
    1508:	e004      	b.n	1514 <GPIO_PinRemapConfig+0x38>
  }
  else
  {
    tmpreg = AFIO->MAPR;
    150a:	2300      	movs	r3, #0
    150c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1510:	685b      	ldr	r3, [r3, #4]
    1512:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
    1514:	687b      	ldr	r3, [r7, #4]
    1516:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    151a:	0c1b      	lsrs	r3, r3, #16
    151c:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
    151e:	687b      	ldr	r3, [r7, #4]
    1520:	b29b      	uxth	r3, r3
    1522:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
    1524:	687b      	ldr	r3, [r7, #4]
    1526:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    152a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
    152e:	d10e      	bne.n	154e <GPIO_PinRemapConfig+0x72>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    1530:	697b      	ldr	r3, [r7, #20]
    1532:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    1536:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
    1538:	2300      	movs	r3, #0
    153a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    153e:	2200      	movs	r2, #0
    1540:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1544:	6852      	ldr	r2, [r2, #4]
    1546:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
    154a:	605a      	str	r2, [r3, #4]
    154c:	e021      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
    154e:	687b      	ldr	r3, [r7, #4]
    1550:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    1554:	2b00      	cmp	r3, #0
    1556:	d00e      	beq.n	1576 <GPIO_PinRemapConfig+0x9a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
    1558:	68bb      	ldr	r3, [r7, #8]
    155a:	2203      	movs	r2, #3
    155c:	fa02 f303 	lsl.w	r3, r2, r3
    1560:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
    1562:	68fb      	ldr	r3, [r7, #12]
    1564:	43db      	mvns	r3, r3
    1566:	697a      	ldr	r2, [r7, #20]
    1568:	4013      	ands	r3, r2
    156a:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    156c:	697b      	ldr	r3, [r7, #20]
    156e:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1572:	617b      	str	r3, [r7, #20]
    1574:	e00d      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    1576:	687b      	ldr	r3, [r7, #4]
    1578:	0d5b      	lsrs	r3, r3, #21
    157a:	011b      	lsls	r3, r3, #4
    157c:	693a      	ldr	r2, [r7, #16]
    157e:	fa02 f303 	lsl.w	r3, r2, r3
    1582:	43db      	mvns	r3, r3
    1584:	697a      	ldr	r2, [r7, #20]
    1586:	4013      	ands	r3, r2
    1588:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    158a:	697b      	ldr	r3, [r7, #20]
    158c:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1590:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
    1592:	78fb      	ldrb	r3, [r7, #3]
    1594:	2b00      	cmp	r3, #0
    1596:	d008      	beq.n	15aa <GPIO_PinRemapConfig+0xce>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
    1598:	687b      	ldr	r3, [r7, #4]
    159a:	0d5b      	lsrs	r3, r3, #21
    159c:	011b      	lsls	r3, r3, #4
    159e:	693a      	ldr	r2, [r7, #16]
    15a0:	fa02 f303 	lsl.w	r3, r2, r3
    15a4:	697a      	ldr	r2, [r7, #20]
    15a6:	4313      	orrs	r3, r2
    15a8:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    15aa:	687b      	ldr	r3, [r7, #4]
    15ac:	2b00      	cmp	r3, #0
    15ae:	da05      	bge.n	15bc <GPIO_PinRemapConfig+0xe0>
  {
    AFIO->MAPR2 = tmpreg;
    15b0:	2300      	movs	r3, #0
    15b2:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15b6:	697a      	ldr	r2, [r7, #20]
    15b8:	61da      	str	r2, [r3, #28]
    15ba:	e004      	b.n	15c6 <GPIO_PinRemapConfig+0xea>
  }
  else
  {
    AFIO->MAPR = tmpreg;
    15bc:	2300      	movs	r3, #0
    15be:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15c2:	697a      	ldr	r2, [r7, #20]
    15c4:	605a      	str	r2, [r3, #4]
  }
}
    15c6:	371c      	adds	r7, #28
    15c8:	46bd      	mov	sp, r7
    15ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    15ce:	4770      	bx	lr

000015d0 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    15d0:	b490      	push	{r4, r7}
    15d2:	b084      	sub	sp, #16
    15d4:	af00      	add	r7, sp, #0
    15d6:	4602      	mov	r2, r0
    15d8:	460b      	mov	r3, r1
    15da:	71fa      	strb	r2, [r7, #7]
    15dc:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
    15de:	2300      	movs	r3, #0
    15e0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
    15e2:	79bb      	ldrb	r3, [r7, #6]
    15e4:	f003 0303 	and.w	r3, r3, #3
    15e8:	009b      	lsls	r3, r3, #2
    15ea:	220f      	movs	r2, #15
    15ec:	fa02 f303 	lsl.w	r3, r2, r3
    15f0:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
    15f2:	2300      	movs	r3, #0
    15f4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15f8:	79ba      	ldrb	r2, [r7, #6]
    15fa:	0892      	lsrs	r2, r2, #2
    15fc:	b2d2      	uxtb	r2, r2
    15fe:	4610      	mov	r0, r2
    1600:	2200      	movs	r2, #0
    1602:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1606:	79b9      	ldrb	r1, [r7, #6]
    1608:	0889      	lsrs	r1, r1, #2
    160a:	b2c9      	uxtb	r1, r1
    160c:	3102      	adds	r1, #2
    160e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    1612:	68fa      	ldr	r2, [r7, #12]
    1614:	43d2      	mvns	r2, r2
    1616:	4011      	ands	r1, r2
    1618:	1c82      	adds	r2, r0, #2
    161a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
    161e:	2300      	movs	r3, #0
    1620:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1624:	79ba      	ldrb	r2, [r7, #6]
    1626:	0892      	lsrs	r2, r2, #2
    1628:	b2d2      	uxtb	r2, r2
    162a:	4610      	mov	r0, r2
    162c:	2200      	movs	r2, #0
    162e:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1632:	79b9      	ldrb	r1, [r7, #6]
    1634:	0889      	lsrs	r1, r1, #2
    1636:	b2c9      	uxtb	r1, r1
    1638:	3102      	adds	r1, #2
    163a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    163e:	79fc      	ldrb	r4, [r7, #7]
    1640:	79ba      	ldrb	r2, [r7, #6]
    1642:	f002 0203 	and.w	r2, r2, #3
    1646:	0092      	lsls	r2, r2, #2
    1648:	fa04 f202 	lsl.w	r2, r4, r2
    164c:	4311      	orrs	r1, r2
    164e:	1c82      	adds	r2, r0, #2
    1650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    1654:	3710      	adds	r7, #16
    1656:	46bd      	mov	sp, r7
    1658:	bc90      	pop	{r4, r7}
    165a:	4770      	bx	lr

0000165c <GPIO_ETH_MediaInterfaceConfig>:
  *     @arg GPIO_ETH_MediaInterface_MII: MII mode
  *     @arg GPIO_ETH_MediaInterface_RMII: RMII mode
  * @retval None
  */
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface)
{
    165c:	b480      	push	{r7}
    165e:	b083      	sub	sp, #12
    1660:	af00      	add	r7, sp, #0
    1662:	6078      	str	r0, [r7, #4]
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface));

  /* Configure MII_RMII selection bit */
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface;
    1664:	23dc      	movs	r3, #220	; 0xdc
    1666:	f2c4 2320 	movt	r3, #16928	; 0x4220
    166a:	687a      	ldr	r2, [r7, #4]
    166c:	601a      	str	r2, [r3, #0]
}
    166e:	370c      	adds	r7, #12
    1670:	46bd      	mov	sp, r7
    1672:	f85d 7b04 	ldr.w	r7, [sp], #4
    1676:	4770      	bx	lr

00001678 <USART_DeInit>:
  *   This parameter can be one of the following values:
  *      USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
    1678:	b580      	push	{r7, lr}
    167a:	b082      	sub	sp, #8
    167c:	af00      	add	r7, sp, #0
    167e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
    1680:	687a      	ldr	r2, [r7, #4]
    1682:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    1686:	f2c4 0301 	movt	r3, #16385	; 0x4001
    168a:	429a      	cmp	r2, r3
    168c:	d10a      	bne.n	16a4 <USART_DeInit+0x2c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    168e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    1692:	2101      	movs	r1, #1
    1694:	f7ff fbe4 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
    1698:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    169c:	2100      	movs	r1, #0
    169e:	f7ff fbdf 	bl	e60 <RCC_APB2PeriphResetCmd>
    16a2:	e046      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART2)
    16a4:	687a      	ldr	r2, [r7, #4]
    16a6:	f44f 4388 	mov.w	r3, #17408	; 0x4400
    16aa:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16ae:	429a      	cmp	r2, r3
    16b0:	d10a      	bne.n	16c8 <USART_DeInit+0x50>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    16b2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16b6:	2101      	movs	r1, #1
    16b8:	f7ff fbfa 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
    16bc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16c0:	2100      	movs	r1, #0
    16c2:	f7ff fbf5 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16c6:	e034      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART3)
    16c8:	687a      	ldr	r2, [r7, #4]
    16ca:	f44f 4390 	mov.w	r3, #18432	; 0x4800
    16ce:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16d2:	429a      	cmp	r2, r3
    16d4:	d10a      	bne.n	16ec <USART_DeInit+0x74>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    16d6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16da:	2101      	movs	r1, #1
    16dc:	f7ff fbe8 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
    16e0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16e4:	2100      	movs	r1, #0
    16e6:	f7ff fbe3 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16ea:	e022      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == UART4)
    16ec:	687a      	ldr	r2, [r7, #4]
    16ee:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
    16f2:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16f6:	429a      	cmp	r2, r3
    16f8:	d10a      	bne.n	1710 <USART_DeInit+0x98>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    16fa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    16fe:	2101      	movs	r1, #1
    1700:	f7ff fbd6 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
    1704:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1708:	2100      	movs	r1, #0
    170a:	f7ff fbd1 	bl	eb0 <RCC_APB1PeriphResetCmd>
    170e:	e010      	b.n	1732 <USART_DeInit+0xba>
  }
  else
  {
    if (USARTx == UART5)
    1710:	687a      	ldr	r2, [r7, #4]
    1712:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    1716:	f2c4 0300 	movt	r3, #16384	; 0x4000
    171a:	429a      	cmp	r2, r3
    171c:	d109      	bne.n	1732 <USART_DeInit+0xba>
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    171e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    1722:	2101      	movs	r1, #1
    1724:	f7ff fbc4 	bl	eb0 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    1728:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    172c:	2100      	movs	r1, #0
    172e:	f7ff fbbf 	bl	eb0 <RCC_APB1PeriphResetCmd>
    }
  }
}
    1732:	3708      	adds	r7, #8
    1734:	46bd      	mov	sp, r7
    1736:	bd80      	pop	{r7, pc}

00001738 <USART_Init>:
  *         that contains the configuration information for the specified USART
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
    1738:	b580      	push	{r7, lr}
    173a:	b08c      	sub	sp, #48	; 0x30
    173c:	af00      	add	r7, sp, #0
    173e:	6078      	str	r0, [r7, #4]
    1740:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
    1742:	2300      	movs	r3, #0
    1744:	62fb      	str	r3, [r7, #44]	; 0x2c
    1746:	2300      	movs	r3, #0
    1748:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
    174a:	2300      	movs	r3, #0
    174c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
    174e:	2300      	movs	r3, #0
    1750:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
    1752:	2300      	movs	r3, #0
    1754:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    1756:	687b      	ldr	r3, [r7, #4]
    1758:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    175a:	687b      	ldr	r3, [r7, #4]
    175c:	8a1b      	ldrh	r3, [r3, #16]
    175e:	b29b      	uxth	r3, r3
    1760:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
    1762:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1764:	f64c 73ff 	movw	r3, #53247	; 0xcfff
    1768:	4013      	ands	r3, r2
    176a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
    176c:	683b      	ldr	r3, [r7, #0]
    176e:	88db      	ldrh	r3, [r3, #6]
    1770:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1772:	4313      	orrs	r3, r2
    1774:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1778:	b29a      	uxth	r2, r3
    177a:	687b      	ldr	r3, [r7, #4]
    177c:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
    177e:	687b      	ldr	r3, [r7, #4]
    1780:	899b      	ldrh	r3, [r3, #12]
    1782:	b29b      	uxth	r3, r3
    1784:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
    1786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1788:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
    178c:	4013      	ands	r3, r2
    178e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    1790:	683b      	ldr	r3, [r7, #0]
    1792:	889a      	ldrh	r2, [r3, #4]
    1794:	683b      	ldr	r3, [r7, #0]
    1796:	891b      	ldrh	r3, [r3, #8]
    1798:	4313      	orrs	r3, r2
    179a:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
    179c:	683b      	ldr	r3, [r7, #0]
    179e:	895b      	ldrh	r3, [r3, #10]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    17a0:	4313      	orrs	r3, r2
    17a2:	b29b      	uxth	r3, r3
    17a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17a6:	4313      	orrs	r3, r2
    17a8:	62fb      	str	r3, [r7, #44]	; 0x2c
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
    17aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17ac:	b29a      	uxth	r2, r3
    17ae:	687b      	ldr	r3, [r7, #4]
    17b0:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/
  tmpreg = USARTx->CR3;
    17b2:	687b      	ldr	r3, [r7, #4]
    17b4:	8a9b      	ldrh	r3, [r3, #20]
    17b6:	b29b      	uxth	r3, r3
    17b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
    17ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17bc:	f64f 43ff 	movw	r3, #64767	; 0xfcff
    17c0:	4013      	ands	r3, r2
    17c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
    17c4:	683b      	ldr	r3, [r7, #0]
    17c6:	899b      	ldrh	r3, [r3, #12]
    17c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17ca:	4313      	orrs	r3, r2
    17cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
    17ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17d0:	b29a      	uxth	r2, r3
    17d2:	687b      	ldr	r3, [r7, #4]
    17d4:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
    17d6:	f107 0308 	add.w	r3, r7, #8
    17da:	4618      	mov	r0, r3
    17dc:	f7ff f9ea 	bl	bb4 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
    17e0:	69fa      	ldr	r2, [r7, #28]
    17e2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    17e6:	f2c4 0301 	movt	r3, #16385	; 0x4001
    17ea:	429a      	cmp	r2, r3
    17ec:	d102      	bne.n	17f4 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
    17ee:	697b      	ldr	r3, [r7, #20]
    17f0:	62bb      	str	r3, [r7, #40]	; 0x28
    17f2:	e001      	b.n	17f8 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
    17f4:	693b      	ldr	r3, [r7, #16]
    17f6:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    17f8:	687b      	ldr	r3, [r7, #4]
    17fa:	899b      	ldrh	r3, [r3, #12]
    17fc:	b29b      	uxth	r3, r3
    17fe:	b29b      	uxth	r3, r3
    1800:	b21b      	sxth	r3, r3
    1802:	2b00      	cmp	r3, #0
    1804:	da0c      	bge.n	1820 <USART_Init+0xe8>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));
    1806:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1808:	4613      	mov	r3, r2
    180a:	009b      	lsls	r3, r3, #2
    180c:	4413      	add	r3, r2
    180e:	009a      	lsls	r2, r3, #2
    1810:	441a      	add	r2, r3
    1812:	683b      	ldr	r3, [r7, #0]
    1814:	681b      	ldr	r3, [r3, #0]
    1816:	005b      	lsls	r3, r3, #1
    1818:	fbb2 f3f3 	udiv	r3, r2, r3
    181c:	627b      	str	r3, [r7, #36]	; 0x24
    181e:	e00b      	b.n	1838 <USART_Init+0x100>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));
    1820:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1822:	4613      	mov	r3, r2
    1824:	009b      	lsls	r3, r3, #2
    1826:	4413      	add	r3, r2
    1828:	009a      	lsls	r2, r3, #2
    182a:	441a      	add	r2, r3
    182c:	683b      	ldr	r3, [r7, #0]
    182e:	681b      	ldr	r3, [r3, #0]
    1830:	009b      	lsls	r3, r3, #2
    1832:	fbb2 f3f3 	udiv	r3, r2, r3
    1836:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
    1838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    183a:	f248 531f 	movw	r3, #34079	; 0x851f
    183e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    1842:	fba3 1302 	umull	r1, r3, r3, r2
    1846:	095b      	lsrs	r3, r3, #5
    1848:	011b      	lsls	r3, r3, #4
    184a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
    184c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    184e:	091b      	lsrs	r3, r3, #4
    1850:	2264      	movs	r2, #100	; 0x64
    1852:	fb02 f303 	mul.w	r3, r2, r3
    1856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1858:	1ad3      	subs	r3, r2, r3
    185a:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    185c:	687b      	ldr	r3, [r7, #4]
    185e:	899b      	ldrh	r3, [r3, #12]
    1860:	b29b      	uxth	r3, r3
    1862:	b29b      	uxth	r3, r3
    1864:	b21b      	sxth	r3, r3
    1866:	2b00      	cmp	r3, #0
    1868:	da10      	bge.n	188c <USART_Init+0x154>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
    186a:	6a3b      	ldr	r3, [r7, #32]
    186c:	00db      	lsls	r3, r3, #3
    186e:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1872:	f248 531f 	movw	r3, #34079	; 0x851f
    1876:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    187a:	fba3 1302 	umull	r1, r3, r3, r2
    187e:	095b      	lsrs	r3, r3, #5
    1880:	f003 0307 	and.w	r3, r3, #7
    1884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1886:	4313      	orrs	r3, r2
    1888:	62fb      	str	r3, [r7, #44]	; 0x2c
    188a:	e00f      	b.n	18ac <USART_Init+0x174>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
    188c:	6a3b      	ldr	r3, [r7, #32]
    188e:	011b      	lsls	r3, r3, #4
    1890:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1894:	f248 531f 	movw	r3, #34079	; 0x851f
    1898:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    189c:	fba3 1302 	umull	r1, r3, r3, r2
    18a0:	095b      	lsrs	r3, r3, #5
    18a2:	f003 030f 	and.w	r3, r3, #15
    18a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    18a8:	4313      	orrs	r3, r2
    18aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
    18ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    18ae:	b29a      	uxth	r2, r3
    18b0:	687b      	ldr	r3, [r7, #4]
    18b2:	811a      	strh	r2, [r3, #8]
}
    18b4:	3730      	adds	r7, #48	; 0x30
    18b6:	46bd      	mov	sp, r7
    18b8:	bd80      	pop	{r7, pc}
    18ba:	bf00      	nop

000018bc <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
    18bc:	b480      	push	{r7}
    18be:	b083      	sub	sp, #12
    18c0:	af00      	add	r7, sp, #0
    18c2:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
    18c4:	687b      	ldr	r3, [r7, #4]
    18c6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
    18ca:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
    18cc:	687b      	ldr	r3, [r7, #4]
    18ce:	2200      	movs	r2, #0
    18d0:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
    18d2:	687b      	ldr	r3, [r7, #4]
    18d4:	2200      	movs	r2, #0
    18d6:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
    18d8:	687b      	ldr	r3, [r7, #4]
    18da:	2200      	movs	r2, #0
    18dc:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    18de:	687b      	ldr	r3, [r7, #4]
    18e0:	220c      	movs	r2, #12
    18e2:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    18e4:	687b      	ldr	r3, [r7, #4]
    18e6:	2200      	movs	r2, #0
    18e8:	819a      	strh	r2, [r3, #12]
}
    18ea:	370c      	adds	r7, #12
    18ec:	46bd      	mov	sp, r7
    18ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    18f2:	4770      	bx	lr

000018f4 <USART_ClockInit>:
  *         USART peripheral.
  * @note The Smart Card and Synchronous modes are not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    18f4:	b480      	push	{r7}
    18f6:	b085      	sub	sp, #20
    18f8:	af00      	add	r7, sp, #0
    18fa:	6078      	str	r0, [r7, #4]
    18fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
    18fe:	2300      	movs	r3, #0
    1900:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    1902:	687b      	ldr	r3, [r7, #4]
    1904:	8a1b      	ldrh	r3, [r3, #16]
    1906:	b29b      	uxth	r3, r3
    1908:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
    190a:	68fa      	ldr	r2, [r7, #12]
    190c:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
    1910:	4013      	ands	r3, r2
    1912:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1914:	683b      	ldr	r3, [r7, #0]
    1916:	881a      	ldrh	r2, [r3, #0]
    1918:	683b      	ldr	r3, [r7, #0]
    191a:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
    191c:	4313      	orrs	r3, r2
    191e:	b29a      	uxth	r2, r3
    1920:	683b      	ldr	r3, [r7, #0]
    1922:	889b      	ldrh	r3, [r3, #4]
    1924:	4313      	orrs	r3, r2
    1926:	b29a      	uxth	r2, r3
    1928:	683b      	ldr	r3, [r7, #0]
    192a:	88db      	ldrh	r3, [r3, #6]
    192c:	4313      	orrs	r3, r2
    192e:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1930:	68fa      	ldr	r2, [r7, #12]
    1932:	4313      	orrs	r3, r2
    1934:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1936:	68fb      	ldr	r3, [r7, #12]
    1938:	b29a      	uxth	r2, r3
    193a:	687b      	ldr	r3, [r7, #4]
    193c:	821a      	strh	r2, [r3, #16]
}
    193e:	3714      	adds	r7, #20
    1940:	46bd      	mov	sp, r7
    1942:	f85d 7b04 	ldr.w	r7, [sp], #4
    1946:	4770      	bx	lr

00001948 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    1948:	b480      	push	{r7}
    194a:	b083      	sub	sp, #12
    194c:	af00      	add	r7, sp, #0
    194e:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
    1950:	687b      	ldr	r3, [r7, #4]
    1952:	2200      	movs	r2, #0
    1954:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
    1956:	687b      	ldr	r3, [r7, #4]
    1958:	2200      	movs	r2, #0
    195a:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
    195c:	687b      	ldr	r3, [r7, #4]
    195e:	2200      	movs	r2, #0
    1960:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
    1962:	687b      	ldr	r3, [r7, #4]
    1964:	2200      	movs	r2, #0
    1966:	80da      	strh	r2, [r3, #6]
}
    1968:	370c      	adds	r7, #12
    196a:	46bd      	mov	sp, r7
    196c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1970:	4770      	bx	lr
    1972:	bf00      	nop

00001974 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1974:	b480      	push	{r7}
    1976:	b083      	sub	sp, #12
    1978:	af00      	add	r7, sp, #0
    197a:	6078      	str	r0, [r7, #4]
    197c:	460b      	mov	r3, r1
    197e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1980:	78fb      	ldrb	r3, [r7, #3]
    1982:	2b00      	cmp	r3, #0
    1984:	d008      	beq.n	1998 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
    1986:	687b      	ldr	r3, [r7, #4]
    1988:	899b      	ldrh	r3, [r3, #12]
    198a:	b29b      	uxth	r3, r3
    198c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1990:	b29a      	uxth	r2, r3
    1992:	687b      	ldr	r3, [r7, #4]
    1994:	819a      	strh	r2, [r3, #12]
    1996:	e007      	b.n	19a8 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
    1998:	687b      	ldr	r3, [r7, #4]
    199a:	899b      	ldrh	r3, [r3, #12]
    199c:	b29b      	uxth	r3, r3
    199e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    19a2:	b29a      	uxth	r2, r3
    19a4:	687b      	ldr	r3, [r7, #4]
    19a6:	819a      	strh	r2, [r3, #12]
  }
}
    19a8:	370c      	adds	r7, #12
    19aa:	46bd      	mov	sp, r7
    19ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    19b0:	4770      	bx	lr
    19b2:	bf00      	nop

000019b4 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
    19b4:	b480      	push	{r7}
    19b6:	b087      	sub	sp, #28
    19b8:	af00      	add	r7, sp, #0
    19ba:	6078      	str	r0, [r7, #4]
    19bc:	4613      	mov	r3, r2
    19be:	460a      	mov	r2, r1
    19c0:	807a      	strh	r2, [r7, #2]
    19c2:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
    19c4:	2300      	movs	r3, #0
    19c6:	613b      	str	r3, [r7, #16]
    19c8:	2300      	movs	r3, #0
    19ca:	60fb      	str	r3, [r7, #12]
    19cc:	2300      	movs	r3, #0
    19ce:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
    19d0:	2300      	movs	r3, #0
    19d2:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    19d4:	687b      	ldr	r3, [r7, #4]
    19d6:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    19d8:	887b      	ldrh	r3, [r7, #2]
    19da:	b2db      	uxtb	r3, r3
    19dc:	095b      	lsrs	r3, r3, #5
    19de:	b2db      	uxtb	r3, r3
    19e0:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
    19e2:	887b      	ldrh	r3, [r7, #2]
    19e4:	f003 031f 	and.w	r3, r3, #31
    19e8:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
    19ea:	68fb      	ldr	r3, [r7, #12]
    19ec:	2201      	movs	r2, #1
    19ee:	fa02 f303 	lsl.w	r3, r2, r3
    19f2:	60bb      	str	r3, [r7, #8]

  if (usartreg == 0x01) /* The IT is in CR1 register */
    19f4:	693b      	ldr	r3, [r7, #16]
    19f6:	2b01      	cmp	r3, #1
    19f8:	d103      	bne.n	1a02 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
    19fa:	697b      	ldr	r3, [r7, #20]
    19fc:	330c      	adds	r3, #12
    19fe:	617b      	str	r3, [r7, #20]
    1a00:	e009      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
    1a02:	693b      	ldr	r3, [r7, #16]
    1a04:	2b02      	cmp	r3, #2
    1a06:	d103      	bne.n	1a10 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
    1a08:	697b      	ldr	r3, [r7, #20]
    1a0a:	3310      	adds	r3, #16
    1a0c:	617b      	str	r3, [r7, #20]
    1a0e:	e002      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14;
    1a10:	697b      	ldr	r3, [r7, #20]
    1a12:	3314      	adds	r3, #20
    1a14:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
    1a16:	787b      	ldrb	r3, [r7, #1]
    1a18:	2b00      	cmp	r3, #0
    1a1a:	d006      	beq.n	1a2a <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
    1a1c:	697b      	ldr	r3, [r7, #20]
    1a1e:	697a      	ldr	r2, [r7, #20]
    1a20:	6811      	ldr	r1, [r2, #0]
    1a22:	68ba      	ldr	r2, [r7, #8]
    1a24:	430a      	orrs	r2, r1
    1a26:	601a      	str	r2, [r3, #0]
    1a28:	e006      	b.n	1a38 <USART_ITConfig+0x84>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
    1a2a:	697b      	ldr	r3, [r7, #20]
    1a2c:	697a      	ldr	r2, [r7, #20]
    1a2e:	6811      	ldr	r1, [r2, #0]
    1a30:	68ba      	ldr	r2, [r7, #8]
    1a32:	43d2      	mvns	r2, r2
    1a34:	400a      	ands	r2, r1
    1a36:	601a      	str	r2, [r3, #0]
  }
}
    1a38:	371c      	adds	r7, #28
    1a3a:	46bd      	mov	sp, r7
    1a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a40:	4770      	bx	lr
    1a42:	bf00      	nop

00001a44 <USART_DMACmd>:
  * @note The DMA mode is not available for UART5 except in the STM32
  *       High density value line devices(STM32F10X_HD_VL).
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
    1a44:	b480      	push	{r7}
    1a46:	b083      	sub	sp, #12
    1a48:	af00      	add	r7, sp, #0
    1a4a:	6078      	str	r0, [r7, #4]
    1a4c:	4613      	mov	r3, r2
    1a4e:	460a      	mov	r2, r1
    1a50:	807a      	strh	r2, [r7, #2]
    1a52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1a54:	787b      	ldrb	r3, [r7, #1]
    1a56:	2b00      	cmp	r3, #0
    1a58:	d008      	beq.n	1a6c <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
    1a5a:	687b      	ldr	r3, [r7, #4]
    1a5c:	8a9b      	ldrh	r3, [r3, #20]
    1a5e:	b29a      	uxth	r2, r3
    1a60:	887b      	ldrh	r3, [r7, #2]
    1a62:	4313      	orrs	r3, r2
    1a64:	b29a      	uxth	r2, r3
    1a66:	687b      	ldr	r3, [r7, #4]
    1a68:	829a      	strh	r2, [r3, #20]
    1a6a:	e009      	b.n	1a80 <USART_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
    1a6c:	687b      	ldr	r3, [r7, #4]
    1a6e:	8a9b      	ldrh	r3, [r3, #20]
    1a70:	b29a      	uxth	r2, r3
    1a72:	887b      	ldrh	r3, [r7, #2]
    1a74:	43db      	mvns	r3, r3
    1a76:	b29b      	uxth	r3, r3
    1a78:	4013      	ands	r3, r2
    1a7a:	b29a      	uxth	r2, r3
    1a7c:	687b      	ldr	r3, [r7, #4]
    1a7e:	829a      	strh	r2, [r3, #20]
  }
}
    1a80:	370c      	adds	r7, #12
    1a82:	46bd      	mov	sp, r7
    1a84:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a88:	4770      	bx	lr
    1a8a:	bf00      	nop

00001a8c <USART_SetAddress>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
    1a8c:	b480      	push	{r7}
    1a8e:	b083      	sub	sp, #12
    1a90:	af00      	add	r7, sp, #0
    1a92:	6078      	str	r0, [r7, #4]
    1a94:	460b      	mov	r3, r1
    1a96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address));

  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
    1a98:	687b      	ldr	r3, [r7, #4]
    1a9a:	8a1b      	ldrh	r3, [r3, #16]
    1a9c:	b29b      	uxth	r3, r3
    1a9e:	f023 030f 	bic.w	r3, r3, #15
    1aa2:	b29a      	uxth	r2, r3
    1aa4:	687b      	ldr	r3, [r7, #4]
    1aa6:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
    1aa8:	687b      	ldr	r3, [r7, #4]
    1aaa:	8a1b      	ldrh	r3, [r3, #16]
    1aac:	b29a      	uxth	r2, r3
    1aae:	78fb      	ldrb	r3, [r7, #3]
    1ab0:	b29b      	uxth	r3, r3
    1ab2:	4313      	orrs	r3, r2
    1ab4:	b29a      	uxth	r2, r3
    1ab6:	687b      	ldr	r3, [r7, #4]
    1ab8:	821a      	strh	r2, [r3, #16]
}
    1aba:	370c      	adds	r7, #12
    1abc:	46bd      	mov	sp, r7
    1abe:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ac2:	4770      	bx	lr

00001ac4 <USART_WakeUpConfig>:
  *     @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *     @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
    1ac4:	b480      	push	{r7}
    1ac6:	b083      	sub	sp, #12
    1ac8:	af00      	add	r7, sp, #0
    1aca:	6078      	str	r0, [r7, #4]
    1acc:	460b      	mov	r3, r1
    1ace:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));

  USARTx->CR1 &= CR1_WAKE_Mask;
    1ad0:	687b      	ldr	r3, [r7, #4]
    1ad2:	899b      	ldrh	r3, [r3, #12]
    1ad4:	b29b      	uxth	r3, r3
    1ad6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1ada:	b29a      	uxth	r2, r3
    1adc:	687b      	ldr	r3, [r7, #4]
    1ade:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
    1ae0:	687b      	ldr	r3, [r7, #4]
    1ae2:	899b      	ldrh	r3, [r3, #12]
    1ae4:	b29a      	uxth	r2, r3
    1ae6:	887b      	ldrh	r3, [r7, #2]
    1ae8:	4313      	orrs	r3, r2
    1aea:	b29a      	uxth	r2, r3
    1aec:	687b      	ldr	r3, [r7, #4]
    1aee:	819a      	strh	r2, [r3, #12]
}
    1af0:	370c      	adds	r7, #12
    1af2:	46bd      	mov	sp, r7
    1af4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1af8:	4770      	bx	lr
    1afa:	bf00      	nop

00001afc <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1afc:	b480      	push	{r7}
    1afe:	b083      	sub	sp, #12
    1b00:	af00      	add	r7, sp, #0
    1b02:	6078      	str	r0, [r7, #4]
    1b04:	460b      	mov	r3, r1
    1b06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b08:	78fb      	ldrb	r3, [r7, #3]
    1b0a:	2b00      	cmp	r3, #0
    1b0c:	d008      	beq.n	1b20 <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
    1b0e:	687b      	ldr	r3, [r7, #4]
    1b10:	899b      	ldrh	r3, [r3, #12]
    1b12:	b29b      	uxth	r3, r3
    1b14:	f043 0302 	orr.w	r3, r3, #2
    1b18:	b29a      	uxth	r2, r3
    1b1a:	687b      	ldr	r3, [r7, #4]
    1b1c:	819a      	strh	r2, [r3, #12]
    1b1e:	e007      	b.n	1b30 <USART_ReceiverWakeUpCmd+0x34>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
    1b20:	687b      	ldr	r3, [r7, #4]
    1b22:	899b      	ldrh	r3, [r3, #12]
    1b24:	b29b      	uxth	r3, r3
    1b26:	f023 0302 	bic.w	r3, r3, #2
    1b2a:	b29a      	uxth	r2, r3
    1b2c:	687b      	ldr	r3, [r7, #4]
    1b2e:	819a      	strh	r2, [r3, #12]
  }
}
    1b30:	370c      	adds	r7, #12
    1b32:	46bd      	mov	sp, r7
    1b34:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b38:	4770      	bx	lr
    1b3a:	bf00      	nop

00001b3c <USART_LINBreakDetectLengthConfig>:
  *     @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *     @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
    1b3c:	b480      	push	{r7}
    1b3e:	b083      	sub	sp, #12
    1b40:	af00      	add	r7, sp, #0
    1b42:	6078      	str	r0, [r7, #4]
    1b44:	460b      	mov	r3, r1
    1b46:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));

  USARTx->CR2 &= CR2_LBDL_Mask;
    1b48:	687b      	ldr	r3, [r7, #4]
    1b4a:	8a1b      	ldrh	r3, [r3, #16]
    1b4c:	b29b      	uxth	r3, r3
    1b4e:	f023 0320 	bic.w	r3, r3, #32
    1b52:	b29a      	uxth	r2, r3
    1b54:	687b      	ldr	r3, [r7, #4]
    1b56:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;
    1b58:	687b      	ldr	r3, [r7, #4]
    1b5a:	8a1b      	ldrh	r3, [r3, #16]
    1b5c:	b29a      	uxth	r2, r3
    1b5e:	887b      	ldrh	r3, [r7, #2]
    1b60:	4313      	orrs	r3, r2
    1b62:	b29a      	uxth	r2, r3
    1b64:	687b      	ldr	r3, [r7, #4]
    1b66:	821a      	strh	r2, [r3, #16]
}
    1b68:	370c      	adds	r7, #12
    1b6a:	46bd      	mov	sp, r7
    1b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b70:	4770      	bx	lr
    1b72:	bf00      	nop

00001b74 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1b74:	b480      	push	{r7}
    1b76:	b083      	sub	sp, #12
    1b78:	af00      	add	r7, sp, #0
    1b7a:	6078      	str	r0, [r7, #4]
    1b7c:	460b      	mov	r3, r1
    1b7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b80:	78fb      	ldrb	r3, [r7, #3]
    1b82:	2b00      	cmp	r3, #0
    1b84:	d008      	beq.n	1b98 <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
    1b86:	687b      	ldr	r3, [r7, #4]
    1b88:	8a1b      	ldrh	r3, [r3, #16]
    1b8a:	b29b      	uxth	r3, r3
    1b8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1b90:	b29a      	uxth	r2, r3
    1b92:	687b      	ldr	r3, [r7, #4]
    1b94:	821a      	strh	r2, [r3, #16]
    1b96:	e007      	b.n	1ba8 <USART_LINCmd+0x34>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
    1b98:	687b      	ldr	r3, [r7, #4]
    1b9a:	8a1b      	ldrh	r3, [r3, #16]
    1b9c:	b29b      	uxth	r3, r3
    1b9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    1ba2:	b29a      	uxth	r2, r3
    1ba4:	687b      	ldr	r3, [r7, #4]
    1ba6:	821a      	strh	r2, [r3, #16]
  }
}
    1ba8:	370c      	adds	r7, #12
    1baa:	46bd      	mov	sp, r7
    1bac:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bb0:	4770      	bx	lr
    1bb2:	bf00      	nop

00001bb4 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
    1bb4:	b480      	push	{r7}
    1bb6:	b083      	sub	sp, #12
    1bb8:	af00      	add	r7, sp, #0
    1bba:	6078      	str	r0, [r7, #4]
    1bbc:	460b      	mov	r3, r1
    1bbe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data));

  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
    1bc0:	887b      	ldrh	r3, [r7, #2]
    1bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bc6:	b29a      	uxth	r2, r3
    1bc8:	687b      	ldr	r3, [r7, #4]
    1bca:	809a      	strh	r2, [r3, #4]
}
    1bcc:	370c      	adds	r7, #12
    1bce:	46bd      	mov	sp, r7
    1bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bd4:	4770      	bx	lr
    1bd6:	bf00      	nop

00001bd8 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
    1bd8:	b480      	push	{r7}
    1bda:	b083      	sub	sp, #12
    1bdc:	af00      	add	r7, sp, #0
    1bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
    1be0:	687b      	ldr	r3, [r7, #4]
    1be2:	889b      	ldrh	r3, [r3, #4]
    1be4:	b29b      	uxth	r3, r3
    1be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bea:	b29b      	uxth	r3, r3
}
    1bec:	4618      	mov	r0, r3
    1bee:	370c      	adds	r7, #12
    1bf0:	46bd      	mov	sp, r7
    1bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bf6:	4770      	bx	lr

00001bf8 <USART_SendBreak>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
    1bf8:	b480      	push	{r7}
    1bfa:	b083      	sub	sp, #12
    1bfc:	af00      	add	r7, sp, #0
    1bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
    1c00:	687b      	ldr	r3, [r7, #4]
    1c02:	899b      	ldrh	r3, [r3, #12]
    1c04:	b29b      	uxth	r3, r3
    1c06:	f043 0301 	orr.w	r3, r3, #1
    1c0a:	b29a      	uxth	r2, r3
    1c0c:	687b      	ldr	r3, [r7, #4]
    1c0e:	819a      	strh	r2, [r3, #12]
}
    1c10:	370c      	adds	r7, #12
    1c12:	46bd      	mov	sp, r7
    1c14:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c18:	4770      	bx	lr
    1c1a:	bf00      	nop

00001c1c <USART_SetGuardTime>:
  * @param  USART_GuardTime: specifies the guard time.
  * @note The guard time bits are not available for UART4 and UART5.
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{
    1c1c:	b480      	push	{r7}
    1c1e:	b083      	sub	sp, #12
    1c20:	af00      	add	r7, sp, #0
    1c22:	6078      	str	r0, [r7, #4]
    1c24:	460b      	mov	r3, r1
    1c26:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));

  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
    1c28:	687b      	ldr	r3, [r7, #4]
    1c2a:	8b1b      	ldrh	r3, [r3, #24]
    1c2c:	b29b      	uxth	r3, r3
    1c2e:	b2db      	uxtb	r3, r3
    1c30:	b29a      	uxth	r2, r3
    1c32:	687b      	ldr	r3, [r7, #4]
    1c34:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
    1c36:	687b      	ldr	r3, [r7, #4]
    1c38:	8b1b      	ldrh	r3, [r3, #24]
    1c3a:	b29a      	uxth	r2, r3
    1c3c:	78fb      	ldrb	r3, [r7, #3]
    1c3e:	b29b      	uxth	r3, r3
    1c40:	021b      	lsls	r3, r3, #8
    1c42:	b29b      	uxth	r3, r3
    1c44:	4313      	orrs	r3, r2
    1c46:	b29a      	uxth	r2, r3
    1c48:	687b      	ldr	r3, [r7, #4]
    1c4a:	831a      	strh	r2, [r3, #24]
}
    1c4c:	370c      	adds	r7, #12
    1c4e:	46bd      	mov	sp, r7
    1c50:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c54:	4770      	bx	lr
    1c56:	bf00      	nop

00001c58 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock.
  * @note   The function is used for IrDA mode with UART4 and UART5.
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{
    1c58:	b480      	push	{r7}
    1c5a:	b083      	sub	sp, #12
    1c5c:	af00      	add	r7, sp, #0
    1c5e:	6078      	str	r0, [r7, #4]
    1c60:	460b      	mov	r3, r1
    1c62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
    1c64:	687b      	ldr	r3, [r7, #4]
    1c66:	8b1b      	ldrh	r3, [r3, #24]
    1c68:	b29b      	uxth	r3, r3
    1c6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    1c6e:	b29a      	uxth	r2, r3
    1c70:	687b      	ldr	r3, [r7, #4]
    1c72:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
    1c74:	687b      	ldr	r3, [r7, #4]
    1c76:	8b1b      	ldrh	r3, [r3, #24]
    1c78:	b29a      	uxth	r2, r3
    1c7a:	78fb      	ldrb	r3, [r7, #3]
    1c7c:	b29b      	uxth	r3, r3
    1c7e:	4313      	orrs	r3, r2
    1c80:	b29a      	uxth	r2, r3
    1c82:	687b      	ldr	r3, [r7, #4]
    1c84:	831a      	strh	r2, [r3, #24]
}
    1c86:	370c      	adds	r7, #12
    1c88:	46bd      	mov	sp, r7
    1c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c8e:	4770      	bx	lr

00001c90 <USART_SmartCardCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1c90:	b480      	push	{r7}
    1c92:	b083      	sub	sp, #12
    1c94:	af00      	add	r7, sp, #0
    1c96:	6078      	str	r0, [r7, #4]
    1c98:	460b      	mov	r3, r1
    1c9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1c9c:	78fb      	ldrb	r3, [r7, #3]
    1c9e:	2b00      	cmp	r3, #0
    1ca0:	d008      	beq.n	1cb4 <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
    1ca2:	687b      	ldr	r3, [r7, #4]
    1ca4:	8a9b      	ldrh	r3, [r3, #20]
    1ca6:	b29b      	uxth	r3, r3
    1ca8:	f043 0320 	orr.w	r3, r3, #32
    1cac:	b29a      	uxth	r2, r3
    1cae:	687b      	ldr	r3, [r7, #4]
    1cb0:	829a      	strh	r2, [r3, #20]
    1cb2:	e007      	b.n	1cc4 <USART_SmartCardCmd+0x34>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
    1cb4:	687b      	ldr	r3, [r7, #4]
    1cb6:	8a9b      	ldrh	r3, [r3, #20]
    1cb8:	b29b      	uxth	r3, r3
    1cba:	f023 0320 	bic.w	r3, r3, #32
    1cbe:	b29a      	uxth	r2, r3
    1cc0:	687b      	ldr	r3, [r7, #4]
    1cc2:	829a      	strh	r2, [r3, #20]
  }
}
    1cc4:	370c      	adds	r7, #12
    1cc6:	46bd      	mov	sp, r7
    1cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ccc:	4770      	bx	lr
    1cce:	bf00      	nop

00001cd0 <USART_SmartCardNACKCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1cd0:	b480      	push	{r7}
    1cd2:	b083      	sub	sp, #12
    1cd4:	af00      	add	r7, sp, #0
    1cd6:	6078      	str	r0, [r7, #4]
    1cd8:	460b      	mov	r3, r1
    1cda:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1cdc:	78fb      	ldrb	r3, [r7, #3]
    1cde:	2b00      	cmp	r3, #0
    1ce0:	d008      	beq.n	1cf4 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
    1ce2:	687b      	ldr	r3, [r7, #4]
    1ce4:	8a9b      	ldrh	r3, [r3, #20]
    1ce6:	b29b      	uxth	r3, r3
    1ce8:	f043 0310 	orr.w	r3, r3, #16
    1cec:	b29a      	uxth	r2, r3
    1cee:	687b      	ldr	r3, [r7, #4]
    1cf0:	829a      	strh	r2, [r3, #20]
    1cf2:	e007      	b.n	1d04 <USART_SmartCardNACKCmd+0x34>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
    1cf4:	687b      	ldr	r3, [r7, #4]
    1cf6:	8a9b      	ldrh	r3, [r3, #20]
    1cf8:	b29b      	uxth	r3, r3
    1cfa:	f023 0310 	bic.w	r3, r3, #16
    1cfe:	b29a      	uxth	r2, r3
    1d00:	687b      	ldr	r3, [r7, #4]
    1d02:	829a      	strh	r2, [r3, #20]
  }
}
    1d04:	370c      	adds	r7, #12
    1d06:	46bd      	mov	sp, r7
    1d08:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d0c:	4770      	bx	lr
    1d0e:	bf00      	nop

00001d10 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d10:	b480      	push	{r7}
    1d12:	b083      	sub	sp, #12
    1d14:	af00      	add	r7, sp, #0
    1d16:	6078      	str	r0, [r7, #4]
    1d18:	460b      	mov	r3, r1
    1d1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d1c:	78fb      	ldrb	r3, [r7, #3]
    1d1e:	2b00      	cmp	r3, #0
    1d20:	d008      	beq.n	1d34 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
    1d22:	687b      	ldr	r3, [r7, #4]
    1d24:	8a9b      	ldrh	r3, [r3, #20]
    1d26:	b29b      	uxth	r3, r3
    1d28:	f043 0308 	orr.w	r3, r3, #8
    1d2c:	b29a      	uxth	r2, r3
    1d2e:	687b      	ldr	r3, [r7, #4]
    1d30:	829a      	strh	r2, [r3, #20]
    1d32:	e007      	b.n	1d44 <USART_HalfDuplexCmd+0x34>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
    1d34:	687b      	ldr	r3, [r7, #4]
    1d36:	8a9b      	ldrh	r3, [r3, #20]
    1d38:	b29b      	uxth	r3, r3
    1d3a:	f023 0308 	bic.w	r3, r3, #8
    1d3e:	b29a      	uxth	r2, r3
    1d40:	687b      	ldr	r3, [r7, #4]
    1d42:	829a      	strh	r2, [r3, #20]
  }
}
    1d44:	370c      	adds	r7, #12
    1d46:	46bd      	mov	sp, r7
    1d48:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d4c:	4770      	bx	lr
    1d4e:	bf00      	nop

00001d50 <USART_OverSampling8Cmd>:
  *     This function has to be called before calling USART_Init()
  *     function in order to have correct baudrate Divider value.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d50:	b480      	push	{r7}
    1d52:	b083      	sub	sp, #12
    1d54:	af00      	add	r7, sp, #0
    1d56:	6078      	str	r0, [r7, #4]
    1d58:	460b      	mov	r3, r1
    1d5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d5c:	78fb      	ldrb	r3, [r7, #3]
    1d5e:	2b00      	cmp	r3, #0
    1d60:	d00a      	beq.n	1d78 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= CR1_OVER8_Set;
    1d62:	687b      	ldr	r3, [r7, #4]
    1d64:	899b      	ldrh	r3, [r3, #12]
    1d66:	b29b      	uxth	r3, r3
    1d68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    1d6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    1d70:	b29a      	uxth	r2, r3
    1d72:	687b      	ldr	r3, [r7, #4]
    1d74:	819a      	strh	r2, [r3, #12]
    1d76:	e007      	b.n	1d88 <USART_OverSampling8Cmd+0x38>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= CR1_OVER8_Reset;
    1d78:	687b      	ldr	r3, [r7, #4]
    1d7a:	899b      	ldrh	r3, [r3, #12]
    1d7c:	b29b      	uxth	r3, r3
    1d7e:	f3c3 030e 	ubfx	r3, r3, #0, #15
    1d82:	b29a      	uxth	r2, r3
    1d84:	687b      	ldr	r3, [r7, #4]
    1d86:	819a      	strh	r2, [r3, #12]
  }
}
    1d88:	370c      	adds	r7, #12
    1d8a:	46bd      	mov	sp, r7
    1d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d90:	4770      	bx	lr
    1d92:	bf00      	nop

00001d94 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d94:	b480      	push	{r7}
    1d96:	b083      	sub	sp, #12
    1d98:	af00      	add	r7, sp, #0
    1d9a:	6078      	str	r0, [r7, #4]
    1d9c:	460b      	mov	r3, r1
    1d9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1da0:	78fb      	ldrb	r3, [r7, #3]
    1da2:	2b00      	cmp	r3, #0
    1da4:	d008      	beq.n	1db8 <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= CR3_ONEBITE_Set;
    1da6:	687b      	ldr	r3, [r7, #4]
    1da8:	8a9b      	ldrh	r3, [r3, #20]
    1daa:	b29b      	uxth	r3, r3
    1dac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    1db0:	b29a      	uxth	r2, r3
    1db2:	687b      	ldr	r3, [r7, #4]
    1db4:	829a      	strh	r2, [r3, #20]
    1db6:	e007      	b.n	1dc8 <USART_OneBitMethodCmd+0x34>
  }
  else
  {
    /* Disable tthe one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= CR3_ONEBITE_Reset;
    1db8:	687b      	ldr	r3, [r7, #4]
    1dba:	8a9b      	ldrh	r3, [r3, #20]
    1dbc:	b29b      	uxth	r3, r3
    1dbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1dc2:	b29a      	uxth	r2, r3
    1dc4:	687b      	ldr	r3, [r7, #4]
    1dc6:	829a      	strh	r2, [r3, #20]
  }
}
    1dc8:	370c      	adds	r7, #12
    1dca:	46bd      	mov	sp, r7
    1dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1dd0:	4770      	bx	lr
    1dd2:	bf00      	nop

00001dd4 <USART_IrDAConfig>:
  *     @arg USART_IrDAMode_LowPower
  *     @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
    1dd4:	b480      	push	{r7}
    1dd6:	b083      	sub	sp, #12
    1dd8:	af00      	add	r7, sp, #0
    1dda:	6078      	str	r0, [r7, #4]
    1ddc:	460b      	mov	r3, r1
    1dde:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));

  USARTx->CR3 &= CR3_IRLP_Mask;
    1de0:	687b      	ldr	r3, [r7, #4]
    1de2:	8a9b      	ldrh	r3, [r3, #20]
    1de4:	b29b      	uxth	r3, r3
    1de6:	f023 0304 	bic.w	r3, r3, #4
    1dea:	b29a      	uxth	r2, r3
    1dec:	687b      	ldr	r3, [r7, #4]
    1dee:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
    1df0:	687b      	ldr	r3, [r7, #4]
    1df2:	8a9b      	ldrh	r3, [r3, #20]
    1df4:	b29a      	uxth	r2, r3
    1df6:	887b      	ldrh	r3, [r7, #2]
    1df8:	4313      	orrs	r3, r2
    1dfa:	b29a      	uxth	r2, r3
    1dfc:	687b      	ldr	r3, [r7, #4]
    1dfe:	829a      	strh	r2, [r3, #20]
}
    1e00:	370c      	adds	r7, #12
    1e02:	46bd      	mov	sp, r7
    1e04:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e08:	4770      	bx	lr
    1e0a:	bf00      	nop

00001e0c <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1e0c:	b480      	push	{r7}
    1e0e:	b083      	sub	sp, #12
    1e10:	af00      	add	r7, sp, #0
    1e12:	6078      	str	r0, [r7, #4]
    1e14:	460b      	mov	r3, r1
    1e16:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1e18:	78fb      	ldrb	r3, [r7, #3]
    1e1a:	2b00      	cmp	r3, #0
    1e1c:	d008      	beq.n	1e30 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
    1e1e:	687b      	ldr	r3, [r7, #4]
    1e20:	8a9b      	ldrh	r3, [r3, #20]
    1e22:	b29b      	uxth	r3, r3
    1e24:	f043 0302 	orr.w	r3, r3, #2
    1e28:	b29a      	uxth	r2, r3
    1e2a:	687b      	ldr	r3, [r7, #4]
    1e2c:	829a      	strh	r2, [r3, #20]
    1e2e:	e007      	b.n	1e40 <USART_IrDACmd+0x34>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
    1e30:	687b      	ldr	r3, [r7, #4]
    1e32:	8a9b      	ldrh	r3, [r3, #20]
    1e34:	b29b      	uxth	r3, r3
    1e36:	f023 0302 	bic.w	r3, r3, #2
    1e3a:	b29a      	uxth	r2, r3
    1e3c:	687b      	ldr	r3, [r7, #4]
    1e3e:	829a      	strh	r2, [r3, #20]
  }
}
    1e40:	370c      	adds	r7, #12
    1e42:	46bd      	mov	sp, r7
    1e44:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e48:	4770      	bx	lr
    1e4a:	bf00      	nop

00001e4c <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e4c:	b480      	push	{r7}
    1e4e:	b085      	sub	sp, #20
    1e50:	af00      	add	r7, sp, #0
    1e52:	6078      	str	r0, [r7, #4]
    1e54:	460b      	mov	r3, r1
    1e56:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
    1e58:	2300      	movs	r3, #0
    1e5a:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
    1e5c:	687b      	ldr	r3, [r7, #4]
    1e5e:	881b      	ldrh	r3, [r3, #0]
    1e60:	b29a      	uxth	r2, r3
    1e62:	887b      	ldrh	r3, [r7, #2]
    1e64:	4013      	ands	r3, r2
    1e66:	b29b      	uxth	r3, r3
    1e68:	2b00      	cmp	r3, #0
    1e6a:	d002      	beq.n	1e72 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
    1e6c:	2301      	movs	r3, #1
    1e6e:	73fb      	strb	r3, [r7, #15]
    1e70:	e001      	b.n	1e76 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    1e72:	2300      	movs	r3, #0
    1e74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    1e76:	7bfb      	ldrb	r3, [r7, #15]
}
    1e78:	4618      	mov	r0, r3
    1e7a:	3714      	adds	r7, #20
    1e7c:	46bd      	mov	sp, r7
    1e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e82:	4770      	bx	lr

00001e84 <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e84:	b480      	push	{r7}
    1e86:	b083      	sub	sp, #12
    1e88:	af00      	add	r7, sp, #0
    1e8a:	6078      	str	r0, [r7, #4]
    1e8c:	460b      	mov	r3, r1
    1e8e:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  USARTx->SR = (uint16_t)~USART_FLAG;
    1e90:	887b      	ldrh	r3, [r7, #2]
    1e92:	43db      	mvns	r3, r3
    1e94:	b29a      	uxth	r2, r3
    1e96:	687b      	ldr	r3, [r7, #4]
    1e98:	801a      	strh	r2, [r3, #0]
}
    1e9a:	370c      	adds	r7, #12
    1e9c:	46bd      	mov	sp, r7
    1e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ea2:	4770      	bx	lr

00001ea4 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1ea4:	b480      	push	{r7}
    1ea6:	b087      	sub	sp, #28
    1ea8:	af00      	add	r7, sp, #0
    1eaa:	6078      	str	r0, [r7, #4]
    1eac:	460b      	mov	r3, r1
    1eae:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
    1eb0:	2300      	movs	r3, #0
    1eb2:	60fb      	str	r3, [r7, #12]
    1eb4:	2300      	movs	r3, #0
    1eb6:	617b      	str	r3, [r7, #20]
    1eb8:	2300      	movs	r3, #0
    1eba:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
    1ebc:	2300      	movs	r3, #0
    1ebe:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    1ec0:	887b      	ldrh	r3, [r7, #2]
    1ec2:	b2db      	uxtb	r3, r3
    1ec4:	095b      	lsrs	r3, r3, #5
    1ec6:	b2db      	uxtb	r3, r3
    1ec8:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
    1eca:	887b      	ldrh	r3, [r7, #2]
    1ecc:	f003 031f 	and.w	r3, r3, #31
    1ed0:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
    1ed2:	697b      	ldr	r3, [r7, #20]
    1ed4:	2201      	movs	r2, #1
    1ed6:	fa02 f303 	lsl.w	r3, r2, r3
    1eda:	617b      	str	r3, [r7, #20]

  if (usartreg == 0x01) /* The IT  is in CR1 register */
    1edc:	68bb      	ldr	r3, [r7, #8]
    1ede:	2b01      	cmp	r3, #1
    1ee0:	d106      	bne.n	1ef0 <USART_GetITStatus+0x4c>
  {
    itmask &= USARTx->CR1;
    1ee2:	687b      	ldr	r3, [r7, #4]
    1ee4:	899b      	ldrh	r3, [r3, #12]
    1ee6:	b29b      	uxth	r3, r3
    1ee8:	697a      	ldr	r2, [r7, #20]
    1eea:	4013      	ands	r3, r2
    1eec:	617b      	str	r3, [r7, #20]
    1eee:	e00f      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
    1ef0:	68bb      	ldr	r3, [r7, #8]
    1ef2:	2b02      	cmp	r3, #2
    1ef4:	d106      	bne.n	1f04 <USART_GetITStatus+0x60>
  {
    itmask &= USARTx->CR2;
    1ef6:	687b      	ldr	r3, [r7, #4]
    1ef8:	8a1b      	ldrh	r3, [r3, #16]
    1efa:	b29b      	uxth	r3, r3
    1efc:	697a      	ldr	r2, [r7, #20]
    1efe:	4013      	ands	r3, r2
    1f00:	617b      	str	r3, [r7, #20]
    1f02:	e005      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
    1f04:	687b      	ldr	r3, [r7, #4]
    1f06:	8a9b      	ldrh	r3, [r3, #20]
    1f08:	b29b      	uxth	r3, r3
    1f0a:	697a      	ldr	r2, [r7, #20]
    1f0c:	4013      	ands	r3, r2
    1f0e:	617b      	str	r3, [r7, #20]
  }

  bitpos = USART_IT >> 0x08;
    1f10:	887b      	ldrh	r3, [r7, #2]
    1f12:	0a1b      	lsrs	r3, r3, #8
    1f14:	b29b      	uxth	r3, r3
    1f16:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
    1f18:	68fb      	ldr	r3, [r7, #12]
    1f1a:	2201      	movs	r2, #1
    1f1c:	fa02 f303 	lsl.w	r3, r2, r3
    1f20:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
    1f22:	687b      	ldr	r3, [r7, #4]
    1f24:	881b      	ldrh	r3, [r3, #0]
    1f26:	b29b      	uxth	r3, r3
    1f28:	68fa      	ldr	r2, [r7, #12]
    1f2a:	4013      	ands	r3, r2
    1f2c:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
    1f2e:	697b      	ldr	r3, [r7, #20]
    1f30:	2b00      	cmp	r3, #0
    1f32:	d005      	beq.n	1f40 <USART_GetITStatus+0x9c>
    1f34:	68fb      	ldr	r3, [r7, #12]
    1f36:	2b00      	cmp	r3, #0
    1f38:	d002      	beq.n	1f40 <USART_GetITStatus+0x9c>
  {
    bitstatus = SET;
    1f3a:	2301      	movs	r3, #1
    1f3c:	74fb      	strb	r3, [r7, #19]
    1f3e:	e001      	b.n	1f44 <USART_GetITStatus+0xa0>
  }
  else
  {
    bitstatus = RESET;
    1f40:	2300      	movs	r3, #0
    1f42:	74fb      	strb	r3, [r7, #19]
  }

  return bitstatus;
    1f44:	7cfb      	ldrb	r3, [r7, #19]
}
    1f46:	4618      	mov	r0, r3
    1f48:	371c      	adds	r7, #28
    1f4a:	46bd      	mov	sp, r7
    1f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f50:	4770      	bx	lr
    1f52:	bf00      	nop

00001f54 <USART_ClearITPendingBit>:
  *   - TXE pending bit is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1f54:	b480      	push	{r7}
    1f56:	b085      	sub	sp, #20
    1f58:	af00      	add	r7, sp, #0
    1f5a:	6078      	str	r0, [r7, #4]
    1f5c:	460b      	mov	r3, r1
    1f5e:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
    1f60:	2300      	movs	r3, #0
    1f62:	81fb      	strh	r3, [r7, #14]
    1f64:	2300      	movs	r3, #0
    1f66:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  bitpos = USART_IT >> 0x08;
    1f68:	887b      	ldrh	r3, [r7, #2]
    1f6a:	0a1b      	lsrs	r3, r3, #8
    1f6c:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
    1f6e:	89fb      	ldrh	r3, [r7, #14]
    1f70:	2201      	movs	r2, #1
    1f72:	fa02 f303 	lsl.w	r3, r2, r3
    1f76:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
    1f78:	89bb      	ldrh	r3, [r7, #12]
    1f7a:	43db      	mvns	r3, r3
    1f7c:	b29a      	uxth	r2, r3
    1f7e:	687b      	ldr	r3, [r7, #4]
    1f80:	801a      	strh	r2, [r3, #0]
}
    1f82:	3714      	adds	r7, #20
    1f84:	46bd      	mov	sp, r7
    1f86:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f8a:	4770      	bx	lr

00001f8c <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
    1f8c:	b480      	push	{r7}
    1f8e:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
    1f90:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1f94:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1f98:	2200      	movs	r2, #0
    1f9a:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
    1f9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fa0:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fa4:	2200      	movs	r2, #0
    1fa6:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
    1fa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fac:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fb0:	2200      	movs	r2, #0
    1fb2:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
    1fb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fb8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fbc:	2200      	movs	r2, #0
    1fbe:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x000FFFFF;
    1fc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fc4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1fcc:	f2c0 020f 	movt	r2, #15
    1fd0:	615a      	str	r2, [r3, #20]
}
    1fd2:	46bd      	mov	sp, r7
    1fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1fd8:	4770      	bx	lr
    1fda:	bf00      	nop

00001fdc <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
    1fdc:	b480      	push	{r7}
    1fde:	b085      	sub	sp, #20
    1fe0:	af00      	add	r7, sp, #0
    1fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
    1fe4:	2300      	movs	r3, #0
    1fe6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
    1fe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fec:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1ff0:	60fb      	str	r3, [r7, #12]

  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
    1ff2:	687b      	ldr	r3, [r7, #4]
    1ff4:	799b      	ldrb	r3, [r3, #6]
    1ff6:	2b00      	cmp	r3, #0
    1ff8:	d074      	beq.n	20e4 <EXTI_Init+0x108>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    1ffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1ffe:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2002:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2006:	f2c4 0201 	movt	r2, #16385	; 0x4001
    200a:	6811      	ldr	r1, [r2, #0]
    200c:	687a      	ldr	r2, [r7, #4]
    200e:	6812      	ldr	r2, [r2, #0]
    2010:	43d2      	mvns	r2, r2
    2012:	400a      	ands	r2, r1
    2014:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    2016:	f44f 6380 	mov.w	r3, #1024	; 0x400
    201a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    201e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2022:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2026:	6851      	ldr	r1, [r2, #4]
    2028:	687a      	ldr	r2, [r7, #4]
    202a:	6812      	ldr	r2, [r2, #0]
    202c:	43d2      	mvns	r2, r2
    202e:	400a      	ands	r2, r1
    2030:	605a      	str	r2, [r3, #4]

    tmp += EXTI_InitStruct->EXTI_Mode;
    2032:	687b      	ldr	r3, [r7, #4]
    2034:	791b      	ldrb	r3, [r3, #4]
    2036:	68fa      	ldr	r2, [r7, #12]
    2038:	4413      	add	r3, r2
    203a:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    203c:	68fb      	ldr	r3, [r7, #12]
    203e:	68fa      	ldr	r2, [r7, #12]
    2040:	6811      	ldr	r1, [r2, #0]
    2042:	687a      	ldr	r2, [r7, #4]
    2044:	6812      	ldr	r2, [r2, #0]
    2046:	430a      	orrs	r2, r1
    2048:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    204a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    204e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2052:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2056:	f2c4 0201 	movt	r2, #16385	; 0x4001
    205a:	6891      	ldr	r1, [r2, #8]
    205c:	687a      	ldr	r2, [r7, #4]
    205e:	6812      	ldr	r2, [r2, #0]
    2060:	43d2      	mvns	r2, r2
    2062:	400a      	ands	r2, r1
    2064:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    2066:	f44f 6380 	mov.w	r3, #1024	; 0x400
    206a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    206e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2072:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2076:	68d1      	ldr	r1, [r2, #12]
    2078:	687a      	ldr	r2, [r7, #4]
    207a:	6812      	ldr	r2, [r2, #0]
    207c:	43d2      	mvns	r2, r2
    207e:	400a      	ands	r2, r1
    2080:	60da      	str	r2, [r3, #12]

    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
    2082:	687b      	ldr	r3, [r7, #4]
    2084:	795b      	ldrb	r3, [r3, #5]
    2086:	2b10      	cmp	r3, #16
    2088:	d11a      	bne.n	20c0 <EXTI_Init+0xe4>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
    208a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    208e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2092:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2096:	f2c4 0201 	movt	r2, #16385	; 0x4001
    209a:	6891      	ldr	r1, [r2, #8]
    209c:	687a      	ldr	r2, [r7, #4]
    209e:	6812      	ldr	r2, [r2, #0]
    20a0:	430a      	orrs	r2, r1
    20a2:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    20a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20a8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
    20b0:	f2c4 0201 	movt	r2, #16385	; 0x4001
    20b4:	68d1      	ldr	r1, [r2, #12]
    20b6:	687a      	ldr	r2, [r7, #4]
    20b8:	6812      	ldr	r2, [r2, #0]
    20ba:	430a      	orrs	r2, r1
    20bc:	60da      	str	r2, [r3, #12]
    20be:	e01e      	b.n	20fe <EXTI_Init+0x122>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
    20c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20c4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20c8:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
    20ca:	687b      	ldr	r3, [r7, #4]
    20cc:	795b      	ldrb	r3, [r3, #5]
    20ce:	68fa      	ldr	r2, [r7, #12]
    20d0:	4413      	add	r3, r2
    20d2:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    20d4:	68fb      	ldr	r3, [r7, #12]
    20d6:	68fa      	ldr	r2, [r7, #12]
    20d8:	6811      	ldr	r1, [r2, #0]
    20da:	687a      	ldr	r2, [r7, #4]
    20dc:	6812      	ldr	r2, [r2, #0]
    20de:	430a      	orrs	r2, r1
    20e0:	601a      	str	r2, [r3, #0]
    20e2:	e00c      	b.n	20fe <EXTI_Init+0x122>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
    20e4:	687b      	ldr	r3, [r7, #4]
    20e6:	791b      	ldrb	r3, [r3, #4]
    20e8:	68fa      	ldr	r2, [r7, #12]
    20ea:	4413      	add	r3, r2
    20ec:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
    20ee:	68fb      	ldr	r3, [r7, #12]
    20f0:	68fa      	ldr	r2, [r7, #12]
    20f2:	6811      	ldr	r1, [r2, #0]
    20f4:	687a      	ldr	r2, [r7, #4]
    20f6:	6812      	ldr	r2, [r2, #0]
    20f8:	43d2      	mvns	r2, r2
    20fa:	400a      	ands	r2, r1
    20fc:	601a      	str	r2, [r3, #0]
  }
}
    20fe:	3714      	adds	r7, #20
    2100:	46bd      	mov	sp, r7
    2102:	f85d 7b04 	ldr.w	r7, [sp], #4
    2106:	4770      	bx	lr

00002108 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
    2108:	b480      	push	{r7}
    210a:	b083      	sub	sp, #12
    210c:	af00      	add	r7, sp, #0
    210e:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
    2110:	687b      	ldr	r3, [r7, #4]
    2112:	2200      	movs	r2, #0
    2114:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
    2116:	687b      	ldr	r3, [r7, #4]
    2118:	2200      	movs	r2, #0
    211a:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
    211c:	687b      	ldr	r3, [r7, #4]
    211e:	220c      	movs	r2, #12
    2120:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
    2122:	687b      	ldr	r3, [r7, #4]
    2124:	2200      	movs	r2, #0
    2126:	719a      	strb	r2, [r3, #6]
}
    2128:	370c      	adds	r7, #12
    212a:	46bd      	mov	sp, r7
    212c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2130:	4770      	bx	lr
    2132:	bf00      	nop

00002134 <EXTI_GenerateSWInterrupt>:
  * @param  EXTI_Line: specifies the EXTI lines to be enabled or disabled.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
    2134:	b480      	push	{r7}
    2136:	b083      	sub	sp, #12
    2138:	af00      	add	r7, sp, #0
    213a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->SWIER |= EXTI_Line;
    213c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2140:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2144:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2148:	f2c4 0201 	movt	r2, #16385	; 0x4001
    214c:	6911      	ldr	r1, [r2, #16]
    214e:	687a      	ldr	r2, [r7, #4]
    2150:	430a      	orrs	r2, r1
    2152:	611a      	str	r2, [r3, #16]
}
    2154:	370c      	adds	r7, #12
    2156:	46bd      	mov	sp, r7
    2158:	f85d 7b04 	ldr.w	r7, [sp], #4
    215c:	4770      	bx	lr
    215e:	bf00      	nop

00002160 <EXTI_GetFlagStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
    2160:	b480      	push	{r7}
    2162:	b085      	sub	sp, #20
    2164:	af00      	add	r7, sp, #0
    2166:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    2168:	2300      	movs	r3, #0
    216a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
    216c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2170:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2174:	695a      	ldr	r2, [r3, #20]
    2176:	687b      	ldr	r3, [r7, #4]
    2178:	4013      	ands	r3, r2
    217a:	2b00      	cmp	r3, #0
    217c:	d002      	beq.n	2184 <EXTI_GetFlagStatus+0x24>
  {
    bitstatus = SET;
    217e:	2301      	movs	r3, #1
    2180:	73fb      	strb	r3, [r7, #15]
    2182:	e001      	b.n	2188 <EXTI_GetFlagStatus+0x28>
  }
  else
  {
    bitstatus = RESET;
    2184:	2300      	movs	r3, #0
    2186:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    2188:	7bfb      	ldrb	r3, [r7, #15]
}
    218a:	4618      	mov	r0, r3
    218c:	3714      	adds	r7, #20
    218e:	46bd      	mov	sp, r7
    2190:	f85d 7b04 	ldr.w	r7, [sp], #4
    2194:	4770      	bx	lr
    2196:	bf00      	nop

00002198 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
    2198:	b480      	push	{r7}
    219a:	b083      	sub	sp, #12
    219c:	af00      	add	r7, sp, #0
    219e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    21a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21a4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21a8:	687a      	ldr	r2, [r7, #4]
    21aa:	615a      	str	r2, [r3, #20]
}
    21ac:	370c      	adds	r7, #12
    21ae:	46bd      	mov	sp, r7
    21b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    21b4:	4770      	bx	lr
    21b6:	bf00      	nop

000021b8 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
    21b8:	b480      	push	{r7}
    21ba:	b085      	sub	sp, #20
    21bc:	af00      	add	r7, sp, #0
    21be:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
    21c0:	2300      	movs	r3, #0
    21c2:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
    21c4:	2300      	movs	r3, #0
    21c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  enablestatus =  EXTI->IMR & EXTI_Line;
    21c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21cc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21d0:	681a      	ldr	r2, [r3, #0]
    21d2:	687b      	ldr	r3, [r7, #4]
    21d4:	4013      	ands	r3, r2
    21d6:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
    21d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21dc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21e0:	695a      	ldr	r2, [r3, #20]
    21e2:	687b      	ldr	r3, [r7, #4]
    21e4:	4013      	ands	r3, r2
    21e6:	2b00      	cmp	r3, #0
    21e8:	d005      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
    21ea:	68bb      	ldr	r3, [r7, #8]
    21ec:	2b00      	cmp	r3, #0
    21ee:	d002      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
  {
    bitstatus = SET;
    21f0:	2301      	movs	r3, #1
    21f2:	73fb      	strb	r3, [r7, #15]
    21f4:	e001      	b.n	21fa <EXTI_GetITStatus+0x42>
  }
  else
  {
    bitstatus = RESET;
    21f6:	2300      	movs	r3, #0
    21f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    21fa:	7bfb      	ldrb	r3, [r7, #15]
}
    21fc:	4618      	mov	r0, r3
    21fe:	3714      	adds	r7, #20
    2200:	46bd      	mov	sp, r7
    2202:	f85d 7b04 	ldr.w	r7, [sp], #4
    2206:	4770      	bx	lr

00002208 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
    2208:	b480      	push	{r7}
    220a:	b083      	sub	sp, #12
    220c:	af00      	add	r7, sp, #0
    220e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    2210:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2214:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2218:	687a      	ldr	r2, [r7, #4]
    221a:	615a      	str	r2, [r3, #20]
}
    221c:	370c      	adds	r7, #12
    221e:	46bd      	mov	sp, r7
    2220:	f85d 7b04 	ldr.w	r7, [sp], #4
    2224:	4770      	bx	lr
    2226:	bf00      	nop

00002228 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
    2228:	b480      	push	{r7}
    222a:	b083      	sub	sp, #12
    222c:	af00      	add	r7, sp, #0
    222e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
    2230:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2234:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2238:	687a      	ldr	r2, [r7, #4]
    223a:	f042 62bf 	orr.w	r2, r2, #100139008	; 0x5f80000
    223e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    2242:	60da      	str	r2, [r3, #12]
}
    2244:	370c      	adds	r7, #12
    2246:	46bd      	mov	sp, r7
    2248:	f85d 7b04 	ldr.w	r7, [sp], #4
    224c:	4770      	bx	lr
    224e:	bf00      	nop

00002250 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
    2250:	b480      	push	{r7}
    2252:	b087      	sub	sp, #28
    2254:	af00      	add	r7, sp, #0
    2256:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
    2258:	2300      	movs	r3, #0
    225a:	617b      	str	r3, [r7, #20]
    225c:	2300      	movs	r3, #0
    225e:	613b      	str	r3, [r7, #16]
    2260:	230f      	movs	r3, #15
    2262:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
    2264:	687b      	ldr	r3, [r7, #4]
    2266:	78db      	ldrb	r3, [r3, #3]
    2268:	2b00      	cmp	r3, #0
    226a:	d042      	beq.n	22f2 <NVIC_Init+0xa2>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    226c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2270:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2274:	68db      	ldr	r3, [r3, #12]
    2276:	43db      	mvns	r3, r3
    2278:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    227c:	0a1b      	lsrs	r3, r3, #8
    227e:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
    2280:	697b      	ldr	r3, [r7, #20]
    2282:	f1c3 0304 	rsb	r3, r3, #4
    2286:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
    2288:	697b      	ldr	r3, [r7, #20]
    228a:	68fa      	ldr	r2, [r7, #12]
    228c:	fa22 f303 	lsr.w	r3, r2, r3
    2290:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    2292:	687b      	ldr	r3, [r7, #4]
    2294:	785b      	ldrb	r3, [r3, #1]
    2296:	461a      	mov	r2, r3
    2298:	693b      	ldr	r3, [r7, #16]
    229a:	fa02 f303 	lsl.w	r3, r2, r3
    229e:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
    22a0:	687b      	ldr	r3, [r7, #4]
    22a2:	789b      	ldrb	r3, [r3, #2]
    22a4:	461a      	mov	r2, r3
    22a6:	68fb      	ldr	r3, [r7, #12]
    22a8:	4013      	ands	r3, r2
    22aa:	697a      	ldr	r2, [r7, #20]
    22ac:	4313      	orrs	r3, r2
    22ae:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
    22b0:	697b      	ldr	r3, [r7, #20]
    22b2:	011b      	lsls	r3, r3, #4
    22b4:	617b      	str	r3, [r7, #20]

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    22b6:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22ba:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22be:	687a      	ldr	r2, [r7, #4]
    22c0:	7812      	ldrb	r2, [r2, #0]
    22c2:	4611      	mov	r1, r2
    22c4:	697a      	ldr	r2, [r7, #20]
    22c6:	b2d2      	uxtb	r2, r2
    22c8:	440b      	add	r3, r1
    22ca:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ce:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22d2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22d6:	687a      	ldr	r2, [r7, #4]
    22d8:	7812      	ldrb	r2, [r2, #0]
    22da:	0952      	lsrs	r2, r2, #5
    22dc:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    22de:	6879      	ldr	r1, [r7, #4]
    22e0:	7809      	ldrb	r1, [r1, #0]
    22e2:	f001 011f 	and.w	r1, r1, #31
    22e6:	2001      	movs	r0, #1
    22e8:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    22f0:	e011      	b.n	2316 <NVIC_Init+0xc6>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22f2:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22f6:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22fa:	687a      	ldr	r2, [r7, #4]
    22fc:	7812      	ldrb	r2, [r2, #0]
    22fe:	0952      	lsrs	r2, r2, #5
    2300:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    2302:	6879      	ldr	r1, [r7, #4]
    2304:	7809      	ldrb	r1, [r1, #0]
    2306:	f001 011f 	and.w	r1, r1, #31
    230a:	2001      	movs	r0, #1
    230c:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    2310:	3220      	adds	r2, #32
    2312:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
    2316:	371c      	adds	r7, #28
    2318:	46bd      	mov	sp, r7
    231a:	f85d 7b04 	ldr.w	r7, [sp], #4
    231e:	4770      	bx	lr

00002320 <NVIC_SetVectorTable>:
  * @param  Offset: Vector Table base offset field. This value must be a multiple
  *         of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{
    2320:	b480      	push	{r7}
    2322:	b083      	sub	sp, #12
    2324:	af00      	add	r7, sp, #0
    2326:	6078      	str	r0, [r7, #4]
    2328:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));

  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
    232a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    232e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2332:	683a      	ldr	r2, [r7, #0]
    2334:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
    2338:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    233c:	6879      	ldr	r1, [r7, #4]
    233e:	430a      	orrs	r2, r1
    2340:	609a      	str	r2, [r3, #8]
}
    2342:	370c      	adds	r7, #12
    2344:	46bd      	mov	sp, r7
    2346:	f85d 7b04 	ldr.w	r7, [sp], #4
    234a:	4770      	bx	lr

0000234c <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
    234c:	b480      	push	{r7}
    234e:	b083      	sub	sp, #12
    2350:	af00      	add	r7, sp, #0
    2352:	4602      	mov	r2, r0
    2354:	460b      	mov	r3, r1
    2356:	71fa      	strb	r2, [r7, #7]
    2358:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    235a:	79bb      	ldrb	r3, [r7, #6]
    235c:	2b00      	cmp	r3, #0
    235e:	d00c      	beq.n	237a <NVIC_SystemLPConfig+0x2e>
  {
    SCB->SCR |= LowPowerMode;
    2360:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2364:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2368:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    236c:	f2ce 0200 	movt	r2, #57344	; 0xe000
    2370:	6911      	ldr	r1, [r2, #16]
    2372:	79fa      	ldrb	r2, [r7, #7]
    2374:	430a      	orrs	r2, r1
    2376:	611a      	str	r2, [r3, #16]
    2378:	e00c      	b.n	2394 <NVIC_SystemLPConfig+0x48>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
    237a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    237e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2382:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    2386:	f2ce 0200 	movt	r2, #57344	; 0xe000
    238a:	6911      	ldr	r1, [r2, #16]
    238c:	79fa      	ldrb	r2, [r7, #7]
    238e:	43d2      	mvns	r2, r2
    2390:	400a      	ands	r2, r1
    2392:	611a      	str	r2, [r3, #16]
  }
}
    2394:	370c      	adds	r7, #12
    2396:	46bd      	mov	sp, r7
    2398:	f85d 7b04 	ldr.w	r7, [sp], #4
    239c:	4770      	bx	lr
    239e:	bf00      	nop

000023a0 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
    23a0:	b480      	push	{r7}
    23a2:	b083      	sub	sp, #12
    23a4:	af00      	add	r7, sp, #0
    23a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
    23a8:	687b      	ldr	r3, [r7, #4]
    23aa:	2b04      	cmp	r3, #4
    23ac:	d10c      	bne.n	23c8 <SysTick_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
    23ae:	f24e 0310 	movw	r3, #57360	; 0xe010
    23b2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23b6:	f24e 0210 	movw	r2, #57360	; 0xe010
    23ba:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23be:	6812      	ldr	r2, [r2, #0]
    23c0:	f042 0204 	orr.w	r2, r2, #4
    23c4:	601a      	str	r2, [r3, #0]
    23c6:	e00b      	b.n	23e0 <SysTick_CLKSourceConfig+0x40>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
    23c8:	f24e 0310 	movw	r3, #57360	; 0xe010
    23cc:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23d0:	f24e 0210 	movw	r2, #57360	; 0xe010
    23d4:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23d8:	6812      	ldr	r2, [r2, #0]
    23da:	f022 0204 	bic.w	r2, r2, #4
    23de:	601a      	str	r2, [r3, #0]
  }
}
    23e0:	370c      	adds	r7, #12
    23e2:	46bd      	mov	sp, r7
    23e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    23e8:	4770      	bx	lr
    23ea:	bf00      	nop

000023ec <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
    23ec:	b580      	push	{r7, lr}
    23ee:	b086      	sub	sp, #24
    23f0:	af00      	add	r7, sp, #0
    23f2:	60f8      	str	r0, [r7, #12]
    23f4:	60b9      	str	r1, [r7, #8]
    23f6:	607a      	str	r2, [r7, #4]
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
    23f8:	2038      	movs	r0, #56	; 0x38
    23fa:	f002 f91b 	bl	4634 <pvPortMalloc>
    23fe:	6138      	str	r0, [r7, #16]
	if( pxCoRoutine )
    2400:	693b      	ldr	r3, [r7, #16]
    2402:	2b00      	cmp	r3, #0
    2404:	d058      	beq.n	24b8 <xCoRoutineCreate+0xcc>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
    2406:	f240 039c 	movw	r3, #156	; 0x9c
    240a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    240e:	681b      	ldr	r3, [r3, #0]
    2410:	2b00      	cmp	r3, #0
    2412:	d107      	bne.n	2424 <xCoRoutineCreate+0x38>
		{
			pxCurrentCoRoutine = pxCoRoutine;
    2414:	f240 039c 	movw	r3, #156	; 0x9c
    2418:	f2c2 0300 	movt	r3, #8192	; 0x2000
    241c:	693a      	ldr	r2, [r7, #16]
    241e:	601a      	str	r2, [r3, #0]
			prvInitialiseCoRoutineLists();
    2420:	f000 fa08 	bl	2834 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
    2424:	68bb      	ldr	r3, [r7, #8]
    2426:	2b01      	cmp	r3, #1
    2428:	d901      	bls.n	242e <xCoRoutineCreate+0x42>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
    242a:	2301      	movs	r3, #1
    242c:	60bb      	str	r3, [r7, #8]
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
    242e:	693b      	ldr	r3, [r7, #16]
    2430:	2200      	movs	r2, #0
    2432:	869a      	strh	r2, [r3, #52]	; 0x34
		pxCoRoutine->uxPriority = uxPriority;
    2434:	693b      	ldr	r3, [r7, #16]
    2436:	68ba      	ldr	r2, [r7, #8]
    2438:	62da      	str	r2, [r3, #44]	; 0x2c
		pxCoRoutine->uxIndex = uxIndex;
    243a:	693b      	ldr	r3, [r7, #16]
    243c:	687a      	ldr	r2, [r7, #4]
    243e:	631a      	str	r2, [r3, #48]	; 0x30
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    2440:	693b      	ldr	r3, [r7, #16]
    2442:	68fa      	ldr	r2, [r7, #12]
    2444:	601a      	str	r2, [r3, #0]

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    2446:	693b      	ldr	r3, [r7, #16]
    2448:	3304      	adds	r3, #4
    244a:	4618      	mov	r0, r3
    244c:	f000 fa7c 	bl	2948 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    2450:	693b      	ldr	r3, [r7, #16]
    2452:	3318      	adds	r3, #24
    2454:	4618      	mov	r0, r3
    2456:	f000 fa77 	bl	2948 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    245a:	693b      	ldr	r3, [r7, #16]
    245c:	693a      	ldr	r2, [r7, #16]
    245e:	611a      	str	r2, [r3, #16]
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    2460:	693b      	ldr	r3, [r7, #16]
    2462:	693a      	ldr	r2, [r7, #16]
    2464:	625a      	str	r2, [r3, #36]	; 0x24
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    2466:	68bb      	ldr	r3, [r7, #8]
    2468:	f1c3 0205 	rsb	r2, r3, #5
    246c:	693b      	ldr	r3, [r7, #16]
    246e:	619a      	str	r2, [r3, #24]
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
    2470:	693b      	ldr	r3, [r7, #16]
    2472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2474:	f240 03a0 	movw	r3, #160	; 0xa0
    2478:	f2c2 0300 	movt	r3, #8192	; 0x2000
    247c:	681b      	ldr	r3, [r3, #0]
    247e:	429a      	cmp	r2, r3
    2480:	d906      	bls.n	2490 <xCoRoutineCreate+0xa4>
    2482:	693b      	ldr	r3, [r7, #16]
    2484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2486:	f240 03a0 	movw	r3, #160	; 0xa0
    248a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    248e:	601a      	str	r2, [r3, #0]
    2490:	693b      	ldr	r3, [r7, #16]
    2492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2494:	4613      	mov	r3, r2
    2496:	009b      	lsls	r3, r3, #2
    2498:	4413      	add	r3, r2
    249a:	009b      	lsls	r3, r3, #2
    249c:	f240 0230 	movw	r2, #48	; 0x30
    24a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    24a4:	441a      	add	r2, r3
    24a6:	693b      	ldr	r3, [r7, #16]
    24a8:	3304      	adds	r3, #4
    24aa:	4610      	mov	r0, r2
    24ac:	4619      	mov	r1, r3
    24ae:	f000 fa57 	bl	2960 <vListInsertEnd>

		xReturn = pdPASS;
    24b2:	2301      	movs	r3, #1
    24b4:	617b      	str	r3, [r7, #20]
    24b6:	e002      	b.n	24be <xCoRoutineCreate+0xd2>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    24b8:	f04f 33ff 	mov.w	r3, #4294967295
    24bc:	617b      	str	r3, [r7, #20]
	}
	
	return xReturn;	
    24be:	697b      	ldr	r3, [r7, #20]
}
    24c0:	4618      	mov	r0, r3
    24c2:	3718      	adds	r7, #24
    24c4:	46bd      	mov	sp, r7
    24c6:	bd80      	pop	{r7, pc}

000024c8 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
    24c8:	b580      	push	{r7, lr}
    24ca:	b084      	sub	sp, #16
    24cc:	af00      	add	r7, sp, #0
    24ce:	6078      	str	r0, [r7, #4]
    24d0:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    24d2:	f240 03a4 	movw	r3, #164	; 0xa4
    24d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24da:	681a      	ldr	r2, [r3, #0]
    24dc:	687b      	ldr	r3, [r7, #4]
    24de:	4413      	add	r3, r2
    24e0:	60fb      	str	r3, [r7, #12]

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    24e2:	f240 039c 	movw	r3, #156	; 0x9c
    24e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24ea:	681b      	ldr	r3, [r3, #0]
    24ec:	3304      	adds	r3, #4
    24ee:	4618      	mov	r0, r3
    24f0:	f000 fa96 	bl	2a20 <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    24f4:	f240 039c 	movw	r3, #156	; 0x9c
    24f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24fc:	681b      	ldr	r3, [r3, #0]
    24fe:	68fa      	ldr	r2, [r7, #12]
    2500:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xCoRoutineTickCount )
    2502:	f240 03a4 	movw	r3, #164	; 0xa4
    2506:	f2c2 0300 	movt	r3, #8192	; 0x2000
    250a:	681b      	ldr	r3, [r3, #0]
    250c:	68fa      	ldr	r2, [r7, #12]
    250e:	429a      	cmp	r2, r3
    2510:	d20f      	bcs.n	2532 <vCoRoutineAddToDelayedList+0x6a>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2512:	f240 0384 	movw	r3, #132	; 0x84
    2516:	f2c2 0300 	movt	r3, #8192	; 0x2000
    251a:	681a      	ldr	r2, [r3, #0]
    251c:	f240 039c 	movw	r3, #156	; 0x9c
    2520:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2524:	681b      	ldr	r3, [r3, #0]
    2526:	3304      	adds	r3, #4
    2528:	4610      	mov	r0, r2
    252a:	4619      	mov	r1, r3
    252c:	f000 fa40 	bl	29b0 <vListInsert>
    2530:	e00e      	b.n	2550 <vCoRoutineAddToDelayedList+0x88>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2532:	f240 0380 	movw	r3, #128	; 0x80
    2536:	f2c2 0300 	movt	r3, #8192	; 0x2000
    253a:	681a      	ldr	r2, [r3, #0]
    253c:	f240 039c 	movw	r3, #156	; 0x9c
    2540:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2544:	681b      	ldr	r3, [r3, #0]
    2546:	3304      	adds	r3, #4
    2548:	4610      	mov	r0, r2
    254a:	4619      	mov	r1, r3
    254c:	f000 fa30 	bl	29b0 <vListInsert>
	}

	if( pxEventList )
    2550:	683b      	ldr	r3, [r7, #0]
    2552:	2b00      	cmp	r3, #0
    2554:	d009      	beq.n	256a <vCoRoutineAddToDelayedList+0xa2>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    2556:	f240 039c 	movw	r3, #156	; 0x9c
    255a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    255e:	681b      	ldr	r3, [r3, #0]
    2560:	3318      	adds	r3, #24
    2562:	6838      	ldr	r0, [r7, #0]
    2564:	4619      	mov	r1, r3
    2566:	f000 fa23 	bl	29b0 <vListInsert>
	}
}
    256a:	3710      	adds	r7, #16
    256c:	46bd      	mov	sp, r7
    256e:	bd80      	pop	{r7, pc}

00002570 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
    2570:	b580      	push	{r7, lr}
    2572:	b082      	sub	sp, #8
    2574:	af00      	add	r7, sp, #0
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    2576:	e039      	b.n	25ec <prvCheckPendingReadyList+0x7c>
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
    2578:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    257c:	f380 8811 	msr	BASEPRI, r0
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
    2580:	f240 0388 	movw	r3, #136	; 0x88
    2584:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2588:	68db      	ldr	r3, [r3, #12]
    258a:	68db      	ldr	r3, [r3, #12]
    258c:	607b      	str	r3, [r7, #4]
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    258e:	687b      	ldr	r3, [r7, #4]
    2590:	3318      	adds	r3, #24
    2592:	4618      	mov	r0, r3
    2594:	f000 fa44 	bl	2a20 <vListRemove>
		}
		portENABLE_INTERRUPTS();
    2598:	f04f 0000 	mov.w	r0, #0
    259c:	f380 8811 	msr	BASEPRI, r0

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    25a0:	687b      	ldr	r3, [r7, #4]
    25a2:	3304      	adds	r3, #4
    25a4:	4618      	mov	r0, r3
    25a6:	f000 fa3b 	bl	2a20 <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    25aa:	687b      	ldr	r3, [r7, #4]
    25ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25ae:	f240 03a0 	movw	r3, #160	; 0xa0
    25b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25b6:	681b      	ldr	r3, [r3, #0]
    25b8:	429a      	cmp	r2, r3
    25ba:	d906      	bls.n	25ca <prvCheckPendingReadyList+0x5a>
    25bc:	687b      	ldr	r3, [r7, #4]
    25be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25c0:	f240 03a0 	movw	r3, #160	; 0xa0
    25c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25c8:	601a      	str	r2, [r3, #0]
    25ca:	687b      	ldr	r3, [r7, #4]
    25cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25ce:	4613      	mov	r3, r2
    25d0:	009b      	lsls	r3, r3, #2
    25d2:	4413      	add	r3, r2
    25d4:	009b      	lsls	r3, r3, #2
    25d6:	f240 0230 	movw	r2, #48	; 0x30
    25da:	f2c2 0200 	movt	r2, #8192	; 0x2000
    25de:	441a      	add	r2, r3
    25e0:	687b      	ldr	r3, [r7, #4]
    25e2:	3304      	adds	r3, #4
    25e4:	4610      	mov	r0, r2
    25e6:	4619      	mov	r1, r3
    25e8:	f000 f9ba 	bl	2960 <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    25ec:	f240 0388 	movw	r3, #136	; 0x88
    25f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25f4:	681b      	ldr	r3, [r3, #0]
    25f6:	2b00      	cmp	r3, #0
    25f8:	d1be      	bne.n	2578 <prvCheckPendingReadyList+0x8>
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
    25fa:	3708      	adds	r7, #8
    25fc:	46bd      	mov	sp, r7
    25fe:	bd80      	pop	{r7, pc}

00002600 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
    2600:	b580      	push	{r7, lr}
    2602:	b082      	sub	sp, #8
    2604:	af00      	add	r7, sp, #0
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    2606:	f001 fa8b 	bl	3b20 <xTaskGetTickCount>
    260a:	4602      	mov	r2, r0
    260c:	f240 03a8 	movw	r3, #168	; 0xa8
    2610:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2614:	681b      	ldr	r3, [r3, #0]
    2616:	1ad2      	subs	r2, r2, r3
    2618:	f240 03ac 	movw	r3, #172	; 0xac
    261c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2620:	601a      	str	r2, [r3, #0]
	while( xPassedTicks )
    2622:	e085      	b.n	2730 <prvCheckDelayedList+0x130>
	{
		xCoRoutineTickCount++;
    2624:	f240 03a4 	movw	r3, #164	; 0xa4
    2628:	f2c2 0300 	movt	r3, #8192	; 0x2000
    262c:	681b      	ldr	r3, [r3, #0]
    262e:	1c5a      	adds	r2, r3, #1
    2630:	f240 03a4 	movw	r3, #164	; 0xa4
    2634:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2638:	601a      	str	r2, [r3, #0]
		xPassedTicks--;
    263a:	f240 03ac 	movw	r3, #172	; 0xac
    263e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2642:	681b      	ldr	r3, [r3, #0]
    2644:	1e5a      	subs	r2, r3, #1
    2646:	f240 03ac 	movw	r3, #172	; 0xac
    264a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    264e:	601a      	str	r2, [r3, #0]

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
    2650:	f240 03a4 	movw	r3, #164	; 0xa4
    2654:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2658:	681b      	ldr	r3, [r3, #0]
    265a:	2b00      	cmp	r3, #0
    265c:	d116      	bne.n	268c <prvCheckDelayedList+0x8c>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
    265e:	f240 0380 	movw	r3, #128	; 0x80
    2662:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2666:	681b      	ldr	r3, [r3, #0]
    2668:	607b      	str	r3, [r7, #4]
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    266a:	f240 0384 	movw	r3, #132	; 0x84
    266e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2672:	681a      	ldr	r2, [r3, #0]
    2674:	f240 0380 	movw	r3, #128	; 0x80
    2678:	f2c2 0300 	movt	r3, #8192	; 0x2000
    267c:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedCoRoutineList = pxTemp;
    267e:	f240 0384 	movw	r3, #132	; 0x84
    2682:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2686:	687a      	ldr	r2, [r7, #4]
    2688:	601a      	str	r2, [r3, #0]
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    268a:	e049      	b.n	2720 <prvCheckDelayedList+0x120>
    268c:	e048      	b.n	2720 <prvCheckDelayedList+0x120>
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    268e:	f240 0380 	movw	r3, #128	; 0x80
    2692:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2696:	681b      	ldr	r3, [r3, #0]
    2698:	68db      	ldr	r3, [r3, #12]
    269a:	68db      	ldr	r3, [r3, #12]
    269c:	603b      	str	r3, [r7, #0]

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
    269e:	683b      	ldr	r3, [r7, #0]
    26a0:	685a      	ldr	r2, [r3, #4]
    26a2:	f240 03a4 	movw	r3, #164	; 0xa4
    26a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26aa:	681b      	ldr	r3, [r3, #0]
    26ac:	429a      	cmp	r2, r3
    26ae:	d900      	bls.n	26b2 <prvCheckDelayedList+0xb2>
			{			
				/* Timeout not yet expired. */																			
				break;																				
    26b0:	e03e      	b.n	2730 <prvCheckDelayedList+0x130>
			}																						

			portDISABLE_INTERRUPTS();
    26b2:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    26b6:	f380 8811 	msr	BASEPRI, r0
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
    26ba:	683b      	ldr	r3, [r7, #0]
    26bc:	3304      	adds	r3, #4
    26be:	4618      	mov	r0, r3
    26c0:	f000 f9ae 	bl	2a20 <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
    26c4:	683b      	ldr	r3, [r7, #0]
    26c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    26c8:	2b00      	cmp	r3, #0
    26ca:	d004      	beq.n	26d6 <prvCheckDelayedList+0xd6>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
    26cc:	683b      	ldr	r3, [r7, #0]
    26ce:	3318      	adds	r3, #24
    26d0:	4618      	mov	r0, r3
    26d2:	f000 f9a5 	bl	2a20 <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    26d6:	f04f 0000 	mov.w	r0, #0
    26da:	f380 8811 	msr	BASEPRI, r0

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    26de:	683b      	ldr	r3, [r7, #0]
    26e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    26e2:	f240 03a0 	movw	r3, #160	; 0xa0
    26e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26ea:	681b      	ldr	r3, [r3, #0]
    26ec:	429a      	cmp	r2, r3
    26ee:	d906      	bls.n	26fe <prvCheckDelayedList+0xfe>
    26f0:	683b      	ldr	r3, [r7, #0]
    26f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    26f4:	f240 03a0 	movw	r3, #160	; 0xa0
    26f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26fc:	601a      	str	r2, [r3, #0]
    26fe:	683b      	ldr	r3, [r7, #0]
    2700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2702:	4613      	mov	r3, r2
    2704:	009b      	lsls	r3, r3, #2
    2706:	4413      	add	r3, r2
    2708:	009b      	lsls	r3, r3, #2
    270a:	f240 0230 	movw	r2, #48	; 0x30
    270e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2712:	441a      	add	r2, r3
    2714:	683b      	ldr	r3, [r7, #0]
    2716:	3304      	adds	r3, #4
    2718:	4610      	mov	r0, r2
    271a:	4619      	mov	r1, r3
    271c:	f000 f920 	bl	2960 <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    2720:	f240 0380 	movw	r3, #128	; 0x80
    2724:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2728:	681b      	ldr	r3, [r3, #0]
    272a:	681b      	ldr	r3, [r3, #0]
    272c:	2b00      	cmp	r3, #0
    272e:	d1ae      	bne.n	268e <prvCheckDelayedList+0x8e>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    2730:	f240 03ac 	movw	r3, #172	; 0xac
    2734:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2738:	681b      	ldr	r3, [r3, #0]
    273a:	2b00      	cmp	r3, #0
    273c:	f47f af72 	bne.w	2624 <prvCheckDelayedList+0x24>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
    2740:	f240 03a4 	movw	r3, #164	; 0xa4
    2744:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2748:	681a      	ldr	r2, [r3, #0]
    274a:	f240 03a8 	movw	r3, #168	; 0xa8
    274e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2752:	601a      	str	r2, [r3, #0]
}
    2754:	3708      	adds	r7, #8
    2756:	46bd      	mov	sp, r7
    2758:	bd80      	pop	{r7, pc}
    275a:	bf00      	nop

0000275c <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    275c:	b580      	push	{r7, lr}
    275e:	b082      	sub	sp, #8
    2760:	af00      	add	r7, sp, #0
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
    2762:	f7ff ff05 	bl	2570 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
    2766:	f7ff ff4b 	bl	2600 <prvCheckDelayedList>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    276a:	e012      	b.n	2792 <vCoRoutineSchedule+0x36>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    276c:	f240 03a0 	movw	r3, #160	; 0xa0
    2770:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2774:	681b      	ldr	r3, [r3, #0]
    2776:	2b00      	cmp	r3, #0
    2778:	d100      	bne.n	277c <vCoRoutineSchedule+0x20>
		{
			/* No more co-routines to check. */
			return;
    277a:	e057      	b.n	282c <vCoRoutineSchedule+0xd0>
		}
		--uxTopCoRoutineReadyPriority;
    277c:	f240 03a0 	movw	r3, #160	; 0xa0
    2780:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2784:	681b      	ldr	r3, [r3, #0]
    2786:	1e5a      	subs	r2, r3, #1
    2788:	f240 03a0 	movw	r3, #160	; 0xa0
    278c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2790:	601a      	str	r2, [r3, #0]

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    2792:	f240 03a0 	movw	r3, #160	; 0xa0
    2796:	f2c2 0300 	movt	r3, #8192	; 0x2000
    279a:	6819      	ldr	r1, [r3, #0]
    279c:	f240 0230 	movw	r2, #48	; 0x30
    27a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27a4:	460b      	mov	r3, r1
    27a6:	009b      	lsls	r3, r3, #2
    27a8:	440b      	add	r3, r1
    27aa:	009b      	lsls	r3, r3, #2
    27ac:	4413      	add	r3, r2
    27ae:	681b      	ldr	r3, [r3, #0]
    27b0:	2b00      	cmp	r3, #0
    27b2:	d0db      	beq.n	276c <vCoRoutineSchedule+0x10>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    27b4:	f240 03a0 	movw	r3, #160	; 0xa0
    27b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27bc:	681a      	ldr	r2, [r3, #0]
    27be:	4613      	mov	r3, r2
    27c0:	009b      	lsls	r3, r3, #2
    27c2:	4413      	add	r3, r2
    27c4:	009b      	lsls	r3, r3, #2
    27c6:	f240 0230 	movw	r2, #48	; 0x30
    27ca:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27ce:	4413      	add	r3, r2
    27d0:	607b      	str	r3, [r7, #4]
    27d2:	687b      	ldr	r3, [r7, #4]
    27d4:	685b      	ldr	r3, [r3, #4]
    27d6:	685a      	ldr	r2, [r3, #4]
    27d8:	687b      	ldr	r3, [r7, #4]
    27da:	605a      	str	r2, [r3, #4]
    27dc:	687b      	ldr	r3, [r7, #4]
    27de:	685a      	ldr	r2, [r3, #4]
    27e0:	687b      	ldr	r3, [r7, #4]
    27e2:	3308      	adds	r3, #8
    27e4:	429a      	cmp	r2, r3
    27e6:	d104      	bne.n	27f2 <vCoRoutineSchedule+0x96>
    27e8:	687b      	ldr	r3, [r7, #4]
    27ea:	685b      	ldr	r3, [r3, #4]
    27ec:	685a      	ldr	r2, [r3, #4]
    27ee:	687b      	ldr	r3, [r7, #4]
    27f0:	605a      	str	r2, [r3, #4]
    27f2:	687b      	ldr	r3, [r7, #4]
    27f4:	685b      	ldr	r3, [r3, #4]
    27f6:	68da      	ldr	r2, [r3, #12]
    27f8:	f240 039c 	movw	r3, #156	; 0x9c
    27fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2800:	601a      	str	r2, [r3, #0]

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    2802:	f240 039c 	movw	r3, #156	; 0x9c
    2806:	f2c2 0300 	movt	r3, #8192	; 0x2000
    280a:	681b      	ldr	r3, [r3, #0]
    280c:	681a      	ldr	r2, [r3, #0]
    280e:	f240 039c 	movw	r3, #156	; 0x9c
    2812:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2816:	6819      	ldr	r1, [r3, #0]
    2818:	f240 039c 	movw	r3, #156	; 0x9c
    281c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2820:	681b      	ldr	r3, [r3, #0]
    2822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2824:	4608      	mov	r0, r1
    2826:	4619      	mov	r1, r3
    2828:	4790      	blx	r2

	return;
    282a:	bf00      	nop
}
    282c:	3708      	adds	r7, #8
    282e:	46bd      	mov	sp, r7
    2830:	bd80      	pop	{r7, pc}
    2832:	bf00      	nop

00002834 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
    2834:	b580      	push	{r7, lr}
    2836:	b082      	sub	sp, #8
    2838:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    283a:	2300      	movs	r3, #0
    283c:	607b      	str	r3, [r7, #4]
    283e:	e00f      	b.n	2860 <prvInitialiseCoRoutineLists+0x2c>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    2840:	687a      	ldr	r2, [r7, #4]
    2842:	4613      	mov	r3, r2
    2844:	009b      	lsls	r3, r3, #2
    2846:	4413      	add	r3, r2
    2848:	009b      	lsls	r3, r3, #2
    284a:	f240 0230 	movw	r2, #48	; 0x30
    284e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2852:	4413      	add	r3, r2
    2854:	4618      	mov	r0, r3
    2856:	f000 f857 	bl	2908 <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    285a:	687b      	ldr	r3, [r7, #4]
    285c:	3301      	adds	r3, #1
    285e:	607b      	str	r3, [r7, #4]
    2860:	687b      	ldr	r3, [r7, #4]
    2862:	2b01      	cmp	r3, #1
    2864:	d9ec      	bls.n	2840 <prvInitialiseCoRoutineLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
    2866:	f240 0058 	movw	r0, #88	; 0x58
    286a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    286e:	f000 f84b 	bl	2908 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
    2872:	f240 006c 	movw	r0, #108	; 0x6c
    2876:	f2c2 0000 	movt	r0, #8192	; 0x2000
    287a:	f000 f845 	bl	2908 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
    287e:	f240 0088 	movw	r0, #136	; 0x88
    2882:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2886:	f000 f83f 	bl	2908 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    288a:	f240 0380 	movw	r3, #128	; 0x80
    288e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2892:	f240 0258 	movw	r2, #88	; 0x58
    2896:	f2c2 0200 	movt	r2, #8192	; 0x2000
    289a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    289c:	f240 0384 	movw	r3, #132	; 0x84
    28a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28a4:	f240 026c 	movw	r2, #108	; 0x6c
    28a8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    28ac:	601a      	str	r2, [r3, #0]
}
    28ae:	3708      	adds	r7, #8
    28b0:	46bd      	mov	sp, r7
    28b2:	bd80      	pop	{r7, pc}

000028b4 <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
    28b4:	b580      	push	{r7, lr}
    28b6:	b084      	sub	sp, #16
    28b8:	af00      	add	r7, sp, #0
    28ba:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    28bc:	687b      	ldr	r3, [r7, #4]
    28be:	68db      	ldr	r3, [r3, #12]
    28c0:	68db      	ldr	r3, [r3, #12]
    28c2:	60bb      	str	r3, [r7, #8]
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    28c4:	68bb      	ldr	r3, [r7, #8]
    28c6:	3318      	adds	r3, #24
    28c8:	4618      	mov	r0, r3
    28ca:	f000 f8a9 	bl	2a20 <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    28ce:	68bb      	ldr	r3, [r7, #8]
    28d0:	3318      	adds	r3, #24
    28d2:	f240 0088 	movw	r0, #136	; 0x88
    28d6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    28da:	4619      	mov	r1, r3
    28dc:	f000 f840 	bl	2960 <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
    28e0:	68bb      	ldr	r3, [r7, #8]
    28e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    28e4:	f240 039c 	movw	r3, #156	; 0x9c
    28e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28ec:	681b      	ldr	r3, [r3, #0]
    28ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    28f0:	429a      	cmp	r2, r3
    28f2:	d302      	bcc.n	28fa <xCoRoutineRemoveFromEventList+0x46>
	{
		xReturn = pdTRUE;
    28f4:	2301      	movs	r3, #1
    28f6:	60fb      	str	r3, [r7, #12]
    28f8:	e001      	b.n	28fe <xCoRoutineRemoveFromEventList+0x4a>
	}
	else
	{
		xReturn = pdFALSE;
    28fa:	2300      	movs	r3, #0
    28fc:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    28fe:	68fb      	ldr	r3, [r7, #12]
}
    2900:	4618      	mov	r0, r3
    2902:	3710      	adds	r7, #16
    2904:	46bd      	mov	sp, r7
    2906:	bd80      	pop	{r7, pc}

00002908 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    2908:	b480      	push	{r7}
    290a:	b083      	sub	sp, #12
    290c:	af00      	add	r7, sp, #0
    290e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    2910:	687b      	ldr	r3, [r7, #4]
    2912:	f103 0208 	add.w	r2, r3, #8
    2916:	687b      	ldr	r3, [r7, #4]
    2918:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    291a:	687b      	ldr	r3, [r7, #4]
    291c:	f04f 32ff 	mov.w	r2, #4294967295
    2920:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    2922:	687b      	ldr	r3, [r7, #4]
    2924:	f103 0208 	add.w	r2, r3, #8
    2928:	687b      	ldr	r3, [r7, #4]
    292a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    292c:	687b      	ldr	r3, [r7, #4]
    292e:	f103 0208 	add.w	r2, r3, #8
    2932:	687b      	ldr	r3, [r7, #4]
    2934:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    2936:	687b      	ldr	r3, [r7, #4]
    2938:	2200      	movs	r2, #0
    293a:	601a      	str	r2, [r3, #0]
}
    293c:	370c      	adds	r7, #12
    293e:	46bd      	mov	sp, r7
    2940:	f85d 7b04 	ldr.w	r7, [sp], #4
    2944:	4770      	bx	lr
    2946:	bf00      	nop

00002948 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
    2948:	b480      	push	{r7}
    294a:	b083      	sub	sp, #12
    294c:	af00      	add	r7, sp, #0
    294e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    2950:	687b      	ldr	r3, [r7, #4]
    2952:	2200      	movs	r2, #0
    2954:	611a      	str	r2, [r3, #16]
}
    2956:	370c      	adds	r7, #12
    2958:	46bd      	mov	sp, r7
    295a:	f85d 7b04 	ldr.w	r7, [sp], #4
    295e:	4770      	bx	lr

00002960 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    2960:	b480      	push	{r7}
    2962:	b085      	sub	sp, #20
    2964:	af00      	add	r7, sp, #0
    2966:	6078      	str	r0, [r7, #4]
    2968:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    296a:	687b      	ldr	r3, [r7, #4]
    296c:	685b      	ldr	r3, [r3, #4]
    296e:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
    2970:	68fb      	ldr	r3, [r7, #12]
    2972:	685a      	ldr	r2, [r3, #4]
    2974:	683b      	ldr	r3, [r7, #0]
    2976:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
    2978:	687b      	ldr	r3, [r7, #4]
    297a:	685a      	ldr	r2, [r3, #4]
    297c:	683b      	ldr	r3, [r7, #0]
    297e:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2980:	68fb      	ldr	r3, [r7, #12]
    2982:	685b      	ldr	r3, [r3, #4]
    2984:	683a      	ldr	r2, [r7, #0]
    2986:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    2988:	68fb      	ldr	r3, [r7, #12]
    298a:	683a      	ldr	r2, [r7, #0]
    298c:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    298e:	687b      	ldr	r3, [r7, #4]
    2990:	683a      	ldr	r2, [r7, #0]
    2992:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2994:	683b      	ldr	r3, [r7, #0]
    2996:	687a      	ldr	r2, [r7, #4]
    2998:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    299a:	687b      	ldr	r3, [r7, #4]
    299c:	681b      	ldr	r3, [r3, #0]
    299e:	1c5a      	adds	r2, r3, #1
    29a0:	687b      	ldr	r3, [r7, #4]
    29a2:	601a      	str	r2, [r3, #0]
}
    29a4:	3714      	adds	r7, #20
    29a6:	46bd      	mov	sp, r7
    29a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    29ac:	4770      	bx	lr
    29ae:	bf00      	nop

000029b0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    29b0:	b480      	push	{r7}
    29b2:	b085      	sub	sp, #20
    29b4:	af00      	add	r7, sp, #0
    29b6:	6078      	str	r0, [r7, #4]
    29b8:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    29ba:	683b      	ldr	r3, [r7, #0]
    29bc:	681b      	ldr	r3, [r3, #0]
    29be:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    29c0:	68bb      	ldr	r3, [r7, #8]
    29c2:	f1b3 3fff 	cmp.w	r3, #4294967295
    29c6:	d103      	bne.n	29d0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    29c8:	687b      	ldr	r3, [r7, #4]
    29ca:	691b      	ldr	r3, [r3, #16]
    29cc:	60fb      	str	r3, [r7, #12]
    29ce:	e00c      	b.n	29ea <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    29d0:	687b      	ldr	r3, [r7, #4]
    29d2:	3308      	adds	r3, #8
    29d4:	60fb      	str	r3, [r7, #12]
    29d6:	e002      	b.n	29de <vListInsert+0x2e>
    29d8:	68fb      	ldr	r3, [r7, #12]
    29da:	685b      	ldr	r3, [r3, #4]
    29dc:	60fb      	str	r3, [r7, #12]
    29de:	68fb      	ldr	r3, [r7, #12]
    29e0:	685b      	ldr	r3, [r3, #4]
    29e2:	681a      	ldr	r2, [r3, #0]
    29e4:	68bb      	ldr	r3, [r7, #8]
    29e6:	429a      	cmp	r2, r3
    29e8:	d9f6      	bls.n	29d8 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    29ea:	68fb      	ldr	r3, [r7, #12]
    29ec:	685a      	ldr	r2, [r3, #4]
    29ee:	683b      	ldr	r3, [r7, #0]
    29f0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    29f2:	683b      	ldr	r3, [r7, #0]
    29f4:	685b      	ldr	r3, [r3, #4]
    29f6:	683a      	ldr	r2, [r7, #0]
    29f8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    29fa:	683b      	ldr	r3, [r7, #0]
    29fc:	68fa      	ldr	r2, [r7, #12]
    29fe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    2a00:	68fb      	ldr	r3, [r7, #12]
    2a02:	683a      	ldr	r2, [r7, #0]
    2a04:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2a06:	683b      	ldr	r3, [r7, #0]
    2a08:	687a      	ldr	r2, [r7, #4]
    2a0a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    2a0c:	687b      	ldr	r3, [r7, #4]
    2a0e:	681b      	ldr	r3, [r3, #0]
    2a10:	1c5a      	adds	r2, r3, #1
    2a12:	687b      	ldr	r3, [r7, #4]
    2a14:	601a      	str	r2, [r3, #0]
}
    2a16:	3714      	adds	r7, #20
    2a18:	46bd      	mov	sp, r7
    2a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a1e:	4770      	bx	lr

00002a20 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    2a20:	b480      	push	{r7}
    2a22:	b085      	sub	sp, #20
    2a24:	af00      	add	r7, sp, #0
    2a26:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    2a28:	687b      	ldr	r3, [r7, #4]
    2a2a:	685b      	ldr	r3, [r3, #4]
    2a2c:	687a      	ldr	r2, [r7, #4]
    2a2e:	6892      	ldr	r2, [r2, #8]
    2a30:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    2a32:	687b      	ldr	r3, [r7, #4]
    2a34:	689b      	ldr	r3, [r3, #8]
    2a36:	687a      	ldr	r2, [r7, #4]
    2a38:	6852      	ldr	r2, [r2, #4]
    2a3a:	605a      	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    2a3c:	687b      	ldr	r3, [r7, #4]
    2a3e:	691b      	ldr	r3, [r3, #16]
    2a40:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    2a42:	68fb      	ldr	r3, [r7, #12]
    2a44:	685a      	ldr	r2, [r3, #4]
    2a46:	687b      	ldr	r3, [r7, #4]
    2a48:	429a      	cmp	r2, r3
    2a4a:	d103      	bne.n	2a54 <vListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    2a4c:	687b      	ldr	r3, [r7, #4]
    2a4e:	689a      	ldr	r2, [r3, #8]
    2a50:	68fb      	ldr	r3, [r7, #12]
    2a52:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
    2a54:	687b      	ldr	r3, [r7, #4]
    2a56:	2200      	movs	r2, #0
    2a58:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
    2a5a:	68fb      	ldr	r3, [r7, #12]
    2a5c:	681b      	ldr	r3, [r3, #0]
    2a5e:	1e5a      	subs	r2, r3, #1
    2a60:	68fb      	ldr	r3, [r7, #12]
    2a62:	601a      	str	r2, [r3, #0]
}
    2a64:	3714      	adds	r7, #20
    2a66:	46bd      	mov	sp, r7
    2a68:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a6c:	4770      	bx	lr
    2a6e:	bf00      	nop

00002a70 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
    2a70:	b580      	push	{r7, lr}
    2a72:	b084      	sub	sp, #16
    2a74:	af00      	add	r7, sp, #0
    2a76:	6078      	str	r0, [r7, #4]
    2a78:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn = pdPASS;
    2a7a:	2301      	movs	r3, #1
    2a7c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	/* If the queue being reset has already been used (has not just been
	created), then only reset the queue if its event lists are empty. */
	if( xNewQueue != pdTRUE )
    2a7e:	683b      	ldr	r3, [r7, #0]
    2a80:	2b01      	cmp	r3, #1
    2a82:	d00b      	beq.n	2a9c <xQueueGenericReset+0x2c>
	{
		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2a84:	687b      	ldr	r3, [r7, #4]
    2a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2a88:	2b00      	cmp	r3, #0
    2a8a:	d001      	beq.n	2a90 <xQueueGenericReset+0x20>
		{
			xReturn = pdFAIL;
    2a8c:	2300      	movs	r3, #0
    2a8e:	60fb      	str	r3, [r7, #12]
		}

		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2a90:	687b      	ldr	r3, [r7, #4]
    2a92:	691b      	ldr	r3, [r3, #16]
    2a94:	2b00      	cmp	r3, #0
    2a96:	d001      	beq.n	2a9c <xQueueGenericReset+0x2c>
		{
			xReturn = pdFAIL;
    2a98:	2300      	movs	r3, #0
    2a9a:	60fb      	str	r3, [r7, #12]
		}
	}

	if( xReturn == pdPASS )
    2a9c:	68fb      	ldr	r3, [r7, #12]
    2a9e:	2b01      	cmp	r3, #1
    2aa0:	d12f      	bne.n	2b02 <xQueueGenericReset+0x92>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    2aa2:	687b      	ldr	r3, [r7, #4]
    2aa4:	681a      	ldr	r2, [r3, #0]
    2aa6:	687b      	ldr	r3, [r7, #4]
    2aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2aaa:	6879      	ldr	r1, [r7, #4]
    2aac:	6c09      	ldr	r1, [r1, #64]	; 0x40
    2aae:	fb01 f303 	mul.w	r3, r1, r3
    2ab2:	441a      	add	r2, r3
    2ab4:	687b      	ldr	r3, [r7, #4]
    2ab6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    2ab8:	687b      	ldr	r3, [r7, #4]
    2aba:	2200      	movs	r2, #0
    2abc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    2abe:	687b      	ldr	r3, [r7, #4]
    2ac0:	681a      	ldr	r2, [r3, #0]
    2ac2:	687b      	ldr	r3, [r7, #4]
    2ac4:	609a      	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
    2ac6:	687b      	ldr	r3, [r7, #4]
    2ac8:	681a      	ldr	r2, [r3, #0]
    2aca:	687b      	ldr	r3, [r7, #4]
    2acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2ace:	3b01      	subs	r3, #1
    2ad0:	6879      	ldr	r1, [r7, #4]
    2ad2:	6c09      	ldr	r1, [r1, #64]	; 0x40
    2ad4:	fb01 f303 	mul.w	r3, r1, r3
    2ad8:	441a      	add	r2, r3
    2ada:	687b      	ldr	r3, [r7, #4]
    2adc:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
    2ade:	687b      	ldr	r3, [r7, #4]
    2ae0:	f04f 32ff 	mov.w	r2, #4294967295
    2ae4:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
    2ae6:	687b      	ldr	r3, [r7, #4]
    2ae8:	f04f 32ff 	mov.w	r2, #4294967295
    2aec:	649a      	str	r2, [r3, #72]	; 0x48

		/* Ensure the event queues start with the correct state. */
		vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    2aee:	687b      	ldr	r3, [r7, #4]
    2af0:	3310      	adds	r3, #16
    2af2:	4618      	mov	r0, r3
    2af4:	f7ff ff08 	bl	2908 <vListInitialise>
		vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    2af8:	687b      	ldr	r3, [r7, #4]
    2afa:	3324      	adds	r3, #36	; 0x24
    2afc:	4618      	mov	r0, r3
    2afe:	f7ff ff03 	bl	2908 <vListInitialise>
	}

	return xReturn;
    2b02:	68fb      	ldr	r3, [r7, #12]
}
    2b04:	4618      	mov	r0, r3
    2b06:	3710      	adds	r7, #16
    2b08:	46bd      	mov	sp, r7
    2b0a:	bd80      	pop	{r7, pc}

00002b0c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
    2b0c:	b580      	push	{r7, lr}
    2b0e:	b088      	sub	sp, #32
    2b10:	af00      	add	r7, sp, #0
    2b12:	60f8      	str	r0, [r7, #12]
    2b14:	60b9      	str	r1, [r7, #8]
    2b16:	4613      	mov	r3, r2
    2b18:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    2b1a:	2300      	movs	r3, #0
    2b1c:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    2b1e:	68fb      	ldr	r3, [r7, #12]
    2b20:	2b00      	cmp	r3, #0
    2b22:	d026      	beq.n	2b72 <xQueueGenericCreate+0x66>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    2b24:	204c      	movs	r0, #76	; 0x4c
    2b26:	f001 fd85 	bl	4634 <pvPortMalloc>
    2b2a:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
    2b2c:	69bb      	ldr	r3, [r7, #24]
    2b2e:	2b00      	cmp	r3, #0
    2b30:	d01f      	beq.n	2b72 <xQueueGenericCreate+0x66>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    2b32:	68fb      	ldr	r3, [r7, #12]
    2b34:	68ba      	ldr	r2, [r7, #8]
    2b36:	fb02 f303 	mul.w	r3, r2, r3
    2b3a:	3301      	adds	r3, #1
    2b3c:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    2b3e:	6978      	ldr	r0, [r7, #20]
    2b40:	f001 fd78 	bl	4634 <pvPortMalloc>
    2b44:	4602      	mov	r2, r0
    2b46:	69bb      	ldr	r3, [r7, #24]
    2b48:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
    2b4a:	69bb      	ldr	r3, [r7, #24]
    2b4c:	681b      	ldr	r3, [r3, #0]
    2b4e:	2b00      	cmp	r3, #0
    2b50:	d00c      	beq.n	2b6c <xQueueGenericCreate+0x60>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
    2b52:	69bb      	ldr	r3, [r7, #24]
    2b54:	68fa      	ldr	r2, [r7, #12]
    2b56:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
    2b58:	69bb      	ldr	r3, [r7, #24]
    2b5a:	68ba      	ldr	r2, [r7, #8]
    2b5c:	641a      	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
    2b5e:	69b8      	ldr	r0, [r7, #24]
    2b60:	2101      	movs	r1, #1
    2b62:	f7ff ff85 	bl	2a70 <xQueueGenericReset>
					pxNewQueue->ucQueueType = ucQueueType;
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    2b66:	69bb      	ldr	r3, [r7, #24]
    2b68:	61fb      	str	r3, [r7, #28]
    2b6a:	e002      	b.n	2b72 <xQueueGenericCreate+0x66>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
    2b6c:	69b8      	ldr	r0, [r7, #24]
    2b6e:	f001 fda9 	bl	46c4 <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    2b72:	69fb      	ldr	r3, [r7, #28]
}
    2b74:	4618      	mov	r0, r3
    2b76:	3720      	adds	r7, #32
    2b78:	46bd      	mov	sp, r7
    2b7a:	bd80      	pop	{r7, pc}

00002b7c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( unsigned char ucQueueType )
	{
    2b7c:	b580      	push	{r7, lr}
    2b7e:	b084      	sub	sp, #16
    2b80:	af00      	add	r7, sp, #0
    2b82:	4603      	mov	r3, r0
    2b84:	71fb      	strb	r3, [r7, #7]
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    2b86:	204c      	movs	r0, #76	; 0x4c
    2b88:	f001 fd54 	bl	4634 <pvPortMalloc>
    2b8c:	60f8      	str	r0, [r7, #12]
		if( pxNewQueue != NULL )
    2b8e:	68fb      	ldr	r3, [r7, #12]
    2b90:	2b00      	cmp	r3, #0
    2b92:	d02c      	beq.n	2bee <xQueueCreateMutex+0x72>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    2b94:	68fb      	ldr	r3, [r7, #12]
    2b96:	2200      	movs	r2, #0
    2b98:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    2b9a:	68fb      	ldr	r3, [r7, #12]
    2b9c:	2200      	movs	r2, #0
    2b9e:	601a      	str	r2, [r3, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
    2ba0:	68fb      	ldr	r3, [r7, #12]
    2ba2:	2200      	movs	r2, #0
    2ba4:	609a      	str	r2, [r3, #8]
			pxNewQueue->pcReadFrom = NULL;
    2ba6:	68fb      	ldr	r3, [r7, #12]
    2ba8:	2200      	movs	r2, #0
    2baa:	60da      	str	r2, [r3, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    2bac:	68fb      	ldr	r3, [r7, #12]
    2bae:	2200      	movs	r2, #0
    2bb0:	639a      	str	r2, [r3, #56]	; 0x38
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
    2bb2:	68fb      	ldr	r3, [r7, #12]
    2bb4:	2201      	movs	r2, #1
    2bb6:	63da      	str	r2, [r3, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
    2bb8:	68fb      	ldr	r3, [r7, #12]
    2bba:	2200      	movs	r2, #0
    2bbc:	641a      	str	r2, [r3, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
    2bbe:	68fb      	ldr	r3, [r7, #12]
    2bc0:	f04f 32ff 	mov.w	r2, #4294967295
    2bc4:	645a      	str	r2, [r3, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
    2bc6:	68fb      	ldr	r3, [r7, #12]
    2bc8:	f04f 32ff 	mov.w	r2, #4294967295
    2bcc:	649a      	str	r2, [r3, #72]	; 0x48
				pxNewQueue->ucQueueType = ucQueueType;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    2bce:	68fb      	ldr	r3, [r7, #12]
    2bd0:	3310      	adds	r3, #16
    2bd2:	4618      	mov	r0, r3
    2bd4:	f7ff fe98 	bl	2908 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    2bd8:	68fb      	ldr	r3, [r7, #12]
    2bda:	3324      	adds	r3, #36	; 0x24
    2bdc:	4618      	mov	r0, r3
    2bde:	f7ff fe93 	bl	2908 <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
    2be2:	68f8      	ldr	r0, [r7, #12]
    2be4:	2100      	movs	r1, #0
    2be6:	2200      	movs	r2, #0
    2be8:	2300      	movs	r3, #0
    2bea:	f000 f81d 	bl	2c28 <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
    2bee:	68fb      	ldr	r3, [r7, #12]
	}
    2bf0:	4618      	mov	r0, r3
    2bf2:	3710      	adds	r7, #16
    2bf4:	46bd      	mov	sp, r7
    2bf6:	bd80      	pop	{r7, pc}

00002bf8 <xQueueGetMutexHolder>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void* xQueueGetMutexHolder( xQueueHandle xSemaphore )
	{
    2bf8:	b580      	push	{r7, lr}
    2bfa:	b084      	sub	sp, #16
    2bfc:	af00      	add	r7, sp, #0
    2bfe:	6078      	str	r0, [r7, #4]
		/* This function is called by xSemaphoreGetMutexHolder(), and should not
		be called directly.  Note:  This is is a good way of determining if the
		calling task is the mutex holder, but not a good way of determining the
		identity of the mutex holder, as the holder may change between the
		following critical section exiting and the function returning. */
		taskENTER_CRITICAL();
    2c00:	f001 fc96 	bl	4530 <vPortEnterCritical>
		{
			if( xSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
    2c04:	687b      	ldr	r3, [r7, #4]
    2c06:	681b      	ldr	r3, [r3, #0]
    2c08:	2b00      	cmp	r3, #0
    2c0a:	d103      	bne.n	2c14 <xQueueGetMutexHolder+0x1c>
			{
				pxReturn = ( void * ) xSemaphore->pxMutexHolder;
    2c0c:	687b      	ldr	r3, [r7, #4]
    2c0e:	685b      	ldr	r3, [r3, #4]
    2c10:	60fb      	str	r3, [r7, #12]
    2c12:	e001      	b.n	2c18 <xQueueGetMutexHolder+0x20>
			}
			else
			{
				pxReturn = NULL;
    2c14:	2300      	movs	r3, #0
    2c16:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
    2c18:	f001 fca0 	bl	455c <vPortExitCritical>
		
		return pxReturn;
    2c1c:	68fb      	ldr	r3, [r7, #12]
	}
    2c1e:	4618      	mov	r0, r3
    2c20:	3710      	adds	r7, #16
    2c22:	46bd      	mov	sp, r7
    2c24:	bd80      	pop	{r7, pc}
    2c26:	bf00      	nop

00002c28 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    2c28:	b580      	push	{r7, lr}
    2c2a:	b088      	sub	sp, #32
    2c2c:	af00      	add	r7, sp, #0
    2c2e:	60f8      	str	r0, [r7, #12]
    2c30:	60b9      	str	r1, [r7, #8]
    2c32:	607a      	str	r2, [r7, #4]
    2c34:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    2c36:	2300      	movs	r3, #0
    2c38:	61fb      	str	r3, [r7, #28]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    2c3a:	f001 fc79 	bl	4530 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    2c3e:	68fb      	ldr	r3, [r7, #12]
    2c40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    2c42:	68fb      	ldr	r3, [r7, #12]
    2c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2c46:	429a      	cmp	r2, r3
    2c48:	d216      	bcs.n	2c78 <xQueueGenericSend+0x50>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    2c4a:	68f8      	ldr	r0, [r7, #12]
    2c4c:	68b9      	ldr	r1, [r7, #8]
    2c4e:	683a      	ldr	r2, [r7, #0]
    2c50:	f000 f9d6 	bl	3000 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2c54:	68fb      	ldr	r3, [r7, #12]
    2c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2c58:	2b00      	cmp	r3, #0
    2c5a:	d009      	beq.n	2c70 <xQueueGenericSend+0x48>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    2c5c:	68fb      	ldr	r3, [r7, #12]
    2c5e:	3324      	adds	r3, #36	; 0x24
    2c60:	4618      	mov	r0, r3
    2c62:	f001 f907 	bl	3e74 <xTaskRemoveFromEventList>
    2c66:	4603      	mov	r3, r0
    2c68:	2b01      	cmp	r3, #1
    2c6a:	d101      	bne.n	2c70 <xQueueGenericSend+0x48>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    2c6c:	f001 fc52 	bl	4514 <vPortYieldFromISR>
					}
				}

				taskEXIT_CRITICAL();
    2c70:	f001 fc74 	bl	455c <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    2c74:	2301      	movs	r3, #1
    2c76:	e059      	b.n	2d2c <xQueueGenericSend+0x104>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    2c78:	687b      	ldr	r3, [r7, #4]
    2c7a:	2b00      	cmp	r3, #0
    2c7c:	d103      	bne.n	2c86 <xQueueGenericSend+0x5e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    2c7e:	f001 fc6d 	bl	455c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    2c82:	2300      	movs	r3, #0
    2c84:	e052      	b.n	2d2c <xQueueGenericSend+0x104>
				}
				else if( xEntryTimeSet == pdFALSE )
    2c86:	69fb      	ldr	r3, [r7, #28]
    2c88:	2b00      	cmp	r3, #0
    2c8a:	d106      	bne.n	2c9a <xQueueGenericSend+0x72>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    2c8c:	f107 0314 	add.w	r3, r7, #20
    2c90:	4618      	mov	r0, r3
    2c92:	f001 f947 	bl	3f24 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    2c96:	2301      	movs	r3, #1
    2c98:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    2c9a:	f001 fc5f 	bl	455c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    2c9e:	f000 fe93 	bl	39c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    2ca2:	f001 fc45 	bl	4530 <vPortEnterCritical>
    2ca6:	68fb      	ldr	r3, [r7, #12]
    2ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2caa:	f1b3 3fff 	cmp.w	r3, #4294967295
    2cae:	d102      	bne.n	2cb6 <xQueueGenericSend+0x8e>
    2cb0:	68fb      	ldr	r3, [r7, #12]
    2cb2:	2200      	movs	r2, #0
    2cb4:	645a      	str	r2, [r3, #68]	; 0x44
    2cb6:	68fb      	ldr	r3, [r7, #12]
    2cb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2cba:	f1b3 3fff 	cmp.w	r3, #4294967295
    2cbe:	d102      	bne.n	2cc6 <xQueueGenericSend+0x9e>
    2cc0:	68fb      	ldr	r3, [r7, #12]
    2cc2:	2200      	movs	r2, #0
    2cc4:	649a      	str	r2, [r3, #72]	; 0x48
    2cc6:	f001 fc49 	bl	455c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2cca:	f107 0214 	add.w	r2, r7, #20
    2cce:	1d3b      	adds	r3, r7, #4
    2cd0:	4610      	mov	r0, r2
    2cd2:	4619      	mov	r1, r3
    2cd4:	f001 f93e 	bl	3f54 <xTaskCheckForTimeOut>
    2cd8:	4603      	mov	r3, r0
    2cda:	2b00      	cmp	r3, #0
    2cdc:	d11e      	bne.n	2d1c <xQueueGenericSend+0xf4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    2cde:	68f8      	ldr	r0, [r7, #12]
    2ce0:	f000 fa86 	bl	31f0 <prvIsQueueFull>
    2ce4:	4603      	mov	r3, r0
    2ce6:	2b00      	cmp	r3, #0
    2ce8:	d012      	beq.n	2d10 <xQueueGenericSend+0xe8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    2cea:	68fb      	ldr	r3, [r7, #12]
    2cec:	f103 0210 	add.w	r2, r3, #16
    2cf0:	687b      	ldr	r3, [r7, #4]
    2cf2:	4610      	mov	r0, r2
    2cf4:	4619      	mov	r1, r3
    2cf6:	f001 f885 	bl	3e04 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    2cfa:	68f8      	ldr	r0, [r7, #12]
    2cfc:	f000 fa02 	bl	3104 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    2d00:	f000 fe74 	bl	39ec <xTaskResumeAll>
    2d04:	4603      	mov	r3, r0
    2d06:	2b00      	cmp	r3, #0
    2d08:	d10f      	bne.n	2d2a <xQueueGenericSend+0x102>
				{
					portYIELD_WITHIN_API();
    2d0a:	f001 fc03 	bl	4514 <vPortYieldFromISR>
    2d0e:	e00c      	b.n	2d2a <xQueueGenericSend+0x102>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    2d10:	68f8      	ldr	r0, [r7, #12]
    2d12:	f000 f9f7 	bl	3104 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    2d16:	f000 fe69 	bl	39ec <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
    2d1a:	e78e      	b.n	2c3a <xQueueGenericSend+0x12>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    2d1c:	68f8      	ldr	r0, [r7, #12]
    2d1e:	f000 f9f1 	bl	3104 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    2d22:	f000 fe63 	bl	39ec <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    2d26:	2300      	movs	r3, #0
    2d28:	e000      	b.n	2d2c <xQueueGenericSend+0x104>
		}
	}
    2d2a:	e786      	b.n	2c3a <xQueueGenericSend+0x12>
}
    2d2c:	4618      	mov	r0, r3
    2d2e:	3720      	adds	r7, #32
    2d30:	46bd      	mov	sp, r7
    2d32:	bd80      	pop	{r7, pc}

00002d34 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    2d34:	b580      	push	{r7, lr}
    2d36:	b086      	sub	sp, #24
    2d38:	af00      	add	r7, sp, #0
    2d3a:	60f8      	str	r0, [r7, #12]
    2d3c:	60b9      	str	r1, [r7, #8]
    2d3e:	607a      	str	r2, [r7, #4]
    2d40:	603b      	str	r3, [r7, #0]
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    2d42:	2300      	movs	r3, #0
    2d44:	613b      	str	r3, [r7, #16]
    2d46:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    2d4a:	f380 8811 	msr	BASEPRI, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    2d4e:	68fb      	ldr	r3, [r7, #12]
    2d50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    2d52:	68fb      	ldr	r3, [r7, #12]
    2d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2d56:	429a      	cmp	r2, r3
    2d58:	d221      	bcs.n	2d9e <xQueueGenericSendFromISR+0x6a>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    2d5a:	68f8      	ldr	r0, [r7, #12]
    2d5c:	68b9      	ldr	r1, [r7, #8]
    2d5e:	683a      	ldr	r2, [r7, #0]
    2d60:	f000 f94e 	bl	3000 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    2d64:	68fb      	ldr	r3, [r7, #12]
    2d66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2d68:	f1b3 3fff 	cmp.w	r3, #4294967295
    2d6c:	d10f      	bne.n	2d8e <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2d6e:	68fb      	ldr	r3, [r7, #12]
    2d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2d72:	2b00      	cmp	r3, #0
    2d74:	d010      	beq.n	2d98 <xQueueGenericSendFromISR+0x64>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2d76:	68fb      	ldr	r3, [r7, #12]
    2d78:	3324      	adds	r3, #36	; 0x24
    2d7a:	4618      	mov	r0, r3
    2d7c:	f001 f87a 	bl	3e74 <xTaskRemoveFromEventList>
    2d80:	4603      	mov	r3, r0
    2d82:	2b00      	cmp	r3, #0
    2d84:	d008      	beq.n	2d98 <xQueueGenericSendFromISR+0x64>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    2d86:	687b      	ldr	r3, [r7, #4]
    2d88:	2201      	movs	r2, #1
    2d8a:	601a      	str	r2, [r3, #0]
    2d8c:	e004      	b.n	2d98 <xQueueGenericSendFromISR+0x64>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    2d8e:	68fb      	ldr	r3, [r7, #12]
    2d90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2d92:	1c5a      	adds	r2, r3, #1
    2d94:	68fb      	ldr	r3, [r7, #12]
    2d96:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
    2d98:	2301      	movs	r3, #1
    2d9a:	617b      	str	r3, [r7, #20]
    2d9c:	e001      	b.n	2da2 <xQueueGenericSendFromISR+0x6e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    2d9e:	2300      	movs	r3, #0
    2da0:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    2da2:	f04f 0000 	mov.w	r0, #0
    2da6:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    2daa:	697b      	ldr	r3, [r7, #20]
}
    2dac:	4618      	mov	r0, r3
    2dae:	3718      	adds	r7, #24
    2db0:	46bd      	mov	sp, r7
    2db2:	bd80      	pop	{r7, pc}

00002db4 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    2db4:	b580      	push	{r7, lr}
    2db6:	b088      	sub	sp, #32
    2db8:	af00      	add	r7, sp, #0
    2dba:	60f8      	str	r0, [r7, #12]
    2dbc:	60b9      	str	r1, [r7, #8]
    2dbe:	607a      	str	r2, [r7, #4]
    2dc0:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    2dc2:	2300      	movs	r3, #0
    2dc4:	61fb      	str	r3, [r7, #28]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    2dc6:	f001 fbb3 	bl	4530 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    2dca:	68fb      	ldr	r3, [r7, #12]
    2dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2dce:	2b00      	cmp	r3, #0
    2dd0:	d03b      	beq.n	2e4a <xQueueGenericReceive+0x96>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    2dd2:	68fb      	ldr	r3, [r7, #12]
    2dd4:	68db      	ldr	r3, [r3, #12]
    2dd6:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    2dd8:	68f8      	ldr	r0, [r7, #12]
    2dda:	68b9      	ldr	r1, [r7, #8]
    2ddc:	f000 f96c 	bl	30b8 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    2de0:	683b      	ldr	r3, [r7, #0]
    2de2:	2b00      	cmp	r3, #0
    2de4:	d11c      	bne.n	2e20 <xQueueGenericReceive+0x6c>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    2de6:	68fb      	ldr	r3, [r7, #12]
    2de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2dea:	1e5a      	subs	r2, r3, #1
    2dec:	68fb      	ldr	r3, [r7, #12]
    2dee:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    2df0:	68fb      	ldr	r3, [r7, #12]
    2df2:	681b      	ldr	r3, [r3, #0]
    2df4:	2b00      	cmp	r3, #0
    2df6:	d104      	bne.n	2e02 <xQueueGenericReceive+0x4e>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
    2df8:	f001 fa66 	bl	42c8 <xTaskGetCurrentTaskHandle>
    2dfc:	4602      	mov	r2, r0
    2dfe:	68fb      	ldr	r3, [r7, #12]
    2e00:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2e02:	68fb      	ldr	r3, [r7, #12]
    2e04:	691b      	ldr	r3, [r3, #16]
    2e06:	2b00      	cmp	r3, #0
    2e08:	d01b      	beq.n	2e42 <xQueueGenericReceive+0x8e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    2e0a:	68fb      	ldr	r3, [r7, #12]
    2e0c:	3310      	adds	r3, #16
    2e0e:	4618      	mov	r0, r3
    2e10:	f001 f830 	bl	3e74 <xTaskRemoveFromEventList>
    2e14:	4603      	mov	r3, r0
    2e16:	2b01      	cmp	r3, #1
    2e18:	d113      	bne.n	2e42 <xQueueGenericReceive+0x8e>
						{
							portYIELD_WITHIN_API();
    2e1a:	f001 fb7b 	bl	4514 <vPortYieldFromISR>
    2e1e:	e010      	b.n	2e42 <xQueueGenericReceive+0x8e>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    2e20:	68fb      	ldr	r3, [r7, #12]
    2e22:	69ba      	ldr	r2, [r7, #24]
    2e24:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2e26:	68fb      	ldr	r3, [r7, #12]
    2e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2e2a:	2b00      	cmp	r3, #0
    2e2c:	d009      	beq.n	2e42 <xQueueGenericReceive+0x8e>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2e2e:	68fb      	ldr	r3, [r7, #12]
    2e30:	3324      	adds	r3, #36	; 0x24
    2e32:	4618      	mov	r0, r3
    2e34:	f001 f81e 	bl	3e74 <xTaskRemoveFromEventList>
    2e38:	4603      	mov	r3, r0
    2e3a:	2b00      	cmp	r3, #0
    2e3c:	d001      	beq.n	2e42 <xQueueGenericReceive+0x8e>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    2e3e:	f001 fb69 	bl	4514 <vPortYieldFromISR>
						}
					}

				}

				taskEXIT_CRITICAL();
    2e42:	f001 fb8b 	bl	455c <vPortExitCritical>
				return pdPASS;
    2e46:	2301      	movs	r3, #1
    2e48:	e066      	b.n	2f18 <xQueueGenericReceive+0x164>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    2e4a:	687b      	ldr	r3, [r7, #4]
    2e4c:	2b00      	cmp	r3, #0
    2e4e:	d103      	bne.n	2e58 <xQueueGenericReceive+0xa4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    2e50:	f001 fb84 	bl	455c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    2e54:	2300      	movs	r3, #0
    2e56:	e05f      	b.n	2f18 <xQueueGenericReceive+0x164>
				}
				else if( xEntryTimeSet == pdFALSE )
    2e58:	69fb      	ldr	r3, [r7, #28]
    2e5a:	2b00      	cmp	r3, #0
    2e5c:	d106      	bne.n	2e6c <xQueueGenericReceive+0xb8>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    2e5e:	f107 0310 	add.w	r3, r7, #16
    2e62:	4618      	mov	r0, r3
    2e64:	f001 f85e 	bl	3f24 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    2e68:	2301      	movs	r3, #1
    2e6a:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    2e6c:	f001 fb76 	bl	455c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    2e70:	f000 fdaa 	bl	39c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    2e74:	f001 fb5c 	bl	4530 <vPortEnterCritical>
    2e78:	68fb      	ldr	r3, [r7, #12]
    2e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
    2e80:	d102      	bne.n	2e88 <xQueueGenericReceive+0xd4>
    2e82:	68fb      	ldr	r3, [r7, #12]
    2e84:	2200      	movs	r2, #0
    2e86:	645a      	str	r2, [r3, #68]	; 0x44
    2e88:	68fb      	ldr	r3, [r7, #12]
    2e8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
    2e90:	d102      	bne.n	2e98 <xQueueGenericReceive+0xe4>
    2e92:	68fb      	ldr	r3, [r7, #12]
    2e94:	2200      	movs	r2, #0
    2e96:	649a      	str	r2, [r3, #72]	; 0x48
    2e98:	f001 fb60 	bl	455c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2e9c:	f107 0210 	add.w	r2, r7, #16
    2ea0:	1d3b      	adds	r3, r7, #4
    2ea2:	4610      	mov	r0, r2
    2ea4:	4619      	mov	r1, r3
    2ea6:	f001 f855 	bl	3f54 <xTaskCheckForTimeOut>
    2eaa:	4603      	mov	r3, r0
    2eac:	2b00      	cmp	r3, #0
    2eae:	d12b      	bne.n	2f08 <xQueueGenericReceive+0x154>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    2eb0:	68f8      	ldr	r0, [r7, #12]
    2eb2:	f000 f973 	bl	319c <prvIsQueueEmpty>
    2eb6:	4603      	mov	r3, r0
    2eb8:	2b00      	cmp	r3, #0
    2eba:	d01f      	beq.n	2efc <xQueueGenericReceive+0x148>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    2ebc:	68fb      	ldr	r3, [r7, #12]
    2ebe:	681b      	ldr	r3, [r3, #0]
    2ec0:	2b00      	cmp	r3, #0
    2ec2:	d108      	bne.n	2ed6 <xQueueGenericReceive+0x122>
					{
						portENTER_CRITICAL();
    2ec4:	f001 fb34 	bl	4530 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    2ec8:	68fb      	ldr	r3, [r7, #12]
    2eca:	685b      	ldr	r3, [r3, #4]
    2ecc:	4618      	mov	r0, r3
    2ece:	f001 fa0b 	bl	42e8 <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
    2ed2:	f001 fb43 	bl	455c <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    2ed6:	68fb      	ldr	r3, [r7, #12]
    2ed8:	f103 0224 	add.w	r2, r3, #36	; 0x24
    2edc:	687b      	ldr	r3, [r7, #4]
    2ede:	4610      	mov	r0, r2
    2ee0:	4619      	mov	r1, r3
    2ee2:	f000 ff8f 	bl	3e04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    2ee6:	68f8      	ldr	r0, [r7, #12]
    2ee8:	f000 f90c 	bl	3104 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    2eec:	f000 fd7e 	bl	39ec <xTaskResumeAll>
    2ef0:	4603      	mov	r3, r0
    2ef2:	2b00      	cmp	r3, #0
    2ef4:	d10f      	bne.n	2f16 <xQueueGenericReceive+0x162>
				{
					portYIELD_WITHIN_API();
    2ef6:	f001 fb0d 	bl	4514 <vPortYieldFromISR>
    2efa:	e00c      	b.n	2f16 <xQueueGenericReceive+0x162>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    2efc:	68f8      	ldr	r0, [r7, #12]
    2efe:	f000 f901 	bl	3104 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    2f02:	f000 fd73 	bl	39ec <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
    2f06:	e75e      	b.n	2dc6 <xQueueGenericReceive+0x12>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    2f08:	68f8      	ldr	r0, [r7, #12]
    2f0a:	f000 f8fb 	bl	3104 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    2f0e:	f000 fd6d 	bl	39ec <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    2f12:	2300      	movs	r3, #0
    2f14:	e000      	b.n	2f18 <xQueueGenericReceive+0x164>
		}
	}
    2f16:	e756      	b.n	2dc6 <xQueueGenericReceive+0x12>
}
    2f18:	4618      	mov	r0, r3
    2f1a:	3720      	adds	r7, #32
    2f1c:	46bd      	mov	sp, r7
    2f1e:	bd80      	pop	{r7, pc}

00002f20 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    2f20:	b580      	push	{r7, lr}
    2f22:	b086      	sub	sp, #24
    2f24:	af00      	add	r7, sp, #0
    2f26:	60f8      	str	r0, [r7, #12]
    2f28:	60b9      	str	r1, [r7, #8]
    2f2a:	607a      	str	r2, [r7, #4]

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    2f2c:	2300      	movs	r3, #0
    2f2e:	613b      	str	r3, [r7, #16]
    2f30:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    2f34:	f380 8811 	msr	BASEPRI, r0
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    2f38:	68fb      	ldr	r3, [r7, #12]
    2f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2f3c:	2b00      	cmp	r3, #0
    2f3e:	d025      	beq.n	2f8c <xQueueReceiveFromISR+0x6c>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    2f40:	68f8      	ldr	r0, [r7, #12]
    2f42:	68b9      	ldr	r1, [r7, #8]
    2f44:	f000 f8b8 	bl	30b8 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    2f48:	68fb      	ldr	r3, [r7, #12]
    2f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2f4c:	1e5a      	subs	r2, r3, #1
    2f4e:	68fb      	ldr	r3, [r7, #12]
    2f50:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    2f52:	68fb      	ldr	r3, [r7, #12]
    2f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2f56:	f1b3 3fff 	cmp.w	r3, #4294967295
    2f5a:	d10f      	bne.n	2f7c <xQueueReceiveFromISR+0x5c>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2f5c:	68fb      	ldr	r3, [r7, #12]
    2f5e:	691b      	ldr	r3, [r3, #16]
    2f60:	2b00      	cmp	r3, #0
    2f62:	d010      	beq.n	2f86 <xQueueReceiveFromISR+0x66>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    2f64:	68fb      	ldr	r3, [r7, #12]
    2f66:	3310      	adds	r3, #16
    2f68:	4618      	mov	r0, r3
    2f6a:	f000 ff83 	bl	3e74 <xTaskRemoveFromEventList>
    2f6e:	4603      	mov	r3, r0
    2f70:	2b00      	cmp	r3, #0
    2f72:	d008      	beq.n	2f86 <xQueueReceiveFromISR+0x66>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    2f74:	687b      	ldr	r3, [r7, #4]
    2f76:	2201      	movs	r2, #1
    2f78:	601a      	str	r2, [r3, #0]
    2f7a:	e004      	b.n	2f86 <xQueueReceiveFromISR+0x66>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    2f7c:	68fb      	ldr	r3, [r7, #12]
    2f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2f80:	1c5a      	adds	r2, r3, #1
    2f82:	68fb      	ldr	r3, [r7, #12]
    2f84:	645a      	str	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
    2f86:	2301      	movs	r3, #1
    2f88:	617b      	str	r3, [r7, #20]
    2f8a:	e001      	b.n	2f90 <xQueueReceiveFromISR+0x70>
		}
		else
		{
			xReturn = pdFAIL;
    2f8c:	2300      	movs	r3, #0
    2f8e:	617b      	str	r3, [r7, #20]
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    2f90:	f04f 0000 	mov.w	r0, #0
    2f94:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    2f98:	697b      	ldr	r3, [r7, #20]
}
    2f9a:	4618      	mov	r0, r3
    2f9c:	3718      	adds	r7, #24
    2f9e:	46bd      	mov	sp, r7
    2fa0:	bd80      	pop	{r7, pc}
    2fa2:	bf00      	nop

00002fa4 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    2fa4:	b580      	push	{r7, lr}
    2fa6:	b084      	sub	sp, #16
    2fa8:	af00      	add	r7, sp, #0
    2faa:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    2fac:	f001 fac0 	bl	4530 <vPortEnterCritical>
		uxReturn = pxQueue->uxMessagesWaiting;
    2fb0:	687b      	ldr	r3, [r7, #4]
    2fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2fb4:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    2fb6:	f001 fad1 	bl	455c <vPortExitCritical>

	return uxReturn;
    2fba:	68fb      	ldr	r3, [r7, #12]
}
    2fbc:	4618      	mov	r0, r3
    2fbe:	3710      	adds	r7, #16
    2fc0:	46bd      	mov	sp, r7
    2fc2:	bd80      	pop	{r7, pc}

00002fc4 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    2fc4:	b480      	push	{r7}
    2fc6:	b085      	sub	sp, #20
    2fc8:	af00      	add	r7, sp, #0
    2fca:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    2fcc:	687b      	ldr	r3, [r7, #4]
    2fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2fd0:	60fb      	str	r3, [r7, #12]

	return uxReturn;
    2fd2:	68fb      	ldr	r3, [r7, #12]
}
    2fd4:	4618      	mov	r0, r3
    2fd6:	3714      	adds	r7, #20
    2fd8:	46bd      	mov	sp, r7
    2fda:	f85d 7b04 	ldr.w	r7, [sp], #4
    2fde:	4770      	bx	lr

00002fe0 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    2fe0:	b580      	push	{r7, lr}
    2fe2:	b082      	sub	sp, #8
    2fe4:	af00      	add	r7, sp, #0
    2fe6:	6078      	str	r0, [r7, #4]
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    2fe8:	687b      	ldr	r3, [r7, #4]
    2fea:	681b      	ldr	r3, [r3, #0]
    2fec:	4618      	mov	r0, r3
    2fee:	f001 fb69 	bl	46c4 <vPortFree>
	vPortFree( pxQueue );
    2ff2:	6878      	ldr	r0, [r7, #4]
    2ff4:	f001 fb66 	bl	46c4 <vPortFree>
}
    2ff8:	3708      	adds	r7, #8
    2ffa:	46bd      	mov	sp, r7
    2ffc:	bd80      	pop	{r7, pc}
    2ffe:	bf00      	nop

00003000 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    3000:	b580      	push	{r7, lr}
    3002:	b084      	sub	sp, #16
    3004:	af00      	add	r7, sp, #0
    3006:	60f8      	str	r0, [r7, #12]
    3008:	60b9      	str	r1, [r7, #8]
    300a:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    300c:	68fb      	ldr	r3, [r7, #12]
    300e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3010:	2b00      	cmp	r3, #0
    3012:	d10c      	bne.n	302e <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    3014:	68fb      	ldr	r3, [r7, #12]
    3016:	681b      	ldr	r3, [r3, #0]
    3018:	2b00      	cmp	r3, #0
    301a:	d145      	bne.n	30a8 <prvCopyDataToQueue+0xa8>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    301c:	68fb      	ldr	r3, [r7, #12]
    301e:	685b      	ldr	r3, [r3, #4]
    3020:	4618      	mov	r0, r3
    3022:	f001 f9c5 	bl	43b0 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
    3026:	68fb      	ldr	r3, [r7, #12]
    3028:	2200      	movs	r2, #0
    302a:	605a      	str	r2, [r3, #4]
    302c:	e03c      	b.n	30a8 <prvCopyDataToQueue+0xa8>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    302e:	687b      	ldr	r3, [r7, #4]
    3030:	2b00      	cmp	r3, #0
    3032:	d11a      	bne.n	306a <prvCopyDataToQueue+0x6a>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    3034:	68fb      	ldr	r3, [r7, #12]
    3036:	689a      	ldr	r2, [r3, #8]
    3038:	68fb      	ldr	r3, [r7, #12]
    303a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    303c:	4610      	mov	r0, r2
    303e:	68b9      	ldr	r1, [r7, #8]
    3040:	461a      	mov	r2, r3
    3042:	f002 f97f 	bl	5344 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    3046:	68fb      	ldr	r3, [r7, #12]
    3048:	689a      	ldr	r2, [r3, #8]
    304a:	68fb      	ldr	r3, [r7, #12]
    304c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    304e:	441a      	add	r2, r3
    3050:	68fb      	ldr	r3, [r7, #12]
    3052:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    3054:	68fb      	ldr	r3, [r7, #12]
    3056:	689a      	ldr	r2, [r3, #8]
    3058:	68fb      	ldr	r3, [r7, #12]
    305a:	685b      	ldr	r3, [r3, #4]
    305c:	429a      	cmp	r2, r3
    305e:	d323      	bcc.n	30a8 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    3060:	68fb      	ldr	r3, [r7, #12]
    3062:	681a      	ldr	r2, [r3, #0]
    3064:	68fb      	ldr	r3, [r7, #12]
    3066:	609a      	str	r2, [r3, #8]
    3068:	e01e      	b.n	30a8 <prvCopyDataToQueue+0xa8>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    306a:	68fb      	ldr	r3, [r7, #12]
    306c:	68da      	ldr	r2, [r3, #12]
    306e:	68fb      	ldr	r3, [r7, #12]
    3070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3072:	4610      	mov	r0, r2
    3074:	68b9      	ldr	r1, [r7, #8]
    3076:	461a      	mov	r2, r3
    3078:	f002 f964 	bl	5344 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    307c:	68fb      	ldr	r3, [r7, #12]
    307e:	68da      	ldr	r2, [r3, #12]
    3080:	68fb      	ldr	r3, [r7, #12]
    3082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3084:	425b      	negs	r3, r3
    3086:	441a      	add	r2, r3
    3088:	68fb      	ldr	r3, [r7, #12]
    308a:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    308c:	68fb      	ldr	r3, [r7, #12]
    308e:	68da      	ldr	r2, [r3, #12]
    3090:	68fb      	ldr	r3, [r7, #12]
    3092:	681b      	ldr	r3, [r3, #0]
    3094:	429a      	cmp	r2, r3
    3096:	d207      	bcs.n	30a8 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    3098:	68fb      	ldr	r3, [r7, #12]
    309a:	685a      	ldr	r2, [r3, #4]
    309c:	68fb      	ldr	r3, [r7, #12]
    309e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    30a0:	425b      	negs	r3, r3
    30a2:	441a      	add	r2, r3
    30a4:	68fb      	ldr	r3, [r7, #12]
    30a6:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
    30a8:	68fb      	ldr	r3, [r7, #12]
    30aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    30ac:	1c5a      	adds	r2, r3, #1
    30ae:	68fb      	ldr	r3, [r7, #12]
    30b0:	639a      	str	r2, [r3, #56]	; 0x38
}
    30b2:	3710      	adds	r7, #16
    30b4:	46bd      	mov	sp, r7
    30b6:	bd80      	pop	{r7, pc}

000030b8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    30b8:	b580      	push	{r7, lr}
    30ba:	b082      	sub	sp, #8
    30bc:	af00      	add	r7, sp, #0
    30be:	6078      	str	r0, [r7, #4]
    30c0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    30c2:	687b      	ldr	r3, [r7, #4]
    30c4:	681b      	ldr	r3, [r3, #0]
    30c6:	2b00      	cmp	r3, #0
    30c8:	d019      	beq.n	30fe <prvCopyDataFromQueue+0x46>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    30ca:	687b      	ldr	r3, [r7, #4]
    30cc:	68da      	ldr	r2, [r3, #12]
    30ce:	687b      	ldr	r3, [r7, #4]
    30d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    30d2:	441a      	add	r2, r3
    30d4:	687b      	ldr	r3, [r7, #4]
    30d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    30d8:	687b      	ldr	r3, [r7, #4]
    30da:	68da      	ldr	r2, [r3, #12]
    30dc:	687b      	ldr	r3, [r7, #4]
    30de:	685b      	ldr	r3, [r3, #4]
    30e0:	429a      	cmp	r2, r3
    30e2:	d303      	bcc.n	30ec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    30e4:	687b      	ldr	r3, [r7, #4]
    30e6:	681a      	ldr	r2, [r3, #0]
    30e8:	687b      	ldr	r3, [r7, #4]
    30ea:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    30ec:	687b      	ldr	r3, [r7, #4]
    30ee:	68da      	ldr	r2, [r3, #12]
    30f0:	687b      	ldr	r3, [r7, #4]
    30f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    30f4:	6838      	ldr	r0, [r7, #0]
    30f6:	4611      	mov	r1, r2
    30f8:	461a      	mov	r2, r3
    30fa:	f002 f923 	bl	5344 <memcpy>
	}
}
    30fe:	3708      	adds	r7, #8
    3100:	46bd      	mov	sp, r7
    3102:	bd80      	pop	{r7, pc}

00003104 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    3104:	b580      	push	{r7, lr}
    3106:	b082      	sub	sp, #8
    3108:	af00      	add	r7, sp, #0
    310a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    310c:	f001 fa10 	bl	4530 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    3110:	e014      	b.n	313c <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3112:	687b      	ldr	r3, [r7, #4]
    3114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3116:	2b00      	cmp	r3, #0
    3118:	d00f      	beq.n	313a <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    311a:	687b      	ldr	r3, [r7, #4]
    311c:	3324      	adds	r3, #36	; 0x24
    311e:	4618      	mov	r0, r3
    3120:	f000 fea8 	bl	3e74 <xTaskRemoveFromEventList>
    3124:	4603      	mov	r3, r0
    3126:	2b00      	cmp	r3, #0
    3128:	d001      	beq.n	312e <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    312a:	f000 ff5f 	bl	3fec <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    312e:	687b      	ldr	r3, [r7, #4]
    3130:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3132:	1e5a      	subs	r2, r3, #1
    3134:	687b      	ldr	r3, [r7, #4]
    3136:	649a      	str	r2, [r3, #72]	; 0x48
    3138:	e000      	b.n	313c <prvUnlockQueue+0x38>
			}
			else
			{
				break;
    313a:	e003      	b.n	3144 <prvUnlockQueue+0x40>
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    313c:	687b      	ldr	r3, [r7, #4]
    313e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3140:	2b00      	cmp	r3, #0
    3142:	dce6      	bgt.n	3112 <prvUnlockQueue+0xe>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    3144:	687b      	ldr	r3, [r7, #4]
    3146:	f04f 32ff 	mov.w	r2, #4294967295
    314a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
    314c:	f001 fa06 	bl	455c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    3150:	f001 f9ee 	bl	4530 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    3154:	e014      	b.n	3180 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3156:	687b      	ldr	r3, [r7, #4]
    3158:	691b      	ldr	r3, [r3, #16]
    315a:	2b00      	cmp	r3, #0
    315c:	d00f      	beq.n	317e <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    315e:	687b      	ldr	r3, [r7, #4]
    3160:	3310      	adds	r3, #16
    3162:	4618      	mov	r0, r3
    3164:	f000 fe86 	bl	3e74 <xTaskRemoveFromEventList>
    3168:	4603      	mov	r3, r0
    316a:	2b00      	cmp	r3, #0
    316c:	d001      	beq.n	3172 <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
    316e:	f000 ff3d 	bl	3fec <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    3172:	687b      	ldr	r3, [r7, #4]
    3174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3176:	1e5a      	subs	r2, r3, #1
    3178:	687b      	ldr	r3, [r7, #4]
    317a:	645a      	str	r2, [r3, #68]	; 0x44
    317c:	e000      	b.n	3180 <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
    317e:	e003      	b.n	3188 <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    3180:	687b      	ldr	r3, [r7, #4]
    3182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3184:	2b00      	cmp	r3, #0
    3186:	dce6      	bgt.n	3156 <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    3188:	687b      	ldr	r3, [r7, #4]
    318a:	f04f 32ff 	mov.w	r2, #4294967295
    318e:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    3190:	f001 f9e4 	bl	455c <vPortExitCritical>
}
    3194:	3708      	adds	r7, #8
    3196:	46bd      	mov	sp, r7
    3198:	bd80      	pop	{r7, pc}
    319a:	bf00      	nop

0000319c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    319c:	b580      	push	{r7, lr}
    319e:	b084      	sub	sp, #16
    31a0:	af00      	add	r7, sp, #0
    31a2:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    31a4:	f001 f9c4 	bl	4530 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    31a8:	687b      	ldr	r3, [r7, #4]
    31aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    31ac:	2b00      	cmp	r3, #0
    31ae:	bf14      	ite	ne
    31b0:	2300      	movne	r3, #0
    31b2:	2301      	moveq	r3, #1
    31b4:	b2db      	uxtb	r3, r3
    31b6:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    31b8:	f001 f9d0 	bl	455c <vPortExitCritical>

	return xReturn;
    31bc:	68fb      	ldr	r3, [r7, #12]
}
    31be:	4618      	mov	r0, r3
    31c0:	3710      	adds	r7, #16
    31c2:	46bd      	mov	sp, r7
    31c4:	bd80      	pop	{r7, pc}
    31c6:	bf00      	nop

000031c8 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    31c8:	b480      	push	{r7}
    31ca:	b085      	sub	sp, #20
    31cc:	af00      	add	r7, sp, #0
    31ce:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    31d0:	687b      	ldr	r3, [r7, #4]
    31d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    31d4:	2b00      	cmp	r3, #0
    31d6:	bf14      	ite	ne
    31d8:	2300      	movne	r3, #0
    31da:	2301      	moveq	r3, #1
    31dc:	b2db      	uxtb	r3, r3
    31de:	60fb      	str	r3, [r7, #12]

	return xReturn;
    31e0:	68fb      	ldr	r3, [r7, #12]
}
    31e2:	4618      	mov	r0, r3
    31e4:	3714      	adds	r7, #20
    31e6:	46bd      	mov	sp, r7
    31e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    31ec:	4770      	bx	lr
    31ee:	bf00      	nop

000031f0 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    31f0:	b580      	push	{r7, lr}
    31f2:	b084      	sub	sp, #16
    31f4:	af00      	add	r7, sp, #0
    31f6:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    31f8:	f001 f99a 	bl	4530 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    31fc:	687b      	ldr	r3, [r7, #4]
    31fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    3200:	687b      	ldr	r3, [r7, #4]
    3202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    3204:	429a      	cmp	r2, r3
    3206:	bf14      	ite	ne
    3208:	2300      	movne	r3, #0
    320a:	2301      	moveq	r3, #1
    320c:	b2db      	uxtb	r3, r3
    320e:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    3210:	f001 f9a4 	bl	455c <vPortExitCritical>

	return xReturn;
    3214:	68fb      	ldr	r3, [r7, #12]
}
    3216:	4618      	mov	r0, r3
    3218:	3710      	adds	r7, #16
    321a:	46bd      	mov	sp, r7
    321c:	bd80      	pop	{r7, pc}
    321e:	bf00      	nop

00003220 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    3220:	b480      	push	{r7}
    3222:	b085      	sub	sp, #20
    3224:	af00      	add	r7, sp, #0
    3226:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    3228:	687b      	ldr	r3, [r7, #4]
    322a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    322c:	687b      	ldr	r3, [r7, #4]
    322e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    3230:	429a      	cmp	r2, r3
    3232:	bf14      	ite	ne
    3234:	2300      	movne	r3, #0
    3236:	2301      	moveq	r3, #1
    3238:	b2db      	uxtb	r3, r3
    323a:	60fb      	str	r3, [r7, #12]

	return xReturn;
    323c:	68fb      	ldr	r3, [r7, #12]
}
    323e:	4618      	mov	r0, r3
    3240:	3714      	adds	r7, #20
    3242:	46bd      	mov	sp, r7
    3244:	f85d 7b04 	ldr.w	r7, [sp], #4
    3248:	4770      	bx	lr
    324a:	bf00      	nop

0000324c <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    324c:	b580      	push	{r7, lr}
    324e:	b08a      	sub	sp, #40	; 0x28
    3250:	af02      	add	r7, sp, #8
    3252:	60f8      	str	r0, [r7, #12]
    3254:	60b9      	str	r1, [r7, #8]
    3256:	603b      	str	r3, [r7, #0]
    3258:	4613      	mov	r3, r2
    325a:	80fb      	strh	r3, [r7, #6]
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    325c:	88fb      	ldrh	r3, [r7, #6]
    325e:	4618      	mov	r0, r3
    3260:	6b39      	ldr	r1, [r7, #48]	; 0x30
    3262:	f000 ffef 	bl	4244 <prvAllocateTCBAndStack>
    3266:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
    3268:	69bb      	ldr	r3, [r7, #24]
    326a:	2b00      	cmp	r3, #0
    326c:	f000 80a1 	beq.w	33b2 <xTaskGenericCreate+0x166>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    3270:	69bb      	ldr	r3, [r7, #24]
    3272:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    3274:	88fb      	ldrh	r3, [r7, #6]
    3276:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    327a:	3b01      	subs	r3, #1
    327c:	009b      	lsls	r3, r3, #2
    327e:	4413      	add	r3, r2
    3280:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
    3282:	697b      	ldr	r3, [r7, #20]
    3284:	f023 0307 	bic.w	r3, r3, #7
    3288:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    328a:	88fb      	ldrh	r3, [r7, #6]
    328c:	9300      	str	r3, [sp, #0]
    328e:	69b8      	ldr	r0, [r7, #24]
    3290:	68b9      	ldr	r1, [r7, #8]
    3292:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3296:	f000 fec7 	bl	4028 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    329a:	6978      	ldr	r0, [r7, #20]
    329c:	68f9      	ldr	r1, [r7, #12]
    329e:	683a      	ldr	r2, [r7, #0]
    32a0:	f001 f8c8 	bl	4434 <pxPortInitialiseStack>
    32a4:	4602      	mov	r2, r0
    32a6:	69bb      	ldr	r3, [r7, #24]
    32a8:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    32aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    32ac:	2b00      	cmp	r3, #0
    32ae:	d002      	beq.n	32b6 <xTaskGenericCreate+0x6a>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    32b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    32b2:	69ba      	ldr	r2, [r7, #24]
    32b4:	601a      	str	r2, [r3, #0]
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    32b6:	f001 f93b 	bl	4530 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
    32ba:	f240 1388 	movw	r3, #392	; 0x188
    32be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32c2:	681b      	ldr	r3, [r3, #0]
    32c4:	1c5a      	adds	r2, r3, #1
    32c6:	f240 1388 	movw	r3, #392	; 0x188
    32ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32ce:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
    32d0:	f240 03b0 	movw	r3, #176	; 0xb0
    32d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32d8:	681b      	ldr	r3, [r3, #0]
    32da:	2b00      	cmp	r3, #0
    32dc:	d10f      	bne.n	32fe <xTaskGenericCreate+0xb2>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    32de:	f240 03b0 	movw	r3, #176	; 0xb0
    32e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32e6:	69ba      	ldr	r2, [r7, #24]
    32e8:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    32ea:	f240 1388 	movw	r3, #392	; 0x188
    32ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32f2:	681b      	ldr	r3, [r3, #0]
    32f4:	2b01      	cmp	r3, #1
    32f6:	d118      	bne.n	332a <xTaskGenericCreate+0xde>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    32f8:	f000 fecc 	bl	4094 <prvInitialiseTaskLists>
    32fc:	e015      	b.n	332a <xTaskGenericCreate+0xde>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    32fe:	f240 1398 	movw	r3, #408	; 0x198
    3302:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3306:	681b      	ldr	r3, [r3, #0]
    3308:	2b00      	cmp	r3, #0
    330a:	d10e      	bne.n	332a <xTaskGenericCreate+0xde>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    330c:	f240 03b0 	movw	r3, #176	; 0xb0
    3310:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3314:	681b      	ldr	r3, [r3, #0]
    3316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3318:	6abb      	ldr	r3, [r7, #40]	; 0x28
    331a:	429a      	cmp	r2, r3
    331c:	d805      	bhi.n	332a <xTaskGenericCreate+0xde>
					{
						pxCurrentTCB = pxNewTCB;
    331e:	f240 03b0 	movw	r3, #176	; 0xb0
    3322:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3326:	69ba      	ldr	r2, [r7, #24]
    3328:	601a      	str	r2, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    332a:	69bb      	ldr	r3, [r7, #24]
    332c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    332e:	f240 1390 	movw	r3, #400	; 0x190
    3332:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3336:	681b      	ldr	r3, [r3, #0]
    3338:	429a      	cmp	r2, r3
    333a:	d906      	bls.n	334a <xTaskGenericCreate+0xfe>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    333c:	69bb      	ldr	r3, [r7, #24]
    333e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3340:	f240 1390 	movw	r3, #400	; 0x190
    3344:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3348:	601a      	str	r2, [r3, #0]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    334a:	f240 13ac 	movw	r3, #428	; 0x1ac
    334e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3352:	681b      	ldr	r3, [r3, #0]
    3354:	1c5a      	adds	r2, r3, #1
    3356:	f240 13ac 	movw	r3, #428	; 0x1ac
    335a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    335e:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
    3360:	69bb      	ldr	r3, [r7, #24]
    3362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3364:	f240 1394 	movw	r3, #404	; 0x194
    3368:	f2c2 0300 	movt	r3, #8192	; 0x2000
    336c:	681b      	ldr	r3, [r3, #0]
    336e:	429a      	cmp	r2, r3
    3370:	d906      	bls.n	3380 <xTaskGenericCreate+0x134>
    3372:	69bb      	ldr	r3, [r7, #24]
    3374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3376:	f240 1394 	movw	r3, #404	; 0x194
    337a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    337e:	601a      	str	r2, [r3, #0]
    3380:	69bb      	ldr	r3, [r7, #24]
    3382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3384:	4613      	mov	r3, r2
    3386:	009b      	lsls	r3, r3, #2
    3388:	4413      	add	r3, r2
    338a:	009b      	lsls	r3, r3, #2
    338c:	f240 02b4 	movw	r2, #180	; 0xb4
    3390:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3394:	441a      	add	r2, r3
    3396:	69bb      	ldr	r3, [r7, #24]
    3398:	3304      	adds	r3, #4
    339a:	4610      	mov	r0, r2
    339c:	4619      	mov	r1, r3
    339e:	f7ff fadf 	bl	2960 <vListInsertEnd>

			xReturn = pdPASS;
    33a2:	2301      	movs	r3, #1
    33a4:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
    33a6:	69b8      	ldr	r0, [r7, #24]
    33a8:	f001 fcec 	bl	4d84 <myTraceCreate>
		}
		taskEXIT_CRITICAL();
    33ac:	f001 f8d6 	bl	455c <vPortExitCritical>
    33b0:	e002      	b.n	33b8 <xTaskGenericCreate+0x16c>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    33b2:	f04f 33ff 	mov.w	r3, #4294967295
    33b6:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    33b8:	69fb      	ldr	r3, [r7, #28]
    33ba:	2b01      	cmp	r3, #1
    33bc:	d111      	bne.n	33e2 <xTaskGenericCreate+0x196>
	{
		if( xSchedulerRunning != pdFALSE )
    33be:	f240 1398 	movw	r3, #408	; 0x198
    33c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33c6:	681b      	ldr	r3, [r3, #0]
    33c8:	2b00      	cmp	r3, #0
    33ca:	d00a      	beq.n	33e2 <xTaskGenericCreate+0x196>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    33cc:	f240 03b0 	movw	r3, #176	; 0xb0
    33d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33d4:	681b      	ldr	r3, [r3, #0]
    33d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    33d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    33da:	429a      	cmp	r2, r3
    33dc:	d201      	bcs.n	33e2 <xTaskGenericCreate+0x196>
			{
				portYIELD_WITHIN_API();
    33de:	f001 f899 	bl	4514 <vPortYieldFromISR>
			}
		}
	}

	return xReturn;
    33e2:	69fb      	ldr	r3, [r7, #28]
}
    33e4:	4618      	mov	r0, r3
    33e6:	3720      	adds	r7, #32
    33e8:	46bd      	mov	sp, r7
    33ea:	bd80      	pop	{r7, pc}

000033ec <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    33ec:	b580      	push	{r7, lr}
    33ee:	b084      	sub	sp, #16
    33f0:	af00      	add	r7, sp, #0
    33f2:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    33f4:	f001 f89c 	bl	4530 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    33f8:	f240 03b0 	movw	r3, #176	; 0xb0
    33fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3400:	681b      	ldr	r3, [r3, #0]
    3402:	687a      	ldr	r2, [r7, #4]
    3404:	429a      	cmp	r2, r3
    3406:	d101      	bne.n	340c <vTaskDelete+0x20>
			{
				pxTaskToDelete = NULL;
    3408:	2300      	movs	r3, #0
    340a:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    340c:	687b      	ldr	r3, [r7, #4]
    340e:	2b00      	cmp	r3, #0
    3410:	d105      	bne.n	341e <vTaskDelete+0x32>
    3412:	f240 03b0 	movw	r3, #176	; 0xb0
    3416:	f2c2 0300 	movt	r3, #8192	; 0x2000
    341a:	681b      	ldr	r3, [r3, #0]
    341c:	e000      	b.n	3420 <vTaskDelete+0x34>
    341e:	687b      	ldr	r3, [r7, #4]
    3420:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    3422:	68fb      	ldr	r3, [r7, #12]
    3424:	3304      	adds	r3, #4
    3426:	4618      	mov	r0, r3
    3428:	f7ff fafa 	bl	2a20 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    342c:	68fb      	ldr	r3, [r7, #12]
    342e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3430:	2b00      	cmp	r3, #0
    3432:	d004      	beq.n	343e <vTaskDelete+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    3434:	68fb      	ldr	r3, [r7, #12]
    3436:	3318      	adds	r3, #24
    3438:	4618      	mov	r0, r3
    343a:	f7ff faf1 	bl	2a20 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    343e:	68fb      	ldr	r3, [r7, #12]
    3440:	3304      	adds	r3, #4
    3442:	f240 105c 	movw	r0, #348	; 0x15c
    3446:	f2c2 0000 	movt	r0, #8192	; 0x2000
    344a:	4619      	mov	r1, r3
    344c:	f7ff fa88 	bl	2960 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    3450:	f240 1370 	movw	r3, #368	; 0x170
    3454:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3458:	681b      	ldr	r3, [r3, #0]
    345a:	1c5a      	adds	r2, r3, #1
    345c:	f240 1370 	movw	r3, #368	; 0x170
    3460:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3464:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    3466:	f240 13ac 	movw	r3, #428	; 0x1ac
    346a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    346e:	681b      	ldr	r3, [r3, #0]
    3470:	1c5a      	adds	r2, r3, #1
    3472:	f240 13ac 	movw	r3, #428	; 0x1ac
    3476:	f2c2 0300 	movt	r3, #8192	; 0x2000
    347a:	601a      	str	r2, [r3, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    347c:	f001 f86e 	bl	455c <vPortExitCritical>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    3480:	f240 1398 	movw	r3, #408	; 0x198
    3484:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3488:	681b      	ldr	r3, [r3, #0]
    348a:	2b00      	cmp	r3, #0
    348c:	d004      	beq.n	3498 <vTaskDelete+0xac>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    348e:	687b      	ldr	r3, [r7, #4]
    3490:	2b00      	cmp	r3, #0
    3492:	d101      	bne.n	3498 <vTaskDelete+0xac>
			{
				portYIELD_WITHIN_API();
    3494:	f001 f83e 	bl	4514 <vPortYieldFromISR>
			}
		}
	}
    3498:	3710      	adds	r7, #16
    349a:	46bd      	mov	sp, r7
    349c:	bd80      	pop	{r7, pc}
    349e:	bf00      	nop

000034a0 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    34a0:	b580      	push	{r7, lr}
    34a2:	b086      	sub	sp, #24
    34a4:	af00      	add	r7, sp, #0
    34a6:	6078      	str	r0, [r7, #4]
    34a8:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
    34aa:	2300      	movs	r3, #0
    34ac:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    34ae:	f000 fa8b 	bl	39c8 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    34b2:	687b      	ldr	r3, [r7, #4]
    34b4:	681a      	ldr	r2, [r3, #0]
    34b6:	683b      	ldr	r3, [r7, #0]
    34b8:	4413      	add	r3, r2
    34ba:	613b      	str	r3, [r7, #16]

			if( xTickCount < *pxPreviousWakeTime )
    34bc:	687b      	ldr	r3, [r7, #4]
    34be:	681a      	ldr	r2, [r3, #0]
    34c0:	f240 138c 	movw	r3, #396	; 0x18c
    34c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    34c8:	681b      	ldr	r3, [r3, #0]
    34ca:	429a      	cmp	r2, r3
    34cc:	d90f      	bls.n	34ee <vTaskDelayUntil+0x4e>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    34ce:	687b      	ldr	r3, [r7, #4]
    34d0:	681a      	ldr	r2, [r3, #0]
    34d2:	693b      	ldr	r3, [r7, #16]
    34d4:	429a      	cmp	r2, r3
    34d6:	d919      	bls.n	350c <vTaskDelayUntil+0x6c>
    34d8:	f240 138c 	movw	r3, #396	; 0x18c
    34dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    34e0:	681b      	ldr	r3, [r3, #0]
    34e2:	693a      	ldr	r2, [r7, #16]
    34e4:	429a      	cmp	r2, r3
    34e6:	d911      	bls.n	350c <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    34e8:	2301      	movs	r3, #1
    34ea:	617b      	str	r3, [r7, #20]
    34ec:	e00e      	b.n	350c <vTaskDelayUntil+0x6c>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    34ee:	687b      	ldr	r3, [r7, #4]
    34f0:	681a      	ldr	r2, [r3, #0]
    34f2:	693b      	ldr	r3, [r7, #16]
    34f4:	429a      	cmp	r2, r3
    34f6:	d807      	bhi.n	3508 <vTaskDelayUntil+0x68>
    34f8:	f240 138c 	movw	r3, #396	; 0x18c
    34fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3500:	681b      	ldr	r3, [r3, #0]
    3502:	693a      	ldr	r2, [r7, #16]
    3504:	429a      	cmp	r2, r3
    3506:	d901      	bls.n	350c <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    3508:	2301      	movs	r3, #1
    350a:	617b      	str	r3, [r7, #20]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    350c:	687b      	ldr	r3, [r7, #4]
    350e:	693a      	ldr	r2, [r7, #16]
    3510:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
    3512:	697b      	ldr	r3, [r7, #20]
    3514:	2b00      	cmp	r3, #0
    3516:	d00b      	beq.n	3530 <vTaskDelayUntil+0x90>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3518:	f240 03b0 	movw	r3, #176	; 0xb0
    351c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3520:	681b      	ldr	r3, [r3, #0]
    3522:	3304      	adds	r3, #4
    3524:	4618      	mov	r0, r3
    3526:	f7ff fa7b 	bl	2a20 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    352a:	6938      	ldr	r0, [r7, #16]
    352c:	f000 fe46 	bl	41bc <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    3530:	f000 fa5c 	bl	39ec <xTaskResumeAll>
    3534:	60f8      	str	r0, [r7, #12]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    3536:	68fb      	ldr	r3, [r7, #12]
    3538:	2b00      	cmp	r3, #0
    353a:	d101      	bne.n	3540 <vTaskDelayUntil+0xa0>
		{
			portYIELD_WITHIN_API();
    353c:	f000 ffea 	bl	4514 <vPortYieldFromISR>
		}
	}
    3540:	3718      	adds	r7, #24
    3542:	46bd      	mov	sp, r7
    3544:	bd80      	pop	{r7, pc}
    3546:	bf00      	nop

00003548 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    3548:	b580      	push	{r7, lr}
    354a:	b084      	sub	sp, #16
    354c:	af00      	add	r7, sp, #0
    354e:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    3550:	2300      	movs	r3, #0
    3552:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    3554:	687b      	ldr	r3, [r7, #4]
    3556:	2b00      	cmp	r3, #0
    3558:	d018      	beq.n	358c <vTaskDelay+0x44>
		{
			vTaskSuspendAll();
    355a:	f000 fa35 	bl	39c8 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    355e:	f240 138c 	movw	r3, #396	; 0x18c
    3562:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3566:	681a      	ldr	r2, [r3, #0]
    3568:	687b      	ldr	r3, [r7, #4]
    356a:	4413      	add	r3, r2
    356c:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    356e:	f240 03b0 	movw	r3, #176	; 0xb0
    3572:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3576:	681b      	ldr	r3, [r3, #0]
    3578:	3304      	adds	r3, #4
    357a:	4618      	mov	r0, r3
    357c:	f7ff fa50 	bl	2a20 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    3580:	68b8      	ldr	r0, [r7, #8]
    3582:	f000 fe1b 	bl	41bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    3586:	f000 fa31 	bl	39ec <xTaskResumeAll>
    358a:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    358c:	68fb      	ldr	r3, [r7, #12]
    358e:	2b00      	cmp	r3, #0
    3590:	d101      	bne.n	3596 <vTaskDelay+0x4e>
		{
			portYIELD_WITHIN_API();
    3592:	f000 ffbf 	bl	4514 <vPortYieldFromISR>
		}
	}
    3596:	3710      	adds	r7, #16
    3598:	46bd      	mov	sp, r7
    359a:	bd80      	pop	{r7, pc}

0000359c <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
	{
    359c:	b580      	push	{r7, lr}
    359e:	b084      	sub	sp, #16
    35a0:	af00      	add	r7, sp, #0
    35a2:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxReturn;

		taskENTER_CRITICAL();
    35a4:	f000 ffc4 	bl	4530 <vPortEnterCritical>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    35a8:	687b      	ldr	r3, [r7, #4]
    35aa:	2b00      	cmp	r3, #0
    35ac:	d105      	bne.n	35ba <uxTaskPriorityGet+0x1e>
    35ae:	f240 03b0 	movw	r3, #176	; 0xb0
    35b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    35b6:	681b      	ldr	r3, [r3, #0]
    35b8:	e000      	b.n	35bc <uxTaskPriorityGet+0x20>
    35ba:	687b      	ldr	r3, [r7, #4]
    35bc:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
    35be:	68fb      	ldr	r3, [r7, #12]
    35c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    35c2:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
    35c4:	f000 ffca 	bl	455c <vPortExitCritical>

		return uxReturn;
    35c8:	68bb      	ldr	r3, [r7, #8]
	}
    35ca:	4618      	mov	r0, r3
    35cc:	3710      	adds	r7, #16
    35ce:	46bd      	mov	sp, r7
    35d0:	bd80      	pop	{r7, pc}
    35d2:	bf00      	nop

000035d4 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
	{
    35d4:	b580      	push	{r7, lr}
    35d6:	b086      	sub	sp, #24
    35d8:	af00      	add	r7, sp, #0
    35da:	6078      	str	r0, [r7, #4]
    35dc:	6039      	str	r1, [r7, #0]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxCurrentPriority;
	portBASE_TYPE xYieldRequired = pdFALSE;
    35de:	2300      	movs	r3, #0
    35e0:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= configMAX_PRIORITIES )
    35e2:	683b      	ldr	r3, [r7, #0]
    35e4:	2b04      	cmp	r3, #4
    35e6:	d901      	bls.n	35ec <vTaskPrioritySet+0x18>
		{
			uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    35e8:	2304      	movs	r3, #4
    35ea:	603b      	str	r3, [r7, #0]
		}

		taskENTER_CRITICAL();
    35ec:	f000 ffa0 	bl	4530 <vPortEnterCritical>
		{
			if( pxTask == pxCurrentTCB )
    35f0:	f240 03b0 	movw	r3, #176	; 0xb0
    35f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    35f8:	681b      	ldr	r3, [r3, #0]
    35fa:	687a      	ldr	r2, [r7, #4]
    35fc:	429a      	cmp	r2, r3
    35fe:	d101      	bne.n	3604 <vTaskPrioritySet+0x30>
			{
				pxTask = NULL;
    3600:	2300      	movs	r3, #0
    3602:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    3604:	687b      	ldr	r3, [r7, #4]
    3606:	2b00      	cmp	r3, #0
    3608:	d105      	bne.n	3616 <vTaskPrioritySet+0x42>
    360a:	f240 03b0 	movw	r3, #176	; 0xb0
    360e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3612:	681b      	ldr	r3, [r3, #0]
    3614:	e000      	b.n	3618 <vTaskPrioritySet+0x44>
    3616:	687b      	ldr	r3, [r7, #4]
    3618:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentPriority = pxTCB->uxBasePriority;
    361a:	693b      	ldr	r3, [r7, #16]
    361c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    361e:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentPriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentPriority != uxNewPriority )
    3620:	68fa      	ldr	r2, [r7, #12]
    3622:	683b      	ldr	r3, [r7, #0]
    3624:	429a      	cmp	r2, r3
    3626:	d058      	beq.n	36da <vTaskPrioritySet+0x106>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentPriority )
    3628:	683a      	ldr	r2, [r7, #0]
    362a:	68fb      	ldr	r3, [r7, #12]
    362c:	429a      	cmp	r2, r3
    362e:	d905      	bls.n	363c <vTaskPrioritySet+0x68>
				{
					if( pxTask != NULL )
    3630:	687b      	ldr	r3, [r7, #4]
    3632:	2b00      	cmp	r3, #0
    3634:	d007      	beq.n	3646 <vTaskPrioritySet+0x72>
					{
						/* The priority of another task is being raised.  If we
						were raising the priority of the currently running task
						there would be no need to switch as it must have already
						been the highest priority task. */
						xYieldRequired = pdTRUE;
    3636:	2301      	movs	r3, #1
    3638:	617b      	str	r3, [r7, #20]
    363a:	e004      	b.n	3646 <vTaskPrioritySet+0x72>
					}
				}
				else if( pxTask == NULL )
    363c:	687b      	ldr	r3, [r7, #4]
    363e:	2b00      	cmp	r3, #0
    3640:	d101      	bne.n	3646 <vTaskPrioritySet+0x72>
				{
					/* Setting our own priority down means there may now be another
					task of higher priority that is ready to execute. */
					xYieldRequired = pdTRUE;
    3642:	2301      	movs	r3, #1
    3644:	617b      	str	r3, [r7, #20]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    3646:	693b      	ldr	r3, [r7, #16]
    3648:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    364a:	693b      	ldr	r3, [r7, #16]
    364c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    364e:	429a      	cmp	r2, r3
    3650:	d102      	bne.n	3658 <vTaskPrioritySet+0x84>
					{
						pxTCB->uxPriority = uxNewPriority;
    3652:	693b      	ldr	r3, [r7, #16]
    3654:	683a      	ldr	r2, [r7, #0]
    3656:	62da      	str	r2, [r3, #44]	; 0x2c
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
    3658:	693b      	ldr	r3, [r7, #16]
    365a:	683a      	ldr	r2, [r7, #0]
    365c:	645a      	str	r2, [r3, #68]	; 0x44
				{
					pxTCB->uxPriority = uxNewPriority;
				}
				#endif

				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
    365e:	683b      	ldr	r3, [r7, #0]
    3660:	f1c3 0205 	rsb	r2, r3, #5
    3664:	693b      	ldr	r3, [r7, #16]
    3666:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the queue appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
    3668:	693b      	ldr	r3, [r7, #16]
    366a:	6959      	ldr	r1, [r3, #20]
    366c:	68fa      	ldr	r2, [r7, #12]
    366e:	4613      	mov	r3, r2
    3670:	009b      	lsls	r3, r3, #2
    3672:	4413      	add	r3, r2
    3674:	009b      	lsls	r3, r3, #2
    3676:	f240 02b4 	movw	r2, #180	; 0xb4
    367a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    367e:	4413      	add	r3, r2
    3680:	4299      	cmp	r1, r3
    3682:	d125      	bne.n	36d0 <vTaskPrioritySet+0xfc>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					vListRemove( &( pxTCB->xGenericListItem ) );
    3684:	693b      	ldr	r3, [r7, #16]
    3686:	3304      	adds	r3, #4
    3688:	4618      	mov	r0, r3
    368a:	f7ff f9c9 	bl	2a20 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    368e:	693b      	ldr	r3, [r7, #16]
    3690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3692:	f240 1394 	movw	r3, #404	; 0x194
    3696:	f2c2 0300 	movt	r3, #8192	; 0x2000
    369a:	681b      	ldr	r3, [r3, #0]
    369c:	429a      	cmp	r2, r3
    369e:	d906      	bls.n	36ae <vTaskPrioritySet+0xda>
    36a0:	693b      	ldr	r3, [r7, #16]
    36a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    36a4:	f240 1394 	movw	r3, #404	; 0x194
    36a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    36ac:	601a      	str	r2, [r3, #0]
    36ae:	693b      	ldr	r3, [r7, #16]
    36b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    36b2:	4613      	mov	r3, r2
    36b4:	009b      	lsls	r3, r3, #2
    36b6:	4413      	add	r3, r2
    36b8:	009b      	lsls	r3, r3, #2
    36ba:	f240 02b4 	movw	r2, #180	; 0xb4
    36be:	f2c2 0200 	movt	r2, #8192	; 0x2000
    36c2:	441a      	add	r2, r3
    36c4:	693b      	ldr	r3, [r7, #16]
    36c6:	3304      	adds	r3, #4
    36c8:	4610      	mov	r0, r2
    36ca:	4619      	mov	r1, r3
    36cc:	f7ff f948 	bl	2960 <vListInsertEnd>
				}

				if( xYieldRequired == pdTRUE )
    36d0:	697b      	ldr	r3, [r7, #20]
    36d2:	2b01      	cmp	r3, #1
    36d4:	d101      	bne.n	36da <vTaskPrioritySet+0x106>
				{
					portYIELD_WITHIN_API();
    36d6:	f000 ff1d 	bl	4514 <vPortYieldFromISR>
				}
			}
		}
		taskEXIT_CRITICAL();
    36da:	f000 ff3f 	bl	455c <vPortExitCritical>
	}
    36de:	3718      	adds	r7, #24
    36e0:	46bd      	mov	sp, r7
    36e2:	bd80      	pop	{r7, pc}

000036e4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
    36e4:	b580      	push	{r7, lr}
    36e6:	b084      	sub	sp, #16
    36e8:	af00      	add	r7, sp, #0
    36ea:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    36ec:	f000 ff20 	bl	4530 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
    36f0:	f240 03b0 	movw	r3, #176	; 0xb0
    36f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    36f8:	681b      	ldr	r3, [r3, #0]
    36fa:	687a      	ldr	r2, [r7, #4]
    36fc:	429a      	cmp	r2, r3
    36fe:	d101      	bne.n	3704 <vTaskSuspend+0x20>
			{
				pxTaskToSuspend = NULL;
    3700:	2300      	movs	r3, #0
    3702:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
    3704:	687b      	ldr	r3, [r7, #4]
    3706:	2b00      	cmp	r3, #0
    3708:	d105      	bne.n	3716 <vTaskSuspend+0x32>
    370a:	f240 03b0 	movw	r3, #176	; 0xb0
    370e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3712:	681b      	ldr	r3, [r3, #0]
    3714:	e000      	b.n	3718 <vTaskSuspend+0x34>
    3716:	687b      	ldr	r3, [r7, #4]
    3718:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    371a:	68fb      	ldr	r3, [r7, #12]
    371c:	3304      	adds	r3, #4
    371e:	4618      	mov	r0, r3
    3720:	f7ff f97e 	bl	2a20 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    3724:	68fb      	ldr	r3, [r7, #12]
    3726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3728:	2b00      	cmp	r3, #0
    372a:	d004      	beq.n	3736 <vTaskSuspend+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    372c:	68fb      	ldr	r3, [r7, #12]
    372e:	3318      	adds	r3, #24
    3730:	4618      	mov	r0, r3
    3732:	f7ff f975 	bl	2a20 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
    3736:	68fb      	ldr	r3, [r7, #12]
    3738:	3304      	adds	r3, #4
    373a:	f240 1074 	movw	r0, #372	; 0x174
    373e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3742:	4619      	mov	r1, r3
    3744:	f7ff f90c 	bl	2960 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    3748:	f000 ff08 	bl	455c <vPortExitCritical>

		if( ( void * ) pxTaskToSuspend == NULL )
    374c:	687b      	ldr	r3, [r7, #4]
    374e:	2b00      	cmp	r3, #0
    3750:	d11e      	bne.n	3790 <vTaskSuspend+0xac>
		{
			if( xSchedulerRunning != pdFALSE )
    3752:	f240 1398 	movw	r3, #408	; 0x198
    3756:	f2c2 0300 	movt	r3, #8192	; 0x2000
    375a:	681b      	ldr	r3, [r3, #0]
    375c:	2b00      	cmp	r3, #0
    375e:	d002      	beq.n	3766 <vTaskSuspend+0x82>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
    3760:	f000 fed8 	bl	4514 <vPortYieldFromISR>
    3764:	e014      	b.n	3790 <vTaskSuspend+0xac>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    3766:	f240 1374 	movw	r3, #372	; 0x174
    376a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    376e:	681a      	ldr	r2, [r3, #0]
    3770:	f240 1388 	movw	r3, #392	; 0x188
    3774:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3778:	681b      	ldr	r3, [r3, #0]
    377a:	429a      	cmp	r2, r3
    377c:	d106      	bne.n	378c <vTaskSuspend+0xa8>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    377e:	f240 03b0 	movw	r3, #176	; 0xb0
    3782:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3786:	2200      	movs	r2, #0
    3788:	601a      	str	r2, [r3, #0]
    378a:	e001      	b.n	3790 <vTaskSuspend+0xac>
				}
				else
				{
					vTaskSwitchContext();
    378c:	f000 fade 	bl	3d4c <vTaskSwitchContext>
				}
			}
		}
	}
    3790:	3710      	adds	r7, #16
    3792:	46bd      	mov	sp, r7
    3794:	bd80      	pop	{r7, pc}
    3796:	bf00      	nop

00003798 <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
    3798:	b480      	push	{r7}
    379a:	b085      	sub	sp, #20
    379c:	af00      	add	r7, sp, #0
    379e:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xReturn = pdFALSE;
    37a0:	2300      	movs	r3, #0
    37a2:	60fb      	str	r3, [r7, #12]
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
    37a4:	687b      	ldr	r3, [r7, #4]
    37a6:	60bb      	str	r3, [r7, #8]
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    37a8:	68bb      	ldr	r3, [r7, #8]
    37aa:	695a      	ldr	r2, [r3, #20]
    37ac:	f240 1374 	movw	r3, #372	; 0x174
    37b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    37b4:	429a      	cmp	r2, r3
    37b6:	d10d      	bne.n	37d4 <xTaskIsTaskSuspended+0x3c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    37b8:	68bb      	ldr	r3, [r7, #8]
    37ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    37bc:	f240 1348 	movw	r3, #328	; 0x148
    37c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    37c4:	429a      	cmp	r2, r3
    37c6:	d005      	beq.n	37d4 <xTaskIsTaskSuspended+0x3c>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
    37c8:	68bb      	ldr	r3, [r7, #8]
    37ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    37cc:	2b00      	cmp	r3, #0
    37ce:	d101      	bne.n	37d4 <xTaskIsTaskSuspended+0x3c>
				{
					xReturn = pdTRUE;
    37d0:	2301      	movs	r3, #1
    37d2:	60fb      	str	r3, [r7, #12]
				}
			}
		}

		return xReturn;
    37d4:	68fb      	ldr	r3, [r7, #12]
	}
    37d6:	4618      	mov	r0, r3
    37d8:	3714      	adds	r7, #20
    37da:	46bd      	mov	sp, r7
    37dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    37e0:	4770      	bx	lr
    37e2:	bf00      	nop

000037e4 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
    37e4:	b580      	push	{r7, lr}
    37e6:	b084      	sub	sp, #16
    37e8:	af00      	add	r7, sp, #0
    37ea:	6078      	str	r0, [r7, #4]
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
    37ec:	687b      	ldr	r3, [r7, #4]
    37ee:	60fb      	str	r3, [r7, #12]

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    37f0:	68fb      	ldr	r3, [r7, #12]
    37f2:	2b00      	cmp	r3, #0
    37f4:	d043      	beq.n	387e <vTaskResume+0x9a>
    37f6:	f240 03b0 	movw	r3, #176	; 0xb0
    37fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    37fe:	681b      	ldr	r3, [r3, #0]
    3800:	68fa      	ldr	r2, [r7, #12]
    3802:	429a      	cmp	r2, r3
    3804:	d03b      	beq.n	387e <vTaskResume+0x9a>
		{
			taskENTER_CRITICAL();
    3806:	f000 fe93 	bl	4530 <vPortEnterCritical>
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    380a:	68f8      	ldr	r0, [r7, #12]
    380c:	f7ff ffc4 	bl	3798 <xTaskIsTaskSuspended>
    3810:	4603      	mov	r3, r0
    3812:	2b01      	cmp	r3, #1
    3814:	d131      	bne.n	387a <vTaskResume+0x96>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
    3816:	68fb      	ldr	r3, [r7, #12]
    3818:	3304      	adds	r3, #4
    381a:	4618      	mov	r0, r3
    381c:	f7ff f900 	bl	2a20 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    3820:	68fb      	ldr	r3, [r7, #12]
    3822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3824:	f240 1394 	movw	r3, #404	; 0x194
    3828:	f2c2 0300 	movt	r3, #8192	; 0x2000
    382c:	681b      	ldr	r3, [r3, #0]
    382e:	429a      	cmp	r2, r3
    3830:	d906      	bls.n	3840 <vTaskResume+0x5c>
    3832:	68fb      	ldr	r3, [r7, #12]
    3834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3836:	f240 1394 	movw	r3, #404	; 0x194
    383a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    383e:	601a      	str	r2, [r3, #0]
    3840:	68fb      	ldr	r3, [r7, #12]
    3842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3844:	4613      	mov	r3, r2
    3846:	009b      	lsls	r3, r3, #2
    3848:	4413      	add	r3, r2
    384a:	009b      	lsls	r3, r3, #2
    384c:	f240 02b4 	movw	r2, #180	; 0xb4
    3850:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3854:	441a      	add	r2, r3
    3856:	68fb      	ldr	r3, [r7, #12]
    3858:	3304      	adds	r3, #4
    385a:	4610      	mov	r0, r2
    385c:	4619      	mov	r1, r3
    385e:	f7ff f87f 	bl	2960 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3862:	68fb      	ldr	r3, [r7, #12]
    3864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3866:	f240 03b0 	movw	r3, #176	; 0xb0
    386a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    386e:	681b      	ldr	r3, [r3, #0]
    3870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3872:	429a      	cmp	r2, r3
    3874:	d301      	bcc.n	387a <vTaskResume+0x96>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
    3876:	f000 fe4d 	bl	4514 <vPortYieldFromISR>
					}
				}
			}
			taskEXIT_CRITICAL();
    387a:	f000 fe6f 	bl	455c <vPortExitCritical>
		}
	}
    387e:	3710      	adds	r7, #16
    3880:	46bd      	mov	sp, r7
    3882:	bd80      	pop	{r7, pc}

00003884 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
    3884:	b580      	push	{r7, lr}
    3886:	b086      	sub	sp, #24
    3888:	af00      	add	r7, sp, #0
    388a:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xYieldRequired = pdFALSE;
    388c:	2300      	movs	r3, #0
    388e:	617b      	str	r3, [r7, #20]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxSavedInterruptStatus;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
    3890:	687b      	ldr	r3, [r7, #4]
    3892:	613b      	str	r3, [r7, #16]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    3894:	2300      	movs	r3, #0
    3896:	60fb      	str	r3, [r7, #12]
    3898:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    389c:	f380 8811 	msr	BASEPRI, r0
		{
			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    38a0:	6938      	ldr	r0, [r7, #16]
    38a2:	f7ff ff79 	bl	3798 <xTaskIsTaskSuspended>
    38a6:	4603      	mov	r3, r0
    38a8:	2b01      	cmp	r3, #1
    38aa:	d144      	bne.n	3936 <xTaskResumeFromISR+0xb2>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    38ac:	f240 139c 	movw	r3, #412	; 0x19c
    38b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    38b4:	681b      	ldr	r3, [r3, #0]
    38b6:	2b00      	cmp	r3, #0
    38b8:	d134      	bne.n	3924 <xTaskResumeFromISR+0xa0>
				{
					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
    38ba:	693b      	ldr	r3, [r7, #16]
    38bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    38be:	f240 03b0 	movw	r3, #176	; 0xb0
    38c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    38c6:	681b      	ldr	r3, [r3, #0]
    38c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    38ca:	429a      	cmp	r2, r3
    38cc:	bf34      	ite	cc
    38ce:	2300      	movcc	r3, #0
    38d0:	2301      	movcs	r3, #1
    38d2:	b2db      	uxtb	r3, r3
    38d4:	617b      	str	r3, [r7, #20]
					vListRemove(  &( pxTCB->xGenericListItem ) );
    38d6:	693b      	ldr	r3, [r7, #16]
    38d8:	3304      	adds	r3, #4
    38da:	4618      	mov	r0, r3
    38dc:	f7ff f8a0 	bl	2a20 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    38e0:	693b      	ldr	r3, [r7, #16]
    38e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    38e4:	f240 1394 	movw	r3, #404	; 0x194
    38e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    38ec:	681b      	ldr	r3, [r3, #0]
    38ee:	429a      	cmp	r2, r3
    38f0:	d906      	bls.n	3900 <xTaskResumeFromISR+0x7c>
    38f2:	693b      	ldr	r3, [r7, #16]
    38f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    38f6:	f240 1394 	movw	r3, #404	; 0x194
    38fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    38fe:	601a      	str	r2, [r3, #0]
    3900:	693b      	ldr	r3, [r7, #16]
    3902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3904:	4613      	mov	r3, r2
    3906:	009b      	lsls	r3, r3, #2
    3908:	4413      	add	r3, r2
    390a:	009b      	lsls	r3, r3, #2
    390c:	f240 02b4 	movw	r2, #180	; 0xb4
    3910:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3914:	441a      	add	r2, r3
    3916:	693b      	ldr	r3, [r7, #16]
    3918:	3304      	adds	r3, #4
    391a:	4610      	mov	r0, r2
    391c:	4619      	mov	r1, r3
    391e:	f7ff f81f 	bl	2960 <vListInsertEnd>
    3922:	e008      	b.n	3936 <xTaskResumeFromISR+0xb2>
				else
				{
					/* We cannot access the delayed or ready lists, so will hold this
					task pending until the scheduler is resumed, at which point a
					yield will be performed if necessary. */
					vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    3924:	693b      	ldr	r3, [r7, #16]
    3926:	3318      	adds	r3, #24
    3928:	f240 1048 	movw	r0, #328	; 0x148
    392c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3930:	4619      	mov	r1, r3
    3932:	f7ff f815 	bl	2960 <vListInsertEnd>
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    3936:	f04f 0000 	mov.w	r0, #0
    393a:	f380 8811 	msr	BASEPRI, r0

		return xYieldRequired;
    393e:	697b      	ldr	r3, [r7, #20]
	}
    3940:	4618      	mov	r0, r3
    3942:	3718      	adds	r7, #24
    3944:	46bd      	mov	sp, r7
    3946:	bd80      	pop	{r7, pc}

00003948 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    3948:	b580      	push	{r7, lr}
    394a:	b086      	sub	sp, #24
    394c:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    394e:	2300      	movs	r3, #0
    3950:	9300      	str	r3, [sp, #0]
    3952:	2300      	movs	r3, #0
    3954:	9301      	str	r3, [sp, #4]
    3956:	2300      	movs	r3, #0
    3958:	9302      	str	r3, [sp, #8]
    395a:	2300      	movs	r3, #0
    395c:	9303      	str	r3, [sp, #12]
    395e:	f244 0005 	movw	r0, #16389	; 0x4005
    3962:	f2c0 0000 	movt	r0, #0
    3966:	f245 51f8 	movw	r1, #22008	; 0x55f8
    396a:	f2c0 0100 	movt	r1, #0
    396e:	2280      	movs	r2, #128	; 0x80
    3970:	2300      	movs	r3, #0
    3972:	f7ff fc6b 	bl	324c <xTaskGenericCreate>
    3976:	6078      	str	r0, [r7, #4]
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
    3978:	687b      	ldr	r3, [r7, #4]
    397a:	2b01      	cmp	r3, #1
    397c:	d111      	bne.n	39a2 <vTaskStartScheduler+0x5a>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
    397e:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    3982:	f380 8811 	msr	BASEPRI, r0

		xSchedulerRunning = pdTRUE;
    3986:	f240 1398 	movw	r3, #408	; 0x198
    398a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    398e:	2201      	movs	r2, #1
    3990:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
    3992:	f240 138c 	movw	r3, #396	; 0x18c
    3996:	f2c2 0300 	movt	r3, #8192	; 0x2000
    399a:	2200      	movs	r2, #0
    399c:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    399e:	f000 fd8b 	bl	44b8 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    39a2:	3708      	adds	r7, #8
    39a4:	46bd      	mov	sp, r7
    39a6:	bd80      	pop	{r7, pc}

000039a8 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    39a8:	b580      	push	{r7, lr}
    39aa:	af00      	add	r7, sp, #0
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    39ac:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    39b0:	f380 8811 	msr	BASEPRI, r0
	xSchedulerRunning = pdFALSE;
    39b4:	f240 1398 	movw	r3, #408	; 0x198
    39b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    39bc:	2200      	movs	r2, #0
    39be:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
    39c0:	f000 fda2 	bl	4508 <vPortEndScheduler>
}
    39c4:	bd80      	pop	{r7, pc}
    39c6:	bf00      	nop

000039c8 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    39c8:	b480      	push	{r7}
    39ca:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    39cc:	f240 139c 	movw	r3, #412	; 0x19c
    39d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    39d4:	681b      	ldr	r3, [r3, #0]
    39d6:	1c5a      	adds	r2, r3, #1
    39d8:	f240 139c 	movw	r3, #412	; 0x19c
    39dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    39e0:	601a      	str	r2, [r3, #0]
}
    39e2:	46bd      	mov	sp, r7
    39e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    39e8:	4770      	bx	lr
    39ea:	bf00      	nop

000039ec <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    39ec:	b590      	push	{r4, r7, lr}
    39ee:	b083      	sub	sp, #12
    39f0:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    39f2:	2300      	movs	r3, #0
    39f4:	607b      	str	r3, [r7, #4]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    39f6:	f000 fd9b 	bl	4530 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
    39fa:	f240 139c 	movw	r3, #412	; 0x19c
    39fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a02:	681b      	ldr	r3, [r3, #0]
    3a04:	1e5a      	subs	r2, r3, #1
    3a06:	f240 139c 	movw	r3, #412	; 0x19c
    3a0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a0e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3a10:	f240 139c 	movw	r3, #412	; 0x19c
    3a14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a18:	681b      	ldr	r3, [r3, #0]
    3a1a:	2b00      	cmp	r3, #0
    3a1c:	d179      	bne.n	3b12 <xTaskResumeAll+0x126>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    3a1e:	f240 1388 	movw	r3, #392	; 0x188
    3a22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a26:	681b      	ldr	r3, [r3, #0]
    3a28:	2b00      	cmp	r3, #0
    3a2a:	d072      	beq.n	3b12 <xTaskResumeAll+0x126>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
    3a2c:	2300      	movs	r3, #0
    3a2e:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    3a30:	e036      	b.n	3aa0 <xTaskResumeAll+0xb4>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    3a32:	f240 1348 	movw	r3, #328	; 0x148
    3a36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a3a:	68db      	ldr	r3, [r3, #12]
    3a3c:	68dc      	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
    3a3e:	f104 0318 	add.w	r3, r4, #24
    3a42:	4618      	mov	r0, r3
    3a44:	f7fe ffec 	bl	2a20 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    3a48:	1d23      	adds	r3, r4, #4
    3a4a:	4618      	mov	r0, r3
    3a4c:	f7fe ffe8 	bl	2a20 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    3a50:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3a52:	f240 1394 	movw	r3, #404	; 0x194
    3a56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a5a:	681b      	ldr	r3, [r3, #0]
    3a5c:	429a      	cmp	r2, r3
    3a5e:	d905      	bls.n	3a6c <xTaskResumeAll+0x80>
    3a60:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3a62:	f240 1394 	movw	r3, #404	; 0x194
    3a66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a6a:	601a      	str	r2, [r3, #0]
    3a6c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3a6e:	4613      	mov	r3, r2
    3a70:	009b      	lsls	r3, r3, #2
    3a72:	4413      	add	r3, r2
    3a74:	009b      	lsls	r3, r3, #2
    3a76:	f240 02b4 	movw	r2, #180	; 0xb4
    3a7a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3a7e:	441a      	add	r2, r3
    3a80:	1d23      	adds	r3, r4, #4
    3a82:	4610      	mov	r0, r2
    3a84:	4619      	mov	r1, r3
    3a86:	f7fe ff6b 	bl	2960 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3a8a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3a8c:	f240 03b0 	movw	r3, #176	; 0xb0
    3a90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a94:	681b      	ldr	r3, [r3, #0]
    3a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3a98:	429a      	cmp	r2, r3
    3a9a:	d301      	bcc.n	3aa0 <xTaskResumeAll+0xb4>
					{
						xYieldRequired = pdTRUE;
    3a9c:	2301      	movs	r3, #1
    3a9e:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    3aa0:	f240 1348 	movw	r3, #328	; 0x148
    3aa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3aa8:	681b      	ldr	r3, [r3, #0]
    3aaa:	2b00      	cmp	r3, #0
    3aac:	d1c1      	bne.n	3a32 <xTaskResumeAll+0x46>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    3aae:	f240 13a0 	movw	r3, #416	; 0x1a0
    3ab2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ab6:	681b      	ldr	r3, [r3, #0]
    3ab8:	2b00      	cmp	r3, #0
    3aba:	d016      	beq.n	3aea <xTaskResumeAll+0xfe>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    3abc:	e00c      	b.n	3ad8 <xTaskResumeAll+0xec>
					{
						vTaskIncrementTick();
    3abe:	f000 f867 	bl	3b90 <vTaskIncrementTick>
						--uxMissedTicks;
    3ac2:	f240 13a0 	movw	r3, #416	; 0x1a0
    3ac6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3aca:	681b      	ldr	r3, [r3, #0]
    3acc:	1e5a      	subs	r2, r3, #1
    3ace:	f240 13a0 	movw	r3, #416	; 0x1a0
    3ad2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ad6:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    3ad8:	f240 13a0 	movw	r3, #416	; 0x1a0
    3adc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ae0:	681b      	ldr	r3, [r3, #0]
    3ae2:	2b00      	cmp	r3, #0
    3ae4:	d1eb      	bne.n	3abe <xTaskResumeAll+0xd2>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
    3ae6:	2301      	movs	r3, #1
    3ae8:	603b      	str	r3, [r7, #0]
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    3aea:	683b      	ldr	r3, [r7, #0]
    3aec:	2b01      	cmp	r3, #1
    3aee:	d006      	beq.n	3afe <xTaskResumeAll+0x112>
    3af0:	f240 13a4 	movw	r3, #420	; 0x1a4
    3af4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3af8:	681b      	ldr	r3, [r3, #0]
    3afa:	2b01      	cmp	r3, #1
    3afc:	d109      	bne.n	3b12 <xTaskResumeAll+0x126>
				{
					xAlreadyYielded = pdTRUE;
    3afe:	2301      	movs	r3, #1
    3b00:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
    3b02:	f240 13a4 	movw	r3, #420	; 0x1a4
    3b06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b0a:	2200      	movs	r2, #0
    3b0c:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
    3b0e:	f000 fd01 	bl	4514 <vPortYieldFromISR>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    3b12:	f000 fd23 	bl	455c <vPortExitCritical>

	return xAlreadyYielded;
    3b16:	687b      	ldr	r3, [r7, #4]
}
    3b18:	4618      	mov	r0, r3
    3b1a:	370c      	adds	r7, #12
    3b1c:	46bd      	mov	sp, r7
    3b1e:	bd90      	pop	{r4, r7, pc}

00003b20 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    3b20:	b580      	push	{r7, lr}
    3b22:	b082      	sub	sp, #8
    3b24:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    3b26:	f000 fd03 	bl	4530 <vPortEnterCritical>
	{
		xTicks = xTickCount;
    3b2a:	f240 138c 	movw	r3, #396	; 0x18c
    3b2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b32:	681b      	ldr	r3, [r3, #0]
    3b34:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
    3b36:	f000 fd11 	bl	455c <vPortExitCritical>

	return xTicks;
    3b3a:	687b      	ldr	r3, [r7, #4]
}
    3b3c:	4618      	mov	r0, r3
    3b3e:	3708      	adds	r7, #8
    3b40:	46bd      	mov	sp, r7
    3b42:	bd80      	pop	{r7, pc}

00003b44 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
    3b44:	b480      	push	{r7}
    3b46:	b083      	sub	sp, #12
    3b48:	af00      	add	r7, sp, #0
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    3b4a:	2300      	movs	r3, #0
    3b4c:	607b      	str	r3, [r7, #4]
    3b4e:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    3b52:	f380 8811 	msr	BASEPRI, r0
	xReturn = xTickCount;
    3b56:	f240 138c 	movw	r3, #396	; 0x18c
    3b5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b5e:	681b      	ldr	r3, [r3, #0]
    3b60:	603b      	str	r3, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    3b62:	f04f 0000 	mov.w	r0, #0
    3b66:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    3b6a:	683b      	ldr	r3, [r7, #0]
}
    3b6c:	4618      	mov	r0, r3
    3b6e:	370c      	adds	r7, #12
    3b70:	46bd      	mov	sp, r7
    3b72:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b76:	4770      	bx	lr

00003b78 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
    3b78:	b480      	push	{r7}
    3b7a:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    3b7c:	f240 1388 	movw	r3, #392	; 0x188
    3b80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b84:	681b      	ldr	r3, [r3, #0]
}
    3b86:	4618      	mov	r0, r3
    3b88:	46bd      	mov	sp, r7
    3b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b8e:	4770      	bx	lr

00003b90 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    3b90:	b580      	push	{r7, lr}
    3b92:	b084      	sub	sp, #16
    3b94:	af00      	add	r7, sp, #0
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3b96:	f240 139c 	movw	r3, #412	; 0x19c
    3b9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b9e:	681b      	ldr	r3, [r3, #0]
    3ba0:	2b00      	cmp	r3, #0
    3ba2:	f040 80b9 	bne.w	3d18 <vTaskIncrementTick+0x188>
	{
		++xTickCount;
    3ba6:	f240 138c 	movw	r3, #396	; 0x18c
    3baa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3bae:	681b      	ldr	r3, [r3, #0]
    3bb0:	1c5a      	adds	r2, r3, #1
    3bb2:	f240 138c 	movw	r3, #396	; 0x18c
    3bb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3bba:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
    3bbc:	f240 138c 	movw	r3, #396	; 0x18c
    3bc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3bc4:	681b      	ldr	r3, [r3, #0]
    3bc6:	2b00      	cmp	r3, #0
    3bc8:	d13f      	bne.n	3c4a <vTaskIncrementTick+0xba>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    3bca:	f240 1340 	movw	r3, #320	; 0x140
    3bce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3bd2:	681b      	ldr	r3, [r3, #0]
    3bd4:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    3bd6:	f240 1344 	movw	r3, #324	; 0x144
    3bda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3bde:	681a      	ldr	r2, [r3, #0]
    3be0:	f240 1340 	movw	r3, #320	; 0x140
    3be4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3be8:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
    3bea:	f240 1344 	movw	r3, #324	; 0x144
    3bee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3bf2:	68fa      	ldr	r2, [r7, #12]
    3bf4:	601a      	str	r2, [r3, #0]
			xNumOfOverflows++;
    3bf6:	f240 13a8 	movw	r3, #424	; 0x1a8
    3bfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3bfe:	681b      	ldr	r3, [r3, #0]
    3c00:	1c5a      	adds	r2, r3, #1
    3c02:	f240 13a8 	movw	r3, #424	; 0x1a8
    3c06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c0a:	601a      	str	r2, [r3, #0]
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    3c0c:	f240 1340 	movw	r3, #320	; 0x140
    3c10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c14:	681b      	ldr	r3, [r3, #0]
    3c16:	681b      	ldr	r3, [r3, #0]
    3c18:	2b00      	cmp	r3, #0
    3c1a:	d107      	bne.n	3c2c <vTaskIncrementTick+0x9c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    3c1c:	f240 0328 	movw	r3, #40	; 0x28
    3c20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c24:	f04f 32ff 	mov.w	r2, #4294967295
    3c28:	601a      	str	r2, [r3, #0]
    3c2a:	e00e      	b.n	3c4a <vTaskIncrementTick+0xba>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    3c2c:	f240 1340 	movw	r3, #320	; 0x140
    3c30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c34:	681b      	ldr	r3, [r3, #0]
    3c36:	68db      	ldr	r3, [r3, #12]
    3c38:	68db      	ldr	r3, [r3, #12]
    3c3a:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    3c3c:	68bb      	ldr	r3, [r7, #8]
    3c3e:	685a      	ldr	r2, [r3, #4]
    3c40:	f240 0328 	movw	r3, #40	; 0x28
    3c44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c48:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    3c4a:	f240 138c 	movw	r3, #396	; 0x18c
    3c4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c52:	681a      	ldr	r2, [r3, #0]
    3c54:	f240 0328 	movw	r3, #40	; 0x28
    3c58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c5c:	681b      	ldr	r3, [r3, #0]
    3c5e:	429a      	cmp	r2, r3
    3c60:	d359      	bcc.n	3d16 <vTaskIncrementTick+0x186>
    3c62:	f240 1340 	movw	r3, #320	; 0x140
    3c66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c6a:	681b      	ldr	r3, [r3, #0]
    3c6c:	681b      	ldr	r3, [r3, #0]
    3c6e:	2b00      	cmp	r3, #0
    3c70:	d107      	bne.n	3c82 <vTaskIncrementTick+0xf2>
    3c72:	f240 0328 	movw	r3, #40	; 0x28
    3c76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c7a:	f04f 32ff 	mov.w	r2, #4294967295
    3c7e:	601a      	str	r2, [r3, #0]
    3c80:	e049      	b.n	3d16 <vTaskIncrementTick+0x186>
    3c82:	f240 1340 	movw	r3, #320	; 0x140
    3c86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c8a:	681b      	ldr	r3, [r3, #0]
    3c8c:	68db      	ldr	r3, [r3, #12]
    3c8e:	68db      	ldr	r3, [r3, #12]
    3c90:	60bb      	str	r3, [r7, #8]
    3c92:	68bb      	ldr	r3, [r7, #8]
    3c94:	685b      	ldr	r3, [r3, #4]
    3c96:	607b      	str	r3, [r7, #4]
    3c98:	f240 138c 	movw	r3, #396	; 0x18c
    3c9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ca0:	681a      	ldr	r2, [r3, #0]
    3ca2:	687b      	ldr	r3, [r7, #4]
    3ca4:	429a      	cmp	r2, r3
    3ca6:	d206      	bcs.n	3cb6 <vTaskIncrementTick+0x126>
    3ca8:	f240 0328 	movw	r3, #40	; 0x28
    3cac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3cb0:	687a      	ldr	r2, [r7, #4]
    3cb2:	601a      	str	r2, [r3, #0]
    3cb4:	e02f      	b.n	3d16 <vTaskIncrementTick+0x186>
    3cb6:	68bb      	ldr	r3, [r7, #8]
    3cb8:	3304      	adds	r3, #4
    3cba:	4618      	mov	r0, r3
    3cbc:	f7fe feb0 	bl	2a20 <vListRemove>
    3cc0:	68bb      	ldr	r3, [r7, #8]
    3cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3cc4:	2b00      	cmp	r3, #0
    3cc6:	d004      	beq.n	3cd2 <vTaskIncrementTick+0x142>
    3cc8:	68bb      	ldr	r3, [r7, #8]
    3cca:	3318      	adds	r3, #24
    3ccc:	4618      	mov	r0, r3
    3cce:	f7fe fea7 	bl	2a20 <vListRemove>
    3cd2:	68bb      	ldr	r3, [r7, #8]
    3cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3cd6:	f240 1394 	movw	r3, #404	; 0x194
    3cda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3cde:	681b      	ldr	r3, [r3, #0]
    3ce0:	429a      	cmp	r2, r3
    3ce2:	d906      	bls.n	3cf2 <vTaskIncrementTick+0x162>
    3ce4:	68bb      	ldr	r3, [r7, #8]
    3ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3ce8:	f240 1394 	movw	r3, #404	; 0x194
    3cec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3cf0:	601a      	str	r2, [r3, #0]
    3cf2:	68bb      	ldr	r3, [r7, #8]
    3cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3cf6:	4613      	mov	r3, r2
    3cf8:	009b      	lsls	r3, r3, #2
    3cfa:	4413      	add	r3, r2
    3cfc:	009b      	lsls	r3, r3, #2
    3cfe:	f240 02b4 	movw	r2, #180	; 0xb4
    3d02:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3d06:	441a      	add	r2, r3
    3d08:	68bb      	ldr	r3, [r7, #8]
    3d0a:	3304      	adds	r3, #4
    3d0c:	4610      	mov	r0, r2
    3d0e:	4619      	mov	r1, r3
    3d10:	f7fe fe26 	bl	2960 <vListInsertEnd>
    3d14:	e7a5      	b.n	3c62 <vTaskIncrementTick+0xd2>
    3d16:	e00c      	b.n	3d32 <vTaskIncrementTick+0x1a2>
	}
	else
	{
		++uxMissedTicks;
    3d18:	f240 13a0 	movw	r3, #416	; 0x1a0
    3d1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d20:	681b      	ldr	r3, [r3, #0]
    3d22:	1c5a      	adds	r2, r3, #1
    3d24:	f240 13a0 	movw	r3, #416	; 0x1a0
    3d28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d2c:	601a      	str	r2, [r3, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
    3d2e:	f001 f885 	bl	4e3c <vApplicationTickHook>

	#if ( configUSE_TICK_HOOK == 1 )
	{
		/* Guard against the tick hook being called when the missed tick
		count is being unwound (when the scheduler is being unlocked. */
		if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
    3d32:	f240 13a0 	movw	r3, #416	; 0x1a0
    3d36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d3a:	681b      	ldr	r3, [r3, #0]
    3d3c:	2b00      	cmp	r3, #0
    3d3e:	d101      	bne.n	3d44 <vTaskIncrementTick+0x1b4>
		{
			vApplicationTickHook();
    3d40:	f001 f87c 	bl	4e3c <vApplicationTickHook>
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    3d44:	3710      	adds	r7, #16
    3d46:	46bd      	mov	sp, r7
    3d48:	bd80      	pop	{r7, pc}
    3d4a:	bf00      	nop

00003d4c <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    3d4c:	b580      	push	{r7, lr}
    3d4e:	b082      	sub	sp, #8
    3d50:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    3d52:	f240 139c 	movw	r3, #412	; 0x19c
    3d56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d5a:	681b      	ldr	r3, [r3, #0]
    3d5c:	2b00      	cmp	r3, #0
    3d5e:	d006      	beq.n	3d6e <vTaskSwitchContext+0x22>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    3d60:	f240 13a4 	movw	r3, #420	; 0x1a4
    3d64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d68:	2201      	movs	r2, #1
    3d6a:	601a      	str	r2, [r3, #0]
    3d6c:	e047      	b.n	3dfe <vTaskSwitchContext+0xb2>
	}
	else
	{
		traceTASK_SWITCHED_OUT();
    3d6e:	f001 f815 	bl	4d9c <myTraceSwitchedOut>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    3d72:	e00a      	b.n	3d8a <vTaskSwitchContext+0x3e>
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    3d74:	f240 1394 	movw	r3, #404	; 0x194
    3d78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d7c:	681b      	ldr	r3, [r3, #0]
    3d7e:	1e5a      	subs	r2, r3, #1
    3d80:	f240 1394 	movw	r3, #404	; 0x194
    3d84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d88:	601a      	str	r2, [r3, #0]
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    3d8a:	f240 1394 	movw	r3, #404	; 0x194
    3d8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d92:	6819      	ldr	r1, [r3, #0]
    3d94:	f240 02b4 	movw	r2, #180	; 0xb4
    3d98:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3d9c:	460b      	mov	r3, r1
    3d9e:	009b      	lsls	r3, r3, #2
    3da0:	440b      	add	r3, r1
    3da2:	009b      	lsls	r3, r3, #2
    3da4:	4413      	add	r3, r2
    3da6:	681b      	ldr	r3, [r3, #0]
    3da8:	2b00      	cmp	r3, #0
    3daa:	d0e3      	beq.n	3d74 <vTaskSwitchContext+0x28>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    3dac:	f240 1394 	movw	r3, #404	; 0x194
    3db0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3db4:	681a      	ldr	r2, [r3, #0]
    3db6:	4613      	mov	r3, r2
    3db8:	009b      	lsls	r3, r3, #2
    3dba:	4413      	add	r3, r2
    3dbc:	009b      	lsls	r3, r3, #2
    3dbe:	f240 02b4 	movw	r2, #180	; 0xb4
    3dc2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3dc6:	4413      	add	r3, r2
    3dc8:	607b      	str	r3, [r7, #4]
    3dca:	687b      	ldr	r3, [r7, #4]
    3dcc:	685b      	ldr	r3, [r3, #4]
    3dce:	685a      	ldr	r2, [r3, #4]
    3dd0:	687b      	ldr	r3, [r7, #4]
    3dd2:	605a      	str	r2, [r3, #4]
    3dd4:	687b      	ldr	r3, [r7, #4]
    3dd6:	685a      	ldr	r2, [r3, #4]
    3dd8:	687b      	ldr	r3, [r7, #4]
    3dda:	3308      	adds	r3, #8
    3ddc:	429a      	cmp	r2, r3
    3dde:	d104      	bne.n	3dea <vTaskSwitchContext+0x9e>
    3de0:	687b      	ldr	r3, [r7, #4]
    3de2:	685b      	ldr	r3, [r3, #4]
    3de4:	685a      	ldr	r2, [r3, #4]
    3de6:	687b      	ldr	r3, [r7, #4]
    3de8:	605a      	str	r2, [r3, #4]
    3dea:	687b      	ldr	r3, [r7, #4]
    3dec:	685b      	ldr	r3, [r3, #4]
    3dee:	68da      	ldr	r2, [r3, #12]
    3df0:	f240 03b0 	movw	r3, #176	; 0xb0
    3df4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3df8:	601a      	str	r2, [r3, #0]
	
		traceTASK_SWITCHED_IN();
    3dfa:	f000 ffc9 	bl	4d90 <myTraceSwitchedIn>
	}
}
    3dfe:	3708      	adds	r7, #8
    3e00:	46bd      	mov	sp, r7
    3e02:	bd80      	pop	{r7, pc}

00003e04 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    3e04:	b580      	push	{r7, lr}
    3e06:	b084      	sub	sp, #16
    3e08:	af00      	add	r7, sp, #0
    3e0a:	6078      	str	r0, [r7, #4]
    3e0c:	6039      	str	r1, [r7, #0]
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    3e0e:	f240 03b0 	movw	r3, #176	; 0xb0
    3e12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e16:	681b      	ldr	r3, [r3, #0]
    3e18:	3318      	adds	r3, #24
    3e1a:	6878      	ldr	r0, [r7, #4]
    3e1c:	4619      	mov	r1, r3
    3e1e:	f7fe fdc7 	bl	29b0 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3e22:	f240 03b0 	movw	r3, #176	; 0xb0
    3e26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e2a:	681b      	ldr	r3, [r3, #0]
    3e2c:	3304      	adds	r3, #4
    3e2e:	4618      	mov	r0, r3
    3e30:	f7fe fdf6 	bl	2a20 <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    3e34:	683b      	ldr	r3, [r7, #0]
    3e36:	f1b3 3fff 	cmp.w	r3, #4294967295
    3e3a:	d10d      	bne.n	3e58 <vTaskPlaceOnEventList+0x54>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3e3c:	f240 03b0 	movw	r3, #176	; 0xb0
    3e40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e44:	681b      	ldr	r3, [r3, #0]
    3e46:	3304      	adds	r3, #4
    3e48:	f240 1074 	movw	r0, #372	; 0x174
    3e4c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3e50:	4619      	mov	r1, r3
    3e52:	f7fe fd85 	bl	2960 <vListInsertEnd>
    3e56:	e00a      	b.n	3e6e <vTaskPlaceOnEventList+0x6a>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    3e58:	f240 138c 	movw	r3, #396	; 0x18c
    3e5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e60:	681a      	ldr	r2, [r3, #0]
    3e62:	683b      	ldr	r3, [r7, #0]
    3e64:	4413      	add	r3, r2
    3e66:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    3e68:	68f8      	ldr	r0, [r7, #12]
    3e6a:	f000 f9a7 	bl	41bc <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
    3e6e:	3710      	adds	r7, #16
    3e70:	46bd      	mov	sp, r7
    3e72:	bd80      	pop	{r7, pc}

00003e74 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    3e74:	b580      	push	{r7, lr}
    3e76:	b084      	sub	sp, #16
    3e78:	af00      	add	r7, sp, #0
    3e7a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    3e7c:	687b      	ldr	r3, [r7, #4]
    3e7e:	68db      	ldr	r3, [r3, #12]
    3e80:	68db      	ldr	r3, [r3, #12]
    3e82:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    3e84:	68bb      	ldr	r3, [r7, #8]
    3e86:	3318      	adds	r3, #24
    3e88:	4618      	mov	r0, r3
    3e8a:	f7fe fdc9 	bl	2a20 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3e8e:	f240 139c 	movw	r3, #412	; 0x19c
    3e92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e96:	681b      	ldr	r3, [r3, #0]
    3e98:	2b00      	cmp	r3, #0
    3e9a:	d126      	bne.n	3eea <xTaskRemoveFromEventList+0x76>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    3e9c:	68bb      	ldr	r3, [r7, #8]
    3e9e:	3304      	adds	r3, #4
    3ea0:	4618      	mov	r0, r3
    3ea2:	f7fe fdbd 	bl	2a20 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    3ea6:	68bb      	ldr	r3, [r7, #8]
    3ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3eaa:	f240 1394 	movw	r3, #404	; 0x194
    3eae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3eb2:	681b      	ldr	r3, [r3, #0]
    3eb4:	429a      	cmp	r2, r3
    3eb6:	d906      	bls.n	3ec6 <xTaskRemoveFromEventList+0x52>
    3eb8:	68bb      	ldr	r3, [r7, #8]
    3eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3ebc:	f240 1394 	movw	r3, #404	; 0x194
    3ec0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ec4:	601a      	str	r2, [r3, #0]
    3ec6:	68bb      	ldr	r3, [r7, #8]
    3ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3eca:	4613      	mov	r3, r2
    3ecc:	009b      	lsls	r3, r3, #2
    3ece:	4413      	add	r3, r2
    3ed0:	009b      	lsls	r3, r3, #2
    3ed2:	f240 02b4 	movw	r2, #180	; 0xb4
    3ed6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3eda:	441a      	add	r2, r3
    3edc:	68bb      	ldr	r3, [r7, #8]
    3ede:	3304      	adds	r3, #4
    3ee0:	4610      	mov	r0, r2
    3ee2:	4619      	mov	r1, r3
    3ee4:	f7fe fd3c 	bl	2960 <vListInsertEnd>
    3ee8:	e008      	b.n	3efc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    3eea:	68bb      	ldr	r3, [r7, #8]
    3eec:	3318      	adds	r3, #24
    3eee:	f240 1048 	movw	r0, #328	; 0x148
    3ef2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3ef6:	4619      	mov	r1, r3
    3ef8:	f7fe fd32 	bl	2960 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3efc:	68bb      	ldr	r3, [r7, #8]
    3efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3f00:	f240 03b0 	movw	r3, #176	; 0xb0
    3f04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f08:	681b      	ldr	r3, [r3, #0]
    3f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3f0c:	429a      	cmp	r2, r3
    3f0e:	d302      	bcc.n	3f16 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    3f10:	2301      	movs	r3, #1
    3f12:	60fb      	str	r3, [r7, #12]
    3f14:	e001      	b.n	3f1a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
    3f16:	2300      	movs	r3, #0
    3f18:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    3f1a:	68fb      	ldr	r3, [r7, #12]
}
    3f1c:	4618      	mov	r0, r3
    3f1e:	3710      	adds	r7, #16
    3f20:	46bd      	mov	sp, r7
    3f22:	bd80      	pop	{r7, pc}

00003f24 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    3f24:	b480      	push	{r7}
    3f26:	b083      	sub	sp, #12
    3f28:	af00      	add	r7, sp, #0
    3f2a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    3f2c:	f240 13a8 	movw	r3, #424	; 0x1a8
    3f30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f34:	681a      	ldr	r2, [r3, #0]
    3f36:	687b      	ldr	r3, [r7, #4]
    3f38:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    3f3a:	f240 138c 	movw	r3, #396	; 0x18c
    3f3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f42:	681a      	ldr	r2, [r3, #0]
    3f44:	687b      	ldr	r3, [r7, #4]
    3f46:	605a      	str	r2, [r3, #4]
}
    3f48:	370c      	adds	r7, #12
    3f4a:	46bd      	mov	sp, r7
    3f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f50:	4770      	bx	lr
    3f52:	bf00      	nop

00003f54 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    3f54:	b580      	push	{r7, lr}
    3f56:	b084      	sub	sp, #16
    3f58:	af00      	add	r7, sp, #0
    3f5a:	6078      	str	r0, [r7, #4]
    3f5c:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    3f5e:	f000 fae7 	bl	4530 <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    3f62:	683b      	ldr	r3, [r7, #0]
    3f64:	681b      	ldr	r3, [r3, #0]
    3f66:	f1b3 3fff 	cmp.w	r3, #4294967295
    3f6a:	d102      	bne.n	3f72 <xTaskCheckForTimeOut+0x1e>
			{
				xReturn = pdFALSE;
    3f6c:	2300      	movs	r3, #0
    3f6e:	60fb      	str	r3, [r7, #12]
    3f70:	e035      	b.n	3fde <xTaskCheckForTimeOut+0x8a>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    3f72:	687b      	ldr	r3, [r7, #4]
    3f74:	681a      	ldr	r2, [r3, #0]
    3f76:	f240 13a8 	movw	r3, #424	; 0x1a8
    3f7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f7e:	681b      	ldr	r3, [r3, #0]
    3f80:	429a      	cmp	r2, r3
    3f82:	d00b      	beq.n	3f9c <xTaskCheckForTimeOut+0x48>
    3f84:	687b      	ldr	r3, [r7, #4]
    3f86:	685a      	ldr	r2, [r3, #4]
    3f88:	f240 138c 	movw	r3, #396	; 0x18c
    3f8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f90:	681b      	ldr	r3, [r3, #0]
    3f92:	429a      	cmp	r2, r3
    3f94:	d802      	bhi.n	3f9c <xTaskCheckForTimeOut+0x48>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    3f96:	2301      	movs	r3, #1
    3f98:	60fb      	str	r3, [r7, #12]
    3f9a:	e020      	b.n	3fde <xTaskCheckForTimeOut+0x8a>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    3f9c:	f240 138c 	movw	r3, #396	; 0x18c
    3fa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3fa4:	681a      	ldr	r2, [r3, #0]
    3fa6:	687b      	ldr	r3, [r7, #4]
    3fa8:	685b      	ldr	r3, [r3, #4]
    3faa:	1ad2      	subs	r2, r2, r3
    3fac:	683b      	ldr	r3, [r7, #0]
    3fae:	681b      	ldr	r3, [r3, #0]
    3fb0:	429a      	cmp	r2, r3
    3fb2:	d212      	bcs.n	3fda <xTaskCheckForTimeOut+0x86>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    3fb4:	683b      	ldr	r3, [r7, #0]
    3fb6:	681a      	ldr	r2, [r3, #0]
    3fb8:	687b      	ldr	r3, [r7, #4]
    3fba:	6859      	ldr	r1, [r3, #4]
    3fbc:	f240 138c 	movw	r3, #396	; 0x18c
    3fc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3fc4:	681b      	ldr	r3, [r3, #0]
    3fc6:	1acb      	subs	r3, r1, r3
    3fc8:	441a      	add	r2, r3
    3fca:	683b      	ldr	r3, [r7, #0]
    3fcc:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
    3fce:	6878      	ldr	r0, [r7, #4]
    3fd0:	f7ff ffa8 	bl	3f24 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    3fd4:	2300      	movs	r3, #0
    3fd6:	60fb      	str	r3, [r7, #12]
    3fd8:	e001      	b.n	3fde <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			xReturn = pdTRUE;
    3fda:	2301      	movs	r3, #1
    3fdc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    3fde:	f000 fabd 	bl	455c <vPortExitCritical>

	return xReturn;
    3fe2:	68fb      	ldr	r3, [r7, #12]
}
    3fe4:	4618      	mov	r0, r3
    3fe6:	3710      	adds	r7, #16
    3fe8:	46bd      	mov	sp, r7
    3fea:	bd80      	pop	{r7, pc}

00003fec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    3fec:	b480      	push	{r7}
    3fee:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
    3ff0:	f240 13a4 	movw	r3, #420	; 0x1a4
    3ff4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ff8:	2201      	movs	r2, #1
    3ffa:	601a      	str	r2, [r3, #0]
}
    3ffc:	46bd      	mov	sp, r7
    3ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
    4002:	4770      	bx	lr

00004004 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    4004:	b580      	push	{r7, lr}
    4006:	b082      	sub	sp, #8
    4008:	af00      	add	r7, sp, #0
    400a:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    400c:	f000 f88e 	bl	412c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    4010:	f240 03b4 	movw	r3, #180	; 0xb4
    4014:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4018:	681b      	ldr	r3, [r3, #0]
    401a:	2b01      	cmp	r3, #1
    401c:	d902      	bls.n	4024 <prvIdleTask+0x20>
			{
				taskYIELD();
    401e:	f000 fa79 	bl	4514 <vPortYieldFromISR>
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
    4022:	e7f3      	b.n	400c <prvIdleTask+0x8>
    4024:	e7f2      	b.n	400c <prvIdleTask+0x8>
    4026:	bf00      	nop

00004028 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    4028:	b580      	push	{r7, lr}
    402a:	b084      	sub	sp, #16
    402c:	af00      	add	r7, sp, #0
    402e:	60f8      	str	r0, [r7, #12]
    4030:	60b9      	str	r1, [r7, #8]
    4032:	607a      	str	r2, [r7, #4]
    4034:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    4036:	68fb      	ldr	r3, [r7, #12]
    4038:	3334      	adds	r3, #52	; 0x34
    403a:	4618      	mov	r0, r3
    403c:	68b9      	ldr	r1, [r7, #8]
    403e:	2210      	movs	r2, #16
    4040:	f001 fa82 	bl	5548 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    4044:	68fb      	ldr	r3, [r7, #12]
    4046:	2200      	movs	r2, #0
    4048:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    404c:	687b      	ldr	r3, [r7, #4]
    404e:	2b04      	cmp	r3, #4
    4050:	d901      	bls.n	4056 <prvInitialiseTCBVariables+0x2e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    4052:	2304      	movs	r3, #4
    4054:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
    4056:	68fb      	ldr	r3, [r7, #12]
    4058:	687a      	ldr	r2, [r7, #4]
    405a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    405c:	68fb      	ldr	r3, [r7, #12]
    405e:	687a      	ldr	r2, [r7, #4]
    4060:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    4062:	68fb      	ldr	r3, [r7, #12]
    4064:	3304      	adds	r3, #4
    4066:	4618      	mov	r0, r3
    4068:	f7fe fc6e 	bl	2948 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    406c:	68fb      	ldr	r3, [r7, #12]
    406e:	3318      	adds	r3, #24
    4070:	4618      	mov	r0, r3
    4072:	f7fe fc69 	bl	2948 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    4076:	68fb      	ldr	r3, [r7, #12]
    4078:	68fa      	ldr	r2, [r7, #12]
    407a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    407c:	687b      	ldr	r3, [r7, #4]
    407e:	f1c3 0205 	rsb	r2, r3, #5
    4082:	68fb      	ldr	r3, [r7, #12]
    4084:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    4086:	68fb      	ldr	r3, [r7, #12]
    4088:	68fa      	ldr	r2, [r7, #12]
    408a:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    408c:	3710      	adds	r7, #16
    408e:	46bd      	mov	sp, r7
    4090:	bd80      	pop	{r7, pc}
    4092:	bf00      	nop

00004094 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    4094:	b580      	push	{r7, lr}
    4096:	b082      	sub	sp, #8
    4098:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    409a:	2300      	movs	r3, #0
    409c:	607b      	str	r3, [r7, #4]
    409e:	e00f      	b.n	40c0 <prvInitialiseTaskLists+0x2c>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    40a0:	687a      	ldr	r2, [r7, #4]
    40a2:	4613      	mov	r3, r2
    40a4:	009b      	lsls	r3, r3, #2
    40a6:	4413      	add	r3, r2
    40a8:	009b      	lsls	r3, r3, #2
    40aa:	f240 02b4 	movw	r2, #180	; 0xb4
    40ae:	f2c2 0200 	movt	r2, #8192	; 0x2000
    40b2:	4413      	add	r3, r2
    40b4:	4618      	mov	r0, r3
    40b6:	f7fe fc27 	bl	2908 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    40ba:	687b      	ldr	r3, [r7, #4]
    40bc:	3301      	adds	r3, #1
    40be:	607b      	str	r3, [r7, #4]
    40c0:	687b      	ldr	r3, [r7, #4]
    40c2:	2b04      	cmp	r3, #4
    40c4:	d9ec      	bls.n	40a0 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    40c6:	f240 1018 	movw	r0, #280	; 0x118
    40ca:	f2c2 0000 	movt	r0, #8192	; 0x2000
    40ce:	f7fe fc1b 	bl	2908 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    40d2:	f240 102c 	movw	r0, #300	; 0x12c
    40d6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    40da:	f7fe fc15 	bl	2908 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    40de:	f240 1048 	movw	r0, #328	; 0x148
    40e2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    40e6:	f7fe fc0f 	bl	2908 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    40ea:	f240 105c 	movw	r0, #348	; 0x15c
    40ee:	f2c2 0000 	movt	r0, #8192	; 0x2000
    40f2:	f7fe fc09 	bl	2908 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
    40f6:	f240 1074 	movw	r0, #372	; 0x174
    40fa:	f2c2 0000 	movt	r0, #8192	; 0x2000
    40fe:	f7fe fc03 	bl	2908 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    4102:	f240 1340 	movw	r3, #320	; 0x140
    4106:	f2c2 0300 	movt	r3, #8192	; 0x2000
    410a:	f240 1218 	movw	r2, #280	; 0x118
    410e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4112:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    4114:	f240 1344 	movw	r3, #324	; 0x144
    4118:	f2c2 0300 	movt	r3, #8192	; 0x2000
    411c:	f240 122c 	movw	r2, #300	; 0x12c
    4120:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4124:	601a      	str	r2, [r3, #0]
}
    4126:	3708      	adds	r7, #8
    4128:	46bd      	mov	sp, r7
    412a:	bd80      	pop	{r7, pc}

0000412c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    412c:	b580      	push	{r7, lr}
    412e:	b082      	sub	sp, #8
    4130:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    4132:	f240 1370 	movw	r3, #368	; 0x170
    4136:	f2c2 0300 	movt	r3, #8192	; 0x2000
    413a:	681b      	ldr	r3, [r3, #0]
    413c:	2b00      	cmp	r3, #0
    413e:	d03a      	beq.n	41b6 <prvCheckTasksWaitingTermination+0x8a>
		{
			vTaskSuspendAll();
    4140:	f7ff fc42 	bl	39c8 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    4144:	f240 135c 	movw	r3, #348	; 0x15c
    4148:	f2c2 0300 	movt	r3, #8192	; 0x2000
    414c:	681b      	ldr	r3, [r3, #0]
    414e:	2b00      	cmp	r3, #0
    4150:	bf14      	ite	ne
    4152:	2300      	movne	r3, #0
    4154:	2301      	moveq	r3, #1
    4156:	b2db      	uxtb	r3, r3
    4158:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
    415a:	f7ff fc47 	bl	39ec <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    415e:	687b      	ldr	r3, [r7, #4]
    4160:	2b00      	cmp	r3, #0
    4162:	d128      	bne.n	41b6 <prvCheckTasksWaitingTermination+0x8a>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    4164:	f000 f9e4 	bl	4530 <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    4168:	f240 135c 	movw	r3, #348	; 0x15c
    416c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4170:	68db      	ldr	r3, [r3, #12]
    4172:	68db      	ldr	r3, [r3, #12]
    4174:	603b      	str	r3, [r7, #0]
					vListRemove( &( pxTCB->xGenericListItem ) );
    4176:	683b      	ldr	r3, [r7, #0]
    4178:	3304      	adds	r3, #4
    417a:	4618      	mov	r0, r3
    417c:	f7fe fc50 	bl	2a20 <vListRemove>
					--uxCurrentNumberOfTasks;
    4180:	f240 1388 	movw	r3, #392	; 0x188
    4184:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4188:	681b      	ldr	r3, [r3, #0]
    418a:	1e5a      	subs	r2, r3, #1
    418c:	f240 1388 	movw	r3, #392	; 0x188
    4190:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4194:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
    4196:	f240 1370 	movw	r3, #368	; 0x170
    419a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    419e:	681b      	ldr	r3, [r3, #0]
    41a0:	1e5a      	subs	r2, r3, #1
    41a2:	f240 1370 	movw	r3, #368	; 0x170
    41a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    41aa:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
    41ac:	f000 f9d6 	bl	455c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
    41b0:	6838      	ldr	r0, [r7, #0]
    41b2:	f000 f879 	bl	42a8 <prvDeleteTCB>
			}
		}
	}
	#endif
}
    41b6:	3708      	adds	r7, #8
    41b8:	46bd      	mov	sp, r7
    41ba:	bd80      	pop	{r7, pc}

000041bc <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    41bc:	b580      	push	{r7, lr}
    41be:	b082      	sub	sp, #8
    41c0:	af00      	add	r7, sp, #0
    41c2:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    41c4:	f240 03b0 	movw	r3, #176	; 0xb0
    41c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    41cc:	681b      	ldr	r3, [r3, #0]
    41ce:	687a      	ldr	r2, [r7, #4]
    41d0:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
    41d2:	f240 138c 	movw	r3, #396	; 0x18c
    41d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    41da:	681b      	ldr	r3, [r3, #0]
    41dc:	687a      	ldr	r2, [r7, #4]
    41de:	429a      	cmp	r2, r3
    41e0:	d20f      	bcs.n	4202 <prvAddCurrentTaskToDelayedList+0x46>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    41e2:	f240 1344 	movw	r3, #324	; 0x144
    41e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    41ea:	681a      	ldr	r2, [r3, #0]
    41ec:	f240 03b0 	movw	r3, #176	; 0xb0
    41f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    41f4:	681b      	ldr	r3, [r3, #0]
    41f6:	3304      	adds	r3, #4
    41f8:	4610      	mov	r0, r2
    41fa:	4619      	mov	r1, r3
    41fc:	f7fe fbd8 	bl	29b0 <vListInsert>
    4200:	e01c      	b.n	423c <prvAddCurrentTaskToDelayedList+0x80>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4202:	f240 1340 	movw	r3, #320	; 0x140
    4206:	f2c2 0300 	movt	r3, #8192	; 0x2000
    420a:	681a      	ldr	r2, [r3, #0]
    420c:	f240 03b0 	movw	r3, #176	; 0xb0
    4210:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4214:	681b      	ldr	r3, [r3, #0]
    4216:	3304      	adds	r3, #4
    4218:	4610      	mov	r0, r2
    421a:	4619      	mov	r1, r3
    421c:	f7fe fbc8 	bl	29b0 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    4220:	f240 0328 	movw	r3, #40	; 0x28
    4224:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4228:	681b      	ldr	r3, [r3, #0]
    422a:	687a      	ldr	r2, [r7, #4]
    422c:	429a      	cmp	r2, r3
    422e:	d205      	bcs.n	423c <prvAddCurrentTaskToDelayedList+0x80>
		{
			xNextTaskUnblockTime = xTimeToWake;
    4230:	f240 0328 	movw	r3, #40	; 0x28
    4234:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4238:	687a      	ldr	r2, [r7, #4]
    423a:	601a      	str	r2, [r3, #0]
		}
	}
}
    423c:	3708      	adds	r7, #8
    423e:	46bd      	mov	sp, r7
    4240:	bd80      	pop	{r7, pc}
    4242:	bf00      	nop

00004244 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    4244:	b580      	push	{r7, lr}
    4246:	b084      	sub	sp, #16
    4248:	af00      	add	r7, sp, #0
    424a:	4603      	mov	r3, r0
    424c:	6039      	str	r1, [r7, #0]
    424e:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    4250:	2048      	movs	r0, #72	; 0x48
    4252:	f000 f9ef 	bl	4634 <pvPortMalloc>
    4256:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
    4258:	68fb      	ldr	r3, [r7, #12]
    425a:	2b00      	cmp	r3, #0
    425c:	d01f      	beq.n	429e <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    425e:	683b      	ldr	r3, [r7, #0]
    4260:	2b00      	cmp	r3, #0
    4262:	d106      	bne.n	4272 <prvAllocateTCBAndStack+0x2e>
    4264:	88fb      	ldrh	r3, [r7, #6]
    4266:	009b      	lsls	r3, r3, #2
    4268:	4618      	mov	r0, r3
    426a:	f000 f9e3 	bl	4634 <pvPortMalloc>
    426e:	4603      	mov	r3, r0
    4270:	e000      	b.n	4274 <prvAllocateTCBAndStack+0x30>
    4272:	683b      	ldr	r3, [r7, #0]
    4274:	68fa      	ldr	r2, [r7, #12]
    4276:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
    4278:	68fb      	ldr	r3, [r7, #12]
    427a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    427c:	2b00      	cmp	r3, #0
    427e:	d105      	bne.n	428c <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    4280:	68f8      	ldr	r0, [r7, #12]
    4282:	f000 fa1f 	bl	46c4 <vPortFree>
			pxNewTCB = NULL;
    4286:	2300      	movs	r3, #0
    4288:	60fb      	str	r3, [r7, #12]
    428a:	e008      	b.n	429e <prvAllocateTCBAndStack+0x5a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    428c:	68fb      	ldr	r3, [r7, #12]
    428e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    4290:	88fb      	ldrh	r3, [r7, #6]
    4292:	009b      	lsls	r3, r3, #2
    4294:	4610      	mov	r0, r2
    4296:	21a5      	movs	r1, #165	; 0xa5
    4298:	461a      	mov	r2, r3
    429a:	f001 f8a7 	bl	53ec <memset>
		}
	}

	return pxNewTCB;
    429e:	68fb      	ldr	r3, [r7, #12]
}
    42a0:	4618      	mov	r0, r3
    42a2:	3710      	adds	r7, #16
    42a4:	46bd      	mov	sp, r7
    42a6:	bd80      	pop	{r7, pc}

000042a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
    42a8:	b580      	push	{r7, lr}
    42aa:	b082      	sub	sp, #8
    42ac:	af00      	add	r7, sp, #0
    42ae:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    42b0:	687b      	ldr	r3, [r7, #4]
    42b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    42b4:	4618      	mov	r0, r3
    42b6:	f000 fa05 	bl	46c4 <vPortFree>
		vPortFree( pxTCB );
    42ba:	6878      	ldr	r0, [r7, #4]
    42bc:	f000 fa02 	bl	46c4 <vPortFree>
	}
    42c0:	3708      	adds	r7, #8
    42c2:	46bd      	mov	sp, r7
    42c4:	bd80      	pop	{r7, pc}
    42c6:	bf00      	nop

000042c8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
    42c8:	b480      	push	{r7}
    42ca:	b083      	sub	sp, #12
    42cc:	af00      	add	r7, sp, #0
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    42ce:	f240 03b0 	movw	r3, #176	; 0xb0
    42d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    42d6:	681b      	ldr	r3, [r3, #0]
    42d8:	607b      	str	r3, [r7, #4]

		return xReturn;
    42da:	687b      	ldr	r3, [r7, #4]
	}
    42dc:	4618      	mov	r0, r3
    42de:	370c      	adds	r7, #12
    42e0:	46bd      	mov	sp, r7
    42e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    42e6:	4770      	bx	lr

000042e8 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    42e8:	b580      	push	{r7, lr}
    42ea:	b084      	sub	sp, #16
    42ec:	af00      	add	r7, sp, #0
    42ee:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    42f0:	687b      	ldr	r3, [r7, #4]
    42f2:	60fb      	str	r3, [r7, #12]

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    42f4:	68fb      	ldr	r3, [r7, #12]
    42f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    42f8:	f240 03b0 	movw	r3, #176	; 0xb0
    42fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4300:	681b      	ldr	r3, [r3, #0]
    4302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4304:	429a      	cmp	r2, r3
    4306:	d24f      	bcs.n	43a8 <vTaskPriorityInherit+0xc0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    4308:	f240 03b0 	movw	r3, #176	; 0xb0
    430c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4310:	681b      	ldr	r3, [r3, #0]
    4312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4314:	f1c3 0205 	rsb	r2, r3, #5
    4318:	68fb      	ldr	r3, [r7, #12]
    431a:	619a      	str	r2, [r3, #24]

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    431c:	68fb      	ldr	r3, [r7, #12]
    431e:	6959      	ldr	r1, [r3, #20]
    4320:	68fb      	ldr	r3, [r7, #12]
    4322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4324:	4613      	mov	r3, r2
    4326:	009b      	lsls	r3, r3, #2
    4328:	4413      	add	r3, r2
    432a:	009b      	lsls	r3, r3, #2
    432c:	f240 02b4 	movw	r2, #180	; 0xb4
    4330:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4334:	4413      	add	r3, r2
    4336:	4299      	cmp	r1, r3
    4338:	d12e      	bne.n	4398 <vTaskPriorityInherit+0xb0>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
    433a:	68fb      	ldr	r3, [r7, #12]
    433c:	3304      	adds	r3, #4
    433e:	4618      	mov	r0, r3
    4340:	f7fe fb6e 	bl	2a20 <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    4344:	f240 03b0 	movw	r3, #176	; 0xb0
    4348:	f2c2 0300 	movt	r3, #8192	; 0x2000
    434c:	681b      	ldr	r3, [r3, #0]
    434e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4350:	68fb      	ldr	r3, [r7, #12]
    4352:	62da      	str	r2, [r3, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
    4354:	68fb      	ldr	r3, [r7, #12]
    4356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4358:	f240 1394 	movw	r3, #404	; 0x194
    435c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4360:	681b      	ldr	r3, [r3, #0]
    4362:	429a      	cmp	r2, r3
    4364:	d906      	bls.n	4374 <vTaskPriorityInherit+0x8c>
    4366:	68fb      	ldr	r3, [r7, #12]
    4368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    436a:	f240 1394 	movw	r3, #404	; 0x194
    436e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4372:	601a      	str	r2, [r3, #0]
    4374:	68fb      	ldr	r3, [r7, #12]
    4376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4378:	4613      	mov	r3, r2
    437a:	009b      	lsls	r3, r3, #2
    437c:	4413      	add	r3, r2
    437e:	009b      	lsls	r3, r3, #2
    4380:	f240 02b4 	movw	r2, #180	; 0xb4
    4384:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4388:	441a      	add	r2, r3
    438a:	68fb      	ldr	r3, [r7, #12]
    438c:	3304      	adds	r3, #4
    438e:	4610      	mov	r0, r2
    4390:	4619      	mov	r1, r3
    4392:	f7fe fae5 	bl	2960 <vListInsertEnd>
    4396:	e007      	b.n	43a8 <vTaskPriorityInherit+0xc0>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    4398:	f240 03b0 	movw	r3, #176	; 0xb0
    439c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    43a0:	681b      	ldr	r3, [r3, #0]
    43a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    43a4:	68fb      	ldr	r3, [r7, #12]
    43a6:	62da      	str	r2, [r3, #44]	; 0x2c
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
    43a8:	3710      	adds	r7, #16
    43aa:	46bd      	mov	sp, r7
    43ac:	bd80      	pop	{r7, pc}
    43ae:	bf00      	nop

000043b0 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    43b0:	b580      	push	{r7, lr}
    43b2:	b084      	sub	sp, #16
    43b4:	af00      	add	r7, sp, #0
    43b6:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    43b8:	687b      	ldr	r3, [r7, #4]
    43ba:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    43bc:	687b      	ldr	r3, [r7, #4]
    43be:	2b00      	cmp	r3, #0
    43c0:	d035      	beq.n	442e <vTaskPriorityDisinherit+0x7e>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    43c2:	68fb      	ldr	r3, [r7, #12]
    43c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    43c6:	68fb      	ldr	r3, [r7, #12]
    43c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    43ca:	429a      	cmp	r2, r3
    43cc:	d02f      	beq.n	442e <vTaskPriorityDisinherit+0x7e>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
    43ce:	68fb      	ldr	r3, [r7, #12]
    43d0:	3304      	adds	r3, #4
    43d2:	4618      	mov	r0, r3
    43d4:	f7fe fb24 	bl	2a20 <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    43d8:	68fb      	ldr	r3, [r7, #12]
    43da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    43dc:	68fb      	ldr	r3, [r7, #12]
    43de:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    43e0:	68fb      	ldr	r3, [r7, #12]
    43e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    43e4:	f1c3 0205 	rsb	r2, r3, #5
    43e8:	68fb      	ldr	r3, [r7, #12]
    43ea:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
    43ec:	68fb      	ldr	r3, [r7, #12]
    43ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    43f0:	f240 1394 	movw	r3, #404	; 0x194
    43f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    43f8:	681b      	ldr	r3, [r3, #0]
    43fa:	429a      	cmp	r2, r3
    43fc:	d906      	bls.n	440c <vTaskPriorityDisinherit+0x5c>
    43fe:	68fb      	ldr	r3, [r7, #12]
    4400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4402:	f240 1394 	movw	r3, #404	; 0x194
    4406:	f2c2 0300 	movt	r3, #8192	; 0x2000
    440a:	601a      	str	r2, [r3, #0]
    440c:	68fb      	ldr	r3, [r7, #12]
    440e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4410:	4613      	mov	r3, r2
    4412:	009b      	lsls	r3, r3, #2
    4414:	4413      	add	r3, r2
    4416:	009b      	lsls	r3, r3, #2
    4418:	f240 02b4 	movw	r2, #180	; 0xb4
    441c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4420:	441a      	add	r2, r3
    4422:	68fb      	ldr	r3, [r7, #12]
    4424:	3304      	adds	r3, #4
    4426:	4610      	mov	r0, r2
    4428:	4619      	mov	r1, r3
    442a:	f7fe fa99 	bl	2960 <vListInsertEnd>
			}
		}
	}
    442e:	3710      	adds	r7, #16
    4430:	46bd      	mov	sp, r7
    4432:	bd80      	pop	{r7, pc}

00004434 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    4434:	b480      	push	{r7}
    4436:	b085      	sub	sp, #20
    4438:	af00      	add	r7, sp, #0
    443a:	60f8      	str	r0, [r7, #12]
    443c:	60b9      	str	r1, [r7, #8]
    443e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    4440:	68fb      	ldr	r3, [r7, #12]
    4442:	3b04      	subs	r3, #4
    4444:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    4446:	68fb      	ldr	r3, [r7, #12]
    4448:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    444c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    444e:	68fb      	ldr	r3, [r7, #12]
    4450:	3b04      	subs	r3, #4
    4452:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
    4454:	68ba      	ldr	r2, [r7, #8]
    4456:	68fb      	ldr	r3, [r7, #12]
    4458:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    445a:	68fb      	ldr	r3, [r7, #12]
    445c:	3b04      	subs	r3, #4
    445e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
    4460:	68fb      	ldr	r3, [r7, #12]
    4462:	2200      	movs	r2, #0
    4464:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    4466:	68fb      	ldr	r3, [r7, #12]
    4468:	3b14      	subs	r3, #20
    446a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
    446c:	687a      	ldr	r2, [r7, #4]
    446e:	68fb      	ldr	r3, [r7, #12]
    4470:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
    4472:	68fb      	ldr	r3, [r7, #12]
    4474:	3b20      	subs	r3, #32
    4476:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    4478:	68fb      	ldr	r3, [r7, #12]
}
    447a:	4618      	mov	r0, r3
    447c:	3714      	adds	r7, #20
    447e:	46bd      	mov	sp, r7
    4480:	f85d 7b04 	ldr.w	r7, [sp], #4
    4484:	4770      	bx	lr
    4486:	bf00      	nop

00004488 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    4488:	4b06      	ldr	r3, [pc, #24]	; (44a4 <pxCurrentTCBConst2>)
    448a:	6819      	ldr	r1, [r3, #0]
    448c:	6808      	ldr	r0, [r1, #0]
    448e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    4492:	f380 8809 	msr	PSP, r0
    4496:	f04f 0000 	mov.w	r0, #0
    449a:	f380 8811 	msr	BASEPRI, r0
    449e:	f04e 0e0d 	orr.w	lr, lr, #13
    44a2:	4770      	bx	lr

000044a4 <pxCurrentTCBConst2>:
    44a4:	200000b0 	.word	0x200000b0

000044a8 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
    44a8:	4861      	ldr	r0, [pc, #388]	; (4630 <prvSetupTimerInterrupt+0x2c>)
    44aa:	6800      	ldr	r0, [r0, #0]
    44ac:	6800      	ldr	r0, [r0, #0]
    44ae:	f380 8808 	msr	MSP, r0
    44b2:	b662      	cpsie	i
    44b4:	df00      	svc	0
    44b6:	bf00      	nop

000044b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
    44b8:	b580      	push	{r7, lr}
    44ba:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    44bc:	f64e 5320 	movw	r3, #60704	; 0xed20
    44c0:	f2ce 0300 	movt	r3, #57344	; 0xe000
    44c4:	f64e 5220 	movw	r2, #60704	; 0xed20
    44c8:	f2ce 0200 	movt	r2, #57344	; 0xe000
    44cc:	6812      	ldr	r2, [r2, #0]
    44ce:	f442 02fe 	orr.w	r2, r2, #8323072	; 0x7f0000
    44d2:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    44d4:	f64e 5320 	movw	r3, #60704	; 0xed20
    44d8:	f2ce 0300 	movt	r3, #57344	; 0xe000
    44dc:	f64e 5220 	movw	r2, #60704	; 0xed20
    44e0:	f2ce 0200 	movt	r2, #57344	; 0xe000
    44e4:	6812      	ldr	r2, [r2, #0]
    44e6:	f042 42fe 	orr.w	r2, r2, #2130706432	; 0x7f000000
    44ea:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    44ec:	f000 f88a 	bl	4604 <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    44f0:	f240 032c 	movw	r3, #44	; 0x2c
    44f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    44f8:	2200      	movs	r2, #0
    44fa:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
    44fc:	f7ff ffd4 	bl	44a8 <prvPortStartFirstTask>

	/* Should not get here! */
	return 0;
    4500:	2300      	movs	r3, #0
}
    4502:	4618      	mov	r0, r3
    4504:	bd80      	pop	{r7, pc}
    4506:	bf00      	nop

00004508 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    4508:	b480      	push	{r7}
    450a:	af00      	add	r7, sp, #0
	/* It is unlikely that the CM3 port will require this function as there
	is nothing to return to.  */
}
    450c:	46bd      	mov	sp, r7
    450e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4512:	4770      	bx	lr

00004514 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
    4514:	b480      	push	{r7}
    4516:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    4518:	f64e 5304 	movw	r3, #60676	; 0xed04
    451c:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4520:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4524:	601a      	str	r2, [r3, #0]
}
    4526:	46bd      	mov	sp, r7
    4528:	f85d 7b04 	ldr.w	r7, [sp], #4
    452c:	4770      	bx	lr
    452e:	bf00      	nop

00004530 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    4530:	b480      	push	{r7}
    4532:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
    4534:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4538:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
    453c:	f240 032c 	movw	r3, #44	; 0x2c
    4540:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4544:	681b      	ldr	r3, [r3, #0]
    4546:	1c5a      	adds	r2, r3, #1
    4548:	f240 032c 	movw	r3, #44	; 0x2c
    454c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4550:	601a      	str	r2, [r3, #0]
}
    4552:	46bd      	mov	sp, r7
    4554:	f85d 7b04 	ldr.w	r7, [sp], #4
    4558:	4770      	bx	lr
    455a:	bf00      	nop

0000455c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    455c:	b480      	push	{r7}
    455e:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
    4560:	f240 032c 	movw	r3, #44	; 0x2c
    4564:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4568:	681b      	ldr	r3, [r3, #0]
    456a:	1e5a      	subs	r2, r3, #1
    456c:	f240 032c 	movw	r3, #44	; 0x2c
    4570:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4574:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
    4576:	f240 032c 	movw	r3, #44	; 0x2c
    457a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    457e:	681b      	ldr	r3, [r3, #0]
    4580:	2b00      	cmp	r3, #0
    4582:	d103      	bne.n	458c <vPortExitCritical+0x30>
	{
		portENABLE_INTERRUPTS();
    4584:	f04f 0000 	mov.w	r0, #0
    4588:	f380 8811 	msr	BASEPRI, r0
	}
}
    458c:	46bd      	mov	sp, r7
    458e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4592:	4770      	bx	lr

00004594 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    4594:	f3ef 8009 	mrs	r0, PSP
    4598:	4b0c      	ldr	r3, [pc, #48]	; (45cc <pxCurrentTCBConst>)
    459a:	681a      	ldr	r2, [r3, #0]
    459c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    45a0:	6010      	str	r0, [r2, #0]
    45a2:	e92d 4008 	stmdb	sp!, {r3, lr}
    45a6:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    45aa:	f380 8811 	msr	BASEPRI, r0
    45ae:	f7ff fbcd 	bl	3d4c <vTaskSwitchContext>
    45b2:	f04f 0000 	mov.w	r0, #0
    45b6:	f380 8811 	msr	BASEPRI, r0
    45ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    45be:	6819      	ldr	r1, [r3, #0]
    45c0:	6808      	ldr	r0, [r1, #0]
    45c2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    45c6:	f380 8809 	msr	PSP, r0
    45ca:	4770      	bx	lr

000045cc <pxCurrentTCBConst>:
    45cc:	200000b0 	.word	0x200000b0

000045d0 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    45d0:	b580      	push	{r7, lr}
    45d2:	b082      	sub	sp, #8
    45d4:	af00      	add	r7, sp, #0
unsigned long ulDummy;

	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    45d6:	f64e 5304 	movw	r3, #60676	; 0xed04
    45da:	f2ce 0300 	movt	r3, #57344	; 0xe000
    45de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    45e2:	601a      	str	r2, [r3, #0]
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
    45e4:	2300      	movs	r3, #0
    45e6:	607b      	str	r3, [r7, #4]
    45e8:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    45ec:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
    45f0:	f7ff face 	bl	3b90 <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
    45f4:	f04f 0000 	mov.w	r0, #0
    45f8:	f380 8811 	msr	BASEPRI, r0
}
    45fc:	3708      	adds	r7, #8
    45fe:	46bd      	mov	sp, r7
    4600:	bd80      	pop	{r7, pc}
    4602:	bf00      	nop

00004604 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    4604:	b480      	push	{r7}
    4606:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    4608:	f24e 0314 	movw	r3, #57364	; 0xe014
    460c:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4610:	f64f 427f 	movw	r2, #64639	; 0xfc7f
    4614:	f2c0 020a 	movt	r2, #10
    4618:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    461a:	f24e 0310 	movw	r3, #57360	; 0xe010
    461e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4622:	2207      	movs	r2, #7
    4624:	601a      	str	r2, [r3, #0]
}
    4626:	46bd      	mov	sp, r7
    4628:	f85d 7b04 	ldr.w	r7, [sp], #4
    462c:	4770      	bx	lr
    462e:	0000      	.short	0x0000
    4630:	e000ed08 	.word	0xe000ed08

00004634 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    4634:	b580      	push	{r7, lr}
    4636:	b084      	sub	sp, #16
    4638:	af00      	add	r7, sp, #0
    463a:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
    463c:	2300      	movs	r3, #0
    463e:	60fb      	str	r3, [r7, #12]

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    4640:	687b      	ldr	r3, [r7, #4]
    4642:	f003 0307 	and.w	r3, r3, #7
    4646:	2b00      	cmp	r3, #0
    4648:	d004      	beq.n	4654 <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    464a:	687b      	ldr	r3, [r7, #4]
    464c:	f023 0307 	bic.w	r3, r3, #7
    4650:	3308      	adds	r3, #8
    4652:	607b      	str	r3, [r7, #4]
		}
	#endif

	vTaskSuspendAll();
    4654:	f7ff f9b8 	bl	39c8 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
    4658:	f244 53b0 	movw	r3, #17840	; 0x45b0
    465c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4660:	681a      	ldr	r2, [r3, #0]
    4662:	687b      	ldr	r3, [r7, #4]
    4664:	4413      	add	r3, r2
    4666:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
    466a:	d224      	bcs.n	46b6 <pvPortMalloc+0x82>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
    466c:	f244 53b0 	movw	r3, #17840	; 0x45b0
    4670:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4674:	681a      	ldr	r2, [r3, #0]
    4676:	687b      	ldr	r3, [r7, #4]
    4678:	441a      	add	r2, r3
    467a:	f244 53b0 	movw	r3, #17840	; 0x45b0
    467e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4682:	681b      	ldr	r3, [r3, #0]
	#endif

	vTaskSuspendAll();
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
    4684:	429a      	cmp	r2, r3
    4686:	d916      	bls.n	46b6 <pvPortMalloc+0x82>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
    4688:	f244 53b0 	movw	r3, #17840	; 0x45b0
    468c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4690:	681a      	ldr	r2, [r3, #0]
    4692:	f240 13b0 	movw	r3, #432	; 0x1b0
    4696:	f2c2 0300 	movt	r3, #8192	; 0x2000
    469a:	4413      	add	r3, r2
    469c:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;			
    469e:	f244 53b0 	movw	r3, #17840	; 0x45b0
    46a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    46a6:	681a      	ldr	r2, [r3, #0]
    46a8:	687b      	ldr	r3, [r7, #4]
    46aa:	441a      	add	r2, r3
    46ac:	f244 53b0 	movw	r3, #17840	; 0x45b0
    46b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    46b4:	601a      	str	r2, [r3, #0]
		}	
	}
	xTaskResumeAll();
    46b6:	f7ff f999 	bl	39ec <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif	

	return pvReturn;
    46ba:	68fb      	ldr	r3, [r7, #12]
}
    46bc:	4618      	mov	r0, r3
    46be:	3710      	adds	r7, #16
    46c0:	46bd      	mov	sp, r7
    46c2:	bd80      	pop	{r7, pc}

000046c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    46c4:	b480      	push	{r7}
    46c6:	b083      	sub	sp, #12
    46c8:	af00      	add	r7, sp, #0
    46ca:	6078      	str	r0, [r7, #4]
	/* Memory cannot be freed using this scheme.  See heap_2.c and heap_3.c
	for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;
}
    46cc:	370c      	adds	r7, #12
    46ce:	46bd      	mov	sp, r7
    46d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    46d4:	4770      	bx	lr
    46d6:	bf00      	nop

000046d8 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    46d8:	b480      	push	{r7}
    46da:	af00      	add	r7, sp, #0
	/* Only required when static memory is not cleared. */
	xNextFreeByte = ( size_t ) 0;
    46dc:	f244 53b0 	movw	r3, #17840	; 0x45b0
    46e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    46e4:	2200      	movs	r2, #0
    46e6:	601a      	str	r2, [r3, #0]
}
    46e8:	46bd      	mov	sp, r7
    46ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    46ee:	4770      	bx	lr

000046f0 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    46f0:	b480      	push	{r7}
    46f2:	af00      	add	r7, sp, #0
	return ( configTOTAL_HEAP_SIZE - xNextFreeByte );
    46f4:	f244 53b0 	movw	r3, #17840	; 0x45b0
    46f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    46fc:	681b      	ldr	r3, [r3, #0]
    46fe:	f5c3 4388 	rsb	r3, r3, #17408	; 0x4400
}
    4702:	4618      	mov	r0, r3
    4704:	46bd      	mov	sp, r7
    4706:	f85d 7b04 	ldr.w	r7, [sp], #4
    470a:	4770      	bx	lr

0000470c <init_led>:
#include "stm32f10x_usart.h"
#include "stm32f10x_exti.h"
#include "misc.h"

void init_led(void)
{
    470c:	b580      	push	{r7, lr}
    470e:	b082      	sub	sp, #8
    4710:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO C clock. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
    4712:	2010      	movs	r0, #16
    4714:	2101      	movs	r1, #1
    4716:	f7fc fb53 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Set the LED pin state such that the LED is off.  The LED is connected
     * between power and the microcontroller pin, which makes it turn on when
     * the pin is low.
     */
    GPIO_WriteBit(GPIOC,GPIO_Pin_12,Bit_SET);
    471a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    471e:	f2c4 0001 	movt	r0, #16385	; 0x4001
    4722:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    4726:	2201      	movs	r2, #1
    4728:	f7fc fe5a 	bl	13e0 <GPIO_WriteBit>

    /* Configure the LED pin as push-pull output. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_12;
    472c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    4730:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    4732:	2310      	movs	r3, #16
    4734:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    4736:	2303      	movs	r3, #3
    4738:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
    473a:	1d3b      	adds	r3, r7, #4
    473c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    4740:	f2c4 0001 	movt	r0, #16385	; 0x4001
    4744:	4619      	mov	r1, r3
    4746:	f7fc fd0f 	bl	1168 <GPIO_Init>
}
    474a:	3708      	adds	r7, #8
    474c:	46bd      	mov	sp, r7
    474e:	bd80      	pop	{r7, pc}

00004750 <init_button>:

void init_button(void)
{
    4750:	b580      	push	{r7, lr}
    4752:	b082      	sub	sp, #8
    4754:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO A clock */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
    4756:	2004      	movs	r0, #4
    4758:	2101      	movs	r1, #1
    475a:	f7fc fb31 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Configure the button pin as a floating input. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_0;
    475e:	2301      	movs	r3, #1
    4760:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    4762:	2304      	movs	r3, #4
    4764:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    4766:	2303      	movs	r3, #3
    4768:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
    476a:	1d3b      	adds	r3, r7, #4
    476c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    4770:	f2c4 0001 	movt	r0, #16385	; 0x4001
    4774:	4619      	mov	r1, r3
    4776:	f7fc fcf7 	bl	1168 <GPIO_Init>
}
    477a:	3708      	adds	r7, #8
    477c:	46bd      	mov	sp, r7
    477e:	bd80      	pop	{r7, pc}

00004780 <enable_button_interrupts>:

void enable_button_interrupts(void)
{
    4780:	b580      	push	{r7, lr}
    4782:	b084      	sub	sp, #16
    4784:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable the AFIO clock.  GPIO_EXTILineConfig sets registers in
     * the AFIO.
     */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
    4786:	2001      	movs	r0, #1
    4788:	2101      	movs	r1, #1
    478a:	f7fc fb19 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Connect EXTI Line 0 to the button GPIO Pin */
    GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);
    478e:	2000      	movs	r0, #0
    4790:	2100      	movs	r1, #0
    4792:	f7fc ff1d 	bl	15d0 <GPIO_EXTILineConfig>

    /* Configure the EXTI line to generate an interrupt when the button is
     * pressed.  The button pin is high when pressed, so it needs to trigger
     * when rising from low to high. */
    EXTI_InitStructure.EXTI_Line = EXTI_Line0;
    4796:	2301      	movs	r3, #1
    4798:	60bb      	str	r3, [r7, #8]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
    479a:	2300      	movs	r3, #0
    479c:	733b      	strb	r3, [r7, #12]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
    479e:	2308      	movs	r3, #8
    47a0:	737b      	strb	r3, [r7, #13]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
    47a2:	2301      	movs	r3, #1
    47a4:	73bb      	strb	r3, [r7, #14]
    EXTI_Init(&EXTI_InitStructure);
    47a6:	f107 0308 	add.w	r3, r7, #8
    47aa:	4618      	mov	r0, r3
    47ac:	f7fd fc16 	bl	1fdc <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
    47b0:	2306      	movs	r3, #6
    47b2:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
    47b4:	230f      	movs	r3, #15
    47b6:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
    47b8:	230f      	movs	r3, #15
    47ba:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    47bc:	2301      	movs	r3, #1
    47be:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
    47c0:	1d3b      	adds	r3, r7, #4
    47c2:	4618      	mov	r0, r3
    47c4:	f7fd fd44 	bl	2250 <NVIC_Init>
}
    47c8:	3710      	adds	r7, #16
    47ca:	46bd      	mov	sp, r7
    47cc:	bd80      	pop	{r7, pc}
    47ce:	bf00      	nop

000047d0 <init_rs232>:

void init_rs232(void)
{
    47d0:	b580      	push	{r7, lr}
    47d2:	b086      	sub	sp, #24
    47d4:	af00      	add	r7, sp, #0
    USART_InitTypeDef USART_InitStructure;
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable peripheral clocks. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
    47d6:	2005      	movs	r0, #5
    47d8:	2101      	movs	r1, #1
    47da:	f7fc faf1 	bl	dc0 <RCC_APB2PeriphClockCmd>
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
    47de:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    47e2:	2101      	movs	r1, #1
    47e4:	f7fc fb14 	bl	e10 <RCC_APB1PeriphClockCmd>

    /* Configure USART2 Rx pin as floating input. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
    47e8:	2308      	movs	r3, #8
    47ea:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    47ec:	2304      	movs	r3, #4
    47ee:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
    47f0:	1d3b      	adds	r3, r7, #4
    47f2:	f44f 6000 	mov.w	r0, #2048	; 0x800
    47f6:	f2c4 0001 	movt	r0, #16385	; 0x4001
    47fa:	4619      	mov	r1, r3
    47fc:	f7fc fcb4 	bl	1168 <GPIO_Init>

    /* Configure USART2 Tx as alternate function push-pull. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
    4800:	2304      	movs	r3, #4
    4802:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    4804:	2303      	movs	r3, #3
    4806:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    4808:	2318      	movs	r3, #24
    480a:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
    480c:	1d3b      	adds	r3, r7, #4
    480e:	f44f 6000 	mov.w	r0, #2048	; 0x800
    4812:	f2c4 0001 	movt	r0, #16385	; 0x4001
    4816:	4619      	mov	r1, r3
    4818:	f7fc fca6 	bl	1168 <GPIO_Init>

    /* Configure the USART2 */
    USART_InitStructure.USART_BaudRate = 9600;
    481c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    4820:	60bb      	str	r3, [r7, #8]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
    4822:	2300      	movs	r3, #0
    4824:	81bb      	strh	r3, [r7, #12]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
    4826:	2300      	movs	r3, #0
    4828:	81fb      	strh	r3, [r7, #14]
    USART_InitStructure.USART_Parity = USART_Parity_No;
    482a:	2300      	movs	r3, #0
    482c:	823b      	strh	r3, [r7, #16]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    482e:	2300      	movs	r3, #0
    4830:	82bb      	strh	r3, [r7, #20]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    4832:	230c      	movs	r3, #12
    4834:	827b      	strh	r3, [r7, #18]
    USART_Init(USART2, &USART_InitStructure);
    4836:	f107 0308 	add.w	r3, r7, #8
    483a:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    483e:	f2c4 0000 	movt	r0, #16384	; 0x4000
    4842:	4619      	mov	r1, r3
    4844:	f7fc ff78 	bl	1738 <USART_Init>
    USART_Cmd(USART2, ENABLE);
    4848:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    484c:	f2c4 0000 	movt	r0, #16384	; 0x4000
    4850:	2101      	movs	r1, #1
    4852:	f7fd f88f 	bl	1974 <USART_Cmd>
}
    4856:	3718      	adds	r7, #24
    4858:	46bd      	mov	sp, r7
    485a:	bd80      	pop	{r7, pc}

0000485c <enable_rs232_interrupts>:

void enable_rs232_interrupts(void)
{
    485c:	b580      	push	{r7, lr}
    485e:	b082      	sub	sp, #8
    4860:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable transmit and receive interrupts for the USART2. */
    USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
    4862:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    4866:	f2c4 0000 	movt	r0, #16384	; 0x4000
    486a:	f240 7127 	movw	r1, #1831	; 0x727
    486e:	2200      	movs	r2, #0
    4870:	f7fd f8a0 	bl	19b4 <USART_ITConfig>
    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
    4874:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    4878:	f2c4 0000 	movt	r0, #16384	; 0x4000
    487c:	f240 5125 	movw	r1, #1317	; 0x525
    4880:	2201      	movs	r2, #1
    4882:	f7fd f897 	bl	19b4 <USART_ITConfig>

    /* Enable the USART2 IRQ in the NVIC module (so that the USART2 interrupt
     * handler is enabled). */
    NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
    4886:	2326      	movs	r3, #38	; 0x26
    4888:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    488a:	2300      	movs	r3, #0
    488c:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    488e:	2301      	movs	r3, #1
    4890:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
    4892:	1d3b      	adds	r3, r7, #4
    4894:	4618      	mov	r0, r3
    4896:	f7fd fcdb 	bl	2250 <NVIC_Init>
}
    489a:	3708      	adds	r7, #8
    489c:	46bd      	mov	sp, r7
    489e:	bd80      	pop	{r7, pc}

000048a0 <enable_rs232>:

void enable_rs232(void)
{
    48a0:	b580      	push	{r7, lr}
    48a2:	af00      	add	r7, sp, #0
    /* Enable the RS232 port. */
    USART_Cmd(USART2, ENABLE);
    48a4:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    48a8:	f2c4 0000 	movt	r0, #16384	; 0x4000
    48ac:	2101      	movs	r1, #1
    48ae:	f7fd f861 	bl	1974 <USART_Cmd>
}
    48b2:	bd80      	pop	{r7, pc}

000048b4 <USART2_IRQHandler>:
} serial_ch_msg;

/* IRQ handler to handle USART2 interruptss (both transmit and receive
 * interrupts). */
void USART2_IRQHandler()
{
    48b4:	b580      	push	{r7, lr}
    48b6:	b082      	sub	sp, #8
    48b8:	af00      	add	r7, sp, #0
	static signed portBASE_TYPE xHigherPriorityTaskWoken;
	serial_ch_msg rx_msg;

	/* If this interrupt is for a transmit... */
	if (USART_GetITStatus(USART2, USART_IT_TXE) != RESET) {
    48ba:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    48be:	f2c4 0000 	movt	r0, #16384	; 0x4000
    48c2:	f240 7127 	movw	r1, #1831	; 0x727
    48c6:	f7fd faed 	bl	1ea4 <USART_GetITStatus>
    48ca:	4603      	mov	r3, r0
    48cc:	2b00      	cmp	r3, #0
    48ce:	d017      	beq.n	4900 <USART2_IRQHandler+0x4c>
		/* "give" the serial_tx_wait_sem semaphore to notfiy processes
		 * that the buffer has a spot free for the next byte.
		 */
		xSemaphoreGiveFromISR(serial_tx_wait_sem, &xHigherPriorityTaskWoken);
    48d0:	f244 53bc 	movw	r3, #17852	; 0x45bc
    48d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    48d8:	681b      	ldr	r3, [r3, #0]
    48da:	4618      	mov	r0, r3
    48dc:	2100      	movs	r1, #0
    48de:	f244 52c4 	movw	r2, #17860	; 0x45c4
    48e2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    48e6:	2300      	movs	r3, #0
    48e8:	f7fe fa24 	bl	2d34 <xQueueGenericSendFromISR>

		/* Diables the transmit interrupt. */
		USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
    48ec:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    48f0:	f2c4 0000 	movt	r0, #16384	; 0x4000
    48f4:	f240 7127 	movw	r1, #1831	; 0x727
    48f8:	2200      	movs	r2, #0
    48fa:	f7fd f85b 	bl	19b4 <USART_ITConfig>
    48fe:	e027      	b.n	4950 <USART2_IRQHandler+0x9c>
		/* If this interrupt is for a receive... */
	}
	else if (USART_GetITStatus(USART2, USART_IT_RXNE) != RESET) {
    4900:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    4904:	f2c4 0000 	movt	r0, #16384	; 0x4000
    4908:	f240 5125 	movw	r1, #1317	; 0x525
    490c:	f7fd faca 	bl	1ea4 <USART_GetITStatus>
    4910:	4603      	mov	r3, r0
    4912:	2b00      	cmp	r3, #0
    4914:	d01b      	beq.n	494e <USART2_IRQHandler+0x9a>
		/* Receive the byte from the buffer. */
		rx_msg.ch = USART_ReceiveData(USART2);
    4916:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    491a:	f2c4 0000 	movt	r0, #16384	; 0x4000
    491e:	f7fd f95b 	bl	1bd8 <USART_ReceiveData>
    4922:	4603      	mov	r3, r0
    4924:	b2db      	uxtb	r3, r3
    4926:	713b      	strb	r3, [r7, #4]

		/* Queue the received byte. */
		if(!xQueueSendToBackFromISR(serial_rx_queue, &rx_msg, &xHigherPriorityTaskWoken)) {
    4928:	f244 53c0 	movw	r3, #17856	; 0x45c0
    492c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4930:	681a      	ldr	r2, [r3, #0]
    4932:	1d3b      	adds	r3, r7, #4
    4934:	4610      	mov	r0, r2
    4936:	4619      	mov	r1, r3
    4938:	f244 52c4 	movw	r2, #17860	; 0x45c4
    493c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4940:	2300      	movs	r3, #0
    4942:	f7fe f9f7 	bl	2d34 <xQueueGenericSendFromISR>
    4946:	4603      	mov	r3, r0
    4948:	2b00      	cmp	r3, #0
    494a:	d101      	bne.n	4950 <USART2_IRQHandler+0x9c>
			/* If there was an error queueing the received byte,
			 * freeze. */
			while(1);
    494c:	e7fe      	b.n	494c <USART2_IRQHandler+0x98>
	}
	else {
		/* Only transmit and receive interrupts should be enabled.
		 * If this is another type of interrupt, freeze.
		 */
		while(1);
    494e:	e7fe      	b.n	494e <USART2_IRQHandler+0x9a>
	}

	if (xHigherPriorityTaskWoken) {
    4950:	f244 53c4 	movw	r3, #17860	; 0x45c4
    4954:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4958:	681b      	ldr	r3, [r3, #0]
    495a:	2b00      	cmp	r3, #0
    495c:	d001      	beq.n	4962 <USART2_IRQHandler+0xae>
		taskYIELD();
    495e:	f7ff fdd9 	bl	4514 <vPortYieldFromISR>
	}
}
    4962:	3708      	adds	r7, #8
    4964:	46bd      	mov	sp, r7
    4966:	bd80      	pop	{r7, pc}

00004968 <send_byte>:

void send_byte(char ch)
{
    4968:	b580      	push	{r7, lr}
    496a:	b082      	sub	sp, #8
    496c:	af00      	add	r7, sp, #0
    496e:	4603      	mov	r3, r0
    4970:	71fb      	strb	r3, [r7, #7]
	/* Wait until the RS232 port can receive another byte (this semaphore
	 * is "given" by the RS232 port interrupt when the buffer has room for
	 * another byte.
	 */
	while (!xSemaphoreTake(serial_tx_wait_sem, portMAX_DELAY));
    4972:	bf00      	nop
    4974:	f244 53bc 	movw	r3, #17852	; 0x45bc
    4978:	f2c2 0300 	movt	r3, #8192	; 0x2000
    497c:	681b      	ldr	r3, [r3, #0]
    497e:	4618      	mov	r0, r3
    4980:	2100      	movs	r1, #0
    4982:	f04f 32ff 	mov.w	r2, #4294967295
    4986:	2300      	movs	r3, #0
    4988:	f7fe fa14 	bl	2db4 <xQueueGenericReceive>
    498c:	4603      	mov	r3, r0
    498e:	2b00      	cmp	r3, #0
    4990:	d0f0      	beq.n	4974 <send_byte+0xc>

	/* Send the byte and enable the transmit interrupt (it is disabled by
	 * the interrupt).
	 */
	USART_SendData(USART2, ch);
    4992:	79fb      	ldrb	r3, [r7, #7]
    4994:	b29b      	uxth	r3, r3
    4996:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    499a:	f2c4 0000 	movt	r0, #16384	; 0x4000
    499e:	4619      	mov	r1, r3
    49a0:	f7fd f908 	bl	1bb4 <USART_SendData>
	USART_ITConfig(USART2, USART_IT_TXE, ENABLE);
    49a4:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    49a8:	f2c4 0000 	movt	r0, #16384	; 0x4000
    49ac:	f240 7127 	movw	r1, #1831	; 0x727
    49b0:	2201      	movs	r2, #1
    49b2:	f7fc ffff 	bl	19b4 <USART_ITConfig>
}
    49b6:	3708      	adds	r7, #8
    49b8:	46bd      	mov	sp, r7
    49ba:	bd80      	pop	{r7, pc}

000049bc <vPrintString>:
  

void vPrintString( const char * string )
{
    49bc:	b580      	push	{r7, lr}
    49be:	b084      	sub	sp, #16
    49c0:	af00      	add	r7, sp, #0
    49c2:	6078      	str	r0, [r7, #4]
    int i = 0;
    49c4:	2300      	movs	r3, #0
    49c6:	60fb      	str	r3, [r7, #12]
    while(string[i] != '\0')
    49c8:	e009      	b.n	49de <vPrintString+0x22>
    {
        send_byte(string[i]);
    49ca:	68fb      	ldr	r3, [r7, #12]
    49cc:	687a      	ldr	r2, [r7, #4]
    49ce:	4413      	add	r3, r2
    49d0:	781b      	ldrb	r3, [r3, #0]
    49d2:	4618      	mov	r0, r3
    49d4:	f7ff ffc8 	bl	4968 <send_byte>
        i++;
    49d8:	68fb      	ldr	r3, [r7, #12]
    49da:	3301      	adds	r3, #1
    49dc:	60fb      	str	r3, [r7, #12]
  

void vPrintString( const char * string )
{
    int i = 0;
    while(string[i] != '\0')
    49de:	68fb      	ldr	r3, [r7, #12]
    49e0:	687a      	ldr	r2, [r7, #4]
    49e2:	4413      	add	r3, r2
    49e4:	781b      	ldrb	r3, [r3, #0]
    49e6:	2b00      	cmp	r3, #0
    49e8:	d1ef      	bne.n	49ca <vPrintString+0xe>
    {
        send_byte(string[i]);
        i++;
    }
}
    49ea:	3710      	adds	r7, #16
    49ec:	46bd      	mov	sp, r7
    49ee:	bd80      	pop	{r7, pc}

000049f0 <vPrintNumber>:

void vPrintNumber( const long c_num )
{
    49f0:	b580      	push	{r7, lr}
    49f2:	b08a      	sub	sp, #40	; 0x28
    49f4:	af00      	add	r7, sp, #0
    49f6:	6078      	str	r0, [r7, #4]
    char time[15], tmp;
    unsigned int i, count = 0;
    49f8:	2300      	movs	r3, #0
    49fa:	623b      	str	r3, [r7, #32]
    long num = c_num;
    49fc:	687b      	ldr	r3, [r7, #4]
    49fe:	61fb      	str	r3, [r7, #28]

    if(num == 0)
    4a00:	69fb      	ldr	r3, [r7, #28]
    4a02:	2b00      	cmp	r3, #0
    4a04:	d106      	bne.n	4a14 <vPrintNumber+0x24>
    {
        vPrintString("0\n\r");
    4a06:	f245 6004 	movw	r0, #22020	; 0x5604
    4a0a:	f2c0 0000 	movt	r0, #0
    4a0e:	f7ff ffd5 	bl	49bc <vPrintString>
    4a12:	e062      	b.n	4ada <vPrintNumber+0xea>
    }
    else
    {
        while( num )
    4a14:	e024      	b.n	4a60 <vPrintNumber+0x70>
        {
            time[count] = num%10 +'0';
    4a16:	69f9      	ldr	r1, [r7, #28]
    4a18:	f246 6367 	movw	r3, #26215	; 0x6667
    4a1c:	f2c6 6366 	movt	r3, #26214	; 0x6666
    4a20:	fb83 2301 	smull	r2, r3, r3, r1
    4a24:	109a      	asrs	r2, r3, #2
    4a26:	17cb      	asrs	r3, r1, #31
    4a28:	1ad2      	subs	r2, r2, r3
    4a2a:	4613      	mov	r3, r2
    4a2c:	009b      	lsls	r3, r3, #2
    4a2e:	4413      	add	r3, r2
    4a30:	005b      	lsls	r3, r3, #1
    4a32:	1aca      	subs	r2, r1, r3
    4a34:	b2d3      	uxtb	r3, r2
    4a36:	3330      	adds	r3, #48	; 0x30
    4a38:	b2da      	uxtb	r2, r3
    4a3a:	f107 010c 	add.w	r1, r7, #12
    4a3e:	6a3b      	ldr	r3, [r7, #32]
    4a40:	440b      	add	r3, r1
    4a42:	701a      	strb	r2, [r3, #0]
            count ++;
    4a44:	6a3b      	ldr	r3, [r7, #32]
    4a46:	3301      	adds	r3, #1
    4a48:	623b      	str	r3, [r7, #32]
            num /= 10;
    4a4a:	69fa      	ldr	r2, [r7, #28]
    4a4c:	f246 6367 	movw	r3, #26215	; 0x6667
    4a50:	f2c6 6366 	movt	r3, #26214	; 0x6666
    4a54:	fb83 1302 	smull	r1, r3, r3, r2
    4a58:	1099      	asrs	r1, r3, #2
    4a5a:	17d3      	asrs	r3, r2, #31
    4a5c:	1acb      	subs	r3, r1, r3
    4a5e:	61fb      	str	r3, [r7, #28]
    {
        vPrintString("0\n\r");
    }
    else
    {
        while( num )
    4a60:	69fb      	ldr	r3, [r7, #28]
    4a62:	2b00      	cmp	r3, #0
    4a64:	d1d7      	bne.n	4a16 <vPrintNumber+0x26>
        {
            time[count] = num%10 +'0';
            count ++;
            num /= 10;
        }
        time[count] = '\0';
    4a66:	f107 020c 	add.w	r2, r7, #12
    4a6a:	6a3b      	ldr	r3, [r7, #32]
    4a6c:	4413      	add	r3, r2
    4a6e:	2200      	movs	r2, #0
    4a70:	701a      	strb	r2, [r3, #0]
        for( i = 0; i < count/2; ++i  )
    4a72:	2300      	movs	r3, #0
    4a74:	627b      	str	r3, [r7, #36]	; 0x24
    4a76:	e020      	b.n	4aba <vPrintNumber+0xca>
        {
            tmp = time[i];
    4a78:	f107 020c 	add.w	r2, r7, #12
    4a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4a7e:	4413      	add	r3, r2
    4a80:	781b      	ldrb	r3, [r3, #0]
    4a82:	76fb      	strb	r3, [r7, #27]
            time[i] = time[count-1-i];
    4a84:	6a3a      	ldr	r2, [r7, #32]
    4a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4a88:	1ad3      	subs	r3, r2, r3
    4a8a:	3b01      	subs	r3, #1
    4a8c:	f107 0228 	add.w	r2, r7, #40	; 0x28
    4a90:	4413      	add	r3, r2
    4a92:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
    4a96:	f107 010c 	add.w	r1, r7, #12
    4a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4a9c:	440b      	add	r3, r1
    4a9e:	701a      	strb	r2, [r3, #0]
            time[count-1-i] = tmp;
    4aa0:	6a3a      	ldr	r2, [r7, #32]
    4aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4aa4:	1ad3      	subs	r3, r2, r3
    4aa6:	3b01      	subs	r3, #1
    4aa8:	f107 0128 	add.w	r1, r7, #40	; 0x28
    4aac:	440b      	add	r3, r1
    4aae:	7efa      	ldrb	r2, [r7, #27]
    4ab0:	f803 2c1c 	strb.w	r2, [r3, #-28]
            time[count] = num%10 +'0';
            count ++;
            num /= 10;
        }
        time[count] = '\0';
        for( i = 0; i < count/2; ++i  )
    4ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4ab6:	3301      	adds	r3, #1
    4ab8:	627b      	str	r3, [r7, #36]	; 0x24
    4aba:	6a3b      	ldr	r3, [r7, #32]
    4abc:	085a      	lsrs	r2, r3, #1
    4abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4ac0:	429a      	cmp	r2, r3
    4ac2:	d8d9      	bhi.n	4a78 <vPrintNumber+0x88>
        {
            tmp = time[i];
            time[i] = time[count-1-i];
            time[count-1-i] = tmp;
        }
        vPrintString(time);
    4ac4:	f107 030c 	add.w	r3, r7, #12
    4ac8:	4618      	mov	r0, r3
    4aca:	f7ff ff77 	bl	49bc <vPrintString>
        vPrintString("\n\r");
    4ace:	f245 6008 	movw	r0, #22024	; 0x5608
    4ad2:	f2c0 0000 	movt	r0, #0
    4ad6:	f7ff ff71 	bl	49bc <vPrintString>
    }
}
    4ada:	3728      	adds	r7, #40	; 0x28
    4adc:	46bd      	mov	sp, r7
    4ade:	bd80      	pop	{r7, pc}

00004ae0 <receive_byte>:


char receive_byte()
{
    4ae0:	b580      	push	{r7, lr}
    4ae2:	b082      	sub	sp, #8
    4ae4:	af00      	add	r7, sp, #0
	serial_ch_msg msg;

	/* Wait for a byte to be queued by the receive interrupts handler. */
	while (!xQueueReceive(serial_rx_queue, &msg, portMAX_DELAY));
    4ae6:	bf00      	nop
    4ae8:	f244 53c0 	movw	r3, #17856	; 0x45c0
    4aec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4af0:	681a      	ldr	r2, [r3, #0]
    4af2:	1d3b      	adds	r3, r7, #4
    4af4:	4610      	mov	r0, r2
    4af6:	4619      	mov	r1, r3
    4af8:	f04f 32ff 	mov.w	r2, #4294967295
    4afc:	2300      	movs	r3, #0
    4afe:	f7fe f959 	bl	2db4 <xQueueGenericReceive>
    4b02:	4603      	mov	r3, r0
    4b04:	2b00      	cmp	r3, #0
    4b06:	d0ef      	beq.n	4ae8 <receive_byte+0x8>

	return msg.ch;
    4b08:	793b      	ldrb	r3, [r7, #4]
}
    4b0a:	4618      	mov	r0, r3
    4b0c:	3708      	adds	r7, #8
    4b0e:	46bd      	mov	sp, r7
    4b10:	bd80      	pop	{r7, pc}
    4b12:	bf00      	nop

00004b14 <led_flash_task>:

void led_flash_task(void *pvParameters)
{
    4b14:	b580      	push	{r7, lr}
    4b16:	b084      	sub	sp, #16
    4b18:	af00      	add	r7, sp, #0
    4b1a:	6078      	str	r0, [r7, #4]
    portTickType xCurrentTime;
	while (1) {
        xCurrentTime = xTaskGetTickCount();
    4b1c:	f7ff f800 	bl	3b20 <xTaskGetTickCount>
    4b20:	60f8      	str	r0, [r7, #12]
        vPrintNumber(xCurrentTime);
    4b22:	68fb      	ldr	r3, [r7, #12]
    4b24:	4618      	mov	r0, r3
    4b26:	f7ff ff63 	bl	49f0 <vPrintNumber>
		/* Toggle the LED. */
		GPIOC->ODR = GPIOC->ODR ^ 0x00001000;
    4b2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    4b2e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    4b32:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    4b36:	f2c4 0201 	movt	r2, #16385	; 0x4001
    4b3a:	68d2      	ldr	r2, [r2, #12]
    4b3c:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
    4b40:	60da      	str	r2, [r3, #12]

		/* Wait one second. */
		vTaskDelay(100);
    4b42:	2064      	movs	r0, #100	; 0x64
    4b44:	f7fe fd00 	bl	3548 <vTaskDelay>
        xCurrentTime = xTaskGetTickCount();
    4b48:	f7fe ffea 	bl	3b20 <xTaskGetTickCount>
    4b4c:	60f8      	str	r0, [r7, #12]
        vPrintNumber(xCurrentTime);
    4b4e:	68fb      	ldr	r3, [r7, #12]
    4b50:	4618      	mov	r0, r3
    4b52:	f7ff ff4d 	bl	49f0 <vPrintNumber>
	}
    4b56:	e7e1      	b.n	4b1c <led_flash_task+0x8>

00004b58 <rs232_xmit_msg_task>:
}

void rs232_xmit_msg_task(void *pvParameters)
{
    4b58:	b580      	push	{r7, lr}
    4b5a:	b09c      	sub	sp, #112	; 0x70
    4b5c:	af00      	add	r7, sp, #0
    4b5e:	6078      	str	r0, [r7, #4]

	while (1) {
		/* Read from the queue.  Keep trying until a message is
		 * received.  This will block for a period of time (specified
		 * by portMAX_DELAY). */
		while (!xQueueReceive(serial_str_queue, &msg, portMAX_DELAY));
    4b60:	bf00      	nop
    4b62:	f244 53b8 	movw	r3, #17848	; 0x45b8
    4b66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b6a:	681a      	ldr	r2, [r3, #0]
    4b6c:	f107 0308 	add.w	r3, r7, #8
    4b70:	4610      	mov	r0, r2
    4b72:	4619      	mov	r1, r3
    4b74:	f04f 32ff 	mov.w	r2, #4294967295
    4b78:	2300      	movs	r3, #0
    4b7a:	f7fe f91b 	bl	2db4 <xQueueGenericReceive>
    4b7e:	4603      	mov	r3, r0
    4b80:	2b00      	cmp	r3, #0
    4b82:	d0ee      	beq.n	4b62 <rs232_xmit_msg_task+0xa>

		/* Write each character of the message to the RS232 port. */
		curr_char = 0;
    4b84:	2300      	movs	r3, #0
    4b86:	66fb      	str	r3, [r7, #108]	; 0x6c
		while (msg.str[curr_char] != '\0') {
    4b88:	e00a      	b.n	4ba0 <rs232_xmit_msg_task+0x48>
			send_byte(msg.str[curr_char]);
    4b8a:	f107 0208 	add.w	r2, r7, #8
    4b8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    4b90:	4413      	add	r3, r2
    4b92:	781b      	ldrb	r3, [r3, #0]
    4b94:	4618      	mov	r0, r3
    4b96:	f7ff fee7 	bl	4968 <send_byte>
			curr_char++;
    4b9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    4b9c:	3301      	adds	r3, #1
    4b9e:	66fb      	str	r3, [r7, #108]	; 0x6c
		 * by portMAX_DELAY). */
		while (!xQueueReceive(serial_str_queue, &msg, portMAX_DELAY));

		/* Write each character of the message to the RS232 port. */
		curr_char = 0;
		while (msg.str[curr_char] != '\0') {
    4ba0:	f107 0208 	add.w	r2, r7, #8
    4ba4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    4ba6:	4413      	add	r3, r2
    4ba8:	781b      	ldrb	r3, [r3, #0]
    4baa:	2b00      	cmp	r3, #0
    4bac:	d1ed      	bne.n	4b8a <rs232_xmit_msg_task+0x32>
			send_byte(msg.str[curr_char]);
			curr_char++;
		}
	}
    4bae:	bf00      	nop

	while (1) {
		/* Read from the queue.  Keep trying until a message is
		 * received.  This will block for a period of time (specified
		 * by portMAX_DELAY). */
		while (!xQueueReceive(serial_str_queue, &msg, portMAX_DELAY));
    4bb0:	e7d6      	b.n	4b60 <rs232_xmit_msg_task+0x8>
    4bb2:	bf00      	nop

00004bb4 <queue_str_task>:
/* Repeatedly queues a string to be sent to the RS232.
 *   delay - the time to wait between sending messages.  A delay of 1 means
 *           wait 1/100th of a second.
 */
void queue_str_task(const char *str, int delay)
{
    4bb4:	b580      	push	{r7, lr}
    4bb6:	b09c      	sub	sp, #112	; 0x70
    4bb8:	af00      	add	r7, sp, #0
    4bba:	6078      	str	r0, [r7, #4]
    4bbc:	6039      	str	r1, [r7, #0]
	serial_str_msg msg;

	/* Prepare the message to be queued. */
	strcpy(msg.str, str);
    4bbe:	f107 030c 	add.w	r3, r7, #12
    4bc2:	4618      	mov	r0, r3
    4bc4:	6879      	ldr	r1, [r7, #4]
    4bc6:	f000 fc61 	bl	548c <strcpy>

	while (1) {
		/* Post the message.  Keep on trying until it is successful. */
		while (!xQueueSendToBack(serial_str_queue, &msg,
    4bca:	bf00      	nop
    4bcc:	f244 53b8 	movw	r3, #17848	; 0x45b8
    4bd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bd4:	681a      	ldr	r2, [r3, #0]
    4bd6:	f107 030c 	add.w	r3, r7, #12
    4bda:	4610      	mov	r0, r2
    4bdc:	4619      	mov	r1, r3
    4bde:	f04f 32ff 	mov.w	r2, #4294967295
    4be2:	2300      	movs	r3, #0
    4be4:	f7fe f820 	bl	2c28 <xQueueGenericSend>
    4be8:	4603      	mov	r3, r0
    4bea:	2b00      	cmp	r3, #0
    4bec:	d0ee      	beq.n	4bcc <queue_str_task+0x18>
		       portMAX_DELAY));

		/* Wait. */
		vTaskDelay(delay);
    4bee:	683b      	ldr	r3, [r7, #0]
    4bf0:	4618      	mov	r0, r3
    4bf2:	f7fe fca9 	bl	3548 <vTaskDelay>
	}
    4bf6:	bf00      	nop
	/* Prepare the message to be queued. */
	strcpy(msg.str, str);

	while (1) {
		/* Post the message.  Keep on trying until it is successful. */
		while (!xQueueSendToBack(serial_str_queue, &msg,
    4bf8:	e7e7      	b.n	4bca <queue_str_task+0x16>
    4bfa:	bf00      	nop

00004bfc <queue_str_task1>:
		vTaskDelay(delay);
	}
}

void queue_str_task1(void *pvParameters)
{
    4bfc:	b480      	push	{r7}
    4bfe:	b083      	sub	sp, #12
    4c00:	af00      	add	r7, sp, #0
    4c02:	6078      	str	r0, [r7, #4]
	//queue_str_task("Hello 1\n", 200);
}
    4c04:	370c      	adds	r7, #12
    4c06:	46bd      	mov	sp, r7
    4c08:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c0c:	4770      	bx	lr
    4c0e:	bf00      	nop

00004c10 <queue_str_task2>:

void queue_str_task2(void *pvParameters)
{
    4c10:	b480      	push	{r7}
    4c12:	b083      	sub	sp, #12
    4c14:	af00      	add	r7, sp, #0
    4c16:	6078      	str	r0, [r7, #4]
	//queue_str_task("Hello 2\n", 50);
}
    4c18:	370c      	adds	r7, #12
    4c1a:	46bd      	mov	sp, r7
    4c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c20:	4770      	bx	lr
    4c22:	bf00      	nop

00004c24 <serial_readwrite_task>:

void serial_readwrite_task(void *pvParameters)
{
    4c24:	b580      	push	{r7, lr}
    4c26:	b09e      	sub	sp, #120	; 0x78
    4c28:	af00      	add	r7, sp, #0
    4c2a:	6078      	str	r0, [r7, #4]
	char ch;
	int curr_char;
	int done;

	/* Prepare the response message to be queued. */
	strcpy(msg.str, "Got:");
    4c2c:	f107 0308 	add.w	r3, r7, #8
    4c30:	f245 620c 	movw	r2, #22028	; 0x560c
    4c34:	f2c0 0200 	movt	r2, #0
    4c38:	e892 0003 	ldmia.w	r2, {r0, r1}
    4c3c:	6018      	str	r0, [r3, #0]
    4c3e:	3304      	adds	r3, #4
    4c40:	7019      	strb	r1, [r3, #0]

	while (1) {
		curr_char = 4;
    4c42:	2304      	movs	r3, #4
    4c44:	677b      	str	r3, [r7, #116]	; 0x74
		done = 0;
    4c46:	2300      	movs	r3, #0
    4c48:	673b      	str	r3, [r7, #112]	; 0x70
		do {
			/* Receive a byte from the RS232 port (this call will
			 * block). */
			ch = receive_byte();
    4c4a:	f7ff ff49 	bl	4ae0 <receive_byte>
    4c4e:	4603      	mov	r3, r0
    4c50:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

			/* If the byte is an end-of-line type character, then
			 * finish the string and inidcate we are done.
			 */
			if ((ch == '\r') || (ch == '\n')) {
    4c54:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
    4c58:	2b0d      	cmp	r3, #13
    4c5a:	d003      	beq.n	4c64 <serial_readwrite_task+0x40>
    4c5c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
    4c60:	2b0a      	cmp	r3, #10
    4c62:	d111      	bne.n	4c88 <serial_readwrite_task+0x64>
				msg.str[curr_char] = '\n';
    4c64:	f107 0208 	add.w	r2, r7, #8
    4c68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    4c6a:	4413      	add	r3, r2
    4c6c:	220a      	movs	r2, #10
    4c6e:	701a      	strb	r2, [r3, #0]
				msg.str[curr_char+1] = '\0';
    4c70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    4c72:	3301      	adds	r3, #1
    4c74:	f107 0278 	add.w	r2, r7, #120	; 0x78
    4c78:	4413      	add	r3, r2
    4c7a:	2200      	movs	r2, #0
    4c7c:	f803 2c70 	strb.w	r2, [r3, #-112]
				done = -1;
    4c80:	f04f 33ff 	mov.w	r3, #4294967295
    4c84:	673b      	str	r3, [r7, #112]	; 0x70
    4c86:	e009      	b.n	4c9c <serial_readwrite_task+0x78>
				/* Otherwise, add the character to the
				 * response string. */
			}
			else {
				msg.str[curr_char++] = ch;
    4c88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    4c8a:	1c5a      	adds	r2, r3, #1
    4c8c:	677a      	str	r2, [r7, #116]	; 0x74
    4c8e:	f107 0278 	add.w	r2, r7, #120	; 0x78
    4c92:	4413      	add	r3, r2
    4c94:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
    4c98:	f803 2c70 	strb.w	r2, [r3, #-112]
			}
		} while (!done);
    4c9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    4c9e:	2b00      	cmp	r3, #0
    4ca0:	d0d3      	beq.n	4c4a <serial_readwrite_task+0x26>

		/* Once we are done building the response string, queue the
		 * response to be sent to the RS232 port.
		 */
		while (!xQueueSendToBack(serial_str_queue, &msg,
    4ca2:	bf00      	nop
    4ca4:	f244 53b8 	movw	r3, #17848	; 0x45b8
    4ca8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cac:	681a      	ldr	r2, [r3, #0]
    4cae:	f107 0308 	add.w	r3, r7, #8
    4cb2:	4610      	mov	r0, r2
    4cb4:	4619      	mov	r1, r3
    4cb6:	f04f 32ff 	mov.w	r2, #4294967295
    4cba:	2300      	movs	r3, #0
    4cbc:	f7fd ffb4 	bl	2c28 <xQueueGenericSend>
    4cc0:	4603      	mov	r3, r0
    4cc2:	2b00      	cmp	r3, #0
    4cc4:	d0ee      	beq.n	4ca4 <serial_readwrite_task+0x80>
		                         portMAX_DELAY));
	}
    4cc6:	e7bc      	b.n	4c42 <serial_readwrite_task+0x1e>

00004cc8 <main>:
}

int main()
{
    4cc8:	b580      	push	{r7, lr}
    4cca:	b084      	sub	sp, #16
    4ccc:	af04      	add	r7, sp, #16
	init_led();
    4cce:	f7ff fd1d 	bl	470c <init_led>

	init_button();
    4cd2:	f7ff fd3d 	bl	4750 <init_button>
	enable_button_interrupts();
    4cd6:	f7ff fd53 	bl	4780 <enable_button_interrupts>

	init_rs232();
    4cda:	f7ff fd79 	bl	47d0 <init_rs232>
	enable_rs232_interrupts();
    4cde:	f7ff fdbd 	bl	485c <enable_rs232_interrupts>
	enable_rs232();
    4ce2:	f7ff fddd 	bl	48a0 <enable_rs232>

	/* Create the queue used by the serial task.  Messages for write to
	 * the RS232. */
	serial_str_queue = xQueueCreate(10, sizeof(serial_str_msg));
    4ce6:	200a      	movs	r0, #10
    4ce8:	2164      	movs	r1, #100	; 0x64
    4cea:	2200      	movs	r2, #0
    4cec:	f7fd ff0e 	bl	2b0c <xQueueGenericCreate>
    4cf0:	4602      	mov	r2, r0
    4cf2:	f244 53b8 	movw	r3, #17848	; 0x45b8
    4cf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cfa:	601a      	str	r2, [r3, #0]
	vSemaphoreCreateBinary(serial_tx_wait_sem);
    4cfc:	2001      	movs	r0, #1
    4cfe:	2100      	movs	r1, #0
    4d00:	2203      	movs	r2, #3
    4d02:	f7fd ff03 	bl	2b0c <xQueueGenericCreate>
    4d06:	4602      	mov	r2, r0
    4d08:	f244 53bc 	movw	r3, #17852	; 0x45bc
    4d0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d10:	601a      	str	r2, [r3, #0]
    4d12:	f244 53bc 	movw	r3, #17852	; 0x45bc
    4d16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d1a:	681b      	ldr	r3, [r3, #0]
    4d1c:	2b00      	cmp	r3, #0
    4d1e:	d00a      	beq.n	4d36 <main+0x6e>
    4d20:	f244 53bc 	movw	r3, #17852	; 0x45bc
    4d24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d28:	681b      	ldr	r3, [r3, #0]
    4d2a:	4618      	mov	r0, r3
    4d2c:	2100      	movs	r1, #0
    4d2e:	2200      	movs	r2, #0
    4d30:	2300      	movs	r3, #0
    4d32:	f7fd ff79 	bl	2c28 <xQueueGenericSend>
	serial_rx_queue = xQueueCreate(1, sizeof(serial_ch_msg));
    4d36:	2001      	movs	r0, #1
    4d38:	2101      	movs	r1, #1
    4d3a:	2200      	movs	r2, #0
    4d3c:	f7fd fee6 	bl	2b0c <xQueueGenericCreate>
    4d40:	4602      	mov	r2, r0
    4d42:	f244 53c0 	movw	r3, #17856	; 0x45c0
    4d46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d4a:	601a      	str	r2, [r3, #0]

	/* Create a task to flash the LED. */
	xTaskCreate(led_flash_task,
    4d4c:	2305      	movs	r3, #5
    4d4e:	9300      	str	r3, [sp, #0]
    4d50:	2300      	movs	r3, #0
    4d52:	9301      	str	r3, [sp, #4]
    4d54:	2300      	movs	r3, #0
    4d56:	9302      	str	r3, [sp, #8]
    4d58:	2300      	movs	r3, #0
    4d5a:	9303      	str	r3, [sp, #12]
    4d5c:	f644 3015 	movw	r0, #19221	; 0x4b15
    4d60:	f2c0 0000 	movt	r0, #0
    4d64:	f245 6114 	movw	r1, #22036	; 0x5614
    4d68:	f2c0 0100 	movt	r1, #0
    4d6c:	f44f 7200 	mov.w	r2, #512	; 0x200
    4d70:	2300      	movs	r3, #0
    4d72:	f7fe fa6b 	bl	324c <xTaskGenericCreate>
				/*(signed portCHAR *) "Serial Read/Write",*/
				/*512 [> stack size <], NULL,*/
				/*tskIDLE_PRIORITY + 10, NULL);*/

	/* Start running the tasks. */
	vTaskStartScheduler();
    4d76:	f7fe fde7 	bl	3948 <vTaskStartScheduler>

	return 0;
    4d7a:	2300      	movs	r3, #0
}
    4d7c:	4618      	mov	r0, r3
    4d7e:	46bd      	mov	sp, r7
    4d80:	bd80      	pop	{r7, pc}
    4d82:	bf00      	nop

00004d84 <myTraceCreate>:

void myTraceCreate      (){
    4d84:	b480      	push	{r7}
    4d86:	af00      	add	r7, sp, #0
}
    4d88:	46bd      	mov	sp, r7
    4d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d8e:	4770      	bx	lr

00004d90 <myTraceSwitchedIn>:

void myTraceSwitchedIn  (){
    4d90:	b480      	push	{r7}
    4d92:	af00      	add	r7, sp, #0
}
    4d94:	46bd      	mov	sp, r7
    4d96:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d9a:	4770      	bx	lr

00004d9c <myTraceSwitchedOut>:

void myTraceSwitchedOut	(){
    4d9c:	b480      	push	{r7}
    4d9e:	af00      	add	r7, sp, #0
}
    4da0:	46bd      	mov	sp, r7
    4da2:	f85d 7b04 	ldr.w	r7, [sp], #4
    4da6:	4770      	bx	lr

00004da8 <myTraceGetTick>:

inline float myTraceGetTick(){
    4da8:	b598      	push	{r3, r4, r7, lr}
    4daa:	af00      	add	r7, sp, #0
	// 0xE000E014 -> Systick reload value
	// 0xE000E018 -> Systick current value
	return ((float)((*(unsigned long *)0xE000E014)-(*(unsigned long *)0xE000E018)))/(*(unsigned long *)0xE000E014);
    4dac:	f24e 0314 	movw	r3, #57364	; 0xe014
    4db0:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4db4:	681a      	ldr	r2, [r3, #0]
    4db6:	f24e 0318 	movw	r3, #57368	; 0xe018
    4dba:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4dbe:	681b      	ldr	r3, [r3, #0]
    4dc0:	1ad3      	subs	r3, r2, r3
    4dc2:	4618      	mov	r0, r3
    4dc4:	f000 f8f6 	bl	4fb4 <__aeabi_ui2f>
    4dc8:	4604      	mov	r4, r0
    4dca:	f24e 0314 	movw	r3, #57364	; 0xe014
    4dce:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4dd2:	681b      	ldr	r3, [r3, #0]
    4dd4:	4618      	mov	r0, r3
    4dd6:	f000 f8ed 	bl	4fb4 <__aeabi_ui2f>
    4dda:	4603      	mov	r3, r0
    4ddc:	4620      	mov	r0, r4
    4dde:	4619      	mov	r1, r3
    4de0:	f000 f9f4 	bl	51cc <__aeabi_fdiv>
    4de4:	4603      	mov	r3, r0
}
    4de6:	4618      	mov	r0, r3
    4de8:	bd98      	pop	{r3, r4, r7, pc}
    4dea:	bf00      	nop

00004dec <myTraceGetTimeMillisecond>:

inline unsigned long myTraceGetTimeMillisecond(){
    4dec:	b598      	push	{r3, r4, r7, lr}
    4dee:	af00      	add	r7, sp, #0
	return (xTaskGetTickCountFromISR() + myTraceGetTick()) * 1000 / configTICK_RATE_HZ;
    4df0:	f7fe fea8 	bl	3b44 <xTaskGetTickCountFromISR>
    4df4:	4603      	mov	r3, r0
    4df6:	4618      	mov	r0, r3
    4df8:	f000 f8dc 	bl	4fb4 <__aeabi_ui2f>
    4dfc:	4604      	mov	r4, r0
    4dfe:	f7ff ffd3 	bl	4da8 <myTraceGetTick>
    4e02:	4603      	mov	r3, r0
    4e04:	4620      	mov	r0, r4
    4e06:	4619      	mov	r1, r3
    4e08:	f000 f824 	bl	4e54 <__addsf3>
    4e0c:	4603      	mov	r3, r0
    4e0e:	4618      	mov	r0, r3
    4e10:	f04f 0100 	mov.w	r1, #0
    4e14:	f2c4 417a 	movt	r1, #17530	; 0x447a
    4e18:	f000 f924 	bl	5064 <__aeabi_fmul>
    4e1c:	4603      	mov	r3, r0
    4e1e:	4618      	mov	r0, r3
    4e20:	f04f 0100 	mov.w	r1, #0
    4e24:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
    4e28:	f000 f9d0 	bl	51cc <__aeabi_fdiv>
    4e2c:	4603      	mov	r3, r0
    4e2e:	4618      	mov	r0, r3
    4e30:	f000 fa68 	bl	5304 <__aeabi_f2uiz>
    4e34:	4603      	mov	r3, r0
}
    4e36:	4618      	mov	r0, r3
    4e38:	bd98      	pop	{r3, r4, r7, pc}
    4e3a:	bf00      	nop

00004e3c <vApplicationTickHook>:

void vApplicationTickHook()
{
    4e3c:	b480      	push	{r7}
    4e3e:	af00      	add	r7, sp, #0
}
    4e40:	46bd      	mov	sp, r7
    4e42:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e46:	4770      	bx	lr

00004e48 <__aeabi_frsub>:
    4e48:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    4e4c:	e002      	b.n	4e54 <__addsf3>
    4e4e:	bf00      	nop

00004e50 <__aeabi_fsub>:
    4e50:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00004e54 <__addsf3>:
    4e54:	0042      	lsls	r2, r0, #1
    4e56:	bf1f      	itttt	ne
    4e58:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    4e5c:	ea92 0f03 	teqne	r2, r3
    4e60:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    4e64:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    4e68:	d06a      	beq.n	4f40 <__addsf3+0xec>
    4e6a:	ea4f 6212 	mov.w	r2, r2, lsr #24
    4e6e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    4e72:	bfc1      	itttt	gt
    4e74:	18d2      	addgt	r2, r2, r3
    4e76:	4041      	eorgt	r1, r0
    4e78:	4048      	eorgt	r0, r1
    4e7a:	4041      	eorgt	r1, r0
    4e7c:	bfb8      	it	lt
    4e7e:	425b      	neglt	r3, r3
    4e80:	2b19      	cmp	r3, #25
    4e82:	bf88      	it	hi
    4e84:	4770      	bxhi	lr
    4e86:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    4e8a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    4e8e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    4e92:	bf18      	it	ne
    4e94:	4240      	negne	r0, r0
    4e96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    4e9a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    4e9e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    4ea2:	bf18      	it	ne
    4ea4:	4249      	negne	r1, r1
    4ea6:	ea92 0f03 	teq	r2, r3
    4eaa:	d03f      	beq.n	4f2c <__addsf3+0xd8>
    4eac:	f1a2 0201 	sub.w	r2, r2, #1
    4eb0:	fa41 fc03 	asr.w	ip, r1, r3
    4eb4:	eb10 000c 	adds.w	r0, r0, ip
    4eb8:	f1c3 0320 	rsb	r3, r3, #32
    4ebc:	fa01 f103 	lsl.w	r1, r1, r3
    4ec0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    4ec4:	d502      	bpl.n	4ecc <__addsf3+0x78>
    4ec6:	4249      	negs	r1, r1
    4ec8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    4ecc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    4ed0:	d313      	bcc.n	4efa <__addsf3+0xa6>
    4ed2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    4ed6:	d306      	bcc.n	4ee6 <__addsf3+0x92>
    4ed8:	0840      	lsrs	r0, r0, #1
    4eda:	ea4f 0131 	mov.w	r1, r1, rrx
    4ede:	f102 0201 	add.w	r2, r2, #1
    4ee2:	2afe      	cmp	r2, #254	; 0xfe
    4ee4:	d251      	bcs.n	4f8a <__addsf3+0x136>
    4ee6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    4eea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    4eee:	bf08      	it	eq
    4ef0:	f020 0001 	biceq.w	r0, r0, #1
    4ef4:	ea40 0003 	orr.w	r0, r0, r3
    4ef8:	4770      	bx	lr
    4efa:	0049      	lsls	r1, r1, #1
    4efc:	eb40 0000 	adc.w	r0, r0, r0
    4f00:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    4f04:	f1a2 0201 	sub.w	r2, r2, #1
    4f08:	d1ed      	bne.n	4ee6 <__addsf3+0x92>
    4f0a:	fab0 fc80 	clz	ip, r0
    4f0e:	f1ac 0c08 	sub.w	ip, ip, #8
    4f12:	ebb2 020c 	subs.w	r2, r2, ip
    4f16:	fa00 f00c 	lsl.w	r0, r0, ip
    4f1a:	bfaa      	itet	ge
    4f1c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    4f20:	4252      	neglt	r2, r2
    4f22:	4318      	orrge	r0, r3
    4f24:	bfbc      	itt	lt
    4f26:	40d0      	lsrlt	r0, r2
    4f28:	4318      	orrlt	r0, r3
    4f2a:	4770      	bx	lr
    4f2c:	f092 0f00 	teq	r2, #0
    4f30:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    4f34:	bf06      	itte	eq
    4f36:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    4f3a:	3201      	addeq	r2, #1
    4f3c:	3b01      	subne	r3, #1
    4f3e:	e7b5      	b.n	4eac <__addsf3+0x58>
    4f40:	ea4f 0341 	mov.w	r3, r1, lsl #1
    4f44:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    4f48:	bf18      	it	ne
    4f4a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    4f4e:	d021      	beq.n	4f94 <__addsf3+0x140>
    4f50:	ea92 0f03 	teq	r2, r3
    4f54:	d004      	beq.n	4f60 <__addsf3+0x10c>
    4f56:	f092 0f00 	teq	r2, #0
    4f5a:	bf08      	it	eq
    4f5c:	4608      	moveq	r0, r1
    4f5e:	4770      	bx	lr
    4f60:	ea90 0f01 	teq	r0, r1
    4f64:	bf1c      	itt	ne
    4f66:	2000      	movne	r0, #0
    4f68:	4770      	bxne	lr
    4f6a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    4f6e:	d104      	bne.n	4f7a <__addsf3+0x126>
    4f70:	0040      	lsls	r0, r0, #1
    4f72:	bf28      	it	cs
    4f74:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    4f78:	4770      	bx	lr
    4f7a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    4f7e:	bf3c      	itt	cc
    4f80:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    4f84:	4770      	bxcc	lr
    4f86:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    4f8a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    4f8e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    4f92:	4770      	bx	lr
    4f94:	ea7f 6222 	mvns.w	r2, r2, asr #24
    4f98:	bf16      	itet	ne
    4f9a:	4608      	movne	r0, r1
    4f9c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    4fa0:	4601      	movne	r1, r0
    4fa2:	0242      	lsls	r2, r0, #9
    4fa4:	bf06      	itte	eq
    4fa6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    4faa:	ea90 0f01 	teqeq	r0, r1
    4fae:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    4fb2:	4770      	bx	lr

00004fb4 <__aeabi_ui2f>:
    4fb4:	f04f 0300 	mov.w	r3, #0
    4fb8:	e004      	b.n	4fc4 <__aeabi_i2f+0x8>
    4fba:	bf00      	nop

00004fbc <__aeabi_i2f>:
    4fbc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    4fc0:	bf48      	it	mi
    4fc2:	4240      	negmi	r0, r0
    4fc4:	ea5f 0c00 	movs.w	ip, r0
    4fc8:	bf08      	it	eq
    4fca:	4770      	bxeq	lr
    4fcc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    4fd0:	4601      	mov	r1, r0
    4fd2:	f04f 0000 	mov.w	r0, #0
    4fd6:	e01c      	b.n	5012 <__aeabi_l2f+0x2a>

00004fd8 <__aeabi_ul2f>:
    4fd8:	ea50 0201 	orrs.w	r2, r0, r1
    4fdc:	bf08      	it	eq
    4fde:	4770      	bxeq	lr
    4fe0:	f04f 0300 	mov.w	r3, #0
    4fe4:	e00a      	b.n	4ffc <__aeabi_l2f+0x14>
    4fe6:	bf00      	nop

00004fe8 <__aeabi_l2f>:
    4fe8:	ea50 0201 	orrs.w	r2, r0, r1
    4fec:	bf08      	it	eq
    4fee:	4770      	bxeq	lr
    4ff0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    4ff4:	d502      	bpl.n	4ffc <__aeabi_l2f+0x14>
    4ff6:	4240      	negs	r0, r0
    4ff8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    4ffc:	ea5f 0c01 	movs.w	ip, r1
    5000:	bf02      	ittt	eq
    5002:	4684      	moveq	ip, r0
    5004:	4601      	moveq	r1, r0
    5006:	2000      	moveq	r0, #0
    5008:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    500c:	bf08      	it	eq
    500e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    5012:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    5016:	fabc f28c 	clz	r2, ip
    501a:	3a08      	subs	r2, #8
    501c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    5020:	db10      	blt.n	5044 <__aeabi_l2f+0x5c>
    5022:	fa01 fc02 	lsl.w	ip, r1, r2
    5026:	4463      	add	r3, ip
    5028:	fa00 fc02 	lsl.w	ip, r0, r2
    502c:	f1c2 0220 	rsb	r2, r2, #32
    5030:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    5034:	fa20 f202 	lsr.w	r2, r0, r2
    5038:	eb43 0002 	adc.w	r0, r3, r2
    503c:	bf08      	it	eq
    503e:	f020 0001 	biceq.w	r0, r0, #1
    5042:	4770      	bx	lr
    5044:	f102 0220 	add.w	r2, r2, #32
    5048:	fa01 fc02 	lsl.w	ip, r1, r2
    504c:	f1c2 0220 	rsb	r2, r2, #32
    5050:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    5054:	fa21 f202 	lsr.w	r2, r1, r2
    5058:	eb43 0002 	adc.w	r0, r3, r2
    505c:	bf08      	it	eq
    505e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    5062:	4770      	bx	lr

00005064 <__aeabi_fmul>:
    5064:	f04f 0cff 	mov.w	ip, #255	; 0xff
    5068:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    506c:	bf1e      	ittt	ne
    506e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    5072:	ea92 0f0c 	teqne	r2, ip
    5076:	ea93 0f0c 	teqne	r3, ip
    507a:	d06f      	beq.n	515c <__aeabi_fmul+0xf8>
    507c:	441a      	add	r2, r3
    507e:	ea80 0c01 	eor.w	ip, r0, r1
    5082:	0240      	lsls	r0, r0, #9
    5084:	bf18      	it	ne
    5086:	ea5f 2141 	movsne.w	r1, r1, lsl #9
    508a:	d01e      	beq.n	50ca <__aeabi_fmul+0x66>
    508c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    5090:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
    5094:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
    5098:	fba0 3101 	umull	r3, r1, r0, r1
    509c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    50a0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    50a4:	bf3e      	ittt	cc
    50a6:	0049      	lslcc	r1, r1, #1
    50a8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
    50ac:	005b      	lslcc	r3, r3, #1
    50ae:	ea40 0001 	orr.w	r0, r0, r1
    50b2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
    50b6:	2afd      	cmp	r2, #253	; 0xfd
    50b8:	d81d      	bhi.n	50f6 <__aeabi_fmul+0x92>
    50ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    50be:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    50c2:	bf08      	it	eq
    50c4:	f020 0001 	biceq.w	r0, r0, #1
    50c8:	4770      	bx	lr
    50ca:	f090 0f00 	teq	r0, #0
    50ce:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    50d2:	bf08      	it	eq
    50d4:	0249      	lsleq	r1, r1, #9
    50d6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    50da:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
    50de:	3a7f      	subs	r2, #127	; 0x7f
    50e0:	bfc2      	ittt	gt
    50e2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    50e6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    50ea:	4770      	bxgt	lr
    50ec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    50f0:	f04f 0300 	mov.w	r3, #0
    50f4:	3a01      	subs	r2, #1
    50f6:	dc5d      	bgt.n	51b4 <__aeabi_fmul+0x150>
    50f8:	f112 0f19 	cmn.w	r2, #25
    50fc:	bfdc      	itt	le
    50fe:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
    5102:	4770      	bxle	lr
    5104:	f1c2 0200 	rsb	r2, r2, #0
    5108:	0041      	lsls	r1, r0, #1
    510a:	fa21 f102 	lsr.w	r1, r1, r2
    510e:	f1c2 0220 	rsb	r2, r2, #32
    5112:	fa00 fc02 	lsl.w	ip, r0, r2
    5116:	ea5f 0031 	movs.w	r0, r1, rrx
    511a:	f140 0000 	adc.w	r0, r0, #0
    511e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
    5122:	bf08      	it	eq
    5124:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    5128:	4770      	bx	lr
    512a:	f092 0f00 	teq	r2, #0
    512e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    5132:	bf02      	ittt	eq
    5134:	0040      	lsleq	r0, r0, #1
    5136:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    513a:	3a01      	subeq	r2, #1
    513c:	d0f9      	beq.n	5132 <__aeabi_fmul+0xce>
    513e:	ea40 000c 	orr.w	r0, r0, ip
    5142:	f093 0f00 	teq	r3, #0
    5146:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    514a:	bf02      	ittt	eq
    514c:	0049      	lsleq	r1, r1, #1
    514e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    5152:	3b01      	subeq	r3, #1
    5154:	d0f9      	beq.n	514a <__aeabi_fmul+0xe6>
    5156:	ea41 010c 	orr.w	r1, r1, ip
    515a:	e78f      	b.n	507c <__aeabi_fmul+0x18>
    515c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    5160:	ea92 0f0c 	teq	r2, ip
    5164:	bf18      	it	ne
    5166:	ea93 0f0c 	teqne	r3, ip
    516a:	d00a      	beq.n	5182 <__aeabi_fmul+0x11e>
    516c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    5170:	bf18      	it	ne
    5172:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    5176:	d1d8      	bne.n	512a <__aeabi_fmul+0xc6>
    5178:	ea80 0001 	eor.w	r0, r0, r1
    517c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    5180:	4770      	bx	lr
    5182:	f090 0f00 	teq	r0, #0
    5186:	bf17      	itett	ne
    5188:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
    518c:	4608      	moveq	r0, r1
    518e:	f091 0f00 	teqne	r1, #0
    5192:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
    5196:	d014      	beq.n	51c2 <__aeabi_fmul+0x15e>
    5198:	ea92 0f0c 	teq	r2, ip
    519c:	d101      	bne.n	51a2 <__aeabi_fmul+0x13e>
    519e:	0242      	lsls	r2, r0, #9
    51a0:	d10f      	bne.n	51c2 <__aeabi_fmul+0x15e>
    51a2:	ea93 0f0c 	teq	r3, ip
    51a6:	d103      	bne.n	51b0 <__aeabi_fmul+0x14c>
    51a8:	024b      	lsls	r3, r1, #9
    51aa:	bf18      	it	ne
    51ac:	4608      	movne	r0, r1
    51ae:	d108      	bne.n	51c2 <__aeabi_fmul+0x15e>
    51b0:	ea80 0001 	eor.w	r0, r0, r1
    51b4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    51b8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    51bc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    51c0:	4770      	bx	lr
    51c2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    51c6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
    51ca:	4770      	bx	lr

000051cc <__aeabi_fdiv>:
    51cc:	f04f 0cff 	mov.w	ip, #255	; 0xff
    51d0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    51d4:	bf1e      	ittt	ne
    51d6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    51da:	ea92 0f0c 	teqne	r2, ip
    51de:	ea93 0f0c 	teqne	r3, ip
    51e2:	d069      	beq.n	52b8 <__aeabi_fdiv+0xec>
    51e4:	eba2 0203 	sub.w	r2, r2, r3
    51e8:	ea80 0c01 	eor.w	ip, r0, r1
    51ec:	0249      	lsls	r1, r1, #9
    51ee:	ea4f 2040 	mov.w	r0, r0, lsl #9
    51f2:	d037      	beq.n	5264 <__aeabi_fdiv+0x98>
    51f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    51f8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
    51fc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
    5200:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    5204:	428b      	cmp	r3, r1
    5206:	bf38      	it	cc
    5208:	005b      	lslcc	r3, r3, #1
    520a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
    520e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
    5212:	428b      	cmp	r3, r1
    5214:	bf24      	itt	cs
    5216:	1a5b      	subcs	r3, r3, r1
    5218:	ea40 000c 	orrcs.w	r0, r0, ip
    521c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
    5220:	bf24      	itt	cs
    5222:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
    5226:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    522a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
    522e:	bf24      	itt	cs
    5230:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
    5234:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    5238:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    523c:	bf24      	itt	cs
    523e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
    5242:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    5246:	011b      	lsls	r3, r3, #4
    5248:	bf18      	it	ne
    524a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
    524e:	d1e0      	bne.n	5212 <__aeabi_fdiv+0x46>
    5250:	2afd      	cmp	r2, #253	; 0xfd
    5252:	f63f af50 	bhi.w	50f6 <__aeabi_fmul+0x92>
    5256:	428b      	cmp	r3, r1
    5258:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    525c:	bf08      	it	eq
    525e:	f020 0001 	biceq.w	r0, r0, #1
    5262:	4770      	bx	lr
    5264:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    5268:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    526c:	327f      	adds	r2, #127	; 0x7f
    526e:	bfc2      	ittt	gt
    5270:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    5274:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    5278:	4770      	bxgt	lr
    527a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    527e:	f04f 0300 	mov.w	r3, #0
    5282:	3a01      	subs	r2, #1
    5284:	e737      	b.n	50f6 <__aeabi_fmul+0x92>
    5286:	f092 0f00 	teq	r2, #0
    528a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    528e:	bf02      	ittt	eq
    5290:	0040      	lsleq	r0, r0, #1
    5292:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    5296:	3a01      	subeq	r2, #1
    5298:	d0f9      	beq.n	528e <__aeabi_fdiv+0xc2>
    529a:	ea40 000c 	orr.w	r0, r0, ip
    529e:	f093 0f00 	teq	r3, #0
    52a2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    52a6:	bf02      	ittt	eq
    52a8:	0049      	lsleq	r1, r1, #1
    52aa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    52ae:	3b01      	subeq	r3, #1
    52b0:	d0f9      	beq.n	52a6 <__aeabi_fdiv+0xda>
    52b2:	ea41 010c 	orr.w	r1, r1, ip
    52b6:	e795      	b.n	51e4 <__aeabi_fdiv+0x18>
    52b8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    52bc:	ea92 0f0c 	teq	r2, ip
    52c0:	d108      	bne.n	52d4 <__aeabi_fdiv+0x108>
    52c2:	0242      	lsls	r2, r0, #9
    52c4:	f47f af7d 	bne.w	51c2 <__aeabi_fmul+0x15e>
    52c8:	ea93 0f0c 	teq	r3, ip
    52cc:	f47f af70 	bne.w	51b0 <__aeabi_fmul+0x14c>
    52d0:	4608      	mov	r0, r1
    52d2:	e776      	b.n	51c2 <__aeabi_fmul+0x15e>
    52d4:	ea93 0f0c 	teq	r3, ip
    52d8:	d104      	bne.n	52e4 <__aeabi_fdiv+0x118>
    52da:	024b      	lsls	r3, r1, #9
    52dc:	f43f af4c 	beq.w	5178 <__aeabi_fmul+0x114>
    52e0:	4608      	mov	r0, r1
    52e2:	e76e      	b.n	51c2 <__aeabi_fmul+0x15e>
    52e4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    52e8:	bf18      	it	ne
    52ea:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    52ee:	d1ca      	bne.n	5286 <__aeabi_fdiv+0xba>
    52f0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
    52f4:	f47f af5c 	bne.w	51b0 <__aeabi_fmul+0x14c>
    52f8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
    52fc:	f47f af3c 	bne.w	5178 <__aeabi_fmul+0x114>
    5300:	e75f      	b.n	51c2 <__aeabi_fmul+0x15e>
    5302:	bf00      	nop

00005304 <__aeabi_f2uiz>:
    5304:	0042      	lsls	r2, r0, #1
    5306:	d20e      	bcs.n	5326 <__aeabi_f2uiz+0x22>
    5308:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    530c:	d30b      	bcc.n	5326 <__aeabi_f2uiz+0x22>
    530e:	f04f 039e 	mov.w	r3, #158	; 0x9e
    5312:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    5316:	d409      	bmi.n	532c <__aeabi_f2uiz+0x28>
    5318:	ea4f 2300 	mov.w	r3, r0, lsl #8
    531c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    5320:	fa23 f002 	lsr.w	r0, r3, r2
    5324:	4770      	bx	lr
    5326:	f04f 0000 	mov.w	r0, #0
    532a:	4770      	bx	lr
    532c:	f112 0f61 	cmn.w	r2, #97	; 0x61
    5330:	d101      	bne.n	5336 <__aeabi_f2uiz+0x32>
    5332:	0242      	lsls	r2, r0, #9
    5334:	d102      	bne.n	533c <__aeabi_f2uiz+0x38>
    5336:	f04f 30ff 	mov.w	r0, #4294967295
    533a:	4770      	bx	lr
    533c:	f04f 0000 	mov.w	r0, #0
    5340:	4770      	bx	lr
    5342:	bf00      	nop

00005344 <memcpy>:
    5344:	2a0f      	cmp	r2, #15
    5346:	b4f0      	push	{r4, r5, r6, r7}
    5348:	d945      	bls.n	53d6 <memcpy+0x92>
    534a:	ea40 0301 	orr.w	r3, r0, r1
    534e:	079b      	lsls	r3, r3, #30
    5350:	d145      	bne.n	53de <memcpy+0x9a>
    5352:	f1a2 0710 	sub.w	r7, r2, #16
    5356:	460c      	mov	r4, r1
    5358:	4603      	mov	r3, r0
    535a:	093f      	lsrs	r7, r7, #4
    535c:	eb00 1607 	add.w	r6, r0, r7, lsl #4
    5360:	3610      	adds	r6, #16
    5362:	6825      	ldr	r5, [r4, #0]
    5364:	3310      	adds	r3, #16
    5366:	3410      	adds	r4, #16
    5368:	f843 5c10 	str.w	r5, [r3, #-16]
    536c:	f854 5c0c 	ldr.w	r5, [r4, #-12]
    5370:	f843 5c0c 	str.w	r5, [r3, #-12]
    5374:	f854 5c08 	ldr.w	r5, [r4, #-8]
    5378:	f843 5c08 	str.w	r5, [r3, #-8]
    537c:	f854 5c04 	ldr.w	r5, [r4, #-4]
    5380:	f843 5c04 	str.w	r5, [r3, #-4]
    5384:	42b3      	cmp	r3, r6
    5386:	d1ec      	bne.n	5362 <memcpy+0x1e>
    5388:	1c7b      	adds	r3, r7, #1
    538a:	f002 0c0f 	and.w	ip, r2, #15
    538e:	f1bc 0f03 	cmp.w	ip, #3
    5392:	ea4f 1303 	mov.w	r3, r3, lsl #4
    5396:	4419      	add	r1, r3
    5398:	4403      	add	r3, r0
    539a:	d922      	bls.n	53e2 <memcpy+0x9e>
    539c:	460e      	mov	r6, r1
    539e:	461d      	mov	r5, r3
    53a0:	4664      	mov	r4, ip
    53a2:	f856 7b04 	ldr.w	r7, [r6], #4
    53a6:	3c04      	subs	r4, #4
    53a8:	2c03      	cmp	r4, #3
    53aa:	f845 7b04 	str.w	r7, [r5], #4
    53ae:	d8f8      	bhi.n	53a2 <memcpy+0x5e>
    53b0:	f1ac 0404 	sub.w	r4, ip, #4
    53b4:	f002 0203 	and.w	r2, r2, #3
    53b8:	f024 0403 	bic.w	r4, r4, #3
    53bc:	3404      	adds	r4, #4
    53be:	4423      	add	r3, r4
    53c0:	4421      	add	r1, r4
    53c2:	b132      	cbz	r2, 53d2 <memcpy+0x8e>
    53c4:	440a      	add	r2, r1
    53c6:	f811 4b01 	ldrb.w	r4, [r1], #1
    53ca:	4291      	cmp	r1, r2
    53cc:	f803 4b01 	strb.w	r4, [r3], #1
    53d0:	d1f9      	bne.n	53c6 <memcpy+0x82>
    53d2:	bcf0      	pop	{r4, r5, r6, r7}
    53d4:	4770      	bx	lr
    53d6:	4603      	mov	r3, r0
    53d8:	2a00      	cmp	r2, #0
    53da:	d1f3      	bne.n	53c4 <memcpy+0x80>
    53dc:	e7f9      	b.n	53d2 <memcpy+0x8e>
    53de:	4603      	mov	r3, r0
    53e0:	e7f0      	b.n	53c4 <memcpy+0x80>
    53e2:	4662      	mov	r2, ip
    53e4:	2a00      	cmp	r2, #0
    53e6:	d1ed      	bne.n	53c4 <memcpy+0x80>
    53e8:	e7f3      	b.n	53d2 <memcpy+0x8e>
    53ea:	bf00      	nop

000053ec <memset>:
    53ec:	0783      	lsls	r3, r0, #30
    53ee:	b4f0      	push	{r4, r5, r6, r7}
    53f0:	d048      	beq.n	5484 <memset+0x98>
    53f2:	1e54      	subs	r4, r2, #1
    53f4:	2a00      	cmp	r2, #0
    53f6:	d043      	beq.n	5480 <memset+0x94>
    53f8:	b2cd      	uxtb	r5, r1
    53fa:	4603      	mov	r3, r0
    53fc:	e002      	b.n	5404 <memset+0x18>
    53fe:	2c00      	cmp	r4, #0
    5400:	d03e      	beq.n	5480 <memset+0x94>
    5402:	4614      	mov	r4, r2
    5404:	f803 5b01 	strb.w	r5, [r3], #1
    5408:	f013 0f03 	tst.w	r3, #3
    540c:	f104 32ff 	add.w	r2, r4, #4294967295
    5410:	d1f5      	bne.n	53fe <memset+0x12>
    5412:	2c03      	cmp	r4, #3
    5414:	d92d      	bls.n	5472 <memset+0x86>
    5416:	b2cd      	uxtb	r5, r1
    5418:	2c0f      	cmp	r4, #15
    541a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    541e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    5422:	d918      	bls.n	5456 <memset+0x6a>
    5424:	f1a4 0710 	sub.w	r7, r4, #16
    5428:	f103 0610 	add.w	r6, r3, #16
    542c:	461a      	mov	r2, r3
    542e:	093f      	lsrs	r7, r7, #4
    5430:	eb06 1607 	add.w	r6, r6, r7, lsl #4
    5434:	6015      	str	r5, [r2, #0]
    5436:	3210      	adds	r2, #16
    5438:	f842 5c0c 	str.w	r5, [r2, #-12]
    543c:	f842 5c08 	str.w	r5, [r2, #-8]
    5440:	f842 5c04 	str.w	r5, [r2, #-4]
    5444:	42b2      	cmp	r2, r6
    5446:	d1f5      	bne.n	5434 <memset+0x48>
    5448:	f004 040f 	and.w	r4, r4, #15
    544c:	3701      	adds	r7, #1
    544e:	2c03      	cmp	r4, #3
    5450:	eb03 1307 	add.w	r3, r3, r7, lsl #4
    5454:	d90d      	bls.n	5472 <memset+0x86>
    5456:	461e      	mov	r6, r3
    5458:	4622      	mov	r2, r4
    545a:	3a04      	subs	r2, #4
    545c:	f846 5b04 	str.w	r5, [r6], #4
    5460:	2a03      	cmp	r2, #3
    5462:	d8fa      	bhi.n	545a <memset+0x6e>
    5464:	1f22      	subs	r2, r4, #4
    5466:	f004 0403 	and.w	r4, r4, #3
    546a:	f022 0203 	bic.w	r2, r2, #3
    546e:	3204      	adds	r2, #4
    5470:	4413      	add	r3, r2
    5472:	b12c      	cbz	r4, 5480 <memset+0x94>
    5474:	b2c9      	uxtb	r1, r1
    5476:	441c      	add	r4, r3
    5478:	f803 1b01 	strb.w	r1, [r3], #1
    547c:	42a3      	cmp	r3, r4
    547e:	d1fb      	bne.n	5478 <memset+0x8c>
    5480:	bcf0      	pop	{r4, r5, r6, r7}
    5482:	4770      	bx	lr
    5484:	4614      	mov	r4, r2
    5486:	4603      	mov	r3, r0
    5488:	e7c3      	b.n	5412 <memset+0x26>
    548a:	bf00      	nop

0000548c <strcpy>:
    548c:	ea80 0201 	eor.w	r2, r0, r1
    5490:	4684      	mov	ip, r0
    5492:	f012 0f03 	tst.w	r2, #3
    5496:	d14f      	bne.n	5538 <strcpy+0xac>
    5498:	f011 0f03 	tst.w	r1, #3
    549c:	d132      	bne.n	5504 <strcpy+0x78>
    549e:	f84d 4d04 	str.w	r4, [sp, #-4]!
    54a2:	f011 0f04 	tst.w	r1, #4
    54a6:	f851 3b04 	ldr.w	r3, [r1], #4
    54aa:	d00b      	beq.n	54c4 <strcpy+0x38>
    54ac:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    54b0:	439a      	bics	r2, r3
    54b2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    54b6:	bf04      	itt	eq
    54b8:	f84c 3b04 	streq.w	r3, [ip], #4
    54bc:	f851 3b04 	ldreq.w	r3, [r1], #4
    54c0:	d116      	bne.n	54f0 <strcpy+0x64>
    54c2:	bf00      	nop
    54c4:	f851 4b04 	ldr.w	r4, [r1], #4
    54c8:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    54cc:	439a      	bics	r2, r3
    54ce:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    54d2:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
    54d6:	d10b      	bne.n	54f0 <strcpy+0x64>
    54d8:	f84c 3b04 	str.w	r3, [ip], #4
    54dc:	43a2      	bics	r2, r4
    54de:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    54e2:	bf04      	itt	eq
    54e4:	f851 3b04 	ldreq.w	r3, [r1], #4
    54e8:	f84c 4b04 	streq.w	r4, [ip], #4
    54ec:	d0ea      	beq.n	54c4 <strcpy+0x38>
    54ee:	4623      	mov	r3, r4
    54f0:	f80c 3b01 	strb.w	r3, [ip], #1
    54f4:	f013 0fff 	tst.w	r3, #255	; 0xff
    54f8:	ea4f 2333 	mov.w	r3, r3, ror #8
    54fc:	d1f8      	bne.n	54f0 <strcpy+0x64>
    54fe:	f85d 4b04 	ldr.w	r4, [sp], #4
    5502:	4770      	bx	lr
    5504:	f011 0f01 	tst.w	r1, #1
    5508:	d006      	beq.n	5518 <strcpy+0x8c>
    550a:	f811 2b01 	ldrb.w	r2, [r1], #1
    550e:	f80c 2b01 	strb.w	r2, [ip], #1
    5512:	2a00      	cmp	r2, #0
    5514:	bf08      	it	eq
    5516:	4770      	bxeq	lr
    5518:	f011 0f02 	tst.w	r1, #2
    551c:	d0bf      	beq.n	549e <strcpy+0x12>
    551e:	f831 2b02 	ldrh.w	r2, [r1], #2
    5522:	f012 0fff 	tst.w	r2, #255	; 0xff
    5526:	bf16      	itet	ne
    5528:	f82c 2b02 	strhne.w	r2, [ip], #2
    552c:	f88c 2000 	strbeq.w	r2, [ip]
    5530:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
    5534:	d1b3      	bne.n	549e <strcpy+0x12>
    5536:	4770      	bx	lr
    5538:	f811 2b01 	ldrb.w	r2, [r1], #1
    553c:	f80c 2b01 	strb.w	r2, [ip], #1
    5540:	2a00      	cmp	r2, #0
    5542:	d1f9      	bne.n	5538 <strcpy+0xac>
    5544:	4770      	bx	lr
    5546:	bf00      	nop

00005548 <strncpy>:
    5548:	ea40 0301 	orr.w	r3, r0, r1
    554c:	079b      	lsls	r3, r3, #30
    554e:	b470      	push	{r4, r5, r6}
    5550:	d12b      	bne.n	55aa <strncpy+0x62>
    5552:	2a03      	cmp	r2, #3
    5554:	bf84      	itt	hi
    5556:	460b      	movhi	r3, r1
    5558:	4605      	movhi	r5, r0
    555a:	d926      	bls.n	55aa <strncpy+0x62>
    555c:	4619      	mov	r1, r3
    555e:	f853 4b04 	ldr.w	r4, [r3], #4
    5562:	f1a4 3601 	sub.w	r6, r4, #16843009	; 0x1010101
    5566:	ea26 0604 	bic.w	r6, r6, r4
    556a:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
    556e:	d105      	bne.n	557c <strncpy+0x34>
    5570:	3a04      	subs	r2, #4
    5572:	f845 4b04 	str.w	r4, [r5], #4
    5576:	2a03      	cmp	r2, #3
    5578:	4619      	mov	r1, r3
    557a:	d8ef      	bhi.n	555c <strncpy+0x14>
    557c:	b19a      	cbz	r2, 55a6 <strncpy+0x5e>
    557e:	780c      	ldrb	r4, [r1, #0]
    5580:	3a01      	subs	r2, #1
    5582:	1c6b      	adds	r3, r5, #1
    5584:	702c      	strb	r4, [r5, #0]
    5586:	b13c      	cbz	r4, 5598 <strncpy+0x50>
    5588:	b16a      	cbz	r2, 55a6 <strncpy+0x5e>
    558a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    558e:	3a01      	subs	r2, #1
    5590:	f803 4b01 	strb.w	r4, [r3], #1
    5594:	2c00      	cmp	r4, #0
    5596:	d1f7      	bne.n	5588 <strncpy+0x40>
    5598:	b12a      	cbz	r2, 55a6 <strncpy+0x5e>
    559a:	441a      	add	r2, r3
    559c:	2100      	movs	r1, #0
    559e:	f803 1b01 	strb.w	r1, [r3], #1
    55a2:	4293      	cmp	r3, r2
    55a4:	d1fb      	bne.n	559e <strncpy+0x56>
    55a6:	bc70      	pop	{r4, r5, r6}
    55a8:	4770      	bx	lr
    55aa:	4605      	mov	r5, r0
    55ac:	e7e6      	b.n	557c <strncpy+0x34>
    55ae:	bf00      	nop

000055b0 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:	

/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
    55b0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
    55b2:	e003      	b.n	55bc <LoopCopyDataInit>

000055b4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
    55b4:	4b0a      	ldr	r3, [pc, #40]	; (55e0 <LoopFillZerobss+0x10>)
	ldr	r3, [r3, r1]
    55b6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
    55b8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
    55ba:	3104      	adds	r1, #4

000055bc <LoopCopyDataInit>:
    
LoopCopyDataInit:
	ldr	r0, =_sdata
    55bc:	4809      	ldr	r0, [pc, #36]	; (55e4 <LoopFillZerobss+0x14>)
	ldr	r3, =_edata
    55be:	4b0a      	ldr	r3, [pc, #40]	; (55e8 <LoopFillZerobss+0x18>)
	adds	r2, r0, r1
    55c0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
    55c2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
    55c4:	d3f6      	bcc.n	55b4 <CopyDataInit>
	ldr	r2, =_sbss
    55c6:	4a09      	ldr	r2, [pc, #36]	; (55ec <LoopFillZerobss+0x1c>)
	b	LoopFillZerobss
    55c8:	e002      	b.n	55d0 <LoopFillZerobss>

000055ca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
	movs	r3, #0
    55ca:	2300      	movs	r3, #0
	str	r3, [r2], #4
    55cc:	f842 3b04 	str.w	r3, [r2], #4

000055d0 <LoopFillZerobss>:
    
LoopFillZerobss:
	ldr	r3, = _ebss
    55d0:	4b07      	ldr	r3, [pc, #28]	; (55f0 <LoopFillZerobss+0x20>)
	cmp	r2, r3
    55d2:	429a      	cmp	r2, r3
	bcc	FillZerobss
    55d4:	d3f9      	bcc.n	55ca <FillZerobss>
/* Call the clock system intitialization function.*/
  bl  SystemInit 	
    55d6:	f7fa feb1 	bl	33c <SystemInit>
/* Call the application's entry point.*/
	bl	main
    55da:	f7ff fb75 	bl	4cc8 <main>
	bx	lr    
    55de:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
    55e0:	00005620 	.word	0x00005620
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4
    
LoopCopyDataInit:
	ldr	r0, =_sdata
    55e4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
    55e8:	20000030 	.word	0x20000030
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
    55ec:	20000030 	.word	0x20000030
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4
    
LoopFillZerobss:
	ldr	r3, = _ebss
    55f0:	200045c8 	.word	0x200045c8

000055f4 <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
    55f4:	e7fe      	b.n	55f4 <ADC1_2_IRQHandler>
    55f6:	0000      	movs	r0, r0
    55f8:	454c4449 	.word	0x454c4449
    55fc:	00000000 	.word	0x00000000

00005600 <ulKernelPriority>:
    5600:	0000007f 000d0a30 00000d0a 3a746f47     ....0.......Got:
    5610:	00000000 2044454c 73616c46 00000068     ....LED Flash...
