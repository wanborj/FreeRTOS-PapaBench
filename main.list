
main.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:
       0:	00 50 05 20 fd 37 01 00 41 38 01 00 41 38 01 00     .P. .7..A8..A8..
      10:	41 38 01 00 41 38 01 00 41 38 01 00 00 00 00 00     A8..A8..A8......
	...
      2c:	a5 45 00 00 41 38 01 00 00 00 00 00 b1 46 00 00     .E..A8.......F..
      3c:	ed 46 00 00 41 38 01 00 41 38 01 00 41 38 01 00     .F..A8..A8..A8..
      4c:	41 38 01 00 41 38 01 00 41 38 01 00 41 38 01 00     A8..A8..A8..A8..
      5c:	41 38 01 00 41 38 01 00 41 38 01 00 41 38 01 00     A8..A8..A8..A8..
      6c:	41 38 01 00 41 38 01 00 41 38 01 00 41 38 01 00     A8..A8..A8..A8..
      7c:	41 38 01 00 41 38 01 00 41 38 01 00 41 38 01 00     A8..A8..A8..A8..
      8c:	41 38 01 00 41 38 01 00 41 38 01 00 41 38 01 00     A8..A8..A8..A8..
      9c:	41 38 01 00 41 38 01 00 41 38 01 00 41 38 01 00     A8..A8..A8..A8..
      ac:	41 38 01 00 41 38 01 00 41 38 01 00 41 38 01 00     A8..A8..A8..A8..
      bc:	41 38 01 00 41 38 01 00 41 38 01 00 41 38 01 00     A8..A8..A8..A8..
      cc:	41 38 01 00 41 38 01 00 41 38 01 00 41 38 01 00     A8..A8..A8..A8..
      dc:	41 38 01 00 41 38 01 00 41 38 01 00 41 38 01 00     A8..A8..A8..A8..
	...
     108:	5f f8 08 f1                                         _...

0000010c <__get_PSP>:
 * Return the actual process stack pointer
 */
uint32_t __get_PSP(void) __attribute__( ( naked ) );
uint32_t __get_PSP(void)
{
  uint32_t result=0;
     10c:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, psp\n\t"
     10e:	f3ef 8309 	mrs	r3, PSP
     112:	4618      	mov	r0, r3
     114:	4770      	bx	lr
     116:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     118:	4623      	mov	r3, r4
}
     11a:	4618      	mov	r0, r3

0000011c <__set_PSP>:
 * Assign the value ProcessStackPointer to the MSP
 * (process stack pointer) Cortex processor register
 */
void __set_PSP(uint32_t topOfProcStack) __attribute__( ( naked ) );
void __set_PSP(uint32_t topOfProcStack)
{
     11c:	4603      	mov	r3, r0
  __ASM volatile ("MSR psp, %0\n\t"
     11e:	f383 8809 	msr	PSP, r3
     122:	4770      	bx	lr

00000124 <__get_MSP>:
 * Cortex processor register
 */
uint32_t __get_MSP(void) __attribute__( ( naked ) );
uint32_t __get_MSP(void)
{
  uint32_t result=0;
     124:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, msp\n\t"
     126:	f3ef 8308 	mrs	r3, MSP
     12a:	4618      	mov	r0, r3
     12c:	4770      	bx	lr
     12e:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     130:	4623      	mov	r3, r4
}
     132:	4618      	mov	r0, r3

00000134 <__set_MSP>:
 * Assign the value mainStackPointer to the MSP
 * (main stack pointer) Cortex processor register
 */
void __set_MSP(uint32_t topOfMainStack) __attribute__( ( naked ) );
void __set_MSP(uint32_t topOfMainStack)
{
     134:	4603      	mov	r3, r0
  __ASM volatile ("MSR msp, %0\n\t"
     136:	f383 8808 	msr	MSP, r3
     13a:	4770      	bx	lr

0000013c <__get_BASEPRI>:
 * @return BasePriority
 *
 * Return the content of the base priority register
 */
uint32_t __get_BASEPRI(void)
{
     13c:	b480      	push	{r7}
     13e:	b083      	sub	sp, #12
     140:	af00      	add	r7, sp, #0
  uint32_t result=0;
     142:	2300      	movs	r3, #0
     144:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
     146:	f3ef 8312 	mrs	r3, BASEPRI_MAX
     14a:	607b      	str	r3, [r7, #4]
  return(result);
     14c:	687b      	ldr	r3, [r7, #4]
}
     14e:	4618      	mov	r0, r3
     150:	370c      	adds	r7, #12
     152:	46bd      	mov	sp, r7
     154:	f85d 7b04 	ldr.w	r7, [sp], #4
     158:	4770      	bx	lr
     15a:	bf00      	nop

0000015c <__set_BASEPRI>:
 * @param  basePri  BasePriority
 *
 * Set the base priority register
 */
void __set_BASEPRI(uint32_t value)
{
     15c:	b480      	push	{r7}
     15e:	b083      	sub	sp, #12
     160:	af00      	add	r7, sp, #0
     162:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) );
     164:	687b      	ldr	r3, [r7, #4]
     166:	f383 8811 	msr	BASEPRI, r3
}
     16a:	370c      	adds	r7, #12
     16c:	46bd      	mov	sp, r7
     16e:	f85d 7b04 	ldr.w	r7, [sp], #4
     172:	4770      	bx	lr

00000174 <__get_PRIMASK>:
 * @return PriMask
 *
 * Return state of the priority mask bit from the priority mask register
 */
uint32_t __get_PRIMASK(void)
{
     174:	b480      	push	{r7}
     176:	b083      	sub	sp, #12
     178:	af00      	add	r7, sp, #0
  uint32_t result=0;
     17a:	2300      	movs	r3, #0
     17c:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     17e:	f3ef 8310 	mrs	r3, PRIMASK
     182:	607b      	str	r3, [r7, #4]
  return(result);
     184:	687b      	ldr	r3, [r7, #4]
}
     186:	4618      	mov	r0, r3
     188:	370c      	adds	r7, #12
     18a:	46bd      	mov	sp, r7
     18c:	f85d 7b04 	ldr.w	r7, [sp], #4
     190:	4770      	bx	lr
     192:	bf00      	nop

00000194 <__set_PRIMASK>:
 * @param  priMask  PriMask
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
     194:	b480      	push	{r7}
     196:	b083      	sub	sp, #12
     198:	af00      	add	r7, sp, #0
     19a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	f383 8810 	msr	PRIMASK, r3
}
     1a2:	370c      	adds	r7, #12
     1a4:	46bd      	mov	sp, r7
     1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
     1aa:	4770      	bx	lr

000001ac <__get_FAULTMASK>:
 * @return FaultMask
 *
 * Return the content of the fault mask register
 */
uint32_t __get_FAULTMASK(void)
{
     1ac:	b480      	push	{r7}
     1ae:	b083      	sub	sp, #12
     1b0:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1b2:	2300      	movs	r3, #0
     1b4:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
     1b6:	f3ef 8313 	mrs	r3, FAULTMASK
     1ba:	607b      	str	r3, [r7, #4]
  return(result);
     1bc:	687b      	ldr	r3, [r7, #4]
}
     1be:	4618      	mov	r0, r3
     1c0:	370c      	adds	r7, #12
     1c2:	46bd      	mov	sp, r7
     1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     1c8:	4770      	bx	lr
     1ca:	bf00      	nop

000001cc <__set_FAULTMASK>:
 * @param  faultMask  faultMask value
 *
 * Set the fault mask register
 */
void __set_FAULTMASK(uint32_t faultMask)
{
     1cc:	b480      	push	{r7}
     1ce:	b083      	sub	sp, #12
     1d0:	af00      	add	r7, sp, #0
     1d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) );
     1d4:	687b      	ldr	r3, [r7, #4]
     1d6:	f383 8813 	msr	FAULTMASK, r3
}
     1da:	370c      	adds	r7, #12
     1dc:	46bd      	mov	sp, r7
     1de:	f85d 7b04 	ldr.w	r7, [sp], #4
     1e2:	4770      	bx	lr

000001e4 <__get_CONTROL>:
*  @return Control value
 *
 * Return the content of the control register
 */
uint32_t __get_CONTROL(void)
{
     1e4:	b480      	push	{r7}
     1e6:	b083      	sub	sp, #12
     1e8:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1ea:	2300      	movs	r3, #0
     1ec:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, control" : "=r" (result) );
     1ee:	f3ef 8314 	mrs	r3, CONTROL
     1f2:	607b      	str	r3, [r7, #4]
  return(result);
     1f4:	687b      	ldr	r3, [r7, #4]
}
     1f6:	4618      	mov	r0, r3
     1f8:	370c      	adds	r7, #12
     1fa:	46bd      	mov	sp, r7
     1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     200:	4770      	bx	lr
     202:	bf00      	nop

00000204 <__set_CONTROL>:
 * @param  control  Control value
 *
 * Set the control register
 */
void __set_CONTROL(uint32_t control)
{
     204:	b480      	push	{r7}
     206:	b083      	sub	sp, #12
     208:	af00      	add	r7, sp, #0
     20a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR control, %0" : : "r" (control) );
     20c:	687b      	ldr	r3, [r7, #4]
     20e:	f383 8814 	msr	CONTROL, r3
}
     212:	370c      	adds	r7, #12
     214:	46bd      	mov	sp, r7
     216:	f85d 7b04 	ldr.w	r7, [sp], #4
     21a:	4770      	bx	lr

0000021c <__REV>:
 * @return        reversed value
 *
 * Reverse byte order in integer value
 */
uint32_t __REV(uint32_t value)
{
     21c:	b480      	push	{r7}
     21e:	b085      	sub	sp, #20
     220:	af00      	add	r7, sp, #0
     222:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     224:	2300      	movs	r3, #0
     226:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
     228:	687b      	ldr	r3, [r7, #4]
     22a:	ba1b      	rev	r3, r3
     22c:	60fb      	str	r3, [r7, #12]
  return(result);
     22e:	68fb      	ldr	r3, [r7, #12]
}
     230:	4618      	mov	r0, r3
     232:	3714      	adds	r7, #20
     234:	46bd      	mov	sp, r7
     236:	f85d 7b04 	ldr.w	r7, [sp], #4
     23a:	4770      	bx	lr

0000023c <__REV16>:
 * @return        reversed value
 *
 * Reverse byte order in unsigned short value
 */
uint32_t __REV16(uint16_t value)
{
     23c:	b480      	push	{r7}
     23e:	b085      	sub	sp, #20
     240:	af00      	add	r7, sp, #0
     242:	4603      	mov	r3, r0
     244:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     246:	2300      	movs	r3, #0
     248:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
     24a:	88fb      	ldrh	r3, [r7, #6]
     24c:	ba5b      	rev16	r3, r3
     24e:	60fb      	str	r3, [r7, #12]
  return(result);
     250:	68fb      	ldr	r3, [r7, #12]
}
     252:	4618      	mov	r0, r3
     254:	3714      	adds	r7, #20
     256:	46bd      	mov	sp, r7
     258:	f85d 7b04 	ldr.w	r7, [sp], #4
     25c:	4770      	bx	lr
     25e:	bf00      	nop

00000260 <__REVSH>:
 * @return        reversed value
 *
 * Reverse byte order in signed short value with sign extension to integer
 */
int32_t __REVSH(int16_t value)
{
     260:	b480      	push	{r7}
     262:	b085      	sub	sp, #20
     264:	af00      	add	r7, sp, #0
     266:	4603      	mov	r3, r0
     268:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     26a:	2300      	movs	r3, #0
     26c:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
     26e:	88fb      	ldrh	r3, [r7, #6]
     270:	badb      	revsh	r3, r3
     272:	60fb      	str	r3, [r7, #12]
  return(result);
     274:	68fb      	ldr	r3, [r7, #12]
}
     276:	4618      	mov	r0, r3
     278:	3714      	adds	r7, #20
     27a:	46bd      	mov	sp, r7
     27c:	f85d 7b04 	ldr.w	r7, [sp], #4
     280:	4770      	bx	lr
     282:	bf00      	nop

00000284 <__RBIT>:
 * @return        reversed value
 *
 * Reverse bit order of value
 */
uint32_t __RBIT(uint32_t value)
{
     284:	b480      	push	{r7}
     286:	b085      	sub	sp, #20
     288:	af00      	add	r7, sp, #0
     28a:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     28c:	2300      	movs	r3, #0
     28e:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
     290:	687b      	ldr	r3, [r7, #4]
     292:	fa93 f3a3 	rbit	r3, r3
     296:	60fb      	str	r3, [r7, #12]
   return(result);
     298:	68fb      	ldr	r3, [r7, #12]
}
     29a:	4618      	mov	r0, r3
     29c:	3714      	adds	r7, #20
     29e:	46bd      	mov	sp, r7
     2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
     2a4:	4770      	bx	lr
     2a6:	bf00      	nop

000002a8 <__LDREXB>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 8 bit value
 */
uint8_t __LDREXB(uint8_t *addr)
{
     2a8:	b480      	push	{r7}
     2aa:	b085      	sub	sp, #20
     2ac:	af00      	add	r7, sp, #0
     2ae:	6078      	str	r0, [r7, #4]
    uint8_t result=0;
     2b0:	2300      	movs	r3, #0
     2b2:	73fb      	strb	r3, [r7, #15]

   __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) );
     2b4:	687b      	ldr	r3, [r7, #4]
     2b6:	e8d3 3f4f 	ldrexb	r3, [r3]
     2ba:	73fb      	strb	r3, [r7, #15]
   return(result);
     2bc:	7bfb      	ldrb	r3, [r7, #15]
}
     2be:	4618      	mov	r0, r3
     2c0:	3714      	adds	r7, #20
     2c2:	46bd      	mov	sp, r7
     2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     2c8:	4770      	bx	lr
     2ca:	bf00      	nop

000002cc <__LDREXH>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 16 bit values
 */
uint16_t __LDREXH(uint16_t *addr)
{
     2cc:	b480      	push	{r7}
     2ce:	b085      	sub	sp, #20
     2d0:	af00      	add	r7, sp, #0
     2d2:	6078      	str	r0, [r7, #4]
    uint16_t result=0;
     2d4:	2300      	movs	r3, #0
     2d6:	81fb      	strh	r3, [r7, #14]

   __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) );
     2d8:	687b      	ldr	r3, [r7, #4]
     2da:	e8d3 3f5f 	ldrexh	r3, [r3]
     2de:	81fb      	strh	r3, [r7, #14]
   return(result);
     2e0:	89fb      	ldrh	r3, [r7, #14]
}
     2e2:	4618      	mov	r0, r3
     2e4:	3714      	adds	r7, #20
     2e6:	46bd      	mov	sp, r7
     2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
     2ec:	4770      	bx	lr
     2ee:	bf00      	nop

000002f0 <__LDREXW>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 32 bit values
 */
uint32_t __LDREXW(uint32_t *addr)
{
     2f0:	b480      	push	{r7}
     2f2:	b085      	sub	sp, #20
     2f4:	af00      	add	r7, sp, #0
     2f6:	6078      	str	r0, [r7, #4]
    uint32_t result=0;
     2f8:	2300      	movs	r3, #0
     2fa:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     2fc:	687b      	ldr	r3, [r7, #4]
     2fe:	e853 3f00 	ldrex	r3, [r3]
     302:	60fb      	str	r3, [r7, #12]
   return(result);
     304:	68fb      	ldr	r3, [r7, #12]
}
     306:	4618      	mov	r0, r3
     308:	3714      	adds	r7, #20
     30a:	46bd      	mov	sp, r7
     30c:	f85d 7b04 	ldr.w	r7, [sp], #4
     310:	4770      	bx	lr
     312:	bf00      	nop

00000314 <__STREXW>:
 * @return        successful / failed
 *
 * Exclusive STR command for 32 bit values
 */
uint32_t __STREXW(uint32_t value, uint32_t *addr)
{
     314:	b480      	push	{r7}
     316:	b085      	sub	sp, #20
     318:	af00      	add	r7, sp, #0
     31a:	6078      	str	r0, [r7, #4]
     31c:	6039      	str	r1, [r7, #0]
   uint32_t result=0;
     31e:	2300      	movs	r3, #0
     320:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
     322:	683b      	ldr	r3, [r7, #0]
     324:	687a      	ldr	r2, [r7, #4]
     326:	e843 2300 	strex	r3, r2, [r3]
     32a:	60fb      	str	r3, [r7, #12]
   return(result);
     32c:	68fb      	ldr	r3, [r7, #12]
}
     32e:	4618      	mov	r0, r3
     330:	3714      	adds	r7, #20
     332:	46bd      	mov	sp, r7
     334:	f85d 7b04 	ldr.w	r7, [sp], #4
     338:	4770      	bx	lr
     33a:	bf00      	nop

0000033c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
     33c:	b580      	push	{r7, lr}
     33e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     344:	f2c4 0302 	movt	r3, #16386	; 0x4002
     348:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     34c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     350:	6812      	ldr	r2, [r2, #0]
     352:	f042 0201 	orr.w	r2, r2, #1
     356:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     358:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     35c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     360:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     364:	f2c4 0302 	movt	r3, #16386	; 0x4002
     368:	6859      	ldr	r1, [r3, #4]
     36a:	2300      	movs	r3, #0
     36c:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     370:	400b      	ands	r3, r1
     372:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     378:	f2c4 0302 	movt	r3, #16386	; 0x4002
     37c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     380:	f2c4 0202 	movt	r2, #16386	; 0x4002
     384:	6812      	ldr	r2, [r2, #0]
     386:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     38a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     38e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     394:	f2c4 0302 	movt	r3, #16386	; 0x4002
     398:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     39c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3a0:	6812      	ldr	r2, [r2, #0]
     3a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     3a6:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     3a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     3b4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3b8:	6852      	ldr	r2, [r2, #4]
     3ba:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     3be:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     3c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3c8:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     3cc:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
     3ce:	f000 f8a7 	bl	520 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
     3d2:	f44f 436d 	mov.w	r3, #60672	; 0xed00
     3d6:	f2ce 0300 	movt	r3, #57344	; 0xe000
     3da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
     3de:	609a      	str	r2, [r3, #8]
#endif
}
     3e0:	bd80      	pop	{r7, pc}
     3e2:	bf00      	nop

000003e4 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
     3e4:	b480      	push	{r7}
     3e6:	b085      	sub	sp, #20
     3e8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
     3ea:	2300      	movs	r3, #0
     3ec:	60fb      	str	r3, [r7, #12]
     3ee:	2300      	movs	r3, #0
     3f0:	60bb      	str	r3, [r7, #8]
     3f2:	2300      	movs	r3, #0
     3f4:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
     3f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3fe:	685b      	ldr	r3, [r3, #4]
     400:	f003 030c 	and.w	r3, r3, #12
     404:	60fb      	str	r3, [r7, #12]

  switch (tmp)
     406:	68fb      	ldr	r3, [r7, #12]
     408:	2b04      	cmp	r3, #4
     40a:	d00d      	beq.n	428 <SystemCoreClockUpdate+0x44>
     40c:	2b08      	cmp	r3, #8
     40e:	d015      	beq.n	43c <SystemCoreClockUpdate+0x58>
     410:	2b00      	cmp	r3, #0
     412:	d15b      	bne.n	4cc <SystemCoreClockUpdate+0xe8>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
     414:	f240 0300 	movw	r3, #0
     418:	f2c2 0300 	movt	r3, #8192	; 0x2000
     41c:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     420:	f2c0 027a 	movt	r2, #122	; 0x7a
     424:	601a      	str	r2, [r3, #0]
      break;
     426:	e05b      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
     428:	f240 0300 	movw	r3, #0
     42c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     430:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     434:	f2c0 027a 	movt	r2, #122	; 0x7a
     438:	601a      	str	r2, [r3, #0]
      break;
     43a:	e051      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
     43c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     440:	f2c4 0302 	movt	r3, #16386	; 0x4002
     444:	685b      	ldr	r3, [r3, #4]
     446:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     44a:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
     44c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     450:	f2c4 0302 	movt	r3, #16386	; 0x4002
     454:	685b      	ldr	r3, [r3, #4]
     456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     45a:	607b      	str	r3, [r7, #4]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     45c:	68bb      	ldr	r3, [r7, #8]
     45e:	0c9b      	lsrs	r3, r3, #18
     460:	3302      	adds	r3, #2
     462:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00)
     464:	687b      	ldr	r3, [r7, #4]
     466:	2b00      	cmp	r3, #0
     468:	d10c      	bne.n	484 <SystemCoreClockUpdate+0xa0>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
     46a:	68ba      	ldr	r2, [r7, #8]
     46c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     470:	f2c0 033d 	movt	r3, #61	; 0x3d
     474:	fb03 f202 	mul.w	r2, r3, r2
     478:	f240 0300 	movw	r3, #0
     47c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     480:	601a      	str	r2, [r3, #0]
     482:	e022      	b.n	4ca <SystemCoreClockUpdate+0xe6>
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
     484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     488:	f2c4 0302 	movt	r3, #16386	; 0x4002
     48c:	685b      	ldr	r3, [r3, #4]
     48e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     492:	2b00      	cmp	r3, #0
     494:	d00c      	beq.n	4b0 <SystemCoreClockUpdate+0xcc>
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
     496:	68ba      	ldr	r2, [r7, #8]
     498:	f44f 6310 	mov.w	r3, #2304	; 0x900
     49c:	f2c0 033d 	movt	r3, #61	; 0x3d
     4a0:	fb03 f202 	mul.w	r2, r3, r2
     4a4:	f240 0300 	movw	r3, #0
     4a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4ac:	601a      	str	r2, [r3, #0]
     4ae:	e00c      	b.n	4ca <SystemCoreClockUpdate+0xe6>
        }
        else
        {
          SystemCoreClock = HSE_VALUE * pllmull;
     4b0:	68ba      	ldr	r2, [r7, #8]
     4b2:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     4b6:	f2c0 037a 	movt	r3, #122	; 0x7a
     4ba:	fb03 f202 	mul.w	r2, r3, r2
     4be:	f240 0300 	movw	r3, #0
     4c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4c6:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2;
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     4c8:	e00a      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
     4ca:	e009      	b.n	4e0 <SystemCoreClockUpdate+0xfc>

    default:
      SystemCoreClock = HSI_VALUE;
     4cc:	f240 0300 	movw	r3, #0
     4d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4d4:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     4d8:	f2c0 027a 	movt	r2, #122	; 0x7a
     4dc:	601a      	str	r2, [r3, #0]
      break;
     4de:	bf00      	nop
  }

  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
     4e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     4e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     4e8:	685b      	ldr	r3, [r3, #4]
     4ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     4ee:	091a      	lsrs	r2, r3, #4
     4f0:	f240 0304 	movw	r3, #4
     4f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4f8:	5c9b      	ldrb	r3, [r3, r2]
     4fa:	b2db      	uxtb	r3, r3
     4fc:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
     4fe:	f240 0300 	movw	r3, #0
     502:	f2c2 0300 	movt	r3, #8192	; 0x2000
     506:	681a      	ldr	r2, [r3, #0]
     508:	68fb      	ldr	r3, [r7, #12]
     50a:	40da      	lsrs	r2, r3
     50c:	f240 0300 	movw	r3, #0
     510:	f2c2 0300 	movt	r3, #8192	; 0x2000
     514:	601a      	str	r2, [r3, #0]
}
     516:	3714      	adds	r7, #20
     518:	46bd      	mov	sp, r7
     51a:	f85d 7b04 	ldr.w	r7, [sp], #4
     51e:	4770      	bx	lr

00000520 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
     520:	b580      	push	{r7, lr}
     522:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
     524:	f000 f802 	bl	52c <SetSysClockTo72>
#endif

 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */
}
     528:	bd80      	pop	{r7, pc}
     52a:	bf00      	nop

0000052c <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
     52c:	b480      	push	{r7}
     52e:	b083      	sub	sp, #12
     530:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
     532:	2300      	movs	r3, #0
     534:	607b      	str	r3, [r7, #4]
     536:	2300      	movs	r3, #0
     538:	603b      	str	r3, [r7, #0]

  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
     53a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     53e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     542:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     546:	f2c4 0202 	movt	r2, #16386	; 0x4002
     54a:	6812      	ldr	r2, [r2, #0]
     54c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     550:	601a      	str	r2, [r3, #0]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
     552:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     556:	f2c4 0302 	movt	r3, #16386	; 0x4002
     55a:	681b      	ldr	r3, [r3, #0]
     55c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     560:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
     562:	687b      	ldr	r3, [r7, #4]
     564:	3301      	adds	r3, #1
     566:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
     568:	683b      	ldr	r3, [r7, #0]
     56a:	2b00      	cmp	r3, #0
     56c:	d103      	bne.n	576 <SetSysClockTo72+0x4a>
     56e:	687b      	ldr	r3, [r7, #4]
     570:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     574:	d1ed      	bne.n	552 <SetSysClockTo72+0x26>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
     576:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     57a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     57e:	681b      	ldr	r3, [r3, #0]
     580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     584:	2b00      	cmp	r3, #0
     586:	d002      	beq.n	58e <SetSysClockTo72+0x62>
  {
    HSEStatus = (uint32_t)0x01;
     588:	2301      	movs	r3, #1
     58a:	603b      	str	r3, [r7, #0]
     58c:	e001      	b.n	592 <SetSysClockTo72+0x66>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
     58e:	2300      	movs	r3, #0
     590:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
     592:	683b      	ldr	r3, [r7, #0]
     594:	2b01      	cmp	r3, #1
     596:	f040 8094 	bne.w	6c2 <SetSysClockTo72+0x196>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
     59a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     59e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5a6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5aa:	6812      	ldr	r2, [r2, #0]
     5ac:	f042 0210 	orr.w	r2, r2, #16
     5b0:	601a      	str	r2, [r3, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
     5b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5be:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5c2:	6812      	ldr	r2, [r2, #0]
     5c4:	f022 0203 	bic.w	r2, r2, #3
     5c8:	601a      	str	r2, [r3, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;
     5ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5d6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5da:	6812      	ldr	r2, [r2, #0]
     5dc:	f042 0202 	orr.w	r2, r2, #2
     5e0:	601a      	str	r2, [r3, #0]


    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
     5e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     5ee:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5f2:	6852      	ldr	r2, [r2, #4]
     5f4:	605a      	str	r2, [r3, #4]

    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
     5f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     602:	f2c4 0202 	movt	r2, #16386	; 0x4002
     606:	6852      	ldr	r2, [r2, #4]
     608:	605a      	str	r2, [r3, #4]

    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
     60a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     60e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     612:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     616:	f2c4 0202 	movt	r2, #16386	; 0x4002
     61a:	6852      	ldr	r2, [r2, #4]
     61c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     620:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 |
                            RCC_CFGR_PLLMULL9);
#else
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
     622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     626:	f2c4 0302 	movt	r3, #16386	; 0x4002
     62a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     62e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     632:	6852      	ldr	r2, [r2, #4]
     634:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
     638:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
     63a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     63e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     642:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     646:	f2c4 0202 	movt	r2, #16386	; 0x4002
     64a:	6852      	ldr	r2, [r2, #4]
     64c:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
     650:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
     652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     656:	f2c4 0302 	movt	r3, #16386	; 0x4002
     65a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     65e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     662:	6812      	ldr	r2, [r2, #0]
     664:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     668:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
     66a:	bf00      	nop
     66c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     670:	f2c4 0302 	movt	r3, #16386	; 0x4002
     674:	681b      	ldr	r3, [r3, #0]
     676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
     67a:	2b00      	cmp	r3, #0
     67c:	d0f6      	beq.n	66c <SetSysClockTo72+0x140>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
     67e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     682:	f2c4 0302 	movt	r3, #16386	; 0x4002
     686:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     68a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     68e:	6852      	ldr	r2, [r2, #4]
     690:	f022 0203 	bic.w	r2, r2, #3
     694:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
     696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     69a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     69e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6a2:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6a6:	6852      	ldr	r2, [r2, #4]
     6a8:	f042 0202 	orr.w	r2, r2, #2
     6ac:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
     6ae:	bf00      	nop
     6b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6b8:	685b      	ldr	r3, [r3, #4]
     6ba:	f003 030c 	and.w	r3, r3, #12
     6be:	2b08      	cmp	r3, #8
     6c0:	d1f6      	bne.n	6b0 <SetSysClockTo72+0x184>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }
}
     6c2:	370c      	adds	r7, #12
     6c4:	46bd      	mov	sp, r7
     6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
     6ca:	4770      	bx	lr
     6cc:	00013934 	.word	0x00013934
     6d0:	20000000 	.word	0x20000000
     6d4:	200001a0 	.word	0x200001a0
     6d8:	200001a0 	.word	0x200001a0
     6dc:	2004bfa8 	.word	0x2004bfa8

000006e0 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
     6e0:	b480      	push	{r7}
     6e2:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     6e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6f0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6f4:	6812      	ldr	r2, [r2, #0]
     6f6:	f042 0201 	orr.w	r2, r2, #1
     6fa:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     6fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     700:	f2c4 0202 	movt	r2, #16386	; 0x4002
     704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     708:	f2c4 0302 	movt	r3, #16386	; 0x4002
     70c:	6859      	ldr	r1, [r3, #4]
     70e:	2300      	movs	r3, #0
     710:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     714:	400b      	ands	r3, r1
     716:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     718:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     71c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     720:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     724:	f2c4 0202 	movt	r2, #16386	; 0x4002
     728:	6812      	ldr	r2, [r2, #0]
     72a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     72e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     732:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     738:	f2c4 0302 	movt	r3, #16386	; 0x4002
     73c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     740:	f2c4 0202 	movt	r2, #16386	; 0x4002
     744:	6812      	ldr	r2, [r2, #0]
     746:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     74a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     74c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     750:	f2c4 0302 	movt	r3, #16386	; 0x4002
     754:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     758:	f2c4 0202 	movt	r2, #16386	; 0x4002
     75c:	6852      	ldr	r2, [r2, #4]
     75e:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     762:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     768:	f2c4 0302 	movt	r3, #16386	; 0x4002
     76c:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     770:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
     772:	46bd      	mov	sp, r7
     774:	f85d 7b04 	ldr.w	r7, [sp], #4
     778:	4770      	bx	lr
     77a:	bf00      	nop

0000077c <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
     77c:	b480      	push	{r7}
     77e:	b083      	sub	sp, #12
     780:	af00      	add	r7, sp, #0
     782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
     784:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     788:	f2c4 0302 	movt	r3, #16386	; 0x4002
     78c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     790:	f2c4 0202 	movt	r2, #16386	; 0x4002
     794:	6812      	ldr	r2, [r2, #0]
     796:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     79a:	601a      	str	r2, [r3, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
     79c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ac:	6812      	ldr	r2, [r2, #0]
     7ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     7b2:	601a      	str	r2, [r3, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
     7b4:	687b      	ldr	r3, [r7, #4]
     7b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
     7ba:	d003      	beq.n	7c4 <RCC_HSEConfig+0x48>
     7bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
     7c0:	d00d      	beq.n	7de <RCC_HSEConfig+0x62>
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
      break;

    default:
      break;
     7c2:	e019      	b.n	7f8 <RCC_HSEConfig+0x7c>
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
     7c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7d0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7d4:	6812      	ldr	r2, [r2, #0]
     7d6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     7da:	601a      	str	r2, [r3, #0]
      break;
     7dc:	e00c      	b.n	7f8 <RCC_HSEConfig+0x7c>

    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
     7de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7ea:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ee:	6812      	ldr	r2, [r2, #0]
     7f0:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
     7f4:	601a      	str	r2, [r3, #0]
      break;
     7f6:	bf00      	nop

    default:
      break;
  }
}
     7f8:	370c      	adds	r7, #12
     7fa:	46bd      	mov	sp, r7
     7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     800:	4770      	bx	lr
     802:	bf00      	nop

00000804 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
     804:	b580      	push	{r7, lr}
     806:	b082      	sub	sp, #8
     808:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
     80a:	2300      	movs	r3, #0
     80c:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
     80e:	2300      	movs	r3, #0
     810:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
     812:	2300      	movs	r3, #0
     814:	71bb      	strb	r3, [r7, #6]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
     816:	2031      	movs	r0, #49	; 0x31
     818:	f000 fba2 	bl	f60 <RCC_GetFlagStatus>
     81c:	4603      	mov	r3, r0
     81e:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;
     820:	683b      	ldr	r3, [r7, #0]
     822:	3301      	adds	r3, #1
     824:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
     826:	683b      	ldr	r3, [r7, #0]
     828:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     82c:	d002      	beq.n	834 <RCC_WaitForHSEStartUp+0x30>
     82e:	79bb      	ldrb	r3, [r7, #6]
     830:	2b00      	cmp	r3, #0
     832:	d0f0      	beq.n	816 <RCC_WaitForHSEStartUp+0x12>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
     834:	2031      	movs	r0, #49	; 0x31
     836:	f000 fb93 	bl	f60 <RCC_GetFlagStatus>
     83a:	4603      	mov	r3, r0
     83c:	2b00      	cmp	r3, #0
     83e:	d002      	beq.n	846 <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
     840:	2301      	movs	r3, #1
     842:	71fb      	strb	r3, [r7, #7]
     844:	e001      	b.n	84a <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
     846:	2300      	movs	r3, #0
     848:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
     84a:	79fb      	ldrb	r3, [r7, #7]
}
     84c:	4618      	mov	r0, r3
     84e:	3708      	adds	r7, #8
     850:	46bd      	mov	sp, r7
     852:	bd80      	pop	{r7, pc}

00000854 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *   This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
     854:	b480      	push	{r7}
     856:	b085      	sub	sp, #20
     858:	af00      	add	r7, sp, #0
     85a:	4603      	mov	r3, r0
     85c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
     85e:	2300      	movs	r3, #0
     860:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
     862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     866:	f2c4 0302 	movt	r3, #16386	; 0x4002
     86a:	681b      	ldr	r3, [r3, #0]
     86c:	60fb      	str	r3, [r7, #12]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
     86e:	68fb      	ldr	r3, [r7, #12]
     870:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
     874:	60fb      	str	r3, [r7, #12]
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
     876:	79fb      	ldrb	r3, [r7, #7]
     878:	00db      	lsls	r3, r3, #3
     87a:	68fa      	ldr	r2, [r7, #12]
     87c:	4313      	orrs	r3, r2
     87e:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CR = tmpreg;
     880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     884:	f2c4 0302 	movt	r3, #16386	; 0x4002
     888:	68fa      	ldr	r2, [r7, #12]
     88a:	601a      	str	r2, [r3, #0]
}
     88c:	3714      	adds	r7, #20
     88e:	46bd      	mov	sp, r7
     890:	f85d 7b04 	ldr.w	r7, [sp], #4
     894:	4770      	bx	lr
     896:	bf00      	nop

00000898 <RCC_HSICmd>:
  * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
  * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
     898:	b480      	push	{r7}
     89a:	b083      	sub	sp, #12
     89c:	af00      	add	r7, sp, #0
     89e:	4603      	mov	r3, r0
     8a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
     8a2:	2300      	movs	r3, #0
     8a4:	f2c4 2342 	movt	r3, #16962	; 0x4242
     8a8:	79fa      	ldrb	r2, [r7, #7]
     8aa:	601a      	str	r2, [r3, #0]
}
     8ac:	370c      	adds	r7, #12
     8ae:	46bd      	mov	sp, r7
     8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
     8b4:	4770      	bx	lr
     8b6:	bf00      	nop

000008b8 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
     8b8:	b480      	push	{r7}
     8ba:	b085      	sub	sp, #20
     8bc:	af00      	add	r7, sp, #0
     8be:	6078      	str	r0, [r7, #4]
     8c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
     8c2:	2300      	movs	r3, #0
     8c4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
     8c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ce:	685b      	ldr	r3, [r3, #4]
     8d0:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
     8d2:	68fb      	ldr	r3, [r7, #12]
     8d4:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
     8d8:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
     8da:	687a      	ldr	r2, [r7, #4]
     8dc:	683b      	ldr	r3, [r7, #0]
     8de:	4313      	orrs	r3, r2
     8e0:	68fa      	ldr	r2, [r7, #12]
     8e2:	4313      	orrs	r3, r2
     8e4:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     8e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ee:	68fa      	ldr	r2, [r7, #12]
     8f0:	605a      	str	r2, [r3, #4]
}
     8f2:	3714      	adds	r7, #20
     8f4:	46bd      	mov	sp, r7
     8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
     8fa:	4770      	bx	lr

000008fc <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
     8fc:	b480      	push	{r7}
     8fe:	b083      	sub	sp, #12
     900:	af00      	add	r7, sp, #0
     902:	4603      	mov	r3, r0
     904:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
     906:	2360      	movs	r3, #96	; 0x60
     908:	f2c4 2342 	movt	r3, #16962	; 0x4242
     90c:	79fa      	ldrb	r2, [r7, #7]
     90e:	601a      	str	r2, [r3, #0]
}
     910:	370c      	adds	r7, #12
     912:	46bd      	mov	sp, r7
     914:	f85d 7b04 	ldr.w	r7, [sp], #4
     918:	4770      	bx	lr
     91a:	bf00      	nop

0000091c <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
     91c:	b480      	push	{r7}
     91e:	b085      	sub	sp, #20
     920:	af00      	add	r7, sp, #0
     922:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     924:	2300      	movs	r3, #0
     926:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
     928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     92c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     930:	685b      	ldr	r3, [r3, #4]
     932:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
     934:	68fb      	ldr	r3, [r7, #12]
     936:	f023 0303 	bic.w	r3, r3, #3
     93a:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
     93c:	68fa      	ldr	r2, [r7, #12]
     93e:	687b      	ldr	r3, [r7, #4]
     940:	4313      	orrs	r3, r2
     942:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     948:	f2c4 0302 	movt	r3, #16386	; 0x4002
     94c:	68fa      	ldr	r2, [r7, #12]
     94e:	605a      	str	r2, [r3, #4]
}
     950:	3714      	adds	r7, #20
     952:	46bd      	mov	sp, r7
     954:	f85d 7b04 	ldr.w	r7, [sp], #4
     958:	4770      	bx	lr
     95a:	bf00      	nop

0000095c <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
     95c:	b480      	push	{r7}
     95e:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
     960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     964:	f2c4 0302 	movt	r3, #16386	; 0x4002
     968:	685b      	ldr	r3, [r3, #4]
     96a:	b2db      	uxtb	r3, r3
     96c:	f003 030c 	and.w	r3, r3, #12
     970:	b2db      	uxtb	r3, r3
}
     972:	4618      	mov	r0, r3
     974:	46bd      	mov	sp, r7
     976:	f85d 7b04 	ldr.w	r7, [sp], #4
     97a:	4770      	bx	lr

0000097c <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
     97c:	b480      	push	{r7}
     97e:	b085      	sub	sp, #20
     980:	af00      	add	r7, sp, #0
     982:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     984:	2300      	movs	r3, #0
     986:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
     988:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     98c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     990:	685b      	ldr	r3, [r3, #4]
     992:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
     994:	68fb      	ldr	r3, [r7, #12]
     996:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
     99a:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
     99c:	68fa      	ldr	r2, [r7, #12]
     99e:	687b      	ldr	r3, [r7, #4]
     9a0:	4313      	orrs	r3, r2
     9a2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ac:	68fa      	ldr	r2, [r7, #12]
     9ae:	605a      	str	r2, [r3, #4]
}
     9b0:	3714      	adds	r7, #20
     9b2:	46bd      	mov	sp, r7
     9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9b8:	4770      	bx	lr
     9ba:	bf00      	nop

000009bc <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
     9bc:	b480      	push	{r7}
     9be:	b085      	sub	sp, #20
     9c0:	af00      	add	r7, sp, #0
     9c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     9c4:	2300      	movs	r3, #0
     9c6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     9c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9d0:	685b      	ldr	r3, [r3, #4]
     9d2:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
     9d4:	68fb      	ldr	r3, [r7, #12]
     9d6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
     9da:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
     9dc:	68fa      	ldr	r2, [r7, #12]
     9de:	687b      	ldr	r3, [r7, #4]
     9e0:	4313      	orrs	r3, r2
     9e2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ec:	68fa      	ldr	r2, [r7, #12]
     9ee:	605a      	str	r2, [r3, #4]
}
     9f0:	3714      	adds	r7, #20
     9f2:	46bd      	mov	sp, r7
     9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9f8:	4770      	bx	lr
     9fa:	bf00      	nop

000009fc <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
     9fc:	b480      	push	{r7}
     9fe:	b085      	sub	sp, #20
     a00:	af00      	add	r7, sp, #0
     a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     a04:	2300      	movs	r3, #0
     a06:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a0c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a10:	685b      	ldr	r3, [r3, #4]
     a12:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
     a14:	68fb      	ldr	r3, [r7, #12]
     a16:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
     a1a:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
     a1c:	687b      	ldr	r3, [r7, #4]
     a1e:	00db      	lsls	r3, r3, #3
     a20:	68fa      	ldr	r2, [r7, #12]
     a22:	4313      	orrs	r3, r2
     a24:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     a26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a2a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a2e:	68fa      	ldr	r2, [r7, #12]
     a30:	605a      	str	r2, [r3, #4]
}
     a32:	3714      	adds	r7, #20
     a34:	46bd      	mov	sp, r7
     a36:	f85d 7b04 	ldr.w	r7, [sp], #4
     a3a:	4770      	bx	lr

00000a3c <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
     a3c:	b480      	push	{r7}
     a3e:	b083      	sub	sp, #12
     a40:	af00      	add	r7, sp, #0
     a42:	4602      	mov	r2, r0
     a44:	460b      	mov	r3, r1
     a46:	71fa      	strb	r2, [r7, #7]
     a48:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     a4a:	79bb      	ldrb	r3, [r7, #6]
     a4c:	2b00      	cmp	r3, #0
     a4e:	d00e      	beq.n	a6e <RCC_ITConfig+0x32>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
     a50:	f241 0309 	movw	r3, #4105	; 0x1009
     a54:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a58:	f241 0209 	movw	r2, #4105	; 0x1009
     a5c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a60:	7812      	ldrb	r2, [r2, #0]
     a62:	b2d1      	uxtb	r1, r2
     a64:	79fa      	ldrb	r2, [r7, #7]
     a66:	430a      	orrs	r2, r1
     a68:	b2d2      	uxtb	r2, r2
     a6a:	701a      	strb	r2, [r3, #0]
     a6c:	e00f      	b.n	a8e <RCC_ITConfig+0x52>
  }
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
     a6e:	f241 0309 	movw	r3, #4105	; 0x1009
     a72:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a76:	f241 0209 	movw	r2, #4105	; 0x1009
     a7a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a7e:	7812      	ldrb	r2, [r2, #0]
     a80:	b2d1      	uxtb	r1, r2
     a82:	79fa      	ldrb	r2, [r7, #7]
     a84:	43d2      	mvns	r2, r2
     a86:	b2d2      	uxtb	r2, r2
     a88:	400a      	ands	r2, r1
     a8a:	b2d2      	uxtb	r2, r2
     a8c:	701a      	strb	r2, [r3, #0]
  }
}
     a8e:	370c      	adds	r7, #12
     a90:	46bd      	mov	sp, r7
     a92:	f85d 7b04 	ldr.w	r7, [sp], #4
     a96:	4770      	bx	lr

00000a98 <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
     a98:	b480      	push	{r7}
     a9a:	b083      	sub	sp, #12
     a9c:	af00      	add	r7, sp, #0
     a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
     aa0:	23d8      	movs	r3, #216	; 0xd8
     aa2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     aa6:	687a      	ldr	r2, [r7, #4]
     aa8:	601a      	str	r2, [r3, #0]
}
     aaa:	370c      	adds	r7, #12
     aac:	46bd      	mov	sp, r7
     aae:	f85d 7b04 	ldr.w	r7, [sp], #4
     ab2:	4770      	bx	lr

00000ab4 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
     ab4:	b480      	push	{r7}
     ab6:	b085      	sub	sp, #20
     ab8:	af00      	add	r7, sp, #0
     aba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     abc:	2300      	movs	r3, #0
     abe:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
     ac0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ac4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ac8:	685b      	ldr	r3, [r3, #4]
     aca:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
     acc:	68fb      	ldr	r3, [r7, #12]
     ace:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
     ad2:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
     ad4:	68fa      	ldr	r2, [r7, #12]
     ad6:	687b      	ldr	r3, [r7, #4]
     ad8:	4313      	orrs	r3, r2
     ada:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ae0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ae4:	68fa      	ldr	r2, [r7, #12]
     ae6:	605a      	str	r2, [r3, #4]
}
     ae8:	3714      	adds	r7, #20
     aea:	46bd      	mov	sp, r7
     aec:	f85d 7b04 	ldr.w	r7, [sp], #4
     af0:	4770      	bx	lr
     af2:	bf00      	nop

00000af4 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
     af4:	b480      	push	{r7}
     af6:	b083      	sub	sp, #12
     af8:	af00      	add	r7, sp, #0
     afa:	4603      	mov	r3, r0
     afc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     afe:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b02:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b06:	2200      	movs	r2, #0
     b08:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     b0a:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b0e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b12:	2200      	movs	r2, #0
     b14:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
     b16:	79fb      	ldrb	r3, [r7, #7]
     b18:	2b01      	cmp	r3, #1
     b1a:	d002      	beq.n	b22 <RCC_LSEConfig+0x2e>
     b1c:	2b04      	cmp	r3, #4
     b1e:	d007      	beq.n	b30 <RCC_LSEConfig+0x3c>
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;

    default:
      break;
     b20:	e00d      	b.n	b3e <RCC_LSEConfig+0x4a>
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
     b22:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b2a:	2201      	movs	r2, #1
     b2c:	701a      	strb	r2, [r3, #0]
      break;
     b2e:	e006      	b.n	b3e <RCC_LSEConfig+0x4a>

    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
     b30:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b34:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b38:	2205      	movs	r2, #5
     b3a:	701a      	strb	r2, [r3, #0]
      break;
     b3c:	bf00      	nop

    default:
      break;
  }
}
     b3e:	370c      	adds	r7, #12
     b40:	46bd      	mov	sp, r7
     b42:	f85d 7b04 	ldr.w	r7, [sp], #4
     b46:	4770      	bx	lr

00000b48 <RCC_LSICmd>:
  * @note   LSI can not be disabled if the IWDG is running.
  * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
     b48:	b480      	push	{r7}
     b4a:	b083      	sub	sp, #12
     b4c:	af00      	add	r7, sp, #0
     b4e:	4603      	mov	r3, r0
     b50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
     b52:	f44f 6390 	mov.w	r3, #1152	; 0x480
     b56:	f2c4 2342 	movt	r3, #16962	; 0x4242
     b5a:	79fa      	ldrb	r2, [r7, #7]
     b5c:	601a      	str	r2, [r3, #0]
}
     b5e:	370c      	adds	r7, #12
     b60:	46bd      	mov	sp, r7
     b62:	f85d 7b04 	ldr.w	r7, [sp], #4
     b66:	4770      	bx	lr

00000b68 <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
     b68:	b480      	push	{r7}
     b6a:	b083      	sub	sp, #12
     b6c:	af00      	add	r7, sp, #0
     b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
     b70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     b74:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     b7c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     b80:	6a11      	ldr	r1, [r2, #32]
     b82:	687a      	ldr	r2, [r7, #4]
     b84:	430a      	orrs	r2, r1
     b86:	621a      	str	r2, [r3, #32]
}
     b88:	370c      	adds	r7, #12
     b8a:	46bd      	mov	sp, r7
     b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
     b90:	4770      	bx	lr
     b92:	bf00      	nop

00000b94 <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
     b94:	b480      	push	{r7}
     b96:	b083      	sub	sp, #12
     b98:	af00      	add	r7, sp, #0
     b9a:	4603      	mov	r3, r0
     b9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
     b9e:	f240 433c 	movw	r3, #1084	; 0x43c
     ba2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     ba6:	79fa      	ldrb	r2, [r7, #7]
     ba8:	601a      	str	r2, [r3, #0]
}
     baa:	370c      	adds	r7, #12
     bac:	46bd      	mov	sp, r7
     bae:	f85d 7b04 	ldr.w	r7, [sp], #4
     bb2:	4770      	bx	lr

00000bb4 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using
  *         fractional value for HSE crystal.
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
     bb4:	b480      	push	{r7}
     bb6:	b087      	sub	sp, #28
     bb8:	af00      	add	r7, sp, #0
     bba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
     bbc:	2300      	movs	r3, #0
     bbe:	617b      	str	r3, [r7, #20]
     bc0:	2300      	movs	r3, #0
     bc2:	613b      	str	r3, [r7, #16]
     bc4:	2300      	movs	r3, #0
     bc6:	60fb      	str	r3, [r7, #12]
     bc8:	2300      	movs	r3, #0
     bca:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
     bcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     bd0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     bd4:	685b      	ldr	r3, [r3, #4]
     bd6:	f003 030c 	and.w	r3, r3, #12
     bda:	617b      	str	r3, [r7, #20]

  switch (tmp)
     bdc:	697b      	ldr	r3, [r7, #20]
     bde:	2b04      	cmp	r3, #4
     be0:	d00a      	beq.n	bf8 <RCC_GetClocksFreq+0x44>
     be2:	2b08      	cmp	r3, #8
     be4:	d00f      	beq.n	c06 <RCC_GetClocksFreq+0x52>
     be6:	2b00      	cmp	r3, #0
     be8:	d14c      	bne.n	c84 <RCC_GetClocksFreq+0xd0>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     bea:	687a      	ldr	r2, [r7, #4]
     bec:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bf0:	f2c0 037a 	movt	r3, #122	; 0x7a
     bf4:	6013      	str	r3, [r2, #0]
      break;
     bf6:	e04c      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
     bf8:	687a      	ldr	r2, [r7, #4]
     bfa:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bfe:	f2c0 037a 	movt	r3, #122	; 0x7a
     c02:	6013      	str	r3, [r2, #0]
      break;
     c04:	e045      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
     c06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c0a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c0e:	685b      	ldr	r3, [r3, #4]
     c10:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     c14:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
     c16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c1a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c1e:	685b      	ldr	r3, [r3, #4]
     c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     c24:	60fb      	str	r3, [r7, #12]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     c26:	693b      	ldr	r3, [r7, #16]
     c28:	0c9b      	lsrs	r3, r3, #18
     c2a:	3302      	adds	r3, #2
     c2c:	613b      	str	r3, [r7, #16]

      if (pllsource == 0x00)
     c2e:	68fb      	ldr	r3, [r7, #12]
     c30:	2b00      	cmp	r3, #0
     c32:	d109      	bne.n	c48 <RCC_GetClocksFreq+0x94>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
     c34:	693a      	ldr	r2, [r7, #16]
     c36:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c3a:	f2c0 033d 	movt	r3, #61	; 0x3d
     c3e:	fb03 f202 	mul.w	r2, r3, r2
     c42:	687b      	ldr	r3, [r7, #4]
     c44:	601a      	str	r2, [r3, #0]
     c46:	e01c      	b.n	c82 <RCC_GetClocksFreq+0xce>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
     c48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c4c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c50:	685b      	ldr	r3, [r3, #4]
     c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     c56:	2b00      	cmp	r3, #0
     c58:	d009      	beq.n	c6e <RCC_GetClocksFreq+0xba>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
     c5a:	693a      	ldr	r2, [r7, #16]
     c5c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c60:	f2c0 033d 	movt	r3, #61	; 0x3d
     c64:	fb03 f202 	mul.w	r2, r3, r2
     c68:	687b      	ldr	r3, [r7, #4]
     c6a:	601a      	str	r2, [r3, #0]
     c6c:	e009      	b.n	c82 <RCC_GetClocksFreq+0xce>
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
     c6e:	693a      	ldr	r2, [r7, #16]
     c70:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c74:	f2c0 037a 	movt	r3, #122	; 0x7a
     c78:	fb03 f202 	mul.w	r2, r3, r2
     c7c:	687b      	ldr	r3, [r7, #4]
     c7e:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2;
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     c80:	e007      	b.n	c92 <RCC_GetClocksFreq+0xde>
     c82:	e006      	b.n	c92 <RCC_GetClocksFreq+0xde>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     c84:	687a      	ldr	r2, [r7, #4]
     c86:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c8a:	f2c0 037a 	movt	r3, #122	; 0x7a
     c8e:	6013      	str	r3, [r2, #0]
      break;
     c90:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
     c92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c96:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c9a:	685b      	ldr	r3, [r3, #4]
     c9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     ca0:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
     ca2:	697b      	ldr	r3, [r7, #20]
     ca4:	091b      	lsrs	r3, r3, #4
     ca6:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     ca8:	f240 0314 	movw	r3, #20
     cac:	f2c2 0300 	movt	r3, #8192	; 0x2000
     cb0:	697a      	ldr	r2, [r7, #20]
     cb2:	4413      	add	r3, r2
     cb4:	781b      	ldrb	r3, [r3, #0]
     cb6:	b2db      	uxtb	r3, r3
     cb8:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
     cba:	687b      	ldr	r3, [r7, #4]
     cbc:	681a      	ldr	r2, [r3, #0]
     cbe:	68bb      	ldr	r3, [r7, #8]
     cc0:	40da      	lsrs	r2, r3
     cc2:	687b      	ldr	r3, [r7, #4]
     cc4:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
     cc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     cce:	685b      	ldr	r3, [r3, #4]
     cd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
     cd4:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
     cd6:	697b      	ldr	r3, [r7, #20]
     cd8:	0a1b      	lsrs	r3, r3, #8
     cda:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     cdc:	f240 0314 	movw	r3, #20
     ce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     ce4:	697a      	ldr	r2, [r7, #20]
     ce6:	4413      	add	r3, r2
     ce8:	781b      	ldrb	r3, [r3, #0]
     cea:	b2db      	uxtb	r3, r3
     cec:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     cee:	687b      	ldr	r3, [r7, #4]
     cf0:	685a      	ldr	r2, [r3, #4]
     cf2:	68bb      	ldr	r3, [r7, #8]
     cf4:	40da      	lsrs	r2, r3
     cf6:	687b      	ldr	r3, [r7, #4]
     cf8:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
     cfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cfe:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d02:	685b      	ldr	r3, [r3, #4]
     d04:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
     d08:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
     d0a:	697b      	ldr	r3, [r7, #20]
     d0c:	0adb      	lsrs	r3, r3, #11
     d0e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     d10:	f240 0314 	movw	r3, #20
     d14:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d18:	697a      	ldr	r2, [r7, #20]
     d1a:	4413      	add	r3, r2
     d1c:	781b      	ldrb	r3, [r3, #0]
     d1e:	b2db      	uxtb	r3, r3
     d20:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     d22:	687b      	ldr	r3, [r7, #4]
     d24:	685a      	ldr	r2, [r3, #4]
     d26:	68bb      	ldr	r3, [r7, #8]
     d28:	40da      	lsrs	r2, r3
     d2a:	687b      	ldr	r3, [r7, #4]
     d2c:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
     d2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d32:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d36:	685b      	ldr	r3, [r3, #4]
     d38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
     d3c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
     d3e:	697b      	ldr	r3, [r7, #20]
     d40:	0b9b      	lsrs	r3, r3, #14
     d42:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
     d44:	f240 0324 	movw	r3, #36	; 0x24
     d48:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d4c:	697a      	ldr	r2, [r7, #20]
     d4e:	4413      	add	r3, r2
     d50:	781b      	ldrb	r3, [r3, #0]
     d52:	b2db      	uxtb	r3, r3
     d54:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
     d56:	687b      	ldr	r3, [r7, #4]
     d58:	68da      	ldr	r2, [r3, #12]
     d5a:	68bb      	ldr	r3, [r7, #8]
     d5c:	fbb2 f2f3 	udiv	r2, r2, r3
     d60:	687b      	ldr	r3, [r7, #4]
     d62:	611a      	str	r2, [r3, #16]
}
     d64:	371c      	adds	r7, #28
     d66:	46bd      	mov	sp, r7
     d68:	f85d 7b04 	ldr.w	r7, [sp], #4
     d6c:	4770      	bx	lr
     d6e:	bf00      	nop

00000d70 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
     d70:	b480      	push	{r7}
     d72:	b083      	sub	sp, #12
     d74:	af00      	add	r7, sp, #0
     d76:	6078      	str	r0, [r7, #4]
     d78:	460b      	mov	r3, r1
     d7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
     d7c:	78fb      	ldrb	r3, [r7, #3]
     d7e:	2b00      	cmp	r3, #0
     d80:	d00c      	beq.n	d9c <RCC_AHBPeriphClockCmd+0x2c>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
     d82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d86:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     d8e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     d92:	6951      	ldr	r1, [r2, #20]
     d94:	687a      	ldr	r2, [r7, #4]
     d96:	430a      	orrs	r2, r1
     d98:	615a      	str	r2, [r3, #20]
     d9a:	e00c      	b.n	db6 <RCC_AHBPeriphClockCmd+0x46>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
     d9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     da0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     da4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     da8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dac:	6951      	ldr	r1, [r2, #20]
     dae:	687a      	ldr	r2, [r7, #4]
     db0:	43d2      	mvns	r2, r2
     db2:	400a      	ands	r2, r1
     db4:	615a      	str	r2, [r3, #20]
  }
}
     db6:	370c      	adds	r7, #12
     db8:	46bd      	mov	sp, r7
     dba:	f85d 7b04 	ldr.w	r7, [sp], #4
     dbe:	4770      	bx	lr

00000dc0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     dc0:	b480      	push	{r7}
     dc2:	b083      	sub	sp, #12
     dc4:	af00      	add	r7, sp, #0
     dc6:	6078      	str	r0, [r7, #4]
     dc8:	460b      	mov	r3, r1
     dca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     dcc:	78fb      	ldrb	r3, [r7, #3]
     dce:	2b00      	cmp	r3, #0
     dd0:	d00c      	beq.n	dec <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
     dd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     dd6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     dda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     dde:	f2c4 0202 	movt	r2, #16386	; 0x4002
     de2:	6991      	ldr	r1, [r2, #24]
     de4:	687a      	ldr	r2, [r7, #4]
     de6:	430a      	orrs	r2, r1
     de8:	619a      	str	r2, [r3, #24]
     dea:	e00c      	b.n	e06 <RCC_APB2PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
     dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     df0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     df4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     df8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dfc:	6991      	ldr	r1, [r2, #24]
     dfe:	687a      	ldr	r2, [r7, #4]
     e00:	43d2      	mvns	r2, r2
     e02:	400a      	ands	r2, r1
     e04:	619a      	str	r2, [r3, #24]
  }
}
     e06:	370c      	adds	r7, #12
     e08:	46bd      	mov	sp, r7
     e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e0e:	4770      	bx	lr

00000e10 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     e10:	b480      	push	{r7}
     e12:	b083      	sub	sp, #12
     e14:	af00      	add	r7, sp, #0
     e16:	6078      	str	r0, [r7, #4]
     e18:	460b      	mov	r3, r1
     e1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e1c:	78fb      	ldrb	r3, [r7, #3]
     e1e:	2b00      	cmp	r3, #0
     e20:	d00c      	beq.n	e3c <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
     e22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e2e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e32:	69d1      	ldr	r1, [r2, #28]
     e34:	687a      	ldr	r2, [r7, #4]
     e36:	430a      	orrs	r2, r1
     e38:	61da      	str	r2, [r3, #28]
     e3a:	e00c      	b.n	e56 <RCC_APB1PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
     e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e40:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e48:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e4c:	69d1      	ldr	r1, [r2, #28]
     e4e:	687a      	ldr	r2, [r7, #4]
     e50:	43d2      	mvns	r2, r2
     e52:	400a      	ands	r2, r1
     e54:	61da      	str	r2, [r3, #28]
  }
}
     e56:	370c      	adds	r7, #12
     e58:	46bd      	mov	sp, r7
     e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e5e:	4770      	bx	lr

00000e60 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     e60:	b480      	push	{r7}
     e62:	b083      	sub	sp, #12
     e64:	af00      	add	r7, sp, #0
     e66:	6078      	str	r0, [r7, #4]
     e68:	460b      	mov	r3, r1
     e6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e6c:	78fb      	ldrb	r3, [r7, #3]
     e6e:	2b00      	cmp	r3, #0
     e70:	d00c      	beq.n	e8c <RCC_APB2PeriphResetCmd+0x2c>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
     e72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e76:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e7e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e82:	68d1      	ldr	r1, [r2, #12]
     e84:	687a      	ldr	r2, [r7, #4]
     e86:	430a      	orrs	r2, r1
     e88:	60da      	str	r2, [r3, #12]
     e8a:	e00c      	b.n	ea6 <RCC_APB2PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
     e8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e90:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e98:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e9c:	68d1      	ldr	r1, [r2, #12]
     e9e:	687a      	ldr	r2, [r7, #4]
     ea0:	43d2      	mvns	r2, r2
     ea2:	400a      	ands	r2, r1
     ea4:	60da      	str	r2, [r3, #12]
  }
}
     ea6:	370c      	adds	r7, #12
     ea8:	46bd      	mov	sp, r7
     eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
     eae:	4770      	bx	lr

00000eb0 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     eb0:	b480      	push	{r7}
     eb2:	b083      	sub	sp, #12
     eb4:	af00      	add	r7, sp, #0
     eb6:	6078      	str	r0, [r7, #4]
     eb8:	460b      	mov	r3, r1
     eba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     ebc:	78fb      	ldrb	r3, [r7, #3]
     ebe:	2b00      	cmp	r3, #0
     ec0:	d00c      	beq.n	edc <RCC_APB1PeriphResetCmd+0x2c>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
     ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ec6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     eca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ece:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ed2:	6911      	ldr	r1, [r2, #16]
     ed4:	687a      	ldr	r2, [r7, #4]
     ed6:	430a      	orrs	r2, r1
     ed8:	611a      	str	r2, [r3, #16]
     eda:	e00c      	b.n	ef6 <RCC_APB1PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
     edc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ee0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ee4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ee8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     eec:	6911      	ldr	r1, [r2, #16]
     eee:	687a      	ldr	r2, [r7, #4]
     ef0:	43d2      	mvns	r2, r2
     ef2:	400a      	ands	r2, r1
     ef4:	611a      	str	r2, [r3, #16]
  }
}
     ef6:	370c      	adds	r7, #12
     ef8:	46bd      	mov	sp, r7
     efa:	f85d 7b04 	ldr.w	r7, [sp], #4
     efe:	4770      	bx	lr

00000f00 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
     f00:	b480      	push	{r7}
     f02:	b083      	sub	sp, #12
     f04:	af00      	add	r7, sp, #0
     f06:	4603      	mov	r3, r0
     f08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
     f0a:	f44f 6388 	mov.w	r3, #1088	; 0x440
     f0e:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f12:	79fa      	ldrb	r2, [r7, #7]
     f14:	601a      	str	r2, [r3, #0]
}
     f16:	370c      	adds	r7, #12
     f18:	46bd      	mov	sp, r7
     f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f1e:	4770      	bx	lr

00000f20 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
     f20:	b480      	push	{r7}
     f22:	b083      	sub	sp, #12
     f24:	af00      	add	r7, sp, #0
     f26:	4603      	mov	r3, r0
     f28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
     f2a:	234c      	movs	r3, #76	; 0x4c
     f2c:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f30:	79fa      	ldrb	r2, [r7, #7]
     f32:	601a      	str	r2, [r3, #0]
}
     f34:	370c      	adds	r7, #12
     f36:	46bd      	mov	sp, r7
     f38:	f85d 7b04 	ldr.w	r7, [sp], #4
     f3c:	4770      	bx	lr
     f3e:	bf00      	nop

00000f40 <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
     f40:	b480      	push	{r7}
     f42:	b083      	sub	sp, #12
     f44:	af00      	add	r7, sp, #0
     f46:	4603      	mov	r3, r0
     f48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
     f4a:	f241 0307 	movw	r3, #4103	; 0x1007
     f4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f52:	79fa      	ldrb	r2, [r7, #7]
     f54:	701a      	strb	r2, [r3, #0]
}
     f56:	370c      	adds	r7, #12
     f58:	46bd      	mov	sp, r7
     f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f5e:	4770      	bx	lr

00000f60 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
     f60:	b480      	push	{r7}
     f62:	b087      	sub	sp, #28
     f64:	af00      	add	r7, sp, #0
     f66:	4603      	mov	r3, r0
     f68:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
     f6a:	2300      	movs	r3, #0
     f6c:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
     f6e:	2300      	movs	r3, #0
     f70:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
     f72:	2300      	movs	r3, #0
     f74:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
     f76:	79fb      	ldrb	r3, [r7, #7]
     f78:	095b      	lsrs	r3, r3, #5
     f7a:	b2db      	uxtb	r3, r3
     f7c:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
     f7e:	68fb      	ldr	r3, [r7, #12]
     f80:	2b01      	cmp	r3, #1
     f82:	d106      	bne.n	f92 <RCC_GetFlagStatus+0x32>
  {
    statusreg = RCC->CR;
     f84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f88:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f8c:	681b      	ldr	r3, [r3, #0]
     f8e:	617b      	str	r3, [r7, #20]
     f90:	e00f      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
     f92:	68fb      	ldr	r3, [r7, #12]
     f94:	2b02      	cmp	r3, #2
     f96:	d106      	bne.n	fa6 <RCC_GetFlagStatus+0x46>
  {
    statusreg = RCC->BDCR;
     f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f9c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fa0:	6a1b      	ldr	r3, [r3, #32]
     fa2:	617b      	str	r3, [r7, #20]
     fa4:	e005      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
     fa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     faa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     fb0:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
     fb2:	79fb      	ldrb	r3, [r7, #7]
     fb4:	f003 031f 	and.w	r3, r3, #31
     fb8:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
     fba:	68fb      	ldr	r3, [r7, #12]
     fbc:	697a      	ldr	r2, [r7, #20]
     fbe:	fa22 f303 	lsr.w	r3, r2, r3
     fc2:	f003 0301 	and.w	r3, r3, #1
     fc6:	2b00      	cmp	r3, #0
     fc8:	d002      	beq.n	fd0 <RCC_GetFlagStatus+0x70>
  {
    bitstatus = SET;
     fca:	2301      	movs	r3, #1
     fcc:	74fb      	strb	r3, [r7, #19]
     fce:	e001      	b.n	fd4 <RCC_GetFlagStatus+0x74>
  }
  else
  {
    bitstatus = RESET;
     fd0:	2300      	movs	r3, #0
     fd2:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
     fd4:	7cfb      	ldrb	r3, [r7, #19]
}
     fd6:	4618      	mov	r0, r3
     fd8:	371c      	adds	r7, #28
     fda:	46bd      	mov	sp, r7
     fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
     fe0:	4770      	bx	lr
     fe2:	bf00      	nop

00000fe4 <RCC_ClearFlag>:
  *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
     fe4:	b480      	push	{r7}
     fe6:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
     fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     fec:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ff0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ff4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ff8:	6a52      	ldr	r2, [r2, #36]	; 0x24
     ffa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     ffe:	625a      	str	r2, [r3, #36]	; 0x24
}
    1000:	46bd      	mov	sp, r7
    1002:	f85d 7b04 	ldr.w	r7, [sp], #4
    1006:	4770      	bx	lr

00001008 <RCC_GetITStatus>:
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  *
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
    1008:	b480      	push	{r7}
    100a:	b085      	sub	sp, #20
    100c:	af00      	add	r7, sp, #0
    100e:	4603      	mov	r3, r0
    1010:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
    1012:	2300      	movs	r3, #0
    1014:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
    1016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    101a:	f2c4 0302 	movt	r3, #16386	; 0x4002
    101e:	689a      	ldr	r2, [r3, #8]
    1020:	79fb      	ldrb	r3, [r7, #7]
    1022:	4013      	ands	r3, r2
    1024:	2b00      	cmp	r3, #0
    1026:	d002      	beq.n	102e <RCC_GetITStatus+0x26>
  {
    bitstatus = SET;
    1028:	2301      	movs	r3, #1
    102a:	73fb      	strb	r3, [r7, #15]
    102c:	e001      	b.n	1032 <RCC_GetITStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    102e:	2300      	movs	r3, #0
    1030:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the RCC_IT status */
  return  bitstatus;
    1032:	7bfb      	ldrb	r3, [r7, #15]
}
    1034:	4618      	mov	r0, r3
    1036:	3714      	adds	r7, #20
    1038:	46bd      	mov	sp, r7
    103a:	f85d 7b04 	ldr.w	r7, [sp], #4
    103e:	4770      	bx	lr

00001040 <RCC_ClearITPendingBit>:
  *
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
    1040:	b480      	push	{r7}
    1042:	b083      	sub	sp, #12
    1044:	af00      	add	r7, sp, #0
    1046:	4603      	mov	r3, r0
    1048:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
    104a:	f241 030a 	movw	r3, #4106	; 0x100a
    104e:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1052:	79fa      	ldrb	r2, [r7, #7]
    1054:	701a      	strb	r2, [r3, #0]
}
    1056:	370c      	adds	r7, #12
    1058:	46bd      	mov	sp, r7
    105a:	f85d 7b04 	ldr.w	r7, [sp], #4
    105e:	4770      	bx	lr

00001060 <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
    1060:	b580      	push	{r7, lr}
    1062:	b082      	sub	sp, #8
    1064:	af00      	add	r7, sp, #0
    1066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
    1068:	687a      	ldr	r2, [r7, #4]
    106a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    106e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1072:	429a      	cmp	r2, r3
    1074:	d108      	bne.n	1088 <GPIO_DeInit+0x28>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
    1076:	2004      	movs	r0, #4
    1078:	2101      	movs	r1, #1
    107a:	f7ff fef1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
    107e:	2004      	movs	r0, #4
    1080:	2100      	movs	r1, #0
    1082:	f7ff feed 	bl	e60 <RCC_APB2PeriphResetCmd>
    1086:	e060      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOB)
    1088:	687a      	ldr	r2, [r7, #4]
    108a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    108e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1092:	429a      	cmp	r2, r3
    1094:	d108      	bne.n	10a8 <GPIO_DeInit+0x48>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
    1096:	2008      	movs	r0, #8
    1098:	2101      	movs	r1, #1
    109a:	f7ff fee1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
    109e:	2008      	movs	r0, #8
    10a0:	2100      	movs	r1, #0
    10a2:	f7ff fedd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10a6:	e050      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOC)
    10a8:	687a      	ldr	r2, [r7, #4]
    10aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    10ae:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10b2:	429a      	cmp	r2, r3
    10b4:	d108      	bne.n	10c8 <GPIO_DeInit+0x68>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
    10b6:	2010      	movs	r0, #16
    10b8:	2101      	movs	r1, #1
    10ba:	f7ff fed1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
    10be:	2010      	movs	r0, #16
    10c0:	2100      	movs	r1, #0
    10c2:	f7ff fecd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10c6:	e040      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOD)
    10c8:	687a      	ldr	r2, [r7, #4]
    10ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    10ce:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10d2:	429a      	cmp	r2, r3
    10d4:	d108      	bne.n	10e8 <GPIO_DeInit+0x88>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
    10d6:	2020      	movs	r0, #32
    10d8:	2101      	movs	r1, #1
    10da:	f7ff fec1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
    10de:	2020      	movs	r0, #32
    10e0:	2100      	movs	r1, #0
    10e2:	f7ff febd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10e6:	e030      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOE)
    10e8:	687a      	ldr	r2, [r7, #4]
    10ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    10ee:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10f2:	429a      	cmp	r2, r3
    10f4:	d108      	bne.n	1108 <GPIO_DeInit+0xa8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
    10f6:	2040      	movs	r0, #64	; 0x40
    10f8:	2101      	movs	r1, #1
    10fa:	f7ff feb1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
    10fe:	2040      	movs	r0, #64	; 0x40
    1100:	2100      	movs	r1, #0
    1102:	f7ff fead 	bl	e60 <RCC_APB2PeriphResetCmd>
    1106:	e020      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOF)
    1108:	687a      	ldr	r2, [r7, #4]
    110a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
    110e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1112:	429a      	cmp	r2, r3
    1114:	d108      	bne.n	1128 <GPIO_DeInit+0xc8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
    1116:	2080      	movs	r0, #128	; 0x80
    1118:	2101      	movs	r1, #1
    111a:	f7ff fea1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
    111e:	2080      	movs	r0, #128	; 0x80
    1120:	2100      	movs	r1, #0
    1122:	f7ff fe9d 	bl	e60 <RCC_APB2PeriphResetCmd>
    1126:	e010      	b.n	114a <GPIO_DeInit+0xea>
  }
  else
  {
    if (GPIOx == GPIOG)
    1128:	687a      	ldr	r2, [r7, #4]
    112a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    112e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1132:	429a      	cmp	r2, r3
    1134:	d109      	bne.n	114a <GPIO_DeInit+0xea>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
    1136:	f44f 7080 	mov.w	r0, #256	; 0x100
    113a:	2101      	movs	r1, #1
    113c:	f7ff fe90 	bl	e60 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    1140:	f44f 7080 	mov.w	r0, #256	; 0x100
    1144:	2100      	movs	r1, #0
    1146:	f7ff fe8b 	bl	e60 <RCC_APB2PeriphResetCmd>
    }
  }
}
    114a:	3708      	adds	r7, #8
    114c:	46bd      	mov	sp, r7
    114e:	bd80      	pop	{r7, pc}

00001150 <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
    1150:	b580      	push	{r7, lr}
    1152:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
    1154:	2001      	movs	r0, #1
    1156:	2101      	movs	r1, #1
    1158:	f7ff fe82 	bl	e60 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
    115c:	2001      	movs	r0, #1
    115e:	2100      	movs	r1, #0
    1160:	f7ff fe7e 	bl	e60 <RCC_APB2PeriphResetCmd>
}
    1164:	bd80      	pop	{r7, pc}
    1166:	bf00      	nop

00001168 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
    1168:	b480      	push	{r7}
    116a:	b089      	sub	sp, #36	; 0x24
    116c:	af00      	add	r7, sp, #0
    116e:	6078      	str	r0, [r7, #4]
    1170:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
    1172:	2300      	movs	r3, #0
    1174:	61fb      	str	r3, [r7, #28]
    1176:	2300      	movs	r3, #0
    1178:	613b      	str	r3, [r7, #16]
    117a:	2300      	movs	r3, #0
    117c:	61bb      	str	r3, [r7, #24]
    117e:	2300      	movs	r3, #0
    1180:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
    1182:	2300      	movs	r3, #0
    1184:	617b      	str	r3, [r7, #20]
    1186:	2300      	movs	r3, #0
    1188:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));

/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
    118a:	683b      	ldr	r3, [r7, #0]
    118c:	78db      	ldrb	r3, [r3, #3]
    118e:	f003 030f 	and.w	r3, r3, #15
    1192:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
    1194:	683b      	ldr	r3, [r7, #0]
    1196:	78db      	ldrb	r3, [r3, #3]
    1198:	f003 0310 	and.w	r3, r3, #16
    119c:	2b00      	cmp	r3, #0
    119e:	d004      	beq.n	11aa <GPIO_Init+0x42>
  {
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
    11a0:	683b      	ldr	r3, [r7, #0]
    11a2:	789b      	ldrb	r3, [r3, #2]
    11a4:	69fa      	ldr	r2, [r7, #28]
    11a6:	4313      	orrs	r3, r2
    11a8:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
    11aa:	683b      	ldr	r3, [r7, #0]
    11ac:	881b      	ldrh	r3, [r3, #0]
    11ae:	b2db      	uxtb	r3, r3
    11b0:	2b00      	cmp	r3, #0
    11b2:	d044      	beq.n	123e <GPIO_Init+0xd6>
  {
    tmpreg = GPIOx->CRL;
    11b4:	687b      	ldr	r3, [r7, #4]
    11b6:	681b      	ldr	r3, [r3, #0]
    11b8:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    11ba:	2300      	movs	r3, #0
    11bc:	61bb      	str	r3, [r7, #24]
    11be:	e038      	b.n	1232 <GPIO_Init+0xca>
    {
      pos = ((uint32_t)0x01) << pinpos;
    11c0:	69bb      	ldr	r3, [r7, #24]
    11c2:	2201      	movs	r2, #1
    11c4:	fa02 f303 	lsl.w	r3, r2, r3
    11c8:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
    11ca:	683b      	ldr	r3, [r7, #0]
    11cc:	881b      	ldrh	r3, [r3, #0]
    11ce:	461a      	mov	r2, r3
    11d0:	68fb      	ldr	r3, [r7, #12]
    11d2:	4013      	ands	r3, r2
    11d4:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    11d6:	693a      	ldr	r2, [r7, #16]
    11d8:	68fb      	ldr	r3, [r7, #12]
    11da:	429a      	cmp	r2, r3
    11dc:	d126      	bne.n	122c <GPIO_Init+0xc4>
      {
        pos = pinpos << 2;
    11de:	69bb      	ldr	r3, [r7, #24]
    11e0:	009b      	lsls	r3, r3, #2
    11e2:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    11e4:	68fb      	ldr	r3, [r7, #12]
    11e6:	220f      	movs	r2, #15
    11e8:	fa02 f303 	lsl.w	r3, r2, r3
    11ec:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    11ee:	68bb      	ldr	r3, [r7, #8]
    11f0:	43db      	mvns	r3, r3
    11f2:	697a      	ldr	r2, [r7, #20]
    11f4:	4013      	ands	r3, r2
    11f6:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    11f8:	68fb      	ldr	r3, [r7, #12]
    11fa:	69fa      	ldr	r2, [r7, #28]
    11fc:	fa02 f303 	lsl.w	r3, r2, r3
    1200:	697a      	ldr	r2, [r7, #20]
    1202:	4313      	orrs	r3, r2
    1204:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    1206:	683b      	ldr	r3, [r7, #0]
    1208:	78db      	ldrb	r3, [r3, #3]
    120a:	2b28      	cmp	r3, #40	; 0x28
    120c:	d105      	bne.n	121a <GPIO_Init+0xb2>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
    120e:	69bb      	ldr	r3, [r7, #24]
    1210:	2201      	movs	r2, #1
    1212:	409a      	lsls	r2, r3
    1214:	687b      	ldr	r3, [r7, #4]
    1216:	615a      	str	r2, [r3, #20]
    1218:	e008      	b.n	122c <GPIO_Init+0xc4>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    121a:	683b      	ldr	r3, [r7, #0]
    121c:	78db      	ldrb	r3, [r3, #3]
    121e:	2b48      	cmp	r3, #72	; 0x48
    1220:	d104      	bne.n	122c <GPIO_Init+0xc4>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
    1222:	69bb      	ldr	r3, [r7, #24]
    1224:	2201      	movs	r2, #1
    1226:	409a      	lsls	r2, r3
    1228:	687b      	ldr	r3, [r7, #4]
    122a:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    122c:	69bb      	ldr	r3, [r7, #24]
    122e:	3301      	adds	r3, #1
    1230:	61bb      	str	r3, [r7, #24]
    1232:	69bb      	ldr	r3, [r7, #24]
    1234:	2b07      	cmp	r3, #7
    1236:	d9c3      	bls.n	11c0 <GPIO_Init+0x58>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
    1238:	687b      	ldr	r3, [r7, #4]
    123a:	697a      	ldr	r2, [r7, #20]
    123c:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
    123e:	683b      	ldr	r3, [r7, #0]
    1240:	881b      	ldrh	r3, [r3, #0]
    1242:	2bff      	cmp	r3, #255	; 0xff
    1244:	d946      	bls.n	12d4 <GPIO_Init+0x16c>
  {
    tmpreg = GPIOx->CRH;
    1246:	687b      	ldr	r3, [r7, #4]
    1248:	685b      	ldr	r3, [r3, #4]
    124a:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    124c:	2300      	movs	r3, #0
    124e:	61bb      	str	r3, [r7, #24]
    1250:	e03a      	b.n	12c8 <GPIO_Init+0x160>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
    1252:	69bb      	ldr	r3, [r7, #24]
    1254:	3308      	adds	r3, #8
    1256:	2201      	movs	r2, #1
    1258:	fa02 f303 	lsl.w	r3, r2, r3
    125c:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
    125e:	683b      	ldr	r3, [r7, #0]
    1260:	881b      	ldrh	r3, [r3, #0]
    1262:	461a      	mov	r2, r3
    1264:	68fb      	ldr	r3, [r7, #12]
    1266:	4013      	ands	r3, r2
    1268:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    126a:	693a      	ldr	r2, [r7, #16]
    126c:	68fb      	ldr	r3, [r7, #12]
    126e:	429a      	cmp	r2, r3
    1270:	d127      	bne.n	12c2 <GPIO_Init+0x15a>
      {
        pos = pinpos << 2;
    1272:	69bb      	ldr	r3, [r7, #24]
    1274:	009b      	lsls	r3, r3, #2
    1276:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    1278:	68fb      	ldr	r3, [r7, #12]
    127a:	220f      	movs	r2, #15
    127c:	fa02 f303 	lsl.w	r3, r2, r3
    1280:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    1282:	68bb      	ldr	r3, [r7, #8]
    1284:	43db      	mvns	r3, r3
    1286:	697a      	ldr	r2, [r7, #20]
    1288:	4013      	ands	r3, r2
    128a:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    128c:	68fb      	ldr	r3, [r7, #12]
    128e:	69fa      	ldr	r2, [r7, #28]
    1290:	fa02 f303 	lsl.w	r3, r2, r3
    1294:	697a      	ldr	r2, [r7, #20]
    1296:	4313      	orrs	r3, r2
    1298:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    129a:	683b      	ldr	r3, [r7, #0]
    129c:	78db      	ldrb	r3, [r3, #3]
    129e:	2b28      	cmp	r3, #40	; 0x28
    12a0:	d105      	bne.n	12ae <GPIO_Init+0x146>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12a2:	69bb      	ldr	r3, [r7, #24]
    12a4:	3308      	adds	r3, #8
    12a6:	2201      	movs	r2, #1
    12a8:	409a      	lsls	r2, r3
    12aa:	687b      	ldr	r3, [r7, #4]
    12ac:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    12ae:	683b      	ldr	r3, [r7, #0]
    12b0:	78db      	ldrb	r3, [r3, #3]
    12b2:	2b48      	cmp	r3, #72	; 0x48
    12b4:	d105      	bne.n	12c2 <GPIO_Init+0x15a>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12b6:	69bb      	ldr	r3, [r7, #24]
    12b8:	3308      	adds	r3, #8
    12ba:	2201      	movs	r2, #1
    12bc:	409a      	lsls	r2, r3
    12be:	687b      	ldr	r3, [r7, #4]
    12c0:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    12c2:	69bb      	ldr	r3, [r7, #24]
    12c4:	3301      	adds	r3, #1
    12c6:	61bb      	str	r3, [r7, #24]
    12c8:	69bb      	ldr	r3, [r7, #24]
    12ca:	2b07      	cmp	r3, #7
    12cc:	d9c1      	bls.n	1252 <GPIO_Init+0xea>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
    12ce:	687b      	ldr	r3, [r7, #4]
    12d0:	697a      	ldr	r2, [r7, #20]
    12d2:	605a      	str	r2, [r3, #4]
  }
}
    12d4:	3724      	adds	r7, #36	; 0x24
    12d6:	46bd      	mov	sp, r7
    12d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    12dc:	4770      	bx	lr
    12de:	bf00      	nop

000012e0 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
    12e0:	b480      	push	{r7}
    12e2:	b083      	sub	sp, #12
    12e4:	af00      	add	r7, sp, #0
    12e6:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
    12e8:	687b      	ldr	r3, [r7, #4]
    12ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
    12ee:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
    12f0:	687b      	ldr	r3, [r7, #4]
    12f2:	2202      	movs	r2, #2
    12f4:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
    12f6:	687b      	ldr	r3, [r7, #4]
    12f8:	2204      	movs	r2, #4
    12fa:	70da      	strb	r2, [r3, #3]
}
    12fc:	370c      	adds	r7, #12
    12fe:	46bd      	mov	sp, r7
    1300:	f85d 7b04 	ldr.w	r7, [sp], #4
    1304:	4770      	bx	lr
    1306:	bf00      	nop

00001308 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1308:	b480      	push	{r7}
    130a:	b085      	sub	sp, #20
    130c:	af00      	add	r7, sp, #0
    130e:	6078      	str	r0, [r7, #4]
    1310:	460b      	mov	r3, r1
    1312:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1314:	2300      	movs	r3, #0
    1316:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1318:	687b      	ldr	r3, [r7, #4]
    131a:	689a      	ldr	r2, [r3, #8]
    131c:	887b      	ldrh	r3, [r7, #2]
    131e:	4013      	ands	r3, r2
    1320:	2b00      	cmp	r3, #0
    1322:	d002      	beq.n	132a <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1324:	2301      	movs	r3, #1
    1326:	73fb      	strb	r3, [r7, #15]
    1328:	e001      	b.n	132e <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    132a:	2300      	movs	r3, #0
    132c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    132e:	7bfb      	ldrb	r3, [r7, #15]
}
    1330:	4618      	mov	r0, r3
    1332:	3714      	adds	r7, #20
    1334:	46bd      	mov	sp, r7
    1336:	f85d 7b04 	ldr.w	r7, [sp], #4
    133a:	4770      	bx	lr

0000133c <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
    133c:	b480      	push	{r7}
    133e:	b083      	sub	sp, #12
    1340:	af00      	add	r7, sp, #0
    1342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
    1344:	687b      	ldr	r3, [r7, #4]
    1346:	689b      	ldr	r3, [r3, #8]
    1348:	b29b      	uxth	r3, r3
}
    134a:	4618      	mov	r0, r3
    134c:	370c      	adds	r7, #12
    134e:	46bd      	mov	sp, r7
    1350:	f85d 7b04 	ldr.w	r7, [sp], #4
    1354:	4770      	bx	lr
    1356:	bf00      	nop

00001358 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1358:	b480      	push	{r7}
    135a:	b085      	sub	sp, #20
    135c:	af00      	add	r7, sp, #0
    135e:	6078      	str	r0, [r7, #4]
    1360:	460b      	mov	r3, r1
    1362:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1364:	2300      	movs	r3, #0
    1366:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1368:	687b      	ldr	r3, [r7, #4]
    136a:	68da      	ldr	r2, [r3, #12]
    136c:	887b      	ldrh	r3, [r7, #2]
    136e:	4013      	ands	r3, r2
    1370:	2b00      	cmp	r3, #0
    1372:	d002      	beq.n	137a <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1374:	2301      	movs	r3, #1
    1376:	73fb      	strb	r3, [r7, #15]
    1378:	e001      	b.n	137e <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    137a:	2300      	movs	r3, #0
    137c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    137e:	7bfb      	ldrb	r3, [r7, #15]
}
    1380:	4618      	mov	r0, r3
    1382:	3714      	adds	r7, #20
    1384:	46bd      	mov	sp, r7
    1386:	f85d 7b04 	ldr.w	r7, [sp], #4
    138a:	4770      	bx	lr

0000138c <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
    138c:	b480      	push	{r7}
    138e:	b083      	sub	sp, #12
    1390:	af00      	add	r7, sp, #0
    1392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
    1394:	687b      	ldr	r3, [r7, #4]
    1396:	68db      	ldr	r3, [r3, #12]
    1398:	b29b      	uxth	r3, r3
}
    139a:	4618      	mov	r0, r3
    139c:	370c      	adds	r7, #12
    139e:	46bd      	mov	sp, r7
    13a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    13a4:	4770      	bx	lr
    13a6:	bf00      	nop

000013a8 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13a8:	b480      	push	{r7}
    13aa:	b083      	sub	sp, #12
    13ac:	af00      	add	r7, sp, #0
    13ae:	6078      	str	r0, [r7, #4]
    13b0:	460b      	mov	r3, r1
    13b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
    13b4:	887a      	ldrh	r2, [r7, #2]
    13b6:	687b      	ldr	r3, [r7, #4]
    13b8:	611a      	str	r2, [r3, #16]
}
    13ba:	370c      	adds	r7, #12
    13bc:	46bd      	mov	sp, r7
    13be:	f85d 7b04 	ldr.w	r7, [sp], #4
    13c2:	4770      	bx	lr

000013c4 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13c4:	b480      	push	{r7}
    13c6:	b083      	sub	sp, #12
    13c8:	af00      	add	r7, sp, #0
    13ca:	6078      	str	r0, [r7, #4]
    13cc:	460b      	mov	r3, r1
    13ce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
    13d0:	887a      	ldrh	r2, [r7, #2]
    13d2:	687b      	ldr	r3, [r7, #4]
    13d4:	615a      	str	r2, [r3, #20]
}
    13d6:	370c      	adds	r7, #12
    13d8:	46bd      	mov	sp, r7
    13da:	f85d 7b04 	ldr.w	r7, [sp], #4
    13de:	4770      	bx	lr

000013e0 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
    13e0:	b480      	push	{r7}
    13e2:	b083      	sub	sp, #12
    13e4:	af00      	add	r7, sp, #0
    13e6:	6078      	str	r0, [r7, #4]
    13e8:	4613      	mov	r3, r2
    13ea:	460a      	mov	r2, r1
    13ec:	807a      	strh	r2, [r7, #2]
    13ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
    13f0:	787b      	ldrb	r3, [r7, #1]
    13f2:	2b00      	cmp	r3, #0
    13f4:	d003      	beq.n	13fe <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
    13f6:	887a      	ldrh	r2, [r7, #2]
    13f8:	687b      	ldr	r3, [r7, #4]
    13fa:	611a      	str	r2, [r3, #16]
    13fc:	e002      	b.n	1404 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
    13fe:	887a      	ldrh	r2, [r7, #2]
    1400:	687b      	ldr	r3, [r7, #4]
    1402:	615a      	str	r2, [r3, #20]
  }
}
    1404:	370c      	adds	r7, #12
    1406:	46bd      	mov	sp, r7
    1408:	f85d 7b04 	ldr.w	r7, [sp], #4
    140c:	4770      	bx	lr
    140e:	bf00      	nop

00001410 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
    1410:	b480      	push	{r7}
    1412:	b083      	sub	sp, #12
    1414:	af00      	add	r7, sp, #0
    1416:	6078      	str	r0, [r7, #4]
    1418:	460b      	mov	r3, r1
    141a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
    141c:	887a      	ldrh	r2, [r7, #2]
    141e:	687b      	ldr	r3, [r7, #4]
    1420:	60da      	str	r2, [r3, #12]
}
    1422:	370c      	adds	r7, #12
    1424:	46bd      	mov	sp, r7
    1426:	f85d 7b04 	ldr.w	r7, [sp], #4
    142a:	4770      	bx	lr

0000142c <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    142c:	b480      	push	{r7}
    142e:	b085      	sub	sp, #20
    1430:	af00      	add	r7, sp, #0
    1432:	6078      	str	r0, [r7, #4]
    1434:	460b      	mov	r3, r1
    1436:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0x00010000;
    1438:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    143c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
    143e:	887b      	ldrh	r3, [r7, #2]
    1440:	68fa      	ldr	r2, [r7, #12]
    1442:	4313      	orrs	r3, r2
    1444:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1446:	687b      	ldr	r3, [r7, #4]
    1448:	68fa      	ldr	r2, [r7, #12]
    144a:	619a      	str	r2, [r3, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
    144c:	887a      	ldrh	r2, [r7, #2]
    144e:	687b      	ldr	r3, [r7, #4]
    1450:	619a      	str	r2, [r3, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1452:	687b      	ldr	r3, [r7, #4]
    1454:	68fa      	ldr	r2, [r7, #12]
    1456:	619a      	str	r2, [r3, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    1458:	687b      	ldr	r3, [r7, #4]
    145a:	699b      	ldr	r3, [r3, #24]
    145c:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    145e:	687b      	ldr	r3, [r7, #4]
    1460:	699b      	ldr	r3, [r3, #24]
    1462:	60fb      	str	r3, [r7, #12]
}
    1464:	3714      	adds	r7, #20
    1466:	46bd      	mov	sp, r7
    1468:	f85d 7b04 	ldr.w	r7, [sp], #4
    146c:	4770      	bx	lr
    146e:	bf00      	nop

00001470 <GPIO_EventOutputConfig>:
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    1470:	b480      	push	{r7}
    1472:	b085      	sub	sp, #20
    1474:	af00      	add	r7, sp, #0
    1476:	4602      	mov	r2, r0
    1478:	460b      	mov	r3, r1
    147a:	71fa      	strb	r2, [r7, #7]
    147c:	71bb      	strb	r3, [r7, #6]
  uint32_t tmpreg = 0x00;
    147e:	2300      	movs	r3, #0
    1480:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmpreg = AFIO->EVCR;
    1482:	2300      	movs	r3, #0
    1484:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1488:	681b      	ldr	r3, [r3, #0]
    148a:	60fb      	str	r3, [r7, #12]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
    148c:	68fa      	ldr	r2, [r7, #12]
    148e:	f64f 7380 	movw	r3, #65408	; 0xff80
    1492:	4013      	ands	r3, r2
    1494:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
    1496:	79fb      	ldrb	r3, [r7, #7]
    1498:	011b      	lsls	r3, r3, #4
    149a:	68fa      	ldr	r2, [r7, #12]
    149c:	4313      	orrs	r3, r2
    149e:	60fb      	str	r3, [r7, #12]
  tmpreg |= GPIO_PinSource;
    14a0:	79bb      	ldrb	r3, [r7, #6]
    14a2:	68fa      	ldr	r2, [r7, #12]
    14a4:	4313      	orrs	r3, r2
    14a6:	60fb      	str	r3, [r7, #12]
  AFIO->EVCR = tmpreg;
    14a8:	2300      	movs	r3, #0
    14aa:	f2c4 0301 	movt	r3, #16385	; 0x4001
    14ae:	68fa      	ldr	r2, [r7, #12]
    14b0:	601a      	str	r2, [r3, #0]
}
    14b2:	3714      	adds	r7, #20
    14b4:	46bd      	mov	sp, r7
    14b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    14ba:	4770      	bx	lr

000014bc <GPIO_EventOutputCmd>:
  * @param  NewState: new state of the Event output.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_EventOutputCmd(FunctionalState NewState)
{
    14bc:	b480      	push	{r7}
    14be:	b083      	sub	sp, #12
    14c0:	af00      	add	r7, sp, #0
    14c2:	4603      	mov	r3, r0
    14c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
    14c6:	231c      	movs	r3, #28
    14c8:	f2c4 2320 	movt	r3, #16928	; 0x4220
    14cc:	79fa      	ldrb	r2, [r7, #7]
    14ce:	601a      	str	r2, [r3, #0]
}
    14d0:	370c      	adds	r7, #12
    14d2:	46bd      	mov	sp, r7
    14d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    14d8:	4770      	bx	lr
    14da:	bf00      	nop

000014dc <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
    14dc:	b480      	push	{r7}
    14de:	b087      	sub	sp, #28
    14e0:	af00      	add	r7, sp, #0
    14e2:	6078      	str	r0, [r7, #4]
    14e4:	460b      	mov	r3, r1
    14e6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
    14e8:	2300      	movs	r3, #0
    14ea:	613b      	str	r3, [r7, #16]
    14ec:	2300      	movs	r3, #0
    14ee:	60fb      	str	r3, [r7, #12]
    14f0:	2300      	movs	r3, #0
    14f2:	617b      	str	r3, [r7, #20]
    14f4:	2300      	movs	r3, #0
    14f6:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    14f8:	687b      	ldr	r3, [r7, #4]
    14fa:	2b00      	cmp	r3, #0
    14fc:	da05      	bge.n	150a <GPIO_PinRemapConfig+0x2e>
  {
    tmpreg = AFIO->MAPR2;
    14fe:	2300      	movs	r3, #0
    1500:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1504:	69db      	ldr	r3, [r3, #28]
    1506:	617b      	str	r3, [r7, #20]
    1508:	e004      	b.n	1514 <GPIO_PinRemapConfig+0x38>
  }
  else
  {
    tmpreg = AFIO->MAPR;
    150a:	2300      	movs	r3, #0
    150c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1510:	685b      	ldr	r3, [r3, #4]
    1512:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
    1514:	687b      	ldr	r3, [r7, #4]
    1516:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    151a:	0c1b      	lsrs	r3, r3, #16
    151c:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
    151e:	687b      	ldr	r3, [r7, #4]
    1520:	b29b      	uxth	r3, r3
    1522:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
    1524:	687b      	ldr	r3, [r7, #4]
    1526:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    152a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
    152e:	d10e      	bne.n	154e <GPIO_PinRemapConfig+0x72>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    1530:	697b      	ldr	r3, [r7, #20]
    1532:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    1536:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
    1538:	2300      	movs	r3, #0
    153a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    153e:	2200      	movs	r2, #0
    1540:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1544:	6852      	ldr	r2, [r2, #4]
    1546:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
    154a:	605a      	str	r2, [r3, #4]
    154c:	e021      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
    154e:	687b      	ldr	r3, [r7, #4]
    1550:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    1554:	2b00      	cmp	r3, #0
    1556:	d00e      	beq.n	1576 <GPIO_PinRemapConfig+0x9a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
    1558:	68bb      	ldr	r3, [r7, #8]
    155a:	2203      	movs	r2, #3
    155c:	fa02 f303 	lsl.w	r3, r2, r3
    1560:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
    1562:	68fb      	ldr	r3, [r7, #12]
    1564:	43db      	mvns	r3, r3
    1566:	697a      	ldr	r2, [r7, #20]
    1568:	4013      	ands	r3, r2
    156a:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    156c:	697b      	ldr	r3, [r7, #20]
    156e:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1572:	617b      	str	r3, [r7, #20]
    1574:	e00d      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    1576:	687b      	ldr	r3, [r7, #4]
    1578:	0d5b      	lsrs	r3, r3, #21
    157a:	011b      	lsls	r3, r3, #4
    157c:	693a      	ldr	r2, [r7, #16]
    157e:	fa02 f303 	lsl.w	r3, r2, r3
    1582:	43db      	mvns	r3, r3
    1584:	697a      	ldr	r2, [r7, #20]
    1586:	4013      	ands	r3, r2
    1588:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    158a:	697b      	ldr	r3, [r7, #20]
    158c:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1590:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
    1592:	78fb      	ldrb	r3, [r7, #3]
    1594:	2b00      	cmp	r3, #0
    1596:	d008      	beq.n	15aa <GPIO_PinRemapConfig+0xce>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
    1598:	687b      	ldr	r3, [r7, #4]
    159a:	0d5b      	lsrs	r3, r3, #21
    159c:	011b      	lsls	r3, r3, #4
    159e:	693a      	ldr	r2, [r7, #16]
    15a0:	fa02 f303 	lsl.w	r3, r2, r3
    15a4:	697a      	ldr	r2, [r7, #20]
    15a6:	4313      	orrs	r3, r2
    15a8:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    15aa:	687b      	ldr	r3, [r7, #4]
    15ac:	2b00      	cmp	r3, #0
    15ae:	da05      	bge.n	15bc <GPIO_PinRemapConfig+0xe0>
  {
    AFIO->MAPR2 = tmpreg;
    15b0:	2300      	movs	r3, #0
    15b2:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15b6:	697a      	ldr	r2, [r7, #20]
    15b8:	61da      	str	r2, [r3, #28]
    15ba:	e004      	b.n	15c6 <GPIO_PinRemapConfig+0xea>
  }
  else
  {
    AFIO->MAPR = tmpreg;
    15bc:	2300      	movs	r3, #0
    15be:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15c2:	697a      	ldr	r2, [r7, #20]
    15c4:	605a      	str	r2, [r3, #4]
  }
}
    15c6:	371c      	adds	r7, #28
    15c8:	46bd      	mov	sp, r7
    15ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    15ce:	4770      	bx	lr

000015d0 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    15d0:	b490      	push	{r4, r7}
    15d2:	b084      	sub	sp, #16
    15d4:	af00      	add	r7, sp, #0
    15d6:	4602      	mov	r2, r0
    15d8:	460b      	mov	r3, r1
    15da:	71fa      	strb	r2, [r7, #7]
    15dc:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
    15de:	2300      	movs	r3, #0
    15e0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
    15e2:	79bb      	ldrb	r3, [r7, #6]
    15e4:	f003 0303 	and.w	r3, r3, #3
    15e8:	009b      	lsls	r3, r3, #2
    15ea:	220f      	movs	r2, #15
    15ec:	fa02 f303 	lsl.w	r3, r2, r3
    15f0:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
    15f2:	2300      	movs	r3, #0
    15f4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15f8:	79ba      	ldrb	r2, [r7, #6]
    15fa:	0892      	lsrs	r2, r2, #2
    15fc:	b2d2      	uxtb	r2, r2
    15fe:	4610      	mov	r0, r2
    1600:	2200      	movs	r2, #0
    1602:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1606:	79b9      	ldrb	r1, [r7, #6]
    1608:	0889      	lsrs	r1, r1, #2
    160a:	b2c9      	uxtb	r1, r1
    160c:	3102      	adds	r1, #2
    160e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    1612:	68fa      	ldr	r2, [r7, #12]
    1614:	43d2      	mvns	r2, r2
    1616:	4011      	ands	r1, r2
    1618:	1c82      	adds	r2, r0, #2
    161a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
    161e:	2300      	movs	r3, #0
    1620:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1624:	79ba      	ldrb	r2, [r7, #6]
    1626:	0892      	lsrs	r2, r2, #2
    1628:	b2d2      	uxtb	r2, r2
    162a:	4610      	mov	r0, r2
    162c:	2200      	movs	r2, #0
    162e:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1632:	79b9      	ldrb	r1, [r7, #6]
    1634:	0889      	lsrs	r1, r1, #2
    1636:	b2c9      	uxtb	r1, r1
    1638:	3102      	adds	r1, #2
    163a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    163e:	79fc      	ldrb	r4, [r7, #7]
    1640:	79ba      	ldrb	r2, [r7, #6]
    1642:	f002 0203 	and.w	r2, r2, #3
    1646:	0092      	lsls	r2, r2, #2
    1648:	fa04 f202 	lsl.w	r2, r4, r2
    164c:	4311      	orrs	r1, r2
    164e:	1c82      	adds	r2, r0, #2
    1650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    1654:	3710      	adds	r7, #16
    1656:	46bd      	mov	sp, r7
    1658:	bc90      	pop	{r4, r7}
    165a:	4770      	bx	lr

0000165c <GPIO_ETH_MediaInterfaceConfig>:
  *     @arg GPIO_ETH_MediaInterface_MII: MII mode
  *     @arg GPIO_ETH_MediaInterface_RMII: RMII mode
  * @retval None
  */
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface)
{
    165c:	b480      	push	{r7}
    165e:	b083      	sub	sp, #12
    1660:	af00      	add	r7, sp, #0
    1662:	6078      	str	r0, [r7, #4]
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface));

  /* Configure MII_RMII selection bit */
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface;
    1664:	23dc      	movs	r3, #220	; 0xdc
    1666:	f2c4 2320 	movt	r3, #16928	; 0x4220
    166a:	687a      	ldr	r2, [r7, #4]
    166c:	601a      	str	r2, [r3, #0]
}
    166e:	370c      	adds	r7, #12
    1670:	46bd      	mov	sp, r7
    1672:	f85d 7b04 	ldr.w	r7, [sp], #4
    1676:	4770      	bx	lr

00001678 <USART_DeInit>:
  *   This parameter can be one of the following values:
  *      USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
    1678:	b580      	push	{r7, lr}
    167a:	b082      	sub	sp, #8
    167c:	af00      	add	r7, sp, #0
    167e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
    1680:	687a      	ldr	r2, [r7, #4]
    1682:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    1686:	f2c4 0301 	movt	r3, #16385	; 0x4001
    168a:	429a      	cmp	r2, r3
    168c:	d10a      	bne.n	16a4 <USART_DeInit+0x2c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    168e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    1692:	2101      	movs	r1, #1
    1694:	f7ff fbe4 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
    1698:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    169c:	2100      	movs	r1, #0
    169e:	f7ff fbdf 	bl	e60 <RCC_APB2PeriphResetCmd>
    16a2:	e046      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART2)
    16a4:	687a      	ldr	r2, [r7, #4]
    16a6:	f44f 4388 	mov.w	r3, #17408	; 0x4400
    16aa:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16ae:	429a      	cmp	r2, r3
    16b0:	d10a      	bne.n	16c8 <USART_DeInit+0x50>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    16b2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16b6:	2101      	movs	r1, #1
    16b8:	f7ff fbfa 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
    16bc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16c0:	2100      	movs	r1, #0
    16c2:	f7ff fbf5 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16c6:	e034      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART3)
    16c8:	687a      	ldr	r2, [r7, #4]
    16ca:	f44f 4390 	mov.w	r3, #18432	; 0x4800
    16ce:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16d2:	429a      	cmp	r2, r3
    16d4:	d10a      	bne.n	16ec <USART_DeInit+0x74>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    16d6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16da:	2101      	movs	r1, #1
    16dc:	f7ff fbe8 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
    16e0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16e4:	2100      	movs	r1, #0
    16e6:	f7ff fbe3 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16ea:	e022      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == UART4)
    16ec:	687a      	ldr	r2, [r7, #4]
    16ee:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
    16f2:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16f6:	429a      	cmp	r2, r3
    16f8:	d10a      	bne.n	1710 <USART_DeInit+0x98>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    16fa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    16fe:	2101      	movs	r1, #1
    1700:	f7ff fbd6 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
    1704:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1708:	2100      	movs	r1, #0
    170a:	f7ff fbd1 	bl	eb0 <RCC_APB1PeriphResetCmd>
    170e:	e010      	b.n	1732 <USART_DeInit+0xba>
  }
  else
  {
    if (USARTx == UART5)
    1710:	687a      	ldr	r2, [r7, #4]
    1712:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    1716:	f2c4 0300 	movt	r3, #16384	; 0x4000
    171a:	429a      	cmp	r2, r3
    171c:	d109      	bne.n	1732 <USART_DeInit+0xba>
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    171e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    1722:	2101      	movs	r1, #1
    1724:	f7ff fbc4 	bl	eb0 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    1728:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    172c:	2100      	movs	r1, #0
    172e:	f7ff fbbf 	bl	eb0 <RCC_APB1PeriphResetCmd>
    }
  }
}
    1732:	3708      	adds	r7, #8
    1734:	46bd      	mov	sp, r7
    1736:	bd80      	pop	{r7, pc}

00001738 <USART_Init>:
  *         that contains the configuration information for the specified USART
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
    1738:	b580      	push	{r7, lr}
    173a:	b08c      	sub	sp, #48	; 0x30
    173c:	af00      	add	r7, sp, #0
    173e:	6078      	str	r0, [r7, #4]
    1740:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
    1742:	2300      	movs	r3, #0
    1744:	62fb      	str	r3, [r7, #44]	; 0x2c
    1746:	2300      	movs	r3, #0
    1748:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
    174a:	2300      	movs	r3, #0
    174c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
    174e:	2300      	movs	r3, #0
    1750:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
    1752:	2300      	movs	r3, #0
    1754:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    1756:	687b      	ldr	r3, [r7, #4]
    1758:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    175a:	687b      	ldr	r3, [r7, #4]
    175c:	8a1b      	ldrh	r3, [r3, #16]
    175e:	b29b      	uxth	r3, r3
    1760:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
    1762:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1764:	f64c 73ff 	movw	r3, #53247	; 0xcfff
    1768:	4013      	ands	r3, r2
    176a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
    176c:	683b      	ldr	r3, [r7, #0]
    176e:	88db      	ldrh	r3, [r3, #6]
    1770:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1772:	4313      	orrs	r3, r2
    1774:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1778:	b29a      	uxth	r2, r3
    177a:	687b      	ldr	r3, [r7, #4]
    177c:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
    177e:	687b      	ldr	r3, [r7, #4]
    1780:	899b      	ldrh	r3, [r3, #12]
    1782:	b29b      	uxth	r3, r3
    1784:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
    1786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1788:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
    178c:	4013      	ands	r3, r2
    178e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    1790:	683b      	ldr	r3, [r7, #0]
    1792:	889a      	ldrh	r2, [r3, #4]
    1794:	683b      	ldr	r3, [r7, #0]
    1796:	891b      	ldrh	r3, [r3, #8]
    1798:	4313      	orrs	r3, r2
    179a:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
    179c:	683b      	ldr	r3, [r7, #0]
    179e:	895b      	ldrh	r3, [r3, #10]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    17a0:	4313      	orrs	r3, r2
    17a2:	b29b      	uxth	r3, r3
    17a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17a6:	4313      	orrs	r3, r2
    17a8:	62fb      	str	r3, [r7, #44]	; 0x2c
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
    17aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17ac:	b29a      	uxth	r2, r3
    17ae:	687b      	ldr	r3, [r7, #4]
    17b0:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/
  tmpreg = USARTx->CR3;
    17b2:	687b      	ldr	r3, [r7, #4]
    17b4:	8a9b      	ldrh	r3, [r3, #20]
    17b6:	b29b      	uxth	r3, r3
    17b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
    17ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17bc:	f64f 43ff 	movw	r3, #64767	; 0xfcff
    17c0:	4013      	ands	r3, r2
    17c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
    17c4:	683b      	ldr	r3, [r7, #0]
    17c6:	899b      	ldrh	r3, [r3, #12]
    17c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17ca:	4313      	orrs	r3, r2
    17cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
    17ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17d0:	b29a      	uxth	r2, r3
    17d2:	687b      	ldr	r3, [r7, #4]
    17d4:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
    17d6:	f107 0308 	add.w	r3, r7, #8
    17da:	4618      	mov	r0, r3
    17dc:	f7ff f9ea 	bl	bb4 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
    17e0:	69fa      	ldr	r2, [r7, #28]
    17e2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    17e6:	f2c4 0301 	movt	r3, #16385	; 0x4001
    17ea:	429a      	cmp	r2, r3
    17ec:	d102      	bne.n	17f4 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
    17ee:	697b      	ldr	r3, [r7, #20]
    17f0:	62bb      	str	r3, [r7, #40]	; 0x28
    17f2:	e001      	b.n	17f8 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
    17f4:	693b      	ldr	r3, [r7, #16]
    17f6:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    17f8:	687b      	ldr	r3, [r7, #4]
    17fa:	899b      	ldrh	r3, [r3, #12]
    17fc:	b29b      	uxth	r3, r3
    17fe:	b29b      	uxth	r3, r3
    1800:	b21b      	sxth	r3, r3
    1802:	2b00      	cmp	r3, #0
    1804:	da0c      	bge.n	1820 <USART_Init+0xe8>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));
    1806:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1808:	4613      	mov	r3, r2
    180a:	009b      	lsls	r3, r3, #2
    180c:	4413      	add	r3, r2
    180e:	009a      	lsls	r2, r3, #2
    1810:	441a      	add	r2, r3
    1812:	683b      	ldr	r3, [r7, #0]
    1814:	681b      	ldr	r3, [r3, #0]
    1816:	005b      	lsls	r3, r3, #1
    1818:	fbb2 f3f3 	udiv	r3, r2, r3
    181c:	627b      	str	r3, [r7, #36]	; 0x24
    181e:	e00b      	b.n	1838 <USART_Init+0x100>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));
    1820:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1822:	4613      	mov	r3, r2
    1824:	009b      	lsls	r3, r3, #2
    1826:	4413      	add	r3, r2
    1828:	009a      	lsls	r2, r3, #2
    182a:	441a      	add	r2, r3
    182c:	683b      	ldr	r3, [r7, #0]
    182e:	681b      	ldr	r3, [r3, #0]
    1830:	009b      	lsls	r3, r3, #2
    1832:	fbb2 f3f3 	udiv	r3, r2, r3
    1836:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
    1838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    183a:	f248 531f 	movw	r3, #34079	; 0x851f
    183e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    1842:	fba3 1302 	umull	r1, r3, r3, r2
    1846:	095b      	lsrs	r3, r3, #5
    1848:	011b      	lsls	r3, r3, #4
    184a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
    184c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    184e:	091b      	lsrs	r3, r3, #4
    1850:	2264      	movs	r2, #100	; 0x64
    1852:	fb02 f303 	mul.w	r3, r2, r3
    1856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1858:	1ad3      	subs	r3, r2, r3
    185a:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    185c:	687b      	ldr	r3, [r7, #4]
    185e:	899b      	ldrh	r3, [r3, #12]
    1860:	b29b      	uxth	r3, r3
    1862:	b29b      	uxth	r3, r3
    1864:	b21b      	sxth	r3, r3
    1866:	2b00      	cmp	r3, #0
    1868:	da10      	bge.n	188c <USART_Init+0x154>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
    186a:	6a3b      	ldr	r3, [r7, #32]
    186c:	00db      	lsls	r3, r3, #3
    186e:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1872:	f248 531f 	movw	r3, #34079	; 0x851f
    1876:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    187a:	fba3 1302 	umull	r1, r3, r3, r2
    187e:	095b      	lsrs	r3, r3, #5
    1880:	f003 0307 	and.w	r3, r3, #7
    1884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1886:	4313      	orrs	r3, r2
    1888:	62fb      	str	r3, [r7, #44]	; 0x2c
    188a:	e00f      	b.n	18ac <USART_Init+0x174>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
    188c:	6a3b      	ldr	r3, [r7, #32]
    188e:	011b      	lsls	r3, r3, #4
    1890:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1894:	f248 531f 	movw	r3, #34079	; 0x851f
    1898:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    189c:	fba3 1302 	umull	r1, r3, r3, r2
    18a0:	095b      	lsrs	r3, r3, #5
    18a2:	f003 030f 	and.w	r3, r3, #15
    18a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    18a8:	4313      	orrs	r3, r2
    18aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
    18ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    18ae:	b29a      	uxth	r2, r3
    18b0:	687b      	ldr	r3, [r7, #4]
    18b2:	811a      	strh	r2, [r3, #8]
}
    18b4:	3730      	adds	r7, #48	; 0x30
    18b6:	46bd      	mov	sp, r7
    18b8:	bd80      	pop	{r7, pc}
    18ba:	bf00      	nop

000018bc <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
    18bc:	b480      	push	{r7}
    18be:	b083      	sub	sp, #12
    18c0:	af00      	add	r7, sp, #0
    18c2:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
    18c4:	687b      	ldr	r3, [r7, #4]
    18c6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
    18ca:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
    18cc:	687b      	ldr	r3, [r7, #4]
    18ce:	2200      	movs	r2, #0
    18d0:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
    18d2:	687b      	ldr	r3, [r7, #4]
    18d4:	2200      	movs	r2, #0
    18d6:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
    18d8:	687b      	ldr	r3, [r7, #4]
    18da:	2200      	movs	r2, #0
    18dc:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    18de:	687b      	ldr	r3, [r7, #4]
    18e0:	220c      	movs	r2, #12
    18e2:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    18e4:	687b      	ldr	r3, [r7, #4]
    18e6:	2200      	movs	r2, #0
    18e8:	819a      	strh	r2, [r3, #12]
}
    18ea:	370c      	adds	r7, #12
    18ec:	46bd      	mov	sp, r7
    18ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    18f2:	4770      	bx	lr

000018f4 <USART_ClockInit>:
  *         USART peripheral.
  * @note The Smart Card and Synchronous modes are not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    18f4:	b480      	push	{r7}
    18f6:	b085      	sub	sp, #20
    18f8:	af00      	add	r7, sp, #0
    18fa:	6078      	str	r0, [r7, #4]
    18fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
    18fe:	2300      	movs	r3, #0
    1900:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    1902:	687b      	ldr	r3, [r7, #4]
    1904:	8a1b      	ldrh	r3, [r3, #16]
    1906:	b29b      	uxth	r3, r3
    1908:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
    190a:	68fa      	ldr	r2, [r7, #12]
    190c:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
    1910:	4013      	ands	r3, r2
    1912:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1914:	683b      	ldr	r3, [r7, #0]
    1916:	881a      	ldrh	r2, [r3, #0]
    1918:	683b      	ldr	r3, [r7, #0]
    191a:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
    191c:	4313      	orrs	r3, r2
    191e:	b29a      	uxth	r2, r3
    1920:	683b      	ldr	r3, [r7, #0]
    1922:	889b      	ldrh	r3, [r3, #4]
    1924:	4313      	orrs	r3, r2
    1926:	b29a      	uxth	r2, r3
    1928:	683b      	ldr	r3, [r7, #0]
    192a:	88db      	ldrh	r3, [r3, #6]
    192c:	4313      	orrs	r3, r2
    192e:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1930:	68fa      	ldr	r2, [r7, #12]
    1932:	4313      	orrs	r3, r2
    1934:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1936:	68fb      	ldr	r3, [r7, #12]
    1938:	b29a      	uxth	r2, r3
    193a:	687b      	ldr	r3, [r7, #4]
    193c:	821a      	strh	r2, [r3, #16]
}
    193e:	3714      	adds	r7, #20
    1940:	46bd      	mov	sp, r7
    1942:	f85d 7b04 	ldr.w	r7, [sp], #4
    1946:	4770      	bx	lr

00001948 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    1948:	b480      	push	{r7}
    194a:	b083      	sub	sp, #12
    194c:	af00      	add	r7, sp, #0
    194e:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
    1950:	687b      	ldr	r3, [r7, #4]
    1952:	2200      	movs	r2, #0
    1954:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
    1956:	687b      	ldr	r3, [r7, #4]
    1958:	2200      	movs	r2, #0
    195a:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
    195c:	687b      	ldr	r3, [r7, #4]
    195e:	2200      	movs	r2, #0
    1960:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
    1962:	687b      	ldr	r3, [r7, #4]
    1964:	2200      	movs	r2, #0
    1966:	80da      	strh	r2, [r3, #6]
}
    1968:	370c      	adds	r7, #12
    196a:	46bd      	mov	sp, r7
    196c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1970:	4770      	bx	lr
    1972:	bf00      	nop

00001974 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1974:	b480      	push	{r7}
    1976:	b083      	sub	sp, #12
    1978:	af00      	add	r7, sp, #0
    197a:	6078      	str	r0, [r7, #4]
    197c:	460b      	mov	r3, r1
    197e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1980:	78fb      	ldrb	r3, [r7, #3]
    1982:	2b00      	cmp	r3, #0
    1984:	d008      	beq.n	1998 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
    1986:	687b      	ldr	r3, [r7, #4]
    1988:	899b      	ldrh	r3, [r3, #12]
    198a:	b29b      	uxth	r3, r3
    198c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1990:	b29a      	uxth	r2, r3
    1992:	687b      	ldr	r3, [r7, #4]
    1994:	819a      	strh	r2, [r3, #12]
    1996:	e007      	b.n	19a8 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
    1998:	687b      	ldr	r3, [r7, #4]
    199a:	899b      	ldrh	r3, [r3, #12]
    199c:	b29b      	uxth	r3, r3
    199e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    19a2:	b29a      	uxth	r2, r3
    19a4:	687b      	ldr	r3, [r7, #4]
    19a6:	819a      	strh	r2, [r3, #12]
  }
}
    19a8:	370c      	adds	r7, #12
    19aa:	46bd      	mov	sp, r7
    19ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    19b0:	4770      	bx	lr
    19b2:	bf00      	nop

000019b4 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
    19b4:	b480      	push	{r7}
    19b6:	b087      	sub	sp, #28
    19b8:	af00      	add	r7, sp, #0
    19ba:	6078      	str	r0, [r7, #4]
    19bc:	4613      	mov	r3, r2
    19be:	460a      	mov	r2, r1
    19c0:	807a      	strh	r2, [r7, #2]
    19c2:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
    19c4:	2300      	movs	r3, #0
    19c6:	613b      	str	r3, [r7, #16]
    19c8:	2300      	movs	r3, #0
    19ca:	60fb      	str	r3, [r7, #12]
    19cc:	2300      	movs	r3, #0
    19ce:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
    19d0:	2300      	movs	r3, #0
    19d2:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    19d4:	687b      	ldr	r3, [r7, #4]
    19d6:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    19d8:	887b      	ldrh	r3, [r7, #2]
    19da:	b2db      	uxtb	r3, r3
    19dc:	095b      	lsrs	r3, r3, #5
    19de:	b2db      	uxtb	r3, r3
    19e0:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
    19e2:	887b      	ldrh	r3, [r7, #2]
    19e4:	f003 031f 	and.w	r3, r3, #31
    19e8:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
    19ea:	68fb      	ldr	r3, [r7, #12]
    19ec:	2201      	movs	r2, #1
    19ee:	fa02 f303 	lsl.w	r3, r2, r3
    19f2:	60bb      	str	r3, [r7, #8]

  if (usartreg == 0x01) /* The IT is in CR1 register */
    19f4:	693b      	ldr	r3, [r7, #16]
    19f6:	2b01      	cmp	r3, #1
    19f8:	d103      	bne.n	1a02 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
    19fa:	697b      	ldr	r3, [r7, #20]
    19fc:	330c      	adds	r3, #12
    19fe:	617b      	str	r3, [r7, #20]
    1a00:	e009      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
    1a02:	693b      	ldr	r3, [r7, #16]
    1a04:	2b02      	cmp	r3, #2
    1a06:	d103      	bne.n	1a10 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
    1a08:	697b      	ldr	r3, [r7, #20]
    1a0a:	3310      	adds	r3, #16
    1a0c:	617b      	str	r3, [r7, #20]
    1a0e:	e002      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14;
    1a10:	697b      	ldr	r3, [r7, #20]
    1a12:	3314      	adds	r3, #20
    1a14:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
    1a16:	787b      	ldrb	r3, [r7, #1]
    1a18:	2b00      	cmp	r3, #0
    1a1a:	d006      	beq.n	1a2a <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
    1a1c:	697b      	ldr	r3, [r7, #20]
    1a1e:	697a      	ldr	r2, [r7, #20]
    1a20:	6811      	ldr	r1, [r2, #0]
    1a22:	68ba      	ldr	r2, [r7, #8]
    1a24:	430a      	orrs	r2, r1
    1a26:	601a      	str	r2, [r3, #0]
    1a28:	e006      	b.n	1a38 <USART_ITConfig+0x84>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
    1a2a:	697b      	ldr	r3, [r7, #20]
    1a2c:	697a      	ldr	r2, [r7, #20]
    1a2e:	6811      	ldr	r1, [r2, #0]
    1a30:	68ba      	ldr	r2, [r7, #8]
    1a32:	43d2      	mvns	r2, r2
    1a34:	400a      	ands	r2, r1
    1a36:	601a      	str	r2, [r3, #0]
  }
}
    1a38:	371c      	adds	r7, #28
    1a3a:	46bd      	mov	sp, r7
    1a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a40:	4770      	bx	lr
    1a42:	bf00      	nop

00001a44 <USART_DMACmd>:
  * @note The DMA mode is not available for UART5 except in the STM32
  *       High density value line devices(STM32F10X_HD_VL).
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
    1a44:	b480      	push	{r7}
    1a46:	b083      	sub	sp, #12
    1a48:	af00      	add	r7, sp, #0
    1a4a:	6078      	str	r0, [r7, #4]
    1a4c:	4613      	mov	r3, r2
    1a4e:	460a      	mov	r2, r1
    1a50:	807a      	strh	r2, [r7, #2]
    1a52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1a54:	787b      	ldrb	r3, [r7, #1]
    1a56:	2b00      	cmp	r3, #0
    1a58:	d008      	beq.n	1a6c <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
    1a5a:	687b      	ldr	r3, [r7, #4]
    1a5c:	8a9b      	ldrh	r3, [r3, #20]
    1a5e:	b29a      	uxth	r2, r3
    1a60:	887b      	ldrh	r3, [r7, #2]
    1a62:	4313      	orrs	r3, r2
    1a64:	b29a      	uxth	r2, r3
    1a66:	687b      	ldr	r3, [r7, #4]
    1a68:	829a      	strh	r2, [r3, #20]
    1a6a:	e009      	b.n	1a80 <USART_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
    1a6c:	687b      	ldr	r3, [r7, #4]
    1a6e:	8a9b      	ldrh	r3, [r3, #20]
    1a70:	b29a      	uxth	r2, r3
    1a72:	887b      	ldrh	r3, [r7, #2]
    1a74:	43db      	mvns	r3, r3
    1a76:	b29b      	uxth	r3, r3
    1a78:	4013      	ands	r3, r2
    1a7a:	b29a      	uxth	r2, r3
    1a7c:	687b      	ldr	r3, [r7, #4]
    1a7e:	829a      	strh	r2, [r3, #20]
  }
}
    1a80:	370c      	adds	r7, #12
    1a82:	46bd      	mov	sp, r7
    1a84:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a88:	4770      	bx	lr
    1a8a:	bf00      	nop

00001a8c <USART_SetAddress>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
    1a8c:	b480      	push	{r7}
    1a8e:	b083      	sub	sp, #12
    1a90:	af00      	add	r7, sp, #0
    1a92:	6078      	str	r0, [r7, #4]
    1a94:	460b      	mov	r3, r1
    1a96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address));

  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
    1a98:	687b      	ldr	r3, [r7, #4]
    1a9a:	8a1b      	ldrh	r3, [r3, #16]
    1a9c:	b29b      	uxth	r3, r3
    1a9e:	f023 030f 	bic.w	r3, r3, #15
    1aa2:	b29a      	uxth	r2, r3
    1aa4:	687b      	ldr	r3, [r7, #4]
    1aa6:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
    1aa8:	687b      	ldr	r3, [r7, #4]
    1aaa:	8a1b      	ldrh	r3, [r3, #16]
    1aac:	b29a      	uxth	r2, r3
    1aae:	78fb      	ldrb	r3, [r7, #3]
    1ab0:	b29b      	uxth	r3, r3
    1ab2:	4313      	orrs	r3, r2
    1ab4:	b29a      	uxth	r2, r3
    1ab6:	687b      	ldr	r3, [r7, #4]
    1ab8:	821a      	strh	r2, [r3, #16]
}
    1aba:	370c      	adds	r7, #12
    1abc:	46bd      	mov	sp, r7
    1abe:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ac2:	4770      	bx	lr

00001ac4 <USART_WakeUpConfig>:
  *     @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *     @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
    1ac4:	b480      	push	{r7}
    1ac6:	b083      	sub	sp, #12
    1ac8:	af00      	add	r7, sp, #0
    1aca:	6078      	str	r0, [r7, #4]
    1acc:	460b      	mov	r3, r1
    1ace:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));

  USARTx->CR1 &= CR1_WAKE_Mask;
    1ad0:	687b      	ldr	r3, [r7, #4]
    1ad2:	899b      	ldrh	r3, [r3, #12]
    1ad4:	b29b      	uxth	r3, r3
    1ad6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1ada:	b29a      	uxth	r2, r3
    1adc:	687b      	ldr	r3, [r7, #4]
    1ade:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
    1ae0:	687b      	ldr	r3, [r7, #4]
    1ae2:	899b      	ldrh	r3, [r3, #12]
    1ae4:	b29a      	uxth	r2, r3
    1ae6:	887b      	ldrh	r3, [r7, #2]
    1ae8:	4313      	orrs	r3, r2
    1aea:	b29a      	uxth	r2, r3
    1aec:	687b      	ldr	r3, [r7, #4]
    1aee:	819a      	strh	r2, [r3, #12]
}
    1af0:	370c      	adds	r7, #12
    1af2:	46bd      	mov	sp, r7
    1af4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1af8:	4770      	bx	lr
    1afa:	bf00      	nop

00001afc <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1afc:	b480      	push	{r7}
    1afe:	b083      	sub	sp, #12
    1b00:	af00      	add	r7, sp, #0
    1b02:	6078      	str	r0, [r7, #4]
    1b04:	460b      	mov	r3, r1
    1b06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b08:	78fb      	ldrb	r3, [r7, #3]
    1b0a:	2b00      	cmp	r3, #0
    1b0c:	d008      	beq.n	1b20 <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
    1b0e:	687b      	ldr	r3, [r7, #4]
    1b10:	899b      	ldrh	r3, [r3, #12]
    1b12:	b29b      	uxth	r3, r3
    1b14:	f043 0302 	orr.w	r3, r3, #2
    1b18:	b29a      	uxth	r2, r3
    1b1a:	687b      	ldr	r3, [r7, #4]
    1b1c:	819a      	strh	r2, [r3, #12]
    1b1e:	e007      	b.n	1b30 <USART_ReceiverWakeUpCmd+0x34>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
    1b20:	687b      	ldr	r3, [r7, #4]
    1b22:	899b      	ldrh	r3, [r3, #12]
    1b24:	b29b      	uxth	r3, r3
    1b26:	f023 0302 	bic.w	r3, r3, #2
    1b2a:	b29a      	uxth	r2, r3
    1b2c:	687b      	ldr	r3, [r7, #4]
    1b2e:	819a      	strh	r2, [r3, #12]
  }
}
    1b30:	370c      	adds	r7, #12
    1b32:	46bd      	mov	sp, r7
    1b34:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b38:	4770      	bx	lr
    1b3a:	bf00      	nop

00001b3c <USART_LINBreakDetectLengthConfig>:
  *     @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *     @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
    1b3c:	b480      	push	{r7}
    1b3e:	b083      	sub	sp, #12
    1b40:	af00      	add	r7, sp, #0
    1b42:	6078      	str	r0, [r7, #4]
    1b44:	460b      	mov	r3, r1
    1b46:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));

  USARTx->CR2 &= CR2_LBDL_Mask;
    1b48:	687b      	ldr	r3, [r7, #4]
    1b4a:	8a1b      	ldrh	r3, [r3, #16]
    1b4c:	b29b      	uxth	r3, r3
    1b4e:	f023 0320 	bic.w	r3, r3, #32
    1b52:	b29a      	uxth	r2, r3
    1b54:	687b      	ldr	r3, [r7, #4]
    1b56:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;
    1b58:	687b      	ldr	r3, [r7, #4]
    1b5a:	8a1b      	ldrh	r3, [r3, #16]
    1b5c:	b29a      	uxth	r2, r3
    1b5e:	887b      	ldrh	r3, [r7, #2]
    1b60:	4313      	orrs	r3, r2
    1b62:	b29a      	uxth	r2, r3
    1b64:	687b      	ldr	r3, [r7, #4]
    1b66:	821a      	strh	r2, [r3, #16]
}
    1b68:	370c      	adds	r7, #12
    1b6a:	46bd      	mov	sp, r7
    1b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b70:	4770      	bx	lr
    1b72:	bf00      	nop

00001b74 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1b74:	b480      	push	{r7}
    1b76:	b083      	sub	sp, #12
    1b78:	af00      	add	r7, sp, #0
    1b7a:	6078      	str	r0, [r7, #4]
    1b7c:	460b      	mov	r3, r1
    1b7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b80:	78fb      	ldrb	r3, [r7, #3]
    1b82:	2b00      	cmp	r3, #0
    1b84:	d008      	beq.n	1b98 <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
    1b86:	687b      	ldr	r3, [r7, #4]
    1b88:	8a1b      	ldrh	r3, [r3, #16]
    1b8a:	b29b      	uxth	r3, r3
    1b8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1b90:	b29a      	uxth	r2, r3
    1b92:	687b      	ldr	r3, [r7, #4]
    1b94:	821a      	strh	r2, [r3, #16]
    1b96:	e007      	b.n	1ba8 <USART_LINCmd+0x34>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
    1b98:	687b      	ldr	r3, [r7, #4]
    1b9a:	8a1b      	ldrh	r3, [r3, #16]
    1b9c:	b29b      	uxth	r3, r3
    1b9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    1ba2:	b29a      	uxth	r2, r3
    1ba4:	687b      	ldr	r3, [r7, #4]
    1ba6:	821a      	strh	r2, [r3, #16]
  }
}
    1ba8:	370c      	adds	r7, #12
    1baa:	46bd      	mov	sp, r7
    1bac:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bb0:	4770      	bx	lr
    1bb2:	bf00      	nop

00001bb4 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
    1bb4:	b480      	push	{r7}
    1bb6:	b083      	sub	sp, #12
    1bb8:	af00      	add	r7, sp, #0
    1bba:	6078      	str	r0, [r7, #4]
    1bbc:	460b      	mov	r3, r1
    1bbe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data));

  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
    1bc0:	887b      	ldrh	r3, [r7, #2]
    1bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bc6:	b29a      	uxth	r2, r3
    1bc8:	687b      	ldr	r3, [r7, #4]
    1bca:	809a      	strh	r2, [r3, #4]
}
    1bcc:	370c      	adds	r7, #12
    1bce:	46bd      	mov	sp, r7
    1bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bd4:	4770      	bx	lr
    1bd6:	bf00      	nop

00001bd8 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
    1bd8:	b480      	push	{r7}
    1bda:	b083      	sub	sp, #12
    1bdc:	af00      	add	r7, sp, #0
    1bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
    1be0:	687b      	ldr	r3, [r7, #4]
    1be2:	889b      	ldrh	r3, [r3, #4]
    1be4:	b29b      	uxth	r3, r3
    1be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bea:	b29b      	uxth	r3, r3
}
    1bec:	4618      	mov	r0, r3
    1bee:	370c      	adds	r7, #12
    1bf0:	46bd      	mov	sp, r7
    1bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bf6:	4770      	bx	lr

00001bf8 <USART_SendBreak>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
    1bf8:	b480      	push	{r7}
    1bfa:	b083      	sub	sp, #12
    1bfc:	af00      	add	r7, sp, #0
    1bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
    1c00:	687b      	ldr	r3, [r7, #4]
    1c02:	899b      	ldrh	r3, [r3, #12]
    1c04:	b29b      	uxth	r3, r3
    1c06:	f043 0301 	orr.w	r3, r3, #1
    1c0a:	b29a      	uxth	r2, r3
    1c0c:	687b      	ldr	r3, [r7, #4]
    1c0e:	819a      	strh	r2, [r3, #12]
}
    1c10:	370c      	adds	r7, #12
    1c12:	46bd      	mov	sp, r7
    1c14:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c18:	4770      	bx	lr
    1c1a:	bf00      	nop

00001c1c <USART_SetGuardTime>:
  * @param  USART_GuardTime: specifies the guard time.
  * @note The guard time bits are not available for UART4 and UART5.
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{
    1c1c:	b480      	push	{r7}
    1c1e:	b083      	sub	sp, #12
    1c20:	af00      	add	r7, sp, #0
    1c22:	6078      	str	r0, [r7, #4]
    1c24:	460b      	mov	r3, r1
    1c26:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));

  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
    1c28:	687b      	ldr	r3, [r7, #4]
    1c2a:	8b1b      	ldrh	r3, [r3, #24]
    1c2c:	b29b      	uxth	r3, r3
    1c2e:	b2db      	uxtb	r3, r3
    1c30:	b29a      	uxth	r2, r3
    1c32:	687b      	ldr	r3, [r7, #4]
    1c34:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
    1c36:	687b      	ldr	r3, [r7, #4]
    1c38:	8b1b      	ldrh	r3, [r3, #24]
    1c3a:	b29a      	uxth	r2, r3
    1c3c:	78fb      	ldrb	r3, [r7, #3]
    1c3e:	b29b      	uxth	r3, r3
    1c40:	021b      	lsls	r3, r3, #8
    1c42:	b29b      	uxth	r3, r3
    1c44:	4313      	orrs	r3, r2
    1c46:	b29a      	uxth	r2, r3
    1c48:	687b      	ldr	r3, [r7, #4]
    1c4a:	831a      	strh	r2, [r3, #24]
}
    1c4c:	370c      	adds	r7, #12
    1c4e:	46bd      	mov	sp, r7
    1c50:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c54:	4770      	bx	lr
    1c56:	bf00      	nop

00001c58 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock.
  * @note   The function is used for IrDA mode with UART4 and UART5.
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{
    1c58:	b480      	push	{r7}
    1c5a:	b083      	sub	sp, #12
    1c5c:	af00      	add	r7, sp, #0
    1c5e:	6078      	str	r0, [r7, #4]
    1c60:	460b      	mov	r3, r1
    1c62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
    1c64:	687b      	ldr	r3, [r7, #4]
    1c66:	8b1b      	ldrh	r3, [r3, #24]
    1c68:	b29b      	uxth	r3, r3
    1c6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    1c6e:	b29a      	uxth	r2, r3
    1c70:	687b      	ldr	r3, [r7, #4]
    1c72:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
    1c74:	687b      	ldr	r3, [r7, #4]
    1c76:	8b1b      	ldrh	r3, [r3, #24]
    1c78:	b29a      	uxth	r2, r3
    1c7a:	78fb      	ldrb	r3, [r7, #3]
    1c7c:	b29b      	uxth	r3, r3
    1c7e:	4313      	orrs	r3, r2
    1c80:	b29a      	uxth	r2, r3
    1c82:	687b      	ldr	r3, [r7, #4]
    1c84:	831a      	strh	r2, [r3, #24]
}
    1c86:	370c      	adds	r7, #12
    1c88:	46bd      	mov	sp, r7
    1c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c8e:	4770      	bx	lr

00001c90 <USART_SmartCardCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1c90:	b480      	push	{r7}
    1c92:	b083      	sub	sp, #12
    1c94:	af00      	add	r7, sp, #0
    1c96:	6078      	str	r0, [r7, #4]
    1c98:	460b      	mov	r3, r1
    1c9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1c9c:	78fb      	ldrb	r3, [r7, #3]
    1c9e:	2b00      	cmp	r3, #0
    1ca0:	d008      	beq.n	1cb4 <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
    1ca2:	687b      	ldr	r3, [r7, #4]
    1ca4:	8a9b      	ldrh	r3, [r3, #20]
    1ca6:	b29b      	uxth	r3, r3
    1ca8:	f043 0320 	orr.w	r3, r3, #32
    1cac:	b29a      	uxth	r2, r3
    1cae:	687b      	ldr	r3, [r7, #4]
    1cb0:	829a      	strh	r2, [r3, #20]
    1cb2:	e007      	b.n	1cc4 <USART_SmartCardCmd+0x34>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
    1cb4:	687b      	ldr	r3, [r7, #4]
    1cb6:	8a9b      	ldrh	r3, [r3, #20]
    1cb8:	b29b      	uxth	r3, r3
    1cba:	f023 0320 	bic.w	r3, r3, #32
    1cbe:	b29a      	uxth	r2, r3
    1cc0:	687b      	ldr	r3, [r7, #4]
    1cc2:	829a      	strh	r2, [r3, #20]
  }
}
    1cc4:	370c      	adds	r7, #12
    1cc6:	46bd      	mov	sp, r7
    1cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ccc:	4770      	bx	lr
    1cce:	bf00      	nop

00001cd0 <USART_SmartCardNACKCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1cd0:	b480      	push	{r7}
    1cd2:	b083      	sub	sp, #12
    1cd4:	af00      	add	r7, sp, #0
    1cd6:	6078      	str	r0, [r7, #4]
    1cd8:	460b      	mov	r3, r1
    1cda:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1cdc:	78fb      	ldrb	r3, [r7, #3]
    1cde:	2b00      	cmp	r3, #0
    1ce0:	d008      	beq.n	1cf4 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
    1ce2:	687b      	ldr	r3, [r7, #4]
    1ce4:	8a9b      	ldrh	r3, [r3, #20]
    1ce6:	b29b      	uxth	r3, r3
    1ce8:	f043 0310 	orr.w	r3, r3, #16
    1cec:	b29a      	uxth	r2, r3
    1cee:	687b      	ldr	r3, [r7, #4]
    1cf0:	829a      	strh	r2, [r3, #20]
    1cf2:	e007      	b.n	1d04 <USART_SmartCardNACKCmd+0x34>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
    1cf4:	687b      	ldr	r3, [r7, #4]
    1cf6:	8a9b      	ldrh	r3, [r3, #20]
    1cf8:	b29b      	uxth	r3, r3
    1cfa:	f023 0310 	bic.w	r3, r3, #16
    1cfe:	b29a      	uxth	r2, r3
    1d00:	687b      	ldr	r3, [r7, #4]
    1d02:	829a      	strh	r2, [r3, #20]
  }
}
    1d04:	370c      	adds	r7, #12
    1d06:	46bd      	mov	sp, r7
    1d08:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d0c:	4770      	bx	lr
    1d0e:	bf00      	nop

00001d10 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d10:	b480      	push	{r7}
    1d12:	b083      	sub	sp, #12
    1d14:	af00      	add	r7, sp, #0
    1d16:	6078      	str	r0, [r7, #4]
    1d18:	460b      	mov	r3, r1
    1d1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d1c:	78fb      	ldrb	r3, [r7, #3]
    1d1e:	2b00      	cmp	r3, #0
    1d20:	d008      	beq.n	1d34 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
    1d22:	687b      	ldr	r3, [r7, #4]
    1d24:	8a9b      	ldrh	r3, [r3, #20]
    1d26:	b29b      	uxth	r3, r3
    1d28:	f043 0308 	orr.w	r3, r3, #8
    1d2c:	b29a      	uxth	r2, r3
    1d2e:	687b      	ldr	r3, [r7, #4]
    1d30:	829a      	strh	r2, [r3, #20]
    1d32:	e007      	b.n	1d44 <USART_HalfDuplexCmd+0x34>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
    1d34:	687b      	ldr	r3, [r7, #4]
    1d36:	8a9b      	ldrh	r3, [r3, #20]
    1d38:	b29b      	uxth	r3, r3
    1d3a:	f023 0308 	bic.w	r3, r3, #8
    1d3e:	b29a      	uxth	r2, r3
    1d40:	687b      	ldr	r3, [r7, #4]
    1d42:	829a      	strh	r2, [r3, #20]
  }
}
    1d44:	370c      	adds	r7, #12
    1d46:	46bd      	mov	sp, r7
    1d48:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d4c:	4770      	bx	lr
    1d4e:	bf00      	nop

00001d50 <USART_OverSampling8Cmd>:
  *     This function has to be called before calling USART_Init()
  *     function in order to have correct baudrate Divider value.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d50:	b480      	push	{r7}
    1d52:	b083      	sub	sp, #12
    1d54:	af00      	add	r7, sp, #0
    1d56:	6078      	str	r0, [r7, #4]
    1d58:	460b      	mov	r3, r1
    1d5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d5c:	78fb      	ldrb	r3, [r7, #3]
    1d5e:	2b00      	cmp	r3, #0
    1d60:	d00a      	beq.n	1d78 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= CR1_OVER8_Set;
    1d62:	687b      	ldr	r3, [r7, #4]
    1d64:	899b      	ldrh	r3, [r3, #12]
    1d66:	b29b      	uxth	r3, r3
    1d68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    1d6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    1d70:	b29a      	uxth	r2, r3
    1d72:	687b      	ldr	r3, [r7, #4]
    1d74:	819a      	strh	r2, [r3, #12]
    1d76:	e007      	b.n	1d88 <USART_OverSampling8Cmd+0x38>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= CR1_OVER8_Reset;
    1d78:	687b      	ldr	r3, [r7, #4]
    1d7a:	899b      	ldrh	r3, [r3, #12]
    1d7c:	b29b      	uxth	r3, r3
    1d7e:	f3c3 030e 	ubfx	r3, r3, #0, #15
    1d82:	b29a      	uxth	r2, r3
    1d84:	687b      	ldr	r3, [r7, #4]
    1d86:	819a      	strh	r2, [r3, #12]
  }
}
    1d88:	370c      	adds	r7, #12
    1d8a:	46bd      	mov	sp, r7
    1d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d90:	4770      	bx	lr
    1d92:	bf00      	nop

00001d94 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d94:	b480      	push	{r7}
    1d96:	b083      	sub	sp, #12
    1d98:	af00      	add	r7, sp, #0
    1d9a:	6078      	str	r0, [r7, #4]
    1d9c:	460b      	mov	r3, r1
    1d9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1da0:	78fb      	ldrb	r3, [r7, #3]
    1da2:	2b00      	cmp	r3, #0
    1da4:	d008      	beq.n	1db8 <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= CR3_ONEBITE_Set;
    1da6:	687b      	ldr	r3, [r7, #4]
    1da8:	8a9b      	ldrh	r3, [r3, #20]
    1daa:	b29b      	uxth	r3, r3
    1dac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    1db0:	b29a      	uxth	r2, r3
    1db2:	687b      	ldr	r3, [r7, #4]
    1db4:	829a      	strh	r2, [r3, #20]
    1db6:	e007      	b.n	1dc8 <USART_OneBitMethodCmd+0x34>
  }
  else
  {
    /* Disable tthe one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= CR3_ONEBITE_Reset;
    1db8:	687b      	ldr	r3, [r7, #4]
    1dba:	8a9b      	ldrh	r3, [r3, #20]
    1dbc:	b29b      	uxth	r3, r3
    1dbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1dc2:	b29a      	uxth	r2, r3
    1dc4:	687b      	ldr	r3, [r7, #4]
    1dc6:	829a      	strh	r2, [r3, #20]
  }
}
    1dc8:	370c      	adds	r7, #12
    1dca:	46bd      	mov	sp, r7
    1dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1dd0:	4770      	bx	lr
    1dd2:	bf00      	nop

00001dd4 <USART_IrDAConfig>:
  *     @arg USART_IrDAMode_LowPower
  *     @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
    1dd4:	b480      	push	{r7}
    1dd6:	b083      	sub	sp, #12
    1dd8:	af00      	add	r7, sp, #0
    1dda:	6078      	str	r0, [r7, #4]
    1ddc:	460b      	mov	r3, r1
    1dde:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));

  USARTx->CR3 &= CR3_IRLP_Mask;
    1de0:	687b      	ldr	r3, [r7, #4]
    1de2:	8a9b      	ldrh	r3, [r3, #20]
    1de4:	b29b      	uxth	r3, r3
    1de6:	f023 0304 	bic.w	r3, r3, #4
    1dea:	b29a      	uxth	r2, r3
    1dec:	687b      	ldr	r3, [r7, #4]
    1dee:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
    1df0:	687b      	ldr	r3, [r7, #4]
    1df2:	8a9b      	ldrh	r3, [r3, #20]
    1df4:	b29a      	uxth	r2, r3
    1df6:	887b      	ldrh	r3, [r7, #2]
    1df8:	4313      	orrs	r3, r2
    1dfa:	b29a      	uxth	r2, r3
    1dfc:	687b      	ldr	r3, [r7, #4]
    1dfe:	829a      	strh	r2, [r3, #20]
}
    1e00:	370c      	adds	r7, #12
    1e02:	46bd      	mov	sp, r7
    1e04:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e08:	4770      	bx	lr
    1e0a:	bf00      	nop

00001e0c <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1e0c:	b480      	push	{r7}
    1e0e:	b083      	sub	sp, #12
    1e10:	af00      	add	r7, sp, #0
    1e12:	6078      	str	r0, [r7, #4]
    1e14:	460b      	mov	r3, r1
    1e16:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1e18:	78fb      	ldrb	r3, [r7, #3]
    1e1a:	2b00      	cmp	r3, #0
    1e1c:	d008      	beq.n	1e30 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
    1e1e:	687b      	ldr	r3, [r7, #4]
    1e20:	8a9b      	ldrh	r3, [r3, #20]
    1e22:	b29b      	uxth	r3, r3
    1e24:	f043 0302 	orr.w	r3, r3, #2
    1e28:	b29a      	uxth	r2, r3
    1e2a:	687b      	ldr	r3, [r7, #4]
    1e2c:	829a      	strh	r2, [r3, #20]
    1e2e:	e007      	b.n	1e40 <USART_IrDACmd+0x34>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
    1e30:	687b      	ldr	r3, [r7, #4]
    1e32:	8a9b      	ldrh	r3, [r3, #20]
    1e34:	b29b      	uxth	r3, r3
    1e36:	f023 0302 	bic.w	r3, r3, #2
    1e3a:	b29a      	uxth	r2, r3
    1e3c:	687b      	ldr	r3, [r7, #4]
    1e3e:	829a      	strh	r2, [r3, #20]
  }
}
    1e40:	370c      	adds	r7, #12
    1e42:	46bd      	mov	sp, r7
    1e44:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e48:	4770      	bx	lr
    1e4a:	bf00      	nop

00001e4c <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e4c:	b480      	push	{r7}
    1e4e:	b085      	sub	sp, #20
    1e50:	af00      	add	r7, sp, #0
    1e52:	6078      	str	r0, [r7, #4]
    1e54:	460b      	mov	r3, r1
    1e56:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
    1e58:	2300      	movs	r3, #0
    1e5a:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
    1e5c:	687b      	ldr	r3, [r7, #4]
    1e5e:	881b      	ldrh	r3, [r3, #0]
    1e60:	b29a      	uxth	r2, r3
    1e62:	887b      	ldrh	r3, [r7, #2]
    1e64:	4013      	ands	r3, r2
    1e66:	b29b      	uxth	r3, r3
    1e68:	2b00      	cmp	r3, #0
    1e6a:	d002      	beq.n	1e72 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
    1e6c:	2301      	movs	r3, #1
    1e6e:	73fb      	strb	r3, [r7, #15]
    1e70:	e001      	b.n	1e76 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    1e72:	2300      	movs	r3, #0
    1e74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    1e76:	7bfb      	ldrb	r3, [r7, #15]
}
    1e78:	4618      	mov	r0, r3
    1e7a:	3714      	adds	r7, #20
    1e7c:	46bd      	mov	sp, r7
    1e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e82:	4770      	bx	lr

00001e84 <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e84:	b480      	push	{r7}
    1e86:	b083      	sub	sp, #12
    1e88:	af00      	add	r7, sp, #0
    1e8a:	6078      	str	r0, [r7, #4]
    1e8c:	460b      	mov	r3, r1
    1e8e:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  USARTx->SR = (uint16_t)~USART_FLAG;
    1e90:	887b      	ldrh	r3, [r7, #2]
    1e92:	43db      	mvns	r3, r3
    1e94:	b29a      	uxth	r2, r3
    1e96:	687b      	ldr	r3, [r7, #4]
    1e98:	801a      	strh	r2, [r3, #0]
}
    1e9a:	370c      	adds	r7, #12
    1e9c:	46bd      	mov	sp, r7
    1e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ea2:	4770      	bx	lr

00001ea4 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1ea4:	b480      	push	{r7}
    1ea6:	b087      	sub	sp, #28
    1ea8:	af00      	add	r7, sp, #0
    1eaa:	6078      	str	r0, [r7, #4]
    1eac:	460b      	mov	r3, r1
    1eae:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
    1eb0:	2300      	movs	r3, #0
    1eb2:	60fb      	str	r3, [r7, #12]
    1eb4:	2300      	movs	r3, #0
    1eb6:	617b      	str	r3, [r7, #20]
    1eb8:	2300      	movs	r3, #0
    1eba:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
    1ebc:	2300      	movs	r3, #0
    1ebe:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    1ec0:	887b      	ldrh	r3, [r7, #2]
    1ec2:	b2db      	uxtb	r3, r3
    1ec4:	095b      	lsrs	r3, r3, #5
    1ec6:	b2db      	uxtb	r3, r3
    1ec8:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
    1eca:	887b      	ldrh	r3, [r7, #2]
    1ecc:	f003 031f 	and.w	r3, r3, #31
    1ed0:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
    1ed2:	697b      	ldr	r3, [r7, #20]
    1ed4:	2201      	movs	r2, #1
    1ed6:	fa02 f303 	lsl.w	r3, r2, r3
    1eda:	617b      	str	r3, [r7, #20]

  if (usartreg == 0x01) /* The IT  is in CR1 register */
    1edc:	68bb      	ldr	r3, [r7, #8]
    1ede:	2b01      	cmp	r3, #1
    1ee0:	d106      	bne.n	1ef0 <USART_GetITStatus+0x4c>
  {
    itmask &= USARTx->CR1;
    1ee2:	687b      	ldr	r3, [r7, #4]
    1ee4:	899b      	ldrh	r3, [r3, #12]
    1ee6:	b29b      	uxth	r3, r3
    1ee8:	697a      	ldr	r2, [r7, #20]
    1eea:	4013      	ands	r3, r2
    1eec:	617b      	str	r3, [r7, #20]
    1eee:	e00f      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
    1ef0:	68bb      	ldr	r3, [r7, #8]
    1ef2:	2b02      	cmp	r3, #2
    1ef4:	d106      	bne.n	1f04 <USART_GetITStatus+0x60>
  {
    itmask &= USARTx->CR2;
    1ef6:	687b      	ldr	r3, [r7, #4]
    1ef8:	8a1b      	ldrh	r3, [r3, #16]
    1efa:	b29b      	uxth	r3, r3
    1efc:	697a      	ldr	r2, [r7, #20]
    1efe:	4013      	ands	r3, r2
    1f00:	617b      	str	r3, [r7, #20]
    1f02:	e005      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
    1f04:	687b      	ldr	r3, [r7, #4]
    1f06:	8a9b      	ldrh	r3, [r3, #20]
    1f08:	b29b      	uxth	r3, r3
    1f0a:	697a      	ldr	r2, [r7, #20]
    1f0c:	4013      	ands	r3, r2
    1f0e:	617b      	str	r3, [r7, #20]
  }

  bitpos = USART_IT >> 0x08;
    1f10:	887b      	ldrh	r3, [r7, #2]
    1f12:	0a1b      	lsrs	r3, r3, #8
    1f14:	b29b      	uxth	r3, r3
    1f16:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
    1f18:	68fb      	ldr	r3, [r7, #12]
    1f1a:	2201      	movs	r2, #1
    1f1c:	fa02 f303 	lsl.w	r3, r2, r3
    1f20:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
    1f22:	687b      	ldr	r3, [r7, #4]
    1f24:	881b      	ldrh	r3, [r3, #0]
    1f26:	b29b      	uxth	r3, r3
    1f28:	68fa      	ldr	r2, [r7, #12]
    1f2a:	4013      	ands	r3, r2
    1f2c:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
    1f2e:	697b      	ldr	r3, [r7, #20]
    1f30:	2b00      	cmp	r3, #0
    1f32:	d005      	beq.n	1f40 <USART_GetITStatus+0x9c>
    1f34:	68fb      	ldr	r3, [r7, #12]
    1f36:	2b00      	cmp	r3, #0
    1f38:	d002      	beq.n	1f40 <USART_GetITStatus+0x9c>
  {
    bitstatus = SET;
    1f3a:	2301      	movs	r3, #1
    1f3c:	74fb      	strb	r3, [r7, #19]
    1f3e:	e001      	b.n	1f44 <USART_GetITStatus+0xa0>
  }
  else
  {
    bitstatus = RESET;
    1f40:	2300      	movs	r3, #0
    1f42:	74fb      	strb	r3, [r7, #19]
  }

  return bitstatus;
    1f44:	7cfb      	ldrb	r3, [r7, #19]
}
    1f46:	4618      	mov	r0, r3
    1f48:	371c      	adds	r7, #28
    1f4a:	46bd      	mov	sp, r7
    1f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f50:	4770      	bx	lr
    1f52:	bf00      	nop

00001f54 <USART_ClearITPendingBit>:
  *   - TXE pending bit is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1f54:	b480      	push	{r7}
    1f56:	b085      	sub	sp, #20
    1f58:	af00      	add	r7, sp, #0
    1f5a:	6078      	str	r0, [r7, #4]
    1f5c:	460b      	mov	r3, r1
    1f5e:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
    1f60:	2300      	movs	r3, #0
    1f62:	81fb      	strh	r3, [r7, #14]
    1f64:	2300      	movs	r3, #0
    1f66:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  bitpos = USART_IT >> 0x08;
    1f68:	887b      	ldrh	r3, [r7, #2]
    1f6a:	0a1b      	lsrs	r3, r3, #8
    1f6c:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
    1f6e:	89fb      	ldrh	r3, [r7, #14]
    1f70:	2201      	movs	r2, #1
    1f72:	fa02 f303 	lsl.w	r3, r2, r3
    1f76:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
    1f78:	89bb      	ldrh	r3, [r7, #12]
    1f7a:	43db      	mvns	r3, r3
    1f7c:	b29a      	uxth	r2, r3
    1f7e:	687b      	ldr	r3, [r7, #4]
    1f80:	801a      	strh	r2, [r3, #0]
}
    1f82:	3714      	adds	r7, #20
    1f84:	46bd      	mov	sp, r7
    1f86:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f8a:	4770      	bx	lr

00001f8c <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
    1f8c:	b480      	push	{r7}
    1f8e:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
    1f90:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1f94:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1f98:	2200      	movs	r2, #0
    1f9a:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
    1f9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fa0:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fa4:	2200      	movs	r2, #0
    1fa6:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
    1fa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fac:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fb0:	2200      	movs	r2, #0
    1fb2:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
    1fb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fb8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fbc:	2200      	movs	r2, #0
    1fbe:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x000FFFFF;
    1fc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fc4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1fcc:	f2c0 020f 	movt	r2, #15
    1fd0:	615a      	str	r2, [r3, #20]
}
    1fd2:	46bd      	mov	sp, r7
    1fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1fd8:	4770      	bx	lr
    1fda:	bf00      	nop

00001fdc <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
    1fdc:	b480      	push	{r7}
    1fde:	b085      	sub	sp, #20
    1fe0:	af00      	add	r7, sp, #0
    1fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
    1fe4:	2300      	movs	r3, #0
    1fe6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
    1fe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fec:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1ff0:	60fb      	str	r3, [r7, #12]

  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
    1ff2:	687b      	ldr	r3, [r7, #4]
    1ff4:	799b      	ldrb	r3, [r3, #6]
    1ff6:	2b00      	cmp	r3, #0
    1ff8:	d074      	beq.n	20e4 <EXTI_Init+0x108>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    1ffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1ffe:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2002:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2006:	f2c4 0201 	movt	r2, #16385	; 0x4001
    200a:	6811      	ldr	r1, [r2, #0]
    200c:	687a      	ldr	r2, [r7, #4]
    200e:	6812      	ldr	r2, [r2, #0]
    2010:	43d2      	mvns	r2, r2
    2012:	400a      	ands	r2, r1
    2014:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    2016:	f44f 6380 	mov.w	r3, #1024	; 0x400
    201a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    201e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2022:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2026:	6851      	ldr	r1, [r2, #4]
    2028:	687a      	ldr	r2, [r7, #4]
    202a:	6812      	ldr	r2, [r2, #0]
    202c:	43d2      	mvns	r2, r2
    202e:	400a      	ands	r2, r1
    2030:	605a      	str	r2, [r3, #4]

    tmp += EXTI_InitStruct->EXTI_Mode;
    2032:	687b      	ldr	r3, [r7, #4]
    2034:	791b      	ldrb	r3, [r3, #4]
    2036:	68fa      	ldr	r2, [r7, #12]
    2038:	4413      	add	r3, r2
    203a:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    203c:	68fb      	ldr	r3, [r7, #12]
    203e:	68fa      	ldr	r2, [r7, #12]
    2040:	6811      	ldr	r1, [r2, #0]
    2042:	687a      	ldr	r2, [r7, #4]
    2044:	6812      	ldr	r2, [r2, #0]
    2046:	430a      	orrs	r2, r1
    2048:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    204a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    204e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2052:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2056:	f2c4 0201 	movt	r2, #16385	; 0x4001
    205a:	6891      	ldr	r1, [r2, #8]
    205c:	687a      	ldr	r2, [r7, #4]
    205e:	6812      	ldr	r2, [r2, #0]
    2060:	43d2      	mvns	r2, r2
    2062:	400a      	ands	r2, r1
    2064:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    2066:	f44f 6380 	mov.w	r3, #1024	; 0x400
    206a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    206e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2072:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2076:	68d1      	ldr	r1, [r2, #12]
    2078:	687a      	ldr	r2, [r7, #4]
    207a:	6812      	ldr	r2, [r2, #0]
    207c:	43d2      	mvns	r2, r2
    207e:	400a      	ands	r2, r1
    2080:	60da      	str	r2, [r3, #12]

    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
    2082:	687b      	ldr	r3, [r7, #4]
    2084:	795b      	ldrb	r3, [r3, #5]
    2086:	2b10      	cmp	r3, #16
    2088:	d11a      	bne.n	20c0 <EXTI_Init+0xe4>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
    208a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    208e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2092:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2096:	f2c4 0201 	movt	r2, #16385	; 0x4001
    209a:	6891      	ldr	r1, [r2, #8]
    209c:	687a      	ldr	r2, [r7, #4]
    209e:	6812      	ldr	r2, [r2, #0]
    20a0:	430a      	orrs	r2, r1
    20a2:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    20a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20a8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
    20b0:	f2c4 0201 	movt	r2, #16385	; 0x4001
    20b4:	68d1      	ldr	r1, [r2, #12]
    20b6:	687a      	ldr	r2, [r7, #4]
    20b8:	6812      	ldr	r2, [r2, #0]
    20ba:	430a      	orrs	r2, r1
    20bc:	60da      	str	r2, [r3, #12]
    20be:	e01e      	b.n	20fe <EXTI_Init+0x122>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
    20c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20c4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20c8:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
    20ca:	687b      	ldr	r3, [r7, #4]
    20cc:	795b      	ldrb	r3, [r3, #5]
    20ce:	68fa      	ldr	r2, [r7, #12]
    20d0:	4413      	add	r3, r2
    20d2:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    20d4:	68fb      	ldr	r3, [r7, #12]
    20d6:	68fa      	ldr	r2, [r7, #12]
    20d8:	6811      	ldr	r1, [r2, #0]
    20da:	687a      	ldr	r2, [r7, #4]
    20dc:	6812      	ldr	r2, [r2, #0]
    20de:	430a      	orrs	r2, r1
    20e0:	601a      	str	r2, [r3, #0]
    20e2:	e00c      	b.n	20fe <EXTI_Init+0x122>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
    20e4:	687b      	ldr	r3, [r7, #4]
    20e6:	791b      	ldrb	r3, [r3, #4]
    20e8:	68fa      	ldr	r2, [r7, #12]
    20ea:	4413      	add	r3, r2
    20ec:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
    20ee:	68fb      	ldr	r3, [r7, #12]
    20f0:	68fa      	ldr	r2, [r7, #12]
    20f2:	6811      	ldr	r1, [r2, #0]
    20f4:	687a      	ldr	r2, [r7, #4]
    20f6:	6812      	ldr	r2, [r2, #0]
    20f8:	43d2      	mvns	r2, r2
    20fa:	400a      	ands	r2, r1
    20fc:	601a      	str	r2, [r3, #0]
  }
}
    20fe:	3714      	adds	r7, #20
    2100:	46bd      	mov	sp, r7
    2102:	f85d 7b04 	ldr.w	r7, [sp], #4
    2106:	4770      	bx	lr

00002108 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
    2108:	b480      	push	{r7}
    210a:	b083      	sub	sp, #12
    210c:	af00      	add	r7, sp, #0
    210e:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
    2110:	687b      	ldr	r3, [r7, #4]
    2112:	2200      	movs	r2, #0
    2114:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
    2116:	687b      	ldr	r3, [r7, #4]
    2118:	2200      	movs	r2, #0
    211a:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
    211c:	687b      	ldr	r3, [r7, #4]
    211e:	220c      	movs	r2, #12
    2120:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
    2122:	687b      	ldr	r3, [r7, #4]
    2124:	2200      	movs	r2, #0
    2126:	719a      	strb	r2, [r3, #6]
}
    2128:	370c      	adds	r7, #12
    212a:	46bd      	mov	sp, r7
    212c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2130:	4770      	bx	lr
    2132:	bf00      	nop

00002134 <EXTI_GenerateSWInterrupt>:
  * @param  EXTI_Line: specifies the EXTI lines to be enabled or disabled.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
    2134:	b480      	push	{r7}
    2136:	b083      	sub	sp, #12
    2138:	af00      	add	r7, sp, #0
    213a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->SWIER |= EXTI_Line;
    213c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2140:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2144:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2148:	f2c4 0201 	movt	r2, #16385	; 0x4001
    214c:	6911      	ldr	r1, [r2, #16]
    214e:	687a      	ldr	r2, [r7, #4]
    2150:	430a      	orrs	r2, r1
    2152:	611a      	str	r2, [r3, #16]
}
    2154:	370c      	adds	r7, #12
    2156:	46bd      	mov	sp, r7
    2158:	f85d 7b04 	ldr.w	r7, [sp], #4
    215c:	4770      	bx	lr
    215e:	bf00      	nop

00002160 <EXTI_GetFlagStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
    2160:	b480      	push	{r7}
    2162:	b085      	sub	sp, #20
    2164:	af00      	add	r7, sp, #0
    2166:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    2168:	2300      	movs	r3, #0
    216a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
    216c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2170:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2174:	695a      	ldr	r2, [r3, #20]
    2176:	687b      	ldr	r3, [r7, #4]
    2178:	4013      	ands	r3, r2
    217a:	2b00      	cmp	r3, #0
    217c:	d002      	beq.n	2184 <EXTI_GetFlagStatus+0x24>
  {
    bitstatus = SET;
    217e:	2301      	movs	r3, #1
    2180:	73fb      	strb	r3, [r7, #15]
    2182:	e001      	b.n	2188 <EXTI_GetFlagStatus+0x28>
  }
  else
  {
    bitstatus = RESET;
    2184:	2300      	movs	r3, #0
    2186:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    2188:	7bfb      	ldrb	r3, [r7, #15]
}
    218a:	4618      	mov	r0, r3
    218c:	3714      	adds	r7, #20
    218e:	46bd      	mov	sp, r7
    2190:	f85d 7b04 	ldr.w	r7, [sp], #4
    2194:	4770      	bx	lr
    2196:	bf00      	nop

00002198 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
    2198:	b480      	push	{r7}
    219a:	b083      	sub	sp, #12
    219c:	af00      	add	r7, sp, #0
    219e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    21a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21a4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21a8:	687a      	ldr	r2, [r7, #4]
    21aa:	615a      	str	r2, [r3, #20]
}
    21ac:	370c      	adds	r7, #12
    21ae:	46bd      	mov	sp, r7
    21b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    21b4:	4770      	bx	lr
    21b6:	bf00      	nop

000021b8 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
    21b8:	b480      	push	{r7}
    21ba:	b085      	sub	sp, #20
    21bc:	af00      	add	r7, sp, #0
    21be:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
    21c0:	2300      	movs	r3, #0
    21c2:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
    21c4:	2300      	movs	r3, #0
    21c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  enablestatus =  EXTI->IMR & EXTI_Line;
    21c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21cc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21d0:	681a      	ldr	r2, [r3, #0]
    21d2:	687b      	ldr	r3, [r7, #4]
    21d4:	4013      	ands	r3, r2
    21d6:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
    21d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21dc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21e0:	695a      	ldr	r2, [r3, #20]
    21e2:	687b      	ldr	r3, [r7, #4]
    21e4:	4013      	ands	r3, r2
    21e6:	2b00      	cmp	r3, #0
    21e8:	d005      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
    21ea:	68bb      	ldr	r3, [r7, #8]
    21ec:	2b00      	cmp	r3, #0
    21ee:	d002      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
  {
    bitstatus = SET;
    21f0:	2301      	movs	r3, #1
    21f2:	73fb      	strb	r3, [r7, #15]
    21f4:	e001      	b.n	21fa <EXTI_GetITStatus+0x42>
  }
  else
  {
    bitstatus = RESET;
    21f6:	2300      	movs	r3, #0
    21f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    21fa:	7bfb      	ldrb	r3, [r7, #15]
}
    21fc:	4618      	mov	r0, r3
    21fe:	3714      	adds	r7, #20
    2200:	46bd      	mov	sp, r7
    2202:	f85d 7b04 	ldr.w	r7, [sp], #4
    2206:	4770      	bx	lr

00002208 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
    2208:	b480      	push	{r7}
    220a:	b083      	sub	sp, #12
    220c:	af00      	add	r7, sp, #0
    220e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    2210:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2214:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2218:	687a      	ldr	r2, [r7, #4]
    221a:	615a      	str	r2, [r3, #20]
}
    221c:	370c      	adds	r7, #12
    221e:	46bd      	mov	sp, r7
    2220:	f85d 7b04 	ldr.w	r7, [sp], #4
    2224:	4770      	bx	lr
    2226:	bf00      	nop

00002228 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
    2228:	b480      	push	{r7}
    222a:	b083      	sub	sp, #12
    222c:	af00      	add	r7, sp, #0
    222e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
    2230:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2234:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2238:	687a      	ldr	r2, [r7, #4]
    223a:	f042 62bf 	orr.w	r2, r2, #100139008	; 0x5f80000
    223e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    2242:	60da      	str	r2, [r3, #12]
}
    2244:	370c      	adds	r7, #12
    2246:	46bd      	mov	sp, r7
    2248:	f85d 7b04 	ldr.w	r7, [sp], #4
    224c:	4770      	bx	lr
    224e:	bf00      	nop

00002250 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
    2250:	b480      	push	{r7}
    2252:	b087      	sub	sp, #28
    2254:	af00      	add	r7, sp, #0
    2256:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
    2258:	2300      	movs	r3, #0
    225a:	617b      	str	r3, [r7, #20]
    225c:	2300      	movs	r3, #0
    225e:	613b      	str	r3, [r7, #16]
    2260:	230f      	movs	r3, #15
    2262:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
    2264:	687b      	ldr	r3, [r7, #4]
    2266:	78db      	ldrb	r3, [r3, #3]
    2268:	2b00      	cmp	r3, #0
    226a:	d042      	beq.n	22f2 <NVIC_Init+0xa2>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    226c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2270:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2274:	68db      	ldr	r3, [r3, #12]
    2276:	43db      	mvns	r3, r3
    2278:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    227c:	0a1b      	lsrs	r3, r3, #8
    227e:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
    2280:	697b      	ldr	r3, [r7, #20]
    2282:	f1c3 0304 	rsb	r3, r3, #4
    2286:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
    2288:	697b      	ldr	r3, [r7, #20]
    228a:	68fa      	ldr	r2, [r7, #12]
    228c:	fa22 f303 	lsr.w	r3, r2, r3
    2290:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    2292:	687b      	ldr	r3, [r7, #4]
    2294:	785b      	ldrb	r3, [r3, #1]
    2296:	461a      	mov	r2, r3
    2298:	693b      	ldr	r3, [r7, #16]
    229a:	fa02 f303 	lsl.w	r3, r2, r3
    229e:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
    22a0:	687b      	ldr	r3, [r7, #4]
    22a2:	789b      	ldrb	r3, [r3, #2]
    22a4:	461a      	mov	r2, r3
    22a6:	68fb      	ldr	r3, [r7, #12]
    22a8:	4013      	ands	r3, r2
    22aa:	697a      	ldr	r2, [r7, #20]
    22ac:	4313      	orrs	r3, r2
    22ae:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
    22b0:	697b      	ldr	r3, [r7, #20]
    22b2:	011b      	lsls	r3, r3, #4
    22b4:	617b      	str	r3, [r7, #20]

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    22b6:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22ba:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22be:	687a      	ldr	r2, [r7, #4]
    22c0:	7812      	ldrb	r2, [r2, #0]
    22c2:	4611      	mov	r1, r2
    22c4:	697a      	ldr	r2, [r7, #20]
    22c6:	b2d2      	uxtb	r2, r2
    22c8:	440b      	add	r3, r1
    22ca:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ce:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22d2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22d6:	687a      	ldr	r2, [r7, #4]
    22d8:	7812      	ldrb	r2, [r2, #0]
    22da:	0952      	lsrs	r2, r2, #5
    22dc:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    22de:	6879      	ldr	r1, [r7, #4]
    22e0:	7809      	ldrb	r1, [r1, #0]
    22e2:	f001 011f 	and.w	r1, r1, #31
    22e6:	2001      	movs	r0, #1
    22e8:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    22f0:	e011      	b.n	2316 <NVIC_Init+0xc6>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22f2:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22f6:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22fa:	687a      	ldr	r2, [r7, #4]
    22fc:	7812      	ldrb	r2, [r2, #0]
    22fe:	0952      	lsrs	r2, r2, #5
    2300:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    2302:	6879      	ldr	r1, [r7, #4]
    2304:	7809      	ldrb	r1, [r1, #0]
    2306:	f001 011f 	and.w	r1, r1, #31
    230a:	2001      	movs	r0, #1
    230c:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    2310:	3220      	adds	r2, #32
    2312:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
    2316:	371c      	adds	r7, #28
    2318:	46bd      	mov	sp, r7
    231a:	f85d 7b04 	ldr.w	r7, [sp], #4
    231e:	4770      	bx	lr

00002320 <NVIC_SetVectorTable>:
  * @param  Offset: Vector Table base offset field. This value must be a multiple
  *         of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{
    2320:	b480      	push	{r7}
    2322:	b083      	sub	sp, #12
    2324:	af00      	add	r7, sp, #0
    2326:	6078      	str	r0, [r7, #4]
    2328:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));

  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
    232a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    232e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2332:	683a      	ldr	r2, [r7, #0]
    2334:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
    2338:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    233c:	6879      	ldr	r1, [r7, #4]
    233e:	430a      	orrs	r2, r1
    2340:	609a      	str	r2, [r3, #8]
}
    2342:	370c      	adds	r7, #12
    2344:	46bd      	mov	sp, r7
    2346:	f85d 7b04 	ldr.w	r7, [sp], #4
    234a:	4770      	bx	lr

0000234c <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
    234c:	b480      	push	{r7}
    234e:	b083      	sub	sp, #12
    2350:	af00      	add	r7, sp, #0
    2352:	4602      	mov	r2, r0
    2354:	460b      	mov	r3, r1
    2356:	71fa      	strb	r2, [r7, #7]
    2358:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    235a:	79bb      	ldrb	r3, [r7, #6]
    235c:	2b00      	cmp	r3, #0
    235e:	d00c      	beq.n	237a <NVIC_SystemLPConfig+0x2e>
  {
    SCB->SCR |= LowPowerMode;
    2360:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2364:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2368:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    236c:	f2ce 0200 	movt	r2, #57344	; 0xe000
    2370:	6911      	ldr	r1, [r2, #16]
    2372:	79fa      	ldrb	r2, [r7, #7]
    2374:	430a      	orrs	r2, r1
    2376:	611a      	str	r2, [r3, #16]
    2378:	e00c      	b.n	2394 <NVIC_SystemLPConfig+0x48>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
    237a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    237e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2382:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    2386:	f2ce 0200 	movt	r2, #57344	; 0xe000
    238a:	6911      	ldr	r1, [r2, #16]
    238c:	79fa      	ldrb	r2, [r7, #7]
    238e:	43d2      	mvns	r2, r2
    2390:	400a      	ands	r2, r1
    2392:	611a      	str	r2, [r3, #16]
  }
}
    2394:	370c      	adds	r7, #12
    2396:	46bd      	mov	sp, r7
    2398:	f85d 7b04 	ldr.w	r7, [sp], #4
    239c:	4770      	bx	lr
    239e:	bf00      	nop

000023a0 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
    23a0:	b480      	push	{r7}
    23a2:	b083      	sub	sp, #12
    23a4:	af00      	add	r7, sp, #0
    23a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
    23a8:	687b      	ldr	r3, [r7, #4]
    23aa:	2b04      	cmp	r3, #4
    23ac:	d10c      	bne.n	23c8 <SysTick_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
    23ae:	f24e 0310 	movw	r3, #57360	; 0xe010
    23b2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23b6:	f24e 0210 	movw	r2, #57360	; 0xe010
    23ba:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23be:	6812      	ldr	r2, [r2, #0]
    23c0:	f042 0204 	orr.w	r2, r2, #4
    23c4:	601a      	str	r2, [r3, #0]
    23c6:	e00b      	b.n	23e0 <SysTick_CLKSourceConfig+0x40>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
    23c8:	f24e 0310 	movw	r3, #57360	; 0xe010
    23cc:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23d0:	f24e 0210 	movw	r2, #57360	; 0xe010
    23d4:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23d8:	6812      	ldr	r2, [r2, #0]
    23da:	f022 0204 	bic.w	r2, r2, #4
    23de:	601a      	str	r2, [r3, #0]
  }
}
    23e0:	370c      	adds	r7, #12
    23e2:	46bd      	mov	sp, r7
    23e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    23e8:	4770      	bx	lr
    23ea:	bf00      	nop

000023ec <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
    23ec:	b580      	push	{r7, lr}
    23ee:	b086      	sub	sp, #24
    23f0:	af00      	add	r7, sp, #0
    23f2:	60f8      	str	r0, [r7, #12]
    23f4:	60b9      	str	r1, [r7, #8]
    23f6:	607a      	str	r2, [r7, #4]
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
    23f8:	2050      	movs	r0, #80	; 0x50
    23fa:	f002 f9a1 	bl	4740 <pvPortMalloc>
    23fe:	6138      	str	r0, [r7, #16]
	if( pxCoRoutine )
    2400:	693b      	ldr	r3, [r7, #16]
    2402:	2b00      	cmp	r3, #0
    2404:	d056      	beq.n	24b4 <xCoRoutineCreate+0xc8>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
    2406:	f240 2348 	movw	r3, #584	; 0x248
    240a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    240e:	681b      	ldr	r3, [r3, #0]
    2410:	2b00      	cmp	r3, #0
    2412:	d107      	bne.n	2424 <xCoRoutineCreate+0x38>
		{
			pxCurrentCoRoutine = pxCoRoutine;
    2414:	f240 2348 	movw	r3, #584	; 0x248
    2418:	f2c2 0300 	movt	r3, #8192	; 0x2000
    241c:	693a      	ldr	r2, [r7, #16]
    241e:	601a      	str	r2, [r3, #0]
			prvInitialiseCoRoutineLists();
    2420:	f000 f9fa 	bl	2818 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
    2424:	68bb      	ldr	r3, [r7, #8]
    2426:	2b01      	cmp	r3, #1
    2428:	d901      	bls.n	242e <xCoRoutineCreate+0x42>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
    242a:	2301      	movs	r3, #1
    242c:	60bb      	str	r3, [r7, #8]
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
    242e:	693b      	ldr	r3, [r7, #16]
    2430:	2200      	movs	r2, #0
    2432:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		pxCoRoutine->uxPriority = uxPriority;
    2436:	693b      	ldr	r3, [r7, #16]
    2438:	68ba      	ldr	r2, [r7, #8]
    243a:	645a      	str	r2, [r3, #68]	; 0x44
		pxCoRoutine->uxIndex = uxIndex;
    243c:	693b      	ldr	r3, [r7, #16]
    243e:	687a      	ldr	r2, [r7, #4]
    2440:	649a      	str	r2, [r3, #72]	; 0x48
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    2442:	693b      	ldr	r3, [r7, #16]
    2444:	68fa      	ldr	r2, [r7, #12]
    2446:	601a      	str	r2, [r3, #0]

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    2448:	693b      	ldr	r3, [r7, #16]
    244a:	3304      	adds	r3, #4
    244c:	4618      	mov	r0, r3
    244e:	f000 fa6b 	bl	2928 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    2452:	693b      	ldr	r3, [r7, #16]
    2454:	3324      	adds	r3, #36	; 0x24
    2456:	4618      	mov	r0, r3
    2458:	f000 fa66 	bl	2928 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    245c:	693b      	ldr	r3, [r7, #16]
    245e:	693a      	ldr	r2, [r7, #16]
    2460:	61da      	str	r2, [r3, #28]
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    2462:	693b      	ldr	r3, [r7, #16]
    2464:	693a      	ldr	r2, [r7, #16]
    2466:	63da      	str	r2, [r3, #60]	; 0x3c
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    2468:	68bb      	ldr	r3, [r7, #8]
    246a:	f1c3 0214 	rsb	r2, r3, #20
    246e:	693b      	ldr	r3, [r7, #16]
    2470:	625a      	str	r2, [r3, #36]	; 0x24
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
    2472:	693b      	ldr	r3, [r7, #16]
    2474:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    2476:	f240 234c 	movw	r3, #588	; 0x24c
    247a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    247e:	681b      	ldr	r3, [r3, #0]
    2480:	429a      	cmp	r2, r3
    2482:	d906      	bls.n	2492 <xCoRoutineCreate+0xa6>
    2484:	693b      	ldr	r3, [r7, #16]
    2486:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    2488:	f240 234c 	movw	r3, #588	; 0x24c
    248c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2490:	601a      	str	r2, [r3, #0]
    2492:	693b      	ldr	r3, [r7, #16]
    2494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2496:	015a      	lsls	r2, r3, #5
    2498:	f240 13a0 	movw	r3, #416	; 0x1a0
    249c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24a0:	441a      	add	r2, r3
    24a2:	693b      	ldr	r3, [r7, #16]
    24a4:	3304      	adds	r3, #4
    24a6:	4610      	mov	r0, r2
    24a8:	4619      	mov	r1, r3
    24aa:	f000 fa49 	bl	2940 <vListInsertEnd>

		xReturn = pdPASS;
    24ae:	2301      	movs	r3, #1
    24b0:	617b      	str	r3, [r7, #20]
    24b2:	e002      	b.n	24ba <xCoRoutineCreate+0xce>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    24b4:	f04f 33ff 	mov.w	r3, #4294967295
    24b8:	617b      	str	r3, [r7, #20]
	}
	
	return xReturn;	
    24ba:	697b      	ldr	r3, [r7, #20]
}
    24bc:	4618      	mov	r0, r3
    24be:	3718      	adds	r7, #24
    24c0:	46bd      	mov	sp, r7
    24c2:	bd80      	pop	{r7, pc}

000024c4 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
    24c4:	b580      	push	{r7, lr}
    24c6:	b084      	sub	sp, #16
    24c8:	af00      	add	r7, sp, #0
    24ca:	6078      	str	r0, [r7, #4]
    24cc:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    24ce:	f240 2350 	movw	r3, #592	; 0x250
    24d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24d6:	681a      	ldr	r2, [r3, #0]
    24d8:	687b      	ldr	r3, [r7, #4]
    24da:	4413      	add	r3, r2
    24dc:	60fb      	str	r3, [r7, #12]

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    24de:	f240 2348 	movw	r3, #584	; 0x248
    24e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24e6:	681b      	ldr	r3, [r3, #0]
    24e8:	3304      	adds	r3, #4
    24ea:	4618      	mov	r0, r3
    24ec:	f000 fa88 	bl	2a00 <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    24f0:	f240 2348 	movw	r3, #584	; 0x248
    24f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24f8:	681b      	ldr	r3, [r3, #0]
    24fa:	68fa      	ldr	r2, [r7, #12]
    24fc:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xCoRoutineTickCount )
    24fe:	f240 2350 	movw	r3, #592	; 0x250
    2502:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2506:	681b      	ldr	r3, [r3, #0]
    2508:	68fa      	ldr	r2, [r7, #12]
    250a:	429a      	cmp	r2, r3
    250c:	d20f      	bcs.n	252e <vCoRoutineAddToDelayedList+0x6a>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    250e:	f240 2324 	movw	r3, #548	; 0x224
    2512:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2516:	681a      	ldr	r2, [r3, #0]
    2518:	f240 2348 	movw	r3, #584	; 0x248
    251c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2520:	681b      	ldr	r3, [r3, #0]
    2522:	3304      	adds	r3, #4
    2524:	4610      	mov	r0, r2
    2526:	4619      	mov	r1, r3
    2528:	f000 fa32 	bl	2990 <vListInsert>
    252c:	e00e      	b.n	254c <vCoRoutineAddToDelayedList+0x88>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    252e:	f240 2320 	movw	r3, #544	; 0x220
    2532:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2536:	681a      	ldr	r2, [r3, #0]
    2538:	f240 2348 	movw	r3, #584	; 0x248
    253c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2540:	681b      	ldr	r3, [r3, #0]
    2542:	3304      	adds	r3, #4
    2544:	4610      	mov	r0, r2
    2546:	4619      	mov	r1, r3
    2548:	f000 fa22 	bl	2990 <vListInsert>
	}

	if( pxEventList )
    254c:	683b      	ldr	r3, [r7, #0]
    254e:	2b00      	cmp	r3, #0
    2550:	d009      	beq.n	2566 <vCoRoutineAddToDelayedList+0xa2>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    2552:	f240 2348 	movw	r3, #584	; 0x248
    2556:	f2c2 0300 	movt	r3, #8192	; 0x2000
    255a:	681b      	ldr	r3, [r3, #0]
    255c:	3324      	adds	r3, #36	; 0x24
    255e:	6838      	ldr	r0, [r7, #0]
    2560:	4619      	mov	r1, r3
    2562:	f000 fa15 	bl	2990 <vListInsert>
	}
}
    2566:	3710      	adds	r7, #16
    2568:	46bd      	mov	sp, r7
    256a:	bd80      	pop	{r7, pc}

0000256c <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
    256c:	b580      	push	{r7, lr}
    256e:	b082      	sub	sp, #8
    2570:	af00      	add	r7, sp, #0
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    2572:	e036      	b.n	25e2 <prvCheckPendingReadyList+0x76>
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
    2574:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    2578:	f380 8811 	msr	BASEPRI, r0
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
    257c:	f240 2328 	movw	r3, #552	; 0x228
    2580:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2584:	699b      	ldr	r3, [r3, #24]
    2586:	699b      	ldr	r3, [r3, #24]
    2588:	607b      	str	r3, [r7, #4]
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    258a:	687b      	ldr	r3, [r7, #4]
    258c:	3324      	adds	r3, #36	; 0x24
    258e:	4618      	mov	r0, r3
    2590:	f000 fa36 	bl	2a00 <vListRemove>
		}
		portENABLE_INTERRUPTS();
    2594:	f04f 0000 	mov.w	r0, #0
    2598:	f380 8811 	msr	BASEPRI, r0

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    259c:	687b      	ldr	r3, [r7, #4]
    259e:	3304      	adds	r3, #4
    25a0:	4618      	mov	r0, r3
    25a2:	f000 fa2d 	bl	2a00 <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    25a6:	687b      	ldr	r3, [r7, #4]
    25a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    25aa:	f240 234c 	movw	r3, #588	; 0x24c
    25ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25b2:	681b      	ldr	r3, [r3, #0]
    25b4:	429a      	cmp	r2, r3
    25b6:	d906      	bls.n	25c6 <prvCheckPendingReadyList+0x5a>
    25b8:	687b      	ldr	r3, [r7, #4]
    25ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    25bc:	f240 234c 	movw	r3, #588	; 0x24c
    25c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25c4:	601a      	str	r2, [r3, #0]
    25c6:	687b      	ldr	r3, [r7, #4]
    25c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    25ca:	015a      	lsls	r2, r3, #5
    25cc:	f240 13a0 	movw	r3, #416	; 0x1a0
    25d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25d4:	441a      	add	r2, r3
    25d6:	687b      	ldr	r3, [r7, #4]
    25d8:	3304      	adds	r3, #4
    25da:	4610      	mov	r0, r2
    25dc:	4619      	mov	r1, r3
    25de:	f000 f9af 	bl	2940 <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    25e2:	f240 2328 	movw	r3, #552	; 0x228
    25e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25ea:	681b      	ldr	r3, [r3, #0]
    25ec:	2b00      	cmp	r3, #0
    25ee:	d1c1      	bne.n	2574 <prvCheckPendingReadyList+0x8>
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
    25f0:	3708      	adds	r7, #8
    25f2:	46bd      	mov	sp, r7
    25f4:	bd80      	pop	{r7, pc}
    25f6:	bf00      	nop

000025f8 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
    25f8:	b580      	push	{r7, lr}
    25fa:	b082      	sub	sp, #8
    25fc:	af00      	add	r7, sp, #0
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    25fe:	f001 fb17 	bl	3c30 <xTaskGetTickCount>
    2602:	4602      	mov	r2, r0
    2604:	f240 2354 	movw	r3, #596	; 0x254
    2608:	f2c2 0300 	movt	r3, #8192	; 0x2000
    260c:	681b      	ldr	r3, [r3, #0]
    260e:	1ad2      	subs	r2, r2, r3
    2610:	f240 2358 	movw	r3, #600	; 0x258
    2614:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2618:	601a      	str	r2, [r3, #0]
	while( xPassedTicks )
    261a:	e082      	b.n	2722 <prvCheckDelayedList+0x12a>
	{
		xCoRoutineTickCount++;
    261c:	f240 2350 	movw	r3, #592	; 0x250
    2620:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2624:	681b      	ldr	r3, [r3, #0]
    2626:	1c5a      	adds	r2, r3, #1
    2628:	f240 2350 	movw	r3, #592	; 0x250
    262c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2630:	601a      	str	r2, [r3, #0]
		xPassedTicks--;
    2632:	f240 2358 	movw	r3, #600	; 0x258
    2636:	f2c2 0300 	movt	r3, #8192	; 0x2000
    263a:	681b      	ldr	r3, [r3, #0]
    263c:	1e5a      	subs	r2, r3, #1
    263e:	f240 2358 	movw	r3, #600	; 0x258
    2642:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2646:	601a      	str	r2, [r3, #0]

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
    2648:	f240 2350 	movw	r3, #592	; 0x250
    264c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2650:	681b      	ldr	r3, [r3, #0]
    2652:	2b00      	cmp	r3, #0
    2654:	d116      	bne.n	2684 <prvCheckDelayedList+0x8c>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
    2656:	f240 2320 	movw	r3, #544	; 0x220
    265a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    265e:	681b      	ldr	r3, [r3, #0]
    2660:	607b      	str	r3, [r7, #4]
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    2662:	f240 2324 	movw	r3, #548	; 0x224
    2666:	f2c2 0300 	movt	r3, #8192	; 0x2000
    266a:	681a      	ldr	r2, [r3, #0]
    266c:	f240 2320 	movw	r3, #544	; 0x220
    2670:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2674:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedCoRoutineList = pxTemp;
    2676:	f240 2324 	movw	r3, #548	; 0x224
    267a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    267e:	687a      	ldr	r2, [r7, #4]
    2680:	601a      	str	r2, [r3, #0]
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    2682:	e046      	b.n	2712 <prvCheckDelayedList+0x11a>
    2684:	e045      	b.n	2712 <prvCheckDelayedList+0x11a>
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    2686:	f240 2320 	movw	r3, #544	; 0x220
    268a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    268e:	681b      	ldr	r3, [r3, #0]
    2690:	699b      	ldr	r3, [r3, #24]
    2692:	699b      	ldr	r3, [r3, #24]
    2694:	603b      	str	r3, [r7, #0]

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
    2696:	683b      	ldr	r3, [r7, #0]
    2698:	685a      	ldr	r2, [r3, #4]
    269a:	f240 2350 	movw	r3, #592	; 0x250
    269e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26a2:	681b      	ldr	r3, [r3, #0]
    26a4:	429a      	cmp	r2, r3
    26a6:	d900      	bls.n	26aa <prvCheckDelayedList+0xb2>
			{			
				/* Timeout not yet expired. */																			
				break;																				
    26a8:	e03b      	b.n	2722 <prvCheckDelayedList+0x12a>
			}																						

			portDISABLE_INTERRUPTS();
    26aa:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    26ae:	f380 8811 	msr	BASEPRI, r0
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
    26b2:	683b      	ldr	r3, [r7, #0]
    26b4:	3304      	adds	r3, #4
    26b6:	4618      	mov	r0, r3
    26b8:	f000 f9a2 	bl	2a00 <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
    26bc:	683b      	ldr	r3, [r7, #0]
    26be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    26c0:	2b00      	cmp	r3, #0
    26c2:	d004      	beq.n	26ce <prvCheckDelayedList+0xd6>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
    26c4:	683b      	ldr	r3, [r7, #0]
    26c6:	3324      	adds	r3, #36	; 0x24
    26c8:	4618      	mov	r0, r3
    26ca:	f000 f999 	bl	2a00 <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    26ce:	f04f 0000 	mov.w	r0, #0
    26d2:	f380 8811 	msr	BASEPRI, r0

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    26d6:	683b      	ldr	r3, [r7, #0]
    26d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    26da:	f240 234c 	movw	r3, #588	; 0x24c
    26de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26e2:	681b      	ldr	r3, [r3, #0]
    26e4:	429a      	cmp	r2, r3
    26e6:	d906      	bls.n	26f6 <prvCheckDelayedList+0xfe>
    26e8:	683b      	ldr	r3, [r7, #0]
    26ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    26ec:	f240 234c 	movw	r3, #588	; 0x24c
    26f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26f4:	601a      	str	r2, [r3, #0]
    26f6:	683b      	ldr	r3, [r7, #0]
    26f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    26fa:	015a      	lsls	r2, r3, #5
    26fc:	f240 13a0 	movw	r3, #416	; 0x1a0
    2700:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2704:	441a      	add	r2, r3
    2706:	683b      	ldr	r3, [r7, #0]
    2708:	3304      	adds	r3, #4
    270a:	4610      	mov	r0, r2
    270c:	4619      	mov	r1, r3
    270e:	f000 f917 	bl	2940 <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    2712:	f240 2320 	movw	r3, #544	; 0x220
    2716:	f2c2 0300 	movt	r3, #8192	; 0x2000
    271a:	681b      	ldr	r3, [r3, #0]
    271c:	681b      	ldr	r3, [r3, #0]
    271e:	2b00      	cmp	r3, #0
    2720:	d1b1      	bne.n	2686 <prvCheckDelayedList+0x8e>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    2722:	f240 2358 	movw	r3, #600	; 0x258
    2726:	f2c2 0300 	movt	r3, #8192	; 0x2000
    272a:	681b      	ldr	r3, [r3, #0]
    272c:	2b00      	cmp	r3, #0
    272e:	f47f af75 	bne.w	261c <prvCheckDelayedList+0x24>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
    2732:	f240 2350 	movw	r3, #592	; 0x250
    2736:	f2c2 0300 	movt	r3, #8192	; 0x2000
    273a:	681a      	ldr	r2, [r3, #0]
    273c:	f240 2354 	movw	r3, #596	; 0x254
    2740:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2744:	601a      	str	r2, [r3, #0]
}
    2746:	3708      	adds	r7, #8
    2748:	46bd      	mov	sp, r7
    274a:	bd80      	pop	{r7, pc}

0000274c <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    274c:	b580      	push	{r7, lr}
    274e:	b082      	sub	sp, #8
    2750:	af00      	add	r7, sp, #0
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
    2752:	f7ff ff0b 	bl	256c <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
    2756:	f7ff ff4f 	bl	25f8 <prvCheckDelayedList>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    275a:	e012      	b.n	2782 <vCoRoutineSchedule+0x36>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    275c:	f240 234c 	movw	r3, #588	; 0x24c
    2760:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2764:	681b      	ldr	r3, [r3, #0]
    2766:	2b00      	cmp	r3, #0
    2768:	d100      	bne.n	276c <vCoRoutineSchedule+0x20>
		{
			/* No more co-routines to check. */
			return;
    276a:	e051      	b.n	2810 <vCoRoutineSchedule+0xc4>
		}
		--uxTopCoRoutineReadyPriority;
    276c:	f240 234c 	movw	r3, #588	; 0x24c
    2770:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2774:	681b      	ldr	r3, [r3, #0]
    2776:	1e5a      	subs	r2, r3, #1
    2778:	f240 234c 	movw	r3, #588	; 0x24c
    277c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2780:	601a      	str	r2, [r3, #0]

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    2782:	f240 234c 	movw	r3, #588	; 0x24c
    2786:	f2c2 0300 	movt	r3, #8192	; 0x2000
    278a:	681a      	ldr	r2, [r3, #0]
    278c:	f240 13a0 	movw	r3, #416	; 0x1a0
    2790:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2794:	0152      	lsls	r2, r2, #5
    2796:	4413      	add	r3, r2
    2798:	681b      	ldr	r3, [r3, #0]
    279a:	2b00      	cmp	r3, #0
    279c:	d0de      	beq.n	275c <vCoRoutineSchedule+0x10>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    279e:	f240 234c 	movw	r3, #588	; 0x24c
    27a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27a6:	681b      	ldr	r3, [r3, #0]
    27a8:	015a      	lsls	r2, r3, #5
    27aa:	f240 13a0 	movw	r3, #416	; 0x1a0
    27ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27b2:	4413      	add	r3, r2
    27b4:	607b      	str	r3, [r7, #4]
    27b6:	687b      	ldr	r3, [r7, #4]
    27b8:	685b      	ldr	r3, [r3, #4]
    27ba:	691a      	ldr	r2, [r3, #16]
    27bc:	687b      	ldr	r3, [r7, #4]
    27be:	605a      	str	r2, [r3, #4]
    27c0:	687b      	ldr	r3, [r7, #4]
    27c2:	685a      	ldr	r2, [r3, #4]
    27c4:	687b      	ldr	r3, [r7, #4]
    27c6:	3308      	adds	r3, #8
    27c8:	429a      	cmp	r2, r3
    27ca:	d104      	bne.n	27d6 <vCoRoutineSchedule+0x8a>
    27cc:	687b      	ldr	r3, [r7, #4]
    27ce:	685b      	ldr	r3, [r3, #4]
    27d0:	691a      	ldr	r2, [r3, #16]
    27d2:	687b      	ldr	r3, [r7, #4]
    27d4:	605a      	str	r2, [r3, #4]
    27d6:	687b      	ldr	r3, [r7, #4]
    27d8:	685b      	ldr	r3, [r3, #4]
    27da:	699a      	ldr	r2, [r3, #24]
    27dc:	f240 2348 	movw	r3, #584	; 0x248
    27e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27e4:	601a      	str	r2, [r3, #0]

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    27e6:	f240 2348 	movw	r3, #584	; 0x248
    27ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27ee:	681b      	ldr	r3, [r3, #0]
    27f0:	681a      	ldr	r2, [r3, #0]
    27f2:	f240 2348 	movw	r3, #584	; 0x248
    27f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27fa:	6819      	ldr	r1, [r3, #0]
    27fc:	f240 2348 	movw	r3, #584	; 0x248
    2800:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2804:	681b      	ldr	r3, [r3, #0]
    2806:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2808:	4608      	mov	r0, r1
    280a:	4619      	mov	r1, r3
    280c:	4790      	blx	r2

	return;
    280e:	bf00      	nop
}
    2810:	3708      	adds	r7, #8
    2812:	46bd      	mov	sp, r7
    2814:	bd80      	pop	{r7, pc}
    2816:	bf00      	nop

00002818 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
    2818:	b580      	push	{r7, lr}
    281a:	b082      	sub	sp, #8
    281c:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    281e:	2300      	movs	r3, #0
    2820:	607b      	str	r3, [r7, #4]
    2822:	e00c      	b.n	283e <prvInitialiseCoRoutineLists+0x26>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    2824:	687b      	ldr	r3, [r7, #4]
    2826:	015a      	lsls	r2, r3, #5
    2828:	f240 13a0 	movw	r3, #416	; 0x1a0
    282c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2830:	4413      	add	r3, r2
    2832:	4618      	mov	r0, r3
    2834:	f000 f858 	bl	28e8 <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    2838:	687b      	ldr	r3, [r7, #4]
    283a:	3301      	adds	r3, #1
    283c:	607b      	str	r3, [r7, #4]
    283e:	687b      	ldr	r3, [r7, #4]
    2840:	2b01      	cmp	r3, #1
    2842:	d9ef      	bls.n	2824 <prvInitialiseCoRoutineLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
    2844:	f240 10e0 	movw	r0, #480	; 0x1e0
    2848:	f2c2 0000 	movt	r0, #8192	; 0x2000
    284c:	f000 f84c 	bl	28e8 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
    2850:	f240 2000 	movw	r0, #512	; 0x200
    2854:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2858:	f000 f846 	bl	28e8 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
    285c:	f240 2028 	movw	r0, #552	; 0x228
    2860:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2864:	f000 f840 	bl	28e8 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    2868:	f240 2320 	movw	r3, #544	; 0x220
    286c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2870:	f240 12e0 	movw	r2, #480	; 0x1e0
    2874:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2878:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    287a:	f240 2324 	movw	r3, #548	; 0x224
    287e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2882:	f240 2200 	movw	r2, #512	; 0x200
    2886:	f2c2 0200 	movt	r2, #8192	; 0x2000
    288a:	601a      	str	r2, [r3, #0]
}
    288c:	3708      	adds	r7, #8
    288e:	46bd      	mov	sp, r7
    2890:	bd80      	pop	{r7, pc}
    2892:	bf00      	nop

00002894 <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
    2894:	b580      	push	{r7, lr}
    2896:	b084      	sub	sp, #16
    2898:	af00      	add	r7, sp, #0
    289a:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    289c:	687b      	ldr	r3, [r7, #4]
    289e:	699b      	ldr	r3, [r3, #24]
    28a0:	699b      	ldr	r3, [r3, #24]
    28a2:	60bb      	str	r3, [r7, #8]
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    28a4:	68bb      	ldr	r3, [r7, #8]
    28a6:	3324      	adds	r3, #36	; 0x24
    28a8:	4618      	mov	r0, r3
    28aa:	f000 f8a9 	bl	2a00 <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    28ae:	68bb      	ldr	r3, [r7, #8]
    28b0:	3324      	adds	r3, #36	; 0x24
    28b2:	f240 2028 	movw	r0, #552	; 0x228
    28b6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    28ba:	4619      	mov	r1, r3
    28bc:	f000 f840 	bl	2940 <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
    28c0:	68bb      	ldr	r3, [r7, #8]
    28c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    28c4:	f240 2348 	movw	r3, #584	; 0x248
    28c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28cc:	681b      	ldr	r3, [r3, #0]
    28ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    28d0:	429a      	cmp	r2, r3
    28d2:	d302      	bcc.n	28da <xCoRoutineRemoveFromEventList+0x46>
	{
		xReturn = pdTRUE;
    28d4:	2301      	movs	r3, #1
    28d6:	60fb      	str	r3, [r7, #12]
    28d8:	e001      	b.n	28de <xCoRoutineRemoveFromEventList+0x4a>
	}
	else
	{
		xReturn = pdFALSE;
    28da:	2300      	movs	r3, #0
    28dc:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    28de:	68fb      	ldr	r3, [r7, #12]
}
    28e0:	4618      	mov	r0, r3
    28e2:	3710      	adds	r7, #16
    28e4:	46bd      	mov	sp, r7
    28e6:	bd80      	pop	{r7, pc}

000028e8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    28e8:	b480      	push	{r7}
    28ea:	b083      	sub	sp, #12
    28ec:	af00      	add	r7, sp, #0
    28ee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    28f0:	687b      	ldr	r3, [r7, #4]
    28f2:	f103 0208 	add.w	r2, r3, #8
    28f6:	687b      	ldr	r3, [r7, #4]
    28f8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    28fa:	687b      	ldr	r3, [r7, #4]
    28fc:	f04f 32ff 	mov.w	r2, #4294967295
    2900:	609a      	str	r2, [r3, #8]
    pxList->xListEnd.xDeadline = portMAX_DELAY;
#endif

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    2902:	687b      	ldr	r3, [r7, #4]
    2904:	f103 0208 	add.w	r2, r3, #8
    2908:	687b      	ldr	r3, [r7, #4]
    290a:	619a      	str	r2, [r3, #24]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    290c:	687b      	ldr	r3, [r7, #4]
    290e:	f103 0208 	add.w	r2, r3, #8
    2912:	687b      	ldr	r3, [r7, #4]
    2914:	61da      	str	r2, [r3, #28]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    2916:	687b      	ldr	r3, [r7, #4]
    2918:	2200      	movs	r2, #0
    291a:	601a      	str	r2, [r3, #0]
}
    291c:	370c      	adds	r7, #12
    291e:	46bd      	mov	sp, r7
    2920:	f85d 7b04 	ldr.w	r7, [sp], #4
    2924:	4770      	bx	lr
    2926:	bf00      	nop

00002928 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
    2928:	b480      	push	{r7}
    292a:	b083      	sub	sp, #12
    292c:	af00      	add	r7, sp, #0
    292e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    2930:	687b      	ldr	r3, [r7, #4]
    2932:	2200      	movs	r2, #0
    2934:	61da      	str	r2, [r3, #28]
}
    2936:	370c      	adds	r7, #12
    2938:	46bd      	mov	sp, r7
    293a:	f85d 7b04 	ldr.w	r7, [sp], #4
    293e:	4770      	bx	lr

00002940 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    2940:	b480      	push	{r7}
    2942:	b085      	sub	sp, #20
    2944:	af00      	add	r7, sp, #0
    2946:	6078      	str	r0, [r7, #4]
    2948:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    294a:	687b      	ldr	r3, [r7, #4]
    294c:	685b      	ldr	r3, [r3, #4]
    294e:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
    2950:	68fb      	ldr	r3, [r7, #12]
    2952:	691a      	ldr	r2, [r3, #16]
    2954:	683b      	ldr	r3, [r7, #0]
    2956:	611a      	str	r2, [r3, #16]
	pxNewListItem->pxPrevious = pxList->pxIndex;
    2958:	687b      	ldr	r3, [r7, #4]
    295a:	685a      	ldr	r2, [r3, #4]
    295c:	683b      	ldr	r3, [r7, #0]
    295e:	615a      	str	r2, [r3, #20]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2960:	68fb      	ldr	r3, [r7, #12]
    2962:	691b      	ldr	r3, [r3, #16]
    2964:	683a      	ldr	r2, [r7, #0]
    2966:	615a      	str	r2, [r3, #20]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    2968:	68fb      	ldr	r3, [r7, #12]
    296a:	683a      	ldr	r2, [r7, #0]
    296c:	611a      	str	r2, [r3, #16]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    296e:	687b      	ldr	r3, [r7, #4]
    2970:	683a      	ldr	r2, [r7, #0]
    2972:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2974:	683b      	ldr	r3, [r7, #0]
    2976:	687a      	ldr	r2, [r7, #4]
    2978:	61da      	str	r2, [r3, #28]

	( pxList->uxNumberOfItems )++;
    297a:	687b      	ldr	r3, [r7, #4]
    297c:	681b      	ldr	r3, [r3, #0]
    297e:	1c5a      	adds	r2, r3, #1
    2980:	687b      	ldr	r3, [r7, #4]
    2982:	601a      	str	r2, [r3, #0]
}
    2984:	3714      	adds	r7, #20
    2986:	46bd      	mov	sp, r7
    2988:	f85d 7b04 	ldr.w	r7, [sp], #4
    298c:	4770      	bx	lr
    298e:	bf00      	nop

00002990 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    2990:	b480      	push	{r7}
    2992:	b085      	sub	sp, #20
    2994:	af00      	add	r7, sp, #0
    2996:	6078      	str	r0, [r7, #4]
    2998:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    299a:	683b      	ldr	r3, [r7, #0]
    299c:	681b      	ldr	r3, [r3, #0]
    299e:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    29a0:	68bb      	ldr	r3, [r7, #8]
    29a2:	f1b3 3fff 	cmp.w	r3, #4294967295
    29a6:	d103      	bne.n	29b0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    29a8:	687b      	ldr	r3, [r7, #4]
    29aa:	69db      	ldr	r3, [r3, #28]
    29ac:	60fb      	str	r3, [r7, #12]
    29ae:	e00c      	b.n	29ca <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    29b0:	687b      	ldr	r3, [r7, #4]
    29b2:	3308      	adds	r3, #8
    29b4:	60fb      	str	r3, [r7, #12]
    29b6:	e002      	b.n	29be <vListInsert+0x2e>
    29b8:	68fb      	ldr	r3, [r7, #12]
    29ba:	691b      	ldr	r3, [r3, #16]
    29bc:	60fb      	str	r3, [r7, #12]
    29be:	68fb      	ldr	r3, [r7, #12]
    29c0:	691b      	ldr	r3, [r3, #16]
    29c2:	681a      	ldr	r2, [r3, #0]
    29c4:	68bb      	ldr	r3, [r7, #8]
    29c6:	429a      	cmp	r2, r3
    29c8:	d9f6      	bls.n	29b8 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    29ca:	68fb      	ldr	r3, [r7, #12]
    29cc:	691a      	ldr	r2, [r3, #16]
    29ce:	683b      	ldr	r3, [r7, #0]
    29d0:	611a      	str	r2, [r3, #16]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    29d2:	683b      	ldr	r3, [r7, #0]
    29d4:	691b      	ldr	r3, [r3, #16]
    29d6:	683a      	ldr	r2, [r7, #0]
    29d8:	615a      	str	r2, [r3, #20]
	pxNewListItem->pxPrevious = pxIterator;
    29da:	683b      	ldr	r3, [r7, #0]
    29dc:	68fa      	ldr	r2, [r7, #12]
    29de:	615a      	str	r2, [r3, #20]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    29e0:	68fb      	ldr	r3, [r7, #12]
    29e2:	683a      	ldr	r2, [r7, #0]
    29e4:	611a      	str	r2, [r3, #16]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    29e6:	683b      	ldr	r3, [r7, #0]
    29e8:	687a      	ldr	r2, [r7, #4]
    29ea:	61da      	str	r2, [r3, #28]

	( pxList->uxNumberOfItems )++;
    29ec:	687b      	ldr	r3, [r7, #4]
    29ee:	681b      	ldr	r3, [r3, #0]
    29f0:	1c5a      	adds	r2, r3, #1
    29f2:	687b      	ldr	r3, [r7, #4]
    29f4:	601a      	str	r2, [r3, #0]
}
    29f6:	3714      	adds	r7, #20
    29f8:	46bd      	mov	sp, r7
    29fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    29fe:	4770      	bx	lr

00002a00 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    2a00:	b480      	push	{r7}
    2a02:	b085      	sub	sp, #20
    2a04:	af00      	add	r7, sp, #0
    2a06:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    2a08:	687b      	ldr	r3, [r7, #4]
    2a0a:	691b      	ldr	r3, [r3, #16]
    2a0c:	687a      	ldr	r2, [r7, #4]
    2a0e:	6952      	ldr	r2, [r2, #20]
    2a10:	615a      	str	r2, [r3, #20]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    2a12:	687b      	ldr	r3, [r7, #4]
    2a14:	695b      	ldr	r3, [r3, #20]
    2a16:	687a      	ldr	r2, [r7, #4]
    2a18:	6912      	ldr	r2, [r2, #16]
    2a1a:	611a      	str	r2, [r3, #16]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    2a1c:	687b      	ldr	r3, [r7, #4]
    2a1e:	69db      	ldr	r3, [r3, #28]
    2a20:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    2a22:	68fb      	ldr	r3, [r7, #12]
    2a24:	685a      	ldr	r2, [r3, #4]
    2a26:	687b      	ldr	r3, [r7, #4]
    2a28:	429a      	cmp	r2, r3
    2a2a:	d103      	bne.n	2a34 <vListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    2a2c:	687b      	ldr	r3, [r7, #4]
    2a2e:	695a      	ldr	r2, [r3, #20]
    2a30:	68fb      	ldr	r3, [r7, #12]
    2a32:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
    2a34:	687b      	ldr	r3, [r7, #4]
    2a36:	2200      	movs	r2, #0
    2a38:	61da      	str	r2, [r3, #28]
	( pxList->uxNumberOfItems )--;
    2a3a:	68fb      	ldr	r3, [r7, #12]
    2a3c:	681b      	ldr	r3, [r3, #0]
    2a3e:	1e5a      	subs	r2, r3, #1
    2a40:	68fb      	ldr	r3, [r7, #12]
    2a42:	601a      	str	r2, [r3, #0]
}
    2a44:	3714      	adds	r7, #20
    2a46:	46bd      	mov	sp, r7
    2a48:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a4c:	4770      	bx	lr
    2a4e:	bf00      	nop

00002a50 <timer_init>:
 * running at Clk/1024.  For 16 Mhz clock, this will be every
 * 16384 microseconds, or 61 Hz.
 */
static inline void
timer_init( void )
{
    2a50:	b480      	push	{r7}
    2a52:	af00      	add	r7, sp, #0
  /* Timer1 @ Clk/1: System clock, ppm and servos pulses */
  TCCR1A		= 0x00;
    2a54:	f248 032f 	movw	r3, #32815	; 0x802f
    2a58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a5c:	2200      	movs	r2, #0
    2a5e:	701a      	strb	r2, [r3, #0]
  TCCR1B		= 0x01;
    2a60:	f248 032e 	movw	r3, #32814	; 0x802e
    2a64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a68:	2201      	movs	r2, #1
    2a6a:	701a      	strb	r2, [r3, #0]
  
  /* Timer2 @ Clk/1024: Periodic clock            */
  TCCR2		= 0x07;
    2a6c:	f248 0325 	movw	r3, #32805	; 0x8025
    2a70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a74:	2207      	movs	r2, #7
    2a76:	701a      	strb	r2, [r3, #0]
}
    2a78:	46bd      	mov	sp, r7
    2a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a7e:	4770      	bx	lr

00002a80 <vPapabenchInit>:

extern uint8_t mode ;
extern uint8_t pprz_mode;

void vPapabenchInit()
{
    2a80:	b580      	push	{r7, lr}
    2a82:	af00      	add	r7, sp, #0
    mode = MODE_AUTO;
    2a84:	f64b 5380 	movw	r3, #48512	; 0xbd80
    2a88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    2a8c:	2201      	movs	r2, #1
    2a8e:	701a      	strb	r2, [r3, #0]
    pprz_mode = PPRZ_MODE_HOME;
    2a90:	f24b 630c 	movw	r3, #46604	; 0xb60c
    2a94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    2a98:	2203      	movs	r2, #3
    2a9a:	701a      	strb	r2, [r3, #0]
    timer_init();
    2a9c:	f7ff ffd8 	bl	2a50 <timer_init>
    modem_init();
    2aa0:	f009 f99a 	bl	bdd8 <modem_init>
    adc_init();
    2aa4:	f009 fce4 	bl	c470 <adc_init>
#ifdef CTL_BRD_V1_1
    adc_buf_channel(uint8_t adc_channel, struct adc_buf *s);
#endif 
    spi_init();
    2aa8:	f009 fc56 	bl	c358 <spi_init>
    link_fbw_init();
    2aac:	f009 fab2 	bl	c014 <link_fbw_init>
    gps_init();
    2ab0:	f009 fd8e 	bl	c5d0 <gps_init>
    nav_init();
    2ab4:	f00d f89e 	bl	fbf4 <nav_init>
    ir_init();
    2ab8:	f00a f84a 	bl	cb50 <ir_init>
    estimator_init();
    2abc:	f00d fa80 	bl	ffc0 <estimator_init>
#ifdef PAPABENCH_SINGLE
    fbw_init();
#endif
}
    2ac0:	bd80      	pop	{r7, pc}
    2ac2:	bf00      	nop

00002ac4 <vTask_0>:


void vTask_0()
{
    2ac4:	b580      	push	{r7, lr}
    2ac6:	af00      	add	r7, sp, #0
    last_radio_from_ppm(); //ppm.h
    2ac8:	f00e fa56 	bl	10f78 <last_radio_from_ppm>
}
    2acc:	bd80      	pop	{r7, pc}
    2ace:	bf00      	nop

00002ad0 <vTask_1>:

void  vTask_1()
{
    2ad0:	b580      	push	{r7, lr}
    2ad2:	af00      	add	r7, sp, #0
    to_autopilot_from_last_radio();  //main_auto.c
    2ad4:	f00e fe0a 	bl	116ec <to_autopilot_from_last_radio>
    spi_reset(); // spi_fbw.h
    2ad8:	f00e fd46 	bl	11568 <spi_reset>
}
    2adc:	bd80      	pop	{r7, pc}
    2ade:	bf00      	nop

00002ae0 <vTask_2>:

void  vTask_2()
{
    2ae0:	b580      	push	{r7, lr}
    2ae2:	af00      	add	r7, sp, #0
    check_mega128_values_task(); // main_auto.c
    2ae4:	f00e ff66 	bl	119b4 <check_mega128_values_task>
}
    2ae8:	bd80      	pop	{r7, pc}
    2aea:	bf00      	nop

00002aec <vTask_3>:

void vTask_3()
{
    2aec:	b580      	push	{r7, lr}
    2aee:	af00      	add	r7, sp, #0
    servo_transmit(); //servo.h
    2af0:	f00f f830 	bl	11b54 <servo_transmit>
}
    2af4:	bd80      	pop	{r7, pc}
    2af6:	bf00      	nop

00002af8 <vTask_4>:

void vTask_4()
{
    2af8:	b580      	push	{r7, lr}
    2afa:	af00      	add	r7, sp, #0
    check_failsafe_task(); //main_auto.c
    2afc:	f00e ff34 	bl	11968 <check_failsafe_task>
}
    2b00:	bd80      	pop	{r7, pc}
    2b02:	bf00      	nop

00002b04 <vTask_5>:

void vTask_5()
{
    2b04:	b580      	push	{r7, lr}
    2b06:	af00      	add	r7, sp, #0
    radio_control_task(); //main_auto.c
    2b08:	f007 fe04 	bl	a714 <radio_control_task>
    ir_gain_calib();
    2b0c:	f00a f878 	bl	cc00 <ir_gain_calib>
}
    2b10:	bd80      	pop	{r7, pc}
    2b12:	bf00      	nop

00002b14 <vTask_6>:

void vTask_6()
{
    2b14:	b580      	push	{r7, lr}
    2b16:	af00      	add	r7, sp, #0
    ir_update();
    2b18:	f00a f834 	bl	cb84 <ir_update>
    estimator_update_state_infrared();
    2b1c:	f00d faba 	bl	10094 <estimator_update_state_infrared>
    roll_pitch_pid_run();
    2b20:	f00a f89e 	bl	cc60 <roll_pitch_pid_run>
}
    2b24:	bd80      	pop	{r7, pc}
    2b26:	bf00      	nop

00002b28 <vTask_7>:

void vTask_7()
{
    2b28:	b580      	push	{r7, lr}
    2b2a:	af00      	add	r7, sp, #0
    link_fbw_send(); // link_fbw.h
    2b2c:	f009 fa84 	bl	c038 <link_fbw_send>
}
    2b30:	bd80      	pop	{r7, pc}
    2b32:	bf00      	nop

00002b34 <vTask_8>:

void vTask_8()
{
    2b34:	b580      	push	{r7, lr}
    2b36:	af00      	add	r7, sp, #0
    parse_gps_msg();
    2b38:	f009 fd56 	bl	c5e8 <parse_gps_msg>
    use_gps_pos();
    2b3c:	f009 f8f8 	bl	bd30 <use_gps_pos>
}
    2b40:	bd80      	pop	{r7, pc}
    2b42:	bf00      	nop

00002b44 <vTask_9>:

void vTask_9()
{
    2b44:	b580      	push	{r7, lr}
    2b46:	af00      	add	r7, sp, #0
    navigation_update();
    2b48:	f007 fede 	bl	a908 <navigation_update>
    send_nav_values();
    2b4c:	f007 fef2 	bl	a934 <send_nav_values>
    course_run();
    2b50:	f008 ffcc 	bl	baec <course_run>
}
    2b54:	bd80      	pop	{r7, pc}
    2b56:	bf00      	nop

00002b58 <vTask_10>:

void vTask_10()
{
    2b58:	b580      	push	{r7, lr}
    2b5a:	af00      	add	r7, sp, #0
    altitude_control_task();
    2b5c:	f008 ffea 	bl	bb34 <altitude_control_task>
}
    2b60:	bd80      	pop	{r7, pc}
    2b62:	bf00      	nop

00002b64 <vTask_11>:

void vTask_11()
{
    2b64:	b580      	push	{r7, lr}
    2b66:	af00      	add	r7, sp, #0
    climb_control_task();
    2b68:	f008 fffe 	bl	bb68 <climb_control_task>
}
    2b6c:	bd80      	pop	{r7, pc}
    2b6e:	bf00      	nop

00002b70 <vTask_12>:

void vTask_12()
{
    2b70:	b580      	push	{r7, lr}
    2b72:	af00      	add	r7, sp, #0
    reporting_task();
    2b74:	f007 fd82 	bl	a67c <reporting_task>
}
    2b78:	bd80      	pop	{r7, pc}
    2b7a:	bf00      	nop

00002b7c <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
    2b7c:	b580      	push	{r7, lr}
    2b7e:	b084      	sub	sp, #16
    2b80:	af00      	add	r7, sp, #0
    2b82:	6078      	str	r0, [r7, #4]
    2b84:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn = pdPASS;
    2b86:	2301      	movs	r3, #1
    2b88:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	/* If the queue being reset has already been used (has not just been
	created), then only reset the queue if its event lists are empty. */
	if( xNewQueue != pdTRUE )
    2b8a:	683b      	ldr	r3, [r7, #0]
    2b8c:	2b01      	cmp	r3, #1
    2b8e:	d00b      	beq.n	2ba8 <xQueueGenericReset+0x2c>
	{
		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2b90:	687b      	ldr	r3, [r7, #4]
    2b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2b94:	2b00      	cmp	r3, #0
    2b96:	d001      	beq.n	2b9c <xQueueGenericReset+0x20>
		{
			xReturn = pdFAIL;
    2b98:	2300      	movs	r3, #0
    2b9a:	60fb      	str	r3, [r7, #12]
		}

		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2b9c:	687b      	ldr	r3, [r7, #4]
    2b9e:	691b      	ldr	r3, [r3, #16]
    2ba0:	2b00      	cmp	r3, #0
    2ba2:	d001      	beq.n	2ba8 <xQueueGenericReset+0x2c>
		{
			xReturn = pdFAIL;
    2ba4:	2300      	movs	r3, #0
    2ba6:	60fb      	str	r3, [r7, #12]
		}
	}

	if( xReturn == pdPASS )
    2ba8:	68fb      	ldr	r3, [r7, #12]
    2baa:	2b01      	cmp	r3, #1
    2bac:	d12f      	bne.n	2c0e <xQueueGenericReset+0x92>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    2bae:	687b      	ldr	r3, [r7, #4]
    2bb0:	681a      	ldr	r2, [r3, #0]
    2bb2:	687b      	ldr	r3, [r7, #4]
    2bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    2bb6:	6879      	ldr	r1, [r7, #4]
    2bb8:	6d89      	ldr	r1, [r1, #88]	; 0x58
    2bba:	fb01 f303 	mul.w	r3, r1, r3
    2bbe:	441a      	add	r2, r3
    2bc0:	687b      	ldr	r3, [r7, #4]
    2bc2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    2bc4:	687b      	ldr	r3, [r7, #4]
    2bc6:	2200      	movs	r2, #0
    2bc8:	651a      	str	r2, [r3, #80]	; 0x50
		pxQueue->pcWriteTo = pxQueue->pcHead;
    2bca:	687b      	ldr	r3, [r7, #4]
    2bcc:	681a      	ldr	r2, [r3, #0]
    2bce:	687b      	ldr	r3, [r7, #4]
    2bd0:	609a      	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
    2bd2:	687b      	ldr	r3, [r7, #4]
    2bd4:	681a      	ldr	r2, [r3, #0]
    2bd6:	687b      	ldr	r3, [r7, #4]
    2bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    2bda:	3b01      	subs	r3, #1
    2bdc:	6879      	ldr	r1, [r7, #4]
    2bde:	6d89      	ldr	r1, [r1, #88]	; 0x58
    2be0:	fb01 f303 	mul.w	r3, r1, r3
    2be4:	441a      	add	r2, r3
    2be6:	687b      	ldr	r3, [r7, #4]
    2be8:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
    2bea:	687b      	ldr	r3, [r7, #4]
    2bec:	f04f 32ff 	mov.w	r2, #4294967295
    2bf0:	65da      	str	r2, [r3, #92]	; 0x5c
		pxQueue->xTxLock = queueUNLOCKED;
    2bf2:	687b      	ldr	r3, [r7, #4]
    2bf4:	f04f 32ff 	mov.w	r2, #4294967295
    2bf8:	661a      	str	r2, [r3, #96]	; 0x60

		/* Ensure the event queues start with the correct state. */
		vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    2bfa:	687b      	ldr	r3, [r7, #4]
    2bfc:	3310      	adds	r3, #16
    2bfe:	4618      	mov	r0, r3
    2c00:	f7ff fe72 	bl	28e8 <vListInitialise>
		vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    2c04:	687b      	ldr	r3, [r7, #4]
    2c06:	3330      	adds	r3, #48	; 0x30
    2c08:	4618      	mov	r0, r3
    2c0a:	f7ff fe6d 	bl	28e8 <vListInitialise>
	}

	return xReturn;
    2c0e:	68fb      	ldr	r3, [r7, #12]
}
    2c10:	4618      	mov	r0, r3
    2c12:	3710      	adds	r7, #16
    2c14:	46bd      	mov	sp, r7
    2c16:	bd80      	pop	{r7, pc}

00002c18 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
    2c18:	b580      	push	{r7, lr}
    2c1a:	b088      	sub	sp, #32
    2c1c:	af00      	add	r7, sp, #0
    2c1e:	60f8      	str	r0, [r7, #12]
    2c20:	60b9      	str	r1, [r7, #8]
    2c22:	4613      	mov	r3, r2
    2c24:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    2c26:	2300      	movs	r3, #0
    2c28:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    2c2a:	68fb      	ldr	r3, [r7, #12]
    2c2c:	2b00      	cmp	r3, #0
    2c2e:	d026      	beq.n	2c7e <xQueueGenericCreate+0x66>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    2c30:	2064      	movs	r0, #100	; 0x64
    2c32:	f001 fd85 	bl	4740 <pvPortMalloc>
    2c36:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
    2c38:	69bb      	ldr	r3, [r7, #24]
    2c3a:	2b00      	cmp	r3, #0
    2c3c:	d01f      	beq.n	2c7e <xQueueGenericCreate+0x66>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    2c3e:	68fb      	ldr	r3, [r7, #12]
    2c40:	68ba      	ldr	r2, [r7, #8]
    2c42:	fb02 f303 	mul.w	r3, r2, r3
    2c46:	3301      	adds	r3, #1
    2c48:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    2c4a:	6978      	ldr	r0, [r7, #20]
    2c4c:	f001 fd78 	bl	4740 <pvPortMalloc>
    2c50:	4602      	mov	r2, r0
    2c52:	69bb      	ldr	r3, [r7, #24]
    2c54:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
    2c56:	69bb      	ldr	r3, [r7, #24]
    2c58:	681b      	ldr	r3, [r3, #0]
    2c5a:	2b00      	cmp	r3, #0
    2c5c:	d00c      	beq.n	2c78 <xQueueGenericCreate+0x60>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
    2c5e:	69bb      	ldr	r3, [r7, #24]
    2c60:	68fa      	ldr	r2, [r7, #12]
    2c62:	655a      	str	r2, [r3, #84]	; 0x54
				pxNewQueue->uxItemSize = uxItemSize;
    2c64:	69bb      	ldr	r3, [r7, #24]
    2c66:	68ba      	ldr	r2, [r7, #8]
    2c68:	659a      	str	r2, [r3, #88]	; 0x58
				xQueueGenericReset( pxNewQueue, pdTRUE );
    2c6a:	69b8      	ldr	r0, [r7, #24]
    2c6c:	2101      	movs	r1, #1
    2c6e:	f7ff ff85 	bl	2b7c <xQueueGenericReset>
					pxNewQueue->ucQueueType = ucQueueType;
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    2c72:	69bb      	ldr	r3, [r7, #24]
    2c74:	61fb      	str	r3, [r7, #28]
    2c76:	e002      	b.n	2c7e <xQueueGenericCreate+0x66>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
    2c78:	69b8      	ldr	r0, [r7, #24]
    2c7a:	f001 fe25 	bl	48c8 <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    2c7e:	69fb      	ldr	r3, [r7, #28]
}
    2c80:	4618      	mov	r0, r3
    2c82:	3720      	adds	r7, #32
    2c84:	46bd      	mov	sp, r7
    2c86:	bd80      	pop	{r7, pc}

00002c88 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( unsigned char ucQueueType )
	{
    2c88:	b580      	push	{r7, lr}
    2c8a:	b084      	sub	sp, #16
    2c8c:	af00      	add	r7, sp, #0
    2c8e:	4603      	mov	r3, r0
    2c90:	71fb      	strb	r3, [r7, #7]
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    2c92:	2064      	movs	r0, #100	; 0x64
    2c94:	f001 fd54 	bl	4740 <pvPortMalloc>
    2c98:	60f8      	str	r0, [r7, #12]
		if( pxNewQueue != NULL )
    2c9a:	68fb      	ldr	r3, [r7, #12]
    2c9c:	2b00      	cmp	r3, #0
    2c9e:	d02c      	beq.n	2cfa <xQueueCreateMutex+0x72>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    2ca0:	68fb      	ldr	r3, [r7, #12]
    2ca2:	2200      	movs	r2, #0
    2ca4:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    2ca6:	68fb      	ldr	r3, [r7, #12]
    2ca8:	2200      	movs	r2, #0
    2caa:	601a      	str	r2, [r3, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
    2cac:	68fb      	ldr	r3, [r7, #12]
    2cae:	2200      	movs	r2, #0
    2cb0:	609a      	str	r2, [r3, #8]
			pxNewQueue->pcReadFrom = NULL;
    2cb2:	68fb      	ldr	r3, [r7, #12]
    2cb4:	2200      	movs	r2, #0
    2cb6:	60da      	str	r2, [r3, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    2cb8:	68fb      	ldr	r3, [r7, #12]
    2cba:	2200      	movs	r2, #0
    2cbc:	651a      	str	r2, [r3, #80]	; 0x50
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
    2cbe:	68fb      	ldr	r3, [r7, #12]
    2cc0:	2201      	movs	r2, #1
    2cc2:	655a      	str	r2, [r3, #84]	; 0x54
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
    2cc4:	68fb      	ldr	r3, [r7, #12]
    2cc6:	2200      	movs	r2, #0
    2cc8:	659a      	str	r2, [r3, #88]	; 0x58
			pxNewQueue->xRxLock = queueUNLOCKED;
    2cca:	68fb      	ldr	r3, [r7, #12]
    2ccc:	f04f 32ff 	mov.w	r2, #4294967295
    2cd0:	65da      	str	r2, [r3, #92]	; 0x5c
			pxNewQueue->xTxLock = queueUNLOCKED;
    2cd2:	68fb      	ldr	r3, [r7, #12]
    2cd4:	f04f 32ff 	mov.w	r2, #4294967295
    2cd8:	661a      	str	r2, [r3, #96]	; 0x60
				pxNewQueue->ucQueueType = ucQueueType;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    2cda:	68fb      	ldr	r3, [r7, #12]
    2cdc:	3310      	adds	r3, #16
    2cde:	4618      	mov	r0, r3
    2ce0:	f7ff fe02 	bl	28e8 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    2ce4:	68fb      	ldr	r3, [r7, #12]
    2ce6:	3330      	adds	r3, #48	; 0x30
    2ce8:	4618      	mov	r0, r3
    2cea:	f7ff fdfd 	bl	28e8 <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
    2cee:	68f8      	ldr	r0, [r7, #12]
    2cf0:	2100      	movs	r1, #0
    2cf2:	2200      	movs	r2, #0
    2cf4:	2300      	movs	r3, #0
    2cf6:	f000 f81d 	bl	2d34 <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
    2cfa:	68fb      	ldr	r3, [r7, #12]
	}
    2cfc:	4618      	mov	r0, r3
    2cfe:	3710      	adds	r7, #16
    2d00:	46bd      	mov	sp, r7
    2d02:	bd80      	pop	{r7, pc}

00002d04 <xQueueGetMutexHolder>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void* xQueueGetMutexHolder( xQueueHandle xSemaphore )
	{
    2d04:	b580      	push	{r7, lr}
    2d06:	b084      	sub	sp, #16
    2d08:	af00      	add	r7, sp, #0
    2d0a:	6078      	str	r0, [r7, #4]
		/* This function is called by xSemaphoreGetMutexHolder(), and should not
		be called directly.  Note:  This is is a good way of determining if the
		calling task is the mutex holder, but not a good way of determining the
		identity of the mutex holder, as the holder may change between the
		following critical section exiting and the function returning. */
		taskENTER_CRITICAL();
    2d0c:	f001 fc9e 	bl	464c <vPortEnterCritical>
		{
			if( xSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
    2d10:	687b      	ldr	r3, [r7, #4]
    2d12:	681b      	ldr	r3, [r3, #0]
    2d14:	2b00      	cmp	r3, #0
    2d16:	d103      	bne.n	2d20 <xQueueGetMutexHolder+0x1c>
			{
				pxReturn = ( void * ) xSemaphore->pxMutexHolder;
    2d18:	687b      	ldr	r3, [r7, #4]
    2d1a:	685b      	ldr	r3, [r3, #4]
    2d1c:	60fb      	str	r3, [r7, #12]
    2d1e:	e001      	b.n	2d24 <xQueueGetMutexHolder+0x20>
			}
			else
			{
				pxReturn = NULL;
    2d20:	2300      	movs	r3, #0
    2d22:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
    2d24:	f001 fca8 	bl	4678 <vPortExitCritical>
		
		return pxReturn;
    2d28:	68fb      	ldr	r3, [r7, #12]
	}
    2d2a:	4618      	mov	r0, r3
    2d2c:	3710      	adds	r7, #16
    2d2e:	46bd      	mov	sp, r7
    2d30:	bd80      	pop	{r7, pc}
    2d32:	bf00      	nop

00002d34 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    2d34:	b580      	push	{r7, lr}
    2d36:	b088      	sub	sp, #32
    2d38:	af00      	add	r7, sp, #0
    2d3a:	60f8      	str	r0, [r7, #12]
    2d3c:	60b9      	str	r1, [r7, #8]
    2d3e:	607a      	str	r2, [r7, #4]
    2d40:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    2d42:	2300      	movs	r3, #0
    2d44:	61fb      	str	r3, [r7, #28]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    2d46:	f001 fc81 	bl	464c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    2d4a:	68fb      	ldr	r3, [r7, #12]
    2d4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    2d4e:	68fb      	ldr	r3, [r7, #12]
    2d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    2d52:	429a      	cmp	r2, r3
    2d54:	d216      	bcs.n	2d84 <xQueueGenericSend+0x50>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    2d56:	68f8      	ldr	r0, [r7, #12]
    2d58:	68b9      	ldr	r1, [r7, #8]
    2d5a:	683a      	ldr	r2, [r7, #0]
    2d5c:	f000 f9d6 	bl	310c <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2d60:	68fb      	ldr	r3, [r7, #12]
    2d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2d64:	2b00      	cmp	r3, #0
    2d66:	d009      	beq.n	2d7c <xQueueGenericSend+0x48>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    2d68:	68fb      	ldr	r3, [r7, #12]
    2d6a:	3330      	adds	r3, #48	; 0x30
    2d6c:	4618      	mov	r0, r3
    2d6e:	f001 f923 	bl	3fb8 <xTaskRemoveFromEventList>
    2d72:	4603      	mov	r3, r0
    2d74:	2b01      	cmp	r3, #1
    2d76:	d101      	bne.n	2d7c <xQueueGenericSend+0x48>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    2d78:	f001 fc5a 	bl	4630 <vPortYieldFromISR>
					}
				}

				taskEXIT_CRITICAL();
    2d7c:	f001 fc7c 	bl	4678 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    2d80:	2301      	movs	r3, #1
    2d82:	e059      	b.n	2e38 <xQueueGenericSend+0x104>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    2d84:	687b      	ldr	r3, [r7, #4]
    2d86:	2b00      	cmp	r3, #0
    2d88:	d103      	bne.n	2d92 <xQueueGenericSend+0x5e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    2d8a:	f001 fc75 	bl	4678 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    2d8e:	2300      	movs	r3, #0
    2d90:	e052      	b.n	2e38 <xQueueGenericSend+0x104>
				}
				else if( xEntryTimeSet == pdFALSE )
    2d92:	69fb      	ldr	r3, [r7, #28]
    2d94:	2b00      	cmp	r3, #0
    2d96:	d106      	bne.n	2da6 <xQueueGenericSend+0x72>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    2d98:	f107 0314 	add.w	r3, r7, #20
    2d9c:	4618      	mov	r0, r3
    2d9e:	f001 f961 	bl	4064 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    2da2:	2301      	movs	r3, #1
    2da4:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    2da6:	f001 fc67 	bl	4678 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    2daa:	f000 fe8b 	bl	3ac4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    2dae:	f001 fc4d 	bl	464c <vPortEnterCritical>
    2db2:	68fb      	ldr	r3, [r7, #12]
    2db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    2db6:	f1b3 3fff 	cmp.w	r3, #4294967295
    2dba:	d102      	bne.n	2dc2 <xQueueGenericSend+0x8e>
    2dbc:	68fb      	ldr	r3, [r7, #12]
    2dbe:	2200      	movs	r2, #0
    2dc0:	65da      	str	r2, [r3, #92]	; 0x5c
    2dc2:	68fb      	ldr	r3, [r7, #12]
    2dc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    2dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
    2dca:	d102      	bne.n	2dd2 <xQueueGenericSend+0x9e>
    2dcc:	68fb      	ldr	r3, [r7, #12]
    2dce:	2200      	movs	r2, #0
    2dd0:	661a      	str	r2, [r3, #96]	; 0x60
    2dd2:	f001 fc51 	bl	4678 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2dd6:	f107 0214 	add.w	r2, r7, #20
    2dda:	1d3b      	adds	r3, r7, #4
    2ddc:	4610      	mov	r0, r2
    2dde:	4619      	mov	r1, r3
    2de0:	f001 f958 	bl	4094 <xTaskCheckForTimeOut>
    2de4:	4603      	mov	r3, r0
    2de6:	2b00      	cmp	r3, #0
    2de8:	d11e      	bne.n	2e28 <xQueueGenericSend+0xf4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    2dea:	68f8      	ldr	r0, [r7, #12]
    2dec:	f000 fa86 	bl	32fc <prvIsQueueFull>
    2df0:	4603      	mov	r3, r0
    2df2:	2b00      	cmp	r3, #0
    2df4:	d012      	beq.n	2e1c <xQueueGenericSend+0xe8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    2df6:	68fb      	ldr	r3, [r7, #12]
    2df8:	f103 0210 	add.w	r2, r3, #16
    2dfc:	687b      	ldr	r3, [r7, #4]
    2dfe:	4610      	mov	r0, r2
    2e00:	4619      	mov	r1, r3
    2e02:	f001 f8a1 	bl	3f48 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    2e06:	68f8      	ldr	r0, [r7, #12]
    2e08:	f000 fa02 	bl	3210 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    2e0c:	f000 fe6c 	bl	3ae8 <xTaskResumeAll>
    2e10:	4603      	mov	r3, r0
    2e12:	2b00      	cmp	r3, #0
    2e14:	d10f      	bne.n	2e36 <xQueueGenericSend+0x102>
				{
					portYIELD_WITHIN_API();
    2e16:	f001 fc0b 	bl	4630 <vPortYieldFromISR>
    2e1a:	e00c      	b.n	2e36 <xQueueGenericSend+0x102>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    2e1c:	68f8      	ldr	r0, [r7, #12]
    2e1e:	f000 f9f7 	bl	3210 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    2e22:	f000 fe61 	bl	3ae8 <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
    2e26:	e78e      	b.n	2d46 <xQueueGenericSend+0x12>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    2e28:	68f8      	ldr	r0, [r7, #12]
    2e2a:	f000 f9f1 	bl	3210 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    2e2e:	f000 fe5b 	bl	3ae8 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    2e32:	2300      	movs	r3, #0
    2e34:	e000      	b.n	2e38 <xQueueGenericSend+0x104>
		}
	}
    2e36:	e786      	b.n	2d46 <xQueueGenericSend+0x12>
}
    2e38:	4618      	mov	r0, r3
    2e3a:	3720      	adds	r7, #32
    2e3c:	46bd      	mov	sp, r7
    2e3e:	bd80      	pop	{r7, pc}

00002e40 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    2e40:	b580      	push	{r7, lr}
    2e42:	b086      	sub	sp, #24
    2e44:	af00      	add	r7, sp, #0
    2e46:	60f8      	str	r0, [r7, #12]
    2e48:	60b9      	str	r1, [r7, #8]
    2e4a:	607a      	str	r2, [r7, #4]
    2e4c:	603b      	str	r3, [r7, #0]
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    2e4e:	2300      	movs	r3, #0
    2e50:	613b      	str	r3, [r7, #16]
    2e52:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    2e56:	f380 8811 	msr	BASEPRI, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    2e5a:	68fb      	ldr	r3, [r7, #12]
    2e5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    2e5e:	68fb      	ldr	r3, [r7, #12]
    2e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    2e62:	429a      	cmp	r2, r3
    2e64:	d221      	bcs.n	2eaa <xQueueGenericSendFromISR+0x6a>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    2e66:	68f8      	ldr	r0, [r7, #12]
    2e68:	68b9      	ldr	r1, [r7, #8]
    2e6a:	683a      	ldr	r2, [r7, #0]
    2e6c:	f000 f94e 	bl	310c <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    2e70:	68fb      	ldr	r3, [r7, #12]
    2e72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    2e74:	f1b3 3fff 	cmp.w	r3, #4294967295
    2e78:	d10f      	bne.n	2e9a <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2e7a:	68fb      	ldr	r3, [r7, #12]
    2e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2e7e:	2b00      	cmp	r3, #0
    2e80:	d010      	beq.n	2ea4 <xQueueGenericSendFromISR+0x64>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2e82:	68fb      	ldr	r3, [r7, #12]
    2e84:	3330      	adds	r3, #48	; 0x30
    2e86:	4618      	mov	r0, r3
    2e88:	f001 f896 	bl	3fb8 <xTaskRemoveFromEventList>
    2e8c:	4603      	mov	r3, r0
    2e8e:	2b00      	cmp	r3, #0
    2e90:	d008      	beq.n	2ea4 <xQueueGenericSendFromISR+0x64>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    2e92:	687b      	ldr	r3, [r7, #4]
    2e94:	2201      	movs	r2, #1
    2e96:	601a      	str	r2, [r3, #0]
    2e98:	e004      	b.n	2ea4 <xQueueGenericSendFromISR+0x64>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    2e9a:	68fb      	ldr	r3, [r7, #12]
    2e9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    2e9e:	1c5a      	adds	r2, r3, #1
    2ea0:	68fb      	ldr	r3, [r7, #12]
    2ea2:	661a      	str	r2, [r3, #96]	; 0x60
			}

			xReturn = pdPASS;
    2ea4:	2301      	movs	r3, #1
    2ea6:	617b      	str	r3, [r7, #20]
    2ea8:	e001      	b.n	2eae <xQueueGenericSendFromISR+0x6e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    2eaa:	2300      	movs	r3, #0
    2eac:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    2eae:	f04f 0000 	mov.w	r0, #0
    2eb2:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    2eb6:	697b      	ldr	r3, [r7, #20]
}
    2eb8:	4618      	mov	r0, r3
    2eba:	3718      	adds	r7, #24
    2ebc:	46bd      	mov	sp, r7
    2ebe:	bd80      	pop	{r7, pc}

00002ec0 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    2ec0:	b580      	push	{r7, lr}
    2ec2:	b088      	sub	sp, #32
    2ec4:	af00      	add	r7, sp, #0
    2ec6:	60f8      	str	r0, [r7, #12]
    2ec8:	60b9      	str	r1, [r7, #8]
    2eca:	607a      	str	r2, [r7, #4]
    2ecc:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    2ece:	2300      	movs	r3, #0
    2ed0:	61fb      	str	r3, [r7, #28]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    2ed2:	f001 fbbb 	bl	464c <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    2ed6:	68fb      	ldr	r3, [r7, #12]
    2ed8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    2eda:	2b00      	cmp	r3, #0
    2edc:	d03b      	beq.n	2f56 <xQueueGenericReceive+0x96>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    2ede:	68fb      	ldr	r3, [r7, #12]
    2ee0:	68db      	ldr	r3, [r3, #12]
    2ee2:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    2ee4:	68f8      	ldr	r0, [r7, #12]
    2ee6:	68b9      	ldr	r1, [r7, #8]
    2ee8:	f000 f96c 	bl	31c4 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    2eec:	683b      	ldr	r3, [r7, #0]
    2eee:	2b00      	cmp	r3, #0
    2ef0:	d11c      	bne.n	2f2c <xQueueGenericReceive+0x6c>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    2ef2:	68fb      	ldr	r3, [r7, #12]
    2ef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    2ef6:	1e5a      	subs	r2, r3, #1
    2ef8:	68fb      	ldr	r3, [r7, #12]
    2efa:	651a      	str	r2, [r3, #80]	; 0x50

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    2efc:	68fb      	ldr	r3, [r7, #12]
    2efe:	681b      	ldr	r3, [r3, #0]
    2f00:	2b00      	cmp	r3, #0
    2f02:	d104      	bne.n	2f0e <xQueueGenericReceive+0x4e>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
    2f04:	f001 fa76 	bl	43f4 <xTaskGetCurrentTaskHandle>
    2f08:	4602      	mov	r2, r0
    2f0a:	68fb      	ldr	r3, [r7, #12]
    2f0c:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2f0e:	68fb      	ldr	r3, [r7, #12]
    2f10:	691b      	ldr	r3, [r3, #16]
    2f12:	2b00      	cmp	r3, #0
    2f14:	d01b      	beq.n	2f4e <xQueueGenericReceive+0x8e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    2f16:	68fb      	ldr	r3, [r7, #12]
    2f18:	3310      	adds	r3, #16
    2f1a:	4618      	mov	r0, r3
    2f1c:	f001 f84c 	bl	3fb8 <xTaskRemoveFromEventList>
    2f20:	4603      	mov	r3, r0
    2f22:	2b01      	cmp	r3, #1
    2f24:	d113      	bne.n	2f4e <xQueueGenericReceive+0x8e>
						{
							portYIELD_WITHIN_API();
    2f26:	f001 fb83 	bl	4630 <vPortYieldFromISR>
    2f2a:	e010      	b.n	2f4e <xQueueGenericReceive+0x8e>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    2f2c:	68fb      	ldr	r3, [r7, #12]
    2f2e:	69ba      	ldr	r2, [r7, #24]
    2f30:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2f32:	68fb      	ldr	r3, [r7, #12]
    2f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2f36:	2b00      	cmp	r3, #0
    2f38:	d009      	beq.n	2f4e <xQueueGenericReceive+0x8e>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2f3a:	68fb      	ldr	r3, [r7, #12]
    2f3c:	3330      	adds	r3, #48	; 0x30
    2f3e:	4618      	mov	r0, r3
    2f40:	f001 f83a 	bl	3fb8 <xTaskRemoveFromEventList>
    2f44:	4603      	mov	r3, r0
    2f46:	2b00      	cmp	r3, #0
    2f48:	d001      	beq.n	2f4e <xQueueGenericReceive+0x8e>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    2f4a:	f001 fb71 	bl	4630 <vPortYieldFromISR>
						}
					}

				}

				taskEXIT_CRITICAL();
    2f4e:	f001 fb93 	bl	4678 <vPortExitCritical>
				return pdPASS;
    2f52:	2301      	movs	r3, #1
    2f54:	e066      	b.n	3024 <xQueueGenericReceive+0x164>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    2f56:	687b      	ldr	r3, [r7, #4]
    2f58:	2b00      	cmp	r3, #0
    2f5a:	d103      	bne.n	2f64 <xQueueGenericReceive+0xa4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    2f5c:	f001 fb8c 	bl	4678 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    2f60:	2300      	movs	r3, #0
    2f62:	e05f      	b.n	3024 <xQueueGenericReceive+0x164>
				}
				else if( xEntryTimeSet == pdFALSE )
    2f64:	69fb      	ldr	r3, [r7, #28]
    2f66:	2b00      	cmp	r3, #0
    2f68:	d106      	bne.n	2f78 <xQueueGenericReceive+0xb8>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    2f6a:	f107 0310 	add.w	r3, r7, #16
    2f6e:	4618      	mov	r0, r3
    2f70:	f001 f878 	bl	4064 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    2f74:	2301      	movs	r3, #1
    2f76:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    2f78:	f001 fb7e 	bl	4678 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    2f7c:	f000 fda2 	bl	3ac4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    2f80:	f001 fb64 	bl	464c <vPortEnterCritical>
    2f84:	68fb      	ldr	r3, [r7, #12]
    2f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    2f88:	f1b3 3fff 	cmp.w	r3, #4294967295
    2f8c:	d102      	bne.n	2f94 <xQueueGenericReceive+0xd4>
    2f8e:	68fb      	ldr	r3, [r7, #12]
    2f90:	2200      	movs	r2, #0
    2f92:	65da      	str	r2, [r3, #92]	; 0x5c
    2f94:	68fb      	ldr	r3, [r7, #12]
    2f96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    2f98:	f1b3 3fff 	cmp.w	r3, #4294967295
    2f9c:	d102      	bne.n	2fa4 <xQueueGenericReceive+0xe4>
    2f9e:	68fb      	ldr	r3, [r7, #12]
    2fa0:	2200      	movs	r2, #0
    2fa2:	661a      	str	r2, [r3, #96]	; 0x60
    2fa4:	f001 fb68 	bl	4678 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2fa8:	f107 0210 	add.w	r2, r7, #16
    2fac:	1d3b      	adds	r3, r7, #4
    2fae:	4610      	mov	r0, r2
    2fb0:	4619      	mov	r1, r3
    2fb2:	f001 f86f 	bl	4094 <xTaskCheckForTimeOut>
    2fb6:	4603      	mov	r3, r0
    2fb8:	2b00      	cmp	r3, #0
    2fba:	d12b      	bne.n	3014 <xQueueGenericReceive+0x154>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    2fbc:	68f8      	ldr	r0, [r7, #12]
    2fbe:	f000 f973 	bl	32a8 <prvIsQueueEmpty>
    2fc2:	4603      	mov	r3, r0
    2fc4:	2b00      	cmp	r3, #0
    2fc6:	d01f      	beq.n	3008 <xQueueGenericReceive+0x148>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    2fc8:	68fb      	ldr	r3, [r7, #12]
    2fca:	681b      	ldr	r3, [r3, #0]
    2fcc:	2b00      	cmp	r3, #0
    2fce:	d108      	bne.n	2fe2 <xQueueGenericReceive+0x122>
					{
						portENTER_CRITICAL();
    2fd0:	f001 fb3c 	bl	464c <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    2fd4:	68fb      	ldr	r3, [r7, #12]
    2fd6:	685b      	ldr	r3, [r3, #4]
    2fd8:	4618      	mov	r0, r3
    2fda:	f001 fa1b 	bl	4414 <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
    2fde:	f001 fb4b 	bl	4678 <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    2fe2:	68fb      	ldr	r3, [r7, #12]
    2fe4:	f103 0230 	add.w	r2, r3, #48	; 0x30
    2fe8:	687b      	ldr	r3, [r7, #4]
    2fea:	4610      	mov	r0, r2
    2fec:	4619      	mov	r1, r3
    2fee:	f000 ffab 	bl	3f48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    2ff2:	68f8      	ldr	r0, [r7, #12]
    2ff4:	f000 f90c 	bl	3210 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    2ff8:	f000 fd76 	bl	3ae8 <xTaskResumeAll>
    2ffc:	4603      	mov	r3, r0
    2ffe:	2b00      	cmp	r3, #0
    3000:	d10f      	bne.n	3022 <xQueueGenericReceive+0x162>
				{
					portYIELD_WITHIN_API();
    3002:	f001 fb15 	bl	4630 <vPortYieldFromISR>
    3006:	e00c      	b.n	3022 <xQueueGenericReceive+0x162>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    3008:	68f8      	ldr	r0, [r7, #12]
    300a:	f000 f901 	bl	3210 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    300e:	f000 fd6b 	bl	3ae8 <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
    3012:	e75e      	b.n	2ed2 <xQueueGenericReceive+0x12>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    3014:	68f8      	ldr	r0, [r7, #12]
    3016:	f000 f8fb 	bl	3210 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    301a:	f000 fd65 	bl	3ae8 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    301e:	2300      	movs	r3, #0
    3020:	e000      	b.n	3024 <xQueueGenericReceive+0x164>
		}
	}
    3022:	e756      	b.n	2ed2 <xQueueGenericReceive+0x12>
}
    3024:	4618      	mov	r0, r3
    3026:	3720      	adds	r7, #32
    3028:	46bd      	mov	sp, r7
    302a:	bd80      	pop	{r7, pc}

0000302c <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    302c:	b580      	push	{r7, lr}
    302e:	b086      	sub	sp, #24
    3030:	af00      	add	r7, sp, #0
    3032:	60f8      	str	r0, [r7, #12]
    3034:	60b9      	str	r1, [r7, #8]
    3036:	607a      	str	r2, [r7, #4]

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    3038:	2300      	movs	r3, #0
    303a:	613b      	str	r3, [r7, #16]
    303c:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    3040:	f380 8811 	msr	BASEPRI, r0
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    3044:	68fb      	ldr	r3, [r7, #12]
    3046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    3048:	2b00      	cmp	r3, #0
    304a:	d025      	beq.n	3098 <xQueueReceiveFromISR+0x6c>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    304c:	68f8      	ldr	r0, [r7, #12]
    304e:	68b9      	ldr	r1, [r7, #8]
    3050:	f000 f8b8 	bl	31c4 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    3054:	68fb      	ldr	r3, [r7, #12]
    3056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    3058:	1e5a      	subs	r2, r3, #1
    305a:	68fb      	ldr	r3, [r7, #12]
    305c:	651a      	str	r2, [r3, #80]	; 0x50

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    305e:	68fb      	ldr	r3, [r7, #12]
    3060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    3062:	f1b3 3fff 	cmp.w	r3, #4294967295
    3066:	d10f      	bne.n	3088 <xQueueReceiveFromISR+0x5c>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3068:	68fb      	ldr	r3, [r7, #12]
    306a:	691b      	ldr	r3, [r3, #16]
    306c:	2b00      	cmp	r3, #0
    306e:	d010      	beq.n	3092 <xQueueReceiveFromISR+0x66>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3070:	68fb      	ldr	r3, [r7, #12]
    3072:	3310      	adds	r3, #16
    3074:	4618      	mov	r0, r3
    3076:	f000 ff9f 	bl	3fb8 <xTaskRemoveFromEventList>
    307a:	4603      	mov	r3, r0
    307c:	2b00      	cmp	r3, #0
    307e:	d008      	beq.n	3092 <xQueueReceiveFromISR+0x66>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    3080:	687b      	ldr	r3, [r7, #4]
    3082:	2201      	movs	r2, #1
    3084:	601a      	str	r2, [r3, #0]
    3086:	e004      	b.n	3092 <xQueueReceiveFromISR+0x66>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    3088:	68fb      	ldr	r3, [r7, #12]
    308a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    308c:	1c5a      	adds	r2, r3, #1
    308e:	68fb      	ldr	r3, [r7, #12]
    3090:	65da      	str	r2, [r3, #92]	; 0x5c
			}

			xReturn = pdPASS;
    3092:	2301      	movs	r3, #1
    3094:	617b      	str	r3, [r7, #20]
    3096:	e001      	b.n	309c <xQueueReceiveFromISR+0x70>
		}
		else
		{
			xReturn = pdFAIL;
    3098:	2300      	movs	r3, #0
    309a:	617b      	str	r3, [r7, #20]
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    309c:	f04f 0000 	mov.w	r0, #0
    30a0:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    30a4:	697b      	ldr	r3, [r7, #20]
}
    30a6:	4618      	mov	r0, r3
    30a8:	3718      	adds	r7, #24
    30aa:	46bd      	mov	sp, r7
    30ac:	bd80      	pop	{r7, pc}
    30ae:	bf00      	nop

000030b0 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    30b0:	b580      	push	{r7, lr}
    30b2:	b084      	sub	sp, #16
    30b4:	af00      	add	r7, sp, #0
    30b6:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    30b8:	f001 fac8 	bl	464c <vPortEnterCritical>
		uxReturn = pxQueue->uxMessagesWaiting;
    30bc:	687b      	ldr	r3, [r7, #4]
    30be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    30c0:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    30c2:	f001 fad9 	bl	4678 <vPortExitCritical>

	return uxReturn;
    30c6:	68fb      	ldr	r3, [r7, #12]
}
    30c8:	4618      	mov	r0, r3
    30ca:	3710      	adds	r7, #16
    30cc:	46bd      	mov	sp, r7
    30ce:	bd80      	pop	{r7, pc}

000030d0 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    30d0:	b480      	push	{r7}
    30d2:	b085      	sub	sp, #20
    30d4:	af00      	add	r7, sp, #0
    30d6:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    30d8:	687b      	ldr	r3, [r7, #4]
    30da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    30dc:	60fb      	str	r3, [r7, #12]

	return uxReturn;
    30de:	68fb      	ldr	r3, [r7, #12]
}
    30e0:	4618      	mov	r0, r3
    30e2:	3714      	adds	r7, #20
    30e4:	46bd      	mov	sp, r7
    30e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    30ea:	4770      	bx	lr

000030ec <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    30ec:	b580      	push	{r7, lr}
    30ee:	b082      	sub	sp, #8
    30f0:	af00      	add	r7, sp, #0
    30f2:	6078      	str	r0, [r7, #4]
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    30f4:	687b      	ldr	r3, [r7, #4]
    30f6:	681b      	ldr	r3, [r3, #0]
    30f8:	4618      	mov	r0, r3
    30fa:	f001 fbe5 	bl	48c8 <vPortFree>
	vPortFree( pxQueue );
    30fe:	6878      	ldr	r0, [r7, #4]
    3100:	f001 fbe2 	bl	48c8 <vPortFree>
}
    3104:	3708      	adds	r7, #8
    3106:	46bd      	mov	sp, r7
    3108:	bd80      	pop	{r7, pc}
    310a:	bf00      	nop

0000310c <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    310c:	b580      	push	{r7, lr}
    310e:	b084      	sub	sp, #16
    3110:	af00      	add	r7, sp, #0
    3112:	60f8      	str	r0, [r7, #12]
    3114:	60b9      	str	r1, [r7, #8]
    3116:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    3118:	68fb      	ldr	r3, [r7, #12]
    311a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    311c:	2b00      	cmp	r3, #0
    311e:	d10c      	bne.n	313a <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    3120:	68fb      	ldr	r3, [r7, #12]
    3122:	681b      	ldr	r3, [r3, #0]
    3124:	2b00      	cmp	r3, #0
    3126:	d145      	bne.n	31b4 <prvCopyDataToQueue+0xa8>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    3128:	68fb      	ldr	r3, [r7, #12]
    312a:	685b      	ldr	r3, [r3, #4]
    312c:	4618      	mov	r0, r3
    312e:	f001 f9cf 	bl	44d0 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
    3132:	68fb      	ldr	r3, [r7, #12]
    3134:	2200      	movs	r2, #0
    3136:	605a      	str	r2, [r3, #4]
    3138:	e03c      	b.n	31b4 <prvCopyDataToQueue+0xa8>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    313a:	687b      	ldr	r3, [r7, #4]
    313c:	2b00      	cmp	r3, #0
    313e:	d11a      	bne.n	3176 <prvCopyDataToQueue+0x6a>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    3140:	68fb      	ldr	r3, [r7, #12]
    3142:	689a      	ldr	r2, [r3, #8]
    3144:	68fb      	ldr	r3, [r7, #12]
    3146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    3148:	4610      	mov	r0, r2
    314a:	68b9      	ldr	r1, [r7, #8]
    314c:	461a      	mov	r2, r3
    314e:	f010 fa7d 	bl	1364c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    3152:	68fb      	ldr	r3, [r7, #12]
    3154:	689a      	ldr	r2, [r3, #8]
    3156:	68fb      	ldr	r3, [r7, #12]
    3158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    315a:	441a      	add	r2, r3
    315c:	68fb      	ldr	r3, [r7, #12]
    315e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    3160:	68fb      	ldr	r3, [r7, #12]
    3162:	689a      	ldr	r2, [r3, #8]
    3164:	68fb      	ldr	r3, [r7, #12]
    3166:	685b      	ldr	r3, [r3, #4]
    3168:	429a      	cmp	r2, r3
    316a:	d323      	bcc.n	31b4 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    316c:	68fb      	ldr	r3, [r7, #12]
    316e:	681a      	ldr	r2, [r3, #0]
    3170:	68fb      	ldr	r3, [r7, #12]
    3172:	609a      	str	r2, [r3, #8]
    3174:	e01e      	b.n	31b4 <prvCopyDataToQueue+0xa8>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    3176:	68fb      	ldr	r3, [r7, #12]
    3178:	68da      	ldr	r2, [r3, #12]
    317a:	68fb      	ldr	r3, [r7, #12]
    317c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    317e:	4610      	mov	r0, r2
    3180:	68b9      	ldr	r1, [r7, #8]
    3182:	461a      	mov	r2, r3
    3184:	f010 fa62 	bl	1364c <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    3188:	68fb      	ldr	r3, [r7, #12]
    318a:	68da      	ldr	r2, [r3, #12]
    318c:	68fb      	ldr	r3, [r7, #12]
    318e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    3190:	425b      	negs	r3, r3
    3192:	441a      	add	r2, r3
    3194:	68fb      	ldr	r3, [r7, #12]
    3196:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    3198:	68fb      	ldr	r3, [r7, #12]
    319a:	68da      	ldr	r2, [r3, #12]
    319c:	68fb      	ldr	r3, [r7, #12]
    319e:	681b      	ldr	r3, [r3, #0]
    31a0:	429a      	cmp	r2, r3
    31a2:	d207      	bcs.n	31b4 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    31a4:	68fb      	ldr	r3, [r7, #12]
    31a6:	685a      	ldr	r2, [r3, #4]
    31a8:	68fb      	ldr	r3, [r7, #12]
    31aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    31ac:	425b      	negs	r3, r3
    31ae:	441a      	add	r2, r3
    31b0:	68fb      	ldr	r3, [r7, #12]
    31b2:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
    31b4:	68fb      	ldr	r3, [r7, #12]
    31b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    31b8:	1c5a      	adds	r2, r3, #1
    31ba:	68fb      	ldr	r3, [r7, #12]
    31bc:	651a      	str	r2, [r3, #80]	; 0x50
}
    31be:	3710      	adds	r7, #16
    31c0:	46bd      	mov	sp, r7
    31c2:	bd80      	pop	{r7, pc}

000031c4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    31c4:	b580      	push	{r7, lr}
    31c6:	b082      	sub	sp, #8
    31c8:	af00      	add	r7, sp, #0
    31ca:	6078      	str	r0, [r7, #4]
    31cc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    31ce:	687b      	ldr	r3, [r7, #4]
    31d0:	681b      	ldr	r3, [r3, #0]
    31d2:	2b00      	cmp	r3, #0
    31d4:	d019      	beq.n	320a <prvCopyDataFromQueue+0x46>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    31d6:	687b      	ldr	r3, [r7, #4]
    31d8:	68da      	ldr	r2, [r3, #12]
    31da:	687b      	ldr	r3, [r7, #4]
    31dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    31de:	441a      	add	r2, r3
    31e0:	687b      	ldr	r3, [r7, #4]
    31e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    31e4:	687b      	ldr	r3, [r7, #4]
    31e6:	68da      	ldr	r2, [r3, #12]
    31e8:	687b      	ldr	r3, [r7, #4]
    31ea:	685b      	ldr	r3, [r3, #4]
    31ec:	429a      	cmp	r2, r3
    31ee:	d303      	bcc.n	31f8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    31f0:	687b      	ldr	r3, [r7, #4]
    31f2:	681a      	ldr	r2, [r3, #0]
    31f4:	687b      	ldr	r3, [r7, #4]
    31f6:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    31f8:	687b      	ldr	r3, [r7, #4]
    31fa:	68da      	ldr	r2, [r3, #12]
    31fc:	687b      	ldr	r3, [r7, #4]
    31fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    3200:	6838      	ldr	r0, [r7, #0]
    3202:	4611      	mov	r1, r2
    3204:	461a      	mov	r2, r3
    3206:	f010 fa21 	bl	1364c <memcpy>
	}
}
    320a:	3708      	adds	r7, #8
    320c:	46bd      	mov	sp, r7
    320e:	bd80      	pop	{r7, pc}

00003210 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    3210:	b580      	push	{r7, lr}
    3212:	b082      	sub	sp, #8
    3214:	af00      	add	r7, sp, #0
    3216:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    3218:	f001 fa18 	bl	464c <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    321c:	e014      	b.n	3248 <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    321e:	687b      	ldr	r3, [r7, #4]
    3220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    3222:	2b00      	cmp	r3, #0
    3224:	d00f      	beq.n	3246 <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3226:	687b      	ldr	r3, [r7, #4]
    3228:	3330      	adds	r3, #48	; 0x30
    322a:	4618      	mov	r0, r3
    322c:	f000 fec4 	bl	3fb8 <xTaskRemoveFromEventList>
    3230:	4603      	mov	r3, r0
    3232:	2b00      	cmp	r3, #0
    3234:	d001      	beq.n	323a <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    3236:	f000 ff79 	bl	412c <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    323a:	687b      	ldr	r3, [r7, #4]
    323c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    323e:	1e5a      	subs	r2, r3, #1
    3240:	687b      	ldr	r3, [r7, #4]
    3242:	661a      	str	r2, [r3, #96]	; 0x60
    3244:	e000      	b.n	3248 <prvUnlockQueue+0x38>
			}
			else
			{
				break;
    3246:	e003      	b.n	3250 <prvUnlockQueue+0x40>
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    3248:	687b      	ldr	r3, [r7, #4]
    324a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    324c:	2b00      	cmp	r3, #0
    324e:	dce6      	bgt.n	321e <prvUnlockQueue+0xe>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    3250:	687b      	ldr	r3, [r7, #4]
    3252:	f04f 32ff 	mov.w	r2, #4294967295
    3256:	661a      	str	r2, [r3, #96]	; 0x60
	}
	taskEXIT_CRITICAL();
    3258:	f001 fa0e 	bl	4678 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    325c:	f001 f9f6 	bl	464c <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    3260:	e014      	b.n	328c <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3262:	687b      	ldr	r3, [r7, #4]
    3264:	691b      	ldr	r3, [r3, #16]
    3266:	2b00      	cmp	r3, #0
    3268:	d00f      	beq.n	328a <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    326a:	687b      	ldr	r3, [r7, #4]
    326c:	3310      	adds	r3, #16
    326e:	4618      	mov	r0, r3
    3270:	f000 fea2 	bl	3fb8 <xTaskRemoveFromEventList>
    3274:	4603      	mov	r3, r0
    3276:	2b00      	cmp	r3, #0
    3278:	d001      	beq.n	327e <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
    327a:	f000 ff57 	bl	412c <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    327e:	687b      	ldr	r3, [r7, #4]
    3280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    3282:	1e5a      	subs	r2, r3, #1
    3284:	687b      	ldr	r3, [r7, #4]
    3286:	65da      	str	r2, [r3, #92]	; 0x5c
    3288:	e000      	b.n	328c <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
    328a:	e003      	b.n	3294 <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    328c:	687b      	ldr	r3, [r7, #4]
    328e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    3290:	2b00      	cmp	r3, #0
    3292:	dce6      	bgt.n	3262 <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    3294:	687b      	ldr	r3, [r7, #4]
    3296:	f04f 32ff 	mov.w	r2, #4294967295
    329a:	65da      	str	r2, [r3, #92]	; 0x5c
	}
	taskEXIT_CRITICAL();
    329c:	f001 f9ec 	bl	4678 <vPortExitCritical>
}
    32a0:	3708      	adds	r7, #8
    32a2:	46bd      	mov	sp, r7
    32a4:	bd80      	pop	{r7, pc}
    32a6:	bf00      	nop

000032a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    32a8:	b580      	push	{r7, lr}
    32aa:	b084      	sub	sp, #16
    32ac:	af00      	add	r7, sp, #0
    32ae:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    32b0:	f001 f9cc 	bl	464c <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    32b4:	687b      	ldr	r3, [r7, #4]
    32b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    32b8:	2b00      	cmp	r3, #0
    32ba:	bf14      	ite	ne
    32bc:	2300      	movne	r3, #0
    32be:	2301      	moveq	r3, #1
    32c0:	b2db      	uxtb	r3, r3
    32c2:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    32c4:	f001 f9d8 	bl	4678 <vPortExitCritical>

	return xReturn;
    32c8:	68fb      	ldr	r3, [r7, #12]
}
    32ca:	4618      	mov	r0, r3
    32cc:	3710      	adds	r7, #16
    32ce:	46bd      	mov	sp, r7
    32d0:	bd80      	pop	{r7, pc}
    32d2:	bf00      	nop

000032d4 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    32d4:	b480      	push	{r7}
    32d6:	b085      	sub	sp, #20
    32d8:	af00      	add	r7, sp, #0
    32da:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    32dc:	687b      	ldr	r3, [r7, #4]
    32de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    32e0:	2b00      	cmp	r3, #0
    32e2:	bf14      	ite	ne
    32e4:	2300      	movne	r3, #0
    32e6:	2301      	moveq	r3, #1
    32e8:	b2db      	uxtb	r3, r3
    32ea:	60fb      	str	r3, [r7, #12]

	return xReturn;
    32ec:	68fb      	ldr	r3, [r7, #12]
}
    32ee:	4618      	mov	r0, r3
    32f0:	3714      	adds	r7, #20
    32f2:	46bd      	mov	sp, r7
    32f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    32f8:	4770      	bx	lr
    32fa:	bf00      	nop

000032fc <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    32fc:	b580      	push	{r7, lr}
    32fe:	b084      	sub	sp, #16
    3300:	af00      	add	r7, sp, #0
    3302:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    3304:	f001 f9a2 	bl	464c <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    3308:	687b      	ldr	r3, [r7, #4]
    330a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    330c:	687b      	ldr	r3, [r7, #4]
    330e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    3310:	429a      	cmp	r2, r3
    3312:	bf14      	ite	ne
    3314:	2300      	movne	r3, #0
    3316:	2301      	moveq	r3, #1
    3318:	b2db      	uxtb	r3, r3
    331a:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    331c:	f001 f9ac 	bl	4678 <vPortExitCritical>

	return xReturn;
    3320:	68fb      	ldr	r3, [r7, #12]
}
    3322:	4618      	mov	r0, r3
    3324:	3710      	adds	r7, #16
    3326:	46bd      	mov	sp, r7
    3328:	bd80      	pop	{r7, pc}
    332a:	bf00      	nop

0000332c <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    332c:	b480      	push	{r7}
    332e:	b085      	sub	sp, #20
    3330:	af00      	add	r7, sp, #0
    3332:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    3334:	687b      	ldr	r3, [r7, #4]
    3336:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    3338:	687b      	ldr	r3, [r7, #4]
    333a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    333c:	429a      	cmp	r2, r3
    333e:	bf14      	ite	ne
    3340:	2300      	movne	r3, #0
    3342:	2301      	moveq	r3, #1
    3344:	b2db      	uxtb	r3, r3
    3346:	60fb      	str	r3, [r7, #12]

	return xReturn;
    3348:	68fb      	ldr	r3, [r7, #12]
}
    334a:	4618      	mov	r0, r3
    334c:	3714      	adds	r7, #20
    334e:	46bd      	mov	sp, r7
    3350:	f85d 7b04 	ldr.w	r7, [sp], #4
    3354:	4770      	bx	lr
    3356:	bf00      	nop

00003358 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    3358:	b580      	push	{r7, lr}
    335a:	b08a      	sub	sp, #40	; 0x28
    335c:	af02      	add	r7, sp, #8
    335e:	60f8      	str	r0, [r7, #12]
    3360:	60b9      	str	r1, [r7, #8]
    3362:	603b      	str	r3, [r7, #0]
    3364:	4613      	mov	r3, r2
    3366:	80fb      	strh	r3, [r7, #6]
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    3368:	88fb      	ldrh	r3, [r7, #6]
    336a:	4618      	mov	r0, r3
    336c:	6b39      	ldr	r1, [r7, #48]	; 0x30
    336e:	f000 ffff 	bl	4370 <prvAllocateTCBAndStack>
    3372:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
    3374:	69bb      	ldr	r3, [r7, #24]
    3376:	2b00      	cmp	r3, #0
    3378:	f000 809e 	beq.w	34b8 <xTaskGenericCreate+0x160>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    337c:	69bb      	ldr	r3, [r7, #24]
    337e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    3380:	88fb      	ldrh	r3, [r7, #6]
    3382:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3386:	3b01      	subs	r3, #1
    3388:	009b      	lsls	r3, r3, #2
    338a:	4413      	add	r3, r2
    338c:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
    338e:	697b      	ldr	r3, [r7, #20]
    3390:	f023 0307 	bic.w	r3, r3, #7
    3394:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    3396:	88fb      	ldrh	r3, [r7, #6]
    3398:	9300      	str	r3, [sp, #0]
    339a:	69b8      	ldr	r0, [r7, #24]
    339c:	68b9      	ldr	r1, [r7, #8]
    339e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    33a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    33a2:	f000 fed9 	bl	4158 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    33a6:	6978      	ldr	r0, [r7, #20]
    33a8:	68f9      	ldr	r1, [r7, #12]
    33aa:	683a      	ldr	r2, [r7, #0]
    33ac:	f001 f8d0 	bl	4550 <pxPortInitialiseStack>
    33b0:	4602      	mov	r2, r0
    33b2:	69bb      	ldr	r3, [r7, #24]
    33b4:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    33b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    33b8:	2b00      	cmp	r3, #0
    33ba:	d002      	beq.n	33c2 <xTaskGenericCreate+0x6a>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    33bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    33be:	69ba      	ldr	r2, [r7, #24]
    33c0:	601a      	str	r2, [r3, #0]
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    33c2:	f001 f943 	bl	464c <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
    33c6:	f240 53c4 	movw	r3, #1476	; 0x5c4
    33ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33ce:	681b      	ldr	r3, [r3, #0]
    33d0:	1c5a      	adds	r2, r3, #1
    33d2:	f240 53c4 	movw	r3, #1476	; 0x5c4
    33d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33da:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
    33dc:	f240 2390 	movw	r3, #656	; 0x290
    33e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33e4:	681b      	ldr	r3, [r3, #0]
    33e6:	2b00      	cmp	r3, #0
    33e8:	d10f      	bne.n	340a <xTaskGenericCreate+0xb2>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    33ea:	f240 2390 	movw	r3, #656	; 0x290
    33ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33f2:	69ba      	ldr	r2, [r7, #24]
    33f4:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    33f6:	f240 53c4 	movw	r3, #1476	; 0x5c4
    33fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33fe:	681b      	ldr	r3, [r3, #0]
    3400:	2b01      	cmp	r3, #1
    3402:	d118      	bne.n	3436 <xTaskGenericCreate+0xde>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    3404:	f000 fede 	bl	41c4 <prvInitialiseTaskLists>
    3408:	e015      	b.n	3436 <xTaskGenericCreate+0xde>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    340a:	f240 53d4 	movw	r3, #1492	; 0x5d4
    340e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3412:	681b      	ldr	r3, [r3, #0]
    3414:	2b00      	cmp	r3, #0
    3416:	d10e      	bne.n	3436 <xTaskGenericCreate+0xde>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    3418:	f240 2390 	movw	r3, #656	; 0x290
    341c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3420:	681b      	ldr	r3, [r3, #0]
    3422:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    3424:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3426:	429a      	cmp	r2, r3
    3428:	d805      	bhi.n	3436 <xTaskGenericCreate+0xde>
					{
						pxCurrentTCB = pxNewTCB;
    342a:	f240 2390 	movw	r3, #656	; 0x290
    342e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3432:	69ba      	ldr	r2, [r7, #24]
    3434:	601a      	str	r2, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    3436:	69bb      	ldr	r3, [r7, #24]
    3438:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    343a:	f240 53cc 	movw	r3, #1484	; 0x5cc
    343e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3442:	681b      	ldr	r3, [r3, #0]
    3444:	429a      	cmp	r2, r3
    3446:	d906      	bls.n	3456 <xTaskGenericCreate+0xfe>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    3448:	69bb      	ldr	r3, [r7, #24]
    344a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    344c:	f240 53cc 	movw	r3, #1484	; 0x5cc
    3450:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3454:	601a      	str	r2, [r3, #0]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    3456:	f240 53e8 	movw	r3, #1512	; 0x5e8
    345a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    345e:	681b      	ldr	r3, [r3, #0]
    3460:	1c5a      	adds	r2, r3, #1
    3462:	f240 53e8 	movw	r3, #1512	; 0x5e8
    3466:	f2c2 0300 	movt	r3, #8192	; 0x2000
    346a:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
    346c:	69bb      	ldr	r3, [r7, #24]
    346e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    3470:	f240 53d0 	movw	r3, #1488	; 0x5d0
    3474:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3478:	681b      	ldr	r3, [r3, #0]
    347a:	429a      	cmp	r2, r3
    347c:	d906      	bls.n	348c <xTaskGenericCreate+0x134>
    347e:	69bb      	ldr	r3, [r7, #24]
    3480:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    3482:	f240 53d0 	movw	r3, #1488	; 0x5d0
    3486:	f2c2 0300 	movt	r3, #8192	; 0x2000
    348a:	601a      	str	r2, [r3, #0]
    348c:	69bb      	ldr	r3, [r7, #24]
    348e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3490:	015a      	lsls	r2, r3, #5
    3492:	f240 2394 	movw	r3, #660	; 0x294
    3496:	f2c2 0300 	movt	r3, #8192	; 0x2000
    349a:	441a      	add	r2, r3
    349c:	69bb      	ldr	r3, [r7, #24]
    349e:	3304      	adds	r3, #4
    34a0:	4610      	mov	r0, r2
    34a2:	4619      	mov	r1, r3
    34a4:	f7ff fa4c 	bl	2940 <vListInsertEnd>

			xReturn = pdPASS;
    34a8:	2301      	movs	r3, #1
    34aa:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
    34ac:	69b8      	ldr	r0, [r7, #24]
    34ae:	f00f f8d1 	bl	12654 <myTraceCreate>
		}
		taskEXIT_CRITICAL();
    34b2:	f001 f8e1 	bl	4678 <vPortExitCritical>
    34b6:	e002      	b.n	34be <xTaskGenericCreate+0x166>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    34b8:	f04f 33ff 	mov.w	r3, #4294967295
    34bc:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    34be:	69fb      	ldr	r3, [r7, #28]
    34c0:	2b01      	cmp	r3, #1
    34c2:	d111      	bne.n	34e8 <xTaskGenericCreate+0x190>
	{
		if( xSchedulerRunning != pdFALSE )
    34c4:	f240 53d4 	movw	r3, #1492	; 0x5d4
    34c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    34cc:	681b      	ldr	r3, [r3, #0]
    34ce:	2b00      	cmp	r3, #0
    34d0:	d00a      	beq.n	34e8 <xTaskGenericCreate+0x190>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    34d2:	f240 2390 	movw	r3, #656	; 0x290
    34d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    34da:	681b      	ldr	r3, [r3, #0]
    34dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    34de:	6abb      	ldr	r3, [r7, #40]	; 0x28
    34e0:	429a      	cmp	r2, r3
    34e2:	d201      	bcs.n	34e8 <xTaskGenericCreate+0x190>
			{
				portYIELD_WITHIN_API();
    34e4:	f001 f8a4 	bl	4630 <vPortYieldFromISR>
			}
		}
	}

	return xReturn;
    34e8:	69fb      	ldr	r3, [r7, #28]
}
    34ea:	4618      	mov	r0, r3
    34ec:	3720      	adds	r7, #32
    34ee:	46bd      	mov	sp, r7
    34f0:	bd80      	pop	{r7, pc}
    34f2:	bf00      	nop

000034f4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    34f4:	b580      	push	{r7, lr}
    34f6:	b084      	sub	sp, #16
    34f8:	af00      	add	r7, sp, #0
    34fa:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    34fc:	f001 f8a6 	bl	464c <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    3500:	f240 2390 	movw	r3, #656	; 0x290
    3504:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3508:	681b      	ldr	r3, [r3, #0]
    350a:	687a      	ldr	r2, [r7, #4]
    350c:	429a      	cmp	r2, r3
    350e:	d101      	bne.n	3514 <vTaskDelete+0x20>
			{
				pxTaskToDelete = NULL;
    3510:	2300      	movs	r3, #0
    3512:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    3514:	687b      	ldr	r3, [r7, #4]
    3516:	2b00      	cmp	r3, #0
    3518:	d105      	bne.n	3526 <vTaskDelete+0x32>
    351a:	f240 2390 	movw	r3, #656	; 0x290
    351e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3522:	681b      	ldr	r3, [r3, #0]
    3524:	e000      	b.n	3528 <vTaskDelete+0x34>
    3526:	687b      	ldr	r3, [r7, #4]
    3528:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    352a:	68fb      	ldr	r3, [r7, #12]
    352c:	3304      	adds	r3, #4
    352e:	4618      	mov	r0, r3
    3530:	f7ff fa66 	bl	2a00 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    3534:	68fb      	ldr	r3, [r7, #12]
    3536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3538:	2b00      	cmp	r3, #0
    353a:	d004      	beq.n	3546 <vTaskDelete+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    353c:	68fb      	ldr	r3, [r7, #12]
    353e:	3324      	adds	r3, #36	; 0x24
    3540:	4618      	mov	r0, r3
    3542:	f7ff fa5d 	bl	2a00 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    3546:	68fb      	ldr	r3, [r7, #12]
    3548:	3304      	adds	r3, #4
    354a:	f240 507c 	movw	r0, #1404	; 0x57c
    354e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3552:	4619      	mov	r1, r3
    3554:	f7ff f9f4 	bl	2940 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    3558:	f240 539c 	movw	r3, #1436	; 0x59c
    355c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3560:	681b      	ldr	r3, [r3, #0]
    3562:	1c5a      	adds	r2, r3, #1
    3564:	f240 539c 	movw	r3, #1436	; 0x59c
    3568:	f2c2 0300 	movt	r3, #8192	; 0x2000
    356c:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    356e:	f240 53e8 	movw	r3, #1512	; 0x5e8
    3572:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3576:	681b      	ldr	r3, [r3, #0]
    3578:	1c5a      	adds	r2, r3, #1
    357a:	f240 53e8 	movw	r3, #1512	; 0x5e8
    357e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3582:	601a      	str	r2, [r3, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    3584:	f001 f878 	bl	4678 <vPortExitCritical>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    3588:	f240 53d4 	movw	r3, #1492	; 0x5d4
    358c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3590:	681b      	ldr	r3, [r3, #0]
    3592:	2b00      	cmp	r3, #0
    3594:	d004      	beq.n	35a0 <vTaskDelete+0xac>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    3596:	687b      	ldr	r3, [r7, #4]
    3598:	2b00      	cmp	r3, #0
    359a:	d101      	bne.n	35a0 <vTaskDelete+0xac>
			{
				portYIELD_WITHIN_API();
    359c:	f001 f848 	bl	4630 <vPortYieldFromISR>
			}
		}
	}
    35a0:	3710      	adds	r7, #16
    35a2:	46bd      	mov	sp, r7
    35a4:	bd80      	pop	{r7, pc}
    35a6:	bf00      	nop

000035a8 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    35a8:	b580      	push	{r7, lr}
    35aa:	b086      	sub	sp, #24
    35ac:	af00      	add	r7, sp, #0
    35ae:	6078      	str	r0, [r7, #4]
    35b0:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
    35b2:	2300      	movs	r3, #0
    35b4:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    35b6:	f000 fa85 	bl	3ac4 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    35ba:	687b      	ldr	r3, [r7, #4]
    35bc:	681a      	ldr	r2, [r3, #0]
    35be:	683b      	ldr	r3, [r7, #0]
    35c0:	4413      	add	r3, r2
    35c2:	613b      	str	r3, [r7, #16]

			if( xTickCount < *pxPreviousWakeTime )
    35c4:	687b      	ldr	r3, [r7, #4]
    35c6:	681a      	ldr	r2, [r3, #0]
    35c8:	f240 53c8 	movw	r3, #1480	; 0x5c8
    35cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    35d0:	681b      	ldr	r3, [r3, #0]
    35d2:	429a      	cmp	r2, r3
    35d4:	d90f      	bls.n	35f6 <vTaskDelayUntil+0x4e>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    35d6:	687b      	ldr	r3, [r7, #4]
    35d8:	681a      	ldr	r2, [r3, #0]
    35da:	693b      	ldr	r3, [r7, #16]
    35dc:	429a      	cmp	r2, r3
    35de:	d919      	bls.n	3614 <vTaskDelayUntil+0x6c>
    35e0:	f240 53c8 	movw	r3, #1480	; 0x5c8
    35e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    35e8:	681b      	ldr	r3, [r3, #0]
    35ea:	693a      	ldr	r2, [r7, #16]
    35ec:	429a      	cmp	r2, r3
    35ee:	d911      	bls.n	3614 <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    35f0:	2301      	movs	r3, #1
    35f2:	617b      	str	r3, [r7, #20]
    35f4:	e00e      	b.n	3614 <vTaskDelayUntil+0x6c>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    35f6:	687b      	ldr	r3, [r7, #4]
    35f8:	681a      	ldr	r2, [r3, #0]
    35fa:	693b      	ldr	r3, [r7, #16]
    35fc:	429a      	cmp	r2, r3
    35fe:	d807      	bhi.n	3610 <vTaskDelayUntil+0x68>
    3600:	f240 53c8 	movw	r3, #1480	; 0x5c8
    3604:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3608:	681b      	ldr	r3, [r3, #0]
    360a:	693a      	ldr	r2, [r7, #16]
    360c:	429a      	cmp	r2, r3
    360e:	d901      	bls.n	3614 <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    3610:	2301      	movs	r3, #1
    3612:	617b      	str	r3, [r7, #20]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    3614:	687b      	ldr	r3, [r7, #4]
    3616:	693a      	ldr	r2, [r7, #16]
    3618:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
    361a:	697b      	ldr	r3, [r7, #20]
    361c:	2b00      	cmp	r3, #0
    361e:	d00b      	beq.n	3638 <vTaskDelayUntil+0x90>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3620:	f240 2390 	movw	r3, #656	; 0x290
    3624:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3628:	681b      	ldr	r3, [r3, #0]
    362a:	3304      	adds	r3, #4
    362c:	4618      	mov	r0, r3
    362e:	f7ff f9e7 	bl	2a00 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    3632:	6938      	ldr	r0, [r7, #16]
    3634:	f000 fe58 	bl	42e8 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    3638:	f000 fa56 	bl	3ae8 <xTaskResumeAll>
    363c:	60f8      	str	r0, [r7, #12]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    363e:	68fb      	ldr	r3, [r7, #12]
    3640:	2b00      	cmp	r3, #0
    3642:	d101      	bne.n	3648 <vTaskDelayUntil+0xa0>
		{
			portYIELD_WITHIN_API();
    3644:	f000 fff4 	bl	4630 <vPortYieldFromISR>
		}
	}
    3648:	3718      	adds	r7, #24
    364a:	46bd      	mov	sp, r7
    364c:	bd80      	pop	{r7, pc}
    364e:	bf00      	nop

00003650 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    3650:	b580      	push	{r7, lr}
    3652:	b084      	sub	sp, #16
    3654:	af00      	add	r7, sp, #0
    3656:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    3658:	2300      	movs	r3, #0
    365a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    365c:	687b      	ldr	r3, [r7, #4]
    365e:	2b00      	cmp	r3, #0
    3660:	d018      	beq.n	3694 <vTaskDelay+0x44>
		{
			vTaskSuspendAll();
    3662:	f000 fa2f 	bl	3ac4 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    3666:	f240 53c8 	movw	r3, #1480	; 0x5c8
    366a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    366e:	681a      	ldr	r2, [r3, #0]
    3670:	687b      	ldr	r3, [r7, #4]
    3672:	4413      	add	r3, r2
    3674:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3676:	f240 2390 	movw	r3, #656	; 0x290
    367a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    367e:	681b      	ldr	r3, [r3, #0]
    3680:	3304      	adds	r3, #4
    3682:	4618      	mov	r0, r3
    3684:	f7ff f9bc 	bl	2a00 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    3688:	68b8      	ldr	r0, [r7, #8]
    368a:	f000 fe2d 	bl	42e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    368e:	f000 fa2b 	bl	3ae8 <xTaskResumeAll>
    3692:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    3694:	68fb      	ldr	r3, [r7, #12]
    3696:	2b00      	cmp	r3, #0
    3698:	d101      	bne.n	369e <vTaskDelay+0x4e>
		{
			portYIELD_WITHIN_API();
    369a:	f000 ffc9 	bl	4630 <vPortYieldFromISR>
		}
	}
    369e:	3710      	adds	r7, #16
    36a0:	46bd      	mov	sp, r7
    36a2:	bd80      	pop	{r7, pc}

000036a4 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
	{
    36a4:	b580      	push	{r7, lr}
    36a6:	b084      	sub	sp, #16
    36a8:	af00      	add	r7, sp, #0
    36aa:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxReturn;

		taskENTER_CRITICAL();
    36ac:	f000 ffce 	bl	464c <vPortEnterCritical>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    36b0:	687b      	ldr	r3, [r7, #4]
    36b2:	2b00      	cmp	r3, #0
    36b4:	d105      	bne.n	36c2 <uxTaskPriorityGet+0x1e>
    36b6:	f240 2390 	movw	r3, #656	; 0x290
    36ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    36be:	681b      	ldr	r3, [r3, #0]
    36c0:	e000      	b.n	36c4 <uxTaskPriorityGet+0x20>
    36c2:	687b      	ldr	r3, [r7, #4]
    36c4:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
    36c6:	68fb      	ldr	r3, [r7, #12]
    36c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    36ca:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
    36cc:	f000 ffd4 	bl	4678 <vPortExitCritical>

		return uxReturn;
    36d0:	68bb      	ldr	r3, [r7, #8]
	}
    36d2:	4618      	mov	r0, r3
    36d4:	3710      	adds	r7, #16
    36d6:	46bd      	mov	sp, r7
    36d8:	bd80      	pop	{r7, pc}
    36da:	bf00      	nop

000036dc <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
	{
    36dc:	b580      	push	{r7, lr}
    36de:	b086      	sub	sp, #24
    36e0:	af00      	add	r7, sp, #0
    36e2:	6078      	str	r0, [r7, #4]
    36e4:	6039      	str	r1, [r7, #0]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxCurrentPriority;
	portBASE_TYPE xYieldRequired = pdFALSE;
    36e6:	2300      	movs	r3, #0
    36e8:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= configMAX_PRIORITIES )
    36ea:	683b      	ldr	r3, [r7, #0]
    36ec:	2b13      	cmp	r3, #19
    36ee:	d901      	bls.n	36f4 <vTaskPrioritySet+0x18>
		{
			uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    36f0:	2313      	movs	r3, #19
    36f2:	603b      	str	r3, [r7, #0]
		}

		taskENTER_CRITICAL();
    36f4:	f000 ffaa 	bl	464c <vPortEnterCritical>
		{
			if( pxTask == pxCurrentTCB )
    36f8:	f240 2390 	movw	r3, #656	; 0x290
    36fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3700:	681b      	ldr	r3, [r3, #0]
    3702:	687a      	ldr	r2, [r7, #4]
    3704:	429a      	cmp	r2, r3
    3706:	d101      	bne.n	370c <vTaskPrioritySet+0x30>
			{
				pxTask = NULL;
    3708:	2300      	movs	r3, #0
    370a:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    370c:	687b      	ldr	r3, [r7, #4]
    370e:	2b00      	cmp	r3, #0
    3710:	d105      	bne.n	371e <vTaskPrioritySet+0x42>
    3712:	f240 2390 	movw	r3, #656	; 0x290
    3716:	f2c2 0300 	movt	r3, #8192	; 0x2000
    371a:	681b      	ldr	r3, [r3, #0]
    371c:	e000      	b.n	3720 <vTaskPrioritySet+0x44>
    371e:	687b      	ldr	r3, [r7, #4]
    3720:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentPriority = pxTCB->uxBasePriority;
    3722:	693b      	ldr	r3, [r7, #16]
    3724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    3726:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentPriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentPriority != uxNewPriority )
    3728:	68fa      	ldr	r2, [r7, #12]
    372a:	683b      	ldr	r3, [r7, #0]
    372c:	429a      	cmp	r2, r3
    372e:	d052      	beq.n	37d6 <vTaskPrioritySet+0xfa>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentPriority )
    3730:	683a      	ldr	r2, [r7, #0]
    3732:	68fb      	ldr	r3, [r7, #12]
    3734:	429a      	cmp	r2, r3
    3736:	d905      	bls.n	3744 <vTaskPrioritySet+0x68>
				{
					if( pxTask != NULL )
    3738:	687b      	ldr	r3, [r7, #4]
    373a:	2b00      	cmp	r3, #0
    373c:	d007      	beq.n	374e <vTaskPrioritySet+0x72>
					{
						/* The priority of another task is being raised.  If we
						were raising the priority of the currently running task
						there would be no need to switch as it must have already
						been the highest priority task. */
						xYieldRequired = pdTRUE;
    373e:	2301      	movs	r3, #1
    3740:	617b      	str	r3, [r7, #20]
    3742:	e004      	b.n	374e <vTaskPrioritySet+0x72>
					}
				}
				else if( pxTask == NULL )
    3744:	687b      	ldr	r3, [r7, #4]
    3746:	2b00      	cmp	r3, #0
    3748:	d101      	bne.n	374e <vTaskPrioritySet+0x72>
				{
					/* Setting our own priority down means there may now be another
					task of higher priority that is ready to execute. */
					xYieldRequired = pdTRUE;
    374a:	2301      	movs	r3, #1
    374c:	617b      	str	r3, [r7, #20]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    374e:	693b      	ldr	r3, [r7, #16]
    3750:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    3752:	693b      	ldr	r3, [r7, #16]
    3754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3756:	429a      	cmp	r2, r3
    3758:	d102      	bne.n	3760 <vTaskPrioritySet+0x84>
					{
						pxTCB->uxPriority = uxNewPriority;
    375a:	693b      	ldr	r3, [r7, #16]
    375c:	683a      	ldr	r2, [r7, #0]
    375e:	645a      	str	r2, [r3, #68]	; 0x44
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
    3760:	693b      	ldr	r3, [r7, #16]
    3762:	683a      	ldr	r2, [r7, #0]
    3764:	65da      	str	r2, [r3, #92]	; 0x5c
				{
					pxTCB->uxPriority = uxNewPriority;
				}
				#endif

				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
    3766:	683b      	ldr	r3, [r7, #0]
    3768:	f1c3 0214 	rsb	r2, r3, #20
    376c:	693b      	ldr	r3, [r7, #16]
    376e:	625a      	str	r2, [r3, #36]	; 0x24

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the queue appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
    3770:	693b      	ldr	r3, [r7, #16]
    3772:	6a1a      	ldr	r2, [r3, #32]
    3774:	68fb      	ldr	r3, [r7, #12]
    3776:	0159      	lsls	r1, r3, #5
    3778:	f240 2394 	movw	r3, #660	; 0x294
    377c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3780:	440b      	add	r3, r1
    3782:	429a      	cmp	r2, r3
    3784:	d122      	bne.n	37cc <vTaskPrioritySet+0xf0>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					vListRemove( &( pxTCB->xGenericListItem ) );
    3786:	693b      	ldr	r3, [r7, #16]
    3788:	3304      	adds	r3, #4
    378a:	4618      	mov	r0, r3
    378c:	f7ff f938 	bl	2a00 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    3790:	693b      	ldr	r3, [r7, #16]
    3792:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    3794:	f240 53d0 	movw	r3, #1488	; 0x5d0
    3798:	f2c2 0300 	movt	r3, #8192	; 0x2000
    379c:	681b      	ldr	r3, [r3, #0]
    379e:	429a      	cmp	r2, r3
    37a0:	d906      	bls.n	37b0 <vTaskPrioritySet+0xd4>
    37a2:	693b      	ldr	r3, [r7, #16]
    37a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    37a6:	f240 53d0 	movw	r3, #1488	; 0x5d0
    37aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    37ae:	601a      	str	r2, [r3, #0]
    37b0:	693b      	ldr	r3, [r7, #16]
    37b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    37b4:	015a      	lsls	r2, r3, #5
    37b6:	f240 2394 	movw	r3, #660	; 0x294
    37ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    37be:	441a      	add	r2, r3
    37c0:	693b      	ldr	r3, [r7, #16]
    37c2:	3304      	adds	r3, #4
    37c4:	4610      	mov	r0, r2
    37c6:	4619      	mov	r1, r3
    37c8:	f7ff f8ba 	bl	2940 <vListInsertEnd>
				}

				if( xYieldRequired == pdTRUE )
    37cc:	697b      	ldr	r3, [r7, #20]
    37ce:	2b01      	cmp	r3, #1
    37d0:	d101      	bne.n	37d6 <vTaskPrioritySet+0xfa>
				{
					portYIELD_WITHIN_API();
    37d2:	f000 ff2d 	bl	4630 <vPortYieldFromISR>
				}
			}
		}
		taskEXIT_CRITICAL();
    37d6:	f000 ff4f 	bl	4678 <vPortExitCritical>
	}
    37da:	3718      	adds	r7, #24
    37dc:	46bd      	mov	sp, r7
    37de:	bd80      	pop	{r7, pc}

000037e0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
    37e0:	b580      	push	{r7, lr}
    37e2:	b084      	sub	sp, #16
    37e4:	af00      	add	r7, sp, #0
    37e6:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    37e8:	f000 ff30 	bl	464c <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
    37ec:	f240 2390 	movw	r3, #656	; 0x290
    37f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    37f4:	681b      	ldr	r3, [r3, #0]
    37f6:	687a      	ldr	r2, [r7, #4]
    37f8:	429a      	cmp	r2, r3
    37fa:	d101      	bne.n	3800 <vTaskSuspend+0x20>
			{
				pxTaskToSuspend = NULL;
    37fc:	2300      	movs	r3, #0
    37fe:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
    3800:	687b      	ldr	r3, [r7, #4]
    3802:	2b00      	cmp	r3, #0
    3804:	d105      	bne.n	3812 <vTaskSuspend+0x32>
    3806:	f240 2390 	movw	r3, #656	; 0x290
    380a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    380e:	681b      	ldr	r3, [r3, #0]
    3810:	e000      	b.n	3814 <vTaskSuspend+0x34>
    3812:	687b      	ldr	r3, [r7, #4]
    3814:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    3816:	68fb      	ldr	r3, [r7, #12]
    3818:	3304      	adds	r3, #4
    381a:	4618      	mov	r0, r3
    381c:	f7ff f8f0 	bl	2a00 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    3820:	68fb      	ldr	r3, [r7, #12]
    3822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3824:	2b00      	cmp	r3, #0
    3826:	d004      	beq.n	3832 <vTaskSuspend+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    3828:	68fb      	ldr	r3, [r7, #12]
    382a:	3324      	adds	r3, #36	; 0x24
    382c:	4618      	mov	r0, r3
    382e:	f7ff f8e7 	bl	2a00 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
    3832:	68fb      	ldr	r3, [r7, #12]
    3834:	3304      	adds	r3, #4
    3836:	f240 50a0 	movw	r0, #1440	; 0x5a0
    383a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    383e:	4619      	mov	r1, r3
    3840:	f7ff f87e 	bl	2940 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    3844:	f000 ff18 	bl	4678 <vPortExitCritical>

		if( ( void * ) pxTaskToSuspend == NULL )
    3848:	687b      	ldr	r3, [r7, #4]
    384a:	2b00      	cmp	r3, #0
    384c:	d11e      	bne.n	388c <vTaskSuspend+0xac>
		{
			if( xSchedulerRunning != pdFALSE )
    384e:	f240 53d4 	movw	r3, #1492	; 0x5d4
    3852:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3856:	681b      	ldr	r3, [r3, #0]
    3858:	2b00      	cmp	r3, #0
    385a:	d002      	beq.n	3862 <vTaskSuspend+0x82>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
    385c:	f000 fee8 	bl	4630 <vPortYieldFromISR>
    3860:	e014      	b.n	388c <vTaskSuspend+0xac>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    3862:	f240 53a0 	movw	r3, #1440	; 0x5a0
    3866:	f2c2 0300 	movt	r3, #8192	; 0x2000
    386a:	681a      	ldr	r2, [r3, #0]
    386c:	f240 53c4 	movw	r3, #1476	; 0x5c4
    3870:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3874:	681b      	ldr	r3, [r3, #0]
    3876:	429a      	cmp	r2, r3
    3878:	d106      	bne.n	3888 <vTaskSuspend+0xa8>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    387a:	f240 2390 	movw	r3, #656	; 0x290
    387e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3882:	2200      	movs	r2, #0
    3884:	601a      	str	r2, [r3, #0]
    3886:	e001      	b.n	388c <vTaskSuspend+0xac>
				}
				else
				{
					vTaskSwitchContext();
    3888:	f000 fb08 	bl	3e9c <vTaskSwitchContext>
				}
			}
		}
	}
    388c:	3710      	adds	r7, #16
    388e:	46bd      	mov	sp, r7
    3890:	bd80      	pop	{r7, pc}
    3892:	bf00      	nop

00003894 <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
    3894:	b480      	push	{r7}
    3896:	b085      	sub	sp, #20
    3898:	af00      	add	r7, sp, #0
    389a:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xReturn = pdFALSE;
    389c:	2300      	movs	r3, #0
    389e:	60fb      	str	r3, [r7, #12]
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
    38a0:	687b      	ldr	r3, [r7, #4]
    38a2:	60bb      	str	r3, [r7, #8]
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    38a4:	68bb      	ldr	r3, [r7, #8]
    38a6:	6a1a      	ldr	r2, [r3, #32]
    38a8:	f240 53a0 	movw	r3, #1440	; 0x5a0
    38ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    38b0:	429a      	cmp	r2, r3
    38b2:	d10d      	bne.n	38d0 <xTaskIsTaskSuspended+0x3c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    38b4:	68bb      	ldr	r3, [r7, #8]
    38b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    38b8:	f240 535c 	movw	r3, #1372	; 0x55c
    38bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    38c0:	429a      	cmp	r2, r3
    38c2:	d005      	beq.n	38d0 <xTaskIsTaskSuspended+0x3c>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
    38c4:	68bb      	ldr	r3, [r7, #8]
    38c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    38c8:	2b00      	cmp	r3, #0
    38ca:	d101      	bne.n	38d0 <xTaskIsTaskSuspended+0x3c>
				{
					xReturn = pdTRUE;
    38cc:	2301      	movs	r3, #1
    38ce:	60fb      	str	r3, [r7, #12]
				}
			}
		}

		return xReturn;
    38d0:	68fb      	ldr	r3, [r7, #12]
	}
    38d2:	4618      	mov	r0, r3
    38d4:	3714      	adds	r7, #20
    38d6:	46bd      	mov	sp, r7
    38d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    38dc:	4770      	bx	lr
    38de:	bf00      	nop

000038e0 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
    38e0:	b580      	push	{r7, lr}
    38e2:	b084      	sub	sp, #16
    38e4:	af00      	add	r7, sp, #0
    38e6:	6078      	str	r0, [r7, #4]
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
    38e8:	687b      	ldr	r3, [r7, #4]
    38ea:	60fb      	str	r3, [r7, #12]

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    38ec:	68fb      	ldr	r3, [r7, #12]
    38ee:	2b00      	cmp	r3, #0
    38f0:	d040      	beq.n	3974 <vTaskResume+0x94>
    38f2:	f240 2390 	movw	r3, #656	; 0x290
    38f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    38fa:	681b      	ldr	r3, [r3, #0]
    38fc:	68fa      	ldr	r2, [r7, #12]
    38fe:	429a      	cmp	r2, r3
    3900:	d038      	beq.n	3974 <vTaskResume+0x94>
		{
			taskENTER_CRITICAL();
    3902:	f000 fea3 	bl	464c <vPortEnterCritical>
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    3906:	68f8      	ldr	r0, [r7, #12]
    3908:	f7ff ffc4 	bl	3894 <xTaskIsTaskSuspended>
    390c:	4603      	mov	r3, r0
    390e:	2b01      	cmp	r3, #1
    3910:	d12e      	bne.n	3970 <vTaskResume+0x90>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
    3912:	68fb      	ldr	r3, [r7, #12]
    3914:	3304      	adds	r3, #4
    3916:	4618      	mov	r0, r3
    3918:	f7ff f872 	bl	2a00 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    391c:	68fb      	ldr	r3, [r7, #12]
    391e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    3920:	f240 53d0 	movw	r3, #1488	; 0x5d0
    3924:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3928:	681b      	ldr	r3, [r3, #0]
    392a:	429a      	cmp	r2, r3
    392c:	d906      	bls.n	393c <vTaskResume+0x5c>
    392e:	68fb      	ldr	r3, [r7, #12]
    3930:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    3932:	f240 53d0 	movw	r3, #1488	; 0x5d0
    3936:	f2c2 0300 	movt	r3, #8192	; 0x2000
    393a:	601a      	str	r2, [r3, #0]
    393c:	68fb      	ldr	r3, [r7, #12]
    393e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3940:	015a      	lsls	r2, r3, #5
    3942:	f240 2394 	movw	r3, #660	; 0x294
    3946:	f2c2 0300 	movt	r3, #8192	; 0x2000
    394a:	441a      	add	r2, r3
    394c:	68fb      	ldr	r3, [r7, #12]
    394e:	3304      	adds	r3, #4
    3950:	4610      	mov	r0, r2
    3952:	4619      	mov	r1, r3
    3954:	f7fe fff4 	bl	2940 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3958:	68fb      	ldr	r3, [r7, #12]
    395a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    395c:	f240 2390 	movw	r3, #656	; 0x290
    3960:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3964:	681b      	ldr	r3, [r3, #0]
    3966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3968:	429a      	cmp	r2, r3
    396a:	d301      	bcc.n	3970 <vTaskResume+0x90>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
    396c:	f000 fe60 	bl	4630 <vPortYieldFromISR>
					}
				}
			}
			taskEXIT_CRITICAL();
    3970:	f000 fe82 	bl	4678 <vPortExitCritical>
		}
	}
    3974:	3710      	adds	r7, #16
    3976:	46bd      	mov	sp, r7
    3978:	bd80      	pop	{r7, pc}
    397a:	bf00      	nop

0000397c <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
    397c:	b580      	push	{r7, lr}
    397e:	b086      	sub	sp, #24
    3980:	af00      	add	r7, sp, #0
    3982:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xYieldRequired = pdFALSE;
    3984:	2300      	movs	r3, #0
    3986:	617b      	str	r3, [r7, #20]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxSavedInterruptStatus;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
    3988:	687b      	ldr	r3, [r7, #4]
    398a:	613b      	str	r3, [r7, #16]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    398c:	2300      	movs	r3, #0
    398e:	60fb      	str	r3, [r7, #12]
    3990:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    3994:	f380 8811 	msr	BASEPRI, r0
		{
			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    3998:	6938      	ldr	r0, [r7, #16]
    399a:	f7ff ff7b 	bl	3894 <xTaskIsTaskSuspended>
    399e:	4603      	mov	r3, r0
    39a0:	2b01      	cmp	r3, #1
    39a2:	d141      	bne.n	3a28 <xTaskResumeFromISR+0xac>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    39a4:	f240 53d8 	movw	r3, #1496	; 0x5d8
    39a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    39ac:	681b      	ldr	r3, [r3, #0]
    39ae:	2b00      	cmp	r3, #0
    39b0:	d131      	bne.n	3a16 <xTaskResumeFromISR+0x9a>
				{
					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
    39b2:	693b      	ldr	r3, [r7, #16]
    39b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    39b6:	f240 2390 	movw	r3, #656	; 0x290
    39ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    39be:	681b      	ldr	r3, [r3, #0]
    39c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    39c2:	429a      	cmp	r2, r3
    39c4:	bf34      	ite	cc
    39c6:	2300      	movcc	r3, #0
    39c8:	2301      	movcs	r3, #1
    39ca:	b2db      	uxtb	r3, r3
    39cc:	617b      	str	r3, [r7, #20]
					vListRemove(  &( pxTCB->xGenericListItem ) );
    39ce:	693b      	ldr	r3, [r7, #16]
    39d0:	3304      	adds	r3, #4
    39d2:	4618      	mov	r0, r3
    39d4:	f7ff f814 	bl	2a00 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    39d8:	693b      	ldr	r3, [r7, #16]
    39da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    39dc:	f240 53d0 	movw	r3, #1488	; 0x5d0
    39e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    39e4:	681b      	ldr	r3, [r3, #0]
    39e6:	429a      	cmp	r2, r3
    39e8:	d906      	bls.n	39f8 <xTaskResumeFromISR+0x7c>
    39ea:	693b      	ldr	r3, [r7, #16]
    39ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    39ee:	f240 53d0 	movw	r3, #1488	; 0x5d0
    39f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    39f6:	601a      	str	r2, [r3, #0]
    39f8:	693b      	ldr	r3, [r7, #16]
    39fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    39fc:	015a      	lsls	r2, r3, #5
    39fe:	f240 2394 	movw	r3, #660	; 0x294
    3a02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a06:	441a      	add	r2, r3
    3a08:	693b      	ldr	r3, [r7, #16]
    3a0a:	3304      	adds	r3, #4
    3a0c:	4610      	mov	r0, r2
    3a0e:	4619      	mov	r1, r3
    3a10:	f7fe ff96 	bl	2940 <vListInsertEnd>
    3a14:	e008      	b.n	3a28 <xTaskResumeFromISR+0xac>
				else
				{
					/* We cannot access the delayed or ready lists, so will hold this
					task pending until the scheduler is resumed, at which point a
					yield will be performed if necessary. */
					vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    3a16:	693b      	ldr	r3, [r7, #16]
    3a18:	3324      	adds	r3, #36	; 0x24
    3a1a:	f240 505c 	movw	r0, #1372	; 0x55c
    3a1e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3a22:	4619      	mov	r1, r3
    3a24:	f7fe ff8c 	bl	2940 <vListInsertEnd>
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    3a28:	f04f 0000 	mov.w	r0, #0
    3a2c:	f380 8811 	msr	BASEPRI, r0

		return xYieldRequired;
    3a30:	697b      	ldr	r3, [r7, #20]
	}
    3a32:	4618      	mov	r0, r3
    3a34:	3718      	adds	r7, #24
    3a36:	46bd      	mov	sp, r7
    3a38:	bd80      	pop	{r7, pc}
    3a3a:	bf00      	nop

00003a3c <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    3a3c:	b580      	push	{r7, lr}
    3a3e:	b086      	sub	sp, #24
    3a40:	af04      	add	r7, sp, #16
	/* Add the idle task at the lowest priority. */
	#if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
	{
		/* Create the idle task, storing its handle in xIdleTaskHandle so it can
		be returned by the xTaskGetIdleTaskHandle() function. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
    3a42:	2300      	movs	r3, #0
    3a44:	9300      	str	r3, [sp, #0]
    3a46:	f240 53c0 	movw	r3, #1472	; 0x5c0
    3a4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a4e:	9301      	str	r3, [sp, #4]
    3a50:	2300      	movs	r3, #0
    3a52:	9302      	str	r3, [sp, #8]
    3a54:	2300      	movs	r3, #0
    3a56:	9303      	str	r3, [sp, #12]
    3a58:	f244 1045 	movw	r0, #16709	; 0x4145
    3a5c:	f2c0 0000 	movt	r0, #0
    3a60:	f643 0178 	movw	r1, #14456	; 0x3878
    3a64:	f2c0 0101 	movt	r1, #1
    3a68:	2280      	movs	r2, #128	; 0x80
    3a6a:	2300      	movs	r3, #0
    3a6c:	f7ff fc74 	bl	3358 <xTaskGenericCreate>
    3a70:	6078      	str	r0, [r7, #4]
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
    3a72:	687b      	ldr	r3, [r7, #4]
    3a74:	2b01      	cmp	r3, #1
    3a76:	d111      	bne.n	3a9c <vTaskStartScheduler+0x60>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
    3a78:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    3a7c:	f380 8811 	msr	BASEPRI, r0

		xSchedulerRunning = pdTRUE;
    3a80:	f240 53d4 	movw	r3, #1492	; 0x5d4
    3a84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a88:	2201      	movs	r2, #1
    3a8a:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
    3a8c:	f240 53c8 	movw	r3, #1480	; 0x5c8
    3a90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a94:	2200      	movs	r2, #0
    3a96:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    3a98:	f000 fd9c 	bl	45d4 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    3a9c:	3708      	adds	r7, #8
    3a9e:	46bd      	mov	sp, r7
    3aa0:	bd80      	pop	{r7, pc}
    3aa2:	bf00      	nop

00003aa4 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    3aa4:	b580      	push	{r7, lr}
    3aa6:	af00      	add	r7, sp, #0
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    3aa8:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    3aac:	f380 8811 	msr	BASEPRI, r0
	xSchedulerRunning = pdFALSE;
    3ab0:	f240 53d4 	movw	r3, #1492	; 0x5d4
    3ab4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ab8:	2200      	movs	r2, #0
    3aba:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
    3abc:	f000 fdb2 	bl	4624 <vPortEndScheduler>
}
    3ac0:	bd80      	pop	{r7, pc}
    3ac2:	bf00      	nop

00003ac4 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    3ac4:	b480      	push	{r7}
    3ac6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    3ac8:	f240 53d8 	movw	r3, #1496	; 0x5d8
    3acc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ad0:	681b      	ldr	r3, [r3, #0]
    3ad2:	1c5a      	adds	r2, r3, #1
    3ad4:	f240 53d8 	movw	r3, #1496	; 0x5d8
    3ad8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3adc:	601a      	str	r2, [r3, #0]
}
    3ade:	46bd      	mov	sp, r7
    3ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ae4:	4770      	bx	lr
    3ae6:	bf00      	nop

00003ae8 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    3ae8:	b590      	push	{r4, r7, lr}
    3aea:	b083      	sub	sp, #12
    3aec:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    3aee:	2300      	movs	r3, #0
    3af0:	607b      	str	r3, [r7, #4]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    3af2:	f000 fdab 	bl	464c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
    3af6:	f240 53d8 	movw	r3, #1496	; 0x5d8
    3afa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3afe:	681b      	ldr	r3, [r3, #0]
    3b00:	1e5a      	subs	r2, r3, #1
    3b02:	f240 53d8 	movw	r3, #1496	; 0x5d8
    3b06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b0a:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3b0c:	f240 53d8 	movw	r3, #1496	; 0x5d8
    3b10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b14:	681b      	ldr	r3, [r3, #0]
    3b16:	2b00      	cmp	r3, #0
    3b18:	f040 8083 	bne.w	3c22 <xTaskResumeAll+0x13a>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    3b1c:	f240 53c4 	movw	r3, #1476	; 0x5c4
    3b20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b24:	681b      	ldr	r3, [r3, #0]
    3b26:	2b00      	cmp	r3, #0
    3b28:	d07b      	beq.n	3c22 <xTaskResumeAll+0x13a>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
    3b2a:	2300      	movs	r3, #0
    3b2c:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    3b2e:	e033      	b.n	3b98 <xTaskResumeAll+0xb0>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    3b30:	f240 535c 	movw	r3, #1372	; 0x55c
    3b34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b38:	699b      	ldr	r3, [r3, #24]
    3b3a:	699c      	ldr	r4, [r3, #24]
					vListRemove( &( pxTCB->xEventListItem ) );
    3b3c:	f104 0324 	add.w	r3, r4, #36	; 0x24
    3b40:	4618      	mov	r0, r3
    3b42:	f7fe ff5d 	bl	2a00 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    3b46:	1d23      	adds	r3, r4, #4
    3b48:	4618      	mov	r0, r3
    3b4a:	f7fe ff59 	bl	2a00 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    3b4e:	6c62      	ldr	r2, [r4, #68]	; 0x44
    3b50:	f240 53d0 	movw	r3, #1488	; 0x5d0
    3b54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b58:	681b      	ldr	r3, [r3, #0]
    3b5a:	429a      	cmp	r2, r3
    3b5c:	d905      	bls.n	3b6a <xTaskResumeAll+0x82>
    3b5e:	6c62      	ldr	r2, [r4, #68]	; 0x44
    3b60:	f240 53d0 	movw	r3, #1488	; 0x5d0
    3b64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b68:	601a      	str	r2, [r3, #0]
    3b6a:	6c63      	ldr	r3, [r4, #68]	; 0x44
    3b6c:	015a      	lsls	r2, r3, #5
    3b6e:	f240 2394 	movw	r3, #660	; 0x294
    3b72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b76:	441a      	add	r2, r3
    3b78:	1d23      	adds	r3, r4, #4
    3b7a:	4610      	mov	r0, r2
    3b7c:	4619      	mov	r1, r3
    3b7e:	f7fe fedf 	bl	2940 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3b82:	6c62      	ldr	r2, [r4, #68]	; 0x44
    3b84:	f240 2390 	movw	r3, #656	; 0x290
    3b88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b8c:	681b      	ldr	r3, [r3, #0]
    3b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3b90:	429a      	cmp	r2, r3
    3b92:	d301      	bcc.n	3b98 <xTaskResumeAll+0xb0>
					{
						xYieldRequired = pdTRUE;
    3b94:	2301      	movs	r3, #1
    3b96:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    3b98:	f240 535c 	movw	r3, #1372	; 0x55c
    3b9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ba0:	681b      	ldr	r3, [r3, #0]
    3ba2:	2b00      	cmp	r3, #0
    3ba4:	d1c4      	bne.n	3b30 <xTaskResumeAll+0x48>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    3ba6:	f240 53dc 	movw	r3, #1500	; 0x5dc
    3baa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3bae:	681b      	ldr	r3, [r3, #0]
    3bb0:	2b00      	cmp	r3, #0
    3bb2:	d022      	beq.n	3bfa <xTaskResumeAll+0x112>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    3bb4:	e01a      	b.n	3bec <xTaskResumeAll+0x104>
					{
						vTaskIncrementTick();
    3bb6:	f000 f897 	bl	3ce8 <vTaskIncrementTick>
						--uxMissedTicks;
    3bba:	f240 53dc 	movw	r3, #1500	; 0x5dc
    3bbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3bc2:	681b      	ldr	r3, [r3, #0]
    3bc4:	1e5a      	subs	r2, r3, #1
    3bc6:	f240 53dc 	movw	r3, #1500	; 0x5dc
    3bca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3bce:	601a      	str	r2, [r3, #0]
                        // added by wanbo
                        if (uxMissedTicks > (unsigned portBASE_TYPE) 1<<31)
    3bd0:	f240 53dc 	movw	r3, #1500	; 0x5dc
    3bd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3bd8:	681b      	ldr	r3, [r3, #0]
    3bda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    3bde:	d905      	bls.n	3bec <xTaskResumeAll+0x104>
                        {
                            uxMissedTicks = 0;
    3be0:	f240 53dc 	movw	r3, #1500	; 0x5dc
    3be4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3be8:	2200      	movs	r2, #0
    3bea:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    3bec:	f240 53dc 	movw	r3, #1500	; 0x5dc
    3bf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3bf4:	681b      	ldr	r3, [r3, #0]
    3bf6:	2b00      	cmp	r3, #0
    3bf8:	d1dd      	bne.n	3bb6 <xTaskResumeAll+0xce>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    3bfa:	683b      	ldr	r3, [r7, #0]
    3bfc:	2b01      	cmp	r3, #1
    3bfe:	d006      	beq.n	3c0e <xTaskResumeAll+0x126>
    3c00:	f240 53e0 	movw	r3, #1504	; 0x5e0
    3c04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c08:	681b      	ldr	r3, [r3, #0]
    3c0a:	2b01      	cmp	r3, #1
    3c0c:	d109      	bne.n	3c22 <xTaskResumeAll+0x13a>
				{
					xAlreadyYielded = pdTRUE;
    3c0e:	2301      	movs	r3, #1
    3c10:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
    3c12:	f240 53e0 	movw	r3, #1504	; 0x5e0
    3c16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c1a:	2200      	movs	r2, #0
    3c1c:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
    3c1e:	f000 fd07 	bl	4630 <vPortYieldFromISR>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    3c22:	f000 fd29 	bl	4678 <vPortExitCritical>

	return xAlreadyYielded;
    3c26:	687b      	ldr	r3, [r7, #4]
}
    3c28:	4618      	mov	r0, r3
    3c2a:	370c      	adds	r7, #12
    3c2c:	46bd      	mov	sp, r7
    3c2e:	bd90      	pop	{r4, r7, pc}

00003c30 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    3c30:	b580      	push	{r7, lr}
    3c32:	b082      	sub	sp, #8
    3c34:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    3c36:	f000 fd09 	bl	464c <vPortEnterCritical>
	{
		xTicks = xTickCount;
    3c3a:	f240 53c8 	movw	r3, #1480	; 0x5c8
    3c3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c42:	681b      	ldr	r3, [r3, #0]
    3c44:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
    3c46:	f000 fd17 	bl	4678 <vPortExitCritical>

	return xTicks;
    3c4a:	687b      	ldr	r3, [r7, #4]
}
    3c4c:	4618      	mov	r0, r3
    3c4e:	3708      	adds	r7, #8
    3c50:	46bd      	mov	sp, r7
    3c52:	bd80      	pop	{r7, pc}

00003c54 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
    3c54:	b480      	push	{r7}
    3c56:	b083      	sub	sp, #12
    3c58:	af00      	add	r7, sp, #0
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    3c5a:	2300      	movs	r3, #0
    3c5c:	607b      	str	r3, [r7, #4]
    3c5e:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    3c62:	f380 8811 	msr	BASEPRI, r0
	xReturn = xTickCount;
    3c66:	f240 53c8 	movw	r3, #1480	; 0x5c8
    3c6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c6e:	681b      	ldr	r3, [r3, #0]
    3c70:	603b      	str	r3, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    3c72:	f04f 0000 	mov.w	r0, #0
    3c76:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    3c7a:	683b      	ldr	r3, [r7, #0]
}
    3c7c:	4618      	mov	r0, r3
    3c7e:	370c      	adds	r7, #12
    3c80:	46bd      	mov	sp, r7
    3c82:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c86:	4770      	bx	lr

00003c88 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
    3c88:	b480      	push	{r7}
    3c8a:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    3c8c:	f240 53c4 	movw	r3, #1476	; 0x5c4
    3c90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c94:	681b      	ldr	r3, [r3, #0]
}
    3c96:	4618      	mov	r0, r3
    3c98:	46bd      	mov	sp, r7
    3c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c9e:	4770      	bx	lr

00003ca0 <pcTaskGetTaskName>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_pcTaskGetTaskName == 1 )

	signed char *pcTaskGetTaskName( xTaskHandle xTaskToQuery )
	{
    3ca0:	b480      	push	{r7}
    3ca2:	b085      	sub	sp, #20
    3ca4:	af00      	add	r7, sp, #0
    3ca6:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		/* If null is passed in here then the name of the calling task is being queried. */
		pxTCB = prvGetTCBFromHandle( xTaskToQuery );
    3ca8:	687b      	ldr	r3, [r7, #4]
    3caa:	2b00      	cmp	r3, #0
    3cac:	d105      	bne.n	3cba <pcTaskGetTaskName+0x1a>
    3cae:	f240 2390 	movw	r3, #656	; 0x290
    3cb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3cb6:	681b      	ldr	r3, [r3, #0]
    3cb8:	e000      	b.n	3cbc <pcTaskGetTaskName+0x1c>
    3cba:	687b      	ldr	r3, [r7, #4]
    3cbc:	60fb      	str	r3, [r7, #12]
		configASSERT( pxTCB );
		return &( pxTCB->pcTaskName[ 0 ] );
    3cbe:	68fb      	ldr	r3, [r7, #12]
    3cc0:	334c      	adds	r3, #76	; 0x4c
	}
    3cc2:	4618      	mov	r0, r3
    3cc4:	3714      	adds	r7, #20
    3cc6:	46bd      	mov	sp, r7
    3cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ccc:	4770      	bx	lr
    3cce:	bf00      	nop

00003cd0 <xTaskGetIdleTaskHandle>:
/*----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )

	xTaskHandle xTaskGetIdleTaskHandle( void )
	{
    3cd0:	b480      	push	{r7}
    3cd2:	af00      	add	r7, sp, #0
		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
		started, then xIdleTaskHandle will be NULL. */
		configASSERT( ( xIdleTaskHandle != NULL ) );
		return xIdleTaskHandle;
    3cd4:	f240 53c0 	movw	r3, #1472	; 0x5c0
    3cd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3cdc:	681b      	ldr	r3, [r3, #0]
	}
    3cde:	4618      	mov	r0, r3
    3ce0:	46bd      	mov	sp, r7
    3ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ce6:	4770      	bx	lr

00003ce8 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    3ce8:	b580      	push	{r7, lr}
    3cea:	b084      	sub	sp, #16
    3cec:	af00      	add	r7, sp, #0
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3cee:	f240 53d8 	movw	r3, #1496	; 0x5d8
    3cf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3cf6:	681b      	ldr	r3, [r3, #0]
    3cf8:	2b00      	cmp	r3, #0
    3cfa:	f040 80b6 	bne.w	3e6a <vTaskIncrementTick+0x182>
	{
		++xTickCount;
    3cfe:	f240 53c8 	movw	r3, #1480	; 0x5c8
    3d02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d06:	681b      	ldr	r3, [r3, #0]
    3d08:	1c5a      	adds	r2, r3, #1
    3d0a:	f240 53c8 	movw	r3, #1480	; 0x5c8
    3d0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d12:	601a      	str	r2, [r3, #0]
        //vPrintNumber(xTickCount);
		if( xTickCount == ( portTickType ) 0U )
    3d14:	f240 53c8 	movw	r3, #1480	; 0x5c8
    3d18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d1c:	681b      	ldr	r3, [r3, #0]
    3d1e:	2b00      	cmp	r3, #0
    3d20:	d13f      	bne.n	3da2 <vTaskIncrementTick+0xba>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    3d22:	f240 5354 	movw	r3, #1364	; 0x554
    3d26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d2a:	681b      	ldr	r3, [r3, #0]
    3d2c:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    3d2e:	f240 5358 	movw	r3, #1368	; 0x558
    3d32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d36:	681a      	ldr	r2, [r3, #0]
    3d38:	f240 5354 	movw	r3, #1364	; 0x554
    3d3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d40:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
    3d42:	f240 5358 	movw	r3, #1368	; 0x558
    3d46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d4a:	68fa      	ldr	r2, [r7, #12]
    3d4c:	601a      	str	r2, [r3, #0]
			xNumOfOverflows++;
    3d4e:	f240 53e4 	movw	r3, #1508	; 0x5e4
    3d52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d56:	681b      	ldr	r3, [r3, #0]
    3d58:	1c5a      	adds	r2, r3, #1
    3d5a:	f240 53e4 	movw	r3, #1508	; 0x5e4
    3d5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d62:	601a      	str	r2, [r3, #0]
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    3d64:	f240 5354 	movw	r3, #1364	; 0x554
    3d68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d6c:	681b      	ldr	r3, [r3, #0]
    3d6e:	681b      	ldr	r3, [r3, #0]
    3d70:	2b00      	cmp	r3, #0
    3d72:	d107      	bne.n	3d84 <vTaskIncrementTick+0x9c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    3d74:	f240 03f8 	movw	r3, #248	; 0xf8
    3d78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d7c:	f04f 32ff 	mov.w	r2, #4294967295
    3d80:	601a      	str	r2, [r3, #0]
    3d82:	e00e      	b.n	3da2 <vTaskIncrementTick+0xba>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    3d84:	f240 5354 	movw	r3, #1364	; 0x554
    3d88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d8c:	681b      	ldr	r3, [r3, #0]
    3d8e:	699b      	ldr	r3, [r3, #24]
    3d90:	699b      	ldr	r3, [r3, #24]
    3d92:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    3d94:	68bb      	ldr	r3, [r7, #8]
    3d96:	685a      	ldr	r2, [r3, #4]
    3d98:	f240 03f8 	movw	r3, #248	; 0xf8
    3d9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3da0:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    3da2:	f240 53c8 	movw	r3, #1480	; 0x5c8
    3da6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3daa:	681a      	ldr	r2, [r3, #0]
    3dac:	f240 03f8 	movw	r3, #248	; 0xf8
    3db0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3db4:	681b      	ldr	r3, [r3, #0]
    3db6:	429a      	cmp	r2, r3
    3db8:	d356      	bcc.n	3e68 <vTaskIncrementTick+0x180>
    3dba:	f240 5354 	movw	r3, #1364	; 0x554
    3dbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3dc2:	681b      	ldr	r3, [r3, #0]
    3dc4:	681b      	ldr	r3, [r3, #0]
    3dc6:	2b00      	cmp	r3, #0
    3dc8:	d107      	bne.n	3dda <vTaskIncrementTick+0xf2>
    3dca:	f240 03f8 	movw	r3, #248	; 0xf8
    3dce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3dd2:	f04f 32ff 	mov.w	r2, #4294967295
    3dd6:	601a      	str	r2, [r3, #0]
    3dd8:	e046      	b.n	3e68 <vTaskIncrementTick+0x180>
    3dda:	f240 5354 	movw	r3, #1364	; 0x554
    3dde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3de2:	681b      	ldr	r3, [r3, #0]
    3de4:	699b      	ldr	r3, [r3, #24]
    3de6:	699b      	ldr	r3, [r3, #24]
    3de8:	60bb      	str	r3, [r7, #8]
    3dea:	68bb      	ldr	r3, [r7, #8]
    3dec:	685b      	ldr	r3, [r3, #4]
    3dee:	607b      	str	r3, [r7, #4]
    3df0:	f240 53c8 	movw	r3, #1480	; 0x5c8
    3df4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3df8:	681a      	ldr	r2, [r3, #0]
    3dfa:	687b      	ldr	r3, [r7, #4]
    3dfc:	429a      	cmp	r2, r3
    3dfe:	d206      	bcs.n	3e0e <vTaskIncrementTick+0x126>
    3e00:	f240 03f8 	movw	r3, #248	; 0xf8
    3e04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e08:	687a      	ldr	r2, [r7, #4]
    3e0a:	601a      	str	r2, [r3, #0]
    3e0c:	e02c      	b.n	3e68 <vTaskIncrementTick+0x180>
    3e0e:	68bb      	ldr	r3, [r7, #8]
    3e10:	3304      	adds	r3, #4
    3e12:	4618      	mov	r0, r3
    3e14:	f7fe fdf4 	bl	2a00 <vListRemove>
    3e18:	68bb      	ldr	r3, [r7, #8]
    3e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3e1c:	2b00      	cmp	r3, #0
    3e1e:	d004      	beq.n	3e2a <vTaskIncrementTick+0x142>
    3e20:	68bb      	ldr	r3, [r7, #8]
    3e22:	3324      	adds	r3, #36	; 0x24
    3e24:	4618      	mov	r0, r3
    3e26:	f7fe fdeb 	bl	2a00 <vListRemove>
    3e2a:	68bb      	ldr	r3, [r7, #8]
    3e2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    3e2e:	f240 53d0 	movw	r3, #1488	; 0x5d0
    3e32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e36:	681b      	ldr	r3, [r3, #0]
    3e38:	429a      	cmp	r2, r3
    3e3a:	d906      	bls.n	3e4a <vTaskIncrementTick+0x162>
    3e3c:	68bb      	ldr	r3, [r7, #8]
    3e3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    3e40:	f240 53d0 	movw	r3, #1488	; 0x5d0
    3e44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e48:	601a      	str	r2, [r3, #0]
    3e4a:	68bb      	ldr	r3, [r7, #8]
    3e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3e4e:	015a      	lsls	r2, r3, #5
    3e50:	f240 2394 	movw	r3, #660	; 0x294
    3e54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e58:	441a      	add	r2, r3
    3e5a:	68bb      	ldr	r3, [r7, #8]
    3e5c:	3304      	adds	r3, #4
    3e5e:	4610      	mov	r0, r2
    3e60:	4619      	mov	r1, r3
    3e62:	f7fe fd6d 	bl	2940 <vListInsertEnd>
    3e66:	e7a8      	b.n	3dba <vTaskIncrementTick+0xd2>
    3e68:	e00c      	b.n	3e84 <vTaskIncrementTick+0x19c>
	}
	else
	{
		++uxMissedTicks;
    3e6a:	f240 53dc 	movw	r3, #1500	; 0x5dc
    3e6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e72:	681b      	ldr	r3, [r3, #0]
    3e74:	1c5a      	adds	r2, r3, #1
    3e76:	f240 53dc 	movw	r3, #1500	; 0x5dc
    3e7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e7e:	601a      	str	r2, [r3, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
    3e80:	f00e fbfa 	bl	12678 <vApplicationTickHook>

	#if ( configUSE_TICK_HOOK == 1 )
	{
		/* Guard against the tick hook being called when the missed tick
		count is being unwound (when the scheduler is being unlocked. */
		if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
    3e84:	f240 53dc 	movw	r3, #1500	; 0x5dc
    3e88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e8c:	681b      	ldr	r3, [r3, #0]
    3e8e:	2b00      	cmp	r3, #0
    3e90:	d101      	bne.n	3e96 <vTaskIncrementTick+0x1ae>
		{
			vApplicationTickHook();
    3e92:	f00e fbf1 	bl	12678 <vApplicationTickHook>
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    3e96:	3710      	adds	r7, #16
    3e98:	46bd      	mov	sp, r7
    3e9a:	bd80      	pop	{r7, pc}

00003e9c <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    3e9c:	b580      	push	{r7, lr}
    3e9e:	b082      	sub	sp, #8
    3ea0:	af00      	add	r7, sp, #0
    #ifdef configUSE_EDF_SCHEDULING
    portBASE_TYPE xLen, i;
    tskTCB * pxNextTask;
    #endif
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    3ea2:	f240 53d8 	movw	r3, #1496	; 0x5d8
    3ea6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3eaa:	681b      	ldr	r3, [r3, #0]
    3eac:	2b00      	cmp	r3, #0
    3eae:	d006      	beq.n	3ebe <vTaskSwitchContext+0x22>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    3eb0:	f240 53e0 	movw	r3, #1504	; 0x5e0
    3eb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3eb8:	2201      	movs	r2, #1
    3eba:	601a      	str	r2, [r3, #0]
    3ebc:	e041      	b.n	3f42 <vTaskSwitchContext+0xa6>
	}
	else
	{
		traceTASK_SWITCHED_OUT();
    3ebe:	f00e fbd5 	bl	1266c <myTraceSwitchedOut>
            listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ 0 ] ) );
        }

        #else
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    3ec2:	e00a      	b.n	3eda <vTaskSwitchContext+0x3e>
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    3ec4:	f240 53d0 	movw	r3, #1488	; 0x5d0
    3ec8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ecc:	681b      	ldr	r3, [r3, #0]
    3ece:	1e5a      	subs	r2, r3, #1
    3ed0:	f240 53d0 	movw	r3, #1488	; 0x5d0
    3ed4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ed8:	601a      	str	r2, [r3, #0]
            listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ 0 ] ) );
        }

        #else
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    3eda:	f240 53d0 	movw	r3, #1488	; 0x5d0
    3ede:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ee2:	681a      	ldr	r2, [r3, #0]
    3ee4:	f240 2394 	movw	r3, #660	; 0x294
    3ee8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3eec:	0152      	lsls	r2, r2, #5
    3eee:	4413      	add	r3, r2
    3ef0:	681b      	ldr	r3, [r3, #0]
    3ef2:	2b00      	cmp	r3, #0
    3ef4:	d0e6      	beq.n	3ec4 <vTaskSwitchContext+0x28>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    3ef6:	f240 53d0 	movw	r3, #1488	; 0x5d0
    3efa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3efe:	681b      	ldr	r3, [r3, #0]
    3f00:	015a      	lsls	r2, r3, #5
    3f02:	f240 2394 	movw	r3, #660	; 0x294
    3f06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f0a:	4413      	add	r3, r2
    3f0c:	607b      	str	r3, [r7, #4]
    3f0e:	687b      	ldr	r3, [r7, #4]
    3f10:	685b      	ldr	r3, [r3, #4]
    3f12:	691a      	ldr	r2, [r3, #16]
    3f14:	687b      	ldr	r3, [r7, #4]
    3f16:	605a      	str	r2, [r3, #4]
    3f18:	687b      	ldr	r3, [r7, #4]
    3f1a:	685a      	ldr	r2, [r3, #4]
    3f1c:	687b      	ldr	r3, [r7, #4]
    3f1e:	3308      	adds	r3, #8
    3f20:	429a      	cmp	r2, r3
    3f22:	d104      	bne.n	3f2e <vTaskSwitchContext+0x92>
    3f24:	687b      	ldr	r3, [r7, #4]
    3f26:	685b      	ldr	r3, [r3, #4]
    3f28:	691a      	ldr	r2, [r3, #16]
    3f2a:	687b      	ldr	r3, [r7, #4]
    3f2c:	605a      	str	r2, [r3, #4]
    3f2e:	687b      	ldr	r3, [r7, #4]
    3f30:	685b      	ldr	r3, [r3, #4]
    3f32:	699a      	ldr	r2, [r3, #24]
    3f34:	f240 2390 	movw	r3, #656	; 0x290
    3f38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f3c:	601a      	str	r2, [r3, #0]

        #endif
	
		traceTASK_SWITCHED_IN();
    3f3e:	f00e fb8f 	bl	12660 <myTraceSwitchedIn>
	}
}
    3f42:	3708      	adds	r7, #8
    3f44:	46bd      	mov	sp, r7
    3f46:	bd80      	pop	{r7, pc}

00003f48 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    3f48:	b580      	push	{r7, lr}
    3f4a:	b084      	sub	sp, #16
    3f4c:	af00      	add	r7, sp, #0
    3f4e:	6078      	str	r0, [r7, #4]
    3f50:	6039      	str	r1, [r7, #0]
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    3f52:	f240 2390 	movw	r3, #656	; 0x290
    3f56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f5a:	681b      	ldr	r3, [r3, #0]
    3f5c:	3324      	adds	r3, #36	; 0x24
    3f5e:	6878      	ldr	r0, [r7, #4]
    3f60:	4619      	mov	r1, r3
    3f62:	f7fe fd15 	bl	2990 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3f66:	f240 2390 	movw	r3, #656	; 0x290
    3f6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f6e:	681b      	ldr	r3, [r3, #0]
    3f70:	3304      	adds	r3, #4
    3f72:	4618      	mov	r0, r3
    3f74:	f7fe fd44 	bl	2a00 <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    3f78:	683b      	ldr	r3, [r7, #0]
    3f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
    3f7e:	d10d      	bne.n	3f9c <vTaskPlaceOnEventList+0x54>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3f80:	f240 2390 	movw	r3, #656	; 0x290
    3f84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f88:	681b      	ldr	r3, [r3, #0]
    3f8a:	3304      	adds	r3, #4
    3f8c:	f240 50a0 	movw	r0, #1440	; 0x5a0
    3f90:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3f94:	4619      	mov	r1, r3
    3f96:	f7fe fcd3 	bl	2940 <vListInsertEnd>
    3f9a:	e00a      	b.n	3fb2 <vTaskPlaceOnEventList+0x6a>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    3f9c:	f240 53c8 	movw	r3, #1480	; 0x5c8
    3fa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3fa4:	681a      	ldr	r2, [r3, #0]
    3fa6:	683b      	ldr	r3, [r7, #0]
    3fa8:	4413      	add	r3, r2
    3faa:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    3fac:	68f8      	ldr	r0, [r7, #12]
    3fae:	f000 f99b 	bl	42e8 <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
    3fb2:	3710      	adds	r7, #16
    3fb4:	46bd      	mov	sp, r7
    3fb6:	bd80      	pop	{r7, pc}

00003fb8 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    3fb8:	b580      	push	{r7, lr}
    3fba:	b084      	sub	sp, #16
    3fbc:	af00      	add	r7, sp, #0
    3fbe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    3fc0:	687b      	ldr	r3, [r7, #4]
    3fc2:	699b      	ldr	r3, [r3, #24]
    3fc4:	699b      	ldr	r3, [r3, #24]
    3fc6:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    3fc8:	68bb      	ldr	r3, [r7, #8]
    3fca:	3324      	adds	r3, #36	; 0x24
    3fcc:	4618      	mov	r0, r3
    3fce:	f7fe fd17 	bl	2a00 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3fd2:	f240 53d8 	movw	r3, #1496	; 0x5d8
    3fd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3fda:	681b      	ldr	r3, [r3, #0]
    3fdc:	2b00      	cmp	r3, #0
    3fde:	d123      	bne.n	4028 <xTaskRemoveFromEventList+0x70>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    3fe0:	68bb      	ldr	r3, [r7, #8]
    3fe2:	3304      	adds	r3, #4
    3fe4:	4618      	mov	r0, r3
    3fe6:	f7fe fd0b 	bl	2a00 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    3fea:	68bb      	ldr	r3, [r7, #8]
    3fec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    3fee:	f240 53d0 	movw	r3, #1488	; 0x5d0
    3ff2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ff6:	681b      	ldr	r3, [r3, #0]
    3ff8:	429a      	cmp	r2, r3
    3ffa:	d906      	bls.n	400a <xTaskRemoveFromEventList+0x52>
    3ffc:	68bb      	ldr	r3, [r7, #8]
    3ffe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    4000:	f240 53d0 	movw	r3, #1488	; 0x5d0
    4004:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4008:	601a      	str	r2, [r3, #0]
    400a:	68bb      	ldr	r3, [r7, #8]
    400c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    400e:	015a      	lsls	r2, r3, #5
    4010:	f240 2394 	movw	r3, #660	; 0x294
    4014:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4018:	441a      	add	r2, r3
    401a:	68bb      	ldr	r3, [r7, #8]
    401c:	3304      	adds	r3, #4
    401e:	4610      	mov	r0, r2
    4020:	4619      	mov	r1, r3
    4022:	f7fe fc8d 	bl	2940 <vListInsertEnd>
    4026:	e008      	b.n	403a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    4028:	68bb      	ldr	r3, [r7, #8]
    402a:	3324      	adds	r3, #36	; 0x24
    402c:	f240 505c 	movw	r0, #1372	; 0x55c
    4030:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4034:	4619      	mov	r1, r3
    4036:	f7fe fc83 	bl	2940 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    403a:	68bb      	ldr	r3, [r7, #8]
    403c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    403e:	f240 2390 	movw	r3, #656	; 0x290
    4042:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4046:	681b      	ldr	r3, [r3, #0]
    4048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    404a:	429a      	cmp	r2, r3
    404c:	d302      	bcc.n	4054 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    404e:	2301      	movs	r3, #1
    4050:	60fb      	str	r3, [r7, #12]
    4052:	e001      	b.n	4058 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
    4054:	2300      	movs	r3, #0
    4056:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    4058:	68fb      	ldr	r3, [r7, #12]
}
    405a:	4618      	mov	r0, r3
    405c:	3710      	adds	r7, #16
    405e:	46bd      	mov	sp, r7
    4060:	bd80      	pop	{r7, pc}
    4062:	bf00      	nop

00004064 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    4064:	b480      	push	{r7}
    4066:	b083      	sub	sp, #12
    4068:	af00      	add	r7, sp, #0
    406a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    406c:	f240 53e4 	movw	r3, #1508	; 0x5e4
    4070:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4074:	681a      	ldr	r2, [r3, #0]
    4076:	687b      	ldr	r3, [r7, #4]
    4078:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    407a:	f240 53c8 	movw	r3, #1480	; 0x5c8
    407e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4082:	681a      	ldr	r2, [r3, #0]
    4084:	687b      	ldr	r3, [r7, #4]
    4086:	605a      	str	r2, [r3, #4]
}
    4088:	370c      	adds	r7, #12
    408a:	46bd      	mov	sp, r7
    408c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4090:	4770      	bx	lr
    4092:	bf00      	nop

00004094 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    4094:	b580      	push	{r7, lr}
    4096:	b084      	sub	sp, #16
    4098:	af00      	add	r7, sp, #0
    409a:	6078      	str	r0, [r7, #4]
    409c:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    409e:	f000 fad5 	bl	464c <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    40a2:	683b      	ldr	r3, [r7, #0]
    40a4:	681b      	ldr	r3, [r3, #0]
    40a6:	f1b3 3fff 	cmp.w	r3, #4294967295
    40aa:	d102      	bne.n	40b2 <xTaskCheckForTimeOut+0x1e>
			{
				xReturn = pdFALSE;
    40ac:	2300      	movs	r3, #0
    40ae:	60fb      	str	r3, [r7, #12]
    40b0:	e035      	b.n	411e <xTaskCheckForTimeOut+0x8a>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    40b2:	687b      	ldr	r3, [r7, #4]
    40b4:	681a      	ldr	r2, [r3, #0]
    40b6:	f240 53e4 	movw	r3, #1508	; 0x5e4
    40ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    40be:	681b      	ldr	r3, [r3, #0]
    40c0:	429a      	cmp	r2, r3
    40c2:	d00b      	beq.n	40dc <xTaskCheckForTimeOut+0x48>
    40c4:	687b      	ldr	r3, [r7, #4]
    40c6:	685a      	ldr	r2, [r3, #4]
    40c8:	f240 53c8 	movw	r3, #1480	; 0x5c8
    40cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    40d0:	681b      	ldr	r3, [r3, #0]
    40d2:	429a      	cmp	r2, r3
    40d4:	d802      	bhi.n	40dc <xTaskCheckForTimeOut+0x48>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    40d6:	2301      	movs	r3, #1
    40d8:	60fb      	str	r3, [r7, #12]
    40da:	e020      	b.n	411e <xTaskCheckForTimeOut+0x8a>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    40dc:	f240 53c8 	movw	r3, #1480	; 0x5c8
    40e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    40e4:	681a      	ldr	r2, [r3, #0]
    40e6:	687b      	ldr	r3, [r7, #4]
    40e8:	685b      	ldr	r3, [r3, #4]
    40ea:	1ad2      	subs	r2, r2, r3
    40ec:	683b      	ldr	r3, [r7, #0]
    40ee:	681b      	ldr	r3, [r3, #0]
    40f0:	429a      	cmp	r2, r3
    40f2:	d212      	bcs.n	411a <xTaskCheckForTimeOut+0x86>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    40f4:	683b      	ldr	r3, [r7, #0]
    40f6:	681a      	ldr	r2, [r3, #0]
    40f8:	687b      	ldr	r3, [r7, #4]
    40fa:	6859      	ldr	r1, [r3, #4]
    40fc:	f240 53c8 	movw	r3, #1480	; 0x5c8
    4100:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4104:	681b      	ldr	r3, [r3, #0]
    4106:	1acb      	subs	r3, r1, r3
    4108:	441a      	add	r2, r3
    410a:	683b      	ldr	r3, [r7, #0]
    410c:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
    410e:	6878      	ldr	r0, [r7, #4]
    4110:	f7ff ffa8 	bl	4064 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    4114:	2300      	movs	r3, #0
    4116:	60fb      	str	r3, [r7, #12]
    4118:	e001      	b.n	411e <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			xReturn = pdTRUE;
    411a:	2301      	movs	r3, #1
    411c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    411e:	f000 faab 	bl	4678 <vPortExitCritical>

	return xReturn;
    4122:	68fb      	ldr	r3, [r7, #12]
}
    4124:	4618      	mov	r0, r3
    4126:	3710      	adds	r7, #16
    4128:	46bd      	mov	sp, r7
    412a:	bd80      	pop	{r7, pc}

0000412c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    412c:	b480      	push	{r7}
    412e:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
    4130:	f240 53e0 	movw	r3, #1504	; 0x5e0
    4134:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4138:	2201      	movs	r2, #1
    413a:	601a      	str	r2, [r3, #0]
}
    413c:	46bd      	mov	sp, r7
    413e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4142:	4770      	bx	lr

00004144 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    4144:	b580      	push	{r7, lr}
    4146:	b082      	sub	sp, #8
    4148:	af00      	add	r7, sp, #0
    414a:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    414c:	f000 f884 	bl	4258 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
    4150:	f000 fa6e 	bl	4630 <vPortYieldFromISR>
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
    4154:	e7fa      	b.n	414c <prvIdleTask+0x8>
    4156:	bf00      	nop

00004158 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    4158:	b580      	push	{r7, lr}
    415a:	b084      	sub	sp, #16
    415c:	af00      	add	r7, sp, #0
    415e:	60f8      	str	r0, [r7, #12]
    4160:	60b9      	str	r1, [r7, #8]
    4162:	607a      	str	r2, [r7, #4]
    4164:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    4166:	68fb      	ldr	r3, [r7, #12]
    4168:	334c      	adds	r3, #76	; 0x4c
    416a:	4618      	mov	r0, r3
    416c:	68b9      	ldr	r1, [r7, #8]
    416e:	2210      	movs	r2, #16
    4170:	f00f fb10 	bl	13794 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    4174:	68fb      	ldr	r3, [r7, #12]
    4176:	2200      	movs	r2, #0
    4178:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    417c:	687b      	ldr	r3, [r7, #4]
    417e:	2b13      	cmp	r3, #19
    4180:	d901      	bls.n	4186 <prvInitialiseTCBVariables+0x2e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    4182:	2313      	movs	r3, #19
    4184:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
    4186:	68fb      	ldr	r3, [r7, #12]
    4188:	687a      	ldr	r2, [r7, #4]
    418a:	645a      	str	r2, [r3, #68]	; 0x44
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    418c:	68fb      	ldr	r3, [r7, #12]
    418e:	687a      	ldr	r2, [r7, #4]
    4190:	65da      	str	r2, [r3, #92]	; 0x5c
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    4192:	68fb      	ldr	r3, [r7, #12]
    4194:	3304      	adds	r3, #4
    4196:	4618      	mov	r0, r3
    4198:	f7fe fbc6 	bl	2928 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    419c:	68fb      	ldr	r3, [r7, #12]
    419e:	3324      	adds	r3, #36	; 0x24
    41a0:	4618      	mov	r0, r3
    41a2:	f7fe fbc1 	bl	2928 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    41a6:	68fb      	ldr	r3, [r7, #12]
    41a8:	68fa      	ldr	r2, [r7, #12]
    41aa:	61da      	str	r2, [r3, #28]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    41ac:	687b      	ldr	r3, [r7, #4]
    41ae:	f1c3 0214 	rsb	r2, r3, #20
    41b2:	68fb      	ldr	r3, [r7, #12]
    41b4:	625a      	str	r2, [r3, #36]	; 0x24
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    41b6:	68fb      	ldr	r3, [r7, #12]
    41b8:	68fa      	ldr	r2, [r7, #12]
    41ba:	63da      	str	r2, [r3, #60]	; 0x3c
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    41bc:	3710      	adds	r7, #16
    41be:	46bd      	mov	sp, r7
    41c0:	bd80      	pop	{r7, pc}
    41c2:	bf00      	nop

000041c4 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    41c4:	b580      	push	{r7, lr}
    41c6:	b082      	sub	sp, #8
    41c8:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    41ca:	2300      	movs	r3, #0
    41cc:	607b      	str	r3, [r7, #4]
    41ce:	e00c      	b.n	41ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    41d0:	687b      	ldr	r3, [r7, #4]
    41d2:	015a      	lsls	r2, r3, #5
    41d4:	f240 2394 	movw	r3, #660	; 0x294
    41d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    41dc:	4413      	add	r3, r2
    41de:	4618      	mov	r0, r3
    41e0:	f7fe fb82 	bl	28e8 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    41e4:	687b      	ldr	r3, [r7, #4]
    41e6:	3301      	adds	r3, #1
    41e8:	607b      	str	r3, [r7, #4]
    41ea:	687b      	ldr	r3, [r7, #4]
    41ec:	2b13      	cmp	r3, #19
    41ee:	d9ef      	bls.n	41d0 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    41f0:	f240 5014 	movw	r0, #1300	; 0x514
    41f4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    41f8:	f7fe fb76 	bl	28e8 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    41fc:	f240 5034 	movw	r0, #1332	; 0x534
    4200:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4204:	f7fe fb70 	bl	28e8 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    4208:	f240 505c 	movw	r0, #1372	; 0x55c
    420c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4210:	f7fe fb6a 	bl	28e8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    4214:	f240 507c 	movw	r0, #1404	; 0x57c
    4218:	f2c2 0000 	movt	r0, #8192	; 0x2000
    421c:	f7fe fb64 	bl	28e8 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
    4220:	f240 50a0 	movw	r0, #1440	; 0x5a0
    4224:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4228:	f7fe fb5e 	bl	28e8 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    422c:	f240 5354 	movw	r3, #1364	; 0x554
    4230:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4234:	f240 5214 	movw	r2, #1300	; 0x514
    4238:	f2c2 0200 	movt	r2, #8192	; 0x2000
    423c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    423e:	f240 5358 	movw	r3, #1368	; 0x558
    4242:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4246:	f240 5234 	movw	r2, #1332	; 0x534
    424a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    424e:	601a      	str	r2, [r3, #0]
}
    4250:	3708      	adds	r7, #8
    4252:	46bd      	mov	sp, r7
    4254:	bd80      	pop	{r7, pc}
    4256:	bf00      	nop

00004258 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    4258:	b580      	push	{r7, lr}
    425a:	b082      	sub	sp, #8
    425c:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    425e:	f240 539c 	movw	r3, #1436	; 0x59c
    4262:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4266:	681b      	ldr	r3, [r3, #0]
    4268:	2b00      	cmp	r3, #0
    426a:	d03a      	beq.n	42e2 <prvCheckTasksWaitingTermination+0x8a>
		{
			vTaskSuspendAll();
    426c:	f7ff fc2a 	bl	3ac4 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    4270:	f240 537c 	movw	r3, #1404	; 0x57c
    4274:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4278:	681b      	ldr	r3, [r3, #0]
    427a:	2b00      	cmp	r3, #0
    427c:	bf14      	ite	ne
    427e:	2300      	movne	r3, #0
    4280:	2301      	moveq	r3, #1
    4282:	b2db      	uxtb	r3, r3
    4284:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
    4286:	f7ff fc2f 	bl	3ae8 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    428a:	687b      	ldr	r3, [r7, #4]
    428c:	2b00      	cmp	r3, #0
    428e:	d128      	bne.n	42e2 <prvCheckTasksWaitingTermination+0x8a>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    4290:	f000 f9dc 	bl	464c <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    4294:	f240 537c 	movw	r3, #1404	; 0x57c
    4298:	f2c2 0300 	movt	r3, #8192	; 0x2000
    429c:	699b      	ldr	r3, [r3, #24]
    429e:	699b      	ldr	r3, [r3, #24]
    42a0:	603b      	str	r3, [r7, #0]
					vListRemove( &( pxTCB->xGenericListItem ) );
    42a2:	683b      	ldr	r3, [r7, #0]
    42a4:	3304      	adds	r3, #4
    42a6:	4618      	mov	r0, r3
    42a8:	f7fe fbaa 	bl	2a00 <vListRemove>
					--uxCurrentNumberOfTasks;
    42ac:	f240 53c4 	movw	r3, #1476	; 0x5c4
    42b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    42b4:	681b      	ldr	r3, [r3, #0]
    42b6:	1e5a      	subs	r2, r3, #1
    42b8:	f240 53c4 	movw	r3, #1476	; 0x5c4
    42bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    42c0:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
    42c2:	f240 539c 	movw	r3, #1436	; 0x59c
    42c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    42ca:	681b      	ldr	r3, [r3, #0]
    42cc:	1e5a      	subs	r2, r3, #1
    42ce:	f240 539c 	movw	r3, #1436	; 0x59c
    42d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    42d6:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
    42d8:	f000 f9ce 	bl	4678 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
    42dc:	6838      	ldr	r0, [r7, #0]
    42de:	f000 f879 	bl	43d4 <prvDeleteTCB>
			}
		}
	}
	#endif
}
    42e2:	3708      	adds	r7, #8
    42e4:	46bd      	mov	sp, r7
    42e6:	bd80      	pop	{r7, pc}

000042e8 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    42e8:	b580      	push	{r7, lr}
    42ea:	b082      	sub	sp, #8
    42ec:	af00      	add	r7, sp, #0
    42ee:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    42f0:	f240 2390 	movw	r3, #656	; 0x290
    42f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    42f8:	681b      	ldr	r3, [r3, #0]
    42fa:	687a      	ldr	r2, [r7, #4]
    42fc:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
    42fe:	f240 53c8 	movw	r3, #1480	; 0x5c8
    4302:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4306:	681b      	ldr	r3, [r3, #0]
    4308:	687a      	ldr	r2, [r7, #4]
    430a:	429a      	cmp	r2, r3
    430c:	d20f      	bcs.n	432e <prvAddCurrentTaskToDelayedList+0x46>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    430e:	f240 5358 	movw	r3, #1368	; 0x558
    4312:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4316:	681a      	ldr	r2, [r3, #0]
    4318:	f240 2390 	movw	r3, #656	; 0x290
    431c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4320:	681b      	ldr	r3, [r3, #0]
    4322:	3304      	adds	r3, #4
    4324:	4610      	mov	r0, r2
    4326:	4619      	mov	r1, r3
    4328:	f7fe fb32 	bl	2990 <vListInsert>
    432c:	e01c      	b.n	4368 <prvAddCurrentTaskToDelayedList+0x80>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    432e:	f240 5354 	movw	r3, #1364	; 0x554
    4332:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4336:	681a      	ldr	r2, [r3, #0]
    4338:	f240 2390 	movw	r3, #656	; 0x290
    433c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4340:	681b      	ldr	r3, [r3, #0]
    4342:	3304      	adds	r3, #4
    4344:	4610      	mov	r0, r2
    4346:	4619      	mov	r1, r3
    4348:	f7fe fb22 	bl	2990 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    434c:	f240 03f8 	movw	r3, #248	; 0xf8
    4350:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4354:	681b      	ldr	r3, [r3, #0]
    4356:	687a      	ldr	r2, [r7, #4]
    4358:	429a      	cmp	r2, r3
    435a:	d205      	bcs.n	4368 <prvAddCurrentTaskToDelayedList+0x80>
		{
			xNextTaskUnblockTime = xTimeToWake;
    435c:	f240 03f8 	movw	r3, #248	; 0xf8
    4360:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4364:	687a      	ldr	r2, [r7, #4]
    4366:	601a      	str	r2, [r3, #0]
		}
	}
}
    4368:	3708      	adds	r7, #8
    436a:	46bd      	mov	sp, r7
    436c:	bd80      	pop	{r7, pc}
    436e:	bf00      	nop

00004370 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    4370:	b580      	push	{r7, lr}
    4372:	b084      	sub	sp, #16
    4374:	af00      	add	r7, sp, #0
    4376:	4603      	mov	r3, r0
    4378:	6039      	str	r1, [r7, #0]
    437a:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    437c:	2060      	movs	r0, #96	; 0x60
    437e:	f000 f9df 	bl	4740 <pvPortMalloc>
    4382:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
    4384:	68fb      	ldr	r3, [r7, #12]
    4386:	2b00      	cmp	r3, #0
    4388:	d01f      	beq.n	43ca <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    438a:	683b      	ldr	r3, [r7, #0]
    438c:	2b00      	cmp	r3, #0
    438e:	d106      	bne.n	439e <prvAllocateTCBAndStack+0x2e>
    4390:	88fb      	ldrh	r3, [r7, #6]
    4392:	009b      	lsls	r3, r3, #2
    4394:	4618      	mov	r0, r3
    4396:	f000 f9d3 	bl	4740 <pvPortMalloc>
    439a:	4603      	mov	r3, r0
    439c:	e000      	b.n	43a0 <prvAllocateTCBAndStack+0x30>
    439e:	683b      	ldr	r3, [r7, #0]
    43a0:	68fa      	ldr	r2, [r7, #12]
    43a2:	6493      	str	r3, [r2, #72]	; 0x48

		if( pxNewTCB->pxStack == NULL )
    43a4:	68fb      	ldr	r3, [r7, #12]
    43a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    43a8:	2b00      	cmp	r3, #0
    43aa:	d105      	bne.n	43b8 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    43ac:	68f8      	ldr	r0, [r7, #12]
    43ae:	f000 fa8b 	bl	48c8 <vPortFree>
			pxNewTCB = NULL;
    43b2:	2300      	movs	r3, #0
    43b4:	60fb      	str	r3, [r7, #12]
    43b6:	e008      	b.n	43ca <prvAllocateTCBAndStack+0x5a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    43b8:	68fb      	ldr	r3, [r7, #12]
    43ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    43bc:	88fb      	ldrh	r3, [r7, #6]
    43be:	009b      	lsls	r3, r3, #2
    43c0:	4610      	mov	r0, r2
    43c2:	21a5      	movs	r1, #165	; 0xa5
    43c4:	461a      	mov	r2, r3
    43c6:	f00f f995 	bl	136f4 <memset>
		}
	}

	return pxNewTCB;
    43ca:	68fb      	ldr	r3, [r7, #12]
}
    43cc:	4618      	mov	r0, r3
    43ce:	3710      	adds	r7, #16
    43d0:	46bd      	mov	sp, r7
    43d2:	bd80      	pop	{r7, pc}

000043d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
    43d4:	b580      	push	{r7, lr}
    43d6:	b082      	sub	sp, #8
    43d8:	af00      	add	r7, sp, #0
    43da:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    43dc:	687b      	ldr	r3, [r7, #4]
    43de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    43e0:	4618      	mov	r0, r3
    43e2:	f000 fa71 	bl	48c8 <vPortFree>
		vPortFree( pxTCB );
    43e6:	6878      	ldr	r0, [r7, #4]
    43e8:	f000 fa6e 	bl	48c8 <vPortFree>
	}
    43ec:	3708      	adds	r7, #8
    43ee:	46bd      	mov	sp, r7
    43f0:	bd80      	pop	{r7, pc}
    43f2:	bf00      	nop

000043f4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
    43f4:	b480      	push	{r7}
    43f6:	b083      	sub	sp, #12
    43f8:	af00      	add	r7, sp, #0
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    43fa:	f240 2390 	movw	r3, #656	; 0x290
    43fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4402:	681b      	ldr	r3, [r3, #0]
    4404:	607b      	str	r3, [r7, #4]

		return xReturn;
    4406:	687b      	ldr	r3, [r7, #4]
	}
    4408:	4618      	mov	r0, r3
    440a:	370c      	adds	r7, #12
    440c:	46bd      	mov	sp, r7
    440e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4412:	4770      	bx	lr

00004414 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    4414:	b580      	push	{r7, lr}
    4416:	b084      	sub	sp, #16
    4418:	af00      	add	r7, sp, #0
    441a:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    441c:	687b      	ldr	r3, [r7, #4]
    441e:	60fb      	str	r3, [r7, #12]

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    4420:	68fb      	ldr	r3, [r7, #12]
    4422:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    4424:	f240 2390 	movw	r3, #656	; 0x290
    4428:	f2c2 0300 	movt	r3, #8192	; 0x2000
    442c:	681b      	ldr	r3, [r3, #0]
    442e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4430:	429a      	cmp	r2, r3
    4432:	d249      	bcs.n	44c8 <vTaskPriorityInherit+0xb4>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    4434:	f240 2390 	movw	r3, #656	; 0x290
    4438:	f2c2 0300 	movt	r3, #8192	; 0x2000
    443c:	681b      	ldr	r3, [r3, #0]
    443e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4440:	f1c3 0214 	rsb	r2, r3, #20
    4444:	68fb      	ldr	r3, [r7, #12]
    4446:	625a      	str	r2, [r3, #36]	; 0x24

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    4448:	68fb      	ldr	r3, [r7, #12]
    444a:	6a1a      	ldr	r2, [r3, #32]
    444c:	68fb      	ldr	r3, [r7, #12]
    444e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4450:	0159      	lsls	r1, r3, #5
    4452:	f240 2394 	movw	r3, #660	; 0x294
    4456:	f2c2 0300 	movt	r3, #8192	; 0x2000
    445a:	440b      	add	r3, r1
    445c:	429a      	cmp	r2, r3
    445e:	d12b      	bne.n	44b8 <vTaskPriorityInherit+0xa4>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
    4460:	68fb      	ldr	r3, [r7, #12]
    4462:	3304      	adds	r3, #4
    4464:	4618      	mov	r0, r3
    4466:	f7fe facb 	bl	2a00 <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    446a:	f240 2390 	movw	r3, #656	; 0x290
    446e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4472:	681b      	ldr	r3, [r3, #0]
    4474:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    4476:	68fb      	ldr	r3, [r7, #12]
    4478:	645a      	str	r2, [r3, #68]	; 0x44
				prvAddTaskToReadyQueue( pxTCB );
    447a:	68fb      	ldr	r3, [r7, #12]
    447c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    447e:	f240 53d0 	movw	r3, #1488	; 0x5d0
    4482:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4486:	681b      	ldr	r3, [r3, #0]
    4488:	429a      	cmp	r2, r3
    448a:	d906      	bls.n	449a <vTaskPriorityInherit+0x86>
    448c:	68fb      	ldr	r3, [r7, #12]
    448e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    4490:	f240 53d0 	movw	r3, #1488	; 0x5d0
    4494:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4498:	601a      	str	r2, [r3, #0]
    449a:	68fb      	ldr	r3, [r7, #12]
    449c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    449e:	015a      	lsls	r2, r3, #5
    44a0:	f240 2394 	movw	r3, #660	; 0x294
    44a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    44a8:	441a      	add	r2, r3
    44aa:	68fb      	ldr	r3, [r7, #12]
    44ac:	3304      	adds	r3, #4
    44ae:	4610      	mov	r0, r2
    44b0:	4619      	mov	r1, r3
    44b2:	f7fe fa45 	bl	2940 <vListInsertEnd>
    44b6:	e007      	b.n	44c8 <vTaskPriorityInherit+0xb4>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    44b8:	f240 2390 	movw	r3, #656	; 0x290
    44bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    44c0:	681b      	ldr	r3, [r3, #0]
    44c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    44c4:	68fb      	ldr	r3, [r7, #12]
    44c6:	645a      	str	r2, [r3, #68]	; 0x44
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
    44c8:	3710      	adds	r7, #16
    44ca:	46bd      	mov	sp, r7
    44cc:	bd80      	pop	{r7, pc}
    44ce:	bf00      	nop

000044d0 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    44d0:	b580      	push	{r7, lr}
    44d2:	b084      	sub	sp, #16
    44d4:	af00      	add	r7, sp, #0
    44d6:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    44d8:	687b      	ldr	r3, [r7, #4]
    44da:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    44dc:	687b      	ldr	r3, [r7, #4]
    44de:	2b00      	cmp	r3, #0
    44e0:	d032      	beq.n	4548 <vTaskPriorityDisinherit+0x78>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    44e2:	68fb      	ldr	r3, [r7, #12]
    44e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    44e6:	68fb      	ldr	r3, [r7, #12]
    44e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    44ea:	429a      	cmp	r2, r3
    44ec:	d02c      	beq.n	4548 <vTaskPriorityDisinherit+0x78>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
    44ee:	68fb      	ldr	r3, [r7, #12]
    44f0:	3304      	adds	r3, #4
    44f2:	4618      	mov	r0, r3
    44f4:	f7fe fa84 	bl	2a00 <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    44f8:	68fb      	ldr	r3, [r7, #12]
    44fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    44fc:	68fb      	ldr	r3, [r7, #12]
    44fe:	645a      	str	r2, [r3, #68]	; 0x44
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    4500:	68fb      	ldr	r3, [r7, #12]
    4502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4504:	f1c3 0214 	rsb	r2, r3, #20
    4508:	68fb      	ldr	r3, [r7, #12]
    450a:	625a      	str	r2, [r3, #36]	; 0x24
				prvAddTaskToReadyQueue( pxTCB );
    450c:	68fb      	ldr	r3, [r7, #12]
    450e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    4510:	f240 53d0 	movw	r3, #1488	; 0x5d0
    4514:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4518:	681b      	ldr	r3, [r3, #0]
    451a:	429a      	cmp	r2, r3
    451c:	d906      	bls.n	452c <vTaskPriorityDisinherit+0x5c>
    451e:	68fb      	ldr	r3, [r7, #12]
    4520:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    4522:	f240 53d0 	movw	r3, #1488	; 0x5d0
    4526:	f2c2 0300 	movt	r3, #8192	; 0x2000
    452a:	601a      	str	r2, [r3, #0]
    452c:	68fb      	ldr	r3, [r7, #12]
    452e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4530:	015a      	lsls	r2, r3, #5
    4532:	f240 2394 	movw	r3, #660	; 0x294
    4536:	f2c2 0300 	movt	r3, #8192	; 0x2000
    453a:	441a      	add	r2, r3
    453c:	68fb      	ldr	r3, [r7, #12]
    453e:	3304      	adds	r3, #4
    4540:	4610      	mov	r0, r2
    4542:	4619      	mov	r1, r3
    4544:	f7fe f9fc 	bl	2940 <vListInsertEnd>
			}
		}
	}
    4548:	3710      	adds	r7, #16
    454a:	46bd      	mov	sp, r7
    454c:	bd80      	pop	{r7, pc}
    454e:	bf00      	nop

00004550 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    4550:	b480      	push	{r7}
    4552:	b085      	sub	sp, #20
    4554:	af00      	add	r7, sp, #0
    4556:	60f8      	str	r0, [r7, #12]
    4558:	60b9      	str	r1, [r7, #8]
    455a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    455c:	68fb      	ldr	r3, [r7, #12]
    455e:	3b04      	subs	r3, #4
    4560:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    4562:	68fb      	ldr	r3, [r7, #12]
    4564:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    4568:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    456a:	68fb      	ldr	r3, [r7, #12]
    456c:	3b04      	subs	r3, #4
    456e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
    4570:	68ba      	ldr	r2, [r7, #8]
    4572:	68fb      	ldr	r3, [r7, #12]
    4574:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    4576:	68fb      	ldr	r3, [r7, #12]
    4578:	3b04      	subs	r3, #4
    457a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
    457c:	68fb      	ldr	r3, [r7, #12]
    457e:	2200      	movs	r2, #0
    4580:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    4582:	68fb      	ldr	r3, [r7, #12]
    4584:	3b14      	subs	r3, #20
    4586:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
    4588:	687a      	ldr	r2, [r7, #4]
    458a:	68fb      	ldr	r3, [r7, #12]
    458c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
    458e:	68fb      	ldr	r3, [r7, #12]
    4590:	3b20      	subs	r3, #32
    4592:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    4594:	68fb      	ldr	r3, [r7, #12]
}
    4596:	4618      	mov	r0, r3
    4598:	3714      	adds	r7, #20
    459a:	46bd      	mov	sp, r7
    459c:	f85d 7b04 	ldr.w	r7, [sp], #4
    45a0:	4770      	bx	lr
    45a2:	bf00      	nop

000045a4 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    45a4:	4b06      	ldr	r3, [pc, #24]	; (45c0 <pxCurrentTCBConst2>)
    45a6:	6819      	ldr	r1, [r3, #0]
    45a8:	6808      	ldr	r0, [r1, #0]
    45aa:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    45ae:	f380 8809 	msr	PSP, r0
    45b2:	f04f 0000 	mov.w	r0, #0
    45b6:	f380 8811 	msr	BASEPRI, r0
    45ba:	f04e 0e0d 	orr.w	lr, lr, #13
    45be:	4770      	bx	lr

000045c0 <pxCurrentTCBConst2>:
    45c0:	20000290 	.word	0x20000290

000045c4 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
    45c4:	485d      	ldr	r0, [pc, #372]	; (473c <prvSetupTimerInterrupt+0x2c>)
    45c6:	6800      	ldr	r0, [r0, #0]
    45c8:	6800      	ldr	r0, [r0, #0]
    45ca:	f380 8808 	msr	MSP, r0
    45ce:	b662      	cpsie	i
    45d0:	df00      	svc	0
    45d2:	bf00      	nop

000045d4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
    45d4:	b580      	push	{r7, lr}
    45d6:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    45d8:	f64e 5320 	movw	r3, #60704	; 0xed20
    45dc:	f2ce 0300 	movt	r3, #57344	; 0xe000
    45e0:	f64e 5220 	movw	r2, #60704	; 0xed20
    45e4:	f2ce 0200 	movt	r2, #57344	; 0xe000
    45e8:	6812      	ldr	r2, [r2, #0]
    45ea:	f442 02fe 	orr.w	r2, r2, #8323072	; 0x7f0000
    45ee:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    45f0:	f64e 5320 	movw	r3, #60704	; 0xed20
    45f4:	f2ce 0300 	movt	r3, #57344	; 0xe000
    45f8:	f64e 5220 	movw	r2, #60704	; 0xed20
    45fc:	f2ce 0200 	movt	r2, #57344	; 0xe000
    4600:	6812      	ldr	r2, [r2, #0]
    4602:	f042 42fe 	orr.w	r2, r2, #2130706432	; 0x7f000000
    4606:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    4608:	f000 f882 	bl	4710 <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    460c:	f240 03fc 	movw	r3, #252	; 0xfc
    4610:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4614:	2200      	movs	r2, #0
    4616:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
    4618:	f7ff ffd4 	bl	45c4 <prvPortStartFirstTask>

	/* Should not get here! */
	return 0;
    461c:	2300      	movs	r3, #0
}
    461e:	4618      	mov	r0, r3
    4620:	bd80      	pop	{r7, pc}
    4622:	bf00      	nop

00004624 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    4624:	b480      	push	{r7}
    4626:	af00      	add	r7, sp, #0
	/* It is unlikely that the CM3 port will require this function as there
	is nothing to return to.  */
}
    4628:	46bd      	mov	sp, r7
    462a:	f85d 7b04 	ldr.w	r7, [sp], #4
    462e:	4770      	bx	lr

00004630 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
    4630:	b480      	push	{r7}
    4632:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    4634:	f64e 5304 	movw	r3, #60676	; 0xed04
    4638:	f2ce 0300 	movt	r3, #57344	; 0xe000
    463c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4640:	601a      	str	r2, [r3, #0]
}
    4642:	46bd      	mov	sp, r7
    4644:	f85d 7b04 	ldr.w	r7, [sp], #4
    4648:	4770      	bx	lr
    464a:	bf00      	nop

0000464c <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    464c:	b480      	push	{r7}
    464e:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
    4650:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4654:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
    4658:	f240 03fc 	movw	r3, #252	; 0xfc
    465c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4660:	681b      	ldr	r3, [r3, #0]
    4662:	1c5a      	adds	r2, r3, #1
    4664:	f240 03fc 	movw	r3, #252	; 0xfc
    4668:	f2c2 0300 	movt	r3, #8192	; 0x2000
    466c:	601a      	str	r2, [r3, #0]
}
    466e:	46bd      	mov	sp, r7
    4670:	f85d 7b04 	ldr.w	r7, [sp], #4
    4674:	4770      	bx	lr
    4676:	bf00      	nop

00004678 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    4678:	b480      	push	{r7}
    467a:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
    467c:	f240 03fc 	movw	r3, #252	; 0xfc
    4680:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4684:	681b      	ldr	r3, [r3, #0]
    4686:	1e5a      	subs	r2, r3, #1
    4688:	f240 03fc 	movw	r3, #252	; 0xfc
    468c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4690:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
    4692:	f240 03fc 	movw	r3, #252	; 0xfc
    4696:	f2c2 0300 	movt	r3, #8192	; 0x2000
    469a:	681b      	ldr	r3, [r3, #0]
    469c:	2b00      	cmp	r3, #0
    469e:	d103      	bne.n	46a8 <vPortExitCritical+0x30>
	{
		portENABLE_INTERRUPTS();
    46a0:	f04f 0000 	mov.w	r0, #0
    46a4:	f380 8811 	msr	BASEPRI, r0
	}
}
    46a8:	46bd      	mov	sp, r7
    46aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    46ae:	4770      	bx	lr

000046b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    46b0:	f3ef 8009 	mrs	r0, PSP
    46b4:	4b0c      	ldr	r3, [pc, #48]	; (46e8 <pxCurrentTCBConst>)
    46b6:	681a      	ldr	r2, [r3, #0]
    46b8:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    46bc:	6010      	str	r0, [r2, #0]
    46be:	e92d 4008 	stmdb	sp!, {r3, lr}
    46c2:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    46c6:	f380 8811 	msr	BASEPRI, r0
    46ca:	f7ff fbe7 	bl	3e9c <vTaskSwitchContext>
    46ce:	f04f 0000 	mov.w	r0, #0
    46d2:	f380 8811 	msr	BASEPRI, r0
    46d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    46da:	6819      	ldr	r1, [r3, #0]
    46dc:	6808      	ldr	r0, [r1, #0]
    46de:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    46e2:	f380 8809 	msr	PSP, r0
    46e6:	4770      	bx	lr

000046e8 <pxCurrentTCBConst>:
    46e8:	20000290 	.word	0x20000290

000046ec <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    46ec:	b580      	push	{r7, lr}
    46ee:	b082      	sub	sp, #8
    46f0:	af00      	add	r7, sp, #0
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
    46f2:	2300      	movs	r3, #0
    46f4:	607b      	str	r3, [r7, #4]
    46f6:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    46fa:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
    46fe:	f7ff faf3 	bl	3ce8 <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
    4702:	f04f 0000 	mov.w	r0, #0
    4706:	f380 8811 	msr	BASEPRI, r0
}
    470a:	3708      	adds	r7, #8
    470c:	46bd      	mov	sp, r7
    470e:	bd80      	pop	{r7, pc}

00004710 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    4710:	b480      	push	{r7}
    4712:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    4714:	f24e 0314 	movw	r3, #57364	; 0xe014
    4718:	f2ce 0300 	movt	r3, #57344	; 0xe000
    471c:	f641 123f 	movw	r2, #6463	; 0x193f
    4720:	f2c0 0201 	movt	r2, #1
    4724:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    4726:	f24e 0310 	movw	r3, #57360	; 0xe010
    472a:	f2ce 0300 	movt	r3, #57344	; 0xe000
    472e:	2207      	movs	r2, #7
    4730:	601a      	str	r2, [r3, #0]
}
    4732:	46bd      	mov	sp, r7
    4734:	f85d 7b04 	ldr.w	r7, [sp], #4
    4738:	4770      	bx	lr
    473a:	0000      	.short	0x0000
    473c:	e000ed08 	.word	0xe000ed08

00004740 <pvPortMalloc>:
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;										\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    4740:	b580      	push	{r7, lr}
    4742:	b08a      	sub	sp, #40	; 0x28
    4744:	af00      	add	r7, sp, #0
    4746:	6078      	str	r0, [r7, #4]
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
    4748:	2300      	movs	r3, #0
    474a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
    474c:	f7ff f9ba 	bl	3ac4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    4750:	f24b 6300 	movw	r3, #46592	; 0xb600
    4754:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4758:	681b      	ldr	r3, [r3, #0]
    475a:	2b00      	cmp	r3, #0
    475c:	d130      	bne.n	47c0 <pvPortMalloc+0x80>
		{
			prvHeapInit();
    475e:	f24b 53f0 	movw	r3, #46576	; 0xb5f0
    4762:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4766:	f240 52f0 	movw	r2, #1520	; 0x5f0
    476a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    476e:	601a      	str	r2, [r3, #0]
    4770:	f24b 53f0 	movw	r3, #46576	; 0xb5f0
    4774:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4778:	2200      	movs	r2, #0
    477a:	605a      	str	r2, [r3, #4]
    477c:	f24b 53f8 	movw	r3, #46584	; 0xb5f8
    4780:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4784:	f44f 2296 	mov.w	r2, #307200	; 0x4b000
    4788:	605a      	str	r2, [r3, #4]
    478a:	f24b 53f8 	movw	r3, #46584	; 0xb5f8
    478e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4792:	2200      	movs	r2, #0
    4794:	601a      	str	r2, [r3, #0]
    4796:	f240 53f0 	movw	r3, #1520	; 0x5f0
    479a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    479e:	617b      	str	r3, [r7, #20]
    47a0:	697b      	ldr	r3, [r7, #20]
    47a2:	f44f 2296 	mov.w	r2, #307200	; 0x4b000
    47a6:	605a      	str	r2, [r3, #4]
    47a8:	697a      	ldr	r2, [r7, #20]
    47aa:	f24b 53f8 	movw	r3, #46584	; 0xb5f8
    47ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    47b2:	6013      	str	r3, [r2, #0]
			xHeapHasBeenInitialised = pdTRUE;
    47b4:	f24b 6300 	movw	r3, #46592	; 0xb600
    47b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    47bc:	2201      	movs	r2, #1
    47be:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    47c0:	687b      	ldr	r3, [r7, #4]
    47c2:	2b00      	cmp	r3, #0
    47c4:	d00d      	beq.n	47e2 <pvPortMalloc+0xa2>
		{
			xWantedSize += heapSTRUCT_SIZE;
    47c6:	2310      	movs	r3, #16
    47c8:	687a      	ldr	r2, [r7, #4]
    47ca:	4413      	add	r3, r2
    47cc:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    47ce:	687b      	ldr	r3, [r7, #4]
    47d0:	f003 0307 	and.w	r3, r3, #7
    47d4:	2b00      	cmp	r3, #0
    47d6:	d004      	beq.n	47e2 <pvPortMalloc+0xa2>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    47d8:	687b      	ldr	r3, [r7, #4]
    47da:	f023 0307 	bic.w	r3, r3, #7
    47de:	3308      	adds	r3, #8
    47e0:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
    47e2:	687b      	ldr	r3, [r7, #4]
    47e4:	2b00      	cmp	r3, #0
    47e6:	d068      	beq.n	48ba <pvPortMalloc+0x17a>
    47e8:	687b      	ldr	r3, [r7, #4]
    47ea:	f5b3 2f96 	cmp.w	r3, #307200	; 0x4b000
    47ee:	d264      	bcs.n	48ba <pvPortMalloc+0x17a>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
    47f0:	f24b 53f0 	movw	r3, #46576	; 0xb5f0
    47f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    47f8:	623b      	str	r3, [r7, #32]
			pxBlock = xStart.pxNextFreeBlock;
    47fa:	f24b 53f0 	movw	r3, #46576	; 0xb5f0
    47fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4802:	681b      	ldr	r3, [r3, #0]
    4804:	627b      	str	r3, [r7, #36]	; 0x24
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    4806:	e004      	b.n	4812 <pvPortMalloc+0xd2>
			{
				pxPreviousBlock = pxBlock;
    4808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    480a:	623b      	str	r3, [r7, #32]
				pxBlock = pxBlock->pxNextFreeBlock;
    480c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    480e:	681b      	ldr	r3, [r3, #0]
    4810:	627b      	str	r3, [r7, #36]	; 0x24
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    4812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4814:	685a      	ldr	r2, [r3, #4]
    4816:	687b      	ldr	r3, [r7, #4]
    4818:	429a      	cmp	r2, r3
    481a:	d203      	bcs.n	4824 <pvPortMalloc+0xe4>
    481c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    481e:	681b      	ldr	r3, [r3, #0]
    4820:	2b00      	cmp	r3, #0
    4822:	d1f1      	bne.n	4808 <pvPortMalloc+0xc8>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
    4824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4826:	f24b 53f8 	movw	r3, #46584	; 0xb5f8
    482a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    482e:	429a      	cmp	r2, r3
    4830:	d043      	beq.n	48ba <pvPortMalloc+0x17a>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    4832:	6a3b      	ldr	r3, [r7, #32]
    4834:	681a      	ldr	r2, [r3, #0]
    4836:	2310      	movs	r3, #16
    4838:	4413      	add	r3, r2
    483a:	61fb      	str	r3, [r7, #28]

				/* This block is being returned for use so must be taken our of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    483c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    483e:	681a      	ldr	r2, [r3, #0]
    4840:	6a3b      	ldr	r3, [r7, #32]
    4842:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    4844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4846:	685a      	ldr	r2, [r3, #4]
    4848:	687b      	ldr	r3, [r7, #4]
    484a:	1ad2      	subs	r2, r2, r3
    484c:	2310      	movs	r3, #16
    484e:	005b      	lsls	r3, r3, #1
    4850:	429a      	cmp	r2, r3
    4852:	d925      	bls.n	48a0 <pvPortMalloc+0x160>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
    4854:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4856:	687b      	ldr	r3, [r7, #4]
    4858:	4413      	add	r3, r2
    485a:	613b      	str	r3, [r7, #16]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    485c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    485e:	685a      	ldr	r2, [r3, #4]
    4860:	687b      	ldr	r3, [r7, #4]
    4862:	1ad2      	subs	r2, r2, r3
    4864:	693b      	ldr	r3, [r7, #16]
    4866:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
    4868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    486a:	687a      	ldr	r2, [r7, #4]
    486c:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    486e:	693b      	ldr	r3, [r7, #16]
    4870:	685b      	ldr	r3, [r3, #4]
    4872:	60fb      	str	r3, [r7, #12]
    4874:	f24b 53f0 	movw	r3, #46576	; 0xb5f0
    4878:	f2c2 0304 	movt	r3, #8196	; 0x2004
    487c:	61bb      	str	r3, [r7, #24]
    487e:	e002      	b.n	4886 <pvPortMalloc+0x146>
    4880:	69bb      	ldr	r3, [r7, #24]
    4882:	681b      	ldr	r3, [r3, #0]
    4884:	61bb      	str	r3, [r7, #24]
    4886:	69bb      	ldr	r3, [r7, #24]
    4888:	681b      	ldr	r3, [r3, #0]
    488a:	685a      	ldr	r2, [r3, #4]
    488c:	68fb      	ldr	r3, [r7, #12]
    488e:	429a      	cmp	r2, r3
    4890:	d3f6      	bcc.n	4880 <pvPortMalloc+0x140>
    4892:	69bb      	ldr	r3, [r7, #24]
    4894:	681a      	ldr	r2, [r3, #0]
    4896:	693b      	ldr	r3, [r7, #16]
    4898:	601a      	str	r2, [r3, #0]
    489a:	69bb      	ldr	r3, [r7, #24]
    489c:	693a      	ldr	r2, [r7, #16]
    489e:	601a      	str	r2, [r3, #0]
				}
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
    48a0:	f240 1300 	movw	r3, #256	; 0x100
    48a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    48a8:	681a      	ldr	r2, [r3, #0]
    48aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    48ac:	685b      	ldr	r3, [r3, #4]
    48ae:	1ad2      	subs	r2, r2, r3
    48b0:	f240 1300 	movw	r3, #256	; 0x100
    48b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    48b8:	601a      	str	r2, [r3, #0]
			}
		}
	}
	xTaskResumeAll();
    48ba:	f7ff f915 	bl	3ae8 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    48be:	69fb      	ldr	r3, [r7, #28]
}
    48c0:	4618      	mov	r0, r3
    48c2:	3728      	adds	r7, #40	; 0x28
    48c4:	46bd      	mov	sp, r7
    48c6:	bd80      	pop	{r7, pc}

000048c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    48c8:	b580      	push	{r7, lr}
    48ca:	b086      	sub	sp, #24
    48cc:	af00      	add	r7, sp, #0
    48ce:	6078      	str	r0, [r7, #4]
unsigned char *puc = ( unsigned char * ) pv;
    48d0:	687b      	ldr	r3, [r7, #4]
    48d2:	613b      	str	r3, [r7, #16]
xBlockLink *pxLink;

	if( pv )
    48d4:	687b      	ldr	r3, [r7, #4]
    48d6:	2b00      	cmp	r3, #0
    48d8:	d030      	beq.n	493c <vPortFree+0x74>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
    48da:	2310      	movs	r3, #16
    48dc:	425b      	negs	r3, r3
    48de:	693a      	ldr	r2, [r7, #16]
    48e0:	4413      	add	r3, r2
    48e2:	613b      	str	r3, [r7, #16]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
    48e4:	693b      	ldr	r3, [r7, #16]
    48e6:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
    48e8:	f7ff f8ec 	bl	3ac4 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
    48ec:	68fb      	ldr	r3, [r7, #12]
    48ee:	685b      	ldr	r3, [r3, #4]
    48f0:	60bb      	str	r3, [r7, #8]
    48f2:	f24b 53f0 	movw	r3, #46576	; 0xb5f0
    48f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    48fa:	617b      	str	r3, [r7, #20]
    48fc:	e002      	b.n	4904 <vPortFree+0x3c>
    48fe:	697b      	ldr	r3, [r7, #20]
    4900:	681b      	ldr	r3, [r3, #0]
    4902:	617b      	str	r3, [r7, #20]
    4904:	697b      	ldr	r3, [r7, #20]
    4906:	681b      	ldr	r3, [r3, #0]
    4908:	685a      	ldr	r2, [r3, #4]
    490a:	68bb      	ldr	r3, [r7, #8]
    490c:	429a      	cmp	r2, r3
    490e:	d3f6      	bcc.n	48fe <vPortFree+0x36>
    4910:	697b      	ldr	r3, [r7, #20]
    4912:	681a      	ldr	r2, [r3, #0]
    4914:	68fb      	ldr	r3, [r7, #12]
    4916:	601a      	str	r2, [r3, #0]
    4918:	697b      	ldr	r3, [r7, #20]
    491a:	68fa      	ldr	r2, [r7, #12]
    491c:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
    491e:	68fb      	ldr	r3, [r7, #12]
    4920:	685a      	ldr	r2, [r3, #4]
    4922:	f240 1300 	movw	r3, #256	; 0x100
    4926:	f2c2 0300 	movt	r3, #8192	; 0x2000
    492a:	681b      	ldr	r3, [r3, #0]
    492c:	441a      	add	r2, r3
    492e:	f240 1300 	movw	r3, #256	; 0x100
    4932:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4936:	601a      	str	r2, [r3, #0]
		}
		xTaskResumeAll();
    4938:	f7ff f8d6 	bl	3ae8 <xTaskResumeAll>
	}
}
    493c:	3718      	adds	r7, #24
    493e:	46bd      	mov	sp, r7
    4940:	bd80      	pop	{r7, pc}
    4942:	bf00      	nop

00004944 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    4944:	b480      	push	{r7}
    4946:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
    4948:	f240 1300 	movw	r3, #256	; 0x100
    494c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4950:	681b      	ldr	r3, [r3, #0]
}
    4952:	4618      	mov	r0, r3
    4954:	46bd      	mov	sp, r7
    4956:	f85d 7b04 	ldr.w	r7, [sp], #4
    495a:	4770      	bx	lr

0000495c <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    495c:	b480      	push	{r7}
    495e:	af00      	add	r7, sp, #0
	/* This just exists to keep the linker quiet. */
}
    4960:	46bd      	mov	sp, r7
    4962:	f85d 7b04 	ldr.w	r7, [sp], #4
    4966:	4770      	bx	lr

00004968 <ground_calibrate>:
 * set to auto1 before MAX_DELAY_FOR_CALIBRATION secondes */
/**User must put verticaly the uav (nose bottom) and push
 * radio roll stick to get new calibration
 * If not, the default calibration is used.
 */
inline void ground_calibrate( void ) {
    4968:	b580      	push	{r7, lr}
    496a:	af00      	add	r7, sp, #0
    break;
  case CALIB_DONE:
    break;
  }
#else*/
if(calib_status == NO_CALIB)
    496c:	f24b 6322 	movw	r3, #46626	; 0xb622
    4970:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4974:	781b      	ldrb	r3, [r3, #0]
    4976:	2b00      	cmp	r3, #0
    4978:	d114      	bne.n	49a4 <ground_calibrate+0x3c>
{
    if (cputime < MAX_DELAY_FOR_CALIBRATION && pprz_mode == PPRZ_MODE_AUTO1 ) {
    497a:	f24b 630a 	movw	r3, #46602	; 0xb60a
    497e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4982:	881b      	ldrh	r3, [r3, #0]
    4984:	2b09      	cmp	r3, #9
    4986:	d838      	bhi.n	49fa <ground_calibrate+0x92>
    4988:	f24b 630c 	movw	r3, #46604	; 0xb60c
    498c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4990:	781b      	ldrb	r3, [r3, #0]
    4992:	2b01      	cmp	r3, #1
    4994:	d131      	bne.n	49fa <ground_calibrate+0x92>
      calib_status = WAITING_CALIB_CONTRAST;
    4996:	f24b 6322 	movw	r3, #46626	; 0xb622
    499a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    499e:	2201      	movs	r2, #1
    49a0:	701a      	strb	r2, [r3, #0]
    49a2:	e02a      	b.n	49fa <ground_calibrate+0x92>
      //DOWNLINK_SEND_CALIB_START();
    }
}
else if (calib_status == WAITING_CALIB_CONTRAST)
    49a4:	f24b 6322 	movw	r3, #46626	; 0xb622
    49a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    49ac:	781b      	ldrb	r3, [r3, #0]
    49ae:	2b01      	cmp	r3, #1
    49b0:	d123      	bne.n	49fa <ground_calibrate+0x92>
{
    if (STICK_PUSHED(from_fbw.channels[RADIO_ROLL])) {
    49b2:	f24b 7330 	movw	r3, #46896	; 0xb730
    49b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    49ba:	885b      	ldrh	r3, [r3, #2]
    49bc:	b21b      	sxth	r3, r3
    49be:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
    49c2:	db08      	blt.n	49d6 <ground_calibrate+0x6e>
    49c4:	f24b 7330 	movw	r3, #46896	; 0xb730
    49c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    49cc:	885b      	ldrh	r3, [r3, #2]
    49ce:	b21b      	sxth	r3, r3
    49d0:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    49d4:	dd11      	ble.n	49fa <ground_calibrate+0x92>
      ir_gain_calib();
    49d6:	f008 f913 	bl	cc00 <ir_gain_calib>
      estimator_rad_of_ir = ir_rad_of_ir;
    49da:	f240 1310 	movw	r3, #272	; 0x110
    49de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49e2:	681a      	ldr	r2, [r3, #0]
    49e4:	f64b 431c 	movw	r3, #48156	; 0xbc1c
    49e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    49ec:	601a      	str	r2, [r3, #0]
      //DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
      calib_status = CALIB_DONE;
    49ee:	f24b 6322 	movw	r3, #46626	; 0xb622
    49f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    49f6:	2202      	movs	r2, #2
    49f8:	701a      	strb	r2, [r3, #0]
    }
}
else {}

//#endif
}
    49fa:	bd80      	pop	{r7, pc}

000049fc <pprz_mode_update>:

/** \fn inline uint8_t pprz_mode_update( void )
 *  \brief Update paparazzi mode
 */
inline uint8_t pprz_mode_update( void ) {
    49fc:	b480      	push	{r7}
    49fe:	b083      	sub	sp, #12
    4a00:	af00      	add	r7, sp, #0
  /** We remain in home mode until explicit reset from the RC */
  if (pprz_mode != PPRZ_MODE_HOME || CheckEvent(rc_event_1)) {
    4a02:	f24b 630c 	movw	r3, #46604	; 0xb60c
    4a06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4a0a:	781b      	ldrb	r3, [r3, #0]
    4a0c:	2b03      	cmp	r3, #3
    4a0e:	d10c      	bne.n	4a2a <pprz_mode_update+0x2e>
    4a10:	f24b 6310 	movw	r3, #46608	; 0xb610
    4a14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4a18:	781b      	ldrb	r3, [r3, #0]
    4a1a:	2b00      	cmp	r3, #0
    4a1c:	d032      	beq.n	4a84 <pprz_mode_update+0x88>
    4a1e:	f24b 6310 	movw	r3, #46608	; 0xb610
    4a22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4a26:	2200      	movs	r2, #0
    4a28:	701a      	strb	r2, [r3, #0]
    ModeUpdate(pprz_mode, PPRZ_MODE_OF_PULSE(from_fbw.channels[RADIO_MODE], from_fbw.status));
    4a2a:	f24b 7330 	movw	r3, #46896	; 0xb730
    4a2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4a32:	891b      	ldrh	r3, [r3, #8]
    4a34:	b21b      	sxth	r3, r3
    4a36:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    4a3a:	dc0f      	bgt.n	4a5c <pprz_mode_update+0x60>
    4a3c:	f24b 7330 	movw	r3, #46896	; 0xb730
    4a40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4a44:	891b      	ldrh	r3, [r3, #8]
    4a46:	b21a      	sxth	r2, r3
    4a48:	f64e 5341 	movw	r3, #60737	; 0xed41
    4a4c:	f6cf 73ff 	movt	r3, #65535	; 0xffff
    4a50:	429a      	cmp	r2, r3
    4a52:	bfb4      	ite	lt
    4a54:	2300      	movlt	r3, #0
    4a56:	2301      	movge	r3, #1
    4a58:	b2db      	uxtb	r3, r3
    4a5a:	e000      	b.n	4a5e <pprz_mode_update+0x62>
    4a5c:	2302      	movs	r3, #2
    4a5e:	71fb      	strb	r3, [r7, #7]
    4a60:	f24b 630c 	movw	r3, #46604	; 0xb60c
    4a64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4a68:	781b      	ldrb	r3, [r3, #0]
    4a6a:	79fa      	ldrb	r2, [r7, #7]
    4a6c:	429a      	cmp	r2, r3
    4a6e:	d007      	beq.n	4a80 <pprz_mode_update+0x84>
    4a70:	f24b 630c 	movw	r3, #46604	; 0xb60c
    4a74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4a78:	79fa      	ldrb	r2, [r7, #7]
    4a7a:	701a      	strb	r2, [r3, #0]
    4a7c:	2301      	movs	r3, #1
    4a7e:	e002      	b.n	4a86 <pprz_mode_update+0x8a>
    4a80:	2300      	movs	r3, #0
    4a82:	e000      	b.n	4a86 <pprz_mode_update+0x8a>
  } else
    return FALSE;
    4a84:	2300      	movs	r3, #0
}
    4a86:	4618      	mov	r0, r3
    4a88:	370c      	adds	r7, #12
    4a8a:	46bd      	mov	sp, r7
    4a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a90:	4770      	bx	lr
    4a92:	bf00      	nop

00004a94 <ir_estim_mode_update>:

#ifdef RADIO_LLS
/** \fn inline uint8_t ir_estim_mode_update( void )
 *  \brief update ir estimation if RADIO_LLS is true \n
 */
inline uint8_t ir_estim_mode_update( void ) {
    4a94:	b480      	push	{r7}
    4a96:	b083      	sub	sp, #12
    4a98:	af00      	add	r7, sp, #0
  ModeUpdate(ir_estim_mode, IR_ESTIM_MODE_OF_PULSE(from_fbw.channels[RADIO_LLS]));
    4a9a:	f24b 7330 	movw	r3, #46896	; 0xb730
    4a9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4aa2:	89db      	ldrh	r3, [r3, #14]
    4aa4:	b21a      	sxth	r2, r3
    4aa6:	f640 437f 	movw	r3, #3199	; 0xc7f
    4aaa:	429a      	cmp	r2, r3
    4aac:	bfd4      	ite	le
    4aae:	2300      	movle	r3, #0
    4ab0:	2301      	movgt	r3, #1
    4ab2:	b2db      	uxtb	r3, r3
    4ab4:	71fb      	strb	r3, [r7, #7]
    4ab6:	f240 1304 	movw	r3, #260	; 0x104
    4aba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4abe:	781b      	ldrb	r3, [r3, #0]
    4ac0:	79fa      	ldrb	r2, [r7, #7]
    4ac2:	429a      	cmp	r2, r3
    4ac4:	d007      	beq.n	4ad6 <ir_estim_mode_update+0x42>
    4ac6:	f240 1304 	movw	r3, #260	; 0x104
    4aca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ace:	79fa      	ldrb	r2, [r7, #7]
    4ad0:	701a      	strb	r2, [r3, #0]
    4ad2:	2301      	movs	r3, #1
    4ad4:	e000      	b.n	4ad8 <ir_estim_mode_update+0x44>
    4ad6:	2300      	movs	r3, #0
}
    4ad8:	4618      	mov	r0, r3
    4ada:	370c      	adds	r7, #12
    4adc:	46bd      	mov	sp, r7
    4ade:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ae2:	4770      	bx	lr

00004ae4 <mcu1_status_update>:


/** \fn inline uint8_t mcu1_status_update( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
inline uint8_t mcu1_status_update( void ) {
    4ae4:	b480      	push	{r7}
    4ae6:	b083      	sub	sp, #12
    4ae8:	af00      	add	r7, sp, #0
  uint8_t new_mode = from_fbw.status;
    4aea:	f24b 7330 	movw	r3, #46896	; 0xb730
    4aee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4af2:	7cdb      	ldrb	r3, [r3, #19]
    4af4:	71fb      	strb	r3, [r7, #7]
  if (mcu1_status != new_mode) {
    4af6:	f24b 6313 	movw	r3, #46611	; 0xb613
    4afa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4afe:	781b      	ldrb	r3, [r3, #0]
    4b00:	79fa      	ldrb	r2, [r7, #7]
    4b02:	429a      	cmp	r2, r3
    4b04:	d017      	beq.n	4b36 <mcu1_status_update+0x52>
    bool_t changed = ((mcu1_status&MASK_FBW_CHANGED) != (new_mode&MASK_FBW_CHANGED));
    4b06:	f24b 6313 	movw	r3, #46611	; 0xb613
    4b0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4b0e:	781b      	ldrb	r3, [r3, #0]
    4b10:	461a      	mov	r2, r3
    4b12:	79fb      	ldrb	r3, [r7, #7]
    4b14:	4053      	eors	r3, r2
    4b16:	f003 0303 	and.w	r3, r3, #3
    4b1a:	2b00      	cmp	r3, #0
    4b1c:	bf0c      	ite	eq
    4b1e:	2300      	moveq	r3, #0
    4b20:	2301      	movne	r3, #1
    4b22:	b2db      	uxtb	r3, r3
    4b24:	71bb      	strb	r3, [r7, #6]
    mcu1_status = new_mode;
    4b26:	f24b 6313 	movw	r3, #46611	; 0xb613
    4b2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4b2e:	79fa      	ldrb	r2, [r7, #7]
    4b30:	701a      	strb	r2, [r3, #0]
    return changed;
    4b32:	79bb      	ldrb	r3, [r7, #6]
    4b34:	e000      	b.n	4b38 <mcu1_status_update+0x54>
  }
  return FALSE;
    4b36:	2300      	movs	r3, #0
}
    4b38:	4618      	mov	r0, r3
    4b3a:	370c      	adds	r7, #12
    4b3c:	46bd      	mov	sp, r7
    4b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b42:	4770      	bx	lr

00004b44 <events_update>:
 EventUpdate(_cpt, (inflight_calib_mode==IF_CALIB_MODE_NONE && from_fbw.channels[_channel]<(int)(-0.75*MAX_PPRZ)), _event)

/** \fn static inline void events_update( void )
 *  @@@@@ A FIXER @@@@@
 */
static inline void events_update( void ) {
    4b44:	b480      	push	{r7}
    4b46:	af00      	add	r7, sp, #0
  static uint16_t event1_cpt = 0;
  static uint16_t event2_cpt = 0;
  EventPos(event1_cpt, RADIO_GAIN1, rc_event_1);
    4b48:	f64b 433c 	movw	r3, #48188	; 0xbc3c
    4b4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4b50:	781b      	ldrb	r3, [r3, #0]
    4b52:	2b00      	cmp	r3, #0
    4b54:	d12a      	bne.n	4bac <events_update+0x68>
    4b56:	f24b 7330 	movw	r3, #46896	; 0xb730
    4b5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4b5e:	895b      	ldrh	r3, [r3, #10]
    4b60:	b21b      	sxth	r3, r3
    4b62:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
    4b66:	dd21      	ble.n	4bac <events_update+0x68>
    4b68:	f24b 6324 	movw	r3, #46628	; 0xb624
    4b6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4b70:	881b      	ldrh	r3, [r3, #0]
    4b72:	2b13      	cmp	r3, #19
    4b74:	d819      	bhi.n	4baa <events_update+0x66>
    4b76:	f24b 6324 	movw	r3, #46628	; 0xb624
    4b7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4b7e:	881b      	ldrh	r3, [r3, #0]
    4b80:	3301      	adds	r3, #1
    4b82:	b29a      	uxth	r2, r3
    4b84:	f24b 6324 	movw	r3, #46628	; 0xb624
    4b88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4b8c:	801a      	strh	r2, [r3, #0]
    4b8e:	f24b 6324 	movw	r3, #46628	; 0xb624
    4b92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4b96:	881b      	ldrh	r3, [r3, #0]
    4b98:	2b14      	cmp	r3, #20
    4b9a:	d106      	bne.n	4baa <events_update+0x66>
    4b9c:	f24b 6310 	movw	r3, #46608	; 0xb610
    4ba0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4ba4:	2201      	movs	r2, #1
    4ba6:	701a      	strb	r2, [r3, #0]
    4ba8:	e00c      	b.n	4bc4 <events_update+0x80>
    4baa:	e00b      	b.n	4bc4 <events_update+0x80>
    4bac:	f24b 6324 	movw	r3, #46628	; 0xb624
    4bb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4bb4:	2200      	movs	r2, #0
    4bb6:	801a      	strh	r2, [r3, #0]
    4bb8:	f24b 6310 	movw	r3, #46608	; 0xb610
    4bbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4bc0:	2200      	movs	r2, #0
    4bc2:	701a      	strb	r2, [r3, #0]
  EventNeg(event2_cpt, RADIO_GAIN1, rc_event_2);
    4bc4:	f64b 433c 	movw	r3, #48188	; 0xbc3c
    4bc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4bcc:	781b      	ldrb	r3, [r3, #0]
    4bce:	2b00      	cmp	r3, #0
    4bd0:	d12a      	bne.n	4c28 <events_update+0xe4>
    4bd2:	f24b 7330 	movw	r3, #46896	; 0xb730
    4bd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4bda:	895b      	ldrh	r3, [r3, #10]
    4bdc:	b21b      	sxth	r3, r3
    4bde:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
    4be2:	da21      	bge.n	4c28 <events_update+0xe4>
    4be4:	f24b 6326 	movw	r3, #46630	; 0xb626
    4be8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4bec:	881b      	ldrh	r3, [r3, #0]
    4bee:	2b13      	cmp	r3, #19
    4bf0:	d819      	bhi.n	4c26 <events_update+0xe2>
    4bf2:	f24b 6326 	movw	r3, #46630	; 0xb626
    4bf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4bfa:	881b      	ldrh	r3, [r3, #0]
    4bfc:	3301      	adds	r3, #1
    4bfe:	b29a      	uxth	r2, r3
    4c00:	f24b 6326 	movw	r3, #46630	; 0xb626
    4c04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4c08:	801a      	strh	r2, [r3, #0]
    4c0a:	f24b 6326 	movw	r3, #46630	; 0xb626
    4c0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4c12:	881b      	ldrh	r3, [r3, #0]
    4c14:	2b14      	cmp	r3, #20
    4c16:	d106      	bne.n	4c26 <events_update+0xe2>
    4c18:	f24b 6311 	movw	r3, #46609	; 0xb611
    4c1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4c20:	2201      	movs	r2, #1
    4c22:	701a      	strb	r2, [r3, #0]
    4c24:	e00c      	b.n	4c40 <events_update+0xfc>
    4c26:	e00b      	b.n	4c40 <events_update+0xfc>
    4c28:	f24b 6326 	movw	r3, #46630	; 0xb626
    4c2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4c30:	2200      	movs	r2, #0
    4c32:	801a      	strh	r2, [r3, #0]
    4c34:	f24b 6311 	movw	r3, #46609	; 0xb611
    4c38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4c3c:	2200      	movs	r2, #0
    4c3e:	701a      	strb	r2, [r3, #0]
}  
    4c40:	46bd      	mov	sp, r7
    4c42:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c46:	4770      	bx	lr

00004c48 <copy_from_to_fbw>:


/** \fn inline void copy_from_to_fbw ( void )
 *  \brief Send back uncontrolled channels (only rudder)
 */
inline void copy_from_to_fbw ( void ) {
    4c48:	b480      	push	{r7}
    4c4a:	af00      	add	r7, sp, #0
  to_fbw.channels[RADIO_YAW] = from_fbw.channels[RADIO_YAW];
    4c4c:	f24b 7330 	movw	r3, #46896	; 0xb730
    4c50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4c54:	88da      	ldrh	r2, [r3, #6]
    4c56:	f24b 7348 	movw	r3, #46920	; 0xb748
    4c5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4c5e:	80da      	strh	r2, [r3, #6]
#ifdef ANTON_T7
  to_fbw.channels[RADIO_PITCH] = from_fbw.channels[RADIO_PITCH];
#endif
  to_fbw.status = 0;
    4c60:	f24b 7348 	movw	r3, #46920	; 0xb748
    4c64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4c68:	2200      	movs	r2, #0
    4c6a:	74da      	strb	r2, [r3, #19]
}
    4c6c:	46bd      	mov	sp, r7
    4c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c72:	4770      	bx	lr

00004c74 <send_boot>:
 * Called at 20Hz.
 */



void send_boot(void){
    4c74:	b480      	push	{r7}
    4c76:	af00      	add	r7, sp, #0
  /** initialisation phase during boot */
  //vPrintString("S_13 reporting_task start!\n\r");
  //add by wanbo
  //if (boot) 
  {
      DOWNLINK_SEND_BOOT(&version);
    4c78:	f24b 6329 	movw	r3, #46633	; 0xb629
    4c7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4c80:	781a      	ldrb	r2, [r3, #0]
    4c82:	f24b 632a 	movw	r3, #46634	; 0xb62a
    4c86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4c8a:	781b      	ldrb	r3, [r3, #0]
    4c8c:	b2db      	uxtb	r3, r3
    4c8e:	429a      	cmp	r2, r3
    4c90:	d313      	bcc.n	4cba <send_boot+0x46>
    4c92:	f24b 632a 	movw	r3, #46634	; 0xb62a
    4c96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4c9a:	781b      	ldrb	r3, [r3, #0]
    4c9c:	b2db      	uxtb	r3, r3
    4c9e:	461a      	mov	r2, r3
    4ca0:	f24b 6329 	movw	r3, #46633	; 0xb629
    4ca4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4ca8:	781b      	ldrb	r3, [r3, #0]
    4caa:	1ad3      	subs	r3, r2, r3
    4cac:	33ff      	adds	r3, #255	; 0xff
    4cae:	2b06      	cmp	r3, #6
    4cb0:	bfd4      	ite	le
    4cb2:	2300      	movle	r3, #0
    4cb4:	2301      	movgt	r3, #1
    4cb6:	b2db      	uxtb	r3, r3
    4cb8:	e011      	b.n	4cde <send_boot+0x6a>
    4cba:	f24b 632a 	movw	r3, #46634	; 0xb62a
    4cbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4cc2:	781b      	ldrb	r3, [r3, #0]
    4cc4:	b2db      	uxtb	r3, r3
    4cc6:	461a      	mov	r2, r3
    4cc8:	f24b 6329 	movw	r3, #46633	; 0xb629
    4ccc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4cd0:	781b      	ldrb	r3, [r3, #0]
    4cd2:	1ad3      	subs	r3, r2, r3
    4cd4:	2b06      	cmp	r3, #6
    4cd6:	bfd4      	ite	le
    4cd8:	2300      	movle	r3, #0
    4cda:	2301      	movgt	r3, #1
    4cdc:	b2db      	uxtb	r3, r3
    4cde:	2b00      	cmp	r3, #0
    4ce0:	f000 8194 	beq.w	500c <send_boot+0x398>
    4ce4:	f24b 6329 	movw	r3, #46633	; 0xb629
    4ce8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4cec:	781b      	ldrb	r3, [r3, #0]
    4cee:	461a      	mov	r2, r3
    4cf0:	f24b 632c 	movw	r3, #46636	; 0xb62c
    4cf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4cf8:	2105      	movs	r1, #5
    4cfa:	5499      	strb	r1, [r3, r2]
    4cfc:	f24b 6329 	movw	r3, #46633	; 0xb629
    4d00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4d04:	781b      	ldrb	r3, [r3, #0]
    4d06:	3301      	adds	r3, #1
    4d08:	b2da      	uxtb	r2, r3
    4d0a:	f24b 6329 	movw	r3, #46633	; 0xb629
    4d0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4d12:	701a      	strb	r2, [r3, #0]
    4d14:	f24b 6329 	movw	r3, #46633	; 0xb629
    4d18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4d1c:	781b      	ldrb	r3, [r3, #0]
    4d1e:	2bff      	cmp	r3, #255	; 0xff
    4d20:	d105      	bne.n	4d2e <send_boot+0xba>
    4d22:	f24b 6329 	movw	r3, #46633	; 0xb629
    4d26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4d2a:	2200      	movs	r2, #0
    4d2c:	701a      	strb	r2, [r3, #0]
    4d2e:	f24b 6329 	movw	r3, #46633	; 0xb629
    4d32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4d36:	781b      	ldrb	r3, [r3, #0]
    4d38:	461a      	mov	r2, r3
    4d3a:	f24b 632c 	movw	r3, #46636	; 0xb62c
    4d3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4d42:	2101      	movs	r1, #1
    4d44:	5499      	strb	r1, [r3, r2]
    4d46:	f24b 6329 	movw	r3, #46633	; 0xb629
    4d4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4d4e:	781b      	ldrb	r3, [r3, #0]
    4d50:	3301      	adds	r3, #1
    4d52:	b2da      	uxtb	r2, r3
    4d54:	f24b 6329 	movw	r3, #46633	; 0xb629
    4d58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4d5c:	701a      	strb	r2, [r3, #0]
    4d5e:	f24b 6329 	movw	r3, #46633	; 0xb629
    4d62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4d66:	781b      	ldrb	r3, [r3, #0]
    4d68:	2bff      	cmp	r3, #255	; 0xff
    4d6a:	d105      	bne.n	4d78 <send_boot+0x104>
    4d6c:	f24b 6329 	movw	r3, #46633	; 0xb629
    4d70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4d74:	2200      	movs	r2, #0
    4d76:	701a      	strb	r2, [r3, #0]
    4d78:	f24b 732d 	movw	r3, #46893	; 0xb72d
    4d7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4d80:	2201      	movs	r2, #1
    4d82:	701a      	strb	r2, [r3, #0]
    4d84:	f24b 732e 	movw	r3, #46894	; 0xb72e
    4d88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4d8c:	2201      	movs	r2, #1
    4d8e:	701a      	strb	r2, [r3, #0]
    4d90:	f24b 6329 	movw	r3, #46633	; 0xb629
    4d94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4d98:	781b      	ldrb	r3, [r3, #0]
    4d9a:	461a      	mov	r2, r3
    4d9c:	f643 0386 	movw	r3, #14470	; 0x3886
    4da0:	f2c0 0301 	movt	r3, #1
    4da4:	7819      	ldrb	r1, [r3, #0]
    4da6:	f24b 632c 	movw	r3, #46636	; 0xb62c
    4daa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4dae:	5499      	strb	r1, [r3, r2]
    4db0:	f643 0386 	movw	r3, #14470	; 0x3886
    4db4:	f2c0 0301 	movt	r3, #1
    4db8:	781a      	ldrb	r2, [r3, #0]
    4dba:	f24b 732d 	movw	r3, #46893	; 0xb72d
    4dbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4dc2:	781b      	ldrb	r3, [r3, #0]
    4dc4:	4413      	add	r3, r2
    4dc6:	b2da      	uxtb	r2, r3
    4dc8:	f24b 732d 	movw	r3, #46893	; 0xb72d
    4dcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4dd0:	701a      	strb	r2, [r3, #0]
    4dd2:	f24b 732e 	movw	r3, #46894	; 0xb72e
    4dd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4dda:	781a      	ldrb	r2, [r3, #0]
    4ddc:	f24b 732d 	movw	r3, #46893	; 0xb72d
    4de0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4de4:	781b      	ldrb	r3, [r3, #0]
    4de6:	4413      	add	r3, r2
    4de8:	b2da      	uxtb	r2, r3
    4dea:	f24b 732e 	movw	r3, #46894	; 0xb72e
    4dee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4df2:	701a      	strb	r2, [r3, #0]
    4df4:	f24b 6329 	movw	r3, #46633	; 0xb629
    4df8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4dfc:	781b      	ldrb	r3, [r3, #0]
    4dfe:	3301      	adds	r3, #1
    4e00:	b2da      	uxtb	r2, r3
    4e02:	f24b 6329 	movw	r3, #46633	; 0xb629
    4e06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4e0a:	701a      	strb	r2, [r3, #0]
    4e0c:	f24b 6329 	movw	r3, #46633	; 0xb629
    4e10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4e14:	781b      	ldrb	r3, [r3, #0]
    4e16:	2bff      	cmp	r3, #255	; 0xff
    4e18:	d105      	bne.n	4e26 <send_boot+0x1b2>
    4e1a:	f24b 6329 	movw	r3, #46633	; 0xb629
    4e1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4e22:	2200      	movs	r2, #0
    4e24:	701a      	strb	r2, [r3, #0]
    4e26:	f24b 6329 	movw	r3, #46633	; 0xb629
    4e2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4e2e:	781b      	ldrb	r3, [r3, #0]
    4e30:	461a      	mov	r2, r3
    4e32:	f643 0386 	movw	r3, #14470	; 0x3886
    4e36:	f2c0 0301 	movt	r3, #1
    4e3a:	7859      	ldrb	r1, [r3, #1]
    4e3c:	f24b 632c 	movw	r3, #46636	; 0xb62c
    4e40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4e44:	5499      	strb	r1, [r3, r2]
    4e46:	4b88      	ldr	r3, [pc, #544]	; (5068 <send_boot+0x3f4>)
    4e48:	781a      	ldrb	r2, [r3, #0]
    4e4a:	f24b 732d 	movw	r3, #46893	; 0xb72d
    4e4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4e52:	781b      	ldrb	r3, [r3, #0]
    4e54:	4413      	add	r3, r2
    4e56:	b2da      	uxtb	r2, r3
    4e58:	f24b 732d 	movw	r3, #46893	; 0xb72d
    4e5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4e60:	701a      	strb	r2, [r3, #0]
    4e62:	f24b 732e 	movw	r3, #46894	; 0xb72e
    4e66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4e6a:	781a      	ldrb	r2, [r3, #0]
    4e6c:	f24b 732d 	movw	r3, #46893	; 0xb72d
    4e70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4e74:	781b      	ldrb	r3, [r3, #0]
    4e76:	4413      	add	r3, r2
    4e78:	b2da      	uxtb	r2, r3
    4e7a:	f24b 732e 	movw	r3, #46894	; 0xb72e
    4e7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4e82:	701a      	strb	r2, [r3, #0]
    4e84:	f24b 6329 	movw	r3, #46633	; 0xb629
    4e88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4e8c:	781b      	ldrb	r3, [r3, #0]
    4e8e:	3301      	adds	r3, #1
    4e90:	b2da      	uxtb	r2, r3
    4e92:	f24b 6329 	movw	r3, #46633	; 0xb629
    4e96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4e9a:	701a      	strb	r2, [r3, #0]
    4e9c:	f24b 6329 	movw	r3, #46633	; 0xb629
    4ea0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4ea4:	781b      	ldrb	r3, [r3, #0]
    4ea6:	2bff      	cmp	r3, #255	; 0xff
    4ea8:	d105      	bne.n	4eb6 <send_boot+0x242>
    4eaa:	f24b 6329 	movw	r3, #46633	; 0xb629
    4eae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4eb2:	2200      	movs	r2, #0
    4eb4:	701a      	strb	r2, [r3, #0]
    4eb6:	f24b 6329 	movw	r3, #46633	; 0xb629
    4eba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4ebe:	781b      	ldrb	r3, [r3, #0]
    4ec0:	461a      	mov	r2, r3
    4ec2:	f24b 732d 	movw	r3, #46893	; 0xb72d
    4ec6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4eca:	7819      	ldrb	r1, [r3, #0]
    4ecc:	f24b 632c 	movw	r3, #46636	; 0xb62c
    4ed0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4ed4:	5499      	strb	r1, [r3, r2]
    4ed6:	f24b 6329 	movw	r3, #46633	; 0xb629
    4eda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4ede:	781b      	ldrb	r3, [r3, #0]
    4ee0:	3301      	adds	r3, #1
    4ee2:	b2da      	uxtb	r2, r3
    4ee4:	f24b 6329 	movw	r3, #46633	; 0xb629
    4ee8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4eec:	701a      	strb	r2, [r3, #0]
    4eee:	f24b 6329 	movw	r3, #46633	; 0xb629
    4ef2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4ef6:	781b      	ldrb	r3, [r3, #0]
    4ef8:	2bff      	cmp	r3, #255	; 0xff
    4efa:	d105      	bne.n	4f08 <send_boot+0x294>
    4efc:	f24b 6329 	movw	r3, #46633	; 0xb629
    4f00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4f04:	2200      	movs	r2, #0
    4f06:	701a      	strb	r2, [r3, #0]
    4f08:	f24b 6329 	movw	r3, #46633	; 0xb629
    4f0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4f10:	781b      	ldrb	r3, [r3, #0]
    4f12:	461a      	mov	r2, r3
    4f14:	f24b 732e 	movw	r3, #46894	; 0xb72e
    4f18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4f1c:	7819      	ldrb	r1, [r3, #0]
    4f1e:	f24b 632c 	movw	r3, #46636	; 0xb62c
    4f22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4f26:	5499      	strb	r1, [r3, r2]
    4f28:	f24b 6329 	movw	r3, #46633	; 0xb629
    4f2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4f30:	781b      	ldrb	r3, [r3, #0]
    4f32:	3301      	adds	r3, #1
    4f34:	b2da      	uxtb	r2, r3
    4f36:	f24b 6329 	movw	r3, #46633	; 0xb629
    4f3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4f3e:	701a      	strb	r2, [r3, #0]
    4f40:	f24b 6329 	movw	r3, #46633	; 0xb629
    4f44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4f48:	781b      	ldrb	r3, [r3, #0]
    4f4a:	2bff      	cmp	r3, #255	; 0xff
    4f4c:	d105      	bne.n	4f5a <send_boot+0x2e6>
    4f4e:	f24b 6329 	movw	r3, #46633	; 0xb629
    4f52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4f56:	2200      	movs	r2, #0
    4f58:	701a      	strb	r2, [r3, #0]
    4f5a:	f248 0339 	movw	r3, #32825	; 0x8039
    4f5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f62:	781b      	ldrb	r3, [r3, #0]
    4f64:	b2db      	uxtb	r3, r3
    4f66:	f003 0310 	and.w	r3, r3, #16
    4f6a:	2b00      	cmp	r3, #0
    4f6c:	d15a      	bne.n	5024 <send_boot+0x3b0>
    4f6e:	f24b 632a 	movw	r3, #46634	; 0xb62a
    4f72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4f76:	781b      	ldrb	r3, [r3, #0]
    4f78:	b2db      	uxtb	r3, r3
    4f7a:	461a      	mov	r2, r3
    4f7c:	f24b 632c 	movw	r3, #46636	; 0xb62c
    4f80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4f84:	5c9a      	ldrb	r2, [r3, r2]
    4f86:	f24b 732b 	movw	r3, #46891	; 0xb72b
    4f8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4f8e:	701a      	strb	r2, [r3, #0]
    4f90:	f24b 732c 	movw	r3, #46892	; 0xb72c
    4f94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4f98:	2200      	movs	r2, #0
    4f9a:	701a      	strb	r2, [r3, #0]
    4f9c:	f24b 632a 	movw	r3, #46634	; 0xb62a
    4fa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4fa4:	781b      	ldrb	r3, [r3, #0]
    4fa6:	b2db      	uxtb	r3, r3
    4fa8:	3301      	adds	r3, #1
    4faa:	b2da      	uxtb	r2, r3
    4fac:	f24b 632a 	movw	r3, #46634	; 0xb62a
    4fb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4fb4:	701a      	strb	r2, [r3, #0]
    4fb6:	f24b 632a 	movw	r3, #46634	; 0xb62a
    4fba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4fbe:	781b      	ldrb	r3, [r3, #0]
    4fc0:	b2db      	uxtb	r3, r3
    4fc2:	2bff      	cmp	r3, #255	; 0xff
    4fc4:	d105      	bne.n	4fd2 <send_boot+0x35e>
    4fc6:	f24b 632a 	movw	r3, #46634	; 0xb62a
    4fca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4fce:	2200      	movs	r2, #0
    4fd0:	701a      	strb	r2, [r3, #0]
    4fd2:	f248 0338 	movw	r3, #32824	; 0x8038
    4fd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fda:	f248 0238 	movw	r2, #32824	; 0x8038
    4fde:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4fe2:	7812      	ldrb	r2, [r2, #0]
    4fe4:	b2d2      	uxtb	r2, r2
    4fe6:	f042 0201 	orr.w	r2, r2, #1
    4fea:	b2d2      	uxtb	r2, r2
    4fec:	701a      	strb	r2, [r3, #0]
    4fee:	f248 0339 	movw	r3, #32825	; 0x8039
    4ff2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ff6:	f248 0239 	movw	r2, #32825	; 0x8039
    4ffa:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4ffe:	7812      	ldrb	r2, [r2, #0]
    5000:	b2d2      	uxtb	r2, r2
    5002:	f042 0210 	orr.w	r2, r2, #16
    5006:	b2d2      	uxtb	r2, r2
    5008:	701a      	strb	r2, [r3, #0]
    500a:	e00b      	b.n	5024 <send_boot+0x3b0>
    500c:	f24b 6328 	movw	r3, #46632	; 0xb628
    5010:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5014:	781b      	ldrb	r3, [r3, #0]
    5016:	3301      	adds	r3, #1
    5018:	b2da      	uxtb	r2, r3
    501a:	f24b 6328 	movw	r3, #46632	; 0xb628
    501e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5022:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    5024:	f24b 6329 	movw	r3, #46633	; 0xb629
    5028:	f2c2 0304 	movt	r3, #8196	; 0x2004
    502c:	781a      	ldrb	r2, [r3, #0]
    502e:	f24b 632a 	movw	r3, #46634	; 0xb62a
    5032:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5036:	781b      	ldrb	r3, [r3, #0]
    5038:	b2db      	uxtb	r3, r3
    503a:	429a      	cmp	r2, r3
    503c:	d316      	bcc.n	506c <send_boot+0x3f8>
    503e:	f24b 632a 	movw	r3, #46634	; 0xb62a
    5042:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5046:	781b      	ldrb	r3, [r3, #0]
    5048:	b2db      	uxtb	r3, r3
    504a:	461a      	mov	r2, r3
    504c:	f24b 6329 	movw	r3, #46633	; 0xb629
    5050:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5054:	781b      	ldrb	r3, [r3, #0]
    5056:	1ad3      	subs	r3, r2, r3
    5058:	33ff      	adds	r3, #255	; 0xff
    505a:	2b14      	cmp	r3, #20
    505c:	bfd4      	ite	le
    505e:	2300      	movle	r3, #0
    5060:	2301      	movgt	r3, #1
    5062:	b2db      	uxtb	r3, r3
    5064:	e014      	b.n	5090 <send_boot+0x41c>
    5066:	bf00      	nop
    5068:	00013887 	.word	0x00013887
    506c:	f24b 632a 	movw	r3, #46634	; 0xb62a
    5070:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5074:	781b      	ldrb	r3, [r3, #0]
    5076:	b2db      	uxtb	r3, r3
    5078:	461a      	mov	r2, r3
    507a:	f24b 6329 	movw	r3, #46633	; 0xb629
    507e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5082:	781b      	ldrb	r3, [r3, #0]
    5084:	1ad3      	subs	r3, r2, r3
    5086:	2b14      	cmp	r3, #20
    5088:	bfd4      	ite	le
    508a:	2300      	movle	r3, #0
    508c:	2301      	movgt	r3, #1
    508e:	b2db      	uxtb	r3, r3
    5090:	2b00      	cmp	r3, #0
    5092:	f000 85a5 	beq.w	5be0 <send_boot+0xf6c>
    5096:	f24b 6329 	movw	r3, #46633	; 0xb629
    509a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    509e:	781b      	ldrb	r3, [r3, #0]
    50a0:	461a      	mov	r2, r3
    50a2:	f24b 632c 	movw	r3, #46636	; 0xb62c
    50a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    50aa:	2105      	movs	r1, #5
    50ac:	5499      	strb	r1, [r3, r2]
    50ae:	f24b 6329 	movw	r3, #46633	; 0xb629
    50b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    50b6:	781b      	ldrb	r3, [r3, #0]
    50b8:	3301      	adds	r3, #1
    50ba:	b2da      	uxtb	r2, r3
    50bc:	f24b 6329 	movw	r3, #46633	; 0xb629
    50c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    50c4:	701a      	strb	r2, [r3, #0]
    50c6:	f24b 6329 	movw	r3, #46633	; 0xb629
    50ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    50ce:	781b      	ldrb	r3, [r3, #0]
    50d0:	2bff      	cmp	r3, #255	; 0xff
    50d2:	d105      	bne.n	50e0 <send_boot+0x46c>
    50d4:	f24b 6329 	movw	r3, #46633	; 0xb629
    50d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    50dc:	2200      	movs	r2, #0
    50de:	701a      	strb	r2, [r3, #0]
    50e0:	f24b 6329 	movw	r3, #46633	; 0xb629
    50e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    50e8:	781b      	ldrb	r3, [r3, #0]
    50ea:	461a      	mov	r2, r3
    50ec:	f24b 632c 	movw	r3, #46636	; 0xb62c
    50f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    50f4:	2105      	movs	r1, #5
    50f6:	5499      	strb	r1, [r3, r2]
    50f8:	f24b 6329 	movw	r3, #46633	; 0xb629
    50fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5100:	781b      	ldrb	r3, [r3, #0]
    5102:	3301      	adds	r3, #1
    5104:	b2da      	uxtb	r2, r3
    5106:	f24b 6329 	movw	r3, #46633	; 0xb629
    510a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    510e:	701a      	strb	r2, [r3, #0]
    5110:	f24b 6329 	movw	r3, #46633	; 0xb629
    5114:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5118:	781b      	ldrb	r3, [r3, #0]
    511a:	2bff      	cmp	r3, #255	; 0xff
    511c:	d105      	bne.n	512a <send_boot+0x4b6>
    511e:	f24b 6329 	movw	r3, #46633	; 0xb629
    5122:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5126:	2200      	movs	r2, #0
    5128:	701a      	strb	r2, [r3, #0]
    512a:	f24b 732d 	movw	r3, #46893	; 0xb72d
    512e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5132:	2205      	movs	r2, #5
    5134:	701a      	strb	r2, [r3, #0]
    5136:	f24b 732e 	movw	r3, #46894	; 0xb72e
    513a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    513e:	2205      	movs	r2, #5
    5140:	701a      	strb	r2, [r3, #0]
    5142:	f24b 6329 	movw	r3, #46633	; 0xb629
    5146:	f2c2 0304 	movt	r3, #8196	; 0x2004
    514a:	781b      	ldrb	r3, [r3, #0]
    514c:	461a      	mov	r2, r3
    514e:	f64b 4320 	movw	r3, #48160	; 0xbc20
    5152:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5156:	7819      	ldrb	r1, [r3, #0]
    5158:	f24b 632c 	movw	r3, #46636	; 0xb62c
    515c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5160:	5499      	strb	r1, [r3, r2]
    5162:	f64b 4320 	movw	r3, #48160	; 0xbc20
    5166:	f2c2 0304 	movt	r3, #8196	; 0x2004
    516a:	781a      	ldrb	r2, [r3, #0]
    516c:	f24b 732d 	movw	r3, #46893	; 0xb72d
    5170:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5174:	781b      	ldrb	r3, [r3, #0]
    5176:	4413      	add	r3, r2
    5178:	b2da      	uxtb	r2, r3
    517a:	f24b 732d 	movw	r3, #46893	; 0xb72d
    517e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5182:	701a      	strb	r2, [r3, #0]
    5184:	f24b 732e 	movw	r3, #46894	; 0xb72e
    5188:	f2c2 0304 	movt	r3, #8196	; 0x2004
    518c:	781a      	ldrb	r2, [r3, #0]
    518e:	f24b 732d 	movw	r3, #46893	; 0xb72d
    5192:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5196:	781b      	ldrb	r3, [r3, #0]
    5198:	4413      	add	r3, r2
    519a:	b2da      	uxtb	r2, r3
    519c:	f24b 732e 	movw	r3, #46894	; 0xb72e
    51a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    51a4:	701a      	strb	r2, [r3, #0]
    51a6:	f24b 6329 	movw	r3, #46633	; 0xb629
    51aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    51ae:	781b      	ldrb	r3, [r3, #0]
    51b0:	3301      	adds	r3, #1
    51b2:	b2da      	uxtb	r2, r3
    51b4:	f24b 6329 	movw	r3, #46633	; 0xb629
    51b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    51bc:	701a      	strb	r2, [r3, #0]
    51be:	f24b 6329 	movw	r3, #46633	; 0xb629
    51c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    51c6:	781b      	ldrb	r3, [r3, #0]
    51c8:	2bff      	cmp	r3, #255	; 0xff
    51ca:	d105      	bne.n	51d8 <send_boot+0x564>
    51cc:	f24b 6329 	movw	r3, #46633	; 0xb629
    51d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    51d4:	2200      	movs	r2, #0
    51d6:	701a      	strb	r2, [r3, #0]
    51d8:	f24b 6329 	movw	r3, #46633	; 0xb629
    51dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    51e0:	781b      	ldrb	r3, [r3, #0]
    51e2:	461a      	mov	r2, r3
    51e4:	f64b 4320 	movw	r3, #48160	; 0xbc20
    51e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    51ec:	7859      	ldrb	r1, [r3, #1]
    51ee:	f24b 632c 	movw	r3, #46636	; 0xb62c
    51f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    51f6:	5499      	strb	r1, [r3, r2]
    51f8:	4bd1      	ldr	r3, [pc, #836]	; (5540 <send_boot+0x8cc>)
    51fa:	781a      	ldrb	r2, [r3, #0]
    51fc:	f24b 732d 	movw	r3, #46893	; 0xb72d
    5200:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5204:	781b      	ldrb	r3, [r3, #0]
    5206:	4413      	add	r3, r2
    5208:	b2da      	uxtb	r2, r3
    520a:	f24b 732d 	movw	r3, #46893	; 0xb72d
    520e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5212:	701a      	strb	r2, [r3, #0]
    5214:	f24b 732e 	movw	r3, #46894	; 0xb72e
    5218:	f2c2 0304 	movt	r3, #8196	; 0x2004
    521c:	781a      	ldrb	r2, [r3, #0]
    521e:	f24b 732d 	movw	r3, #46893	; 0xb72d
    5222:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5226:	781b      	ldrb	r3, [r3, #0]
    5228:	4413      	add	r3, r2
    522a:	b2da      	uxtb	r2, r3
    522c:	f24b 732e 	movw	r3, #46894	; 0xb72e
    5230:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5234:	701a      	strb	r2, [r3, #0]
    5236:	f24b 6329 	movw	r3, #46633	; 0xb629
    523a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    523e:	781b      	ldrb	r3, [r3, #0]
    5240:	3301      	adds	r3, #1
    5242:	b2da      	uxtb	r2, r3
    5244:	f24b 6329 	movw	r3, #46633	; 0xb629
    5248:	f2c2 0304 	movt	r3, #8196	; 0x2004
    524c:	701a      	strb	r2, [r3, #0]
    524e:	f24b 6329 	movw	r3, #46633	; 0xb629
    5252:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5256:	781b      	ldrb	r3, [r3, #0]
    5258:	2bff      	cmp	r3, #255	; 0xff
    525a:	d105      	bne.n	5268 <send_boot+0x5f4>
    525c:	f24b 6329 	movw	r3, #46633	; 0xb629
    5260:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5264:	2200      	movs	r2, #0
    5266:	701a      	strb	r2, [r3, #0]
    5268:	f24b 6329 	movw	r3, #46633	; 0xb629
    526c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5270:	781b      	ldrb	r3, [r3, #0]
    5272:	461a      	mov	r2, r3
    5274:	f64b 4320 	movw	r3, #48160	; 0xbc20
    5278:	f2c2 0304 	movt	r3, #8196	; 0x2004
    527c:	7899      	ldrb	r1, [r3, #2]
    527e:	f24b 632c 	movw	r3, #46636	; 0xb62c
    5282:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5286:	5499      	strb	r1, [r3, r2]
    5288:	4bae      	ldr	r3, [pc, #696]	; (5544 <send_boot+0x8d0>)
    528a:	781a      	ldrb	r2, [r3, #0]
    528c:	f24b 732d 	movw	r3, #46893	; 0xb72d
    5290:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5294:	781b      	ldrb	r3, [r3, #0]
    5296:	4413      	add	r3, r2
    5298:	b2da      	uxtb	r2, r3
    529a:	f24b 732d 	movw	r3, #46893	; 0xb72d
    529e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    52a2:	701a      	strb	r2, [r3, #0]
    52a4:	f24b 732e 	movw	r3, #46894	; 0xb72e
    52a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    52ac:	781a      	ldrb	r2, [r3, #0]
    52ae:	f24b 732d 	movw	r3, #46893	; 0xb72d
    52b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    52b6:	781b      	ldrb	r3, [r3, #0]
    52b8:	4413      	add	r3, r2
    52ba:	b2da      	uxtb	r2, r3
    52bc:	f24b 732e 	movw	r3, #46894	; 0xb72e
    52c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    52c4:	701a      	strb	r2, [r3, #0]
    52c6:	f24b 6329 	movw	r3, #46633	; 0xb629
    52ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    52ce:	781b      	ldrb	r3, [r3, #0]
    52d0:	3301      	adds	r3, #1
    52d2:	b2da      	uxtb	r2, r3
    52d4:	f24b 6329 	movw	r3, #46633	; 0xb629
    52d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    52dc:	701a      	strb	r2, [r3, #0]
    52de:	f24b 6329 	movw	r3, #46633	; 0xb629
    52e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    52e6:	781b      	ldrb	r3, [r3, #0]
    52e8:	2bff      	cmp	r3, #255	; 0xff
    52ea:	d105      	bne.n	52f8 <send_boot+0x684>
    52ec:	f24b 6329 	movw	r3, #46633	; 0xb629
    52f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    52f4:	2200      	movs	r2, #0
    52f6:	701a      	strb	r2, [r3, #0]
    52f8:	f24b 6329 	movw	r3, #46633	; 0xb629
    52fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5300:	781b      	ldrb	r3, [r3, #0]
    5302:	461a      	mov	r2, r3
    5304:	f64b 4320 	movw	r3, #48160	; 0xbc20
    5308:	f2c2 0304 	movt	r3, #8196	; 0x2004
    530c:	78d9      	ldrb	r1, [r3, #3]
    530e:	f24b 632c 	movw	r3, #46636	; 0xb62c
    5312:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5316:	5499      	strb	r1, [r3, r2]
    5318:	4b8b      	ldr	r3, [pc, #556]	; (5548 <send_boot+0x8d4>)
    531a:	781a      	ldrb	r2, [r3, #0]
    531c:	f24b 732d 	movw	r3, #46893	; 0xb72d
    5320:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5324:	781b      	ldrb	r3, [r3, #0]
    5326:	4413      	add	r3, r2
    5328:	b2da      	uxtb	r2, r3
    532a:	f24b 732d 	movw	r3, #46893	; 0xb72d
    532e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5332:	701a      	strb	r2, [r3, #0]
    5334:	f24b 732e 	movw	r3, #46894	; 0xb72e
    5338:	f2c2 0304 	movt	r3, #8196	; 0x2004
    533c:	781a      	ldrb	r2, [r3, #0]
    533e:	f24b 732d 	movw	r3, #46893	; 0xb72d
    5342:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5346:	781b      	ldrb	r3, [r3, #0]
    5348:	4413      	add	r3, r2
    534a:	b2da      	uxtb	r2, r3
    534c:	f24b 732e 	movw	r3, #46894	; 0xb72e
    5350:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5354:	701a      	strb	r2, [r3, #0]
    5356:	f24b 6329 	movw	r3, #46633	; 0xb629
    535a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    535e:	781b      	ldrb	r3, [r3, #0]
    5360:	3301      	adds	r3, #1
    5362:	b2da      	uxtb	r2, r3
    5364:	f24b 6329 	movw	r3, #46633	; 0xb629
    5368:	f2c2 0304 	movt	r3, #8196	; 0x2004
    536c:	701a      	strb	r2, [r3, #0]
    536e:	f24b 6329 	movw	r3, #46633	; 0xb629
    5372:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5376:	781b      	ldrb	r3, [r3, #0]
    5378:	2bff      	cmp	r3, #255	; 0xff
    537a:	d105      	bne.n	5388 <send_boot+0x714>
    537c:	f24b 6329 	movw	r3, #46633	; 0xb629
    5380:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5384:	2200      	movs	r2, #0
    5386:	701a      	strb	r2, [r3, #0]
    5388:	f24b 6329 	movw	r3, #46633	; 0xb629
    538c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5390:	781b      	ldrb	r3, [r3, #0]
    5392:	461a      	mov	r2, r3
    5394:	f64b 4324 	movw	r3, #48164	; 0xbc24
    5398:	f2c2 0304 	movt	r3, #8196	; 0x2004
    539c:	7819      	ldrb	r1, [r3, #0]
    539e:	f24b 632c 	movw	r3, #46636	; 0xb62c
    53a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    53a6:	5499      	strb	r1, [r3, r2]
    53a8:	f64b 4324 	movw	r3, #48164	; 0xbc24
    53ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    53b0:	781a      	ldrb	r2, [r3, #0]
    53b2:	f24b 732d 	movw	r3, #46893	; 0xb72d
    53b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    53ba:	781b      	ldrb	r3, [r3, #0]
    53bc:	4413      	add	r3, r2
    53be:	b2da      	uxtb	r2, r3
    53c0:	f24b 732d 	movw	r3, #46893	; 0xb72d
    53c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    53c8:	701a      	strb	r2, [r3, #0]
    53ca:	f24b 732e 	movw	r3, #46894	; 0xb72e
    53ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    53d2:	781a      	ldrb	r2, [r3, #0]
    53d4:	f24b 732d 	movw	r3, #46893	; 0xb72d
    53d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    53dc:	781b      	ldrb	r3, [r3, #0]
    53de:	4413      	add	r3, r2
    53e0:	b2da      	uxtb	r2, r3
    53e2:	f24b 732e 	movw	r3, #46894	; 0xb72e
    53e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    53ea:	701a      	strb	r2, [r3, #0]
    53ec:	f24b 6329 	movw	r3, #46633	; 0xb629
    53f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    53f4:	781b      	ldrb	r3, [r3, #0]
    53f6:	3301      	adds	r3, #1
    53f8:	b2da      	uxtb	r2, r3
    53fa:	f24b 6329 	movw	r3, #46633	; 0xb629
    53fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5402:	701a      	strb	r2, [r3, #0]
    5404:	f24b 6329 	movw	r3, #46633	; 0xb629
    5408:	f2c2 0304 	movt	r3, #8196	; 0x2004
    540c:	781b      	ldrb	r3, [r3, #0]
    540e:	2bff      	cmp	r3, #255	; 0xff
    5410:	d105      	bne.n	541e <send_boot+0x7aa>
    5412:	f24b 6329 	movw	r3, #46633	; 0xb629
    5416:	f2c2 0304 	movt	r3, #8196	; 0x2004
    541a:	2200      	movs	r2, #0
    541c:	701a      	strb	r2, [r3, #0]
    541e:	f24b 6329 	movw	r3, #46633	; 0xb629
    5422:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5426:	781b      	ldrb	r3, [r3, #0]
    5428:	461a      	mov	r2, r3
    542a:	f64b 4324 	movw	r3, #48164	; 0xbc24
    542e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5432:	7859      	ldrb	r1, [r3, #1]
    5434:	f24b 632c 	movw	r3, #46636	; 0xb62c
    5438:	f2c2 0304 	movt	r3, #8196	; 0x2004
    543c:	5499      	strb	r1, [r3, r2]
    543e:	4b43      	ldr	r3, [pc, #268]	; (554c <send_boot+0x8d8>)
    5440:	781a      	ldrb	r2, [r3, #0]
    5442:	f24b 732d 	movw	r3, #46893	; 0xb72d
    5446:	f2c2 0304 	movt	r3, #8196	; 0x2004
    544a:	781b      	ldrb	r3, [r3, #0]
    544c:	4413      	add	r3, r2
    544e:	b2da      	uxtb	r2, r3
    5450:	f24b 732d 	movw	r3, #46893	; 0xb72d
    5454:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5458:	701a      	strb	r2, [r3, #0]
    545a:	f24b 732e 	movw	r3, #46894	; 0xb72e
    545e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5462:	781a      	ldrb	r2, [r3, #0]
    5464:	f24b 732d 	movw	r3, #46893	; 0xb72d
    5468:	f2c2 0304 	movt	r3, #8196	; 0x2004
    546c:	781b      	ldrb	r3, [r3, #0]
    546e:	4413      	add	r3, r2
    5470:	b2da      	uxtb	r2, r3
    5472:	f24b 732e 	movw	r3, #46894	; 0xb72e
    5476:	f2c2 0304 	movt	r3, #8196	; 0x2004
    547a:	701a      	strb	r2, [r3, #0]
    547c:	f24b 6329 	movw	r3, #46633	; 0xb629
    5480:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5484:	781b      	ldrb	r3, [r3, #0]
    5486:	3301      	adds	r3, #1
    5488:	b2da      	uxtb	r2, r3
    548a:	f24b 6329 	movw	r3, #46633	; 0xb629
    548e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5492:	701a      	strb	r2, [r3, #0]
    5494:	f24b 6329 	movw	r3, #46633	; 0xb629
    5498:	f2c2 0304 	movt	r3, #8196	; 0x2004
    549c:	781b      	ldrb	r3, [r3, #0]
    549e:	2bff      	cmp	r3, #255	; 0xff
    54a0:	d105      	bne.n	54ae <send_boot+0x83a>
    54a2:	f24b 6329 	movw	r3, #46633	; 0xb629
    54a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    54aa:	2200      	movs	r2, #0
    54ac:	701a      	strb	r2, [r3, #0]
    54ae:	f24b 6329 	movw	r3, #46633	; 0xb629
    54b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    54b6:	781b      	ldrb	r3, [r3, #0]
    54b8:	461a      	mov	r2, r3
    54ba:	f64b 4324 	movw	r3, #48164	; 0xbc24
    54be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    54c2:	7899      	ldrb	r1, [r3, #2]
    54c4:	f24b 632c 	movw	r3, #46636	; 0xb62c
    54c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    54cc:	5499      	strb	r1, [r3, r2]
    54ce:	4b20      	ldr	r3, [pc, #128]	; (5550 <send_boot+0x8dc>)
    54d0:	781a      	ldrb	r2, [r3, #0]
    54d2:	f24b 732d 	movw	r3, #46893	; 0xb72d
    54d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    54da:	781b      	ldrb	r3, [r3, #0]
    54dc:	4413      	add	r3, r2
    54de:	b2da      	uxtb	r2, r3
    54e0:	f24b 732d 	movw	r3, #46893	; 0xb72d
    54e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    54e8:	701a      	strb	r2, [r3, #0]
    54ea:	f24b 732e 	movw	r3, #46894	; 0xb72e
    54ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    54f2:	781a      	ldrb	r2, [r3, #0]
    54f4:	f24b 732d 	movw	r3, #46893	; 0xb72d
    54f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    54fc:	781b      	ldrb	r3, [r3, #0]
    54fe:	4413      	add	r3, r2
    5500:	b2da      	uxtb	r2, r3
    5502:	f24b 732e 	movw	r3, #46894	; 0xb72e
    5506:	f2c2 0304 	movt	r3, #8196	; 0x2004
    550a:	701a      	strb	r2, [r3, #0]
    550c:	f24b 6329 	movw	r3, #46633	; 0xb629
    5510:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5514:	781b      	ldrb	r3, [r3, #0]
    5516:	3301      	adds	r3, #1
    5518:	b2da      	uxtb	r2, r3
    551a:	f24b 6329 	movw	r3, #46633	; 0xb629
    551e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5522:	701a      	strb	r2, [r3, #0]
    5524:	f24b 6329 	movw	r3, #46633	; 0xb629
    5528:	f2c2 0304 	movt	r3, #8196	; 0x2004
    552c:	781b      	ldrb	r3, [r3, #0]
    552e:	2bff      	cmp	r3, #255	; 0xff
    5530:	d110      	bne.n	5554 <send_boot+0x8e0>
    5532:	f24b 6329 	movw	r3, #46633	; 0xb629
    5536:	f2c2 0304 	movt	r3, #8196	; 0x2004
    553a:	2200      	movs	r2, #0
    553c:	701a      	strb	r2, [r3, #0]
    553e:	e009      	b.n	5554 <send_boot+0x8e0>
    5540:	2004bc21 	.word	0x2004bc21
    5544:	2004bc22 	.word	0x2004bc22
    5548:	2004bc23 	.word	0x2004bc23
    554c:	2004bc25 	.word	0x2004bc25
    5550:	2004bc26 	.word	0x2004bc26
    5554:	f24b 6329 	movw	r3, #46633	; 0xb629
    5558:	f2c2 0304 	movt	r3, #8196	; 0x2004
    555c:	781b      	ldrb	r3, [r3, #0]
    555e:	461a      	mov	r2, r3
    5560:	f64b 4324 	movw	r3, #48164	; 0xbc24
    5564:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5568:	78d9      	ldrb	r1, [r3, #3]
    556a:	f24b 632c 	movw	r3, #46636	; 0xb62c
    556e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5572:	5499      	strb	r1, [r3, r2]
    5574:	4bd3      	ldr	r3, [pc, #844]	; (58c4 <send_boot+0xc50>)
    5576:	781a      	ldrb	r2, [r3, #0]
    5578:	f24b 732d 	movw	r3, #46893	; 0xb72d
    557c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5580:	781b      	ldrb	r3, [r3, #0]
    5582:	4413      	add	r3, r2
    5584:	b2da      	uxtb	r2, r3
    5586:	f24b 732d 	movw	r3, #46893	; 0xb72d
    558a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    558e:	701a      	strb	r2, [r3, #0]
    5590:	f24b 732e 	movw	r3, #46894	; 0xb72e
    5594:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5598:	781a      	ldrb	r2, [r3, #0]
    559a:	f24b 732d 	movw	r3, #46893	; 0xb72d
    559e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    55a2:	781b      	ldrb	r3, [r3, #0]
    55a4:	4413      	add	r3, r2
    55a6:	b2da      	uxtb	r2, r3
    55a8:	f24b 732e 	movw	r3, #46894	; 0xb72e
    55ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    55b0:	701a      	strb	r2, [r3, #0]
    55b2:	f24b 6329 	movw	r3, #46633	; 0xb629
    55b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    55ba:	781b      	ldrb	r3, [r3, #0]
    55bc:	3301      	adds	r3, #1
    55be:	b2da      	uxtb	r2, r3
    55c0:	f24b 6329 	movw	r3, #46633	; 0xb629
    55c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    55c8:	701a      	strb	r2, [r3, #0]
    55ca:	f24b 6329 	movw	r3, #46633	; 0xb629
    55ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    55d2:	781b      	ldrb	r3, [r3, #0]
    55d4:	2bff      	cmp	r3, #255	; 0xff
    55d6:	d105      	bne.n	55e4 <send_boot+0x970>
    55d8:	f24b 6329 	movw	r3, #46633	; 0xb629
    55dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    55e0:	2200      	movs	r2, #0
    55e2:	701a      	strb	r2, [r3, #0]
    55e4:	f24b 6329 	movw	r3, #46633	; 0xb629
    55e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    55ec:	781b      	ldrb	r3, [r3, #0]
    55ee:	461a      	mov	r2, r3
    55f0:	f64b 431c 	movw	r3, #48156	; 0xbc1c
    55f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    55f8:	7819      	ldrb	r1, [r3, #0]
    55fa:	f24b 632c 	movw	r3, #46636	; 0xb62c
    55fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5602:	5499      	strb	r1, [r3, r2]
    5604:	f64b 431c 	movw	r3, #48156	; 0xbc1c
    5608:	f2c2 0304 	movt	r3, #8196	; 0x2004
    560c:	781a      	ldrb	r2, [r3, #0]
    560e:	f24b 732d 	movw	r3, #46893	; 0xb72d
    5612:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5616:	781b      	ldrb	r3, [r3, #0]
    5618:	4413      	add	r3, r2
    561a:	b2da      	uxtb	r2, r3
    561c:	f24b 732d 	movw	r3, #46893	; 0xb72d
    5620:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5624:	701a      	strb	r2, [r3, #0]
    5626:	f24b 732e 	movw	r3, #46894	; 0xb72e
    562a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    562e:	781a      	ldrb	r2, [r3, #0]
    5630:	f24b 732d 	movw	r3, #46893	; 0xb72d
    5634:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5638:	781b      	ldrb	r3, [r3, #0]
    563a:	4413      	add	r3, r2
    563c:	b2da      	uxtb	r2, r3
    563e:	f24b 732e 	movw	r3, #46894	; 0xb72e
    5642:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5646:	701a      	strb	r2, [r3, #0]
    5648:	f24b 6329 	movw	r3, #46633	; 0xb629
    564c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5650:	781b      	ldrb	r3, [r3, #0]
    5652:	3301      	adds	r3, #1
    5654:	b2da      	uxtb	r2, r3
    5656:	f24b 6329 	movw	r3, #46633	; 0xb629
    565a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    565e:	701a      	strb	r2, [r3, #0]
    5660:	f24b 6329 	movw	r3, #46633	; 0xb629
    5664:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5668:	781b      	ldrb	r3, [r3, #0]
    566a:	2bff      	cmp	r3, #255	; 0xff
    566c:	d105      	bne.n	567a <send_boot+0xa06>
    566e:	f24b 6329 	movw	r3, #46633	; 0xb629
    5672:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5676:	2200      	movs	r2, #0
    5678:	701a      	strb	r2, [r3, #0]
    567a:	f24b 6329 	movw	r3, #46633	; 0xb629
    567e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5682:	781b      	ldrb	r3, [r3, #0]
    5684:	461a      	mov	r2, r3
    5686:	f64b 431c 	movw	r3, #48156	; 0xbc1c
    568a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    568e:	7859      	ldrb	r1, [r3, #1]
    5690:	f24b 632c 	movw	r3, #46636	; 0xb62c
    5694:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5698:	5499      	strb	r1, [r3, r2]
    569a:	4b8b      	ldr	r3, [pc, #556]	; (58c8 <send_boot+0xc54>)
    569c:	781a      	ldrb	r2, [r3, #0]
    569e:	f24b 732d 	movw	r3, #46893	; 0xb72d
    56a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    56a6:	781b      	ldrb	r3, [r3, #0]
    56a8:	4413      	add	r3, r2
    56aa:	b2da      	uxtb	r2, r3
    56ac:	f24b 732d 	movw	r3, #46893	; 0xb72d
    56b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    56b4:	701a      	strb	r2, [r3, #0]
    56b6:	f24b 732e 	movw	r3, #46894	; 0xb72e
    56ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    56be:	781a      	ldrb	r2, [r3, #0]
    56c0:	f24b 732d 	movw	r3, #46893	; 0xb72d
    56c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    56c8:	781b      	ldrb	r3, [r3, #0]
    56ca:	4413      	add	r3, r2
    56cc:	b2da      	uxtb	r2, r3
    56ce:	f24b 732e 	movw	r3, #46894	; 0xb72e
    56d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    56d6:	701a      	strb	r2, [r3, #0]
    56d8:	f24b 6329 	movw	r3, #46633	; 0xb629
    56dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    56e0:	781b      	ldrb	r3, [r3, #0]
    56e2:	3301      	adds	r3, #1
    56e4:	b2da      	uxtb	r2, r3
    56e6:	f24b 6329 	movw	r3, #46633	; 0xb629
    56ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    56ee:	701a      	strb	r2, [r3, #0]
    56f0:	f24b 6329 	movw	r3, #46633	; 0xb629
    56f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    56f8:	781b      	ldrb	r3, [r3, #0]
    56fa:	2bff      	cmp	r3, #255	; 0xff
    56fc:	d105      	bne.n	570a <send_boot+0xa96>
    56fe:	f24b 6329 	movw	r3, #46633	; 0xb629
    5702:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5706:	2200      	movs	r2, #0
    5708:	701a      	strb	r2, [r3, #0]
    570a:	f24b 6329 	movw	r3, #46633	; 0xb629
    570e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5712:	781b      	ldrb	r3, [r3, #0]
    5714:	461a      	mov	r2, r3
    5716:	f64b 431c 	movw	r3, #48156	; 0xbc1c
    571a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    571e:	7899      	ldrb	r1, [r3, #2]
    5720:	f24b 632c 	movw	r3, #46636	; 0xb62c
    5724:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5728:	5499      	strb	r1, [r3, r2]
    572a:	4b68      	ldr	r3, [pc, #416]	; (58cc <send_boot+0xc58>)
    572c:	781a      	ldrb	r2, [r3, #0]
    572e:	f24b 732d 	movw	r3, #46893	; 0xb72d
    5732:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5736:	781b      	ldrb	r3, [r3, #0]
    5738:	4413      	add	r3, r2
    573a:	b2da      	uxtb	r2, r3
    573c:	f24b 732d 	movw	r3, #46893	; 0xb72d
    5740:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5744:	701a      	strb	r2, [r3, #0]
    5746:	f24b 732e 	movw	r3, #46894	; 0xb72e
    574a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    574e:	781a      	ldrb	r2, [r3, #0]
    5750:	f24b 732d 	movw	r3, #46893	; 0xb72d
    5754:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5758:	781b      	ldrb	r3, [r3, #0]
    575a:	4413      	add	r3, r2
    575c:	b2da      	uxtb	r2, r3
    575e:	f24b 732e 	movw	r3, #46894	; 0xb72e
    5762:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5766:	701a      	strb	r2, [r3, #0]
    5768:	f24b 6329 	movw	r3, #46633	; 0xb629
    576c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5770:	781b      	ldrb	r3, [r3, #0]
    5772:	3301      	adds	r3, #1
    5774:	b2da      	uxtb	r2, r3
    5776:	f24b 6329 	movw	r3, #46633	; 0xb629
    577a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    577e:	701a      	strb	r2, [r3, #0]
    5780:	f24b 6329 	movw	r3, #46633	; 0xb629
    5784:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5788:	781b      	ldrb	r3, [r3, #0]
    578a:	2bff      	cmp	r3, #255	; 0xff
    578c:	d105      	bne.n	579a <send_boot+0xb26>
    578e:	f24b 6329 	movw	r3, #46633	; 0xb629
    5792:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5796:	2200      	movs	r2, #0
    5798:	701a      	strb	r2, [r3, #0]
    579a:	f24b 6329 	movw	r3, #46633	; 0xb629
    579e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    57a2:	781b      	ldrb	r3, [r3, #0]
    57a4:	461a      	mov	r2, r3
    57a6:	f64b 431c 	movw	r3, #48156	; 0xbc1c
    57aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    57ae:	78d9      	ldrb	r1, [r3, #3]
    57b0:	f24b 632c 	movw	r3, #46636	; 0xb62c
    57b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    57b8:	5499      	strb	r1, [r3, r2]
    57ba:	4b45      	ldr	r3, [pc, #276]	; (58d0 <send_boot+0xc5c>)
    57bc:	781a      	ldrb	r2, [r3, #0]
    57be:	f24b 732d 	movw	r3, #46893	; 0xb72d
    57c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    57c6:	781b      	ldrb	r3, [r3, #0]
    57c8:	4413      	add	r3, r2
    57ca:	b2da      	uxtb	r2, r3
    57cc:	f24b 732d 	movw	r3, #46893	; 0xb72d
    57d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    57d4:	701a      	strb	r2, [r3, #0]
    57d6:	f24b 732e 	movw	r3, #46894	; 0xb72e
    57da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    57de:	781a      	ldrb	r2, [r3, #0]
    57e0:	f24b 732d 	movw	r3, #46893	; 0xb72d
    57e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    57e8:	781b      	ldrb	r3, [r3, #0]
    57ea:	4413      	add	r3, r2
    57ec:	b2da      	uxtb	r2, r3
    57ee:	f24b 732e 	movw	r3, #46894	; 0xb72e
    57f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    57f6:	701a      	strb	r2, [r3, #0]
    57f8:	f24b 6329 	movw	r3, #46633	; 0xb629
    57fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5800:	781b      	ldrb	r3, [r3, #0]
    5802:	3301      	adds	r3, #1
    5804:	b2da      	uxtb	r2, r3
    5806:	f24b 6329 	movw	r3, #46633	; 0xb629
    580a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    580e:	701a      	strb	r2, [r3, #0]
    5810:	f24b 6329 	movw	r3, #46633	; 0xb629
    5814:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5818:	781b      	ldrb	r3, [r3, #0]
    581a:	2bff      	cmp	r3, #255	; 0xff
    581c:	d105      	bne.n	582a <send_boot+0xbb6>
    581e:	f24b 6329 	movw	r3, #46633	; 0xb629
    5822:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5826:	2200      	movs	r2, #0
    5828:	701a      	strb	r2, [r3, #0]
    582a:	f24b 6329 	movw	r3, #46633	; 0xb629
    582e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5832:	781b      	ldrb	r3, [r3, #0]
    5834:	461a      	mov	r2, r3
    5836:	f240 130a 	movw	r3, #266	; 0x10a
    583a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    583e:	7819      	ldrb	r1, [r3, #0]
    5840:	f24b 632c 	movw	r3, #46636	; 0xb62c
    5844:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5848:	5499      	strb	r1, [r3, r2]
    584a:	f240 130a 	movw	r3, #266	; 0x10a
    584e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5852:	781a      	ldrb	r2, [r3, #0]
    5854:	f24b 732d 	movw	r3, #46893	; 0xb72d
    5858:	f2c2 0304 	movt	r3, #8196	; 0x2004
    585c:	781b      	ldrb	r3, [r3, #0]
    585e:	4413      	add	r3, r2
    5860:	b2da      	uxtb	r2, r3
    5862:	f24b 732d 	movw	r3, #46893	; 0xb72d
    5866:	f2c2 0304 	movt	r3, #8196	; 0x2004
    586a:	701a      	strb	r2, [r3, #0]
    586c:	f24b 732e 	movw	r3, #46894	; 0xb72e
    5870:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5874:	781a      	ldrb	r2, [r3, #0]
    5876:	f24b 732d 	movw	r3, #46893	; 0xb72d
    587a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    587e:	781b      	ldrb	r3, [r3, #0]
    5880:	4413      	add	r3, r2
    5882:	b2da      	uxtb	r2, r3
    5884:	f24b 732e 	movw	r3, #46894	; 0xb72e
    5888:	f2c2 0304 	movt	r3, #8196	; 0x2004
    588c:	701a      	strb	r2, [r3, #0]
    588e:	f24b 6329 	movw	r3, #46633	; 0xb629
    5892:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5896:	781b      	ldrb	r3, [r3, #0]
    5898:	3301      	adds	r3, #1
    589a:	b2da      	uxtb	r2, r3
    589c:	f24b 6329 	movw	r3, #46633	; 0xb629
    58a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    58a4:	701a      	strb	r2, [r3, #0]
    58a6:	f24b 6329 	movw	r3, #46633	; 0xb629
    58aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    58ae:	781b      	ldrb	r3, [r3, #0]
    58b0:	2bff      	cmp	r3, #255	; 0xff
    58b2:	d10f      	bne.n	58d4 <send_boot+0xc60>
    58b4:	f24b 6329 	movw	r3, #46633	; 0xb629
    58b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    58bc:	2200      	movs	r2, #0
    58be:	701a      	strb	r2, [r3, #0]
    58c0:	e008      	b.n	58d4 <send_boot+0xc60>
    58c2:	bf00      	nop
    58c4:	2004bc27 	.word	0x2004bc27
    58c8:	2004bc1d 	.word	0x2004bc1d
    58cc:	2004bc1e 	.word	0x2004bc1e
    58d0:	2004bc1f 	.word	0x2004bc1f
    58d4:	f24b 6329 	movw	r3, #46633	; 0xb629
    58d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    58dc:	781b      	ldrb	r3, [r3, #0]
    58de:	461a      	mov	r2, r3
    58e0:	f240 130a 	movw	r3, #266	; 0x10a
    58e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58e8:	7859      	ldrb	r1, [r3, #1]
    58ea:	f24b 632c 	movw	r3, #46636	; 0xb62c
    58ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    58f2:	5499      	strb	r1, [r3, r2]
    58f4:	4bc5      	ldr	r3, [pc, #788]	; (5c0c <send_boot+0xf98>)
    58f6:	781a      	ldrb	r2, [r3, #0]
    58f8:	f24b 732d 	movw	r3, #46893	; 0xb72d
    58fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5900:	781b      	ldrb	r3, [r3, #0]
    5902:	4413      	add	r3, r2
    5904:	b2da      	uxtb	r2, r3
    5906:	f24b 732d 	movw	r3, #46893	; 0xb72d
    590a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    590e:	701a      	strb	r2, [r3, #0]
    5910:	f24b 732e 	movw	r3, #46894	; 0xb72e
    5914:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5918:	781a      	ldrb	r2, [r3, #0]
    591a:	f24b 732d 	movw	r3, #46893	; 0xb72d
    591e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5922:	781b      	ldrb	r3, [r3, #0]
    5924:	4413      	add	r3, r2
    5926:	b2da      	uxtb	r2, r3
    5928:	f24b 732e 	movw	r3, #46894	; 0xb72e
    592c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5930:	701a      	strb	r2, [r3, #0]
    5932:	f24b 6329 	movw	r3, #46633	; 0xb629
    5936:	f2c2 0304 	movt	r3, #8196	; 0x2004
    593a:	781b      	ldrb	r3, [r3, #0]
    593c:	3301      	adds	r3, #1
    593e:	b2da      	uxtb	r2, r3
    5940:	f24b 6329 	movw	r3, #46633	; 0xb629
    5944:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5948:	701a      	strb	r2, [r3, #0]
    594a:	f24b 6329 	movw	r3, #46633	; 0xb629
    594e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5952:	781b      	ldrb	r3, [r3, #0]
    5954:	2bff      	cmp	r3, #255	; 0xff
    5956:	d105      	bne.n	5964 <send_boot+0xcf0>
    5958:	f24b 6329 	movw	r3, #46633	; 0xb629
    595c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5960:	2200      	movs	r2, #0
    5962:	701a      	strb	r2, [r3, #0]
    5964:	f24b 6329 	movw	r3, #46633	; 0xb629
    5968:	f2c2 0304 	movt	r3, #8196	; 0x2004
    596c:	781b      	ldrb	r3, [r3, #0]
    596e:	461a      	mov	r2, r3
    5970:	f240 130c 	movw	r3, #268	; 0x10c
    5974:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5978:	7819      	ldrb	r1, [r3, #0]
    597a:	f24b 632c 	movw	r3, #46636	; 0xb62c
    597e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5982:	5499      	strb	r1, [r3, r2]
    5984:	f240 130c 	movw	r3, #268	; 0x10c
    5988:	f2c2 0300 	movt	r3, #8192	; 0x2000
    598c:	781a      	ldrb	r2, [r3, #0]
    598e:	f24b 732d 	movw	r3, #46893	; 0xb72d
    5992:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5996:	781b      	ldrb	r3, [r3, #0]
    5998:	4413      	add	r3, r2
    599a:	b2da      	uxtb	r2, r3
    599c:	f24b 732d 	movw	r3, #46893	; 0xb72d
    59a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    59a4:	701a      	strb	r2, [r3, #0]
    59a6:	f24b 732e 	movw	r3, #46894	; 0xb72e
    59aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    59ae:	781a      	ldrb	r2, [r3, #0]
    59b0:	f24b 732d 	movw	r3, #46893	; 0xb72d
    59b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    59b8:	781b      	ldrb	r3, [r3, #0]
    59ba:	4413      	add	r3, r2
    59bc:	b2da      	uxtb	r2, r3
    59be:	f24b 732e 	movw	r3, #46894	; 0xb72e
    59c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    59c6:	701a      	strb	r2, [r3, #0]
    59c8:	f24b 6329 	movw	r3, #46633	; 0xb629
    59cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    59d0:	781b      	ldrb	r3, [r3, #0]
    59d2:	3301      	adds	r3, #1
    59d4:	b2da      	uxtb	r2, r3
    59d6:	f24b 6329 	movw	r3, #46633	; 0xb629
    59da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    59de:	701a      	strb	r2, [r3, #0]
    59e0:	f24b 6329 	movw	r3, #46633	; 0xb629
    59e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    59e8:	781b      	ldrb	r3, [r3, #0]
    59ea:	2bff      	cmp	r3, #255	; 0xff
    59ec:	d105      	bne.n	59fa <send_boot+0xd86>
    59ee:	f24b 6329 	movw	r3, #46633	; 0xb629
    59f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    59f6:	2200      	movs	r2, #0
    59f8:	701a      	strb	r2, [r3, #0]
    59fa:	f24b 6329 	movw	r3, #46633	; 0xb629
    59fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5a02:	781b      	ldrb	r3, [r3, #0]
    5a04:	461a      	mov	r2, r3
    5a06:	f240 130c 	movw	r3, #268	; 0x10c
    5a0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a0e:	7859      	ldrb	r1, [r3, #1]
    5a10:	f24b 632c 	movw	r3, #46636	; 0xb62c
    5a14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5a18:	5499      	strb	r1, [r3, r2]
    5a1a:	4b7d      	ldr	r3, [pc, #500]	; (5c10 <send_boot+0xf9c>)
    5a1c:	781a      	ldrb	r2, [r3, #0]
    5a1e:	f24b 732d 	movw	r3, #46893	; 0xb72d
    5a22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5a26:	781b      	ldrb	r3, [r3, #0]
    5a28:	4413      	add	r3, r2
    5a2a:	b2da      	uxtb	r2, r3
    5a2c:	f24b 732d 	movw	r3, #46893	; 0xb72d
    5a30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5a34:	701a      	strb	r2, [r3, #0]
    5a36:	f24b 732e 	movw	r3, #46894	; 0xb72e
    5a3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5a3e:	781a      	ldrb	r2, [r3, #0]
    5a40:	f24b 732d 	movw	r3, #46893	; 0xb72d
    5a44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5a48:	781b      	ldrb	r3, [r3, #0]
    5a4a:	4413      	add	r3, r2
    5a4c:	b2da      	uxtb	r2, r3
    5a4e:	f24b 732e 	movw	r3, #46894	; 0xb72e
    5a52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5a56:	701a      	strb	r2, [r3, #0]
    5a58:	f24b 6329 	movw	r3, #46633	; 0xb629
    5a5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5a60:	781b      	ldrb	r3, [r3, #0]
    5a62:	3301      	adds	r3, #1
    5a64:	b2da      	uxtb	r2, r3
    5a66:	f24b 6329 	movw	r3, #46633	; 0xb629
    5a6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5a6e:	701a      	strb	r2, [r3, #0]
    5a70:	f24b 6329 	movw	r3, #46633	; 0xb629
    5a74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5a78:	781b      	ldrb	r3, [r3, #0]
    5a7a:	2bff      	cmp	r3, #255	; 0xff
    5a7c:	d105      	bne.n	5a8a <send_boot+0xe16>
    5a7e:	f24b 6329 	movw	r3, #46633	; 0xb629
    5a82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5a86:	2200      	movs	r2, #0
    5a88:	701a      	strb	r2, [r3, #0]
    5a8a:	f24b 6329 	movw	r3, #46633	; 0xb629
    5a8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5a92:	781b      	ldrb	r3, [r3, #0]
    5a94:	461a      	mov	r2, r3
    5a96:	f24b 732d 	movw	r3, #46893	; 0xb72d
    5a9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5a9e:	7819      	ldrb	r1, [r3, #0]
    5aa0:	f24b 632c 	movw	r3, #46636	; 0xb62c
    5aa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5aa8:	5499      	strb	r1, [r3, r2]
    5aaa:	f24b 6329 	movw	r3, #46633	; 0xb629
    5aae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ab2:	781b      	ldrb	r3, [r3, #0]
    5ab4:	3301      	adds	r3, #1
    5ab6:	b2da      	uxtb	r2, r3
    5ab8:	f24b 6329 	movw	r3, #46633	; 0xb629
    5abc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ac0:	701a      	strb	r2, [r3, #0]
    5ac2:	f24b 6329 	movw	r3, #46633	; 0xb629
    5ac6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5aca:	781b      	ldrb	r3, [r3, #0]
    5acc:	2bff      	cmp	r3, #255	; 0xff
    5ace:	d105      	bne.n	5adc <send_boot+0xe68>
    5ad0:	f24b 6329 	movw	r3, #46633	; 0xb629
    5ad4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ad8:	2200      	movs	r2, #0
    5ada:	701a      	strb	r2, [r3, #0]
    5adc:	f24b 6329 	movw	r3, #46633	; 0xb629
    5ae0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ae4:	781b      	ldrb	r3, [r3, #0]
    5ae6:	461a      	mov	r2, r3
    5ae8:	f24b 732e 	movw	r3, #46894	; 0xb72e
    5aec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5af0:	7819      	ldrb	r1, [r3, #0]
    5af2:	f24b 632c 	movw	r3, #46636	; 0xb62c
    5af6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5afa:	5499      	strb	r1, [r3, r2]
    5afc:	f24b 6329 	movw	r3, #46633	; 0xb629
    5b00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5b04:	781b      	ldrb	r3, [r3, #0]
    5b06:	3301      	adds	r3, #1
    5b08:	b2da      	uxtb	r2, r3
    5b0a:	f24b 6329 	movw	r3, #46633	; 0xb629
    5b0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5b12:	701a      	strb	r2, [r3, #0]
    5b14:	f24b 6329 	movw	r3, #46633	; 0xb629
    5b18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5b1c:	781b      	ldrb	r3, [r3, #0]
    5b1e:	2bff      	cmp	r3, #255	; 0xff
    5b20:	d105      	bne.n	5b2e <send_boot+0xeba>
    5b22:	f24b 6329 	movw	r3, #46633	; 0xb629
    5b26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5b2a:	2200      	movs	r2, #0
    5b2c:	701a      	strb	r2, [r3, #0]
    5b2e:	f248 0339 	movw	r3, #32825	; 0x8039
    5b32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b36:	781b      	ldrb	r3, [r3, #0]
    5b38:	b2db      	uxtb	r3, r3
    5b3a:	f003 0310 	and.w	r3, r3, #16
    5b3e:	2b00      	cmp	r3, #0
    5b40:	d15a      	bne.n	5bf8 <send_boot+0xf84>
    5b42:	f24b 632a 	movw	r3, #46634	; 0xb62a
    5b46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5b4a:	781b      	ldrb	r3, [r3, #0]
    5b4c:	b2db      	uxtb	r3, r3
    5b4e:	461a      	mov	r2, r3
    5b50:	f24b 632c 	movw	r3, #46636	; 0xb62c
    5b54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5b58:	5c9a      	ldrb	r2, [r3, r2]
    5b5a:	f24b 732b 	movw	r3, #46891	; 0xb72b
    5b5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5b62:	701a      	strb	r2, [r3, #0]
    5b64:	f24b 732c 	movw	r3, #46892	; 0xb72c
    5b68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5b6c:	2200      	movs	r2, #0
    5b6e:	701a      	strb	r2, [r3, #0]
    5b70:	f24b 632a 	movw	r3, #46634	; 0xb62a
    5b74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5b78:	781b      	ldrb	r3, [r3, #0]
    5b7a:	b2db      	uxtb	r3, r3
    5b7c:	3301      	adds	r3, #1
    5b7e:	b2da      	uxtb	r2, r3
    5b80:	f24b 632a 	movw	r3, #46634	; 0xb62a
    5b84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5b88:	701a      	strb	r2, [r3, #0]
    5b8a:	f24b 632a 	movw	r3, #46634	; 0xb62a
    5b8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5b92:	781b      	ldrb	r3, [r3, #0]
    5b94:	b2db      	uxtb	r3, r3
    5b96:	2bff      	cmp	r3, #255	; 0xff
    5b98:	d105      	bne.n	5ba6 <send_boot+0xf32>
    5b9a:	f24b 632a 	movw	r3, #46634	; 0xb62a
    5b9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ba2:	2200      	movs	r2, #0
    5ba4:	701a      	strb	r2, [r3, #0]
    5ba6:	f248 0338 	movw	r3, #32824	; 0x8038
    5baa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5bae:	f248 0238 	movw	r2, #32824	; 0x8038
    5bb2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5bb6:	7812      	ldrb	r2, [r2, #0]
    5bb8:	b2d2      	uxtb	r2, r2
    5bba:	f042 0201 	orr.w	r2, r2, #1
    5bbe:	b2d2      	uxtb	r2, r2
    5bc0:	701a      	strb	r2, [r3, #0]
    5bc2:	f248 0339 	movw	r3, #32825	; 0x8039
    5bc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5bca:	f248 0239 	movw	r2, #32825	; 0x8039
    5bce:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5bd2:	7812      	ldrb	r2, [r2, #0]
    5bd4:	b2d2      	uxtb	r2, r2
    5bd6:	f042 0210 	orr.w	r2, r2, #16
    5bda:	b2d2      	uxtb	r2, r2
    5bdc:	701a      	strb	r2, [r3, #0]
    5bde:	e00b      	b.n	5bf8 <send_boot+0xf84>
    5be0:	f24b 6328 	movw	r3, #46632	; 0xb628
    5be4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5be8:	781b      	ldrb	r3, [r3, #0]
    5bea:	3301      	adds	r3, #1
    5bec:	b2da      	uxtb	r2, r3
    5bee:	f24b 6328 	movw	r3, #46632	; 0xb628
    5bf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5bf6:	701a      	strb	r2, [r3, #0]
      boot = FALSE;
    5bf8:	f240 1305 	movw	r3, #261	; 0x105
    5bfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c00:	2200      	movs	r2, #0
    5c02:	701a      	strb	r2, [r3, #0]
  }
}
    5c04:	46bd      	mov	sp, r7
    5c06:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c0a:	4770      	bx	lr
    5c0c:	2000010b 	.word	0x2000010b
    5c10:	2000010d 	.word	0x2000010d

00005c14 <send_attitude>:
void send_attitude(void){ //499ms
    5c14:	b480      	push	{r7}
    5c16:	af00      	add	r7, sp, #0
    // add by wanbo
  //if(!boot)
  {
    count++;
    5c18:	f24b 6321 	movw	r3, #46625	; 0xb621
    5c1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5c20:	781b      	ldrb	r3, [r3, #0]
    5c22:	3301      	adds	r3, #1
    5c24:	b2da      	uxtb	r2, r3
    5c26:	f24b 6321 	movw	r3, #46625	; 0xb621
    5c2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5c2e:	701a      	strb	r2, [r3, #0]
    if (count == 250) count = 0;
    5c30:	f24b 6321 	movw	r3, #46625	; 0xb621
    5c34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5c38:	781b      	ldrb	r3, [r3, #0]
    5c3a:	2bfa      	cmp	r3, #250	; 0xfa
    5c3c:	d105      	bne.n	5c4a <send_attitude+0x36>
    5c3e:	f24b 6321 	movw	r3, #46625	; 0xb621
    5c42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5c46:	2200      	movs	r2, #0
    5c48:	701a      	strb	r2, [r3, #0]
    if (count % 5 == 0) 
    5c4a:	f24b 6321 	movw	r3, #46625	; 0xb621
    5c4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5c52:	781a      	ldrb	r2, [r3, #0]
    5c54:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    5c58:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    5c5c:	fba3 1302 	umull	r1, r3, r3, r2
    5c60:	0899      	lsrs	r1, r3, #2
    5c62:	460b      	mov	r3, r1
    5c64:	009b      	lsls	r3, r3, #2
    5c66:	440b      	add	r3, r1
    5c68:	1ad3      	subs	r3, r2, r3
    5c6a:	b2db      	uxtb	r3, r3
    5c6c:	2b00      	cmp	r3, #0
    5c6e:	f040 84c1 	bne.w	65f4 <send_attitude+0x9e0>
       PERIODIC_SEND_ATTITUDE(); 
    5c72:	f24b 6329 	movw	r3, #46633	; 0xb629
    5c76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5c7a:	781a      	ldrb	r2, [r3, #0]
    5c7c:	f24b 632a 	movw	r3, #46634	; 0xb62a
    5c80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5c84:	781b      	ldrb	r3, [r3, #0]
    5c86:	b2db      	uxtb	r3, r3
    5c88:	429a      	cmp	r2, r3
    5c8a:	d313      	bcc.n	5cb4 <send_attitude+0xa0>
    5c8c:	f24b 632a 	movw	r3, #46634	; 0xb62a
    5c90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5c94:	781b      	ldrb	r3, [r3, #0]
    5c96:	b2db      	uxtb	r3, r3
    5c98:	461a      	mov	r2, r3
    5c9a:	f24b 6329 	movw	r3, #46633	; 0xb629
    5c9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ca2:	781b      	ldrb	r3, [r3, #0]
    5ca4:	1ad3      	subs	r3, r2, r3
    5ca6:	33ff      	adds	r3, #255	; 0xff
    5ca8:	2b10      	cmp	r3, #16
    5caa:	bfd4      	ite	le
    5cac:	2300      	movle	r3, #0
    5cae:	2301      	movgt	r3, #1
    5cb0:	b2db      	uxtb	r3, r3
    5cb2:	e011      	b.n	5cd8 <send_attitude+0xc4>
    5cb4:	f24b 632a 	movw	r3, #46634	; 0xb62a
    5cb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5cbc:	781b      	ldrb	r3, [r3, #0]
    5cbe:	b2db      	uxtb	r3, r3
    5cc0:	461a      	mov	r2, r3
    5cc2:	f24b 6329 	movw	r3, #46633	; 0xb629
    5cc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5cca:	781b      	ldrb	r3, [r3, #0]
    5ccc:	1ad3      	subs	r3, r2, r3
    5cce:	2b10      	cmp	r3, #16
    5cd0:	bfd4      	ite	le
    5cd2:	2300      	movle	r3, #0
    5cd4:	2301      	movgt	r3, #1
    5cd6:	b2db      	uxtb	r3, r3
    5cd8:	2b00      	cmp	r3, #0
    5cda:	f000 847f 	beq.w	65dc <send_attitude+0x9c8>
    5cde:	f24b 6329 	movw	r3, #46633	; 0xb629
    5ce2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ce6:	781b      	ldrb	r3, [r3, #0]
    5ce8:	461a      	mov	r2, r3
    5cea:	f24b 632c 	movw	r3, #46636	; 0xb62c
    5cee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5cf2:	2105      	movs	r1, #5
    5cf4:	5499      	strb	r1, [r3, r2]
    5cf6:	f24b 6329 	movw	r3, #46633	; 0xb629
    5cfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5cfe:	781b      	ldrb	r3, [r3, #0]
    5d00:	3301      	adds	r3, #1
    5d02:	b2da      	uxtb	r2, r3
    5d04:	f24b 6329 	movw	r3, #46633	; 0xb629
    5d08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d0c:	701a      	strb	r2, [r3, #0]
    5d0e:	f24b 6329 	movw	r3, #46633	; 0xb629
    5d12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d16:	781b      	ldrb	r3, [r3, #0]
    5d18:	2bff      	cmp	r3, #255	; 0xff
    5d1a:	d105      	bne.n	5d28 <send_attitude+0x114>
    5d1c:	f24b 6329 	movw	r3, #46633	; 0xb629
    5d20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d24:	2200      	movs	r2, #0
    5d26:	701a      	strb	r2, [r3, #0]
    5d28:	f24b 6329 	movw	r3, #46633	; 0xb629
    5d2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d30:	781b      	ldrb	r3, [r3, #0]
    5d32:	461a      	mov	r2, r3
    5d34:	f24b 632c 	movw	r3, #46636	; 0xb62c
    5d38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d3c:	2106      	movs	r1, #6
    5d3e:	5499      	strb	r1, [r3, r2]
    5d40:	f24b 6329 	movw	r3, #46633	; 0xb629
    5d44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d48:	781b      	ldrb	r3, [r3, #0]
    5d4a:	3301      	adds	r3, #1
    5d4c:	b2da      	uxtb	r2, r3
    5d4e:	f24b 6329 	movw	r3, #46633	; 0xb629
    5d52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d56:	701a      	strb	r2, [r3, #0]
    5d58:	f24b 6329 	movw	r3, #46633	; 0xb629
    5d5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d60:	781b      	ldrb	r3, [r3, #0]
    5d62:	2bff      	cmp	r3, #255	; 0xff
    5d64:	d105      	bne.n	5d72 <send_attitude+0x15e>
    5d66:	f24b 6329 	movw	r3, #46633	; 0xb629
    5d6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d6e:	2200      	movs	r2, #0
    5d70:	701a      	strb	r2, [r3, #0]
    5d72:	f24b 732d 	movw	r3, #46893	; 0xb72d
    5d76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d7a:	2206      	movs	r2, #6
    5d7c:	701a      	strb	r2, [r3, #0]
    5d7e:	f24b 732e 	movw	r3, #46894	; 0xb72e
    5d82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d86:	2206      	movs	r2, #6
    5d88:	701a      	strb	r2, [r3, #0]
    5d8a:	f24b 6329 	movw	r3, #46633	; 0xb629
    5d8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d92:	781b      	ldrb	r3, [r3, #0]
    5d94:	461a      	mov	r2, r3
    5d96:	f64b 33e8 	movw	r3, #48104	; 0xbbe8
    5d9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d9e:	7819      	ldrb	r1, [r3, #0]
    5da0:	f24b 632c 	movw	r3, #46636	; 0xb62c
    5da4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5da8:	5499      	strb	r1, [r3, r2]
    5daa:	f64b 33e8 	movw	r3, #48104	; 0xbbe8
    5dae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5db2:	781a      	ldrb	r2, [r3, #0]
    5db4:	f24b 732d 	movw	r3, #46893	; 0xb72d
    5db8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5dbc:	781b      	ldrb	r3, [r3, #0]
    5dbe:	4413      	add	r3, r2
    5dc0:	b2da      	uxtb	r2, r3
    5dc2:	f24b 732d 	movw	r3, #46893	; 0xb72d
    5dc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5dca:	701a      	strb	r2, [r3, #0]
    5dcc:	f24b 732e 	movw	r3, #46894	; 0xb72e
    5dd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5dd4:	781a      	ldrb	r2, [r3, #0]
    5dd6:	f24b 732d 	movw	r3, #46893	; 0xb72d
    5dda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5dde:	781b      	ldrb	r3, [r3, #0]
    5de0:	4413      	add	r3, r2
    5de2:	b2da      	uxtb	r2, r3
    5de4:	f24b 732e 	movw	r3, #46894	; 0xb72e
    5de8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5dec:	701a      	strb	r2, [r3, #0]
    5dee:	f24b 6329 	movw	r3, #46633	; 0xb629
    5df2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5df6:	781b      	ldrb	r3, [r3, #0]
    5df8:	3301      	adds	r3, #1
    5dfa:	b2da      	uxtb	r2, r3
    5dfc:	f24b 6329 	movw	r3, #46633	; 0xb629
    5e00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e04:	701a      	strb	r2, [r3, #0]
    5e06:	f24b 6329 	movw	r3, #46633	; 0xb629
    5e0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e0e:	781b      	ldrb	r3, [r3, #0]
    5e10:	2bff      	cmp	r3, #255	; 0xff
    5e12:	d105      	bne.n	5e20 <send_attitude+0x20c>
    5e14:	f24b 6329 	movw	r3, #46633	; 0xb629
    5e18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e1c:	2200      	movs	r2, #0
    5e1e:	701a      	strb	r2, [r3, #0]
    5e20:	f24b 6329 	movw	r3, #46633	; 0xb629
    5e24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e28:	781b      	ldrb	r3, [r3, #0]
    5e2a:	461a      	mov	r2, r3
    5e2c:	f64b 33e8 	movw	r3, #48104	; 0xbbe8
    5e30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e34:	7859      	ldrb	r1, [r3, #1]
    5e36:	f24b 632c 	movw	r3, #46636	; 0xb62c
    5e3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e3e:	5499      	strb	r1, [r3, r2]
    5e40:	4bd1      	ldr	r3, [pc, #836]	; (6188 <send_attitude+0x574>)
    5e42:	781a      	ldrb	r2, [r3, #0]
    5e44:	f24b 732d 	movw	r3, #46893	; 0xb72d
    5e48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e4c:	781b      	ldrb	r3, [r3, #0]
    5e4e:	4413      	add	r3, r2
    5e50:	b2da      	uxtb	r2, r3
    5e52:	f24b 732d 	movw	r3, #46893	; 0xb72d
    5e56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e5a:	701a      	strb	r2, [r3, #0]
    5e5c:	f24b 732e 	movw	r3, #46894	; 0xb72e
    5e60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e64:	781a      	ldrb	r2, [r3, #0]
    5e66:	f24b 732d 	movw	r3, #46893	; 0xb72d
    5e6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e6e:	781b      	ldrb	r3, [r3, #0]
    5e70:	4413      	add	r3, r2
    5e72:	b2da      	uxtb	r2, r3
    5e74:	f24b 732e 	movw	r3, #46894	; 0xb72e
    5e78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e7c:	701a      	strb	r2, [r3, #0]
    5e7e:	f24b 6329 	movw	r3, #46633	; 0xb629
    5e82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e86:	781b      	ldrb	r3, [r3, #0]
    5e88:	3301      	adds	r3, #1
    5e8a:	b2da      	uxtb	r2, r3
    5e8c:	f24b 6329 	movw	r3, #46633	; 0xb629
    5e90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e94:	701a      	strb	r2, [r3, #0]
    5e96:	f24b 6329 	movw	r3, #46633	; 0xb629
    5e9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e9e:	781b      	ldrb	r3, [r3, #0]
    5ea0:	2bff      	cmp	r3, #255	; 0xff
    5ea2:	d105      	bne.n	5eb0 <send_attitude+0x29c>
    5ea4:	f24b 6329 	movw	r3, #46633	; 0xb629
    5ea8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5eac:	2200      	movs	r2, #0
    5eae:	701a      	strb	r2, [r3, #0]
    5eb0:	f24b 6329 	movw	r3, #46633	; 0xb629
    5eb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5eb8:	781b      	ldrb	r3, [r3, #0]
    5eba:	461a      	mov	r2, r3
    5ebc:	f64b 33e8 	movw	r3, #48104	; 0xbbe8
    5ec0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ec4:	7899      	ldrb	r1, [r3, #2]
    5ec6:	f24b 632c 	movw	r3, #46636	; 0xb62c
    5eca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ece:	5499      	strb	r1, [r3, r2]
    5ed0:	4bae      	ldr	r3, [pc, #696]	; (618c <send_attitude+0x578>)
    5ed2:	781a      	ldrb	r2, [r3, #0]
    5ed4:	f24b 732d 	movw	r3, #46893	; 0xb72d
    5ed8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5edc:	781b      	ldrb	r3, [r3, #0]
    5ede:	4413      	add	r3, r2
    5ee0:	b2da      	uxtb	r2, r3
    5ee2:	f24b 732d 	movw	r3, #46893	; 0xb72d
    5ee6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5eea:	701a      	strb	r2, [r3, #0]
    5eec:	f24b 732e 	movw	r3, #46894	; 0xb72e
    5ef0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ef4:	781a      	ldrb	r2, [r3, #0]
    5ef6:	f24b 732d 	movw	r3, #46893	; 0xb72d
    5efa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5efe:	781b      	ldrb	r3, [r3, #0]
    5f00:	4413      	add	r3, r2
    5f02:	b2da      	uxtb	r2, r3
    5f04:	f24b 732e 	movw	r3, #46894	; 0xb72e
    5f08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f0c:	701a      	strb	r2, [r3, #0]
    5f0e:	f24b 6329 	movw	r3, #46633	; 0xb629
    5f12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f16:	781b      	ldrb	r3, [r3, #0]
    5f18:	3301      	adds	r3, #1
    5f1a:	b2da      	uxtb	r2, r3
    5f1c:	f24b 6329 	movw	r3, #46633	; 0xb629
    5f20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f24:	701a      	strb	r2, [r3, #0]
    5f26:	f24b 6329 	movw	r3, #46633	; 0xb629
    5f2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f2e:	781b      	ldrb	r3, [r3, #0]
    5f30:	2bff      	cmp	r3, #255	; 0xff
    5f32:	d105      	bne.n	5f40 <send_attitude+0x32c>
    5f34:	f24b 6329 	movw	r3, #46633	; 0xb629
    5f38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f3c:	2200      	movs	r2, #0
    5f3e:	701a      	strb	r2, [r3, #0]
    5f40:	f24b 6329 	movw	r3, #46633	; 0xb629
    5f44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f48:	781b      	ldrb	r3, [r3, #0]
    5f4a:	461a      	mov	r2, r3
    5f4c:	f64b 33e8 	movw	r3, #48104	; 0xbbe8
    5f50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f54:	78d9      	ldrb	r1, [r3, #3]
    5f56:	f24b 632c 	movw	r3, #46636	; 0xb62c
    5f5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f5e:	5499      	strb	r1, [r3, r2]
    5f60:	4b8b      	ldr	r3, [pc, #556]	; (6190 <send_attitude+0x57c>)
    5f62:	781a      	ldrb	r2, [r3, #0]
    5f64:	f24b 732d 	movw	r3, #46893	; 0xb72d
    5f68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f6c:	781b      	ldrb	r3, [r3, #0]
    5f6e:	4413      	add	r3, r2
    5f70:	b2da      	uxtb	r2, r3
    5f72:	f24b 732d 	movw	r3, #46893	; 0xb72d
    5f76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f7a:	701a      	strb	r2, [r3, #0]
    5f7c:	f24b 732e 	movw	r3, #46894	; 0xb72e
    5f80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f84:	781a      	ldrb	r2, [r3, #0]
    5f86:	f24b 732d 	movw	r3, #46893	; 0xb72d
    5f8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f8e:	781b      	ldrb	r3, [r3, #0]
    5f90:	4413      	add	r3, r2
    5f92:	b2da      	uxtb	r2, r3
    5f94:	f24b 732e 	movw	r3, #46894	; 0xb72e
    5f98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f9c:	701a      	strb	r2, [r3, #0]
    5f9e:	f24b 6329 	movw	r3, #46633	; 0xb629
    5fa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5fa6:	781b      	ldrb	r3, [r3, #0]
    5fa8:	3301      	adds	r3, #1
    5faa:	b2da      	uxtb	r2, r3
    5fac:	f24b 6329 	movw	r3, #46633	; 0xb629
    5fb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5fb4:	701a      	strb	r2, [r3, #0]
    5fb6:	f24b 6329 	movw	r3, #46633	; 0xb629
    5fba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5fbe:	781b      	ldrb	r3, [r3, #0]
    5fc0:	2bff      	cmp	r3, #255	; 0xff
    5fc2:	d105      	bne.n	5fd0 <send_attitude+0x3bc>
    5fc4:	f24b 6329 	movw	r3, #46633	; 0xb629
    5fc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5fcc:	2200      	movs	r2, #0
    5fce:	701a      	strb	r2, [r3, #0]
    5fd0:	f24b 6329 	movw	r3, #46633	; 0xb629
    5fd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5fd8:	781b      	ldrb	r3, [r3, #0]
    5fda:	461a      	mov	r2, r3
    5fdc:	f64b 33ec 	movw	r3, #48108	; 0xbbec
    5fe0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5fe4:	7819      	ldrb	r1, [r3, #0]
    5fe6:	f24b 632c 	movw	r3, #46636	; 0xb62c
    5fea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5fee:	5499      	strb	r1, [r3, r2]
    5ff0:	f64b 33ec 	movw	r3, #48108	; 0xbbec
    5ff4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ff8:	781a      	ldrb	r2, [r3, #0]
    5ffa:	f24b 732d 	movw	r3, #46893	; 0xb72d
    5ffe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6002:	781b      	ldrb	r3, [r3, #0]
    6004:	4413      	add	r3, r2
    6006:	b2da      	uxtb	r2, r3
    6008:	f24b 732d 	movw	r3, #46893	; 0xb72d
    600c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6010:	701a      	strb	r2, [r3, #0]
    6012:	f24b 732e 	movw	r3, #46894	; 0xb72e
    6016:	f2c2 0304 	movt	r3, #8196	; 0x2004
    601a:	781a      	ldrb	r2, [r3, #0]
    601c:	f24b 732d 	movw	r3, #46893	; 0xb72d
    6020:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6024:	781b      	ldrb	r3, [r3, #0]
    6026:	4413      	add	r3, r2
    6028:	b2da      	uxtb	r2, r3
    602a:	f24b 732e 	movw	r3, #46894	; 0xb72e
    602e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6032:	701a      	strb	r2, [r3, #0]
    6034:	f24b 6329 	movw	r3, #46633	; 0xb629
    6038:	f2c2 0304 	movt	r3, #8196	; 0x2004
    603c:	781b      	ldrb	r3, [r3, #0]
    603e:	3301      	adds	r3, #1
    6040:	b2da      	uxtb	r2, r3
    6042:	f24b 6329 	movw	r3, #46633	; 0xb629
    6046:	f2c2 0304 	movt	r3, #8196	; 0x2004
    604a:	701a      	strb	r2, [r3, #0]
    604c:	f24b 6329 	movw	r3, #46633	; 0xb629
    6050:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6054:	781b      	ldrb	r3, [r3, #0]
    6056:	2bff      	cmp	r3, #255	; 0xff
    6058:	d105      	bne.n	6066 <send_attitude+0x452>
    605a:	f24b 6329 	movw	r3, #46633	; 0xb629
    605e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6062:	2200      	movs	r2, #0
    6064:	701a      	strb	r2, [r3, #0]
    6066:	f24b 6329 	movw	r3, #46633	; 0xb629
    606a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    606e:	781b      	ldrb	r3, [r3, #0]
    6070:	461a      	mov	r2, r3
    6072:	f64b 33ec 	movw	r3, #48108	; 0xbbec
    6076:	f2c2 0304 	movt	r3, #8196	; 0x2004
    607a:	7859      	ldrb	r1, [r3, #1]
    607c:	f24b 632c 	movw	r3, #46636	; 0xb62c
    6080:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6084:	5499      	strb	r1, [r3, r2]
    6086:	4b43      	ldr	r3, [pc, #268]	; (6194 <send_attitude+0x580>)
    6088:	781a      	ldrb	r2, [r3, #0]
    608a:	f24b 732d 	movw	r3, #46893	; 0xb72d
    608e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6092:	781b      	ldrb	r3, [r3, #0]
    6094:	4413      	add	r3, r2
    6096:	b2da      	uxtb	r2, r3
    6098:	f24b 732d 	movw	r3, #46893	; 0xb72d
    609c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60a0:	701a      	strb	r2, [r3, #0]
    60a2:	f24b 732e 	movw	r3, #46894	; 0xb72e
    60a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60aa:	781a      	ldrb	r2, [r3, #0]
    60ac:	f24b 732d 	movw	r3, #46893	; 0xb72d
    60b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60b4:	781b      	ldrb	r3, [r3, #0]
    60b6:	4413      	add	r3, r2
    60b8:	b2da      	uxtb	r2, r3
    60ba:	f24b 732e 	movw	r3, #46894	; 0xb72e
    60be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60c2:	701a      	strb	r2, [r3, #0]
    60c4:	f24b 6329 	movw	r3, #46633	; 0xb629
    60c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60cc:	781b      	ldrb	r3, [r3, #0]
    60ce:	3301      	adds	r3, #1
    60d0:	b2da      	uxtb	r2, r3
    60d2:	f24b 6329 	movw	r3, #46633	; 0xb629
    60d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60da:	701a      	strb	r2, [r3, #0]
    60dc:	f24b 6329 	movw	r3, #46633	; 0xb629
    60e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60e4:	781b      	ldrb	r3, [r3, #0]
    60e6:	2bff      	cmp	r3, #255	; 0xff
    60e8:	d105      	bne.n	60f6 <send_attitude+0x4e2>
    60ea:	f24b 6329 	movw	r3, #46633	; 0xb629
    60ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60f2:	2200      	movs	r2, #0
    60f4:	701a      	strb	r2, [r3, #0]
    60f6:	f24b 6329 	movw	r3, #46633	; 0xb629
    60fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60fe:	781b      	ldrb	r3, [r3, #0]
    6100:	461a      	mov	r2, r3
    6102:	f64b 33ec 	movw	r3, #48108	; 0xbbec
    6106:	f2c2 0304 	movt	r3, #8196	; 0x2004
    610a:	7899      	ldrb	r1, [r3, #2]
    610c:	f24b 632c 	movw	r3, #46636	; 0xb62c
    6110:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6114:	5499      	strb	r1, [r3, r2]
    6116:	4b20      	ldr	r3, [pc, #128]	; (6198 <send_attitude+0x584>)
    6118:	781a      	ldrb	r2, [r3, #0]
    611a:	f24b 732d 	movw	r3, #46893	; 0xb72d
    611e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6122:	781b      	ldrb	r3, [r3, #0]
    6124:	4413      	add	r3, r2
    6126:	b2da      	uxtb	r2, r3
    6128:	f24b 732d 	movw	r3, #46893	; 0xb72d
    612c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6130:	701a      	strb	r2, [r3, #0]
    6132:	f24b 732e 	movw	r3, #46894	; 0xb72e
    6136:	f2c2 0304 	movt	r3, #8196	; 0x2004
    613a:	781a      	ldrb	r2, [r3, #0]
    613c:	f24b 732d 	movw	r3, #46893	; 0xb72d
    6140:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6144:	781b      	ldrb	r3, [r3, #0]
    6146:	4413      	add	r3, r2
    6148:	b2da      	uxtb	r2, r3
    614a:	f24b 732e 	movw	r3, #46894	; 0xb72e
    614e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6152:	701a      	strb	r2, [r3, #0]
    6154:	f24b 6329 	movw	r3, #46633	; 0xb629
    6158:	f2c2 0304 	movt	r3, #8196	; 0x2004
    615c:	781b      	ldrb	r3, [r3, #0]
    615e:	3301      	adds	r3, #1
    6160:	b2da      	uxtb	r2, r3
    6162:	f24b 6329 	movw	r3, #46633	; 0xb629
    6166:	f2c2 0304 	movt	r3, #8196	; 0x2004
    616a:	701a      	strb	r2, [r3, #0]
    616c:	f24b 6329 	movw	r3, #46633	; 0xb629
    6170:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6174:	781b      	ldrb	r3, [r3, #0]
    6176:	2bff      	cmp	r3, #255	; 0xff
    6178:	d110      	bne.n	619c <send_attitude+0x588>
    617a:	f24b 6329 	movw	r3, #46633	; 0xb629
    617e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6182:	2200      	movs	r2, #0
    6184:	701a      	strb	r2, [r3, #0]
    6186:	e009      	b.n	619c <send_attitude+0x588>
    6188:	2004bbe9 	.word	0x2004bbe9
    618c:	2004bbea 	.word	0x2004bbea
    6190:	2004bbeb 	.word	0x2004bbeb
    6194:	2004bbed 	.word	0x2004bbed
    6198:	2004bbee 	.word	0x2004bbee
    619c:	f24b 6329 	movw	r3, #46633	; 0xb629
    61a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61a4:	781b      	ldrb	r3, [r3, #0]
    61a6:	461a      	mov	r2, r3
    61a8:	f64b 33ec 	movw	r3, #48108	; 0xbbec
    61ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61b0:	78d9      	ldrb	r1, [r3, #3]
    61b2:	f24b 632c 	movw	r3, #46636	; 0xb62c
    61b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61ba:	5499      	strb	r1, [r3, r2]
    61bc:	4bc2      	ldr	r3, [pc, #776]	; (64c8 <send_attitude+0x8b4>)
    61be:	781a      	ldrb	r2, [r3, #0]
    61c0:	f24b 732d 	movw	r3, #46893	; 0xb72d
    61c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61c8:	781b      	ldrb	r3, [r3, #0]
    61ca:	4413      	add	r3, r2
    61cc:	b2da      	uxtb	r2, r3
    61ce:	f24b 732d 	movw	r3, #46893	; 0xb72d
    61d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61d6:	701a      	strb	r2, [r3, #0]
    61d8:	f24b 732e 	movw	r3, #46894	; 0xb72e
    61dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61e0:	781a      	ldrb	r2, [r3, #0]
    61e2:	f24b 732d 	movw	r3, #46893	; 0xb72d
    61e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61ea:	781b      	ldrb	r3, [r3, #0]
    61ec:	4413      	add	r3, r2
    61ee:	b2da      	uxtb	r2, r3
    61f0:	f24b 732e 	movw	r3, #46894	; 0xb72e
    61f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61f8:	701a      	strb	r2, [r3, #0]
    61fa:	f24b 6329 	movw	r3, #46633	; 0xb629
    61fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6202:	781b      	ldrb	r3, [r3, #0]
    6204:	3301      	adds	r3, #1
    6206:	b2da      	uxtb	r2, r3
    6208:	f24b 6329 	movw	r3, #46633	; 0xb629
    620c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6210:	701a      	strb	r2, [r3, #0]
    6212:	f24b 6329 	movw	r3, #46633	; 0xb629
    6216:	f2c2 0304 	movt	r3, #8196	; 0x2004
    621a:	781b      	ldrb	r3, [r3, #0]
    621c:	2bff      	cmp	r3, #255	; 0xff
    621e:	d105      	bne.n	622c <send_attitude+0x618>
    6220:	f24b 6329 	movw	r3, #46633	; 0xb629
    6224:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6228:	2200      	movs	r2, #0
    622a:	701a      	strb	r2, [r3, #0]
    622c:	f24b 6329 	movw	r3, #46633	; 0xb629
    6230:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6234:	781b      	ldrb	r3, [r3, #0]
    6236:	461a      	mov	r2, r3
    6238:	f64b 33f0 	movw	r3, #48112	; 0xbbf0
    623c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6240:	7819      	ldrb	r1, [r3, #0]
    6242:	f24b 632c 	movw	r3, #46636	; 0xb62c
    6246:	f2c2 0304 	movt	r3, #8196	; 0x2004
    624a:	5499      	strb	r1, [r3, r2]
    624c:	f64b 33f0 	movw	r3, #48112	; 0xbbf0
    6250:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6254:	781a      	ldrb	r2, [r3, #0]
    6256:	f24b 732d 	movw	r3, #46893	; 0xb72d
    625a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    625e:	781b      	ldrb	r3, [r3, #0]
    6260:	4413      	add	r3, r2
    6262:	b2da      	uxtb	r2, r3
    6264:	f24b 732d 	movw	r3, #46893	; 0xb72d
    6268:	f2c2 0304 	movt	r3, #8196	; 0x2004
    626c:	701a      	strb	r2, [r3, #0]
    626e:	f24b 732e 	movw	r3, #46894	; 0xb72e
    6272:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6276:	781a      	ldrb	r2, [r3, #0]
    6278:	f24b 732d 	movw	r3, #46893	; 0xb72d
    627c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6280:	781b      	ldrb	r3, [r3, #0]
    6282:	4413      	add	r3, r2
    6284:	b2da      	uxtb	r2, r3
    6286:	f24b 732e 	movw	r3, #46894	; 0xb72e
    628a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    628e:	701a      	strb	r2, [r3, #0]
    6290:	f24b 6329 	movw	r3, #46633	; 0xb629
    6294:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6298:	781b      	ldrb	r3, [r3, #0]
    629a:	3301      	adds	r3, #1
    629c:	b2da      	uxtb	r2, r3
    629e:	f24b 6329 	movw	r3, #46633	; 0xb629
    62a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62a6:	701a      	strb	r2, [r3, #0]
    62a8:	f24b 6329 	movw	r3, #46633	; 0xb629
    62ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62b0:	781b      	ldrb	r3, [r3, #0]
    62b2:	2bff      	cmp	r3, #255	; 0xff
    62b4:	d105      	bne.n	62c2 <send_attitude+0x6ae>
    62b6:	f24b 6329 	movw	r3, #46633	; 0xb629
    62ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62be:	2200      	movs	r2, #0
    62c0:	701a      	strb	r2, [r3, #0]
    62c2:	f24b 6329 	movw	r3, #46633	; 0xb629
    62c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62ca:	781b      	ldrb	r3, [r3, #0]
    62cc:	461a      	mov	r2, r3
    62ce:	f64b 33f0 	movw	r3, #48112	; 0xbbf0
    62d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62d6:	7859      	ldrb	r1, [r3, #1]
    62d8:	f24b 632c 	movw	r3, #46636	; 0xb62c
    62dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62e0:	5499      	strb	r1, [r3, r2]
    62e2:	4b7a      	ldr	r3, [pc, #488]	; (64cc <send_attitude+0x8b8>)
    62e4:	781a      	ldrb	r2, [r3, #0]
    62e6:	f24b 732d 	movw	r3, #46893	; 0xb72d
    62ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62ee:	781b      	ldrb	r3, [r3, #0]
    62f0:	4413      	add	r3, r2
    62f2:	b2da      	uxtb	r2, r3
    62f4:	f24b 732d 	movw	r3, #46893	; 0xb72d
    62f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62fc:	701a      	strb	r2, [r3, #0]
    62fe:	f24b 732e 	movw	r3, #46894	; 0xb72e
    6302:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6306:	781a      	ldrb	r2, [r3, #0]
    6308:	f24b 732d 	movw	r3, #46893	; 0xb72d
    630c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6310:	781b      	ldrb	r3, [r3, #0]
    6312:	4413      	add	r3, r2
    6314:	b2da      	uxtb	r2, r3
    6316:	f24b 732e 	movw	r3, #46894	; 0xb72e
    631a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    631e:	701a      	strb	r2, [r3, #0]
    6320:	f24b 6329 	movw	r3, #46633	; 0xb629
    6324:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6328:	781b      	ldrb	r3, [r3, #0]
    632a:	3301      	adds	r3, #1
    632c:	b2da      	uxtb	r2, r3
    632e:	f24b 6329 	movw	r3, #46633	; 0xb629
    6332:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6336:	701a      	strb	r2, [r3, #0]
    6338:	f24b 6329 	movw	r3, #46633	; 0xb629
    633c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6340:	781b      	ldrb	r3, [r3, #0]
    6342:	2bff      	cmp	r3, #255	; 0xff
    6344:	d105      	bne.n	6352 <send_attitude+0x73e>
    6346:	f24b 6329 	movw	r3, #46633	; 0xb629
    634a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    634e:	2200      	movs	r2, #0
    6350:	701a      	strb	r2, [r3, #0]
    6352:	f24b 6329 	movw	r3, #46633	; 0xb629
    6356:	f2c2 0304 	movt	r3, #8196	; 0x2004
    635a:	781b      	ldrb	r3, [r3, #0]
    635c:	461a      	mov	r2, r3
    635e:	f64b 33f0 	movw	r3, #48112	; 0xbbf0
    6362:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6366:	7899      	ldrb	r1, [r3, #2]
    6368:	f24b 632c 	movw	r3, #46636	; 0xb62c
    636c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6370:	5499      	strb	r1, [r3, r2]
    6372:	4b57      	ldr	r3, [pc, #348]	; (64d0 <send_attitude+0x8bc>)
    6374:	781a      	ldrb	r2, [r3, #0]
    6376:	f24b 732d 	movw	r3, #46893	; 0xb72d
    637a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    637e:	781b      	ldrb	r3, [r3, #0]
    6380:	4413      	add	r3, r2
    6382:	b2da      	uxtb	r2, r3
    6384:	f24b 732d 	movw	r3, #46893	; 0xb72d
    6388:	f2c2 0304 	movt	r3, #8196	; 0x2004
    638c:	701a      	strb	r2, [r3, #0]
    638e:	f24b 732e 	movw	r3, #46894	; 0xb72e
    6392:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6396:	781a      	ldrb	r2, [r3, #0]
    6398:	f24b 732d 	movw	r3, #46893	; 0xb72d
    639c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63a0:	781b      	ldrb	r3, [r3, #0]
    63a2:	4413      	add	r3, r2
    63a4:	b2da      	uxtb	r2, r3
    63a6:	f24b 732e 	movw	r3, #46894	; 0xb72e
    63aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63ae:	701a      	strb	r2, [r3, #0]
    63b0:	f24b 6329 	movw	r3, #46633	; 0xb629
    63b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63b8:	781b      	ldrb	r3, [r3, #0]
    63ba:	3301      	adds	r3, #1
    63bc:	b2da      	uxtb	r2, r3
    63be:	f24b 6329 	movw	r3, #46633	; 0xb629
    63c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63c6:	701a      	strb	r2, [r3, #0]
    63c8:	f24b 6329 	movw	r3, #46633	; 0xb629
    63cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63d0:	781b      	ldrb	r3, [r3, #0]
    63d2:	2bff      	cmp	r3, #255	; 0xff
    63d4:	d105      	bne.n	63e2 <send_attitude+0x7ce>
    63d6:	f24b 6329 	movw	r3, #46633	; 0xb629
    63da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63de:	2200      	movs	r2, #0
    63e0:	701a      	strb	r2, [r3, #0]
    63e2:	f24b 6329 	movw	r3, #46633	; 0xb629
    63e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63ea:	781b      	ldrb	r3, [r3, #0]
    63ec:	461a      	mov	r2, r3
    63ee:	f64b 33f0 	movw	r3, #48112	; 0xbbf0
    63f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63f6:	78d9      	ldrb	r1, [r3, #3]
    63f8:	f24b 632c 	movw	r3, #46636	; 0xb62c
    63fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6400:	5499      	strb	r1, [r3, r2]
    6402:	4b34      	ldr	r3, [pc, #208]	; (64d4 <send_attitude+0x8c0>)
    6404:	781a      	ldrb	r2, [r3, #0]
    6406:	f24b 732d 	movw	r3, #46893	; 0xb72d
    640a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    640e:	781b      	ldrb	r3, [r3, #0]
    6410:	4413      	add	r3, r2
    6412:	b2da      	uxtb	r2, r3
    6414:	f24b 732d 	movw	r3, #46893	; 0xb72d
    6418:	f2c2 0304 	movt	r3, #8196	; 0x2004
    641c:	701a      	strb	r2, [r3, #0]
    641e:	f24b 732e 	movw	r3, #46894	; 0xb72e
    6422:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6426:	781a      	ldrb	r2, [r3, #0]
    6428:	f24b 732d 	movw	r3, #46893	; 0xb72d
    642c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6430:	781b      	ldrb	r3, [r3, #0]
    6432:	4413      	add	r3, r2
    6434:	b2da      	uxtb	r2, r3
    6436:	f24b 732e 	movw	r3, #46894	; 0xb72e
    643a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    643e:	701a      	strb	r2, [r3, #0]
    6440:	f24b 6329 	movw	r3, #46633	; 0xb629
    6444:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6448:	781b      	ldrb	r3, [r3, #0]
    644a:	3301      	adds	r3, #1
    644c:	b2da      	uxtb	r2, r3
    644e:	f24b 6329 	movw	r3, #46633	; 0xb629
    6452:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6456:	701a      	strb	r2, [r3, #0]
    6458:	f24b 6329 	movw	r3, #46633	; 0xb629
    645c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6460:	781b      	ldrb	r3, [r3, #0]
    6462:	2bff      	cmp	r3, #255	; 0xff
    6464:	d105      	bne.n	6472 <send_attitude+0x85e>
    6466:	f24b 6329 	movw	r3, #46633	; 0xb629
    646a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    646e:	2200      	movs	r2, #0
    6470:	701a      	strb	r2, [r3, #0]
    6472:	f24b 6329 	movw	r3, #46633	; 0xb629
    6476:	f2c2 0304 	movt	r3, #8196	; 0x2004
    647a:	781b      	ldrb	r3, [r3, #0]
    647c:	461a      	mov	r2, r3
    647e:	f24b 732d 	movw	r3, #46893	; 0xb72d
    6482:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6486:	7819      	ldrb	r1, [r3, #0]
    6488:	f24b 632c 	movw	r3, #46636	; 0xb62c
    648c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6490:	5499      	strb	r1, [r3, r2]
    6492:	f24b 6329 	movw	r3, #46633	; 0xb629
    6496:	f2c2 0304 	movt	r3, #8196	; 0x2004
    649a:	781b      	ldrb	r3, [r3, #0]
    649c:	3301      	adds	r3, #1
    649e:	b2da      	uxtb	r2, r3
    64a0:	f24b 6329 	movw	r3, #46633	; 0xb629
    64a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64a8:	701a      	strb	r2, [r3, #0]
    64aa:	f24b 6329 	movw	r3, #46633	; 0xb629
    64ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64b2:	781b      	ldrb	r3, [r3, #0]
    64b4:	2bff      	cmp	r3, #255	; 0xff
    64b6:	d10f      	bne.n	64d8 <send_attitude+0x8c4>
    64b8:	f24b 6329 	movw	r3, #46633	; 0xb629
    64bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64c0:	2200      	movs	r2, #0
    64c2:	701a      	strb	r2, [r3, #0]
    64c4:	e008      	b.n	64d8 <send_attitude+0x8c4>
    64c6:	bf00      	nop
    64c8:	2004bbef 	.word	0x2004bbef
    64cc:	2004bbf1 	.word	0x2004bbf1
    64d0:	2004bbf2 	.word	0x2004bbf2
    64d4:	2004bbf3 	.word	0x2004bbf3
    64d8:	f24b 6329 	movw	r3, #46633	; 0xb629
    64dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64e0:	781b      	ldrb	r3, [r3, #0]
    64e2:	461a      	mov	r2, r3
    64e4:	f24b 732e 	movw	r3, #46894	; 0xb72e
    64e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64ec:	7819      	ldrb	r1, [r3, #0]
    64ee:	f24b 632c 	movw	r3, #46636	; 0xb62c
    64f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64f6:	5499      	strb	r1, [r3, r2]
    64f8:	f24b 6329 	movw	r3, #46633	; 0xb629
    64fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6500:	781b      	ldrb	r3, [r3, #0]
    6502:	3301      	adds	r3, #1
    6504:	b2da      	uxtb	r2, r3
    6506:	f24b 6329 	movw	r3, #46633	; 0xb629
    650a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    650e:	701a      	strb	r2, [r3, #0]
    6510:	f24b 6329 	movw	r3, #46633	; 0xb629
    6514:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6518:	781b      	ldrb	r3, [r3, #0]
    651a:	2bff      	cmp	r3, #255	; 0xff
    651c:	d105      	bne.n	652a <send_attitude+0x916>
    651e:	f24b 6329 	movw	r3, #46633	; 0xb629
    6522:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6526:	2200      	movs	r2, #0
    6528:	701a      	strb	r2, [r3, #0]
    652a:	f248 0339 	movw	r3, #32825	; 0x8039
    652e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6532:	781b      	ldrb	r3, [r3, #0]
    6534:	b2db      	uxtb	r3, r3
    6536:	f003 0310 	and.w	r3, r3, #16
    653a:	2b00      	cmp	r3, #0
    653c:	d15a      	bne.n	65f4 <send_attitude+0x9e0>
    653e:	f24b 632a 	movw	r3, #46634	; 0xb62a
    6542:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6546:	781b      	ldrb	r3, [r3, #0]
    6548:	b2db      	uxtb	r3, r3
    654a:	461a      	mov	r2, r3
    654c:	f24b 632c 	movw	r3, #46636	; 0xb62c
    6550:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6554:	5c9a      	ldrb	r2, [r3, r2]
    6556:	f24b 732b 	movw	r3, #46891	; 0xb72b
    655a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    655e:	701a      	strb	r2, [r3, #0]
    6560:	f24b 732c 	movw	r3, #46892	; 0xb72c
    6564:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6568:	2200      	movs	r2, #0
    656a:	701a      	strb	r2, [r3, #0]
    656c:	f24b 632a 	movw	r3, #46634	; 0xb62a
    6570:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6574:	781b      	ldrb	r3, [r3, #0]
    6576:	b2db      	uxtb	r3, r3
    6578:	3301      	adds	r3, #1
    657a:	b2da      	uxtb	r2, r3
    657c:	f24b 632a 	movw	r3, #46634	; 0xb62a
    6580:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6584:	701a      	strb	r2, [r3, #0]
    6586:	f24b 632a 	movw	r3, #46634	; 0xb62a
    658a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    658e:	781b      	ldrb	r3, [r3, #0]
    6590:	b2db      	uxtb	r3, r3
    6592:	2bff      	cmp	r3, #255	; 0xff
    6594:	d105      	bne.n	65a2 <send_attitude+0x98e>
    6596:	f24b 632a 	movw	r3, #46634	; 0xb62a
    659a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    659e:	2200      	movs	r2, #0
    65a0:	701a      	strb	r2, [r3, #0]
    65a2:	f248 0338 	movw	r3, #32824	; 0x8038
    65a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65aa:	f248 0238 	movw	r2, #32824	; 0x8038
    65ae:	f2c2 0200 	movt	r2, #8192	; 0x2000
    65b2:	7812      	ldrb	r2, [r2, #0]
    65b4:	b2d2      	uxtb	r2, r2
    65b6:	f042 0201 	orr.w	r2, r2, #1
    65ba:	b2d2      	uxtb	r2, r2
    65bc:	701a      	strb	r2, [r3, #0]
    65be:	f248 0339 	movw	r3, #32825	; 0x8039
    65c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65c6:	f248 0239 	movw	r2, #32825	; 0x8039
    65ca:	f2c2 0200 	movt	r2, #8192	; 0x2000
    65ce:	7812      	ldrb	r2, [r2, #0]
    65d0:	b2d2      	uxtb	r2, r2
    65d2:	f042 0210 	orr.w	r2, r2, #16
    65d6:	b2d2      	uxtb	r2, r2
    65d8:	701a      	strb	r2, [r3, #0]
    65da:	e00b      	b.n	65f4 <send_attitude+0x9e0>
    65dc:	f24b 6328 	movw	r3, #46632	; 0xb628
    65e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65e4:	781b      	ldrb	r3, [r3, #0]
    65e6:	3301      	adds	r3, #1
    65e8:	b2da      	uxtb	r2, r3
    65ea:	f24b 6328 	movw	r3, #46632	; 0xb628
    65ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65f2:	701a      	strb	r2, [r3, #0]
  }
}
    65f4:	46bd      	mov	sp, r7
    65f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    65fa:	4770      	bx	lr

000065fc <send_adc>:
  
void send_adc(void){  //500ms
    65fc:	b480      	push	{r7}
    65fe:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 5 == 1) PERIODIC_SEND_ADC();}
    6600:	f24b 6321 	movw	r3, #46625	; 0xb621
    6604:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6608:	781a      	ldrb	r2, [r3, #0]
    660a:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    660e:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    6612:	fba3 1302 	umull	r1, r3, r3, r2
    6616:	0899      	lsrs	r1, r3, #2
    6618:	460b      	mov	r3, r1
    661a:	009b      	lsls	r3, r3, #2
    661c:	440b      	add	r3, r1
    661e:	1ad3      	subs	r3, r2, r3
    6620:	b2db      	uxtb	r3, r3
    6622:	2b01      	cmp	r3, #1
    6624:	f040 8269 	bne.w	6afa <send_adc+0x4fe>
    6628:	f24b 6329 	movw	r3, #46633	; 0xb629
    662c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6630:	781a      	ldrb	r2, [r3, #0]
    6632:	f24b 632a 	movw	r3, #46634	; 0xb62a
    6636:	f2c2 0304 	movt	r3, #8196	; 0x2004
    663a:	781b      	ldrb	r3, [r3, #0]
    663c:	b2db      	uxtb	r3, r3
    663e:	429a      	cmp	r2, r3
    6640:	d313      	bcc.n	666a <send_adc+0x6e>
    6642:	f24b 632a 	movw	r3, #46634	; 0xb62a
    6646:	f2c2 0304 	movt	r3, #8196	; 0x2004
    664a:	781b      	ldrb	r3, [r3, #0]
    664c:	b2db      	uxtb	r3, r3
    664e:	461a      	mov	r2, r3
    6650:	f24b 6329 	movw	r3, #46633	; 0xb629
    6654:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6658:	781b      	ldrb	r3, [r3, #0]
    665a:	1ad3      	subs	r3, r2, r3
    665c:	33ff      	adds	r3, #255	; 0xff
    665e:	2b08      	cmp	r3, #8
    6660:	bfd4      	ite	le
    6662:	2300      	movle	r3, #0
    6664:	2301      	movgt	r3, #1
    6666:	b2db      	uxtb	r3, r3
    6668:	e011      	b.n	668e <send_adc+0x92>
    666a:	f24b 632a 	movw	r3, #46634	; 0xb62a
    666e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6672:	781b      	ldrb	r3, [r3, #0]
    6674:	b2db      	uxtb	r3, r3
    6676:	461a      	mov	r2, r3
    6678:	f24b 6329 	movw	r3, #46633	; 0xb629
    667c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6680:	781b      	ldrb	r3, [r3, #0]
    6682:	1ad3      	subs	r3, r2, r3
    6684:	2b08      	cmp	r3, #8
    6686:	bfd4      	ite	le
    6688:	2300      	movle	r3, #0
    668a:	2301      	movgt	r3, #1
    668c:	b2db      	uxtb	r3, r3
    668e:	2b00      	cmp	r3, #0
    6690:	f000 8227 	beq.w	6ae2 <send_adc+0x4e6>
    6694:	f24b 6329 	movw	r3, #46633	; 0xb629
    6698:	f2c2 0304 	movt	r3, #8196	; 0x2004
    669c:	781b      	ldrb	r3, [r3, #0]
    669e:	461a      	mov	r2, r3
    66a0:	f24b 632c 	movw	r3, #46636	; 0xb62c
    66a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66a8:	2105      	movs	r1, #5
    66aa:	5499      	strb	r1, [r3, r2]
    66ac:	f24b 6329 	movw	r3, #46633	; 0xb629
    66b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66b4:	781b      	ldrb	r3, [r3, #0]
    66b6:	3301      	adds	r3, #1
    66b8:	b2da      	uxtb	r2, r3
    66ba:	f24b 6329 	movw	r3, #46633	; 0xb629
    66be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66c2:	701a      	strb	r2, [r3, #0]
    66c4:	f24b 6329 	movw	r3, #46633	; 0xb629
    66c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66cc:	781b      	ldrb	r3, [r3, #0]
    66ce:	2bff      	cmp	r3, #255	; 0xff
    66d0:	d105      	bne.n	66de <send_adc+0xe2>
    66d2:	f24b 6329 	movw	r3, #46633	; 0xb629
    66d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66da:	2200      	movs	r2, #0
    66dc:	701a      	strb	r2, [r3, #0]
    66de:	f24b 6329 	movw	r3, #46633	; 0xb629
    66e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66e6:	781b      	ldrb	r3, [r3, #0]
    66e8:	461a      	mov	r2, r3
    66ea:	f24b 632c 	movw	r3, #46636	; 0xb62c
    66ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66f2:	2107      	movs	r1, #7
    66f4:	5499      	strb	r1, [r3, r2]
    66f6:	f24b 6329 	movw	r3, #46633	; 0xb629
    66fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66fe:	781b      	ldrb	r3, [r3, #0]
    6700:	3301      	adds	r3, #1
    6702:	b2da      	uxtb	r2, r3
    6704:	f24b 6329 	movw	r3, #46633	; 0xb629
    6708:	f2c2 0304 	movt	r3, #8196	; 0x2004
    670c:	701a      	strb	r2, [r3, #0]
    670e:	f24b 6329 	movw	r3, #46633	; 0xb629
    6712:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6716:	781b      	ldrb	r3, [r3, #0]
    6718:	2bff      	cmp	r3, #255	; 0xff
    671a:	d105      	bne.n	6728 <send_adc+0x12c>
    671c:	f24b 6329 	movw	r3, #46633	; 0xb629
    6720:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6724:	2200      	movs	r2, #0
    6726:	701a      	strb	r2, [r3, #0]
    6728:	f24b 732d 	movw	r3, #46893	; 0xb72d
    672c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6730:	2207      	movs	r2, #7
    6732:	701a      	strb	r2, [r3, #0]
    6734:	f24b 732e 	movw	r3, #46894	; 0xb72e
    6738:	f2c2 0304 	movt	r3, #8196	; 0x2004
    673c:	2207      	movs	r2, #7
    673e:	701a      	strb	r2, [r3, #0]
    6740:	f24b 6329 	movw	r3, #46633	; 0xb629
    6744:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6748:	781b      	ldrb	r3, [r3, #0]
    674a:	461a      	mov	r2, r3
    674c:	f64b 03c8 	movw	r3, #47304	; 0xb8c8
    6750:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6754:	7819      	ldrb	r1, [r3, #0]
    6756:	f24b 632c 	movw	r3, #46636	; 0xb62c
    675a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    675e:	5499      	strb	r1, [r3, r2]
    6760:	f64b 03c8 	movw	r3, #47304	; 0xb8c8
    6764:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6768:	781a      	ldrb	r2, [r3, #0]
    676a:	f24b 732d 	movw	r3, #46893	; 0xb72d
    676e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6772:	781b      	ldrb	r3, [r3, #0]
    6774:	4413      	add	r3, r2
    6776:	b2da      	uxtb	r2, r3
    6778:	f24b 732d 	movw	r3, #46893	; 0xb72d
    677c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6780:	701a      	strb	r2, [r3, #0]
    6782:	f24b 732e 	movw	r3, #46894	; 0xb72e
    6786:	f2c2 0304 	movt	r3, #8196	; 0x2004
    678a:	781a      	ldrb	r2, [r3, #0]
    678c:	f24b 732d 	movw	r3, #46893	; 0xb72d
    6790:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6794:	781b      	ldrb	r3, [r3, #0]
    6796:	4413      	add	r3, r2
    6798:	b2da      	uxtb	r2, r3
    679a:	f24b 732e 	movw	r3, #46894	; 0xb72e
    679e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67a2:	701a      	strb	r2, [r3, #0]
    67a4:	f24b 6329 	movw	r3, #46633	; 0xb629
    67a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67ac:	781b      	ldrb	r3, [r3, #0]
    67ae:	3301      	adds	r3, #1
    67b0:	b2da      	uxtb	r2, r3
    67b2:	f24b 6329 	movw	r3, #46633	; 0xb629
    67b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67ba:	701a      	strb	r2, [r3, #0]
    67bc:	f24b 6329 	movw	r3, #46633	; 0xb629
    67c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67c4:	781b      	ldrb	r3, [r3, #0]
    67c6:	2bff      	cmp	r3, #255	; 0xff
    67c8:	d105      	bne.n	67d6 <send_adc+0x1da>
    67ca:	f24b 6329 	movw	r3, #46633	; 0xb629
    67ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67d2:	2200      	movs	r2, #0
    67d4:	701a      	strb	r2, [r3, #0]
    67d6:	f24b 6329 	movw	r3, #46633	; 0xb629
    67da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67de:	781b      	ldrb	r3, [r3, #0]
    67e0:	461a      	mov	r2, r3
    67e2:	f64b 03c8 	movw	r3, #47304	; 0xb8c8
    67e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67ea:	7859      	ldrb	r1, [r3, #1]
    67ec:	f24b 632c 	movw	r3, #46636	; 0xb62c
    67f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67f4:	5499      	strb	r1, [r3, r2]
    67f6:	4bc3      	ldr	r3, [pc, #780]	; (6b04 <send_adc+0x508>)
    67f8:	781a      	ldrb	r2, [r3, #0]
    67fa:	f24b 732d 	movw	r3, #46893	; 0xb72d
    67fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6802:	781b      	ldrb	r3, [r3, #0]
    6804:	4413      	add	r3, r2
    6806:	b2da      	uxtb	r2, r3
    6808:	f24b 732d 	movw	r3, #46893	; 0xb72d
    680c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6810:	701a      	strb	r2, [r3, #0]
    6812:	f24b 732e 	movw	r3, #46894	; 0xb72e
    6816:	f2c2 0304 	movt	r3, #8196	; 0x2004
    681a:	781a      	ldrb	r2, [r3, #0]
    681c:	f24b 732d 	movw	r3, #46893	; 0xb72d
    6820:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6824:	781b      	ldrb	r3, [r3, #0]
    6826:	4413      	add	r3, r2
    6828:	b2da      	uxtb	r2, r3
    682a:	f24b 732e 	movw	r3, #46894	; 0xb72e
    682e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6832:	701a      	strb	r2, [r3, #0]
    6834:	f24b 6329 	movw	r3, #46633	; 0xb629
    6838:	f2c2 0304 	movt	r3, #8196	; 0x2004
    683c:	781b      	ldrb	r3, [r3, #0]
    683e:	3301      	adds	r3, #1
    6840:	b2da      	uxtb	r2, r3
    6842:	f24b 6329 	movw	r3, #46633	; 0xb629
    6846:	f2c2 0304 	movt	r3, #8196	; 0x2004
    684a:	701a      	strb	r2, [r3, #0]
    684c:	f24b 6329 	movw	r3, #46633	; 0xb629
    6850:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6854:	781b      	ldrb	r3, [r3, #0]
    6856:	2bff      	cmp	r3, #255	; 0xff
    6858:	d105      	bne.n	6866 <send_adc+0x26a>
    685a:	f24b 6329 	movw	r3, #46633	; 0xb629
    685e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6862:	2200      	movs	r2, #0
    6864:	701a      	strb	r2, [r3, #0]
    6866:	f24b 6329 	movw	r3, #46633	; 0xb629
    686a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    686e:	781b      	ldrb	r3, [r3, #0]
    6870:	461a      	mov	r2, r3
    6872:	f64b 03ca 	movw	r3, #47306	; 0xb8ca
    6876:	f2c2 0304 	movt	r3, #8196	; 0x2004
    687a:	7819      	ldrb	r1, [r3, #0]
    687c:	f24b 632c 	movw	r3, #46636	; 0xb62c
    6880:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6884:	5499      	strb	r1, [r3, r2]
    6886:	f64b 03ca 	movw	r3, #47306	; 0xb8ca
    688a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    688e:	781a      	ldrb	r2, [r3, #0]
    6890:	f24b 732d 	movw	r3, #46893	; 0xb72d
    6894:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6898:	781b      	ldrb	r3, [r3, #0]
    689a:	4413      	add	r3, r2
    689c:	b2da      	uxtb	r2, r3
    689e:	f24b 732d 	movw	r3, #46893	; 0xb72d
    68a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68a6:	701a      	strb	r2, [r3, #0]
    68a8:	f24b 732e 	movw	r3, #46894	; 0xb72e
    68ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68b0:	781a      	ldrb	r2, [r3, #0]
    68b2:	f24b 732d 	movw	r3, #46893	; 0xb72d
    68b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68ba:	781b      	ldrb	r3, [r3, #0]
    68bc:	4413      	add	r3, r2
    68be:	b2da      	uxtb	r2, r3
    68c0:	f24b 732e 	movw	r3, #46894	; 0xb72e
    68c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68c8:	701a      	strb	r2, [r3, #0]
    68ca:	f24b 6329 	movw	r3, #46633	; 0xb629
    68ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68d2:	781b      	ldrb	r3, [r3, #0]
    68d4:	3301      	adds	r3, #1
    68d6:	b2da      	uxtb	r2, r3
    68d8:	f24b 6329 	movw	r3, #46633	; 0xb629
    68dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68e0:	701a      	strb	r2, [r3, #0]
    68e2:	f24b 6329 	movw	r3, #46633	; 0xb629
    68e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68ea:	781b      	ldrb	r3, [r3, #0]
    68ec:	2bff      	cmp	r3, #255	; 0xff
    68ee:	d105      	bne.n	68fc <send_adc+0x300>
    68f0:	f24b 6329 	movw	r3, #46633	; 0xb629
    68f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68f8:	2200      	movs	r2, #0
    68fa:	701a      	strb	r2, [r3, #0]
    68fc:	f24b 6329 	movw	r3, #46633	; 0xb629
    6900:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6904:	781b      	ldrb	r3, [r3, #0]
    6906:	461a      	mov	r2, r3
    6908:	f64b 03ca 	movw	r3, #47306	; 0xb8ca
    690c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6910:	7859      	ldrb	r1, [r3, #1]
    6912:	f24b 632c 	movw	r3, #46636	; 0xb62c
    6916:	f2c2 0304 	movt	r3, #8196	; 0x2004
    691a:	5499      	strb	r1, [r3, r2]
    691c:	4b7a      	ldr	r3, [pc, #488]	; (6b08 <send_adc+0x50c>)
    691e:	781a      	ldrb	r2, [r3, #0]
    6920:	f24b 732d 	movw	r3, #46893	; 0xb72d
    6924:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6928:	781b      	ldrb	r3, [r3, #0]
    692a:	4413      	add	r3, r2
    692c:	b2da      	uxtb	r2, r3
    692e:	f24b 732d 	movw	r3, #46893	; 0xb72d
    6932:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6936:	701a      	strb	r2, [r3, #0]
    6938:	f24b 732e 	movw	r3, #46894	; 0xb72e
    693c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6940:	781a      	ldrb	r2, [r3, #0]
    6942:	f24b 732d 	movw	r3, #46893	; 0xb72d
    6946:	f2c2 0304 	movt	r3, #8196	; 0x2004
    694a:	781b      	ldrb	r3, [r3, #0]
    694c:	4413      	add	r3, r2
    694e:	b2da      	uxtb	r2, r3
    6950:	f24b 732e 	movw	r3, #46894	; 0xb72e
    6954:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6958:	701a      	strb	r2, [r3, #0]
    695a:	f24b 6329 	movw	r3, #46633	; 0xb629
    695e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6962:	781b      	ldrb	r3, [r3, #0]
    6964:	3301      	adds	r3, #1
    6966:	b2da      	uxtb	r2, r3
    6968:	f24b 6329 	movw	r3, #46633	; 0xb629
    696c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6970:	701a      	strb	r2, [r3, #0]
    6972:	f24b 6329 	movw	r3, #46633	; 0xb629
    6976:	f2c2 0304 	movt	r3, #8196	; 0x2004
    697a:	781b      	ldrb	r3, [r3, #0]
    697c:	2bff      	cmp	r3, #255	; 0xff
    697e:	d105      	bne.n	698c <send_adc+0x390>
    6980:	f24b 6329 	movw	r3, #46633	; 0xb629
    6984:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6988:	2200      	movs	r2, #0
    698a:	701a      	strb	r2, [r3, #0]
    698c:	f24b 6329 	movw	r3, #46633	; 0xb629
    6990:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6994:	781b      	ldrb	r3, [r3, #0]
    6996:	461a      	mov	r2, r3
    6998:	f24b 732d 	movw	r3, #46893	; 0xb72d
    699c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69a0:	7819      	ldrb	r1, [r3, #0]
    69a2:	f24b 632c 	movw	r3, #46636	; 0xb62c
    69a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69aa:	5499      	strb	r1, [r3, r2]
    69ac:	f24b 6329 	movw	r3, #46633	; 0xb629
    69b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69b4:	781b      	ldrb	r3, [r3, #0]
    69b6:	3301      	adds	r3, #1
    69b8:	b2da      	uxtb	r2, r3
    69ba:	f24b 6329 	movw	r3, #46633	; 0xb629
    69be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69c2:	701a      	strb	r2, [r3, #0]
    69c4:	f24b 6329 	movw	r3, #46633	; 0xb629
    69c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69cc:	781b      	ldrb	r3, [r3, #0]
    69ce:	2bff      	cmp	r3, #255	; 0xff
    69d0:	d105      	bne.n	69de <send_adc+0x3e2>
    69d2:	f24b 6329 	movw	r3, #46633	; 0xb629
    69d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69da:	2200      	movs	r2, #0
    69dc:	701a      	strb	r2, [r3, #0]
    69de:	f24b 6329 	movw	r3, #46633	; 0xb629
    69e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69e6:	781b      	ldrb	r3, [r3, #0]
    69e8:	461a      	mov	r2, r3
    69ea:	f24b 732e 	movw	r3, #46894	; 0xb72e
    69ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69f2:	7819      	ldrb	r1, [r3, #0]
    69f4:	f24b 632c 	movw	r3, #46636	; 0xb62c
    69f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69fc:	5499      	strb	r1, [r3, r2]
    69fe:	f24b 6329 	movw	r3, #46633	; 0xb629
    6a02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a06:	781b      	ldrb	r3, [r3, #0]
    6a08:	3301      	adds	r3, #1
    6a0a:	b2da      	uxtb	r2, r3
    6a0c:	f24b 6329 	movw	r3, #46633	; 0xb629
    6a10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a14:	701a      	strb	r2, [r3, #0]
    6a16:	f24b 6329 	movw	r3, #46633	; 0xb629
    6a1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a1e:	781b      	ldrb	r3, [r3, #0]
    6a20:	2bff      	cmp	r3, #255	; 0xff
    6a22:	d105      	bne.n	6a30 <send_adc+0x434>
    6a24:	f24b 6329 	movw	r3, #46633	; 0xb629
    6a28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a2c:	2200      	movs	r2, #0
    6a2e:	701a      	strb	r2, [r3, #0]
    6a30:	f248 0339 	movw	r3, #32825	; 0x8039
    6a34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a38:	781b      	ldrb	r3, [r3, #0]
    6a3a:	b2db      	uxtb	r3, r3
    6a3c:	f003 0310 	and.w	r3, r3, #16
    6a40:	2b00      	cmp	r3, #0
    6a42:	d15a      	bne.n	6afa <send_adc+0x4fe>
    6a44:	f24b 632a 	movw	r3, #46634	; 0xb62a
    6a48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a4c:	781b      	ldrb	r3, [r3, #0]
    6a4e:	b2db      	uxtb	r3, r3
    6a50:	461a      	mov	r2, r3
    6a52:	f24b 632c 	movw	r3, #46636	; 0xb62c
    6a56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a5a:	5c9a      	ldrb	r2, [r3, r2]
    6a5c:	f24b 732b 	movw	r3, #46891	; 0xb72b
    6a60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a64:	701a      	strb	r2, [r3, #0]
    6a66:	f24b 732c 	movw	r3, #46892	; 0xb72c
    6a6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a6e:	2200      	movs	r2, #0
    6a70:	701a      	strb	r2, [r3, #0]
    6a72:	f24b 632a 	movw	r3, #46634	; 0xb62a
    6a76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a7a:	781b      	ldrb	r3, [r3, #0]
    6a7c:	b2db      	uxtb	r3, r3
    6a7e:	3301      	adds	r3, #1
    6a80:	b2da      	uxtb	r2, r3
    6a82:	f24b 632a 	movw	r3, #46634	; 0xb62a
    6a86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a8a:	701a      	strb	r2, [r3, #0]
    6a8c:	f24b 632a 	movw	r3, #46634	; 0xb62a
    6a90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a94:	781b      	ldrb	r3, [r3, #0]
    6a96:	b2db      	uxtb	r3, r3
    6a98:	2bff      	cmp	r3, #255	; 0xff
    6a9a:	d105      	bne.n	6aa8 <send_adc+0x4ac>
    6a9c:	f24b 632a 	movw	r3, #46634	; 0xb62a
    6aa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6aa4:	2200      	movs	r2, #0
    6aa6:	701a      	strb	r2, [r3, #0]
    6aa8:	f248 0338 	movw	r3, #32824	; 0x8038
    6aac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ab0:	f248 0238 	movw	r2, #32824	; 0x8038
    6ab4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6ab8:	7812      	ldrb	r2, [r2, #0]
    6aba:	b2d2      	uxtb	r2, r2
    6abc:	f042 0201 	orr.w	r2, r2, #1
    6ac0:	b2d2      	uxtb	r2, r2
    6ac2:	701a      	strb	r2, [r3, #0]
    6ac4:	f248 0339 	movw	r3, #32825	; 0x8039
    6ac8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6acc:	f248 0239 	movw	r2, #32825	; 0x8039
    6ad0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6ad4:	7812      	ldrb	r2, [r2, #0]
    6ad6:	b2d2      	uxtb	r2, r2
    6ad8:	f042 0210 	orr.w	r2, r2, #16
    6adc:	b2d2      	uxtb	r2, r2
    6ade:	701a      	strb	r2, [r3, #0]
    6ae0:	e00b      	b.n	6afa <send_adc+0x4fe>
    6ae2:	f24b 6328 	movw	r3, #46632	; 0xb628
    6ae6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6aea:	781b      	ldrb	r3, [r3, #0]
    6aec:	3301      	adds	r3, #1
    6aee:	b2da      	uxtb	r2, r3
    6af0:	f24b 6328 	movw	r3, #46632	; 0xb628
    6af4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6af8:	701a      	strb	r2, [r3, #0]
}
    6afa:	46bd      	mov	sp, r7
    6afc:	f85d 7b04 	ldr.w	r7, [sp], #4
    6b00:	4770      	bx	lr
    6b02:	bf00      	nop
    6b04:	2004b8c9 	.word	0x2004b8c9
    6b08:	2004b8cb 	.word	0x2004b8cb

00006b0c <send_settings>:
void send_settings(void){ //500ms
    6b0c:	b480      	push	{r7}
    6b0e:	af00      	add	r7, sp, #0
  //if(!boot)
  {if (count % 5 == 2) PERIODIC_SEND_SETTINGS();}
    6b10:	f24b 6321 	movw	r3, #46625	; 0xb621
    6b14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b18:	781a      	ldrb	r2, [r3, #0]
    6b1a:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    6b1e:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    6b22:	fba3 1302 	umull	r1, r3, r3, r2
    6b26:	0899      	lsrs	r1, r3, #2
    6b28:	460b      	mov	r3, r1
    6b2a:	009b      	lsls	r3, r3, #2
    6b2c:	440b      	add	r3, r1
    6b2e:	1ad3      	subs	r3, r2, r3
    6b30:	b2db      	uxtb	r3, r3
    6b32:	2b02      	cmp	r3, #2
    6b34:	f040 83e7 	bne.w	7306 <send_settings+0x7fa>
    6b38:	f64b 433c 	movw	r3, #48188	; 0xbc3c
    6b3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b40:	781b      	ldrb	r3, [r3, #0]
    6b42:	2b00      	cmp	r3, #0
    6b44:	f000 83df 	beq.w	7306 <send_settings+0x7fa>
    6b48:	f24b 6329 	movw	r3, #46633	; 0xb629
    6b4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b50:	781a      	ldrb	r2, [r3, #0]
    6b52:	f24b 632a 	movw	r3, #46634	; 0xb62a
    6b56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b5a:	781b      	ldrb	r3, [r3, #0]
    6b5c:	b2db      	uxtb	r3, r3
    6b5e:	429a      	cmp	r2, r3
    6b60:	d313      	bcc.n	6b8a <send_settings+0x7e>
    6b62:	f24b 632a 	movw	r3, #46634	; 0xb62a
    6b66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b6a:	781b      	ldrb	r3, [r3, #0]
    6b6c:	b2db      	uxtb	r3, r3
    6b6e:	461a      	mov	r2, r3
    6b70:	f24b 6329 	movw	r3, #46633	; 0xb629
    6b74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b78:	781b      	ldrb	r3, [r3, #0]
    6b7a:	1ad3      	subs	r3, r2, r3
    6b7c:	33ff      	adds	r3, #255	; 0xff
    6b7e:	2b0d      	cmp	r3, #13
    6b80:	bfd4      	ite	le
    6b82:	2300      	movle	r3, #0
    6b84:	2301      	movgt	r3, #1
    6b86:	b2db      	uxtb	r3, r3
    6b88:	e011      	b.n	6bae <send_settings+0xa2>
    6b8a:	f24b 632a 	movw	r3, #46634	; 0xb62a
    6b8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b92:	781b      	ldrb	r3, [r3, #0]
    6b94:	b2db      	uxtb	r3, r3
    6b96:	461a      	mov	r2, r3
    6b98:	f24b 6329 	movw	r3, #46633	; 0xb629
    6b9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ba0:	781b      	ldrb	r3, [r3, #0]
    6ba2:	1ad3      	subs	r3, r2, r3
    6ba4:	2b0d      	cmp	r3, #13
    6ba6:	bfd4      	ite	le
    6ba8:	2300      	movle	r3, #0
    6baa:	2301      	movgt	r3, #1
    6bac:	b2db      	uxtb	r3, r3
    6bae:	2b00      	cmp	r3, #0
    6bb0:	f000 839d 	beq.w	72ee <send_settings+0x7e2>
    6bb4:	f24b 6329 	movw	r3, #46633	; 0xb629
    6bb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bbc:	781b      	ldrb	r3, [r3, #0]
    6bbe:	461a      	mov	r2, r3
    6bc0:	f24b 632c 	movw	r3, #46636	; 0xb62c
    6bc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bc8:	2105      	movs	r1, #5
    6bca:	5499      	strb	r1, [r3, r2]
    6bcc:	f24b 6329 	movw	r3, #46633	; 0xb629
    6bd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bd4:	781b      	ldrb	r3, [r3, #0]
    6bd6:	3301      	adds	r3, #1
    6bd8:	b2da      	uxtb	r2, r3
    6bda:	f24b 6329 	movw	r3, #46633	; 0xb629
    6bde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6be2:	701a      	strb	r2, [r3, #0]
    6be4:	f24b 6329 	movw	r3, #46633	; 0xb629
    6be8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bec:	781b      	ldrb	r3, [r3, #0]
    6bee:	2bff      	cmp	r3, #255	; 0xff
    6bf0:	d105      	bne.n	6bfe <send_settings+0xf2>
    6bf2:	f24b 6329 	movw	r3, #46633	; 0xb629
    6bf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bfa:	2200      	movs	r2, #0
    6bfc:	701a      	strb	r2, [r3, #0]
    6bfe:	f24b 6329 	movw	r3, #46633	; 0xb629
    6c02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c06:	781b      	ldrb	r3, [r3, #0]
    6c08:	461a      	mov	r2, r3
    6c0a:	f24b 632c 	movw	r3, #46636	; 0xb62c
    6c0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c12:	2111      	movs	r1, #17
    6c14:	5499      	strb	r1, [r3, r2]
    6c16:	f24b 6329 	movw	r3, #46633	; 0xb629
    6c1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c1e:	781b      	ldrb	r3, [r3, #0]
    6c20:	3301      	adds	r3, #1
    6c22:	b2da      	uxtb	r2, r3
    6c24:	f24b 6329 	movw	r3, #46633	; 0xb629
    6c28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c2c:	701a      	strb	r2, [r3, #0]
    6c2e:	f24b 6329 	movw	r3, #46633	; 0xb629
    6c32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c36:	781b      	ldrb	r3, [r3, #0]
    6c38:	2bff      	cmp	r3, #255	; 0xff
    6c3a:	d105      	bne.n	6c48 <send_settings+0x13c>
    6c3c:	f24b 6329 	movw	r3, #46633	; 0xb629
    6c40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c44:	2200      	movs	r2, #0
    6c46:	701a      	strb	r2, [r3, #0]
    6c48:	f24b 732d 	movw	r3, #46893	; 0xb72d
    6c4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c50:	2211      	movs	r2, #17
    6c52:	701a      	strb	r2, [r3, #0]
    6c54:	f24b 732e 	movw	r3, #46894	; 0xb72e
    6c58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c5c:	2211      	movs	r2, #17
    6c5e:	701a      	strb	r2, [r3, #0]
    6c60:	f24b 6329 	movw	r3, #46633	; 0xb629
    6c64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c68:	781b      	ldrb	r3, [r3, #0]
    6c6a:	461a      	mov	r2, r3
    6c6c:	f64b 433c 	movw	r3, #48188	; 0xbc3c
    6c70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c74:	7819      	ldrb	r1, [r3, #0]
    6c76:	f24b 632c 	movw	r3, #46636	; 0xb62c
    6c7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c7e:	5499      	strb	r1, [r3, r2]
    6c80:	f24b 732d 	movw	r3, #46893	; 0xb72d
    6c84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c88:	781a      	ldrb	r2, [r3, #0]
    6c8a:	f64b 433c 	movw	r3, #48188	; 0xbc3c
    6c8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c92:	781b      	ldrb	r3, [r3, #0]
    6c94:	4413      	add	r3, r2
    6c96:	b2da      	uxtb	r2, r3
    6c98:	f24b 732d 	movw	r3, #46893	; 0xb72d
    6c9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ca0:	701a      	strb	r2, [r3, #0]
    6ca2:	f24b 732e 	movw	r3, #46894	; 0xb72e
    6ca6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6caa:	781a      	ldrb	r2, [r3, #0]
    6cac:	f24b 732d 	movw	r3, #46893	; 0xb72d
    6cb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cb4:	781b      	ldrb	r3, [r3, #0]
    6cb6:	4413      	add	r3, r2
    6cb8:	b2da      	uxtb	r2, r3
    6cba:	f24b 732e 	movw	r3, #46894	; 0xb72e
    6cbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cc2:	701a      	strb	r2, [r3, #0]
    6cc4:	f24b 6329 	movw	r3, #46633	; 0xb629
    6cc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ccc:	781b      	ldrb	r3, [r3, #0]
    6cce:	3301      	adds	r3, #1
    6cd0:	b2da      	uxtb	r2, r3
    6cd2:	f24b 6329 	movw	r3, #46633	; 0xb629
    6cd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cda:	701a      	strb	r2, [r3, #0]
    6cdc:	f24b 6329 	movw	r3, #46633	; 0xb629
    6ce0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ce4:	781b      	ldrb	r3, [r3, #0]
    6ce6:	2bff      	cmp	r3, #255	; 0xff
    6ce8:	d105      	bne.n	6cf6 <send_settings+0x1ea>
    6cea:	f24b 6329 	movw	r3, #46633	; 0xb629
    6cee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cf2:	2200      	movs	r2, #0
    6cf4:	701a      	strb	r2, [r3, #0]
    6cf6:	f24b 6329 	movw	r3, #46633	; 0xb629
    6cfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cfe:	781b      	ldrb	r3, [r3, #0]
    6d00:	461a      	mov	r2, r3
    6d02:	f24b 6318 	movw	r3, #46616	; 0xb618
    6d06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d0a:	7819      	ldrb	r1, [r3, #0]
    6d0c:	f24b 632c 	movw	r3, #46636	; 0xb62c
    6d10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d14:	5499      	strb	r1, [r3, r2]
    6d16:	f24b 6318 	movw	r3, #46616	; 0xb618
    6d1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d1e:	781a      	ldrb	r2, [r3, #0]
    6d20:	f24b 732d 	movw	r3, #46893	; 0xb72d
    6d24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d28:	781b      	ldrb	r3, [r3, #0]
    6d2a:	4413      	add	r3, r2
    6d2c:	b2da      	uxtb	r2, r3
    6d2e:	f24b 732d 	movw	r3, #46893	; 0xb72d
    6d32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d36:	701a      	strb	r2, [r3, #0]
    6d38:	f24b 732e 	movw	r3, #46894	; 0xb72e
    6d3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d40:	781a      	ldrb	r2, [r3, #0]
    6d42:	f24b 732d 	movw	r3, #46893	; 0xb72d
    6d46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d4a:	781b      	ldrb	r3, [r3, #0]
    6d4c:	4413      	add	r3, r2
    6d4e:	b2da      	uxtb	r2, r3
    6d50:	f24b 732e 	movw	r3, #46894	; 0xb72e
    6d54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d58:	701a      	strb	r2, [r3, #0]
    6d5a:	f24b 6329 	movw	r3, #46633	; 0xb629
    6d5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d62:	781b      	ldrb	r3, [r3, #0]
    6d64:	3301      	adds	r3, #1
    6d66:	b2da      	uxtb	r2, r3
    6d68:	f24b 6329 	movw	r3, #46633	; 0xb629
    6d6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d70:	701a      	strb	r2, [r3, #0]
    6d72:	f24b 6329 	movw	r3, #46633	; 0xb629
    6d76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d7a:	781b      	ldrb	r3, [r3, #0]
    6d7c:	2bff      	cmp	r3, #255	; 0xff
    6d7e:	d105      	bne.n	6d8c <send_settings+0x280>
    6d80:	f24b 6329 	movw	r3, #46633	; 0xb629
    6d84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d88:	2200      	movs	r2, #0
    6d8a:	701a      	strb	r2, [r3, #0]
    6d8c:	f24b 6329 	movw	r3, #46633	; 0xb629
    6d90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d94:	781b      	ldrb	r3, [r3, #0]
    6d96:	461a      	mov	r2, r3
    6d98:	f24b 6318 	movw	r3, #46616	; 0xb618
    6d9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6da0:	7859      	ldrb	r1, [r3, #1]
    6da2:	f24b 632c 	movw	r3, #46636	; 0xb62c
    6da6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6daa:	5499      	strb	r1, [r3, r2]
    6dac:	4bd1      	ldr	r3, [pc, #836]	; (70f4 <send_settings+0x5e8>)
    6dae:	781a      	ldrb	r2, [r3, #0]
    6db0:	f24b 732d 	movw	r3, #46893	; 0xb72d
    6db4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6db8:	781b      	ldrb	r3, [r3, #0]
    6dba:	4413      	add	r3, r2
    6dbc:	b2da      	uxtb	r2, r3
    6dbe:	f24b 732d 	movw	r3, #46893	; 0xb72d
    6dc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dc6:	701a      	strb	r2, [r3, #0]
    6dc8:	f24b 732e 	movw	r3, #46894	; 0xb72e
    6dcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dd0:	781a      	ldrb	r2, [r3, #0]
    6dd2:	f24b 732d 	movw	r3, #46893	; 0xb72d
    6dd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dda:	781b      	ldrb	r3, [r3, #0]
    6ddc:	4413      	add	r3, r2
    6dde:	b2da      	uxtb	r2, r3
    6de0:	f24b 732e 	movw	r3, #46894	; 0xb72e
    6de4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6de8:	701a      	strb	r2, [r3, #0]
    6dea:	f24b 6329 	movw	r3, #46633	; 0xb629
    6dee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6df2:	781b      	ldrb	r3, [r3, #0]
    6df4:	3301      	adds	r3, #1
    6df6:	b2da      	uxtb	r2, r3
    6df8:	f24b 6329 	movw	r3, #46633	; 0xb629
    6dfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e00:	701a      	strb	r2, [r3, #0]
    6e02:	f24b 6329 	movw	r3, #46633	; 0xb629
    6e06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e0a:	781b      	ldrb	r3, [r3, #0]
    6e0c:	2bff      	cmp	r3, #255	; 0xff
    6e0e:	d105      	bne.n	6e1c <send_settings+0x310>
    6e10:	f24b 6329 	movw	r3, #46633	; 0xb629
    6e14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e18:	2200      	movs	r2, #0
    6e1a:	701a      	strb	r2, [r3, #0]
    6e1c:	f24b 6329 	movw	r3, #46633	; 0xb629
    6e20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e24:	781b      	ldrb	r3, [r3, #0]
    6e26:	461a      	mov	r2, r3
    6e28:	f24b 6318 	movw	r3, #46616	; 0xb618
    6e2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e30:	7899      	ldrb	r1, [r3, #2]
    6e32:	f24b 632c 	movw	r3, #46636	; 0xb62c
    6e36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e3a:	5499      	strb	r1, [r3, r2]
    6e3c:	4bae      	ldr	r3, [pc, #696]	; (70f8 <send_settings+0x5ec>)
    6e3e:	781a      	ldrb	r2, [r3, #0]
    6e40:	f24b 732d 	movw	r3, #46893	; 0xb72d
    6e44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e48:	781b      	ldrb	r3, [r3, #0]
    6e4a:	4413      	add	r3, r2
    6e4c:	b2da      	uxtb	r2, r3
    6e4e:	f24b 732d 	movw	r3, #46893	; 0xb72d
    6e52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e56:	701a      	strb	r2, [r3, #0]
    6e58:	f24b 732e 	movw	r3, #46894	; 0xb72e
    6e5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e60:	781a      	ldrb	r2, [r3, #0]
    6e62:	f24b 732d 	movw	r3, #46893	; 0xb72d
    6e66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e6a:	781b      	ldrb	r3, [r3, #0]
    6e6c:	4413      	add	r3, r2
    6e6e:	b2da      	uxtb	r2, r3
    6e70:	f24b 732e 	movw	r3, #46894	; 0xb72e
    6e74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e78:	701a      	strb	r2, [r3, #0]
    6e7a:	f24b 6329 	movw	r3, #46633	; 0xb629
    6e7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e82:	781b      	ldrb	r3, [r3, #0]
    6e84:	3301      	adds	r3, #1
    6e86:	b2da      	uxtb	r2, r3
    6e88:	f24b 6329 	movw	r3, #46633	; 0xb629
    6e8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e90:	701a      	strb	r2, [r3, #0]
    6e92:	f24b 6329 	movw	r3, #46633	; 0xb629
    6e96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e9a:	781b      	ldrb	r3, [r3, #0]
    6e9c:	2bff      	cmp	r3, #255	; 0xff
    6e9e:	d105      	bne.n	6eac <send_settings+0x3a0>
    6ea0:	f24b 6329 	movw	r3, #46633	; 0xb629
    6ea4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ea8:	2200      	movs	r2, #0
    6eaa:	701a      	strb	r2, [r3, #0]
    6eac:	f24b 6329 	movw	r3, #46633	; 0xb629
    6eb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6eb4:	781b      	ldrb	r3, [r3, #0]
    6eb6:	461a      	mov	r2, r3
    6eb8:	f24b 6318 	movw	r3, #46616	; 0xb618
    6ebc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ec0:	78d9      	ldrb	r1, [r3, #3]
    6ec2:	f24b 632c 	movw	r3, #46636	; 0xb62c
    6ec6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6eca:	5499      	strb	r1, [r3, r2]
    6ecc:	4b8b      	ldr	r3, [pc, #556]	; (70fc <send_settings+0x5f0>)
    6ece:	781a      	ldrb	r2, [r3, #0]
    6ed0:	f24b 732d 	movw	r3, #46893	; 0xb72d
    6ed4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ed8:	781b      	ldrb	r3, [r3, #0]
    6eda:	4413      	add	r3, r2
    6edc:	b2da      	uxtb	r2, r3
    6ede:	f24b 732d 	movw	r3, #46893	; 0xb72d
    6ee2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ee6:	701a      	strb	r2, [r3, #0]
    6ee8:	f24b 732e 	movw	r3, #46894	; 0xb72e
    6eec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ef0:	781a      	ldrb	r2, [r3, #0]
    6ef2:	f24b 732d 	movw	r3, #46893	; 0xb72d
    6ef6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6efa:	781b      	ldrb	r3, [r3, #0]
    6efc:	4413      	add	r3, r2
    6efe:	b2da      	uxtb	r2, r3
    6f00:	f24b 732e 	movw	r3, #46894	; 0xb72e
    6f04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f08:	701a      	strb	r2, [r3, #0]
    6f0a:	f24b 6329 	movw	r3, #46633	; 0xb629
    6f0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f12:	781b      	ldrb	r3, [r3, #0]
    6f14:	3301      	adds	r3, #1
    6f16:	b2da      	uxtb	r2, r3
    6f18:	f24b 6329 	movw	r3, #46633	; 0xb629
    6f1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f20:	701a      	strb	r2, [r3, #0]
    6f22:	f24b 6329 	movw	r3, #46633	; 0xb629
    6f26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f2a:	781b      	ldrb	r3, [r3, #0]
    6f2c:	2bff      	cmp	r3, #255	; 0xff
    6f2e:	d105      	bne.n	6f3c <send_settings+0x430>
    6f30:	f24b 6329 	movw	r3, #46633	; 0xb629
    6f34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f38:	2200      	movs	r2, #0
    6f3a:	701a      	strb	r2, [r3, #0]
    6f3c:	f24b 6329 	movw	r3, #46633	; 0xb629
    6f40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f44:	781b      	ldrb	r3, [r3, #0]
    6f46:	461a      	mov	r2, r3
    6f48:	f24b 631c 	movw	r3, #46620	; 0xb61c
    6f4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f50:	7819      	ldrb	r1, [r3, #0]
    6f52:	f24b 632c 	movw	r3, #46636	; 0xb62c
    6f56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f5a:	5499      	strb	r1, [r3, r2]
    6f5c:	f24b 631c 	movw	r3, #46620	; 0xb61c
    6f60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f64:	781a      	ldrb	r2, [r3, #0]
    6f66:	f24b 732d 	movw	r3, #46893	; 0xb72d
    6f6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f6e:	781b      	ldrb	r3, [r3, #0]
    6f70:	4413      	add	r3, r2
    6f72:	b2da      	uxtb	r2, r3
    6f74:	f24b 732d 	movw	r3, #46893	; 0xb72d
    6f78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f7c:	701a      	strb	r2, [r3, #0]
    6f7e:	f24b 732e 	movw	r3, #46894	; 0xb72e
    6f82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f86:	781a      	ldrb	r2, [r3, #0]
    6f88:	f24b 732d 	movw	r3, #46893	; 0xb72d
    6f8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f90:	781b      	ldrb	r3, [r3, #0]
    6f92:	4413      	add	r3, r2
    6f94:	b2da      	uxtb	r2, r3
    6f96:	f24b 732e 	movw	r3, #46894	; 0xb72e
    6f9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f9e:	701a      	strb	r2, [r3, #0]
    6fa0:	f24b 6329 	movw	r3, #46633	; 0xb629
    6fa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fa8:	781b      	ldrb	r3, [r3, #0]
    6faa:	3301      	adds	r3, #1
    6fac:	b2da      	uxtb	r2, r3
    6fae:	f24b 6329 	movw	r3, #46633	; 0xb629
    6fb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fb6:	701a      	strb	r2, [r3, #0]
    6fb8:	f24b 6329 	movw	r3, #46633	; 0xb629
    6fbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fc0:	781b      	ldrb	r3, [r3, #0]
    6fc2:	2bff      	cmp	r3, #255	; 0xff
    6fc4:	d105      	bne.n	6fd2 <send_settings+0x4c6>
    6fc6:	f24b 6329 	movw	r3, #46633	; 0xb629
    6fca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fce:	2200      	movs	r2, #0
    6fd0:	701a      	strb	r2, [r3, #0]
    6fd2:	f24b 6329 	movw	r3, #46633	; 0xb629
    6fd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fda:	781b      	ldrb	r3, [r3, #0]
    6fdc:	461a      	mov	r2, r3
    6fde:	f24b 631c 	movw	r3, #46620	; 0xb61c
    6fe2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fe6:	7859      	ldrb	r1, [r3, #1]
    6fe8:	f24b 632c 	movw	r3, #46636	; 0xb62c
    6fec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ff0:	5499      	strb	r1, [r3, r2]
    6ff2:	4b43      	ldr	r3, [pc, #268]	; (7100 <send_settings+0x5f4>)
    6ff4:	781a      	ldrb	r2, [r3, #0]
    6ff6:	f24b 732d 	movw	r3, #46893	; 0xb72d
    6ffa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ffe:	781b      	ldrb	r3, [r3, #0]
    7000:	4413      	add	r3, r2
    7002:	b2da      	uxtb	r2, r3
    7004:	f24b 732d 	movw	r3, #46893	; 0xb72d
    7008:	f2c2 0304 	movt	r3, #8196	; 0x2004
    700c:	701a      	strb	r2, [r3, #0]
    700e:	f24b 732e 	movw	r3, #46894	; 0xb72e
    7012:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7016:	781a      	ldrb	r2, [r3, #0]
    7018:	f24b 732d 	movw	r3, #46893	; 0xb72d
    701c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7020:	781b      	ldrb	r3, [r3, #0]
    7022:	4413      	add	r3, r2
    7024:	b2da      	uxtb	r2, r3
    7026:	f24b 732e 	movw	r3, #46894	; 0xb72e
    702a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    702e:	701a      	strb	r2, [r3, #0]
    7030:	f24b 6329 	movw	r3, #46633	; 0xb629
    7034:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7038:	781b      	ldrb	r3, [r3, #0]
    703a:	3301      	adds	r3, #1
    703c:	b2da      	uxtb	r2, r3
    703e:	f24b 6329 	movw	r3, #46633	; 0xb629
    7042:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7046:	701a      	strb	r2, [r3, #0]
    7048:	f24b 6329 	movw	r3, #46633	; 0xb629
    704c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7050:	781b      	ldrb	r3, [r3, #0]
    7052:	2bff      	cmp	r3, #255	; 0xff
    7054:	d105      	bne.n	7062 <send_settings+0x556>
    7056:	f24b 6329 	movw	r3, #46633	; 0xb629
    705a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    705e:	2200      	movs	r2, #0
    7060:	701a      	strb	r2, [r3, #0]
    7062:	f24b 6329 	movw	r3, #46633	; 0xb629
    7066:	f2c2 0304 	movt	r3, #8196	; 0x2004
    706a:	781b      	ldrb	r3, [r3, #0]
    706c:	461a      	mov	r2, r3
    706e:	f24b 631c 	movw	r3, #46620	; 0xb61c
    7072:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7076:	7899      	ldrb	r1, [r3, #2]
    7078:	f24b 632c 	movw	r3, #46636	; 0xb62c
    707c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7080:	5499      	strb	r1, [r3, r2]
    7082:	4b20      	ldr	r3, [pc, #128]	; (7104 <send_settings+0x5f8>)
    7084:	781a      	ldrb	r2, [r3, #0]
    7086:	f24b 732d 	movw	r3, #46893	; 0xb72d
    708a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    708e:	781b      	ldrb	r3, [r3, #0]
    7090:	4413      	add	r3, r2
    7092:	b2da      	uxtb	r2, r3
    7094:	f24b 732d 	movw	r3, #46893	; 0xb72d
    7098:	f2c2 0304 	movt	r3, #8196	; 0x2004
    709c:	701a      	strb	r2, [r3, #0]
    709e:	f24b 732e 	movw	r3, #46894	; 0xb72e
    70a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70a6:	781a      	ldrb	r2, [r3, #0]
    70a8:	f24b 732d 	movw	r3, #46893	; 0xb72d
    70ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70b0:	781b      	ldrb	r3, [r3, #0]
    70b2:	4413      	add	r3, r2
    70b4:	b2da      	uxtb	r2, r3
    70b6:	f24b 732e 	movw	r3, #46894	; 0xb72e
    70ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70be:	701a      	strb	r2, [r3, #0]
    70c0:	f24b 6329 	movw	r3, #46633	; 0xb629
    70c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70c8:	781b      	ldrb	r3, [r3, #0]
    70ca:	3301      	adds	r3, #1
    70cc:	b2da      	uxtb	r2, r3
    70ce:	f24b 6329 	movw	r3, #46633	; 0xb629
    70d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70d6:	701a      	strb	r2, [r3, #0]
    70d8:	f24b 6329 	movw	r3, #46633	; 0xb629
    70dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70e0:	781b      	ldrb	r3, [r3, #0]
    70e2:	2bff      	cmp	r3, #255	; 0xff
    70e4:	d110      	bne.n	7108 <send_settings+0x5fc>
    70e6:	f24b 6329 	movw	r3, #46633	; 0xb629
    70ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70ee:	2200      	movs	r2, #0
    70f0:	701a      	strb	r2, [r3, #0]
    70f2:	e009      	b.n	7108 <send_settings+0x5fc>
    70f4:	2004b619 	.word	0x2004b619
    70f8:	2004b61a 	.word	0x2004b61a
    70fc:	2004b61b 	.word	0x2004b61b
    7100:	2004b61d 	.word	0x2004b61d
    7104:	2004b61e 	.word	0x2004b61e
    7108:	f24b 6329 	movw	r3, #46633	; 0xb629
    710c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7110:	781b      	ldrb	r3, [r3, #0]
    7112:	461a      	mov	r2, r3
    7114:	f24b 631c 	movw	r3, #46620	; 0xb61c
    7118:	f2c2 0304 	movt	r3, #8196	; 0x2004
    711c:	78d9      	ldrb	r1, [r3, #3]
    711e:	f24b 632c 	movw	r3, #46636	; 0xb62c
    7122:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7126:	5499      	strb	r1, [r3, r2]
    7128:	4b79      	ldr	r3, [pc, #484]	; (7310 <send_settings+0x804>)
    712a:	781a      	ldrb	r2, [r3, #0]
    712c:	f24b 732d 	movw	r3, #46893	; 0xb72d
    7130:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7134:	781b      	ldrb	r3, [r3, #0]
    7136:	4413      	add	r3, r2
    7138:	b2da      	uxtb	r2, r3
    713a:	f24b 732d 	movw	r3, #46893	; 0xb72d
    713e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7142:	701a      	strb	r2, [r3, #0]
    7144:	f24b 732e 	movw	r3, #46894	; 0xb72e
    7148:	f2c2 0304 	movt	r3, #8196	; 0x2004
    714c:	781a      	ldrb	r2, [r3, #0]
    714e:	f24b 732d 	movw	r3, #46893	; 0xb72d
    7152:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7156:	781b      	ldrb	r3, [r3, #0]
    7158:	4413      	add	r3, r2
    715a:	b2da      	uxtb	r2, r3
    715c:	f24b 732e 	movw	r3, #46894	; 0xb72e
    7160:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7164:	701a      	strb	r2, [r3, #0]
    7166:	f24b 6329 	movw	r3, #46633	; 0xb629
    716a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    716e:	781b      	ldrb	r3, [r3, #0]
    7170:	3301      	adds	r3, #1
    7172:	b2da      	uxtb	r2, r3
    7174:	f24b 6329 	movw	r3, #46633	; 0xb629
    7178:	f2c2 0304 	movt	r3, #8196	; 0x2004
    717c:	701a      	strb	r2, [r3, #0]
    717e:	f24b 6329 	movw	r3, #46633	; 0xb629
    7182:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7186:	781b      	ldrb	r3, [r3, #0]
    7188:	2bff      	cmp	r3, #255	; 0xff
    718a:	d105      	bne.n	7198 <send_settings+0x68c>
    718c:	f24b 6329 	movw	r3, #46633	; 0xb629
    7190:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7194:	2200      	movs	r2, #0
    7196:	701a      	strb	r2, [r3, #0]
    7198:	f24b 6329 	movw	r3, #46633	; 0xb629
    719c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71a0:	781b      	ldrb	r3, [r3, #0]
    71a2:	461a      	mov	r2, r3
    71a4:	f24b 732d 	movw	r3, #46893	; 0xb72d
    71a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71ac:	7819      	ldrb	r1, [r3, #0]
    71ae:	f24b 632c 	movw	r3, #46636	; 0xb62c
    71b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71b6:	5499      	strb	r1, [r3, r2]
    71b8:	f24b 6329 	movw	r3, #46633	; 0xb629
    71bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71c0:	781b      	ldrb	r3, [r3, #0]
    71c2:	3301      	adds	r3, #1
    71c4:	b2da      	uxtb	r2, r3
    71c6:	f24b 6329 	movw	r3, #46633	; 0xb629
    71ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71ce:	701a      	strb	r2, [r3, #0]
    71d0:	f24b 6329 	movw	r3, #46633	; 0xb629
    71d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71d8:	781b      	ldrb	r3, [r3, #0]
    71da:	2bff      	cmp	r3, #255	; 0xff
    71dc:	d105      	bne.n	71ea <send_settings+0x6de>
    71de:	f24b 6329 	movw	r3, #46633	; 0xb629
    71e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71e6:	2200      	movs	r2, #0
    71e8:	701a      	strb	r2, [r3, #0]
    71ea:	f24b 6329 	movw	r3, #46633	; 0xb629
    71ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71f2:	781b      	ldrb	r3, [r3, #0]
    71f4:	461a      	mov	r2, r3
    71f6:	f24b 732e 	movw	r3, #46894	; 0xb72e
    71fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71fe:	7819      	ldrb	r1, [r3, #0]
    7200:	f24b 632c 	movw	r3, #46636	; 0xb62c
    7204:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7208:	5499      	strb	r1, [r3, r2]
    720a:	f24b 6329 	movw	r3, #46633	; 0xb629
    720e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7212:	781b      	ldrb	r3, [r3, #0]
    7214:	3301      	adds	r3, #1
    7216:	b2da      	uxtb	r2, r3
    7218:	f24b 6329 	movw	r3, #46633	; 0xb629
    721c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7220:	701a      	strb	r2, [r3, #0]
    7222:	f24b 6329 	movw	r3, #46633	; 0xb629
    7226:	f2c2 0304 	movt	r3, #8196	; 0x2004
    722a:	781b      	ldrb	r3, [r3, #0]
    722c:	2bff      	cmp	r3, #255	; 0xff
    722e:	d105      	bne.n	723c <send_settings+0x730>
    7230:	f24b 6329 	movw	r3, #46633	; 0xb629
    7234:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7238:	2200      	movs	r2, #0
    723a:	701a      	strb	r2, [r3, #0]
    723c:	f248 0339 	movw	r3, #32825	; 0x8039
    7240:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7244:	781b      	ldrb	r3, [r3, #0]
    7246:	b2db      	uxtb	r3, r3
    7248:	f003 0310 	and.w	r3, r3, #16
    724c:	2b00      	cmp	r3, #0
    724e:	d15a      	bne.n	7306 <send_settings+0x7fa>
    7250:	f24b 632a 	movw	r3, #46634	; 0xb62a
    7254:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7258:	781b      	ldrb	r3, [r3, #0]
    725a:	b2db      	uxtb	r3, r3
    725c:	461a      	mov	r2, r3
    725e:	f24b 632c 	movw	r3, #46636	; 0xb62c
    7262:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7266:	5c9a      	ldrb	r2, [r3, r2]
    7268:	f24b 732b 	movw	r3, #46891	; 0xb72b
    726c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7270:	701a      	strb	r2, [r3, #0]
    7272:	f24b 732c 	movw	r3, #46892	; 0xb72c
    7276:	f2c2 0304 	movt	r3, #8196	; 0x2004
    727a:	2200      	movs	r2, #0
    727c:	701a      	strb	r2, [r3, #0]
    727e:	f24b 632a 	movw	r3, #46634	; 0xb62a
    7282:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7286:	781b      	ldrb	r3, [r3, #0]
    7288:	b2db      	uxtb	r3, r3
    728a:	3301      	adds	r3, #1
    728c:	b2da      	uxtb	r2, r3
    728e:	f24b 632a 	movw	r3, #46634	; 0xb62a
    7292:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7296:	701a      	strb	r2, [r3, #0]
    7298:	f24b 632a 	movw	r3, #46634	; 0xb62a
    729c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72a0:	781b      	ldrb	r3, [r3, #0]
    72a2:	b2db      	uxtb	r3, r3
    72a4:	2bff      	cmp	r3, #255	; 0xff
    72a6:	d105      	bne.n	72b4 <send_settings+0x7a8>
    72a8:	f24b 632a 	movw	r3, #46634	; 0xb62a
    72ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72b0:	2200      	movs	r2, #0
    72b2:	701a      	strb	r2, [r3, #0]
    72b4:	f248 0338 	movw	r3, #32824	; 0x8038
    72b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72bc:	f248 0238 	movw	r2, #32824	; 0x8038
    72c0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    72c4:	7812      	ldrb	r2, [r2, #0]
    72c6:	b2d2      	uxtb	r2, r2
    72c8:	f042 0201 	orr.w	r2, r2, #1
    72cc:	b2d2      	uxtb	r2, r2
    72ce:	701a      	strb	r2, [r3, #0]
    72d0:	f248 0339 	movw	r3, #32825	; 0x8039
    72d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72d8:	f248 0239 	movw	r2, #32825	; 0x8039
    72dc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    72e0:	7812      	ldrb	r2, [r2, #0]
    72e2:	b2d2      	uxtb	r2, r2
    72e4:	f042 0210 	orr.w	r2, r2, #16
    72e8:	b2d2      	uxtb	r2, r2
    72ea:	701a      	strb	r2, [r3, #0]
    72ec:	e00b      	b.n	7306 <send_settings+0x7fa>
    72ee:	f24b 6328 	movw	r3, #46632	; 0xb628
    72f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72f6:	781b      	ldrb	r3, [r3, #0]
    72f8:	3301      	adds	r3, #1
    72fa:	b2da      	uxtb	r2, r3
    72fc:	f24b 6328 	movw	r3, #46632	; 0xb628
    7300:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7304:	701a      	strb	r2, [r3, #0]
}
    7306:	46bd      	mov	sp, r7
    7308:	f85d 7b04 	ldr.w	r7, [sp], #4
    730c:	4770      	bx	lr
    730e:	bf00      	nop
    7310:	2004b61f 	.word	0x2004b61f

00007314 <send_desired>:
void send_desired(void){  //1000ms
    7314:	b480      	push	{r7}
    7316:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 10 == 3) PERIODIC_SEND_DESIRED();}
    7318:	f24b 6321 	movw	r3, #46625	; 0xb621
    731c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7320:	781a      	ldrb	r2, [r3, #0]
    7322:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    7326:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    732a:	fba3 1302 	umull	r1, r3, r3, r2
    732e:	08d9      	lsrs	r1, r3, #3
    7330:	460b      	mov	r3, r1
    7332:	009b      	lsls	r3, r3, #2
    7334:	440b      	add	r3, r1
    7336:	005b      	lsls	r3, r3, #1
    7338:	1ad3      	subs	r3, r2, r3
    733a:	b2db      	uxtb	r3, r3
    733c:	2b03      	cmp	r3, #3
    733e:	f040 8712 	bne.w	8166 <send_desired+0xe52>
    7342:	f24b 6329 	movw	r3, #46633	; 0xb629
    7346:	f2c2 0304 	movt	r3, #8196	; 0x2004
    734a:	781a      	ldrb	r2, [r3, #0]
    734c:	f24b 632a 	movw	r3, #46634	; 0xb62a
    7350:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7354:	781b      	ldrb	r3, [r3, #0]
    7356:	b2db      	uxtb	r3, r3
    7358:	429a      	cmp	r2, r3
    735a:	d313      	bcc.n	7384 <send_desired+0x70>
    735c:	f24b 632a 	movw	r3, #46634	; 0xb62a
    7360:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7364:	781b      	ldrb	r3, [r3, #0]
    7366:	b2db      	uxtb	r3, r3
    7368:	461a      	mov	r2, r3
    736a:	f24b 6329 	movw	r3, #46633	; 0xb629
    736e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7372:	781b      	ldrb	r3, [r3, #0]
    7374:	1ad3      	subs	r3, r2, r3
    7376:	33ff      	adds	r3, #255	; 0xff
    7378:	2b18      	cmp	r3, #24
    737a:	bfd4      	ite	le
    737c:	2300      	movle	r3, #0
    737e:	2301      	movgt	r3, #1
    7380:	b2db      	uxtb	r3, r3
    7382:	e011      	b.n	73a8 <send_desired+0x94>
    7384:	f24b 632a 	movw	r3, #46634	; 0xb62a
    7388:	f2c2 0304 	movt	r3, #8196	; 0x2004
    738c:	781b      	ldrb	r3, [r3, #0]
    738e:	b2db      	uxtb	r3, r3
    7390:	461a      	mov	r2, r3
    7392:	f24b 6329 	movw	r3, #46633	; 0xb629
    7396:	f2c2 0304 	movt	r3, #8196	; 0x2004
    739a:	781b      	ldrb	r3, [r3, #0]
    739c:	1ad3      	subs	r3, r2, r3
    739e:	2b18      	cmp	r3, #24
    73a0:	bfd4      	ite	le
    73a2:	2300      	movle	r3, #0
    73a4:	2301      	movgt	r3, #1
    73a6:	b2db      	uxtb	r3, r3
    73a8:	2b00      	cmp	r3, #0
    73aa:	f000 86d0 	beq.w	814e <send_desired+0xe3a>
    73ae:	f24b 6329 	movw	r3, #46633	; 0xb629
    73b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73b6:	781b      	ldrb	r3, [r3, #0]
    73b8:	461a      	mov	r2, r3
    73ba:	f24b 632c 	movw	r3, #46636	; 0xb62c
    73be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73c2:	2105      	movs	r1, #5
    73c4:	5499      	strb	r1, [r3, r2]
    73c6:	f24b 6329 	movw	r3, #46633	; 0xb629
    73ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73ce:	781b      	ldrb	r3, [r3, #0]
    73d0:	3301      	adds	r3, #1
    73d2:	b2da      	uxtb	r2, r3
    73d4:	f24b 6329 	movw	r3, #46633	; 0xb629
    73d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73dc:	701a      	strb	r2, [r3, #0]
    73de:	f24b 6329 	movw	r3, #46633	; 0xb629
    73e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73e6:	781b      	ldrb	r3, [r3, #0]
    73e8:	2bff      	cmp	r3, #255	; 0xff
    73ea:	d105      	bne.n	73f8 <send_desired+0xe4>
    73ec:	f24b 6329 	movw	r3, #46633	; 0xb629
    73f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73f4:	2200      	movs	r2, #0
    73f6:	701a      	strb	r2, [r3, #0]
    73f8:	f24b 6329 	movw	r3, #46633	; 0xb629
    73fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7400:	781b      	ldrb	r3, [r3, #0]
    7402:	461a      	mov	r2, r3
    7404:	f24b 632c 	movw	r3, #46636	; 0xb62c
    7408:	f2c2 0304 	movt	r3, #8196	; 0x2004
    740c:	2112      	movs	r1, #18
    740e:	5499      	strb	r1, [r3, r2]
    7410:	f24b 6329 	movw	r3, #46633	; 0xb629
    7414:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7418:	781b      	ldrb	r3, [r3, #0]
    741a:	3301      	adds	r3, #1
    741c:	b2da      	uxtb	r2, r3
    741e:	f24b 6329 	movw	r3, #46633	; 0xb629
    7422:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7426:	701a      	strb	r2, [r3, #0]
    7428:	f24b 6329 	movw	r3, #46633	; 0xb629
    742c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7430:	781b      	ldrb	r3, [r3, #0]
    7432:	2bff      	cmp	r3, #255	; 0xff
    7434:	d105      	bne.n	7442 <send_desired+0x12e>
    7436:	f24b 6329 	movw	r3, #46633	; 0xb629
    743a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    743e:	2200      	movs	r2, #0
    7440:	701a      	strb	r2, [r3, #0]
    7442:	f24b 732d 	movw	r3, #46893	; 0xb72d
    7446:	f2c2 0304 	movt	r3, #8196	; 0x2004
    744a:	2212      	movs	r2, #18
    744c:	701a      	strb	r2, [r3, #0]
    744e:	f24b 732e 	movw	r3, #46894	; 0xb72e
    7452:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7456:	2212      	movs	r2, #18
    7458:	701a      	strb	r2, [r3, #0]
    745a:	f24b 6329 	movw	r3, #46633	; 0xb629
    745e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7462:	781b      	ldrb	r3, [r3, #0]
    7464:	461a      	mov	r2, r3
    7466:	f64b 1354 	movw	r3, #47444	; 0xb954
    746a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    746e:	7819      	ldrb	r1, [r3, #0]
    7470:	f24b 632c 	movw	r3, #46636	; 0xb62c
    7474:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7478:	5499      	strb	r1, [r3, r2]
    747a:	f64b 1354 	movw	r3, #47444	; 0xb954
    747e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7482:	781a      	ldrb	r2, [r3, #0]
    7484:	f24b 732d 	movw	r3, #46893	; 0xb72d
    7488:	f2c2 0304 	movt	r3, #8196	; 0x2004
    748c:	781b      	ldrb	r3, [r3, #0]
    748e:	4413      	add	r3, r2
    7490:	b2da      	uxtb	r2, r3
    7492:	f24b 732d 	movw	r3, #46893	; 0xb72d
    7496:	f2c2 0304 	movt	r3, #8196	; 0x2004
    749a:	701a      	strb	r2, [r3, #0]
    749c:	f24b 732e 	movw	r3, #46894	; 0xb72e
    74a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74a4:	781a      	ldrb	r2, [r3, #0]
    74a6:	f24b 732d 	movw	r3, #46893	; 0xb72d
    74aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74ae:	781b      	ldrb	r3, [r3, #0]
    74b0:	4413      	add	r3, r2
    74b2:	b2da      	uxtb	r2, r3
    74b4:	f24b 732e 	movw	r3, #46894	; 0xb72e
    74b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74bc:	701a      	strb	r2, [r3, #0]
    74be:	f24b 6329 	movw	r3, #46633	; 0xb629
    74c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74c6:	781b      	ldrb	r3, [r3, #0]
    74c8:	3301      	adds	r3, #1
    74ca:	b2da      	uxtb	r2, r3
    74cc:	f24b 6329 	movw	r3, #46633	; 0xb629
    74d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74d4:	701a      	strb	r2, [r3, #0]
    74d6:	f24b 6329 	movw	r3, #46633	; 0xb629
    74da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74de:	781b      	ldrb	r3, [r3, #0]
    74e0:	2bff      	cmp	r3, #255	; 0xff
    74e2:	d105      	bne.n	74f0 <send_desired+0x1dc>
    74e4:	f24b 6329 	movw	r3, #46633	; 0xb629
    74e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74ec:	2200      	movs	r2, #0
    74ee:	701a      	strb	r2, [r3, #0]
    74f0:	f24b 6329 	movw	r3, #46633	; 0xb629
    74f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74f8:	781b      	ldrb	r3, [r3, #0]
    74fa:	461a      	mov	r2, r3
    74fc:	f64b 1354 	movw	r3, #47444	; 0xb954
    7500:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7504:	7859      	ldrb	r1, [r3, #1]
    7506:	f24b 632c 	movw	r3, #46636	; 0xb62c
    750a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    750e:	5499      	strb	r1, [r3, r2]
    7510:	4bd1      	ldr	r3, [pc, #836]	; (7858 <send_desired+0x544>)
    7512:	781a      	ldrb	r2, [r3, #0]
    7514:	f24b 732d 	movw	r3, #46893	; 0xb72d
    7518:	f2c2 0304 	movt	r3, #8196	; 0x2004
    751c:	781b      	ldrb	r3, [r3, #0]
    751e:	4413      	add	r3, r2
    7520:	b2da      	uxtb	r2, r3
    7522:	f24b 732d 	movw	r3, #46893	; 0xb72d
    7526:	f2c2 0304 	movt	r3, #8196	; 0x2004
    752a:	701a      	strb	r2, [r3, #0]
    752c:	f24b 732e 	movw	r3, #46894	; 0xb72e
    7530:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7534:	781a      	ldrb	r2, [r3, #0]
    7536:	f24b 732d 	movw	r3, #46893	; 0xb72d
    753a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    753e:	781b      	ldrb	r3, [r3, #0]
    7540:	4413      	add	r3, r2
    7542:	b2da      	uxtb	r2, r3
    7544:	f24b 732e 	movw	r3, #46894	; 0xb72e
    7548:	f2c2 0304 	movt	r3, #8196	; 0x2004
    754c:	701a      	strb	r2, [r3, #0]
    754e:	f24b 6329 	movw	r3, #46633	; 0xb629
    7552:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7556:	781b      	ldrb	r3, [r3, #0]
    7558:	3301      	adds	r3, #1
    755a:	b2da      	uxtb	r2, r3
    755c:	f24b 6329 	movw	r3, #46633	; 0xb629
    7560:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7564:	701a      	strb	r2, [r3, #0]
    7566:	f24b 6329 	movw	r3, #46633	; 0xb629
    756a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    756e:	781b      	ldrb	r3, [r3, #0]
    7570:	2bff      	cmp	r3, #255	; 0xff
    7572:	d105      	bne.n	7580 <send_desired+0x26c>
    7574:	f24b 6329 	movw	r3, #46633	; 0xb629
    7578:	f2c2 0304 	movt	r3, #8196	; 0x2004
    757c:	2200      	movs	r2, #0
    757e:	701a      	strb	r2, [r3, #0]
    7580:	f24b 6329 	movw	r3, #46633	; 0xb629
    7584:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7588:	781b      	ldrb	r3, [r3, #0]
    758a:	461a      	mov	r2, r3
    758c:	f64b 1354 	movw	r3, #47444	; 0xb954
    7590:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7594:	7899      	ldrb	r1, [r3, #2]
    7596:	f24b 632c 	movw	r3, #46636	; 0xb62c
    759a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    759e:	5499      	strb	r1, [r3, r2]
    75a0:	4bae      	ldr	r3, [pc, #696]	; (785c <send_desired+0x548>)
    75a2:	781a      	ldrb	r2, [r3, #0]
    75a4:	f24b 732d 	movw	r3, #46893	; 0xb72d
    75a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75ac:	781b      	ldrb	r3, [r3, #0]
    75ae:	4413      	add	r3, r2
    75b0:	b2da      	uxtb	r2, r3
    75b2:	f24b 732d 	movw	r3, #46893	; 0xb72d
    75b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75ba:	701a      	strb	r2, [r3, #0]
    75bc:	f24b 732e 	movw	r3, #46894	; 0xb72e
    75c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75c4:	781a      	ldrb	r2, [r3, #0]
    75c6:	f24b 732d 	movw	r3, #46893	; 0xb72d
    75ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75ce:	781b      	ldrb	r3, [r3, #0]
    75d0:	4413      	add	r3, r2
    75d2:	b2da      	uxtb	r2, r3
    75d4:	f24b 732e 	movw	r3, #46894	; 0xb72e
    75d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75dc:	701a      	strb	r2, [r3, #0]
    75de:	f24b 6329 	movw	r3, #46633	; 0xb629
    75e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75e6:	781b      	ldrb	r3, [r3, #0]
    75e8:	3301      	adds	r3, #1
    75ea:	b2da      	uxtb	r2, r3
    75ec:	f24b 6329 	movw	r3, #46633	; 0xb629
    75f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75f4:	701a      	strb	r2, [r3, #0]
    75f6:	f24b 6329 	movw	r3, #46633	; 0xb629
    75fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75fe:	781b      	ldrb	r3, [r3, #0]
    7600:	2bff      	cmp	r3, #255	; 0xff
    7602:	d105      	bne.n	7610 <send_desired+0x2fc>
    7604:	f24b 6329 	movw	r3, #46633	; 0xb629
    7608:	f2c2 0304 	movt	r3, #8196	; 0x2004
    760c:	2200      	movs	r2, #0
    760e:	701a      	strb	r2, [r3, #0]
    7610:	f24b 6329 	movw	r3, #46633	; 0xb629
    7614:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7618:	781b      	ldrb	r3, [r3, #0]
    761a:	461a      	mov	r2, r3
    761c:	f64b 1354 	movw	r3, #47444	; 0xb954
    7620:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7624:	78d9      	ldrb	r1, [r3, #3]
    7626:	f24b 632c 	movw	r3, #46636	; 0xb62c
    762a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    762e:	5499      	strb	r1, [r3, r2]
    7630:	4b8b      	ldr	r3, [pc, #556]	; (7860 <send_desired+0x54c>)
    7632:	781a      	ldrb	r2, [r3, #0]
    7634:	f24b 732d 	movw	r3, #46893	; 0xb72d
    7638:	f2c2 0304 	movt	r3, #8196	; 0x2004
    763c:	781b      	ldrb	r3, [r3, #0]
    763e:	4413      	add	r3, r2
    7640:	b2da      	uxtb	r2, r3
    7642:	f24b 732d 	movw	r3, #46893	; 0xb72d
    7646:	f2c2 0304 	movt	r3, #8196	; 0x2004
    764a:	701a      	strb	r2, [r3, #0]
    764c:	f24b 732e 	movw	r3, #46894	; 0xb72e
    7650:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7654:	781a      	ldrb	r2, [r3, #0]
    7656:	f24b 732d 	movw	r3, #46893	; 0xb72d
    765a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    765e:	781b      	ldrb	r3, [r3, #0]
    7660:	4413      	add	r3, r2
    7662:	b2da      	uxtb	r2, r3
    7664:	f24b 732e 	movw	r3, #46894	; 0xb72e
    7668:	f2c2 0304 	movt	r3, #8196	; 0x2004
    766c:	701a      	strb	r2, [r3, #0]
    766e:	f24b 6329 	movw	r3, #46633	; 0xb629
    7672:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7676:	781b      	ldrb	r3, [r3, #0]
    7678:	3301      	adds	r3, #1
    767a:	b2da      	uxtb	r2, r3
    767c:	f24b 6329 	movw	r3, #46633	; 0xb629
    7680:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7684:	701a      	strb	r2, [r3, #0]
    7686:	f24b 6329 	movw	r3, #46633	; 0xb629
    768a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    768e:	781b      	ldrb	r3, [r3, #0]
    7690:	2bff      	cmp	r3, #255	; 0xff
    7692:	d105      	bne.n	76a0 <send_desired+0x38c>
    7694:	f24b 6329 	movw	r3, #46633	; 0xb629
    7698:	f2c2 0304 	movt	r3, #8196	; 0x2004
    769c:	2200      	movs	r2, #0
    769e:	701a      	strb	r2, [r3, #0]
    76a0:	f24b 6329 	movw	r3, #46633	; 0xb629
    76a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76a8:	781b      	ldrb	r3, [r3, #0]
    76aa:	461a      	mov	r2, r3
    76ac:	f64b 1358 	movw	r3, #47448	; 0xb958
    76b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76b4:	7819      	ldrb	r1, [r3, #0]
    76b6:	f24b 632c 	movw	r3, #46636	; 0xb62c
    76ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76be:	5499      	strb	r1, [r3, r2]
    76c0:	f64b 1358 	movw	r3, #47448	; 0xb958
    76c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76c8:	781a      	ldrb	r2, [r3, #0]
    76ca:	f24b 732d 	movw	r3, #46893	; 0xb72d
    76ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76d2:	781b      	ldrb	r3, [r3, #0]
    76d4:	4413      	add	r3, r2
    76d6:	b2da      	uxtb	r2, r3
    76d8:	f24b 732d 	movw	r3, #46893	; 0xb72d
    76dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76e0:	701a      	strb	r2, [r3, #0]
    76e2:	f24b 732e 	movw	r3, #46894	; 0xb72e
    76e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76ea:	781a      	ldrb	r2, [r3, #0]
    76ec:	f24b 732d 	movw	r3, #46893	; 0xb72d
    76f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76f4:	781b      	ldrb	r3, [r3, #0]
    76f6:	4413      	add	r3, r2
    76f8:	b2da      	uxtb	r2, r3
    76fa:	f24b 732e 	movw	r3, #46894	; 0xb72e
    76fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7702:	701a      	strb	r2, [r3, #0]
    7704:	f24b 6329 	movw	r3, #46633	; 0xb629
    7708:	f2c2 0304 	movt	r3, #8196	; 0x2004
    770c:	781b      	ldrb	r3, [r3, #0]
    770e:	3301      	adds	r3, #1
    7710:	b2da      	uxtb	r2, r3
    7712:	f24b 6329 	movw	r3, #46633	; 0xb629
    7716:	f2c2 0304 	movt	r3, #8196	; 0x2004
    771a:	701a      	strb	r2, [r3, #0]
    771c:	f24b 6329 	movw	r3, #46633	; 0xb629
    7720:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7724:	781b      	ldrb	r3, [r3, #0]
    7726:	2bff      	cmp	r3, #255	; 0xff
    7728:	d105      	bne.n	7736 <send_desired+0x422>
    772a:	f24b 6329 	movw	r3, #46633	; 0xb629
    772e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7732:	2200      	movs	r2, #0
    7734:	701a      	strb	r2, [r3, #0]
    7736:	f24b 6329 	movw	r3, #46633	; 0xb629
    773a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    773e:	781b      	ldrb	r3, [r3, #0]
    7740:	461a      	mov	r2, r3
    7742:	f64b 1358 	movw	r3, #47448	; 0xb958
    7746:	f2c2 0304 	movt	r3, #8196	; 0x2004
    774a:	7859      	ldrb	r1, [r3, #1]
    774c:	f24b 632c 	movw	r3, #46636	; 0xb62c
    7750:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7754:	5499      	strb	r1, [r3, r2]
    7756:	4b43      	ldr	r3, [pc, #268]	; (7864 <send_desired+0x550>)
    7758:	781a      	ldrb	r2, [r3, #0]
    775a:	f24b 732d 	movw	r3, #46893	; 0xb72d
    775e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7762:	781b      	ldrb	r3, [r3, #0]
    7764:	4413      	add	r3, r2
    7766:	b2da      	uxtb	r2, r3
    7768:	f24b 732d 	movw	r3, #46893	; 0xb72d
    776c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7770:	701a      	strb	r2, [r3, #0]
    7772:	f24b 732e 	movw	r3, #46894	; 0xb72e
    7776:	f2c2 0304 	movt	r3, #8196	; 0x2004
    777a:	781a      	ldrb	r2, [r3, #0]
    777c:	f24b 732d 	movw	r3, #46893	; 0xb72d
    7780:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7784:	781b      	ldrb	r3, [r3, #0]
    7786:	4413      	add	r3, r2
    7788:	b2da      	uxtb	r2, r3
    778a:	f24b 732e 	movw	r3, #46894	; 0xb72e
    778e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7792:	701a      	strb	r2, [r3, #0]
    7794:	f24b 6329 	movw	r3, #46633	; 0xb629
    7798:	f2c2 0304 	movt	r3, #8196	; 0x2004
    779c:	781b      	ldrb	r3, [r3, #0]
    779e:	3301      	adds	r3, #1
    77a0:	b2da      	uxtb	r2, r3
    77a2:	f24b 6329 	movw	r3, #46633	; 0xb629
    77a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77aa:	701a      	strb	r2, [r3, #0]
    77ac:	f24b 6329 	movw	r3, #46633	; 0xb629
    77b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77b4:	781b      	ldrb	r3, [r3, #0]
    77b6:	2bff      	cmp	r3, #255	; 0xff
    77b8:	d105      	bne.n	77c6 <send_desired+0x4b2>
    77ba:	f24b 6329 	movw	r3, #46633	; 0xb629
    77be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77c2:	2200      	movs	r2, #0
    77c4:	701a      	strb	r2, [r3, #0]
    77c6:	f24b 6329 	movw	r3, #46633	; 0xb629
    77ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77ce:	781b      	ldrb	r3, [r3, #0]
    77d0:	461a      	mov	r2, r3
    77d2:	f64b 1358 	movw	r3, #47448	; 0xb958
    77d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77da:	7899      	ldrb	r1, [r3, #2]
    77dc:	f24b 632c 	movw	r3, #46636	; 0xb62c
    77e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77e4:	5499      	strb	r1, [r3, r2]
    77e6:	4b20      	ldr	r3, [pc, #128]	; (7868 <send_desired+0x554>)
    77e8:	781a      	ldrb	r2, [r3, #0]
    77ea:	f24b 732d 	movw	r3, #46893	; 0xb72d
    77ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77f2:	781b      	ldrb	r3, [r3, #0]
    77f4:	4413      	add	r3, r2
    77f6:	b2da      	uxtb	r2, r3
    77f8:	f24b 732d 	movw	r3, #46893	; 0xb72d
    77fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7800:	701a      	strb	r2, [r3, #0]
    7802:	f24b 732e 	movw	r3, #46894	; 0xb72e
    7806:	f2c2 0304 	movt	r3, #8196	; 0x2004
    780a:	781a      	ldrb	r2, [r3, #0]
    780c:	f24b 732d 	movw	r3, #46893	; 0xb72d
    7810:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7814:	781b      	ldrb	r3, [r3, #0]
    7816:	4413      	add	r3, r2
    7818:	b2da      	uxtb	r2, r3
    781a:	f24b 732e 	movw	r3, #46894	; 0xb72e
    781e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7822:	701a      	strb	r2, [r3, #0]
    7824:	f24b 6329 	movw	r3, #46633	; 0xb629
    7828:	f2c2 0304 	movt	r3, #8196	; 0x2004
    782c:	781b      	ldrb	r3, [r3, #0]
    782e:	3301      	adds	r3, #1
    7830:	b2da      	uxtb	r2, r3
    7832:	f24b 6329 	movw	r3, #46633	; 0xb629
    7836:	f2c2 0304 	movt	r3, #8196	; 0x2004
    783a:	701a      	strb	r2, [r3, #0]
    783c:	f24b 6329 	movw	r3, #46633	; 0xb629
    7840:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7844:	781b      	ldrb	r3, [r3, #0]
    7846:	2bff      	cmp	r3, #255	; 0xff
    7848:	d110      	bne.n	786c <send_desired+0x558>
    784a:	f24b 6329 	movw	r3, #46633	; 0xb629
    784e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7852:	2200      	movs	r2, #0
    7854:	701a      	strb	r2, [r3, #0]
    7856:	e009      	b.n	786c <send_desired+0x558>
    7858:	2004b955 	.word	0x2004b955
    785c:	2004b956 	.word	0x2004b956
    7860:	2004b957 	.word	0x2004b957
    7864:	2004b959 	.word	0x2004b959
    7868:	2004b95a 	.word	0x2004b95a
    786c:	f24b 6329 	movw	r3, #46633	; 0xb629
    7870:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7874:	781b      	ldrb	r3, [r3, #0]
    7876:	461a      	mov	r2, r3
    7878:	f64b 1358 	movw	r3, #47448	; 0xb958
    787c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7880:	78d9      	ldrb	r1, [r3, #3]
    7882:	f24b 632c 	movw	r3, #46636	; 0xb62c
    7886:	f2c2 0304 	movt	r3, #8196	; 0x2004
    788a:	5499      	strb	r1, [r3, r2]
    788c:	4bd3      	ldr	r3, [pc, #844]	; (7bdc <send_desired+0x8c8>)
    788e:	781a      	ldrb	r2, [r3, #0]
    7890:	f24b 732d 	movw	r3, #46893	; 0xb72d
    7894:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7898:	781b      	ldrb	r3, [r3, #0]
    789a:	4413      	add	r3, r2
    789c:	b2da      	uxtb	r2, r3
    789e:	f24b 732d 	movw	r3, #46893	; 0xb72d
    78a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78a6:	701a      	strb	r2, [r3, #0]
    78a8:	f24b 732e 	movw	r3, #46894	; 0xb72e
    78ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78b0:	781a      	ldrb	r2, [r3, #0]
    78b2:	f24b 732d 	movw	r3, #46893	; 0xb72d
    78b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78ba:	781b      	ldrb	r3, [r3, #0]
    78bc:	4413      	add	r3, r2
    78be:	b2da      	uxtb	r2, r3
    78c0:	f24b 732e 	movw	r3, #46894	; 0xb72e
    78c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78c8:	701a      	strb	r2, [r3, #0]
    78ca:	f24b 6329 	movw	r3, #46633	; 0xb629
    78ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78d2:	781b      	ldrb	r3, [r3, #0]
    78d4:	3301      	adds	r3, #1
    78d6:	b2da      	uxtb	r2, r3
    78d8:	f24b 6329 	movw	r3, #46633	; 0xb629
    78dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78e0:	701a      	strb	r2, [r3, #0]
    78e2:	f24b 6329 	movw	r3, #46633	; 0xb629
    78e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78ea:	781b      	ldrb	r3, [r3, #0]
    78ec:	2bff      	cmp	r3, #255	; 0xff
    78ee:	d105      	bne.n	78fc <send_desired+0x5e8>
    78f0:	f24b 6329 	movw	r3, #46633	; 0xb629
    78f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78f8:	2200      	movs	r2, #0
    78fa:	701a      	strb	r2, [r3, #0]
    78fc:	f24b 6329 	movw	r3, #46633	; 0xb629
    7900:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7904:	781b      	ldrb	r3, [r3, #0]
    7906:	461a      	mov	r2, r3
    7908:	f64b 13a0 	movw	r3, #47520	; 0xb9a0
    790c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7910:	7819      	ldrb	r1, [r3, #0]
    7912:	f24b 632c 	movw	r3, #46636	; 0xb62c
    7916:	f2c2 0304 	movt	r3, #8196	; 0x2004
    791a:	5499      	strb	r1, [r3, r2]
    791c:	f64b 13a0 	movw	r3, #47520	; 0xb9a0
    7920:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7924:	781a      	ldrb	r2, [r3, #0]
    7926:	f24b 732d 	movw	r3, #46893	; 0xb72d
    792a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    792e:	781b      	ldrb	r3, [r3, #0]
    7930:	4413      	add	r3, r2
    7932:	b2da      	uxtb	r2, r3
    7934:	f24b 732d 	movw	r3, #46893	; 0xb72d
    7938:	f2c2 0304 	movt	r3, #8196	; 0x2004
    793c:	701a      	strb	r2, [r3, #0]
    793e:	f24b 732e 	movw	r3, #46894	; 0xb72e
    7942:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7946:	781a      	ldrb	r2, [r3, #0]
    7948:	f24b 732d 	movw	r3, #46893	; 0xb72d
    794c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7950:	781b      	ldrb	r3, [r3, #0]
    7952:	4413      	add	r3, r2
    7954:	b2da      	uxtb	r2, r3
    7956:	f24b 732e 	movw	r3, #46894	; 0xb72e
    795a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    795e:	701a      	strb	r2, [r3, #0]
    7960:	f24b 6329 	movw	r3, #46633	; 0xb629
    7964:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7968:	781b      	ldrb	r3, [r3, #0]
    796a:	3301      	adds	r3, #1
    796c:	b2da      	uxtb	r2, r3
    796e:	f24b 6329 	movw	r3, #46633	; 0xb629
    7972:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7976:	701a      	strb	r2, [r3, #0]
    7978:	f24b 6329 	movw	r3, #46633	; 0xb629
    797c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7980:	781b      	ldrb	r3, [r3, #0]
    7982:	2bff      	cmp	r3, #255	; 0xff
    7984:	d105      	bne.n	7992 <send_desired+0x67e>
    7986:	f24b 6329 	movw	r3, #46633	; 0xb629
    798a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    798e:	2200      	movs	r2, #0
    7990:	701a      	strb	r2, [r3, #0]
    7992:	f24b 6329 	movw	r3, #46633	; 0xb629
    7996:	f2c2 0304 	movt	r3, #8196	; 0x2004
    799a:	781b      	ldrb	r3, [r3, #0]
    799c:	461a      	mov	r2, r3
    799e:	f64b 13a0 	movw	r3, #47520	; 0xb9a0
    79a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79a6:	7859      	ldrb	r1, [r3, #1]
    79a8:	f24b 632c 	movw	r3, #46636	; 0xb62c
    79ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79b0:	5499      	strb	r1, [r3, r2]
    79b2:	4b8b      	ldr	r3, [pc, #556]	; (7be0 <send_desired+0x8cc>)
    79b4:	781a      	ldrb	r2, [r3, #0]
    79b6:	f24b 732d 	movw	r3, #46893	; 0xb72d
    79ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79be:	781b      	ldrb	r3, [r3, #0]
    79c0:	4413      	add	r3, r2
    79c2:	b2da      	uxtb	r2, r3
    79c4:	f24b 732d 	movw	r3, #46893	; 0xb72d
    79c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79cc:	701a      	strb	r2, [r3, #0]
    79ce:	f24b 732e 	movw	r3, #46894	; 0xb72e
    79d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79d6:	781a      	ldrb	r2, [r3, #0]
    79d8:	f24b 732d 	movw	r3, #46893	; 0xb72d
    79dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79e0:	781b      	ldrb	r3, [r3, #0]
    79e2:	4413      	add	r3, r2
    79e4:	b2da      	uxtb	r2, r3
    79e6:	f24b 732e 	movw	r3, #46894	; 0xb72e
    79ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79ee:	701a      	strb	r2, [r3, #0]
    79f0:	f24b 6329 	movw	r3, #46633	; 0xb629
    79f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79f8:	781b      	ldrb	r3, [r3, #0]
    79fa:	3301      	adds	r3, #1
    79fc:	b2da      	uxtb	r2, r3
    79fe:	f24b 6329 	movw	r3, #46633	; 0xb629
    7a02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a06:	701a      	strb	r2, [r3, #0]
    7a08:	f24b 6329 	movw	r3, #46633	; 0xb629
    7a0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a10:	781b      	ldrb	r3, [r3, #0]
    7a12:	2bff      	cmp	r3, #255	; 0xff
    7a14:	d105      	bne.n	7a22 <send_desired+0x70e>
    7a16:	f24b 6329 	movw	r3, #46633	; 0xb629
    7a1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a1e:	2200      	movs	r2, #0
    7a20:	701a      	strb	r2, [r3, #0]
    7a22:	f24b 6329 	movw	r3, #46633	; 0xb629
    7a26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a2a:	781b      	ldrb	r3, [r3, #0]
    7a2c:	461a      	mov	r2, r3
    7a2e:	f64b 13a0 	movw	r3, #47520	; 0xb9a0
    7a32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a36:	7899      	ldrb	r1, [r3, #2]
    7a38:	f24b 632c 	movw	r3, #46636	; 0xb62c
    7a3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a40:	5499      	strb	r1, [r3, r2]
    7a42:	4b68      	ldr	r3, [pc, #416]	; (7be4 <send_desired+0x8d0>)
    7a44:	781a      	ldrb	r2, [r3, #0]
    7a46:	f24b 732d 	movw	r3, #46893	; 0xb72d
    7a4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a4e:	781b      	ldrb	r3, [r3, #0]
    7a50:	4413      	add	r3, r2
    7a52:	b2da      	uxtb	r2, r3
    7a54:	f24b 732d 	movw	r3, #46893	; 0xb72d
    7a58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a5c:	701a      	strb	r2, [r3, #0]
    7a5e:	f24b 732e 	movw	r3, #46894	; 0xb72e
    7a62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a66:	781a      	ldrb	r2, [r3, #0]
    7a68:	f24b 732d 	movw	r3, #46893	; 0xb72d
    7a6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a70:	781b      	ldrb	r3, [r3, #0]
    7a72:	4413      	add	r3, r2
    7a74:	b2da      	uxtb	r2, r3
    7a76:	f24b 732e 	movw	r3, #46894	; 0xb72e
    7a7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a7e:	701a      	strb	r2, [r3, #0]
    7a80:	f24b 6329 	movw	r3, #46633	; 0xb629
    7a84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a88:	781b      	ldrb	r3, [r3, #0]
    7a8a:	3301      	adds	r3, #1
    7a8c:	b2da      	uxtb	r2, r3
    7a8e:	f24b 6329 	movw	r3, #46633	; 0xb629
    7a92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a96:	701a      	strb	r2, [r3, #0]
    7a98:	f24b 6329 	movw	r3, #46633	; 0xb629
    7a9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7aa0:	781b      	ldrb	r3, [r3, #0]
    7aa2:	2bff      	cmp	r3, #255	; 0xff
    7aa4:	d105      	bne.n	7ab2 <send_desired+0x79e>
    7aa6:	f24b 6329 	movw	r3, #46633	; 0xb629
    7aaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7aae:	2200      	movs	r2, #0
    7ab0:	701a      	strb	r2, [r3, #0]
    7ab2:	f24b 6329 	movw	r3, #46633	; 0xb629
    7ab6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7aba:	781b      	ldrb	r3, [r3, #0]
    7abc:	461a      	mov	r2, r3
    7abe:	f64b 13a0 	movw	r3, #47520	; 0xb9a0
    7ac2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ac6:	78d9      	ldrb	r1, [r3, #3]
    7ac8:	f24b 632c 	movw	r3, #46636	; 0xb62c
    7acc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ad0:	5499      	strb	r1, [r3, r2]
    7ad2:	4b45      	ldr	r3, [pc, #276]	; (7be8 <send_desired+0x8d4>)
    7ad4:	781a      	ldrb	r2, [r3, #0]
    7ad6:	f24b 732d 	movw	r3, #46893	; 0xb72d
    7ada:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ade:	781b      	ldrb	r3, [r3, #0]
    7ae0:	4413      	add	r3, r2
    7ae2:	b2da      	uxtb	r2, r3
    7ae4:	f24b 732d 	movw	r3, #46893	; 0xb72d
    7ae8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7aec:	701a      	strb	r2, [r3, #0]
    7aee:	f24b 732e 	movw	r3, #46894	; 0xb72e
    7af2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7af6:	781a      	ldrb	r2, [r3, #0]
    7af8:	f24b 732d 	movw	r3, #46893	; 0xb72d
    7afc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b00:	781b      	ldrb	r3, [r3, #0]
    7b02:	4413      	add	r3, r2
    7b04:	b2da      	uxtb	r2, r3
    7b06:	f24b 732e 	movw	r3, #46894	; 0xb72e
    7b0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b0e:	701a      	strb	r2, [r3, #0]
    7b10:	f24b 6329 	movw	r3, #46633	; 0xb629
    7b14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b18:	781b      	ldrb	r3, [r3, #0]
    7b1a:	3301      	adds	r3, #1
    7b1c:	b2da      	uxtb	r2, r3
    7b1e:	f24b 6329 	movw	r3, #46633	; 0xb629
    7b22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b26:	701a      	strb	r2, [r3, #0]
    7b28:	f24b 6329 	movw	r3, #46633	; 0xb629
    7b2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b30:	781b      	ldrb	r3, [r3, #0]
    7b32:	2bff      	cmp	r3, #255	; 0xff
    7b34:	d105      	bne.n	7b42 <send_desired+0x82e>
    7b36:	f24b 6329 	movw	r3, #46633	; 0xb629
    7b3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b3e:	2200      	movs	r2, #0
    7b40:	701a      	strb	r2, [r3, #0]
    7b42:	f24b 6329 	movw	r3, #46633	; 0xb629
    7b46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b4a:	781b      	ldrb	r3, [r3, #0]
    7b4c:	461a      	mov	r2, r3
    7b4e:	f64b 13a4 	movw	r3, #47524	; 0xb9a4
    7b52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b56:	7819      	ldrb	r1, [r3, #0]
    7b58:	f24b 632c 	movw	r3, #46636	; 0xb62c
    7b5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b60:	5499      	strb	r1, [r3, r2]
    7b62:	f64b 13a4 	movw	r3, #47524	; 0xb9a4
    7b66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b6a:	781a      	ldrb	r2, [r3, #0]
    7b6c:	f24b 732d 	movw	r3, #46893	; 0xb72d
    7b70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b74:	781b      	ldrb	r3, [r3, #0]
    7b76:	4413      	add	r3, r2
    7b78:	b2da      	uxtb	r2, r3
    7b7a:	f24b 732d 	movw	r3, #46893	; 0xb72d
    7b7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b82:	701a      	strb	r2, [r3, #0]
    7b84:	f24b 732e 	movw	r3, #46894	; 0xb72e
    7b88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b8c:	781a      	ldrb	r2, [r3, #0]
    7b8e:	f24b 732d 	movw	r3, #46893	; 0xb72d
    7b92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b96:	781b      	ldrb	r3, [r3, #0]
    7b98:	4413      	add	r3, r2
    7b9a:	b2da      	uxtb	r2, r3
    7b9c:	f24b 732e 	movw	r3, #46894	; 0xb72e
    7ba0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ba4:	701a      	strb	r2, [r3, #0]
    7ba6:	f24b 6329 	movw	r3, #46633	; 0xb629
    7baa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bae:	781b      	ldrb	r3, [r3, #0]
    7bb0:	3301      	adds	r3, #1
    7bb2:	b2da      	uxtb	r2, r3
    7bb4:	f24b 6329 	movw	r3, #46633	; 0xb629
    7bb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bbc:	701a      	strb	r2, [r3, #0]
    7bbe:	f24b 6329 	movw	r3, #46633	; 0xb629
    7bc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bc6:	781b      	ldrb	r3, [r3, #0]
    7bc8:	2bff      	cmp	r3, #255	; 0xff
    7bca:	d10f      	bne.n	7bec <send_desired+0x8d8>
    7bcc:	f24b 6329 	movw	r3, #46633	; 0xb629
    7bd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bd4:	2200      	movs	r2, #0
    7bd6:	701a      	strb	r2, [r3, #0]
    7bd8:	e008      	b.n	7bec <send_desired+0x8d8>
    7bda:	bf00      	nop
    7bdc:	2004b95b 	.word	0x2004b95b
    7be0:	2004b9a1 	.word	0x2004b9a1
    7be4:	2004b9a2 	.word	0x2004b9a2
    7be8:	2004b9a3 	.word	0x2004b9a3
    7bec:	f24b 6329 	movw	r3, #46633	; 0xb629
    7bf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bf4:	781b      	ldrb	r3, [r3, #0]
    7bf6:	461a      	mov	r2, r3
    7bf8:	f64b 13a4 	movw	r3, #47524	; 0xb9a4
    7bfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c00:	7859      	ldrb	r1, [r3, #1]
    7c02:	f24b 632c 	movw	r3, #46636	; 0xb62c
    7c06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c0a:	5499      	strb	r1, [r3, r2]
    7c0c:	4bd1      	ldr	r3, [pc, #836]	; (7f54 <send_desired+0xc40>)
    7c0e:	781a      	ldrb	r2, [r3, #0]
    7c10:	f24b 732d 	movw	r3, #46893	; 0xb72d
    7c14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c18:	781b      	ldrb	r3, [r3, #0]
    7c1a:	4413      	add	r3, r2
    7c1c:	b2da      	uxtb	r2, r3
    7c1e:	f24b 732d 	movw	r3, #46893	; 0xb72d
    7c22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c26:	701a      	strb	r2, [r3, #0]
    7c28:	f24b 732e 	movw	r3, #46894	; 0xb72e
    7c2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c30:	781a      	ldrb	r2, [r3, #0]
    7c32:	f24b 732d 	movw	r3, #46893	; 0xb72d
    7c36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c3a:	781b      	ldrb	r3, [r3, #0]
    7c3c:	4413      	add	r3, r2
    7c3e:	b2da      	uxtb	r2, r3
    7c40:	f24b 732e 	movw	r3, #46894	; 0xb72e
    7c44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c48:	701a      	strb	r2, [r3, #0]
    7c4a:	f24b 6329 	movw	r3, #46633	; 0xb629
    7c4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c52:	781b      	ldrb	r3, [r3, #0]
    7c54:	3301      	adds	r3, #1
    7c56:	b2da      	uxtb	r2, r3
    7c58:	f24b 6329 	movw	r3, #46633	; 0xb629
    7c5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c60:	701a      	strb	r2, [r3, #0]
    7c62:	f24b 6329 	movw	r3, #46633	; 0xb629
    7c66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c6a:	781b      	ldrb	r3, [r3, #0]
    7c6c:	2bff      	cmp	r3, #255	; 0xff
    7c6e:	d105      	bne.n	7c7c <send_desired+0x968>
    7c70:	f24b 6329 	movw	r3, #46633	; 0xb629
    7c74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c78:	2200      	movs	r2, #0
    7c7a:	701a      	strb	r2, [r3, #0]
    7c7c:	f24b 6329 	movw	r3, #46633	; 0xb629
    7c80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c84:	781b      	ldrb	r3, [r3, #0]
    7c86:	461a      	mov	r2, r3
    7c88:	f64b 13a4 	movw	r3, #47524	; 0xb9a4
    7c8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c90:	7899      	ldrb	r1, [r3, #2]
    7c92:	f24b 632c 	movw	r3, #46636	; 0xb62c
    7c96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c9a:	5499      	strb	r1, [r3, r2]
    7c9c:	4bae      	ldr	r3, [pc, #696]	; (7f58 <send_desired+0xc44>)
    7c9e:	781a      	ldrb	r2, [r3, #0]
    7ca0:	f24b 732d 	movw	r3, #46893	; 0xb72d
    7ca4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ca8:	781b      	ldrb	r3, [r3, #0]
    7caa:	4413      	add	r3, r2
    7cac:	b2da      	uxtb	r2, r3
    7cae:	f24b 732d 	movw	r3, #46893	; 0xb72d
    7cb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cb6:	701a      	strb	r2, [r3, #0]
    7cb8:	f24b 732e 	movw	r3, #46894	; 0xb72e
    7cbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cc0:	781a      	ldrb	r2, [r3, #0]
    7cc2:	f24b 732d 	movw	r3, #46893	; 0xb72d
    7cc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cca:	781b      	ldrb	r3, [r3, #0]
    7ccc:	4413      	add	r3, r2
    7cce:	b2da      	uxtb	r2, r3
    7cd0:	f24b 732e 	movw	r3, #46894	; 0xb72e
    7cd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cd8:	701a      	strb	r2, [r3, #0]
    7cda:	f24b 6329 	movw	r3, #46633	; 0xb629
    7cde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ce2:	781b      	ldrb	r3, [r3, #0]
    7ce4:	3301      	adds	r3, #1
    7ce6:	b2da      	uxtb	r2, r3
    7ce8:	f24b 6329 	movw	r3, #46633	; 0xb629
    7cec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cf0:	701a      	strb	r2, [r3, #0]
    7cf2:	f24b 6329 	movw	r3, #46633	; 0xb629
    7cf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cfa:	781b      	ldrb	r3, [r3, #0]
    7cfc:	2bff      	cmp	r3, #255	; 0xff
    7cfe:	d105      	bne.n	7d0c <send_desired+0x9f8>
    7d00:	f24b 6329 	movw	r3, #46633	; 0xb629
    7d04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d08:	2200      	movs	r2, #0
    7d0a:	701a      	strb	r2, [r3, #0]
    7d0c:	f24b 6329 	movw	r3, #46633	; 0xb629
    7d10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d14:	781b      	ldrb	r3, [r3, #0]
    7d16:	461a      	mov	r2, r3
    7d18:	f64b 13a4 	movw	r3, #47524	; 0xb9a4
    7d1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d20:	78d9      	ldrb	r1, [r3, #3]
    7d22:	f24b 632c 	movw	r3, #46636	; 0xb62c
    7d26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d2a:	5499      	strb	r1, [r3, r2]
    7d2c:	4b8b      	ldr	r3, [pc, #556]	; (7f5c <send_desired+0xc48>)
    7d2e:	781a      	ldrb	r2, [r3, #0]
    7d30:	f24b 732d 	movw	r3, #46893	; 0xb72d
    7d34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d38:	781b      	ldrb	r3, [r3, #0]
    7d3a:	4413      	add	r3, r2
    7d3c:	b2da      	uxtb	r2, r3
    7d3e:	f24b 732d 	movw	r3, #46893	; 0xb72d
    7d42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d46:	701a      	strb	r2, [r3, #0]
    7d48:	f24b 732e 	movw	r3, #46894	; 0xb72e
    7d4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d50:	781a      	ldrb	r2, [r3, #0]
    7d52:	f24b 732d 	movw	r3, #46893	; 0xb72d
    7d56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d5a:	781b      	ldrb	r3, [r3, #0]
    7d5c:	4413      	add	r3, r2
    7d5e:	b2da      	uxtb	r2, r3
    7d60:	f24b 732e 	movw	r3, #46894	; 0xb72e
    7d64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d68:	701a      	strb	r2, [r3, #0]
    7d6a:	f24b 6329 	movw	r3, #46633	; 0xb629
    7d6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d72:	781b      	ldrb	r3, [r3, #0]
    7d74:	3301      	adds	r3, #1
    7d76:	b2da      	uxtb	r2, r3
    7d78:	f24b 6329 	movw	r3, #46633	; 0xb629
    7d7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d80:	701a      	strb	r2, [r3, #0]
    7d82:	f24b 6329 	movw	r3, #46633	; 0xb629
    7d86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d8a:	781b      	ldrb	r3, [r3, #0]
    7d8c:	2bff      	cmp	r3, #255	; 0xff
    7d8e:	d105      	bne.n	7d9c <send_desired+0xa88>
    7d90:	f24b 6329 	movw	r3, #46633	; 0xb629
    7d94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d98:	2200      	movs	r2, #0
    7d9a:	701a      	strb	r2, [r3, #0]
    7d9c:	f24b 6329 	movw	r3, #46633	; 0xb629
    7da0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7da4:	781b      	ldrb	r3, [r3, #0]
    7da6:	461a      	mov	r2, r3
    7da8:	f240 133c 	movw	r3, #316	; 0x13c
    7dac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7db0:	7819      	ldrb	r1, [r3, #0]
    7db2:	f24b 632c 	movw	r3, #46636	; 0xb62c
    7db6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dba:	5499      	strb	r1, [r3, r2]
    7dbc:	f240 133c 	movw	r3, #316	; 0x13c
    7dc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7dc4:	781a      	ldrb	r2, [r3, #0]
    7dc6:	f24b 732d 	movw	r3, #46893	; 0xb72d
    7dca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dce:	781b      	ldrb	r3, [r3, #0]
    7dd0:	4413      	add	r3, r2
    7dd2:	b2da      	uxtb	r2, r3
    7dd4:	f24b 732d 	movw	r3, #46893	; 0xb72d
    7dd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ddc:	701a      	strb	r2, [r3, #0]
    7dde:	f24b 732e 	movw	r3, #46894	; 0xb72e
    7de2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7de6:	781a      	ldrb	r2, [r3, #0]
    7de8:	f24b 732d 	movw	r3, #46893	; 0xb72d
    7dec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7df0:	781b      	ldrb	r3, [r3, #0]
    7df2:	4413      	add	r3, r2
    7df4:	b2da      	uxtb	r2, r3
    7df6:	f24b 732e 	movw	r3, #46894	; 0xb72e
    7dfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dfe:	701a      	strb	r2, [r3, #0]
    7e00:	f24b 6329 	movw	r3, #46633	; 0xb629
    7e04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e08:	781b      	ldrb	r3, [r3, #0]
    7e0a:	3301      	adds	r3, #1
    7e0c:	b2da      	uxtb	r2, r3
    7e0e:	f24b 6329 	movw	r3, #46633	; 0xb629
    7e12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e16:	701a      	strb	r2, [r3, #0]
    7e18:	f24b 6329 	movw	r3, #46633	; 0xb629
    7e1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e20:	781b      	ldrb	r3, [r3, #0]
    7e22:	2bff      	cmp	r3, #255	; 0xff
    7e24:	d105      	bne.n	7e32 <send_desired+0xb1e>
    7e26:	f24b 6329 	movw	r3, #46633	; 0xb629
    7e2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e2e:	2200      	movs	r2, #0
    7e30:	701a      	strb	r2, [r3, #0]
    7e32:	f24b 6329 	movw	r3, #46633	; 0xb629
    7e36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e3a:	781b      	ldrb	r3, [r3, #0]
    7e3c:	461a      	mov	r2, r3
    7e3e:	f240 133c 	movw	r3, #316	; 0x13c
    7e42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e46:	7859      	ldrb	r1, [r3, #1]
    7e48:	f24b 632c 	movw	r3, #46636	; 0xb62c
    7e4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e50:	5499      	strb	r1, [r3, r2]
    7e52:	4b43      	ldr	r3, [pc, #268]	; (7f60 <send_desired+0xc4c>)
    7e54:	781a      	ldrb	r2, [r3, #0]
    7e56:	f24b 732d 	movw	r3, #46893	; 0xb72d
    7e5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e5e:	781b      	ldrb	r3, [r3, #0]
    7e60:	4413      	add	r3, r2
    7e62:	b2da      	uxtb	r2, r3
    7e64:	f24b 732d 	movw	r3, #46893	; 0xb72d
    7e68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e6c:	701a      	strb	r2, [r3, #0]
    7e6e:	f24b 732e 	movw	r3, #46894	; 0xb72e
    7e72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e76:	781a      	ldrb	r2, [r3, #0]
    7e78:	f24b 732d 	movw	r3, #46893	; 0xb72d
    7e7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e80:	781b      	ldrb	r3, [r3, #0]
    7e82:	4413      	add	r3, r2
    7e84:	b2da      	uxtb	r2, r3
    7e86:	f24b 732e 	movw	r3, #46894	; 0xb72e
    7e8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e8e:	701a      	strb	r2, [r3, #0]
    7e90:	f24b 6329 	movw	r3, #46633	; 0xb629
    7e94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e98:	781b      	ldrb	r3, [r3, #0]
    7e9a:	3301      	adds	r3, #1
    7e9c:	b2da      	uxtb	r2, r3
    7e9e:	f24b 6329 	movw	r3, #46633	; 0xb629
    7ea2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ea6:	701a      	strb	r2, [r3, #0]
    7ea8:	f24b 6329 	movw	r3, #46633	; 0xb629
    7eac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7eb0:	781b      	ldrb	r3, [r3, #0]
    7eb2:	2bff      	cmp	r3, #255	; 0xff
    7eb4:	d105      	bne.n	7ec2 <send_desired+0xbae>
    7eb6:	f24b 6329 	movw	r3, #46633	; 0xb629
    7eba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ebe:	2200      	movs	r2, #0
    7ec0:	701a      	strb	r2, [r3, #0]
    7ec2:	f24b 6329 	movw	r3, #46633	; 0xb629
    7ec6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7eca:	781b      	ldrb	r3, [r3, #0]
    7ecc:	461a      	mov	r2, r3
    7ece:	f240 133c 	movw	r3, #316	; 0x13c
    7ed2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ed6:	7899      	ldrb	r1, [r3, #2]
    7ed8:	f24b 632c 	movw	r3, #46636	; 0xb62c
    7edc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ee0:	5499      	strb	r1, [r3, r2]
    7ee2:	4b20      	ldr	r3, [pc, #128]	; (7f64 <send_desired+0xc50>)
    7ee4:	781a      	ldrb	r2, [r3, #0]
    7ee6:	f24b 732d 	movw	r3, #46893	; 0xb72d
    7eea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7eee:	781b      	ldrb	r3, [r3, #0]
    7ef0:	4413      	add	r3, r2
    7ef2:	b2da      	uxtb	r2, r3
    7ef4:	f24b 732d 	movw	r3, #46893	; 0xb72d
    7ef8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7efc:	701a      	strb	r2, [r3, #0]
    7efe:	f24b 732e 	movw	r3, #46894	; 0xb72e
    7f02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f06:	781a      	ldrb	r2, [r3, #0]
    7f08:	f24b 732d 	movw	r3, #46893	; 0xb72d
    7f0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f10:	781b      	ldrb	r3, [r3, #0]
    7f12:	4413      	add	r3, r2
    7f14:	b2da      	uxtb	r2, r3
    7f16:	f24b 732e 	movw	r3, #46894	; 0xb72e
    7f1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f1e:	701a      	strb	r2, [r3, #0]
    7f20:	f24b 6329 	movw	r3, #46633	; 0xb629
    7f24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f28:	781b      	ldrb	r3, [r3, #0]
    7f2a:	3301      	adds	r3, #1
    7f2c:	b2da      	uxtb	r2, r3
    7f2e:	f24b 6329 	movw	r3, #46633	; 0xb629
    7f32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f36:	701a      	strb	r2, [r3, #0]
    7f38:	f24b 6329 	movw	r3, #46633	; 0xb629
    7f3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f40:	781b      	ldrb	r3, [r3, #0]
    7f42:	2bff      	cmp	r3, #255	; 0xff
    7f44:	d110      	bne.n	7f68 <send_desired+0xc54>
    7f46:	f24b 6329 	movw	r3, #46633	; 0xb629
    7f4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f4e:	2200      	movs	r2, #0
    7f50:	701a      	strb	r2, [r3, #0]
    7f52:	e009      	b.n	7f68 <send_desired+0xc54>
    7f54:	2004b9a5 	.word	0x2004b9a5
    7f58:	2004b9a6 	.word	0x2004b9a6
    7f5c:	2004b9a7 	.word	0x2004b9a7
    7f60:	2000013d 	.word	0x2000013d
    7f64:	2000013e 	.word	0x2000013e
    7f68:	f24b 6329 	movw	r3, #46633	; 0xb629
    7f6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f70:	781b      	ldrb	r3, [r3, #0]
    7f72:	461a      	mov	r2, r3
    7f74:	f240 133c 	movw	r3, #316	; 0x13c
    7f78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f7c:	78d9      	ldrb	r1, [r3, #3]
    7f7e:	f24b 632c 	movw	r3, #46636	; 0xb62c
    7f82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f86:	5499      	strb	r1, [r3, r2]
    7f88:	4b79      	ldr	r3, [pc, #484]	; (8170 <send_desired+0xe5c>)
    7f8a:	781a      	ldrb	r2, [r3, #0]
    7f8c:	f24b 732d 	movw	r3, #46893	; 0xb72d
    7f90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f94:	781b      	ldrb	r3, [r3, #0]
    7f96:	4413      	add	r3, r2
    7f98:	b2da      	uxtb	r2, r3
    7f9a:	f24b 732d 	movw	r3, #46893	; 0xb72d
    7f9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fa2:	701a      	strb	r2, [r3, #0]
    7fa4:	f24b 732e 	movw	r3, #46894	; 0xb72e
    7fa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fac:	781a      	ldrb	r2, [r3, #0]
    7fae:	f24b 732d 	movw	r3, #46893	; 0xb72d
    7fb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fb6:	781b      	ldrb	r3, [r3, #0]
    7fb8:	4413      	add	r3, r2
    7fba:	b2da      	uxtb	r2, r3
    7fbc:	f24b 732e 	movw	r3, #46894	; 0xb72e
    7fc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fc4:	701a      	strb	r2, [r3, #0]
    7fc6:	f24b 6329 	movw	r3, #46633	; 0xb629
    7fca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fce:	781b      	ldrb	r3, [r3, #0]
    7fd0:	3301      	adds	r3, #1
    7fd2:	b2da      	uxtb	r2, r3
    7fd4:	f24b 6329 	movw	r3, #46633	; 0xb629
    7fd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fdc:	701a      	strb	r2, [r3, #0]
    7fde:	f24b 6329 	movw	r3, #46633	; 0xb629
    7fe2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fe6:	781b      	ldrb	r3, [r3, #0]
    7fe8:	2bff      	cmp	r3, #255	; 0xff
    7fea:	d105      	bne.n	7ff8 <send_desired+0xce4>
    7fec:	f24b 6329 	movw	r3, #46633	; 0xb629
    7ff0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ff4:	2200      	movs	r2, #0
    7ff6:	701a      	strb	r2, [r3, #0]
    7ff8:	f24b 6329 	movw	r3, #46633	; 0xb629
    7ffc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8000:	781b      	ldrb	r3, [r3, #0]
    8002:	461a      	mov	r2, r3
    8004:	f24b 732d 	movw	r3, #46893	; 0xb72d
    8008:	f2c2 0304 	movt	r3, #8196	; 0x2004
    800c:	7819      	ldrb	r1, [r3, #0]
    800e:	f24b 632c 	movw	r3, #46636	; 0xb62c
    8012:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8016:	5499      	strb	r1, [r3, r2]
    8018:	f24b 6329 	movw	r3, #46633	; 0xb629
    801c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8020:	781b      	ldrb	r3, [r3, #0]
    8022:	3301      	adds	r3, #1
    8024:	b2da      	uxtb	r2, r3
    8026:	f24b 6329 	movw	r3, #46633	; 0xb629
    802a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    802e:	701a      	strb	r2, [r3, #0]
    8030:	f24b 6329 	movw	r3, #46633	; 0xb629
    8034:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8038:	781b      	ldrb	r3, [r3, #0]
    803a:	2bff      	cmp	r3, #255	; 0xff
    803c:	d105      	bne.n	804a <send_desired+0xd36>
    803e:	f24b 6329 	movw	r3, #46633	; 0xb629
    8042:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8046:	2200      	movs	r2, #0
    8048:	701a      	strb	r2, [r3, #0]
    804a:	f24b 6329 	movw	r3, #46633	; 0xb629
    804e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8052:	781b      	ldrb	r3, [r3, #0]
    8054:	461a      	mov	r2, r3
    8056:	f24b 732e 	movw	r3, #46894	; 0xb72e
    805a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    805e:	7819      	ldrb	r1, [r3, #0]
    8060:	f24b 632c 	movw	r3, #46636	; 0xb62c
    8064:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8068:	5499      	strb	r1, [r3, r2]
    806a:	f24b 6329 	movw	r3, #46633	; 0xb629
    806e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8072:	781b      	ldrb	r3, [r3, #0]
    8074:	3301      	adds	r3, #1
    8076:	b2da      	uxtb	r2, r3
    8078:	f24b 6329 	movw	r3, #46633	; 0xb629
    807c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8080:	701a      	strb	r2, [r3, #0]
    8082:	f24b 6329 	movw	r3, #46633	; 0xb629
    8086:	f2c2 0304 	movt	r3, #8196	; 0x2004
    808a:	781b      	ldrb	r3, [r3, #0]
    808c:	2bff      	cmp	r3, #255	; 0xff
    808e:	d105      	bne.n	809c <send_desired+0xd88>
    8090:	f24b 6329 	movw	r3, #46633	; 0xb629
    8094:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8098:	2200      	movs	r2, #0
    809a:	701a      	strb	r2, [r3, #0]
    809c:	f248 0339 	movw	r3, #32825	; 0x8039
    80a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80a4:	781b      	ldrb	r3, [r3, #0]
    80a6:	b2db      	uxtb	r3, r3
    80a8:	f003 0310 	and.w	r3, r3, #16
    80ac:	2b00      	cmp	r3, #0
    80ae:	d15a      	bne.n	8166 <send_desired+0xe52>
    80b0:	f24b 632a 	movw	r3, #46634	; 0xb62a
    80b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80b8:	781b      	ldrb	r3, [r3, #0]
    80ba:	b2db      	uxtb	r3, r3
    80bc:	461a      	mov	r2, r3
    80be:	f24b 632c 	movw	r3, #46636	; 0xb62c
    80c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80c6:	5c9a      	ldrb	r2, [r3, r2]
    80c8:	f24b 732b 	movw	r3, #46891	; 0xb72b
    80cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80d0:	701a      	strb	r2, [r3, #0]
    80d2:	f24b 732c 	movw	r3, #46892	; 0xb72c
    80d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80da:	2200      	movs	r2, #0
    80dc:	701a      	strb	r2, [r3, #0]
    80de:	f24b 632a 	movw	r3, #46634	; 0xb62a
    80e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80e6:	781b      	ldrb	r3, [r3, #0]
    80e8:	b2db      	uxtb	r3, r3
    80ea:	3301      	adds	r3, #1
    80ec:	b2da      	uxtb	r2, r3
    80ee:	f24b 632a 	movw	r3, #46634	; 0xb62a
    80f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80f6:	701a      	strb	r2, [r3, #0]
    80f8:	f24b 632a 	movw	r3, #46634	; 0xb62a
    80fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8100:	781b      	ldrb	r3, [r3, #0]
    8102:	b2db      	uxtb	r3, r3
    8104:	2bff      	cmp	r3, #255	; 0xff
    8106:	d105      	bne.n	8114 <send_desired+0xe00>
    8108:	f24b 632a 	movw	r3, #46634	; 0xb62a
    810c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8110:	2200      	movs	r2, #0
    8112:	701a      	strb	r2, [r3, #0]
    8114:	f248 0338 	movw	r3, #32824	; 0x8038
    8118:	f2c2 0300 	movt	r3, #8192	; 0x2000
    811c:	f248 0238 	movw	r2, #32824	; 0x8038
    8120:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8124:	7812      	ldrb	r2, [r2, #0]
    8126:	b2d2      	uxtb	r2, r2
    8128:	f042 0201 	orr.w	r2, r2, #1
    812c:	b2d2      	uxtb	r2, r2
    812e:	701a      	strb	r2, [r3, #0]
    8130:	f248 0339 	movw	r3, #32825	; 0x8039
    8134:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8138:	f248 0239 	movw	r2, #32825	; 0x8039
    813c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8140:	7812      	ldrb	r2, [r2, #0]
    8142:	b2d2      	uxtb	r2, r2
    8144:	f042 0210 	orr.w	r2, r2, #16
    8148:	b2d2      	uxtb	r2, r2
    814a:	701a      	strb	r2, [r3, #0]
    814c:	e00b      	b.n	8166 <send_desired+0xe52>
    814e:	f24b 6328 	movw	r3, #46632	; 0xb628
    8152:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8156:	781b      	ldrb	r3, [r3, #0]
    8158:	3301      	adds	r3, #1
    815a:	b2da      	uxtb	r2, r3
    815c:	f24b 6328 	movw	r3, #46632	; 0xb628
    8160:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8164:	701a      	strb	r2, [r3, #0]
}
    8166:	46bd      	mov	sp, r7
    8168:	f85d 7b04 	ldr.w	r7, [sp], #4
    816c:	4770      	bx	lr
    816e:	bf00      	nop
    8170:	2000013f 	.word	0x2000013f

00008174 <send_bat>:
void send_bat(void){  //2000ms
    8174:	b480      	push	{r7}
    8176:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 20 == 8) PERIODIC_SEND_BAT();}
    8178:	f24b 6321 	movw	r3, #46625	; 0xb621
    817c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8180:	781a      	ldrb	r2, [r3, #0]
    8182:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    8186:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    818a:	fba3 1302 	umull	r1, r3, r3, r2
    818e:	0919      	lsrs	r1, r3, #4
    8190:	460b      	mov	r3, r1
    8192:	009b      	lsls	r3, r3, #2
    8194:	440b      	add	r3, r1
    8196:	009b      	lsls	r3, r3, #2
    8198:	1ad3      	subs	r3, r2, r3
    819a:	b2db      	uxtb	r3, r3
    819c:	2b08      	cmp	r3, #8
    819e:	f040 839a 	bne.w	88d6 <send_bat+0x762>
    81a2:	f24b 6329 	movw	r3, #46633	; 0xb629
    81a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81aa:	781a      	ldrb	r2, [r3, #0]
    81ac:	f24b 632a 	movw	r3, #46634	; 0xb62a
    81b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81b4:	781b      	ldrb	r3, [r3, #0]
    81b6:	b2db      	uxtb	r3, r3
    81b8:	429a      	cmp	r2, r3
    81ba:	d313      	bcc.n	81e4 <send_bat+0x70>
    81bc:	f24b 632a 	movw	r3, #46634	; 0xb62a
    81c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81c4:	781b      	ldrb	r3, [r3, #0]
    81c6:	b2db      	uxtb	r3, r3
    81c8:	461a      	mov	r2, r3
    81ca:	f24b 6329 	movw	r3, #46633	; 0xb629
    81ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81d2:	781b      	ldrb	r3, [r3, #0]
    81d4:	1ad3      	subs	r3, r2, r3
    81d6:	33ff      	adds	r3, #255	; 0xff
    81d8:	2b0c      	cmp	r3, #12
    81da:	bfd4      	ite	le
    81dc:	2300      	movle	r3, #0
    81de:	2301      	movgt	r3, #1
    81e0:	b2db      	uxtb	r3, r3
    81e2:	e011      	b.n	8208 <send_bat+0x94>
    81e4:	f24b 632a 	movw	r3, #46634	; 0xb62a
    81e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81ec:	781b      	ldrb	r3, [r3, #0]
    81ee:	b2db      	uxtb	r3, r3
    81f0:	461a      	mov	r2, r3
    81f2:	f24b 6329 	movw	r3, #46633	; 0xb629
    81f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81fa:	781b      	ldrb	r3, [r3, #0]
    81fc:	1ad3      	subs	r3, r2, r3
    81fe:	2b0c      	cmp	r3, #12
    8200:	bfd4      	ite	le
    8202:	2300      	movle	r3, #0
    8204:	2301      	movgt	r3, #1
    8206:	b2db      	uxtb	r3, r3
    8208:	2b00      	cmp	r3, #0
    820a:	f000 8358 	beq.w	88be <send_bat+0x74a>
    820e:	f24b 6329 	movw	r3, #46633	; 0xb629
    8212:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8216:	781b      	ldrb	r3, [r3, #0]
    8218:	461a      	mov	r2, r3
    821a:	f24b 632c 	movw	r3, #46636	; 0xb62c
    821e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8222:	2105      	movs	r1, #5
    8224:	5499      	strb	r1, [r3, r2]
    8226:	f24b 6329 	movw	r3, #46633	; 0xb629
    822a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    822e:	781b      	ldrb	r3, [r3, #0]
    8230:	3301      	adds	r3, #1
    8232:	b2da      	uxtb	r2, r3
    8234:	f24b 6329 	movw	r3, #46633	; 0xb629
    8238:	f2c2 0304 	movt	r3, #8196	; 0x2004
    823c:	701a      	strb	r2, [r3, #0]
    823e:	f24b 6329 	movw	r3, #46633	; 0xb629
    8242:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8246:	781b      	ldrb	r3, [r3, #0]
    8248:	2bff      	cmp	r3, #255	; 0xff
    824a:	d105      	bne.n	8258 <send_bat+0xe4>
    824c:	f24b 6329 	movw	r3, #46633	; 0xb629
    8250:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8254:	2200      	movs	r2, #0
    8256:	701a      	strb	r2, [r3, #0]
    8258:	f24b 6329 	movw	r3, #46633	; 0xb629
    825c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8260:	781b      	ldrb	r3, [r3, #0]
    8262:	461a      	mov	r2, r3
    8264:	f24b 632c 	movw	r3, #46636	; 0xb62c
    8268:	f2c2 0304 	movt	r3, #8196	; 0x2004
    826c:	210c      	movs	r1, #12
    826e:	5499      	strb	r1, [r3, r2]
    8270:	f24b 6329 	movw	r3, #46633	; 0xb629
    8274:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8278:	781b      	ldrb	r3, [r3, #0]
    827a:	3301      	adds	r3, #1
    827c:	b2da      	uxtb	r2, r3
    827e:	f24b 6329 	movw	r3, #46633	; 0xb629
    8282:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8286:	701a      	strb	r2, [r3, #0]
    8288:	f24b 6329 	movw	r3, #46633	; 0xb629
    828c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8290:	781b      	ldrb	r3, [r3, #0]
    8292:	2bff      	cmp	r3, #255	; 0xff
    8294:	d105      	bne.n	82a2 <send_bat+0x12e>
    8296:	f24b 6329 	movw	r3, #46633	; 0xb629
    829a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    829e:	2200      	movs	r2, #0
    82a0:	701a      	strb	r2, [r3, #0]
    82a2:	f24b 732d 	movw	r3, #46893	; 0xb72d
    82a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82aa:	220c      	movs	r2, #12
    82ac:	701a      	strb	r2, [r3, #0]
    82ae:	f24b 732e 	movw	r3, #46894	; 0xb72e
    82b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82b6:	220c      	movs	r2, #12
    82b8:	701a      	strb	r2, [r3, #0]
    82ba:	f24b 6329 	movw	r3, #46633	; 0xb629
    82be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82c2:	781b      	ldrb	r3, [r3, #0]
    82c4:	461a      	mov	r2, r3
    82c6:	f24b 6312 	movw	r3, #46610	; 0xb612
    82ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82ce:	7819      	ldrb	r1, [r3, #0]
    82d0:	f24b 632c 	movw	r3, #46636	; 0xb62c
    82d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82d8:	5499      	strb	r1, [r3, r2]
    82da:	f24b 732d 	movw	r3, #46893	; 0xb72d
    82de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82e2:	781a      	ldrb	r2, [r3, #0]
    82e4:	f24b 6312 	movw	r3, #46610	; 0xb612
    82e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82ec:	781b      	ldrb	r3, [r3, #0]
    82ee:	4413      	add	r3, r2
    82f0:	b2da      	uxtb	r2, r3
    82f2:	f24b 732d 	movw	r3, #46893	; 0xb72d
    82f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82fa:	701a      	strb	r2, [r3, #0]
    82fc:	f24b 732e 	movw	r3, #46894	; 0xb72e
    8300:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8304:	781a      	ldrb	r2, [r3, #0]
    8306:	f24b 732d 	movw	r3, #46893	; 0xb72d
    830a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    830e:	781b      	ldrb	r3, [r3, #0]
    8310:	4413      	add	r3, r2
    8312:	b2da      	uxtb	r2, r3
    8314:	f24b 732e 	movw	r3, #46894	; 0xb72e
    8318:	f2c2 0304 	movt	r3, #8196	; 0x2004
    831c:	701a      	strb	r2, [r3, #0]
    831e:	f24b 6329 	movw	r3, #46633	; 0xb629
    8322:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8326:	781b      	ldrb	r3, [r3, #0]
    8328:	3301      	adds	r3, #1
    832a:	b2da      	uxtb	r2, r3
    832c:	f24b 6329 	movw	r3, #46633	; 0xb629
    8330:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8334:	701a      	strb	r2, [r3, #0]
    8336:	f24b 6329 	movw	r3, #46633	; 0xb629
    833a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    833e:	781b      	ldrb	r3, [r3, #0]
    8340:	2bff      	cmp	r3, #255	; 0xff
    8342:	d105      	bne.n	8350 <send_bat+0x1dc>
    8344:	f24b 6329 	movw	r3, #46633	; 0xb629
    8348:	f2c2 0304 	movt	r3, #8196	; 0x2004
    834c:	2200      	movs	r2, #0
    834e:	701a      	strb	r2, [r3, #0]
    8350:	f24b 6329 	movw	r3, #46633	; 0xb629
    8354:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8358:	781b      	ldrb	r3, [r3, #0]
    835a:	461a      	mov	r2, r3
    835c:	f64b 430c 	movw	r3, #48140	; 0xbc0c
    8360:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8364:	7819      	ldrb	r1, [r3, #0]
    8366:	f24b 632c 	movw	r3, #46636	; 0xb62c
    836a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    836e:	5499      	strb	r1, [r3, r2]
    8370:	f64b 430c 	movw	r3, #48140	; 0xbc0c
    8374:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8378:	781a      	ldrb	r2, [r3, #0]
    837a:	f24b 732d 	movw	r3, #46893	; 0xb72d
    837e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8382:	781b      	ldrb	r3, [r3, #0]
    8384:	4413      	add	r3, r2
    8386:	b2da      	uxtb	r2, r3
    8388:	f24b 732d 	movw	r3, #46893	; 0xb72d
    838c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8390:	701a      	strb	r2, [r3, #0]
    8392:	f24b 732e 	movw	r3, #46894	; 0xb72e
    8396:	f2c2 0304 	movt	r3, #8196	; 0x2004
    839a:	781a      	ldrb	r2, [r3, #0]
    839c:	f24b 732d 	movw	r3, #46893	; 0xb72d
    83a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83a4:	781b      	ldrb	r3, [r3, #0]
    83a6:	4413      	add	r3, r2
    83a8:	b2da      	uxtb	r2, r3
    83aa:	f24b 732e 	movw	r3, #46894	; 0xb72e
    83ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83b2:	701a      	strb	r2, [r3, #0]
    83b4:	f24b 6329 	movw	r3, #46633	; 0xb629
    83b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83bc:	781b      	ldrb	r3, [r3, #0]
    83be:	3301      	adds	r3, #1
    83c0:	b2da      	uxtb	r2, r3
    83c2:	f24b 6329 	movw	r3, #46633	; 0xb629
    83c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83ca:	701a      	strb	r2, [r3, #0]
    83cc:	f24b 6329 	movw	r3, #46633	; 0xb629
    83d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83d4:	781b      	ldrb	r3, [r3, #0]
    83d6:	2bff      	cmp	r3, #255	; 0xff
    83d8:	d105      	bne.n	83e6 <send_bat+0x272>
    83da:	f24b 6329 	movw	r3, #46633	; 0xb629
    83de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83e2:	2200      	movs	r2, #0
    83e4:	701a      	strb	r2, [r3, #0]
    83e6:	f24b 6329 	movw	r3, #46633	; 0xb629
    83ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83ee:	781b      	ldrb	r3, [r3, #0]
    83f0:	461a      	mov	r2, r3
    83f2:	f64b 430c 	movw	r3, #48140	; 0xbc0c
    83f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83fa:	7859      	ldrb	r1, [r3, #1]
    83fc:	f24b 632c 	movw	r3, #46636	; 0xb62c
    8400:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8404:	5499      	strb	r1, [r3, r2]
    8406:	4bd5      	ldr	r3, [pc, #852]	; (875c <send_bat+0x5e8>)
    8408:	781a      	ldrb	r2, [r3, #0]
    840a:	f24b 732d 	movw	r3, #46893	; 0xb72d
    840e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8412:	781b      	ldrb	r3, [r3, #0]
    8414:	4413      	add	r3, r2
    8416:	b2da      	uxtb	r2, r3
    8418:	f24b 732d 	movw	r3, #46893	; 0xb72d
    841c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8420:	701a      	strb	r2, [r3, #0]
    8422:	f24b 732e 	movw	r3, #46894	; 0xb72e
    8426:	f2c2 0304 	movt	r3, #8196	; 0x2004
    842a:	781a      	ldrb	r2, [r3, #0]
    842c:	f24b 732d 	movw	r3, #46893	; 0xb72d
    8430:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8434:	781b      	ldrb	r3, [r3, #0]
    8436:	4413      	add	r3, r2
    8438:	b2da      	uxtb	r2, r3
    843a:	f24b 732e 	movw	r3, #46894	; 0xb72e
    843e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8442:	701a      	strb	r2, [r3, #0]
    8444:	f24b 6329 	movw	r3, #46633	; 0xb629
    8448:	f2c2 0304 	movt	r3, #8196	; 0x2004
    844c:	781b      	ldrb	r3, [r3, #0]
    844e:	3301      	adds	r3, #1
    8450:	b2da      	uxtb	r2, r3
    8452:	f24b 6329 	movw	r3, #46633	; 0xb629
    8456:	f2c2 0304 	movt	r3, #8196	; 0x2004
    845a:	701a      	strb	r2, [r3, #0]
    845c:	f24b 6329 	movw	r3, #46633	; 0xb629
    8460:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8464:	781b      	ldrb	r3, [r3, #0]
    8466:	2bff      	cmp	r3, #255	; 0xff
    8468:	d105      	bne.n	8476 <send_bat+0x302>
    846a:	f24b 6329 	movw	r3, #46633	; 0xb629
    846e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8472:	2200      	movs	r2, #0
    8474:	701a      	strb	r2, [r3, #0]
    8476:	f24b 6329 	movw	r3, #46633	; 0xb629
    847a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    847e:	781b      	ldrb	r3, [r3, #0]
    8480:	461a      	mov	r2, r3
    8482:	f24b 6315 	movw	r3, #46613	; 0xb615
    8486:	f2c2 0304 	movt	r3, #8196	; 0x2004
    848a:	7819      	ldrb	r1, [r3, #0]
    848c:	f24b 632c 	movw	r3, #46636	; 0xb62c
    8490:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8494:	5499      	strb	r1, [r3, r2]
    8496:	f24b 6315 	movw	r3, #46613	; 0xb615
    849a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    849e:	781a      	ldrb	r2, [r3, #0]
    84a0:	f24b 732d 	movw	r3, #46893	; 0xb72d
    84a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84a8:	781b      	ldrb	r3, [r3, #0]
    84aa:	4413      	add	r3, r2
    84ac:	b2da      	uxtb	r2, r3
    84ae:	f24b 732d 	movw	r3, #46893	; 0xb72d
    84b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84b6:	701a      	strb	r2, [r3, #0]
    84b8:	f24b 732e 	movw	r3, #46894	; 0xb72e
    84bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84c0:	781a      	ldrb	r2, [r3, #0]
    84c2:	f24b 732d 	movw	r3, #46893	; 0xb72d
    84c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84ca:	781b      	ldrb	r3, [r3, #0]
    84cc:	4413      	add	r3, r2
    84ce:	b2da      	uxtb	r2, r3
    84d0:	f24b 732e 	movw	r3, #46894	; 0xb72e
    84d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84d8:	701a      	strb	r2, [r3, #0]
    84da:	f24b 6329 	movw	r3, #46633	; 0xb629
    84de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84e2:	781b      	ldrb	r3, [r3, #0]
    84e4:	3301      	adds	r3, #1
    84e6:	b2da      	uxtb	r2, r3
    84e8:	f24b 6329 	movw	r3, #46633	; 0xb629
    84ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84f0:	701a      	strb	r2, [r3, #0]
    84f2:	f24b 6329 	movw	r3, #46633	; 0xb629
    84f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84fa:	781b      	ldrb	r3, [r3, #0]
    84fc:	2bff      	cmp	r3, #255	; 0xff
    84fe:	d105      	bne.n	850c <send_bat+0x398>
    8500:	f24b 6329 	movw	r3, #46633	; 0xb629
    8504:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8508:	2200      	movs	r2, #0
    850a:	701a      	strb	r2, [r3, #0]
    850c:	f24b 6329 	movw	r3, #46633	; 0xb629
    8510:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8514:	781b      	ldrb	r3, [r3, #0]
    8516:	461a      	mov	r2, r3
    8518:	f64b 1396 	movw	r3, #47510	; 0xb996
    851c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8520:	7819      	ldrb	r1, [r3, #0]
    8522:	f24b 632c 	movw	r3, #46636	; 0xb62c
    8526:	f2c2 0304 	movt	r3, #8196	; 0x2004
    852a:	5499      	strb	r1, [r3, r2]
    852c:	f64b 1396 	movw	r3, #47510	; 0xb996
    8530:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8534:	781a      	ldrb	r2, [r3, #0]
    8536:	f24b 732d 	movw	r3, #46893	; 0xb72d
    853a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    853e:	781b      	ldrb	r3, [r3, #0]
    8540:	4413      	add	r3, r2
    8542:	b2da      	uxtb	r2, r3
    8544:	f24b 732d 	movw	r3, #46893	; 0xb72d
    8548:	f2c2 0304 	movt	r3, #8196	; 0x2004
    854c:	701a      	strb	r2, [r3, #0]
    854e:	f24b 732e 	movw	r3, #46894	; 0xb72e
    8552:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8556:	781a      	ldrb	r2, [r3, #0]
    8558:	f24b 732d 	movw	r3, #46893	; 0xb72d
    855c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8560:	781b      	ldrb	r3, [r3, #0]
    8562:	4413      	add	r3, r2
    8564:	b2da      	uxtb	r2, r3
    8566:	f24b 732e 	movw	r3, #46894	; 0xb72e
    856a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    856e:	701a      	strb	r2, [r3, #0]
    8570:	f24b 6329 	movw	r3, #46633	; 0xb629
    8574:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8578:	781b      	ldrb	r3, [r3, #0]
    857a:	3301      	adds	r3, #1
    857c:	b2da      	uxtb	r2, r3
    857e:	f24b 6329 	movw	r3, #46633	; 0xb629
    8582:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8586:	701a      	strb	r2, [r3, #0]
    8588:	f24b 6329 	movw	r3, #46633	; 0xb629
    858c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8590:	781b      	ldrb	r3, [r3, #0]
    8592:	2bff      	cmp	r3, #255	; 0xff
    8594:	d105      	bne.n	85a2 <send_bat+0x42e>
    8596:	f24b 6329 	movw	r3, #46633	; 0xb629
    859a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    859e:	2200      	movs	r2, #0
    85a0:	701a      	strb	r2, [r3, #0]
    85a2:	f24b 6329 	movw	r3, #46633	; 0xb629
    85a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85aa:	781b      	ldrb	r3, [r3, #0]
    85ac:	461a      	mov	r2, r3
    85ae:	f64b 1396 	movw	r3, #47510	; 0xb996
    85b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85b6:	7859      	ldrb	r1, [r3, #1]
    85b8:	f24b 632c 	movw	r3, #46636	; 0xb62c
    85bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85c0:	5499      	strb	r1, [r3, r2]
    85c2:	4b67      	ldr	r3, [pc, #412]	; (8760 <send_bat+0x5ec>)
    85c4:	781a      	ldrb	r2, [r3, #0]
    85c6:	f24b 732d 	movw	r3, #46893	; 0xb72d
    85ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85ce:	781b      	ldrb	r3, [r3, #0]
    85d0:	4413      	add	r3, r2
    85d2:	b2da      	uxtb	r2, r3
    85d4:	f24b 732d 	movw	r3, #46893	; 0xb72d
    85d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85dc:	701a      	strb	r2, [r3, #0]
    85de:	f24b 732e 	movw	r3, #46894	; 0xb72e
    85e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85e6:	781a      	ldrb	r2, [r3, #0]
    85e8:	f24b 732d 	movw	r3, #46893	; 0xb72d
    85ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85f0:	781b      	ldrb	r3, [r3, #0]
    85f2:	4413      	add	r3, r2
    85f4:	b2da      	uxtb	r2, r3
    85f6:	f24b 732e 	movw	r3, #46894	; 0xb72e
    85fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85fe:	701a      	strb	r2, [r3, #0]
    8600:	f24b 6329 	movw	r3, #46633	; 0xb629
    8604:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8608:	781b      	ldrb	r3, [r3, #0]
    860a:	3301      	adds	r3, #1
    860c:	b2da      	uxtb	r2, r3
    860e:	f24b 6329 	movw	r3, #46633	; 0xb629
    8612:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8616:	701a      	strb	r2, [r3, #0]
    8618:	f24b 6329 	movw	r3, #46633	; 0xb629
    861c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8620:	781b      	ldrb	r3, [r3, #0]
    8622:	2bff      	cmp	r3, #255	; 0xff
    8624:	d105      	bne.n	8632 <send_bat+0x4be>
    8626:	f24b 6329 	movw	r3, #46633	; 0xb629
    862a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    862e:	2200      	movs	r2, #0
    8630:	701a      	strb	r2, [r3, #0]
    8632:	f24b 6329 	movw	r3, #46633	; 0xb629
    8636:	f2c2 0304 	movt	r3, #8196	; 0x2004
    863a:	781b      	ldrb	r3, [r3, #0]
    863c:	461a      	mov	r2, r3
    863e:	f64b 1394 	movw	r3, #47508	; 0xb994
    8642:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8646:	7819      	ldrb	r1, [r3, #0]
    8648:	f24b 632c 	movw	r3, #46636	; 0xb62c
    864c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8650:	5499      	strb	r1, [r3, r2]
    8652:	f64b 1394 	movw	r3, #47508	; 0xb994
    8656:	f2c2 0304 	movt	r3, #8196	; 0x2004
    865a:	781a      	ldrb	r2, [r3, #0]
    865c:	f24b 732d 	movw	r3, #46893	; 0xb72d
    8660:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8664:	781b      	ldrb	r3, [r3, #0]
    8666:	4413      	add	r3, r2
    8668:	b2da      	uxtb	r2, r3
    866a:	f24b 732d 	movw	r3, #46893	; 0xb72d
    866e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8672:	701a      	strb	r2, [r3, #0]
    8674:	f24b 732e 	movw	r3, #46894	; 0xb72e
    8678:	f2c2 0304 	movt	r3, #8196	; 0x2004
    867c:	781a      	ldrb	r2, [r3, #0]
    867e:	f24b 732d 	movw	r3, #46893	; 0xb72d
    8682:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8686:	781b      	ldrb	r3, [r3, #0]
    8688:	4413      	add	r3, r2
    868a:	b2da      	uxtb	r2, r3
    868c:	f24b 732e 	movw	r3, #46894	; 0xb72e
    8690:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8694:	701a      	strb	r2, [r3, #0]
    8696:	f24b 6329 	movw	r3, #46633	; 0xb629
    869a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    869e:	781b      	ldrb	r3, [r3, #0]
    86a0:	3301      	adds	r3, #1
    86a2:	b2da      	uxtb	r2, r3
    86a4:	f24b 6329 	movw	r3, #46633	; 0xb629
    86a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86ac:	701a      	strb	r2, [r3, #0]
    86ae:	f24b 6329 	movw	r3, #46633	; 0xb629
    86b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86b6:	781b      	ldrb	r3, [r3, #0]
    86b8:	2bff      	cmp	r3, #255	; 0xff
    86ba:	d105      	bne.n	86c8 <send_bat+0x554>
    86bc:	f24b 6329 	movw	r3, #46633	; 0xb629
    86c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86c4:	2200      	movs	r2, #0
    86c6:	701a      	strb	r2, [r3, #0]
    86c8:	f24b 6329 	movw	r3, #46633	; 0xb629
    86cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86d0:	781b      	ldrb	r3, [r3, #0]
    86d2:	461a      	mov	r2, r3
    86d4:	f64b 1394 	movw	r3, #47508	; 0xb994
    86d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86dc:	7859      	ldrb	r1, [r3, #1]
    86de:	f24b 632c 	movw	r3, #46636	; 0xb62c
    86e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86e6:	5499      	strb	r1, [r3, r2]
    86e8:	4b1e      	ldr	r3, [pc, #120]	; (8764 <send_bat+0x5f0>)
    86ea:	781a      	ldrb	r2, [r3, #0]
    86ec:	f24b 732d 	movw	r3, #46893	; 0xb72d
    86f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86f4:	781b      	ldrb	r3, [r3, #0]
    86f6:	4413      	add	r3, r2
    86f8:	b2da      	uxtb	r2, r3
    86fa:	f24b 732d 	movw	r3, #46893	; 0xb72d
    86fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8702:	701a      	strb	r2, [r3, #0]
    8704:	f24b 732e 	movw	r3, #46894	; 0xb72e
    8708:	f2c2 0304 	movt	r3, #8196	; 0x2004
    870c:	781a      	ldrb	r2, [r3, #0]
    870e:	f24b 732d 	movw	r3, #46893	; 0xb72d
    8712:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8716:	781b      	ldrb	r3, [r3, #0]
    8718:	4413      	add	r3, r2
    871a:	b2da      	uxtb	r2, r3
    871c:	f24b 732e 	movw	r3, #46894	; 0xb72e
    8720:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8724:	701a      	strb	r2, [r3, #0]
    8726:	f24b 6329 	movw	r3, #46633	; 0xb629
    872a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    872e:	781b      	ldrb	r3, [r3, #0]
    8730:	3301      	adds	r3, #1
    8732:	b2da      	uxtb	r2, r3
    8734:	f24b 6329 	movw	r3, #46633	; 0xb629
    8738:	f2c2 0304 	movt	r3, #8196	; 0x2004
    873c:	701a      	strb	r2, [r3, #0]
    873e:	f24b 6329 	movw	r3, #46633	; 0xb629
    8742:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8746:	781b      	ldrb	r3, [r3, #0]
    8748:	2bff      	cmp	r3, #255	; 0xff
    874a:	d10d      	bne.n	8768 <send_bat+0x5f4>
    874c:	f24b 6329 	movw	r3, #46633	; 0xb629
    8750:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8754:	2200      	movs	r2, #0
    8756:	701a      	strb	r2, [r3, #0]
    8758:	e006      	b.n	8768 <send_bat+0x5f4>
    875a:	bf00      	nop
    875c:	2004bc0d 	.word	0x2004bc0d
    8760:	2004b997 	.word	0x2004b997
    8764:	2004b995 	.word	0x2004b995
    8768:	f24b 6329 	movw	r3, #46633	; 0xb629
    876c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8770:	781b      	ldrb	r3, [r3, #0]
    8772:	461a      	mov	r2, r3
    8774:	f24b 732d 	movw	r3, #46893	; 0xb72d
    8778:	f2c2 0304 	movt	r3, #8196	; 0x2004
    877c:	7819      	ldrb	r1, [r3, #0]
    877e:	f24b 632c 	movw	r3, #46636	; 0xb62c
    8782:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8786:	5499      	strb	r1, [r3, r2]
    8788:	f24b 6329 	movw	r3, #46633	; 0xb629
    878c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8790:	781b      	ldrb	r3, [r3, #0]
    8792:	3301      	adds	r3, #1
    8794:	b2da      	uxtb	r2, r3
    8796:	f24b 6329 	movw	r3, #46633	; 0xb629
    879a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    879e:	701a      	strb	r2, [r3, #0]
    87a0:	f24b 6329 	movw	r3, #46633	; 0xb629
    87a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87a8:	781b      	ldrb	r3, [r3, #0]
    87aa:	2bff      	cmp	r3, #255	; 0xff
    87ac:	d105      	bne.n	87ba <send_bat+0x646>
    87ae:	f24b 6329 	movw	r3, #46633	; 0xb629
    87b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87b6:	2200      	movs	r2, #0
    87b8:	701a      	strb	r2, [r3, #0]
    87ba:	f24b 6329 	movw	r3, #46633	; 0xb629
    87be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87c2:	781b      	ldrb	r3, [r3, #0]
    87c4:	461a      	mov	r2, r3
    87c6:	f24b 732e 	movw	r3, #46894	; 0xb72e
    87ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87ce:	7819      	ldrb	r1, [r3, #0]
    87d0:	f24b 632c 	movw	r3, #46636	; 0xb62c
    87d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87d8:	5499      	strb	r1, [r3, r2]
    87da:	f24b 6329 	movw	r3, #46633	; 0xb629
    87de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87e2:	781b      	ldrb	r3, [r3, #0]
    87e4:	3301      	adds	r3, #1
    87e6:	b2da      	uxtb	r2, r3
    87e8:	f24b 6329 	movw	r3, #46633	; 0xb629
    87ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87f0:	701a      	strb	r2, [r3, #0]
    87f2:	f24b 6329 	movw	r3, #46633	; 0xb629
    87f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87fa:	781b      	ldrb	r3, [r3, #0]
    87fc:	2bff      	cmp	r3, #255	; 0xff
    87fe:	d105      	bne.n	880c <send_bat+0x698>
    8800:	f24b 6329 	movw	r3, #46633	; 0xb629
    8804:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8808:	2200      	movs	r2, #0
    880a:	701a      	strb	r2, [r3, #0]
    880c:	f248 0339 	movw	r3, #32825	; 0x8039
    8810:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8814:	781b      	ldrb	r3, [r3, #0]
    8816:	b2db      	uxtb	r3, r3
    8818:	f003 0310 	and.w	r3, r3, #16
    881c:	2b00      	cmp	r3, #0
    881e:	d15a      	bne.n	88d6 <send_bat+0x762>
    8820:	f24b 632a 	movw	r3, #46634	; 0xb62a
    8824:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8828:	781b      	ldrb	r3, [r3, #0]
    882a:	b2db      	uxtb	r3, r3
    882c:	461a      	mov	r2, r3
    882e:	f24b 632c 	movw	r3, #46636	; 0xb62c
    8832:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8836:	5c9a      	ldrb	r2, [r3, r2]
    8838:	f24b 732b 	movw	r3, #46891	; 0xb72b
    883c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8840:	701a      	strb	r2, [r3, #0]
    8842:	f24b 732c 	movw	r3, #46892	; 0xb72c
    8846:	f2c2 0304 	movt	r3, #8196	; 0x2004
    884a:	2200      	movs	r2, #0
    884c:	701a      	strb	r2, [r3, #0]
    884e:	f24b 632a 	movw	r3, #46634	; 0xb62a
    8852:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8856:	781b      	ldrb	r3, [r3, #0]
    8858:	b2db      	uxtb	r3, r3
    885a:	3301      	adds	r3, #1
    885c:	b2da      	uxtb	r2, r3
    885e:	f24b 632a 	movw	r3, #46634	; 0xb62a
    8862:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8866:	701a      	strb	r2, [r3, #0]
    8868:	f24b 632a 	movw	r3, #46634	; 0xb62a
    886c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8870:	781b      	ldrb	r3, [r3, #0]
    8872:	b2db      	uxtb	r3, r3
    8874:	2bff      	cmp	r3, #255	; 0xff
    8876:	d105      	bne.n	8884 <send_bat+0x710>
    8878:	f24b 632a 	movw	r3, #46634	; 0xb62a
    887c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8880:	2200      	movs	r2, #0
    8882:	701a      	strb	r2, [r3, #0]
    8884:	f248 0338 	movw	r3, #32824	; 0x8038
    8888:	f2c2 0300 	movt	r3, #8192	; 0x2000
    888c:	f248 0238 	movw	r2, #32824	; 0x8038
    8890:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8894:	7812      	ldrb	r2, [r2, #0]
    8896:	b2d2      	uxtb	r2, r2
    8898:	f042 0201 	orr.w	r2, r2, #1
    889c:	b2d2      	uxtb	r2, r2
    889e:	701a      	strb	r2, [r3, #0]
    88a0:	f248 0339 	movw	r3, #32825	; 0x8039
    88a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88a8:	f248 0239 	movw	r2, #32825	; 0x8039
    88ac:	f2c2 0200 	movt	r2, #8192	; 0x2000
    88b0:	7812      	ldrb	r2, [r2, #0]
    88b2:	b2d2      	uxtb	r2, r2
    88b4:	f042 0210 	orr.w	r2, r2, #16
    88b8:	b2d2      	uxtb	r2, r2
    88ba:	701a      	strb	r2, [r3, #0]
    88bc:	e00b      	b.n	88d6 <send_bat+0x762>
    88be:	f24b 6328 	movw	r3, #46632	; 0xb628
    88c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88c6:	781b      	ldrb	r3, [r3, #0]
    88c8:	3301      	adds	r3, #1
    88ca:	b2da      	uxtb	r2, r3
    88cc:	f24b 6328 	movw	r3, #46632	; 0xb628
    88d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88d4:	701a      	strb	r2, [r3, #0]
}
    88d6:	46bd      	mov	sp, r7
    88d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    88dc:	4770      	bx	lr
    88de:	bf00      	nop

000088e0 <send_climb>:
void send_climb(void){  //2000ms
    88e0:	b480      	push	{r7}
    88e2:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 20 == 18) PERIODIC_SEND_CLIMB_PID();}
    88e4:	f24b 6321 	movw	r3, #46625	; 0xb621
    88e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88ec:	781a      	ldrb	r2, [r3, #0]
    88ee:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    88f2:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    88f6:	fba3 1302 	umull	r1, r3, r3, r2
    88fa:	0919      	lsrs	r1, r3, #4
    88fc:	460b      	mov	r3, r1
    88fe:	009b      	lsls	r3, r3, #2
    8900:	440b      	add	r3, r1
    8902:	009b      	lsls	r3, r3, #2
    8904:	1ad3      	subs	r3, r2, r3
    8906:	b2db      	uxtb	r3, r3
    8908:	2b12      	cmp	r3, #18
    890a:	f040 8554 	bne.w	93b6 <send_climb+0xad6>
    890e:	f24b 6329 	movw	r3, #46633	; 0xb629
    8912:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8916:	781a      	ldrb	r2, [r3, #0]
    8918:	f24b 632a 	movw	r3, #46634	; 0xb62a
    891c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8920:	781b      	ldrb	r3, [r3, #0]
    8922:	b2db      	uxtb	r3, r3
    8924:	429a      	cmp	r2, r3
    8926:	d313      	bcc.n	8950 <send_climb+0x70>
    8928:	f24b 632a 	movw	r3, #46634	; 0xb62a
    892c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8930:	781b      	ldrb	r3, [r3, #0]
    8932:	b2db      	uxtb	r3, r3
    8934:	461a      	mov	r2, r3
    8936:	f24b 6329 	movw	r3, #46633	; 0xb629
    893a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    893e:	781b      	ldrb	r3, [r3, #0]
    8940:	1ad3      	subs	r3, r2, r3
    8942:	33ff      	adds	r3, #255	; 0xff
    8944:	2b12      	cmp	r3, #18
    8946:	bfd4      	ite	le
    8948:	2300      	movle	r3, #0
    894a:	2301      	movgt	r3, #1
    894c:	b2db      	uxtb	r3, r3
    894e:	e011      	b.n	8974 <send_climb+0x94>
    8950:	f24b 632a 	movw	r3, #46634	; 0xb62a
    8954:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8958:	781b      	ldrb	r3, [r3, #0]
    895a:	b2db      	uxtb	r3, r3
    895c:	461a      	mov	r2, r3
    895e:	f24b 6329 	movw	r3, #46633	; 0xb629
    8962:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8966:	781b      	ldrb	r3, [r3, #0]
    8968:	1ad3      	subs	r3, r2, r3
    896a:	2b12      	cmp	r3, #18
    896c:	bfd4      	ite	le
    896e:	2300      	movle	r3, #0
    8970:	2301      	movgt	r3, #1
    8972:	b2db      	uxtb	r3, r3
    8974:	2b00      	cmp	r3, #0
    8976:	f000 8512 	beq.w	939e <send_climb+0xabe>
    897a:	f24b 6329 	movw	r3, #46633	; 0xb629
    897e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8982:	781b      	ldrb	r3, [r3, #0]
    8984:	461a      	mov	r2, r3
    8986:	f24b 632c 	movw	r3, #46636	; 0xb62c
    898a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    898e:	2105      	movs	r1, #5
    8990:	5499      	strb	r1, [r3, r2]
    8992:	f24b 6329 	movw	r3, #46633	; 0xb629
    8996:	f2c2 0304 	movt	r3, #8196	; 0x2004
    899a:	781b      	ldrb	r3, [r3, #0]
    899c:	3301      	adds	r3, #1
    899e:	b2da      	uxtb	r2, r3
    89a0:	f24b 6329 	movw	r3, #46633	; 0xb629
    89a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89a8:	701a      	strb	r2, [r3, #0]
    89aa:	f24b 6329 	movw	r3, #46633	; 0xb629
    89ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89b2:	781b      	ldrb	r3, [r3, #0]
    89b4:	2bff      	cmp	r3, #255	; 0xff
    89b6:	d105      	bne.n	89c4 <send_climb+0xe4>
    89b8:	f24b 6329 	movw	r3, #46633	; 0xb629
    89bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89c0:	2200      	movs	r2, #0
    89c2:	701a      	strb	r2, [r3, #0]
    89c4:	f24b 6329 	movw	r3, #46633	; 0xb629
    89c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89cc:	781b      	ldrb	r3, [r3, #0]
    89ce:	461a      	mov	r2, r3
    89d0:	f24b 632c 	movw	r3, #46636	; 0xb62c
    89d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89d8:	210e      	movs	r1, #14
    89da:	5499      	strb	r1, [r3, r2]
    89dc:	f24b 6329 	movw	r3, #46633	; 0xb629
    89e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89e4:	781b      	ldrb	r3, [r3, #0]
    89e6:	3301      	adds	r3, #1
    89e8:	b2da      	uxtb	r2, r3
    89ea:	f24b 6329 	movw	r3, #46633	; 0xb629
    89ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89f2:	701a      	strb	r2, [r3, #0]
    89f4:	f24b 6329 	movw	r3, #46633	; 0xb629
    89f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89fc:	781b      	ldrb	r3, [r3, #0]
    89fe:	2bff      	cmp	r3, #255	; 0xff
    8a00:	d105      	bne.n	8a0e <send_climb+0x12e>
    8a02:	f24b 6329 	movw	r3, #46633	; 0xb629
    8a06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a0a:	2200      	movs	r2, #0
    8a0c:	701a      	strb	r2, [r3, #0]
    8a0e:	f24b 732d 	movw	r3, #46893	; 0xb72d
    8a12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a16:	220e      	movs	r2, #14
    8a18:	701a      	strb	r2, [r3, #0]
    8a1a:	f24b 732e 	movw	r3, #46894	; 0xb72e
    8a1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a22:	220e      	movs	r2, #14
    8a24:	701a      	strb	r2, [r3, #0]
    8a26:	f24b 6329 	movw	r3, #46633	; 0xb629
    8a2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a2e:	781b      	ldrb	r3, [r3, #0]
    8a30:	461a      	mov	r2, r3
    8a32:	f64b 135c 	movw	r3, #47452	; 0xb95c
    8a36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a3a:	7819      	ldrb	r1, [r3, #0]
    8a3c:	f24b 632c 	movw	r3, #46636	; 0xb62c
    8a40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a44:	5499      	strb	r1, [r3, r2]
    8a46:	f64b 135c 	movw	r3, #47452	; 0xb95c
    8a4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a4e:	781a      	ldrb	r2, [r3, #0]
    8a50:	f24b 732d 	movw	r3, #46893	; 0xb72d
    8a54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a58:	781b      	ldrb	r3, [r3, #0]
    8a5a:	4413      	add	r3, r2
    8a5c:	b2da      	uxtb	r2, r3
    8a5e:	f24b 732d 	movw	r3, #46893	; 0xb72d
    8a62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a66:	701a      	strb	r2, [r3, #0]
    8a68:	f24b 732e 	movw	r3, #46894	; 0xb72e
    8a6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a70:	781a      	ldrb	r2, [r3, #0]
    8a72:	f24b 732d 	movw	r3, #46893	; 0xb72d
    8a76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a7a:	781b      	ldrb	r3, [r3, #0]
    8a7c:	4413      	add	r3, r2
    8a7e:	b2da      	uxtb	r2, r3
    8a80:	f24b 732e 	movw	r3, #46894	; 0xb72e
    8a84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a88:	701a      	strb	r2, [r3, #0]
    8a8a:	f24b 6329 	movw	r3, #46633	; 0xb629
    8a8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a92:	781b      	ldrb	r3, [r3, #0]
    8a94:	3301      	adds	r3, #1
    8a96:	b2da      	uxtb	r2, r3
    8a98:	f24b 6329 	movw	r3, #46633	; 0xb629
    8a9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8aa0:	701a      	strb	r2, [r3, #0]
    8aa2:	f24b 6329 	movw	r3, #46633	; 0xb629
    8aa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8aaa:	781b      	ldrb	r3, [r3, #0]
    8aac:	2bff      	cmp	r3, #255	; 0xff
    8aae:	d105      	bne.n	8abc <send_climb+0x1dc>
    8ab0:	f24b 6329 	movw	r3, #46633	; 0xb629
    8ab4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ab8:	2200      	movs	r2, #0
    8aba:	701a      	strb	r2, [r3, #0]
    8abc:	f24b 6329 	movw	r3, #46633	; 0xb629
    8ac0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ac4:	781b      	ldrb	r3, [r3, #0]
    8ac6:	461a      	mov	r2, r3
    8ac8:	f64b 135c 	movw	r3, #47452	; 0xb95c
    8acc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ad0:	7859      	ldrb	r1, [r3, #1]
    8ad2:	f24b 632c 	movw	r3, #46636	; 0xb62c
    8ad6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ada:	5499      	strb	r1, [r3, r2]
    8adc:	4bd3      	ldr	r3, [pc, #844]	; (8e2c <send_climb+0x54c>)
    8ade:	781a      	ldrb	r2, [r3, #0]
    8ae0:	f24b 732d 	movw	r3, #46893	; 0xb72d
    8ae4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ae8:	781b      	ldrb	r3, [r3, #0]
    8aea:	4413      	add	r3, r2
    8aec:	b2da      	uxtb	r2, r3
    8aee:	f24b 732d 	movw	r3, #46893	; 0xb72d
    8af2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8af6:	701a      	strb	r2, [r3, #0]
    8af8:	f24b 732e 	movw	r3, #46894	; 0xb72e
    8afc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b00:	781a      	ldrb	r2, [r3, #0]
    8b02:	f24b 732d 	movw	r3, #46893	; 0xb72d
    8b06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b0a:	781b      	ldrb	r3, [r3, #0]
    8b0c:	4413      	add	r3, r2
    8b0e:	b2da      	uxtb	r2, r3
    8b10:	f24b 732e 	movw	r3, #46894	; 0xb72e
    8b14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b18:	701a      	strb	r2, [r3, #0]
    8b1a:	f24b 6329 	movw	r3, #46633	; 0xb629
    8b1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b22:	781b      	ldrb	r3, [r3, #0]
    8b24:	3301      	adds	r3, #1
    8b26:	b2da      	uxtb	r2, r3
    8b28:	f24b 6329 	movw	r3, #46633	; 0xb629
    8b2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b30:	701a      	strb	r2, [r3, #0]
    8b32:	f24b 6329 	movw	r3, #46633	; 0xb629
    8b36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b3a:	781b      	ldrb	r3, [r3, #0]
    8b3c:	2bff      	cmp	r3, #255	; 0xff
    8b3e:	d105      	bne.n	8b4c <send_climb+0x26c>
    8b40:	f24b 6329 	movw	r3, #46633	; 0xb629
    8b44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b48:	2200      	movs	r2, #0
    8b4a:	701a      	strb	r2, [r3, #0]
    8b4c:	f24b 6329 	movw	r3, #46633	; 0xb629
    8b50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b54:	781b      	ldrb	r3, [r3, #0]
    8b56:	461a      	mov	r2, r3
    8b58:	f64b 1370 	movw	r3, #47472	; 0xb970
    8b5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b60:	7819      	ldrb	r1, [r3, #0]
    8b62:	f24b 632c 	movw	r3, #46636	; 0xb62c
    8b66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b6a:	5499      	strb	r1, [r3, r2]
    8b6c:	f64b 1370 	movw	r3, #47472	; 0xb970
    8b70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b74:	781a      	ldrb	r2, [r3, #0]
    8b76:	f24b 732d 	movw	r3, #46893	; 0xb72d
    8b7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b7e:	781b      	ldrb	r3, [r3, #0]
    8b80:	4413      	add	r3, r2
    8b82:	b2da      	uxtb	r2, r3
    8b84:	f24b 732d 	movw	r3, #46893	; 0xb72d
    8b88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b8c:	701a      	strb	r2, [r3, #0]
    8b8e:	f24b 732e 	movw	r3, #46894	; 0xb72e
    8b92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b96:	781a      	ldrb	r2, [r3, #0]
    8b98:	f24b 732d 	movw	r3, #46893	; 0xb72d
    8b9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ba0:	781b      	ldrb	r3, [r3, #0]
    8ba2:	4413      	add	r3, r2
    8ba4:	b2da      	uxtb	r2, r3
    8ba6:	f24b 732e 	movw	r3, #46894	; 0xb72e
    8baa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bae:	701a      	strb	r2, [r3, #0]
    8bb0:	f24b 6329 	movw	r3, #46633	; 0xb629
    8bb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bb8:	781b      	ldrb	r3, [r3, #0]
    8bba:	3301      	adds	r3, #1
    8bbc:	b2da      	uxtb	r2, r3
    8bbe:	f24b 6329 	movw	r3, #46633	; 0xb629
    8bc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bc6:	701a      	strb	r2, [r3, #0]
    8bc8:	f24b 6329 	movw	r3, #46633	; 0xb629
    8bcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bd0:	781b      	ldrb	r3, [r3, #0]
    8bd2:	2bff      	cmp	r3, #255	; 0xff
    8bd4:	d105      	bne.n	8be2 <send_climb+0x302>
    8bd6:	f24b 6329 	movw	r3, #46633	; 0xb629
    8bda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bde:	2200      	movs	r2, #0
    8be0:	701a      	strb	r2, [r3, #0]
    8be2:	f24b 6329 	movw	r3, #46633	; 0xb629
    8be6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bea:	781b      	ldrb	r3, [r3, #0]
    8bec:	461a      	mov	r2, r3
    8bee:	f64b 1370 	movw	r3, #47472	; 0xb970
    8bf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bf6:	7859      	ldrb	r1, [r3, #1]
    8bf8:	f24b 632c 	movw	r3, #46636	; 0xb62c
    8bfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c00:	5499      	strb	r1, [r3, r2]
    8c02:	4b8b      	ldr	r3, [pc, #556]	; (8e30 <send_climb+0x550>)
    8c04:	781a      	ldrb	r2, [r3, #0]
    8c06:	f24b 732d 	movw	r3, #46893	; 0xb72d
    8c0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c0e:	781b      	ldrb	r3, [r3, #0]
    8c10:	4413      	add	r3, r2
    8c12:	b2da      	uxtb	r2, r3
    8c14:	f24b 732d 	movw	r3, #46893	; 0xb72d
    8c18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c1c:	701a      	strb	r2, [r3, #0]
    8c1e:	f24b 732e 	movw	r3, #46894	; 0xb72e
    8c22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c26:	781a      	ldrb	r2, [r3, #0]
    8c28:	f24b 732d 	movw	r3, #46893	; 0xb72d
    8c2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c30:	781b      	ldrb	r3, [r3, #0]
    8c32:	4413      	add	r3, r2
    8c34:	b2da      	uxtb	r2, r3
    8c36:	f24b 732e 	movw	r3, #46894	; 0xb72e
    8c3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c3e:	701a      	strb	r2, [r3, #0]
    8c40:	f24b 6329 	movw	r3, #46633	; 0xb629
    8c44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c48:	781b      	ldrb	r3, [r3, #0]
    8c4a:	3301      	adds	r3, #1
    8c4c:	b2da      	uxtb	r2, r3
    8c4e:	f24b 6329 	movw	r3, #46633	; 0xb629
    8c52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c56:	701a      	strb	r2, [r3, #0]
    8c58:	f24b 6329 	movw	r3, #46633	; 0xb629
    8c5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c60:	781b      	ldrb	r3, [r3, #0]
    8c62:	2bff      	cmp	r3, #255	; 0xff
    8c64:	d105      	bne.n	8c72 <send_climb+0x392>
    8c66:	f24b 6329 	movw	r3, #46633	; 0xb629
    8c6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c6e:	2200      	movs	r2, #0
    8c70:	701a      	strb	r2, [r3, #0]
    8c72:	f24b 6329 	movw	r3, #46633	; 0xb629
    8c76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c7a:	781b      	ldrb	r3, [r3, #0]
    8c7c:	461a      	mov	r2, r3
    8c7e:	f64b 1370 	movw	r3, #47472	; 0xb970
    8c82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c86:	7899      	ldrb	r1, [r3, #2]
    8c88:	f24b 632c 	movw	r3, #46636	; 0xb62c
    8c8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c90:	5499      	strb	r1, [r3, r2]
    8c92:	4b68      	ldr	r3, [pc, #416]	; (8e34 <send_climb+0x554>)
    8c94:	781a      	ldrb	r2, [r3, #0]
    8c96:	f24b 732d 	movw	r3, #46893	; 0xb72d
    8c9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c9e:	781b      	ldrb	r3, [r3, #0]
    8ca0:	4413      	add	r3, r2
    8ca2:	b2da      	uxtb	r2, r3
    8ca4:	f24b 732d 	movw	r3, #46893	; 0xb72d
    8ca8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cac:	701a      	strb	r2, [r3, #0]
    8cae:	f24b 732e 	movw	r3, #46894	; 0xb72e
    8cb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cb6:	781a      	ldrb	r2, [r3, #0]
    8cb8:	f24b 732d 	movw	r3, #46893	; 0xb72d
    8cbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cc0:	781b      	ldrb	r3, [r3, #0]
    8cc2:	4413      	add	r3, r2
    8cc4:	b2da      	uxtb	r2, r3
    8cc6:	f24b 732e 	movw	r3, #46894	; 0xb72e
    8cca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cce:	701a      	strb	r2, [r3, #0]
    8cd0:	f24b 6329 	movw	r3, #46633	; 0xb629
    8cd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cd8:	781b      	ldrb	r3, [r3, #0]
    8cda:	3301      	adds	r3, #1
    8cdc:	b2da      	uxtb	r2, r3
    8cde:	f24b 6329 	movw	r3, #46633	; 0xb629
    8ce2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ce6:	701a      	strb	r2, [r3, #0]
    8ce8:	f24b 6329 	movw	r3, #46633	; 0xb629
    8cec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cf0:	781b      	ldrb	r3, [r3, #0]
    8cf2:	2bff      	cmp	r3, #255	; 0xff
    8cf4:	d105      	bne.n	8d02 <send_climb+0x422>
    8cf6:	f24b 6329 	movw	r3, #46633	; 0xb629
    8cfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cfe:	2200      	movs	r2, #0
    8d00:	701a      	strb	r2, [r3, #0]
    8d02:	f24b 6329 	movw	r3, #46633	; 0xb629
    8d06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d0a:	781b      	ldrb	r3, [r3, #0]
    8d0c:	461a      	mov	r2, r3
    8d0e:	f64b 1370 	movw	r3, #47472	; 0xb970
    8d12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d16:	78d9      	ldrb	r1, [r3, #3]
    8d18:	f24b 632c 	movw	r3, #46636	; 0xb62c
    8d1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d20:	5499      	strb	r1, [r3, r2]
    8d22:	4b45      	ldr	r3, [pc, #276]	; (8e38 <send_climb+0x558>)
    8d24:	781a      	ldrb	r2, [r3, #0]
    8d26:	f24b 732d 	movw	r3, #46893	; 0xb72d
    8d2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d2e:	781b      	ldrb	r3, [r3, #0]
    8d30:	4413      	add	r3, r2
    8d32:	b2da      	uxtb	r2, r3
    8d34:	f24b 732d 	movw	r3, #46893	; 0xb72d
    8d38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d3c:	701a      	strb	r2, [r3, #0]
    8d3e:	f24b 732e 	movw	r3, #46894	; 0xb72e
    8d42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d46:	781a      	ldrb	r2, [r3, #0]
    8d48:	f24b 732d 	movw	r3, #46893	; 0xb72d
    8d4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d50:	781b      	ldrb	r3, [r3, #0]
    8d52:	4413      	add	r3, r2
    8d54:	b2da      	uxtb	r2, r3
    8d56:	f24b 732e 	movw	r3, #46894	; 0xb72e
    8d5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d5e:	701a      	strb	r2, [r3, #0]
    8d60:	f24b 6329 	movw	r3, #46633	; 0xb629
    8d64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d68:	781b      	ldrb	r3, [r3, #0]
    8d6a:	3301      	adds	r3, #1
    8d6c:	b2da      	uxtb	r2, r3
    8d6e:	f24b 6329 	movw	r3, #46633	; 0xb629
    8d72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d76:	701a      	strb	r2, [r3, #0]
    8d78:	f24b 6329 	movw	r3, #46633	; 0xb629
    8d7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d80:	781b      	ldrb	r3, [r3, #0]
    8d82:	2bff      	cmp	r3, #255	; 0xff
    8d84:	d105      	bne.n	8d92 <send_climb+0x4b2>
    8d86:	f24b 6329 	movw	r3, #46633	; 0xb629
    8d8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d8e:	2200      	movs	r2, #0
    8d90:	701a      	strb	r2, [r3, #0]
    8d92:	f24b 6329 	movw	r3, #46633	; 0xb629
    8d96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d9a:	781b      	ldrb	r3, [r3, #0]
    8d9c:	461a      	mov	r2, r3
    8d9e:	f64b 1378 	movw	r3, #47480	; 0xb978
    8da2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8da6:	7819      	ldrb	r1, [r3, #0]
    8da8:	f24b 632c 	movw	r3, #46636	; 0xb62c
    8dac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8db0:	5499      	strb	r1, [r3, r2]
    8db2:	f64b 1378 	movw	r3, #47480	; 0xb978
    8db6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dba:	781a      	ldrb	r2, [r3, #0]
    8dbc:	f24b 732d 	movw	r3, #46893	; 0xb72d
    8dc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dc4:	781b      	ldrb	r3, [r3, #0]
    8dc6:	4413      	add	r3, r2
    8dc8:	b2da      	uxtb	r2, r3
    8dca:	f24b 732d 	movw	r3, #46893	; 0xb72d
    8dce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dd2:	701a      	strb	r2, [r3, #0]
    8dd4:	f24b 732e 	movw	r3, #46894	; 0xb72e
    8dd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ddc:	781a      	ldrb	r2, [r3, #0]
    8dde:	f24b 732d 	movw	r3, #46893	; 0xb72d
    8de2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8de6:	781b      	ldrb	r3, [r3, #0]
    8de8:	4413      	add	r3, r2
    8dea:	b2da      	uxtb	r2, r3
    8dec:	f24b 732e 	movw	r3, #46894	; 0xb72e
    8df0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8df4:	701a      	strb	r2, [r3, #0]
    8df6:	f24b 6329 	movw	r3, #46633	; 0xb629
    8dfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dfe:	781b      	ldrb	r3, [r3, #0]
    8e00:	3301      	adds	r3, #1
    8e02:	b2da      	uxtb	r2, r3
    8e04:	f24b 6329 	movw	r3, #46633	; 0xb629
    8e08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e0c:	701a      	strb	r2, [r3, #0]
    8e0e:	f24b 6329 	movw	r3, #46633	; 0xb629
    8e12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e16:	781b      	ldrb	r3, [r3, #0]
    8e18:	2bff      	cmp	r3, #255	; 0xff
    8e1a:	d10f      	bne.n	8e3c <send_climb+0x55c>
    8e1c:	f24b 6329 	movw	r3, #46633	; 0xb629
    8e20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e24:	2200      	movs	r2, #0
    8e26:	701a      	strb	r2, [r3, #0]
    8e28:	e008      	b.n	8e3c <send_climb+0x55c>
    8e2a:	bf00      	nop
    8e2c:	2004b95d 	.word	0x2004b95d
    8e30:	2004b971 	.word	0x2004b971
    8e34:	2004b972 	.word	0x2004b972
    8e38:	2004b973 	.word	0x2004b973
    8e3c:	f24b 6329 	movw	r3, #46633	; 0xb629
    8e40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e44:	781b      	ldrb	r3, [r3, #0]
    8e46:	461a      	mov	r2, r3
    8e48:	f64b 1378 	movw	r3, #47480	; 0xb978
    8e4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e50:	7859      	ldrb	r1, [r3, #1]
    8e52:	f24b 632c 	movw	r3, #46636	; 0xb62c
    8e56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e5a:	5499      	strb	r1, [r3, r2]
    8e5c:	4bd1      	ldr	r3, [pc, #836]	; (91a4 <send_climb+0x8c4>)
    8e5e:	781a      	ldrb	r2, [r3, #0]
    8e60:	f24b 732d 	movw	r3, #46893	; 0xb72d
    8e64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e68:	781b      	ldrb	r3, [r3, #0]
    8e6a:	4413      	add	r3, r2
    8e6c:	b2da      	uxtb	r2, r3
    8e6e:	f24b 732d 	movw	r3, #46893	; 0xb72d
    8e72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e76:	701a      	strb	r2, [r3, #0]
    8e78:	f24b 732e 	movw	r3, #46894	; 0xb72e
    8e7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e80:	781a      	ldrb	r2, [r3, #0]
    8e82:	f24b 732d 	movw	r3, #46893	; 0xb72d
    8e86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e8a:	781b      	ldrb	r3, [r3, #0]
    8e8c:	4413      	add	r3, r2
    8e8e:	b2da      	uxtb	r2, r3
    8e90:	f24b 732e 	movw	r3, #46894	; 0xb72e
    8e94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e98:	701a      	strb	r2, [r3, #0]
    8e9a:	f24b 6329 	movw	r3, #46633	; 0xb629
    8e9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ea2:	781b      	ldrb	r3, [r3, #0]
    8ea4:	3301      	adds	r3, #1
    8ea6:	b2da      	uxtb	r2, r3
    8ea8:	f24b 6329 	movw	r3, #46633	; 0xb629
    8eac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8eb0:	701a      	strb	r2, [r3, #0]
    8eb2:	f24b 6329 	movw	r3, #46633	; 0xb629
    8eb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8eba:	781b      	ldrb	r3, [r3, #0]
    8ebc:	2bff      	cmp	r3, #255	; 0xff
    8ebe:	d105      	bne.n	8ecc <send_climb+0x5ec>
    8ec0:	f24b 6329 	movw	r3, #46633	; 0xb629
    8ec4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ec8:	2200      	movs	r2, #0
    8eca:	701a      	strb	r2, [r3, #0]
    8ecc:	f24b 6329 	movw	r3, #46633	; 0xb629
    8ed0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ed4:	781b      	ldrb	r3, [r3, #0]
    8ed6:	461a      	mov	r2, r3
    8ed8:	f64b 1378 	movw	r3, #47480	; 0xb978
    8edc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ee0:	7899      	ldrb	r1, [r3, #2]
    8ee2:	f24b 632c 	movw	r3, #46636	; 0xb62c
    8ee6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8eea:	5499      	strb	r1, [r3, r2]
    8eec:	4bae      	ldr	r3, [pc, #696]	; (91a8 <send_climb+0x8c8>)
    8eee:	781a      	ldrb	r2, [r3, #0]
    8ef0:	f24b 732d 	movw	r3, #46893	; 0xb72d
    8ef4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ef8:	781b      	ldrb	r3, [r3, #0]
    8efa:	4413      	add	r3, r2
    8efc:	b2da      	uxtb	r2, r3
    8efe:	f24b 732d 	movw	r3, #46893	; 0xb72d
    8f02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f06:	701a      	strb	r2, [r3, #0]
    8f08:	f24b 732e 	movw	r3, #46894	; 0xb72e
    8f0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f10:	781a      	ldrb	r2, [r3, #0]
    8f12:	f24b 732d 	movw	r3, #46893	; 0xb72d
    8f16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f1a:	781b      	ldrb	r3, [r3, #0]
    8f1c:	4413      	add	r3, r2
    8f1e:	b2da      	uxtb	r2, r3
    8f20:	f24b 732e 	movw	r3, #46894	; 0xb72e
    8f24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f28:	701a      	strb	r2, [r3, #0]
    8f2a:	f24b 6329 	movw	r3, #46633	; 0xb629
    8f2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f32:	781b      	ldrb	r3, [r3, #0]
    8f34:	3301      	adds	r3, #1
    8f36:	b2da      	uxtb	r2, r3
    8f38:	f24b 6329 	movw	r3, #46633	; 0xb629
    8f3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f40:	701a      	strb	r2, [r3, #0]
    8f42:	f24b 6329 	movw	r3, #46633	; 0xb629
    8f46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f4a:	781b      	ldrb	r3, [r3, #0]
    8f4c:	2bff      	cmp	r3, #255	; 0xff
    8f4e:	d105      	bne.n	8f5c <send_climb+0x67c>
    8f50:	f24b 6329 	movw	r3, #46633	; 0xb629
    8f54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f58:	2200      	movs	r2, #0
    8f5a:	701a      	strb	r2, [r3, #0]
    8f5c:	f24b 6329 	movw	r3, #46633	; 0xb629
    8f60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f64:	781b      	ldrb	r3, [r3, #0]
    8f66:	461a      	mov	r2, r3
    8f68:	f64b 1378 	movw	r3, #47480	; 0xb978
    8f6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f70:	78d9      	ldrb	r1, [r3, #3]
    8f72:	f24b 632c 	movw	r3, #46636	; 0xb62c
    8f76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f7a:	5499      	strb	r1, [r3, r2]
    8f7c:	4b8b      	ldr	r3, [pc, #556]	; (91ac <send_climb+0x8cc>)
    8f7e:	781a      	ldrb	r2, [r3, #0]
    8f80:	f24b 732d 	movw	r3, #46893	; 0xb72d
    8f84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f88:	781b      	ldrb	r3, [r3, #0]
    8f8a:	4413      	add	r3, r2
    8f8c:	b2da      	uxtb	r2, r3
    8f8e:	f24b 732d 	movw	r3, #46893	; 0xb72d
    8f92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f96:	701a      	strb	r2, [r3, #0]
    8f98:	f24b 732e 	movw	r3, #46894	; 0xb72e
    8f9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fa0:	781a      	ldrb	r2, [r3, #0]
    8fa2:	f24b 732d 	movw	r3, #46893	; 0xb72d
    8fa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8faa:	781b      	ldrb	r3, [r3, #0]
    8fac:	4413      	add	r3, r2
    8fae:	b2da      	uxtb	r2, r3
    8fb0:	f24b 732e 	movw	r3, #46894	; 0xb72e
    8fb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fb8:	701a      	strb	r2, [r3, #0]
    8fba:	f24b 6329 	movw	r3, #46633	; 0xb629
    8fbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fc2:	781b      	ldrb	r3, [r3, #0]
    8fc4:	3301      	adds	r3, #1
    8fc6:	b2da      	uxtb	r2, r3
    8fc8:	f24b 6329 	movw	r3, #46633	; 0xb629
    8fcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fd0:	701a      	strb	r2, [r3, #0]
    8fd2:	f24b 6329 	movw	r3, #46633	; 0xb629
    8fd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fda:	781b      	ldrb	r3, [r3, #0]
    8fdc:	2bff      	cmp	r3, #255	; 0xff
    8fde:	d105      	bne.n	8fec <send_climb+0x70c>
    8fe0:	f24b 6329 	movw	r3, #46633	; 0xb629
    8fe4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fe8:	2200      	movs	r2, #0
    8fea:	701a      	strb	r2, [r3, #0]
    8fec:	f24b 6329 	movw	r3, #46633	; 0xb629
    8ff0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ff4:	781b      	ldrb	r3, [r3, #0]
    8ff6:	461a      	mov	r2, r3
    8ff8:	f643 0390 	movw	r3, #14480	; 0x3890
    8ffc:	f2c0 0301 	movt	r3, #1
    9000:	7819      	ldrb	r1, [r3, #0]
    9002:	f24b 632c 	movw	r3, #46636	; 0xb62c
    9006:	f2c2 0304 	movt	r3, #8196	; 0x2004
    900a:	5499      	strb	r1, [r3, r2]
    900c:	f643 0390 	movw	r3, #14480	; 0x3890
    9010:	f2c0 0301 	movt	r3, #1
    9014:	781a      	ldrb	r2, [r3, #0]
    9016:	f24b 732d 	movw	r3, #46893	; 0xb72d
    901a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    901e:	781b      	ldrb	r3, [r3, #0]
    9020:	4413      	add	r3, r2
    9022:	b2da      	uxtb	r2, r3
    9024:	f24b 732d 	movw	r3, #46893	; 0xb72d
    9028:	f2c2 0304 	movt	r3, #8196	; 0x2004
    902c:	701a      	strb	r2, [r3, #0]
    902e:	f24b 732e 	movw	r3, #46894	; 0xb72e
    9032:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9036:	781a      	ldrb	r2, [r3, #0]
    9038:	f24b 732d 	movw	r3, #46893	; 0xb72d
    903c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9040:	781b      	ldrb	r3, [r3, #0]
    9042:	4413      	add	r3, r2
    9044:	b2da      	uxtb	r2, r3
    9046:	f24b 732e 	movw	r3, #46894	; 0xb72e
    904a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    904e:	701a      	strb	r2, [r3, #0]
    9050:	f24b 6329 	movw	r3, #46633	; 0xb629
    9054:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9058:	781b      	ldrb	r3, [r3, #0]
    905a:	3301      	adds	r3, #1
    905c:	b2da      	uxtb	r2, r3
    905e:	f24b 6329 	movw	r3, #46633	; 0xb629
    9062:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9066:	701a      	strb	r2, [r3, #0]
    9068:	f24b 6329 	movw	r3, #46633	; 0xb629
    906c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9070:	781b      	ldrb	r3, [r3, #0]
    9072:	2bff      	cmp	r3, #255	; 0xff
    9074:	d105      	bne.n	9082 <send_climb+0x7a2>
    9076:	f24b 6329 	movw	r3, #46633	; 0xb629
    907a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    907e:	2200      	movs	r2, #0
    9080:	701a      	strb	r2, [r3, #0]
    9082:	f24b 6329 	movw	r3, #46633	; 0xb629
    9086:	f2c2 0304 	movt	r3, #8196	; 0x2004
    908a:	781b      	ldrb	r3, [r3, #0]
    908c:	461a      	mov	r2, r3
    908e:	f643 0390 	movw	r3, #14480	; 0x3890
    9092:	f2c0 0301 	movt	r3, #1
    9096:	7859      	ldrb	r1, [r3, #1]
    9098:	f24b 632c 	movw	r3, #46636	; 0xb62c
    909c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90a0:	5499      	strb	r1, [r3, r2]
    90a2:	4b43      	ldr	r3, [pc, #268]	; (91b0 <send_climb+0x8d0>)
    90a4:	781a      	ldrb	r2, [r3, #0]
    90a6:	f24b 732d 	movw	r3, #46893	; 0xb72d
    90aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90ae:	781b      	ldrb	r3, [r3, #0]
    90b0:	4413      	add	r3, r2
    90b2:	b2da      	uxtb	r2, r3
    90b4:	f24b 732d 	movw	r3, #46893	; 0xb72d
    90b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90bc:	701a      	strb	r2, [r3, #0]
    90be:	f24b 732e 	movw	r3, #46894	; 0xb72e
    90c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90c6:	781a      	ldrb	r2, [r3, #0]
    90c8:	f24b 732d 	movw	r3, #46893	; 0xb72d
    90cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90d0:	781b      	ldrb	r3, [r3, #0]
    90d2:	4413      	add	r3, r2
    90d4:	b2da      	uxtb	r2, r3
    90d6:	f24b 732e 	movw	r3, #46894	; 0xb72e
    90da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90de:	701a      	strb	r2, [r3, #0]
    90e0:	f24b 6329 	movw	r3, #46633	; 0xb629
    90e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90e8:	781b      	ldrb	r3, [r3, #0]
    90ea:	3301      	adds	r3, #1
    90ec:	b2da      	uxtb	r2, r3
    90ee:	f24b 6329 	movw	r3, #46633	; 0xb629
    90f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90f6:	701a      	strb	r2, [r3, #0]
    90f8:	f24b 6329 	movw	r3, #46633	; 0xb629
    90fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9100:	781b      	ldrb	r3, [r3, #0]
    9102:	2bff      	cmp	r3, #255	; 0xff
    9104:	d105      	bne.n	9112 <send_climb+0x832>
    9106:	f24b 6329 	movw	r3, #46633	; 0xb629
    910a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    910e:	2200      	movs	r2, #0
    9110:	701a      	strb	r2, [r3, #0]
    9112:	f24b 6329 	movw	r3, #46633	; 0xb629
    9116:	f2c2 0304 	movt	r3, #8196	; 0x2004
    911a:	781b      	ldrb	r3, [r3, #0]
    911c:	461a      	mov	r2, r3
    911e:	f643 0390 	movw	r3, #14480	; 0x3890
    9122:	f2c0 0301 	movt	r3, #1
    9126:	7899      	ldrb	r1, [r3, #2]
    9128:	f24b 632c 	movw	r3, #46636	; 0xb62c
    912c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9130:	5499      	strb	r1, [r3, r2]
    9132:	4b20      	ldr	r3, [pc, #128]	; (91b4 <send_climb+0x8d4>)
    9134:	781a      	ldrb	r2, [r3, #0]
    9136:	f24b 732d 	movw	r3, #46893	; 0xb72d
    913a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    913e:	781b      	ldrb	r3, [r3, #0]
    9140:	4413      	add	r3, r2
    9142:	b2da      	uxtb	r2, r3
    9144:	f24b 732d 	movw	r3, #46893	; 0xb72d
    9148:	f2c2 0304 	movt	r3, #8196	; 0x2004
    914c:	701a      	strb	r2, [r3, #0]
    914e:	f24b 732e 	movw	r3, #46894	; 0xb72e
    9152:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9156:	781a      	ldrb	r2, [r3, #0]
    9158:	f24b 732d 	movw	r3, #46893	; 0xb72d
    915c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9160:	781b      	ldrb	r3, [r3, #0]
    9162:	4413      	add	r3, r2
    9164:	b2da      	uxtb	r2, r3
    9166:	f24b 732e 	movw	r3, #46894	; 0xb72e
    916a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    916e:	701a      	strb	r2, [r3, #0]
    9170:	f24b 6329 	movw	r3, #46633	; 0xb629
    9174:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9178:	781b      	ldrb	r3, [r3, #0]
    917a:	3301      	adds	r3, #1
    917c:	b2da      	uxtb	r2, r3
    917e:	f24b 6329 	movw	r3, #46633	; 0xb629
    9182:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9186:	701a      	strb	r2, [r3, #0]
    9188:	f24b 6329 	movw	r3, #46633	; 0xb629
    918c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9190:	781b      	ldrb	r3, [r3, #0]
    9192:	2bff      	cmp	r3, #255	; 0xff
    9194:	d110      	bne.n	91b8 <send_climb+0x8d8>
    9196:	f24b 6329 	movw	r3, #46633	; 0xb629
    919a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    919e:	2200      	movs	r2, #0
    91a0:	701a      	strb	r2, [r3, #0]
    91a2:	e009      	b.n	91b8 <send_climb+0x8d8>
    91a4:	2004b979 	.word	0x2004b979
    91a8:	2004b97a 	.word	0x2004b97a
    91ac:	2004b97b 	.word	0x2004b97b
    91b0:	00013891 	.word	0x00013891
    91b4:	00013892 	.word	0x00013892
    91b8:	f24b 6329 	movw	r3, #46633	; 0xb629
    91bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91c0:	781b      	ldrb	r3, [r3, #0]
    91c2:	461a      	mov	r2, r3
    91c4:	f643 0390 	movw	r3, #14480	; 0x3890
    91c8:	f2c0 0301 	movt	r3, #1
    91cc:	78d9      	ldrb	r1, [r3, #3]
    91ce:	f24b 632c 	movw	r3, #46636	; 0xb62c
    91d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91d6:	5499      	strb	r1, [r3, r2]
    91d8:	4b79      	ldr	r3, [pc, #484]	; (93c0 <send_climb+0xae0>)
    91da:	781a      	ldrb	r2, [r3, #0]
    91dc:	f24b 732d 	movw	r3, #46893	; 0xb72d
    91e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91e4:	781b      	ldrb	r3, [r3, #0]
    91e6:	4413      	add	r3, r2
    91e8:	b2da      	uxtb	r2, r3
    91ea:	f24b 732d 	movw	r3, #46893	; 0xb72d
    91ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91f2:	701a      	strb	r2, [r3, #0]
    91f4:	f24b 732e 	movw	r3, #46894	; 0xb72e
    91f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91fc:	781a      	ldrb	r2, [r3, #0]
    91fe:	f24b 732d 	movw	r3, #46893	; 0xb72d
    9202:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9206:	781b      	ldrb	r3, [r3, #0]
    9208:	4413      	add	r3, r2
    920a:	b2da      	uxtb	r2, r3
    920c:	f24b 732e 	movw	r3, #46894	; 0xb72e
    9210:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9214:	701a      	strb	r2, [r3, #0]
    9216:	f24b 6329 	movw	r3, #46633	; 0xb629
    921a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    921e:	781b      	ldrb	r3, [r3, #0]
    9220:	3301      	adds	r3, #1
    9222:	b2da      	uxtb	r2, r3
    9224:	f24b 6329 	movw	r3, #46633	; 0xb629
    9228:	f2c2 0304 	movt	r3, #8196	; 0x2004
    922c:	701a      	strb	r2, [r3, #0]
    922e:	f24b 6329 	movw	r3, #46633	; 0xb629
    9232:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9236:	781b      	ldrb	r3, [r3, #0]
    9238:	2bff      	cmp	r3, #255	; 0xff
    923a:	d105      	bne.n	9248 <send_climb+0x968>
    923c:	f24b 6329 	movw	r3, #46633	; 0xb629
    9240:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9244:	2200      	movs	r2, #0
    9246:	701a      	strb	r2, [r3, #0]
    9248:	f24b 6329 	movw	r3, #46633	; 0xb629
    924c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9250:	781b      	ldrb	r3, [r3, #0]
    9252:	461a      	mov	r2, r3
    9254:	f24b 732d 	movw	r3, #46893	; 0xb72d
    9258:	f2c2 0304 	movt	r3, #8196	; 0x2004
    925c:	7819      	ldrb	r1, [r3, #0]
    925e:	f24b 632c 	movw	r3, #46636	; 0xb62c
    9262:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9266:	5499      	strb	r1, [r3, r2]
    9268:	f24b 6329 	movw	r3, #46633	; 0xb629
    926c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9270:	781b      	ldrb	r3, [r3, #0]
    9272:	3301      	adds	r3, #1
    9274:	b2da      	uxtb	r2, r3
    9276:	f24b 6329 	movw	r3, #46633	; 0xb629
    927a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    927e:	701a      	strb	r2, [r3, #0]
    9280:	f24b 6329 	movw	r3, #46633	; 0xb629
    9284:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9288:	781b      	ldrb	r3, [r3, #0]
    928a:	2bff      	cmp	r3, #255	; 0xff
    928c:	d105      	bne.n	929a <send_climb+0x9ba>
    928e:	f24b 6329 	movw	r3, #46633	; 0xb629
    9292:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9296:	2200      	movs	r2, #0
    9298:	701a      	strb	r2, [r3, #0]
    929a:	f24b 6329 	movw	r3, #46633	; 0xb629
    929e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92a2:	781b      	ldrb	r3, [r3, #0]
    92a4:	461a      	mov	r2, r3
    92a6:	f24b 732e 	movw	r3, #46894	; 0xb72e
    92aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92ae:	7819      	ldrb	r1, [r3, #0]
    92b0:	f24b 632c 	movw	r3, #46636	; 0xb62c
    92b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92b8:	5499      	strb	r1, [r3, r2]
    92ba:	f24b 6329 	movw	r3, #46633	; 0xb629
    92be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92c2:	781b      	ldrb	r3, [r3, #0]
    92c4:	3301      	adds	r3, #1
    92c6:	b2da      	uxtb	r2, r3
    92c8:	f24b 6329 	movw	r3, #46633	; 0xb629
    92cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92d0:	701a      	strb	r2, [r3, #0]
    92d2:	f24b 6329 	movw	r3, #46633	; 0xb629
    92d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92da:	781b      	ldrb	r3, [r3, #0]
    92dc:	2bff      	cmp	r3, #255	; 0xff
    92de:	d105      	bne.n	92ec <send_climb+0xa0c>
    92e0:	f24b 6329 	movw	r3, #46633	; 0xb629
    92e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92e8:	2200      	movs	r2, #0
    92ea:	701a      	strb	r2, [r3, #0]
    92ec:	f248 0339 	movw	r3, #32825	; 0x8039
    92f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92f4:	781b      	ldrb	r3, [r3, #0]
    92f6:	b2db      	uxtb	r3, r3
    92f8:	f003 0310 	and.w	r3, r3, #16
    92fc:	2b00      	cmp	r3, #0
    92fe:	d15a      	bne.n	93b6 <send_climb+0xad6>
    9300:	f24b 632a 	movw	r3, #46634	; 0xb62a
    9304:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9308:	781b      	ldrb	r3, [r3, #0]
    930a:	b2db      	uxtb	r3, r3
    930c:	461a      	mov	r2, r3
    930e:	f24b 632c 	movw	r3, #46636	; 0xb62c
    9312:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9316:	5c9a      	ldrb	r2, [r3, r2]
    9318:	f24b 732b 	movw	r3, #46891	; 0xb72b
    931c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9320:	701a      	strb	r2, [r3, #0]
    9322:	f24b 732c 	movw	r3, #46892	; 0xb72c
    9326:	f2c2 0304 	movt	r3, #8196	; 0x2004
    932a:	2200      	movs	r2, #0
    932c:	701a      	strb	r2, [r3, #0]
    932e:	f24b 632a 	movw	r3, #46634	; 0xb62a
    9332:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9336:	781b      	ldrb	r3, [r3, #0]
    9338:	b2db      	uxtb	r3, r3
    933a:	3301      	adds	r3, #1
    933c:	b2da      	uxtb	r2, r3
    933e:	f24b 632a 	movw	r3, #46634	; 0xb62a
    9342:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9346:	701a      	strb	r2, [r3, #0]
    9348:	f24b 632a 	movw	r3, #46634	; 0xb62a
    934c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9350:	781b      	ldrb	r3, [r3, #0]
    9352:	b2db      	uxtb	r3, r3
    9354:	2bff      	cmp	r3, #255	; 0xff
    9356:	d105      	bne.n	9364 <send_climb+0xa84>
    9358:	f24b 632a 	movw	r3, #46634	; 0xb62a
    935c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9360:	2200      	movs	r2, #0
    9362:	701a      	strb	r2, [r3, #0]
    9364:	f248 0338 	movw	r3, #32824	; 0x8038
    9368:	f2c2 0300 	movt	r3, #8192	; 0x2000
    936c:	f248 0238 	movw	r2, #32824	; 0x8038
    9370:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9374:	7812      	ldrb	r2, [r2, #0]
    9376:	b2d2      	uxtb	r2, r2
    9378:	f042 0201 	orr.w	r2, r2, #1
    937c:	b2d2      	uxtb	r2, r2
    937e:	701a      	strb	r2, [r3, #0]
    9380:	f248 0339 	movw	r3, #32825	; 0x8039
    9384:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9388:	f248 0239 	movw	r2, #32825	; 0x8039
    938c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9390:	7812      	ldrb	r2, [r2, #0]
    9392:	b2d2      	uxtb	r2, r2
    9394:	f042 0210 	orr.w	r2, r2, #16
    9398:	b2d2      	uxtb	r2, r2
    939a:	701a      	strb	r2, [r3, #0]
    939c:	e00b      	b.n	93b6 <send_climb+0xad6>
    939e:	f24b 6328 	movw	r3, #46632	; 0xb628
    93a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93a6:	781b      	ldrb	r3, [r3, #0]
    93a8:	3301      	adds	r3, #1
    93aa:	b2da      	uxtb	r2, r3
    93ac:	f24b 6328 	movw	r3, #46632	; 0xb628
    93b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93b4:	701a      	strb	r2, [r3, #0]
}
    93b6:	46bd      	mov	sp, r7
    93b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    93bc:	4770      	bx	lr
    93be:	bf00      	nop
    93c0:	00013893 	.word	0x00013893

000093c4 <send_mode>:
void send_mode(void){  //5000ms
    93c4:	b480      	push	{r7}
    93c6:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 50 == 9) PERIODIC_SEND_PPRZ_MODE();}
    93c8:	f24b 6321 	movw	r3, #46625	; 0xb621
    93cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93d0:	781a      	ldrb	r2, [r3, #0]
    93d2:	f248 531f 	movw	r3, #34079	; 0x851f
    93d6:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    93da:	fba3 1302 	umull	r1, r3, r3, r2
    93de:	091b      	lsrs	r3, r3, #4
    93e0:	2132      	movs	r1, #50	; 0x32
    93e2:	fb01 f303 	mul.w	r3, r1, r3
    93e6:	1ad3      	subs	r3, r2, r3
    93e8:	b2db      	uxtb	r3, r3
    93ea:	2b09      	cmp	r3, #9
    93ec:	f040 82ba 	bne.w	9964 <send_mode+0x5a0>
    93f0:	f24b 6329 	movw	r3, #46633	; 0xb629
    93f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93f8:	781a      	ldrb	r2, [r3, #0]
    93fa:	f24b 632a 	movw	r3, #46634	; 0xb62a
    93fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9402:	781b      	ldrb	r3, [r3, #0]
    9404:	b2db      	uxtb	r3, r3
    9406:	429a      	cmp	r2, r3
    9408:	d313      	bcc.n	9432 <send_mode+0x6e>
    940a:	f24b 632a 	movw	r3, #46634	; 0xb62a
    940e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9412:	781b      	ldrb	r3, [r3, #0]
    9414:	b2db      	uxtb	r3, r3
    9416:	461a      	mov	r2, r3
    9418:	f24b 6329 	movw	r3, #46633	; 0xb629
    941c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9420:	781b      	ldrb	r3, [r3, #0]
    9422:	1ad3      	subs	r3, r2, r3
    9424:	33ff      	adds	r3, #255	; 0xff
    9426:	2b09      	cmp	r3, #9
    9428:	bfd4      	ite	le
    942a:	2300      	movle	r3, #0
    942c:	2301      	movgt	r3, #1
    942e:	b2db      	uxtb	r3, r3
    9430:	e011      	b.n	9456 <send_mode+0x92>
    9432:	f24b 632a 	movw	r3, #46634	; 0xb62a
    9436:	f2c2 0304 	movt	r3, #8196	; 0x2004
    943a:	781b      	ldrb	r3, [r3, #0]
    943c:	b2db      	uxtb	r3, r3
    943e:	461a      	mov	r2, r3
    9440:	f24b 6329 	movw	r3, #46633	; 0xb629
    9444:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9448:	781b      	ldrb	r3, [r3, #0]
    944a:	1ad3      	subs	r3, r2, r3
    944c:	2b09      	cmp	r3, #9
    944e:	bfd4      	ite	le
    9450:	2300      	movle	r3, #0
    9452:	2301      	movgt	r3, #1
    9454:	b2db      	uxtb	r3, r3
    9456:	2b00      	cmp	r3, #0
    9458:	f000 8278 	beq.w	994c <send_mode+0x588>
    945c:	f24b 6329 	movw	r3, #46633	; 0xb629
    9460:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9464:	781b      	ldrb	r3, [r3, #0]
    9466:	461a      	mov	r2, r3
    9468:	f24b 632c 	movw	r3, #46636	; 0xb62c
    946c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9470:	2105      	movs	r1, #5
    9472:	5499      	strb	r1, [r3, r2]
    9474:	f24b 6329 	movw	r3, #46633	; 0xb629
    9478:	f2c2 0304 	movt	r3, #8196	; 0x2004
    947c:	781b      	ldrb	r3, [r3, #0]
    947e:	3301      	adds	r3, #1
    9480:	b2da      	uxtb	r2, r3
    9482:	f24b 6329 	movw	r3, #46633	; 0xb629
    9486:	f2c2 0304 	movt	r3, #8196	; 0x2004
    948a:	701a      	strb	r2, [r3, #0]
    948c:	f24b 6329 	movw	r3, #46633	; 0xb629
    9490:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9494:	781b      	ldrb	r3, [r3, #0]
    9496:	2bff      	cmp	r3, #255	; 0xff
    9498:	d105      	bne.n	94a6 <send_mode+0xe2>
    949a:	f24b 6329 	movw	r3, #46633	; 0xb629
    949e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94a2:	2200      	movs	r2, #0
    94a4:	701a      	strb	r2, [r3, #0]
    94a6:	f24b 6329 	movw	r3, #46633	; 0xb629
    94aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94ae:	781b      	ldrb	r3, [r3, #0]
    94b0:	461a      	mov	r2, r3
    94b2:	f24b 632c 	movw	r3, #46636	; 0xb62c
    94b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94ba:	210b      	movs	r1, #11
    94bc:	5499      	strb	r1, [r3, r2]
    94be:	f24b 6329 	movw	r3, #46633	; 0xb629
    94c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94c6:	781b      	ldrb	r3, [r3, #0]
    94c8:	3301      	adds	r3, #1
    94ca:	b2da      	uxtb	r2, r3
    94cc:	f24b 6329 	movw	r3, #46633	; 0xb629
    94d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94d4:	701a      	strb	r2, [r3, #0]
    94d6:	f24b 6329 	movw	r3, #46633	; 0xb629
    94da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94de:	781b      	ldrb	r3, [r3, #0]
    94e0:	2bff      	cmp	r3, #255	; 0xff
    94e2:	d105      	bne.n	94f0 <send_mode+0x12c>
    94e4:	f24b 6329 	movw	r3, #46633	; 0xb629
    94e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94ec:	2200      	movs	r2, #0
    94ee:	701a      	strb	r2, [r3, #0]
    94f0:	f24b 732d 	movw	r3, #46893	; 0xb72d
    94f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94f8:	220b      	movs	r2, #11
    94fa:	701a      	strb	r2, [r3, #0]
    94fc:	f24b 732e 	movw	r3, #46894	; 0xb72e
    9500:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9504:	220b      	movs	r2, #11
    9506:	701a      	strb	r2, [r3, #0]
    9508:	f24b 6329 	movw	r3, #46633	; 0xb629
    950c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9510:	781b      	ldrb	r3, [r3, #0]
    9512:	461a      	mov	r2, r3
    9514:	f24b 630c 	movw	r3, #46604	; 0xb60c
    9518:	f2c2 0304 	movt	r3, #8196	; 0x2004
    951c:	7819      	ldrb	r1, [r3, #0]
    951e:	f24b 632c 	movw	r3, #46636	; 0xb62c
    9522:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9526:	5499      	strb	r1, [r3, r2]
    9528:	f24b 732d 	movw	r3, #46893	; 0xb72d
    952c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9530:	781a      	ldrb	r2, [r3, #0]
    9532:	f24b 630c 	movw	r3, #46604	; 0xb60c
    9536:	f2c2 0304 	movt	r3, #8196	; 0x2004
    953a:	781b      	ldrb	r3, [r3, #0]
    953c:	4413      	add	r3, r2
    953e:	b2da      	uxtb	r2, r3
    9540:	f24b 732d 	movw	r3, #46893	; 0xb72d
    9544:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9548:	701a      	strb	r2, [r3, #0]
    954a:	f24b 732e 	movw	r3, #46894	; 0xb72e
    954e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9552:	781a      	ldrb	r2, [r3, #0]
    9554:	f24b 732d 	movw	r3, #46893	; 0xb72d
    9558:	f2c2 0304 	movt	r3, #8196	; 0x2004
    955c:	781b      	ldrb	r3, [r3, #0]
    955e:	4413      	add	r3, r2
    9560:	b2da      	uxtb	r2, r3
    9562:	f24b 732e 	movw	r3, #46894	; 0xb72e
    9566:	f2c2 0304 	movt	r3, #8196	; 0x2004
    956a:	701a      	strb	r2, [r3, #0]
    956c:	f24b 6329 	movw	r3, #46633	; 0xb629
    9570:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9574:	781b      	ldrb	r3, [r3, #0]
    9576:	3301      	adds	r3, #1
    9578:	b2da      	uxtb	r2, r3
    957a:	f24b 6329 	movw	r3, #46633	; 0xb629
    957e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9582:	701a      	strb	r2, [r3, #0]
    9584:	f24b 6329 	movw	r3, #46633	; 0xb629
    9588:	f2c2 0304 	movt	r3, #8196	; 0x2004
    958c:	781b      	ldrb	r3, [r3, #0]
    958e:	2bff      	cmp	r3, #255	; 0xff
    9590:	d105      	bne.n	959e <send_mode+0x1da>
    9592:	f24b 6329 	movw	r3, #46633	; 0xb629
    9596:	f2c2 0304 	movt	r3, #8196	; 0x2004
    959a:	2200      	movs	r2, #0
    959c:	701a      	strb	r2, [r3, #0]
    959e:	f24b 6329 	movw	r3, #46633	; 0xb629
    95a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95a6:	781b      	ldrb	r3, [r3, #0]
    95a8:	461a      	mov	r2, r3
    95aa:	f24b 630d 	movw	r3, #46605	; 0xb60d
    95ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95b2:	7819      	ldrb	r1, [r3, #0]
    95b4:	f24b 632c 	movw	r3, #46636	; 0xb62c
    95b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95bc:	5499      	strb	r1, [r3, r2]
    95be:	f24b 732d 	movw	r3, #46893	; 0xb72d
    95c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95c6:	781a      	ldrb	r2, [r3, #0]
    95c8:	f24b 630d 	movw	r3, #46605	; 0xb60d
    95cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95d0:	781b      	ldrb	r3, [r3, #0]
    95d2:	4413      	add	r3, r2
    95d4:	b2da      	uxtb	r2, r3
    95d6:	f24b 732d 	movw	r3, #46893	; 0xb72d
    95da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95de:	701a      	strb	r2, [r3, #0]
    95e0:	f24b 732e 	movw	r3, #46894	; 0xb72e
    95e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95e8:	781a      	ldrb	r2, [r3, #0]
    95ea:	f24b 732d 	movw	r3, #46893	; 0xb72d
    95ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95f2:	781b      	ldrb	r3, [r3, #0]
    95f4:	4413      	add	r3, r2
    95f6:	b2da      	uxtb	r2, r3
    95f8:	f24b 732e 	movw	r3, #46894	; 0xb72e
    95fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9600:	701a      	strb	r2, [r3, #0]
    9602:	f24b 6329 	movw	r3, #46633	; 0xb629
    9606:	f2c2 0304 	movt	r3, #8196	; 0x2004
    960a:	781b      	ldrb	r3, [r3, #0]
    960c:	3301      	adds	r3, #1
    960e:	b2da      	uxtb	r2, r3
    9610:	f24b 6329 	movw	r3, #46633	; 0xb629
    9614:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9618:	701a      	strb	r2, [r3, #0]
    961a:	f24b 6329 	movw	r3, #46633	; 0xb629
    961e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9622:	781b      	ldrb	r3, [r3, #0]
    9624:	2bff      	cmp	r3, #255	; 0xff
    9626:	d105      	bne.n	9634 <send_mode+0x270>
    9628:	f24b 6329 	movw	r3, #46633	; 0xb629
    962c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9630:	2200      	movs	r2, #0
    9632:	701a      	strb	r2, [r3, #0]
    9634:	f24b 6329 	movw	r3, #46633	; 0xb629
    9638:	f2c2 0304 	movt	r3, #8196	; 0x2004
    963c:	781b      	ldrb	r3, [r3, #0]
    963e:	461a      	mov	r2, r3
    9640:	f64b 433c 	movw	r3, #48188	; 0xbc3c
    9644:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9648:	7819      	ldrb	r1, [r3, #0]
    964a:	f24b 632c 	movw	r3, #46636	; 0xb62c
    964e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9652:	5499      	strb	r1, [r3, r2]
    9654:	f24b 732d 	movw	r3, #46893	; 0xb72d
    9658:	f2c2 0304 	movt	r3, #8196	; 0x2004
    965c:	781a      	ldrb	r2, [r3, #0]
    965e:	f64b 433c 	movw	r3, #48188	; 0xbc3c
    9662:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9666:	781b      	ldrb	r3, [r3, #0]
    9668:	4413      	add	r3, r2
    966a:	b2da      	uxtb	r2, r3
    966c:	f24b 732d 	movw	r3, #46893	; 0xb72d
    9670:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9674:	701a      	strb	r2, [r3, #0]
    9676:	f24b 732e 	movw	r3, #46894	; 0xb72e
    967a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    967e:	781a      	ldrb	r2, [r3, #0]
    9680:	f24b 732d 	movw	r3, #46893	; 0xb72d
    9684:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9688:	781b      	ldrb	r3, [r3, #0]
    968a:	4413      	add	r3, r2
    968c:	b2da      	uxtb	r2, r3
    968e:	f24b 732e 	movw	r3, #46894	; 0xb72e
    9692:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9696:	701a      	strb	r2, [r3, #0]
    9698:	f24b 6329 	movw	r3, #46633	; 0xb629
    969c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96a0:	781b      	ldrb	r3, [r3, #0]
    96a2:	3301      	adds	r3, #1
    96a4:	b2da      	uxtb	r2, r3
    96a6:	f24b 6329 	movw	r3, #46633	; 0xb629
    96aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96ae:	701a      	strb	r2, [r3, #0]
    96b0:	f24b 6329 	movw	r3, #46633	; 0xb629
    96b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96b8:	781b      	ldrb	r3, [r3, #0]
    96ba:	2bff      	cmp	r3, #255	; 0xff
    96bc:	d105      	bne.n	96ca <send_mode+0x306>
    96be:	f24b 6329 	movw	r3, #46633	; 0xb629
    96c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96c6:	2200      	movs	r2, #0
    96c8:	701a      	strb	r2, [r3, #0]
    96ca:	f24b 6329 	movw	r3, #46633	; 0xb629
    96ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96d2:	781b      	ldrb	r3, [r3, #0]
    96d4:	461a      	mov	r2, r3
    96d6:	f24b 6313 	movw	r3, #46611	; 0xb613
    96da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96de:	7819      	ldrb	r1, [r3, #0]
    96e0:	f24b 632c 	movw	r3, #46636	; 0xb62c
    96e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96e8:	5499      	strb	r1, [r3, r2]
    96ea:	f24b 732d 	movw	r3, #46893	; 0xb72d
    96ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96f2:	781a      	ldrb	r2, [r3, #0]
    96f4:	f24b 6313 	movw	r3, #46611	; 0xb613
    96f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96fc:	781b      	ldrb	r3, [r3, #0]
    96fe:	4413      	add	r3, r2
    9700:	b2da      	uxtb	r2, r3
    9702:	f24b 732d 	movw	r3, #46893	; 0xb72d
    9706:	f2c2 0304 	movt	r3, #8196	; 0x2004
    970a:	701a      	strb	r2, [r3, #0]
    970c:	f24b 732e 	movw	r3, #46894	; 0xb72e
    9710:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9714:	781a      	ldrb	r2, [r3, #0]
    9716:	f24b 732d 	movw	r3, #46893	; 0xb72d
    971a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    971e:	781b      	ldrb	r3, [r3, #0]
    9720:	4413      	add	r3, r2
    9722:	b2da      	uxtb	r2, r3
    9724:	f24b 732e 	movw	r3, #46894	; 0xb72e
    9728:	f2c2 0304 	movt	r3, #8196	; 0x2004
    972c:	701a      	strb	r2, [r3, #0]
    972e:	f24b 6329 	movw	r3, #46633	; 0xb629
    9732:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9736:	781b      	ldrb	r3, [r3, #0]
    9738:	3301      	adds	r3, #1
    973a:	b2da      	uxtb	r2, r3
    973c:	f24b 6329 	movw	r3, #46633	; 0xb629
    9740:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9744:	701a      	strb	r2, [r3, #0]
    9746:	f24b 6329 	movw	r3, #46633	; 0xb629
    974a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    974e:	781b      	ldrb	r3, [r3, #0]
    9750:	2bff      	cmp	r3, #255	; 0xff
    9752:	d105      	bne.n	9760 <send_mode+0x39c>
    9754:	f24b 6329 	movw	r3, #46633	; 0xb629
    9758:	f2c2 0304 	movt	r3, #8196	; 0x2004
    975c:	2200      	movs	r2, #0
    975e:	701a      	strb	r2, [r3, #0]
    9760:	f24b 6329 	movw	r3, #46633	; 0xb629
    9764:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9768:	781b      	ldrb	r3, [r3, #0]
    976a:	461a      	mov	r2, r3
    976c:	f240 1304 	movw	r3, #260	; 0x104
    9770:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9774:	7819      	ldrb	r1, [r3, #0]
    9776:	f24b 632c 	movw	r3, #46636	; 0xb62c
    977a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    977e:	5499      	strb	r1, [r3, r2]
    9780:	f24b 732d 	movw	r3, #46893	; 0xb72d
    9784:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9788:	781a      	ldrb	r2, [r3, #0]
    978a:	f240 1304 	movw	r3, #260	; 0x104
    978e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9792:	781b      	ldrb	r3, [r3, #0]
    9794:	4413      	add	r3, r2
    9796:	b2da      	uxtb	r2, r3
    9798:	f24b 732d 	movw	r3, #46893	; 0xb72d
    979c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97a0:	701a      	strb	r2, [r3, #0]
    97a2:	f24b 732e 	movw	r3, #46894	; 0xb72e
    97a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97aa:	781a      	ldrb	r2, [r3, #0]
    97ac:	f24b 732d 	movw	r3, #46893	; 0xb72d
    97b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97b4:	781b      	ldrb	r3, [r3, #0]
    97b6:	4413      	add	r3, r2
    97b8:	b2da      	uxtb	r2, r3
    97ba:	f24b 732e 	movw	r3, #46894	; 0xb72e
    97be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97c2:	701a      	strb	r2, [r3, #0]
    97c4:	f24b 6329 	movw	r3, #46633	; 0xb629
    97c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97cc:	781b      	ldrb	r3, [r3, #0]
    97ce:	3301      	adds	r3, #1
    97d0:	b2da      	uxtb	r2, r3
    97d2:	f24b 6329 	movw	r3, #46633	; 0xb629
    97d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97da:	701a      	strb	r2, [r3, #0]
    97dc:	f24b 6329 	movw	r3, #46633	; 0xb629
    97e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97e4:	781b      	ldrb	r3, [r3, #0]
    97e6:	2bff      	cmp	r3, #255	; 0xff
    97e8:	d105      	bne.n	97f6 <send_mode+0x432>
    97ea:	f24b 6329 	movw	r3, #46633	; 0xb629
    97ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97f2:	2200      	movs	r2, #0
    97f4:	701a      	strb	r2, [r3, #0]
    97f6:	f24b 6329 	movw	r3, #46633	; 0xb629
    97fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97fe:	781b      	ldrb	r3, [r3, #0]
    9800:	461a      	mov	r2, r3
    9802:	f24b 732d 	movw	r3, #46893	; 0xb72d
    9806:	f2c2 0304 	movt	r3, #8196	; 0x2004
    980a:	7819      	ldrb	r1, [r3, #0]
    980c:	f24b 632c 	movw	r3, #46636	; 0xb62c
    9810:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9814:	5499      	strb	r1, [r3, r2]
    9816:	f24b 6329 	movw	r3, #46633	; 0xb629
    981a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    981e:	781b      	ldrb	r3, [r3, #0]
    9820:	3301      	adds	r3, #1
    9822:	b2da      	uxtb	r2, r3
    9824:	f24b 6329 	movw	r3, #46633	; 0xb629
    9828:	f2c2 0304 	movt	r3, #8196	; 0x2004
    982c:	701a      	strb	r2, [r3, #0]
    982e:	f24b 6329 	movw	r3, #46633	; 0xb629
    9832:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9836:	781b      	ldrb	r3, [r3, #0]
    9838:	2bff      	cmp	r3, #255	; 0xff
    983a:	d105      	bne.n	9848 <send_mode+0x484>
    983c:	f24b 6329 	movw	r3, #46633	; 0xb629
    9840:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9844:	2200      	movs	r2, #0
    9846:	701a      	strb	r2, [r3, #0]
    9848:	f24b 6329 	movw	r3, #46633	; 0xb629
    984c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9850:	781b      	ldrb	r3, [r3, #0]
    9852:	461a      	mov	r2, r3
    9854:	f24b 732e 	movw	r3, #46894	; 0xb72e
    9858:	f2c2 0304 	movt	r3, #8196	; 0x2004
    985c:	7819      	ldrb	r1, [r3, #0]
    985e:	f24b 632c 	movw	r3, #46636	; 0xb62c
    9862:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9866:	5499      	strb	r1, [r3, r2]
    9868:	f24b 6329 	movw	r3, #46633	; 0xb629
    986c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9870:	781b      	ldrb	r3, [r3, #0]
    9872:	3301      	adds	r3, #1
    9874:	b2da      	uxtb	r2, r3
    9876:	f24b 6329 	movw	r3, #46633	; 0xb629
    987a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    987e:	701a      	strb	r2, [r3, #0]
    9880:	f24b 6329 	movw	r3, #46633	; 0xb629
    9884:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9888:	781b      	ldrb	r3, [r3, #0]
    988a:	2bff      	cmp	r3, #255	; 0xff
    988c:	d105      	bne.n	989a <send_mode+0x4d6>
    988e:	f24b 6329 	movw	r3, #46633	; 0xb629
    9892:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9896:	2200      	movs	r2, #0
    9898:	701a      	strb	r2, [r3, #0]
    989a:	f248 0339 	movw	r3, #32825	; 0x8039
    989e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98a2:	781b      	ldrb	r3, [r3, #0]
    98a4:	b2db      	uxtb	r3, r3
    98a6:	f003 0310 	and.w	r3, r3, #16
    98aa:	2b00      	cmp	r3, #0
    98ac:	d15a      	bne.n	9964 <send_mode+0x5a0>
    98ae:	f24b 632a 	movw	r3, #46634	; 0xb62a
    98b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98b6:	781b      	ldrb	r3, [r3, #0]
    98b8:	b2db      	uxtb	r3, r3
    98ba:	461a      	mov	r2, r3
    98bc:	f24b 632c 	movw	r3, #46636	; 0xb62c
    98c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98c4:	5c9a      	ldrb	r2, [r3, r2]
    98c6:	f24b 732b 	movw	r3, #46891	; 0xb72b
    98ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98ce:	701a      	strb	r2, [r3, #0]
    98d0:	f24b 732c 	movw	r3, #46892	; 0xb72c
    98d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98d8:	2200      	movs	r2, #0
    98da:	701a      	strb	r2, [r3, #0]
    98dc:	f24b 632a 	movw	r3, #46634	; 0xb62a
    98e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98e4:	781b      	ldrb	r3, [r3, #0]
    98e6:	b2db      	uxtb	r3, r3
    98e8:	3301      	adds	r3, #1
    98ea:	b2da      	uxtb	r2, r3
    98ec:	f24b 632a 	movw	r3, #46634	; 0xb62a
    98f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98f4:	701a      	strb	r2, [r3, #0]
    98f6:	f24b 632a 	movw	r3, #46634	; 0xb62a
    98fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98fe:	781b      	ldrb	r3, [r3, #0]
    9900:	b2db      	uxtb	r3, r3
    9902:	2bff      	cmp	r3, #255	; 0xff
    9904:	d105      	bne.n	9912 <send_mode+0x54e>
    9906:	f24b 632a 	movw	r3, #46634	; 0xb62a
    990a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    990e:	2200      	movs	r2, #0
    9910:	701a      	strb	r2, [r3, #0]
    9912:	f248 0338 	movw	r3, #32824	; 0x8038
    9916:	f2c2 0300 	movt	r3, #8192	; 0x2000
    991a:	f248 0238 	movw	r2, #32824	; 0x8038
    991e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9922:	7812      	ldrb	r2, [r2, #0]
    9924:	b2d2      	uxtb	r2, r2
    9926:	f042 0201 	orr.w	r2, r2, #1
    992a:	b2d2      	uxtb	r2, r2
    992c:	701a      	strb	r2, [r3, #0]
    992e:	f248 0339 	movw	r3, #32825	; 0x8039
    9932:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9936:	f248 0239 	movw	r2, #32825	; 0x8039
    993a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    993e:	7812      	ldrb	r2, [r2, #0]
    9940:	b2d2      	uxtb	r2, r2
    9942:	f042 0210 	orr.w	r2, r2, #16
    9946:	b2d2      	uxtb	r2, r2
    9948:	701a      	strb	r2, [r3, #0]
    994a:	e00b      	b.n	9964 <send_mode+0x5a0>
    994c:	f24b 6328 	movw	r3, #46632	; 0xb628
    9950:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9954:	781b      	ldrb	r3, [r3, #0]
    9956:	3301      	adds	r3, #1
    9958:	b2da      	uxtb	r2, r3
    995a:	f24b 6328 	movw	r3, #46632	; 0xb628
    995e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9962:	701a      	strb	r2, [r3, #0]
}
    9964:	46bd      	mov	sp, r7
    9966:	f85d 7b04 	ldr.w	r7, [sp], #4
    996a:	4770      	bx	lr

0000996c <send_debug>:
void send_debug(void){  //5000ms
    996c:	b480      	push	{r7}
    996e:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 50 == 29) PERIODIC_SEND_DEBUG();}
    9970:	f24b 6321 	movw	r3, #46625	; 0xb621
    9974:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9978:	781a      	ldrb	r2, [r3, #0]
    997a:	f248 531f 	movw	r3, #34079	; 0x851f
    997e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    9982:	fba3 1302 	umull	r1, r3, r3, r2
    9986:	091b      	lsrs	r3, r3, #4
    9988:	2132      	movs	r1, #50	; 0x32
    998a:	fb01 f303 	mul.w	r3, r1, r3
    998e:	1ad3      	subs	r3, r2, r3
    9990:	b2db      	uxtb	r3, r3
    9992:	2b1d      	cmp	r3, #29
    9994:	f040 82bb 	bne.w	9f0e <send_debug+0x5a2>
    9998:	f24b 6329 	movw	r3, #46633	; 0xb629
    999c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99a0:	781a      	ldrb	r2, [r3, #0]
    99a2:	f24b 632a 	movw	r3, #46634	; 0xb62a
    99a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99aa:	781b      	ldrb	r3, [r3, #0]
    99ac:	b2db      	uxtb	r3, r3
    99ae:	429a      	cmp	r2, r3
    99b0:	d313      	bcc.n	99da <send_debug+0x6e>
    99b2:	f24b 632a 	movw	r3, #46634	; 0xb62a
    99b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99ba:	781b      	ldrb	r3, [r3, #0]
    99bc:	b2db      	uxtb	r3, r3
    99be:	461a      	mov	r2, r3
    99c0:	f24b 6329 	movw	r3, #46633	; 0xb629
    99c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99c8:	781b      	ldrb	r3, [r3, #0]
    99ca:	1ad3      	subs	r3, r2, r3
    99cc:	33ff      	adds	r3, #255	; 0xff
    99ce:	2b09      	cmp	r3, #9
    99d0:	bfd4      	ite	le
    99d2:	2300      	movle	r3, #0
    99d4:	2301      	movgt	r3, #1
    99d6:	b2db      	uxtb	r3, r3
    99d8:	e011      	b.n	99fe <send_debug+0x92>
    99da:	f24b 632a 	movw	r3, #46634	; 0xb62a
    99de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99e2:	781b      	ldrb	r3, [r3, #0]
    99e4:	b2db      	uxtb	r3, r3
    99e6:	461a      	mov	r2, r3
    99e8:	f24b 6329 	movw	r3, #46633	; 0xb629
    99ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99f0:	781b      	ldrb	r3, [r3, #0]
    99f2:	1ad3      	subs	r3, r2, r3
    99f4:	2b09      	cmp	r3, #9
    99f6:	bfd4      	ite	le
    99f8:	2300      	movle	r3, #0
    99fa:	2301      	movgt	r3, #1
    99fc:	b2db      	uxtb	r3, r3
    99fe:	2b00      	cmp	r3, #0
    9a00:	f000 8279 	beq.w	9ef6 <send_debug+0x58a>
    9a04:	f24b 6329 	movw	r3, #46633	; 0xb629
    9a08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a0c:	781b      	ldrb	r3, [r3, #0]
    9a0e:	461a      	mov	r2, r3
    9a10:	f24b 632c 	movw	r3, #46636	; 0xb62c
    9a14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a18:	2105      	movs	r1, #5
    9a1a:	5499      	strb	r1, [r3, r2]
    9a1c:	f24b 6329 	movw	r3, #46633	; 0xb629
    9a20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a24:	781b      	ldrb	r3, [r3, #0]
    9a26:	3301      	adds	r3, #1
    9a28:	b2da      	uxtb	r2, r3
    9a2a:	f24b 6329 	movw	r3, #46633	; 0xb629
    9a2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a32:	701a      	strb	r2, [r3, #0]
    9a34:	f24b 6329 	movw	r3, #46633	; 0xb629
    9a38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a3c:	781b      	ldrb	r3, [r3, #0]
    9a3e:	2bff      	cmp	r3, #255	; 0xff
    9a40:	d105      	bne.n	9a4e <send_debug+0xe2>
    9a42:	f24b 6329 	movw	r3, #46633	; 0xb629
    9a46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a4a:	2200      	movs	r2, #0
    9a4c:	701a      	strb	r2, [r3, #0]
    9a4e:	f24b 6329 	movw	r3, #46633	; 0xb629
    9a52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a56:	781b      	ldrb	r3, [r3, #0]
    9a58:	461a      	mov	r2, r3
    9a5a:	f24b 632c 	movw	r3, #46636	; 0xb62c
    9a5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a62:	210d      	movs	r1, #13
    9a64:	5499      	strb	r1, [r3, r2]
    9a66:	f24b 6329 	movw	r3, #46633	; 0xb629
    9a6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a6e:	781b      	ldrb	r3, [r3, #0]
    9a70:	3301      	adds	r3, #1
    9a72:	b2da      	uxtb	r2, r3
    9a74:	f24b 6329 	movw	r3, #46633	; 0xb629
    9a78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a7c:	701a      	strb	r2, [r3, #0]
    9a7e:	f24b 6329 	movw	r3, #46633	; 0xb629
    9a82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a86:	781b      	ldrb	r3, [r3, #0]
    9a88:	2bff      	cmp	r3, #255	; 0xff
    9a8a:	d105      	bne.n	9a98 <send_debug+0x12c>
    9a8c:	f24b 6329 	movw	r3, #46633	; 0xb629
    9a90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a94:	2200      	movs	r2, #0
    9a96:	701a      	strb	r2, [r3, #0]
    9a98:	f24b 732d 	movw	r3, #46893	; 0xb72d
    9a9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9aa0:	220d      	movs	r2, #13
    9aa2:	701a      	strb	r2, [r3, #0]
    9aa4:	f24b 732e 	movw	r3, #46894	; 0xb72e
    9aa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9aac:	220d      	movs	r2, #13
    9aae:	701a      	strb	r2, [r3, #0]
    9ab0:	f24b 6329 	movw	r3, #46633	; 0xb629
    9ab4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ab8:	781b      	ldrb	r3, [r3, #0]
    9aba:	461a      	mov	r2, r3
    9abc:	f24b 735f 	movw	r3, #46943	; 0xb75f
    9ac0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ac4:	781b      	ldrb	r3, [r3, #0]
    9ac6:	b2d9      	uxtb	r1, r3
    9ac8:	f24b 632c 	movw	r3, #46636	; 0xb62c
    9acc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ad0:	5499      	strb	r1, [r3, r2]
    9ad2:	f24b 735f 	movw	r3, #46943	; 0xb75f
    9ad6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ada:	781a      	ldrb	r2, [r3, #0]
    9adc:	f24b 732d 	movw	r3, #46893	; 0xb72d
    9ae0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ae4:	781b      	ldrb	r3, [r3, #0]
    9ae6:	4413      	add	r3, r2
    9ae8:	b2da      	uxtb	r2, r3
    9aea:	f24b 732d 	movw	r3, #46893	; 0xb72d
    9aee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9af2:	701a      	strb	r2, [r3, #0]
    9af4:	f24b 732e 	movw	r3, #46894	; 0xb72e
    9af8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9afc:	781a      	ldrb	r2, [r3, #0]
    9afe:	f24b 732d 	movw	r3, #46893	; 0xb72d
    9b02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b06:	781b      	ldrb	r3, [r3, #0]
    9b08:	4413      	add	r3, r2
    9b0a:	b2da      	uxtb	r2, r3
    9b0c:	f24b 732e 	movw	r3, #46894	; 0xb72e
    9b10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b14:	701a      	strb	r2, [r3, #0]
    9b16:	f24b 6329 	movw	r3, #46633	; 0xb629
    9b1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b1e:	781b      	ldrb	r3, [r3, #0]
    9b20:	3301      	adds	r3, #1
    9b22:	b2da      	uxtb	r2, r3
    9b24:	f24b 6329 	movw	r3, #46633	; 0xb629
    9b28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b2c:	701a      	strb	r2, [r3, #0]
    9b2e:	f24b 6329 	movw	r3, #46633	; 0xb629
    9b32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b36:	781b      	ldrb	r3, [r3, #0]
    9b38:	2bff      	cmp	r3, #255	; 0xff
    9b3a:	d105      	bne.n	9b48 <send_debug+0x1dc>
    9b3c:	f24b 6329 	movw	r3, #46633	; 0xb629
    9b40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b44:	2200      	movs	r2, #0
    9b46:	701a      	strb	r2, [r3, #0]
    9b48:	f24b 6329 	movw	r3, #46633	; 0xb629
    9b4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b50:	781b      	ldrb	r3, [r3, #0]
    9b52:	461a      	mov	r2, r3
    9b54:	f24b 7360 	movw	r3, #46944	; 0xb760
    9b58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b5c:	7819      	ldrb	r1, [r3, #0]
    9b5e:	f24b 632c 	movw	r3, #46636	; 0xb62c
    9b62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b66:	5499      	strb	r1, [r3, r2]
    9b68:	f24b 732d 	movw	r3, #46893	; 0xb72d
    9b6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b70:	781a      	ldrb	r2, [r3, #0]
    9b72:	f24b 7360 	movw	r3, #46944	; 0xb760
    9b76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b7a:	781b      	ldrb	r3, [r3, #0]
    9b7c:	4413      	add	r3, r2
    9b7e:	b2da      	uxtb	r2, r3
    9b80:	f24b 732d 	movw	r3, #46893	; 0xb72d
    9b84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b88:	701a      	strb	r2, [r3, #0]
    9b8a:	f24b 732e 	movw	r3, #46894	; 0xb72e
    9b8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b92:	781a      	ldrb	r2, [r3, #0]
    9b94:	f24b 732d 	movw	r3, #46893	; 0xb72d
    9b98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b9c:	781b      	ldrb	r3, [r3, #0]
    9b9e:	4413      	add	r3, r2
    9ba0:	b2da      	uxtb	r2, r3
    9ba2:	f24b 732e 	movw	r3, #46894	; 0xb72e
    9ba6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9baa:	701a      	strb	r2, [r3, #0]
    9bac:	f24b 6329 	movw	r3, #46633	; 0xb629
    9bb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bb4:	781b      	ldrb	r3, [r3, #0]
    9bb6:	3301      	adds	r3, #1
    9bb8:	b2da      	uxtb	r2, r3
    9bba:	f24b 6329 	movw	r3, #46633	; 0xb629
    9bbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bc2:	701a      	strb	r2, [r3, #0]
    9bc4:	f24b 6329 	movw	r3, #46633	; 0xb629
    9bc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bcc:	781b      	ldrb	r3, [r3, #0]
    9bce:	2bff      	cmp	r3, #255	; 0xff
    9bd0:	d105      	bne.n	9bde <send_debug+0x272>
    9bd2:	f24b 6329 	movw	r3, #46633	; 0xb629
    9bd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bda:	2200      	movs	r2, #0
    9bdc:	701a      	strb	r2, [r3, #0]
    9bde:	f24b 6329 	movw	r3, #46633	; 0xb629
    9be2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9be6:	781b      	ldrb	r3, [r3, #0]
    9be8:	461a      	mov	r2, r3
    9bea:	f24b 6328 	movw	r3, #46632	; 0xb628
    9bee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bf2:	7819      	ldrb	r1, [r3, #0]
    9bf4:	f24b 632c 	movw	r3, #46636	; 0xb62c
    9bf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bfc:	5499      	strb	r1, [r3, r2]
    9bfe:	f24b 732d 	movw	r3, #46893	; 0xb72d
    9c02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c06:	781a      	ldrb	r2, [r3, #0]
    9c08:	f24b 6328 	movw	r3, #46632	; 0xb628
    9c0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c10:	781b      	ldrb	r3, [r3, #0]
    9c12:	4413      	add	r3, r2
    9c14:	b2da      	uxtb	r2, r3
    9c16:	f24b 732d 	movw	r3, #46893	; 0xb72d
    9c1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c1e:	701a      	strb	r2, [r3, #0]
    9c20:	f24b 732e 	movw	r3, #46894	; 0xb72e
    9c24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c28:	781a      	ldrb	r2, [r3, #0]
    9c2a:	f24b 732d 	movw	r3, #46893	; 0xb72d
    9c2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c32:	781b      	ldrb	r3, [r3, #0]
    9c34:	4413      	add	r3, r2
    9c36:	b2da      	uxtb	r2, r3
    9c38:	f24b 732e 	movw	r3, #46894	; 0xb72e
    9c3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c40:	701a      	strb	r2, [r3, #0]
    9c42:	f24b 6329 	movw	r3, #46633	; 0xb629
    9c46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c4a:	781b      	ldrb	r3, [r3, #0]
    9c4c:	3301      	adds	r3, #1
    9c4e:	b2da      	uxtb	r2, r3
    9c50:	f24b 6329 	movw	r3, #46633	; 0xb629
    9c54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c58:	701a      	strb	r2, [r3, #0]
    9c5a:	f24b 6329 	movw	r3, #46633	; 0xb629
    9c5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c62:	781b      	ldrb	r3, [r3, #0]
    9c64:	2bff      	cmp	r3, #255	; 0xff
    9c66:	d105      	bne.n	9c74 <send_debug+0x308>
    9c68:	f24b 6329 	movw	r3, #46633	; 0xb629
    9c6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c70:	2200      	movs	r2, #0
    9c72:	701a      	strb	r2, [r3, #0]
    9c74:	f24b 6329 	movw	r3, #46633	; 0xb629
    9c78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c7c:	781b      	ldrb	r3, [r3, #0]
    9c7e:	461a      	mov	r2, r3
    9c80:	f64b 03c7 	movw	r3, #47303	; 0xb8c7
    9c84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c88:	7819      	ldrb	r1, [r3, #0]
    9c8a:	f24b 632c 	movw	r3, #46636	; 0xb62c
    9c8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c92:	5499      	strb	r1, [r3, r2]
    9c94:	f24b 732d 	movw	r3, #46893	; 0xb72d
    9c98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c9c:	781a      	ldrb	r2, [r3, #0]
    9c9e:	f64b 03c7 	movw	r3, #47303	; 0xb8c7
    9ca2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ca6:	781b      	ldrb	r3, [r3, #0]
    9ca8:	4413      	add	r3, r2
    9caa:	b2da      	uxtb	r2, r3
    9cac:	f24b 732d 	movw	r3, #46893	; 0xb72d
    9cb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cb4:	701a      	strb	r2, [r3, #0]
    9cb6:	f24b 732e 	movw	r3, #46894	; 0xb72e
    9cba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cbe:	781a      	ldrb	r2, [r3, #0]
    9cc0:	f24b 732d 	movw	r3, #46893	; 0xb72d
    9cc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cc8:	781b      	ldrb	r3, [r3, #0]
    9cca:	4413      	add	r3, r2
    9ccc:	b2da      	uxtb	r2, r3
    9cce:	f24b 732e 	movw	r3, #46894	; 0xb72e
    9cd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cd6:	701a      	strb	r2, [r3, #0]
    9cd8:	f24b 6329 	movw	r3, #46633	; 0xb629
    9cdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ce0:	781b      	ldrb	r3, [r3, #0]
    9ce2:	3301      	adds	r3, #1
    9ce4:	b2da      	uxtb	r2, r3
    9ce6:	f24b 6329 	movw	r3, #46633	; 0xb629
    9cea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cee:	701a      	strb	r2, [r3, #0]
    9cf0:	f24b 6329 	movw	r3, #46633	; 0xb629
    9cf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cf8:	781b      	ldrb	r3, [r3, #0]
    9cfa:	2bff      	cmp	r3, #255	; 0xff
    9cfc:	d105      	bne.n	9d0a <send_debug+0x39e>
    9cfe:	f24b 6329 	movw	r3, #46633	; 0xb629
    9d02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d06:	2200      	movs	r2, #0
    9d08:	701a      	strb	r2, [r3, #0]
    9d0a:	f24b 6329 	movw	r3, #46633	; 0xb629
    9d0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d12:	781b      	ldrb	r3, [r3, #0]
    9d14:	461a      	mov	r2, r3
    9d16:	f24b 6314 	movw	r3, #46612	; 0xb614
    9d1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d1e:	7819      	ldrb	r1, [r3, #0]
    9d20:	f24b 632c 	movw	r3, #46636	; 0xb62c
    9d24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d28:	5499      	strb	r1, [r3, r2]
    9d2a:	f24b 732d 	movw	r3, #46893	; 0xb72d
    9d2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d32:	781a      	ldrb	r2, [r3, #0]
    9d34:	f24b 6314 	movw	r3, #46612	; 0xb614
    9d38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d3c:	781b      	ldrb	r3, [r3, #0]
    9d3e:	4413      	add	r3, r2
    9d40:	b2da      	uxtb	r2, r3
    9d42:	f24b 732d 	movw	r3, #46893	; 0xb72d
    9d46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d4a:	701a      	strb	r2, [r3, #0]
    9d4c:	f24b 732e 	movw	r3, #46894	; 0xb72e
    9d50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d54:	781a      	ldrb	r2, [r3, #0]
    9d56:	f24b 732d 	movw	r3, #46893	; 0xb72d
    9d5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d5e:	781b      	ldrb	r3, [r3, #0]
    9d60:	4413      	add	r3, r2
    9d62:	b2da      	uxtb	r2, r3
    9d64:	f24b 732e 	movw	r3, #46894	; 0xb72e
    9d68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d6c:	701a      	strb	r2, [r3, #0]
    9d6e:	f24b 6329 	movw	r3, #46633	; 0xb629
    9d72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d76:	781b      	ldrb	r3, [r3, #0]
    9d78:	3301      	adds	r3, #1
    9d7a:	b2da      	uxtb	r2, r3
    9d7c:	f24b 6329 	movw	r3, #46633	; 0xb629
    9d80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d84:	701a      	strb	r2, [r3, #0]
    9d86:	f24b 6329 	movw	r3, #46633	; 0xb629
    9d8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d8e:	781b      	ldrb	r3, [r3, #0]
    9d90:	2bff      	cmp	r3, #255	; 0xff
    9d92:	d105      	bne.n	9da0 <send_debug+0x434>
    9d94:	f24b 6329 	movw	r3, #46633	; 0xb629
    9d98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d9c:	2200      	movs	r2, #0
    9d9e:	701a      	strb	r2, [r3, #0]
    9da0:	f24b 6329 	movw	r3, #46633	; 0xb629
    9da4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9da8:	781b      	ldrb	r3, [r3, #0]
    9daa:	461a      	mov	r2, r3
    9dac:	f24b 732d 	movw	r3, #46893	; 0xb72d
    9db0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9db4:	7819      	ldrb	r1, [r3, #0]
    9db6:	f24b 632c 	movw	r3, #46636	; 0xb62c
    9dba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dbe:	5499      	strb	r1, [r3, r2]
    9dc0:	f24b 6329 	movw	r3, #46633	; 0xb629
    9dc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dc8:	781b      	ldrb	r3, [r3, #0]
    9dca:	3301      	adds	r3, #1
    9dcc:	b2da      	uxtb	r2, r3
    9dce:	f24b 6329 	movw	r3, #46633	; 0xb629
    9dd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dd6:	701a      	strb	r2, [r3, #0]
    9dd8:	f24b 6329 	movw	r3, #46633	; 0xb629
    9ddc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9de0:	781b      	ldrb	r3, [r3, #0]
    9de2:	2bff      	cmp	r3, #255	; 0xff
    9de4:	d105      	bne.n	9df2 <send_debug+0x486>
    9de6:	f24b 6329 	movw	r3, #46633	; 0xb629
    9dea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dee:	2200      	movs	r2, #0
    9df0:	701a      	strb	r2, [r3, #0]
    9df2:	f24b 6329 	movw	r3, #46633	; 0xb629
    9df6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dfa:	781b      	ldrb	r3, [r3, #0]
    9dfc:	461a      	mov	r2, r3
    9dfe:	f24b 732e 	movw	r3, #46894	; 0xb72e
    9e02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e06:	7819      	ldrb	r1, [r3, #0]
    9e08:	f24b 632c 	movw	r3, #46636	; 0xb62c
    9e0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e10:	5499      	strb	r1, [r3, r2]
    9e12:	f24b 6329 	movw	r3, #46633	; 0xb629
    9e16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e1a:	781b      	ldrb	r3, [r3, #0]
    9e1c:	3301      	adds	r3, #1
    9e1e:	b2da      	uxtb	r2, r3
    9e20:	f24b 6329 	movw	r3, #46633	; 0xb629
    9e24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e28:	701a      	strb	r2, [r3, #0]
    9e2a:	f24b 6329 	movw	r3, #46633	; 0xb629
    9e2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e32:	781b      	ldrb	r3, [r3, #0]
    9e34:	2bff      	cmp	r3, #255	; 0xff
    9e36:	d105      	bne.n	9e44 <send_debug+0x4d8>
    9e38:	f24b 6329 	movw	r3, #46633	; 0xb629
    9e3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e40:	2200      	movs	r2, #0
    9e42:	701a      	strb	r2, [r3, #0]
    9e44:	f248 0339 	movw	r3, #32825	; 0x8039
    9e48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e4c:	781b      	ldrb	r3, [r3, #0]
    9e4e:	b2db      	uxtb	r3, r3
    9e50:	f003 0310 	and.w	r3, r3, #16
    9e54:	2b00      	cmp	r3, #0
    9e56:	d15a      	bne.n	9f0e <send_debug+0x5a2>
    9e58:	f24b 632a 	movw	r3, #46634	; 0xb62a
    9e5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e60:	781b      	ldrb	r3, [r3, #0]
    9e62:	b2db      	uxtb	r3, r3
    9e64:	461a      	mov	r2, r3
    9e66:	f24b 632c 	movw	r3, #46636	; 0xb62c
    9e6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e6e:	5c9a      	ldrb	r2, [r3, r2]
    9e70:	f24b 732b 	movw	r3, #46891	; 0xb72b
    9e74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e78:	701a      	strb	r2, [r3, #0]
    9e7a:	f24b 732c 	movw	r3, #46892	; 0xb72c
    9e7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e82:	2200      	movs	r2, #0
    9e84:	701a      	strb	r2, [r3, #0]
    9e86:	f24b 632a 	movw	r3, #46634	; 0xb62a
    9e8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e8e:	781b      	ldrb	r3, [r3, #0]
    9e90:	b2db      	uxtb	r3, r3
    9e92:	3301      	adds	r3, #1
    9e94:	b2da      	uxtb	r2, r3
    9e96:	f24b 632a 	movw	r3, #46634	; 0xb62a
    9e9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e9e:	701a      	strb	r2, [r3, #0]
    9ea0:	f24b 632a 	movw	r3, #46634	; 0xb62a
    9ea4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ea8:	781b      	ldrb	r3, [r3, #0]
    9eaa:	b2db      	uxtb	r3, r3
    9eac:	2bff      	cmp	r3, #255	; 0xff
    9eae:	d105      	bne.n	9ebc <send_debug+0x550>
    9eb0:	f24b 632a 	movw	r3, #46634	; 0xb62a
    9eb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9eb8:	2200      	movs	r2, #0
    9eba:	701a      	strb	r2, [r3, #0]
    9ebc:	f248 0338 	movw	r3, #32824	; 0x8038
    9ec0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ec4:	f248 0238 	movw	r2, #32824	; 0x8038
    9ec8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9ecc:	7812      	ldrb	r2, [r2, #0]
    9ece:	b2d2      	uxtb	r2, r2
    9ed0:	f042 0201 	orr.w	r2, r2, #1
    9ed4:	b2d2      	uxtb	r2, r2
    9ed6:	701a      	strb	r2, [r3, #0]
    9ed8:	f248 0339 	movw	r3, #32825	; 0x8039
    9edc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ee0:	f248 0239 	movw	r2, #32825	; 0x8039
    9ee4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9ee8:	7812      	ldrb	r2, [r2, #0]
    9eea:	b2d2      	uxtb	r2, r2
    9eec:	f042 0210 	orr.w	r2, r2, #16
    9ef0:	b2d2      	uxtb	r2, r2
    9ef2:	701a      	strb	r2, [r3, #0]
    9ef4:	e00b      	b.n	9f0e <send_debug+0x5a2>
    9ef6:	f24b 6328 	movw	r3, #46632	; 0xb628
    9efa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9efe:	781b      	ldrb	r3, [r3, #0]
    9f00:	3301      	adds	r3, #1
    9f02:	b2da      	uxtb	r2, r3
    9f04:	f24b 6328 	movw	r3, #46632	; 0xb628
    9f08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f0c:	701a      	strb	r2, [r3, #0]
}
    9f0e:	46bd      	mov	sp, r7
    9f10:	f85d 7b04 	ldr.w	r7, [sp], #4
    9f14:	4770      	bx	lr
    9f16:	bf00      	nop

00009f18 <send_nav_ref>:
void send_nav_ref(void){  //10000ms
    9f18:	b480      	push	{r7}
    9f1a:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 100 == 49) PERIODIC_SEND_NAVIGATION_REF();}
    9f1c:	f24b 6321 	movw	r3, #46625	; 0xb621
    9f20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f24:	781a      	ldrb	r2, [r3, #0]
    9f26:	f248 531f 	movw	r3, #34079	; 0x851f
    9f2a:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    9f2e:	fba3 1302 	umull	r1, r3, r3, r2
    9f32:	095b      	lsrs	r3, r3, #5
    9f34:	2164      	movs	r1, #100	; 0x64
    9f36:	fb01 f303 	mul.w	r3, r1, r3
    9f3a:	1ad3      	subs	r3, r2, r3
    9f3c:	b2db      	uxtb	r3, r3
    9f3e:	2b31      	cmp	r3, #49	; 0x31
    9f40:	f040 8395 	bne.w	a66e <send_nav_ref+0x756>
    9f44:	f24b 6329 	movw	r3, #46633	; 0xb629
    9f48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f4c:	781a      	ldrb	r2, [r3, #0]
    9f4e:	f24b 632a 	movw	r3, #46634	; 0xb62a
    9f52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f56:	781b      	ldrb	r3, [r3, #0]
    9f58:	b2db      	uxtb	r3, r3
    9f5a:	429a      	cmp	r2, r3
    9f5c:	d313      	bcc.n	9f86 <send_nav_ref+0x6e>
    9f5e:	f24b 632a 	movw	r3, #46634	; 0xb62a
    9f62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f66:	781b      	ldrb	r3, [r3, #0]
    9f68:	b2db      	uxtb	r3, r3
    9f6a:	461a      	mov	r2, r3
    9f6c:	f24b 6329 	movw	r3, #46633	; 0xb629
    9f70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f74:	781b      	ldrb	r3, [r3, #0]
    9f76:	1ad3      	subs	r3, r2, r3
    9f78:	33ff      	adds	r3, #255	; 0xff
    9f7a:	2b0c      	cmp	r3, #12
    9f7c:	bfd4      	ite	le
    9f7e:	2300      	movle	r3, #0
    9f80:	2301      	movgt	r3, #1
    9f82:	b2db      	uxtb	r3, r3
    9f84:	e011      	b.n	9faa <send_nav_ref+0x92>
    9f86:	f24b 632a 	movw	r3, #46634	; 0xb62a
    9f8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f8e:	781b      	ldrb	r3, [r3, #0]
    9f90:	b2db      	uxtb	r3, r3
    9f92:	461a      	mov	r2, r3
    9f94:	f24b 6329 	movw	r3, #46633	; 0xb629
    9f98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f9c:	781b      	ldrb	r3, [r3, #0]
    9f9e:	1ad3      	subs	r3, r2, r3
    9fa0:	2b0c      	cmp	r3, #12
    9fa2:	bfd4      	ite	le
    9fa4:	2300      	movle	r3, #0
    9fa6:	2301      	movgt	r3, #1
    9fa8:	b2db      	uxtb	r3, r3
    9faa:	2b00      	cmp	r3, #0
    9fac:	f000 8353 	beq.w	a656 <send_nav_ref+0x73e>
    9fb0:	f24b 6329 	movw	r3, #46633	; 0xb629
    9fb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fb8:	781b      	ldrb	r3, [r3, #0]
    9fba:	461a      	mov	r2, r3
    9fbc:	f24b 632c 	movw	r3, #46636	; 0xb62c
    9fc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fc4:	2105      	movs	r1, #5
    9fc6:	5499      	strb	r1, [r3, r2]
    9fc8:	f24b 6329 	movw	r3, #46633	; 0xb629
    9fcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fd0:	781b      	ldrb	r3, [r3, #0]
    9fd2:	3301      	adds	r3, #1
    9fd4:	b2da      	uxtb	r2, r3
    9fd6:	f24b 6329 	movw	r3, #46633	; 0xb629
    9fda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fde:	701a      	strb	r2, [r3, #0]
    9fe0:	f24b 6329 	movw	r3, #46633	; 0xb629
    9fe4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fe8:	781b      	ldrb	r3, [r3, #0]
    9fea:	2bff      	cmp	r3, #255	; 0xff
    9fec:	d105      	bne.n	9ffa <send_nav_ref+0xe2>
    9fee:	f24b 6329 	movw	r3, #46633	; 0xb629
    9ff2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ff6:	2200      	movs	r2, #0
    9ff8:	701a      	strb	r2, [r3, #0]
    9ffa:	f24b 6329 	movw	r3, #46633	; 0xb629
    9ffe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a002:	781b      	ldrb	r3, [r3, #0]
    a004:	461a      	mov	r2, r3
    a006:	f24b 632c 	movw	r3, #46636	; 0xb62c
    a00a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a00e:	2109      	movs	r1, #9
    a010:	5499      	strb	r1, [r3, r2]
    a012:	f24b 6329 	movw	r3, #46633	; 0xb629
    a016:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a01a:	781b      	ldrb	r3, [r3, #0]
    a01c:	3301      	adds	r3, #1
    a01e:	b2da      	uxtb	r2, r3
    a020:	f24b 6329 	movw	r3, #46633	; 0xb629
    a024:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a028:	701a      	strb	r2, [r3, #0]
    a02a:	f24b 6329 	movw	r3, #46633	; 0xb629
    a02e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a032:	781b      	ldrb	r3, [r3, #0]
    a034:	2bff      	cmp	r3, #255	; 0xff
    a036:	d105      	bne.n	a044 <send_nav_ref+0x12c>
    a038:	f24b 6329 	movw	r3, #46633	; 0xb629
    a03c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a040:	2200      	movs	r2, #0
    a042:	701a      	strb	r2, [r3, #0]
    a044:	f24b 732d 	movw	r3, #46893	; 0xb72d
    a048:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a04c:	2209      	movs	r2, #9
    a04e:	701a      	strb	r2, [r3, #0]
    a050:	f24b 732e 	movw	r3, #46894	; 0xb72e
    a054:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a058:	2209      	movs	r2, #9
    a05a:	701a      	strb	r2, [r3, #0]
    a05c:	f24b 6329 	movw	r3, #46633	; 0xb629
    a060:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a064:	781b      	ldrb	r3, [r3, #0]
    a066:	461a      	mov	r2, r3
    a068:	f643 0388 	movw	r3, #14472	; 0x3888
    a06c:	f2c0 0301 	movt	r3, #1
    a070:	7819      	ldrb	r1, [r3, #0]
    a072:	f24b 632c 	movw	r3, #46636	; 0xb62c
    a076:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a07a:	5499      	strb	r1, [r3, r2]
    a07c:	f643 0388 	movw	r3, #14472	; 0x3888
    a080:	f2c0 0301 	movt	r3, #1
    a084:	781a      	ldrb	r2, [r3, #0]
    a086:	f24b 732d 	movw	r3, #46893	; 0xb72d
    a08a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a08e:	781b      	ldrb	r3, [r3, #0]
    a090:	4413      	add	r3, r2
    a092:	b2da      	uxtb	r2, r3
    a094:	f24b 732d 	movw	r3, #46893	; 0xb72d
    a098:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a09c:	701a      	strb	r2, [r3, #0]
    a09e:	f24b 732e 	movw	r3, #46894	; 0xb72e
    a0a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0a6:	781a      	ldrb	r2, [r3, #0]
    a0a8:	f24b 732d 	movw	r3, #46893	; 0xb72d
    a0ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0b0:	781b      	ldrb	r3, [r3, #0]
    a0b2:	4413      	add	r3, r2
    a0b4:	b2da      	uxtb	r2, r3
    a0b6:	f24b 732e 	movw	r3, #46894	; 0xb72e
    a0ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0be:	701a      	strb	r2, [r3, #0]
    a0c0:	f24b 6329 	movw	r3, #46633	; 0xb629
    a0c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0c8:	781b      	ldrb	r3, [r3, #0]
    a0ca:	3301      	adds	r3, #1
    a0cc:	b2da      	uxtb	r2, r3
    a0ce:	f24b 6329 	movw	r3, #46633	; 0xb629
    a0d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0d6:	701a      	strb	r2, [r3, #0]
    a0d8:	f24b 6329 	movw	r3, #46633	; 0xb629
    a0dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0e0:	781b      	ldrb	r3, [r3, #0]
    a0e2:	2bff      	cmp	r3, #255	; 0xff
    a0e4:	d105      	bne.n	a0f2 <send_nav_ref+0x1da>
    a0e6:	f24b 6329 	movw	r3, #46633	; 0xb629
    a0ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0ee:	2200      	movs	r2, #0
    a0f0:	701a      	strb	r2, [r3, #0]
    a0f2:	f24b 6329 	movw	r3, #46633	; 0xb629
    a0f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0fa:	781b      	ldrb	r3, [r3, #0]
    a0fc:	461a      	mov	r2, r3
    a0fe:	f643 0388 	movw	r3, #14472	; 0x3888
    a102:	f2c0 0301 	movt	r3, #1
    a106:	7859      	ldrb	r1, [r3, #1]
    a108:	f24b 632c 	movw	r3, #46636	; 0xb62c
    a10c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a110:	5499      	strb	r1, [r3, r2]
    a112:	4bd2      	ldr	r3, [pc, #840]	; (a45c <send_nav_ref+0x544>)
    a114:	781a      	ldrb	r2, [r3, #0]
    a116:	f24b 732d 	movw	r3, #46893	; 0xb72d
    a11a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a11e:	781b      	ldrb	r3, [r3, #0]
    a120:	4413      	add	r3, r2
    a122:	b2da      	uxtb	r2, r3
    a124:	f24b 732d 	movw	r3, #46893	; 0xb72d
    a128:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a12c:	701a      	strb	r2, [r3, #0]
    a12e:	f24b 732e 	movw	r3, #46894	; 0xb72e
    a132:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a136:	781a      	ldrb	r2, [r3, #0]
    a138:	f24b 732d 	movw	r3, #46893	; 0xb72d
    a13c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a140:	781b      	ldrb	r3, [r3, #0]
    a142:	4413      	add	r3, r2
    a144:	b2da      	uxtb	r2, r3
    a146:	f24b 732e 	movw	r3, #46894	; 0xb72e
    a14a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a14e:	701a      	strb	r2, [r3, #0]
    a150:	f24b 6329 	movw	r3, #46633	; 0xb629
    a154:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a158:	781b      	ldrb	r3, [r3, #0]
    a15a:	3301      	adds	r3, #1
    a15c:	b2da      	uxtb	r2, r3
    a15e:	f24b 6329 	movw	r3, #46633	; 0xb629
    a162:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a166:	701a      	strb	r2, [r3, #0]
    a168:	f24b 6329 	movw	r3, #46633	; 0xb629
    a16c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a170:	781b      	ldrb	r3, [r3, #0]
    a172:	2bff      	cmp	r3, #255	; 0xff
    a174:	d105      	bne.n	a182 <send_nav_ref+0x26a>
    a176:	f24b 6329 	movw	r3, #46633	; 0xb629
    a17a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a17e:	2200      	movs	r2, #0
    a180:	701a      	strb	r2, [r3, #0]
    a182:	f24b 6329 	movw	r3, #46633	; 0xb629
    a186:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a18a:	781b      	ldrb	r3, [r3, #0]
    a18c:	461a      	mov	r2, r3
    a18e:	f643 0388 	movw	r3, #14472	; 0x3888
    a192:	f2c0 0301 	movt	r3, #1
    a196:	7899      	ldrb	r1, [r3, #2]
    a198:	f24b 632c 	movw	r3, #46636	; 0xb62c
    a19c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1a0:	5499      	strb	r1, [r3, r2]
    a1a2:	4baf      	ldr	r3, [pc, #700]	; (a460 <send_nav_ref+0x548>)
    a1a4:	781a      	ldrb	r2, [r3, #0]
    a1a6:	f24b 732d 	movw	r3, #46893	; 0xb72d
    a1aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1ae:	781b      	ldrb	r3, [r3, #0]
    a1b0:	4413      	add	r3, r2
    a1b2:	b2da      	uxtb	r2, r3
    a1b4:	f24b 732d 	movw	r3, #46893	; 0xb72d
    a1b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1bc:	701a      	strb	r2, [r3, #0]
    a1be:	f24b 732e 	movw	r3, #46894	; 0xb72e
    a1c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1c6:	781a      	ldrb	r2, [r3, #0]
    a1c8:	f24b 732d 	movw	r3, #46893	; 0xb72d
    a1cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1d0:	781b      	ldrb	r3, [r3, #0]
    a1d2:	4413      	add	r3, r2
    a1d4:	b2da      	uxtb	r2, r3
    a1d6:	f24b 732e 	movw	r3, #46894	; 0xb72e
    a1da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1de:	701a      	strb	r2, [r3, #0]
    a1e0:	f24b 6329 	movw	r3, #46633	; 0xb629
    a1e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1e8:	781b      	ldrb	r3, [r3, #0]
    a1ea:	3301      	adds	r3, #1
    a1ec:	b2da      	uxtb	r2, r3
    a1ee:	f24b 6329 	movw	r3, #46633	; 0xb629
    a1f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1f6:	701a      	strb	r2, [r3, #0]
    a1f8:	f24b 6329 	movw	r3, #46633	; 0xb629
    a1fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a200:	781b      	ldrb	r3, [r3, #0]
    a202:	2bff      	cmp	r3, #255	; 0xff
    a204:	d105      	bne.n	a212 <send_nav_ref+0x2fa>
    a206:	f24b 6329 	movw	r3, #46633	; 0xb629
    a20a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a20e:	2200      	movs	r2, #0
    a210:	701a      	strb	r2, [r3, #0]
    a212:	f24b 6329 	movw	r3, #46633	; 0xb629
    a216:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a21a:	781b      	ldrb	r3, [r3, #0]
    a21c:	461a      	mov	r2, r3
    a21e:	f643 0388 	movw	r3, #14472	; 0x3888
    a222:	f2c0 0301 	movt	r3, #1
    a226:	78d9      	ldrb	r1, [r3, #3]
    a228:	f24b 632c 	movw	r3, #46636	; 0xb62c
    a22c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a230:	5499      	strb	r1, [r3, r2]
    a232:	4b8c      	ldr	r3, [pc, #560]	; (a464 <send_nav_ref+0x54c>)
    a234:	781a      	ldrb	r2, [r3, #0]
    a236:	f24b 732d 	movw	r3, #46893	; 0xb72d
    a23a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a23e:	781b      	ldrb	r3, [r3, #0]
    a240:	4413      	add	r3, r2
    a242:	b2da      	uxtb	r2, r3
    a244:	f24b 732d 	movw	r3, #46893	; 0xb72d
    a248:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a24c:	701a      	strb	r2, [r3, #0]
    a24e:	f24b 732e 	movw	r3, #46894	; 0xb72e
    a252:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a256:	781a      	ldrb	r2, [r3, #0]
    a258:	f24b 732d 	movw	r3, #46893	; 0xb72d
    a25c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a260:	781b      	ldrb	r3, [r3, #0]
    a262:	4413      	add	r3, r2
    a264:	b2da      	uxtb	r2, r3
    a266:	f24b 732e 	movw	r3, #46894	; 0xb72e
    a26a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a26e:	701a      	strb	r2, [r3, #0]
    a270:	f24b 6329 	movw	r3, #46633	; 0xb629
    a274:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a278:	781b      	ldrb	r3, [r3, #0]
    a27a:	3301      	adds	r3, #1
    a27c:	b2da      	uxtb	r2, r3
    a27e:	f24b 6329 	movw	r3, #46633	; 0xb629
    a282:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a286:	701a      	strb	r2, [r3, #0]
    a288:	f24b 6329 	movw	r3, #46633	; 0xb629
    a28c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a290:	781b      	ldrb	r3, [r3, #0]
    a292:	2bff      	cmp	r3, #255	; 0xff
    a294:	d105      	bne.n	a2a2 <send_nav_ref+0x38a>
    a296:	f24b 6329 	movw	r3, #46633	; 0xb629
    a29a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a29e:	2200      	movs	r2, #0
    a2a0:	701a      	strb	r2, [r3, #0]
    a2a2:	f24b 6329 	movw	r3, #46633	; 0xb629
    a2a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2aa:	781b      	ldrb	r3, [r3, #0]
    a2ac:	461a      	mov	r2, r3
    a2ae:	f643 038c 	movw	r3, #14476	; 0x388c
    a2b2:	f2c0 0301 	movt	r3, #1
    a2b6:	7819      	ldrb	r1, [r3, #0]
    a2b8:	f24b 632c 	movw	r3, #46636	; 0xb62c
    a2bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2c0:	5499      	strb	r1, [r3, r2]
    a2c2:	f643 038c 	movw	r3, #14476	; 0x388c
    a2c6:	f2c0 0301 	movt	r3, #1
    a2ca:	781a      	ldrb	r2, [r3, #0]
    a2cc:	f24b 732d 	movw	r3, #46893	; 0xb72d
    a2d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2d4:	781b      	ldrb	r3, [r3, #0]
    a2d6:	4413      	add	r3, r2
    a2d8:	b2da      	uxtb	r2, r3
    a2da:	f24b 732d 	movw	r3, #46893	; 0xb72d
    a2de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2e2:	701a      	strb	r2, [r3, #0]
    a2e4:	f24b 732e 	movw	r3, #46894	; 0xb72e
    a2e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2ec:	781a      	ldrb	r2, [r3, #0]
    a2ee:	f24b 732d 	movw	r3, #46893	; 0xb72d
    a2f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2f6:	781b      	ldrb	r3, [r3, #0]
    a2f8:	4413      	add	r3, r2
    a2fa:	b2da      	uxtb	r2, r3
    a2fc:	f24b 732e 	movw	r3, #46894	; 0xb72e
    a300:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a304:	701a      	strb	r2, [r3, #0]
    a306:	f24b 6329 	movw	r3, #46633	; 0xb629
    a30a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a30e:	781b      	ldrb	r3, [r3, #0]
    a310:	3301      	adds	r3, #1
    a312:	b2da      	uxtb	r2, r3
    a314:	f24b 6329 	movw	r3, #46633	; 0xb629
    a318:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a31c:	701a      	strb	r2, [r3, #0]
    a31e:	f24b 6329 	movw	r3, #46633	; 0xb629
    a322:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a326:	781b      	ldrb	r3, [r3, #0]
    a328:	2bff      	cmp	r3, #255	; 0xff
    a32a:	d105      	bne.n	a338 <send_nav_ref+0x420>
    a32c:	f24b 6329 	movw	r3, #46633	; 0xb629
    a330:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a334:	2200      	movs	r2, #0
    a336:	701a      	strb	r2, [r3, #0]
    a338:	f24b 6329 	movw	r3, #46633	; 0xb629
    a33c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a340:	781b      	ldrb	r3, [r3, #0]
    a342:	461a      	mov	r2, r3
    a344:	f643 038c 	movw	r3, #14476	; 0x388c
    a348:	f2c0 0301 	movt	r3, #1
    a34c:	7859      	ldrb	r1, [r3, #1]
    a34e:	f24b 632c 	movw	r3, #46636	; 0xb62c
    a352:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a356:	5499      	strb	r1, [r3, r2]
    a358:	4b43      	ldr	r3, [pc, #268]	; (a468 <send_nav_ref+0x550>)
    a35a:	781a      	ldrb	r2, [r3, #0]
    a35c:	f24b 732d 	movw	r3, #46893	; 0xb72d
    a360:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a364:	781b      	ldrb	r3, [r3, #0]
    a366:	4413      	add	r3, r2
    a368:	b2da      	uxtb	r2, r3
    a36a:	f24b 732d 	movw	r3, #46893	; 0xb72d
    a36e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a372:	701a      	strb	r2, [r3, #0]
    a374:	f24b 732e 	movw	r3, #46894	; 0xb72e
    a378:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a37c:	781a      	ldrb	r2, [r3, #0]
    a37e:	f24b 732d 	movw	r3, #46893	; 0xb72d
    a382:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a386:	781b      	ldrb	r3, [r3, #0]
    a388:	4413      	add	r3, r2
    a38a:	b2da      	uxtb	r2, r3
    a38c:	f24b 732e 	movw	r3, #46894	; 0xb72e
    a390:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a394:	701a      	strb	r2, [r3, #0]
    a396:	f24b 6329 	movw	r3, #46633	; 0xb629
    a39a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a39e:	781b      	ldrb	r3, [r3, #0]
    a3a0:	3301      	adds	r3, #1
    a3a2:	b2da      	uxtb	r2, r3
    a3a4:	f24b 6329 	movw	r3, #46633	; 0xb629
    a3a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3ac:	701a      	strb	r2, [r3, #0]
    a3ae:	f24b 6329 	movw	r3, #46633	; 0xb629
    a3b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3b6:	781b      	ldrb	r3, [r3, #0]
    a3b8:	2bff      	cmp	r3, #255	; 0xff
    a3ba:	d105      	bne.n	a3c8 <send_nav_ref+0x4b0>
    a3bc:	f24b 6329 	movw	r3, #46633	; 0xb629
    a3c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3c4:	2200      	movs	r2, #0
    a3c6:	701a      	strb	r2, [r3, #0]
    a3c8:	f24b 6329 	movw	r3, #46633	; 0xb629
    a3cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3d0:	781b      	ldrb	r3, [r3, #0]
    a3d2:	461a      	mov	r2, r3
    a3d4:	f643 038c 	movw	r3, #14476	; 0x388c
    a3d8:	f2c0 0301 	movt	r3, #1
    a3dc:	7899      	ldrb	r1, [r3, #2]
    a3de:	f24b 632c 	movw	r3, #46636	; 0xb62c
    a3e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3e6:	5499      	strb	r1, [r3, r2]
    a3e8:	4b20      	ldr	r3, [pc, #128]	; (a46c <send_nav_ref+0x554>)
    a3ea:	781a      	ldrb	r2, [r3, #0]
    a3ec:	f24b 732d 	movw	r3, #46893	; 0xb72d
    a3f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3f4:	781b      	ldrb	r3, [r3, #0]
    a3f6:	4413      	add	r3, r2
    a3f8:	b2da      	uxtb	r2, r3
    a3fa:	f24b 732d 	movw	r3, #46893	; 0xb72d
    a3fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a402:	701a      	strb	r2, [r3, #0]
    a404:	f24b 732e 	movw	r3, #46894	; 0xb72e
    a408:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a40c:	781a      	ldrb	r2, [r3, #0]
    a40e:	f24b 732d 	movw	r3, #46893	; 0xb72d
    a412:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a416:	781b      	ldrb	r3, [r3, #0]
    a418:	4413      	add	r3, r2
    a41a:	b2da      	uxtb	r2, r3
    a41c:	f24b 732e 	movw	r3, #46894	; 0xb72e
    a420:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a424:	701a      	strb	r2, [r3, #0]
    a426:	f24b 6329 	movw	r3, #46633	; 0xb629
    a42a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a42e:	781b      	ldrb	r3, [r3, #0]
    a430:	3301      	adds	r3, #1
    a432:	b2da      	uxtb	r2, r3
    a434:	f24b 6329 	movw	r3, #46633	; 0xb629
    a438:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a43c:	701a      	strb	r2, [r3, #0]
    a43e:	f24b 6329 	movw	r3, #46633	; 0xb629
    a442:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a446:	781b      	ldrb	r3, [r3, #0]
    a448:	2bff      	cmp	r3, #255	; 0xff
    a44a:	d111      	bne.n	a470 <send_nav_ref+0x558>
    a44c:	f24b 6329 	movw	r3, #46633	; 0xb629
    a450:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a454:	2200      	movs	r2, #0
    a456:	701a      	strb	r2, [r3, #0]
    a458:	e00a      	b.n	a470 <send_nav_ref+0x558>
    a45a:	bf00      	nop
    a45c:	00013889 	.word	0x00013889
    a460:	0001388a 	.word	0x0001388a
    a464:	0001388b 	.word	0x0001388b
    a468:	0001388d 	.word	0x0001388d
    a46c:	0001388e 	.word	0x0001388e
    a470:	f24b 6329 	movw	r3, #46633	; 0xb629
    a474:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a478:	781b      	ldrb	r3, [r3, #0]
    a47a:	461a      	mov	r2, r3
    a47c:	f643 038c 	movw	r3, #14476	; 0x388c
    a480:	f2c0 0301 	movt	r3, #1
    a484:	78d9      	ldrb	r1, [r3, #3]
    a486:	f24b 632c 	movw	r3, #46636	; 0xb62c
    a48a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a48e:	5499      	strb	r1, [r3, r2]
    a490:	4b79      	ldr	r3, [pc, #484]	; (a678 <send_nav_ref+0x760>)
    a492:	781a      	ldrb	r2, [r3, #0]
    a494:	f24b 732d 	movw	r3, #46893	; 0xb72d
    a498:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a49c:	781b      	ldrb	r3, [r3, #0]
    a49e:	4413      	add	r3, r2
    a4a0:	b2da      	uxtb	r2, r3
    a4a2:	f24b 732d 	movw	r3, #46893	; 0xb72d
    a4a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4aa:	701a      	strb	r2, [r3, #0]
    a4ac:	f24b 732e 	movw	r3, #46894	; 0xb72e
    a4b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4b4:	781a      	ldrb	r2, [r3, #0]
    a4b6:	f24b 732d 	movw	r3, #46893	; 0xb72d
    a4ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4be:	781b      	ldrb	r3, [r3, #0]
    a4c0:	4413      	add	r3, r2
    a4c2:	b2da      	uxtb	r2, r3
    a4c4:	f24b 732e 	movw	r3, #46894	; 0xb72e
    a4c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4cc:	701a      	strb	r2, [r3, #0]
    a4ce:	f24b 6329 	movw	r3, #46633	; 0xb629
    a4d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4d6:	781b      	ldrb	r3, [r3, #0]
    a4d8:	3301      	adds	r3, #1
    a4da:	b2da      	uxtb	r2, r3
    a4dc:	f24b 6329 	movw	r3, #46633	; 0xb629
    a4e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4e4:	701a      	strb	r2, [r3, #0]
    a4e6:	f24b 6329 	movw	r3, #46633	; 0xb629
    a4ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4ee:	781b      	ldrb	r3, [r3, #0]
    a4f0:	2bff      	cmp	r3, #255	; 0xff
    a4f2:	d105      	bne.n	a500 <send_nav_ref+0x5e8>
    a4f4:	f24b 6329 	movw	r3, #46633	; 0xb629
    a4f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4fc:	2200      	movs	r2, #0
    a4fe:	701a      	strb	r2, [r3, #0]
    a500:	f24b 6329 	movw	r3, #46633	; 0xb629
    a504:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a508:	781b      	ldrb	r3, [r3, #0]
    a50a:	461a      	mov	r2, r3
    a50c:	f24b 732d 	movw	r3, #46893	; 0xb72d
    a510:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a514:	7819      	ldrb	r1, [r3, #0]
    a516:	f24b 632c 	movw	r3, #46636	; 0xb62c
    a51a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a51e:	5499      	strb	r1, [r3, r2]
    a520:	f24b 6329 	movw	r3, #46633	; 0xb629
    a524:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a528:	781b      	ldrb	r3, [r3, #0]
    a52a:	3301      	adds	r3, #1
    a52c:	b2da      	uxtb	r2, r3
    a52e:	f24b 6329 	movw	r3, #46633	; 0xb629
    a532:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a536:	701a      	strb	r2, [r3, #0]
    a538:	f24b 6329 	movw	r3, #46633	; 0xb629
    a53c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a540:	781b      	ldrb	r3, [r3, #0]
    a542:	2bff      	cmp	r3, #255	; 0xff
    a544:	d105      	bne.n	a552 <send_nav_ref+0x63a>
    a546:	f24b 6329 	movw	r3, #46633	; 0xb629
    a54a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a54e:	2200      	movs	r2, #0
    a550:	701a      	strb	r2, [r3, #0]
    a552:	f24b 6329 	movw	r3, #46633	; 0xb629
    a556:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a55a:	781b      	ldrb	r3, [r3, #0]
    a55c:	461a      	mov	r2, r3
    a55e:	f24b 732e 	movw	r3, #46894	; 0xb72e
    a562:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a566:	7819      	ldrb	r1, [r3, #0]
    a568:	f24b 632c 	movw	r3, #46636	; 0xb62c
    a56c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a570:	5499      	strb	r1, [r3, r2]
    a572:	f24b 6329 	movw	r3, #46633	; 0xb629
    a576:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a57a:	781b      	ldrb	r3, [r3, #0]
    a57c:	3301      	adds	r3, #1
    a57e:	b2da      	uxtb	r2, r3
    a580:	f24b 6329 	movw	r3, #46633	; 0xb629
    a584:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a588:	701a      	strb	r2, [r3, #0]
    a58a:	f24b 6329 	movw	r3, #46633	; 0xb629
    a58e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a592:	781b      	ldrb	r3, [r3, #0]
    a594:	2bff      	cmp	r3, #255	; 0xff
    a596:	d105      	bne.n	a5a4 <send_nav_ref+0x68c>
    a598:	f24b 6329 	movw	r3, #46633	; 0xb629
    a59c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5a0:	2200      	movs	r2, #0
    a5a2:	701a      	strb	r2, [r3, #0]
    a5a4:	f248 0339 	movw	r3, #32825	; 0x8039
    a5a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5ac:	781b      	ldrb	r3, [r3, #0]
    a5ae:	b2db      	uxtb	r3, r3
    a5b0:	f003 0310 	and.w	r3, r3, #16
    a5b4:	2b00      	cmp	r3, #0
    a5b6:	d15a      	bne.n	a66e <send_nav_ref+0x756>
    a5b8:	f24b 632a 	movw	r3, #46634	; 0xb62a
    a5bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5c0:	781b      	ldrb	r3, [r3, #0]
    a5c2:	b2db      	uxtb	r3, r3
    a5c4:	461a      	mov	r2, r3
    a5c6:	f24b 632c 	movw	r3, #46636	; 0xb62c
    a5ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5ce:	5c9a      	ldrb	r2, [r3, r2]
    a5d0:	f24b 732b 	movw	r3, #46891	; 0xb72b
    a5d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5d8:	701a      	strb	r2, [r3, #0]
    a5da:	f24b 732c 	movw	r3, #46892	; 0xb72c
    a5de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5e2:	2200      	movs	r2, #0
    a5e4:	701a      	strb	r2, [r3, #0]
    a5e6:	f24b 632a 	movw	r3, #46634	; 0xb62a
    a5ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5ee:	781b      	ldrb	r3, [r3, #0]
    a5f0:	b2db      	uxtb	r3, r3
    a5f2:	3301      	adds	r3, #1
    a5f4:	b2da      	uxtb	r2, r3
    a5f6:	f24b 632a 	movw	r3, #46634	; 0xb62a
    a5fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5fe:	701a      	strb	r2, [r3, #0]
    a600:	f24b 632a 	movw	r3, #46634	; 0xb62a
    a604:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a608:	781b      	ldrb	r3, [r3, #0]
    a60a:	b2db      	uxtb	r3, r3
    a60c:	2bff      	cmp	r3, #255	; 0xff
    a60e:	d105      	bne.n	a61c <send_nav_ref+0x704>
    a610:	f24b 632a 	movw	r3, #46634	; 0xb62a
    a614:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a618:	2200      	movs	r2, #0
    a61a:	701a      	strb	r2, [r3, #0]
    a61c:	f248 0338 	movw	r3, #32824	; 0x8038
    a620:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a624:	f248 0238 	movw	r2, #32824	; 0x8038
    a628:	f2c2 0200 	movt	r2, #8192	; 0x2000
    a62c:	7812      	ldrb	r2, [r2, #0]
    a62e:	b2d2      	uxtb	r2, r2
    a630:	f042 0201 	orr.w	r2, r2, #1
    a634:	b2d2      	uxtb	r2, r2
    a636:	701a      	strb	r2, [r3, #0]
    a638:	f248 0339 	movw	r3, #32825	; 0x8039
    a63c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a640:	f248 0239 	movw	r2, #32825	; 0x8039
    a644:	f2c2 0200 	movt	r2, #8192	; 0x2000
    a648:	7812      	ldrb	r2, [r2, #0]
    a64a:	b2d2      	uxtb	r2, r2
    a64c:	f042 0210 	orr.w	r2, r2, #16
    a650:	b2d2      	uxtb	r2, r2
    a652:	701a      	strb	r2, [r3, #0]
    a654:	e00b      	b.n	a66e <send_nav_ref+0x756>
    a656:	f24b 6328 	movw	r3, #46632	; 0xb628
    a65a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a65e:	781b      	ldrb	r3, [r3, #0]
    a660:	3301      	adds	r3, #1
    a662:	b2da      	uxtb	r2, r3
    a664:	f24b 6328 	movw	r3, #46632	; 0xb628
    a668:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a66c:	701a      	strb	r2, [r3, #0]
  //vPrintString("S_13 reporting_task end!\n\r");
}
    a66e:	46bd      	mov	sp, r7
    a670:	f85d 7b04 	ldr.w	r7, [sp], #4
    a674:	4770      	bx	lr
    a676:	bf00      	nop
    a678:	0001388f 	.word	0x0001388f

0000a67c <reporting_task>:

void reporting_task()
{
    a67c:	b580      	push	{r7, lr}
    a67e:	af00      	add	r7, sp, #0
    send_boot();
    a680:	f7fa faf8 	bl	4c74 <send_boot>
    send_attitude();
    a684:	f7fb fac6 	bl	5c14 <send_attitude>
    send_adc();
    a688:	f7fb ffb8 	bl	65fc <send_adc>
    send_settings();
    a68c:	f7fc fa3e 	bl	6b0c <send_settings>
    send_desired();
    a690:	f7fc fe40 	bl	7314 <send_desired>
    send_bat();
    a694:	f7fd fd6e 	bl	8174 <send_bat>
    send_climb();
    a698:	f7fe f922 	bl	88e0 <send_climb>
    send_mode();
    a69c:	f7fe fe92 	bl	93c4 <send_mode>
    send_debug();
    a6a0:	f7ff f964 	bl	996c <send_debug>
    send_nav_ref();
    a6a4:	f7ff fc38 	bl	9f18 <send_nav_ref>
}
    a6a8:	bd80      	pop	{r7, pc}
    a6aa:	bf00      	nop

0000a6ac <inflight_calib_mode_update>:

/** \fn inline uint8_t inflight_calib_mode_update ( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
inline uint8_t inflight_calib_mode_update ( void ) {
    a6ac:	b480      	push	{r7}
    a6ae:	b083      	sub	sp, #12
    a6b0:	af00      	add	r7, sp, #0
  ModeUpdate(inflight_calib_mode, IF_CALIB_MODE_OF_PULSE(from_fbw.channels[RADIO_CALIB]));
    a6b2:	f24b 7330 	movw	r3, #46896	; 0xb730
    a6b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6ba:	8a1b      	ldrh	r3, [r3, #16]
    a6bc:	b21b      	sxth	r3, r3
    a6be:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
    a6c2:	db0d      	blt.n	a6e0 <inflight_calib_mode_update+0x34>
    a6c4:	f24b 7330 	movw	r3, #46896	; 0xb730
    a6c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6cc:	8a1b      	ldrh	r3, [r3, #16]
    a6ce:	b21a      	sxth	r2, r3
    a6d0:	f640 437f 	movw	r3, #3199	; 0xc7f
    a6d4:	429a      	cmp	r2, r3
    a6d6:	bfd4      	ite	le
    a6d8:	2300      	movle	r3, #0
    a6da:	2301      	movgt	r3, #1
    a6dc:	b2db      	uxtb	r3, r3
    a6de:	e000      	b.n	a6e2 <inflight_calib_mode_update+0x36>
    a6e0:	2302      	movs	r3, #2
    a6e2:	71fb      	strb	r3, [r7, #7]
    a6e4:	f64b 433c 	movw	r3, #48188	; 0xbc3c
    a6e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6ec:	781b      	ldrb	r3, [r3, #0]
    a6ee:	79fa      	ldrb	r2, [r7, #7]
    a6f0:	429a      	cmp	r2, r3
    a6f2:	d007      	beq.n	a704 <inflight_calib_mode_update+0x58>
    a6f4:	f64b 433c 	movw	r3, #48188	; 0xbc3c
    a6f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6fc:	79fa      	ldrb	r2, [r7, #7]
    a6fe:	701a      	strb	r2, [r3, #0]
    a700:	2301      	movs	r3, #1
    a702:	e000      	b.n	a706 <inflight_calib_mode_update+0x5a>
    a704:	2300      	movs	r3, #0
}
    a706:	4618      	mov	r0, r3
    a708:	370c      	adds	r7, #12
    a70a:	46bd      	mov	sp, r7
    a70c:	f85d 7b04 	ldr.w	r7, [sp], #4
    a710:	4770      	bx	lr
    a712:	bf00      	nop

0000a714 <radio_control_task>:


/** \fn inline void radio_control_task( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
void radio_control_task( void ) {
    a714:	b580      	push	{r7, lr}
    a716:	b082      	sub	sp, #8
    a718:	af00      	add	r7, sp, #0
  bool_t calib_mode_changed;
	//vPrintString("S_3 radio_control_task start! \n\r"); //SunnyBeike
    //add by wanbo
    link_fbw_receive_valid = 1;
    a71a:	f24b 735e 	movw	r3, #46942	; 0xb75e
    a71e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a722:	2201      	movs	r2, #1
    a724:	701a      	strb	r2, [r3, #0]
  if (link_fbw_receive_valid) {
    a726:	f24b 735e 	movw	r3, #46942	; 0xb75e
    a72a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a72e:	781b      	ldrb	r3, [r3, #0]
    a730:	b2db      	uxtb	r3, r3
    a732:	2b00      	cmp	r3, #0
    a734:	f000 80df 	beq.w	a8f6 <radio_control_task+0x1e2>
    uint8_t mode_changed = FALSE;
    a738:	2300      	movs	r3, #0
    a73a:	71fb      	strb	r3, [r7, #7]
    copy_from_to_fbw();
    a73c:	f7fa fa84 	bl	4c48 <copy_from_to_fbw>
    //if ((bit_is_set(from_fbw.status, RADIO_REALLY_LOST) && (pprz_mode == PPRZ_MODE_AUTO1 || pprz_mode == PPRZ_MODE_MANUAL)) || too_far_from_home) 
    {
      pprz_mode = PPRZ_MODE_HOME;
    a740:	f24b 630c 	movw	r3, #46604	; 0xb60c
    a744:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a748:	2203      	movs	r2, #3
    a74a:	701a      	strb	r2, [r3, #0]
      mode_changed = TRUE;
    a74c:	2301      	movs	r3, #1
    a74e:	71fb      	strb	r3, [r7, #7]
    }
    // modified by wanbo
    //if (bit_is_set(from_fbw.status, AVERAGED_CHANNELS_SENT)) 
    {
      bool_t pprz_mode_changed = pprz_mode_update();
    a750:	f7fa f954 	bl	49fc <pprz_mode_update>
    a754:	4603      	mov	r3, r0
    a756:	71bb      	strb	r3, [r7, #6]
      mode_changed |= pprz_mode_changed;
    a758:	79fa      	ldrb	r2, [r7, #7]
    a75a:	79bb      	ldrb	r3, [r7, #6]
    a75c:	4313      	orrs	r3, r2
    a75e:	71fb      	strb	r3, [r7, #7]
#ifdef RADIO_LLS
      mode_changed |= ir_estim_mode_update();
    a760:	f7fa f998 	bl	4a94 <ir_estim_mode_update>
    a764:	4603      	mov	r3, r0
    a766:	461a      	mov	r2, r3
    a768:	79fb      	ldrb	r3, [r7, #7]
    a76a:	4313      	orrs	r3, r2
    a76c:	71fb      	strb	r3, [r7, #7]
#endif
#ifdef RADIO_CALIB
      calib_mode_changed = inflight_calib_mode_update();
    a76e:	f7ff ff9d 	bl	a6ac <inflight_calib_mode_update>
    a772:	4603      	mov	r3, r0
    a774:	717b      	strb	r3, [r7, #5]
      inflight_calib(calib_mode_changed || pprz_mode_changed);
    a776:	797b      	ldrb	r3, [r7, #5]
    a778:	2b00      	cmp	r3, #0
    a77a:	d102      	bne.n	a782 <radio_control_task+0x6e>
    a77c:	79bb      	ldrb	r3, [r7, #6]
    a77e:	2b00      	cmp	r3, #0
    a780:	d001      	beq.n	a786 <radio_control_task+0x72>
    a782:	2301      	movs	r3, #1
    a784:	e000      	b.n	a788 <radio_control_task+0x74>
    a786:	2300      	movs	r3, #0
    a788:	b2db      	uxtb	r3, r3
    a78a:	4618      	mov	r0, r3
    a78c:	f005 ff80 	bl	10690 <inflight_calib>
      mode_changed |= calib_mode_changed;
    a790:	79fa      	ldrb	r2, [r7, #7]
    a792:	797b      	ldrb	r3, [r7, #5]
    a794:	4313      	orrs	r3, r2
    a796:	71fb      	strb	r3, [r7, #7]
#endif
    }
    mode_changed |= mcu1_status_update();
    a798:	f7fa f9a4 	bl	4ae4 <mcu1_status_update>
    a79c:	4603      	mov	r3, r0
    a79e:	461a      	mov	r2, r3
    a7a0:	79fb      	ldrb	r3, [r7, #7]
    a7a2:	4313      	orrs	r3, r2
    a7a4:	71fb      	strb	r3, [r7, #7]
    // add by wanbo
    mode_changed = 1;
    a7a6:	2301      	movs	r3, #1
    a7a8:	71fb      	strb	r3, [r7, #7]
    if ( mode_changed )
    a7aa:	79fb      	ldrb	r3, [r7, #7]
    a7ac:	2b00      	cmp	r3, #0
    a7ae:	d06a      	beq.n	a886 <radio_control_task+0x172>
      //DOWNLINK_SEND_PPRZ_MODE(&pprz_mode, &vertical_mode, &inflight_calib_mode, &mcu1_status, &ir_estim_mode);
      
    // add by wanbo
    //if (pprz_mode == PPRZ_MODE_AUTO1) 
    {
      desired_roll = FLOAT_OF_PPRZ(from_fbw.channels[RADIO_ROLL], 0., -0.6);
    a7b0:	f24b 7330 	movw	r3, #46896	; 0xb730
    a7b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7b8:	885b      	ldrh	r3, [r3, #2]
    a7ba:	b21b      	sxth	r3, r3
    a7bc:	4618      	mov	r0, r3
    a7be:	f008 fd05 	bl	131cc <__aeabi_i2f>
    a7c2:	4603      	mov	r3, r0
    a7c4:	4618      	mov	r0, r3
    a7c6:	f04f 0100 	mov.w	r1, #0
    a7ca:	f2c4 6116 	movt	r1, #17942	; 0x4616
    a7ce:	f008 fe05 	bl	133dc <__aeabi_fdiv>
    a7d2:	4603      	mov	r3, r0
    a7d4:	4618      	mov	r0, r3
    a7d6:	f008 f8b9 	bl	1294c <__aeabi_f2d>
    a7da:	4602      	mov	r2, r0
    a7dc:	460b      	mov	r3, r1
    a7de:	4610      	mov	r0, r2
    a7e0:	4619      	mov	r1, r3
    a7e2:	a347      	add	r3, pc, #284	; (adr r3, a900 <radio_control_task+0x1ec>)
    a7e4:	e9d3 2300 	ldrd	r2, r3, [r3]
    a7e8:	f008 f904 	bl	129f4 <__aeabi_dmul>
    a7ec:	4602      	mov	r2, r0
    a7ee:	460b      	mov	r3, r1
    a7f0:	4610      	mov	r0, r2
    a7f2:	4619      	mov	r1, r3
    a7f4:	f04f 0200 	mov.w	r2, #0
    a7f8:	f04f 0300 	mov.w	r3, #0
    a7fc:	f007 ff48 	bl	12690 <__adddf3>
    a800:	4602      	mov	r2, r0
    a802:	460b      	mov	r3, r1
    a804:	4610      	mov	r0, r2
    a806:	4619      	mov	r1, r3
    a808:	f008 fbd6 	bl	12fb8 <__aeabi_d2f>
    a80c:	4602      	mov	r2, r0
    a80e:	f64b 1354 	movw	r3, #47444	; 0xb954
    a812:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a816:	601a      	str	r2, [r3, #0]
      desired_pitch = FLOAT_OF_PPRZ(from_fbw.channels[RADIO_PITCH], 0., 0.5);
    a818:	f24b 7330 	movw	r3, #46896	; 0xb730
    a81c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a820:	889b      	ldrh	r3, [r3, #4]
    a822:	b21b      	sxth	r3, r3
    a824:	4618      	mov	r0, r3
    a826:	f008 fcd1 	bl	131cc <__aeabi_i2f>
    a82a:	4603      	mov	r3, r0
    a82c:	4618      	mov	r0, r3
    a82e:	f04f 0100 	mov.w	r1, #0
    a832:	f2c4 6116 	movt	r1, #17942	; 0x4616
    a836:	f008 fdd1 	bl	133dc <__aeabi_fdiv>
    a83a:	4603      	mov	r3, r0
    a83c:	4618      	mov	r0, r3
    a83e:	f008 f885 	bl	1294c <__aeabi_f2d>
    a842:	4602      	mov	r2, r0
    a844:	460b      	mov	r3, r1
    a846:	4610      	mov	r0, r2
    a848:	4619      	mov	r1, r3
    a84a:	f04f 0200 	mov.w	r2, #0
    a84e:	f04f 0300 	mov.w	r3, #0
    a852:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
    a856:	f008 f8cd 	bl	129f4 <__aeabi_dmul>
    a85a:	4602      	mov	r2, r0
    a85c:	460b      	mov	r3, r1
    a85e:	4610      	mov	r0, r2
    a860:	4619      	mov	r1, r3
    a862:	f04f 0200 	mov.w	r2, #0
    a866:	f04f 0300 	mov.w	r3, #0
    a86a:	f007 ff11 	bl	12690 <__adddf3>
    a86e:	4602      	mov	r2, r0
    a870:	460b      	mov	r3, r1
    a872:	4610      	mov	r0, r2
    a874:	4619      	mov	r1, r3
    a876:	f008 fb9f 	bl	12fb8 <__aeabi_d2f>
    a87a:	4602      	mov	r2, r0
    a87c:	f64b 1358 	movw	r3, #47448	; 0xb958
    a880:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a884:	601a      	str	r2, [r3, #0]
    } // else asynchronously set by course_pid_run()

    // add by wanbo
   // if (pprz_mode == PPRZ_MODE_MANUAL || pprz_mode == PPRZ_MODE_AUTO1) 
    {
      desired_gaz = from_fbw.channels[RADIO_THROTTLE];
    a886:	f24b 7330 	movw	r3, #46896	; 0xb730
    a88a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a88e:	881a      	ldrh	r2, [r3, #0]
    a890:	f64b 135c 	movw	r3, #47452	; 0xb95c
    a894:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a898:	801a      	strh	r2, [r3, #0]
      pitch_pgain = PITCH_PGAIN * ( 1 - 1. / 3. * from_fbw.channels[RADIO_THROTTLE] / MAX_PPRZ);
#endif /* ANTON_MAGICAL_MISTERY_GAINS */
    }
    // else asynchronously set by climb_pid_run();

    mcu1_ppm_cpt = from_fbw.ppm_cpt;
    a89a:	f24b 7330 	movw	r3, #46896	; 0xb730
    a89e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8a2:	7c9a      	ldrb	r2, [r3, #18]
    a8a4:	f24b 6314 	movw	r3, #46612	; 0xb614
    a8a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8ac:	701a      	strb	r2, [r3, #0]
    vsupply = from_fbw.vsupply;
    a8ae:	f24b 7330 	movw	r3, #46896	; 0xb730
    a8b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8b6:	7d5a      	ldrb	r2, [r3, #21]
    a8b8:	f24b 6312 	movw	r3, #46610	; 0xb612
    a8bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8c0:	701a      	strb	r2, [r3, #0]

    events_update();
    a8c2:	f7fa f93f 	bl	4b44 <events_update>

    // add by wanbo
    //if (!estimator_flight_time) 
    {
      ground_calibrate();
    a8c6:	f7fa f84f 	bl	4968 <ground_calibrate>
      if (pprz_mode == PPRZ_MODE_AUTO2 && from_fbw.channels[RADIO_THROTTLE] > GAZ_THRESHOLD_TAKEOFF) {
    a8ca:	f24b 630c 	movw	r3, #46604	; 0xb60c
    a8ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8d2:	781b      	ldrb	r3, [r3, #0]
    a8d4:	2b02      	cmp	r3, #2
    a8d6:	d10e      	bne.n	a8f6 <radio_control_task+0x1e2>
    a8d8:	f24b 7330 	movw	r3, #46896	; 0xb730
    a8dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8e0:	881b      	ldrh	r3, [r3, #0]
    a8e2:	b21b      	sxth	r3, r3
    a8e4:	f5b3 5f07 	cmp.w	r3, #8640	; 0x21c0
    a8e8:	dd05      	ble.n	a8f6 <radio_control_task+0x1e2>
	launch = TRUE;
    a8ea:	f24b 6320 	movw	r3, #46624	; 0xb620
    a8ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8f2:	2201      	movs	r2, #1
    a8f4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

	//vPrintString("S_3 radio_control_task end! \n\r"); //SunnyBeike
}
    a8f6:	3708      	adds	r7, #8
    a8f8:	46bd      	mov	sp, r7
    a8fa:	bd80      	pop	{r7, pc}
    a8fc:	f3af 8000 	nop.w
    a900:	33333333 	.word	0x33333333
    a904:	bfe33333 	.word	0xbfe33333

0000a908 <navigation_update>:

/** \fn void navigation_task( void )
 *  \brief Compute desired_course
 */
void navigation_update( void ) {
    a908:	b580      	push	{r7, lr}
    a90a:	af00      	add	r7, sp, #0

  /* Default to keep compatibility with previous behaviour */
  //vPrintString("S_17 Navigation task start!\n\r");
  lateral_mode = LATERAL_MODE_COURSE;
    a90c:	f24b 630e 	movw	r3, #46606	; 0xb60e
    a910:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a914:	2203      	movs	r2, #3
    a916:	701a      	strb	r2, [r3, #0]
  if (pprz_mode == PPRZ_MODE_HOME)
    a918:	f24b 630c 	movw	r3, #46604	; 0xb60c
    a91c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a920:	781b      	ldrb	r3, [r3, #0]
    a922:	2b03      	cmp	r3, #3
    a924:	d102      	bne.n	a92c <navigation_update+0x24>
    nav_home();
    a926:	f005 f937 	bl	fb98 <nav_home>
    a92a:	e001      	b.n	a930 <navigation_update+0x28>
  else
    nav_update();
    a92c:	f005 f95a 	bl	fbe4 <nav_update>
}
    a930:	bd80      	pop	{r7, pc}
    a932:	bf00      	nop

0000a934 <send_nav_values>:

void send_nav_values(void){
    a934:	b480      	push	{r7}
    a936:	af00      	add	r7, sp, #0
  
  DOWNLINK_SEND_NAVIGATION(&nav_block, &nav_stage, &estimator_x, &estimator_y, &desired_course, &dist2_to_wp, &course_pgain, &dist2_to_home);
    a938:	f24b 6329 	movw	r3, #46633	; 0xb629
    a93c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a940:	781a      	ldrb	r2, [r3, #0]
    a942:	f24b 632a 	movw	r3, #46634	; 0xb62a
    a946:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a94a:	781b      	ldrb	r3, [r3, #0]
    a94c:	b2db      	uxtb	r3, r3
    a94e:	429a      	cmp	r2, r3
    a950:	d313      	bcc.n	a97a <send_nav_values+0x46>
    a952:	f24b 632a 	movw	r3, #46634	; 0xb62a
    a956:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a95a:	781b      	ldrb	r3, [r3, #0]
    a95c:	b2db      	uxtb	r3, r3
    a95e:	461a      	mov	r2, r3
    a960:	f24b 6329 	movw	r3, #46633	; 0xb629
    a964:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a968:	781b      	ldrb	r3, [r3, #0]
    a96a:	1ad3      	subs	r3, r2, r3
    a96c:	33ff      	adds	r3, #255	; 0xff
    a96e:	2b1e      	cmp	r3, #30
    a970:	bfd4      	ite	le
    a972:	2300      	movle	r3, #0
    a974:	2301      	movgt	r3, #1
    a976:	b2db      	uxtb	r3, r3
    a978:	e011      	b.n	a99e <send_nav_values+0x6a>
    a97a:	f24b 632a 	movw	r3, #46634	; 0xb62a
    a97e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a982:	781b      	ldrb	r3, [r3, #0]
    a984:	b2db      	uxtb	r3, r3
    a986:	461a      	mov	r2, r3
    a988:	f24b 6329 	movw	r3, #46633	; 0xb629
    a98c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a990:	781b      	ldrb	r3, [r3, #0]
    a992:	1ad3      	subs	r3, r2, r3
    a994:	2b1e      	cmp	r3, #30
    a996:	bfd4      	ite	le
    a998:	2300      	movle	r3, #0
    a99a:	2301      	movgt	r3, #1
    a99c:	b2db      	uxtb	r3, r3
    a99e:	2b00      	cmp	r3, #0
    a9a0:	f001 8094 	beq.w	bacc <send_nav_values+0x1198>
    a9a4:	f24b 6329 	movw	r3, #46633	; 0xb629
    a9a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9ac:	781b      	ldrb	r3, [r3, #0]
    a9ae:	461a      	mov	r2, r3
    a9b0:	f24b 632c 	movw	r3, #46636	; 0xb62c
    a9b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9b8:	2105      	movs	r1, #5
    a9ba:	5499      	strb	r1, [r3, r2]
    a9bc:	f24b 6329 	movw	r3, #46633	; 0xb629
    a9c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9c4:	781b      	ldrb	r3, [r3, #0]
    a9c6:	3301      	adds	r3, #1
    a9c8:	b2da      	uxtb	r2, r3
    a9ca:	f24b 6329 	movw	r3, #46633	; 0xb629
    a9ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9d2:	701a      	strb	r2, [r3, #0]
    a9d4:	f24b 6329 	movw	r3, #46633	; 0xb629
    a9d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9dc:	781b      	ldrb	r3, [r3, #0]
    a9de:	2bff      	cmp	r3, #255	; 0xff
    a9e0:	d105      	bne.n	a9ee <send_nav_values+0xba>
    a9e2:	f24b 6329 	movw	r3, #46633	; 0xb629
    a9e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9ea:	2200      	movs	r2, #0
    a9ec:	701a      	strb	r2, [r3, #0]
    a9ee:	f24b 6329 	movw	r3, #46633	; 0xb629
    a9f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9f6:	781b      	ldrb	r3, [r3, #0]
    a9f8:	461a      	mov	r2, r3
    a9fa:	f24b 632c 	movw	r3, #46636	; 0xb62c
    a9fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa02:	210a      	movs	r1, #10
    aa04:	5499      	strb	r1, [r3, r2]
    aa06:	f24b 6329 	movw	r3, #46633	; 0xb629
    aa0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa0e:	781b      	ldrb	r3, [r3, #0]
    aa10:	3301      	adds	r3, #1
    aa12:	b2da      	uxtb	r2, r3
    aa14:	f24b 6329 	movw	r3, #46633	; 0xb629
    aa18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa1c:	701a      	strb	r2, [r3, #0]
    aa1e:	f24b 6329 	movw	r3, #46633	; 0xb629
    aa22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa26:	781b      	ldrb	r3, [r3, #0]
    aa28:	2bff      	cmp	r3, #255	; 0xff
    aa2a:	d105      	bne.n	aa38 <send_nav_values+0x104>
    aa2c:	f24b 6329 	movw	r3, #46633	; 0xb629
    aa30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa34:	2200      	movs	r2, #0
    aa36:	701a      	strb	r2, [r3, #0]
    aa38:	f24b 732d 	movw	r3, #46893	; 0xb72d
    aa3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa40:	220a      	movs	r2, #10
    aa42:	701a      	strb	r2, [r3, #0]
    aa44:	f24b 732e 	movw	r3, #46894	; 0xb72e
    aa48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa4c:	220a      	movs	r2, #10
    aa4e:	701a      	strb	r2, [r3, #0]
    aa50:	f24b 6329 	movw	r3, #46633	; 0xb629
    aa54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa58:	781b      	ldrb	r3, [r3, #0]
    aa5a:	461a      	mov	r2, r3
    aa5c:	f64b 1381 	movw	r3, #47489	; 0xb981
    aa60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa64:	7819      	ldrb	r1, [r3, #0]
    aa66:	f24b 632c 	movw	r3, #46636	; 0xb62c
    aa6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa6e:	5499      	strb	r1, [r3, r2]
    aa70:	f24b 732d 	movw	r3, #46893	; 0xb72d
    aa74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa78:	781a      	ldrb	r2, [r3, #0]
    aa7a:	f64b 1381 	movw	r3, #47489	; 0xb981
    aa7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa82:	781b      	ldrb	r3, [r3, #0]
    aa84:	4413      	add	r3, r2
    aa86:	b2da      	uxtb	r2, r3
    aa88:	f24b 732d 	movw	r3, #46893	; 0xb72d
    aa8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa90:	701a      	strb	r2, [r3, #0]
    aa92:	f24b 732e 	movw	r3, #46894	; 0xb72e
    aa96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa9a:	781a      	ldrb	r2, [r3, #0]
    aa9c:	f24b 732d 	movw	r3, #46893	; 0xb72d
    aaa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aaa4:	781b      	ldrb	r3, [r3, #0]
    aaa6:	4413      	add	r3, r2
    aaa8:	b2da      	uxtb	r2, r3
    aaaa:	f24b 732e 	movw	r3, #46894	; 0xb72e
    aaae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aab2:	701a      	strb	r2, [r3, #0]
    aab4:	f24b 6329 	movw	r3, #46633	; 0xb629
    aab8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aabc:	781b      	ldrb	r3, [r3, #0]
    aabe:	3301      	adds	r3, #1
    aac0:	b2da      	uxtb	r2, r3
    aac2:	f24b 6329 	movw	r3, #46633	; 0xb629
    aac6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aaca:	701a      	strb	r2, [r3, #0]
    aacc:	f24b 6329 	movw	r3, #46633	; 0xb629
    aad0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aad4:	781b      	ldrb	r3, [r3, #0]
    aad6:	2bff      	cmp	r3, #255	; 0xff
    aad8:	d105      	bne.n	aae6 <send_nav_values+0x1b2>
    aada:	f24b 6329 	movw	r3, #46633	; 0xb629
    aade:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aae2:	2200      	movs	r2, #0
    aae4:	701a      	strb	r2, [r3, #0]
    aae6:	f24b 6329 	movw	r3, #46633	; 0xb629
    aaea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aaee:	781b      	ldrb	r3, [r3, #0]
    aaf0:	461a      	mov	r2, r3
    aaf2:	f64b 1380 	movw	r3, #47488	; 0xb980
    aaf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aafa:	7819      	ldrb	r1, [r3, #0]
    aafc:	f24b 632c 	movw	r3, #46636	; 0xb62c
    ab00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab04:	5499      	strb	r1, [r3, r2]
    ab06:	f24b 732d 	movw	r3, #46893	; 0xb72d
    ab0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab0e:	781a      	ldrb	r2, [r3, #0]
    ab10:	f64b 1380 	movw	r3, #47488	; 0xb980
    ab14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab18:	781b      	ldrb	r3, [r3, #0]
    ab1a:	4413      	add	r3, r2
    ab1c:	b2da      	uxtb	r2, r3
    ab1e:	f24b 732d 	movw	r3, #46893	; 0xb72d
    ab22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab26:	701a      	strb	r2, [r3, #0]
    ab28:	f24b 732e 	movw	r3, #46894	; 0xb72e
    ab2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab30:	781a      	ldrb	r2, [r3, #0]
    ab32:	f24b 732d 	movw	r3, #46893	; 0xb72d
    ab36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab3a:	781b      	ldrb	r3, [r3, #0]
    ab3c:	4413      	add	r3, r2
    ab3e:	b2da      	uxtb	r2, r3
    ab40:	f24b 732e 	movw	r3, #46894	; 0xb72e
    ab44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab48:	701a      	strb	r2, [r3, #0]
    ab4a:	f24b 6329 	movw	r3, #46633	; 0xb629
    ab4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab52:	781b      	ldrb	r3, [r3, #0]
    ab54:	3301      	adds	r3, #1
    ab56:	b2da      	uxtb	r2, r3
    ab58:	f24b 6329 	movw	r3, #46633	; 0xb629
    ab5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab60:	701a      	strb	r2, [r3, #0]
    ab62:	f24b 6329 	movw	r3, #46633	; 0xb629
    ab66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab6a:	781b      	ldrb	r3, [r3, #0]
    ab6c:	2bff      	cmp	r3, #255	; 0xff
    ab6e:	d105      	bne.n	ab7c <send_nav_values+0x248>
    ab70:	f24b 6329 	movw	r3, #46633	; 0xb629
    ab74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab78:	2200      	movs	r2, #0
    ab7a:	701a      	strb	r2, [r3, #0]
    ab7c:	f24b 6329 	movw	r3, #46633	; 0xb629
    ab80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab84:	781b      	ldrb	r3, [r3, #0]
    ab86:	461a      	mov	r2, r3
    ab88:	f64b 33dc 	movw	r3, #48092	; 0xbbdc
    ab8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab90:	7819      	ldrb	r1, [r3, #0]
    ab92:	f24b 632c 	movw	r3, #46636	; 0xb62c
    ab96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab9a:	5499      	strb	r1, [r3, r2]
    ab9c:	f64b 33dc 	movw	r3, #48092	; 0xbbdc
    aba0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aba4:	781a      	ldrb	r2, [r3, #0]
    aba6:	f24b 732d 	movw	r3, #46893	; 0xb72d
    abaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abae:	781b      	ldrb	r3, [r3, #0]
    abb0:	4413      	add	r3, r2
    abb2:	b2da      	uxtb	r2, r3
    abb4:	f24b 732d 	movw	r3, #46893	; 0xb72d
    abb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abbc:	701a      	strb	r2, [r3, #0]
    abbe:	f24b 732e 	movw	r3, #46894	; 0xb72e
    abc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abc6:	781a      	ldrb	r2, [r3, #0]
    abc8:	f24b 732d 	movw	r3, #46893	; 0xb72d
    abcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abd0:	781b      	ldrb	r3, [r3, #0]
    abd2:	4413      	add	r3, r2
    abd4:	b2da      	uxtb	r2, r3
    abd6:	f24b 732e 	movw	r3, #46894	; 0xb72e
    abda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abde:	701a      	strb	r2, [r3, #0]
    abe0:	f24b 6329 	movw	r3, #46633	; 0xb629
    abe4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abe8:	781b      	ldrb	r3, [r3, #0]
    abea:	3301      	adds	r3, #1
    abec:	b2da      	uxtb	r2, r3
    abee:	f24b 6329 	movw	r3, #46633	; 0xb629
    abf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abf6:	701a      	strb	r2, [r3, #0]
    abf8:	f24b 6329 	movw	r3, #46633	; 0xb629
    abfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac00:	781b      	ldrb	r3, [r3, #0]
    ac02:	2bff      	cmp	r3, #255	; 0xff
    ac04:	d105      	bne.n	ac12 <send_nav_values+0x2de>
    ac06:	f24b 6329 	movw	r3, #46633	; 0xb629
    ac0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac0e:	2200      	movs	r2, #0
    ac10:	701a      	strb	r2, [r3, #0]
    ac12:	f24b 6329 	movw	r3, #46633	; 0xb629
    ac16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac1a:	781b      	ldrb	r3, [r3, #0]
    ac1c:	461a      	mov	r2, r3
    ac1e:	f64b 33dc 	movw	r3, #48092	; 0xbbdc
    ac22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac26:	7859      	ldrb	r1, [r3, #1]
    ac28:	f24b 632c 	movw	r3, #46636	; 0xb62c
    ac2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac30:	5499      	strb	r1, [r3, r2]
    ac32:	4bd2      	ldr	r3, [pc, #840]	; (af7c <send_nav_values+0x648>)
    ac34:	781a      	ldrb	r2, [r3, #0]
    ac36:	f24b 732d 	movw	r3, #46893	; 0xb72d
    ac3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac3e:	781b      	ldrb	r3, [r3, #0]
    ac40:	4413      	add	r3, r2
    ac42:	b2da      	uxtb	r2, r3
    ac44:	f24b 732d 	movw	r3, #46893	; 0xb72d
    ac48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac4c:	701a      	strb	r2, [r3, #0]
    ac4e:	f24b 732e 	movw	r3, #46894	; 0xb72e
    ac52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac56:	781a      	ldrb	r2, [r3, #0]
    ac58:	f24b 732d 	movw	r3, #46893	; 0xb72d
    ac5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac60:	781b      	ldrb	r3, [r3, #0]
    ac62:	4413      	add	r3, r2
    ac64:	b2da      	uxtb	r2, r3
    ac66:	f24b 732e 	movw	r3, #46894	; 0xb72e
    ac6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac6e:	701a      	strb	r2, [r3, #0]
    ac70:	f24b 6329 	movw	r3, #46633	; 0xb629
    ac74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac78:	781b      	ldrb	r3, [r3, #0]
    ac7a:	3301      	adds	r3, #1
    ac7c:	b2da      	uxtb	r2, r3
    ac7e:	f24b 6329 	movw	r3, #46633	; 0xb629
    ac82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac86:	701a      	strb	r2, [r3, #0]
    ac88:	f24b 6329 	movw	r3, #46633	; 0xb629
    ac8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac90:	781b      	ldrb	r3, [r3, #0]
    ac92:	2bff      	cmp	r3, #255	; 0xff
    ac94:	d105      	bne.n	aca2 <send_nav_values+0x36e>
    ac96:	f24b 6329 	movw	r3, #46633	; 0xb629
    ac9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac9e:	2200      	movs	r2, #0
    aca0:	701a      	strb	r2, [r3, #0]
    aca2:	f24b 6329 	movw	r3, #46633	; 0xb629
    aca6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acaa:	781b      	ldrb	r3, [r3, #0]
    acac:	461a      	mov	r2, r3
    acae:	f64b 33dc 	movw	r3, #48092	; 0xbbdc
    acb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acb6:	7899      	ldrb	r1, [r3, #2]
    acb8:	f24b 632c 	movw	r3, #46636	; 0xb62c
    acbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acc0:	5499      	strb	r1, [r3, r2]
    acc2:	4baf      	ldr	r3, [pc, #700]	; (af80 <send_nav_values+0x64c>)
    acc4:	781a      	ldrb	r2, [r3, #0]
    acc6:	f24b 732d 	movw	r3, #46893	; 0xb72d
    acca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acce:	781b      	ldrb	r3, [r3, #0]
    acd0:	4413      	add	r3, r2
    acd2:	b2da      	uxtb	r2, r3
    acd4:	f24b 732d 	movw	r3, #46893	; 0xb72d
    acd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acdc:	701a      	strb	r2, [r3, #0]
    acde:	f24b 732e 	movw	r3, #46894	; 0xb72e
    ace2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ace6:	781a      	ldrb	r2, [r3, #0]
    ace8:	f24b 732d 	movw	r3, #46893	; 0xb72d
    acec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acf0:	781b      	ldrb	r3, [r3, #0]
    acf2:	4413      	add	r3, r2
    acf4:	b2da      	uxtb	r2, r3
    acf6:	f24b 732e 	movw	r3, #46894	; 0xb72e
    acfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acfe:	701a      	strb	r2, [r3, #0]
    ad00:	f24b 6329 	movw	r3, #46633	; 0xb629
    ad04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad08:	781b      	ldrb	r3, [r3, #0]
    ad0a:	3301      	adds	r3, #1
    ad0c:	b2da      	uxtb	r2, r3
    ad0e:	f24b 6329 	movw	r3, #46633	; 0xb629
    ad12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad16:	701a      	strb	r2, [r3, #0]
    ad18:	f24b 6329 	movw	r3, #46633	; 0xb629
    ad1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad20:	781b      	ldrb	r3, [r3, #0]
    ad22:	2bff      	cmp	r3, #255	; 0xff
    ad24:	d105      	bne.n	ad32 <send_nav_values+0x3fe>
    ad26:	f24b 6329 	movw	r3, #46633	; 0xb629
    ad2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad2e:	2200      	movs	r2, #0
    ad30:	701a      	strb	r2, [r3, #0]
    ad32:	f24b 6329 	movw	r3, #46633	; 0xb629
    ad36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad3a:	781b      	ldrb	r3, [r3, #0]
    ad3c:	461a      	mov	r2, r3
    ad3e:	f64b 33dc 	movw	r3, #48092	; 0xbbdc
    ad42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad46:	78d9      	ldrb	r1, [r3, #3]
    ad48:	f24b 632c 	movw	r3, #46636	; 0xb62c
    ad4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad50:	5499      	strb	r1, [r3, r2]
    ad52:	4b8c      	ldr	r3, [pc, #560]	; (af84 <send_nav_values+0x650>)
    ad54:	781a      	ldrb	r2, [r3, #0]
    ad56:	f24b 732d 	movw	r3, #46893	; 0xb72d
    ad5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad5e:	781b      	ldrb	r3, [r3, #0]
    ad60:	4413      	add	r3, r2
    ad62:	b2da      	uxtb	r2, r3
    ad64:	f24b 732d 	movw	r3, #46893	; 0xb72d
    ad68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad6c:	701a      	strb	r2, [r3, #0]
    ad6e:	f24b 732e 	movw	r3, #46894	; 0xb72e
    ad72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad76:	781a      	ldrb	r2, [r3, #0]
    ad78:	f24b 732d 	movw	r3, #46893	; 0xb72d
    ad7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad80:	781b      	ldrb	r3, [r3, #0]
    ad82:	4413      	add	r3, r2
    ad84:	b2da      	uxtb	r2, r3
    ad86:	f24b 732e 	movw	r3, #46894	; 0xb72e
    ad8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad8e:	701a      	strb	r2, [r3, #0]
    ad90:	f24b 6329 	movw	r3, #46633	; 0xb629
    ad94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad98:	781b      	ldrb	r3, [r3, #0]
    ad9a:	3301      	adds	r3, #1
    ad9c:	b2da      	uxtb	r2, r3
    ad9e:	f24b 6329 	movw	r3, #46633	; 0xb629
    ada2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ada6:	701a      	strb	r2, [r3, #0]
    ada8:	f24b 6329 	movw	r3, #46633	; 0xb629
    adac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adb0:	781b      	ldrb	r3, [r3, #0]
    adb2:	2bff      	cmp	r3, #255	; 0xff
    adb4:	d105      	bne.n	adc2 <send_nav_values+0x48e>
    adb6:	f24b 6329 	movw	r3, #46633	; 0xb629
    adba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adbe:	2200      	movs	r2, #0
    adc0:	701a      	strb	r2, [r3, #0]
    adc2:	f24b 6329 	movw	r3, #46633	; 0xb629
    adc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adca:	781b      	ldrb	r3, [r3, #0]
    adcc:	461a      	mov	r2, r3
    adce:	f64b 33e0 	movw	r3, #48096	; 0xbbe0
    add2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    add6:	7819      	ldrb	r1, [r3, #0]
    add8:	f24b 632c 	movw	r3, #46636	; 0xb62c
    addc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ade0:	5499      	strb	r1, [r3, r2]
    ade2:	f64b 33e0 	movw	r3, #48096	; 0xbbe0
    ade6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adea:	781a      	ldrb	r2, [r3, #0]
    adec:	f24b 732d 	movw	r3, #46893	; 0xb72d
    adf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adf4:	781b      	ldrb	r3, [r3, #0]
    adf6:	4413      	add	r3, r2
    adf8:	b2da      	uxtb	r2, r3
    adfa:	f24b 732d 	movw	r3, #46893	; 0xb72d
    adfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae02:	701a      	strb	r2, [r3, #0]
    ae04:	f24b 732e 	movw	r3, #46894	; 0xb72e
    ae08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae0c:	781a      	ldrb	r2, [r3, #0]
    ae0e:	f24b 732d 	movw	r3, #46893	; 0xb72d
    ae12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae16:	781b      	ldrb	r3, [r3, #0]
    ae18:	4413      	add	r3, r2
    ae1a:	b2da      	uxtb	r2, r3
    ae1c:	f24b 732e 	movw	r3, #46894	; 0xb72e
    ae20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae24:	701a      	strb	r2, [r3, #0]
    ae26:	f24b 6329 	movw	r3, #46633	; 0xb629
    ae2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae2e:	781b      	ldrb	r3, [r3, #0]
    ae30:	3301      	adds	r3, #1
    ae32:	b2da      	uxtb	r2, r3
    ae34:	f24b 6329 	movw	r3, #46633	; 0xb629
    ae38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae3c:	701a      	strb	r2, [r3, #0]
    ae3e:	f24b 6329 	movw	r3, #46633	; 0xb629
    ae42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae46:	781b      	ldrb	r3, [r3, #0]
    ae48:	2bff      	cmp	r3, #255	; 0xff
    ae4a:	d105      	bne.n	ae58 <send_nav_values+0x524>
    ae4c:	f24b 6329 	movw	r3, #46633	; 0xb629
    ae50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae54:	2200      	movs	r2, #0
    ae56:	701a      	strb	r2, [r3, #0]
    ae58:	f24b 6329 	movw	r3, #46633	; 0xb629
    ae5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae60:	781b      	ldrb	r3, [r3, #0]
    ae62:	461a      	mov	r2, r3
    ae64:	f64b 33e0 	movw	r3, #48096	; 0xbbe0
    ae68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae6c:	7859      	ldrb	r1, [r3, #1]
    ae6e:	f24b 632c 	movw	r3, #46636	; 0xb62c
    ae72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae76:	5499      	strb	r1, [r3, r2]
    ae78:	4b43      	ldr	r3, [pc, #268]	; (af88 <send_nav_values+0x654>)
    ae7a:	781a      	ldrb	r2, [r3, #0]
    ae7c:	f24b 732d 	movw	r3, #46893	; 0xb72d
    ae80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae84:	781b      	ldrb	r3, [r3, #0]
    ae86:	4413      	add	r3, r2
    ae88:	b2da      	uxtb	r2, r3
    ae8a:	f24b 732d 	movw	r3, #46893	; 0xb72d
    ae8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae92:	701a      	strb	r2, [r3, #0]
    ae94:	f24b 732e 	movw	r3, #46894	; 0xb72e
    ae98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae9c:	781a      	ldrb	r2, [r3, #0]
    ae9e:	f24b 732d 	movw	r3, #46893	; 0xb72d
    aea2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aea6:	781b      	ldrb	r3, [r3, #0]
    aea8:	4413      	add	r3, r2
    aeaa:	b2da      	uxtb	r2, r3
    aeac:	f24b 732e 	movw	r3, #46894	; 0xb72e
    aeb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aeb4:	701a      	strb	r2, [r3, #0]
    aeb6:	f24b 6329 	movw	r3, #46633	; 0xb629
    aeba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aebe:	781b      	ldrb	r3, [r3, #0]
    aec0:	3301      	adds	r3, #1
    aec2:	b2da      	uxtb	r2, r3
    aec4:	f24b 6329 	movw	r3, #46633	; 0xb629
    aec8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aecc:	701a      	strb	r2, [r3, #0]
    aece:	f24b 6329 	movw	r3, #46633	; 0xb629
    aed2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aed6:	781b      	ldrb	r3, [r3, #0]
    aed8:	2bff      	cmp	r3, #255	; 0xff
    aeda:	d105      	bne.n	aee8 <send_nav_values+0x5b4>
    aedc:	f24b 6329 	movw	r3, #46633	; 0xb629
    aee0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aee4:	2200      	movs	r2, #0
    aee6:	701a      	strb	r2, [r3, #0]
    aee8:	f24b 6329 	movw	r3, #46633	; 0xb629
    aeec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aef0:	781b      	ldrb	r3, [r3, #0]
    aef2:	461a      	mov	r2, r3
    aef4:	f64b 33e0 	movw	r3, #48096	; 0xbbe0
    aef8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aefc:	7899      	ldrb	r1, [r3, #2]
    aefe:	f24b 632c 	movw	r3, #46636	; 0xb62c
    af02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af06:	5499      	strb	r1, [r3, r2]
    af08:	4b20      	ldr	r3, [pc, #128]	; (af8c <send_nav_values+0x658>)
    af0a:	781a      	ldrb	r2, [r3, #0]
    af0c:	f24b 732d 	movw	r3, #46893	; 0xb72d
    af10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af14:	781b      	ldrb	r3, [r3, #0]
    af16:	4413      	add	r3, r2
    af18:	b2da      	uxtb	r2, r3
    af1a:	f24b 732d 	movw	r3, #46893	; 0xb72d
    af1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af22:	701a      	strb	r2, [r3, #0]
    af24:	f24b 732e 	movw	r3, #46894	; 0xb72e
    af28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af2c:	781a      	ldrb	r2, [r3, #0]
    af2e:	f24b 732d 	movw	r3, #46893	; 0xb72d
    af32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af36:	781b      	ldrb	r3, [r3, #0]
    af38:	4413      	add	r3, r2
    af3a:	b2da      	uxtb	r2, r3
    af3c:	f24b 732e 	movw	r3, #46894	; 0xb72e
    af40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af44:	701a      	strb	r2, [r3, #0]
    af46:	f24b 6329 	movw	r3, #46633	; 0xb629
    af4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af4e:	781b      	ldrb	r3, [r3, #0]
    af50:	3301      	adds	r3, #1
    af52:	b2da      	uxtb	r2, r3
    af54:	f24b 6329 	movw	r3, #46633	; 0xb629
    af58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af5c:	701a      	strb	r2, [r3, #0]
    af5e:	f24b 6329 	movw	r3, #46633	; 0xb629
    af62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af66:	781b      	ldrb	r3, [r3, #0]
    af68:	2bff      	cmp	r3, #255	; 0xff
    af6a:	d111      	bne.n	af90 <send_nav_values+0x65c>
    af6c:	f24b 6329 	movw	r3, #46633	; 0xb629
    af70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af74:	2200      	movs	r2, #0
    af76:	701a      	strb	r2, [r3, #0]
    af78:	e00a      	b.n	af90 <send_nav_values+0x65c>
    af7a:	bf00      	nop
    af7c:	2004bbdd 	.word	0x2004bbdd
    af80:	2004bbde 	.word	0x2004bbde
    af84:	2004bbdf 	.word	0x2004bbdf
    af88:	2004bbe1 	.word	0x2004bbe1
    af8c:	2004bbe2 	.word	0x2004bbe2
    af90:	f24b 6329 	movw	r3, #46633	; 0xb629
    af94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af98:	781b      	ldrb	r3, [r3, #0]
    af9a:	461a      	mov	r2, r3
    af9c:	f64b 33e0 	movw	r3, #48096	; 0xbbe0
    afa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afa4:	78d9      	ldrb	r1, [r3, #3]
    afa6:	f24b 632c 	movw	r3, #46636	; 0xb62c
    afaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afae:	5499      	strb	r1, [r3, r2]
    afb0:	4bd3      	ldr	r3, [pc, #844]	; (b300 <send_nav_values+0x9cc>)
    afb2:	781a      	ldrb	r2, [r3, #0]
    afb4:	f24b 732d 	movw	r3, #46893	; 0xb72d
    afb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afbc:	781b      	ldrb	r3, [r3, #0]
    afbe:	4413      	add	r3, r2
    afc0:	b2da      	uxtb	r2, r3
    afc2:	f24b 732d 	movw	r3, #46893	; 0xb72d
    afc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afca:	701a      	strb	r2, [r3, #0]
    afcc:	f24b 732e 	movw	r3, #46894	; 0xb72e
    afd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afd4:	781a      	ldrb	r2, [r3, #0]
    afd6:	f24b 732d 	movw	r3, #46893	; 0xb72d
    afda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afde:	781b      	ldrb	r3, [r3, #0]
    afe0:	4413      	add	r3, r2
    afe2:	b2da      	uxtb	r2, r3
    afe4:	f24b 732e 	movw	r3, #46894	; 0xb72e
    afe8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afec:	701a      	strb	r2, [r3, #0]
    afee:	f24b 6329 	movw	r3, #46633	; 0xb629
    aff2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aff6:	781b      	ldrb	r3, [r3, #0]
    aff8:	3301      	adds	r3, #1
    affa:	b2da      	uxtb	r2, r3
    affc:	f24b 6329 	movw	r3, #46633	; 0xb629
    b000:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b004:	701a      	strb	r2, [r3, #0]
    b006:	f24b 6329 	movw	r3, #46633	; 0xb629
    b00a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b00e:	781b      	ldrb	r3, [r3, #0]
    b010:	2bff      	cmp	r3, #255	; 0xff
    b012:	d105      	bne.n	b020 <send_nav_values+0x6ec>
    b014:	f24b 6329 	movw	r3, #46633	; 0xb629
    b018:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b01c:	2200      	movs	r2, #0
    b01e:	701a      	strb	r2, [r3, #0]
    b020:	f24b 6329 	movw	r3, #46633	; 0xb629
    b024:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b028:	781b      	ldrb	r3, [r3, #0]
    b02a:	461a      	mov	r2, r3
    b02c:	f64b 136c 	movw	r3, #47468	; 0xb96c
    b030:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b034:	7819      	ldrb	r1, [r3, #0]
    b036:	f24b 632c 	movw	r3, #46636	; 0xb62c
    b03a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b03e:	5499      	strb	r1, [r3, r2]
    b040:	f64b 136c 	movw	r3, #47468	; 0xb96c
    b044:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b048:	781a      	ldrb	r2, [r3, #0]
    b04a:	f24b 732d 	movw	r3, #46893	; 0xb72d
    b04e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b052:	781b      	ldrb	r3, [r3, #0]
    b054:	4413      	add	r3, r2
    b056:	b2da      	uxtb	r2, r3
    b058:	f24b 732d 	movw	r3, #46893	; 0xb72d
    b05c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b060:	701a      	strb	r2, [r3, #0]
    b062:	f24b 732e 	movw	r3, #46894	; 0xb72e
    b066:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b06a:	781a      	ldrb	r2, [r3, #0]
    b06c:	f24b 732d 	movw	r3, #46893	; 0xb72d
    b070:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b074:	781b      	ldrb	r3, [r3, #0]
    b076:	4413      	add	r3, r2
    b078:	b2da      	uxtb	r2, r3
    b07a:	f24b 732e 	movw	r3, #46894	; 0xb72e
    b07e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b082:	701a      	strb	r2, [r3, #0]
    b084:	f24b 6329 	movw	r3, #46633	; 0xb629
    b088:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b08c:	781b      	ldrb	r3, [r3, #0]
    b08e:	3301      	adds	r3, #1
    b090:	b2da      	uxtb	r2, r3
    b092:	f24b 6329 	movw	r3, #46633	; 0xb629
    b096:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b09a:	701a      	strb	r2, [r3, #0]
    b09c:	f24b 6329 	movw	r3, #46633	; 0xb629
    b0a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0a4:	781b      	ldrb	r3, [r3, #0]
    b0a6:	2bff      	cmp	r3, #255	; 0xff
    b0a8:	d105      	bne.n	b0b6 <send_nav_values+0x782>
    b0aa:	f24b 6329 	movw	r3, #46633	; 0xb629
    b0ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0b2:	2200      	movs	r2, #0
    b0b4:	701a      	strb	r2, [r3, #0]
    b0b6:	f24b 6329 	movw	r3, #46633	; 0xb629
    b0ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0be:	781b      	ldrb	r3, [r3, #0]
    b0c0:	461a      	mov	r2, r3
    b0c2:	f64b 136c 	movw	r3, #47468	; 0xb96c
    b0c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0ca:	7859      	ldrb	r1, [r3, #1]
    b0cc:	f24b 632c 	movw	r3, #46636	; 0xb62c
    b0d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0d4:	5499      	strb	r1, [r3, r2]
    b0d6:	4b8b      	ldr	r3, [pc, #556]	; (b304 <send_nav_values+0x9d0>)
    b0d8:	781a      	ldrb	r2, [r3, #0]
    b0da:	f24b 732d 	movw	r3, #46893	; 0xb72d
    b0de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0e2:	781b      	ldrb	r3, [r3, #0]
    b0e4:	4413      	add	r3, r2
    b0e6:	b2da      	uxtb	r2, r3
    b0e8:	f24b 732d 	movw	r3, #46893	; 0xb72d
    b0ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0f0:	701a      	strb	r2, [r3, #0]
    b0f2:	f24b 732e 	movw	r3, #46894	; 0xb72e
    b0f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0fa:	781a      	ldrb	r2, [r3, #0]
    b0fc:	f24b 732d 	movw	r3, #46893	; 0xb72d
    b100:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b104:	781b      	ldrb	r3, [r3, #0]
    b106:	4413      	add	r3, r2
    b108:	b2da      	uxtb	r2, r3
    b10a:	f24b 732e 	movw	r3, #46894	; 0xb72e
    b10e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b112:	701a      	strb	r2, [r3, #0]
    b114:	f24b 6329 	movw	r3, #46633	; 0xb629
    b118:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b11c:	781b      	ldrb	r3, [r3, #0]
    b11e:	3301      	adds	r3, #1
    b120:	b2da      	uxtb	r2, r3
    b122:	f24b 6329 	movw	r3, #46633	; 0xb629
    b126:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b12a:	701a      	strb	r2, [r3, #0]
    b12c:	f24b 6329 	movw	r3, #46633	; 0xb629
    b130:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b134:	781b      	ldrb	r3, [r3, #0]
    b136:	2bff      	cmp	r3, #255	; 0xff
    b138:	d105      	bne.n	b146 <send_nav_values+0x812>
    b13a:	f24b 6329 	movw	r3, #46633	; 0xb629
    b13e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b142:	2200      	movs	r2, #0
    b144:	701a      	strb	r2, [r3, #0]
    b146:	f24b 6329 	movw	r3, #46633	; 0xb629
    b14a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b14e:	781b      	ldrb	r3, [r3, #0]
    b150:	461a      	mov	r2, r3
    b152:	f64b 136c 	movw	r3, #47468	; 0xb96c
    b156:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b15a:	7899      	ldrb	r1, [r3, #2]
    b15c:	f24b 632c 	movw	r3, #46636	; 0xb62c
    b160:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b164:	5499      	strb	r1, [r3, r2]
    b166:	4b68      	ldr	r3, [pc, #416]	; (b308 <send_nav_values+0x9d4>)
    b168:	781a      	ldrb	r2, [r3, #0]
    b16a:	f24b 732d 	movw	r3, #46893	; 0xb72d
    b16e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b172:	781b      	ldrb	r3, [r3, #0]
    b174:	4413      	add	r3, r2
    b176:	b2da      	uxtb	r2, r3
    b178:	f24b 732d 	movw	r3, #46893	; 0xb72d
    b17c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b180:	701a      	strb	r2, [r3, #0]
    b182:	f24b 732e 	movw	r3, #46894	; 0xb72e
    b186:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b18a:	781a      	ldrb	r2, [r3, #0]
    b18c:	f24b 732d 	movw	r3, #46893	; 0xb72d
    b190:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b194:	781b      	ldrb	r3, [r3, #0]
    b196:	4413      	add	r3, r2
    b198:	b2da      	uxtb	r2, r3
    b19a:	f24b 732e 	movw	r3, #46894	; 0xb72e
    b19e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1a2:	701a      	strb	r2, [r3, #0]
    b1a4:	f24b 6329 	movw	r3, #46633	; 0xb629
    b1a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1ac:	781b      	ldrb	r3, [r3, #0]
    b1ae:	3301      	adds	r3, #1
    b1b0:	b2da      	uxtb	r2, r3
    b1b2:	f24b 6329 	movw	r3, #46633	; 0xb629
    b1b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1ba:	701a      	strb	r2, [r3, #0]
    b1bc:	f24b 6329 	movw	r3, #46633	; 0xb629
    b1c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1c4:	781b      	ldrb	r3, [r3, #0]
    b1c6:	2bff      	cmp	r3, #255	; 0xff
    b1c8:	d105      	bne.n	b1d6 <send_nav_values+0x8a2>
    b1ca:	f24b 6329 	movw	r3, #46633	; 0xb629
    b1ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1d2:	2200      	movs	r2, #0
    b1d4:	701a      	strb	r2, [r3, #0]
    b1d6:	f24b 6329 	movw	r3, #46633	; 0xb629
    b1da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1de:	781b      	ldrb	r3, [r3, #0]
    b1e0:	461a      	mov	r2, r3
    b1e2:	f64b 136c 	movw	r3, #47468	; 0xb96c
    b1e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1ea:	78d9      	ldrb	r1, [r3, #3]
    b1ec:	f24b 632c 	movw	r3, #46636	; 0xb62c
    b1f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1f4:	5499      	strb	r1, [r3, r2]
    b1f6:	4b45      	ldr	r3, [pc, #276]	; (b30c <send_nav_values+0x9d8>)
    b1f8:	781a      	ldrb	r2, [r3, #0]
    b1fa:	f24b 732d 	movw	r3, #46893	; 0xb72d
    b1fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b202:	781b      	ldrb	r3, [r3, #0]
    b204:	4413      	add	r3, r2
    b206:	b2da      	uxtb	r2, r3
    b208:	f24b 732d 	movw	r3, #46893	; 0xb72d
    b20c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b210:	701a      	strb	r2, [r3, #0]
    b212:	f24b 732e 	movw	r3, #46894	; 0xb72e
    b216:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b21a:	781a      	ldrb	r2, [r3, #0]
    b21c:	f24b 732d 	movw	r3, #46893	; 0xb72d
    b220:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b224:	781b      	ldrb	r3, [r3, #0]
    b226:	4413      	add	r3, r2
    b228:	b2da      	uxtb	r2, r3
    b22a:	f24b 732e 	movw	r3, #46894	; 0xb72e
    b22e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b232:	701a      	strb	r2, [r3, #0]
    b234:	f24b 6329 	movw	r3, #46633	; 0xb629
    b238:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b23c:	781b      	ldrb	r3, [r3, #0]
    b23e:	3301      	adds	r3, #1
    b240:	b2da      	uxtb	r2, r3
    b242:	f24b 6329 	movw	r3, #46633	; 0xb629
    b246:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b24a:	701a      	strb	r2, [r3, #0]
    b24c:	f24b 6329 	movw	r3, #46633	; 0xb629
    b250:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b254:	781b      	ldrb	r3, [r3, #0]
    b256:	2bff      	cmp	r3, #255	; 0xff
    b258:	d105      	bne.n	b266 <send_nav_values+0x932>
    b25a:	f24b 6329 	movw	r3, #46633	; 0xb629
    b25e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b262:	2200      	movs	r2, #0
    b264:	701a      	strb	r2, [r3, #0]
    b266:	f24b 6329 	movw	r3, #46633	; 0xb629
    b26a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b26e:	781b      	ldrb	r3, [r3, #0]
    b270:	461a      	mov	r2, r3
    b272:	f64b 13b4 	movw	r3, #47540	; 0xb9b4
    b276:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b27a:	7819      	ldrb	r1, [r3, #0]
    b27c:	f24b 632c 	movw	r3, #46636	; 0xb62c
    b280:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b284:	5499      	strb	r1, [r3, r2]
    b286:	f64b 13b4 	movw	r3, #47540	; 0xb9b4
    b28a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b28e:	781a      	ldrb	r2, [r3, #0]
    b290:	f24b 732d 	movw	r3, #46893	; 0xb72d
    b294:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b298:	781b      	ldrb	r3, [r3, #0]
    b29a:	4413      	add	r3, r2
    b29c:	b2da      	uxtb	r2, r3
    b29e:	f24b 732d 	movw	r3, #46893	; 0xb72d
    b2a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2a6:	701a      	strb	r2, [r3, #0]
    b2a8:	f24b 732e 	movw	r3, #46894	; 0xb72e
    b2ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2b0:	781a      	ldrb	r2, [r3, #0]
    b2b2:	f24b 732d 	movw	r3, #46893	; 0xb72d
    b2b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2ba:	781b      	ldrb	r3, [r3, #0]
    b2bc:	4413      	add	r3, r2
    b2be:	b2da      	uxtb	r2, r3
    b2c0:	f24b 732e 	movw	r3, #46894	; 0xb72e
    b2c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2c8:	701a      	strb	r2, [r3, #0]
    b2ca:	f24b 6329 	movw	r3, #46633	; 0xb629
    b2ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2d2:	781b      	ldrb	r3, [r3, #0]
    b2d4:	3301      	adds	r3, #1
    b2d6:	b2da      	uxtb	r2, r3
    b2d8:	f24b 6329 	movw	r3, #46633	; 0xb629
    b2dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2e0:	701a      	strb	r2, [r3, #0]
    b2e2:	f24b 6329 	movw	r3, #46633	; 0xb629
    b2e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2ea:	781b      	ldrb	r3, [r3, #0]
    b2ec:	2bff      	cmp	r3, #255	; 0xff
    b2ee:	d10f      	bne.n	b310 <send_nav_values+0x9dc>
    b2f0:	f24b 6329 	movw	r3, #46633	; 0xb629
    b2f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2f8:	2200      	movs	r2, #0
    b2fa:	701a      	strb	r2, [r3, #0]
    b2fc:	e008      	b.n	b310 <send_nav_values+0x9dc>
    b2fe:	bf00      	nop
    b300:	2004bbe3 	.word	0x2004bbe3
    b304:	2004b96d 	.word	0x2004b96d
    b308:	2004b96e 	.word	0x2004b96e
    b30c:	2004b96f 	.word	0x2004b96f
    b310:	f24b 6329 	movw	r3, #46633	; 0xb629
    b314:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b318:	781b      	ldrb	r3, [r3, #0]
    b31a:	461a      	mov	r2, r3
    b31c:	f64b 13b4 	movw	r3, #47540	; 0xb9b4
    b320:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b324:	7859      	ldrb	r1, [r3, #1]
    b326:	f24b 632c 	movw	r3, #46636	; 0xb62c
    b32a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b32e:	5499      	strb	r1, [r3, r2]
    b330:	4bd1      	ldr	r3, [pc, #836]	; (b678 <send_nav_values+0xd44>)
    b332:	781a      	ldrb	r2, [r3, #0]
    b334:	f24b 732d 	movw	r3, #46893	; 0xb72d
    b338:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b33c:	781b      	ldrb	r3, [r3, #0]
    b33e:	4413      	add	r3, r2
    b340:	b2da      	uxtb	r2, r3
    b342:	f24b 732d 	movw	r3, #46893	; 0xb72d
    b346:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b34a:	701a      	strb	r2, [r3, #0]
    b34c:	f24b 732e 	movw	r3, #46894	; 0xb72e
    b350:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b354:	781a      	ldrb	r2, [r3, #0]
    b356:	f24b 732d 	movw	r3, #46893	; 0xb72d
    b35a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b35e:	781b      	ldrb	r3, [r3, #0]
    b360:	4413      	add	r3, r2
    b362:	b2da      	uxtb	r2, r3
    b364:	f24b 732e 	movw	r3, #46894	; 0xb72e
    b368:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b36c:	701a      	strb	r2, [r3, #0]
    b36e:	f24b 6329 	movw	r3, #46633	; 0xb629
    b372:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b376:	781b      	ldrb	r3, [r3, #0]
    b378:	3301      	adds	r3, #1
    b37a:	b2da      	uxtb	r2, r3
    b37c:	f24b 6329 	movw	r3, #46633	; 0xb629
    b380:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b384:	701a      	strb	r2, [r3, #0]
    b386:	f24b 6329 	movw	r3, #46633	; 0xb629
    b38a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b38e:	781b      	ldrb	r3, [r3, #0]
    b390:	2bff      	cmp	r3, #255	; 0xff
    b392:	d105      	bne.n	b3a0 <send_nav_values+0xa6c>
    b394:	f24b 6329 	movw	r3, #46633	; 0xb629
    b398:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b39c:	2200      	movs	r2, #0
    b39e:	701a      	strb	r2, [r3, #0]
    b3a0:	f24b 6329 	movw	r3, #46633	; 0xb629
    b3a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3a8:	781b      	ldrb	r3, [r3, #0]
    b3aa:	461a      	mov	r2, r3
    b3ac:	f64b 13b4 	movw	r3, #47540	; 0xb9b4
    b3b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3b4:	7899      	ldrb	r1, [r3, #2]
    b3b6:	f24b 632c 	movw	r3, #46636	; 0xb62c
    b3ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3be:	5499      	strb	r1, [r3, r2]
    b3c0:	4bae      	ldr	r3, [pc, #696]	; (b67c <send_nav_values+0xd48>)
    b3c2:	781a      	ldrb	r2, [r3, #0]
    b3c4:	f24b 732d 	movw	r3, #46893	; 0xb72d
    b3c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3cc:	781b      	ldrb	r3, [r3, #0]
    b3ce:	4413      	add	r3, r2
    b3d0:	b2da      	uxtb	r2, r3
    b3d2:	f24b 732d 	movw	r3, #46893	; 0xb72d
    b3d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3da:	701a      	strb	r2, [r3, #0]
    b3dc:	f24b 732e 	movw	r3, #46894	; 0xb72e
    b3e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3e4:	781a      	ldrb	r2, [r3, #0]
    b3e6:	f24b 732d 	movw	r3, #46893	; 0xb72d
    b3ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3ee:	781b      	ldrb	r3, [r3, #0]
    b3f0:	4413      	add	r3, r2
    b3f2:	b2da      	uxtb	r2, r3
    b3f4:	f24b 732e 	movw	r3, #46894	; 0xb72e
    b3f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3fc:	701a      	strb	r2, [r3, #0]
    b3fe:	f24b 6329 	movw	r3, #46633	; 0xb629
    b402:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b406:	781b      	ldrb	r3, [r3, #0]
    b408:	3301      	adds	r3, #1
    b40a:	b2da      	uxtb	r2, r3
    b40c:	f24b 6329 	movw	r3, #46633	; 0xb629
    b410:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b414:	701a      	strb	r2, [r3, #0]
    b416:	f24b 6329 	movw	r3, #46633	; 0xb629
    b41a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b41e:	781b      	ldrb	r3, [r3, #0]
    b420:	2bff      	cmp	r3, #255	; 0xff
    b422:	d105      	bne.n	b430 <send_nav_values+0xafc>
    b424:	f24b 6329 	movw	r3, #46633	; 0xb629
    b428:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b42c:	2200      	movs	r2, #0
    b42e:	701a      	strb	r2, [r3, #0]
    b430:	f24b 6329 	movw	r3, #46633	; 0xb629
    b434:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b438:	781b      	ldrb	r3, [r3, #0]
    b43a:	461a      	mov	r2, r3
    b43c:	f64b 13b4 	movw	r3, #47540	; 0xb9b4
    b440:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b444:	78d9      	ldrb	r1, [r3, #3]
    b446:	f24b 632c 	movw	r3, #46636	; 0xb62c
    b44a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b44e:	5499      	strb	r1, [r3, r2]
    b450:	4b8b      	ldr	r3, [pc, #556]	; (b680 <send_nav_values+0xd4c>)
    b452:	781a      	ldrb	r2, [r3, #0]
    b454:	f24b 732d 	movw	r3, #46893	; 0xb72d
    b458:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b45c:	781b      	ldrb	r3, [r3, #0]
    b45e:	4413      	add	r3, r2
    b460:	b2da      	uxtb	r2, r3
    b462:	f24b 732d 	movw	r3, #46893	; 0xb72d
    b466:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b46a:	701a      	strb	r2, [r3, #0]
    b46c:	f24b 732e 	movw	r3, #46894	; 0xb72e
    b470:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b474:	781a      	ldrb	r2, [r3, #0]
    b476:	f24b 732d 	movw	r3, #46893	; 0xb72d
    b47a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b47e:	781b      	ldrb	r3, [r3, #0]
    b480:	4413      	add	r3, r2
    b482:	b2da      	uxtb	r2, r3
    b484:	f24b 732e 	movw	r3, #46894	; 0xb72e
    b488:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b48c:	701a      	strb	r2, [r3, #0]
    b48e:	f24b 6329 	movw	r3, #46633	; 0xb629
    b492:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b496:	781b      	ldrb	r3, [r3, #0]
    b498:	3301      	adds	r3, #1
    b49a:	b2da      	uxtb	r2, r3
    b49c:	f24b 6329 	movw	r3, #46633	; 0xb629
    b4a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4a4:	701a      	strb	r2, [r3, #0]
    b4a6:	f24b 6329 	movw	r3, #46633	; 0xb629
    b4aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4ae:	781b      	ldrb	r3, [r3, #0]
    b4b0:	2bff      	cmp	r3, #255	; 0xff
    b4b2:	d105      	bne.n	b4c0 <send_nav_values+0xb8c>
    b4b4:	f24b 6329 	movw	r3, #46633	; 0xb629
    b4b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4bc:	2200      	movs	r2, #0
    b4be:	701a      	strb	r2, [r3, #0]
    b4c0:	f24b 6329 	movw	r3, #46633	; 0xb629
    b4c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4c8:	781b      	ldrb	r3, [r3, #0]
    b4ca:	461a      	mov	r2, r3
    b4cc:	f240 1320 	movw	r3, #288	; 0x120
    b4d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4d4:	7819      	ldrb	r1, [r3, #0]
    b4d6:	f24b 632c 	movw	r3, #46636	; 0xb62c
    b4da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4de:	5499      	strb	r1, [r3, r2]
    b4e0:	f240 1320 	movw	r3, #288	; 0x120
    b4e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4e8:	781a      	ldrb	r2, [r3, #0]
    b4ea:	f24b 732d 	movw	r3, #46893	; 0xb72d
    b4ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4f2:	781b      	ldrb	r3, [r3, #0]
    b4f4:	4413      	add	r3, r2
    b4f6:	b2da      	uxtb	r2, r3
    b4f8:	f24b 732d 	movw	r3, #46893	; 0xb72d
    b4fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b500:	701a      	strb	r2, [r3, #0]
    b502:	f24b 732e 	movw	r3, #46894	; 0xb72e
    b506:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b50a:	781a      	ldrb	r2, [r3, #0]
    b50c:	f24b 732d 	movw	r3, #46893	; 0xb72d
    b510:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b514:	781b      	ldrb	r3, [r3, #0]
    b516:	4413      	add	r3, r2
    b518:	b2da      	uxtb	r2, r3
    b51a:	f24b 732e 	movw	r3, #46894	; 0xb72e
    b51e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b522:	701a      	strb	r2, [r3, #0]
    b524:	f24b 6329 	movw	r3, #46633	; 0xb629
    b528:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b52c:	781b      	ldrb	r3, [r3, #0]
    b52e:	3301      	adds	r3, #1
    b530:	b2da      	uxtb	r2, r3
    b532:	f24b 6329 	movw	r3, #46633	; 0xb629
    b536:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b53a:	701a      	strb	r2, [r3, #0]
    b53c:	f24b 6329 	movw	r3, #46633	; 0xb629
    b540:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b544:	781b      	ldrb	r3, [r3, #0]
    b546:	2bff      	cmp	r3, #255	; 0xff
    b548:	d105      	bne.n	b556 <send_nav_values+0xc22>
    b54a:	f24b 6329 	movw	r3, #46633	; 0xb629
    b54e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b552:	2200      	movs	r2, #0
    b554:	701a      	strb	r2, [r3, #0]
    b556:	f24b 6329 	movw	r3, #46633	; 0xb629
    b55a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b55e:	781b      	ldrb	r3, [r3, #0]
    b560:	461a      	mov	r2, r3
    b562:	f240 1320 	movw	r3, #288	; 0x120
    b566:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b56a:	7859      	ldrb	r1, [r3, #1]
    b56c:	f24b 632c 	movw	r3, #46636	; 0xb62c
    b570:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b574:	5499      	strb	r1, [r3, r2]
    b576:	4b43      	ldr	r3, [pc, #268]	; (b684 <send_nav_values+0xd50>)
    b578:	781a      	ldrb	r2, [r3, #0]
    b57a:	f24b 732d 	movw	r3, #46893	; 0xb72d
    b57e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b582:	781b      	ldrb	r3, [r3, #0]
    b584:	4413      	add	r3, r2
    b586:	b2da      	uxtb	r2, r3
    b588:	f24b 732d 	movw	r3, #46893	; 0xb72d
    b58c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b590:	701a      	strb	r2, [r3, #0]
    b592:	f24b 732e 	movw	r3, #46894	; 0xb72e
    b596:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b59a:	781a      	ldrb	r2, [r3, #0]
    b59c:	f24b 732d 	movw	r3, #46893	; 0xb72d
    b5a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5a4:	781b      	ldrb	r3, [r3, #0]
    b5a6:	4413      	add	r3, r2
    b5a8:	b2da      	uxtb	r2, r3
    b5aa:	f24b 732e 	movw	r3, #46894	; 0xb72e
    b5ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5b2:	701a      	strb	r2, [r3, #0]
    b5b4:	f24b 6329 	movw	r3, #46633	; 0xb629
    b5b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5bc:	781b      	ldrb	r3, [r3, #0]
    b5be:	3301      	adds	r3, #1
    b5c0:	b2da      	uxtb	r2, r3
    b5c2:	f24b 6329 	movw	r3, #46633	; 0xb629
    b5c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5ca:	701a      	strb	r2, [r3, #0]
    b5cc:	f24b 6329 	movw	r3, #46633	; 0xb629
    b5d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5d4:	781b      	ldrb	r3, [r3, #0]
    b5d6:	2bff      	cmp	r3, #255	; 0xff
    b5d8:	d105      	bne.n	b5e6 <send_nav_values+0xcb2>
    b5da:	f24b 6329 	movw	r3, #46633	; 0xb629
    b5de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5e2:	2200      	movs	r2, #0
    b5e4:	701a      	strb	r2, [r3, #0]
    b5e6:	f24b 6329 	movw	r3, #46633	; 0xb629
    b5ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5ee:	781b      	ldrb	r3, [r3, #0]
    b5f0:	461a      	mov	r2, r3
    b5f2:	f240 1320 	movw	r3, #288	; 0x120
    b5f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5fa:	7899      	ldrb	r1, [r3, #2]
    b5fc:	f24b 632c 	movw	r3, #46636	; 0xb62c
    b600:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b604:	5499      	strb	r1, [r3, r2]
    b606:	4b20      	ldr	r3, [pc, #128]	; (b688 <send_nav_values+0xd54>)
    b608:	781a      	ldrb	r2, [r3, #0]
    b60a:	f24b 732d 	movw	r3, #46893	; 0xb72d
    b60e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b612:	781b      	ldrb	r3, [r3, #0]
    b614:	4413      	add	r3, r2
    b616:	b2da      	uxtb	r2, r3
    b618:	f24b 732d 	movw	r3, #46893	; 0xb72d
    b61c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b620:	701a      	strb	r2, [r3, #0]
    b622:	f24b 732e 	movw	r3, #46894	; 0xb72e
    b626:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b62a:	781a      	ldrb	r2, [r3, #0]
    b62c:	f24b 732d 	movw	r3, #46893	; 0xb72d
    b630:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b634:	781b      	ldrb	r3, [r3, #0]
    b636:	4413      	add	r3, r2
    b638:	b2da      	uxtb	r2, r3
    b63a:	f24b 732e 	movw	r3, #46894	; 0xb72e
    b63e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b642:	701a      	strb	r2, [r3, #0]
    b644:	f24b 6329 	movw	r3, #46633	; 0xb629
    b648:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b64c:	781b      	ldrb	r3, [r3, #0]
    b64e:	3301      	adds	r3, #1
    b650:	b2da      	uxtb	r2, r3
    b652:	f24b 6329 	movw	r3, #46633	; 0xb629
    b656:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b65a:	701a      	strb	r2, [r3, #0]
    b65c:	f24b 6329 	movw	r3, #46633	; 0xb629
    b660:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b664:	781b      	ldrb	r3, [r3, #0]
    b666:	2bff      	cmp	r3, #255	; 0xff
    b668:	d110      	bne.n	b68c <send_nav_values+0xd58>
    b66a:	f24b 6329 	movw	r3, #46633	; 0xb629
    b66e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b672:	2200      	movs	r2, #0
    b674:	701a      	strb	r2, [r3, #0]
    b676:	e009      	b.n	b68c <send_nav_values+0xd58>
    b678:	2004b9b5 	.word	0x2004b9b5
    b67c:	2004b9b6 	.word	0x2004b9b6
    b680:	2004b9b7 	.word	0x2004b9b7
    b684:	20000121 	.word	0x20000121
    b688:	20000122 	.word	0x20000122
    b68c:	f24b 6329 	movw	r3, #46633	; 0xb629
    b690:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b694:	781b      	ldrb	r3, [r3, #0]
    b696:	461a      	mov	r2, r3
    b698:	f240 1320 	movw	r3, #288	; 0x120
    b69c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6a0:	78d9      	ldrb	r1, [r3, #3]
    b6a2:	f24b 632c 	movw	r3, #46636	; 0xb62c
    b6a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6aa:	5499      	strb	r1, [r3, r2]
    b6ac:	4bc2      	ldr	r3, [pc, #776]	; (b9b8 <send_nav_values+0x1084>)
    b6ae:	781a      	ldrb	r2, [r3, #0]
    b6b0:	f24b 732d 	movw	r3, #46893	; 0xb72d
    b6b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6b8:	781b      	ldrb	r3, [r3, #0]
    b6ba:	4413      	add	r3, r2
    b6bc:	b2da      	uxtb	r2, r3
    b6be:	f24b 732d 	movw	r3, #46893	; 0xb72d
    b6c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6c6:	701a      	strb	r2, [r3, #0]
    b6c8:	f24b 732e 	movw	r3, #46894	; 0xb72e
    b6cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6d0:	781a      	ldrb	r2, [r3, #0]
    b6d2:	f24b 732d 	movw	r3, #46893	; 0xb72d
    b6d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6da:	781b      	ldrb	r3, [r3, #0]
    b6dc:	4413      	add	r3, r2
    b6de:	b2da      	uxtb	r2, r3
    b6e0:	f24b 732e 	movw	r3, #46894	; 0xb72e
    b6e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6e8:	701a      	strb	r2, [r3, #0]
    b6ea:	f24b 6329 	movw	r3, #46633	; 0xb629
    b6ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6f2:	781b      	ldrb	r3, [r3, #0]
    b6f4:	3301      	adds	r3, #1
    b6f6:	b2da      	uxtb	r2, r3
    b6f8:	f24b 6329 	movw	r3, #46633	; 0xb629
    b6fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b700:	701a      	strb	r2, [r3, #0]
    b702:	f24b 6329 	movw	r3, #46633	; 0xb629
    b706:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b70a:	781b      	ldrb	r3, [r3, #0]
    b70c:	2bff      	cmp	r3, #255	; 0xff
    b70e:	d105      	bne.n	b71c <send_nav_values+0xde8>
    b710:	f24b 6329 	movw	r3, #46633	; 0xb629
    b714:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b718:	2200      	movs	r2, #0
    b71a:	701a      	strb	r2, [r3, #0]
    b71c:	f24b 6329 	movw	r3, #46633	; 0xb629
    b720:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b724:	781b      	ldrb	r3, [r3, #0]
    b726:	461a      	mov	r2, r3
    b728:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    b72c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b730:	7819      	ldrb	r1, [r3, #0]
    b732:	f24b 632c 	movw	r3, #46636	; 0xb62c
    b736:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b73a:	5499      	strb	r1, [r3, r2]
    b73c:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    b740:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b744:	781a      	ldrb	r2, [r3, #0]
    b746:	f24b 732d 	movw	r3, #46893	; 0xb72d
    b74a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b74e:	781b      	ldrb	r3, [r3, #0]
    b750:	4413      	add	r3, r2
    b752:	b2da      	uxtb	r2, r3
    b754:	f24b 732d 	movw	r3, #46893	; 0xb72d
    b758:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b75c:	701a      	strb	r2, [r3, #0]
    b75e:	f24b 732e 	movw	r3, #46894	; 0xb72e
    b762:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b766:	781a      	ldrb	r2, [r3, #0]
    b768:	f24b 732d 	movw	r3, #46893	; 0xb72d
    b76c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b770:	781b      	ldrb	r3, [r3, #0]
    b772:	4413      	add	r3, r2
    b774:	b2da      	uxtb	r2, r3
    b776:	f24b 732e 	movw	r3, #46894	; 0xb72e
    b77a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b77e:	701a      	strb	r2, [r3, #0]
    b780:	f24b 6329 	movw	r3, #46633	; 0xb629
    b784:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b788:	781b      	ldrb	r3, [r3, #0]
    b78a:	3301      	adds	r3, #1
    b78c:	b2da      	uxtb	r2, r3
    b78e:	f24b 6329 	movw	r3, #46633	; 0xb629
    b792:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b796:	701a      	strb	r2, [r3, #0]
    b798:	f24b 6329 	movw	r3, #46633	; 0xb629
    b79c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7a0:	781b      	ldrb	r3, [r3, #0]
    b7a2:	2bff      	cmp	r3, #255	; 0xff
    b7a4:	d105      	bne.n	b7b2 <send_nav_values+0xe7e>
    b7a6:	f24b 6329 	movw	r3, #46633	; 0xb629
    b7aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7ae:	2200      	movs	r2, #0
    b7b0:	701a      	strb	r2, [r3, #0]
    b7b2:	f24b 6329 	movw	r3, #46633	; 0xb629
    b7b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7ba:	781b      	ldrb	r3, [r3, #0]
    b7bc:	461a      	mov	r2, r3
    b7be:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    b7c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7c6:	7859      	ldrb	r1, [r3, #1]
    b7c8:	f24b 632c 	movw	r3, #46636	; 0xb62c
    b7cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7d0:	5499      	strb	r1, [r3, r2]
    b7d2:	4b7a      	ldr	r3, [pc, #488]	; (b9bc <send_nav_values+0x1088>)
    b7d4:	781a      	ldrb	r2, [r3, #0]
    b7d6:	f24b 732d 	movw	r3, #46893	; 0xb72d
    b7da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7de:	781b      	ldrb	r3, [r3, #0]
    b7e0:	4413      	add	r3, r2
    b7e2:	b2da      	uxtb	r2, r3
    b7e4:	f24b 732d 	movw	r3, #46893	; 0xb72d
    b7e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7ec:	701a      	strb	r2, [r3, #0]
    b7ee:	f24b 732e 	movw	r3, #46894	; 0xb72e
    b7f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7f6:	781a      	ldrb	r2, [r3, #0]
    b7f8:	f24b 732d 	movw	r3, #46893	; 0xb72d
    b7fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b800:	781b      	ldrb	r3, [r3, #0]
    b802:	4413      	add	r3, r2
    b804:	b2da      	uxtb	r2, r3
    b806:	f24b 732e 	movw	r3, #46894	; 0xb72e
    b80a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b80e:	701a      	strb	r2, [r3, #0]
    b810:	f24b 6329 	movw	r3, #46633	; 0xb629
    b814:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b818:	781b      	ldrb	r3, [r3, #0]
    b81a:	3301      	adds	r3, #1
    b81c:	b2da      	uxtb	r2, r3
    b81e:	f24b 6329 	movw	r3, #46633	; 0xb629
    b822:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b826:	701a      	strb	r2, [r3, #0]
    b828:	f24b 6329 	movw	r3, #46633	; 0xb629
    b82c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b830:	781b      	ldrb	r3, [r3, #0]
    b832:	2bff      	cmp	r3, #255	; 0xff
    b834:	d105      	bne.n	b842 <send_nav_values+0xf0e>
    b836:	f24b 6329 	movw	r3, #46633	; 0xb629
    b83a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b83e:	2200      	movs	r2, #0
    b840:	701a      	strb	r2, [r3, #0]
    b842:	f24b 6329 	movw	r3, #46633	; 0xb629
    b846:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b84a:	781b      	ldrb	r3, [r3, #0]
    b84c:	461a      	mov	r2, r3
    b84e:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    b852:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b856:	7899      	ldrb	r1, [r3, #2]
    b858:	f24b 632c 	movw	r3, #46636	; 0xb62c
    b85c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b860:	5499      	strb	r1, [r3, r2]
    b862:	4b57      	ldr	r3, [pc, #348]	; (b9c0 <send_nav_values+0x108c>)
    b864:	781a      	ldrb	r2, [r3, #0]
    b866:	f24b 732d 	movw	r3, #46893	; 0xb72d
    b86a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b86e:	781b      	ldrb	r3, [r3, #0]
    b870:	4413      	add	r3, r2
    b872:	b2da      	uxtb	r2, r3
    b874:	f24b 732d 	movw	r3, #46893	; 0xb72d
    b878:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b87c:	701a      	strb	r2, [r3, #0]
    b87e:	f24b 732e 	movw	r3, #46894	; 0xb72e
    b882:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b886:	781a      	ldrb	r2, [r3, #0]
    b888:	f24b 732d 	movw	r3, #46893	; 0xb72d
    b88c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b890:	781b      	ldrb	r3, [r3, #0]
    b892:	4413      	add	r3, r2
    b894:	b2da      	uxtb	r2, r3
    b896:	f24b 732e 	movw	r3, #46894	; 0xb72e
    b89a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b89e:	701a      	strb	r2, [r3, #0]
    b8a0:	f24b 6329 	movw	r3, #46633	; 0xb629
    b8a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8a8:	781b      	ldrb	r3, [r3, #0]
    b8aa:	3301      	adds	r3, #1
    b8ac:	b2da      	uxtb	r2, r3
    b8ae:	f24b 6329 	movw	r3, #46633	; 0xb629
    b8b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8b6:	701a      	strb	r2, [r3, #0]
    b8b8:	f24b 6329 	movw	r3, #46633	; 0xb629
    b8bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8c0:	781b      	ldrb	r3, [r3, #0]
    b8c2:	2bff      	cmp	r3, #255	; 0xff
    b8c4:	d105      	bne.n	b8d2 <send_nav_values+0xf9e>
    b8c6:	f24b 6329 	movw	r3, #46633	; 0xb629
    b8ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8ce:	2200      	movs	r2, #0
    b8d0:	701a      	strb	r2, [r3, #0]
    b8d2:	f24b 6329 	movw	r3, #46633	; 0xb629
    b8d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8da:	781b      	ldrb	r3, [r3, #0]
    b8dc:	461a      	mov	r2, r3
    b8de:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    b8e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8e6:	78d9      	ldrb	r1, [r3, #3]
    b8e8:	f24b 632c 	movw	r3, #46636	; 0xb62c
    b8ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8f0:	5499      	strb	r1, [r3, r2]
    b8f2:	4b34      	ldr	r3, [pc, #208]	; (b9c4 <send_nav_values+0x1090>)
    b8f4:	781a      	ldrb	r2, [r3, #0]
    b8f6:	f24b 732d 	movw	r3, #46893	; 0xb72d
    b8fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8fe:	781b      	ldrb	r3, [r3, #0]
    b900:	4413      	add	r3, r2
    b902:	b2da      	uxtb	r2, r3
    b904:	f24b 732d 	movw	r3, #46893	; 0xb72d
    b908:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b90c:	701a      	strb	r2, [r3, #0]
    b90e:	f24b 732e 	movw	r3, #46894	; 0xb72e
    b912:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b916:	781a      	ldrb	r2, [r3, #0]
    b918:	f24b 732d 	movw	r3, #46893	; 0xb72d
    b91c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b920:	781b      	ldrb	r3, [r3, #0]
    b922:	4413      	add	r3, r2
    b924:	b2da      	uxtb	r2, r3
    b926:	f24b 732e 	movw	r3, #46894	; 0xb72e
    b92a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b92e:	701a      	strb	r2, [r3, #0]
    b930:	f24b 6329 	movw	r3, #46633	; 0xb629
    b934:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b938:	781b      	ldrb	r3, [r3, #0]
    b93a:	3301      	adds	r3, #1
    b93c:	b2da      	uxtb	r2, r3
    b93e:	f24b 6329 	movw	r3, #46633	; 0xb629
    b942:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b946:	701a      	strb	r2, [r3, #0]
    b948:	f24b 6329 	movw	r3, #46633	; 0xb629
    b94c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b950:	781b      	ldrb	r3, [r3, #0]
    b952:	2bff      	cmp	r3, #255	; 0xff
    b954:	d105      	bne.n	b962 <send_nav_values+0x102e>
    b956:	f24b 6329 	movw	r3, #46633	; 0xb629
    b95a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b95e:	2200      	movs	r2, #0
    b960:	701a      	strb	r2, [r3, #0]
    b962:	f24b 6329 	movw	r3, #46633	; 0xb629
    b966:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b96a:	781b      	ldrb	r3, [r3, #0]
    b96c:	461a      	mov	r2, r3
    b96e:	f24b 732d 	movw	r3, #46893	; 0xb72d
    b972:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b976:	7819      	ldrb	r1, [r3, #0]
    b978:	f24b 632c 	movw	r3, #46636	; 0xb62c
    b97c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b980:	5499      	strb	r1, [r3, r2]
    b982:	f24b 6329 	movw	r3, #46633	; 0xb629
    b986:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b98a:	781b      	ldrb	r3, [r3, #0]
    b98c:	3301      	adds	r3, #1
    b98e:	b2da      	uxtb	r2, r3
    b990:	f24b 6329 	movw	r3, #46633	; 0xb629
    b994:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b998:	701a      	strb	r2, [r3, #0]
    b99a:	f24b 6329 	movw	r3, #46633	; 0xb629
    b99e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9a2:	781b      	ldrb	r3, [r3, #0]
    b9a4:	2bff      	cmp	r3, #255	; 0xff
    b9a6:	d10f      	bne.n	b9c8 <send_nav_values+0x1094>
    b9a8:	f24b 6329 	movw	r3, #46633	; 0xb629
    b9ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9b0:	2200      	movs	r2, #0
    b9b2:	701a      	strb	r2, [r3, #0]
    b9b4:	e008      	b.n	b9c8 <send_nav_values+0x1094>
    b9b6:	bf00      	nop
    b9b8:	20000123 	.word	0x20000123
    b9bc:	2004b9b9 	.word	0x2004b9b9
    b9c0:	2004b9ba 	.word	0x2004b9ba
    b9c4:	2004b9bb 	.word	0x2004b9bb
    b9c8:	f24b 6329 	movw	r3, #46633	; 0xb629
    b9cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9d0:	781b      	ldrb	r3, [r3, #0]
    b9d2:	461a      	mov	r2, r3
    b9d4:	f24b 732e 	movw	r3, #46894	; 0xb72e
    b9d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9dc:	7819      	ldrb	r1, [r3, #0]
    b9de:	f24b 632c 	movw	r3, #46636	; 0xb62c
    b9e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9e6:	5499      	strb	r1, [r3, r2]
    b9e8:	f24b 6329 	movw	r3, #46633	; 0xb629
    b9ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9f0:	781b      	ldrb	r3, [r3, #0]
    b9f2:	3301      	adds	r3, #1
    b9f4:	b2da      	uxtb	r2, r3
    b9f6:	f24b 6329 	movw	r3, #46633	; 0xb629
    b9fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9fe:	701a      	strb	r2, [r3, #0]
    ba00:	f24b 6329 	movw	r3, #46633	; 0xb629
    ba04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba08:	781b      	ldrb	r3, [r3, #0]
    ba0a:	2bff      	cmp	r3, #255	; 0xff
    ba0c:	d105      	bne.n	ba1a <send_nav_values+0x10e6>
    ba0e:	f24b 6329 	movw	r3, #46633	; 0xb629
    ba12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba16:	2200      	movs	r2, #0
    ba18:	701a      	strb	r2, [r3, #0]
    ba1a:	f248 0339 	movw	r3, #32825	; 0x8039
    ba1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba22:	781b      	ldrb	r3, [r3, #0]
    ba24:	b2db      	uxtb	r3, r3
    ba26:	f003 0310 	and.w	r3, r3, #16
    ba2a:	2b00      	cmp	r3, #0
    ba2c:	d15a      	bne.n	bae4 <send_nav_values+0x11b0>
    ba2e:	f24b 632a 	movw	r3, #46634	; 0xb62a
    ba32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba36:	781b      	ldrb	r3, [r3, #0]
    ba38:	b2db      	uxtb	r3, r3
    ba3a:	461a      	mov	r2, r3
    ba3c:	f24b 632c 	movw	r3, #46636	; 0xb62c
    ba40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba44:	5c9a      	ldrb	r2, [r3, r2]
    ba46:	f24b 732b 	movw	r3, #46891	; 0xb72b
    ba4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba4e:	701a      	strb	r2, [r3, #0]
    ba50:	f24b 732c 	movw	r3, #46892	; 0xb72c
    ba54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba58:	2200      	movs	r2, #0
    ba5a:	701a      	strb	r2, [r3, #0]
    ba5c:	f24b 632a 	movw	r3, #46634	; 0xb62a
    ba60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba64:	781b      	ldrb	r3, [r3, #0]
    ba66:	b2db      	uxtb	r3, r3
    ba68:	3301      	adds	r3, #1
    ba6a:	b2da      	uxtb	r2, r3
    ba6c:	f24b 632a 	movw	r3, #46634	; 0xb62a
    ba70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba74:	701a      	strb	r2, [r3, #0]
    ba76:	f24b 632a 	movw	r3, #46634	; 0xb62a
    ba7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba7e:	781b      	ldrb	r3, [r3, #0]
    ba80:	b2db      	uxtb	r3, r3
    ba82:	2bff      	cmp	r3, #255	; 0xff
    ba84:	d105      	bne.n	ba92 <send_nav_values+0x115e>
    ba86:	f24b 632a 	movw	r3, #46634	; 0xb62a
    ba8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba8e:	2200      	movs	r2, #0
    ba90:	701a      	strb	r2, [r3, #0]
    ba92:	f248 0338 	movw	r3, #32824	; 0x8038
    ba96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba9a:	f248 0238 	movw	r2, #32824	; 0x8038
    ba9e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    baa2:	7812      	ldrb	r2, [r2, #0]
    baa4:	b2d2      	uxtb	r2, r2
    baa6:	f042 0201 	orr.w	r2, r2, #1
    baaa:	b2d2      	uxtb	r2, r2
    baac:	701a      	strb	r2, [r3, #0]
    baae:	f248 0339 	movw	r3, #32825	; 0x8039
    bab2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bab6:	f248 0239 	movw	r2, #32825	; 0x8039
    baba:	f2c2 0200 	movt	r2, #8192	; 0x2000
    babe:	7812      	ldrb	r2, [r2, #0]
    bac0:	b2d2      	uxtb	r2, r2
    bac2:	f042 0210 	orr.w	r2, r2, #16
    bac6:	b2d2      	uxtb	r2, r2
    bac8:	701a      	strb	r2, [r3, #0]
    baca:	e00b      	b.n	bae4 <send_nav_values+0x11b0>
    bacc:	f24b 6328 	movw	r3, #46632	; 0xb628
    bad0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bad4:	781b      	ldrb	r3, [r3, #0]
    bad6:	3301      	adds	r3, #1
    bad8:	b2da      	uxtb	r2, r3
    bada:	f24b 6328 	movw	r3, #46632	; 0xb628
    bade:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bae2:	701a      	strb	r2, [r3, #0]
}
    bae4:	46bd      	mov	sp, r7
    bae6:	f85d 7b04 	ldr.w	r7, [sp], #4
    baea:	4770      	bx	lr

0000baec <course_run>:

void course_run(void){
    baec:	b580      	push	{r7, lr}
    baee:	af00      	add	r7, sp, #0
  
  if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) 
    baf0:	f24b 630c 	movw	r3, #46604	; 0xb60c
    baf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    baf8:	781b      	ldrb	r3, [r3, #0]
    bafa:	2b02      	cmp	r3, #2
    bafc:	d006      	beq.n	bb0c <course_run+0x20>
    bafe:	f24b 630c 	movw	r3, #46604	; 0xb60c
    bb02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb06:	781b      	ldrb	r3, [r3, #0]
    bb08:	2b03      	cmp	r3, #3
    bb0a:	d112      	bne.n	bb32 <course_run+0x46>
  {
    if (lateral_mode >= LATERAL_MODE_COURSE)
    bb0c:	f24b 630e 	movw	r3, #46606	; 0xb60e
    bb10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb14:	781b      	ldrb	r3, [r3, #0]
    bb16:	2b02      	cmp	r3, #2
    bb18:	d901      	bls.n	bb1e <course_run+0x32>
      course_pid_run(); /* aka compute nav_desired_roll */
    bb1a:	f001 f98d 	bl	ce38 <course_pid_run>
    desired_roll = nav_desired_roll;
    bb1e:	f64b 13b0 	movw	r3, #47536	; 0xb9b0
    bb22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb26:	681a      	ldr	r2, [r3, #0]
    bb28:	f64b 1354 	movw	r3, #47444	; 0xb954
    bb2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb30:	601a      	str	r2, [r3, #0]
  }  
  //vPrintString("S_17 Navigation task end!\n\r");
}
    bb32:	bd80      	pop	{r7, pc}

0000bb34 <altitude_control_task>:

void altitude_control_task(void)
{
    bb34:	b580      	push	{r7, lr}
    bb36:	af00      	add	r7, sp, #0
	//vPrintString("S_18 navigation_task start! \n\r"); //SunnyBeike
	if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) {
    bb38:	f24b 630c 	movw	r3, #46604	; 0xb60c
    bb3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb40:	781b      	ldrb	r3, [r3, #0]
    bb42:	2b02      	cmp	r3, #2
    bb44:	d006      	beq.n	bb54 <altitude_control_task+0x20>
    bb46:	f24b 630c 	movw	r3, #46604	; 0xb60c
    bb4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb4e:	781b      	ldrb	r3, [r3, #0]
    bb50:	2b03      	cmp	r3, #3
    bb52:	d108      	bne.n	bb66 <altitude_control_task+0x32>
		if (vertical_mode == VERTICAL_MODE_AUTO_ALT)
    bb54:	f24b 630d 	movw	r3, #46605	; 0xb60d
    bb58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb5c:	781b      	ldrb	r3, [r3, #0]
    bb5e:	2b03      	cmp	r3, #3
    bb60:	d101      	bne.n	bb66 <altitude_control_task+0x32>
      			altitude_pid_run();
    bb62:	f001 fbf1 	bl	d348 <altitude_pid_run>
	}
	//vPrintString("S_18 navigation_task end! \n\r"); //SunnyBeike
}
    bb66:	bd80      	pop	{r7, pc}

0000bb68 <climb_control_task>:
void climb_control_task(void)
{
    bb68:	b580      	push	{r7, lr}
    bb6a:	af00      	add	r7, sp, #0
	//vPrintString("S_19 navigation_task start! \n\r"); //SunnyBeike
   if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) 
    bb6c:	f24b 630c 	movw	r3, #46604	; 0xb60c
    bb70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb74:	781b      	ldrb	r3, [r3, #0]
    bb76:	2b02      	cmp	r3, #2
    bb78:	d006      	beq.n	bb88 <climb_control_task+0x20>
    bb7a:	f24b 630c 	movw	r3, #46604	; 0xb60c
    bb7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb82:	781b      	ldrb	r3, [r3, #0]
    bb84:	2b03      	cmp	r3, #3
    bb86:	d135      	bne.n	bbf4 <climb_control_task+0x8c>
   {
	if (vertical_mode >= VERTICAL_MODE_AUTO_CLIMB)
    bb88:	f24b 630d 	movw	r3, #46605	; 0xb60d
    bb8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb90:	781b      	ldrb	r3, [r3, #0]
    bb92:	2b01      	cmp	r3, #1
    bb94:	d901      	bls.n	bb9a <climb_control_task+0x32>
        	climb_pid_run();
    bb96:	f001 fa07 	bl	cfa8 <climb_pid_run>
   	if (vertical_mode == VERTICAL_MODE_AUTO_GAZ)
    bb9a:	f24b 630d 	movw	r3, #46605	; 0xb60d
    bb9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bba2:	781b      	ldrb	r3, [r3, #0]
    bba4:	2b01      	cmp	r3, #1
    bba6:	d10a      	bne.n	bbbe <climb_control_task+0x56>
   		 desired_gaz = nav_desired_gaz;
    bba8:	f64b 13a8 	movw	r3, #47528	; 0xb9a8
    bbac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbb0:	881b      	ldrh	r3, [r3, #0]
    bbb2:	b29a      	uxth	r2, r3
    bbb4:	f64b 135c 	movw	r3, #47452	; 0xb95c
    bbb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbbc:	801a      	strh	r2, [r3, #0]
   	if (low_battery || (!estimator_flight_time && !launch))
    bbbe:	f24b 6315 	movw	r3, #46613	; 0xb615
    bbc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbc6:	781b      	ldrb	r3, [r3, #0]
    bbc8:	2b00      	cmp	r3, #0
    bbca:	d10d      	bne.n	bbe8 <climb_control_task+0x80>
    bbcc:	f64b 430c 	movw	r3, #48140	; 0xbc0c
    bbd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbd4:	881b      	ldrh	r3, [r3, #0]
    bbd6:	2b00      	cmp	r3, #0
    bbd8:	d10c      	bne.n	bbf4 <climb_control_task+0x8c>
    bbda:	f24b 6320 	movw	r3, #46624	; 0xb620
    bbde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbe2:	781b      	ldrb	r3, [r3, #0]
    bbe4:	2b00      	cmp	r3, #0
    bbe6:	d105      	bne.n	bbf4 <climb_control_task+0x8c>
   		 desired_gaz = 0.;
    bbe8:	f64b 135c 	movw	r3, #47452	; 0xb95c
    bbec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbf0:	2200      	movs	r2, #0
    bbf2:	801a      	strh	r2, [r3, #0]
  }  
	//vPrintString("S_19 navigation_task end! \n\r"); //SunnyBeike
}
    bbf4:	bd80      	pop	{r7, pc}
    bbf6:	bf00      	nop

0000bbf8 <stabilisation_task>:
//#endif
}
*/

void stabilisation_task(void)
{
    bbf8:	b580      	push	{r7, lr}
    bbfa:	af00      	add	r7, sp, #0
	//vPrintString("S_6 stabilisation_task start! \n\r"); //SunnyBeike
    ir_update();
    bbfc:	f000 ffc2 	bl	cb84 <ir_update>
    estimator_update_state_infrared();
    bc00:	f004 fa48 	bl	10094 <estimator_update_state_infrared>
    roll_pitch_pid_run(); // Set  desired_aileron & desired_elevator
    bc04:	f001 f82c 	bl	cc60 <roll_pitch_pid_run>
    to_fbw.channels[RADIO_THROTTLE] = desired_gaz; // desired_gaz is set upon GPS message reception
    bc08:	f64b 135c 	movw	r3, #47452	; 0xb95c
    bc0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc10:	881a      	ldrh	r2, [r3, #0]
    bc12:	f24b 7348 	movw	r3, #46920	; 0xb748
    bc16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc1a:	801a      	strh	r2, [r3, #0]
    to_fbw.channels[RADIO_ROLL] = desired_aileron;
    bc1c:	f64b 135e 	movw	r3, #47454	; 0xb95e
    bc20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc24:	881a      	ldrh	r2, [r3, #0]
    bc26:	f24b 7348 	movw	r3, #46920	; 0xb748
    bc2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc2e:	805a      	strh	r2, [r3, #2]
#ifndef ANTON_T7
    to_fbw.channels[RADIO_PITCH] = desired_elevator;
    bc30:	f64b 1360 	movw	r3, #47456	; 0xb960
    bc34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc38:	881a      	ldrh	r2, [r3, #0]
    bc3a:	f24b 7348 	movw	r3, #46920	; 0xb748
    bc3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc42:	809a      	strh	r2, [r3, #4]
#endif
    
    // Code for camera stabilization, FIXME put that elsewhere
    to_fbw.channels[RADIO_GAIN1] = TRIM_PPRZ(MAX_PPRZ/0.75*(-estimator_phi));
    bc44:	f64b 33e8 	movw	r3, #48104	; 0xbbe8
    bc48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc4c:	681b      	ldr	r3, [r3, #0]
    bc4e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    bc52:	4618      	mov	r0, r3
    bc54:	f006 fe7a 	bl	1294c <__aeabi_f2d>
    bc58:	4602      	mov	r2, r0
    bc5a:	460b      	mov	r3, r1
    bc5c:	4610      	mov	r0, r2
    bc5e:	4619      	mov	r1, r3
    bc60:	f04f 0200 	mov.w	r2, #0
    bc64:	f04f 0300 	mov.w	r3, #0
    bc68:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    bc6c:	f006 fec2 	bl	129f4 <__aeabi_dmul>
    bc70:	4602      	mov	r2, r0
    bc72:	460b      	mov	r3, r1
    bc74:	4610      	mov	r0, r2
    bc76:	4619      	mov	r1, r3
    bc78:	f04f 0200 	mov.w	r2, #0
    bc7c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    bc80:	f2cc 03c2 	movt	r3, #49346	; 0xc0c2
    bc84:	f007 f928 	bl	12ed8 <__aeabi_dcmplt>
    bc88:	4603      	mov	r3, r0
    bc8a:	2b00      	cmp	r3, #0
    bc8c:	d002      	beq.n	bc94 <stabilisation_task+0x9c>
    bc8e:	f64d 2280 	movw	r2, #55936	; 0xda80
    bc92:	e046      	b.n	bd22 <stabilisation_task+0x12a>
    bc94:	f64b 33e8 	movw	r3, #48104	; 0xbbe8
    bc98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc9c:	681b      	ldr	r3, [r3, #0]
    bc9e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    bca2:	4618      	mov	r0, r3
    bca4:	f006 fe52 	bl	1294c <__aeabi_f2d>
    bca8:	4602      	mov	r2, r0
    bcaa:	460b      	mov	r3, r1
    bcac:	4610      	mov	r0, r2
    bcae:	4619      	mov	r1, r3
    bcb0:	f04f 0200 	mov.w	r2, #0
    bcb4:	f04f 0300 	mov.w	r3, #0
    bcb8:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    bcbc:	f006 fe9a 	bl	129f4 <__aeabi_dmul>
    bcc0:	4602      	mov	r2, r0
    bcc2:	460b      	mov	r3, r1
    bcc4:	4610      	mov	r0, r2
    bcc6:	4619      	mov	r1, r3
    bcc8:	f04f 0200 	mov.w	r2, #0
    bccc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    bcd0:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
    bcd4:	f007 f91e 	bl	12f14 <__aeabi_dcmpgt>
    bcd8:	4603      	mov	r3, r0
    bcda:	2b00      	cmp	r3, #0
    bcdc:	d002      	beq.n	bce4 <stabilisation_task+0xec>
    bcde:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    bce2:	e01d      	b.n	bd20 <stabilisation_task+0x128>
    bce4:	f64b 33e8 	movw	r3, #48104	; 0xbbe8
    bce8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcec:	681b      	ldr	r3, [r3, #0]
    bcee:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    bcf2:	4618      	mov	r0, r3
    bcf4:	f006 fe2a 	bl	1294c <__aeabi_f2d>
    bcf8:	4602      	mov	r2, r0
    bcfa:	460b      	mov	r3, r1
    bcfc:	4610      	mov	r0, r2
    bcfe:	4619      	mov	r1, r3
    bd00:	f04f 0200 	mov.w	r2, #0
    bd04:	f04f 0300 	mov.w	r3, #0
    bd08:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    bd0c:	f006 fe72 	bl	129f4 <__aeabi_dmul>
    bd10:	4602      	mov	r2, r0
    bd12:	460b      	mov	r3, r1
    bd14:	4610      	mov	r0, r2
    bd16:	4619      	mov	r1, r3
    bd18:	f007 f906 	bl	12f28 <__aeabi_d2iz>
    bd1c:	4603      	mov	r3, r0
    bd1e:	b29b      	uxth	r3, r3
    bd20:	b29a      	uxth	r2, r3
    bd22:	f24b 7348 	movw	r3, #46920	; 0xb748
    bd26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd2a:	815a      	strh	r2, [r3, #10]
	//vPrintString("S_6 stabilisation_task end! \n\r"); //SunnyBeike
}
    bd2c:	bd80      	pop	{r7, pc}
    bd2e:	bf00      	nop

0000bd30 <use_gps_pos>:
 * than \a MIN_SPEED_FOR_TAKEOFF, set the \a estimator_flight_time to 1 and \a
 * launch to true (which is not set in non auto launch. Then call
 * \a DOWNLINK_SEND_TAKEOFF
 */
void use_gps_pos()
{
    bd30:	b580      	push	{r7, lr}
    bd32:	af00      	add	r7, sp, #0
    send_gps_pos();
    bd34:	f000 f806 	bl	bd44 <send_gps_pos>
    send_radIR();
    bd38:	f000 f816 	bl	bd68 <send_radIR>
    send_takeOff();
    bd3c:	f000 f81a 	bl	bd74 <send_takeOff>
}
    bd40:	bd80      	pop	{r7, pc}
    bd42:	bf00      	nop

0000bd44 <send_gps_pos>:

void send_gps_pos( void ) {
    bd44:	b580      	push	{r7, lr}
    bd46:	af00      	add	r7, sp, #0
  gps_msg_received = FALSE;
    bd48:	f24b 73bd 	movw	r3, #47037	; 0xb7bd
    bd4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd50:	2200      	movs	r2, #0
    bd52:	701a      	strb	r2, [r3, #0]
  if (gps_pos_available){
    bd54:	f24b 73be 	movw	r3, #47038	; 0xb7be
    bd58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd5c:	781b      	ldrb	r3, [r3, #0]
    bd5e:	2b00      	cmp	r3, #0
    bd60:	d001      	beq.n	bd66 <send_gps_pos+0x22>
     //DOWNLINK_SEND_GPS(&gps_mode, &gps_utm_east, &gps_utm_north, &gps_fcourse, &gps_falt, &gps_fspeed,&gps_fclimb, &gps_ftow);
     estimator_update_state_gps();
    bd62:	f004 fc3d 	bl	105e0 <estimator_update_state_gps>
  }
}
    bd66:	bd80      	pop	{r7, pc}

0000bd68 <send_radIR>:

void send_radIR(void){
    bd68:	b480      	push	{r7}
    bd6a:	af00      	add	r7, sp, #0
    if (gps_pos_available){
      //DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    }
}
    bd6c:	46bd      	mov	sp, r7
    bd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    bd72:	4770      	bx	lr

0000bd74 <send_takeOff>:

void send_takeOff(void){
    bd74:	b580      	push	{r7, lr}
    bd76:	af00      	add	r7, sp, #0
  if (gps_pos_available){
    bd78:	f24b 73be 	movw	r3, #47038	; 0xb7be
    bd7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd80:	781b      	ldrb	r3, [r3, #0]
    bd82:	2b00      	cmp	r3, #0
    bd84:	d027      	beq.n	bdd6 <send_takeOff+0x62>
     if (!estimator_flight_time && (estimator_hspeed_mod > MIN_SPEED_FOR_TAKEOFF)) {
    bd86:	f64b 430c 	movw	r3, #48140	; 0xbc0c
    bd8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd8e:	881b      	ldrh	r3, [r3, #0]
    bd90:	2b00      	cmp	r3, #0
    bd92:	d11a      	bne.n	bdca <send_takeOff+0x56>
    bd94:	f64b 4314 	movw	r3, #48148	; 0xbc14
    bd98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd9c:	681b      	ldr	r3, [r3, #0]
    bd9e:	4618      	mov	r0, r3
    bda0:	f04f 0100 	mov.w	r1, #0
    bda4:	f2c4 01a0 	movt	r1, #16544	; 0x40a0
    bda8:	f007 fc20 	bl	135ec <__aeabi_fcmpgt>
    bdac:	4603      	mov	r3, r0
    bdae:	2b00      	cmp	r3, #0
    bdb0:	d00b      	beq.n	bdca <send_takeOff+0x56>
        estimator_flight_time = 1;
    bdb2:	f64b 430c 	movw	r3, #48140	; 0xbc0c
    bdb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdba:	2201      	movs	r2, #1
    bdbc:	801a      	strh	r2, [r3, #0]
        launch = TRUE; /* Not set in non auto launch */
    bdbe:	f24b 6320 	movw	r3, #46624	; 0xb620
    bdc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdc6:	2201      	movs	r2, #1
    bdc8:	701a      	strb	r2, [r3, #0]
        //DOWNLINK_SEND_TAKEOFF(&cputime);
     }
     gps_pos_available = FALSE; 
    bdca:	f24b 73be 	movw	r3, #47038	; 0xb7be
    bdce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdd2:	2200      	movs	r2, #0
    bdd4:	701a      	strb	r2, [r3, #0]
  }
  //vPrintString("S_16 receive_gps_data_task end!\n\r");
}
    bdd6:	bd80      	pop	{r7, pc}

0000bdd8 <modem_init>:
uint8_t    tx_byte;
uint8_t    tx_byte_idx;

uint8_t ck_a, ck_b;

void modem_init( void ) {
    bdd8:	b480      	push	{r7}
    bdda:	af00      	add	r7, sp, #0
  /* 
     on >= V1.2 boards, 4MHz modem clock is generated
     by one PWM module.
  */
#if defined CTL_BRD_V1_2 || defined CTL_BRD_V1_2_1
  MODEM_OSC_DDR |= _BV(MODEM_OSC);
    bddc:	f248 0317 	movw	r3, #32791	; 0x8017
    bde0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bde4:	f248 0217 	movw	r2, #32791	; 0x8017
    bde8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bdec:	7812      	ldrb	r2, [r2, #0]
    bdee:	b2d2      	uxtb	r2, r2
    bdf0:	f042 0210 	orr.w	r2, r2, #16
    bdf4:	b2d2      	uxtb	r2, r2
    bdf6:	701a      	strb	r2, [r3, #0]
  OCR0 = 1; /* 4MhZ */
    bdf8:	f248 0331 	movw	r3, #32817	; 0x8031
    bdfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be00:	2201      	movs	r2, #1
    be02:	701a      	strb	r2, [r3, #0]
  TCCR0 = _BV(WGM01) | _BV(COM00) | _BV(CS00);
    be04:	f248 0333 	movw	r3, #32819	; 0x8033
    be08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be0c:	2219      	movs	r2, #25
    be0e:	701a      	strb	r2, [r3, #0]
#endif

  /* setup TX_EN and TX_DATA pin as output */
  MODEM_TX_DDR |= _BV(MODEM_TX_EN) | _BV(MODEM_TX_DATA);
    be10:	f248 0311 	movw	r3, #32785	; 0x8011
    be14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be18:	f248 0211 	movw	r2, #32785	; 0x8011
    be1c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    be20:	7812      	ldrb	r2, [r2, #0]
    be22:	b2d2      	uxtb	r2, r2
    be24:	f062 023f 	orn	r2, r2, #63	; 0x3f
    be28:	b2d2      	uxtb	r2, r2
    be2a:	701a      	strb	r2, [r3, #0]
  /* data idles hight */
  sbi(MODEM_TX_PORT, MODEM_TX_DATA);
    be2c:	f248 0312 	movw	r3, #32786	; 0x8012
    be30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be34:	f248 0212 	movw	r2, #32786	; 0x8012
    be38:	f2c2 0200 	movt	r2, #8192	; 0x2000
    be3c:	7812      	ldrb	r2, [r2, #0]
    be3e:	b2d2      	uxtb	r2, r2
    be40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    be44:	b2d2      	uxtb	r2, r2
    be46:	701a      	strb	r2, [r3, #0]
  /* enable transmitter */
  cbi(MODEM_TX_PORT, MODEM_TX_EN);
    be48:	f248 0312 	movw	r3, #32786	; 0x8012
    be4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be50:	f248 0212 	movw	r2, #32786	; 0x8012
    be54:	f2c2 0200 	movt	r2, #8192	; 0x2000
    be58:	7812      	ldrb	r2, [r2, #0]
    be5a:	b2d2      	uxtb	r2, r2
    be5c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    be60:	b2d2      	uxtb	r2, r2
    be62:	701a      	strb	r2, [r3, #0]
  /* set interrupt on failing edge of clock */
  MODEM_CLK_INT_REG |=  MODEM_CLK_INT_CFG;
    be64:	f248 033a 	movw	r3, #32826	; 0x803a
    be68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be6c:	f248 023a 	movw	r2, #32826	; 0x803a
    be70:	f2c2 0200 	movt	r2, #8192	; 0x2000
    be74:	7812      	ldrb	r2, [r2, #0]
    be76:	b2d2      	uxtb	r2, r2
    be78:	f042 0202 	orr.w	r2, r2, #2
    be7c:	b2d2      	uxtb	r2, r2
    be7e:	701a      	strb	r2, [r3, #0]
}
    be80:	46bd      	mov	sp, r7
    be82:	f85d 7b04 	ldr.w	r7, [sp], #4
    be86:	4770      	bx	lr

0000be88 <__vector_5>:

SIGNAL( MODEM_CLK_INT_SIG ) {
    be88:	b480      	push	{r7}
    be8a:	af00      	add	r7, sp, #0
  /*  start bit         */
  if (tx_byte_idx == 0)
    be8c:	f24b 732c 	movw	r3, #46892	; 0xb72c
    be90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be94:	781b      	ldrb	r3, [r3, #0]
    be96:	2b00      	cmp	r3, #0
    be98:	d10e      	bne.n	beb8 <__vector_5+0x30>
    cbi(MODEM_TX_PORT, MODEM_TX_DATA);
    be9a:	f248 0312 	movw	r3, #32786	; 0x8012
    be9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bea2:	f248 0212 	movw	r2, #32786	; 0x8012
    bea6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    beaa:	7812      	ldrb	r2, [r2, #0]
    beac:	b2d2      	uxtb	r2, r2
    beae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    beb2:	b2d2      	uxtb	r2, r2
    beb4:	701a      	strb	r2, [r3, #0]
    beb6:	e047      	b.n	bf48 <__vector_5+0xc0>
  /* 8 data bits        */ 
  else if (tx_byte_idx < 9) {
    beb8:	f24b 732c 	movw	r3, #46892	; 0xb72c
    bebc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bec0:	781b      	ldrb	r3, [r3, #0]
    bec2:	2b08      	cmp	r3, #8
    bec4:	d832      	bhi.n	bf2c <__vector_5+0xa4>
    if (tx_byte & 0x01)
    bec6:	f24b 732b 	movw	r3, #46891	; 0xb72b
    beca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bece:	781b      	ldrb	r3, [r3, #0]
    bed0:	f003 0301 	and.w	r3, r3, #1
    bed4:	2b00      	cmp	r3, #0
    bed6:	d00e      	beq.n	bef6 <__vector_5+0x6e>
      sbi(MODEM_TX_PORT, MODEM_TX_DATA);
    bed8:	f248 0312 	movw	r3, #32786	; 0x8012
    bedc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bee0:	f248 0212 	movw	r2, #32786	; 0x8012
    bee4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bee8:	7812      	ldrb	r2, [r2, #0]
    beea:	b2d2      	uxtb	r2, r2
    beec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    bef0:	b2d2      	uxtb	r2, r2
    bef2:	701a      	strb	r2, [r3, #0]
    bef4:	e00d      	b.n	bf12 <__vector_5+0x8a>
    else
      cbi(MODEM_TX_PORT, MODEM_TX_DATA);
    bef6:	f248 0312 	movw	r3, #32786	; 0x8012
    befa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    befe:	f248 0212 	movw	r2, #32786	; 0x8012
    bf02:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bf06:	7812      	ldrb	r2, [r2, #0]
    bf08:	b2d2      	uxtb	r2, r2
    bf0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    bf0e:	b2d2      	uxtb	r2, r2
    bf10:	701a      	strb	r2, [r3, #0]
    tx_byte >>= 1;
    bf12:	f24b 732b 	movw	r3, #46891	; 0xb72b
    bf16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf1a:	781b      	ldrb	r3, [r3, #0]
    bf1c:	085b      	lsrs	r3, r3, #1
    bf1e:	b2da      	uxtb	r2, r3
    bf20:	f24b 732b 	movw	r3, #46891	; 0xb72b
    bf24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf28:	701a      	strb	r2, [r3, #0]
    bf2a:	e00d      	b.n	bf48 <__vector_5+0xc0>
  }
  /* stop_bit           */
  else {
    sbi(MODEM_TX_PORT, MODEM_TX_DATA); 
    bf2c:	f248 0312 	movw	r3, #32786	; 0x8012
    bf30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf34:	f248 0212 	movw	r2, #32786	; 0x8012
    bf38:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bf3c:	7812      	ldrb	r2, [r2, #0]
    bf3e:	b2d2      	uxtb	r2, r2
    bf40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    bf44:	b2d2      	uxtb	r2, r2
    bf46:	701a      	strb	r2, [r3, #0]
  }
  tx_byte_idx++;
    bf48:	f24b 732c 	movw	r3, #46892	; 0xb72c
    bf4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf50:	781b      	ldrb	r3, [r3, #0]
    bf52:	3301      	adds	r3, #1
    bf54:	b2da      	uxtb	r2, r3
    bf56:	f24b 732c 	movw	r3, #46892	; 0xb72c
    bf5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf5e:	701a      	strb	r2, [r3, #0]
  /* next byte          */
  if (tx_byte_idx >= 10) {
    bf60:	f24b 732c 	movw	r3, #46892	; 0xb72c
    bf64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf68:	781b      	ldrb	r3, [r3, #0]
    bf6a:	2b09      	cmp	r3, #9
    bf6c:	d94d      	bls.n	c00a <__vector_5+0x182>
    /*  if we have nothing left to transmit */
    if( tx_head == tx_tail ) {
    bf6e:	f24b 6329 	movw	r3, #46633	; 0xb629
    bf72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf76:	781a      	ldrb	r2, [r3, #0]
    bf78:	f24b 632a 	movw	r3, #46634	; 0xb62a
    bf7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf80:	781b      	ldrb	r3, [r3, #0]
    bf82:	b2db      	uxtb	r3, r3
    bf84:	429a      	cmp	r2, r3
    bf86:	d10e      	bne.n	bfa6 <__vector_5+0x11e>
      /* disable clock interrupt            */
      cbi( EIMSK, MODEM_CLK_INT );
    bf88:	f248 0339 	movw	r3, #32825	; 0x8039
    bf8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf90:	f248 0239 	movw	r2, #32825	; 0x8039
    bf94:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bf98:	7812      	ldrb	r2, [r2, #0]
    bf9a:	b2d2      	uxtb	r2, r2
    bf9c:	f022 0210 	bic.w	r2, r2, #16
    bfa0:	b2d2      	uxtb	r2, r2
    bfa2:	701a      	strb	r2, [r3, #0]
    bfa4:	e031      	b.n	c00a <__vector_5+0x182>
    } else {
      /* else load next byte                  */
      MODEM_LOAD_NEXT_BYTE();  
    bfa6:	f24b 632a 	movw	r3, #46634	; 0xb62a
    bfaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfae:	781b      	ldrb	r3, [r3, #0]
    bfb0:	b2db      	uxtb	r3, r3
    bfb2:	461a      	mov	r2, r3
    bfb4:	f24b 632c 	movw	r3, #46636	; 0xb62c
    bfb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfbc:	5c9a      	ldrb	r2, [r3, r2]
    bfbe:	f24b 732b 	movw	r3, #46891	; 0xb72b
    bfc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfc6:	701a      	strb	r2, [r3, #0]
    bfc8:	f24b 732c 	movw	r3, #46892	; 0xb72c
    bfcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfd0:	2200      	movs	r2, #0
    bfd2:	701a      	strb	r2, [r3, #0]
    bfd4:	f24b 632a 	movw	r3, #46634	; 0xb62a
    bfd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfdc:	781b      	ldrb	r3, [r3, #0]
    bfde:	b2db      	uxtb	r3, r3
    bfe0:	3301      	adds	r3, #1
    bfe2:	b2da      	uxtb	r2, r3
    bfe4:	f24b 632a 	movw	r3, #46634	; 0xb62a
    bfe8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfec:	701a      	strb	r2, [r3, #0]
    bfee:	f24b 632a 	movw	r3, #46634	; 0xb62a
    bff2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bff6:	781b      	ldrb	r3, [r3, #0]
    bff8:	b2db      	uxtb	r3, r3
    bffa:	2bff      	cmp	r3, #255	; 0xff
    bffc:	d105      	bne.n	c00a <__vector_5+0x182>
    bffe:	f24b 632a 	movw	r3, #46634	; 0xb62a
    c002:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c006:	2200      	movs	r2, #0
    c008:	701a      	strb	r2, [r3, #0]
    }
  }
}
    c00a:	46bd      	mov	sp, r7
    c00c:	f85d 7b04 	ldr.w	r7, [sp], #4
    c010:	4770      	bx	lr
    c012:	bf00      	nop

0000c014 <link_fbw_init>:
uint8_t link_fbw_fbw_nb_err;

static uint8_t idx_buf;
static uint8_t xor_in, xor_out;

void link_fbw_init(void) {
    c014:	b480      	push	{r7}
    c016:	af00      	add	r7, sp, #0
  link_fbw_nb_err;
    c018:	f24b 735f 	movw	r3, #46943	; 0xb75f
    c01c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c020:	781b      	ldrb	r3, [r3, #0]
  link_fbw_receive_complete = FALSE;  
    c022:	f240 1306 	movw	r3, #262	; 0x106
    c026:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c02a:	2200      	movs	r2, #0
    c02c:	701a      	strb	r2, [r3, #0]
}
    c02e:	46bd      	mov	sp, r7
    c030:	f85d 7b04 	ldr.w	r7, [sp], #4
    c034:	4770      	bx	lr
    c036:	bf00      	nop

0000c038 <link_fbw_send>:

void link_fbw_send(void) {
    c038:	b480      	push	{r7}
    c03a:	b083      	sub	sp, #12
    c03c:	af00      	add	r7, sp, #0
    //vPrintString("S_7 link_fbw_send start! \n\r"); //SunnyBeike

    if (spi_cur_slave != SPI_NONE) 
    c03e:	f24b 7364 	movw	r3, #46948	; 0xb764
    c042:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c046:	781b      	ldrb	r3, [r3, #0]
    c048:	b2db      	uxtb	r3, r3
    c04a:	2b00      	cmp	r3, #0
    c04c:	d00c      	beq.n	c068 <link_fbw_send+0x30>
    {
        spi_nb_ovrn++;
    c04e:	f24b 7365 	movw	r3, #46949	; 0xb765
    c052:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c056:	781b      	ldrb	r3, [r3, #0]
    c058:	3301      	adds	r3, #1
    c05a:	b2da      	uxtb	r2, r3
    c05c:	f24b 7365 	movw	r3, #46949	; 0xb765
    c060:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c064:	701a      	strb	r2, [r3, #0]
        //vPrintString("S_7 link_fbw_send end! \n\r"); //SunnyBeike
        return;
    c066:	e064      	b.n	c132 <link_fbw_send+0xfa>
    }

    /* Enable SPI, Master, set clock rate fck/16 */ 
    SPI_START(_BV(SPE) | _BV(MSTR) | _BV(SPR0)); // | _BV(SPR1);
    c068:	f248 030d 	movw	r3, #32781	; 0x800d
    c06c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c070:	2251      	movs	r2, #81	; 0x51
    c072:	701a      	strb	r2, [r3, #0]
    c074:	f248 030e 	movw	r3, #32782	; 0x800e
    c078:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c07c:	781b      	ldrb	r3, [r3, #0]
    c07e:	b2db      	uxtb	r3, r3
    c080:	b2db      	uxtb	r3, r3
    c082:	b25b      	sxtb	r3, r3
    c084:	2b00      	cmp	r3, #0
    c086:	da05      	bge.n	c094 <link_fbw_send+0x5c>
    c088:	f248 030f 	movw	r3, #32783	; 0x800f
    c08c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c090:	781b      	ldrb	r3, [r3, #0]
    c092:	71fb      	strb	r3, [r7, #7]
    c094:	f248 030d 	movw	r3, #32781	; 0x800d
    c098:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c09c:	f248 020d 	movw	r2, #32781	; 0x800d
    c0a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c0a4:	7812      	ldrb	r2, [r2, #0]
    c0a6:	b2d2      	uxtb	r2, r2
    c0a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
    c0ac:	b2d2      	uxtb	r2, r2
    c0ae:	701a      	strb	r2, [r3, #0]
    SPI_SELECT_SLAVE0();
    c0b0:	f24b 7364 	movw	r3, #46948	; 0xb764
    c0b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0b8:	2201      	movs	r2, #1
    c0ba:	701a      	strb	r2, [r3, #0]
    c0bc:	f248 0318 	movw	r3, #32792	; 0x8018
    c0c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0c4:	f248 0218 	movw	r2, #32792	; 0x8018
    c0c8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c0cc:	7812      	ldrb	r2, [r2, #0]
    c0ce:	b2d2      	uxtb	r2, r2
    c0d0:	f022 0201 	bic.w	r2, r2, #1
    c0d4:	b2d2      	uxtb	r2, r2
    c0d6:	701a      	strb	r2, [r3, #0]

    idx_buf = 0;
    c0d8:	f24b 7361 	movw	r3, #46945	; 0xb761
    c0dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0e0:	2200      	movs	r2, #0
    c0e2:	701a      	strb	r2, [r3, #0]
    xor_in = 0;
    c0e4:	f24b 7362 	movw	r3, #46946	; 0xb762
    c0e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0ec:	2200      	movs	r2, #0
    c0ee:	701a      	strb	r2, [r3, #0]
    xor_out = ((uint8_t*)&to_fbw)[idx_buf];
    c0f0:	f24b 7361 	movw	r3, #46945	; 0xb761
    c0f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0f8:	781b      	ldrb	r3, [r3, #0]
    c0fa:	461a      	mov	r2, r3
    c0fc:	f24b 7348 	movw	r3, #46920	; 0xb748
    c100:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c104:	4413      	add	r3, r2
    c106:	781a      	ldrb	r2, [r3, #0]
    c108:	f24b 7363 	movw	r3, #46947	; 0xb763
    c10c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c110:	701a      	strb	r2, [r3, #0]
    SPDR = xor_out;
    c112:	f248 030f 	movw	r3, #32783	; 0x800f
    c116:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c11a:	f24b 7263 	movw	r2, #46947	; 0xb763
    c11e:	f2c2 0204 	movt	r2, #8196	; 0x2004
    c122:	7812      	ldrb	r2, [r2, #0]
    c124:	701a      	strb	r2, [r3, #0]
    link_fbw_receive_valid = FALSE;
    c126:	f24b 735e 	movw	r3, #46942	; 0xb75e
    c12a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c12e:	2200      	movs	r2, #0
    c130:	701a      	strb	r2, [r3, #0]
    // Other bytes will follow SIG_SPI interrupts
    //vPrintString("S_7 link_fbw_send end! \n\r"); //SunnyBeike
}
    c132:	370c      	adds	r7, #12
    c134:	46bd      	mov	sp, r7
    c136:	f85d 7b04 	ldr.w	r7, [sp], #4
    c13a:	4770      	bx	lr

0000c13c <link_fbw_on_spi_it>:

void link_fbw_on_spi_it( void ) {
    c13c:	b480      	push	{r7}
    c13e:	af00      	add	r7, sp, #0
  /* setup OCR1A to pop in 200 clock cycles */
  /* this leaves time for the slave (fbw)   */
  /* to process the byte we've sent and to  */
  /* prepare a new one to be sent           */
  OCR1A = TCNT1 + 200;
    c140:	f248 032a 	movw	r3, #32810	; 0x802a
    c144:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c148:	f248 022c 	movw	r2, #32812	; 0x802c
    c14c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c150:	8812      	ldrh	r2, [r2, #0]
    c152:	b292      	uxth	r2, r2
    c154:	32c8      	adds	r2, #200	; 0xc8
    c156:	b292      	uxth	r2, r2
    c158:	801a      	strh	r2, [r3, #0]
  /* clear interrupt flag  */
  sbi(TIFR, OCF1A);
    c15a:	f248 0336 	movw	r3, #32822	; 0x8036
    c15e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c162:	f248 0236 	movw	r2, #32822	; 0x8036
    c166:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c16a:	7812      	ldrb	r2, [r2, #0]
    c16c:	b2d2      	uxtb	r2, r2
    c16e:	f042 0210 	orr.w	r2, r2, #16
    c172:	b2d2      	uxtb	r2, r2
    c174:	701a      	strb	r2, [r3, #0]
  /* enable OC1A interrupt */
  sbi(TIMSK, OCIE1A);
    c176:	f248 0337 	movw	r3, #32823	; 0x8037
    c17a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c17e:	f248 0237 	movw	r2, #32823	; 0x8037
    c182:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c186:	7812      	ldrb	r2, [r2, #0]
    c188:	b2d2      	uxtb	r2, r2
    c18a:	f042 0210 	orr.w	r2, r2, #16
    c18e:	b2d2      	uxtb	r2, r2
    c190:	701a      	strb	r2, [r3, #0]
}
    c192:	46bd      	mov	sp, r7
    c194:	f85d 7b04 	ldr.w	r7, [sp], #4
    c198:	4770      	bx	lr
    c19a:	bf00      	nop

0000c19c <__vector_12>:


/* send the next byte */
SIGNAL(SIG_OUTPUT_COMPARE1A) {
    c19c:	b480      	push	{r7}
    c19e:	b083      	sub	sp, #12
    c1a0:	af00      	add	r7, sp, #0
  uint8_t tmp;

  /* disable OC1A interrupt */
  cbi(TIMSK, OCIE1A); 
    c1a2:	f248 0337 	movw	r3, #32823	; 0x8037
    c1a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1aa:	f248 0237 	movw	r2, #32823	; 0x8037
    c1ae:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c1b2:	7812      	ldrb	r2, [r2, #0]
    c1b4:	b2d2      	uxtb	r2, r2
    c1b6:	f022 0210 	bic.w	r2, r2, #16
    c1ba:	b2d2      	uxtb	r2, r2
    c1bc:	701a      	strb	r2, [r3, #0]

  idx_buf++;
    c1be:	f24b 7361 	movw	r3, #46945	; 0xb761
    c1c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1c6:	781b      	ldrb	r3, [r3, #0]
    c1c8:	3301      	adds	r3, #1
    c1ca:	b2da      	uxtb	r2, r3
    c1cc:	f24b 7361 	movw	r3, #46945	; 0xb761
    c1d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1d4:	701a      	strb	r2, [r3, #0]

  /* we have sent/received a complete frame */
  if (idx_buf == FRAME_LENGTH) {
    c1d6:	f24b 7361 	movw	r3, #46945	; 0xb761
    c1da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1de:	781b      	ldrb	r3, [r3, #0]
    c1e0:	2b17      	cmp	r3, #23
    c1e2:	d162      	bne.n	c2aa <__vector_12+0x10e>
    /* read checksum from receive register  */
    tmp = SPDR;
    c1e4:	f248 030f 	movw	r3, #32783	; 0x800f
    c1e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1ec:	781b      	ldrb	r3, [r3, #0]
    c1ee:	71fb      	strb	r3, [r7, #7]
    /* notify valid frame                   */
    if (tmp == xor_in) {
    c1f0:	f24b 7362 	movw	r3, #46946	; 0xb762
    c1f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1f8:	781b      	ldrb	r3, [r3, #0]
    c1fa:	79fa      	ldrb	r2, [r7, #7]
    c1fc:	429a      	cmp	r2, r3
    c1fe:	d110      	bne.n	c222 <__vector_12+0x86>
      link_fbw_receive_valid = TRUE;
    c200:	f24b 735e 	movw	r3, #46942	; 0xb75e
    c204:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c208:	2201      	movs	r2, #1
    c20a:	701a      	strb	r2, [r3, #0]
      link_fbw_fbw_nb_err = from_fbw.nb_err;
    c20c:	f24b 7330 	movw	r3, #46896	; 0xb730
    c210:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c214:	7d1a      	ldrb	r2, [r3, #20]
    c216:	f24b 7360 	movw	r3, #46944	; 0xb760
    c21a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c21e:	701a      	strb	r2, [r3, #0]
    c220:	e00c      	b.n	c23c <__vector_12+0xa0>
    }
    else
      link_fbw_nb_err++;
    c222:	f24b 735f 	movw	r3, #46943	; 0xb75f
    c226:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c22a:	781b      	ldrb	r3, [r3, #0]
    c22c:	b2db      	uxtb	r3, r3
    c22e:	3301      	adds	r3, #1
    c230:	b2da      	uxtb	r2, r3
    c232:	f24b 735f 	movw	r3, #46943	; 0xb75f
    c236:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c23a:	701a      	strb	r2, [r3, #0]
    link_fbw_receive_complete = TRUE;
    c23c:	f240 1306 	movw	r3, #262	; 0x106
    c240:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c244:	2201      	movs	r2, #1
    c246:	701a      	strb	r2, [r3, #0]
    /* unselect slave0                      */
    SPI_UNSELECT_SLAVE0();
    c248:	f24b 7364 	movw	r3, #46948	; 0xb764
    c24c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c250:	2200      	movs	r2, #0
    c252:	701a      	strb	r2, [r3, #0]
    c254:	f248 0318 	movw	r3, #32792	; 0x8018
    c258:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c25c:	f248 0218 	movw	r2, #32792	; 0x8018
    c260:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c264:	7812      	ldrb	r2, [r2, #0]
    c266:	b2d2      	uxtb	r2, r2
    c268:	f042 0201 	orr.w	r2, r2, #1
    c26c:	b2d2      	uxtb	r2, r2
    c26e:	701a      	strb	r2, [r3, #0]
    SPI_STOP();
    c270:	f248 030d 	movw	r3, #32781	; 0x800d
    c274:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c278:	f248 020d 	movw	r2, #32781	; 0x800d
    c27c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c280:	7812      	ldrb	r2, [r2, #0]
    c282:	b2d2      	uxtb	r2, r2
    c284:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    c288:	b2d2      	uxtb	r2, r2
    c28a:	701a      	strb	r2, [r3, #0]
    c28c:	f248 030d 	movw	r3, #32781	; 0x800d
    c290:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c294:	f248 020d 	movw	r2, #32781	; 0x800d
    c298:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c29c:	7812      	ldrb	r2, [r2, #0]
    c29e:	b2d2      	uxtb	r2, r2
    c2a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    c2a4:	b2d2      	uxtb	r2, r2
    c2a6:	701a      	strb	r2, [r3, #0]
    return;
    c2a8:	e051      	b.n	c34e <__vector_12+0x1b2>
  }

  /* we are sending/receiving payload       */
  if (idx_buf < FRAME_LENGTH - 1) {
    c2aa:	f24b 7361 	movw	r3, #46945	; 0xb761
    c2ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2b2:	781b      	ldrb	r3, [r3, #0]
    c2b4:	2b15      	cmp	r3, #21
    c2b6:	d820      	bhi.n	c2fa <__vector_12+0x15e>
    /* place new payload byte in send register */
    tmp = ((uint8_t*)&to_fbw)[idx_buf];
    c2b8:	f24b 7361 	movw	r3, #46945	; 0xb761
    c2bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2c0:	781b      	ldrb	r3, [r3, #0]
    c2c2:	461a      	mov	r2, r3
    c2c4:	f24b 7348 	movw	r3, #46920	; 0xb748
    c2c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2cc:	4413      	add	r3, r2
    c2ce:	781b      	ldrb	r3, [r3, #0]
    c2d0:	71fb      	strb	r3, [r7, #7]
    SPI_SEND(tmp);
    c2d2:	f248 030f 	movw	r3, #32783	; 0x800f
    c2d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2da:	79fa      	ldrb	r2, [r7, #7]
    c2dc:	701a      	strb	r2, [r3, #0]
    xor_out ^= tmp;
    c2de:	f24b 7363 	movw	r3, #46947	; 0xb763
    c2e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2e6:	781a      	ldrb	r2, [r3, #0]
    c2e8:	79fb      	ldrb	r3, [r7, #7]
    c2ea:	4053      	eors	r3, r2
    c2ec:	b2da      	uxtb	r2, r3
    c2ee:	f24b 7363 	movw	r3, #46947	; 0xb763
    c2f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2f6:	701a      	strb	r2, [r3, #0]
    c2f8:	e009      	b.n	c30e <__vector_12+0x172>
  } 
  /* we are done sending the payload */
  else { // idx_buf == FRAME_LENGTH - 1
    /* place checksum in send register */
    SPI_SEND(xor_out);
    c2fa:	f248 030f 	movw	r3, #32783	; 0x800f
    c2fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c302:	f24b 7263 	movw	r2, #46947	; 0xb763
    c306:	f2c2 0204 	movt	r2, #8196	; 0x2004
    c30a:	7812      	ldrb	r2, [r2, #0]
    c30c:	701a      	strb	r2, [r3, #0]
  }
  
  /* read the byte from receive register */
  tmp = SPDR;
    c30e:	f248 030f 	movw	r3, #32783	; 0x800f
    c312:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c316:	781b      	ldrb	r3, [r3, #0]
    c318:	71fb      	strb	r3, [r7, #7]
  ((uint8_t*)&from_fbw)[idx_buf-1] = tmp;
    c31a:	f24b 7361 	movw	r3, #46945	; 0xb761
    c31e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c322:	781b      	ldrb	r3, [r3, #0]
    c324:	1e5a      	subs	r2, r3, #1
    c326:	f24b 7330 	movw	r3, #46896	; 0xb730
    c32a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c32e:	4413      	add	r3, r2
    c330:	79fa      	ldrb	r2, [r7, #7]
    c332:	701a      	strb	r2, [r3, #0]
  xor_in ^= tmp;
    c334:	f24b 7362 	movw	r3, #46946	; 0xb762
    c338:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c33c:	781a      	ldrb	r2, [r3, #0]
    c33e:	79fb      	ldrb	r3, [r7, #7]
    c340:	4053      	eors	r3, r2
    c342:	b2da      	uxtb	r2, r3
    c344:	f24b 7362 	movw	r3, #46946	; 0xb762
    c348:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c34c:	701a      	strb	r2, [r3, #0]
}
    c34e:	370c      	adds	r7, #12
    c350:	46bd      	mov	sp, r7
    c352:	f85d 7b04 	ldr.w	r7, [sp], #4
    c356:	4770      	bx	lr

0000c358 <spi_init>:
#include "ad7714.h"

volatile uint8_t spi_cur_slave;
uint8_t spi_nb_ovrn;

void spi_init( void) {
    c358:	b480      	push	{r7}
    c35a:	af00      	add	r7, sp, #0
  /* Set MOSI and SCK output, all others input */ 
  SPI_DDR |= _BV(SPI_MOSI_PIN)| _BV(SPI_SCK_PIN); 
    c35c:	f248 0317 	movw	r3, #32791	; 0x8017
    c360:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c364:	f248 0217 	movw	r2, #32791	; 0x8017
    c368:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c36c:	7812      	ldrb	r2, [r2, #0]
    c36e:	b2d2      	uxtb	r2, r2
    c370:	f042 0206 	orr.w	r2, r2, #6
    c374:	b2d2      	uxtb	r2, r2
    c376:	701a      	strb	r2, [r3, #0]

  /* enable pull up for miso */
  //  SPI_PORT |= _BV(SPI_MISO_PIN);

  /* Set SS0 output */
  sbi( SPI_SS0_DDR, SPI_SS0_PIN);
    c378:	f248 0317 	movw	r3, #32791	; 0x8017
    c37c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c380:	f248 0217 	movw	r2, #32791	; 0x8017
    c384:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c388:	7812      	ldrb	r2, [r2, #0]
    c38a:	b2d2      	uxtb	r2, r2
    c38c:	f042 0201 	orr.w	r2, r2, #1
    c390:	b2d2      	uxtb	r2, r2
    c392:	701a      	strb	r2, [r3, #0]
  /* SS0 idles high (don't select slave yet)*/
  SPI_UNSELECT_SLAVE0();
    c394:	f24b 7364 	movw	r3, #46948	; 0xb764
    c398:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c39c:	2200      	movs	r2, #0
    c39e:	701a      	strb	r2, [r3, #0]
    c3a0:	f248 0318 	movw	r3, #32792	; 0x8018
    c3a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3a8:	f248 0218 	movw	r2, #32792	; 0x8018
    c3ac:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c3b0:	7812      	ldrb	r2, [r2, #0]
    c3b2:	b2d2      	uxtb	r2, r2
    c3b4:	f042 0201 	orr.w	r2, r2, #1
    c3b8:	b2d2      	uxtb	r2, r2
    c3ba:	701a      	strb	r2, [r3, #0]

  /* Set SS1 output */
  sbi( SPI_SS1_DDR, SPI_SS1_PIN);
    c3bc:	f248 0302 	movw	r3, #32770	; 0x8002
    c3c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3c4:	f248 0202 	movw	r2, #32770	; 0x8002
    c3c8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c3cc:	7812      	ldrb	r2, [r2, #0]
    c3ce:	b2d2      	uxtb	r2, r2
    c3d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
    c3d4:	b2d2      	uxtb	r2, r2
    c3d6:	701a      	strb	r2, [r3, #0]
  /* SS1 idles high (don't select slave yet)*/
  SPI_UNSELECT_SLAVE1();
    c3d8:	f24b 7364 	movw	r3, #46948	; 0xb764
    c3dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3e0:	2200      	movs	r2, #0
    c3e2:	701a      	strb	r2, [r3, #0]
    c3e4:	f248 0303 	movw	r3, #32771	; 0x8003
    c3e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3ec:	f248 0203 	movw	r2, #32771	; 0x8003
    c3f0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c3f4:	7812      	ldrb	r2, [r2, #0]
    c3f6:	b2d2      	uxtb	r2, r2
    c3f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
    c3fc:	b2d2      	uxtb	r2, r2
    c3fe:	701a      	strb	r2, [r3, #0]
  
  spi_cur_slave = SPI_NONE;
    c400:	f24b 7364 	movw	r3, #46948	; 0xb764
    c404:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c408:	2200      	movs	r2, #0
    c40a:	701a      	strb	r2, [r3, #0]
}
    c40c:	46bd      	mov	sp, r7
    c40e:	f85d 7b04 	ldr.w	r7, [sp], #4
    c412:	4770      	bx	lr

0000c414 <__vector_17>:


SIGNAL(SIG_SPI) {
    c414:	b580      	push	{r7, lr}
    c416:	af00      	add	r7, sp, #0
  if (spi_cur_slave == SPI_SLAVE0)
    c418:	f24b 7364 	movw	r3, #46948	; 0xb764
    c41c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c420:	781b      	ldrb	r3, [r3, #0]
    c422:	b2db      	uxtb	r3, r3
    c424:	2b01      	cmp	r3, #1
    c426:	d102      	bne.n	c42e <__vector_17+0x1a>
    link_fbw_on_spi_it();
    c428:	f7ff fe88 	bl	c13c <link_fbw_on_spi_it>
    c42c:	e00b      	b.n	c446 <__vector_17+0x32>
  else
    fatal_error_nb++;
    c42e:	f24b 6308 	movw	r3, #46600	; 0xb608
    c432:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c436:	781b      	ldrb	r3, [r3, #0]
    c438:	3301      	adds	r3, #1
    c43a:	b2da      	uxtb	r2, r3
    c43c:	f24b 6308 	movw	r3, #46600	; 0xb608
    c440:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c444:	701a      	strb	r2, [r3, #0]
}
    c446:	bd80      	pop	{r7, pc}

0000c448 <adc_buf_channel>:

uint16_t		adc_samples[ NB_ADC ];

static struct adc_buf* buffers[NB_ADC];

void adc_buf_channel(uint8_t adc_channel, struct adc_buf* s) {
    c448:	b480      	push	{r7}
    c44a:	b083      	sub	sp, #12
    c44c:	af00      	add	r7, sp, #0
    c44e:	4603      	mov	r3, r0
    c450:	6039      	str	r1, [r7, #0]
    c452:	71fb      	strb	r3, [r7, #7]
  buffers[adc_channel] = s;
    c454:	79fa      	ldrb	r2, [r7, #7]
    c456:	f24b 7378 	movw	r3, #46968	; 0xb778
    c45a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c45e:	6839      	ldr	r1, [r7, #0]
    c460:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    c464:	370c      	adds	r7, #12
    c466:	46bd      	mov	sp, r7
    c468:	f85d 7b04 	ldr.w	r7, [sp], #4
    c46c:	4770      	bx	lr
    c46e:	bf00      	nop

0000c470 <adc_init>:

void 
adc_init( void )
{
    c470:	b480      	push	{r7}
    c472:	b083      	sub	sp, #12
    c474:	af00      	add	r7, sp, #0
  uint8_t i;
  /* Ensure that our port is for input with no pull-ups */
  ANALOG_PORT 	= 0x00;
    c476:	f248 0362 	movw	r3, #32866	; 0x8062
    c47a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c47e:	2200      	movs	r2, #0
    c480:	701a      	strb	r2, [r3, #0]
  ANALOG_PORT_DIR	= 0x00;
    c482:	f248 0361 	movw	r3, #32865	; 0x8061
    c486:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c48a:	2200      	movs	r2, #0
    c48c:	701a      	strb	r2, [r3, #0]

  /* Select our external voltage ref, which is tied to Vcc */
  ADMUX		= ANALOG_VREF;
    c48e:	f248 0307 	movw	r3, #32775	; 0x8007
    c492:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c496:	2240      	movs	r2, #64	; 0x40
    c498:	701a      	strb	r2, [r3, #0]

  /* Turn off the analog comparator */
  sbi( ACSR, ACD );
    c49a:	f248 0308 	movw	r3, #32776	; 0x8008
    c49e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4a2:	f248 0208 	movw	r2, #32776	; 0x8008
    c4a6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c4aa:	7812      	ldrb	r2, [r2, #0]
    c4ac:	b2d2      	uxtb	r2, r2
    c4ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
    c4b2:	b2d2      	uxtb	r2, r2
    c4b4:	701a      	strb	r2, [r3, #0]

  /* Select out clock, turn on the ADC interrupt and start conversion */
  ADCSR		= 0
    c4b6:	f248 0306 	movw	r3, #32774	; 0x8006
    c4ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4be:	22cf      	movs	r2, #207	; 0xcf
    c4c0:	701a      	strb	r2, [r3, #0]
    | ( 1 << ADEN )
    | ( 1 << ADIE )
    | ( 1 << ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < NB_ADC; i++)
    c4c2:	2300      	movs	r3, #0
    c4c4:	71fb      	strb	r3, [r7, #7]
    c4c6:	e00a      	b.n	c4de <adc_init+0x6e>
    buffers[i] = (struct adc_buf*)0;
    c4c8:	79fa      	ldrb	r2, [r7, #7]
    c4ca:	f24b 7378 	movw	r3, #46968	; 0xb778
    c4ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4d2:	2100      	movs	r1, #0
    c4d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    | ( 1 << ADEN )
    | ( 1 << ADIE )
    | ( 1 << ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < NB_ADC; i++)
    c4d8:	79fb      	ldrb	r3, [r7, #7]
    c4da:	3301      	adds	r3, #1
    c4dc:	71fb      	strb	r3, [r7, #7]
    c4de:	79fb      	ldrb	r3, [r7, #7]
    c4e0:	2b07      	cmp	r3, #7
    c4e2:	d9f1      	bls.n	c4c8 <adc_init+0x58>
    buffers[i] = (struct adc_buf*)0;
}
    c4e4:	370c      	adds	r7, #12
    c4e6:	46bd      	mov	sp, r7
    c4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    c4ec:	4770      	bx	lr
    c4ee:	bf00      	nop

0000c4f0 <__vector_21>:
 *  8.913kHz on mega128@16MHz 1kHz/channel ??
*/


SIGNAL( SIG_ADC )
{
    c4f0:	b480      	push	{r7}
    c4f2:	b085      	sub	sp, #20
    c4f4:	af00      	add	r7, sp, #0
  uint8_t adc_input	= ADMUX & 0x7;
    c4f6:	f248 0307 	movw	r3, #32775	; 0x8007
    c4fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4fe:	781b      	ldrb	r3, [r3, #0]
    c500:	b2db      	uxtb	r3, r3
    c502:	f003 0307 	and.w	r3, r3, #7
    c506:	73fb      	strb	r3, [r7, #15]
  struct adc_buf* buf = buffers[adc_input];
    c508:	7bfa      	ldrb	r2, [r7, #15]
    c50a:	f24b 7378 	movw	r3, #46968	; 0xb778
    c50e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    c516:	60bb      	str	r3, [r7, #8]
  uint16_t adc_value = ADCW;
    c518:	f248 0304 	movw	r3, #32772	; 0x8004
    c51c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c520:	881b      	ldrh	r3, [r3, #0]
    c522:	80fb      	strh	r3, [r7, #6]
  /* Store result */
  adc_samples[ adc_input ] = adc_value;
    c524:	7bfa      	ldrb	r2, [r7, #15]
    c526:	f24b 7368 	movw	r3, #46952	; 0xb768
    c52a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c52e:	88f9      	ldrh	r1, [r7, #6]
    c530:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

  if (buf) {
    c534:	68bb      	ldr	r3, [r7, #8]
    c536:	2b00      	cmp	r3, #0
    c538:	d025      	beq.n	c586 <__vector_21+0x96>
    uint8_t new_head = buf->head + 1;
    c53a:	68bb      	ldr	r3, [r7, #8]
    c53c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
    c540:	3301      	adds	r3, #1
    c542:	73bb      	strb	r3, [r7, #14]
    if (new_head >= AV_NB_SAMPLE) new_head = 0;
    c544:	7bbb      	ldrb	r3, [r7, #14]
    c546:	2b1f      	cmp	r3, #31
    c548:	d901      	bls.n	c54e <__vector_21+0x5e>
    c54a:	2300      	movs	r3, #0
    c54c:	73bb      	strb	r3, [r7, #14]
    buf->sum -= buf->values[new_head];
    c54e:	68bb      	ldr	r3, [r7, #8]
    c550:	881a      	ldrh	r2, [r3, #0]
    c552:	7bbb      	ldrb	r3, [r7, #14]
    c554:	68b9      	ldr	r1, [r7, #8]
    c556:	005b      	lsls	r3, r3, #1
    c558:	440b      	add	r3, r1
    c55a:	885b      	ldrh	r3, [r3, #2]
    c55c:	1ad3      	subs	r3, r2, r3
    c55e:	b29a      	uxth	r2, r3
    c560:	68bb      	ldr	r3, [r7, #8]
    c562:	801a      	strh	r2, [r3, #0]
    buf->values[new_head] = adc_value;
    c564:	7bbb      	ldrb	r3, [r7, #14]
    c566:	68ba      	ldr	r2, [r7, #8]
    c568:	005b      	lsls	r3, r3, #1
    c56a:	4413      	add	r3, r2
    c56c:	88fa      	ldrh	r2, [r7, #6]
    c56e:	805a      	strh	r2, [r3, #2]
    buf->sum += adc_value;
    c570:	68bb      	ldr	r3, [r7, #8]
    c572:	881a      	ldrh	r2, [r3, #0]
    c574:	88fb      	ldrh	r3, [r7, #6]
    c576:	4413      	add	r3, r2
    c578:	b29a      	uxth	r2, r3
    c57a:	68bb      	ldr	r3, [r7, #8]
    c57c:	801a      	strh	r2, [r3, #0]
    buf->head = new_head;   
    c57e:	68bb      	ldr	r3, [r7, #8]
    c580:	7bba      	ldrb	r2, [r7, #14]
    c582:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Find the next input */
  adc_input++;
    c586:	7bfb      	ldrb	r3, [r7, #15]
    c588:	3301      	adds	r3, #1
    c58a:	73fb      	strb	r3, [r7, #15]
  if( adc_input >= 8 )
    c58c:	7bfb      	ldrb	r3, [r7, #15]
    c58e:	2b07      	cmp	r3, #7
    c590:	d901      	bls.n	c596 <__vector_21+0xa6>
    adc_input = 0;
    c592:	2300      	movs	r3, #0
    c594:	73fb      	strb	r3, [r7, #15]
  /* Select it */
  ADMUX = adc_input | ANALOG_VREF;
    c596:	f248 0307 	movw	r3, #32775	; 0x8007
    c59a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c59e:	7bfa      	ldrb	r2, [r7, #15]
    c5a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    c5a4:	b2d2      	uxtb	r2, r2
    c5a6:	701a      	strb	r2, [r3, #0]
  /* Restart the conversion */
  sbi( ADCSR, ADSC );
    c5a8:	f248 0306 	movw	r3, #32774	; 0x8006
    c5ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5b0:	f248 0206 	movw	r2, #32774	; 0x8006
    c5b4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c5b8:	7812      	ldrb	r2, [r2, #0]
    c5ba:	b2d2      	uxtb	r2, r2
    c5bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    c5c0:	b2d2      	uxtb	r2, r2
    c5c2:	701a      	strb	r2, [r3, #0]
  
}
    c5c4:	3714      	adds	r7, #20
    c5c6:	46bd      	mov	sp, r7
    c5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    c5cc:	4770      	bx	lr
    c5ce:	bf00      	nop

0000c5d0 <gps_init>:
static uint8_t  ubx_status;
static uint16_t ubx_len;
static uint8_t  ubx_msg_idx;
static uint8_t ck_a, ck_b, ubx_id, ubx_class;

void gps_init( void ) {
    c5d0:	b580      	push	{r7, lr}
    c5d2:	af00      	add	r7, sp, #0
#ifdef SIMUL
  uart0_init();
  simul_ir_roll = ir_roll_neutral;
  simul_ir_pitch = ir_pitch_neutral;
#else
  uart1_init();
    c5d4:	f003 fcc0 	bl	ff58 <uart1_init>
#endif
  ubx_status = UNINIT;
    c5d8:	f64b 03bf 	movw	r3, #47295	; 0xb8bf
    c5dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5e0:	2200      	movs	r2, #0
    c5e2:	701a      	strb	r2, [r3, #0]
}
    c5e4:	bd80      	pop	{r7, pc}
    c5e6:	bf00      	nop

0000c5e8 <parse_gps_msg>:

void parse_gps_msg( void ) {
    c5e8:	b580      	push	{r7, lr}
    c5ea:	af00      	add	r7, sp, #0
  //vPrintString("S_16 receive_gps_data_task start!\n\r");
    //added by SunnyBeike
    
    ubx_class = UBX_NAV_ID; 
    c5ec:	f64b 03c6 	movw	r3, #47302	; 0xb8c6
    c5f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5f4:	2201      	movs	r2, #1
    c5f6:	701a      	strb	r2, [r3, #0]
    ubx_id = (ubx_id + 1)%0x40;
    c5f8:	f64b 03c5 	movw	r3, #47301	; 0xb8c5
    c5fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c600:	781b      	ldrb	r3, [r3, #0]
    c602:	1c5a      	adds	r2, r3, #1
    c604:	17d3      	asrs	r3, r2, #31
    c606:	0e9b      	lsrs	r3, r3, #26
    c608:	441a      	add	r2, r3
    c60a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    c60e:	1ad3      	subs	r3, r2, r3
    c610:	b2da      	uxtb	r2, r3
    c612:	f64b 03c5 	movw	r3, #47301	; 0xb8c5
    c616:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c61a:	701a      	strb	r2, [r3, #0]
    
    //end

  if (ubx_class == UBX_NAV_ID) {
    c61c:	f64b 03c6 	movw	r3, #47302	; 0xb8c6
    c620:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c624:	781b      	ldrb	r3, [r3, #0]
    c626:	2b01      	cmp	r3, #1
    c628:	f040 80f9 	bne.w	c81e <parse_gps_msg+0x236>
    if (ubx_id == UBX_NAV_POSUTM_ID) {
    c62c:	f64b 03c5 	movw	r3, #47301	; 0xb8c5
    c630:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c634:	781b      	ldrb	r3, [r3, #0]
    c636:	2b08      	cmp	r3, #8
    c638:	d128      	bne.n	c68c <parse_gps_msg+0xa4>
      gps_utm_east = UBX_NAV_POSUTM_EAST(ubx_msg_buf);
    c63a:	f24b 73c0 	movw	r3, #47040	; 0xb7c0
    c63e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c642:	685a      	ldr	r2, [r3, #4]
    c644:	f24b 73ac 	movw	r3, #47020	; 0xb7ac
    c648:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c64c:	601a      	str	r2, [r3, #0]
      gps_utm_north = UBX_NAV_POSUTM_NORTH(ubx_msg_buf);
    c64e:	f24b 73c0 	movw	r3, #47040	; 0xb7c0
    c652:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c656:	689a      	ldr	r2, [r3, #8]
    c658:	f24b 73b0 	movw	r3, #47024	; 0xb7b0
    c65c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c660:	601a      	str	r2, [r3, #0]
      gps_falt = (float)UBX_NAV_POSUTM_ALT(ubx_msg_buf) / 100.;
    c662:	4b73      	ldr	r3, [pc, #460]	; (c830 <parse_gps_msg+0x248>)
    c664:	681b      	ldr	r3, [r3, #0]
    c666:	4618      	mov	r0, r3
    c668:	f006 fdb0 	bl	131cc <__aeabi_i2f>
    c66c:	4603      	mov	r3, r0
    c66e:	4618      	mov	r0, r3
    c670:	f04f 0100 	mov.w	r1, #0
    c674:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
    c678:	f006 feb0 	bl	133dc <__aeabi_fdiv>
    c67c:	4603      	mov	r3, r0
    c67e:	461a      	mov	r2, r3
    c680:	f24b 739c 	movw	r3, #47004	; 0xb79c
    c684:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c688:	601a      	str	r2, [r3, #0]
    c68a:	e0c8      	b.n	c81e <parse_gps_msg+0x236>
        gps_utm_east = gps_utm_east + 0.5;
        gps_utm_north = gps_utm_north + 0.4;
        gps_falt = gps_falt + 0.6;
        */
        // end
    } else if (ubx_id == UBX_NAV_STATUS_ID) {
    c68c:	f64b 03c5 	movw	r3, #47301	; 0xb8c5
    c690:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c694:	781b      	ldrb	r3, [r3, #0]
    c696:	2b03      	cmp	r3, #3
    c698:	d10a      	bne.n	c6b0 <parse_gps_msg+0xc8>
      gps_mode = UBX_NAV_STATUS_GPSfix(ubx_msg_buf);
    c69a:	f24b 73c0 	movw	r3, #47040	; 0xb7c0
    c69e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6a2:	791a      	ldrb	r2, [r3, #4]
    c6a4:	f24b 73bc 	movw	r3, #47036	; 0xb7bc
    c6a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6ac:	701a      	strb	r2, [r3, #0]
    c6ae:	e0b6      	b.n	c81e <parse_gps_msg+0x236>
    } else if (ubx_id == UBX_NAV_VELNED_ID) {
    c6b0:	f64b 03c5 	movw	r3, #47301	; 0xb8c5
    c6b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6b8:	781b      	ldrb	r3, [r3, #0]
    c6ba:	2b12      	cmp	r3, #18
    c6bc:	f040 80af 	bne.w	c81e <parse_gps_msg+0x236>
      gps_fspeed = ((float)UBX_NAV_VELNED_GSpeed(ubx_msg_buf)) / 1e2; 
    c6c0:	4b5c      	ldr	r3, [pc, #368]	; (c834 <parse_gps_msg+0x24c>)
    c6c2:	681b      	ldr	r3, [r3, #0]
    c6c4:	4618      	mov	r0, r3
    c6c6:	f006 fd7d 	bl	131c4 <__aeabi_ui2f>
    c6ca:	4603      	mov	r3, r0
    c6cc:	4618      	mov	r0, r3
    c6ce:	f04f 0100 	mov.w	r1, #0
    c6d2:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
    c6d6:	f006 fe81 	bl	133dc <__aeabi_fdiv>
    c6da:	4603      	mov	r3, r0
    c6dc:	461a      	mov	r2, r3
    c6de:	f24b 73a0 	movw	r3, #47008	; 0xb7a0
    c6e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6e6:	601a      	str	r2, [r3, #0]
      gps_fclimb = ((float)UBX_NAV_VELNED_VEL_D(ubx_msg_buf)) / -1e2;
    c6e8:	4b51      	ldr	r3, [pc, #324]	; (c830 <parse_gps_msg+0x248>)
    c6ea:	681b      	ldr	r3, [r3, #0]
    c6ec:	4618      	mov	r0, r3
    c6ee:	f006 fd6d 	bl	131cc <__aeabi_i2f>
    c6f2:	4603      	mov	r3, r0
    c6f4:	4618      	mov	r0, r3
    c6f6:	f04f 0100 	mov.w	r1, #0
    c6fa:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
    c6fe:	f006 fe6d 	bl	133dc <__aeabi_fdiv>
    c702:	4603      	mov	r3, r0
    c704:	461a      	mov	r2, r3
    c706:	f24b 73a4 	movw	r3, #47012	; 0xb7a4
    c70a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c70e:	601a      	str	r2, [r3, #0]
      gps_fcourse = RadianOfDeg(((float)UBX_NAV_VELNED_Heading(ubx_msg_buf)) / 1e5);
    c710:	4b49      	ldr	r3, [pc, #292]	; (c838 <parse_gps_msg+0x250>)
    c712:	681b      	ldr	r3, [r3, #0]
    c714:	4618      	mov	r0, r3
    c716:	f006 fd59 	bl	131cc <__aeabi_i2f>
    c71a:	4603      	mov	r3, r0
    c71c:	4618      	mov	r0, r3
    c71e:	f006 f915 	bl	1294c <__aeabi_f2d>
    c722:	4602      	mov	r2, r0
    c724:	460b      	mov	r3, r1
    c726:	4610      	mov	r0, r2
    c728:	4619      	mov	r1, r3
    c72a:	a33d      	add	r3, pc, #244	; (adr r3, c820 <parse_gps_msg+0x238>)
    c72c:	e9d3 2300 	ldrd	r2, r3, [r3]
    c730:	f006 fa8a 	bl	12c48 <__aeabi_ddiv>
    c734:	4602      	mov	r2, r0
    c736:	460b      	mov	r3, r1
    c738:	4610      	mov	r0, r2
    c73a:	4619      	mov	r1, r3
    c73c:	f04f 0200 	mov.w	r2, #0
    c740:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    c744:	f2c4 0366 	movt	r3, #16486	; 0x4066
    c748:	f006 fa7e 	bl	12c48 <__aeabi_ddiv>
    c74c:	4602      	mov	r2, r0
    c74e:	460b      	mov	r3, r1
    c750:	4610      	mov	r0, r2
    c752:	4619      	mov	r1, r3
    c754:	a334      	add	r3, pc, #208	; (adr r3, c828 <parse_gps_msg+0x240>)
    c756:	e9d3 2300 	ldrd	r2, r3, [r3]
    c75a:	f006 f94b 	bl	129f4 <__aeabi_dmul>
    c75e:	4602      	mov	r2, r0
    c760:	460b      	mov	r3, r1
    c762:	4610      	mov	r0, r2
    c764:	4619      	mov	r1, r3
    c766:	f006 fc27 	bl	12fb8 <__aeabi_d2f>
    c76a:	4602      	mov	r2, r0
    c76c:	f24b 73a8 	movw	r3, #47016	; 0xb7a8
    c770:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c774:	601a      	str	r2, [r3, #0]
      gps_ftow = ((float)UBX_NAV_VELNED_ITOW(ubx_msg_buf)) / 1e3;
    c776:	f24b 73c0 	movw	r3, #47040	; 0xb7c0
    c77a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c77e:	681b      	ldr	r3, [r3, #0]
    c780:	4618      	mov	r0, r3
    c782:	f006 fd1f 	bl	131c4 <__aeabi_ui2f>
    c786:	4603      	mov	r3, r0
    c788:	4618      	mov	r0, r3
    c78a:	f04f 0100 	mov.w	r1, #0
    c78e:	f2c4 417a 	movt	r1, #17530	; 0x447a
    c792:	f006 fe23 	bl	133dc <__aeabi_fdiv>
    c796:	4603      	mov	r3, r0
    c798:	461a      	mov	r2, r3
    c79a:	f24b 7398 	movw	r3, #47000	; 0xb798
    c79e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7a2:	601a      	str	r2, [r3, #0]
        gps_fcourse = gps_fcourse + 0.2;
        gps_ftow = gps_ftow + 0.1;
        */
        // end
      
      gps_east = gps_utm_east / 100 - NAV_UTM_EAST0;
    c7a4:	f24b 73ac 	movw	r3, #47020	; 0xb7ac
    c7a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7ac:	681a      	ldr	r2, [r3, #0]
    c7ae:	f248 531f 	movw	r3, #34079	; 0x851f
    c7b2:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    c7b6:	fb83 1302 	smull	r1, r3, r3, r2
    c7ba:	1159      	asrs	r1, r3, #5
    c7bc:	17d3      	asrs	r3, r2, #31
    c7be:	1acb      	subs	r3, r1, r3
    c7c0:	f5a3 2313 	sub.w	r3, r3, #602112	; 0x93000
    c7c4:	f6a3 535a 	subw	r3, r3, #3418	; 0xd5a
    c7c8:	4618      	mov	r0, r3
    c7ca:	f006 fcff 	bl	131cc <__aeabi_i2f>
    c7ce:	4602      	mov	r2, r0
    c7d0:	f24b 73b4 	movw	r3, #47028	; 0xb7b4
    c7d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7d8:	601a      	str	r2, [r3, #0]
      gps_north = gps_utm_north / 100 - NAV_UTM_NORTH0;
    c7da:	f24b 73b0 	movw	r3, #47024	; 0xb7b0
    c7de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7e2:	681a      	ldr	r2, [r3, #0]
    c7e4:	f248 531f 	movw	r3, #34079	; 0x851f
    c7e8:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    c7ec:	fb83 1302 	smull	r1, r3, r3, r2
    c7f0:	1159      	asrs	r1, r3, #5
    c7f2:	17d3      	asrs	r3, r2, #31
    c7f4:	1aca      	subs	r2, r1, r3
    c7f6:	f648 231a 	movw	r3, #35354	; 0x8a1a
    c7fa:	f6cf 73a7 	movt	r3, #65447	; 0xffa7
    c7fe:	4413      	add	r3, r2
    c800:	4618      	mov	r0, r3
    c802:	f006 fce3 	bl	131cc <__aeabi_i2f>
    c806:	4602      	mov	r2, r0
    c808:	f24b 73b8 	movw	r3, #47032	; 0xb7b8
    c80c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c810:	601a      	str	r2, [r3, #0]
      
      
      gps_pos_available = TRUE; /* The 3 UBX messages are sent in one rafale */
    c812:	f24b 73be 	movw	r3, #47038	; 0xb7be
    c816:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c81a:	2201      	movs	r2, #1
    c81c:	701a      	strb	r2, [r3, #0]
      simul_ir_roll = UBX_USR_IRSIM_ROLL(ubx_msg_buf);
      simul_ir_pitch = UBX_USR_IRSIM_PITCH(ubx_msg_buf);
    }
  }
#endif
}
    c81e:	bd80      	pop	{r7, pc}
    c820:	00000000 	.word	0x00000000
    c824:	40f86a00 	.word	0x40f86a00
    c828:	5a7ed197 	.word	0x5a7ed197
    c82c:	400921fb 	.word	0x400921fb
    c830:	2004b7cc 	.word	0x2004b7cc
    c834:	2004b7d4 	.word	0x2004b7d4
    c838:	2004b7d8 	.word	0x2004b7d8

0000c83c <parse_ubx>:


uint8_t gps_nb_ovrn;


static void parse_ubx( uint8_t c ) {
    c83c:	b480      	push	{r7}
    c83e:	b083      	sub	sp, #12
    c840:	af00      	add	r7, sp, #0
    c842:	4603      	mov	r3, r0
    c844:	71fb      	strb	r3, [r7, #7]
   if (ubx_status < GOT_PAYLOAD) {
    c846:	f64b 03bf 	movw	r3, #47295	; 0xb8bf
    c84a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c84e:	781b      	ldrb	r3, [r3, #0]
    c850:	2b06      	cmp	r3, #6
    c852:	d81d      	bhi.n	c890 <parse_ubx+0x54>
    ck_a += c;
    c854:	f64b 03c3 	movw	r3, #47299	; 0xb8c3
    c858:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c85c:	781a      	ldrb	r2, [r3, #0]
    c85e:	79fb      	ldrb	r3, [r7, #7]
    c860:	4413      	add	r3, r2
    c862:	b2da      	uxtb	r2, r3
    c864:	f64b 03c3 	movw	r3, #47299	; 0xb8c3
    c868:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c86c:	701a      	strb	r2, [r3, #0]
    ck_b += ck_a;
    c86e:	f64b 03c4 	movw	r3, #47300	; 0xb8c4
    c872:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c876:	781a      	ldrb	r2, [r3, #0]
    c878:	f64b 03c3 	movw	r3, #47299	; 0xb8c3
    c87c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c880:	781b      	ldrb	r3, [r3, #0]
    c882:	4413      	add	r3, r2
    c884:	b2da      	uxtb	r2, r3
    c886:	f64b 03c4 	movw	r3, #47300	; 0xb8c4
    c88a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c88e:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
    break;
  }
#else */
  if (ubx_status == UNINIT)
    c890:	f64b 03bf 	movw	r3, #47295	; 0xb8bf
    c894:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c898:	781b      	ldrb	r3, [r3, #0]
    c89a:	2b00      	cmp	r3, #0
    c89c:	d110      	bne.n	c8c0 <parse_ubx+0x84>
  {
    if (c == UBX_SYNC1)
    c89e:	79fb      	ldrb	r3, [r7, #7]
    c8a0:	2bb5      	cmp	r3, #181	; 0xb5
    c8a2:	f040 8135 	bne.w	cb10 <parse_ubx+0x2d4>
      ubx_status++;
    c8a6:	f64b 03bf 	movw	r3, #47295	; 0xb8bf
    c8aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8ae:	781b      	ldrb	r3, [r3, #0]
    c8b0:	3301      	adds	r3, #1
    c8b2:	b2da      	uxtb	r2, r3
    c8b4:	f64b 03bf 	movw	r3, #47295	; 0xb8bf
    c8b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8bc:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
  }
  else {}
//#endif
  return;
    c8be:	e12f      	b.n	cb20 <parse_ubx+0x2e4>
  if (ubx_status == UNINIT)
  {
    if (c == UBX_SYNC1)
      ubx_status++;
  }
  else if (ubx_status == GOT_SYNC1)
    c8c0:	f64b 03bf 	movw	r3, #47295	; 0xb8bf
    c8c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8c8:	781b      	ldrb	r3, [r3, #0]
    c8ca:	2b01      	cmp	r3, #1
    c8cc:	d11c      	bne.n	c908 <parse_ubx+0xcc>
  {
    if (c != UBX_SYNC2)
    c8ce:	79fb      	ldrb	r3, [r7, #7]
    c8d0:	2b62      	cmp	r3, #98	; 0x62
    c8d2:	d000      	beq.n	c8d6 <parse_ubx+0x9a>
      goto error;
    c8d4:	e11d      	b.n	cb12 <parse_ubx+0x2d6>
    ck_a = 0;
    c8d6:	f64b 03c3 	movw	r3, #47299	; 0xb8c3
    c8da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8de:	2200      	movs	r2, #0
    c8e0:	701a      	strb	r2, [r3, #0]
    ck_b = 0;
    c8e2:	f64b 03c4 	movw	r3, #47300	; 0xb8c4
    c8e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8ea:	2200      	movs	r2, #0
    c8ec:	701a      	strb	r2, [r3, #0]
    ubx_status++;
    c8ee:	f64b 03bf 	movw	r3, #47295	; 0xb8bf
    c8f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8f6:	781b      	ldrb	r3, [r3, #0]
    c8f8:	3301      	adds	r3, #1
    c8fa:	b2da      	uxtb	r2, r3
    c8fc:	f64b 03bf 	movw	r3, #47295	; 0xb8bf
    c900:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c904:	701a      	strb	r2, [r3, #0]
    c906:	e103      	b.n	cb10 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_SYNC2)
    c908:	f64b 03bf 	movw	r3, #47295	; 0xb8bf
    c90c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c910:	781b      	ldrb	r3, [r3, #0]
    c912:	2b02      	cmp	r3, #2
    c914:	d127      	bne.n	c966 <parse_ubx+0x12a>
  {
    if (gps_msg_received) {
    c916:	f24b 73bd 	movw	r3, #47037	; 0xb7bd
    c91a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c91e:	781b      	ldrb	r3, [r3, #0]
    c920:	b2db      	uxtb	r3, r3
    c922:	2b00      	cmp	r3, #0
    c924:	d00c      	beq.n	c940 <parse_ubx+0x104>
      /* Previous message has not yet been parsed: discard this one */
      gps_nb_ovrn++;
    c926:	f64b 03c7 	movw	r3, #47303	; 0xb8c7
    c92a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c92e:	781b      	ldrb	r3, [r3, #0]
    c930:	3301      	adds	r3, #1
    c932:	b2da      	uxtb	r2, r3
    c934:	f64b 03c7 	movw	r3, #47303	; 0xb8c7
    c938:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c93c:	701a      	strb	r2, [r3, #0]
      goto error;
    c93e:	e0e8      	b.n	cb12 <parse_ubx+0x2d6>
    }
    ubx_class = c;
    c940:	f64b 03c6 	movw	r3, #47302	; 0xb8c6
    c944:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c948:	79fa      	ldrb	r2, [r7, #7]
    c94a:	701a      	strb	r2, [r3, #0]
    ubx_status++;
    c94c:	f64b 03bf 	movw	r3, #47295	; 0xb8bf
    c950:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c954:	781b      	ldrb	r3, [r3, #0]
    c956:	3301      	adds	r3, #1
    c958:	b2da      	uxtb	r2, r3
    c95a:	f64b 03bf 	movw	r3, #47295	; 0xb8bf
    c95e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c962:	701a      	strb	r2, [r3, #0]
    c964:	e0d4      	b.n	cb10 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_CLASS)
    c966:	f64b 03bf 	movw	r3, #47295	; 0xb8bf
    c96a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c96e:	781b      	ldrb	r3, [r3, #0]
    c970:	2b03      	cmp	r3, #3
    c972:	d112      	bne.n	c99a <parse_ubx+0x15e>
  {
    ubx_id = c;
    c974:	f64b 03c5 	movw	r3, #47301	; 0xb8c5
    c978:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c97c:	79fa      	ldrb	r2, [r7, #7]
    c97e:	701a      	strb	r2, [r3, #0]
    ubx_status++;
    c980:	f64b 03bf 	movw	r3, #47295	; 0xb8bf
    c984:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c988:	781b      	ldrb	r3, [r3, #0]
    c98a:	3301      	adds	r3, #1
    c98c:	b2da      	uxtb	r2, r3
    c98e:	f64b 03bf 	movw	r3, #47295	; 0xb8bf
    c992:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c996:	701a      	strb	r2, [r3, #0]
    c998:	e0ba      	b.n	cb10 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_ID)
    c99a:	f64b 03bf 	movw	r3, #47295	; 0xb8bf
    c99e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9a2:	781b      	ldrb	r3, [r3, #0]
    c9a4:	2b04      	cmp	r3, #4
    c9a6:	d113      	bne.n	c9d0 <parse_ubx+0x194>
  {
    ubx_len = c;
    c9a8:	79fb      	ldrb	r3, [r7, #7]
    c9aa:	b29a      	uxth	r2, r3
    c9ac:	f64b 03c0 	movw	r3, #47296	; 0xb8c0
    c9b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9b4:	801a      	strh	r2, [r3, #0]
    ubx_status++;
    c9b6:	f64b 03bf 	movw	r3, #47295	; 0xb8bf
    c9ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9be:	781b      	ldrb	r3, [r3, #0]
    c9c0:	3301      	adds	r3, #1
    c9c2:	b2da      	uxtb	r2, r3
    c9c4:	f64b 03bf 	movw	r3, #47295	; 0xb8bf
    c9c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9cc:	701a      	strb	r2, [r3, #0]
    c9ce:	e09f      	b.n	cb10 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_LEN1)
    c9d0:	f64b 03bf 	movw	r3, #47295	; 0xb8bf
    c9d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9d8:	781b      	ldrb	r3, [r3, #0]
    c9da:	2b05      	cmp	r3, #5
    c9dc:	d12b      	bne.n	ca36 <parse_ubx+0x1fa>
  {
    ubx_len |= (c<<8);
    c9de:	79fb      	ldrb	r3, [r7, #7]
    c9e0:	021b      	lsls	r3, r3, #8
    c9e2:	b29a      	uxth	r2, r3
    c9e4:	f64b 03c0 	movw	r3, #47296	; 0xb8c0
    c9e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9ec:	881b      	ldrh	r3, [r3, #0]
    c9ee:	b29b      	uxth	r3, r3
    c9f0:	4313      	orrs	r3, r2
    c9f2:	b29b      	uxth	r3, r3
    c9f4:	b29a      	uxth	r2, r3
    c9f6:	f64b 03c0 	movw	r3, #47296	; 0xb8c0
    c9fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9fe:	801a      	strh	r2, [r3, #0]
    if (ubx_len > UBX_MAX_PAYLOAD)
    ca00:	f64b 03c0 	movw	r3, #47296	; 0xb8c0
    ca04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca08:	881b      	ldrh	r3, [r3, #0]
    ca0a:	2bff      	cmp	r3, #255	; 0xff
    ca0c:	d900      	bls.n	ca10 <parse_ubx+0x1d4>
      goto error;
    ca0e:	e080      	b.n	cb12 <parse_ubx+0x2d6>
    ubx_msg_idx = 0;
    ca10:	f64b 03c2 	movw	r3, #47298	; 0xb8c2
    ca14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca18:	2200      	movs	r2, #0
    ca1a:	701a      	strb	r2, [r3, #0]
    ubx_status++;
    ca1c:	f64b 03bf 	movw	r3, #47295	; 0xb8bf
    ca20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca24:	781b      	ldrb	r3, [r3, #0]
    ca26:	3301      	adds	r3, #1
    ca28:	b2da      	uxtb	r2, r3
    ca2a:	f64b 03bf 	movw	r3, #47295	; 0xb8bf
    ca2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca32:	701a      	strb	r2, [r3, #0]
    ca34:	e06c      	b.n	cb10 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_LEN2)
    ca36:	f64b 03bf 	movw	r3, #47295	; 0xb8bf
    ca3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca3e:	781b      	ldrb	r3, [r3, #0]
    ca40:	2b06      	cmp	r3, #6
    ca42:	d131      	bne.n	caa8 <parse_ubx+0x26c>
  {
    ubx_msg_buf[ubx_msg_idx] = c;
    ca44:	f64b 03c2 	movw	r3, #47298	; 0xb8c2
    ca48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca4c:	781b      	ldrb	r3, [r3, #0]
    ca4e:	461a      	mov	r2, r3
    ca50:	f24b 73c0 	movw	r3, #47040	; 0xb7c0
    ca54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca58:	79f9      	ldrb	r1, [r7, #7]
    ca5a:	5499      	strb	r1, [r3, r2]
    ubx_msg_idx++;
    ca5c:	f64b 03c2 	movw	r3, #47298	; 0xb8c2
    ca60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca64:	781b      	ldrb	r3, [r3, #0]
    ca66:	3301      	adds	r3, #1
    ca68:	b2da      	uxtb	r2, r3
    ca6a:	f64b 03c2 	movw	r3, #47298	; 0xb8c2
    ca6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca72:	701a      	strb	r2, [r3, #0]
    if (ubx_msg_idx >= ubx_len) {
    ca74:	f64b 03c2 	movw	r3, #47298	; 0xb8c2
    ca78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca7c:	781b      	ldrb	r3, [r3, #0]
    ca7e:	461a      	mov	r2, r3
    ca80:	f64b 03c0 	movw	r3, #47296	; 0xb8c0
    ca84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca88:	881b      	ldrh	r3, [r3, #0]
    ca8a:	429a      	cmp	r2, r3
    ca8c:	d340      	bcc.n	cb10 <parse_ubx+0x2d4>
      ubx_status++;
    ca8e:	f64b 03bf 	movw	r3, #47295	; 0xb8bf
    ca92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca96:	781b      	ldrb	r3, [r3, #0]
    ca98:	3301      	adds	r3, #1
    ca9a:	b2da      	uxtb	r2, r3
    ca9c:	f64b 03bf 	movw	r3, #47295	; 0xb8bf
    caa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    caa4:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
  }
  else {}
//#endif
  return;
    caa6:	e03b      	b.n	cb20 <parse_ubx+0x2e4>
    ubx_msg_idx++;
    if (ubx_msg_idx >= ubx_len) {
      ubx_status++;
    }
  }
  else if (ubx_status == GOT_PAYLOAD)
    caa8:	f64b 03bf 	movw	r3, #47295	; 0xb8bf
    caac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cab0:	781b      	ldrb	r3, [r3, #0]
    cab2:	2b07      	cmp	r3, #7
    cab4:	d115      	bne.n	cae2 <parse_ubx+0x2a6>
  {
    if (c != ck_a)
    cab6:	f64b 03c3 	movw	r3, #47299	; 0xb8c3
    caba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cabe:	781b      	ldrb	r3, [r3, #0]
    cac0:	79fa      	ldrb	r2, [r7, #7]
    cac2:	429a      	cmp	r2, r3
    cac4:	d000      	beq.n	cac8 <parse_ubx+0x28c>
      goto error;
    cac6:	e024      	b.n	cb12 <parse_ubx+0x2d6>
    ubx_status++;
    cac8:	f64b 03bf 	movw	r3, #47295	; 0xb8bf
    cacc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cad0:	781b      	ldrb	r3, [r3, #0]
    cad2:	3301      	adds	r3, #1
    cad4:	b2da      	uxtb	r2, r3
    cad6:	f64b 03bf 	movw	r3, #47295	; 0xb8bf
    cada:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cade:	701a      	strb	r2, [r3, #0]
    cae0:	e016      	b.n	cb10 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_CHECKSUM1)
    cae2:	f64b 03bf 	movw	r3, #47295	; 0xb8bf
    cae6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    caea:	781b      	ldrb	r3, [r3, #0]
    caec:	2b08      	cmp	r3, #8
    caee:	d10f      	bne.n	cb10 <parse_ubx+0x2d4>
  {
    if (c != ck_b)
    caf0:	f64b 03c4 	movw	r3, #47300	; 0xb8c4
    caf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    caf8:	781b      	ldrb	r3, [r3, #0]
    cafa:	79fa      	ldrb	r2, [r7, #7]
    cafc:	429a      	cmp	r2, r3
    cafe:	d000      	beq.n	cb02 <parse_ubx+0x2c6>
      goto error;
    cb00:	e007      	b.n	cb12 <parse_ubx+0x2d6>
    gps_msg_received = TRUE;
    cb02:	f24b 73bd 	movw	r3, #47037	; 0xb7bd
    cb06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb0a:	2201      	movs	r2, #1
    cb0c:	701a      	strb	r2, [r3, #0]
    goto restart;
    cb0e:	e000      	b.n	cb12 <parse_ubx+0x2d6>
  }
  else {}
//#endif
  return;
    cb10:	e006      	b.n	cb20 <parse_ubx+0x2e4>
 error:  
 restart:
  ubx_status = UNINIT;
    cb12:	f64b 03bf 	movw	r3, #47295	; 0xb8bf
    cb16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb1a:	2200      	movs	r2, #0
    cb1c:	701a      	strb	r2, [r3, #0]
  return;
    cb1e:	bf00      	nop
}
    cb20:	370c      	adds	r7, #12
    cb22:	46bd      	mov	sp, r7
    cb24:	f85d 7b04 	ldr.w	r7, [sp], #4
    cb28:	4770      	bx	lr
    cb2a:	bf00      	nop

0000cb2c <__vector_30>:

#ifdef SIMUL
ReceiveUart0(parse_ubx);
#else
ReceiveUart1(parse_ubx);
    cb2c:	b580      	push	{r7, lr}
    cb2e:	b082      	sub	sp, #8
    cb30:	af00      	add	r7, sp, #0
    cb32:	f248 039c 	movw	r3, #32924	; 0x809c
    cb36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb3a:	781b      	ldrb	r3, [r3, #0]
    cb3c:	71fb      	strb	r3, [r7, #7]
    cb3e:	79fb      	ldrb	r3, [r7, #7]
    cb40:	4618      	mov	r0, r3
    cb42:	f7ff fe7b 	bl	c83c <parse_ubx>
    cb46:	3708      	adds	r7, #8
    cb48:	46bd      	mov	sp, r7
    cb4a:	bd80      	pop	{r7, pc}
    cb4c:	f3af 8000 	nop.w

0000cb50 <ir_init>:
float ir_rad_of_ir = IR_RAD_OF_IR_CONTRAST / IR_DEFAULT_CONTRAST;

static struct adc_buf buf_ir1;
static struct adc_buf buf_ir2;

void ir_init(void) {
    cb50:	b580      	push	{r7, lr}
    cb52:	af00      	add	r7, sp, #0
  RadOfIrFromConstrast(IR_DEFAULT_CONTRAST);
    cb54:	f240 1310 	movw	r3, #272	; 0x110
    cb58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb5c:	f24c 228f 	movw	r2, #49807	; 0xc28f
    cb60:	f6c3 3275 	movt	r2, #15221	; 0x3b75
    cb64:	601a      	str	r2, [r3, #0]
  adc_buf_channel(ADC_CHANNEL_IR1, &buf_ir1);
    cb66:	2001      	movs	r0, #1
    cb68:	f64b 01cc 	movw	r1, #47308	; 0xb8cc
    cb6c:	f2c2 0104 	movt	r1, #8196	; 0x2004
    cb70:	f7ff fc6a 	bl	c448 <adc_buf_channel>
  adc_buf_channel(ADC_CHANNEL_IR2, &buf_ir2);
    cb74:	2002      	movs	r0, #2
    cb76:	f64b 1110 	movw	r1, #47376	; 0xb910
    cb7a:	f2c2 0104 	movt	r1, #8196	; 0x2004
    cb7e:	f7ff fc63 	bl	c448 <adc_buf_channel>
}
    cb82:	bd80      	pop	{r7, pc}

0000cb84 <ir_update>:
int16_t x1 = 1;
int16_t x2 = 2;
*/
// end

void ir_update(void) {
    cb84:	b480      	push	{r7}
    cb86:	b083      	sub	sp, #12
    cb88:	af00      	add	r7, sp, #0
#ifndef SIMUL
  int16_t x1_mean = buf_ir1.sum/AV_NB_SAMPLE;
    cb8a:	f64b 03cc 	movw	r3, #47308	; 0xb8cc
    cb8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb92:	881b      	ldrh	r3, [r3, #0]
    cb94:	095b      	lsrs	r3, r3, #5
    cb96:	b29b      	uxth	r3, r3
    cb98:	80fb      	strh	r3, [r7, #6]
  int16_t x2_mean = buf_ir2.sum/AV_NB_SAMPLE;
    cb9a:	f64b 1310 	movw	r3, #47376	; 0xb910
    cb9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cba2:	881b      	ldrh	r3, [r3, #0]
    cba4:	095b      	lsrs	r3, r3, #5
    cba6:	b29b      	uxth	r3, r3
    cba8:	80bb      	strh	r3, [r7, #4]
    if( x1 < -900 ) x1 = x2 % x1;
    x2_mean = x2 ++;
    if( x2 > 110 ) x2 = x1 % x2;
    */
    // end
  ir_roll = IR_RollOfIrs(x1_mean, x2_mean) - ir_roll_neutral;
    cbaa:	88fb      	ldrh	r3, [r7, #6]
    cbac:	425b      	negs	r3, r3
    cbae:	b29a      	uxth	r2, r3
    cbb0:	88bb      	ldrh	r3, [r7, #4]
    cbb2:	1ad3      	subs	r3, r2, r3
    cbb4:	b29a      	uxth	r2, r3
    cbb6:	f240 130a 	movw	r3, #266	; 0x10a
    cbba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbbe:	881b      	ldrh	r3, [r3, #0]
    cbc0:	b29b      	uxth	r3, r3
    cbc2:	1ad3      	subs	r3, r2, r3
    cbc4:	b29b      	uxth	r3, r3
    cbc6:	b29a      	uxth	r2, r3
    cbc8:	f64b 03c8 	movw	r3, #47304	; 0xb8c8
    cbcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbd0:	801a      	strh	r2, [r3, #0]
  ir_pitch = IR_PitchOfIrs(x1_mean, x2_mean) - ir_pitch_neutral;
    cbd2:	88ba      	ldrh	r2, [r7, #4]
    cbd4:	88fb      	ldrh	r3, [r7, #6]
    cbd6:	1ad3      	subs	r3, r2, r3
    cbd8:	b29a      	uxth	r2, r3
    cbda:	f240 130c 	movw	r3, #268	; 0x10c
    cbde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbe2:	881b      	ldrh	r3, [r3, #0]
    cbe4:	b29b      	uxth	r3, r3
    cbe6:	1ad3      	subs	r3, r2, r3
    cbe8:	b29b      	uxth	r3, r3
    cbea:	b29a      	uxth	r2, r3
    cbec:	f64b 03ca 	movw	r3, #47306	; 0xb8ca
    cbf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbf4:	801a      	strh	r2, [r3, #0]
#else
  extern volatile int16_t simul_ir_roll, simul_ir_pitch;
  ir_roll = simul_ir_roll -  ir_roll_neutral; 
  ir_pitch = simul_ir_pitch - ir_pitch_neutral;  
#endif
}
    cbf6:	370c      	adds	r7, #12
    cbf8:	46bd      	mov	sp, r7
    cbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
    cbfe:	4770      	bx	lr

0000cc00 <ir_gain_calib>:

/* 
   Contrast measurement
*/

void ir_gain_calib(void) {      // Plane nose down
    cc00:	b580      	push	{r7, lr}
    cc02:	af00      	add	r7, sp, #0
  /* plane nose down -> negativ value */
  ir_contrast = - ir_pitch;
    cc04:	f64b 03ca 	movw	r3, #47306	; 0xb8ca
    cc08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc0c:	881b      	ldrh	r3, [r3, #0]
    cc0e:	b29b      	uxth	r3, r3
    cc10:	425b      	negs	r3, r3
    cc12:	b29b      	uxth	r3, r3
    cc14:	b29a      	uxth	r2, r3
    cc16:	f240 1308 	movw	r3, #264	; 0x108
    cc1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc1e:	801a      	strh	r2, [r3, #0]
  RadOfIrFromConstrast(ir_contrast);
    cc20:	f240 1308 	movw	r3, #264	; 0x108
    cc24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc28:	881b      	ldrh	r3, [r3, #0]
    cc2a:	b21b      	sxth	r3, r3
    cc2c:	4618      	mov	r0, r3
    cc2e:	f005 fe7b 	bl	12928 <__aeabi_i2d>
    cc32:	4602      	mov	r2, r0
    cc34:	460b      	mov	r3, r1
    cc36:	f04f 0000 	mov.w	r0, #0
    cc3a:	f04f 0100 	mov.w	r1, #0
    cc3e:	f6c3 71e8 	movt	r1, #16360	; 0x3fe8
    cc42:	f006 f801 	bl	12c48 <__aeabi_ddiv>
    cc46:	4602      	mov	r2, r0
    cc48:	460b      	mov	r3, r1
    cc4a:	4610      	mov	r0, r2
    cc4c:	4619      	mov	r1, r3
    cc4e:	f006 f9b3 	bl	12fb8 <__aeabi_d2f>
    cc52:	4602      	mov	r2, r0
    cc54:	f240 1310 	movw	r3, #272	; 0x110
    cc58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc5c:	601a      	str	r2, [r3, #0]
}
    cc5e:	bd80      	pop	{r7, pc}

0000cc60 <roll_pitch_pid_run>:
float pitch_of_vz_pgain = CLIMB_PITCH_OF_VZ_PGAIN;
float pitch_of_vz = 0.;


/** \brief Computes ::desired_aileron and ::desired_elevator from attitude estimation and expected attitude. */
void roll_pitch_pid_run( void ) {
    cc60:	b590      	push	{r4, r7, lr}
    cc62:	b083      	sub	sp, #12
    cc64:	af00      	add	r7, sp, #0
  float err =  estimator_phi - desired_roll;
    cc66:	f64b 33e8 	movw	r3, #48104	; 0xbbe8
    cc6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc6e:	681a      	ldr	r2, [r3, #0]
    cc70:	f64b 1354 	movw	r3, #47444	; 0xb954
    cc74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc78:	681b      	ldr	r3, [r3, #0]
    cc7a:	4610      	mov	r0, r2
    cc7c:	4619      	mov	r1, r3
    cc7e:	f006 f9ef 	bl	13060 <__aeabi_fsub>
    cc82:	4603      	mov	r3, r0
    cc84:	607b      	str	r3, [r7, #4]
  desired_aileron = TRIM_PPRZ(roll_pgain * err);
    cc86:	f240 1314 	movw	r3, #276	; 0x114
    cc8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc8e:	681b      	ldr	r3, [r3, #0]
    cc90:	4618      	mov	r0, r3
    cc92:	6879      	ldr	r1, [r7, #4]
    cc94:	f006 faee 	bl	13274 <__aeabi_fmul>
    cc98:	4603      	mov	r3, r0
    cc9a:	4618      	mov	r0, r3
    cc9c:	f04f 0100 	mov.w	r1, #0
    cca0:	f2cc 6116 	movt	r1, #50710	; 0xc616
    cca4:	f006 fc84 	bl	135b0 <__aeabi_fcmplt>
    cca8:	4603      	mov	r3, r0
    ccaa:	2b00      	cmp	r3, #0
    ccac:	d002      	beq.n	ccb4 <roll_pitch_pid_run+0x54>
    ccae:	f64d 2280 	movw	r2, #55936	; 0xda80
    ccb2:	e026      	b.n	cd02 <roll_pitch_pid_run+0xa2>
    ccb4:	f240 1314 	movw	r3, #276	; 0x114
    ccb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ccbc:	681b      	ldr	r3, [r3, #0]
    ccbe:	4618      	mov	r0, r3
    ccc0:	6879      	ldr	r1, [r7, #4]
    ccc2:	f006 fad7 	bl	13274 <__aeabi_fmul>
    ccc6:	4603      	mov	r3, r0
    ccc8:	4618      	mov	r0, r3
    ccca:	f04f 0100 	mov.w	r1, #0
    ccce:	f2c4 6116 	movt	r1, #17942	; 0x4616
    ccd2:	f006 fc8b 	bl	135ec <__aeabi_fcmpgt>
    ccd6:	4603      	mov	r3, r0
    ccd8:	2b00      	cmp	r3, #0
    ccda:	d002      	beq.n	cce2 <roll_pitch_pid_run+0x82>
    ccdc:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    cce0:	e00e      	b.n	cd00 <roll_pitch_pid_run+0xa0>
    cce2:	f240 1314 	movw	r3, #276	; 0x114
    cce6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ccea:	681b      	ldr	r3, [r3, #0]
    ccec:	4618      	mov	r0, r3
    ccee:	6879      	ldr	r1, [r7, #4]
    ccf0:	f006 fac0 	bl	13274 <__aeabi_fmul>
    ccf4:	4603      	mov	r3, r0
    ccf6:	4618      	mov	r0, r3
    ccf8:	f006 fc82 	bl	13600 <__aeabi_f2iz>
    ccfc:	4603      	mov	r3, r0
    ccfe:	b29b      	uxth	r3, r3
    cd00:	b29a      	uxth	r2, r3
    cd02:	f64b 135e 	movw	r3, #47454	; 0xb95e
    cd06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd0a:	801a      	strh	r2, [r3, #0]
  if (pitch_of_roll <0.)
    cd0c:	f64b 1364 	movw	r3, #47460	; 0xb964
    cd10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd14:	681b      	ldr	r3, [r3, #0]
    cd16:	4618      	mov	r0, r3
    cd18:	f04f 0100 	mov.w	r1, #0
    cd1c:	f006 fc48 	bl	135b0 <__aeabi_fcmplt>
    cd20:	4603      	mov	r3, r0
    cd22:	2b00      	cmp	r3, #0
    cd24:	d006      	beq.n	cd34 <roll_pitch_pid_run+0xd4>
    pitch_of_roll = 0.;
    cd26:	f64b 1364 	movw	r3, #47460	; 0xb964
    cd2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd2e:	f04f 0200 	mov.w	r2, #0
    cd32:	601a      	str	r2, [r3, #0]
  err = -(estimator_theta - desired_pitch - pitch_of_roll * fabs(estimator_phi));
    cd34:	f64b 33f0 	movw	r3, #48112	; 0xbbf0
    cd38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd3c:	681a      	ldr	r2, [r3, #0]
    cd3e:	f64b 1358 	movw	r3, #47448	; 0xb958
    cd42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd46:	681b      	ldr	r3, [r3, #0]
    cd48:	4610      	mov	r0, r2
    cd4a:	4619      	mov	r1, r3
    cd4c:	f006 f988 	bl	13060 <__aeabi_fsub>
    cd50:	4603      	mov	r3, r0
    cd52:	461c      	mov	r4, r3
    cd54:	f64b 33e8 	movw	r3, #48104	; 0xbbe8
    cd58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd5c:	681b      	ldr	r3, [r3, #0]
    cd5e:	4618      	mov	r0, r3
    cd60:	f04f 0100 	mov.w	r1, #0
    cd64:	f006 fc24 	bl	135b0 <__aeabi_fcmplt>
    cd68:	4603      	mov	r3, r0
    cd6a:	2b00      	cmp	r3, #0
    cd6c:	d007      	beq.n	cd7e <roll_pitch_pid_run+0x11e>
    cd6e:	f64b 33e8 	movw	r3, #48104	; 0xbbe8
    cd72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd76:	681b      	ldr	r3, [r3, #0]
    cd78:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
    cd7c:	e004      	b.n	cd88 <roll_pitch_pid_run+0x128>
    cd7e:	f64b 33e8 	movw	r3, #48104	; 0xbbe8
    cd82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd86:	681a      	ldr	r2, [r3, #0]
    cd88:	f64b 1364 	movw	r3, #47460	; 0xb964
    cd8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd90:	681b      	ldr	r3, [r3, #0]
    cd92:	4610      	mov	r0, r2
    cd94:	4619      	mov	r1, r3
    cd96:	f006 fa6d 	bl	13274 <__aeabi_fmul>
    cd9a:	4603      	mov	r3, r0
    cd9c:	4620      	mov	r0, r4
    cd9e:	4619      	mov	r1, r3
    cda0:	f006 f95e 	bl	13060 <__aeabi_fsub>
    cda4:	4603      	mov	r3, r0
    cda6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    cdaa:	607b      	str	r3, [r7, #4]
  desired_elevator = TRIM_PPRZ(pitch_pgain * err);
    cdac:	f240 1318 	movw	r3, #280	; 0x118
    cdb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cdb4:	681b      	ldr	r3, [r3, #0]
    cdb6:	4618      	mov	r0, r3
    cdb8:	6879      	ldr	r1, [r7, #4]
    cdba:	f006 fa5b 	bl	13274 <__aeabi_fmul>
    cdbe:	4603      	mov	r3, r0
    cdc0:	4618      	mov	r0, r3
    cdc2:	f04f 0100 	mov.w	r1, #0
    cdc6:	f2cc 6116 	movt	r1, #50710	; 0xc616
    cdca:	f006 fbf1 	bl	135b0 <__aeabi_fcmplt>
    cdce:	4603      	mov	r3, r0
    cdd0:	2b00      	cmp	r3, #0
    cdd2:	d002      	beq.n	cdda <roll_pitch_pid_run+0x17a>
    cdd4:	f64d 2280 	movw	r2, #55936	; 0xda80
    cdd8:	e026      	b.n	ce28 <roll_pitch_pid_run+0x1c8>
    cdda:	f240 1318 	movw	r3, #280	; 0x118
    cdde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cde2:	681b      	ldr	r3, [r3, #0]
    cde4:	4618      	mov	r0, r3
    cde6:	6879      	ldr	r1, [r7, #4]
    cde8:	f006 fa44 	bl	13274 <__aeabi_fmul>
    cdec:	4603      	mov	r3, r0
    cdee:	4618      	mov	r0, r3
    cdf0:	f04f 0100 	mov.w	r1, #0
    cdf4:	f2c4 6116 	movt	r1, #17942	; 0x4616
    cdf8:	f006 fbf8 	bl	135ec <__aeabi_fcmpgt>
    cdfc:	4603      	mov	r3, r0
    cdfe:	2b00      	cmp	r3, #0
    ce00:	d002      	beq.n	ce08 <roll_pitch_pid_run+0x1a8>
    ce02:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    ce06:	e00e      	b.n	ce26 <roll_pitch_pid_run+0x1c6>
    ce08:	f240 1318 	movw	r3, #280	; 0x118
    ce0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce10:	681b      	ldr	r3, [r3, #0]
    ce12:	4618      	mov	r0, r3
    ce14:	6879      	ldr	r1, [r7, #4]
    ce16:	f006 fa2d 	bl	13274 <__aeabi_fmul>
    ce1a:	4603      	mov	r3, r0
    ce1c:	4618      	mov	r0, r3
    ce1e:	f006 fbef 	bl	13600 <__aeabi_f2iz>
    ce22:	4603      	mov	r3, r0
    ce24:	b29b      	uxth	r3, r3
    ce26:	b29a      	uxth	r2, r3
    ce28:	f64b 1360 	movw	r3, #47456	; 0xb960
    ce2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce30:	801a      	strh	r2, [r3, #0]
}
    ce32:	370c      	adds	r7, #12
    ce34:	46bd      	mov	sp, r7
    ce36:	bd90      	pop	{r4, r7, pc}

0000ce38 <course_pid_run>:

float course_pgain = COURSE_PGAIN;
float desired_course = 0.;
float max_roll = MAX_ROLL;

void course_pid_run( void ) {
    ce38:	b580      	push	{r7, lr}
    ce3a:	b082      	sub	sp, #8
    ce3c:	af00      	add	r7, sp, #0
  float err = estimator_hspeed_dir - desired_course;
    ce3e:	f64b 4318 	movw	r3, #48152	; 0xbc18
    ce42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce46:	681a      	ldr	r2, [r3, #0]
    ce48:	f64b 136c 	movw	r3, #47468	; 0xb96c
    ce4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce50:	681b      	ldr	r3, [r3, #0]
    ce52:	4610      	mov	r0, r2
    ce54:	4619      	mov	r1, r3
    ce56:	f006 f903 	bl	13060 <__aeabi_fsub>
    ce5a:	4603      	mov	r3, r0
    ce5c:	607b      	str	r3, [r7, #4]
  NORM_RAD_ANGLE(err);
    ce5e:	e013      	b.n	ce88 <course_pid_run+0x50>
    ce60:	6878      	ldr	r0, [r7, #4]
    ce62:	f005 fd73 	bl	1294c <__aeabi_f2d>
    ce66:	4602      	mov	r2, r0
    ce68:	460b      	mov	r3, r1
    ce6a:	4610      	mov	r0, r2
    ce6c:	4619      	mov	r1, r3
    ce6e:	a348      	add	r3, pc, #288	; (adr r3, cf90 <course_pid_run+0x158>)
    ce70:	e9d3 2300 	ldrd	r2, r3, [r3]
    ce74:	f005 fc0a 	bl	1268c <__aeabi_dsub>
    ce78:	4602      	mov	r2, r0
    ce7a:	460b      	mov	r3, r1
    ce7c:	4610      	mov	r0, r2
    ce7e:	4619      	mov	r1, r3
    ce80:	f006 f89a 	bl	12fb8 <__aeabi_d2f>
    ce84:	4603      	mov	r3, r0
    ce86:	607b      	str	r3, [r7, #4]
    ce88:	6878      	ldr	r0, [r7, #4]
    ce8a:	f005 fd5f 	bl	1294c <__aeabi_f2d>
    ce8e:	4602      	mov	r2, r0
    ce90:	460b      	mov	r3, r1
    ce92:	4610      	mov	r0, r2
    ce94:	4619      	mov	r1, r3
    ce96:	a340      	add	r3, pc, #256	; (adr r3, cf98 <course_pid_run+0x160>)
    ce98:	e9d3 2300 	ldrd	r2, r3, [r3]
    ce9c:	f006 f83a 	bl	12f14 <__aeabi_dcmpgt>
    cea0:	4603      	mov	r3, r0
    cea2:	2b00      	cmp	r3, #0
    cea4:	d1dc      	bne.n	ce60 <course_pid_run+0x28>
    cea6:	e013      	b.n	ced0 <course_pid_run+0x98>
    cea8:	6878      	ldr	r0, [r7, #4]
    ceaa:	f005 fd4f 	bl	1294c <__aeabi_f2d>
    ceae:	4602      	mov	r2, r0
    ceb0:	460b      	mov	r3, r1
    ceb2:	4610      	mov	r0, r2
    ceb4:	4619      	mov	r1, r3
    ceb6:	a336      	add	r3, pc, #216	; (adr r3, cf90 <course_pid_run+0x158>)
    ceb8:	e9d3 2300 	ldrd	r2, r3, [r3]
    cebc:	f005 fbe8 	bl	12690 <__adddf3>
    cec0:	4602      	mov	r2, r0
    cec2:	460b      	mov	r3, r1
    cec4:	4610      	mov	r0, r2
    cec6:	4619      	mov	r1, r3
    cec8:	f006 f876 	bl	12fb8 <__aeabi_d2f>
    cecc:	4603      	mov	r3, r0
    cece:	607b      	str	r3, [r7, #4]
    ced0:	6878      	ldr	r0, [r7, #4]
    ced2:	f005 fd3b 	bl	1294c <__aeabi_f2d>
    ced6:	4602      	mov	r2, r0
    ced8:	460b      	mov	r3, r1
    ceda:	4610      	mov	r0, r2
    cedc:	4619      	mov	r1, r3
    cede:	a330      	add	r3, pc, #192	; (adr r3, cfa0 <course_pid_run+0x168>)
    cee0:	e9d3 2300 	ldrd	r2, r3, [r3]
    cee4:	f005 fff8 	bl	12ed8 <__aeabi_dcmplt>
    cee8:	4603      	mov	r3, r0
    ceea:	2b00      	cmp	r3, #0
    ceec:	d1dc      	bne.n	cea8 <course_pid_run+0x70>
  nav_desired_roll = course_pgain * err; //  * fspeed / AIR_SPEED;
    ceee:	f240 1320 	movw	r3, #288	; 0x120
    cef2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cef6:	681b      	ldr	r3, [r3, #0]
    cef8:	4618      	mov	r0, r3
    cefa:	6879      	ldr	r1, [r7, #4]
    cefc:	f006 f9ba 	bl	13274 <__aeabi_fmul>
    cf00:	4603      	mov	r3, r0
    cf02:	461a      	mov	r2, r3
    cf04:	f64b 13b0 	movw	r3, #47536	; 0xb9b0
    cf08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf0c:	601a      	str	r2, [r3, #0]
  if (nav_desired_roll > max_roll)
    cf0e:	f64b 13b0 	movw	r3, #47536	; 0xb9b0
    cf12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf16:	681a      	ldr	r2, [r3, #0]
    cf18:	f240 1324 	movw	r3, #292	; 0x124
    cf1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf20:	681b      	ldr	r3, [r3, #0]
    cf22:	4610      	mov	r0, r2
    cf24:	4619      	mov	r1, r3
    cf26:	f006 fb61 	bl	135ec <__aeabi_fcmpgt>
    cf2a:	4603      	mov	r3, r0
    cf2c:	2b00      	cmp	r3, #0
    cf2e:	d00a      	beq.n	cf46 <course_pid_run+0x10e>
    nav_desired_roll = max_roll;
    cf30:	f240 1324 	movw	r3, #292	; 0x124
    cf34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf38:	681a      	ldr	r2, [r3, #0]
    cf3a:	f64b 13b0 	movw	r3, #47536	; 0xb9b0
    cf3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf42:	601a      	str	r2, [r3, #0]
    cf44:	e01e      	b.n	cf84 <course_pid_run+0x14c>
  else if (nav_desired_roll < -max_roll)
    cf46:	f240 1324 	movw	r3, #292	; 0x124
    cf4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf4e:	681b      	ldr	r3, [r3, #0]
    cf50:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
    cf54:	f64b 13b0 	movw	r3, #47536	; 0xb9b0
    cf58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf5c:	681b      	ldr	r3, [r3, #0]
    cf5e:	4610      	mov	r0, r2
    cf60:	4619      	mov	r1, r3
    cf62:	f006 fb43 	bl	135ec <__aeabi_fcmpgt>
    cf66:	4603      	mov	r3, r0
    cf68:	2b00      	cmp	r3, #0
    cf6a:	d00b      	beq.n	cf84 <course_pid_run+0x14c>
    nav_desired_roll = -max_roll;
    cf6c:	f240 1324 	movw	r3, #292	; 0x124
    cf70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf74:	681b      	ldr	r3, [r3, #0]
    cf76:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
    cf7a:	f64b 13b0 	movw	r3, #47536	; 0xb9b0
    cf7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf82:	601a      	str	r2, [r3, #0]
}
    cf84:	3708      	adds	r7, #8
    cf86:	46bd      	mov	sp, r7
    cf88:	bd80      	pop	{r7, pc}
    cf8a:	bf00      	nop
    cf8c:	f3af 8000 	nop.w
    cf90:	54442d18 	.word	0x54442d18
    cf94:	401921fb 	.word	0x401921fb
    cf98:	54442d18 	.word	0x54442d18
    cf9c:	400921fb 	.word	0x400921fb
    cfa0:	54442d18 	.word	0x54442d18
    cfa4:	c00921fb 	.word	0xc00921fb

0000cfa8 <climb_pid_run>:

#define MAX_CLIMB_SUM_ERR 100
#define MAX_PITCH_CLIMB_SUM_ERR 100

/** \brief Computes desired_gaz and desired_pitch from desired_climb */
void climb_pid_run ( void ) {
    cfa8:	b5b0      	push	{r4, r5, r7, lr}
    cfaa:	b082      	sub	sp, #8
    cfac:	af00      	add	r7, sp, #0
  float err  = estimator_z_dot - desired_climb;
    cfae:	f64b 33fc 	movw	r3, #48124	; 0xbbfc
    cfb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfb6:	681a      	ldr	r2, [r3, #0]
    cfb8:	f64b 1370 	movw	r3, #47472	; 0xb970
    cfbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfc0:	681b      	ldr	r3, [r3, #0]
    cfc2:	4610      	mov	r0, r2
    cfc4:	4619      	mov	r1, r3
    cfc6:	f006 f84b 	bl	13060 <__aeabi_fsub>
    cfca:	4603      	mov	r3, r0
    cfcc:	607b      	str	r3, [r7, #4]
  float fgaz;
  if (auto_pitch) { /* gaz constant */
    cfce:	f24b 630f 	movw	r3, #46607	; 0xb60f
    cfd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfd6:	781b      	ldrb	r3, [r3, #0]
    cfd8:	2b00      	cmp	r3, #0
    cfda:	f000 80a8 	beq.w	d12e <climb_pid_run+0x186>
    desired_gaz = nav_desired_gaz;
    cfde:	f64b 13a8 	movw	r3, #47528	; 0xb9a8
    cfe2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfe6:	881b      	ldrh	r3, [r3, #0]
    cfe8:	b29a      	uxth	r2, r3
    cfea:	f64b 135c 	movw	r3, #47452	; 0xb95c
    cfee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cff2:	801a      	strh	r2, [r3, #0]
    desired_pitch = climb_pitch_pgain * (err + climb_pitch_igain * climb_pitch_sum_err);
    cff4:	f240 132c 	movw	r3, #300	; 0x12c
    cff8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cffc:	681a      	ldr	r2, [r3, #0]
    cffe:	f64b 137c 	movw	r3, #47484	; 0xb97c
    d002:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d006:	681b      	ldr	r3, [r3, #0]
    d008:	4610      	mov	r0, r2
    d00a:	4619      	mov	r1, r3
    d00c:	f006 f932 	bl	13274 <__aeabi_fmul>
    d010:	4603      	mov	r3, r0
    d012:	4618      	mov	r0, r3
    d014:	6879      	ldr	r1, [r7, #4]
    d016:	f006 f825 	bl	13064 <__addsf3>
    d01a:	4603      	mov	r3, r0
    d01c:	461a      	mov	r2, r3
    d01e:	f240 1328 	movw	r3, #296	; 0x128
    d022:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d026:	681b      	ldr	r3, [r3, #0]
    d028:	4610      	mov	r0, r2
    d02a:	4619      	mov	r1, r3
    d02c:	f006 f922 	bl	13274 <__aeabi_fmul>
    d030:	4603      	mov	r3, r0
    d032:	461a      	mov	r2, r3
    d034:	f64b 1358 	movw	r3, #47448	; 0xb958
    d038:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d03c:	601a      	str	r2, [r3, #0]
    if (desired_pitch > max_pitch)
    d03e:	f64b 1358 	movw	r3, #47448	; 0xb958
    d042:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d046:	681a      	ldr	r2, [r3, #0]
    d048:	f240 1330 	movw	r3, #304	; 0x130
    d04c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d050:	681b      	ldr	r3, [r3, #0]
    d052:	4610      	mov	r0, r2
    d054:	4619      	mov	r1, r3
    d056:	f006 fac9 	bl	135ec <__aeabi_fcmpgt>
    d05a:	4603      	mov	r3, r0
    d05c:	2b00      	cmp	r3, #0
    d05e:	d009      	beq.n	d074 <climb_pid_run+0xcc>
      desired_pitch = max_pitch;
    d060:	f240 1330 	movw	r3, #304	; 0x130
    d064:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d068:	681a      	ldr	r2, [r3, #0]
    d06a:	f64b 1358 	movw	r3, #47448	; 0xb958
    d06e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d072:	601a      	str	r2, [r3, #0]
    if (desired_pitch < min_pitch)
    d074:	f64b 1358 	movw	r3, #47448	; 0xb958
    d078:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d07c:	681a      	ldr	r2, [r3, #0]
    d07e:	f240 1334 	movw	r3, #308	; 0x134
    d082:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d086:	681b      	ldr	r3, [r3, #0]
    d088:	4610      	mov	r0, r2
    d08a:	4619      	mov	r1, r3
    d08c:	f006 fa90 	bl	135b0 <__aeabi_fcmplt>
    d090:	4603      	mov	r3, r0
    d092:	2b00      	cmp	r3, #0
    d094:	d009      	beq.n	d0aa <climb_pid_run+0x102>
      desired_pitch = min_pitch;
    d096:	f240 1334 	movw	r3, #308	; 0x134
    d09a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d09e:	681a      	ldr	r2, [r3, #0]
    d0a0:	f64b 1358 	movw	r3, #47448	; 0xb958
    d0a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0a8:	601a      	str	r2, [r3, #0]
    climb_pitch_sum_err += err;
    d0aa:	f64b 137c 	movw	r3, #47484	; 0xb97c
    d0ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0b2:	681b      	ldr	r3, [r3, #0]
    d0b4:	4618      	mov	r0, r3
    d0b6:	6879      	ldr	r1, [r7, #4]
    d0b8:	f005 ffd4 	bl	13064 <__addsf3>
    d0bc:	4603      	mov	r3, r0
    d0be:	461a      	mov	r2, r3
    d0c0:	f64b 137c 	movw	r3, #47484	; 0xb97c
    d0c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0c8:	601a      	str	r2, [r3, #0]
    if (climb_pitch_sum_err > MAX_PITCH_CLIMB_SUM_ERR)
    d0ca:	f64b 137c 	movw	r3, #47484	; 0xb97c
    d0ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0d2:	681b      	ldr	r3, [r3, #0]
    d0d4:	4618      	mov	r0, r3
    d0d6:	f04f 0100 	mov.w	r1, #0
    d0da:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
    d0de:	f006 fa85 	bl	135ec <__aeabi_fcmpgt>
    d0e2:	4603      	mov	r3, r0
    d0e4:	2b00      	cmp	r3, #0
    d0e6:	d008      	beq.n	d0fa <climb_pid_run+0x152>
      climb_pitch_sum_err = MAX_PITCH_CLIMB_SUM_ERR;
    d0e8:	f64b 137c 	movw	r3, #47484	; 0xb97c
    d0ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0f0:	f04f 0200 	mov.w	r2, #0
    d0f4:	f2c4 22c8 	movt	r2, #17096	; 0x42c8
    d0f8:	601a      	str	r2, [r3, #0]
    if (climb_pitch_sum_err < - MAX_PITCH_CLIMB_SUM_ERR)
    d0fa:	f64b 137c 	movw	r3, #47484	; 0xb97c
    d0fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d102:	681b      	ldr	r3, [r3, #0]
    d104:	4618      	mov	r0, r3
    d106:	f04f 0100 	mov.w	r1, #0
    d10a:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
    d10e:	f006 fa4f 	bl	135b0 <__aeabi_fcmplt>
    d112:	4603      	mov	r3, r0
    d114:	2b00      	cmp	r3, #0
    d116:	d100      	bne.n	d11a <climb_pid_run+0x172>
    d118:	e109      	b.n	d32e <climb_pid_run+0x386>
      climb_pitch_sum_err = - MAX_PITCH_CLIMB_SUM_ERR; 
    d11a:	f64b 137c 	movw	r3, #47484	; 0xb97c
    d11e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d122:	f04f 0200 	mov.w	r2, #0
    d126:	f2cc 22c8 	movt	r2, #49864	; 0xc2c8
    d12a:	601a      	str	r2, [r3, #0]
    d12c:	e0ff      	b.n	d32e <climb_pid_run+0x386>
  } else { /* pitch almost constant */
    /* pitch offset for climb */
    pitch_of_vz = (desired_climb > 0) ? desired_climb * pitch_of_vz_pgain : 0.;
    d12e:	f64b 1370 	movw	r3, #47472	; 0xb970
    d132:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d136:	681b      	ldr	r3, [r3, #0]
    d138:	4618      	mov	r0, r3
    d13a:	f04f 0100 	mov.w	r1, #0
    d13e:	f006 fa55 	bl	135ec <__aeabi_fcmpgt>
    d142:	4603      	mov	r3, r0
    d144:	2b00      	cmp	r3, #0
    d146:	d010      	beq.n	d16a <climb_pid_run+0x1c2>
    d148:	f64b 1370 	movw	r3, #47472	; 0xb970
    d14c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d150:	681a      	ldr	r2, [r3, #0]
    d152:	f240 131c 	movw	r3, #284	; 0x11c
    d156:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d15a:	681b      	ldr	r3, [r3, #0]
    d15c:	4610      	mov	r0, r2
    d15e:	4619      	mov	r1, r3
    d160:	f006 f888 	bl	13274 <__aeabi_fmul>
    d164:	4603      	mov	r3, r0
    d166:	461a      	mov	r2, r3
    d168:	e001      	b.n	d16e <climb_pid_run+0x1c6>
    d16a:	f04f 0200 	mov.w	r2, #0
    d16e:	f64b 1368 	movw	r3, #47464	; 0xb968
    d172:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d176:	601a      	str	r2, [r3, #0]
    fgaz = climb_pgain * (err + climb_igain * climb_sum_err) + CLIMB_LEVEL_GAZ + CLIMB_GAZ_OF_CLIMB*desired_climb;
    d178:	f64c 42cd 	movw	r2, #52429	; 0xcccd
    d17c:	f6c3 52cc 	movt	r2, #15820	; 0x3dcc
    d180:	f64b 1378 	movw	r3, #47480	; 0xb978
    d184:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d188:	681b      	ldr	r3, [r3, #0]
    d18a:	4610      	mov	r0, r2
    d18c:	4619      	mov	r1, r3
    d18e:	f006 f871 	bl	13274 <__aeabi_fmul>
    d192:	4603      	mov	r3, r0
    d194:	4618      	mov	r0, r3
    d196:	6879      	ldr	r1, [r7, #4]
    d198:	f005 ff64 	bl	13064 <__addsf3>
    d19c:	4603      	mov	r3, r0
    d19e:	461a      	mov	r2, r3
    d1a0:	f24c 238f 	movw	r3, #49807	; 0xc28f
    d1a4:	f6cb 43f5 	movt	r3, #48373	; 0xbcf5
    d1a8:	4610      	mov	r0, r2
    d1aa:	4619      	mov	r1, r3
    d1ac:	f006 f862 	bl	13274 <__aeabi_fmul>
    d1b0:	4603      	mov	r3, r0
    d1b2:	4618      	mov	r0, r3
    d1b4:	f005 fbca 	bl	1294c <__aeabi_f2d>
    d1b8:	4602      	mov	r2, r0
    d1ba:	460b      	mov	r3, r1
    d1bc:	4610      	mov	r0, r2
    d1be:	4619      	mov	r1, r3
    d1c0:	a35d      	add	r3, pc, #372	; (adr r3, d338 <climb_pid_run+0x390>)
    d1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
    d1c6:	f005 fa63 	bl	12690 <__adddf3>
    d1ca:	4602      	mov	r2, r0
    d1cc:	460b      	mov	r3, r1
    d1ce:	4614      	mov	r4, r2
    d1d0:	461d      	mov	r5, r3
    d1d2:	f64b 1370 	movw	r3, #47472	; 0xb970
    d1d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1da:	681b      	ldr	r3, [r3, #0]
    d1dc:	4618      	mov	r0, r3
    d1de:	f005 fbb5 	bl	1294c <__aeabi_f2d>
    d1e2:	4602      	mov	r2, r0
    d1e4:	460b      	mov	r3, r1
    d1e6:	4610      	mov	r0, r2
    d1e8:	4619      	mov	r1, r3
    d1ea:	a355      	add	r3, pc, #340	; (adr r3, d340 <climb_pid_run+0x398>)
    d1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
    d1f0:	f005 fc00 	bl	129f4 <__aeabi_dmul>
    d1f4:	4602      	mov	r2, r0
    d1f6:	460b      	mov	r3, r1
    d1f8:	4620      	mov	r0, r4
    d1fa:	4629      	mov	r1, r5
    d1fc:	f005 fa48 	bl	12690 <__adddf3>
    d200:	4602      	mov	r2, r0
    d202:	460b      	mov	r3, r1
    d204:	4610      	mov	r0, r2
    d206:	4619      	mov	r1, r3
    d208:	f005 fed6 	bl	12fb8 <__aeabi_d2f>
    d20c:	4603      	mov	r3, r0
    d20e:	603b      	str	r3, [r7, #0]
    climb_sum_err += err;
    d210:	f64b 1378 	movw	r3, #47480	; 0xb978
    d214:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d218:	681b      	ldr	r3, [r3, #0]
    d21a:	4618      	mov	r0, r3
    d21c:	6879      	ldr	r1, [r7, #4]
    d21e:	f005 ff21 	bl	13064 <__addsf3>
    d222:	4603      	mov	r3, r0
    d224:	461a      	mov	r2, r3
    d226:	f64b 1378 	movw	r3, #47480	; 0xb978
    d22a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d22e:	601a      	str	r2, [r3, #0]
    if (climb_sum_err > MAX_CLIMB_SUM_ERR) climb_sum_err = MAX_CLIMB_SUM_ERR;
    d230:	f64b 1378 	movw	r3, #47480	; 0xb978
    d234:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d238:	681b      	ldr	r3, [r3, #0]
    d23a:	4618      	mov	r0, r3
    d23c:	f04f 0100 	mov.w	r1, #0
    d240:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
    d244:	f006 f9d2 	bl	135ec <__aeabi_fcmpgt>
    d248:	4603      	mov	r3, r0
    d24a:	2b00      	cmp	r3, #0
    d24c:	d008      	beq.n	d260 <climb_pid_run+0x2b8>
    d24e:	f64b 1378 	movw	r3, #47480	; 0xb978
    d252:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d256:	f04f 0200 	mov.w	r2, #0
    d25a:	f2c4 22c8 	movt	r2, #17096	; 0x42c8
    d25e:	601a      	str	r2, [r3, #0]
    if (climb_sum_err < - MAX_CLIMB_SUM_ERR) climb_sum_err = - MAX_CLIMB_SUM_ERR;
    d260:	f64b 1378 	movw	r3, #47480	; 0xb978
    d264:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d268:	681b      	ldr	r3, [r3, #0]
    d26a:	4618      	mov	r0, r3
    d26c:	f04f 0100 	mov.w	r1, #0
    d270:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
    d274:	f006 f99c 	bl	135b0 <__aeabi_fcmplt>
    d278:	4603      	mov	r3, r0
    d27a:	2b00      	cmp	r3, #0
    d27c:	d008      	beq.n	d290 <climb_pid_run+0x2e8>
    d27e:	f64b 1378 	movw	r3, #47480	; 0xb978
    d282:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d286:	f04f 0200 	mov.w	r2, #0
    d28a:	f2cc 22c8 	movt	r2, #49864	; 0xc2c8
    d28e:	601a      	str	r2, [r3, #0]
    desired_gaz = TRIM_UPPRZ(fgaz * MAX_PPRZ);
    d290:	6838      	ldr	r0, [r7, #0]
    d292:	f04f 0100 	mov.w	r1, #0
    d296:	f2c4 6116 	movt	r1, #17942	; 0x4616
    d29a:	f005 ffeb 	bl	13274 <__aeabi_fmul>
    d29e:	4603      	mov	r3, r0
    d2a0:	4618      	mov	r0, r3
    d2a2:	f04f 0100 	mov.w	r1, #0
    d2a6:	f006 f983 	bl	135b0 <__aeabi_fcmplt>
    d2aa:	4603      	mov	r3, r0
    d2ac:	2b00      	cmp	r3, #0
    d2ae:	d001      	beq.n	d2b4 <climb_pid_run+0x30c>
    d2b0:	2200      	movs	r2, #0
    d2b2:	e022      	b.n	d2fa <climb_pid_run+0x352>
    d2b4:	6838      	ldr	r0, [r7, #0]
    d2b6:	f04f 0100 	mov.w	r1, #0
    d2ba:	f2c4 6116 	movt	r1, #17942	; 0x4616
    d2be:	f005 ffd9 	bl	13274 <__aeabi_fmul>
    d2c2:	4603      	mov	r3, r0
    d2c4:	4618      	mov	r0, r3
    d2c6:	f04f 0100 	mov.w	r1, #0
    d2ca:	f2c4 6116 	movt	r1, #17942	; 0x4616
    d2ce:	f006 f98d 	bl	135ec <__aeabi_fcmpgt>
    d2d2:	4603      	mov	r3, r0
    d2d4:	2b00      	cmp	r3, #0
    d2d6:	d002      	beq.n	d2de <climb_pid_run+0x336>
    d2d8:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    d2dc:	e00c      	b.n	d2f8 <climb_pid_run+0x350>
    d2de:	6838      	ldr	r0, [r7, #0]
    d2e0:	f04f 0100 	mov.w	r1, #0
    d2e4:	f2c4 6116 	movt	r1, #17942	; 0x4616
    d2e8:	f005 ffc4 	bl	13274 <__aeabi_fmul>
    d2ec:	4603      	mov	r3, r0
    d2ee:	4618      	mov	r0, r3
    d2f0:	f006 f986 	bl	13600 <__aeabi_f2iz>
    d2f4:	4603      	mov	r3, r0
    d2f6:	b29b      	uxth	r3, r3
    d2f8:	b29a      	uxth	r2, r3
    d2fa:	f64b 135c 	movw	r3, #47452	; 0xb95c
    d2fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d302:	801a      	strh	r2, [r3, #0]
    desired_pitch = nav_pitch + pitch_of_vz;
    d304:	f64b 13ac 	movw	r3, #47532	; 0xb9ac
    d308:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d30c:	681a      	ldr	r2, [r3, #0]
    d30e:	f64b 1368 	movw	r3, #47464	; 0xb968
    d312:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d316:	681b      	ldr	r3, [r3, #0]
    d318:	4610      	mov	r0, r2
    d31a:	4619      	mov	r1, r3
    d31c:	f005 fea2 	bl	13064 <__addsf3>
    d320:	4603      	mov	r3, r0
    d322:	461a      	mov	r2, r3
    d324:	f64b 1358 	movw	r3, #47448	; 0xb958
    d328:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d32c:	601a      	str	r2, [r3, #0]
  }
}
    d32e:	3708      	adds	r7, #8
    d330:	46bd      	mov	sp, r7
    d332:	bdb0      	pop	{r4, r5, r7, pc}
    d334:	f3af 8000 	nop.w
    d338:	3d70a3d7 	.word	0x3d70a3d7
    d33c:	3fd3d70a 	.word	0x3fd3d70a
    d340:	9999999a 	.word	0x9999999a
    d344:	3fc99999 	.word	0x3fc99999

0000d348 <altitude_pid_run>:

float altitude_pgain = ALTITUDE_PGAIN;


void altitude_pid_run(void) {
    d348:	b580      	push	{r7, lr}
    d34a:	b082      	sub	sp, #8
    d34c:	af00      	add	r7, sp, #0
  float err = estimator_z - desired_altitude;
    d34e:	f64b 33e4 	movw	r3, #48100	; 0xbbe4
    d352:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d356:	681a      	ldr	r2, [r3, #0]
    d358:	f240 133c 	movw	r3, #316	; 0x13c
    d35c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d360:	681b      	ldr	r3, [r3, #0]
    d362:	4610      	mov	r0, r2
    d364:	4619      	mov	r1, r3
    d366:	f005 fe7b 	bl	13060 <__aeabi_fsub>
    d36a:	4603      	mov	r3, r0
    d36c:	607b      	str	r3, [r7, #4]
  desired_climb = pre_climb + altitude_pgain * err;
    d36e:	f240 1338 	movw	r3, #312	; 0x138
    d372:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d376:	681b      	ldr	r3, [r3, #0]
    d378:	4618      	mov	r0, r3
    d37a:	6879      	ldr	r1, [r7, #4]
    d37c:	f005 ff7a 	bl	13274 <__aeabi_fmul>
    d380:	4603      	mov	r3, r0
    d382:	461a      	mov	r2, r3
    d384:	f64b 1374 	movw	r3, #47476	; 0xb974
    d388:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d38c:	681b      	ldr	r3, [r3, #0]
    d38e:	4610      	mov	r0, r2
    d390:	4619      	mov	r1, r3
    d392:	f005 fe67 	bl	13064 <__addsf3>
    d396:	4603      	mov	r3, r0
    d398:	461a      	mov	r2, r3
    d39a:	f64b 1370 	movw	r3, #47472	; 0xb970
    d39e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3a2:	601a      	str	r2, [r3, #0]
  if (desired_climb < -CLIMB_MAX) desired_climb = -CLIMB_MAX;
    d3a4:	f64b 1370 	movw	r3, #47472	; 0xb970
    d3a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3ac:	681b      	ldr	r3, [r3, #0]
    d3ae:	4618      	mov	r0, r3
    d3b0:	f04f 0100 	mov.w	r1, #0
    d3b4:	f6cb 7180 	movt	r1, #49024	; 0xbf80
    d3b8:	f006 f8fa 	bl	135b0 <__aeabi_fcmplt>
    d3bc:	4603      	mov	r3, r0
    d3be:	2b00      	cmp	r3, #0
    d3c0:	d008      	beq.n	d3d4 <altitude_pid_run+0x8c>
    d3c2:	f64b 1370 	movw	r3, #47472	; 0xb970
    d3c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3ca:	f04f 0200 	mov.w	r2, #0
    d3ce:	f6cb 7280 	movt	r2, #49024	; 0xbf80
    d3d2:	601a      	str	r2, [r3, #0]
  if (desired_climb > CLIMB_MAX) desired_climb = CLIMB_MAX;
    d3d4:	f64b 1370 	movw	r3, #47472	; 0xb970
    d3d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3dc:	681b      	ldr	r3, [r3, #0]
    d3de:	4618      	mov	r0, r3
    d3e0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    d3e4:	f006 f902 	bl	135ec <__aeabi_fcmpgt>
    d3e8:	4603      	mov	r3, r0
    d3ea:	2b00      	cmp	r3, #0
    d3ec:	d006      	beq.n	d3fc <altitude_pid_run+0xb4>
    d3ee:	f64b 1370 	movw	r3, #47472	; 0xb970
    d3f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3f6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    d3fa:	601a      	str	r2, [r3, #0]
}
    d3fc:	3708      	adds	r7, #8
    d3fe:	46bd      	mov	sp, r7
    d400:	bd80      	pop	{r7, pc}
    d402:	bf00      	nop
    d404:	f3af 8000 	nop.w

0000d408 <auto_nav>:
#define GROUND_ALT 125.
#define SECURITY_ALT 150.
#define MAX_DIST_FROM_HOME 500.
#ifdef NAV_C

static inline void auto_nav(void) {
    d408:	b5f0      	push	{r4, r5, r6, r7, lr}
    d40a:	b08b      	sub	sp, #44	; 0x2c
    d40c:	af00      	add	r7, sp, #0
        NextBlock()
    }

}
#else*/
if(nav_block == 0)
    d40e:	f64b 1381 	movw	r3, #47489	; 0xb981
    d412:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d416:	781b      	ldrb	r3, [r3, #0]
    d418:	2b00      	cmp	r3, #0
    d41a:	f040 8169 	bne.w	d6f0 <auto_nav+0x2e8>
{ // init
    
    if (nav_stage == 0) 
    d41e:	f64b 1380 	movw	r3, #47488	; 0xb980
    d422:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d426:	781b      	ldrb	r3, [r3, #0]
    d428:	2b00      	cmp	r3, #0
    d42a:	d13c      	bne.n	d4a6 <auto_nav+0x9e>
    {
	Label(while_1)
	nav_stage=0;
    d42c:	f64b 1380 	movw	r3, #47488	; 0xb980
    d430:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d434:	2200      	movs	r2, #0
    d436:	701a      	strb	r2, [r3, #0]
	if (! (!(estimator_flight_time))) Goto(endwhile_2) 
    d438:	f64b 430c 	movw	r3, #48140	; 0xbc0c
    d43c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d440:	881b      	ldrh	r3, [r3, #0]
    d442:	2b00      	cmp	r3, #0
    d444:	d000      	beq.n	d448 <auto_nav+0x40>
    d446:	e03d      	b.n	d4c4 <auto_nav+0xbc>
	else NextStage(); 
    d448:	f64b 1380 	movw	r3, #47488	; 0xb980
    d44c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d450:	781b      	ldrb	r3, [r3, #0]
    d452:	3301      	adds	r3, #1
    d454:	b2da      	uxtb	r2, r3
    d456:	f64b 1380 	movw	r3, #47488	; 0xb980
    d45a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d45e:	701a      	strb	r2, [r3, #0]
    d460:	f64b 33dc 	movw	r3, #48092	; 0xbbdc
    d464:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d468:	681a      	ldr	r2, [r3, #0]
    d46a:	f64b 1384 	movw	r3, #47492	; 0xb984
    d46e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d472:	601a      	str	r2, [r3, #0]
    d474:	f64b 33e0 	movw	r3, #48096	; 0xbbe0
    d478:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d47c:	681a      	ldr	r2, [r3, #0]
    d47e:	f64b 1388 	movw	r3, #47496	; 0xb988
    d482:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d486:	601a      	str	r2, [r3, #0]
    d488:	f64b 1394 	movw	r3, #47508	; 0xb994
    d48c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d490:	2200      	movs	r2, #0
    d492:	801a      	strh	r2, [r3, #0]
    d494:	f64b 1398 	movw	r3, #47512	; 0xb998
    d498:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d49c:	f04f 0200 	mov.w	r2, #0
    d4a0:	601a      	str	r2, [r3, #0]
    d4a2:	f002 b883 	b.w	f5ac <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
    d4a6:	f64b 1380 	movw	r3, #47488	; 0xb980
    d4aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4ae:	781b      	ldrb	r3, [r3, #0]
    d4b0:	2b01      	cmp	r3, #1
    d4b2:	d100      	bne.n	d4b6 <auto_nav+0xae>
    {   Goto(while_1)}
    d4b4:	e7ba      	b.n	d42c <auto_nav+0x24>
    else if (nav_stage == 2)
    d4b6:	f64b 1380 	movw	r3, #47488	; 0xb980
    d4ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4be:	781b      	ldrb	r3, [r3, #0]
    d4c0:	2b02      	cmp	r3, #2
    d4c2:	d162      	bne.n	d58a <auto_nav+0x182>
    {
	Label(endwhile_2)
	nav_stage = 2;
    d4c4:	f64b 1380 	movw	r3, #47488	; 0xb980
    d4c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4cc:	2202      	movs	r2, #2
    d4ce:	701a      	strb	r2, [r3, #0]
        if ((estimator_flight_time>8)) NextStage() else {
    d4d0:	f64b 430c 	movw	r3, #48140	; 0xbc0c
    d4d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4d8:	881b      	ldrh	r3, [r3, #0]
    d4da:	2b08      	cmp	r3, #8
    d4dc:	d92e      	bls.n	d53c <auto_nav+0x134>
    d4de:	f64b 1380 	movw	r3, #47488	; 0xb980
    d4e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4e6:	781b      	ldrb	r3, [r3, #0]
    d4e8:	3301      	adds	r3, #1
    d4ea:	b2da      	uxtb	r2, r3
    d4ec:	f64b 1380 	movw	r3, #47488	; 0xb980
    d4f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4f4:	701a      	strb	r2, [r3, #0]
    d4f6:	f64b 33dc 	movw	r3, #48092	; 0xbbdc
    d4fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4fe:	681a      	ldr	r2, [r3, #0]
    d500:	f64b 1384 	movw	r3, #47492	; 0xb984
    d504:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d508:	601a      	str	r2, [r3, #0]
    d50a:	f64b 33e0 	movw	r3, #48096	; 0xbbe0
    d50e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d512:	681a      	ldr	r2, [r3, #0]
    d514:	f64b 1388 	movw	r3, #47496	; 0xb988
    d518:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d51c:	601a      	str	r2, [r3, #0]
    d51e:	f64b 1394 	movw	r3, #47508	; 0xb994
    d522:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d526:	2200      	movs	r2, #0
    d528:	801a      	strh	r2, [r3, #0]
    d52a:	f64b 1398 	movw	r3, #47512	; 0xb998
    d52e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d532:	f04f 0200 	mov.w	r2, #0
    d536:	601a      	str	r2, [r3, #0]
    d538:	f002 b838 	b.w	f5ac <auto_nav+0x21a4>
          desired_course = RadOfDeg(QFU);
    d53c:	f64b 136c 	movw	r3, #47468	; 0xb96c
    d540:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d544:	f64c 32e4 	movw	r2, #52196	; 0xcbe4
    d548:	f2c4 0296 	movt	r2, #16534	; 0x4096
    d54c:	601a      	str	r2, [r3, #0]
          auto_pitch = FALSE;
    d54e:	f24b 630f 	movw	r3, #46607	; 0xb60f
    d552:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d556:	2200      	movs	r2, #0
    d558:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.150000;
    d55a:	f64b 13ac 	movw	r3, #47532	; 0xb9ac
    d55e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d562:	f649 129a 	movw	r2, #39322	; 0x999a
    d566:	f6c3 6219 	movt	r2, #15897	; 0x3e19
    d56a:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_GAZ;
    d56c:	f24b 630d 	movw	r3, #46605	; 0xb60d
    d570:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d574:	2201      	movs	r2, #1
    d576:	701a      	strb	r2, [r3, #0]
          nav_desired_gaz = TRIM_UPPRZ(0.800000*MAX_PPRZ);
    d578:	f64b 13a8 	movw	r3, #47528	; 0xb9a8
    d57c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d580:	f44f 52f0 	mov.w	r2, #7680	; 0x1e00
    d584:	801a      	strh	r2, [r3, #0]
        }
        return;
    d586:	f002 b811 	b.w	f5ac <auto_nav+0x21a4>
     }
     else if (nav_stage == 3)
    d58a:	f64b 1380 	movw	r3, #47488	; 0xb980
    d58e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d592:	781b      	ldrb	r3, [r3, #0]
    d594:	2b03      	cmp	r3, #3
    d596:	d168      	bne.n	d66a <auto_nav+0x262>
     {
	nav_stage = 3;	
    d598:	f64b 1380 	movw	r3, #47488	; 0xb980
    d59c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5a0:	2203      	movs	r2, #3
    d5a2:	701a      	strb	r2, [r3, #0]
        if ((estimator_z>SECURITY_ALT)) NextStage() else {
    d5a4:	f64b 33e4 	movw	r3, #48100	; 0xbbe4
    d5a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5ac:	681b      	ldr	r3, [r3, #0]
    d5ae:	4618      	mov	r0, r3
    d5b0:	f04f 0100 	mov.w	r1, #0
    d5b4:	f2c4 3116 	movt	r1, #17174	; 0x4316
    d5b8:	f006 f818 	bl	135ec <__aeabi_fcmpgt>
    d5bc:	4603      	mov	r3, r0
    d5be:	2b00      	cmp	r3, #0
    d5c0:	d02e      	beq.n	d620 <auto_nav+0x218>
    d5c2:	f64b 1380 	movw	r3, #47488	; 0xb980
    d5c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5ca:	781b      	ldrb	r3, [r3, #0]
    d5cc:	3301      	adds	r3, #1
    d5ce:	b2da      	uxtb	r2, r3
    d5d0:	f64b 1380 	movw	r3, #47488	; 0xb980
    d5d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5d8:	701a      	strb	r2, [r3, #0]
    d5da:	f64b 33dc 	movw	r3, #48092	; 0xbbdc
    d5de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5e2:	681a      	ldr	r2, [r3, #0]
    d5e4:	f64b 1384 	movw	r3, #47492	; 0xb984
    d5e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5ec:	601a      	str	r2, [r3, #0]
    d5ee:	f64b 33e0 	movw	r3, #48096	; 0xbbe0
    d5f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5f6:	681a      	ldr	r2, [r3, #0]
    d5f8:	f64b 1388 	movw	r3, #47496	; 0xb988
    d5fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d600:	601a      	str	r2, [r3, #0]
    d602:	f64b 1394 	movw	r3, #47508	; 0xb994
    d606:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d60a:	2200      	movs	r2, #0
    d60c:	801a      	strh	r2, [r3, #0]
    d60e:	f64b 1398 	movw	r3, #47512	; 0xb998
    d612:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d616:	f04f 0200 	mov.w	r2, #0
    d61a:	601a      	str	r2, [r3, #0]
    d61c:	f001 bfc6 	b.w	f5ac <auto_nav+0x21a4>
          desired_course = RadOfDeg(QFU);
    d620:	f64b 136c 	movw	r3, #47468	; 0xb96c
    d624:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d628:	f64c 32e4 	movw	r2, #52196	; 0xcbe4
    d62c:	f2c4 0296 	movt	r2, #16534	; 0x4096
    d630:	601a      	str	r2, [r3, #0]
          auto_pitch = FALSE;
    d632:	f24b 630f 	movw	r3, #46607	; 0xb60f
    d636:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d63a:	2200      	movs	r2, #0
    d63c:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.000000;
    d63e:	f64b 13ac 	movw	r3, #47532	; 0xb9ac
    d642:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d646:	f04f 0200 	mov.w	r2, #0
    d64a:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_CLIMB;
    d64c:	f24b 630d 	movw	r3, #46605	; 0xb60d
    d650:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d654:	2202      	movs	r2, #2
    d656:	701a      	strb	r2, [r3, #0]
          desired_climb = 8.000000;
    d658:	f64b 1370 	movw	r3, #47472	; 0xb970
    d65c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d660:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    d664:	601a      	str	r2, [r3, #0]
        }
        return;
    d666:	f001 bfa1 	b.w	f5ac <auto_nav+0x21a4>
     }
     else if (nav_stage == 4)
    d66a:	f64b 1380 	movw	r3, #47488	; 0xb980
    d66e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d672:	781b      	ldrb	r3, [r3, #0]
    d674:	2b04      	cmp	r3, #4
    d676:	f041 8799 	bne.w	f5ac <auto_nav+0x21a4>
        NextBlock()
    d67a:	f64b 1381 	movw	r3, #47489	; 0xb981
    d67e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d682:	781b      	ldrb	r3, [r3, #0]
    d684:	3301      	adds	r3, #1
    d686:	b2da      	uxtb	r2, r3
    d688:	f64b 1381 	movw	r3, #47489	; 0xb981
    d68c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d690:	701a      	strb	r2, [r3, #0]
    d692:	f64b 1380 	movw	r3, #47488	; 0xb980
    d696:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d69a:	2200      	movs	r2, #0
    d69c:	701a      	strb	r2, [r3, #0]
    d69e:	f64b 1396 	movw	r3, #47510	; 0xb996
    d6a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6a6:	2200      	movs	r2, #0
    d6a8:	801a      	strh	r2, [r3, #0]
    d6aa:	f64b 33dc 	movw	r3, #48092	; 0xbbdc
    d6ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6b2:	681a      	ldr	r2, [r3, #0]
    d6b4:	f64b 1384 	movw	r3, #47492	; 0xb984
    d6b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6bc:	601a      	str	r2, [r3, #0]
    d6be:	f64b 33e0 	movw	r3, #48096	; 0xbbe0
    d6c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6c6:	681a      	ldr	r2, [r3, #0]
    d6c8:	f64b 1388 	movw	r3, #47496	; 0xb988
    d6cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6d0:	601a      	str	r2, [r3, #0]
    d6d2:	f64b 1394 	movw	r3, #47508	; 0xb994
    d6d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6da:	2200      	movs	r2, #0
    d6dc:	801a      	strh	r2, [r3, #0]
    d6de:	f64b 1398 	movw	r3, #47512	; 0xb998
    d6e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6e6:	f04f 0200 	mov.w	r2, #0
    d6ea:	601a      	str	r2, [r3, #0]
    d6ec:	f001 bf5e 	b.w	f5ac <auto_nav+0x21a4>
     else { }
}
else if (nav_block == 1) // two
    d6f0:	f64b 1381 	movw	r3, #47489	; 0xb981
    d6f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6f8:	781b      	ldrb	r3, [r3, #0]
    d6fa:	2b01      	cmp	r3, #1
    d6fc:	f040 81bc 	bne.w	da78 <auto_nav+0x670>
{
    nav_block = 1;
    d700:	f64b 1381 	movw	r3, #47489	; 0xb981
    d704:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d708:	2201      	movs	r2, #1
    d70a:	701a      	strb	r2, [r3, #0]
    if RcEvent1() 
    d70c:	f24b 6310 	movw	r3, #46608	; 0xb610
    d710:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d714:	781b      	ldrb	r3, [r3, #0]
    d716:	2b00      	cmp	r3, #0
    d718:	d007      	beq.n	d72a <auto_nav+0x322>
    d71a:	f24b 6310 	movw	r3, #46608	; 0xb610
    d71e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d722:	2200      	movs	r2, #0
    d724:	701a      	strb	r2, [r3, #0]
    d726:	2301      	movs	r3, #1
    d728:	e000      	b.n	d72c <auto_nav+0x324>
    d72a:	2300      	movs	r3, #0
    d72c:	2b00      	cmp	r3, #0
    d72e:	d034      	beq.n	d79a <auto_nav+0x392>
	{ GotoBlock(2) }
    d730:	f64b 1381 	movw	r3, #47489	; 0xb981
    d734:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d738:	2202      	movs	r2, #2
    d73a:	701a      	strb	r2, [r3, #0]
    d73c:	f64b 1380 	movw	r3, #47488	; 0xb980
    d740:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d744:	2200      	movs	r2, #0
    d746:	701a      	strb	r2, [r3, #0]
    d748:	f64b 1396 	movw	r3, #47510	; 0xb996
    d74c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d750:	2200      	movs	r2, #0
    d752:	801a      	strh	r2, [r3, #0]
    d754:	f64b 33dc 	movw	r3, #48092	; 0xbbdc
    d758:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d75c:	681a      	ldr	r2, [r3, #0]
    d75e:	f64b 1384 	movw	r3, #47492	; 0xb984
    d762:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d766:	601a      	str	r2, [r3, #0]
    d768:	f64b 33e0 	movw	r3, #48096	; 0xbbe0
    d76c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d770:	681a      	ldr	r2, [r3, #0]
    d772:	f64b 1388 	movw	r3, #47496	; 0xb988
    d776:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d77a:	601a      	str	r2, [r3, #0]
    d77c:	f64b 1394 	movw	r3, #47508	; 0xb994
    d780:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d784:	2200      	movs	r2, #0
    d786:	801a      	strh	r2, [r3, #0]
    d788:	f64b 1398 	movw	r3, #47512	; 0xb998
    d78c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d790:	f04f 0200 	mov.w	r2, #0
    d794:	601a      	str	r2, [r3, #0]
    d796:	f001 bf09 	b.w	f5ac <auto_nav+0x21a4>
    if(nav_stage == 0)
    d79a:	f64b 1380 	movw	r3, #47488	; 0xb980
    d79e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7a2:	781b      	ldrb	r3, [r3, #0]
    d7a4:	2b00      	cmp	r3, #0
    d7a6:	d12e      	bne.n	d806 <auto_nav+0x3fe>
    {
       Label(while_3)
       if (! (TRUE)) Goto(endwhile_4) else NextStage();
    d7a8:	f64b 1380 	movw	r3, #47488	; 0xb980
    d7ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7b0:	781b      	ldrb	r3, [r3, #0]
    d7b2:	3301      	adds	r3, #1
    d7b4:	b2da      	uxtb	r2, r3
    d7b6:	f64b 1380 	movw	r3, #47488	; 0xb980
    d7ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7be:	701a      	strb	r2, [r3, #0]
    d7c0:	f64b 33dc 	movw	r3, #48092	; 0xbbdc
    d7c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7c8:	681a      	ldr	r2, [r3, #0]
    d7ca:	f64b 1384 	movw	r3, #47492	; 0xb984
    d7ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7d2:	601a      	str	r2, [r3, #0]
    d7d4:	f64b 33e0 	movw	r3, #48096	; 0xbbe0
    d7d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7dc:	681a      	ldr	r2, [r3, #0]
    d7de:	f64b 1388 	movw	r3, #47496	; 0xb988
    d7e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7e6:	601a      	str	r2, [r3, #0]
    d7e8:	f64b 1394 	movw	r3, #47508	; 0xb994
    d7ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7f0:	2200      	movs	r2, #0
    d7f2:	801a      	strh	r2, [r3, #0]
    d7f4:	f64b 1398 	movw	r3, #47512	; 0xb998
    d7f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7fc:	f04f 0200 	mov.w	r2, #0
    d800:	601a      	str	r2, [r3, #0]
    d802:	f001 bed3 	b.w	f5ac <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
    d806:	f64b 1380 	movw	r3, #47488	; 0xb980
    d80a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d80e:	781b      	ldrb	r3, [r3, #0]
    d810:	2b01      	cmp	r3, #1
    d812:	d169      	bne.n	d8e8 <auto_nav+0x4e0>
    {
	  nav_stage = 1;
    d814:	f64b 1380 	movw	r3, #47488	; 0xb980
    d818:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d81c:	2201      	movs	r2, #1
    d81e:	701a      	strb	r2, [r3, #0]
          if (approaching(1)) NextStageFrom(1) else {
    d820:	2001      	movs	r0, #1
    d822:	f001 fed1 	bl	f5c8 <approaching>
    d826:	4603      	mov	r3, r0
    d828:	2b00      	cmp	r3, #0
    d82a:	d034      	beq.n	d896 <auto_nav+0x48e>
    d82c:	f64b 138c 	movw	r3, #47500	; 0xb98c
    d830:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d834:	2201      	movs	r2, #1
    d836:	701a      	strb	r2, [r3, #0]
    d838:	f64b 1380 	movw	r3, #47488	; 0xb980
    d83c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d840:	781b      	ldrb	r3, [r3, #0]
    d842:	3301      	adds	r3, #1
    d844:	b2da      	uxtb	r2, r3
    d846:	f64b 1380 	movw	r3, #47488	; 0xb980
    d84a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d84e:	701a      	strb	r2, [r3, #0]
    d850:	f64b 33dc 	movw	r3, #48092	; 0xbbdc
    d854:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d858:	681a      	ldr	r2, [r3, #0]
    d85a:	f64b 1384 	movw	r3, #47492	; 0xb984
    d85e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d862:	601a      	str	r2, [r3, #0]
    d864:	f64b 33e0 	movw	r3, #48096	; 0xbbe0
    d868:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d86c:	681a      	ldr	r2, [r3, #0]
    d86e:	f64b 1388 	movw	r3, #47496	; 0xb988
    d872:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d876:	601a      	str	r2, [r3, #0]
    d878:	f64b 1394 	movw	r3, #47508	; 0xb994
    d87c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d880:	2200      	movs	r2, #0
    d882:	801a      	strh	r2, [r3, #0]
    d884:	f64b 1398 	movw	r3, #47512	; 0xb998
    d888:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d88c:	f04f 0200 	mov.w	r2, #0
    d890:	601a      	str	r2, [r3, #0]
    d892:	f001 be8b 	b.w	f5ac <auto_nav+0x21a4>
            fly_to(1);
    d896:	2001      	movs	r0, #1
    d898:	f001 ffca 	bl	f830 <fly_to>
            auto_pitch = FALSE;
    d89c:	f24b 630f 	movw	r3, #46607	; 0xb60f
    d8a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8a4:	2200      	movs	r2, #0
    d8a6:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
    d8a8:	f64b 13ac 	movw	r3, #47532	; 0xb9ac
    d8ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8b0:	f04f 0200 	mov.w	r2, #0
    d8b4:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
    d8b6:	f24b 630d 	movw	r3, #46605	; 0xb60d
    d8ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8be:	2203      	movs	r2, #3
    d8c0:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[1].a;
    d8c2:	f240 1340 	movw	r3, #320	; 0x140
    d8c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8ca:	695a      	ldr	r2, [r3, #20]
    d8cc:	f240 133c 	movw	r3, #316	; 0x13c
    d8d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8d4:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
    d8d6:	f64b 1374 	movw	r3, #47476	; 0xb974
    d8da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8de:	f04f 0200 	mov.w	r2, #0
    d8e2:	601a      	str	r2, [r3, #0]
          }
          return;
    d8e4:	f001 be62 	b.w	f5ac <auto_nav+0x21a4>
     }
     else if (nav_stage == 2)
    d8e8:	f64b 1380 	movw	r3, #47488	; 0xb980
    d8ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8f0:	781b      	ldrb	r3, [r3, #0]
    d8f2:	2b02      	cmp	r3, #2
    d8f4:	d169      	bne.n	d9ca <auto_nav+0x5c2>
     {
	  nav_stage = 2;
    d8f6:	f64b 1380 	movw	r3, #47488	; 0xb980
    d8fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8fe:	2202      	movs	r2, #2
    d900:	701a      	strb	r2, [r3, #0]
          if (approaching(4)) NextStageFrom(4) else {
    d902:	2004      	movs	r0, #4
    d904:	f001 fe60 	bl	f5c8 <approaching>
    d908:	4603      	mov	r3, r0
    d90a:	2b00      	cmp	r3, #0
    d90c:	d034      	beq.n	d978 <auto_nav+0x570>
    d90e:	f64b 138c 	movw	r3, #47500	; 0xb98c
    d912:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d916:	2204      	movs	r2, #4
    d918:	701a      	strb	r2, [r3, #0]
    d91a:	f64b 1380 	movw	r3, #47488	; 0xb980
    d91e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d922:	781b      	ldrb	r3, [r3, #0]
    d924:	3301      	adds	r3, #1
    d926:	b2da      	uxtb	r2, r3
    d928:	f64b 1380 	movw	r3, #47488	; 0xb980
    d92c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d930:	701a      	strb	r2, [r3, #0]
    d932:	f64b 33dc 	movw	r3, #48092	; 0xbbdc
    d936:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d93a:	681a      	ldr	r2, [r3, #0]
    d93c:	f64b 1384 	movw	r3, #47492	; 0xb984
    d940:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d944:	601a      	str	r2, [r3, #0]
    d946:	f64b 33e0 	movw	r3, #48096	; 0xbbe0
    d94a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d94e:	681a      	ldr	r2, [r3, #0]
    d950:	f64b 1388 	movw	r3, #47496	; 0xb988
    d954:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d958:	601a      	str	r2, [r3, #0]
    d95a:	f64b 1394 	movw	r3, #47508	; 0xb994
    d95e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d962:	2200      	movs	r2, #0
    d964:	801a      	strh	r2, [r3, #0]
    d966:	f64b 1398 	movw	r3, #47512	; 0xb998
    d96a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d96e:	f04f 0200 	mov.w	r2, #0
    d972:	601a      	str	r2, [r3, #0]
    d974:	f001 be1a 	b.w	f5ac <auto_nav+0x21a4>
            fly_to(4);
    d978:	2004      	movs	r0, #4
    d97a:	f001 ff59 	bl	f830 <fly_to>
            auto_pitch = FALSE;
    d97e:	f24b 630f 	movw	r3, #46607	; 0xb60f
    d982:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d986:	2200      	movs	r2, #0
    d988:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
    d98a:	f64b 13ac 	movw	r3, #47532	; 0xb9ac
    d98e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d992:	f04f 0200 	mov.w	r2, #0
    d996:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
    d998:	f24b 630d 	movw	r3, #46605	; 0xb60d
    d99c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9a0:	2203      	movs	r2, #3
    d9a2:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[4].a;
    d9a4:	f240 1340 	movw	r3, #320	; 0x140
    d9a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    d9ae:	f240 133c 	movw	r3, #316	; 0x13c
    d9b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9b6:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
    d9b8:	f64b 1374 	movw	r3, #47476	; 0xb974
    d9bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9c0:	f04f 0200 	mov.w	r2, #0
    d9c4:	601a      	str	r2, [r3, #0]
          }
          return;
    d9c6:	f001 bdf1 	b.w	f5ac <auto_nav+0x21a4>
      }
      else if (nav_stage == 3)
    d9ca:	f64b 1380 	movw	r3, #47488	; 0xb980
    d9ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9d2:	781b      	ldrb	r3, [r3, #0]
    d9d4:	2b03      	cmp	r3, #3
    d9d6:	d106      	bne.n	d9e6 <auto_nav+0x5de>
      {
	  nav_stage = 3;
    d9d8:	f64b 1380 	movw	r3, #47488	; 0xb980
    d9dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9e0:	2203      	movs	r2, #3
    d9e2:	701a      	strb	r2, [r3, #0]
          Goto(while_3)
    d9e4:	e6e0      	b.n	d7a8 <auto_nav+0x3a0>
      }
      else if (nav_stage == 4)
    d9e6:	f64b 1380 	movw	r3, #47488	; 0xb980
    d9ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9ee:	781b      	ldrb	r3, [r3, #0]
    d9f0:	2b04      	cmp	r3, #4
    d9f2:	f041 85db 	bne.w	f5ac <auto_nav+0x21a4>
      {
        Label(endwhile_4)
	nav_stage = 4;
    d9f6:	f64b 1380 	movw	r3, #47488	; 0xb980
    d9fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9fe:	2204      	movs	r2, #4
    da00:	701a      	strb	r2, [r3, #0]
        NextBlock()
    da02:	f64b 1381 	movw	r3, #47489	; 0xb981
    da06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da0a:	781b      	ldrb	r3, [r3, #0]
    da0c:	3301      	adds	r3, #1
    da0e:	b2da      	uxtb	r2, r3
    da10:	f64b 1381 	movw	r3, #47489	; 0xb981
    da14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da18:	701a      	strb	r2, [r3, #0]
    da1a:	f64b 1380 	movw	r3, #47488	; 0xb980
    da1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da22:	2200      	movs	r2, #0
    da24:	701a      	strb	r2, [r3, #0]
    da26:	f64b 1396 	movw	r3, #47510	; 0xb996
    da2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da2e:	2200      	movs	r2, #0
    da30:	801a      	strh	r2, [r3, #0]
    da32:	f64b 33dc 	movw	r3, #48092	; 0xbbdc
    da36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da3a:	681a      	ldr	r2, [r3, #0]
    da3c:	f64b 1384 	movw	r3, #47492	; 0xb984
    da40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da44:	601a      	str	r2, [r3, #0]
    da46:	f64b 33e0 	movw	r3, #48096	; 0xbbe0
    da4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da4e:	681a      	ldr	r2, [r3, #0]
    da50:	f64b 1388 	movw	r3, #47496	; 0xb988
    da54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da58:	601a      	str	r2, [r3, #0]
    da5a:	f64b 1394 	movw	r3, #47508	; 0xb994
    da5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da62:	2200      	movs	r2, #0
    da64:	801a      	strh	r2, [r3, #0]
    da66:	f64b 1398 	movw	r3, #47512	; 0xb998
    da6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da6e:	f04f 0200 	mov.w	r2, #0
    da72:	601a      	str	r2, [r3, #0]
    da74:	f001 bd9a 	b.w	f5ac <auto_nav+0x21a4>
      }
      else { }
}
else if (nav_block == 2) // height
    da78:	f64b 1381 	movw	r3, #47489	; 0xb981
    da7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da80:	781b      	ldrb	r3, [r3, #0]
    da82:	2b02      	cmp	r3, #2
    da84:	f040 8392 	bne.w	e1ac <auto_nav+0xda4>
{
	nav_block = 2;
    da88:	f64b 1381 	movw	r3, #47489	; 0xb981
    da8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da90:	2202      	movs	r2, #2
    da92:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(3) }
    da94:	f24b 6310 	movw	r3, #46608	; 0xb610
    da98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da9c:	781b      	ldrb	r3, [r3, #0]
    da9e:	2b00      	cmp	r3, #0
    daa0:	d007      	beq.n	dab2 <auto_nav+0x6aa>
    daa2:	f24b 6310 	movw	r3, #46608	; 0xb610
    daa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    daaa:	2200      	movs	r2, #0
    daac:	701a      	strb	r2, [r3, #0]
    daae:	2301      	movs	r3, #1
    dab0:	e000      	b.n	dab4 <auto_nav+0x6ac>
    dab2:	2300      	movs	r3, #0
    dab4:	2b00      	cmp	r3, #0
    dab6:	d034      	beq.n	db22 <auto_nav+0x71a>
    dab8:	f64b 1381 	movw	r3, #47489	; 0xb981
    dabc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dac0:	2203      	movs	r2, #3
    dac2:	701a      	strb	r2, [r3, #0]
    dac4:	f64b 1380 	movw	r3, #47488	; 0xb980
    dac8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dacc:	2200      	movs	r2, #0
    dace:	701a      	strb	r2, [r3, #0]
    dad0:	f64b 1396 	movw	r3, #47510	; 0xb996
    dad4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dad8:	2200      	movs	r2, #0
    dada:	801a      	strh	r2, [r3, #0]
    dadc:	f64b 33dc 	movw	r3, #48092	; 0xbbdc
    dae0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dae4:	681a      	ldr	r2, [r3, #0]
    dae6:	f64b 1384 	movw	r3, #47492	; 0xb984
    daea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    daee:	601a      	str	r2, [r3, #0]
    daf0:	f64b 33e0 	movw	r3, #48096	; 0xbbe0
    daf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    daf8:	681a      	ldr	r2, [r3, #0]
    dafa:	f64b 1388 	movw	r3, #47496	; 0xb988
    dafe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db02:	601a      	str	r2, [r3, #0]
    db04:	f64b 1394 	movw	r3, #47508	; 0xb994
    db08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db0c:	2200      	movs	r2, #0
    db0e:	801a      	strh	r2, [r3, #0]
    db10:	f64b 1398 	movw	r3, #47512	; 0xb998
    db14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db18:	f04f 0200 	mov.w	r2, #0
    db1c:	601a      	str	r2, [r3, #0]
    db1e:	f001 bd45 	b.w	f5ac <auto_nav+0x21a4>
    
    if(nav_stage == 0)
    db22:	f64b 1380 	movw	r3, #47488	; 0xb980
    db26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db2a:	781b      	ldrb	r3, [r3, #0]
    db2c:	2b00      	cmp	r3, #0
    db2e:	d134      	bne.n	db9a <auto_nav+0x792>
    {
       Label(while_5)
       nav_stage = 0;
    db30:	f64b 1380 	movw	r3, #47488	; 0xb980
    db34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db38:	2200      	movs	r2, #0
    db3a:	701a      	strb	r2, [r3, #0]
       if (! (TRUE)) Goto(endwhile_6) else NextStage();
    db3c:	f64b 1380 	movw	r3, #47488	; 0xb980
    db40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db44:	781b      	ldrb	r3, [r3, #0]
    db46:	3301      	adds	r3, #1
    db48:	b2da      	uxtb	r2, r3
    db4a:	f64b 1380 	movw	r3, #47488	; 0xb980
    db4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db52:	701a      	strb	r2, [r3, #0]
    db54:	f64b 33dc 	movw	r3, #48092	; 0xbbdc
    db58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db5c:	681a      	ldr	r2, [r3, #0]
    db5e:	f64b 1384 	movw	r3, #47492	; 0xb984
    db62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db66:	601a      	str	r2, [r3, #0]
    db68:	f64b 33e0 	movw	r3, #48096	; 0xbbe0
    db6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db70:	681a      	ldr	r2, [r3, #0]
    db72:	f64b 1388 	movw	r3, #47496	; 0xb988
    db76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db7a:	601a      	str	r2, [r3, #0]
    db7c:	f64b 1394 	movw	r3, #47508	; 0xb994
    db80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db84:	2200      	movs	r2, #0
    db86:	801a      	strh	r2, [r3, #0]
    db88:	f64b 1398 	movw	r3, #47512	; 0xb998
    db8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db90:	f04f 0200 	mov.w	r2, #0
    db94:	601a      	str	r2, [r3, #0]
    db96:	f001 bd09 	b.w	f5ac <auto_nav+0x21a4>
    }
    else if(nav_stage == 1)
    db9a:	f64b 1380 	movw	r3, #47488	; 0xb980
    db9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dba2:	781b      	ldrb	r3, [r3, #0]
    dba4:	2b01      	cmp	r3, #1
    dba6:	d169      	bne.n	dc7c <auto_nav+0x874>
    {
         nav_stage =1;
    dba8:	f64b 1380 	movw	r3, #47488	; 0xb980
    dbac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbb0:	2201      	movs	r2, #1
    dbb2:	701a      	strb	r2, [r3, #0]
          if (approaching(6)) NextStageFrom(6) else {
    dbb4:	2006      	movs	r0, #6
    dbb6:	f001 fd07 	bl	f5c8 <approaching>
    dbba:	4603      	mov	r3, r0
    dbbc:	2b00      	cmp	r3, #0
    dbbe:	d034      	beq.n	dc2a <auto_nav+0x822>
    dbc0:	f64b 138c 	movw	r3, #47500	; 0xb98c
    dbc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbc8:	2206      	movs	r2, #6
    dbca:	701a      	strb	r2, [r3, #0]
    dbcc:	f64b 1380 	movw	r3, #47488	; 0xb980
    dbd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbd4:	781b      	ldrb	r3, [r3, #0]
    dbd6:	3301      	adds	r3, #1
    dbd8:	b2da      	uxtb	r2, r3
    dbda:	f64b 1380 	movw	r3, #47488	; 0xb980
    dbde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbe2:	701a      	strb	r2, [r3, #0]
    dbe4:	f64b 33dc 	movw	r3, #48092	; 0xbbdc
    dbe8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbec:	681a      	ldr	r2, [r3, #0]
    dbee:	f64b 1384 	movw	r3, #47492	; 0xb984
    dbf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbf6:	601a      	str	r2, [r3, #0]
    dbf8:	f64b 33e0 	movw	r3, #48096	; 0xbbe0
    dbfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc00:	681a      	ldr	r2, [r3, #0]
    dc02:	f64b 1388 	movw	r3, #47496	; 0xb988
    dc06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc0a:	601a      	str	r2, [r3, #0]
    dc0c:	f64b 1394 	movw	r3, #47508	; 0xb994
    dc10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc14:	2200      	movs	r2, #0
    dc16:	801a      	strh	r2, [r3, #0]
    dc18:	f64b 1398 	movw	r3, #47512	; 0xb998
    dc1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc20:	f04f 0200 	mov.w	r2, #0
    dc24:	601a      	str	r2, [r3, #0]
    dc26:	f001 bcc1 	b.w	f5ac <auto_nav+0x21a4>
            fly_to(6);
    dc2a:	2006      	movs	r0, #6
    dc2c:	f001 fe00 	bl	f830 <fly_to>
            auto_pitch = FALSE;
    dc30:	f24b 630f 	movw	r3, #46607	; 0xb60f
    dc34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc38:	2200      	movs	r2, #0
    dc3a:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
    dc3c:	f64b 13ac 	movw	r3, #47532	; 0xb9ac
    dc40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc44:	f04f 0200 	mov.w	r2, #0
    dc48:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
    dc4a:	f24b 630d 	movw	r3, #46605	; 0xb60d
    dc4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc52:	2203      	movs	r2, #3
    dc54:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[6].a;
    dc56:	f240 1340 	movw	r3, #320	; 0x140
    dc5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    dc60:	f240 133c 	movw	r3, #316	; 0x13c
    dc64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc68:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
    dc6a:	f64b 1374 	movw	r3, #47476	; 0xb974
    dc6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc72:	f04f 0200 	mov.w	r2, #0
    dc76:	601a      	str	r2, [r3, #0]
          }
          return;
    dc78:	f001 bc98 	b.w	f5ac <auto_nav+0x21a4>
     }
     else if (nav_stage == 2)
    dc7c:	f64b 1380 	movw	r3, #47488	; 0xb980
    dc80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc84:	781b      	ldrb	r3, [r3, #0]
    dc86:	2b02      	cmp	r3, #2
    dc88:	d169      	bne.n	dd5e <auto_nav+0x956>
     {
         nav_stage =2; 
    dc8a:	f64b 1380 	movw	r3, #47488	; 0xb980
    dc8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc92:	2202      	movs	r2, #2
    dc94:	701a      	strb	r2, [r3, #0]
         if (approaching(1)) NextStageFrom(1) else {
    dc96:	2001      	movs	r0, #1
    dc98:	f001 fc96 	bl	f5c8 <approaching>
    dc9c:	4603      	mov	r3, r0
    dc9e:	2b00      	cmp	r3, #0
    dca0:	d034      	beq.n	dd0c <auto_nav+0x904>
    dca2:	f64b 138c 	movw	r3, #47500	; 0xb98c
    dca6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcaa:	2201      	movs	r2, #1
    dcac:	701a      	strb	r2, [r3, #0]
    dcae:	f64b 1380 	movw	r3, #47488	; 0xb980
    dcb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcb6:	781b      	ldrb	r3, [r3, #0]
    dcb8:	3301      	adds	r3, #1
    dcba:	b2da      	uxtb	r2, r3
    dcbc:	f64b 1380 	movw	r3, #47488	; 0xb980
    dcc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcc4:	701a      	strb	r2, [r3, #0]
    dcc6:	f64b 33dc 	movw	r3, #48092	; 0xbbdc
    dcca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcce:	681a      	ldr	r2, [r3, #0]
    dcd0:	f64b 1384 	movw	r3, #47492	; 0xb984
    dcd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcd8:	601a      	str	r2, [r3, #0]
    dcda:	f64b 33e0 	movw	r3, #48096	; 0xbbe0
    dcde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dce2:	681a      	ldr	r2, [r3, #0]
    dce4:	f64b 1388 	movw	r3, #47496	; 0xb988
    dce8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcec:	601a      	str	r2, [r3, #0]
    dcee:	f64b 1394 	movw	r3, #47508	; 0xb994
    dcf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcf6:	2200      	movs	r2, #0
    dcf8:	801a      	strh	r2, [r3, #0]
    dcfa:	f64b 1398 	movw	r3, #47512	; 0xb998
    dcfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd02:	f04f 0200 	mov.w	r2, #0
    dd06:	601a      	str	r2, [r3, #0]
    dd08:	f001 bc50 	b.w	f5ac <auto_nav+0x21a4>
            fly_to(1);
    dd0c:	2001      	movs	r0, #1
    dd0e:	f001 fd8f 	bl	f830 <fly_to>
            auto_pitch = FALSE;
    dd12:	f24b 630f 	movw	r3, #46607	; 0xb60f
    dd16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd1a:	2200      	movs	r2, #0
    dd1c:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
    dd1e:	f64b 13ac 	movw	r3, #47532	; 0xb9ac
    dd22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd26:	f04f 0200 	mov.w	r2, #0
    dd2a:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
    dd2c:	f24b 630d 	movw	r3, #46605	; 0xb60d
    dd30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd34:	2203      	movs	r2, #3
    dd36:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[1].a;
    dd38:	f240 1340 	movw	r3, #320	; 0x140
    dd3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd40:	695a      	ldr	r2, [r3, #20]
    dd42:	f240 133c 	movw	r3, #316	; 0x13c
    dd46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd4a:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
    dd4c:	f64b 1374 	movw	r3, #47476	; 0xb974
    dd50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd54:	f04f 0200 	mov.w	r2, #0
    dd58:	601a      	str	r2, [r3, #0]
          }
          return;
    dd5a:	f001 bc27 	b.w	f5ac <auto_nav+0x21a4>
      }
      else if (nav_stage == 3)
    dd5e:	f64b 1380 	movw	r3, #47488	; 0xb980
    dd62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd66:	781b      	ldrb	r3, [r3, #0]
    dd68:	2b03      	cmp	r3, #3
    dd6a:	d16f      	bne.n	de4c <auto_nav+0xa44>
      {
	   nav_stage = 3;         
    dd6c:	f64b 1380 	movw	r3, #47488	; 0xb980
    dd70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd74:	2203      	movs	r2, #3
    dd76:	701a      	strb	r2, [r3, #0]
           if (approaching(2)) NextStageFrom(2) else {
    dd78:	2002      	movs	r0, #2
    dd7a:	f001 fc25 	bl	f5c8 <approaching>
    dd7e:	4603      	mov	r3, r0
    dd80:	2b00      	cmp	r3, #0
    dd82:	d034      	beq.n	ddee <auto_nav+0x9e6>
    dd84:	f64b 138c 	movw	r3, #47500	; 0xb98c
    dd88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd8c:	2202      	movs	r2, #2
    dd8e:	701a      	strb	r2, [r3, #0]
    dd90:	f64b 1380 	movw	r3, #47488	; 0xb980
    dd94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd98:	781b      	ldrb	r3, [r3, #0]
    dd9a:	3301      	adds	r3, #1
    dd9c:	b2da      	uxtb	r2, r3
    dd9e:	f64b 1380 	movw	r3, #47488	; 0xb980
    dda2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dda6:	701a      	strb	r2, [r3, #0]
    dda8:	f64b 33dc 	movw	r3, #48092	; 0xbbdc
    ddac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddb0:	681a      	ldr	r2, [r3, #0]
    ddb2:	f64b 1384 	movw	r3, #47492	; 0xb984
    ddb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddba:	601a      	str	r2, [r3, #0]
    ddbc:	f64b 33e0 	movw	r3, #48096	; 0xbbe0
    ddc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddc4:	681a      	ldr	r2, [r3, #0]
    ddc6:	f64b 1388 	movw	r3, #47496	; 0xb988
    ddca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddce:	601a      	str	r2, [r3, #0]
    ddd0:	f64b 1394 	movw	r3, #47508	; 0xb994
    ddd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddd8:	2200      	movs	r2, #0
    ddda:	801a      	strh	r2, [r3, #0]
    dddc:	f64b 1398 	movw	r3, #47512	; 0xb998
    dde0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dde4:	f04f 0200 	mov.w	r2, #0
    dde8:	601a      	str	r2, [r3, #0]
    ddea:	f001 bbdf 	b.w	f5ac <auto_nav+0x21a4>
            route_to(last_wp, 2);
    ddee:	f64b 138c 	movw	r3, #47500	; 0xb98c
    ddf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddf6:	781b      	ldrb	r3, [r3, #0]
    ddf8:	4618      	mov	r0, r3
    ddfa:	2102      	movs	r1, #2
    ddfc:	f001 fd3a 	bl	f874 <route_to>
            auto_pitch = FALSE;
    de00:	f24b 630f 	movw	r3, #46607	; 0xb60f
    de04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de08:	2200      	movs	r2, #0
    de0a:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
    de0c:	f64b 13ac 	movw	r3, #47532	; 0xb9ac
    de10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de14:	f04f 0200 	mov.w	r2, #0
    de18:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
    de1a:	f24b 630d 	movw	r3, #46605	; 0xb60d
    de1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de22:	2203      	movs	r2, #3
    de24:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[2].a;
    de26:	f240 1340 	movw	r3, #320	; 0x140
    de2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de2e:	6a1a      	ldr	r2, [r3, #32]
    de30:	f240 133c 	movw	r3, #316	; 0x13c
    de34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de38:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
    de3a:	f64b 1374 	movw	r3, #47476	; 0xb974
    de3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de42:	f04f 0200 	mov.w	r2, #0
    de46:	601a      	str	r2, [r3, #0]
          }
          return;
    de48:	f001 bbb0 	b.w	f5ac <auto_nav+0x21a4>
       }
       else if (nav_stage == 4)
    de4c:	f64b 1380 	movw	r3, #47488	; 0xb980
    de50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de54:	781b      	ldrb	r3, [r3, #0]
    de56:	2b04      	cmp	r3, #4
    de58:	d169      	bne.n	df2e <auto_nav+0xb26>
       {
          nav_stage = 4;
    de5a:	f64b 1380 	movw	r3, #47488	; 0xb980
    de5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de62:	2204      	movs	r2, #4
    de64:	701a      	strb	r2, [r3, #0]
          if (approaching(3)) NextStageFrom(3) else {
    de66:	2003      	movs	r0, #3
    de68:	f001 fbae 	bl	f5c8 <approaching>
    de6c:	4603      	mov	r3, r0
    de6e:	2b00      	cmp	r3, #0
    de70:	d034      	beq.n	dedc <auto_nav+0xad4>
    de72:	f64b 138c 	movw	r3, #47500	; 0xb98c
    de76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de7a:	2203      	movs	r2, #3
    de7c:	701a      	strb	r2, [r3, #0]
    de7e:	f64b 1380 	movw	r3, #47488	; 0xb980
    de82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de86:	781b      	ldrb	r3, [r3, #0]
    de88:	3301      	adds	r3, #1
    de8a:	b2da      	uxtb	r2, r3
    de8c:	f64b 1380 	movw	r3, #47488	; 0xb980
    de90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de94:	701a      	strb	r2, [r3, #0]
    de96:	f64b 33dc 	movw	r3, #48092	; 0xbbdc
    de9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de9e:	681a      	ldr	r2, [r3, #0]
    dea0:	f64b 1384 	movw	r3, #47492	; 0xb984
    dea4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dea8:	601a      	str	r2, [r3, #0]
    deaa:	f64b 33e0 	movw	r3, #48096	; 0xbbe0
    deae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    deb2:	681a      	ldr	r2, [r3, #0]
    deb4:	f64b 1388 	movw	r3, #47496	; 0xb988
    deb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    debc:	601a      	str	r2, [r3, #0]
    debe:	f64b 1394 	movw	r3, #47508	; 0xb994
    dec2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dec6:	2200      	movs	r2, #0
    dec8:	801a      	strh	r2, [r3, #0]
    deca:	f64b 1398 	movw	r3, #47512	; 0xb998
    dece:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ded2:	f04f 0200 	mov.w	r2, #0
    ded6:	601a      	str	r2, [r3, #0]
    ded8:	f001 bb68 	b.w	f5ac <auto_nav+0x21a4>
            fly_to(3);
    dedc:	2003      	movs	r0, #3
    dede:	f001 fca7 	bl	f830 <fly_to>
            auto_pitch = FALSE;
    dee2:	f24b 630f 	movw	r3, #46607	; 0xb60f
    dee6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    deea:	2200      	movs	r2, #0
    deec:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
    deee:	f64b 13ac 	movw	r3, #47532	; 0xb9ac
    def2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    def6:	f04f 0200 	mov.w	r2, #0
    defa:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
    defc:	f24b 630d 	movw	r3, #46605	; 0xb60d
    df00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df04:	2203      	movs	r2, #3
    df06:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[3].a;
    df08:	f240 1340 	movw	r3, #320	; 0x140
    df0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    df12:	f240 133c 	movw	r3, #316	; 0x13c
    df16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df1a:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
    df1c:	f64b 1374 	movw	r3, #47476	; 0xb974
    df20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df24:	f04f 0200 	mov.w	r2, #0
    df28:	601a      	str	r2, [r3, #0]
          }
          return;
    df2a:	f001 bb3f 	b.w	f5ac <auto_nav+0x21a4>
       }
       else if (nav_stage == 5)
    df2e:	f64b 1380 	movw	r3, #47488	; 0xb980
    df32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df36:	781b      	ldrb	r3, [r3, #0]
    df38:	2b05      	cmp	r3, #5
    df3a:	d169      	bne.n	e010 <auto_nav+0xc08>
       {
          nav_stage =5;
    df3c:	f64b 1380 	movw	r3, #47488	; 0xb980
    df40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df44:	2205      	movs	r2, #5
    df46:	701a      	strb	r2, [r3, #0]
          if (approaching(4)) NextStageFrom(4) else {
    df48:	2004      	movs	r0, #4
    df4a:	f001 fb3d 	bl	f5c8 <approaching>
    df4e:	4603      	mov	r3, r0
    df50:	2b00      	cmp	r3, #0
    df52:	d034      	beq.n	dfbe <auto_nav+0xbb6>
    df54:	f64b 138c 	movw	r3, #47500	; 0xb98c
    df58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df5c:	2204      	movs	r2, #4
    df5e:	701a      	strb	r2, [r3, #0]
    df60:	f64b 1380 	movw	r3, #47488	; 0xb980
    df64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df68:	781b      	ldrb	r3, [r3, #0]
    df6a:	3301      	adds	r3, #1
    df6c:	b2da      	uxtb	r2, r3
    df6e:	f64b 1380 	movw	r3, #47488	; 0xb980
    df72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df76:	701a      	strb	r2, [r3, #0]
    df78:	f64b 33dc 	movw	r3, #48092	; 0xbbdc
    df7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df80:	681a      	ldr	r2, [r3, #0]
    df82:	f64b 1384 	movw	r3, #47492	; 0xb984
    df86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df8a:	601a      	str	r2, [r3, #0]
    df8c:	f64b 33e0 	movw	r3, #48096	; 0xbbe0
    df90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df94:	681a      	ldr	r2, [r3, #0]
    df96:	f64b 1388 	movw	r3, #47496	; 0xb988
    df9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df9e:	601a      	str	r2, [r3, #0]
    dfa0:	f64b 1394 	movw	r3, #47508	; 0xb994
    dfa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfa8:	2200      	movs	r2, #0
    dfaa:	801a      	strh	r2, [r3, #0]
    dfac:	f64b 1398 	movw	r3, #47512	; 0xb998
    dfb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfb4:	f04f 0200 	mov.w	r2, #0
    dfb8:	601a      	str	r2, [r3, #0]
    dfba:	f001 baf7 	b.w	f5ac <auto_nav+0x21a4>
            fly_to(4);
    dfbe:	2004      	movs	r0, #4
    dfc0:	f001 fc36 	bl	f830 <fly_to>
            auto_pitch = FALSE;
    dfc4:	f24b 630f 	movw	r3, #46607	; 0xb60f
    dfc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfcc:	2200      	movs	r2, #0
    dfce:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
    dfd0:	f64b 13ac 	movw	r3, #47532	; 0xb9ac
    dfd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfd8:	f04f 0200 	mov.w	r2, #0
    dfdc:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
    dfde:	f24b 630d 	movw	r3, #46605	; 0xb60d
    dfe2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfe6:	2203      	movs	r2, #3
    dfe8:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[4].a;
    dfea:	f240 1340 	movw	r3, #320	; 0x140
    dfee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dff2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    dff4:	f240 133c 	movw	r3, #316	; 0x13c
    dff8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dffc:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
    dffe:	f64b 1374 	movw	r3, #47476	; 0xb974
    e002:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e006:	f04f 0200 	mov.w	r2, #0
    e00a:	601a      	str	r2, [r3, #0]
          }
          return;
    e00c:	f001 bace 	b.w	f5ac <auto_nav+0x21a4>
       }
       else if (nav_stage == 6)
    e010:	f64b 1380 	movw	r3, #47488	; 0xb980
    e014:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e018:	781b      	ldrb	r3, [r3, #0]
    e01a:	2b06      	cmp	r3, #6
    e01c:	d16f      	bne.n	e0fe <auto_nav+0xcf6>
       {
          nav_stage =6;
    e01e:	f64b 1380 	movw	r3, #47488	; 0xb980
    e022:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e026:	2206      	movs	r2, #6
    e028:	701a      	strb	r2, [r3, #0]
          if (approaching(5)) NextStageFrom(5) else {
    e02a:	2005      	movs	r0, #5
    e02c:	f001 facc 	bl	f5c8 <approaching>
    e030:	4603      	mov	r3, r0
    e032:	2b00      	cmp	r3, #0
    e034:	d034      	beq.n	e0a0 <auto_nav+0xc98>
    e036:	f64b 138c 	movw	r3, #47500	; 0xb98c
    e03a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e03e:	2205      	movs	r2, #5
    e040:	701a      	strb	r2, [r3, #0]
    e042:	f64b 1380 	movw	r3, #47488	; 0xb980
    e046:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e04a:	781b      	ldrb	r3, [r3, #0]
    e04c:	3301      	adds	r3, #1
    e04e:	b2da      	uxtb	r2, r3
    e050:	f64b 1380 	movw	r3, #47488	; 0xb980
    e054:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e058:	701a      	strb	r2, [r3, #0]
    e05a:	f64b 33dc 	movw	r3, #48092	; 0xbbdc
    e05e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e062:	681a      	ldr	r2, [r3, #0]
    e064:	f64b 1384 	movw	r3, #47492	; 0xb984
    e068:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e06c:	601a      	str	r2, [r3, #0]
    e06e:	f64b 33e0 	movw	r3, #48096	; 0xbbe0
    e072:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e076:	681a      	ldr	r2, [r3, #0]
    e078:	f64b 1388 	movw	r3, #47496	; 0xb988
    e07c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e080:	601a      	str	r2, [r3, #0]
    e082:	f64b 1394 	movw	r3, #47508	; 0xb994
    e086:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e08a:	2200      	movs	r2, #0
    e08c:	801a      	strh	r2, [r3, #0]
    e08e:	f64b 1398 	movw	r3, #47512	; 0xb998
    e092:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e096:	f04f 0200 	mov.w	r2, #0
    e09a:	601a      	str	r2, [r3, #0]
    e09c:	f001 ba86 	b.w	f5ac <auto_nav+0x21a4>
            route_to(last_wp, 5);
    e0a0:	f64b 138c 	movw	r3, #47500	; 0xb98c
    e0a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0a8:	781b      	ldrb	r3, [r3, #0]
    e0aa:	4618      	mov	r0, r3
    e0ac:	2105      	movs	r1, #5
    e0ae:	f001 fbe1 	bl	f874 <route_to>
            auto_pitch = FALSE;
    e0b2:	f24b 630f 	movw	r3, #46607	; 0xb60f
    e0b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0ba:	2200      	movs	r2, #0
    e0bc:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
    e0be:	f64b 13ac 	movw	r3, #47532	; 0xb9ac
    e0c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0c6:	f04f 0200 	mov.w	r2, #0
    e0ca:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
    e0cc:	f24b 630d 	movw	r3, #46605	; 0xb60d
    e0d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0d4:	2203      	movs	r2, #3
    e0d6:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[5].a;
    e0d8:	f240 1340 	movw	r3, #320	; 0x140
    e0dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    e0e2:	f240 133c 	movw	r3, #316	; 0x13c
    e0e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0ea:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
    e0ec:	f64b 1374 	movw	r3, #47476	; 0xb974
    e0f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0f4:	f04f 0200 	mov.w	r2, #0
    e0f8:	601a      	str	r2, [r3, #0]
          }
          return;
    e0fa:	f001 ba57 	b.w	f5ac <auto_nav+0x21a4>
       }
       else if (nav_stage == 7)
    e0fe:	f64b 1380 	movw	r3, #47488	; 0xb980
    e102:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e106:	781b      	ldrb	r3, [r3, #0]
    e108:	2b07      	cmp	r3, #7
    e10a:	d106      	bne.n	e11a <auto_nav+0xd12>
       {
	   nav_stage =7;
    e10c:	f64b 1380 	movw	r3, #47488	; 0xb980
    e110:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e114:	2207      	movs	r2, #7
    e116:	701a      	strb	r2, [r3, #0]
	   Goto(while_5)
    e118:	e50a      	b.n	db30 <auto_nav+0x728>
	}
       
       else if (nav_stage == 8){
    e11a:	f64b 1380 	movw	r3, #47488	; 0xb980
    e11e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e122:	781b      	ldrb	r3, [r3, #0]
    e124:	2b08      	cmp	r3, #8
    e126:	f041 8241 	bne.w	f5ac <auto_nav+0x21a4>
	  Label(endwhile_6)
	  nav_stage =8;
    e12a:	f64b 1380 	movw	r3, #47488	; 0xb980
    e12e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e132:	2208      	movs	r2, #8
    e134:	701a      	strb	r2, [r3, #0]
          NextBlock();
    e136:	f64b 1381 	movw	r3, #47489	; 0xb981
    e13a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e13e:	781b      	ldrb	r3, [r3, #0]
    e140:	3301      	adds	r3, #1
    e142:	b2da      	uxtb	r2, r3
    e144:	f64b 1381 	movw	r3, #47489	; 0xb981
    e148:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e14c:	701a      	strb	r2, [r3, #0]
    e14e:	f64b 1380 	movw	r3, #47488	; 0xb980
    e152:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e156:	2200      	movs	r2, #0
    e158:	701a      	strb	r2, [r3, #0]
    e15a:	f64b 1396 	movw	r3, #47510	; 0xb996
    e15e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e162:	2200      	movs	r2, #0
    e164:	801a      	strh	r2, [r3, #0]
    e166:	f64b 33dc 	movw	r3, #48092	; 0xbbdc
    e16a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e16e:	681a      	ldr	r2, [r3, #0]
    e170:	f64b 1384 	movw	r3, #47492	; 0xb984
    e174:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e178:	601a      	str	r2, [r3, #0]
    e17a:	f64b 33e0 	movw	r3, #48096	; 0xbbe0
    e17e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e182:	681a      	ldr	r2, [r3, #0]
    e184:	f64b 1388 	movw	r3, #47496	; 0xb988
    e188:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e18c:	601a      	str	r2, [r3, #0]
    e18e:	f64b 1394 	movw	r3, #47508	; 0xb994
    e192:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e196:	2200      	movs	r2, #0
    e198:	801a      	strh	r2, [r3, #0]
    e19a:	f64b 1398 	movw	r3, #47512	; 0xb998
    e19e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1a2:	f04f 0200 	mov.w	r2, #0
    e1a6:	601a      	str	r2, [r3, #0]
    e1a8:	f001 ba00 	b.w	f5ac <auto_nav+0x21a4>
       }
       else { }
}
else if (nav_block == 3) // xyz
    e1ac:	f64b 1381 	movw	r3, #47489	; 0xb981
    e1b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1b4:	781b      	ldrb	r3, [r3, #0]
    e1b6:	2b03      	cmp	r3, #3
    e1b8:	f040 8388 	bne.w	e8cc <auto_nav+0x14c4>
{
    nav_block = 3;
    e1bc:	f64b 1381 	movw	r3, #47489	; 0xb981
    e1c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1c4:	2203      	movs	r2, #3
    e1c6:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(4) }
    e1c8:	f24b 6310 	movw	r3, #46608	; 0xb610
    e1cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1d0:	781b      	ldrb	r3, [r3, #0]
    e1d2:	2b00      	cmp	r3, #0
    e1d4:	d007      	beq.n	e1e6 <auto_nav+0xdde>
    e1d6:	f24b 6310 	movw	r3, #46608	; 0xb610
    e1da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1de:	2200      	movs	r2, #0
    e1e0:	701a      	strb	r2, [r3, #0]
    e1e2:	2301      	movs	r3, #1
    e1e4:	e000      	b.n	e1e8 <auto_nav+0xde0>
    e1e6:	2300      	movs	r3, #0
    e1e8:	2b00      	cmp	r3, #0
    e1ea:	d034      	beq.n	e256 <auto_nav+0xe4e>
    e1ec:	f64b 1381 	movw	r3, #47489	; 0xb981
    e1f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1f4:	2204      	movs	r2, #4
    e1f6:	701a      	strb	r2, [r3, #0]
    e1f8:	f64b 1380 	movw	r3, #47488	; 0xb980
    e1fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e200:	2200      	movs	r2, #0
    e202:	701a      	strb	r2, [r3, #0]
    e204:	f64b 1396 	movw	r3, #47510	; 0xb996
    e208:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e20c:	2200      	movs	r2, #0
    e20e:	801a      	strh	r2, [r3, #0]
    e210:	f64b 33dc 	movw	r3, #48092	; 0xbbdc
    e214:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e218:	681a      	ldr	r2, [r3, #0]
    e21a:	f64b 1384 	movw	r3, #47492	; 0xb984
    e21e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e222:	601a      	str	r2, [r3, #0]
    e224:	f64b 33e0 	movw	r3, #48096	; 0xbbe0
    e228:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e22c:	681a      	ldr	r2, [r3, #0]
    e22e:	f64b 1388 	movw	r3, #47496	; 0xb988
    e232:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e236:	601a      	str	r2, [r3, #0]
    e238:	f64b 1394 	movw	r3, #47508	; 0xb994
    e23c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e240:	2200      	movs	r2, #0
    e242:	801a      	strh	r2, [r3, #0]
    e244:	f64b 1398 	movw	r3, #47512	; 0xb998
    e248:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e24c:	f04f 0200 	mov.w	r2, #0
    e250:	601a      	str	r2, [r3, #0]
    e252:	f001 b9ab 	b.w	f5ac <auto_nav+0x21a4>
    if(nav_stage == 0)
    e256:	f64b 1380 	movw	r3, #47488	; 0xb980
    e25a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e25e:	781b      	ldrb	r3, [r3, #0]
    e260:	2b00      	cmp	r3, #0
    e262:	f040 82ea 	bne.w	e83a <auto_nav+0x1432>
    {
        nav_stage = 0;
    e266:	f64b 1380 	movw	r3, #47488	; 0xb980
    e26a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e26e:	2200      	movs	r2, #0
    e270:	701a      	strb	r2, [r3, #0]
        Goto3D(50)
    e272:	f24b 630c 	movw	r3, #46604	; 0xb60c
    e276:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e27a:	781b      	ldrb	r3, [r3, #0]
    e27c:	2b02      	cmp	r3, #2
    e27e:	f040 81a5 	bne.w	e5cc <auto_nav+0x11c4>
    e282:	f24b 7330 	movw	r3, #46896	; 0xb730
    e286:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e28a:	88db      	ldrh	r3, [r3, #6]
    e28c:	84fb      	strh	r3, [r7, #38]	; 0x26
    e28e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
    e292:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
    e296:	dc04      	bgt.n	e2a2 <auto_nav+0xe9a>
    e298:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
    e29c:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
    e2a0:	da7e      	bge.n	e3a0 <auto_nav+0xf98>
    e2a2:	f64b 13cc 	movw	r3, #47564	; 0xb9cc
    e2a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2aa:	681b      	ldr	r3, [r3, #0]
    e2ac:	4618      	mov	r0, r3
    e2ae:	f004 fb4d 	bl	1294c <__aeabi_f2d>
    e2b2:	4604      	mov	r4, r0
    e2b4:	460d      	mov	r5, r1
    e2b6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
    e2ba:	4618      	mov	r0, r3
    e2bc:	f004 ff86 	bl	131cc <__aeabi_i2f>
    e2c0:	4603      	mov	r3, r0
    e2c2:	4618      	mov	r0, r3
    e2c4:	f04f 0100 	mov.w	r1, #0
    e2c8:	f2c4 6116 	movt	r1, #17942	; 0x4616
    e2cc:	f005 f886 	bl	133dc <__aeabi_fdiv>
    e2d0:	4603      	mov	r3, r0
    e2d2:	4618      	mov	r0, r3
    e2d4:	f004 fb3a 	bl	1294c <__aeabi_f2d>
    e2d8:	4602      	mov	r2, r0
    e2da:	460b      	mov	r3, r1
    e2dc:	4610      	mov	r0, r2
    e2de:	4619      	mov	r1, r3
    e2e0:	f04f 0200 	mov.w	r2, #0
    e2e4:	f04f 0300 	mov.w	r3, #0
    e2e8:	f2cc 0334 	movt	r3, #49204	; 0xc034
    e2ec:	f004 fb82 	bl	129f4 <__aeabi_dmul>
    e2f0:	4602      	mov	r2, r0
    e2f2:	460b      	mov	r3, r1
    e2f4:	4610      	mov	r0, r2
    e2f6:	4619      	mov	r1, r3
    e2f8:	f04f 0200 	mov.w	r2, #0
    e2fc:	f04f 0300 	mov.w	r3, #0
    e300:	f004 f9c6 	bl	12690 <__adddf3>
    e304:	4602      	mov	r2, r0
    e306:	460b      	mov	r3, r1
    e308:	4620      	mov	r0, r4
    e30a:	4629      	mov	r1, r5
    e30c:	f004 f9c0 	bl	12690 <__adddf3>
    e310:	4602      	mov	r2, r0
    e312:	460b      	mov	r3, r1
    e314:	4610      	mov	r0, r2
    e316:	4619      	mov	r1, r3
    e318:	f004 fe4e 	bl	12fb8 <__aeabi_d2f>
    e31c:	4602      	mov	r2, r0
    e31e:	f64b 13cc 	movw	r3, #47564	; 0xb9cc
    e322:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e326:	601a      	str	r2, [r3, #0]
    e328:	f64b 13cc 	movw	r3, #47564	; 0xb9cc
    e32c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e330:	681b      	ldr	r3, [r3, #0]
    e332:	4618      	mov	r0, r3
    e334:	f04f 0100 	mov.w	r1, #0
    e338:	f2c4 317a 	movt	r1, #17274	; 0x437a
    e33c:	f005 f942 	bl	135c4 <__aeabi_fcmple>
    e340:	4603      	mov	r3, r0
    e342:	2b00      	cmp	r3, #0
    e344:	d005      	beq.n	e352 <auto_nav+0xf4a>
    e346:	f64b 13cc 	movw	r3, #47564	; 0xb9cc
    e34a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e34e:	681a      	ldr	r2, [r3, #0]
    e350:	e003      	b.n	e35a <auto_nav+0xf52>
    e352:	f04f 0200 	mov.w	r2, #0
    e356:	f2c4 327a 	movt	r2, #17274	; 0x437a
    e35a:	f64b 13cc 	movw	r3, #47564	; 0xb9cc
    e35e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e362:	601a      	str	r2, [r3, #0]
    e364:	f64b 13cc 	movw	r3, #47564	; 0xb9cc
    e368:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e36c:	681b      	ldr	r3, [r3, #0]
    e36e:	4618      	mov	r0, r3
    e370:	f04f 0100 	mov.w	r1, #0
    e374:	f2cc 317a 	movt	r1, #50042	; 0xc37a
    e378:	f005 f92e 	bl	135d8 <__aeabi_fcmpge>
    e37c:	4603      	mov	r3, r0
    e37e:	2b00      	cmp	r3, #0
    e380:	d005      	beq.n	e38e <auto_nav+0xf86>
    e382:	f64b 13cc 	movw	r3, #47564	; 0xb9cc
    e386:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e38a:	681a      	ldr	r2, [r3, #0]
    e38c:	e003      	b.n	e396 <auto_nav+0xf8e>
    e38e:	f04f 0200 	mov.w	r2, #0
    e392:	f2cc 327a 	movt	r2, #50042	; 0xc37a
    e396:	f64b 13cc 	movw	r3, #47564	; 0xb9cc
    e39a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e39e:	601a      	str	r2, [r3, #0]
    e3a0:	f24b 7330 	movw	r3, #46896	; 0xb730
    e3a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3a8:	889b      	ldrh	r3, [r3, #4]
    e3aa:	84bb      	strh	r3, [r7, #36]	; 0x24
    e3ac:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
    e3b0:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
    e3b4:	dc04      	bgt.n	e3c0 <auto_nav+0xfb8>
    e3b6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
    e3ba:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
    e3be:	da7e      	bge.n	e4be <auto_nav+0x10b6>
    e3c0:	f64b 13d0 	movw	r3, #47568	; 0xb9d0
    e3c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3c8:	681b      	ldr	r3, [r3, #0]
    e3ca:	4618      	mov	r0, r3
    e3cc:	f004 fabe 	bl	1294c <__aeabi_f2d>
    e3d0:	4604      	mov	r4, r0
    e3d2:	460d      	mov	r5, r1
    e3d4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
    e3d8:	4618      	mov	r0, r3
    e3da:	f004 fef7 	bl	131cc <__aeabi_i2f>
    e3de:	4603      	mov	r3, r0
    e3e0:	4618      	mov	r0, r3
    e3e2:	f04f 0100 	mov.w	r1, #0
    e3e6:	f2c4 6116 	movt	r1, #17942	; 0x4616
    e3ea:	f004 fff7 	bl	133dc <__aeabi_fdiv>
    e3ee:	4603      	mov	r3, r0
    e3f0:	4618      	mov	r0, r3
    e3f2:	f004 faab 	bl	1294c <__aeabi_f2d>
    e3f6:	4602      	mov	r2, r0
    e3f8:	460b      	mov	r3, r1
    e3fa:	4610      	mov	r0, r2
    e3fc:	4619      	mov	r1, r3
    e3fe:	f04f 0200 	mov.w	r2, #0
    e402:	f04f 0300 	mov.w	r3, #0
    e406:	f2cc 0334 	movt	r3, #49204	; 0xc034
    e40a:	f004 faf3 	bl	129f4 <__aeabi_dmul>
    e40e:	4602      	mov	r2, r0
    e410:	460b      	mov	r3, r1
    e412:	4610      	mov	r0, r2
    e414:	4619      	mov	r1, r3
    e416:	f04f 0200 	mov.w	r2, #0
    e41a:	f04f 0300 	mov.w	r3, #0
    e41e:	f004 f937 	bl	12690 <__adddf3>
    e422:	4602      	mov	r2, r0
    e424:	460b      	mov	r3, r1
    e426:	4620      	mov	r0, r4
    e428:	4629      	mov	r1, r5
    e42a:	f004 f931 	bl	12690 <__adddf3>
    e42e:	4602      	mov	r2, r0
    e430:	460b      	mov	r3, r1
    e432:	4610      	mov	r0, r2
    e434:	4619      	mov	r1, r3
    e436:	f004 fdbf 	bl	12fb8 <__aeabi_d2f>
    e43a:	4602      	mov	r2, r0
    e43c:	f64b 13d0 	movw	r3, #47568	; 0xb9d0
    e440:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e444:	601a      	str	r2, [r3, #0]
    e446:	f64b 13d0 	movw	r3, #47568	; 0xb9d0
    e44a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e44e:	681b      	ldr	r3, [r3, #0]
    e450:	4618      	mov	r0, r3
    e452:	f04f 0100 	mov.w	r1, #0
    e456:	f2c4 317a 	movt	r1, #17274	; 0x437a
    e45a:	f005 f8b3 	bl	135c4 <__aeabi_fcmple>
    e45e:	4603      	mov	r3, r0
    e460:	2b00      	cmp	r3, #0
    e462:	d005      	beq.n	e470 <auto_nav+0x1068>
    e464:	f64b 13d0 	movw	r3, #47568	; 0xb9d0
    e468:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e46c:	681a      	ldr	r2, [r3, #0]
    e46e:	e003      	b.n	e478 <auto_nav+0x1070>
    e470:	f04f 0200 	mov.w	r2, #0
    e474:	f2c4 327a 	movt	r2, #17274	; 0x437a
    e478:	f64b 13d0 	movw	r3, #47568	; 0xb9d0
    e47c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e480:	601a      	str	r2, [r3, #0]
    e482:	f64b 13d0 	movw	r3, #47568	; 0xb9d0
    e486:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e48a:	681b      	ldr	r3, [r3, #0]
    e48c:	4618      	mov	r0, r3
    e48e:	f04f 0100 	mov.w	r1, #0
    e492:	f2cc 317a 	movt	r1, #50042	; 0xc37a
    e496:	f005 f89f 	bl	135d8 <__aeabi_fcmpge>
    e49a:	4603      	mov	r3, r0
    e49c:	2b00      	cmp	r3, #0
    e49e:	d005      	beq.n	e4ac <auto_nav+0x10a4>
    e4a0:	f64b 13d0 	movw	r3, #47568	; 0xb9d0
    e4a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4a8:	681a      	ldr	r2, [r3, #0]
    e4aa:	e003      	b.n	e4b4 <auto_nav+0x10ac>
    e4ac:	f04f 0200 	mov.w	r2, #0
    e4b0:	f2cc 327a 	movt	r2, #50042	; 0xc37a
    e4b4:	f64b 13d0 	movw	r3, #47568	; 0xb9d0
    e4b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4bc:	601a      	str	r2, [r3, #0]
    e4be:	f24b 630d 	movw	r3, #46605	; 0xb60d
    e4c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4c6:	2203      	movs	r2, #3
    e4c8:	701a      	strb	r2, [r3, #0]
    e4ca:	f24b 7330 	movw	r3, #46896	; 0xb730
    e4ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4d2:	885b      	ldrh	r3, [r3, #2]
    e4d4:	847b      	strh	r3, [r7, #34]	; 0x22
    e4d6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
    e4da:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
    e4de:	dc04      	bgt.n	e4ea <auto_nav+0x10e2>
    e4e0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
    e4e4:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
    e4e8:	da70      	bge.n	e5cc <auto_nav+0x11c4>
    e4ea:	f240 133c 	movw	r3, #316	; 0x13c
    e4ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4f2:	681b      	ldr	r3, [r3, #0]
    e4f4:	4618      	mov	r0, r3
    e4f6:	f004 fa29 	bl	1294c <__aeabi_f2d>
    e4fa:	4604      	mov	r4, r0
    e4fc:	460d      	mov	r5, r1
    e4fe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
    e502:	4618      	mov	r0, r3
    e504:	f004 fe62 	bl	131cc <__aeabi_i2f>
    e508:	4603      	mov	r3, r0
    e50a:	4618      	mov	r0, r3
    e50c:	f04f 0100 	mov.w	r1, #0
    e510:	f2c4 6116 	movt	r1, #17942	; 0x4616
    e514:	f004 ff62 	bl	133dc <__aeabi_fdiv>
    e518:	4603      	mov	r3, r0
    e51a:	4618      	mov	r0, r3
    e51c:	f004 fa16 	bl	1294c <__aeabi_f2d>
    e520:	4602      	mov	r2, r0
    e522:	460b      	mov	r3, r1
    e524:	f04f 0000 	mov.w	r0, #0
    e528:	f04f 0100 	mov.w	r1, #0
    e52c:	f004 f8ae 	bl	1268c <__aeabi_dsub>
    e530:	4602      	mov	r2, r0
    e532:	460b      	mov	r3, r1
    e534:	4620      	mov	r0, r4
    e536:	4629      	mov	r1, r5
    e538:	f004 f8aa 	bl	12690 <__adddf3>
    e53c:	4602      	mov	r2, r0
    e53e:	460b      	mov	r3, r1
    e540:	4610      	mov	r0, r2
    e542:	4619      	mov	r1, r3
    e544:	f004 fd38 	bl	12fb8 <__aeabi_d2f>
    e548:	4602      	mov	r2, r0
    e54a:	f240 133c 	movw	r3, #316	; 0x13c
    e54e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e552:	601a      	str	r2, [r3, #0]
    e554:	f240 133c 	movw	r3, #316	; 0x13c
    e558:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e55c:	681b      	ldr	r3, [r3, #0]
    e55e:	4618      	mov	r0, r3
    e560:	f04f 0100 	mov.w	r1, #0
    e564:	f2c4 312f 	movt	r1, #17199	; 0x432f
    e568:	f005 f836 	bl	135d8 <__aeabi_fcmpge>
    e56c:	4603      	mov	r3, r0
    e56e:	2b00      	cmp	r3, #0
    e570:	d005      	beq.n	e57e <auto_nav+0x1176>
    e572:	f240 133c 	movw	r3, #316	; 0x13c
    e576:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e57a:	681a      	ldr	r2, [r3, #0]
    e57c:	e003      	b.n	e586 <auto_nav+0x117e>
    e57e:	f04f 0200 	mov.w	r2, #0
    e582:	f2c4 322f 	movt	r2, #17199	; 0x432f
    e586:	f240 133c 	movw	r3, #316	; 0x13c
    e58a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e58e:	601a      	str	r2, [r3, #0]
    e590:	f240 133c 	movw	r3, #316	; 0x13c
    e594:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e598:	681b      	ldr	r3, [r3, #0]
    e59a:	4618      	mov	r0, r3
    e59c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    e5a0:	f2c4 3189 	movt	r1, #17289	; 0x4389
    e5a4:	f005 f80e 	bl	135c4 <__aeabi_fcmple>
    e5a8:	4603      	mov	r3, r0
    e5aa:	2b00      	cmp	r3, #0
    e5ac:	d005      	beq.n	e5ba <auto_nav+0x11b2>
    e5ae:	f240 133c 	movw	r3, #316	; 0x13c
    e5b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5b6:	681a      	ldr	r2, [r3, #0]
    e5b8:	e003      	b.n	e5c2 <auto_nav+0x11ba>
    e5ba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    e5be:	f2c4 3289 	movt	r2, #17289	; 0x4389
    e5c2:	f240 133c 	movw	r3, #316	; 0x13c
    e5c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5ca:	601a      	str	r2, [r3, #0]
    e5cc:	f64b 33e0 	movw	r3, #48096	; 0xbbe0
    e5d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5d4:	681a      	ldr	r2, [r3, #0]
    e5d6:	f64b 13d0 	movw	r3, #47568	; 0xb9d0
    e5da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5de:	681b      	ldr	r3, [r3, #0]
    e5e0:	4610      	mov	r0, r2
    e5e2:	4619      	mov	r1, r3
    e5e4:	f004 fd3c 	bl	13060 <__aeabi_fsub>
    e5e8:	4603      	mov	r3, r0
    e5ea:	4618      	mov	r0, r3
    e5ec:	f004 f9ae 	bl	1294c <__aeabi_f2d>
    e5f0:	4604      	mov	r4, r0
    e5f2:	460d      	mov	r5, r1
    e5f4:	f64b 33dc 	movw	r3, #48092	; 0xbbdc
    e5f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5fc:	681a      	ldr	r2, [r3, #0]
    e5fe:	f64b 13cc 	movw	r3, #47564	; 0xb9cc
    e602:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e606:	681b      	ldr	r3, [r3, #0]
    e608:	4610      	mov	r0, r2
    e60a:	4619      	mov	r1, r3
    e60c:	f004 fd28 	bl	13060 <__aeabi_fsub>
    e610:	4603      	mov	r3, r0
    e612:	4618      	mov	r0, r3
    e614:	f004 f99a 	bl	1294c <__aeabi_f2d>
    e618:	4602      	mov	r2, r0
    e61a:	460b      	mov	r3, r1
    e61c:	4620      	mov	r0, r4
    e61e:	4629      	mov	r1, r5
    e620:	f002 fa12 	bl	10a48 <pp_atan2>
    e624:	4602      	mov	r2, r0
    e626:	460b      	mov	r3, r1
    e628:	4610      	mov	r0, r2
    e62a:	4619      	mov	r1, r3
    e62c:	f004 fcc4 	bl	12fb8 <__aeabi_d2f>
    e630:	4603      	mov	r3, r0
    e632:	61fb      	str	r3, [r7, #28]
    e634:	69f8      	ldr	r0, [r7, #28]
    e636:	f004 f989 	bl	1294c <__aeabi_f2d>
    e63a:	4604      	mov	r4, r0
    e63c:	460d      	mov	r5, r1
    e63e:	f64b 4314 	movw	r3, #48148	; 0xbc14
    e642:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e646:	681b      	ldr	r3, [r3, #0]
    e648:	4618      	mov	r0, r3
    e64a:	f04f 0100 	mov.w	r1, #0
    e64e:	f2cc 2148 	movt	r1, #49736	; 0xc248
    e652:	f004 fe0f 	bl	13274 <__aeabi_fmul>
    e656:	4603      	mov	r3, r0
    e658:	4618      	mov	r0, r3
    e65a:	f004 f977 	bl	1294c <__aeabi_f2d>
    e65e:	4602      	mov	r2, r0
    e660:	460b      	mov	r3, r1
    e662:	f04f 0000 	mov.w	r0, #0
    e666:	f04f 0100 	mov.w	r1, #0
    e66a:	f2c4 0114 	movt	r1, #16404	; 0x4014
    e66e:	f004 faeb 	bl	12c48 <__aeabi_ddiv>
    e672:	4602      	mov	r2, r0
    e674:	460b      	mov	r3, r1
    e676:	4620      	mov	r0, r4
    e678:	4629      	mov	r1, r5
    e67a:	f004 f809 	bl	12690 <__adddf3>
    e67e:	4602      	mov	r2, r0
    e680:	460b      	mov	r3, r1
    e682:	4610      	mov	r0, r2
    e684:	4619      	mov	r1, r3
    e686:	f004 fc97 	bl	12fb8 <__aeabi_d2f>
    e68a:	4603      	mov	r3, r0
    e68c:	61bb      	str	r3, [r7, #24]
    e68e:	f64b 13cc 	movw	r3, #47564	; 0xb9cc
    e692:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e696:	681b      	ldr	r3, [r3, #0]
    e698:	4618      	mov	r0, r3
    e69a:	f004 f957 	bl	1294c <__aeabi_f2d>
    e69e:	4604      	mov	r4, r0
    e6a0:	460d      	mov	r5, r1
    e6a2:	69b8      	ldr	r0, [r7, #24]
    e6a4:	f004 f952 	bl	1294c <__aeabi_f2d>
    e6a8:	4602      	mov	r2, r0
    e6aa:	460b      	mov	r3, r1
    e6ac:	4610      	mov	r0, r2
    e6ae:	4619      	mov	r1, r3
    e6b0:	a3b1      	add	r3, pc, #708	; (adr r3, e978 <auto_nav+0x1570>)
    e6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
    e6b6:	f003 ffeb 	bl	12690 <__adddf3>
    e6ba:	4602      	mov	r2, r0
    e6bc:	460b      	mov	r3, r1
    e6be:	4610      	mov	r0, r2
    e6c0:	4619      	mov	r1, r3
    e6c2:	f002 fa81 	bl	10bc8 <pp_sin>
    e6c6:	4602      	mov	r2, r0
    e6c8:	460b      	mov	r3, r1
    e6ca:	4610      	mov	r0, r2
    e6cc:	4619      	mov	r1, r3
    e6ce:	f04f 0200 	mov.w	r2, #0
    e6d2:	f04f 0300 	mov.w	r3, #0
    e6d6:	f2c4 0349 	movt	r3, #16457	; 0x4049
    e6da:	f004 f98b 	bl	129f4 <__aeabi_dmul>
    e6de:	4602      	mov	r2, r0
    e6e0:	460b      	mov	r3, r1
    e6e2:	4620      	mov	r0, r4
    e6e4:	4629      	mov	r1, r5
    e6e6:	f003 ffd3 	bl	12690 <__adddf3>
    e6ea:	4602      	mov	r2, r0
    e6ec:	460b      	mov	r3, r1
    e6ee:	4610      	mov	r0, r2
    e6f0:	4619      	mov	r1, r3
    e6f2:	f004 fc61 	bl	12fb8 <__aeabi_d2f>
    e6f6:	4606      	mov	r6, r0
    e6f8:	f64b 13d0 	movw	r3, #47568	; 0xb9d0
    e6fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e700:	681b      	ldr	r3, [r3, #0]
    e702:	4618      	mov	r0, r3
    e704:	f004 f922 	bl	1294c <__aeabi_f2d>
    e708:	4604      	mov	r4, r0
    e70a:	460d      	mov	r5, r1
    e70c:	69b8      	ldr	r0, [r7, #24]
    e70e:	f004 f91d 	bl	1294c <__aeabi_f2d>
    e712:	4602      	mov	r2, r0
    e714:	460b      	mov	r3, r1
    e716:	4610      	mov	r0, r2
    e718:	4619      	mov	r1, r3
    e71a:	f002 fa55 	bl	10bc8 <pp_sin>
    e71e:	4602      	mov	r2, r0
    e720:	460b      	mov	r3, r1
    e722:	4610      	mov	r0, r2
    e724:	4619      	mov	r1, r3
    e726:	f04f 0200 	mov.w	r2, #0
    e72a:	f04f 0300 	mov.w	r3, #0
    e72e:	f2c4 0349 	movt	r3, #16457	; 0x4049
    e732:	f004 f95f 	bl	129f4 <__aeabi_dmul>
    e736:	4602      	mov	r2, r0
    e738:	460b      	mov	r3, r1
    e73a:	4620      	mov	r0, r4
    e73c:	4629      	mov	r1, r5
    e73e:	f003 ffa7 	bl	12690 <__adddf3>
    e742:	4602      	mov	r2, r0
    e744:	460b      	mov	r3, r1
    e746:	4610      	mov	r0, r2
    e748:	4619      	mov	r1, r3
    e74a:	f004 fc35 	bl	12fb8 <__aeabi_d2f>
    e74e:	4603      	mov	r3, r0
    e750:	4630      	mov	r0, r6
    e752:	4619      	mov	r1, r3
    e754:	f001 f81c 	bl	f790 <fly_to_xy>
    e758:	69b8      	ldr	r0, [r7, #24]
    e75a:	f004 f8f7 	bl	1294c <__aeabi_f2d>
    e75e:	4602      	mov	r2, r0
    e760:	460b      	mov	r3, r1
    e762:	a185      	add	r1, pc, #532	; (adr r1, e978 <auto_nav+0x1570>)
    e764:	e9d1 0100 	ldrd	r0, r1, [r1]
    e768:	f003 ff90 	bl	1268c <__aeabi_dsub>
    e76c:	4602      	mov	r2, r0
    e76e:	460b      	mov	r3, r1
    e770:	4610      	mov	r0, r2
    e772:	4619      	mov	r1, r3
    e774:	a382      	add	r3, pc, #520	; (adr r3, e980 <auto_nav+0x1578>)
    e776:	e9d3 2300 	ldrd	r2, r3, [r3]
    e77a:	f004 fa65 	bl	12c48 <__aeabi_ddiv>
    e77e:	4602      	mov	r2, r0
    e780:	460b      	mov	r3, r1
    e782:	4610      	mov	r0, r2
    e784:	4619      	mov	r1, r3
    e786:	f04f 0200 	mov.w	r2, #0
    e78a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    e78e:	f2c4 0366 	movt	r3, #16486	; 0x4066
    e792:	f004 f92f 	bl	129f4 <__aeabi_dmul>
    e796:	4602      	mov	r2, r0
    e798:	460b      	mov	r3, r1
    e79a:	4610      	mov	r0, r2
    e79c:	4619      	mov	r1, r3
    e79e:	f004 fc0b 	bl	12fb8 <__aeabi_d2f>
    e7a2:	4602      	mov	r2, r0
    e7a4:	f64b 139c 	movw	r3, #47516	; 0xb99c
    e7a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7ac:	601a      	str	r2, [r3, #0]
    e7ae:	e012      	b.n	e7d6 <auto_nav+0x13ce>
    e7b0:	f64b 139c 	movw	r3, #47516	; 0xb99c
    e7b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7b8:	681b      	ldr	r3, [r3, #0]
    e7ba:	4618      	mov	r0, r3
    e7bc:	f04f 0100 	mov.w	r1, #0
    e7c0:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
    e7c4:	f004 fc4e 	bl	13064 <__addsf3>
    e7c8:	4603      	mov	r3, r0
    e7ca:	461a      	mov	r2, r3
    e7cc:	f64b 139c 	movw	r3, #47516	; 0xb99c
    e7d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7d4:	601a      	str	r2, [r3, #0]
    e7d6:	f64b 139c 	movw	r3, #47516	; 0xb99c
    e7da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7de:	681b      	ldr	r3, [r3, #0]
    e7e0:	4618      	mov	r0, r3
    e7e2:	f04f 0100 	mov.w	r1, #0
    e7e6:	f004 fee3 	bl	135b0 <__aeabi_fcmplt>
    e7ea:	4603      	mov	r3, r0
    e7ec:	2b00      	cmp	r3, #0
    e7ee:	d1df      	bne.n	e7b0 <auto_nav+0x13a8>
    e7f0:	e012      	b.n	e818 <auto_nav+0x1410>
    e7f2:	f64b 139c 	movw	r3, #47516	; 0xb99c
    e7f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7fa:	681b      	ldr	r3, [r3, #0]
    e7fc:	4618      	mov	r0, r3
    e7fe:	f04f 0100 	mov.w	r1, #0
    e802:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
    e806:	f004 fc2b 	bl	13060 <__aeabi_fsub>
    e80a:	4603      	mov	r3, r0
    e80c:	461a      	mov	r2, r3
    e80e:	f64b 139c 	movw	r3, #47516	; 0xb99c
    e812:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e816:	601a      	str	r2, [r3, #0]
    e818:	f64b 139c 	movw	r3, #47516	; 0xb99c
    e81c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e820:	681b      	ldr	r3, [r3, #0]
    e822:	4618      	mov	r0, r3
    e824:	f04f 0100 	mov.w	r1, #0
    e828:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
    e82c:	f004 fed4 	bl	135d8 <__aeabi_fcmpge>
    e830:	4603      	mov	r3, r0
    e832:	2b00      	cmp	r3, #0
    e834:	d1dd      	bne.n	e7f2 <auto_nav+0x13ea>
        return;
    e836:	f000 beb9 	b.w	f5ac <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
    e83a:	f64b 1380 	movw	r3, #47488	; 0xb980
    e83e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e842:	781b      	ldrb	r3, [r3, #0]
    e844:	2b01      	cmp	r3, #1
    e846:	f040 86b1 	bne.w	f5ac <auto_nav+0x21a4>
    {
        nav_stage = 1;
    e84a:	f64b 1380 	movw	r3, #47488	; 0xb980
    e84e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e852:	2201      	movs	r2, #1
    e854:	701a      	strb	r2, [r3, #0]
        NextBlock()
    e856:	f64b 1381 	movw	r3, #47489	; 0xb981
    e85a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e85e:	781b      	ldrb	r3, [r3, #0]
    e860:	3301      	adds	r3, #1
    e862:	b2da      	uxtb	r2, r3
    e864:	f64b 1381 	movw	r3, #47489	; 0xb981
    e868:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e86c:	701a      	strb	r2, [r3, #0]
    e86e:	f64b 1380 	movw	r3, #47488	; 0xb980
    e872:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e876:	2200      	movs	r2, #0
    e878:	701a      	strb	r2, [r3, #0]
    e87a:	f64b 1396 	movw	r3, #47510	; 0xb996
    e87e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e882:	2200      	movs	r2, #0
    e884:	801a      	strh	r2, [r3, #0]
    e886:	f64b 33dc 	movw	r3, #48092	; 0xbbdc
    e88a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e88e:	681a      	ldr	r2, [r3, #0]
    e890:	f64b 1384 	movw	r3, #47492	; 0xb984
    e894:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e898:	601a      	str	r2, [r3, #0]
    e89a:	f64b 33e0 	movw	r3, #48096	; 0xbbe0
    e89e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8a2:	681a      	ldr	r2, [r3, #0]
    e8a4:	f64b 1388 	movw	r3, #47496	; 0xb988
    e8a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8ac:	601a      	str	r2, [r3, #0]
    e8ae:	f64b 1394 	movw	r3, #47508	; 0xb994
    e8b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8b6:	2200      	movs	r2, #0
    e8b8:	801a      	strh	r2, [r3, #0]
    e8ba:	f64b 1398 	movw	r3, #47512	; 0xb998
    e8be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8c2:	f04f 0200 	mov.w	r2, #0
    e8c6:	601a      	str	r2, [r3, #0]
    e8c8:	f000 be70 	b.w	f5ac <auto_nav+0x21a4>
    }
    else { }
}
else if (nav_block == 4)
    e8cc:	f64b 1381 	movw	r3, #47489	; 0xb981
    e8d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8d4:	781b      	ldrb	r3, [r3, #0]
    e8d6:	2b04      	cmp	r3, #4
    e8d8:	f040 8202 	bne.w	ece0 <auto_nav+0x18d8>
{
    nav_block = 4;
    e8dc:	f64b 1381 	movw	r3, #47489	; 0xb981
    e8e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8e4:	2204      	movs	r2, #4
    e8e6:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(5) }
    e8e8:	f24b 6310 	movw	r3, #46608	; 0xb610
    e8ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8f0:	781b      	ldrb	r3, [r3, #0]
    e8f2:	2b00      	cmp	r3, #0
    e8f4:	d007      	beq.n	e906 <auto_nav+0x14fe>
    e8f6:	f24b 6310 	movw	r3, #46608	; 0xb610
    e8fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8fe:	2200      	movs	r2, #0
    e900:	701a      	strb	r2, [r3, #0]
    e902:	2301      	movs	r3, #1
    e904:	e000      	b.n	e908 <auto_nav+0x1500>
    e906:	2300      	movs	r3, #0
    e908:	2b00      	cmp	r3, #0
    e90a:	d03d      	beq.n	e988 <auto_nav+0x1580>
    e90c:	f64b 1381 	movw	r3, #47489	; 0xb981
    e910:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e914:	2205      	movs	r2, #5
    e916:	701a      	strb	r2, [r3, #0]
    e918:	f64b 1380 	movw	r3, #47488	; 0xb980
    e91c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e920:	2200      	movs	r2, #0
    e922:	701a      	strb	r2, [r3, #0]
    e924:	f64b 1396 	movw	r3, #47510	; 0xb996
    e928:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e92c:	2200      	movs	r2, #0
    e92e:	801a      	strh	r2, [r3, #0]
    e930:	f64b 33dc 	movw	r3, #48092	; 0xbbdc
    e934:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e938:	681a      	ldr	r2, [r3, #0]
    e93a:	f64b 1384 	movw	r3, #47492	; 0xb984
    e93e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e942:	601a      	str	r2, [r3, #0]
    e944:	f64b 33e0 	movw	r3, #48096	; 0xbbe0
    e948:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e94c:	681a      	ldr	r2, [r3, #0]
    e94e:	f64b 1388 	movw	r3, #47496	; 0xb988
    e952:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e956:	601a      	str	r2, [r3, #0]
    e958:	f64b 1394 	movw	r3, #47508	; 0xb994
    e95c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e960:	2200      	movs	r2, #0
    e962:	801a      	strh	r2, [r3, #0]
    e964:	f64b 1398 	movw	r3, #47512	; 0xb998
    e968:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e96c:	f04f 0200 	mov.w	r2, #0
    e970:	601a      	str	r2, [r3, #0]
    e972:	f000 be1b 	b.w	f5ac <auto_nav+0x21a4>
    e976:	bf00      	nop
    e978:	54442d18 	.word	0x54442d18
    e97c:	3ff921fb 	.word	0x3ff921fb
    e980:	54442d18 	.word	0x54442d18
    e984:	400921fb 	.word	0x400921fb
    if(nav_stage == 0)
    e988:	f64b 1380 	movw	r3, #47488	; 0xb980
    e98c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e990:	781b      	ldrb	r3, [r3, #0]
    e992:	2b00      	cmp	r3, #0
    e994:	f040 815b 	bne.w	ec4e <auto_nav+0x1846>
    {
        nav_stage = 0;
    e998:	f64b 1380 	movw	r3, #47488	; 0xb980
    e99c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9a0:	2200      	movs	r2, #0
    e9a2:	701a      	strb	r2, [r3, #0]
        auto_pitch = FALSE;
    e9a4:	f24b 630f 	movw	r3, #46607	; 0xb60f
    e9a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9ac:	2200      	movs	r2, #0
    e9ae:	701a      	strb	r2, [r3, #0]
        nav_pitch = 0.000000;
    e9b0:	f64b 13ac 	movw	r3, #47532	; 0xb9ac
    e9b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9b8:	f04f 0200 	mov.w	r2, #0
    e9bc:	601a      	str	r2, [r3, #0]
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
    e9be:	f24b 630d 	movw	r3, #46605	; 0xb60d
    e9c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9c6:	2203      	movs	r2, #3
    e9c8:	701a      	strb	r2, [r3, #0]
        desired_altitude = waypoints[0].a;
    e9ca:	f240 1340 	movw	r3, #320	; 0x140
    e9ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9d2:	689a      	ldr	r2, [r3, #8]
    e9d4:	f240 133c 	movw	r3, #316	; 0x13c
    e9d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9dc:	601a      	str	r2, [r3, #0]
        pre_climb = 0.;
    e9de:	f64b 1374 	movw	r3, #47476	; 0xb974
    e9e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9e6:	f04f 0200 	mov.w	r2, #0
    e9ea:	601a      	str	r2, [r3, #0]
        Circle(0, 150);
    e9ec:	f64b 33e0 	movw	r3, #48096	; 0xbbe0
    e9f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9f4:	681a      	ldr	r2, [r3, #0]
    e9f6:	f240 1340 	movw	r3, #320	; 0x140
    e9fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9fe:	685b      	ldr	r3, [r3, #4]
    ea00:	4610      	mov	r0, r2
    ea02:	4619      	mov	r1, r3
    ea04:	f004 fb2c 	bl	13060 <__aeabi_fsub>
    ea08:	4603      	mov	r3, r0
    ea0a:	4618      	mov	r0, r3
    ea0c:	f003 ff9e 	bl	1294c <__aeabi_f2d>
    ea10:	4604      	mov	r4, r0
    ea12:	460d      	mov	r5, r1
    ea14:	f64b 33dc 	movw	r3, #48092	; 0xbbdc
    ea18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea1c:	681a      	ldr	r2, [r3, #0]
    ea1e:	f240 1340 	movw	r3, #320	; 0x140
    ea22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea26:	681b      	ldr	r3, [r3, #0]
    ea28:	4610      	mov	r0, r2
    ea2a:	4619      	mov	r1, r3
    ea2c:	f004 fb18 	bl	13060 <__aeabi_fsub>
    ea30:	4603      	mov	r3, r0
    ea32:	4618      	mov	r0, r3
    ea34:	f003 ff8a 	bl	1294c <__aeabi_f2d>
    ea38:	4602      	mov	r2, r0
    ea3a:	460b      	mov	r3, r1
    ea3c:	4620      	mov	r0, r4
    ea3e:	4629      	mov	r1, r5
    ea40:	f002 f802 	bl	10a48 <pp_atan2>
    ea44:	4602      	mov	r2, r0
    ea46:	460b      	mov	r3, r1
    ea48:	4610      	mov	r0, r2
    ea4a:	4619      	mov	r1, r3
    ea4c:	f004 fab4 	bl	12fb8 <__aeabi_d2f>
    ea50:	4603      	mov	r3, r0
    ea52:	617b      	str	r3, [r7, #20]
    ea54:	6978      	ldr	r0, [r7, #20]
    ea56:	f003 ff79 	bl	1294c <__aeabi_f2d>
    ea5a:	4604      	mov	r4, r0
    ea5c:	460d      	mov	r5, r1
    ea5e:	f64b 4314 	movw	r3, #48148	; 0xbc14
    ea62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea66:	681b      	ldr	r3, [r3, #0]
    ea68:	4618      	mov	r0, r3
    ea6a:	f04f 0100 	mov.w	r1, #0
    ea6e:	f2cc 3116 	movt	r1, #49942	; 0xc316
    ea72:	f004 fbff 	bl	13274 <__aeabi_fmul>
    ea76:	4603      	mov	r3, r0
    ea78:	4618      	mov	r0, r3
    ea7a:	f003 ff67 	bl	1294c <__aeabi_f2d>
    ea7e:	4602      	mov	r2, r0
    ea80:	460b      	mov	r3, r1
    ea82:	f04f 0000 	mov.w	r0, #0
    ea86:	f04f 0100 	mov.w	r1, #0
    ea8a:	f2c4 0114 	movt	r1, #16404	; 0x4014
    ea8e:	f004 f8db 	bl	12c48 <__aeabi_ddiv>
    ea92:	4602      	mov	r2, r0
    ea94:	460b      	mov	r3, r1
    ea96:	4620      	mov	r0, r4
    ea98:	4629      	mov	r1, r5
    ea9a:	f003 fdf9 	bl	12690 <__adddf3>
    ea9e:	4602      	mov	r2, r0
    eaa0:	460b      	mov	r3, r1
    eaa2:	4610      	mov	r0, r2
    eaa4:	4619      	mov	r1, r3
    eaa6:	f004 fa87 	bl	12fb8 <__aeabi_d2f>
    eaaa:	4603      	mov	r3, r0
    eaac:	613b      	str	r3, [r7, #16]
    eaae:	f240 1340 	movw	r3, #320	; 0x140
    eab2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eab6:	681b      	ldr	r3, [r3, #0]
    eab8:	4618      	mov	r0, r3
    eaba:	f003 ff47 	bl	1294c <__aeabi_f2d>
    eabe:	4604      	mov	r4, r0
    eac0:	460d      	mov	r5, r1
    eac2:	6938      	ldr	r0, [r7, #16]
    eac4:	f003 ff42 	bl	1294c <__aeabi_f2d>
    eac8:	4602      	mov	r2, r0
    eaca:	460b      	mov	r3, r1
    eacc:	4610      	mov	r0, r2
    eace:	4619      	mov	r1, r3
    ead0:	a3af      	add	r3, pc, #700	; (adr r3, ed90 <auto_nav+0x1988>)
    ead2:	e9d3 2300 	ldrd	r2, r3, [r3]
    ead6:	f003 fddb 	bl	12690 <__adddf3>
    eada:	4602      	mov	r2, r0
    eadc:	460b      	mov	r3, r1
    eade:	4610      	mov	r0, r2
    eae0:	4619      	mov	r1, r3
    eae2:	f002 f871 	bl	10bc8 <pp_sin>
    eae6:	4602      	mov	r2, r0
    eae8:	460b      	mov	r3, r1
    eaea:	4610      	mov	r0, r2
    eaec:	4619      	mov	r1, r3
    eaee:	a3aa      	add	r3, pc, #680	; (adr r3, ed98 <auto_nav+0x1990>)
    eaf0:	e9d3 2300 	ldrd	r2, r3, [r3]
    eaf4:	f003 ff7e 	bl	129f4 <__aeabi_dmul>
    eaf8:	4602      	mov	r2, r0
    eafa:	460b      	mov	r3, r1
    eafc:	4620      	mov	r0, r4
    eafe:	4629      	mov	r1, r5
    eb00:	f003 fdc6 	bl	12690 <__adddf3>
    eb04:	4602      	mov	r2, r0
    eb06:	460b      	mov	r3, r1
    eb08:	4610      	mov	r0, r2
    eb0a:	4619      	mov	r1, r3
    eb0c:	f004 fa54 	bl	12fb8 <__aeabi_d2f>
    eb10:	4606      	mov	r6, r0
    eb12:	f240 1340 	movw	r3, #320	; 0x140
    eb16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb1a:	685b      	ldr	r3, [r3, #4]
    eb1c:	4618      	mov	r0, r3
    eb1e:	f003 ff15 	bl	1294c <__aeabi_f2d>
    eb22:	4604      	mov	r4, r0
    eb24:	460d      	mov	r5, r1
    eb26:	6938      	ldr	r0, [r7, #16]
    eb28:	f003 ff10 	bl	1294c <__aeabi_f2d>
    eb2c:	4602      	mov	r2, r0
    eb2e:	460b      	mov	r3, r1
    eb30:	4610      	mov	r0, r2
    eb32:	4619      	mov	r1, r3
    eb34:	f002 f848 	bl	10bc8 <pp_sin>
    eb38:	4602      	mov	r2, r0
    eb3a:	460b      	mov	r3, r1
    eb3c:	4610      	mov	r0, r2
    eb3e:	4619      	mov	r1, r3
    eb40:	a395      	add	r3, pc, #596	; (adr r3, ed98 <auto_nav+0x1990>)
    eb42:	e9d3 2300 	ldrd	r2, r3, [r3]
    eb46:	f003 ff55 	bl	129f4 <__aeabi_dmul>
    eb4a:	4602      	mov	r2, r0
    eb4c:	460b      	mov	r3, r1
    eb4e:	4620      	mov	r0, r4
    eb50:	4629      	mov	r1, r5
    eb52:	f003 fd9d 	bl	12690 <__adddf3>
    eb56:	4602      	mov	r2, r0
    eb58:	460b      	mov	r3, r1
    eb5a:	4610      	mov	r0, r2
    eb5c:	4619      	mov	r1, r3
    eb5e:	f004 fa2b 	bl	12fb8 <__aeabi_d2f>
    eb62:	4603      	mov	r3, r0
    eb64:	4630      	mov	r0, r6
    eb66:	4619      	mov	r1, r3
    eb68:	f000 fe12 	bl	f790 <fly_to_xy>
    eb6c:	6938      	ldr	r0, [r7, #16]
    eb6e:	f003 feed 	bl	1294c <__aeabi_f2d>
    eb72:	4602      	mov	r2, r0
    eb74:	460b      	mov	r3, r1
    eb76:	a186      	add	r1, pc, #536	; (adr r1, ed90 <auto_nav+0x1988>)
    eb78:	e9d1 0100 	ldrd	r0, r1, [r1]
    eb7c:	f003 fd86 	bl	1268c <__aeabi_dsub>
    eb80:	4602      	mov	r2, r0
    eb82:	460b      	mov	r3, r1
    eb84:	4610      	mov	r0, r2
    eb86:	4619      	mov	r1, r3
    eb88:	a385      	add	r3, pc, #532	; (adr r3, eda0 <auto_nav+0x1998>)
    eb8a:	e9d3 2300 	ldrd	r2, r3, [r3]
    eb8e:	f004 f85b 	bl	12c48 <__aeabi_ddiv>
    eb92:	4602      	mov	r2, r0
    eb94:	460b      	mov	r3, r1
    eb96:	4610      	mov	r0, r2
    eb98:	4619      	mov	r1, r3
    eb9a:	f04f 0200 	mov.w	r2, #0
    eb9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    eba2:	f2c4 0366 	movt	r3, #16486	; 0x4066
    eba6:	f003 ff25 	bl	129f4 <__aeabi_dmul>
    ebaa:	4602      	mov	r2, r0
    ebac:	460b      	mov	r3, r1
    ebae:	4610      	mov	r0, r2
    ebb0:	4619      	mov	r1, r3
    ebb2:	f004 fa01 	bl	12fb8 <__aeabi_d2f>
    ebb6:	4602      	mov	r2, r0
    ebb8:	f64b 139c 	movw	r3, #47516	; 0xb99c
    ebbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebc0:	601a      	str	r2, [r3, #0]
    ebc2:	e012      	b.n	ebea <auto_nav+0x17e2>
    ebc4:	f64b 139c 	movw	r3, #47516	; 0xb99c
    ebc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebcc:	681b      	ldr	r3, [r3, #0]
    ebce:	4618      	mov	r0, r3
    ebd0:	f04f 0100 	mov.w	r1, #0
    ebd4:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
    ebd8:	f004 fa44 	bl	13064 <__addsf3>
    ebdc:	4603      	mov	r3, r0
    ebde:	461a      	mov	r2, r3
    ebe0:	f64b 139c 	movw	r3, #47516	; 0xb99c
    ebe4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebe8:	601a      	str	r2, [r3, #0]
    ebea:	f64b 139c 	movw	r3, #47516	; 0xb99c
    ebee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebf2:	681b      	ldr	r3, [r3, #0]
    ebf4:	4618      	mov	r0, r3
    ebf6:	f04f 0100 	mov.w	r1, #0
    ebfa:	f004 fcd9 	bl	135b0 <__aeabi_fcmplt>
    ebfe:	4603      	mov	r3, r0
    ec00:	2b00      	cmp	r3, #0
    ec02:	d1df      	bne.n	ebc4 <auto_nav+0x17bc>
    ec04:	e012      	b.n	ec2c <auto_nav+0x1824>
    ec06:	f64b 139c 	movw	r3, #47516	; 0xb99c
    ec0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec0e:	681b      	ldr	r3, [r3, #0]
    ec10:	4618      	mov	r0, r3
    ec12:	f04f 0100 	mov.w	r1, #0
    ec16:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
    ec1a:	f004 fa21 	bl	13060 <__aeabi_fsub>
    ec1e:	4603      	mov	r3, r0
    ec20:	461a      	mov	r2, r3
    ec22:	f64b 139c 	movw	r3, #47516	; 0xb99c
    ec26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec2a:	601a      	str	r2, [r3, #0]
    ec2c:	f64b 139c 	movw	r3, #47516	; 0xb99c
    ec30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec34:	681b      	ldr	r3, [r3, #0]
    ec36:	4618      	mov	r0, r3
    ec38:	f04f 0100 	mov.w	r1, #0
    ec3c:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
    ec40:	f004 fcca 	bl	135d8 <__aeabi_fcmpge>
    ec44:	4603      	mov	r3, r0
    ec46:	2b00      	cmp	r3, #0
    ec48:	d1dd      	bne.n	ec06 <auto_nav+0x17fe>
        return;
    ec4a:	f000 bcaf 	b.w	f5ac <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
    ec4e:	f64b 1380 	movw	r3, #47488	; 0xb980
    ec52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec56:	781b      	ldrb	r3, [r3, #0]
    ec58:	2b01      	cmp	r3, #1
    ec5a:	f040 84a7 	bne.w	f5ac <auto_nav+0x21a4>
    {
        nav_stage =1;
    ec5e:	f64b 1380 	movw	r3, #47488	; 0xb980
    ec62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec66:	2201      	movs	r2, #1
    ec68:	701a      	strb	r2, [r3, #0]
        NextBlock()
    ec6a:	f64b 1381 	movw	r3, #47489	; 0xb981
    ec6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec72:	781b      	ldrb	r3, [r3, #0]
    ec74:	3301      	adds	r3, #1
    ec76:	b2da      	uxtb	r2, r3
    ec78:	f64b 1381 	movw	r3, #47489	; 0xb981
    ec7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec80:	701a      	strb	r2, [r3, #0]
    ec82:	f64b 1380 	movw	r3, #47488	; 0xb980
    ec86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec8a:	2200      	movs	r2, #0
    ec8c:	701a      	strb	r2, [r3, #0]
    ec8e:	f64b 1396 	movw	r3, #47510	; 0xb996
    ec92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec96:	2200      	movs	r2, #0
    ec98:	801a      	strh	r2, [r3, #0]
    ec9a:	f64b 33dc 	movw	r3, #48092	; 0xbbdc
    ec9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eca2:	681a      	ldr	r2, [r3, #0]
    eca4:	f64b 1384 	movw	r3, #47492	; 0xb984
    eca8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecac:	601a      	str	r2, [r3, #0]
    ecae:	f64b 33e0 	movw	r3, #48096	; 0xbbe0
    ecb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecb6:	681a      	ldr	r2, [r3, #0]
    ecb8:	f64b 1388 	movw	r3, #47496	; 0xb988
    ecbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecc0:	601a      	str	r2, [r3, #0]
    ecc2:	f64b 1394 	movw	r3, #47508	; 0xb994
    ecc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecca:	2200      	movs	r2, #0
    eccc:	801a      	strh	r2, [r3, #0]
    ecce:	f64b 1398 	movw	r3, #47512	; 0xb998
    ecd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecd6:	f04f 0200 	mov.w	r2, #0
    ecda:	601a      	str	r2, [r3, #0]
    ecdc:	f000 bc66 	b.w	f5ac <auto_nav+0x21a4>
    }
    else {}
}
else if (nav_block == 5)
    ece0:	f64b 1381 	movw	r3, #47489	; 0xb981
    ece4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ece8:	781b      	ldrb	r3, [r3, #0]
    ecea:	2b05      	cmp	r3, #5
    ecec:	f040 845e 	bne.w	f5ac <auto_nav+0x21a4>
{
    nav_block = 5;
    ecf0:	f64b 1381 	movw	r3, #47489	; 0xb981
    ecf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecf8:	2205      	movs	r2, #5
    ecfa:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(1) }
    ecfc:	f24b 6310 	movw	r3, #46608	; 0xb610
    ed00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed04:	781b      	ldrb	r3, [r3, #0]
    ed06:	2b00      	cmp	r3, #0
    ed08:	d007      	beq.n	ed1a <auto_nav+0x1912>
    ed0a:	f24b 6310 	movw	r3, #46608	; 0xb610
    ed0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed12:	2200      	movs	r2, #0
    ed14:	701a      	strb	r2, [r3, #0]
    ed16:	2301      	movs	r3, #1
    ed18:	e000      	b.n	ed1c <auto_nav+0x1914>
    ed1a:	2300      	movs	r3, #0
    ed1c:	2b00      	cmp	r3, #0
    ed1e:	d043      	beq.n	eda8 <auto_nav+0x19a0>
    ed20:	f64b 1381 	movw	r3, #47489	; 0xb981
    ed24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed28:	2201      	movs	r2, #1
    ed2a:	701a      	strb	r2, [r3, #0]
    ed2c:	f64b 1380 	movw	r3, #47488	; 0xb980
    ed30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed34:	2200      	movs	r2, #0
    ed36:	701a      	strb	r2, [r3, #0]
    ed38:	f64b 1396 	movw	r3, #47510	; 0xb996
    ed3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed40:	2200      	movs	r2, #0
    ed42:	801a      	strh	r2, [r3, #0]
    ed44:	f64b 33dc 	movw	r3, #48092	; 0xbbdc
    ed48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed4c:	681a      	ldr	r2, [r3, #0]
    ed4e:	f64b 1384 	movw	r3, #47492	; 0xb984
    ed52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed56:	601a      	str	r2, [r3, #0]
    ed58:	f64b 33e0 	movw	r3, #48096	; 0xbbe0
    ed5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed60:	681a      	ldr	r2, [r3, #0]
    ed62:	f64b 1388 	movw	r3, #47496	; 0xb988
    ed66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed6a:	601a      	str	r2, [r3, #0]
    ed6c:	f64b 1394 	movw	r3, #47508	; 0xb994
    ed70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed74:	2200      	movs	r2, #0
    ed76:	801a      	strh	r2, [r3, #0]
    ed78:	f64b 1398 	movw	r3, #47512	; 0xb998
    ed7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed80:	f04f 0200 	mov.w	r2, #0
    ed84:	601a      	str	r2, [r3, #0]
    ed86:	f000 bc11 	b.w	f5ac <auto_nav+0x21a4>
    ed8a:	bf00      	nop
    ed8c:	f3af 8000 	nop.w
    ed90:	54442d18 	.word	0x54442d18
    ed94:	3ff921fb 	.word	0x3ff921fb
    ed98:	00000000 	.word	0x00000000
    ed9c:	4062c000 	.word	0x4062c000
    eda0:	54442d18 	.word	0x54442d18
    eda4:	400921fb 	.word	0x400921fb
    if(nav_stage == 0) {
    eda8:	f64b 1380 	movw	r3, #47488	; 0xb980
    edac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edb0:	781b      	ldrb	r3, [r3, #0]
    edb2:	2b00      	cmp	r3, #0
    edb4:	d133      	bne.n	ee1e <auto_nav+0x1a16>
       Label(while_7) 
       nav_stage = 0;
    edb6:	f64b 1380 	movw	r3, #47488	; 0xb980
    edba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edbe:	2200      	movs	r2, #0
    edc0:	701a      	strb	r2, [r3, #0]
      if (! (TRUE)) Goto(endwhile_8) else NextStage();}
    edc2:	f64b 1380 	movw	r3, #47488	; 0xb980
    edc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edca:	781b      	ldrb	r3, [r3, #0]
    edcc:	3301      	adds	r3, #1
    edce:	b2da      	uxtb	r2, r3
    edd0:	f64b 1380 	movw	r3, #47488	; 0xb980
    edd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edd8:	701a      	strb	r2, [r3, #0]
    edda:	f64b 33dc 	movw	r3, #48092	; 0xbbdc
    edde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ede2:	681a      	ldr	r2, [r3, #0]
    ede4:	f64b 1384 	movw	r3, #47492	; 0xb984
    ede8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edec:	601a      	str	r2, [r3, #0]
    edee:	f64b 33e0 	movw	r3, #48096	; 0xbbe0
    edf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edf6:	681a      	ldr	r2, [r3, #0]
    edf8:	f64b 1388 	movw	r3, #47496	; 0xb988
    edfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee00:	601a      	str	r2, [r3, #0]
    ee02:	f64b 1394 	movw	r3, #47508	; 0xb994
    ee06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee0a:	2200      	movs	r2, #0
    ee0c:	801a      	strh	r2, [r3, #0]
    ee0e:	f64b 1398 	movw	r3, #47512	; 0xb998
    ee12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee16:	f04f 0200 	mov.w	r2, #0
    ee1a:	601a      	str	r2, [r3, #0]
    ee1c:	e3c6      	b.n	f5ac <auto_nav+0x21a4>
     
    else if (nav_stage == 1)
    ee1e:	f64b 1380 	movw	r3, #47488	; 0xb980
    ee22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee26:	781b      	ldrb	r3, [r3, #0]
    ee28:	2b01      	cmp	r3, #1
    ee2a:	f040 81b5 	bne.w	f198 <auto_nav+0x1d90>
    {
        nav_stage =1;
    ee2e:	f64b 1380 	movw	r3, #47488	; 0xb980
    ee32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee36:	2201      	movs	r2, #1
    ee38:	701a      	strb	r2, [r3, #0]
        auto_pitch = FALSE;
    ee3a:	f24b 630f 	movw	r3, #46607	; 0xb60f
    ee3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee42:	2200      	movs	r2, #0
    ee44:	701a      	strb	r2, [r3, #0]
        nav_pitch = 0.000000;
    ee46:	f64b 13ac 	movw	r3, #47532	; 0xb9ac
    ee4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee4e:	f04f 0200 	mov.w	r2, #0
    ee52:	601a      	str	r2, [r3, #0]
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
    ee54:	f24b 630d 	movw	r3, #46605	; 0xb60d
    ee58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee5c:	2203      	movs	r2, #3
    ee5e:	701a      	strb	r2, [r3, #0]
        desired_altitude = waypoints[1].a;
    ee60:	f240 1340 	movw	r3, #320	; 0x140
    ee64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee68:	695a      	ldr	r2, [r3, #20]
    ee6a:	f240 133c 	movw	r3, #316	; 0x13c
    ee6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee72:	601a      	str	r2, [r3, #0]
        pre_climb = 0.;
    ee74:	f64b 1374 	movw	r3, #47476	; 0xb974
    ee78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee7c:	f04f 0200 	mov.w	r2, #0
    ee80:	601a      	str	r2, [r3, #0]
        Circle(1, 100);
    ee82:	f64b 33e0 	movw	r3, #48096	; 0xbbe0
    ee86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee8a:	681a      	ldr	r2, [r3, #0]
    ee8c:	f240 1340 	movw	r3, #320	; 0x140
    ee90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee94:	691b      	ldr	r3, [r3, #16]
    ee96:	4610      	mov	r0, r2
    ee98:	4619      	mov	r1, r3
    ee9a:	f004 f8e1 	bl	13060 <__aeabi_fsub>
    ee9e:	4603      	mov	r3, r0
    eea0:	4618      	mov	r0, r3
    eea2:	f003 fd53 	bl	1294c <__aeabi_f2d>
    eea6:	4604      	mov	r4, r0
    eea8:	460d      	mov	r5, r1
    eeaa:	f64b 33dc 	movw	r3, #48092	; 0xbbdc
    eeae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eeb2:	681a      	ldr	r2, [r3, #0]
    eeb4:	f240 1340 	movw	r3, #320	; 0x140
    eeb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eebc:	68db      	ldr	r3, [r3, #12]
    eebe:	4610      	mov	r0, r2
    eec0:	4619      	mov	r1, r3
    eec2:	f004 f8cd 	bl	13060 <__aeabi_fsub>
    eec6:	4603      	mov	r3, r0
    eec8:	4618      	mov	r0, r3
    eeca:	f003 fd3f 	bl	1294c <__aeabi_f2d>
    eece:	4602      	mov	r2, r0
    eed0:	460b      	mov	r3, r1
    eed2:	4620      	mov	r0, r4
    eed4:	4629      	mov	r1, r5
    eed6:	f001 fdb7 	bl	10a48 <pp_atan2>
    eeda:	4602      	mov	r2, r0
    eedc:	460b      	mov	r3, r1
    eede:	4610      	mov	r0, r2
    eee0:	4619      	mov	r1, r3
    eee2:	f004 f869 	bl	12fb8 <__aeabi_d2f>
    eee6:	4603      	mov	r3, r0
    eee8:	60fb      	str	r3, [r7, #12]
    eeea:	68f8      	ldr	r0, [r7, #12]
    eeec:	f003 fd2e 	bl	1294c <__aeabi_f2d>
    eef0:	4604      	mov	r4, r0
    eef2:	460d      	mov	r5, r1
    eef4:	f64b 4314 	movw	r3, #48148	; 0xbc14
    eef8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eefc:	681b      	ldr	r3, [r3, #0]
    eefe:	4618      	mov	r0, r3
    ef00:	f04f 0100 	mov.w	r1, #0
    ef04:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
    ef08:	f004 f9b4 	bl	13274 <__aeabi_fmul>
    ef0c:	4603      	mov	r3, r0
    ef0e:	4618      	mov	r0, r3
    ef10:	f003 fd1c 	bl	1294c <__aeabi_f2d>
    ef14:	4602      	mov	r2, r0
    ef16:	460b      	mov	r3, r1
    ef18:	f04f 0000 	mov.w	r0, #0
    ef1c:	f04f 0100 	mov.w	r1, #0
    ef20:	f2c4 0114 	movt	r1, #16404	; 0x4014
    ef24:	f003 fe90 	bl	12c48 <__aeabi_ddiv>
    ef28:	4602      	mov	r2, r0
    ef2a:	460b      	mov	r3, r1
    ef2c:	4620      	mov	r0, r4
    ef2e:	4629      	mov	r1, r5
    ef30:	f003 fbae 	bl	12690 <__adddf3>
    ef34:	4602      	mov	r2, r0
    ef36:	460b      	mov	r3, r1
    ef38:	4610      	mov	r0, r2
    ef3a:	4619      	mov	r1, r3
    ef3c:	f004 f83c 	bl	12fb8 <__aeabi_d2f>
    ef40:	4603      	mov	r3, r0
    ef42:	60bb      	str	r3, [r7, #8]
    ef44:	f240 1340 	movw	r3, #320	; 0x140
    ef48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef4c:	68db      	ldr	r3, [r3, #12]
    ef4e:	4618      	mov	r0, r3
    ef50:	f003 fcfc 	bl	1294c <__aeabi_f2d>
    ef54:	4604      	mov	r4, r0
    ef56:	460d      	mov	r5, r1
    ef58:	68b8      	ldr	r0, [r7, #8]
    ef5a:	f003 fcf7 	bl	1294c <__aeabi_f2d>
    ef5e:	4602      	mov	r2, r0
    ef60:	460b      	mov	r3, r1
    ef62:	4610      	mov	r0, r2
    ef64:	4619      	mov	r1, r3
    ef66:	a388      	add	r3, pc, #544	; (adr r3, f188 <auto_nav+0x1d80>)
    ef68:	e9d3 2300 	ldrd	r2, r3, [r3]
    ef6c:	f003 fb90 	bl	12690 <__adddf3>
    ef70:	4602      	mov	r2, r0
    ef72:	460b      	mov	r3, r1
    ef74:	4610      	mov	r0, r2
    ef76:	4619      	mov	r1, r3
    ef78:	f001 fe26 	bl	10bc8 <pp_sin>
    ef7c:	4602      	mov	r2, r0
    ef7e:	460b      	mov	r3, r1
    ef80:	4610      	mov	r0, r2
    ef82:	4619      	mov	r1, r3
    ef84:	f04f 0200 	mov.w	r2, #0
    ef88:	f04f 0300 	mov.w	r3, #0
    ef8c:	f2c4 0359 	movt	r3, #16473	; 0x4059
    ef90:	f003 fd30 	bl	129f4 <__aeabi_dmul>
    ef94:	4602      	mov	r2, r0
    ef96:	460b      	mov	r3, r1
    ef98:	4620      	mov	r0, r4
    ef9a:	4629      	mov	r1, r5
    ef9c:	f003 fb78 	bl	12690 <__adddf3>
    efa0:	4602      	mov	r2, r0
    efa2:	460b      	mov	r3, r1
    efa4:	4610      	mov	r0, r2
    efa6:	4619      	mov	r1, r3
    efa8:	f004 f806 	bl	12fb8 <__aeabi_d2f>
    efac:	4606      	mov	r6, r0
    efae:	f240 1340 	movw	r3, #320	; 0x140
    efb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    efb6:	691b      	ldr	r3, [r3, #16]
    efb8:	4618      	mov	r0, r3
    efba:	f003 fcc7 	bl	1294c <__aeabi_f2d>
    efbe:	4604      	mov	r4, r0
    efc0:	460d      	mov	r5, r1
    efc2:	68b8      	ldr	r0, [r7, #8]
    efc4:	f003 fcc2 	bl	1294c <__aeabi_f2d>
    efc8:	4602      	mov	r2, r0
    efca:	460b      	mov	r3, r1
    efcc:	4610      	mov	r0, r2
    efce:	4619      	mov	r1, r3
    efd0:	f001 fdfa 	bl	10bc8 <pp_sin>
    efd4:	4602      	mov	r2, r0
    efd6:	460b      	mov	r3, r1
    efd8:	4610      	mov	r0, r2
    efda:	4619      	mov	r1, r3
    efdc:	f04f 0200 	mov.w	r2, #0
    efe0:	f04f 0300 	mov.w	r3, #0
    efe4:	f2c4 0359 	movt	r3, #16473	; 0x4059
    efe8:	f003 fd04 	bl	129f4 <__aeabi_dmul>
    efec:	4602      	mov	r2, r0
    efee:	460b      	mov	r3, r1
    eff0:	4620      	mov	r0, r4
    eff2:	4629      	mov	r1, r5
    eff4:	f003 fb4c 	bl	12690 <__adddf3>
    eff8:	4602      	mov	r2, r0
    effa:	460b      	mov	r3, r1
    effc:	4610      	mov	r0, r2
    effe:	4619      	mov	r1, r3
    f000:	f003 ffda 	bl	12fb8 <__aeabi_d2f>
    f004:	4603      	mov	r3, r0
    f006:	4630      	mov	r0, r6
    f008:	4619      	mov	r1, r3
    f00a:	f000 fbc1 	bl	f790 <fly_to_xy>
    f00e:	68b8      	ldr	r0, [r7, #8]
    f010:	f003 fc9c 	bl	1294c <__aeabi_f2d>
    f014:	4602      	mov	r2, r0
    f016:	460b      	mov	r3, r1
    f018:	a15b      	add	r1, pc, #364	; (adr r1, f188 <auto_nav+0x1d80>)
    f01a:	e9d1 0100 	ldrd	r0, r1, [r1]
    f01e:	f003 fb35 	bl	1268c <__aeabi_dsub>
    f022:	4602      	mov	r2, r0
    f024:	460b      	mov	r3, r1
    f026:	4610      	mov	r0, r2
    f028:	4619      	mov	r1, r3
    f02a:	a359      	add	r3, pc, #356	; (adr r3, f190 <auto_nav+0x1d88>)
    f02c:	e9d3 2300 	ldrd	r2, r3, [r3]
    f030:	f003 fe0a 	bl	12c48 <__aeabi_ddiv>
    f034:	4602      	mov	r2, r0
    f036:	460b      	mov	r3, r1
    f038:	4610      	mov	r0, r2
    f03a:	4619      	mov	r1, r3
    f03c:	f04f 0200 	mov.w	r2, #0
    f040:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    f044:	f2c4 0366 	movt	r3, #16486	; 0x4066
    f048:	f003 fcd4 	bl	129f4 <__aeabi_dmul>
    f04c:	4602      	mov	r2, r0
    f04e:	460b      	mov	r3, r1
    f050:	4610      	mov	r0, r2
    f052:	4619      	mov	r1, r3
    f054:	f003 ffb0 	bl	12fb8 <__aeabi_d2f>
    f058:	4602      	mov	r2, r0
    f05a:	f64b 139c 	movw	r3, #47516	; 0xb99c
    f05e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f062:	601a      	str	r2, [r3, #0]
    f064:	e012      	b.n	f08c <auto_nav+0x1c84>
    f066:	f64b 139c 	movw	r3, #47516	; 0xb99c
    f06a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f06e:	681b      	ldr	r3, [r3, #0]
    f070:	4618      	mov	r0, r3
    f072:	f04f 0100 	mov.w	r1, #0
    f076:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
    f07a:	f003 fff3 	bl	13064 <__addsf3>
    f07e:	4603      	mov	r3, r0
    f080:	461a      	mov	r2, r3
    f082:	f64b 139c 	movw	r3, #47516	; 0xb99c
    f086:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f08a:	601a      	str	r2, [r3, #0]
    f08c:	f64b 139c 	movw	r3, #47516	; 0xb99c
    f090:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f094:	681b      	ldr	r3, [r3, #0]
    f096:	4618      	mov	r0, r3
    f098:	f04f 0100 	mov.w	r1, #0
    f09c:	f004 fa88 	bl	135b0 <__aeabi_fcmplt>
    f0a0:	4603      	mov	r3, r0
    f0a2:	2b00      	cmp	r3, #0
    f0a4:	d1df      	bne.n	f066 <auto_nav+0x1c5e>
    f0a6:	e012      	b.n	f0ce <auto_nav+0x1cc6>
    f0a8:	f64b 139c 	movw	r3, #47516	; 0xb99c
    f0ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0b0:	681b      	ldr	r3, [r3, #0]
    f0b2:	4618      	mov	r0, r3
    f0b4:	f04f 0100 	mov.w	r1, #0
    f0b8:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
    f0bc:	f003 ffd0 	bl	13060 <__aeabi_fsub>
    f0c0:	4603      	mov	r3, r0
    f0c2:	461a      	mov	r2, r3
    f0c4:	f64b 139c 	movw	r3, #47516	; 0xb99c
    f0c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0cc:	601a      	str	r2, [r3, #0]
    f0ce:	f64b 139c 	movw	r3, #47516	; 0xb99c
    f0d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0d6:	681b      	ldr	r3, [r3, #0]
    f0d8:	4618      	mov	r0, r3
    f0da:	f04f 0100 	mov.w	r1, #0
    f0de:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
    f0e2:	f004 fa79 	bl	135d8 <__aeabi_fcmpge>
    f0e6:	4603      	mov	r3, r0
    f0e8:	2b00      	cmp	r3, #0
    f0ea:	d1dd      	bne.n	f0a8 <auto_nav+0x1ca0>
        if (Qdr(0)) NextStage();
    f0ec:	f64b 139c 	movw	r3, #47516	; 0xb99c
    f0f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0f4:	681b      	ldr	r3, [r3, #0]
    f0f6:	4618      	mov	r0, r3
    f0f8:	f04f 0100 	mov.w	r1, #0
    f0fc:	f004 fa76 	bl	135ec <__aeabi_fcmpgt>
    f100:	4603      	mov	r3, r0
    f102:	2b00      	cmp	r3, #0
    f104:	d100      	bne.n	f108 <auto_nav+0x1d00>
        return;
    f106:	e251      	b.n	f5ac <auto_nav+0x21a4>
        nav_pitch = 0.000000;
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
        desired_altitude = waypoints[1].a;
        pre_climb = 0.;
        Circle(1, 100);
        if (Qdr(0)) NextStage();
    f108:	f64b 139c 	movw	r3, #47516	; 0xb99c
    f10c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f110:	681b      	ldr	r3, [r3, #0]
    f112:	4618      	mov	r0, r3
    f114:	f04f 0100 	mov.w	r1, #0
    f118:	f2c4 1120 	movt	r1, #16672	; 0x4120
    f11c:	f004 fa48 	bl	135b0 <__aeabi_fcmplt>
    f120:	4603      	mov	r3, r0
    f122:	2b00      	cmp	r3, #0
    f124:	d100      	bne.n	f128 <auto_nav+0x1d20>
        return;
    f126:	e241      	b.n	f5ac <auto_nav+0x21a4>
        nav_pitch = 0.000000;
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
        desired_altitude = waypoints[1].a;
        pre_climb = 0.;
        Circle(1, 100);
        if (Qdr(0)) NextStage();
    f128:	f64b 1380 	movw	r3, #47488	; 0xb980
    f12c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f130:	781b      	ldrb	r3, [r3, #0]
    f132:	3301      	adds	r3, #1
    f134:	b2da      	uxtb	r2, r3
    f136:	f64b 1380 	movw	r3, #47488	; 0xb980
    f13a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f13e:	701a      	strb	r2, [r3, #0]
    f140:	f64b 33dc 	movw	r3, #48092	; 0xbbdc
    f144:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f148:	681a      	ldr	r2, [r3, #0]
    f14a:	f64b 1384 	movw	r3, #47492	; 0xb984
    f14e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f152:	601a      	str	r2, [r3, #0]
    f154:	f64b 33e0 	movw	r3, #48096	; 0xbbe0
    f158:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f15c:	681a      	ldr	r2, [r3, #0]
    f15e:	f64b 1388 	movw	r3, #47496	; 0xb988
    f162:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f166:	601a      	str	r2, [r3, #0]
    f168:	f64b 1394 	movw	r3, #47508	; 0xb994
    f16c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f170:	2200      	movs	r2, #0
    f172:	801a      	strh	r2, [r3, #0]
    f174:	f64b 1398 	movw	r3, #47512	; 0xb998
    f178:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f17c:	f04f 0200 	mov.w	r2, #0
    f180:	601a      	str	r2, [r3, #0]
    f182:	e213      	b.n	f5ac <auto_nav+0x21a4>
    f184:	f3af 8000 	nop.w
    f188:	54442d18 	.word	0x54442d18
    f18c:	3ff921fb 	.word	0x3ff921fb
    f190:	54442d18 	.word	0x54442d18
    f194:	400921fb 	.word	0x400921fb
        return;
    }
    else if (nav_stage == 2)
    f198:	f64b 1380 	movw	r3, #47488	; 0xb980
    f19c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1a0:	781b      	ldrb	r3, [r3, #0]
    f1a2:	2b02      	cmp	r3, #2
    f1a4:	f040 81ad 	bne.w	f502 <auto_nav+0x20fa>
    {
         nav_stage = 2;
    f1a8:	f64b 1380 	movw	r3, #47488	; 0xb980
    f1ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1b0:	2202      	movs	r2, #2
    f1b2:	701a      	strb	r2, [r3, #0]
          auto_pitch = FALSE;
    f1b4:	f24b 630f 	movw	r3, #46607	; 0xb60f
    f1b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1bc:	2200      	movs	r2, #0
    f1be:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.000000;
    f1c0:	f64b 13ac 	movw	r3, #47532	; 0xb9ac
    f1c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1c8:	f04f 0200 	mov.w	r2, #0
    f1cc:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
    f1ce:	f24b 630d 	movw	r3, #46605	; 0xb60d
    f1d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1d6:	2203      	movs	r2, #3
    f1d8:	701a      	strb	r2, [r3, #0]
          desired_altitude = waypoints[4].a;
    f1da:	f240 1340 	movw	r3, #320	; 0x140
    f1de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    f1e4:	f240 133c 	movw	r3, #316	; 0x13c
    f1e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1ec:	601a      	str	r2, [r3, #0]
          pre_climb = 0.;
    f1ee:	f64b 1374 	movw	r3, #47476	; 0xb974
    f1f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1f6:	f04f 0200 	mov.w	r2, #0
    f1fa:	601a      	str	r2, [r3, #0]
          Circle(4, 100);
    f1fc:	f64b 33e0 	movw	r3, #48096	; 0xbbe0
    f200:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f204:	681a      	ldr	r2, [r3, #0]
    f206:	f240 1340 	movw	r3, #320	; 0x140
    f20a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f20e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    f210:	4610      	mov	r0, r2
    f212:	4619      	mov	r1, r3
    f214:	f003 ff24 	bl	13060 <__aeabi_fsub>
    f218:	4603      	mov	r3, r0
    f21a:	4618      	mov	r0, r3
    f21c:	f003 fb96 	bl	1294c <__aeabi_f2d>
    f220:	4604      	mov	r4, r0
    f222:	460d      	mov	r5, r1
    f224:	f64b 33dc 	movw	r3, #48092	; 0xbbdc
    f228:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f22c:	681a      	ldr	r2, [r3, #0]
    f22e:	f240 1340 	movw	r3, #320	; 0x140
    f232:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    f238:	4610      	mov	r0, r2
    f23a:	4619      	mov	r1, r3
    f23c:	f003 ff10 	bl	13060 <__aeabi_fsub>
    f240:	4603      	mov	r3, r0
    f242:	4618      	mov	r0, r3
    f244:	f003 fb82 	bl	1294c <__aeabi_f2d>
    f248:	4602      	mov	r2, r0
    f24a:	460b      	mov	r3, r1
    f24c:	4620      	mov	r0, r4
    f24e:	4629      	mov	r1, r5
    f250:	f001 fbfa 	bl	10a48 <pp_atan2>
    f254:	4602      	mov	r2, r0
    f256:	460b      	mov	r3, r1
    f258:	4610      	mov	r0, r2
    f25a:	4619      	mov	r1, r3
    f25c:	f003 feac 	bl	12fb8 <__aeabi_d2f>
    f260:	4603      	mov	r3, r0
    f262:	607b      	str	r3, [r7, #4]
    f264:	6878      	ldr	r0, [r7, #4]
    f266:	f003 fb71 	bl	1294c <__aeabi_f2d>
    f26a:	4604      	mov	r4, r0
    f26c:	460d      	mov	r5, r1
    f26e:	f64b 4314 	movw	r3, #48148	; 0xbc14
    f272:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f276:	681b      	ldr	r3, [r3, #0]
    f278:	4618      	mov	r0, r3
    f27a:	f04f 0100 	mov.w	r1, #0
    f27e:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
    f282:	f003 fff7 	bl	13274 <__aeabi_fmul>
    f286:	4603      	mov	r3, r0
    f288:	4618      	mov	r0, r3
    f28a:	f003 fb5f 	bl	1294c <__aeabi_f2d>
    f28e:	4602      	mov	r2, r0
    f290:	460b      	mov	r3, r1
    f292:	f04f 0000 	mov.w	r0, #0
    f296:	f04f 0100 	mov.w	r1, #0
    f29a:	f2c4 0114 	movt	r1, #16404	; 0x4014
    f29e:	f003 fcd3 	bl	12c48 <__aeabi_ddiv>
    f2a2:	4602      	mov	r2, r0
    f2a4:	460b      	mov	r3, r1
    f2a6:	4620      	mov	r0, r4
    f2a8:	4629      	mov	r1, r5
    f2aa:	f003 f9f1 	bl	12690 <__adddf3>
    f2ae:	4602      	mov	r2, r0
    f2b0:	460b      	mov	r3, r1
    f2b2:	4610      	mov	r0, r2
    f2b4:	4619      	mov	r1, r3
    f2b6:	f003 fe7f 	bl	12fb8 <__aeabi_d2f>
    f2ba:	4603      	mov	r3, r0
    f2bc:	603b      	str	r3, [r7, #0]
    f2be:	f240 1340 	movw	r3, #320	; 0x140
    f2c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    f2c8:	4618      	mov	r0, r3
    f2ca:	f003 fb3f 	bl	1294c <__aeabi_f2d>
    f2ce:	4604      	mov	r4, r0
    f2d0:	460d      	mov	r5, r1
    f2d2:	6838      	ldr	r0, [r7, #0]
    f2d4:	f003 fb3a 	bl	1294c <__aeabi_f2d>
    f2d8:	4602      	mov	r2, r0
    f2da:	460b      	mov	r3, r1
    f2dc:	4610      	mov	r0, r2
    f2de:	4619      	mov	r1, r3
    f2e0:	a3b5      	add	r3, pc, #724	; (adr r3, f5b8 <auto_nav+0x21b0>)
    f2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
    f2e6:	f003 f9d3 	bl	12690 <__adddf3>
    f2ea:	4602      	mov	r2, r0
    f2ec:	460b      	mov	r3, r1
    f2ee:	4610      	mov	r0, r2
    f2f0:	4619      	mov	r1, r3
    f2f2:	f001 fc69 	bl	10bc8 <pp_sin>
    f2f6:	4602      	mov	r2, r0
    f2f8:	460b      	mov	r3, r1
    f2fa:	4610      	mov	r0, r2
    f2fc:	4619      	mov	r1, r3
    f2fe:	f04f 0200 	mov.w	r2, #0
    f302:	f04f 0300 	mov.w	r3, #0
    f306:	f2c4 0359 	movt	r3, #16473	; 0x4059
    f30a:	f003 fb73 	bl	129f4 <__aeabi_dmul>
    f30e:	4602      	mov	r2, r0
    f310:	460b      	mov	r3, r1
    f312:	4620      	mov	r0, r4
    f314:	4629      	mov	r1, r5
    f316:	f003 f9bb 	bl	12690 <__adddf3>
    f31a:	4602      	mov	r2, r0
    f31c:	460b      	mov	r3, r1
    f31e:	4610      	mov	r0, r2
    f320:	4619      	mov	r1, r3
    f322:	f003 fe49 	bl	12fb8 <__aeabi_d2f>
    f326:	4606      	mov	r6, r0
    f328:	f240 1340 	movw	r3, #320	; 0x140
    f32c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    f332:	4618      	mov	r0, r3
    f334:	f003 fb0a 	bl	1294c <__aeabi_f2d>
    f338:	4604      	mov	r4, r0
    f33a:	460d      	mov	r5, r1
    f33c:	6838      	ldr	r0, [r7, #0]
    f33e:	f003 fb05 	bl	1294c <__aeabi_f2d>
    f342:	4602      	mov	r2, r0
    f344:	460b      	mov	r3, r1
    f346:	4610      	mov	r0, r2
    f348:	4619      	mov	r1, r3
    f34a:	f001 fc3d 	bl	10bc8 <pp_sin>
    f34e:	4602      	mov	r2, r0
    f350:	460b      	mov	r3, r1
    f352:	4610      	mov	r0, r2
    f354:	4619      	mov	r1, r3
    f356:	f04f 0200 	mov.w	r2, #0
    f35a:	f04f 0300 	mov.w	r3, #0
    f35e:	f2c4 0359 	movt	r3, #16473	; 0x4059
    f362:	f003 fb47 	bl	129f4 <__aeabi_dmul>
    f366:	4602      	mov	r2, r0
    f368:	460b      	mov	r3, r1
    f36a:	4620      	mov	r0, r4
    f36c:	4629      	mov	r1, r5
    f36e:	f003 f98f 	bl	12690 <__adddf3>
    f372:	4602      	mov	r2, r0
    f374:	460b      	mov	r3, r1
    f376:	4610      	mov	r0, r2
    f378:	4619      	mov	r1, r3
    f37a:	f003 fe1d 	bl	12fb8 <__aeabi_d2f>
    f37e:	4603      	mov	r3, r0
    f380:	4630      	mov	r0, r6
    f382:	4619      	mov	r1, r3
    f384:	f000 fa04 	bl	f790 <fly_to_xy>
    f388:	6838      	ldr	r0, [r7, #0]
    f38a:	f003 fadf 	bl	1294c <__aeabi_f2d>
    f38e:	4602      	mov	r2, r0
    f390:	460b      	mov	r3, r1
    f392:	a189      	add	r1, pc, #548	; (adr r1, f5b8 <auto_nav+0x21b0>)
    f394:	e9d1 0100 	ldrd	r0, r1, [r1]
    f398:	f003 f978 	bl	1268c <__aeabi_dsub>
    f39c:	4602      	mov	r2, r0
    f39e:	460b      	mov	r3, r1
    f3a0:	4610      	mov	r0, r2
    f3a2:	4619      	mov	r1, r3
    f3a4:	a386      	add	r3, pc, #536	; (adr r3, f5c0 <auto_nav+0x21b8>)
    f3a6:	e9d3 2300 	ldrd	r2, r3, [r3]
    f3aa:	f003 fc4d 	bl	12c48 <__aeabi_ddiv>
    f3ae:	4602      	mov	r2, r0
    f3b0:	460b      	mov	r3, r1
    f3b2:	4610      	mov	r0, r2
    f3b4:	4619      	mov	r1, r3
    f3b6:	f04f 0200 	mov.w	r2, #0
    f3ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    f3be:	f2c4 0366 	movt	r3, #16486	; 0x4066
    f3c2:	f003 fb17 	bl	129f4 <__aeabi_dmul>
    f3c6:	4602      	mov	r2, r0
    f3c8:	460b      	mov	r3, r1
    f3ca:	4610      	mov	r0, r2
    f3cc:	4619      	mov	r1, r3
    f3ce:	f003 fdf3 	bl	12fb8 <__aeabi_d2f>
    f3d2:	4602      	mov	r2, r0
    f3d4:	f64b 139c 	movw	r3, #47516	; 0xb99c
    f3d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3dc:	601a      	str	r2, [r3, #0]
    f3de:	e012      	b.n	f406 <auto_nav+0x1ffe>
    f3e0:	f64b 139c 	movw	r3, #47516	; 0xb99c
    f3e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3e8:	681b      	ldr	r3, [r3, #0]
    f3ea:	4618      	mov	r0, r3
    f3ec:	f04f 0100 	mov.w	r1, #0
    f3f0:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
    f3f4:	f003 fe36 	bl	13064 <__addsf3>
    f3f8:	4603      	mov	r3, r0
    f3fa:	461a      	mov	r2, r3
    f3fc:	f64b 139c 	movw	r3, #47516	; 0xb99c
    f400:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f404:	601a      	str	r2, [r3, #0]
    f406:	f64b 139c 	movw	r3, #47516	; 0xb99c
    f40a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f40e:	681b      	ldr	r3, [r3, #0]
    f410:	4618      	mov	r0, r3
    f412:	f04f 0100 	mov.w	r1, #0
    f416:	f004 f8cb 	bl	135b0 <__aeabi_fcmplt>
    f41a:	4603      	mov	r3, r0
    f41c:	2b00      	cmp	r3, #0
    f41e:	d1df      	bne.n	f3e0 <auto_nav+0x1fd8>
    f420:	e012      	b.n	f448 <auto_nav+0x2040>
    f422:	f64b 139c 	movw	r3, #47516	; 0xb99c
    f426:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f42a:	681b      	ldr	r3, [r3, #0]
    f42c:	4618      	mov	r0, r3
    f42e:	f04f 0100 	mov.w	r1, #0
    f432:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
    f436:	f003 fe13 	bl	13060 <__aeabi_fsub>
    f43a:	4603      	mov	r3, r0
    f43c:	461a      	mov	r2, r3
    f43e:	f64b 139c 	movw	r3, #47516	; 0xb99c
    f442:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f446:	601a      	str	r2, [r3, #0]
    f448:	f64b 139c 	movw	r3, #47516	; 0xb99c
    f44c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f450:	681b      	ldr	r3, [r3, #0]
    f452:	4618      	mov	r0, r3
    f454:	f04f 0100 	mov.w	r1, #0
    f458:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
    f45c:	f004 f8bc 	bl	135d8 <__aeabi_fcmpge>
    f460:	4603      	mov	r3, r0
    f462:	2b00      	cmp	r3, #0
    f464:	d1dd      	bne.n	f422 <auto_nav+0x201a>
          if (Qdr(180)) NextStage();
    f466:	f64b 139c 	movw	r3, #47516	; 0xb99c
    f46a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f46e:	681b      	ldr	r3, [r3, #0]
    f470:	4618      	mov	r0, r3
    f472:	f04f 0100 	mov.w	r1, #0
    f476:	f2c4 3134 	movt	r1, #17204	; 0x4334
    f47a:	f004 f8b7 	bl	135ec <__aeabi_fcmpgt>
    f47e:	4603      	mov	r3, r0
    f480:	2b00      	cmp	r3, #0
    f482:	d100      	bne.n	f486 <auto_nav+0x207e>
          return;
    f484:	e092      	b.n	f5ac <auto_nav+0x21a4>
          nav_pitch = 0.000000;
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
          desired_altitude = waypoints[4].a;
          pre_climb = 0.;
          Circle(4, 100);
          if (Qdr(180)) NextStage();
    f486:	f64b 139c 	movw	r3, #47516	; 0xb99c
    f48a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f48e:	681b      	ldr	r3, [r3, #0]
    f490:	4618      	mov	r0, r3
    f492:	f04f 0100 	mov.w	r1, #0
    f496:	f2c4 313e 	movt	r1, #17214	; 0x433e
    f49a:	f004 f889 	bl	135b0 <__aeabi_fcmplt>
    f49e:	4603      	mov	r3, r0
    f4a0:	2b00      	cmp	r3, #0
    f4a2:	d100      	bne.n	f4a6 <auto_nav+0x209e>
          return;
    f4a4:	e082      	b.n	f5ac <auto_nav+0x21a4>
          nav_pitch = 0.000000;
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
          desired_altitude = waypoints[4].a;
          pre_climb = 0.;
          Circle(4, 100);
          if (Qdr(180)) NextStage();
    f4a6:	f64b 1380 	movw	r3, #47488	; 0xb980
    f4aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4ae:	781b      	ldrb	r3, [r3, #0]
    f4b0:	3301      	adds	r3, #1
    f4b2:	b2da      	uxtb	r2, r3
    f4b4:	f64b 1380 	movw	r3, #47488	; 0xb980
    f4b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4bc:	701a      	strb	r2, [r3, #0]
    f4be:	f64b 33dc 	movw	r3, #48092	; 0xbbdc
    f4c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4c6:	681a      	ldr	r2, [r3, #0]
    f4c8:	f64b 1384 	movw	r3, #47492	; 0xb984
    f4cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4d0:	601a      	str	r2, [r3, #0]
    f4d2:	f64b 33e0 	movw	r3, #48096	; 0xbbe0
    f4d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4da:	681a      	ldr	r2, [r3, #0]
    f4dc:	f64b 1388 	movw	r3, #47496	; 0xb988
    f4e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4e4:	601a      	str	r2, [r3, #0]
    f4e6:	f64b 1394 	movw	r3, #47508	; 0xb994
    f4ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4ee:	2200      	movs	r2, #0
    f4f0:	801a      	strh	r2, [r3, #0]
    f4f2:	f64b 1398 	movw	r3, #47512	; 0xb998
    f4f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4fa:	f04f 0200 	mov.w	r2, #0
    f4fe:	601a      	str	r2, [r3, #0]
    f500:	e054      	b.n	f5ac <auto_nav+0x21a4>
          return;
    }
    else if (nav_stage == 3) 
    f502:	f64b 1380 	movw	r3, #47488	; 0xb980
    f506:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f50a:	781b      	ldrb	r3, [r3, #0]
    f50c:	2b03      	cmp	r3, #3
    f50e:	d106      	bne.n	f51e <auto_nav+0x2116>
    {
	  nav_stage = 3;
    f510:	f64b 1380 	movw	r3, #47488	; 0xb980
    f514:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f518:	2203      	movs	r2, #3
    f51a:	701a      	strb	r2, [r3, #0]
          Goto(while_7)
    f51c:	e44b      	b.n	edb6 <auto_nav+0x19ae>
    }
    else if (nav_stage == 4)
    f51e:	f64b 1380 	movw	r3, #47488	; 0xb980
    f522:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f526:	781b      	ldrb	r3, [r3, #0]
    f528:	2b04      	cmp	r3, #4
    f52a:	d13f      	bne.n	f5ac <auto_nav+0x21a4>
    {
	Label(endwhile_8)
	nav_stage = 4;
    f52c:	f64b 1380 	movw	r3, #47488	; 0xb980
    f530:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f534:	2204      	movs	r2, #4
    f536:	701a      	strb	r2, [r3, #0]
        NextBlock()
    f538:	f64b 1381 	movw	r3, #47489	; 0xb981
    f53c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f540:	781b      	ldrb	r3, [r3, #0]
    f542:	3301      	adds	r3, #1
    f544:	b2da      	uxtb	r2, r3
    f546:	f64b 1381 	movw	r3, #47489	; 0xb981
    f54a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f54e:	701a      	strb	r2, [r3, #0]
    f550:	f64b 1380 	movw	r3, #47488	; 0xb980
    f554:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f558:	2200      	movs	r2, #0
    f55a:	701a      	strb	r2, [r3, #0]
    f55c:	f64b 1396 	movw	r3, #47510	; 0xb996
    f560:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f564:	2200      	movs	r2, #0
    f566:	801a      	strh	r2, [r3, #0]
    f568:	f64b 33dc 	movw	r3, #48092	; 0xbbdc
    f56c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f570:	681a      	ldr	r2, [r3, #0]
    f572:	f64b 1384 	movw	r3, #47492	; 0xb984
    f576:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f57a:	601a      	str	r2, [r3, #0]
    f57c:	f64b 33e0 	movw	r3, #48096	; 0xbbe0
    f580:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f584:	681a      	ldr	r2, [r3, #0]
    f586:	f64b 1388 	movw	r3, #47496	; 0xb988
    f58a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f58e:	601a      	str	r2, [r3, #0]
    f590:	f64b 1394 	movw	r3, #47508	; 0xb994
    f594:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f598:	2200      	movs	r2, #0
    f59a:	801a      	strh	r2, [r3, #0]
    f59c:	f64b 1398 	movw	r3, #47512	; 0xb998
    f5a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5a4:	f04f 0200 	mov.w	r2, #0
    f5a8:	601a      	str	r2, [r3, #0]
    f5aa:	bf00      	nop
    else { }
}
else { }

//#endif
}
    f5ac:	372c      	adds	r7, #44	; 0x2c
    f5ae:	46bd      	mov	sp, r7
    f5b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f5b2:	bf00      	nop
    f5b4:	f3af 8000 	nop.w
    f5b8:	54442d18 	.word	0x54442d18
    f5bc:	3ff921fb 	.word	0x3ff921fb
    f5c0:	54442d18 	.word	0x54442d18
    f5c4:	400921fb 	.word	0x400921fb

0000f5c8 <approaching>:
const uint8_t nb_waypoint = NB_WAYPOINT;

struct point waypoints[NB_WAYPOINT+1] = WAYPOINTS;

static float carrot;
static bool_t approaching(uint8_t wp) {
    f5c8:	b590      	push	{r4, r7, lr}
    f5ca:	b087      	sub	sp, #28
    f5cc:	af00      	add	r7, sp, #0
    f5ce:	4603      	mov	r3, r0
    f5d0:	71fb      	strb	r3, [r7, #7]
  float pw_x = waypoints[wp].x - estimator_x;
    f5d2:	79f9      	ldrb	r1, [r7, #7]
    f5d4:	f240 1240 	movw	r2, #320	; 0x140
    f5d8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f5dc:	460b      	mov	r3, r1
    f5de:	005b      	lsls	r3, r3, #1
    f5e0:	440b      	add	r3, r1
    f5e2:	009b      	lsls	r3, r3, #2
    f5e4:	4413      	add	r3, r2
    f5e6:	681a      	ldr	r2, [r3, #0]
    f5e8:	f64b 33dc 	movw	r3, #48092	; 0xbbdc
    f5ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5f0:	681b      	ldr	r3, [r3, #0]
    f5f2:	4610      	mov	r0, r2
    f5f4:	4619      	mov	r1, r3
    f5f6:	f003 fd33 	bl	13060 <__aeabi_fsub>
    f5fa:	4603      	mov	r3, r0
    f5fc:	617b      	str	r3, [r7, #20]
  float pw_y = waypoints[wp].y - estimator_y;
    f5fe:	79f9      	ldrb	r1, [r7, #7]
    f600:	f240 1240 	movw	r2, #320	; 0x140
    f604:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f608:	460b      	mov	r3, r1
    f60a:	005b      	lsls	r3, r3, #1
    f60c:	440b      	add	r3, r1
    f60e:	009b      	lsls	r3, r3, #2
    f610:	4413      	add	r3, r2
    f612:	3304      	adds	r3, #4
    f614:	681a      	ldr	r2, [r3, #0]
    f616:	f64b 33e0 	movw	r3, #48096	; 0xbbe0
    f61a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f61e:	681b      	ldr	r3, [r3, #0]
    f620:	4610      	mov	r0, r2
    f622:	4619      	mov	r1, r3
    f624:	f003 fd1c 	bl	13060 <__aeabi_fsub>
    f628:	4603      	mov	r3, r0
    f62a:	613b      	str	r3, [r7, #16]
  float scal_prod;//changes for PowerPc Fev-06

  dist2_to_wp = pw_x*pw_x + pw_y *pw_y;
    f62c:	6978      	ldr	r0, [r7, #20]
    f62e:	6979      	ldr	r1, [r7, #20]
    f630:	f003 fe20 	bl	13274 <__aeabi_fmul>
    f634:	4603      	mov	r3, r0
    f636:	461c      	mov	r4, r3
    f638:	6938      	ldr	r0, [r7, #16]
    f63a:	6939      	ldr	r1, [r7, #16]
    f63c:	f003 fe1a 	bl	13274 <__aeabi_fmul>
    f640:	4603      	mov	r3, r0
    f642:	4620      	mov	r0, r4
    f644:	4619      	mov	r1, r3
    f646:	f003 fd0d 	bl	13064 <__addsf3>
    f64a:	4603      	mov	r3, r0
    f64c:	461a      	mov	r2, r3
    f64e:	f64b 13b4 	movw	r3, #47540	; 0xb9b4
    f652:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f656:	601a      	str	r2, [r3, #0]
  carrot = CARROT * estimator_hspeed_mod;
    f658:	f64b 4314 	movw	r3, #48148	; 0xbc14
    f65c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f660:	681b      	ldr	r3, [r3, #0]
    f662:	4618      	mov	r0, r3
    f664:	f04f 0100 	mov.w	r1, #0
    f668:	f2c4 01a0 	movt	r1, #16544	; 0x40a0
    f66c:	f003 fe02 	bl	13274 <__aeabi_fmul>
    f670:	4603      	mov	r3, r0
    f672:	461a      	mov	r2, r3
    f674:	f64b 13c0 	movw	r3, #47552	; 0xb9c0
    f678:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f67c:	601a      	str	r2, [r3, #0]
  carrot = (carrot < 40 ? 40 : carrot);
    f67e:	f64b 13c0 	movw	r3, #47552	; 0xb9c0
    f682:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f686:	681b      	ldr	r3, [r3, #0]
    f688:	4618      	mov	r0, r3
    f68a:	f04f 0100 	mov.w	r1, #0
    f68e:	f2c4 2120 	movt	r1, #16928	; 0x4220
    f692:	f003 ff8d 	bl	135b0 <__aeabi_fcmplt>
    f696:	4603      	mov	r3, r0
    f698:	2b00      	cmp	r3, #0
    f69a:	d004      	beq.n	f6a6 <approaching+0xde>
    f69c:	f04f 0200 	mov.w	r2, #0
    f6a0:	f2c4 2220 	movt	r2, #16928	; 0x4220
    f6a4:	e004      	b.n	f6b0 <approaching+0xe8>
    f6a6:	f64b 13c0 	movw	r3, #47552	; 0xb9c0
    f6aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6ae:	681a      	ldr	r2, [r3, #0]
    f6b0:	f64b 13c0 	movw	r3, #47552	; 0xb9c0
    f6b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6b8:	601a      	str	r2, [r3, #0]
  if (dist2_to_wp < carrot*carrot)
    f6ba:	f64b 13c0 	movw	r3, #47552	; 0xb9c0
    f6be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6c2:	681a      	ldr	r2, [r3, #0]
    f6c4:	f64b 13c0 	movw	r3, #47552	; 0xb9c0
    f6c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6cc:	681b      	ldr	r3, [r3, #0]
    f6ce:	4610      	mov	r0, r2
    f6d0:	4619      	mov	r1, r3
    f6d2:	f003 fdcf 	bl	13274 <__aeabi_fmul>
    f6d6:	4603      	mov	r3, r0
    f6d8:	461a      	mov	r2, r3
    f6da:	f64b 13b4 	movw	r3, #47540	; 0xb9b4
    f6de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6e2:	681b      	ldr	r3, [r3, #0]
    f6e4:	4610      	mov	r0, r2
    f6e6:	4619      	mov	r1, r3
    f6e8:	f003 ff80 	bl	135ec <__aeabi_fcmpgt>
    f6ec:	4603      	mov	r3, r0
    f6ee:	2b00      	cmp	r3, #0
    f6f0:	d001      	beq.n	f6f6 <approaching+0x12e>
    return TRUE;
    f6f2:	2301      	movs	r3, #1
    f6f4:	e048      	b.n	f788 <approaching+0x1c0>

  scal_prod = (waypoints[wp].x - last_x) * pw_x + (waypoints[wp].y - last_y) * pw_y;
    f6f6:	79f9      	ldrb	r1, [r7, #7]
    f6f8:	f240 1240 	movw	r2, #320	; 0x140
    f6fc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f700:	460b      	mov	r3, r1
    f702:	005b      	lsls	r3, r3, #1
    f704:	440b      	add	r3, r1
    f706:	009b      	lsls	r3, r3, #2
    f708:	4413      	add	r3, r2
    f70a:	681a      	ldr	r2, [r3, #0]
    f70c:	f64b 1384 	movw	r3, #47492	; 0xb984
    f710:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f714:	681b      	ldr	r3, [r3, #0]
    f716:	4610      	mov	r0, r2
    f718:	4619      	mov	r1, r3
    f71a:	f003 fca1 	bl	13060 <__aeabi_fsub>
    f71e:	4603      	mov	r3, r0
    f720:	4618      	mov	r0, r3
    f722:	6979      	ldr	r1, [r7, #20]
    f724:	f003 fda6 	bl	13274 <__aeabi_fmul>
    f728:	4603      	mov	r3, r0
    f72a:	461c      	mov	r4, r3
    f72c:	79f9      	ldrb	r1, [r7, #7]
    f72e:	f240 1240 	movw	r2, #320	; 0x140
    f732:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f736:	460b      	mov	r3, r1
    f738:	005b      	lsls	r3, r3, #1
    f73a:	440b      	add	r3, r1
    f73c:	009b      	lsls	r3, r3, #2
    f73e:	4413      	add	r3, r2
    f740:	3304      	adds	r3, #4
    f742:	681a      	ldr	r2, [r3, #0]
    f744:	f64b 1388 	movw	r3, #47496	; 0xb988
    f748:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f74c:	681b      	ldr	r3, [r3, #0]
    f74e:	4610      	mov	r0, r2
    f750:	4619      	mov	r1, r3
    f752:	f003 fc85 	bl	13060 <__aeabi_fsub>
    f756:	4603      	mov	r3, r0
    f758:	4618      	mov	r0, r3
    f75a:	6939      	ldr	r1, [r7, #16]
    f75c:	f003 fd8a 	bl	13274 <__aeabi_fmul>
    f760:	4603      	mov	r3, r0
    f762:	4620      	mov	r0, r4
    f764:	4619      	mov	r1, r3
    f766:	f003 fc7d 	bl	13064 <__addsf3>
    f76a:	4603      	mov	r3, r0
    f76c:	60fb      	str	r3, [r7, #12]
  
  return (scal_prod < 0);
    f76e:	2301      	movs	r3, #1
    f770:	461c      	mov	r4, r3
    f772:	68f8      	ldr	r0, [r7, #12]
    f774:	f04f 0100 	mov.w	r1, #0
    f778:	f003 ff1a 	bl	135b0 <__aeabi_fcmplt>
    f77c:	4603      	mov	r3, r0
    f77e:	2b00      	cmp	r3, #0
    f780:	d101      	bne.n	f786 <approaching+0x1be>
    f782:	2300      	movs	r3, #0
    f784:	461c      	mov	r4, r3
    f786:	b2e3      	uxtb	r3, r4
}
    f788:	4618      	mov	r0, r3
    f78a:	371c      	adds	r7, #28
    f78c:	46bd      	mov	sp, r7
    f78e:	bd90      	pop	{r4, r7, pc}

0000f790 <fly_to_xy>:

static inline void fly_to_xy(float x, float y) 
{ 
    f790:	b5b0      	push	{r4, r5, r7, lr}
    f792:	b082      	sub	sp, #8
    f794:	af00      	add	r7, sp, #0
    f796:	6078      	str	r0, [r7, #4]
    f798:	6039      	str	r1, [r7, #0]
  desired_x = x;
    f79a:	f64b 13a0 	movw	r3, #47520	; 0xb9a0
    f79e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7a2:	687a      	ldr	r2, [r7, #4]
    f7a4:	601a      	str	r2, [r3, #0]
  desired_y = y;
    f7a6:	f64b 13a4 	movw	r3, #47524	; 0xb9a4
    f7aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7ae:	683a      	ldr	r2, [r7, #0]
    f7b0:	601a      	str	r2, [r3, #0]
  desired_course = M_PI/2.-atan2(y - estimator_y, x - estimator_x);
    f7b2:	f64b 33e0 	movw	r3, #48096	; 0xbbe0
    f7b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7ba:	681b      	ldr	r3, [r3, #0]
    f7bc:	6838      	ldr	r0, [r7, #0]
    f7be:	4619      	mov	r1, r3
    f7c0:	f003 fc4e 	bl	13060 <__aeabi_fsub>
    f7c4:	4603      	mov	r3, r0
    f7c6:	4618      	mov	r0, r3
    f7c8:	f003 f8c0 	bl	1294c <__aeabi_f2d>
    f7cc:	4604      	mov	r4, r0
    f7ce:	460d      	mov	r5, r1
    f7d0:	f64b 33dc 	movw	r3, #48092	; 0xbbdc
    f7d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7d8:	681b      	ldr	r3, [r3, #0]
    f7da:	6878      	ldr	r0, [r7, #4]
    f7dc:	4619      	mov	r1, r3
    f7de:	f003 fc3f 	bl	13060 <__aeabi_fsub>
    f7e2:	4603      	mov	r3, r0
    f7e4:	4618      	mov	r0, r3
    f7e6:	f003 f8b1 	bl	1294c <__aeabi_f2d>
    f7ea:	4602      	mov	r2, r0
    f7ec:	460b      	mov	r3, r1
    f7ee:	4620      	mov	r0, r4
    f7f0:	4629      	mov	r1, r5
    f7f2:	f001 f929 	bl	10a48 <pp_atan2>
    f7f6:	4602      	mov	r2, r0
    f7f8:	460b      	mov	r3, r1
    f7fa:	a10b      	add	r1, pc, #44	; (adr r1, f828 <fly_to_xy+0x98>)
    f7fc:	e9d1 0100 	ldrd	r0, r1, [r1]
    f800:	f002 ff44 	bl	1268c <__aeabi_dsub>
    f804:	4602      	mov	r2, r0
    f806:	460b      	mov	r3, r1
    f808:	4610      	mov	r0, r2
    f80a:	4619      	mov	r1, r3
    f80c:	f003 fbd4 	bl	12fb8 <__aeabi_d2f>
    f810:	4602      	mov	r2, r0
    f812:	f64b 136c 	movw	r3, #47468	; 0xb96c
    f816:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f81a:	601a      	str	r2, [r3, #0]
}
    f81c:	3708      	adds	r7, #8
    f81e:	46bd      	mov	sp, r7
    f820:	bdb0      	pop	{r4, r5, r7, pc}
    f822:	bf00      	nop
    f824:	f3af 8000 	nop.w
    f828:	54442d18 	.word	0x54442d18
    f82c:	3ff921fb 	.word	0x3ff921fb

0000f830 <fly_to>:

static void fly_to(uint8_t wp) { 
    f830:	b580      	push	{r7, lr}
    f832:	b082      	sub	sp, #8
    f834:	af00      	add	r7, sp, #0
    f836:	4603      	mov	r3, r0
    f838:	71fb      	strb	r3, [r7, #7]
  fly_to_xy(waypoints[wp].x, waypoints[wp].y);
    f83a:	79f9      	ldrb	r1, [r7, #7]
    f83c:	f240 1240 	movw	r2, #320	; 0x140
    f840:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f844:	460b      	mov	r3, r1
    f846:	005b      	lsls	r3, r3, #1
    f848:	440b      	add	r3, r1
    f84a:	009b      	lsls	r3, r3, #2
    f84c:	4413      	add	r3, r2
    f84e:	6818      	ldr	r0, [r3, #0]
    f850:	79f9      	ldrb	r1, [r7, #7]
    f852:	f240 1240 	movw	r2, #320	; 0x140
    f856:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f85a:	460b      	mov	r3, r1
    f85c:	005b      	lsls	r3, r3, #1
    f85e:	440b      	add	r3, r1
    f860:	009b      	lsls	r3, r3, #2
    f862:	4413      	add	r3, r2
    f864:	3304      	adds	r3, #4
    f866:	681b      	ldr	r3, [r3, #0]
    f868:	4619      	mov	r1, r3
    f86a:	f7ff ff91 	bl	f790 <fly_to_xy>
}
    f86e:	3708      	adds	r7, #8
    f870:	46bd      	mov	sp, r7
    f872:	bd80      	pop	{r7, pc}

0000f874 <route_to>:

static float alpha, leg;
static void route_to(uint8_t _last_wp, uint8_t wp) 
{
    f874:	b5b0      	push	{r4, r5, r7, lr}
    f876:	b088      	sub	sp, #32
    f878:	af00      	add	r7, sp, #0
    f87a:	4602      	mov	r2, r0
    f87c:	460b      	mov	r3, r1
    f87e:	71fa      	strb	r2, [r7, #7]
    f880:	71bb      	strb	r3, [r7, #6]
  float last_wp_x = waypoints[_last_wp].x;
    f882:	79f9      	ldrb	r1, [r7, #7]
    f884:	f240 1240 	movw	r2, #320	; 0x140
    f888:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f88c:	460b      	mov	r3, r1
    f88e:	005b      	lsls	r3, r3, #1
    f890:	440b      	add	r3, r1
    f892:	009b      	lsls	r3, r3, #2
    f894:	4413      	add	r3, r2
    f896:	681b      	ldr	r3, [r3, #0]
    f898:	61fb      	str	r3, [r7, #28]
  float last_wp_y = waypoints[_last_wp].y;
    f89a:	79f9      	ldrb	r1, [r7, #7]
    f89c:	f240 1240 	movw	r2, #320	; 0x140
    f8a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f8a4:	460b      	mov	r3, r1
    f8a6:	005b      	lsls	r3, r3, #1
    f8a8:	440b      	add	r3, r1
    f8aa:	009b      	lsls	r3, r3, #2
    f8ac:	4413      	add	r3, r2
    f8ae:	3304      	adds	r3, #4
    f8b0:	681b      	ldr	r3, [r3, #0]
    f8b2:	61bb      	str	r3, [r7, #24]
  float leg_x = waypoints[wp].x - last_wp_x;
    f8b4:	79b9      	ldrb	r1, [r7, #6]
    f8b6:	f240 1240 	movw	r2, #320	; 0x140
    f8ba:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f8be:	460b      	mov	r3, r1
    f8c0:	005b      	lsls	r3, r3, #1
    f8c2:	440b      	add	r3, r1
    f8c4:	009b      	lsls	r3, r3, #2
    f8c6:	4413      	add	r3, r2
    f8c8:	681b      	ldr	r3, [r3, #0]
    f8ca:	4618      	mov	r0, r3
    f8cc:	69f9      	ldr	r1, [r7, #28]
    f8ce:	f003 fbc7 	bl	13060 <__aeabi_fsub>
    f8d2:	4603      	mov	r3, r0
    f8d4:	617b      	str	r3, [r7, #20]
  float leg_y = waypoints[wp].y - last_wp_y;
    f8d6:	79b9      	ldrb	r1, [r7, #6]
    f8d8:	f240 1240 	movw	r2, #320	; 0x140
    f8dc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f8e0:	460b      	mov	r3, r1
    f8e2:	005b      	lsls	r3, r3, #1
    f8e4:	440b      	add	r3, r1
    f8e6:	009b      	lsls	r3, r3, #2
    f8e8:	4413      	add	r3, r2
    f8ea:	3304      	adds	r3, #4
    f8ec:	681b      	ldr	r3, [r3, #0]
    f8ee:	4618      	mov	r0, r3
    f8f0:	69b9      	ldr	r1, [r7, #24]
    f8f2:	f003 fbb5 	bl	13060 <__aeabi_fsub>
    f8f6:	4603      	mov	r3, r0
    f8f8:	613b      	str	r3, [r7, #16]
  float leg2 = leg_x * leg_x + leg_y * leg_y;
    f8fa:	6978      	ldr	r0, [r7, #20]
    f8fc:	6979      	ldr	r1, [r7, #20]
    f8fe:	f003 fcb9 	bl	13274 <__aeabi_fmul>
    f902:	4603      	mov	r3, r0
    f904:	461c      	mov	r4, r3
    f906:	6938      	ldr	r0, [r7, #16]
    f908:	6939      	ldr	r1, [r7, #16]
    f90a:	f003 fcb3 	bl	13274 <__aeabi_fmul>
    f90e:	4603      	mov	r3, r0
    f910:	4620      	mov	r0, r4
    f912:	4619      	mov	r1, r3
    f914:	f003 fba6 	bl	13064 <__addsf3>
    f918:	4603      	mov	r3, r0
    f91a:	60fb      	str	r3, [r7, #12]
  alpha = ((estimator_x - last_wp_x) * leg_x + (estimator_y - last_wp_y) * leg_y) / leg2;
    f91c:	f64b 33dc 	movw	r3, #48092	; 0xbbdc
    f920:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f924:	681b      	ldr	r3, [r3, #0]
    f926:	4618      	mov	r0, r3
    f928:	69f9      	ldr	r1, [r7, #28]
    f92a:	f003 fb99 	bl	13060 <__aeabi_fsub>
    f92e:	4603      	mov	r3, r0
    f930:	4618      	mov	r0, r3
    f932:	6979      	ldr	r1, [r7, #20]
    f934:	f003 fc9e 	bl	13274 <__aeabi_fmul>
    f938:	4603      	mov	r3, r0
    f93a:	461c      	mov	r4, r3
    f93c:	f64b 33e0 	movw	r3, #48096	; 0xbbe0
    f940:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f944:	681b      	ldr	r3, [r3, #0]
    f946:	4618      	mov	r0, r3
    f948:	69b9      	ldr	r1, [r7, #24]
    f94a:	f003 fb89 	bl	13060 <__aeabi_fsub>
    f94e:	4603      	mov	r3, r0
    f950:	4618      	mov	r0, r3
    f952:	6939      	ldr	r1, [r7, #16]
    f954:	f003 fc8e 	bl	13274 <__aeabi_fmul>
    f958:	4603      	mov	r3, r0
    f95a:	4620      	mov	r0, r4
    f95c:	4619      	mov	r1, r3
    f95e:	f003 fb81 	bl	13064 <__addsf3>
    f962:	4603      	mov	r3, r0
    f964:	4618      	mov	r0, r3
    f966:	68f9      	ldr	r1, [r7, #12]
    f968:	f003 fd38 	bl	133dc <__aeabi_fdiv>
    f96c:	4603      	mov	r3, r0
    f96e:	461a      	mov	r2, r3
    f970:	f64b 13c4 	movw	r3, #47556	; 0xb9c4
    f974:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f978:	601a      	str	r2, [r3, #0]
  alpha = Max(alpha, 0.);
    f97a:	f64b 13c4 	movw	r3, #47556	; 0xb9c4
    f97e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f982:	681b      	ldr	r3, [r3, #0]
    f984:	4618      	mov	r0, r3
    f986:	f04f 0100 	mov.w	r1, #0
    f98a:	f003 fe25 	bl	135d8 <__aeabi_fcmpge>
    f98e:	4603      	mov	r3, r0
    f990:	2b00      	cmp	r3, #0
    f992:	d005      	beq.n	f9a0 <route_to+0x12c>
    f994:	f64b 13c4 	movw	r3, #47556	; 0xb9c4
    f998:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f99c:	681a      	ldr	r2, [r3, #0]
    f99e:	e001      	b.n	f9a4 <route_to+0x130>
    f9a0:	f04f 0200 	mov.w	r2, #0
    f9a4:	f64b 13c4 	movw	r3, #47556	; 0xb9c4
    f9a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9ac:	601a      	str	r2, [r3, #0]
  leg = sqrt(leg2);
    f9ae:	68f8      	ldr	r0, [r7, #12]
    f9b0:	f002 ffcc 	bl	1294c <__aeabi_f2d>
    f9b4:	4602      	mov	r2, r0
    f9b6:	460b      	mov	r3, r1
    f9b8:	4610      	mov	r0, r2
    f9ba:	4619      	mov	r1, r3
    f9bc:	f001 f9f4 	bl	10da8 <pp_sqrt>
    f9c0:	4602      	mov	r2, r0
    f9c2:	460b      	mov	r3, r1
    f9c4:	4610      	mov	r0, r2
    f9c6:	4619      	mov	r1, r3
    f9c8:	f003 faf6 	bl	12fb8 <__aeabi_d2f>
    f9cc:	4602      	mov	r2, r0
    f9ce:	f64b 13c8 	movw	r3, #47560	; 0xb9c8
    f9d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9d6:	601a      	str	r2, [r3, #0]
  alpha += Max(carrot / leg, 0.); /* carrot computed in approaching() */
    f9d8:	f64b 13c4 	movw	r3, #47556	; 0xb9c4
    f9dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9e0:	681b      	ldr	r3, [r3, #0]
    f9e2:	4618      	mov	r0, r3
    f9e4:	f002 ffb2 	bl	1294c <__aeabi_f2d>
    f9e8:	4604      	mov	r4, r0
    f9ea:	460d      	mov	r5, r1
    f9ec:	f64b 13c0 	movw	r3, #47552	; 0xb9c0
    f9f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9f4:	681a      	ldr	r2, [r3, #0]
    f9f6:	f64b 13c8 	movw	r3, #47560	; 0xb9c8
    f9fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9fe:	681b      	ldr	r3, [r3, #0]
    fa00:	4610      	mov	r0, r2
    fa02:	4619      	mov	r1, r3
    fa04:	f003 fcea 	bl	133dc <__aeabi_fdiv>
    fa08:	4603      	mov	r3, r0
    fa0a:	4618      	mov	r0, r3
    fa0c:	f04f 0100 	mov.w	r1, #0
    fa10:	f003 fde2 	bl	135d8 <__aeabi_fcmpge>
    fa14:	4603      	mov	r3, r0
    fa16:	2b00      	cmp	r3, #0
    fa18:	d014      	beq.n	fa44 <route_to+0x1d0>
    fa1a:	f64b 13c0 	movw	r3, #47552	; 0xb9c0
    fa1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa22:	681a      	ldr	r2, [r3, #0]
    fa24:	f64b 13c8 	movw	r3, #47560	; 0xb9c8
    fa28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa2c:	681b      	ldr	r3, [r3, #0]
    fa2e:	4610      	mov	r0, r2
    fa30:	4619      	mov	r1, r3
    fa32:	f003 fcd3 	bl	133dc <__aeabi_fdiv>
    fa36:	4603      	mov	r3, r0
    fa38:	4618      	mov	r0, r3
    fa3a:	f002 ff87 	bl	1294c <__aeabi_f2d>
    fa3e:	4602      	mov	r2, r0
    fa40:	460b      	mov	r3, r1
    fa42:	e003      	b.n	fa4c <route_to+0x1d8>
    fa44:	f04f 0200 	mov.w	r2, #0
    fa48:	f04f 0300 	mov.w	r3, #0
    fa4c:	4620      	mov	r0, r4
    fa4e:	4629      	mov	r1, r5
    fa50:	f002 fe1e 	bl	12690 <__adddf3>
    fa54:	4602      	mov	r2, r0
    fa56:	460b      	mov	r3, r1
    fa58:	4610      	mov	r0, r2
    fa5a:	4619      	mov	r1, r3
    fa5c:	f003 faac 	bl	12fb8 <__aeabi_d2f>
    fa60:	4602      	mov	r2, r0
    fa62:	f64b 13c4 	movw	r3, #47556	; 0xb9c4
    fa66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa6a:	601a      	str	r2, [r3, #0]
  alpha = Min(1., alpha);
    fa6c:	f64b 13c4 	movw	r3, #47556	; 0xb9c4
    fa70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa74:	681b      	ldr	r3, [r3, #0]
    fa76:	4618      	mov	r0, r3
    fa78:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    fa7c:	f003 fdac 	bl	135d8 <__aeabi_fcmpge>
    fa80:	4603      	mov	r3, r0
    fa82:	2b00      	cmp	r3, #0
    fa84:	d002      	beq.n	fa8c <route_to+0x218>
    fa86:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    fa8a:	e004      	b.n	fa96 <route_to+0x222>
    fa8c:	f64b 13c4 	movw	r3, #47556	; 0xb9c4
    fa90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa94:	681a      	ldr	r2, [r3, #0]
    fa96:	f64b 13c4 	movw	r3, #47556	; 0xb9c4
    fa9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa9e:	601a      	str	r2, [r3, #0]
  fly_to_xy(last_wp_x + alpha*leg_x, last_wp_y + alpha*leg_y);
    faa0:	f64b 13c4 	movw	r3, #47556	; 0xb9c4
    faa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    faa8:	681b      	ldr	r3, [r3, #0]
    faaa:	4618      	mov	r0, r3
    faac:	6979      	ldr	r1, [r7, #20]
    faae:	f003 fbe1 	bl	13274 <__aeabi_fmul>
    fab2:	4603      	mov	r3, r0
    fab4:	4618      	mov	r0, r3
    fab6:	69f9      	ldr	r1, [r7, #28]
    fab8:	f003 fad4 	bl	13064 <__addsf3>
    fabc:	4603      	mov	r3, r0
    fabe:	461c      	mov	r4, r3
    fac0:	f64b 13c4 	movw	r3, #47556	; 0xb9c4
    fac4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fac8:	681b      	ldr	r3, [r3, #0]
    faca:	4618      	mov	r0, r3
    facc:	6939      	ldr	r1, [r7, #16]
    face:	f003 fbd1 	bl	13274 <__aeabi_fmul>
    fad2:	4603      	mov	r3, r0
    fad4:	4618      	mov	r0, r3
    fad6:	69b9      	ldr	r1, [r7, #24]
    fad8:	f003 fac4 	bl	13064 <__addsf3>
    fadc:	4603      	mov	r3, r0
    fade:	4620      	mov	r0, r4
    fae0:	4619      	mov	r1, r3
    fae2:	f7ff fe55 	bl	f790 <fly_to_xy>
}
    fae6:	3720      	adds	r7, #32
    fae8:	46bd      	mov	sp, r7
    faea:	bdb0      	pop	{r4, r5, r7, pc}

0000faec <compute_dist2_to_home>:
  float last_alt = waypoints[_last_wp].a;
  desired_altitude = last_alt + alpha * (waypoints[wp].a - last_alt);
  pre_climb = NOMINAL_AIRSPEED * (waypoints[wp].a - last_alt) / leg;
}*/

static inline void compute_dist2_to_home(void) {
    faec:	b590      	push	{r4, r7, lr}
    faee:	b083      	sub	sp, #12
    faf0:	af00      	add	r7, sp, #0
  float ph_x = waypoints[WP_HOME].x - estimator_x;
    faf2:	f240 1340 	movw	r3, #320	; 0x140
    faf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fafa:	681a      	ldr	r2, [r3, #0]
    fafc:	f64b 33dc 	movw	r3, #48092	; 0xbbdc
    fb00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb04:	681b      	ldr	r3, [r3, #0]
    fb06:	4610      	mov	r0, r2
    fb08:	4619      	mov	r1, r3
    fb0a:	f003 faa9 	bl	13060 <__aeabi_fsub>
    fb0e:	4603      	mov	r3, r0
    fb10:	607b      	str	r3, [r7, #4]
  float ph_y = waypoints[WP_HOME].y - estimator_y;
    fb12:	f240 1340 	movw	r3, #320	; 0x140
    fb16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb1a:	685a      	ldr	r2, [r3, #4]
    fb1c:	f64b 33e0 	movw	r3, #48096	; 0xbbe0
    fb20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb24:	681b      	ldr	r3, [r3, #0]
    fb26:	4610      	mov	r0, r2
    fb28:	4619      	mov	r1, r3
    fb2a:	f003 fa99 	bl	13060 <__aeabi_fsub>
    fb2e:	4603      	mov	r3, r0
    fb30:	603b      	str	r3, [r7, #0]
  dist2_to_home = ph_x*ph_x + ph_y *ph_y;
    fb32:	6878      	ldr	r0, [r7, #4]
    fb34:	6879      	ldr	r1, [r7, #4]
    fb36:	f003 fb9d 	bl	13274 <__aeabi_fmul>
    fb3a:	4603      	mov	r3, r0
    fb3c:	461c      	mov	r4, r3
    fb3e:	6838      	ldr	r0, [r7, #0]
    fb40:	6839      	ldr	r1, [r7, #0]
    fb42:	f003 fb97 	bl	13274 <__aeabi_fmul>
    fb46:	4603      	mov	r3, r0
    fb48:	4620      	mov	r0, r4
    fb4a:	4619      	mov	r1, r3
    fb4c:	f003 fa8a 	bl	13064 <__addsf3>
    fb50:	4603      	mov	r3, r0
    fb52:	461a      	mov	r2, r3
    fb54:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    fb58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb5c:	601a      	str	r2, [r3, #0]
  too_far_from_home = dist2_to_home > (MAX_DIST_FROM_HOME*MAX_DIST_FROM_HOME);
    fb5e:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    fb62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb66:	681b      	ldr	r3, [r3, #0]
    fb68:	2201      	movs	r2, #1
    fb6a:	4614      	mov	r4, r2
    fb6c:	4618      	mov	r0, r3
    fb6e:	f44f 5110 	mov.w	r1, #9216	; 0x2400
    fb72:	f6c4 0174 	movt	r1, #18548	; 0x4874
    fb76:	f003 fd39 	bl	135ec <__aeabi_fcmpgt>
    fb7a:	4603      	mov	r3, r0
    fb7c:	2b00      	cmp	r3, #0
    fb7e:	d101      	bne.n	fb84 <compute_dist2_to_home+0x98>
    fb80:	2300      	movs	r3, #0
    fb82:	461c      	mov	r4, r3
    fb84:	b2e3      	uxtb	r3, r4
    fb86:	461a      	mov	r2, r3
    fb88:	f64b 13bc 	movw	r3, #47548	; 0xb9bc
    fb8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb90:	701a      	strb	r2, [r3, #0]
}
    fb92:	370c      	adds	r7, #12
    fb94:	46bd      	mov	sp, r7
    fb96:	bd90      	pop	{r4, r7, pc}

0000fb98 <nav_home>:

void nav_home(void) {
    fb98:	b580      	push	{r7, lr}
    fb9a:	af00      	add	r7, sp, #0
  //Circle(WP_HOME, 50); /* FIXME: radius should be defined elsewhere */
  nav_pitch = 0.; /* Nominal speed */ 
    fb9c:	f64b 13ac 	movw	r3, #47532	; 0xb9ac
    fba0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fba4:	f04f 0200 	mov.w	r2, #0
    fba8:	601a      	str	r2, [r3, #0]
  vertical_mode = VERTICAL_MODE_AUTO_ALT;
    fbaa:	f24b 630d 	movw	r3, #46605	; 0xb60d
    fbae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbb2:	2203      	movs	r2, #3
    fbb4:	701a      	strb	r2, [r3, #0]
  desired_altitude = GROUND_ALT+50;
    fbb6:	f240 133c 	movw	r3, #316	; 0x13c
    fbba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbbe:	f04f 0200 	mov.w	r2, #0
    fbc2:	f2c4 322f 	movt	r2, #17199	; 0x432f
    fbc6:	601a      	str	r2, [r3, #0]
  compute_dist2_to_home();
    fbc8:	f7ff ff90 	bl	faec <compute_dist2_to_home>
  dist2_to_wp = dist2_to_home;
    fbcc:	f64b 13b8 	movw	r3, #47544	; 0xb9b8
    fbd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbd4:	681a      	ldr	r2, [r3, #0]
    fbd6:	f64b 13b4 	movw	r3, #47540	; 0xb9b4
    fbda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbde:	601a      	str	r2, [r3, #0]
}
    fbe0:	bd80      	pop	{r7, pc}
    fbe2:	bf00      	nop

0000fbe4 <nav_update>:

void nav_update(void) {
    fbe4:	b580      	push	{r7, lr}
    fbe6:	af00      	add	r7, sp, #0
  compute_dist2_to_home();
    fbe8:	f7ff ff80 	bl	faec <compute_dist2_to_home>

  auto_nav();
    fbec:	f7fd fc0c 	bl	d408 <auto_nav>
}
    fbf0:	bd80      	pop	{r7, pc}
    fbf2:	bf00      	nop

0000fbf4 <nav_init>:


void nav_init(void) {
    fbf4:	b480      	push	{r7}
    fbf6:	af00      	add	r7, sp, #0
  nav_block = 0;
    fbf8:	f64b 1381 	movw	r3, #47489	; 0xb981
    fbfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc00:	2200      	movs	r2, #0
    fc02:	701a      	strb	r2, [r3, #0]
  nav_stage = 0;
    fc04:	f64b 1380 	movw	r3, #47488	; 0xb980
    fc08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc0c:	2200      	movs	r2, #0
    fc0e:	701a      	strb	r2, [r3, #0]
}
    fc10:	46bd      	mov	sp, r7
    fc12:	f85d 7b04 	ldr.w	r7, [sp], #4
    fc16:	4770      	bx	lr

0000fc18 <uart0_transmit>:

static uint8_t           tx_head1; /* next free in buf */
static volatile uint8_t  tx_tail1; /* next char to send */
static uint8_t           tx_buf1[ TX_BUF_SIZE ];

void uart0_transmit( unsigned char data ) {
    fc18:	b480      	push	{r7}
    fc1a:	b083      	sub	sp, #12
    fc1c:	af00      	add	r7, sp, #0
    fc1e:	4603      	mov	r3, r0
    fc20:	71fb      	strb	r3, [r7, #7]
  if (UCSR0B & _BV(TXCIE)) {
    fc22:	f248 030a 	movw	r3, #32778	; 0x800a
    fc26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc2a:	781b      	ldrb	r3, [r3, #0]
    fc2c:	b2db      	uxtb	r3, r3
    fc2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    fc32:	2b00      	cmp	r3, #0
    fc34:	d028      	beq.n	fc88 <uart0_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail0 == tx_head0 + 1) { /* BUF_SIZE = 256 */
    fc36:	f64b 13d5 	movw	r3, #47573	; 0xb9d5
    fc3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc3e:	781b      	ldrb	r3, [r3, #0]
    fc40:	b2db      	uxtb	r3, r3
    fc42:	461a      	mov	r2, r3
    fc44:	f64b 13d4 	movw	r3, #47572	; 0xb9d4
    fc48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc4c:	781b      	ldrb	r3, [r3, #0]
    fc4e:	3301      	adds	r3, #1
    fc50:	429a      	cmp	r2, r3
    fc52:	d100      	bne.n	fc56 <uart0_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
    fc54:	e02c      	b.n	fcb0 <uart0_transmit+0x98>
    }
    tx_buf0[tx_head0] = data;
    fc56:	f64b 13d4 	movw	r3, #47572	; 0xb9d4
    fc5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc5e:	781b      	ldrb	r3, [r3, #0]
    fc60:	461a      	mov	r2, r3
    fc62:	f64b 13d8 	movw	r3, #47576	; 0xb9d8
    fc66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc6a:	79f9      	ldrb	r1, [r7, #7]
    fc6c:	5499      	strb	r1, [r3, r2]
    tx_head0++; /* BUF_SIZE = 256 */
    fc6e:	f64b 13d4 	movw	r3, #47572	; 0xb9d4
    fc72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc76:	781b      	ldrb	r3, [r3, #0]
    fc78:	3301      	adds	r3, #1
    fc7a:	b2da      	uxtb	r2, r3
    fc7c:	f64b 13d4 	movw	r3, #47572	; 0xb9d4
    fc80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc84:	701a      	strb	r2, [r3, #0]
    fc86:	e013      	b.n	fcb0 <uart0_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR0 = data;
    fc88:	f248 030c 	movw	r3, #32780	; 0x800c
    fc8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc90:	79fa      	ldrb	r2, [r7, #7]
    fc92:	701a      	strb	r2, [r3, #0]
    sbi(UCSR0B, TXCIE);
    fc94:	f248 030a 	movw	r3, #32778	; 0x800a
    fc98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc9c:	f248 020a 	movw	r2, #32778	; 0x800a
    fca0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fca4:	7812      	ldrb	r2, [r2, #0]
    fca6:	b2d2      	uxtb	r2, r2
    fca8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    fcac:	b2d2      	uxtb	r2, r2
    fcae:	701a      	strb	r2, [r3, #0]
  }
}
    fcb0:	370c      	adds	r7, #12
    fcb2:	46bd      	mov	sp, r7
    fcb4:	f85d 7b04 	ldr.w	r7, [sp], #4
    fcb8:	4770      	bx	lr
    fcba:	bf00      	nop

0000fcbc <uart1_transmit>:

void uart1_transmit( unsigned char data ) {
    fcbc:	b480      	push	{r7}
    fcbe:	b083      	sub	sp, #12
    fcc0:	af00      	add	r7, sp, #0
    fcc2:	4603      	mov	r3, r0
    fcc4:	71fb      	strb	r3, [r7, #7]
  if (UCSR1B & _BV(TXCIE)) {
    fcc6:	f248 039a 	movw	r3, #32922	; 0x809a
    fcca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fcce:	781b      	ldrb	r3, [r3, #0]
    fcd0:	b2db      	uxtb	r3, r3
    fcd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
    fcd6:	2b00      	cmp	r3, #0
    fcd8:	d028      	beq.n	fd2c <uart1_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail1 == tx_head1 + 1) { /* BUF_SIZE = 256 */
    fcda:	f64b 23d9 	movw	r3, #47833	; 0xbad9
    fcde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fce2:	781b      	ldrb	r3, [r3, #0]
    fce4:	b2db      	uxtb	r3, r3
    fce6:	461a      	mov	r2, r3
    fce8:	f64b 23d8 	movw	r3, #47832	; 0xbad8
    fcec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcf0:	781b      	ldrb	r3, [r3, #0]
    fcf2:	3301      	adds	r3, #1
    fcf4:	429a      	cmp	r2, r3
    fcf6:	d100      	bne.n	fcfa <uart1_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
    fcf8:	e02c      	b.n	fd54 <uart1_transmit+0x98>
    }
    tx_buf1[tx_head1] = data;
    fcfa:	f64b 23d8 	movw	r3, #47832	; 0xbad8
    fcfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd02:	781b      	ldrb	r3, [r3, #0]
    fd04:	461a      	mov	r2, r3
    fd06:	f64b 23dc 	movw	r3, #47836	; 0xbadc
    fd0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd0e:	79f9      	ldrb	r1, [r7, #7]
    fd10:	5499      	strb	r1, [r3, r2]
    tx_head1++; /* BUF_SIZE = 256 */
    fd12:	f64b 23d8 	movw	r3, #47832	; 0xbad8
    fd16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd1a:	781b      	ldrb	r3, [r3, #0]
    fd1c:	3301      	adds	r3, #1
    fd1e:	b2da      	uxtb	r2, r3
    fd20:	f64b 23d8 	movw	r3, #47832	; 0xbad8
    fd24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd28:	701a      	strb	r2, [r3, #0]
    fd2a:	e013      	b.n	fd54 <uart1_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR1 = data;
    fd2c:	f248 039c 	movw	r3, #32924	; 0x809c
    fd30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd34:	79fa      	ldrb	r2, [r7, #7]
    fd36:	701a      	strb	r2, [r3, #0]
    sbi(UCSR1B, TXCIE);
    fd38:	f248 039a 	movw	r3, #32922	; 0x809a
    fd3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd40:	f248 029a 	movw	r2, #32922	; 0x809a
    fd44:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fd48:	7812      	ldrb	r2, [r2, #0]
    fd4a:	b2d2      	uxtb	r2, r2
    fd4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    fd50:	b2d2      	uxtb	r2, r2
    fd52:	701a      	strb	r2, [r3, #0]
  }
}
    fd54:	370c      	adds	r7, #12
    fd56:	46bd      	mov	sp, r7
    fd58:	f85d 7b04 	ldr.w	r7, [sp], #4
    fd5c:	4770      	bx	lr
    fd5e:	bf00      	nop

0000fd60 <uart0_print_string>:


void uart0_print_string(const uint8_t* s) {
    fd60:	b580      	push	{r7, lr}
    fd62:	b084      	sub	sp, #16
    fd64:	af00      	add	r7, sp, #0
    fd66:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
    fd68:	2300      	movs	r3, #0
    fd6a:	73fb      	strb	r3, [r7, #15]
  while (s[i]) {
    fd6c:	e009      	b.n	fd82 <uart0_print_string+0x22>
    uart0_transmit(s[i]);
    fd6e:	7bfb      	ldrb	r3, [r7, #15]
    fd70:	687a      	ldr	r2, [r7, #4]
    fd72:	4413      	add	r3, r2
    fd74:	781b      	ldrb	r3, [r3, #0]
    fd76:	4618      	mov	r0, r3
    fd78:	f7ff ff4e 	bl	fc18 <uart0_transmit>
    i++;
    fd7c:	7bfb      	ldrb	r3, [r7, #15]
    fd7e:	3301      	adds	r3, #1
    fd80:	73fb      	strb	r3, [r7, #15]
}


void uart0_print_string(const uint8_t* s) {
  uint8_t i = 0;
  while (s[i]) {
    fd82:	7bfb      	ldrb	r3, [r7, #15]
    fd84:	687a      	ldr	r2, [r7, #4]
    fd86:	4413      	add	r3, r2
    fd88:	781b      	ldrb	r3, [r3, #0]
    fd8a:	2b00      	cmp	r3, #0
    fd8c:	d1ef      	bne.n	fd6e <uart0_print_string+0xe>
    uart0_transmit(s[i]);
    i++;
  }
}
    fd8e:	3710      	adds	r7, #16
    fd90:	46bd      	mov	sp, r7
    fd92:	bd80      	pop	{r7, pc}

0000fd94 <uart0_print_hex>:

void uart0_print_hex(const uint8_t c) {
    fd94:	b590      	push	{r4, r7, lr}
    fd96:	b089      	sub	sp, #36	; 0x24
    fd98:	af00      	add	r7, sp, #0
    fd9a:	4603      	mov	r3, r0
    fd9c:	71fb      	strb	r3, [r7, #7]
  const uint8_t hex[16] = { '0', '1', '2', '3', '4', '5', '6', '7', 
    fd9e:	f643 03a8 	movw	r3, #14504	; 0x38a8
    fda2:	f2c0 0301 	movt	r3, #1
    fda6:	f107 040c 	add.w	r4, r7, #12
    fdaa:	6818      	ldr	r0, [r3, #0]
    fdac:	6859      	ldr	r1, [r3, #4]
    fdae:	689a      	ldr	r2, [r3, #8]
    fdb0:	68db      	ldr	r3, [r3, #12]
    fdb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
  uint8_t high = (c & 0xF0)>>4;
    fdb4:	79fb      	ldrb	r3, [r7, #7]
    fdb6:	091b      	lsrs	r3, r3, #4
    fdb8:	77fb      	strb	r3, [r7, #31]
  uint8_t low  = c & 0x0F;
    fdba:	79fb      	ldrb	r3, [r7, #7]
    fdbc:	f003 030f 	and.w	r3, r3, #15
    fdc0:	77bb      	strb	r3, [r7, #30]
    /*
    *Added by SunnyBeike
    * */
    high = 15;
    fdc2:	230f      	movs	r3, #15
    fdc4:	77fb      	strb	r3, [r7, #31]
    low = 15;
    fdc6:	230f      	movs	r3, #15
    fdc8:	77bb      	strb	r3, [r7, #30]
    /*
    *End
    * */
    uart0_transmit(hex[high]);
    fdca:	7ffb      	ldrb	r3, [r7, #31]
    fdcc:	f107 0220 	add.w	r2, r7, #32
    fdd0:	4413      	add	r3, r2
    fdd2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
    fdd6:	4618      	mov	r0, r3
    fdd8:	f7ff ff1e 	bl	fc18 <uart0_transmit>
  uart0_transmit(hex[low]);
    fddc:	7fbb      	ldrb	r3, [r7, #30]
    fdde:	f107 0220 	add.w	r2, r7, #32
    fde2:	4413      	add	r3, r2
    fde4:	f813 3c14 	ldrb.w	r3, [r3, #-20]
    fde8:	4618      	mov	r0, r3
    fdea:	f7ff ff15 	bl	fc18 <uart0_transmit>
}
    fdee:	3724      	adds	r7, #36	; 0x24
    fdf0:	46bd      	mov	sp, r7
    fdf2:	bd90      	pop	{r4, r7, pc}

0000fdf4 <__vector_20>:


SIGNAL(SIG_UART0_TRANS) {
    fdf4:	b480      	push	{r7}
    fdf6:	af00      	add	r7, sp, #0
  if (tx_head0 == tx_tail0) {
    fdf8:	f64b 13d4 	movw	r3, #47572	; 0xb9d4
    fdfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe00:	781a      	ldrb	r2, [r3, #0]
    fe02:	f64b 13d5 	movw	r3, #47573	; 0xb9d5
    fe06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe0a:	781b      	ldrb	r3, [r3, #0]
    fe0c:	b2db      	uxtb	r3, r3
    fe0e:	429a      	cmp	r2, r3
    fe10:	d10e      	bne.n	fe30 <__vector_20+0x3c>
    /* Nothing more to send */
    cbi(UCSR0B, TXCIE); /* disable interrupt */
    fe12:	f248 030a 	movw	r3, #32778	; 0x800a
    fe16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe1a:	f248 020a 	movw	r2, #32778	; 0x800a
    fe1e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fe22:	7812      	ldrb	r2, [r2, #0]
    fe24:	b2d2      	uxtb	r2, r2
    fe26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    fe2a:	b2d2      	uxtb	r2, r2
    fe2c:	701a      	strb	r2, [r3, #0]
    fe2e:	e01d      	b.n	fe6c <__vector_20+0x78>
  } else {
    UDR0 = tx_buf0[tx_tail0];
    fe30:	f248 030c 	movw	r3, #32780	; 0x800c
    fe34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe38:	f64b 12d5 	movw	r2, #47573	; 0xb9d5
    fe3c:	f2c2 0204 	movt	r2, #8196	; 0x2004
    fe40:	7812      	ldrb	r2, [r2, #0]
    fe42:	b2d2      	uxtb	r2, r2
    fe44:	4611      	mov	r1, r2
    fe46:	f64b 12d8 	movw	r2, #47576	; 0xb9d8
    fe4a:	f2c2 0204 	movt	r2, #8196	; 0x2004
    fe4e:	5c52      	ldrb	r2, [r2, r1]
    fe50:	701a      	strb	r2, [r3, #0]
    tx_tail0++; /* warning tx_buf_len is 256 */
    fe52:	f64b 13d5 	movw	r3, #47573	; 0xb9d5
    fe56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe5a:	781b      	ldrb	r3, [r3, #0]
    fe5c:	b2db      	uxtb	r3, r3
    fe5e:	3301      	adds	r3, #1
    fe60:	b2da      	uxtb	r2, r3
    fe62:	f64b 13d5 	movw	r3, #47573	; 0xb9d5
    fe66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe6a:	701a      	strb	r2, [r3, #0]
  }
}
    fe6c:	46bd      	mov	sp, r7
    fe6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    fe72:	4770      	bx	lr

0000fe74 <__vector_32>:

SIGNAL(SIG_UART1_TRANS) {
    fe74:	b480      	push	{r7}
    fe76:	af00      	add	r7, sp, #0
  if (tx_head1 == tx_tail1) {
    fe78:	f64b 23d8 	movw	r3, #47832	; 0xbad8
    fe7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe80:	781a      	ldrb	r2, [r3, #0]
    fe82:	f64b 23d9 	movw	r3, #47833	; 0xbad9
    fe86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe8a:	781b      	ldrb	r3, [r3, #0]
    fe8c:	b2db      	uxtb	r3, r3
    fe8e:	429a      	cmp	r2, r3
    fe90:	d10e      	bne.n	feb0 <__vector_32+0x3c>
    /* Nothing more to send */
    cbi(UCSR1B, TXCIE); /* disable interrupt */
    fe92:	f248 039a 	movw	r3, #32922	; 0x809a
    fe96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe9a:	f248 029a 	movw	r2, #32922	; 0x809a
    fe9e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fea2:	7812      	ldrb	r2, [r2, #0]
    fea4:	b2d2      	uxtb	r2, r2
    fea6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    feaa:	b2d2      	uxtb	r2, r2
    feac:	701a      	strb	r2, [r3, #0]
    feae:	e01d      	b.n	feec <__vector_32+0x78>
  } else {
    UDR1 = tx_buf1[tx_tail1];
    feb0:	f248 039c 	movw	r3, #32924	; 0x809c
    feb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    feb8:	f64b 22d9 	movw	r2, #47833	; 0xbad9
    febc:	f2c2 0204 	movt	r2, #8196	; 0x2004
    fec0:	7812      	ldrb	r2, [r2, #0]
    fec2:	b2d2      	uxtb	r2, r2
    fec4:	4611      	mov	r1, r2
    fec6:	f64b 22dc 	movw	r2, #47836	; 0xbadc
    feca:	f2c2 0204 	movt	r2, #8196	; 0x2004
    fece:	5c52      	ldrb	r2, [r2, r1]
    fed0:	701a      	strb	r2, [r3, #0]
    tx_tail1++; /* warning tx_buf_len is 256 */
    fed2:	f64b 23d9 	movw	r3, #47833	; 0xbad9
    fed6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    feda:	781b      	ldrb	r3, [r3, #0]
    fedc:	b2db      	uxtb	r3, r3
    fede:	3301      	adds	r3, #1
    fee0:	b2da      	uxtb	r2, r3
    fee2:	f64b 23d9 	movw	r3, #47833	; 0xbad9
    fee6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    feea:	701a      	strb	r2, [r3, #0]
  }
}
    feec:	46bd      	mov	sp, r7
    feee:	f85d 7b04 	ldr.w	r7, [sp], #4
    fef2:	4770      	bx	lr

0000fef4 <uart0_init>:

void uart0_init( void ) {
    fef4:	b480      	push	{r7}
    fef6:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRR0H = 0; 
    fef8:	f248 0390 	movw	r3, #32912	; 0x8090
    fefc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff00:	2200      	movs	r2, #0
    ff02:	701a      	strb	r2, [r3, #0]
  UBRR0L = 25; // 38.4
    ff04:	f248 0309 	movw	r3, #32777	; 0x8009
    ff08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff0c:	2219      	movs	r2, #25
    ff0e:	701a      	strb	r2, [r3, #0]
  // UBRR0L = 103; //9600
  /* single speed */ 
  UCSR0A = 0; 
    ff10:	f248 030b 	movw	r3, #32779	; 0x800b
    ff14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff18:	2200      	movs	r2, #0
    ff1a:	701a      	strb	r2, [r3, #0]
  /* Enable receiver and transmitter */ 
  UCSR0B = _BV(RXEN) | _BV(TXEN);
    ff1c:	f248 030a 	movw	r3, #32778	; 0x800a
    ff20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff24:	2218      	movs	r2, #24
    ff26:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSR0C = _BV(UCSZ1) | _BV(UCSZ0);
    ff28:	f248 0395 	movw	r3, #32917	; 0x8095
    ff2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff30:	2206      	movs	r2, #6
    ff32:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi(UCSR0B, RXCIE ); 
    ff34:	f248 030a 	movw	r3, #32778	; 0x800a
    ff38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff3c:	f248 020a 	movw	r2, #32778	; 0x800a
    ff40:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ff44:	7812      	ldrb	r2, [r2, #0]
    ff46:	b2d2      	uxtb	r2, r2
    ff48:	f062 027f 	orn	r2, r2, #127	; 0x7f
    ff4c:	b2d2      	uxtb	r2, r2
    ff4e:	701a      	strb	r2, [r3, #0]
}
    ff50:	46bd      	mov	sp, r7
    ff52:	f85d 7b04 	ldr.w	r7, [sp], #4
    ff56:	4770      	bx	lr

0000ff58 <uart1_init>:

void uart1_init( void ) {
    ff58:	b480      	push	{r7}
    ff5a:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRR1H = 0; 
    ff5c:	f248 0398 	movw	r3, #32920	; 0x8098
    ff60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff64:	2200      	movs	r2, #0
    ff66:	701a      	strb	r2, [r3, #0]
  UBRR1L = 25; // 38.4
    ff68:	f248 0399 	movw	r3, #32921	; 0x8099
    ff6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff70:	2219      	movs	r2, #25
    ff72:	701a      	strb	r2, [r3, #0]
  // UBRR1L = 103; //9600


  /* single speed */ 
  UCSR1A = 0; 
    ff74:	f248 039b 	movw	r3, #32923	; 0x809b
    ff78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff7c:	2200      	movs	r2, #0
    ff7e:	701a      	strb	r2, [r3, #0]
  /* Enable receiver and transmitter */ 
  UCSR1B = _BV(RXEN) | _BV(TXEN);
    ff80:	f248 039a 	movw	r3, #32922	; 0x809a
    ff84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff88:	2218      	movs	r2, #24
    ff8a:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSR1C = _BV(UCSZ1) | _BV(UCSZ0);
    ff8c:	f248 039d 	movw	r3, #32925	; 0x809d
    ff90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff94:	2206      	movs	r2, #6
    ff96:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi(UCSR1B, RXCIE ); 
    ff98:	f248 039a 	movw	r3, #32922	; 0x809a
    ff9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffa0:	f248 029a 	movw	r2, #32922	; 0x809a
    ffa4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ffa8:	7812      	ldrb	r2, [r2, #0]
    ffaa:	b2d2      	uxtb	r2, r2
    ffac:	f062 027f 	orn	r2, r2, #127	; 0x7f
    ffb0:	b2d2      	uxtb	r2, r2
    ffb2:	701a      	strb	r2, [r3, #0]
}
    ffb4:	46bd      	mov	sp, r7
    ffb6:	f85d 7b04 	ldr.w	r7, [sp], #4
    ffba:	4770      	bx	lr
    ffbc:	0000      	movs	r0, r0
	...

0000ffc0 <estimator_init>:
  estimator_theta_dot = theta_dot; \
}

inline void estimator_update_lls( void );

void estimator_init( void ) {
    ffc0:	b480      	push	{r7}
    ffc2:	af00      	add	r7, sp, #0

  EstimatorSetPos (0., 0., 0.);
    ffc4:	f64b 33dc 	movw	r3, #48092	; 0xbbdc
    ffc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffcc:	f04f 0200 	mov.w	r2, #0
    ffd0:	601a      	str	r2, [r3, #0]
    ffd2:	f64b 33e0 	movw	r3, #48096	; 0xbbe0
    ffd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffda:	f04f 0200 	mov.w	r2, #0
    ffde:	601a      	str	r2, [r3, #0]
    ffe0:	f64b 33e4 	movw	r3, #48100	; 0xbbe4
    ffe4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffe8:	f04f 0200 	mov.w	r2, #0
    ffec:	601a      	str	r2, [r3, #0]

  EstimatorSetAtt (0., 0., 0);
    ffee:	f64b 33e8 	movw	r3, #48104	; 0xbbe8
    fff2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fff6:	f04f 0200 	mov.w	r2, #0
    fffa:	601a      	str	r2, [r3, #0]
    fffc:	f64b 33ec 	movw	r3, #48108	; 0xbbec
   10000:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10004:	f04f 0200 	mov.w	r2, #0
   10008:	601a      	str	r2, [r3, #0]
   1000a:	f64b 33f0 	movw	r3, #48112	; 0xbbf0
   1000e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10012:	f04f 0200 	mov.w	r2, #0
   10016:	601a      	str	r2, [r3, #0]

  EstimatorSetSpeedPol ( 0., 0., 0.);
   10018:	f64b 4314 	movw	r3, #48148	; 0xbc14
   1001c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10020:	f04f 0200 	mov.w	r2, #0
   10024:	601a      	str	r2, [r3, #0]
   10026:	f64b 4318 	movw	r3, #48152	; 0xbc18
   1002a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1002e:	f04f 0200 	mov.w	r2, #0
   10032:	601a      	str	r2, [r3, #0]
   10034:	f64b 33fc 	movw	r3, #48124	; 0xbbfc
   10038:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1003c:	f04f 0200 	mov.w	r2, #0
   10040:	601a      	str	r2, [r3, #0]

  EstimatorSetRotSpeed (0., 0., 0.);
   10042:	f64b 4300 	movw	r3, #48128	; 0xbc00
   10046:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1004a:	f04f 0200 	mov.w	r2, #0
   1004e:	601a      	str	r2, [r3, #0]
   10050:	f64b 4304 	movw	r3, #48132	; 0xbc04
   10054:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10058:	f04f 0200 	mov.w	r2, #0
   1005c:	601a      	str	r2, [r3, #0]
   1005e:	f64b 4308 	movw	r3, #48136	; 0xbc08
   10062:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10066:	f04f 0200 	mov.w	r2, #0
   1006a:	601a      	str	r2, [r3, #0]

  estimator_flight_time = 0;
   1006c:	f64b 430c 	movw	r3, #48140	; 0xbc0c
   10070:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10074:	2200      	movs	r2, #0
   10076:	801a      	strh	r2, [r3, #0]

  estimator_rad_of_ir = ir_rad_of_ir;
   10078:	f240 1310 	movw	r3, #272	; 0x110
   1007c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10080:	681a      	ldr	r2, [r3, #0]
   10082:	f64b 431c 	movw	r3, #48156	; 0xbc1c
   10086:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1008a:	601a      	str	r2, [r3, #0]
}
   1008c:	46bd      	mov	sp, r7
   1008e:	f85d 7b04 	ldr.w	r7, [sp], #4
   10092:	4770      	bx	lr

00010094 <estimator_update_state_infrared>:

#define EstimatorIrGainIsCorrect() (TRUE)

void estimator_update_state_infrared( void ) {
   10094:	b580      	push	{r7, lr}
   10096:	b082      	sub	sp, #8
   10098:	af00      	add	r7, sp, #0
  float rad_of_ir = (ir_estim_mode == IR_ESTIM_MODE_ON && EstimatorIrGainIsCorrect()) ? 
   1009a:	f240 1304 	movw	r3, #260	; 0x104
   1009e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100a2:	781b      	ldrb	r3, [r3, #0]
    estimator_rad_of_ir : ir_rad_of_ir;
   100a4:	2b01      	cmp	r3, #1
   100a6:	d105      	bne.n	100b4 <estimator_update_state_infrared+0x20>
   100a8:	f64b 431c 	movw	r3, #48156	; 0xbc1c
   100ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100b0:	681b      	ldr	r3, [r3, #0]
   100b2:	e004      	b.n	100be <estimator_update_state_infrared+0x2a>
   100b4:	f240 1310 	movw	r3, #272	; 0x110
   100b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100bc:	681b      	ldr	r3, [r3, #0]
}

#define EstimatorIrGainIsCorrect() (TRUE)

void estimator_update_state_infrared( void ) {
  float rad_of_ir = (ir_estim_mode == IR_ESTIM_MODE_ON && EstimatorIrGainIsCorrect()) ? 
   100be:	607b      	str	r3, [r7, #4]
    estimator_rad_of_ir : ir_rad_of_ir;
  estimator_phi  = rad_of_ir * ir_roll;
   100c0:	f64b 03c8 	movw	r3, #47304	; 0xb8c8
   100c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100c8:	881b      	ldrh	r3, [r3, #0]
   100ca:	b21b      	sxth	r3, r3
   100cc:	4618      	mov	r0, r3
   100ce:	f003 f87d 	bl	131cc <__aeabi_i2f>
   100d2:	4603      	mov	r3, r0
   100d4:	4618      	mov	r0, r3
   100d6:	6879      	ldr	r1, [r7, #4]
   100d8:	f003 f8cc 	bl	13274 <__aeabi_fmul>
   100dc:	4603      	mov	r3, r0
   100de:	461a      	mov	r2, r3
   100e0:	f64b 33e8 	movw	r3, #48104	; 0xbbe8
   100e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100e8:	601a      	str	r2, [r3, #0]

  estimator_theta = rad_of_ir * ir_pitch;
   100ea:	f64b 03ca 	movw	r3, #47306	; 0xb8ca
   100ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100f2:	881b      	ldrh	r3, [r3, #0]
   100f4:	b21b      	sxth	r3, r3
   100f6:	4618      	mov	r0, r3
   100f8:	f003 f868 	bl	131cc <__aeabi_i2f>
   100fc:	4603      	mov	r3, r0
   100fe:	4618      	mov	r0, r3
   10100:	6879      	ldr	r1, [r7, #4]
   10102:	f003 f8b7 	bl	13274 <__aeabi_fmul>
   10106:	4603      	mov	r3, r0
   10108:	461a      	mov	r2, r3
   1010a:	f64b 33f0 	movw	r3, #48112	; 0xbbf0
   1010e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10112:	601a      	str	r2, [r3, #0]
}
   10114:	3708      	adds	r7, #8
   10116:	46bd      	mov	sp, r7
   10118:	bd80      	pop	{r7, pc}
   1011a:	bf00      	nop

0001011c <estimator_update_ir_estim>:
#define RHO 0.999 /* The higher, the slower the estimation is changing */

#define g 9.81


void estimator_update_ir_estim( void ) {
   1011c:	b5b0      	push	{r4, r5, r7, lr}
   1011e:	b084      	sub	sp, #16
   10120:	af00      	add	r7, sp, #0
  static bool_t initialized = FALSE;
  static float sum_xy, sum_xx;
  float absphi;
  float init_ir2;

  if (initialized) 
   10122:	f64b 4328 	movw	r3, #48168	; 0xbc28
   10126:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1012a:	781b      	ldrb	r3, [r3, #0]
   1012c:	2b00      	cmp	r3, #0
   1012e:	f000 81e8 	beq.w	10502 <estimator_update_ir_estim+0x3e6>
  {
    float dt = gps_ftow - last_t;
   10132:	f24b 7398 	movw	r3, #47000	; 0xb798
   10136:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1013a:	681a      	ldr	r2, [r3, #0]
   1013c:	f64b 432c 	movw	r3, #48172	; 0xbc2c
   10140:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10144:	681b      	ldr	r3, [r3, #0]
   10146:	4610      	mov	r0, r2
   10148:	4619      	mov	r1, r3
   1014a:	f002 ff89 	bl	13060 <__aeabi_fsub>
   1014e:	4603      	mov	r3, r0
   10150:	60bb      	str	r3, [r7, #8]
    if (dt > 0.1) { // Against division by zero
   10152:	68b8      	ldr	r0, [r7, #8]
   10154:	f002 fbfa 	bl	1294c <__aeabi_f2d>
   10158:	4602      	mov	r2, r0
   1015a:	460b      	mov	r3, r1
   1015c:	4610      	mov	r0, r2
   1015e:	4619      	mov	r1, r3
   10160:	a385      	add	r3, pc, #532	; (adr r3, 10378 <estimator_update_ir_estim+0x25c>)
   10162:	e9d3 2300 	ldrd	r2, r3, [r3]
   10166:	f002 fed5 	bl	12f14 <__aeabi_dcmpgt>
   1016a:	4603      	mov	r3, r0
   1016c:	2b00      	cmp	r3, #0
   1016e:	d100      	bne.n	10172 <estimator_update_ir_estim+0x56>
   10170:	e219      	b.n	105a6 <estimator_update_ir_estim+0x48a>
      float phi = (estimator_hspeed_dir - last_hspeed_dir); 
   10172:	f64b 4318 	movw	r3, #48152	; 0xbc18
   10176:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1017a:	681a      	ldr	r2, [r3, #0]
   1017c:	f64b 4330 	movw	r3, #48176	; 0xbc30
   10180:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10184:	681b      	ldr	r3, [r3, #0]
   10186:	4610      	mov	r0, r2
   10188:	4619      	mov	r1, r3
   1018a:	f002 ff69 	bl	13060 <__aeabi_fsub>
   1018e:	4603      	mov	r3, r0
   10190:	60fb      	str	r3, [r7, #12]
      NORM_RAD_ANGLE(phi);
   10192:	e013      	b.n	101bc <estimator_update_ir_estim+0xa0>
   10194:	68f8      	ldr	r0, [r7, #12]
   10196:	f002 fbd9 	bl	1294c <__aeabi_f2d>
   1019a:	4602      	mov	r2, r0
   1019c:	460b      	mov	r3, r1
   1019e:	4610      	mov	r0, r2
   101a0:	4619      	mov	r1, r3
   101a2:	a377      	add	r3, pc, #476	; (adr r3, 10380 <estimator_update_ir_estim+0x264>)
   101a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   101a8:	f002 fa70 	bl	1268c <__aeabi_dsub>
   101ac:	4602      	mov	r2, r0
   101ae:	460b      	mov	r3, r1
   101b0:	4610      	mov	r0, r2
   101b2:	4619      	mov	r1, r3
   101b4:	f002 ff00 	bl	12fb8 <__aeabi_d2f>
   101b8:	4603      	mov	r3, r0
   101ba:	60fb      	str	r3, [r7, #12]
   101bc:	68f8      	ldr	r0, [r7, #12]
   101be:	f002 fbc5 	bl	1294c <__aeabi_f2d>
   101c2:	4602      	mov	r2, r0
   101c4:	460b      	mov	r3, r1
   101c6:	4610      	mov	r0, r2
   101c8:	4619      	mov	r1, r3
   101ca:	a36f      	add	r3, pc, #444	; (adr r3, 10388 <estimator_update_ir_estim+0x26c>)
   101cc:	e9d3 2300 	ldrd	r2, r3, [r3]
   101d0:	f002 fea0 	bl	12f14 <__aeabi_dcmpgt>
   101d4:	4603      	mov	r3, r0
   101d6:	2b00      	cmp	r3, #0
   101d8:	d1dc      	bne.n	10194 <estimator_update_ir_estim+0x78>
   101da:	e013      	b.n	10204 <estimator_update_ir_estim+0xe8>
   101dc:	68f8      	ldr	r0, [r7, #12]
   101de:	f002 fbb5 	bl	1294c <__aeabi_f2d>
   101e2:	4602      	mov	r2, r0
   101e4:	460b      	mov	r3, r1
   101e6:	4610      	mov	r0, r2
   101e8:	4619      	mov	r1, r3
   101ea:	a365      	add	r3, pc, #404	; (adr r3, 10380 <estimator_update_ir_estim+0x264>)
   101ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   101f0:	f002 fa4e 	bl	12690 <__adddf3>
   101f4:	4602      	mov	r2, r0
   101f6:	460b      	mov	r3, r1
   101f8:	4610      	mov	r0, r2
   101fa:	4619      	mov	r1, r3
   101fc:	f002 fedc 	bl	12fb8 <__aeabi_d2f>
   10200:	4603      	mov	r3, r0
   10202:	60fb      	str	r3, [r7, #12]
   10204:	68f8      	ldr	r0, [r7, #12]
   10206:	f002 fba1 	bl	1294c <__aeabi_f2d>
   1020a:	4602      	mov	r2, r0
   1020c:	460b      	mov	r3, r1
   1020e:	4610      	mov	r0, r2
   10210:	4619      	mov	r1, r3
   10212:	a35f      	add	r3, pc, #380	; (adr r3, 10390 <estimator_update_ir_estim+0x274>)
   10214:	e9d3 2300 	ldrd	r2, r3, [r3]
   10218:	f002 fe5e 	bl	12ed8 <__aeabi_dcmplt>
   1021c:	4603      	mov	r3, r0
   1021e:	2b00      	cmp	r3, #0
   10220:	d1dc      	bne.n	101dc <estimator_update_ir_estim+0xc0>
      phi = phi/dt*NOMINAL_AIRSPEED/g; /* tan linearized */
   10222:	68f8      	ldr	r0, [r7, #12]
   10224:	68b9      	ldr	r1, [r7, #8]
   10226:	f003 f8d9 	bl	133dc <__aeabi_fdiv>
   1022a:	4603      	mov	r3, r0
   1022c:	4618      	mov	r0, r3
   1022e:	f002 fb8d 	bl	1294c <__aeabi_f2d>
   10232:	4602      	mov	r2, r0
   10234:	460b      	mov	r3, r1
   10236:	4610      	mov	r0, r2
   10238:	4619      	mov	r1, r3
   1023a:	f04f 0200 	mov.w	r2, #0
   1023e:	f04f 0300 	mov.w	r3, #0
   10242:	f2c4 0324 	movt	r3, #16420	; 0x4024
   10246:	f002 fbd5 	bl	129f4 <__aeabi_dmul>
   1024a:	4602      	mov	r2, r0
   1024c:	460b      	mov	r3, r1
   1024e:	4610      	mov	r0, r2
   10250:	4619      	mov	r1, r3
   10252:	a351      	add	r3, pc, #324	; (adr r3, 10398 <estimator_update_ir_estim+0x27c>)
   10254:	e9d3 2300 	ldrd	r2, r3, [r3]
   10258:	f002 fcf6 	bl	12c48 <__aeabi_ddiv>
   1025c:	4602      	mov	r2, r0
   1025e:	460b      	mov	r3, r1
   10260:	4610      	mov	r0, r2
   10262:	4619      	mov	r1, r3
   10264:	f002 fea8 	bl	12fb8 <__aeabi_d2f>
   10268:	4603      	mov	r3, r0
   1026a:	60fb      	str	r3, [r7, #12]
      NORM_RAD_ANGLE(phi);
   1026c:	e013      	b.n	10296 <estimator_update_ir_estim+0x17a>
   1026e:	68f8      	ldr	r0, [r7, #12]
   10270:	f002 fb6c 	bl	1294c <__aeabi_f2d>
   10274:	4602      	mov	r2, r0
   10276:	460b      	mov	r3, r1
   10278:	4610      	mov	r0, r2
   1027a:	4619      	mov	r1, r3
   1027c:	a340      	add	r3, pc, #256	; (adr r3, 10380 <estimator_update_ir_estim+0x264>)
   1027e:	e9d3 2300 	ldrd	r2, r3, [r3]
   10282:	f002 fa03 	bl	1268c <__aeabi_dsub>
   10286:	4602      	mov	r2, r0
   10288:	460b      	mov	r3, r1
   1028a:	4610      	mov	r0, r2
   1028c:	4619      	mov	r1, r3
   1028e:	f002 fe93 	bl	12fb8 <__aeabi_d2f>
   10292:	4603      	mov	r3, r0
   10294:	60fb      	str	r3, [r7, #12]
   10296:	68f8      	ldr	r0, [r7, #12]
   10298:	f002 fb58 	bl	1294c <__aeabi_f2d>
   1029c:	4602      	mov	r2, r0
   1029e:	460b      	mov	r3, r1
   102a0:	4610      	mov	r0, r2
   102a2:	4619      	mov	r1, r3
   102a4:	a338      	add	r3, pc, #224	; (adr r3, 10388 <estimator_update_ir_estim+0x26c>)
   102a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   102aa:	f002 fe33 	bl	12f14 <__aeabi_dcmpgt>
   102ae:	4603      	mov	r3, r0
   102b0:	2b00      	cmp	r3, #0
   102b2:	d1dc      	bne.n	1026e <estimator_update_ir_estim+0x152>
   102b4:	e013      	b.n	102de <estimator_update_ir_estim+0x1c2>
   102b6:	68f8      	ldr	r0, [r7, #12]
   102b8:	f002 fb48 	bl	1294c <__aeabi_f2d>
   102bc:	4602      	mov	r2, r0
   102be:	460b      	mov	r3, r1
   102c0:	4610      	mov	r0, r2
   102c2:	4619      	mov	r1, r3
   102c4:	a32e      	add	r3, pc, #184	; (adr r3, 10380 <estimator_update_ir_estim+0x264>)
   102c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   102ca:	f002 f9e1 	bl	12690 <__adddf3>
   102ce:	4602      	mov	r2, r0
   102d0:	460b      	mov	r3, r1
   102d2:	4610      	mov	r0, r2
   102d4:	4619      	mov	r1, r3
   102d6:	f002 fe6f 	bl	12fb8 <__aeabi_d2f>
   102da:	4603      	mov	r3, r0
   102dc:	60fb      	str	r3, [r7, #12]
   102de:	68f8      	ldr	r0, [r7, #12]
   102e0:	f002 fb34 	bl	1294c <__aeabi_f2d>
   102e4:	4602      	mov	r2, r0
   102e6:	460b      	mov	r3, r1
   102e8:	4610      	mov	r0, r2
   102ea:	4619      	mov	r1, r3
   102ec:	a328      	add	r3, pc, #160	; (adr r3, 10390 <estimator_update_ir_estim+0x274>)
   102ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   102f2:	f002 fdf1 	bl	12ed8 <__aeabi_dcmplt>
   102f6:	4603      	mov	r3, r0
   102f8:	2b00      	cmp	r3, #0
   102fa:	d1dc      	bne.n	102b6 <estimator_update_ir_estim+0x19a>
      estimator_ir = (float)ir_roll;
   102fc:	f64b 03c8 	movw	r3, #47304	; 0xb8c8
   10300:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10304:	881b      	ldrh	r3, [r3, #0]
   10306:	b21b      	sxth	r3, r3
   10308:	4618      	mov	r0, r3
   1030a:	f002 ff5f 	bl	131cc <__aeabi_i2f>
   1030e:	4602      	mov	r2, r0
   10310:	f64b 4320 	movw	r3, #48160	; 0xbc20
   10314:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10318:	601a      	str	r2, [r3, #0]
      estimator_rad = phi;
   1031a:	f64b 4324 	movw	r3, #48164	; 0xbc24
   1031e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10322:	68fa      	ldr	r2, [r7, #12]
   10324:	601a      	str	r2, [r3, #0]
      absphi = fabs(phi);
   10326:	68f8      	ldr	r0, [r7, #12]
   10328:	f04f 0100 	mov.w	r1, #0
   1032c:	f003 f940 	bl	135b0 <__aeabi_fcmplt>
   10330:	4603      	mov	r3, r0
   10332:	2b00      	cmp	r3, #0
   10334:	d003      	beq.n	1033e <estimator_update_ir_estim+0x222>
   10336:	68fb      	ldr	r3, [r7, #12]
   10338:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
   1033c:	e000      	b.n	10340 <estimator_update_ir_estim+0x224>
   1033e:	68fb      	ldr	r3, [r7, #12]
   10340:	607b      	str	r3, [r7, #4]
      if (absphi < 1.0 && absphi > 0.05 && (- ir_contrast/2 < ir_roll && ir_roll < ir_contrast/2)) {
   10342:	6878      	ldr	r0, [r7, #4]
   10344:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   10348:	f003 f932 	bl	135b0 <__aeabi_fcmplt>
   1034c:	4603      	mov	r3, r0
   1034e:	2b00      	cmp	r3, #0
   10350:	d100      	bne.n	10354 <estimator_update_ir_estim+0x238>
   10352:	e128      	b.n	105a6 <estimator_update_ir_estim+0x48a>
   10354:	6878      	ldr	r0, [r7, #4]
   10356:	f002 faf9 	bl	1294c <__aeabi_f2d>
   1035a:	4602      	mov	r2, r0
   1035c:	460b      	mov	r3, r1
   1035e:	4610      	mov	r0, r2
   10360:	4619      	mov	r1, r3
   10362:	a30f      	add	r3, pc, #60	; (adr r3, 103a0 <estimator_update_ir_estim+0x284>)
   10364:	e9d3 2300 	ldrd	r2, r3, [r3]
   10368:	f002 fdd4 	bl	12f14 <__aeabi_dcmpgt>
   1036c:	4603      	mov	r3, r0
   1036e:	2b00      	cmp	r3, #0
   10370:	d11a      	bne.n	103a8 <estimator_update_ir_estim+0x28c>
   10372:	e118      	b.n	105a6 <estimator_update_ir_estim+0x48a>
   10374:	f3af 8000 	nop.w
   10378:	9999999a 	.word	0x9999999a
   1037c:	3fb99999 	.word	0x3fb99999
   10380:	54442d18 	.word	0x54442d18
   10384:	401921fb 	.word	0x401921fb
   10388:	54442d18 	.word	0x54442d18
   1038c:	400921fb 	.word	0x400921fb
   10390:	54442d18 	.word	0x54442d18
   10394:	c00921fb 	.word	0xc00921fb
   10398:	51eb851f 	.word	0x51eb851f
   1039c:	40239eb8 	.word	0x40239eb8
   103a0:	9999999a 	.word	0x9999999a
   103a4:	3fa99999 	.word	0x3fa99999
   103a8:	f240 1308 	movw	r3, #264	; 0x108
   103ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103b0:	881b      	ldrh	r3, [r3, #0]
   103b2:	b21b      	sxth	r3, r3
   103b4:	425b      	negs	r3, r3
   103b6:	0fda      	lsrs	r2, r3, #31
   103b8:	4413      	add	r3, r2
   103ba:	105b      	asrs	r3, r3, #1
   103bc:	461a      	mov	r2, r3
   103be:	f64b 03c8 	movw	r3, #47304	; 0xb8c8
   103c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103c6:	881b      	ldrh	r3, [r3, #0]
   103c8:	b21b      	sxth	r3, r3
   103ca:	429a      	cmp	r2, r3
   103cc:	f280 8098 	bge.w	10500 <estimator_update_ir_estim+0x3e4>
   103d0:	f240 1308 	movw	r3, #264	; 0x108
   103d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103d8:	881b      	ldrh	r3, [r3, #0]
   103da:	b21b      	sxth	r3, r3
   103dc:	0fda      	lsrs	r2, r3, #31
   103de:	4413      	add	r3, r2
   103e0:	105b      	asrs	r3, r3, #1
   103e2:	b29a      	uxth	r2, r3
   103e4:	f64b 03c8 	movw	r3, #47304	; 0xb8c8
   103e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103ec:	881b      	ldrh	r3, [r3, #0]
   103ee:	b212      	sxth	r2, r2
   103f0:	b21b      	sxth	r3, r3
   103f2:	429a      	cmp	r2, r3
   103f4:	f340 8084 	ble.w	10500 <estimator_update_ir_estim+0x3e4>
	sum_xy = estimator_rad * estimator_ir + RHO * sum_xy;
   103f8:	f64b 4324 	movw	r3, #48164	; 0xbc24
   103fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10400:	681a      	ldr	r2, [r3, #0]
   10402:	f64b 4320 	movw	r3, #48160	; 0xbc20
   10406:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1040a:	681b      	ldr	r3, [r3, #0]
   1040c:	4610      	mov	r0, r2
   1040e:	4619      	mov	r1, r3
   10410:	f002 ff30 	bl	13274 <__aeabi_fmul>
   10414:	4603      	mov	r3, r0
   10416:	4618      	mov	r0, r3
   10418:	f002 fa98 	bl	1294c <__aeabi_f2d>
   1041c:	4604      	mov	r4, r0
   1041e:	460d      	mov	r5, r1
   10420:	f64b 4334 	movw	r3, #48180	; 0xbc34
   10424:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10428:	681b      	ldr	r3, [r3, #0]
   1042a:	4618      	mov	r0, r3
   1042c:	f002 fa8e 	bl	1294c <__aeabi_f2d>
   10430:	4602      	mov	r2, r0
   10432:	460b      	mov	r3, r1
   10434:	4610      	mov	r0, r2
   10436:	4619      	mov	r1, r3
   10438:	a367      	add	r3, pc, #412	; (adr r3, 105d8 <estimator_update_ir_estim+0x4bc>)
   1043a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1043e:	f002 fad9 	bl	129f4 <__aeabi_dmul>
   10442:	4602      	mov	r2, r0
   10444:	460b      	mov	r3, r1
   10446:	4620      	mov	r0, r4
   10448:	4629      	mov	r1, r5
   1044a:	f002 f921 	bl	12690 <__adddf3>
   1044e:	4602      	mov	r2, r0
   10450:	460b      	mov	r3, r1
   10452:	4610      	mov	r0, r2
   10454:	4619      	mov	r1, r3
   10456:	f002 fdaf 	bl	12fb8 <__aeabi_d2f>
   1045a:	4602      	mov	r2, r0
   1045c:	f64b 4334 	movw	r3, #48180	; 0xbc34
   10460:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10464:	601a      	str	r2, [r3, #0]
	sum_xx = estimator_ir * estimator_ir + RHO * sum_xx;
   10466:	f64b 4320 	movw	r3, #48160	; 0xbc20
   1046a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1046e:	681a      	ldr	r2, [r3, #0]
   10470:	f64b 4320 	movw	r3, #48160	; 0xbc20
   10474:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10478:	681b      	ldr	r3, [r3, #0]
   1047a:	4610      	mov	r0, r2
   1047c:	4619      	mov	r1, r3
   1047e:	f002 fef9 	bl	13274 <__aeabi_fmul>
   10482:	4603      	mov	r3, r0
   10484:	4618      	mov	r0, r3
   10486:	f002 fa61 	bl	1294c <__aeabi_f2d>
   1048a:	4604      	mov	r4, r0
   1048c:	460d      	mov	r5, r1
   1048e:	f64b 4338 	movw	r3, #48184	; 0xbc38
   10492:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10496:	681b      	ldr	r3, [r3, #0]
   10498:	4618      	mov	r0, r3
   1049a:	f002 fa57 	bl	1294c <__aeabi_f2d>
   1049e:	4602      	mov	r2, r0
   104a0:	460b      	mov	r3, r1
   104a2:	4610      	mov	r0, r2
   104a4:	4619      	mov	r1, r3
   104a6:	a34c      	add	r3, pc, #304	; (adr r3, 105d8 <estimator_update_ir_estim+0x4bc>)
   104a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   104ac:	f002 faa2 	bl	129f4 <__aeabi_dmul>
   104b0:	4602      	mov	r2, r0
   104b2:	460b      	mov	r3, r1
   104b4:	4620      	mov	r0, r4
   104b6:	4629      	mov	r1, r5
   104b8:	f002 f8ea 	bl	12690 <__adddf3>
   104bc:	4602      	mov	r2, r0
   104be:	460b      	mov	r3, r1
   104c0:	4610      	mov	r0, r2
   104c2:	4619      	mov	r1, r3
   104c4:	f002 fd78 	bl	12fb8 <__aeabi_d2f>
   104c8:	4602      	mov	r2, r0
   104ca:	f64b 4338 	movw	r3, #48184	; 0xbc38
   104ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104d2:	601a      	str	r2, [r3, #0]
	else if (result > IR_RAD_OF_IR_MAX_VALUE)
	  estimator_rad_of_ir = IR_RAD_OF_IR_MAX_VALUE;
	else
	  estimator_rad_of_ir = result;
#else
	  estimator_rad_of_ir = sum_xy / sum_xx;
   104d4:	f64b 4334 	movw	r3, #48180	; 0xbc34
   104d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104dc:	681a      	ldr	r2, [r3, #0]
   104de:	f64b 4338 	movw	r3, #48184	; 0xbc38
   104e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104e6:	681b      	ldr	r3, [r3, #0]
   104e8:	4610      	mov	r0, r2
   104ea:	4619      	mov	r1, r3
   104ec:	f002 ff76 	bl	133dc <__aeabi_fdiv>
   104f0:	4603      	mov	r3, r0
   104f2:	461a      	mov	r2, r3
   104f4:	f64b 431c 	movw	r3, #48156	; 0xbc1c
   104f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104fc:	601a      	str	r2, [r3, #0]
   104fe:	e052      	b.n	105a6 <estimator_update_ir_estim+0x48a>
   10500:	e051      	b.n	105a6 <estimator_update_ir_estim+0x48a>
#endif
      }
    } 
  } else {
    initialized = TRUE;
   10502:	f64b 4328 	movw	r3, #48168	; 0xbc28
   10506:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1050a:	2201      	movs	r2, #1
   1050c:	701a      	strb	r2, [r3, #0]
    init_ir2 = ir_contrast;
   1050e:	f240 1308 	movw	r3, #264	; 0x108
   10512:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10516:	881b      	ldrh	r3, [r3, #0]
   10518:	b21b      	sxth	r3, r3
   1051a:	4618      	mov	r0, r3
   1051c:	f002 fe56 	bl	131cc <__aeabi_i2f>
   10520:	4603      	mov	r3, r0
   10522:	603b      	str	r3, [r7, #0]
    init_ir2 = init_ir2*init_ir2;
   10524:	6838      	ldr	r0, [r7, #0]
   10526:	6839      	ldr	r1, [r7, #0]
   10528:	f002 fea4 	bl	13274 <__aeabi_fmul>
   1052c:	4603      	mov	r3, r0
   1052e:	603b      	str	r3, [r7, #0]
    sum_xy = INIT_WEIGHT * estimator_rad_of_ir * init_ir2;
   10530:	f64b 431c 	movw	r3, #48156	; 0xbc1c
   10534:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10538:	681b      	ldr	r3, [r3, #0]
   1053a:	4618      	mov	r0, r3
   1053c:	f002 fa06 	bl	1294c <__aeabi_f2d>
   10540:	4602      	mov	r2, r0
   10542:	460b      	mov	r3, r1
   10544:	4610      	mov	r0, r2
   10546:	4619      	mov	r1, r3
   10548:	f04f 0200 	mov.w	r2, #0
   1054c:	f04f 0300 	mov.w	r3, #0
   10550:	f2c4 0359 	movt	r3, #16473	; 0x4059
   10554:	f002 fa4e 	bl	129f4 <__aeabi_dmul>
   10558:	4602      	mov	r2, r0
   1055a:	460b      	mov	r3, r1
   1055c:	4614      	mov	r4, r2
   1055e:	461d      	mov	r5, r3
   10560:	6838      	ldr	r0, [r7, #0]
   10562:	f002 f9f3 	bl	1294c <__aeabi_f2d>
   10566:	4602      	mov	r2, r0
   10568:	460b      	mov	r3, r1
   1056a:	4620      	mov	r0, r4
   1056c:	4629      	mov	r1, r5
   1056e:	f002 fa41 	bl	129f4 <__aeabi_dmul>
   10572:	4602      	mov	r2, r0
   10574:	460b      	mov	r3, r1
   10576:	4610      	mov	r0, r2
   10578:	4619      	mov	r1, r3
   1057a:	f002 fd1d 	bl	12fb8 <__aeabi_d2f>
   1057e:	4602      	mov	r2, r0
   10580:	f64b 4334 	movw	r3, #48180	; 0xbc34
   10584:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10588:	601a      	str	r2, [r3, #0]
    sum_xx = INIT_WEIGHT * init_ir2;
   1058a:	6838      	ldr	r0, [r7, #0]
   1058c:	f04f 0100 	mov.w	r1, #0
   10590:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   10594:	f002 fe6e 	bl	13274 <__aeabi_fmul>
   10598:	4603      	mov	r3, r0
   1059a:	461a      	mov	r2, r3
   1059c:	f64b 4338 	movw	r3, #48184	; 0xbc38
   105a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105a4:	601a      	str	r2, [r3, #0]
  }

  last_hspeed_dir = estimator_hspeed_dir;
   105a6:	f64b 4318 	movw	r3, #48152	; 0xbc18
   105aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105ae:	681a      	ldr	r2, [r3, #0]
   105b0:	f64b 4330 	movw	r3, #48176	; 0xbc30
   105b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105b8:	601a      	str	r2, [r3, #0]
  last_t = gps_ftow;
   105ba:	f24b 7398 	movw	r3, #47000	; 0xb798
   105be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105c2:	681a      	ldr	r2, [r3, #0]
   105c4:	f64b 432c 	movw	r3, #48172	; 0xbc2c
   105c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105cc:	601a      	str	r2, [r3, #0]
}
   105ce:	3710      	adds	r7, #16
   105d0:	46bd      	mov	sp, r7
   105d2:	bdb0      	pop	{r4, r5, r7, pc}
   105d4:	f3af 8000 	nop.w
   105d8:	d916872b 	.word	0xd916872b
   105dc:	3feff7ce 	.word	0x3feff7ce

000105e0 <estimator_update_state_gps>:


void estimator_update_state_gps( void ) {
   105e0:	b580      	push	{r7, lr}
   105e2:	af00      	add	r7, sp, #0
  if (GPS_FIX_VALID(gps_mode)) {
   105e4:	f24b 73bc 	movw	r3, #47036	; 0xb7bc
   105e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105ec:	781b      	ldrb	r3, [r3, #0]
   105ee:	f003 0320 	and.w	r3, r3, #32
   105f2:	2b00      	cmp	r3, #0
   105f4:	d044      	beq.n	10680 <estimator_update_state_gps+0xa0>
    EstimatorSetPos(gps_east, gps_north, gps_falt);
   105f6:	f24b 73b4 	movw	r3, #47028	; 0xb7b4
   105fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105fe:	681a      	ldr	r2, [r3, #0]
   10600:	f64b 33dc 	movw	r3, #48092	; 0xbbdc
   10604:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10608:	601a      	str	r2, [r3, #0]
   1060a:	f24b 73b8 	movw	r3, #47032	; 0xb7b8
   1060e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10612:	681a      	ldr	r2, [r3, #0]
   10614:	f64b 33e0 	movw	r3, #48096	; 0xbbe0
   10618:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1061c:	601a      	str	r2, [r3, #0]
   1061e:	f24b 739c 	movw	r3, #47004	; 0xb79c
   10622:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10626:	681a      	ldr	r2, [r3, #0]
   10628:	f64b 33e4 	movw	r3, #48100	; 0xbbe4
   1062c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10630:	601a      	str	r2, [r3, #0]
    EstimatorSetSpeedPol(gps_fspeed, gps_fcourse, gps_fclimb);
   10632:	f24b 73a0 	movw	r3, #47008	; 0xb7a0
   10636:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1063a:	681a      	ldr	r2, [r3, #0]
   1063c:	f64b 4314 	movw	r3, #48148	; 0xbc14
   10640:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10644:	601a      	str	r2, [r3, #0]
   10646:	f24b 73a8 	movw	r3, #47016	; 0xb7a8
   1064a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1064e:	681a      	ldr	r2, [r3, #0]
   10650:	f64b 4318 	movw	r3, #48152	; 0xbc18
   10654:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10658:	601a      	str	r2, [r3, #0]
   1065a:	f24b 73a4 	movw	r3, #47012	; 0xb7a4
   1065e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10662:	681a      	ldr	r2, [r3, #0]
   10664:	f64b 33fc 	movw	r3, #48124	; 0xbbfc
   10668:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1066c:	601a      	str	r2, [r3, #0]
    
    if (estimator_flight_time)
   1066e:	f64b 430c 	movw	r3, #48140	; 0xbc0c
   10672:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10676:	881b      	ldrh	r3, [r3, #0]
   10678:	2b00      	cmp	r3, #0
   1067a:	d001      	beq.n	10680 <estimator_update_state_gps+0xa0>
      estimator_update_ir_estim();
   1067c:	f7ff fd4e 	bl	1011c <estimator_update_ir_estim>
  }
}
   10680:	bd80      	pop	{r7, pc}
   10682:	bf00      	nop

00010684 <estimator_propagate_state>:

void estimator_propagate_state( void ) {
   10684:	b480      	push	{r7}
   10686:	af00      	add	r7, sp, #0
  
}
   10688:	46bd      	mov	sp, r7
   1068a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1068e:	4770      	bx	lr

00010690 <inflight_calib>:
/* Please DO NOT EDIT */

#ifndef INFLIGHT_CALIB_H
#define INFLIGHT_CALIB_H 

void inflight_calib(bool_t mode_changed) {
   10690:	b5b0      	push	{r4, r5, r7, lr}
   10692:	b082      	sub	sp, #8
   10694:	af00      	add	r7, sp, #0
   10696:	4603      	mov	r3, r0
   10698:	71fb      	strb	r3, [r7, #7]
  if (pprz_mode == PPRZ_MODE_AUTO1) {
   1069a:	f24b 630c 	movw	r3, #46604	; 0xb60c
   1069e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106a2:	781b      	ldrb	r3, [r3, #0]
   106a4:	2b01      	cmp	r3, #1
   106a6:	f040 80e0 	bne.w	1086a <inflight_calib+0x1da>
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   106aa:	f64b 433c 	movw	r3, #48188	; 0xbc3c
   106ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106b2:	781b      	ldrb	r3, [r3, #0]
   106b4:	2b02      	cmp	r3, #2
   106b6:	d168      	bne.n	1078a <inflight_calib+0xfa>
      static int16_t ir_pitch_neutral_init;
      if (mode_changed) {
   106b8:	79fb      	ldrb	r3, [r7, #7]
   106ba:	2b00      	cmp	r3, #0
   106bc:	d013      	beq.n	106e6 <inflight_calib+0x56>
        ir_pitch_neutral_init = ir_pitch_neutral;
   106be:	f240 130c 	movw	r3, #268	; 0x10c
   106c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106c6:	881a      	ldrh	r2, [r3, #0]
   106c8:	f64b 4342 	movw	r3, #48194	; 0xbc42
   106cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106d0:	801a      	strh	r2, [r3, #0]
        slider1_init = from_fbw.channels[RADIO_GAIN1];
   106d2:	f24b 7330 	movw	r3, #46896	; 0xb730
   106d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106da:	895a      	ldrh	r2, [r3, #10]
   106dc:	f64b 433e 	movw	r3, #48190	; 0xbc3e
   106e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106e4:	801a      	strh	r2, [r3, #0]
      }
      ir_pitch_neutral = ParamValInt16(ir_pitch_neutral_init, 60.000000, from_fbw.channels[RADIO_GAIN1], slider1_init);
   106e6:	f24b 7330 	movw	r3, #46896	; 0xb730
   106ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106ee:	895b      	ldrh	r3, [r3, #10]
   106f0:	b21a      	sxth	r2, r3
   106f2:	f64b 433e 	movw	r3, #48190	; 0xbc3e
   106f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106fa:	881b      	ldrh	r3, [r3, #0]
   106fc:	b21b      	sxth	r3, r3
   106fe:	1ad3      	subs	r3, r2, r3
   10700:	4618      	mov	r0, r3
   10702:	f002 fd63 	bl	131cc <__aeabi_i2f>
   10706:	4603      	mov	r3, r0
   10708:	4618      	mov	r0, r3
   1070a:	f002 f91f 	bl	1294c <__aeabi_f2d>
   1070e:	4602      	mov	r2, r0
   10710:	460b      	mov	r3, r1
   10712:	4610      	mov	r0, r2
   10714:	4619      	mov	r1, r3
   10716:	f04f 0200 	mov.w	r2, #0
   1071a:	f04f 0300 	mov.w	r3, #0
   1071e:	f2c4 034e 	movt	r3, #16462	; 0x404e
   10722:	f002 f967 	bl	129f4 <__aeabi_dmul>
   10726:	4602      	mov	r2, r0
   10728:	460b      	mov	r3, r1
   1072a:	4610      	mov	r0, r2
   1072c:	4619      	mov	r1, r3
   1072e:	f04f 0200 	mov.w	r2, #0
   10732:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   10736:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   1073a:	f002 fa85 	bl	12c48 <__aeabi_ddiv>
   1073e:	4602      	mov	r2, r0
   10740:	460b      	mov	r3, r1
   10742:	4610      	mov	r0, r2
   10744:	4619      	mov	r1, r3
   10746:	f002 fbef 	bl	12f28 <__aeabi_d2iz>
   1074a:	4603      	mov	r3, r0
   1074c:	b29b      	uxth	r3, r3
   1074e:	b29a      	uxth	r2, r3
   10750:	f64b 4342 	movw	r3, #48194	; 0xbc42
   10754:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10758:	881b      	ldrh	r3, [r3, #0]
   1075a:	b29b      	uxth	r3, r3
   1075c:	4413      	add	r3, r2
   1075e:	b29b      	uxth	r3, r3
   10760:	b29a      	uxth	r2, r3
   10762:	f240 130c 	movw	r3, #268	; 0x10c
   10766:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1076a:	801a      	strh	r2, [r3, #0]
      slider_1_val = (float)ir_pitch_neutral;
   1076c:	f240 130c 	movw	r3, #268	; 0x10c
   10770:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10774:	881b      	ldrh	r3, [r3, #0]
   10776:	b21b      	sxth	r3, r3
   10778:	4618      	mov	r0, r3
   1077a:	f002 fd27 	bl	131cc <__aeabi_i2f>
   1077e:	4602      	mov	r2, r0
   10780:	f24b 6318 	movw	r3, #46616	; 0xb618
   10784:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10788:	601a      	str	r2, [r3, #0]
    }
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   1078a:	f64b 433c 	movw	r3, #48188	; 0xbc3c
   1078e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10792:	781b      	ldrb	r3, [r3, #0]
   10794:	2b02      	cmp	r3, #2
   10796:	d168      	bne.n	1086a <inflight_calib+0x1da>
      static int16_t ir_roll_neutral_init;
      if (mode_changed) {
   10798:	79fb      	ldrb	r3, [r7, #7]
   1079a:	2b00      	cmp	r3, #0
   1079c:	d013      	beq.n	107c6 <inflight_calib+0x136>
        ir_roll_neutral_init = ir_roll_neutral;
   1079e:	f240 130a 	movw	r3, #266	; 0x10a
   107a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107a6:	881a      	ldrh	r2, [r3, #0]
   107a8:	f64b 4344 	movw	r3, #48196	; 0xbc44
   107ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107b0:	801a      	strh	r2, [r3, #0]
        slider2_init = from_fbw.channels[RADIO_GAIN2];
   107b2:	f24b 7330 	movw	r3, #46896	; 0xb730
   107b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107ba:	899a      	ldrh	r2, [r3, #12]
   107bc:	f64b 4340 	movw	r3, #48192	; 0xbc40
   107c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107c4:	801a      	strh	r2, [r3, #0]
      }
      ir_roll_neutral = ParamValInt16(ir_roll_neutral_init, -60.000000, from_fbw.channels[RADIO_GAIN2], slider2_init);
   107c6:	f24b 7330 	movw	r3, #46896	; 0xb730
   107ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107ce:	899b      	ldrh	r3, [r3, #12]
   107d0:	b21a      	sxth	r2, r3
   107d2:	f64b 4340 	movw	r3, #48192	; 0xbc40
   107d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107da:	881b      	ldrh	r3, [r3, #0]
   107dc:	b21b      	sxth	r3, r3
   107de:	1ad3      	subs	r3, r2, r3
   107e0:	4618      	mov	r0, r3
   107e2:	f002 fcf3 	bl	131cc <__aeabi_i2f>
   107e6:	4603      	mov	r3, r0
   107e8:	4618      	mov	r0, r3
   107ea:	f002 f8af 	bl	1294c <__aeabi_f2d>
   107ee:	4602      	mov	r2, r0
   107f0:	460b      	mov	r3, r1
   107f2:	4610      	mov	r0, r2
   107f4:	4619      	mov	r1, r3
   107f6:	f04f 0200 	mov.w	r2, #0
   107fa:	f04f 0300 	mov.w	r3, #0
   107fe:	f2cc 034e 	movt	r3, #49230	; 0xc04e
   10802:	f002 f8f7 	bl	129f4 <__aeabi_dmul>
   10806:	4602      	mov	r2, r0
   10808:	460b      	mov	r3, r1
   1080a:	4610      	mov	r0, r2
   1080c:	4619      	mov	r1, r3
   1080e:	f04f 0200 	mov.w	r2, #0
   10812:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   10816:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   1081a:	f002 fa15 	bl	12c48 <__aeabi_ddiv>
   1081e:	4602      	mov	r2, r0
   10820:	460b      	mov	r3, r1
   10822:	4610      	mov	r0, r2
   10824:	4619      	mov	r1, r3
   10826:	f002 fb7f 	bl	12f28 <__aeabi_d2iz>
   1082a:	4603      	mov	r3, r0
   1082c:	b29b      	uxth	r3, r3
   1082e:	b29a      	uxth	r2, r3
   10830:	f64b 4344 	movw	r3, #48196	; 0xbc44
   10834:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10838:	881b      	ldrh	r3, [r3, #0]
   1083a:	b29b      	uxth	r3, r3
   1083c:	4413      	add	r3, r2
   1083e:	b29b      	uxth	r3, r3
   10840:	b29a      	uxth	r2, r3
   10842:	f240 130a 	movw	r3, #266	; 0x10a
   10846:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1084a:	801a      	strh	r2, [r3, #0]
      slider_2_val = (float)ir_roll_neutral;
   1084c:	f240 130a 	movw	r3, #266	; 0x10a
   10850:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10854:	881b      	ldrh	r3, [r3, #0]
   10856:	b21b      	sxth	r3, r3
   10858:	4618      	mov	r0, r3
   1085a:	f002 fcb7 	bl	131cc <__aeabi_i2f>
   1085e:	4602      	mov	r2, r0
   10860:	f24b 631c 	movw	r3, #46620	; 0xb61c
   10864:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10868:	601a      	str	r2, [r3, #0]
    }
  }
  if (pprz_mode == PPRZ_MODE_AUTO2) {
   1086a:	f24b 630c 	movw	r3, #46604	; 0xb60c
   1086e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10872:	781b      	ldrb	r3, [r3, #0]
   10874:	2b02      	cmp	r3, #2
   10876:	f040 80da 	bne.w	10a2e <inflight_calib+0x39e>
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   1087a:	f64b 433c 	movw	r3, #48188	; 0xbc3c
   1087e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10882:	781b      	ldrb	r3, [r3, #0]
   10884:	2b02      	cmp	r3, #2
   10886:	d165      	bne.n	10954 <inflight_calib+0x2c4>
      static float course_pgain_init;
      if (mode_changed) {
   10888:	79fb      	ldrb	r3, [r7, #7]
   1088a:	2b00      	cmp	r3, #0
   1088c:	d013      	beq.n	108b6 <inflight_calib+0x226>
        course_pgain_init = course_pgain;
   1088e:	f240 1320 	movw	r3, #288	; 0x120
   10892:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10896:	681a      	ldr	r2, [r3, #0]
   10898:	f64b 4348 	movw	r3, #48200	; 0xbc48
   1089c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108a0:	601a      	str	r2, [r3, #0]
        slider1_init = from_fbw.channels[RADIO_GAIN1];
   108a2:	f24b 7330 	movw	r3, #46896	; 0xb730
   108a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108aa:	895a      	ldrh	r2, [r3, #10]
   108ac:	f64b 433e 	movw	r3, #48190	; 0xbc3e
   108b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108b4:	801a      	strh	r2, [r3, #0]
      }
      course_pgain = ParamValFloat(course_pgain_init, 0.100000, from_fbw.channels[RADIO_GAIN1], slider1_init);
   108b6:	f64b 4348 	movw	r3, #48200	; 0xbc48
   108ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108be:	681b      	ldr	r3, [r3, #0]
   108c0:	4618      	mov	r0, r3
   108c2:	f002 f843 	bl	1294c <__aeabi_f2d>
   108c6:	4604      	mov	r4, r0
   108c8:	460d      	mov	r5, r1
   108ca:	f24b 7330 	movw	r3, #46896	; 0xb730
   108ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108d2:	895b      	ldrh	r3, [r3, #10]
   108d4:	b21a      	sxth	r2, r3
   108d6:	f64b 433e 	movw	r3, #48190	; 0xbc3e
   108da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108de:	881b      	ldrh	r3, [r3, #0]
   108e0:	b21b      	sxth	r3, r3
   108e2:	1ad3      	subs	r3, r2, r3
   108e4:	4618      	mov	r0, r3
   108e6:	f002 fc71 	bl	131cc <__aeabi_i2f>
   108ea:	4603      	mov	r3, r0
   108ec:	4618      	mov	r0, r3
   108ee:	f002 f82d 	bl	1294c <__aeabi_f2d>
   108f2:	4602      	mov	r2, r0
   108f4:	460b      	mov	r3, r1
   108f6:	4610      	mov	r0, r2
   108f8:	4619      	mov	r1, r3
   108fa:	a34f      	add	r3, pc, #316	; (adr r3, 10a38 <inflight_calib+0x3a8>)
   108fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   10900:	f002 f878 	bl	129f4 <__aeabi_dmul>
   10904:	4602      	mov	r2, r0
   10906:	460b      	mov	r3, r1
   10908:	4610      	mov	r0, r2
   1090a:	4619      	mov	r1, r3
   1090c:	f04f 0200 	mov.w	r2, #0
   10910:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   10914:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   10918:	f002 f996 	bl	12c48 <__aeabi_ddiv>
   1091c:	4602      	mov	r2, r0
   1091e:	460b      	mov	r3, r1
   10920:	4620      	mov	r0, r4
   10922:	4629      	mov	r1, r5
   10924:	f001 feb4 	bl	12690 <__adddf3>
   10928:	4602      	mov	r2, r0
   1092a:	460b      	mov	r3, r1
   1092c:	4610      	mov	r0, r2
   1092e:	4619      	mov	r1, r3
   10930:	f002 fb42 	bl	12fb8 <__aeabi_d2f>
   10934:	4602      	mov	r2, r0
   10936:	f240 1320 	movw	r3, #288	; 0x120
   1093a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1093e:	601a      	str	r2, [r3, #0]
      slider_1_val = (float)course_pgain;
   10940:	f240 1320 	movw	r3, #288	; 0x120
   10944:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10948:	681a      	ldr	r2, [r3, #0]
   1094a:	f24b 6318 	movw	r3, #46616	; 0xb618
   1094e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10952:	601a      	str	r2, [r3, #0]
    }
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   10954:	f64b 433c 	movw	r3, #48188	; 0xbc3c
   10958:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1095c:	781b      	ldrb	r3, [r3, #0]
   1095e:	2b02      	cmp	r3, #2
   10960:	d165      	bne.n	10a2e <inflight_calib+0x39e>
      static float max_roll_init;
      if (mode_changed) {
   10962:	79fb      	ldrb	r3, [r7, #7]
   10964:	2b00      	cmp	r3, #0
   10966:	d013      	beq.n	10990 <inflight_calib+0x300>
        max_roll_init = max_roll;
   10968:	f240 1324 	movw	r3, #292	; 0x124
   1096c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10970:	681a      	ldr	r2, [r3, #0]
   10972:	f64b 434c 	movw	r3, #48204	; 0xbc4c
   10976:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1097a:	601a      	str	r2, [r3, #0]
        slider2_init = from_fbw.channels[RADIO_GAIN2];
   1097c:	f24b 7330 	movw	r3, #46896	; 0xb730
   10980:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10984:	899a      	ldrh	r2, [r3, #12]
   10986:	f64b 4340 	movw	r3, #48192	; 0xbc40
   1098a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1098e:	801a      	strh	r2, [r3, #0]
      }
      max_roll = ParamValFloat(max_roll_init, -0.200000, from_fbw.channels[RADIO_GAIN2], slider2_init);
   10990:	f64b 434c 	movw	r3, #48204	; 0xbc4c
   10994:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10998:	681b      	ldr	r3, [r3, #0]
   1099a:	4618      	mov	r0, r3
   1099c:	f001 ffd6 	bl	1294c <__aeabi_f2d>
   109a0:	4604      	mov	r4, r0
   109a2:	460d      	mov	r5, r1
   109a4:	f24b 7330 	movw	r3, #46896	; 0xb730
   109a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109ac:	899b      	ldrh	r3, [r3, #12]
   109ae:	b21a      	sxth	r2, r3
   109b0:	f64b 4340 	movw	r3, #48192	; 0xbc40
   109b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109b8:	881b      	ldrh	r3, [r3, #0]
   109ba:	b21b      	sxth	r3, r3
   109bc:	1ad3      	subs	r3, r2, r3
   109be:	4618      	mov	r0, r3
   109c0:	f002 fc04 	bl	131cc <__aeabi_i2f>
   109c4:	4603      	mov	r3, r0
   109c6:	4618      	mov	r0, r3
   109c8:	f001 ffc0 	bl	1294c <__aeabi_f2d>
   109cc:	4602      	mov	r2, r0
   109ce:	460b      	mov	r3, r1
   109d0:	4610      	mov	r0, r2
   109d2:	4619      	mov	r1, r3
   109d4:	a31a      	add	r3, pc, #104	; (adr r3, 10a40 <inflight_calib+0x3b0>)
   109d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   109da:	f002 f80b 	bl	129f4 <__aeabi_dmul>
   109de:	4602      	mov	r2, r0
   109e0:	460b      	mov	r3, r1
   109e2:	4610      	mov	r0, r2
   109e4:	4619      	mov	r1, r3
   109e6:	f04f 0200 	mov.w	r2, #0
   109ea:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   109ee:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   109f2:	f002 f929 	bl	12c48 <__aeabi_ddiv>
   109f6:	4602      	mov	r2, r0
   109f8:	460b      	mov	r3, r1
   109fa:	4620      	mov	r0, r4
   109fc:	4629      	mov	r1, r5
   109fe:	f001 fe47 	bl	12690 <__adddf3>
   10a02:	4602      	mov	r2, r0
   10a04:	460b      	mov	r3, r1
   10a06:	4610      	mov	r0, r2
   10a08:	4619      	mov	r1, r3
   10a0a:	f002 fad5 	bl	12fb8 <__aeabi_d2f>
   10a0e:	4602      	mov	r2, r0
   10a10:	f240 1324 	movw	r3, #292	; 0x124
   10a14:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a18:	601a      	str	r2, [r3, #0]
      slider_2_val = (float)max_roll;
   10a1a:	f240 1324 	movw	r3, #292	; 0x124
   10a1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a22:	681a      	ldr	r2, [r3, #0]
   10a24:	f24b 631c 	movw	r3, #46620	; 0xb61c
   10a28:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a2c:	601a      	str	r2, [r3, #0]
    }
  }
}
   10a2e:	3708      	adds	r7, #8
   10a30:	46bd      	mov	sp, r7
   10a32:	bdb0      	pop	{r4, r5, r7, pc}
   10a34:	f3af 8000 	nop.w
   10a38:	9999999a 	.word	0x9999999a
   10a3c:	3fb99999 	.word	0x3fb99999
   10a40:	9999999a 	.word	0x9999999a
   10a44:	bfc99999 	.word	0xbfc99999

00010a48 <pp_atan2>:
 *
 */
#include <math.h>

double pp_atan2(double x, double y)
{
   10a48:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
   10a4c:	b08e      	sub	sp, #56	; 0x38
   10a4e:	af00      	add	r7, sp, #0
   10a50:	e9c7 0102 	strd	r0, r1, [r7, #8]
   10a54:	e9c7 2300 	strd	r2, r3, [r7]
	double coeff_1 = M_PI/4;
   10a58:	a357      	add	r3, pc, #348	; (adr r3, 10bb8 <pp_atan2+0x170>)
   10a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
   10a5e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double coeff_2 = 3*coeff_1;
   10a62:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   10a66:	f04f 0200 	mov.w	r2, #0
   10a6a:	f04f 0300 	mov.w	r3, #0
   10a6e:	f2c4 0308 	movt	r3, #16392	; 0x4008
   10a72:	f001 ffbf 	bl	129f4 <__aeabi_dmul>
   10a76:	4602      	mov	r2, r0
   10a78:	460b      	mov	r3, r1
   10a7a:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double abs_y = fabs(y)+1e-10;
   10a7e:	e9d7 0100 	ldrd	r0, r1, [r7]
   10a82:	f04f 0200 	mov.w	r2, #0
   10a86:	f04f 0300 	mov.w	r3, #0
   10a8a:	f002 fa25 	bl	12ed8 <__aeabi_dcmplt>
   10a8e:	4603      	mov	r3, r0
   10a90:	2b00      	cmp	r3, #0
   10a92:	d009      	beq.n	10aa8 <pp_atan2+0x60>
   10a94:	a14a      	add	r1, pc, #296	; (adr r1, 10bc0 <pp_atan2+0x178>)
   10a96:	e9d1 0100 	ldrd	r0, r1, [r1]
   10a9a:	e9d7 2300 	ldrd	r2, r3, [r7]
   10a9e:	f001 fdf5 	bl	1268c <__aeabi_dsub>
   10aa2:	4602      	mov	r2, r0
   10aa4:	460b      	mov	r3, r1
   10aa6:	e008      	b.n	10aba <pp_atan2+0x72>
   10aa8:	e9d7 0100 	ldrd	r0, r1, [r7]
   10aac:	a344      	add	r3, pc, #272	; (adr r3, 10bc0 <pp_atan2+0x178>)
   10aae:	e9d3 2300 	ldrd	r2, r3, [r3]
   10ab2:	f001 fded 	bl	12690 <__adddf3>
   10ab6:	4602      	mov	r2, r0
   10ab8:	460b      	mov	r3, r1
   10aba:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double angle, r;
	if(x>0)
   10abe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   10ac2:	f04f 0200 	mov.w	r2, #0
   10ac6:	f04f 0300 	mov.w	r3, #0
   10aca:	f002 fa23 	bl	12f14 <__aeabi_dcmpgt>
   10ace:	4603      	mov	r3, r0
   10ad0:	2b00      	cmp	r3, #0
   10ad2:	d02a      	beq.n	10b2a <pp_atan2+0xe2>
	{
		r = (x - abs_y)/(x + abs_y);
   10ad4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   10ad8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   10adc:	f001 fdd6 	bl	1268c <__aeabi_dsub>
   10ae0:	4602      	mov	r2, r0
   10ae2:	460b      	mov	r3, r1
   10ae4:	4690      	mov	r8, r2
   10ae6:	4699      	mov	r9, r3
   10ae8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   10aec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   10af0:	f001 fdce 	bl	12690 <__adddf3>
   10af4:	4602      	mov	r2, r0
   10af6:	460b      	mov	r3, r1
   10af8:	4640      	mov	r0, r8
   10afa:	4649      	mov	r1, r9
   10afc:	f002 f8a4 	bl	12c48 <__aeabi_ddiv>
   10b00:	4602      	mov	r2, r0
   10b02:	460b      	mov	r3, r1
   10b04:	e9c7 2304 	strd	r2, r3, [r7, #16]
		angle = coeff_1 - coeff_1*r;
   10b08:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   10b0c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   10b10:	f001 ff70 	bl	129f4 <__aeabi_dmul>
   10b14:	4602      	mov	r2, r0
   10b16:	460b      	mov	r3, r1
   10b18:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   10b1c:	f001 fdb6 	bl	1268c <__aeabi_dsub>
   10b20:	4602      	mov	r2, r0
   10b22:	460b      	mov	r3, r1
   10b24:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
   10b28:	e029      	b.n	10b7e <pp_atan2+0x136>
	}
	else
	{
		r = (x + abs_y)/(abs_y - x);
   10b2a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   10b2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   10b32:	f001 fdad 	bl	12690 <__adddf3>
   10b36:	4602      	mov	r2, r0
   10b38:	460b      	mov	r3, r1
   10b3a:	4690      	mov	r8, r2
   10b3c:	4699      	mov	r9, r3
   10b3e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   10b42:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   10b46:	f001 fda1 	bl	1268c <__aeabi_dsub>
   10b4a:	4602      	mov	r2, r0
   10b4c:	460b      	mov	r3, r1
   10b4e:	4640      	mov	r0, r8
   10b50:	4649      	mov	r1, r9
   10b52:	f002 f879 	bl	12c48 <__aeabi_ddiv>
   10b56:	4602      	mov	r2, r0
   10b58:	460b      	mov	r3, r1
   10b5a:	e9c7 2304 	strd	r2, r3, [r7, #16]
		angle = coeff_2 - coeff_1*r;
   10b5e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   10b62:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   10b66:	f001 ff45 	bl	129f4 <__aeabi_dmul>
   10b6a:	4602      	mov	r2, r0
   10b6c:	460b      	mov	r3, r1
   10b6e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
   10b72:	f001 fd8b 	bl	1268c <__aeabi_dsub>
   10b76:	4602      	mov	r2, r0
   10b78:	460b      	mov	r3, r1
   10b7a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	}
	if(y<0)
   10b7e:	e9d7 0100 	ldrd	r0, r1, [r7]
   10b82:	f04f 0200 	mov.w	r2, #0
   10b86:	f04f 0300 	mov.w	r3, #0
   10b8a:	f002 f9a5 	bl	12ed8 <__aeabi_dcmplt>
   10b8e:	4603      	mov	r3, r0
   10b90:	2b00      	cmp	r3, #0
   10b92:	d004      	beq.n	10b9e <pp_atan2+0x156>
		return (-angle);
   10b94:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   10b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10b98:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   10b9c:	e001      	b.n	10ba2 <pp_atan2+0x15a>
	else
		return angle;
   10b9e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
   10ba2:	4622      	mov	r2, r4
   10ba4:	462b      	mov	r3, r5
}
   10ba6:	4610      	mov	r0, r2
   10ba8:	4619      	mov	r1, r3
   10baa:	3738      	adds	r7, #56	; 0x38
   10bac:	46bd      	mov	sp, r7
   10bae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
   10bb2:	bf00      	nop
   10bb4:	f3af 8000 	nop.w
   10bb8:	54442d18 	.word	0x54442d18
   10bbc:	3fe921fb 	.word	0x3fe921fb
   10bc0:	d9d7bdbb 	.word	0xd9d7bdbb
   10bc4:	3ddb7cdf 	.word	0x3ddb7cdf

00010bc8 <pp_sin>:
 * Range: -pi/2 <= x <= pi/2
 * Precision: +/- .000,000,005
 */
 
double pp_sin(double x)
{
   10bc8:	b5b0      	push	{r4, r5, r7, lr}
   10bca:	b08c      	sub	sp, #48	; 0x30
   10bcc:	af00      	add	r7, sp, #0
   10bce:	e9c7 0100 	strd	r0, r1, [r7]
	double xi, y, q, q2;
	int sign;

	xi = x; sign = 1;
   10bd2:	e9d7 2300 	ldrd	r2, r3, [r7]
   10bd6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   10bda:	2301      	movs	r3, #1
   10bdc:	627b      	str	r3, [r7, #36]	; 0x24
	while (xi < -1.57079632679489661923) xi += 6.28318530717958647692;
   10bde:	e00a      	b.n	10bf6 <pp_sin+0x2e>
   10be0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   10be4:	a35a      	add	r3, pc, #360	; (adr r3, 10d50 <pp_sin+0x188>)
   10be6:	e9d3 2300 	ldrd	r2, r3, [r3]
   10bea:	f001 fd51 	bl	12690 <__adddf3>
   10bee:	4602      	mov	r2, r0
   10bf0:	460b      	mov	r3, r1
   10bf2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   10bf6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   10bfa:	a357      	add	r3, pc, #348	; (adr r3, 10d58 <pp_sin+0x190>)
   10bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
   10c00:	f002 f96a 	bl	12ed8 <__aeabi_dcmplt>
   10c04:	4603      	mov	r3, r0
   10c06:	2b00      	cmp	r3, #0
   10c08:	d1ea      	bne.n	10be0 <pp_sin+0x18>
	while (xi > 4.71238898038468985769) xi -= 6.28318530717958647692;
   10c0a:	e00a      	b.n	10c22 <pp_sin+0x5a>
   10c0c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   10c10:	a34f      	add	r3, pc, #316	; (adr r3, 10d50 <pp_sin+0x188>)
   10c12:	e9d3 2300 	ldrd	r2, r3, [r3]
   10c16:	f001 fd39 	bl	1268c <__aeabi_dsub>
   10c1a:	4602      	mov	r2, r0
   10c1c:	460b      	mov	r3, r1
   10c1e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   10c22:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   10c26:	a34e      	add	r3, pc, #312	; (adr r3, 10d60 <pp_sin+0x198>)
   10c28:	e9d3 2300 	ldrd	r2, r3, [r3]
   10c2c:	f002 f972 	bl	12f14 <__aeabi_dcmpgt>
   10c30:	4603      	mov	r3, r0
   10c32:	2b00      	cmp	r3, #0
   10c34:	d1ea      	bne.n	10c0c <pp_sin+0x44>
	if (xi > 1.57079632679489661923) {
   10c36:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   10c3a:	a34b      	add	r3, pc, #300	; (adr r3, 10d68 <pp_sin+0x1a0>)
   10c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
   10c40:	f002 f968 	bl	12f14 <__aeabi_dcmpgt>
   10c44:	4603      	mov	r3, r0
   10c46:	2b00      	cmp	r3, #0
   10c48:	d00d      	beq.n	10c66 <pp_sin+0x9e>
		xi -= 3.141592653589793238462643;
   10c4a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   10c4e:	a348      	add	r3, pc, #288	; (adr r3, 10d70 <pp_sin+0x1a8>)
   10c50:	e9d3 2300 	ldrd	r2, r3, [r3]
   10c54:	f001 fd1a 	bl	1268c <__aeabi_dsub>
   10c58:	4602      	mov	r2, r0
   10c5a:	460b      	mov	r3, r1
   10c5c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		sign = -1;
   10c60:	f04f 33ff 	mov.w	r3, #4294967295
   10c64:	627b      	str	r3, [r7, #36]	; 0x24
	}
	q = xi / 1.57079632679; q2 = q * q;
   10c66:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   10c6a:	a343      	add	r3, pc, #268	; (adr r3, 10d78 <pp_sin+0x1b0>)
   10c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
   10c70:	f001 ffea 	bl	12c48 <__aeabi_ddiv>
   10c74:	4602      	mov	r2, r0
   10c76:	460b      	mov	r3, r1
   10c78:	e9c7 2306 	strd	r2, r3, [r7, #24]
   10c7c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   10c80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   10c84:	f001 feb6 	bl	129f4 <__aeabi_dmul>
   10c88:	4602      	mov	r2, r0
   10c8a:	460b      	mov	r3, r1
   10c8c:	e9c7 2304 	strd	r2, r3, [r7, #16]
	y = ((((.00015148419  * q2
   10c90:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   10c94:	a33a      	add	r3, pc, #232	; (adr r3, 10d80 <pp_sin+0x1b8>)
   10c96:	e9d3 2300 	ldrd	r2, r3, [r3]
   10c9a:	f001 feab 	bl	129f4 <__aeabi_dmul>
   10c9e:	4602      	mov	r2, r0
   10ca0:	460b      	mov	r3, r1
	      - .00467376557) * q2
   10ca2:	4610      	mov	r0, r2
   10ca4:	4619      	mov	r1, r3
   10ca6:	a338      	add	r3, pc, #224	; (adr r3, 10d88 <pp_sin+0x1c0>)
   10ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
   10cac:	f001 fcee 	bl	1268c <__aeabi_dsub>
   10cb0:	4602      	mov	r2, r0
   10cb2:	460b      	mov	r3, r1
   10cb4:	4610      	mov	r0, r2
   10cb6:	4619      	mov	r1, r3
   10cb8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   10cbc:	f001 fe9a 	bl	129f4 <__aeabi_dmul>
   10cc0:	4602      	mov	r2, r0
   10cc2:	460b      	mov	r3, r1
	      + .07968967928) * q2
   10cc4:	4610      	mov	r0, r2
   10cc6:	4619      	mov	r1, r3
   10cc8:	a331      	add	r3, pc, #196	; (adr r3, 10d90 <pp_sin+0x1c8>)
   10cca:	e9d3 2300 	ldrd	r2, r3, [r3]
   10cce:	f001 fcdf 	bl	12690 <__adddf3>
   10cd2:	4602      	mov	r2, r0
   10cd4:	460b      	mov	r3, r1
   10cd6:	4610      	mov	r0, r2
   10cd8:	4619      	mov	r1, r3
   10cda:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   10cde:	f001 fe89 	bl	129f4 <__aeabi_dmul>
   10ce2:	4602      	mov	r2, r0
   10ce4:	460b      	mov	r3, r1
	      - .64596371106) * q2
   10ce6:	4610      	mov	r0, r2
   10ce8:	4619      	mov	r1, r3
   10cea:	a32b      	add	r3, pc, #172	; (adr r3, 10d98 <pp_sin+0x1d0>)
   10cec:	e9d3 2300 	ldrd	r2, r3, [r3]
   10cf0:	f001 fccc 	bl	1268c <__aeabi_dsub>
   10cf4:	4602      	mov	r2, r0
   10cf6:	460b      	mov	r3, r1
   10cf8:	4610      	mov	r0, r2
   10cfa:	4619      	mov	r1, r3
   10cfc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   10d00:	f001 fe78 	bl	129f4 <__aeabi_dmul>
   10d04:	4602      	mov	r2, r0
   10d06:	460b      	mov	r3, r1
	      +1.57079631847) * q;
   10d08:	4610      	mov	r0, r2
   10d0a:	4619      	mov	r1, r3
   10d0c:	a324      	add	r3, pc, #144	; (adr r3, 10da0 <pp_sin+0x1d8>)
   10d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
   10d12:	f001 fcbd 	bl	12690 <__adddf3>
   10d16:	4602      	mov	r2, r0
   10d18:	460b      	mov	r3, r1
	if (xi > 1.57079632679489661923) {
		xi -= 3.141592653589793238462643;
		sign = -1;
	}
	q = xi / 1.57079632679; q2 = q * q;
	y = ((((.00015148419  * q2
   10d1a:	4610      	mov	r0, r2
   10d1c:	4619      	mov	r1, r3
   10d1e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   10d22:	f001 fe67 	bl	129f4 <__aeabi_dmul>
   10d26:	4602      	mov	r2, r0
   10d28:	460b      	mov	r3, r1
   10d2a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	      - .00467376557) * q2
	      + .07968967928) * q2
	      - .64596371106) * q2
	      +1.57079631847) * q;
	return(sign < 0? -y : y);
   10d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10d30:	2b00      	cmp	r3, #0
   10d32:	da04      	bge.n	10d3e <pp_sin+0x176>
   10d34:	68bc      	ldr	r4, [r7, #8]
   10d36:	68fb      	ldr	r3, [r7, #12]
   10d38:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   10d3c:	e001      	b.n	10d42 <pp_sin+0x17a>
   10d3e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
   10d42:	4622      	mov	r2, r4
   10d44:	462b      	mov	r3, r5
}
   10d46:	4610      	mov	r0, r2
   10d48:	4619      	mov	r1, r3
   10d4a:	3730      	adds	r7, #48	; 0x30
   10d4c:	46bd      	mov	sp, r7
   10d4e:	bdb0      	pop	{r4, r5, r7, pc}
   10d50:	54442d18 	.word	0x54442d18
   10d54:	401921fb 	.word	0x401921fb
   10d58:	54442d18 	.word	0x54442d18
   10d5c:	bff921fb 	.word	0xbff921fb
   10d60:	7f3321d2 	.word	0x7f3321d2
   10d64:	4012d97c 	.word	0x4012d97c
   10d68:	54442d18 	.word	0x54442d18
   10d6c:	3ff921fb 	.word	0x3ff921fb
   10d70:	54442d18 	.word	0x54442d18
   10d74:	400921fb 	.word	0x400921fb
   10d78:	5443d6f4 	.word	0x5443d6f4
   10d7c:	3ff921fb 	.word	0x3ff921fb
   10d80:	48a890af 	.word	0x48a890af
   10d84:	3f23daf7 	.word	0x3f23daf7
   10d88:	645b6d0e 	.word	0x645b6d0e
   10d8c:	3f7324cc 	.word	0x3f7324cc
   10d90:	f65619a5 	.word	0xf65619a5
   10d94:	3fb4668a 	.word	0x3fb4668a
   10d98:	16acf9cd 	.word	0x16acf9cd
   10d9c:	3fe4abbc 	.word	0x3fe4abbc
   10da0:	520817f7 	.word	0x520817f7
   10da4:	3ff921fb 	.word	0x3ff921fb

00010da8 <pp_sqrt>:

#define SQRT_PRECISION 5
double pp_sqrt(double n)
{
   10da8:	b480      	push	{r7}
   10daa:	b083      	sub	sp, #12
   10dac:	af00      	add	r7, sp, #0
   10dae:	e9c7 0100 	strd	r0, r1, [r7]
	/* perform the computation */
	for(i = 0; i < SQRT_PRECISION; i++)
		x = (x + n / x) / 2;
	return x;
#endif
}
   10db2:	4610      	mov	r0, r2
   10db4:	4619      	mov	r1, r3
   10db6:	370c      	adds	r7, #12
   10db8:	46bd      	mov	sp, r7
   10dba:	f85d 7b04 	ldr.w	r7, [sp], #4
   10dbe:	4770      	bx	lr

00010dc0 <fbw_adc_buf_channel>:

uint16_t fbw_adc_samples[ FBW_NB_ADC ];

static struct fbw_adc_buf* buffers[FBW_NB_ADC];

void fbw_adc_buf_channel(uint8_t adc_channel, struct fbw_adc_buf* s) {
   10dc0:	b480      	push	{r7}
   10dc2:	b083      	sub	sp, #12
   10dc4:	af00      	add	r7, sp, #0
   10dc6:	4603      	mov	r3, r0
   10dc8:	6039      	str	r1, [r7, #0]
   10dca:	71fb      	strb	r3, [r7, #7]
  buffers[adc_channel] = s;
   10dcc:	79fa      	ldrb	r2, [r7, #7]
   10dce:	f64b 4360 	movw	r3, #48224	; 0xbc60
   10dd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10dd6:	6839      	ldr	r1, [r7, #0]
   10dd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   10ddc:	370c      	adds	r7, #12
   10dde:	46bd      	mov	sp, r7
   10de0:	f85d 7b04 	ldr.w	r7, [sp], #4
   10de4:	4770      	bx	lr
   10de6:	bf00      	nop

00010de8 <fbw_adc_init>:

void 
fbw_adc_init( void )
{
   10de8:	b480      	push	{r7}
   10dea:	b083      	sub	sp, #12
   10dec:	af00      	add	r7, sp, #0
  uint8_t i;
  /* Ensure that our port is for input with no pull-ups */
  ANALOG_PORT 	= 0x00;
   10dee:	f248 0315 	movw	r3, #32789	; 0x8015
   10df2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10df6:	2200      	movs	r2, #0
   10df8:	701a      	strb	r2, [r3, #0]
  ANALOG_PORT_DIR	= 0x00;
   10dfa:	f248 0314 	movw	r3, #32788	; 0x8014
   10dfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e02:	2200      	movs	r2, #0
   10e04:	701a      	strb	r2, [r3, #0]

  /* Select our external voltage ref */
  ADMUX		= ANALOG_VREF;
   10e06:	f248 0307 	movw	r3, #32775	; 0x8007
   10e0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e0e:	22c0      	movs	r2, #192	; 0xc0
   10e10:	701a      	strb	r2, [r3, #0]

  /* Select out clock, turn on the ADC interrupt and start conversion */
  ADCSRA = 0
   10e12:	f248 0306 	movw	r3, #32774	; 0x8006
   10e16:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e1a:	22cf      	movs	r2, #207	; 0xcf
   10e1c:	701a      	strb	r2, [r3, #0]
    | _BV(ADEN )
    | _BV(ADIE )
    | _BV(ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < FBW_NB_ADC; i++)
   10e1e:	2300      	movs	r3, #0
   10e20:	71fb      	strb	r3, [r7, #7]
   10e22:	e00a      	b.n	10e3a <fbw_adc_init+0x52>
    buffers[i] = (struct fbw_adc_buf*)0;
   10e24:	79fa      	ldrb	r2, [r7, #7]
   10e26:	f64b 4360 	movw	r3, #48224	; 0xbc60
   10e2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e2e:	2100      	movs	r1, #0
   10e30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    | _BV(ADEN )
    | _BV(ADIE )
    | _BV(ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < FBW_NB_ADC; i++)
   10e34:	79fb      	ldrb	r3, [r7, #7]
   10e36:	3301      	adds	r3, #1
   10e38:	71fb      	strb	r3, [r7, #7]
   10e3a:	79fb      	ldrb	r3, [r7, #7]
   10e3c:	2b07      	cmp	r3, #7
   10e3e:	d9f1      	bls.n	10e24 <fbw_adc_init+0x3c>
    buffers[i] = (struct fbw_adc_buf*)0;
}
   10e40:	370c      	adds	r7, #12
   10e42:	46bd      	mov	sp, r7
   10e44:	f85d 7b04 	ldr.w	r7, [sp], #4
   10e48:	4770      	bx	lr
   10e4a:	bf00      	nop

00010e4c <__vector_34>:
#ifdef PAPABENCH_SINGLE
	SIGNAL(SIG_SPM_READY)
#else
	SIGNAL( SIG_INPUT_CAPTURE1 )
#endif
{
   10e4c:	b480      	push	{r7}
   10e4e:	b083      	sub	sp, #12
   10e50:	af00      	add	r7, sp, #0
  uint16_t		this;
  uint16_t		width;
  static uint8_t		state;
  static uint8_t		sync_start;

  this		= ICR1;
   10e52:	f248 0326 	movw	r3, #32806	; 0x8026
   10e56:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e5a:	881b      	ldrh	r3, [r3, #0]
   10e5c:	80fb      	strh	r3, [r7, #6]
  width		= this - last;
   10e5e:	f64b 43bc 	movw	r3, #48316	; 0xbcbc
   10e62:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e66:	881b      	ldrh	r3, [r3, #0]
   10e68:	88fa      	ldrh	r2, [r7, #6]
   10e6a:	1ad3      	subs	r3, r2, r3
   10e6c:	80bb      	strh	r3, [r7, #4]
  last		= this;
   10e6e:	f64b 43bc 	movw	r3, #48316	; 0xbcbc
   10e72:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e76:	88fa      	ldrh	r2, [r7, #6]
   10e78:	801a      	strh	r2, [r3, #0]
  
  if( state == 0 ) {
   10e7a:	f64b 43be 	movw	r3, #48318	; 0xbcbe
   10e7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e82:	781b      	ldrb	r3, [r3, #0]
   10e84:	2b00      	cmp	r3, #0
   10e86:	d11e      	bne.n	10ec6 <__vector_34+0x7a>
    uint8_t	end = TCNT2;
   10e88:	f248 0324 	movw	r3, #32804	; 0x8024
   10e8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e90:	781b      	ldrb	r3, [r3, #0]
   10e92:	70fb      	strb	r3, [r7, #3]
    uint8_t diff = (end - sync_start);
   10e94:	f64b 43bf 	movw	r3, #48319	; 0xbcbf
   10e98:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e9c:	781b      	ldrb	r3, [r3, #0]
   10e9e:	78fa      	ldrb	r2, [r7, #3]
   10ea0:	1ad3      	subs	r3, r2, r3
   10ea2:	70bb      	strb	r3, [r7, #2]
    sync_start = end;
   10ea4:	f64b 43bf 	movw	r3, #48319	; 0xbcbf
   10ea8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10eac:	78fa      	ldrb	r2, [r7, #3]
   10eae:	701a      	strb	r2, [r3, #0]

    /* The frame period of the mc3030 seems to be 25ms. 
     * One pulse lasts from 1.05ms to 2.150ms.
     * Sync pulse is at least 7ms : (7000*CLOCK)/1024 = 109
     */
    if( diff > (uint8_t)(((uint32_t)(7000ul*CLOCK))/1024ul) ) {
   10eb0:	78bb      	ldrb	r3, [r7, #2]
   10eb2:	2b6d      	cmp	r3, #109	; 0x6d
   10eb4:	d906      	bls.n	10ec4 <__vector_34+0x78>
      state = 1;
   10eb6:	f64b 43be 	movw	r3, #48318	; 0xbcbe
   10eba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ebe:	2201      	movs	r2, #1
   10ec0:	701a      	strb	r2, [r3, #0]
   10ec2:	e053      	b.n	10f6c <__vector_34+0x120>
   10ec4:	e052      	b.n	10f6c <__vector_34+0x120>
    }
  } 
  else {
    /* Read a data pulses */
    if( width < 700ul*CLOCK || width > 2300ul*CLOCK)
   10ec6:	88bb      	ldrh	r3, [r7, #4]
   10ec8:	f5b3 5f2f 	cmp.w	r3, #11200	; 0x2bc0
   10ecc:	d304      	bcc.n	10ed8 <__vector_34+0x8c>
   10ece:	88ba      	ldrh	r2, [r7, #4]
   10ed0:	f648 73c0 	movw	r3, #36800	; 0x8fc0
   10ed4:	429a      	cmp	r2, r3
   10ed6:	d911      	bls.n	10efc <__vector_34+0xb0>
      RestartPpmCycle();
   10ed8:	f64b 43be 	movw	r3, #48318	; 0xbcbe
   10edc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ee0:	2200      	movs	r2, #0
   10ee2:	701a      	strb	r2, [r3, #0]
   10ee4:	f248 0324 	movw	r3, #32804	; 0x8024
   10ee8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10eec:	781b      	ldrb	r3, [r3, #0]
   10eee:	b2da      	uxtb	r2, r3
   10ef0:	f64b 43bf 	movw	r3, #48319	; 0xbcbf
   10ef4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ef8:	701a      	strb	r2, [r3, #0]
   10efa:	e038      	b.n	10f6e <__vector_34+0x122>
    ppm_pulses[state - 1] = width;
   10efc:	f64b 43be 	movw	r3, #48318	; 0xbcbe
   10f00:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f04:	781b      	ldrb	r3, [r3, #0]
   10f06:	1e5a      	subs	r2, r3, #1
   10f08:	f64b 4380 	movw	r3, #48256	; 0xbc80
   10f0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f10:	88b9      	ldrh	r1, [r7, #4]
   10f12:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

    if (state >= PPM_NB_PULSES) {
   10f16:	f64b 43be 	movw	r3, #48318	; 0xbcbe
   10f1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f1e:	781b      	ldrb	r3, [r3, #0]
   10f20:	2b08      	cmp	r3, #8
   10f22:	d917      	bls.n	10f54 <__vector_34+0x108>
      ppm_valid	= 1;
   10f24:	f64b 43bb 	movw	r3, #48315	; 0xbcbb
   10f28:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f2c:	2201      	movs	r2, #1
   10f2e:	701a      	strb	r2, [r3, #0]
      RestartPpmCycle();
   10f30:	f64b 43be 	movw	r3, #48318	; 0xbcbe
   10f34:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f38:	2200      	movs	r2, #0
   10f3a:	701a      	strb	r2, [r3, #0]
   10f3c:	f248 0324 	movw	r3, #32804	; 0x8024
   10f40:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f44:	781b      	ldrb	r3, [r3, #0]
   10f46:	b2da      	uxtb	r2, r3
   10f48:	f64b 43bf 	movw	r3, #48319	; 0xbcbf
   10f4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f50:	701a      	strb	r2, [r3, #0]
   10f52:	e00c      	b.n	10f6e <__vector_34+0x122>
    } else 
      state++;
   10f54:	f64b 43be 	movw	r3, #48318	; 0xbcbe
   10f58:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f5c:	781b      	ldrb	r3, [r3, #0]
   10f5e:	3301      	adds	r3, #1
   10f60:	b2da      	uxtb	r2, r3
   10f62:	f64b 43be 	movw	r3, #48318	; 0xbcbe
   10f66:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f6a:	701a      	strb	r2, [r3, #0]
  }
  return;
   10f6c:	bf00      	nop
}
   10f6e:	370c      	adds	r7, #12
   10f70:	46bd      	mov	sp, r7
   10f72:	f85d 7b04 	ldr.w	r7, [sp], #4
   10f76:	4770      	bx	lr

00010f78 <last_radio_from_ppm>:

/* Copy from the ppm receiving buffer to the buffer sent to mcu0 */
void last_radio_from_ppm() {
   10f78:	b590      	push	{r4, r7, lr}
   10f7a:	b083      	sub	sp, #12
   10f7c:	af00      	add	r7, sp, #0
  LastRadioFromPpm()
   10f7e:	f64b 4380 	movw	r3, #48256	; 0xbc80
   10f82:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f86:	881b      	ldrh	r3, [r3, #0]
   10f88:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
   10f8c:	b29b      	uxth	r3, r3
   10f8e:	80fb      	strh	r3, [r7, #6]
   10f90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   10f94:	4618      	mov	r0, r3
   10f96:	f002 f919 	bl	131cc <__aeabi_i2f>
   10f9a:	4603      	mov	r3, r0
   10f9c:	4618      	mov	r0, r3
   10f9e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   10fa2:	f002 f967 	bl	13274 <__aeabi_fmul>
   10fa6:	4603      	mov	r3, r0
   10fa8:	4618      	mov	r0, r3
   10faa:	f002 fb29 	bl	13600 <__aeabi_f2iz>
   10fae:	4603      	mov	r3, r0
   10fb0:	b29a      	uxth	r2, r3
   10fb2:	f64b 4394 	movw	r3, #48276	; 0xbc94
   10fb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10fba:	801a      	strh	r2, [r3, #0]
   10fbc:	f64b 4394 	movw	r3, #48276	; 0xbc94
   10fc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10fc4:	881b      	ldrh	r3, [r3, #0]
   10fc6:	b21b      	sxth	r3, r3
   10fc8:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   10fcc:	dd07      	ble.n	10fde <last_radio_from_ppm+0x66>
   10fce:	f64b 4394 	movw	r3, #48276	; 0xbc94
   10fd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10fd6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   10fda:	801a      	strh	r2, [r3, #0]
   10fdc:	e00d      	b.n	10ffa <last_radio_from_ppm+0x82>
   10fde:	f64b 4394 	movw	r3, #48276	; 0xbc94
   10fe2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10fe6:	881b      	ldrh	r3, [r3, #0]
   10fe8:	b21b      	sxth	r3, r3
   10fea:	2b00      	cmp	r3, #0
   10fec:	da05      	bge.n	10ffa <last_radio_from_ppm+0x82>
   10fee:	f64b 4394 	movw	r3, #48276	; 0xbc94
   10ff2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ff6:	2200      	movs	r2, #0
   10ff8:	801a      	strh	r2, [r3, #0]
   10ffa:	f64b 4380 	movw	r3, #48256	; 0xbc80
   10ffe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11002:	885b      	ldrh	r3, [r3, #2]
   11004:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   11008:	b29b      	uxth	r3, r3
   1100a:	80fb      	strh	r3, [r7, #6]
   1100c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   11010:	4618      	mov	r0, r3
   11012:	f002 f8db 	bl	131cc <__aeabi_i2f>
   11016:	4603      	mov	r3, r0
   11018:	4618      	mov	r0, r3
   1101a:	f002 faf1 	bl	13600 <__aeabi_f2iz>
   1101e:	4603      	mov	r3, r0
   11020:	b29a      	uxth	r2, r3
   11022:	f64b 4394 	movw	r3, #48276	; 0xbc94
   11026:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1102a:	805a      	strh	r2, [r3, #2]
   1102c:	f64b 4394 	movw	r3, #48276	; 0xbc94
   11030:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11034:	885b      	ldrh	r3, [r3, #2]
   11036:	b21b      	sxth	r3, r3
   11038:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1103c:	dd07      	ble.n	1104e <last_radio_from_ppm+0xd6>
   1103e:	f64b 4394 	movw	r3, #48276	; 0xbc94
   11042:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11046:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   1104a:	805a      	strh	r2, [r3, #2]
   1104c:	e00f      	b.n	1106e <last_radio_from_ppm+0xf6>
   1104e:	f64b 4394 	movw	r3, #48276	; 0xbc94
   11052:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11056:	885b      	ldrh	r3, [r3, #2]
   11058:	b21b      	sxth	r3, r3
   1105a:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   1105e:	da06      	bge.n	1106e <last_radio_from_ppm+0xf6>
   11060:	f64b 4394 	movw	r3, #48276	; 0xbc94
   11064:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11068:	f64d 2280 	movw	r2, #55936	; 0xda80
   1106c:	805a      	strh	r2, [r3, #2]
   1106e:	f64b 4380 	movw	r3, #48256	; 0xbc80
   11072:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11076:	889b      	ldrh	r3, [r3, #4]
   11078:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   1107c:	b29b      	uxth	r3, r3
   1107e:	80fb      	strh	r3, [r7, #6]
   11080:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   11084:	4618      	mov	r0, r3
   11086:	f002 f8a1 	bl	131cc <__aeabi_i2f>
   1108a:	4603      	mov	r3, r0
   1108c:	4618      	mov	r0, r3
   1108e:	f002 fab7 	bl	13600 <__aeabi_f2iz>
   11092:	4603      	mov	r3, r0
   11094:	b29a      	uxth	r2, r3
   11096:	f64b 4394 	movw	r3, #48276	; 0xbc94
   1109a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1109e:	809a      	strh	r2, [r3, #4]
   110a0:	f64b 4394 	movw	r3, #48276	; 0xbc94
   110a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   110a8:	889b      	ldrh	r3, [r3, #4]
   110aa:	b21b      	sxth	r3, r3
   110ac:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   110b0:	dd07      	ble.n	110c2 <last_radio_from_ppm+0x14a>
   110b2:	f64b 4394 	movw	r3, #48276	; 0xbc94
   110b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   110ba:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   110be:	809a      	strh	r2, [r3, #4]
   110c0:	e00f      	b.n	110e2 <last_radio_from_ppm+0x16a>
   110c2:	f64b 4394 	movw	r3, #48276	; 0xbc94
   110c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   110ca:	889b      	ldrh	r3, [r3, #4]
   110cc:	b21b      	sxth	r3, r3
   110ce:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   110d2:	da06      	bge.n	110e2 <last_radio_from_ppm+0x16a>
   110d4:	f64b 4394 	movw	r3, #48276	; 0xbc94
   110d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   110dc:	f64d 2280 	movw	r2, #55936	; 0xda80
   110e0:	809a      	strh	r2, [r3, #4]
   110e2:	f64b 4380 	movw	r3, #48256	; 0xbc80
   110e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   110ea:	88db      	ldrh	r3, [r3, #6]
   110ec:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   110f0:	b29b      	uxth	r3, r3
   110f2:	80fb      	strh	r3, [r7, #6]
   110f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   110f8:	4618      	mov	r0, r3
   110fa:	f002 f867 	bl	131cc <__aeabi_i2f>
   110fe:	4603      	mov	r3, r0
   11100:	4618      	mov	r0, r3
   11102:	f002 fa7d 	bl	13600 <__aeabi_f2iz>
   11106:	4603      	mov	r3, r0
   11108:	b29a      	uxth	r2, r3
   1110a:	f64b 4394 	movw	r3, #48276	; 0xbc94
   1110e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11112:	80da      	strh	r2, [r3, #6]
   11114:	f64b 4394 	movw	r3, #48276	; 0xbc94
   11118:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1111c:	88db      	ldrh	r3, [r3, #6]
   1111e:	b21b      	sxth	r3, r3
   11120:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   11124:	dd07      	ble.n	11136 <last_radio_from_ppm+0x1be>
   11126:	f64b 4394 	movw	r3, #48276	; 0xbc94
   1112a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1112e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   11132:	80da      	strh	r2, [r3, #6]
   11134:	e00f      	b.n	11156 <last_radio_from_ppm+0x1de>
   11136:	f64b 4394 	movw	r3, #48276	; 0xbc94
   1113a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1113e:	88db      	ldrh	r3, [r3, #6]
   11140:	b21b      	sxth	r3, r3
   11142:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   11146:	da06      	bge.n	11156 <last_radio_from_ppm+0x1de>
   11148:	f64b 4394 	movw	r3, #48276	; 0xbc94
   1114c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11150:	f64d 2280 	movw	r2, #55936	; 0xda80
   11154:	80da      	strh	r2, [r3, #6]
   11156:	f64b 4380 	movw	r3, #48256	; 0xbc80
   1115a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1115e:	891b      	ldrh	r3, [r3, #8]
   11160:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   11164:	b29b      	uxth	r3, r3
   11166:	80fb      	strh	r3, [r7, #6]
   11168:	f64b 43a8 	movw	r3, #48296	; 0xbca8
   1116c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11170:	891b      	ldrh	r3, [r3, #8]
   11172:	b21b      	sxth	r3, r3
   11174:	4618      	mov	r0, r3
   11176:	f002 f829 	bl	131cc <__aeabi_i2f>
   1117a:	4604      	mov	r4, r0
   1117c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   11180:	4618      	mov	r0, r3
   11182:	f002 f823 	bl	131cc <__aeabi_i2f>
   11186:	4603      	mov	r3, r0
   11188:	4618      	mov	r0, r3
   1118a:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   1118e:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   11192:	f002 f86f 	bl	13274 <__aeabi_fmul>
   11196:	4603      	mov	r3, r0
   11198:	4620      	mov	r0, r4
   1119a:	4619      	mov	r1, r3
   1119c:	f001 ff62 	bl	13064 <__addsf3>
   111a0:	4603      	mov	r3, r0
   111a2:	4618      	mov	r0, r3
   111a4:	f002 fa2c 	bl	13600 <__aeabi_f2iz>
   111a8:	4603      	mov	r3, r0
   111aa:	b29a      	uxth	r2, r3
   111ac:	f64b 43a8 	movw	r3, #48296	; 0xbca8
   111b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111b4:	811a      	strh	r2, [r3, #8]
   111b6:	f64b 4380 	movw	r3, #48256	; 0xbc80
   111ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111be:	895b      	ldrh	r3, [r3, #10]
   111c0:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   111c4:	b29b      	uxth	r3, r3
   111c6:	80fb      	strh	r3, [r7, #6]
   111c8:	f64b 43a8 	movw	r3, #48296	; 0xbca8
   111cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111d0:	895b      	ldrh	r3, [r3, #10]
   111d2:	b21b      	sxth	r3, r3
   111d4:	4618      	mov	r0, r3
   111d6:	f001 fff9 	bl	131cc <__aeabi_i2f>
   111da:	4604      	mov	r4, r0
   111dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   111e0:	4618      	mov	r0, r3
   111e2:	f001 fff3 	bl	131cc <__aeabi_i2f>
   111e6:	4603      	mov	r3, r0
   111e8:	4618      	mov	r0, r3
   111ea:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   111ee:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   111f2:	f002 f83f 	bl	13274 <__aeabi_fmul>
   111f6:	4603      	mov	r3, r0
   111f8:	4620      	mov	r0, r4
   111fa:	4619      	mov	r1, r3
   111fc:	f001 ff32 	bl	13064 <__addsf3>
   11200:	4603      	mov	r3, r0
   11202:	4618      	mov	r0, r3
   11204:	f002 f9fc 	bl	13600 <__aeabi_f2iz>
   11208:	4603      	mov	r3, r0
   1120a:	b29a      	uxth	r2, r3
   1120c:	f64b 43a8 	movw	r3, #48296	; 0xbca8
   11210:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11214:	815a      	strh	r2, [r3, #10]
   11216:	f64b 4380 	movw	r3, #48256	; 0xbc80
   1121a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1121e:	899b      	ldrh	r3, [r3, #12]
   11220:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   11224:	b29b      	uxth	r3, r3
   11226:	80fb      	strh	r3, [r7, #6]
   11228:	f64b 43a8 	movw	r3, #48296	; 0xbca8
   1122c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11230:	899b      	ldrh	r3, [r3, #12]
   11232:	b21b      	sxth	r3, r3
   11234:	4618      	mov	r0, r3
   11236:	f001 ffc9 	bl	131cc <__aeabi_i2f>
   1123a:	4604      	mov	r4, r0
   1123c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   11240:	4618      	mov	r0, r3
   11242:	f001 ffc3 	bl	131cc <__aeabi_i2f>
   11246:	4603      	mov	r3, r0
   11248:	4618      	mov	r0, r3
   1124a:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   1124e:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   11252:	f002 f80f 	bl	13274 <__aeabi_fmul>
   11256:	4603      	mov	r3, r0
   11258:	4620      	mov	r0, r4
   1125a:	4619      	mov	r1, r3
   1125c:	f001 ff02 	bl	13064 <__addsf3>
   11260:	4603      	mov	r3, r0
   11262:	4618      	mov	r0, r3
   11264:	f002 f9cc 	bl	13600 <__aeabi_f2iz>
   11268:	4603      	mov	r3, r0
   1126a:	b29a      	uxth	r2, r3
   1126c:	f64b 43a8 	movw	r3, #48296	; 0xbca8
   11270:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11274:	819a      	strh	r2, [r3, #12]
   11276:	f64b 4380 	movw	r3, #48256	; 0xbc80
   1127a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1127e:	89db      	ldrh	r3, [r3, #14]
   11280:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   11284:	b29b      	uxth	r3, r3
   11286:	80fb      	strh	r3, [r7, #6]
   11288:	f64b 43a8 	movw	r3, #48296	; 0xbca8
   1128c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11290:	89db      	ldrh	r3, [r3, #14]
   11292:	b21b      	sxth	r3, r3
   11294:	4618      	mov	r0, r3
   11296:	f001 ff99 	bl	131cc <__aeabi_i2f>
   1129a:	4604      	mov	r4, r0
   1129c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   112a0:	4618      	mov	r0, r3
   112a2:	f001 ff93 	bl	131cc <__aeabi_i2f>
   112a6:	4603      	mov	r3, r0
   112a8:	4618      	mov	r0, r3
   112aa:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   112ae:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   112b2:	f001 ffdf 	bl	13274 <__aeabi_fmul>
   112b6:	4603      	mov	r3, r0
   112b8:	4620      	mov	r0, r4
   112ba:	4619      	mov	r1, r3
   112bc:	f001 fed2 	bl	13064 <__addsf3>
   112c0:	4603      	mov	r3, r0
   112c2:	4618      	mov	r0, r3
   112c4:	f002 f99c 	bl	13600 <__aeabi_f2iz>
   112c8:	4603      	mov	r3, r0
   112ca:	b29a      	uxth	r2, r3
   112cc:	f64b 43a8 	movw	r3, #48296	; 0xbca8
   112d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   112d4:	81da      	strh	r2, [r3, #14]
   112d6:	f64b 4380 	movw	r3, #48256	; 0xbc80
   112da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   112de:	8a1b      	ldrh	r3, [r3, #16]
   112e0:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   112e4:	b29b      	uxth	r3, r3
   112e6:	80fb      	strh	r3, [r7, #6]
   112e8:	f64b 43a8 	movw	r3, #48296	; 0xbca8
   112ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   112f0:	8a1b      	ldrh	r3, [r3, #16]
   112f2:	b21b      	sxth	r3, r3
   112f4:	4618      	mov	r0, r3
   112f6:	f001 ff69 	bl	131cc <__aeabi_i2f>
   112fa:	4604      	mov	r4, r0
   112fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   11300:	4618      	mov	r0, r3
   11302:	f001 ff63 	bl	131cc <__aeabi_i2f>
   11306:	4603      	mov	r3, r0
   11308:	4618      	mov	r0, r3
   1130a:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   1130e:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   11312:	f001 ffaf 	bl	13274 <__aeabi_fmul>
   11316:	4603      	mov	r3, r0
   11318:	4620      	mov	r0, r4
   1131a:	4619      	mov	r1, r3
   1131c:	f001 fea2 	bl	13064 <__addsf3>
   11320:	4603      	mov	r3, r0
   11322:	4618      	mov	r0, r3
   11324:	f002 f96c 	bl	13600 <__aeabi_f2iz>
   11328:	4603      	mov	r3, r0
   1132a:	b29a      	uxth	r2, r3
   1132c:	f64b 43a8 	movw	r3, #48296	; 0xbca8
   11330:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11334:	821a      	strh	r2, [r3, #16]
   11336:	f64b 43c0 	movw	r3, #48320	; 0xbcc0
   1133a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1133e:	781b      	ldrb	r3, [r3, #0]
   11340:	3301      	adds	r3, #1
   11342:	b2da      	uxtb	r2, r3
   11344:	f64b 43c0 	movw	r3, #48320	; 0xbcc0
   11348:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1134c:	701a      	strb	r2, [r3, #0]
   1134e:	f64b 43c0 	movw	r3, #48320	; 0xbcc0
   11352:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11356:	781b      	ldrb	r3, [r3, #0]
   11358:	2b0a      	cmp	r3, #10
   1135a:	f040 8101 	bne.w	11560 <last_radio_from_ppm+0x5e8>
   1135e:	f64b 43c0 	movw	r3, #48320	; 0xbcc0
   11362:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11366:	2200      	movs	r2, #0
   11368:	701a      	strb	r2, [r3, #0]
   1136a:	f64b 43a8 	movw	r3, #48296	; 0xbca8
   1136e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11372:	891a      	ldrh	r2, [r3, #8]
   11374:	f64b 4394 	movw	r3, #48276	; 0xbc94
   11378:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1137c:	811a      	strh	r2, [r3, #8]
   1137e:	f64b 43a8 	movw	r3, #48296	; 0xbca8
   11382:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11386:	2200      	movs	r2, #0
   11388:	811a      	strh	r2, [r3, #8]
   1138a:	f64b 4394 	movw	r3, #48276	; 0xbc94
   1138e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11392:	891b      	ldrh	r3, [r3, #8]
   11394:	b21b      	sxth	r3, r3
   11396:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1139a:	dd07      	ble.n	113ac <last_radio_from_ppm+0x434>
   1139c:	f64b 4394 	movw	r3, #48276	; 0xbc94
   113a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113a4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   113a8:	811a      	strh	r2, [r3, #8]
   113aa:	e00f      	b.n	113cc <last_radio_from_ppm+0x454>
   113ac:	f64b 4394 	movw	r3, #48276	; 0xbc94
   113b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113b4:	891b      	ldrh	r3, [r3, #8]
   113b6:	b21b      	sxth	r3, r3
   113b8:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   113bc:	da06      	bge.n	113cc <last_radio_from_ppm+0x454>
   113be:	f64b 4394 	movw	r3, #48276	; 0xbc94
   113c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113c6:	f64d 2280 	movw	r2, #55936	; 0xda80
   113ca:	811a      	strh	r2, [r3, #8]
   113cc:	f64b 43a8 	movw	r3, #48296	; 0xbca8
   113d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113d4:	895a      	ldrh	r2, [r3, #10]
   113d6:	f64b 4394 	movw	r3, #48276	; 0xbc94
   113da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113de:	815a      	strh	r2, [r3, #10]
   113e0:	f64b 43a8 	movw	r3, #48296	; 0xbca8
   113e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113e8:	2200      	movs	r2, #0
   113ea:	815a      	strh	r2, [r3, #10]
   113ec:	f64b 4394 	movw	r3, #48276	; 0xbc94
   113f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113f4:	895b      	ldrh	r3, [r3, #10]
   113f6:	b21b      	sxth	r3, r3
   113f8:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   113fc:	dd07      	ble.n	1140e <last_radio_from_ppm+0x496>
   113fe:	f64b 4394 	movw	r3, #48276	; 0xbc94
   11402:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11406:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   1140a:	815a      	strh	r2, [r3, #10]
   1140c:	e00f      	b.n	1142e <last_radio_from_ppm+0x4b6>
   1140e:	f64b 4394 	movw	r3, #48276	; 0xbc94
   11412:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11416:	895b      	ldrh	r3, [r3, #10]
   11418:	b21b      	sxth	r3, r3
   1141a:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   1141e:	da06      	bge.n	1142e <last_radio_from_ppm+0x4b6>
   11420:	f64b 4394 	movw	r3, #48276	; 0xbc94
   11424:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11428:	f64d 2280 	movw	r2, #55936	; 0xda80
   1142c:	815a      	strh	r2, [r3, #10]
   1142e:	f64b 43a8 	movw	r3, #48296	; 0xbca8
   11432:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11436:	899a      	ldrh	r2, [r3, #12]
   11438:	f64b 4394 	movw	r3, #48276	; 0xbc94
   1143c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11440:	819a      	strh	r2, [r3, #12]
   11442:	f64b 43a8 	movw	r3, #48296	; 0xbca8
   11446:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1144a:	2200      	movs	r2, #0
   1144c:	819a      	strh	r2, [r3, #12]
   1144e:	f64b 4394 	movw	r3, #48276	; 0xbc94
   11452:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11456:	899b      	ldrh	r3, [r3, #12]
   11458:	b21b      	sxth	r3, r3
   1145a:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1145e:	dd07      	ble.n	11470 <last_radio_from_ppm+0x4f8>
   11460:	f64b 4394 	movw	r3, #48276	; 0xbc94
   11464:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11468:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   1146c:	819a      	strh	r2, [r3, #12]
   1146e:	e00f      	b.n	11490 <last_radio_from_ppm+0x518>
   11470:	f64b 4394 	movw	r3, #48276	; 0xbc94
   11474:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11478:	899b      	ldrh	r3, [r3, #12]
   1147a:	b21b      	sxth	r3, r3
   1147c:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   11480:	da06      	bge.n	11490 <last_radio_from_ppm+0x518>
   11482:	f64b 4394 	movw	r3, #48276	; 0xbc94
   11486:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1148a:	f64d 2280 	movw	r2, #55936	; 0xda80
   1148e:	819a      	strh	r2, [r3, #12]
   11490:	f64b 43a8 	movw	r3, #48296	; 0xbca8
   11494:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11498:	89da      	ldrh	r2, [r3, #14]
   1149a:	f64b 4394 	movw	r3, #48276	; 0xbc94
   1149e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114a2:	81da      	strh	r2, [r3, #14]
   114a4:	f64b 43a8 	movw	r3, #48296	; 0xbca8
   114a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114ac:	2200      	movs	r2, #0
   114ae:	81da      	strh	r2, [r3, #14]
   114b0:	f64b 4394 	movw	r3, #48276	; 0xbc94
   114b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114b8:	89db      	ldrh	r3, [r3, #14]
   114ba:	b21b      	sxth	r3, r3
   114bc:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   114c0:	dd07      	ble.n	114d2 <last_radio_from_ppm+0x55a>
   114c2:	f64b 4394 	movw	r3, #48276	; 0xbc94
   114c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114ca:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   114ce:	81da      	strh	r2, [r3, #14]
   114d0:	e00f      	b.n	114f2 <last_radio_from_ppm+0x57a>
   114d2:	f64b 4394 	movw	r3, #48276	; 0xbc94
   114d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114da:	89db      	ldrh	r3, [r3, #14]
   114dc:	b21b      	sxth	r3, r3
   114de:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   114e2:	da06      	bge.n	114f2 <last_radio_from_ppm+0x57a>
   114e4:	f64b 4394 	movw	r3, #48276	; 0xbc94
   114e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114ec:	f64d 2280 	movw	r2, #55936	; 0xda80
   114f0:	81da      	strh	r2, [r3, #14]
   114f2:	f64b 43a8 	movw	r3, #48296	; 0xbca8
   114f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114fa:	8a1a      	ldrh	r2, [r3, #16]
   114fc:	f64b 4394 	movw	r3, #48276	; 0xbc94
   11500:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11504:	821a      	strh	r2, [r3, #16]
   11506:	f64b 43a8 	movw	r3, #48296	; 0xbca8
   1150a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1150e:	2200      	movs	r2, #0
   11510:	821a      	strh	r2, [r3, #16]
   11512:	f64b 4394 	movw	r3, #48276	; 0xbc94
   11516:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1151a:	8a1b      	ldrh	r3, [r3, #16]
   1151c:	b21b      	sxth	r3, r3
   1151e:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   11522:	dd07      	ble.n	11534 <last_radio_from_ppm+0x5bc>
   11524:	f64b 4394 	movw	r3, #48276	; 0xbc94
   11528:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1152c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   11530:	821a      	strh	r2, [r3, #16]
   11532:	e00f      	b.n	11554 <last_radio_from_ppm+0x5dc>
   11534:	f64b 4394 	movw	r3, #48276	; 0xbc94
   11538:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1153c:	8a1b      	ldrh	r3, [r3, #16]
   1153e:	b21b      	sxth	r3, r3
   11540:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   11544:	da06      	bge.n	11554 <last_radio_from_ppm+0x5dc>
   11546:	f64b 4394 	movw	r3, #48276	; 0xbc94
   1154a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1154e:	f64d 2280 	movw	r2, #55936	; 0xda80
   11552:	821a      	strh	r2, [r3, #16]
   11554:	f64b 43ba 	movw	r3, #48314	; 0xbcba
   11558:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1155c:	2201      	movs	r2, #1
   1155e:	701a      	strb	r2, [r3, #0]
}
   11560:	370c      	adds	r7, #12
   11562:	46bd      	mov	sp, r7
   11564:	bd90      	pop	{r4, r7, pc}
   11566:	bf00      	nop

00011568 <spi_reset>:
volatile bool_t spi_was_interrupted = FALSE;

static volatile uint8_t idx_buf = 0;
static volatile uint8_t xor_in, xor_out;

void spi_reset(void) {
   11568:	b480      	push	{r7}
   1156a:	af00      	add	r7, sp, #0
  idx_buf = 0;
   1156c:	f64b 43f4 	movw	r3, #48372	; 0xbcf4
   11570:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11574:	2200      	movs	r2, #0
   11576:	701a      	strb	r2, [r3, #0]
  xor_in = 0;
   11578:	f64b 43f5 	movw	r3, #48373	; 0xbcf5
   1157c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11580:	2200      	movs	r2, #0
   11582:	701a      	strb	r2, [r3, #0]
  xor_out = ((uint8_t*)&to_mega128)[idx_buf];
   11584:	f64b 43f4 	movw	r3, #48372	; 0xbcf4
   11588:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1158c:	781b      	ldrb	r3, [r3, #0]
   1158e:	b2db      	uxtb	r3, r3
   11590:	461a      	mov	r2, r3
   11592:	f64b 43dc 	movw	r3, #48348	; 0xbcdc
   11596:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1159a:	4413      	add	r3, r2
   1159c:	781a      	ldrb	r2, [r3, #0]
   1159e:	f64b 43f6 	movw	r3, #48374	; 0xbcf6
   115a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   115a6:	701a      	strb	r2, [r3, #0]
  SPDR = xor_out;
   115a8:	f248 030f 	movw	r3, #32783	; 0x800f
   115ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115b0:	f64b 42f6 	movw	r2, #48374	; 0xbcf6
   115b4:	f2c2 0204 	movt	r2, #8196	; 0x2004
   115b8:	7812      	ldrb	r2, [r2, #0]
   115ba:	b2d2      	uxtb	r2, r2
   115bc:	701a      	strb	r2, [r3, #0]
  mega128_receive_valid = FALSE;
   115be:	f64b 43f2 	movw	r3, #48370	; 0xbcf2
   115c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   115c6:	2200      	movs	r2, #0
   115c8:	701a      	strb	r2, [r3, #0]
}
   115ca:	46bd      	mov	sp, r7
   115cc:	f85d 7b04 	ldr.w	r7, [sp], #4
   115d0:	4770      	bx	lr
   115d2:	bf00      	nop

000115d4 <fbw_spi_init>:

void fbw_spi_init(void) {
   115d4:	b480      	push	{r7}
   115d6:	af00      	add	r7, sp, #0
  to_mega128.status = 0;
   115d8:	f64b 43dc 	movw	r3, #48348	; 0xbcdc
   115dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   115e0:	2200      	movs	r2, #0
   115e2:	74da      	strb	r2, [r3, #19]
  to_mega128.nb_err = 0;
   115e4:	f64b 43dc 	movw	r3, #48348	; 0xbcdc
   115e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   115ec:	2200      	movs	r2, #0
   115ee:	751a      	strb	r2, [r3, #20]

  /* set it pin output */
  //  IT_DDR |= _BV(IT_PIN);

  /* set MISO pin output */
  SPI_DDR |= _BV(SPI_MISO_PIN);
   115f0:	f248 0317 	movw	r3, #32791	; 0x8017
   115f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115f8:	f248 0217 	movw	r2, #32791	; 0x8017
   115fc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11600:	7812      	ldrb	r2, [r2, #0]
   11602:	b2d2      	uxtb	r2, r2
   11604:	f042 0210 	orr.w	r2, r2, #16
   11608:	b2d2      	uxtb	r2, r2
   1160a:	701a      	strb	r2, [r3, #0]
  /* enable SPI, slave, MSB first, sck idle low */
  SPCR = _BV(SPE);
   1160c:	f248 030d 	movw	r3, #32781	; 0x800d
   11610:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11614:	2240      	movs	r2, #64	; 0x40
   11616:	701a      	strb	r2, [r3, #0]
  /* enable interrupt */
  SPCR |= _BV(SPIE);
   11618:	f248 030d 	movw	r3, #32781	; 0x800d
   1161c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11620:	f248 020d 	movw	r2, #32781	; 0x800d
   11624:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11628:	7812      	ldrb	r2, [r2, #0]
   1162a:	b2d2      	uxtb	r2, r2
   1162c:	f062 027f 	orn	r2, r2, #127	; 0x7f
   11630:	b2d2      	uxtb	r2, r2
   11632:	701a      	strb	r2, [r3, #0]
}
   11634:	46bd      	mov	sp, r7
   11636:	f85d 7b04 	ldr.w	r7, [sp], #4
   1163a:	4770      	bx	lr
   1163c:	0000      	movs	r0, r0
	...

00011640 <timer_init>:
 * running at Clk/1024.  For 16 Mhz clock, this will be every
 * 16384 microseconds, or 61 Hz.
 */
static inline void
timer_init( void )
{
   11640:	b480      	push	{r7}
   11642:	af00      	add	r7, sp, #0
  /* Timer1 @ Clk/1: System clock, ppm and servos pulses */
  TCCR1A		= 0x00;
   11644:	f248 032f 	movw	r3, #32815	; 0x802f
   11648:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1164c:	2200      	movs	r2, #0
   1164e:	701a      	strb	r2, [r3, #0]
  TCCR1B		= 0x01;
   11650:	f248 032e 	movw	r3, #32814	; 0x802e
   11654:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11658:	2201      	movs	r2, #1
   1165a:	701a      	strb	r2, [r3, #0]
  
  /* Timer2 @ Clk/1024: Periodic clock            */
  TCCR2		= 0x07;
   1165c:	f248 0325 	movw	r3, #32805	; 0x8025
   11660:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11664:	2207      	movs	r2, #7
   11666:	701a      	strb	r2, [r3, #0]
}
   11668:	46bd      	mov	sp, r7
   1166a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1166e:	4770      	bx	lr

00011670 <ppm_init>:
 *
 * JR might be rising edge clocked; set that as an option
 */
static inline void
ppm_init( void )
{
   11670:	b480      	push	{r7}
   11672:	af00      	add	r7, sp, #0
#if   PPM_RX_TYPE == RXFUTABA
  cbi( TCCR1B, ICES1 );
   11674:	f248 032e 	movw	r3, #32814	; 0x802e
   11678:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1167c:	f248 022e 	movw	r2, #32814	; 0x802e
   11680:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11684:	7812      	ldrb	r2, [r2, #0]
   11686:	b2d2      	uxtb	r2, r2
   11688:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   1168c:	b2d2      	uxtb	r2, r2
   1168e:	701a      	strb	r2, [r3, #0]
#else
#	error "ppm.h: Unknown receiver type in PPM_RX_TYPE"
#endif

  /* No noise cancelation */
  sbi( TCCR1B, ICNC1 );
   11690:	f248 032e 	movw	r3, #32814	; 0x802e
   11694:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11698:	f248 022e 	movw	r2, #32814	; 0x802e
   1169c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   116a0:	7812      	ldrb	r2, [r2, #0]
   116a2:	b2d2      	uxtb	r2, r2
   116a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
   116a8:	b2d2      	uxtb	r2, r2
   116aa:	701a      	strb	r2, [r3, #0]
  
  /* Set ICP to input, no internal pull up */
  cbi( PPM_DDR, PPM_PIN);
   116ac:	f248 0317 	movw	r3, #32791	; 0x8017
   116b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116b4:	f248 0217 	movw	r2, #32791	; 0x8017
   116b8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   116bc:	7812      	ldrb	r2, [r2, #0]
   116be:	b2d2      	uxtb	r2, r2
   116c0:	f022 0201 	bic.w	r2, r2, #1
   116c4:	b2d2      	uxtb	r2, r2
   116c6:	701a      	strb	r2, [r3, #0]
  
  /* Enable interrupt on input capture */
  sbi( TIMSK, TICIE1 );
   116c8:	f248 0337 	movw	r3, #32823	; 0x8037
   116cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116d0:	f248 0237 	movw	r2, #32823	; 0x8037
   116d4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   116d8:	7812      	ldrb	r2, [r2, #0]
   116da:	b2d2      	uxtb	r2, r2
   116dc:	f042 0220 	orr.w	r2, r2, #32
   116e0:	b2d2      	uxtb	r2, r2
   116e2:	701a      	strb	r2, [r3, #0]
}
   116e4:	46bd      	mov	sp, r7
   116e6:	f85d 7b04 	ldr.w	r7, [sp], #4
   116ea:	4770      	bx	lr

000116ec <to_autopilot_from_last_radio>:
/*   uart_transmit('\n'); */
/* } */


/* Prepare data to be sent to mcu0 */
void to_autopilot_from_last_radio (void) {
   116ec:	b580      	push	{r7, lr}
   116ee:	b082      	sub	sp, #8
   116f0:	af00      	add	r7, sp, #0
  uint8_t i;
  for(i = 0; i < RADIO_CTL_NB; i++)
   116f2:	2300      	movs	r3, #0
   116f4:	71fb      	strb	r3, [r7, #7]
   116f6:	e010      	b.n	1171a <to_autopilot_from_last_radio+0x2e>
      to_mega128.channels[i] = last_radio[i];
   116f8:	79fa      	ldrb	r2, [r7, #7]
   116fa:	79f9      	ldrb	r1, [r7, #7]
   116fc:	f64b 4394 	movw	r3, #48276	; 0xbc94
   11700:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11704:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
   11708:	f64b 43dc 	movw	r3, #48348	; 0xbcdc
   1170c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11710:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]


/* Prepare data to be sent to mcu0 */
void to_autopilot_from_last_radio (void) {
  uint8_t i;
  for(i = 0; i < RADIO_CTL_NB; i++)
   11714:	79fb      	ldrb	r3, [r7, #7]
   11716:	3301      	adds	r3, #1
   11718:	71fb      	strb	r3, [r7, #7]
   1171a:	79fb      	ldrb	r3, [r7, #7]
   1171c:	2b08      	cmp	r3, #8
   1171e:	d9eb      	bls.n	116f8 <to_autopilot_from_last_radio+0xc>
      to_mega128.channels[i] = last_radio[i];

  to_mega128.status = (radio_ok ? _BV(STATUS_RADIO_OK) : 0);
   11720:	f64b 5384 	movw	r3, #48516	; 0xbd84
   11724:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11728:	781b      	ldrb	r3, [r3, #0]
   1172a:	2b00      	cmp	r3, #0
   1172c:	bf0c      	ite	eq
   1172e:	2300      	moveq	r3, #0
   11730:	2301      	movne	r3, #1
   11732:	b2db      	uxtb	r3, r3
   11734:	461a      	mov	r2, r3
   11736:	f64b 43dc 	movw	r3, #48348	; 0xbcdc
   1173a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1173e:	74da      	strb	r2, [r3, #19]
  to_mega128.status |= (radio_really_lost ? _BV(RADIO_REALLY_LOST) : 0);
   11740:	f64b 43dc 	movw	r3, #48348	; 0xbcdc
   11744:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11748:	7cdb      	ldrb	r3, [r3, #19]
   1174a:	b2da      	uxtb	r2, r3
   1174c:	f64b 5386 	movw	r3, #48518	; 0xbd86
   11750:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11754:	781b      	ldrb	r3, [r3, #0]
   11756:	2b00      	cmp	r3, #0
   11758:	d001      	beq.n	1175e <to_autopilot_from_last_radio+0x72>
   1175a:	2302      	movs	r3, #2
   1175c:	e000      	b.n	11760 <to_autopilot_from_last_radio+0x74>
   1175e:	2300      	movs	r3, #0
   11760:	4313      	orrs	r3, r2
   11762:	b2db      	uxtb	r3, r3
   11764:	b2da      	uxtb	r2, r3
   11766:	f64b 43dc 	movw	r3, #48348	; 0xbcdc
   1176a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1176e:	74da      	strb	r2, [r3, #19]
  if (last_radio_contains_avg_channels) {
   11770:	f64b 43ba 	movw	r3, #48314	; 0xbcba
   11774:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11778:	781b      	ldrb	r3, [r3, #0]
   1177a:	2b00      	cmp	r3, #0
   1177c:	d012      	beq.n	117a4 <to_autopilot_from_last_radio+0xb8>
      to_mega128.status |= _BV(AVERAGED_CHANNELS_SENT);
   1177e:	f64b 43dc 	movw	r3, #48348	; 0xbcdc
   11782:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11786:	7cdb      	ldrb	r3, [r3, #19]
   11788:	f043 0304 	orr.w	r3, r3, #4
   1178c:	b2da      	uxtb	r2, r3
   1178e:	f64b 43dc 	movw	r3, #48348	; 0xbcdc
   11792:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11796:	74da      	strb	r2, [r3, #19]
      last_radio_contains_avg_channels = FALSE;
   11798:	f64b 43ba 	movw	r3, #48314	; 0xbcba
   1179c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117a0:	2200      	movs	r2, #0
   117a2:	701a      	strb	r2, [r3, #0]
  }
  to_mega128.ppm_cpt = last_ppm_cpt;
   117a4:	f64b 5388 	movw	r3, #48520	; 0xbd88
   117a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117ac:	781a      	ldrb	r2, [r3, #0]
   117ae:	f64b 43dc 	movw	r3, #48348	; 0xbcdc
   117b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117b6:	749a      	strb	r2, [r3, #18]
#ifndef CTL_BRD_V1_1
  to_mega128.vsupply = VoltageOfAdc(vsupply_adc_buf.sum/AV_NB_SAMPLE) * 10;
   117b8:	f64b 43f8 	movw	r3, #48376	; 0xbcf8
   117bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117c0:	881b      	ldrh	r3, [r3, #0]
   117c2:	4618      	mov	r0, r3
   117c4:	f001 f8b0 	bl	12928 <__aeabi_i2d>
   117c8:	4602      	mov	r2, r0
   117ca:	460b      	mov	r3, r1
   117cc:	4610      	mov	r0, r2
   117ce:	4619      	mov	r1, r3
   117d0:	a31b      	add	r3, pc, #108	; (adr r3, 11840 <to_autopilot_from_last_radio+0x154>)
   117d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   117d6:	f001 f90d 	bl	129f4 <__aeabi_dmul>
   117da:	4602      	mov	r2, r0
   117dc:	460b      	mov	r3, r1
   117de:	4610      	mov	r0, r2
   117e0:	4619      	mov	r1, r3
   117e2:	f04f 0200 	mov.w	r2, #0
   117e6:	f04f 0300 	mov.w	r3, #0
   117ea:	f2c4 0340 	movt	r3, #16448	; 0x4040
   117ee:	f001 fa2b 	bl	12c48 <__aeabi_ddiv>
   117f2:	4602      	mov	r2, r0
   117f4:	460b      	mov	r3, r1
   117f6:	4610      	mov	r0, r2
   117f8:	4619      	mov	r1, r3
   117fa:	a313      	add	r3, pc, #76	; (adr r3, 11848 <to_autopilot_from_last_radio+0x15c>)
   117fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   11800:	f000 ff46 	bl	12690 <__adddf3>
   11804:	4602      	mov	r2, r0
   11806:	460b      	mov	r3, r1
   11808:	4610      	mov	r0, r2
   1180a:	4619      	mov	r1, r3
   1180c:	f04f 0200 	mov.w	r2, #0
   11810:	f04f 0300 	mov.w	r3, #0
   11814:	f2c4 0324 	movt	r3, #16420	; 0x4024
   11818:	f001 f8ec 	bl	129f4 <__aeabi_dmul>
   1181c:	4602      	mov	r2, r0
   1181e:	460b      	mov	r3, r1
   11820:	4610      	mov	r0, r2
   11822:	4619      	mov	r1, r3
   11824:	f001 fba8 	bl	12f78 <__aeabi_d2uiz>
   11828:	4603      	mov	r3, r0
   1182a:	b2da      	uxtb	r2, r3
   1182c:	f64b 43dc 	movw	r3, #48348	; 0xbcdc
   11830:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11834:	755a      	strb	r2, [r3, #21]
#else
  to_mega128.vsupply = 0;
#endif
}
   11836:	3708      	adds	r7, #8
   11838:	46bd      	mov	sp, r7
   1183a:	bd80      	pop	{r7, pc}
   1183c:	f3af 8000 	nop.w
   11840:	1eb851ec 	.word	0x1eb851ec
   11844:	3f91eb85 	.word	0x3f91eb85
   11848:	020c49ba 	.word	0x020c49ba
   1184c:	3fb6872b 	.word	0x3fb6872b

00011850 <send_data_to_autopilot_task>:

void send_data_to_autopilot_task(void)
{
   11850:	b580      	push	{r7, lr}
   11852:	af00      	add	r7, sp, #0
	//vPrintString("S_2 send_data_to_autopilot_task start! \n\r"); //SunnyBeike

    // modified by wanbo
//   if ( !SpiIsSelected() && spi_was_interrupted ) 
   {
      spi_was_interrupted = FALSE;
   11854:	f64b 43f3 	movw	r3, #48371	; 0xbcf3
   11858:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1185c:	2200      	movs	r2, #0
   1185e:	701a      	strb	r2, [r3, #0]
      to_autopilot_from_last_radio();
   11860:	f7ff ff44 	bl	116ec <to_autopilot_from_last_radio>
      spi_reset();
   11864:	f7ff fe80 	bl	11568 <spi_reset>
   }
	//vPrintString("S_2 send_data_to_autopilot_task end! \n\r"); //SunnyBeike

}
   11868:	bd80      	pop	{r7, pc}
   1186a:	bf00      	nop

0001186c <fbw_init>:
	static uint8_t _1Hz;
	static uint8_t _20Hz;
#endif
*/

void fbw_init(void) {
   1186c:	b580      	push	{r7, lr}
   1186e:	af00      	add	r7, sp, #0
  uart_init_tx();
   11870:	f000 fb16 	bl	11ea0 <uart_init_tx>
  uart_print_string("FBW Booting $Id: main.c,v 1.3 2008/10/22 19:41:19 casse Exp $\n\r");
   11874:	f643 00cc 	movw	r0, #14540	; 0x38cc
   11878:	f2c0 0001 	movt	r0, #1
   1187c:	f000 fbee 	bl	1205c <uart_print_string>

#ifndef CTL_BRD_V1_1
  fbw_adc_init();
   11880:	f7ff fab2 	bl	10de8 <fbw_adc_init>
  fbw_adc_buf_channel(3, &vsupply_adc_buf);
   11884:	2003      	movs	r0, #3
   11886:	f64b 41f8 	movw	r1, #48376	; 0xbcf8
   1188a:	f2c2 0104 	movt	r1, #8196	; 0x2004
   1188e:	f7ff fa97 	bl	10dc0 <fbw_adc_buf_channel>
  fbw_adc_buf_channel(6, &vservos_adc_buf);
   11892:	2006      	movs	r0, #6
   11894:	f64b 513c 	movw	r1, #48444	; 0xbd3c
   11898:	f2c2 0104 	movt	r1, #8196	; 0x2004
   1189c:	f7ff fa90 	bl	10dc0 <fbw_adc_buf_channel>
#endif
  timer_init();
   118a0:	f7ff fece 	bl	11640 <timer_init>
  servo_init();
   118a4:	f000 f8a8 	bl	119f8 <servo_init>
  ppm_init();
   118a8:	f7ff fee2 	bl	11670 <ppm_init>
  fbw_spi_init();
   118ac:	f7ff fe92 	bl	115d4 <fbw_spi_init>
  //sei(); //FN
}
   118b0:	bd80      	pop	{r7, pc}
   118b2:	bf00      	nop

000118b4 <test_ppm_task>:
  return 0;
}
#endif
*/
void test_ppm_task(void)
{
   118b4:	b580      	push	{r7, lr}
   118b6:	af00      	add	r7, sp, #0
	//vPrintString("S_1 test_ppm_task start! \n\r"); //SunnyBeike
    // modified by wanbo
    //if( ppm_valid ) 
    {
      ppm_valid = FALSE;
   118b8:	f64b 43bb 	movw	r3, #48315	; 0xbcbb
   118bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118c0:	2200      	movs	r2, #0
   118c2:	701a      	strb	r2, [r3, #0]
      ppm_cpt++;
   118c4:	f64b 5387 	movw	r3, #48519	; 0xbd87
   118c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118cc:	781b      	ldrb	r3, [r3, #0]
   118ce:	3301      	adds	r3, #1
   118d0:	b2da      	uxtb	r2, r3
   118d2:	f64b 5387 	movw	r3, #48519	; 0xbd87
   118d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118da:	701a      	strb	r2, [r3, #0]
      radio_ok = TRUE;
   118dc:	f64b 5384 	movw	r3, #48516	; 0xbd84
   118e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118e4:	2201      	movs	r2, #1
   118e6:	701a      	strb	r2, [r3, #0]
      radio_really_lost = FALSE;
   118e8:	f64b 5386 	movw	r3, #48518	; 0xbd86
   118ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118f0:	2200      	movs	r2, #0
   118f2:	701a      	strb	r2, [r3, #0]
      time_since_last_ppm = 0;
   118f4:	f64b 5382 	movw	r3, #48514	; 0xbd82
   118f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118fc:	2200      	movs	r2, #0
   118fe:	801a      	strh	r2, [r3, #0]
      last_radio_from_ppm();
   11900:	f7ff fb3a 	bl	10f78 <last_radio_from_ppm>
      //if (last_radio_contains_avg_channels) 
      {
	mode = MODE_OF_PPRZ(last_radio[RADIO_MODE]);
   11904:	f64b 4394 	movw	r3, #48276	; 0xbc94
   11908:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1190c:	891b      	ldrh	r3, [r3, #8]
   1190e:	b21b      	sxth	r3, r3
   11910:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
   11914:	bfb4      	ite	lt
   11916:	2300      	movlt	r3, #0
   11918:	2301      	movge	r3, #1
   1191a:	b2db      	uxtb	r3, r3
   1191c:	461a      	mov	r2, r3
   1191e:	f64b 5380 	movw	r3, #48512	; 0xbd80
   11922:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11926:	701a      	strb	r2, [r3, #0]
      }
      if (mode == MODE_MANUAL) 
   11928:	f64b 5380 	movw	r3, #48512	; 0xbd80
   1192c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11930:	781b      	ldrb	r3, [r3, #0]
   11932:	2b00      	cmp	r3, #0
   11934:	d105      	bne.n	11942 <test_ppm_task+0x8e>
      {
	servo_set(last_radio);
   11936:	f64b 4094 	movw	r0, #48276	; 0xbc94
   1193a:	f2c2 0004 	movt	r0, #8196	; 0x2004
   1193e:	f000 f939 	bl	11bb4 <servo_set>
      }
    } 
    //else if (mode == MODE_MANUAL && radio_really_lost) 
    {
      mode = MODE_AUTO;
   11942:	f64b 5380 	movw	r3, #48512	; 0xbd80
   11946:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1194a:	2201      	movs	r2, #1
   1194c:	701a      	strb	r2, [r3, #0]
    }
    //if (time_since_last_ppm >= STALLED_TIME) 
    {
      radio_ok = FALSE;
   1194e:	f64b 5384 	movw	r3, #48516	; 0xbd84
   11952:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11956:	2200      	movs	r2, #0
   11958:	701a      	strb	r2, [r3, #0]
    }
    //if (time_since_last_ppm >= REALLY_STALLED_TIME) 
    {
      radio_really_lost = TRUE;
   1195a:	f64b 5386 	movw	r3, #48518	; 0xbd86
   1195e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11962:	2201      	movs	r2, #1
   11964:	701a      	strb	r2, [r3, #0]
    }
	//vPrintString("S_1 test_ppm_task end! \n\r"); //SunnyBeike

}
   11966:	bd80      	pop	{r7, pc}

00011968 <check_failsafe_task>:
void check_failsafe_task(void)
{
   11968:	b580      	push	{r7, lr}
   1196a:	af00      	add	r7, sp, #0
	//vPrintString("S_9 check_failsafe_task start! \n\r"); //SunnyBeike
    //modified by wanbo
    if ((mode == MODE_MANUAL && !radio_ok) || (mode == MODE_AUTO && !mega128_ok)) 
   1196c:	f64b 5380 	movw	r3, #48512	; 0xbd80
   11970:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11974:	781b      	ldrb	r3, [r3, #0]
   11976:	2b00      	cmp	r3, #0
   11978:	d106      	bne.n	11988 <check_failsafe_task+0x20>
   1197a:	f64b 5384 	movw	r3, #48516	; 0xbd84
   1197e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11982:	781b      	ldrb	r3, [r3, #0]
   11984:	2b00      	cmp	r3, #0
   11986:	d00d      	beq.n	119a4 <check_failsafe_task+0x3c>
   11988:	f64b 5380 	movw	r3, #48512	; 0xbd80
   1198c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11990:	781b      	ldrb	r3, [r3, #0]
   11992:	2b01      	cmp	r3, #1
   11994:	d10c      	bne.n	119b0 <check_failsafe_task+0x48>
   11996:	f64b 5385 	movw	r3, #48517	; 0xbd85
   1199a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1199e:	781b      	ldrb	r3, [r3, #0]
   119a0:	2b00      	cmp	r3, #0
   119a2:	d105      	bne.n	119b0 <check_failsafe_task+0x48>
    {
      servo_set(failsafe);
   119a4:	f643 00b8 	movw	r0, #14520	; 0x38b8
   119a8:	f2c0 0001 	movt	r0, #1
   119ac:	f000 f902 	bl	11bb4 <servo_set>
    }
	//vPrintString("S_9 check_failsafe_task end! \n\r"); //SunnyBeike
}
   119b0:	bd80      	pop	{r7, pc}
   119b2:	bf00      	nop

000119b4 <check_mega128_values_task>:
void check_mega128_values_task(void)
{
   119b4:	b580      	push	{r7, lr}
   119b6:	af00      	add	r7, sp, #0
     //if ( !SpiIsSelected() && spi_was_interrupted ) 
     {
         
        // if (mega128_receive_valid)
         { 
             time_since_last_mega128 = 0;
   119b8:	f64b 5381 	movw	r3, #48513	; 0xbd81
   119bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119c0:	2200      	movs	r2, #0
   119c2:	701a      	strb	r2, [r3, #0]
             mega128_ok = TRUE;
   119c4:	f64b 5385 	movw	r3, #48517	; 0xbd85
   119c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119cc:	2201      	movs	r2, #1
   119ce:	701a      	strb	r2, [r3, #0]
             if (mode == MODE_AUTO)
   119d0:	f64b 5380 	movw	r3, #48512	; 0xbd80
   119d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119d8:	781b      	ldrb	r3, [r3, #0]
   119da:	2b01      	cmp	r3, #1
   119dc:	d105      	bne.n	119ea <check_mega128_values_task+0x36>
                 servo_set(from_mega128.channels);
   119de:	f64b 40c4 	movw	r0, #48324	; 0xbcc4
   119e2:	f2c2 0004 	movt	r0, #8196	; 0x2004
   119e6:	f000 f8e5 	bl	11bb4 <servo_set>
         }
     }
     //if (time_since_last_mega128 == STALLED_TIME) 
     {
         mega128_ok = FALSE;
   119ea:	f64b 5385 	movw	r3, #48517	; 0xbd85
   119ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119f2:	2200      	movs	r2, #0
   119f4:	701a      	strb	r2, [r3, #0]
     }
	//vPrintString("S_8 check_mega128_values_task end! \n\r"); //SunnyBeike
}
   119f6:	bd80      	pop	{r7, pc}

000119f8 <servo_init>:
 *
 * Ideally, you can use two decade counters to drive 20 servos.
 */
void
servo_init( void )
{
   119f8:	b480      	push	{r7}
   119fa:	b083      	sub	sp, #12
   119fc:	af00      	add	r7, sp, #0
  uint8_t			i;

  /* Configure the reset and clock lines */
  _4017_RESET_DDR |= _BV(_4017_RESET_PIN);
   119fe:	f248 0311 	movw	r3, #32785	; 0x8011
   11a02:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a06:	f248 0211 	movw	r2, #32785	; 0x8011
   11a0a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11a0e:	7812      	ldrb	r2, [r2, #0]
   11a10:	b2d2      	uxtb	r2, r2
   11a12:	f062 027f 	orn	r2, r2, #127	; 0x7f
   11a16:	b2d2      	uxtb	r2, r2
   11a18:	701a      	strb	r2, [r3, #0]
  _4017_CLOCK_DDR |= _BV(_4017_CLOCK_PIN);
   11a1a:	f248 0317 	movw	r3, #32791	; 0x8017
   11a1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a22:	f248 0217 	movw	r2, #32791	; 0x8017
   11a26:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11a2a:	7812      	ldrb	r2, [r2, #0]
   11a2c:	b2d2      	uxtb	r2, r2
   11a2e:	f042 0202 	orr.w	r2, r2, #2
   11a32:	b2d2      	uxtb	r2, r2
   11a34:	701a      	strb	r2, [r3, #0]

  /* Reset the decade counter */
  sbi( _4017_RESET_PORT, _4017_RESET_PIN );
   11a36:	f248 0312 	movw	r3, #32786	; 0x8012
   11a3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a3e:	f248 0212 	movw	r2, #32786	; 0x8012
   11a42:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11a46:	7812      	ldrb	r2, [r2, #0]
   11a48:	b2d2      	uxtb	r2, r2
   11a4a:	f062 027f 	orn	r2, r2, #127	; 0x7f
   11a4e:	b2d2      	uxtb	r2, r2
   11a50:	701a      	strb	r2, [r3, #0]

  /* Lower the regular servo line */
  cbi( _4017_CLOCK_PORT, _4017_CLOCK_PIN );
   11a52:	f248 0318 	movw	r3, #32792	; 0x8018
   11a56:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a5a:	f248 0218 	movw	r2, #32792	; 0x8018
   11a5e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11a62:	7812      	ldrb	r2, [r2, #0]
   11a64:	b2d2      	uxtb	r2, r2
   11a66:	f022 0202 	bic.w	r2, r2, #2
   11a6a:	b2d2      	uxtb	r2, r2
   11a6c:	701a      	strb	r2, [r3, #0]

  /* Set all servos at their midpoints */
  for( i=0 ; i < _4017_NB_CHANNELS ; i++ )
   11a6e:	2300      	movs	r3, #0
   11a70:	71fb      	strb	r3, [r7, #7]
   11a72:	e00b      	b.n	11a8c <servo_init+0x94>
    //    servo_widths[i] = SERVO_MIN;
    servo_widths[i] = (SERVO_MIN+SERVO_MAX)/2;
   11a74:	79fa      	ldrb	r2, [r7, #7]
   11a76:	f64b 538c 	movw	r3, #48524	; 0xbd8c
   11a7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a7e:	f645 51c0 	movw	r1, #24000	; 0x5dc0
   11a82:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

  /* Lower the regular servo line */
  cbi( _4017_CLOCK_PORT, _4017_CLOCK_PIN );

  /* Set all servos at their midpoints */
  for( i=0 ; i < _4017_NB_CHANNELS ; i++ )
   11a86:	79fb      	ldrb	r3, [r7, #7]
   11a88:	3301      	adds	r3, #1
   11a8a:	71fb      	strb	r3, [r7, #7]
   11a8c:	79fb      	ldrb	r3, [r7, #7]
   11a8e:	2b09      	cmp	r3, #9
   11a90:	d9f0      	bls.n	11a74 <servo_init+0x7c>
    //    servo_widths[i] = SERVO_MIN;
    servo_widths[i] = (SERVO_MIN+SERVO_MAX)/2;
	
  /* Set servos to go off some long time from now */
  SERVO_OCR	= 32768ul;
   11a92:	f248 032a 	movw	r3, #32810	; 0x802a
   11a96:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a9a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   11a9e:	801a      	strh	r2, [r3, #0]

  /*
   * Configure output compare to toggle the output bits.
   */
  TCCR1A |=  _BV(SERVO_COM0 );
   11aa0:	f248 032f 	movw	r3, #32815	; 0x802f
   11aa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11aa8:	f248 022f 	movw	r2, #32815	; 0x802f
   11aac:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11ab0:	7812      	ldrb	r2, [r2, #0]
   11ab2:	b2d2      	uxtb	r2, r2
   11ab4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   11ab8:	b2d2      	uxtb	r2, r2
   11aba:	701a      	strb	r2, [r3, #0]
	
  /* Clear the interrupt flags in case they are set */
  TIFR = _BV(SERVO_FLAG);
   11abc:	f248 0336 	movw	r3, #32822	; 0x8036
   11ac0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ac4:	2210      	movs	r2, #16
   11ac6:	701a      	strb	r2, [r3, #0]

  /* Unassert the decade counter reset to start it running */
  cbi( _4017_RESET_PORT, _4017_RESET_PIN );
   11ac8:	f248 0312 	movw	r3, #32786	; 0x8012
   11acc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ad0:	f248 0212 	movw	r2, #32786	; 0x8012
   11ad4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11ad8:	7812      	ldrb	r2, [r2, #0]
   11ada:	b2d2      	uxtb	r2, r2
   11adc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   11ae0:	b2d2      	uxtb	r2, r2
   11ae2:	701a      	strb	r2, [r3, #0]

  /* Enable our output compare interrupts */
  TIMSK |= _BV(SERVO_ENABLE );
   11ae4:	f248 0337 	movw	r3, #32823	; 0x8037
   11ae8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11aec:	f248 0237 	movw	r2, #32823	; 0x8037
   11af0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11af4:	7812      	ldrb	r2, [r2, #0]
   11af6:	b2d2      	uxtb	r2, r2
   11af8:	f042 0210 	orr.w	r2, r2, #16
   11afc:	b2d2      	uxtb	r2, r2
   11afe:	701a      	strb	r2, [r3, #0]
}
   11b00:	370c      	adds	r7, #12
   11b02:	46bd      	mov	sp, r7
   11b04:	f85d 7b04 	ldr.w	r7, [sp], #4
   11b08:	4770      	bx	lr
   11b0a:	bf00      	nop

00011b0c <servo_set_one>:

  servo++;
}
#endif

void servo_set_one(uint8_t servo, uint16_t value_us) {
   11b0c:	b480      	push	{r7}
   11b0e:	b083      	sub	sp, #12
   11b10:	af00      	add	r7, sp, #0
   11b12:	4602      	mov	r2, r0
   11b14:	460b      	mov	r3, r1
   11b16:	71fa      	strb	r2, [r7, #7]
   11b18:	80bb      	strh	r3, [r7, #4]
  servo_widths[servo] = ChopServo(CLOCK*value_us);
   11b1a:	79f9      	ldrb	r1, [r7, #7]
   11b1c:	88bb      	ldrh	r3, [r7, #4]
   11b1e:	011b      	lsls	r3, r3, #4
   11b20:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   11b24:	d308      	bcc.n	11b38 <servo_set_one+0x2c>
   11b26:	88bb      	ldrh	r3, [r7, #4]
   11b28:	011b      	lsls	r3, r3, #4
   11b2a:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   11b2e:	bf28      	it	cs
   11b30:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   11b34:	b29a      	uxth	r2, r3
   11b36:	e001      	b.n	11b3c <servo_set_one+0x30>
   11b38:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   11b3c:	f64b 538c 	movw	r3, #48524	; 0xbd8c
   11b40:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b44:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
}
   11b48:	370c      	adds	r7, #12
   11b4a:	46bd      	mov	sp, r7
   11b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
   11b50:	4770      	bx	lr
   11b52:	bf00      	nop

00011b54 <servo_transmit>:

void 
servo_transmit(void) {
   11b54:	b580      	push	{r7, lr}
   11b56:	b082      	sub	sp, #8
   11b58:	af00      	add	r7, sp, #0
  uint8_t servo;
	//vPrintString("S_10 servo_transmit start! \n\r"); //SunnyBeike
  uart_transmit((uint8_t)0); uart_transmit((uint8_t)0);
   11b5a:	2000      	movs	r0, #0
   11b5c:	f000 f9e6 	bl	11f2c <uart_transmit>
   11b60:	2000      	movs	r0, #0
   11b62:	f000 f9e3 	bl	11f2c <uart_transmit>

  for(servo = 0; servo < _4017_NB_CHANNELS; servo++) {
   11b66:	2300      	movs	r3, #0
   11b68:	71fb      	strb	r3, [r7, #7]
   11b6a:	e01a      	b.n	11ba2 <servo_transmit+0x4e>
    uart_transmit((uint8_t)(servo_widths[servo] >> 8));
   11b6c:	79fa      	ldrb	r2, [r7, #7]
   11b6e:	f64b 538c 	movw	r3, #48524	; 0xbd8c
   11b72:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b76:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   11b7a:	0a1b      	lsrs	r3, r3, #8
   11b7c:	b29b      	uxth	r3, r3
   11b7e:	b2db      	uxtb	r3, r3
   11b80:	4618      	mov	r0, r3
   11b82:	f000 f9d3 	bl	11f2c <uart_transmit>
    uart_transmit((uint8_t)(servo_widths[servo] & 0xff));
   11b86:	79fa      	ldrb	r2, [r7, #7]
   11b88:	f64b 538c 	movw	r3, #48524	; 0xbd8c
   11b8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b90:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   11b94:	b2db      	uxtb	r3, r3
   11b96:	4618      	mov	r0, r3
   11b98:	f000 f9c8 	bl	11f2c <uart_transmit>
servo_transmit(void) {
  uint8_t servo;
	//vPrintString("S_10 servo_transmit start! \n\r"); //SunnyBeike
  uart_transmit((uint8_t)0); uart_transmit((uint8_t)0);

  for(servo = 0; servo < _4017_NB_CHANNELS; servo++) {
   11b9c:	79fb      	ldrb	r3, [r7, #7]
   11b9e:	3301      	adds	r3, #1
   11ba0:	71fb      	strb	r3, [r7, #7]
   11ba2:	79fb      	ldrb	r3, [r7, #7]
   11ba4:	2b09      	cmp	r3, #9
   11ba6:	d9e1      	bls.n	11b6c <servo_transmit+0x18>
    uart_transmit((uint8_t)(servo_widths[servo] >> 8));
    uart_transmit((uint8_t)(servo_widths[servo] & 0xff));
  }
  uart_transmit((uint8_t)'\n');
   11ba8:	200a      	movs	r0, #10
   11baa:	f000 f9bf 	bl	11f2c <uart_transmit>
	//vPrintString("S_10 servo_transmit end! \n\r"); //SunnyBeike
}
   11bae:	3708      	adds	r7, #8
   11bb0:	46bd      	mov	sp, r7
   11bb2:	bd80      	pop	{r7, pc}

00011bb4 <servo_set>:
 *
 * defines how servos react to radio control or autopilot channels
 *
 */

void servo_set(const pprz_t values[]) {
   11bb4:	b5b0      	push	{r4, r5, r7, lr}
   11bb6:	b084      	sub	sp, #16
   11bb8:	af00      	add	r7, sp, #0
   11bba:	6078      	str	r0, [r7, #4]
  ServoSet(values); /*Generated from airframe.xml */
   11bbc:	687b      	ldr	r3, [r7, #4]
   11bbe:	330a      	adds	r3, #10
   11bc0:	881b      	ldrh	r3, [r3, #0]
   11bc2:	b21b      	sxth	r3, r3
   11bc4:	005b      	lsls	r3, r3, #1
   11bc6:	4618      	mov	r0, r3
   11bc8:	f000 feae 	bl	12928 <__aeabi_i2d>
   11bcc:	4602      	mov	r2, r0
   11bce:	460b      	mov	r3, r1
   11bd0:	4610      	mov	r0, r2
   11bd2:	4619      	mov	r1, r3
   11bd4:	a3a6      	add	r3, pc, #664	; (adr r3, 11e70 <servo_set+0x2bc>)
   11bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
   11bda:	f000 ff0b 	bl	129f4 <__aeabi_dmul>
   11bde:	4602      	mov	r2, r0
   11be0:	460b      	mov	r3, r1
   11be2:	4610      	mov	r0, r2
   11be4:	4619      	mov	r1, r3
   11be6:	f001 f99f 	bl	12f28 <__aeabi_d2iz>
   11bea:	4603      	mov	r3, r0
   11bec:	b29b      	uxth	r3, r3
   11bee:	b29b      	uxth	r3, r3
   11bf0:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
   11bf4:	81fb      	strh	r3, [r7, #14]
   11bf6:	89fb      	ldrh	r3, [r7, #14]
   11bf8:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   11bfc:	d307      	bcc.n	11c0e <servo_set+0x5a>
   11bfe:	89fb      	ldrh	r3, [r7, #14]
   11c00:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   11c04:	bf28      	it	cs
   11c06:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   11c0a:	b29a      	uxth	r2, r3
   11c0c:	e001      	b.n	11c12 <servo_set+0x5e>
   11c0e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   11c12:	f64b 538c 	movw	r3, #48524	; 0xbd8c
   11c16:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c1a:	80da      	strh	r2, [r3, #6]
   11c1c:	687b      	ldr	r3, [r7, #4]
   11c1e:	881b      	ldrh	r3, [r3, #0]
   11c20:	b21b      	sxth	r3, r3
   11c22:	005b      	lsls	r3, r3, #1
   11c24:	4618      	mov	r0, r3
   11c26:	f000 fe7f 	bl	12928 <__aeabi_i2d>
   11c2a:	4602      	mov	r2, r0
   11c2c:	460b      	mov	r3, r1
   11c2e:	4610      	mov	r0, r2
   11c30:	4619      	mov	r1, r3
   11c32:	a38f      	add	r3, pc, #572	; (adr r3, 11e70 <servo_set+0x2bc>)
   11c34:	e9d3 2300 	ldrd	r2, r3, [r3]
   11c38:	f000 fedc 	bl	129f4 <__aeabi_dmul>
   11c3c:	4602      	mov	r2, r0
   11c3e:	460b      	mov	r3, r1
   11c40:	4610      	mov	r0, r2
   11c42:	4619      	mov	r1, r3
   11c44:	f001 f970 	bl	12f28 <__aeabi_d2iz>
   11c48:	4603      	mov	r3, r0
   11c4a:	b29b      	uxth	r3, r3
   11c4c:	b29b      	uxth	r3, r3
   11c4e:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
   11c52:	81fb      	strh	r3, [r7, #14]
   11c54:	89fb      	ldrh	r3, [r7, #14]
   11c56:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   11c5a:	d307      	bcc.n	11c6c <servo_set+0xb8>
   11c5c:	89fb      	ldrh	r3, [r7, #14]
   11c5e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   11c62:	bf28      	it	cs
   11c64:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   11c68:	b29a      	uxth	r2, r3
   11c6a:	e001      	b.n	11c70 <servo_set+0xbc>
   11c6c:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   11c70:	f64b 538c 	movw	r3, #48524	; 0xbd8c
   11c74:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c78:	825a      	strh	r2, [r3, #18]
   11c7a:	687b      	ldr	r3, [r7, #4]
   11c7c:	3304      	adds	r3, #4
   11c7e:	881b      	ldrh	r3, [r3, #0]
   11c80:	b21b      	sxth	r3, r3
   11c82:	4618      	mov	r0, r3
   11c84:	f000 fe50 	bl	12928 <__aeabi_i2d>
   11c88:	4602      	mov	r2, r0
   11c8a:	460b      	mov	r3, r1
   11c8c:	4610      	mov	r0, r2
   11c8e:	4619      	mov	r1, r3
   11c90:	a379      	add	r3, pc, #484	; (adr r3, 11e78 <servo_set+0x2c4>)
   11c92:	e9d3 2300 	ldrd	r2, r3, [r3]
   11c96:	f000 fead 	bl	129f4 <__aeabi_dmul>
   11c9a:	4602      	mov	r2, r0
   11c9c:	460b      	mov	r3, r1
   11c9e:	4610      	mov	r0, r2
   11ca0:	4619      	mov	r1, r3
   11ca2:	f001 f941 	bl	12f28 <__aeabi_d2iz>
   11ca6:	4603      	mov	r3, r0
   11ca8:	b29b      	uxth	r3, r3
   11caa:	b29b      	uxth	r3, r3
   11cac:	f503 43bf 	add.w	r3, r3, #24448	; 0x5f80
   11cb0:	3320      	adds	r3, #32
   11cb2:	81fb      	strh	r3, [r7, #14]
   11cb4:	89fb      	ldrh	r3, [r7, #14]
   11cb6:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   11cba:	d307      	bcc.n	11ccc <servo_set+0x118>
   11cbc:	89fb      	ldrh	r3, [r7, #14]
   11cbe:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   11cc2:	bf28      	it	cs
   11cc4:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   11cc8:	b29a      	uxth	r2, r3
   11cca:	e001      	b.n	11cd0 <servo_set+0x11c>
   11ccc:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   11cd0:	f64b 538c 	movw	r3, #48524	; 0xbd8c
   11cd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11cd8:	819a      	strh	r2, [r3, #12]
   11cda:	687b      	ldr	r3, [r7, #4]
   11cdc:	885b      	ldrh	r3, [r3, #2]
   11cde:	81bb      	strh	r3, [r7, #12]
   11ce0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   11ce4:	2b00      	cmp	r3, #0
   11ce6:	dd06      	ble.n	11cf6 <servo_set+0x142>
   11ce8:	f04f 0400 	mov.w	r4, #0
   11cec:	f04f 0500 	mov.w	r5, #0
   11cf0:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
   11cf4:	e002      	b.n	11cfc <servo_set+0x148>
   11cf6:	a562      	add	r5, pc, #392	; (adr r5, 11e80 <servo_set+0x2cc>)
   11cf8:	e9d5 4500 	ldrd	r4, r5, [r5]
   11cfc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   11d00:	4618      	mov	r0, r3
   11d02:	f000 fe11 	bl	12928 <__aeabi_i2d>
   11d06:	4602      	mov	r2, r0
   11d08:	460b      	mov	r3, r1
   11d0a:	4620      	mov	r0, r4
   11d0c:	4629      	mov	r1, r5
   11d0e:	f000 fe71 	bl	129f4 <__aeabi_dmul>
   11d12:	4602      	mov	r2, r0
   11d14:	460b      	mov	r3, r1
   11d16:	4610      	mov	r0, r2
   11d18:	4619      	mov	r1, r3
   11d1a:	a35b      	add	r3, pc, #364	; (adr r3, 11e88 <servo_set+0x2d4>)
   11d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
   11d20:	f000 fe68 	bl	129f4 <__aeabi_dmul>
   11d24:	4602      	mov	r2, r0
   11d26:	460b      	mov	r3, r1
   11d28:	4610      	mov	r0, r2
   11d2a:	4619      	mov	r1, r3
   11d2c:	f001 f8fc 	bl	12f28 <__aeabi_d2iz>
   11d30:	4603      	mov	r3, r0
   11d32:	b29b      	uxth	r3, r3
   11d34:	b29b      	uxth	r3, r3
   11d36:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
   11d3a:	81fb      	strh	r3, [r7, #14]
   11d3c:	89fb      	ldrh	r3, [r7, #14]
   11d3e:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   11d42:	d307      	bcc.n	11d54 <servo_set+0x1a0>
   11d44:	89fb      	ldrh	r3, [r7, #14]
   11d46:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   11d4a:	bf28      	it	cs
   11d4c:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   11d50:	b29a      	uxth	r2, r3
   11d52:	e001      	b.n	11d58 <servo_set+0x1a4>
   11d54:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   11d58:	f64b 538c 	movw	r3, #48524	; 0xbd8c
   11d5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d60:	801a      	strh	r2, [r3, #0]
   11d62:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   11d66:	2b00      	cmp	r3, #0
   11d68:	dd03      	ble.n	11d72 <servo_set+0x1be>
   11d6a:	a545      	add	r5, pc, #276	; (adr r5, 11e80 <servo_set+0x2cc>)
   11d6c:	e9d5 4500 	ldrd	r4, r5, [r5]
   11d70:	e005      	b.n	11d7e <servo_set+0x1ca>
   11d72:	f04f 0400 	mov.w	r4, #0
   11d76:	f04f 0500 	mov.w	r5, #0
   11d7a:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
   11d7e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   11d82:	4618      	mov	r0, r3
   11d84:	f000 fdd0 	bl	12928 <__aeabi_i2d>
   11d88:	4602      	mov	r2, r0
   11d8a:	460b      	mov	r3, r1
   11d8c:	4620      	mov	r0, r4
   11d8e:	4629      	mov	r1, r5
   11d90:	f000 fe30 	bl	129f4 <__aeabi_dmul>
   11d94:	4602      	mov	r2, r0
   11d96:	460b      	mov	r3, r1
   11d98:	4610      	mov	r0, r2
   11d9a:	4619      	mov	r1, r3
   11d9c:	a33c      	add	r3, pc, #240	; (adr r3, 11e90 <servo_set+0x2dc>)
   11d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
   11da2:	f000 fe27 	bl	129f4 <__aeabi_dmul>
   11da6:	4602      	mov	r2, r0
   11da8:	460b      	mov	r3, r1
   11daa:	4610      	mov	r0, r2
   11dac:	4619      	mov	r1, r3
   11dae:	f001 f8bb 	bl	12f28 <__aeabi_d2iz>
   11db2:	4603      	mov	r3, r0
   11db4:	b29b      	uxth	r3, r3
   11db6:	b29b      	uxth	r3, r3
   11db8:	f503 43ce 	add.w	r3, r3, #26368	; 0x6700
   11dbc:	3320      	adds	r3, #32
   11dbe:	81fb      	strh	r3, [r7, #14]
   11dc0:	89fb      	ldrh	r3, [r7, #14]
   11dc2:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   11dc6:	d307      	bcc.n	11dd8 <servo_set+0x224>
   11dc8:	89fb      	ldrh	r3, [r7, #14]
   11dca:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   11dce:	bf28      	it	cs
   11dd0:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   11dd4:	b29a      	uxth	r2, r3
   11dd6:	e001      	b.n	11ddc <servo_set+0x228>
   11dd8:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   11ddc:	f64b 538c 	movw	r3, #48524	; 0xbd8c
   11de0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11de4:	809a      	strh	r2, [r3, #4]
   11de6:	687b      	ldr	r3, [r7, #4]
   11de8:	3306      	adds	r3, #6
   11dea:	881b      	ldrh	r3, [r3, #0]
   11dec:	b21b      	sxth	r3, r3
   11dee:	4618      	mov	r0, r3
   11df0:	f000 fd9a 	bl	12928 <__aeabi_i2d>
   11df4:	4604      	mov	r4, r0
   11df6:	460d      	mov	r5, r1
   11df8:	687b      	ldr	r3, [r7, #4]
   11dfa:	3302      	adds	r3, #2
   11dfc:	881b      	ldrh	r3, [r3, #0]
   11dfe:	b21b      	sxth	r3, r3
   11e00:	4618      	mov	r0, r3
   11e02:	f000 fd91 	bl	12928 <__aeabi_i2d>
   11e06:	4602      	mov	r2, r0
   11e08:	460b      	mov	r3, r1
   11e0a:	4620      	mov	r0, r4
   11e0c:	4629      	mov	r1, r5
   11e0e:	f000 fc3f 	bl	12690 <__adddf3>
   11e12:	4602      	mov	r2, r0
   11e14:	460b      	mov	r3, r1
   11e16:	4610      	mov	r0, r2
   11e18:	4619      	mov	r1, r3
   11e1a:	a31f      	add	r3, pc, #124	; (adr r3, 11e98 <servo_set+0x2e4>)
   11e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
   11e20:	f000 fde8 	bl	129f4 <__aeabi_dmul>
   11e24:	4602      	mov	r2, r0
   11e26:	460b      	mov	r3, r1
   11e28:	4610      	mov	r0, r2
   11e2a:	4619      	mov	r1, r3
   11e2c:	f001 f87c 	bl	12f28 <__aeabi_d2iz>
   11e30:	4603      	mov	r3, r0
   11e32:	b29b      	uxth	r3, r3
   11e34:	b29b      	uxth	r3, r3
   11e36:	f503 43b5 	add.w	r3, r3, #23168	; 0x5a80
   11e3a:	3320      	adds	r3, #32
   11e3c:	81fb      	strh	r3, [r7, #14]
   11e3e:	89fb      	ldrh	r3, [r7, #14]
   11e40:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   11e44:	d307      	bcc.n	11e56 <servo_set+0x2a2>
   11e46:	89fb      	ldrh	r3, [r7, #14]
   11e48:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   11e4c:	bf28      	it	cs
   11e4e:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   11e52:	b29a      	uxth	r2, r3
   11e54:	e001      	b.n	11e5a <servo_set+0x2a6>
   11e56:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   11e5a:	f64b 538c 	movw	r3, #48524	; 0xbd8c
   11e5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11e62:	81da      	strh	r2, [r3, #14]
}
   11e64:	3710      	adds	r7, #16
   11e66:	46bd      	mov	sp, r7
   11e68:	bdb0      	pop	{r4, r5, r7, pc}
   11e6a:	bf00      	nop
   11e6c:	f3af 8000 	nop.w
   11e70:	aaaa9ef0 	.word	0xaaaa9ef0
   11e74:	3feaaaaa 	.word	0x3feaaaaa
   11e78:	fc96473e 	.word	0xfc96473e
   11e7c:	3fdfc962 	.word	0x3fdfc962
   11e80:	51eb851f 	.word	0x51eb851f
   11e84:	3fe51eb8 	.word	0x3fe51eb8
   11e88:	9999999a 	.word	0x9999999a
   11e8c:	bfe19999 	.word	0xbfe19999
   11e90:	aaaa9ef0 	.word	0xaaaa9ef0
   11e94:	bfe0aaaa 	.word	0xbfe0aaaa
   11e98:	eeeed77a 	.word	0xeeeed77a
   11e9c:	bfdeeeee 	.word	0xbfdeeeee

00011ea0 <uart_init_tx>:
 * UART Baud rate generation settings:
 *
 * With 16.0 MHz clock,UBRR=25  => 38400 baud
 *
 */
void uart_init_tx( void ) {
   11ea0:	b480      	push	{r7}
   11ea2:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRRH = 0; 
   11ea4:	f248 0320 	movw	r3, #32800	; 0x8020
   11ea8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11eac:	2200      	movs	r2, #0
   11eae:	701a      	strb	r2, [r3, #0]
  UBRRL = 25; 
   11eb0:	f248 0309 	movw	r3, #32777	; 0x8009
   11eb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11eb8:	2219      	movs	r2, #25
   11eba:	701a      	strb	r2, [r3, #0]
  /* single speed */ 
  UCSRA = 0; 
   11ebc:	f248 030b 	movw	r3, #32779	; 0x800b
   11ec0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ec4:	2200      	movs	r2, #0
   11ec6:	701a      	strb	r2, [r3, #0]
  /* Enable transmitter */ 
  UCSRB = _BV(TXEN); 
   11ec8:	f248 030a 	movw	r3, #32778	; 0x800a
   11ecc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ed0:	2208      	movs	r2, #8
   11ed2:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0); 
   11ed4:	f248 0320 	movw	r3, #32800	; 0x8020
   11ed8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11edc:	2286      	movs	r2, #134	; 0x86
   11ede:	701a      	strb	r2, [r3, #0]
}
   11ee0:	46bd      	mov	sp, r7
   11ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
   11ee6:	4770      	bx	lr

00011ee8 <uart_init_rx>:

void uart_init_rx() {
   11ee8:	b480      	push	{r7}
   11eea:	af00      	add	r7, sp, #0
  /* Enable receiver               */ 
  UCSRB |= _BV(RXEN); 
   11eec:	f248 030a 	movw	r3, #32778	; 0x800a
   11ef0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ef4:	f248 020a 	movw	r2, #32778	; 0x800a
   11ef8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11efc:	7812      	ldrb	r2, [r2, #0]
   11efe:	b2d2      	uxtb	r2, r2
   11f00:	f042 0210 	orr.w	r2, r2, #16
   11f04:	b2d2      	uxtb	r2, r2
   11f06:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi( UCSRB, RXCIE ); 
   11f08:	f248 030a 	movw	r3, #32778	; 0x800a
   11f0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f10:	f248 020a 	movw	r2, #32778	; 0x800a
   11f14:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11f18:	7812      	ldrb	r2, [r2, #0]
   11f1a:	b2d2      	uxtb	r2, r2
   11f1c:	f062 027f 	orn	r2, r2, #127	; 0x7f
   11f20:	b2d2      	uxtb	r2, r2
   11f22:	701a      	strb	r2, [r3, #0]
}
   11f24:	46bd      	mov	sp, r7
   11f26:	f85d 7b04 	ldr.w	r7, [sp], #4
   11f2a:	4770      	bx	lr

00011f2c <uart_transmit>:

void uart_transmit( unsigned char data ) {
   11f2c:	b480      	push	{r7}
   11f2e:	b083      	sub	sp, #12
   11f30:	af00      	add	r7, sp, #0
   11f32:	4603      	mov	r3, r0
   11f34:	71fb      	strb	r3, [r7, #7]
  if (UCSRB & _BV(TXCIE)) {
   11f36:	f248 030a 	movw	r3, #32778	; 0x800a
   11f3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f3e:	781b      	ldrb	r3, [r3, #0]
   11f40:	b2db      	uxtb	r3, r3
   11f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
   11f46:	2b00      	cmp	r3, #0
   11f48:	d028      	beq.n	11f9c <uart_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail == tx_head + 1) { /* BUF_SIZE = 256 */
   11f4a:	f64b 53a1 	movw	r3, #48545	; 0xbda1
   11f4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11f52:	781b      	ldrb	r3, [r3, #0]
   11f54:	b2db      	uxtb	r3, r3
   11f56:	461a      	mov	r2, r3
   11f58:	f64b 53a0 	movw	r3, #48544	; 0xbda0
   11f5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11f60:	781b      	ldrb	r3, [r3, #0]
   11f62:	3301      	adds	r3, #1
   11f64:	429a      	cmp	r2, r3
   11f66:	d100      	bne.n	11f6a <uart_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   11f68:	e02c      	b.n	11fc4 <uart_transmit+0x98>
    }
    tx_buf[tx_head] = data;
   11f6a:	f64b 53a0 	movw	r3, #48544	; 0xbda0
   11f6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11f72:	781b      	ldrb	r3, [r3, #0]
   11f74:	461a      	mov	r2, r3
   11f76:	f64b 53a4 	movw	r3, #48548	; 0xbda4
   11f7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11f7e:	79f9      	ldrb	r1, [r7, #7]
   11f80:	5499      	strb	r1, [r3, r2]
    tx_head++; /* BUF_SIZE = 256 */
   11f82:	f64b 53a0 	movw	r3, #48544	; 0xbda0
   11f86:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11f8a:	781b      	ldrb	r3, [r3, #0]
   11f8c:	3301      	adds	r3, #1
   11f8e:	b2da      	uxtb	r2, r3
   11f90:	f64b 53a0 	movw	r3, #48544	; 0xbda0
   11f94:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11f98:	701a      	strb	r2, [r3, #0]
   11f9a:	e013      	b.n	11fc4 <uart_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR = data;
   11f9c:	f248 030c 	movw	r3, #32780	; 0x800c
   11fa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11fa4:	79fa      	ldrb	r2, [r7, #7]
   11fa6:	701a      	strb	r2, [r3, #0]
    sbi(UCSRB, TXCIE);
   11fa8:	f248 030a 	movw	r3, #32778	; 0x800a
   11fac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11fb0:	f248 020a 	movw	r2, #32778	; 0x800a
   11fb4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11fb8:	7812      	ldrb	r2, [r2, #0]
   11fba:	b2d2      	uxtb	r2, r2
   11fbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   11fc0:	b2d2      	uxtb	r2, r2
   11fc2:	701a      	strb	r2, [r3, #0]
  }
}
   11fc4:	370c      	adds	r7, #12
   11fc6:	46bd      	mov	sp, r7
   11fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
   11fcc:	4770      	bx	lr
   11fce:	bf00      	nop

00011fd0 <uart_print_hex>:

void uart_print_hex ( uint8_t c ) {
   11fd0:	b590      	push	{r4, r7, lr}
   11fd2:	b089      	sub	sp, #36	; 0x24
   11fd4:	af00      	add	r7, sp, #0
   11fd6:	4603      	mov	r3, r0
   11fd8:	71fb      	strb	r3, [r7, #7]
  const uint8_t hex[16] = { '0', '1', '2', '3', '4', '5', '6', '7', 
   11fda:	f643 130c 	movw	r3, #14604	; 0x390c
   11fde:	f2c0 0301 	movt	r3, #1
   11fe2:	f107 040c 	add.w	r4, r7, #12
   11fe6:	6818      	ldr	r0, [r3, #0]
   11fe8:	6859      	ldr	r1, [r3, #4]
   11fea:	689a      	ldr	r2, [r3, #8]
   11fec:	68db      	ldr	r3, [r3, #12]
   11fee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
  uint8_t high = (c & 0xF0)>>4;
   11ff0:	79fb      	ldrb	r3, [r7, #7]
   11ff2:	091b      	lsrs	r3, r3, #4
   11ff4:	77fb      	strb	r3, [r7, #31]
  uint8_t low  = c & 0x0F;
   11ff6:	79fb      	ldrb	r3, [r7, #7]
   11ff8:	f003 030f 	and.w	r3, r3, #15
   11ffc:	77bb      	strb	r3, [r7, #30]
    /*
    *Added by SunnyBeike
    * */
        high = 15;
   11ffe:	230f      	movs	r3, #15
   12000:	77fb      	strb	r3, [r7, #31]
        low = 15;
   12002:	230f      	movs	r3, #15
   12004:	77bb      	strb	r3, [r7, #30]
    /*
    *End
    * */

    uart_transmit(hex[high]);
   12006:	7ffb      	ldrb	r3, [r7, #31]
   12008:	f107 0220 	add.w	r2, r7, #32
   1200c:	4413      	add	r3, r2
   1200e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   12012:	4618      	mov	r0, r3
   12014:	f7ff ff8a 	bl	11f2c <uart_transmit>
  uart_transmit(hex[low]);
   12018:	7fbb      	ldrb	r3, [r7, #30]
   1201a:	f107 0220 	add.w	r2, r7, #32
   1201e:	4413      	add	r3, r2
   12020:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   12024:	4618      	mov	r0, r3
   12026:	f7ff ff81 	bl	11f2c <uart_transmit>
} 
   1202a:	3724      	adds	r7, #36	; 0x24
   1202c:	46bd      	mov	sp, r7
   1202e:	bd90      	pop	{r4, r7, pc}

00012030 <uart_print_hex16>:

void uart_print_hex16 ( uint16_t c ) {
   12030:	b580      	push	{r7, lr}
   12032:	b084      	sub	sp, #16
   12034:	af00      	add	r7, sp, #0
   12036:	4603      	mov	r3, r0
   12038:	80fb      	strh	r3, [r7, #6]
  uint8_t high = (uint8_t)(c>>8);
   1203a:	88fb      	ldrh	r3, [r7, #6]
   1203c:	0a1b      	lsrs	r3, r3, #8
   1203e:	b29b      	uxth	r3, r3
   12040:	73fb      	strb	r3, [r7, #15]
  uint8_t low  = (uint8_t)(c);
   12042:	88fb      	ldrh	r3, [r7, #6]
   12044:	73bb      	strb	r3, [r7, #14]
  uart_print_hex(high);
   12046:	7bfb      	ldrb	r3, [r7, #15]
   12048:	4618      	mov	r0, r3
   1204a:	f7ff ffc1 	bl	11fd0 <uart_print_hex>
  uart_print_hex(low);
   1204e:	7bbb      	ldrb	r3, [r7, #14]
   12050:	4618      	mov	r0, r3
   12052:	f7ff ffbd 	bl	11fd0 <uart_print_hex>
}
   12056:	3710      	adds	r7, #16
   12058:	46bd      	mov	sp, r7
   1205a:	bd80      	pop	{r7, pc}

0001205c <uart_print_string>:

void uart_print_string(const uint8_t* s) {
   1205c:	b580      	push	{r7, lr}
   1205e:	b084      	sub	sp, #16
   12060:	af00      	add	r7, sp, #0
   12062:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
   12064:	2300      	movs	r3, #0
   12066:	73fb      	strb	r3, [r7, #15]
  while (s[i]) {
   12068:	e009      	b.n	1207e <uart_print_string+0x22>
    uart_transmit(s[i]);
   1206a:	7bfb      	ldrb	r3, [r7, #15]
   1206c:	687a      	ldr	r2, [r7, #4]
   1206e:	4413      	add	r3, r2
   12070:	781b      	ldrb	r3, [r3, #0]
   12072:	4618      	mov	r0, r3
   12074:	f7ff ff5a 	bl	11f2c <uart_transmit>
    i++;
   12078:	7bfb      	ldrb	r3, [r7, #15]
   1207a:	3301      	adds	r3, #1
   1207c:	73fb      	strb	r3, [r7, #15]
  uart_print_hex(low);
}

void uart_print_string(const uint8_t* s) {
  uint8_t i = 0;
  while (s[i]) {
   1207e:	7bfb      	ldrb	r3, [r7, #15]
   12080:	687a      	ldr	r2, [r7, #4]
   12082:	4413      	add	r3, r2
   12084:	781b      	ldrb	r3, [r3, #0]
   12086:	2b00      	cmp	r3, #0
   12088:	d1ef      	bne.n	1206a <uart_print_string+0xe>
    uart_transmit(s[i]);
    i++;
  }
}
   1208a:	3710      	adds	r7, #16
   1208c:	46bd      	mov	sp, r7
   1208e:	bd80      	pop	{r7, pc}

00012090 <SIG_UART_TRANS>:

SIGNAL(SIG_UART_TRANS) {
   12090:	b480      	push	{r7}
   12092:	af00      	add	r7, sp, #0
  if (tx_head == tx_tail) {
   12094:	f64b 53a0 	movw	r3, #48544	; 0xbda0
   12098:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1209c:	781a      	ldrb	r2, [r3, #0]
   1209e:	f64b 53a1 	movw	r3, #48545	; 0xbda1
   120a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   120a6:	781b      	ldrb	r3, [r3, #0]
   120a8:	b2db      	uxtb	r3, r3
   120aa:	429a      	cmp	r2, r3
   120ac:	d10e      	bne.n	120cc <SIG_UART_TRANS+0x3c>
    /* Nothing more to send */
    cbi(UCSRB, TXCIE); /* disable interrupt */
   120ae:	f248 030a 	movw	r3, #32778	; 0x800a
   120b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120b6:	f248 020a 	movw	r2, #32778	; 0x800a
   120ba:	f2c2 0200 	movt	r2, #8192	; 0x2000
   120be:	7812      	ldrb	r2, [r2, #0]
   120c0:	b2d2      	uxtb	r2, r2
   120c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   120c6:	b2d2      	uxtb	r2, r2
   120c8:	701a      	strb	r2, [r3, #0]
   120ca:	e01d      	b.n	12108 <SIG_UART_TRANS+0x78>
  } else {
    UDR = tx_buf[tx_tail];
   120cc:	f248 030c 	movw	r3, #32780	; 0x800c
   120d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120d4:	f64b 52a1 	movw	r2, #48545	; 0xbda1
   120d8:	f2c2 0204 	movt	r2, #8196	; 0x2004
   120dc:	7812      	ldrb	r2, [r2, #0]
   120de:	b2d2      	uxtb	r2, r2
   120e0:	4611      	mov	r1, r2
   120e2:	f64b 52a4 	movw	r2, #48548	; 0xbda4
   120e6:	f2c2 0204 	movt	r2, #8196	; 0x2004
   120ea:	5c52      	ldrb	r2, [r2, r1]
   120ec:	701a      	strb	r2, [r3, #0]
    tx_tail++; /* warning tx_buf_len is 256 */
   120ee:	f64b 53a1 	movw	r3, #48545	; 0xbda1
   120f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   120f6:	781b      	ldrb	r3, [r3, #0]
   120f8:	b2db      	uxtb	r3, r3
   120fa:	3301      	adds	r3, #1
   120fc:	b2da      	uxtb	r2, r3
   120fe:	f64b 53a1 	movw	r3, #48545	; 0xbda1
   12102:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12106:	701a      	strb	r2, [r3, #0]
  }
}
   12108:	46bd      	mov	sp, r7
   1210a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1210e:	4770      	bx	lr

00012110 <init_led>:
#include "stm32f10x_usart.h"
#include "stm32f10x_exti.h"
#include "misc.h"

void init_led(void)
{
   12110:	b580      	push	{r7, lr}
   12112:	b082      	sub	sp, #8
   12114:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO C clock. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
   12116:	2010      	movs	r0, #16
   12118:	2101      	movs	r1, #1
   1211a:	f7ee fe51 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Set the LED pin state such that the LED is off.  The LED is connected
     * between power and the microcontroller pin, which makes it turn on when
     * the pin is low.
     */
    GPIO_WriteBit(GPIOC,GPIO_Pin_12,Bit_SET);
   1211e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   12122:	f2c4 0001 	movt	r0, #16385	; 0x4001
   12126:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   1212a:	2201      	movs	r2, #1
   1212c:	f7ef f958 	bl	13e0 <GPIO_WriteBit>

    /* Configure the LED pin as push-pull output. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_12;
   12130:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   12134:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   12136:	2310      	movs	r3, #16
   12138:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   1213a:	2303      	movs	r3, #3
   1213c:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
   1213e:	1d3b      	adds	r3, r7, #4
   12140:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   12144:	f2c4 0001 	movt	r0, #16385	; 0x4001
   12148:	4619      	mov	r1, r3
   1214a:	f7ef f80d 	bl	1168 <GPIO_Init>
}
   1214e:	3708      	adds	r7, #8
   12150:	46bd      	mov	sp, r7
   12152:	bd80      	pop	{r7, pc}

00012154 <init_button>:

void init_button(void)
{
   12154:	b580      	push	{r7, lr}
   12156:	b082      	sub	sp, #8
   12158:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO A clock */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
   1215a:	2004      	movs	r0, #4
   1215c:	2101      	movs	r1, #1
   1215e:	f7ee fe2f 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Configure the button pin as a floating input. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_0;
   12162:	2301      	movs	r3, #1
   12164:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   12166:	2304      	movs	r3, #4
   12168:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   1216a:	2303      	movs	r3, #3
   1216c:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
   1216e:	1d3b      	adds	r3, r7, #4
   12170:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   12174:	f2c4 0001 	movt	r0, #16385	; 0x4001
   12178:	4619      	mov	r1, r3
   1217a:	f7ee fff5 	bl	1168 <GPIO_Init>
}
   1217e:	3708      	adds	r7, #8
   12180:	46bd      	mov	sp, r7
   12182:	bd80      	pop	{r7, pc}

00012184 <enable_button_interrupts>:

void enable_button_interrupts(void)
{
   12184:	b580      	push	{r7, lr}
   12186:	b084      	sub	sp, #16
   12188:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable the AFIO clock.  GPIO_EXTILineConfig sets registers in
     * the AFIO.
     */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
   1218a:	2001      	movs	r0, #1
   1218c:	2101      	movs	r1, #1
   1218e:	f7ee fe17 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Connect EXTI Line 0 to the button GPIO Pin */
    GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);
   12192:	2000      	movs	r0, #0
   12194:	2100      	movs	r1, #0
   12196:	f7ef fa1b 	bl	15d0 <GPIO_EXTILineConfig>

    /* Configure the EXTI line to generate an interrupt when the button is
     * pressed.  The button pin is high when pressed, so it needs to trigger
     * when rising from low to high. */
    EXTI_InitStructure.EXTI_Line = EXTI_Line0;
   1219a:	2301      	movs	r3, #1
   1219c:	60bb      	str	r3, [r7, #8]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
   1219e:	2300      	movs	r3, #0
   121a0:	733b      	strb	r3, [r7, #12]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
   121a2:	2308      	movs	r3, #8
   121a4:	737b      	strb	r3, [r7, #13]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
   121a6:	2301      	movs	r3, #1
   121a8:	73bb      	strb	r3, [r7, #14]
    EXTI_Init(&EXTI_InitStructure);
   121aa:	f107 0308 	add.w	r3, r7, #8
   121ae:	4618      	mov	r0, r3
   121b0:	f7ef ff14 	bl	1fdc <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
   121b4:	2306      	movs	r3, #6
   121b6:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
   121b8:	230f      	movs	r3, #15
   121ba:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
   121bc:	230f      	movs	r3, #15
   121be:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   121c0:	2301      	movs	r3, #1
   121c2:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
   121c4:	1d3b      	adds	r3, r7, #4
   121c6:	4618      	mov	r0, r3
   121c8:	f7f0 f842 	bl	2250 <NVIC_Init>
}
   121cc:	3710      	adds	r7, #16
   121ce:	46bd      	mov	sp, r7
   121d0:	bd80      	pop	{r7, pc}
   121d2:	bf00      	nop

000121d4 <init_rs232>:

void init_rs232(void)
{
   121d4:	b580      	push	{r7, lr}
   121d6:	b086      	sub	sp, #24
   121d8:	af00      	add	r7, sp, #0
    USART_InitTypeDef USART_InitStructure;
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable peripheral clocks. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
   121da:	2005      	movs	r0, #5
   121dc:	2101      	movs	r1, #1
   121de:	f7ee fdef 	bl	dc0 <RCC_APB2PeriphClockCmd>
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
   121e2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   121e6:	2101      	movs	r1, #1
   121e8:	f7ee fe12 	bl	e10 <RCC_APB1PeriphClockCmd>

    /* Configure USART2 Rx pin as floating input. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
   121ec:	2308      	movs	r3, #8
   121ee:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   121f0:	2304      	movs	r3, #4
   121f2:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
   121f4:	1d3b      	adds	r3, r7, #4
   121f6:	f44f 6000 	mov.w	r0, #2048	; 0x800
   121fa:	f2c4 0001 	movt	r0, #16385	; 0x4001
   121fe:	4619      	mov	r1, r3
   12200:	f7ee ffb2 	bl	1168 <GPIO_Init>

    /* Configure USART2 Tx as alternate function push-pull. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
   12204:	2304      	movs	r3, #4
   12206:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   12208:	2303      	movs	r3, #3
   1220a:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
   1220c:	2318      	movs	r3, #24
   1220e:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
   12210:	1d3b      	adds	r3, r7, #4
   12212:	f44f 6000 	mov.w	r0, #2048	; 0x800
   12216:	f2c4 0001 	movt	r0, #16385	; 0x4001
   1221a:	4619      	mov	r1, r3
   1221c:	f7ee ffa4 	bl	1168 <GPIO_Init>

    /* Configure the USART2 */
    USART_InitStructure.USART_BaudRate = 9600;
   12220:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   12224:	60bb      	str	r3, [r7, #8]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
   12226:	2300      	movs	r3, #0
   12228:	81bb      	strh	r3, [r7, #12]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
   1222a:	2300      	movs	r3, #0
   1222c:	81fb      	strh	r3, [r7, #14]
    USART_InitStructure.USART_Parity = USART_Parity_No;
   1222e:	2300      	movs	r3, #0
   12230:	823b      	strh	r3, [r7, #16]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
   12232:	2300      	movs	r3, #0
   12234:	82bb      	strh	r3, [r7, #20]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
   12236:	230c      	movs	r3, #12
   12238:	827b      	strh	r3, [r7, #18]
    USART_Init(USART2, &USART_InitStructure);
   1223a:	f107 0308 	add.w	r3, r7, #8
   1223e:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   12242:	f2c4 0000 	movt	r0, #16384	; 0x4000
   12246:	4619      	mov	r1, r3
   12248:	f7ef fa76 	bl	1738 <USART_Init>
    USART_Cmd(USART2, ENABLE);
   1224c:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   12250:	f2c4 0000 	movt	r0, #16384	; 0x4000
   12254:	2101      	movs	r1, #1
   12256:	f7ef fb8d 	bl	1974 <USART_Cmd>
}
   1225a:	3718      	adds	r7, #24
   1225c:	46bd      	mov	sp, r7
   1225e:	bd80      	pop	{r7, pc}

00012260 <enable_rs232_interrupts>:

void enable_rs232_interrupts(void)
{
   12260:	b580      	push	{r7, lr}
   12262:	b082      	sub	sp, #8
   12264:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable transmit and receive interrupts for the USART2. */
    USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
   12266:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   1226a:	f2c4 0000 	movt	r0, #16384	; 0x4000
   1226e:	f240 7127 	movw	r1, #1831	; 0x727
   12272:	2200      	movs	r2, #0
   12274:	f7ef fb9e 	bl	19b4 <USART_ITConfig>
    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
   12278:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   1227c:	f2c4 0000 	movt	r0, #16384	; 0x4000
   12280:	f240 5125 	movw	r1, #1317	; 0x525
   12284:	2201      	movs	r2, #1
   12286:	f7ef fb95 	bl	19b4 <USART_ITConfig>

    /* Enable the USART2 IRQ in the NVIC module (so that the USART2 interrupt
     * handler is enabled). */
    NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
   1228a:	2326      	movs	r3, #38	; 0x26
   1228c:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
   1228e:	2300      	movs	r3, #0
   12290:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   12292:	2301      	movs	r3, #1
   12294:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
   12296:	1d3b      	adds	r3, r7, #4
   12298:	4618      	mov	r0, r3
   1229a:	f7ef ffd9 	bl	2250 <NVIC_Init>
}
   1229e:	3708      	adds	r7, #8
   122a0:	46bd      	mov	sp, r7
   122a2:	bd80      	pop	{r7, pc}

000122a4 <enable_rs232>:

void enable_rs232(void)
{
   122a4:	b580      	push	{r7, lr}
   122a6:	af00      	add	r7, sp, #0
    /* Enable the RS232 port. */
    USART_Cmd(USART2, ENABLE);
   122a8:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   122ac:	f2c4 0000 	movt	r0, #16384	; 0x4000
   122b0:	2101      	movs	r1, #1
   122b2:	f7ef fb5f 	bl	1974 <USART_Cmd>
}
   122b6:	bd80      	pop	{r7, pc}

000122b8 <send_byte>:


void send_byte(uint8_t b)
{
   122b8:	b580      	push	{r7, lr}
   122ba:	b082      	sub	sp, #8
   122bc:	af00      	add	r7, sp, #0
   122be:	4603      	mov	r3, r0
   122c0:	71fb      	strb	r3, [r7, #7]
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
   122c2:	bf00      	nop
   122c4:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   122c8:	f2c4 0000 	movt	r0, #16384	; 0x4000
   122cc:	2180      	movs	r1, #128	; 0x80
   122ce:	f7ef fdbd 	bl	1e4c <USART_GetFlagStatus>
   122d2:	4603      	mov	r3, r0
   122d4:	2b00      	cmp	r3, #0
   122d6:	d0f5      	beq.n	122c4 <send_byte+0xc>

    GPIOC->ODR ^= 0x00001000;
   122d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   122dc:	f2c4 0301 	movt	r3, #16385	; 0x4001
   122e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   122e4:	f2c4 0201 	movt	r2, #16385	; 0x4001
   122e8:	68d2      	ldr	r2, [r2, #12]
   122ea:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
   122ee:	60da      	str	r2, [r3, #12]

    USART_SendData(USART2, b);
   122f0:	79fb      	ldrb	r3, [r7, #7]
   122f2:	b29b      	uxth	r3, r3
   122f4:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   122f8:	f2c4 0000 	movt	r0, #16384	; 0x4000
   122fc:	4619      	mov	r1, r3
   122fe:	f7ef fc59 	bl	1bb4 <USART_SendData>
}
   12302:	3708      	adds	r7, #8
   12304:	46bd      	mov	sp, r7
   12306:	bd80      	pop	{r7, pc}

00012308 <send_num>:


void send_num(uint8_t b)
{
   12308:	b580      	push	{r7, lr}
   1230a:	b082      	sub	sp, #8
   1230c:	af00      	add	r7, sp, #0
   1230e:	4603      	mov	r3, r0
   12310:	71fb      	strb	r3, [r7, #7]
    send_byte(b+'0'); 
   12312:	79fb      	ldrb	r3, [r7, #7]
   12314:	3330      	adds	r3, #48	; 0x30
   12316:	b2db      	uxtb	r3, r3
   12318:	4618      	mov	r0, r3
   1231a:	f7ff ffcd 	bl	122b8 <send_byte>
}
   1231e:	3708      	adds	r7, #8
   12320:	46bd      	mov	sp, r7
   12322:	bd80      	pop	{r7, pc}

00012324 <vPrintString>:


void vPrintString( const char * string )
{
   12324:	b580      	push	{r7, lr}
   12326:	b084      	sub	sp, #16
   12328:	af00      	add	r7, sp, #0
   1232a:	6078      	str	r0, [r7, #4]
    int i = 0;
   1232c:	2300      	movs	r3, #0
   1232e:	60fb      	str	r3, [r7, #12]
    while(string[i] != '\0')
   12330:	e009      	b.n	12346 <vPrintString+0x22>
    {
        send_byte(string[i]);
   12332:	68fb      	ldr	r3, [r7, #12]
   12334:	687a      	ldr	r2, [r7, #4]
   12336:	4413      	add	r3, r2
   12338:	781b      	ldrb	r3, [r3, #0]
   1233a:	4618      	mov	r0, r3
   1233c:	f7ff ffbc 	bl	122b8 <send_byte>
        i++;
   12340:	68fb      	ldr	r3, [r7, #12]
   12342:	3301      	adds	r3, #1
   12344:	60fb      	str	r3, [r7, #12]


void vPrintString( const char * string )
{
    int i = 0;
    while(string[i] != '\0')
   12346:	68fb      	ldr	r3, [r7, #12]
   12348:	687a      	ldr	r2, [r7, #4]
   1234a:	4413      	add	r3, r2
   1234c:	781b      	ldrb	r3, [r3, #0]
   1234e:	2b00      	cmp	r3, #0
   12350:	d1ef      	bne.n	12332 <vPrintString+0xe>
    {
        send_byte(string[i]);
        i++;
    }
}
   12352:	3710      	adds	r7, #16
   12354:	46bd      	mov	sp, r7
   12356:	bd80      	pop	{r7, pc}

00012358 <vPrintNumber>:

void vPrintNumber( const long c_num )
{
   12358:	b580      	push	{r7, lr}
   1235a:	b08e      	sub	sp, #56	; 0x38
   1235c:	af00      	add	r7, sp, #0
   1235e:	6078      	str	r0, [r7, #4]
    char time[33], tmp;
    unsigned int i, count = 0;
   12360:	2300      	movs	r3, #0
   12362:	633b      	str	r3, [r7, #48]	; 0x30
    long num = c_num;
   12364:	687b      	ldr	r3, [r7, #4]
   12366:	62fb      	str	r3, [r7, #44]	; 0x2c

    if(num == 0)
   12368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1236a:	2b00      	cmp	r3, #0
   1236c:	d106      	bne.n	1237c <vPrintNumber+0x24>
    {
        vPrintString("0\n\r");
   1236e:	f643 101c 	movw	r0, #14620	; 0x391c
   12372:	f2c0 0001 	movt	r0, #1
   12376:	f7ff ffd5 	bl	12324 <vPrintString>
   1237a:	e064      	b.n	12446 <vPrintNumber+0xee>
    }
    else
    {
        // transform long into char * 
        while( num   )
   1237c:	e024      	b.n	123c8 <vPrintNumber+0x70>
        {
            time[count] = num%10 +'0';
   1237e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   12380:	f246 6367 	movw	r3, #26215	; 0x6667
   12384:	f2c6 6366 	movt	r3, #26214	; 0x6666
   12388:	fb83 2301 	smull	r2, r3, r3, r1
   1238c:	109a      	asrs	r2, r3, #2
   1238e:	17cb      	asrs	r3, r1, #31
   12390:	1ad2      	subs	r2, r2, r3
   12392:	4613      	mov	r3, r2
   12394:	009b      	lsls	r3, r3, #2
   12396:	4413      	add	r3, r2
   12398:	005b      	lsls	r3, r3, #1
   1239a:	1aca      	subs	r2, r1, r3
   1239c:	b2d3      	uxtb	r3, r2
   1239e:	3330      	adds	r3, #48	; 0x30
   123a0:	b2da      	uxtb	r2, r3
   123a2:	f107 0108 	add.w	r1, r7, #8
   123a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   123a8:	440b      	add	r3, r1
   123aa:	701a      	strb	r2, [r3, #0]
            count ++;
   123ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   123ae:	3301      	adds	r3, #1
   123b0:	633b      	str	r3, [r7, #48]	; 0x30
            num /= 10;
   123b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   123b4:	f246 6367 	movw	r3, #26215	; 0x6667
   123b8:	f2c6 6366 	movt	r3, #26214	; 0x6666
   123bc:	fb83 1302 	smull	r1, r3, r3, r2
   123c0:	1099      	asrs	r1, r3, #2
   123c2:	17d3      	asrs	r3, r2, #31
   123c4:	1acb      	subs	r3, r1, r3
   123c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        vPrintString("0\n\r");
    }
    else
    {
        // transform long into char * 
        while( num   )
   123c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   123ca:	2b00      	cmp	r3, #0
   123cc:	d1d7      	bne.n	1237e <vPrintNumber+0x26>
        {
            time[count] = num%10 +'0';
            count ++;
            num /= 10;
        }
        time[count] = '\0';
   123ce:	f107 0208 	add.w	r2, r7, #8
   123d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   123d4:	4413      	add	r3, r2
   123d6:	2200      	movs	r2, #0
   123d8:	701a      	strb	r2, [r3, #0]

        // reverse
        for( i = 0; i < count/2; ++i  )
   123da:	2300      	movs	r3, #0
   123dc:	637b      	str	r3, [r7, #52]	; 0x34
   123de:	e022      	b.n	12426 <vPrintNumber+0xce>
        {
            tmp = time[i];
   123e0:	f107 0208 	add.w	r2, r7, #8
   123e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   123e6:	4413      	add	r3, r2
   123e8:	781b      	ldrb	r3, [r3, #0]
   123ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            time[i] = time[count-1-i];
   123ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   123f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   123f2:	1ad3      	subs	r3, r2, r3
   123f4:	3b01      	subs	r3, #1
   123f6:	f107 0238 	add.w	r2, r7, #56	; 0x38
   123fa:	4413      	add	r3, r2
   123fc:	f813 2c30 	ldrb.w	r2, [r3, #-48]
   12400:	f107 0108 	add.w	r1, r7, #8
   12404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12406:	440b      	add	r3, r1
   12408:	701a      	strb	r2, [r3, #0]
            time[count-1-i] = tmp;
   1240a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1240c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1240e:	1ad3      	subs	r3, r2, r3
   12410:	3b01      	subs	r3, #1
   12412:	f107 0138 	add.w	r1, r7, #56	; 0x38
   12416:	440b      	add	r3, r1
   12418:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
   1241c:	f803 2c30 	strb.w	r2, [r3, #-48]
            num /= 10;
        }
        time[count] = '\0';

        // reverse
        for( i = 0; i < count/2; ++i  )
   12420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12422:	3301      	adds	r3, #1
   12424:	637b      	str	r3, [r7, #52]	; 0x34
   12426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12428:	085a      	lsrs	r2, r3, #1
   1242a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1242c:	429a      	cmp	r2, r3
   1242e:	d8d7      	bhi.n	123e0 <vPrintNumber+0x88>
        {
            tmp = time[i];
            time[i] = time[count-1-i];
            time[count-1-i] = tmp;
        }
        vPrintString(time);
   12430:	f107 0308 	add.w	r3, r7, #8
   12434:	4618      	mov	r0, r3
   12436:	f7ff ff75 	bl	12324 <vPrintString>
        vPrintString("\n\r");
   1243a:	f643 1020 	movw	r0, #14624	; 0x3920
   1243e:	f2c0 0001 	movt	r0, #1
   12442:	f7ff ff6f 	bl	12324 <vPrintString>
    }
}
   12446:	3738      	adds	r7, #56	; 0x38
   12448:	46bd      	mov	sp, r7
   1244a:	bd80      	pop	{r7, pc}

0001244c <vParametersInit>:

portBASE_TYPE miss[NUMBEROFTASK];


void vParametersInit()
{
   1244c:	b480      	push	{r7}
   1244e:	b083      	sub	sp, #12
   12450:	af00      	add	r7, sp, #0
    portBASE_TYPE i;
    for( i = 0; i < NUMBEROFTASK; ++ i )
   12452:	2300      	movs	r3, #0
   12454:	607b      	str	r3, [r7, #4]
   12456:	e03c      	b.n	124d2 <vParametersInit+0x86>
    {
        parameters[i].xMyId = i;
   12458:	f64b 62a4 	movw	r2, #48804	; 0xbea4
   1245c:	f2c2 0204 	movt	r2, #8196	; 0x2004
   12460:	6879      	ldr	r1, [r7, #4]
   12462:	460b      	mov	r3, r1
   12464:	005b      	lsls	r3, r3, #1
   12466:	440b      	add	r3, r1
   12468:	009b      	lsls	r3, r3, #2
   1246a:	4413      	add	r3, r2
   1246c:	687a      	ldr	r2, [r7, #4]
   1246e:	601a      	str	r2, [r3, #0]
        parameters[i].xMyFun = xTaskTable[i];
   12470:	f240 03c4 	movw	r3, #196	; 0xc4
   12474:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12478:	687a      	ldr	r2, [r7, #4]
   1247a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   1247e:	f64b 62a4 	movw	r2, #48804	; 0xbea4
   12482:	f2c2 0204 	movt	r2, #8196	; 0x2004
   12486:	6879      	ldr	r1, [r7, #4]
   12488:	460b      	mov	r3, r1
   1248a:	005b      	lsls	r3, r3, #1
   1248c:	440b      	add	r3, r1
   1248e:	009b      	lsls	r3, r3, #2
   12490:	4413      	add	r3, r2
   12492:	3304      	adds	r3, #4
   12494:	6018      	str	r0, [r3, #0]
        parameters[i].xPeriod = xPeriodTable[i];
   12496:	f240 035c 	movw	r3, #92	; 0x5c
   1249a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1249e:	687a      	ldr	r2, [r7, #4]
   124a0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   124a4:	f64b 62a4 	movw	r2, #48804	; 0xbea4
   124a8:	f2c2 0204 	movt	r2, #8196	; 0x2004
   124ac:	6879      	ldr	r1, [r7, #4]
   124ae:	460b      	mov	r3, r1
   124b0:	005b      	lsls	r3, r3, #1
   124b2:	440b      	add	r3, r1
   124b4:	009b      	lsls	r3, r3, #2
   124b6:	4413      	add	r3, r2
   124b8:	3308      	adds	r3, #8
   124ba:	6018      	str	r0, [r3, #0]
        miss[i] = 0;
   124bc:	f64b 7374 	movw	r3, #49012	; 0xbf74
   124c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   124c4:	687a      	ldr	r2, [r7, #4]
   124c6:	2100      	movs	r1, #0
   124c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


void vParametersInit()
{
    portBASE_TYPE i;
    for( i = 0; i < NUMBEROFTASK; ++ i )
   124cc:	687b      	ldr	r3, [r7, #4]
   124ce:	3301      	adds	r3, #1
   124d0:	607b      	str	r3, [r7, #4]
   124d2:	687b      	ldr	r3, [r7, #4]
   124d4:	2b0c      	cmp	r3, #12
   124d6:	ddbf      	ble.n	12458 <vParametersInit+0xc>
        parameters[i].xMyId = i;
        parameters[i].xMyFun = xTaskTable[i];
        parameters[i].xPeriod = xPeriodTable[i];
        miss[i] = 0;
    }
}
   124d8:	370c      	adds	r7, #12
   124da:	46bd      	mov	sp, r7
   124dc:	f85d 7b04 	ldr.w	r7, [sp], #4
   124e0:	4770      	bx	lr
   124e2:	bf00      	nop

000124e4 <vTimeTask>:

void vTimeTask( void * pvParameter )
{
   124e4:	b580      	push	{r7, lr}
   124e6:	b08a      	sub	sp, #40	; 0x28
   124e8:	af00      	add	r7, sp, #0
   124ea:	6078      	str	r0, [r7, #4]
    struct parameter *xMyParameter = (struct parameter *)pvParameter;
   124ec:	687b      	ldr	r3, [r7, #4]
   124ee:	61bb      	str	r3, [r7, #24]
    portBASE_TYPE xMyId = xMyParameter->xMyId;
   124f0:	69bb      	ldr	r3, [r7, #24]
   124f2:	681b      	ldr	r3, [r3, #0]
   124f4:	617b      	str	r3, [r7, #20]
    pvTaskFunType xMyFun = xMyParameter->xMyFun;
   124f6:	69bb      	ldr	r3, [r7, #24]
   124f8:	685b      	ldr	r3, [r3, #4]
   124fa:	613b      	str	r3, [r7, #16]
    portTickType xMyPeriod = xMyParameter->xPeriod;
   124fc:	69bb      	ldr	r3, [r7, #24]
   124fe:	689b      	ldr	r3, [r3, #8]
   12500:	60fb      	str	r3, [r7, #12]

    portBASE_TYPE i;
    portTickType xCurrentTime;
    
    // used for periodic task
    portTickType xLastExecutionTime = 0; 
   12502:	2300      	movs	r3, #0
   12504:	60bb      	str	r3, [r7, #8]

    portTickType xReadyTime = 0;
   12506:	2300      	movs	r3, #0
   12508:	623b      	str	r3, [r7, #32]
    portTickType xDeadline = xMyPeriod ;
   1250a:	68fb      	ldr	r3, [r7, #12]
   1250c:	61fb      	str	r3, [r7, #28]
        vPrintNumber( xTaskGetTickCount() );
        xTaskResumeAll();
#endif

        #ifdef NONPREEMPTION
        vPrintNumber(xMyId);
   1250e:	6978      	ldr	r0, [r7, #20]
   12510:	f7ff ff22 	bl	12358 <vPrintNumber>
        vPrintNumber( xReadyTime );
   12514:	6a3b      	ldr	r3, [r7, #32]
   12516:	4618      	mov	r0, r3
   12518:	f7ff ff1e 	bl	12358 <vPrintNumber>
        vPrintNumber( xTaskGetTickCount() );
   1251c:	f7f1 fb88 	bl	3c30 <xTaskGetTickCount>
   12520:	4603      	mov	r3, r0
   12522:	4618      	mov	r0, r3
   12524:	f7ff ff18 	bl	12358 <vPrintNumber>
        #endif

        for( i = 0; i < 20; ++ i )
   12528:	2300      	movs	r3, #0
   1252a:	627b      	str	r3, [r7, #36]	; 0x24
   1252c:	e004      	b.n	12538 <vTimeTask+0x54>
        {
            xMyFun();
   1252e:	693b      	ldr	r3, [r7, #16]
   12530:	4798      	blx	r3
        vPrintNumber(xMyId);
        vPrintNumber( xReadyTime );
        vPrintNumber( xTaskGetTickCount() );
        #endif

        for( i = 0; i < 20; ++ i )
   12532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12534:	3301      	adds	r3, #1
   12536:	627b      	str	r3, [r7, #36]	; 0x24
   12538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1253a:	2b13      	cmp	r3, #19
   1253c:	ddf7      	ble.n	1252e <vTimeTask+0x4a>
        {
            xMyFun();
        }

        if(xTaskGetTickCount() > xDeadline)
   1253e:	f7f1 fb77 	bl	3c30 <xTaskGetTickCount>
   12542:	4602      	mov	r2, r0
   12544:	69fb      	ldr	r3, [r7, #28]
   12546:	429a      	cmp	r2, r3
   12548:	d914      	bls.n	12574 <vTimeTask+0x90>
        {
            //vPrintNumber((xMyId+10)*2);
            vPrintString("miss deadline\n\r");
   1254a:	f643 1024 	movw	r0, #14628	; 0x3924
   1254e:	f2c0 0001 	movt	r0, #1
   12552:	f7ff fee7 	bl	12324 <vPrintString>
            miss[xMyId] ++;
   12556:	f64b 7374 	movw	r3, #49012	; 0xbf74
   1255a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1255e:	697a      	ldr	r2, [r7, #20]
   12560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   12564:	1c59      	adds	r1, r3, #1
   12566:	f64b 7374 	movw	r3, #49012	; 0xbf74
   1256a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1256e:	697a      	ldr	r2, [r7, #20]
   12570:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        }

        xReadyTime += xMyPeriod;
   12574:	6a3a      	ldr	r2, [r7, #32]
   12576:	68fb      	ldr	r3, [r7, #12]
   12578:	4413      	add	r3, r2
   1257a:	623b      	str	r3, [r7, #32]
        xDeadline += xMyPeriod;
   1257c:	69fa      	ldr	r2, [r7, #28]
   1257e:	68fb      	ldr	r3, [r7, #12]
   12580:	4413      	add	r3, r2
   12582:	61fb      	str	r3, [r7, #28]
        vPrintNumber( xDeadline );
        vPrintNumber( xTaskGetTickCount() );
        xTaskResumeAll();
#endif
        #ifdef NONPREEMPTION
        vPrintNumber(xTaskGetTickCount());
   12584:	f7f1 fb54 	bl	3c30 <xTaskGetTickCount>
   12588:	4603      	mov	r3, r0
   1258a:	4618      	mov	r0, r3
   1258c:	f7ff fee4 	bl	12358 <vPrintNumber>
        vPrintNumber( xDeadline );
   12590:	69fb      	ldr	r3, [r7, #28]
   12592:	4618      	mov	r0, r3
   12594:	f7ff fee0 	bl	12358 <vPrintNumber>
        vPrintNumber( (xMyId + 10)* 3 );
   12598:	697b      	ldr	r3, [r7, #20]
   1259a:	f103 020a 	add.w	r2, r3, #10
   1259e:	4613      	mov	r3, r2
   125a0:	005b      	lsls	r3, r3, #1
   125a2:	4413      	add	r3, r2
   125a4:	4618      	mov	r0, r3
   125a6:	f7ff fed7 	bl	12358 <vPrintNumber>
        #endif
      
#ifdef configUSE_EDF_SCHEDULING
        vSetTaskDeadline( xDeadline );
#endif
        vTaskDelayUntil( &xLastExecutionTime, xMyPeriod / portTICK_RATE_MS );
   125aa:	f107 0308 	add.w	r3, r7, #8
   125ae:	4618      	mov	r0, r3
   125b0:	68f9      	ldr	r1, [r7, #12]
   125b2:	f7f0 fff9 	bl	35a8 <vTaskDelayUntil>
        //vTaskDelay( xMyPeriod / portTICK_RATE_MS );
    }
   125b6:	e7aa      	b.n	1250e <vTimeTask+0x2a>

000125b8 <main>:
}


int main()
{
   125b8:	b590      	push	{r4, r7, lr}
   125ba:	b087      	sub	sp, #28
   125bc:	af04      	add	r7, sp, #16

	init_led();
   125be:	f7ff fda7 	bl	12110 <init_led>
	init_rs232();
   125c2:	f7ff fe07 	bl	121d4 <init_rs232>
	enable_rs232_interrupts();
   125c6:	f7ff fe4b 	bl	12260 <enable_rs232_interrupts>
	enable_rs232();
   125ca:	f7ff fe6b 	bl	122a4 <enable_rs232>

    vParametersInit();
   125ce:	f7ff ff3d 	bl	1244c <vParametersInit>
    vPapabenchInit();
   125d2:	f7f0 fa55 	bl	2a80 <vPapabenchInit>

    int i;
    for( i = 0; i < NUMBEROFTASK; ++ i )
   125d6:	2300      	movs	r3, #0
   125d8:	607b      	str	r3, [r7, #4]
   125da:	e031      	b.n	12640 <main+0x88>
            //continue;
        }
#ifdef configUSE_EDF_SCHEDULING
        xTaskPeriodicCreate(vTimeTask, pcNameOfTask[i],  256, (void *) &parameters[i], xTaskPrio[i], &xTaskOfHandle[i], parameters[i].xPeriod);
#else
        xTaskCreate( vTimeTask, pcNameOfTask[i], 256, (void *) &parameters[i], xTaskPrio[i], &xTaskOfHandle[i] );
   125dc:	f240 0390 	movw	r3, #144	; 0x90
   125e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   125e4:	687a      	ldr	r2, [r7, #4]
   125e6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   125ea:	687a      	ldr	r2, [r7, #4]
   125ec:	4613      	mov	r3, r2
   125ee:	005b      	lsls	r3, r3, #1
   125f0:	4413      	add	r3, r2
   125f2:	009b      	lsls	r3, r3, #2
   125f4:	f64b 62a4 	movw	r2, #48804	; 0xbea4
   125f8:	f2c2 0204 	movt	r2, #8196	; 0x2004
   125fc:	189c      	adds	r4, r3, r2
   125fe:	f240 0328 	movw	r3, #40	; 0x28
   12602:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12606:	687a      	ldr	r2, [r7, #4]
   12608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1260c:	461a      	mov	r2, r3
   1260e:	687b      	ldr	r3, [r7, #4]
   12610:	0098      	lsls	r0, r3, #2
   12612:	f64b 7340 	movw	r3, #48960	; 0xbf40
   12616:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1261a:	4403      	add	r3, r0
   1261c:	9200      	str	r2, [sp, #0]
   1261e:	9301      	str	r3, [sp, #4]
   12620:	2300      	movs	r3, #0
   12622:	9302      	str	r3, [sp, #8]
   12624:	2300      	movs	r3, #0
   12626:	9303      	str	r3, [sp, #12]
   12628:	f242 40e5 	movw	r0, #9445	; 0x24e5
   1262c:	f2c0 0001 	movt	r0, #1
   12630:	f44f 7280 	mov.w	r2, #256	; 0x100
   12634:	4623      	mov	r3, r4
   12636:	f7f0 fe8f 	bl	3358 <xTaskGenericCreate>

    vParametersInit();
    vPapabenchInit();

    int i;
    for( i = 0; i < NUMBEROFTASK; ++ i )
   1263a:	687b      	ldr	r3, [r7, #4]
   1263c:	3301      	adds	r3, #1
   1263e:	607b      	str	r3, [r7, #4]
   12640:	687b      	ldr	r3, [r7, #4]
   12642:	2b0c      	cmp	r3, #12
   12644:	ddca      	ble.n	125dc <main+0x24>
        xTaskCreate( vTimeTask, pcNameOfTask[i], 256, (void *) &parameters[i], xTaskPrio[i], &xTaskOfHandle[i] );
#endif
    }

	/* Start running the tasks. */
	vTaskStartScheduler();
   12646:	f7f1 f9f9 	bl	3a3c <vTaskStartScheduler>

	return 0;
   1264a:	2300      	movs	r3, #0
}
   1264c:	4618      	mov	r0, r3
   1264e:	370c      	adds	r7, #12
   12650:	46bd      	mov	sp, r7
   12652:	bd90      	pop	{r4, r7, pc}

00012654 <myTraceCreate>:

void myTraceCreate      (){
   12654:	b480      	push	{r7}
   12656:	af00      	add	r7, sp, #0
}
   12658:	46bd      	mov	sp, r7
   1265a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1265e:	4770      	bx	lr

00012660 <myTraceSwitchedIn>:

void myTraceSwitchedIn  (){
   12660:	b480      	push	{r7}
   12662:	af00      	add	r7, sp, #0
}
   12664:	46bd      	mov	sp, r7
   12666:	f85d 7b04 	ldr.w	r7, [sp], #4
   1266a:	4770      	bx	lr

0001266c <myTraceSwitchedOut>:

void myTraceSwitchedOut	(){
   1266c:	b480      	push	{r7}
   1266e:	af00      	add	r7, sp, #0
}
   12670:	46bd      	mov	sp, r7
   12672:	f85d 7b04 	ldr.w	r7, [sp], #4
   12676:	4770      	bx	lr

00012678 <vApplicationTickHook>:

void vApplicationTickHook()
{
   12678:	b480      	push	{r7}
   1267a:	af00      	add	r7, sp, #0

}
   1267c:	46bd      	mov	sp, r7
   1267e:	f85d 7b04 	ldr.w	r7, [sp], #4
   12682:	4770      	bx	lr

00012684 <__aeabi_drsub>:
   12684:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   12688:	e002      	b.n	12690 <__adddf3>
   1268a:	bf00      	nop

0001268c <__aeabi_dsub>:
   1268c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00012690 <__adddf3>:
   12690:	b530      	push	{r4, r5, lr}
   12692:	ea4f 0441 	mov.w	r4, r1, lsl #1
   12696:	ea4f 0543 	mov.w	r5, r3, lsl #1
   1269a:	ea94 0f05 	teq	r4, r5
   1269e:	bf08      	it	eq
   126a0:	ea90 0f02 	teqeq	r0, r2
   126a4:	bf1f      	itttt	ne
   126a6:	ea54 0c00 	orrsne.w	ip, r4, r0
   126aa:	ea55 0c02 	orrsne.w	ip, r5, r2
   126ae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   126b2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   126b6:	f000 80e2 	beq.w	1287e <__adddf3+0x1ee>
   126ba:	ea4f 5454 	mov.w	r4, r4, lsr #21
   126be:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   126c2:	bfb8      	it	lt
   126c4:	426d      	neglt	r5, r5
   126c6:	dd0c      	ble.n	126e2 <__adddf3+0x52>
   126c8:	442c      	add	r4, r5
   126ca:	ea80 0202 	eor.w	r2, r0, r2
   126ce:	ea81 0303 	eor.w	r3, r1, r3
   126d2:	ea82 0000 	eor.w	r0, r2, r0
   126d6:	ea83 0101 	eor.w	r1, r3, r1
   126da:	ea80 0202 	eor.w	r2, r0, r2
   126de:	ea81 0303 	eor.w	r3, r1, r3
   126e2:	2d36      	cmp	r5, #54	; 0x36
   126e4:	bf88      	it	hi
   126e6:	bd30      	pophi	{r4, r5, pc}
   126e8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   126ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
   126f0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   126f4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   126f8:	d002      	beq.n	12700 <__adddf3+0x70>
   126fa:	4240      	negs	r0, r0
   126fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   12700:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   12704:	ea4f 3303 	mov.w	r3, r3, lsl #12
   12708:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   1270c:	d002      	beq.n	12714 <__adddf3+0x84>
   1270e:	4252      	negs	r2, r2
   12710:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   12714:	ea94 0f05 	teq	r4, r5
   12718:	f000 80a7 	beq.w	1286a <__adddf3+0x1da>
   1271c:	f1a4 0401 	sub.w	r4, r4, #1
   12720:	f1d5 0e20 	rsbs	lr, r5, #32
   12724:	db0d      	blt.n	12742 <__adddf3+0xb2>
   12726:	fa02 fc0e 	lsl.w	ip, r2, lr
   1272a:	fa22 f205 	lsr.w	r2, r2, r5
   1272e:	1880      	adds	r0, r0, r2
   12730:	f141 0100 	adc.w	r1, r1, #0
   12734:	fa03 f20e 	lsl.w	r2, r3, lr
   12738:	1880      	adds	r0, r0, r2
   1273a:	fa43 f305 	asr.w	r3, r3, r5
   1273e:	4159      	adcs	r1, r3
   12740:	e00e      	b.n	12760 <__adddf3+0xd0>
   12742:	f1a5 0520 	sub.w	r5, r5, #32
   12746:	f10e 0e20 	add.w	lr, lr, #32
   1274a:	2a01      	cmp	r2, #1
   1274c:	fa03 fc0e 	lsl.w	ip, r3, lr
   12750:	bf28      	it	cs
   12752:	f04c 0c02 	orrcs.w	ip, ip, #2
   12756:	fa43 f305 	asr.w	r3, r3, r5
   1275a:	18c0      	adds	r0, r0, r3
   1275c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   12760:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   12764:	d507      	bpl.n	12776 <__adddf3+0xe6>
   12766:	f04f 0e00 	mov.w	lr, #0
   1276a:	f1dc 0c00 	rsbs	ip, ip, #0
   1276e:	eb7e 0000 	sbcs.w	r0, lr, r0
   12772:	eb6e 0101 	sbc.w	r1, lr, r1
   12776:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   1277a:	d31b      	bcc.n	127b4 <__adddf3+0x124>
   1277c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   12780:	d30c      	bcc.n	1279c <__adddf3+0x10c>
   12782:	0849      	lsrs	r1, r1, #1
   12784:	ea5f 0030 	movs.w	r0, r0, rrx
   12788:	ea4f 0c3c 	mov.w	ip, ip, rrx
   1278c:	f104 0401 	add.w	r4, r4, #1
   12790:	ea4f 5244 	mov.w	r2, r4, lsl #21
   12794:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   12798:	f080 809a 	bcs.w	128d0 <__adddf3+0x240>
   1279c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   127a0:	bf08      	it	eq
   127a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   127a6:	f150 0000 	adcs.w	r0, r0, #0
   127aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   127ae:	ea41 0105 	orr.w	r1, r1, r5
   127b2:	bd30      	pop	{r4, r5, pc}
   127b4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   127b8:	4140      	adcs	r0, r0
   127ba:	eb41 0101 	adc.w	r1, r1, r1
   127be:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   127c2:	f1a4 0401 	sub.w	r4, r4, #1
   127c6:	d1e9      	bne.n	1279c <__adddf3+0x10c>
   127c8:	f091 0f00 	teq	r1, #0
   127cc:	bf04      	itt	eq
   127ce:	4601      	moveq	r1, r0
   127d0:	2000      	moveq	r0, #0
   127d2:	fab1 f381 	clz	r3, r1
   127d6:	bf08      	it	eq
   127d8:	3320      	addeq	r3, #32
   127da:	f1a3 030b 	sub.w	r3, r3, #11
   127de:	f1b3 0220 	subs.w	r2, r3, #32
   127e2:	da0c      	bge.n	127fe <__adddf3+0x16e>
   127e4:	320c      	adds	r2, #12
   127e6:	dd08      	ble.n	127fa <__adddf3+0x16a>
   127e8:	f102 0c14 	add.w	ip, r2, #20
   127ec:	f1c2 020c 	rsb	r2, r2, #12
   127f0:	fa01 f00c 	lsl.w	r0, r1, ip
   127f4:	fa21 f102 	lsr.w	r1, r1, r2
   127f8:	e00c      	b.n	12814 <__adddf3+0x184>
   127fa:	f102 0214 	add.w	r2, r2, #20
   127fe:	bfd8      	it	le
   12800:	f1c2 0c20 	rsble	ip, r2, #32
   12804:	fa01 f102 	lsl.w	r1, r1, r2
   12808:	fa20 fc0c 	lsr.w	ip, r0, ip
   1280c:	bfdc      	itt	le
   1280e:	ea41 010c 	orrle.w	r1, r1, ip
   12812:	4090      	lslle	r0, r2
   12814:	1ae4      	subs	r4, r4, r3
   12816:	bfa2      	ittt	ge
   12818:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   1281c:	4329      	orrge	r1, r5
   1281e:	bd30      	popge	{r4, r5, pc}
   12820:	ea6f 0404 	mvn.w	r4, r4
   12824:	3c1f      	subs	r4, #31
   12826:	da1c      	bge.n	12862 <__adddf3+0x1d2>
   12828:	340c      	adds	r4, #12
   1282a:	dc0e      	bgt.n	1284a <__adddf3+0x1ba>
   1282c:	f104 0414 	add.w	r4, r4, #20
   12830:	f1c4 0220 	rsb	r2, r4, #32
   12834:	fa20 f004 	lsr.w	r0, r0, r4
   12838:	fa01 f302 	lsl.w	r3, r1, r2
   1283c:	ea40 0003 	orr.w	r0, r0, r3
   12840:	fa21 f304 	lsr.w	r3, r1, r4
   12844:	ea45 0103 	orr.w	r1, r5, r3
   12848:	bd30      	pop	{r4, r5, pc}
   1284a:	f1c4 040c 	rsb	r4, r4, #12
   1284e:	f1c4 0220 	rsb	r2, r4, #32
   12852:	fa20 f002 	lsr.w	r0, r0, r2
   12856:	fa01 f304 	lsl.w	r3, r1, r4
   1285a:	ea40 0003 	orr.w	r0, r0, r3
   1285e:	4629      	mov	r1, r5
   12860:	bd30      	pop	{r4, r5, pc}
   12862:	fa21 f004 	lsr.w	r0, r1, r4
   12866:	4629      	mov	r1, r5
   12868:	bd30      	pop	{r4, r5, pc}
   1286a:	f094 0f00 	teq	r4, #0
   1286e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   12872:	bf06      	itte	eq
   12874:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   12878:	3401      	addeq	r4, #1
   1287a:	3d01      	subne	r5, #1
   1287c:	e74e      	b.n	1271c <__adddf3+0x8c>
   1287e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   12882:	bf18      	it	ne
   12884:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   12888:	d029      	beq.n	128de <__adddf3+0x24e>
   1288a:	ea94 0f05 	teq	r4, r5
   1288e:	bf08      	it	eq
   12890:	ea90 0f02 	teqeq	r0, r2
   12894:	d005      	beq.n	128a2 <__adddf3+0x212>
   12896:	ea54 0c00 	orrs.w	ip, r4, r0
   1289a:	bf04      	itt	eq
   1289c:	4619      	moveq	r1, r3
   1289e:	4610      	moveq	r0, r2
   128a0:	bd30      	pop	{r4, r5, pc}
   128a2:	ea91 0f03 	teq	r1, r3
   128a6:	bf1e      	ittt	ne
   128a8:	2100      	movne	r1, #0
   128aa:	2000      	movne	r0, #0
   128ac:	bd30      	popne	{r4, r5, pc}
   128ae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   128b2:	d105      	bne.n	128c0 <__adddf3+0x230>
   128b4:	0040      	lsls	r0, r0, #1
   128b6:	4149      	adcs	r1, r1
   128b8:	bf28      	it	cs
   128ba:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   128be:	bd30      	pop	{r4, r5, pc}
   128c0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   128c4:	bf3c      	itt	cc
   128c6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   128ca:	bd30      	popcc	{r4, r5, pc}
   128cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   128d0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   128d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   128d8:	f04f 0000 	mov.w	r0, #0
   128dc:	bd30      	pop	{r4, r5, pc}
   128de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   128e2:	bf1a      	itte	ne
   128e4:	4619      	movne	r1, r3
   128e6:	4610      	movne	r0, r2
   128e8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   128ec:	bf1c      	itt	ne
   128ee:	460b      	movne	r3, r1
   128f0:	4602      	movne	r2, r0
   128f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   128f6:	bf06      	itte	eq
   128f8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   128fc:	ea91 0f03 	teqeq	r1, r3
   12900:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   12904:	bd30      	pop	{r4, r5, pc}
   12906:	bf00      	nop

00012908 <__aeabi_ui2d>:
   12908:	f090 0f00 	teq	r0, #0
   1290c:	bf04      	itt	eq
   1290e:	2100      	moveq	r1, #0
   12910:	4770      	bxeq	lr
   12912:	b530      	push	{r4, r5, lr}
   12914:	f44f 6480 	mov.w	r4, #1024	; 0x400
   12918:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1291c:	f04f 0500 	mov.w	r5, #0
   12920:	f04f 0100 	mov.w	r1, #0
   12924:	e750      	b.n	127c8 <__adddf3+0x138>
   12926:	bf00      	nop

00012928 <__aeabi_i2d>:
   12928:	f090 0f00 	teq	r0, #0
   1292c:	bf04      	itt	eq
   1292e:	2100      	moveq	r1, #0
   12930:	4770      	bxeq	lr
   12932:	b530      	push	{r4, r5, lr}
   12934:	f44f 6480 	mov.w	r4, #1024	; 0x400
   12938:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1293c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   12940:	bf48      	it	mi
   12942:	4240      	negmi	r0, r0
   12944:	f04f 0100 	mov.w	r1, #0
   12948:	e73e      	b.n	127c8 <__adddf3+0x138>
   1294a:	bf00      	nop

0001294c <__aeabi_f2d>:
   1294c:	0042      	lsls	r2, r0, #1
   1294e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   12952:	ea4f 0131 	mov.w	r1, r1, rrx
   12956:	ea4f 7002 	mov.w	r0, r2, lsl #28
   1295a:	bf1f      	itttt	ne
   1295c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   12960:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   12964:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   12968:	4770      	bxne	lr
   1296a:	f092 0f00 	teq	r2, #0
   1296e:	bf14      	ite	ne
   12970:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   12974:	4770      	bxeq	lr
   12976:	b530      	push	{r4, r5, lr}
   12978:	f44f 7460 	mov.w	r4, #896	; 0x380
   1297c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   12980:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   12984:	e720      	b.n	127c8 <__adddf3+0x138>
   12986:	bf00      	nop

00012988 <__aeabi_ul2d>:
   12988:	ea50 0201 	orrs.w	r2, r0, r1
   1298c:	bf08      	it	eq
   1298e:	4770      	bxeq	lr
   12990:	b530      	push	{r4, r5, lr}
   12992:	f04f 0500 	mov.w	r5, #0
   12996:	e00a      	b.n	129ae <__aeabi_l2d+0x16>

00012998 <__aeabi_l2d>:
   12998:	ea50 0201 	orrs.w	r2, r0, r1
   1299c:	bf08      	it	eq
   1299e:	4770      	bxeq	lr
   129a0:	b530      	push	{r4, r5, lr}
   129a2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   129a6:	d502      	bpl.n	129ae <__aeabi_l2d+0x16>
   129a8:	4240      	negs	r0, r0
   129aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   129ae:	f44f 6480 	mov.w	r4, #1024	; 0x400
   129b2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   129b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   129ba:	f43f aedc 	beq.w	12776 <__adddf3+0xe6>
   129be:	f04f 0203 	mov.w	r2, #3
   129c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   129c6:	bf18      	it	ne
   129c8:	3203      	addne	r2, #3
   129ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   129ce:	bf18      	it	ne
   129d0:	3203      	addne	r2, #3
   129d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   129d6:	f1c2 0320 	rsb	r3, r2, #32
   129da:	fa00 fc03 	lsl.w	ip, r0, r3
   129de:	fa20 f002 	lsr.w	r0, r0, r2
   129e2:	fa01 fe03 	lsl.w	lr, r1, r3
   129e6:	ea40 000e 	orr.w	r0, r0, lr
   129ea:	fa21 f102 	lsr.w	r1, r1, r2
   129ee:	4414      	add	r4, r2
   129f0:	e6c1      	b.n	12776 <__adddf3+0xe6>
   129f2:	bf00      	nop

000129f4 <__aeabi_dmul>:
   129f4:	b570      	push	{r4, r5, r6, lr}
   129f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   129fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   129fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   12a02:	bf1d      	ittte	ne
   12a04:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   12a08:	ea94 0f0c 	teqne	r4, ip
   12a0c:	ea95 0f0c 	teqne	r5, ip
   12a10:	f000 f8de 	bleq	12bd0 <__aeabi_dmul+0x1dc>
   12a14:	442c      	add	r4, r5
   12a16:	ea81 0603 	eor.w	r6, r1, r3
   12a1a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   12a1e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   12a22:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   12a26:	bf18      	it	ne
   12a28:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   12a2c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   12a30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   12a34:	d038      	beq.n	12aa8 <__aeabi_dmul+0xb4>
   12a36:	fba0 ce02 	umull	ip, lr, r0, r2
   12a3a:	f04f 0500 	mov.w	r5, #0
   12a3e:	fbe1 e502 	umlal	lr, r5, r1, r2
   12a42:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   12a46:	fbe0 e503 	umlal	lr, r5, r0, r3
   12a4a:	f04f 0600 	mov.w	r6, #0
   12a4e:	fbe1 5603 	umlal	r5, r6, r1, r3
   12a52:	f09c 0f00 	teq	ip, #0
   12a56:	bf18      	it	ne
   12a58:	f04e 0e01 	orrne.w	lr, lr, #1
   12a5c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   12a60:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   12a64:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   12a68:	d204      	bcs.n	12a74 <__aeabi_dmul+0x80>
   12a6a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   12a6e:	416d      	adcs	r5, r5
   12a70:	eb46 0606 	adc.w	r6, r6, r6
   12a74:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   12a78:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   12a7c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   12a80:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   12a84:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   12a88:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   12a8c:	bf88      	it	hi
   12a8e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   12a92:	d81e      	bhi.n	12ad2 <__aeabi_dmul+0xde>
   12a94:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   12a98:	bf08      	it	eq
   12a9a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   12a9e:	f150 0000 	adcs.w	r0, r0, #0
   12aa2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   12aa6:	bd70      	pop	{r4, r5, r6, pc}
   12aa8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   12aac:	ea46 0101 	orr.w	r1, r6, r1
   12ab0:	ea40 0002 	orr.w	r0, r0, r2
   12ab4:	ea81 0103 	eor.w	r1, r1, r3
   12ab8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   12abc:	bfc2      	ittt	gt
   12abe:	ebd4 050c 	rsbsgt	r5, r4, ip
   12ac2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   12ac6:	bd70      	popgt	{r4, r5, r6, pc}
   12ac8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   12acc:	f04f 0e00 	mov.w	lr, #0
   12ad0:	3c01      	subs	r4, #1
   12ad2:	f300 80ab 	bgt.w	12c2c <__aeabi_dmul+0x238>
   12ad6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   12ada:	bfde      	ittt	le
   12adc:	2000      	movle	r0, #0
   12ade:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   12ae2:	bd70      	pople	{r4, r5, r6, pc}
   12ae4:	f1c4 0400 	rsb	r4, r4, #0
   12ae8:	3c20      	subs	r4, #32
   12aea:	da35      	bge.n	12b58 <__aeabi_dmul+0x164>
   12aec:	340c      	adds	r4, #12
   12aee:	dc1b      	bgt.n	12b28 <__aeabi_dmul+0x134>
   12af0:	f104 0414 	add.w	r4, r4, #20
   12af4:	f1c4 0520 	rsb	r5, r4, #32
   12af8:	fa00 f305 	lsl.w	r3, r0, r5
   12afc:	fa20 f004 	lsr.w	r0, r0, r4
   12b00:	fa01 f205 	lsl.w	r2, r1, r5
   12b04:	ea40 0002 	orr.w	r0, r0, r2
   12b08:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   12b0c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   12b10:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   12b14:	fa21 f604 	lsr.w	r6, r1, r4
   12b18:	eb42 0106 	adc.w	r1, r2, r6
   12b1c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   12b20:	bf08      	it	eq
   12b22:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   12b26:	bd70      	pop	{r4, r5, r6, pc}
   12b28:	f1c4 040c 	rsb	r4, r4, #12
   12b2c:	f1c4 0520 	rsb	r5, r4, #32
   12b30:	fa00 f304 	lsl.w	r3, r0, r4
   12b34:	fa20 f005 	lsr.w	r0, r0, r5
   12b38:	fa01 f204 	lsl.w	r2, r1, r4
   12b3c:	ea40 0002 	orr.w	r0, r0, r2
   12b40:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   12b44:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   12b48:	f141 0100 	adc.w	r1, r1, #0
   12b4c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   12b50:	bf08      	it	eq
   12b52:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   12b56:	bd70      	pop	{r4, r5, r6, pc}
   12b58:	f1c4 0520 	rsb	r5, r4, #32
   12b5c:	fa00 f205 	lsl.w	r2, r0, r5
   12b60:	ea4e 0e02 	orr.w	lr, lr, r2
   12b64:	fa20 f304 	lsr.w	r3, r0, r4
   12b68:	fa01 f205 	lsl.w	r2, r1, r5
   12b6c:	ea43 0302 	orr.w	r3, r3, r2
   12b70:	fa21 f004 	lsr.w	r0, r1, r4
   12b74:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   12b78:	fa21 f204 	lsr.w	r2, r1, r4
   12b7c:	ea20 0002 	bic.w	r0, r0, r2
   12b80:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   12b84:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   12b88:	bf08      	it	eq
   12b8a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   12b8e:	bd70      	pop	{r4, r5, r6, pc}
   12b90:	f094 0f00 	teq	r4, #0
   12b94:	d10f      	bne.n	12bb6 <__aeabi_dmul+0x1c2>
   12b96:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   12b9a:	0040      	lsls	r0, r0, #1
   12b9c:	eb41 0101 	adc.w	r1, r1, r1
   12ba0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   12ba4:	bf08      	it	eq
   12ba6:	3c01      	subeq	r4, #1
   12ba8:	d0f7      	beq.n	12b9a <__aeabi_dmul+0x1a6>
   12baa:	ea41 0106 	orr.w	r1, r1, r6
   12bae:	f095 0f00 	teq	r5, #0
   12bb2:	bf18      	it	ne
   12bb4:	4770      	bxne	lr
   12bb6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   12bba:	0052      	lsls	r2, r2, #1
   12bbc:	eb43 0303 	adc.w	r3, r3, r3
   12bc0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   12bc4:	bf08      	it	eq
   12bc6:	3d01      	subeq	r5, #1
   12bc8:	d0f7      	beq.n	12bba <__aeabi_dmul+0x1c6>
   12bca:	ea43 0306 	orr.w	r3, r3, r6
   12bce:	4770      	bx	lr
   12bd0:	ea94 0f0c 	teq	r4, ip
   12bd4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   12bd8:	bf18      	it	ne
   12bda:	ea95 0f0c 	teqne	r5, ip
   12bde:	d00c      	beq.n	12bfa <__aeabi_dmul+0x206>
   12be0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   12be4:	bf18      	it	ne
   12be6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   12bea:	d1d1      	bne.n	12b90 <__aeabi_dmul+0x19c>
   12bec:	ea81 0103 	eor.w	r1, r1, r3
   12bf0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   12bf4:	f04f 0000 	mov.w	r0, #0
   12bf8:	bd70      	pop	{r4, r5, r6, pc}
   12bfa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   12bfe:	bf06      	itte	eq
   12c00:	4610      	moveq	r0, r2
   12c02:	4619      	moveq	r1, r3
   12c04:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   12c08:	d019      	beq.n	12c3e <__aeabi_dmul+0x24a>
   12c0a:	ea94 0f0c 	teq	r4, ip
   12c0e:	d102      	bne.n	12c16 <__aeabi_dmul+0x222>
   12c10:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   12c14:	d113      	bne.n	12c3e <__aeabi_dmul+0x24a>
   12c16:	ea95 0f0c 	teq	r5, ip
   12c1a:	d105      	bne.n	12c28 <__aeabi_dmul+0x234>
   12c1c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   12c20:	bf1c      	itt	ne
   12c22:	4610      	movne	r0, r2
   12c24:	4619      	movne	r1, r3
   12c26:	d10a      	bne.n	12c3e <__aeabi_dmul+0x24a>
   12c28:	ea81 0103 	eor.w	r1, r1, r3
   12c2c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   12c30:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   12c34:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   12c38:	f04f 0000 	mov.w	r0, #0
   12c3c:	bd70      	pop	{r4, r5, r6, pc}
   12c3e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   12c42:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   12c46:	bd70      	pop	{r4, r5, r6, pc}

00012c48 <__aeabi_ddiv>:
   12c48:	b570      	push	{r4, r5, r6, lr}
   12c4a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   12c4e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   12c52:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   12c56:	bf1d      	ittte	ne
   12c58:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   12c5c:	ea94 0f0c 	teqne	r4, ip
   12c60:	ea95 0f0c 	teqne	r5, ip
   12c64:	f000 f8a7 	bleq	12db6 <__aeabi_ddiv+0x16e>
   12c68:	eba4 0405 	sub.w	r4, r4, r5
   12c6c:	ea81 0e03 	eor.w	lr, r1, r3
   12c70:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   12c74:	ea4f 3101 	mov.w	r1, r1, lsl #12
   12c78:	f000 8088 	beq.w	12d8c <__aeabi_ddiv+0x144>
   12c7c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   12c80:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   12c84:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   12c88:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   12c8c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   12c90:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   12c94:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   12c98:	ea4f 2600 	mov.w	r6, r0, lsl #8
   12c9c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   12ca0:	429d      	cmp	r5, r3
   12ca2:	bf08      	it	eq
   12ca4:	4296      	cmpeq	r6, r2
   12ca6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   12caa:	f504 7440 	add.w	r4, r4, #768	; 0x300
   12cae:	d202      	bcs.n	12cb6 <__aeabi_ddiv+0x6e>
   12cb0:	085b      	lsrs	r3, r3, #1
   12cb2:	ea4f 0232 	mov.w	r2, r2, rrx
   12cb6:	1ab6      	subs	r6, r6, r2
   12cb8:	eb65 0503 	sbc.w	r5, r5, r3
   12cbc:	085b      	lsrs	r3, r3, #1
   12cbe:	ea4f 0232 	mov.w	r2, r2, rrx
   12cc2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   12cc6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   12cca:	ebb6 0e02 	subs.w	lr, r6, r2
   12cce:	eb75 0e03 	sbcs.w	lr, r5, r3
   12cd2:	bf22      	ittt	cs
   12cd4:	1ab6      	subcs	r6, r6, r2
   12cd6:	4675      	movcs	r5, lr
   12cd8:	ea40 000c 	orrcs.w	r0, r0, ip
   12cdc:	085b      	lsrs	r3, r3, #1
   12cde:	ea4f 0232 	mov.w	r2, r2, rrx
   12ce2:	ebb6 0e02 	subs.w	lr, r6, r2
   12ce6:	eb75 0e03 	sbcs.w	lr, r5, r3
   12cea:	bf22      	ittt	cs
   12cec:	1ab6      	subcs	r6, r6, r2
   12cee:	4675      	movcs	r5, lr
   12cf0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   12cf4:	085b      	lsrs	r3, r3, #1
   12cf6:	ea4f 0232 	mov.w	r2, r2, rrx
   12cfa:	ebb6 0e02 	subs.w	lr, r6, r2
   12cfe:	eb75 0e03 	sbcs.w	lr, r5, r3
   12d02:	bf22      	ittt	cs
   12d04:	1ab6      	subcs	r6, r6, r2
   12d06:	4675      	movcs	r5, lr
   12d08:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   12d0c:	085b      	lsrs	r3, r3, #1
   12d0e:	ea4f 0232 	mov.w	r2, r2, rrx
   12d12:	ebb6 0e02 	subs.w	lr, r6, r2
   12d16:	eb75 0e03 	sbcs.w	lr, r5, r3
   12d1a:	bf22      	ittt	cs
   12d1c:	1ab6      	subcs	r6, r6, r2
   12d1e:	4675      	movcs	r5, lr
   12d20:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   12d24:	ea55 0e06 	orrs.w	lr, r5, r6
   12d28:	d018      	beq.n	12d5c <__aeabi_ddiv+0x114>
   12d2a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   12d2e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   12d32:	ea4f 1606 	mov.w	r6, r6, lsl #4
   12d36:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   12d3a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   12d3e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   12d42:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   12d46:	d1c0      	bne.n	12cca <__aeabi_ddiv+0x82>
   12d48:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   12d4c:	d10b      	bne.n	12d66 <__aeabi_ddiv+0x11e>
   12d4e:	ea41 0100 	orr.w	r1, r1, r0
   12d52:	f04f 0000 	mov.w	r0, #0
   12d56:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   12d5a:	e7b6      	b.n	12cca <__aeabi_ddiv+0x82>
   12d5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   12d60:	bf04      	itt	eq
   12d62:	4301      	orreq	r1, r0
   12d64:	2000      	moveq	r0, #0
   12d66:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   12d6a:	bf88      	it	hi
   12d6c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   12d70:	f63f aeaf 	bhi.w	12ad2 <__aeabi_dmul+0xde>
   12d74:	ebb5 0c03 	subs.w	ip, r5, r3
   12d78:	bf04      	itt	eq
   12d7a:	ebb6 0c02 	subseq.w	ip, r6, r2
   12d7e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   12d82:	f150 0000 	adcs.w	r0, r0, #0
   12d86:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   12d8a:	bd70      	pop	{r4, r5, r6, pc}
   12d8c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   12d90:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   12d94:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   12d98:	bfc2      	ittt	gt
   12d9a:	ebd4 050c 	rsbsgt	r5, r4, ip
   12d9e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   12da2:	bd70      	popgt	{r4, r5, r6, pc}
   12da4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   12da8:	f04f 0e00 	mov.w	lr, #0
   12dac:	3c01      	subs	r4, #1
   12dae:	e690      	b.n	12ad2 <__aeabi_dmul+0xde>
   12db0:	ea45 0e06 	orr.w	lr, r5, r6
   12db4:	e68d      	b.n	12ad2 <__aeabi_dmul+0xde>
   12db6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   12dba:	ea94 0f0c 	teq	r4, ip
   12dbe:	bf08      	it	eq
   12dc0:	ea95 0f0c 	teqeq	r5, ip
   12dc4:	f43f af3b 	beq.w	12c3e <__aeabi_dmul+0x24a>
   12dc8:	ea94 0f0c 	teq	r4, ip
   12dcc:	d10a      	bne.n	12de4 <__aeabi_ddiv+0x19c>
   12dce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   12dd2:	f47f af34 	bne.w	12c3e <__aeabi_dmul+0x24a>
   12dd6:	ea95 0f0c 	teq	r5, ip
   12dda:	f47f af25 	bne.w	12c28 <__aeabi_dmul+0x234>
   12dde:	4610      	mov	r0, r2
   12de0:	4619      	mov	r1, r3
   12de2:	e72c      	b.n	12c3e <__aeabi_dmul+0x24a>
   12de4:	ea95 0f0c 	teq	r5, ip
   12de8:	d106      	bne.n	12df8 <__aeabi_ddiv+0x1b0>
   12dea:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   12dee:	f43f aefd 	beq.w	12bec <__aeabi_dmul+0x1f8>
   12df2:	4610      	mov	r0, r2
   12df4:	4619      	mov	r1, r3
   12df6:	e722      	b.n	12c3e <__aeabi_dmul+0x24a>
   12df8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   12dfc:	bf18      	it	ne
   12dfe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   12e02:	f47f aec5 	bne.w	12b90 <__aeabi_dmul+0x19c>
   12e06:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   12e0a:	f47f af0d 	bne.w	12c28 <__aeabi_dmul+0x234>
   12e0e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   12e12:	f47f aeeb 	bne.w	12bec <__aeabi_dmul+0x1f8>
   12e16:	e712      	b.n	12c3e <__aeabi_dmul+0x24a>

00012e18 <__gedf2>:
   12e18:	f04f 3cff 	mov.w	ip, #4294967295
   12e1c:	e006      	b.n	12e2c <__cmpdf2+0x4>
   12e1e:	bf00      	nop

00012e20 <__ledf2>:
   12e20:	f04f 0c01 	mov.w	ip, #1
   12e24:	e002      	b.n	12e2c <__cmpdf2+0x4>
   12e26:	bf00      	nop

00012e28 <__cmpdf2>:
   12e28:	f04f 0c01 	mov.w	ip, #1
   12e2c:	f84d cd04 	str.w	ip, [sp, #-4]!
   12e30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   12e34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   12e38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   12e3c:	bf18      	it	ne
   12e3e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   12e42:	d01b      	beq.n	12e7c <__cmpdf2+0x54>
   12e44:	b001      	add	sp, #4
   12e46:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   12e4a:	bf0c      	ite	eq
   12e4c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   12e50:	ea91 0f03 	teqne	r1, r3
   12e54:	bf02      	ittt	eq
   12e56:	ea90 0f02 	teqeq	r0, r2
   12e5a:	2000      	moveq	r0, #0
   12e5c:	4770      	bxeq	lr
   12e5e:	f110 0f00 	cmn.w	r0, #0
   12e62:	ea91 0f03 	teq	r1, r3
   12e66:	bf58      	it	pl
   12e68:	4299      	cmppl	r1, r3
   12e6a:	bf08      	it	eq
   12e6c:	4290      	cmpeq	r0, r2
   12e6e:	bf2c      	ite	cs
   12e70:	17d8      	asrcs	r0, r3, #31
   12e72:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   12e76:	f040 0001 	orr.w	r0, r0, #1
   12e7a:	4770      	bx	lr
   12e7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   12e80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   12e84:	d102      	bne.n	12e8c <__cmpdf2+0x64>
   12e86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   12e8a:	d107      	bne.n	12e9c <__cmpdf2+0x74>
   12e8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   12e90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   12e94:	d1d6      	bne.n	12e44 <__cmpdf2+0x1c>
   12e96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   12e9a:	d0d3      	beq.n	12e44 <__cmpdf2+0x1c>
   12e9c:	f85d 0b04 	ldr.w	r0, [sp], #4
   12ea0:	4770      	bx	lr
   12ea2:	bf00      	nop

00012ea4 <__aeabi_cdrcmple>:
   12ea4:	4684      	mov	ip, r0
   12ea6:	4610      	mov	r0, r2
   12ea8:	4662      	mov	r2, ip
   12eaa:	468c      	mov	ip, r1
   12eac:	4619      	mov	r1, r3
   12eae:	4663      	mov	r3, ip
   12eb0:	e000      	b.n	12eb4 <__aeabi_cdcmpeq>
   12eb2:	bf00      	nop

00012eb4 <__aeabi_cdcmpeq>:
   12eb4:	b501      	push	{r0, lr}
   12eb6:	f7ff ffb7 	bl	12e28 <__cmpdf2>
   12eba:	2800      	cmp	r0, #0
   12ebc:	bf48      	it	mi
   12ebe:	f110 0f00 	cmnmi.w	r0, #0
   12ec2:	bd01      	pop	{r0, pc}

00012ec4 <__aeabi_dcmpeq>:
   12ec4:	f84d ed08 	str.w	lr, [sp, #-8]!
   12ec8:	f7ff fff4 	bl	12eb4 <__aeabi_cdcmpeq>
   12ecc:	bf0c      	ite	eq
   12ece:	2001      	moveq	r0, #1
   12ed0:	2000      	movne	r0, #0
   12ed2:	f85d fb08 	ldr.w	pc, [sp], #8
   12ed6:	bf00      	nop

00012ed8 <__aeabi_dcmplt>:
   12ed8:	f84d ed08 	str.w	lr, [sp, #-8]!
   12edc:	f7ff ffea 	bl	12eb4 <__aeabi_cdcmpeq>
   12ee0:	bf34      	ite	cc
   12ee2:	2001      	movcc	r0, #1
   12ee4:	2000      	movcs	r0, #0
   12ee6:	f85d fb08 	ldr.w	pc, [sp], #8
   12eea:	bf00      	nop

00012eec <__aeabi_dcmple>:
   12eec:	f84d ed08 	str.w	lr, [sp, #-8]!
   12ef0:	f7ff ffe0 	bl	12eb4 <__aeabi_cdcmpeq>
   12ef4:	bf94      	ite	ls
   12ef6:	2001      	movls	r0, #1
   12ef8:	2000      	movhi	r0, #0
   12efa:	f85d fb08 	ldr.w	pc, [sp], #8
   12efe:	bf00      	nop

00012f00 <__aeabi_dcmpge>:
   12f00:	f84d ed08 	str.w	lr, [sp, #-8]!
   12f04:	f7ff ffce 	bl	12ea4 <__aeabi_cdrcmple>
   12f08:	bf94      	ite	ls
   12f0a:	2001      	movls	r0, #1
   12f0c:	2000      	movhi	r0, #0
   12f0e:	f85d fb08 	ldr.w	pc, [sp], #8
   12f12:	bf00      	nop

00012f14 <__aeabi_dcmpgt>:
   12f14:	f84d ed08 	str.w	lr, [sp, #-8]!
   12f18:	f7ff ffc4 	bl	12ea4 <__aeabi_cdrcmple>
   12f1c:	bf34      	ite	cc
   12f1e:	2001      	movcc	r0, #1
   12f20:	2000      	movcs	r0, #0
   12f22:	f85d fb08 	ldr.w	pc, [sp], #8
   12f26:	bf00      	nop

00012f28 <__aeabi_d2iz>:
   12f28:	ea4f 0241 	mov.w	r2, r1, lsl #1
   12f2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   12f30:	d215      	bcs.n	12f5e <__aeabi_d2iz+0x36>
   12f32:	d511      	bpl.n	12f58 <__aeabi_d2iz+0x30>
   12f34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   12f38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   12f3c:	d912      	bls.n	12f64 <__aeabi_d2iz+0x3c>
   12f3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   12f42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   12f46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   12f4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   12f4e:	fa23 f002 	lsr.w	r0, r3, r2
   12f52:	bf18      	it	ne
   12f54:	4240      	negne	r0, r0
   12f56:	4770      	bx	lr
   12f58:	f04f 0000 	mov.w	r0, #0
   12f5c:	4770      	bx	lr
   12f5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   12f62:	d105      	bne.n	12f70 <__aeabi_d2iz+0x48>
   12f64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   12f68:	bf08      	it	eq
   12f6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   12f6e:	4770      	bx	lr
   12f70:	f04f 0000 	mov.w	r0, #0
   12f74:	4770      	bx	lr
   12f76:	bf00      	nop

00012f78 <__aeabi_d2uiz>:
   12f78:	004a      	lsls	r2, r1, #1
   12f7a:	d211      	bcs.n	12fa0 <__aeabi_d2uiz+0x28>
   12f7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   12f80:	d211      	bcs.n	12fa6 <__aeabi_d2uiz+0x2e>
   12f82:	d50d      	bpl.n	12fa0 <__aeabi_d2uiz+0x28>
   12f84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   12f88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   12f8c:	d40e      	bmi.n	12fac <__aeabi_d2uiz+0x34>
   12f8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   12f92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   12f96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   12f9a:	fa23 f002 	lsr.w	r0, r3, r2
   12f9e:	4770      	bx	lr
   12fa0:	f04f 0000 	mov.w	r0, #0
   12fa4:	4770      	bx	lr
   12fa6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   12faa:	d102      	bne.n	12fb2 <__aeabi_d2uiz+0x3a>
   12fac:	f04f 30ff 	mov.w	r0, #4294967295
   12fb0:	4770      	bx	lr
   12fb2:	f04f 0000 	mov.w	r0, #0
   12fb6:	4770      	bx	lr

00012fb8 <__aeabi_d2f>:
   12fb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   12fbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   12fc0:	bf24      	itt	cs
   12fc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   12fc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   12fca:	d90d      	bls.n	12fe8 <__aeabi_d2f+0x30>
   12fcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   12fd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   12fd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   12fd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   12fdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   12fe0:	bf08      	it	eq
   12fe2:	f020 0001 	biceq.w	r0, r0, #1
   12fe6:	4770      	bx	lr
   12fe8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   12fec:	d121      	bne.n	13032 <__aeabi_d2f+0x7a>
   12fee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   12ff2:	bfbc      	itt	lt
   12ff4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   12ff8:	4770      	bxlt	lr
   12ffa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   12ffe:	ea4f 5252 	mov.w	r2, r2, lsr #21
   13002:	f1c2 0218 	rsb	r2, r2, #24
   13006:	f1c2 0c20 	rsb	ip, r2, #32
   1300a:	fa10 f30c 	lsls.w	r3, r0, ip
   1300e:	fa20 f002 	lsr.w	r0, r0, r2
   13012:	bf18      	it	ne
   13014:	f040 0001 	orrne.w	r0, r0, #1
   13018:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1301c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   13020:	fa03 fc0c 	lsl.w	ip, r3, ip
   13024:	ea40 000c 	orr.w	r0, r0, ip
   13028:	fa23 f302 	lsr.w	r3, r3, r2
   1302c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   13030:	e7cc      	b.n	12fcc <__aeabi_d2f+0x14>
   13032:	ea7f 5362 	mvns.w	r3, r2, asr #21
   13036:	d107      	bne.n	13048 <__aeabi_d2f+0x90>
   13038:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   1303c:	bf1e      	ittt	ne
   1303e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   13042:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   13046:	4770      	bxne	lr
   13048:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   1304c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   13050:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   13054:	4770      	bx	lr
   13056:	bf00      	nop

00013058 <__aeabi_frsub>:
   13058:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   1305c:	e002      	b.n	13064 <__addsf3>
   1305e:	bf00      	nop

00013060 <__aeabi_fsub>:
   13060:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00013064 <__addsf3>:
   13064:	0042      	lsls	r2, r0, #1
   13066:	bf1f      	itttt	ne
   13068:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   1306c:	ea92 0f03 	teqne	r2, r3
   13070:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   13074:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   13078:	d06a      	beq.n	13150 <__addsf3+0xec>
   1307a:	ea4f 6212 	mov.w	r2, r2, lsr #24
   1307e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   13082:	bfc1      	itttt	gt
   13084:	18d2      	addgt	r2, r2, r3
   13086:	4041      	eorgt	r1, r0
   13088:	4048      	eorgt	r0, r1
   1308a:	4041      	eorgt	r1, r0
   1308c:	bfb8      	it	lt
   1308e:	425b      	neglt	r3, r3
   13090:	2b19      	cmp	r3, #25
   13092:	bf88      	it	hi
   13094:	4770      	bxhi	lr
   13096:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   1309a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1309e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   130a2:	bf18      	it	ne
   130a4:	4240      	negne	r0, r0
   130a6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   130aa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   130ae:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   130b2:	bf18      	it	ne
   130b4:	4249      	negne	r1, r1
   130b6:	ea92 0f03 	teq	r2, r3
   130ba:	d03f      	beq.n	1313c <__addsf3+0xd8>
   130bc:	f1a2 0201 	sub.w	r2, r2, #1
   130c0:	fa41 fc03 	asr.w	ip, r1, r3
   130c4:	eb10 000c 	adds.w	r0, r0, ip
   130c8:	f1c3 0320 	rsb	r3, r3, #32
   130cc:	fa01 f103 	lsl.w	r1, r1, r3
   130d0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   130d4:	d502      	bpl.n	130dc <__addsf3+0x78>
   130d6:	4249      	negs	r1, r1
   130d8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   130dc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   130e0:	d313      	bcc.n	1310a <__addsf3+0xa6>
   130e2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   130e6:	d306      	bcc.n	130f6 <__addsf3+0x92>
   130e8:	0840      	lsrs	r0, r0, #1
   130ea:	ea4f 0131 	mov.w	r1, r1, rrx
   130ee:	f102 0201 	add.w	r2, r2, #1
   130f2:	2afe      	cmp	r2, #254	; 0xfe
   130f4:	d251      	bcs.n	1319a <__addsf3+0x136>
   130f6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   130fa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   130fe:	bf08      	it	eq
   13100:	f020 0001 	biceq.w	r0, r0, #1
   13104:	ea40 0003 	orr.w	r0, r0, r3
   13108:	4770      	bx	lr
   1310a:	0049      	lsls	r1, r1, #1
   1310c:	eb40 0000 	adc.w	r0, r0, r0
   13110:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   13114:	f1a2 0201 	sub.w	r2, r2, #1
   13118:	d1ed      	bne.n	130f6 <__addsf3+0x92>
   1311a:	fab0 fc80 	clz	ip, r0
   1311e:	f1ac 0c08 	sub.w	ip, ip, #8
   13122:	ebb2 020c 	subs.w	r2, r2, ip
   13126:	fa00 f00c 	lsl.w	r0, r0, ip
   1312a:	bfaa      	itet	ge
   1312c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   13130:	4252      	neglt	r2, r2
   13132:	4318      	orrge	r0, r3
   13134:	bfbc      	itt	lt
   13136:	40d0      	lsrlt	r0, r2
   13138:	4318      	orrlt	r0, r3
   1313a:	4770      	bx	lr
   1313c:	f092 0f00 	teq	r2, #0
   13140:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   13144:	bf06      	itte	eq
   13146:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   1314a:	3201      	addeq	r2, #1
   1314c:	3b01      	subne	r3, #1
   1314e:	e7b5      	b.n	130bc <__addsf3+0x58>
   13150:	ea4f 0341 	mov.w	r3, r1, lsl #1
   13154:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   13158:	bf18      	it	ne
   1315a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1315e:	d021      	beq.n	131a4 <__addsf3+0x140>
   13160:	ea92 0f03 	teq	r2, r3
   13164:	d004      	beq.n	13170 <__addsf3+0x10c>
   13166:	f092 0f00 	teq	r2, #0
   1316a:	bf08      	it	eq
   1316c:	4608      	moveq	r0, r1
   1316e:	4770      	bx	lr
   13170:	ea90 0f01 	teq	r0, r1
   13174:	bf1c      	itt	ne
   13176:	2000      	movne	r0, #0
   13178:	4770      	bxne	lr
   1317a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   1317e:	d104      	bne.n	1318a <__addsf3+0x126>
   13180:	0040      	lsls	r0, r0, #1
   13182:	bf28      	it	cs
   13184:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   13188:	4770      	bx	lr
   1318a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   1318e:	bf3c      	itt	cc
   13190:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   13194:	4770      	bxcc	lr
   13196:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   1319a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   1319e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   131a2:	4770      	bx	lr
   131a4:	ea7f 6222 	mvns.w	r2, r2, asr #24
   131a8:	bf16      	itet	ne
   131aa:	4608      	movne	r0, r1
   131ac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   131b0:	4601      	movne	r1, r0
   131b2:	0242      	lsls	r2, r0, #9
   131b4:	bf06      	itte	eq
   131b6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   131ba:	ea90 0f01 	teqeq	r0, r1
   131be:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   131c2:	4770      	bx	lr

000131c4 <__aeabi_ui2f>:
   131c4:	f04f 0300 	mov.w	r3, #0
   131c8:	e004      	b.n	131d4 <__aeabi_i2f+0x8>
   131ca:	bf00      	nop

000131cc <__aeabi_i2f>:
   131cc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   131d0:	bf48      	it	mi
   131d2:	4240      	negmi	r0, r0
   131d4:	ea5f 0c00 	movs.w	ip, r0
   131d8:	bf08      	it	eq
   131da:	4770      	bxeq	lr
   131dc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   131e0:	4601      	mov	r1, r0
   131e2:	f04f 0000 	mov.w	r0, #0
   131e6:	e01c      	b.n	13222 <__aeabi_l2f+0x2a>

000131e8 <__aeabi_ul2f>:
   131e8:	ea50 0201 	orrs.w	r2, r0, r1
   131ec:	bf08      	it	eq
   131ee:	4770      	bxeq	lr
   131f0:	f04f 0300 	mov.w	r3, #0
   131f4:	e00a      	b.n	1320c <__aeabi_l2f+0x14>
   131f6:	bf00      	nop

000131f8 <__aeabi_l2f>:
   131f8:	ea50 0201 	orrs.w	r2, r0, r1
   131fc:	bf08      	it	eq
   131fe:	4770      	bxeq	lr
   13200:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   13204:	d502      	bpl.n	1320c <__aeabi_l2f+0x14>
   13206:	4240      	negs	r0, r0
   13208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1320c:	ea5f 0c01 	movs.w	ip, r1
   13210:	bf02      	ittt	eq
   13212:	4684      	moveq	ip, r0
   13214:	4601      	moveq	r1, r0
   13216:	2000      	moveq	r0, #0
   13218:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   1321c:	bf08      	it	eq
   1321e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   13222:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   13226:	fabc f28c 	clz	r2, ip
   1322a:	3a08      	subs	r2, #8
   1322c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   13230:	db10      	blt.n	13254 <__aeabi_l2f+0x5c>
   13232:	fa01 fc02 	lsl.w	ip, r1, r2
   13236:	4463      	add	r3, ip
   13238:	fa00 fc02 	lsl.w	ip, r0, r2
   1323c:	f1c2 0220 	rsb	r2, r2, #32
   13240:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   13244:	fa20 f202 	lsr.w	r2, r0, r2
   13248:	eb43 0002 	adc.w	r0, r3, r2
   1324c:	bf08      	it	eq
   1324e:	f020 0001 	biceq.w	r0, r0, #1
   13252:	4770      	bx	lr
   13254:	f102 0220 	add.w	r2, r2, #32
   13258:	fa01 fc02 	lsl.w	ip, r1, r2
   1325c:	f1c2 0220 	rsb	r2, r2, #32
   13260:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   13264:	fa21 f202 	lsr.w	r2, r1, r2
   13268:	eb43 0002 	adc.w	r0, r3, r2
   1326c:	bf08      	it	eq
   1326e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   13272:	4770      	bx	lr

00013274 <__aeabi_fmul>:
   13274:	f04f 0cff 	mov.w	ip, #255	; 0xff
   13278:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   1327c:	bf1e      	ittt	ne
   1327e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   13282:	ea92 0f0c 	teqne	r2, ip
   13286:	ea93 0f0c 	teqne	r3, ip
   1328a:	d06f      	beq.n	1336c <__aeabi_fmul+0xf8>
   1328c:	441a      	add	r2, r3
   1328e:	ea80 0c01 	eor.w	ip, r0, r1
   13292:	0240      	lsls	r0, r0, #9
   13294:	bf18      	it	ne
   13296:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   1329a:	d01e      	beq.n	132da <__aeabi_fmul+0x66>
   1329c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   132a0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   132a4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   132a8:	fba0 3101 	umull	r3, r1, r0, r1
   132ac:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   132b0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   132b4:	bf3e      	ittt	cc
   132b6:	0049      	lslcc	r1, r1, #1
   132b8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   132bc:	005b      	lslcc	r3, r3, #1
   132be:	ea40 0001 	orr.w	r0, r0, r1
   132c2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   132c6:	2afd      	cmp	r2, #253	; 0xfd
   132c8:	d81d      	bhi.n	13306 <__aeabi_fmul+0x92>
   132ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   132ce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   132d2:	bf08      	it	eq
   132d4:	f020 0001 	biceq.w	r0, r0, #1
   132d8:	4770      	bx	lr
   132da:	f090 0f00 	teq	r0, #0
   132de:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   132e2:	bf08      	it	eq
   132e4:	0249      	lsleq	r1, r1, #9
   132e6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   132ea:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   132ee:	3a7f      	subs	r2, #127	; 0x7f
   132f0:	bfc2      	ittt	gt
   132f2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   132f6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   132fa:	4770      	bxgt	lr
   132fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   13300:	f04f 0300 	mov.w	r3, #0
   13304:	3a01      	subs	r2, #1
   13306:	dc5d      	bgt.n	133c4 <__aeabi_fmul+0x150>
   13308:	f112 0f19 	cmn.w	r2, #25
   1330c:	bfdc      	itt	le
   1330e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   13312:	4770      	bxle	lr
   13314:	f1c2 0200 	rsb	r2, r2, #0
   13318:	0041      	lsls	r1, r0, #1
   1331a:	fa21 f102 	lsr.w	r1, r1, r2
   1331e:	f1c2 0220 	rsb	r2, r2, #32
   13322:	fa00 fc02 	lsl.w	ip, r0, r2
   13326:	ea5f 0031 	movs.w	r0, r1, rrx
   1332a:	f140 0000 	adc.w	r0, r0, #0
   1332e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   13332:	bf08      	it	eq
   13334:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   13338:	4770      	bx	lr
   1333a:	f092 0f00 	teq	r2, #0
   1333e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   13342:	bf02      	ittt	eq
   13344:	0040      	lsleq	r0, r0, #1
   13346:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   1334a:	3a01      	subeq	r2, #1
   1334c:	d0f9      	beq.n	13342 <__aeabi_fmul+0xce>
   1334e:	ea40 000c 	orr.w	r0, r0, ip
   13352:	f093 0f00 	teq	r3, #0
   13356:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1335a:	bf02      	ittt	eq
   1335c:	0049      	lsleq	r1, r1, #1
   1335e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   13362:	3b01      	subeq	r3, #1
   13364:	d0f9      	beq.n	1335a <__aeabi_fmul+0xe6>
   13366:	ea41 010c 	orr.w	r1, r1, ip
   1336a:	e78f      	b.n	1328c <__aeabi_fmul+0x18>
   1336c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   13370:	ea92 0f0c 	teq	r2, ip
   13374:	bf18      	it	ne
   13376:	ea93 0f0c 	teqne	r3, ip
   1337a:	d00a      	beq.n	13392 <__aeabi_fmul+0x11e>
   1337c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   13380:	bf18      	it	ne
   13382:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   13386:	d1d8      	bne.n	1333a <__aeabi_fmul+0xc6>
   13388:	ea80 0001 	eor.w	r0, r0, r1
   1338c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   13390:	4770      	bx	lr
   13392:	f090 0f00 	teq	r0, #0
   13396:	bf17      	itett	ne
   13398:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   1339c:	4608      	moveq	r0, r1
   1339e:	f091 0f00 	teqne	r1, #0
   133a2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   133a6:	d014      	beq.n	133d2 <__aeabi_fmul+0x15e>
   133a8:	ea92 0f0c 	teq	r2, ip
   133ac:	d101      	bne.n	133b2 <__aeabi_fmul+0x13e>
   133ae:	0242      	lsls	r2, r0, #9
   133b0:	d10f      	bne.n	133d2 <__aeabi_fmul+0x15e>
   133b2:	ea93 0f0c 	teq	r3, ip
   133b6:	d103      	bne.n	133c0 <__aeabi_fmul+0x14c>
   133b8:	024b      	lsls	r3, r1, #9
   133ba:	bf18      	it	ne
   133bc:	4608      	movne	r0, r1
   133be:	d108      	bne.n	133d2 <__aeabi_fmul+0x15e>
   133c0:	ea80 0001 	eor.w	r0, r0, r1
   133c4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   133c8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   133cc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   133d0:	4770      	bx	lr
   133d2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   133d6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   133da:	4770      	bx	lr

000133dc <__aeabi_fdiv>:
   133dc:	f04f 0cff 	mov.w	ip, #255	; 0xff
   133e0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   133e4:	bf1e      	ittt	ne
   133e6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   133ea:	ea92 0f0c 	teqne	r2, ip
   133ee:	ea93 0f0c 	teqne	r3, ip
   133f2:	d069      	beq.n	134c8 <__aeabi_fdiv+0xec>
   133f4:	eba2 0203 	sub.w	r2, r2, r3
   133f8:	ea80 0c01 	eor.w	ip, r0, r1
   133fc:	0249      	lsls	r1, r1, #9
   133fe:	ea4f 2040 	mov.w	r0, r0, lsl #9
   13402:	d037      	beq.n	13474 <__aeabi_fdiv+0x98>
   13404:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   13408:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   1340c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   13410:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   13414:	428b      	cmp	r3, r1
   13416:	bf38      	it	cc
   13418:	005b      	lslcc	r3, r3, #1
   1341a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   1341e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   13422:	428b      	cmp	r3, r1
   13424:	bf24      	itt	cs
   13426:	1a5b      	subcs	r3, r3, r1
   13428:	ea40 000c 	orrcs.w	r0, r0, ip
   1342c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   13430:	bf24      	itt	cs
   13432:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   13436:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   1343a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   1343e:	bf24      	itt	cs
   13440:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   13444:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   13448:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   1344c:	bf24      	itt	cs
   1344e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   13452:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   13456:	011b      	lsls	r3, r3, #4
   13458:	bf18      	it	ne
   1345a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   1345e:	d1e0      	bne.n	13422 <__aeabi_fdiv+0x46>
   13460:	2afd      	cmp	r2, #253	; 0xfd
   13462:	f63f af50 	bhi.w	13306 <__aeabi_fmul+0x92>
   13466:	428b      	cmp	r3, r1
   13468:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1346c:	bf08      	it	eq
   1346e:	f020 0001 	biceq.w	r0, r0, #1
   13472:	4770      	bx	lr
   13474:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   13478:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   1347c:	327f      	adds	r2, #127	; 0x7f
   1347e:	bfc2      	ittt	gt
   13480:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   13484:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   13488:	4770      	bxgt	lr
   1348a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1348e:	f04f 0300 	mov.w	r3, #0
   13492:	3a01      	subs	r2, #1
   13494:	e737      	b.n	13306 <__aeabi_fmul+0x92>
   13496:	f092 0f00 	teq	r2, #0
   1349a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   1349e:	bf02      	ittt	eq
   134a0:	0040      	lsleq	r0, r0, #1
   134a2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   134a6:	3a01      	subeq	r2, #1
   134a8:	d0f9      	beq.n	1349e <__aeabi_fdiv+0xc2>
   134aa:	ea40 000c 	orr.w	r0, r0, ip
   134ae:	f093 0f00 	teq	r3, #0
   134b2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   134b6:	bf02      	ittt	eq
   134b8:	0049      	lsleq	r1, r1, #1
   134ba:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   134be:	3b01      	subeq	r3, #1
   134c0:	d0f9      	beq.n	134b6 <__aeabi_fdiv+0xda>
   134c2:	ea41 010c 	orr.w	r1, r1, ip
   134c6:	e795      	b.n	133f4 <__aeabi_fdiv+0x18>
   134c8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   134cc:	ea92 0f0c 	teq	r2, ip
   134d0:	d108      	bne.n	134e4 <__aeabi_fdiv+0x108>
   134d2:	0242      	lsls	r2, r0, #9
   134d4:	f47f af7d 	bne.w	133d2 <__aeabi_fmul+0x15e>
   134d8:	ea93 0f0c 	teq	r3, ip
   134dc:	f47f af70 	bne.w	133c0 <__aeabi_fmul+0x14c>
   134e0:	4608      	mov	r0, r1
   134e2:	e776      	b.n	133d2 <__aeabi_fmul+0x15e>
   134e4:	ea93 0f0c 	teq	r3, ip
   134e8:	d104      	bne.n	134f4 <__aeabi_fdiv+0x118>
   134ea:	024b      	lsls	r3, r1, #9
   134ec:	f43f af4c 	beq.w	13388 <__aeabi_fmul+0x114>
   134f0:	4608      	mov	r0, r1
   134f2:	e76e      	b.n	133d2 <__aeabi_fmul+0x15e>
   134f4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   134f8:	bf18      	it	ne
   134fa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   134fe:	d1ca      	bne.n	13496 <__aeabi_fdiv+0xba>
   13500:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   13504:	f47f af5c 	bne.w	133c0 <__aeabi_fmul+0x14c>
   13508:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   1350c:	f47f af3c 	bne.w	13388 <__aeabi_fmul+0x114>
   13510:	e75f      	b.n	133d2 <__aeabi_fmul+0x15e>
   13512:	bf00      	nop

00013514 <__gesf2>:
   13514:	f04f 3cff 	mov.w	ip, #4294967295
   13518:	e006      	b.n	13528 <__cmpsf2+0x4>
   1351a:	bf00      	nop

0001351c <__lesf2>:
   1351c:	f04f 0c01 	mov.w	ip, #1
   13520:	e002      	b.n	13528 <__cmpsf2+0x4>
   13522:	bf00      	nop

00013524 <__cmpsf2>:
   13524:	f04f 0c01 	mov.w	ip, #1
   13528:	f84d cd04 	str.w	ip, [sp, #-4]!
   1352c:	ea4f 0240 	mov.w	r2, r0, lsl #1
   13530:	ea4f 0341 	mov.w	r3, r1, lsl #1
   13534:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   13538:	bf18      	it	ne
   1353a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1353e:	d011      	beq.n	13564 <__cmpsf2+0x40>
   13540:	b001      	add	sp, #4
   13542:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   13546:	bf18      	it	ne
   13548:	ea90 0f01 	teqne	r0, r1
   1354c:	bf58      	it	pl
   1354e:	ebb2 0003 	subspl.w	r0, r2, r3
   13552:	bf88      	it	hi
   13554:	17c8      	asrhi	r0, r1, #31
   13556:	bf38      	it	cc
   13558:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   1355c:	bf18      	it	ne
   1355e:	f040 0001 	orrne.w	r0, r0, #1
   13562:	4770      	bx	lr
   13564:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   13568:	d102      	bne.n	13570 <__cmpsf2+0x4c>
   1356a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   1356e:	d105      	bne.n	1357c <__cmpsf2+0x58>
   13570:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   13574:	d1e4      	bne.n	13540 <__cmpsf2+0x1c>
   13576:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   1357a:	d0e1      	beq.n	13540 <__cmpsf2+0x1c>
   1357c:	f85d 0b04 	ldr.w	r0, [sp], #4
   13580:	4770      	bx	lr
   13582:	bf00      	nop

00013584 <__aeabi_cfrcmple>:
   13584:	4684      	mov	ip, r0
   13586:	4608      	mov	r0, r1
   13588:	4661      	mov	r1, ip
   1358a:	e7ff      	b.n	1358c <__aeabi_cfcmpeq>

0001358c <__aeabi_cfcmpeq>:
   1358c:	b50f      	push	{r0, r1, r2, r3, lr}
   1358e:	f7ff ffc9 	bl	13524 <__cmpsf2>
   13592:	2800      	cmp	r0, #0
   13594:	bf48      	it	mi
   13596:	f110 0f00 	cmnmi.w	r0, #0
   1359a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0001359c <__aeabi_fcmpeq>:
   1359c:	f84d ed08 	str.w	lr, [sp, #-8]!
   135a0:	f7ff fff4 	bl	1358c <__aeabi_cfcmpeq>
   135a4:	bf0c      	ite	eq
   135a6:	2001      	moveq	r0, #1
   135a8:	2000      	movne	r0, #0
   135aa:	f85d fb08 	ldr.w	pc, [sp], #8
   135ae:	bf00      	nop

000135b0 <__aeabi_fcmplt>:
   135b0:	f84d ed08 	str.w	lr, [sp, #-8]!
   135b4:	f7ff ffea 	bl	1358c <__aeabi_cfcmpeq>
   135b8:	bf34      	ite	cc
   135ba:	2001      	movcc	r0, #1
   135bc:	2000      	movcs	r0, #0
   135be:	f85d fb08 	ldr.w	pc, [sp], #8
   135c2:	bf00      	nop

000135c4 <__aeabi_fcmple>:
   135c4:	f84d ed08 	str.w	lr, [sp, #-8]!
   135c8:	f7ff ffe0 	bl	1358c <__aeabi_cfcmpeq>
   135cc:	bf94      	ite	ls
   135ce:	2001      	movls	r0, #1
   135d0:	2000      	movhi	r0, #0
   135d2:	f85d fb08 	ldr.w	pc, [sp], #8
   135d6:	bf00      	nop

000135d8 <__aeabi_fcmpge>:
   135d8:	f84d ed08 	str.w	lr, [sp, #-8]!
   135dc:	f7ff ffd2 	bl	13584 <__aeabi_cfrcmple>
   135e0:	bf94      	ite	ls
   135e2:	2001      	movls	r0, #1
   135e4:	2000      	movhi	r0, #0
   135e6:	f85d fb08 	ldr.w	pc, [sp], #8
   135ea:	bf00      	nop

000135ec <__aeabi_fcmpgt>:
   135ec:	f84d ed08 	str.w	lr, [sp, #-8]!
   135f0:	f7ff ffc8 	bl	13584 <__aeabi_cfrcmple>
   135f4:	bf34      	ite	cc
   135f6:	2001      	movcc	r0, #1
   135f8:	2000      	movcs	r0, #0
   135fa:	f85d fb08 	ldr.w	pc, [sp], #8
   135fe:	bf00      	nop

00013600 <__aeabi_f2iz>:
   13600:	ea4f 0240 	mov.w	r2, r0, lsl #1
   13604:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   13608:	d30f      	bcc.n	1362a <__aeabi_f2iz+0x2a>
   1360a:	f04f 039e 	mov.w	r3, #158	; 0x9e
   1360e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   13612:	d90d      	bls.n	13630 <__aeabi_f2iz+0x30>
   13614:	ea4f 2300 	mov.w	r3, r0, lsl #8
   13618:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1361c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   13620:	fa23 f002 	lsr.w	r0, r3, r2
   13624:	bf18      	it	ne
   13626:	4240      	negne	r0, r0
   13628:	4770      	bx	lr
   1362a:	f04f 0000 	mov.w	r0, #0
   1362e:	4770      	bx	lr
   13630:	f112 0f61 	cmn.w	r2, #97	; 0x61
   13634:	d101      	bne.n	1363a <__aeabi_f2iz+0x3a>
   13636:	0242      	lsls	r2, r0, #9
   13638:	d105      	bne.n	13646 <__aeabi_f2iz+0x46>
   1363a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   1363e:	bf08      	it	eq
   13640:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   13644:	4770      	bx	lr
   13646:	f04f 0000 	mov.w	r0, #0
   1364a:	4770      	bx	lr

0001364c <memcpy>:
   1364c:	2a0f      	cmp	r2, #15
   1364e:	b4f0      	push	{r4, r5, r6, r7}
   13650:	d945      	bls.n	136de <memcpy+0x92>
   13652:	ea40 0301 	orr.w	r3, r0, r1
   13656:	079b      	lsls	r3, r3, #30
   13658:	d145      	bne.n	136e6 <memcpy+0x9a>
   1365a:	f1a2 0710 	sub.w	r7, r2, #16
   1365e:	460c      	mov	r4, r1
   13660:	4603      	mov	r3, r0
   13662:	093f      	lsrs	r7, r7, #4
   13664:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   13668:	3610      	adds	r6, #16
   1366a:	6825      	ldr	r5, [r4, #0]
   1366c:	3310      	adds	r3, #16
   1366e:	3410      	adds	r4, #16
   13670:	f843 5c10 	str.w	r5, [r3, #-16]
   13674:	f854 5c0c 	ldr.w	r5, [r4, #-12]
   13678:	f843 5c0c 	str.w	r5, [r3, #-12]
   1367c:	f854 5c08 	ldr.w	r5, [r4, #-8]
   13680:	f843 5c08 	str.w	r5, [r3, #-8]
   13684:	f854 5c04 	ldr.w	r5, [r4, #-4]
   13688:	f843 5c04 	str.w	r5, [r3, #-4]
   1368c:	42b3      	cmp	r3, r6
   1368e:	d1ec      	bne.n	1366a <memcpy+0x1e>
   13690:	1c7b      	adds	r3, r7, #1
   13692:	f002 0c0f 	and.w	ip, r2, #15
   13696:	f1bc 0f03 	cmp.w	ip, #3
   1369a:	ea4f 1303 	mov.w	r3, r3, lsl #4
   1369e:	4419      	add	r1, r3
   136a0:	4403      	add	r3, r0
   136a2:	d922      	bls.n	136ea <memcpy+0x9e>
   136a4:	460e      	mov	r6, r1
   136a6:	461d      	mov	r5, r3
   136a8:	4664      	mov	r4, ip
   136aa:	f856 7b04 	ldr.w	r7, [r6], #4
   136ae:	3c04      	subs	r4, #4
   136b0:	2c03      	cmp	r4, #3
   136b2:	f845 7b04 	str.w	r7, [r5], #4
   136b6:	d8f8      	bhi.n	136aa <memcpy+0x5e>
   136b8:	f1ac 0404 	sub.w	r4, ip, #4
   136bc:	f002 0203 	and.w	r2, r2, #3
   136c0:	f024 0403 	bic.w	r4, r4, #3
   136c4:	3404      	adds	r4, #4
   136c6:	4423      	add	r3, r4
   136c8:	4421      	add	r1, r4
   136ca:	b132      	cbz	r2, 136da <memcpy+0x8e>
   136cc:	440a      	add	r2, r1
   136ce:	f811 4b01 	ldrb.w	r4, [r1], #1
   136d2:	4291      	cmp	r1, r2
   136d4:	f803 4b01 	strb.w	r4, [r3], #1
   136d8:	d1f9      	bne.n	136ce <memcpy+0x82>
   136da:	bcf0      	pop	{r4, r5, r6, r7}
   136dc:	4770      	bx	lr
   136de:	4603      	mov	r3, r0
   136e0:	2a00      	cmp	r2, #0
   136e2:	d1f3      	bne.n	136cc <memcpy+0x80>
   136e4:	e7f9      	b.n	136da <memcpy+0x8e>
   136e6:	4603      	mov	r3, r0
   136e8:	e7f0      	b.n	136cc <memcpy+0x80>
   136ea:	4662      	mov	r2, ip
   136ec:	2a00      	cmp	r2, #0
   136ee:	d1ed      	bne.n	136cc <memcpy+0x80>
   136f0:	e7f3      	b.n	136da <memcpy+0x8e>
   136f2:	bf00      	nop

000136f4 <memset>:
   136f4:	0783      	lsls	r3, r0, #30
   136f6:	b4f0      	push	{r4, r5, r6, r7}
   136f8:	d048      	beq.n	1378c <memset+0x98>
   136fa:	1e54      	subs	r4, r2, #1
   136fc:	2a00      	cmp	r2, #0
   136fe:	d043      	beq.n	13788 <memset+0x94>
   13700:	b2cd      	uxtb	r5, r1
   13702:	4603      	mov	r3, r0
   13704:	e002      	b.n	1370c <memset+0x18>
   13706:	2c00      	cmp	r4, #0
   13708:	d03e      	beq.n	13788 <memset+0x94>
   1370a:	4614      	mov	r4, r2
   1370c:	f803 5b01 	strb.w	r5, [r3], #1
   13710:	f013 0f03 	tst.w	r3, #3
   13714:	f104 32ff 	add.w	r2, r4, #4294967295
   13718:	d1f5      	bne.n	13706 <memset+0x12>
   1371a:	2c03      	cmp	r4, #3
   1371c:	d92d      	bls.n	1377a <memset+0x86>
   1371e:	b2cd      	uxtb	r5, r1
   13720:	2c0f      	cmp	r4, #15
   13722:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   13726:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   1372a:	d918      	bls.n	1375e <memset+0x6a>
   1372c:	f1a4 0710 	sub.w	r7, r4, #16
   13730:	f103 0610 	add.w	r6, r3, #16
   13734:	461a      	mov	r2, r3
   13736:	093f      	lsrs	r7, r7, #4
   13738:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   1373c:	6015      	str	r5, [r2, #0]
   1373e:	3210      	adds	r2, #16
   13740:	f842 5c0c 	str.w	r5, [r2, #-12]
   13744:	f842 5c08 	str.w	r5, [r2, #-8]
   13748:	f842 5c04 	str.w	r5, [r2, #-4]
   1374c:	42b2      	cmp	r2, r6
   1374e:	d1f5      	bne.n	1373c <memset+0x48>
   13750:	f004 040f 	and.w	r4, r4, #15
   13754:	3701      	adds	r7, #1
   13756:	2c03      	cmp	r4, #3
   13758:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   1375c:	d90d      	bls.n	1377a <memset+0x86>
   1375e:	461e      	mov	r6, r3
   13760:	4622      	mov	r2, r4
   13762:	3a04      	subs	r2, #4
   13764:	f846 5b04 	str.w	r5, [r6], #4
   13768:	2a03      	cmp	r2, #3
   1376a:	d8fa      	bhi.n	13762 <memset+0x6e>
   1376c:	1f22      	subs	r2, r4, #4
   1376e:	f004 0403 	and.w	r4, r4, #3
   13772:	f022 0203 	bic.w	r2, r2, #3
   13776:	3204      	adds	r2, #4
   13778:	4413      	add	r3, r2
   1377a:	b12c      	cbz	r4, 13788 <memset+0x94>
   1377c:	b2c9      	uxtb	r1, r1
   1377e:	441c      	add	r4, r3
   13780:	f803 1b01 	strb.w	r1, [r3], #1
   13784:	42a3      	cmp	r3, r4
   13786:	d1fb      	bne.n	13780 <memset+0x8c>
   13788:	bcf0      	pop	{r4, r5, r6, r7}
   1378a:	4770      	bx	lr
   1378c:	4614      	mov	r4, r2
   1378e:	4603      	mov	r3, r0
   13790:	e7c3      	b.n	1371a <memset+0x26>
   13792:	bf00      	nop

00013794 <strncpy>:
   13794:	ea40 0301 	orr.w	r3, r0, r1
   13798:	079b      	lsls	r3, r3, #30
   1379a:	b470      	push	{r4, r5, r6}
   1379c:	d12b      	bne.n	137f6 <strncpy+0x62>
   1379e:	2a03      	cmp	r2, #3
   137a0:	bf84      	itt	hi
   137a2:	460b      	movhi	r3, r1
   137a4:	4605      	movhi	r5, r0
   137a6:	d926      	bls.n	137f6 <strncpy+0x62>
   137a8:	4619      	mov	r1, r3
   137aa:	f853 4b04 	ldr.w	r4, [r3], #4
   137ae:	f1a4 3601 	sub.w	r6, r4, #16843009	; 0x1010101
   137b2:	ea26 0604 	bic.w	r6, r6, r4
   137b6:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
   137ba:	d105      	bne.n	137c8 <strncpy+0x34>
   137bc:	3a04      	subs	r2, #4
   137be:	f845 4b04 	str.w	r4, [r5], #4
   137c2:	2a03      	cmp	r2, #3
   137c4:	4619      	mov	r1, r3
   137c6:	d8ef      	bhi.n	137a8 <strncpy+0x14>
   137c8:	b19a      	cbz	r2, 137f2 <strncpy+0x5e>
   137ca:	780c      	ldrb	r4, [r1, #0]
   137cc:	3a01      	subs	r2, #1
   137ce:	1c6b      	adds	r3, r5, #1
   137d0:	702c      	strb	r4, [r5, #0]
   137d2:	b13c      	cbz	r4, 137e4 <strncpy+0x50>
   137d4:	b16a      	cbz	r2, 137f2 <strncpy+0x5e>
   137d6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   137da:	3a01      	subs	r2, #1
   137dc:	f803 4b01 	strb.w	r4, [r3], #1
   137e0:	2c00      	cmp	r4, #0
   137e2:	d1f7      	bne.n	137d4 <strncpy+0x40>
   137e4:	b12a      	cbz	r2, 137f2 <strncpy+0x5e>
   137e6:	441a      	add	r2, r3
   137e8:	2100      	movs	r1, #0
   137ea:	f803 1b01 	strb.w	r1, [r3], #1
   137ee:	4293      	cmp	r3, r2
   137f0:	d1fb      	bne.n	137ea <strncpy+0x56>
   137f2:	bc70      	pop	{r4, r5, r6}
   137f4:	4770      	bx	lr
   137f6:	4605      	mov	r5, r0
   137f8:	e7e6      	b.n	137c8 <strncpy+0x34>
   137fa:	bf00      	nop

000137fc <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:	

/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
   137fc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
   137fe:	e003      	b.n	13808 <LoopCopyDataInit>

00013800 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
   13800:	4b0a      	ldr	r3, [pc, #40]	; (1382c <LoopFillZerobss+0x10>)
	ldr	r3, [r3, r1]
   13802:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
   13804:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
   13806:	3104      	adds	r1, #4

00013808 <LoopCopyDataInit>:
    
LoopCopyDataInit:
	ldr	r0, =_sdata
   13808:	4809      	ldr	r0, [pc, #36]	; (13830 <LoopFillZerobss+0x14>)
	ldr	r3, =_edata
   1380a:	4b0a      	ldr	r3, [pc, #40]	; (13834 <LoopFillZerobss+0x18>)
	adds	r2, r0, r1
   1380c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
   1380e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
   13810:	d3f6      	bcc.n	13800 <CopyDataInit>
	ldr	r2, =_sbss
   13812:	4a09      	ldr	r2, [pc, #36]	; (13838 <LoopFillZerobss+0x1c>)
	b	LoopFillZerobss
   13814:	e002      	b.n	1381c <LoopFillZerobss>

00013816 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
	movs	r3, #0
   13816:	2300      	movs	r3, #0
	str	r3, [r2], #4
   13818:	f842 3b04 	str.w	r3, [r2], #4

0001381c <LoopFillZerobss>:
    
LoopFillZerobss:
	ldr	r3, = _ebss
   1381c:	4b07      	ldr	r3, [pc, #28]	; (1383c <LoopFillZerobss+0x20>)
	cmp	r2, r3
   1381e:	429a      	cmp	r2, r3
	bcc	FillZerobss
   13820:	d3f9      	bcc.n	13816 <FillZerobss>
/* Call the clock system intitialization function.*/
  bl  SystemInit 	
   13822:	f7ec fd8b 	bl	33c <SystemInit>
/* Call the application's entry point.*/
	bl	main
   13826:	f7fe fec7 	bl	125b8 <main>
	bx	lr    
   1382a:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
   1382c:	00013934 	.word	0x00013934
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4
    
LoopCopyDataInit:
	ldr	r0, =_sdata
   13830:	20000000 	.word	0x20000000
	ldr	r3, =_edata
   13834:	200001a0 	.word	0x200001a0
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
   13838:	200001a0 	.word	0x200001a0
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4
    
LoopFillZerobss:
	ldr	r3, = _ebss
   1383c:	2004bfa8 	.word	0x2004bfa8

00013840 <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
   13840:	e7fe      	b.n	13840 <ADC1_2_IRQHandler>
   13842:	0000      	movs	r0, r0
   13844:	00000031 	.word	0x00000031
   13848:	00000032 	.word	0x00000032
   1384c:	00000033 	.word	0x00000033
   13850:	00000034 	.word	0x00000034
   13854:	00000035 	.word	0x00000035
   13858:	00000036 	.word	0x00000036
   1385c:	00000037 	.word	0x00000037
   13860:	00000038 	.word	0x00000038
   13864:	00000039 	.word	0x00000039
   13868:	00003031 	.word	0x00003031
   1386c:	00003131 	.word	0x00003131
   13870:	00003231 	.word	0x00003231
   13874:	00003331 	.word	0x00003331
   13878:	454c4449 	.word	0x454c4449
   1387c:	00000000 	.word	0x00000000

00013880 <ulKernelPriority>:
   13880:	0000007f                                ....

00013884 <heapSTRUCT_SIZE>:
   13884:	00010010                                         ..

00013886 <version>:
   13886:	3d5a0001                                         ..

00013888 <utm_east0>:
   13888:	00093d5a                                Z=..

0001388c <utm_north0>:
   1388c:	005875e6                                .uX.

00013890 <climb_pgain>:
   13890:	bcf5c28f                                ....

00013894 <climb_igain>:
   13894:	3dcccccd                                ...=

00013898 <level_gaz>:
   13898:	3e9eb852                                R..>

0001389c <nav_east0>:
   1389c:	00093d5a                                Z=..

000138a0 <nav_north0>:
   138a0:	005875e6                                .uX.

000138a4 <nb_waypoint>:
   138a4:	00000007 33323130 37363534 42413938     ....0123456789AB
   138b4:	46454443                                CDEF

000138b8 <failsafe>:
	...
   138cc:	20574246 746f6f42 20676e69 3a644924     FBW Booting $Id:
   138dc:	69616d20 2c632e6e 2e312076 30322033      main.c,v 1.3 20
   138ec:	312f3830 32322f30 3a393120 313a3134     08/10/22 19:41:1
   138fc:	61632039 20657373 20707845 000d0a24     9 casse Exp $...
   1390c:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   1391c:	000d0a30 00000d0a 7373696d 61656420     0.......miss dea
   1392c:	6e696c64 000d0a65                       dline...
