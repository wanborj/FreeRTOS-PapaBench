
main.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:
       0:	00 c8 00 20 a1 72 01 00 e5 72 01 00 e5 72 01 00     ... .r...r...r..
      10:	e5 72 01 00 e5 72 01 00 e5 72 01 00 00 00 00 00     .r...r...r......
	...
      2c:	6d 45 00 00 e5 72 01 00 00 00 00 00 79 46 00 00     mE...r......yF..
      3c:	b5 46 00 00 e5 72 01 00 e5 72 01 00 e5 72 01 00     .F...r...r...r..
      4c:	e5 72 01 00 e5 72 01 00 e5 72 01 00 e5 72 01 00     .r...r...r...r..
      5c:	e5 72 01 00 e5 72 01 00 e5 72 01 00 e5 72 01 00     .r...r...r...r..
      6c:	e5 72 01 00 e5 72 01 00 e5 72 01 00 e5 72 01 00     .r...r...r...r..
      7c:	e5 72 01 00 e5 72 01 00 e5 72 01 00 e5 72 01 00     .r...r...r...r..
      8c:	e5 72 01 00 e5 72 01 00 e5 72 01 00 e5 72 01 00     .r...r...r...r..
      9c:	e5 72 01 00 e5 72 01 00 e5 72 01 00 e5 72 01 00     .r...r...r...r..
      ac:	e5 72 01 00 e5 72 01 00 e5 72 01 00 e5 72 01 00     .r...r...r...r..
      bc:	e5 72 01 00 e5 72 01 00 e5 72 01 00 e5 72 01 00     .r...r...r...r..
      cc:	e5 72 01 00 e5 72 01 00 e5 72 01 00 e5 72 01 00     .r...r...r...r..
      dc:	e5 72 01 00 e5 72 01 00 e5 72 01 00 e5 72 01 00     .r...r...r...r..
	...
     108:	5f f8 08 f1                                         _...

0000010c <__get_PSP>:
 * Return the actual process stack pointer
 */
uint32_t __get_PSP(void) __attribute__( ( naked ) );
uint32_t __get_PSP(void)
{
  uint32_t result=0;
     10c:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, psp\n\t"
     10e:	f3ef 8309 	mrs	r3, PSP
     112:	4618      	mov	r0, r3
     114:	4770      	bx	lr
     116:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     118:	4623      	mov	r3, r4
}
     11a:	4618      	mov	r0, r3

0000011c <__set_PSP>:
 * Assign the value ProcessStackPointer to the MSP
 * (process stack pointer) Cortex processor register
 */
void __set_PSP(uint32_t topOfProcStack) __attribute__( ( naked ) );
void __set_PSP(uint32_t topOfProcStack)
{
     11c:	4603      	mov	r3, r0
  __ASM volatile ("MSR psp, %0\n\t"
     11e:	f383 8809 	msr	PSP, r3
     122:	4770      	bx	lr

00000124 <__get_MSP>:
 * Cortex processor register
 */
uint32_t __get_MSP(void) __attribute__( ( naked ) );
uint32_t __get_MSP(void)
{
  uint32_t result=0;
     124:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, msp\n\t"
     126:	f3ef 8308 	mrs	r3, MSP
     12a:	4618      	mov	r0, r3
     12c:	4770      	bx	lr
     12e:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     130:	4623      	mov	r3, r4
}
     132:	4618      	mov	r0, r3

00000134 <__set_MSP>:
 * Assign the value mainStackPointer to the MSP
 * (main stack pointer) Cortex processor register
 */
void __set_MSP(uint32_t topOfMainStack) __attribute__( ( naked ) );
void __set_MSP(uint32_t topOfMainStack)
{
     134:	4603      	mov	r3, r0
  __ASM volatile ("MSR msp, %0\n\t"
     136:	f383 8808 	msr	MSP, r3
     13a:	4770      	bx	lr

0000013c <__get_BASEPRI>:
 * @return BasePriority
 *
 * Return the content of the base priority register
 */
uint32_t __get_BASEPRI(void)
{
     13c:	b480      	push	{r7}
     13e:	b083      	sub	sp, #12
     140:	af00      	add	r7, sp, #0
  uint32_t result=0;
     142:	2300      	movs	r3, #0
     144:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
     146:	f3ef 8312 	mrs	r3, BASEPRI_MAX
     14a:	607b      	str	r3, [r7, #4]
  return(result);
     14c:	687b      	ldr	r3, [r7, #4]
}
     14e:	4618      	mov	r0, r3
     150:	370c      	adds	r7, #12
     152:	46bd      	mov	sp, r7
     154:	f85d 7b04 	ldr.w	r7, [sp], #4
     158:	4770      	bx	lr
     15a:	bf00      	nop

0000015c <__set_BASEPRI>:
 * @param  basePri  BasePriority
 *
 * Set the base priority register
 */
void __set_BASEPRI(uint32_t value)
{
     15c:	b480      	push	{r7}
     15e:	b083      	sub	sp, #12
     160:	af00      	add	r7, sp, #0
     162:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) );
     164:	687b      	ldr	r3, [r7, #4]
     166:	f383 8811 	msr	BASEPRI, r3
}
     16a:	370c      	adds	r7, #12
     16c:	46bd      	mov	sp, r7
     16e:	f85d 7b04 	ldr.w	r7, [sp], #4
     172:	4770      	bx	lr

00000174 <__get_PRIMASK>:
 * @return PriMask
 *
 * Return state of the priority mask bit from the priority mask register
 */
uint32_t __get_PRIMASK(void)
{
     174:	b480      	push	{r7}
     176:	b083      	sub	sp, #12
     178:	af00      	add	r7, sp, #0
  uint32_t result=0;
     17a:	2300      	movs	r3, #0
     17c:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     17e:	f3ef 8310 	mrs	r3, PRIMASK
     182:	607b      	str	r3, [r7, #4]
  return(result);
     184:	687b      	ldr	r3, [r7, #4]
}
     186:	4618      	mov	r0, r3
     188:	370c      	adds	r7, #12
     18a:	46bd      	mov	sp, r7
     18c:	f85d 7b04 	ldr.w	r7, [sp], #4
     190:	4770      	bx	lr
     192:	bf00      	nop

00000194 <__set_PRIMASK>:
 * @param  priMask  PriMask
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
     194:	b480      	push	{r7}
     196:	b083      	sub	sp, #12
     198:	af00      	add	r7, sp, #0
     19a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	f383 8810 	msr	PRIMASK, r3
}
     1a2:	370c      	adds	r7, #12
     1a4:	46bd      	mov	sp, r7
     1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
     1aa:	4770      	bx	lr

000001ac <__get_FAULTMASK>:
 * @return FaultMask
 *
 * Return the content of the fault mask register
 */
uint32_t __get_FAULTMASK(void)
{
     1ac:	b480      	push	{r7}
     1ae:	b083      	sub	sp, #12
     1b0:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1b2:	2300      	movs	r3, #0
     1b4:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
     1b6:	f3ef 8313 	mrs	r3, FAULTMASK
     1ba:	607b      	str	r3, [r7, #4]
  return(result);
     1bc:	687b      	ldr	r3, [r7, #4]
}
     1be:	4618      	mov	r0, r3
     1c0:	370c      	adds	r7, #12
     1c2:	46bd      	mov	sp, r7
     1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     1c8:	4770      	bx	lr
     1ca:	bf00      	nop

000001cc <__set_FAULTMASK>:
 * @param  faultMask  faultMask value
 *
 * Set the fault mask register
 */
void __set_FAULTMASK(uint32_t faultMask)
{
     1cc:	b480      	push	{r7}
     1ce:	b083      	sub	sp, #12
     1d0:	af00      	add	r7, sp, #0
     1d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) );
     1d4:	687b      	ldr	r3, [r7, #4]
     1d6:	f383 8813 	msr	FAULTMASK, r3
}
     1da:	370c      	adds	r7, #12
     1dc:	46bd      	mov	sp, r7
     1de:	f85d 7b04 	ldr.w	r7, [sp], #4
     1e2:	4770      	bx	lr

000001e4 <__get_CONTROL>:
*  @return Control value
 *
 * Return the content of the control register
 */
uint32_t __get_CONTROL(void)
{
     1e4:	b480      	push	{r7}
     1e6:	b083      	sub	sp, #12
     1e8:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1ea:	2300      	movs	r3, #0
     1ec:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, control" : "=r" (result) );
     1ee:	f3ef 8314 	mrs	r3, CONTROL
     1f2:	607b      	str	r3, [r7, #4]
  return(result);
     1f4:	687b      	ldr	r3, [r7, #4]
}
     1f6:	4618      	mov	r0, r3
     1f8:	370c      	adds	r7, #12
     1fa:	46bd      	mov	sp, r7
     1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     200:	4770      	bx	lr
     202:	bf00      	nop

00000204 <__set_CONTROL>:
 * @param  control  Control value
 *
 * Set the control register
 */
void __set_CONTROL(uint32_t control)
{
     204:	b480      	push	{r7}
     206:	b083      	sub	sp, #12
     208:	af00      	add	r7, sp, #0
     20a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR control, %0" : : "r" (control) );
     20c:	687b      	ldr	r3, [r7, #4]
     20e:	f383 8814 	msr	CONTROL, r3
}
     212:	370c      	adds	r7, #12
     214:	46bd      	mov	sp, r7
     216:	f85d 7b04 	ldr.w	r7, [sp], #4
     21a:	4770      	bx	lr

0000021c <__REV>:
 * @return        reversed value
 *
 * Reverse byte order in integer value
 */
uint32_t __REV(uint32_t value)
{
     21c:	b480      	push	{r7}
     21e:	b085      	sub	sp, #20
     220:	af00      	add	r7, sp, #0
     222:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     224:	2300      	movs	r3, #0
     226:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
     228:	687b      	ldr	r3, [r7, #4]
     22a:	ba1b      	rev	r3, r3
     22c:	60fb      	str	r3, [r7, #12]
  return(result);
     22e:	68fb      	ldr	r3, [r7, #12]
}
     230:	4618      	mov	r0, r3
     232:	3714      	adds	r7, #20
     234:	46bd      	mov	sp, r7
     236:	f85d 7b04 	ldr.w	r7, [sp], #4
     23a:	4770      	bx	lr

0000023c <__REV16>:
 * @return        reversed value
 *
 * Reverse byte order in unsigned short value
 */
uint32_t __REV16(uint16_t value)
{
     23c:	b480      	push	{r7}
     23e:	b085      	sub	sp, #20
     240:	af00      	add	r7, sp, #0
     242:	4603      	mov	r3, r0
     244:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     246:	2300      	movs	r3, #0
     248:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
     24a:	88fb      	ldrh	r3, [r7, #6]
     24c:	ba5b      	rev16	r3, r3
     24e:	60fb      	str	r3, [r7, #12]
  return(result);
     250:	68fb      	ldr	r3, [r7, #12]
}
     252:	4618      	mov	r0, r3
     254:	3714      	adds	r7, #20
     256:	46bd      	mov	sp, r7
     258:	f85d 7b04 	ldr.w	r7, [sp], #4
     25c:	4770      	bx	lr
     25e:	bf00      	nop

00000260 <__REVSH>:
 * @return        reversed value
 *
 * Reverse byte order in signed short value with sign extension to integer
 */
int32_t __REVSH(int16_t value)
{
     260:	b480      	push	{r7}
     262:	b085      	sub	sp, #20
     264:	af00      	add	r7, sp, #0
     266:	4603      	mov	r3, r0
     268:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     26a:	2300      	movs	r3, #0
     26c:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
     26e:	88fb      	ldrh	r3, [r7, #6]
     270:	badb      	revsh	r3, r3
     272:	60fb      	str	r3, [r7, #12]
  return(result);
     274:	68fb      	ldr	r3, [r7, #12]
}
     276:	4618      	mov	r0, r3
     278:	3714      	adds	r7, #20
     27a:	46bd      	mov	sp, r7
     27c:	f85d 7b04 	ldr.w	r7, [sp], #4
     280:	4770      	bx	lr
     282:	bf00      	nop

00000284 <__RBIT>:
 * @return        reversed value
 *
 * Reverse bit order of value
 */
uint32_t __RBIT(uint32_t value)
{
     284:	b480      	push	{r7}
     286:	b085      	sub	sp, #20
     288:	af00      	add	r7, sp, #0
     28a:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     28c:	2300      	movs	r3, #0
     28e:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
     290:	687b      	ldr	r3, [r7, #4]
     292:	fa93 f3a3 	rbit	r3, r3
     296:	60fb      	str	r3, [r7, #12]
   return(result);
     298:	68fb      	ldr	r3, [r7, #12]
}
     29a:	4618      	mov	r0, r3
     29c:	3714      	adds	r7, #20
     29e:	46bd      	mov	sp, r7
     2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
     2a4:	4770      	bx	lr
     2a6:	bf00      	nop

000002a8 <__LDREXB>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 8 bit value
 */
uint8_t __LDREXB(uint8_t *addr)
{
     2a8:	b480      	push	{r7}
     2aa:	b085      	sub	sp, #20
     2ac:	af00      	add	r7, sp, #0
     2ae:	6078      	str	r0, [r7, #4]
    uint8_t result=0;
     2b0:	2300      	movs	r3, #0
     2b2:	73fb      	strb	r3, [r7, #15]

   __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) );
     2b4:	687b      	ldr	r3, [r7, #4]
     2b6:	e8d3 3f4f 	ldrexb	r3, [r3]
     2ba:	73fb      	strb	r3, [r7, #15]
   return(result);
     2bc:	7bfb      	ldrb	r3, [r7, #15]
}
     2be:	4618      	mov	r0, r3
     2c0:	3714      	adds	r7, #20
     2c2:	46bd      	mov	sp, r7
     2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     2c8:	4770      	bx	lr
     2ca:	bf00      	nop

000002cc <__LDREXH>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 16 bit values
 */
uint16_t __LDREXH(uint16_t *addr)
{
     2cc:	b480      	push	{r7}
     2ce:	b085      	sub	sp, #20
     2d0:	af00      	add	r7, sp, #0
     2d2:	6078      	str	r0, [r7, #4]
    uint16_t result=0;
     2d4:	2300      	movs	r3, #0
     2d6:	81fb      	strh	r3, [r7, #14]

   __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) );
     2d8:	687b      	ldr	r3, [r7, #4]
     2da:	e8d3 3f5f 	ldrexh	r3, [r3]
     2de:	81fb      	strh	r3, [r7, #14]
   return(result);
     2e0:	89fb      	ldrh	r3, [r7, #14]
}
     2e2:	4618      	mov	r0, r3
     2e4:	3714      	adds	r7, #20
     2e6:	46bd      	mov	sp, r7
     2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
     2ec:	4770      	bx	lr
     2ee:	bf00      	nop

000002f0 <__LDREXW>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 32 bit values
 */
uint32_t __LDREXW(uint32_t *addr)
{
     2f0:	b480      	push	{r7}
     2f2:	b085      	sub	sp, #20
     2f4:	af00      	add	r7, sp, #0
     2f6:	6078      	str	r0, [r7, #4]
    uint32_t result=0;
     2f8:	2300      	movs	r3, #0
     2fa:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     2fc:	687b      	ldr	r3, [r7, #4]
     2fe:	e853 3f00 	ldrex	r3, [r3]
     302:	60fb      	str	r3, [r7, #12]
   return(result);
     304:	68fb      	ldr	r3, [r7, #12]
}
     306:	4618      	mov	r0, r3
     308:	3714      	adds	r7, #20
     30a:	46bd      	mov	sp, r7
     30c:	f85d 7b04 	ldr.w	r7, [sp], #4
     310:	4770      	bx	lr
     312:	bf00      	nop

00000314 <__STREXW>:
 * @return        successful / failed
 *
 * Exclusive STR command for 32 bit values
 */
uint32_t __STREXW(uint32_t value, uint32_t *addr)
{
     314:	b480      	push	{r7}
     316:	b085      	sub	sp, #20
     318:	af00      	add	r7, sp, #0
     31a:	6078      	str	r0, [r7, #4]
     31c:	6039      	str	r1, [r7, #0]
   uint32_t result=0;
     31e:	2300      	movs	r3, #0
     320:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
     322:	683b      	ldr	r3, [r7, #0]
     324:	687a      	ldr	r2, [r7, #4]
     326:	e843 2300 	strex	r3, r2, [r3]
     32a:	60fb      	str	r3, [r7, #12]
   return(result);
     32c:	68fb      	ldr	r3, [r7, #12]
}
     32e:	4618      	mov	r0, r3
     330:	3714      	adds	r7, #20
     332:	46bd      	mov	sp, r7
     334:	f85d 7b04 	ldr.w	r7, [sp], #4
     338:	4770      	bx	lr
     33a:	bf00      	nop

0000033c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
     33c:	b580      	push	{r7, lr}
     33e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     344:	f2c4 0302 	movt	r3, #16386	; 0x4002
     348:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     34c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     350:	6812      	ldr	r2, [r2, #0]
     352:	f042 0201 	orr.w	r2, r2, #1
     356:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     358:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     35c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     360:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     364:	f2c4 0302 	movt	r3, #16386	; 0x4002
     368:	6859      	ldr	r1, [r3, #4]
     36a:	2300      	movs	r3, #0
     36c:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     370:	400b      	ands	r3, r1
     372:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     378:	f2c4 0302 	movt	r3, #16386	; 0x4002
     37c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     380:	f2c4 0202 	movt	r2, #16386	; 0x4002
     384:	6812      	ldr	r2, [r2, #0]
     386:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     38a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     38e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     394:	f2c4 0302 	movt	r3, #16386	; 0x4002
     398:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     39c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3a0:	6812      	ldr	r2, [r2, #0]
     3a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     3a6:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     3a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     3b4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3b8:	6852      	ldr	r2, [r2, #4]
     3ba:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     3be:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     3c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3c8:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     3cc:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
     3ce:	f000 f8a7 	bl	520 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
     3d2:	f44f 436d 	mov.w	r3, #60672	; 0xed00
     3d6:	f2ce 0300 	movt	r3, #57344	; 0xe000
     3da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
     3de:	609a      	str	r2, [r3, #8]
#endif
}
     3e0:	bd80      	pop	{r7, pc}
     3e2:	bf00      	nop

000003e4 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
     3e4:	b480      	push	{r7}
     3e6:	b085      	sub	sp, #20
     3e8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
     3ea:	2300      	movs	r3, #0
     3ec:	60fb      	str	r3, [r7, #12]
     3ee:	2300      	movs	r3, #0
     3f0:	60bb      	str	r3, [r7, #8]
     3f2:	2300      	movs	r3, #0
     3f4:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
     3f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3fe:	685b      	ldr	r3, [r3, #4]
     400:	f003 030c 	and.w	r3, r3, #12
     404:	60fb      	str	r3, [r7, #12]

  switch (tmp)
     406:	68fb      	ldr	r3, [r7, #12]
     408:	2b04      	cmp	r3, #4
     40a:	d00d      	beq.n	428 <SystemCoreClockUpdate+0x44>
     40c:	2b08      	cmp	r3, #8
     40e:	d015      	beq.n	43c <SystemCoreClockUpdate+0x58>
     410:	2b00      	cmp	r3, #0
     412:	d15b      	bne.n	4cc <SystemCoreClockUpdate+0xe8>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
     414:	f240 0300 	movw	r3, #0
     418:	f2c2 0300 	movt	r3, #8192	; 0x2000
     41c:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     420:	f2c0 027a 	movt	r2, #122	; 0x7a
     424:	601a      	str	r2, [r3, #0]
      break;
     426:	e05b      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
     428:	f240 0300 	movw	r3, #0
     42c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     430:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     434:	f2c0 027a 	movt	r2, #122	; 0x7a
     438:	601a      	str	r2, [r3, #0]
      break;
     43a:	e051      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
     43c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     440:	f2c4 0302 	movt	r3, #16386	; 0x4002
     444:	685b      	ldr	r3, [r3, #4]
     446:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     44a:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
     44c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     450:	f2c4 0302 	movt	r3, #16386	; 0x4002
     454:	685b      	ldr	r3, [r3, #4]
     456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     45a:	607b      	str	r3, [r7, #4]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     45c:	68bb      	ldr	r3, [r7, #8]
     45e:	0c9b      	lsrs	r3, r3, #18
     460:	3302      	adds	r3, #2
     462:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00)
     464:	687b      	ldr	r3, [r7, #4]
     466:	2b00      	cmp	r3, #0
     468:	d10c      	bne.n	484 <SystemCoreClockUpdate+0xa0>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
     46a:	68ba      	ldr	r2, [r7, #8]
     46c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     470:	f2c0 033d 	movt	r3, #61	; 0x3d
     474:	fb03 f202 	mul.w	r2, r3, r2
     478:	f240 0300 	movw	r3, #0
     47c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     480:	601a      	str	r2, [r3, #0]
     482:	e022      	b.n	4ca <SystemCoreClockUpdate+0xe6>
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
     484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     488:	f2c4 0302 	movt	r3, #16386	; 0x4002
     48c:	685b      	ldr	r3, [r3, #4]
     48e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     492:	2b00      	cmp	r3, #0
     494:	d00c      	beq.n	4b0 <SystemCoreClockUpdate+0xcc>
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
     496:	68ba      	ldr	r2, [r7, #8]
     498:	f44f 6310 	mov.w	r3, #2304	; 0x900
     49c:	f2c0 033d 	movt	r3, #61	; 0x3d
     4a0:	fb03 f202 	mul.w	r2, r3, r2
     4a4:	f240 0300 	movw	r3, #0
     4a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4ac:	601a      	str	r2, [r3, #0]
     4ae:	e00c      	b.n	4ca <SystemCoreClockUpdate+0xe6>
        }
        else
        {
          SystemCoreClock = HSE_VALUE * pllmull;
     4b0:	68ba      	ldr	r2, [r7, #8]
     4b2:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     4b6:	f2c0 037a 	movt	r3, #122	; 0x7a
     4ba:	fb03 f202 	mul.w	r2, r3, r2
     4be:	f240 0300 	movw	r3, #0
     4c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4c6:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2;
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     4c8:	e00a      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
     4ca:	e009      	b.n	4e0 <SystemCoreClockUpdate+0xfc>

    default:
      SystemCoreClock = HSI_VALUE;
     4cc:	f240 0300 	movw	r3, #0
     4d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4d4:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     4d8:	f2c0 027a 	movt	r2, #122	; 0x7a
     4dc:	601a      	str	r2, [r3, #0]
      break;
     4de:	bf00      	nop
  }

  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
     4e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     4e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     4e8:	685b      	ldr	r3, [r3, #4]
     4ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     4ee:	091a      	lsrs	r2, r3, #4
     4f0:	f240 0304 	movw	r3, #4
     4f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4f8:	5c9b      	ldrb	r3, [r3, r2]
     4fa:	b2db      	uxtb	r3, r3
     4fc:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
     4fe:	f240 0300 	movw	r3, #0
     502:	f2c2 0300 	movt	r3, #8192	; 0x2000
     506:	681a      	ldr	r2, [r3, #0]
     508:	68fb      	ldr	r3, [r7, #12]
     50a:	40da      	lsrs	r2, r3
     50c:	f240 0300 	movw	r3, #0
     510:	f2c2 0300 	movt	r3, #8192	; 0x2000
     514:	601a      	str	r2, [r3, #0]
}
     516:	3714      	adds	r7, #20
     518:	46bd      	mov	sp, r7
     51a:	f85d 7b04 	ldr.w	r7, [sp], #4
     51e:	4770      	bx	lr

00000520 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
     520:	b580      	push	{r7, lr}
     522:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
     524:	f000 f802 	bl	52c <SetSysClockTo72>
#endif

 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */
}
     528:	bd80      	pop	{r7, pc}
     52a:	bf00      	nop

0000052c <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
     52c:	b480      	push	{r7}
     52e:	b083      	sub	sp, #12
     530:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
     532:	2300      	movs	r3, #0
     534:	607b      	str	r3, [r7, #4]
     536:	2300      	movs	r3, #0
     538:	603b      	str	r3, [r7, #0]

  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
     53a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     53e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     542:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     546:	f2c4 0202 	movt	r2, #16386	; 0x4002
     54a:	6812      	ldr	r2, [r2, #0]
     54c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     550:	601a      	str	r2, [r3, #0]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
     552:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     556:	f2c4 0302 	movt	r3, #16386	; 0x4002
     55a:	681b      	ldr	r3, [r3, #0]
     55c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     560:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
     562:	687b      	ldr	r3, [r7, #4]
     564:	3301      	adds	r3, #1
     566:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
     568:	683b      	ldr	r3, [r7, #0]
     56a:	2b00      	cmp	r3, #0
     56c:	d103      	bne.n	576 <SetSysClockTo72+0x4a>
     56e:	687b      	ldr	r3, [r7, #4]
     570:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     574:	d1ed      	bne.n	552 <SetSysClockTo72+0x26>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
     576:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     57a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     57e:	681b      	ldr	r3, [r3, #0]
     580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     584:	2b00      	cmp	r3, #0
     586:	d002      	beq.n	58e <SetSysClockTo72+0x62>
  {
    HSEStatus = (uint32_t)0x01;
     588:	2301      	movs	r3, #1
     58a:	603b      	str	r3, [r7, #0]
     58c:	e001      	b.n	592 <SetSysClockTo72+0x66>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
     58e:	2300      	movs	r3, #0
     590:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
     592:	683b      	ldr	r3, [r7, #0]
     594:	2b01      	cmp	r3, #1
     596:	f040 8094 	bne.w	6c2 <SetSysClockTo72+0x196>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
     59a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     59e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5a6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5aa:	6812      	ldr	r2, [r2, #0]
     5ac:	f042 0210 	orr.w	r2, r2, #16
     5b0:	601a      	str	r2, [r3, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
     5b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5be:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5c2:	6812      	ldr	r2, [r2, #0]
     5c4:	f022 0203 	bic.w	r2, r2, #3
     5c8:	601a      	str	r2, [r3, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;
     5ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5d6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5da:	6812      	ldr	r2, [r2, #0]
     5dc:	f042 0202 	orr.w	r2, r2, #2
     5e0:	601a      	str	r2, [r3, #0]


    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
     5e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     5ee:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5f2:	6852      	ldr	r2, [r2, #4]
     5f4:	605a      	str	r2, [r3, #4]

    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
     5f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     602:	f2c4 0202 	movt	r2, #16386	; 0x4002
     606:	6852      	ldr	r2, [r2, #4]
     608:	605a      	str	r2, [r3, #4]

    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
     60a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     60e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     612:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     616:	f2c4 0202 	movt	r2, #16386	; 0x4002
     61a:	6852      	ldr	r2, [r2, #4]
     61c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     620:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 |
                            RCC_CFGR_PLLMULL9);
#else
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
     622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     626:	f2c4 0302 	movt	r3, #16386	; 0x4002
     62a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     62e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     632:	6852      	ldr	r2, [r2, #4]
     634:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
     638:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
     63a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     63e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     642:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     646:	f2c4 0202 	movt	r2, #16386	; 0x4002
     64a:	6852      	ldr	r2, [r2, #4]
     64c:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
     650:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
     652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     656:	f2c4 0302 	movt	r3, #16386	; 0x4002
     65a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     65e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     662:	6812      	ldr	r2, [r2, #0]
     664:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     668:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
     66a:	bf00      	nop
     66c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     670:	f2c4 0302 	movt	r3, #16386	; 0x4002
     674:	681b      	ldr	r3, [r3, #0]
     676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
     67a:	2b00      	cmp	r3, #0
     67c:	d0f6      	beq.n	66c <SetSysClockTo72+0x140>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
     67e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     682:	f2c4 0302 	movt	r3, #16386	; 0x4002
     686:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     68a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     68e:	6852      	ldr	r2, [r2, #4]
     690:	f022 0203 	bic.w	r2, r2, #3
     694:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
     696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     69a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     69e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6a2:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6a6:	6852      	ldr	r2, [r2, #4]
     6a8:	f042 0202 	orr.w	r2, r2, #2
     6ac:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
     6ae:	bf00      	nop
     6b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6b8:	685b      	ldr	r3, [r3, #4]
     6ba:	f003 030c 	and.w	r3, r3, #12
     6be:	2b08      	cmp	r3, #8
     6c0:	d1f6      	bne.n	6b0 <SetSysClockTo72+0x184>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }
}
     6c2:	370c      	adds	r7, #12
     6c4:	46bd      	mov	sp, r7
     6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
     6ca:	4770      	bx	lr
     6cc:	000173a0 	.word	0x000173a0
     6d0:	20000000 	.word	0x20000000
     6d4:	2000016c 	.word	0x2000016c
     6d8:	20000170 	.word	0x20000170
     6dc:	2000ace0 	.word	0x2000ace0

000006e0 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
     6e0:	b480      	push	{r7}
     6e2:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     6e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6f0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6f4:	6812      	ldr	r2, [r2, #0]
     6f6:	f042 0201 	orr.w	r2, r2, #1
     6fa:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     6fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     700:	f2c4 0202 	movt	r2, #16386	; 0x4002
     704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     708:	f2c4 0302 	movt	r3, #16386	; 0x4002
     70c:	6859      	ldr	r1, [r3, #4]
     70e:	2300      	movs	r3, #0
     710:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     714:	400b      	ands	r3, r1
     716:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     718:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     71c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     720:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     724:	f2c4 0202 	movt	r2, #16386	; 0x4002
     728:	6812      	ldr	r2, [r2, #0]
     72a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     72e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     732:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     738:	f2c4 0302 	movt	r3, #16386	; 0x4002
     73c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     740:	f2c4 0202 	movt	r2, #16386	; 0x4002
     744:	6812      	ldr	r2, [r2, #0]
     746:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     74a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     74c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     750:	f2c4 0302 	movt	r3, #16386	; 0x4002
     754:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     758:	f2c4 0202 	movt	r2, #16386	; 0x4002
     75c:	6852      	ldr	r2, [r2, #4]
     75e:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     762:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     768:	f2c4 0302 	movt	r3, #16386	; 0x4002
     76c:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     770:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
     772:	46bd      	mov	sp, r7
     774:	f85d 7b04 	ldr.w	r7, [sp], #4
     778:	4770      	bx	lr
     77a:	bf00      	nop

0000077c <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
     77c:	b480      	push	{r7}
     77e:	b083      	sub	sp, #12
     780:	af00      	add	r7, sp, #0
     782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
     784:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     788:	f2c4 0302 	movt	r3, #16386	; 0x4002
     78c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     790:	f2c4 0202 	movt	r2, #16386	; 0x4002
     794:	6812      	ldr	r2, [r2, #0]
     796:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     79a:	601a      	str	r2, [r3, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
     79c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ac:	6812      	ldr	r2, [r2, #0]
     7ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     7b2:	601a      	str	r2, [r3, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
     7b4:	687b      	ldr	r3, [r7, #4]
     7b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
     7ba:	d003      	beq.n	7c4 <RCC_HSEConfig+0x48>
     7bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
     7c0:	d00d      	beq.n	7de <RCC_HSEConfig+0x62>
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
      break;

    default:
      break;
     7c2:	e019      	b.n	7f8 <RCC_HSEConfig+0x7c>
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
     7c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7d0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7d4:	6812      	ldr	r2, [r2, #0]
     7d6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     7da:	601a      	str	r2, [r3, #0]
      break;
     7dc:	e00c      	b.n	7f8 <RCC_HSEConfig+0x7c>

    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
     7de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7ea:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ee:	6812      	ldr	r2, [r2, #0]
     7f0:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
     7f4:	601a      	str	r2, [r3, #0]
      break;
     7f6:	bf00      	nop

    default:
      break;
  }
}
     7f8:	370c      	adds	r7, #12
     7fa:	46bd      	mov	sp, r7
     7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     800:	4770      	bx	lr
     802:	bf00      	nop

00000804 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
     804:	b580      	push	{r7, lr}
     806:	b082      	sub	sp, #8
     808:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
     80a:	2300      	movs	r3, #0
     80c:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
     80e:	2300      	movs	r3, #0
     810:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
     812:	2300      	movs	r3, #0
     814:	71bb      	strb	r3, [r7, #6]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
     816:	2031      	movs	r0, #49	; 0x31
     818:	f000 fba2 	bl	f60 <RCC_GetFlagStatus>
     81c:	4603      	mov	r3, r0
     81e:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;
     820:	683b      	ldr	r3, [r7, #0]
     822:	3301      	adds	r3, #1
     824:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
     826:	683b      	ldr	r3, [r7, #0]
     828:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     82c:	d002      	beq.n	834 <RCC_WaitForHSEStartUp+0x30>
     82e:	79bb      	ldrb	r3, [r7, #6]
     830:	2b00      	cmp	r3, #0
     832:	d0f0      	beq.n	816 <RCC_WaitForHSEStartUp+0x12>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
     834:	2031      	movs	r0, #49	; 0x31
     836:	f000 fb93 	bl	f60 <RCC_GetFlagStatus>
     83a:	4603      	mov	r3, r0
     83c:	2b00      	cmp	r3, #0
     83e:	d002      	beq.n	846 <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
     840:	2301      	movs	r3, #1
     842:	71fb      	strb	r3, [r7, #7]
     844:	e001      	b.n	84a <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
     846:	2300      	movs	r3, #0
     848:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
     84a:	79fb      	ldrb	r3, [r7, #7]
}
     84c:	4618      	mov	r0, r3
     84e:	3708      	adds	r7, #8
     850:	46bd      	mov	sp, r7
     852:	bd80      	pop	{r7, pc}

00000854 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *   This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
     854:	b480      	push	{r7}
     856:	b085      	sub	sp, #20
     858:	af00      	add	r7, sp, #0
     85a:	4603      	mov	r3, r0
     85c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
     85e:	2300      	movs	r3, #0
     860:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
     862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     866:	f2c4 0302 	movt	r3, #16386	; 0x4002
     86a:	681b      	ldr	r3, [r3, #0]
     86c:	60fb      	str	r3, [r7, #12]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
     86e:	68fb      	ldr	r3, [r7, #12]
     870:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
     874:	60fb      	str	r3, [r7, #12]
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
     876:	79fb      	ldrb	r3, [r7, #7]
     878:	00db      	lsls	r3, r3, #3
     87a:	68fa      	ldr	r2, [r7, #12]
     87c:	4313      	orrs	r3, r2
     87e:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CR = tmpreg;
     880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     884:	f2c4 0302 	movt	r3, #16386	; 0x4002
     888:	68fa      	ldr	r2, [r7, #12]
     88a:	601a      	str	r2, [r3, #0]
}
     88c:	3714      	adds	r7, #20
     88e:	46bd      	mov	sp, r7
     890:	f85d 7b04 	ldr.w	r7, [sp], #4
     894:	4770      	bx	lr
     896:	bf00      	nop

00000898 <RCC_HSICmd>:
  * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
  * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
     898:	b480      	push	{r7}
     89a:	b083      	sub	sp, #12
     89c:	af00      	add	r7, sp, #0
     89e:	4603      	mov	r3, r0
     8a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
     8a2:	2300      	movs	r3, #0
     8a4:	f2c4 2342 	movt	r3, #16962	; 0x4242
     8a8:	79fa      	ldrb	r2, [r7, #7]
     8aa:	601a      	str	r2, [r3, #0]
}
     8ac:	370c      	adds	r7, #12
     8ae:	46bd      	mov	sp, r7
     8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
     8b4:	4770      	bx	lr
     8b6:	bf00      	nop

000008b8 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
     8b8:	b480      	push	{r7}
     8ba:	b085      	sub	sp, #20
     8bc:	af00      	add	r7, sp, #0
     8be:	6078      	str	r0, [r7, #4]
     8c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
     8c2:	2300      	movs	r3, #0
     8c4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
     8c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ce:	685b      	ldr	r3, [r3, #4]
     8d0:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
     8d2:	68fb      	ldr	r3, [r7, #12]
     8d4:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
     8d8:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
     8da:	687a      	ldr	r2, [r7, #4]
     8dc:	683b      	ldr	r3, [r7, #0]
     8de:	4313      	orrs	r3, r2
     8e0:	68fa      	ldr	r2, [r7, #12]
     8e2:	4313      	orrs	r3, r2
     8e4:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     8e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ee:	68fa      	ldr	r2, [r7, #12]
     8f0:	605a      	str	r2, [r3, #4]
}
     8f2:	3714      	adds	r7, #20
     8f4:	46bd      	mov	sp, r7
     8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
     8fa:	4770      	bx	lr

000008fc <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
     8fc:	b480      	push	{r7}
     8fe:	b083      	sub	sp, #12
     900:	af00      	add	r7, sp, #0
     902:	4603      	mov	r3, r0
     904:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
     906:	2360      	movs	r3, #96	; 0x60
     908:	f2c4 2342 	movt	r3, #16962	; 0x4242
     90c:	79fa      	ldrb	r2, [r7, #7]
     90e:	601a      	str	r2, [r3, #0]
}
     910:	370c      	adds	r7, #12
     912:	46bd      	mov	sp, r7
     914:	f85d 7b04 	ldr.w	r7, [sp], #4
     918:	4770      	bx	lr
     91a:	bf00      	nop

0000091c <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
     91c:	b480      	push	{r7}
     91e:	b085      	sub	sp, #20
     920:	af00      	add	r7, sp, #0
     922:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     924:	2300      	movs	r3, #0
     926:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
     928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     92c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     930:	685b      	ldr	r3, [r3, #4]
     932:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
     934:	68fb      	ldr	r3, [r7, #12]
     936:	f023 0303 	bic.w	r3, r3, #3
     93a:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
     93c:	68fa      	ldr	r2, [r7, #12]
     93e:	687b      	ldr	r3, [r7, #4]
     940:	4313      	orrs	r3, r2
     942:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     948:	f2c4 0302 	movt	r3, #16386	; 0x4002
     94c:	68fa      	ldr	r2, [r7, #12]
     94e:	605a      	str	r2, [r3, #4]
}
     950:	3714      	adds	r7, #20
     952:	46bd      	mov	sp, r7
     954:	f85d 7b04 	ldr.w	r7, [sp], #4
     958:	4770      	bx	lr
     95a:	bf00      	nop

0000095c <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
     95c:	b480      	push	{r7}
     95e:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
     960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     964:	f2c4 0302 	movt	r3, #16386	; 0x4002
     968:	685b      	ldr	r3, [r3, #4]
     96a:	b2db      	uxtb	r3, r3
     96c:	f003 030c 	and.w	r3, r3, #12
     970:	b2db      	uxtb	r3, r3
}
     972:	4618      	mov	r0, r3
     974:	46bd      	mov	sp, r7
     976:	f85d 7b04 	ldr.w	r7, [sp], #4
     97a:	4770      	bx	lr

0000097c <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
     97c:	b480      	push	{r7}
     97e:	b085      	sub	sp, #20
     980:	af00      	add	r7, sp, #0
     982:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     984:	2300      	movs	r3, #0
     986:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
     988:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     98c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     990:	685b      	ldr	r3, [r3, #4]
     992:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
     994:	68fb      	ldr	r3, [r7, #12]
     996:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
     99a:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
     99c:	68fa      	ldr	r2, [r7, #12]
     99e:	687b      	ldr	r3, [r7, #4]
     9a0:	4313      	orrs	r3, r2
     9a2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ac:	68fa      	ldr	r2, [r7, #12]
     9ae:	605a      	str	r2, [r3, #4]
}
     9b0:	3714      	adds	r7, #20
     9b2:	46bd      	mov	sp, r7
     9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9b8:	4770      	bx	lr
     9ba:	bf00      	nop

000009bc <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
     9bc:	b480      	push	{r7}
     9be:	b085      	sub	sp, #20
     9c0:	af00      	add	r7, sp, #0
     9c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     9c4:	2300      	movs	r3, #0
     9c6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     9c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9d0:	685b      	ldr	r3, [r3, #4]
     9d2:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
     9d4:	68fb      	ldr	r3, [r7, #12]
     9d6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
     9da:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
     9dc:	68fa      	ldr	r2, [r7, #12]
     9de:	687b      	ldr	r3, [r7, #4]
     9e0:	4313      	orrs	r3, r2
     9e2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ec:	68fa      	ldr	r2, [r7, #12]
     9ee:	605a      	str	r2, [r3, #4]
}
     9f0:	3714      	adds	r7, #20
     9f2:	46bd      	mov	sp, r7
     9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9f8:	4770      	bx	lr
     9fa:	bf00      	nop

000009fc <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
     9fc:	b480      	push	{r7}
     9fe:	b085      	sub	sp, #20
     a00:	af00      	add	r7, sp, #0
     a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     a04:	2300      	movs	r3, #0
     a06:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a0c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a10:	685b      	ldr	r3, [r3, #4]
     a12:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
     a14:	68fb      	ldr	r3, [r7, #12]
     a16:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
     a1a:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
     a1c:	687b      	ldr	r3, [r7, #4]
     a1e:	00db      	lsls	r3, r3, #3
     a20:	68fa      	ldr	r2, [r7, #12]
     a22:	4313      	orrs	r3, r2
     a24:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     a26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a2a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a2e:	68fa      	ldr	r2, [r7, #12]
     a30:	605a      	str	r2, [r3, #4]
}
     a32:	3714      	adds	r7, #20
     a34:	46bd      	mov	sp, r7
     a36:	f85d 7b04 	ldr.w	r7, [sp], #4
     a3a:	4770      	bx	lr

00000a3c <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
     a3c:	b480      	push	{r7}
     a3e:	b083      	sub	sp, #12
     a40:	af00      	add	r7, sp, #0
     a42:	4602      	mov	r2, r0
     a44:	460b      	mov	r3, r1
     a46:	71fa      	strb	r2, [r7, #7]
     a48:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     a4a:	79bb      	ldrb	r3, [r7, #6]
     a4c:	2b00      	cmp	r3, #0
     a4e:	d00e      	beq.n	a6e <RCC_ITConfig+0x32>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
     a50:	f241 0309 	movw	r3, #4105	; 0x1009
     a54:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a58:	f241 0209 	movw	r2, #4105	; 0x1009
     a5c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a60:	7812      	ldrb	r2, [r2, #0]
     a62:	b2d1      	uxtb	r1, r2
     a64:	79fa      	ldrb	r2, [r7, #7]
     a66:	430a      	orrs	r2, r1
     a68:	b2d2      	uxtb	r2, r2
     a6a:	701a      	strb	r2, [r3, #0]
     a6c:	e00f      	b.n	a8e <RCC_ITConfig+0x52>
  }
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
     a6e:	f241 0309 	movw	r3, #4105	; 0x1009
     a72:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a76:	f241 0209 	movw	r2, #4105	; 0x1009
     a7a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a7e:	7812      	ldrb	r2, [r2, #0]
     a80:	b2d1      	uxtb	r1, r2
     a82:	79fa      	ldrb	r2, [r7, #7]
     a84:	43d2      	mvns	r2, r2
     a86:	b2d2      	uxtb	r2, r2
     a88:	400a      	ands	r2, r1
     a8a:	b2d2      	uxtb	r2, r2
     a8c:	701a      	strb	r2, [r3, #0]
  }
}
     a8e:	370c      	adds	r7, #12
     a90:	46bd      	mov	sp, r7
     a92:	f85d 7b04 	ldr.w	r7, [sp], #4
     a96:	4770      	bx	lr

00000a98 <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
     a98:	b480      	push	{r7}
     a9a:	b083      	sub	sp, #12
     a9c:	af00      	add	r7, sp, #0
     a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
     aa0:	23d8      	movs	r3, #216	; 0xd8
     aa2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     aa6:	687a      	ldr	r2, [r7, #4]
     aa8:	601a      	str	r2, [r3, #0]
}
     aaa:	370c      	adds	r7, #12
     aac:	46bd      	mov	sp, r7
     aae:	f85d 7b04 	ldr.w	r7, [sp], #4
     ab2:	4770      	bx	lr

00000ab4 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
     ab4:	b480      	push	{r7}
     ab6:	b085      	sub	sp, #20
     ab8:	af00      	add	r7, sp, #0
     aba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     abc:	2300      	movs	r3, #0
     abe:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
     ac0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ac4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ac8:	685b      	ldr	r3, [r3, #4]
     aca:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
     acc:	68fb      	ldr	r3, [r7, #12]
     ace:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
     ad2:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
     ad4:	68fa      	ldr	r2, [r7, #12]
     ad6:	687b      	ldr	r3, [r7, #4]
     ad8:	4313      	orrs	r3, r2
     ada:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ae0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ae4:	68fa      	ldr	r2, [r7, #12]
     ae6:	605a      	str	r2, [r3, #4]
}
     ae8:	3714      	adds	r7, #20
     aea:	46bd      	mov	sp, r7
     aec:	f85d 7b04 	ldr.w	r7, [sp], #4
     af0:	4770      	bx	lr
     af2:	bf00      	nop

00000af4 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
     af4:	b480      	push	{r7}
     af6:	b083      	sub	sp, #12
     af8:	af00      	add	r7, sp, #0
     afa:	4603      	mov	r3, r0
     afc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     afe:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b02:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b06:	2200      	movs	r2, #0
     b08:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     b0a:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b0e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b12:	2200      	movs	r2, #0
     b14:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
     b16:	79fb      	ldrb	r3, [r7, #7]
     b18:	2b01      	cmp	r3, #1
     b1a:	d002      	beq.n	b22 <RCC_LSEConfig+0x2e>
     b1c:	2b04      	cmp	r3, #4
     b1e:	d007      	beq.n	b30 <RCC_LSEConfig+0x3c>
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;

    default:
      break;
     b20:	e00d      	b.n	b3e <RCC_LSEConfig+0x4a>
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
     b22:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b2a:	2201      	movs	r2, #1
     b2c:	701a      	strb	r2, [r3, #0]
      break;
     b2e:	e006      	b.n	b3e <RCC_LSEConfig+0x4a>

    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
     b30:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b34:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b38:	2205      	movs	r2, #5
     b3a:	701a      	strb	r2, [r3, #0]
      break;
     b3c:	bf00      	nop

    default:
      break;
  }
}
     b3e:	370c      	adds	r7, #12
     b40:	46bd      	mov	sp, r7
     b42:	f85d 7b04 	ldr.w	r7, [sp], #4
     b46:	4770      	bx	lr

00000b48 <RCC_LSICmd>:
  * @note   LSI can not be disabled if the IWDG is running.
  * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
     b48:	b480      	push	{r7}
     b4a:	b083      	sub	sp, #12
     b4c:	af00      	add	r7, sp, #0
     b4e:	4603      	mov	r3, r0
     b50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
     b52:	f44f 6390 	mov.w	r3, #1152	; 0x480
     b56:	f2c4 2342 	movt	r3, #16962	; 0x4242
     b5a:	79fa      	ldrb	r2, [r7, #7]
     b5c:	601a      	str	r2, [r3, #0]
}
     b5e:	370c      	adds	r7, #12
     b60:	46bd      	mov	sp, r7
     b62:	f85d 7b04 	ldr.w	r7, [sp], #4
     b66:	4770      	bx	lr

00000b68 <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
     b68:	b480      	push	{r7}
     b6a:	b083      	sub	sp, #12
     b6c:	af00      	add	r7, sp, #0
     b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
     b70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     b74:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     b7c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     b80:	6a11      	ldr	r1, [r2, #32]
     b82:	687a      	ldr	r2, [r7, #4]
     b84:	430a      	orrs	r2, r1
     b86:	621a      	str	r2, [r3, #32]
}
     b88:	370c      	adds	r7, #12
     b8a:	46bd      	mov	sp, r7
     b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
     b90:	4770      	bx	lr
     b92:	bf00      	nop

00000b94 <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
     b94:	b480      	push	{r7}
     b96:	b083      	sub	sp, #12
     b98:	af00      	add	r7, sp, #0
     b9a:	4603      	mov	r3, r0
     b9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
     b9e:	f240 433c 	movw	r3, #1084	; 0x43c
     ba2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     ba6:	79fa      	ldrb	r2, [r7, #7]
     ba8:	601a      	str	r2, [r3, #0]
}
     baa:	370c      	adds	r7, #12
     bac:	46bd      	mov	sp, r7
     bae:	f85d 7b04 	ldr.w	r7, [sp], #4
     bb2:	4770      	bx	lr

00000bb4 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using
  *         fractional value for HSE crystal.
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
     bb4:	b480      	push	{r7}
     bb6:	b087      	sub	sp, #28
     bb8:	af00      	add	r7, sp, #0
     bba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
     bbc:	2300      	movs	r3, #0
     bbe:	617b      	str	r3, [r7, #20]
     bc0:	2300      	movs	r3, #0
     bc2:	613b      	str	r3, [r7, #16]
     bc4:	2300      	movs	r3, #0
     bc6:	60fb      	str	r3, [r7, #12]
     bc8:	2300      	movs	r3, #0
     bca:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
     bcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     bd0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     bd4:	685b      	ldr	r3, [r3, #4]
     bd6:	f003 030c 	and.w	r3, r3, #12
     bda:	617b      	str	r3, [r7, #20]

  switch (tmp)
     bdc:	697b      	ldr	r3, [r7, #20]
     bde:	2b04      	cmp	r3, #4
     be0:	d00a      	beq.n	bf8 <RCC_GetClocksFreq+0x44>
     be2:	2b08      	cmp	r3, #8
     be4:	d00f      	beq.n	c06 <RCC_GetClocksFreq+0x52>
     be6:	2b00      	cmp	r3, #0
     be8:	d14c      	bne.n	c84 <RCC_GetClocksFreq+0xd0>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     bea:	687a      	ldr	r2, [r7, #4]
     bec:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bf0:	f2c0 037a 	movt	r3, #122	; 0x7a
     bf4:	6013      	str	r3, [r2, #0]
      break;
     bf6:	e04c      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
     bf8:	687a      	ldr	r2, [r7, #4]
     bfa:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bfe:	f2c0 037a 	movt	r3, #122	; 0x7a
     c02:	6013      	str	r3, [r2, #0]
      break;
     c04:	e045      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
     c06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c0a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c0e:	685b      	ldr	r3, [r3, #4]
     c10:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     c14:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
     c16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c1a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c1e:	685b      	ldr	r3, [r3, #4]
     c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     c24:	60fb      	str	r3, [r7, #12]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     c26:	693b      	ldr	r3, [r7, #16]
     c28:	0c9b      	lsrs	r3, r3, #18
     c2a:	3302      	adds	r3, #2
     c2c:	613b      	str	r3, [r7, #16]

      if (pllsource == 0x00)
     c2e:	68fb      	ldr	r3, [r7, #12]
     c30:	2b00      	cmp	r3, #0
     c32:	d109      	bne.n	c48 <RCC_GetClocksFreq+0x94>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
     c34:	693a      	ldr	r2, [r7, #16]
     c36:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c3a:	f2c0 033d 	movt	r3, #61	; 0x3d
     c3e:	fb03 f202 	mul.w	r2, r3, r2
     c42:	687b      	ldr	r3, [r7, #4]
     c44:	601a      	str	r2, [r3, #0]
     c46:	e01c      	b.n	c82 <RCC_GetClocksFreq+0xce>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
     c48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c4c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c50:	685b      	ldr	r3, [r3, #4]
     c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     c56:	2b00      	cmp	r3, #0
     c58:	d009      	beq.n	c6e <RCC_GetClocksFreq+0xba>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
     c5a:	693a      	ldr	r2, [r7, #16]
     c5c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c60:	f2c0 033d 	movt	r3, #61	; 0x3d
     c64:	fb03 f202 	mul.w	r2, r3, r2
     c68:	687b      	ldr	r3, [r7, #4]
     c6a:	601a      	str	r2, [r3, #0]
     c6c:	e009      	b.n	c82 <RCC_GetClocksFreq+0xce>
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
     c6e:	693a      	ldr	r2, [r7, #16]
     c70:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c74:	f2c0 037a 	movt	r3, #122	; 0x7a
     c78:	fb03 f202 	mul.w	r2, r3, r2
     c7c:	687b      	ldr	r3, [r7, #4]
     c7e:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2;
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     c80:	e007      	b.n	c92 <RCC_GetClocksFreq+0xde>
     c82:	e006      	b.n	c92 <RCC_GetClocksFreq+0xde>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     c84:	687a      	ldr	r2, [r7, #4]
     c86:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c8a:	f2c0 037a 	movt	r3, #122	; 0x7a
     c8e:	6013      	str	r3, [r2, #0]
      break;
     c90:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
     c92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c96:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c9a:	685b      	ldr	r3, [r3, #4]
     c9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     ca0:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
     ca2:	697b      	ldr	r3, [r7, #20]
     ca4:	091b      	lsrs	r3, r3, #4
     ca6:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     ca8:	f240 0314 	movw	r3, #20
     cac:	f2c2 0300 	movt	r3, #8192	; 0x2000
     cb0:	697a      	ldr	r2, [r7, #20]
     cb2:	4413      	add	r3, r2
     cb4:	781b      	ldrb	r3, [r3, #0]
     cb6:	b2db      	uxtb	r3, r3
     cb8:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
     cba:	687b      	ldr	r3, [r7, #4]
     cbc:	681a      	ldr	r2, [r3, #0]
     cbe:	68bb      	ldr	r3, [r7, #8]
     cc0:	40da      	lsrs	r2, r3
     cc2:	687b      	ldr	r3, [r7, #4]
     cc4:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
     cc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     cce:	685b      	ldr	r3, [r3, #4]
     cd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
     cd4:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
     cd6:	697b      	ldr	r3, [r7, #20]
     cd8:	0a1b      	lsrs	r3, r3, #8
     cda:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     cdc:	f240 0314 	movw	r3, #20
     ce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     ce4:	697a      	ldr	r2, [r7, #20]
     ce6:	4413      	add	r3, r2
     ce8:	781b      	ldrb	r3, [r3, #0]
     cea:	b2db      	uxtb	r3, r3
     cec:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     cee:	687b      	ldr	r3, [r7, #4]
     cf0:	685a      	ldr	r2, [r3, #4]
     cf2:	68bb      	ldr	r3, [r7, #8]
     cf4:	40da      	lsrs	r2, r3
     cf6:	687b      	ldr	r3, [r7, #4]
     cf8:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
     cfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cfe:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d02:	685b      	ldr	r3, [r3, #4]
     d04:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
     d08:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
     d0a:	697b      	ldr	r3, [r7, #20]
     d0c:	0adb      	lsrs	r3, r3, #11
     d0e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     d10:	f240 0314 	movw	r3, #20
     d14:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d18:	697a      	ldr	r2, [r7, #20]
     d1a:	4413      	add	r3, r2
     d1c:	781b      	ldrb	r3, [r3, #0]
     d1e:	b2db      	uxtb	r3, r3
     d20:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     d22:	687b      	ldr	r3, [r7, #4]
     d24:	685a      	ldr	r2, [r3, #4]
     d26:	68bb      	ldr	r3, [r7, #8]
     d28:	40da      	lsrs	r2, r3
     d2a:	687b      	ldr	r3, [r7, #4]
     d2c:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
     d2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d32:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d36:	685b      	ldr	r3, [r3, #4]
     d38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
     d3c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
     d3e:	697b      	ldr	r3, [r7, #20]
     d40:	0b9b      	lsrs	r3, r3, #14
     d42:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
     d44:	f240 0324 	movw	r3, #36	; 0x24
     d48:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d4c:	697a      	ldr	r2, [r7, #20]
     d4e:	4413      	add	r3, r2
     d50:	781b      	ldrb	r3, [r3, #0]
     d52:	b2db      	uxtb	r3, r3
     d54:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
     d56:	687b      	ldr	r3, [r7, #4]
     d58:	68da      	ldr	r2, [r3, #12]
     d5a:	68bb      	ldr	r3, [r7, #8]
     d5c:	fbb2 f2f3 	udiv	r2, r2, r3
     d60:	687b      	ldr	r3, [r7, #4]
     d62:	611a      	str	r2, [r3, #16]
}
     d64:	371c      	adds	r7, #28
     d66:	46bd      	mov	sp, r7
     d68:	f85d 7b04 	ldr.w	r7, [sp], #4
     d6c:	4770      	bx	lr
     d6e:	bf00      	nop

00000d70 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
     d70:	b480      	push	{r7}
     d72:	b083      	sub	sp, #12
     d74:	af00      	add	r7, sp, #0
     d76:	6078      	str	r0, [r7, #4]
     d78:	460b      	mov	r3, r1
     d7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
     d7c:	78fb      	ldrb	r3, [r7, #3]
     d7e:	2b00      	cmp	r3, #0
     d80:	d00c      	beq.n	d9c <RCC_AHBPeriphClockCmd+0x2c>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
     d82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d86:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     d8e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     d92:	6951      	ldr	r1, [r2, #20]
     d94:	687a      	ldr	r2, [r7, #4]
     d96:	430a      	orrs	r2, r1
     d98:	615a      	str	r2, [r3, #20]
     d9a:	e00c      	b.n	db6 <RCC_AHBPeriphClockCmd+0x46>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
     d9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     da0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     da4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     da8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dac:	6951      	ldr	r1, [r2, #20]
     dae:	687a      	ldr	r2, [r7, #4]
     db0:	43d2      	mvns	r2, r2
     db2:	400a      	ands	r2, r1
     db4:	615a      	str	r2, [r3, #20]
  }
}
     db6:	370c      	adds	r7, #12
     db8:	46bd      	mov	sp, r7
     dba:	f85d 7b04 	ldr.w	r7, [sp], #4
     dbe:	4770      	bx	lr

00000dc0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     dc0:	b480      	push	{r7}
     dc2:	b083      	sub	sp, #12
     dc4:	af00      	add	r7, sp, #0
     dc6:	6078      	str	r0, [r7, #4]
     dc8:	460b      	mov	r3, r1
     dca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     dcc:	78fb      	ldrb	r3, [r7, #3]
     dce:	2b00      	cmp	r3, #0
     dd0:	d00c      	beq.n	dec <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
     dd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     dd6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     dda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     dde:	f2c4 0202 	movt	r2, #16386	; 0x4002
     de2:	6991      	ldr	r1, [r2, #24]
     de4:	687a      	ldr	r2, [r7, #4]
     de6:	430a      	orrs	r2, r1
     de8:	619a      	str	r2, [r3, #24]
     dea:	e00c      	b.n	e06 <RCC_APB2PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
     dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     df0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     df4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     df8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dfc:	6991      	ldr	r1, [r2, #24]
     dfe:	687a      	ldr	r2, [r7, #4]
     e00:	43d2      	mvns	r2, r2
     e02:	400a      	ands	r2, r1
     e04:	619a      	str	r2, [r3, #24]
  }
}
     e06:	370c      	adds	r7, #12
     e08:	46bd      	mov	sp, r7
     e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e0e:	4770      	bx	lr

00000e10 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     e10:	b480      	push	{r7}
     e12:	b083      	sub	sp, #12
     e14:	af00      	add	r7, sp, #0
     e16:	6078      	str	r0, [r7, #4]
     e18:	460b      	mov	r3, r1
     e1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e1c:	78fb      	ldrb	r3, [r7, #3]
     e1e:	2b00      	cmp	r3, #0
     e20:	d00c      	beq.n	e3c <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
     e22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e2e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e32:	69d1      	ldr	r1, [r2, #28]
     e34:	687a      	ldr	r2, [r7, #4]
     e36:	430a      	orrs	r2, r1
     e38:	61da      	str	r2, [r3, #28]
     e3a:	e00c      	b.n	e56 <RCC_APB1PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
     e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e40:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e48:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e4c:	69d1      	ldr	r1, [r2, #28]
     e4e:	687a      	ldr	r2, [r7, #4]
     e50:	43d2      	mvns	r2, r2
     e52:	400a      	ands	r2, r1
     e54:	61da      	str	r2, [r3, #28]
  }
}
     e56:	370c      	adds	r7, #12
     e58:	46bd      	mov	sp, r7
     e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e5e:	4770      	bx	lr

00000e60 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     e60:	b480      	push	{r7}
     e62:	b083      	sub	sp, #12
     e64:	af00      	add	r7, sp, #0
     e66:	6078      	str	r0, [r7, #4]
     e68:	460b      	mov	r3, r1
     e6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e6c:	78fb      	ldrb	r3, [r7, #3]
     e6e:	2b00      	cmp	r3, #0
     e70:	d00c      	beq.n	e8c <RCC_APB2PeriphResetCmd+0x2c>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
     e72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e76:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e7e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e82:	68d1      	ldr	r1, [r2, #12]
     e84:	687a      	ldr	r2, [r7, #4]
     e86:	430a      	orrs	r2, r1
     e88:	60da      	str	r2, [r3, #12]
     e8a:	e00c      	b.n	ea6 <RCC_APB2PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
     e8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e90:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e98:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e9c:	68d1      	ldr	r1, [r2, #12]
     e9e:	687a      	ldr	r2, [r7, #4]
     ea0:	43d2      	mvns	r2, r2
     ea2:	400a      	ands	r2, r1
     ea4:	60da      	str	r2, [r3, #12]
  }
}
     ea6:	370c      	adds	r7, #12
     ea8:	46bd      	mov	sp, r7
     eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
     eae:	4770      	bx	lr

00000eb0 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     eb0:	b480      	push	{r7}
     eb2:	b083      	sub	sp, #12
     eb4:	af00      	add	r7, sp, #0
     eb6:	6078      	str	r0, [r7, #4]
     eb8:	460b      	mov	r3, r1
     eba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     ebc:	78fb      	ldrb	r3, [r7, #3]
     ebe:	2b00      	cmp	r3, #0
     ec0:	d00c      	beq.n	edc <RCC_APB1PeriphResetCmd+0x2c>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
     ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ec6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     eca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ece:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ed2:	6911      	ldr	r1, [r2, #16]
     ed4:	687a      	ldr	r2, [r7, #4]
     ed6:	430a      	orrs	r2, r1
     ed8:	611a      	str	r2, [r3, #16]
     eda:	e00c      	b.n	ef6 <RCC_APB1PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
     edc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ee0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ee4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ee8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     eec:	6911      	ldr	r1, [r2, #16]
     eee:	687a      	ldr	r2, [r7, #4]
     ef0:	43d2      	mvns	r2, r2
     ef2:	400a      	ands	r2, r1
     ef4:	611a      	str	r2, [r3, #16]
  }
}
     ef6:	370c      	adds	r7, #12
     ef8:	46bd      	mov	sp, r7
     efa:	f85d 7b04 	ldr.w	r7, [sp], #4
     efe:	4770      	bx	lr

00000f00 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
     f00:	b480      	push	{r7}
     f02:	b083      	sub	sp, #12
     f04:	af00      	add	r7, sp, #0
     f06:	4603      	mov	r3, r0
     f08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
     f0a:	f44f 6388 	mov.w	r3, #1088	; 0x440
     f0e:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f12:	79fa      	ldrb	r2, [r7, #7]
     f14:	601a      	str	r2, [r3, #0]
}
     f16:	370c      	adds	r7, #12
     f18:	46bd      	mov	sp, r7
     f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f1e:	4770      	bx	lr

00000f20 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
     f20:	b480      	push	{r7}
     f22:	b083      	sub	sp, #12
     f24:	af00      	add	r7, sp, #0
     f26:	4603      	mov	r3, r0
     f28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
     f2a:	234c      	movs	r3, #76	; 0x4c
     f2c:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f30:	79fa      	ldrb	r2, [r7, #7]
     f32:	601a      	str	r2, [r3, #0]
}
     f34:	370c      	adds	r7, #12
     f36:	46bd      	mov	sp, r7
     f38:	f85d 7b04 	ldr.w	r7, [sp], #4
     f3c:	4770      	bx	lr
     f3e:	bf00      	nop

00000f40 <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
     f40:	b480      	push	{r7}
     f42:	b083      	sub	sp, #12
     f44:	af00      	add	r7, sp, #0
     f46:	4603      	mov	r3, r0
     f48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
     f4a:	f241 0307 	movw	r3, #4103	; 0x1007
     f4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f52:	79fa      	ldrb	r2, [r7, #7]
     f54:	701a      	strb	r2, [r3, #0]
}
     f56:	370c      	adds	r7, #12
     f58:	46bd      	mov	sp, r7
     f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f5e:	4770      	bx	lr

00000f60 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
     f60:	b480      	push	{r7}
     f62:	b087      	sub	sp, #28
     f64:	af00      	add	r7, sp, #0
     f66:	4603      	mov	r3, r0
     f68:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
     f6a:	2300      	movs	r3, #0
     f6c:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
     f6e:	2300      	movs	r3, #0
     f70:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
     f72:	2300      	movs	r3, #0
     f74:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
     f76:	79fb      	ldrb	r3, [r7, #7]
     f78:	095b      	lsrs	r3, r3, #5
     f7a:	b2db      	uxtb	r3, r3
     f7c:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
     f7e:	68fb      	ldr	r3, [r7, #12]
     f80:	2b01      	cmp	r3, #1
     f82:	d106      	bne.n	f92 <RCC_GetFlagStatus+0x32>
  {
    statusreg = RCC->CR;
     f84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f88:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f8c:	681b      	ldr	r3, [r3, #0]
     f8e:	617b      	str	r3, [r7, #20]
     f90:	e00f      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
     f92:	68fb      	ldr	r3, [r7, #12]
     f94:	2b02      	cmp	r3, #2
     f96:	d106      	bne.n	fa6 <RCC_GetFlagStatus+0x46>
  {
    statusreg = RCC->BDCR;
     f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f9c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fa0:	6a1b      	ldr	r3, [r3, #32]
     fa2:	617b      	str	r3, [r7, #20]
     fa4:	e005      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
     fa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     faa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     fb0:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
     fb2:	79fb      	ldrb	r3, [r7, #7]
     fb4:	f003 031f 	and.w	r3, r3, #31
     fb8:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
     fba:	68fb      	ldr	r3, [r7, #12]
     fbc:	697a      	ldr	r2, [r7, #20]
     fbe:	fa22 f303 	lsr.w	r3, r2, r3
     fc2:	f003 0301 	and.w	r3, r3, #1
     fc6:	2b00      	cmp	r3, #0
     fc8:	d002      	beq.n	fd0 <RCC_GetFlagStatus+0x70>
  {
    bitstatus = SET;
     fca:	2301      	movs	r3, #1
     fcc:	74fb      	strb	r3, [r7, #19]
     fce:	e001      	b.n	fd4 <RCC_GetFlagStatus+0x74>
  }
  else
  {
    bitstatus = RESET;
     fd0:	2300      	movs	r3, #0
     fd2:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
     fd4:	7cfb      	ldrb	r3, [r7, #19]
}
     fd6:	4618      	mov	r0, r3
     fd8:	371c      	adds	r7, #28
     fda:	46bd      	mov	sp, r7
     fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
     fe0:	4770      	bx	lr
     fe2:	bf00      	nop

00000fe4 <RCC_ClearFlag>:
  *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
     fe4:	b480      	push	{r7}
     fe6:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
     fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     fec:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ff0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ff4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ff8:	6a52      	ldr	r2, [r2, #36]	; 0x24
     ffa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     ffe:	625a      	str	r2, [r3, #36]	; 0x24
}
    1000:	46bd      	mov	sp, r7
    1002:	f85d 7b04 	ldr.w	r7, [sp], #4
    1006:	4770      	bx	lr

00001008 <RCC_GetITStatus>:
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  *
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
    1008:	b480      	push	{r7}
    100a:	b085      	sub	sp, #20
    100c:	af00      	add	r7, sp, #0
    100e:	4603      	mov	r3, r0
    1010:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
    1012:	2300      	movs	r3, #0
    1014:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
    1016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    101a:	f2c4 0302 	movt	r3, #16386	; 0x4002
    101e:	689a      	ldr	r2, [r3, #8]
    1020:	79fb      	ldrb	r3, [r7, #7]
    1022:	4013      	ands	r3, r2
    1024:	2b00      	cmp	r3, #0
    1026:	d002      	beq.n	102e <RCC_GetITStatus+0x26>
  {
    bitstatus = SET;
    1028:	2301      	movs	r3, #1
    102a:	73fb      	strb	r3, [r7, #15]
    102c:	e001      	b.n	1032 <RCC_GetITStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    102e:	2300      	movs	r3, #0
    1030:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the RCC_IT status */
  return  bitstatus;
    1032:	7bfb      	ldrb	r3, [r7, #15]
}
    1034:	4618      	mov	r0, r3
    1036:	3714      	adds	r7, #20
    1038:	46bd      	mov	sp, r7
    103a:	f85d 7b04 	ldr.w	r7, [sp], #4
    103e:	4770      	bx	lr

00001040 <RCC_ClearITPendingBit>:
  *
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
    1040:	b480      	push	{r7}
    1042:	b083      	sub	sp, #12
    1044:	af00      	add	r7, sp, #0
    1046:	4603      	mov	r3, r0
    1048:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
    104a:	f241 030a 	movw	r3, #4106	; 0x100a
    104e:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1052:	79fa      	ldrb	r2, [r7, #7]
    1054:	701a      	strb	r2, [r3, #0]
}
    1056:	370c      	adds	r7, #12
    1058:	46bd      	mov	sp, r7
    105a:	f85d 7b04 	ldr.w	r7, [sp], #4
    105e:	4770      	bx	lr

00001060 <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
    1060:	b580      	push	{r7, lr}
    1062:	b082      	sub	sp, #8
    1064:	af00      	add	r7, sp, #0
    1066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
    1068:	687a      	ldr	r2, [r7, #4]
    106a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    106e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1072:	429a      	cmp	r2, r3
    1074:	d108      	bne.n	1088 <GPIO_DeInit+0x28>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
    1076:	2004      	movs	r0, #4
    1078:	2101      	movs	r1, #1
    107a:	f7ff fef1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
    107e:	2004      	movs	r0, #4
    1080:	2100      	movs	r1, #0
    1082:	f7ff feed 	bl	e60 <RCC_APB2PeriphResetCmd>
    1086:	e060      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOB)
    1088:	687a      	ldr	r2, [r7, #4]
    108a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    108e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1092:	429a      	cmp	r2, r3
    1094:	d108      	bne.n	10a8 <GPIO_DeInit+0x48>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
    1096:	2008      	movs	r0, #8
    1098:	2101      	movs	r1, #1
    109a:	f7ff fee1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
    109e:	2008      	movs	r0, #8
    10a0:	2100      	movs	r1, #0
    10a2:	f7ff fedd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10a6:	e050      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOC)
    10a8:	687a      	ldr	r2, [r7, #4]
    10aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    10ae:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10b2:	429a      	cmp	r2, r3
    10b4:	d108      	bne.n	10c8 <GPIO_DeInit+0x68>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
    10b6:	2010      	movs	r0, #16
    10b8:	2101      	movs	r1, #1
    10ba:	f7ff fed1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
    10be:	2010      	movs	r0, #16
    10c0:	2100      	movs	r1, #0
    10c2:	f7ff fecd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10c6:	e040      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOD)
    10c8:	687a      	ldr	r2, [r7, #4]
    10ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    10ce:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10d2:	429a      	cmp	r2, r3
    10d4:	d108      	bne.n	10e8 <GPIO_DeInit+0x88>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
    10d6:	2020      	movs	r0, #32
    10d8:	2101      	movs	r1, #1
    10da:	f7ff fec1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
    10de:	2020      	movs	r0, #32
    10e0:	2100      	movs	r1, #0
    10e2:	f7ff febd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10e6:	e030      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOE)
    10e8:	687a      	ldr	r2, [r7, #4]
    10ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    10ee:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10f2:	429a      	cmp	r2, r3
    10f4:	d108      	bne.n	1108 <GPIO_DeInit+0xa8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
    10f6:	2040      	movs	r0, #64	; 0x40
    10f8:	2101      	movs	r1, #1
    10fa:	f7ff feb1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
    10fe:	2040      	movs	r0, #64	; 0x40
    1100:	2100      	movs	r1, #0
    1102:	f7ff fead 	bl	e60 <RCC_APB2PeriphResetCmd>
    1106:	e020      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOF)
    1108:	687a      	ldr	r2, [r7, #4]
    110a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
    110e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1112:	429a      	cmp	r2, r3
    1114:	d108      	bne.n	1128 <GPIO_DeInit+0xc8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
    1116:	2080      	movs	r0, #128	; 0x80
    1118:	2101      	movs	r1, #1
    111a:	f7ff fea1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
    111e:	2080      	movs	r0, #128	; 0x80
    1120:	2100      	movs	r1, #0
    1122:	f7ff fe9d 	bl	e60 <RCC_APB2PeriphResetCmd>
    1126:	e010      	b.n	114a <GPIO_DeInit+0xea>
  }
  else
  {
    if (GPIOx == GPIOG)
    1128:	687a      	ldr	r2, [r7, #4]
    112a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    112e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1132:	429a      	cmp	r2, r3
    1134:	d109      	bne.n	114a <GPIO_DeInit+0xea>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
    1136:	f44f 7080 	mov.w	r0, #256	; 0x100
    113a:	2101      	movs	r1, #1
    113c:	f7ff fe90 	bl	e60 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    1140:	f44f 7080 	mov.w	r0, #256	; 0x100
    1144:	2100      	movs	r1, #0
    1146:	f7ff fe8b 	bl	e60 <RCC_APB2PeriphResetCmd>
    }
  }
}
    114a:	3708      	adds	r7, #8
    114c:	46bd      	mov	sp, r7
    114e:	bd80      	pop	{r7, pc}

00001150 <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
    1150:	b580      	push	{r7, lr}
    1152:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
    1154:	2001      	movs	r0, #1
    1156:	2101      	movs	r1, #1
    1158:	f7ff fe82 	bl	e60 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
    115c:	2001      	movs	r0, #1
    115e:	2100      	movs	r1, #0
    1160:	f7ff fe7e 	bl	e60 <RCC_APB2PeriphResetCmd>
}
    1164:	bd80      	pop	{r7, pc}
    1166:	bf00      	nop

00001168 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
    1168:	b480      	push	{r7}
    116a:	b089      	sub	sp, #36	; 0x24
    116c:	af00      	add	r7, sp, #0
    116e:	6078      	str	r0, [r7, #4]
    1170:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
    1172:	2300      	movs	r3, #0
    1174:	61fb      	str	r3, [r7, #28]
    1176:	2300      	movs	r3, #0
    1178:	613b      	str	r3, [r7, #16]
    117a:	2300      	movs	r3, #0
    117c:	61bb      	str	r3, [r7, #24]
    117e:	2300      	movs	r3, #0
    1180:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
    1182:	2300      	movs	r3, #0
    1184:	617b      	str	r3, [r7, #20]
    1186:	2300      	movs	r3, #0
    1188:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));

/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
    118a:	683b      	ldr	r3, [r7, #0]
    118c:	78db      	ldrb	r3, [r3, #3]
    118e:	f003 030f 	and.w	r3, r3, #15
    1192:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
    1194:	683b      	ldr	r3, [r7, #0]
    1196:	78db      	ldrb	r3, [r3, #3]
    1198:	f003 0310 	and.w	r3, r3, #16
    119c:	2b00      	cmp	r3, #0
    119e:	d004      	beq.n	11aa <GPIO_Init+0x42>
  {
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
    11a0:	683b      	ldr	r3, [r7, #0]
    11a2:	789b      	ldrb	r3, [r3, #2]
    11a4:	69fa      	ldr	r2, [r7, #28]
    11a6:	4313      	orrs	r3, r2
    11a8:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
    11aa:	683b      	ldr	r3, [r7, #0]
    11ac:	881b      	ldrh	r3, [r3, #0]
    11ae:	b2db      	uxtb	r3, r3
    11b0:	2b00      	cmp	r3, #0
    11b2:	d044      	beq.n	123e <GPIO_Init+0xd6>
  {
    tmpreg = GPIOx->CRL;
    11b4:	687b      	ldr	r3, [r7, #4]
    11b6:	681b      	ldr	r3, [r3, #0]
    11b8:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    11ba:	2300      	movs	r3, #0
    11bc:	61bb      	str	r3, [r7, #24]
    11be:	e038      	b.n	1232 <GPIO_Init+0xca>
    {
      pos = ((uint32_t)0x01) << pinpos;
    11c0:	69bb      	ldr	r3, [r7, #24]
    11c2:	2201      	movs	r2, #1
    11c4:	fa02 f303 	lsl.w	r3, r2, r3
    11c8:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
    11ca:	683b      	ldr	r3, [r7, #0]
    11cc:	881b      	ldrh	r3, [r3, #0]
    11ce:	461a      	mov	r2, r3
    11d0:	68fb      	ldr	r3, [r7, #12]
    11d2:	4013      	ands	r3, r2
    11d4:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    11d6:	693a      	ldr	r2, [r7, #16]
    11d8:	68fb      	ldr	r3, [r7, #12]
    11da:	429a      	cmp	r2, r3
    11dc:	d126      	bne.n	122c <GPIO_Init+0xc4>
      {
        pos = pinpos << 2;
    11de:	69bb      	ldr	r3, [r7, #24]
    11e0:	009b      	lsls	r3, r3, #2
    11e2:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    11e4:	68fb      	ldr	r3, [r7, #12]
    11e6:	220f      	movs	r2, #15
    11e8:	fa02 f303 	lsl.w	r3, r2, r3
    11ec:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    11ee:	68bb      	ldr	r3, [r7, #8]
    11f0:	43db      	mvns	r3, r3
    11f2:	697a      	ldr	r2, [r7, #20]
    11f4:	4013      	ands	r3, r2
    11f6:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    11f8:	68fb      	ldr	r3, [r7, #12]
    11fa:	69fa      	ldr	r2, [r7, #28]
    11fc:	fa02 f303 	lsl.w	r3, r2, r3
    1200:	697a      	ldr	r2, [r7, #20]
    1202:	4313      	orrs	r3, r2
    1204:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    1206:	683b      	ldr	r3, [r7, #0]
    1208:	78db      	ldrb	r3, [r3, #3]
    120a:	2b28      	cmp	r3, #40	; 0x28
    120c:	d105      	bne.n	121a <GPIO_Init+0xb2>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
    120e:	69bb      	ldr	r3, [r7, #24]
    1210:	2201      	movs	r2, #1
    1212:	409a      	lsls	r2, r3
    1214:	687b      	ldr	r3, [r7, #4]
    1216:	615a      	str	r2, [r3, #20]
    1218:	e008      	b.n	122c <GPIO_Init+0xc4>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    121a:	683b      	ldr	r3, [r7, #0]
    121c:	78db      	ldrb	r3, [r3, #3]
    121e:	2b48      	cmp	r3, #72	; 0x48
    1220:	d104      	bne.n	122c <GPIO_Init+0xc4>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
    1222:	69bb      	ldr	r3, [r7, #24]
    1224:	2201      	movs	r2, #1
    1226:	409a      	lsls	r2, r3
    1228:	687b      	ldr	r3, [r7, #4]
    122a:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    122c:	69bb      	ldr	r3, [r7, #24]
    122e:	3301      	adds	r3, #1
    1230:	61bb      	str	r3, [r7, #24]
    1232:	69bb      	ldr	r3, [r7, #24]
    1234:	2b07      	cmp	r3, #7
    1236:	d9c3      	bls.n	11c0 <GPIO_Init+0x58>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
    1238:	687b      	ldr	r3, [r7, #4]
    123a:	697a      	ldr	r2, [r7, #20]
    123c:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
    123e:	683b      	ldr	r3, [r7, #0]
    1240:	881b      	ldrh	r3, [r3, #0]
    1242:	2bff      	cmp	r3, #255	; 0xff
    1244:	d946      	bls.n	12d4 <GPIO_Init+0x16c>
  {
    tmpreg = GPIOx->CRH;
    1246:	687b      	ldr	r3, [r7, #4]
    1248:	685b      	ldr	r3, [r3, #4]
    124a:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    124c:	2300      	movs	r3, #0
    124e:	61bb      	str	r3, [r7, #24]
    1250:	e03a      	b.n	12c8 <GPIO_Init+0x160>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
    1252:	69bb      	ldr	r3, [r7, #24]
    1254:	3308      	adds	r3, #8
    1256:	2201      	movs	r2, #1
    1258:	fa02 f303 	lsl.w	r3, r2, r3
    125c:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
    125e:	683b      	ldr	r3, [r7, #0]
    1260:	881b      	ldrh	r3, [r3, #0]
    1262:	461a      	mov	r2, r3
    1264:	68fb      	ldr	r3, [r7, #12]
    1266:	4013      	ands	r3, r2
    1268:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    126a:	693a      	ldr	r2, [r7, #16]
    126c:	68fb      	ldr	r3, [r7, #12]
    126e:	429a      	cmp	r2, r3
    1270:	d127      	bne.n	12c2 <GPIO_Init+0x15a>
      {
        pos = pinpos << 2;
    1272:	69bb      	ldr	r3, [r7, #24]
    1274:	009b      	lsls	r3, r3, #2
    1276:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    1278:	68fb      	ldr	r3, [r7, #12]
    127a:	220f      	movs	r2, #15
    127c:	fa02 f303 	lsl.w	r3, r2, r3
    1280:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    1282:	68bb      	ldr	r3, [r7, #8]
    1284:	43db      	mvns	r3, r3
    1286:	697a      	ldr	r2, [r7, #20]
    1288:	4013      	ands	r3, r2
    128a:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    128c:	68fb      	ldr	r3, [r7, #12]
    128e:	69fa      	ldr	r2, [r7, #28]
    1290:	fa02 f303 	lsl.w	r3, r2, r3
    1294:	697a      	ldr	r2, [r7, #20]
    1296:	4313      	orrs	r3, r2
    1298:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    129a:	683b      	ldr	r3, [r7, #0]
    129c:	78db      	ldrb	r3, [r3, #3]
    129e:	2b28      	cmp	r3, #40	; 0x28
    12a0:	d105      	bne.n	12ae <GPIO_Init+0x146>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12a2:	69bb      	ldr	r3, [r7, #24]
    12a4:	3308      	adds	r3, #8
    12a6:	2201      	movs	r2, #1
    12a8:	409a      	lsls	r2, r3
    12aa:	687b      	ldr	r3, [r7, #4]
    12ac:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    12ae:	683b      	ldr	r3, [r7, #0]
    12b0:	78db      	ldrb	r3, [r3, #3]
    12b2:	2b48      	cmp	r3, #72	; 0x48
    12b4:	d105      	bne.n	12c2 <GPIO_Init+0x15a>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12b6:	69bb      	ldr	r3, [r7, #24]
    12b8:	3308      	adds	r3, #8
    12ba:	2201      	movs	r2, #1
    12bc:	409a      	lsls	r2, r3
    12be:	687b      	ldr	r3, [r7, #4]
    12c0:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    12c2:	69bb      	ldr	r3, [r7, #24]
    12c4:	3301      	adds	r3, #1
    12c6:	61bb      	str	r3, [r7, #24]
    12c8:	69bb      	ldr	r3, [r7, #24]
    12ca:	2b07      	cmp	r3, #7
    12cc:	d9c1      	bls.n	1252 <GPIO_Init+0xea>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
    12ce:	687b      	ldr	r3, [r7, #4]
    12d0:	697a      	ldr	r2, [r7, #20]
    12d2:	605a      	str	r2, [r3, #4]
  }
}
    12d4:	3724      	adds	r7, #36	; 0x24
    12d6:	46bd      	mov	sp, r7
    12d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    12dc:	4770      	bx	lr
    12de:	bf00      	nop

000012e0 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
    12e0:	b480      	push	{r7}
    12e2:	b083      	sub	sp, #12
    12e4:	af00      	add	r7, sp, #0
    12e6:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
    12e8:	687b      	ldr	r3, [r7, #4]
    12ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
    12ee:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
    12f0:	687b      	ldr	r3, [r7, #4]
    12f2:	2202      	movs	r2, #2
    12f4:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
    12f6:	687b      	ldr	r3, [r7, #4]
    12f8:	2204      	movs	r2, #4
    12fa:	70da      	strb	r2, [r3, #3]
}
    12fc:	370c      	adds	r7, #12
    12fe:	46bd      	mov	sp, r7
    1300:	f85d 7b04 	ldr.w	r7, [sp], #4
    1304:	4770      	bx	lr
    1306:	bf00      	nop

00001308 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1308:	b480      	push	{r7}
    130a:	b085      	sub	sp, #20
    130c:	af00      	add	r7, sp, #0
    130e:	6078      	str	r0, [r7, #4]
    1310:	460b      	mov	r3, r1
    1312:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1314:	2300      	movs	r3, #0
    1316:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1318:	687b      	ldr	r3, [r7, #4]
    131a:	689a      	ldr	r2, [r3, #8]
    131c:	887b      	ldrh	r3, [r7, #2]
    131e:	4013      	ands	r3, r2
    1320:	2b00      	cmp	r3, #0
    1322:	d002      	beq.n	132a <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1324:	2301      	movs	r3, #1
    1326:	73fb      	strb	r3, [r7, #15]
    1328:	e001      	b.n	132e <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    132a:	2300      	movs	r3, #0
    132c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    132e:	7bfb      	ldrb	r3, [r7, #15]
}
    1330:	4618      	mov	r0, r3
    1332:	3714      	adds	r7, #20
    1334:	46bd      	mov	sp, r7
    1336:	f85d 7b04 	ldr.w	r7, [sp], #4
    133a:	4770      	bx	lr

0000133c <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
    133c:	b480      	push	{r7}
    133e:	b083      	sub	sp, #12
    1340:	af00      	add	r7, sp, #0
    1342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
    1344:	687b      	ldr	r3, [r7, #4]
    1346:	689b      	ldr	r3, [r3, #8]
    1348:	b29b      	uxth	r3, r3
}
    134a:	4618      	mov	r0, r3
    134c:	370c      	adds	r7, #12
    134e:	46bd      	mov	sp, r7
    1350:	f85d 7b04 	ldr.w	r7, [sp], #4
    1354:	4770      	bx	lr
    1356:	bf00      	nop

00001358 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1358:	b480      	push	{r7}
    135a:	b085      	sub	sp, #20
    135c:	af00      	add	r7, sp, #0
    135e:	6078      	str	r0, [r7, #4]
    1360:	460b      	mov	r3, r1
    1362:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1364:	2300      	movs	r3, #0
    1366:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1368:	687b      	ldr	r3, [r7, #4]
    136a:	68da      	ldr	r2, [r3, #12]
    136c:	887b      	ldrh	r3, [r7, #2]
    136e:	4013      	ands	r3, r2
    1370:	2b00      	cmp	r3, #0
    1372:	d002      	beq.n	137a <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1374:	2301      	movs	r3, #1
    1376:	73fb      	strb	r3, [r7, #15]
    1378:	e001      	b.n	137e <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    137a:	2300      	movs	r3, #0
    137c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    137e:	7bfb      	ldrb	r3, [r7, #15]
}
    1380:	4618      	mov	r0, r3
    1382:	3714      	adds	r7, #20
    1384:	46bd      	mov	sp, r7
    1386:	f85d 7b04 	ldr.w	r7, [sp], #4
    138a:	4770      	bx	lr

0000138c <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
    138c:	b480      	push	{r7}
    138e:	b083      	sub	sp, #12
    1390:	af00      	add	r7, sp, #0
    1392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
    1394:	687b      	ldr	r3, [r7, #4]
    1396:	68db      	ldr	r3, [r3, #12]
    1398:	b29b      	uxth	r3, r3
}
    139a:	4618      	mov	r0, r3
    139c:	370c      	adds	r7, #12
    139e:	46bd      	mov	sp, r7
    13a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    13a4:	4770      	bx	lr
    13a6:	bf00      	nop

000013a8 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13a8:	b480      	push	{r7}
    13aa:	b083      	sub	sp, #12
    13ac:	af00      	add	r7, sp, #0
    13ae:	6078      	str	r0, [r7, #4]
    13b0:	460b      	mov	r3, r1
    13b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
    13b4:	887a      	ldrh	r2, [r7, #2]
    13b6:	687b      	ldr	r3, [r7, #4]
    13b8:	611a      	str	r2, [r3, #16]
}
    13ba:	370c      	adds	r7, #12
    13bc:	46bd      	mov	sp, r7
    13be:	f85d 7b04 	ldr.w	r7, [sp], #4
    13c2:	4770      	bx	lr

000013c4 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13c4:	b480      	push	{r7}
    13c6:	b083      	sub	sp, #12
    13c8:	af00      	add	r7, sp, #0
    13ca:	6078      	str	r0, [r7, #4]
    13cc:	460b      	mov	r3, r1
    13ce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
    13d0:	887a      	ldrh	r2, [r7, #2]
    13d2:	687b      	ldr	r3, [r7, #4]
    13d4:	615a      	str	r2, [r3, #20]
}
    13d6:	370c      	adds	r7, #12
    13d8:	46bd      	mov	sp, r7
    13da:	f85d 7b04 	ldr.w	r7, [sp], #4
    13de:	4770      	bx	lr

000013e0 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
    13e0:	b480      	push	{r7}
    13e2:	b083      	sub	sp, #12
    13e4:	af00      	add	r7, sp, #0
    13e6:	6078      	str	r0, [r7, #4]
    13e8:	4613      	mov	r3, r2
    13ea:	460a      	mov	r2, r1
    13ec:	807a      	strh	r2, [r7, #2]
    13ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
    13f0:	787b      	ldrb	r3, [r7, #1]
    13f2:	2b00      	cmp	r3, #0
    13f4:	d003      	beq.n	13fe <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
    13f6:	887a      	ldrh	r2, [r7, #2]
    13f8:	687b      	ldr	r3, [r7, #4]
    13fa:	611a      	str	r2, [r3, #16]
    13fc:	e002      	b.n	1404 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
    13fe:	887a      	ldrh	r2, [r7, #2]
    1400:	687b      	ldr	r3, [r7, #4]
    1402:	615a      	str	r2, [r3, #20]
  }
}
    1404:	370c      	adds	r7, #12
    1406:	46bd      	mov	sp, r7
    1408:	f85d 7b04 	ldr.w	r7, [sp], #4
    140c:	4770      	bx	lr
    140e:	bf00      	nop

00001410 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
    1410:	b480      	push	{r7}
    1412:	b083      	sub	sp, #12
    1414:	af00      	add	r7, sp, #0
    1416:	6078      	str	r0, [r7, #4]
    1418:	460b      	mov	r3, r1
    141a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
    141c:	887a      	ldrh	r2, [r7, #2]
    141e:	687b      	ldr	r3, [r7, #4]
    1420:	60da      	str	r2, [r3, #12]
}
    1422:	370c      	adds	r7, #12
    1424:	46bd      	mov	sp, r7
    1426:	f85d 7b04 	ldr.w	r7, [sp], #4
    142a:	4770      	bx	lr

0000142c <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    142c:	b480      	push	{r7}
    142e:	b085      	sub	sp, #20
    1430:	af00      	add	r7, sp, #0
    1432:	6078      	str	r0, [r7, #4]
    1434:	460b      	mov	r3, r1
    1436:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0x00010000;
    1438:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    143c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
    143e:	887b      	ldrh	r3, [r7, #2]
    1440:	68fa      	ldr	r2, [r7, #12]
    1442:	4313      	orrs	r3, r2
    1444:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1446:	687b      	ldr	r3, [r7, #4]
    1448:	68fa      	ldr	r2, [r7, #12]
    144a:	619a      	str	r2, [r3, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
    144c:	887a      	ldrh	r2, [r7, #2]
    144e:	687b      	ldr	r3, [r7, #4]
    1450:	619a      	str	r2, [r3, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1452:	687b      	ldr	r3, [r7, #4]
    1454:	68fa      	ldr	r2, [r7, #12]
    1456:	619a      	str	r2, [r3, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    1458:	687b      	ldr	r3, [r7, #4]
    145a:	699b      	ldr	r3, [r3, #24]
    145c:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    145e:	687b      	ldr	r3, [r7, #4]
    1460:	699b      	ldr	r3, [r3, #24]
    1462:	60fb      	str	r3, [r7, #12]
}
    1464:	3714      	adds	r7, #20
    1466:	46bd      	mov	sp, r7
    1468:	f85d 7b04 	ldr.w	r7, [sp], #4
    146c:	4770      	bx	lr
    146e:	bf00      	nop

00001470 <GPIO_EventOutputConfig>:
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    1470:	b480      	push	{r7}
    1472:	b085      	sub	sp, #20
    1474:	af00      	add	r7, sp, #0
    1476:	4602      	mov	r2, r0
    1478:	460b      	mov	r3, r1
    147a:	71fa      	strb	r2, [r7, #7]
    147c:	71bb      	strb	r3, [r7, #6]
  uint32_t tmpreg = 0x00;
    147e:	2300      	movs	r3, #0
    1480:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmpreg = AFIO->EVCR;
    1482:	2300      	movs	r3, #0
    1484:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1488:	681b      	ldr	r3, [r3, #0]
    148a:	60fb      	str	r3, [r7, #12]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
    148c:	68fa      	ldr	r2, [r7, #12]
    148e:	f64f 7380 	movw	r3, #65408	; 0xff80
    1492:	4013      	ands	r3, r2
    1494:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
    1496:	79fb      	ldrb	r3, [r7, #7]
    1498:	011b      	lsls	r3, r3, #4
    149a:	68fa      	ldr	r2, [r7, #12]
    149c:	4313      	orrs	r3, r2
    149e:	60fb      	str	r3, [r7, #12]
  tmpreg |= GPIO_PinSource;
    14a0:	79bb      	ldrb	r3, [r7, #6]
    14a2:	68fa      	ldr	r2, [r7, #12]
    14a4:	4313      	orrs	r3, r2
    14a6:	60fb      	str	r3, [r7, #12]
  AFIO->EVCR = tmpreg;
    14a8:	2300      	movs	r3, #0
    14aa:	f2c4 0301 	movt	r3, #16385	; 0x4001
    14ae:	68fa      	ldr	r2, [r7, #12]
    14b0:	601a      	str	r2, [r3, #0]
}
    14b2:	3714      	adds	r7, #20
    14b4:	46bd      	mov	sp, r7
    14b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    14ba:	4770      	bx	lr

000014bc <GPIO_EventOutputCmd>:
  * @param  NewState: new state of the Event output.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_EventOutputCmd(FunctionalState NewState)
{
    14bc:	b480      	push	{r7}
    14be:	b083      	sub	sp, #12
    14c0:	af00      	add	r7, sp, #0
    14c2:	4603      	mov	r3, r0
    14c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
    14c6:	231c      	movs	r3, #28
    14c8:	f2c4 2320 	movt	r3, #16928	; 0x4220
    14cc:	79fa      	ldrb	r2, [r7, #7]
    14ce:	601a      	str	r2, [r3, #0]
}
    14d0:	370c      	adds	r7, #12
    14d2:	46bd      	mov	sp, r7
    14d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    14d8:	4770      	bx	lr
    14da:	bf00      	nop

000014dc <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
    14dc:	b480      	push	{r7}
    14de:	b087      	sub	sp, #28
    14e0:	af00      	add	r7, sp, #0
    14e2:	6078      	str	r0, [r7, #4]
    14e4:	460b      	mov	r3, r1
    14e6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
    14e8:	2300      	movs	r3, #0
    14ea:	613b      	str	r3, [r7, #16]
    14ec:	2300      	movs	r3, #0
    14ee:	60fb      	str	r3, [r7, #12]
    14f0:	2300      	movs	r3, #0
    14f2:	617b      	str	r3, [r7, #20]
    14f4:	2300      	movs	r3, #0
    14f6:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    14f8:	687b      	ldr	r3, [r7, #4]
    14fa:	2b00      	cmp	r3, #0
    14fc:	da05      	bge.n	150a <GPIO_PinRemapConfig+0x2e>
  {
    tmpreg = AFIO->MAPR2;
    14fe:	2300      	movs	r3, #0
    1500:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1504:	69db      	ldr	r3, [r3, #28]
    1506:	617b      	str	r3, [r7, #20]
    1508:	e004      	b.n	1514 <GPIO_PinRemapConfig+0x38>
  }
  else
  {
    tmpreg = AFIO->MAPR;
    150a:	2300      	movs	r3, #0
    150c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1510:	685b      	ldr	r3, [r3, #4]
    1512:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
    1514:	687b      	ldr	r3, [r7, #4]
    1516:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    151a:	0c1b      	lsrs	r3, r3, #16
    151c:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
    151e:	687b      	ldr	r3, [r7, #4]
    1520:	b29b      	uxth	r3, r3
    1522:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
    1524:	687b      	ldr	r3, [r7, #4]
    1526:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    152a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
    152e:	d10e      	bne.n	154e <GPIO_PinRemapConfig+0x72>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    1530:	697b      	ldr	r3, [r7, #20]
    1532:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    1536:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
    1538:	2300      	movs	r3, #0
    153a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    153e:	2200      	movs	r2, #0
    1540:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1544:	6852      	ldr	r2, [r2, #4]
    1546:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
    154a:	605a      	str	r2, [r3, #4]
    154c:	e021      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
    154e:	687b      	ldr	r3, [r7, #4]
    1550:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    1554:	2b00      	cmp	r3, #0
    1556:	d00e      	beq.n	1576 <GPIO_PinRemapConfig+0x9a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
    1558:	68bb      	ldr	r3, [r7, #8]
    155a:	2203      	movs	r2, #3
    155c:	fa02 f303 	lsl.w	r3, r2, r3
    1560:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
    1562:	68fb      	ldr	r3, [r7, #12]
    1564:	43db      	mvns	r3, r3
    1566:	697a      	ldr	r2, [r7, #20]
    1568:	4013      	ands	r3, r2
    156a:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    156c:	697b      	ldr	r3, [r7, #20]
    156e:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1572:	617b      	str	r3, [r7, #20]
    1574:	e00d      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    1576:	687b      	ldr	r3, [r7, #4]
    1578:	0d5b      	lsrs	r3, r3, #21
    157a:	011b      	lsls	r3, r3, #4
    157c:	693a      	ldr	r2, [r7, #16]
    157e:	fa02 f303 	lsl.w	r3, r2, r3
    1582:	43db      	mvns	r3, r3
    1584:	697a      	ldr	r2, [r7, #20]
    1586:	4013      	ands	r3, r2
    1588:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    158a:	697b      	ldr	r3, [r7, #20]
    158c:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1590:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
    1592:	78fb      	ldrb	r3, [r7, #3]
    1594:	2b00      	cmp	r3, #0
    1596:	d008      	beq.n	15aa <GPIO_PinRemapConfig+0xce>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
    1598:	687b      	ldr	r3, [r7, #4]
    159a:	0d5b      	lsrs	r3, r3, #21
    159c:	011b      	lsls	r3, r3, #4
    159e:	693a      	ldr	r2, [r7, #16]
    15a0:	fa02 f303 	lsl.w	r3, r2, r3
    15a4:	697a      	ldr	r2, [r7, #20]
    15a6:	4313      	orrs	r3, r2
    15a8:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    15aa:	687b      	ldr	r3, [r7, #4]
    15ac:	2b00      	cmp	r3, #0
    15ae:	da05      	bge.n	15bc <GPIO_PinRemapConfig+0xe0>
  {
    AFIO->MAPR2 = tmpreg;
    15b0:	2300      	movs	r3, #0
    15b2:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15b6:	697a      	ldr	r2, [r7, #20]
    15b8:	61da      	str	r2, [r3, #28]
    15ba:	e004      	b.n	15c6 <GPIO_PinRemapConfig+0xea>
  }
  else
  {
    AFIO->MAPR = tmpreg;
    15bc:	2300      	movs	r3, #0
    15be:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15c2:	697a      	ldr	r2, [r7, #20]
    15c4:	605a      	str	r2, [r3, #4]
  }
}
    15c6:	371c      	adds	r7, #28
    15c8:	46bd      	mov	sp, r7
    15ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    15ce:	4770      	bx	lr

000015d0 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    15d0:	b490      	push	{r4, r7}
    15d2:	b084      	sub	sp, #16
    15d4:	af00      	add	r7, sp, #0
    15d6:	4602      	mov	r2, r0
    15d8:	460b      	mov	r3, r1
    15da:	71fa      	strb	r2, [r7, #7]
    15dc:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
    15de:	2300      	movs	r3, #0
    15e0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
    15e2:	79bb      	ldrb	r3, [r7, #6]
    15e4:	f003 0303 	and.w	r3, r3, #3
    15e8:	009b      	lsls	r3, r3, #2
    15ea:	220f      	movs	r2, #15
    15ec:	fa02 f303 	lsl.w	r3, r2, r3
    15f0:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
    15f2:	2300      	movs	r3, #0
    15f4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15f8:	79ba      	ldrb	r2, [r7, #6]
    15fa:	0892      	lsrs	r2, r2, #2
    15fc:	b2d2      	uxtb	r2, r2
    15fe:	4610      	mov	r0, r2
    1600:	2200      	movs	r2, #0
    1602:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1606:	79b9      	ldrb	r1, [r7, #6]
    1608:	0889      	lsrs	r1, r1, #2
    160a:	b2c9      	uxtb	r1, r1
    160c:	3102      	adds	r1, #2
    160e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    1612:	68fa      	ldr	r2, [r7, #12]
    1614:	43d2      	mvns	r2, r2
    1616:	4011      	ands	r1, r2
    1618:	1c82      	adds	r2, r0, #2
    161a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
    161e:	2300      	movs	r3, #0
    1620:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1624:	79ba      	ldrb	r2, [r7, #6]
    1626:	0892      	lsrs	r2, r2, #2
    1628:	b2d2      	uxtb	r2, r2
    162a:	4610      	mov	r0, r2
    162c:	2200      	movs	r2, #0
    162e:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1632:	79b9      	ldrb	r1, [r7, #6]
    1634:	0889      	lsrs	r1, r1, #2
    1636:	b2c9      	uxtb	r1, r1
    1638:	3102      	adds	r1, #2
    163a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    163e:	79fc      	ldrb	r4, [r7, #7]
    1640:	79ba      	ldrb	r2, [r7, #6]
    1642:	f002 0203 	and.w	r2, r2, #3
    1646:	0092      	lsls	r2, r2, #2
    1648:	fa04 f202 	lsl.w	r2, r4, r2
    164c:	4311      	orrs	r1, r2
    164e:	1c82      	adds	r2, r0, #2
    1650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    1654:	3710      	adds	r7, #16
    1656:	46bd      	mov	sp, r7
    1658:	bc90      	pop	{r4, r7}
    165a:	4770      	bx	lr

0000165c <GPIO_ETH_MediaInterfaceConfig>:
  *     @arg GPIO_ETH_MediaInterface_MII: MII mode
  *     @arg GPIO_ETH_MediaInterface_RMII: RMII mode
  * @retval None
  */
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface)
{
    165c:	b480      	push	{r7}
    165e:	b083      	sub	sp, #12
    1660:	af00      	add	r7, sp, #0
    1662:	6078      	str	r0, [r7, #4]
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface));

  /* Configure MII_RMII selection bit */
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface;
    1664:	23dc      	movs	r3, #220	; 0xdc
    1666:	f2c4 2320 	movt	r3, #16928	; 0x4220
    166a:	687a      	ldr	r2, [r7, #4]
    166c:	601a      	str	r2, [r3, #0]
}
    166e:	370c      	adds	r7, #12
    1670:	46bd      	mov	sp, r7
    1672:	f85d 7b04 	ldr.w	r7, [sp], #4
    1676:	4770      	bx	lr

00001678 <USART_DeInit>:
  *   This parameter can be one of the following values:
  *      USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
    1678:	b580      	push	{r7, lr}
    167a:	b082      	sub	sp, #8
    167c:	af00      	add	r7, sp, #0
    167e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
    1680:	687a      	ldr	r2, [r7, #4]
    1682:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    1686:	f2c4 0301 	movt	r3, #16385	; 0x4001
    168a:	429a      	cmp	r2, r3
    168c:	d10a      	bne.n	16a4 <USART_DeInit+0x2c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    168e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    1692:	2101      	movs	r1, #1
    1694:	f7ff fbe4 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
    1698:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    169c:	2100      	movs	r1, #0
    169e:	f7ff fbdf 	bl	e60 <RCC_APB2PeriphResetCmd>
    16a2:	e046      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART2)
    16a4:	687a      	ldr	r2, [r7, #4]
    16a6:	f44f 4388 	mov.w	r3, #17408	; 0x4400
    16aa:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16ae:	429a      	cmp	r2, r3
    16b0:	d10a      	bne.n	16c8 <USART_DeInit+0x50>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    16b2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16b6:	2101      	movs	r1, #1
    16b8:	f7ff fbfa 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
    16bc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16c0:	2100      	movs	r1, #0
    16c2:	f7ff fbf5 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16c6:	e034      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART3)
    16c8:	687a      	ldr	r2, [r7, #4]
    16ca:	f44f 4390 	mov.w	r3, #18432	; 0x4800
    16ce:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16d2:	429a      	cmp	r2, r3
    16d4:	d10a      	bne.n	16ec <USART_DeInit+0x74>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    16d6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16da:	2101      	movs	r1, #1
    16dc:	f7ff fbe8 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
    16e0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16e4:	2100      	movs	r1, #0
    16e6:	f7ff fbe3 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16ea:	e022      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == UART4)
    16ec:	687a      	ldr	r2, [r7, #4]
    16ee:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
    16f2:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16f6:	429a      	cmp	r2, r3
    16f8:	d10a      	bne.n	1710 <USART_DeInit+0x98>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    16fa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    16fe:	2101      	movs	r1, #1
    1700:	f7ff fbd6 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
    1704:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1708:	2100      	movs	r1, #0
    170a:	f7ff fbd1 	bl	eb0 <RCC_APB1PeriphResetCmd>
    170e:	e010      	b.n	1732 <USART_DeInit+0xba>
  }
  else
  {
    if (USARTx == UART5)
    1710:	687a      	ldr	r2, [r7, #4]
    1712:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    1716:	f2c4 0300 	movt	r3, #16384	; 0x4000
    171a:	429a      	cmp	r2, r3
    171c:	d109      	bne.n	1732 <USART_DeInit+0xba>
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    171e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    1722:	2101      	movs	r1, #1
    1724:	f7ff fbc4 	bl	eb0 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    1728:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    172c:	2100      	movs	r1, #0
    172e:	f7ff fbbf 	bl	eb0 <RCC_APB1PeriphResetCmd>
    }
  }
}
    1732:	3708      	adds	r7, #8
    1734:	46bd      	mov	sp, r7
    1736:	bd80      	pop	{r7, pc}

00001738 <USART_Init>:
  *         that contains the configuration information for the specified USART
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
    1738:	b580      	push	{r7, lr}
    173a:	b08c      	sub	sp, #48	; 0x30
    173c:	af00      	add	r7, sp, #0
    173e:	6078      	str	r0, [r7, #4]
    1740:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
    1742:	2300      	movs	r3, #0
    1744:	62fb      	str	r3, [r7, #44]	; 0x2c
    1746:	2300      	movs	r3, #0
    1748:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
    174a:	2300      	movs	r3, #0
    174c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
    174e:	2300      	movs	r3, #0
    1750:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
    1752:	2300      	movs	r3, #0
    1754:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    1756:	687b      	ldr	r3, [r7, #4]
    1758:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    175a:	687b      	ldr	r3, [r7, #4]
    175c:	8a1b      	ldrh	r3, [r3, #16]
    175e:	b29b      	uxth	r3, r3
    1760:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
    1762:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1764:	f64c 73ff 	movw	r3, #53247	; 0xcfff
    1768:	4013      	ands	r3, r2
    176a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
    176c:	683b      	ldr	r3, [r7, #0]
    176e:	88db      	ldrh	r3, [r3, #6]
    1770:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1772:	4313      	orrs	r3, r2
    1774:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1778:	b29a      	uxth	r2, r3
    177a:	687b      	ldr	r3, [r7, #4]
    177c:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
    177e:	687b      	ldr	r3, [r7, #4]
    1780:	899b      	ldrh	r3, [r3, #12]
    1782:	b29b      	uxth	r3, r3
    1784:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
    1786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1788:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
    178c:	4013      	ands	r3, r2
    178e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    1790:	683b      	ldr	r3, [r7, #0]
    1792:	889a      	ldrh	r2, [r3, #4]
    1794:	683b      	ldr	r3, [r7, #0]
    1796:	891b      	ldrh	r3, [r3, #8]
    1798:	4313      	orrs	r3, r2
    179a:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
    179c:	683b      	ldr	r3, [r7, #0]
    179e:	895b      	ldrh	r3, [r3, #10]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    17a0:	4313      	orrs	r3, r2
    17a2:	b29b      	uxth	r3, r3
    17a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17a6:	4313      	orrs	r3, r2
    17a8:	62fb      	str	r3, [r7, #44]	; 0x2c
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
    17aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17ac:	b29a      	uxth	r2, r3
    17ae:	687b      	ldr	r3, [r7, #4]
    17b0:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/
  tmpreg = USARTx->CR3;
    17b2:	687b      	ldr	r3, [r7, #4]
    17b4:	8a9b      	ldrh	r3, [r3, #20]
    17b6:	b29b      	uxth	r3, r3
    17b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
    17ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17bc:	f64f 43ff 	movw	r3, #64767	; 0xfcff
    17c0:	4013      	ands	r3, r2
    17c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
    17c4:	683b      	ldr	r3, [r7, #0]
    17c6:	899b      	ldrh	r3, [r3, #12]
    17c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17ca:	4313      	orrs	r3, r2
    17cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
    17ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17d0:	b29a      	uxth	r2, r3
    17d2:	687b      	ldr	r3, [r7, #4]
    17d4:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
    17d6:	f107 0308 	add.w	r3, r7, #8
    17da:	4618      	mov	r0, r3
    17dc:	f7ff f9ea 	bl	bb4 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
    17e0:	69fa      	ldr	r2, [r7, #28]
    17e2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    17e6:	f2c4 0301 	movt	r3, #16385	; 0x4001
    17ea:	429a      	cmp	r2, r3
    17ec:	d102      	bne.n	17f4 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
    17ee:	697b      	ldr	r3, [r7, #20]
    17f0:	62bb      	str	r3, [r7, #40]	; 0x28
    17f2:	e001      	b.n	17f8 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
    17f4:	693b      	ldr	r3, [r7, #16]
    17f6:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    17f8:	687b      	ldr	r3, [r7, #4]
    17fa:	899b      	ldrh	r3, [r3, #12]
    17fc:	b29b      	uxth	r3, r3
    17fe:	b29b      	uxth	r3, r3
    1800:	b21b      	sxth	r3, r3
    1802:	2b00      	cmp	r3, #0
    1804:	da0c      	bge.n	1820 <USART_Init+0xe8>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));
    1806:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1808:	4613      	mov	r3, r2
    180a:	009b      	lsls	r3, r3, #2
    180c:	4413      	add	r3, r2
    180e:	009a      	lsls	r2, r3, #2
    1810:	441a      	add	r2, r3
    1812:	683b      	ldr	r3, [r7, #0]
    1814:	681b      	ldr	r3, [r3, #0]
    1816:	005b      	lsls	r3, r3, #1
    1818:	fbb2 f3f3 	udiv	r3, r2, r3
    181c:	627b      	str	r3, [r7, #36]	; 0x24
    181e:	e00b      	b.n	1838 <USART_Init+0x100>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));
    1820:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1822:	4613      	mov	r3, r2
    1824:	009b      	lsls	r3, r3, #2
    1826:	4413      	add	r3, r2
    1828:	009a      	lsls	r2, r3, #2
    182a:	441a      	add	r2, r3
    182c:	683b      	ldr	r3, [r7, #0]
    182e:	681b      	ldr	r3, [r3, #0]
    1830:	009b      	lsls	r3, r3, #2
    1832:	fbb2 f3f3 	udiv	r3, r2, r3
    1836:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
    1838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    183a:	f248 531f 	movw	r3, #34079	; 0x851f
    183e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    1842:	fba3 1302 	umull	r1, r3, r3, r2
    1846:	095b      	lsrs	r3, r3, #5
    1848:	011b      	lsls	r3, r3, #4
    184a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
    184c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    184e:	091b      	lsrs	r3, r3, #4
    1850:	2264      	movs	r2, #100	; 0x64
    1852:	fb02 f303 	mul.w	r3, r2, r3
    1856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1858:	1ad3      	subs	r3, r2, r3
    185a:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    185c:	687b      	ldr	r3, [r7, #4]
    185e:	899b      	ldrh	r3, [r3, #12]
    1860:	b29b      	uxth	r3, r3
    1862:	b29b      	uxth	r3, r3
    1864:	b21b      	sxth	r3, r3
    1866:	2b00      	cmp	r3, #0
    1868:	da10      	bge.n	188c <USART_Init+0x154>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
    186a:	6a3b      	ldr	r3, [r7, #32]
    186c:	00db      	lsls	r3, r3, #3
    186e:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1872:	f248 531f 	movw	r3, #34079	; 0x851f
    1876:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    187a:	fba3 1302 	umull	r1, r3, r3, r2
    187e:	095b      	lsrs	r3, r3, #5
    1880:	f003 0307 	and.w	r3, r3, #7
    1884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1886:	4313      	orrs	r3, r2
    1888:	62fb      	str	r3, [r7, #44]	; 0x2c
    188a:	e00f      	b.n	18ac <USART_Init+0x174>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
    188c:	6a3b      	ldr	r3, [r7, #32]
    188e:	011b      	lsls	r3, r3, #4
    1890:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1894:	f248 531f 	movw	r3, #34079	; 0x851f
    1898:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    189c:	fba3 1302 	umull	r1, r3, r3, r2
    18a0:	095b      	lsrs	r3, r3, #5
    18a2:	f003 030f 	and.w	r3, r3, #15
    18a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    18a8:	4313      	orrs	r3, r2
    18aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
    18ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    18ae:	b29a      	uxth	r2, r3
    18b0:	687b      	ldr	r3, [r7, #4]
    18b2:	811a      	strh	r2, [r3, #8]
}
    18b4:	3730      	adds	r7, #48	; 0x30
    18b6:	46bd      	mov	sp, r7
    18b8:	bd80      	pop	{r7, pc}
    18ba:	bf00      	nop

000018bc <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
    18bc:	b480      	push	{r7}
    18be:	b083      	sub	sp, #12
    18c0:	af00      	add	r7, sp, #0
    18c2:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
    18c4:	687b      	ldr	r3, [r7, #4]
    18c6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
    18ca:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
    18cc:	687b      	ldr	r3, [r7, #4]
    18ce:	2200      	movs	r2, #0
    18d0:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
    18d2:	687b      	ldr	r3, [r7, #4]
    18d4:	2200      	movs	r2, #0
    18d6:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
    18d8:	687b      	ldr	r3, [r7, #4]
    18da:	2200      	movs	r2, #0
    18dc:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    18de:	687b      	ldr	r3, [r7, #4]
    18e0:	220c      	movs	r2, #12
    18e2:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    18e4:	687b      	ldr	r3, [r7, #4]
    18e6:	2200      	movs	r2, #0
    18e8:	819a      	strh	r2, [r3, #12]
}
    18ea:	370c      	adds	r7, #12
    18ec:	46bd      	mov	sp, r7
    18ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    18f2:	4770      	bx	lr

000018f4 <USART_ClockInit>:
  *         USART peripheral.
  * @note The Smart Card and Synchronous modes are not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    18f4:	b480      	push	{r7}
    18f6:	b085      	sub	sp, #20
    18f8:	af00      	add	r7, sp, #0
    18fa:	6078      	str	r0, [r7, #4]
    18fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
    18fe:	2300      	movs	r3, #0
    1900:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    1902:	687b      	ldr	r3, [r7, #4]
    1904:	8a1b      	ldrh	r3, [r3, #16]
    1906:	b29b      	uxth	r3, r3
    1908:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
    190a:	68fa      	ldr	r2, [r7, #12]
    190c:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
    1910:	4013      	ands	r3, r2
    1912:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1914:	683b      	ldr	r3, [r7, #0]
    1916:	881a      	ldrh	r2, [r3, #0]
    1918:	683b      	ldr	r3, [r7, #0]
    191a:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
    191c:	4313      	orrs	r3, r2
    191e:	b29a      	uxth	r2, r3
    1920:	683b      	ldr	r3, [r7, #0]
    1922:	889b      	ldrh	r3, [r3, #4]
    1924:	4313      	orrs	r3, r2
    1926:	b29a      	uxth	r2, r3
    1928:	683b      	ldr	r3, [r7, #0]
    192a:	88db      	ldrh	r3, [r3, #6]
    192c:	4313      	orrs	r3, r2
    192e:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1930:	68fa      	ldr	r2, [r7, #12]
    1932:	4313      	orrs	r3, r2
    1934:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1936:	68fb      	ldr	r3, [r7, #12]
    1938:	b29a      	uxth	r2, r3
    193a:	687b      	ldr	r3, [r7, #4]
    193c:	821a      	strh	r2, [r3, #16]
}
    193e:	3714      	adds	r7, #20
    1940:	46bd      	mov	sp, r7
    1942:	f85d 7b04 	ldr.w	r7, [sp], #4
    1946:	4770      	bx	lr

00001948 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    1948:	b480      	push	{r7}
    194a:	b083      	sub	sp, #12
    194c:	af00      	add	r7, sp, #0
    194e:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
    1950:	687b      	ldr	r3, [r7, #4]
    1952:	2200      	movs	r2, #0
    1954:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
    1956:	687b      	ldr	r3, [r7, #4]
    1958:	2200      	movs	r2, #0
    195a:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
    195c:	687b      	ldr	r3, [r7, #4]
    195e:	2200      	movs	r2, #0
    1960:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
    1962:	687b      	ldr	r3, [r7, #4]
    1964:	2200      	movs	r2, #0
    1966:	80da      	strh	r2, [r3, #6]
}
    1968:	370c      	adds	r7, #12
    196a:	46bd      	mov	sp, r7
    196c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1970:	4770      	bx	lr
    1972:	bf00      	nop

00001974 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1974:	b480      	push	{r7}
    1976:	b083      	sub	sp, #12
    1978:	af00      	add	r7, sp, #0
    197a:	6078      	str	r0, [r7, #4]
    197c:	460b      	mov	r3, r1
    197e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1980:	78fb      	ldrb	r3, [r7, #3]
    1982:	2b00      	cmp	r3, #0
    1984:	d008      	beq.n	1998 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
    1986:	687b      	ldr	r3, [r7, #4]
    1988:	899b      	ldrh	r3, [r3, #12]
    198a:	b29b      	uxth	r3, r3
    198c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1990:	b29a      	uxth	r2, r3
    1992:	687b      	ldr	r3, [r7, #4]
    1994:	819a      	strh	r2, [r3, #12]
    1996:	e007      	b.n	19a8 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
    1998:	687b      	ldr	r3, [r7, #4]
    199a:	899b      	ldrh	r3, [r3, #12]
    199c:	b29b      	uxth	r3, r3
    199e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    19a2:	b29a      	uxth	r2, r3
    19a4:	687b      	ldr	r3, [r7, #4]
    19a6:	819a      	strh	r2, [r3, #12]
  }
}
    19a8:	370c      	adds	r7, #12
    19aa:	46bd      	mov	sp, r7
    19ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    19b0:	4770      	bx	lr
    19b2:	bf00      	nop

000019b4 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
    19b4:	b480      	push	{r7}
    19b6:	b087      	sub	sp, #28
    19b8:	af00      	add	r7, sp, #0
    19ba:	6078      	str	r0, [r7, #4]
    19bc:	4613      	mov	r3, r2
    19be:	460a      	mov	r2, r1
    19c0:	807a      	strh	r2, [r7, #2]
    19c2:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
    19c4:	2300      	movs	r3, #0
    19c6:	613b      	str	r3, [r7, #16]
    19c8:	2300      	movs	r3, #0
    19ca:	60fb      	str	r3, [r7, #12]
    19cc:	2300      	movs	r3, #0
    19ce:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
    19d0:	2300      	movs	r3, #0
    19d2:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    19d4:	687b      	ldr	r3, [r7, #4]
    19d6:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    19d8:	887b      	ldrh	r3, [r7, #2]
    19da:	b2db      	uxtb	r3, r3
    19dc:	095b      	lsrs	r3, r3, #5
    19de:	b2db      	uxtb	r3, r3
    19e0:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
    19e2:	887b      	ldrh	r3, [r7, #2]
    19e4:	f003 031f 	and.w	r3, r3, #31
    19e8:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
    19ea:	68fb      	ldr	r3, [r7, #12]
    19ec:	2201      	movs	r2, #1
    19ee:	fa02 f303 	lsl.w	r3, r2, r3
    19f2:	60bb      	str	r3, [r7, #8]

  if (usartreg == 0x01) /* The IT is in CR1 register */
    19f4:	693b      	ldr	r3, [r7, #16]
    19f6:	2b01      	cmp	r3, #1
    19f8:	d103      	bne.n	1a02 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
    19fa:	697b      	ldr	r3, [r7, #20]
    19fc:	330c      	adds	r3, #12
    19fe:	617b      	str	r3, [r7, #20]
    1a00:	e009      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
    1a02:	693b      	ldr	r3, [r7, #16]
    1a04:	2b02      	cmp	r3, #2
    1a06:	d103      	bne.n	1a10 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
    1a08:	697b      	ldr	r3, [r7, #20]
    1a0a:	3310      	adds	r3, #16
    1a0c:	617b      	str	r3, [r7, #20]
    1a0e:	e002      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14;
    1a10:	697b      	ldr	r3, [r7, #20]
    1a12:	3314      	adds	r3, #20
    1a14:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
    1a16:	787b      	ldrb	r3, [r7, #1]
    1a18:	2b00      	cmp	r3, #0
    1a1a:	d006      	beq.n	1a2a <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
    1a1c:	697b      	ldr	r3, [r7, #20]
    1a1e:	697a      	ldr	r2, [r7, #20]
    1a20:	6811      	ldr	r1, [r2, #0]
    1a22:	68ba      	ldr	r2, [r7, #8]
    1a24:	430a      	orrs	r2, r1
    1a26:	601a      	str	r2, [r3, #0]
    1a28:	e006      	b.n	1a38 <USART_ITConfig+0x84>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
    1a2a:	697b      	ldr	r3, [r7, #20]
    1a2c:	697a      	ldr	r2, [r7, #20]
    1a2e:	6811      	ldr	r1, [r2, #0]
    1a30:	68ba      	ldr	r2, [r7, #8]
    1a32:	43d2      	mvns	r2, r2
    1a34:	400a      	ands	r2, r1
    1a36:	601a      	str	r2, [r3, #0]
  }
}
    1a38:	371c      	adds	r7, #28
    1a3a:	46bd      	mov	sp, r7
    1a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a40:	4770      	bx	lr
    1a42:	bf00      	nop

00001a44 <USART_DMACmd>:
  * @note The DMA mode is not available for UART5 except in the STM32
  *       High density value line devices(STM32F10X_HD_VL).
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
    1a44:	b480      	push	{r7}
    1a46:	b083      	sub	sp, #12
    1a48:	af00      	add	r7, sp, #0
    1a4a:	6078      	str	r0, [r7, #4]
    1a4c:	4613      	mov	r3, r2
    1a4e:	460a      	mov	r2, r1
    1a50:	807a      	strh	r2, [r7, #2]
    1a52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1a54:	787b      	ldrb	r3, [r7, #1]
    1a56:	2b00      	cmp	r3, #0
    1a58:	d008      	beq.n	1a6c <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
    1a5a:	687b      	ldr	r3, [r7, #4]
    1a5c:	8a9b      	ldrh	r3, [r3, #20]
    1a5e:	b29a      	uxth	r2, r3
    1a60:	887b      	ldrh	r3, [r7, #2]
    1a62:	4313      	orrs	r3, r2
    1a64:	b29a      	uxth	r2, r3
    1a66:	687b      	ldr	r3, [r7, #4]
    1a68:	829a      	strh	r2, [r3, #20]
    1a6a:	e009      	b.n	1a80 <USART_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
    1a6c:	687b      	ldr	r3, [r7, #4]
    1a6e:	8a9b      	ldrh	r3, [r3, #20]
    1a70:	b29a      	uxth	r2, r3
    1a72:	887b      	ldrh	r3, [r7, #2]
    1a74:	43db      	mvns	r3, r3
    1a76:	b29b      	uxth	r3, r3
    1a78:	4013      	ands	r3, r2
    1a7a:	b29a      	uxth	r2, r3
    1a7c:	687b      	ldr	r3, [r7, #4]
    1a7e:	829a      	strh	r2, [r3, #20]
  }
}
    1a80:	370c      	adds	r7, #12
    1a82:	46bd      	mov	sp, r7
    1a84:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a88:	4770      	bx	lr
    1a8a:	bf00      	nop

00001a8c <USART_SetAddress>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
    1a8c:	b480      	push	{r7}
    1a8e:	b083      	sub	sp, #12
    1a90:	af00      	add	r7, sp, #0
    1a92:	6078      	str	r0, [r7, #4]
    1a94:	460b      	mov	r3, r1
    1a96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address));

  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
    1a98:	687b      	ldr	r3, [r7, #4]
    1a9a:	8a1b      	ldrh	r3, [r3, #16]
    1a9c:	b29b      	uxth	r3, r3
    1a9e:	f023 030f 	bic.w	r3, r3, #15
    1aa2:	b29a      	uxth	r2, r3
    1aa4:	687b      	ldr	r3, [r7, #4]
    1aa6:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
    1aa8:	687b      	ldr	r3, [r7, #4]
    1aaa:	8a1b      	ldrh	r3, [r3, #16]
    1aac:	b29a      	uxth	r2, r3
    1aae:	78fb      	ldrb	r3, [r7, #3]
    1ab0:	b29b      	uxth	r3, r3
    1ab2:	4313      	orrs	r3, r2
    1ab4:	b29a      	uxth	r2, r3
    1ab6:	687b      	ldr	r3, [r7, #4]
    1ab8:	821a      	strh	r2, [r3, #16]
}
    1aba:	370c      	adds	r7, #12
    1abc:	46bd      	mov	sp, r7
    1abe:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ac2:	4770      	bx	lr

00001ac4 <USART_WakeUpConfig>:
  *     @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *     @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
    1ac4:	b480      	push	{r7}
    1ac6:	b083      	sub	sp, #12
    1ac8:	af00      	add	r7, sp, #0
    1aca:	6078      	str	r0, [r7, #4]
    1acc:	460b      	mov	r3, r1
    1ace:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));

  USARTx->CR1 &= CR1_WAKE_Mask;
    1ad0:	687b      	ldr	r3, [r7, #4]
    1ad2:	899b      	ldrh	r3, [r3, #12]
    1ad4:	b29b      	uxth	r3, r3
    1ad6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1ada:	b29a      	uxth	r2, r3
    1adc:	687b      	ldr	r3, [r7, #4]
    1ade:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
    1ae0:	687b      	ldr	r3, [r7, #4]
    1ae2:	899b      	ldrh	r3, [r3, #12]
    1ae4:	b29a      	uxth	r2, r3
    1ae6:	887b      	ldrh	r3, [r7, #2]
    1ae8:	4313      	orrs	r3, r2
    1aea:	b29a      	uxth	r2, r3
    1aec:	687b      	ldr	r3, [r7, #4]
    1aee:	819a      	strh	r2, [r3, #12]
}
    1af0:	370c      	adds	r7, #12
    1af2:	46bd      	mov	sp, r7
    1af4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1af8:	4770      	bx	lr
    1afa:	bf00      	nop

00001afc <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1afc:	b480      	push	{r7}
    1afe:	b083      	sub	sp, #12
    1b00:	af00      	add	r7, sp, #0
    1b02:	6078      	str	r0, [r7, #4]
    1b04:	460b      	mov	r3, r1
    1b06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b08:	78fb      	ldrb	r3, [r7, #3]
    1b0a:	2b00      	cmp	r3, #0
    1b0c:	d008      	beq.n	1b20 <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
    1b0e:	687b      	ldr	r3, [r7, #4]
    1b10:	899b      	ldrh	r3, [r3, #12]
    1b12:	b29b      	uxth	r3, r3
    1b14:	f043 0302 	orr.w	r3, r3, #2
    1b18:	b29a      	uxth	r2, r3
    1b1a:	687b      	ldr	r3, [r7, #4]
    1b1c:	819a      	strh	r2, [r3, #12]
    1b1e:	e007      	b.n	1b30 <USART_ReceiverWakeUpCmd+0x34>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
    1b20:	687b      	ldr	r3, [r7, #4]
    1b22:	899b      	ldrh	r3, [r3, #12]
    1b24:	b29b      	uxth	r3, r3
    1b26:	f023 0302 	bic.w	r3, r3, #2
    1b2a:	b29a      	uxth	r2, r3
    1b2c:	687b      	ldr	r3, [r7, #4]
    1b2e:	819a      	strh	r2, [r3, #12]
  }
}
    1b30:	370c      	adds	r7, #12
    1b32:	46bd      	mov	sp, r7
    1b34:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b38:	4770      	bx	lr
    1b3a:	bf00      	nop

00001b3c <USART_LINBreakDetectLengthConfig>:
  *     @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *     @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
    1b3c:	b480      	push	{r7}
    1b3e:	b083      	sub	sp, #12
    1b40:	af00      	add	r7, sp, #0
    1b42:	6078      	str	r0, [r7, #4]
    1b44:	460b      	mov	r3, r1
    1b46:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));

  USARTx->CR2 &= CR2_LBDL_Mask;
    1b48:	687b      	ldr	r3, [r7, #4]
    1b4a:	8a1b      	ldrh	r3, [r3, #16]
    1b4c:	b29b      	uxth	r3, r3
    1b4e:	f023 0320 	bic.w	r3, r3, #32
    1b52:	b29a      	uxth	r2, r3
    1b54:	687b      	ldr	r3, [r7, #4]
    1b56:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;
    1b58:	687b      	ldr	r3, [r7, #4]
    1b5a:	8a1b      	ldrh	r3, [r3, #16]
    1b5c:	b29a      	uxth	r2, r3
    1b5e:	887b      	ldrh	r3, [r7, #2]
    1b60:	4313      	orrs	r3, r2
    1b62:	b29a      	uxth	r2, r3
    1b64:	687b      	ldr	r3, [r7, #4]
    1b66:	821a      	strh	r2, [r3, #16]
}
    1b68:	370c      	adds	r7, #12
    1b6a:	46bd      	mov	sp, r7
    1b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b70:	4770      	bx	lr
    1b72:	bf00      	nop

00001b74 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1b74:	b480      	push	{r7}
    1b76:	b083      	sub	sp, #12
    1b78:	af00      	add	r7, sp, #0
    1b7a:	6078      	str	r0, [r7, #4]
    1b7c:	460b      	mov	r3, r1
    1b7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b80:	78fb      	ldrb	r3, [r7, #3]
    1b82:	2b00      	cmp	r3, #0
    1b84:	d008      	beq.n	1b98 <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
    1b86:	687b      	ldr	r3, [r7, #4]
    1b88:	8a1b      	ldrh	r3, [r3, #16]
    1b8a:	b29b      	uxth	r3, r3
    1b8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1b90:	b29a      	uxth	r2, r3
    1b92:	687b      	ldr	r3, [r7, #4]
    1b94:	821a      	strh	r2, [r3, #16]
    1b96:	e007      	b.n	1ba8 <USART_LINCmd+0x34>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
    1b98:	687b      	ldr	r3, [r7, #4]
    1b9a:	8a1b      	ldrh	r3, [r3, #16]
    1b9c:	b29b      	uxth	r3, r3
    1b9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    1ba2:	b29a      	uxth	r2, r3
    1ba4:	687b      	ldr	r3, [r7, #4]
    1ba6:	821a      	strh	r2, [r3, #16]
  }
}
    1ba8:	370c      	adds	r7, #12
    1baa:	46bd      	mov	sp, r7
    1bac:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bb0:	4770      	bx	lr
    1bb2:	bf00      	nop

00001bb4 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
    1bb4:	b480      	push	{r7}
    1bb6:	b083      	sub	sp, #12
    1bb8:	af00      	add	r7, sp, #0
    1bba:	6078      	str	r0, [r7, #4]
    1bbc:	460b      	mov	r3, r1
    1bbe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data));

  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
    1bc0:	887b      	ldrh	r3, [r7, #2]
    1bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bc6:	b29a      	uxth	r2, r3
    1bc8:	687b      	ldr	r3, [r7, #4]
    1bca:	809a      	strh	r2, [r3, #4]
}
    1bcc:	370c      	adds	r7, #12
    1bce:	46bd      	mov	sp, r7
    1bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bd4:	4770      	bx	lr
    1bd6:	bf00      	nop

00001bd8 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
    1bd8:	b480      	push	{r7}
    1bda:	b083      	sub	sp, #12
    1bdc:	af00      	add	r7, sp, #0
    1bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
    1be0:	687b      	ldr	r3, [r7, #4]
    1be2:	889b      	ldrh	r3, [r3, #4]
    1be4:	b29b      	uxth	r3, r3
    1be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bea:	b29b      	uxth	r3, r3
}
    1bec:	4618      	mov	r0, r3
    1bee:	370c      	adds	r7, #12
    1bf0:	46bd      	mov	sp, r7
    1bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bf6:	4770      	bx	lr

00001bf8 <USART_SendBreak>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
    1bf8:	b480      	push	{r7}
    1bfa:	b083      	sub	sp, #12
    1bfc:	af00      	add	r7, sp, #0
    1bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
    1c00:	687b      	ldr	r3, [r7, #4]
    1c02:	899b      	ldrh	r3, [r3, #12]
    1c04:	b29b      	uxth	r3, r3
    1c06:	f043 0301 	orr.w	r3, r3, #1
    1c0a:	b29a      	uxth	r2, r3
    1c0c:	687b      	ldr	r3, [r7, #4]
    1c0e:	819a      	strh	r2, [r3, #12]
}
    1c10:	370c      	adds	r7, #12
    1c12:	46bd      	mov	sp, r7
    1c14:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c18:	4770      	bx	lr
    1c1a:	bf00      	nop

00001c1c <USART_SetGuardTime>:
  * @param  USART_GuardTime: specifies the guard time.
  * @note The guard time bits are not available for UART4 and UART5.
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{
    1c1c:	b480      	push	{r7}
    1c1e:	b083      	sub	sp, #12
    1c20:	af00      	add	r7, sp, #0
    1c22:	6078      	str	r0, [r7, #4]
    1c24:	460b      	mov	r3, r1
    1c26:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));

  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
    1c28:	687b      	ldr	r3, [r7, #4]
    1c2a:	8b1b      	ldrh	r3, [r3, #24]
    1c2c:	b29b      	uxth	r3, r3
    1c2e:	b2db      	uxtb	r3, r3
    1c30:	b29a      	uxth	r2, r3
    1c32:	687b      	ldr	r3, [r7, #4]
    1c34:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
    1c36:	687b      	ldr	r3, [r7, #4]
    1c38:	8b1b      	ldrh	r3, [r3, #24]
    1c3a:	b29a      	uxth	r2, r3
    1c3c:	78fb      	ldrb	r3, [r7, #3]
    1c3e:	b29b      	uxth	r3, r3
    1c40:	021b      	lsls	r3, r3, #8
    1c42:	b29b      	uxth	r3, r3
    1c44:	4313      	orrs	r3, r2
    1c46:	b29a      	uxth	r2, r3
    1c48:	687b      	ldr	r3, [r7, #4]
    1c4a:	831a      	strh	r2, [r3, #24]
}
    1c4c:	370c      	adds	r7, #12
    1c4e:	46bd      	mov	sp, r7
    1c50:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c54:	4770      	bx	lr
    1c56:	bf00      	nop

00001c58 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock.
  * @note   The function is used for IrDA mode with UART4 and UART5.
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{
    1c58:	b480      	push	{r7}
    1c5a:	b083      	sub	sp, #12
    1c5c:	af00      	add	r7, sp, #0
    1c5e:	6078      	str	r0, [r7, #4]
    1c60:	460b      	mov	r3, r1
    1c62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
    1c64:	687b      	ldr	r3, [r7, #4]
    1c66:	8b1b      	ldrh	r3, [r3, #24]
    1c68:	b29b      	uxth	r3, r3
    1c6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    1c6e:	b29a      	uxth	r2, r3
    1c70:	687b      	ldr	r3, [r7, #4]
    1c72:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
    1c74:	687b      	ldr	r3, [r7, #4]
    1c76:	8b1b      	ldrh	r3, [r3, #24]
    1c78:	b29a      	uxth	r2, r3
    1c7a:	78fb      	ldrb	r3, [r7, #3]
    1c7c:	b29b      	uxth	r3, r3
    1c7e:	4313      	orrs	r3, r2
    1c80:	b29a      	uxth	r2, r3
    1c82:	687b      	ldr	r3, [r7, #4]
    1c84:	831a      	strh	r2, [r3, #24]
}
    1c86:	370c      	adds	r7, #12
    1c88:	46bd      	mov	sp, r7
    1c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c8e:	4770      	bx	lr

00001c90 <USART_SmartCardCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1c90:	b480      	push	{r7}
    1c92:	b083      	sub	sp, #12
    1c94:	af00      	add	r7, sp, #0
    1c96:	6078      	str	r0, [r7, #4]
    1c98:	460b      	mov	r3, r1
    1c9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1c9c:	78fb      	ldrb	r3, [r7, #3]
    1c9e:	2b00      	cmp	r3, #0
    1ca0:	d008      	beq.n	1cb4 <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
    1ca2:	687b      	ldr	r3, [r7, #4]
    1ca4:	8a9b      	ldrh	r3, [r3, #20]
    1ca6:	b29b      	uxth	r3, r3
    1ca8:	f043 0320 	orr.w	r3, r3, #32
    1cac:	b29a      	uxth	r2, r3
    1cae:	687b      	ldr	r3, [r7, #4]
    1cb0:	829a      	strh	r2, [r3, #20]
    1cb2:	e007      	b.n	1cc4 <USART_SmartCardCmd+0x34>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
    1cb4:	687b      	ldr	r3, [r7, #4]
    1cb6:	8a9b      	ldrh	r3, [r3, #20]
    1cb8:	b29b      	uxth	r3, r3
    1cba:	f023 0320 	bic.w	r3, r3, #32
    1cbe:	b29a      	uxth	r2, r3
    1cc0:	687b      	ldr	r3, [r7, #4]
    1cc2:	829a      	strh	r2, [r3, #20]
  }
}
    1cc4:	370c      	adds	r7, #12
    1cc6:	46bd      	mov	sp, r7
    1cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ccc:	4770      	bx	lr
    1cce:	bf00      	nop

00001cd0 <USART_SmartCardNACKCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1cd0:	b480      	push	{r7}
    1cd2:	b083      	sub	sp, #12
    1cd4:	af00      	add	r7, sp, #0
    1cd6:	6078      	str	r0, [r7, #4]
    1cd8:	460b      	mov	r3, r1
    1cda:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1cdc:	78fb      	ldrb	r3, [r7, #3]
    1cde:	2b00      	cmp	r3, #0
    1ce0:	d008      	beq.n	1cf4 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
    1ce2:	687b      	ldr	r3, [r7, #4]
    1ce4:	8a9b      	ldrh	r3, [r3, #20]
    1ce6:	b29b      	uxth	r3, r3
    1ce8:	f043 0310 	orr.w	r3, r3, #16
    1cec:	b29a      	uxth	r2, r3
    1cee:	687b      	ldr	r3, [r7, #4]
    1cf0:	829a      	strh	r2, [r3, #20]
    1cf2:	e007      	b.n	1d04 <USART_SmartCardNACKCmd+0x34>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
    1cf4:	687b      	ldr	r3, [r7, #4]
    1cf6:	8a9b      	ldrh	r3, [r3, #20]
    1cf8:	b29b      	uxth	r3, r3
    1cfa:	f023 0310 	bic.w	r3, r3, #16
    1cfe:	b29a      	uxth	r2, r3
    1d00:	687b      	ldr	r3, [r7, #4]
    1d02:	829a      	strh	r2, [r3, #20]
  }
}
    1d04:	370c      	adds	r7, #12
    1d06:	46bd      	mov	sp, r7
    1d08:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d0c:	4770      	bx	lr
    1d0e:	bf00      	nop

00001d10 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d10:	b480      	push	{r7}
    1d12:	b083      	sub	sp, #12
    1d14:	af00      	add	r7, sp, #0
    1d16:	6078      	str	r0, [r7, #4]
    1d18:	460b      	mov	r3, r1
    1d1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d1c:	78fb      	ldrb	r3, [r7, #3]
    1d1e:	2b00      	cmp	r3, #0
    1d20:	d008      	beq.n	1d34 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
    1d22:	687b      	ldr	r3, [r7, #4]
    1d24:	8a9b      	ldrh	r3, [r3, #20]
    1d26:	b29b      	uxth	r3, r3
    1d28:	f043 0308 	orr.w	r3, r3, #8
    1d2c:	b29a      	uxth	r2, r3
    1d2e:	687b      	ldr	r3, [r7, #4]
    1d30:	829a      	strh	r2, [r3, #20]
    1d32:	e007      	b.n	1d44 <USART_HalfDuplexCmd+0x34>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
    1d34:	687b      	ldr	r3, [r7, #4]
    1d36:	8a9b      	ldrh	r3, [r3, #20]
    1d38:	b29b      	uxth	r3, r3
    1d3a:	f023 0308 	bic.w	r3, r3, #8
    1d3e:	b29a      	uxth	r2, r3
    1d40:	687b      	ldr	r3, [r7, #4]
    1d42:	829a      	strh	r2, [r3, #20]
  }
}
    1d44:	370c      	adds	r7, #12
    1d46:	46bd      	mov	sp, r7
    1d48:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d4c:	4770      	bx	lr
    1d4e:	bf00      	nop

00001d50 <USART_OverSampling8Cmd>:
  *     This function has to be called before calling USART_Init()
  *     function in order to have correct baudrate Divider value.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d50:	b480      	push	{r7}
    1d52:	b083      	sub	sp, #12
    1d54:	af00      	add	r7, sp, #0
    1d56:	6078      	str	r0, [r7, #4]
    1d58:	460b      	mov	r3, r1
    1d5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d5c:	78fb      	ldrb	r3, [r7, #3]
    1d5e:	2b00      	cmp	r3, #0
    1d60:	d00a      	beq.n	1d78 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= CR1_OVER8_Set;
    1d62:	687b      	ldr	r3, [r7, #4]
    1d64:	899b      	ldrh	r3, [r3, #12]
    1d66:	b29b      	uxth	r3, r3
    1d68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    1d6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    1d70:	b29a      	uxth	r2, r3
    1d72:	687b      	ldr	r3, [r7, #4]
    1d74:	819a      	strh	r2, [r3, #12]
    1d76:	e007      	b.n	1d88 <USART_OverSampling8Cmd+0x38>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= CR1_OVER8_Reset;
    1d78:	687b      	ldr	r3, [r7, #4]
    1d7a:	899b      	ldrh	r3, [r3, #12]
    1d7c:	b29b      	uxth	r3, r3
    1d7e:	f3c3 030e 	ubfx	r3, r3, #0, #15
    1d82:	b29a      	uxth	r2, r3
    1d84:	687b      	ldr	r3, [r7, #4]
    1d86:	819a      	strh	r2, [r3, #12]
  }
}
    1d88:	370c      	adds	r7, #12
    1d8a:	46bd      	mov	sp, r7
    1d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d90:	4770      	bx	lr
    1d92:	bf00      	nop

00001d94 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d94:	b480      	push	{r7}
    1d96:	b083      	sub	sp, #12
    1d98:	af00      	add	r7, sp, #0
    1d9a:	6078      	str	r0, [r7, #4]
    1d9c:	460b      	mov	r3, r1
    1d9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1da0:	78fb      	ldrb	r3, [r7, #3]
    1da2:	2b00      	cmp	r3, #0
    1da4:	d008      	beq.n	1db8 <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= CR3_ONEBITE_Set;
    1da6:	687b      	ldr	r3, [r7, #4]
    1da8:	8a9b      	ldrh	r3, [r3, #20]
    1daa:	b29b      	uxth	r3, r3
    1dac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    1db0:	b29a      	uxth	r2, r3
    1db2:	687b      	ldr	r3, [r7, #4]
    1db4:	829a      	strh	r2, [r3, #20]
    1db6:	e007      	b.n	1dc8 <USART_OneBitMethodCmd+0x34>
  }
  else
  {
    /* Disable tthe one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= CR3_ONEBITE_Reset;
    1db8:	687b      	ldr	r3, [r7, #4]
    1dba:	8a9b      	ldrh	r3, [r3, #20]
    1dbc:	b29b      	uxth	r3, r3
    1dbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1dc2:	b29a      	uxth	r2, r3
    1dc4:	687b      	ldr	r3, [r7, #4]
    1dc6:	829a      	strh	r2, [r3, #20]
  }
}
    1dc8:	370c      	adds	r7, #12
    1dca:	46bd      	mov	sp, r7
    1dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1dd0:	4770      	bx	lr
    1dd2:	bf00      	nop

00001dd4 <USART_IrDAConfig>:
  *     @arg USART_IrDAMode_LowPower
  *     @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
    1dd4:	b480      	push	{r7}
    1dd6:	b083      	sub	sp, #12
    1dd8:	af00      	add	r7, sp, #0
    1dda:	6078      	str	r0, [r7, #4]
    1ddc:	460b      	mov	r3, r1
    1dde:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));

  USARTx->CR3 &= CR3_IRLP_Mask;
    1de0:	687b      	ldr	r3, [r7, #4]
    1de2:	8a9b      	ldrh	r3, [r3, #20]
    1de4:	b29b      	uxth	r3, r3
    1de6:	f023 0304 	bic.w	r3, r3, #4
    1dea:	b29a      	uxth	r2, r3
    1dec:	687b      	ldr	r3, [r7, #4]
    1dee:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
    1df0:	687b      	ldr	r3, [r7, #4]
    1df2:	8a9b      	ldrh	r3, [r3, #20]
    1df4:	b29a      	uxth	r2, r3
    1df6:	887b      	ldrh	r3, [r7, #2]
    1df8:	4313      	orrs	r3, r2
    1dfa:	b29a      	uxth	r2, r3
    1dfc:	687b      	ldr	r3, [r7, #4]
    1dfe:	829a      	strh	r2, [r3, #20]
}
    1e00:	370c      	adds	r7, #12
    1e02:	46bd      	mov	sp, r7
    1e04:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e08:	4770      	bx	lr
    1e0a:	bf00      	nop

00001e0c <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1e0c:	b480      	push	{r7}
    1e0e:	b083      	sub	sp, #12
    1e10:	af00      	add	r7, sp, #0
    1e12:	6078      	str	r0, [r7, #4]
    1e14:	460b      	mov	r3, r1
    1e16:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1e18:	78fb      	ldrb	r3, [r7, #3]
    1e1a:	2b00      	cmp	r3, #0
    1e1c:	d008      	beq.n	1e30 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
    1e1e:	687b      	ldr	r3, [r7, #4]
    1e20:	8a9b      	ldrh	r3, [r3, #20]
    1e22:	b29b      	uxth	r3, r3
    1e24:	f043 0302 	orr.w	r3, r3, #2
    1e28:	b29a      	uxth	r2, r3
    1e2a:	687b      	ldr	r3, [r7, #4]
    1e2c:	829a      	strh	r2, [r3, #20]
    1e2e:	e007      	b.n	1e40 <USART_IrDACmd+0x34>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
    1e30:	687b      	ldr	r3, [r7, #4]
    1e32:	8a9b      	ldrh	r3, [r3, #20]
    1e34:	b29b      	uxth	r3, r3
    1e36:	f023 0302 	bic.w	r3, r3, #2
    1e3a:	b29a      	uxth	r2, r3
    1e3c:	687b      	ldr	r3, [r7, #4]
    1e3e:	829a      	strh	r2, [r3, #20]
  }
}
    1e40:	370c      	adds	r7, #12
    1e42:	46bd      	mov	sp, r7
    1e44:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e48:	4770      	bx	lr
    1e4a:	bf00      	nop

00001e4c <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e4c:	b480      	push	{r7}
    1e4e:	b085      	sub	sp, #20
    1e50:	af00      	add	r7, sp, #0
    1e52:	6078      	str	r0, [r7, #4]
    1e54:	460b      	mov	r3, r1
    1e56:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
    1e58:	2300      	movs	r3, #0
    1e5a:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
    1e5c:	687b      	ldr	r3, [r7, #4]
    1e5e:	881b      	ldrh	r3, [r3, #0]
    1e60:	b29a      	uxth	r2, r3
    1e62:	887b      	ldrh	r3, [r7, #2]
    1e64:	4013      	ands	r3, r2
    1e66:	b29b      	uxth	r3, r3
    1e68:	2b00      	cmp	r3, #0
    1e6a:	d002      	beq.n	1e72 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
    1e6c:	2301      	movs	r3, #1
    1e6e:	73fb      	strb	r3, [r7, #15]
    1e70:	e001      	b.n	1e76 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    1e72:	2300      	movs	r3, #0
    1e74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    1e76:	7bfb      	ldrb	r3, [r7, #15]
}
    1e78:	4618      	mov	r0, r3
    1e7a:	3714      	adds	r7, #20
    1e7c:	46bd      	mov	sp, r7
    1e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e82:	4770      	bx	lr

00001e84 <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e84:	b480      	push	{r7}
    1e86:	b083      	sub	sp, #12
    1e88:	af00      	add	r7, sp, #0
    1e8a:	6078      	str	r0, [r7, #4]
    1e8c:	460b      	mov	r3, r1
    1e8e:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  USARTx->SR = (uint16_t)~USART_FLAG;
    1e90:	887b      	ldrh	r3, [r7, #2]
    1e92:	43db      	mvns	r3, r3
    1e94:	b29a      	uxth	r2, r3
    1e96:	687b      	ldr	r3, [r7, #4]
    1e98:	801a      	strh	r2, [r3, #0]
}
    1e9a:	370c      	adds	r7, #12
    1e9c:	46bd      	mov	sp, r7
    1e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ea2:	4770      	bx	lr

00001ea4 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1ea4:	b480      	push	{r7}
    1ea6:	b087      	sub	sp, #28
    1ea8:	af00      	add	r7, sp, #0
    1eaa:	6078      	str	r0, [r7, #4]
    1eac:	460b      	mov	r3, r1
    1eae:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
    1eb0:	2300      	movs	r3, #0
    1eb2:	60fb      	str	r3, [r7, #12]
    1eb4:	2300      	movs	r3, #0
    1eb6:	617b      	str	r3, [r7, #20]
    1eb8:	2300      	movs	r3, #0
    1eba:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
    1ebc:	2300      	movs	r3, #0
    1ebe:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    1ec0:	887b      	ldrh	r3, [r7, #2]
    1ec2:	b2db      	uxtb	r3, r3
    1ec4:	095b      	lsrs	r3, r3, #5
    1ec6:	b2db      	uxtb	r3, r3
    1ec8:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
    1eca:	887b      	ldrh	r3, [r7, #2]
    1ecc:	f003 031f 	and.w	r3, r3, #31
    1ed0:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
    1ed2:	697b      	ldr	r3, [r7, #20]
    1ed4:	2201      	movs	r2, #1
    1ed6:	fa02 f303 	lsl.w	r3, r2, r3
    1eda:	617b      	str	r3, [r7, #20]

  if (usartreg == 0x01) /* The IT  is in CR1 register */
    1edc:	68bb      	ldr	r3, [r7, #8]
    1ede:	2b01      	cmp	r3, #1
    1ee0:	d106      	bne.n	1ef0 <USART_GetITStatus+0x4c>
  {
    itmask &= USARTx->CR1;
    1ee2:	687b      	ldr	r3, [r7, #4]
    1ee4:	899b      	ldrh	r3, [r3, #12]
    1ee6:	b29b      	uxth	r3, r3
    1ee8:	697a      	ldr	r2, [r7, #20]
    1eea:	4013      	ands	r3, r2
    1eec:	617b      	str	r3, [r7, #20]
    1eee:	e00f      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
    1ef0:	68bb      	ldr	r3, [r7, #8]
    1ef2:	2b02      	cmp	r3, #2
    1ef4:	d106      	bne.n	1f04 <USART_GetITStatus+0x60>
  {
    itmask &= USARTx->CR2;
    1ef6:	687b      	ldr	r3, [r7, #4]
    1ef8:	8a1b      	ldrh	r3, [r3, #16]
    1efa:	b29b      	uxth	r3, r3
    1efc:	697a      	ldr	r2, [r7, #20]
    1efe:	4013      	ands	r3, r2
    1f00:	617b      	str	r3, [r7, #20]
    1f02:	e005      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
    1f04:	687b      	ldr	r3, [r7, #4]
    1f06:	8a9b      	ldrh	r3, [r3, #20]
    1f08:	b29b      	uxth	r3, r3
    1f0a:	697a      	ldr	r2, [r7, #20]
    1f0c:	4013      	ands	r3, r2
    1f0e:	617b      	str	r3, [r7, #20]
  }

  bitpos = USART_IT >> 0x08;
    1f10:	887b      	ldrh	r3, [r7, #2]
    1f12:	0a1b      	lsrs	r3, r3, #8
    1f14:	b29b      	uxth	r3, r3
    1f16:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
    1f18:	68fb      	ldr	r3, [r7, #12]
    1f1a:	2201      	movs	r2, #1
    1f1c:	fa02 f303 	lsl.w	r3, r2, r3
    1f20:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
    1f22:	687b      	ldr	r3, [r7, #4]
    1f24:	881b      	ldrh	r3, [r3, #0]
    1f26:	b29b      	uxth	r3, r3
    1f28:	68fa      	ldr	r2, [r7, #12]
    1f2a:	4013      	ands	r3, r2
    1f2c:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
    1f2e:	697b      	ldr	r3, [r7, #20]
    1f30:	2b00      	cmp	r3, #0
    1f32:	d005      	beq.n	1f40 <USART_GetITStatus+0x9c>
    1f34:	68fb      	ldr	r3, [r7, #12]
    1f36:	2b00      	cmp	r3, #0
    1f38:	d002      	beq.n	1f40 <USART_GetITStatus+0x9c>
  {
    bitstatus = SET;
    1f3a:	2301      	movs	r3, #1
    1f3c:	74fb      	strb	r3, [r7, #19]
    1f3e:	e001      	b.n	1f44 <USART_GetITStatus+0xa0>
  }
  else
  {
    bitstatus = RESET;
    1f40:	2300      	movs	r3, #0
    1f42:	74fb      	strb	r3, [r7, #19]
  }

  return bitstatus;
    1f44:	7cfb      	ldrb	r3, [r7, #19]
}
    1f46:	4618      	mov	r0, r3
    1f48:	371c      	adds	r7, #28
    1f4a:	46bd      	mov	sp, r7
    1f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f50:	4770      	bx	lr
    1f52:	bf00      	nop

00001f54 <USART_ClearITPendingBit>:
  *   - TXE pending bit is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1f54:	b480      	push	{r7}
    1f56:	b085      	sub	sp, #20
    1f58:	af00      	add	r7, sp, #0
    1f5a:	6078      	str	r0, [r7, #4]
    1f5c:	460b      	mov	r3, r1
    1f5e:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
    1f60:	2300      	movs	r3, #0
    1f62:	81fb      	strh	r3, [r7, #14]
    1f64:	2300      	movs	r3, #0
    1f66:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  bitpos = USART_IT >> 0x08;
    1f68:	887b      	ldrh	r3, [r7, #2]
    1f6a:	0a1b      	lsrs	r3, r3, #8
    1f6c:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
    1f6e:	89fb      	ldrh	r3, [r7, #14]
    1f70:	2201      	movs	r2, #1
    1f72:	fa02 f303 	lsl.w	r3, r2, r3
    1f76:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
    1f78:	89bb      	ldrh	r3, [r7, #12]
    1f7a:	43db      	mvns	r3, r3
    1f7c:	b29a      	uxth	r2, r3
    1f7e:	687b      	ldr	r3, [r7, #4]
    1f80:	801a      	strh	r2, [r3, #0]
}
    1f82:	3714      	adds	r7, #20
    1f84:	46bd      	mov	sp, r7
    1f86:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f8a:	4770      	bx	lr

00001f8c <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
    1f8c:	b480      	push	{r7}
    1f8e:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
    1f90:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1f94:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1f98:	2200      	movs	r2, #0
    1f9a:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
    1f9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fa0:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fa4:	2200      	movs	r2, #0
    1fa6:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
    1fa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fac:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fb0:	2200      	movs	r2, #0
    1fb2:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
    1fb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fb8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fbc:	2200      	movs	r2, #0
    1fbe:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x000FFFFF;
    1fc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fc4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1fcc:	f2c0 020f 	movt	r2, #15
    1fd0:	615a      	str	r2, [r3, #20]
}
    1fd2:	46bd      	mov	sp, r7
    1fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1fd8:	4770      	bx	lr
    1fda:	bf00      	nop

00001fdc <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
    1fdc:	b480      	push	{r7}
    1fde:	b085      	sub	sp, #20
    1fe0:	af00      	add	r7, sp, #0
    1fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
    1fe4:	2300      	movs	r3, #0
    1fe6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
    1fe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fec:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1ff0:	60fb      	str	r3, [r7, #12]

  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
    1ff2:	687b      	ldr	r3, [r7, #4]
    1ff4:	799b      	ldrb	r3, [r3, #6]
    1ff6:	2b00      	cmp	r3, #0
    1ff8:	d074      	beq.n	20e4 <EXTI_Init+0x108>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    1ffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1ffe:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2002:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2006:	f2c4 0201 	movt	r2, #16385	; 0x4001
    200a:	6811      	ldr	r1, [r2, #0]
    200c:	687a      	ldr	r2, [r7, #4]
    200e:	6812      	ldr	r2, [r2, #0]
    2010:	43d2      	mvns	r2, r2
    2012:	400a      	ands	r2, r1
    2014:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    2016:	f44f 6380 	mov.w	r3, #1024	; 0x400
    201a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    201e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2022:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2026:	6851      	ldr	r1, [r2, #4]
    2028:	687a      	ldr	r2, [r7, #4]
    202a:	6812      	ldr	r2, [r2, #0]
    202c:	43d2      	mvns	r2, r2
    202e:	400a      	ands	r2, r1
    2030:	605a      	str	r2, [r3, #4]

    tmp += EXTI_InitStruct->EXTI_Mode;
    2032:	687b      	ldr	r3, [r7, #4]
    2034:	791b      	ldrb	r3, [r3, #4]
    2036:	68fa      	ldr	r2, [r7, #12]
    2038:	4413      	add	r3, r2
    203a:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    203c:	68fb      	ldr	r3, [r7, #12]
    203e:	68fa      	ldr	r2, [r7, #12]
    2040:	6811      	ldr	r1, [r2, #0]
    2042:	687a      	ldr	r2, [r7, #4]
    2044:	6812      	ldr	r2, [r2, #0]
    2046:	430a      	orrs	r2, r1
    2048:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    204a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    204e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2052:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2056:	f2c4 0201 	movt	r2, #16385	; 0x4001
    205a:	6891      	ldr	r1, [r2, #8]
    205c:	687a      	ldr	r2, [r7, #4]
    205e:	6812      	ldr	r2, [r2, #0]
    2060:	43d2      	mvns	r2, r2
    2062:	400a      	ands	r2, r1
    2064:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    2066:	f44f 6380 	mov.w	r3, #1024	; 0x400
    206a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    206e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2072:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2076:	68d1      	ldr	r1, [r2, #12]
    2078:	687a      	ldr	r2, [r7, #4]
    207a:	6812      	ldr	r2, [r2, #0]
    207c:	43d2      	mvns	r2, r2
    207e:	400a      	ands	r2, r1
    2080:	60da      	str	r2, [r3, #12]

    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
    2082:	687b      	ldr	r3, [r7, #4]
    2084:	795b      	ldrb	r3, [r3, #5]
    2086:	2b10      	cmp	r3, #16
    2088:	d11a      	bne.n	20c0 <EXTI_Init+0xe4>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
    208a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    208e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2092:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2096:	f2c4 0201 	movt	r2, #16385	; 0x4001
    209a:	6891      	ldr	r1, [r2, #8]
    209c:	687a      	ldr	r2, [r7, #4]
    209e:	6812      	ldr	r2, [r2, #0]
    20a0:	430a      	orrs	r2, r1
    20a2:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    20a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20a8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
    20b0:	f2c4 0201 	movt	r2, #16385	; 0x4001
    20b4:	68d1      	ldr	r1, [r2, #12]
    20b6:	687a      	ldr	r2, [r7, #4]
    20b8:	6812      	ldr	r2, [r2, #0]
    20ba:	430a      	orrs	r2, r1
    20bc:	60da      	str	r2, [r3, #12]
    20be:	e01e      	b.n	20fe <EXTI_Init+0x122>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
    20c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20c4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20c8:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
    20ca:	687b      	ldr	r3, [r7, #4]
    20cc:	795b      	ldrb	r3, [r3, #5]
    20ce:	68fa      	ldr	r2, [r7, #12]
    20d0:	4413      	add	r3, r2
    20d2:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    20d4:	68fb      	ldr	r3, [r7, #12]
    20d6:	68fa      	ldr	r2, [r7, #12]
    20d8:	6811      	ldr	r1, [r2, #0]
    20da:	687a      	ldr	r2, [r7, #4]
    20dc:	6812      	ldr	r2, [r2, #0]
    20de:	430a      	orrs	r2, r1
    20e0:	601a      	str	r2, [r3, #0]
    20e2:	e00c      	b.n	20fe <EXTI_Init+0x122>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
    20e4:	687b      	ldr	r3, [r7, #4]
    20e6:	791b      	ldrb	r3, [r3, #4]
    20e8:	68fa      	ldr	r2, [r7, #12]
    20ea:	4413      	add	r3, r2
    20ec:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
    20ee:	68fb      	ldr	r3, [r7, #12]
    20f0:	68fa      	ldr	r2, [r7, #12]
    20f2:	6811      	ldr	r1, [r2, #0]
    20f4:	687a      	ldr	r2, [r7, #4]
    20f6:	6812      	ldr	r2, [r2, #0]
    20f8:	43d2      	mvns	r2, r2
    20fa:	400a      	ands	r2, r1
    20fc:	601a      	str	r2, [r3, #0]
  }
}
    20fe:	3714      	adds	r7, #20
    2100:	46bd      	mov	sp, r7
    2102:	f85d 7b04 	ldr.w	r7, [sp], #4
    2106:	4770      	bx	lr

00002108 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
    2108:	b480      	push	{r7}
    210a:	b083      	sub	sp, #12
    210c:	af00      	add	r7, sp, #0
    210e:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
    2110:	687b      	ldr	r3, [r7, #4]
    2112:	2200      	movs	r2, #0
    2114:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
    2116:	687b      	ldr	r3, [r7, #4]
    2118:	2200      	movs	r2, #0
    211a:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
    211c:	687b      	ldr	r3, [r7, #4]
    211e:	220c      	movs	r2, #12
    2120:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
    2122:	687b      	ldr	r3, [r7, #4]
    2124:	2200      	movs	r2, #0
    2126:	719a      	strb	r2, [r3, #6]
}
    2128:	370c      	adds	r7, #12
    212a:	46bd      	mov	sp, r7
    212c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2130:	4770      	bx	lr
    2132:	bf00      	nop

00002134 <EXTI_GenerateSWInterrupt>:
  * @param  EXTI_Line: specifies the EXTI lines to be enabled or disabled.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
    2134:	b480      	push	{r7}
    2136:	b083      	sub	sp, #12
    2138:	af00      	add	r7, sp, #0
    213a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->SWIER |= EXTI_Line;
    213c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2140:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2144:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2148:	f2c4 0201 	movt	r2, #16385	; 0x4001
    214c:	6911      	ldr	r1, [r2, #16]
    214e:	687a      	ldr	r2, [r7, #4]
    2150:	430a      	orrs	r2, r1
    2152:	611a      	str	r2, [r3, #16]
}
    2154:	370c      	adds	r7, #12
    2156:	46bd      	mov	sp, r7
    2158:	f85d 7b04 	ldr.w	r7, [sp], #4
    215c:	4770      	bx	lr
    215e:	bf00      	nop

00002160 <EXTI_GetFlagStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
    2160:	b480      	push	{r7}
    2162:	b085      	sub	sp, #20
    2164:	af00      	add	r7, sp, #0
    2166:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    2168:	2300      	movs	r3, #0
    216a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
    216c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2170:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2174:	695a      	ldr	r2, [r3, #20]
    2176:	687b      	ldr	r3, [r7, #4]
    2178:	4013      	ands	r3, r2
    217a:	2b00      	cmp	r3, #0
    217c:	d002      	beq.n	2184 <EXTI_GetFlagStatus+0x24>
  {
    bitstatus = SET;
    217e:	2301      	movs	r3, #1
    2180:	73fb      	strb	r3, [r7, #15]
    2182:	e001      	b.n	2188 <EXTI_GetFlagStatus+0x28>
  }
  else
  {
    bitstatus = RESET;
    2184:	2300      	movs	r3, #0
    2186:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    2188:	7bfb      	ldrb	r3, [r7, #15]
}
    218a:	4618      	mov	r0, r3
    218c:	3714      	adds	r7, #20
    218e:	46bd      	mov	sp, r7
    2190:	f85d 7b04 	ldr.w	r7, [sp], #4
    2194:	4770      	bx	lr
    2196:	bf00      	nop

00002198 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
    2198:	b480      	push	{r7}
    219a:	b083      	sub	sp, #12
    219c:	af00      	add	r7, sp, #0
    219e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    21a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21a4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21a8:	687a      	ldr	r2, [r7, #4]
    21aa:	615a      	str	r2, [r3, #20]
}
    21ac:	370c      	adds	r7, #12
    21ae:	46bd      	mov	sp, r7
    21b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    21b4:	4770      	bx	lr
    21b6:	bf00      	nop

000021b8 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
    21b8:	b480      	push	{r7}
    21ba:	b085      	sub	sp, #20
    21bc:	af00      	add	r7, sp, #0
    21be:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
    21c0:	2300      	movs	r3, #0
    21c2:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
    21c4:	2300      	movs	r3, #0
    21c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  enablestatus =  EXTI->IMR & EXTI_Line;
    21c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21cc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21d0:	681a      	ldr	r2, [r3, #0]
    21d2:	687b      	ldr	r3, [r7, #4]
    21d4:	4013      	ands	r3, r2
    21d6:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
    21d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21dc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21e0:	695a      	ldr	r2, [r3, #20]
    21e2:	687b      	ldr	r3, [r7, #4]
    21e4:	4013      	ands	r3, r2
    21e6:	2b00      	cmp	r3, #0
    21e8:	d005      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
    21ea:	68bb      	ldr	r3, [r7, #8]
    21ec:	2b00      	cmp	r3, #0
    21ee:	d002      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
  {
    bitstatus = SET;
    21f0:	2301      	movs	r3, #1
    21f2:	73fb      	strb	r3, [r7, #15]
    21f4:	e001      	b.n	21fa <EXTI_GetITStatus+0x42>
  }
  else
  {
    bitstatus = RESET;
    21f6:	2300      	movs	r3, #0
    21f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    21fa:	7bfb      	ldrb	r3, [r7, #15]
}
    21fc:	4618      	mov	r0, r3
    21fe:	3714      	adds	r7, #20
    2200:	46bd      	mov	sp, r7
    2202:	f85d 7b04 	ldr.w	r7, [sp], #4
    2206:	4770      	bx	lr

00002208 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
    2208:	b480      	push	{r7}
    220a:	b083      	sub	sp, #12
    220c:	af00      	add	r7, sp, #0
    220e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    2210:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2214:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2218:	687a      	ldr	r2, [r7, #4]
    221a:	615a      	str	r2, [r3, #20]
}
    221c:	370c      	adds	r7, #12
    221e:	46bd      	mov	sp, r7
    2220:	f85d 7b04 	ldr.w	r7, [sp], #4
    2224:	4770      	bx	lr
    2226:	bf00      	nop

00002228 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
    2228:	b480      	push	{r7}
    222a:	b083      	sub	sp, #12
    222c:	af00      	add	r7, sp, #0
    222e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
    2230:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2234:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2238:	687a      	ldr	r2, [r7, #4]
    223a:	f042 62bf 	orr.w	r2, r2, #100139008	; 0x5f80000
    223e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    2242:	60da      	str	r2, [r3, #12]
}
    2244:	370c      	adds	r7, #12
    2246:	46bd      	mov	sp, r7
    2248:	f85d 7b04 	ldr.w	r7, [sp], #4
    224c:	4770      	bx	lr
    224e:	bf00      	nop

00002250 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
    2250:	b480      	push	{r7}
    2252:	b087      	sub	sp, #28
    2254:	af00      	add	r7, sp, #0
    2256:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
    2258:	2300      	movs	r3, #0
    225a:	617b      	str	r3, [r7, #20]
    225c:	2300      	movs	r3, #0
    225e:	613b      	str	r3, [r7, #16]
    2260:	230f      	movs	r3, #15
    2262:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
    2264:	687b      	ldr	r3, [r7, #4]
    2266:	78db      	ldrb	r3, [r3, #3]
    2268:	2b00      	cmp	r3, #0
    226a:	d042      	beq.n	22f2 <NVIC_Init+0xa2>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    226c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2270:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2274:	68db      	ldr	r3, [r3, #12]
    2276:	43db      	mvns	r3, r3
    2278:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    227c:	0a1b      	lsrs	r3, r3, #8
    227e:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
    2280:	697b      	ldr	r3, [r7, #20]
    2282:	f1c3 0304 	rsb	r3, r3, #4
    2286:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
    2288:	697b      	ldr	r3, [r7, #20]
    228a:	68fa      	ldr	r2, [r7, #12]
    228c:	fa22 f303 	lsr.w	r3, r2, r3
    2290:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    2292:	687b      	ldr	r3, [r7, #4]
    2294:	785b      	ldrb	r3, [r3, #1]
    2296:	461a      	mov	r2, r3
    2298:	693b      	ldr	r3, [r7, #16]
    229a:	fa02 f303 	lsl.w	r3, r2, r3
    229e:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
    22a0:	687b      	ldr	r3, [r7, #4]
    22a2:	789b      	ldrb	r3, [r3, #2]
    22a4:	461a      	mov	r2, r3
    22a6:	68fb      	ldr	r3, [r7, #12]
    22a8:	4013      	ands	r3, r2
    22aa:	697a      	ldr	r2, [r7, #20]
    22ac:	4313      	orrs	r3, r2
    22ae:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
    22b0:	697b      	ldr	r3, [r7, #20]
    22b2:	011b      	lsls	r3, r3, #4
    22b4:	617b      	str	r3, [r7, #20]

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    22b6:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22ba:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22be:	687a      	ldr	r2, [r7, #4]
    22c0:	7812      	ldrb	r2, [r2, #0]
    22c2:	4611      	mov	r1, r2
    22c4:	697a      	ldr	r2, [r7, #20]
    22c6:	b2d2      	uxtb	r2, r2
    22c8:	440b      	add	r3, r1
    22ca:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ce:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22d2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22d6:	687a      	ldr	r2, [r7, #4]
    22d8:	7812      	ldrb	r2, [r2, #0]
    22da:	0952      	lsrs	r2, r2, #5
    22dc:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    22de:	6879      	ldr	r1, [r7, #4]
    22e0:	7809      	ldrb	r1, [r1, #0]
    22e2:	f001 011f 	and.w	r1, r1, #31
    22e6:	2001      	movs	r0, #1
    22e8:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    22f0:	e011      	b.n	2316 <NVIC_Init+0xc6>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22f2:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22f6:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22fa:	687a      	ldr	r2, [r7, #4]
    22fc:	7812      	ldrb	r2, [r2, #0]
    22fe:	0952      	lsrs	r2, r2, #5
    2300:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    2302:	6879      	ldr	r1, [r7, #4]
    2304:	7809      	ldrb	r1, [r1, #0]
    2306:	f001 011f 	and.w	r1, r1, #31
    230a:	2001      	movs	r0, #1
    230c:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    2310:	3220      	adds	r2, #32
    2312:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
    2316:	371c      	adds	r7, #28
    2318:	46bd      	mov	sp, r7
    231a:	f85d 7b04 	ldr.w	r7, [sp], #4
    231e:	4770      	bx	lr

00002320 <NVIC_SetVectorTable>:
  * @param  Offset: Vector Table base offset field. This value must be a multiple
  *         of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{
    2320:	b480      	push	{r7}
    2322:	b083      	sub	sp, #12
    2324:	af00      	add	r7, sp, #0
    2326:	6078      	str	r0, [r7, #4]
    2328:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));

  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
    232a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    232e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2332:	683a      	ldr	r2, [r7, #0]
    2334:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
    2338:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    233c:	6879      	ldr	r1, [r7, #4]
    233e:	430a      	orrs	r2, r1
    2340:	609a      	str	r2, [r3, #8]
}
    2342:	370c      	adds	r7, #12
    2344:	46bd      	mov	sp, r7
    2346:	f85d 7b04 	ldr.w	r7, [sp], #4
    234a:	4770      	bx	lr

0000234c <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
    234c:	b480      	push	{r7}
    234e:	b083      	sub	sp, #12
    2350:	af00      	add	r7, sp, #0
    2352:	4602      	mov	r2, r0
    2354:	460b      	mov	r3, r1
    2356:	71fa      	strb	r2, [r7, #7]
    2358:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    235a:	79bb      	ldrb	r3, [r7, #6]
    235c:	2b00      	cmp	r3, #0
    235e:	d00c      	beq.n	237a <NVIC_SystemLPConfig+0x2e>
  {
    SCB->SCR |= LowPowerMode;
    2360:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2364:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2368:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    236c:	f2ce 0200 	movt	r2, #57344	; 0xe000
    2370:	6911      	ldr	r1, [r2, #16]
    2372:	79fa      	ldrb	r2, [r7, #7]
    2374:	430a      	orrs	r2, r1
    2376:	611a      	str	r2, [r3, #16]
    2378:	e00c      	b.n	2394 <NVIC_SystemLPConfig+0x48>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
    237a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    237e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2382:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    2386:	f2ce 0200 	movt	r2, #57344	; 0xe000
    238a:	6911      	ldr	r1, [r2, #16]
    238c:	79fa      	ldrb	r2, [r7, #7]
    238e:	43d2      	mvns	r2, r2
    2390:	400a      	ands	r2, r1
    2392:	611a      	str	r2, [r3, #16]
  }
}
    2394:	370c      	adds	r7, #12
    2396:	46bd      	mov	sp, r7
    2398:	f85d 7b04 	ldr.w	r7, [sp], #4
    239c:	4770      	bx	lr
    239e:	bf00      	nop

000023a0 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
    23a0:	b480      	push	{r7}
    23a2:	b083      	sub	sp, #12
    23a4:	af00      	add	r7, sp, #0
    23a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
    23a8:	687b      	ldr	r3, [r7, #4]
    23aa:	2b04      	cmp	r3, #4
    23ac:	d10c      	bne.n	23c8 <SysTick_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
    23ae:	f24e 0310 	movw	r3, #57360	; 0xe010
    23b2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23b6:	f24e 0210 	movw	r2, #57360	; 0xe010
    23ba:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23be:	6812      	ldr	r2, [r2, #0]
    23c0:	f042 0204 	orr.w	r2, r2, #4
    23c4:	601a      	str	r2, [r3, #0]
    23c6:	e00b      	b.n	23e0 <SysTick_CLKSourceConfig+0x40>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
    23c8:	f24e 0310 	movw	r3, #57360	; 0xe010
    23cc:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23d0:	f24e 0210 	movw	r2, #57360	; 0xe010
    23d4:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23d8:	6812      	ldr	r2, [r2, #0]
    23da:	f022 0204 	bic.w	r2, r2, #4
    23de:	601a      	str	r2, [r3, #0]
  }
}
    23e0:	370c      	adds	r7, #12
    23e2:	46bd      	mov	sp, r7
    23e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    23e8:	4770      	bx	lr
    23ea:	bf00      	nop

000023ec <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
    23ec:	b580      	push	{r7, lr}
    23ee:	b086      	sub	sp, #24
    23f0:	af00      	add	r7, sp, #0
    23f2:	60f8      	str	r0, [r7, #12]
    23f4:	60b9      	str	r1, [r7, #8]
    23f6:	607a      	str	r2, [r7, #4]
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
    23f8:	2038      	movs	r0, #56	; 0x38
    23fa:	f002 f98d 	bl	4718 <pvPortMalloc>
    23fe:	6138      	str	r0, [r7, #16]
	if( pxCoRoutine )
    2400:	693b      	ldr	r3, [r7, #16]
    2402:	2b00      	cmp	r3, #0
    2404:	d058      	beq.n	24b8 <xCoRoutineCreate+0xcc>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
    2406:	f240 13dc 	movw	r3, #476	; 0x1dc
    240a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    240e:	681b      	ldr	r3, [r3, #0]
    2410:	2b00      	cmp	r3, #0
    2412:	d107      	bne.n	2424 <xCoRoutineCreate+0x38>
		{
			pxCurrentCoRoutine = pxCoRoutine;
    2414:	f240 13dc 	movw	r3, #476	; 0x1dc
    2418:	f2c2 0300 	movt	r3, #8192	; 0x2000
    241c:	693a      	ldr	r2, [r7, #16]
    241e:	601a      	str	r2, [r3, #0]
			prvInitialiseCoRoutineLists();
    2420:	f000 fa08 	bl	2834 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
    2424:	68bb      	ldr	r3, [r7, #8]
    2426:	2b01      	cmp	r3, #1
    2428:	d901      	bls.n	242e <xCoRoutineCreate+0x42>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
    242a:	2301      	movs	r3, #1
    242c:	60bb      	str	r3, [r7, #8]
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
    242e:	693b      	ldr	r3, [r7, #16]
    2430:	2200      	movs	r2, #0
    2432:	869a      	strh	r2, [r3, #52]	; 0x34
		pxCoRoutine->uxPriority = uxPriority;
    2434:	693b      	ldr	r3, [r7, #16]
    2436:	68ba      	ldr	r2, [r7, #8]
    2438:	62da      	str	r2, [r3, #44]	; 0x2c
		pxCoRoutine->uxIndex = uxIndex;
    243a:	693b      	ldr	r3, [r7, #16]
    243c:	687a      	ldr	r2, [r7, #4]
    243e:	631a      	str	r2, [r3, #48]	; 0x30
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    2440:	693b      	ldr	r3, [r7, #16]
    2442:	68fa      	ldr	r2, [r7, #12]
    2444:	601a      	str	r2, [r3, #0]

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    2446:	693b      	ldr	r3, [r7, #16]
    2448:	3304      	adds	r3, #4
    244a:	4618      	mov	r0, r3
    244c:	f000 fa7c 	bl	2948 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    2450:	693b      	ldr	r3, [r7, #16]
    2452:	3318      	adds	r3, #24
    2454:	4618      	mov	r0, r3
    2456:	f000 fa77 	bl	2948 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    245a:	693b      	ldr	r3, [r7, #16]
    245c:	693a      	ldr	r2, [r7, #16]
    245e:	611a      	str	r2, [r3, #16]
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    2460:	693b      	ldr	r3, [r7, #16]
    2462:	693a      	ldr	r2, [r7, #16]
    2464:	625a      	str	r2, [r3, #36]	; 0x24
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    2466:	68bb      	ldr	r3, [r7, #8]
    2468:	f1c3 0205 	rsb	r2, r3, #5
    246c:	693b      	ldr	r3, [r7, #16]
    246e:	619a      	str	r2, [r3, #24]
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
    2470:	693b      	ldr	r3, [r7, #16]
    2472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2474:	f240 13e0 	movw	r3, #480	; 0x1e0
    2478:	f2c2 0300 	movt	r3, #8192	; 0x2000
    247c:	681b      	ldr	r3, [r3, #0]
    247e:	429a      	cmp	r2, r3
    2480:	d906      	bls.n	2490 <xCoRoutineCreate+0xa4>
    2482:	693b      	ldr	r3, [r7, #16]
    2484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2486:	f240 13e0 	movw	r3, #480	; 0x1e0
    248a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    248e:	601a      	str	r2, [r3, #0]
    2490:	693b      	ldr	r3, [r7, #16]
    2492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2494:	4613      	mov	r3, r2
    2496:	009b      	lsls	r3, r3, #2
    2498:	4413      	add	r3, r2
    249a:	009b      	lsls	r3, r3, #2
    249c:	f240 1270 	movw	r2, #368	; 0x170
    24a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    24a4:	441a      	add	r2, r3
    24a6:	693b      	ldr	r3, [r7, #16]
    24a8:	3304      	adds	r3, #4
    24aa:	4610      	mov	r0, r2
    24ac:	4619      	mov	r1, r3
    24ae:	f000 fa57 	bl	2960 <vListInsertEnd>

		xReturn = pdPASS;
    24b2:	2301      	movs	r3, #1
    24b4:	617b      	str	r3, [r7, #20]
    24b6:	e002      	b.n	24be <xCoRoutineCreate+0xd2>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    24b8:	f04f 33ff 	mov.w	r3, #4294967295
    24bc:	617b      	str	r3, [r7, #20]
	}
	
	return xReturn;	
    24be:	697b      	ldr	r3, [r7, #20]
}
    24c0:	4618      	mov	r0, r3
    24c2:	3718      	adds	r7, #24
    24c4:	46bd      	mov	sp, r7
    24c6:	bd80      	pop	{r7, pc}

000024c8 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
    24c8:	b580      	push	{r7, lr}
    24ca:	b084      	sub	sp, #16
    24cc:	af00      	add	r7, sp, #0
    24ce:	6078      	str	r0, [r7, #4]
    24d0:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    24d2:	f240 13e4 	movw	r3, #484	; 0x1e4
    24d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24da:	681a      	ldr	r2, [r3, #0]
    24dc:	687b      	ldr	r3, [r7, #4]
    24de:	4413      	add	r3, r2
    24e0:	60fb      	str	r3, [r7, #12]

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    24e2:	f240 13dc 	movw	r3, #476	; 0x1dc
    24e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24ea:	681b      	ldr	r3, [r3, #0]
    24ec:	3304      	adds	r3, #4
    24ee:	4618      	mov	r0, r3
    24f0:	f000 fa96 	bl	2a20 <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    24f4:	f240 13dc 	movw	r3, #476	; 0x1dc
    24f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24fc:	681b      	ldr	r3, [r3, #0]
    24fe:	68fa      	ldr	r2, [r7, #12]
    2500:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xCoRoutineTickCount )
    2502:	f240 13e4 	movw	r3, #484	; 0x1e4
    2506:	f2c2 0300 	movt	r3, #8192	; 0x2000
    250a:	681b      	ldr	r3, [r3, #0]
    250c:	68fa      	ldr	r2, [r7, #12]
    250e:	429a      	cmp	r2, r3
    2510:	d20f      	bcs.n	2532 <vCoRoutineAddToDelayedList+0x6a>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2512:	f240 13c4 	movw	r3, #452	; 0x1c4
    2516:	f2c2 0300 	movt	r3, #8192	; 0x2000
    251a:	681a      	ldr	r2, [r3, #0]
    251c:	f240 13dc 	movw	r3, #476	; 0x1dc
    2520:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2524:	681b      	ldr	r3, [r3, #0]
    2526:	3304      	adds	r3, #4
    2528:	4610      	mov	r0, r2
    252a:	4619      	mov	r1, r3
    252c:	f000 fa40 	bl	29b0 <vListInsert>
    2530:	e00e      	b.n	2550 <vCoRoutineAddToDelayedList+0x88>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2532:	f240 13c0 	movw	r3, #448	; 0x1c0
    2536:	f2c2 0300 	movt	r3, #8192	; 0x2000
    253a:	681a      	ldr	r2, [r3, #0]
    253c:	f240 13dc 	movw	r3, #476	; 0x1dc
    2540:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2544:	681b      	ldr	r3, [r3, #0]
    2546:	3304      	adds	r3, #4
    2548:	4610      	mov	r0, r2
    254a:	4619      	mov	r1, r3
    254c:	f000 fa30 	bl	29b0 <vListInsert>
	}

	if( pxEventList )
    2550:	683b      	ldr	r3, [r7, #0]
    2552:	2b00      	cmp	r3, #0
    2554:	d009      	beq.n	256a <vCoRoutineAddToDelayedList+0xa2>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    2556:	f240 13dc 	movw	r3, #476	; 0x1dc
    255a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    255e:	681b      	ldr	r3, [r3, #0]
    2560:	3318      	adds	r3, #24
    2562:	6838      	ldr	r0, [r7, #0]
    2564:	4619      	mov	r1, r3
    2566:	f000 fa23 	bl	29b0 <vListInsert>
	}
}
    256a:	3710      	adds	r7, #16
    256c:	46bd      	mov	sp, r7
    256e:	bd80      	pop	{r7, pc}

00002570 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
    2570:	b580      	push	{r7, lr}
    2572:	b082      	sub	sp, #8
    2574:	af00      	add	r7, sp, #0
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    2576:	e039      	b.n	25ec <prvCheckPendingReadyList+0x7c>
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
    2578:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    257c:	f380 8811 	msr	BASEPRI, r0
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
    2580:	f240 13c8 	movw	r3, #456	; 0x1c8
    2584:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2588:	68db      	ldr	r3, [r3, #12]
    258a:	68db      	ldr	r3, [r3, #12]
    258c:	607b      	str	r3, [r7, #4]
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    258e:	687b      	ldr	r3, [r7, #4]
    2590:	3318      	adds	r3, #24
    2592:	4618      	mov	r0, r3
    2594:	f000 fa44 	bl	2a20 <vListRemove>
		}
		portENABLE_INTERRUPTS();
    2598:	f04f 0000 	mov.w	r0, #0
    259c:	f380 8811 	msr	BASEPRI, r0

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    25a0:	687b      	ldr	r3, [r7, #4]
    25a2:	3304      	adds	r3, #4
    25a4:	4618      	mov	r0, r3
    25a6:	f000 fa3b 	bl	2a20 <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    25aa:	687b      	ldr	r3, [r7, #4]
    25ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25ae:	f240 13e0 	movw	r3, #480	; 0x1e0
    25b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25b6:	681b      	ldr	r3, [r3, #0]
    25b8:	429a      	cmp	r2, r3
    25ba:	d906      	bls.n	25ca <prvCheckPendingReadyList+0x5a>
    25bc:	687b      	ldr	r3, [r7, #4]
    25be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25c0:	f240 13e0 	movw	r3, #480	; 0x1e0
    25c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25c8:	601a      	str	r2, [r3, #0]
    25ca:	687b      	ldr	r3, [r7, #4]
    25cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25ce:	4613      	mov	r3, r2
    25d0:	009b      	lsls	r3, r3, #2
    25d2:	4413      	add	r3, r2
    25d4:	009b      	lsls	r3, r3, #2
    25d6:	f240 1270 	movw	r2, #368	; 0x170
    25da:	f2c2 0200 	movt	r2, #8192	; 0x2000
    25de:	441a      	add	r2, r3
    25e0:	687b      	ldr	r3, [r7, #4]
    25e2:	3304      	adds	r3, #4
    25e4:	4610      	mov	r0, r2
    25e6:	4619      	mov	r1, r3
    25e8:	f000 f9ba 	bl	2960 <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    25ec:	f240 13c8 	movw	r3, #456	; 0x1c8
    25f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25f4:	681b      	ldr	r3, [r3, #0]
    25f6:	2b00      	cmp	r3, #0
    25f8:	d1be      	bne.n	2578 <prvCheckPendingReadyList+0x8>
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
    25fa:	3708      	adds	r7, #8
    25fc:	46bd      	mov	sp, r7
    25fe:	bd80      	pop	{r7, pc}

00002600 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
    2600:	b580      	push	{r7, lr}
    2602:	b082      	sub	sp, #8
    2604:	af00      	add	r7, sp, #0
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    2606:	f001 fafd 	bl	3c04 <xTaskGetTickCount>
    260a:	4602      	mov	r2, r0
    260c:	f240 13e8 	movw	r3, #488	; 0x1e8
    2610:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2614:	681b      	ldr	r3, [r3, #0]
    2616:	1ad2      	subs	r2, r2, r3
    2618:	f240 13ec 	movw	r3, #492	; 0x1ec
    261c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2620:	601a      	str	r2, [r3, #0]
	while( xPassedTicks )
    2622:	e085      	b.n	2730 <prvCheckDelayedList+0x130>
	{
		xCoRoutineTickCount++;
    2624:	f240 13e4 	movw	r3, #484	; 0x1e4
    2628:	f2c2 0300 	movt	r3, #8192	; 0x2000
    262c:	681b      	ldr	r3, [r3, #0]
    262e:	1c5a      	adds	r2, r3, #1
    2630:	f240 13e4 	movw	r3, #484	; 0x1e4
    2634:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2638:	601a      	str	r2, [r3, #0]
		xPassedTicks--;
    263a:	f240 13ec 	movw	r3, #492	; 0x1ec
    263e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2642:	681b      	ldr	r3, [r3, #0]
    2644:	1e5a      	subs	r2, r3, #1
    2646:	f240 13ec 	movw	r3, #492	; 0x1ec
    264a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    264e:	601a      	str	r2, [r3, #0]

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
    2650:	f240 13e4 	movw	r3, #484	; 0x1e4
    2654:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2658:	681b      	ldr	r3, [r3, #0]
    265a:	2b00      	cmp	r3, #0
    265c:	d116      	bne.n	268c <prvCheckDelayedList+0x8c>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
    265e:	f240 13c0 	movw	r3, #448	; 0x1c0
    2662:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2666:	681b      	ldr	r3, [r3, #0]
    2668:	607b      	str	r3, [r7, #4]
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    266a:	f240 13c4 	movw	r3, #452	; 0x1c4
    266e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2672:	681a      	ldr	r2, [r3, #0]
    2674:	f240 13c0 	movw	r3, #448	; 0x1c0
    2678:	f2c2 0300 	movt	r3, #8192	; 0x2000
    267c:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedCoRoutineList = pxTemp;
    267e:	f240 13c4 	movw	r3, #452	; 0x1c4
    2682:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2686:	687a      	ldr	r2, [r7, #4]
    2688:	601a      	str	r2, [r3, #0]
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    268a:	e049      	b.n	2720 <prvCheckDelayedList+0x120>
    268c:	e048      	b.n	2720 <prvCheckDelayedList+0x120>
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    268e:	f240 13c0 	movw	r3, #448	; 0x1c0
    2692:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2696:	681b      	ldr	r3, [r3, #0]
    2698:	68db      	ldr	r3, [r3, #12]
    269a:	68db      	ldr	r3, [r3, #12]
    269c:	603b      	str	r3, [r7, #0]

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
    269e:	683b      	ldr	r3, [r7, #0]
    26a0:	685a      	ldr	r2, [r3, #4]
    26a2:	f240 13e4 	movw	r3, #484	; 0x1e4
    26a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26aa:	681b      	ldr	r3, [r3, #0]
    26ac:	429a      	cmp	r2, r3
    26ae:	d900      	bls.n	26b2 <prvCheckDelayedList+0xb2>
			{			
				/* Timeout not yet expired. */																			
				break;																				
    26b0:	e03e      	b.n	2730 <prvCheckDelayedList+0x130>
			}																						

			portDISABLE_INTERRUPTS();
    26b2:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    26b6:	f380 8811 	msr	BASEPRI, r0
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
    26ba:	683b      	ldr	r3, [r7, #0]
    26bc:	3304      	adds	r3, #4
    26be:	4618      	mov	r0, r3
    26c0:	f000 f9ae 	bl	2a20 <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
    26c4:	683b      	ldr	r3, [r7, #0]
    26c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    26c8:	2b00      	cmp	r3, #0
    26ca:	d004      	beq.n	26d6 <prvCheckDelayedList+0xd6>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
    26cc:	683b      	ldr	r3, [r7, #0]
    26ce:	3318      	adds	r3, #24
    26d0:	4618      	mov	r0, r3
    26d2:	f000 f9a5 	bl	2a20 <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    26d6:	f04f 0000 	mov.w	r0, #0
    26da:	f380 8811 	msr	BASEPRI, r0

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    26de:	683b      	ldr	r3, [r7, #0]
    26e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    26e2:	f240 13e0 	movw	r3, #480	; 0x1e0
    26e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26ea:	681b      	ldr	r3, [r3, #0]
    26ec:	429a      	cmp	r2, r3
    26ee:	d906      	bls.n	26fe <prvCheckDelayedList+0xfe>
    26f0:	683b      	ldr	r3, [r7, #0]
    26f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    26f4:	f240 13e0 	movw	r3, #480	; 0x1e0
    26f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26fc:	601a      	str	r2, [r3, #0]
    26fe:	683b      	ldr	r3, [r7, #0]
    2700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2702:	4613      	mov	r3, r2
    2704:	009b      	lsls	r3, r3, #2
    2706:	4413      	add	r3, r2
    2708:	009b      	lsls	r3, r3, #2
    270a:	f240 1270 	movw	r2, #368	; 0x170
    270e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2712:	441a      	add	r2, r3
    2714:	683b      	ldr	r3, [r7, #0]
    2716:	3304      	adds	r3, #4
    2718:	4610      	mov	r0, r2
    271a:	4619      	mov	r1, r3
    271c:	f000 f920 	bl	2960 <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    2720:	f240 13c0 	movw	r3, #448	; 0x1c0
    2724:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2728:	681b      	ldr	r3, [r3, #0]
    272a:	681b      	ldr	r3, [r3, #0]
    272c:	2b00      	cmp	r3, #0
    272e:	d1ae      	bne.n	268e <prvCheckDelayedList+0x8e>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    2730:	f240 13ec 	movw	r3, #492	; 0x1ec
    2734:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2738:	681b      	ldr	r3, [r3, #0]
    273a:	2b00      	cmp	r3, #0
    273c:	f47f af72 	bne.w	2624 <prvCheckDelayedList+0x24>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
    2740:	f240 13e4 	movw	r3, #484	; 0x1e4
    2744:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2748:	681a      	ldr	r2, [r3, #0]
    274a:	f240 13e8 	movw	r3, #488	; 0x1e8
    274e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2752:	601a      	str	r2, [r3, #0]
}
    2754:	3708      	adds	r7, #8
    2756:	46bd      	mov	sp, r7
    2758:	bd80      	pop	{r7, pc}
    275a:	bf00      	nop

0000275c <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    275c:	b580      	push	{r7, lr}
    275e:	b082      	sub	sp, #8
    2760:	af00      	add	r7, sp, #0
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
    2762:	f7ff ff05 	bl	2570 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
    2766:	f7ff ff4b 	bl	2600 <prvCheckDelayedList>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    276a:	e012      	b.n	2792 <vCoRoutineSchedule+0x36>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    276c:	f240 13e0 	movw	r3, #480	; 0x1e0
    2770:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2774:	681b      	ldr	r3, [r3, #0]
    2776:	2b00      	cmp	r3, #0
    2778:	d100      	bne.n	277c <vCoRoutineSchedule+0x20>
		{
			/* No more co-routines to check. */
			return;
    277a:	e057      	b.n	282c <vCoRoutineSchedule+0xd0>
		}
		--uxTopCoRoutineReadyPriority;
    277c:	f240 13e0 	movw	r3, #480	; 0x1e0
    2780:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2784:	681b      	ldr	r3, [r3, #0]
    2786:	1e5a      	subs	r2, r3, #1
    2788:	f240 13e0 	movw	r3, #480	; 0x1e0
    278c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2790:	601a      	str	r2, [r3, #0]

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    2792:	f240 13e0 	movw	r3, #480	; 0x1e0
    2796:	f2c2 0300 	movt	r3, #8192	; 0x2000
    279a:	6819      	ldr	r1, [r3, #0]
    279c:	f240 1270 	movw	r2, #368	; 0x170
    27a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27a4:	460b      	mov	r3, r1
    27a6:	009b      	lsls	r3, r3, #2
    27a8:	440b      	add	r3, r1
    27aa:	009b      	lsls	r3, r3, #2
    27ac:	4413      	add	r3, r2
    27ae:	681b      	ldr	r3, [r3, #0]
    27b0:	2b00      	cmp	r3, #0
    27b2:	d0db      	beq.n	276c <vCoRoutineSchedule+0x10>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    27b4:	f240 13e0 	movw	r3, #480	; 0x1e0
    27b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27bc:	681a      	ldr	r2, [r3, #0]
    27be:	4613      	mov	r3, r2
    27c0:	009b      	lsls	r3, r3, #2
    27c2:	4413      	add	r3, r2
    27c4:	009b      	lsls	r3, r3, #2
    27c6:	f240 1270 	movw	r2, #368	; 0x170
    27ca:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27ce:	4413      	add	r3, r2
    27d0:	607b      	str	r3, [r7, #4]
    27d2:	687b      	ldr	r3, [r7, #4]
    27d4:	685b      	ldr	r3, [r3, #4]
    27d6:	685a      	ldr	r2, [r3, #4]
    27d8:	687b      	ldr	r3, [r7, #4]
    27da:	605a      	str	r2, [r3, #4]
    27dc:	687b      	ldr	r3, [r7, #4]
    27de:	685a      	ldr	r2, [r3, #4]
    27e0:	687b      	ldr	r3, [r7, #4]
    27e2:	3308      	adds	r3, #8
    27e4:	429a      	cmp	r2, r3
    27e6:	d104      	bne.n	27f2 <vCoRoutineSchedule+0x96>
    27e8:	687b      	ldr	r3, [r7, #4]
    27ea:	685b      	ldr	r3, [r3, #4]
    27ec:	685a      	ldr	r2, [r3, #4]
    27ee:	687b      	ldr	r3, [r7, #4]
    27f0:	605a      	str	r2, [r3, #4]
    27f2:	687b      	ldr	r3, [r7, #4]
    27f4:	685b      	ldr	r3, [r3, #4]
    27f6:	68da      	ldr	r2, [r3, #12]
    27f8:	f240 13dc 	movw	r3, #476	; 0x1dc
    27fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2800:	601a      	str	r2, [r3, #0]

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    2802:	f240 13dc 	movw	r3, #476	; 0x1dc
    2806:	f2c2 0300 	movt	r3, #8192	; 0x2000
    280a:	681b      	ldr	r3, [r3, #0]
    280c:	681a      	ldr	r2, [r3, #0]
    280e:	f240 13dc 	movw	r3, #476	; 0x1dc
    2812:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2816:	6819      	ldr	r1, [r3, #0]
    2818:	f240 13dc 	movw	r3, #476	; 0x1dc
    281c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2820:	681b      	ldr	r3, [r3, #0]
    2822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2824:	4608      	mov	r0, r1
    2826:	4619      	mov	r1, r3
    2828:	4790      	blx	r2

	return;
    282a:	bf00      	nop
}
    282c:	3708      	adds	r7, #8
    282e:	46bd      	mov	sp, r7
    2830:	bd80      	pop	{r7, pc}
    2832:	bf00      	nop

00002834 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
    2834:	b580      	push	{r7, lr}
    2836:	b082      	sub	sp, #8
    2838:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    283a:	2300      	movs	r3, #0
    283c:	607b      	str	r3, [r7, #4]
    283e:	e00f      	b.n	2860 <prvInitialiseCoRoutineLists+0x2c>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    2840:	687a      	ldr	r2, [r7, #4]
    2842:	4613      	mov	r3, r2
    2844:	009b      	lsls	r3, r3, #2
    2846:	4413      	add	r3, r2
    2848:	009b      	lsls	r3, r3, #2
    284a:	f240 1270 	movw	r2, #368	; 0x170
    284e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2852:	4413      	add	r3, r2
    2854:	4618      	mov	r0, r3
    2856:	f000 f857 	bl	2908 <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    285a:	687b      	ldr	r3, [r7, #4]
    285c:	3301      	adds	r3, #1
    285e:	607b      	str	r3, [r7, #4]
    2860:	687b      	ldr	r3, [r7, #4]
    2862:	2b01      	cmp	r3, #1
    2864:	d9ec      	bls.n	2840 <prvInitialiseCoRoutineLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
    2866:	f240 1098 	movw	r0, #408	; 0x198
    286a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    286e:	f000 f84b 	bl	2908 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
    2872:	f240 10ac 	movw	r0, #428	; 0x1ac
    2876:	f2c2 0000 	movt	r0, #8192	; 0x2000
    287a:	f000 f845 	bl	2908 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
    287e:	f240 10c8 	movw	r0, #456	; 0x1c8
    2882:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2886:	f000 f83f 	bl	2908 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    288a:	f240 13c0 	movw	r3, #448	; 0x1c0
    288e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2892:	f240 1298 	movw	r2, #408	; 0x198
    2896:	f2c2 0200 	movt	r2, #8192	; 0x2000
    289a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    289c:	f240 13c4 	movw	r3, #452	; 0x1c4
    28a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28a4:	f240 12ac 	movw	r2, #428	; 0x1ac
    28a8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    28ac:	601a      	str	r2, [r3, #0]
}
    28ae:	3708      	adds	r7, #8
    28b0:	46bd      	mov	sp, r7
    28b2:	bd80      	pop	{r7, pc}

000028b4 <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
    28b4:	b580      	push	{r7, lr}
    28b6:	b084      	sub	sp, #16
    28b8:	af00      	add	r7, sp, #0
    28ba:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    28bc:	687b      	ldr	r3, [r7, #4]
    28be:	68db      	ldr	r3, [r3, #12]
    28c0:	68db      	ldr	r3, [r3, #12]
    28c2:	60bb      	str	r3, [r7, #8]
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    28c4:	68bb      	ldr	r3, [r7, #8]
    28c6:	3318      	adds	r3, #24
    28c8:	4618      	mov	r0, r3
    28ca:	f000 f8a9 	bl	2a20 <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    28ce:	68bb      	ldr	r3, [r7, #8]
    28d0:	3318      	adds	r3, #24
    28d2:	f240 10c8 	movw	r0, #456	; 0x1c8
    28d6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    28da:	4619      	mov	r1, r3
    28dc:	f000 f840 	bl	2960 <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
    28e0:	68bb      	ldr	r3, [r7, #8]
    28e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    28e4:	f240 13dc 	movw	r3, #476	; 0x1dc
    28e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28ec:	681b      	ldr	r3, [r3, #0]
    28ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    28f0:	429a      	cmp	r2, r3
    28f2:	d302      	bcc.n	28fa <xCoRoutineRemoveFromEventList+0x46>
	{
		xReturn = pdTRUE;
    28f4:	2301      	movs	r3, #1
    28f6:	60fb      	str	r3, [r7, #12]
    28f8:	e001      	b.n	28fe <xCoRoutineRemoveFromEventList+0x4a>
	}
	else
	{
		xReturn = pdFALSE;
    28fa:	2300      	movs	r3, #0
    28fc:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    28fe:	68fb      	ldr	r3, [r7, #12]
}
    2900:	4618      	mov	r0, r3
    2902:	3710      	adds	r7, #16
    2904:	46bd      	mov	sp, r7
    2906:	bd80      	pop	{r7, pc}

00002908 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    2908:	b480      	push	{r7}
    290a:	b083      	sub	sp, #12
    290c:	af00      	add	r7, sp, #0
    290e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    2910:	687b      	ldr	r3, [r7, #4]
    2912:	f103 0208 	add.w	r2, r3, #8
    2916:	687b      	ldr	r3, [r7, #4]
    2918:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    291a:	687b      	ldr	r3, [r7, #4]
    291c:	f04f 32ff 	mov.w	r2, #4294967295
    2920:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    2922:	687b      	ldr	r3, [r7, #4]
    2924:	f103 0208 	add.w	r2, r3, #8
    2928:	687b      	ldr	r3, [r7, #4]
    292a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    292c:	687b      	ldr	r3, [r7, #4]
    292e:	f103 0208 	add.w	r2, r3, #8
    2932:	687b      	ldr	r3, [r7, #4]
    2934:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    2936:	687b      	ldr	r3, [r7, #4]
    2938:	2200      	movs	r2, #0
    293a:	601a      	str	r2, [r3, #0]
}
    293c:	370c      	adds	r7, #12
    293e:	46bd      	mov	sp, r7
    2940:	f85d 7b04 	ldr.w	r7, [sp], #4
    2944:	4770      	bx	lr
    2946:	bf00      	nop

00002948 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
    2948:	b480      	push	{r7}
    294a:	b083      	sub	sp, #12
    294c:	af00      	add	r7, sp, #0
    294e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    2950:	687b      	ldr	r3, [r7, #4]
    2952:	2200      	movs	r2, #0
    2954:	611a      	str	r2, [r3, #16]
}
    2956:	370c      	adds	r7, #12
    2958:	46bd      	mov	sp, r7
    295a:	f85d 7b04 	ldr.w	r7, [sp], #4
    295e:	4770      	bx	lr

00002960 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    2960:	b480      	push	{r7}
    2962:	b085      	sub	sp, #20
    2964:	af00      	add	r7, sp, #0
    2966:	6078      	str	r0, [r7, #4]
    2968:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    296a:	687b      	ldr	r3, [r7, #4]
    296c:	685b      	ldr	r3, [r3, #4]
    296e:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
    2970:	68fb      	ldr	r3, [r7, #12]
    2972:	685a      	ldr	r2, [r3, #4]
    2974:	683b      	ldr	r3, [r7, #0]
    2976:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
    2978:	687b      	ldr	r3, [r7, #4]
    297a:	685a      	ldr	r2, [r3, #4]
    297c:	683b      	ldr	r3, [r7, #0]
    297e:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2980:	68fb      	ldr	r3, [r7, #12]
    2982:	685b      	ldr	r3, [r3, #4]
    2984:	683a      	ldr	r2, [r7, #0]
    2986:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    2988:	68fb      	ldr	r3, [r7, #12]
    298a:	683a      	ldr	r2, [r7, #0]
    298c:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    298e:	687b      	ldr	r3, [r7, #4]
    2990:	683a      	ldr	r2, [r7, #0]
    2992:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2994:	683b      	ldr	r3, [r7, #0]
    2996:	687a      	ldr	r2, [r7, #4]
    2998:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    299a:	687b      	ldr	r3, [r7, #4]
    299c:	681b      	ldr	r3, [r3, #0]
    299e:	1c5a      	adds	r2, r3, #1
    29a0:	687b      	ldr	r3, [r7, #4]
    29a2:	601a      	str	r2, [r3, #0]
}
    29a4:	3714      	adds	r7, #20
    29a6:	46bd      	mov	sp, r7
    29a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    29ac:	4770      	bx	lr
    29ae:	bf00      	nop

000029b0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    29b0:	b480      	push	{r7}
    29b2:	b085      	sub	sp, #20
    29b4:	af00      	add	r7, sp, #0
    29b6:	6078      	str	r0, [r7, #4]
    29b8:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    29ba:	683b      	ldr	r3, [r7, #0]
    29bc:	681b      	ldr	r3, [r3, #0]
    29be:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    29c0:	68bb      	ldr	r3, [r7, #8]
    29c2:	f1b3 3fff 	cmp.w	r3, #4294967295
    29c6:	d103      	bne.n	29d0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    29c8:	687b      	ldr	r3, [r7, #4]
    29ca:	691b      	ldr	r3, [r3, #16]
    29cc:	60fb      	str	r3, [r7, #12]
    29ce:	e00c      	b.n	29ea <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    29d0:	687b      	ldr	r3, [r7, #4]
    29d2:	3308      	adds	r3, #8
    29d4:	60fb      	str	r3, [r7, #12]
    29d6:	e002      	b.n	29de <vListInsert+0x2e>
    29d8:	68fb      	ldr	r3, [r7, #12]
    29da:	685b      	ldr	r3, [r3, #4]
    29dc:	60fb      	str	r3, [r7, #12]
    29de:	68fb      	ldr	r3, [r7, #12]
    29e0:	685b      	ldr	r3, [r3, #4]
    29e2:	681a      	ldr	r2, [r3, #0]
    29e4:	68bb      	ldr	r3, [r7, #8]
    29e6:	429a      	cmp	r2, r3
    29e8:	d9f6      	bls.n	29d8 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    29ea:	68fb      	ldr	r3, [r7, #12]
    29ec:	685a      	ldr	r2, [r3, #4]
    29ee:	683b      	ldr	r3, [r7, #0]
    29f0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    29f2:	683b      	ldr	r3, [r7, #0]
    29f4:	685b      	ldr	r3, [r3, #4]
    29f6:	683a      	ldr	r2, [r7, #0]
    29f8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    29fa:	683b      	ldr	r3, [r7, #0]
    29fc:	68fa      	ldr	r2, [r7, #12]
    29fe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    2a00:	68fb      	ldr	r3, [r7, #12]
    2a02:	683a      	ldr	r2, [r7, #0]
    2a04:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2a06:	683b      	ldr	r3, [r7, #0]
    2a08:	687a      	ldr	r2, [r7, #4]
    2a0a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    2a0c:	687b      	ldr	r3, [r7, #4]
    2a0e:	681b      	ldr	r3, [r3, #0]
    2a10:	1c5a      	adds	r2, r3, #1
    2a12:	687b      	ldr	r3, [r7, #4]
    2a14:	601a      	str	r2, [r3, #0]
}
    2a16:	3714      	adds	r7, #20
    2a18:	46bd      	mov	sp, r7
    2a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a1e:	4770      	bx	lr

00002a20 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    2a20:	b480      	push	{r7}
    2a22:	b085      	sub	sp, #20
    2a24:	af00      	add	r7, sp, #0
    2a26:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    2a28:	687b      	ldr	r3, [r7, #4]
    2a2a:	685b      	ldr	r3, [r3, #4]
    2a2c:	687a      	ldr	r2, [r7, #4]
    2a2e:	6892      	ldr	r2, [r2, #8]
    2a30:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    2a32:	687b      	ldr	r3, [r7, #4]
    2a34:	689b      	ldr	r3, [r3, #8]
    2a36:	687a      	ldr	r2, [r7, #4]
    2a38:	6852      	ldr	r2, [r2, #4]
    2a3a:	605a      	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    2a3c:	687b      	ldr	r3, [r7, #4]
    2a3e:	691b      	ldr	r3, [r3, #16]
    2a40:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    2a42:	68fb      	ldr	r3, [r7, #12]
    2a44:	685a      	ldr	r2, [r3, #4]
    2a46:	687b      	ldr	r3, [r7, #4]
    2a48:	429a      	cmp	r2, r3
    2a4a:	d103      	bne.n	2a54 <vListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    2a4c:	687b      	ldr	r3, [r7, #4]
    2a4e:	689a      	ldr	r2, [r3, #8]
    2a50:	68fb      	ldr	r3, [r7, #12]
    2a52:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
    2a54:	687b      	ldr	r3, [r7, #4]
    2a56:	2200      	movs	r2, #0
    2a58:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
    2a5a:	68fb      	ldr	r3, [r7, #12]
    2a5c:	681b      	ldr	r3, [r3, #0]
    2a5e:	1e5a      	subs	r2, r3, #1
    2a60:	68fb      	ldr	r3, [r7, #12]
    2a62:	601a      	str	r2, [r3, #0]
}
    2a64:	3714      	adds	r7, #20
    2a66:	46bd      	mov	sp, r7
    2a68:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a6c:	4770      	bx	lr
    2a6e:	bf00      	nop

00002a70 <vTask_0>:
extern void  send_mode();
extern void  send_debug();
extern void  send_nav_ref();

void vTask_0()
{
    2a70:	b580      	push	{r7, lr}
    2a72:	af00      	add	r7, sp, #0
    last_radio_from_ppm(); //ppm.h
    2a74:	f011 ffa0 	bl	149b8 <last_radio_from_ppm>
}
    2a78:	bd80      	pop	{r7, pc}
    2a7a:	bf00      	nop

00002a7c <vTask_1>:

void vTask_1()
{
    2a7c:	b580      	push	{r7, lr}
    2a7e:	af00      	add	r7, sp, #0
    to_autopilot_from_last_radio();  //main_auto.c
    2a80:	f012 fb54 	bl	1512c <to_autopilot_from_last_radio>
    spi_reset(); // spi_fbw.h
    2a84:	f012 fa90 	bl	14fa8 <spi_reset>
}
    2a88:	bd80      	pop	{r7, pc}
    2a8a:	bf00      	nop

00002a8c <vTask_2>:

void vTask_2()
{
    2a8c:	b580      	push	{r7, lr}
    2a8e:	af00      	add	r7, sp, #0
    check_mega128_values_task(); // main_auto.c
    2a90:	f012 fc94 	bl	153bc <check_mega128_values_task>
}
    2a94:	bd80      	pop	{r7, pc}
    2a96:	bf00      	nop

00002a98 <vTask_3>:

void vTask_3()
{
    2a98:	b580      	push	{r7, lr}
    2a9a:	af00      	add	r7, sp, #0
    servo_transmit(); //servo.h
    2a9c:	f012 fd66 	bl	1556c <servo_transmit>
}
    2aa0:	bd80      	pop	{r7, pc}
    2aa2:	bf00      	nop

00002aa4 <vTask_4>:

void vTask_4()
{
    2aa4:	b580      	push	{r7, lr}
    2aa6:	af00      	add	r7, sp, #0
    check_failsafe_task(); //main_auto.c
    2aa8:	f012 fc7e 	bl	153a8 <check_failsafe_task>
}
    2aac:	bd80      	pop	{r7, pc}
    2aae:	bf00      	nop

00002ab0 <vTask_5>:

void vTask_5()
{
    2ab0:	b580      	push	{r7, lr}
    2ab2:	af00      	add	r7, sp, #0
    radio_control_task(); //main_auto.c
    2ab4:	f008 ff12 	bl	b8dc <radio_control_task>
    ir_gain_calib();
    2ab8:	f00d fdc2 	bl	10640 <ir_gain_calib>
}
    2abc:	bd80      	pop	{r7, pc}
    2abe:	bf00      	nop

00002ac0 <vTask_6>:

void vTask_6()
{
    2ac0:	b580      	push	{r7, lr}
    2ac2:	af00      	add	r7, sp, #0
    ir_update();
    2ac4:	f00d fd7e 	bl	105c4 <ir_update>
    estimator_update_state_infrared();
    2ac8:	f011 f804 	bl	13ad4 <estimator_update_state_infrared>
    roll_pitch_pid_run();
    2acc:	f00d fde8 	bl	106a0 <roll_pitch_pid_run>
}
    2ad0:	bd80      	pop	{r7, pc}
    2ad2:	bf00      	nop

00002ad4 <vTask_7>:

void vTask_7()
{
    2ad4:	b580      	push	{r7, lr}
    2ad6:	af00      	add	r7, sp, #0
    link_fbw_send(); // link_fbw.h
    2ad8:	f00c ffe6 	bl	faa8 <link_fbw_send>
}
    2adc:	bd80      	pop	{r7, pc}
    2ade:	bf00      	nop

00002ae0 <vTask_8>:

void vTask_8()
{
    2ae0:	b580      	push	{r7, lr}
    2ae2:	af00      	add	r7, sp, #0
    parse_gps_msg();
    2ae4:	f00d fab8 	bl	10058 <parse_gps_msg>
    send_gps_pos();
    2ae8:	f00a fcde 	bl	d4a8 <send_gps_pos>
    send_radIR();
    2aec:	f00b fea2 	bl	e834 <send_radIR>
    send_takeOff();
    2af0:	f00c fc9a 	bl	f428 <send_takeOff>
}
    2af4:	bd80      	pop	{r7, pc}
    2af6:	bf00      	nop

00002af8 <vTask_9>:

void vTask_9()
{
    2af8:	b580      	push	{r7, lr}
    2afa:	af00      	add	r7, sp, #0
    nav_home();
    2afc:	f010 fd6c 	bl	135d8 <nav_home>
    nav_update();
    2b00:	f010 fd90 	bl	13624 <nav_update>
    course_pid_run();
    2b04:	f00d feb8 	bl	10878 <course_pid_run>
}
    2b08:	bd80      	pop	{r7, pc}
    2b0a:	bf00      	nop

00002b0c <vTask_10>:

void vTask_10()
{
    2b0c:	b580      	push	{r7, lr}
    2b0e:	af00      	add	r7, sp, #0
    altitude_pid_run();
    2b10:	f00e f93a 	bl	10d88 <altitude_pid_run>
}
    2b14:	bd80      	pop	{r7, pc}
    2b16:	bf00      	nop

00002b18 <vTask_11>:

void vTask_11()
{
    2b18:	b580      	push	{r7, lr}
    2b1a:	af00      	add	r7, sp, #0
    climb_pid_run();
    2b1c:	f00d ff64 	bl	109e8 <climb_pid_run>
}
    2b20:	bd80      	pop	{r7, pc}
    2b22:	bf00      	nop

00002b24 <vTask_12>:

void vTask_12()
{
    2b24:	b580      	push	{r7, lr}
    2b26:	af00      	add	r7, sp, #0
    send_boot();
    2b28:	f003 f9a0 	bl	5e6c <send_boot>
    send_attitude();
    2b2c:	f004 f96e 	bl	6e0c <send_attitude>
    send_adc();
    2b30:	f004 fe60 	bl	77f4 <send_adc>
    send_settings();
    2b34:	f005 f8e6 	bl	7d04 <send_settings>
    send_desired();
    2b38:	f005 fce8 	bl	850c <send_desired>
    send_bat();
    2b3c:	f006 fc16 	bl	936c <send_bat>
    send_climb();
    2b40:	f006 ffca 	bl	9ad8 <send_climb>
    send_mode();
    2b44:	f007 fd3a 	bl	a5bc <send_mode>
    send_debug();
    2b48:	f008 f80c 	bl	ab64 <send_debug>
    send_nav_ref();
    2b4c:	f008 fae0 	bl	b110 <send_nav_ref>
}
    2b50:	bd80      	pop	{r7, pc}
    2b52:	bf00      	nop

00002b54 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
    2b54:	b580      	push	{r7, lr}
    2b56:	b084      	sub	sp, #16
    2b58:	af00      	add	r7, sp, #0
    2b5a:	6078      	str	r0, [r7, #4]
    2b5c:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn = pdPASS;
    2b5e:	2301      	movs	r3, #1
    2b60:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	/* If the queue being reset has already been used (has not just been
	created), then only reset the queue if its event lists are empty. */
	if( xNewQueue != pdTRUE )
    2b62:	683b      	ldr	r3, [r7, #0]
    2b64:	2b01      	cmp	r3, #1
    2b66:	d00b      	beq.n	2b80 <xQueueGenericReset+0x2c>
	{
		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2b68:	687b      	ldr	r3, [r7, #4]
    2b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2b6c:	2b00      	cmp	r3, #0
    2b6e:	d001      	beq.n	2b74 <xQueueGenericReset+0x20>
		{
			xReturn = pdFAIL;
    2b70:	2300      	movs	r3, #0
    2b72:	60fb      	str	r3, [r7, #12]
		}

		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2b74:	687b      	ldr	r3, [r7, #4]
    2b76:	691b      	ldr	r3, [r3, #16]
    2b78:	2b00      	cmp	r3, #0
    2b7a:	d001      	beq.n	2b80 <xQueueGenericReset+0x2c>
		{
			xReturn = pdFAIL;
    2b7c:	2300      	movs	r3, #0
    2b7e:	60fb      	str	r3, [r7, #12]
		}
	}

	if( xReturn == pdPASS )
    2b80:	68fb      	ldr	r3, [r7, #12]
    2b82:	2b01      	cmp	r3, #1
    2b84:	d12f      	bne.n	2be6 <xQueueGenericReset+0x92>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    2b86:	687b      	ldr	r3, [r7, #4]
    2b88:	681a      	ldr	r2, [r3, #0]
    2b8a:	687b      	ldr	r3, [r7, #4]
    2b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2b8e:	6879      	ldr	r1, [r7, #4]
    2b90:	6c09      	ldr	r1, [r1, #64]	; 0x40
    2b92:	fb01 f303 	mul.w	r3, r1, r3
    2b96:	441a      	add	r2, r3
    2b98:	687b      	ldr	r3, [r7, #4]
    2b9a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    2b9c:	687b      	ldr	r3, [r7, #4]
    2b9e:	2200      	movs	r2, #0
    2ba0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    2ba2:	687b      	ldr	r3, [r7, #4]
    2ba4:	681a      	ldr	r2, [r3, #0]
    2ba6:	687b      	ldr	r3, [r7, #4]
    2ba8:	609a      	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
    2baa:	687b      	ldr	r3, [r7, #4]
    2bac:	681a      	ldr	r2, [r3, #0]
    2bae:	687b      	ldr	r3, [r7, #4]
    2bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2bb2:	3b01      	subs	r3, #1
    2bb4:	6879      	ldr	r1, [r7, #4]
    2bb6:	6c09      	ldr	r1, [r1, #64]	; 0x40
    2bb8:	fb01 f303 	mul.w	r3, r1, r3
    2bbc:	441a      	add	r2, r3
    2bbe:	687b      	ldr	r3, [r7, #4]
    2bc0:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
    2bc2:	687b      	ldr	r3, [r7, #4]
    2bc4:	f04f 32ff 	mov.w	r2, #4294967295
    2bc8:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
    2bca:	687b      	ldr	r3, [r7, #4]
    2bcc:	f04f 32ff 	mov.w	r2, #4294967295
    2bd0:	649a      	str	r2, [r3, #72]	; 0x48

		/* Ensure the event queues start with the correct state. */
		vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    2bd2:	687b      	ldr	r3, [r7, #4]
    2bd4:	3310      	adds	r3, #16
    2bd6:	4618      	mov	r0, r3
    2bd8:	f7ff fe96 	bl	2908 <vListInitialise>
		vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    2bdc:	687b      	ldr	r3, [r7, #4]
    2bde:	3324      	adds	r3, #36	; 0x24
    2be0:	4618      	mov	r0, r3
    2be2:	f7ff fe91 	bl	2908 <vListInitialise>
	}

	return xReturn;
    2be6:	68fb      	ldr	r3, [r7, #12]
}
    2be8:	4618      	mov	r0, r3
    2bea:	3710      	adds	r7, #16
    2bec:	46bd      	mov	sp, r7
    2bee:	bd80      	pop	{r7, pc}

00002bf0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
    2bf0:	b580      	push	{r7, lr}
    2bf2:	b088      	sub	sp, #32
    2bf4:	af00      	add	r7, sp, #0
    2bf6:	60f8      	str	r0, [r7, #12]
    2bf8:	60b9      	str	r1, [r7, #8]
    2bfa:	4613      	mov	r3, r2
    2bfc:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    2bfe:	2300      	movs	r3, #0
    2c00:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    2c02:	68fb      	ldr	r3, [r7, #12]
    2c04:	2b00      	cmp	r3, #0
    2c06:	d026      	beq.n	2c56 <xQueueGenericCreate+0x66>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    2c08:	204c      	movs	r0, #76	; 0x4c
    2c0a:	f001 fd85 	bl	4718 <pvPortMalloc>
    2c0e:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
    2c10:	69bb      	ldr	r3, [r7, #24]
    2c12:	2b00      	cmp	r3, #0
    2c14:	d01f      	beq.n	2c56 <xQueueGenericCreate+0x66>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    2c16:	68fb      	ldr	r3, [r7, #12]
    2c18:	68ba      	ldr	r2, [r7, #8]
    2c1a:	fb02 f303 	mul.w	r3, r2, r3
    2c1e:	3301      	adds	r3, #1
    2c20:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    2c22:	6978      	ldr	r0, [r7, #20]
    2c24:	f001 fd78 	bl	4718 <pvPortMalloc>
    2c28:	4602      	mov	r2, r0
    2c2a:	69bb      	ldr	r3, [r7, #24]
    2c2c:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
    2c2e:	69bb      	ldr	r3, [r7, #24]
    2c30:	681b      	ldr	r3, [r3, #0]
    2c32:	2b00      	cmp	r3, #0
    2c34:	d00c      	beq.n	2c50 <xQueueGenericCreate+0x60>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
    2c36:	69bb      	ldr	r3, [r7, #24]
    2c38:	68fa      	ldr	r2, [r7, #12]
    2c3a:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
    2c3c:	69bb      	ldr	r3, [r7, #24]
    2c3e:	68ba      	ldr	r2, [r7, #8]
    2c40:	641a      	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
    2c42:	69b8      	ldr	r0, [r7, #24]
    2c44:	2101      	movs	r1, #1
    2c46:	f7ff ff85 	bl	2b54 <xQueueGenericReset>
					pxNewQueue->ucQueueType = ucQueueType;
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    2c4a:	69bb      	ldr	r3, [r7, #24]
    2c4c:	61fb      	str	r3, [r7, #28]
    2c4e:	e002      	b.n	2c56 <xQueueGenericCreate+0x66>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
    2c50:	69b8      	ldr	r0, [r7, #24]
    2c52:	f001 fe25 	bl	48a0 <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    2c56:	69fb      	ldr	r3, [r7, #28]
}
    2c58:	4618      	mov	r0, r3
    2c5a:	3720      	adds	r7, #32
    2c5c:	46bd      	mov	sp, r7
    2c5e:	bd80      	pop	{r7, pc}

00002c60 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( unsigned char ucQueueType )
	{
    2c60:	b580      	push	{r7, lr}
    2c62:	b084      	sub	sp, #16
    2c64:	af00      	add	r7, sp, #0
    2c66:	4603      	mov	r3, r0
    2c68:	71fb      	strb	r3, [r7, #7]
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    2c6a:	204c      	movs	r0, #76	; 0x4c
    2c6c:	f001 fd54 	bl	4718 <pvPortMalloc>
    2c70:	60f8      	str	r0, [r7, #12]
		if( pxNewQueue != NULL )
    2c72:	68fb      	ldr	r3, [r7, #12]
    2c74:	2b00      	cmp	r3, #0
    2c76:	d02c      	beq.n	2cd2 <xQueueCreateMutex+0x72>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    2c78:	68fb      	ldr	r3, [r7, #12]
    2c7a:	2200      	movs	r2, #0
    2c7c:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    2c7e:	68fb      	ldr	r3, [r7, #12]
    2c80:	2200      	movs	r2, #0
    2c82:	601a      	str	r2, [r3, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
    2c84:	68fb      	ldr	r3, [r7, #12]
    2c86:	2200      	movs	r2, #0
    2c88:	609a      	str	r2, [r3, #8]
			pxNewQueue->pcReadFrom = NULL;
    2c8a:	68fb      	ldr	r3, [r7, #12]
    2c8c:	2200      	movs	r2, #0
    2c8e:	60da      	str	r2, [r3, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    2c90:	68fb      	ldr	r3, [r7, #12]
    2c92:	2200      	movs	r2, #0
    2c94:	639a      	str	r2, [r3, #56]	; 0x38
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
    2c96:	68fb      	ldr	r3, [r7, #12]
    2c98:	2201      	movs	r2, #1
    2c9a:	63da      	str	r2, [r3, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
    2c9c:	68fb      	ldr	r3, [r7, #12]
    2c9e:	2200      	movs	r2, #0
    2ca0:	641a      	str	r2, [r3, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
    2ca2:	68fb      	ldr	r3, [r7, #12]
    2ca4:	f04f 32ff 	mov.w	r2, #4294967295
    2ca8:	645a      	str	r2, [r3, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
    2caa:	68fb      	ldr	r3, [r7, #12]
    2cac:	f04f 32ff 	mov.w	r2, #4294967295
    2cb0:	649a      	str	r2, [r3, #72]	; 0x48
				pxNewQueue->ucQueueType = ucQueueType;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    2cb2:	68fb      	ldr	r3, [r7, #12]
    2cb4:	3310      	adds	r3, #16
    2cb6:	4618      	mov	r0, r3
    2cb8:	f7ff fe26 	bl	2908 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    2cbc:	68fb      	ldr	r3, [r7, #12]
    2cbe:	3324      	adds	r3, #36	; 0x24
    2cc0:	4618      	mov	r0, r3
    2cc2:	f7ff fe21 	bl	2908 <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
    2cc6:	68f8      	ldr	r0, [r7, #12]
    2cc8:	2100      	movs	r1, #0
    2cca:	2200      	movs	r2, #0
    2ccc:	2300      	movs	r3, #0
    2cce:	f000 f81d 	bl	2d0c <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
    2cd2:	68fb      	ldr	r3, [r7, #12]
	}
    2cd4:	4618      	mov	r0, r3
    2cd6:	3710      	adds	r7, #16
    2cd8:	46bd      	mov	sp, r7
    2cda:	bd80      	pop	{r7, pc}

00002cdc <xQueueGetMutexHolder>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void* xQueueGetMutexHolder( xQueueHandle xSemaphore )
	{
    2cdc:	b580      	push	{r7, lr}
    2cde:	b084      	sub	sp, #16
    2ce0:	af00      	add	r7, sp, #0
    2ce2:	6078      	str	r0, [r7, #4]
		/* This function is called by xSemaphoreGetMutexHolder(), and should not
		be called directly.  Note:  This is is a good way of determining if the
		calling task is the mutex holder, but not a good way of determining the
		identity of the mutex holder, as the holder may change between the
		following critical section exiting and the function returning. */
		taskENTER_CRITICAL();
    2ce4:	f001 fc96 	bl	4614 <vPortEnterCritical>
		{
			if( xSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
    2ce8:	687b      	ldr	r3, [r7, #4]
    2cea:	681b      	ldr	r3, [r3, #0]
    2cec:	2b00      	cmp	r3, #0
    2cee:	d103      	bne.n	2cf8 <xQueueGetMutexHolder+0x1c>
			{
				pxReturn = ( void * ) xSemaphore->pxMutexHolder;
    2cf0:	687b      	ldr	r3, [r7, #4]
    2cf2:	685b      	ldr	r3, [r3, #4]
    2cf4:	60fb      	str	r3, [r7, #12]
    2cf6:	e001      	b.n	2cfc <xQueueGetMutexHolder+0x20>
			}
			else
			{
				pxReturn = NULL;
    2cf8:	2300      	movs	r3, #0
    2cfa:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
    2cfc:	f001 fca0 	bl	4640 <vPortExitCritical>
		
		return pxReturn;
    2d00:	68fb      	ldr	r3, [r7, #12]
	}
    2d02:	4618      	mov	r0, r3
    2d04:	3710      	adds	r7, #16
    2d06:	46bd      	mov	sp, r7
    2d08:	bd80      	pop	{r7, pc}
    2d0a:	bf00      	nop

00002d0c <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    2d0c:	b580      	push	{r7, lr}
    2d0e:	b088      	sub	sp, #32
    2d10:	af00      	add	r7, sp, #0
    2d12:	60f8      	str	r0, [r7, #12]
    2d14:	60b9      	str	r1, [r7, #8]
    2d16:	607a      	str	r2, [r7, #4]
    2d18:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    2d1a:	2300      	movs	r3, #0
    2d1c:	61fb      	str	r3, [r7, #28]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    2d1e:	f001 fc79 	bl	4614 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    2d22:	68fb      	ldr	r3, [r7, #12]
    2d24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    2d26:	68fb      	ldr	r3, [r7, #12]
    2d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2d2a:	429a      	cmp	r2, r3
    2d2c:	d216      	bcs.n	2d5c <xQueueGenericSend+0x50>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    2d2e:	68f8      	ldr	r0, [r7, #12]
    2d30:	68b9      	ldr	r1, [r7, #8]
    2d32:	683a      	ldr	r2, [r7, #0]
    2d34:	f000 f9d6 	bl	30e4 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2d38:	68fb      	ldr	r3, [r7, #12]
    2d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2d3c:	2b00      	cmp	r3, #0
    2d3e:	d009      	beq.n	2d54 <xQueueGenericSend+0x48>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    2d40:	68fb      	ldr	r3, [r7, #12]
    2d42:	3324      	adds	r3, #36	; 0x24
    2d44:	4618      	mov	r0, r3
    2d46:	f001 f907 	bl	3f58 <xTaskRemoveFromEventList>
    2d4a:	4603      	mov	r3, r0
    2d4c:	2b01      	cmp	r3, #1
    2d4e:	d101      	bne.n	2d54 <xQueueGenericSend+0x48>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    2d50:	f001 fc52 	bl	45f8 <vPortYieldFromISR>
					}
				}

				taskEXIT_CRITICAL();
    2d54:	f001 fc74 	bl	4640 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    2d58:	2301      	movs	r3, #1
    2d5a:	e059      	b.n	2e10 <xQueueGenericSend+0x104>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    2d5c:	687b      	ldr	r3, [r7, #4]
    2d5e:	2b00      	cmp	r3, #0
    2d60:	d103      	bne.n	2d6a <xQueueGenericSend+0x5e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    2d62:	f001 fc6d 	bl	4640 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    2d66:	2300      	movs	r3, #0
    2d68:	e052      	b.n	2e10 <xQueueGenericSend+0x104>
				}
				else if( xEntryTimeSet == pdFALSE )
    2d6a:	69fb      	ldr	r3, [r7, #28]
    2d6c:	2b00      	cmp	r3, #0
    2d6e:	d106      	bne.n	2d7e <xQueueGenericSend+0x72>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    2d70:	f107 0314 	add.w	r3, r7, #20
    2d74:	4618      	mov	r0, r3
    2d76:	f001 f947 	bl	4008 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    2d7a:	2301      	movs	r3, #1
    2d7c:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    2d7e:	f001 fc5f 	bl	4640 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    2d82:	f000 fe93 	bl	3aac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    2d86:	f001 fc45 	bl	4614 <vPortEnterCritical>
    2d8a:	68fb      	ldr	r3, [r7, #12]
    2d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
    2d92:	d102      	bne.n	2d9a <xQueueGenericSend+0x8e>
    2d94:	68fb      	ldr	r3, [r7, #12]
    2d96:	2200      	movs	r2, #0
    2d98:	645a      	str	r2, [r3, #68]	; 0x44
    2d9a:	68fb      	ldr	r3, [r7, #12]
    2d9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
    2da2:	d102      	bne.n	2daa <xQueueGenericSend+0x9e>
    2da4:	68fb      	ldr	r3, [r7, #12]
    2da6:	2200      	movs	r2, #0
    2da8:	649a      	str	r2, [r3, #72]	; 0x48
    2daa:	f001 fc49 	bl	4640 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2dae:	f107 0214 	add.w	r2, r7, #20
    2db2:	1d3b      	adds	r3, r7, #4
    2db4:	4610      	mov	r0, r2
    2db6:	4619      	mov	r1, r3
    2db8:	f001 f93e 	bl	4038 <xTaskCheckForTimeOut>
    2dbc:	4603      	mov	r3, r0
    2dbe:	2b00      	cmp	r3, #0
    2dc0:	d11e      	bne.n	2e00 <xQueueGenericSend+0xf4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    2dc2:	68f8      	ldr	r0, [r7, #12]
    2dc4:	f000 fa86 	bl	32d4 <prvIsQueueFull>
    2dc8:	4603      	mov	r3, r0
    2dca:	2b00      	cmp	r3, #0
    2dcc:	d012      	beq.n	2df4 <xQueueGenericSend+0xe8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    2dce:	68fb      	ldr	r3, [r7, #12]
    2dd0:	f103 0210 	add.w	r2, r3, #16
    2dd4:	687b      	ldr	r3, [r7, #4]
    2dd6:	4610      	mov	r0, r2
    2dd8:	4619      	mov	r1, r3
    2dda:	f001 f885 	bl	3ee8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    2dde:	68f8      	ldr	r0, [r7, #12]
    2de0:	f000 fa02 	bl	31e8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    2de4:	f000 fe74 	bl	3ad0 <xTaskResumeAll>
    2de8:	4603      	mov	r3, r0
    2dea:	2b00      	cmp	r3, #0
    2dec:	d10f      	bne.n	2e0e <xQueueGenericSend+0x102>
				{
					portYIELD_WITHIN_API();
    2dee:	f001 fc03 	bl	45f8 <vPortYieldFromISR>
    2df2:	e00c      	b.n	2e0e <xQueueGenericSend+0x102>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    2df4:	68f8      	ldr	r0, [r7, #12]
    2df6:	f000 f9f7 	bl	31e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    2dfa:	f000 fe69 	bl	3ad0 <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
    2dfe:	e78e      	b.n	2d1e <xQueueGenericSend+0x12>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    2e00:	68f8      	ldr	r0, [r7, #12]
    2e02:	f000 f9f1 	bl	31e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    2e06:	f000 fe63 	bl	3ad0 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    2e0a:	2300      	movs	r3, #0
    2e0c:	e000      	b.n	2e10 <xQueueGenericSend+0x104>
		}
	}
    2e0e:	e786      	b.n	2d1e <xQueueGenericSend+0x12>
}
    2e10:	4618      	mov	r0, r3
    2e12:	3720      	adds	r7, #32
    2e14:	46bd      	mov	sp, r7
    2e16:	bd80      	pop	{r7, pc}

00002e18 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    2e18:	b580      	push	{r7, lr}
    2e1a:	b086      	sub	sp, #24
    2e1c:	af00      	add	r7, sp, #0
    2e1e:	60f8      	str	r0, [r7, #12]
    2e20:	60b9      	str	r1, [r7, #8]
    2e22:	607a      	str	r2, [r7, #4]
    2e24:	603b      	str	r3, [r7, #0]
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    2e26:	2300      	movs	r3, #0
    2e28:	613b      	str	r3, [r7, #16]
    2e2a:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    2e2e:	f380 8811 	msr	BASEPRI, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    2e32:	68fb      	ldr	r3, [r7, #12]
    2e34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    2e36:	68fb      	ldr	r3, [r7, #12]
    2e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2e3a:	429a      	cmp	r2, r3
    2e3c:	d221      	bcs.n	2e82 <xQueueGenericSendFromISR+0x6a>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    2e3e:	68f8      	ldr	r0, [r7, #12]
    2e40:	68b9      	ldr	r1, [r7, #8]
    2e42:	683a      	ldr	r2, [r7, #0]
    2e44:	f000 f94e 	bl	30e4 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    2e48:	68fb      	ldr	r3, [r7, #12]
    2e4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
    2e50:	d10f      	bne.n	2e72 <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2e52:	68fb      	ldr	r3, [r7, #12]
    2e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2e56:	2b00      	cmp	r3, #0
    2e58:	d010      	beq.n	2e7c <xQueueGenericSendFromISR+0x64>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2e5a:	68fb      	ldr	r3, [r7, #12]
    2e5c:	3324      	adds	r3, #36	; 0x24
    2e5e:	4618      	mov	r0, r3
    2e60:	f001 f87a 	bl	3f58 <xTaskRemoveFromEventList>
    2e64:	4603      	mov	r3, r0
    2e66:	2b00      	cmp	r3, #0
    2e68:	d008      	beq.n	2e7c <xQueueGenericSendFromISR+0x64>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    2e6a:	687b      	ldr	r3, [r7, #4]
    2e6c:	2201      	movs	r2, #1
    2e6e:	601a      	str	r2, [r3, #0]
    2e70:	e004      	b.n	2e7c <xQueueGenericSendFromISR+0x64>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    2e72:	68fb      	ldr	r3, [r7, #12]
    2e74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2e76:	1c5a      	adds	r2, r3, #1
    2e78:	68fb      	ldr	r3, [r7, #12]
    2e7a:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
    2e7c:	2301      	movs	r3, #1
    2e7e:	617b      	str	r3, [r7, #20]
    2e80:	e001      	b.n	2e86 <xQueueGenericSendFromISR+0x6e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    2e82:	2300      	movs	r3, #0
    2e84:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    2e86:	f04f 0000 	mov.w	r0, #0
    2e8a:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    2e8e:	697b      	ldr	r3, [r7, #20]
}
    2e90:	4618      	mov	r0, r3
    2e92:	3718      	adds	r7, #24
    2e94:	46bd      	mov	sp, r7
    2e96:	bd80      	pop	{r7, pc}

00002e98 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    2e98:	b580      	push	{r7, lr}
    2e9a:	b088      	sub	sp, #32
    2e9c:	af00      	add	r7, sp, #0
    2e9e:	60f8      	str	r0, [r7, #12]
    2ea0:	60b9      	str	r1, [r7, #8]
    2ea2:	607a      	str	r2, [r7, #4]
    2ea4:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    2ea6:	2300      	movs	r3, #0
    2ea8:	61fb      	str	r3, [r7, #28]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    2eaa:	f001 fbb3 	bl	4614 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    2eae:	68fb      	ldr	r3, [r7, #12]
    2eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2eb2:	2b00      	cmp	r3, #0
    2eb4:	d03b      	beq.n	2f2e <xQueueGenericReceive+0x96>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    2eb6:	68fb      	ldr	r3, [r7, #12]
    2eb8:	68db      	ldr	r3, [r3, #12]
    2eba:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    2ebc:	68f8      	ldr	r0, [r7, #12]
    2ebe:	68b9      	ldr	r1, [r7, #8]
    2ec0:	f000 f96c 	bl	319c <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    2ec4:	683b      	ldr	r3, [r7, #0]
    2ec6:	2b00      	cmp	r3, #0
    2ec8:	d11c      	bne.n	2f04 <xQueueGenericReceive+0x6c>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    2eca:	68fb      	ldr	r3, [r7, #12]
    2ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2ece:	1e5a      	subs	r2, r3, #1
    2ed0:	68fb      	ldr	r3, [r7, #12]
    2ed2:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    2ed4:	68fb      	ldr	r3, [r7, #12]
    2ed6:	681b      	ldr	r3, [r3, #0]
    2ed8:	2b00      	cmp	r3, #0
    2eda:	d104      	bne.n	2ee6 <xQueueGenericReceive+0x4e>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
    2edc:	f001 fa66 	bl	43ac <xTaskGetCurrentTaskHandle>
    2ee0:	4602      	mov	r2, r0
    2ee2:	68fb      	ldr	r3, [r7, #12]
    2ee4:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2ee6:	68fb      	ldr	r3, [r7, #12]
    2ee8:	691b      	ldr	r3, [r3, #16]
    2eea:	2b00      	cmp	r3, #0
    2eec:	d01b      	beq.n	2f26 <xQueueGenericReceive+0x8e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    2eee:	68fb      	ldr	r3, [r7, #12]
    2ef0:	3310      	adds	r3, #16
    2ef2:	4618      	mov	r0, r3
    2ef4:	f001 f830 	bl	3f58 <xTaskRemoveFromEventList>
    2ef8:	4603      	mov	r3, r0
    2efa:	2b01      	cmp	r3, #1
    2efc:	d113      	bne.n	2f26 <xQueueGenericReceive+0x8e>
						{
							portYIELD_WITHIN_API();
    2efe:	f001 fb7b 	bl	45f8 <vPortYieldFromISR>
    2f02:	e010      	b.n	2f26 <xQueueGenericReceive+0x8e>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    2f04:	68fb      	ldr	r3, [r7, #12]
    2f06:	69ba      	ldr	r2, [r7, #24]
    2f08:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2f0a:	68fb      	ldr	r3, [r7, #12]
    2f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2f0e:	2b00      	cmp	r3, #0
    2f10:	d009      	beq.n	2f26 <xQueueGenericReceive+0x8e>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2f12:	68fb      	ldr	r3, [r7, #12]
    2f14:	3324      	adds	r3, #36	; 0x24
    2f16:	4618      	mov	r0, r3
    2f18:	f001 f81e 	bl	3f58 <xTaskRemoveFromEventList>
    2f1c:	4603      	mov	r3, r0
    2f1e:	2b00      	cmp	r3, #0
    2f20:	d001      	beq.n	2f26 <xQueueGenericReceive+0x8e>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    2f22:	f001 fb69 	bl	45f8 <vPortYieldFromISR>
						}
					}

				}

				taskEXIT_CRITICAL();
    2f26:	f001 fb8b 	bl	4640 <vPortExitCritical>
				return pdPASS;
    2f2a:	2301      	movs	r3, #1
    2f2c:	e066      	b.n	2ffc <xQueueGenericReceive+0x164>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    2f2e:	687b      	ldr	r3, [r7, #4]
    2f30:	2b00      	cmp	r3, #0
    2f32:	d103      	bne.n	2f3c <xQueueGenericReceive+0xa4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    2f34:	f001 fb84 	bl	4640 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    2f38:	2300      	movs	r3, #0
    2f3a:	e05f      	b.n	2ffc <xQueueGenericReceive+0x164>
				}
				else if( xEntryTimeSet == pdFALSE )
    2f3c:	69fb      	ldr	r3, [r7, #28]
    2f3e:	2b00      	cmp	r3, #0
    2f40:	d106      	bne.n	2f50 <xQueueGenericReceive+0xb8>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    2f42:	f107 0310 	add.w	r3, r7, #16
    2f46:	4618      	mov	r0, r3
    2f48:	f001 f85e 	bl	4008 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    2f4c:	2301      	movs	r3, #1
    2f4e:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    2f50:	f001 fb76 	bl	4640 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    2f54:	f000 fdaa 	bl	3aac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    2f58:	f001 fb5c 	bl	4614 <vPortEnterCritical>
    2f5c:	68fb      	ldr	r3, [r7, #12]
    2f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2f60:	f1b3 3fff 	cmp.w	r3, #4294967295
    2f64:	d102      	bne.n	2f6c <xQueueGenericReceive+0xd4>
    2f66:	68fb      	ldr	r3, [r7, #12]
    2f68:	2200      	movs	r2, #0
    2f6a:	645a      	str	r2, [r3, #68]	; 0x44
    2f6c:	68fb      	ldr	r3, [r7, #12]
    2f6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2f70:	f1b3 3fff 	cmp.w	r3, #4294967295
    2f74:	d102      	bne.n	2f7c <xQueueGenericReceive+0xe4>
    2f76:	68fb      	ldr	r3, [r7, #12]
    2f78:	2200      	movs	r2, #0
    2f7a:	649a      	str	r2, [r3, #72]	; 0x48
    2f7c:	f001 fb60 	bl	4640 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2f80:	f107 0210 	add.w	r2, r7, #16
    2f84:	1d3b      	adds	r3, r7, #4
    2f86:	4610      	mov	r0, r2
    2f88:	4619      	mov	r1, r3
    2f8a:	f001 f855 	bl	4038 <xTaskCheckForTimeOut>
    2f8e:	4603      	mov	r3, r0
    2f90:	2b00      	cmp	r3, #0
    2f92:	d12b      	bne.n	2fec <xQueueGenericReceive+0x154>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    2f94:	68f8      	ldr	r0, [r7, #12]
    2f96:	f000 f973 	bl	3280 <prvIsQueueEmpty>
    2f9a:	4603      	mov	r3, r0
    2f9c:	2b00      	cmp	r3, #0
    2f9e:	d01f      	beq.n	2fe0 <xQueueGenericReceive+0x148>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    2fa0:	68fb      	ldr	r3, [r7, #12]
    2fa2:	681b      	ldr	r3, [r3, #0]
    2fa4:	2b00      	cmp	r3, #0
    2fa6:	d108      	bne.n	2fba <xQueueGenericReceive+0x122>
					{
						portENTER_CRITICAL();
    2fa8:	f001 fb34 	bl	4614 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    2fac:	68fb      	ldr	r3, [r7, #12]
    2fae:	685b      	ldr	r3, [r3, #4]
    2fb0:	4618      	mov	r0, r3
    2fb2:	f001 fa0b 	bl	43cc <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
    2fb6:	f001 fb43 	bl	4640 <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    2fba:	68fb      	ldr	r3, [r7, #12]
    2fbc:	f103 0224 	add.w	r2, r3, #36	; 0x24
    2fc0:	687b      	ldr	r3, [r7, #4]
    2fc2:	4610      	mov	r0, r2
    2fc4:	4619      	mov	r1, r3
    2fc6:	f000 ff8f 	bl	3ee8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    2fca:	68f8      	ldr	r0, [r7, #12]
    2fcc:	f000 f90c 	bl	31e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    2fd0:	f000 fd7e 	bl	3ad0 <xTaskResumeAll>
    2fd4:	4603      	mov	r3, r0
    2fd6:	2b00      	cmp	r3, #0
    2fd8:	d10f      	bne.n	2ffa <xQueueGenericReceive+0x162>
				{
					portYIELD_WITHIN_API();
    2fda:	f001 fb0d 	bl	45f8 <vPortYieldFromISR>
    2fde:	e00c      	b.n	2ffa <xQueueGenericReceive+0x162>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    2fe0:	68f8      	ldr	r0, [r7, #12]
    2fe2:	f000 f901 	bl	31e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    2fe6:	f000 fd73 	bl	3ad0 <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
    2fea:	e75e      	b.n	2eaa <xQueueGenericReceive+0x12>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    2fec:	68f8      	ldr	r0, [r7, #12]
    2fee:	f000 f8fb 	bl	31e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    2ff2:	f000 fd6d 	bl	3ad0 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    2ff6:	2300      	movs	r3, #0
    2ff8:	e000      	b.n	2ffc <xQueueGenericReceive+0x164>
		}
	}
    2ffa:	e756      	b.n	2eaa <xQueueGenericReceive+0x12>
}
    2ffc:	4618      	mov	r0, r3
    2ffe:	3720      	adds	r7, #32
    3000:	46bd      	mov	sp, r7
    3002:	bd80      	pop	{r7, pc}

00003004 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    3004:	b580      	push	{r7, lr}
    3006:	b086      	sub	sp, #24
    3008:	af00      	add	r7, sp, #0
    300a:	60f8      	str	r0, [r7, #12]
    300c:	60b9      	str	r1, [r7, #8]
    300e:	607a      	str	r2, [r7, #4]

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    3010:	2300      	movs	r3, #0
    3012:	613b      	str	r3, [r7, #16]
    3014:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    3018:	f380 8811 	msr	BASEPRI, r0
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    301c:	68fb      	ldr	r3, [r7, #12]
    301e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3020:	2b00      	cmp	r3, #0
    3022:	d025      	beq.n	3070 <xQueueReceiveFromISR+0x6c>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    3024:	68f8      	ldr	r0, [r7, #12]
    3026:	68b9      	ldr	r1, [r7, #8]
    3028:	f000 f8b8 	bl	319c <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    302c:	68fb      	ldr	r3, [r7, #12]
    302e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3030:	1e5a      	subs	r2, r3, #1
    3032:	68fb      	ldr	r3, [r7, #12]
    3034:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    3036:	68fb      	ldr	r3, [r7, #12]
    3038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    303a:	f1b3 3fff 	cmp.w	r3, #4294967295
    303e:	d10f      	bne.n	3060 <xQueueReceiveFromISR+0x5c>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3040:	68fb      	ldr	r3, [r7, #12]
    3042:	691b      	ldr	r3, [r3, #16]
    3044:	2b00      	cmp	r3, #0
    3046:	d010      	beq.n	306a <xQueueReceiveFromISR+0x66>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3048:	68fb      	ldr	r3, [r7, #12]
    304a:	3310      	adds	r3, #16
    304c:	4618      	mov	r0, r3
    304e:	f000 ff83 	bl	3f58 <xTaskRemoveFromEventList>
    3052:	4603      	mov	r3, r0
    3054:	2b00      	cmp	r3, #0
    3056:	d008      	beq.n	306a <xQueueReceiveFromISR+0x66>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    3058:	687b      	ldr	r3, [r7, #4]
    305a:	2201      	movs	r2, #1
    305c:	601a      	str	r2, [r3, #0]
    305e:	e004      	b.n	306a <xQueueReceiveFromISR+0x66>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    3060:	68fb      	ldr	r3, [r7, #12]
    3062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3064:	1c5a      	adds	r2, r3, #1
    3066:	68fb      	ldr	r3, [r7, #12]
    3068:	645a      	str	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
    306a:	2301      	movs	r3, #1
    306c:	617b      	str	r3, [r7, #20]
    306e:	e001      	b.n	3074 <xQueueReceiveFromISR+0x70>
		}
		else
		{
			xReturn = pdFAIL;
    3070:	2300      	movs	r3, #0
    3072:	617b      	str	r3, [r7, #20]
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    3074:	f04f 0000 	mov.w	r0, #0
    3078:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    307c:	697b      	ldr	r3, [r7, #20]
}
    307e:	4618      	mov	r0, r3
    3080:	3718      	adds	r7, #24
    3082:	46bd      	mov	sp, r7
    3084:	bd80      	pop	{r7, pc}
    3086:	bf00      	nop

00003088 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    3088:	b580      	push	{r7, lr}
    308a:	b084      	sub	sp, #16
    308c:	af00      	add	r7, sp, #0
    308e:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    3090:	f001 fac0 	bl	4614 <vPortEnterCritical>
		uxReturn = pxQueue->uxMessagesWaiting;
    3094:	687b      	ldr	r3, [r7, #4]
    3096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3098:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    309a:	f001 fad1 	bl	4640 <vPortExitCritical>

	return uxReturn;
    309e:	68fb      	ldr	r3, [r7, #12]
}
    30a0:	4618      	mov	r0, r3
    30a2:	3710      	adds	r7, #16
    30a4:	46bd      	mov	sp, r7
    30a6:	bd80      	pop	{r7, pc}

000030a8 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    30a8:	b480      	push	{r7}
    30aa:	b085      	sub	sp, #20
    30ac:	af00      	add	r7, sp, #0
    30ae:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    30b0:	687b      	ldr	r3, [r7, #4]
    30b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    30b4:	60fb      	str	r3, [r7, #12]

	return uxReturn;
    30b6:	68fb      	ldr	r3, [r7, #12]
}
    30b8:	4618      	mov	r0, r3
    30ba:	3714      	adds	r7, #20
    30bc:	46bd      	mov	sp, r7
    30be:	f85d 7b04 	ldr.w	r7, [sp], #4
    30c2:	4770      	bx	lr

000030c4 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    30c4:	b580      	push	{r7, lr}
    30c6:	b082      	sub	sp, #8
    30c8:	af00      	add	r7, sp, #0
    30ca:	6078      	str	r0, [r7, #4]
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    30cc:	687b      	ldr	r3, [r7, #4]
    30ce:	681b      	ldr	r3, [r3, #0]
    30d0:	4618      	mov	r0, r3
    30d2:	f001 fbe5 	bl	48a0 <vPortFree>
	vPortFree( pxQueue );
    30d6:	6878      	ldr	r0, [r7, #4]
    30d8:	f001 fbe2 	bl	48a0 <vPortFree>
}
    30dc:	3708      	adds	r7, #8
    30de:	46bd      	mov	sp, r7
    30e0:	bd80      	pop	{r7, pc}
    30e2:	bf00      	nop

000030e4 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    30e4:	b580      	push	{r7, lr}
    30e6:	b084      	sub	sp, #16
    30e8:	af00      	add	r7, sp, #0
    30ea:	60f8      	str	r0, [r7, #12]
    30ec:	60b9      	str	r1, [r7, #8]
    30ee:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    30f0:	68fb      	ldr	r3, [r7, #12]
    30f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    30f4:	2b00      	cmp	r3, #0
    30f6:	d10c      	bne.n	3112 <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    30f8:	68fb      	ldr	r3, [r7, #12]
    30fa:	681b      	ldr	r3, [r3, #0]
    30fc:	2b00      	cmp	r3, #0
    30fe:	d145      	bne.n	318c <prvCopyDataToQueue+0xa8>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    3100:	68fb      	ldr	r3, [r7, #12]
    3102:	685b      	ldr	r3, [r3, #4]
    3104:	4618      	mov	r0, r3
    3106:	f001 f9c5 	bl	4494 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
    310a:	68fb      	ldr	r3, [r7, #12]
    310c:	2200      	movs	r2, #0
    310e:	605a      	str	r2, [r3, #4]
    3110:	e03c      	b.n	318c <prvCopyDataToQueue+0xa8>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    3112:	687b      	ldr	r3, [r7, #4]
    3114:	2b00      	cmp	r3, #0
    3116:	d11a      	bne.n	314e <prvCopyDataToQueue+0x6a>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    3118:	68fb      	ldr	r3, [r7, #12]
    311a:	689a      	ldr	r2, [r3, #8]
    311c:	68fb      	ldr	r3, [r7, #12]
    311e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3120:	4610      	mov	r0, r2
    3122:	68b9      	ldr	r1, [r7, #8]
    3124:	461a      	mov	r2, r3
    3126:	f013 ffe3 	bl	170f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    312a:	68fb      	ldr	r3, [r7, #12]
    312c:	689a      	ldr	r2, [r3, #8]
    312e:	68fb      	ldr	r3, [r7, #12]
    3130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3132:	441a      	add	r2, r3
    3134:	68fb      	ldr	r3, [r7, #12]
    3136:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    3138:	68fb      	ldr	r3, [r7, #12]
    313a:	689a      	ldr	r2, [r3, #8]
    313c:	68fb      	ldr	r3, [r7, #12]
    313e:	685b      	ldr	r3, [r3, #4]
    3140:	429a      	cmp	r2, r3
    3142:	d323      	bcc.n	318c <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    3144:	68fb      	ldr	r3, [r7, #12]
    3146:	681a      	ldr	r2, [r3, #0]
    3148:	68fb      	ldr	r3, [r7, #12]
    314a:	609a      	str	r2, [r3, #8]
    314c:	e01e      	b.n	318c <prvCopyDataToQueue+0xa8>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    314e:	68fb      	ldr	r3, [r7, #12]
    3150:	68da      	ldr	r2, [r3, #12]
    3152:	68fb      	ldr	r3, [r7, #12]
    3154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3156:	4610      	mov	r0, r2
    3158:	68b9      	ldr	r1, [r7, #8]
    315a:	461a      	mov	r2, r3
    315c:	f013 ffc8 	bl	170f0 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    3160:	68fb      	ldr	r3, [r7, #12]
    3162:	68da      	ldr	r2, [r3, #12]
    3164:	68fb      	ldr	r3, [r7, #12]
    3166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3168:	425b      	negs	r3, r3
    316a:	441a      	add	r2, r3
    316c:	68fb      	ldr	r3, [r7, #12]
    316e:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    3170:	68fb      	ldr	r3, [r7, #12]
    3172:	68da      	ldr	r2, [r3, #12]
    3174:	68fb      	ldr	r3, [r7, #12]
    3176:	681b      	ldr	r3, [r3, #0]
    3178:	429a      	cmp	r2, r3
    317a:	d207      	bcs.n	318c <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    317c:	68fb      	ldr	r3, [r7, #12]
    317e:	685a      	ldr	r2, [r3, #4]
    3180:	68fb      	ldr	r3, [r7, #12]
    3182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3184:	425b      	negs	r3, r3
    3186:	441a      	add	r2, r3
    3188:	68fb      	ldr	r3, [r7, #12]
    318a:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
    318c:	68fb      	ldr	r3, [r7, #12]
    318e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3190:	1c5a      	adds	r2, r3, #1
    3192:	68fb      	ldr	r3, [r7, #12]
    3194:	639a      	str	r2, [r3, #56]	; 0x38
}
    3196:	3710      	adds	r7, #16
    3198:	46bd      	mov	sp, r7
    319a:	bd80      	pop	{r7, pc}

0000319c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    319c:	b580      	push	{r7, lr}
    319e:	b082      	sub	sp, #8
    31a0:	af00      	add	r7, sp, #0
    31a2:	6078      	str	r0, [r7, #4]
    31a4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    31a6:	687b      	ldr	r3, [r7, #4]
    31a8:	681b      	ldr	r3, [r3, #0]
    31aa:	2b00      	cmp	r3, #0
    31ac:	d019      	beq.n	31e2 <prvCopyDataFromQueue+0x46>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    31ae:	687b      	ldr	r3, [r7, #4]
    31b0:	68da      	ldr	r2, [r3, #12]
    31b2:	687b      	ldr	r3, [r7, #4]
    31b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    31b6:	441a      	add	r2, r3
    31b8:	687b      	ldr	r3, [r7, #4]
    31ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    31bc:	687b      	ldr	r3, [r7, #4]
    31be:	68da      	ldr	r2, [r3, #12]
    31c0:	687b      	ldr	r3, [r7, #4]
    31c2:	685b      	ldr	r3, [r3, #4]
    31c4:	429a      	cmp	r2, r3
    31c6:	d303      	bcc.n	31d0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    31c8:	687b      	ldr	r3, [r7, #4]
    31ca:	681a      	ldr	r2, [r3, #0]
    31cc:	687b      	ldr	r3, [r7, #4]
    31ce:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    31d0:	687b      	ldr	r3, [r7, #4]
    31d2:	68da      	ldr	r2, [r3, #12]
    31d4:	687b      	ldr	r3, [r7, #4]
    31d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    31d8:	6838      	ldr	r0, [r7, #0]
    31da:	4611      	mov	r1, r2
    31dc:	461a      	mov	r2, r3
    31de:	f013 ff87 	bl	170f0 <memcpy>
	}
}
    31e2:	3708      	adds	r7, #8
    31e4:	46bd      	mov	sp, r7
    31e6:	bd80      	pop	{r7, pc}

000031e8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    31e8:	b580      	push	{r7, lr}
    31ea:	b082      	sub	sp, #8
    31ec:	af00      	add	r7, sp, #0
    31ee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    31f0:	f001 fa10 	bl	4614 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    31f4:	e014      	b.n	3220 <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    31f6:	687b      	ldr	r3, [r7, #4]
    31f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    31fa:	2b00      	cmp	r3, #0
    31fc:	d00f      	beq.n	321e <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    31fe:	687b      	ldr	r3, [r7, #4]
    3200:	3324      	adds	r3, #36	; 0x24
    3202:	4618      	mov	r0, r3
    3204:	f000 fea8 	bl	3f58 <xTaskRemoveFromEventList>
    3208:	4603      	mov	r3, r0
    320a:	2b00      	cmp	r3, #0
    320c:	d001      	beq.n	3212 <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    320e:	f000 ff5f 	bl	40d0 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    3212:	687b      	ldr	r3, [r7, #4]
    3214:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3216:	1e5a      	subs	r2, r3, #1
    3218:	687b      	ldr	r3, [r7, #4]
    321a:	649a      	str	r2, [r3, #72]	; 0x48
    321c:	e000      	b.n	3220 <prvUnlockQueue+0x38>
			}
			else
			{
				break;
    321e:	e003      	b.n	3228 <prvUnlockQueue+0x40>
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    3220:	687b      	ldr	r3, [r7, #4]
    3222:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3224:	2b00      	cmp	r3, #0
    3226:	dce6      	bgt.n	31f6 <prvUnlockQueue+0xe>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    3228:	687b      	ldr	r3, [r7, #4]
    322a:	f04f 32ff 	mov.w	r2, #4294967295
    322e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
    3230:	f001 fa06 	bl	4640 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    3234:	f001 f9ee 	bl	4614 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    3238:	e014      	b.n	3264 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    323a:	687b      	ldr	r3, [r7, #4]
    323c:	691b      	ldr	r3, [r3, #16]
    323e:	2b00      	cmp	r3, #0
    3240:	d00f      	beq.n	3262 <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3242:	687b      	ldr	r3, [r7, #4]
    3244:	3310      	adds	r3, #16
    3246:	4618      	mov	r0, r3
    3248:	f000 fe86 	bl	3f58 <xTaskRemoveFromEventList>
    324c:	4603      	mov	r3, r0
    324e:	2b00      	cmp	r3, #0
    3250:	d001      	beq.n	3256 <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
    3252:	f000 ff3d 	bl	40d0 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    3256:	687b      	ldr	r3, [r7, #4]
    3258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    325a:	1e5a      	subs	r2, r3, #1
    325c:	687b      	ldr	r3, [r7, #4]
    325e:	645a      	str	r2, [r3, #68]	; 0x44
    3260:	e000      	b.n	3264 <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
    3262:	e003      	b.n	326c <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    3264:	687b      	ldr	r3, [r7, #4]
    3266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3268:	2b00      	cmp	r3, #0
    326a:	dce6      	bgt.n	323a <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    326c:	687b      	ldr	r3, [r7, #4]
    326e:	f04f 32ff 	mov.w	r2, #4294967295
    3272:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    3274:	f001 f9e4 	bl	4640 <vPortExitCritical>
}
    3278:	3708      	adds	r7, #8
    327a:	46bd      	mov	sp, r7
    327c:	bd80      	pop	{r7, pc}
    327e:	bf00      	nop

00003280 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    3280:	b580      	push	{r7, lr}
    3282:	b084      	sub	sp, #16
    3284:	af00      	add	r7, sp, #0
    3286:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    3288:	f001 f9c4 	bl	4614 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    328c:	687b      	ldr	r3, [r7, #4]
    328e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3290:	2b00      	cmp	r3, #0
    3292:	bf14      	ite	ne
    3294:	2300      	movne	r3, #0
    3296:	2301      	moveq	r3, #1
    3298:	b2db      	uxtb	r3, r3
    329a:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    329c:	f001 f9d0 	bl	4640 <vPortExitCritical>

	return xReturn;
    32a0:	68fb      	ldr	r3, [r7, #12]
}
    32a2:	4618      	mov	r0, r3
    32a4:	3710      	adds	r7, #16
    32a6:	46bd      	mov	sp, r7
    32a8:	bd80      	pop	{r7, pc}
    32aa:	bf00      	nop

000032ac <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    32ac:	b480      	push	{r7}
    32ae:	b085      	sub	sp, #20
    32b0:	af00      	add	r7, sp, #0
    32b2:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    32b4:	687b      	ldr	r3, [r7, #4]
    32b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    32b8:	2b00      	cmp	r3, #0
    32ba:	bf14      	ite	ne
    32bc:	2300      	movne	r3, #0
    32be:	2301      	moveq	r3, #1
    32c0:	b2db      	uxtb	r3, r3
    32c2:	60fb      	str	r3, [r7, #12]

	return xReturn;
    32c4:	68fb      	ldr	r3, [r7, #12]
}
    32c6:	4618      	mov	r0, r3
    32c8:	3714      	adds	r7, #20
    32ca:	46bd      	mov	sp, r7
    32cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    32d0:	4770      	bx	lr
    32d2:	bf00      	nop

000032d4 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    32d4:	b580      	push	{r7, lr}
    32d6:	b084      	sub	sp, #16
    32d8:	af00      	add	r7, sp, #0
    32da:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    32dc:	f001 f99a 	bl	4614 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    32e0:	687b      	ldr	r3, [r7, #4]
    32e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    32e4:	687b      	ldr	r3, [r7, #4]
    32e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    32e8:	429a      	cmp	r2, r3
    32ea:	bf14      	ite	ne
    32ec:	2300      	movne	r3, #0
    32ee:	2301      	moveq	r3, #1
    32f0:	b2db      	uxtb	r3, r3
    32f2:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    32f4:	f001 f9a4 	bl	4640 <vPortExitCritical>

	return xReturn;
    32f8:	68fb      	ldr	r3, [r7, #12]
}
    32fa:	4618      	mov	r0, r3
    32fc:	3710      	adds	r7, #16
    32fe:	46bd      	mov	sp, r7
    3300:	bd80      	pop	{r7, pc}
    3302:	bf00      	nop

00003304 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    3304:	b480      	push	{r7}
    3306:	b085      	sub	sp, #20
    3308:	af00      	add	r7, sp, #0
    330a:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    330c:	687b      	ldr	r3, [r7, #4]
    330e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    3310:	687b      	ldr	r3, [r7, #4]
    3312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    3314:	429a      	cmp	r2, r3
    3316:	bf14      	ite	ne
    3318:	2300      	movne	r3, #0
    331a:	2301      	moveq	r3, #1
    331c:	b2db      	uxtb	r3, r3
    331e:	60fb      	str	r3, [r7, #12]

	return xReturn;
    3320:	68fb      	ldr	r3, [r7, #12]
}
    3322:	4618      	mov	r0, r3
    3324:	3714      	adds	r7, #20
    3326:	46bd      	mov	sp, r7
    3328:	f85d 7b04 	ldr.w	r7, [sp], #4
    332c:	4770      	bx	lr
    332e:	bf00      	nop

00003330 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    3330:	b580      	push	{r7, lr}
    3332:	b08a      	sub	sp, #40	; 0x28
    3334:	af02      	add	r7, sp, #8
    3336:	60f8      	str	r0, [r7, #12]
    3338:	60b9      	str	r1, [r7, #8]
    333a:	603b      	str	r3, [r7, #0]
    333c:	4613      	mov	r3, r2
    333e:	80fb      	strh	r3, [r7, #6]
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    3340:	88fb      	ldrh	r3, [r7, #6]
    3342:	4618      	mov	r0, r3
    3344:	6b39      	ldr	r1, [r7, #48]	; 0x30
    3346:	f000 ffef 	bl	4328 <prvAllocateTCBAndStack>
    334a:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
    334c:	69bb      	ldr	r3, [r7, #24]
    334e:	2b00      	cmp	r3, #0
    3350:	f000 80a1 	beq.w	3496 <xTaskGenericCreate+0x166>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    3354:	69bb      	ldr	r3, [r7, #24]
    3356:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    3358:	88fb      	ldrh	r3, [r7, #6]
    335a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    335e:	3b01      	subs	r3, #1
    3360:	009b      	lsls	r3, r3, #2
    3362:	4413      	add	r3, r2
    3364:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
    3366:	697b      	ldr	r3, [r7, #20]
    3368:	f023 0307 	bic.w	r3, r3, #7
    336c:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    336e:	88fb      	ldrh	r3, [r7, #6]
    3370:	9300      	str	r3, [sp, #0]
    3372:	69b8      	ldr	r0, [r7, #24]
    3374:	68b9      	ldr	r1, [r7, #8]
    3376:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    337a:	f000 fec7 	bl	410c <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    337e:	6978      	ldr	r0, [r7, #20]
    3380:	68f9      	ldr	r1, [r7, #12]
    3382:	683a      	ldr	r2, [r7, #0]
    3384:	f001 f8c8 	bl	4518 <pxPortInitialiseStack>
    3388:	4602      	mov	r2, r0
    338a:	69bb      	ldr	r3, [r7, #24]
    338c:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    338e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3390:	2b00      	cmp	r3, #0
    3392:	d002      	beq.n	339a <xTaskGenericCreate+0x6a>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    3394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3396:	69ba      	ldr	r2, [r7, #24]
    3398:	601a      	str	r2, [r3, #0]
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    339a:	f001 f93b 	bl	4614 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
    339e:	f240 23fc 	movw	r3, #764	; 0x2fc
    33a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33a6:	681b      	ldr	r3, [r3, #0]
    33a8:	1c5a      	adds	r2, r3, #1
    33aa:	f240 23fc 	movw	r3, #764	; 0x2fc
    33ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33b2:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
    33b4:	f240 2324 	movw	r3, #548	; 0x224
    33b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33bc:	681b      	ldr	r3, [r3, #0]
    33be:	2b00      	cmp	r3, #0
    33c0:	d10f      	bne.n	33e2 <xTaskGenericCreate+0xb2>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    33c2:	f240 2324 	movw	r3, #548	; 0x224
    33c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33ca:	69ba      	ldr	r2, [r7, #24]
    33cc:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    33ce:	f240 23fc 	movw	r3, #764	; 0x2fc
    33d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33d6:	681b      	ldr	r3, [r3, #0]
    33d8:	2b01      	cmp	r3, #1
    33da:	d118      	bne.n	340e <xTaskGenericCreate+0xde>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    33dc:	f000 fecc 	bl	4178 <prvInitialiseTaskLists>
    33e0:	e015      	b.n	340e <xTaskGenericCreate+0xde>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    33e2:	f240 330c 	movw	r3, #780	; 0x30c
    33e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33ea:	681b      	ldr	r3, [r3, #0]
    33ec:	2b00      	cmp	r3, #0
    33ee:	d10e      	bne.n	340e <xTaskGenericCreate+0xde>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    33f0:	f240 2324 	movw	r3, #548	; 0x224
    33f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33f8:	681b      	ldr	r3, [r3, #0]
    33fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    33fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    33fe:	429a      	cmp	r2, r3
    3400:	d805      	bhi.n	340e <xTaskGenericCreate+0xde>
					{
						pxCurrentTCB = pxNewTCB;
    3402:	f240 2324 	movw	r3, #548	; 0x224
    3406:	f2c2 0300 	movt	r3, #8192	; 0x2000
    340a:	69ba      	ldr	r2, [r7, #24]
    340c:	601a      	str	r2, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    340e:	69bb      	ldr	r3, [r7, #24]
    3410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3412:	f240 3304 	movw	r3, #772	; 0x304
    3416:	f2c2 0300 	movt	r3, #8192	; 0x2000
    341a:	681b      	ldr	r3, [r3, #0]
    341c:	429a      	cmp	r2, r3
    341e:	d906      	bls.n	342e <xTaskGenericCreate+0xfe>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    3420:	69bb      	ldr	r3, [r7, #24]
    3422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3424:	f240 3304 	movw	r3, #772	; 0x304
    3428:	f2c2 0300 	movt	r3, #8192	; 0x2000
    342c:	601a      	str	r2, [r3, #0]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    342e:	f240 3320 	movw	r3, #800	; 0x320
    3432:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3436:	681b      	ldr	r3, [r3, #0]
    3438:	1c5a      	adds	r2, r3, #1
    343a:	f240 3320 	movw	r3, #800	; 0x320
    343e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3442:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
    3444:	69bb      	ldr	r3, [r7, #24]
    3446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3448:	f240 3308 	movw	r3, #776	; 0x308
    344c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3450:	681b      	ldr	r3, [r3, #0]
    3452:	429a      	cmp	r2, r3
    3454:	d906      	bls.n	3464 <xTaskGenericCreate+0x134>
    3456:	69bb      	ldr	r3, [r7, #24]
    3458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    345a:	f240 3308 	movw	r3, #776	; 0x308
    345e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3462:	601a      	str	r2, [r3, #0]
    3464:	69bb      	ldr	r3, [r7, #24]
    3466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3468:	4613      	mov	r3, r2
    346a:	009b      	lsls	r3, r3, #2
    346c:	4413      	add	r3, r2
    346e:	009b      	lsls	r3, r3, #2
    3470:	f240 2228 	movw	r2, #552	; 0x228
    3474:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3478:	441a      	add	r2, r3
    347a:	69bb      	ldr	r3, [r7, #24]
    347c:	3304      	adds	r3, #4
    347e:	4610      	mov	r0, r2
    3480:	4619      	mov	r1, r3
    3482:	f7ff fa6d 	bl	2960 <vListInsertEnd>

			xReturn = pdPASS;
    3486:	2301      	movs	r3, #1
    3488:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
    348a:	69b8      	ldr	r0, [r7, #24]
    348c:	f012 fe08 	bl	160a0 <myTraceCreate>
		}
		taskEXIT_CRITICAL();
    3490:	f001 f8d6 	bl	4640 <vPortExitCritical>
    3494:	e002      	b.n	349c <xTaskGenericCreate+0x16c>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    3496:	f04f 33ff 	mov.w	r3, #4294967295
    349a:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    349c:	69fb      	ldr	r3, [r7, #28]
    349e:	2b01      	cmp	r3, #1
    34a0:	d111      	bne.n	34c6 <xTaskGenericCreate+0x196>
	{
		if( xSchedulerRunning != pdFALSE )
    34a2:	f240 330c 	movw	r3, #780	; 0x30c
    34a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    34aa:	681b      	ldr	r3, [r3, #0]
    34ac:	2b00      	cmp	r3, #0
    34ae:	d00a      	beq.n	34c6 <xTaskGenericCreate+0x196>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    34b0:	f240 2324 	movw	r3, #548	; 0x224
    34b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    34b8:	681b      	ldr	r3, [r3, #0]
    34ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    34bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    34be:	429a      	cmp	r2, r3
    34c0:	d201      	bcs.n	34c6 <xTaskGenericCreate+0x196>
			{
				portYIELD_WITHIN_API();
    34c2:	f001 f899 	bl	45f8 <vPortYieldFromISR>
			}
		}
	}

	return xReturn;
    34c6:	69fb      	ldr	r3, [r7, #28]
}
    34c8:	4618      	mov	r0, r3
    34ca:	3720      	adds	r7, #32
    34cc:	46bd      	mov	sp, r7
    34ce:	bd80      	pop	{r7, pc}

000034d0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    34d0:	b580      	push	{r7, lr}
    34d2:	b084      	sub	sp, #16
    34d4:	af00      	add	r7, sp, #0
    34d6:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    34d8:	f001 f89c 	bl	4614 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    34dc:	f240 2324 	movw	r3, #548	; 0x224
    34e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    34e4:	681b      	ldr	r3, [r3, #0]
    34e6:	687a      	ldr	r2, [r7, #4]
    34e8:	429a      	cmp	r2, r3
    34ea:	d101      	bne.n	34f0 <vTaskDelete+0x20>
			{
				pxTaskToDelete = NULL;
    34ec:	2300      	movs	r3, #0
    34ee:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    34f0:	687b      	ldr	r3, [r7, #4]
    34f2:	2b00      	cmp	r3, #0
    34f4:	d105      	bne.n	3502 <vTaskDelete+0x32>
    34f6:	f240 2324 	movw	r3, #548	; 0x224
    34fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    34fe:	681b      	ldr	r3, [r3, #0]
    3500:	e000      	b.n	3504 <vTaskDelete+0x34>
    3502:	687b      	ldr	r3, [r7, #4]
    3504:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    3506:	68fb      	ldr	r3, [r7, #12]
    3508:	3304      	adds	r3, #4
    350a:	4618      	mov	r0, r3
    350c:	f7ff fa88 	bl	2a20 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    3510:	68fb      	ldr	r3, [r7, #12]
    3512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3514:	2b00      	cmp	r3, #0
    3516:	d004      	beq.n	3522 <vTaskDelete+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    3518:	68fb      	ldr	r3, [r7, #12]
    351a:	3318      	adds	r3, #24
    351c:	4618      	mov	r0, r3
    351e:	f7ff fa7f 	bl	2a20 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    3522:	68fb      	ldr	r3, [r7, #12]
    3524:	3304      	adds	r3, #4
    3526:	f240 20d0 	movw	r0, #720	; 0x2d0
    352a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    352e:	4619      	mov	r1, r3
    3530:	f7ff fa16 	bl	2960 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    3534:	f240 23e4 	movw	r3, #740	; 0x2e4
    3538:	f2c2 0300 	movt	r3, #8192	; 0x2000
    353c:	681b      	ldr	r3, [r3, #0]
    353e:	1c5a      	adds	r2, r3, #1
    3540:	f240 23e4 	movw	r3, #740	; 0x2e4
    3544:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3548:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    354a:	f240 3320 	movw	r3, #800	; 0x320
    354e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3552:	681b      	ldr	r3, [r3, #0]
    3554:	1c5a      	adds	r2, r3, #1
    3556:	f240 3320 	movw	r3, #800	; 0x320
    355a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    355e:	601a      	str	r2, [r3, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    3560:	f001 f86e 	bl	4640 <vPortExitCritical>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    3564:	f240 330c 	movw	r3, #780	; 0x30c
    3568:	f2c2 0300 	movt	r3, #8192	; 0x2000
    356c:	681b      	ldr	r3, [r3, #0]
    356e:	2b00      	cmp	r3, #0
    3570:	d004      	beq.n	357c <vTaskDelete+0xac>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    3572:	687b      	ldr	r3, [r7, #4]
    3574:	2b00      	cmp	r3, #0
    3576:	d101      	bne.n	357c <vTaskDelete+0xac>
			{
				portYIELD_WITHIN_API();
    3578:	f001 f83e 	bl	45f8 <vPortYieldFromISR>
			}
		}
	}
    357c:	3710      	adds	r7, #16
    357e:	46bd      	mov	sp, r7
    3580:	bd80      	pop	{r7, pc}
    3582:	bf00      	nop

00003584 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    3584:	b580      	push	{r7, lr}
    3586:	b086      	sub	sp, #24
    3588:	af00      	add	r7, sp, #0
    358a:	6078      	str	r0, [r7, #4]
    358c:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
    358e:	2300      	movs	r3, #0
    3590:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    3592:	f000 fa8b 	bl	3aac <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    3596:	687b      	ldr	r3, [r7, #4]
    3598:	681a      	ldr	r2, [r3, #0]
    359a:	683b      	ldr	r3, [r7, #0]
    359c:	4413      	add	r3, r2
    359e:	613b      	str	r3, [r7, #16]

			if( xTickCount < *pxPreviousWakeTime )
    35a0:	687b      	ldr	r3, [r7, #4]
    35a2:	681a      	ldr	r2, [r3, #0]
    35a4:	f240 3300 	movw	r3, #768	; 0x300
    35a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    35ac:	681b      	ldr	r3, [r3, #0]
    35ae:	429a      	cmp	r2, r3
    35b0:	d90f      	bls.n	35d2 <vTaskDelayUntil+0x4e>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    35b2:	687b      	ldr	r3, [r7, #4]
    35b4:	681a      	ldr	r2, [r3, #0]
    35b6:	693b      	ldr	r3, [r7, #16]
    35b8:	429a      	cmp	r2, r3
    35ba:	d919      	bls.n	35f0 <vTaskDelayUntil+0x6c>
    35bc:	f240 3300 	movw	r3, #768	; 0x300
    35c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    35c4:	681b      	ldr	r3, [r3, #0]
    35c6:	693a      	ldr	r2, [r7, #16]
    35c8:	429a      	cmp	r2, r3
    35ca:	d911      	bls.n	35f0 <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    35cc:	2301      	movs	r3, #1
    35ce:	617b      	str	r3, [r7, #20]
    35d0:	e00e      	b.n	35f0 <vTaskDelayUntil+0x6c>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    35d2:	687b      	ldr	r3, [r7, #4]
    35d4:	681a      	ldr	r2, [r3, #0]
    35d6:	693b      	ldr	r3, [r7, #16]
    35d8:	429a      	cmp	r2, r3
    35da:	d807      	bhi.n	35ec <vTaskDelayUntil+0x68>
    35dc:	f240 3300 	movw	r3, #768	; 0x300
    35e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    35e4:	681b      	ldr	r3, [r3, #0]
    35e6:	693a      	ldr	r2, [r7, #16]
    35e8:	429a      	cmp	r2, r3
    35ea:	d901      	bls.n	35f0 <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    35ec:	2301      	movs	r3, #1
    35ee:	617b      	str	r3, [r7, #20]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    35f0:	687b      	ldr	r3, [r7, #4]
    35f2:	693a      	ldr	r2, [r7, #16]
    35f4:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
    35f6:	697b      	ldr	r3, [r7, #20]
    35f8:	2b00      	cmp	r3, #0
    35fa:	d00b      	beq.n	3614 <vTaskDelayUntil+0x90>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    35fc:	f240 2324 	movw	r3, #548	; 0x224
    3600:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3604:	681b      	ldr	r3, [r3, #0]
    3606:	3304      	adds	r3, #4
    3608:	4618      	mov	r0, r3
    360a:	f7ff fa09 	bl	2a20 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    360e:	6938      	ldr	r0, [r7, #16]
    3610:	f000 fe46 	bl	42a0 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    3614:	f000 fa5c 	bl	3ad0 <xTaskResumeAll>
    3618:	60f8      	str	r0, [r7, #12]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    361a:	68fb      	ldr	r3, [r7, #12]
    361c:	2b00      	cmp	r3, #0
    361e:	d101      	bne.n	3624 <vTaskDelayUntil+0xa0>
		{
			portYIELD_WITHIN_API();
    3620:	f000 ffea 	bl	45f8 <vPortYieldFromISR>
		}
	}
    3624:	3718      	adds	r7, #24
    3626:	46bd      	mov	sp, r7
    3628:	bd80      	pop	{r7, pc}
    362a:	bf00      	nop

0000362c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    362c:	b580      	push	{r7, lr}
    362e:	b084      	sub	sp, #16
    3630:	af00      	add	r7, sp, #0
    3632:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    3634:	2300      	movs	r3, #0
    3636:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    3638:	687b      	ldr	r3, [r7, #4]
    363a:	2b00      	cmp	r3, #0
    363c:	d018      	beq.n	3670 <vTaskDelay+0x44>
		{
			vTaskSuspendAll();
    363e:	f000 fa35 	bl	3aac <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    3642:	f240 3300 	movw	r3, #768	; 0x300
    3646:	f2c2 0300 	movt	r3, #8192	; 0x2000
    364a:	681a      	ldr	r2, [r3, #0]
    364c:	687b      	ldr	r3, [r7, #4]
    364e:	4413      	add	r3, r2
    3650:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3652:	f240 2324 	movw	r3, #548	; 0x224
    3656:	f2c2 0300 	movt	r3, #8192	; 0x2000
    365a:	681b      	ldr	r3, [r3, #0]
    365c:	3304      	adds	r3, #4
    365e:	4618      	mov	r0, r3
    3660:	f7ff f9de 	bl	2a20 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    3664:	68b8      	ldr	r0, [r7, #8]
    3666:	f000 fe1b 	bl	42a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    366a:	f000 fa31 	bl	3ad0 <xTaskResumeAll>
    366e:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    3670:	68fb      	ldr	r3, [r7, #12]
    3672:	2b00      	cmp	r3, #0
    3674:	d101      	bne.n	367a <vTaskDelay+0x4e>
		{
			portYIELD_WITHIN_API();
    3676:	f000 ffbf 	bl	45f8 <vPortYieldFromISR>
		}
	}
    367a:	3710      	adds	r7, #16
    367c:	46bd      	mov	sp, r7
    367e:	bd80      	pop	{r7, pc}

00003680 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
	{
    3680:	b580      	push	{r7, lr}
    3682:	b084      	sub	sp, #16
    3684:	af00      	add	r7, sp, #0
    3686:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxReturn;

		taskENTER_CRITICAL();
    3688:	f000 ffc4 	bl	4614 <vPortEnterCritical>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    368c:	687b      	ldr	r3, [r7, #4]
    368e:	2b00      	cmp	r3, #0
    3690:	d105      	bne.n	369e <uxTaskPriorityGet+0x1e>
    3692:	f240 2324 	movw	r3, #548	; 0x224
    3696:	f2c2 0300 	movt	r3, #8192	; 0x2000
    369a:	681b      	ldr	r3, [r3, #0]
    369c:	e000      	b.n	36a0 <uxTaskPriorityGet+0x20>
    369e:	687b      	ldr	r3, [r7, #4]
    36a0:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
    36a2:	68fb      	ldr	r3, [r7, #12]
    36a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    36a6:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
    36a8:	f000 ffca 	bl	4640 <vPortExitCritical>

		return uxReturn;
    36ac:	68bb      	ldr	r3, [r7, #8]
	}
    36ae:	4618      	mov	r0, r3
    36b0:	3710      	adds	r7, #16
    36b2:	46bd      	mov	sp, r7
    36b4:	bd80      	pop	{r7, pc}
    36b6:	bf00      	nop

000036b8 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
	{
    36b8:	b580      	push	{r7, lr}
    36ba:	b086      	sub	sp, #24
    36bc:	af00      	add	r7, sp, #0
    36be:	6078      	str	r0, [r7, #4]
    36c0:	6039      	str	r1, [r7, #0]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxCurrentPriority;
	portBASE_TYPE xYieldRequired = pdFALSE;
    36c2:	2300      	movs	r3, #0
    36c4:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= configMAX_PRIORITIES )
    36c6:	683b      	ldr	r3, [r7, #0]
    36c8:	2b04      	cmp	r3, #4
    36ca:	d901      	bls.n	36d0 <vTaskPrioritySet+0x18>
		{
			uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    36cc:	2304      	movs	r3, #4
    36ce:	603b      	str	r3, [r7, #0]
		}

		taskENTER_CRITICAL();
    36d0:	f000 ffa0 	bl	4614 <vPortEnterCritical>
		{
			if( pxTask == pxCurrentTCB )
    36d4:	f240 2324 	movw	r3, #548	; 0x224
    36d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    36dc:	681b      	ldr	r3, [r3, #0]
    36de:	687a      	ldr	r2, [r7, #4]
    36e0:	429a      	cmp	r2, r3
    36e2:	d101      	bne.n	36e8 <vTaskPrioritySet+0x30>
			{
				pxTask = NULL;
    36e4:	2300      	movs	r3, #0
    36e6:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    36e8:	687b      	ldr	r3, [r7, #4]
    36ea:	2b00      	cmp	r3, #0
    36ec:	d105      	bne.n	36fa <vTaskPrioritySet+0x42>
    36ee:	f240 2324 	movw	r3, #548	; 0x224
    36f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    36f6:	681b      	ldr	r3, [r3, #0]
    36f8:	e000      	b.n	36fc <vTaskPrioritySet+0x44>
    36fa:	687b      	ldr	r3, [r7, #4]
    36fc:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentPriority = pxTCB->uxBasePriority;
    36fe:	693b      	ldr	r3, [r7, #16]
    3700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3702:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentPriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentPriority != uxNewPriority )
    3704:	68fa      	ldr	r2, [r7, #12]
    3706:	683b      	ldr	r3, [r7, #0]
    3708:	429a      	cmp	r2, r3
    370a:	d058      	beq.n	37be <vTaskPrioritySet+0x106>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentPriority )
    370c:	683a      	ldr	r2, [r7, #0]
    370e:	68fb      	ldr	r3, [r7, #12]
    3710:	429a      	cmp	r2, r3
    3712:	d905      	bls.n	3720 <vTaskPrioritySet+0x68>
				{
					if( pxTask != NULL )
    3714:	687b      	ldr	r3, [r7, #4]
    3716:	2b00      	cmp	r3, #0
    3718:	d007      	beq.n	372a <vTaskPrioritySet+0x72>
					{
						/* The priority of another task is being raised.  If we
						were raising the priority of the currently running task
						there would be no need to switch as it must have already
						been the highest priority task. */
						xYieldRequired = pdTRUE;
    371a:	2301      	movs	r3, #1
    371c:	617b      	str	r3, [r7, #20]
    371e:	e004      	b.n	372a <vTaskPrioritySet+0x72>
					}
				}
				else if( pxTask == NULL )
    3720:	687b      	ldr	r3, [r7, #4]
    3722:	2b00      	cmp	r3, #0
    3724:	d101      	bne.n	372a <vTaskPrioritySet+0x72>
				{
					/* Setting our own priority down means there may now be another
					task of higher priority that is ready to execute. */
					xYieldRequired = pdTRUE;
    3726:	2301      	movs	r3, #1
    3728:	617b      	str	r3, [r7, #20]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    372a:	693b      	ldr	r3, [r7, #16]
    372c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    372e:	693b      	ldr	r3, [r7, #16]
    3730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3732:	429a      	cmp	r2, r3
    3734:	d102      	bne.n	373c <vTaskPrioritySet+0x84>
					{
						pxTCB->uxPriority = uxNewPriority;
    3736:	693b      	ldr	r3, [r7, #16]
    3738:	683a      	ldr	r2, [r7, #0]
    373a:	62da      	str	r2, [r3, #44]	; 0x2c
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
    373c:	693b      	ldr	r3, [r7, #16]
    373e:	683a      	ldr	r2, [r7, #0]
    3740:	645a      	str	r2, [r3, #68]	; 0x44
				{
					pxTCB->uxPriority = uxNewPriority;
				}
				#endif

				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
    3742:	683b      	ldr	r3, [r7, #0]
    3744:	f1c3 0205 	rsb	r2, r3, #5
    3748:	693b      	ldr	r3, [r7, #16]
    374a:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the queue appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
    374c:	693b      	ldr	r3, [r7, #16]
    374e:	6959      	ldr	r1, [r3, #20]
    3750:	68fa      	ldr	r2, [r7, #12]
    3752:	4613      	mov	r3, r2
    3754:	009b      	lsls	r3, r3, #2
    3756:	4413      	add	r3, r2
    3758:	009b      	lsls	r3, r3, #2
    375a:	f240 2228 	movw	r2, #552	; 0x228
    375e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3762:	4413      	add	r3, r2
    3764:	4299      	cmp	r1, r3
    3766:	d125      	bne.n	37b4 <vTaskPrioritySet+0xfc>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					vListRemove( &( pxTCB->xGenericListItem ) );
    3768:	693b      	ldr	r3, [r7, #16]
    376a:	3304      	adds	r3, #4
    376c:	4618      	mov	r0, r3
    376e:	f7ff f957 	bl	2a20 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    3772:	693b      	ldr	r3, [r7, #16]
    3774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3776:	f240 3308 	movw	r3, #776	; 0x308
    377a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    377e:	681b      	ldr	r3, [r3, #0]
    3780:	429a      	cmp	r2, r3
    3782:	d906      	bls.n	3792 <vTaskPrioritySet+0xda>
    3784:	693b      	ldr	r3, [r7, #16]
    3786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3788:	f240 3308 	movw	r3, #776	; 0x308
    378c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3790:	601a      	str	r2, [r3, #0]
    3792:	693b      	ldr	r3, [r7, #16]
    3794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3796:	4613      	mov	r3, r2
    3798:	009b      	lsls	r3, r3, #2
    379a:	4413      	add	r3, r2
    379c:	009b      	lsls	r3, r3, #2
    379e:	f240 2228 	movw	r2, #552	; 0x228
    37a2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    37a6:	441a      	add	r2, r3
    37a8:	693b      	ldr	r3, [r7, #16]
    37aa:	3304      	adds	r3, #4
    37ac:	4610      	mov	r0, r2
    37ae:	4619      	mov	r1, r3
    37b0:	f7ff f8d6 	bl	2960 <vListInsertEnd>
				}

				if( xYieldRequired == pdTRUE )
    37b4:	697b      	ldr	r3, [r7, #20]
    37b6:	2b01      	cmp	r3, #1
    37b8:	d101      	bne.n	37be <vTaskPrioritySet+0x106>
				{
					portYIELD_WITHIN_API();
    37ba:	f000 ff1d 	bl	45f8 <vPortYieldFromISR>
				}
			}
		}
		taskEXIT_CRITICAL();
    37be:	f000 ff3f 	bl	4640 <vPortExitCritical>
	}
    37c2:	3718      	adds	r7, #24
    37c4:	46bd      	mov	sp, r7
    37c6:	bd80      	pop	{r7, pc}

000037c8 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
    37c8:	b580      	push	{r7, lr}
    37ca:	b084      	sub	sp, #16
    37cc:	af00      	add	r7, sp, #0
    37ce:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    37d0:	f000 ff20 	bl	4614 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
    37d4:	f240 2324 	movw	r3, #548	; 0x224
    37d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    37dc:	681b      	ldr	r3, [r3, #0]
    37de:	687a      	ldr	r2, [r7, #4]
    37e0:	429a      	cmp	r2, r3
    37e2:	d101      	bne.n	37e8 <vTaskSuspend+0x20>
			{
				pxTaskToSuspend = NULL;
    37e4:	2300      	movs	r3, #0
    37e6:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
    37e8:	687b      	ldr	r3, [r7, #4]
    37ea:	2b00      	cmp	r3, #0
    37ec:	d105      	bne.n	37fa <vTaskSuspend+0x32>
    37ee:	f240 2324 	movw	r3, #548	; 0x224
    37f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    37f6:	681b      	ldr	r3, [r3, #0]
    37f8:	e000      	b.n	37fc <vTaskSuspend+0x34>
    37fa:	687b      	ldr	r3, [r7, #4]
    37fc:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    37fe:	68fb      	ldr	r3, [r7, #12]
    3800:	3304      	adds	r3, #4
    3802:	4618      	mov	r0, r3
    3804:	f7ff f90c 	bl	2a20 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    3808:	68fb      	ldr	r3, [r7, #12]
    380a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    380c:	2b00      	cmp	r3, #0
    380e:	d004      	beq.n	381a <vTaskSuspend+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    3810:	68fb      	ldr	r3, [r7, #12]
    3812:	3318      	adds	r3, #24
    3814:	4618      	mov	r0, r3
    3816:	f7ff f903 	bl	2a20 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
    381a:	68fb      	ldr	r3, [r7, #12]
    381c:	3304      	adds	r3, #4
    381e:	f240 20e8 	movw	r0, #744	; 0x2e8
    3822:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3826:	4619      	mov	r1, r3
    3828:	f7ff f89a 	bl	2960 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    382c:	f000 ff08 	bl	4640 <vPortExitCritical>

		if( ( void * ) pxTaskToSuspend == NULL )
    3830:	687b      	ldr	r3, [r7, #4]
    3832:	2b00      	cmp	r3, #0
    3834:	d11e      	bne.n	3874 <vTaskSuspend+0xac>
		{
			if( xSchedulerRunning != pdFALSE )
    3836:	f240 330c 	movw	r3, #780	; 0x30c
    383a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    383e:	681b      	ldr	r3, [r3, #0]
    3840:	2b00      	cmp	r3, #0
    3842:	d002      	beq.n	384a <vTaskSuspend+0x82>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
    3844:	f000 fed8 	bl	45f8 <vPortYieldFromISR>
    3848:	e014      	b.n	3874 <vTaskSuspend+0xac>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    384a:	f240 23e8 	movw	r3, #744	; 0x2e8
    384e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3852:	681a      	ldr	r2, [r3, #0]
    3854:	f240 23fc 	movw	r3, #764	; 0x2fc
    3858:	f2c2 0300 	movt	r3, #8192	; 0x2000
    385c:	681b      	ldr	r3, [r3, #0]
    385e:	429a      	cmp	r2, r3
    3860:	d106      	bne.n	3870 <vTaskSuspend+0xa8>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    3862:	f240 2324 	movw	r3, #548	; 0x224
    3866:	f2c2 0300 	movt	r3, #8192	; 0x2000
    386a:	2200      	movs	r2, #0
    386c:	601a      	str	r2, [r3, #0]
    386e:	e001      	b.n	3874 <vTaskSuspend+0xac>
				}
				else
				{
					vTaskSwitchContext();
    3870:	f000 fade 	bl	3e30 <vTaskSwitchContext>
				}
			}
		}
	}
    3874:	3710      	adds	r7, #16
    3876:	46bd      	mov	sp, r7
    3878:	bd80      	pop	{r7, pc}
    387a:	bf00      	nop

0000387c <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
    387c:	b480      	push	{r7}
    387e:	b085      	sub	sp, #20
    3880:	af00      	add	r7, sp, #0
    3882:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xReturn = pdFALSE;
    3884:	2300      	movs	r3, #0
    3886:	60fb      	str	r3, [r7, #12]
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
    3888:	687b      	ldr	r3, [r7, #4]
    388a:	60bb      	str	r3, [r7, #8]
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    388c:	68bb      	ldr	r3, [r7, #8]
    388e:	695a      	ldr	r2, [r3, #20]
    3890:	f240 23e8 	movw	r3, #744	; 0x2e8
    3894:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3898:	429a      	cmp	r2, r3
    389a:	d10d      	bne.n	38b8 <xTaskIsTaskSuspended+0x3c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    389c:	68bb      	ldr	r3, [r7, #8]
    389e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    38a0:	f240 23bc 	movw	r3, #700	; 0x2bc
    38a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    38a8:	429a      	cmp	r2, r3
    38aa:	d005      	beq.n	38b8 <xTaskIsTaskSuspended+0x3c>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
    38ac:	68bb      	ldr	r3, [r7, #8]
    38ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    38b0:	2b00      	cmp	r3, #0
    38b2:	d101      	bne.n	38b8 <xTaskIsTaskSuspended+0x3c>
				{
					xReturn = pdTRUE;
    38b4:	2301      	movs	r3, #1
    38b6:	60fb      	str	r3, [r7, #12]
				}
			}
		}

		return xReturn;
    38b8:	68fb      	ldr	r3, [r7, #12]
	}
    38ba:	4618      	mov	r0, r3
    38bc:	3714      	adds	r7, #20
    38be:	46bd      	mov	sp, r7
    38c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    38c4:	4770      	bx	lr
    38c6:	bf00      	nop

000038c8 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
    38c8:	b580      	push	{r7, lr}
    38ca:	b084      	sub	sp, #16
    38cc:	af00      	add	r7, sp, #0
    38ce:	6078      	str	r0, [r7, #4]
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
    38d0:	687b      	ldr	r3, [r7, #4]
    38d2:	60fb      	str	r3, [r7, #12]

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    38d4:	68fb      	ldr	r3, [r7, #12]
    38d6:	2b00      	cmp	r3, #0
    38d8:	d043      	beq.n	3962 <vTaskResume+0x9a>
    38da:	f240 2324 	movw	r3, #548	; 0x224
    38de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    38e2:	681b      	ldr	r3, [r3, #0]
    38e4:	68fa      	ldr	r2, [r7, #12]
    38e6:	429a      	cmp	r2, r3
    38e8:	d03b      	beq.n	3962 <vTaskResume+0x9a>
		{
			taskENTER_CRITICAL();
    38ea:	f000 fe93 	bl	4614 <vPortEnterCritical>
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    38ee:	68f8      	ldr	r0, [r7, #12]
    38f0:	f7ff ffc4 	bl	387c <xTaskIsTaskSuspended>
    38f4:	4603      	mov	r3, r0
    38f6:	2b01      	cmp	r3, #1
    38f8:	d131      	bne.n	395e <vTaskResume+0x96>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
    38fa:	68fb      	ldr	r3, [r7, #12]
    38fc:	3304      	adds	r3, #4
    38fe:	4618      	mov	r0, r3
    3900:	f7ff f88e 	bl	2a20 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    3904:	68fb      	ldr	r3, [r7, #12]
    3906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3908:	f240 3308 	movw	r3, #776	; 0x308
    390c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3910:	681b      	ldr	r3, [r3, #0]
    3912:	429a      	cmp	r2, r3
    3914:	d906      	bls.n	3924 <vTaskResume+0x5c>
    3916:	68fb      	ldr	r3, [r7, #12]
    3918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    391a:	f240 3308 	movw	r3, #776	; 0x308
    391e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3922:	601a      	str	r2, [r3, #0]
    3924:	68fb      	ldr	r3, [r7, #12]
    3926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3928:	4613      	mov	r3, r2
    392a:	009b      	lsls	r3, r3, #2
    392c:	4413      	add	r3, r2
    392e:	009b      	lsls	r3, r3, #2
    3930:	f240 2228 	movw	r2, #552	; 0x228
    3934:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3938:	441a      	add	r2, r3
    393a:	68fb      	ldr	r3, [r7, #12]
    393c:	3304      	adds	r3, #4
    393e:	4610      	mov	r0, r2
    3940:	4619      	mov	r1, r3
    3942:	f7ff f80d 	bl	2960 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3946:	68fb      	ldr	r3, [r7, #12]
    3948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    394a:	f240 2324 	movw	r3, #548	; 0x224
    394e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3952:	681b      	ldr	r3, [r3, #0]
    3954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3956:	429a      	cmp	r2, r3
    3958:	d301      	bcc.n	395e <vTaskResume+0x96>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
    395a:	f000 fe4d 	bl	45f8 <vPortYieldFromISR>
					}
				}
			}
			taskEXIT_CRITICAL();
    395e:	f000 fe6f 	bl	4640 <vPortExitCritical>
		}
	}
    3962:	3710      	adds	r7, #16
    3964:	46bd      	mov	sp, r7
    3966:	bd80      	pop	{r7, pc}

00003968 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
    3968:	b580      	push	{r7, lr}
    396a:	b086      	sub	sp, #24
    396c:	af00      	add	r7, sp, #0
    396e:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xYieldRequired = pdFALSE;
    3970:	2300      	movs	r3, #0
    3972:	617b      	str	r3, [r7, #20]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxSavedInterruptStatus;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
    3974:	687b      	ldr	r3, [r7, #4]
    3976:	613b      	str	r3, [r7, #16]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    3978:	2300      	movs	r3, #0
    397a:	60fb      	str	r3, [r7, #12]
    397c:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    3980:	f380 8811 	msr	BASEPRI, r0
		{
			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    3984:	6938      	ldr	r0, [r7, #16]
    3986:	f7ff ff79 	bl	387c <xTaskIsTaskSuspended>
    398a:	4603      	mov	r3, r0
    398c:	2b01      	cmp	r3, #1
    398e:	d144      	bne.n	3a1a <xTaskResumeFromISR+0xb2>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3990:	f240 3310 	movw	r3, #784	; 0x310
    3994:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3998:	681b      	ldr	r3, [r3, #0]
    399a:	2b00      	cmp	r3, #0
    399c:	d134      	bne.n	3a08 <xTaskResumeFromISR+0xa0>
				{
					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
    399e:	693b      	ldr	r3, [r7, #16]
    39a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    39a2:	f240 2324 	movw	r3, #548	; 0x224
    39a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    39aa:	681b      	ldr	r3, [r3, #0]
    39ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    39ae:	429a      	cmp	r2, r3
    39b0:	bf34      	ite	cc
    39b2:	2300      	movcc	r3, #0
    39b4:	2301      	movcs	r3, #1
    39b6:	b2db      	uxtb	r3, r3
    39b8:	617b      	str	r3, [r7, #20]
					vListRemove(  &( pxTCB->xGenericListItem ) );
    39ba:	693b      	ldr	r3, [r7, #16]
    39bc:	3304      	adds	r3, #4
    39be:	4618      	mov	r0, r3
    39c0:	f7ff f82e 	bl	2a20 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    39c4:	693b      	ldr	r3, [r7, #16]
    39c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    39c8:	f240 3308 	movw	r3, #776	; 0x308
    39cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    39d0:	681b      	ldr	r3, [r3, #0]
    39d2:	429a      	cmp	r2, r3
    39d4:	d906      	bls.n	39e4 <xTaskResumeFromISR+0x7c>
    39d6:	693b      	ldr	r3, [r7, #16]
    39d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    39da:	f240 3308 	movw	r3, #776	; 0x308
    39de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    39e2:	601a      	str	r2, [r3, #0]
    39e4:	693b      	ldr	r3, [r7, #16]
    39e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    39e8:	4613      	mov	r3, r2
    39ea:	009b      	lsls	r3, r3, #2
    39ec:	4413      	add	r3, r2
    39ee:	009b      	lsls	r3, r3, #2
    39f0:	f240 2228 	movw	r2, #552	; 0x228
    39f4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    39f8:	441a      	add	r2, r3
    39fa:	693b      	ldr	r3, [r7, #16]
    39fc:	3304      	adds	r3, #4
    39fe:	4610      	mov	r0, r2
    3a00:	4619      	mov	r1, r3
    3a02:	f7fe ffad 	bl	2960 <vListInsertEnd>
    3a06:	e008      	b.n	3a1a <xTaskResumeFromISR+0xb2>
				else
				{
					/* We cannot access the delayed or ready lists, so will hold this
					task pending until the scheduler is resumed, at which point a
					yield will be performed if necessary. */
					vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    3a08:	693b      	ldr	r3, [r7, #16]
    3a0a:	3318      	adds	r3, #24
    3a0c:	f240 20bc 	movw	r0, #700	; 0x2bc
    3a10:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3a14:	4619      	mov	r1, r3
    3a16:	f7fe ffa3 	bl	2960 <vListInsertEnd>
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    3a1a:	f04f 0000 	mov.w	r0, #0
    3a1e:	f380 8811 	msr	BASEPRI, r0

		return xYieldRequired;
    3a22:	697b      	ldr	r3, [r7, #20]
	}
    3a24:	4618      	mov	r0, r3
    3a26:	3718      	adds	r7, #24
    3a28:	46bd      	mov	sp, r7
    3a2a:	bd80      	pop	{r7, pc}

00003a2c <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    3a2c:	b580      	push	{r7, lr}
    3a2e:	b086      	sub	sp, #24
    3a30:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    3a32:	2300      	movs	r3, #0
    3a34:	9300      	str	r3, [sp, #0]
    3a36:	2300      	movs	r3, #0
    3a38:	9301      	str	r3, [sp, #4]
    3a3a:	2300      	movs	r3, #0
    3a3c:	9302      	str	r3, [sp, #8]
    3a3e:	2300      	movs	r3, #0
    3a40:	9303      	str	r3, [sp, #12]
    3a42:	f244 00e9 	movw	r0, #16617	; 0x40e9
    3a46:	f2c0 0000 	movt	r0, #0
    3a4a:	f247 21e8 	movw	r1, #29416	; 0x72e8
    3a4e:	f2c0 0101 	movt	r1, #1
    3a52:	2280      	movs	r2, #128	; 0x80
    3a54:	2300      	movs	r3, #0
    3a56:	f7ff fc6b 	bl	3330 <xTaskGenericCreate>
    3a5a:	6078      	str	r0, [r7, #4]
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
    3a5c:	687b      	ldr	r3, [r7, #4]
    3a5e:	2b01      	cmp	r3, #1
    3a60:	d111      	bne.n	3a86 <vTaskStartScheduler+0x5a>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
    3a62:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    3a66:	f380 8811 	msr	BASEPRI, r0

		xSchedulerRunning = pdTRUE;
    3a6a:	f240 330c 	movw	r3, #780	; 0x30c
    3a6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a72:	2201      	movs	r2, #1
    3a74:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
    3a76:	f240 3300 	movw	r3, #768	; 0x300
    3a7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a7e:	2200      	movs	r2, #0
    3a80:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    3a82:	f000 fd8b 	bl	459c <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    3a86:	3708      	adds	r7, #8
    3a88:	46bd      	mov	sp, r7
    3a8a:	bd80      	pop	{r7, pc}

00003a8c <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    3a8c:	b580      	push	{r7, lr}
    3a8e:	af00      	add	r7, sp, #0
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    3a90:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    3a94:	f380 8811 	msr	BASEPRI, r0
	xSchedulerRunning = pdFALSE;
    3a98:	f240 330c 	movw	r3, #780	; 0x30c
    3a9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3aa0:	2200      	movs	r2, #0
    3aa2:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
    3aa4:	f000 fda2 	bl	45ec <vPortEndScheduler>
}
    3aa8:	bd80      	pop	{r7, pc}
    3aaa:	bf00      	nop

00003aac <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    3aac:	b480      	push	{r7}
    3aae:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    3ab0:	f240 3310 	movw	r3, #784	; 0x310
    3ab4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ab8:	681b      	ldr	r3, [r3, #0]
    3aba:	1c5a      	adds	r2, r3, #1
    3abc:	f240 3310 	movw	r3, #784	; 0x310
    3ac0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ac4:	601a      	str	r2, [r3, #0]
}
    3ac6:	46bd      	mov	sp, r7
    3ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
    3acc:	4770      	bx	lr
    3ace:	bf00      	nop

00003ad0 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    3ad0:	b590      	push	{r4, r7, lr}
    3ad2:	b083      	sub	sp, #12
    3ad4:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    3ad6:	2300      	movs	r3, #0
    3ad8:	607b      	str	r3, [r7, #4]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    3ada:	f000 fd9b 	bl	4614 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
    3ade:	f240 3310 	movw	r3, #784	; 0x310
    3ae2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ae6:	681b      	ldr	r3, [r3, #0]
    3ae8:	1e5a      	subs	r2, r3, #1
    3aea:	f240 3310 	movw	r3, #784	; 0x310
    3aee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3af2:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3af4:	f240 3310 	movw	r3, #784	; 0x310
    3af8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3afc:	681b      	ldr	r3, [r3, #0]
    3afe:	2b00      	cmp	r3, #0
    3b00:	d179      	bne.n	3bf6 <xTaskResumeAll+0x126>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    3b02:	f240 23fc 	movw	r3, #764	; 0x2fc
    3b06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b0a:	681b      	ldr	r3, [r3, #0]
    3b0c:	2b00      	cmp	r3, #0
    3b0e:	d072      	beq.n	3bf6 <xTaskResumeAll+0x126>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
    3b10:	2300      	movs	r3, #0
    3b12:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    3b14:	e036      	b.n	3b84 <xTaskResumeAll+0xb4>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    3b16:	f240 23bc 	movw	r3, #700	; 0x2bc
    3b1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b1e:	68db      	ldr	r3, [r3, #12]
    3b20:	68dc      	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
    3b22:	f104 0318 	add.w	r3, r4, #24
    3b26:	4618      	mov	r0, r3
    3b28:	f7fe ff7a 	bl	2a20 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    3b2c:	1d23      	adds	r3, r4, #4
    3b2e:	4618      	mov	r0, r3
    3b30:	f7fe ff76 	bl	2a20 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    3b34:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3b36:	f240 3308 	movw	r3, #776	; 0x308
    3b3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b3e:	681b      	ldr	r3, [r3, #0]
    3b40:	429a      	cmp	r2, r3
    3b42:	d905      	bls.n	3b50 <xTaskResumeAll+0x80>
    3b44:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3b46:	f240 3308 	movw	r3, #776	; 0x308
    3b4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b4e:	601a      	str	r2, [r3, #0]
    3b50:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3b52:	4613      	mov	r3, r2
    3b54:	009b      	lsls	r3, r3, #2
    3b56:	4413      	add	r3, r2
    3b58:	009b      	lsls	r3, r3, #2
    3b5a:	f240 2228 	movw	r2, #552	; 0x228
    3b5e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3b62:	441a      	add	r2, r3
    3b64:	1d23      	adds	r3, r4, #4
    3b66:	4610      	mov	r0, r2
    3b68:	4619      	mov	r1, r3
    3b6a:	f7fe fef9 	bl	2960 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3b6e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3b70:	f240 2324 	movw	r3, #548	; 0x224
    3b74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b78:	681b      	ldr	r3, [r3, #0]
    3b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3b7c:	429a      	cmp	r2, r3
    3b7e:	d301      	bcc.n	3b84 <xTaskResumeAll+0xb4>
					{
						xYieldRequired = pdTRUE;
    3b80:	2301      	movs	r3, #1
    3b82:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    3b84:	f240 23bc 	movw	r3, #700	; 0x2bc
    3b88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b8c:	681b      	ldr	r3, [r3, #0]
    3b8e:	2b00      	cmp	r3, #0
    3b90:	d1c1      	bne.n	3b16 <xTaskResumeAll+0x46>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    3b92:	f240 3314 	movw	r3, #788	; 0x314
    3b96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b9a:	681b      	ldr	r3, [r3, #0]
    3b9c:	2b00      	cmp	r3, #0
    3b9e:	d016      	beq.n	3bce <xTaskResumeAll+0xfe>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    3ba0:	e00c      	b.n	3bbc <xTaskResumeAll+0xec>
					{
						vTaskIncrementTick();
    3ba2:	f000 f867 	bl	3c74 <vTaskIncrementTick>
						--uxMissedTicks;
    3ba6:	f240 3314 	movw	r3, #788	; 0x314
    3baa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3bae:	681b      	ldr	r3, [r3, #0]
    3bb0:	1e5a      	subs	r2, r3, #1
    3bb2:	f240 3314 	movw	r3, #788	; 0x314
    3bb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3bba:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    3bbc:	f240 3314 	movw	r3, #788	; 0x314
    3bc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3bc4:	681b      	ldr	r3, [r3, #0]
    3bc6:	2b00      	cmp	r3, #0
    3bc8:	d1eb      	bne.n	3ba2 <xTaskResumeAll+0xd2>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
    3bca:	2301      	movs	r3, #1
    3bcc:	603b      	str	r3, [r7, #0]
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    3bce:	683b      	ldr	r3, [r7, #0]
    3bd0:	2b01      	cmp	r3, #1
    3bd2:	d006      	beq.n	3be2 <xTaskResumeAll+0x112>
    3bd4:	f240 3318 	movw	r3, #792	; 0x318
    3bd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3bdc:	681b      	ldr	r3, [r3, #0]
    3bde:	2b01      	cmp	r3, #1
    3be0:	d109      	bne.n	3bf6 <xTaskResumeAll+0x126>
				{
					xAlreadyYielded = pdTRUE;
    3be2:	2301      	movs	r3, #1
    3be4:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
    3be6:	f240 3318 	movw	r3, #792	; 0x318
    3bea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3bee:	2200      	movs	r2, #0
    3bf0:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
    3bf2:	f000 fd01 	bl	45f8 <vPortYieldFromISR>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    3bf6:	f000 fd23 	bl	4640 <vPortExitCritical>

	return xAlreadyYielded;
    3bfa:	687b      	ldr	r3, [r7, #4]
}
    3bfc:	4618      	mov	r0, r3
    3bfe:	370c      	adds	r7, #12
    3c00:	46bd      	mov	sp, r7
    3c02:	bd90      	pop	{r4, r7, pc}

00003c04 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    3c04:	b580      	push	{r7, lr}
    3c06:	b082      	sub	sp, #8
    3c08:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    3c0a:	f000 fd03 	bl	4614 <vPortEnterCritical>
	{
		xTicks = xTickCount;
    3c0e:	f240 3300 	movw	r3, #768	; 0x300
    3c12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c16:	681b      	ldr	r3, [r3, #0]
    3c18:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
    3c1a:	f000 fd11 	bl	4640 <vPortExitCritical>

	return xTicks;
    3c1e:	687b      	ldr	r3, [r7, #4]
}
    3c20:	4618      	mov	r0, r3
    3c22:	3708      	adds	r7, #8
    3c24:	46bd      	mov	sp, r7
    3c26:	bd80      	pop	{r7, pc}

00003c28 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
    3c28:	b480      	push	{r7}
    3c2a:	b083      	sub	sp, #12
    3c2c:	af00      	add	r7, sp, #0
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    3c2e:	2300      	movs	r3, #0
    3c30:	607b      	str	r3, [r7, #4]
    3c32:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    3c36:	f380 8811 	msr	BASEPRI, r0
	xReturn = xTickCount;
    3c3a:	f240 3300 	movw	r3, #768	; 0x300
    3c3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c42:	681b      	ldr	r3, [r3, #0]
    3c44:	603b      	str	r3, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    3c46:	f04f 0000 	mov.w	r0, #0
    3c4a:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    3c4e:	683b      	ldr	r3, [r7, #0]
}
    3c50:	4618      	mov	r0, r3
    3c52:	370c      	adds	r7, #12
    3c54:	46bd      	mov	sp, r7
    3c56:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c5a:	4770      	bx	lr

00003c5c <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
    3c5c:	b480      	push	{r7}
    3c5e:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    3c60:	f240 23fc 	movw	r3, #764	; 0x2fc
    3c64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c68:	681b      	ldr	r3, [r3, #0]
}
    3c6a:	4618      	mov	r0, r3
    3c6c:	46bd      	mov	sp, r7
    3c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c72:	4770      	bx	lr

00003c74 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    3c74:	b580      	push	{r7, lr}
    3c76:	b084      	sub	sp, #16
    3c78:	af00      	add	r7, sp, #0
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3c7a:	f240 3310 	movw	r3, #784	; 0x310
    3c7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c82:	681b      	ldr	r3, [r3, #0]
    3c84:	2b00      	cmp	r3, #0
    3c86:	f040 80b9 	bne.w	3dfc <vTaskIncrementTick+0x188>
	{
		++xTickCount;
    3c8a:	f240 3300 	movw	r3, #768	; 0x300
    3c8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c92:	681b      	ldr	r3, [r3, #0]
    3c94:	1c5a      	adds	r2, r3, #1
    3c96:	f240 3300 	movw	r3, #768	; 0x300
    3c9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c9e:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
    3ca0:	f240 3300 	movw	r3, #768	; 0x300
    3ca4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ca8:	681b      	ldr	r3, [r3, #0]
    3caa:	2b00      	cmp	r3, #0
    3cac:	d13f      	bne.n	3d2e <vTaskIncrementTick+0xba>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    3cae:	f240 23b4 	movw	r3, #692	; 0x2b4
    3cb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3cb6:	681b      	ldr	r3, [r3, #0]
    3cb8:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    3cba:	f240 23b8 	movw	r3, #696	; 0x2b8
    3cbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3cc2:	681a      	ldr	r2, [r3, #0]
    3cc4:	f240 23b4 	movw	r3, #692	; 0x2b4
    3cc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ccc:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
    3cce:	f240 23b8 	movw	r3, #696	; 0x2b8
    3cd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3cd6:	68fa      	ldr	r2, [r7, #12]
    3cd8:	601a      	str	r2, [r3, #0]
			xNumOfOverflows++;
    3cda:	f240 331c 	movw	r3, #796	; 0x31c
    3cde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ce2:	681b      	ldr	r3, [r3, #0]
    3ce4:	1c5a      	adds	r2, r3, #1
    3ce6:	f240 331c 	movw	r3, #796	; 0x31c
    3cea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3cee:	601a      	str	r2, [r3, #0]
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    3cf0:	f240 23b4 	movw	r3, #692	; 0x2b4
    3cf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3cf8:	681b      	ldr	r3, [r3, #0]
    3cfa:	681b      	ldr	r3, [r3, #0]
    3cfc:	2b00      	cmp	r3, #0
    3cfe:	d107      	bne.n	3d10 <vTaskIncrementTick+0x9c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    3d00:	f240 03c4 	movw	r3, #196	; 0xc4
    3d04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d08:	f04f 32ff 	mov.w	r2, #4294967295
    3d0c:	601a      	str	r2, [r3, #0]
    3d0e:	e00e      	b.n	3d2e <vTaskIncrementTick+0xba>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    3d10:	f240 23b4 	movw	r3, #692	; 0x2b4
    3d14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d18:	681b      	ldr	r3, [r3, #0]
    3d1a:	68db      	ldr	r3, [r3, #12]
    3d1c:	68db      	ldr	r3, [r3, #12]
    3d1e:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    3d20:	68bb      	ldr	r3, [r7, #8]
    3d22:	685a      	ldr	r2, [r3, #4]
    3d24:	f240 03c4 	movw	r3, #196	; 0xc4
    3d28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d2c:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    3d2e:	f240 3300 	movw	r3, #768	; 0x300
    3d32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d36:	681a      	ldr	r2, [r3, #0]
    3d38:	f240 03c4 	movw	r3, #196	; 0xc4
    3d3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d40:	681b      	ldr	r3, [r3, #0]
    3d42:	429a      	cmp	r2, r3
    3d44:	d359      	bcc.n	3dfa <vTaskIncrementTick+0x186>
    3d46:	f240 23b4 	movw	r3, #692	; 0x2b4
    3d4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d4e:	681b      	ldr	r3, [r3, #0]
    3d50:	681b      	ldr	r3, [r3, #0]
    3d52:	2b00      	cmp	r3, #0
    3d54:	d107      	bne.n	3d66 <vTaskIncrementTick+0xf2>
    3d56:	f240 03c4 	movw	r3, #196	; 0xc4
    3d5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d5e:	f04f 32ff 	mov.w	r2, #4294967295
    3d62:	601a      	str	r2, [r3, #0]
    3d64:	e049      	b.n	3dfa <vTaskIncrementTick+0x186>
    3d66:	f240 23b4 	movw	r3, #692	; 0x2b4
    3d6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d6e:	681b      	ldr	r3, [r3, #0]
    3d70:	68db      	ldr	r3, [r3, #12]
    3d72:	68db      	ldr	r3, [r3, #12]
    3d74:	60bb      	str	r3, [r7, #8]
    3d76:	68bb      	ldr	r3, [r7, #8]
    3d78:	685b      	ldr	r3, [r3, #4]
    3d7a:	607b      	str	r3, [r7, #4]
    3d7c:	f240 3300 	movw	r3, #768	; 0x300
    3d80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d84:	681a      	ldr	r2, [r3, #0]
    3d86:	687b      	ldr	r3, [r7, #4]
    3d88:	429a      	cmp	r2, r3
    3d8a:	d206      	bcs.n	3d9a <vTaskIncrementTick+0x126>
    3d8c:	f240 03c4 	movw	r3, #196	; 0xc4
    3d90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d94:	687a      	ldr	r2, [r7, #4]
    3d96:	601a      	str	r2, [r3, #0]
    3d98:	e02f      	b.n	3dfa <vTaskIncrementTick+0x186>
    3d9a:	68bb      	ldr	r3, [r7, #8]
    3d9c:	3304      	adds	r3, #4
    3d9e:	4618      	mov	r0, r3
    3da0:	f7fe fe3e 	bl	2a20 <vListRemove>
    3da4:	68bb      	ldr	r3, [r7, #8]
    3da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3da8:	2b00      	cmp	r3, #0
    3daa:	d004      	beq.n	3db6 <vTaskIncrementTick+0x142>
    3dac:	68bb      	ldr	r3, [r7, #8]
    3dae:	3318      	adds	r3, #24
    3db0:	4618      	mov	r0, r3
    3db2:	f7fe fe35 	bl	2a20 <vListRemove>
    3db6:	68bb      	ldr	r3, [r7, #8]
    3db8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3dba:	f240 3308 	movw	r3, #776	; 0x308
    3dbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3dc2:	681b      	ldr	r3, [r3, #0]
    3dc4:	429a      	cmp	r2, r3
    3dc6:	d906      	bls.n	3dd6 <vTaskIncrementTick+0x162>
    3dc8:	68bb      	ldr	r3, [r7, #8]
    3dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3dcc:	f240 3308 	movw	r3, #776	; 0x308
    3dd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3dd4:	601a      	str	r2, [r3, #0]
    3dd6:	68bb      	ldr	r3, [r7, #8]
    3dd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3dda:	4613      	mov	r3, r2
    3ddc:	009b      	lsls	r3, r3, #2
    3dde:	4413      	add	r3, r2
    3de0:	009b      	lsls	r3, r3, #2
    3de2:	f240 2228 	movw	r2, #552	; 0x228
    3de6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3dea:	441a      	add	r2, r3
    3dec:	68bb      	ldr	r3, [r7, #8]
    3dee:	3304      	adds	r3, #4
    3df0:	4610      	mov	r0, r2
    3df2:	4619      	mov	r1, r3
    3df4:	f7fe fdb4 	bl	2960 <vListInsertEnd>
    3df8:	e7a5      	b.n	3d46 <vTaskIncrementTick+0xd2>
    3dfa:	e00c      	b.n	3e16 <vTaskIncrementTick+0x1a2>
	}
	else
	{
		++uxMissedTicks;
    3dfc:	f240 3314 	movw	r3, #788	; 0x314
    3e00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e04:	681b      	ldr	r3, [r3, #0]
    3e06:	1c5a      	adds	r2, r3, #1
    3e08:	f240 3314 	movw	r3, #788	; 0x314
    3e0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e10:	601a      	str	r2, [r3, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
    3e12:	f012 f967 	bl	160e4 <vApplicationTickHook>

	#if ( configUSE_TICK_HOOK == 1 )
	{
		/* Guard against the tick hook being called when the missed tick
		count is being unwound (when the scheduler is being unlocked. */
		if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
    3e16:	f240 3314 	movw	r3, #788	; 0x314
    3e1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e1e:	681b      	ldr	r3, [r3, #0]
    3e20:	2b00      	cmp	r3, #0
    3e22:	d101      	bne.n	3e28 <vTaskIncrementTick+0x1b4>
		{
			vApplicationTickHook();
    3e24:	f012 f95e 	bl	160e4 <vApplicationTickHook>
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    3e28:	3710      	adds	r7, #16
    3e2a:	46bd      	mov	sp, r7
    3e2c:	bd80      	pop	{r7, pc}
    3e2e:	bf00      	nop

00003e30 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    3e30:	b580      	push	{r7, lr}
    3e32:	b082      	sub	sp, #8
    3e34:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    3e36:	f240 3310 	movw	r3, #784	; 0x310
    3e3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e3e:	681b      	ldr	r3, [r3, #0]
    3e40:	2b00      	cmp	r3, #0
    3e42:	d006      	beq.n	3e52 <vTaskSwitchContext+0x22>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    3e44:	f240 3318 	movw	r3, #792	; 0x318
    3e48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e4c:	2201      	movs	r2, #1
    3e4e:	601a      	str	r2, [r3, #0]
    3e50:	e047      	b.n	3ee2 <vTaskSwitchContext+0xb2>
	}
	else
	{
		traceTASK_SWITCHED_OUT();
    3e52:	f012 f931 	bl	160b8 <myTraceSwitchedOut>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    3e56:	e00a      	b.n	3e6e <vTaskSwitchContext+0x3e>
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    3e58:	f240 3308 	movw	r3, #776	; 0x308
    3e5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e60:	681b      	ldr	r3, [r3, #0]
    3e62:	1e5a      	subs	r2, r3, #1
    3e64:	f240 3308 	movw	r3, #776	; 0x308
    3e68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e6c:	601a      	str	r2, [r3, #0]
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    3e6e:	f240 3308 	movw	r3, #776	; 0x308
    3e72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e76:	6819      	ldr	r1, [r3, #0]
    3e78:	f240 2228 	movw	r2, #552	; 0x228
    3e7c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3e80:	460b      	mov	r3, r1
    3e82:	009b      	lsls	r3, r3, #2
    3e84:	440b      	add	r3, r1
    3e86:	009b      	lsls	r3, r3, #2
    3e88:	4413      	add	r3, r2
    3e8a:	681b      	ldr	r3, [r3, #0]
    3e8c:	2b00      	cmp	r3, #0
    3e8e:	d0e3      	beq.n	3e58 <vTaskSwitchContext+0x28>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    3e90:	f240 3308 	movw	r3, #776	; 0x308
    3e94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e98:	681a      	ldr	r2, [r3, #0]
    3e9a:	4613      	mov	r3, r2
    3e9c:	009b      	lsls	r3, r3, #2
    3e9e:	4413      	add	r3, r2
    3ea0:	009b      	lsls	r3, r3, #2
    3ea2:	f240 2228 	movw	r2, #552	; 0x228
    3ea6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3eaa:	4413      	add	r3, r2
    3eac:	607b      	str	r3, [r7, #4]
    3eae:	687b      	ldr	r3, [r7, #4]
    3eb0:	685b      	ldr	r3, [r3, #4]
    3eb2:	685a      	ldr	r2, [r3, #4]
    3eb4:	687b      	ldr	r3, [r7, #4]
    3eb6:	605a      	str	r2, [r3, #4]
    3eb8:	687b      	ldr	r3, [r7, #4]
    3eba:	685a      	ldr	r2, [r3, #4]
    3ebc:	687b      	ldr	r3, [r7, #4]
    3ebe:	3308      	adds	r3, #8
    3ec0:	429a      	cmp	r2, r3
    3ec2:	d104      	bne.n	3ece <vTaskSwitchContext+0x9e>
    3ec4:	687b      	ldr	r3, [r7, #4]
    3ec6:	685b      	ldr	r3, [r3, #4]
    3ec8:	685a      	ldr	r2, [r3, #4]
    3eca:	687b      	ldr	r3, [r7, #4]
    3ecc:	605a      	str	r2, [r3, #4]
    3ece:	687b      	ldr	r3, [r7, #4]
    3ed0:	685b      	ldr	r3, [r3, #4]
    3ed2:	68da      	ldr	r2, [r3, #12]
    3ed4:	f240 2324 	movw	r3, #548	; 0x224
    3ed8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3edc:	601a      	str	r2, [r3, #0]
	
		traceTASK_SWITCHED_IN();
    3ede:	f012 f8e5 	bl	160ac <myTraceSwitchedIn>
	}
}
    3ee2:	3708      	adds	r7, #8
    3ee4:	46bd      	mov	sp, r7
    3ee6:	bd80      	pop	{r7, pc}

00003ee8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    3ee8:	b580      	push	{r7, lr}
    3eea:	b084      	sub	sp, #16
    3eec:	af00      	add	r7, sp, #0
    3eee:	6078      	str	r0, [r7, #4]
    3ef0:	6039      	str	r1, [r7, #0]
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    3ef2:	f240 2324 	movw	r3, #548	; 0x224
    3ef6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3efa:	681b      	ldr	r3, [r3, #0]
    3efc:	3318      	adds	r3, #24
    3efe:	6878      	ldr	r0, [r7, #4]
    3f00:	4619      	mov	r1, r3
    3f02:	f7fe fd55 	bl	29b0 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3f06:	f240 2324 	movw	r3, #548	; 0x224
    3f0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f0e:	681b      	ldr	r3, [r3, #0]
    3f10:	3304      	adds	r3, #4
    3f12:	4618      	mov	r0, r3
    3f14:	f7fe fd84 	bl	2a20 <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    3f18:	683b      	ldr	r3, [r7, #0]
    3f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
    3f1e:	d10d      	bne.n	3f3c <vTaskPlaceOnEventList+0x54>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3f20:	f240 2324 	movw	r3, #548	; 0x224
    3f24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f28:	681b      	ldr	r3, [r3, #0]
    3f2a:	3304      	adds	r3, #4
    3f2c:	f240 20e8 	movw	r0, #744	; 0x2e8
    3f30:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3f34:	4619      	mov	r1, r3
    3f36:	f7fe fd13 	bl	2960 <vListInsertEnd>
    3f3a:	e00a      	b.n	3f52 <vTaskPlaceOnEventList+0x6a>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    3f3c:	f240 3300 	movw	r3, #768	; 0x300
    3f40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f44:	681a      	ldr	r2, [r3, #0]
    3f46:	683b      	ldr	r3, [r7, #0]
    3f48:	4413      	add	r3, r2
    3f4a:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    3f4c:	68f8      	ldr	r0, [r7, #12]
    3f4e:	f000 f9a7 	bl	42a0 <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
    3f52:	3710      	adds	r7, #16
    3f54:	46bd      	mov	sp, r7
    3f56:	bd80      	pop	{r7, pc}

00003f58 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    3f58:	b580      	push	{r7, lr}
    3f5a:	b084      	sub	sp, #16
    3f5c:	af00      	add	r7, sp, #0
    3f5e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    3f60:	687b      	ldr	r3, [r7, #4]
    3f62:	68db      	ldr	r3, [r3, #12]
    3f64:	68db      	ldr	r3, [r3, #12]
    3f66:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    3f68:	68bb      	ldr	r3, [r7, #8]
    3f6a:	3318      	adds	r3, #24
    3f6c:	4618      	mov	r0, r3
    3f6e:	f7fe fd57 	bl	2a20 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3f72:	f240 3310 	movw	r3, #784	; 0x310
    3f76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f7a:	681b      	ldr	r3, [r3, #0]
    3f7c:	2b00      	cmp	r3, #0
    3f7e:	d126      	bne.n	3fce <xTaskRemoveFromEventList+0x76>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    3f80:	68bb      	ldr	r3, [r7, #8]
    3f82:	3304      	adds	r3, #4
    3f84:	4618      	mov	r0, r3
    3f86:	f7fe fd4b 	bl	2a20 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    3f8a:	68bb      	ldr	r3, [r7, #8]
    3f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3f8e:	f240 3308 	movw	r3, #776	; 0x308
    3f92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f96:	681b      	ldr	r3, [r3, #0]
    3f98:	429a      	cmp	r2, r3
    3f9a:	d906      	bls.n	3faa <xTaskRemoveFromEventList+0x52>
    3f9c:	68bb      	ldr	r3, [r7, #8]
    3f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3fa0:	f240 3308 	movw	r3, #776	; 0x308
    3fa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3fa8:	601a      	str	r2, [r3, #0]
    3faa:	68bb      	ldr	r3, [r7, #8]
    3fac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3fae:	4613      	mov	r3, r2
    3fb0:	009b      	lsls	r3, r3, #2
    3fb2:	4413      	add	r3, r2
    3fb4:	009b      	lsls	r3, r3, #2
    3fb6:	f240 2228 	movw	r2, #552	; 0x228
    3fba:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3fbe:	441a      	add	r2, r3
    3fc0:	68bb      	ldr	r3, [r7, #8]
    3fc2:	3304      	adds	r3, #4
    3fc4:	4610      	mov	r0, r2
    3fc6:	4619      	mov	r1, r3
    3fc8:	f7fe fcca 	bl	2960 <vListInsertEnd>
    3fcc:	e008      	b.n	3fe0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    3fce:	68bb      	ldr	r3, [r7, #8]
    3fd0:	3318      	adds	r3, #24
    3fd2:	f240 20bc 	movw	r0, #700	; 0x2bc
    3fd6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3fda:	4619      	mov	r1, r3
    3fdc:	f7fe fcc0 	bl	2960 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3fe0:	68bb      	ldr	r3, [r7, #8]
    3fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3fe4:	f240 2324 	movw	r3, #548	; 0x224
    3fe8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3fec:	681b      	ldr	r3, [r3, #0]
    3fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3ff0:	429a      	cmp	r2, r3
    3ff2:	d302      	bcc.n	3ffa <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    3ff4:	2301      	movs	r3, #1
    3ff6:	60fb      	str	r3, [r7, #12]
    3ff8:	e001      	b.n	3ffe <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
    3ffa:	2300      	movs	r3, #0
    3ffc:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    3ffe:	68fb      	ldr	r3, [r7, #12]
}
    4000:	4618      	mov	r0, r3
    4002:	3710      	adds	r7, #16
    4004:	46bd      	mov	sp, r7
    4006:	bd80      	pop	{r7, pc}

00004008 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    4008:	b480      	push	{r7}
    400a:	b083      	sub	sp, #12
    400c:	af00      	add	r7, sp, #0
    400e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    4010:	f240 331c 	movw	r3, #796	; 0x31c
    4014:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4018:	681a      	ldr	r2, [r3, #0]
    401a:	687b      	ldr	r3, [r7, #4]
    401c:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    401e:	f240 3300 	movw	r3, #768	; 0x300
    4022:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4026:	681a      	ldr	r2, [r3, #0]
    4028:	687b      	ldr	r3, [r7, #4]
    402a:	605a      	str	r2, [r3, #4]
}
    402c:	370c      	adds	r7, #12
    402e:	46bd      	mov	sp, r7
    4030:	f85d 7b04 	ldr.w	r7, [sp], #4
    4034:	4770      	bx	lr
    4036:	bf00      	nop

00004038 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    4038:	b580      	push	{r7, lr}
    403a:	b084      	sub	sp, #16
    403c:	af00      	add	r7, sp, #0
    403e:	6078      	str	r0, [r7, #4]
    4040:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    4042:	f000 fae7 	bl	4614 <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    4046:	683b      	ldr	r3, [r7, #0]
    4048:	681b      	ldr	r3, [r3, #0]
    404a:	f1b3 3fff 	cmp.w	r3, #4294967295
    404e:	d102      	bne.n	4056 <xTaskCheckForTimeOut+0x1e>
			{
				xReturn = pdFALSE;
    4050:	2300      	movs	r3, #0
    4052:	60fb      	str	r3, [r7, #12]
    4054:	e035      	b.n	40c2 <xTaskCheckForTimeOut+0x8a>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    4056:	687b      	ldr	r3, [r7, #4]
    4058:	681a      	ldr	r2, [r3, #0]
    405a:	f240 331c 	movw	r3, #796	; 0x31c
    405e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4062:	681b      	ldr	r3, [r3, #0]
    4064:	429a      	cmp	r2, r3
    4066:	d00b      	beq.n	4080 <xTaskCheckForTimeOut+0x48>
    4068:	687b      	ldr	r3, [r7, #4]
    406a:	685a      	ldr	r2, [r3, #4]
    406c:	f240 3300 	movw	r3, #768	; 0x300
    4070:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4074:	681b      	ldr	r3, [r3, #0]
    4076:	429a      	cmp	r2, r3
    4078:	d802      	bhi.n	4080 <xTaskCheckForTimeOut+0x48>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    407a:	2301      	movs	r3, #1
    407c:	60fb      	str	r3, [r7, #12]
    407e:	e020      	b.n	40c2 <xTaskCheckForTimeOut+0x8a>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    4080:	f240 3300 	movw	r3, #768	; 0x300
    4084:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4088:	681a      	ldr	r2, [r3, #0]
    408a:	687b      	ldr	r3, [r7, #4]
    408c:	685b      	ldr	r3, [r3, #4]
    408e:	1ad2      	subs	r2, r2, r3
    4090:	683b      	ldr	r3, [r7, #0]
    4092:	681b      	ldr	r3, [r3, #0]
    4094:	429a      	cmp	r2, r3
    4096:	d212      	bcs.n	40be <xTaskCheckForTimeOut+0x86>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    4098:	683b      	ldr	r3, [r7, #0]
    409a:	681a      	ldr	r2, [r3, #0]
    409c:	687b      	ldr	r3, [r7, #4]
    409e:	6859      	ldr	r1, [r3, #4]
    40a0:	f240 3300 	movw	r3, #768	; 0x300
    40a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    40a8:	681b      	ldr	r3, [r3, #0]
    40aa:	1acb      	subs	r3, r1, r3
    40ac:	441a      	add	r2, r3
    40ae:	683b      	ldr	r3, [r7, #0]
    40b0:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
    40b2:	6878      	ldr	r0, [r7, #4]
    40b4:	f7ff ffa8 	bl	4008 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    40b8:	2300      	movs	r3, #0
    40ba:	60fb      	str	r3, [r7, #12]
    40bc:	e001      	b.n	40c2 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			xReturn = pdTRUE;
    40be:	2301      	movs	r3, #1
    40c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    40c2:	f000 fabd 	bl	4640 <vPortExitCritical>

	return xReturn;
    40c6:	68fb      	ldr	r3, [r7, #12]
}
    40c8:	4618      	mov	r0, r3
    40ca:	3710      	adds	r7, #16
    40cc:	46bd      	mov	sp, r7
    40ce:	bd80      	pop	{r7, pc}

000040d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    40d0:	b480      	push	{r7}
    40d2:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
    40d4:	f240 3318 	movw	r3, #792	; 0x318
    40d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    40dc:	2201      	movs	r2, #1
    40de:	601a      	str	r2, [r3, #0]
}
    40e0:	46bd      	mov	sp, r7
    40e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    40e6:	4770      	bx	lr

000040e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    40e8:	b580      	push	{r7, lr}
    40ea:	b082      	sub	sp, #8
    40ec:	af00      	add	r7, sp, #0
    40ee:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    40f0:	f000 f88e 	bl	4210 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    40f4:	f240 2328 	movw	r3, #552	; 0x228
    40f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    40fc:	681b      	ldr	r3, [r3, #0]
    40fe:	2b01      	cmp	r3, #1
    4100:	d902      	bls.n	4108 <prvIdleTask+0x20>
			{
				taskYIELD();
    4102:	f000 fa79 	bl	45f8 <vPortYieldFromISR>
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
    4106:	e7f3      	b.n	40f0 <prvIdleTask+0x8>
    4108:	e7f2      	b.n	40f0 <prvIdleTask+0x8>
    410a:	bf00      	nop

0000410c <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    410c:	b580      	push	{r7, lr}
    410e:	b084      	sub	sp, #16
    4110:	af00      	add	r7, sp, #0
    4112:	60f8      	str	r0, [r7, #12]
    4114:	60b9      	str	r1, [r7, #8]
    4116:	607a      	str	r2, [r7, #4]
    4118:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    411a:	68fb      	ldr	r3, [r7, #12]
    411c:	3334      	adds	r3, #52	; 0x34
    411e:	4618      	mov	r0, r3
    4120:	68b9      	ldr	r1, [r7, #8]
    4122:	2210      	movs	r2, #16
    4124:	f013 f888 	bl	17238 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    4128:	68fb      	ldr	r3, [r7, #12]
    412a:	2200      	movs	r2, #0
    412c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    4130:	687b      	ldr	r3, [r7, #4]
    4132:	2b04      	cmp	r3, #4
    4134:	d901      	bls.n	413a <prvInitialiseTCBVariables+0x2e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    4136:	2304      	movs	r3, #4
    4138:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
    413a:	68fb      	ldr	r3, [r7, #12]
    413c:	687a      	ldr	r2, [r7, #4]
    413e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    4140:	68fb      	ldr	r3, [r7, #12]
    4142:	687a      	ldr	r2, [r7, #4]
    4144:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    4146:	68fb      	ldr	r3, [r7, #12]
    4148:	3304      	adds	r3, #4
    414a:	4618      	mov	r0, r3
    414c:	f7fe fbfc 	bl	2948 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    4150:	68fb      	ldr	r3, [r7, #12]
    4152:	3318      	adds	r3, #24
    4154:	4618      	mov	r0, r3
    4156:	f7fe fbf7 	bl	2948 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    415a:	68fb      	ldr	r3, [r7, #12]
    415c:	68fa      	ldr	r2, [r7, #12]
    415e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    4160:	687b      	ldr	r3, [r7, #4]
    4162:	f1c3 0205 	rsb	r2, r3, #5
    4166:	68fb      	ldr	r3, [r7, #12]
    4168:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    416a:	68fb      	ldr	r3, [r7, #12]
    416c:	68fa      	ldr	r2, [r7, #12]
    416e:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    4170:	3710      	adds	r7, #16
    4172:	46bd      	mov	sp, r7
    4174:	bd80      	pop	{r7, pc}
    4176:	bf00      	nop

00004178 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    4178:	b580      	push	{r7, lr}
    417a:	b082      	sub	sp, #8
    417c:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    417e:	2300      	movs	r3, #0
    4180:	607b      	str	r3, [r7, #4]
    4182:	e00f      	b.n	41a4 <prvInitialiseTaskLists+0x2c>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    4184:	687a      	ldr	r2, [r7, #4]
    4186:	4613      	mov	r3, r2
    4188:	009b      	lsls	r3, r3, #2
    418a:	4413      	add	r3, r2
    418c:	009b      	lsls	r3, r3, #2
    418e:	f240 2228 	movw	r2, #552	; 0x228
    4192:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4196:	4413      	add	r3, r2
    4198:	4618      	mov	r0, r3
    419a:	f7fe fbb5 	bl	2908 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    419e:	687b      	ldr	r3, [r7, #4]
    41a0:	3301      	adds	r3, #1
    41a2:	607b      	str	r3, [r7, #4]
    41a4:	687b      	ldr	r3, [r7, #4]
    41a6:	2b04      	cmp	r3, #4
    41a8:	d9ec      	bls.n	4184 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    41aa:	f240 208c 	movw	r0, #652	; 0x28c
    41ae:	f2c2 0000 	movt	r0, #8192	; 0x2000
    41b2:	f7fe fba9 	bl	2908 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    41b6:	f240 20a0 	movw	r0, #672	; 0x2a0
    41ba:	f2c2 0000 	movt	r0, #8192	; 0x2000
    41be:	f7fe fba3 	bl	2908 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    41c2:	f240 20bc 	movw	r0, #700	; 0x2bc
    41c6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    41ca:	f7fe fb9d 	bl	2908 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    41ce:	f240 20d0 	movw	r0, #720	; 0x2d0
    41d2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    41d6:	f7fe fb97 	bl	2908 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
    41da:	f240 20e8 	movw	r0, #744	; 0x2e8
    41de:	f2c2 0000 	movt	r0, #8192	; 0x2000
    41e2:	f7fe fb91 	bl	2908 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    41e6:	f240 23b4 	movw	r3, #692	; 0x2b4
    41ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    41ee:	f240 228c 	movw	r2, #652	; 0x28c
    41f2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    41f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    41f8:	f240 23b8 	movw	r3, #696	; 0x2b8
    41fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4200:	f240 22a0 	movw	r2, #672	; 0x2a0
    4204:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4208:	601a      	str	r2, [r3, #0]
}
    420a:	3708      	adds	r7, #8
    420c:	46bd      	mov	sp, r7
    420e:	bd80      	pop	{r7, pc}

00004210 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    4210:	b580      	push	{r7, lr}
    4212:	b082      	sub	sp, #8
    4214:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    4216:	f240 23e4 	movw	r3, #740	; 0x2e4
    421a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    421e:	681b      	ldr	r3, [r3, #0]
    4220:	2b00      	cmp	r3, #0
    4222:	d03a      	beq.n	429a <prvCheckTasksWaitingTermination+0x8a>
		{
			vTaskSuspendAll();
    4224:	f7ff fc42 	bl	3aac <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    4228:	f240 23d0 	movw	r3, #720	; 0x2d0
    422c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4230:	681b      	ldr	r3, [r3, #0]
    4232:	2b00      	cmp	r3, #0
    4234:	bf14      	ite	ne
    4236:	2300      	movne	r3, #0
    4238:	2301      	moveq	r3, #1
    423a:	b2db      	uxtb	r3, r3
    423c:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
    423e:	f7ff fc47 	bl	3ad0 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    4242:	687b      	ldr	r3, [r7, #4]
    4244:	2b00      	cmp	r3, #0
    4246:	d128      	bne.n	429a <prvCheckTasksWaitingTermination+0x8a>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    4248:	f000 f9e4 	bl	4614 <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    424c:	f240 23d0 	movw	r3, #720	; 0x2d0
    4250:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4254:	68db      	ldr	r3, [r3, #12]
    4256:	68db      	ldr	r3, [r3, #12]
    4258:	603b      	str	r3, [r7, #0]
					vListRemove( &( pxTCB->xGenericListItem ) );
    425a:	683b      	ldr	r3, [r7, #0]
    425c:	3304      	adds	r3, #4
    425e:	4618      	mov	r0, r3
    4260:	f7fe fbde 	bl	2a20 <vListRemove>
					--uxCurrentNumberOfTasks;
    4264:	f240 23fc 	movw	r3, #764	; 0x2fc
    4268:	f2c2 0300 	movt	r3, #8192	; 0x2000
    426c:	681b      	ldr	r3, [r3, #0]
    426e:	1e5a      	subs	r2, r3, #1
    4270:	f240 23fc 	movw	r3, #764	; 0x2fc
    4274:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4278:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
    427a:	f240 23e4 	movw	r3, #740	; 0x2e4
    427e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4282:	681b      	ldr	r3, [r3, #0]
    4284:	1e5a      	subs	r2, r3, #1
    4286:	f240 23e4 	movw	r3, #740	; 0x2e4
    428a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    428e:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
    4290:	f000 f9d6 	bl	4640 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
    4294:	6838      	ldr	r0, [r7, #0]
    4296:	f000 f879 	bl	438c <prvDeleteTCB>
			}
		}
	}
	#endif
}
    429a:	3708      	adds	r7, #8
    429c:	46bd      	mov	sp, r7
    429e:	bd80      	pop	{r7, pc}

000042a0 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    42a0:	b580      	push	{r7, lr}
    42a2:	b082      	sub	sp, #8
    42a4:	af00      	add	r7, sp, #0
    42a6:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    42a8:	f240 2324 	movw	r3, #548	; 0x224
    42ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    42b0:	681b      	ldr	r3, [r3, #0]
    42b2:	687a      	ldr	r2, [r7, #4]
    42b4:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
    42b6:	f240 3300 	movw	r3, #768	; 0x300
    42ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    42be:	681b      	ldr	r3, [r3, #0]
    42c0:	687a      	ldr	r2, [r7, #4]
    42c2:	429a      	cmp	r2, r3
    42c4:	d20f      	bcs.n	42e6 <prvAddCurrentTaskToDelayedList+0x46>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    42c6:	f240 23b8 	movw	r3, #696	; 0x2b8
    42ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    42ce:	681a      	ldr	r2, [r3, #0]
    42d0:	f240 2324 	movw	r3, #548	; 0x224
    42d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    42d8:	681b      	ldr	r3, [r3, #0]
    42da:	3304      	adds	r3, #4
    42dc:	4610      	mov	r0, r2
    42de:	4619      	mov	r1, r3
    42e0:	f7fe fb66 	bl	29b0 <vListInsert>
    42e4:	e01c      	b.n	4320 <prvAddCurrentTaskToDelayedList+0x80>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    42e6:	f240 23b4 	movw	r3, #692	; 0x2b4
    42ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    42ee:	681a      	ldr	r2, [r3, #0]
    42f0:	f240 2324 	movw	r3, #548	; 0x224
    42f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    42f8:	681b      	ldr	r3, [r3, #0]
    42fa:	3304      	adds	r3, #4
    42fc:	4610      	mov	r0, r2
    42fe:	4619      	mov	r1, r3
    4300:	f7fe fb56 	bl	29b0 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    4304:	f240 03c4 	movw	r3, #196	; 0xc4
    4308:	f2c2 0300 	movt	r3, #8192	; 0x2000
    430c:	681b      	ldr	r3, [r3, #0]
    430e:	687a      	ldr	r2, [r7, #4]
    4310:	429a      	cmp	r2, r3
    4312:	d205      	bcs.n	4320 <prvAddCurrentTaskToDelayedList+0x80>
		{
			xNextTaskUnblockTime = xTimeToWake;
    4314:	f240 03c4 	movw	r3, #196	; 0xc4
    4318:	f2c2 0300 	movt	r3, #8192	; 0x2000
    431c:	687a      	ldr	r2, [r7, #4]
    431e:	601a      	str	r2, [r3, #0]
		}
	}
}
    4320:	3708      	adds	r7, #8
    4322:	46bd      	mov	sp, r7
    4324:	bd80      	pop	{r7, pc}
    4326:	bf00      	nop

00004328 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    4328:	b580      	push	{r7, lr}
    432a:	b084      	sub	sp, #16
    432c:	af00      	add	r7, sp, #0
    432e:	4603      	mov	r3, r0
    4330:	6039      	str	r1, [r7, #0]
    4332:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    4334:	2048      	movs	r0, #72	; 0x48
    4336:	f000 f9ef 	bl	4718 <pvPortMalloc>
    433a:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
    433c:	68fb      	ldr	r3, [r7, #12]
    433e:	2b00      	cmp	r3, #0
    4340:	d01f      	beq.n	4382 <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    4342:	683b      	ldr	r3, [r7, #0]
    4344:	2b00      	cmp	r3, #0
    4346:	d106      	bne.n	4356 <prvAllocateTCBAndStack+0x2e>
    4348:	88fb      	ldrh	r3, [r7, #6]
    434a:	009b      	lsls	r3, r3, #2
    434c:	4618      	mov	r0, r3
    434e:	f000 f9e3 	bl	4718 <pvPortMalloc>
    4352:	4603      	mov	r3, r0
    4354:	e000      	b.n	4358 <prvAllocateTCBAndStack+0x30>
    4356:	683b      	ldr	r3, [r7, #0]
    4358:	68fa      	ldr	r2, [r7, #12]
    435a:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
    435c:	68fb      	ldr	r3, [r7, #12]
    435e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4360:	2b00      	cmp	r3, #0
    4362:	d105      	bne.n	4370 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    4364:	68f8      	ldr	r0, [r7, #12]
    4366:	f000 fa9b 	bl	48a0 <vPortFree>
			pxNewTCB = NULL;
    436a:	2300      	movs	r3, #0
    436c:	60fb      	str	r3, [r7, #12]
    436e:	e008      	b.n	4382 <prvAllocateTCBAndStack+0x5a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    4370:	68fb      	ldr	r3, [r7, #12]
    4372:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    4374:	88fb      	ldrh	r3, [r7, #6]
    4376:	009b      	lsls	r3, r3, #2
    4378:	4610      	mov	r0, r2
    437a:	21a5      	movs	r1, #165	; 0xa5
    437c:	461a      	mov	r2, r3
    437e:	f012 ff0b 	bl	17198 <memset>
		}
	}

	return pxNewTCB;
    4382:	68fb      	ldr	r3, [r7, #12]
}
    4384:	4618      	mov	r0, r3
    4386:	3710      	adds	r7, #16
    4388:	46bd      	mov	sp, r7
    438a:	bd80      	pop	{r7, pc}

0000438c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
    438c:	b580      	push	{r7, lr}
    438e:	b082      	sub	sp, #8
    4390:	af00      	add	r7, sp, #0
    4392:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    4394:	687b      	ldr	r3, [r7, #4]
    4396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4398:	4618      	mov	r0, r3
    439a:	f000 fa81 	bl	48a0 <vPortFree>
		vPortFree( pxTCB );
    439e:	6878      	ldr	r0, [r7, #4]
    43a0:	f000 fa7e 	bl	48a0 <vPortFree>
	}
    43a4:	3708      	adds	r7, #8
    43a6:	46bd      	mov	sp, r7
    43a8:	bd80      	pop	{r7, pc}
    43aa:	bf00      	nop

000043ac <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
    43ac:	b480      	push	{r7}
    43ae:	b083      	sub	sp, #12
    43b0:	af00      	add	r7, sp, #0
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    43b2:	f240 2324 	movw	r3, #548	; 0x224
    43b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    43ba:	681b      	ldr	r3, [r3, #0]
    43bc:	607b      	str	r3, [r7, #4]

		return xReturn;
    43be:	687b      	ldr	r3, [r7, #4]
	}
    43c0:	4618      	mov	r0, r3
    43c2:	370c      	adds	r7, #12
    43c4:	46bd      	mov	sp, r7
    43c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    43ca:	4770      	bx	lr

000043cc <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    43cc:	b580      	push	{r7, lr}
    43ce:	b084      	sub	sp, #16
    43d0:	af00      	add	r7, sp, #0
    43d2:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    43d4:	687b      	ldr	r3, [r7, #4]
    43d6:	60fb      	str	r3, [r7, #12]

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    43d8:	68fb      	ldr	r3, [r7, #12]
    43da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    43dc:	f240 2324 	movw	r3, #548	; 0x224
    43e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    43e4:	681b      	ldr	r3, [r3, #0]
    43e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    43e8:	429a      	cmp	r2, r3
    43ea:	d24f      	bcs.n	448c <vTaskPriorityInherit+0xc0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    43ec:	f240 2324 	movw	r3, #548	; 0x224
    43f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    43f4:	681b      	ldr	r3, [r3, #0]
    43f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    43f8:	f1c3 0205 	rsb	r2, r3, #5
    43fc:	68fb      	ldr	r3, [r7, #12]
    43fe:	619a      	str	r2, [r3, #24]

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    4400:	68fb      	ldr	r3, [r7, #12]
    4402:	6959      	ldr	r1, [r3, #20]
    4404:	68fb      	ldr	r3, [r7, #12]
    4406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4408:	4613      	mov	r3, r2
    440a:	009b      	lsls	r3, r3, #2
    440c:	4413      	add	r3, r2
    440e:	009b      	lsls	r3, r3, #2
    4410:	f240 2228 	movw	r2, #552	; 0x228
    4414:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4418:	4413      	add	r3, r2
    441a:	4299      	cmp	r1, r3
    441c:	d12e      	bne.n	447c <vTaskPriorityInherit+0xb0>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
    441e:	68fb      	ldr	r3, [r7, #12]
    4420:	3304      	adds	r3, #4
    4422:	4618      	mov	r0, r3
    4424:	f7fe fafc 	bl	2a20 <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    4428:	f240 2324 	movw	r3, #548	; 0x224
    442c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4430:	681b      	ldr	r3, [r3, #0]
    4432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4434:	68fb      	ldr	r3, [r7, #12]
    4436:	62da      	str	r2, [r3, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
    4438:	68fb      	ldr	r3, [r7, #12]
    443a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    443c:	f240 3308 	movw	r3, #776	; 0x308
    4440:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4444:	681b      	ldr	r3, [r3, #0]
    4446:	429a      	cmp	r2, r3
    4448:	d906      	bls.n	4458 <vTaskPriorityInherit+0x8c>
    444a:	68fb      	ldr	r3, [r7, #12]
    444c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    444e:	f240 3308 	movw	r3, #776	; 0x308
    4452:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4456:	601a      	str	r2, [r3, #0]
    4458:	68fb      	ldr	r3, [r7, #12]
    445a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    445c:	4613      	mov	r3, r2
    445e:	009b      	lsls	r3, r3, #2
    4460:	4413      	add	r3, r2
    4462:	009b      	lsls	r3, r3, #2
    4464:	f240 2228 	movw	r2, #552	; 0x228
    4468:	f2c2 0200 	movt	r2, #8192	; 0x2000
    446c:	441a      	add	r2, r3
    446e:	68fb      	ldr	r3, [r7, #12]
    4470:	3304      	adds	r3, #4
    4472:	4610      	mov	r0, r2
    4474:	4619      	mov	r1, r3
    4476:	f7fe fa73 	bl	2960 <vListInsertEnd>
    447a:	e007      	b.n	448c <vTaskPriorityInherit+0xc0>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    447c:	f240 2324 	movw	r3, #548	; 0x224
    4480:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4484:	681b      	ldr	r3, [r3, #0]
    4486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4488:	68fb      	ldr	r3, [r7, #12]
    448a:	62da      	str	r2, [r3, #44]	; 0x2c
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
    448c:	3710      	adds	r7, #16
    448e:	46bd      	mov	sp, r7
    4490:	bd80      	pop	{r7, pc}
    4492:	bf00      	nop

00004494 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    4494:	b580      	push	{r7, lr}
    4496:	b084      	sub	sp, #16
    4498:	af00      	add	r7, sp, #0
    449a:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    449c:	687b      	ldr	r3, [r7, #4]
    449e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    44a0:	687b      	ldr	r3, [r7, #4]
    44a2:	2b00      	cmp	r3, #0
    44a4:	d035      	beq.n	4512 <vTaskPriorityDisinherit+0x7e>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    44a6:	68fb      	ldr	r3, [r7, #12]
    44a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    44aa:	68fb      	ldr	r3, [r7, #12]
    44ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    44ae:	429a      	cmp	r2, r3
    44b0:	d02f      	beq.n	4512 <vTaskPriorityDisinherit+0x7e>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
    44b2:	68fb      	ldr	r3, [r7, #12]
    44b4:	3304      	adds	r3, #4
    44b6:	4618      	mov	r0, r3
    44b8:	f7fe fab2 	bl	2a20 <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    44bc:	68fb      	ldr	r3, [r7, #12]
    44be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    44c0:	68fb      	ldr	r3, [r7, #12]
    44c2:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    44c4:	68fb      	ldr	r3, [r7, #12]
    44c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    44c8:	f1c3 0205 	rsb	r2, r3, #5
    44cc:	68fb      	ldr	r3, [r7, #12]
    44ce:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
    44d0:	68fb      	ldr	r3, [r7, #12]
    44d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    44d4:	f240 3308 	movw	r3, #776	; 0x308
    44d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    44dc:	681b      	ldr	r3, [r3, #0]
    44de:	429a      	cmp	r2, r3
    44e0:	d906      	bls.n	44f0 <vTaskPriorityDisinherit+0x5c>
    44e2:	68fb      	ldr	r3, [r7, #12]
    44e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    44e6:	f240 3308 	movw	r3, #776	; 0x308
    44ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    44ee:	601a      	str	r2, [r3, #0]
    44f0:	68fb      	ldr	r3, [r7, #12]
    44f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    44f4:	4613      	mov	r3, r2
    44f6:	009b      	lsls	r3, r3, #2
    44f8:	4413      	add	r3, r2
    44fa:	009b      	lsls	r3, r3, #2
    44fc:	f240 2228 	movw	r2, #552	; 0x228
    4500:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4504:	441a      	add	r2, r3
    4506:	68fb      	ldr	r3, [r7, #12]
    4508:	3304      	adds	r3, #4
    450a:	4610      	mov	r0, r2
    450c:	4619      	mov	r1, r3
    450e:	f7fe fa27 	bl	2960 <vListInsertEnd>
			}
		}
	}
    4512:	3710      	adds	r7, #16
    4514:	46bd      	mov	sp, r7
    4516:	bd80      	pop	{r7, pc}

00004518 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    4518:	b480      	push	{r7}
    451a:	b085      	sub	sp, #20
    451c:	af00      	add	r7, sp, #0
    451e:	60f8      	str	r0, [r7, #12]
    4520:	60b9      	str	r1, [r7, #8]
    4522:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    4524:	68fb      	ldr	r3, [r7, #12]
    4526:	3b04      	subs	r3, #4
    4528:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    452a:	68fb      	ldr	r3, [r7, #12]
    452c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    4530:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    4532:	68fb      	ldr	r3, [r7, #12]
    4534:	3b04      	subs	r3, #4
    4536:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
    4538:	68ba      	ldr	r2, [r7, #8]
    453a:	68fb      	ldr	r3, [r7, #12]
    453c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    453e:	68fb      	ldr	r3, [r7, #12]
    4540:	3b04      	subs	r3, #4
    4542:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
    4544:	68fb      	ldr	r3, [r7, #12]
    4546:	2200      	movs	r2, #0
    4548:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    454a:	68fb      	ldr	r3, [r7, #12]
    454c:	3b14      	subs	r3, #20
    454e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
    4550:	687a      	ldr	r2, [r7, #4]
    4552:	68fb      	ldr	r3, [r7, #12]
    4554:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
    4556:	68fb      	ldr	r3, [r7, #12]
    4558:	3b20      	subs	r3, #32
    455a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    455c:	68fb      	ldr	r3, [r7, #12]
}
    455e:	4618      	mov	r0, r3
    4560:	3714      	adds	r7, #20
    4562:	46bd      	mov	sp, r7
    4564:	f85d 7b04 	ldr.w	r7, [sp], #4
    4568:	4770      	bx	lr
    456a:	bf00      	nop

0000456c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    456c:	4b06      	ldr	r3, [pc, #24]	; (4588 <pxCurrentTCBConst2>)
    456e:	6819      	ldr	r1, [r3, #0]
    4570:	6808      	ldr	r0, [r1, #0]
    4572:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    4576:	f380 8809 	msr	PSP, r0
    457a:	f04f 0000 	mov.w	r0, #0
    457e:	f380 8811 	msr	BASEPRI, r0
    4582:	f04e 0e0d 	orr.w	lr, lr, #13
    4586:	4770      	bx	lr

00004588 <pxCurrentTCBConst2>:
    4588:	20000224 	.word	0x20000224

0000458c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
    458c:	4861      	ldr	r0, [pc, #388]	; (4714 <prvSetupTimerInterrupt+0x2c>)
    458e:	6800      	ldr	r0, [r0, #0]
    4590:	6800      	ldr	r0, [r0, #0]
    4592:	f380 8808 	msr	MSP, r0
    4596:	b662      	cpsie	i
    4598:	df00      	svc	0
    459a:	bf00      	nop

0000459c <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
    459c:	b580      	push	{r7, lr}
    459e:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    45a0:	f64e 5320 	movw	r3, #60704	; 0xed20
    45a4:	f2ce 0300 	movt	r3, #57344	; 0xe000
    45a8:	f64e 5220 	movw	r2, #60704	; 0xed20
    45ac:	f2ce 0200 	movt	r2, #57344	; 0xe000
    45b0:	6812      	ldr	r2, [r2, #0]
    45b2:	f442 02fe 	orr.w	r2, r2, #8323072	; 0x7f0000
    45b6:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    45b8:	f64e 5320 	movw	r3, #60704	; 0xed20
    45bc:	f2ce 0300 	movt	r3, #57344	; 0xe000
    45c0:	f64e 5220 	movw	r2, #60704	; 0xed20
    45c4:	f2ce 0200 	movt	r2, #57344	; 0xe000
    45c8:	6812      	ldr	r2, [r2, #0]
    45ca:	f042 42fe 	orr.w	r2, r2, #2130706432	; 0x7f000000
    45ce:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    45d0:	f000 f88a 	bl	46e8 <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    45d4:	f240 03c8 	movw	r3, #200	; 0xc8
    45d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    45dc:	2200      	movs	r2, #0
    45de:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
    45e0:	f7ff ffd4 	bl	458c <prvPortStartFirstTask>

	/* Should not get here! */
	return 0;
    45e4:	2300      	movs	r3, #0
}
    45e6:	4618      	mov	r0, r3
    45e8:	bd80      	pop	{r7, pc}
    45ea:	bf00      	nop

000045ec <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    45ec:	b480      	push	{r7}
    45ee:	af00      	add	r7, sp, #0
	/* It is unlikely that the CM3 port will require this function as there
	is nothing to return to.  */
}
    45f0:	46bd      	mov	sp, r7
    45f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    45f6:	4770      	bx	lr

000045f8 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
    45f8:	b480      	push	{r7}
    45fa:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    45fc:	f64e 5304 	movw	r3, #60676	; 0xed04
    4600:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4604:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4608:	601a      	str	r2, [r3, #0]
}
    460a:	46bd      	mov	sp, r7
    460c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4610:	4770      	bx	lr
    4612:	bf00      	nop

00004614 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    4614:	b480      	push	{r7}
    4616:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
    4618:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    461c:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
    4620:	f240 03c8 	movw	r3, #200	; 0xc8
    4624:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4628:	681b      	ldr	r3, [r3, #0]
    462a:	1c5a      	adds	r2, r3, #1
    462c:	f240 03c8 	movw	r3, #200	; 0xc8
    4630:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4634:	601a      	str	r2, [r3, #0]
}
    4636:	46bd      	mov	sp, r7
    4638:	f85d 7b04 	ldr.w	r7, [sp], #4
    463c:	4770      	bx	lr
    463e:	bf00      	nop

00004640 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    4640:	b480      	push	{r7}
    4642:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
    4644:	f240 03c8 	movw	r3, #200	; 0xc8
    4648:	f2c2 0300 	movt	r3, #8192	; 0x2000
    464c:	681b      	ldr	r3, [r3, #0]
    464e:	1e5a      	subs	r2, r3, #1
    4650:	f240 03c8 	movw	r3, #200	; 0xc8
    4654:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4658:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
    465a:	f240 03c8 	movw	r3, #200	; 0xc8
    465e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4662:	681b      	ldr	r3, [r3, #0]
    4664:	2b00      	cmp	r3, #0
    4666:	d103      	bne.n	4670 <vPortExitCritical+0x30>
	{
		portENABLE_INTERRUPTS();
    4668:	f04f 0000 	mov.w	r0, #0
    466c:	f380 8811 	msr	BASEPRI, r0
	}
}
    4670:	46bd      	mov	sp, r7
    4672:	f85d 7b04 	ldr.w	r7, [sp], #4
    4676:	4770      	bx	lr

00004678 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    4678:	f3ef 8009 	mrs	r0, PSP
    467c:	4b0c      	ldr	r3, [pc, #48]	; (46b0 <pxCurrentTCBConst>)
    467e:	681a      	ldr	r2, [r3, #0]
    4680:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    4684:	6010      	str	r0, [r2, #0]
    4686:	e92d 4008 	stmdb	sp!, {r3, lr}
    468a:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    468e:	f380 8811 	msr	BASEPRI, r0
    4692:	f7ff fbcd 	bl	3e30 <vTaskSwitchContext>
    4696:	f04f 0000 	mov.w	r0, #0
    469a:	f380 8811 	msr	BASEPRI, r0
    469e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    46a2:	6819      	ldr	r1, [r3, #0]
    46a4:	6808      	ldr	r0, [r1, #0]
    46a6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    46aa:	f380 8809 	msr	PSP, r0
    46ae:	4770      	bx	lr

000046b0 <pxCurrentTCBConst>:
    46b0:	20000224 	.word	0x20000224

000046b4 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    46b4:	b580      	push	{r7, lr}
    46b6:	b082      	sub	sp, #8
    46b8:	af00      	add	r7, sp, #0
unsigned long ulDummy;

	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    46ba:	f64e 5304 	movw	r3, #60676	; 0xed04
    46be:	f2ce 0300 	movt	r3, #57344	; 0xe000
    46c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    46c6:	601a      	str	r2, [r3, #0]
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
    46c8:	2300      	movs	r3, #0
    46ca:	607b      	str	r3, [r7, #4]
    46cc:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    46d0:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
    46d4:	f7ff face 	bl	3c74 <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
    46d8:	f04f 0000 	mov.w	r0, #0
    46dc:	f380 8811 	msr	BASEPRI, r0
}
    46e0:	3708      	adds	r7, #8
    46e2:	46bd      	mov	sp, r7
    46e4:	bd80      	pop	{r7, pc}
    46e6:	bf00      	nop

000046e8 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    46e8:	b480      	push	{r7}
    46ea:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    46ec:	f24e 0314 	movw	r3, #57364	; 0xe014
    46f0:	f2ce 0300 	movt	r3, #57344	; 0xe000
    46f4:	f641 123f 	movw	r2, #6463	; 0x193f
    46f8:	f2c0 0201 	movt	r2, #1
    46fc:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    46fe:	f24e 0310 	movw	r3, #57360	; 0xe010
    4702:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4706:	2207      	movs	r2, #7
    4708:	601a      	str	r2, [r3, #0]
}
    470a:	46bd      	mov	sp, r7
    470c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4710:	4770      	bx	lr
    4712:	0000      	.short	0x0000
    4714:	e000ed08 	.word	0xe000ed08

00004718 <pvPortMalloc>:
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;										\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    4718:	b580      	push	{r7, lr}
    471a:	b08a      	sub	sp, #40	; 0x28
    471c:	af00      	add	r7, sp, #0
    471e:	6078      	str	r0, [r7, #4]
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
    4720:	2300      	movs	r3, #0
    4722:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
    4724:	f7ff f9c2 	bl	3aac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    4728:	f24a 3338 	movw	r3, #41784	; 0xa338
    472c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4730:	681b      	ldr	r3, [r3, #0]
    4732:	2b00      	cmp	r3, #0
    4734:	d130      	bne.n	4798 <pvPortMalloc+0x80>
		{
			prvHeapInit();
    4736:	f24a 3328 	movw	r3, #41768	; 0xa328
    473a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    473e:	f240 3228 	movw	r2, #808	; 0x328
    4742:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4746:	601a      	str	r2, [r3, #0]
    4748:	f24a 3328 	movw	r3, #41768	; 0xa328
    474c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4750:	2200      	movs	r2, #0
    4752:	605a      	str	r2, [r3, #4]
    4754:	f24a 3330 	movw	r3, #41776	; 0xa330
    4758:	f2c2 0300 	movt	r3, #8192	; 0x2000
    475c:	f44f 4220 	mov.w	r2, #40960	; 0xa000
    4760:	605a      	str	r2, [r3, #4]
    4762:	f24a 3330 	movw	r3, #41776	; 0xa330
    4766:	f2c2 0300 	movt	r3, #8192	; 0x2000
    476a:	2200      	movs	r2, #0
    476c:	601a      	str	r2, [r3, #0]
    476e:	f240 3328 	movw	r3, #808	; 0x328
    4772:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4776:	617b      	str	r3, [r7, #20]
    4778:	697b      	ldr	r3, [r7, #20]
    477a:	f44f 4220 	mov.w	r2, #40960	; 0xa000
    477e:	605a      	str	r2, [r3, #4]
    4780:	697a      	ldr	r2, [r7, #20]
    4782:	f24a 3330 	movw	r3, #41776	; 0xa330
    4786:	f2c2 0300 	movt	r3, #8192	; 0x2000
    478a:	6013      	str	r3, [r2, #0]
			xHeapHasBeenInitialised = pdTRUE;
    478c:	f24a 3338 	movw	r3, #41784	; 0xa338
    4790:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4794:	2201      	movs	r2, #1
    4796:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    4798:	687b      	ldr	r3, [r7, #4]
    479a:	2b00      	cmp	r3, #0
    479c:	d00d      	beq.n	47ba <pvPortMalloc+0xa2>
		{
			xWantedSize += heapSTRUCT_SIZE;
    479e:	2310      	movs	r3, #16
    47a0:	687a      	ldr	r2, [r7, #4]
    47a2:	4413      	add	r3, r2
    47a4:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    47a6:	687b      	ldr	r3, [r7, #4]
    47a8:	f003 0307 	and.w	r3, r3, #7
    47ac:	2b00      	cmp	r3, #0
    47ae:	d004      	beq.n	47ba <pvPortMalloc+0xa2>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    47b0:	687b      	ldr	r3, [r7, #4]
    47b2:	f023 0307 	bic.w	r3, r3, #7
    47b6:	3308      	adds	r3, #8
    47b8:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
    47ba:	687b      	ldr	r3, [r7, #4]
    47bc:	2b00      	cmp	r3, #0
    47be:	d068      	beq.n	4892 <pvPortMalloc+0x17a>
    47c0:	687b      	ldr	r3, [r7, #4]
    47c2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
    47c6:	d264      	bcs.n	4892 <pvPortMalloc+0x17a>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
    47c8:	f24a 3328 	movw	r3, #41768	; 0xa328
    47cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    47d0:	623b      	str	r3, [r7, #32]
			pxBlock = xStart.pxNextFreeBlock;
    47d2:	f24a 3328 	movw	r3, #41768	; 0xa328
    47d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    47da:	681b      	ldr	r3, [r3, #0]
    47dc:	627b      	str	r3, [r7, #36]	; 0x24
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    47de:	e004      	b.n	47ea <pvPortMalloc+0xd2>
			{
				pxPreviousBlock = pxBlock;
    47e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    47e2:	623b      	str	r3, [r7, #32]
				pxBlock = pxBlock->pxNextFreeBlock;
    47e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    47e6:	681b      	ldr	r3, [r3, #0]
    47e8:	627b      	str	r3, [r7, #36]	; 0x24
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    47ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    47ec:	685a      	ldr	r2, [r3, #4]
    47ee:	687b      	ldr	r3, [r7, #4]
    47f0:	429a      	cmp	r2, r3
    47f2:	d203      	bcs.n	47fc <pvPortMalloc+0xe4>
    47f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    47f6:	681b      	ldr	r3, [r3, #0]
    47f8:	2b00      	cmp	r3, #0
    47fa:	d1f1      	bne.n	47e0 <pvPortMalloc+0xc8>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
    47fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    47fe:	f24a 3330 	movw	r3, #41776	; 0xa330
    4802:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4806:	429a      	cmp	r2, r3
    4808:	d043      	beq.n	4892 <pvPortMalloc+0x17a>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    480a:	6a3b      	ldr	r3, [r7, #32]
    480c:	681a      	ldr	r2, [r3, #0]
    480e:	2310      	movs	r3, #16
    4810:	4413      	add	r3, r2
    4812:	61fb      	str	r3, [r7, #28]

				/* This block is being returned for use so must be taken our of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    4814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4816:	681a      	ldr	r2, [r3, #0]
    4818:	6a3b      	ldr	r3, [r7, #32]
    481a:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    481c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    481e:	685a      	ldr	r2, [r3, #4]
    4820:	687b      	ldr	r3, [r7, #4]
    4822:	1ad2      	subs	r2, r2, r3
    4824:	2310      	movs	r3, #16
    4826:	005b      	lsls	r3, r3, #1
    4828:	429a      	cmp	r2, r3
    482a:	d925      	bls.n	4878 <pvPortMalloc+0x160>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
    482c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    482e:	687b      	ldr	r3, [r7, #4]
    4830:	4413      	add	r3, r2
    4832:	613b      	str	r3, [r7, #16]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    4834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4836:	685a      	ldr	r2, [r3, #4]
    4838:	687b      	ldr	r3, [r7, #4]
    483a:	1ad2      	subs	r2, r2, r3
    483c:	693b      	ldr	r3, [r7, #16]
    483e:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
    4840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4842:	687a      	ldr	r2, [r7, #4]
    4844:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    4846:	693b      	ldr	r3, [r7, #16]
    4848:	685b      	ldr	r3, [r3, #4]
    484a:	60fb      	str	r3, [r7, #12]
    484c:	f24a 3328 	movw	r3, #41768	; 0xa328
    4850:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4854:	61bb      	str	r3, [r7, #24]
    4856:	e002      	b.n	485e <pvPortMalloc+0x146>
    4858:	69bb      	ldr	r3, [r7, #24]
    485a:	681b      	ldr	r3, [r3, #0]
    485c:	61bb      	str	r3, [r7, #24]
    485e:	69bb      	ldr	r3, [r7, #24]
    4860:	681b      	ldr	r3, [r3, #0]
    4862:	685a      	ldr	r2, [r3, #4]
    4864:	68fb      	ldr	r3, [r7, #12]
    4866:	429a      	cmp	r2, r3
    4868:	d3f6      	bcc.n	4858 <pvPortMalloc+0x140>
    486a:	69bb      	ldr	r3, [r7, #24]
    486c:	681a      	ldr	r2, [r3, #0]
    486e:	693b      	ldr	r3, [r7, #16]
    4870:	601a      	str	r2, [r3, #0]
    4872:	69bb      	ldr	r3, [r7, #24]
    4874:	693a      	ldr	r2, [r7, #16]
    4876:	601a      	str	r2, [r3, #0]
				}
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
    4878:	f240 03cc 	movw	r3, #204	; 0xcc
    487c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4880:	681a      	ldr	r2, [r3, #0]
    4882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4884:	685b      	ldr	r3, [r3, #4]
    4886:	1ad2      	subs	r2, r2, r3
    4888:	f240 03cc 	movw	r3, #204	; 0xcc
    488c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4890:	601a      	str	r2, [r3, #0]
			}
		}
	}
	xTaskResumeAll();
    4892:	f7ff f91d 	bl	3ad0 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    4896:	69fb      	ldr	r3, [r7, #28]
}
    4898:	4618      	mov	r0, r3
    489a:	3728      	adds	r7, #40	; 0x28
    489c:	46bd      	mov	sp, r7
    489e:	bd80      	pop	{r7, pc}

000048a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    48a0:	b580      	push	{r7, lr}
    48a2:	b086      	sub	sp, #24
    48a4:	af00      	add	r7, sp, #0
    48a6:	6078      	str	r0, [r7, #4]
unsigned char *puc = ( unsigned char * ) pv;
    48a8:	687b      	ldr	r3, [r7, #4]
    48aa:	613b      	str	r3, [r7, #16]
xBlockLink *pxLink;

	if( pv )
    48ac:	687b      	ldr	r3, [r7, #4]
    48ae:	2b00      	cmp	r3, #0
    48b0:	d030      	beq.n	4914 <vPortFree+0x74>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
    48b2:	2310      	movs	r3, #16
    48b4:	425b      	negs	r3, r3
    48b6:	693a      	ldr	r2, [r7, #16]
    48b8:	4413      	add	r3, r2
    48ba:	613b      	str	r3, [r7, #16]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
    48bc:	693b      	ldr	r3, [r7, #16]
    48be:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
    48c0:	f7ff f8f4 	bl	3aac <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
    48c4:	68fb      	ldr	r3, [r7, #12]
    48c6:	685b      	ldr	r3, [r3, #4]
    48c8:	60bb      	str	r3, [r7, #8]
    48ca:	f24a 3328 	movw	r3, #41768	; 0xa328
    48ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    48d2:	617b      	str	r3, [r7, #20]
    48d4:	e002      	b.n	48dc <vPortFree+0x3c>
    48d6:	697b      	ldr	r3, [r7, #20]
    48d8:	681b      	ldr	r3, [r3, #0]
    48da:	617b      	str	r3, [r7, #20]
    48dc:	697b      	ldr	r3, [r7, #20]
    48de:	681b      	ldr	r3, [r3, #0]
    48e0:	685a      	ldr	r2, [r3, #4]
    48e2:	68bb      	ldr	r3, [r7, #8]
    48e4:	429a      	cmp	r2, r3
    48e6:	d3f6      	bcc.n	48d6 <vPortFree+0x36>
    48e8:	697b      	ldr	r3, [r7, #20]
    48ea:	681a      	ldr	r2, [r3, #0]
    48ec:	68fb      	ldr	r3, [r7, #12]
    48ee:	601a      	str	r2, [r3, #0]
    48f0:	697b      	ldr	r3, [r7, #20]
    48f2:	68fa      	ldr	r2, [r7, #12]
    48f4:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
    48f6:	68fb      	ldr	r3, [r7, #12]
    48f8:	685a      	ldr	r2, [r3, #4]
    48fa:	f240 03cc 	movw	r3, #204	; 0xcc
    48fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4902:	681b      	ldr	r3, [r3, #0]
    4904:	441a      	add	r2, r3
    4906:	f240 03cc 	movw	r3, #204	; 0xcc
    490a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    490e:	601a      	str	r2, [r3, #0]
		}
		xTaskResumeAll();
    4910:	f7ff f8de 	bl	3ad0 <xTaskResumeAll>
	}
}
    4914:	3718      	adds	r7, #24
    4916:	46bd      	mov	sp, r7
    4918:	bd80      	pop	{r7, pc}
    491a:	bf00      	nop

0000491c <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    491c:	b480      	push	{r7}
    491e:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
    4920:	f240 03cc 	movw	r3, #204	; 0xcc
    4924:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4928:	681b      	ldr	r3, [r3, #0]
}
    492a:	4618      	mov	r0, r3
    492c:	46bd      	mov	sp, r7
    492e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4932:	4770      	bx	lr

00004934 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    4934:	b480      	push	{r7}
    4936:	af00      	add	r7, sp, #0
	/* This just exists to keep the linker quiet. */
}
    4938:	46bd      	mov	sp, r7
    493a:	f85d 7b04 	ldr.w	r7, [sp], #4
    493e:	4770      	bx	lr

00004940 <ground_calibrate>:
 * set to auto1 before MAX_DELAY_FOR_CALIBRATION secondes */
/**User must put verticaly the uav (nose bottom) and push
 * radio roll stick to get new calibration
 * If not, the default calibration is used.
 */
inline void ground_calibrate( void ) {
    4940:	b580      	push	{r7, lr}
    4942:	af00      	add	r7, sp, #0
    break;
  case CALIB_DONE:
    break;
  }
#else*/
if(calib_status == NO_CALIB)
    4944:	f24a 335a 	movw	r3, #41818	; 0xa35a
    4948:	f2c2 0300 	movt	r3, #8192	; 0x2000
    494c:	781b      	ldrb	r3, [r3, #0]
    494e:	2b00      	cmp	r3, #0
    4950:	f040 815d 	bne.w	4c0e <ground_calibrate+0x2ce>
{
    if (cputime < MAX_DELAY_FOR_CALIBRATION && pprz_mode == PPRZ_MODE_AUTO1 ) {
    4954:	f24a 3342 	movw	r3, #41794	; 0xa342
    4958:	f2c2 0300 	movt	r3, #8192	; 0x2000
    495c:	881b      	ldrh	r3, [r3, #0]
    495e:	2b09      	cmp	r3, #9
    4960:	f201 8145 	bhi.w	5bee <ground_calibrate+0x12ae>
    4964:	f24a 3344 	movw	r3, #41796	; 0xa344
    4968:	f2c2 0300 	movt	r3, #8192	; 0x2000
    496c:	781b      	ldrb	r3, [r3, #0]
    496e:	2b01      	cmp	r3, #1
    4970:	f041 813d 	bne.w	5bee <ground_calibrate+0x12ae>
      calib_status = WAITING_CALIB_CONTRAST;
    4974:	f24a 335a 	movw	r3, #41818	; 0xa35a
    4978:	f2c2 0300 	movt	r3, #8192	; 0x2000
    497c:	2201      	movs	r2, #1
    497e:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_CALIB_START();
    4980:	f24a 3361 	movw	r3, #41825	; 0xa361
    4984:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4988:	781a      	ldrb	r2, [r3, #0]
    498a:	f24a 3362 	movw	r3, #41826	; 0xa362
    498e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4992:	781b      	ldrb	r3, [r3, #0]
    4994:	b2db      	uxtb	r3, r3
    4996:	429a      	cmp	r2, r3
    4998:	d313      	bcc.n	49c2 <ground_calibrate+0x82>
    499a:	f24a 3362 	movw	r3, #41826	; 0xa362
    499e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49a2:	781b      	ldrb	r3, [r3, #0]
    49a4:	b2db      	uxtb	r3, r3
    49a6:	461a      	mov	r2, r3
    49a8:	f24a 3361 	movw	r3, #41825	; 0xa361
    49ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49b0:	781b      	ldrb	r3, [r3, #0]
    49b2:	1ad3      	subs	r3, r2, r3
    49b4:	33ff      	adds	r3, #255	; 0xff
    49b6:	2b04      	cmp	r3, #4
    49b8:	bfd4      	ite	le
    49ba:	2300      	movle	r3, #0
    49bc:	2301      	movgt	r3, #1
    49be:	b2db      	uxtb	r3, r3
    49c0:	e011      	b.n	49e6 <ground_calibrate+0xa6>
    49c2:	f24a 3362 	movw	r3, #41826	; 0xa362
    49c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49ca:	781b      	ldrb	r3, [r3, #0]
    49cc:	b2db      	uxtb	r3, r3
    49ce:	461a      	mov	r2, r3
    49d0:	f24a 3361 	movw	r3, #41825	; 0xa361
    49d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49d8:	781b      	ldrb	r3, [r3, #0]
    49da:	1ad3      	subs	r3, r2, r3
    49dc:	2b04      	cmp	r3, #4
    49de:	bfd4      	ite	le
    49e0:	2300      	movle	r3, #0
    49e2:	2301      	movgt	r3, #1
    49e4:	b2db      	uxtb	r3, r3
    49e6:	2b00      	cmp	r3, #0
    49e8:	f000 8103 	beq.w	4bf2 <ground_calibrate+0x2b2>
    49ec:	f24a 3361 	movw	r3, #41825	; 0xa361
    49f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49f4:	781b      	ldrb	r3, [r3, #0]
    49f6:	461a      	mov	r2, r3
    49f8:	f24a 3364 	movw	r3, #41828	; 0xa364
    49fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a00:	2105      	movs	r1, #5
    4a02:	5499      	strb	r1, [r3, r2]
    4a04:	f24a 3361 	movw	r3, #41825	; 0xa361
    4a08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a0c:	781b      	ldrb	r3, [r3, #0]
    4a0e:	3301      	adds	r3, #1
    4a10:	b2da      	uxtb	r2, r3
    4a12:	f24a 3361 	movw	r3, #41825	; 0xa361
    4a16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a1a:	701a      	strb	r2, [r3, #0]
    4a1c:	f24a 3361 	movw	r3, #41825	; 0xa361
    4a20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a24:	781b      	ldrb	r3, [r3, #0]
    4a26:	2bff      	cmp	r3, #255	; 0xff
    4a28:	d105      	bne.n	4a36 <ground_calibrate+0xf6>
    4a2a:	f24a 3361 	movw	r3, #41825	; 0xa361
    4a2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a32:	2200      	movs	r2, #0
    4a34:	701a      	strb	r2, [r3, #0]
    4a36:	f24a 3361 	movw	r3, #41825	; 0xa361
    4a3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a3e:	781b      	ldrb	r3, [r3, #0]
    4a40:	461a      	mov	r2, r3
    4a42:	f24a 3364 	movw	r3, #41828	; 0xa364
    4a46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a4a:	2102      	movs	r1, #2
    4a4c:	5499      	strb	r1, [r3, r2]
    4a4e:	f24a 3361 	movw	r3, #41825	; 0xa361
    4a52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a56:	781b      	ldrb	r3, [r3, #0]
    4a58:	3301      	adds	r3, #1
    4a5a:	b2da      	uxtb	r2, r3
    4a5c:	f24a 3361 	movw	r3, #41825	; 0xa361
    4a60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a64:	701a      	strb	r2, [r3, #0]
    4a66:	f24a 3361 	movw	r3, #41825	; 0xa361
    4a6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a6e:	781b      	ldrb	r3, [r3, #0]
    4a70:	2bff      	cmp	r3, #255	; 0xff
    4a72:	d105      	bne.n	4a80 <ground_calibrate+0x140>
    4a74:	f24a 3361 	movw	r3, #41825	; 0xa361
    4a78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a7c:	2200      	movs	r2, #0
    4a7e:	701a      	strb	r2, [r3, #0]
    4a80:	f24a 4365 	movw	r3, #42085	; 0xa465
    4a84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a88:	2202      	movs	r2, #2
    4a8a:	701a      	strb	r2, [r3, #0]
    4a8c:	f24a 4366 	movw	r3, #42086	; 0xa466
    4a90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a94:	2202      	movs	r2, #2
    4a96:	701a      	strb	r2, [r3, #0]
    4a98:	f24a 3361 	movw	r3, #41825	; 0xa361
    4a9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4aa0:	781b      	ldrb	r3, [r3, #0]
    4aa2:	461a      	mov	r2, r3
    4aa4:	f24a 4365 	movw	r3, #42085	; 0xa465
    4aa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4aac:	7819      	ldrb	r1, [r3, #0]
    4aae:	f24a 3364 	movw	r3, #41828	; 0xa364
    4ab2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ab6:	5499      	strb	r1, [r3, r2]
    4ab8:	f24a 3361 	movw	r3, #41825	; 0xa361
    4abc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ac0:	781b      	ldrb	r3, [r3, #0]
    4ac2:	3301      	adds	r3, #1
    4ac4:	b2da      	uxtb	r2, r3
    4ac6:	f24a 3361 	movw	r3, #41825	; 0xa361
    4aca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ace:	701a      	strb	r2, [r3, #0]
    4ad0:	f24a 3361 	movw	r3, #41825	; 0xa361
    4ad4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ad8:	781b      	ldrb	r3, [r3, #0]
    4ada:	2bff      	cmp	r3, #255	; 0xff
    4adc:	d105      	bne.n	4aea <ground_calibrate+0x1aa>
    4ade:	f24a 3361 	movw	r3, #41825	; 0xa361
    4ae2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ae6:	2200      	movs	r2, #0
    4ae8:	701a      	strb	r2, [r3, #0]
    4aea:	f24a 3361 	movw	r3, #41825	; 0xa361
    4aee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4af2:	781b      	ldrb	r3, [r3, #0]
    4af4:	461a      	mov	r2, r3
    4af6:	f24a 4366 	movw	r3, #42086	; 0xa466
    4afa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4afe:	7819      	ldrb	r1, [r3, #0]
    4b00:	f24a 3364 	movw	r3, #41828	; 0xa364
    4b04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b08:	5499      	strb	r1, [r3, r2]
    4b0a:	f24a 3361 	movw	r3, #41825	; 0xa361
    4b0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b12:	781b      	ldrb	r3, [r3, #0]
    4b14:	3301      	adds	r3, #1
    4b16:	b2da      	uxtb	r2, r3
    4b18:	f24a 3361 	movw	r3, #41825	; 0xa361
    4b1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b20:	701a      	strb	r2, [r3, #0]
    4b22:	f24a 3361 	movw	r3, #41825	; 0xa361
    4b26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b2a:	781b      	ldrb	r3, [r3, #0]
    4b2c:	2bff      	cmp	r3, #255	; 0xff
    4b2e:	d105      	bne.n	4b3c <ground_calibrate+0x1fc>
    4b30:	f24a 3361 	movw	r3, #41825	; 0xa361
    4b34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b38:	2200      	movs	r2, #0
    4b3a:	701a      	strb	r2, [r3, #0]
    4b3c:	f242 0339 	movw	r3, #8249	; 0x2039
    4b40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b44:	781b      	ldrb	r3, [r3, #0]
    4b46:	b2db      	uxtb	r3, r3
    4b48:	f003 0310 	and.w	r3, r3, #16
    4b4c:	2b00      	cmp	r3, #0
    4b4e:	f041 804e 	bne.w	5bee <ground_calibrate+0x12ae>
    4b52:	f24a 3362 	movw	r3, #41826	; 0xa362
    4b56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b5a:	781b      	ldrb	r3, [r3, #0]
    4b5c:	b2db      	uxtb	r3, r3
    4b5e:	461a      	mov	r2, r3
    4b60:	f24a 3364 	movw	r3, #41828	; 0xa364
    4b64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b68:	5c9a      	ldrb	r2, [r3, r2]
    4b6a:	f24a 4363 	movw	r3, #42083	; 0xa463
    4b6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b72:	701a      	strb	r2, [r3, #0]
    4b74:	f24a 4364 	movw	r3, #42084	; 0xa464
    4b78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b7c:	2200      	movs	r2, #0
    4b7e:	701a      	strb	r2, [r3, #0]
    4b80:	f24a 3362 	movw	r3, #41826	; 0xa362
    4b84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b88:	781b      	ldrb	r3, [r3, #0]
    4b8a:	b2db      	uxtb	r3, r3
    4b8c:	3301      	adds	r3, #1
    4b8e:	b2da      	uxtb	r2, r3
    4b90:	f24a 3362 	movw	r3, #41826	; 0xa362
    4b94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b98:	701a      	strb	r2, [r3, #0]
    4b9a:	f24a 3362 	movw	r3, #41826	; 0xa362
    4b9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ba2:	781b      	ldrb	r3, [r3, #0]
    4ba4:	b2db      	uxtb	r3, r3
    4ba6:	2bff      	cmp	r3, #255	; 0xff
    4ba8:	d105      	bne.n	4bb6 <ground_calibrate+0x276>
    4baa:	f24a 3362 	movw	r3, #41826	; 0xa362
    4bae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bb2:	2200      	movs	r2, #0
    4bb4:	701a      	strb	r2, [r3, #0]
    4bb6:	f242 0338 	movw	r3, #8248	; 0x2038
    4bba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bbe:	f242 0238 	movw	r2, #8248	; 0x2038
    4bc2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4bc6:	7812      	ldrb	r2, [r2, #0]
    4bc8:	b2d2      	uxtb	r2, r2
    4bca:	f042 0201 	orr.w	r2, r2, #1
    4bce:	b2d2      	uxtb	r2, r2
    4bd0:	701a      	strb	r2, [r3, #0]
    4bd2:	f242 0339 	movw	r3, #8249	; 0x2039
    4bd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bda:	f242 0239 	movw	r2, #8249	; 0x2039
    4bde:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4be2:	7812      	ldrb	r2, [r2, #0]
    4be4:	b2d2      	uxtb	r2, r2
    4be6:	f042 0210 	orr.w	r2, r2, #16
    4bea:	b2d2      	uxtb	r2, r2
    4bec:	701a      	strb	r2, [r3, #0]
    4bee:	f000 bffe 	b.w	5bee <ground_calibrate+0x12ae>
    4bf2:	f24a 3360 	movw	r3, #41824	; 0xa360
    4bf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bfa:	781b      	ldrb	r3, [r3, #0]
    4bfc:	3301      	adds	r3, #1
    4bfe:	b2da      	uxtb	r2, r3
    4c00:	f24a 3360 	movw	r3, #41824	; 0xa360
    4c04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c08:	701a      	strb	r2, [r3, #0]
    4c0a:	f000 bff0 	b.w	5bee <ground_calibrate+0x12ae>
    }
}
else if (calib_status == WAITING_CALIB_CONTRAST)
    4c0e:	f24a 335a 	movw	r3, #41818	; 0xa35a
    4c12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c16:	781b      	ldrb	r3, [r3, #0]
    4c18:	2b01      	cmp	r3, #1
    4c1a:	f040 87e8 	bne.w	5bee <ground_calibrate+0x12ae>
{
    if (STICK_PUSHED(from_fbw.channels[RADIO_ROLL])) {
    4c1e:	f24a 4368 	movw	r3, #42088	; 0xa468
    4c22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c26:	885b      	ldrh	r3, [r3, #2]
    4c28:	b21b      	sxth	r3, r3
    4c2a:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
    4c2e:	db09      	blt.n	4c44 <ground_calibrate+0x304>
    4c30:	f24a 4368 	movw	r3, #42088	; 0xa468
    4c34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c38:	885b      	ldrh	r3, [r3, #2]
    4c3a:	b21b      	sxth	r3, r3
    4c3c:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    4c40:	f340 87d5 	ble.w	5bee <ground_calibrate+0x12ae>
      ir_gain_calib();
    4c44:	f00b fcfc 	bl	10640 <ir_gain_calib>
      estimator_rad_of_ir = ir_rad_of_ir;
    4c48:	f240 03dc 	movw	r3, #220	; 0xdc
    4c4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c50:	681a      	ldr	r2, [r3, #0]
    4c52:	f64a 1354 	movw	r3, #43348	; 0xa954
    4c56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c5a:	601a      	str	r2, [r3, #0]
      DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    4c5c:	f24a 3361 	movw	r3, #41825	; 0xa361
    4c60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c64:	781a      	ldrb	r2, [r3, #0]
    4c66:	f24a 3362 	movw	r3, #41826	; 0xa362
    4c6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c6e:	781b      	ldrb	r3, [r3, #0]
    4c70:	b2db      	uxtb	r3, r3
    4c72:	429a      	cmp	r2, r3
    4c74:	d313      	bcc.n	4c9e <ground_calibrate+0x35e>
    4c76:	f24a 3362 	movw	r3, #41826	; 0xa362
    4c7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c7e:	781b      	ldrb	r3, [r3, #0]
    4c80:	b2db      	uxtb	r3, r3
    4c82:	461a      	mov	r2, r3
    4c84:	f24a 3361 	movw	r3, #41825	; 0xa361
    4c88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c8c:	781b      	ldrb	r3, [r3, #0]
    4c8e:	1ad3      	subs	r3, r2, r3
    4c90:	33ff      	adds	r3, #255	; 0xff
    4c92:	2b14      	cmp	r3, #20
    4c94:	bfd4      	ite	le
    4c96:	2300      	movle	r3, #0
    4c98:	2301      	movgt	r3, #1
    4c9a:	b2db      	uxtb	r3, r3
    4c9c:	e011      	b.n	4cc2 <ground_calibrate+0x382>
    4c9e:	f24a 3362 	movw	r3, #41826	; 0xa362
    4ca2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ca6:	781b      	ldrb	r3, [r3, #0]
    4ca8:	b2db      	uxtb	r3, r3
    4caa:	461a      	mov	r2, r3
    4cac:	f24a 3361 	movw	r3, #41825	; 0xa361
    4cb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cb4:	781b      	ldrb	r3, [r3, #0]
    4cb6:	1ad3      	subs	r3, r2, r3
    4cb8:	2b14      	cmp	r3, #20
    4cba:	bfd4      	ite	le
    4cbc:	2300      	movle	r3, #0
    4cbe:	2301      	movgt	r3, #1
    4cc0:	b2db      	uxtb	r3, r3
    4cc2:	2b00      	cmp	r3, #0
    4cc4:	f000 85a6 	beq.w	5814 <ground_calibrate+0xed4>
    4cc8:	f24a 3361 	movw	r3, #41825	; 0xa361
    4ccc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cd0:	781b      	ldrb	r3, [r3, #0]
    4cd2:	461a      	mov	r2, r3
    4cd4:	f24a 3364 	movw	r3, #41828	; 0xa364
    4cd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cdc:	2105      	movs	r1, #5
    4cde:	5499      	strb	r1, [r3, r2]
    4ce0:	f24a 3361 	movw	r3, #41825	; 0xa361
    4ce4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ce8:	781b      	ldrb	r3, [r3, #0]
    4cea:	3301      	adds	r3, #1
    4cec:	b2da      	uxtb	r2, r3
    4cee:	f24a 3361 	movw	r3, #41825	; 0xa361
    4cf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cf6:	701a      	strb	r2, [r3, #0]
    4cf8:	f24a 3361 	movw	r3, #41825	; 0xa361
    4cfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d00:	781b      	ldrb	r3, [r3, #0]
    4d02:	2bff      	cmp	r3, #255	; 0xff
    4d04:	d105      	bne.n	4d12 <ground_calibrate+0x3d2>
    4d06:	f24a 3361 	movw	r3, #41825	; 0xa361
    4d0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d0e:	2200      	movs	r2, #0
    4d10:	701a      	strb	r2, [r3, #0]
    4d12:	f24a 3361 	movw	r3, #41825	; 0xa361
    4d16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d1a:	781b      	ldrb	r3, [r3, #0]
    4d1c:	461a      	mov	r2, r3
    4d1e:	f24a 3364 	movw	r3, #41828	; 0xa364
    4d22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d26:	2105      	movs	r1, #5
    4d28:	5499      	strb	r1, [r3, r2]
    4d2a:	f24a 3361 	movw	r3, #41825	; 0xa361
    4d2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d32:	781b      	ldrb	r3, [r3, #0]
    4d34:	3301      	adds	r3, #1
    4d36:	b2da      	uxtb	r2, r3
    4d38:	f24a 3361 	movw	r3, #41825	; 0xa361
    4d3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d40:	701a      	strb	r2, [r3, #0]
    4d42:	f24a 3361 	movw	r3, #41825	; 0xa361
    4d46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d4a:	781b      	ldrb	r3, [r3, #0]
    4d4c:	2bff      	cmp	r3, #255	; 0xff
    4d4e:	d105      	bne.n	4d5c <ground_calibrate+0x41c>
    4d50:	f24a 3361 	movw	r3, #41825	; 0xa361
    4d54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d58:	2200      	movs	r2, #0
    4d5a:	701a      	strb	r2, [r3, #0]
    4d5c:	f24a 4365 	movw	r3, #42085	; 0xa465
    4d60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d64:	2205      	movs	r2, #5
    4d66:	701a      	strb	r2, [r3, #0]
    4d68:	f24a 4366 	movw	r3, #42086	; 0xa466
    4d6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d70:	2205      	movs	r2, #5
    4d72:	701a      	strb	r2, [r3, #0]
    4d74:	f24a 3361 	movw	r3, #41825	; 0xa361
    4d78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d7c:	781b      	ldrb	r3, [r3, #0]
    4d7e:	461a      	mov	r2, r3
    4d80:	f64a 1358 	movw	r3, #43352	; 0xa958
    4d84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d88:	7819      	ldrb	r1, [r3, #0]
    4d8a:	f24a 3364 	movw	r3, #41828	; 0xa364
    4d8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d92:	5499      	strb	r1, [r3, r2]
    4d94:	f64a 1358 	movw	r3, #43352	; 0xa958
    4d98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d9c:	781a      	ldrb	r2, [r3, #0]
    4d9e:	f24a 4365 	movw	r3, #42085	; 0xa465
    4da2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4da6:	781b      	ldrb	r3, [r3, #0]
    4da8:	4413      	add	r3, r2
    4daa:	b2da      	uxtb	r2, r3
    4dac:	f24a 4365 	movw	r3, #42085	; 0xa465
    4db0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4db4:	701a      	strb	r2, [r3, #0]
    4db6:	f24a 4366 	movw	r3, #42086	; 0xa466
    4dba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4dbe:	781a      	ldrb	r2, [r3, #0]
    4dc0:	f24a 4365 	movw	r3, #42085	; 0xa465
    4dc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4dc8:	781b      	ldrb	r3, [r3, #0]
    4dca:	4413      	add	r3, r2
    4dcc:	b2da      	uxtb	r2, r3
    4dce:	f24a 4366 	movw	r3, #42086	; 0xa466
    4dd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4dd6:	701a      	strb	r2, [r3, #0]
    4dd8:	f24a 3361 	movw	r3, #41825	; 0xa361
    4ddc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4de0:	781b      	ldrb	r3, [r3, #0]
    4de2:	3301      	adds	r3, #1
    4de4:	b2da      	uxtb	r2, r3
    4de6:	f24a 3361 	movw	r3, #41825	; 0xa361
    4dea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4dee:	701a      	strb	r2, [r3, #0]
    4df0:	f24a 3361 	movw	r3, #41825	; 0xa361
    4df4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4df8:	781b      	ldrb	r3, [r3, #0]
    4dfa:	2bff      	cmp	r3, #255	; 0xff
    4dfc:	d105      	bne.n	4e0a <ground_calibrate+0x4ca>
    4dfe:	f24a 3361 	movw	r3, #41825	; 0xa361
    4e02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e06:	2200      	movs	r2, #0
    4e08:	701a      	strb	r2, [r3, #0]
    4e0a:	f24a 3361 	movw	r3, #41825	; 0xa361
    4e0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e12:	781b      	ldrb	r3, [r3, #0]
    4e14:	461a      	mov	r2, r3
    4e16:	f64a 1358 	movw	r3, #43352	; 0xa958
    4e1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e1e:	7859      	ldrb	r1, [r3, #1]
    4e20:	f24a 3364 	movw	r3, #41828	; 0xa364
    4e24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e28:	5499      	strb	r1, [r3, r2]
    4e2a:	4bd2      	ldr	r3, [pc, #840]	; (5174 <ground_calibrate+0x834>)
    4e2c:	781a      	ldrb	r2, [r3, #0]
    4e2e:	f24a 4365 	movw	r3, #42085	; 0xa465
    4e32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e36:	781b      	ldrb	r3, [r3, #0]
    4e38:	4413      	add	r3, r2
    4e3a:	b2da      	uxtb	r2, r3
    4e3c:	f24a 4365 	movw	r3, #42085	; 0xa465
    4e40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e44:	701a      	strb	r2, [r3, #0]
    4e46:	f24a 4366 	movw	r3, #42086	; 0xa466
    4e4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e4e:	781a      	ldrb	r2, [r3, #0]
    4e50:	f24a 4365 	movw	r3, #42085	; 0xa465
    4e54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e58:	781b      	ldrb	r3, [r3, #0]
    4e5a:	4413      	add	r3, r2
    4e5c:	b2da      	uxtb	r2, r3
    4e5e:	f24a 4366 	movw	r3, #42086	; 0xa466
    4e62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e66:	701a      	strb	r2, [r3, #0]
    4e68:	f24a 3361 	movw	r3, #41825	; 0xa361
    4e6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e70:	781b      	ldrb	r3, [r3, #0]
    4e72:	3301      	adds	r3, #1
    4e74:	b2da      	uxtb	r2, r3
    4e76:	f24a 3361 	movw	r3, #41825	; 0xa361
    4e7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e7e:	701a      	strb	r2, [r3, #0]
    4e80:	f24a 3361 	movw	r3, #41825	; 0xa361
    4e84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e88:	781b      	ldrb	r3, [r3, #0]
    4e8a:	2bff      	cmp	r3, #255	; 0xff
    4e8c:	d105      	bne.n	4e9a <ground_calibrate+0x55a>
    4e8e:	f24a 3361 	movw	r3, #41825	; 0xa361
    4e92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e96:	2200      	movs	r2, #0
    4e98:	701a      	strb	r2, [r3, #0]
    4e9a:	f24a 3361 	movw	r3, #41825	; 0xa361
    4e9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ea2:	781b      	ldrb	r3, [r3, #0]
    4ea4:	461a      	mov	r2, r3
    4ea6:	f64a 1358 	movw	r3, #43352	; 0xa958
    4eaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4eae:	7899      	ldrb	r1, [r3, #2]
    4eb0:	f24a 3364 	movw	r3, #41828	; 0xa364
    4eb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4eb8:	5499      	strb	r1, [r3, r2]
    4eba:	4baf      	ldr	r3, [pc, #700]	; (5178 <ground_calibrate+0x838>)
    4ebc:	781a      	ldrb	r2, [r3, #0]
    4ebe:	f24a 4365 	movw	r3, #42085	; 0xa465
    4ec2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ec6:	781b      	ldrb	r3, [r3, #0]
    4ec8:	4413      	add	r3, r2
    4eca:	b2da      	uxtb	r2, r3
    4ecc:	f24a 4365 	movw	r3, #42085	; 0xa465
    4ed0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ed4:	701a      	strb	r2, [r3, #0]
    4ed6:	f24a 4366 	movw	r3, #42086	; 0xa466
    4eda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ede:	781a      	ldrb	r2, [r3, #0]
    4ee0:	f24a 4365 	movw	r3, #42085	; 0xa465
    4ee4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ee8:	781b      	ldrb	r3, [r3, #0]
    4eea:	4413      	add	r3, r2
    4eec:	b2da      	uxtb	r2, r3
    4eee:	f24a 4366 	movw	r3, #42086	; 0xa466
    4ef2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ef6:	701a      	strb	r2, [r3, #0]
    4ef8:	f24a 3361 	movw	r3, #41825	; 0xa361
    4efc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f00:	781b      	ldrb	r3, [r3, #0]
    4f02:	3301      	adds	r3, #1
    4f04:	b2da      	uxtb	r2, r3
    4f06:	f24a 3361 	movw	r3, #41825	; 0xa361
    4f0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f0e:	701a      	strb	r2, [r3, #0]
    4f10:	f24a 3361 	movw	r3, #41825	; 0xa361
    4f14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f18:	781b      	ldrb	r3, [r3, #0]
    4f1a:	2bff      	cmp	r3, #255	; 0xff
    4f1c:	d105      	bne.n	4f2a <ground_calibrate+0x5ea>
    4f1e:	f24a 3361 	movw	r3, #41825	; 0xa361
    4f22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f26:	2200      	movs	r2, #0
    4f28:	701a      	strb	r2, [r3, #0]
    4f2a:	f24a 3361 	movw	r3, #41825	; 0xa361
    4f2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f32:	781b      	ldrb	r3, [r3, #0]
    4f34:	461a      	mov	r2, r3
    4f36:	f64a 1358 	movw	r3, #43352	; 0xa958
    4f3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f3e:	78d9      	ldrb	r1, [r3, #3]
    4f40:	f24a 3364 	movw	r3, #41828	; 0xa364
    4f44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f48:	5499      	strb	r1, [r3, r2]
    4f4a:	4b8c      	ldr	r3, [pc, #560]	; (517c <ground_calibrate+0x83c>)
    4f4c:	781a      	ldrb	r2, [r3, #0]
    4f4e:	f24a 4365 	movw	r3, #42085	; 0xa465
    4f52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f56:	781b      	ldrb	r3, [r3, #0]
    4f58:	4413      	add	r3, r2
    4f5a:	b2da      	uxtb	r2, r3
    4f5c:	f24a 4365 	movw	r3, #42085	; 0xa465
    4f60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f64:	701a      	strb	r2, [r3, #0]
    4f66:	f24a 4366 	movw	r3, #42086	; 0xa466
    4f6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f6e:	781a      	ldrb	r2, [r3, #0]
    4f70:	f24a 4365 	movw	r3, #42085	; 0xa465
    4f74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f78:	781b      	ldrb	r3, [r3, #0]
    4f7a:	4413      	add	r3, r2
    4f7c:	b2da      	uxtb	r2, r3
    4f7e:	f24a 4366 	movw	r3, #42086	; 0xa466
    4f82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f86:	701a      	strb	r2, [r3, #0]
    4f88:	f24a 3361 	movw	r3, #41825	; 0xa361
    4f8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f90:	781b      	ldrb	r3, [r3, #0]
    4f92:	3301      	adds	r3, #1
    4f94:	b2da      	uxtb	r2, r3
    4f96:	f24a 3361 	movw	r3, #41825	; 0xa361
    4f9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f9e:	701a      	strb	r2, [r3, #0]
    4fa0:	f24a 3361 	movw	r3, #41825	; 0xa361
    4fa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fa8:	781b      	ldrb	r3, [r3, #0]
    4faa:	2bff      	cmp	r3, #255	; 0xff
    4fac:	d105      	bne.n	4fba <ground_calibrate+0x67a>
    4fae:	f24a 3361 	movw	r3, #41825	; 0xa361
    4fb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fb6:	2200      	movs	r2, #0
    4fb8:	701a      	strb	r2, [r3, #0]
    4fba:	f24a 3361 	movw	r3, #41825	; 0xa361
    4fbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fc2:	781b      	ldrb	r3, [r3, #0]
    4fc4:	461a      	mov	r2, r3
    4fc6:	f64a 135c 	movw	r3, #43356	; 0xa95c
    4fca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fce:	7819      	ldrb	r1, [r3, #0]
    4fd0:	f24a 3364 	movw	r3, #41828	; 0xa364
    4fd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fd8:	5499      	strb	r1, [r3, r2]
    4fda:	f64a 135c 	movw	r3, #43356	; 0xa95c
    4fde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fe2:	781a      	ldrb	r2, [r3, #0]
    4fe4:	f24a 4365 	movw	r3, #42085	; 0xa465
    4fe8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fec:	781b      	ldrb	r3, [r3, #0]
    4fee:	4413      	add	r3, r2
    4ff0:	b2da      	uxtb	r2, r3
    4ff2:	f24a 4365 	movw	r3, #42085	; 0xa465
    4ff6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ffa:	701a      	strb	r2, [r3, #0]
    4ffc:	f24a 4366 	movw	r3, #42086	; 0xa466
    5000:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5004:	781a      	ldrb	r2, [r3, #0]
    5006:	f24a 4365 	movw	r3, #42085	; 0xa465
    500a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    500e:	781b      	ldrb	r3, [r3, #0]
    5010:	4413      	add	r3, r2
    5012:	b2da      	uxtb	r2, r3
    5014:	f24a 4366 	movw	r3, #42086	; 0xa466
    5018:	f2c2 0300 	movt	r3, #8192	; 0x2000
    501c:	701a      	strb	r2, [r3, #0]
    501e:	f24a 3361 	movw	r3, #41825	; 0xa361
    5022:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5026:	781b      	ldrb	r3, [r3, #0]
    5028:	3301      	adds	r3, #1
    502a:	b2da      	uxtb	r2, r3
    502c:	f24a 3361 	movw	r3, #41825	; 0xa361
    5030:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5034:	701a      	strb	r2, [r3, #0]
    5036:	f24a 3361 	movw	r3, #41825	; 0xa361
    503a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    503e:	781b      	ldrb	r3, [r3, #0]
    5040:	2bff      	cmp	r3, #255	; 0xff
    5042:	d105      	bne.n	5050 <ground_calibrate+0x710>
    5044:	f24a 3361 	movw	r3, #41825	; 0xa361
    5048:	f2c2 0300 	movt	r3, #8192	; 0x2000
    504c:	2200      	movs	r2, #0
    504e:	701a      	strb	r2, [r3, #0]
    5050:	f24a 3361 	movw	r3, #41825	; 0xa361
    5054:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5058:	781b      	ldrb	r3, [r3, #0]
    505a:	461a      	mov	r2, r3
    505c:	f64a 135c 	movw	r3, #43356	; 0xa95c
    5060:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5064:	7859      	ldrb	r1, [r3, #1]
    5066:	f24a 3364 	movw	r3, #41828	; 0xa364
    506a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    506e:	5499      	strb	r1, [r3, r2]
    5070:	4b43      	ldr	r3, [pc, #268]	; (5180 <ground_calibrate+0x840>)
    5072:	781a      	ldrb	r2, [r3, #0]
    5074:	f24a 4365 	movw	r3, #42085	; 0xa465
    5078:	f2c2 0300 	movt	r3, #8192	; 0x2000
    507c:	781b      	ldrb	r3, [r3, #0]
    507e:	4413      	add	r3, r2
    5080:	b2da      	uxtb	r2, r3
    5082:	f24a 4365 	movw	r3, #42085	; 0xa465
    5086:	f2c2 0300 	movt	r3, #8192	; 0x2000
    508a:	701a      	strb	r2, [r3, #0]
    508c:	f24a 4366 	movw	r3, #42086	; 0xa466
    5090:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5094:	781a      	ldrb	r2, [r3, #0]
    5096:	f24a 4365 	movw	r3, #42085	; 0xa465
    509a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    509e:	781b      	ldrb	r3, [r3, #0]
    50a0:	4413      	add	r3, r2
    50a2:	b2da      	uxtb	r2, r3
    50a4:	f24a 4366 	movw	r3, #42086	; 0xa466
    50a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50ac:	701a      	strb	r2, [r3, #0]
    50ae:	f24a 3361 	movw	r3, #41825	; 0xa361
    50b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50b6:	781b      	ldrb	r3, [r3, #0]
    50b8:	3301      	adds	r3, #1
    50ba:	b2da      	uxtb	r2, r3
    50bc:	f24a 3361 	movw	r3, #41825	; 0xa361
    50c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50c4:	701a      	strb	r2, [r3, #0]
    50c6:	f24a 3361 	movw	r3, #41825	; 0xa361
    50ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50ce:	781b      	ldrb	r3, [r3, #0]
    50d0:	2bff      	cmp	r3, #255	; 0xff
    50d2:	d105      	bne.n	50e0 <ground_calibrate+0x7a0>
    50d4:	f24a 3361 	movw	r3, #41825	; 0xa361
    50d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50dc:	2200      	movs	r2, #0
    50de:	701a      	strb	r2, [r3, #0]
    50e0:	f24a 3361 	movw	r3, #41825	; 0xa361
    50e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50e8:	781b      	ldrb	r3, [r3, #0]
    50ea:	461a      	mov	r2, r3
    50ec:	f64a 135c 	movw	r3, #43356	; 0xa95c
    50f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50f4:	7899      	ldrb	r1, [r3, #2]
    50f6:	f24a 3364 	movw	r3, #41828	; 0xa364
    50fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50fe:	5499      	strb	r1, [r3, r2]
    5100:	4b20      	ldr	r3, [pc, #128]	; (5184 <ground_calibrate+0x844>)
    5102:	781a      	ldrb	r2, [r3, #0]
    5104:	f24a 4365 	movw	r3, #42085	; 0xa465
    5108:	f2c2 0300 	movt	r3, #8192	; 0x2000
    510c:	781b      	ldrb	r3, [r3, #0]
    510e:	4413      	add	r3, r2
    5110:	b2da      	uxtb	r2, r3
    5112:	f24a 4365 	movw	r3, #42085	; 0xa465
    5116:	f2c2 0300 	movt	r3, #8192	; 0x2000
    511a:	701a      	strb	r2, [r3, #0]
    511c:	f24a 4366 	movw	r3, #42086	; 0xa466
    5120:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5124:	781a      	ldrb	r2, [r3, #0]
    5126:	f24a 4365 	movw	r3, #42085	; 0xa465
    512a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    512e:	781b      	ldrb	r3, [r3, #0]
    5130:	4413      	add	r3, r2
    5132:	b2da      	uxtb	r2, r3
    5134:	f24a 4366 	movw	r3, #42086	; 0xa466
    5138:	f2c2 0300 	movt	r3, #8192	; 0x2000
    513c:	701a      	strb	r2, [r3, #0]
    513e:	f24a 3361 	movw	r3, #41825	; 0xa361
    5142:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5146:	781b      	ldrb	r3, [r3, #0]
    5148:	3301      	adds	r3, #1
    514a:	b2da      	uxtb	r2, r3
    514c:	f24a 3361 	movw	r3, #41825	; 0xa361
    5150:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5154:	701a      	strb	r2, [r3, #0]
    5156:	f24a 3361 	movw	r3, #41825	; 0xa361
    515a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    515e:	781b      	ldrb	r3, [r3, #0]
    5160:	2bff      	cmp	r3, #255	; 0xff
    5162:	d111      	bne.n	5188 <ground_calibrate+0x848>
    5164:	f24a 3361 	movw	r3, #41825	; 0xa361
    5168:	f2c2 0300 	movt	r3, #8192	; 0x2000
    516c:	2200      	movs	r2, #0
    516e:	701a      	strb	r2, [r3, #0]
    5170:	e00a      	b.n	5188 <ground_calibrate+0x848>
    5172:	bf00      	nop
    5174:	2000a959 	.word	0x2000a959
    5178:	2000a95a 	.word	0x2000a95a
    517c:	2000a95b 	.word	0x2000a95b
    5180:	2000a95d 	.word	0x2000a95d
    5184:	2000a95e 	.word	0x2000a95e
    5188:	f24a 3361 	movw	r3, #41825	; 0xa361
    518c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5190:	781b      	ldrb	r3, [r3, #0]
    5192:	461a      	mov	r2, r3
    5194:	f64a 135c 	movw	r3, #43356	; 0xa95c
    5198:	f2c2 0300 	movt	r3, #8192	; 0x2000
    519c:	78d9      	ldrb	r1, [r3, #3]
    519e:	f24a 3364 	movw	r3, #41828	; 0xa364
    51a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51a6:	5499      	strb	r1, [r3, r2]
    51a8:	4bd3      	ldr	r3, [pc, #844]	; (54f8 <ground_calibrate+0xbb8>)
    51aa:	781a      	ldrb	r2, [r3, #0]
    51ac:	f24a 4365 	movw	r3, #42085	; 0xa465
    51b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51b4:	781b      	ldrb	r3, [r3, #0]
    51b6:	4413      	add	r3, r2
    51b8:	b2da      	uxtb	r2, r3
    51ba:	f24a 4365 	movw	r3, #42085	; 0xa465
    51be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51c2:	701a      	strb	r2, [r3, #0]
    51c4:	f24a 4366 	movw	r3, #42086	; 0xa466
    51c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51cc:	781a      	ldrb	r2, [r3, #0]
    51ce:	f24a 4365 	movw	r3, #42085	; 0xa465
    51d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51d6:	781b      	ldrb	r3, [r3, #0]
    51d8:	4413      	add	r3, r2
    51da:	b2da      	uxtb	r2, r3
    51dc:	f24a 4366 	movw	r3, #42086	; 0xa466
    51e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51e4:	701a      	strb	r2, [r3, #0]
    51e6:	f24a 3361 	movw	r3, #41825	; 0xa361
    51ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51ee:	781b      	ldrb	r3, [r3, #0]
    51f0:	3301      	adds	r3, #1
    51f2:	b2da      	uxtb	r2, r3
    51f4:	f24a 3361 	movw	r3, #41825	; 0xa361
    51f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51fc:	701a      	strb	r2, [r3, #0]
    51fe:	f24a 3361 	movw	r3, #41825	; 0xa361
    5202:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5206:	781b      	ldrb	r3, [r3, #0]
    5208:	2bff      	cmp	r3, #255	; 0xff
    520a:	d105      	bne.n	5218 <ground_calibrate+0x8d8>
    520c:	f24a 3361 	movw	r3, #41825	; 0xa361
    5210:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5214:	2200      	movs	r2, #0
    5216:	701a      	strb	r2, [r3, #0]
    5218:	f24a 3361 	movw	r3, #41825	; 0xa361
    521c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5220:	781b      	ldrb	r3, [r3, #0]
    5222:	461a      	mov	r2, r3
    5224:	f64a 1354 	movw	r3, #43348	; 0xa954
    5228:	f2c2 0300 	movt	r3, #8192	; 0x2000
    522c:	7819      	ldrb	r1, [r3, #0]
    522e:	f24a 3364 	movw	r3, #41828	; 0xa364
    5232:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5236:	5499      	strb	r1, [r3, r2]
    5238:	f64a 1354 	movw	r3, #43348	; 0xa954
    523c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5240:	781a      	ldrb	r2, [r3, #0]
    5242:	f24a 4365 	movw	r3, #42085	; 0xa465
    5246:	f2c2 0300 	movt	r3, #8192	; 0x2000
    524a:	781b      	ldrb	r3, [r3, #0]
    524c:	4413      	add	r3, r2
    524e:	b2da      	uxtb	r2, r3
    5250:	f24a 4365 	movw	r3, #42085	; 0xa465
    5254:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5258:	701a      	strb	r2, [r3, #0]
    525a:	f24a 4366 	movw	r3, #42086	; 0xa466
    525e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5262:	781a      	ldrb	r2, [r3, #0]
    5264:	f24a 4365 	movw	r3, #42085	; 0xa465
    5268:	f2c2 0300 	movt	r3, #8192	; 0x2000
    526c:	781b      	ldrb	r3, [r3, #0]
    526e:	4413      	add	r3, r2
    5270:	b2da      	uxtb	r2, r3
    5272:	f24a 4366 	movw	r3, #42086	; 0xa466
    5276:	f2c2 0300 	movt	r3, #8192	; 0x2000
    527a:	701a      	strb	r2, [r3, #0]
    527c:	f24a 3361 	movw	r3, #41825	; 0xa361
    5280:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5284:	781b      	ldrb	r3, [r3, #0]
    5286:	3301      	adds	r3, #1
    5288:	b2da      	uxtb	r2, r3
    528a:	f24a 3361 	movw	r3, #41825	; 0xa361
    528e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5292:	701a      	strb	r2, [r3, #0]
    5294:	f24a 3361 	movw	r3, #41825	; 0xa361
    5298:	f2c2 0300 	movt	r3, #8192	; 0x2000
    529c:	781b      	ldrb	r3, [r3, #0]
    529e:	2bff      	cmp	r3, #255	; 0xff
    52a0:	d105      	bne.n	52ae <ground_calibrate+0x96e>
    52a2:	f24a 3361 	movw	r3, #41825	; 0xa361
    52a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52aa:	2200      	movs	r2, #0
    52ac:	701a      	strb	r2, [r3, #0]
    52ae:	f24a 3361 	movw	r3, #41825	; 0xa361
    52b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52b6:	781b      	ldrb	r3, [r3, #0]
    52b8:	461a      	mov	r2, r3
    52ba:	f64a 1354 	movw	r3, #43348	; 0xa954
    52be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52c2:	7859      	ldrb	r1, [r3, #1]
    52c4:	f24a 3364 	movw	r3, #41828	; 0xa364
    52c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52cc:	5499      	strb	r1, [r3, r2]
    52ce:	4b8b      	ldr	r3, [pc, #556]	; (54fc <ground_calibrate+0xbbc>)
    52d0:	781a      	ldrb	r2, [r3, #0]
    52d2:	f24a 4365 	movw	r3, #42085	; 0xa465
    52d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52da:	781b      	ldrb	r3, [r3, #0]
    52dc:	4413      	add	r3, r2
    52de:	b2da      	uxtb	r2, r3
    52e0:	f24a 4365 	movw	r3, #42085	; 0xa465
    52e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52e8:	701a      	strb	r2, [r3, #0]
    52ea:	f24a 4366 	movw	r3, #42086	; 0xa466
    52ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52f2:	781a      	ldrb	r2, [r3, #0]
    52f4:	f24a 4365 	movw	r3, #42085	; 0xa465
    52f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52fc:	781b      	ldrb	r3, [r3, #0]
    52fe:	4413      	add	r3, r2
    5300:	b2da      	uxtb	r2, r3
    5302:	f24a 4366 	movw	r3, #42086	; 0xa466
    5306:	f2c2 0300 	movt	r3, #8192	; 0x2000
    530a:	701a      	strb	r2, [r3, #0]
    530c:	f24a 3361 	movw	r3, #41825	; 0xa361
    5310:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5314:	781b      	ldrb	r3, [r3, #0]
    5316:	3301      	adds	r3, #1
    5318:	b2da      	uxtb	r2, r3
    531a:	f24a 3361 	movw	r3, #41825	; 0xa361
    531e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5322:	701a      	strb	r2, [r3, #0]
    5324:	f24a 3361 	movw	r3, #41825	; 0xa361
    5328:	f2c2 0300 	movt	r3, #8192	; 0x2000
    532c:	781b      	ldrb	r3, [r3, #0]
    532e:	2bff      	cmp	r3, #255	; 0xff
    5330:	d105      	bne.n	533e <ground_calibrate+0x9fe>
    5332:	f24a 3361 	movw	r3, #41825	; 0xa361
    5336:	f2c2 0300 	movt	r3, #8192	; 0x2000
    533a:	2200      	movs	r2, #0
    533c:	701a      	strb	r2, [r3, #0]
    533e:	f24a 3361 	movw	r3, #41825	; 0xa361
    5342:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5346:	781b      	ldrb	r3, [r3, #0]
    5348:	461a      	mov	r2, r3
    534a:	f64a 1354 	movw	r3, #43348	; 0xa954
    534e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5352:	7899      	ldrb	r1, [r3, #2]
    5354:	f24a 3364 	movw	r3, #41828	; 0xa364
    5358:	f2c2 0300 	movt	r3, #8192	; 0x2000
    535c:	5499      	strb	r1, [r3, r2]
    535e:	4b68      	ldr	r3, [pc, #416]	; (5500 <ground_calibrate+0xbc0>)
    5360:	781a      	ldrb	r2, [r3, #0]
    5362:	f24a 4365 	movw	r3, #42085	; 0xa465
    5366:	f2c2 0300 	movt	r3, #8192	; 0x2000
    536a:	781b      	ldrb	r3, [r3, #0]
    536c:	4413      	add	r3, r2
    536e:	b2da      	uxtb	r2, r3
    5370:	f24a 4365 	movw	r3, #42085	; 0xa465
    5374:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5378:	701a      	strb	r2, [r3, #0]
    537a:	f24a 4366 	movw	r3, #42086	; 0xa466
    537e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5382:	781a      	ldrb	r2, [r3, #0]
    5384:	f24a 4365 	movw	r3, #42085	; 0xa465
    5388:	f2c2 0300 	movt	r3, #8192	; 0x2000
    538c:	781b      	ldrb	r3, [r3, #0]
    538e:	4413      	add	r3, r2
    5390:	b2da      	uxtb	r2, r3
    5392:	f24a 4366 	movw	r3, #42086	; 0xa466
    5396:	f2c2 0300 	movt	r3, #8192	; 0x2000
    539a:	701a      	strb	r2, [r3, #0]
    539c:	f24a 3361 	movw	r3, #41825	; 0xa361
    53a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53a4:	781b      	ldrb	r3, [r3, #0]
    53a6:	3301      	adds	r3, #1
    53a8:	b2da      	uxtb	r2, r3
    53aa:	f24a 3361 	movw	r3, #41825	; 0xa361
    53ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53b2:	701a      	strb	r2, [r3, #0]
    53b4:	f24a 3361 	movw	r3, #41825	; 0xa361
    53b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53bc:	781b      	ldrb	r3, [r3, #0]
    53be:	2bff      	cmp	r3, #255	; 0xff
    53c0:	d105      	bne.n	53ce <ground_calibrate+0xa8e>
    53c2:	f24a 3361 	movw	r3, #41825	; 0xa361
    53c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53ca:	2200      	movs	r2, #0
    53cc:	701a      	strb	r2, [r3, #0]
    53ce:	f24a 3361 	movw	r3, #41825	; 0xa361
    53d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53d6:	781b      	ldrb	r3, [r3, #0]
    53d8:	461a      	mov	r2, r3
    53da:	f64a 1354 	movw	r3, #43348	; 0xa954
    53de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53e2:	78d9      	ldrb	r1, [r3, #3]
    53e4:	f24a 3364 	movw	r3, #41828	; 0xa364
    53e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53ec:	5499      	strb	r1, [r3, r2]
    53ee:	4b45      	ldr	r3, [pc, #276]	; (5504 <ground_calibrate+0xbc4>)
    53f0:	781a      	ldrb	r2, [r3, #0]
    53f2:	f24a 4365 	movw	r3, #42085	; 0xa465
    53f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53fa:	781b      	ldrb	r3, [r3, #0]
    53fc:	4413      	add	r3, r2
    53fe:	b2da      	uxtb	r2, r3
    5400:	f24a 4365 	movw	r3, #42085	; 0xa465
    5404:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5408:	701a      	strb	r2, [r3, #0]
    540a:	f24a 4366 	movw	r3, #42086	; 0xa466
    540e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5412:	781a      	ldrb	r2, [r3, #0]
    5414:	f24a 4365 	movw	r3, #42085	; 0xa465
    5418:	f2c2 0300 	movt	r3, #8192	; 0x2000
    541c:	781b      	ldrb	r3, [r3, #0]
    541e:	4413      	add	r3, r2
    5420:	b2da      	uxtb	r2, r3
    5422:	f24a 4366 	movw	r3, #42086	; 0xa466
    5426:	f2c2 0300 	movt	r3, #8192	; 0x2000
    542a:	701a      	strb	r2, [r3, #0]
    542c:	f24a 3361 	movw	r3, #41825	; 0xa361
    5430:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5434:	781b      	ldrb	r3, [r3, #0]
    5436:	3301      	adds	r3, #1
    5438:	b2da      	uxtb	r2, r3
    543a:	f24a 3361 	movw	r3, #41825	; 0xa361
    543e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5442:	701a      	strb	r2, [r3, #0]
    5444:	f24a 3361 	movw	r3, #41825	; 0xa361
    5448:	f2c2 0300 	movt	r3, #8192	; 0x2000
    544c:	781b      	ldrb	r3, [r3, #0]
    544e:	2bff      	cmp	r3, #255	; 0xff
    5450:	d105      	bne.n	545e <ground_calibrate+0xb1e>
    5452:	f24a 3361 	movw	r3, #41825	; 0xa361
    5456:	f2c2 0300 	movt	r3, #8192	; 0x2000
    545a:	2200      	movs	r2, #0
    545c:	701a      	strb	r2, [r3, #0]
    545e:	f24a 3361 	movw	r3, #41825	; 0xa361
    5462:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5466:	781b      	ldrb	r3, [r3, #0]
    5468:	461a      	mov	r2, r3
    546a:	f240 03d6 	movw	r3, #214	; 0xd6
    546e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5472:	7819      	ldrb	r1, [r3, #0]
    5474:	f24a 3364 	movw	r3, #41828	; 0xa364
    5478:	f2c2 0300 	movt	r3, #8192	; 0x2000
    547c:	5499      	strb	r1, [r3, r2]
    547e:	f240 03d6 	movw	r3, #214	; 0xd6
    5482:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5486:	781a      	ldrb	r2, [r3, #0]
    5488:	f24a 4365 	movw	r3, #42085	; 0xa465
    548c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5490:	781b      	ldrb	r3, [r3, #0]
    5492:	4413      	add	r3, r2
    5494:	b2da      	uxtb	r2, r3
    5496:	f24a 4365 	movw	r3, #42085	; 0xa465
    549a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    549e:	701a      	strb	r2, [r3, #0]
    54a0:	f24a 4366 	movw	r3, #42086	; 0xa466
    54a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54a8:	781a      	ldrb	r2, [r3, #0]
    54aa:	f24a 4365 	movw	r3, #42085	; 0xa465
    54ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54b2:	781b      	ldrb	r3, [r3, #0]
    54b4:	4413      	add	r3, r2
    54b6:	b2da      	uxtb	r2, r3
    54b8:	f24a 4366 	movw	r3, #42086	; 0xa466
    54bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54c0:	701a      	strb	r2, [r3, #0]
    54c2:	f24a 3361 	movw	r3, #41825	; 0xa361
    54c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54ca:	781b      	ldrb	r3, [r3, #0]
    54cc:	3301      	adds	r3, #1
    54ce:	b2da      	uxtb	r2, r3
    54d0:	f24a 3361 	movw	r3, #41825	; 0xa361
    54d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54d8:	701a      	strb	r2, [r3, #0]
    54da:	f24a 3361 	movw	r3, #41825	; 0xa361
    54de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54e2:	781b      	ldrb	r3, [r3, #0]
    54e4:	2bff      	cmp	r3, #255	; 0xff
    54e6:	d10f      	bne.n	5508 <ground_calibrate+0xbc8>
    54e8:	f24a 3361 	movw	r3, #41825	; 0xa361
    54ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54f0:	2200      	movs	r2, #0
    54f2:	701a      	strb	r2, [r3, #0]
    54f4:	e008      	b.n	5508 <ground_calibrate+0xbc8>
    54f6:	bf00      	nop
    54f8:	2000a95f 	.word	0x2000a95f
    54fc:	2000a955 	.word	0x2000a955
    5500:	2000a956 	.word	0x2000a956
    5504:	2000a957 	.word	0x2000a957
    5508:	f24a 3361 	movw	r3, #41825	; 0xa361
    550c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5510:	781b      	ldrb	r3, [r3, #0]
    5512:	461a      	mov	r2, r3
    5514:	f240 03d6 	movw	r3, #214	; 0xd6
    5518:	f2c2 0300 	movt	r3, #8192	; 0x2000
    551c:	7859      	ldrb	r1, [r3, #1]
    551e:	f24a 3364 	movw	r3, #41828	; 0xa364
    5522:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5526:	5499      	strb	r1, [r3, r2]
    5528:	4bd4      	ldr	r3, [pc, #848]	; (587c <ground_calibrate+0xf3c>)
    552a:	781a      	ldrb	r2, [r3, #0]
    552c:	f24a 4365 	movw	r3, #42085	; 0xa465
    5530:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5534:	781b      	ldrb	r3, [r3, #0]
    5536:	4413      	add	r3, r2
    5538:	b2da      	uxtb	r2, r3
    553a:	f24a 4365 	movw	r3, #42085	; 0xa465
    553e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5542:	701a      	strb	r2, [r3, #0]
    5544:	f24a 4366 	movw	r3, #42086	; 0xa466
    5548:	f2c2 0300 	movt	r3, #8192	; 0x2000
    554c:	781a      	ldrb	r2, [r3, #0]
    554e:	f24a 4365 	movw	r3, #42085	; 0xa465
    5552:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5556:	781b      	ldrb	r3, [r3, #0]
    5558:	4413      	add	r3, r2
    555a:	b2da      	uxtb	r2, r3
    555c:	f24a 4366 	movw	r3, #42086	; 0xa466
    5560:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5564:	701a      	strb	r2, [r3, #0]
    5566:	f24a 3361 	movw	r3, #41825	; 0xa361
    556a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    556e:	781b      	ldrb	r3, [r3, #0]
    5570:	3301      	adds	r3, #1
    5572:	b2da      	uxtb	r2, r3
    5574:	f24a 3361 	movw	r3, #41825	; 0xa361
    5578:	f2c2 0300 	movt	r3, #8192	; 0x2000
    557c:	701a      	strb	r2, [r3, #0]
    557e:	f24a 3361 	movw	r3, #41825	; 0xa361
    5582:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5586:	781b      	ldrb	r3, [r3, #0]
    5588:	2bff      	cmp	r3, #255	; 0xff
    558a:	d105      	bne.n	5598 <ground_calibrate+0xc58>
    558c:	f24a 3361 	movw	r3, #41825	; 0xa361
    5590:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5594:	2200      	movs	r2, #0
    5596:	701a      	strb	r2, [r3, #0]
    5598:	f24a 3361 	movw	r3, #41825	; 0xa361
    559c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55a0:	781b      	ldrb	r3, [r3, #0]
    55a2:	461a      	mov	r2, r3
    55a4:	f240 03d8 	movw	r3, #216	; 0xd8
    55a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55ac:	7819      	ldrb	r1, [r3, #0]
    55ae:	f24a 3364 	movw	r3, #41828	; 0xa364
    55b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55b6:	5499      	strb	r1, [r3, r2]
    55b8:	f240 03d8 	movw	r3, #216	; 0xd8
    55bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55c0:	781a      	ldrb	r2, [r3, #0]
    55c2:	f24a 4365 	movw	r3, #42085	; 0xa465
    55c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55ca:	781b      	ldrb	r3, [r3, #0]
    55cc:	4413      	add	r3, r2
    55ce:	b2da      	uxtb	r2, r3
    55d0:	f24a 4365 	movw	r3, #42085	; 0xa465
    55d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55d8:	701a      	strb	r2, [r3, #0]
    55da:	f24a 4366 	movw	r3, #42086	; 0xa466
    55de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55e2:	781a      	ldrb	r2, [r3, #0]
    55e4:	f24a 4365 	movw	r3, #42085	; 0xa465
    55e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55ec:	781b      	ldrb	r3, [r3, #0]
    55ee:	4413      	add	r3, r2
    55f0:	b2da      	uxtb	r2, r3
    55f2:	f24a 4366 	movw	r3, #42086	; 0xa466
    55f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55fa:	701a      	strb	r2, [r3, #0]
    55fc:	f24a 3361 	movw	r3, #41825	; 0xa361
    5600:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5604:	781b      	ldrb	r3, [r3, #0]
    5606:	3301      	adds	r3, #1
    5608:	b2da      	uxtb	r2, r3
    560a:	f24a 3361 	movw	r3, #41825	; 0xa361
    560e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5612:	701a      	strb	r2, [r3, #0]
    5614:	f24a 3361 	movw	r3, #41825	; 0xa361
    5618:	f2c2 0300 	movt	r3, #8192	; 0x2000
    561c:	781b      	ldrb	r3, [r3, #0]
    561e:	2bff      	cmp	r3, #255	; 0xff
    5620:	d105      	bne.n	562e <ground_calibrate+0xcee>
    5622:	f24a 3361 	movw	r3, #41825	; 0xa361
    5626:	f2c2 0300 	movt	r3, #8192	; 0x2000
    562a:	2200      	movs	r2, #0
    562c:	701a      	strb	r2, [r3, #0]
    562e:	f24a 3361 	movw	r3, #41825	; 0xa361
    5632:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5636:	781b      	ldrb	r3, [r3, #0]
    5638:	461a      	mov	r2, r3
    563a:	f240 03d8 	movw	r3, #216	; 0xd8
    563e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5642:	7859      	ldrb	r1, [r3, #1]
    5644:	f24a 3364 	movw	r3, #41828	; 0xa364
    5648:	f2c2 0300 	movt	r3, #8192	; 0x2000
    564c:	5499      	strb	r1, [r3, r2]
    564e:	4b8c      	ldr	r3, [pc, #560]	; (5880 <ground_calibrate+0xf40>)
    5650:	781a      	ldrb	r2, [r3, #0]
    5652:	f24a 4365 	movw	r3, #42085	; 0xa465
    5656:	f2c2 0300 	movt	r3, #8192	; 0x2000
    565a:	781b      	ldrb	r3, [r3, #0]
    565c:	4413      	add	r3, r2
    565e:	b2da      	uxtb	r2, r3
    5660:	f24a 4365 	movw	r3, #42085	; 0xa465
    5664:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5668:	701a      	strb	r2, [r3, #0]
    566a:	f24a 4366 	movw	r3, #42086	; 0xa466
    566e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5672:	781a      	ldrb	r2, [r3, #0]
    5674:	f24a 4365 	movw	r3, #42085	; 0xa465
    5678:	f2c2 0300 	movt	r3, #8192	; 0x2000
    567c:	781b      	ldrb	r3, [r3, #0]
    567e:	4413      	add	r3, r2
    5680:	b2da      	uxtb	r2, r3
    5682:	f24a 4366 	movw	r3, #42086	; 0xa466
    5686:	f2c2 0300 	movt	r3, #8192	; 0x2000
    568a:	701a      	strb	r2, [r3, #0]
    568c:	f24a 3361 	movw	r3, #41825	; 0xa361
    5690:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5694:	781b      	ldrb	r3, [r3, #0]
    5696:	3301      	adds	r3, #1
    5698:	b2da      	uxtb	r2, r3
    569a:	f24a 3361 	movw	r3, #41825	; 0xa361
    569e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56a2:	701a      	strb	r2, [r3, #0]
    56a4:	f24a 3361 	movw	r3, #41825	; 0xa361
    56a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56ac:	781b      	ldrb	r3, [r3, #0]
    56ae:	2bff      	cmp	r3, #255	; 0xff
    56b0:	d105      	bne.n	56be <ground_calibrate+0xd7e>
    56b2:	f24a 3361 	movw	r3, #41825	; 0xa361
    56b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56ba:	2200      	movs	r2, #0
    56bc:	701a      	strb	r2, [r3, #0]
    56be:	f24a 3361 	movw	r3, #41825	; 0xa361
    56c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56c6:	781b      	ldrb	r3, [r3, #0]
    56c8:	461a      	mov	r2, r3
    56ca:	f24a 4365 	movw	r3, #42085	; 0xa465
    56ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56d2:	7819      	ldrb	r1, [r3, #0]
    56d4:	f24a 3364 	movw	r3, #41828	; 0xa364
    56d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56dc:	5499      	strb	r1, [r3, r2]
    56de:	f24a 3361 	movw	r3, #41825	; 0xa361
    56e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56e6:	781b      	ldrb	r3, [r3, #0]
    56e8:	3301      	adds	r3, #1
    56ea:	b2da      	uxtb	r2, r3
    56ec:	f24a 3361 	movw	r3, #41825	; 0xa361
    56f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56f4:	701a      	strb	r2, [r3, #0]
    56f6:	f24a 3361 	movw	r3, #41825	; 0xa361
    56fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56fe:	781b      	ldrb	r3, [r3, #0]
    5700:	2bff      	cmp	r3, #255	; 0xff
    5702:	d105      	bne.n	5710 <ground_calibrate+0xdd0>
    5704:	f24a 3361 	movw	r3, #41825	; 0xa361
    5708:	f2c2 0300 	movt	r3, #8192	; 0x2000
    570c:	2200      	movs	r2, #0
    570e:	701a      	strb	r2, [r3, #0]
    5710:	f24a 3361 	movw	r3, #41825	; 0xa361
    5714:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5718:	781b      	ldrb	r3, [r3, #0]
    571a:	461a      	mov	r2, r3
    571c:	f24a 4366 	movw	r3, #42086	; 0xa466
    5720:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5724:	7819      	ldrb	r1, [r3, #0]
    5726:	f24a 3364 	movw	r3, #41828	; 0xa364
    572a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    572e:	5499      	strb	r1, [r3, r2]
    5730:	f24a 3361 	movw	r3, #41825	; 0xa361
    5734:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5738:	781b      	ldrb	r3, [r3, #0]
    573a:	3301      	adds	r3, #1
    573c:	b2da      	uxtb	r2, r3
    573e:	f24a 3361 	movw	r3, #41825	; 0xa361
    5742:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5746:	701a      	strb	r2, [r3, #0]
    5748:	f24a 3361 	movw	r3, #41825	; 0xa361
    574c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5750:	781b      	ldrb	r3, [r3, #0]
    5752:	2bff      	cmp	r3, #255	; 0xff
    5754:	d105      	bne.n	5762 <ground_calibrate+0xe22>
    5756:	f24a 3361 	movw	r3, #41825	; 0xa361
    575a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    575e:	2200      	movs	r2, #0
    5760:	701a      	strb	r2, [r3, #0]
    5762:	f242 0339 	movw	r3, #8249	; 0x2039
    5766:	f2c2 0300 	movt	r3, #8192	; 0x2000
    576a:	781b      	ldrb	r3, [r3, #0]
    576c:	b2db      	uxtb	r3, r3
    576e:	f003 0310 	and.w	r3, r3, #16
    5772:	2b00      	cmp	r3, #0
    5774:	d15a      	bne.n	582c <ground_calibrate+0xeec>
    5776:	f24a 3362 	movw	r3, #41826	; 0xa362
    577a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    577e:	781b      	ldrb	r3, [r3, #0]
    5780:	b2db      	uxtb	r3, r3
    5782:	461a      	mov	r2, r3
    5784:	f24a 3364 	movw	r3, #41828	; 0xa364
    5788:	f2c2 0300 	movt	r3, #8192	; 0x2000
    578c:	5c9a      	ldrb	r2, [r3, r2]
    578e:	f24a 4363 	movw	r3, #42083	; 0xa463
    5792:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5796:	701a      	strb	r2, [r3, #0]
    5798:	f24a 4364 	movw	r3, #42084	; 0xa464
    579c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57a0:	2200      	movs	r2, #0
    57a2:	701a      	strb	r2, [r3, #0]
    57a4:	f24a 3362 	movw	r3, #41826	; 0xa362
    57a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57ac:	781b      	ldrb	r3, [r3, #0]
    57ae:	b2db      	uxtb	r3, r3
    57b0:	3301      	adds	r3, #1
    57b2:	b2da      	uxtb	r2, r3
    57b4:	f24a 3362 	movw	r3, #41826	; 0xa362
    57b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57bc:	701a      	strb	r2, [r3, #0]
    57be:	f24a 3362 	movw	r3, #41826	; 0xa362
    57c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57c6:	781b      	ldrb	r3, [r3, #0]
    57c8:	b2db      	uxtb	r3, r3
    57ca:	2bff      	cmp	r3, #255	; 0xff
    57cc:	d105      	bne.n	57da <ground_calibrate+0xe9a>
    57ce:	f24a 3362 	movw	r3, #41826	; 0xa362
    57d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57d6:	2200      	movs	r2, #0
    57d8:	701a      	strb	r2, [r3, #0]
    57da:	f242 0338 	movw	r3, #8248	; 0x2038
    57de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57e2:	f242 0238 	movw	r2, #8248	; 0x2038
    57e6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    57ea:	7812      	ldrb	r2, [r2, #0]
    57ec:	b2d2      	uxtb	r2, r2
    57ee:	f042 0201 	orr.w	r2, r2, #1
    57f2:	b2d2      	uxtb	r2, r2
    57f4:	701a      	strb	r2, [r3, #0]
    57f6:	f242 0339 	movw	r3, #8249	; 0x2039
    57fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57fe:	f242 0239 	movw	r2, #8249	; 0x2039
    5802:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5806:	7812      	ldrb	r2, [r2, #0]
    5808:	b2d2      	uxtb	r2, r2
    580a:	f042 0210 	orr.w	r2, r2, #16
    580e:	b2d2      	uxtb	r2, r2
    5810:	701a      	strb	r2, [r3, #0]
    5812:	e00b      	b.n	582c <ground_calibrate+0xeec>
    5814:	f24a 3360 	movw	r3, #41824	; 0xa360
    5818:	f2c2 0300 	movt	r3, #8192	; 0x2000
    581c:	781b      	ldrb	r3, [r3, #0]
    581e:	3301      	adds	r3, #1
    5820:	b2da      	uxtb	r2, r3
    5822:	f24a 3360 	movw	r3, #41824	; 0xa360
    5826:	f2c2 0300 	movt	r3, #8192	; 0x2000
    582a:	701a      	strb	r2, [r3, #0]
      calib_status = CALIB_DONE;
    582c:	f24a 335a 	movw	r3, #41818	; 0xa35a
    5830:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5834:	2202      	movs	r2, #2
    5836:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_CALIB_CONTRAST(&ir_contrast);
    5838:	f24a 3361 	movw	r3, #41825	; 0xa361
    583c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5840:	781a      	ldrb	r2, [r3, #0]
    5842:	f24a 3362 	movw	r3, #41826	; 0xa362
    5846:	f2c2 0300 	movt	r3, #8192	; 0x2000
    584a:	781b      	ldrb	r3, [r3, #0]
    584c:	b2db      	uxtb	r3, r3
    584e:	429a      	cmp	r2, r3
    5850:	d318      	bcc.n	5884 <ground_calibrate+0xf44>
    5852:	f24a 3362 	movw	r3, #41826	; 0xa362
    5856:	f2c2 0300 	movt	r3, #8192	; 0x2000
    585a:	781b      	ldrb	r3, [r3, #0]
    585c:	b2db      	uxtb	r3, r3
    585e:	461a      	mov	r2, r3
    5860:	f24a 3361 	movw	r3, #41825	; 0xa361
    5864:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5868:	781b      	ldrb	r3, [r3, #0]
    586a:	1ad3      	subs	r3, r2, r3
    586c:	33ff      	adds	r3, #255	; 0xff
    586e:	2b06      	cmp	r3, #6
    5870:	bfd4      	ite	le
    5872:	2300      	movle	r3, #0
    5874:	2301      	movgt	r3, #1
    5876:	b2db      	uxtb	r3, r3
    5878:	e016      	b.n	58a8 <ground_calibrate+0xf68>
    587a:	bf00      	nop
    587c:	200000d7 	.word	0x200000d7
    5880:	200000d9 	.word	0x200000d9
    5884:	f24a 3362 	movw	r3, #41826	; 0xa362
    5888:	f2c2 0300 	movt	r3, #8192	; 0x2000
    588c:	781b      	ldrb	r3, [r3, #0]
    588e:	b2db      	uxtb	r3, r3
    5890:	461a      	mov	r2, r3
    5892:	f24a 3361 	movw	r3, #41825	; 0xa361
    5896:	f2c2 0300 	movt	r3, #8192	; 0x2000
    589a:	781b      	ldrb	r3, [r3, #0]
    589c:	1ad3      	subs	r3, r2, r3
    589e:	2b06      	cmp	r3, #6
    58a0:	bfd4      	ite	le
    58a2:	2300      	movle	r3, #0
    58a4:	2301      	movgt	r3, #1
    58a6:	b2db      	uxtb	r3, r3
    58a8:	2b00      	cmp	r3, #0
    58aa:	f000 8194 	beq.w	5bd6 <ground_calibrate+0x1296>
    58ae:	f24a 3361 	movw	r3, #41825	; 0xa361
    58b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58b6:	781b      	ldrb	r3, [r3, #0]
    58b8:	461a      	mov	r2, r3
    58ba:	f24a 3364 	movw	r3, #41828	; 0xa364
    58be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58c2:	2105      	movs	r1, #5
    58c4:	5499      	strb	r1, [r3, r2]
    58c6:	f24a 3361 	movw	r3, #41825	; 0xa361
    58ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58ce:	781b      	ldrb	r3, [r3, #0]
    58d0:	3301      	adds	r3, #1
    58d2:	b2da      	uxtb	r2, r3
    58d4:	f24a 3361 	movw	r3, #41825	; 0xa361
    58d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58dc:	701a      	strb	r2, [r3, #0]
    58de:	f24a 3361 	movw	r3, #41825	; 0xa361
    58e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58e6:	781b      	ldrb	r3, [r3, #0]
    58e8:	2bff      	cmp	r3, #255	; 0xff
    58ea:	d105      	bne.n	58f8 <ground_calibrate+0xfb8>
    58ec:	f24a 3361 	movw	r3, #41825	; 0xa361
    58f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58f4:	2200      	movs	r2, #0
    58f6:	701a      	strb	r2, [r3, #0]
    58f8:	f24a 3361 	movw	r3, #41825	; 0xa361
    58fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5900:	781b      	ldrb	r3, [r3, #0]
    5902:	461a      	mov	r2, r3
    5904:	f24a 3364 	movw	r3, #41828	; 0xa364
    5908:	f2c2 0300 	movt	r3, #8192	; 0x2000
    590c:	2103      	movs	r1, #3
    590e:	5499      	strb	r1, [r3, r2]
    5910:	f24a 3361 	movw	r3, #41825	; 0xa361
    5914:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5918:	781b      	ldrb	r3, [r3, #0]
    591a:	3301      	adds	r3, #1
    591c:	b2da      	uxtb	r2, r3
    591e:	f24a 3361 	movw	r3, #41825	; 0xa361
    5922:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5926:	701a      	strb	r2, [r3, #0]
    5928:	f24a 3361 	movw	r3, #41825	; 0xa361
    592c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5930:	781b      	ldrb	r3, [r3, #0]
    5932:	2bff      	cmp	r3, #255	; 0xff
    5934:	d105      	bne.n	5942 <ground_calibrate+0x1002>
    5936:	f24a 3361 	movw	r3, #41825	; 0xa361
    593a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    593e:	2200      	movs	r2, #0
    5940:	701a      	strb	r2, [r3, #0]
    5942:	f24a 4365 	movw	r3, #42085	; 0xa465
    5946:	f2c2 0300 	movt	r3, #8192	; 0x2000
    594a:	2203      	movs	r2, #3
    594c:	701a      	strb	r2, [r3, #0]
    594e:	f24a 4366 	movw	r3, #42086	; 0xa466
    5952:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5956:	2203      	movs	r2, #3
    5958:	701a      	strb	r2, [r3, #0]
    595a:	f24a 3361 	movw	r3, #41825	; 0xa361
    595e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5962:	781b      	ldrb	r3, [r3, #0]
    5964:	461a      	mov	r2, r3
    5966:	f240 03d4 	movw	r3, #212	; 0xd4
    596a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    596e:	7819      	ldrb	r1, [r3, #0]
    5970:	f24a 3364 	movw	r3, #41828	; 0xa364
    5974:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5978:	5499      	strb	r1, [r3, r2]
    597a:	f240 03d4 	movw	r3, #212	; 0xd4
    597e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5982:	781a      	ldrb	r2, [r3, #0]
    5984:	f24a 4365 	movw	r3, #42085	; 0xa465
    5988:	f2c2 0300 	movt	r3, #8192	; 0x2000
    598c:	781b      	ldrb	r3, [r3, #0]
    598e:	4413      	add	r3, r2
    5990:	b2da      	uxtb	r2, r3
    5992:	f24a 4365 	movw	r3, #42085	; 0xa465
    5996:	f2c2 0300 	movt	r3, #8192	; 0x2000
    599a:	701a      	strb	r2, [r3, #0]
    599c:	f24a 4366 	movw	r3, #42086	; 0xa466
    59a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59a4:	781a      	ldrb	r2, [r3, #0]
    59a6:	f24a 4365 	movw	r3, #42085	; 0xa465
    59aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59ae:	781b      	ldrb	r3, [r3, #0]
    59b0:	4413      	add	r3, r2
    59b2:	b2da      	uxtb	r2, r3
    59b4:	f24a 4366 	movw	r3, #42086	; 0xa466
    59b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59bc:	701a      	strb	r2, [r3, #0]
    59be:	f24a 3361 	movw	r3, #41825	; 0xa361
    59c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59c6:	781b      	ldrb	r3, [r3, #0]
    59c8:	3301      	adds	r3, #1
    59ca:	b2da      	uxtb	r2, r3
    59cc:	f24a 3361 	movw	r3, #41825	; 0xa361
    59d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59d4:	701a      	strb	r2, [r3, #0]
    59d6:	f24a 3361 	movw	r3, #41825	; 0xa361
    59da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59de:	781b      	ldrb	r3, [r3, #0]
    59e0:	2bff      	cmp	r3, #255	; 0xff
    59e2:	d105      	bne.n	59f0 <ground_calibrate+0x10b0>
    59e4:	f24a 3361 	movw	r3, #41825	; 0xa361
    59e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59ec:	2200      	movs	r2, #0
    59ee:	701a      	strb	r2, [r3, #0]
    59f0:	f24a 3361 	movw	r3, #41825	; 0xa361
    59f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59f8:	781b      	ldrb	r3, [r3, #0]
    59fa:	461a      	mov	r2, r3
    59fc:	f240 03d4 	movw	r3, #212	; 0xd4
    5a00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a04:	7859      	ldrb	r1, [r3, #1]
    5a06:	f24a 3364 	movw	r3, #41828	; 0xa364
    5a0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a0e:	5499      	strb	r1, [r3, r2]
    5a10:	4b77      	ldr	r3, [pc, #476]	; (5bf0 <ground_calibrate+0x12b0>)
    5a12:	781a      	ldrb	r2, [r3, #0]
    5a14:	f24a 4365 	movw	r3, #42085	; 0xa465
    5a18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a1c:	781b      	ldrb	r3, [r3, #0]
    5a1e:	4413      	add	r3, r2
    5a20:	b2da      	uxtb	r2, r3
    5a22:	f24a 4365 	movw	r3, #42085	; 0xa465
    5a26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a2a:	701a      	strb	r2, [r3, #0]
    5a2c:	f24a 4366 	movw	r3, #42086	; 0xa466
    5a30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a34:	781a      	ldrb	r2, [r3, #0]
    5a36:	f24a 4365 	movw	r3, #42085	; 0xa465
    5a3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a3e:	781b      	ldrb	r3, [r3, #0]
    5a40:	4413      	add	r3, r2
    5a42:	b2da      	uxtb	r2, r3
    5a44:	f24a 4366 	movw	r3, #42086	; 0xa466
    5a48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a4c:	701a      	strb	r2, [r3, #0]
    5a4e:	f24a 3361 	movw	r3, #41825	; 0xa361
    5a52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a56:	781b      	ldrb	r3, [r3, #0]
    5a58:	3301      	adds	r3, #1
    5a5a:	b2da      	uxtb	r2, r3
    5a5c:	f24a 3361 	movw	r3, #41825	; 0xa361
    5a60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a64:	701a      	strb	r2, [r3, #0]
    5a66:	f24a 3361 	movw	r3, #41825	; 0xa361
    5a6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a6e:	781b      	ldrb	r3, [r3, #0]
    5a70:	2bff      	cmp	r3, #255	; 0xff
    5a72:	d105      	bne.n	5a80 <ground_calibrate+0x1140>
    5a74:	f24a 3361 	movw	r3, #41825	; 0xa361
    5a78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a7c:	2200      	movs	r2, #0
    5a7e:	701a      	strb	r2, [r3, #0]
    5a80:	f24a 3361 	movw	r3, #41825	; 0xa361
    5a84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a88:	781b      	ldrb	r3, [r3, #0]
    5a8a:	461a      	mov	r2, r3
    5a8c:	f24a 4365 	movw	r3, #42085	; 0xa465
    5a90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a94:	7819      	ldrb	r1, [r3, #0]
    5a96:	f24a 3364 	movw	r3, #41828	; 0xa364
    5a9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a9e:	5499      	strb	r1, [r3, r2]
    5aa0:	f24a 3361 	movw	r3, #41825	; 0xa361
    5aa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5aa8:	781b      	ldrb	r3, [r3, #0]
    5aaa:	3301      	adds	r3, #1
    5aac:	b2da      	uxtb	r2, r3
    5aae:	f24a 3361 	movw	r3, #41825	; 0xa361
    5ab2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ab6:	701a      	strb	r2, [r3, #0]
    5ab8:	f24a 3361 	movw	r3, #41825	; 0xa361
    5abc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ac0:	781b      	ldrb	r3, [r3, #0]
    5ac2:	2bff      	cmp	r3, #255	; 0xff
    5ac4:	d105      	bne.n	5ad2 <ground_calibrate+0x1192>
    5ac6:	f24a 3361 	movw	r3, #41825	; 0xa361
    5aca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ace:	2200      	movs	r2, #0
    5ad0:	701a      	strb	r2, [r3, #0]
    5ad2:	f24a 3361 	movw	r3, #41825	; 0xa361
    5ad6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ada:	781b      	ldrb	r3, [r3, #0]
    5adc:	461a      	mov	r2, r3
    5ade:	f24a 4366 	movw	r3, #42086	; 0xa466
    5ae2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ae6:	7819      	ldrb	r1, [r3, #0]
    5ae8:	f24a 3364 	movw	r3, #41828	; 0xa364
    5aec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5af0:	5499      	strb	r1, [r3, r2]
    5af2:	f24a 3361 	movw	r3, #41825	; 0xa361
    5af6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5afa:	781b      	ldrb	r3, [r3, #0]
    5afc:	3301      	adds	r3, #1
    5afe:	b2da      	uxtb	r2, r3
    5b00:	f24a 3361 	movw	r3, #41825	; 0xa361
    5b04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b08:	701a      	strb	r2, [r3, #0]
    5b0a:	f24a 3361 	movw	r3, #41825	; 0xa361
    5b0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b12:	781b      	ldrb	r3, [r3, #0]
    5b14:	2bff      	cmp	r3, #255	; 0xff
    5b16:	d105      	bne.n	5b24 <ground_calibrate+0x11e4>
    5b18:	f24a 3361 	movw	r3, #41825	; 0xa361
    5b1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b20:	2200      	movs	r2, #0
    5b22:	701a      	strb	r2, [r3, #0]
    5b24:	f242 0339 	movw	r3, #8249	; 0x2039
    5b28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b2c:	781b      	ldrb	r3, [r3, #0]
    5b2e:	b2db      	uxtb	r3, r3
    5b30:	f003 0310 	and.w	r3, r3, #16
    5b34:	2b00      	cmp	r3, #0
    5b36:	d15a      	bne.n	5bee <ground_calibrate+0x12ae>
    5b38:	f24a 3362 	movw	r3, #41826	; 0xa362
    5b3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b40:	781b      	ldrb	r3, [r3, #0]
    5b42:	b2db      	uxtb	r3, r3
    5b44:	461a      	mov	r2, r3
    5b46:	f24a 3364 	movw	r3, #41828	; 0xa364
    5b4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b4e:	5c9a      	ldrb	r2, [r3, r2]
    5b50:	f24a 4363 	movw	r3, #42083	; 0xa463
    5b54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b58:	701a      	strb	r2, [r3, #0]
    5b5a:	f24a 4364 	movw	r3, #42084	; 0xa464
    5b5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b62:	2200      	movs	r2, #0
    5b64:	701a      	strb	r2, [r3, #0]
    5b66:	f24a 3362 	movw	r3, #41826	; 0xa362
    5b6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b6e:	781b      	ldrb	r3, [r3, #0]
    5b70:	b2db      	uxtb	r3, r3
    5b72:	3301      	adds	r3, #1
    5b74:	b2da      	uxtb	r2, r3
    5b76:	f24a 3362 	movw	r3, #41826	; 0xa362
    5b7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b7e:	701a      	strb	r2, [r3, #0]
    5b80:	f24a 3362 	movw	r3, #41826	; 0xa362
    5b84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b88:	781b      	ldrb	r3, [r3, #0]
    5b8a:	b2db      	uxtb	r3, r3
    5b8c:	2bff      	cmp	r3, #255	; 0xff
    5b8e:	d105      	bne.n	5b9c <ground_calibrate+0x125c>
    5b90:	f24a 3362 	movw	r3, #41826	; 0xa362
    5b94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b98:	2200      	movs	r2, #0
    5b9a:	701a      	strb	r2, [r3, #0]
    5b9c:	f242 0338 	movw	r3, #8248	; 0x2038
    5ba0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ba4:	f242 0238 	movw	r2, #8248	; 0x2038
    5ba8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5bac:	7812      	ldrb	r2, [r2, #0]
    5bae:	b2d2      	uxtb	r2, r2
    5bb0:	f042 0201 	orr.w	r2, r2, #1
    5bb4:	b2d2      	uxtb	r2, r2
    5bb6:	701a      	strb	r2, [r3, #0]
    5bb8:	f242 0339 	movw	r3, #8249	; 0x2039
    5bbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5bc0:	f242 0239 	movw	r2, #8249	; 0x2039
    5bc4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5bc8:	7812      	ldrb	r2, [r2, #0]
    5bca:	b2d2      	uxtb	r2, r2
    5bcc:	f042 0210 	orr.w	r2, r2, #16
    5bd0:	b2d2      	uxtb	r2, r2
    5bd2:	701a      	strb	r2, [r3, #0]
    5bd4:	e00b      	b.n	5bee <ground_calibrate+0x12ae>
    5bd6:	f24a 3360 	movw	r3, #41824	; 0xa360
    5bda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5bde:	781b      	ldrb	r3, [r3, #0]
    5be0:	3301      	adds	r3, #1
    5be2:	b2da      	uxtb	r2, r3
    5be4:	f24a 3360 	movw	r3, #41824	; 0xa360
    5be8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5bec:	701a      	strb	r2, [r3, #0]
    }
}
else {}

//#endif
}
    5bee:	bd80      	pop	{r7, pc}
    5bf0:	200000d5 	.word	0x200000d5

00005bf4 <pprz_mode_update>:

/** \fn inline uint8_t pprz_mode_update( void )
 *  \brief Update paparazzi mode
 */
inline uint8_t pprz_mode_update( void ) {
    5bf4:	b480      	push	{r7}
    5bf6:	b083      	sub	sp, #12
    5bf8:	af00      	add	r7, sp, #0
  /** We remain in home mode until explicit reset from the RC */
  if (pprz_mode != PPRZ_MODE_HOME || CheckEvent(rc_event_1)) {
    5bfa:	f24a 3344 	movw	r3, #41796	; 0xa344
    5bfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c02:	781b      	ldrb	r3, [r3, #0]
    5c04:	2b03      	cmp	r3, #3
    5c06:	d10c      	bne.n	5c22 <pprz_mode_update+0x2e>
    5c08:	f24a 3348 	movw	r3, #41800	; 0xa348
    5c0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c10:	781b      	ldrb	r3, [r3, #0]
    5c12:	2b00      	cmp	r3, #0
    5c14:	d032      	beq.n	5c7c <pprz_mode_update+0x88>
    5c16:	f24a 3348 	movw	r3, #41800	; 0xa348
    5c1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c1e:	2200      	movs	r2, #0
    5c20:	701a      	strb	r2, [r3, #0]
    ModeUpdate(pprz_mode, PPRZ_MODE_OF_PULSE(from_fbw.channels[RADIO_MODE], from_fbw.status));
    5c22:	f24a 4368 	movw	r3, #42088	; 0xa468
    5c26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c2a:	891b      	ldrh	r3, [r3, #8]
    5c2c:	b21b      	sxth	r3, r3
    5c2e:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    5c32:	dc0f      	bgt.n	5c54 <pprz_mode_update+0x60>
    5c34:	f24a 4368 	movw	r3, #42088	; 0xa468
    5c38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c3c:	891b      	ldrh	r3, [r3, #8]
    5c3e:	b21a      	sxth	r2, r3
    5c40:	f64e 5341 	movw	r3, #60737	; 0xed41
    5c44:	f6cf 73ff 	movt	r3, #65535	; 0xffff
    5c48:	429a      	cmp	r2, r3
    5c4a:	bfb4      	ite	lt
    5c4c:	2300      	movlt	r3, #0
    5c4e:	2301      	movge	r3, #1
    5c50:	b2db      	uxtb	r3, r3
    5c52:	e000      	b.n	5c56 <pprz_mode_update+0x62>
    5c54:	2302      	movs	r3, #2
    5c56:	71fb      	strb	r3, [r7, #7]
    5c58:	f24a 3344 	movw	r3, #41796	; 0xa344
    5c5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c60:	781b      	ldrb	r3, [r3, #0]
    5c62:	79fa      	ldrb	r2, [r7, #7]
    5c64:	429a      	cmp	r2, r3
    5c66:	d007      	beq.n	5c78 <pprz_mode_update+0x84>
    5c68:	f24a 3344 	movw	r3, #41796	; 0xa344
    5c6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c70:	79fa      	ldrb	r2, [r7, #7]
    5c72:	701a      	strb	r2, [r3, #0]
    5c74:	2301      	movs	r3, #1
    5c76:	e002      	b.n	5c7e <pprz_mode_update+0x8a>
    5c78:	2300      	movs	r3, #0
    5c7a:	e000      	b.n	5c7e <pprz_mode_update+0x8a>
  } else
    return FALSE;
    5c7c:	2300      	movs	r3, #0
}
    5c7e:	4618      	mov	r0, r3
    5c80:	370c      	adds	r7, #12
    5c82:	46bd      	mov	sp, r7
    5c84:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c88:	4770      	bx	lr
    5c8a:	bf00      	nop

00005c8c <ir_estim_mode_update>:

#ifdef RADIO_LLS
/** \fn inline uint8_t ir_estim_mode_update( void )
 *  \brief update ir estimation if RADIO_LLS is true \n
 */
inline uint8_t ir_estim_mode_update( void ) {
    5c8c:	b480      	push	{r7}
    5c8e:	b083      	sub	sp, #12
    5c90:	af00      	add	r7, sp, #0
  ModeUpdate(ir_estim_mode, IR_ESTIM_MODE_OF_PULSE(from_fbw.channels[RADIO_LLS]));
    5c92:	f24a 4368 	movw	r3, #42088	; 0xa468
    5c96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c9a:	89db      	ldrh	r3, [r3, #14]
    5c9c:	b21a      	sxth	r2, r3
    5c9e:	f640 437f 	movw	r3, #3199	; 0xc7f
    5ca2:	429a      	cmp	r2, r3
    5ca4:	bfd4      	ite	le
    5ca6:	2300      	movle	r3, #0
    5ca8:	2301      	movgt	r3, #1
    5caa:	b2db      	uxtb	r3, r3
    5cac:	71fb      	strb	r3, [r7, #7]
    5cae:	f240 03d0 	movw	r3, #208	; 0xd0
    5cb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5cb6:	781b      	ldrb	r3, [r3, #0]
    5cb8:	79fa      	ldrb	r2, [r7, #7]
    5cba:	429a      	cmp	r2, r3
    5cbc:	d007      	beq.n	5cce <ir_estim_mode_update+0x42>
    5cbe:	f240 03d0 	movw	r3, #208	; 0xd0
    5cc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5cc6:	79fa      	ldrb	r2, [r7, #7]
    5cc8:	701a      	strb	r2, [r3, #0]
    5cca:	2301      	movs	r3, #1
    5ccc:	e000      	b.n	5cd0 <ir_estim_mode_update+0x44>
    5cce:	2300      	movs	r3, #0
}
    5cd0:	4618      	mov	r0, r3
    5cd2:	370c      	adds	r7, #12
    5cd4:	46bd      	mov	sp, r7
    5cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5cda:	4770      	bx	lr

00005cdc <mcu1_status_update>:


/** \fn inline uint8_t mcu1_status_update( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
inline uint8_t mcu1_status_update( void ) {
    5cdc:	b480      	push	{r7}
    5cde:	b083      	sub	sp, #12
    5ce0:	af00      	add	r7, sp, #0
  uint8_t new_mode = from_fbw.status;
    5ce2:	f24a 4368 	movw	r3, #42088	; 0xa468
    5ce6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5cea:	7cdb      	ldrb	r3, [r3, #19]
    5cec:	71fb      	strb	r3, [r7, #7]
  if (mcu1_status != new_mode) {
    5cee:	f24a 334b 	movw	r3, #41803	; 0xa34b
    5cf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5cf6:	781b      	ldrb	r3, [r3, #0]
    5cf8:	79fa      	ldrb	r2, [r7, #7]
    5cfa:	429a      	cmp	r2, r3
    5cfc:	d017      	beq.n	5d2e <mcu1_status_update+0x52>
    bool_t changed = ((mcu1_status&MASK_FBW_CHANGED) != (new_mode&MASK_FBW_CHANGED));
    5cfe:	f24a 334b 	movw	r3, #41803	; 0xa34b
    5d02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d06:	781b      	ldrb	r3, [r3, #0]
    5d08:	461a      	mov	r2, r3
    5d0a:	79fb      	ldrb	r3, [r7, #7]
    5d0c:	4053      	eors	r3, r2
    5d0e:	f003 0303 	and.w	r3, r3, #3
    5d12:	2b00      	cmp	r3, #0
    5d14:	bf0c      	ite	eq
    5d16:	2300      	moveq	r3, #0
    5d18:	2301      	movne	r3, #1
    5d1a:	b2db      	uxtb	r3, r3
    5d1c:	71bb      	strb	r3, [r7, #6]
    mcu1_status = new_mode;
    5d1e:	f24a 334b 	movw	r3, #41803	; 0xa34b
    5d22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d26:	79fa      	ldrb	r2, [r7, #7]
    5d28:	701a      	strb	r2, [r3, #0]
    return changed;
    5d2a:	79bb      	ldrb	r3, [r7, #6]
    5d2c:	e000      	b.n	5d30 <mcu1_status_update+0x54>
  }
  return FALSE;
    5d2e:	2300      	movs	r3, #0
}
    5d30:	4618      	mov	r0, r3
    5d32:	370c      	adds	r7, #12
    5d34:	46bd      	mov	sp, r7
    5d36:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d3a:	4770      	bx	lr

00005d3c <events_update>:
 EventUpdate(_cpt, (inflight_calib_mode==IF_CALIB_MODE_NONE && from_fbw.channels[_channel]<(int)(-0.75*MAX_PPRZ)), _event)

/** \fn static inline void events_update( void )
 *  @@@@@ A FIXER @@@@@
 */
static inline void events_update( void ) {
    5d3c:	b480      	push	{r7}
    5d3e:	af00      	add	r7, sp, #0
  static uint16_t event1_cpt = 0;
  static uint16_t event2_cpt = 0;
  EventPos(event1_cpt, RADIO_GAIN1, rc_event_1);
    5d40:	f64a 1374 	movw	r3, #43380	; 0xa974
    5d44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d48:	781b      	ldrb	r3, [r3, #0]
    5d4a:	2b00      	cmp	r3, #0
    5d4c:	d12a      	bne.n	5da4 <events_update+0x68>
    5d4e:	f24a 4368 	movw	r3, #42088	; 0xa468
    5d52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d56:	895b      	ldrh	r3, [r3, #10]
    5d58:	b21b      	sxth	r3, r3
    5d5a:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
    5d5e:	dd21      	ble.n	5da4 <events_update+0x68>
    5d60:	f24a 335c 	movw	r3, #41820	; 0xa35c
    5d64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d68:	881b      	ldrh	r3, [r3, #0]
    5d6a:	2b13      	cmp	r3, #19
    5d6c:	d819      	bhi.n	5da2 <events_update+0x66>
    5d6e:	f24a 335c 	movw	r3, #41820	; 0xa35c
    5d72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d76:	881b      	ldrh	r3, [r3, #0]
    5d78:	3301      	adds	r3, #1
    5d7a:	b29a      	uxth	r2, r3
    5d7c:	f24a 335c 	movw	r3, #41820	; 0xa35c
    5d80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d84:	801a      	strh	r2, [r3, #0]
    5d86:	f24a 335c 	movw	r3, #41820	; 0xa35c
    5d8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d8e:	881b      	ldrh	r3, [r3, #0]
    5d90:	2b14      	cmp	r3, #20
    5d92:	d106      	bne.n	5da2 <events_update+0x66>
    5d94:	f24a 3348 	movw	r3, #41800	; 0xa348
    5d98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d9c:	2201      	movs	r2, #1
    5d9e:	701a      	strb	r2, [r3, #0]
    5da0:	e00c      	b.n	5dbc <events_update+0x80>
    5da2:	e00b      	b.n	5dbc <events_update+0x80>
    5da4:	f24a 335c 	movw	r3, #41820	; 0xa35c
    5da8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5dac:	2200      	movs	r2, #0
    5dae:	801a      	strh	r2, [r3, #0]
    5db0:	f24a 3348 	movw	r3, #41800	; 0xa348
    5db4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5db8:	2200      	movs	r2, #0
    5dba:	701a      	strb	r2, [r3, #0]
  EventNeg(event2_cpt, RADIO_GAIN1, rc_event_2);
    5dbc:	f64a 1374 	movw	r3, #43380	; 0xa974
    5dc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5dc4:	781b      	ldrb	r3, [r3, #0]
    5dc6:	2b00      	cmp	r3, #0
    5dc8:	d12a      	bne.n	5e20 <events_update+0xe4>
    5dca:	f24a 4368 	movw	r3, #42088	; 0xa468
    5dce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5dd2:	895b      	ldrh	r3, [r3, #10]
    5dd4:	b21b      	sxth	r3, r3
    5dd6:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
    5dda:	da21      	bge.n	5e20 <events_update+0xe4>
    5ddc:	f24a 335e 	movw	r3, #41822	; 0xa35e
    5de0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5de4:	881b      	ldrh	r3, [r3, #0]
    5de6:	2b13      	cmp	r3, #19
    5de8:	d819      	bhi.n	5e1e <events_update+0xe2>
    5dea:	f24a 335e 	movw	r3, #41822	; 0xa35e
    5dee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5df2:	881b      	ldrh	r3, [r3, #0]
    5df4:	3301      	adds	r3, #1
    5df6:	b29a      	uxth	r2, r3
    5df8:	f24a 335e 	movw	r3, #41822	; 0xa35e
    5dfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e00:	801a      	strh	r2, [r3, #0]
    5e02:	f24a 335e 	movw	r3, #41822	; 0xa35e
    5e06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e0a:	881b      	ldrh	r3, [r3, #0]
    5e0c:	2b14      	cmp	r3, #20
    5e0e:	d106      	bne.n	5e1e <events_update+0xe2>
    5e10:	f24a 3349 	movw	r3, #41801	; 0xa349
    5e14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e18:	2201      	movs	r2, #1
    5e1a:	701a      	strb	r2, [r3, #0]
    5e1c:	e00c      	b.n	5e38 <events_update+0xfc>
    5e1e:	e00b      	b.n	5e38 <events_update+0xfc>
    5e20:	f24a 335e 	movw	r3, #41822	; 0xa35e
    5e24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e28:	2200      	movs	r2, #0
    5e2a:	801a      	strh	r2, [r3, #0]
    5e2c:	f24a 3349 	movw	r3, #41801	; 0xa349
    5e30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e34:	2200      	movs	r2, #0
    5e36:	701a      	strb	r2, [r3, #0]
}  
    5e38:	46bd      	mov	sp, r7
    5e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e3e:	4770      	bx	lr

00005e40 <copy_from_to_fbw>:


/** \fn inline void copy_from_to_fbw ( void )
 *  \brief Send back uncontrolled channels (only rudder)
 */
inline void copy_from_to_fbw ( void ) {
    5e40:	b480      	push	{r7}
    5e42:	af00      	add	r7, sp, #0
  to_fbw.channels[RADIO_YAW] = from_fbw.channels[RADIO_YAW];
    5e44:	f24a 4368 	movw	r3, #42088	; 0xa468
    5e48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e4c:	88da      	ldrh	r2, [r3, #6]
    5e4e:	f24a 4380 	movw	r3, #42112	; 0xa480
    5e52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e56:	80da      	strh	r2, [r3, #6]
#ifdef ANTON_T7
  to_fbw.channels[RADIO_PITCH] = from_fbw.channels[RADIO_PITCH];
#endif
  to_fbw.status = 0;
    5e58:	f24a 4380 	movw	r3, #42112	; 0xa480
    5e5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e60:	2200      	movs	r2, #0
    5e62:	74da      	strb	r2, [r3, #19]
}
    5e64:	46bd      	mov	sp, r7
    5e66:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e6a:	4770      	bx	lr

00005e6c <send_boot>:
/** \fn inline void reporting_task( void )
 *  \brief Send a serie of initialisation messages followed by a stream of periodic ones\n
 * Called at 20Hz.
 */

void send_boot(void){
    5e6c:	b480      	push	{r7}
    5e6e:	af00      	add	r7, sp, #0
  /** initialisation phase during boot */
  //vPrintString("S_13 reporting_task start!\n\r");
  //add by wanbo
  //if (boot) 
  {
      DOWNLINK_SEND_BOOT(&version);
    5e70:	f24a 3361 	movw	r3, #41825	; 0xa361
    5e74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e78:	781a      	ldrb	r2, [r3, #0]
    5e7a:	f24a 3362 	movw	r3, #41826	; 0xa362
    5e7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e82:	781b      	ldrb	r3, [r3, #0]
    5e84:	b2db      	uxtb	r3, r3
    5e86:	429a      	cmp	r2, r3
    5e88:	d313      	bcc.n	5eb2 <send_boot+0x46>
    5e8a:	f24a 3362 	movw	r3, #41826	; 0xa362
    5e8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e92:	781b      	ldrb	r3, [r3, #0]
    5e94:	b2db      	uxtb	r3, r3
    5e96:	461a      	mov	r2, r3
    5e98:	f24a 3361 	movw	r3, #41825	; 0xa361
    5e9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ea0:	781b      	ldrb	r3, [r3, #0]
    5ea2:	1ad3      	subs	r3, r2, r3
    5ea4:	33ff      	adds	r3, #255	; 0xff
    5ea6:	2b06      	cmp	r3, #6
    5ea8:	bfd4      	ite	le
    5eaa:	2300      	movle	r3, #0
    5eac:	2301      	movgt	r3, #1
    5eae:	b2db      	uxtb	r3, r3
    5eb0:	e011      	b.n	5ed6 <send_boot+0x6a>
    5eb2:	f24a 3362 	movw	r3, #41826	; 0xa362
    5eb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5eba:	781b      	ldrb	r3, [r3, #0]
    5ebc:	b2db      	uxtb	r3, r3
    5ebe:	461a      	mov	r2, r3
    5ec0:	f24a 3361 	movw	r3, #41825	; 0xa361
    5ec4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ec8:	781b      	ldrb	r3, [r3, #0]
    5eca:	1ad3      	subs	r3, r2, r3
    5ecc:	2b06      	cmp	r3, #6
    5ece:	bfd4      	ite	le
    5ed0:	2300      	movle	r3, #0
    5ed2:	2301      	movgt	r3, #1
    5ed4:	b2db      	uxtb	r3, r3
    5ed6:	2b00      	cmp	r3, #0
    5ed8:	f000 8194 	beq.w	6204 <send_boot+0x398>
    5edc:	f24a 3361 	movw	r3, #41825	; 0xa361
    5ee0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ee4:	781b      	ldrb	r3, [r3, #0]
    5ee6:	461a      	mov	r2, r3
    5ee8:	f24a 3364 	movw	r3, #41828	; 0xa364
    5eec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ef0:	2105      	movs	r1, #5
    5ef2:	5499      	strb	r1, [r3, r2]
    5ef4:	f24a 3361 	movw	r3, #41825	; 0xa361
    5ef8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5efc:	781b      	ldrb	r3, [r3, #0]
    5efe:	3301      	adds	r3, #1
    5f00:	b2da      	uxtb	r2, r3
    5f02:	f24a 3361 	movw	r3, #41825	; 0xa361
    5f06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f0a:	701a      	strb	r2, [r3, #0]
    5f0c:	f24a 3361 	movw	r3, #41825	; 0xa361
    5f10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f14:	781b      	ldrb	r3, [r3, #0]
    5f16:	2bff      	cmp	r3, #255	; 0xff
    5f18:	d105      	bne.n	5f26 <send_boot+0xba>
    5f1a:	f24a 3361 	movw	r3, #41825	; 0xa361
    5f1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f22:	2200      	movs	r2, #0
    5f24:	701a      	strb	r2, [r3, #0]
    5f26:	f24a 3361 	movw	r3, #41825	; 0xa361
    5f2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f2e:	781b      	ldrb	r3, [r3, #0]
    5f30:	461a      	mov	r2, r3
    5f32:	f24a 3364 	movw	r3, #41828	; 0xa364
    5f36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f3a:	2101      	movs	r1, #1
    5f3c:	5499      	strb	r1, [r3, r2]
    5f3e:	f24a 3361 	movw	r3, #41825	; 0xa361
    5f42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f46:	781b      	ldrb	r3, [r3, #0]
    5f48:	3301      	adds	r3, #1
    5f4a:	b2da      	uxtb	r2, r3
    5f4c:	f24a 3361 	movw	r3, #41825	; 0xa361
    5f50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f54:	701a      	strb	r2, [r3, #0]
    5f56:	f24a 3361 	movw	r3, #41825	; 0xa361
    5f5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f5e:	781b      	ldrb	r3, [r3, #0]
    5f60:	2bff      	cmp	r3, #255	; 0xff
    5f62:	d105      	bne.n	5f70 <send_boot+0x104>
    5f64:	f24a 3361 	movw	r3, #41825	; 0xa361
    5f68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f6c:	2200      	movs	r2, #0
    5f6e:	701a      	strb	r2, [r3, #0]
    5f70:	f24a 4365 	movw	r3, #42085	; 0xa465
    5f74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f78:	2201      	movs	r2, #1
    5f7a:	701a      	strb	r2, [r3, #0]
    5f7c:	f24a 4366 	movw	r3, #42086	; 0xa466
    5f80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f84:	2201      	movs	r2, #1
    5f86:	701a      	strb	r2, [r3, #0]
    5f88:	f24a 3361 	movw	r3, #41825	; 0xa361
    5f8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f90:	781b      	ldrb	r3, [r3, #0]
    5f92:	461a      	mov	r2, r3
    5f94:	f247 23f6 	movw	r3, #29430	; 0x72f6
    5f98:	f2c0 0301 	movt	r3, #1
    5f9c:	7819      	ldrb	r1, [r3, #0]
    5f9e:	f24a 3364 	movw	r3, #41828	; 0xa364
    5fa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fa6:	5499      	strb	r1, [r3, r2]
    5fa8:	f247 23f6 	movw	r3, #29430	; 0x72f6
    5fac:	f2c0 0301 	movt	r3, #1
    5fb0:	781a      	ldrb	r2, [r3, #0]
    5fb2:	f24a 4365 	movw	r3, #42085	; 0xa465
    5fb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fba:	781b      	ldrb	r3, [r3, #0]
    5fbc:	4413      	add	r3, r2
    5fbe:	b2da      	uxtb	r2, r3
    5fc0:	f24a 4365 	movw	r3, #42085	; 0xa465
    5fc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fc8:	701a      	strb	r2, [r3, #0]
    5fca:	f24a 4366 	movw	r3, #42086	; 0xa466
    5fce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fd2:	781a      	ldrb	r2, [r3, #0]
    5fd4:	f24a 4365 	movw	r3, #42085	; 0xa465
    5fd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fdc:	781b      	ldrb	r3, [r3, #0]
    5fde:	4413      	add	r3, r2
    5fe0:	b2da      	uxtb	r2, r3
    5fe2:	f24a 4366 	movw	r3, #42086	; 0xa466
    5fe6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fea:	701a      	strb	r2, [r3, #0]
    5fec:	f24a 3361 	movw	r3, #41825	; 0xa361
    5ff0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ff4:	781b      	ldrb	r3, [r3, #0]
    5ff6:	3301      	adds	r3, #1
    5ff8:	b2da      	uxtb	r2, r3
    5ffa:	f24a 3361 	movw	r3, #41825	; 0xa361
    5ffe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6002:	701a      	strb	r2, [r3, #0]
    6004:	f24a 3361 	movw	r3, #41825	; 0xa361
    6008:	f2c2 0300 	movt	r3, #8192	; 0x2000
    600c:	781b      	ldrb	r3, [r3, #0]
    600e:	2bff      	cmp	r3, #255	; 0xff
    6010:	d105      	bne.n	601e <send_boot+0x1b2>
    6012:	f24a 3361 	movw	r3, #41825	; 0xa361
    6016:	f2c2 0300 	movt	r3, #8192	; 0x2000
    601a:	2200      	movs	r2, #0
    601c:	701a      	strb	r2, [r3, #0]
    601e:	f24a 3361 	movw	r3, #41825	; 0xa361
    6022:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6026:	781b      	ldrb	r3, [r3, #0]
    6028:	461a      	mov	r2, r3
    602a:	f247 23f6 	movw	r3, #29430	; 0x72f6
    602e:	f2c0 0301 	movt	r3, #1
    6032:	7859      	ldrb	r1, [r3, #1]
    6034:	f24a 3364 	movw	r3, #41828	; 0xa364
    6038:	f2c2 0300 	movt	r3, #8192	; 0x2000
    603c:	5499      	strb	r1, [r3, r2]
    603e:	4b88      	ldr	r3, [pc, #544]	; (6260 <send_boot+0x3f4>)
    6040:	781a      	ldrb	r2, [r3, #0]
    6042:	f24a 4365 	movw	r3, #42085	; 0xa465
    6046:	f2c2 0300 	movt	r3, #8192	; 0x2000
    604a:	781b      	ldrb	r3, [r3, #0]
    604c:	4413      	add	r3, r2
    604e:	b2da      	uxtb	r2, r3
    6050:	f24a 4365 	movw	r3, #42085	; 0xa465
    6054:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6058:	701a      	strb	r2, [r3, #0]
    605a:	f24a 4366 	movw	r3, #42086	; 0xa466
    605e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6062:	781a      	ldrb	r2, [r3, #0]
    6064:	f24a 4365 	movw	r3, #42085	; 0xa465
    6068:	f2c2 0300 	movt	r3, #8192	; 0x2000
    606c:	781b      	ldrb	r3, [r3, #0]
    606e:	4413      	add	r3, r2
    6070:	b2da      	uxtb	r2, r3
    6072:	f24a 4366 	movw	r3, #42086	; 0xa466
    6076:	f2c2 0300 	movt	r3, #8192	; 0x2000
    607a:	701a      	strb	r2, [r3, #0]
    607c:	f24a 3361 	movw	r3, #41825	; 0xa361
    6080:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6084:	781b      	ldrb	r3, [r3, #0]
    6086:	3301      	adds	r3, #1
    6088:	b2da      	uxtb	r2, r3
    608a:	f24a 3361 	movw	r3, #41825	; 0xa361
    608e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6092:	701a      	strb	r2, [r3, #0]
    6094:	f24a 3361 	movw	r3, #41825	; 0xa361
    6098:	f2c2 0300 	movt	r3, #8192	; 0x2000
    609c:	781b      	ldrb	r3, [r3, #0]
    609e:	2bff      	cmp	r3, #255	; 0xff
    60a0:	d105      	bne.n	60ae <send_boot+0x242>
    60a2:	f24a 3361 	movw	r3, #41825	; 0xa361
    60a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60aa:	2200      	movs	r2, #0
    60ac:	701a      	strb	r2, [r3, #0]
    60ae:	f24a 3361 	movw	r3, #41825	; 0xa361
    60b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60b6:	781b      	ldrb	r3, [r3, #0]
    60b8:	461a      	mov	r2, r3
    60ba:	f24a 4365 	movw	r3, #42085	; 0xa465
    60be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60c2:	7819      	ldrb	r1, [r3, #0]
    60c4:	f24a 3364 	movw	r3, #41828	; 0xa364
    60c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60cc:	5499      	strb	r1, [r3, r2]
    60ce:	f24a 3361 	movw	r3, #41825	; 0xa361
    60d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60d6:	781b      	ldrb	r3, [r3, #0]
    60d8:	3301      	adds	r3, #1
    60da:	b2da      	uxtb	r2, r3
    60dc:	f24a 3361 	movw	r3, #41825	; 0xa361
    60e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60e4:	701a      	strb	r2, [r3, #0]
    60e6:	f24a 3361 	movw	r3, #41825	; 0xa361
    60ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60ee:	781b      	ldrb	r3, [r3, #0]
    60f0:	2bff      	cmp	r3, #255	; 0xff
    60f2:	d105      	bne.n	6100 <send_boot+0x294>
    60f4:	f24a 3361 	movw	r3, #41825	; 0xa361
    60f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60fc:	2200      	movs	r2, #0
    60fe:	701a      	strb	r2, [r3, #0]
    6100:	f24a 3361 	movw	r3, #41825	; 0xa361
    6104:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6108:	781b      	ldrb	r3, [r3, #0]
    610a:	461a      	mov	r2, r3
    610c:	f24a 4366 	movw	r3, #42086	; 0xa466
    6110:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6114:	7819      	ldrb	r1, [r3, #0]
    6116:	f24a 3364 	movw	r3, #41828	; 0xa364
    611a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    611e:	5499      	strb	r1, [r3, r2]
    6120:	f24a 3361 	movw	r3, #41825	; 0xa361
    6124:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6128:	781b      	ldrb	r3, [r3, #0]
    612a:	3301      	adds	r3, #1
    612c:	b2da      	uxtb	r2, r3
    612e:	f24a 3361 	movw	r3, #41825	; 0xa361
    6132:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6136:	701a      	strb	r2, [r3, #0]
    6138:	f24a 3361 	movw	r3, #41825	; 0xa361
    613c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6140:	781b      	ldrb	r3, [r3, #0]
    6142:	2bff      	cmp	r3, #255	; 0xff
    6144:	d105      	bne.n	6152 <send_boot+0x2e6>
    6146:	f24a 3361 	movw	r3, #41825	; 0xa361
    614a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    614e:	2200      	movs	r2, #0
    6150:	701a      	strb	r2, [r3, #0]
    6152:	f242 0339 	movw	r3, #8249	; 0x2039
    6156:	f2c2 0300 	movt	r3, #8192	; 0x2000
    615a:	781b      	ldrb	r3, [r3, #0]
    615c:	b2db      	uxtb	r3, r3
    615e:	f003 0310 	and.w	r3, r3, #16
    6162:	2b00      	cmp	r3, #0
    6164:	d15a      	bne.n	621c <send_boot+0x3b0>
    6166:	f24a 3362 	movw	r3, #41826	; 0xa362
    616a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    616e:	781b      	ldrb	r3, [r3, #0]
    6170:	b2db      	uxtb	r3, r3
    6172:	461a      	mov	r2, r3
    6174:	f24a 3364 	movw	r3, #41828	; 0xa364
    6178:	f2c2 0300 	movt	r3, #8192	; 0x2000
    617c:	5c9a      	ldrb	r2, [r3, r2]
    617e:	f24a 4363 	movw	r3, #42083	; 0xa463
    6182:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6186:	701a      	strb	r2, [r3, #0]
    6188:	f24a 4364 	movw	r3, #42084	; 0xa464
    618c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6190:	2200      	movs	r2, #0
    6192:	701a      	strb	r2, [r3, #0]
    6194:	f24a 3362 	movw	r3, #41826	; 0xa362
    6198:	f2c2 0300 	movt	r3, #8192	; 0x2000
    619c:	781b      	ldrb	r3, [r3, #0]
    619e:	b2db      	uxtb	r3, r3
    61a0:	3301      	adds	r3, #1
    61a2:	b2da      	uxtb	r2, r3
    61a4:	f24a 3362 	movw	r3, #41826	; 0xa362
    61a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61ac:	701a      	strb	r2, [r3, #0]
    61ae:	f24a 3362 	movw	r3, #41826	; 0xa362
    61b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61b6:	781b      	ldrb	r3, [r3, #0]
    61b8:	b2db      	uxtb	r3, r3
    61ba:	2bff      	cmp	r3, #255	; 0xff
    61bc:	d105      	bne.n	61ca <send_boot+0x35e>
    61be:	f24a 3362 	movw	r3, #41826	; 0xa362
    61c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61c6:	2200      	movs	r2, #0
    61c8:	701a      	strb	r2, [r3, #0]
    61ca:	f242 0338 	movw	r3, #8248	; 0x2038
    61ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61d2:	f242 0238 	movw	r2, #8248	; 0x2038
    61d6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    61da:	7812      	ldrb	r2, [r2, #0]
    61dc:	b2d2      	uxtb	r2, r2
    61de:	f042 0201 	orr.w	r2, r2, #1
    61e2:	b2d2      	uxtb	r2, r2
    61e4:	701a      	strb	r2, [r3, #0]
    61e6:	f242 0339 	movw	r3, #8249	; 0x2039
    61ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61ee:	f242 0239 	movw	r2, #8249	; 0x2039
    61f2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    61f6:	7812      	ldrb	r2, [r2, #0]
    61f8:	b2d2      	uxtb	r2, r2
    61fa:	f042 0210 	orr.w	r2, r2, #16
    61fe:	b2d2      	uxtb	r2, r2
    6200:	701a      	strb	r2, [r3, #0]
    6202:	e00b      	b.n	621c <send_boot+0x3b0>
    6204:	f24a 3360 	movw	r3, #41824	; 0xa360
    6208:	f2c2 0300 	movt	r3, #8192	; 0x2000
    620c:	781b      	ldrb	r3, [r3, #0]
    620e:	3301      	adds	r3, #1
    6210:	b2da      	uxtb	r2, r3
    6212:	f24a 3360 	movw	r3, #41824	; 0xa360
    6216:	f2c2 0300 	movt	r3, #8192	; 0x2000
    621a:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    621c:	f24a 3361 	movw	r3, #41825	; 0xa361
    6220:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6224:	781a      	ldrb	r2, [r3, #0]
    6226:	f24a 3362 	movw	r3, #41826	; 0xa362
    622a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    622e:	781b      	ldrb	r3, [r3, #0]
    6230:	b2db      	uxtb	r3, r3
    6232:	429a      	cmp	r2, r3
    6234:	d316      	bcc.n	6264 <send_boot+0x3f8>
    6236:	f24a 3362 	movw	r3, #41826	; 0xa362
    623a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    623e:	781b      	ldrb	r3, [r3, #0]
    6240:	b2db      	uxtb	r3, r3
    6242:	461a      	mov	r2, r3
    6244:	f24a 3361 	movw	r3, #41825	; 0xa361
    6248:	f2c2 0300 	movt	r3, #8192	; 0x2000
    624c:	781b      	ldrb	r3, [r3, #0]
    624e:	1ad3      	subs	r3, r2, r3
    6250:	33ff      	adds	r3, #255	; 0xff
    6252:	2b14      	cmp	r3, #20
    6254:	bfd4      	ite	le
    6256:	2300      	movle	r3, #0
    6258:	2301      	movgt	r3, #1
    625a:	b2db      	uxtb	r3, r3
    625c:	e014      	b.n	6288 <send_boot+0x41c>
    625e:	bf00      	nop
    6260:	000172f7 	.word	0x000172f7
    6264:	f24a 3362 	movw	r3, #41826	; 0xa362
    6268:	f2c2 0300 	movt	r3, #8192	; 0x2000
    626c:	781b      	ldrb	r3, [r3, #0]
    626e:	b2db      	uxtb	r3, r3
    6270:	461a      	mov	r2, r3
    6272:	f24a 3361 	movw	r3, #41825	; 0xa361
    6276:	f2c2 0300 	movt	r3, #8192	; 0x2000
    627a:	781b      	ldrb	r3, [r3, #0]
    627c:	1ad3      	subs	r3, r2, r3
    627e:	2b14      	cmp	r3, #20
    6280:	bfd4      	ite	le
    6282:	2300      	movle	r3, #0
    6284:	2301      	movgt	r3, #1
    6286:	b2db      	uxtb	r3, r3
    6288:	2b00      	cmp	r3, #0
    628a:	f000 85a5 	beq.w	6dd8 <send_boot+0xf6c>
    628e:	f24a 3361 	movw	r3, #41825	; 0xa361
    6292:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6296:	781b      	ldrb	r3, [r3, #0]
    6298:	461a      	mov	r2, r3
    629a:	f24a 3364 	movw	r3, #41828	; 0xa364
    629e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62a2:	2105      	movs	r1, #5
    62a4:	5499      	strb	r1, [r3, r2]
    62a6:	f24a 3361 	movw	r3, #41825	; 0xa361
    62aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62ae:	781b      	ldrb	r3, [r3, #0]
    62b0:	3301      	adds	r3, #1
    62b2:	b2da      	uxtb	r2, r3
    62b4:	f24a 3361 	movw	r3, #41825	; 0xa361
    62b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62bc:	701a      	strb	r2, [r3, #0]
    62be:	f24a 3361 	movw	r3, #41825	; 0xa361
    62c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62c6:	781b      	ldrb	r3, [r3, #0]
    62c8:	2bff      	cmp	r3, #255	; 0xff
    62ca:	d105      	bne.n	62d8 <send_boot+0x46c>
    62cc:	f24a 3361 	movw	r3, #41825	; 0xa361
    62d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62d4:	2200      	movs	r2, #0
    62d6:	701a      	strb	r2, [r3, #0]
    62d8:	f24a 3361 	movw	r3, #41825	; 0xa361
    62dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62e0:	781b      	ldrb	r3, [r3, #0]
    62e2:	461a      	mov	r2, r3
    62e4:	f24a 3364 	movw	r3, #41828	; 0xa364
    62e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62ec:	2105      	movs	r1, #5
    62ee:	5499      	strb	r1, [r3, r2]
    62f0:	f24a 3361 	movw	r3, #41825	; 0xa361
    62f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62f8:	781b      	ldrb	r3, [r3, #0]
    62fa:	3301      	adds	r3, #1
    62fc:	b2da      	uxtb	r2, r3
    62fe:	f24a 3361 	movw	r3, #41825	; 0xa361
    6302:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6306:	701a      	strb	r2, [r3, #0]
    6308:	f24a 3361 	movw	r3, #41825	; 0xa361
    630c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6310:	781b      	ldrb	r3, [r3, #0]
    6312:	2bff      	cmp	r3, #255	; 0xff
    6314:	d105      	bne.n	6322 <send_boot+0x4b6>
    6316:	f24a 3361 	movw	r3, #41825	; 0xa361
    631a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    631e:	2200      	movs	r2, #0
    6320:	701a      	strb	r2, [r3, #0]
    6322:	f24a 4365 	movw	r3, #42085	; 0xa465
    6326:	f2c2 0300 	movt	r3, #8192	; 0x2000
    632a:	2205      	movs	r2, #5
    632c:	701a      	strb	r2, [r3, #0]
    632e:	f24a 4366 	movw	r3, #42086	; 0xa466
    6332:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6336:	2205      	movs	r2, #5
    6338:	701a      	strb	r2, [r3, #0]
    633a:	f24a 3361 	movw	r3, #41825	; 0xa361
    633e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6342:	781b      	ldrb	r3, [r3, #0]
    6344:	461a      	mov	r2, r3
    6346:	f64a 1358 	movw	r3, #43352	; 0xa958
    634a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    634e:	7819      	ldrb	r1, [r3, #0]
    6350:	f24a 3364 	movw	r3, #41828	; 0xa364
    6354:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6358:	5499      	strb	r1, [r3, r2]
    635a:	f64a 1358 	movw	r3, #43352	; 0xa958
    635e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6362:	781a      	ldrb	r2, [r3, #0]
    6364:	f24a 4365 	movw	r3, #42085	; 0xa465
    6368:	f2c2 0300 	movt	r3, #8192	; 0x2000
    636c:	781b      	ldrb	r3, [r3, #0]
    636e:	4413      	add	r3, r2
    6370:	b2da      	uxtb	r2, r3
    6372:	f24a 4365 	movw	r3, #42085	; 0xa465
    6376:	f2c2 0300 	movt	r3, #8192	; 0x2000
    637a:	701a      	strb	r2, [r3, #0]
    637c:	f24a 4366 	movw	r3, #42086	; 0xa466
    6380:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6384:	781a      	ldrb	r2, [r3, #0]
    6386:	f24a 4365 	movw	r3, #42085	; 0xa465
    638a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    638e:	781b      	ldrb	r3, [r3, #0]
    6390:	4413      	add	r3, r2
    6392:	b2da      	uxtb	r2, r3
    6394:	f24a 4366 	movw	r3, #42086	; 0xa466
    6398:	f2c2 0300 	movt	r3, #8192	; 0x2000
    639c:	701a      	strb	r2, [r3, #0]
    639e:	f24a 3361 	movw	r3, #41825	; 0xa361
    63a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63a6:	781b      	ldrb	r3, [r3, #0]
    63a8:	3301      	adds	r3, #1
    63aa:	b2da      	uxtb	r2, r3
    63ac:	f24a 3361 	movw	r3, #41825	; 0xa361
    63b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63b4:	701a      	strb	r2, [r3, #0]
    63b6:	f24a 3361 	movw	r3, #41825	; 0xa361
    63ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63be:	781b      	ldrb	r3, [r3, #0]
    63c0:	2bff      	cmp	r3, #255	; 0xff
    63c2:	d105      	bne.n	63d0 <send_boot+0x564>
    63c4:	f24a 3361 	movw	r3, #41825	; 0xa361
    63c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63cc:	2200      	movs	r2, #0
    63ce:	701a      	strb	r2, [r3, #0]
    63d0:	f24a 3361 	movw	r3, #41825	; 0xa361
    63d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63d8:	781b      	ldrb	r3, [r3, #0]
    63da:	461a      	mov	r2, r3
    63dc:	f64a 1358 	movw	r3, #43352	; 0xa958
    63e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63e4:	7859      	ldrb	r1, [r3, #1]
    63e6:	f24a 3364 	movw	r3, #41828	; 0xa364
    63ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63ee:	5499      	strb	r1, [r3, r2]
    63f0:	4bd1      	ldr	r3, [pc, #836]	; (6738 <send_boot+0x8cc>)
    63f2:	781a      	ldrb	r2, [r3, #0]
    63f4:	f24a 4365 	movw	r3, #42085	; 0xa465
    63f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63fc:	781b      	ldrb	r3, [r3, #0]
    63fe:	4413      	add	r3, r2
    6400:	b2da      	uxtb	r2, r3
    6402:	f24a 4365 	movw	r3, #42085	; 0xa465
    6406:	f2c2 0300 	movt	r3, #8192	; 0x2000
    640a:	701a      	strb	r2, [r3, #0]
    640c:	f24a 4366 	movw	r3, #42086	; 0xa466
    6410:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6414:	781a      	ldrb	r2, [r3, #0]
    6416:	f24a 4365 	movw	r3, #42085	; 0xa465
    641a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    641e:	781b      	ldrb	r3, [r3, #0]
    6420:	4413      	add	r3, r2
    6422:	b2da      	uxtb	r2, r3
    6424:	f24a 4366 	movw	r3, #42086	; 0xa466
    6428:	f2c2 0300 	movt	r3, #8192	; 0x2000
    642c:	701a      	strb	r2, [r3, #0]
    642e:	f24a 3361 	movw	r3, #41825	; 0xa361
    6432:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6436:	781b      	ldrb	r3, [r3, #0]
    6438:	3301      	adds	r3, #1
    643a:	b2da      	uxtb	r2, r3
    643c:	f24a 3361 	movw	r3, #41825	; 0xa361
    6440:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6444:	701a      	strb	r2, [r3, #0]
    6446:	f24a 3361 	movw	r3, #41825	; 0xa361
    644a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    644e:	781b      	ldrb	r3, [r3, #0]
    6450:	2bff      	cmp	r3, #255	; 0xff
    6452:	d105      	bne.n	6460 <send_boot+0x5f4>
    6454:	f24a 3361 	movw	r3, #41825	; 0xa361
    6458:	f2c2 0300 	movt	r3, #8192	; 0x2000
    645c:	2200      	movs	r2, #0
    645e:	701a      	strb	r2, [r3, #0]
    6460:	f24a 3361 	movw	r3, #41825	; 0xa361
    6464:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6468:	781b      	ldrb	r3, [r3, #0]
    646a:	461a      	mov	r2, r3
    646c:	f64a 1358 	movw	r3, #43352	; 0xa958
    6470:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6474:	7899      	ldrb	r1, [r3, #2]
    6476:	f24a 3364 	movw	r3, #41828	; 0xa364
    647a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    647e:	5499      	strb	r1, [r3, r2]
    6480:	4bae      	ldr	r3, [pc, #696]	; (673c <send_boot+0x8d0>)
    6482:	781a      	ldrb	r2, [r3, #0]
    6484:	f24a 4365 	movw	r3, #42085	; 0xa465
    6488:	f2c2 0300 	movt	r3, #8192	; 0x2000
    648c:	781b      	ldrb	r3, [r3, #0]
    648e:	4413      	add	r3, r2
    6490:	b2da      	uxtb	r2, r3
    6492:	f24a 4365 	movw	r3, #42085	; 0xa465
    6496:	f2c2 0300 	movt	r3, #8192	; 0x2000
    649a:	701a      	strb	r2, [r3, #0]
    649c:	f24a 4366 	movw	r3, #42086	; 0xa466
    64a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64a4:	781a      	ldrb	r2, [r3, #0]
    64a6:	f24a 4365 	movw	r3, #42085	; 0xa465
    64aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64ae:	781b      	ldrb	r3, [r3, #0]
    64b0:	4413      	add	r3, r2
    64b2:	b2da      	uxtb	r2, r3
    64b4:	f24a 4366 	movw	r3, #42086	; 0xa466
    64b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64bc:	701a      	strb	r2, [r3, #0]
    64be:	f24a 3361 	movw	r3, #41825	; 0xa361
    64c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64c6:	781b      	ldrb	r3, [r3, #0]
    64c8:	3301      	adds	r3, #1
    64ca:	b2da      	uxtb	r2, r3
    64cc:	f24a 3361 	movw	r3, #41825	; 0xa361
    64d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64d4:	701a      	strb	r2, [r3, #0]
    64d6:	f24a 3361 	movw	r3, #41825	; 0xa361
    64da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64de:	781b      	ldrb	r3, [r3, #0]
    64e0:	2bff      	cmp	r3, #255	; 0xff
    64e2:	d105      	bne.n	64f0 <send_boot+0x684>
    64e4:	f24a 3361 	movw	r3, #41825	; 0xa361
    64e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64ec:	2200      	movs	r2, #0
    64ee:	701a      	strb	r2, [r3, #0]
    64f0:	f24a 3361 	movw	r3, #41825	; 0xa361
    64f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64f8:	781b      	ldrb	r3, [r3, #0]
    64fa:	461a      	mov	r2, r3
    64fc:	f64a 1358 	movw	r3, #43352	; 0xa958
    6500:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6504:	78d9      	ldrb	r1, [r3, #3]
    6506:	f24a 3364 	movw	r3, #41828	; 0xa364
    650a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    650e:	5499      	strb	r1, [r3, r2]
    6510:	4b8b      	ldr	r3, [pc, #556]	; (6740 <send_boot+0x8d4>)
    6512:	781a      	ldrb	r2, [r3, #0]
    6514:	f24a 4365 	movw	r3, #42085	; 0xa465
    6518:	f2c2 0300 	movt	r3, #8192	; 0x2000
    651c:	781b      	ldrb	r3, [r3, #0]
    651e:	4413      	add	r3, r2
    6520:	b2da      	uxtb	r2, r3
    6522:	f24a 4365 	movw	r3, #42085	; 0xa465
    6526:	f2c2 0300 	movt	r3, #8192	; 0x2000
    652a:	701a      	strb	r2, [r3, #0]
    652c:	f24a 4366 	movw	r3, #42086	; 0xa466
    6530:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6534:	781a      	ldrb	r2, [r3, #0]
    6536:	f24a 4365 	movw	r3, #42085	; 0xa465
    653a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    653e:	781b      	ldrb	r3, [r3, #0]
    6540:	4413      	add	r3, r2
    6542:	b2da      	uxtb	r2, r3
    6544:	f24a 4366 	movw	r3, #42086	; 0xa466
    6548:	f2c2 0300 	movt	r3, #8192	; 0x2000
    654c:	701a      	strb	r2, [r3, #0]
    654e:	f24a 3361 	movw	r3, #41825	; 0xa361
    6552:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6556:	781b      	ldrb	r3, [r3, #0]
    6558:	3301      	adds	r3, #1
    655a:	b2da      	uxtb	r2, r3
    655c:	f24a 3361 	movw	r3, #41825	; 0xa361
    6560:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6564:	701a      	strb	r2, [r3, #0]
    6566:	f24a 3361 	movw	r3, #41825	; 0xa361
    656a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    656e:	781b      	ldrb	r3, [r3, #0]
    6570:	2bff      	cmp	r3, #255	; 0xff
    6572:	d105      	bne.n	6580 <send_boot+0x714>
    6574:	f24a 3361 	movw	r3, #41825	; 0xa361
    6578:	f2c2 0300 	movt	r3, #8192	; 0x2000
    657c:	2200      	movs	r2, #0
    657e:	701a      	strb	r2, [r3, #0]
    6580:	f24a 3361 	movw	r3, #41825	; 0xa361
    6584:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6588:	781b      	ldrb	r3, [r3, #0]
    658a:	461a      	mov	r2, r3
    658c:	f64a 135c 	movw	r3, #43356	; 0xa95c
    6590:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6594:	7819      	ldrb	r1, [r3, #0]
    6596:	f24a 3364 	movw	r3, #41828	; 0xa364
    659a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    659e:	5499      	strb	r1, [r3, r2]
    65a0:	f64a 135c 	movw	r3, #43356	; 0xa95c
    65a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65a8:	781a      	ldrb	r2, [r3, #0]
    65aa:	f24a 4365 	movw	r3, #42085	; 0xa465
    65ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65b2:	781b      	ldrb	r3, [r3, #0]
    65b4:	4413      	add	r3, r2
    65b6:	b2da      	uxtb	r2, r3
    65b8:	f24a 4365 	movw	r3, #42085	; 0xa465
    65bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65c0:	701a      	strb	r2, [r3, #0]
    65c2:	f24a 4366 	movw	r3, #42086	; 0xa466
    65c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65ca:	781a      	ldrb	r2, [r3, #0]
    65cc:	f24a 4365 	movw	r3, #42085	; 0xa465
    65d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65d4:	781b      	ldrb	r3, [r3, #0]
    65d6:	4413      	add	r3, r2
    65d8:	b2da      	uxtb	r2, r3
    65da:	f24a 4366 	movw	r3, #42086	; 0xa466
    65de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65e2:	701a      	strb	r2, [r3, #0]
    65e4:	f24a 3361 	movw	r3, #41825	; 0xa361
    65e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65ec:	781b      	ldrb	r3, [r3, #0]
    65ee:	3301      	adds	r3, #1
    65f0:	b2da      	uxtb	r2, r3
    65f2:	f24a 3361 	movw	r3, #41825	; 0xa361
    65f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65fa:	701a      	strb	r2, [r3, #0]
    65fc:	f24a 3361 	movw	r3, #41825	; 0xa361
    6600:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6604:	781b      	ldrb	r3, [r3, #0]
    6606:	2bff      	cmp	r3, #255	; 0xff
    6608:	d105      	bne.n	6616 <send_boot+0x7aa>
    660a:	f24a 3361 	movw	r3, #41825	; 0xa361
    660e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6612:	2200      	movs	r2, #0
    6614:	701a      	strb	r2, [r3, #0]
    6616:	f24a 3361 	movw	r3, #41825	; 0xa361
    661a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    661e:	781b      	ldrb	r3, [r3, #0]
    6620:	461a      	mov	r2, r3
    6622:	f64a 135c 	movw	r3, #43356	; 0xa95c
    6626:	f2c2 0300 	movt	r3, #8192	; 0x2000
    662a:	7859      	ldrb	r1, [r3, #1]
    662c:	f24a 3364 	movw	r3, #41828	; 0xa364
    6630:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6634:	5499      	strb	r1, [r3, r2]
    6636:	4b43      	ldr	r3, [pc, #268]	; (6744 <send_boot+0x8d8>)
    6638:	781a      	ldrb	r2, [r3, #0]
    663a:	f24a 4365 	movw	r3, #42085	; 0xa465
    663e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6642:	781b      	ldrb	r3, [r3, #0]
    6644:	4413      	add	r3, r2
    6646:	b2da      	uxtb	r2, r3
    6648:	f24a 4365 	movw	r3, #42085	; 0xa465
    664c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6650:	701a      	strb	r2, [r3, #0]
    6652:	f24a 4366 	movw	r3, #42086	; 0xa466
    6656:	f2c2 0300 	movt	r3, #8192	; 0x2000
    665a:	781a      	ldrb	r2, [r3, #0]
    665c:	f24a 4365 	movw	r3, #42085	; 0xa465
    6660:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6664:	781b      	ldrb	r3, [r3, #0]
    6666:	4413      	add	r3, r2
    6668:	b2da      	uxtb	r2, r3
    666a:	f24a 4366 	movw	r3, #42086	; 0xa466
    666e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6672:	701a      	strb	r2, [r3, #0]
    6674:	f24a 3361 	movw	r3, #41825	; 0xa361
    6678:	f2c2 0300 	movt	r3, #8192	; 0x2000
    667c:	781b      	ldrb	r3, [r3, #0]
    667e:	3301      	adds	r3, #1
    6680:	b2da      	uxtb	r2, r3
    6682:	f24a 3361 	movw	r3, #41825	; 0xa361
    6686:	f2c2 0300 	movt	r3, #8192	; 0x2000
    668a:	701a      	strb	r2, [r3, #0]
    668c:	f24a 3361 	movw	r3, #41825	; 0xa361
    6690:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6694:	781b      	ldrb	r3, [r3, #0]
    6696:	2bff      	cmp	r3, #255	; 0xff
    6698:	d105      	bne.n	66a6 <send_boot+0x83a>
    669a:	f24a 3361 	movw	r3, #41825	; 0xa361
    669e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66a2:	2200      	movs	r2, #0
    66a4:	701a      	strb	r2, [r3, #0]
    66a6:	f24a 3361 	movw	r3, #41825	; 0xa361
    66aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66ae:	781b      	ldrb	r3, [r3, #0]
    66b0:	461a      	mov	r2, r3
    66b2:	f64a 135c 	movw	r3, #43356	; 0xa95c
    66b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66ba:	7899      	ldrb	r1, [r3, #2]
    66bc:	f24a 3364 	movw	r3, #41828	; 0xa364
    66c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66c4:	5499      	strb	r1, [r3, r2]
    66c6:	4b20      	ldr	r3, [pc, #128]	; (6748 <send_boot+0x8dc>)
    66c8:	781a      	ldrb	r2, [r3, #0]
    66ca:	f24a 4365 	movw	r3, #42085	; 0xa465
    66ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66d2:	781b      	ldrb	r3, [r3, #0]
    66d4:	4413      	add	r3, r2
    66d6:	b2da      	uxtb	r2, r3
    66d8:	f24a 4365 	movw	r3, #42085	; 0xa465
    66dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66e0:	701a      	strb	r2, [r3, #0]
    66e2:	f24a 4366 	movw	r3, #42086	; 0xa466
    66e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66ea:	781a      	ldrb	r2, [r3, #0]
    66ec:	f24a 4365 	movw	r3, #42085	; 0xa465
    66f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66f4:	781b      	ldrb	r3, [r3, #0]
    66f6:	4413      	add	r3, r2
    66f8:	b2da      	uxtb	r2, r3
    66fa:	f24a 4366 	movw	r3, #42086	; 0xa466
    66fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6702:	701a      	strb	r2, [r3, #0]
    6704:	f24a 3361 	movw	r3, #41825	; 0xa361
    6708:	f2c2 0300 	movt	r3, #8192	; 0x2000
    670c:	781b      	ldrb	r3, [r3, #0]
    670e:	3301      	adds	r3, #1
    6710:	b2da      	uxtb	r2, r3
    6712:	f24a 3361 	movw	r3, #41825	; 0xa361
    6716:	f2c2 0300 	movt	r3, #8192	; 0x2000
    671a:	701a      	strb	r2, [r3, #0]
    671c:	f24a 3361 	movw	r3, #41825	; 0xa361
    6720:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6724:	781b      	ldrb	r3, [r3, #0]
    6726:	2bff      	cmp	r3, #255	; 0xff
    6728:	d110      	bne.n	674c <send_boot+0x8e0>
    672a:	f24a 3361 	movw	r3, #41825	; 0xa361
    672e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6732:	2200      	movs	r2, #0
    6734:	701a      	strb	r2, [r3, #0]
    6736:	e009      	b.n	674c <send_boot+0x8e0>
    6738:	2000a959 	.word	0x2000a959
    673c:	2000a95a 	.word	0x2000a95a
    6740:	2000a95b 	.word	0x2000a95b
    6744:	2000a95d 	.word	0x2000a95d
    6748:	2000a95e 	.word	0x2000a95e
    674c:	f24a 3361 	movw	r3, #41825	; 0xa361
    6750:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6754:	781b      	ldrb	r3, [r3, #0]
    6756:	461a      	mov	r2, r3
    6758:	f64a 135c 	movw	r3, #43356	; 0xa95c
    675c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6760:	78d9      	ldrb	r1, [r3, #3]
    6762:	f24a 3364 	movw	r3, #41828	; 0xa364
    6766:	f2c2 0300 	movt	r3, #8192	; 0x2000
    676a:	5499      	strb	r1, [r3, r2]
    676c:	4bd3      	ldr	r3, [pc, #844]	; (6abc <send_boot+0xc50>)
    676e:	781a      	ldrb	r2, [r3, #0]
    6770:	f24a 4365 	movw	r3, #42085	; 0xa465
    6774:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6778:	781b      	ldrb	r3, [r3, #0]
    677a:	4413      	add	r3, r2
    677c:	b2da      	uxtb	r2, r3
    677e:	f24a 4365 	movw	r3, #42085	; 0xa465
    6782:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6786:	701a      	strb	r2, [r3, #0]
    6788:	f24a 4366 	movw	r3, #42086	; 0xa466
    678c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6790:	781a      	ldrb	r2, [r3, #0]
    6792:	f24a 4365 	movw	r3, #42085	; 0xa465
    6796:	f2c2 0300 	movt	r3, #8192	; 0x2000
    679a:	781b      	ldrb	r3, [r3, #0]
    679c:	4413      	add	r3, r2
    679e:	b2da      	uxtb	r2, r3
    67a0:	f24a 4366 	movw	r3, #42086	; 0xa466
    67a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67a8:	701a      	strb	r2, [r3, #0]
    67aa:	f24a 3361 	movw	r3, #41825	; 0xa361
    67ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67b2:	781b      	ldrb	r3, [r3, #0]
    67b4:	3301      	adds	r3, #1
    67b6:	b2da      	uxtb	r2, r3
    67b8:	f24a 3361 	movw	r3, #41825	; 0xa361
    67bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67c0:	701a      	strb	r2, [r3, #0]
    67c2:	f24a 3361 	movw	r3, #41825	; 0xa361
    67c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67ca:	781b      	ldrb	r3, [r3, #0]
    67cc:	2bff      	cmp	r3, #255	; 0xff
    67ce:	d105      	bne.n	67dc <send_boot+0x970>
    67d0:	f24a 3361 	movw	r3, #41825	; 0xa361
    67d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67d8:	2200      	movs	r2, #0
    67da:	701a      	strb	r2, [r3, #0]
    67dc:	f24a 3361 	movw	r3, #41825	; 0xa361
    67e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67e4:	781b      	ldrb	r3, [r3, #0]
    67e6:	461a      	mov	r2, r3
    67e8:	f64a 1354 	movw	r3, #43348	; 0xa954
    67ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67f0:	7819      	ldrb	r1, [r3, #0]
    67f2:	f24a 3364 	movw	r3, #41828	; 0xa364
    67f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67fa:	5499      	strb	r1, [r3, r2]
    67fc:	f64a 1354 	movw	r3, #43348	; 0xa954
    6800:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6804:	781a      	ldrb	r2, [r3, #0]
    6806:	f24a 4365 	movw	r3, #42085	; 0xa465
    680a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    680e:	781b      	ldrb	r3, [r3, #0]
    6810:	4413      	add	r3, r2
    6812:	b2da      	uxtb	r2, r3
    6814:	f24a 4365 	movw	r3, #42085	; 0xa465
    6818:	f2c2 0300 	movt	r3, #8192	; 0x2000
    681c:	701a      	strb	r2, [r3, #0]
    681e:	f24a 4366 	movw	r3, #42086	; 0xa466
    6822:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6826:	781a      	ldrb	r2, [r3, #0]
    6828:	f24a 4365 	movw	r3, #42085	; 0xa465
    682c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6830:	781b      	ldrb	r3, [r3, #0]
    6832:	4413      	add	r3, r2
    6834:	b2da      	uxtb	r2, r3
    6836:	f24a 4366 	movw	r3, #42086	; 0xa466
    683a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    683e:	701a      	strb	r2, [r3, #0]
    6840:	f24a 3361 	movw	r3, #41825	; 0xa361
    6844:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6848:	781b      	ldrb	r3, [r3, #0]
    684a:	3301      	adds	r3, #1
    684c:	b2da      	uxtb	r2, r3
    684e:	f24a 3361 	movw	r3, #41825	; 0xa361
    6852:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6856:	701a      	strb	r2, [r3, #0]
    6858:	f24a 3361 	movw	r3, #41825	; 0xa361
    685c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6860:	781b      	ldrb	r3, [r3, #0]
    6862:	2bff      	cmp	r3, #255	; 0xff
    6864:	d105      	bne.n	6872 <send_boot+0xa06>
    6866:	f24a 3361 	movw	r3, #41825	; 0xa361
    686a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    686e:	2200      	movs	r2, #0
    6870:	701a      	strb	r2, [r3, #0]
    6872:	f24a 3361 	movw	r3, #41825	; 0xa361
    6876:	f2c2 0300 	movt	r3, #8192	; 0x2000
    687a:	781b      	ldrb	r3, [r3, #0]
    687c:	461a      	mov	r2, r3
    687e:	f64a 1354 	movw	r3, #43348	; 0xa954
    6882:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6886:	7859      	ldrb	r1, [r3, #1]
    6888:	f24a 3364 	movw	r3, #41828	; 0xa364
    688c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6890:	5499      	strb	r1, [r3, r2]
    6892:	4b8b      	ldr	r3, [pc, #556]	; (6ac0 <send_boot+0xc54>)
    6894:	781a      	ldrb	r2, [r3, #0]
    6896:	f24a 4365 	movw	r3, #42085	; 0xa465
    689a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    689e:	781b      	ldrb	r3, [r3, #0]
    68a0:	4413      	add	r3, r2
    68a2:	b2da      	uxtb	r2, r3
    68a4:	f24a 4365 	movw	r3, #42085	; 0xa465
    68a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68ac:	701a      	strb	r2, [r3, #0]
    68ae:	f24a 4366 	movw	r3, #42086	; 0xa466
    68b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68b6:	781a      	ldrb	r2, [r3, #0]
    68b8:	f24a 4365 	movw	r3, #42085	; 0xa465
    68bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68c0:	781b      	ldrb	r3, [r3, #0]
    68c2:	4413      	add	r3, r2
    68c4:	b2da      	uxtb	r2, r3
    68c6:	f24a 4366 	movw	r3, #42086	; 0xa466
    68ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68ce:	701a      	strb	r2, [r3, #0]
    68d0:	f24a 3361 	movw	r3, #41825	; 0xa361
    68d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68d8:	781b      	ldrb	r3, [r3, #0]
    68da:	3301      	adds	r3, #1
    68dc:	b2da      	uxtb	r2, r3
    68de:	f24a 3361 	movw	r3, #41825	; 0xa361
    68e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68e6:	701a      	strb	r2, [r3, #0]
    68e8:	f24a 3361 	movw	r3, #41825	; 0xa361
    68ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68f0:	781b      	ldrb	r3, [r3, #0]
    68f2:	2bff      	cmp	r3, #255	; 0xff
    68f4:	d105      	bne.n	6902 <send_boot+0xa96>
    68f6:	f24a 3361 	movw	r3, #41825	; 0xa361
    68fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68fe:	2200      	movs	r2, #0
    6900:	701a      	strb	r2, [r3, #0]
    6902:	f24a 3361 	movw	r3, #41825	; 0xa361
    6906:	f2c2 0300 	movt	r3, #8192	; 0x2000
    690a:	781b      	ldrb	r3, [r3, #0]
    690c:	461a      	mov	r2, r3
    690e:	f64a 1354 	movw	r3, #43348	; 0xa954
    6912:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6916:	7899      	ldrb	r1, [r3, #2]
    6918:	f24a 3364 	movw	r3, #41828	; 0xa364
    691c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6920:	5499      	strb	r1, [r3, r2]
    6922:	4b68      	ldr	r3, [pc, #416]	; (6ac4 <send_boot+0xc58>)
    6924:	781a      	ldrb	r2, [r3, #0]
    6926:	f24a 4365 	movw	r3, #42085	; 0xa465
    692a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    692e:	781b      	ldrb	r3, [r3, #0]
    6930:	4413      	add	r3, r2
    6932:	b2da      	uxtb	r2, r3
    6934:	f24a 4365 	movw	r3, #42085	; 0xa465
    6938:	f2c2 0300 	movt	r3, #8192	; 0x2000
    693c:	701a      	strb	r2, [r3, #0]
    693e:	f24a 4366 	movw	r3, #42086	; 0xa466
    6942:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6946:	781a      	ldrb	r2, [r3, #0]
    6948:	f24a 4365 	movw	r3, #42085	; 0xa465
    694c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6950:	781b      	ldrb	r3, [r3, #0]
    6952:	4413      	add	r3, r2
    6954:	b2da      	uxtb	r2, r3
    6956:	f24a 4366 	movw	r3, #42086	; 0xa466
    695a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    695e:	701a      	strb	r2, [r3, #0]
    6960:	f24a 3361 	movw	r3, #41825	; 0xa361
    6964:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6968:	781b      	ldrb	r3, [r3, #0]
    696a:	3301      	adds	r3, #1
    696c:	b2da      	uxtb	r2, r3
    696e:	f24a 3361 	movw	r3, #41825	; 0xa361
    6972:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6976:	701a      	strb	r2, [r3, #0]
    6978:	f24a 3361 	movw	r3, #41825	; 0xa361
    697c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6980:	781b      	ldrb	r3, [r3, #0]
    6982:	2bff      	cmp	r3, #255	; 0xff
    6984:	d105      	bne.n	6992 <send_boot+0xb26>
    6986:	f24a 3361 	movw	r3, #41825	; 0xa361
    698a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    698e:	2200      	movs	r2, #0
    6990:	701a      	strb	r2, [r3, #0]
    6992:	f24a 3361 	movw	r3, #41825	; 0xa361
    6996:	f2c2 0300 	movt	r3, #8192	; 0x2000
    699a:	781b      	ldrb	r3, [r3, #0]
    699c:	461a      	mov	r2, r3
    699e:	f64a 1354 	movw	r3, #43348	; 0xa954
    69a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69a6:	78d9      	ldrb	r1, [r3, #3]
    69a8:	f24a 3364 	movw	r3, #41828	; 0xa364
    69ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69b0:	5499      	strb	r1, [r3, r2]
    69b2:	4b45      	ldr	r3, [pc, #276]	; (6ac8 <send_boot+0xc5c>)
    69b4:	781a      	ldrb	r2, [r3, #0]
    69b6:	f24a 4365 	movw	r3, #42085	; 0xa465
    69ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69be:	781b      	ldrb	r3, [r3, #0]
    69c0:	4413      	add	r3, r2
    69c2:	b2da      	uxtb	r2, r3
    69c4:	f24a 4365 	movw	r3, #42085	; 0xa465
    69c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69cc:	701a      	strb	r2, [r3, #0]
    69ce:	f24a 4366 	movw	r3, #42086	; 0xa466
    69d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69d6:	781a      	ldrb	r2, [r3, #0]
    69d8:	f24a 4365 	movw	r3, #42085	; 0xa465
    69dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69e0:	781b      	ldrb	r3, [r3, #0]
    69e2:	4413      	add	r3, r2
    69e4:	b2da      	uxtb	r2, r3
    69e6:	f24a 4366 	movw	r3, #42086	; 0xa466
    69ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69ee:	701a      	strb	r2, [r3, #0]
    69f0:	f24a 3361 	movw	r3, #41825	; 0xa361
    69f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69f8:	781b      	ldrb	r3, [r3, #0]
    69fa:	3301      	adds	r3, #1
    69fc:	b2da      	uxtb	r2, r3
    69fe:	f24a 3361 	movw	r3, #41825	; 0xa361
    6a02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a06:	701a      	strb	r2, [r3, #0]
    6a08:	f24a 3361 	movw	r3, #41825	; 0xa361
    6a0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a10:	781b      	ldrb	r3, [r3, #0]
    6a12:	2bff      	cmp	r3, #255	; 0xff
    6a14:	d105      	bne.n	6a22 <send_boot+0xbb6>
    6a16:	f24a 3361 	movw	r3, #41825	; 0xa361
    6a1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a1e:	2200      	movs	r2, #0
    6a20:	701a      	strb	r2, [r3, #0]
    6a22:	f24a 3361 	movw	r3, #41825	; 0xa361
    6a26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a2a:	781b      	ldrb	r3, [r3, #0]
    6a2c:	461a      	mov	r2, r3
    6a2e:	f240 03d6 	movw	r3, #214	; 0xd6
    6a32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a36:	7819      	ldrb	r1, [r3, #0]
    6a38:	f24a 3364 	movw	r3, #41828	; 0xa364
    6a3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a40:	5499      	strb	r1, [r3, r2]
    6a42:	f240 03d6 	movw	r3, #214	; 0xd6
    6a46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a4a:	781a      	ldrb	r2, [r3, #0]
    6a4c:	f24a 4365 	movw	r3, #42085	; 0xa465
    6a50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a54:	781b      	ldrb	r3, [r3, #0]
    6a56:	4413      	add	r3, r2
    6a58:	b2da      	uxtb	r2, r3
    6a5a:	f24a 4365 	movw	r3, #42085	; 0xa465
    6a5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a62:	701a      	strb	r2, [r3, #0]
    6a64:	f24a 4366 	movw	r3, #42086	; 0xa466
    6a68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a6c:	781a      	ldrb	r2, [r3, #0]
    6a6e:	f24a 4365 	movw	r3, #42085	; 0xa465
    6a72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a76:	781b      	ldrb	r3, [r3, #0]
    6a78:	4413      	add	r3, r2
    6a7a:	b2da      	uxtb	r2, r3
    6a7c:	f24a 4366 	movw	r3, #42086	; 0xa466
    6a80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a84:	701a      	strb	r2, [r3, #0]
    6a86:	f24a 3361 	movw	r3, #41825	; 0xa361
    6a8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a8e:	781b      	ldrb	r3, [r3, #0]
    6a90:	3301      	adds	r3, #1
    6a92:	b2da      	uxtb	r2, r3
    6a94:	f24a 3361 	movw	r3, #41825	; 0xa361
    6a98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a9c:	701a      	strb	r2, [r3, #0]
    6a9e:	f24a 3361 	movw	r3, #41825	; 0xa361
    6aa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6aa6:	781b      	ldrb	r3, [r3, #0]
    6aa8:	2bff      	cmp	r3, #255	; 0xff
    6aaa:	d10f      	bne.n	6acc <send_boot+0xc60>
    6aac:	f24a 3361 	movw	r3, #41825	; 0xa361
    6ab0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ab4:	2200      	movs	r2, #0
    6ab6:	701a      	strb	r2, [r3, #0]
    6ab8:	e008      	b.n	6acc <send_boot+0xc60>
    6aba:	bf00      	nop
    6abc:	2000a95f 	.word	0x2000a95f
    6ac0:	2000a955 	.word	0x2000a955
    6ac4:	2000a956 	.word	0x2000a956
    6ac8:	2000a957 	.word	0x2000a957
    6acc:	f24a 3361 	movw	r3, #41825	; 0xa361
    6ad0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ad4:	781b      	ldrb	r3, [r3, #0]
    6ad6:	461a      	mov	r2, r3
    6ad8:	f240 03d6 	movw	r3, #214	; 0xd6
    6adc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ae0:	7859      	ldrb	r1, [r3, #1]
    6ae2:	f24a 3364 	movw	r3, #41828	; 0xa364
    6ae6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6aea:	5499      	strb	r1, [r3, r2]
    6aec:	4bc5      	ldr	r3, [pc, #788]	; (6e04 <send_boot+0xf98>)
    6aee:	781a      	ldrb	r2, [r3, #0]
    6af0:	f24a 4365 	movw	r3, #42085	; 0xa465
    6af4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6af8:	781b      	ldrb	r3, [r3, #0]
    6afa:	4413      	add	r3, r2
    6afc:	b2da      	uxtb	r2, r3
    6afe:	f24a 4365 	movw	r3, #42085	; 0xa465
    6b02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b06:	701a      	strb	r2, [r3, #0]
    6b08:	f24a 4366 	movw	r3, #42086	; 0xa466
    6b0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b10:	781a      	ldrb	r2, [r3, #0]
    6b12:	f24a 4365 	movw	r3, #42085	; 0xa465
    6b16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b1a:	781b      	ldrb	r3, [r3, #0]
    6b1c:	4413      	add	r3, r2
    6b1e:	b2da      	uxtb	r2, r3
    6b20:	f24a 4366 	movw	r3, #42086	; 0xa466
    6b24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b28:	701a      	strb	r2, [r3, #0]
    6b2a:	f24a 3361 	movw	r3, #41825	; 0xa361
    6b2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b32:	781b      	ldrb	r3, [r3, #0]
    6b34:	3301      	adds	r3, #1
    6b36:	b2da      	uxtb	r2, r3
    6b38:	f24a 3361 	movw	r3, #41825	; 0xa361
    6b3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b40:	701a      	strb	r2, [r3, #0]
    6b42:	f24a 3361 	movw	r3, #41825	; 0xa361
    6b46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b4a:	781b      	ldrb	r3, [r3, #0]
    6b4c:	2bff      	cmp	r3, #255	; 0xff
    6b4e:	d105      	bne.n	6b5c <send_boot+0xcf0>
    6b50:	f24a 3361 	movw	r3, #41825	; 0xa361
    6b54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b58:	2200      	movs	r2, #0
    6b5a:	701a      	strb	r2, [r3, #0]
    6b5c:	f24a 3361 	movw	r3, #41825	; 0xa361
    6b60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b64:	781b      	ldrb	r3, [r3, #0]
    6b66:	461a      	mov	r2, r3
    6b68:	f240 03d8 	movw	r3, #216	; 0xd8
    6b6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b70:	7819      	ldrb	r1, [r3, #0]
    6b72:	f24a 3364 	movw	r3, #41828	; 0xa364
    6b76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b7a:	5499      	strb	r1, [r3, r2]
    6b7c:	f240 03d8 	movw	r3, #216	; 0xd8
    6b80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b84:	781a      	ldrb	r2, [r3, #0]
    6b86:	f24a 4365 	movw	r3, #42085	; 0xa465
    6b8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b8e:	781b      	ldrb	r3, [r3, #0]
    6b90:	4413      	add	r3, r2
    6b92:	b2da      	uxtb	r2, r3
    6b94:	f24a 4365 	movw	r3, #42085	; 0xa465
    6b98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b9c:	701a      	strb	r2, [r3, #0]
    6b9e:	f24a 4366 	movw	r3, #42086	; 0xa466
    6ba2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ba6:	781a      	ldrb	r2, [r3, #0]
    6ba8:	f24a 4365 	movw	r3, #42085	; 0xa465
    6bac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bb0:	781b      	ldrb	r3, [r3, #0]
    6bb2:	4413      	add	r3, r2
    6bb4:	b2da      	uxtb	r2, r3
    6bb6:	f24a 4366 	movw	r3, #42086	; 0xa466
    6bba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bbe:	701a      	strb	r2, [r3, #0]
    6bc0:	f24a 3361 	movw	r3, #41825	; 0xa361
    6bc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bc8:	781b      	ldrb	r3, [r3, #0]
    6bca:	3301      	adds	r3, #1
    6bcc:	b2da      	uxtb	r2, r3
    6bce:	f24a 3361 	movw	r3, #41825	; 0xa361
    6bd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bd6:	701a      	strb	r2, [r3, #0]
    6bd8:	f24a 3361 	movw	r3, #41825	; 0xa361
    6bdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6be0:	781b      	ldrb	r3, [r3, #0]
    6be2:	2bff      	cmp	r3, #255	; 0xff
    6be4:	d105      	bne.n	6bf2 <send_boot+0xd86>
    6be6:	f24a 3361 	movw	r3, #41825	; 0xa361
    6bea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bee:	2200      	movs	r2, #0
    6bf0:	701a      	strb	r2, [r3, #0]
    6bf2:	f24a 3361 	movw	r3, #41825	; 0xa361
    6bf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bfa:	781b      	ldrb	r3, [r3, #0]
    6bfc:	461a      	mov	r2, r3
    6bfe:	f240 03d8 	movw	r3, #216	; 0xd8
    6c02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c06:	7859      	ldrb	r1, [r3, #1]
    6c08:	f24a 3364 	movw	r3, #41828	; 0xa364
    6c0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c10:	5499      	strb	r1, [r3, r2]
    6c12:	4b7d      	ldr	r3, [pc, #500]	; (6e08 <send_boot+0xf9c>)
    6c14:	781a      	ldrb	r2, [r3, #0]
    6c16:	f24a 4365 	movw	r3, #42085	; 0xa465
    6c1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c1e:	781b      	ldrb	r3, [r3, #0]
    6c20:	4413      	add	r3, r2
    6c22:	b2da      	uxtb	r2, r3
    6c24:	f24a 4365 	movw	r3, #42085	; 0xa465
    6c28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c2c:	701a      	strb	r2, [r3, #0]
    6c2e:	f24a 4366 	movw	r3, #42086	; 0xa466
    6c32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c36:	781a      	ldrb	r2, [r3, #0]
    6c38:	f24a 4365 	movw	r3, #42085	; 0xa465
    6c3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c40:	781b      	ldrb	r3, [r3, #0]
    6c42:	4413      	add	r3, r2
    6c44:	b2da      	uxtb	r2, r3
    6c46:	f24a 4366 	movw	r3, #42086	; 0xa466
    6c4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c4e:	701a      	strb	r2, [r3, #0]
    6c50:	f24a 3361 	movw	r3, #41825	; 0xa361
    6c54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c58:	781b      	ldrb	r3, [r3, #0]
    6c5a:	3301      	adds	r3, #1
    6c5c:	b2da      	uxtb	r2, r3
    6c5e:	f24a 3361 	movw	r3, #41825	; 0xa361
    6c62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c66:	701a      	strb	r2, [r3, #0]
    6c68:	f24a 3361 	movw	r3, #41825	; 0xa361
    6c6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c70:	781b      	ldrb	r3, [r3, #0]
    6c72:	2bff      	cmp	r3, #255	; 0xff
    6c74:	d105      	bne.n	6c82 <send_boot+0xe16>
    6c76:	f24a 3361 	movw	r3, #41825	; 0xa361
    6c7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c7e:	2200      	movs	r2, #0
    6c80:	701a      	strb	r2, [r3, #0]
    6c82:	f24a 3361 	movw	r3, #41825	; 0xa361
    6c86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c8a:	781b      	ldrb	r3, [r3, #0]
    6c8c:	461a      	mov	r2, r3
    6c8e:	f24a 4365 	movw	r3, #42085	; 0xa465
    6c92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c96:	7819      	ldrb	r1, [r3, #0]
    6c98:	f24a 3364 	movw	r3, #41828	; 0xa364
    6c9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ca0:	5499      	strb	r1, [r3, r2]
    6ca2:	f24a 3361 	movw	r3, #41825	; 0xa361
    6ca6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6caa:	781b      	ldrb	r3, [r3, #0]
    6cac:	3301      	adds	r3, #1
    6cae:	b2da      	uxtb	r2, r3
    6cb0:	f24a 3361 	movw	r3, #41825	; 0xa361
    6cb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6cb8:	701a      	strb	r2, [r3, #0]
    6cba:	f24a 3361 	movw	r3, #41825	; 0xa361
    6cbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6cc2:	781b      	ldrb	r3, [r3, #0]
    6cc4:	2bff      	cmp	r3, #255	; 0xff
    6cc6:	d105      	bne.n	6cd4 <send_boot+0xe68>
    6cc8:	f24a 3361 	movw	r3, #41825	; 0xa361
    6ccc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6cd0:	2200      	movs	r2, #0
    6cd2:	701a      	strb	r2, [r3, #0]
    6cd4:	f24a 3361 	movw	r3, #41825	; 0xa361
    6cd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6cdc:	781b      	ldrb	r3, [r3, #0]
    6cde:	461a      	mov	r2, r3
    6ce0:	f24a 4366 	movw	r3, #42086	; 0xa466
    6ce4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ce8:	7819      	ldrb	r1, [r3, #0]
    6cea:	f24a 3364 	movw	r3, #41828	; 0xa364
    6cee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6cf2:	5499      	strb	r1, [r3, r2]
    6cf4:	f24a 3361 	movw	r3, #41825	; 0xa361
    6cf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6cfc:	781b      	ldrb	r3, [r3, #0]
    6cfe:	3301      	adds	r3, #1
    6d00:	b2da      	uxtb	r2, r3
    6d02:	f24a 3361 	movw	r3, #41825	; 0xa361
    6d06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d0a:	701a      	strb	r2, [r3, #0]
    6d0c:	f24a 3361 	movw	r3, #41825	; 0xa361
    6d10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d14:	781b      	ldrb	r3, [r3, #0]
    6d16:	2bff      	cmp	r3, #255	; 0xff
    6d18:	d105      	bne.n	6d26 <send_boot+0xeba>
    6d1a:	f24a 3361 	movw	r3, #41825	; 0xa361
    6d1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d22:	2200      	movs	r2, #0
    6d24:	701a      	strb	r2, [r3, #0]
    6d26:	f242 0339 	movw	r3, #8249	; 0x2039
    6d2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d2e:	781b      	ldrb	r3, [r3, #0]
    6d30:	b2db      	uxtb	r3, r3
    6d32:	f003 0310 	and.w	r3, r3, #16
    6d36:	2b00      	cmp	r3, #0
    6d38:	d15a      	bne.n	6df0 <send_boot+0xf84>
    6d3a:	f24a 3362 	movw	r3, #41826	; 0xa362
    6d3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d42:	781b      	ldrb	r3, [r3, #0]
    6d44:	b2db      	uxtb	r3, r3
    6d46:	461a      	mov	r2, r3
    6d48:	f24a 3364 	movw	r3, #41828	; 0xa364
    6d4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d50:	5c9a      	ldrb	r2, [r3, r2]
    6d52:	f24a 4363 	movw	r3, #42083	; 0xa463
    6d56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d5a:	701a      	strb	r2, [r3, #0]
    6d5c:	f24a 4364 	movw	r3, #42084	; 0xa464
    6d60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d64:	2200      	movs	r2, #0
    6d66:	701a      	strb	r2, [r3, #0]
    6d68:	f24a 3362 	movw	r3, #41826	; 0xa362
    6d6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d70:	781b      	ldrb	r3, [r3, #0]
    6d72:	b2db      	uxtb	r3, r3
    6d74:	3301      	adds	r3, #1
    6d76:	b2da      	uxtb	r2, r3
    6d78:	f24a 3362 	movw	r3, #41826	; 0xa362
    6d7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d80:	701a      	strb	r2, [r3, #0]
    6d82:	f24a 3362 	movw	r3, #41826	; 0xa362
    6d86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d8a:	781b      	ldrb	r3, [r3, #0]
    6d8c:	b2db      	uxtb	r3, r3
    6d8e:	2bff      	cmp	r3, #255	; 0xff
    6d90:	d105      	bne.n	6d9e <send_boot+0xf32>
    6d92:	f24a 3362 	movw	r3, #41826	; 0xa362
    6d96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d9a:	2200      	movs	r2, #0
    6d9c:	701a      	strb	r2, [r3, #0]
    6d9e:	f242 0338 	movw	r3, #8248	; 0x2038
    6da2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6da6:	f242 0238 	movw	r2, #8248	; 0x2038
    6daa:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6dae:	7812      	ldrb	r2, [r2, #0]
    6db0:	b2d2      	uxtb	r2, r2
    6db2:	f042 0201 	orr.w	r2, r2, #1
    6db6:	b2d2      	uxtb	r2, r2
    6db8:	701a      	strb	r2, [r3, #0]
    6dba:	f242 0339 	movw	r3, #8249	; 0x2039
    6dbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6dc2:	f242 0239 	movw	r2, #8249	; 0x2039
    6dc6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6dca:	7812      	ldrb	r2, [r2, #0]
    6dcc:	b2d2      	uxtb	r2, r2
    6dce:	f042 0210 	orr.w	r2, r2, #16
    6dd2:	b2d2      	uxtb	r2, r2
    6dd4:	701a      	strb	r2, [r3, #0]
    6dd6:	e00b      	b.n	6df0 <send_boot+0xf84>
    6dd8:	f24a 3360 	movw	r3, #41824	; 0xa360
    6ddc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6de0:	781b      	ldrb	r3, [r3, #0]
    6de2:	3301      	adds	r3, #1
    6de4:	b2da      	uxtb	r2, r3
    6de6:	f24a 3360 	movw	r3, #41824	; 0xa360
    6dea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6dee:	701a      	strb	r2, [r3, #0]
      boot = FALSE;
    6df0:	f240 03d1 	movw	r3, #209	; 0xd1
    6df4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6df8:	2200      	movs	r2, #0
    6dfa:	701a      	strb	r2, [r3, #0]
  }
}
    6dfc:	46bd      	mov	sp, r7
    6dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e02:	4770      	bx	lr
    6e04:	200000d7 	.word	0x200000d7
    6e08:	200000d9 	.word	0x200000d9

00006e0c <send_attitude>:
void send_attitude(void){ //499ms
    6e0c:	b480      	push	{r7}
    6e0e:	af00      	add	r7, sp, #0
    // add by wanbo
  //if(!boot)
  {
    count++;
    6e10:	f24a 3359 	movw	r3, #41817	; 0xa359
    6e14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e18:	781b      	ldrb	r3, [r3, #0]
    6e1a:	3301      	adds	r3, #1
    6e1c:	b2da      	uxtb	r2, r3
    6e1e:	f24a 3359 	movw	r3, #41817	; 0xa359
    6e22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e26:	701a      	strb	r2, [r3, #0]
    if (count == 250) count = 0;
    6e28:	f24a 3359 	movw	r3, #41817	; 0xa359
    6e2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e30:	781b      	ldrb	r3, [r3, #0]
    6e32:	2bfa      	cmp	r3, #250	; 0xfa
    6e34:	d105      	bne.n	6e42 <send_attitude+0x36>
    6e36:	f24a 3359 	movw	r3, #41817	; 0xa359
    6e3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e3e:	2200      	movs	r2, #0
    6e40:	701a      	strb	r2, [r3, #0]
    if (count % 5 == 0) 
    6e42:	f24a 3359 	movw	r3, #41817	; 0xa359
    6e46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e4a:	781a      	ldrb	r2, [r3, #0]
    6e4c:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    6e50:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    6e54:	fba3 1302 	umull	r1, r3, r3, r2
    6e58:	0899      	lsrs	r1, r3, #2
    6e5a:	460b      	mov	r3, r1
    6e5c:	009b      	lsls	r3, r3, #2
    6e5e:	440b      	add	r3, r1
    6e60:	1ad3      	subs	r3, r2, r3
    6e62:	b2db      	uxtb	r3, r3
    6e64:	2b00      	cmp	r3, #0
    6e66:	f040 84c1 	bne.w	77ec <send_attitude+0x9e0>
       PERIODIC_SEND_ATTITUDE(); 
    6e6a:	f24a 3361 	movw	r3, #41825	; 0xa361
    6e6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e72:	781a      	ldrb	r2, [r3, #0]
    6e74:	f24a 3362 	movw	r3, #41826	; 0xa362
    6e78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e7c:	781b      	ldrb	r3, [r3, #0]
    6e7e:	b2db      	uxtb	r3, r3
    6e80:	429a      	cmp	r2, r3
    6e82:	d313      	bcc.n	6eac <send_attitude+0xa0>
    6e84:	f24a 3362 	movw	r3, #41826	; 0xa362
    6e88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e8c:	781b      	ldrb	r3, [r3, #0]
    6e8e:	b2db      	uxtb	r3, r3
    6e90:	461a      	mov	r2, r3
    6e92:	f24a 3361 	movw	r3, #41825	; 0xa361
    6e96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e9a:	781b      	ldrb	r3, [r3, #0]
    6e9c:	1ad3      	subs	r3, r2, r3
    6e9e:	33ff      	adds	r3, #255	; 0xff
    6ea0:	2b10      	cmp	r3, #16
    6ea2:	bfd4      	ite	le
    6ea4:	2300      	movle	r3, #0
    6ea6:	2301      	movgt	r3, #1
    6ea8:	b2db      	uxtb	r3, r3
    6eaa:	e011      	b.n	6ed0 <send_attitude+0xc4>
    6eac:	f24a 3362 	movw	r3, #41826	; 0xa362
    6eb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6eb4:	781b      	ldrb	r3, [r3, #0]
    6eb6:	b2db      	uxtb	r3, r3
    6eb8:	461a      	mov	r2, r3
    6eba:	f24a 3361 	movw	r3, #41825	; 0xa361
    6ebe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ec2:	781b      	ldrb	r3, [r3, #0]
    6ec4:	1ad3      	subs	r3, r2, r3
    6ec6:	2b10      	cmp	r3, #16
    6ec8:	bfd4      	ite	le
    6eca:	2300      	movle	r3, #0
    6ecc:	2301      	movgt	r3, #1
    6ece:	b2db      	uxtb	r3, r3
    6ed0:	2b00      	cmp	r3, #0
    6ed2:	f000 847f 	beq.w	77d4 <send_attitude+0x9c8>
    6ed6:	f24a 3361 	movw	r3, #41825	; 0xa361
    6eda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ede:	781b      	ldrb	r3, [r3, #0]
    6ee0:	461a      	mov	r2, r3
    6ee2:	f24a 3364 	movw	r3, #41828	; 0xa364
    6ee6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6eea:	2105      	movs	r1, #5
    6eec:	5499      	strb	r1, [r3, r2]
    6eee:	f24a 3361 	movw	r3, #41825	; 0xa361
    6ef2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ef6:	781b      	ldrb	r3, [r3, #0]
    6ef8:	3301      	adds	r3, #1
    6efa:	b2da      	uxtb	r2, r3
    6efc:	f24a 3361 	movw	r3, #41825	; 0xa361
    6f00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f04:	701a      	strb	r2, [r3, #0]
    6f06:	f24a 3361 	movw	r3, #41825	; 0xa361
    6f0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f0e:	781b      	ldrb	r3, [r3, #0]
    6f10:	2bff      	cmp	r3, #255	; 0xff
    6f12:	d105      	bne.n	6f20 <send_attitude+0x114>
    6f14:	f24a 3361 	movw	r3, #41825	; 0xa361
    6f18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f1c:	2200      	movs	r2, #0
    6f1e:	701a      	strb	r2, [r3, #0]
    6f20:	f24a 3361 	movw	r3, #41825	; 0xa361
    6f24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f28:	781b      	ldrb	r3, [r3, #0]
    6f2a:	461a      	mov	r2, r3
    6f2c:	f24a 3364 	movw	r3, #41828	; 0xa364
    6f30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f34:	2106      	movs	r1, #6
    6f36:	5499      	strb	r1, [r3, r2]
    6f38:	f24a 3361 	movw	r3, #41825	; 0xa361
    6f3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f40:	781b      	ldrb	r3, [r3, #0]
    6f42:	3301      	adds	r3, #1
    6f44:	b2da      	uxtb	r2, r3
    6f46:	f24a 3361 	movw	r3, #41825	; 0xa361
    6f4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f4e:	701a      	strb	r2, [r3, #0]
    6f50:	f24a 3361 	movw	r3, #41825	; 0xa361
    6f54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f58:	781b      	ldrb	r3, [r3, #0]
    6f5a:	2bff      	cmp	r3, #255	; 0xff
    6f5c:	d105      	bne.n	6f6a <send_attitude+0x15e>
    6f5e:	f24a 3361 	movw	r3, #41825	; 0xa361
    6f62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f66:	2200      	movs	r2, #0
    6f68:	701a      	strb	r2, [r3, #0]
    6f6a:	f24a 4365 	movw	r3, #42085	; 0xa465
    6f6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f72:	2206      	movs	r2, #6
    6f74:	701a      	strb	r2, [r3, #0]
    6f76:	f24a 4366 	movw	r3, #42086	; 0xa466
    6f7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f7e:	2206      	movs	r2, #6
    6f80:	701a      	strb	r2, [r3, #0]
    6f82:	f24a 3361 	movw	r3, #41825	; 0xa361
    6f86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f8a:	781b      	ldrb	r3, [r3, #0]
    6f8c:	461a      	mov	r2, r3
    6f8e:	f64a 1320 	movw	r3, #43296	; 0xa920
    6f92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f96:	7819      	ldrb	r1, [r3, #0]
    6f98:	f24a 3364 	movw	r3, #41828	; 0xa364
    6f9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fa0:	5499      	strb	r1, [r3, r2]
    6fa2:	f64a 1320 	movw	r3, #43296	; 0xa920
    6fa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6faa:	781a      	ldrb	r2, [r3, #0]
    6fac:	f24a 4365 	movw	r3, #42085	; 0xa465
    6fb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fb4:	781b      	ldrb	r3, [r3, #0]
    6fb6:	4413      	add	r3, r2
    6fb8:	b2da      	uxtb	r2, r3
    6fba:	f24a 4365 	movw	r3, #42085	; 0xa465
    6fbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fc2:	701a      	strb	r2, [r3, #0]
    6fc4:	f24a 4366 	movw	r3, #42086	; 0xa466
    6fc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fcc:	781a      	ldrb	r2, [r3, #0]
    6fce:	f24a 4365 	movw	r3, #42085	; 0xa465
    6fd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fd6:	781b      	ldrb	r3, [r3, #0]
    6fd8:	4413      	add	r3, r2
    6fda:	b2da      	uxtb	r2, r3
    6fdc:	f24a 4366 	movw	r3, #42086	; 0xa466
    6fe0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fe4:	701a      	strb	r2, [r3, #0]
    6fe6:	f24a 3361 	movw	r3, #41825	; 0xa361
    6fea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fee:	781b      	ldrb	r3, [r3, #0]
    6ff0:	3301      	adds	r3, #1
    6ff2:	b2da      	uxtb	r2, r3
    6ff4:	f24a 3361 	movw	r3, #41825	; 0xa361
    6ff8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ffc:	701a      	strb	r2, [r3, #0]
    6ffe:	f24a 3361 	movw	r3, #41825	; 0xa361
    7002:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7006:	781b      	ldrb	r3, [r3, #0]
    7008:	2bff      	cmp	r3, #255	; 0xff
    700a:	d105      	bne.n	7018 <send_attitude+0x20c>
    700c:	f24a 3361 	movw	r3, #41825	; 0xa361
    7010:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7014:	2200      	movs	r2, #0
    7016:	701a      	strb	r2, [r3, #0]
    7018:	f24a 3361 	movw	r3, #41825	; 0xa361
    701c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7020:	781b      	ldrb	r3, [r3, #0]
    7022:	461a      	mov	r2, r3
    7024:	f64a 1320 	movw	r3, #43296	; 0xa920
    7028:	f2c2 0300 	movt	r3, #8192	; 0x2000
    702c:	7859      	ldrb	r1, [r3, #1]
    702e:	f24a 3364 	movw	r3, #41828	; 0xa364
    7032:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7036:	5499      	strb	r1, [r3, r2]
    7038:	4bd1      	ldr	r3, [pc, #836]	; (7380 <send_attitude+0x574>)
    703a:	781a      	ldrb	r2, [r3, #0]
    703c:	f24a 4365 	movw	r3, #42085	; 0xa465
    7040:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7044:	781b      	ldrb	r3, [r3, #0]
    7046:	4413      	add	r3, r2
    7048:	b2da      	uxtb	r2, r3
    704a:	f24a 4365 	movw	r3, #42085	; 0xa465
    704e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7052:	701a      	strb	r2, [r3, #0]
    7054:	f24a 4366 	movw	r3, #42086	; 0xa466
    7058:	f2c2 0300 	movt	r3, #8192	; 0x2000
    705c:	781a      	ldrb	r2, [r3, #0]
    705e:	f24a 4365 	movw	r3, #42085	; 0xa465
    7062:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7066:	781b      	ldrb	r3, [r3, #0]
    7068:	4413      	add	r3, r2
    706a:	b2da      	uxtb	r2, r3
    706c:	f24a 4366 	movw	r3, #42086	; 0xa466
    7070:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7074:	701a      	strb	r2, [r3, #0]
    7076:	f24a 3361 	movw	r3, #41825	; 0xa361
    707a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    707e:	781b      	ldrb	r3, [r3, #0]
    7080:	3301      	adds	r3, #1
    7082:	b2da      	uxtb	r2, r3
    7084:	f24a 3361 	movw	r3, #41825	; 0xa361
    7088:	f2c2 0300 	movt	r3, #8192	; 0x2000
    708c:	701a      	strb	r2, [r3, #0]
    708e:	f24a 3361 	movw	r3, #41825	; 0xa361
    7092:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7096:	781b      	ldrb	r3, [r3, #0]
    7098:	2bff      	cmp	r3, #255	; 0xff
    709a:	d105      	bne.n	70a8 <send_attitude+0x29c>
    709c:	f24a 3361 	movw	r3, #41825	; 0xa361
    70a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70a4:	2200      	movs	r2, #0
    70a6:	701a      	strb	r2, [r3, #0]
    70a8:	f24a 3361 	movw	r3, #41825	; 0xa361
    70ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70b0:	781b      	ldrb	r3, [r3, #0]
    70b2:	461a      	mov	r2, r3
    70b4:	f64a 1320 	movw	r3, #43296	; 0xa920
    70b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70bc:	7899      	ldrb	r1, [r3, #2]
    70be:	f24a 3364 	movw	r3, #41828	; 0xa364
    70c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70c6:	5499      	strb	r1, [r3, r2]
    70c8:	4bae      	ldr	r3, [pc, #696]	; (7384 <send_attitude+0x578>)
    70ca:	781a      	ldrb	r2, [r3, #0]
    70cc:	f24a 4365 	movw	r3, #42085	; 0xa465
    70d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70d4:	781b      	ldrb	r3, [r3, #0]
    70d6:	4413      	add	r3, r2
    70d8:	b2da      	uxtb	r2, r3
    70da:	f24a 4365 	movw	r3, #42085	; 0xa465
    70de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70e2:	701a      	strb	r2, [r3, #0]
    70e4:	f24a 4366 	movw	r3, #42086	; 0xa466
    70e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70ec:	781a      	ldrb	r2, [r3, #0]
    70ee:	f24a 4365 	movw	r3, #42085	; 0xa465
    70f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70f6:	781b      	ldrb	r3, [r3, #0]
    70f8:	4413      	add	r3, r2
    70fa:	b2da      	uxtb	r2, r3
    70fc:	f24a 4366 	movw	r3, #42086	; 0xa466
    7100:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7104:	701a      	strb	r2, [r3, #0]
    7106:	f24a 3361 	movw	r3, #41825	; 0xa361
    710a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    710e:	781b      	ldrb	r3, [r3, #0]
    7110:	3301      	adds	r3, #1
    7112:	b2da      	uxtb	r2, r3
    7114:	f24a 3361 	movw	r3, #41825	; 0xa361
    7118:	f2c2 0300 	movt	r3, #8192	; 0x2000
    711c:	701a      	strb	r2, [r3, #0]
    711e:	f24a 3361 	movw	r3, #41825	; 0xa361
    7122:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7126:	781b      	ldrb	r3, [r3, #0]
    7128:	2bff      	cmp	r3, #255	; 0xff
    712a:	d105      	bne.n	7138 <send_attitude+0x32c>
    712c:	f24a 3361 	movw	r3, #41825	; 0xa361
    7130:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7134:	2200      	movs	r2, #0
    7136:	701a      	strb	r2, [r3, #0]
    7138:	f24a 3361 	movw	r3, #41825	; 0xa361
    713c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7140:	781b      	ldrb	r3, [r3, #0]
    7142:	461a      	mov	r2, r3
    7144:	f64a 1320 	movw	r3, #43296	; 0xa920
    7148:	f2c2 0300 	movt	r3, #8192	; 0x2000
    714c:	78d9      	ldrb	r1, [r3, #3]
    714e:	f24a 3364 	movw	r3, #41828	; 0xa364
    7152:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7156:	5499      	strb	r1, [r3, r2]
    7158:	4b8b      	ldr	r3, [pc, #556]	; (7388 <send_attitude+0x57c>)
    715a:	781a      	ldrb	r2, [r3, #0]
    715c:	f24a 4365 	movw	r3, #42085	; 0xa465
    7160:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7164:	781b      	ldrb	r3, [r3, #0]
    7166:	4413      	add	r3, r2
    7168:	b2da      	uxtb	r2, r3
    716a:	f24a 4365 	movw	r3, #42085	; 0xa465
    716e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7172:	701a      	strb	r2, [r3, #0]
    7174:	f24a 4366 	movw	r3, #42086	; 0xa466
    7178:	f2c2 0300 	movt	r3, #8192	; 0x2000
    717c:	781a      	ldrb	r2, [r3, #0]
    717e:	f24a 4365 	movw	r3, #42085	; 0xa465
    7182:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7186:	781b      	ldrb	r3, [r3, #0]
    7188:	4413      	add	r3, r2
    718a:	b2da      	uxtb	r2, r3
    718c:	f24a 4366 	movw	r3, #42086	; 0xa466
    7190:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7194:	701a      	strb	r2, [r3, #0]
    7196:	f24a 3361 	movw	r3, #41825	; 0xa361
    719a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    719e:	781b      	ldrb	r3, [r3, #0]
    71a0:	3301      	adds	r3, #1
    71a2:	b2da      	uxtb	r2, r3
    71a4:	f24a 3361 	movw	r3, #41825	; 0xa361
    71a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71ac:	701a      	strb	r2, [r3, #0]
    71ae:	f24a 3361 	movw	r3, #41825	; 0xa361
    71b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71b6:	781b      	ldrb	r3, [r3, #0]
    71b8:	2bff      	cmp	r3, #255	; 0xff
    71ba:	d105      	bne.n	71c8 <send_attitude+0x3bc>
    71bc:	f24a 3361 	movw	r3, #41825	; 0xa361
    71c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71c4:	2200      	movs	r2, #0
    71c6:	701a      	strb	r2, [r3, #0]
    71c8:	f24a 3361 	movw	r3, #41825	; 0xa361
    71cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71d0:	781b      	ldrb	r3, [r3, #0]
    71d2:	461a      	mov	r2, r3
    71d4:	f64a 1324 	movw	r3, #43300	; 0xa924
    71d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71dc:	7819      	ldrb	r1, [r3, #0]
    71de:	f24a 3364 	movw	r3, #41828	; 0xa364
    71e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71e6:	5499      	strb	r1, [r3, r2]
    71e8:	f64a 1324 	movw	r3, #43300	; 0xa924
    71ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71f0:	781a      	ldrb	r2, [r3, #0]
    71f2:	f24a 4365 	movw	r3, #42085	; 0xa465
    71f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71fa:	781b      	ldrb	r3, [r3, #0]
    71fc:	4413      	add	r3, r2
    71fe:	b2da      	uxtb	r2, r3
    7200:	f24a 4365 	movw	r3, #42085	; 0xa465
    7204:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7208:	701a      	strb	r2, [r3, #0]
    720a:	f24a 4366 	movw	r3, #42086	; 0xa466
    720e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7212:	781a      	ldrb	r2, [r3, #0]
    7214:	f24a 4365 	movw	r3, #42085	; 0xa465
    7218:	f2c2 0300 	movt	r3, #8192	; 0x2000
    721c:	781b      	ldrb	r3, [r3, #0]
    721e:	4413      	add	r3, r2
    7220:	b2da      	uxtb	r2, r3
    7222:	f24a 4366 	movw	r3, #42086	; 0xa466
    7226:	f2c2 0300 	movt	r3, #8192	; 0x2000
    722a:	701a      	strb	r2, [r3, #0]
    722c:	f24a 3361 	movw	r3, #41825	; 0xa361
    7230:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7234:	781b      	ldrb	r3, [r3, #0]
    7236:	3301      	adds	r3, #1
    7238:	b2da      	uxtb	r2, r3
    723a:	f24a 3361 	movw	r3, #41825	; 0xa361
    723e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7242:	701a      	strb	r2, [r3, #0]
    7244:	f24a 3361 	movw	r3, #41825	; 0xa361
    7248:	f2c2 0300 	movt	r3, #8192	; 0x2000
    724c:	781b      	ldrb	r3, [r3, #0]
    724e:	2bff      	cmp	r3, #255	; 0xff
    7250:	d105      	bne.n	725e <send_attitude+0x452>
    7252:	f24a 3361 	movw	r3, #41825	; 0xa361
    7256:	f2c2 0300 	movt	r3, #8192	; 0x2000
    725a:	2200      	movs	r2, #0
    725c:	701a      	strb	r2, [r3, #0]
    725e:	f24a 3361 	movw	r3, #41825	; 0xa361
    7262:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7266:	781b      	ldrb	r3, [r3, #0]
    7268:	461a      	mov	r2, r3
    726a:	f64a 1324 	movw	r3, #43300	; 0xa924
    726e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7272:	7859      	ldrb	r1, [r3, #1]
    7274:	f24a 3364 	movw	r3, #41828	; 0xa364
    7278:	f2c2 0300 	movt	r3, #8192	; 0x2000
    727c:	5499      	strb	r1, [r3, r2]
    727e:	4b43      	ldr	r3, [pc, #268]	; (738c <send_attitude+0x580>)
    7280:	781a      	ldrb	r2, [r3, #0]
    7282:	f24a 4365 	movw	r3, #42085	; 0xa465
    7286:	f2c2 0300 	movt	r3, #8192	; 0x2000
    728a:	781b      	ldrb	r3, [r3, #0]
    728c:	4413      	add	r3, r2
    728e:	b2da      	uxtb	r2, r3
    7290:	f24a 4365 	movw	r3, #42085	; 0xa465
    7294:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7298:	701a      	strb	r2, [r3, #0]
    729a:	f24a 4366 	movw	r3, #42086	; 0xa466
    729e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72a2:	781a      	ldrb	r2, [r3, #0]
    72a4:	f24a 4365 	movw	r3, #42085	; 0xa465
    72a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72ac:	781b      	ldrb	r3, [r3, #0]
    72ae:	4413      	add	r3, r2
    72b0:	b2da      	uxtb	r2, r3
    72b2:	f24a 4366 	movw	r3, #42086	; 0xa466
    72b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72ba:	701a      	strb	r2, [r3, #0]
    72bc:	f24a 3361 	movw	r3, #41825	; 0xa361
    72c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72c4:	781b      	ldrb	r3, [r3, #0]
    72c6:	3301      	adds	r3, #1
    72c8:	b2da      	uxtb	r2, r3
    72ca:	f24a 3361 	movw	r3, #41825	; 0xa361
    72ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72d2:	701a      	strb	r2, [r3, #0]
    72d4:	f24a 3361 	movw	r3, #41825	; 0xa361
    72d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72dc:	781b      	ldrb	r3, [r3, #0]
    72de:	2bff      	cmp	r3, #255	; 0xff
    72e0:	d105      	bne.n	72ee <send_attitude+0x4e2>
    72e2:	f24a 3361 	movw	r3, #41825	; 0xa361
    72e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72ea:	2200      	movs	r2, #0
    72ec:	701a      	strb	r2, [r3, #0]
    72ee:	f24a 3361 	movw	r3, #41825	; 0xa361
    72f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72f6:	781b      	ldrb	r3, [r3, #0]
    72f8:	461a      	mov	r2, r3
    72fa:	f64a 1324 	movw	r3, #43300	; 0xa924
    72fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7302:	7899      	ldrb	r1, [r3, #2]
    7304:	f24a 3364 	movw	r3, #41828	; 0xa364
    7308:	f2c2 0300 	movt	r3, #8192	; 0x2000
    730c:	5499      	strb	r1, [r3, r2]
    730e:	4b20      	ldr	r3, [pc, #128]	; (7390 <send_attitude+0x584>)
    7310:	781a      	ldrb	r2, [r3, #0]
    7312:	f24a 4365 	movw	r3, #42085	; 0xa465
    7316:	f2c2 0300 	movt	r3, #8192	; 0x2000
    731a:	781b      	ldrb	r3, [r3, #0]
    731c:	4413      	add	r3, r2
    731e:	b2da      	uxtb	r2, r3
    7320:	f24a 4365 	movw	r3, #42085	; 0xa465
    7324:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7328:	701a      	strb	r2, [r3, #0]
    732a:	f24a 4366 	movw	r3, #42086	; 0xa466
    732e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7332:	781a      	ldrb	r2, [r3, #0]
    7334:	f24a 4365 	movw	r3, #42085	; 0xa465
    7338:	f2c2 0300 	movt	r3, #8192	; 0x2000
    733c:	781b      	ldrb	r3, [r3, #0]
    733e:	4413      	add	r3, r2
    7340:	b2da      	uxtb	r2, r3
    7342:	f24a 4366 	movw	r3, #42086	; 0xa466
    7346:	f2c2 0300 	movt	r3, #8192	; 0x2000
    734a:	701a      	strb	r2, [r3, #0]
    734c:	f24a 3361 	movw	r3, #41825	; 0xa361
    7350:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7354:	781b      	ldrb	r3, [r3, #0]
    7356:	3301      	adds	r3, #1
    7358:	b2da      	uxtb	r2, r3
    735a:	f24a 3361 	movw	r3, #41825	; 0xa361
    735e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7362:	701a      	strb	r2, [r3, #0]
    7364:	f24a 3361 	movw	r3, #41825	; 0xa361
    7368:	f2c2 0300 	movt	r3, #8192	; 0x2000
    736c:	781b      	ldrb	r3, [r3, #0]
    736e:	2bff      	cmp	r3, #255	; 0xff
    7370:	d110      	bne.n	7394 <send_attitude+0x588>
    7372:	f24a 3361 	movw	r3, #41825	; 0xa361
    7376:	f2c2 0300 	movt	r3, #8192	; 0x2000
    737a:	2200      	movs	r2, #0
    737c:	701a      	strb	r2, [r3, #0]
    737e:	e009      	b.n	7394 <send_attitude+0x588>
    7380:	2000a921 	.word	0x2000a921
    7384:	2000a922 	.word	0x2000a922
    7388:	2000a923 	.word	0x2000a923
    738c:	2000a925 	.word	0x2000a925
    7390:	2000a926 	.word	0x2000a926
    7394:	f24a 3361 	movw	r3, #41825	; 0xa361
    7398:	f2c2 0300 	movt	r3, #8192	; 0x2000
    739c:	781b      	ldrb	r3, [r3, #0]
    739e:	461a      	mov	r2, r3
    73a0:	f64a 1324 	movw	r3, #43300	; 0xa924
    73a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73a8:	78d9      	ldrb	r1, [r3, #3]
    73aa:	f24a 3364 	movw	r3, #41828	; 0xa364
    73ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73b2:	5499      	strb	r1, [r3, r2]
    73b4:	4bc2      	ldr	r3, [pc, #776]	; (76c0 <send_attitude+0x8b4>)
    73b6:	781a      	ldrb	r2, [r3, #0]
    73b8:	f24a 4365 	movw	r3, #42085	; 0xa465
    73bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73c0:	781b      	ldrb	r3, [r3, #0]
    73c2:	4413      	add	r3, r2
    73c4:	b2da      	uxtb	r2, r3
    73c6:	f24a 4365 	movw	r3, #42085	; 0xa465
    73ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73ce:	701a      	strb	r2, [r3, #0]
    73d0:	f24a 4366 	movw	r3, #42086	; 0xa466
    73d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73d8:	781a      	ldrb	r2, [r3, #0]
    73da:	f24a 4365 	movw	r3, #42085	; 0xa465
    73de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73e2:	781b      	ldrb	r3, [r3, #0]
    73e4:	4413      	add	r3, r2
    73e6:	b2da      	uxtb	r2, r3
    73e8:	f24a 4366 	movw	r3, #42086	; 0xa466
    73ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73f0:	701a      	strb	r2, [r3, #0]
    73f2:	f24a 3361 	movw	r3, #41825	; 0xa361
    73f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73fa:	781b      	ldrb	r3, [r3, #0]
    73fc:	3301      	adds	r3, #1
    73fe:	b2da      	uxtb	r2, r3
    7400:	f24a 3361 	movw	r3, #41825	; 0xa361
    7404:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7408:	701a      	strb	r2, [r3, #0]
    740a:	f24a 3361 	movw	r3, #41825	; 0xa361
    740e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7412:	781b      	ldrb	r3, [r3, #0]
    7414:	2bff      	cmp	r3, #255	; 0xff
    7416:	d105      	bne.n	7424 <send_attitude+0x618>
    7418:	f24a 3361 	movw	r3, #41825	; 0xa361
    741c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7420:	2200      	movs	r2, #0
    7422:	701a      	strb	r2, [r3, #0]
    7424:	f24a 3361 	movw	r3, #41825	; 0xa361
    7428:	f2c2 0300 	movt	r3, #8192	; 0x2000
    742c:	781b      	ldrb	r3, [r3, #0]
    742e:	461a      	mov	r2, r3
    7430:	f64a 1328 	movw	r3, #43304	; 0xa928
    7434:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7438:	7819      	ldrb	r1, [r3, #0]
    743a:	f24a 3364 	movw	r3, #41828	; 0xa364
    743e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7442:	5499      	strb	r1, [r3, r2]
    7444:	f64a 1328 	movw	r3, #43304	; 0xa928
    7448:	f2c2 0300 	movt	r3, #8192	; 0x2000
    744c:	781a      	ldrb	r2, [r3, #0]
    744e:	f24a 4365 	movw	r3, #42085	; 0xa465
    7452:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7456:	781b      	ldrb	r3, [r3, #0]
    7458:	4413      	add	r3, r2
    745a:	b2da      	uxtb	r2, r3
    745c:	f24a 4365 	movw	r3, #42085	; 0xa465
    7460:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7464:	701a      	strb	r2, [r3, #0]
    7466:	f24a 4366 	movw	r3, #42086	; 0xa466
    746a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    746e:	781a      	ldrb	r2, [r3, #0]
    7470:	f24a 4365 	movw	r3, #42085	; 0xa465
    7474:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7478:	781b      	ldrb	r3, [r3, #0]
    747a:	4413      	add	r3, r2
    747c:	b2da      	uxtb	r2, r3
    747e:	f24a 4366 	movw	r3, #42086	; 0xa466
    7482:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7486:	701a      	strb	r2, [r3, #0]
    7488:	f24a 3361 	movw	r3, #41825	; 0xa361
    748c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7490:	781b      	ldrb	r3, [r3, #0]
    7492:	3301      	adds	r3, #1
    7494:	b2da      	uxtb	r2, r3
    7496:	f24a 3361 	movw	r3, #41825	; 0xa361
    749a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    749e:	701a      	strb	r2, [r3, #0]
    74a0:	f24a 3361 	movw	r3, #41825	; 0xa361
    74a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74a8:	781b      	ldrb	r3, [r3, #0]
    74aa:	2bff      	cmp	r3, #255	; 0xff
    74ac:	d105      	bne.n	74ba <send_attitude+0x6ae>
    74ae:	f24a 3361 	movw	r3, #41825	; 0xa361
    74b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74b6:	2200      	movs	r2, #0
    74b8:	701a      	strb	r2, [r3, #0]
    74ba:	f24a 3361 	movw	r3, #41825	; 0xa361
    74be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74c2:	781b      	ldrb	r3, [r3, #0]
    74c4:	461a      	mov	r2, r3
    74c6:	f64a 1328 	movw	r3, #43304	; 0xa928
    74ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74ce:	7859      	ldrb	r1, [r3, #1]
    74d0:	f24a 3364 	movw	r3, #41828	; 0xa364
    74d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74d8:	5499      	strb	r1, [r3, r2]
    74da:	4b7a      	ldr	r3, [pc, #488]	; (76c4 <send_attitude+0x8b8>)
    74dc:	781a      	ldrb	r2, [r3, #0]
    74de:	f24a 4365 	movw	r3, #42085	; 0xa465
    74e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74e6:	781b      	ldrb	r3, [r3, #0]
    74e8:	4413      	add	r3, r2
    74ea:	b2da      	uxtb	r2, r3
    74ec:	f24a 4365 	movw	r3, #42085	; 0xa465
    74f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74f4:	701a      	strb	r2, [r3, #0]
    74f6:	f24a 4366 	movw	r3, #42086	; 0xa466
    74fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74fe:	781a      	ldrb	r2, [r3, #0]
    7500:	f24a 4365 	movw	r3, #42085	; 0xa465
    7504:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7508:	781b      	ldrb	r3, [r3, #0]
    750a:	4413      	add	r3, r2
    750c:	b2da      	uxtb	r2, r3
    750e:	f24a 4366 	movw	r3, #42086	; 0xa466
    7512:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7516:	701a      	strb	r2, [r3, #0]
    7518:	f24a 3361 	movw	r3, #41825	; 0xa361
    751c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7520:	781b      	ldrb	r3, [r3, #0]
    7522:	3301      	adds	r3, #1
    7524:	b2da      	uxtb	r2, r3
    7526:	f24a 3361 	movw	r3, #41825	; 0xa361
    752a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    752e:	701a      	strb	r2, [r3, #0]
    7530:	f24a 3361 	movw	r3, #41825	; 0xa361
    7534:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7538:	781b      	ldrb	r3, [r3, #0]
    753a:	2bff      	cmp	r3, #255	; 0xff
    753c:	d105      	bne.n	754a <send_attitude+0x73e>
    753e:	f24a 3361 	movw	r3, #41825	; 0xa361
    7542:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7546:	2200      	movs	r2, #0
    7548:	701a      	strb	r2, [r3, #0]
    754a:	f24a 3361 	movw	r3, #41825	; 0xa361
    754e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7552:	781b      	ldrb	r3, [r3, #0]
    7554:	461a      	mov	r2, r3
    7556:	f64a 1328 	movw	r3, #43304	; 0xa928
    755a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    755e:	7899      	ldrb	r1, [r3, #2]
    7560:	f24a 3364 	movw	r3, #41828	; 0xa364
    7564:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7568:	5499      	strb	r1, [r3, r2]
    756a:	4b57      	ldr	r3, [pc, #348]	; (76c8 <send_attitude+0x8bc>)
    756c:	781a      	ldrb	r2, [r3, #0]
    756e:	f24a 4365 	movw	r3, #42085	; 0xa465
    7572:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7576:	781b      	ldrb	r3, [r3, #0]
    7578:	4413      	add	r3, r2
    757a:	b2da      	uxtb	r2, r3
    757c:	f24a 4365 	movw	r3, #42085	; 0xa465
    7580:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7584:	701a      	strb	r2, [r3, #0]
    7586:	f24a 4366 	movw	r3, #42086	; 0xa466
    758a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    758e:	781a      	ldrb	r2, [r3, #0]
    7590:	f24a 4365 	movw	r3, #42085	; 0xa465
    7594:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7598:	781b      	ldrb	r3, [r3, #0]
    759a:	4413      	add	r3, r2
    759c:	b2da      	uxtb	r2, r3
    759e:	f24a 4366 	movw	r3, #42086	; 0xa466
    75a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75a6:	701a      	strb	r2, [r3, #0]
    75a8:	f24a 3361 	movw	r3, #41825	; 0xa361
    75ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75b0:	781b      	ldrb	r3, [r3, #0]
    75b2:	3301      	adds	r3, #1
    75b4:	b2da      	uxtb	r2, r3
    75b6:	f24a 3361 	movw	r3, #41825	; 0xa361
    75ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75be:	701a      	strb	r2, [r3, #0]
    75c0:	f24a 3361 	movw	r3, #41825	; 0xa361
    75c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75c8:	781b      	ldrb	r3, [r3, #0]
    75ca:	2bff      	cmp	r3, #255	; 0xff
    75cc:	d105      	bne.n	75da <send_attitude+0x7ce>
    75ce:	f24a 3361 	movw	r3, #41825	; 0xa361
    75d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75d6:	2200      	movs	r2, #0
    75d8:	701a      	strb	r2, [r3, #0]
    75da:	f24a 3361 	movw	r3, #41825	; 0xa361
    75de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75e2:	781b      	ldrb	r3, [r3, #0]
    75e4:	461a      	mov	r2, r3
    75e6:	f64a 1328 	movw	r3, #43304	; 0xa928
    75ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75ee:	78d9      	ldrb	r1, [r3, #3]
    75f0:	f24a 3364 	movw	r3, #41828	; 0xa364
    75f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75f8:	5499      	strb	r1, [r3, r2]
    75fa:	4b34      	ldr	r3, [pc, #208]	; (76cc <send_attitude+0x8c0>)
    75fc:	781a      	ldrb	r2, [r3, #0]
    75fe:	f24a 4365 	movw	r3, #42085	; 0xa465
    7602:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7606:	781b      	ldrb	r3, [r3, #0]
    7608:	4413      	add	r3, r2
    760a:	b2da      	uxtb	r2, r3
    760c:	f24a 4365 	movw	r3, #42085	; 0xa465
    7610:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7614:	701a      	strb	r2, [r3, #0]
    7616:	f24a 4366 	movw	r3, #42086	; 0xa466
    761a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    761e:	781a      	ldrb	r2, [r3, #0]
    7620:	f24a 4365 	movw	r3, #42085	; 0xa465
    7624:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7628:	781b      	ldrb	r3, [r3, #0]
    762a:	4413      	add	r3, r2
    762c:	b2da      	uxtb	r2, r3
    762e:	f24a 4366 	movw	r3, #42086	; 0xa466
    7632:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7636:	701a      	strb	r2, [r3, #0]
    7638:	f24a 3361 	movw	r3, #41825	; 0xa361
    763c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7640:	781b      	ldrb	r3, [r3, #0]
    7642:	3301      	adds	r3, #1
    7644:	b2da      	uxtb	r2, r3
    7646:	f24a 3361 	movw	r3, #41825	; 0xa361
    764a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    764e:	701a      	strb	r2, [r3, #0]
    7650:	f24a 3361 	movw	r3, #41825	; 0xa361
    7654:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7658:	781b      	ldrb	r3, [r3, #0]
    765a:	2bff      	cmp	r3, #255	; 0xff
    765c:	d105      	bne.n	766a <send_attitude+0x85e>
    765e:	f24a 3361 	movw	r3, #41825	; 0xa361
    7662:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7666:	2200      	movs	r2, #0
    7668:	701a      	strb	r2, [r3, #0]
    766a:	f24a 3361 	movw	r3, #41825	; 0xa361
    766e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7672:	781b      	ldrb	r3, [r3, #0]
    7674:	461a      	mov	r2, r3
    7676:	f24a 4365 	movw	r3, #42085	; 0xa465
    767a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    767e:	7819      	ldrb	r1, [r3, #0]
    7680:	f24a 3364 	movw	r3, #41828	; 0xa364
    7684:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7688:	5499      	strb	r1, [r3, r2]
    768a:	f24a 3361 	movw	r3, #41825	; 0xa361
    768e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7692:	781b      	ldrb	r3, [r3, #0]
    7694:	3301      	adds	r3, #1
    7696:	b2da      	uxtb	r2, r3
    7698:	f24a 3361 	movw	r3, #41825	; 0xa361
    769c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76a0:	701a      	strb	r2, [r3, #0]
    76a2:	f24a 3361 	movw	r3, #41825	; 0xa361
    76a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76aa:	781b      	ldrb	r3, [r3, #0]
    76ac:	2bff      	cmp	r3, #255	; 0xff
    76ae:	d10f      	bne.n	76d0 <send_attitude+0x8c4>
    76b0:	f24a 3361 	movw	r3, #41825	; 0xa361
    76b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76b8:	2200      	movs	r2, #0
    76ba:	701a      	strb	r2, [r3, #0]
    76bc:	e008      	b.n	76d0 <send_attitude+0x8c4>
    76be:	bf00      	nop
    76c0:	2000a927 	.word	0x2000a927
    76c4:	2000a929 	.word	0x2000a929
    76c8:	2000a92a 	.word	0x2000a92a
    76cc:	2000a92b 	.word	0x2000a92b
    76d0:	f24a 3361 	movw	r3, #41825	; 0xa361
    76d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76d8:	781b      	ldrb	r3, [r3, #0]
    76da:	461a      	mov	r2, r3
    76dc:	f24a 4366 	movw	r3, #42086	; 0xa466
    76e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76e4:	7819      	ldrb	r1, [r3, #0]
    76e6:	f24a 3364 	movw	r3, #41828	; 0xa364
    76ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76ee:	5499      	strb	r1, [r3, r2]
    76f0:	f24a 3361 	movw	r3, #41825	; 0xa361
    76f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76f8:	781b      	ldrb	r3, [r3, #0]
    76fa:	3301      	adds	r3, #1
    76fc:	b2da      	uxtb	r2, r3
    76fe:	f24a 3361 	movw	r3, #41825	; 0xa361
    7702:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7706:	701a      	strb	r2, [r3, #0]
    7708:	f24a 3361 	movw	r3, #41825	; 0xa361
    770c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7710:	781b      	ldrb	r3, [r3, #0]
    7712:	2bff      	cmp	r3, #255	; 0xff
    7714:	d105      	bne.n	7722 <send_attitude+0x916>
    7716:	f24a 3361 	movw	r3, #41825	; 0xa361
    771a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    771e:	2200      	movs	r2, #0
    7720:	701a      	strb	r2, [r3, #0]
    7722:	f242 0339 	movw	r3, #8249	; 0x2039
    7726:	f2c2 0300 	movt	r3, #8192	; 0x2000
    772a:	781b      	ldrb	r3, [r3, #0]
    772c:	b2db      	uxtb	r3, r3
    772e:	f003 0310 	and.w	r3, r3, #16
    7732:	2b00      	cmp	r3, #0
    7734:	d15a      	bne.n	77ec <send_attitude+0x9e0>
    7736:	f24a 3362 	movw	r3, #41826	; 0xa362
    773a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    773e:	781b      	ldrb	r3, [r3, #0]
    7740:	b2db      	uxtb	r3, r3
    7742:	461a      	mov	r2, r3
    7744:	f24a 3364 	movw	r3, #41828	; 0xa364
    7748:	f2c2 0300 	movt	r3, #8192	; 0x2000
    774c:	5c9a      	ldrb	r2, [r3, r2]
    774e:	f24a 4363 	movw	r3, #42083	; 0xa463
    7752:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7756:	701a      	strb	r2, [r3, #0]
    7758:	f24a 4364 	movw	r3, #42084	; 0xa464
    775c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7760:	2200      	movs	r2, #0
    7762:	701a      	strb	r2, [r3, #0]
    7764:	f24a 3362 	movw	r3, #41826	; 0xa362
    7768:	f2c2 0300 	movt	r3, #8192	; 0x2000
    776c:	781b      	ldrb	r3, [r3, #0]
    776e:	b2db      	uxtb	r3, r3
    7770:	3301      	adds	r3, #1
    7772:	b2da      	uxtb	r2, r3
    7774:	f24a 3362 	movw	r3, #41826	; 0xa362
    7778:	f2c2 0300 	movt	r3, #8192	; 0x2000
    777c:	701a      	strb	r2, [r3, #0]
    777e:	f24a 3362 	movw	r3, #41826	; 0xa362
    7782:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7786:	781b      	ldrb	r3, [r3, #0]
    7788:	b2db      	uxtb	r3, r3
    778a:	2bff      	cmp	r3, #255	; 0xff
    778c:	d105      	bne.n	779a <send_attitude+0x98e>
    778e:	f24a 3362 	movw	r3, #41826	; 0xa362
    7792:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7796:	2200      	movs	r2, #0
    7798:	701a      	strb	r2, [r3, #0]
    779a:	f242 0338 	movw	r3, #8248	; 0x2038
    779e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77a2:	f242 0238 	movw	r2, #8248	; 0x2038
    77a6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    77aa:	7812      	ldrb	r2, [r2, #0]
    77ac:	b2d2      	uxtb	r2, r2
    77ae:	f042 0201 	orr.w	r2, r2, #1
    77b2:	b2d2      	uxtb	r2, r2
    77b4:	701a      	strb	r2, [r3, #0]
    77b6:	f242 0339 	movw	r3, #8249	; 0x2039
    77ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77be:	f242 0239 	movw	r2, #8249	; 0x2039
    77c2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    77c6:	7812      	ldrb	r2, [r2, #0]
    77c8:	b2d2      	uxtb	r2, r2
    77ca:	f042 0210 	orr.w	r2, r2, #16
    77ce:	b2d2      	uxtb	r2, r2
    77d0:	701a      	strb	r2, [r3, #0]
    77d2:	e00b      	b.n	77ec <send_attitude+0x9e0>
    77d4:	f24a 3360 	movw	r3, #41824	; 0xa360
    77d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77dc:	781b      	ldrb	r3, [r3, #0]
    77de:	3301      	adds	r3, #1
    77e0:	b2da      	uxtb	r2, r3
    77e2:	f24a 3360 	movw	r3, #41824	; 0xa360
    77e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77ea:	701a      	strb	r2, [r3, #0]
  }
}
    77ec:	46bd      	mov	sp, r7
    77ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    77f2:	4770      	bx	lr

000077f4 <send_adc>:
  
void send_adc(void){  //500ms
    77f4:	b480      	push	{r7}
    77f6:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 5 == 1) PERIODIC_SEND_ADC();}
    77f8:	f24a 3359 	movw	r3, #41817	; 0xa359
    77fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7800:	781a      	ldrb	r2, [r3, #0]
    7802:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    7806:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    780a:	fba3 1302 	umull	r1, r3, r3, r2
    780e:	0899      	lsrs	r1, r3, #2
    7810:	460b      	mov	r3, r1
    7812:	009b      	lsls	r3, r3, #2
    7814:	440b      	add	r3, r1
    7816:	1ad3      	subs	r3, r2, r3
    7818:	b2db      	uxtb	r3, r3
    781a:	2b01      	cmp	r3, #1
    781c:	f040 8269 	bne.w	7cf2 <send_adc+0x4fe>
    7820:	f24a 3361 	movw	r3, #41825	; 0xa361
    7824:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7828:	781a      	ldrb	r2, [r3, #0]
    782a:	f24a 3362 	movw	r3, #41826	; 0xa362
    782e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7832:	781b      	ldrb	r3, [r3, #0]
    7834:	b2db      	uxtb	r3, r3
    7836:	429a      	cmp	r2, r3
    7838:	d313      	bcc.n	7862 <send_adc+0x6e>
    783a:	f24a 3362 	movw	r3, #41826	; 0xa362
    783e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7842:	781b      	ldrb	r3, [r3, #0]
    7844:	b2db      	uxtb	r3, r3
    7846:	461a      	mov	r2, r3
    7848:	f24a 3361 	movw	r3, #41825	; 0xa361
    784c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7850:	781b      	ldrb	r3, [r3, #0]
    7852:	1ad3      	subs	r3, r2, r3
    7854:	33ff      	adds	r3, #255	; 0xff
    7856:	2b08      	cmp	r3, #8
    7858:	bfd4      	ite	le
    785a:	2300      	movle	r3, #0
    785c:	2301      	movgt	r3, #1
    785e:	b2db      	uxtb	r3, r3
    7860:	e011      	b.n	7886 <send_adc+0x92>
    7862:	f24a 3362 	movw	r3, #41826	; 0xa362
    7866:	f2c2 0300 	movt	r3, #8192	; 0x2000
    786a:	781b      	ldrb	r3, [r3, #0]
    786c:	b2db      	uxtb	r3, r3
    786e:	461a      	mov	r2, r3
    7870:	f24a 3361 	movw	r3, #41825	; 0xa361
    7874:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7878:	781b      	ldrb	r3, [r3, #0]
    787a:	1ad3      	subs	r3, r2, r3
    787c:	2b08      	cmp	r3, #8
    787e:	bfd4      	ite	le
    7880:	2300      	movle	r3, #0
    7882:	2301      	movgt	r3, #1
    7884:	b2db      	uxtb	r3, r3
    7886:	2b00      	cmp	r3, #0
    7888:	f000 8227 	beq.w	7cda <send_adc+0x4e6>
    788c:	f24a 3361 	movw	r3, #41825	; 0xa361
    7890:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7894:	781b      	ldrb	r3, [r3, #0]
    7896:	461a      	mov	r2, r3
    7898:	f24a 3364 	movw	r3, #41828	; 0xa364
    789c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78a0:	2105      	movs	r1, #5
    78a2:	5499      	strb	r1, [r3, r2]
    78a4:	f24a 3361 	movw	r3, #41825	; 0xa361
    78a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78ac:	781b      	ldrb	r3, [r3, #0]
    78ae:	3301      	adds	r3, #1
    78b0:	b2da      	uxtb	r2, r3
    78b2:	f24a 3361 	movw	r3, #41825	; 0xa361
    78b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78ba:	701a      	strb	r2, [r3, #0]
    78bc:	f24a 3361 	movw	r3, #41825	; 0xa361
    78c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78c4:	781b      	ldrb	r3, [r3, #0]
    78c6:	2bff      	cmp	r3, #255	; 0xff
    78c8:	d105      	bne.n	78d6 <send_adc+0xe2>
    78ca:	f24a 3361 	movw	r3, #41825	; 0xa361
    78ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78d2:	2200      	movs	r2, #0
    78d4:	701a      	strb	r2, [r3, #0]
    78d6:	f24a 3361 	movw	r3, #41825	; 0xa361
    78da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78de:	781b      	ldrb	r3, [r3, #0]
    78e0:	461a      	mov	r2, r3
    78e2:	f24a 3364 	movw	r3, #41828	; 0xa364
    78e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78ea:	2107      	movs	r1, #7
    78ec:	5499      	strb	r1, [r3, r2]
    78ee:	f24a 3361 	movw	r3, #41825	; 0xa361
    78f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78f6:	781b      	ldrb	r3, [r3, #0]
    78f8:	3301      	adds	r3, #1
    78fa:	b2da      	uxtb	r2, r3
    78fc:	f24a 3361 	movw	r3, #41825	; 0xa361
    7900:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7904:	701a      	strb	r2, [r3, #0]
    7906:	f24a 3361 	movw	r3, #41825	; 0xa361
    790a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    790e:	781b      	ldrb	r3, [r3, #0]
    7910:	2bff      	cmp	r3, #255	; 0xff
    7912:	d105      	bne.n	7920 <send_adc+0x12c>
    7914:	f24a 3361 	movw	r3, #41825	; 0xa361
    7918:	f2c2 0300 	movt	r3, #8192	; 0x2000
    791c:	2200      	movs	r2, #0
    791e:	701a      	strb	r2, [r3, #0]
    7920:	f24a 4365 	movw	r3, #42085	; 0xa465
    7924:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7928:	2207      	movs	r2, #7
    792a:	701a      	strb	r2, [r3, #0]
    792c:	f24a 4366 	movw	r3, #42086	; 0xa466
    7930:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7934:	2207      	movs	r2, #7
    7936:	701a      	strb	r2, [r3, #0]
    7938:	f24a 3361 	movw	r3, #41825	; 0xa361
    793c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7940:	781b      	ldrb	r3, [r3, #0]
    7942:	461a      	mov	r2, r3
    7944:	f24a 6300 	movw	r3, #42496	; 0xa600
    7948:	f2c2 0300 	movt	r3, #8192	; 0x2000
    794c:	7819      	ldrb	r1, [r3, #0]
    794e:	f24a 3364 	movw	r3, #41828	; 0xa364
    7952:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7956:	5499      	strb	r1, [r3, r2]
    7958:	f24a 6300 	movw	r3, #42496	; 0xa600
    795c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7960:	781a      	ldrb	r2, [r3, #0]
    7962:	f24a 4365 	movw	r3, #42085	; 0xa465
    7966:	f2c2 0300 	movt	r3, #8192	; 0x2000
    796a:	781b      	ldrb	r3, [r3, #0]
    796c:	4413      	add	r3, r2
    796e:	b2da      	uxtb	r2, r3
    7970:	f24a 4365 	movw	r3, #42085	; 0xa465
    7974:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7978:	701a      	strb	r2, [r3, #0]
    797a:	f24a 4366 	movw	r3, #42086	; 0xa466
    797e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7982:	781a      	ldrb	r2, [r3, #0]
    7984:	f24a 4365 	movw	r3, #42085	; 0xa465
    7988:	f2c2 0300 	movt	r3, #8192	; 0x2000
    798c:	781b      	ldrb	r3, [r3, #0]
    798e:	4413      	add	r3, r2
    7990:	b2da      	uxtb	r2, r3
    7992:	f24a 4366 	movw	r3, #42086	; 0xa466
    7996:	f2c2 0300 	movt	r3, #8192	; 0x2000
    799a:	701a      	strb	r2, [r3, #0]
    799c:	f24a 3361 	movw	r3, #41825	; 0xa361
    79a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79a4:	781b      	ldrb	r3, [r3, #0]
    79a6:	3301      	adds	r3, #1
    79a8:	b2da      	uxtb	r2, r3
    79aa:	f24a 3361 	movw	r3, #41825	; 0xa361
    79ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79b2:	701a      	strb	r2, [r3, #0]
    79b4:	f24a 3361 	movw	r3, #41825	; 0xa361
    79b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79bc:	781b      	ldrb	r3, [r3, #0]
    79be:	2bff      	cmp	r3, #255	; 0xff
    79c0:	d105      	bne.n	79ce <send_adc+0x1da>
    79c2:	f24a 3361 	movw	r3, #41825	; 0xa361
    79c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79ca:	2200      	movs	r2, #0
    79cc:	701a      	strb	r2, [r3, #0]
    79ce:	f24a 3361 	movw	r3, #41825	; 0xa361
    79d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79d6:	781b      	ldrb	r3, [r3, #0]
    79d8:	461a      	mov	r2, r3
    79da:	f24a 6300 	movw	r3, #42496	; 0xa600
    79de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79e2:	7859      	ldrb	r1, [r3, #1]
    79e4:	f24a 3364 	movw	r3, #41828	; 0xa364
    79e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79ec:	5499      	strb	r1, [r3, r2]
    79ee:	4bc3      	ldr	r3, [pc, #780]	; (7cfc <send_adc+0x508>)
    79f0:	781a      	ldrb	r2, [r3, #0]
    79f2:	f24a 4365 	movw	r3, #42085	; 0xa465
    79f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79fa:	781b      	ldrb	r3, [r3, #0]
    79fc:	4413      	add	r3, r2
    79fe:	b2da      	uxtb	r2, r3
    7a00:	f24a 4365 	movw	r3, #42085	; 0xa465
    7a04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a08:	701a      	strb	r2, [r3, #0]
    7a0a:	f24a 4366 	movw	r3, #42086	; 0xa466
    7a0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a12:	781a      	ldrb	r2, [r3, #0]
    7a14:	f24a 4365 	movw	r3, #42085	; 0xa465
    7a18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a1c:	781b      	ldrb	r3, [r3, #0]
    7a1e:	4413      	add	r3, r2
    7a20:	b2da      	uxtb	r2, r3
    7a22:	f24a 4366 	movw	r3, #42086	; 0xa466
    7a26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a2a:	701a      	strb	r2, [r3, #0]
    7a2c:	f24a 3361 	movw	r3, #41825	; 0xa361
    7a30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a34:	781b      	ldrb	r3, [r3, #0]
    7a36:	3301      	adds	r3, #1
    7a38:	b2da      	uxtb	r2, r3
    7a3a:	f24a 3361 	movw	r3, #41825	; 0xa361
    7a3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a42:	701a      	strb	r2, [r3, #0]
    7a44:	f24a 3361 	movw	r3, #41825	; 0xa361
    7a48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a4c:	781b      	ldrb	r3, [r3, #0]
    7a4e:	2bff      	cmp	r3, #255	; 0xff
    7a50:	d105      	bne.n	7a5e <send_adc+0x26a>
    7a52:	f24a 3361 	movw	r3, #41825	; 0xa361
    7a56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a5a:	2200      	movs	r2, #0
    7a5c:	701a      	strb	r2, [r3, #0]
    7a5e:	f24a 3361 	movw	r3, #41825	; 0xa361
    7a62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a66:	781b      	ldrb	r3, [r3, #0]
    7a68:	461a      	mov	r2, r3
    7a6a:	f24a 6302 	movw	r3, #42498	; 0xa602
    7a6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a72:	7819      	ldrb	r1, [r3, #0]
    7a74:	f24a 3364 	movw	r3, #41828	; 0xa364
    7a78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a7c:	5499      	strb	r1, [r3, r2]
    7a7e:	f24a 6302 	movw	r3, #42498	; 0xa602
    7a82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a86:	781a      	ldrb	r2, [r3, #0]
    7a88:	f24a 4365 	movw	r3, #42085	; 0xa465
    7a8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a90:	781b      	ldrb	r3, [r3, #0]
    7a92:	4413      	add	r3, r2
    7a94:	b2da      	uxtb	r2, r3
    7a96:	f24a 4365 	movw	r3, #42085	; 0xa465
    7a9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a9e:	701a      	strb	r2, [r3, #0]
    7aa0:	f24a 4366 	movw	r3, #42086	; 0xa466
    7aa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7aa8:	781a      	ldrb	r2, [r3, #0]
    7aaa:	f24a 4365 	movw	r3, #42085	; 0xa465
    7aae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ab2:	781b      	ldrb	r3, [r3, #0]
    7ab4:	4413      	add	r3, r2
    7ab6:	b2da      	uxtb	r2, r3
    7ab8:	f24a 4366 	movw	r3, #42086	; 0xa466
    7abc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ac0:	701a      	strb	r2, [r3, #0]
    7ac2:	f24a 3361 	movw	r3, #41825	; 0xa361
    7ac6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7aca:	781b      	ldrb	r3, [r3, #0]
    7acc:	3301      	adds	r3, #1
    7ace:	b2da      	uxtb	r2, r3
    7ad0:	f24a 3361 	movw	r3, #41825	; 0xa361
    7ad4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ad8:	701a      	strb	r2, [r3, #0]
    7ada:	f24a 3361 	movw	r3, #41825	; 0xa361
    7ade:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ae2:	781b      	ldrb	r3, [r3, #0]
    7ae4:	2bff      	cmp	r3, #255	; 0xff
    7ae6:	d105      	bne.n	7af4 <send_adc+0x300>
    7ae8:	f24a 3361 	movw	r3, #41825	; 0xa361
    7aec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7af0:	2200      	movs	r2, #0
    7af2:	701a      	strb	r2, [r3, #0]
    7af4:	f24a 3361 	movw	r3, #41825	; 0xa361
    7af8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7afc:	781b      	ldrb	r3, [r3, #0]
    7afe:	461a      	mov	r2, r3
    7b00:	f24a 6302 	movw	r3, #42498	; 0xa602
    7b04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b08:	7859      	ldrb	r1, [r3, #1]
    7b0a:	f24a 3364 	movw	r3, #41828	; 0xa364
    7b0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b12:	5499      	strb	r1, [r3, r2]
    7b14:	4b7a      	ldr	r3, [pc, #488]	; (7d00 <send_adc+0x50c>)
    7b16:	781a      	ldrb	r2, [r3, #0]
    7b18:	f24a 4365 	movw	r3, #42085	; 0xa465
    7b1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b20:	781b      	ldrb	r3, [r3, #0]
    7b22:	4413      	add	r3, r2
    7b24:	b2da      	uxtb	r2, r3
    7b26:	f24a 4365 	movw	r3, #42085	; 0xa465
    7b2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b2e:	701a      	strb	r2, [r3, #0]
    7b30:	f24a 4366 	movw	r3, #42086	; 0xa466
    7b34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b38:	781a      	ldrb	r2, [r3, #0]
    7b3a:	f24a 4365 	movw	r3, #42085	; 0xa465
    7b3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b42:	781b      	ldrb	r3, [r3, #0]
    7b44:	4413      	add	r3, r2
    7b46:	b2da      	uxtb	r2, r3
    7b48:	f24a 4366 	movw	r3, #42086	; 0xa466
    7b4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b50:	701a      	strb	r2, [r3, #0]
    7b52:	f24a 3361 	movw	r3, #41825	; 0xa361
    7b56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b5a:	781b      	ldrb	r3, [r3, #0]
    7b5c:	3301      	adds	r3, #1
    7b5e:	b2da      	uxtb	r2, r3
    7b60:	f24a 3361 	movw	r3, #41825	; 0xa361
    7b64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b68:	701a      	strb	r2, [r3, #0]
    7b6a:	f24a 3361 	movw	r3, #41825	; 0xa361
    7b6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b72:	781b      	ldrb	r3, [r3, #0]
    7b74:	2bff      	cmp	r3, #255	; 0xff
    7b76:	d105      	bne.n	7b84 <send_adc+0x390>
    7b78:	f24a 3361 	movw	r3, #41825	; 0xa361
    7b7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b80:	2200      	movs	r2, #0
    7b82:	701a      	strb	r2, [r3, #0]
    7b84:	f24a 3361 	movw	r3, #41825	; 0xa361
    7b88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b8c:	781b      	ldrb	r3, [r3, #0]
    7b8e:	461a      	mov	r2, r3
    7b90:	f24a 4365 	movw	r3, #42085	; 0xa465
    7b94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b98:	7819      	ldrb	r1, [r3, #0]
    7b9a:	f24a 3364 	movw	r3, #41828	; 0xa364
    7b9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ba2:	5499      	strb	r1, [r3, r2]
    7ba4:	f24a 3361 	movw	r3, #41825	; 0xa361
    7ba8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7bac:	781b      	ldrb	r3, [r3, #0]
    7bae:	3301      	adds	r3, #1
    7bb0:	b2da      	uxtb	r2, r3
    7bb2:	f24a 3361 	movw	r3, #41825	; 0xa361
    7bb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7bba:	701a      	strb	r2, [r3, #0]
    7bbc:	f24a 3361 	movw	r3, #41825	; 0xa361
    7bc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7bc4:	781b      	ldrb	r3, [r3, #0]
    7bc6:	2bff      	cmp	r3, #255	; 0xff
    7bc8:	d105      	bne.n	7bd6 <send_adc+0x3e2>
    7bca:	f24a 3361 	movw	r3, #41825	; 0xa361
    7bce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7bd2:	2200      	movs	r2, #0
    7bd4:	701a      	strb	r2, [r3, #0]
    7bd6:	f24a 3361 	movw	r3, #41825	; 0xa361
    7bda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7bde:	781b      	ldrb	r3, [r3, #0]
    7be0:	461a      	mov	r2, r3
    7be2:	f24a 4366 	movw	r3, #42086	; 0xa466
    7be6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7bea:	7819      	ldrb	r1, [r3, #0]
    7bec:	f24a 3364 	movw	r3, #41828	; 0xa364
    7bf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7bf4:	5499      	strb	r1, [r3, r2]
    7bf6:	f24a 3361 	movw	r3, #41825	; 0xa361
    7bfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7bfe:	781b      	ldrb	r3, [r3, #0]
    7c00:	3301      	adds	r3, #1
    7c02:	b2da      	uxtb	r2, r3
    7c04:	f24a 3361 	movw	r3, #41825	; 0xa361
    7c08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c0c:	701a      	strb	r2, [r3, #0]
    7c0e:	f24a 3361 	movw	r3, #41825	; 0xa361
    7c12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c16:	781b      	ldrb	r3, [r3, #0]
    7c18:	2bff      	cmp	r3, #255	; 0xff
    7c1a:	d105      	bne.n	7c28 <send_adc+0x434>
    7c1c:	f24a 3361 	movw	r3, #41825	; 0xa361
    7c20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c24:	2200      	movs	r2, #0
    7c26:	701a      	strb	r2, [r3, #0]
    7c28:	f242 0339 	movw	r3, #8249	; 0x2039
    7c2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c30:	781b      	ldrb	r3, [r3, #0]
    7c32:	b2db      	uxtb	r3, r3
    7c34:	f003 0310 	and.w	r3, r3, #16
    7c38:	2b00      	cmp	r3, #0
    7c3a:	d15a      	bne.n	7cf2 <send_adc+0x4fe>
    7c3c:	f24a 3362 	movw	r3, #41826	; 0xa362
    7c40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c44:	781b      	ldrb	r3, [r3, #0]
    7c46:	b2db      	uxtb	r3, r3
    7c48:	461a      	mov	r2, r3
    7c4a:	f24a 3364 	movw	r3, #41828	; 0xa364
    7c4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c52:	5c9a      	ldrb	r2, [r3, r2]
    7c54:	f24a 4363 	movw	r3, #42083	; 0xa463
    7c58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c5c:	701a      	strb	r2, [r3, #0]
    7c5e:	f24a 4364 	movw	r3, #42084	; 0xa464
    7c62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c66:	2200      	movs	r2, #0
    7c68:	701a      	strb	r2, [r3, #0]
    7c6a:	f24a 3362 	movw	r3, #41826	; 0xa362
    7c6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c72:	781b      	ldrb	r3, [r3, #0]
    7c74:	b2db      	uxtb	r3, r3
    7c76:	3301      	adds	r3, #1
    7c78:	b2da      	uxtb	r2, r3
    7c7a:	f24a 3362 	movw	r3, #41826	; 0xa362
    7c7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c82:	701a      	strb	r2, [r3, #0]
    7c84:	f24a 3362 	movw	r3, #41826	; 0xa362
    7c88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c8c:	781b      	ldrb	r3, [r3, #0]
    7c8e:	b2db      	uxtb	r3, r3
    7c90:	2bff      	cmp	r3, #255	; 0xff
    7c92:	d105      	bne.n	7ca0 <send_adc+0x4ac>
    7c94:	f24a 3362 	movw	r3, #41826	; 0xa362
    7c98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c9c:	2200      	movs	r2, #0
    7c9e:	701a      	strb	r2, [r3, #0]
    7ca0:	f242 0338 	movw	r3, #8248	; 0x2038
    7ca4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ca8:	f242 0238 	movw	r2, #8248	; 0x2038
    7cac:	f2c2 0200 	movt	r2, #8192	; 0x2000
    7cb0:	7812      	ldrb	r2, [r2, #0]
    7cb2:	b2d2      	uxtb	r2, r2
    7cb4:	f042 0201 	orr.w	r2, r2, #1
    7cb8:	b2d2      	uxtb	r2, r2
    7cba:	701a      	strb	r2, [r3, #0]
    7cbc:	f242 0339 	movw	r3, #8249	; 0x2039
    7cc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7cc4:	f242 0239 	movw	r2, #8249	; 0x2039
    7cc8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    7ccc:	7812      	ldrb	r2, [r2, #0]
    7cce:	b2d2      	uxtb	r2, r2
    7cd0:	f042 0210 	orr.w	r2, r2, #16
    7cd4:	b2d2      	uxtb	r2, r2
    7cd6:	701a      	strb	r2, [r3, #0]
    7cd8:	e00b      	b.n	7cf2 <send_adc+0x4fe>
    7cda:	f24a 3360 	movw	r3, #41824	; 0xa360
    7cde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ce2:	781b      	ldrb	r3, [r3, #0]
    7ce4:	3301      	adds	r3, #1
    7ce6:	b2da      	uxtb	r2, r3
    7ce8:	f24a 3360 	movw	r3, #41824	; 0xa360
    7cec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7cf0:	701a      	strb	r2, [r3, #0]
}
    7cf2:	46bd      	mov	sp, r7
    7cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
    7cf8:	4770      	bx	lr
    7cfa:	bf00      	nop
    7cfc:	2000a601 	.word	0x2000a601
    7d00:	2000a603 	.word	0x2000a603

00007d04 <send_settings>:
void send_settings(void){ //500ms
    7d04:	b480      	push	{r7}
    7d06:	af00      	add	r7, sp, #0
  //if(!boot)
  {if (count % 5 == 2) PERIODIC_SEND_SETTINGS();}
    7d08:	f24a 3359 	movw	r3, #41817	; 0xa359
    7d0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d10:	781a      	ldrb	r2, [r3, #0]
    7d12:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    7d16:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    7d1a:	fba3 1302 	umull	r1, r3, r3, r2
    7d1e:	0899      	lsrs	r1, r3, #2
    7d20:	460b      	mov	r3, r1
    7d22:	009b      	lsls	r3, r3, #2
    7d24:	440b      	add	r3, r1
    7d26:	1ad3      	subs	r3, r2, r3
    7d28:	b2db      	uxtb	r3, r3
    7d2a:	2b02      	cmp	r3, #2
    7d2c:	f040 83e7 	bne.w	84fe <send_settings+0x7fa>
    7d30:	f64a 1374 	movw	r3, #43380	; 0xa974
    7d34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d38:	781b      	ldrb	r3, [r3, #0]
    7d3a:	2b00      	cmp	r3, #0
    7d3c:	f000 83df 	beq.w	84fe <send_settings+0x7fa>
    7d40:	f24a 3361 	movw	r3, #41825	; 0xa361
    7d44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d48:	781a      	ldrb	r2, [r3, #0]
    7d4a:	f24a 3362 	movw	r3, #41826	; 0xa362
    7d4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d52:	781b      	ldrb	r3, [r3, #0]
    7d54:	b2db      	uxtb	r3, r3
    7d56:	429a      	cmp	r2, r3
    7d58:	d313      	bcc.n	7d82 <send_settings+0x7e>
    7d5a:	f24a 3362 	movw	r3, #41826	; 0xa362
    7d5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d62:	781b      	ldrb	r3, [r3, #0]
    7d64:	b2db      	uxtb	r3, r3
    7d66:	461a      	mov	r2, r3
    7d68:	f24a 3361 	movw	r3, #41825	; 0xa361
    7d6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d70:	781b      	ldrb	r3, [r3, #0]
    7d72:	1ad3      	subs	r3, r2, r3
    7d74:	33ff      	adds	r3, #255	; 0xff
    7d76:	2b0d      	cmp	r3, #13
    7d78:	bfd4      	ite	le
    7d7a:	2300      	movle	r3, #0
    7d7c:	2301      	movgt	r3, #1
    7d7e:	b2db      	uxtb	r3, r3
    7d80:	e011      	b.n	7da6 <send_settings+0xa2>
    7d82:	f24a 3362 	movw	r3, #41826	; 0xa362
    7d86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d8a:	781b      	ldrb	r3, [r3, #0]
    7d8c:	b2db      	uxtb	r3, r3
    7d8e:	461a      	mov	r2, r3
    7d90:	f24a 3361 	movw	r3, #41825	; 0xa361
    7d94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d98:	781b      	ldrb	r3, [r3, #0]
    7d9a:	1ad3      	subs	r3, r2, r3
    7d9c:	2b0d      	cmp	r3, #13
    7d9e:	bfd4      	ite	le
    7da0:	2300      	movle	r3, #0
    7da2:	2301      	movgt	r3, #1
    7da4:	b2db      	uxtb	r3, r3
    7da6:	2b00      	cmp	r3, #0
    7da8:	f000 839d 	beq.w	84e6 <send_settings+0x7e2>
    7dac:	f24a 3361 	movw	r3, #41825	; 0xa361
    7db0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7db4:	781b      	ldrb	r3, [r3, #0]
    7db6:	461a      	mov	r2, r3
    7db8:	f24a 3364 	movw	r3, #41828	; 0xa364
    7dbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7dc0:	2105      	movs	r1, #5
    7dc2:	5499      	strb	r1, [r3, r2]
    7dc4:	f24a 3361 	movw	r3, #41825	; 0xa361
    7dc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7dcc:	781b      	ldrb	r3, [r3, #0]
    7dce:	3301      	adds	r3, #1
    7dd0:	b2da      	uxtb	r2, r3
    7dd2:	f24a 3361 	movw	r3, #41825	; 0xa361
    7dd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7dda:	701a      	strb	r2, [r3, #0]
    7ddc:	f24a 3361 	movw	r3, #41825	; 0xa361
    7de0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7de4:	781b      	ldrb	r3, [r3, #0]
    7de6:	2bff      	cmp	r3, #255	; 0xff
    7de8:	d105      	bne.n	7df6 <send_settings+0xf2>
    7dea:	f24a 3361 	movw	r3, #41825	; 0xa361
    7dee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7df2:	2200      	movs	r2, #0
    7df4:	701a      	strb	r2, [r3, #0]
    7df6:	f24a 3361 	movw	r3, #41825	; 0xa361
    7dfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7dfe:	781b      	ldrb	r3, [r3, #0]
    7e00:	461a      	mov	r2, r3
    7e02:	f24a 3364 	movw	r3, #41828	; 0xa364
    7e06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e0a:	2111      	movs	r1, #17
    7e0c:	5499      	strb	r1, [r3, r2]
    7e0e:	f24a 3361 	movw	r3, #41825	; 0xa361
    7e12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e16:	781b      	ldrb	r3, [r3, #0]
    7e18:	3301      	adds	r3, #1
    7e1a:	b2da      	uxtb	r2, r3
    7e1c:	f24a 3361 	movw	r3, #41825	; 0xa361
    7e20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e24:	701a      	strb	r2, [r3, #0]
    7e26:	f24a 3361 	movw	r3, #41825	; 0xa361
    7e2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e2e:	781b      	ldrb	r3, [r3, #0]
    7e30:	2bff      	cmp	r3, #255	; 0xff
    7e32:	d105      	bne.n	7e40 <send_settings+0x13c>
    7e34:	f24a 3361 	movw	r3, #41825	; 0xa361
    7e38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e3c:	2200      	movs	r2, #0
    7e3e:	701a      	strb	r2, [r3, #0]
    7e40:	f24a 4365 	movw	r3, #42085	; 0xa465
    7e44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e48:	2211      	movs	r2, #17
    7e4a:	701a      	strb	r2, [r3, #0]
    7e4c:	f24a 4366 	movw	r3, #42086	; 0xa466
    7e50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e54:	2211      	movs	r2, #17
    7e56:	701a      	strb	r2, [r3, #0]
    7e58:	f24a 3361 	movw	r3, #41825	; 0xa361
    7e5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e60:	781b      	ldrb	r3, [r3, #0]
    7e62:	461a      	mov	r2, r3
    7e64:	f64a 1374 	movw	r3, #43380	; 0xa974
    7e68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e6c:	7819      	ldrb	r1, [r3, #0]
    7e6e:	f24a 3364 	movw	r3, #41828	; 0xa364
    7e72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e76:	5499      	strb	r1, [r3, r2]
    7e78:	f24a 4365 	movw	r3, #42085	; 0xa465
    7e7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e80:	781a      	ldrb	r2, [r3, #0]
    7e82:	f64a 1374 	movw	r3, #43380	; 0xa974
    7e86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e8a:	781b      	ldrb	r3, [r3, #0]
    7e8c:	4413      	add	r3, r2
    7e8e:	b2da      	uxtb	r2, r3
    7e90:	f24a 4365 	movw	r3, #42085	; 0xa465
    7e94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e98:	701a      	strb	r2, [r3, #0]
    7e9a:	f24a 4366 	movw	r3, #42086	; 0xa466
    7e9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ea2:	781a      	ldrb	r2, [r3, #0]
    7ea4:	f24a 4365 	movw	r3, #42085	; 0xa465
    7ea8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7eac:	781b      	ldrb	r3, [r3, #0]
    7eae:	4413      	add	r3, r2
    7eb0:	b2da      	uxtb	r2, r3
    7eb2:	f24a 4366 	movw	r3, #42086	; 0xa466
    7eb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7eba:	701a      	strb	r2, [r3, #0]
    7ebc:	f24a 3361 	movw	r3, #41825	; 0xa361
    7ec0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ec4:	781b      	ldrb	r3, [r3, #0]
    7ec6:	3301      	adds	r3, #1
    7ec8:	b2da      	uxtb	r2, r3
    7eca:	f24a 3361 	movw	r3, #41825	; 0xa361
    7ece:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ed2:	701a      	strb	r2, [r3, #0]
    7ed4:	f24a 3361 	movw	r3, #41825	; 0xa361
    7ed8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7edc:	781b      	ldrb	r3, [r3, #0]
    7ede:	2bff      	cmp	r3, #255	; 0xff
    7ee0:	d105      	bne.n	7eee <send_settings+0x1ea>
    7ee2:	f24a 3361 	movw	r3, #41825	; 0xa361
    7ee6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7eea:	2200      	movs	r2, #0
    7eec:	701a      	strb	r2, [r3, #0]
    7eee:	f24a 3361 	movw	r3, #41825	; 0xa361
    7ef2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ef6:	781b      	ldrb	r3, [r3, #0]
    7ef8:	461a      	mov	r2, r3
    7efa:	f24a 3350 	movw	r3, #41808	; 0xa350
    7efe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f02:	7819      	ldrb	r1, [r3, #0]
    7f04:	f24a 3364 	movw	r3, #41828	; 0xa364
    7f08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f0c:	5499      	strb	r1, [r3, r2]
    7f0e:	f24a 3350 	movw	r3, #41808	; 0xa350
    7f12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f16:	781a      	ldrb	r2, [r3, #0]
    7f18:	f24a 4365 	movw	r3, #42085	; 0xa465
    7f1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f20:	781b      	ldrb	r3, [r3, #0]
    7f22:	4413      	add	r3, r2
    7f24:	b2da      	uxtb	r2, r3
    7f26:	f24a 4365 	movw	r3, #42085	; 0xa465
    7f2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f2e:	701a      	strb	r2, [r3, #0]
    7f30:	f24a 4366 	movw	r3, #42086	; 0xa466
    7f34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f38:	781a      	ldrb	r2, [r3, #0]
    7f3a:	f24a 4365 	movw	r3, #42085	; 0xa465
    7f3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f42:	781b      	ldrb	r3, [r3, #0]
    7f44:	4413      	add	r3, r2
    7f46:	b2da      	uxtb	r2, r3
    7f48:	f24a 4366 	movw	r3, #42086	; 0xa466
    7f4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f50:	701a      	strb	r2, [r3, #0]
    7f52:	f24a 3361 	movw	r3, #41825	; 0xa361
    7f56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f5a:	781b      	ldrb	r3, [r3, #0]
    7f5c:	3301      	adds	r3, #1
    7f5e:	b2da      	uxtb	r2, r3
    7f60:	f24a 3361 	movw	r3, #41825	; 0xa361
    7f64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f68:	701a      	strb	r2, [r3, #0]
    7f6a:	f24a 3361 	movw	r3, #41825	; 0xa361
    7f6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f72:	781b      	ldrb	r3, [r3, #0]
    7f74:	2bff      	cmp	r3, #255	; 0xff
    7f76:	d105      	bne.n	7f84 <send_settings+0x280>
    7f78:	f24a 3361 	movw	r3, #41825	; 0xa361
    7f7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f80:	2200      	movs	r2, #0
    7f82:	701a      	strb	r2, [r3, #0]
    7f84:	f24a 3361 	movw	r3, #41825	; 0xa361
    7f88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f8c:	781b      	ldrb	r3, [r3, #0]
    7f8e:	461a      	mov	r2, r3
    7f90:	f24a 3350 	movw	r3, #41808	; 0xa350
    7f94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f98:	7859      	ldrb	r1, [r3, #1]
    7f9a:	f24a 3364 	movw	r3, #41828	; 0xa364
    7f9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7fa2:	5499      	strb	r1, [r3, r2]
    7fa4:	4bd1      	ldr	r3, [pc, #836]	; (82ec <send_settings+0x5e8>)
    7fa6:	781a      	ldrb	r2, [r3, #0]
    7fa8:	f24a 4365 	movw	r3, #42085	; 0xa465
    7fac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7fb0:	781b      	ldrb	r3, [r3, #0]
    7fb2:	4413      	add	r3, r2
    7fb4:	b2da      	uxtb	r2, r3
    7fb6:	f24a 4365 	movw	r3, #42085	; 0xa465
    7fba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7fbe:	701a      	strb	r2, [r3, #0]
    7fc0:	f24a 4366 	movw	r3, #42086	; 0xa466
    7fc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7fc8:	781a      	ldrb	r2, [r3, #0]
    7fca:	f24a 4365 	movw	r3, #42085	; 0xa465
    7fce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7fd2:	781b      	ldrb	r3, [r3, #0]
    7fd4:	4413      	add	r3, r2
    7fd6:	b2da      	uxtb	r2, r3
    7fd8:	f24a 4366 	movw	r3, #42086	; 0xa466
    7fdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7fe0:	701a      	strb	r2, [r3, #0]
    7fe2:	f24a 3361 	movw	r3, #41825	; 0xa361
    7fe6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7fea:	781b      	ldrb	r3, [r3, #0]
    7fec:	3301      	adds	r3, #1
    7fee:	b2da      	uxtb	r2, r3
    7ff0:	f24a 3361 	movw	r3, #41825	; 0xa361
    7ff4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ff8:	701a      	strb	r2, [r3, #0]
    7ffa:	f24a 3361 	movw	r3, #41825	; 0xa361
    7ffe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8002:	781b      	ldrb	r3, [r3, #0]
    8004:	2bff      	cmp	r3, #255	; 0xff
    8006:	d105      	bne.n	8014 <send_settings+0x310>
    8008:	f24a 3361 	movw	r3, #41825	; 0xa361
    800c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8010:	2200      	movs	r2, #0
    8012:	701a      	strb	r2, [r3, #0]
    8014:	f24a 3361 	movw	r3, #41825	; 0xa361
    8018:	f2c2 0300 	movt	r3, #8192	; 0x2000
    801c:	781b      	ldrb	r3, [r3, #0]
    801e:	461a      	mov	r2, r3
    8020:	f24a 3350 	movw	r3, #41808	; 0xa350
    8024:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8028:	7899      	ldrb	r1, [r3, #2]
    802a:	f24a 3364 	movw	r3, #41828	; 0xa364
    802e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8032:	5499      	strb	r1, [r3, r2]
    8034:	4bae      	ldr	r3, [pc, #696]	; (82f0 <send_settings+0x5ec>)
    8036:	781a      	ldrb	r2, [r3, #0]
    8038:	f24a 4365 	movw	r3, #42085	; 0xa465
    803c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8040:	781b      	ldrb	r3, [r3, #0]
    8042:	4413      	add	r3, r2
    8044:	b2da      	uxtb	r2, r3
    8046:	f24a 4365 	movw	r3, #42085	; 0xa465
    804a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    804e:	701a      	strb	r2, [r3, #0]
    8050:	f24a 4366 	movw	r3, #42086	; 0xa466
    8054:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8058:	781a      	ldrb	r2, [r3, #0]
    805a:	f24a 4365 	movw	r3, #42085	; 0xa465
    805e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8062:	781b      	ldrb	r3, [r3, #0]
    8064:	4413      	add	r3, r2
    8066:	b2da      	uxtb	r2, r3
    8068:	f24a 4366 	movw	r3, #42086	; 0xa466
    806c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8070:	701a      	strb	r2, [r3, #0]
    8072:	f24a 3361 	movw	r3, #41825	; 0xa361
    8076:	f2c2 0300 	movt	r3, #8192	; 0x2000
    807a:	781b      	ldrb	r3, [r3, #0]
    807c:	3301      	adds	r3, #1
    807e:	b2da      	uxtb	r2, r3
    8080:	f24a 3361 	movw	r3, #41825	; 0xa361
    8084:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8088:	701a      	strb	r2, [r3, #0]
    808a:	f24a 3361 	movw	r3, #41825	; 0xa361
    808e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8092:	781b      	ldrb	r3, [r3, #0]
    8094:	2bff      	cmp	r3, #255	; 0xff
    8096:	d105      	bne.n	80a4 <send_settings+0x3a0>
    8098:	f24a 3361 	movw	r3, #41825	; 0xa361
    809c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80a0:	2200      	movs	r2, #0
    80a2:	701a      	strb	r2, [r3, #0]
    80a4:	f24a 3361 	movw	r3, #41825	; 0xa361
    80a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80ac:	781b      	ldrb	r3, [r3, #0]
    80ae:	461a      	mov	r2, r3
    80b0:	f24a 3350 	movw	r3, #41808	; 0xa350
    80b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80b8:	78d9      	ldrb	r1, [r3, #3]
    80ba:	f24a 3364 	movw	r3, #41828	; 0xa364
    80be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80c2:	5499      	strb	r1, [r3, r2]
    80c4:	4b8b      	ldr	r3, [pc, #556]	; (82f4 <send_settings+0x5f0>)
    80c6:	781a      	ldrb	r2, [r3, #0]
    80c8:	f24a 4365 	movw	r3, #42085	; 0xa465
    80cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80d0:	781b      	ldrb	r3, [r3, #0]
    80d2:	4413      	add	r3, r2
    80d4:	b2da      	uxtb	r2, r3
    80d6:	f24a 4365 	movw	r3, #42085	; 0xa465
    80da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80de:	701a      	strb	r2, [r3, #0]
    80e0:	f24a 4366 	movw	r3, #42086	; 0xa466
    80e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80e8:	781a      	ldrb	r2, [r3, #0]
    80ea:	f24a 4365 	movw	r3, #42085	; 0xa465
    80ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80f2:	781b      	ldrb	r3, [r3, #0]
    80f4:	4413      	add	r3, r2
    80f6:	b2da      	uxtb	r2, r3
    80f8:	f24a 4366 	movw	r3, #42086	; 0xa466
    80fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8100:	701a      	strb	r2, [r3, #0]
    8102:	f24a 3361 	movw	r3, #41825	; 0xa361
    8106:	f2c2 0300 	movt	r3, #8192	; 0x2000
    810a:	781b      	ldrb	r3, [r3, #0]
    810c:	3301      	adds	r3, #1
    810e:	b2da      	uxtb	r2, r3
    8110:	f24a 3361 	movw	r3, #41825	; 0xa361
    8114:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8118:	701a      	strb	r2, [r3, #0]
    811a:	f24a 3361 	movw	r3, #41825	; 0xa361
    811e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8122:	781b      	ldrb	r3, [r3, #0]
    8124:	2bff      	cmp	r3, #255	; 0xff
    8126:	d105      	bne.n	8134 <send_settings+0x430>
    8128:	f24a 3361 	movw	r3, #41825	; 0xa361
    812c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8130:	2200      	movs	r2, #0
    8132:	701a      	strb	r2, [r3, #0]
    8134:	f24a 3361 	movw	r3, #41825	; 0xa361
    8138:	f2c2 0300 	movt	r3, #8192	; 0x2000
    813c:	781b      	ldrb	r3, [r3, #0]
    813e:	461a      	mov	r2, r3
    8140:	f24a 3354 	movw	r3, #41812	; 0xa354
    8144:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8148:	7819      	ldrb	r1, [r3, #0]
    814a:	f24a 3364 	movw	r3, #41828	; 0xa364
    814e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8152:	5499      	strb	r1, [r3, r2]
    8154:	f24a 3354 	movw	r3, #41812	; 0xa354
    8158:	f2c2 0300 	movt	r3, #8192	; 0x2000
    815c:	781a      	ldrb	r2, [r3, #0]
    815e:	f24a 4365 	movw	r3, #42085	; 0xa465
    8162:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8166:	781b      	ldrb	r3, [r3, #0]
    8168:	4413      	add	r3, r2
    816a:	b2da      	uxtb	r2, r3
    816c:	f24a 4365 	movw	r3, #42085	; 0xa465
    8170:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8174:	701a      	strb	r2, [r3, #0]
    8176:	f24a 4366 	movw	r3, #42086	; 0xa466
    817a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    817e:	781a      	ldrb	r2, [r3, #0]
    8180:	f24a 4365 	movw	r3, #42085	; 0xa465
    8184:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8188:	781b      	ldrb	r3, [r3, #0]
    818a:	4413      	add	r3, r2
    818c:	b2da      	uxtb	r2, r3
    818e:	f24a 4366 	movw	r3, #42086	; 0xa466
    8192:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8196:	701a      	strb	r2, [r3, #0]
    8198:	f24a 3361 	movw	r3, #41825	; 0xa361
    819c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81a0:	781b      	ldrb	r3, [r3, #0]
    81a2:	3301      	adds	r3, #1
    81a4:	b2da      	uxtb	r2, r3
    81a6:	f24a 3361 	movw	r3, #41825	; 0xa361
    81aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81ae:	701a      	strb	r2, [r3, #0]
    81b0:	f24a 3361 	movw	r3, #41825	; 0xa361
    81b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81b8:	781b      	ldrb	r3, [r3, #0]
    81ba:	2bff      	cmp	r3, #255	; 0xff
    81bc:	d105      	bne.n	81ca <send_settings+0x4c6>
    81be:	f24a 3361 	movw	r3, #41825	; 0xa361
    81c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81c6:	2200      	movs	r2, #0
    81c8:	701a      	strb	r2, [r3, #0]
    81ca:	f24a 3361 	movw	r3, #41825	; 0xa361
    81ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81d2:	781b      	ldrb	r3, [r3, #0]
    81d4:	461a      	mov	r2, r3
    81d6:	f24a 3354 	movw	r3, #41812	; 0xa354
    81da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81de:	7859      	ldrb	r1, [r3, #1]
    81e0:	f24a 3364 	movw	r3, #41828	; 0xa364
    81e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81e8:	5499      	strb	r1, [r3, r2]
    81ea:	4b43      	ldr	r3, [pc, #268]	; (82f8 <send_settings+0x5f4>)
    81ec:	781a      	ldrb	r2, [r3, #0]
    81ee:	f24a 4365 	movw	r3, #42085	; 0xa465
    81f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81f6:	781b      	ldrb	r3, [r3, #0]
    81f8:	4413      	add	r3, r2
    81fa:	b2da      	uxtb	r2, r3
    81fc:	f24a 4365 	movw	r3, #42085	; 0xa465
    8200:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8204:	701a      	strb	r2, [r3, #0]
    8206:	f24a 4366 	movw	r3, #42086	; 0xa466
    820a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    820e:	781a      	ldrb	r2, [r3, #0]
    8210:	f24a 4365 	movw	r3, #42085	; 0xa465
    8214:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8218:	781b      	ldrb	r3, [r3, #0]
    821a:	4413      	add	r3, r2
    821c:	b2da      	uxtb	r2, r3
    821e:	f24a 4366 	movw	r3, #42086	; 0xa466
    8222:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8226:	701a      	strb	r2, [r3, #0]
    8228:	f24a 3361 	movw	r3, #41825	; 0xa361
    822c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8230:	781b      	ldrb	r3, [r3, #0]
    8232:	3301      	adds	r3, #1
    8234:	b2da      	uxtb	r2, r3
    8236:	f24a 3361 	movw	r3, #41825	; 0xa361
    823a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    823e:	701a      	strb	r2, [r3, #0]
    8240:	f24a 3361 	movw	r3, #41825	; 0xa361
    8244:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8248:	781b      	ldrb	r3, [r3, #0]
    824a:	2bff      	cmp	r3, #255	; 0xff
    824c:	d105      	bne.n	825a <send_settings+0x556>
    824e:	f24a 3361 	movw	r3, #41825	; 0xa361
    8252:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8256:	2200      	movs	r2, #0
    8258:	701a      	strb	r2, [r3, #0]
    825a:	f24a 3361 	movw	r3, #41825	; 0xa361
    825e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8262:	781b      	ldrb	r3, [r3, #0]
    8264:	461a      	mov	r2, r3
    8266:	f24a 3354 	movw	r3, #41812	; 0xa354
    826a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    826e:	7899      	ldrb	r1, [r3, #2]
    8270:	f24a 3364 	movw	r3, #41828	; 0xa364
    8274:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8278:	5499      	strb	r1, [r3, r2]
    827a:	4b20      	ldr	r3, [pc, #128]	; (82fc <send_settings+0x5f8>)
    827c:	781a      	ldrb	r2, [r3, #0]
    827e:	f24a 4365 	movw	r3, #42085	; 0xa465
    8282:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8286:	781b      	ldrb	r3, [r3, #0]
    8288:	4413      	add	r3, r2
    828a:	b2da      	uxtb	r2, r3
    828c:	f24a 4365 	movw	r3, #42085	; 0xa465
    8290:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8294:	701a      	strb	r2, [r3, #0]
    8296:	f24a 4366 	movw	r3, #42086	; 0xa466
    829a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    829e:	781a      	ldrb	r2, [r3, #0]
    82a0:	f24a 4365 	movw	r3, #42085	; 0xa465
    82a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82a8:	781b      	ldrb	r3, [r3, #0]
    82aa:	4413      	add	r3, r2
    82ac:	b2da      	uxtb	r2, r3
    82ae:	f24a 4366 	movw	r3, #42086	; 0xa466
    82b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82b6:	701a      	strb	r2, [r3, #0]
    82b8:	f24a 3361 	movw	r3, #41825	; 0xa361
    82bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82c0:	781b      	ldrb	r3, [r3, #0]
    82c2:	3301      	adds	r3, #1
    82c4:	b2da      	uxtb	r2, r3
    82c6:	f24a 3361 	movw	r3, #41825	; 0xa361
    82ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82ce:	701a      	strb	r2, [r3, #0]
    82d0:	f24a 3361 	movw	r3, #41825	; 0xa361
    82d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82d8:	781b      	ldrb	r3, [r3, #0]
    82da:	2bff      	cmp	r3, #255	; 0xff
    82dc:	d110      	bne.n	8300 <send_settings+0x5fc>
    82de:	f24a 3361 	movw	r3, #41825	; 0xa361
    82e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82e6:	2200      	movs	r2, #0
    82e8:	701a      	strb	r2, [r3, #0]
    82ea:	e009      	b.n	8300 <send_settings+0x5fc>
    82ec:	2000a351 	.word	0x2000a351
    82f0:	2000a352 	.word	0x2000a352
    82f4:	2000a353 	.word	0x2000a353
    82f8:	2000a355 	.word	0x2000a355
    82fc:	2000a356 	.word	0x2000a356
    8300:	f24a 3361 	movw	r3, #41825	; 0xa361
    8304:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8308:	781b      	ldrb	r3, [r3, #0]
    830a:	461a      	mov	r2, r3
    830c:	f24a 3354 	movw	r3, #41812	; 0xa354
    8310:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8314:	78d9      	ldrb	r1, [r3, #3]
    8316:	f24a 3364 	movw	r3, #41828	; 0xa364
    831a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    831e:	5499      	strb	r1, [r3, r2]
    8320:	4b79      	ldr	r3, [pc, #484]	; (8508 <send_settings+0x804>)
    8322:	781a      	ldrb	r2, [r3, #0]
    8324:	f24a 4365 	movw	r3, #42085	; 0xa465
    8328:	f2c2 0300 	movt	r3, #8192	; 0x2000
    832c:	781b      	ldrb	r3, [r3, #0]
    832e:	4413      	add	r3, r2
    8330:	b2da      	uxtb	r2, r3
    8332:	f24a 4365 	movw	r3, #42085	; 0xa465
    8336:	f2c2 0300 	movt	r3, #8192	; 0x2000
    833a:	701a      	strb	r2, [r3, #0]
    833c:	f24a 4366 	movw	r3, #42086	; 0xa466
    8340:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8344:	781a      	ldrb	r2, [r3, #0]
    8346:	f24a 4365 	movw	r3, #42085	; 0xa465
    834a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    834e:	781b      	ldrb	r3, [r3, #0]
    8350:	4413      	add	r3, r2
    8352:	b2da      	uxtb	r2, r3
    8354:	f24a 4366 	movw	r3, #42086	; 0xa466
    8358:	f2c2 0300 	movt	r3, #8192	; 0x2000
    835c:	701a      	strb	r2, [r3, #0]
    835e:	f24a 3361 	movw	r3, #41825	; 0xa361
    8362:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8366:	781b      	ldrb	r3, [r3, #0]
    8368:	3301      	adds	r3, #1
    836a:	b2da      	uxtb	r2, r3
    836c:	f24a 3361 	movw	r3, #41825	; 0xa361
    8370:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8374:	701a      	strb	r2, [r3, #0]
    8376:	f24a 3361 	movw	r3, #41825	; 0xa361
    837a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    837e:	781b      	ldrb	r3, [r3, #0]
    8380:	2bff      	cmp	r3, #255	; 0xff
    8382:	d105      	bne.n	8390 <send_settings+0x68c>
    8384:	f24a 3361 	movw	r3, #41825	; 0xa361
    8388:	f2c2 0300 	movt	r3, #8192	; 0x2000
    838c:	2200      	movs	r2, #0
    838e:	701a      	strb	r2, [r3, #0]
    8390:	f24a 3361 	movw	r3, #41825	; 0xa361
    8394:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8398:	781b      	ldrb	r3, [r3, #0]
    839a:	461a      	mov	r2, r3
    839c:	f24a 4365 	movw	r3, #42085	; 0xa465
    83a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83a4:	7819      	ldrb	r1, [r3, #0]
    83a6:	f24a 3364 	movw	r3, #41828	; 0xa364
    83aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83ae:	5499      	strb	r1, [r3, r2]
    83b0:	f24a 3361 	movw	r3, #41825	; 0xa361
    83b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83b8:	781b      	ldrb	r3, [r3, #0]
    83ba:	3301      	adds	r3, #1
    83bc:	b2da      	uxtb	r2, r3
    83be:	f24a 3361 	movw	r3, #41825	; 0xa361
    83c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83c6:	701a      	strb	r2, [r3, #0]
    83c8:	f24a 3361 	movw	r3, #41825	; 0xa361
    83cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83d0:	781b      	ldrb	r3, [r3, #0]
    83d2:	2bff      	cmp	r3, #255	; 0xff
    83d4:	d105      	bne.n	83e2 <send_settings+0x6de>
    83d6:	f24a 3361 	movw	r3, #41825	; 0xa361
    83da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83de:	2200      	movs	r2, #0
    83e0:	701a      	strb	r2, [r3, #0]
    83e2:	f24a 3361 	movw	r3, #41825	; 0xa361
    83e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83ea:	781b      	ldrb	r3, [r3, #0]
    83ec:	461a      	mov	r2, r3
    83ee:	f24a 4366 	movw	r3, #42086	; 0xa466
    83f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83f6:	7819      	ldrb	r1, [r3, #0]
    83f8:	f24a 3364 	movw	r3, #41828	; 0xa364
    83fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8400:	5499      	strb	r1, [r3, r2]
    8402:	f24a 3361 	movw	r3, #41825	; 0xa361
    8406:	f2c2 0300 	movt	r3, #8192	; 0x2000
    840a:	781b      	ldrb	r3, [r3, #0]
    840c:	3301      	adds	r3, #1
    840e:	b2da      	uxtb	r2, r3
    8410:	f24a 3361 	movw	r3, #41825	; 0xa361
    8414:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8418:	701a      	strb	r2, [r3, #0]
    841a:	f24a 3361 	movw	r3, #41825	; 0xa361
    841e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8422:	781b      	ldrb	r3, [r3, #0]
    8424:	2bff      	cmp	r3, #255	; 0xff
    8426:	d105      	bne.n	8434 <send_settings+0x730>
    8428:	f24a 3361 	movw	r3, #41825	; 0xa361
    842c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8430:	2200      	movs	r2, #0
    8432:	701a      	strb	r2, [r3, #0]
    8434:	f242 0339 	movw	r3, #8249	; 0x2039
    8438:	f2c2 0300 	movt	r3, #8192	; 0x2000
    843c:	781b      	ldrb	r3, [r3, #0]
    843e:	b2db      	uxtb	r3, r3
    8440:	f003 0310 	and.w	r3, r3, #16
    8444:	2b00      	cmp	r3, #0
    8446:	d15a      	bne.n	84fe <send_settings+0x7fa>
    8448:	f24a 3362 	movw	r3, #41826	; 0xa362
    844c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8450:	781b      	ldrb	r3, [r3, #0]
    8452:	b2db      	uxtb	r3, r3
    8454:	461a      	mov	r2, r3
    8456:	f24a 3364 	movw	r3, #41828	; 0xa364
    845a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    845e:	5c9a      	ldrb	r2, [r3, r2]
    8460:	f24a 4363 	movw	r3, #42083	; 0xa463
    8464:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8468:	701a      	strb	r2, [r3, #0]
    846a:	f24a 4364 	movw	r3, #42084	; 0xa464
    846e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8472:	2200      	movs	r2, #0
    8474:	701a      	strb	r2, [r3, #0]
    8476:	f24a 3362 	movw	r3, #41826	; 0xa362
    847a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    847e:	781b      	ldrb	r3, [r3, #0]
    8480:	b2db      	uxtb	r3, r3
    8482:	3301      	adds	r3, #1
    8484:	b2da      	uxtb	r2, r3
    8486:	f24a 3362 	movw	r3, #41826	; 0xa362
    848a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    848e:	701a      	strb	r2, [r3, #0]
    8490:	f24a 3362 	movw	r3, #41826	; 0xa362
    8494:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8498:	781b      	ldrb	r3, [r3, #0]
    849a:	b2db      	uxtb	r3, r3
    849c:	2bff      	cmp	r3, #255	; 0xff
    849e:	d105      	bne.n	84ac <send_settings+0x7a8>
    84a0:	f24a 3362 	movw	r3, #41826	; 0xa362
    84a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84a8:	2200      	movs	r2, #0
    84aa:	701a      	strb	r2, [r3, #0]
    84ac:	f242 0338 	movw	r3, #8248	; 0x2038
    84b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84b4:	f242 0238 	movw	r2, #8248	; 0x2038
    84b8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    84bc:	7812      	ldrb	r2, [r2, #0]
    84be:	b2d2      	uxtb	r2, r2
    84c0:	f042 0201 	orr.w	r2, r2, #1
    84c4:	b2d2      	uxtb	r2, r2
    84c6:	701a      	strb	r2, [r3, #0]
    84c8:	f242 0339 	movw	r3, #8249	; 0x2039
    84cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84d0:	f242 0239 	movw	r2, #8249	; 0x2039
    84d4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    84d8:	7812      	ldrb	r2, [r2, #0]
    84da:	b2d2      	uxtb	r2, r2
    84dc:	f042 0210 	orr.w	r2, r2, #16
    84e0:	b2d2      	uxtb	r2, r2
    84e2:	701a      	strb	r2, [r3, #0]
    84e4:	e00b      	b.n	84fe <send_settings+0x7fa>
    84e6:	f24a 3360 	movw	r3, #41824	; 0xa360
    84ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84ee:	781b      	ldrb	r3, [r3, #0]
    84f0:	3301      	adds	r3, #1
    84f2:	b2da      	uxtb	r2, r3
    84f4:	f24a 3360 	movw	r3, #41824	; 0xa360
    84f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84fc:	701a      	strb	r2, [r3, #0]
}
    84fe:	46bd      	mov	sp, r7
    8500:	f85d 7b04 	ldr.w	r7, [sp], #4
    8504:	4770      	bx	lr
    8506:	bf00      	nop
    8508:	2000a357 	.word	0x2000a357

0000850c <send_desired>:
void send_desired(void){  //1000ms
    850c:	b480      	push	{r7}
    850e:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 10 == 3) PERIODIC_SEND_DESIRED();}
    8510:	f24a 3359 	movw	r3, #41817	; 0xa359
    8514:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8518:	781a      	ldrb	r2, [r3, #0]
    851a:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    851e:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    8522:	fba3 1302 	umull	r1, r3, r3, r2
    8526:	08d9      	lsrs	r1, r3, #3
    8528:	460b      	mov	r3, r1
    852a:	009b      	lsls	r3, r3, #2
    852c:	440b      	add	r3, r1
    852e:	005b      	lsls	r3, r3, #1
    8530:	1ad3      	subs	r3, r2, r3
    8532:	b2db      	uxtb	r3, r3
    8534:	2b03      	cmp	r3, #3
    8536:	f040 8712 	bne.w	935e <send_desired+0xe52>
    853a:	f24a 3361 	movw	r3, #41825	; 0xa361
    853e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8542:	781a      	ldrb	r2, [r3, #0]
    8544:	f24a 3362 	movw	r3, #41826	; 0xa362
    8548:	f2c2 0300 	movt	r3, #8192	; 0x2000
    854c:	781b      	ldrb	r3, [r3, #0]
    854e:	b2db      	uxtb	r3, r3
    8550:	429a      	cmp	r2, r3
    8552:	d313      	bcc.n	857c <send_desired+0x70>
    8554:	f24a 3362 	movw	r3, #41826	; 0xa362
    8558:	f2c2 0300 	movt	r3, #8192	; 0x2000
    855c:	781b      	ldrb	r3, [r3, #0]
    855e:	b2db      	uxtb	r3, r3
    8560:	461a      	mov	r2, r3
    8562:	f24a 3361 	movw	r3, #41825	; 0xa361
    8566:	f2c2 0300 	movt	r3, #8192	; 0x2000
    856a:	781b      	ldrb	r3, [r3, #0]
    856c:	1ad3      	subs	r3, r2, r3
    856e:	33ff      	adds	r3, #255	; 0xff
    8570:	2b18      	cmp	r3, #24
    8572:	bfd4      	ite	le
    8574:	2300      	movle	r3, #0
    8576:	2301      	movgt	r3, #1
    8578:	b2db      	uxtb	r3, r3
    857a:	e011      	b.n	85a0 <send_desired+0x94>
    857c:	f24a 3362 	movw	r3, #41826	; 0xa362
    8580:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8584:	781b      	ldrb	r3, [r3, #0]
    8586:	b2db      	uxtb	r3, r3
    8588:	461a      	mov	r2, r3
    858a:	f24a 3361 	movw	r3, #41825	; 0xa361
    858e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8592:	781b      	ldrb	r3, [r3, #0]
    8594:	1ad3      	subs	r3, r2, r3
    8596:	2b18      	cmp	r3, #24
    8598:	bfd4      	ite	le
    859a:	2300      	movle	r3, #0
    859c:	2301      	movgt	r3, #1
    859e:	b2db      	uxtb	r3, r3
    85a0:	2b00      	cmp	r3, #0
    85a2:	f000 86d0 	beq.w	9346 <send_desired+0xe3a>
    85a6:	f24a 3361 	movw	r3, #41825	; 0xa361
    85aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85ae:	781b      	ldrb	r3, [r3, #0]
    85b0:	461a      	mov	r2, r3
    85b2:	f24a 3364 	movw	r3, #41828	; 0xa364
    85b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85ba:	2105      	movs	r1, #5
    85bc:	5499      	strb	r1, [r3, r2]
    85be:	f24a 3361 	movw	r3, #41825	; 0xa361
    85c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85c6:	781b      	ldrb	r3, [r3, #0]
    85c8:	3301      	adds	r3, #1
    85ca:	b2da      	uxtb	r2, r3
    85cc:	f24a 3361 	movw	r3, #41825	; 0xa361
    85d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85d4:	701a      	strb	r2, [r3, #0]
    85d6:	f24a 3361 	movw	r3, #41825	; 0xa361
    85da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85de:	781b      	ldrb	r3, [r3, #0]
    85e0:	2bff      	cmp	r3, #255	; 0xff
    85e2:	d105      	bne.n	85f0 <send_desired+0xe4>
    85e4:	f24a 3361 	movw	r3, #41825	; 0xa361
    85e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85ec:	2200      	movs	r2, #0
    85ee:	701a      	strb	r2, [r3, #0]
    85f0:	f24a 3361 	movw	r3, #41825	; 0xa361
    85f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85f8:	781b      	ldrb	r3, [r3, #0]
    85fa:	461a      	mov	r2, r3
    85fc:	f24a 3364 	movw	r3, #41828	; 0xa364
    8600:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8604:	2112      	movs	r1, #18
    8606:	5499      	strb	r1, [r3, r2]
    8608:	f24a 3361 	movw	r3, #41825	; 0xa361
    860c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8610:	781b      	ldrb	r3, [r3, #0]
    8612:	3301      	adds	r3, #1
    8614:	b2da      	uxtb	r2, r3
    8616:	f24a 3361 	movw	r3, #41825	; 0xa361
    861a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    861e:	701a      	strb	r2, [r3, #0]
    8620:	f24a 3361 	movw	r3, #41825	; 0xa361
    8624:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8628:	781b      	ldrb	r3, [r3, #0]
    862a:	2bff      	cmp	r3, #255	; 0xff
    862c:	d105      	bne.n	863a <send_desired+0x12e>
    862e:	f24a 3361 	movw	r3, #41825	; 0xa361
    8632:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8636:	2200      	movs	r2, #0
    8638:	701a      	strb	r2, [r3, #0]
    863a:	f24a 4365 	movw	r3, #42085	; 0xa465
    863e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8642:	2212      	movs	r2, #18
    8644:	701a      	strb	r2, [r3, #0]
    8646:	f24a 4366 	movw	r3, #42086	; 0xa466
    864a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    864e:	2212      	movs	r2, #18
    8650:	701a      	strb	r2, [r3, #0]
    8652:	f24a 3361 	movw	r3, #41825	; 0xa361
    8656:	f2c2 0300 	movt	r3, #8192	; 0x2000
    865a:	781b      	ldrb	r3, [r3, #0]
    865c:	461a      	mov	r2, r3
    865e:	f24a 638c 	movw	r3, #42636	; 0xa68c
    8662:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8666:	7819      	ldrb	r1, [r3, #0]
    8668:	f24a 3364 	movw	r3, #41828	; 0xa364
    866c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8670:	5499      	strb	r1, [r3, r2]
    8672:	f24a 638c 	movw	r3, #42636	; 0xa68c
    8676:	f2c2 0300 	movt	r3, #8192	; 0x2000
    867a:	781a      	ldrb	r2, [r3, #0]
    867c:	f24a 4365 	movw	r3, #42085	; 0xa465
    8680:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8684:	781b      	ldrb	r3, [r3, #0]
    8686:	4413      	add	r3, r2
    8688:	b2da      	uxtb	r2, r3
    868a:	f24a 4365 	movw	r3, #42085	; 0xa465
    868e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8692:	701a      	strb	r2, [r3, #0]
    8694:	f24a 4366 	movw	r3, #42086	; 0xa466
    8698:	f2c2 0300 	movt	r3, #8192	; 0x2000
    869c:	781a      	ldrb	r2, [r3, #0]
    869e:	f24a 4365 	movw	r3, #42085	; 0xa465
    86a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86a6:	781b      	ldrb	r3, [r3, #0]
    86a8:	4413      	add	r3, r2
    86aa:	b2da      	uxtb	r2, r3
    86ac:	f24a 4366 	movw	r3, #42086	; 0xa466
    86b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86b4:	701a      	strb	r2, [r3, #0]
    86b6:	f24a 3361 	movw	r3, #41825	; 0xa361
    86ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86be:	781b      	ldrb	r3, [r3, #0]
    86c0:	3301      	adds	r3, #1
    86c2:	b2da      	uxtb	r2, r3
    86c4:	f24a 3361 	movw	r3, #41825	; 0xa361
    86c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86cc:	701a      	strb	r2, [r3, #0]
    86ce:	f24a 3361 	movw	r3, #41825	; 0xa361
    86d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86d6:	781b      	ldrb	r3, [r3, #0]
    86d8:	2bff      	cmp	r3, #255	; 0xff
    86da:	d105      	bne.n	86e8 <send_desired+0x1dc>
    86dc:	f24a 3361 	movw	r3, #41825	; 0xa361
    86e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86e4:	2200      	movs	r2, #0
    86e6:	701a      	strb	r2, [r3, #0]
    86e8:	f24a 3361 	movw	r3, #41825	; 0xa361
    86ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86f0:	781b      	ldrb	r3, [r3, #0]
    86f2:	461a      	mov	r2, r3
    86f4:	f24a 638c 	movw	r3, #42636	; 0xa68c
    86f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86fc:	7859      	ldrb	r1, [r3, #1]
    86fe:	f24a 3364 	movw	r3, #41828	; 0xa364
    8702:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8706:	5499      	strb	r1, [r3, r2]
    8708:	4bd1      	ldr	r3, [pc, #836]	; (8a50 <send_desired+0x544>)
    870a:	781a      	ldrb	r2, [r3, #0]
    870c:	f24a 4365 	movw	r3, #42085	; 0xa465
    8710:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8714:	781b      	ldrb	r3, [r3, #0]
    8716:	4413      	add	r3, r2
    8718:	b2da      	uxtb	r2, r3
    871a:	f24a 4365 	movw	r3, #42085	; 0xa465
    871e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8722:	701a      	strb	r2, [r3, #0]
    8724:	f24a 4366 	movw	r3, #42086	; 0xa466
    8728:	f2c2 0300 	movt	r3, #8192	; 0x2000
    872c:	781a      	ldrb	r2, [r3, #0]
    872e:	f24a 4365 	movw	r3, #42085	; 0xa465
    8732:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8736:	781b      	ldrb	r3, [r3, #0]
    8738:	4413      	add	r3, r2
    873a:	b2da      	uxtb	r2, r3
    873c:	f24a 4366 	movw	r3, #42086	; 0xa466
    8740:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8744:	701a      	strb	r2, [r3, #0]
    8746:	f24a 3361 	movw	r3, #41825	; 0xa361
    874a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    874e:	781b      	ldrb	r3, [r3, #0]
    8750:	3301      	adds	r3, #1
    8752:	b2da      	uxtb	r2, r3
    8754:	f24a 3361 	movw	r3, #41825	; 0xa361
    8758:	f2c2 0300 	movt	r3, #8192	; 0x2000
    875c:	701a      	strb	r2, [r3, #0]
    875e:	f24a 3361 	movw	r3, #41825	; 0xa361
    8762:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8766:	781b      	ldrb	r3, [r3, #0]
    8768:	2bff      	cmp	r3, #255	; 0xff
    876a:	d105      	bne.n	8778 <send_desired+0x26c>
    876c:	f24a 3361 	movw	r3, #41825	; 0xa361
    8770:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8774:	2200      	movs	r2, #0
    8776:	701a      	strb	r2, [r3, #0]
    8778:	f24a 3361 	movw	r3, #41825	; 0xa361
    877c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8780:	781b      	ldrb	r3, [r3, #0]
    8782:	461a      	mov	r2, r3
    8784:	f24a 638c 	movw	r3, #42636	; 0xa68c
    8788:	f2c2 0300 	movt	r3, #8192	; 0x2000
    878c:	7899      	ldrb	r1, [r3, #2]
    878e:	f24a 3364 	movw	r3, #41828	; 0xa364
    8792:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8796:	5499      	strb	r1, [r3, r2]
    8798:	4bae      	ldr	r3, [pc, #696]	; (8a54 <send_desired+0x548>)
    879a:	781a      	ldrb	r2, [r3, #0]
    879c:	f24a 4365 	movw	r3, #42085	; 0xa465
    87a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87a4:	781b      	ldrb	r3, [r3, #0]
    87a6:	4413      	add	r3, r2
    87a8:	b2da      	uxtb	r2, r3
    87aa:	f24a 4365 	movw	r3, #42085	; 0xa465
    87ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87b2:	701a      	strb	r2, [r3, #0]
    87b4:	f24a 4366 	movw	r3, #42086	; 0xa466
    87b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87bc:	781a      	ldrb	r2, [r3, #0]
    87be:	f24a 4365 	movw	r3, #42085	; 0xa465
    87c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87c6:	781b      	ldrb	r3, [r3, #0]
    87c8:	4413      	add	r3, r2
    87ca:	b2da      	uxtb	r2, r3
    87cc:	f24a 4366 	movw	r3, #42086	; 0xa466
    87d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87d4:	701a      	strb	r2, [r3, #0]
    87d6:	f24a 3361 	movw	r3, #41825	; 0xa361
    87da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87de:	781b      	ldrb	r3, [r3, #0]
    87e0:	3301      	adds	r3, #1
    87e2:	b2da      	uxtb	r2, r3
    87e4:	f24a 3361 	movw	r3, #41825	; 0xa361
    87e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87ec:	701a      	strb	r2, [r3, #0]
    87ee:	f24a 3361 	movw	r3, #41825	; 0xa361
    87f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87f6:	781b      	ldrb	r3, [r3, #0]
    87f8:	2bff      	cmp	r3, #255	; 0xff
    87fa:	d105      	bne.n	8808 <send_desired+0x2fc>
    87fc:	f24a 3361 	movw	r3, #41825	; 0xa361
    8800:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8804:	2200      	movs	r2, #0
    8806:	701a      	strb	r2, [r3, #0]
    8808:	f24a 3361 	movw	r3, #41825	; 0xa361
    880c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8810:	781b      	ldrb	r3, [r3, #0]
    8812:	461a      	mov	r2, r3
    8814:	f24a 638c 	movw	r3, #42636	; 0xa68c
    8818:	f2c2 0300 	movt	r3, #8192	; 0x2000
    881c:	78d9      	ldrb	r1, [r3, #3]
    881e:	f24a 3364 	movw	r3, #41828	; 0xa364
    8822:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8826:	5499      	strb	r1, [r3, r2]
    8828:	4b8b      	ldr	r3, [pc, #556]	; (8a58 <send_desired+0x54c>)
    882a:	781a      	ldrb	r2, [r3, #0]
    882c:	f24a 4365 	movw	r3, #42085	; 0xa465
    8830:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8834:	781b      	ldrb	r3, [r3, #0]
    8836:	4413      	add	r3, r2
    8838:	b2da      	uxtb	r2, r3
    883a:	f24a 4365 	movw	r3, #42085	; 0xa465
    883e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8842:	701a      	strb	r2, [r3, #0]
    8844:	f24a 4366 	movw	r3, #42086	; 0xa466
    8848:	f2c2 0300 	movt	r3, #8192	; 0x2000
    884c:	781a      	ldrb	r2, [r3, #0]
    884e:	f24a 4365 	movw	r3, #42085	; 0xa465
    8852:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8856:	781b      	ldrb	r3, [r3, #0]
    8858:	4413      	add	r3, r2
    885a:	b2da      	uxtb	r2, r3
    885c:	f24a 4366 	movw	r3, #42086	; 0xa466
    8860:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8864:	701a      	strb	r2, [r3, #0]
    8866:	f24a 3361 	movw	r3, #41825	; 0xa361
    886a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    886e:	781b      	ldrb	r3, [r3, #0]
    8870:	3301      	adds	r3, #1
    8872:	b2da      	uxtb	r2, r3
    8874:	f24a 3361 	movw	r3, #41825	; 0xa361
    8878:	f2c2 0300 	movt	r3, #8192	; 0x2000
    887c:	701a      	strb	r2, [r3, #0]
    887e:	f24a 3361 	movw	r3, #41825	; 0xa361
    8882:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8886:	781b      	ldrb	r3, [r3, #0]
    8888:	2bff      	cmp	r3, #255	; 0xff
    888a:	d105      	bne.n	8898 <send_desired+0x38c>
    888c:	f24a 3361 	movw	r3, #41825	; 0xa361
    8890:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8894:	2200      	movs	r2, #0
    8896:	701a      	strb	r2, [r3, #0]
    8898:	f24a 3361 	movw	r3, #41825	; 0xa361
    889c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88a0:	781b      	ldrb	r3, [r3, #0]
    88a2:	461a      	mov	r2, r3
    88a4:	f24a 6390 	movw	r3, #42640	; 0xa690
    88a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88ac:	7819      	ldrb	r1, [r3, #0]
    88ae:	f24a 3364 	movw	r3, #41828	; 0xa364
    88b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88b6:	5499      	strb	r1, [r3, r2]
    88b8:	f24a 6390 	movw	r3, #42640	; 0xa690
    88bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88c0:	781a      	ldrb	r2, [r3, #0]
    88c2:	f24a 4365 	movw	r3, #42085	; 0xa465
    88c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88ca:	781b      	ldrb	r3, [r3, #0]
    88cc:	4413      	add	r3, r2
    88ce:	b2da      	uxtb	r2, r3
    88d0:	f24a 4365 	movw	r3, #42085	; 0xa465
    88d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88d8:	701a      	strb	r2, [r3, #0]
    88da:	f24a 4366 	movw	r3, #42086	; 0xa466
    88de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88e2:	781a      	ldrb	r2, [r3, #0]
    88e4:	f24a 4365 	movw	r3, #42085	; 0xa465
    88e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88ec:	781b      	ldrb	r3, [r3, #0]
    88ee:	4413      	add	r3, r2
    88f0:	b2da      	uxtb	r2, r3
    88f2:	f24a 4366 	movw	r3, #42086	; 0xa466
    88f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88fa:	701a      	strb	r2, [r3, #0]
    88fc:	f24a 3361 	movw	r3, #41825	; 0xa361
    8900:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8904:	781b      	ldrb	r3, [r3, #0]
    8906:	3301      	adds	r3, #1
    8908:	b2da      	uxtb	r2, r3
    890a:	f24a 3361 	movw	r3, #41825	; 0xa361
    890e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8912:	701a      	strb	r2, [r3, #0]
    8914:	f24a 3361 	movw	r3, #41825	; 0xa361
    8918:	f2c2 0300 	movt	r3, #8192	; 0x2000
    891c:	781b      	ldrb	r3, [r3, #0]
    891e:	2bff      	cmp	r3, #255	; 0xff
    8920:	d105      	bne.n	892e <send_desired+0x422>
    8922:	f24a 3361 	movw	r3, #41825	; 0xa361
    8926:	f2c2 0300 	movt	r3, #8192	; 0x2000
    892a:	2200      	movs	r2, #0
    892c:	701a      	strb	r2, [r3, #0]
    892e:	f24a 3361 	movw	r3, #41825	; 0xa361
    8932:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8936:	781b      	ldrb	r3, [r3, #0]
    8938:	461a      	mov	r2, r3
    893a:	f24a 6390 	movw	r3, #42640	; 0xa690
    893e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8942:	7859      	ldrb	r1, [r3, #1]
    8944:	f24a 3364 	movw	r3, #41828	; 0xa364
    8948:	f2c2 0300 	movt	r3, #8192	; 0x2000
    894c:	5499      	strb	r1, [r3, r2]
    894e:	4b43      	ldr	r3, [pc, #268]	; (8a5c <send_desired+0x550>)
    8950:	781a      	ldrb	r2, [r3, #0]
    8952:	f24a 4365 	movw	r3, #42085	; 0xa465
    8956:	f2c2 0300 	movt	r3, #8192	; 0x2000
    895a:	781b      	ldrb	r3, [r3, #0]
    895c:	4413      	add	r3, r2
    895e:	b2da      	uxtb	r2, r3
    8960:	f24a 4365 	movw	r3, #42085	; 0xa465
    8964:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8968:	701a      	strb	r2, [r3, #0]
    896a:	f24a 4366 	movw	r3, #42086	; 0xa466
    896e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8972:	781a      	ldrb	r2, [r3, #0]
    8974:	f24a 4365 	movw	r3, #42085	; 0xa465
    8978:	f2c2 0300 	movt	r3, #8192	; 0x2000
    897c:	781b      	ldrb	r3, [r3, #0]
    897e:	4413      	add	r3, r2
    8980:	b2da      	uxtb	r2, r3
    8982:	f24a 4366 	movw	r3, #42086	; 0xa466
    8986:	f2c2 0300 	movt	r3, #8192	; 0x2000
    898a:	701a      	strb	r2, [r3, #0]
    898c:	f24a 3361 	movw	r3, #41825	; 0xa361
    8990:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8994:	781b      	ldrb	r3, [r3, #0]
    8996:	3301      	adds	r3, #1
    8998:	b2da      	uxtb	r2, r3
    899a:	f24a 3361 	movw	r3, #41825	; 0xa361
    899e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89a2:	701a      	strb	r2, [r3, #0]
    89a4:	f24a 3361 	movw	r3, #41825	; 0xa361
    89a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89ac:	781b      	ldrb	r3, [r3, #0]
    89ae:	2bff      	cmp	r3, #255	; 0xff
    89b0:	d105      	bne.n	89be <send_desired+0x4b2>
    89b2:	f24a 3361 	movw	r3, #41825	; 0xa361
    89b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89ba:	2200      	movs	r2, #0
    89bc:	701a      	strb	r2, [r3, #0]
    89be:	f24a 3361 	movw	r3, #41825	; 0xa361
    89c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89c6:	781b      	ldrb	r3, [r3, #0]
    89c8:	461a      	mov	r2, r3
    89ca:	f24a 6390 	movw	r3, #42640	; 0xa690
    89ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89d2:	7899      	ldrb	r1, [r3, #2]
    89d4:	f24a 3364 	movw	r3, #41828	; 0xa364
    89d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89dc:	5499      	strb	r1, [r3, r2]
    89de:	4b20      	ldr	r3, [pc, #128]	; (8a60 <send_desired+0x554>)
    89e0:	781a      	ldrb	r2, [r3, #0]
    89e2:	f24a 4365 	movw	r3, #42085	; 0xa465
    89e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89ea:	781b      	ldrb	r3, [r3, #0]
    89ec:	4413      	add	r3, r2
    89ee:	b2da      	uxtb	r2, r3
    89f0:	f24a 4365 	movw	r3, #42085	; 0xa465
    89f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89f8:	701a      	strb	r2, [r3, #0]
    89fa:	f24a 4366 	movw	r3, #42086	; 0xa466
    89fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a02:	781a      	ldrb	r2, [r3, #0]
    8a04:	f24a 4365 	movw	r3, #42085	; 0xa465
    8a08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a0c:	781b      	ldrb	r3, [r3, #0]
    8a0e:	4413      	add	r3, r2
    8a10:	b2da      	uxtb	r2, r3
    8a12:	f24a 4366 	movw	r3, #42086	; 0xa466
    8a16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a1a:	701a      	strb	r2, [r3, #0]
    8a1c:	f24a 3361 	movw	r3, #41825	; 0xa361
    8a20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a24:	781b      	ldrb	r3, [r3, #0]
    8a26:	3301      	adds	r3, #1
    8a28:	b2da      	uxtb	r2, r3
    8a2a:	f24a 3361 	movw	r3, #41825	; 0xa361
    8a2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a32:	701a      	strb	r2, [r3, #0]
    8a34:	f24a 3361 	movw	r3, #41825	; 0xa361
    8a38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a3c:	781b      	ldrb	r3, [r3, #0]
    8a3e:	2bff      	cmp	r3, #255	; 0xff
    8a40:	d110      	bne.n	8a64 <send_desired+0x558>
    8a42:	f24a 3361 	movw	r3, #41825	; 0xa361
    8a46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a4a:	2200      	movs	r2, #0
    8a4c:	701a      	strb	r2, [r3, #0]
    8a4e:	e009      	b.n	8a64 <send_desired+0x558>
    8a50:	2000a68d 	.word	0x2000a68d
    8a54:	2000a68e 	.word	0x2000a68e
    8a58:	2000a68f 	.word	0x2000a68f
    8a5c:	2000a691 	.word	0x2000a691
    8a60:	2000a692 	.word	0x2000a692
    8a64:	f24a 3361 	movw	r3, #41825	; 0xa361
    8a68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a6c:	781b      	ldrb	r3, [r3, #0]
    8a6e:	461a      	mov	r2, r3
    8a70:	f24a 6390 	movw	r3, #42640	; 0xa690
    8a74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a78:	78d9      	ldrb	r1, [r3, #3]
    8a7a:	f24a 3364 	movw	r3, #41828	; 0xa364
    8a7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a82:	5499      	strb	r1, [r3, r2]
    8a84:	4bd3      	ldr	r3, [pc, #844]	; (8dd4 <send_desired+0x8c8>)
    8a86:	781a      	ldrb	r2, [r3, #0]
    8a88:	f24a 4365 	movw	r3, #42085	; 0xa465
    8a8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a90:	781b      	ldrb	r3, [r3, #0]
    8a92:	4413      	add	r3, r2
    8a94:	b2da      	uxtb	r2, r3
    8a96:	f24a 4365 	movw	r3, #42085	; 0xa465
    8a9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a9e:	701a      	strb	r2, [r3, #0]
    8aa0:	f24a 4366 	movw	r3, #42086	; 0xa466
    8aa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8aa8:	781a      	ldrb	r2, [r3, #0]
    8aaa:	f24a 4365 	movw	r3, #42085	; 0xa465
    8aae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ab2:	781b      	ldrb	r3, [r3, #0]
    8ab4:	4413      	add	r3, r2
    8ab6:	b2da      	uxtb	r2, r3
    8ab8:	f24a 4366 	movw	r3, #42086	; 0xa466
    8abc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ac0:	701a      	strb	r2, [r3, #0]
    8ac2:	f24a 3361 	movw	r3, #41825	; 0xa361
    8ac6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8aca:	781b      	ldrb	r3, [r3, #0]
    8acc:	3301      	adds	r3, #1
    8ace:	b2da      	uxtb	r2, r3
    8ad0:	f24a 3361 	movw	r3, #41825	; 0xa361
    8ad4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ad8:	701a      	strb	r2, [r3, #0]
    8ada:	f24a 3361 	movw	r3, #41825	; 0xa361
    8ade:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ae2:	781b      	ldrb	r3, [r3, #0]
    8ae4:	2bff      	cmp	r3, #255	; 0xff
    8ae6:	d105      	bne.n	8af4 <send_desired+0x5e8>
    8ae8:	f24a 3361 	movw	r3, #41825	; 0xa361
    8aec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8af0:	2200      	movs	r2, #0
    8af2:	701a      	strb	r2, [r3, #0]
    8af4:	f24a 3361 	movw	r3, #41825	; 0xa361
    8af8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8afc:	781b      	ldrb	r3, [r3, #0]
    8afe:	461a      	mov	r2, r3
    8b00:	f24a 63d8 	movw	r3, #42712	; 0xa6d8
    8b04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b08:	7819      	ldrb	r1, [r3, #0]
    8b0a:	f24a 3364 	movw	r3, #41828	; 0xa364
    8b0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b12:	5499      	strb	r1, [r3, r2]
    8b14:	f24a 63d8 	movw	r3, #42712	; 0xa6d8
    8b18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b1c:	781a      	ldrb	r2, [r3, #0]
    8b1e:	f24a 4365 	movw	r3, #42085	; 0xa465
    8b22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b26:	781b      	ldrb	r3, [r3, #0]
    8b28:	4413      	add	r3, r2
    8b2a:	b2da      	uxtb	r2, r3
    8b2c:	f24a 4365 	movw	r3, #42085	; 0xa465
    8b30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b34:	701a      	strb	r2, [r3, #0]
    8b36:	f24a 4366 	movw	r3, #42086	; 0xa466
    8b3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b3e:	781a      	ldrb	r2, [r3, #0]
    8b40:	f24a 4365 	movw	r3, #42085	; 0xa465
    8b44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b48:	781b      	ldrb	r3, [r3, #0]
    8b4a:	4413      	add	r3, r2
    8b4c:	b2da      	uxtb	r2, r3
    8b4e:	f24a 4366 	movw	r3, #42086	; 0xa466
    8b52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b56:	701a      	strb	r2, [r3, #0]
    8b58:	f24a 3361 	movw	r3, #41825	; 0xa361
    8b5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b60:	781b      	ldrb	r3, [r3, #0]
    8b62:	3301      	adds	r3, #1
    8b64:	b2da      	uxtb	r2, r3
    8b66:	f24a 3361 	movw	r3, #41825	; 0xa361
    8b6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b6e:	701a      	strb	r2, [r3, #0]
    8b70:	f24a 3361 	movw	r3, #41825	; 0xa361
    8b74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b78:	781b      	ldrb	r3, [r3, #0]
    8b7a:	2bff      	cmp	r3, #255	; 0xff
    8b7c:	d105      	bne.n	8b8a <send_desired+0x67e>
    8b7e:	f24a 3361 	movw	r3, #41825	; 0xa361
    8b82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b86:	2200      	movs	r2, #0
    8b88:	701a      	strb	r2, [r3, #0]
    8b8a:	f24a 3361 	movw	r3, #41825	; 0xa361
    8b8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b92:	781b      	ldrb	r3, [r3, #0]
    8b94:	461a      	mov	r2, r3
    8b96:	f24a 63d8 	movw	r3, #42712	; 0xa6d8
    8b9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b9e:	7859      	ldrb	r1, [r3, #1]
    8ba0:	f24a 3364 	movw	r3, #41828	; 0xa364
    8ba4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ba8:	5499      	strb	r1, [r3, r2]
    8baa:	4b8b      	ldr	r3, [pc, #556]	; (8dd8 <send_desired+0x8cc>)
    8bac:	781a      	ldrb	r2, [r3, #0]
    8bae:	f24a 4365 	movw	r3, #42085	; 0xa465
    8bb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8bb6:	781b      	ldrb	r3, [r3, #0]
    8bb8:	4413      	add	r3, r2
    8bba:	b2da      	uxtb	r2, r3
    8bbc:	f24a 4365 	movw	r3, #42085	; 0xa465
    8bc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8bc4:	701a      	strb	r2, [r3, #0]
    8bc6:	f24a 4366 	movw	r3, #42086	; 0xa466
    8bca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8bce:	781a      	ldrb	r2, [r3, #0]
    8bd0:	f24a 4365 	movw	r3, #42085	; 0xa465
    8bd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8bd8:	781b      	ldrb	r3, [r3, #0]
    8bda:	4413      	add	r3, r2
    8bdc:	b2da      	uxtb	r2, r3
    8bde:	f24a 4366 	movw	r3, #42086	; 0xa466
    8be2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8be6:	701a      	strb	r2, [r3, #0]
    8be8:	f24a 3361 	movw	r3, #41825	; 0xa361
    8bec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8bf0:	781b      	ldrb	r3, [r3, #0]
    8bf2:	3301      	adds	r3, #1
    8bf4:	b2da      	uxtb	r2, r3
    8bf6:	f24a 3361 	movw	r3, #41825	; 0xa361
    8bfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8bfe:	701a      	strb	r2, [r3, #0]
    8c00:	f24a 3361 	movw	r3, #41825	; 0xa361
    8c04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c08:	781b      	ldrb	r3, [r3, #0]
    8c0a:	2bff      	cmp	r3, #255	; 0xff
    8c0c:	d105      	bne.n	8c1a <send_desired+0x70e>
    8c0e:	f24a 3361 	movw	r3, #41825	; 0xa361
    8c12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c16:	2200      	movs	r2, #0
    8c18:	701a      	strb	r2, [r3, #0]
    8c1a:	f24a 3361 	movw	r3, #41825	; 0xa361
    8c1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c22:	781b      	ldrb	r3, [r3, #0]
    8c24:	461a      	mov	r2, r3
    8c26:	f24a 63d8 	movw	r3, #42712	; 0xa6d8
    8c2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c2e:	7899      	ldrb	r1, [r3, #2]
    8c30:	f24a 3364 	movw	r3, #41828	; 0xa364
    8c34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c38:	5499      	strb	r1, [r3, r2]
    8c3a:	4b68      	ldr	r3, [pc, #416]	; (8ddc <send_desired+0x8d0>)
    8c3c:	781a      	ldrb	r2, [r3, #0]
    8c3e:	f24a 4365 	movw	r3, #42085	; 0xa465
    8c42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c46:	781b      	ldrb	r3, [r3, #0]
    8c48:	4413      	add	r3, r2
    8c4a:	b2da      	uxtb	r2, r3
    8c4c:	f24a 4365 	movw	r3, #42085	; 0xa465
    8c50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c54:	701a      	strb	r2, [r3, #0]
    8c56:	f24a 4366 	movw	r3, #42086	; 0xa466
    8c5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c5e:	781a      	ldrb	r2, [r3, #0]
    8c60:	f24a 4365 	movw	r3, #42085	; 0xa465
    8c64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c68:	781b      	ldrb	r3, [r3, #0]
    8c6a:	4413      	add	r3, r2
    8c6c:	b2da      	uxtb	r2, r3
    8c6e:	f24a 4366 	movw	r3, #42086	; 0xa466
    8c72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c76:	701a      	strb	r2, [r3, #0]
    8c78:	f24a 3361 	movw	r3, #41825	; 0xa361
    8c7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c80:	781b      	ldrb	r3, [r3, #0]
    8c82:	3301      	adds	r3, #1
    8c84:	b2da      	uxtb	r2, r3
    8c86:	f24a 3361 	movw	r3, #41825	; 0xa361
    8c8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c8e:	701a      	strb	r2, [r3, #0]
    8c90:	f24a 3361 	movw	r3, #41825	; 0xa361
    8c94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c98:	781b      	ldrb	r3, [r3, #0]
    8c9a:	2bff      	cmp	r3, #255	; 0xff
    8c9c:	d105      	bne.n	8caa <send_desired+0x79e>
    8c9e:	f24a 3361 	movw	r3, #41825	; 0xa361
    8ca2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ca6:	2200      	movs	r2, #0
    8ca8:	701a      	strb	r2, [r3, #0]
    8caa:	f24a 3361 	movw	r3, #41825	; 0xa361
    8cae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8cb2:	781b      	ldrb	r3, [r3, #0]
    8cb4:	461a      	mov	r2, r3
    8cb6:	f24a 63d8 	movw	r3, #42712	; 0xa6d8
    8cba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8cbe:	78d9      	ldrb	r1, [r3, #3]
    8cc0:	f24a 3364 	movw	r3, #41828	; 0xa364
    8cc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8cc8:	5499      	strb	r1, [r3, r2]
    8cca:	4b45      	ldr	r3, [pc, #276]	; (8de0 <send_desired+0x8d4>)
    8ccc:	781a      	ldrb	r2, [r3, #0]
    8cce:	f24a 4365 	movw	r3, #42085	; 0xa465
    8cd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8cd6:	781b      	ldrb	r3, [r3, #0]
    8cd8:	4413      	add	r3, r2
    8cda:	b2da      	uxtb	r2, r3
    8cdc:	f24a 4365 	movw	r3, #42085	; 0xa465
    8ce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ce4:	701a      	strb	r2, [r3, #0]
    8ce6:	f24a 4366 	movw	r3, #42086	; 0xa466
    8cea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8cee:	781a      	ldrb	r2, [r3, #0]
    8cf0:	f24a 4365 	movw	r3, #42085	; 0xa465
    8cf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8cf8:	781b      	ldrb	r3, [r3, #0]
    8cfa:	4413      	add	r3, r2
    8cfc:	b2da      	uxtb	r2, r3
    8cfe:	f24a 4366 	movw	r3, #42086	; 0xa466
    8d02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d06:	701a      	strb	r2, [r3, #0]
    8d08:	f24a 3361 	movw	r3, #41825	; 0xa361
    8d0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d10:	781b      	ldrb	r3, [r3, #0]
    8d12:	3301      	adds	r3, #1
    8d14:	b2da      	uxtb	r2, r3
    8d16:	f24a 3361 	movw	r3, #41825	; 0xa361
    8d1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d1e:	701a      	strb	r2, [r3, #0]
    8d20:	f24a 3361 	movw	r3, #41825	; 0xa361
    8d24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d28:	781b      	ldrb	r3, [r3, #0]
    8d2a:	2bff      	cmp	r3, #255	; 0xff
    8d2c:	d105      	bne.n	8d3a <send_desired+0x82e>
    8d2e:	f24a 3361 	movw	r3, #41825	; 0xa361
    8d32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d36:	2200      	movs	r2, #0
    8d38:	701a      	strb	r2, [r3, #0]
    8d3a:	f24a 3361 	movw	r3, #41825	; 0xa361
    8d3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d42:	781b      	ldrb	r3, [r3, #0]
    8d44:	461a      	mov	r2, r3
    8d46:	f24a 63dc 	movw	r3, #42716	; 0xa6dc
    8d4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d4e:	7819      	ldrb	r1, [r3, #0]
    8d50:	f24a 3364 	movw	r3, #41828	; 0xa364
    8d54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d58:	5499      	strb	r1, [r3, r2]
    8d5a:	f24a 63dc 	movw	r3, #42716	; 0xa6dc
    8d5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d62:	781a      	ldrb	r2, [r3, #0]
    8d64:	f24a 4365 	movw	r3, #42085	; 0xa465
    8d68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d6c:	781b      	ldrb	r3, [r3, #0]
    8d6e:	4413      	add	r3, r2
    8d70:	b2da      	uxtb	r2, r3
    8d72:	f24a 4365 	movw	r3, #42085	; 0xa465
    8d76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d7a:	701a      	strb	r2, [r3, #0]
    8d7c:	f24a 4366 	movw	r3, #42086	; 0xa466
    8d80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d84:	781a      	ldrb	r2, [r3, #0]
    8d86:	f24a 4365 	movw	r3, #42085	; 0xa465
    8d8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d8e:	781b      	ldrb	r3, [r3, #0]
    8d90:	4413      	add	r3, r2
    8d92:	b2da      	uxtb	r2, r3
    8d94:	f24a 4366 	movw	r3, #42086	; 0xa466
    8d98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d9c:	701a      	strb	r2, [r3, #0]
    8d9e:	f24a 3361 	movw	r3, #41825	; 0xa361
    8da2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8da6:	781b      	ldrb	r3, [r3, #0]
    8da8:	3301      	adds	r3, #1
    8daa:	b2da      	uxtb	r2, r3
    8dac:	f24a 3361 	movw	r3, #41825	; 0xa361
    8db0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8db4:	701a      	strb	r2, [r3, #0]
    8db6:	f24a 3361 	movw	r3, #41825	; 0xa361
    8dba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8dbe:	781b      	ldrb	r3, [r3, #0]
    8dc0:	2bff      	cmp	r3, #255	; 0xff
    8dc2:	d10f      	bne.n	8de4 <send_desired+0x8d8>
    8dc4:	f24a 3361 	movw	r3, #41825	; 0xa361
    8dc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8dcc:	2200      	movs	r2, #0
    8dce:	701a      	strb	r2, [r3, #0]
    8dd0:	e008      	b.n	8de4 <send_desired+0x8d8>
    8dd2:	bf00      	nop
    8dd4:	2000a693 	.word	0x2000a693
    8dd8:	2000a6d9 	.word	0x2000a6d9
    8ddc:	2000a6da 	.word	0x2000a6da
    8de0:	2000a6db 	.word	0x2000a6db
    8de4:	f24a 3361 	movw	r3, #41825	; 0xa361
    8de8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8dec:	781b      	ldrb	r3, [r3, #0]
    8dee:	461a      	mov	r2, r3
    8df0:	f24a 63dc 	movw	r3, #42716	; 0xa6dc
    8df4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8df8:	7859      	ldrb	r1, [r3, #1]
    8dfa:	f24a 3364 	movw	r3, #41828	; 0xa364
    8dfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e02:	5499      	strb	r1, [r3, r2]
    8e04:	4bd1      	ldr	r3, [pc, #836]	; (914c <send_desired+0xc40>)
    8e06:	781a      	ldrb	r2, [r3, #0]
    8e08:	f24a 4365 	movw	r3, #42085	; 0xa465
    8e0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e10:	781b      	ldrb	r3, [r3, #0]
    8e12:	4413      	add	r3, r2
    8e14:	b2da      	uxtb	r2, r3
    8e16:	f24a 4365 	movw	r3, #42085	; 0xa465
    8e1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e1e:	701a      	strb	r2, [r3, #0]
    8e20:	f24a 4366 	movw	r3, #42086	; 0xa466
    8e24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e28:	781a      	ldrb	r2, [r3, #0]
    8e2a:	f24a 4365 	movw	r3, #42085	; 0xa465
    8e2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e32:	781b      	ldrb	r3, [r3, #0]
    8e34:	4413      	add	r3, r2
    8e36:	b2da      	uxtb	r2, r3
    8e38:	f24a 4366 	movw	r3, #42086	; 0xa466
    8e3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e40:	701a      	strb	r2, [r3, #0]
    8e42:	f24a 3361 	movw	r3, #41825	; 0xa361
    8e46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e4a:	781b      	ldrb	r3, [r3, #0]
    8e4c:	3301      	adds	r3, #1
    8e4e:	b2da      	uxtb	r2, r3
    8e50:	f24a 3361 	movw	r3, #41825	; 0xa361
    8e54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e58:	701a      	strb	r2, [r3, #0]
    8e5a:	f24a 3361 	movw	r3, #41825	; 0xa361
    8e5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e62:	781b      	ldrb	r3, [r3, #0]
    8e64:	2bff      	cmp	r3, #255	; 0xff
    8e66:	d105      	bne.n	8e74 <send_desired+0x968>
    8e68:	f24a 3361 	movw	r3, #41825	; 0xa361
    8e6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e70:	2200      	movs	r2, #0
    8e72:	701a      	strb	r2, [r3, #0]
    8e74:	f24a 3361 	movw	r3, #41825	; 0xa361
    8e78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e7c:	781b      	ldrb	r3, [r3, #0]
    8e7e:	461a      	mov	r2, r3
    8e80:	f24a 63dc 	movw	r3, #42716	; 0xa6dc
    8e84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e88:	7899      	ldrb	r1, [r3, #2]
    8e8a:	f24a 3364 	movw	r3, #41828	; 0xa364
    8e8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e92:	5499      	strb	r1, [r3, r2]
    8e94:	4bae      	ldr	r3, [pc, #696]	; (9150 <send_desired+0xc44>)
    8e96:	781a      	ldrb	r2, [r3, #0]
    8e98:	f24a 4365 	movw	r3, #42085	; 0xa465
    8e9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ea0:	781b      	ldrb	r3, [r3, #0]
    8ea2:	4413      	add	r3, r2
    8ea4:	b2da      	uxtb	r2, r3
    8ea6:	f24a 4365 	movw	r3, #42085	; 0xa465
    8eaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8eae:	701a      	strb	r2, [r3, #0]
    8eb0:	f24a 4366 	movw	r3, #42086	; 0xa466
    8eb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8eb8:	781a      	ldrb	r2, [r3, #0]
    8eba:	f24a 4365 	movw	r3, #42085	; 0xa465
    8ebe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ec2:	781b      	ldrb	r3, [r3, #0]
    8ec4:	4413      	add	r3, r2
    8ec6:	b2da      	uxtb	r2, r3
    8ec8:	f24a 4366 	movw	r3, #42086	; 0xa466
    8ecc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ed0:	701a      	strb	r2, [r3, #0]
    8ed2:	f24a 3361 	movw	r3, #41825	; 0xa361
    8ed6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8eda:	781b      	ldrb	r3, [r3, #0]
    8edc:	3301      	adds	r3, #1
    8ede:	b2da      	uxtb	r2, r3
    8ee0:	f24a 3361 	movw	r3, #41825	; 0xa361
    8ee4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ee8:	701a      	strb	r2, [r3, #0]
    8eea:	f24a 3361 	movw	r3, #41825	; 0xa361
    8eee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ef2:	781b      	ldrb	r3, [r3, #0]
    8ef4:	2bff      	cmp	r3, #255	; 0xff
    8ef6:	d105      	bne.n	8f04 <send_desired+0x9f8>
    8ef8:	f24a 3361 	movw	r3, #41825	; 0xa361
    8efc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f00:	2200      	movs	r2, #0
    8f02:	701a      	strb	r2, [r3, #0]
    8f04:	f24a 3361 	movw	r3, #41825	; 0xa361
    8f08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f0c:	781b      	ldrb	r3, [r3, #0]
    8f0e:	461a      	mov	r2, r3
    8f10:	f24a 63dc 	movw	r3, #42716	; 0xa6dc
    8f14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f18:	78d9      	ldrb	r1, [r3, #3]
    8f1a:	f24a 3364 	movw	r3, #41828	; 0xa364
    8f1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f22:	5499      	strb	r1, [r3, r2]
    8f24:	4b8b      	ldr	r3, [pc, #556]	; (9154 <send_desired+0xc48>)
    8f26:	781a      	ldrb	r2, [r3, #0]
    8f28:	f24a 4365 	movw	r3, #42085	; 0xa465
    8f2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f30:	781b      	ldrb	r3, [r3, #0]
    8f32:	4413      	add	r3, r2
    8f34:	b2da      	uxtb	r2, r3
    8f36:	f24a 4365 	movw	r3, #42085	; 0xa465
    8f3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f3e:	701a      	strb	r2, [r3, #0]
    8f40:	f24a 4366 	movw	r3, #42086	; 0xa466
    8f44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f48:	781a      	ldrb	r2, [r3, #0]
    8f4a:	f24a 4365 	movw	r3, #42085	; 0xa465
    8f4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f52:	781b      	ldrb	r3, [r3, #0]
    8f54:	4413      	add	r3, r2
    8f56:	b2da      	uxtb	r2, r3
    8f58:	f24a 4366 	movw	r3, #42086	; 0xa466
    8f5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f60:	701a      	strb	r2, [r3, #0]
    8f62:	f24a 3361 	movw	r3, #41825	; 0xa361
    8f66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f6a:	781b      	ldrb	r3, [r3, #0]
    8f6c:	3301      	adds	r3, #1
    8f6e:	b2da      	uxtb	r2, r3
    8f70:	f24a 3361 	movw	r3, #41825	; 0xa361
    8f74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f78:	701a      	strb	r2, [r3, #0]
    8f7a:	f24a 3361 	movw	r3, #41825	; 0xa361
    8f7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f82:	781b      	ldrb	r3, [r3, #0]
    8f84:	2bff      	cmp	r3, #255	; 0xff
    8f86:	d105      	bne.n	8f94 <send_desired+0xa88>
    8f88:	f24a 3361 	movw	r3, #41825	; 0xa361
    8f8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f90:	2200      	movs	r2, #0
    8f92:	701a      	strb	r2, [r3, #0]
    8f94:	f24a 3361 	movw	r3, #41825	; 0xa361
    8f98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f9c:	781b      	ldrb	r3, [r3, #0]
    8f9e:	461a      	mov	r2, r3
    8fa0:	f240 1308 	movw	r3, #264	; 0x108
    8fa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fa8:	7819      	ldrb	r1, [r3, #0]
    8faa:	f24a 3364 	movw	r3, #41828	; 0xa364
    8fae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fb2:	5499      	strb	r1, [r3, r2]
    8fb4:	f240 1308 	movw	r3, #264	; 0x108
    8fb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fbc:	781a      	ldrb	r2, [r3, #0]
    8fbe:	f24a 4365 	movw	r3, #42085	; 0xa465
    8fc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fc6:	781b      	ldrb	r3, [r3, #0]
    8fc8:	4413      	add	r3, r2
    8fca:	b2da      	uxtb	r2, r3
    8fcc:	f24a 4365 	movw	r3, #42085	; 0xa465
    8fd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fd4:	701a      	strb	r2, [r3, #0]
    8fd6:	f24a 4366 	movw	r3, #42086	; 0xa466
    8fda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fde:	781a      	ldrb	r2, [r3, #0]
    8fe0:	f24a 4365 	movw	r3, #42085	; 0xa465
    8fe4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fe8:	781b      	ldrb	r3, [r3, #0]
    8fea:	4413      	add	r3, r2
    8fec:	b2da      	uxtb	r2, r3
    8fee:	f24a 4366 	movw	r3, #42086	; 0xa466
    8ff2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ff6:	701a      	strb	r2, [r3, #0]
    8ff8:	f24a 3361 	movw	r3, #41825	; 0xa361
    8ffc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9000:	781b      	ldrb	r3, [r3, #0]
    9002:	3301      	adds	r3, #1
    9004:	b2da      	uxtb	r2, r3
    9006:	f24a 3361 	movw	r3, #41825	; 0xa361
    900a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    900e:	701a      	strb	r2, [r3, #0]
    9010:	f24a 3361 	movw	r3, #41825	; 0xa361
    9014:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9018:	781b      	ldrb	r3, [r3, #0]
    901a:	2bff      	cmp	r3, #255	; 0xff
    901c:	d105      	bne.n	902a <send_desired+0xb1e>
    901e:	f24a 3361 	movw	r3, #41825	; 0xa361
    9022:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9026:	2200      	movs	r2, #0
    9028:	701a      	strb	r2, [r3, #0]
    902a:	f24a 3361 	movw	r3, #41825	; 0xa361
    902e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9032:	781b      	ldrb	r3, [r3, #0]
    9034:	461a      	mov	r2, r3
    9036:	f240 1308 	movw	r3, #264	; 0x108
    903a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    903e:	7859      	ldrb	r1, [r3, #1]
    9040:	f24a 3364 	movw	r3, #41828	; 0xa364
    9044:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9048:	5499      	strb	r1, [r3, r2]
    904a:	4b43      	ldr	r3, [pc, #268]	; (9158 <send_desired+0xc4c>)
    904c:	781a      	ldrb	r2, [r3, #0]
    904e:	f24a 4365 	movw	r3, #42085	; 0xa465
    9052:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9056:	781b      	ldrb	r3, [r3, #0]
    9058:	4413      	add	r3, r2
    905a:	b2da      	uxtb	r2, r3
    905c:	f24a 4365 	movw	r3, #42085	; 0xa465
    9060:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9064:	701a      	strb	r2, [r3, #0]
    9066:	f24a 4366 	movw	r3, #42086	; 0xa466
    906a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    906e:	781a      	ldrb	r2, [r3, #0]
    9070:	f24a 4365 	movw	r3, #42085	; 0xa465
    9074:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9078:	781b      	ldrb	r3, [r3, #0]
    907a:	4413      	add	r3, r2
    907c:	b2da      	uxtb	r2, r3
    907e:	f24a 4366 	movw	r3, #42086	; 0xa466
    9082:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9086:	701a      	strb	r2, [r3, #0]
    9088:	f24a 3361 	movw	r3, #41825	; 0xa361
    908c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9090:	781b      	ldrb	r3, [r3, #0]
    9092:	3301      	adds	r3, #1
    9094:	b2da      	uxtb	r2, r3
    9096:	f24a 3361 	movw	r3, #41825	; 0xa361
    909a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    909e:	701a      	strb	r2, [r3, #0]
    90a0:	f24a 3361 	movw	r3, #41825	; 0xa361
    90a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90a8:	781b      	ldrb	r3, [r3, #0]
    90aa:	2bff      	cmp	r3, #255	; 0xff
    90ac:	d105      	bne.n	90ba <send_desired+0xbae>
    90ae:	f24a 3361 	movw	r3, #41825	; 0xa361
    90b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90b6:	2200      	movs	r2, #0
    90b8:	701a      	strb	r2, [r3, #0]
    90ba:	f24a 3361 	movw	r3, #41825	; 0xa361
    90be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90c2:	781b      	ldrb	r3, [r3, #0]
    90c4:	461a      	mov	r2, r3
    90c6:	f240 1308 	movw	r3, #264	; 0x108
    90ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90ce:	7899      	ldrb	r1, [r3, #2]
    90d0:	f24a 3364 	movw	r3, #41828	; 0xa364
    90d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90d8:	5499      	strb	r1, [r3, r2]
    90da:	4b20      	ldr	r3, [pc, #128]	; (915c <send_desired+0xc50>)
    90dc:	781a      	ldrb	r2, [r3, #0]
    90de:	f24a 4365 	movw	r3, #42085	; 0xa465
    90e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90e6:	781b      	ldrb	r3, [r3, #0]
    90e8:	4413      	add	r3, r2
    90ea:	b2da      	uxtb	r2, r3
    90ec:	f24a 4365 	movw	r3, #42085	; 0xa465
    90f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90f4:	701a      	strb	r2, [r3, #0]
    90f6:	f24a 4366 	movw	r3, #42086	; 0xa466
    90fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90fe:	781a      	ldrb	r2, [r3, #0]
    9100:	f24a 4365 	movw	r3, #42085	; 0xa465
    9104:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9108:	781b      	ldrb	r3, [r3, #0]
    910a:	4413      	add	r3, r2
    910c:	b2da      	uxtb	r2, r3
    910e:	f24a 4366 	movw	r3, #42086	; 0xa466
    9112:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9116:	701a      	strb	r2, [r3, #0]
    9118:	f24a 3361 	movw	r3, #41825	; 0xa361
    911c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9120:	781b      	ldrb	r3, [r3, #0]
    9122:	3301      	adds	r3, #1
    9124:	b2da      	uxtb	r2, r3
    9126:	f24a 3361 	movw	r3, #41825	; 0xa361
    912a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    912e:	701a      	strb	r2, [r3, #0]
    9130:	f24a 3361 	movw	r3, #41825	; 0xa361
    9134:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9138:	781b      	ldrb	r3, [r3, #0]
    913a:	2bff      	cmp	r3, #255	; 0xff
    913c:	d110      	bne.n	9160 <send_desired+0xc54>
    913e:	f24a 3361 	movw	r3, #41825	; 0xa361
    9142:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9146:	2200      	movs	r2, #0
    9148:	701a      	strb	r2, [r3, #0]
    914a:	e009      	b.n	9160 <send_desired+0xc54>
    914c:	2000a6dd 	.word	0x2000a6dd
    9150:	2000a6de 	.word	0x2000a6de
    9154:	2000a6df 	.word	0x2000a6df
    9158:	20000109 	.word	0x20000109
    915c:	2000010a 	.word	0x2000010a
    9160:	f24a 3361 	movw	r3, #41825	; 0xa361
    9164:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9168:	781b      	ldrb	r3, [r3, #0]
    916a:	461a      	mov	r2, r3
    916c:	f240 1308 	movw	r3, #264	; 0x108
    9170:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9174:	78d9      	ldrb	r1, [r3, #3]
    9176:	f24a 3364 	movw	r3, #41828	; 0xa364
    917a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    917e:	5499      	strb	r1, [r3, r2]
    9180:	4b79      	ldr	r3, [pc, #484]	; (9368 <send_desired+0xe5c>)
    9182:	781a      	ldrb	r2, [r3, #0]
    9184:	f24a 4365 	movw	r3, #42085	; 0xa465
    9188:	f2c2 0300 	movt	r3, #8192	; 0x2000
    918c:	781b      	ldrb	r3, [r3, #0]
    918e:	4413      	add	r3, r2
    9190:	b2da      	uxtb	r2, r3
    9192:	f24a 4365 	movw	r3, #42085	; 0xa465
    9196:	f2c2 0300 	movt	r3, #8192	; 0x2000
    919a:	701a      	strb	r2, [r3, #0]
    919c:	f24a 4366 	movw	r3, #42086	; 0xa466
    91a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91a4:	781a      	ldrb	r2, [r3, #0]
    91a6:	f24a 4365 	movw	r3, #42085	; 0xa465
    91aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91ae:	781b      	ldrb	r3, [r3, #0]
    91b0:	4413      	add	r3, r2
    91b2:	b2da      	uxtb	r2, r3
    91b4:	f24a 4366 	movw	r3, #42086	; 0xa466
    91b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91bc:	701a      	strb	r2, [r3, #0]
    91be:	f24a 3361 	movw	r3, #41825	; 0xa361
    91c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91c6:	781b      	ldrb	r3, [r3, #0]
    91c8:	3301      	adds	r3, #1
    91ca:	b2da      	uxtb	r2, r3
    91cc:	f24a 3361 	movw	r3, #41825	; 0xa361
    91d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91d4:	701a      	strb	r2, [r3, #0]
    91d6:	f24a 3361 	movw	r3, #41825	; 0xa361
    91da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91de:	781b      	ldrb	r3, [r3, #0]
    91e0:	2bff      	cmp	r3, #255	; 0xff
    91e2:	d105      	bne.n	91f0 <send_desired+0xce4>
    91e4:	f24a 3361 	movw	r3, #41825	; 0xa361
    91e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91ec:	2200      	movs	r2, #0
    91ee:	701a      	strb	r2, [r3, #0]
    91f0:	f24a 3361 	movw	r3, #41825	; 0xa361
    91f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91f8:	781b      	ldrb	r3, [r3, #0]
    91fa:	461a      	mov	r2, r3
    91fc:	f24a 4365 	movw	r3, #42085	; 0xa465
    9200:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9204:	7819      	ldrb	r1, [r3, #0]
    9206:	f24a 3364 	movw	r3, #41828	; 0xa364
    920a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    920e:	5499      	strb	r1, [r3, r2]
    9210:	f24a 3361 	movw	r3, #41825	; 0xa361
    9214:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9218:	781b      	ldrb	r3, [r3, #0]
    921a:	3301      	adds	r3, #1
    921c:	b2da      	uxtb	r2, r3
    921e:	f24a 3361 	movw	r3, #41825	; 0xa361
    9222:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9226:	701a      	strb	r2, [r3, #0]
    9228:	f24a 3361 	movw	r3, #41825	; 0xa361
    922c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9230:	781b      	ldrb	r3, [r3, #0]
    9232:	2bff      	cmp	r3, #255	; 0xff
    9234:	d105      	bne.n	9242 <send_desired+0xd36>
    9236:	f24a 3361 	movw	r3, #41825	; 0xa361
    923a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    923e:	2200      	movs	r2, #0
    9240:	701a      	strb	r2, [r3, #0]
    9242:	f24a 3361 	movw	r3, #41825	; 0xa361
    9246:	f2c2 0300 	movt	r3, #8192	; 0x2000
    924a:	781b      	ldrb	r3, [r3, #0]
    924c:	461a      	mov	r2, r3
    924e:	f24a 4366 	movw	r3, #42086	; 0xa466
    9252:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9256:	7819      	ldrb	r1, [r3, #0]
    9258:	f24a 3364 	movw	r3, #41828	; 0xa364
    925c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9260:	5499      	strb	r1, [r3, r2]
    9262:	f24a 3361 	movw	r3, #41825	; 0xa361
    9266:	f2c2 0300 	movt	r3, #8192	; 0x2000
    926a:	781b      	ldrb	r3, [r3, #0]
    926c:	3301      	adds	r3, #1
    926e:	b2da      	uxtb	r2, r3
    9270:	f24a 3361 	movw	r3, #41825	; 0xa361
    9274:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9278:	701a      	strb	r2, [r3, #0]
    927a:	f24a 3361 	movw	r3, #41825	; 0xa361
    927e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9282:	781b      	ldrb	r3, [r3, #0]
    9284:	2bff      	cmp	r3, #255	; 0xff
    9286:	d105      	bne.n	9294 <send_desired+0xd88>
    9288:	f24a 3361 	movw	r3, #41825	; 0xa361
    928c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9290:	2200      	movs	r2, #0
    9292:	701a      	strb	r2, [r3, #0]
    9294:	f242 0339 	movw	r3, #8249	; 0x2039
    9298:	f2c2 0300 	movt	r3, #8192	; 0x2000
    929c:	781b      	ldrb	r3, [r3, #0]
    929e:	b2db      	uxtb	r3, r3
    92a0:	f003 0310 	and.w	r3, r3, #16
    92a4:	2b00      	cmp	r3, #0
    92a6:	d15a      	bne.n	935e <send_desired+0xe52>
    92a8:	f24a 3362 	movw	r3, #41826	; 0xa362
    92ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92b0:	781b      	ldrb	r3, [r3, #0]
    92b2:	b2db      	uxtb	r3, r3
    92b4:	461a      	mov	r2, r3
    92b6:	f24a 3364 	movw	r3, #41828	; 0xa364
    92ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92be:	5c9a      	ldrb	r2, [r3, r2]
    92c0:	f24a 4363 	movw	r3, #42083	; 0xa463
    92c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92c8:	701a      	strb	r2, [r3, #0]
    92ca:	f24a 4364 	movw	r3, #42084	; 0xa464
    92ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92d2:	2200      	movs	r2, #0
    92d4:	701a      	strb	r2, [r3, #0]
    92d6:	f24a 3362 	movw	r3, #41826	; 0xa362
    92da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92de:	781b      	ldrb	r3, [r3, #0]
    92e0:	b2db      	uxtb	r3, r3
    92e2:	3301      	adds	r3, #1
    92e4:	b2da      	uxtb	r2, r3
    92e6:	f24a 3362 	movw	r3, #41826	; 0xa362
    92ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92ee:	701a      	strb	r2, [r3, #0]
    92f0:	f24a 3362 	movw	r3, #41826	; 0xa362
    92f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92f8:	781b      	ldrb	r3, [r3, #0]
    92fa:	b2db      	uxtb	r3, r3
    92fc:	2bff      	cmp	r3, #255	; 0xff
    92fe:	d105      	bne.n	930c <send_desired+0xe00>
    9300:	f24a 3362 	movw	r3, #41826	; 0xa362
    9304:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9308:	2200      	movs	r2, #0
    930a:	701a      	strb	r2, [r3, #0]
    930c:	f242 0338 	movw	r3, #8248	; 0x2038
    9310:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9314:	f242 0238 	movw	r2, #8248	; 0x2038
    9318:	f2c2 0200 	movt	r2, #8192	; 0x2000
    931c:	7812      	ldrb	r2, [r2, #0]
    931e:	b2d2      	uxtb	r2, r2
    9320:	f042 0201 	orr.w	r2, r2, #1
    9324:	b2d2      	uxtb	r2, r2
    9326:	701a      	strb	r2, [r3, #0]
    9328:	f242 0339 	movw	r3, #8249	; 0x2039
    932c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9330:	f242 0239 	movw	r2, #8249	; 0x2039
    9334:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9338:	7812      	ldrb	r2, [r2, #0]
    933a:	b2d2      	uxtb	r2, r2
    933c:	f042 0210 	orr.w	r2, r2, #16
    9340:	b2d2      	uxtb	r2, r2
    9342:	701a      	strb	r2, [r3, #0]
    9344:	e00b      	b.n	935e <send_desired+0xe52>
    9346:	f24a 3360 	movw	r3, #41824	; 0xa360
    934a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    934e:	781b      	ldrb	r3, [r3, #0]
    9350:	3301      	adds	r3, #1
    9352:	b2da      	uxtb	r2, r3
    9354:	f24a 3360 	movw	r3, #41824	; 0xa360
    9358:	f2c2 0300 	movt	r3, #8192	; 0x2000
    935c:	701a      	strb	r2, [r3, #0]
}
    935e:	46bd      	mov	sp, r7
    9360:	f85d 7b04 	ldr.w	r7, [sp], #4
    9364:	4770      	bx	lr
    9366:	bf00      	nop
    9368:	2000010b 	.word	0x2000010b

0000936c <send_bat>:
void send_bat(void){  //2000ms
    936c:	b480      	push	{r7}
    936e:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 20 == 8) PERIODIC_SEND_BAT();}
    9370:	f24a 3359 	movw	r3, #41817	; 0xa359
    9374:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9378:	781a      	ldrb	r2, [r3, #0]
    937a:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    937e:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    9382:	fba3 1302 	umull	r1, r3, r3, r2
    9386:	0919      	lsrs	r1, r3, #4
    9388:	460b      	mov	r3, r1
    938a:	009b      	lsls	r3, r3, #2
    938c:	440b      	add	r3, r1
    938e:	009b      	lsls	r3, r3, #2
    9390:	1ad3      	subs	r3, r2, r3
    9392:	b2db      	uxtb	r3, r3
    9394:	2b08      	cmp	r3, #8
    9396:	f040 839a 	bne.w	9ace <send_bat+0x762>
    939a:	f24a 3361 	movw	r3, #41825	; 0xa361
    939e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93a2:	781a      	ldrb	r2, [r3, #0]
    93a4:	f24a 3362 	movw	r3, #41826	; 0xa362
    93a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93ac:	781b      	ldrb	r3, [r3, #0]
    93ae:	b2db      	uxtb	r3, r3
    93b0:	429a      	cmp	r2, r3
    93b2:	d313      	bcc.n	93dc <send_bat+0x70>
    93b4:	f24a 3362 	movw	r3, #41826	; 0xa362
    93b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93bc:	781b      	ldrb	r3, [r3, #0]
    93be:	b2db      	uxtb	r3, r3
    93c0:	461a      	mov	r2, r3
    93c2:	f24a 3361 	movw	r3, #41825	; 0xa361
    93c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93ca:	781b      	ldrb	r3, [r3, #0]
    93cc:	1ad3      	subs	r3, r2, r3
    93ce:	33ff      	adds	r3, #255	; 0xff
    93d0:	2b0c      	cmp	r3, #12
    93d2:	bfd4      	ite	le
    93d4:	2300      	movle	r3, #0
    93d6:	2301      	movgt	r3, #1
    93d8:	b2db      	uxtb	r3, r3
    93da:	e011      	b.n	9400 <send_bat+0x94>
    93dc:	f24a 3362 	movw	r3, #41826	; 0xa362
    93e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93e4:	781b      	ldrb	r3, [r3, #0]
    93e6:	b2db      	uxtb	r3, r3
    93e8:	461a      	mov	r2, r3
    93ea:	f24a 3361 	movw	r3, #41825	; 0xa361
    93ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93f2:	781b      	ldrb	r3, [r3, #0]
    93f4:	1ad3      	subs	r3, r2, r3
    93f6:	2b0c      	cmp	r3, #12
    93f8:	bfd4      	ite	le
    93fa:	2300      	movle	r3, #0
    93fc:	2301      	movgt	r3, #1
    93fe:	b2db      	uxtb	r3, r3
    9400:	2b00      	cmp	r3, #0
    9402:	f000 8358 	beq.w	9ab6 <send_bat+0x74a>
    9406:	f24a 3361 	movw	r3, #41825	; 0xa361
    940a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    940e:	781b      	ldrb	r3, [r3, #0]
    9410:	461a      	mov	r2, r3
    9412:	f24a 3364 	movw	r3, #41828	; 0xa364
    9416:	f2c2 0300 	movt	r3, #8192	; 0x2000
    941a:	2105      	movs	r1, #5
    941c:	5499      	strb	r1, [r3, r2]
    941e:	f24a 3361 	movw	r3, #41825	; 0xa361
    9422:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9426:	781b      	ldrb	r3, [r3, #0]
    9428:	3301      	adds	r3, #1
    942a:	b2da      	uxtb	r2, r3
    942c:	f24a 3361 	movw	r3, #41825	; 0xa361
    9430:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9434:	701a      	strb	r2, [r3, #0]
    9436:	f24a 3361 	movw	r3, #41825	; 0xa361
    943a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    943e:	781b      	ldrb	r3, [r3, #0]
    9440:	2bff      	cmp	r3, #255	; 0xff
    9442:	d105      	bne.n	9450 <send_bat+0xe4>
    9444:	f24a 3361 	movw	r3, #41825	; 0xa361
    9448:	f2c2 0300 	movt	r3, #8192	; 0x2000
    944c:	2200      	movs	r2, #0
    944e:	701a      	strb	r2, [r3, #0]
    9450:	f24a 3361 	movw	r3, #41825	; 0xa361
    9454:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9458:	781b      	ldrb	r3, [r3, #0]
    945a:	461a      	mov	r2, r3
    945c:	f24a 3364 	movw	r3, #41828	; 0xa364
    9460:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9464:	210c      	movs	r1, #12
    9466:	5499      	strb	r1, [r3, r2]
    9468:	f24a 3361 	movw	r3, #41825	; 0xa361
    946c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9470:	781b      	ldrb	r3, [r3, #0]
    9472:	3301      	adds	r3, #1
    9474:	b2da      	uxtb	r2, r3
    9476:	f24a 3361 	movw	r3, #41825	; 0xa361
    947a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    947e:	701a      	strb	r2, [r3, #0]
    9480:	f24a 3361 	movw	r3, #41825	; 0xa361
    9484:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9488:	781b      	ldrb	r3, [r3, #0]
    948a:	2bff      	cmp	r3, #255	; 0xff
    948c:	d105      	bne.n	949a <send_bat+0x12e>
    948e:	f24a 3361 	movw	r3, #41825	; 0xa361
    9492:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9496:	2200      	movs	r2, #0
    9498:	701a      	strb	r2, [r3, #0]
    949a:	f24a 4365 	movw	r3, #42085	; 0xa465
    949e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94a2:	220c      	movs	r2, #12
    94a4:	701a      	strb	r2, [r3, #0]
    94a6:	f24a 4366 	movw	r3, #42086	; 0xa466
    94aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94ae:	220c      	movs	r2, #12
    94b0:	701a      	strb	r2, [r3, #0]
    94b2:	f24a 3361 	movw	r3, #41825	; 0xa361
    94b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94ba:	781b      	ldrb	r3, [r3, #0]
    94bc:	461a      	mov	r2, r3
    94be:	f24a 334a 	movw	r3, #41802	; 0xa34a
    94c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94c6:	7819      	ldrb	r1, [r3, #0]
    94c8:	f24a 3364 	movw	r3, #41828	; 0xa364
    94cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94d0:	5499      	strb	r1, [r3, r2]
    94d2:	f24a 4365 	movw	r3, #42085	; 0xa465
    94d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94da:	781a      	ldrb	r2, [r3, #0]
    94dc:	f24a 334a 	movw	r3, #41802	; 0xa34a
    94e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94e4:	781b      	ldrb	r3, [r3, #0]
    94e6:	4413      	add	r3, r2
    94e8:	b2da      	uxtb	r2, r3
    94ea:	f24a 4365 	movw	r3, #42085	; 0xa465
    94ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94f2:	701a      	strb	r2, [r3, #0]
    94f4:	f24a 4366 	movw	r3, #42086	; 0xa466
    94f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94fc:	781a      	ldrb	r2, [r3, #0]
    94fe:	f24a 4365 	movw	r3, #42085	; 0xa465
    9502:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9506:	781b      	ldrb	r3, [r3, #0]
    9508:	4413      	add	r3, r2
    950a:	b2da      	uxtb	r2, r3
    950c:	f24a 4366 	movw	r3, #42086	; 0xa466
    9510:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9514:	701a      	strb	r2, [r3, #0]
    9516:	f24a 3361 	movw	r3, #41825	; 0xa361
    951a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    951e:	781b      	ldrb	r3, [r3, #0]
    9520:	3301      	adds	r3, #1
    9522:	b2da      	uxtb	r2, r3
    9524:	f24a 3361 	movw	r3, #41825	; 0xa361
    9528:	f2c2 0300 	movt	r3, #8192	; 0x2000
    952c:	701a      	strb	r2, [r3, #0]
    952e:	f24a 3361 	movw	r3, #41825	; 0xa361
    9532:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9536:	781b      	ldrb	r3, [r3, #0]
    9538:	2bff      	cmp	r3, #255	; 0xff
    953a:	d105      	bne.n	9548 <send_bat+0x1dc>
    953c:	f24a 3361 	movw	r3, #41825	; 0xa361
    9540:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9544:	2200      	movs	r2, #0
    9546:	701a      	strb	r2, [r3, #0]
    9548:	f24a 3361 	movw	r3, #41825	; 0xa361
    954c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9550:	781b      	ldrb	r3, [r3, #0]
    9552:	461a      	mov	r2, r3
    9554:	f64a 1344 	movw	r3, #43332	; 0xa944
    9558:	f2c2 0300 	movt	r3, #8192	; 0x2000
    955c:	7819      	ldrb	r1, [r3, #0]
    955e:	f24a 3364 	movw	r3, #41828	; 0xa364
    9562:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9566:	5499      	strb	r1, [r3, r2]
    9568:	f64a 1344 	movw	r3, #43332	; 0xa944
    956c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9570:	781a      	ldrb	r2, [r3, #0]
    9572:	f24a 4365 	movw	r3, #42085	; 0xa465
    9576:	f2c2 0300 	movt	r3, #8192	; 0x2000
    957a:	781b      	ldrb	r3, [r3, #0]
    957c:	4413      	add	r3, r2
    957e:	b2da      	uxtb	r2, r3
    9580:	f24a 4365 	movw	r3, #42085	; 0xa465
    9584:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9588:	701a      	strb	r2, [r3, #0]
    958a:	f24a 4366 	movw	r3, #42086	; 0xa466
    958e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9592:	781a      	ldrb	r2, [r3, #0]
    9594:	f24a 4365 	movw	r3, #42085	; 0xa465
    9598:	f2c2 0300 	movt	r3, #8192	; 0x2000
    959c:	781b      	ldrb	r3, [r3, #0]
    959e:	4413      	add	r3, r2
    95a0:	b2da      	uxtb	r2, r3
    95a2:	f24a 4366 	movw	r3, #42086	; 0xa466
    95a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95aa:	701a      	strb	r2, [r3, #0]
    95ac:	f24a 3361 	movw	r3, #41825	; 0xa361
    95b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95b4:	781b      	ldrb	r3, [r3, #0]
    95b6:	3301      	adds	r3, #1
    95b8:	b2da      	uxtb	r2, r3
    95ba:	f24a 3361 	movw	r3, #41825	; 0xa361
    95be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95c2:	701a      	strb	r2, [r3, #0]
    95c4:	f24a 3361 	movw	r3, #41825	; 0xa361
    95c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95cc:	781b      	ldrb	r3, [r3, #0]
    95ce:	2bff      	cmp	r3, #255	; 0xff
    95d0:	d105      	bne.n	95de <send_bat+0x272>
    95d2:	f24a 3361 	movw	r3, #41825	; 0xa361
    95d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95da:	2200      	movs	r2, #0
    95dc:	701a      	strb	r2, [r3, #0]
    95de:	f24a 3361 	movw	r3, #41825	; 0xa361
    95e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95e6:	781b      	ldrb	r3, [r3, #0]
    95e8:	461a      	mov	r2, r3
    95ea:	f64a 1344 	movw	r3, #43332	; 0xa944
    95ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95f2:	7859      	ldrb	r1, [r3, #1]
    95f4:	f24a 3364 	movw	r3, #41828	; 0xa364
    95f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95fc:	5499      	strb	r1, [r3, r2]
    95fe:	4bd5      	ldr	r3, [pc, #852]	; (9954 <send_bat+0x5e8>)
    9600:	781a      	ldrb	r2, [r3, #0]
    9602:	f24a 4365 	movw	r3, #42085	; 0xa465
    9606:	f2c2 0300 	movt	r3, #8192	; 0x2000
    960a:	781b      	ldrb	r3, [r3, #0]
    960c:	4413      	add	r3, r2
    960e:	b2da      	uxtb	r2, r3
    9610:	f24a 4365 	movw	r3, #42085	; 0xa465
    9614:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9618:	701a      	strb	r2, [r3, #0]
    961a:	f24a 4366 	movw	r3, #42086	; 0xa466
    961e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9622:	781a      	ldrb	r2, [r3, #0]
    9624:	f24a 4365 	movw	r3, #42085	; 0xa465
    9628:	f2c2 0300 	movt	r3, #8192	; 0x2000
    962c:	781b      	ldrb	r3, [r3, #0]
    962e:	4413      	add	r3, r2
    9630:	b2da      	uxtb	r2, r3
    9632:	f24a 4366 	movw	r3, #42086	; 0xa466
    9636:	f2c2 0300 	movt	r3, #8192	; 0x2000
    963a:	701a      	strb	r2, [r3, #0]
    963c:	f24a 3361 	movw	r3, #41825	; 0xa361
    9640:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9644:	781b      	ldrb	r3, [r3, #0]
    9646:	3301      	adds	r3, #1
    9648:	b2da      	uxtb	r2, r3
    964a:	f24a 3361 	movw	r3, #41825	; 0xa361
    964e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9652:	701a      	strb	r2, [r3, #0]
    9654:	f24a 3361 	movw	r3, #41825	; 0xa361
    9658:	f2c2 0300 	movt	r3, #8192	; 0x2000
    965c:	781b      	ldrb	r3, [r3, #0]
    965e:	2bff      	cmp	r3, #255	; 0xff
    9660:	d105      	bne.n	966e <send_bat+0x302>
    9662:	f24a 3361 	movw	r3, #41825	; 0xa361
    9666:	f2c2 0300 	movt	r3, #8192	; 0x2000
    966a:	2200      	movs	r2, #0
    966c:	701a      	strb	r2, [r3, #0]
    966e:	f24a 3361 	movw	r3, #41825	; 0xa361
    9672:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9676:	781b      	ldrb	r3, [r3, #0]
    9678:	461a      	mov	r2, r3
    967a:	f24a 334d 	movw	r3, #41805	; 0xa34d
    967e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9682:	7819      	ldrb	r1, [r3, #0]
    9684:	f24a 3364 	movw	r3, #41828	; 0xa364
    9688:	f2c2 0300 	movt	r3, #8192	; 0x2000
    968c:	5499      	strb	r1, [r3, r2]
    968e:	f24a 334d 	movw	r3, #41805	; 0xa34d
    9692:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9696:	781a      	ldrb	r2, [r3, #0]
    9698:	f24a 4365 	movw	r3, #42085	; 0xa465
    969c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96a0:	781b      	ldrb	r3, [r3, #0]
    96a2:	4413      	add	r3, r2
    96a4:	b2da      	uxtb	r2, r3
    96a6:	f24a 4365 	movw	r3, #42085	; 0xa465
    96aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96ae:	701a      	strb	r2, [r3, #0]
    96b0:	f24a 4366 	movw	r3, #42086	; 0xa466
    96b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96b8:	781a      	ldrb	r2, [r3, #0]
    96ba:	f24a 4365 	movw	r3, #42085	; 0xa465
    96be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96c2:	781b      	ldrb	r3, [r3, #0]
    96c4:	4413      	add	r3, r2
    96c6:	b2da      	uxtb	r2, r3
    96c8:	f24a 4366 	movw	r3, #42086	; 0xa466
    96cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96d0:	701a      	strb	r2, [r3, #0]
    96d2:	f24a 3361 	movw	r3, #41825	; 0xa361
    96d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96da:	781b      	ldrb	r3, [r3, #0]
    96dc:	3301      	adds	r3, #1
    96de:	b2da      	uxtb	r2, r3
    96e0:	f24a 3361 	movw	r3, #41825	; 0xa361
    96e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96e8:	701a      	strb	r2, [r3, #0]
    96ea:	f24a 3361 	movw	r3, #41825	; 0xa361
    96ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96f2:	781b      	ldrb	r3, [r3, #0]
    96f4:	2bff      	cmp	r3, #255	; 0xff
    96f6:	d105      	bne.n	9704 <send_bat+0x398>
    96f8:	f24a 3361 	movw	r3, #41825	; 0xa361
    96fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9700:	2200      	movs	r2, #0
    9702:	701a      	strb	r2, [r3, #0]
    9704:	f24a 3361 	movw	r3, #41825	; 0xa361
    9708:	f2c2 0300 	movt	r3, #8192	; 0x2000
    970c:	781b      	ldrb	r3, [r3, #0]
    970e:	461a      	mov	r2, r3
    9710:	f24a 63ce 	movw	r3, #42702	; 0xa6ce
    9714:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9718:	7819      	ldrb	r1, [r3, #0]
    971a:	f24a 3364 	movw	r3, #41828	; 0xa364
    971e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9722:	5499      	strb	r1, [r3, r2]
    9724:	f24a 63ce 	movw	r3, #42702	; 0xa6ce
    9728:	f2c2 0300 	movt	r3, #8192	; 0x2000
    972c:	781a      	ldrb	r2, [r3, #0]
    972e:	f24a 4365 	movw	r3, #42085	; 0xa465
    9732:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9736:	781b      	ldrb	r3, [r3, #0]
    9738:	4413      	add	r3, r2
    973a:	b2da      	uxtb	r2, r3
    973c:	f24a 4365 	movw	r3, #42085	; 0xa465
    9740:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9744:	701a      	strb	r2, [r3, #0]
    9746:	f24a 4366 	movw	r3, #42086	; 0xa466
    974a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    974e:	781a      	ldrb	r2, [r3, #0]
    9750:	f24a 4365 	movw	r3, #42085	; 0xa465
    9754:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9758:	781b      	ldrb	r3, [r3, #0]
    975a:	4413      	add	r3, r2
    975c:	b2da      	uxtb	r2, r3
    975e:	f24a 4366 	movw	r3, #42086	; 0xa466
    9762:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9766:	701a      	strb	r2, [r3, #0]
    9768:	f24a 3361 	movw	r3, #41825	; 0xa361
    976c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9770:	781b      	ldrb	r3, [r3, #0]
    9772:	3301      	adds	r3, #1
    9774:	b2da      	uxtb	r2, r3
    9776:	f24a 3361 	movw	r3, #41825	; 0xa361
    977a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    977e:	701a      	strb	r2, [r3, #0]
    9780:	f24a 3361 	movw	r3, #41825	; 0xa361
    9784:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9788:	781b      	ldrb	r3, [r3, #0]
    978a:	2bff      	cmp	r3, #255	; 0xff
    978c:	d105      	bne.n	979a <send_bat+0x42e>
    978e:	f24a 3361 	movw	r3, #41825	; 0xa361
    9792:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9796:	2200      	movs	r2, #0
    9798:	701a      	strb	r2, [r3, #0]
    979a:	f24a 3361 	movw	r3, #41825	; 0xa361
    979e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97a2:	781b      	ldrb	r3, [r3, #0]
    97a4:	461a      	mov	r2, r3
    97a6:	f24a 63ce 	movw	r3, #42702	; 0xa6ce
    97aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97ae:	7859      	ldrb	r1, [r3, #1]
    97b0:	f24a 3364 	movw	r3, #41828	; 0xa364
    97b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97b8:	5499      	strb	r1, [r3, r2]
    97ba:	4b67      	ldr	r3, [pc, #412]	; (9958 <send_bat+0x5ec>)
    97bc:	781a      	ldrb	r2, [r3, #0]
    97be:	f24a 4365 	movw	r3, #42085	; 0xa465
    97c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97c6:	781b      	ldrb	r3, [r3, #0]
    97c8:	4413      	add	r3, r2
    97ca:	b2da      	uxtb	r2, r3
    97cc:	f24a 4365 	movw	r3, #42085	; 0xa465
    97d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97d4:	701a      	strb	r2, [r3, #0]
    97d6:	f24a 4366 	movw	r3, #42086	; 0xa466
    97da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97de:	781a      	ldrb	r2, [r3, #0]
    97e0:	f24a 4365 	movw	r3, #42085	; 0xa465
    97e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97e8:	781b      	ldrb	r3, [r3, #0]
    97ea:	4413      	add	r3, r2
    97ec:	b2da      	uxtb	r2, r3
    97ee:	f24a 4366 	movw	r3, #42086	; 0xa466
    97f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97f6:	701a      	strb	r2, [r3, #0]
    97f8:	f24a 3361 	movw	r3, #41825	; 0xa361
    97fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9800:	781b      	ldrb	r3, [r3, #0]
    9802:	3301      	adds	r3, #1
    9804:	b2da      	uxtb	r2, r3
    9806:	f24a 3361 	movw	r3, #41825	; 0xa361
    980a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    980e:	701a      	strb	r2, [r3, #0]
    9810:	f24a 3361 	movw	r3, #41825	; 0xa361
    9814:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9818:	781b      	ldrb	r3, [r3, #0]
    981a:	2bff      	cmp	r3, #255	; 0xff
    981c:	d105      	bne.n	982a <send_bat+0x4be>
    981e:	f24a 3361 	movw	r3, #41825	; 0xa361
    9822:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9826:	2200      	movs	r2, #0
    9828:	701a      	strb	r2, [r3, #0]
    982a:	f24a 3361 	movw	r3, #41825	; 0xa361
    982e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9832:	781b      	ldrb	r3, [r3, #0]
    9834:	461a      	mov	r2, r3
    9836:	f24a 63cc 	movw	r3, #42700	; 0xa6cc
    983a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    983e:	7819      	ldrb	r1, [r3, #0]
    9840:	f24a 3364 	movw	r3, #41828	; 0xa364
    9844:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9848:	5499      	strb	r1, [r3, r2]
    984a:	f24a 63cc 	movw	r3, #42700	; 0xa6cc
    984e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9852:	781a      	ldrb	r2, [r3, #0]
    9854:	f24a 4365 	movw	r3, #42085	; 0xa465
    9858:	f2c2 0300 	movt	r3, #8192	; 0x2000
    985c:	781b      	ldrb	r3, [r3, #0]
    985e:	4413      	add	r3, r2
    9860:	b2da      	uxtb	r2, r3
    9862:	f24a 4365 	movw	r3, #42085	; 0xa465
    9866:	f2c2 0300 	movt	r3, #8192	; 0x2000
    986a:	701a      	strb	r2, [r3, #0]
    986c:	f24a 4366 	movw	r3, #42086	; 0xa466
    9870:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9874:	781a      	ldrb	r2, [r3, #0]
    9876:	f24a 4365 	movw	r3, #42085	; 0xa465
    987a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    987e:	781b      	ldrb	r3, [r3, #0]
    9880:	4413      	add	r3, r2
    9882:	b2da      	uxtb	r2, r3
    9884:	f24a 4366 	movw	r3, #42086	; 0xa466
    9888:	f2c2 0300 	movt	r3, #8192	; 0x2000
    988c:	701a      	strb	r2, [r3, #0]
    988e:	f24a 3361 	movw	r3, #41825	; 0xa361
    9892:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9896:	781b      	ldrb	r3, [r3, #0]
    9898:	3301      	adds	r3, #1
    989a:	b2da      	uxtb	r2, r3
    989c:	f24a 3361 	movw	r3, #41825	; 0xa361
    98a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98a4:	701a      	strb	r2, [r3, #0]
    98a6:	f24a 3361 	movw	r3, #41825	; 0xa361
    98aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98ae:	781b      	ldrb	r3, [r3, #0]
    98b0:	2bff      	cmp	r3, #255	; 0xff
    98b2:	d105      	bne.n	98c0 <send_bat+0x554>
    98b4:	f24a 3361 	movw	r3, #41825	; 0xa361
    98b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98bc:	2200      	movs	r2, #0
    98be:	701a      	strb	r2, [r3, #0]
    98c0:	f24a 3361 	movw	r3, #41825	; 0xa361
    98c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98c8:	781b      	ldrb	r3, [r3, #0]
    98ca:	461a      	mov	r2, r3
    98cc:	f24a 63cc 	movw	r3, #42700	; 0xa6cc
    98d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98d4:	7859      	ldrb	r1, [r3, #1]
    98d6:	f24a 3364 	movw	r3, #41828	; 0xa364
    98da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98de:	5499      	strb	r1, [r3, r2]
    98e0:	4b1e      	ldr	r3, [pc, #120]	; (995c <send_bat+0x5f0>)
    98e2:	781a      	ldrb	r2, [r3, #0]
    98e4:	f24a 4365 	movw	r3, #42085	; 0xa465
    98e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98ec:	781b      	ldrb	r3, [r3, #0]
    98ee:	4413      	add	r3, r2
    98f0:	b2da      	uxtb	r2, r3
    98f2:	f24a 4365 	movw	r3, #42085	; 0xa465
    98f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98fa:	701a      	strb	r2, [r3, #0]
    98fc:	f24a 4366 	movw	r3, #42086	; 0xa466
    9900:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9904:	781a      	ldrb	r2, [r3, #0]
    9906:	f24a 4365 	movw	r3, #42085	; 0xa465
    990a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    990e:	781b      	ldrb	r3, [r3, #0]
    9910:	4413      	add	r3, r2
    9912:	b2da      	uxtb	r2, r3
    9914:	f24a 4366 	movw	r3, #42086	; 0xa466
    9918:	f2c2 0300 	movt	r3, #8192	; 0x2000
    991c:	701a      	strb	r2, [r3, #0]
    991e:	f24a 3361 	movw	r3, #41825	; 0xa361
    9922:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9926:	781b      	ldrb	r3, [r3, #0]
    9928:	3301      	adds	r3, #1
    992a:	b2da      	uxtb	r2, r3
    992c:	f24a 3361 	movw	r3, #41825	; 0xa361
    9930:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9934:	701a      	strb	r2, [r3, #0]
    9936:	f24a 3361 	movw	r3, #41825	; 0xa361
    993a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    993e:	781b      	ldrb	r3, [r3, #0]
    9940:	2bff      	cmp	r3, #255	; 0xff
    9942:	d10d      	bne.n	9960 <send_bat+0x5f4>
    9944:	f24a 3361 	movw	r3, #41825	; 0xa361
    9948:	f2c2 0300 	movt	r3, #8192	; 0x2000
    994c:	2200      	movs	r2, #0
    994e:	701a      	strb	r2, [r3, #0]
    9950:	e006      	b.n	9960 <send_bat+0x5f4>
    9952:	bf00      	nop
    9954:	2000a945 	.word	0x2000a945
    9958:	2000a6cf 	.word	0x2000a6cf
    995c:	2000a6cd 	.word	0x2000a6cd
    9960:	f24a 3361 	movw	r3, #41825	; 0xa361
    9964:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9968:	781b      	ldrb	r3, [r3, #0]
    996a:	461a      	mov	r2, r3
    996c:	f24a 4365 	movw	r3, #42085	; 0xa465
    9970:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9974:	7819      	ldrb	r1, [r3, #0]
    9976:	f24a 3364 	movw	r3, #41828	; 0xa364
    997a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    997e:	5499      	strb	r1, [r3, r2]
    9980:	f24a 3361 	movw	r3, #41825	; 0xa361
    9984:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9988:	781b      	ldrb	r3, [r3, #0]
    998a:	3301      	adds	r3, #1
    998c:	b2da      	uxtb	r2, r3
    998e:	f24a 3361 	movw	r3, #41825	; 0xa361
    9992:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9996:	701a      	strb	r2, [r3, #0]
    9998:	f24a 3361 	movw	r3, #41825	; 0xa361
    999c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99a0:	781b      	ldrb	r3, [r3, #0]
    99a2:	2bff      	cmp	r3, #255	; 0xff
    99a4:	d105      	bne.n	99b2 <send_bat+0x646>
    99a6:	f24a 3361 	movw	r3, #41825	; 0xa361
    99aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99ae:	2200      	movs	r2, #0
    99b0:	701a      	strb	r2, [r3, #0]
    99b2:	f24a 3361 	movw	r3, #41825	; 0xa361
    99b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99ba:	781b      	ldrb	r3, [r3, #0]
    99bc:	461a      	mov	r2, r3
    99be:	f24a 4366 	movw	r3, #42086	; 0xa466
    99c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99c6:	7819      	ldrb	r1, [r3, #0]
    99c8:	f24a 3364 	movw	r3, #41828	; 0xa364
    99cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99d0:	5499      	strb	r1, [r3, r2]
    99d2:	f24a 3361 	movw	r3, #41825	; 0xa361
    99d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99da:	781b      	ldrb	r3, [r3, #0]
    99dc:	3301      	adds	r3, #1
    99de:	b2da      	uxtb	r2, r3
    99e0:	f24a 3361 	movw	r3, #41825	; 0xa361
    99e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99e8:	701a      	strb	r2, [r3, #0]
    99ea:	f24a 3361 	movw	r3, #41825	; 0xa361
    99ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99f2:	781b      	ldrb	r3, [r3, #0]
    99f4:	2bff      	cmp	r3, #255	; 0xff
    99f6:	d105      	bne.n	9a04 <send_bat+0x698>
    99f8:	f24a 3361 	movw	r3, #41825	; 0xa361
    99fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a00:	2200      	movs	r2, #0
    9a02:	701a      	strb	r2, [r3, #0]
    9a04:	f242 0339 	movw	r3, #8249	; 0x2039
    9a08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a0c:	781b      	ldrb	r3, [r3, #0]
    9a0e:	b2db      	uxtb	r3, r3
    9a10:	f003 0310 	and.w	r3, r3, #16
    9a14:	2b00      	cmp	r3, #0
    9a16:	d15a      	bne.n	9ace <send_bat+0x762>
    9a18:	f24a 3362 	movw	r3, #41826	; 0xa362
    9a1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a20:	781b      	ldrb	r3, [r3, #0]
    9a22:	b2db      	uxtb	r3, r3
    9a24:	461a      	mov	r2, r3
    9a26:	f24a 3364 	movw	r3, #41828	; 0xa364
    9a2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a2e:	5c9a      	ldrb	r2, [r3, r2]
    9a30:	f24a 4363 	movw	r3, #42083	; 0xa463
    9a34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a38:	701a      	strb	r2, [r3, #0]
    9a3a:	f24a 4364 	movw	r3, #42084	; 0xa464
    9a3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a42:	2200      	movs	r2, #0
    9a44:	701a      	strb	r2, [r3, #0]
    9a46:	f24a 3362 	movw	r3, #41826	; 0xa362
    9a4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a4e:	781b      	ldrb	r3, [r3, #0]
    9a50:	b2db      	uxtb	r3, r3
    9a52:	3301      	adds	r3, #1
    9a54:	b2da      	uxtb	r2, r3
    9a56:	f24a 3362 	movw	r3, #41826	; 0xa362
    9a5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a5e:	701a      	strb	r2, [r3, #0]
    9a60:	f24a 3362 	movw	r3, #41826	; 0xa362
    9a64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a68:	781b      	ldrb	r3, [r3, #0]
    9a6a:	b2db      	uxtb	r3, r3
    9a6c:	2bff      	cmp	r3, #255	; 0xff
    9a6e:	d105      	bne.n	9a7c <send_bat+0x710>
    9a70:	f24a 3362 	movw	r3, #41826	; 0xa362
    9a74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a78:	2200      	movs	r2, #0
    9a7a:	701a      	strb	r2, [r3, #0]
    9a7c:	f242 0338 	movw	r3, #8248	; 0x2038
    9a80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a84:	f242 0238 	movw	r2, #8248	; 0x2038
    9a88:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9a8c:	7812      	ldrb	r2, [r2, #0]
    9a8e:	b2d2      	uxtb	r2, r2
    9a90:	f042 0201 	orr.w	r2, r2, #1
    9a94:	b2d2      	uxtb	r2, r2
    9a96:	701a      	strb	r2, [r3, #0]
    9a98:	f242 0339 	movw	r3, #8249	; 0x2039
    9a9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9aa0:	f242 0239 	movw	r2, #8249	; 0x2039
    9aa4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9aa8:	7812      	ldrb	r2, [r2, #0]
    9aaa:	b2d2      	uxtb	r2, r2
    9aac:	f042 0210 	orr.w	r2, r2, #16
    9ab0:	b2d2      	uxtb	r2, r2
    9ab2:	701a      	strb	r2, [r3, #0]
    9ab4:	e00b      	b.n	9ace <send_bat+0x762>
    9ab6:	f24a 3360 	movw	r3, #41824	; 0xa360
    9aba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9abe:	781b      	ldrb	r3, [r3, #0]
    9ac0:	3301      	adds	r3, #1
    9ac2:	b2da      	uxtb	r2, r3
    9ac4:	f24a 3360 	movw	r3, #41824	; 0xa360
    9ac8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9acc:	701a      	strb	r2, [r3, #0]
}
    9ace:	46bd      	mov	sp, r7
    9ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
    9ad4:	4770      	bx	lr
    9ad6:	bf00      	nop

00009ad8 <send_climb>:
void send_climb(void){  //2000ms
    9ad8:	b480      	push	{r7}
    9ada:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 20 == 18) PERIODIC_SEND_CLIMB_PID();}
    9adc:	f24a 3359 	movw	r3, #41817	; 0xa359
    9ae0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ae4:	781a      	ldrb	r2, [r3, #0]
    9ae6:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    9aea:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    9aee:	fba3 1302 	umull	r1, r3, r3, r2
    9af2:	0919      	lsrs	r1, r3, #4
    9af4:	460b      	mov	r3, r1
    9af6:	009b      	lsls	r3, r3, #2
    9af8:	440b      	add	r3, r1
    9afa:	009b      	lsls	r3, r3, #2
    9afc:	1ad3      	subs	r3, r2, r3
    9afe:	b2db      	uxtb	r3, r3
    9b00:	2b12      	cmp	r3, #18
    9b02:	f040 8554 	bne.w	a5ae <send_climb+0xad6>
    9b06:	f24a 3361 	movw	r3, #41825	; 0xa361
    9b0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b0e:	781a      	ldrb	r2, [r3, #0]
    9b10:	f24a 3362 	movw	r3, #41826	; 0xa362
    9b14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b18:	781b      	ldrb	r3, [r3, #0]
    9b1a:	b2db      	uxtb	r3, r3
    9b1c:	429a      	cmp	r2, r3
    9b1e:	d313      	bcc.n	9b48 <send_climb+0x70>
    9b20:	f24a 3362 	movw	r3, #41826	; 0xa362
    9b24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b28:	781b      	ldrb	r3, [r3, #0]
    9b2a:	b2db      	uxtb	r3, r3
    9b2c:	461a      	mov	r2, r3
    9b2e:	f24a 3361 	movw	r3, #41825	; 0xa361
    9b32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b36:	781b      	ldrb	r3, [r3, #0]
    9b38:	1ad3      	subs	r3, r2, r3
    9b3a:	33ff      	adds	r3, #255	; 0xff
    9b3c:	2b12      	cmp	r3, #18
    9b3e:	bfd4      	ite	le
    9b40:	2300      	movle	r3, #0
    9b42:	2301      	movgt	r3, #1
    9b44:	b2db      	uxtb	r3, r3
    9b46:	e011      	b.n	9b6c <send_climb+0x94>
    9b48:	f24a 3362 	movw	r3, #41826	; 0xa362
    9b4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b50:	781b      	ldrb	r3, [r3, #0]
    9b52:	b2db      	uxtb	r3, r3
    9b54:	461a      	mov	r2, r3
    9b56:	f24a 3361 	movw	r3, #41825	; 0xa361
    9b5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b5e:	781b      	ldrb	r3, [r3, #0]
    9b60:	1ad3      	subs	r3, r2, r3
    9b62:	2b12      	cmp	r3, #18
    9b64:	bfd4      	ite	le
    9b66:	2300      	movle	r3, #0
    9b68:	2301      	movgt	r3, #1
    9b6a:	b2db      	uxtb	r3, r3
    9b6c:	2b00      	cmp	r3, #0
    9b6e:	f000 8512 	beq.w	a596 <send_climb+0xabe>
    9b72:	f24a 3361 	movw	r3, #41825	; 0xa361
    9b76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b7a:	781b      	ldrb	r3, [r3, #0]
    9b7c:	461a      	mov	r2, r3
    9b7e:	f24a 3364 	movw	r3, #41828	; 0xa364
    9b82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b86:	2105      	movs	r1, #5
    9b88:	5499      	strb	r1, [r3, r2]
    9b8a:	f24a 3361 	movw	r3, #41825	; 0xa361
    9b8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b92:	781b      	ldrb	r3, [r3, #0]
    9b94:	3301      	adds	r3, #1
    9b96:	b2da      	uxtb	r2, r3
    9b98:	f24a 3361 	movw	r3, #41825	; 0xa361
    9b9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ba0:	701a      	strb	r2, [r3, #0]
    9ba2:	f24a 3361 	movw	r3, #41825	; 0xa361
    9ba6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9baa:	781b      	ldrb	r3, [r3, #0]
    9bac:	2bff      	cmp	r3, #255	; 0xff
    9bae:	d105      	bne.n	9bbc <send_climb+0xe4>
    9bb0:	f24a 3361 	movw	r3, #41825	; 0xa361
    9bb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bb8:	2200      	movs	r2, #0
    9bba:	701a      	strb	r2, [r3, #0]
    9bbc:	f24a 3361 	movw	r3, #41825	; 0xa361
    9bc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bc4:	781b      	ldrb	r3, [r3, #0]
    9bc6:	461a      	mov	r2, r3
    9bc8:	f24a 3364 	movw	r3, #41828	; 0xa364
    9bcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bd0:	210e      	movs	r1, #14
    9bd2:	5499      	strb	r1, [r3, r2]
    9bd4:	f24a 3361 	movw	r3, #41825	; 0xa361
    9bd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bdc:	781b      	ldrb	r3, [r3, #0]
    9bde:	3301      	adds	r3, #1
    9be0:	b2da      	uxtb	r2, r3
    9be2:	f24a 3361 	movw	r3, #41825	; 0xa361
    9be6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bea:	701a      	strb	r2, [r3, #0]
    9bec:	f24a 3361 	movw	r3, #41825	; 0xa361
    9bf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bf4:	781b      	ldrb	r3, [r3, #0]
    9bf6:	2bff      	cmp	r3, #255	; 0xff
    9bf8:	d105      	bne.n	9c06 <send_climb+0x12e>
    9bfa:	f24a 3361 	movw	r3, #41825	; 0xa361
    9bfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c02:	2200      	movs	r2, #0
    9c04:	701a      	strb	r2, [r3, #0]
    9c06:	f24a 4365 	movw	r3, #42085	; 0xa465
    9c0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c0e:	220e      	movs	r2, #14
    9c10:	701a      	strb	r2, [r3, #0]
    9c12:	f24a 4366 	movw	r3, #42086	; 0xa466
    9c16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c1a:	220e      	movs	r2, #14
    9c1c:	701a      	strb	r2, [r3, #0]
    9c1e:	f24a 3361 	movw	r3, #41825	; 0xa361
    9c22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c26:	781b      	ldrb	r3, [r3, #0]
    9c28:	461a      	mov	r2, r3
    9c2a:	f24a 6394 	movw	r3, #42644	; 0xa694
    9c2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c32:	7819      	ldrb	r1, [r3, #0]
    9c34:	f24a 3364 	movw	r3, #41828	; 0xa364
    9c38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c3c:	5499      	strb	r1, [r3, r2]
    9c3e:	f24a 6394 	movw	r3, #42644	; 0xa694
    9c42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c46:	781a      	ldrb	r2, [r3, #0]
    9c48:	f24a 4365 	movw	r3, #42085	; 0xa465
    9c4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c50:	781b      	ldrb	r3, [r3, #0]
    9c52:	4413      	add	r3, r2
    9c54:	b2da      	uxtb	r2, r3
    9c56:	f24a 4365 	movw	r3, #42085	; 0xa465
    9c5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c5e:	701a      	strb	r2, [r3, #0]
    9c60:	f24a 4366 	movw	r3, #42086	; 0xa466
    9c64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c68:	781a      	ldrb	r2, [r3, #0]
    9c6a:	f24a 4365 	movw	r3, #42085	; 0xa465
    9c6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c72:	781b      	ldrb	r3, [r3, #0]
    9c74:	4413      	add	r3, r2
    9c76:	b2da      	uxtb	r2, r3
    9c78:	f24a 4366 	movw	r3, #42086	; 0xa466
    9c7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c80:	701a      	strb	r2, [r3, #0]
    9c82:	f24a 3361 	movw	r3, #41825	; 0xa361
    9c86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c8a:	781b      	ldrb	r3, [r3, #0]
    9c8c:	3301      	adds	r3, #1
    9c8e:	b2da      	uxtb	r2, r3
    9c90:	f24a 3361 	movw	r3, #41825	; 0xa361
    9c94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c98:	701a      	strb	r2, [r3, #0]
    9c9a:	f24a 3361 	movw	r3, #41825	; 0xa361
    9c9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ca2:	781b      	ldrb	r3, [r3, #0]
    9ca4:	2bff      	cmp	r3, #255	; 0xff
    9ca6:	d105      	bne.n	9cb4 <send_climb+0x1dc>
    9ca8:	f24a 3361 	movw	r3, #41825	; 0xa361
    9cac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9cb0:	2200      	movs	r2, #0
    9cb2:	701a      	strb	r2, [r3, #0]
    9cb4:	f24a 3361 	movw	r3, #41825	; 0xa361
    9cb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9cbc:	781b      	ldrb	r3, [r3, #0]
    9cbe:	461a      	mov	r2, r3
    9cc0:	f24a 6394 	movw	r3, #42644	; 0xa694
    9cc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9cc8:	7859      	ldrb	r1, [r3, #1]
    9cca:	f24a 3364 	movw	r3, #41828	; 0xa364
    9cce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9cd2:	5499      	strb	r1, [r3, r2]
    9cd4:	4bd3      	ldr	r3, [pc, #844]	; (a024 <send_climb+0x54c>)
    9cd6:	781a      	ldrb	r2, [r3, #0]
    9cd8:	f24a 4365 	movw	r3, #42085	; 0xa465
    9cdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ce0:	781b      	ldrb	r3, [r3, #0]
    9ce2:	4413      	add	r3, r2
    9ce4:	b2da      	uxtb	r2, r3
    9ce6:	f24a 4365 	movw	r3, #42085	; 0xa465
    9cea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9cee:	701a      	strb	r2, [r3, #0]
    9cf0:	f24a 4366 	movw	r3, #42086	; 0xa466
    9cf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9cf8:	781a      	ldrb	r2, [r3, #0]
    9cfa:	f24a 4365 	movw	r3, #42085	; 0xa465
    9cfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d02:	781b      	ldrb	r3, [r3, #0]
    9d04:	4413      	add	r3, r2
    9d06:	b2da      	uxtb	r2, r3
    9d08:	f24a 4366 	movw	r3, #42086	; 0xa466
    9d0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d10:	701a      	strb	r2, [r3, #0]
    9d12:	f24a 3361 	movw	r3, #41825	; 0xa361
    9d16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d1a:	781b      	ldrb	r3, [r3, #0]
    9d1c:	3301      	adds	r3, #1
    9d1e:	b2da      	uxtb	r2, r3
    9d20:	f24a 3361 	movw	r3, #41825	; 0xa361
    9d24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d28:	701a      	strb	r2, [r3, #0]
    9d2a:	f24a 3361 	movw	r3, #41825	; 0xa361
    9d2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d32:	781b      	ldrb	r3, [r3, #0]
    9d34:	2bff      	cmp	r3, #255	; 0xff
    9d36:	d105      	bne.n	9d44 <send_climb+0x26c>
    9d38:	f24a 3361 	movw	r3, #41825	; 0xa361
    9d3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d40:	2200      	movs	r2, #0
    9d42:	701a      	strb	r2, [r3, #0]
    9d44:	f24a 3361 	movw	r3, #41825	; 0xa361
    9d48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d4c:	781b      	ldrb	r3, [r3, #0]
    9d4e:	461a      	mov	r2, r3
    9d50:	f24a 63a8 	movw	r3, #42664	; 0xa6a8
    9d54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d58:	7819      	ldrb	r1, [r3, #0]
    9d5a:	f24a 3364 	movw	r3, #41828	; 0xa364
    9d5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d62:	5499      	strb	r1, [r3, r2]
    9d64:	f24a 63a8 	movw	r3, #42664	; 0xa6a8
    9d68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d6c:	781a      	ldrb	r2, [r3, #0]
    9d6e:	f24a 4365 	movw	r3, #42085	; 0xa465
    9d72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d76:	781b      	ldrb	r3, [r3, #0]
    9d78:	4413      	add	r3, r2
    9d7a:	b2da      	uxtb	r2, r3
    9d7c:	f24a 4365 	movw	r3, #42085	; 0xa465
    9d80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d84:	701a      	strb	r2, [r3, #0]
    9d86:	f24a 4366 	movw	r3, #42086	; 0xa466
    9d8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d8e:	781a      	ldrb	r2, [r3, #0]
    9d90:	f24a 4365 	movw	r3, #42085	; 0xa465
    9d94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d98:	781b      	ldrb	r3, [r3, #0]
    9d9a:	4413      	add	r3, r2
    9d9c:	b2da      	uxtb	r2, r3
    9d9e:	f24a 4366 	movw	r3, #42086	; 0xa466
    9da2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9da6:	701a      	strb	r2, [r3, #0]
    9da8:	f24a 3361 	movw	r3, #41825	; 0xa361
    9dac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9db0:	781b      	ldrb	r3, [r3, #0]
    9db2:	3301      	adds	r3, #1
    9db4:	b2da      	uxtb	r2, r3
    9db6:	f24a 3361 	movw	r3, #41825	; 0xa361
    9dba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9dbe:	701a      	strb	r2, [r3, #0]
    9dc0:	f24a 3361 	movw	r3, #41825	; 0xa361
    9dc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9dc8:	781b      	ldrb	r3, [r3, #0]
    9dca:	2bff      	cmp	r3, #255	; 0xff
    9dcc:	d105      	bne.n	9dda <send_climb+0x302>
    9dce:	f24a 3361 	movw	r3, #41825	; 0xa361
    9dd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9dd6:	2200      	movs	r2, #0
    9dd8:	701a      	strb	r2, [r3, #0]
    9dda:	f24a 3361 	movw	r3, #41825	; 0xa361
    9dde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9de2:	781b      	ldrb	r3, [r3, #0]
    9de4:	461a      	mov	r2, r3
    9de6:	f24a 63a8 	movw	r3, #42664	; 0xa6a8
    9dea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9dee:	7859      	ldrb	r1, [r3, #1]
    9df0:	f24a 3364 	movw	r3, #41828	; 0xa364
    9df4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9df8:	5499      	strb	r1, [r3, r2]
    9dfa:	4b8b      	ldr	r3, [pc, #556]	; (a028 <send_climb+0x550>)
    9dfc:	781a      	ldrb	r2, [r3, #0]
    9dfe:	f24a 4365 	movw	r3, #42085	; 0xa465
    9e02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e06:	781b      	ldrb	r3, [r3, #0]
    9e08:	4413      	add	r3, r2
    9e0a:	b2da      	uxtb	r2, r3
    9e0c:	f24a 4365 	movw	r3, #42085	; 0xa465
    9e10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e14:	701a      	strb	r2, [r3, #0]
    9e16:	f24a 4366 	movw	r3, #42086	; 0xa466
    9e1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e1e:	781a      	ldrb	r2, [r3, #0]
    9e20:	f24a 4365 	movw	r3, #42085	; 0xa465
    9e24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e28:	781b      	ldrb	r3, [r3, #0]
    9e2a:	4413      	add	r3, r2
    9e2c:	b2da      	uxtb	r2, r3
    9e2e:	f24a 4366 	movw	r3, #42086	; 0xa466
    9e32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e36:	701a      	strb	r2, [r3, #0]
    9e38:	f24a 3361 	movw	r3, #41825	; 0xa361
    9e3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e40:	781b      	ldrb	r3, [r3, #0]
    9e42:	3301      	adds	r3, #1
    9e44:	b2da      	uxtb	r2, r3
    9e46:	f24a 3361 	movw	r3, #41825	; 0xa361
    9e4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e4e:	701a      	strb	r2, [r3, #0]
    9e50:	f24a 3361 	movw	r3, #41825	; 0xa361
    9e54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e58:	781b      	ldrb	r3, [r3, #0]
    9e5a:	2bff      	cmp	r3, #255	; 0xff
    9e5c:	d105      	bne.n	9e6a <send_climb+0x392>
    9e5e:	f24a 3361 	movw	r3, #41825	; 0xa361
    9e62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e66:	2200      	movs	r2, #0
    9e68:	701a      	strb	r2, [r3, #0]
    9e6a:	f24a 3361 	movw	r3, #41825	; 0xa361
    9e6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e72:	781b      	ldrb	r3, [r3, #0]
    9e74:	461a      	mov	r2, r3
    9e76:	f24a 63a8 	movw	r3, #42664	; 0xa6a8
    9e7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e7e:	7899      	ldrb	r1, [r3, #2]
    9e80:	f24a 3364 	movw	r3, #41828	; 0xa364
    9e84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e88:	5499      	strb	r1, [r3, r2]
    9e8a:	4b68      	ldr	r3, [pc, #416]	; (a02c <send_climb+0x554>)
    9e8c:	781a      	ldrb	r2, [r3, #0]
    9e8e:	f24a 4365 	movw	r3, #42085	; 0xa465
    9e92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e96:	781b      	ldrb	r3, [r3, #0]
    9e98:	4413      	add	r3, r2
    9e9a:	b2da      	uxtb	r2, r3
    9e9c:	f24a 4365 	movw	r3, #42085	; 0xa465
    9ea0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ea4:	701a      	strb	r2, [r3, #0]
    9ea6:	f24a 4366 	movw	r3, #42086	; 0xa466
    9eaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9eae:	781a      	ldrb	r2, [r3, #0]
    9eb0:	f24a 4365 	movw	r3, #42085	; 0xa465
    9eb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9eb8:	781b      	ldrb	r3, [r3, #0]
    9eba:	4413      	add	r3, r2
    9ebc:	b2da      	uxtb	r2, r3
    9ebe:	f24a 4366 	movw	r3, #42086	; 0xa466
    9ec2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ec6:	701a      	strb	r2, [r3, #0]
    9ec8:	f24a 3361 	movw	r3, #41825	; 0xa361
    9ecc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ed0:	781b      	ldrb	r3, [r3, #0]
    9ed2:	3301      	adds	r3, #1
    9ed4:	b2da      	uxtb	r2, r3
    9ed6:	f24a 3361 	movw	r3, #41825	; 0xa361
    9eda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ede:	701a      	strb	r2, [r3, #0]
    9ee0:	f24a 3361 	movw	r3, #41825	; 0xa361
    9ee4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ee8:	781b      	ldrb	r3, [r3, #0]
    9eea:	2bff      	cmp	r3, #255	; 0xff
    9eec:	d105      	bne.n	9efa <send_climb+0x422>
    9eee:	f24a 3361 	movw	r3, #41825	; 0xa361
    9ef2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ef6:	2200      	movs	r2, #0
    9ef8:	701a      	strb	r2, [r3, #0]
    9efa:	f24a 3361 	movw	r3, #41825	; 0xa361
    9efe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f02:	781b      	ldrb	r3, [r3, #0]
    9f04:	461a      	mov	r2, r3
    9f06:	f24a 63a8 	movw	r3, #42664	; 0xa6a8
    9f0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f0e:	78d9      	ldrb	r1, [r3, #3]
    9f10:	f24a 3364 	movw	r3, #41828	; 0xa364
    9f14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f18:	5499      	strb	r1, [r3, r2]
    9f1a:	4b45      	ldr	r3, [pc, #276]	; (a030 <send_climb+0x558>)
    9f1c:	781a      	ldrb	r2, [r3, #0]
    9f1e:	f24a 4365 	movw	r3, #42085	; 0xa465
    9f22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f26:	781b      	ldrb	r3, [r3, #0]
    9f28:	4413      	add	r3, r2
    9f2a:	b2da      	uxtb	r2, r3
    9f2c:	f24a 4365 	movw	r3, #42085	; 0xa465
    9f30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f34:	701a      	strb	r2, [r3, #0]
    9f36:	f24a 4366 	movw	r3, #42086	; 0xa466
    9f3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f3e:	781a      	ldrb	r2, [r3, #0]
    9f40:	f24a 4365 	movw	r3, #42085	; 0xa465
    9f44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f48:	781b      	ldrb	r3, [r3, #0]
    9f4a:	4413      	add	r3, r2
    9f4c:	b2da      	uxtb	r2, r3
    9f4e:	f24a 4366 	movw	r3, #42086	; 0xa466
    9f52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f56:	701a      	strb	r2, [r3, #0]
    9f58:	f24a 3361 	movw	r3, #41825	; 0xa361
    9f5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f60:	781b      	ldrb	r3, [r3, #0]
    9f62:	3301      	adds	r3, #1
    9f64:	b2da      	uxtb	r2, r3
    9f66:	f24a 3361 	movw	r3, #41825	; 0xa361
    9f6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f6e:	701a      	strb	r2, [r3, #0]
    9f70:	f24a 3361 	movw	r3, #41825	; 0xa361
    9f74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f78:	781b      	ldrb	r3, [r3, #0]
    9f7a:	2bff      	cmp	r3, #255	; 0xff
    9f7c:	d105      	bne.n	9f8a <send_climb+0x4b2>
    9f7e:	f24a 3361 	movw	r3, #41825	; 0xa361
    9f82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f86:	2200      	movs	r2, #0
    9f88:	701a      	strb	r2, [r3, #0]
    9f8a:	f24a 3361 	movw	r3, #41825	; 0xa361
    9f8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f92:	781b      	ldrb	r3, [r3, #0]
    9f94:	461a      	mov	r2, r3
    9f96:	f24a 63b0 	movw	r3, #42672	; 0xa6b0
    9f9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f9e:	7819      	ldrb	r1, [r3, #0]
    9fa0:	f24a 3364 	movw	r3, #41828	; 0xa364
    9fa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9fa8:	5499      	strb	r1, [r3, r2]
    9faa:	f24a 63b0 	movw	r3, #42672	; 0xa6b0
    9fae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9fb2:	781a      	ldrb	r2, [r3, #0]
    9fb4:	f24a 4365 	movw	r3, #42085	; 0xa465
    9fb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9fbc:	781b      	ldrb	r3, [r3, #0]
    9fbe:	4413      	add	r3, r2
    9fc0:	b2da      	uxtb	r2, r3
    9fc2:	f24a 4365 	movw	r3, #42085	; 0xa465
    9fc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9fca:	701a      	strb	r2, [r3, #0]
    9fcc:	f24a 4366 	movw	r3, #42086	; 0xa466
    9fd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9fd4:	781a      	ldrb	r2, [r3, #0]
    9fd6:	f24a 4365 	movw	r3, #42085	; 0xa465
    9fda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9fde:	781b      	ldrb	r3, [r3, #0]
    9fe0:	4413      	add	r3, r2
    9fe2:	b2da      	uxtb	r2, r3
    9fe4:	f24a 4366 	movw	r3, #42086	; 0xa466
    9fe8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9fec:	701a      	strb	r2, [r3, #0]
    9fee:	f24a 3361 	movw	r3, #41825	; 0xa361
    9ff2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ff6:	781b      	ldrb	r3, [r3, #0]
    9ff8:	3301      	adds	r3, #1
    9ffa:	b2da      	uxtb	r2, r3
    9ffc:	f24a 3361 	movw	r3, #41825	; 0xa361
    a000:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a004:	701a      	strb	r2, [r3, #0]
    a006:	f24a 3361 	movw	r3, #41825	; 0xa361
    a00a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a00e:	781b      	ldrb	r3, [r3, #0]
    a010:	2bff      	cmp	r3, #255	; 0xff
    a012:	d10f      	bne.n	a034 <send_climb+0x55c>
    a014:	f24a 3361 	movw	r3, #41825	; 0xa361
    a018:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a01c:	2200      	movs	r2, #0
    a01e:	701a      	strb	r2, [r3, #0]
    a020:	e008      	b.n	a034 <send_climb+0x55c>
    a022:	bf00      	nop
    a024:	2000a695 	.word	0x2000a695
    a028:	2000a6a9 	.word	0x2000a6a9
    a02c:	2000a6aa 	.word	0x2000a6aa
    a030:	2000a6ab 	.word	0x2000a6ab
    a034:	f24a 3361 	movw	r3, #41825	; 0xa361
    a038:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a03c:	781b      	ldrb	r3, [r3, #0]
    a03e:	461a      	mov	r2, r3
    a040:	f24a 63b0 	movw	r3, #42672	; 0xa6b0
    a044:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a048:	7859      	ldrb	r1, [r3, #1]
    a04a:	f24a 3364 	movw	r3, #41828	; 0xa364
    a04e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a052:	5499      	strb	r1, [r3, r2]
    a054:	4bd1      	ldr	r3, [pc, #836]	; (a39c <send_climb+0x8c4>)
    a056:	781a      	ldrb	r2, [r3, #0]
    a058:	f24a 4365 	movw	r3, #42085	; 0xa465
    a05c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a060:	781b      	ldrb	r3, [r3, #0]
    a062:	4413      	add	r3, r2
    a064:	b2da      	uxtb	r2, r3
    a066:	f24a 4365 	movw	r3, #42085	; 0xa465
    a06a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a06e:	701a      	strb	r2, [r3, #0]
    a070:	f24a 4366 	movw	r3, #42086	; 0xa466
    a074:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a078:	781a      	ldrb	r2, [r3, #0]
    a07a:	f24a 4365 	movw	r3, #42085	; 0xa465
    a07e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a082:	781b      	ldrb	r3, [r3, #0]
    a084:	4413      	add	r3, r2
    a086:	b2da      	uxtb	r2, r3
    a088:	f24a 4366 	movw	r3, #42086	; 0xa466
    a08c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a090:	701a      	strb	r2, [r3, #0]
    a092:	f24a 3361 	movw	r3, #41825	; 0xa361
    a096:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a09a:	781b      	ldrb	r3, [r3, #0]
    a09c:	3301      	adds	r3, #1
    a09e:	b2da      	uxtb	r2, r3
    a0a0:	f24a 3361 	movw	r3, #41825	; 0xa361
    a0a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0a8:	701a      	strb	r2, [r3, #0]
    a0aa:	f24a 3361 	movw	r3, #41825	; 0xa361
    a0ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0b2:	781b      	ldrb	r3, [r3, #0]
    a0b4:	2bff      	cmp	r3, #255	; 0xff
    a0b6:	d105      	bne.n	a0c4 <send_climb+0x5ec>
    a0b8:	f24a 3361 	movw	r3, #41825	; 0xa361
    a0bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0c0:	2200      	movs	r2, #0
    a0c2:	701a      	strb	r2, [r3, #0]
    a0c4:	f24a 3361 	movw	r3, #41825	; 0xa361
    a0c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0cc:	781b      	ldrb	r3, [r3, #0]
    a0ce:	461a      	mov	r2, r3
    a0d0:	f24a 63b0 	movw	r3, #42672	; 0xa6b0
    a0d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0d8:	7899      	ldrb	r1, [r3, #2]
    a0da:	f24a 3364 	movw	r3, #41828	; 0xa364
    a0de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0e2:	5499      	strb	r1, [r3, r2]
    a0e4:	4bae      	ldr	r3, [pc, #696]	; (a3a0 <send_climb+0x8c8>)
    a0e6:	781a      	ldrb	r2, [r3, #0]
    a0e8:	f24a 4365 	movw	r3, #42085	; 0xa465
    a0ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0f0:	781b      	ldrb	r3, [r3, #0]
    a0f2:	4413      	add	r3, r2
    a0f4:	b2da      	uxtb	r2, r3
    a0f6:	f24a 4365 	movw	r3, #42085	; 0xa465
    a0fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0fe:	701a      	strb	r2, [r3, #0]
    a100:	f24a 4366 	movw	r3, #42086	; 0xa466
    a104:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a108:	781a      	ldrb	r2, [r3, #0]
    a10a:	f24a 4365 	movw	r3, #42085	; 0xa465
    a10e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a112:	781b      	ldrb	r3, [r3, #0]
    a114:	4413      	add	r3, r2
    a116:	b2da      	uxtb	r2, r3
    a118:	f24a 4366 	movw	r3, #42086	; 0xa466
    a11c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a120:	701a      	strb	r2, [r3, #0]
    a122:	f24a 3361 	movw	r3, #41825	; 0xa361
    a126:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a12a:	781b      	ldrb	r3, [r3, #0]
    a12c:	3301      	adds	r3, #1
    a12e:	b2da      	uxtb	r2, r3
    a130:	f24a 3361 	movw	r3, #41825	; 0xa361
    a134:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a138:	701a      	strb	r2, [r3, #0]
    a13a:	f24a 3361 	movw	r3, #41825	; 0xa361
    a13e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a142:	781b      	ldrb	r3, [r3, #0]
    a144:	2bff      	cmp	r3, #255	; 0xff
    a146:	d105      	bne.n	a154 <send_climb+0x67c>
    a148:	f24a 3361 	movw	r3, #41825	; 0xa361
    a14c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a150:	2200      	movs	r2, #0
    a152:	701a      	strb	r2, [r3, #0]
    a154:	f24a 3361 	movw	r3, #41825	; 0xa361
    a158:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a15c:	781b      	ldrb	r3, [r3, #0]
    a15e:	461a      	mov	r2, r3
    a160:	f24a 63b0 	movw	r3, #42672	; 0xa6b0
    a164:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a168:	78d9      	ldrb	r1, [r3, #3]
    a16a:	f24a 3364 	movw	r3, #41828	; 0xa364
    a16e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a172:	5499      	strb	r1, [r3, r2]
    a174:	4b8b      	ldr	r3, [pc, #556]	; (a3a4 <send_climb+0x8cc>)
    a176:	781a      	ldrb	r2, [r3, #0]
    a178:	f24a 4365 	movw	r3, #42085	; 0xa465
    a17c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a180:	781b      	ldrb	r3, [r3, #0]
    a182:	4413      	add	r3, r2
    a184:	b2da      	uxtb	r2, r3
    a186:	f24a 4365 	movw	r3, #42085	; 0xa465
    a18a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a18e:	701a      	strb	r2, [r3, #0]
    a190:	f24a 4366 	movw	r3, #42086	; 0xa466
    a194:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a198:	781a      	ldrb	r2, [r3, #0]
    a19a:	f24a 4365 	movw	r3, #42085	; 0xa465
    a19e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1a2:	781b      	ldrb	r3, [r3, #0]
    a1a4:	4413      	add	r3, r2
    a1a6:	b2da      	uxtb	r2, r3
    a1a8:	f24a 4366 	movw	r3, #42086	; 0xa466
    a1ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1b0:	701a      	strb	r2, [r3, #0]
    a1b2:	f24a 3361 	movw	r3, #41825	; 0xa361
    a1b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1ba:	781b      	ldrb	r3, [r3, #0]
    a1bc:	3301      	adds	r3, #1
    a1be:	b2da      	uxtb	r2, r3
    a1c0:	f24a 3361 	movw	r3, #41825	; 0xa361
    a1c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1c8:	701a      	strb	r2, [r3, #0]
    a1ca:	f24a 3361 	movw	r3, #41825	; 0xa361
    a1ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1d2:	781b      	ldrb	r3, [r3, #0]
    a1d4:	2bff      	cmp	r3, #255	; 0xff
    a1d6:	d105      	bne.n	a1e4 <send_climb+0x70c>
    a1d8:	f24a 3361 	movw	r3, #41825	; 0xa361
    a1dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1e0:	2200      	movs	r2, #0
    a1e2:	701a      	strb	r2, [r3, #0]
    a1e4:	f24a 3361 	movw	r3, #41825	; 0xa361
    a1e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1ec:	781b      	ldrb	r3, [r3, #0]
    a1ee:	461a      	mov	r2, r3
    a1f0:	f247 3300 	movw	r3, #29440	; 0x7300
    a1f4:	f2c0 0301 	movt	r3, #1
    a1f8:	7819      	ldrb	r1, [r3, #0]
    a1fa:	f24a 3364 	movw	r3, #41828	; 0xa364
    a1fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a202:	5499      	strb	r1, [r3, r2]
    a204:	f247 3300 	movw	r3, #29440	; 0x7300
    a208:	f2c0 0301 	movt	r3, #1
    a20c:	781a      	ldrb	r2, [r3, #0]
    a20e:	f24a 4365 	movw	r3, #42085	; 0xa465
    a212:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a216:	781b      	ldrb	r3, [r3, #0]
    a218:	4413      	add	r3, r2
    a21a:	b2da      	uxtb	r2, r3
    a21c:	f24a 4365 	movw	r3, #42085	; 0xa465
    a220:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a224:	701a      	strb	r2, [r3, #0]
    a226:	f24a 4366 	movw	r3, #42086	; 0xa466
    a22a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a22e:	781a      	ldrb	r2, [r3, #0]
    a230:	f24a 4365 	movw	r3, #42085	; 0xa465
    a234:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a238:	781b      	ldrb	r3, [r3, #0]
    a23a:	4413      	add	r3, r2
    a23c:	b2da      	uxtb	r2, r3
    a23e:	f24a 4366 	movw	r3, #42086	; 0xa466
    a242:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a246:	701a      	strb	r2, [r3, #0]
    a248:	f24a 3361 	movw	r3, #41825	; 0xa361
    a24c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a250:	781b      	ldrb	r3, [r3, #0]
    a252:	3301      	adds	r3, #1
    a254:	b2da      	uxtb	r2, r3
    a256:	f24a 3361 	movw	r3, #41825	; 0xa361
    a25a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a25e:	701a      	strb	r2, [r3, #0]
    a260:	f24a 3361 	movw	r3, #41825	; 0xa361
    a264:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a268:	781b      	ldrb	r3, [r3, #0]
    a26a:	2bff      	cmp	r3, #255	; 0xff
    a26c:	d105      	bne.n	a27a <send_climb+0x7a2>
    a26e:	f24a 3361 	movw	r3, #41825	; 0xa361
    a272:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a276:	2200      	movs	r2, #0
    a278:	701a      	strb	r2, [r3, #0]
    a27a:	f24a 3361 	movw	r3, #41825	; 0xa361
    a27e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a282:	781b      	ldrb	r3, [r3, #0]
    a284:	461a      	mov	r2, r3
    a286:	f247 3300 	movw	r3, #29440	; 0x7300
    a28a:	f2c0 0301 	movt	r3, #1
    a28e:	7859      	ldrb	r1, [r3, #1]
    a290:	f24a 3364 	movw	r3, #41828	; 0xa364
    a294:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a298:	5499      	strb	r1, [r3, r2]
    a29a:	4b43      	ldr	r3, [pc, #268]	; (a3a8 <send_climb+0x8d0>)
    a29c:	781a      	ldrb	r2, [r3, #0]
    a29e:	f24a 4365 	movw	r3, #42085	; 0xa465
    a2a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2a6:	781b      	ldrb	r3, [r3, #0]
    a2a8:	4413      	add	r3, r2
    a2aa:	b2da      	uxtb	r2, r3
    a2ac:	f24a 4365 	movw	r3, #42085	; 0xa465
    a2b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2b4:	701a      	strb	r2, [r3, #0]
    a2b6:	f24a 4366 	movw	r3, #42086	; 0xa466
    a2ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2be:	781a      	ldrb	r2, [r3, #0]
    a2c0:	f24a 4365 	movw	r3, #42085	; 0xa465
    a2c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2c8:	781b      	ldrb	r3, [r3, #0]
    a2ca:	4413      	add	r3, r2
    a2cc:	b2da      	uxtb	r2, r3
    a2ce:	f24a 4366 	movw	r3, #42086	; 0xa466
    a2d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2d6:	701a      	strb	r2, [r3, #0]
    a2d8:	f24a 3361 	movw	r3, #41825	; 0xa361
    a2dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2e0:	781b      	ldrb	r3, [r3, #0]
    a2e2:	3301      	adds	r3, #1
    a2e4:	b2da      	uxtb	r2, r3
    a2e6:	f24a 3361 	movw	r3, #41825	; 0xa361
    a2ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2ee:	701a      	strb	r2, [r3, #0]
    a2f0:	f24a 3361 	movw	r3, #41825	; 0xa361
    a2f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2f8:	781b      	ldrb	r3, [r3, #0]
    a2fa:	2bff      	cmp	r3, #255	; 0xff
    a2fc:	d105      	bne.n	a30a <send_climb+0x832>
    a2fe:	f24a 3361 	movw	r3, #41825	; 0xa361
    a302:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a306:	2200      	movs	r2, #0
    a308:	701a      	strb	r2, [r3, #0]
    a30a:	f24a 3361 	movw	r3, #41825	; 0xa361
    a30e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a312:	781b      	ldrb	r3, [r3, #0]
    a314:	461a      	mov	r2, r3
    a316:	f247 3300 	movw	r3, #29440	; 0x7300
    a31a:	f2c0 0301 	movt	r3, #1
    a31e:	7899      	ldrb	r1, [r3, #2]
    a320:	f24a 3364 	movw	r3, #41828	; 0xa364
    a324:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a328:	5499      	strb	r1, [r3, r2]
    a32a:	4b20      	ldr	r3, [pc, #128]	; (a3ac <send_climb+0x8d4>)
    a32c:	781a      	ldrb	r2, [r3, #0]
    a32e:	f24a 4365 	movw	r3, #42085	; 0xa465
    a332:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a336:	781b      	ldrb	r3, [r3, #0]
    a338:	4413      	add	r3, r2
    a33a:	b2da      	uxtb	r2, r3
    a33c:	f24a 4365 	movw	r3, #42085	; 0xa465
    a340:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a344:	701a      	strb	r2, [r3, #0]
    a346:	f24a 4366 	movw	r3, #42086	; 0xa466
    a34a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a34e:	781a      	ldrb	r2, [r3, #0]
    a350:	f24a 4365 	movw	r3, #42085	; 0xa465
    a354:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a358:	781b      	ldrb	r3, [r3, #0]
    a35a:	4413      	add	r3, r2
    a35c:	b2da      	uxtb	r2, r3
    a35e:	f24a 4366 	movw	r3, #42086	; 0xa466
    a362:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a366:	701a      	strb	r2, [r3, #0]
    a368:	f24a 3361 	movw	r3, #41825	; 0xa361
    a36c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a370:	781b      	ldrb	r3, [r3, #0]
    a372:	3301      	adds	r3, #1
    a374:	b2da      	uxtb	r2, r3
    a376:	f24a 3361 	movw	r3, #41825	; 0xa361
    a37a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a37e:	701a      	strb	r2, [r3, #0]
    a380:	f24a 3361 	movw	r3, #41825	; 0xa361
    a384:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a388:	781b      	ldrb	r3, [r3, #0]
    a38a:	2bff      	cmp	r3, #255	; 0xff
    a38c:	d110      	bne.n	a3b0 <send_climb+0x8d8>
    a38e:	f24a 3361 	movw	r3, #41825	; 0xa361
    a392:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a396:	2200      	movs	r2, #0
    a398:	701a      	strb	r2, [r3, #0]
    a39a:	e009      	b.n	a3b0 <send_climb+0x8d8>
    a39c:	2000a6b1 	.word	0x2000a6b1
    a3a0:	2000a6b2 	.word	0x2000a6b2
    a3a4:	2000a6b3 	.word	0x2000a6b3
    a3a8:	00017301 	.word	0x00017301
    a3ac:	00017302 	.word	0x00017302
    a3b0:	f24a 3361 	movw	r3, #41825	; 0xa361
    a3b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3b8:	781b      	ldrb	r3, [r3, #0]
    a3ba:	461a      	mov	r2, r3
    a3bc:	f247 3300 	movw	r3, #29440	; 0x7300
    a3c0:	f2c0 0301 	movt	r3, #1
    a3c4:	78d9      	ldrb	r1, [r3, #3]
    a3c6:	f24a 3364 	movw	r3, #41828	; 0xa364
    a3ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3ce:	5499      	strb	r1, [r3, r2]
    a3d0:	4b79      	ldr	r3, [pc, #484]	; (a5b8 <send_climb+0xae0>)
    a3d2:	781a      	ldrb	r2, [r3, #0]
    a3d4:	f24a 4365 	movw	r3, #42085	; 0xa465
    a3d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3dc:	781b      	ldrb	r3, [r3, #0]
    a3de:	4413      	add	r3, r2
    a3e0:	b2da      	uxtb	r2, r3
    a3e2:	f24a 4365 	movw	r3, #42085	; 0xa465
    a3e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3ea:	701a      	strb	r2, [r3, #0]
    a3ec:	f24a 4366 	movw	r3, #42086	; 0xa466
    a3f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3f4:	781a      	ldrb	r2, [r3, #0]
    a3f6:	f24a 4365 	movw	r3, #42085	; 0xa465
    a3fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3fe:	781b      	ldrb	r3, [r3, #0]
    a400:	4413      	add	r3, r2
    a402:	b2da      	uxtb	r2, r3
    a404:	f24a 4366 	movw	r3, #42086	; 0xa466
    a408:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a40c:	701a      	strb	r2, [r3, #0]
    a40e:	f24a 3361 	movw	r3, #41825	; 0xa361
    a412:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a416:	781b      	ldrb	r3, [r3, #0]
    a418:	3301      	adds	r3, #1
    a41a:	b2da      	uxtb	r2, r3
    a41c:	f24a 3361 	movw	r3, #41825	; 0xa361
    a420:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a424:	701a      	strb	r2, [r3, #0]
    a426:	f24a 3361 	movw	r3, #41825	; 0xa361
    a42a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a42e:	781b      	ldrb	r3, [r3, #0]
    a430:	2bff      	cmp	r3, #255	; 0xff
    a432:	d105      	bne.n	a440 <send_climb+0x968>
    a434:	f24a 3361 	movw	r3, #41825	; 0xa361
    a438:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a43c:	2200      	movs	r2, #0
    a43e:	701a      	strb	r2, [r3, #0]
    a440:	f24a 3361 	movw	r3, #41825	; 0xa361
    a444:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a448:	781b      	ldrb	r3, [r3, #0]
    a44a:	461a      	mov	r2, r3
    a44c:	f24a 4365 	movw	r3, #42085	; 0xa465
    a450:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a454:	7819      	ldrb	r1, [r3, #0]
    a456:	f24a 3364 	movw	r3, #41828	; 0xa364
    a45a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a45e:	5499      	strb	r1, [r3, r2]
    a460:	f24a 3361 	movw	r3, #41825	; 0xa361
    a464:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a468:	781b      	ldrb	r3, [r3, #0]
    a46a:	3301      	adds	r3, #1
    a46c:	b2da      	uxtb	r2, r3
    a46e:	f24a 3361 	movw	r3, #41825	; 0xa361
    a472:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a476:	701a      	strb	r2, [r3, #0]
    a478:	f24a 3361 	movw	r3, #41825	; 0xa361
    a47c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a480:	781b      	ldrb	r3, [r3, #0]
    a482:	2bff      	cmp	r3, #255	; 0xff
    a484:	d105      	bne.n	a492 <send_climb+0x9ba>
    a486:	f24a 3361 	movw	r3, #41825	; 0xa361
    a48a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a48e:	2200      	movs	r2, #0
    a490:	701a      	strb	r2, [r3, #0]
    a492:	f24a 3361 	movw	r3, #41825	; 0xa361
    a496:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a49a:	781b      	ldrb	r3, [r3, #0]
    a49c:	461a      	mov	r2, r3
    a49e:	f24a 4366 	movw	r3, #42086	; 0xa466
    a4a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4a6:	7819      	ldrb	r1, [r3, #0]
    a4a8:	f24a 3364 	movw	r3, #41828	; 0xa364
    a4ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4b0:	5499      	strb	r1, [r3, r2]
    a4b2:	f24a 3361 	movw	r3, #41825	; 0xa361
    a4b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4ba:	781b      	ldrb	r3, [r3, #0]
    a4bc:	3301      	adds	r3, #1
    a4be:	b2da      	uxtb	r2, r3
    a4c0:	f24a 3361 	movw	r3, #41825	; 0xa361
    a4c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4c8:	701a      	strb	r2, [r3, #0]
    a4ca:	f24a 3361 	movw	r3, #41825	; 0xa361
    a4ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4d2:	781b      	ldrb	r3, [r3, #0]
    a4d4:	2bff      	cmp	r3, #255	; 0xff
    a4d6:	d105      	bne.n	a4e4 <send_climb+0xa0c>
    a4d8:	f24a 3361 	movw	r3, #41825	; 0xa361
    a4dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4e0:	2200      	movs	r2, #0
    a4e2:	701a      	strb	r2, [r3, #0]
    a4e4:	f242 0339 	movw	r3, #8249	; 0x2039
    a4e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4ec:	781b      	ldrb	r3, [r3, #0]
    a4ee:	b2db      	uxtb	r3, r3
    a4f0:	f003 0310 	and.w	r3, r3, #16
    a4f4:	2b00      	cmp	r3, #0
    a4f6:	d15a      	bne.n	a5ae <send_climb+0xad6>
    a4f8:	f24a 3362 	movw	r3, #41826	; 0xa362
    a4fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a500:	781b      	ldrb	r3, [r3, #0]
    a502:	b2db      	uxtb	r3, r3
    a504:	461a      	mov	r2, r3
    a506:	f24a 3364 	movw	r3, #41828	; 0xa364
    a50a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a50e:	5c9a      	ldrb	r2, [r3, r2]
    a510:	f24a 4363 	movw	r3, #42083	; 0xa463
    a514:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a518:	701a      	strb	r2, [r3, #0]
    a51a:	f24a 4364 	movw	r3, #42084	; 0xa464
    a51e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a522:	2200      	movs	r2, #0
    a524:	701a      	strb	r2, [r3, #0]
    a526:	f24a 3362 	movw	r3, #41826	; 0xa362
    a52a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a52e:	781b      	ldrb	r3, [r3, #0]
    a530:	b2db      	uxtb	r3, r3
    a532:	3301      	adds	r3, #1
    a534:	b2da      	uxtb	r2, r3
    a536:	f24a 3362 	movw	r3, #41826	; 0xa362
    a53a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a53e:	701a      	strb	r2, [r3, #0]
    a540:	f24a 3362 	movw	r3, #41826	; 0xa362
    a544:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a548:	781b      	ldrb	r3, [r3, #0]
    a54a:	b2db      	uxtb	r3, r3
    a54c:	2bff      	cmp	r3, #255	; 0xff
    a54e:	d105      	bne.n	a55c <send_climb+0xa84>
    a550:	f24a 3362 	movw	r3, #41826	; 0xa362
    a554:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a558:	2200      	movs	r2, #0
    a55a:	701a      	strb	r2, [r3, #0]
    a55c:	f242 0338 	movw	r3, #8248	; 0x2038
    a560:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a564:	f242 0238 	movw	r2, #8248	; 0x2038
    a568:	f2c2 0200 	movt	r2, #8192	; 0x2000
    a56c:	7812      	ldrb	r2, [r2, #0]
    a56e:	b2d2      	uxtb	r2, r2
    a570:	f042 0201 	orr.w	r2, r2, #1
    a574:	b2d2      	uxtb	r2, r2
    a576:	701a      	strb	r2, [r3, #0]
    a578:	f242 0339 	movw	r3, #8249	; 0x2039
    a57c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a580:	f242 0239 	movw	r2, #8249	; 0x2039
    a584:	f2c2 0200 	movt	r2, #8192	; 0x2000
    a588:	7812      	ldrb	r2, [r2, #0]
    a58a:	b2d2      	uxtb	r2, r2
    a58c:	f042 0210 	orr.w	r2, r2, #16
    a590:	b2d2      	uxtb	r2, r2
    a592:	701a      	strb	r2, [r3, #0]
    a594:	e00b      	b.n	a5ae <send_climb+0xad6>
    a596:	f24a 3360 	movw	r3, #41824	; 0xa360
    a59a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a59e:	781b      	ldrb	r3, [r3, #0]
    a5a0:	3301      	adds	r3, #1
    a5a2:	b2da      	uxtb	r2, r3
    a5a4:	f24a 3360 	movw	r3, #41824	; 0xa360
    a5a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5ac:	701a      	strb	r2, [r3, #0]
}
    a5ae:	46bd      	mov	sp, r7
    a5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    a5b4:	4770      	bx	lr
    a5b6:	bf00      	nop
    a5b8:	00017303 	.word	0x00017303

0000a5bc <send_mode>:
void send_mode(void){  //5000ms
    a5bc:	b480      	push	{r7}
    a5be:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 50 == 9) PERIODIC_SEND_PPRZ_MODE();}
    a5c0:	f24a 3359 	movw	r3, #41817	; 0xa359
    a5c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5c8:	781a      	ldrb	r2, [r3, #0]
    a5ca:	f248 531f 	movw	r3, #34079	; 0x851f
    a5ce:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    a5d2:	fba3 1302 	umull	r1, r3, r3, r2
    a5d6:	091b      	lsrs	r3, r3, #4
    a5d8:	2132      	movs	r1, #50	; 0x32
    a5da:	fb01 f303 	mul.w	r3, r1, r3
    a5de:	1ad3      	subs	r3, r2, r3
    a5e0:	b2db      	uxtb	r3, r3
    a5e2:	2b09      	cmp	r3, #9
    a5e4:	f040 82ba 	bne.w	ab5c <send_mode+0x5a0>
    a5e8:	f24a 3361 	movw	r3, #41825	; 0xa361
    a5ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5f0:	781a      	ldrb	r2, [r3, #0]
    a5f2:	f24a 3362 	movw	r3, #41826	; 0xa362
    a5f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5fa:	781b      	ldrb	r3, [r3, #0]
    a5fc:	b2db      	uxtb	r3, r3
    a5fe:	429a      	cmp	r2, r3
    a600:	d313      	bcc.n	a62a <send_mode+0x6e>
    a602:	f24a 3362 	movw	r3, #41826	; 0xa362
    a606:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a60a:	781b      	ldrb	r3, [r3, #0]
    a60c:	b2db      	uxtb	r3, r3
    a60e:	461a      	mov	r2, r3
    a610:	f24a 3361 	movw	r3, #41825	; 0xa361
    a614:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a618:	781b      	ldrb	r3, [r3, #0]
    a61a:	1ad3      	subs	r3, r2, r3
    a61c:	33ff      	adds	r3, #255	; 0xff
    a61e:	2b09      	cmp	r3, #9
    a620:	bfd4      	ite	le
    a622:	2300      	movle	r3, #0
    a624:	2301      	movgt	r3, #1
    a626:	b2db      	uxtb	r3, r3
    a628:	e011      	b.n	a64e <send_mode+0x92>
    a62a:	f24a 3362 	movw	r3, #41826	; 0xa362
    a62e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a632:	781b      	ldrb	r3, [r3, #0]
    a634:	b2db      	uxtb	r3, r3
    a636:	461a      	mov	r2, r3
    a638:	f24a 3361 	movw	r3, #41825	; 0xa361
    a63c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a640:	781b      	ldrb	r3, [r3, #0]
    a642:	1ad3      	subs	r3, r2, r3
    a644:	2b09      	cmp	r3, #9
    a646:	bfd4      	ite	le
    a648:	2300      	movle	r3, #0
    a64a:	2301      	movgt	r3, #1
    a64c:	b2db      	uxtb	r3, r3
    a64e:	2b00      	cmp	r3, #0
    a650:	f000 8278 	beq.w	ab44 <send_mode+0x588>
    a654:	f24a 3361 	movw	r3, #41825	; 0xa361
    a658:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a65c:	781b      	ldrb	r3, [r3, #0]
    a65e:	461a      	mov	r2, r3
    a660:	f24a 3364 	movw	r3, #41828	; 0xa364
    a664:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a668:	2105      	movs	r1, #5
    a66a:	5499      	strb	r1, [r3, r2]
    a66c:	f24a 3361 	movw	r3, #41825	; 0xa361
    a670:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a674:	781b      	ldrb	r3, [r3, #0]
    a676:	3301      	adds	r3, #1
    a678:	b2da      	uxtb	r2, r3
    a67a:	f24a 3361 	movw	r3, #41825	; 0xa361
    a67e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a682:	701a      	strb	r2, [r3, #0]
    a684:	f24a 3361 	movw	r3, #41825	; 0xa361
    a688:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a68c:	781b      	ldrb	r3, [r3, #0]
    a68e:	2bff      	cmp	r3, #255	; 0xff
    a690:	d105      	bne.n	a69e <send_mode+0xe2>
    a692:	f24a 3361 	movw	r3, #41825	; 0xa361
    a696:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a69a:	2200      	movs	r2, #0
    a69c:	701a      	strb	r2, [r3, #0]
    a69e:	f24a 3361 	movw	r3, #41825	; 0xa361
    a6a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6a6:	781b      	ldrb	r3, [r3, #0]
    a6a8:	461a      	mov	r2, r3
    a6aa:	f24a 3364 	movw	r3, #41828	; 0xa364
    a6ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6b2:	210b      	movs	r1, #11
    a6b4:	5499      	strb	r1, [r3, r2]
    a6b6:	f24a 3361 	movw	r3, #41825	; 0xa361
    a6ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6be:	781b      	ldrb	r3, [r3, #0]
    a6c0:	3301      	adds	r3, #1
    a6c2:	b2da      	uxtb	r2, r3
    a6c4:	f24a 3361 	movw	r3, #41825	; 0xa361
    a6c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6cc:	701a      	strb	r2, [r3, #0]
    a6ce:	f24a 3361 	movw	r3, #41825	; 0xa361
    a6d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6d6:	781b      	ldrb	r3, [r3, #0]
    a6d8:	2bff      	cmp	r3, #255	; 0xff
    a6da:	d105      	bne.n	a6e8 <send_mode+0x12c>
    a6dc:	f24a 3361 	movw	r3, #41825	; 0xa361
    a6e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6e4:	2200      	movs	r2, #0
    a6e6:	701a      	strb	r2, [r3, #0]
    a6e8:	f24a 4365 	movw	r3, #42085	; 0xa465
    a6ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6f0:	220b      	movs	r2, #11
    a6f2:	701a      	strb	r2, [r3, #0]
    a6f4:	f24a 4366 	movw	r3, #42086	; 0xa466
    a6f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6fc:	220b      	movs	r2, #11
    a6fe:	701a      	strb	r2, [r3, #0]
    a700:	f24a 3361 	movw	r3, #41825	; 0xa361
    a704:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a708:	781b      	ldrb	r3, [r3, #0]
    a70a:	461a      	mov	r2, r3
    a70c:	f24a 3344 	movw	r3, #41796	; 0xa344
    a710:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a714:	7819      	ldrb	r1, [r3, #0]
    a716:	f24a 3364 	movw	r3, #41828	; 0xa364
    a71a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a71e:	5499      	strb	r1, [r3, r2]
    a720:	f24a 4365 	movw	r3, #42085	; 0xa465
    a724:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a728:	781a      	ldrb	r2, [r3, #0]
    a72a:	f24a 3344 	movw	r3, #41796	; 0xa344
    a72e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a732:	781b      	ldrb	r3, [r3, #0]
    a734:	4413      	add	r3, r2
    a736:	b2da      	uxtb	r2, r3
    a738:	f24a 4365 	movw	r3, #42085	; 0xa465
    a73c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a740:	701a      	strb	r2, [r3, #0]
    a742:	f24a 4366 	movw	r3, #42086	; 0xa466
    a746:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a74a:	781a      	ldrb	r2, [r3, #0]
    a74c:	f24a 4365 	movw	r3, #42085	; 0xa465
    a750:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a754:	781b      	ldrb	r3, [r3, #0]
    a756:	4413      	add	r3, r2
    a758:	b2da      	uxtb	r2, r3
    a75a:	f24a 4366 	movw	r3, #42086	; 0xa466
    a75e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a762:	701a      	strb	r2, [r3, #0]
    a764:	f24a 3361 	movw	r3, #41825	; 0xa361
    a768:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a76c:	781b      	ldrb	r3, [r3, #0]
    a76e:	3301      	adds	r3, #1
    a770:	b2da      	uxtb	r2, r3
    a772:	f24a 3361 	movw	r3, #41825	; 0xa361
    a776:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a77a:	701a      	strb	r2, [r3, #0]
    a77c:	f24a 3361 	movw	r3, #41825	; 0xa361
    a780:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a784:	781b      	ldrb	r3, [r3, #0]
    a786:	2bff      	cmp	r3, #255	; 0xff
    a788:	d105      	bne.n	a796 <send_mode+0x1da>
    a78a:	f24a 3361 	movw	r3, #41825	; 0xa361
    a78e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a792:	2200      	movs	r2, #0
    a794:	701a      	strb	r2, [r3, #0]
    a796:	f24a 3361 	movw	r3, #41825	; 0xa361
    a79a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a79e:	781b      	ldrb	r3, [r3, #0]
    a7a0:	461a      	mov	r2, r3
    a7a2:	f24a 3345 	movw	r3, #41797	; 0xa345
    a7a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7aa:	7819      	ldrb	r1, [r3, #0]
    a7ac:	f24a 3364 	movw	r3, #41828	; 0xa364
    a7b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7b4:	5499      	strb	r1, [r3, r2]
    a7b6:	f24a 4365 	movw	r3, #42085	; 0xa465
    a7ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7be:	781a      	ldrb	r2, [r3, #0]
    a7c0:	f24a 3345 	movw	r3, #41797	; 0xa345
    a7c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7c8:	781b      	ldrb	r3, [r3, #0]
    a7ca:	4413      	add	r3, r2
    a7cc:	b2da      	uxtb	r2, r3
    a7ce:	f24a 4365 	movw	r3, #42085	; 0xa465
    a7d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7d6:	701a      	strb	r2, [r3, #0]
    a7d8:	f24a 4366 	movw	r3, #42086	; 0xa466
    a7dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7e0:	781a      	ldrb	r2, [r3, #0]
    a7e2:	f24a 4365 	movw	r3, #42085	; 0xa465
    a7e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7ea:	781b      	ldrb	r3, [r3, #0]
    a7ec:	4413      	add	r3, r2
    a7ee:	b2da      	uxtb	r2, r3
    a7f0:	f24a 4366 	movw	r3, #42086	; 0xa466
    a7f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7f8:	701a      	strb	r2, [r3, #0]
    a7fa:	f24a 3361 	movw	r3, #41825	; 0xa361
    a7fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a802:	781b      	ldrb	r3, [r3, #0]
    a804:	3301      	adds	r3, #1
    a806:	b2da      	uxtb	r2, r3
    a808:	f24a 3361 	movw	r3, #41825	; 0xa361
    a80c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a810:	701a      	strb	r2, [r3, #0]
    a812:	f24a 3361 	movw	r3, #41825	; 0xa361
    a816:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a81a:	781b      	ldrb	r3, [r3, #0]
    a81c:	2bff      	cmp	r3, #255	; 0xff
    a81e:	d105      	bne.n	a82c <send_mode+0x270>
    a820:	f24a 3361 	movw	r3, #41825	; 0xa361
    a824:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a828:	2200      	movs	r2, #0
    a82a:	701a      	strb	r2, [r3, #0]
    a82c:	f24a 3361 	movw	r3, #41825	; 0xa361
    a830:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a834:	781b      	ldrb	r3, [r3, #0]
    a836:	461a      	mov	r2, r3
    a838:	f64a 1374 	movw	r3, #43380	; 0xa974
    a83c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a840:	7819      	ldrb	r1, [r3, #0]
    a842:	f24a 3364 	movw	r3, #41828	; 0xa364
    a846:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a84a:	5499      	strb	r1, [r3, r2]
    a84c:	f24a 4365 	movw	r3, #42085	; 0xa465
    a850:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a854:	781a      	ldrb	r2, [r3, #0]
    a856:	f64a 1374 	movw	r3, #43380	; 0xa974
    a85a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a85e:	781b      	ldrb	r3, [r3, #0]
    a860:	4413      	add	r3, r2
    a862:	b2da      	uxtb	r2, r3
    a864:	f24a 4365 	movw	r3, #42085	; 0xa465
    a868:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a86c:	701a      	strb	r2, [r3, #0]
    a86e:	f24a 4366 	movw	r3, #42086	; 0xa466
    a872:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a876:	781a      	ldrb	r2, [r3, #0]
    a878:	f24a 4365 	movw	r3, #42085	; 0xa465
    a87c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a880:	781b      	ldrb	r3, [r3, #0]
    a882:	4413      	add	r3, r2
    a884:	b2da      	uxtb	r2, r3
    a886:	f24a 4366 	movw	r3, #42086	; 0xa466
    a88a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a88e:	701a      	strb	r2, [r3, #0]
    a890:	f24a 3361 	movw	r3, #41825	; 0xa361
    a894:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a898:	781b      	ldrb	r3, [r3, #0]
    a89a:	3301      	adds	r3, #1
    a89c:	b2da      	uxtb	r2, r3
    a89e:	f24a 3361 	movw	r3, #41825	; 0xa361
    a8a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8a6:	701a      	strb	r2, [r3, #0]
    a8a8:	f24a 3361 	movw	r3, #41825	; 0xa361
    a8ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8b0:	781b      	ldrb	r3, [r3, #0]
    a8b2:	2bff      	cmp	r3, #255	; 0xff
    a8b4:	d105      	bne.n	a8c2 <send_mode+0x306>
    a8b6:	f24a 3361 	movw	r3, #41825	; 0xa361
    a8ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8be:	2200      	movs	r2, #0
    a8c0:	701a      	strb	r2, [r3, #0]
    a8c2:	f24a 3361 	movw	r3, #41825	; 0xa361
    a8c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8ca:	781b      	ldrb	r3, [r3, #0]
    a8cc:	461a      	mov	r2, r3
    a8ce:	f24a 334b 	movw	r3, #41803	; 0xa34b
    a8d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8d6:	7819      	ldrb	r1, [r3, #0]
    a8d8:	f24a 3364 	movw	r3, #41828	; 0xa364
    a8dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8e0:	5499      	strb	r1, [r3, r2]
    a8e2:	f24a 4365 	movw	r3, #42085	; 0xa465
    a8e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8ea:	781a      	ldrb	r2, [r3, #0]
    a8ec:	f24a 334b 	movw	r3, #41803	; 0xa34b
    a8f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8f4:	781b      	ldrb	r3, [r3, #0]
    a8f6:	4413      	add	r3, r2
    a8f8:	b2da      	uxtb	r2, r3
    a8fa:	f24a 4365 	movw	r3, #42085	; 0xa465
    a8fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a902:	701a      	strb	r2, [r3, #0]
    a904:	f24a 4366 	movw	r3, #42086	; 0xa466
    a908:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a90c:	781a      	ldrb	r2, [r3, #0]
    a90e:	f24a 4365 	movw	r3, #42085	; 0xa465
    a912:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a916:	781b      	ldrb	r3, [r3, #0]
    a918:	4413      	add	r3, r2
    a91a:	b2da      	uxtb	r2, r3
    a91c:	f24a 4366 	movw	r3, #42086	; 0xa466
    a920:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a924:	701a      	strb	r2, [r3, #0]
    a926:	f24a 3361 	movw	r3, #41825	; 0xa361
    a92a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a92e:	781b      	ldrb	r3, [r3, #0]
    a930:	3301      	adds	r3, #1
    a932:	b2da      	uxtb	r2, r3
    a934:	f24a 3361 	movw	r3, #41825	; 0xa361
    a938:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a93c:	701a      	strb	r2, [r3, #0]
    a93e:	f24a 3361 	movw	r3, #41825	; 0xa361
    a942:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a946:	781b      	ldrb	r3, [r3, #0]
    a948:	2bff      	cmp	r3, #255	; 0xff
    a94a:	d105      	bne.n	a958 <send_mode+0x39c>
    a94c:	f24a 3361 	movw	r3, #41825	; 0xa361
    a950:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a954:	2200      	movs	r2, #0
    a956:	701a      	strb	r2, [r3, #0]
    a958:	f24a 3361 	movw	r3, #41825	; 0xa361
    a95c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a960:	781b      	ldrb	r3, [r3, #0]
    a962:	461a      	mov	r2, r3
    a964:	f240 03d0 	movw	r3, #208	; 0xd0
    a968:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a96c:	7819      	ldrb	r1, [r3, #0]
    a96e:	f24a 3364 	movw	r3, #41828	; 0xa364
    a972:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a976:	5499      	strb	r1, [r3, r2]
    a978:	f24a 4365 	movw	r3, #42085	; 0xa465
    a97c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a980:	781a      	ldrb	r2, [r3, #0]
    a982:	f240 03d0 	movw	r3, #208	; 0xd0
    a986:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a98a:	781b      	ldrb	r3, [r3, #0]
    a98c:	4413      	add	r3, r2
    a98e:	b2da      	uxtb	r2, r3
    a990:	f24a 4365 	movw	r3, #42085	; 0xa465
    a994:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a998:	701a      	strb	r2, [r3, #0]
    a99a:	f24a 4366 	movw	r3, #42086	; 0xa466
    a99e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9a2:	781a      	ldrb	r2, [r3, #0]
    a9a4:	f24a 4365 	movw	r3, #42085	; 0xa465
    a9a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9ac:	781b      	ldrb	r3, [r3, #0]
    a9ae:	4413      	add	r3, r2
    a9b0:	b2da      	uxtb	r2, r3
    a9b2:	f24a 4366 	movw	r3, #42086	; 0xa466
    a9b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9ba:	701a      	strb	r2, [r3, #0]
    a9bc:	f24a 3361 	movw	r3, #41825	; 0xa361
    a9c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9c4:	781b      	ldrb	r3, [r3, #0]
    a9c6:	3301      	adds	r3, #1
    a9c8:	b2da      	uxtb	r2, r3
    a9ca:	f24a 3361 	movw	r3, #41825	; 0xa361
    a9ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9d2:	701a      	strb	r2, [r3, #0]
    a9d4:	f24a 3361 	movw	r3, #41825	; 0xa361
    a9d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9dc:	781b      	ldrb	r3, [r3, #0]
    a9de:	2bff      	cmp	r3, #255	; 0xff
    a9e0:	d105      	bne.n	a9ee <send_mode+0x432>
    a9e2:	f24a 3361 	movw	r3, #41825	; 0xa361
    a9e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9ea:	2200      	movs	r2, #0
    a9ec:	701a      	strb	r2, [r3, #0]
    a9ee:	f24a 3361 	movw	r3, #41825	; 0xa361
    a9f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9f6:	781b      	ldrb	r3, [r3, #0]
    a9f8:	461a      	mov	r2, r3
    a9fa:	f24a 4365 	movw	r3, #42085	; 0xa465
    a9fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa02:	7819      	ldrb	r1, [r3, #0]
    aa04:	f24a 3364 	movw	r3, #41828	; 0xa364
    aa08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa0c:	5499      	strb	r1, [r3, r2]
    aa0e:	f24a 3361 	movw	r3, #41825	; 0xa361
    aa12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa16:	781b      	ldrb	r3, [r3, #0]
    aa18:	3301      	adds	r3, #1
    aa1a:	b2da      	uxtb	r2, r3
    aa1c:	f24a 3361 	movw	r3, #41825	; 0xa361
    aa20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa24:	701a      	strb	r2, [r3, #0]
    aa26:	f24a 3361 	movw	r3, #41825	; 0xa361
    aa2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa2e:	781b      	ldrb	r3, [r3, #0]
    aa30:	2bff      	cmp	r3, #255	; 0xff
    aa32:	d105      	bne.n	aa40 <send_mode+0x484>
    aa34:	f24a 3361 	movw	r3, #41825	; 0xa361
    aa38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa3c:	2200      	movs	r2, #0
    aa3e:	701a      	strb	r2, [r3, #0]
    aa40:	f24a 3361 	movw	r3, #41825	; 0xa361
    aa44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa48:	781b      	ldrb	r3, [r3, #0]
    aa4a:	461a      	mov	r2, r3
    aa4c:	f24a 4366 	movw	r3, #42086	; 0xa466
    aa50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa54:	7819      	ldrb	r1, [r3, #0]
    aa56:	f24a 3364 	movw	r3, #41828	; 0xa364
    aa5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa5e:	5499      	strb	r1, [r3, r2]
    aa60:	f24a 3361 	movw	r3, #41825	; 0xa361
    aa64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa68:	781b      	ldrb	r3, [r3, #0]
    aa6a:	3301      	adds	r3, #1
    aa6c:	b2da      	uxtb	r2, r3
    aa6e:	f24a 3361 	movw	r3, #41825	; 0xa361
    aa72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa76:	701a      	strb	r2, [r3, #0]
    aa78:	f24a 3361 	movw	r3, #41825	; 0xa361
    aa7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa80:	781b      	ldrb	r3, [r3, #0]
    aa82:	2bff      	cmp	r3, #255	; 0xff
    aa84:	d105      	bne.n	aa92 <send_mode+0x4d6>
    aa86:	f24a 3361 	movw	r3, #41825	; 0xa361
    aa8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa8e:	2200      	movs	r2, #0
    aa90:	701a      	strb	r2, [r3, #0]
    aa92:	f242 0339 	movw	r3, #8249	; 0x2039
    aa96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa9a:	781b      	ldrb	r3, [r3, #0]
    aa9c:	b2db      	uxtb	r3, r3
    aa9e:	f003 0310 	and.w	r3, r3, #16
    aaa2:	2b00      	cmp	r3, #0
    aaa4:	d15a      	bne.n	ab5c <send_mode+0x5a0>
    aaa6:	f24a 3362 	movw	r3, #41826	; 0xa362
    aaaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aaae:	781b      	ldrb	r3, [r3, #0]
    aab0:	b2db      	uxtb	r3, r3
    aab2:	461a      	mov	r2, r3
    aab4:	f24a 3364 	movw	r3, #41828	; 0xa364
    aab8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aabc:	5c9a      	ldrb	r2, [r3, r2]
    aabe:	f24a 4363 	movw	r3, #42083	; 0xa463
    aac2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aac6:	701a      	strb	r2, [r3, #0]
    aac8:	f24a 4364 	movw	r3, #42084	; 0xa464
    aacc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aad0:	2200      	movs	r2, #0
    aad2:	701a      	strb	r2, [r3, #0]
    aad4:	f24a 3362 	movw	r3, #41826	; 0xa362
    aad8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aadc:	781b      	ldrb	r3, [r3, #0]
    aade:	b2db      	uxtb	r3, r3
    aae0:	3301      	adds	r3, #1
    aae2:	b2da      	uxtb	r2, r3
    aae4:	f24a 3362 	movw	r3, #41826	; 0xa362
    aae8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aaec:	701a      	strb	r2, [r3, #0]
    aaee:	f24a 3362 	movw	r3, #41826	; 0xa362
    aaf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aaf6:	781b      	ldrb	r3, [r3, #0]
    aaf8:	b2db      	uxtb	r3, r3
    aafa:	2bff      	cmp	r3, #255	; 0xff
    aafc:	d105      	bne.n	ab0a <send_mode+0x54e>
    aafe:	f24a 3362 	movw	r3, #41826	; 0xa362
    ab02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab06:	2200      	movs	r2, #0
    ab08:	701a      	strb	r2, [r3, #0]
    ab0a:	f242 0338 	movw	r3, #8248	; 0x2038
    ab0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab12:	f242 0238 	movw	r2, #8248	; 0x2038
    ab16:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ab1a:	7812      	ldrb	r2, [r2, #0]
    ab1c:	b2d2      	uxtb	r2, r2
    ab1e:	f042 0201 	orr.w	r2, r2, #1
    ab22:	b2d2      	uxtb	r2, r2
    ab24:	701a      	strb	r2, [r3, #0]
    ab26:	f242 0339 	movw	r3, #8249	; 0x2039
    ab2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab2e:	f242 0239 	movw	r2, #8249	; 0x2039
    ab32:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ab36:	7812      	ldrb	r2, [r2, #0]
    ab38:	b2d2      	uxtb	r2, r2
    ab3a:	f042 0210 	orr.w	r2, r2, #16
    ab3e:	b2d2      	uxtb	r2, r2
    ab40:	701a      	strb	r2, [r3, #0]
    ab42:	e00b      	b.n	ab5c <send_mode+0x5a0>
    ab44:	f24a 3360 	movw	r3, #41824	; 0xa360
    ab48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab4c:	781b      	ldrb	r3, [r3, #0]
    ab4e:	3301      	adds	r3, #1
    ab50:	b2da      	uxtb	r2, r3
    ab52:	f24a 3360 	movw	r3, #41824	; 0xa360
    ab56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab5a:	701a      	strb	r2, [r3, #0]
}
    ab5c:	46bd      	mov	sp, r7
    ab5e:	f85d 7b04 	ldr.w	r7, [sp], #4
    ab62:	4770      	bx	lr

0000ab64 <send_debug>:
void send_debug(void){  //5000ms
    ab64:	b480      	push	{r7}
    ab66:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 50 == 29) PERIODIC_SEND_DEBUG();}
    ab68:	f24a 3359 	movw	r3, #41817	; 0xa359
    ab6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab70:	781a      	ldrb	r2, [r3, #0]
    ab72:	f248 531f 	movw	r3, #34079	; 0x851f
    ab76:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    ab7a:	fba3 1302 	umull	r1, r3, r3, r2
    ab7e:	091b      	lsrs	r3, r3, #4
    ab80:	2132      	movs	r1, #50	; 0x32
    ab82:	fb01 f303 	mul.w	r3, r1, r3
    ab86:	1ad3      	subs	r3, r2, r3
    ab88:	b2db      	uxtb	r3, r3
    ab8a:	2b1d      	cmp	r3, #29
    ab8c:	f040 82bb 	bne.w	b106 <send_debug+0x5a2>
    ab90:	f24a 3361 	movw	r3, #41825	; 0xa361
    ab94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab98:	781a      	ldrb	r2, [r3, #0]
    ab9a:	f24a 3362 	movw	r3, #41826	; 0xa362
    ab9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aba2:	781b      	ldrb	r3, [r3, #0]
    aba4:	b2db      	uxtb	r3, r3
    aba6:	429a      	cmp	r2, r3
    aba8:	d313      	bcc.n	abd2 <send_debug+0x6e>
    abaa:	f24a 3362 	movw	r3, #41826	; 0xa362
    abae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abb2:	781b      	ldrb	r3, [r3, #0]
    abb4:	b2db      	uxtb	r3, r3
    abb6:	461a      	mov	r2, r3
    abb8:	f24a 3361 	movw	r3, #41825	; 0xa361
    abbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abc0:	781b      	ldrb	r3, [r3, #0]
    abc2:	1ad3      	subs	r3, r2, r3
    abc4:	33ff      	adds	r3, #255	; 0xff
    abc6:	2b09      	cmp	r3, #9
    abc8:	bfd4      	ite	le
    abca:	2300      	movle	r3, #0
    abcc:	2301      	movgt	r3, #1
    abce:	b2db      	uxtb	r3, r3
    abd0:	e011      	b.n	abf6 <send_debug+0x92>
    abd2:	f24a 3362 	movw	r3, #41826	; 0xa362
    abd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abda:	781b      	ldrb	r3, [r3, #0]
    abdc:	b2db      	uxtb	r3, r3
    abde:	461a      	mov	r2, r3
    abe0:	f24a 3361 	movw	r3, #41825	; 0xa361
    abe4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abe8:	781b      	ldrb	r3, [r3, #0]
    abea:	1ad3      	subs	r3, r2, r3
    abec:	2b09      	cmp	r3, #9
    abee:	bfd4      	ite	le
    abf0:	2300      	movle	r3, #0
    abf2:	2301      	movgt	r3, #1
    abf4:	b2db      	uxtb	r3, r3
    abf6:	2b00      	cmp	r3, #0
    abf8:	f000 8279 	beq.w	b0ee <send_debug+0x58a>
    abfc:	f24a 3361 	movw	r3, #41825	; 0xa361
    ac00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac04:	781b      	ldrb	r3, [r3, #0]
    ac06:	461a      	mov	r2, r3
    ac08:	f24a 3364 	movw	r3, #41828	; 0xa364
    ac0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac10:	2105      	movs	r1, #5
    ac12:	5499      	strb	r1, [r3, r2]
    ac14:	f24a 3361 	movw	r3, #41825	; 0xa361
    ac18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac1c:	781b      	ldrb	r3, [r3, #0]
    ac1e:	3301      	adds	r3, #1
    ac20:	b2da      	uxtb	r2, r3
    ac22:	f24a 3361 	movw	r3, #41825	; 0xa361
    ac26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac2a:	701a      	strb	r2, [r3, #0]
    ac2c:	f24a 3361 	movw	r3, #41825	; 0xa361
    ac30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac34:	781b      	ldrb	r3, [r3, #0]
    ac36:	2bff      	cmp	r3, #255	; 0xff
    ac38:	d105      	bne.n	ac46 <send_debug+0xe2>
    ac3a:	f24a 3361 	movw	r3, #41825	; 0xa361
    ac3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac42:	2200      	movs	r2, #0
    ac44:	701a      	strb	r2, [r3, #0]
    ac46:	f24a 3361 	movw	r3, #41825	; 0xa361
    ac4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac4e:	781b      	ldrb	r3, [r3, #0]
    ac50:	461a      	mov	r2, r3
    ac52:	f24a 3364 	movw	r3, #41828	; 0xa364
    ac56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac5a:	210d      	movs	r1, #13
    ac5c:	5499      	strb	r1, [r3, r2]
    ac5e:	f24a 3361 	movw	r3, #41825	; 0xa361
    ac62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac66:	781b      	ldrb	r3, [r3, #0]
    ac68:	3301      	adds	r3, #1
    ac6a:	b2da      	uxtb	r2, r3
    ac6c:	f24a 3361 	movw	r3, #41825	; 0xa361
    ac70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac74:	701a      	strb	r2, [r3, #0]
    ac76:	f24a 3361 	movw	r3, #41825	; 0xa361
    ac7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac7e:	781b      	ldrb	r3, [r3, #0]
    ac80:	2bff      	cmp	r3, #255	; 0xff
    ac82:	d105      	bne.n	ac90 <send_debug+0x12c>
    ac84:	f24a 3361 	movw	r3, #41825	; 0xa361
    ac88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac8c:	2200      	movs	r2, #0
    ac8e:	701a      	strb	r2, [r3, #0]
    ac90:	f24a 4365 	movw	r3, #42085	; 0xa465
    ac94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac98:	220d      	movs	r2, #13
    ac9a:	701a      	strb	r2, [r3, #0]
    ac9c:	f24a 4366 	movw	r3, #42086	; 0xa466
    aca0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aca4:	220d      	movs	r2, #13
    aca6:	701a      	strb	r2, [r3, #0]
    aca8:	f24a 3361 	movw	r3, #41825	; 0xa361
    acac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    acb0:	781b      	ldrb	r3, [r3, #0]
    acb2:	461a      	mov	r2, r3
    acb4:	f24a 4397 	movw	r3, #42135	; 0xa497
    acb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    acbc:	781b      	ldrb	r3, [r3, #0]
    acbe:	b2d9      	uxtb	r1, r3
    acc0:	f24a 3364 	movw	r3, #41828	; 0xa364
    acc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    acc8:	5499      	strb	r1, [r3, r2]
    acca:	f24a 4397 	movw	r3, #42135	; 0xa497
    acce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    acd2:	781a      	ldrb	r2, [r3, #0]
    acd4:	f24a 4365 	movw	r3, #42085	; 0xa465
    acd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    acdc:	781b      	ldrb	r3, [r3, #0]
    acde:	4413      	add	r3, r2
    ace0:	b2da      	uxtb	r2, r3
    ace2:	f24a 4365 	movw	r3, #42085	; 0xa465
    ace6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    acea:	701a      	strb	r2, [r3, #0]
    acec:	f24a 4366 	movw	r3, #42086	; 0xa466
    acf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    acf4:	781a      	ldrb	r2, [r3, #0]
    acf6:	f24a 4365 	movw	r3, #42085	; 0xa465
    acfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    acfe:	781b      	ldrb	r3, [r3, #0]
    ad00:	4413      	add	r3, r2
    ad02:	b2da      	uxtb	r2, r3
    ad04:	f24a 4366 	movw	r3, #42086	; 0xa466
    ad08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad0c:	701a      	strb	r2, [r3, #0]
    ad0e:	f24a 3361 	movw	r3, #41825	; 0xa361
    ad12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad16:	781b      	ldrb	r3, [r3, #0]
    ad18:	3301      	adds	r3, #1
    ad1a:	b2da      	uxtb	r2, r3
    ad1c:	f24a 3361 	movw	r3, #41825	; 0xa361
    ad20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad24:	701a      	strb	r2, [r3, #0]
    ad26:	f24a 3361 	movw	r3, #41825	; 0xa361
    ad2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad2e:	781b      	ldrb	r3, [r3, #0]
    ad30:	2bff      	cmp	r3, #255	; 0xff
    ad32:	d105      	bne.n	ad40 <send_debug+0x1dc>
    ad34:	f24a 3361 	movw	r3, #41825	; 0xa361
    ad38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad3c:	2200      	movs	r2, #0
    ad3e:	701a      	strb	r2, [r3, #0]
    ad40:	f24a 3361 	movw	r3, #41825	; 0xa361
    ad44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad48:	781b      	ldrb	r3, [r3, #0]
    ad4a:	461a      	mov	r2, r3
    ad4c:	f24a 4398 	movw	r3, #42136	; 0xa498
    ad50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad54:	7819      	ldrb	r1, [r3, #0]
    ad56:	f24a 3364 	movw	r3, #41828	; 0xa364
    ad5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad5e:	5499      	strb	r1, [r3, r2]
    ad60:	f24a 4365 	movw	r3, #42085	; 0xa465
    ad64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad68:	781a      	ldrb	r2, [r3, #0]
    ad6a:	f24a 4398 	movw	r3, #42136	; 0xa498
    ad6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad72:	781b      	ldrb	r3, [r3, #0]
    ad74:	4413      	add	r3, r2
    ad76:	b2da      	uxtb	r2, r3
    ad78:	f24a 4365 	movw	r3, #42085	; 0xa465
    ad7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad80:	701a      	strb	r2, [r3, #0]
    ad82:	f24a 4366 	movw	r3, #42086	; 0xa466
    ad86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad8a:	781a      	ldrb	r2, [r3, #0]
    ad8c:	f24a 4365 	movw	r3, #42085	; 0xa465
    ad90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad94:	781b      	ldrb	r3, [r3, #0]
    ad96:	4413      	add	r3, r2
    ad98:	b2da      	uxtb	r2, r3
    ad9a:	f24a 4366 	movw	r3, #42086	; 0xa466
    ad9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ada2:	701a      	strb	r2, [r3, #0]
    ada4:	f24a 3361 	movw	r3, #41825	; 0xa361
    ada8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    adac:	781b      	ldrb	r3, [r3, #0]
    adae:	3301      	adds	r3, #1
    adb0:	b2da      	uxtb	r2, r3
    adb2:	f24a 3361 	movw	r3, #41825	; 0xa361
    adb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    adba:	701a      	strb	r2, [r3, #0]
    adbc:	f24a 3361 	movw	r3, #41825	; 0xa361
    adc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    adc4:	781b      	ldrb	r3, [r3, #0]
    adc6:	2bff      	cmp	r3, #255	; 0xff
    adc8:	d105      	bne.n	add6 <send_debug+0x272>
    adca:	f24a 3361 	movw	r3, #41825	; 0xa361
    adce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    add2:	2200      	movs	r2, #0
    add4:	701a      	strb	r2, [r3, #0]
    add6:	f24a 3361 	movw	r3, #41825	; 0xa361
    adda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    adde:	781b      	ldrb	r3, [r3, #0]
    ade0:	461a      	mov	r2, r3
    ade2:	f24a 3360 	movw	r3, #41824	; 0xa360
    ade6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    adea:	7819      	ldrb	r1, [r3, #0]
    adec:	f24a 3364 	movw	r3, #41828	; 0xa364
    adf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    adf4:	5499      	strb	r1, [r3, r2]
    adf6:	f24a 4365 	movw	r3, #42085	; 0xa465
    adfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    adfe:	781a      	ldrb	r2, [r3, #0]
    ae00:	f24a 3360 	movw	r3, #41824	; 0xa360
    ae04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae08:	781b      	ldrb	r3, [r3, #0]
    ae0a:	4413      	add	r3, r2
    ae0c:	b2da      	uxtb	r2, r3
    ae0e:	f24a 4365 	movw	r3, #42085	; 0xa465
    ae12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae16:	701a      	strb	r2, [r3, #0]
    ae18:	f24a 4366 	movw	r3, #42086	; 0xa466
    ae1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae20:	781a      	ldrb	r2, [r3, #0]
    ae22:	f24a 4365 	movw	r3, #42085	; 0xa465
    ae26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae2a:	781b      	ldrb	r3, [r3, #0]
    ae2c:	4413      	add	r3, r2
    ae2e:	b2da      	uxtb	r2, r3
    ae30:	f24a 4366 	movw	r3, #42086	; 0xa466
    ae34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae38:	701a      	strb	r2, [r3, #0]
    ae3a:	f24a 3361 	movw	r3, #41825	; 0xa361
    ae3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae42:	781b      	ldrb	r3, [r3, #0]
    ae44:	3301      	adds	r3, #1
    ae46:	b2da      	uxtb	r2, r3
    ae48:	f24a 3361 	movw	r3, #41825	; 0xa361
    ae4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae50:	701a      	strb	r2, [r3, #0]
    ae52:	f24a 3361 	movw	r3, #41825	; 0xa361
    ae56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae5a:	781b      	ldrb	r3, [r3, #0]
    ae5c:	2bff      	cmp	r3, #255	; 0xff
    ae5e:	d105      	bne.n	ae6c <send_debug+0x308>
    ae60:	f24a 3361 	movw	r3, #41825	; 0xa361
    ae64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae68:	2200      	movs	r2, #0
    ae6a:	701a      	strb	r2, [r3, #0]
    ae6c:	f24a 3361 	movw	r3, #41825	; 0xa361
    ae70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae74:	781b      	ldrb	r3, [r3, #0]
    ae76:	461a      	mov	r2, r3
    ae78:	f24a 53ff 	movw	r3, #42495	; 0xa5ff
    ae7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae80:	7819      	ldrb	r1, [r3, #0]
    ae82:	f24a 3364 	movw	r3, #41828	; 0xa364
    ae86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae8a:	5499      	strb	r1, [r3, r2]
    ae8c:	f24a 4365 	movw	r3, #42085	; 0xa465
    ae90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae94:	781a      	ldrb	r2, [r3, #0]
    ae96:	f24a 53ff 	movw	r3, #42495	; 0xa5ff
    ae9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae9e:	781b      	ldrb	r3, [r3, #0]
    aea0:	4413      	add	r3, r2
    aea2:	b2da      	uxtb	r2, r3
    aea4:	f24a 4365 	movw	r3, #42085	; 0xa465
    aea8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aeac:	701a      	strb	r2, [r3, #0]
    aeae:	f24a 4366 	movw	r3, #42086	; 0xa466
    aeb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aeb6:	781a      	ldrb	r2, [r3, #0]
    aeb8:	f24a 4365 	movw	r3, #42085	; 0xa465
    aebc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aec0:	781b      	ldrb	r3, [r3, #0]
    aec2:	4413      	add	r3, r2
    aec4:	b2da      	uxtb	r2, r3
    aec6:	f24a 4366 	movw	r3, #42086	; 0xa466
    aeca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aece:	701a      	strb	r2, [r3, #0]
    aed0:	f24a 3361 	movw	r3, #41825	; 0xa361
    aed4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aed8:	781b      	ldrb	r3, [r3, #0]
    aeda:	3301      	adds	r3, #1
    aedc:	b2da      	uxtb	r2, r3
    aede:	f24a 3361 	movw	r3, #41825	; 0xa361
    aee2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aee6:	701a      	strb	r2, [r3, #0]
    aee8:	f24a 3361 	movw	r3, #41825	; 0xa361
    aeec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aef0:	781b      	ldrb	r3, [r3, #0]
    aef2:	2bff      	cmp	r3, #255	; 0xff
    aef4:	d105      	bne.n	af02 <send_debug+0x39e>
    aef6:	f24a 3361 	movw	r3, #41825	; 0xa361
    aefa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aefe:	2200      	movs	r2, #0
    af00:	701a      	strb	r2, [r3, #0]
    af02:	f24a 3361 	movw	r3, #41825	; 0xa361
    af06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af0a:	781b      	ldrb	r3, [r3, #0]
    af0c:	461a      	mov	r2, r3
    af0e:	f24a 334c 	movw	r3, #41804	; 0xa34c
    af12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af16:	7819      	ldrb	r1, [r3, #0]
    af18:	f24a 3364 	movw	r3, #41828	; 0xa364
    af1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af20:	5499      	strb	r1, [r3, r2]
    af22:	f24a 4365 	movw	r3, #42085	; 0xa465
    af26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af2a:	781a      	ldrb	r2, [r3, #0]
    af2c:	f24a 334c 	movw	r3, #41804	; 0xa34c
    af30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af34:	781b      	ldrb	r3, [r3, #0]
    af36:	4413      	add	r3, r2
    af38:	b2da      	uxtb	r2, r3
    af3a:	f24a 4365 	movw	r3, #42085	; 0xa465
    af3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af42:	701a      	strb	r2, [r3, #0]
    af44:	f24a 4366 	movw	r3, #42086	; 0xa466
    af48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af4c:	781a      	ldrb	r2, [r3, #0]
    af4e:	f24a 4365 	movw	r3, #42085	; 0xa465
    af52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af56:	781b      	ldrb	r3, [r3, #0]
    af58:	4413      	add	r3, r2
    af5a:	b2da      	uxtb	r2, r3
    af5c:	f24a 4366 	movw	r3, #42086	; 0xa466
    af60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af64:	701a      	strb	r2, [r3, #0]
    af66:	f24a 3361 	movw	r3, #41825	; 0xa361
    af6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af6e:	781b      	ldrb	r3, [r3, #0]
    af70:	3301      	adds	r3, #1
    af72:	b2da      	uxtb	r2, r3
    af74:	f24a 3361 	movw	r3, #41825	; 0xa361
    af78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af7c:	701a      	strb	r2, [r3, #0]
    af7e:	f24a 3361 	movw	r3, #41825	; 0xa361
    af82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af86:	781b      	ldrb	r3, [r3, #0]
    af88:	2bff      	cmp	r3, #255	; 0xff
    af8a:	d105      	bne.n	af98 <send_debug+0x434>
    af8c:	f24a 3361 	movw	r3, #41825	; 0xa361
    af90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af94:	2200      	movs	r2, #0
    af96:	701a      	strb	r2, [r3, #0]
    af98:	f24a 3361 	movw	r3, #41825	; 0xa361
    af9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    afa0:	781b      	ldrb	r3, [r3, #0]
    afa2:	461a      	mov	r2, r3
    afa4:	f24a 4365 	movw	r3, #42085	; 0xa465
    afa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    afac:	7819      	ldrb	r1, [r3, #0]
    afae:	f24a 3364 	movw	r3, #41828	; 0xa364
    afb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    afb6:	5499      	strb	r1, [r3, r2]
    afb8:	f24a 3361 	movw	r3, #41825	; 0xa361
    afbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    afc0:	781b      	ldrb	r3, [r3, #0]
    afc2:	3301      	adds	r3, #1
    afc4:	b2da      	uxtb	r2, r3
    afc6:	f24a 3361 	movw	r3, #41825	; 0xa361
    afca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    afce:	701a      	strb	r2, [r3, #0]
    afd0:	f24a 3361 	movw	r3, #41825	; 0xa361
    afd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    afd8:	781b      	ldrb	r3, [r3, #0]
    afda:	2bff      	cmp	r3, #255	; 0xff
    afdc:	d105      	bne.n	afea <send_debug+0x486>
    afde:	f24a 3361 	movw	r3, #41825	; 0xa361
    afe2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    afe6:	2200      	movs	r2, #0
    afe8:	701a      	strb	r2, [r3, #0]
    afea:	f24a 3361 	movw	r3, #41825	; 0xa361
    afee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aff2:	781b      	ldrb	r3, [r3, #0]
    aff4:	461a      	mov	r2, r3
    aff6:	f24a 4366 	movw	r3, #42086	; 0xa466
    affa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    affe:	7819      	ldrb	r1, [r3, #0]
    b000:	f24a 3364 	movw	r3, #41828	; 0xa364
    b004:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b008:	5499      	strb	r1, [r3, r2]
    b00a:	f24a 3361 	movw	r3, #41825	; 0xa361
    b00e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b012:	781b      	ldrb	r3, [r3, #0]
    b014:	3301      	adds	r3, #1
    b016:	b2da      	uxtb	r2, r3
    b018:	f24a 3361 	movw	r3, #41825	; 0xa361
    b01c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b020:	701a      	strb	r2, [r3, #0]
    b022:	f24a 3361 	movw	r3, #41825	; 0xa361
    b026:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b02a:	781b      	ldrb	r3, [r3, #0]
    b02c:	2bff      	cmp	r3, #255	; 0xff
    b02e:	d105      	bne.n	b03c <send_debug+0x4d8>
    b030:	f24a 3361 	movw	r3, #41825	; 0xa361
    b034:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b038:	2200      	movs	r2, #0
    b03a:	701a      	strb	r2, [r3, #0]
    b03c:	f242 0339 	movw	r3, #8249	; 0x2039
    b040:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b044:	781b      	ldrb	r3, [r3, #0]
    b046:	b2db      	uxtb	r3, r3
    b048:	f003 0310 	and.w	r3, r3, #16
    b04c:	2b00      	cmp	r3, #0
    b04e:	d15a      	bne.n	b106 <send_debug+0x5a2>
    b050:	f24a 3362 	movw	r3, #41826	; 0xa362
    b054:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b058:	781b      	ldrb	r3, [r3, #0]
    b05a:	b2db      	uxtb	r3, r3
    b05c:	461a      	mov	r2, r3
    b05e:	f24a 3364 	movw	r3, #41828	; 0xa364
    b062:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b066:	5c9a      	ldrb	r2, [r3, r2]
    b068:	f24a 4363 	movw	r3, #42083	; 0xa463
    b06c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b070:	701a      	strb	r2, [r3, #0]
    b072:	f24a 4364 	movw	r3, #42084	; 0xa464
    b076:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b07a:	2200      	movs	r2, #0
    b07c:	701a      	strb	r2, [r3, #0]
    b07e:	f24a 3362 	movw	r3, #41826	; 0xa362
    b082:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b086:	781b      	ldrb	r3, [r3, #0]
    b088:	b2db      	uxtb	r3, r3
    b08a:	3301      	adds	r3, #1
    b08c:	b2da      	uxtb	r2, r3
    b08e:	f24a 3362 	movw	r3, #41826	; 0xa362
    b092:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b096:	701a      	strb	r2, [r3, #0]
    b098:	f24a 3362 	movw	r3, #41826	; 0xa362
    b09c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0a0:	781b      	ldrb	r3, [r3, #0]
    b0a2:	b2db      	uxtb	r3, r3
    b0a4:	2bff      	cmp	r3, #255	; 0xff
    b0a6:	d105      	bne.n	b0b4 <send_debug+0x550>
    b0a8:	f24a 3362 	movw	r3, #41826	; 0xa362
    b0ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0b0:	2200      	movs	r2, #0
    b0b2:	701a      	strb	r2, [r3, #0]
    b0b4:	f242 0338 	movw	r3, #8248	; 0x2038
    b0b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0bc:	f242 0238 	movw	r2, #8248	; 0x2038
    b0c0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    b0c4:	7812      	ldrb	r2, [r2, #0]
    b0c6:	b2d2      	uxtb	r2, r2
    b0c8:	f042 0201 	orr.w	r2, r2, #1
    b0cc:	b2d2      	uxtb	r2, r2
    b0ce:	701a      	strb	r2, [r3, #0]
    b0d0:	f242 0339 	movw	r3, #8249	; 0x2039
    b0d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0d8:	f242 0239 	movw	r2, #8249	; 0x2039
    b0dc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    b0e0:	7812      	ldrb	r2, [r2, #0]
    b0e2:	b2d2      	uxtb	r2, r2
    b0e4:	f042 0210 	orr.w	r2, r2, #16
    b0e8:	b2d2      	uxtb	r2, r2
    b0ea:	701a      	strb	r2, [r3, #0]
    b0ec:	e00b      	b.n	b106 <send_debug+0x5a2>
    b0ee:	f24a 3360 	movw	r3, #41824	; 0xa360
    b0f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0f6:	781b      	ldrb	r3, [r3, #0]
    b0f8:	3301      	adds	r3, #1
    b0fa:	b2da      	uxtb	r2, r3
    b0fc:	f24a 3360 	movw	r3, #41824	; 0xa360
    b100:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b104:	701a      	strb	r2, [r3, #0]
}
    b106:	46bd      	mov	sp, r7
    b108:	f85d 7b04 	ldr.w	r7, [sp], #4
    b10c:	4770      	bx	lr
    b10e:	bf00      	nop

0000b110 <send_nav_ref>:
void send_nav_ref(void){  //10000ms
    b110:	b480      	push	{r7}
    b112:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 100 == 49) PERIODIC_SEND_NAVIGATION_REF();}
    b114:	f24a 3359 	movw	r3, #41817	; 0xa359
    b118:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b11c:	781a      	ldrb	r2, [r3, #0]
    b11e:	f248 531f 	movw	r3, #34079	; 0x851f
    b122:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    b126:	fba3 1302 	umull	r1, r3, r3, r2
    b12a:	095b      	lsrs	r3, r3, #5
    b12c:	2164      	movs	r1, #100	; 0x64
    b12e:	fb01 f303 	mul.w	r3, r1, r3
    b132:	1ad3      	subs	r3, r2, r3
    b134:	b2db      	uxtb	r3, r3
    b136:	2b31      	cmp	r3, #49	; 0x31
    b138:	f040 8395 	bne.w	b866 <send_nav_ref+0x756>
    b13c:	f24a 3361 	movw	r3, #41825	; 0xa361
    b140:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b144:	781a      	ldrb	r2, [r3, #0]
    b146:	f24a 3362 	movw	r3, #41826	; 0xa362
    b14a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b14e:	781b      	ldrb	r3, [r3, #0]
    b150:	b2db      	uxtb	r3, r3
    b152:	429a      	cmp	r2, r3
    b154:	d313      	bcc.n	b17e <send_nav_ref+0x6e>
    b156:	f24a 3362 	movw	r3, #41826	; 0xa362
    b15a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b15e:	781b      	ldrb	r3, [r3, #0]
    b160:	b2db      	uxtb	r3, r3
    b162:	461a      	mov	r2, r3
    b164:	f24a 3361 	movw	r3, #41825	; 0xa361
    b168:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b16c:	781b      	ldrb	r3, [r3, #0]
    b16e:	1ad3      	subs	r3, r2, r3
    b170:	33ff      	adds	r3, #255	; 0xff
    b172:	2b0c      	cmp	r3, #12
    b174:	bfd4      	ite	le
    b176:	2300      	movle	r3, #0
    b178:	2301      	movgt	r3, #1
    b17a:	b2db      	uxtb	r3, r3
    b17c:	e011      	b.n	b1a2 <send_nav_ref+0x92>
    b17e:	f24a 3362 	movw	r3, #41826	; 0xa362
    b182:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b186:	781b      	ldrb	r3, [r3, #0]
    b188:	b2db      	uxtb	r3, r3
    b18a:	461a      	mov	r2, r3
    b18c:	f24a 3361 	movw	r3, #41825	; 0xa361
    b190:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b194:	781b      	ldrb	r3, [r3, #0]
    b196:	1ad3      	subs	r3, r2, r3
    b198:	2b0c      	cmp	r3, #12
    b19a:	bfd4      	ite	le
    b19c:	2300      	movle	r3, #0
    b19e:	2301      	movgt	r3, #1
    b1a0:	b2db      	uxtb	r3, r3
    b1a2:	2b00      	cmp	r3, #0
    b1a4:	f000 8353 	beq.w	b84e <send_nav_ref+0x73e>
    b1a8:	f24a 3361 	movw	r3, #41825	; 0xa361
    b1ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1b0:	781b      	ldrb	r3, [r3, #0]
    b1b2:	461a      	mov	r2, r3
    b1b4:	f24a 3364 	movw	r3, #41828	; 0xa364
    b1b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1bc:	2105      	movs	r1, #5
    b1be:	5499      	strb	r1, [r3, r2]
    b1c0:	f24a 3361 	movw	r3, #41825	; 0xa361
    b1c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1c8:	781b      	ldrb	r3, [r3, #0]
    b1ca:	3301      	adds	r3, #1
    b1cc:	b2da      	uxtb	r2, r3
    b1ce:	f24a 3361 	movw	r3, #41825	; 0xa361
    b1d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1d6:	701a      	strb	r2, [r3, #0]
    b1d8:	f24a 3361 	movw	r3, #41825	; 0xa361
    b1dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1e0:	781b      	ldrb	r3, [r3, #0]
    b1e2:	2bff      	cmp	r3, #255	; 0xff
    b1e4:	d105      	bne.n	b1f2 <send_nav_ref+0xe2>
    b1e6:	f24a 3361 	movw	r3, #41825	; 0xa361
    b1ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1ee:	2200      	movs	r2, #0
    b1f0:	701a      	strb	r2, [r3, #0]
    b1f2:	f24a 3361 	movw	r3, #41825	; 0xa361
    b1f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1fa:	781b      	ldrb	r3, [r3, #0]
    b1fc:	461a      	mov	r2, r3
    b1fe:	f24a 3364 	movw	r3, #41828	; 0xa364
    b202:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b206:	2109      	movs	r1, #9
    b208:	5499      	strb	r1, [r3, r2]
    b20a:	f24a 3361 	movw	r3, #41825	; 0xa361
    b20e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b212:	781b      	ldrb	r3, [r3, #0]
    b214:	3301      	adds	r3, #1
    b216:	b2da      	uxtb	r2, r3
    b218:	f24a 3361 	movw	r3, #41825	; 0xa361
    b21c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b220:	701a      	strb	r2, [r3, #0]
    b222:	f24a 3361 	movw	r3, #41825	; 0xa361
    b226:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b22a:	781b      	ldrb	r3, [r3, #0]
    b22c:	2bff      	cmp	r3, #255	; 0xff
    b22e:	d105      	bne.n	b23c <send_nav_ref+0x12c>
    b230:	f24a 3361 	movw	r3, #41825	; 0xa361
    b234:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b238:	2200      	movs	r2, #0
    b23a:	701a      	strb	r2, [r3, #0]
    b23c:	f24a 4365 	movw	r3, #42085	; 0xa465
    b240:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b244:	2209      	movs	r2, #9
    b246:	701a      	strb	r2, [r3, #0]
    b248:	f24a 4366 	movw	r3, #42086	; 0xa466
    b24c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b250:	2209      	movs	r2, #9
    b252:	701a      	strb	r2, [r3, #0]
    b254:	f24a 3361 	movw	r3, #41825	; 0xa361
    b258:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b25c:	781b      	ldrb	r3, [r3, #0]
    b25e:	461a      	mov	r2, r3
    b260:	f247 23f8 	movw	r3, #29432	; 0x72f8
    b264:	f2c0 0301 	movt	r3, #1
    b268:	7819      	ldrb	r1, [r3, #0]
    b26a:	f24a 3364 	movw	r3, #41828	; 0xa364
    b26e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b272:	5499      	strb	r1, [r3, r2]
    b274:	f247 23f8 	movw	r3, #29432	; 0x72f8
    b278:	f2c0 0301 	movt	r3, #1
    b27c:	781a      	ldrb	r2, [r3, #0]
    b27e:	f24a 4365 	movw	r3, #42085	; 0xa465
    b282:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b286:	781b      	ldrb	r3, [r3, #0]
    b288:	4413      	add	r3, r2
    b28a:	b2da      	uxtb	r2, r3
    b28c:	f24a 4365 	movw	r3, #42085	; 0xa465
    b290:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b294:	701a      	strb	r2, [r3, #0]
    b296:	f24a 4366 	movw	r3, #42086	; 0xa466
    b29a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b29e:	781a      	ldrb	r2, [r3, #0]
    b2a0:	f24a 4365 	movw	r3, #42085	; 0xa465
    b2a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2a8:	781b      	ldrb	r3, [r3, #0]
    b2aa:	4413      	add	r3, r2
    b2ac:	b2da      	uxtb	r2, r3
    b2ae:	f24a 4366 	movw	r3, #42086	; 0xa466
    b2b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2b6:	701a      	strb	r2, [r3, #0]
    b2b8:	f24a 3361 	movw	r3, #41825	; 0xa361
    b2bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2c0:	781b      	ldrb	r3, [r3, #0]
    b2c2:	3301      	adds	r3, #1
    b2c4:	b2da      	uxtb	r2, r3
    b2c6:	f24a 3361 	movw	r3, #41825	; 0xa361
    b2ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2ce:	701a      	strb	r2, [r3, #0]
    b2d0:	f24a 3361 	movw	r3, #41825	; 0xa361
    b2d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2d8:	781b      	ldrb	r3, [r3, #0]
    b2da:	2bff      	cmp	r3, #255	; 0xff
    b2dc:	d105      	bne.n	b2ea <send_nav_ref+0x1da>
    b2de:	f24a 3361 	movw	r3, #41825	; 0xa361
    b2e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2e6:	2200      	movs	r2, #0
    b2e8:	701a      	strb	r2, [r3, #0]
    b2ea:	f24a 3361 	movw	r3, #41825	; 0xa361
    b2ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2f2:	781b      	ldrb	r3, [r3, #0]
    b2f4:	461a      	mov	r2, r3
    b2f6:	f247 23f8 	movw	r3, #29432	; 0x72f8
    b2fa:	f2c0 0301 	movt	r3, #1
    b2fe:	7859      	ldrb	r1, [r3, #1]
    b300:	f24a 3364 	movw	r3, #41828	; 0xa364
    b304:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b308:	5499      	strb	r1, [r3, r2]
    b30a:	4bd2      	ldr	r3, [pc, #840]	; (b654 <send_nav_ref+0x544>)
    b30c:	781a      	ldrb	r2, [r3, #0]
    b30e:	f24a 4365 	movw	r3, #42085	; 0xa465
    b312:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b316:	781b      	ldrb	r3, [r3, #0]
    b318:	4413      	add	r3, r2
    b31a:	b2da      	uxtb	r2, r3
    b31c:	f24a 4365 	movw	r3, #42085	; 0xa465
    b320:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b324:	701a      	strb	r2, [r3, #0]
    b326:	f24a 4366 	movw	r3, #42086	; 0xa466
    b32a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b32e:	781a      	ldrb	r2, [r3, #0]
    b330:	f24a 4365 	movw	r3, #42085	; 0xa465
    b334:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b338:	781b      	ldrb	r3, [r3, #0]
    b33a:	4413      	add	r3, r2
    b33c:	b2da      	uxtb	r2, r3
    b33e:	f24a 4366 	movw	r3, #42086	; 0xa466
    b342:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b346:	701a      	strb	r2, [r3, #0]
    b348:	f24a 3361 	movw	r3, #41825	; 0xa361
    b34c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b350:	781b      	ldrb	r3, [r3, #0]
    b352:	3301      	adds	r3, #1
    b354:	b2da      	uxtb	r2, r3
    b356:	f24a 3361 	movw	r3, #41825	; 0xa361
    b35a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b35e:	701a      	strb	r2, [r3, #0]
    b360:	f24a 3361 	movw	r3, #41825	; 0xa361
    b364:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b368:	781b      	ldrb	r3, [r3, #0]
    b36a:	2bff      	cmp	r3, #255	; 0xff
    b36c:	d105      	bne.n	b37a <send_nav_ref+0x26a>
    b36e:	f24a 3361 	movw	r3, #41825	; 0xa361
    b372:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b376:	2200      	movs	r2, #0
    b378:	701a      	strb	r2, [r3, #0]
    b37a:	f24a 3361 	movw	r3, #41825	; 0xa361
    b37e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b382:	781b      	ldrb	r3, [r3, #0]
    b384:	461a      	mov	r2, r3
    b386:	f247 23f8 	movw	r3, #29432	; 0x72f8
    b38a:	f2c0 0301 	movt	r3, #1
    b38e:	7899      	ldrb	r1, [r3, #2]
    b390:	f24a 3364 	movw	r3, #41828	; 0xa364
    b394:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b398:	5499      	strb	r1, [r3, r2]
    b39a:	4baf      	ldr	r3, [pc, #700]	; (b658 <send_nav_ref+0x548>)
    b39c:	781a      	ldrb	r2, [r3, #0]
    b39e:	f24a 4365 	movw	r3, #42085	; 0xa465
    b3a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3a6:	781b      	ldrb	r3, [r3, #0]
    b3a8:	4413      	add	r3, r2
    b3aa:	b2da      	uxtb	r2, r3
    b3ac:	f24a 4365 	movw	r3, #42085	; 0xa465
    b3b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3b4:	701a      	strb	r2, [r3, #0]
    b3b6:	f24a 4366 	movw	r3, #42086	; 0xa466
    b3ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3be:	781a      	ldrb	r2, [r3, #0]
    b3c0:	f24a 4365 	movw	r3, #42085	; 0xa465
    b3c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3c8:	781b      	ldrb	r3, [r3, #0]
    b3ca:	4413      	add	r3, r2
    b3cc:	b2da      	uxtb	r2, r3
    b3ce:	f24a 4366 	movw	r3, #42086	; 0xa466
    b3d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3d6:	701a      	strb	r2, [r3, #0]
    b3d8:	f24a 3361 	movw	r3, #41825	; 0xa361
    b3dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3e0:	781b      	ldrb	r3, [r3, #0]
    b3e2:	3301      	adds	r3, #1
    b3e4:	b2da      	uxtb	r2, r3
    b3e6:	f24a 3361 	movw	r3, #41825	; 0xa361
    b3ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3ee:	701a      	strb	r2, [r3, #0]
    b3f0:	f24a 3361 	movw	r3, #41825	; 0xa361
    b3f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3f8:	781b      	ldrb	r3, [r3, #0]
    b3fa:	2bff      	cmp	r3, #255	; 0xff
    b3fc:	d105      	bne.n	b40a <send_nav_ref+0x2fa>
    b3fe:	f24a 3361 	movw	r3, #41825	; 0xa361
    b402:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b406:	2200      	movs	r2, #0
    b408:	701a      	strb	r2, [r3, #0]
    b40a:	f24a 3361 	movw	r3, #41825	; 0xa361
    b40e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b412:	781b      	ldrb	r3, [r3, #0]
    b414:	461a      	mov	r2, r3
    b416:	f247 23f8 	movw	r3, #29432	; 0x72f8
    b41a:	f2c0 0301 	movt	r3, #1
    b41e:	78d9      	ldrb	r1, [r3, #3]
    b420:	f24a 3364 	movw	r3, #41828	; 0xa364
    b424:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b428:	5499      	strb	r1, [r3, r2]
    b42a:	4b8c      	ldr	r3, [pc, #560]	; (b65c <send_nav_ref+0x54c>)
    b42c:	781a      	ldrb	r2, [r3, #0]
    b42e:	f24a 4365 	movw	r3, #42085	; 0xa465
    b432:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b436:	781b      	ldrb	r3, [r3, #0]
    b438:	4413      	add	r3, r2
    b43a:	b2da      	uxtb	r2, r3
    b43c:	f24a 4365 	movw	r3, #42085	; 0xa465
    b440:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b444:	701a      	strb	r2, [r3, #0]
    b446:	f24a 4366 	movw	r3, #42086	; 0xa466
    b44a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b44e:	781a      	ldrb	r2, [r3, #0]
    b450:	f24a 4365 	movw	r3, #42085	; 0xa465
    b454:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b458:	781b      	ldrb	r3, [r3, #0]
    b45a:	4413      	add	r3, r2
    b45c:	b2da      	uxtb	r2, r3
    b45e:	f24a 4366 	movw	r3, #42086	; 0xa466
    b462:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b466:	701a      	strb	r2, [r3, #0]
    b468:	f24a 3361 	movw	r3, #41825	; 0xa361
    b46c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b470:	781b      	ldrb	r3, [r3, #0]
    b472:	3301      	adds	r3, #1
    b474:	b2da      	uxtb	r2, r3
    b476:	f24a 3361 	movw	r3, #41825	; 0xa361
    b47a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b47e:	701a      	strb	r2, [r3, #0]
    b480:	f24a 3361 	movw	r3, #41825	; 0xa361
    b484:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b488:	781b      	ldrb	r3, [r3, #0]
    b48a:	2bff      	cmp	r3, #255	; 0xff
    b48c:	d105      	bne.n	b49a <send_nav_ref+0x38a>
    b48e:	f24a 3361 	movw	r3, #41825	; 0xa361
    b492:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b496:	2200      	movs	r2, #0
    b498:	701a      	strb	r2, [r3, #0]
    b49a:	f24a 3361 	movw	r3, #41825	; 0xa361
    b49e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4a2:	781b      	ldrb	r3, [r3, #0]
    b4a4:	461a      	mov	r2, r3
    b4a6:	f247 23fc 	movw	r3, #29436	; 0x72fc
    b4aa:	f2c0 0301 	movt	r3, #1
    b4ae:	7819      	ldrb	r1, [r3, #0]
    b4b0:	f24a 3364 	movw	r3, #41828	; 0xa364
    b4b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4b8:	5499      	strb	r1, [r3, r2]
    b4ba:	f247 23fc 	movw	r3, #29436	; 0x72fc
    b4be:	f2c0 0301 	movt	r3, #1
    b4c2:	781a      	ldrb	r2, [r3, #0]
    b4c4:	f24a 4365 	movw	r3, #42085	; 0xa465
    b4c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4cc:	781b      	ldrb	r3, [r3, #0]
    b4ce:	4413      	add	r3, r2
    b4d0:	b2da      	uxtb	r2, r3
    b4d2:	f24a 4365 	movw	r3, #42085	; 0xa465
    b4d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4da:	701a      	strb	r2, [r3, #0]
    b4dc:	f24a 4366 	movw	r3, #42086	; 0xa466
    b4e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4e4:	781a      	ldrb	r2, [r3, #0]
    b4e6:	f24a 4365 	movw	r3, #42085	; 0xa465
    b4ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4ee:	781b      	ldrb	r3, [r3, #0]
    b4f0:	4413      	add	r3, r2
    b4f2:	b2da      	uxtb	r2, r3
    b4f4:	f24a 4366 	movw	r3, #42086	; 0xa466
    b4f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4fc:	701a      	strb	r2, [r3, #0]
    b4fe:	f24a 3361 	movw	r3, #41825	; 0xa361
    b502:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b506:	781b      	ldrb	r3, [r3, #0]
    b508:	3301      	adds	r3, #1
    b50a:	b2da      	uxtb	r2, r3
    b50c:	f24a 3361 	movw	r3, #41825	; 0xa361
    b510:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b514:	701a      	strb	r2, [r3, #0]
    b516:	f24a 3361 	movw	r3, #41825	; 0xa361
    b51a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b51e:	781b      	ldrb	r3, [r3, #0]
    b520:	2bff      	cmp	r3, #255	; 0xff
    b522:	d105      	bne.n	b530 <send_nav_ref+0x420>
    b524:	f24a 3361 	movw	r3, #41825	; 0xa361
    b528:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b52c:	2200      	movs	r2, #0
    b52e:	701a      	strb	r2, [r3, #0]
    b530:	f24a 3361 	movw	r3, #41825	; 0xa361
    b534:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b538:	781b      	ldrb	r3, [r3, #0]
    b53a:	461a      	mov	r2, r3
    b53c:	f247 23fc 	movw	r3, #29436	; 0x72fc
    b540:	f2c0 0301 	movt	r3, #1
    b544:	7859      	ldrb	r1, [r3, #1]
    b546:	f24a 3364 	movw	r3, #41828	; 0xa364
    b54a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b54e:	5499      	strb	r1, [r3, r2]
    b550:	4b43      	ldr	r3, [pc, #268]	; (b660 <send_nav_ref+0x550>)
    b552:	781a      	ldrb	r2, [r3, #0]
    b554:	f24a 4365 	movw	r3, #42085	; 0xa465
    b558:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b55c:	781b      	ldrb	r3, [r3, #0]
    b55e:	4413      	add	r3, r2
    b560:	b2da      	uxtb	r2, r3
    b562:	f24a 4365 	movw	r3, #42085	; 0xa465
    b566:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b56a:	701a      	strb	r2, [r3, #0]
    b56c:	f24a 4366 	movw	r3, #42086	; 0xa466
    b570:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b574:	781a      	ldrb	r2, [r3, #0]
    b576:	f24a 4365 	movw	r3, #42085	; 0xa465
    b57a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b57e:	781b      	ldrb	r3, [r3, #0]
    b580:	4413      	add	r3, r2
    b582:	b2da      	uxtb	r2, r3
    b584:	f24a 4366 	movw	r3, #42086	; 0xa466
    b588:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b58c:	701a      	strb	r2, [r3, #0]
    b58e:	f24a 3361 	movw	r3, #41825	; 0xa361
    b592:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b596:	781b      	ldrb	r3, [r3, #0]
    b598:	3301      	adds	r3, #1
    b59a:	b2da      	uxtb	r2, r3
    b59c:	f24a 3361 	movw	r3, #41825	; 0xa361
    b5a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5a4:	701a      	strb	r2, [r3, #0]
    b5a6:	f24a 3361 	movw	r3, #41825	; 0xa361
    b5aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5ae:	781b      	ldrb	r3, [r3, #0]
    b5b0:	2bff      	cmp	r3, #255	; 0xff
    b5b2:	d105      	bne.n	b5c0 <send_nav_ref+0x4b0>
    b5b4:	f24a 3361 	movw	r3, #41825	; 0xa361
    b5b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5bc:	2200      	movs	r2, #0
    b5be:	701a      	strb	r2, [r3, #0]
    b5c0:	f24a 3361 	movw	r3, #41825	; 0xa361
    b5c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5c8:	781b      	ldrb	r3, [r3, #0]
    b5ca:	461a      	mov	r2, r3
    b5cc:	f247 23fc 	movw	r3, #29436	; 0x72fc
    b5d0:	f2c0 0301 	movt	r3, #1
    b5d4:	7899      	ldrb	r1, [r3, #2]
    b5d6:	f24a 3364 	movw	r3, #41828	; 0xa364
    b5da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5de:	5499      	strb	r1, [r3, r2]
    b5e0:	4b20      	ldr	r3, [pc, #128]	; (b664 <send_nav_ref+0x554>)
    b5e2:	781a      	ldrb	r2, [r3, #0]
    b5e4:	f24a 4365 	movw	r3, #42085	; 0xa465
    b5e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5ec:	781b      	ldrb	r3, [r3, #0]
    b5ee:	4413      	add	r3, r2
    b5f0:	b2da      	uxtb	r2, r3
    b5f2:	f24a 4365 	movw	r3, #42085	; 0xa465
    b5f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5fa:	701a      	strb	r2, [r3, #0]
    b5fc:	f24a 4366 	movw	r3, #42086	; 0xa466
    b600:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b604:	781a      	ldrb	r2, [r3, #0]
    b606:	f24a 4365 	movw	r3, #42085	; 0xa465
    b60a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b60e:	781b      	ldrb	r3, [r3, #0]
    b610:	4413      	add	r3, r2
    b612:	b2da      	uxtb	r2, r3
    b614:	f24a 4366 	movw	r3, #42086	; 0xa466
    b618:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b61c:	701a      	strb	r2, [r3, #0]
    b61e:	f24a 3361 	movw	r3, #41825	; 0xa361
    b622:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b626:	781b      	ldrb	r3, [r3, #0]
    b628:	3301      	adds	r3, #1
    b62a:	b2da      	uxtb	r2, r3
    b62c:	f24a 3361 	movw	r3, #41825	; 0xa361
    b630:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b634:	701a      	strb	r2, [r3, #0]
    b636:	f24a 3361 	movw	r3, #41825	; 0xa361
    b63a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b63e:	781b      	ldrb	r3, [r3, #0]
    b640:	2bff      	cmp	r3, #255	; 0xff
    b642:	d111      	bne.n	b668 <send_nav_ref+0x558>
    b644:	f24a 3361 	movw	r3, #41825	; 0xa361
    b648:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b64c:	2200      	movs	r2, #0
    b64e:	701a      	strb	r2, [r3, #0]
    b650:	e00a      	b.n	b668 <send_nav_ref+0x558>
    b652:	bf00      	nop
    b654:	000172f9 	.word	0x000172f9
    b658:	000172fa 	.word	0x000172fa
    b65c:	000172fb 	.word	0x000172fb
    b660:	000172fd 	.word	0x000172fd
    b664:	000172fe 	.word	0x000172fe
    b668:	f24a 3361 	movw	r3, #41825	; 0xa361
    b66c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b670:	781b      	ldrb	r3, [r3, #0]
    b672:	461a      	mov	r2, r3
    b674:	f247 23fc 	movw	r3, #29436	; 0x72fc
    b678:	f2c0 0301 	movt	r3, #1
    b67c:	78d9      	ldrb	r1, [r3, #3]
    b67e:	f24a 3364 	movw	r3, #41828	; 0xa364
    b682:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b686:	5499      	strb	r1, [r3, r2]
    b688:	4b79      	ldr	r3, [pc, #484]	; (b870 <send_nav_ref+0x760>)
    b68a:	781a      	ldrb	r2, [r3, #0]
    b68c:	f24a 4365 	movw	r3, #42085	; 0xa465
    b690:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b694:	781b      	ldrb	r3, [r3, #0]
    b696:	4413      	add	r3, r2
    b698:	b2da      	uxtb	r2, r3
    b69a:	f24a 4365 	movw	r3, #42085	; 0xa465
    b69e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6a2:	701a      	strb	r2, [r3, #0]
    b6a4:	f24a 4366 	movw	r3, #42086	; 0xa466
    b6a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6ac:	781a      	ldrb	r2, [r3, #0]
    b6ae:	f24a 4365 	movw	r3, #42085	; 0xa465
    b6b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6b6:	781b      	ldrb	r3, [r3, #0]
    b6b8:	4413      	add	r3, r2
    b6ba:	b2da      	uxtb	r2, r3
    b6bc:	f24a 4366 	movw	r3, #42086	; 0xa466
    b6c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6c4:	701a      	strb	r2, [r3, #0]
    b6c6:	f24a 3361 	movw	r3, #41825	; 0xa361
    b6ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6ce:	781b      	ldrb	r3, [r3, #0]
    b6d0:	3301      	adds	r3, #1
    b6d2:	b2da      	uxtb	r2, r3
    b6d4:	f24a 3361 	movw	r3, #41825	; 0xa361
    b6d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6dc:	701a      	strb	r2, [r3, #0]
    b6de:	f24a 3361 	movw	r3, #41825	; 0xa361
    b6e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6e6:	781b      	ldrb	r3, [r3, #0]
    b6e8:	2bff      	cmp	r3, #255	; 0xff
    b6ea:	d105      	bne.n	b6f8 <send_nav_ref+0x5e8>
    b6ec:	f24a 3361 	movw	r3, #41825	; 0xa361
    b6f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6f4:	2200      	movs	r2, #0
    b6f6:	701a      	strb	r2, [r3, #0]
    b6f8:	f24a 3361 	movw	r3, #41825	; 0xa361
    b6fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b700:	781b      	ldrb	r3, [r3, #0]
    b702:	461a      	mov	r2, r3
    b704:	f24a 4365 	movw	r3, #42085	; 0xa465
    b708:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b70c:	7819      	ldrb	r1, [r3, #0]
    b70e:	f24a 3364 	movw	r3, #41828	; 0xa364
    b712:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b716:	5499      	strb	r1, [r3, r2]
    b718:	f24a 3361 	movw	r3, #41825	; 0xa361
    b71c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b720:	781b      	ldrb	r3, [r3, #0]
    b722:	3301      	adds	r3, #1
    b724:	b2da      	uxtb	r2, r3
    b726:	f24a 3361 	movw	r3, #41825	; 0xa361
    b72a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b72e:	701a      	strb	r2, [r3, #0]
    b730:	f24a 3361 	movw	r3, #41825	; 0xa361
    b734:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b738:	781b      	ldrb	r3, [r3, #0]
    b73a:	2bff      	cmp	r3, #255	; 0xff
    b73c:	d105      	bne.n	b74a <send_nav_ref+0x63a>
    b73e:	f24a 3361 	movw	r3, #41825	; 0xa361
    b742:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b746:	2200      	movs	r2, #0
    b748:	701a      	strb	r2, [r3, #0]
    b74a:	f24a 3361 	movw	r3, #41825	; 0xa361
    b74e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b752:	781b      	ldrb	r3, [r3, #0]
    b754:	461a      	mov	r2, r3
    b756:	f24a 4366 	movw	r3, #42086	; 0xa466
    b75a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b75e:	7819      	ldrb	r1, [r3, #0]
    b760:	f24a 3364 	movw	r3, #41828	; 0xa364
    b764:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b768:	5499      	strb	r1, [r3, r2]
    b76a:	f24a 3361 	movw	r3, #41825	; 0xa361
    b76e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b772:	781b      	ldrb	r3, [r3, #0]
    b774:	3301      	adds	r3, #1
    b776:	b2da      	uxtb	r2, r3
    b778:	f24a 3361 	movw	r3, #41825	; 0xa361
    b77c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b780:	701a      	strb	r2, [r3, #0]
    b782:	f24a 3361 	movw	r3, #41825	; 0xa361
    b786:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b78a:	781b      	ldrb	r3, [r3, #0]
    b78c:	2bff      	cmp	r3, #255	; 0xff
    b78e:	d105      	bne.n	b79c <send_nav_ref+0x68c>
    b790:	f24a 3361 	movw	r3, #41825	; 0xa361
    b794:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b798:	2200      	movs	r2, #0
    b79a:	701a      	strb	r2, [r3, #0]
    b79c:	f242 0339 	movw	r3, #8249	; 0x2039
    b7a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7a4:	781b      	ldrb	r3, [r3, #0]
    b7a6:	b2db      	uxtb	r3, r3
    b7a8:	f003 0310 	and.w	r3, r3, #16
    b7ac:	2b00      	cmp	r3, #0
    b7ae:	d15a      	bne.n	b866 <send_nav_ref+0x756>
    b7b0:	f24a 3362 	movw	r3, #41826	; 0xa362
    b7b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7b8:	781b      	ldrb	r3, [r3, #0]
    b7ba:	b2db      	uxtb	r3, r3
    b7bc:	461a      	mov	r2, r3
    b7be:	f24a 3364 	movw	r3, #41828	; 0xa364
    b7c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7c6:	5c9a      	ldrb	r2, [r3, r2]
    b7c8:	f24a 4363 	movw	r3, #42083	; 0xa463
    b7cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7d0:	701a      	strb	r2, [r3, #0]
    b7d2:	f24a 4364 	movw	r3, #42084	; 0xa464
    b7d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7da:	2200      	movs	r2, #0
    b7dc:	701a      	strb	r2, [r3, #0]
    b7de:	f24a 3362 	movw	r3, #41826	; 0xa362
    b7e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7e6:	781b      	ldrb	r3, [r3, #0]
    b7e8:	b2db      	uxtb	r3, r3
    b7ea:	3301      	adds	r3, #1
    b7ec:	b2da      	uxtb	r2, r3
    b7ee:	f24a 3362 	movw	r3, #41826	; 0xa362
    b7f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7f6:	701a      	strb	r2, [r3, #0]
    b7f8:	f24a 3362 	movw	r3, #41826	; 0xa362
    b7fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b800:	781b      	ldrb	r3, [r3, #0]
    b802:	b2db      	uxtb	r3, r3
    b804:	2bff      	cmp	r3, #255	; 0xff
    b806:	d105      	bne.n	b814 <send_nav_ref+0x704>
    b808:	f24a 3362 	movw	r3, #41826	; 0xa362
    b80c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b810:	2200      	movs	r2, #0
    b812:	701a      	strb	r2, [r3, #0]
    b814:	f242 0338 	movw	r3, #8248	; 0x2038
    b818:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b81c:	f242 0238 	movw	r2, #8248	; 0x2038
    b820:	f2c2 0200 	movt	r2, #8192	; 0x2000
    b824:	7812      	ldrb	r2, [r2, #0]
    b826:	b2d2      	uxtb	r2, r2
    b828:	f042 0201 	orr.w	r2, r2, #1
    b82c:	b2d2      	uxtb	r2, r2
    b82e:	701a      	strb	r2, [r3, #0]
    b830:	f242 0339 	movw	r3, #8249	; 0x2039
    b834:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b838:	f242 0239 	movw	r2, #8249	; 0x2039
    b83c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    b840:	7812      	ldrb	r2, [r2, #0]
    b842:	b2d2      	uxtb	r2, r2
    b844:	f042 0210 	orr.w	r2, r2, #16
    b848:	b2d2      	uxtb	r2, r2
    b84a:	701a      	strb	r2, [r3, #0]
    b84c:	e00b      	b.n	b866 <send_nav_ref+0x756>
    b84e:	f24a 3360 	movw	r3, #41824	; 0xa360
    b852:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b856:	781b      	ldrb	r3, [r3, #0]
    b858:	3301      	adds	r3, #1
    b85a:	b2da      	uxtb	r2, r3
    b85c:	f24a 3360 	movw	r3, #41824	; 0xa360
    b860:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b864:	701a      	strb	r2, [r3, #0]
  //vPrintString("S_13 reporting_task end!\n\r");
}
    b866:	46bd      	mov	sp, r7
    b868:	f85d 7b04 	ldr.w	r7, [sp], #4
    b86c:	4770      	bx	lr
    b86e:	bf00      	nop
    b870:	000172ff 	.word	0x000172ff

0000b874 <inflight_calib_mode_update>:

/** \fn inline uint8_t inflight_calib_mode_update ( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
inline uint8_t inflight_calib_mode_update ( void ) {
    b874:	b480      	push	{r7}
    b876:	b083      	sub	sp, #12
    b878:	af00      	add	r7, sp, #0
  ModeUpdate(inflight_calib_mode, IF_CALIB_MODE_OF_PULSE(from_fbw.channels[RADIO_CALIB]));
    b87a:	f24a 4368 	movw	r3, #42088	; 0xa468
    b87e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b882:	8a1b      	ldrh	r3, [r3, #16]
    b884:	b21b      	sxth	r3, r3
    b886:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
    b88a:	db0d      	blt.n	b8a8 <inflight_calib_mode_update+0x34>
    b88c:	f24a 4368 	movw	r3, #42088	; 0xa468
    b890:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b894:	8a1b      	ldrh	r3, [r3, #16]
    b896:	b21a      	sxth	r2, r3
    b898:	f640 437f 	movw	r3, #3199	; 0xc7f
    b89c:	429a      	cmp	r2, r3
    b89e:	bfd4      	ite	le
    b8a0:	2300      	movle	r3, #0
    b8a2:	2301      	movgt	r3, #1
    b8a4:	b2db      	uxtb	r3, r3
    b8a6:	e000      	b.n	b8aa <inflight_calib_mode_update+0x36>
    b8a8:	2302      	movs	r3, #2
    b8aa:	71fb      	strb	r3, [r7, #7]
    b8ac:	f64a 1374 	movw	r3, #43380	; 0xa974
    b8b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8b4:	781b      	ldrb	r3, [r3, #0]
    b8b6:	79fa      	ldrb	r2, [r7, #7]
    b8b8:	429a      	cmp	r2, r3
    b8ba:	d007      	beq.n	b8cc <inflight_calib_mode_update+0x58>
    b8bc:	f64a 1374 	movw	r3, #43380	; 0xa974
    b8c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8c4:	79fa      	ldrb	r2, [r7, #7]
    b8c6:	701a      	strb	r2, [r3, #0]
    b8c8:	2301      	movs	r3, #1
    b8ca:	e000      	b.n	b8ce <inflight_calib_mode_update+0x5a>
    b8cc:	2300      	movs	r3, #0
}
    b8ce:	4618      	mov	r0, r3
    b8d0:	370c      	adds	r7, #12
    b8d2:	46bd      	mov	sp, r7
    b8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    b8d8:	4770      	bx	lr
    b8da:	bf00      	nop

0000b8dc <radio_control_task>:


/** \fn inline void radio_control_task( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
void radio_control_task( void ) {
    b8dc:	b580      	push	{r7, lr}
    b8de:	b082      	sub	sp, #8
    b8e0:	af00      	add	r7, sp, #0
  bool_t calib_mode_changed;
	//vPrintString("S_3 radio_control_task start! \n\r"); //SunnyBeike
    //add by wanbo
    link_fbw_receive_valid = 1;
    b8e2:	f24a 4396 	movw	r3, #42134	; 0xa496
    b8e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8ea:	2201      	movs	r2, #1
    b8ec:	701a      	strb	r2, [r3, #0]
  if (link_fbw_receive_valid) {
    b8ee:	f24a 4396 	movw	r3, #42134	; 0xa496
    b8f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8f6:	781b      	ldrb	r3, [r3, #0]
    b8f8:	b2db      	uxtb	r3, r3
    b8fa:	2b00      	cmp	r3, #0
    b8fc:	f000 83b8 	beq.w	c070 <radio_control_task+0x794>
    uint8_t mode_changed = FALSE;
    b900:	2300      	movs	r3, #0
    b902:	71fb      	strb	r3, [r7, #7]
    copy_from_to_fbw();
    b904:	f7fa fa9c 	bl	5e40 <copy_from_to_fbw>
    if ((bit_is_set(from_fbw.status, RADIO_REALLY_LOST) && (pprz_mode == PPRZ_MODE_AUTO1 || pprz_mode == PPRZ_MODE_MANUAL)) || too_far_from_home) {
    b908:	4b3a      	ldr	r3, [pc, #232]	; (b9f4 <radio_control_task+0x118>)
    b90a:	781b      	ldrb	r3, [r3, #0]
    b90c:	b2db      	uxtb	r3, r3
    b90e:	f003 0302 	and.w	r3, r3, #2
    b912:	2b00      	cmp	r3, #0
    b914:	d00d      	beq.n	b932 <radio_control_task+0x56>
    b916:	f24a 3344 	movw	r3, #41796	; 0xa344
    b91a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b91e:	781b      	ldrb	r3, [r3, #0]
    b920:	2b01      	cmp	r3, #1
    b922:	d00d      	beq.n	b940 <radio_control_task+0x64>
    b924:	f24a 3344 	movw	r3, #41796	; 0xa344
    b928:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b92c:	781b      	ldrb	r3, [r3, #0]
    b92e:	2b00      	cmp	r3, #0
    b930:	d006      	beq.n	b940 <radio_control_task+0x64>
    b932:	f24a 63f4 	movw	r3, #42740	; 0xa6f4
    b936:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b93a:	781b      	ldrb	r3, [r3, #0]
    b93c:	2b00      	cmp	r3, #0
    b93e:	d007      	beq.n	b950 <radio_control_task+0x74>
      pprz_mode = PPRZ_MODE_HOME;
    b940:	f24a 3344 	movw	r3, #41796	; 0xa344
    b944:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b948:	2203      	movs	r2, #3
    b94a:	701a      	strb	r2, [r3, #0]
      mode_changed = TRUE;
    b94c:	2301      	movs	r3, #1
    b94e:	71fb      	strb	r3, [r7, #7]
    }
    // modified by wanbo
    //if (bit_is_set(from_fbw.status, AVERAGED_CHANNELS_SENT)) 
    {
      bool_t pprz_mode_changed = pprz_mode_update();
    b950:	f7fa f950 	bl	5bf4 <pprz_mode_update>
    b954:	4603      	mov	r3, r0
    b956:	71bb      	strb	r3, [r7, #6]
      mode_changed |= pprz_mode_changed;
    b958:	79fa      	ldrb	r2, [r7, #7]
    b95a:	79bb      	ldrb	r3, [r7, #6]
    b95c:	4313      	orrs	r3, r2
    b95e:	71fb      	strb	r3, [r7, #7]
#ifdef RADIO_LLS
      mode_changed |= ir_estim_mode_update();
    b960:	f7fa f994 	bl	5c8c <ir_estim_mode_update>
    b964:	4603      	mov	r3, r0
    b966:	461a      	mov	r2, r3
    b968:	79fb      	ldrb	r3, [r7, #7]
    b96a:	4313      	orrs	r3, r2
    b96c:	71fb      	strb	r3, [r7, #7]
#endif
#ifdef RADIO_CALIB
      calib_mode_changed = inflight_calib_mode_update();
    b96e:	f7ff ff81 	bl	b874 <inflight_calib_mode_update>
    b972:	4603      	mov	r3, r0
    b974:	717b      	strb	r3, [r7, #5]
      inflight_calib(calib_mode_changed || pprz_mode_changed);
    b976:	797b      	ldrb	r3, [r7, #5]
    b978:	2b00      	cmp	r3, #0
    b97a:	d102      	bne.n	b982 <radio_control_task+0xa6>
    b97c:	79bb      	ldrb	r3, [r7, #6]
    b97e:	2b00      	cmp	r3, #0
    b980:	d001      	beq.n	b986 <radio_control_task+0xaa>
    b982:	2301      	movs	r3, #1
    b984:	e000      	b.n	b988 <radio_control_task+0xac>
    b986:	2300      	movs	r3, #0
    b988:	b2db      	uxtb	r3, r3
    b98a:	4618      	mov	r0, r3
    b98c:	f008 fba0 	bl	140d0 <inflight_calib>
      mode_changed |= calib_mode_changed;
    b990:	79fa      	ldrb	r2, [r7, #7]
    b992:	797b      	ldrb	r3, [r7, #5]
    b994:	4313      	orrs	r3, r2
    b996:	71fb      	strb	r3, [r7, #7]
#endif
    }
    mode_changed |= mcu1_status_update();
    b998:	f7fa f9a0 	bl	5cdc <mcu1_status_update>
    b99c:	4603      	mov	r3, r0
    b99e:	461a      	mov	r2, r3
    b9a0:	79fb      	ldrb	r3, [r7, #7]
    b9a2:	4313      	orrs	r3, r2
    b9a4:	71fb      	strb	r3, [r7, #7]
    // add by wanbo
    mode_changed = 1;
    b9a6:	2301      	movs	r3, #1
    b9a8:	71fb      	strb	r3, [r7, #7]
    if ( mode_changed )
    b9aa:	79fb      	ldrb	r3, [r7, #7]
    b9ac:	2b00      	cmp	r3, #0
    b9ae:	f000 82bc 	beq.w	bf2a <radio_control_task+0x64e>
      DOWNLINK_SEND_PPRZ_MODE(&pprz_mode, &vertical_mode, &inflight_calib_mode, &mcu1_status, &ir_estim_mode);
    b9b2:	f24a 3361 	movw	r3, #41825	; 0xa361
    b9b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9ba:	781a      	ldrb	r2, [r3, #0]
    b9bc:	f24a 3362 	movw	r3, #41826	; 0xa362
    b9c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9c4:	781b      	ldrb	r3, [r3, #0]
    b9c6:	b2db      	uxtb	r3, r3
    b9c8:	429a      	cmp	r2, r3
    b9ca:	d315      	bcc.n	b9f8 <radio_control_task+0x11c>
    b9cc:	f24a 3362 	movw	r3, #41826	; 0xa362
    b9d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9d4:	781b      	ldrb	r3, [r3, #0]
    b9d6:	b2db      	uxtb	r3, r3
    b9d8:	461a      	mov	r2, r3
    b9da:	f24a 3361 	movw	r3, #41825	; 0xa361
    b9de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9e2:	781b      	ldrb	r3, [r3, #0]
    b9e4:	1ad3      	subs	r3, r2, r3
    b9e6:	33ff      	adds	r3, #255	; 0xff
    b9e8:	2b09      	cmp	r3, #9
    b9ea:	bfd4      	ite	le
    b9ec:	2300      	movle	r3, #0
    b9ee:	2301      	movgt	r3, #1
    b9f0:	b2db      	uxtb	r3, r3
    b9f2:	e013      	b.n	ba1c <radio_control_task+0x140>
    b9f4:	2000a47b 	.word	0x2000a47b
    b9f8:	f24a 3362 	movw	r3, #41826	; 0xa362
    b9fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba00:	781b      	ldrb	r3, [r3, #0]
    ba02:	b2db      	uxtb	r3, r3
    ba04:	461a      	mov	r2, r3
    ba06:	f24a 3361 	movw	r3, #41825	; 0xa361
    ba0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba0e:	781b      	ldrb	r3, [r3, #0]
    ba10:	1ad3      	subs	r3, r2, r3
    ba12:	2b09      	cmp	r3, #9
    ba14:	bfd4      	ite	le
    ba16:	2300      	movle	r3, #0
    ba18:	2301      	movgt	r3, #1
    ba1a:	b2db      	uxtb	r3, r3
    ba1c:	2b00      	cmp	r3, #0
    ba1e:	f000 8278 	beq.w	bf12 <radio_control_task+0x636>
    ba22:	f24a 3361 	movw	r3, #41825	; 0xa361
    ba26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba2a:	781b      	ldrb	r3, [r3, #0]
    ba2c:	461a      	mov	r2, r3
    ba2e:	f24a 3364 	movw	r3, #41828	; 0xa364
    ba32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba36:	2105      	movs	r1, #5
    ba38:	5499      	strb	r1, [r3, r2]
    ba3a:	f24a 3361 	movw	r3, #41825	; 0xa361
    ba3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba42:	781b      	ldrb	r3, [r3, #0]
    ba44:	3301      	adds	r3, #1
    ba46:	b2da      	uxtb	r2, r3
    ba48:	f24a 3361 	movw	r3, #41825	; 0xa361
    ba4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba50:	701a      	strb	r2, [r3, #0]
    ba52:	f24a 3361 	movw	r3, #41825	; 0xa361
    ba56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba5a:	781b      	ldrb	r3, [r3, #0]
    ba5c:	2bff      	cmp	r3, #255	; 0xff
    ba5e:	d105      	bne.n	ba6c <radio_control_task+0x190>
    ba60:	f24a 3361 	movw	r3, #41825	; 0xa361
    ba64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba68:	2200      	movs	r2, #0
    ba6a:	701a      	strb	r2, [r3, #0]
    ba6c:	f24a 3361 	movw	r3, #41825	; 0xa361
    ba70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba74:	781b      	ldrb	r3, [r3, #0]
    ba76:	461a      	mov	r2, r3
    ba78:	f24a 3364 	movw	r3, #41828	; 0xa364
    ba7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba80:	210b      	movs	r1, #11
    ba82:	5499      	strb	r1, [r3, r2]
    ba84:	f24a 3361 	movw	r3, #41825	; 0xa361
    ba88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba8c:	781b      	ldrb	r3, [r3, #0]
    ba8e:	3301      	adds	r3, #1
    ba90:	b2da      	uxtb	r2, r3
    ba92:	f24a 3361 	movw	r3, #41825	; 0xa361
    ba96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba9a:	701a      	strb	r2, [r3, #0]
    ba9c:	f24a 3361 	movw	r3, #41825	; 0xa361
    baa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    baa4:	781b      	ldrb	r3, [r3, #0]
    baa6:	2bff      	cmp	r3, #255	; 0xff
    baa8:	d105      	bne.n	bab6 <radio_control_task+0x1da>
    baaa:	f24a 3361 	movw	r3, #41825	; 0xa361
    baae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bab2:	2200      	movs	r2, #0
    bab4:	701a      	strb	r2, [r3, #0]
    bab6:	f24a 4365 	movw	r3, #42085	; 0xa465
    baba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    babe:	220b      	movs	r2, #11
    bac0:	701a      	strb	r2, [r3, #0]
    bac2:	f24a 4366 	movw	r3, #42086	; 0xa466
    bac6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    baca:	220b      	movs	r2, #11
    bacc:	701a      	strb	r2, [r3, #0]
    bace:	f24a 3361 	movw	r3, #41825	; 0xa361
    bad2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bad6:	781b      	ldrb	r3, [r3, #0]
    bad8:	461a      	mov	r2, r3
    bada:	f24a 3344 	movw	r3, #41796	; 0xa344
    bade:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bae2:	7819      	ldrb	r1, [r3, #0]
    bae4:	f24a 3364 	movw	r3, #41828	; 0xa364
    bae8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    baec:	5499      	strb	r1, [r3, r2]
    baee:	f24a 4365 	movw	r3, #42085	; 0xa465
    baf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    baf6:	781a      	ldrb	r2, [r3, #0]
    baf8:	f24a 3344 	movw	r3, #41796	; 0xa344
    bafc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb00:	781b      	ldrb	r3, [r3, #0]
    bb02:	4413      	add	r3, r2
    bb04:	b2da      	uxtb	r2, r3
    bb06:	f24a 4365 	movw	r3, #42085	; 0xa465
    bb0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb0e:	701a      	strb	r2, [r3, #0]
    bb10:	f24a 4366 	movw	r3, #42086	; 0xa466
    bb14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb18:	781a      	ldrb	r2, [r3, #0]
    bb1a:	f24a 4365 	movw	r3, #42085	; 0xa465
    bb1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb22:	781b      	ldrb	r3, [r3, #0]
    bb24:	4413      	add	r3, r2
    bb26:	b2da      	uxtb	r2, r3
    bb28:	f24a 4366 	movw	r3, #42086	; 0xa466
    bb2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb30:	701a      	strb	r2, [r3, #0]
    bb32:	f24a 3361 	movw	r3, #41825	; 0xa361
    bb36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb3a:	781b      	ldrb	r3, [r3, #0]
    bb3c:	3301      	adds	r3, #1
    bb3e:	b2da      	uxtb	r2, r3
    bb40:	f24a 3361 	movw	r3, #41825	; 0xa361
    bb44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb48:	701a      	strb	r2, [r3, #0]
    bb4a:	f24a 3361 	movw	r3, #41825	; 0xa361
    bb4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb52:	781b      	ldrb	r3, [r3, #0]
    bb54:	2bff      	cmp	r3, #255	; 0xff
    bb56:	d105      	bne.n	bb64 <radio_control_task+0x288>
    bb58:	f24a 3361 	movw	r3, #41825	; 0xa361
    bb5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb60:	2200      	movs	r2, #0
    bb62:	701a      	strb	r2, [r3, #0]
    bb64:	f24a 3361 	movw	r3, #41825	; 0xa361
    bb68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb6c:	781b      	ldrb	r3, [r3, #0]
    bb6e:	461a      	mov	r2, r3
    bb70:	f24a 3345 	movw	r3, #41797	; 0xa345
    bb74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb78:	7819      	ldrb	r1, [r3, #0]
    bb7a:	f24a 3364 	movw	r3, #41828	; 0xa364
    bb7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb82:	5499      	strb	r1, [r3, r2]
    bb84:	f24a 4365 	movw	r3, #42085	; 0xa465
    bb88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb8c:	781a      	ldrb	r2, [r3, #0]
    bb8e:	f24a 3345 	movw	r3, #41797	; 0xa345
    bb92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb96:	781b      	ldrb	r3, [r3, #0]
    bb98:	4413      	add	r3, r2
    bb9a:	b2da      	uxtb	r2, r3
    bb9c:	f24a 4365 	movw	r3, #42085	; 0xa465
    bba0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bba4:	701a      	strb	r2, [r3, #0]
    bba6:	f24a 4366 	movw	r3, #42086	; 0xa466
    bbaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbae:	781a      	ldrb	r2, [r3, #0]
    bbb0:	f24a 4365 	movw	r3, #42085	; 0xa465
    bbb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbb8:	781b      	ldrb	r3, [r3, #0]
    bbba:	4413      	add	r3, r2
    bbbc:	b2da      	uxtb	r2, r3
    bbbe:	f24a 4366 	movw	r3, #42086	; 0xa466
    bbc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbc6:	701a      	strb	r2, [r3, #0]
    bbc8:	f24a 3361 	movw	r3, #41825	; 0xa361
    bbcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbd0:	781b      	ldrb	r3, [r3, #0]
    bbd2:	3301      	adds	r3, #1
    bbd4:	b2da      	uxtb	r2, r3
    bbd6:	f24a 3361 	movw	r3, #41825	; 0xa361
    bbda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbde:	701a      	strb	r2, [r3, #0]
    bbe0:	f24a 3361 	movw	r3, #41825	; 0xa361
    bbe4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbe8:	781b      	ldrb	r3, [r3, #0]
    bbea:	2bff      	cmp	r3, #255	; 0xff
    bbec:	d105      	bne.n	bbfa <radio_control_task+0x31e>
    bbee:	f24a 3361 	movw	r3, #41825	; 0xa361
    bbf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbf6:	2200      	movs	r2, #0
    bbf8:	701a      	strb	r2, [r3, #0]
    bbfa:	f24a 3361 	movw	r3, #41825	; 0xa361
    bbfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc02:	781b      	ldrb	r3, [r3, #0]
    bc04:	461a      	mov	r2, r3
    bc06:	f64a 1374 	movw	r3, #43380	; 0xa974
    bc0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc0e:	7819      	ldrb	r1, [r3, #0]
    bc10:	f24a 3364 	movw	r3, #41828	; 0xa364
    bc14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc18:	5499      	strb	r1, [r3, r2]
    bc1a:	f24a 4365 	movw	r3, #42085	; 0xa465
    bc1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc22:	781a      	ldrb	r2, [r3, #0]
    bc24:	f64a 1374 	movw	r3, #43380	; 0xa974
    bc28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc2c:	781b      	ldrb	r3, [r3, #0]
    bc2e:	4413      	add	r3, r2
    bc30:	b2da      	uxtb	r2, r3
    bc32:	f24a 4365 	movw	r3, #42085	; 0xa465
    bc36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc3a:	701a      	strb	r2, [r3, #0]
    bc3c:	f24a 4366 	movw	r3, #42086	; 0xa466
    bc40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc44:	781a      	ldrb	r2, [r3, #0]
    bc46:	f24a 4365 	movw	r3, #42085	; 0xa465
    bc4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc4e:	781b      	ldrb	r3, [r3, #0]
    bc50:	4413      	add	r3, r2
    bc52:	b2da      	uxtb	r2, r3
    bc54:	f24a 4366 	movw	r3, #42086	; 0xa466
    bc58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc5c:	701a      	strb	r2, [r3, #0]
    bc5e:	f24a 3361 	movw	r3, #41825	; 0xa361
    bc62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc66:	781b      	ldrb	r3, [r3, #0]
    bc68:	3301      	adds	r3, #1
    bc6a:	b2da      	uxtb	r2, r3
    bc6c:	f24a 3361 	movw	r3, #41825	; 0xa361
    bc70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc74:	701a      	strb	r2, [r3, #0]
    bc76:	f24a 3361 	movw	r3, #41825	; 0xa361
    bc7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc7e:	781b      	ldrb	r3, [r3, #0]
    bc80:	2bff      	cmp	r3, #255	; 0xff
    bc82:	d105      	bne.n	bc90 <radio_control_task+0x3b4>
    bc84:	f24a 3361 	movw	r3, #41825	; 0xa361
    bc88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc8c:	2200      	movs	r2, #0
    bc8e:	701a      	strb	r2, [r3, #0]
    bc90:	f24a 3361 	movw	r3, #41825	; 0xa361
    bc94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc98:	781b      	ldrb	r3, [r3, #0]
    bc9a:	461a      	mov	r2, r3
    bc9c:	f24a 334b 	movw	r3, #41803	; 0xa34b
    bca0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bca4:	7819      	ldrb	r1, [r3, #0]
    bca6:	f24a 3364 	movw	r3, #41828	; 0xa364
    bcaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bcae:	5499      	strb	r1, [r3, r2]
    bcb0:	f24a 4365 	movw	r3, #42085	; 0xa465
    bcb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bcb8:	781a      	ldrb	r2, [r3, #0]
    bcba:	f24a 334b 	movw	r3, #41803	; 0xa34b
    bcbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bcc2:	781b      	ldrb	r3, [r3, #0]
    bcc4:	4413      	add	r3, r2
    bcc6:	b2da      	uxtb	r2, r3
    bcc8:	f24a 4365 	movw	r3, #42085	; 0xa465
    bccc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bcd0:	701a      	strb	r2, [r3, #0]
    bcd2:	f24a 4366 	movw	r3, #42086	; 0xa466
    bcd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bcda:	781a      	ldrb	r2, [r3, #0]
    bcdc:	f24a 4365 	movw	r3, #42085	; 0xa465
    bce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bce4:	781b      	ldrb	r3, [r3, #0]
    bce6:	4413      	add	r3, r2
    bce8:	b2da      	uxtb	r2, r3
    bcea:	f24a 4366 	movw	r3, #42086	; 0xa466
    bcee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bcf2:	701a      	strb	r2, [r3, #0]
    bcf4:	f24a 3361 	movw	r3, #41825	; 0xa361
    bcf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bcfc:	781b      	ldrb	r3, [r3, #0]
    bcfe:	3301      	adds	r3, #1
    bd00:	b2da      	uxtb	r2, r3
    bd02:	f24a 3361 	movw	r3, #41825	; 0xa361
    bd06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd0a:	701a      	strb	r2, [r3, #0]
    bd0c:	f24a 3361 	movw	r3, #41825	; 0xa361
    bd10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd14:	781b      	ldrb	r3, [r3, #0]
    bd16:	2bff      	cmp	r3, #255	; 0xff
    bd18:	d105      	bne.n	bd26 <radio_control_task+0x44a>
    bd1a:	f24a 3361 	movw	r3, #41825	; 0xa361
    bd1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd22:	2200      	movs	r2, #0
    bd24:	701a      	strb	r2, [r3, #0]
    bd26:	f24a 3361 	movw	r3, #41825	; 0xa361
    bd2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd2e:	781b      	ldrb	r3, [r3, #0]
    bd30:	461a      	mov	r2, r3
    bd32:	f240 03d0 	movw	r3, #208	; 0xd0
    bd36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd3a:	7819      	ldrb	r1, [r3, #0]
    bd3c:	f24a 3364 	movw	r3, #41828	; 0xa364
    bd40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd44:	5499      	strb	r1, [r3, r2]
    bd46:	f24a 4365 	movw	r3, #42085	; 0xa465
    bd4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd4e:	781a      	ldrb	r2, [r3, #0]
    bd50:	f240 03d0 	movw	r3, #208	; 0xd0
    bd54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd58:	781b      	ldrb	r3, [r3, #0]
    bd5a:	4413      	add	r3, r2
    bd5c:	b2da      	uxtb	r2, r3
    bd5e:	f24a 4365 	movw	r3, #42085	; 0xa465
    bd62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd66:	701a      	strb	r2, [r3, #0]
    bd68:	f24a 4366 	movw	r3, #42086	; 0xa466
    bd6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd70:	781a      	ldrb	r2, [r3, #0]
    bd72:	f24a 4365 	movw	r3, #42085	; 0xa465
    bd76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd7a:	781b      	ldrb	r3, [r3, #0]
    bd7c:	4413      	add	r3, r2
    bd7e:	b2da      	uxtb	r2, r3
    bd80:	f24a 4366 	movw	r3, #42086	; 0xa466
    bd84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd88:	701a      	strb	r2, [r3, #0]
    bd8a:	f24a 3361 	movw	r3, #41825	; 0xa361
    bd8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd92:	781b      	ldrb	r3, [r3, #0]
    bd94:	3301      	adds	r3, #1
    bd96:	b2da      	uxtb	r2, r3
    bd98:	f24a 3361 	movw	r3, #41825	; 0xa361
    bd9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bda0:	701a      	strb	r2, [r3, #0]
    bda2:	f24a 3361 	movw	r3, #41825	; 0xa361
    bda6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdaa:	781b      	ldrb	r3, [r3, #0]
    bdac:	2bff      	cmp	r3, #255	; 0xff
    bdae:	d105      	bne.n	bdbc <radio_control_task+0x4e0>
    bdb0:	f24a 3361 	movw	r3, #41825	; 0xa361
    bdb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdb8:	2200      	movs	r2, #0
    bdba:	701a      	strb	r2, [r3, #0]
    bdbc:	f24a 3361 	movw	r3, #41825	; 0xa361
    bdc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdc4:	781b      	ldrb	r3, [r3, #0]
    bdc6:	461a      	mov	r2, r3
    bdc8:	f24a 4365 	movw	r3, #42085	; 0xa465
    bdcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdd0:	7819      	ldrb	r1, [r3, #0]
    bdd2:	f24a 3364 	movw	r3, #41828	; 0xa364
    bdd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdda:	5499      	strb	r1, [r3, r2]
    bddc:	f24a 3361 	movw	r3, #41825	; 0xa361
    bde0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bde4:	781b      	ldrb	r3, [r3, #0]
    bde6:	3301      	adds	r3, #1
    bde8:	b2da      	uxtb	r2, r3
    bdea:	f24a 3361 	movw	r3, #41825	; 0xa361
    bdee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdf2:	701a      	strb	r2, [r3, #0]
    bdf4:	f24a 3361 	movw	r3, #41825	; 0xa361
    bdf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdfc:	781b      	ldrb	r3, [r3, #0]
    bdfe:	2bff      	cmp	r3, #255	; 0xff
    be00:	d105      	bne.n	be0e <radio_control_task+0x532>
    be02:	f24a 3361 	movw	r3, #41825	; 0xa361
    be06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be0a:	2200      	movs	r2, #0
    be0c:	701a      	strb	r2, [r3, #0]
    be0e:	f24a 3361 	movw	r3, #41825	; 0xa361
    be12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be16:	781b      	ldrb	r3, [r3, #0]
    be18:	461a      	mov	r2, r3
    be1a:	f24a 4366 	movw	r3, #42086	; 0xa466
    be1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be22:	7819      	ldrb	r1, [r3, #0]
    be24:	f24a 3364 	movw	r3, #41828	; 0xa364
    be28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be2c:	5499      	strb	r1, [r3, r2]
    be2e:	f24a 3361 	movw	r3, #41825	; 0xa361
    be32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be36:	781b      	ldrb	r3, [r3, #0]
    be38:	3301      	adds	r3, #1
    be3a:	b2da      	uxtb	r2, r3
    be3c:	f24a 3361 	movw	r3, #41825	; 0xa361
    be40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be44:	701a      	strb	r2, [r3, #0]
    be46:	f24a 3361 	movw	r3, #41825	; 0xa361
    be4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be4e:	781b      	ldrb	r3, [r3, #0]
    be50:	2bff      	cmp	r3, #255	; 0xff
    be52:	d105      	bne.n	be60 <radio_control_task+0x584>
    be54:	f24a 3361 	movw	r3, #41825	; 0xa361
    be58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be5c:	2200      	movs	r2, #0
    be5e:	701a      	strb	r2, [r3, #0]
    be60:	f242 0339 	movw	r3, #8249	; 0x2039
    be64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be68:	781b      	ldrb	r3, [r3, #0]
    be6a:	b2db      	uxtb	r3, r3
    be6c:	f003 0310 	and.w	r3, r3, #16
    be70:	2b00      	cmp	r3, #0
    be72:	d15a      	bne.n	bf2a <radio_control_task+0x64e>
    be74:	f24a 3362 	movw	r3, #41826	; 0xa362
    be78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be7c:	781b      	ldrb	r3, [r3, #0]
    be7e:	b2db      	uxtb	r3, r3
    be80:	461a      	mov	r2, r3
    be82:	f24a 3364 	movw	r3, #41828	; 0xa364
    be86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be8a:	5c9a      	ldrb	r2, [r3, r2]
    be8c:	f24a 4363 	movw	r3, #42083	; 0xa463
    be90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be94:	701a      	strb	r2, [r3, #0]
    be96:	f24a 4364 	movw	r3, #42084	; 0xa464
    be9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be9e:	2200      	movs	r2, #0
    bea0:	701a      	strb	r2, [r3, #0]
    bea2:	f24a 3362 	movw	r3, #41826	; 0xa362
    bea6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    beaa:	781b      	ldrb	r3, [r3, #0]
    beac:	b2db      	uxtb	r3, r3
    beae:	3301      	adds	r3, #1
    beb0:	b2da      	uxtb	r2, r3
    beb2:	f24a 3362 	movw	r3, #41826	; 0xa362
    beb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    beba:	701a      	strb	r2, [r3, #0]
    bebc:	f24a 3362 	movw	r3, #41826	; 0xa362
    bec0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bec4:	781b      	ldrb	r3, [r3, #0]
    bec6:	b2db      	uxtb	r3, r3
    bec8:	2bff      	cmp	r3, #255	; 0xff
    beca:	d105      	bne.n	bed8 <radio_control_task+0x5fc>
    becc:	f24a 3362 	movw	r3, #41826	; 0xa362
    bed0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bed4:	2200      	movs	r2, #0
    bed6:	701a      	strb	r2, [r3, #0]
    bed8:	f242 0338 	movw	r3, #8248	; 0x2038
    bedc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bee0:	f242 0238 	movw	r2, #8248	; 0x2038
    bee4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bee8:	7812      	ldrb	r2, [r2, #0]
    beea:	b2d2      	uxtb	r2, r2
    beec:	f042 0201 	orr.w	r2, r2, #1
    bef0:	b2d2      	uxtb	r2, r2
    bef2:	701a      	strb	r2, [r3, #0]
    bef4:	f242 0339 	movw	r3, #8249	; 0x2039
    bef8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    befc:	f242 0239 	movw	r2, #8249	; 0x2039
    bf00:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bf04:	7812      	ldrb	r2, [r2, #0]
    bf06:	b2d2      	uxtb	r2, r2
    bf08:	f042 0210 	orr.w	r2, r2, #16
    bf0c:	b2d2      	uxtb	r2, r2
    bf0e:	701a      	strb	r2, [r3, #0]
    bf10:	e00b      	b.n	bf2a <radio_control_task+0x64e>
    bf12:	f24a 3360 	movw	r3, #41824	; 0xa360
    bf16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf1a:	781b      	ldrb	r3, [r3, #0]
    bf1c:	3301      	adds	r3, #1
    bf1e:	b2da      	uxtb	r2, r3
    bf20:	f24a 3360 	movw	r3, #41824	; 0xa360
    bf24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf28:	701a      	strb	r2, [r3, #0]
      
    // add by wanbo
    //if (pprz_mode == PPRZ_MODE_AUTO1) 
    {
      desired_roll = FLOAT_OF_PPRZ(from_fbw.channels[RADIO_ROLL], 0., -0.6);
    bf2a:	f24a 4368 	movw	r3, #42088	; 0xa468
    bf2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf32:	885b      	ldrh	r3, [r3, #2]
    bf34:	b21b      	sxth	r3, r3
    bf36:	4618      	mov	r0, r3
    bf38:	f00a fe9a 	bl	16c70 <__aeabi_i2f>
    bf3c:	4603      	mov	r3, r0
    bf3e:	4618      	mov	r0, r3
    bf40:	f04f 0100 	mov.w	r1, #0
    bf44:	f2c4 6116 	movt	r1, #17942	; 0x4616
    bf48:	f00a ff9a 	bl	16e80 <__aeabi_fdiv>
    bf4c:	4603      	mov	r3, r0
    bf4e:	4618      	mov	r0, r3
    bf50:	f00a fa4e 	bl	163f0 <__aeabi_f2d>
    bf54:	4602      	mov	r2, r0
    bf56:	460b      	mov	r3, r1
    bf58:	4610      	mov	r0, r2
    bf5a:	4619      	mov	r1, r3
    bf5c:	a346      	add	r3, pc, #280	; (adr r3, c078 <radio_control_task+0x79c>)
    bf5e:	e9d3 2300 	ldrd	r2, r3, [r3]
    bf62:	f00a fa99 	bl	16498 <__aeabi_dmul>
    bf66:	4602      	mov	r2, r0
    bf68:	460b      	mov	r3, r1
    bf6a:	4610      	mov	r0, r2
    bf6c:	4619      	mov	r1, r3
    bf6e:	f04f 0200 	mov.w	r2, #0
    bf72:	f04f 0300 	mov.w	r3, #0
    bf76:	f00a f8dd 	bl	16134 <__adddf3>
    bf7a:	4602      	mov	r2, r0
    bf7c:	460b      	mov	r3, r1
    bf7e:	4610      	mov	r0, r2
    bf80:	4619      	mov	r1, r3
    bf82:	f00a fd6b 	bl	16a5c <__aeabi_d2f>
    bf86:	4602      	mov	r2, r0
    bf88:	f24a 638c 	movw	r3, #42636	; 0xa68c
    bf8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf90:	601a      	str	r2, [r3, #0]
      desired_pitch = FLOAT_OF_PPRZ(from_fbw.channels[RADIO_PITCH], 0., 0.5);
    bf92:	f24a 4368 	movw	r3, #42088	; 0xa468
    bf96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf9a:	889b      	ldrh	r3, [r3, #4]
    bf9c:	b21b      	sxth	r3, r3
    bf9e:	4618      	mov	r0, r3
    bfa0:	f00a fe66 	bl	16c70 <__aeabi_i2f>
    bfa4:	4603      	mov	r3, r0
    bfa6:	4618      	mov	r0, r3
    bfa8:	f04f 0100 	mov.w	r1, #0
    bfac:	f2c4 6116 	movt	r1, #17942	; 0x4616
    bfb0:	f00a ff66 	bl	16e80 <__aeabi_fdiv>
    bfb4:	4603      	mov	r3, r0
    bfb6:	4618      	mov	r0, r3
    bfb8:	f00a fa1a 	bl	163f0 <__aeabi_f2d>
    bfbc:	4602      	mov	r2, r0
    bfbe:	460b      	mov	r3, r1
    bfc0:	4610      	mov	r0, r2
    bfc2:	4619      	mov	r1, r3
    bfc4:	f04f 0200 	mov.w	r2, #0
    bfc8:	f04f 0300 	mov.w	r3, #0
    bfcc:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
    bfd0:	f00a fa62 	bl	16498 <__aeabi_dmul>
    bfd4:	4602      	mov	r2, r0
    bfd6:	460b      	mov	r3, r1
    bfd8:	4610      	mov	r0, r2
    bfda:	4619      	mov	r1, r3
    bfdc:	f04f 0200 	mov.w	r2, #0
    bfe0:	f04f 0300 	mov.w	r3, #0
    bfe4:	f00a f8a6 	bl	16134 <__adddf3>
    bfe8:	4602      	mov	r2, r0
    bfea:	460b      	mov	r3, r1
    bfec:	4610      	mov	r0, r2
    bfee:	4619      	mov	r1, r3
    bff0:	f00a fd34 	bl	16a5c <__aeabi_d2f>
    bff4:	4602      	mov	r2, r0
    bff6:	f24a 6390 	movw	r3, #42640	; 0xa690
    bffa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bffe:	601a      	str	r2, [r3, #0]
    } // else asynchronously set by course_pid_run()

    // add by wanbo
   // if (pprz_mode == PPRZ_MODE_MANUAL || pprz_mode == PPRZ_MODE_AUTO1) 
    {
      desired_gaz = from_fbw.channels[RADIO_THROTTLE];
    c000:	f24a 4368 	movw	r3, #42088	; 0xa468
    c004:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c008:	881a      	ldrh	r2, [r3, #0]
    c00a:	f24a 6394 	movw	r3, #42644	; 0xa694
    c00e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c012:	801a      	strh	r2, [r3, #0]
      pitch_pgain = PITCH_PGAIN * ( 1 - 1. / 3. * from_fbw.channels[RADIO_THROTTLE] / MAX_PPRZ);
#endif /* ANTON_MAGICAL_MISTERY_GAINS */
    }
    // else asynchronously set by climb_pid_run();

    mcu1_ppm_cpt = from_fbw.ppm_cpt;
    c014:	f24a 4368 	movw	r3, #42088	; 0xa468
    c018:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c01c:	7c9a      	ldrb	r2, [r3, #18]
    c01e:	f24a 334c 	movw	r3, #41804	; 0xa34c
    c022:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c026:	701a      	strb	r2, [r3, #0]
    vsupply = from_fbw.vsupply;
    c028:	f24a 4368 	movw	r3, #42088	; 0xa468
    c02c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c030:	7d5a      	ldrb	r2, [r3, #21]
    c032:	f24a 334a 	movw	r3, #41802	; 0xa34a
    c036:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c03a:	701a      	strb	r2, [r3, #0]

    events_update();
    c03c:	f7f9 fe7e 	bl	5d3c <events_update>

    // add by wanbo
    //if (!estimator_flight_time) 
    {
      ground_calibrate();
    c040:	f7f8 fc7e 	bl	4940 <ground_calibrate>
      if (pprz_mode == PPRZ_MODE_AUTO2 && from_fbw.channels[RADIO_THROTTLE] > GAZ_THRESHOLD_TAKEOFF) {
    c044:	f24a 3344 	movw	r3, #41796	; 0xa344
    c048:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c04c:	781b      	ldrb	r3, [r3, #0]
    c04e:	2b02      	cmp	r3, #2
    c050:	d10e      	bne.n	c070 <radio_control_task+0x794>
    c052:	f24a 4368 	movw	r3, #42088	; 0xa468
    c056:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c05a:	881b      	ldrh	r3, [r3, #0]
    c05c:	b21b      	sxth	r3, r3
    c05e:	f5b3 5f07 	cmp.w	r3, #8640	; 0x21c0
    c062:	dd05      	ble.n	c070 <radio_control_task+0x794>
	launch = TRUE;
    c064:	f24a 3358 	movw	r3, #41816	; 0xa358
    c068:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c06c:	2201      	movs	r2, #1
    c06e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

	//vPrintString("S_3 radio_control_task end! \n\r"); //SunnyBeike
}
    c070:	3708      	adds	r7, #8
    c072:	46bd      	mov	sp, r7
    c074:	bd80      	pop	{r7, pc}
    c076:	bf00      	nop
    c078:	33333333 	.word	0x33333333
    c07c:	bfe33333 	.word	0xbfe33333

0000c080 <navigation_update>:

/** \fn void navigation_task( void )
 *  \brief Compute desired_course
 */
void navigation_update( void ) {
    c080:	b580      	push	{r7, lr}
    c082:	af00      	add	r7, sp, #0

  /* Default to keep compatibility with previous behaviour */
  //vPrintString("S_17 Navigation task start!\n\r");
  lateral_mode = LATERAL_MODE_COURSE;
    c084:	f24a 3346 	movw	r3, #41798	; 0xa346
    c088:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c08c:	2203      	movs	r2, #3
    c08e:	701a      	strb	r2, [r3, #0]
  if (pprz_mode == PPRZ_MODE_HOME)
    c090:	f24a 3344 	movw	r3, #41796	; 0xa344
    c094:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c098:	781b      	ldrb	r3, [r3, #0]
    c09a:	2b03      	cmp	r3, #3
    c09c:	d102      	bne.n	c0a4 <navigation_update+0x24>
    nav_home();
    c09e:	f007 fa9b 	bl	135d8 <nav_home>
    c0a2:	e001      	b.n	c0a8 <navigation_update+0x28>
  else
    nav_update();
    c0a4:	f007 fabe 	bl	13624 <nav_update>
}
    c0a8:	bd80      	pop	{r7, pc}
    c0aa:	bf00      	nop

0000c0ac <send_nav_values>:

void send_nav_values(void){
    c0ac:	b480      	push	{r7}
    c0ae:	af00      	add	r7, sp, #0
  
  DOWNLINK_SEND_NAVIGATION(&nav_block, &nav_stage, &estimator_x, &estimator_y, &desired_course, &dist2_to_wp, &course_pgain, &dist2_to_home);
    c0b0:	f24a 3361 	movw	r3, #41825	; 0xa361
    c0b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0b8:	781a      	ldrb	r2, [r3, #0]
    c0ba:	f24a 3362 	movw	r3, #41826	; 0xa362
    c0be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0c2:	781b      	ldrb	r3, [r3, #0]
    c0c4:	b2db      	uxtb	r3, r3
    c0c6:	429a      	cmp	r2, r3
    c0c8:	d313      	bcc.n	c0f2 <send_nav_values+0x46>
    c0ca:	f24a 3362 	movw	r3, #41826	; 0xa362
    c0ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0d2:	781b      	ldrb	r3, [r3, #0]
    c0d4:	b2db      	uxtb	r3, r3
    c0d6:	461a      	mov	r2, r3
    c0d8:	f24a 3361 	movw	r3, #41825	; 0xa361
    c0dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0e0:	781b      	ldrb	r3, [r3, #0]
    c0e2:	1ad3      	subs	r3, r2, r3
    c0e4:	33ff      	adds	r3, #255	; 0xff
    c0e6:	2b1e      	cmp	r3, #30
    c0e8:	bfd4      	ite	le
    c0ea:	2300      	movle	r3, #0
    c0ec:	2301      	movgt	r3, #1
    c0ee:	b2db      	uxtb	r3, r3
    c0f0:	e011      	b.n	c116 <send_nav_values+0x6a>
    c0f2:	f24a 3362 	movw	r3, #41826	; 0xa362
    c0f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0fa:	781b      	ldrb	r3, [r3, #0]
    c0fc:	b2db      	uxtb	r3, r3
    c0fe:	461a      	mov	r2, r3
    c100:	f24a 3361 	movw	r3, #41825	; 0xa361
    c104:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c108:	781b      	ldrb	r3, [r3, #0]
    c10a:	1ad3      	subs	r3, r2, r3
    c10c:	2b1e      	cmp	r3, #30
    c10e:	bfd4      	ite	le
    c110:	2300      	movle	r3, #0
    c112:	2301      	movgt	r3, #1
    c114:	b2db      	uxtb	r3, r3
    c116:	2b00      	cmp	r3, #0
    c118:	f001 8094 	beq.w	d244 <send_nav_values+0x1198>
    c11c:	f24a 3361 	movw	r3, #41825	; 0xa361
    c120:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c124:	781b      	ldrb	r3, [r3, #0]
    c126:	461a      	mov	r2, r3
    c128:	f24a 3364 	movw	r3, #41828	; 0xa364
    c12c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c130:	2105      	movs	r1, #5
    c132:	5499      	strb	r1, [r3, r2]
    c134:	f24a 3361 	movw	r3, #41825	; 0xa361
    c138:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c13c:	781b      	ldrb	r3, [r3, #0]
    c13e:	3301      	adds	r3, #1
    c140:	b2da      	uxtb	r2, r3
    c142:	f24a 3361 	movw	r3, #41825	; 0xa361
    c146:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c14a:	701a      	strb	r2, [r3, #0]
    c14c:	f24a 3361 	movw	r3, #41825	; 0xa361
    c150:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c154:	781b      	ldrb	r3, [r3, #0]
    c156:	2bff      	cmp	r3, #255	; 0xff
    c158:	d105      	bne.n	c166 <send_nav_values+0xba>
    c15a:	f24a 3361 	movw	r3, #41825	; 0xa361
    c15e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c162:	2200      	movs	r2, #0
    c164:	701a      	strb	r2, [r3, #0]
    c166:	f24a 3361 	movw	r3, #41825	; 0xa361
    c16a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c16e:	781b      	ldrb	r3, [r3, #0]
    c170:	461a      	mov	r2, r3
    c172:	f24a 3364 	movw	r3, #41828	; 0xa364
    c176:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c17a:	210a      	movs	r1, #10
    c17c:	5499      	strb	r1, [r3, r2]
    c17e:	f24a 3361 	movw	r3, #41825	; 0xa361
    c182:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c186:	781b      	ldrb	r3, [r3, #0]
    c188:	3301      	adds	r3, #1
    c18a:	b2da      	uxtb	r2, r3
    c18c:	f24a 3361 	movw	r3, #41825	; 0xa361
    c190:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c194:	701a      	strb	r2, [r3, #0]
    c196:	f24a 3361 	movw	r3, #41825	; 0xa361
    c19a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c19e:	781b      	ldrb	r3, [r3, #0]
    c1a0:	2bff      	cmp	r3, #255	; 0xff
    c1a2:	d105      	bne.n	c1b0 <send_nav_values+0x104>
    c1a4:	f24a 3361 	movw	r3, #41825	; 0xa361
    c1a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1ac:	2200      	movs	r2, #0
    c1ae:	701a      	strb	r2, [r3, #0]
    c1b0:	f24a 4365 	movw	r3, #42085	; 0xa465
    c1b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1b8:	220a      	movs	r2, #10
    c1ba:	701a      	strb	r2, [r3, #0]
    c1bc:	f24a 4366 	movw	r3, #42086	; 0xa466
    c1c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1c4:	220a      	movs	r2, #10
    c1c6:	701a      	strb	r2, [r3, #0]
    c1c8:	f24a 3361 	movw	r3, #41825	; 0xa361
    c1cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1d0:	781b      	ldrb	r3, [r3, #0]
    c1d2:	461a      	mov	r2, r3
    c1d4:	f24a 63b9 	movw	r3, #42681	; 0xa6b9
    c1d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1dc:	7819      	ldrb	r1, [r3, #0]
    c1de:	f24a 3364 	movw	r3, #41828	; 0xa364
    c1e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1e6:	5499      	strb	r1, [r3, r2]
    c1e8:	f24a 4365 	movw	r3, #42085	; 0xa465
    c1ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1f0:	781a      	ldrb	r2, [r3, #0]
    c1f2:	f24a 63b9 	movw	r3, #42681	; 0xa6b9
    c1f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1fa:	781b      	ldrb	r3, [r3, #0]
    c1fc:	4413      	add	r3, r2
    c1fe:	b2da      	uxtb	r2, r3
    c200:	f24a 4365 	movw	r3, #42085	; 0xa465
    c204:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c208:	701a      	strb	r2, [r3, #0]
    c20a:	f24a 4366 	movw	r3, #42086	; 0xa466
    c20e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c212:	781a      	ldrb	r2, [r3, #0]
    c214:	f24a 4365 	movw	r3, #42085	; 0xa465
    c218:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c21c:	781b      	ldrb	r3, [r3, #0]
    c21e:	4413      	add	r3, r2
    c220:	b2da      	uxtb	r2, r3
    c222:	f24a 4366 	movw	r3, #42086	; 0xa466
    c226:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c22a:	701a      	strb	r2, [r3, #0]
    c22c:	f24a 3361 	movw	r3, #41825	; 0xa361
    c230:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c234:	781b      	ldrb	r3, [r3, #0]
    c236:	3301      	adds	r3, #1
    c238:	b2da      	uxtb	r2, r3
    c23a:	f24a 3361 	movw	r3, #41825	; 0xa361
    c23e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c242:	701a      	strb	r2, [r3, #0]
    c244:	f24a 3361 	movw	r3, #41825	; 0xa361
    c248:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c24c:	781b      	ldrb	r3, [r3, #0]
    c24e:	2bff      	cmp	r3, #255	; 0xff
    c250:	d105      	bne.n	c25e <send_nav_values+0x1b2>
    c252:	f24a 3361 	movw	r3, #41825	; 0xa361
    c256:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c25a:	2200      	movs	r2, #0
    c25c:	701a      	strb	r2, [r3, #0]
    c25e:	f24a 3361 	movw	r3, #41825	; 0xa361
    c262:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c266:	781b      	ldrb	r3, [r3, #0]
    c268:	461a      	mov	r2, r3
    c26a:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
    c26e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c272:	7819      	ldrb	r1, [r3, #0]
    c274:	f24a 3364 	movw	r3, #41828	; 0xa364
    c278:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c27c:	5499      	strb	r1, [r3, r2]
    c27e:	f24a 4365 	movw	r3, #42085	; 0xa465
    c282:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c286:	781a      	ldrb	r2, [r3, #0]
    c288:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
    c28c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c290:	781b      	ldrb	r3, [r3, #0]
    c292:	4413      	add	r3, r2
    c294:	b2da      	uxtb	r2, r3
    c296:	f24a 4365 	movw	r3, #42085	; 0xa465
    c29a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c29e:	701a      	strb	r2, [r3, #0]
    c2a0:	f24a 4366 	movw	r3, #42086	; 0xa466
    c2a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2a8:	781a      	ldrb	r2, [r3, #0]
    c2aa:	f24a 4365 	movw	r3, #42085	; 0xa465
    c2ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2b2:	781b      	ldrb	r3, [r3, #0]
    c2b4:	4413      	add	r3, r2
    c2b6:	b2da      	uxtb	r2, r3
    c2b8:	f24a 4366 	movw	r3, #42086	; 0xa466
    c2bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2c0:	701a      	strb	r2, [r3, #0]
    c2c2:	f24a 3361 	movw	r3, #41825	; 0xa361
    c2c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2ca:	781b      	ldrb	r3, [r3, #0]
    c2cc:	3301      	adds	r3, #1
    c2ce:	b2da      	uxtb	r2, r3
    c2d0:	f24a 3361 	movw	r3, #41825	; 0xa361
    c2d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2d8:	701a      	strb	r2, [r3, #0]
    c2da:	f24a 3361 	movw	r3, #41825	; 0xa361
    c2de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2e2:	781b      	ldrb	r3, [r3, #0]
    c2e4:	2bff      	cmp	r3, #255	; 0xff
    c2e6:	d105      	bne.n	c2f4 <send_nav_values+0x248>
    c2e8:	f24a 3361 	movw	r3, #41825	; 0xa361
    c2ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2f0:	2200      	movs	r2, #0
    c2f2:	701a      	strb	r2, [r3, #0]
    c2f4:	f24a 3361 	movw	r3, #41825	; 0xa361
    c2f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2fc:	781b      	ldrb	r3, [r3, #0]
    c2fe:	461a      	mov	r2, r3
    c300:	f64a 1314 	movw	r3, #43284	; 0xa914
    c304:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c308:	7819      	ldrb	r1, [r3, #0]
    c30a:	f24a 3364 	movw	r3, #41828	; 0xa364
    c30e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c312:	5499      	strb	r1, [r3, r2]
    c314:	f64a 1314 	movw	r3, #43284	; 0xa914
    c318:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c31c:	781a      	ldrb	r2, [r3, #0]
    c31e:	f24a 4365 	movw	r3, #42085	; 0xa465
    c322:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c326:	781b      	ldrb	r3, [r3, #0]
    c328:	4413      	add	r3, r2
    c32a:	b2da      	uxtb	r2, r3
    c32c:	f24a 4365 	movw	r3, #42085	; 0xa465
    c330:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c334:	701a      	strb	r2, [r3, #0]
    c336:	f24a 4366 	movw	r3, #42086	; 0xa466
    c33a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c33e:	781a      	ldrb	r2, [r3, #0]
    c340:	f24a 4365 	movw	r3, #42085	; 0xa465
    c344:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c348:	781b      	ldrb	r3, [r3, #0]
    c34a:	4413      	add	r3, r2
    c34c:	b2da      	uxtb	r2, r3
    c34e:	f24a 4366 	movw	r3, #42086	; 0xa466
    c352:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c356:	701a      	strb	r2, [r3, #0]
    c358:	f24a 3361 	movw	r3, #41825	; 0xa361
    c35c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c360:	781b      	ldrb	r3, [r3, #0]
    c362:	3301      	adds	r3, #1
    c364:	b2da      	uxtb	r2, r3
    c366:	f24a 3361 	movw	r3, #41825	; 0xa361
    c36a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c36e:	701a      	strb	r2, [r3, #0]
    c370:	f24a 3361 	movw	r3, #41825	; 0xa361
    c374:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c378:	781b      	ldrb	r3, [r3, #0]
    c37a:	2bff      	cmp	r3, #255	; 0xff
    c37c:	d105      	bne.n	c38a <send_nav_values+0x2de>
    c37e:	f24a 3361 	movw	r3, #41825	; 0xa361
    c382:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c386:	2200      	movs	r2, #0
    c388:	701a      	strb	r2, [r3, #0]
    c38a:	f24a 3361 	movw	r3, #41825	; 0xa361
    c38e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c392:	781b      	ldrb	r3, [r3, #0]
    c394:	461a      	mov	r2, r3
    c396:	f64a 1314 	movw	r3, #43284	; 0xa914
    c39a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c39e:	7859      	ldrb	r1, [r3, #1]
    c3a0:	f24a 3364 	movw	r3, #41828	; 0xa364
    c3a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3a8:	5499      	strb	r1, [r3, r2]
    c3aa:	4bd2      	ldr	r3, [pc, #840]	; (c6f4 <send_nav_values+0x648>)
    c3ac:	781a      	ldrb	r2, [r3, #0]
    c3ae:	f24a 4365 	movw	r3, #42085	; 0xa465
    c3b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3b6:	781b      	ldrb	r3, [r3, #0]
    c3b8:	4413      	add	r3, r2
    c3ba:	b2da      	uxtb	r2, r3
    c3bc:	f24a 4365 	movw	r3, #42085	; 0xa465
    c3c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3c4:	701a      	strb	r2, [r3, #0]
    c3c6:	f24a 4366 	movw	r3, #42086	; 0xa466
    c3ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3ce:	781a      	ldrb	r2, [r3, #0]
    c3d0:	f24a 4365 	movw	r3, #42085	; 0xa465
    c3d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3d8:	781b      	ldrb	r3, [r3, #0]
    c3da:	4413      	add	r3, r2
    c3dc:	b2da      	uxtb	r2, r3
    c3de:	f24a 4366 	movw	r3, #42086	; 0xa466
    c3e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3e6:	701a      	strb	r2, [r3, #0]
    c3e8:	f24a 3361 	movw	r3, #41825	; 0xa361
    c3ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3f0:	781b      	ldrb	r3, [r3, #0]
    c3f2:	3301      	adds	r3, #1
    c3f4:	b2da      	uxtb	r2, r3
    c3f6:	f24a 3361 	movw	r3, #41825	; 0xa361
    c3fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3fe:	701a      	strb	r2, [r3, #0]
    c400:	f24a 3361 	movw	r3, #41825	; 0xa361
    c404:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c408:	781b      	ldrb	r3, [r3, #0]
    c40a:	2bff      	cmp	r3, #255	; 0xff
    c40c:	d105      	bne.n	c41a <send_nav_values+0x36e>
    c40e:	f24a 3361 	movw	r3, #41825	; 0xa361
    c412:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c416:	2200      	movs	r2, #0
    c418:	701a      	strb	r2, [r3, #0]
    c41a:	f24a 3361 	movw	r3, #41825	; 0xa361
    c41e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c422:	781b      	ldrb	r3, [r3, #0]
    c424:	461a      	mov	r2, r3
    c426:	f64a 1314 	movw	r3, #43284	; 0xa914
    c42a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c42e:	7899      	ldrb	r1, [r3, #2]
    c430:	f24a 3364 	movw	r3, #41828	; 0xa364
    c434:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c438:	5499      	strb	r1, [r3, r2]
    c43a:	4baf      	ldr	r3, [pc, #700]	; (c6f8 <send_nav_values+0x64c>)
    c43c:	781a      	ldrb	r2, [r3, #0]
    c43e:	f24a 4365 	movw	r3, #42085	; 0xa465
    c442:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c446:	781b      	ldrb	r3, [r3, #0]
    c448:	4413      	add	r3, r2
    c44a:	b2da      	uxtb	r2, r3
    c44c:	f24a 4365 	movw	r3, #42085	; 0xa465
    c450:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c454:	701a      	strb	r2, [r3, #0]
    c456:	f24a 4366 	movw	r3, #42086	; 0xa466
    c45a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c45e:	781a      	ldrb	r2, [r3, #0]
    c460:	f24a 4365 	movw	r3, #42085	; 0xa465
    c464:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c468:	781b      	ldrb	r3, [r3, #0]
    c46a:	4413      	add	r3, r2
    c46c:	b2da      	uxtb	r2, r3
    c46e:	f24a 4366 	movw	r3, #42086	; 0xa466
    c472:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c476:	701a      	strb	r2, [r3, #0]
    c478:	f24a 3361 	movw	r3, #41825	; 0xa361
    c47c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c480:	781b      	ldrb	r3, [r3, #0]
    c482:	3301      	adds	r3, #1
    c484:	b2da      	uxtb	r2, r3
    c486:	f24a 3361 	movw	r3, #41825	; 0xa361
    c48a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c48e:	701a      	strb	r2, [r3, #0]
    c490:	f24a 3361 	movw	r3, #41825	; 0xa361
    c494:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c498:	781b      	ldrb	r3, [r3, #0]
    c49a:	2bff      	cmp	r3, #255	; 0xff
    c49c:	d105      	bne.n	c4aa <send_nav_values+0x3fe>
    c49e:	f24a 3361 	movw	r3, #41825	; 0xa361
    c4a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4a6:	2200      	movs	r2, #0
    c4a8:	701a      	strb	r2, [r3, #0]
    c4aa:	f24a 3361 	movw	r3, #41825	; 0xa361
    c4ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4b2:	781b      	ldrb	r3, [r3, #0]
    c4b4:	461a      	mov	r2, r3
    c4b6:	f64a 1314 	movw	r3, #43284	; 0xa914
    c4ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4be:	78d9      	ldrb	r1, [r3, #3]
    c4c0:	f24a 3364 	movw	r3, #41828	; 0xa364
    c4c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4c8:	5499      	strb	r1, [r3, r2]
    c4ca:	4b8c      	ldr	r3, [pc, #560]	; (c6fc <send_nav_values+0x650>)
    c4cc:	781a      	ldrb	r2, [r3, #0]
    c4ce:	f24a 4365 	movw	r3, #42085	; 0xa465
    c4d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4d6:	781b      	ldrb	r3, [r3, #0]
    c4d8:	4413      	add	r3, r2
    c4da:	b2da      	uxtb	r2, r3
    c4dc:	f24a 4365 	movw	r3, #42085	; 0xa465
    c4e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4e4:	701a      	strb	r2, [r3, #0]
    c4e6:	f24a 4366 	movw	r3, #42086	; 0xa466
    c4ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4ee:	781a      	ldrb	r2, [r3, #0]
    c4f0:	f24a 4365 	movw	r3, #42085	; 0xa465
    c4f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4f8:	781b      	ldrb	r3, [r3, #0]
    c4fa:	4413      	add	r3, r2
    c4fc:	b2da      	uxtb	r2, r3
    c4fe:	f24a 4366 	movw	r3, #42086	; 0xa466
    c502:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c506:	701a      	strb	r2, [r3, #0]
    c508:	f24a 3361 	movw	r3, #41825	; 0xa361
    c50c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c510:	781b      	ldrb	r3, [r3, #0]
    c512:	3301      	adds	r3, #1
    c514:	b2da      	uxtb	r2, r3
    c516:	f24a 3361 	movw	r3, #41825	; 0xa361
    c51a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c51e:	701a      	strb	r2, [r3, #0]
    c520:	f24a 3361 	movw	r3, #41825	; 0xa361
    c524:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c528:	781b      	ldrb	r3, [r3, #0]
    c52a:	2bff      	cmp	r3, #255	; 0xff
    c52c:	d105      	bne.n	c53a <send_nav_values+0x48e>
    c52e:	f24a 3361 	movw	r3, #41825	; 0xa361
    c532:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c536:	2200      	movs	r2, #0
    c538:	701a      	strb	r2, [r3, #0]
    c53a:	f24a 3361 	movw	r3, #41825	; 0xa361
    c53e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c542:	781b      	ldrb	r3, [r3, #0]
    c544:	461a      	mov	r2, r3
    c546:	f64a 1318 	movw	r3, #43288	; 0xa918
    c54a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c54e:	7819      	ldrb	r1, [r3, #0]
    c550:	f24a 3364 	movw	r3, #41828	; 0xa364
    c554:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c558:	5499      	strb	r1, [r3, r2]
    c55a:	f64a 1318 	movw	r3, #43288	; 0xa918
    c55e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c562:	781a      	ldrb	r2, [r3, #0]
    c564:	f24a 4365 	movw	r3, #42085	; 0xa465
    c568:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c56c:	781b      	ldrb	r3, [r3, #0]
    c56e:	4413      	add	r3, r2
    c570:	b2da      	uxtb	r2, r3
    c572:	f24a 4365 	movw	r3, #42085	; 0xa465
    c576:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c57a:	701a      	strb	r2, [r3, #0]
    c57c:	f24a 4366 	movw	r3, #42086	; 0xa466
    c580:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c584:	781a      	ldrb	r2, [r3, #0]
    c586:	f24a 4365 	movw	r3, #42085	; 0xa465
    c58a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c58e:	781b      	ldrb	r3, [r3, #0]
    c590:	4413      	add	r3, r2
    c592:	b2da      	uxtb	r2, r3
    c594:	f24a 4366 	movw	r3, #42086	; 0xa466
    c598:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c59c:	701a      	strb	r2, [r3, #0]
    c59e:	f24a 3361 	movw	r3, #41825	; 0xa361
    c5a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5a6:	781b      	ldrb	r3, [r3, #0]
    c5a8:	3301      	adds	r3, #1
    c5aa:	b2da      	uxtb	r2, r3
    c5ac:	f24a 3361 	movw	r3, #41825	; 0xa361
    c5b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5b4:	701a      	strb	r2, [r3, #0]
    c5b6:	f24a 3361 	movw	r3, #41825	; 0xa361
    c5ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5be:	781b      	ldrb	r3, [r3, #0]
    c5c0:	2bff      	cmp	r3, #255	; 0xff
    c5c2:	d105      	bne.n	c5d0 <send_nav_values+0x524>
    c5c4:	f24a 3361 	movw	r3, #41825	; 0xa361
    c5c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5cc:	2200      	movs	r2, #0
    c5ce:	701a      	strb	r2, [r3, #0]
    c5d0:	f24a 3361 	movw	r3, #41825	; 0xa361
    c5d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5d8:	781b      	ldrb	r3, [r3, #0]
    c5da:	461a      	mov	r2, r3
    c5dc:	f64a 1318 	movw	r3, #43288	; 0xa918
    c5e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5e4:	7859      	ldrb	r1, [r3, #1]
    c5e6:	f24a 3364 	movw	r3, #41828	; 0xa364
    c5ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5ee:	5499      	strb	r1, [r3, r2]
    c5f0:	4b43      	ldr	r3, [pc, #268]	; (c700 <send_nav_values+0x654>)
    c5f2:	781a      	ldrb	r2, [r3, #0]
    c5f4:	f24a 4365 	movw	r3, #42085	; 0xa465
    c5f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5fc:	781b      	ldrb	r3, [r3, #0]
    c5fe:	4413      	add	r3, r2
    c600:	b2da      	uxtb	r2, r3
    c602:	f24a 4365 	movw	r3, #42085	; 0xa465
    c606:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c60a:	701a      	strb	r2, [r3, #0]
    c60c:	f24a 4366 	movw	r3, #42086	; 0xa466
    c610:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c614:	781a      	ldrb	r2, [r3, #0]
    c616:	f24a 4365 	movw	r3, #42085	; 0xa465
    c61a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c61e:	781b      	ldrb	r3, [r3, #0]
    c620:	4413      	add	r3, r2
    c622:	b2da      	uxtb	r2, r3
    c624:	f24a 4366 	movw	r3, #42086	; 0xa466
    c628:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c62c:	701a      	strb	r2, [r3, #0]
    c62e:	f24a 3361 	movw	r3, #41825	; 0xa361
    c632:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c636:	781b      	ldrb	r3, [r3, #0]
    c638:	3301      	adds	r3, #1
    c63a:	b2da      	uxtb	r2, r3
    c63c:	f24a 3361 	movw	r3, #41825	; 0xa361
    c640:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c644:	701a      	strb	r2, [r3, #0]
    c646:	f24a 3361 	movw	r3, #41825	; 0xa361
    c64a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c64e:	781b      	ldrb	r3, [r3, #0]
    c650:	2bff      	cmp	r3, #255	; 0xff
    c652:	d105      	bne.n	c660 <send_nav_values+0x5b4>
    c654:	f24a 3361 	movw	r3, #41825	; 0xa361
    c658:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c65c:	2200      	movs	r2, #0
    c65e:	701a      	strb	r2, [r3, #0]
    c660:	f24a 3361 	movw	r3, #41825	; 0xa361
    c664:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c668:	781b      	ldrb	r3, [r3, #0]
    c66a:	461a      	mov	r2, r3
    c66c:	f64a 1318 	movw	r3, #43288	; 0xa918
    c670:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c674:	7899      	ldrb	r1, [r3, #2]
    c676:	f24a 3364 	movw	r3, #41828	; 0xa364
    c67a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c67e:	5499      	strb	r1, [r3, r2]
    c680:	4b20      	ldr	r3, [pc, #128]	; (c704 <send_nav_values+0x658>)
    c682:	781a      	ldrb	r2, [r3, #0]
    c684:	f24a 4365 	movw	r3, #42085	; 0xa465
    c688:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c68c:	781b      	ldrb	r3, [r3, #0]
    c68e:	4413      	add	r3, r2
    c690:	b2da      	uxtb	r2, r3
    c692:	f24a 4365 	movw	r3, #42085	; 0xa465
    c696:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c69a:	701a      	strb	r2, [r3, #0]
    c69c:	f24a 4366 	movw	r3, #42086	; 0xa466
    c6a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6a4:	781a      	ldrb	r2, [r3, #0]
    c6a6:	f24a 4365 	movw	r3, #42085	; 0xa465
    c6aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6ae:	781b      	ldrb	r3, [r3, #0]
    c6b0:	4413      	add	r3, r2
    c6b2:	b2da      	uxtb	r2, r3
    c6b4:	f24a 4366 	movw	r3, #42086	; 0xa466
    c6b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6bc:	701a      	strb	r2, [r3, #0]
    c6be:	f24a 3361 	movw	r3, #41825	; 0xa361
    c6c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6c6:	781b      	ldrb	r3, [r3, #0]
    c6c8:	3301      	adds	r3, #1
    c6ca:	b2da      	uxtb	r2, r3
    c6cc:	f24a 3361 	movw	r3, #41825	; 0xa361
    c6d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6d4:	701a      	strb	r2, [r3, #0]
    c6d6:	f24a 3361 	movw	r3, #41825	; 0xa361
    c6da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6de:	781b      	ldrb	r3, [r3, #0]
    c6e0:	2bff      	cmp	r3, #255	; 0xff
    c6e2:	d111      	bne.n	c708 <send_nav_values+0x65c>
    c6e4:	f24a 3361 	movw	r3, #41825	; 0xa361
    c6e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6ec:	2200      	movs	r2, #0
    c6ee:	701a      	strb	r2, [r3, #0]
    c6f0:	e00a      	b.n	c708 <send_nav_values+0x65c>
    c6f2:	bf00      	nop
    c6f4:	2000a915 	.word	0x2000a915
    c6f8:	2000a916 	.word	0x2000a916
    c6fc:	2000a917 	.word	0x2000a917
    c700:	2000a919 	.word	0x2000a919
    c704:	2000a91a 	.word	0x2000a91a
    c708:	f24a 3361 	movw	r3, #41825	; 0xa361
    c70c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c710:	781b      	ldrb	r3, [r3, #0]
    c712:	461a      	mov	r2, r3
    c714:	f64a 1318 	movw	r3, #43288	; 0xa918
    c718:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c71c:	78d9      	ldrb	r1, [r3, #3]
    c71e:	f24a 3364 	movw	r3, #41828	; 0xa364
    c722:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c726:	5499      	strb	r1, [r3, r2]
    c728:	4bd3      	ldr	r3, [pc, #844]	; (ca78 <send_nav_values+0x9cc>)
    c72a:	781a      	ldrb	r2, [r3, #0]
    c72c:	f24a 4365 	movw	r3, #42085	; 0xa465
    c730:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c734:	781b      	ldrb	r3, [r3, #0]
    c736:	4413      	add	r3, r2
    c738:	b2da      	uxtb	r2, r3
    c73a:	f24a 4365 	movw	r3, #42085	; 0xa465
    c73e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c742:	701a      	strb	r2, [r3, #0]
    c744:	f24a 4366 	movw	r3, #42086	; 0xa466
    c748:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c74c:	781a      	ldrb	r2, [r3, #0]
    c74e:	f24a 4365 	movw	r3, #42085	; 0xa465
    c752:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c756:	781b      	ldrb	r3, [r3, #0]
    c758:	4413      	add	r3, r2
    c75a:	b2da      	uxtb	r2, r3
    c75c:	f24a 4366 	movw	r3, #42086	; 0xa466
    c760:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c764:	701a      	strb	r2, [r3, #0]
    c766:	f24a 3361 	movw	r3, #41825	; 0xa361
    c76a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c76e:	781b      	ldrb	r3, [r3, #0]
    c770:	3301      	adds	r3, #1
    c772:	b2da      	uxtb	r2, r3
    c774:	f24a 3361 	movw	r3, #41825	; 0xa361
    c778:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c77c:	701a      	strb	r2, [r3, #0]
    c77e:	f24a 3361 	movw	r3, #41825	; 0xa361
    c782:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c786:	781b      	ldrb	r3, [r3, #0]
    c788:	2bff      	cmp	r3, #255	; 0xff
    c78a:	d105      	bne.n	c798 <send_nav_values+0x6ec>
    c78c:	f24a 3361 	movw	r3, #41825	; 0xa361
    c790:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c794:	2200      	movs	r2, #0
    c796:	701a      	strb	r2, [r3, #0]
    c798:	f24a 3361 	movw	r3, #41825	; 0xa361
    c79c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7a0:	781b      	ldrb	r3, [r3, #0]
    c7a2:	461a      	mov	r2, r3
    c7a4:	f24a 63a4 	movw	r3, #42660	; 0xa6a4
    c7a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7ac:	7819      	ldrb	r1, [r3, #0]
    c7ae:	f24a 3364 	movw	r3, #41828	; 0xa364
    c7b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7b6:	5499      	strb	r1, [r3, r2]
    c7b8:	f24a 63a4 	movw	r3, #42660	; 0xa6a4
    c7bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7c0:	781a      	ldrb	r2, [r3, #0]
    c7c2:	f24a 4365 	movw	r3, #42085	; 0xa465
    c7c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7ca:	781b      	ldrb	r3, [r3, #0]
    c7cc:	4413      	add	r3, r2
    c7ce:	b2da      	uxtb	r2, r3
    c7d0:	f24a 4365 	movw	r3, #42085	; 0xa465
    c7d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7d8:	701a      	strb	r2, [r3, #0]
    c7da:	f24a 4366 	movw	r3, #42086	; 0xa466
    c7de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7e2:	781a      	ldrb	r2, [r3, #0]
    c7e4:	f24a 4365 	movw	r3, #42085	; 0xa465
    c7e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7ec:	781b      	ldrb	r3, [r3, #0]
    c7ee:	4413      	add	r3, r2
    c7f0:	b2da      	uxtb	r2, r3
    c7f2:	f24a 4366 	movw	r3, #42086	; 0xa466
    c7f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7fa:	701a      	strb	r2, [r3, #0]
    c7fc:	f24a 3361 	movw	r3, #41825	; 0xa361
    c800:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c804:	781b      	ldrb	r3, [r3, #0]
    c806:	3301      	adds	r3, #1
    c808:	b2da      	uxtb	r2, r3
    c80a:	f24a 3361 	movw	r3, #41825	; 0xa361
    c80e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c812:	701a      	strb	r2, [r3, #0]
    c814:	f24a 3361 	movw	r3, #41825	; 0xa361
    c818:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c81c:	781b      	ldrb	r3, [r3, #0]
    c81e:	2bff      	cmp	r3, #255	; 0xff
    c820:	d105      	bne.n	c82e <send_nav_values+0x782>
    c822:	f24a 3361 	movw	r3, #41825	; 0xa361
    c826:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c82a:	2200      	movs	r2, #0
    c82c:	701a      	strb	r2, [r3, #0]
    c82e:	f24a 3361 	movw	r3, #41825	; 0xa361
    c832:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c836:	781b      	ldrb	r3, [r3, #0]
    c838:	461a      	mov	r2, r3
    c83a:	f24a 63a4 	movw	r3, #42660	; 0xa6a4
    c83e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c842:	7859      	ldrb	r1, [r3, #1]
    c844:	f24a 3364 	movw	r3, #41828	; 0xa364
    c848:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c84c:	5499      	strb	r1, [r3, r2]
    c84e:	4b8b      	ldr	r3, [pc, #556]	; (ca7c <send_nav_values+0x9d0>)
    c850:	781a      	ldrb	r2, [r3, #0]
    c852:	f24a 4365 	movw	r3, #42085	; 0xa465
    c856:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c85a:	781b      	ldrb	r3, [r3, #0]
    c85c:	4413      	add	r3, r2
    c85e:	b2da      	uxtb	r2, r3
    c860:	f24a 4365 	movw	r3, #42085	; 0xa465
    c864:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c868:	701a      	strb	r2, [r3, #0]
    c86a:	f24a 4366 	movw	r3, #42086	; 0xa466
    c86e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c872:	781a      	ldrb	r2, [r3, #0]
    c874:	f24a 4365 	movw	r3, #42085	; 0xa465
    c878:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c87c:	781b      	ldrb	r3, [r3, #0]
    c87e:	4413      	add	r3, r2
    c880:	b2da      	uxtb	r2, r3
    c882:	f24a 4366 	movw	r3, #42086	; 0xa466
    c886:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c88a:	701a      	strb	r2, [r3, #0]
    c88c:	f24a 3361 	movw	r3, #41825	; 0xa361
    c890:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c894:	781b      	ldrb	r3, [r3, #0]
    c896:	3301      	adds	r3, #1
    c898:	b2da      	uxtb	r2, r3
    c89a:	f24a 3361 	movw	r3, #41825	; 0xa361
    c89e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8a2:	701a      	strb	r2, [r3, #0]
    c8a4:	f24a 3361 	movw	r3, #41825	; 0xa361
    c8a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8ac:	781b      	ldrb	r3, [r3, #0]
    c8ae:	2bff      	cmp	r3, #255	; 0xff
    c8b0:	d105      	bne.n	c8be <send_nav_values+0x812>
    c8b2:	f24a 3361 	movw	r3, #41825	; 0xa361
    c8b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8ba:	2200      	movs	r2, #0
    c8bc:	701a      	strb	r2, [r3, #0]
    c8be:	f24a 3361 	movw	r3, #41825	; 0xa361
    c8c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8c6:	781b      	ldrb	r3, [r3, #0]
    c8c8:	461a      	mov	r2, r3
    c8ca:	f24a 63a4 	movw	r3, #42660	; 0xa6a4
    c8ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8d2:	7899      	ldrb	r1, [r3, #2]
    c8d4:	f24a 3364 	movw	r3, #41828	; 0xa364
    c8d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8dc:	5499      	strb	r1, [r3, r2]
    c8de:	4b68      	ldr	r3, [pc, #416]	; (ca80 <send_nav_values+0x9d4>)
    c8e0:	781a      	ldrb	r2, [r3, #0]
    c8e2:	f24a 4365 	movw	r3, #42085	; 0xa465
    c8e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8ea:	781b      	ldrb	r3, [r3, #0]
    c8ec:	4413      	add	r3, r2
    c8ee:	b2da      	uxtb	r2, r3
    c8f0:	f24a 4365 	movw	r3, #42085	; 0xa465
    c8f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8f8:	701a      	strb	r2, [r3, #0]
    c8fa:	f24a 4366 	movw	r3, #42086	; 0xa466
    c8fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c902:	781a      	ldrb	r2, [r3, #0]
    c904:	f24a 4365 	movw	r3, #42085	; 0xa465
    c908:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c90c:	781b      	ldrb	r3, [r3, #0]
    c90e:	4413      	add	r3, r2
    c910:	b2da      	uxtb	r2, r3
    c912:	f24a 4366 	movw	r3, #42086	; 0xa466
    c916:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c91a:	701a      	strb	r2, [r3, #0]
    c91c:	f24a 3361 	movw	r3, #41825	; 0xa361
    c920:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c924:	781b      	ldrb	r3, [r3, #0]
    c926:	3301      	adds	r3, #1
    c928:	b2da      	uxtb	r2, r3
    c92a:	f24a 3361 	movw	r3, #41825	; 0xa361
    c92e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c932:	701a      	strb	r2, [r3, #0]
    c934:	f24a 3361 	movw	r3, #41825	; 0xa361
    c938:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c93c:	781b      	ldrb	r3, [r3, #0]
    c93e:	2bff      	cmp	r3, #255	; 0xff
    c940:	d105      	bne.n	c94e <send_nav_values+0x8a2>
    c942:	f24a 3361 	movw	r3, #41825	; 0xa361
    c946:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c94a:	2200      	movs	r2, #0
    c94c:	701a      	strb	r2, [r3, #0]
    c94e:	f24a 3361 	movw	r3, #41825	; 0xa361
    c952:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c956:	781b      	ldrb	r3, [r3, #0]
    c958:	461a      	mov	r2, r3
    c95a:	f24a 63a4 	movw	r3, #42660	; 0xa6a4
    c95e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c962:	78d9      	ldrb	r1, [r3, #3]
    c964:	f24a 3364 	movw	r3, #41828	; 0xa364
    c968:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c96c:	5499      	strb	r1, [r3, r2]
    c96e:	4b45      	ldr	r3, [pc, #276]	; (ca84 <send_nav_values+0x9d8>)
    c970:	781a      	ldrb	r2, [r3, #0]
    c972:	f24a 4365 	movw	r3, #42085	; 0xa465
    c976:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c97a:	781b      	ldrb	r3, [r3, #0]
    c97c:	4413      	add	r3, r2
    c97e:	b2da      	uxtb	r2, r3
    c980:	f24a 4365 	movw	r3, #42085	; 0xa465
    c984:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c988:	701a      	strb	r2, [r3, #0]
    c98a:	f24a 4366 	movw	r3, #42086	; 0xa466
    c98e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c992:	781a      	ldrb	r2, [r3, #0]
    c994:	f24a 4365 	movw	r3, #42085	; 0xa465
    c998:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c99c:	781b      	ldrb	r3, [r3, #0]
    c99e:	4413      	add	r3, r2
    c9a0:	b2da      	uxtb	r2, r3
    c9a2:	f24a 4366 	movw	r3, #42086	; 0xa466
    c9a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9aa:	701a      	strb	r2, [r3, #0]
    c9ac:	f24a 3361 	movw	r3, #41825	; 0xa361
    c9b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9b4:	781b      	ldrb	r3, [r3, #0]
    c9b6:	3301      	adds	r3, #1
    c9b8:	b2da      	uxtb	r2, r3
    c9ba:	f24a 3361 	movw	r3, #41825	; 0xa361
    c9be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9c2:	701a      	strb	r2, [r3, #0]
    c9c4:	f24a 3361 	movw	r3, #41825	; 0xa361
    c9c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9cc:	781b      	ldrb	r3, [r3, #0]
    c9ce:	2bff      	cmp	r3, #255	; 0xff
    c9d0:	d105      	bne.n	c9de <send_nav_values+0x932>
    c9d2:	f24a 3361 	movw	r3, #41825	; 0xa361
    c9d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9da:	2200      	movs	r2, #0
    c9dc:	701a      	strb	r2, [r3, #0]
    c9de:	f24a 3361 	movw	r3, #41825	; 0xa361
    c9e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9e6:	781b      	ldrb	r3, [r3, #0]
    c9e8:	461a      	mov	r2, r3
    c9ea:	f24a 63ec 	movw	r3, #42732	; 0xa6ec
    c9ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9f2:	7819      	ldrb	r1, [r3, #0]
    c9f4:	f24a 3364 	movw	r3, #41828	; 0xa364
    c9f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9fc:	5499      	strb	r1, [r3, r2]
    c9fe:	f24a 63ec 	movw	r3, #42732	; 0xa6ec
    ca02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca06:	781a      	ldrb	r2, [r3, #0]
    ca08:	f24a 4365 	movw	r3, #42085	; 0xa465
    ca0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca10:	781b      	ldrb	r3, [r3, #0]
    ca12:	4413      	add	r3, r2
    ca14:	b2da      	uxtb	r2, r3
    ca16:	f24a 4365 	movw	r3, #42085	; 0xa465
    ca1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca1e:	701a      	strb	r2, [r3, #0]
    ca20:	f24a 4366 	movw	r3, #42086	; 0xa466
    ca24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca28:	781a      	ldrb	r2, [r3, #0]
    ca2a:	f24a 4365 	movw	r3, #42085	; 0xa465
    ca2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca32:	781b      	ldrb	r3, [r3, #0]
    ca34:	4413      	add	r3, r2
    ca36:	b2da      	uxtb	r2, r3
    ca38:	f24a 4366 	movw	r3, #42086	; 0xa466
    ca3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca40:	701a      	strb	r2, [r3, #0]
    ca42:	f24a 3361 	movw	r3, #41825	; 0xa361
    ca46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca4a:	781b      	ldrb	r3, [r3, #0]
    ca4c:	3301      	adds	r3, #1
    ca4e:	b2da      	uxtb	r2, r3
    ca50:	f24a 3361 	movw	r3, #41825	; 0xa361
    ca54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca58:	701a      	strb	r2, [r3, #0]
    ca5a:	f24a 3361 	movw	r3, #41825	; 0xa361
    ca5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca62:	781b      	ldrb	r3, [r3, #0]
    ca64:	2bff      	cmp	r3, #255	; 0xff
    ca66:	d10f      	bne.n	ca88 <send_nav_values+0x9dc>
    ca68:	f24a 3361 	movw	r3, #41825	; 0xa361
    ca6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca70:	2200      	movs	r2, #0
    ca72:	701a      	strb	r2, [r3, #0]
    ca74:	e008      	b.n	ca88 <send_nav_values+0x9dc>
    ca76:	bf00      	nop
    ca78:	2000a91b 	.word	0x2000a91b
    ca7c:	2000a6a5 	.word	0x2000a6a5
    ca80:	2000a6a6 	.word	0x2000a6a6
    ca84:	2000a6a7 	.word	0x2000a6a7
    ca88:	f24a 3361 	movw	r3, #41825	; 0xa361
    ca8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca90:	781b      	ldrb	r3, [r3, #0]
    ca92:	461a      	mov	r2, r3
    ca94:	f24a 63ec 	movw	r3, #42732	; 0xa6ec
    ca98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca9c:	7859      	ldrb	r1, [r3, #1]
    ca9e:	f24a 3364 	movw	r3, #41828	; 0xa364
    caa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    caa6:	5499      	strb	r1, [r3, r2]
    caa8:	4bd1      	ldr	r3, [pc, #836]	; (cdf0 <send_nav_values+0xd44>)
    caaa:	781a      	ldrb	r2, [r3, #0]
    caac:	f24a 4365 	movw	r3, #42085	; 0xa465
    cab0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cab4:	781b      	ldrb	r3, [r3, #0]
    cab6:	4413      	add	r3, r2
    cab8:	b2da      	uxtb	r2, r3
    caba:	f24a 4365 	movw	r3, #42085	; 0xa465
    cabe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cac2:	701a      	strb	r2, [r3, #0]
    cac4:	f24a 4366 	movw	r3, #42086	; 0xa466
    cac8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cacc:	781a      	ldrb	r2, [r3, #0]
    cace:	f24a 4365 	movw	r3, #42085	; 0xa465
    cad2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cad6:	781b      	ldrb	r3, [r3, #0]
    cad8:	4413      	add	r3, r2
    cada:	b2da      	uxtb	r2, r3
    cadc:	f24a 4366 	movw	r3, #42086	; 0xa466
    cae0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cae4:	701a      	strb	r2, [r3, #0]
    cae6:	f24a 3361 	movw	r3, #41825	; 0xa361
    caea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    caee:	781b      	ldrb	r3, [r3, #0]
    caf0:	3301      	adds	r3, #1
    caf2:	b2da      	uxtb	r2, r3
    caf4:	f24a 3361 	movw	r3, #41825	; 0xa361
    caf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cafc:	701a      	strb	r2, [r3, #0]
    cafe:	f24a 3361 	movw	r3, #41825	; 0xa361
    cb02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb06:	781b      	ldrb	r3, [r3, #0]
    cb08:	2bff      	cmp	r3, #255	; 0xff
    cb0a:	d105      	bne.n	cb18 <send_nav_values+0xa6c>
    cb0c:	f24a 3361 	movw	r3, #41825	; 0xa361
    cb10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb14:	2200      	movs	r2, #0
    cb16:	701a      	strb	r2, [r3, #0]
    cb18:	f24a 3361 	movw	r3, #41825	; 0xa361
    cb1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb20:	781b      	ldrb	r3, [r3, #0]
    cb22:	461a      	mov	r2, r3
    cb24:	f24a 63ec 	movw	r3, #42732	; 0xa6ec
    cb28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb2c:	7899      	ldrb	r1, [r3, #2]
    cb2e:	f24a 3364 	movw	r3, #41828	; 0xa364
    cb32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb36:	5499      	strb	r1, [r3, r2]
    cb38:	4bae      	ldr	r3, [pc, #696]	; (cdf4 <send_nav_values+0xd48>)
    cb3a:	781a      	ldrb	r2, [r3, #0]
    cb3c:	f24a 4365 	movw	r3, #42085	; 0xa465
    cb40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb44:	781b      	ldrb	r3, [r3, #0]
    cb46:	4413      	add	r3, r2
    cb48:	b2da      	uxtb	r2, r3
    cb4a:	f24a 4365 	movw	r3, #42085	; 0xa465
    cb4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb52:	701a      	strb	r2, [r3, #0]
    cb54:	f24a 4366 	movw	r3, #42086	; 0xa466
    cb58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb5c:	781a      	ldrb	r2, [r3, #0]
    cb5e:	f24a 4365 	movw	r3, #42085	; 0xa465
    cb62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb66:	781b      	ldrb	r3, [r3, #0]
    cb68:	4413      	add	r3, r2
    cb6a:	b2da      	uxtb	r2, r3
    cb6c:	f24a 4366 	movw	r3, #42086	; 0xa466
    cb70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb74:	701a      	strb	r2, [r3, #0]
    cb76:	f24a 3361 	movw	r3, #41825	; 0xa361
    cb7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb7e:	781b      	ldrb	r3, [r3, #0]
    cb80:	3301      	adds	r3, #1
    cb82:	b2da      	uxtb	r2, r3
    cb84:	f24a 3361 	movw	r3, #41825	; 0xa361
    cb88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb8c:	701a      	strb	r2, [r3, #0]
    cb8e:	f24a 3361 	movw	r3, #41825	; 0xa361
    cb92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb96:	781b      	ldrb	r3, [r3, #0]
    cb98:	2bff      	cmp	r3, #255	; 0xff
    cb9a:	d105      	bne.n	cba8 <send_nav_values+0xafc>
    cb9c:	f24a 3361 	movw	r3, #41825	; 0xa361
    cba0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cba4:	2200      	movs	r2, #0
    cba6:	701a      	strb	r2, [r3, #0]
    cba8:	f24a 3361 	movw	r3, #41825	; 0xa361
    cbac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbb0:	781b      	ldrb	r3, [r3, #0]
    cbb2:	461a      	mov	r2, r3
    cbb4:	f24a 63ec 	movw	r3, #42732	; 0xa6ec
    cbb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbbc:	78d9      	ldrb	r1, [r3, #3]
    cbbe:	f24a 3364 	movw	r3, #41828	; 0xa364
    cbc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbc6:	5499      	strb	r1, [r3, r2]
    cbc8:	4b8b      	ldr	r3, [pc, #556]	; (cdf8 <send_nav_values+0xd4c>)
    cbca:	781a      	ldrb	r2, [r3, #0]
    cbcc:	f24a 4365 	movw	r3, #42085	; 0xa465
    cbd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbd4:	781b      	ldrb	r3, [r3, #0]
    cbd6:	4413      	add	r3, r2
    cbd8:	b2da      	uxtb	r2, r3
    cbda:	f24a 4365 	movw	r3, #42085	; 0xa465
    cbde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbe2:	701a      	strb	r2, [r3, #0]
    cbe4:	f24a 4366 	movw	r3, #42086	; 0xa466
    cbe8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbec:	781a      	ldrb	r2, [r3, #0]
    cbee:	f24a 4365 	movw	r3, #42085	; 0xa465
    cbf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbf6:	781b      	ldrb	r3, [r3, #0]
    cbf8:	4413      	add	r3, r2
    cbfa:	b2da      	uxtb	r2, r3
    cbfc:	f24a 4366 	movw	r3, #42086	; 0xa466
    cc00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc04:	701a      	strb	r2, [r3, #0]
    cc06:	f24a 3361 	movw	r3, #41825	; 0xa361
    cc0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc0e:	781b      	ldrb	r3, [r3, #0]
    cc10:	3301      	adds	r3, #1
    cc12:	b2da      	uxtb	r2, r3
    cc14:	f24a 3361 	movw	r3, #41825	; 0xa361
    cc18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc1c:	701a      	strb	r2, [r3, #0]
    cc1e:	f24a 3361 	movw	r3, #41825	; 0xa361
    cc22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc26:	781b      	ldrb	r3, [r3, #0]
    cc28:	2bff      	cmp	r3, #255	; 0xff
    cc2a:	d105      	bne.n	cc38 <send_nav_values+0xb8c>
    cc2c:	f24a 3361 	movw	r3, #41825	; 0xa361
    cc30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc34:	2200      	movs	r2, #0
    cc36:	701a      	strb	r2, [r3, #0]
    cc38:	f24a 3361 	movw	r3, #41825	; 0xa361
    cc3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc40:	781b      	ldrb	r3, [r3, #0]
    cc42:	461a      	mov	r2, r3
    cc44:	f240 03ec 	movw	r3, #236	; 0xec
    cc48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc4c:	7819      	ldrb	r1, [r3, #0]
    cc4e:	f24a 3364 	movw	r3, #41828	; 0xa364
    cc52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc56:	5499      	strb	r1, [r3, r2]
    cc58:	f240 03ec 	movw	r3, #236	; 0xec
    cc5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc60:	781a      	ldrb	r2, [r3, #0]
    cc62:	f24a 4365 	movw	r3, #42085	; 0xa465
    cc66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc6a:	781b      	ldrb	r3, [r3, #0]
    cc6c:	4413      	add	r3, r2
    cc6e:	b2da      	uxtb	r2, r3
    cc70:	f24a 4365 	movw	r3, #42085	; 0xa465
    cc74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc78:	701a      	strb	r2, [r3, #0]
    cc7a:	f24a 4366 	movw	r3, #42086	; 0xa466
    cc7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc82:	781a      	ldrb	r2, [r3, #0]
    cc84:	f24a 4365 	movw	r3, #42085	; 0xa465
    cc88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc8c:	781b      	ldrb	r3, [r3, #0]
    cc8e:	4413      	add	r3, r2
    cc90:	b2da      	uxtb	r2, r3
    cc92:	f24a 4366 	movw	r3, #42086	; 0xa466
    cc96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc9a:	701a      	strb	r2, [r3, #0]
    cc9c:	f24a 3361 	movw	r3, #41825	; 0xa361
    cca0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cca4:	781b      	ldrb	r3, [r3, #0]
    cca6:	3301      	adds	r3, #1
    cca8:	b2da      	uxtb	r2, r3
    ccaa:	f24a 3361 	movw	r3, #41825	; 0xa361
    ccae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ccb2:	701a      	strb	r2, [r3, #0]
    ccb4:	f24a 3361 	movw	r3, #41825	; 0xa361
    ccb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ccbc:	781b      	ldrb	r3, [r3, #0]
    ccbe:	2bff      	cmp	r3, #255	; 0xff
    ccc0:	d105      	bne.n	ccce <send_nav_values+0xc22>
    ccc2:	f24a 3361 	movw	r3, #41825	; 0xa361
    ccc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ccca:	2200      	movs	r2, #0
    cccc:	701a      	strb	r2, [r3, #0]
    ccce:	f24a 3361 	movw	r3, #41825	; 0xa361
    ccd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ccd6:	781b      	ldrb	r3, [r3, #0]
    ccd8:	461a      	mov	r2, r3
    ccda:	f240 03ec 	movw	r3, #236	; 0xec
    ccde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cce2:	7859      	ldrb	r1, [r3, #1]
    cce4:	f24a 3364 	movw	r3, #41828	; 0xa364
    cce8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ccec:	5499      	strb	r1, [r3, r2]
    ccee:	4b43      	ldr	r3, [pc, #268]	; (cdfc <send_nav_values+0xd50>)
    ccf0:	781a      	ldrb	r2, [r3, #0]
    ccf2:	f24a 4365 	movw	r3, #42085	; 0xa465
    ccf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ccfa:	781b      	ldrb	r3, [r3, #0]
    ccfc:	4413      	add	r3, r2
    ccfe:	b2da      	uxtb	r2, r3
    cd00:	f24a 4365 	movw	r3, #42085	; 0xa465
    cd04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd08:	701a      	strb	r2, [r3, #0]
    cd0a:	f24a 4366 	movw	r3, #42086	; 0xa466
    cd0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd12:	781a      	ldrb	r2, [r3, #0]
    cd14:	f24a 4365 	movw	r3, #42085	; 0xa465
    cd18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd1c:	781b      	ldrb	r3, [r3, #0]
    cd1e:	4413      	add	r3, r2
    cd20:	b2da      	uxtb	r2, r3
    cd22:	f24a 4366 	movw	r3, #42086	; 0xa466
    cd26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd2a:	701a      	strb	r2, [r3, #0]
    cd2c:	f24a 3361 	movw	r3, #41825	; 0xa361
    cd30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd34:	781b      	ldrb	r3, [r3, #0]
    cd36:	3301      	adds	r3, #1
    cd38:	b2da      	uxtb	r2, r3
    cd3a:	f24a 3361 	movw	r3, #41825	; 0xa361
    cd3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd42:	701a      	strb	r2, [r3, #0]
    cd44:	f24a 3361 	movw	r3, #41825	; 0xa361
    cd48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd4c:	781b      	ldrb	r3, [r3, #0]
    cd4e:	2bff      	cmp	r3, #255	; 0xff
    cd50:	d105      	bne.n	cd5e <send_nav_values+0xcb2>
    cd52:	f24a 3361 	movw	r3, #41825	; 0xa361
    cd56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd5a:	2200      	movs	r2, #0
    cd5c:	701a      	strb	r2, [r3, #0]
    cd5e:	f24a 3361 	movw	r3, #41825	; 0xa361
    cd62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd66:	781b      	ldrb	r3, [r3, #0]
    cd68:	461a      	mov	r2, r3
    cd6a:	f240 03ec 	movw	r3, #236	; 0xec
    cd6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd72:	7899      	ldrb	r1, [r3, #2]
    cd74:	f24a 3364 	movw	r3, #41828	; 0xa364
    cd78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd7c:	5499      	strb	r1, [r3, r2]
    cd7e:	4b20      	ldr	r3, [pc, #128]	; (ce00 <send_nav_values+0xd54>)
    cd80:	781a      	ldrb	r2, [r3, #0]
    cd82:	f24a 4365 	movw	r3, #42085	; 0xa465
    cd86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd8a:	781b      	ldrb	r3, [r3, #0]
    cd8c:	4413      	add	r3, r2
    cd8e:	b2da      	uxtb	r2, r3
    cd90:	f24a 4365 	movw	r3, #42085	; 0xa465
    cd94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd98:	701a      	strb	r2, [r3, #0]
    cd9a:	f24a 4366 	movw	r3, #42086	; 0xa466
    cd9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cda2:	781a      	ldrb	r2, [r3, #0]
    cda4:	f24a 4365 	movw	r3, #42085	; 0xa465
    cda8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cdac:	781b      	ldrb	r3, [r3, #0]
    cdae:	4413      	add	r3, r2
    cdb0:	b2da      	uxtb	r2, r3
    cdb2:	f24a 4366 	movw	r3, #42086	; 0xa466
    cdb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cdba:	701a      	strb	r2, [r3, #0]
    cdbc:	f24a 3361 	movw	r3, #41825	; 0xa361
    cdc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cdc4:	781b      	ldrb	r3, [r3, #0]
    cdc6:	3301      	adds	r3, #1
    cdc8:	b2da      	uxtb	r2, r3
    cdca:	f24a 3361 	movw	r3, #41825	; 0xa361
    cdce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cdd2:	701a      	strb	r2, [r3, #0]
    cdd4:	f24a 3361 	movw	r3, #41825	; 0xa361
    cdd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cddc:	781b      	ldrb	r3, [r3, #0]
    cdde:	2bff      	cmp	r3, #255	; 0xff
    cde0:	d110      	bne.n	ce04 <send_nav_values+0xd58>
    cde2:	f24a 3361 	movw	r3, #41825	; 0xa361
    cde6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cdea:	2200      	movs	r2, #0
    cdec:	701a      	strb	r2, [r3, #0]
    cdee:	e009      	b.n	ce04 <send_nav_values+0xd58>
    cdf0:	2000a6ed 	.word	0x2000a6ed
    cdf4:	2000a6ee 	.word	0x2000a6ee
    cdf8:	2000a6ef 	.word	0x2000a6ef
    cdfc:	200000ed 	.word	0x200000ed
    ce00:	200000ee 	.word	0x200000ee
    ce04:	f24a 3361 	movw	r3, #41825	; 0xa361
    ce08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce0c:	781b      	ldrb	r3, [r3, #0]
    ce0e:	461a      	mov	r2, r3
    ce10:	f240 03ec 	movw	r3, #236	; 0xec
    ce14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce18:	78d9      	ldrb	r1, [r3, #3]
    ce1a:	f24a 3364 	movw	r3, #41828	; 0xa364
    ce1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce22:	5499      	strb	r1, [r3, r2]
    ce24:	4bc2      	ldr	r3, [pc, #776]	; (d130 <send_nav_values+0x1084>)
    ce26:	781a      	ldrb	r2, [r3, #0]
    ce28:	f24a 4365 	movw	r3, #42085	; 0xa465
    ce2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce30:	781b      	ldrb	r3, [r3, #0]
    ce32:	4413      	add	r3, r2
    ce34:	b2da      	uxtb	r2, r3
    ce36:	f24a 4365 	movw	r3, #42085	; 0xa465
    ce3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce3e:	701a      	strb	r2, [r3, #0]
    ce40:	f24a 4366 	movw	r3, #42086	; 0xa466
    ce44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce48:	781a      	ldrb	r2, [r3, #0]
    ce4a:	f24a 4365 	movw	r3, #42085	; 0xa465
    ce4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce52:	781b      	ldrb	r3, [r3, #0]
    ce54:	4413      	add	r3, r2
    ce56:	b2da      	uxtb	r2, r3
    ce58:	f24a 4366 	movw	r3, #42086	; 0xa466
    ce5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce60:	701a      	strb	r2, [r3, #0]
    ce62:	f24a 3361 	movw	r3, #41825	; 0xa361
    ce66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce6a:	781b      	ldrb	r3, [r3, #0]
    ce6c:	3301      	adds	r3, #1
    ce6e:	b2da      	uxtb	r2, r3
    ce70:	f24a 3361 	movw	r3, #41825	; 0xa361
    ce74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce78:	701a      	strb	r2, [r3, #0]
    ce7a:	f24a 3361 	movw	r3, #41825	; 0xa361
    ce7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce82:	781b      	ldrb	r3, [r3, #0]
    ce84:	2bff      	cmp	r3, #255	; 0xff
    ce86:	d105      	bne.n	ce94 <send_nav_values+0xde8>
    ce88:	f24a 3361 	movw	r3, #41825	; 0xa361
    ce8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce90:	2200      	movs	r2, #0
    ce92:	701a      	strb	r2, [r3, #0]
    ce94:	f24a 3361 	movw	r3, #41825	; 0xa361
    ce98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce9c:	781b      	ldrb	r3, [r3, #0]
    ce9e:	461a      	mov	r2, r3
    cea0:	f24a 63f0 	movw	r3, #42736	; 0xa6f0
    cea4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cea8:	7819      	ldrb	r1, [r3, #0]
    ceaa:	f24a 3364 	movw	r3, #41828	; 0xa364
    ceae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ceb2:	5499      	strb	r1, [r3, r2]
    ceb4:	f24a 63f0 	movw	r3, #42736	; 0xa6f0
    ceb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cebc:	781a      	ldrb	r2, [r3, #0]
    cebe:	f24a 4365 	movw	r3, #42085	; 0xa465
    cec2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cec6:	781b      	ldrb	r3, [r3, #0]
    cec8:	4413      	add	r3, r2
    ceca:	b2da      	uxtb	r2, r3
    cecc:	f24a 4365 	movw	r3, #42085	; 0xa465
    ced0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ced4:	701a      	strb	r2, [r3, #0]
    ced6:	f24a 4366 	movw	r3, #42086	; 0xa466
    ceda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cede:	781a      	ldrb	r2, [r3, #0]
    cee0:	f24a 4365 	movw	r3, #42085	; 0xa465
    cee4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cee8:	781b      	ldrb	r3, [r3, #0]
    ceea:	4413      	add	r3, r2
    ceec:	b2da      	uxtb	r2, r3
    ceee:	f24a 4366 	movw	r3, #42086	; 0xa466
    cef2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cef6:	701a      	strb	r2, [r3, #0]
    cef8:	f24a 3361 	movw	r3, #41825	; 0xa361
    cefc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf00:	781b      	ldrb	r3, [r3, #0]
    cf02:	3301      	adds	r3, #1
    cf04:	b2da      	uxtb	r2, r3
    cf06:	f24a 3361 	movw	r3, #41825	; 0xa361
    cf0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf0e:	701a      	strb	r2, [r3, #0]
    cf10:	f24a 3361 	movw	r3, #41825	; 0xa361
    cf14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf18:	781b      	ldrb	r3, [r3, #0]
    cf1a:	2bff      	cmp	r3, #255	; 0xff
    cf1c:	d105      	bne.n	cf2a <send_nav_values+0xe7e>
    cf1e:	f24a 3361 	movw	r3, #41825	; 0xa361
    cf22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf26:	2200      	movs	r2, #0
    cf28:	701a      	strb	r2, [r3, #0]
    cf2a:	f24a 3361 	movw	r3, #41825	; 0xa361
    cf2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf32:	781b      	ldrb	r3, [r3, #0]
    cf34:	461a      	mov	r2, r3
    cf36:	f24a 63f0 	movw	r3, #42736	; 0xa6f0
    cf3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf3e:	7859      	ldrb	r1, [r3, #1]
    cf40:	f24a 3364 	movw	r3, #41828	; 0xa364
    cf44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf48:	5499      	strb	r1, [r3, r2]
    cf4a:	4b7a      	ldr	r3, [pc, #488]	; (d134 <send_nav_values+0x1088>)
    cf4c:	781a      	ldrb	r2, [r3, #0]
    cf4e:	f24a 4365 	movw	r3, #42085	; 0xa465
    cf52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf56:	781b      	ldrb	r3, [r3, #0]
    cf58:	4413      	add	r3, r2
    cf5a:	b2da      	uxtb	r2, r3
    cf5c:	f24a 4365 	movw	r3, #42085	; 0xa465
    cf60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf64:	701a      	strb	r2, [r3, #0]
    cf66:	f24a 4366 	movw	r3, #42086	; 0xa466
    cf6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf6e:	781a      	ldrb	r2, [r3, #0]
    cf70:	f24a 4365 	movw	r3, #42085	; 0xa465
    cf74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf78:	781b      	ldrb	r3, [r3, #0]
    cf7a:	4413      	add	r3, r2
    cf7c:	b2da      	uxtb	r2, r3
    cf7e:	f24a 4366 	movw	r3, #42086	; 0xa466
    cf82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf86:	701a      	strb	r2, [r3, #0]
    cf88:	f24a 3361 	movw	r3, #41825	; 0xa361
    cf8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf90:	781b      	ldrb	r3, [r3, #0]
    cf92:	3301      	adds	r3, #1
    cf94:	b2da      	uxtb	r2, r3
    cf96:	f24a 3361 	movw	r3, #41825	; 0xa361
    cf9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf9e:	701a      	strb	r2, [r3, #0]
    cfa0:	f24a 3361 	movw	r3, #41825	; 0xa361
    cfa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfa8:	781b      	ldrb	r3, [r3, #0]
    cfaa:	2bff      	cmp	r3, #255	; 0xff
    cfac:	d105      	bne.n	cfba <send_nav_values+0xf0e>
    cfae:	f24a 3361 	movw	r3, #41825	; 0xa361
    cfb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfb6:	2200      	movs	r2, #0
    cfb8:	701a      	strb	r2, [r3, #0]
    cfba:	f24a 3361 	movw	r3, #41825	; 0xa361
    cfbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfc2:	781b      	ldrb	r3, [r3, #0]
    cfc4:	461a      	mov	r2, r3
    cfc6:	f24a 63f0 	movw	r3, #42736	; 0xa6f0
    cfca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfce:	7899      	ldrb	r1, [r3, #2]
    cfd0:	f24a 3364 	movw	r3, #41828	; 0xa364
    cfd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfd8:	5499      	strb	r1, [r3, r2]
    cfda:	4b57      	ldr	r3, [pc, #348]	; (d138 <send_nav_values+0x108c>)
    cfdc:	781a      	ldrb	r2, [r3, #0]
    cfde:	f24a 4365 	movw	r3, #42085	; 0xa465
    cfe2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfe6:	781b      	ldrb	r3, [r3, #0]
    cfe8:	4413      	add	r3, r2
    cfea:	b2da      	uxtb	r2, r3
    cfec:	f24a 4365 	movw	r3, #42085	; 0xa465
    cff0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cff4:	701a      	strb	r2, [r3, #0]
    cff6:	f24a 4366 	movw	r3, #42086	; 0xa466
    cffa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cffe:	781a      	ldrb	r2, [r3, #0]
    d000:	f24a 4365 	movw	r3, #42085	; 0xa465
    d004:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d008:	781b      	ldrb	r3, [r3, #0]
    d00a:	4413      	add	r3, r2
    d00c:	b2da      	uxtb	r2, r3
    d00e:	f24a 4366 	movw	r3, #42086	; 0xa466
    d012:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d016:	701a      	strb	r2, [r3, #0]
    d018:	f24a 3361 	movw	r3, #41825	; 0xa361
    d01c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d020:	781b      	ldrb	r3, [r3, #0]
    d022:	3301      	adds	r3, #1
    d024:	b2da      	uxtb	r2, r3
    d026:	f24a 3361 	movw	r3, #41825	; 0xa361
    d02a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d02e:	701a      	strb	r2, [r3, #0]
    d030:	f24a 3361 	movw	r3, #41825	; 0xa361
    d034:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d038:	781b      	ldrb	r3, [r3, #0]
    d03a:	2bff      	cmp	r3, #255	; 0xff
    d03c:	d105      	bne.n	d04a <send_nav_values+0xf9e>
    d03e:	f24a 3361 	movw	r3, #41825	; 0xa361
    d042:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d046:	2200      	movs	r2, #0
    d048:	701a      	strb	r2, [r3, #0]
    d04a:	f24a 3361 	movw	r3, #41825	; 0xa361
    d04e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d052:	781b      	ldrb	r3, [r3, #0]
    d054:	461a      	mov	r2, r3
    d056:	f24a 63f0 	movw	r3, #42736	; 0xa6f0
    d05a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d05e:	78d9      	ldrb	r1, [r3, #3]
    d060:	f24a 3364 	movw	r3, #41828	; 0xa364
    d064:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d068:	5499      	strb	r1, [r3, r2]
    d06a:	4b34      	ldr	r3, [pc, #208]	; (d13c <send_nav_values+0x1090>)
    d06c:	781a      	ldrb	r2, [r3, #0]
    d06e:	f24a 4365 	movw	r3, #42085	; 0xa465
    d072:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d076:	781b      	ldrb	r3, [r3, #0]
    d078:	4413      	add	r3, r2
    d07a:	b2da      	uxtb	r2, r3
    d07c:	f24a 4365 	movw	r3, #42085	; 0xa465
    d080:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d084:	701a      	strb	r2, [r3, #0]
    d086:	f24a 4366 	movw	r3, #42086	; 0xa466
    d08a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d08e:	781a      	ldrb	r2, [r3, #0]
    d090:	f24a 4365 	movw	r3, #42085	; 0xa465
    d094:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d098:	781b      	ldrb	r3, [r3, #0]
    d09a:	4413      	add	r3, r2
    d09c:	b2da      	uxtb	r2, r3
    d09e:	f24a 4366 	movw	r3, #42086	; 0xa466
    d0a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0a6:	701a      	strb	r2, [r3, #0]
    d0a8:	f24a 3361 	movw	r3, #41825	; 0xa361
    d0ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0b0:	781b      	ldrb	r3, [r3, #0]
    d0b2:	3301      	adds	r3, #1
    d0b4:	b2da      	uxtb	r2, r3
    d0b6:	f24a 3361 	movw	r3, #41825	; 0xa361
    d0ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0be:	701a      	strb	r2, [r3, #0]
    d0c0:	f24a 3361 	movw	r3, #41825	; 0xa361
    d0c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0c8:	781b      	ldrb	r3, [r3, #0]
    d0ca:	2bff      	cmp	r3, #255	; 0xff
    d0cc:	d105      	bne.n	d0da <send_nav_values+0x102e>
    d0ce:	f24a 3361 	movw	r3, #41825	; 0xa361
    d0d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0d6:	2200      	movs	r2, #0
    d0d8:	701a      	strb	r2, [r3, #0]
    d0da:	f24a 3361 	movw	r3, #41825	; 0xa361
    d0de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0e2:	781b      	ldrb	r3, [r3, #0]
    d0e4:	461a      	mov	r2, r3
    d0e6:	f24a 4365 	movw	r3, #42085	; 0xa465
    d0ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0ee:	7819      	ldrb	r1, [r3, #0]
    d0f0:	f24a 3364 	movw	r3, #41828	; 0xa364
    d0f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0f8:	5499      	strb	r1, [r3, r2]
    d0fa:	f24a 3361 	movw	r3, #41825	; 0xa361
    d0fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d102:	781b      	ldrb	r3, [r3, #0]
    d104:	3301      	adds	r3, #1
    d106:	b2da      	uxtb	r2, r3
    d108:	f24a 3361 	movw	r3, #41825	; 0xa361
    d10c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d110:	701a      	strb	r2, [r3, #0]
    d112:	f24a 3361 	movw	r3, #41825	; 0xa361
    d116:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d11a:	781b      	ldrb	r3, [r3, #0]
    d11c:	2bff      	cmp	r3, #255	; 0xff
    d11e:	d10f      	bne.n	d140 <send_nav_values+0x1094>
    d120:	f24a 3361 	movw	r3, #41825	; 0xa361
    d124:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d128:	2200      	movs	r2, #0
    d12a:	701a      	strb	r2, [r3, #0]
    d12c:	e008      	b.n	d140 <send_nav_values+0x1094>
    d12e:	bf00      	nop
    d130:	200000ef 	.word	0x200000ef
    d134:	2000a6f1 	.word	0x2000a6f1
    d138:	2000a6f2 	.word	0x2000a6f2
    d13c:	2000a6f3 	.word	0x2000a6f3
    d140:	f24a 3361 	movw	r3, #41825	; 0xa361
    d144:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d148:	781b      	ldrb	r3, [r3, #0]
    d14a:	461a      	mov	r2, r3
    d14c:	f24a 4366 	movw	r3, #42086	; 0xa466
    d150:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d154:	7819      	ldrb	r1, [r3, #0]
    d156:	f24a 3364 	movw	r3, #41828	; 0xa364
    d15a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d15e:	5499      	strb	r1, [r3, r2]
    d160:	f24a 3361 	movw	r3, #41825	; 0xa361
    d164:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d168:	781b      	ldrb	r3, [r3, #0]
    d16a:	3301      	adds	r3, #1
    d16c:	b2da      	uxtb	r2, r3
    d16e:	f24a 3361 	movw	r3, #41825	; 0xa361
    d172:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d176:	701a      	strb	r2, [r3, #0]
    d178:	f24a 3361 	movw	r3, #41825	; 0xa361
    d17c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d180:	781b      	ldrb	r3, [r3, #0]
    d182:	2bff      	cmp	r3, #255	; 0xff
    d184:	d105      	bne.n	d192 <send_nav_values+0x10e6>
    d186:	f24a 3361 	movw	r3, #41825	; 0xa361
    d18a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d18e:	2200      	movs	r2, #0
    d190:	701a      	strb	r2, [r3, #0]
    d192:	f242 0339 	movw	r3, #8249	; 0x2039
    d196:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d19a:	781b      	ldrb	r3, [r3, #0]
    d19c:	b2db      	uxtb	r3, r3
    d19e:	f003 0310 	and.w	r3, r3, #16
    d1a2:	2b00      	cmp	r3, #0
    d1a4:	d15a      	bne.n	d25c <send_nav_values+0x11b0>
    d1a6:	f24a 3362 	movw	r3, #41826	; 0xa362
    d1aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1ae:	781b      	ldrb	r3, [r3, #0]
    d1b0:	b2db      	uxtb	r3, r3
    d1b2:	461a      	mov	r2, r3
    d1b4:	f24a 3364 	movw	r3, #41828	; 0xa364
    d1b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1bc:	5c9a      	ldrb	r2, [r3, r2]
    d1be:	f24a 4363 	movw	r3, #42083	; 0xa463
    d1c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1c6:	701a      	strb	r2, [r3, #0]
    d1c8:	f24a 4364 	movw	r3, #42084	; 0xa464
    d1cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1d0:	2200      	movs	r2, #0
    d1d2:	701a      	strb	r2, [r3, #0]
    d1d4:	f24a 3362 	movw	r3, #41826	; 0xa362
    d1d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1dc:	781b      	ldrb	r3, [r3, #0]
    d1de:	b2db      	uxtb	r3, r3
    d1e0:	3301      	adds	r3, #1
    d1e2:	b2da      	uxtb	r2, r3
    d1e4:	f24a 3362 	movw	r3, #41826	; 0xa362
    d1e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1ec:	701a      	strb	r2, [r3, #0]
    d1ee:	f24a 3362 	movw	r3, #41826	; 0xa362
    d1f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1f6:	781b      	ldrb	r3, [r3, #0]
    d1f8:	b2db      	uxtb	r3, r3
    d1fa:	2bff      	cmp	r3, #255	; 0xff
    d1fc:	d105      	bne.n	d20a <send_nav_values+0x115e>
    d1fe:	f24a 3362 	movw	r3, #41826	; 0xa362
    d202:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d206:	2200      	movs	r2, #0
    d208:	701a      	strb	r2, [r3, #0]
    d20a:	f242 0338 	movw	r3, #8248	; 0x2038
    d20e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d212:	f242 0238 	movw	r2, #8248	; 0x2038
    d216:	f2c2 0200 	movt	r2, #8192	; 0x2000
    d21a:	7812      	ldrb	r2, [r2, #0]
    d21c:	b2d2      	uxtb	r2, r2
    d21e:	f042 0201 	orr.w	r2, r2, #1
    d222:	b2d2      	uxtb	r2, r2
    d224:	701a      	strb	r2, [r3, #0]
    d226:	f242 0339 	movw	r3, #8249	; 0x2039
    d22a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d22e:	f242 0239 	movw	r2, #8249	; 0x2039
    d232:	f2c2 0200 	movt	r2, #8192	; 0x2000
    d236:	7812      	ldrb	r2, [r2, #0]
    d238:	b2d2      	uxtb	r2, r2
    d23a:	f042 0210 	orr.w	r2, r2, #16
    d23e:	b2d2      	uxtb	r2, r2
    d240:	701a      	strb	r2, [r3, #0]
    d242:	e00b      	b.n	d25c <send_nav_values+0x11b0>
    d244:	f24a 3360 	movw	r3, #41824	; 0xa360
    d248:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d24c:	781b      	ldrb	r3, [r3, #0]
    d24e:	3301      	adds	r3, #1
    d250:	b2da      	uxtb	r2, r3
    d252:	f24a 3360 	movw	r3, #41824	; 0xa360
    d256:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d25a:	701a      	strb	r2, [r3, #0]
}
    d25c:	46bd      	mov	sp, r7
    d25e:	f85d 7b04 	ldr.w	r7, [sp], #4
    d262:	4770      	bx	lr

0000d264 <course_run>:

void course_run(void){
    d264:	b580      	push	{r7, lr}
    d266:	af00      	add	r7, sp, #0
  
  if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) 
    d268:	f24a 3344 	movw	r3, #41796	; 0xa344
    d26c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d270:	781b      	ldrb	r3, [r3, #0]
    d272:	2b02      	cmp	r3, #2
    d274:	d006      	beq.n	d284 <course_run+0x20>
    d276:	f24a 3344 	movw	r3, #41796	; 0xa344
    d27a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d27e:	781b      	ldrb	r3, [r3, #0]
    d280:	2b03      	cmp	r3, #3
    d282:	d112      	bne.n	d2aa <course_run+0x46>
  {
    if (lateral_mode >= LATERAL_MODE_COURSE)
    d284:	f24a 3346 	movw	r3, #41798	; 0xa346
    d288:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d28c:	781b      	ldrb	r3, [r3, #0]
    d28e:	2b02      	cmp	r3, #2
    d290:	d901      	bls.n	d296 <course_run+0x32>
      course_pid_run(); /* aka compute nav_desired_roll */
    d292:	f003 faf1 	bl	10878 <course_pid_run>
    desired_roll = nav_desired_roll;
    d296:	f24a 63e8 	movw	r3, #42728	; 0xa6e8
    d29a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d29e:	681a      	ldr	r2, [r3, #0]
    d2a0:	f24a 638c 	movw	r3, #42636	; 0xa68c
    d2a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d2a8:	601a      	str	r2, [r3, #0]
  }  
  //vPrintString("S_17 Navigation task end!\n\r");
}
    d2aa:	bd80      	pop	{r7, pc}

0000d2ac <altitude_control_task>:

void altitude_control_task(void)
{
    d2ac:	b580      	push	{r7, lr}
    d2ae:	af00      	add	r7, sp, #0
	//vPrintString("S_18 navigation_task start! \n\r"); //SunnyBeike
	if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) {
    d2b0:	f24a 3344 	movw	r3, #41796	; 0xa344
    d2b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d2b8:	781b      	ldrb	r3, [r3, #0]
    d2ba:	2b02      	cmp	r3, #2
    d2bc:	d006      	beq.n	d2cc <altitude_control_task+0x20>
    d2be:	f24a 3344 	movw	r3, #41796	; 0xa344
    d2c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d2c6:	781b      	ldrb	r3, [r3, #0]
    d2c8:	2b03      	cmp	r3, #3
    d2ca:	d108      	bne.n	d2de <altitude_control_task+0x32>
		if (vertical_mode == VERTICAL_MODE_AUTO_ALT)
    d2cc:	f24a 3345 	movw	r3, #41797	; 0xa345
    d2d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d2d4:	781b      	ldrb	r3, [r3, #0]
    d2d6:	2b03      	cmp	r3, #3
    d2d8:	d101      	bne.n	d2de <altitude_control_task+0x32>
      			altitude_pid_run();
    d2da:	f003 fd55 	bl	10d88 <altitude_pid_run>
	}
	//vPrintString("S_18 navigation_task end! \n\r"); //SunnyBeike
}
    d2de:	bd80      	pop	{r7, pc}

0000d2e0 <climb_control_task>:
void climb_control_task(void)
{
    d2e0:	b580      	push	{r7, lr}
    d2e2:	af00      	add	r7, sp, #0
	//vPrintString("S_19 navigation_task start! \n\r"); //SunnyBeike
   if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) 
    d2e4:	f24a 3344 	movw	r3, #41796	; 0xa344
    d2e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d2ec:	781b      	ldrb	r3, [r3, #0]
    d2ee:	2b02      	cmp	r3, #2
    d2f0:	d006      	beq.n	d300 <climb_control_task+0x20>
    d2f2:	f24a 3344 	movw	r3, #41796	; 0xa344
    d2f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d2fa:	781b      	ldrb	r3, [r3, #0]
    d2fc:	2b03      	cmp	r3, #3
    d2fe:	d135      	bne.n	d36c <climb_control_task+0x8c>
   {
	if (vertical_mode >= VERTICAL_MODE_AUTO_CLIMB)
    d300:	f24a 3345 	movw	r3, #41797	; 0xa345
    d304:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d308:	781b      	ldrb	r3, [r3, #0]
    d30a:	2b01      	cmp	r3, #1
    d30c:	d901      	bls.n	d312 <climb_control_task+0x32>
        	climb_pid_run();
    d30e:	f003 fb6b 	bl	109e8 <climb_pid_run>
   	if (vertical_mode == VERTICAL_MODE_AUTO_GAZ)
    d312:	f24a 3345 	movw	r3, #41797	; 0xa345
    d316:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d31a:	781b      	ldrb	r3, [r3, #0]
    d31c:	2b01      	cmp	r3, #1
    d31e:	d10a      	bne.n	d336 <climb_control_task+0x56>
   		 desired_gaz = nav_desired_gaz;
    d320:	f24a 63e0 	movw	r3, #42720	; 0xa6e0
    d324:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d328:	881b      	ldrh	r3, [r3, #0]
    d32a:	b29a      	uxth	r2, r3
    d32c:	f24a 6394 	movw	r3, #42644	; 0xa694
    d330:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d334:	801a      	strh	r2, [r3, #0]
   	if (low_battery || (!estimator_flight_time && !launch))
    d336:	f24a 334d 	movw	r3, #41805	; 0xa34d
    d33a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d33e:	781b      	ldrb	r3, [r3, #0]
    d340:	2b00      	cmp	r3, #0
    d342:	d10d      	bne.n	d360 <climb_control_task+0x80>
    d344:	f64a 1344 	movw	r3, #43332	; 0xa944
    d348:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d34c:	881b      	ldrh	r3, [r3, #0]
    d34e:	2b00      	cmp	r3, #0
    d350:	d10c      	bne.n	d36c <climb_control_task+0x8c>
    d352:	f24a 3358 	movw	r3, #41816	; 0xa358
    d356:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d35a:	781b      	ldrb	r3, [r3, #0]
    d35c:	2b00      	cmp	r3, #0
    d35e:	d105      	bne.n	d36c <climb_control_task+0x8c>
   		 desired_gaz = 0.;
    d360:	f24a 6394 	movw	r3, #42644	; 0xa694
    d364:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d368:	2200      	movs	r2, #0
    d36a:	801a      	strh	r2, [r3, #0]
  }  
	//vPrintString("S_19 navigation_task end! \n\r"); //SunnyBeike
}
    d36c:	bd80      	pop	{r7, pc}
    d36e:	bf00      	nop

0000d370 <stabilisation_task>:
//#endif
}
*/

void stabilisation_task(void)
{
    d370:	b580      	push	{r7, lr}
    d372:	af00      	add	r7, sp, #0
	//vPrintString("S_6 stabilisation_task start! \n\r"); //SunnyBeike
    ir_update();
    d374:	f003 f926 	bl	105c4 <ir_update>
    estimator_update_state_infrared();
    d378:	f006 fbac 	bl	13ad4 <estimator_update_state_infrared>
    roll_pitch_pid_run(); // Set  desired_aileron & desired_elevator
    d37c:	f003 f990 	bl	106a0 <roll_pitch_pid_run>
    to_fbw.channels[RADIO_THROTTLE] = desired_gaz; // desired_gaz is set upon GPS message reception
    d380:	f24a 6394 	movw	r3, #42644	; 0xa694
    d384:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d388:	881a      	ldrh	r2, [r3, #0]
    d38a:	f24a 4380 	movw	r3, #42112	; 0xa480
    d38e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d392:	801a      	strh	r2, [r3, #0]
    to_fbw.channels[RADIO_ROLL] = desired_aileron;
    d394:	f24a 6396 	movw	r3, #42646	; 0xa696
    d398:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d39c:	881a      	ldrh	r2, [r3, #0]
    d39e:	f24a 4380 	movw	r3, #42112	; 0xa480
    d3a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d3a6:	805a      	strh	r2, [r3, #2]
#ifndef ANTON_T7
    to_fbw.channels[RADIO_PITCH] = desired_elevator;
    d3a8:	f24a 6398 	movw	r3, #42648	; 0xa698
    d3ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d3b0:	881a      	ldrh	r2, [r3, #0]
    d3b2:	f24a 4380 	movw	r3, #42112	; 0xa480
    d3b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d3ba:	809a      	strh	r2, [r3, #4]
#endif
    
    // Code for camera stabilization, FIXME put that elsewhere
    to_fbw.channels[RADIO_GAIN1] = TRIM_PPRZ(MAX_PPRZ/0.75*(-estimator_phi));
    d3bc:	f64a 1320 	movw	r3, #43296	; 0xa920
    d3c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d3c4:	681b      	ldr	r3, [r3, #0]
    d3c6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    d3ca:	4618      	mov	r0, r3
    d3cc:	f009 f810 	bl	163f0 <__aeabi_f2d>
    d3d0:	4602      	mov	r2, r0
    d3d2:	460b      	mov	r3, r1
    d3d4:	4610      	mov	r0, r2
    d3d6:	4619      	mov	r1, r3
    d3d8:	f04f 0200 	mov.w	r2, #0
    d3dc:	f04f 0300 	mov.w	r3, #0
    d3e0:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    d3e4:	f009 f858 	bl	16498 <__aeabi_dmul>
    d3e8:	4602      	mov	r2, r0
    d3ea:	460b      	mov	r3, r1
    d3ec:	4610      	mov	r0, r2
    d3ee:	4619      	mov	r1, r3
    d3f0:	f04f 0200 	mov.w	r2, #0
    d3f4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    d3f8:	f2cc 03c2 	movt	r3, #49346	; 0xc0c2
    d3fc:	f009 fabe 	bl	1697c <__aeabi_dcmplt>
    d400:	4603      	mov	r3, r0
    d402:	2b00      	cmp	r3, #0
    d404:	d002      	beq.n	d40c <stabilisation_task+0x9c>
    d406:	f64d 2280 	movw	r2, #55936	; 0xda80
    d40a:	e046      	b.n	d49a <stabilisation_task+0x12a>
    d40c:	f64a 1320 	movw	r3, #43296	; 0xa920
    d410:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d414:	681b      	ldr	r3, [r3, #0]
    d416:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    d41a:	4618      	mov	r0, r3
    d41c:	f008 ffe8 	bl	163f0 <__aeabi_f2d>
    d420:	4602      	mov	r2, r0
    d422:	460b      	mov	r3, r1
    d424:	4610      	mov	r0, r2
    d426:	4619      	mov	r1, r3
    d428:	f04f 0200 	mov.w	r2, #0
    d42c:	f04f 0300 	mov.w	r3, #0
    d430:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    d434:	f009 f830 	bl	16498 <__aeabi_dmul>
    d438:	4602      	mov	r2, r0
    d43a:	460b      	mov	r3, r1
    d43c:	4610      	mov	r0, r2
    d43e:	4619      	mov	r1, r3
    d440:	f04f 0200 	mov.w	r2, #0
    d444:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    d448:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
    d44c:	f009 fab4 	bl	169b8 <__aeabi_dcmpgt>
    d450:	4603      	mov	r3, r0
    d452:	2b00      	cmp	r3, #0
    d454:	d002      	beq.n	d45c <stabilisation_task+0xec>
    d456:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    d45a:	e01d      	b.n	d498 <stabilisation_task+0x128>
    d45c:	f64a 1320 	movw	r3, #43296	; 0xa920
    d460:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d464:	681b      	ldr	r3, [r3, #0]
    d466:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    d46a:	4618      	mov	r0, r3
    d46c:	f008 ffc0 	bl	163f0 <__aeabi_f2d>
    d470:	4602      	mov	r2, r0
    d472:	460b      	mov	r3, r1
    d474:	4610      	mov	r0, r2
    d476:	4619      	mov	r1, r3
    d478:	f04f 0200 	mov.w	r2, #0
    d47c:	f04f 0300 	mov.w	r3, #0
    d480:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    d484:	f009 f808 	bl	16498 <__aeabi_dmul>
    d488:	4602      	mov	r2, r0
    d48a:	460b      	mov	r3, r1
    d48c:	4610      	mov	r0, r2
    d48e:	4619      	mov	r1, r3
    d490:	f009 fa9c 	bl	169cc <__aeabi_d2iz>
    d494:	4603      	mov	r3, r0
    d496:	b29b      	uxth	r3, r3
    d498:	b29a      	uxth	r2, r3
    d49a:	f24a 4380 	movw	r3, #42112	; 0xa480
    d49e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4a2:	815a      	strh	r2, [r3, #10]
	//vPrintString("S_6 stabilisation_task end! \n\r"); //SunnyBeike
}
    d4a4:	bd80      	pop	{r7, pc}
    d4a6:	bf00      	nop

0000d4a8 <send_gps_pos>:
 * If \a estimator_flight_time is null and \a estimator_hspeed_mod is greater
 * than \a MIN_SPEED_FOR_TAKEOFF, set the \a estimator_flight_time to 1 and \a
 * launch to true (which is not set in non auto launch. Then call
 * \a DOWNLINK_SEND_TAKEOFF
 */
void send_gps_pos( void ) {
    d4a8:	b580      	push	{r7, lr}
    d4aa:	af00      	add	r7, sp, #0
  gps_msg_received = FALSE;
    d4ac:	f24a 43f5 	movw	r3, #42229	; 0xa4f5
    d4b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4b4:	2200      	movs	r2, #0
    d4b6:	701a      	strb	r2, [r3, #0]
  if (gps_pos_available){
    d4b8:	f24a 43f6 	movw	r3, #42230	; 0xa4f6
    d4bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4c0:	781b      	ldrb	r3, [r3, #0]
    d4c2:	2b00      	cmp	r3, #0
    d4c4:	f001 81af 	beq.w	e826 <send_gps_pos+0x137e>
     DOWNLINK_SEND_GPS(&gps_mode, &gps_utm_east, &gps_utm_north, &gps_fcourse, &gps_falt, &gps_fspeed,&gps_fclimb, &gps_ftow);
    d4c8:	f24a 3361 	movw	r3, #41825	; 0xa361
    d4cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4d0:	781a      	ldrb	r2, [r3, #0]
    d4d2:	f24a 3362 	movw	r3, #41826	; 0xa362
    d4d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4da:	781b      	ldrb	r3, [r3, #0]
    d4dc:	b2db      	uxtb	r3, r3
    d4de:	429a      	cmp	r2, r3
    d4e0:	d313      	bcc.n	d50a <send_gps_pos+0x62>
    d4e2:	f24a 3362 	movw	r3, #41826	; 0xa362
    d4e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4ea:	781b      	ldrb	r3, [r3, #0]
    d4ec:	b2db      	uxtb	r3, r3
    d4ee:	461a      	mov	r2, r3
    d4f0:	f24a 3361 	movw	r3, #41825	; 0xa361
    d4f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4f8:	781b      	ldrb	r3, [r3, #0]
    d4fa:	1ad3      	subs	r3, r2, r3
    d4fc:	33ff      	adds	r3, #255	; 0xff
    d4fe:	2b21      	cmp	r3, #33	; 0x21
    d500:	bfd4      	ite	le
    d502:	2300      	movle	r3, #0
    d504:	2301      	movgt	r3, #1
    d506:	b2db      	uxtb	r3, r3
    d508:	e011      	b.n	d52e <send_gps_pos+0x86>
    d50a:	f24a 3362 	movw	r3, #41826	; 0xa362
    d50e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d512:	781b      	ldrb	r3, [r3, #0]
    d514:	b2db      	uxtb	r3, r3
    d516:	461a      	mov	r2, r3
    d518:	f24a 3361 	movw	r3, #41825	; 0xa361
    d51c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d520:	781b      	ldrb	r3, [r3, #0]
    d522:	1ad3      	subs	r3, r2, r3
    d524:	2b21      	cmp	r3, #33	; 0x21
    d526:	bfd4      	ite	le
    d528:	2300      	movle	r3, #0
    d52a:	2301      	movgt	r3, #1
    d52c:	b2db      	uxtb	r3, r3
    d52e:	2b00      	cmp	r3, #0
    d530:	f001 816b 	beq.w	e80a <send_gps_pos+0x1362>
    d534:	f24a 3361 	movw	r3, #41825	; 0xa361
    d538:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d53c:	781b      	ldrb	r3, [r3, #0]
    d53e:	461a      	mov	r2, r3
    d540:	f24a 3364 	movw	r3, #41828	; 0xa364
    d544:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d548:	2105      	movs	r1, #5
    d54a:	5499      	strb	r1, [r3, r2]
    d54c:	f24a 3361 	movw	r3, #41825	; 0xa361
    d550:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d554:	781b      	ldrb	r3, [r3, #0]
    d556:	3301      	adds	r3, #1
    d558:	b2da      	uxtb	r2, r3
    d55a:	f24a 3361 	movw	r3, #41825	; 0xa361
    d55e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d562:	701a      	strb	r2, [r3, #0]
    d564:	f24a 3361 	movw	r3, #41825	; 0xa361
    d568:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d56c:	781b      	ldrb	r3, [r3, #0]
    d56e:	2bff      	cmp	r3, #255	; 0xff
    d570:	d105      	bne.n	d57e <send_gps_pos+0xd6>
    d572:	f24a 3361 	movw	r3, #41825	; 0xa361
    d576:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d57a:	2200      	movs	r2, #0
    d57c:	701a      	strb	r2, [r3, #0]
    d57e:	f24a 3361 	movw	r3, #41825	; 0xa361
    d582:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d586:	781b      	ldrb	r3, [r3, #0]
    d588:	461a      	mov	r2, r3
    d58a:	f24a 3364 	movw	r3, #41828	; 0xa364
    d58e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d592:	2108      	movs	r1, #8
    d594:	5499      	strb	r1, [r3, r2]
    d596:	f24a 3361 	movw	r3, #41825	; 0xa361
    d59a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d59e:	781b      	ldrb	r3, [r3, #0]
    d5a0:	3301      	adds	r3, #1
    d5a2:	b2da      	uxtb	r2, r3
    d5a4:	f24a 3361 	movw	r3, #41825	; 0xa361
    d5a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5ac:	701a      	strb	r2, [r3, #0]
    d5ae:	f24a 3361 	movw	r3, #41825	; 0xa361
    d5b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5b6:	781b      	ldrb	r3, [r3, #0]
    d5b8:	2bff      	cmp	r3, #255	; 0xff
    d5ba:	d105      	bne.n	d5c8 <send_gps_pos+0x120>
    d5bc:	f24a 3361 	movw	r3, #41825	; 0xa361
    d5c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5c4:	2200      	movs	r2, #0
    d5c6:	701a      	strb	r2, [r3, #0]
    d5c8:	f24a 4365 	movw	r3, #42085	; 0xa465
    d5cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5d0:	2208      	movs	r2, #8
    d5d2:	701a      	strb	r2, [r3, #0]
    d5d4:	f24a 4366 	movw	r3, #42086	; 0xa466
    d5d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5dc:	2208      	movs	r2, #8
    d5de:	701a      	strb	r2, [r3, #0]
    d5e0:	f24a 3361 	movw	r3, #41825	; 0xa361
    d5e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5e8:	781b      	ldrb	r3, [r3, #0]
    d5ea:	461a      	mov	r2, r3
    d5ec:	f24a 43f4 	movw	r3, #42228	; 0xa4f4
    d5f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5f4:	7819      	ldrb	r1, [r3, #0]
    d5f6:	f24a 3364 	movw	r3, #41828	; 0xa364
    d5fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5fe:	5499      	strb	r1, [r3, r2]
    d600:	f24a 4365 	movw	r3, #42085	; 0xa465
    d604:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d608:	781a      	ldrb	r2, [r3, #0]
    d60a:	f24a 43f4 	movw	r3, #42228	; 0xa4f4
    d60e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d612:	781b      	ldrb	r3, [r3, #0]
    d614:	4413      	add	r3, r2
    d616:	b2da      	uxtb	r2, r3
    d618:	f24a 4365 	movw	r3, #42085	; 0xa465
    d61c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d620:	701a      	strb	r2, [r3, #0]
    d622:	f24a 4366 	movw	r3, #42086	; 0xa466
    d626:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d62a:	781a      	ldrb	r2, [r3, #0]
    d62c:	f24a 4365 	movw	r3, #42085	; 0xa465
    d630:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d634:	781b      	ldrb	r3, [r3, #0]
    d636:	4413      	add	r3, r2
    d638:	b2da      	uxtb	r2, r3
    d63a:	f24a 4366 	movw	r3, #42086	; 0xa466
    d63e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d642:	701a      	strb	r2, [r3, #0]
    d644:	f24a 3361 	movw	r3, #41825	; 0xa361
    d648:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d64c:	781b      	ldrb	r3, [r3, #0]
    d64e:	3301      	adds	r3, #1
    d650:	b2da      	uxtb	r2, r3
    d652:	f24a 3361 	movw	r3, #41825	; 0xa361
    d656:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d65a:	701a      	strb	r2, [r3, #0]
    d65c:	f24a 3361 	movw	r3, #41825	; 0xa361
    d660:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d664:	781b      	ldrb	r3, [r3, #0]
    d666:	2bff      	cmp	r3, #255	; 0xff
    d668:	d105      	bne.n	d676 <send_gps_pos+0x1ce>
    d66a:	f24a 3361 	movw	r3, #41825	; 0xa361
    d66e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d672:	2200      	movs	r2, #0
    d674:	701a      	strb	r2, [r3, #0]
    d676:	f24a 3361 	movw	r3, #41825	; 0xa361
    d67a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d67e:	781b      	ldrb	r3, [r3, #0]
    d680:	461a      	mov	r2, r3
    d682:	f24a 43e4 	movw	r3, #42212	; 0xa4e4
    d686:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d68a:	7819      	ldrb	r1, [r3, #0]
    d68c:	f24a 3364 	movw	r3, #41828	; 0xa364
    d690:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d694:	5499      	strb	r1, [r3, r2]
    d696:	f24a 43e4 	movw	r3, #42212	; 0xa4e4
    d69a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d69e:	781a      	ldrb	r2, [r3, #0]
    d6a0:	f24a 4365 	movw	r3, #42085	; 0xa465
    d6a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6a8:	781b      	ldrb	r3, [r3, #0]
    d6aa:	4413      	add	r3, r2
    d6ac:	b2da      	uxtb	r2, r3
    d6ae:	f24a 4365 	movw	r3, #42085	; 0xa465
    d6b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6b6:	701a      	strb	r2, [r3, #0]
    d6b8:	f24a 4366 	movw	r3, #42086	; 0xa466
    d6bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6c0:	781a      	ldrb	r2, [r3, #0]
    d6c2:	f24a 4365 	movw	r3, #42085	; 0xa465
    d6c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6ca:	781b      	ldrb	r3, [r3, #0]
    d6cc:	4413      	add	r3, r2
    d6ce:	b2da      	uxtb	r2, r3
    d6d0:	f24a 4366 	movw	r3, #42086	; 0xa466
    d6d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6d8:	701a      	strb	r2, [r3, #0]
    d6da:	f24a 3361 	movw	r3, #41825	; 0xa361
    d6de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6e2:	781b      	ldrb	r3, [r3, #0]
    d6e4:	3301      	adds	r3, #1
    d6e6:	b2da      	uxtb	r2, r3
    d6e8:	f24a 3361 	movw	r3, #41825	; 0xa361
    d6ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6f0:	701a      	strb	r2, [r3, #0]
    d6f2:	f24a 3361 	movw	r3, #41825	; 0xa361
    d6f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6fa:	781b      	ldrb	r3, [r3, #0]
    d6fc:	2bff      	cmp	r3, #255	; 0xff
    d6fe:	d105      	bne.n	d70c <send_gps_pos+0x264>
    d700:	f24a 3361 	movw	r3, #41825	; 0xa361
    d704:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d708:	2200      	movs	r2, #0
    d70a:	701a      	strb	r2, [r3, #0]
    d70c:	f24a 3361 	movw	r3, #41825	; 0xa361
    d710:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d714:	781b      	ldrb	r3, [r3, #0]
    d716:	461a      	mov	r2, r3
    d718:	f24a 43e4 	movw	r3, #42212	; 0xa4e4
    d71c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d720:	7859      	ldrb	r1, [r3, #1]
    d722:	f24a 3364 	movw	r3, #41828	; 0xa364
    d726:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d72a:	5499      	strb	r1, [r3, r2]
    d72c:	4bd1      	ldr	r3, [pc, #836]	; (da74 <send_gps_pos+0x5cc>)
    d72e:	781a      	ldrb	r2, [r3, #0]
    d730:	f24a 4365 	movw	r3, #42085	; 0xa465
    d734:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d738:	781b      	ldrb	r3, [r3, #0]
    d73a:	4413      	add	r3, r2
    d73c:	b2da      	uxtb	r2, r3
    d73e:	f24a 4365 	movw	r3, #42085	; 0xa465
    d742:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d746:	701a      	strb	r2, [r3, #0]
    d748:	f24a 4366 	movw	r3, #42086	; 0xa466
    d74c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d750:	781a      	ldrb	r2, [r3, #0]
    d752:	f24a 4365 	movw	r3, #42085	; 0xa465
    d756:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d75a:	781b      	ldrb	r3, [r3, #0]
    d75c:	4413      	add	r3, r2
    d75e:	b2da      	uxtb	r2, r3
    d760:	f24a 4366 	movw	r3, #42086	; 0xa466
    d764:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d768:	701a      	strb	r2, [r3, #0]
    d76a:	f24a 3361 	movw	r3, #41825	; 0xa361
    d76e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d772:	781b      	ldrb	r3, [r3, #0]
    d774:	3301      	adds	r3, #1
    d776:	b2da      	uxtb	r2, r3
    d778:	f24a 3361 	movw	r3, #41825	; 0xa361
    d77c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d780:	701a      	strb	r2, [r3, #0]
    d782:	f24a 3361 	movw	r3, #41825	; 0xa361
    d786:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d78a:	781b      	ldrb	r3, [r3, #0]
    d78c:	2bff      	cmp	r3, #255	; 0xff
    d78e:	d105      	bne.n	d79c <send_gps_pos+0x2f4>
    d790:	f24a 3361 	movw	r3, #41825	; 0xa361
    d794:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d798:	2200      	movs	r2, #0
    d79a:	701a      	strb	r2, [r3, #0]
    d79c:	f24a 3361 	movw	r3, #41825	; 0xa361
    d7a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7a4:	781b      	ldrb	r3, [r3, #0]
    d7a6:	461a      	mov	r2, r3
    d7a8:	f24a 43e4 	movw	r3, #42212	; 0xa4e4
    d7ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7b0:	7899      	ldrb	r1, [r3, #2]
    d7b2:	f24a 3364 	movw	r3, #41828	; 0xa364
    d7b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7ba:	5499      	strb	r1, [r3, r2]
    d7bc:	4bae      	ldr	r3, [pc, #696]	; (da78 <send_gps_pos+0x5d0>)
    d7be:	781a      	ldrb	r2, [r3, #0]
    d7c0:	f24a 4365 	movw	r3, #42085	; 0xa465
    d7c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7c8:	781b      	ldrb	r3, [r3, #0]
    d7ca:	4413      	add	r3, r2
    d7cc:	b2da      	uxtb	r2, r3
    d7ce:	f24a 4365 	movw	r3, #42085	; 0xa465
    d7d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7d6:	701a      	strb	r2, [r3, #0]
    d7d8:	f24a 4366 	movw	r3, #42086	; 0xa466
    d7dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7e0:	781a      	ldrb	r2, [r3, #0]
    d7e2:	f24a 4365 	movw	r3, #42085	; 0xa465
    d7e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7ea:	781b      	ldrb	r3, [r3, #0]
    d7ec:	4413      	add	r3, r2
    d7ee:	b2da      	uxtb	r2, r3
    d7f0:	f24a 4366 	movw	r3, #42086	; 0xa466
    d7f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7f8:	701a      	strb	r2, [r3, #0]
    d7fa:	f24a 3361 	movw	r3, #41825	; 0xa361
    d7fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d802:	781b      	ldrb	r3, [r3, #0]
    d804:	3301      	adds	r3, #1
    d806:	b2da      	uxtb	r2, r3
    d808:	f24a 3361 	movw	r3, #41825	; 0xa361
    d80c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d810:	701a      	strb	r2, [r3, #0]
    d812:	f24a 3361 	movw	r3, #41825	; 0xa361
    d816:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d81a:	781b      	ldrb	r3, [r3, #0]
    d81c:	2bff      	cmp	r3, #255	; 0xff
    d81e:	d105      	bne.n	d82c <send_gps_pos+0x384>
    d820:	f24a 3361 	movw	r3, #41825	; 0xa361
    d824:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d828:	2200      	movs	r2, #0
    d82a:	701a      	strb	r2, [r3, #0]
    d82c:	f24a 3361 	movw	r3, #41825	; 0xa361
    d830:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d834:	781b      	ldrb	r3, [r3, #0]
    d836:	461a      	mov	r2, r3
    d838:	f24a 43e4 	movw	r3, #42212	; 0xa4e4
    d83c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d840:	78d9      	ldrb	r1, [r3, #3]
    d842:	f24a 3364 	movw	r3, #41828	; 0xa364
    d846:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d84a:	5499      	strb	r1, [r3, r2]
    d84c:	4b8b      	ldr	r3, [pc, #556]	; (da7c <send_gps_pos+0x5d4>)
    d84e:	781a      	ldrb	r2, [r3, #0]
    d850:	f24a 4365 	movw	r3, #42085	; 0xa465
    d854:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d858:	781b      	ldrb	r3, [r3, #0]
    d85a:	4413      	add	r3, r2
    d85c:	b2da      	uxtb	r2, r3
    d85e:	f24a 4365 	movw	r3, #42085	; 0xa465
    d862:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d866:	701a      	strb	r2, [r3, #0]
    d868:	f24a 4366 	movw	r3, #42086	; 0xa466
    d86c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d870:	781a      	ldrb	r2, [r3, #0]
    d872:	f24a 4365 	movw	r3, #42085	; 0xa465
    d876:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d87a:	781b      	ldrb	r3, [r3, #0]
    d87c:	4413      	add	r3, r2
    d87e:	b2da      	uxtb	r2, r3
    d880:	f24a 4366 	movw	r3, #42086	; 0xa466
    d884:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d888:	701a      	strb	r2, [r3, #0]
    d88a:	f24a 3361 	movw	r3, #41825	; 0xa361
    d88e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d892:	781b      	ldrb	r3, [r3, #0]
    d894:	3301      	adds	r3, #1
    d896:	b2da      	uxtb	r2, r3
    d898:	f24a 3361 	movw	r3, #41825	; 0xa361
    d89c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8a0:	701a      	strb	r2, [r3, #0]
    d8a2:	f24a 3361 	movw	r3, #41825	; 0xa361
    d8a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8aa:	781b      	ldrb	r3, [r3, #0]
    d8ac:	2bff      	cmp	r3, #255	; 0xff
    d8ae:	d105      	bne.n	d8bc <send_gps_pos+0x414>
    d8b0:	f24a 3361 	movw	r3, #41825	; 0xa361
    d8b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8b8:	2200      	movs	r2, #0
    d8ba:	701a      	strb	r2, [r3, #0]
    d8bc:	f24a 3361 	movw	r3, #41825	; 0xa361
    d8c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8c4:	781b      	ldrb	r3, [r3, #0]
    d8c6:	461a      	mov	r2, r3
    d8c8:	f24a 43e8 	movw	r3, #42216	; 0xa4e8
    d8cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8d0:	7819      	ldrb	r1, [r3, #0]
    d8d2:	f24a 3364 	movw	r3, #41828	; 0xa364
    d8d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8da:	5499      	strb	r1, [r3, r2]
    d8dc:	f24a 43e8 	movw	r3, #42216	; 0xa4e8
    d8e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8e4:	781a      	ldrb	r2, [r3, #0]
    d8e6:	f24a 4365 	movw	r3, #42085	; 0xa465
    d8ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8ee:	781b      	ldrb	r3, [r3, #0]
    d8f0:	4413      	add	r3, r2
    d8f2:	b2da      	uxtb	r2, r3
    d8f4:	f24a 4365 	movw	r3, #42085	; 0xa465
    d8f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8fc:	701a      	strb	r2, [r3, #0]
    d8fe:	f24a 4366 	movw	r3, #42086	; 0xa466
    d902:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d906:	781a      	ldrb	r2, [r3, #0]
    d908:	f24a 4365 	movw	r3, #42085	; 0xa465
    d90c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d910:	781b      	ldrb	r3, [r3, #0]
    d912:	4413      	add	r3, r2
    d914:	b2da      	uxtb	r2, r3
    d916:	f24a 4366 	movw	r3, #42086	; 0xa466
    d91a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d91e:	701a      	strb	r2, [r3, #0]
    d920:	f24a 3361 	movw	r3, #41825	; 0xa361
    d924:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d928:	781b      	ldrb	r3, [r3, #0]
    d92a:	3301      	adds	r3, #1
    d92c:	b2da      	uxtb	r2, r3
    d92e:	f24a 3361 	movw	r3, #41825	; 0xa361
    d932:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d936:	701a      	strb	r2, [r3, #0]
    d938:	f24a 3361 	movw	r3, #41825	; 0xa361
    d93c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d940:	781b      	ldrb	r3, [r3, #0]
    d942:	2bff      	cmp	r3, #255	; 0xff
    d944:	d105      	bne.n	d952 <send_gps_pos+0x4aa>
    d946:	f24a 3361 	movw	r3, #41825	; 0xa361
    d94a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d94e:	2200      	movs	r2, #0
    d950:	701a      	strb	r2, [r3, #0]
    d952:	f24a 3361 	movw	r3, #41825	; 0xa361
    d956:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d95a:	781b      	ldrb	r3, [r3, #0]
    d95c:	461a      	mov	r2, r3
    d95e:	f24a 43e8 	movw	r3, #42216	; 0xa4e8
    d962:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d966:	7859      	ldrb	r1, [r3, #1]
    d968:	f24a 3364 	movw	r3, #41828	; 0xa364
    d96c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d970:	5499      	strb	r1, [r3, r2]
    d972:	4b43      	ldr	r3, [pc, #268]	; (da80 <send_gps_pos+0x5d8>)
    d974:	781a      	ldrb	r2, [r3, #0]
    d976:	f24a 4365 	movw	r3, #42085	; 0xa465
    d97a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d97e:	781b      	ldrb	r3, [r3, #0]
    d980:	4413      	add	r3, r2
    d982:	b2da      	uxtb	r2, r3
    d984:	f24a 4365 	movw	r3, #42085	; 0xa465
    d988:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d98c:	701a      	strb	r2, [r3, #0]
    d98e:	f24a 4366 	movw	r3, #42086	; 0xa466
    d992:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d996:	781a      	ldrb	r2, [r3, #0]
    d998:	f24a 4365 	movw	r3, #42085	; 0xa465
    d99c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9a0:	781b      	ldrb	r3, [r3, #0]
    d9a2:	4413      	add	r3, r2
    d9a4:	b2da      	uxtb	r2, r3
    d9a6:	f24a 4366 	movw	r3, #42086	; 0xa466
    d9aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9ae:	701a      	strb	r2, [r3, #0]
    d9b0:	f24a 3361 	movw	r3, #41825	; 0xa361
    d9b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9b8:	781b      	ldrb	r3, [r3, #0]
    d9ba:	3301      	adds	r3, #1
    d9bc:	b2da      	uxtb	r2, r3
    d9be:	f24a 3361 	movw	r3, #41825	; 0xa361
    d9c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9c6:	701a      	strb	r2, [r3, #0]
    d9c8:	f24a 3361 	movw	r3, #41825	; 0xa361
    d9cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9d0:	781b      	ldrb	r3, [r3, #0]
    d9d2:	2bff      	cmp	r3, #255	; 0xff
    d9d4:	d105      	bne.n	d9e2 <send_gps_pos+0x53a>
    d9d6:	f24a 3361 	movw	r3, #41825	; 0xa361
    d9da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9de:	2200      	movs	r2, #0
    d9e0:	701a      	strb	r2, [r3, #0]
    d9e2:	f24a 3361 	movw	r3, #41825	; 0xa361
    d9e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9ea:	781b      	ldrb	r3, [r3, #0]
    d9ec:	461a      	mov	r2, r3
    d9ee:	f24a 43e8 	movw	r3, #42216	; 0xa4e8
    d9f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9f6:	7899      	ldrb	r1, [r3, #2]
    d9f8:	f24a 3364 	movw	r3, #41828	; 0xa364
    d9fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da00:	5499      	strb	r1, [r3, r2]
    da02:	4b20      	ldr	r3, [pc, #128]	; (da84 <send_gps_pos+0x5dc>)
    da04:	781a      	ldrb	r2, [r3, #0]
    da06:	f24a 4365 	movw	r3, #42085	; 0xa465
    da0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da0e:	781b      	ldrb	r3, [r3, #0]
    da10:	4413      	add	r3, r2
    da12:	b2da      	uxtb	r2, r3
    da14:	f24a 4365 	movw	r3, #42085	; 0xa465
    da18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da1c:	701a      	strb	r2, [r3, #0]
    da1e:	f24a 4366 	movw	r3, #42086	; 0xa466
    da22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da26:	781a      	ldrb	r2, [r3, #0]
    da28:	f24a 4365 	movw	r3, #42085	; 0xa465
    da2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da30:	781b      	ldrb	r3, [r3, #0]
    da32:	4413      	add	r3, r2
    da34:	b2da      	uxtb	r2, r3
    da36:	f24a 4366 	movw	r3, #42086	; 0xa466
    da3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da3e:	701a      	strb	r2, [r3, #0]
    da40:	f24a 3361 	movw	r3, #41825	; 0xa361
    da44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da48:	781b      	ldrb	r3, [r3, #0]
    da4a:	3301      	adds	r3, #1
    da4c:	b2da      	uxtb	r2, r3
    da4e:	f24a 3361 	movw	r3, #41825	; 0xa361
    da52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da56:	701a      	strb	r2, [r3, #0]
    da58:	f24a 3361 	movw	r3, #41825	; 0xa361
    da5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da60:	781b      	ldrb	r3, [r3, #0]
    da62:	2bff      	cmp	r3, #255	; 0xff
    da64:	d110      	bne.n	da88 <send_gps_pos+0x5e0>
    da66:	f24a 3361 	movw	r3, #41825	; 0xa361
    da6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da6e:	2200      	movs	r2, #0
    da70:	701a      	strb	r2, [r3, #0]
    da72:	e009      	b.n	da88 <send_gps_pos+0x5e0>
    da74:	2000a4e5 	.word	0x2000a4e5
    da78:	2000a4e6 	.word	0x2000a4e6
    da7c:	2000a4e7 	.word	0x2000a4e7
    da80:	2000a4e9 	.word	0x2000a4e9
    da84:	2000a4ea 	.word	0x2000a4ea
    da88:	f24a 3361 	movw	r3, #41825	; 0xa361
    da8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da90:	781b      	ldrb	r3, [r3, #0]
    da92:	461a      	mov	r2, r3
    da94:	f24a 43e8 	movw	r3, #42216	; 0xa4e8
    da98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da9c:	78d9      	ldrb	r1, [r3, #3]
    da9e:	f24a 3364 	movw	r3, #41828	; 0xa364
    daa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    daa6:	5499      	strb	r1, [r3, r2]
    daa8:	4bd3      	ldr	r3, [pc, #844]	; (ddf8 <send_gps_pos+0x950>)
    daaa:	781a      	ldrb	r2, [r3, #0]
    daac:	f24a 4365 	movw	r3, #42085	; 0xa465
    dab0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dab4:	781b      	ldrb	r3, [r3, #0]
    dab6:	4413      	add	r3, r2
    dab8:	b2da      	uxtb	r2, r3
    daba:	f24a 4365 	movw	r3, #42085	; 0xa465
    dabe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dac2:	701a      	strb	r2, [r3, #0]
    dac4:	f24a 4366 	movw	r3, #42086	; 0xa466
    dac8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dacc:	781a      	ldrb	r2, [r3, #0]
    dace:	f24a 4365 	movw	r3, #42085	; 0xa465
    dad2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dad6:	781b      	ldrb	r3, [r3, #0]
    dad8:	4413      	add	r3, r2
    dada:	b2da      	uxtb	r2, r3
    dadc:	f24a 4366 	movw	r3, #42086	; 0xa466
    dae0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dae4:	701a      	strb	r2, [r3, #0]
    dae6:	f24a 3361 	movw	r3, #41825	; 0xa361
    daea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    daee:	781b      	ldrb	r3, [r3, #0]
    daf0:	3301      	adds	r3, #1
    daf2:	b2da      	uxtb	r2, r3
    daf4:	f24a 3361 	movw	r3, #41825	; 0xa361
    daf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dafc:	701a      	strb	r2, [r3, #0]
    dafe:	f24a 3361 	movw	r3, #41825	; 0xa361
    db02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db06:	781b      	ldrb	r3, [r3, #0]
    db08:	2bff      	cmp	r3, #255	; 0xff
    db0a:	d105      	bne.n	db18 <send_gps_pos+0x670>
    db0c:	f24a 3361 	movw	r3, #41825	; 0xa361
    db10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db14:	2200      	movs	r2, #0
    db16:	701a      	strb	r2, [r3, #0]
    db18:	f24a 3361 	movw	r3, #41825	; 0xa361
    db1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db20:	781b      	ldrb	r3, [r3, #0]
    db22:	461a      	mov	r2, r3
    db24:	f24a 43e0 	movw	r3, #42208	; 0xa4e0
    db28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db2c:	7819      	ldrb	r1, [r3, #0]
    db2e:	f24a 3364 	movw	r3, #41828	; 0xa364
    db32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db36:	5499      	strb	r1, [r3, r2]
    db38:	f24a 43e0 	movw	r3, #42208	; 0xa4e0
    db3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db40:	781a      	ldrb	r2, [r3, #0]
    db42:	f24a 4365 	movw	r3, #42085	; 0xa465
    db46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db4a:	781b      	ldrb	r3, [r3, #0]
    db4c:	4413      	add	r3, r2
    db4e:	b2da      	uxtb	r2, r3
    db50:	f24a 4365 	movw	r3, #42085	; 0xa465
    db54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db58:	701a      	strb	r2, [r3, #0]
    db5a:	f24a 4366 	movw	r3, #42086	; 0xa466
    db5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db62:	781a      	ldrb	r2, [r3, #0]
    db64:	f24a 4365 	movw	r3, #42085	; 0xa465
    db68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db6c:	781b      	ldrb	r3, [r3, #0]
    db6e:	4413      	add	r3, r2
    db70:	b2da      	uxtb	r2, r3
    db72:	f24a 4366 	movw	r3, #42086	; 0xa466
    db76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db7a:	701a      	strb	r2, [r3, #0]
    db7c:	f24a 3361 	movw	r3, #41825	; 0xa361
    db80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db84:	781b      	ldrb	r3, [r3, #0]
    db86:	3301      	adds	r3, #1
    db88:	b2da      	uxtb	r2, r3
    db8a:	f24a 3361 	movw	r3, #41825	; 0xa361
    db8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db92:	701a      	strb	r2, [r3, #0]
    db94:	f24a 3361 	movw	r3, #41825	; 0xa361
    db98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db9c:	781b      	ldrb	r3, [r3, #0]
    db9e:	2bff      	cmp	r3, #255	; 0xff
    dba0:	d105      	bne.n	dbae <send_gps_pos+0x706>
    dba2:	f24a 3361 	movw	r3, #41825	; 0xa361
    dba6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbaa:	2200      	movs	r2, #0
    dbac:	701a      	strb	r2, [r3, #0]
    dbae:	f24a 3361 	movw	r3, #41825	; 0xa361
    dbb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbb6:	781b      	ldrb	r3, [r3, #0]
    dbb8:	461a      	mov	r2, r3
    dbba:	f24a 43e0 	movw	r3, #42208	; 0xa4e0
    dbbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbc2:	7859      	ldrb	r1, [r3, #1]
    dbc4:	f24a 3364 	movw	r3, #41828	; 0xa364
    dbc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbcc:	5499      	strb	r1, [r3, r2]
    dbce:	4b8b      	ldr	r3, [pc, #556]	; (ddfc <send_gps_pos+0x954>)
    dbd0:	781a      	ldrb	r2, [r3, #0]
    dbd2:	f24a 4365 	movw	r3, #42085	; 0xa465
    dbd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbda:	781b      	ldrb	r3, [r3, #0]
    dbdc:	4413      	add	r3, r2
    dbde:	b2da      	uxtb	r2, r3
    dbe0:	f24a 4365 	movw	r3, #42085	; 0xa465
    dbe4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbe8:	701a      	strb	r2, [r3, #0]
    dbea:	f24a 4366 	movw	r3, #42086	; 0xa466
    dbee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbf2:	781a      	ldrb	r2, [r3, #0]
    dbf4:	f24a 4365 	movw	r3, #42085	; 0xa465
    dbf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbfc:	781b      	ldrb	r3, [r3, #0]
    dbfe:	4413      	add	r3, r2
    dc00:	b2da      	uxtb	r2, r3
    dc02:	f24a 4366 	movw	r3, #42086	; 0xa466
    dc06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc0a:	701a      	strb	r2, [r3, #0]
    dc0c:	f24a 3361 	movw	r3, #41825	; 0xa361
    dc10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc14:	781b      	ldrb	r3, [r3, #0]
    dc16:	3301      	adds	r3, #1
    dc18:	b2da      	uxtb	r2, r3
    dc1a:	f24a 3361 	movw	r3, #41825	; 0xa361
    dc1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc22:	701a      	strb	r2, [r3, #0]
    dc24:	f24a 3361 	movw	r3, #41825	; 0xa361
    dc28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc2c:	781b      	ldrb	r3, [r3, #0]
    dc2e:	2bff      	cmp	r3, #255	; 0xff
    dc30:	d105      	bne.n	dc3e <send_gps_pos+0x796>
    dc32:	f24a 3361 	movw	r3, #41825	; 0xa361
    dc36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc3a:	2200      	movs	r2, #0
    dc3c:	701a      	strb	r2, [r3, #0]
    dc3e:	f24a 3361 	movw	r3, #41825	; 0xa361
    dc42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc46:	781b      	ldrb	r3, [r3, #0]
    dc48:	461a      	mov	r2, r3
    dc4a:	f24a 43e0 	movw	r3, #42208	; 0xa4e0
    dc4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc52:	7899      	ldrb	r1, [r3, #2]
    dc54:	f24a 3364 	movw	r3, #41828	; 0xa364
    dc58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc5c:	5499      	strb	r1, [r3, r2]
    dc5e:	4b68      	ldr	r3, [pc, #416]	; (de00 <send_gps_pos+0x958>)
    dc60:	781a      	ldrb	r2, [r3, #0]
    dc62:	f24a 4365 	movw	r3, #42085	; 0xa465
    dc66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc6a:	781b      	ldrb	r3, [r3, #0]
    dc6c:	4413      	add	r3, r2
    dc6e:	b2da      	uxtb	r2, r3
    dc70:	f24a 4365 	movw	r3, #42085	; 0xa465
    dc74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc78:	701a      	strb	r2, [r3, #0]
    dc7a:	f24a 4366 	movw	r3, #42086	; 0xa466
    dc7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc82:	781a      	ldrb	r2, [r3, #0]
    dc84:	f24a 4365 	movw	r3, #42085	; 0xa465
    dc88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc8c:	781b      	ldrb	r3, [r3, #0]
    dc8e:	4413      	add	r3, r2
    dc90:	b2da      	uxtb	r2, r3
    dc92:	f24a 4366 	movw	r3, #42086	; 0xa466
    dc96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc9a:	701a      	strb	r2, [r3, #0]
    dc9c:	f24a 3361 	movw	r3, #41825	; 0xa361
    dca0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dca4:	781b      	ldrb	r3, [r3, #0]
    dca6:	3301      	adds	r3, #1
    dca8:	b2da      	uxtb	r2, r3
    dcaa:	f24a 3361 	movw	r3, #41825	; 0xa361
    dcae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcb2:	701a      	strb	r2, [r3, #0]
    dcb4:	f24a 3361 	movw	r3, #41825	; 0xa361
    dcb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcbc:	781b      	ldrb	r3, [r3, #0]
    dcbe:	2bff      	cmp	r3, #255	; 0xff
    dcc0:	d105      	bne.n	dcce <send_gps_pos+0x826>
    dcc2:	f24a 3361 	movw	r3, #41825	; 0xa361
    dcc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcca:	2200      	movs	r2, #0
    dccc:	701a      	strb	r2, [r3, #0]
    dcce:	f24a 3361 	movw	r3, #41825	; 0xa361
    dcd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcd6:	781b      	ldrb	r3, [r3, #0]
    dcd8:	461a      	mov	r2, r3
    dcda:	f24a 43e0 	movw	r3, #42208	; 0xa4e0
    dcde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dce2:	78d9      	ldrb	r1, [r3, #3]
    dce4:	f24a 3364 	movw	r3, #41828	; 0xa364
    dce8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcec:	5499      	strb	r1, [r3, r2]
    dcee:	4b45      	ldr	r3, [pc, #276]	; (de04 <send_gps_pos+0x95c>)
    dcf0:	781a      	ldrb	r2, [r3, #0]
    dcf2:	f24a 4365 	movw	r3, #42085	; 0xa465
    dcf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcfa:	781b      	ldrb	r3, [r3, #0]
    dcfc:	4413      	add	r3, r2
    dcfe:	b2da      	uxtb	r2, r3
    dd00:	f24a 4365 	movw	r3, #42085	; 0xa465
    dd04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd08:	701a      	strb	r2, [r3, #0]
    dd0a:	f24a 4366 	movw	r3, #42086	; 0xa466
    dd0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd12:	781a      	ldrb	r2, [r3, #0]
    dd14:	f24a 4365 	movw	r3, #42085	; 0xa465
    dd18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd1c:	781b      	ldrb	r3, [r3, #0]
    dd1e:	4413      	add	r3, r2
    dd20:	b2da      	uxtb	r2, r3
    dd22:	f24a 4366 	movw	r3, #42086	; 0xa466
    dd26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd2a:	701a      	strb	r2, [r3, #0]
    dd2c:	f24a 3361 	movw	r3, #41825	; 0xa361
    dd30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd34:	781b      	ldrb	r3, [r3, #0]
    dd36:	3301      	adds	r3, #1
    dd38:	b2da      	uxtb	r2, r3
    dd3a:	f24a 3361 	movw	r3, #41825	; 0xa361
    dd3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd42:	701a      	strb	r2, [r3, #0]
    dd44:	f24a 3361 	movw	r3, #41825	; 0xa361
    dd48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd4c:	781b      	ldrb	r3, [r3, #0]
    dd4e:	2bff      	cmp	r3, #255	; 0xff
    dd50:	d105      	bne.n	dd5e <send_gps_pos+0x8b6>
    dd52:	f24a 3361 	movw	r3, #41825	; 0xa361
    dd56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd5a:	2200      	movs	r2, #0
    dd5c:	701a      	strb	r2, [r3, #0]
    dd5e:	f24a 3361 	movw	r3, #41825	; 0xa361
    dd62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd66:	781b      	ldrb	r3, [r3, #0]
    dd68:	461a      	mov	r2, r3
    dd6a:	f24a 43d4 	movw	r3, #42196	; 0xa4d4
    dd6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd72:	7819      	ldrb	r1, [r3, #0]
    dd74:	f24a 3364 	movw	r3, #41828	; 0xa364
    dd78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd7c:	5499      	strb	r1, [r3, r2]
    dd7e:	f24a 43d4 	movw	r3, #42196	; 0xa4d4
    dd82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd86:	781a      	ldrb	r2, [r3, #0]
    dd88:	f24a 4365 	movw	r3, #42085	; 0xa465
    dd8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd90:	781b      	ldrb	r3, [r3, #0]
    dd92:	4413      	add	r3, r2
    dd94:	b2da      	uxtb	r2, r3
    dd96:	f24a 4365 	movw	r3, #42085	; 0xa465
    dd9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd9e:	701a      	strb	r2, [r3, #0]
    dda0:	f24a 4366 	movw	r3, #42086	; 0xa466
    dda4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dda8:	781a      	ldrb	r2, [r3, #0]
    ddaa:	f24a 4365 	movw	r3, #42085	; 0xa465
    ddae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddb2:	781b      	ldrb	r3, [r3, #0]
    ddb4:	4413      	add	r3, r2
    ddb6:	b2da      	uxtb	r2, r3
    ddb8:	f24a 4366 	movw	r3, #42086	; 0xa466
    ddbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddc0:	701a      	strb	r2, [r3, #0]
    ddc2:	f24a 3361 	movw	r3, #41825	; 0xa361
    ddc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddca:	781b      	ldrb	r3, [r3, #0]
    ddcc:	3301      	adds	r3, #1
    ddce:	b2da      	uxtb	r2, r3
    ddd0:	f24a 3361 	movw	r3, #41825	; 0xa361
    ddd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddd8:	701a      	strb	r2, [r3, #0]
    ddda:	f24a 3361 	movw	r3, #41825	; 0xa361
    ddde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dde2:	781b      	ldrb	r3, [r3, #0]
    dde4:	2bff      	cmp	r3, #255	; 0xff
    dde6:	d10f      	bne.n	de08 <send_gps_pos+0x960>
    dde8:	f24a 3361 	movw	r3, #41825	; 0xa361
    ddec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddf0:	2200      	movs	r2, #0
    ddf2:	701a      	strb	r2, [r3, #0]
    ddf4:	e008      	b.n	de08 <send_gps_pos+0x960>
    ddf6:	bf00      	nop
    ddf8:	2000a4eb 	.word	0x2000a4eb
    ddfc:	2000a4e1 	.word	0x2000a4e1
    de00:	2000a4e2 	.word	0x2000a4e2
    de04:	2000a4e3 	.word	0x2000a4e3
    de08:	f24a 3361 	movw	r3, #41825	; 0xa361
    de0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de10:	781b      	ldrb	r3, [r3, #0]
    de12:	461a      	mov	r2, r3
    de14:	f24a 43d4 	movw	r3, #42196	; 0xa4d4
    de18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de1c:	7859      	ldrb	r1, [r3, #1]
    de1e:	f24a 3364 	movw	r3, #41828	; 0xa364
    de22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de26:	5499      	strb	r1, [r3, r2]
    de28:	4bd1      	ldr	r3, [pc, #836]	; (e170 <send_gps_pos+0xcc8>)
    de2a:	781a      	ldrb	r2, [r3, #0]
    de2c:	f24a 4365 	movw	r3, #42085	; 0xa465
    de30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de34:	781b      	ldrb	r3, [r3, #0]
    de36:	4413      	add	r3, r2
    de38:	b2da      	uxtb	r2, r3
    de3a:	f24a 4365 	movw	r3, #42085	; 0xa465
    de3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de42:	701a      	strb	r2, [r3, #0]
    de44:	f24a 4366 	movw	r3, #42086	; 0xa466
    de48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de4c:	781a      	ldrb	r2, [r3, #0]
    de4e:	f24a 4365 	movw	r3, #42085	; 0xa465
    de52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de56:	781b      	ldrb	r3, [r3, #0]
    de58:	4413      	add	r3, r2
    de5a:	b2da      	uxtb	r2, r3
    de5c:	f24a 4366 	movw	r3, #42086	; 0xa466
    de60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de64:	701a      	strb	r2, [r3, #0]
    de66:	f24a 3361 	movw	r3, #41825	; 0xa361
    de6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de6e:	781b      	ldrb	r3, [r3, #0]
    de70:	3301      	adds	r3, #1
    de72:	b2da      	uxtb	r2, r3
    de74:	f24a 3361 	movw	r3, #41825	; 0xa361
    de78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de7c:	701a      	strb	r2, [r3, #0]
    de7e:	f24a 3361 	movw	r3, #41825	; 0xa361
    de82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de86:	781b      	ldrb	r3, [r3, #0]
    de88:	2bff      	cmp	r3, #255	; 0xff
    de8a:	d105      	bne.n	de98 <send_gps_pos+0x9f0>
    de8c:	f24a 3361 	movw	r3, #41825	; 0xa361
    de90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de94:	2200      	movs	r2, #0
    de96:	701a      	strb	r2, [r3, #0]
    de98:	f24a 3361 	movw	r3, #41825	; 0xa361
    de9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dea0:	781b      	ldrb	r3, [r3, #0]
    dea2:	461a      	mov	r2, r3
    dea4:	f24a 43d4 	movw	r3, #42196	; 0xa4d4
    dea8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    deac:	7899      	ldrb	r1, [r3, #2]
    deae:	f24a 3364 	movw	r3, #41828	; 0xa364
    deb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    deb6:	5499      	strb	r1, [r3, r2]
    deb8:	4bae      	ldr	r3, [pc, #696]	; (e174 <send_gps_pos+0xccc>)
    deba:	781a      	ldrb	r2, [r3, #0]
    debc:	f24a 4365 	movw	r3, #42085	; 0xa465
    dec0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dec4:	781b      	ldrb	r3, [r3, #0]
    dec6:	4413      	add	r3, r2
    dec8:	b2da      	uxtb	r2, r3
    deca:	f24a 4365 	movw	r3, #42085	; 0xa465
    dece:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ded2:	701a      	strb	r2, [r3, #0]
    ded4:	f24a 4366 	movw	r3, #42086	; 0xa466
    ded8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dedc:	781a      	ldrb	r2, [r3, #0]
    dede:	f24a 4365 	movw	r3, #42085	; 0xa465
    dee2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dee6:	781b      	ldrb	r3, [r3, #0]
    dee8:	4413      	add	r3, r2
    deea:	b2da      	uxtb	r2, r3
    deec:	f24a 4366 	movw	r3, #42086	; 0xa466
    def0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    def4:	701a      	strb	r2, [r3, #0]
    def6:	f24a 3361 	movw	r3, #41825	; 0xa361
    defa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    defe:	781b      	ldrb	r3, [r3, #0]
    df00:	3301      	adds	r3, #1
    df02:	b2da      	uxtb	r2, r3
    df04:	f24a 3361 	movw	r3, #41825	; 0xa361
    df08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df0c:	701a      	strb	r2, [r3, #0]
    df0e:	f24a 3361 	movw	r3, #41825	; 0xa361
    df12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df16:	781b      	ldrb	r3, [r3, #0]
    df18:	2bff      	cmp	r3, #255	; 0xff
    df1a:	d105      	bne.n	df28 <send_gps_pos+0xa80>
    df1c:	f24a 3361 	movw	r3, #41825	; 0xa361
    df20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df24:	2200      	movs	r2, #0
    df26:	701a      	strb	r2, [r3, #0]
    df28:	f24a 3361 	movw	r3, #41825	; 0xa361
    df2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df30:	781b      	ldrb	r3, [r3, #0]
    df32:	461a      	mov	r2, r3
    df34:	f24a 43d4 	movw	r3, #42196	; 0xa4d4
    df38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df3c:	78d9      	ldrb	r1, [r3, #3]
    df3e:	f24a 3364 	movw	r3, #41828	; 0xa364
    df42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df46:	5499      	strb	r1, [r3, r2]
    df48:	4b8b      	ldr	r3, [pc, #556]	; (e178 <send_gps_pos+0xcd0>)
    df4a:	781a      	ldrb	r2, [r3, #0]
    df4c:	f24a 4365 	movw	r3, #42085	; 0xa465
    df50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df54:	781b      	ldrb	r3, [r3, #0]
    df56:	4413      	add	r3, r2
    df58:	b2da      	uxtb	r2, r3
    df5a:	f24a 4365 	movw	r3, #42085	; 0xa465
    df5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df62:	701a      	strb	r2, [r3, #0]
    df64:	f24a 4366 	movw	r3, #42086	; 0xa466
    df68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df6c:	781a      	ldrb	r2, [r3, #0]
    df6e:	f24a 4365 	movw	r3, #42085	; 0xa465
    df72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df76:	781b      	ldrb	r3, [r3, #0]
    df78:	4413      	add	r3, r2
    df7a:	b2da      	uxtb	r2, r3
    df7c:	f24a 4366 	movw	r3, #42086	; 0xa466
    df80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df84:	701a      	strb	r2, [r3, #0]
    df86:	f24a 3361 	movw	r3, #41825	; 0xa361
    df8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df8e:	781b      	ldrb	r3, [r3, #0]
    df90:	3301      	adds	r3, #1
    df92:	b2da      	uxtb	r2, r3
    df94:	f24a 3361 	movw	r3, #41825	; 0xa361
    df98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df9c:	701a      	strb	r2, [r3, #0]
    df9e:	f24a 3361 	movw	r3, #41825	; 0xa361
    dfa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfa6:	781b      	ldrb	r3, [r3, #0]
    dfa8:	2bff      	cmp	r3, #255	; 0xff
    dfaa:	d105      	bne.n	dfb8 <send_gps_pos+0xb10>
    dfac:	f24a 3361 	movw	r3, #41825	; 0xa361
    dfb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfb4:	2200      	movs	r2, #0
    dfb6:	701a      	strb	r2, [r3, #0]
    dfb8:	f24a 3361 	movw	r3, #41825	; 0xa361
    dfbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfc0:	781b      	ldrb	r3, [r3, #0]
    dfc2:	461a      	mov	r2, r3
    dfc4:	f24a 43d8 	movw	r3, #42200	; 0xa4d8
    dfc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfcc:	7819      	ldrb	r1, [r3, #0]
    dfce:	f24a 3364 	movw	r3, #41828	; 0xa364
    dfd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfd6:	5499      	strb	r1, [r3, r2]
    dfd8:	f24a 43d8 	movw	r3, #42200	; 0xa4d8
    dfdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfe0:	781a      	ldrb	r2, [r3, #0]
    dfe2:	f24a 4365 	movw	r3, #42085	; 0xa465
    dfe6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfea:	781b      	ldrb	r3, [r3, #0]
    dfec:	4413      	add	r3, r2
    dfee:	b2da      	uxtb	r2, r3
    dff0:	f24a 4365 	movw	r3, #42085	; 0xa465
    dff4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dff8:	701a      	strb	r2, [r3, #0]
    dffa:	f24a 4366 	movw	r3, #42086	; 0xa466
    dffe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e002:	781a      	ldrb	r2, [r3, #0]
    e004:	f24a 4365 	movw	r3, #42085	; 0xa465
    e008:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e00c:	781b      	ldrb	r3, [r3, #0]
    e00e:	4413      	add	r3, r2
    e010:	b2da      	uxtb	r2, r3
    e012:	f24a 4366 	movw	r3, #42086	; 0xa466
    e016:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e01a:	701a      	strb	r2, [r3, #0]
    e01c:	f24a 3361 	movw	r3, #41825	; 0xa361
    e020:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e024:	781b      	ldrb	r3, [r3, #0]
    e026:	3301      	adds	r3, #1
    e028:	b2da      	uxtb	r2, r3
    e02a:	f24a 3361 	movw	r3, #41825	; 0xa361
    e02e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e032:	701a      	strb	r2, [r3, #0]
    e034:	f24a 3361 	movw	r3, #41825	; 0xa361
    e038:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e03c:	781b      	ldrb	r3, [r3, #0]
    e03e:	2bff      	cmp	r3, #255	; 0xff
    e040:	d105      	bne.n	e04e <send_gps_pos+0xba6>
    e042:	f24a 3361 	movw	r3, #41825	; 0xa361
    e046:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e04a:	2200      	movs	r2, #0
    e04c:	701a      	strb	r2, [r3, #0]
    e04e:	f24a 3361 	movw	r3, #41825	; 0xa361
    e052:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e056:	781b      	ldrb	r3, [r3, #0]
    e058:	461a      	mov	r2, r3
    e05a:	f24a 43d8 	movw	r3, #42200	; 0xa4d8
    e05e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e062:	7859      	ldrb	r1, [r3, #1]
    e064:	f24a 3364 	movw	r3, #41828	; 0xa364
    e068:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e06c:	5499      	strb	r1, [r3, r2]
    e06e:	4b43      	ldr	r3, [pc, #268]	; (e17c <send_gps_pos+0xcd4>)
    e070:	781a      	ldrb	r2, [r3, #0]
    e072:	f24a 4365 	movw	r3, #42085	; 0xa465
    e076:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e07a:	781b      	ldrb	r3, [r3, #0]
    e07c:	4413      	add	r3, r2
    e07e:	b2da      	uxtb	r2, r3
    e080:	f24a 4365 	movw	r3, #42085	; 0xa465
    e084:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e088:	701a      	strb	r2, [r3, #0]
    e08a:	f24a 4366 	movw	r3, #42086	; 0xa466
    e08e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e092:	781a      	ldrb	r2, [r3, #0]
    e094:	f24a 4365 	movw	r3, #42085	; 0xa465
    e098:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e09c:	781b      	ldrb	r3, [r3, #0]
    e09e:	4413      	add	r3, r2
    e0a0:	b2da      	uxtb	r2, r3
    e0a2:	f24a 4366 	movw	r3, #42086	; 0xa466
    e0a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0aa:	701a      	strb	r2, [r3, #0]
    e0ac:	f24a 3361 	movw	r3, #41825	; 0xa361
    e0b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0b4:	781b      	ldrb	r3, [r3, #0]
    e0b6:	3301      	adds	r3, #1
    e0b8:	b2da      	uxtb	r2, r3
    e0ba:	f24a 3361 	movw	r3, #41825	; 0xa361
    e0be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0c2:	701a      	strb	r2, [r3, #0]
    e0c4:	f24a 3361 	movw	r3, #41825	; 0xa361
    e0c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0cc:	781b      	ldrb	r3, [r3, #0]
    e0ce:	2bff      	cmp	r3, #255	; 0xff
    e0d0:	d105      	bne.n	e0de <send_gps_pos+0xc36>
    e0d2:	f24a 3361 	movw	r3, #41825	; 0xa361
    e0d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0da:	2200      	movs	r2, #0
    e0dc:	701a      	strb	r2, [r3, #0]
    e0de:	f24a 3361 	movw	r3, #41825	; 0xa361
    e0e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0e6:	781b      	ldrb	r3, [r3, #0]
    e0e8:	461a      	mov	r2, r3
    e0ea:	f24a 43d8 	movw	r3, #42200	; 0xa4d8
    e0ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0f2:	7899      	ldrb	r1, [r3, #2]
    e0f4:	f24a 3364 	movw	r3, #41828	; 0xa364
    e0f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0fc:	5499      	strb	r1, [r3, r2]
    e0fe:	4b20      	ldr	r3, [pc, #128]	; (e180 <send_gps_pos+0xcd8>)
    e100:	781a      	ldrb	r2, [r3, #0]
    e102:	f24a 4365 	movw	r3, #42085	; 0xa465
    e106:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e10a:	781b      	ldrb	r3, [r3, #0]
    e10c:	4413      	add	r3, r2
    e10e:	b2da      	uxtb	r2, r3
    e110:	f24a 4365 	movw	r3, #42085	; 0xa465
    e114:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e118:	701a      	strb	r2, [r3, #0]
    e11a:	f24a 4366 	movw	r3, #42086	; 0xa466
    e11e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e122:	781a      	ldrb	r2, [r3, #0]
    e124:	f24a 4365 	movw	r3, #42085	; 0xa465
    e128:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e12c:	781b      	ldrb	r3, [r3, #0]
    e12e:	4413      	add	r3, r2
    e130:	b2da      	uxtb	r2, r3
    e132:	f24a 4366 	movw	r3, #42086	; 0xa466
    e136:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e13a:	701a      	strb	r2, [r3, #0]
    e13c:	f24a 3361 	movw	r3, #41825	; 0xa361
    e140:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e144:	781b      	ldrb	r3, [r3, #0]
    e146:	3301      	adds	r3, #1
    e148:	b2da      	uxtb	r2, r3
    e14a:	f24a 3361 	movw	r3, #41825	; 0xa361
    e14e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e152:	701a      	strb	r2, [r3, #0]
    e154:	f24a 3361 	movw	r3, #41825	; 0xa361
    e158:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e15c:	781b      	ldrb	r3, [r3, #0]
    e15e:	2bff      	cmp	r3, #255	; 0xff
    e160:	d110      	bne.n	e184 <send_gps_pos+0xcdc>
    e162:	f24a 3361 	movw	r3, #41825	; 0xa361
    e166:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e16a:	2200      	movs	r2, #0
    e16c:	701a      	strb	r2, [r3, #0]
    e16e:	e009      	b.n	e184 <send_gps_pos+0xcdc>
    e170:	2000a4d5 	.word	0x2000a4d5
    e174:	2000a4d6 	.word	0x2000a4d6
    e178:	2000a4d7 	.word	0x2000a4d7
    e17c:	2000a4d9 	.word	0x2000a4d9
    e180:	2000a4da 	.word	0x2000a4da
    e184:	f24a 3361 	movw	r3, #41825	; 0xa361
    e188:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e18c:	781b      	ldrb	r3, [r3, #0]
    e18e:	461a      	mov	r2, r3
    e190:	f24a 43d8 	movw	r3, #42200	; 0xa4d8
    e194:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e198:	78d9      	ldrb	r1, [r3, #3]
    e19a:	f24a 3364 	movw	r3, #41828	; 0xa364
    e19e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1a2:	5499      	strb	r1, [r3, r2]
    e1a4:	4bd3      	ldr	r3, [pc, #844]	; (e4f4 <send_gps_pos+0x104c>)
    e1a6:	781a      	ldrb	r2, [r3, #0]
    e1a8:	f24a 4365 	movw	r3, #42085	; 0xa465
    e1ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1b0:	781b      	ldrb	r3, [r3, #0]
    e1b2:	4413      	add	r3, r2
    e1b4:	b2da      	uxtb	r2, r3
    e1b6:	f24a 4365 	movw	r3, #42085	; 0xa465
    e1ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1be:	701a      	strb	r2, [r3, #0]
    e1c0:	f24a 4366 	movw	r3, #42086	; 0xa466
    e1c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1c8:	781a      	ldrb	r2, [r3, #0]
    e1ca:	f24a 4365 	movw	r3, #42085	; 0xa465
    e1ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1d2:	781b      	ldrb	r3, [r3, #0]
    e1d4:	4413      	add	r3, r2
    e1d6:	b2da      	uxtb	r2, r3
    e1d8:	f24a 4366 	movw	r3, #42086	; 0xa466
    e1dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1e0:	701a      	strb	r2, [r3, #0]
    e1e2:	f24a 3361 	movw	r3, #41825	; 0xa361
    e1e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1ea:	781b      	ldrb	r3, [r3, #0]
    e1ec:	3301      	adds	r3, #1
    e1ee:	b2da      	uxtb	r2, r3
    e1f0:	f24a 3361 	movw	r3, #41825	; 0xa361
    e1f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1f8:	701a      	strb	r2, [r3, #0]
    e1fa:	f24a 3361 	movw	r3, #41825	; 0xa361
    e1fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e202:	781b      	ldrb	r3, [r3, #0]
    e204:	2bff      	cmp	r3, #255	; 0xff
    e206:	d105      	bne.n	e214 <send_gps_pos+0xd6c>
    e208:	f24a 3361 	movw	r3, #41825	; 0xa361
    e20c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e210:	2200      	movs	r2, #0
    e212:	701a      	strb	r2, [r3, #0]
    e214:	f24a 3361 	movw	r3, #41825	; 0xa361
    e218:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e21c:	781b      	ldrb	r3, [r3, #0]
    e21e:	461a      	mov	r2, r3
    e220:	f24a 43dc 	movw	r3, #42204	; 0xa4dc
    e224:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e228:	7819      	ldrb	r1, [r3, #0]
    e22a:	f24a 3364 	movw	r3, #41828	; 0xa364
    e22e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e232:	5499      	strb	r1, [r3, r2]
    e234:	f24a 43dc 	movw	r3, #42204	; 0xa4dc
    e238:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e23c:	781a      	ldrb	r2, [r3, #0]
    e23e:	f24a 4365 	movw	r3, #42085	; 0xa465
    e242:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e246:	781b      	ldrb	r3, [r3, #0]
    e248:	4413      	add	r3, r2
    e24a:	b2da      	uxtb	r2, r3
    e24c:	f24a 4365 	movw	r3, #42085	; 0xa465
    e250:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e254:	701a      	strb	r2, [r3, #0]
    e256:	f24a 4366 	movw	r3, #42086	; 0xa466
    e25a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e25e:	781a      	ldrb	r2, [r3, #0]
    e260:	f24a 4365 	movw	r3, #42085	; 0xa465
    e264:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e268:	781b      	ldrb	r3, [r3, #0]
    e26a:	4413      	add	r3, r2
    e26c:	b2da      	uxtb	r2, r3
    e26e:	f24a 4366 	movw	r3, #42086	; 0xa466
    e272:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e276:	701a      	strb	r2, [r3, #0]
    e278:	f24a 3361 	movw	r3, #41825	; 0xa361
    e27c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e280:	781b      	ldrb	r3, [r3, #0]
    e282:	3301      	adds	r3, #1
    e284:	b2da      	uxtb	r2, r3
    e286:	f24a 3361 	movw	r3, #41825	; 0xa361
    e28a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e28e:	701a      	strb	r2, [r3, #0]
    e290:	f24a 3361 	movw	r3, #41825	; 0xa361
    e294:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e298:	781b      	ldrb	r3, [r3, #0]
    e29a:	2bff      	cmp	r3, #255	; 0xff
    e29c:	d105      	bne.n	e2aa <send_gps_pos+0xe02>
    e29e:	f24a 3361 	movw	r3, #41825	; 0xa361
    e2a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2a6:	2200      	movs	r2, #0
    e2a8:	701a      	strb	r2, [r3, #0]
    e2aa:	f24a 3361 	movw	r3, #41825	; 0xa361
    e2ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2b2:	781b      	ldrb	r3, [r3, #0]
    e2b4:	461a      	mov	r2, r3
    e2b6:	f24a 43dc 	movw	r3, #42204	; 0xa4dc
    e2ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2be:	7859      	ldrb	r1, [r3, #1]
    e2c0:	f24a 3364 	movw	r3, #41828	; 0xa364
    e2c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2c8:	5499      	strb	r1, [r3, r2]
    e2ca:	4b8b      	ldr	r3, [pc, #556]	; (e4f8 <send_gps_pos+0x1050>)
    e2cc:	781a      	ldrb	r2, [r3, #0]
    e2ce:	f24a 4365 	movw	r3, #42085	; 0xa465
    e2d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2d6:	781b      	ldrb	r3, [r3, #0]
    e2d8:	4413      	add	r3, r2
    e2da:	b2da      	uxtb	r2, r3
    e2dc:	f24a 4365 	movw	r3, #42085	; 0xa465
    e2e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2e4:	701a      	strb	r2, [r3, #0]
    e2e6:	f24a 4366 	movw	r3, #42086	; 0xa466
    e2ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2ee:	781a      	ldrb	r2, [r3, #0]
    e2f0:	f24a 4365 	movw	r3, #42085	; 0xa465
    e2f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2f8:	781b      	ldrb	r3, [r3, #0]
    e2fa:	4413      	add	r3, r2
    e2fc:	b2da      	uxtb	r2, r3
    e2fe:	f24a 4366 	movw	r3, #42086	; 0xa466
    e302:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e306:	701a      	strb	r2, [r3, #0]
    e308:	f24a 3361 	movw	r3, #41825	; 0xa361
    e30c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e310:	781b      	ldrb	r3, [r3, #0]
    e312:	3301      	adds	r3, #1
    e314:	b2da      	uxtb	r2, r3
    e316:	f24a 3361 	movw	r3, #41825	; 0xa361
    e31a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e31e:	701a      	strb	r2, [r3, #0]
    e320:	f24a 3361 	movw	r3, #41825	; 0xa361
    e324:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e328:	781b      	ldrb	r3, [r3, #0]
    e32a:	2bff      	cmp	r3, #255	; 0xff
    e32c:	d105      	bne.n	e33a <send_gps_pos+0xe92>
    e32e:	f24a 3361 	movw	r3, #41825	; 0xa361
    e332:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e336:	2200      	movs	r2, #0
    e338:	701a      	strb	r2, [r3, #0]
    e33a:	f24a 3361 	movw	r3, #41825	; 0xa361
    e33e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e342:	781b      	ldrb	r3, [r3, #0]
    e344:	461a      	mov	r2, r3
    e346:	f24a 43dc 	movw	r3, #42204	; 0xa4dc
    e34a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e34e:	7899      	ldrb	r1, [r3, #2]
    e350:	f24a 3364 	movw	r3, #41828	; 0xa364
    e354:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e358:	5499      	strb	r1, [r3, r2]
    e35a:	4b68      	ldr	r3, [pc, #416]	; (e4fc <send_gps_pos+0x1054>)
    e35c:	781a      	ldrb	r2, [r3, #0]
    e35e:	f24a 4365 	movw	r3, #42085	; 0xa465
    e362:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e366:	781b      	ldrb	r3, [r3, #0]
    e368:	4413      	add	r3, r2
    e36a:	b2da      	uxtb	r2, r3
    e36c:	f24a 4365 	movw	r3, #42085	; 0xa465
    e370:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e374:	701a      	strb	r2, [r3, #0]
    e376:	f24a 4366 	movw	r3, #42086	; 0xa466
    e37a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e37e:	781a      	ldrb	r2, [r3, #0]
    e380:	f24a 4365 	movw	r3, #42085	; 0xa465
    e384:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e388:	781b      	ldrb	r3, [r3, #0]
    e38a:	4413      	add	r3, r2
    e38c:	b2da      	uxtb	r2, r3
    e38e:	f24a 4366 	movw	r3, #42086	; 0xa466
    e392:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e396:	701a      	strb	r2, [r3, #0]
    e398:	f24a 3361 	movw	r3, #41825	; 0xa361
    e39c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3a0:	781b      	ldrb	r3, [r3, #0]
    e3a2:	3301      	adds	r3, #1
    e3a4:	b2da      	uxtb	r2, r3
    e3a6:	f24a 3361 	movw	r3, #41825	; 0xa361
    e3aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3ae:	701a      	strb	r2, [r3, #0]
    e3b0:	f24a 3361 	movw	r3, #41825	; 0xa361
    e3b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3b8:	781b      	ldrb	r3, [r3, #0]
    e3ba:	2bff      	cmp	r3, #255	; 0xff
    e3bc:	d105      	bne.n	e3ca <send_gps_pos+0xf22>
    e3be:	f24a 3361 	movw	r3, #41825	; 0xa361
    e3c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3c6:	2200      	movs	r2, #0
    e3c8:	701a      	strb	r2, [r3, #0]
    e3ca:	f24a 3361 	movw	r3, #41825	; 0xa361
    e3ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3d2:	781b      	ldrb	r3, [r3, #0]
    e3d4:	461a      	mov	r2, r3
    e3d6:	f24a 43dc 	movw	r3, #42204	; 0xa4dc
    e3da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3de:	78d9      	ldrb	r1, [r3, #3]
    e3e0:	f24a 3364 	movw	r3, #41828	; 0xa364
    e3e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3e8:	5499      	strb	r1, [r3, r2]
    e3ea:	4b45      	ldr	r3, [pc, #276]	; (e500 <send_gps_pos+0x1058>)
    e3ec:	781a      	ldrb	r2, [r3, #0]
    e3ee:	f24a 4365 	movw	r3, #42085	; 0xa465
    e3f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3f6:	781b      	ldrb	r3, [r3, #0]
    e3f8:	4413      	add	r3, r2
    e3fa:	b2da      	uxtb	r2, r3
    e3fc:	f24a 4365 	movw	r3, #42085	; 0xa465
    e400:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e404:	701a      	strb	r2, [r3, #0]
    e406:	f24a 4366 	movw	r3, #42086	; 0xa466
    e40a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e40e:	781a      	ldrb	r2, [r3, #0]
    e410:	f24a 4365 	movw	r3, #42085	; 0xa465
    e414:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e418:	781b      	ldrb	r3, [r3, #0]
    e41a:	4413      	add	r3, r2
    e41c:	b2da      	uxtb	r2, r3
    e41e:	f24a 4366 	movw	r3, #42086	; 0xa466
    e422:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e426:	701a      	strb	r2, [r3, #0]
    e428:	f24a 3361 	movw	r3, #41825	; 0xa361
    e42c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e430:	781b      	ldrb	r3, [r3, #0]
    e432:	3301      	adds	r3, #1
    e434:	b2da      	uxtb	r2, r3
    e436:	f24a 3361 	movw	r3, #41825	; 0xa361
    e43a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e43e:	701a      	strb	r2, [r3, #0]
    e440:	f24a 3361 	movw	r3, #41825	; 0xa361
    e444:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e448:	781b      	ldrb	r3, [r3, #0]
    e44a:	2bff      	cmp	r3, #255	; 0xff
    e44c:	d105      	bne.n	e45a <send_gps_pos+0xfb2>
    e44e:	f24a 3361 	movw	r3, #41825	; 0xa361
    e452:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e456:	2200      	movs	r2, #0
    e458:	701a      	strb	r2, [r3, #0]
    e45a:	f24a 3361 	movw	r3, #41825	; 0xa361
    e45e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e462:	781b      	ldrb	r3, [r3, #0]
    e464:	461a      	mov	r2, r3
    e466:	f24a 43d0 	movw	r3, #42192	; 0xa4d0
    e46a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e46e:	7819      	ldrb	r1, [r3, #0]
    e470:	f24a 3364 	movw	r3, #41828	; 0xa364
    e474:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e478:	5499      	strb	r1, [r3, r2]
    e47a:	f24a 43d0 	movw	r3, #42192	; 0xa4d0
    e47e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e482:	781a      	ldrb	r2, [r3, #0]
    e484:	f24a 4365 	movw	r3, #42085	; 0xa465
    e488:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e48c:	781b      	ldrb	r3, [r3, #0]
    e48e:	4413      	add	r3, r2
    e490:	b2da      	uxtb	r2, r3
    e492:	f24a 4365 	movw	r3, #42085	; 0xa465
    e496:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e49a:	701a      	strb	r2, [r3, #0]
    e49c:	f24a 4366 	movw	r3, #42086	; 0xa466
    e4a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4a4:	781a      	ldrb	r2, [r3, #0]
    e4a6:	f24a 4365 	movw	r3, #42085	; 0xa465
    e4aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4ae:	781b      	ldrb	r3, [r3, #0]
    e4b0:	4413      	add	r3, r2
    e4b2:	b2da      	uxtb	r2, r3
    e4b4:	f24a 4366 	movw	r3, #42086	; 0xa466
    e4b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4bc:	701a      	strb	r2, [r3, #0]
    e4be:	f24a 3361 	movw	r3, #41825	; 0xa361
    e4c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4c6:	781b      	ldrb	r3, [r3, #0]
    e4c8:	3301      	adds	r3, #1
    e4ca:	b2da      	uxtb	r2, r3
    e4cc:	f24a 3361 	movw	r3, #41825	; 0xa361
    e4d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4d4:	701a      	strb	r2, [r3, #0]
    e4d6:	f24a 3361 	movw	r3, #41825	; 0xa361
    e4da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4de:	781b      	ldrb	r3, [r3, #0]
    e4e0:	2bff      	cmp	r3, #255	; 0xff
    e4e2:	d10f      	bne.n	e504 <send_gps_pos+0x105c>
    e4e4:	f24a 3361 	movw	r3, #41825	; 0xa361
    e4e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4ec:	2200      	movs	r2, #0
    e4ee:	701a      	strb	r2, [r3, #0]
    e4f0:	e008      	b.n	e504 <send_gps_pos+0x105c>
    e4f2:	bf00      	nop
    e4f4:	2000a4db 	.word	0x2000a4db
    e4f8:	2000a4dd 	.word	0x2000a4dd
    e4fc:	2000a4de 	.word	0x2000a4de
    e500:	2000a4df 	.word	0x2000a4df
    e504:	f24a 3361 	movw	r3, #41825	; 0xa361
    e508:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e50c:	781b      	ldrb	r3, [r3, #0]
    e50e:	461a      	mov	r2, r3
    e510:	f24a 43d0 	movw	r3, #42192	; 0xa4d0
    e514:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e518:	7859      	ldrb	r1, [r3, #1]
    e51a:	f24a 3364 	movw	r3, #41828	; 0xa364
    e51e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e522:	5499      	strb	r1, [r3, r2]
    e524:	4bc0      	ldr	r3, [pc, #768]	; (e828 <send_gps_pos+0x1380>)
    e526:	781a      	ldrb	r2, [r3, #0]
    e528:	f24a 4365 	movw	r3, #42085	; 0xa465
    e52c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e530:	781b      	ldrb	r3, [r3, #0]
    e532:	4413      	add	r3, r2
    e534:	b2da      	uxtb	r2, r3
    e536:	f24a 4365 	movw	r3, #42085	; 0xa465
    e53a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e53e:	701a      	strb	r2, [r3, #0]
    e540:	f24a 4366 	movw	r3, #42086	; 0xa466
    e544:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e548:	781a      	ldrb	r2, [r3, #0]
    e54a:	f24a 4365 	movw	r3, #42085	; 0xa465
    e54e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e552:	781b      	ldrb	r3, [r3, #0]
    e554:	4413      	add	r3, r2
    e556:	b2da      	uxtb	r2, r3
    e558:	f24a 4366 	movw	r3, #42086	; 0xa466
    e55c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e560:	701a      	strb	r2, [r3, #0]
    e562:	f24a 3361 	movw	r3, #41825	; 0xa361
    e566:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e56a:	781b      	ldrb	r3, [r3, #0]
    e56c:	3301      	adds	r3, #1
    e56e:	b2da      	uxtb	r2, r3
    e570:	f24a 3361 	movw	r3, #41825	; 0xa361
    e574:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e578:	701a      	strb	r2, [r3, #0]
    e57a:	f24a 3361 	movw	r3, #41825	; 0xa361
    e57e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e582:	781b      	ldrb	r3, [r3, #0]
    e584:	2bff      	cmp	r3, #255	; 0xff
    e586:	d105      	bne.n	e594 <send_gps_pos+0x10ec>
    e588:	f24a 3361 	movw	r3, #41825	; 0xa361
    e58c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e590:	2200      	movs	r2, #0
    e592:	701a      	strb	r2, [r3, #0]
    e594:	f24a 3361 	movw	r3, #41825	; 0xa361
    e598:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e59c:	781b      	ldrb	r3, [r3, #0]
    e59e:	461a      	mov	r2, r3
    e5a0:	f24a 43d0 	movw	r3, #42192	; 0xa4d0
    e5a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5a8:	7899      	ldrb	r1, [r3, #2]
    e5aa:	f24a 3364 	movw	r3, #41828	; 0xa364
    e5ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5b2:	5499      	strb	r1, [r3, r2]
    e5b4:	4b9d      	ldr	r3, [pc, #628]	; (e82c <send_gps_pos+0x1384>)
    e5b6:	781a      	ldrb	r2, [r3, #0]
    e5b8:	f24a 4365 	movw	r3, #42085	; 0xa465
    e5bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5c0:	781b      	ldrb	r3, [r3, #0]
    e5c2:	4413      	add	r3, r2
    e5c4:	b2da      	uxtb	r2, r3
    e5c6:	f24a 4365 	movw	r3, #42085	; 0xa465
    e5ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5ce:	701a      	strb	r2, [r3, #0]
    e5d0:	f24a 4366 	movw	r3, #42086	; 0xa466
    e5d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5d8:	781a      	ldrb	r2, [r3, #0]
    e5da:	f24a 4365 	movw	r3, #42085	; 0xa465
    e5de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5e2:	781b      	ldrb	r3, [r3, #0]
    e5e4:	4413      	add	r3, r2
    e5e6:	b2da      	uxtb	r2, r3
    e5e8:	f24a 4366 	movw	r3, #42086	; 0xa466
    e5ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5f0:	701a      	strb	r2, [r3, #0]
    e5f2:	f24a 3361 	movw	r3, #41825	; 0xa361
    e5f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5fa:	781b      	ldrb	r3, [r3, #0]
    e5fc:	3301      	adds	r3, #1
    e5fe:	b2da      	uxtb	r2, r3
    e600:	f24a 3361 	movw	r3, #41825	; 0xa361
    e604:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e608:	701a      	strb	r2, [r3, #0]
    e60a:	f24a 3361 	movw	r3, #41825	; 0xa361
    e60e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e612:	781b      	ldrb	r3, [r3, #0]
    e614:	2bff      	cmp	r3, #255	; 0xff
    e616:	d105      	bne.n	e624 <send_gps_pos+0x117c>
    e618:	f24a 3361 	movw	r3, #41825	; 0xa361
    e61c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e620:	2200      	movs	r2, #0
    e622:	701a      	strb	r2, [r3, #0]
    e624:	f24a 3361 	movw	r3, #41825	; 0xa361
    e628:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e62c:	781b      	ldrb	r3, [r3, #0]
    e62e:	461a      	mov	r2, r3
    e630:	f24a 43d0 	movw	r3, #42192	; 0xa4d0
    e634:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e638:	78d9      	ldrb	r1, [r3, #3]
    e63a:	f24a 3364 	movw	r3, #41828	; 0xa364
    e63e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e642:	5499      	strb	r1, [r3, r2]
    e644:	4b7a      	ldr	r3, [pc, #488]	; (e830 <send_gps_pos+0x1388>)
    e646:	781a      	ldrb	r2, [r3, #0]
    e648:	f24a 4365 	movw	r3, #42085	; 0xa465
    e64c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e650:	781b      	ldrb	r3, [r3, #0]
    e652:	4413      	add	r3, r2
    e654:	b2da      	uxtb	r2, r3
    e656:	f24a 4365 	movw	r3, #42085	; 0xa465
    e65a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e65e:	701a      	strb	r2, [r3, #0]
    e660:	f24a 4366 	movw	r3, #42086	; 0xa466
    e664:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e668:	781a      	ldrb	r2, [r3, #0]
    e66a:	f24a 4365 	movw	r3, #42085	; 0xa465
    e66e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e672:	781b      	ldrb	r3, [r3, #0]
    e674:	4413      	add	r3, r2
    e676:	b2da      	uxtb	r2, r3
    e678:	f24a 4366 	movw	r3, #42086	; 0xa466
    e67c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e680:	701a      	strb	r2, [r3, #0]
    e682:	f24a 3361 	movw	r3, #41825	; 0xa361
    e686:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e68a:	781b      	ldrb	r3, [r3, #0]
    e68c:	3301      	adds	r3, #1
    e68e:	b2da      	uxtb	r2, r3
    e690:	f24a 3361 	movw	r3, #41825	; 0xa361
    e694:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e698:	701a      	strb	r2, [r3, #0]
    e69a:	f24a 3361 	movw	r3, #41825	; 0xa361
    e69e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e6a2:	781b      	ldrb	r3, [r3, #0]
    e6a4:	2bff      	cmp	r3, #255	; 0xff
    e6a6:	d105      	bne.n	e6b4 <send_gps_pos+0x120c>
    e6a8:	f24a 3361 	movw	r3, #41825	; 0xa361
    e6ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e6b0:	2200      	movs	r2, #0
    e6b2:	701a      	strb	r2, [r3, #0]
    e6b4:	f24a 3361 	movw	r3, #41825	; 0xa361
    e6b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e6bc:	781b      	ldrb	r3, [r3, #0]
    e6be:	461a      	mov	r2, r3
    e6c0:	f24a 4365 	movw	r3, #42085	; 0xa465
    e6c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e6c8:	7819      	ldrb	r1, [r3, #0]
    e6ca:	f24a 3364 	movw	r3, #41828	; 0xa364
    e6ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e6d2:	5499      	strb	r1, [r3, r2]
    e6d4:	f24a 3361 	movw	r3, #41825	; 0xa361
    e6d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e6dc:	781b      	ldrb	r3, [r3, #0]
    e6de:	3301      	adds	r3, #1
    e6e0:	b2da      	uxtb	r2, r3
    e6e2:	f24a 3361 	movw	r3, #41825	; 0xa361
    e6e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e6ea:	701a      	strb	r2, [r3, #0]
    e6ec:	f24a 3361 	movw	r3, #41825	; 0xa361
    e6f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e6f4:	781b      	ldrb	r3, [r3, #0]
    e6f6:	2bff      	cmp	r3, #255	; 0xff
    e6f8:	d105      	bne.n	e706 <send_gps_pos+0x125e>
    e6fa:	f24a 3361 	movw	r3, #41825	; 0xa361
    e6fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e702:	2200      	movs	r2, #0
    e704:	701a      	strb	r2, [r3, #0]
    e706:	f24a 3361 	movw	r3, #41825	; 0xa361
    e70a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e70e:	781b      	ldrb	r3, [r3, #0]
    e710:	461a      	mov	r2, r3
    e712:	f24a 4366 	movw	r3, #42086	; 0xa466
    e716:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e71a:	7819      	ldrb	r1, [r3, #0]
    e71c:	f24a 3364 	movw	r3, #41828	; 0xa364
    e720:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e724:	5499      	strb	r1, [r3, r2]
    e726:	f24a 3361 	movw	r3, #41825	; 0xa361
    e72a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e72e:	781b      	ldrb	r3, [r3, #0]
    e730:	3301      	adds	r3, #1
    e732:	b2da      	uxtb	r2, r3
    e734:	f24a 3361 	movw	r3, #41825	; 0xa361
    e738:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e73c:	701a      	strb	r2, [r3, #0]
    e73e:	f24a 3361 	movw	r3, #41825	; 0xa361
    e742:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e746:	781b      	ldrb	r3, [r3, #0]
    e748:	2bff      	cmp	r3, #255	; 0xff
    e74a:	d105      	bne.n	e758 <send_gps_pos+0x12b0>
    e74c:	f24a 3361 	movw	r3, #41825	; 0xa361
    e750:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e754:	2200      	movs	r2, #0
    e756:	701a      	strb	r2, [r3, #0]
    e758:	f242 0339 	movw	r3, #8249	; 0x2039
    e75c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e760:	781b      	ldrb	r3, [r3, #0]
    e762:	b2db      	uxtb	r3, r3
    e764:	f003 0310 	and.w	r3, r3, #16
    e768:	2b00      	cmp	r3, #0
    e76a:	d15a      	bne.n	e822 <send_gps_pos+0x137a>
    e76c:	f24a 3362 	movw	r3, #41826	; 0xa362
    e770:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e774:	781b      	ldrb	r3, [r3, #0]
    e776:	b2db      	uxtb	r3, r3
    e778:	461a      	mov	r2, r3
    e77a:	f24a 3364 	movw	r3, #41828	; 0xa364
    e77e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e782:	5c9a      	ldrb	r2, [r3, r2]
    e784:	f24a 4363 	movw	r3, #42083	; 0xa463
    e788:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e78c:	701a      	strb	r2, [r3, #0]
    e78e:	f24a 4364 	movw	r3, #42084	; 0xa464
    e792:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e796:	2200      	movs	r2, #0
    e798:	701a      	strb	r2, [r3, #0]
    e79a:	f24a 3362 	movw	r3, #41826	; 0xa362
    e79e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7a2:	781b      	ldrb	r3, [r3, #0]
    e7a4:	b2db      	uxtb	r3, r3
    e7a6:	3301      	adds	r3, #1
    e7a8:	b2da      	uxtb	r2, r3
    e7aa:	f24a 3362 	movw	r3, #41826	; 0xa362
    e7ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7b2:	701a      	strb	r2, [r3, #0]
    e7b4:	f24a 3362 	movw	r3, #41826	; 0xa362
    e7b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7bc:	781b      	ldrb	r3, [r3, #0]
    e7be:	b2db      	uxtb	r3, r3
    e7c0:	2bff      	cmp	r3, #255	; 0xff
    e7c2:	d105      	bne.n	e7d0 <send_gps_pos+0x1328>
    e7c4:	f24a 3362 	movw	r3, #41826	; 0xa362
    e7c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7cc:	2200      	movs	r2, #0
    e7ce:	701a      	strb	r2, [r3, #0]
    e7d0:	f242 0338 	movw	r3, #8248	; 0x2038
    e7d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7d8:	f242 0238 	movw	r2, #8248	; 0x2038
    e7dc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    e7e0:	7812      	ldrb	r2, [r2, #0]
    e7e2:	b2d2      	uxtb	r2, r2
    e7e4:	f042 0201 	orr.w	r2, r2, #1
    e7e8:	b2d2      	uxtb	r2, r2
    e7ea:	701a      	strb	r2, [r3, #0]
    e7ec:	f242 0339 	movw	r3, #8249	; 0x2039
    e7f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7f4:	f242 0239 	movw	r2, #8249	; 0x2039
    e7f8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    e7fc:	7812      	ldrb	r2, [r2, #0]
    e7fe:	b2d2      	uxtb	r2, r2
    e800:	f042 0210 	orr.w	r2, r2, #16
    e804:	b2d2      	uxtb	r2, r2
    e806:	701a      	strb	r2, [r3, #0]
    e808:	e00b      	b.n	e822 <send_gps_pos+0x137a>
    e80a:	f24a 3360 	movw	r3, #41824	; 0xa360
    e80e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e812:	781b      	ldrb	r3, [r3, #0]
    e814:	3301      	adds	r3, #1
    e816:	b2da      	uxtb	r2, r3
    e818:	f24a 3360 	movw	r3, #41824	; 0xa360
    e81c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e820:	701a      	strb	r2, [r3, #0]
     estimator_update_state_gps();
    e822:	f005 fbfd 	bl	14020 <estimator_update_state_gps>
  }
}
    e826:	bd80      	pop	{r7, pc}
    e828:	2000a4d1 	.word	0x2000a4d1
    e82c:	2000a4d2 	.word	0x2000a4d2
    e830:	2000a4d3 	.word	0x2000a4d3

0000e834 <send_radIR>:

void send_radIR(void){
    e834:	b480      	push	{r7}
    e836:	af00      	add	r7, sp, #0
  if (gps_pos_available)
    e838:	f24a 43f6 	movw	r3, #42230	; 0xa4f6
    e83c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e840:	781b      	ldrb	r3, [r3, #0]
    e842:	2b00      	cmp	r3, #0
    e844:	f000 85e8 	beq.w	f418 <send_radIR+0xbe4>
     DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    e848:	f24a 3361 	movw	r3, #41825	; 0xa361
    e84c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e850:	781a      	ldrb	r2, [r3, #0]
    e852:	f24a 3362 	movw	r3, #41826	; 0xa362
    e856:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e85a:	781b      	ldrb	r3, [r3, #0]
    e85c:	b2db      	uxtb	r3, r3
    e85e:	429a      	cmp	r2, r3
    e860:	d313      	bcc.n	e88a <send_radIR+0x56>
    e862:	f24a 3362 	movw	r3, #41826	; 0xa362
    e866:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e86a:	781b      	ldrb	r3, [r3, #0]
    e86c:	b2db      	uxtb	r3, r3
    e86e:	461a      	mov	r2, r3
    e870:	f24a 3361 	movw	r3, #41825	; 0xa361
    e874:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e878:	781b      	ldrb	r3, [r3, #0]
    e87a:	1ad3      	subs	r3, r2, r3
    e87c:	33ff      	adds	r3, #255	; 0xff
    e87e:	2b14      	cmp	r3, #20
    e880:	bfd4      	ite	le
    e882:	2300      	movle	r3, #0
    e884:	2301      	movgt	r3, #1
    e886:	b2db      	uxtb	r3, r3
    e888:	e011      	b.n	e8ae <send_radIR+0x7a>
    e88a:	f24a 3362 	movw	r3, #41826	; 0xa362
    e88e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e892:	781b      	ldrb	r3, [r3, #0]
    e894:	b2db      	uxtb	r3, r3
    e896:	461a      	mov	r2, r3
    e898:	f24a 3361 	movw	r3, #41825	; 0xa361
    e89c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8a0:	781b      	ldrb	r3, [r3, #0]
    e8a2:	1ad3      	subs	r3, r2, r3
    e8a4:	2b14      	cmp	r3, #20
    e8a6:	bfd4      	ite	le
    e8a8:	2300      	movle	r3, #0
    e8aa:	2301      	movgt	r3, #1
    e8ac:	b2db      	uxtb	r3, r3
    e8ae:	2b00      	cmp	r3, #0
    e8b0:	f000 85a6 	beq.w	f400 <send_radIR+0xbcc>
    e8b4:	f24a 3361 	movw	r3, #41825	; 0xa361
    e8b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8bc:	781b      	ldrb	r3, [r3, #0]
    e8be:	461a      	mov	r2, r3
    e8c0:	f24a 3364 	movw	r3, #41828	; 0xa364
    e8c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8c8:	2105      	movs	r1, #5
    e8ca:	5499      	strb	r1, [r3, r2]
    e8cc:	f24a 3361 	movw	r3, #41825	; 0xa361
    e8d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8d4:	781b      	ldrb	r3, [r3, #0]
    e8d6:	3301      	adds	r3, #1
    e8d8:	b2da      	uxtb	r2, r3
    e8da:	f24a 3361 	movw	r3, #41825	; 0xa361
    e8de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8e2:	701a      	strb	r2, [r3, #0]
    e8e4:	f24a 3361 	movw	r3, #41825	; 0xa361
    e8e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8ec:	781b      	ldrb	r3, [r3, #0]
    e8ee:	2bff      	cmp	r3, #255	; 0xff
    e8f0:	d105      	bne.n	e8fe <send_radIR+0xca>
    e8f2:	f24a 3361 	movw	r3, #41825	; 0xa361
    e8f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8fa:	2200      	movs	r2, #0
    e8fc:	701a      	strb	r2, [r3, #0]
    e8fe:	f24a 3361 	movw	r3, #41825	; 0xa361
    e902:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e906:	781b      	ldrb	r3, [r3, #0]
    e908:	461a      	mov	r2, r3
    e90a:	f24a 3364 	movw	r3, #41828	; 0xa364
    e90e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e912:	2105      	movs	r1, #5
    e914:	5499      	strb	r1, [r3, r2]
    e916:	f24a 3361 	movw	r3, #41825	; 0xa361
    e91a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e91e:	781b      	ldrb	r3, [r3, #0]
    e920:	3301      	adds	r3, #1
    e922:	b2da      	uxtb	r2, r3
    e924:	f24a 3361 	movw	r3, #41825	; 0xa361
    e928:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e92c:	701a      	strb	r2, [r3, #0]
    e92e:	f24a 3361 	movw	r3, #41825	; 0xa361
    e932:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e936:	781b      	ldrb	r3, [r3, #0]
    e938:	2bff      	cmp	r3, #255	; 0xff
    e93a:	d105      	bne.n	e948 <send_radIR+0x114>
    e93c:	f24a 3361 	movw	r3, #41825	; 0xa361
    e940:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e944:	2200      	movs	r2, #0
    e946:	701a      	strb	r2, [r3, #0]
    e948:	f24a 4365 	movw	r3, #42085	; 0xa465
    e94c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e950:	2205      	movs	r2, #5
    e952:	701a      	strb	r2, [r3, #0]
    e954:	f24a 4366 	movw	r3, #42086	; 0xa466
    e958:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e95c:	2205      	movs	r2, #5
    e95e:	701a      	strb	r2, [r3, #0]
    e960:	f24a 3361 	movw	r3, #41825	; 0xa361
    e964:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e968:	781b      	ldrb	r3, [r3, #0]
    e96a:	461a      	mov	r2, r3
    e96c:	f64a 1358 	movw	r3, #43352	; 0xa958
    e970:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e974:	7819      	ldrb	r1, [r3, #0]
    e976:	f24a 3364 	movw	r3, #41828	; 0xa364
    e97a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e97e:	5499      	strb	r1, [r3, r2]
    e980:	f64a 1358 	movw	r3, #43352	; 0xa958
    e984:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e988:	781a      	ldrb	r2, [r3, #0]
    e98a:	f24a 4365 	movw	r3, #42085	; 0xa465
    e98e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e992:	781b      	ldrb	r3, [r3, #0]
    e994:	4413      	add	r3, r2
    e996:	b2da      	uxtb	r2, r3
    e998:	f24a 4365 	movw	r3, #42085	; 0xa465
    e99c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9a0:	701a      	strb	r2, [r3, #0]
    e9a2:	f24a 4366 	movw	r3, #42086	; 0xa466
    e9a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9aa:	781a      	ldrb	r2, [r3, #0]
    e9ac:	f24a 4365 	movw	r3, #42085	; 0xa465
    e9b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9b4:	781b      	ldrb	r3, [r3, #0]
    e9b6:	4413      	add	r3, r2
    e9b8:	b2da      	uxtb	r2, r3
    e9ba:	f24a 4366 	movw	r3, #42086	; 0xa466
    e9be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9c2:	701a      	strb	r2, [r3, #0]
    e9c4:	f24a 3361 	movw	r3, #41825	; 0xa361
    e9c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9cc:	781b      	ldrb	r3, [r3, #0]
    e9ce:	3301      	adds	r3, #1
    e9d0:	b2da      	uxtb	r2, r3
    e9d2:	f24a 3361 	movw	r3, #41825	; 0xa361
    e9d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9da:	701a      	strb	r2, [r3, #0]
    e9dc:	f24a 3361 	movw	r3, #41825	; 0xa361
    e9e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9e4:	781b      	ldrb	r3, [r3, #0]
    e9e6:	2bff      	cmp	r3, #255	; 0xff
    e9e8:	d105      	bne.n	e9f6 <send_radIR+0x1c2>
    e9ea:	f24a 3361 	movw	r3, #41825	; 0xa361
    e9ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9f2:	2200      	movs	r2, #0
    e9f4:	701a      	strb	r2, [r3, #0]
    e9f6:	f24a 3361 	movw	r3, #41825	; 0xa361
    e9fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9fe:	781b      	ldrb	r3, [r3, #0]
    ea00:	461a      	mov	r2, r3
    ea02:	f64a 1358 	movw	r3, #43352	; 0xa958
    ea06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea0a:	7859      	ldrb	r1, [r3, #1]
    ea0c:	f24a 3364 	movw	r3, #41828	; 0xa364
    ea10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea14:	5499      	strb	r1, [r3, r2]
    ea16:	4bd2      	ldr	r3, [pc, #840]	; (ed60 <send_radIR+0x52c>)
    ea18:	781a      	ldrb	r2, [r3, #0]
    ea1a:	f24a 4365 	movw	r3, #42085	; 0xa465
    ea1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea22:	781b      	ldrb	r3, [r3, #0]
    ea24:	4413      	add	r3, r2
    ea26:	b2da      	uxtb	r2, r3
    ea28:	f24a 4365 	movw	r3, #42085	; 0xa465
    ea2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea30:	701a      	strb	r2, [r3, #0]
    ea32:	f24a 4366 	movw	r3, #42086	; 0xa466
    ea36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea3a:	781a      	ldrb	r2, [r3, #0]
    ea3c:	f24a 4365 	movw	r3, #42085	; 0xa465
    ea40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea44:	781b      	ldrb	r3, [r3, #0]
    ea46:	4413      	add	r3, r2
    ea48:	b2da      	uxtb	r2, r3
    ea4a:	f24a 4366 	movw	r3, #42086	; 0xa466
    ea4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea52:	701a      	strb	r2, [r3, #0]
    ea54:	f24a 3361 	movw	r3, #41825	; 0xa361
    ea58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea5c:	781b      	ldrb	r3, [r3, #0]
    ea5e:	3301      	adds	r3, #1
    ea60:	b2da      	uxtb	r2, r3
    ea62:	f24a 3361 	movw	r3, #41825	; 0xa361
    ea66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea6a:	701a      	strb	r2, [r3, #0]
    ea6c:	f24a 3361 	movw	r3, #41825	; 0xa361
    ea70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea74:	781b      	ldrb	r3, [r3, #0]
    ea76:	2bff      	cmp	r3, #255	; 0xff
    ea78:	d105      	bne.n	ea86 <send_radIR+0x252>
    ea7a:	f24a 3361 	movw	r3, #41825	; 0xa361
    ea7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea82:	2200      	movs	r2, #0
    ea84:	701a      	strb	r2, [r3, #0]
    ea86:	f24a 3361 	movw	r3, #41825	; 0xa361
    ea8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea8e:	781b      	ldrb	r3, [r3, #0]
    ea90:	461a      	mov	r2, r3
    ea92:	f64a 1358 	movw	r3, #43352	; 0xa958
    ea96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea9a:	7899      	ldrb	r1, [r3, #2]
    ea9c:	f24a 3364 	movw	r3, #41828	; 0xa364
    eaa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eaa4:	5499      	strb	r1, [r3, r2]
    eaa6:	4baf      	ldr	r3, [pc, #700]	; (ed64 <send_radIR+0x530>)
    eaa8:	781a      	ldrb	r2, [r3, #0]
    eaaa:	f24a 4365 	movw	r3, #42085	; 0xa465
    eaae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eab2:	781b      	ldrb	r3, [r3, #0]
    eab4:	4413      	add	r3, r2
    eab6:	b2da      	uxtb	r2, r3
    eab8:	f24a 4365 	movw	r3, #42085	; 0xa465
    eabc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eac0:	701a      	strb	r2, [r3, #0]
    eac2:	f24a 4366 	movw	r3, #42086	; 0xa466
    eac6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eaca:	781a      	ldrb	r2, [r3, #0]
    eacc:	f24a 4365 	movw	r3, #42085	; 0xa465
    ead0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ead4:	781b      	ldrb	r3, [r3, #0]
    ead6:	4413      	add	r3, r2
    ead8:	b2da      	uxtb	r2, r3
    eada:	f24a 4366 	movw	r3, #42086	; 0xa466
    eade:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eae2:	701a      	strb	r2, [r3, #0]
    eae4:	f24a 3361 	movw	r3, #41825	; 0xa361
    eae8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eaec:	781b      	ldrb	r3, [r3, #0]
    eaee:	3301      	adds	r3, #1
    eaf0:	b2da      	uxtb	r2, r3
    eaf2:	f24a 3361 	movw	r3, #41825	; 0xa361
    eaf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eafa:	701a      	strb	r2, [r3, #0]
    eafc:	f24a 3361 	movw	r3, #41825	; 0xa361
    eb00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb04:	781b      	ldrb	r3, [r3, #0]
    eb06:	2bff      	cmp	r3, #255	; 0xff
    eb08:	d105      	bne.n	eb16 <send_radIR+0x2e2>
    eb0a:	f24a 3361 	movw	r3, #41825	; 0xa361
    eb0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb12:	2200      	movs	r2, #0
    eb14:	701a      	strb	r2, [r3, #0]
    eb16:	f24a 3361 	movw	r3, #41825	; 0xa361
    eb1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb1e:	781b      	ldrb	r3, [r3, #0]
    eb20:	461a      	mov	r2, r3
    eb22:	f64a 1358 	movw	r3, #43352	; 0xa958
    eb26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb2a:	78d9      	ldrb	r1, [r3, #3]
    eb2c:	f24a 3364 	movw	r3, #41828	; 0xa364
    eb30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb34:	5499      	strb	r1, [r3, r2]
    eb36:	4b8c      	ldr	r3, [pc, #560]	; (ed68 <send_radIR+0x534>)
    eb38:	781a      	ldrb	r2, [r3, #0]
    eb3a:	f24a 4365 	movw	r3, #42085	; 0xa465
    eb3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb42:	781b      	ldrb	r3, [r3, #0]
    eb44:	4413      	add	r3, r2
    eb46:	b2da      	uxtb	r2, r3
    eb48:	f24a 4365 	movw	r3, #42085	; 0xa465
    eb4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb50:	701a      	strb	r2, [r3, #0]
    eb52:	f24a 4366 	movw	r3, #42086	; 0xa466
    eb56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb5a:	781a      	ldrb	r2, [r3, #0]
    eb5c:	f24a 4365 	movw	r3, #42085	; 0xa465
    eb60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb64:	781b      	ldrb	r3, [r3, #0]
    eb66:	4413      	add	r3, r2
    eb68:	b2da      	uxtb	r2, r3
    eb6a:	f24a 4366 	movw	r3, #42086	; 0xa466
    eb6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb72:	701a      	strb	r2, [r3, #0]
    eb74:	f24a 3361 	movw	r3, #41825	; 0xa361
    eb78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb7c:	781b      	ldrb	r3, [r3, #0]
    eb7e:	3301      	adds	r3, #1
    eb80:	b2da      	uxtb	r2, r3
    eb82:	f24a 3361 	movw	r3, #41825	; 0xa361
    eb86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb8a:	701a      	strb	r2, [r3, #0]
    eb8c:	f24a 3361 	movw	r3, #41825	; 0xa361
    eb90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb94:	781b      	ldrb	r3, [r3, #0]
    eb96:	2bff      	cmp	r3, #255	; 0xff
    eb98:	d105      	bne.n	eba6 <send_radIR+0x372>
    eb9a:	f24a 3361 	movw	r3, #41825	; 0xa361
    eb9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eba2:	2200      	movs	r2, #0
    eba4:	701a      	strb	r2, [r3, #0]
    eba6:	f24a 3361 	movw	r3, #41825	; 0xa361
    ebaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebae:	781b      	ldrb	r3, [r3, #0]
    ebb0:	461a      	mov	r2, r3
    ebb2:	f64a 135c 	movw	r3, #43356	; 0xa95c
    ebb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebba:	7819      	ldrb	r1, [r3, #0]
    ebbc:	f24a 3364 	movw	r3, #41828	; 0xa364
    ebc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebc4:	5499      	strb	r1, [r3, r2]
    ebc6:	f64a 135c 	movw	r3, #43356	; 0xa95c
    ebca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebce:	781a      	ldrb	r2, [r3, #0]
    ebd0:	f24a 4365 	movw	r3, #42085	; 0xa465
    ebd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebd8:	781b      	ldrb	r3, [r3, #0]
    ebda:	4413      	add	r3, r2
    ebdc:	b2da      	uxtb	r2, r3
    ebde:	f24a 4365 	movw	r3, #42085	; 0xa465
    ebe2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebe6:	701a      	strb	r2, [r3, #0]
    ebe8:	f24a 4366 	movw	r3, #42086	; 0xa466
    ebec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebf0:	781a      	ldrb	r2, [r3, #0]
    ebf2:	f24a 4365 	movw	r3, #42085	; 0xa465
    ebf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebfa:	781b      	ldrb	r3, [r3, #0]
    ebfc:	4413      	add	r3, r2
    ebfe:	b2da      	uxtb	r2, r3
    ec00:	f24a 4366 	movw	r3, #42086	; 0xa466
    ec04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec08:	701a      	strb	r2, [r3, #0]
    ec0a:	f24a 3361 	movw	r3, #41825	; 0xa361
    ec0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec12:	781b      	ldrb	r3, [r3, #0]
    ec14:	3301      	adds	r3, #1
    ec16:	b2da      	uxtb	r2, r3
    ec18:	f24a 3361 	movw	r3, #41825	; 0xa361
    ec1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec20:	701a      	strb	r2, [r3, #0]
    ec22:	f24a 3361 	movw	r3, #41825	; 0xa361
    ec26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec2a:	781b      	ldrb	r3, [r3, #0]
    ec2c:	2bff      	cmp	r3, #255	; 0xff
    ec2e:	d105      	bne.n	ec3c <send_radIR+0x408>
    ec30:	f24a 3361 	movw	r3, #41825	; 0xa361
    ec34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec38:	2200      	movs	r2, #0
    ec3a:	701a      	strb	r2, [r3, #0]
    ec3c:	f24a 3361 	movw	r3, #41825	; 0xa361
    ec40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec44:	781b      	ldrb	r3, [r3, #0]
    ec46:	461a      	mov	r2, r3
    ec48:	f64a 135c 	movw	r3, #43356	; 0xa95c
    ec4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec50:	7859      	ldrb	r1, [r3, #1]
    ec52:	f24a 3364 	movw	r3, #41828	; 0xa364
    ec56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec5a:	5499      	strb	r1, [r3, r2]
    ec5c:	4b43      	ldr	r3, [pc, #268]	; (ed6c <send_radIR+0x538>)
    ec5e:	781a      	ldrb	r2, [r3, #0]
    ec60:	f24a 4365 	movw	r3, #42085	; 0xa465
    ec64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec68:	781b      	ldrb	r3, [r3, #0]
    ec6a:	4413      	add	r3, r2
    ec6c:	b2da      	uxtb	r2, r3
    ec6e:	f24a 4365 	movw	r3, #42085	; 0xa465
    ec72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec76:	701a      	strb	r2, [r3, #0]
    ec78:	f24a 4366 	movw	r3, #42086	; 0xa466
    ec7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec80:	781a      	ldrb	r2, [r3, #0]
    ec82:	f24a 4365 	movw	r3, #42085	; 0xa465
    ec86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec8a:	781b      	ldrb	r3, [r3, #0]
    ec8c:	4413      	add	r3, r2
    ec8e:	b2da      	uxtb	r2, r3
    ec90:	f24a 4366 	movw	r3, #42086	; 0xa466
    ec94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec98:	701a      	strb	r2, [r3, #0]
    ec9a:	f24a 3361 	movw	r3, #41825	; 0xa361
    ec9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eca2:	781b      	ldrb	r3, [r3, #0]
    eca4:	3301      	adds	r3, #1
    eca6:	b2da      	uxtb	r2, r3
    eca8:	f24a 3361 	movw	r3, #41825	; 0xa361
    ecac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ecb0:	701a      	strb	r2, [r3, #0]
    ecb2:	f24a 3361 	movw	r3, #41825	; 0xa361
    ecb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ecba:	781b      	ldrb	r3, [r3, #0]
    ecbc:	2bff      	cmp	r3, #255	; 0xff
    ecbe:	d105      	bne.n	eccc <send_radIR+0x498>
    ecc0:	f24a 3361 	movw	r3, #41825	; 0xa361
    ecc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ecc8:	2200      	movs	r2, #0
    ecca:	701a      	strb	r2, [r3, #0]
    eccc:	f24a 3361 	movw	r3, #41825	; 0xa361
    ecd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ecd4:	781b      	ldrb	r3, [r3, #0]
    ecd6:	461a      	mov	r2, r3
    ecd8:	f64a 135c 	movw	r3, #43356	; 0xa95c
    ecdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ece0:	7899      	ldrb	r1, [r3, #2]
    ece2:	f24a 3364 	movw	r3, #41828	; 0xa364
    ece6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ecea:	5499      	strb	r1, [r3, r2]
    ecec:	4b20      	ldr	r3, [pc, #128]	; (ed70 <send_radIR+0x53c>)
    ecee:	781a      	ldrb	r2, [r3, #0]
    ecf0:	f24a 4365 	movw	r3, #42085	; 0xa465
    ecf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ecf8:	781b      	ldrb	r3, [r3, #0]
    ecfa:	4413      	add	r3, r2
    ecfc:	b2da      	uxtb	r2, r3
    ecfe:	f24a 4365 	movw	r3, #42085	; 0xa465
    ed02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed06:	701a      	strb	r2, [r3, #0]
    ed08:	f24a 4366 	movw	r3, #42086	; 0xa466
    ed0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed10:	781a      	ldrb	r2, [r3, #0]
    ed12:	f24a 4365 	movw	r3, #42085	; 0xa465
    ed16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed1a:	781b      	ldrb	r3, [r3, #0]
    ed1c:	4413      	add	r3, r2
    ed1e:	b2da      	uxtb	r2, r3
    ed20:	f24a 4366 	movw	r3, #42086	; 0xa466
    ed24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed28:	701a      	strb	r2, [r3, #0]
    ed2a:	f24a 3361 	movw	r3, #41825	; 0xa361
    ed2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed32:	781b      	ldrb	r3, [r3, #0]
    ed34:	3301      	adds	r3, #1
    ed36:	b2da      	uxtb	r2, r3
    ed38:	f24a 3361 	movw	r3, #41825	; 0xa361
    ed3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed40:	701a      	strb	r2, [r3, #0]
    ed42:	f24a 3361 	movw	r3, #41825	; 0xa361
    ed46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed4a:	781b      	ldrb	r3, [r3, #0]
    ed4c:	2bff      	cmp	r3, #255	; 0xff
    ed4e:	d111      	bne.n	ed74 <send_radIR+0x540>
    ed50:	f24a 3361 	movw	r3, #41825	; 0xa361
    ed54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed58:	2200      	movs	r2, #0
    ed5a:	701a      	strb	r2, [r3, #0]
    ed5c:	e00a      	b.n	ed74 <send_radIR+0x540>
    ed5e:	bf00      	nop
    ed60:	2000a959 	.word	0x2000a959
    ed64:	2000a95a 	.word	0x2000a95a
    ed68:	2000a95b 	.word	0x2000a95b
    ed6c:	2000a95d 	.word	0x2000a95d
    ed70:	2000a95e 	.word	0x2000a95e
    ed74:	f24a 3361 	movw	r3, #41825	; 0xa361
    ed78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed7c:	781b      	ldrb	r3, [r3, #0]
    ed7e:	461a      	mov	r2, r3
    ed80:	f64a 135c 	movw	r3, #43356	; 0xa95c
    ed84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed88:	78d9      	ldrb	r1, [r3, #3]
    ed8a:	f24a 3364 	movw	r3, #41828	; 0xa364
    ed8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed92:	5499      	strb	r1, [r3, r2]
    ed94:	4bd3      	ldr	r3, [pc, #844]	; (f0e4 <send_radIR+0x8b0>)
    ed96:	781a      	ldrb	r2, [r3, #0]
    ed98:	f24a 4365 	movw	r3, #42085	; 0xa465
    ed9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eda0:	781b      	ldrb	r3, [r3, #0]
    eda2:	4413      	add	r3, r2
    eda4:	b2da      	uxtb	r2, r3
    eda6:	f24a 4365 	movw	r3, #42085	; 0xa465
    edaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    edae:	701a      	strb	r2, [r3, #0]
    edb0:	f24a 4366 	movw	r3, #42086	; 0xa466
    edb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    edb8:	781a      	ldrb	r2, [r3, #0]
    edba:	f24a 4365 	movw	r3, #42085	; 0xa465
    edbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    edc2:	781b      	ldrb	r3, [r3, #0]
    edc4:	4413      	add	r3, r2
    edc6:	b2da      	uxtb	r2, r3
    edc8:	f24a 4366 	movw	r3, #42086	; 0xa466
    edcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    edd0:	701a      	strb	r2, [r3, #0]
    edd2:	f24a 3361 	movw	r3, #41825	; 0xa361
    edd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    edda:	781b      	ldrb	r3, [r3, #0]
    eddc:	3301      	adds	r3, #1
    edde:	b2da      	uxtb	r2, r3
    ede0:	f24a 3361 	movw	r3, #41825	; 0xa361
    ede4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ede8:	701a      	strb	r2, [r3, #0]
    edea:	f24a 3361 	movw	r3, #41825	; 0xa361
    edee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    edf2:	781b      	ldrb	r3, [r3, #0]
    edf4:	2bff      	cmp	r3, #255	; 0xff
    edf6:	d105      	bne.n	ee04 <send_radIR+0x5d0>
    edf8:	f24a 3361 	movw	r3, #41825	; 0xa361
    edfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee00:	2200      	movs	r2, #0
    ee02:	701a      	strb	r2, [r3, #0]
    ee04:	f24a 3361 	movw	r3, #41825	; 0xa361
    ee08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee0c:	781b      	ldrb	r3, [r3, #0]
    ee0e:	461a      	mov	r2, r3
    ee10:	f64a 1354 	movw	r3, #43348	; 0xa954
    ee14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee18:	7819      	ldrb	r1, [r3, #0]
    ee1a:	f24a 3364 	movw	r3, #41828	; 0xa364
    ee1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee22:	5499      	strb	r1, [r3, r2]
    ee24:	f64a 1354 	movw	r3, #43348	; 0xa954
    ee28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee2c:	781a      	ldrb	r2, [r3, #0]
    ee2e:	f24a 4365 	movw	r3, #42085	; 0xa465
    ee32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee36:	781b      	ldrb	r3, [r3, #0]
    ee38:	4413      	add	r3, r2
    ee3a:	b2da      	uxtb	r2, r3
    ee3c:	f24a 4365 	movw	r3, #42085	; 0xa465
    ee40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee44:	701a      	strb	r2, [r3, #0]
    ee46:	f24a 4366 	movw	r3, #42086	; 0xa466
    ee4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee4e:	781a      	ldrb	r2, [r3, #0]
    ee50:	f24a 4365 	movw	r3, #42085	; 0xa465
    ee54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee58:	781b      	ldrb	r3, [r3, #0]
    ee5a:	4413      	add	r3, r2
    ee5c:	b2da      	uxtb	r2, r3
    ee5e:	f24a 4366 	movw	r3, #42086	; 0xa466
    ee62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee66:	701a      	strb	r2, [r3, #0]
    ee68:	f24a 3361 	movw	r3, #41825	; 0xa361
    ee6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee70:	781b      	ldrb	r3, [r3, #0]
    ee72:	3301      	adds	r3, #1
    ee74:	b2da      	uxtb	r2, r3
    ee76:	f24a 3361 	movw	r3, #41825	; 0xa361
    ee7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee7e:	701a      	strb	r2, [r3, #0]
    ee80:	f24a 3361 	movw	r3, #41825	; 0xa361
    ee84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee88:	781b      	ldrb	r3, [r3, #0]
    ee8a:	2bff      	cmp	r3, #255	; 0xff
    ee8c:	d105      	bne.n	ee9a <send_radIR+0x666>
    ee8e:	f24a 3361 	movw	r3, #41825	; 0xa361
    ee92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee96:	2200      	movs	r2, #0
    ee98:	701a      	strb	r2, [r3, #0]
    ee9a:	f24a 3361 	movw	r3, #41825	; 0xa361
    ee9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eea2:	781b      	ldrb	r3, [r3, #0]
    eea4:	461a      	mov	r2, r3
    eea6:	f64a 1354 	movw	r3, #43348	; 0xa954
    eeaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eeae:	7859      	ldrb	r1, [r3, #1]
    eeb0:	f24a 3364 	movw	r3, #41828	; 0xa364
    eeb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eeb8:	5499      	strb	r1, [r3, r2]
    eeba:	4b8b      	ldr	r3, [pc, #556]	; (f0e8 <send_radIR+0x8b4>)
    eebc:	781a      	ldrb	r2, [r3, #0]
    eebe:	f24a 4365 	movw	r3, #42085	; 0xa465
    eec2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eec6:	781b      	ldrb	r3, [r3, #0]
    eec8:	4413      	add	r3, r2
    eeca:	b2da      	uxtb	r2, r3
    eecc:	f24a 4365 	movw	r3, #42085	; 0xa465
    eed0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eed4:	701a      	strb	r2, [r3, #0]
    eed6:	f24a 4366 	movw	r3, #42086	; 0xa466
    eeda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eede:	781a      	ldrb	r2, [r3, #0]
    eee0:	f24a 4365 	movw	r3, #42085	; 0xa465
    eee4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eee8:	781b      	ldrb	r3, [r3, #0]
    eeea:	4413      	add	r3, r2
    eeec:	b2da      	uxtb	r2, r3
    eeee:	f24a 4366 	movw	r3, #42086	; 0xa466
    eef2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eef6:	701a      	strb	r2, [r3, #0]
    eef8:	f24a 3361 	movw	r3, #41825	; 0xa361
    eefc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef00:	781b      	ldrb	r3, [r3, #0]
    ef02:	3301      	adds	r3, #1
    ef04:	b2da      	uxtb	r2, r3
    ef06:	f24a 3361 	movw	r3, #41825	; 0xa361
    ef0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef0e:	701a      	strb	r2, [r3, #0]
    ef10:	f24a 3361 	movw	r3, #41825	; 0xa361
    ef14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef18:	781b      	ldrb	r3, [r3, #0]
    ef1a:	2bff      	cmp	r3, #255	; 0xff
    ef1c:	d105      	bne.n	ef2a <send_radIR+0x6f6>
    ef1e:	f24a 3361 	movw	r3, #41825	; 0xa361
    ef22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef26:	2200      	movs	r2, #0
    ef28:	701a      	strb	r2, [r3, #0]
    ef2a:	f24a 3361 	movw	r3, #41825	; 0xa361
    ef2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef32:	781b      	ldrb	r3, [r3, #0]
    ef34:	461a      	mov	r2, r3
    ef36:	f64a 1354 	movw	r3, #43348	; 0xa954
    ef3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef3e:	7899      	ldrb	r1, [r3, #2]
    ef40:	f24a 3364 	movw	r3, #41828	; 0xa364
    ef44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef48:	5499      	strb	r1, [r3, r2]
    ef4a:	4b68      	ldr	r3, [pc, #416]	; (f0ec <send_radIR+0x8b8>)
    ef4c:	781a      	ldrb	r2, [r3, #0]
    ef4e:	f24a 4365 	movw	r3, #42085	; 0xa465
    ef52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef56:	781b      	ldrb	r3, [r3, #0]
    ef58:	4413      	add	r3, r2
    ef5a:	b2da      	uxtb	r2, r3
    ef5c:	f24a 4365 	movw	r3, #42085	; 0xa465
    ef60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef64:	701a      	strb	r2, [r3, #0]
    ef66:	f24a 4366 	movw	r3, #42086	; 0xa466
    ef6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef6e:	781a      	ldrb	r2, [r3, #0]
    ef70:	f24a 4365 	movw	r3, #42085	; 0xa465
    ef74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef78:	781b      	ldrb	r3, [r3, #0]
    ef7a:	4413      	add	r3, r2
    ef7c:	b2da      	uxtb	r2, r3
    ef7e:	f24a 4366 	movw	r3, #42086	; 0xa466
    ef82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef86:	701a      	strb	r2, [r3, #0]
    ef88:	f24a 3361 	movw	r3, #41825	; 0xa361
    ef8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef90:	781b      	ldrb	r3, [r3, #0]
    ef92:	3301      	adds	r3, #1
    ef94:	b2da      	uxtb	r2, r3
    ef96:	f24a 3361 	movw	r3, #41825	; 0xa361
    ef9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef9e:	701a      	strb	r2, [r3, #0]
    efa0:	f24a 3361 	movw	r3, #41825	; 0xa361
    efa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    efa8:	781b      	ldrb	r3, [r3, #0]
    efaa:	2bff      	cmp	r3, #255	; 0xff
    efac:	d105      	bne.n	efba <send_radIR+0x786>
    efae:	f24a 3361 	movw	r3, #41825	; 0xa361
    efb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    efb6:	2200      	movs	r2, #0
    efb8:	701a      	strb	r2, [r3, #0]
    efba:	f24a 3361 	movw	r3, #41825	; 0xa361
    efbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    efc2:	781b      	ldrb	r3, [r3, #0]
    efc4:	461a      	mov	r2, r3
    efc6:	f64a 1354 	movw	r3, #43348	; 0xa954
    efca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    efce:	78d9      	ldrb	r1, [r3, #3]
    efd0:	f24a 3364 	movw	r3, #41828	; 0xa364
    efd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    efd8:	5499      	strb	r1, [r3, r2]
    efda:	4b45      	ldr	r3, [pc, #276]	; (f0f0 <send_radIR+0x8bc>)
    efdc:	781a      	ldrb	r2, [r3, #0]
    efde:	f24a 4365 	movw	r3, #42085	; 0xa465
    efe2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    efe6:	781b      	ldrb	r3, [r3, #0]
    efe8:	4413      	add	r3, r2
    efea:	b2da      	uxtb	r2, r3
    efec:	f24a 4365 	movw	r3, #42085	; 0xa465
    eff0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eff4:	701a      	strb	r2, [r3, #0]
    eff6:	f24a 4366 	movw	r3, #42086	; 0xa466
    effa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    effe:	781a      	ldrb	r2, [r3, #0]
    f000:	f24a 4365 	movw	r3, #42085	; 0xa465
    f004:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f008:	781b      	ldrb	r3, [r3, #0]
    f00a:	4413      	add	r3, r2
    f00c:	b2da      	uxtb	r2, r3
    f00e:	f24a 4366 	movw	r3, #42086	; 0xa466
    f012:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f016:	701a      	strb	r2, [r3, #0]
    f018:	f24a 3361 	movw	r3, #41825	; 0xa361
    f01c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f020:	781b      	ldrb	r3, [r3, #0]
    f022:	3301      	adds	r3, #1
    f024:	b2da      	uxtb	r2, r3
    f026:	f24a 3361 	movw	r3, #41825	; 0xa361
    f02a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f02e:	701a      	strb	r2, [r3, #0]
    f030:	f24a 3361 	movw	r3, #41825	; 0xa361
    f034:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f038:	781b      	ldrb	r3, [r3, #0]
    f03a:	2bff      	cmp	r3, #255	; 0xff
    f03c:	d105      	bne.n	f04a <send_radIR+0x816>
    f03e:	f24a 3361 	movw	r3, #41825	; 0xa361
    f042:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f046:	2200      	movs	r2, #0
    f048:	701a      	strb	r2, [r3, #0]
    f04a:	f24a 3361 	movw	r3, #41825	; 0xa361
    f04e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f052:	781b      	ldrb	r3, [r3, #0]
    f054:	461a      	mov	r2, r3
    f056:	f240 03d6 	movw	r3, #214	; 0xd6
    f05a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f05e:	7819      	ldrb	r1, [r3, #0]
    f060:	f24a 3364 	movw	r3, #41828	; 0xa364
    f064:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f068:	5499      	strb	r1, [r3, r2]
    f06a:	f240 03d6 	movw	r3, #214	; 0xd6
    f06e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f072:	781a      	ldrb	r2, [r3, #0]
    f074:	f24a 4365 	movw	r3, #42085	; 0xa465
    f078:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f07c:	781b      	ldrb	r3, [r3, #0]
    f07e:	4413      	add	r3, r2
    f080:	b2da      	uxtb	r2, r3
    f082:	f24a 4365 	movw	r3, #42085	; 0xa465
    f086:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f08a:	701a      	strb	r2, [r3, #0]
    f08c:	f24a 4366 	movw	r3, #42086	; 0xa466
    f090:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f094:	781a      	ldrb	r2, [r3, #0]
    f096:	f24a 4365 	movw	r3, #42085	; 0xa465
    f09a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f09e:	781b      	ldrb	r3, [r3, #0]
    f0a0:	4413      	add	r3, r2
    f0a2:	b2da      	uxtb	r2, r3
    f0a4:	f24a 4366 	movw	r3, #42086	; 0xa466
    f0a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0ac:	701a      	strb	r2, [r3, #0]
    f0ae:	f24a 3361 	movw	r3, #41825	; 0xa361
    f0b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0b6:	781b      	ldrb	r3, [r3, #0]
    f0b8:	3301      	adds	r3, #1
    f0ba:	b2da      	uxtb	r2, r3
    f0bc:	f24a 3361 	movw	r3, #41825	; 0xa361
    f0c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0c4:	701a      	strb	r2, [r3, #0]
    f0c6:	f24a 3361 	movw	r3, #41825	; 0xa361
    f0ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0ce:	781b      	ldrb	r3, [r3, #0]
    f0d0:	2bff      	cmp	r3, #255	; 0xff
    f0d2:	d10f      	bne.n	f0f4 <send_radIR+0x8c0>
    f0d4:	f24a 3361 	movw	r3, #41825	; 0xa361
    f0d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0dc:	2200      	movs	r2, #0
    f0de:	701a      	strb	r2, [r3, #0]
    f0e0:	e008      	b.n	f0f4 <send_radIR+0x8c0>
    f0e2:	bf00      	nop
    f0e4:	2000a95f 	.word	0x2000a95f
    f0e8:	2000a955 	.word	0x2000a955
    f0ec:	2000a956 	.word	0x2000a956
    f0f0:	2000a957 	.word	0x2000a957
    f0f4:	f24a 3361 	movw	r3, #41825	; 0xa361
    f0f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0fc:	781b      	ldrb	r3, [r3, #0]
    f0fe:	461a      	mov	r2, r3
    f100:	f240 03d6 	movw	r3, #214	; 0xd6
    f104:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f108:	7859      	ldrb	r1, [r3, #1]
    f10a:	f24a 3364 	movw	r3, #41828	; 0xa364
    f10e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f112:	5499      	strb	r1, [r3, r2]
    f114:	4bc2      	ldr	r3, [pc, #776]	; (f420 <send_radIR+0xbec>)
    f116:	781a      	ldrb	r2, [r3, #0]
    f118:	f24a 4365 	movw	r3, #42085	; 0xa465
    f11c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f120:	781b      	ldrb	r3, [r3, #0]
    f122:	4413      	add	r3, r2
    f124:	b2da      	uxtb	r2, r3
    f126:	f24a 4365 	movw	r3, #42085	; 0xa465
    f12a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f12e:	701a      	strb	r2, [r3, #0]
    f130:	f24a 4366 	movw	r3, #42086	; 0xa466
    f134:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f138:	781a      	ldrb	r2, [r3, #0]
    f13a:	f24a 4365 	movw	r3, #42085	; 0xa465
    f13e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f142:	781b      	ldrb	r3, [r3, #0]
    f144:	4413      	add	r3, r2
    f146:	b2da      	uxtb	r2, r3
    f148:	f24a 4366 	movw	r3, #42086	; 0xa466
    f14c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f150:	701a      	strb	r2, [r3, #0]
    f152:	f24a 3361 	movw	r3, #41825	; 0xa361
    f156:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f15a:	781b      	ldrb	r3, [r3, #0]
    f15c:	3301      	adds	r3, #1
    f15e:	b2da      	uxtb	r2, r3
    f160:	f24a 3361 	movw	r3, #41825	; 0xa361
    f164:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f168:	701a      	strb	r2, [r3, #0]
    f16a:	f24a 3361 	movw	r3, #41825	; 0xa361
    f16e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f172:	781b      	ldrb	r3, [r3, #0]
    f174:	2bff      	cmp	r3, #255	; 0xff
    f176:	d105      	bne.n	f184 <send_radIR+0x950>
    f178:	f24a 3361 	movw	r3, #41825	; 0xa361
    f17c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f180:	2200      	movs	r2, #0
    f182:	701a      	strb	r2, [r3, #0]
    f184:	f24a 3361 	movw	r3, #41825	; 0xa361
    f188:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f18c:	781b      	ldrb	r3, [r3, #0]
    f18e:	461a      	mov	r2, r3
    f190:	f240 03d8 	movw	r3, #216	; 0xd8
    f194:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f198:	7819      	ldrb	r1, [r3, #0]
    f19a:	f24a 3364 	movw	r3, #41828	; 0xa364
    f19e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1a2:	5499      	strb	r1, [r3, r2]
    f1a4:	f240 03d8 	movw	r3, #216	; 0xd8
    f1a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1ac:	781a      	ldrb	r2, [r3, #0]
    f1ae:	f24a 4365 	movw	r3, #42085	; 0xa465
    f1b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1b6:	781b      	ldrb	r3, [r3, #0]
    f1b8:	4413      	add	r3, r2
    f1ba:	b2da      	uxtb	r2, r3
    f1bc:	f24a 4365 	movw	r3, #42085	; 0xa465
    f1c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1c4:	701a      	strb	r2, [r3, #0]
    f1c6:	f24a 4366 	movw	r3, #42086	; 0xa466
    f1ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1ce:	781a      	ldrb	r2, [r3, #0]
    f1d0:	f24a 4365 	movw	r3, #42085	; 0xa465
    f1d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1d8:	781b      	ldrb	r3, [r3, #0]
    f1da:	4413      	add	r3, r2
    f1dc:	b2da      	uxtb	r2, r3
    f1de:	f24a 4366 	movw	r3, #42086	; 0xa466
    f1e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1e6:	701a      	strb	r2, [r3, #0]
    f1e8:	f24a 3361 	movw	r3, #41825	; 0xa361
    f1ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1f0:	781b      	ldrb	r3, [r3, #0]
    f1f2:	3301      	adds	r3, #1
    f1f4:	b2da      	uxtb	r2, r3
    f1f6:	f24a 3361 	movw	r3, #41825	; 0xa361
    f1fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1fe:	701a      	strb	r2, [r3, #0]
    f200:	f24a 3361 	movw	r3, #41825	; 0xa361
    f204:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f208:	781b      	ldrb	r3, [r3, #0]
    f20a:	2bff      	cmp	r3, #255	; 0xff
    f20c:	d105      	bne.n	f21a <send_radIR+0x9e6>
    f20e:	f24a 3361 	movw	r3, #41825	; 0xa361
    f212:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f216:	2200      	movs	r2, #0
    f218:	701a      	strb	r2, [r3, #0]
    f21a:	f24a 3361 	movw	r3, #41825	; 0xa361
    f21e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f222:	781b      	ldrb	r3, [r3, #0]
    f224:	461a      	mov	r2, r3
    f226:	f240 03d8 	movw	r3, #216	; 0xd8
    f22a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f22e:	7859      	ldrb	r1, [r3, #1]
    f230:	f24a 3364 	movw	r3, #41828	; 0xa364
    f234:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f238:	5499      	strb	r1, [r3, r2]
    f23a:	4b7a      	ldr	r3, [pc, #488]	; (f424 <send_radIR+0xbf0>)
    f23c:	781a      	ldrb	r2, [r3, #0]
    f23e:	f24a 4365 	movw	r3, #42085	; 0xa465
    f242:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f246:	781b      	ldrb	r3, [r3, #0]
    f248:	4413      	add	r3, r2
    f24a:	b2da      	uxtb	r2, r3
    f24c:	f24a 4365 	movw	r3, #42085	; 0xa465
    f250:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f254:	701a      	strb	r2, [r3, #0]
    f256:	f24a 4366 	movw	r3, #42086	; 0xa466
    f25a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f25e:	781a      	ldrb	r2, [r3, #0]
    f260:	f24a 4365 	movw	r3, #42085	; 0xa465
    f264:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f268:	781b      	ldrb	r3, [r3, #0]
    f26a:	4413      	add	r3, r2
    f26c:	b2da      	uxtb	r2, r3
    f26e:	f24a 4366 	movw	r3, #42086	; 0xa466
    f272:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f276:	701a      	strb	r2, [r3, #0]
    f278:	f24a 3361 	movw	r3, #41825	; 0xa361
    f27c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f280:	781b      	ldrb	r3, [r3, #0]
    f282:	3301      	adds	r3, #1
    f284:	b2da      	uxtb	r2, r3
    f286:	f24a 3361 	movw	r3, #41825	; 0xa361
    f28a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f28e:	701a      	strb	r2, [r3, #0]
    f290:	f24a 3361 	movw	r3, #41825	; 0xa361
    f294:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f298:	781b      	ldrb	r3, [r3, #0]
    f29a:	2bff      	cmp	r3, #255	; 0xff
    f29c:	d105      	bne.n	f2aa <send_radIR+0xa76>
    f29e:	f24a 3361 	movw	r3, #41825	; 0xa361
    f2a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2a6:	2200      	movs	r2, #0
    f2a8:	701a      	strb	r2, [r3, #0]
    f2aa:	f24a 3361 	movw	r3, #41825	; 0xa361
    f2ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2b2:	781b      	ldrb	r3, [r3, #0]
    f2b4:	461a      	mov	r2, r3
    f2b6:	f24a 4365 	movw	r3, #42085	; 0xa465
    f2ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2be:	7819      	ldrb	r1, [r3, #0]
    f2c0:	f24a 3364 	movw	r3, #41828	; 0xa364
    f2c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2c8:	5499      	strb	r1, [r3, r2]
    f2ca:	f24a 3361 	movw	r3, #41825	; 0xa361
    f2ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2d2:	781b      	ldrb	r3, [r3, #0]
    f2d4:	3301      	adds	r3, #1
    f2d6:	b2da      	uxtb	r2, r3
    f2d8:	f24a 3361 	movw	r3, #41825	; 0xa361
    f2dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2e0:	701a      	strb	r2, [r3, #0]
    f2e2:	f24a 3361 	movw	r3, #41825	; 0xa361
    f2e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2ea:	781b      	ldrb	r3, [r3, #0]
    f2ec:	2bff      	cmp	r3, #255	; 0xff
    f2ee:	d105      	bne.n	f2fc <send_radIR+0xac8>
    f2f0:	f24a 3361 	movw	r3, #41825	; 0xa361
    f2f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2f8:	2200      	movs	r2, #0
    f2fa:	701a      	strb	r2, [r3, #0]
    f2fc:	f24a 3361 	movw	r3, #41825	; 0xa361
    f300:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f304:	781b      	ldrb	r3, [r3, #0]
    f306:	461a      	mov	r2, r3
    f308:	f24a 4366 	movw	r3, #42086	; 0xa466
    f30c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f310:	7819      	ldrb	r1, [r3, #0]
    f312:	f24a 3364 	movw	r3, #41828	; 0xa364
    f316:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f31a:	5499      	strb	r1, [r3, r2]
    f31c:	f24a 3361 	movw	r3, #41825	; 0xa361
    f320:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f324:	781b      	ldrb	r3, [r3, #0]
    f326:	3301      	adds	r3, #1
    f328:	b2da      	uxtb	r2, r3
    f32a:	f24a 3361 	movw	r3, #41825	; 0xa361
    f32e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f332:	701a      	strb	r2, [r3, #0]
    f334:	f24a 3361 	movw	r3, #41825	; 0xa361
    f338:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f33c:	781b      	ldrb	r3, [r3, #0]
    f33e:	2bff      	cmp	r3, #255	; 0xff
    f340:	d105      	bne.n	f34e <send_radIR+0xb1a>
    f342:	f24a 3361 	movw	r3, #41825	; 0xa361
    f346:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f34a:	2200      	movs	r2, #0
    f34c:	701a      	strb	r2, [r3, #0]
    f34e:	f242 0339 	movw	r3, #8249	; 0x2039
    f352:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f356:	781b      	ldrb	r3, [r3, #0]
    f358:	b2db      	uxtb	r3, r3
    f35a:	f003 0310 	and.w	r3, r3, #16
    f35e:	2b00      	cmp	r3, #0
    f360:	d15a      	bne.n	f418 <send_radIR+0xbe4>
    f362:	f24a 3362 	movw	r3, #41826	; 0xa362
    f366:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f36a:	781b      	ldrb	r3, [r3, #0]
    f36c:	b2db      	uxtb	r3, r3
    f36e:	461a      	mov	r2, r3
    f370:	f24a 3364 	movw	r3, #41828	; 0xa364
    f374:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f378:	5c9a      	ldrb	r2, [r3, r2]
    f37a:	f24a 4363 	movw	r3, #42083	; 0xa463
    f37e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f382:	701a      	strb	r2, [r3, #0]
    f384:	f24a 4364 	movw	r3, #42084	; 0xa464
    f388:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f38c:	2200      	movs	r2, #0
    f38e:	701a      	strb	r2, [r3, #0]
    f390:	f24a 3362 	movw	r3, #41826	; 0xa362
    f394:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f398:	781b      	ldrb	r3, [r3, #0]
    f39a:	b2db      	uxtb	r3, r3
    f39c:	3301      	adds	r3, #1
    f39e:	b2da      	uxtb	r2, r3
    f3a0:	f24a 3362 	movw	r3, #41826	; 0xa362
    f3a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3a8:	701a      	strb	r2, [r3, #0]
    f3aa:	f24a 3362 	movw	r3, #41826	; 0xa362
    f3ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3b2:	781b      	ldrb	r3, [r3, #0]
    f3b4:	b2db      	uxtb	r3, r3
    f3b6:	2bff      	cmp	r3, #255	; 0xff
    f3b8:	d105      	bne.n	f3c6 <send_radIR+0xb92>
    f3ba:	f24a 3362 	movw	r3, #41826	; 0xa362
    f3be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3c2:	2200      	movs	r2, #0
    f3c4:	701a      	strb	r2, [r3, #0]
    f3c6:	f242 0338 	movw	r3, #8248	; 0x2038
    f3ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3ce:	f242 0238 	movw	r2, #8248	; 0x2038
    f3d2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f3d6:	7812      	ldrb	r2, [r2, #0]
    f3d8:	b2d2      	uxtb	r2, r2
    f3da:	f042 0201 	orr.w	r2, r2, #1
    f3de:	b2d2      	uxtb	r2, r2
    f3e0:	701a      	strb	r2, [r3, #0]
    f3e2:	f242 0339 	movw	r3, #8249	; 0x2039
    f3e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3ea:	f242 0239 	movw	r2, #8249	; 0x2039
    f3ee:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f3f2:	7812      	ldrb	r2, [r2, #0]
    f3f4:	b2d2      	uxtb	r2, r2
    f3f6:	f042 0210 	orr.w	r2, r2, #16
    f3fa:	b2d2      	uxtb	r2, r2
    f3fc:	701a      	strb	r2, [r3, #0]
    f3fe:	e00b      	b.n	f418 <send_radIR+0xbe4>
    f400:	f24a 3360 	movw	r3, #41824	; 0xa360
    f404:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f408:	781b      	ldrb	r3, [r3, #0]
    f40a:	3301      	adds	r3, #1
    f40c:	b2da      	uxtb	r2, r3
    f40e:	f24a 3360 	movw	r3, #41824	; 0xa360
    f412:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f416:	701a      	strb	r2, [r3, #0]
}
    f418:	46bd      	mov	sp, r7
    f41a:	f85d 7b04 	ldr.w	r7, [sp], #4
    f41e:	4770      	bx	lr
    f420:	200000d7 	.word	0x200000d7
    f424:	200000d9 	.word	0x200000d9

0000f428 <send_takeOff>:

void send_takeOff(void){
    f428:	b580      	push	{r7, lr}
    f42a:	af00      	add	r7, sp, #0
  if (gps_pos_available){
    f42c:	f24a 43f6 	movw	r3, #42230	; 0xa4f6
    f430:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f434:	781b      	ldrb	r3, [r3, #0]
    f436:	2b00      	cmp	r3, #0
    f438:	f000 8200 	beq.w	f83c <send_takeOff+0x414>
     if (!estimator_flight_time && (estimator_hspeed_mod > MIN_SPEED_FOR_TAKEOFF)) {
    f43c:	f64a 1344 	movw	r3, #43332	; 0xa944
    f440:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f444:	881b      	ldrh	r3, [r3, #0]
    f446:	2b00      	cmp	r3, #0
    f448:	f040 81f2 	bne.w	f830 <send_takeOff+0x408>
    f44c:	f64a 134c 	movw	r3, #43340	; 0xa94c
    f450:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f454:	681b      	ldr	r3, [r3, #0]
    f456:	4618      	mov	r0, r3
    f458:	f04f 0100 	mov.w	r1, #0
    f45c:	f2c4 01a0 	movt	r1, #16544	; 0x40a0
    f460:	f007 fe16 	bl	17090 <__aeabi_fcmpgt>
    f464:	4603      	mov	r3, r0
    f466:	2b00      	cmp	r3, #0
    f468:	f000 81e2 	beq.w	f830 <send_takeOff+0x408>
        estimator_flight_time = 1;
    f46c:	f64a 1344 	movw	r3, #43332	; 0xa944
    f470:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f474:	2201      	movs	r2, #1
    f476:	801a      	strh	r2, [r3, #0]
        launch = TRUE; /* Not set in non auto launch */
    f478:	f24a 3358 	movw	r3, #41816	; 0xa358
    f47c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f480:	2201      	movs	r2, #1
    f482:	701a      	strb	r2, [r3, #0]
        DOWNLINK_SEND_TAKEOFF(&cputime);
    f484:	f24a 3361 	movw	r3, #41825	; 0xa361
    f488:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f48c:	781a      	ldrb	r2, [r3, #0]
    f48e:	f24a 3362 	movw	r3, #41826	; 0xa362
    f492:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f496:	781b      	ldrb	r3, [r3, #0]
    f498:	b2db      	uxtb	r3, r3
    f49a:	429a      	cmp	r2, r3
    f49c:	d313      	bcc.n	f4c6 <send_takeOff+0x9e>
    f49e:	f24a 3362 	movw	r3, #41826	; 0xa362
    f4a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4a6:	781b      	ldrb	r3, [r3, #0]
    f4a8:	b2db      	uxtb	r3, r3
    f4aa:	461a      	mov	r2, r3
    f4ac:	f24a 3361 	movw	r3, #41825	; 0xa361
    f4b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4b4:	781b      	ldrb	r3, [r3, #0]
    f4b6:	1ad3      	subs	r3, r2, r3
    f4b8:	33ff      	adds	r3, #255	; 0xff
    f4ba:	2b06      	cmp	r3, #6
    f4bc:	bfd4      	ite	le
    f4be:	2300      	movle	r3, #0
    f4c0:	2301      	movgt	r3, #1
    f4c2:	b2db      	uxtb	r3, r3
    f4c4:	e011      	b.n	f4ea <send_takeOff+0xc2>
    f4c6:	f24a 3362 	movw	r3, #41826	; 0xa362
    f4ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4ce:	781b      	ldrb	r3, [r3, #0]
    f4d0:	b2db      	uxtb	r3, r3
    f4d2:	461a      	mov	r2, r3
    f4d4:	f24a 3361 	movw	r3, #41825	; 0xa361
    f4d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4dc:	781b      	ldrb	r3, [r3, #0]
    f4de:	1ad3      	subs	r3, r2, r3
    f4e0:	2b06      	cmp	r3, #6
    f4e2:	bfd4      	ite	le
    f4e4:	2300      	movle	r3, #0
    f4e6:	2301      	movgt	r3, #1
    f4e8:	b2db      	uxtb	r3, r3
    f4ea:	2b00      	cmp	r3, #0
    f4ec:	f000 8194 	beq.w	f818 <send_takeOff+0x3f0>
    f4f0:	f24a 3361 	movw	r3, #41825	; 0xa361
    f4f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4f8:	781b      	ldrb	r3, [r3, #0]
    f4fa:	461a      	mov	r2, r3
    f4fc:	f24a 3364 	movw	r3, #41828	; 0xa364
    f500:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f504:	2105      	movs	r1, #5
    f506:	5499      	strb	r1, [r3, r2]
    f508:	f24a 3361 	movw	r3, #41825	; 0xa361
    f50c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f510:	781b      	ldrb	r3, [r3, #0]
    f512:	3301      	adds	r3, #1
    f514:	b2da      	uxtb	r2, r3
    f516:	f24a 3361 	movw	r3, #41825	; 0xa361
    f51a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f51e:	701a      	strb	r2, [r3, #0]
    f520:	f24a 3361 	movw	r3, #41825	; 0xa361
    f524:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f528:	781b      	ldrb	r3, [r3, #0]
    f52a:	2bff      	cmp	r3, #255	; 0xff
    f52c:	d105      	bne.n	f53a <send_takeOff+0x112>
    f52e:	f24a 3361 	movw	r3, #41825	; 0xa361
    f532:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f536:	2200      	movs	r2, #0
    f538:	701a      	strb	r2, [r3, #0]
    f53a:	f24a 3361 	movw	r3, #41825	; 0xa361
    f53e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f542:	781b      	ldrb	r3, [r3, #0]
    f544:	461a      	mov	r2, r3
    f546:	f24a 3364 	movw	r3, #41828	; 0xa364
    f54a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f54e:	2104      	movs	r1, #4
    f550:	5499      	strb	r1, [r3, r2]
    f552:	f24a 3361 	movw	r3, #41825	; 0xa361
    f556:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f55a:	781b      	ldrb	r3, [r3, #0]
    f55c:	3301      	adds	r3, #1
    f55e:	b2da      	uxtb	r2, r3
    f560:	f24a 3361 	movw	r3, #41825	; 0xa361
    f564:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f568:	701a      	strb	r2, [r3, #0]
    f56a:	f24a 3361 	movw	r3, #41825	; 0xa361
    f56e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f572:	781b      	ldrb	r3, [r3, #0]
    f574:	2bff      	cmp	r3, #255	; 0xff
    f576:	d105      	bne.n	f584 <send_takeOff+0x15c>
    f578:	f24a 3361 	movw	r3, #41825	; 0xa361
    f57c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f580:	2200      	movs	r2, #0
    f582:	701a      	strb	r2, [r3, #0]
    f584:	f24a 4365 	movw	r3, #42085	; 0xa465
    f588:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f58c:	2204      	movs	r2, #4
    f58e:	701a      	strb	r2, [r3, #0]
    f590:	f24a 4366 	movw	r3, #42086	; 0xa466
    f594:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f598:	2204      	movs	r2, #4
    f59a:	701a      	strb	r2, [r3, #0]
    f59c:	f24a 3361 	movw	r3, #41825	; 0xa361
    f5a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5a4:	781b      	ldrb	r3, [r3, #0]
    f5a6:	461a      	mov	r2, r3
    f5a8:	f24a 3342 	movw	r3, #41794	; 0xa342
    f5ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5b0:	7819      	ldrb	r1, [r3, #0]
    f5b2:	f24a 3364 	movw	r3, #41828	; 0xa364
    f5b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5ba:	5499      	strb	r1, [r3, r2]
    f5bc:	f24a 3342 	movw	r3, #41794	; 0xa342
    f5c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5c4:	781a      	ldrb	r2, [r3, #0]
    f5c6:	f24a 4365 	movw	r3, #42085	; 0xa465
    f5ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5ce:	781b      	ldrb	r3, [r3, #0]
    f5d0:	4413      	add	r3, r2
    f5d2:	b2da      	uxtb	r2, r3
    f5d4:	f24a 4365 	movw	r3, #42085	; 0xa465
    f5d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5dc:	701a      	strb	r2, [r3, #0]
    f5de:	f24a 4366 	movw	r3, #42086	; 0xa466
    f5e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5e6:	781a      	ldrb	r2, [r3, #0]
    f5e8:	f24a 4365 	movw	r3, #42085	; 0xa465
    f5ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5f0:	781b      	ldrb	r3, [r3, #0]
    f5f2:	4413      	add	r3, r2
    f5f4:	b2da      	uxtb	r2, r3
    f5f6:	f24a 4366 	movw	r3, #42086	; 0xa466
    f5fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5fe:	701a      	strb	r2, [r3, #0]
    f600:	f24a 3361 	movw	r3, #41825	; 0xa361
    f604:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f608:	781b      	ldrb	r3, [r3, #0]
    f60a:	3301      	adds	r3, #1
    f60c:	b2da      	uxtb	r2, r3
    f60e:	f24a 3361 	movw	r3, #41825	; 0xa361
    f612:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f616:	701a      	strb	r2, [r3, #0]
    f618:	f24a 3361 	movw	r3, #41825	; 0xa361
    f61c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f620:	781b      	ldrb	r3, [r3, #0]
    f622:	2bff      	cmp	r3, #255	; 0xff
    f624:	d105      	bne.n	f632 <send_takeOff+0x20a>
    f626:	f24a 3361 	movw	r3, #41825	; 0xa361
    f62a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f62e:	2200      	movs	r2, #0
    f630:	701a      	strb	r2, [r3, #0]
    f632:	f24a 3361 	movw	r3, #41825	; 0xa361
    f636:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f63a:	781b      	ldrb	r3, [r3, #0]
    f63c:	461a      	mov	r2, r3
    f63e:	f24a 3342 	movw	r3, #41794	; 0xa342
    f642:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f646:	7859      	ldrb	r1, [r3, #1]
    f648:	f24a 3364 	movw	r3, #41828	; 0xa364
    f64c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f650:	5499      	strb	r1, [r3, r2]
    f652:	4b7b      	ldr	r3, [pc, #492]	; (f840 <send_takeOff+0x418>)
    f654:	781a      	ldrb	r2, [r3, #0]
    f656:	f24a 4365 	movw	r3, #42085	; 0xa465
    f65a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f65e:	781b      	ldrb	r3, [r3, #0]
    f660:	4413      	add	r3, r2
    f662:	b2da      	uxtb	r2, r3
    f664:	f24a 4365 	movw	r3, #42085	; 0xa465
    f668:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f66c:	701a      	strb	r2, [r3, #0]
    f66e:	f24a 4366 	movw	r3, #42086	; 0xa466
    f672:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f676:	781a      	ldrb	r2, [r3, #0]
    f678:	f24a 4365 	movw	r3, #42085	; 0xa465
    f67c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f680:	781b      	ldrb	r3, [r3, #0]
    f682:	4413      	add	r3, r2
    f684:	b2da      	uxtb	r2, r3
    f686:	f24a 4366 	movw	r3, #42086	; 0xa466
    f68a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f68e:	701a      	strb	r2, [r3, #0]
    f690:	f24a 3361 	movw	r3, #41825	; 0xa361
    f694:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f698:	781b      	ldrb	r3, [r3, #0]
    f69a:	3301      	adds	r3, #1
    f69c:	b2da      	uxtb	r2, r3
    f69e:	f24a 3361 	movw	r3, #41825	; 0xa361
    f6a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6a6:	701a      	strb	r2, [r3, #0]
    f6a8:	f24a 3361 	movw	r3, #41825	; 0xa361
    f6ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6b0:	781b      	ldrb	r3, [r3, #0]
    f6b2:	2bff      	cmp	r3, #255	; 0xff
    f6b4:	d105      	bne.n	f6c2 <send_takeOff+0x29a>
    f6b6:	f24a 3361 	movw	r3, #41825	; 0xa361
    f6ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6be:	2200      	movs	r2, #0
    f6c0:	701a      	strb	r2, [r3, #0]
    f6c2:	f24a 3361 	movw	r3, #41825	; 0xa361
    f6c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6ca:	781b      	ldrb	r3, [r3, #0]
    f6cc:	461a      	mov	r2, r3
    f6ce:	f24a 4365 	movw	r3, #42085	; 0xa465
    f6d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6d6:	7819      	ldrb	r1, [r3, #0]
    f6d8:	f24a 3364 	movw	r3, #41828	; 0xa364
    f6dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6e0:	5499      	strb	r1, [r3, r2]
    f6e2:	f24a 3361 	movw	r3, #41825	; 0xa361
    f6e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6ea:	781b      	ldrb	r3, [r3, #0]
    f6ec:	3301      	adds	r3, #1
    f6ee:	b2da      	uxtb	r2, r3
    f6f0:	f24a 3361 	movw	r3, #41825	; 0xa361
    f6f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6f8:	701a      	strb	r2, [r3, #0]
    f6fa:	f24a 3361 	movw	r3, #41825	; 0xa361
    f6fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f702:	781b      	ldrb	r3, [r3, #0]
    f704:	2bff      	cmp	r3, #255	; 0xff
    f706:	d105      	bne.n	f714 <send_takeOff+0x2ec>
    f708:	f24a 3361 	movw	r3, #41825	; 0xa361
    f70c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f710:	2200      	movs	r2, #0
    f712:	701a      	strb	r2, [r3, #0]
    f714:	f24a 3361 	movw	r3, #41825	; 0xa361
    f718:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f71c:	781b      	ldrb	r3, [r3, #0]
    f71e:	461a      	mov	r2, r3
    f720:	f24a 4366 	movw	r3, #42086	; 0xa466
    f724:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f728:	7819      	ldrb	r1, [r3, #0]
    f72a:	f24a 3364 	movw	r3, #41828	; 0xa364
    f72e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f732:	5499      	strb	r1, [r3, r2]
    f734:	f24a 3361 	movw	r3, #41825	; 0xa361
    f738:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f73c:	781b      	ldrb	r3, [r3, #0]
    f73e:	3301      	adds	r3, #1
    f740:	b2da      	uxtb	r2, r3
    f742:	f24a 3361 	movw	r3, #41825	; 0xa361
    f746:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f74a:	701a      	strb	r2, [r3, #0]
    f74c:	f24a 3361 	movw	r3, #41825	; 0xa361
    f750:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f754:	781b      	ldrb	r3, [r3, #0]
    f756:	2bff      	cmp	r3, #255	; 0xff
    f758:	d105      	bne.n	f766 <send_takeOff+0x33e>
    f75a:	f24a 3361 	movw	r3, #41825	; 0xa361
    f75e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f762:	2200      	movs	r2, #0
    f764:	701a      	strb	r2, [r3, #0]
    f766:	f242 0339 	movw	r3, #8249	; 0x2039
    f76a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f76e:	781b      	ldrb	r3, [r3, #0]
    f770:	b2db      	uxtb	r3, r3
    f772:	f003 0310 	and.w	r3, r3, #16
    f776:	2b00      	cmp	r3, #0
    f778:	d15a      	bne.n	f830 <send_takeOff+0x408>
    f77a:	f24a 3362 	movw	r3, #41826	; 0xa362
    f77e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f782:	781b      	ldrb	r3, [r3, #0]
    f784:	b2db      	uxtb	r3, r3
    f786:	461a      	mov	r2, r3
    f788:	f24a 3364 	movw	r3, #41828	; 0xa364
    f78c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f790:	5c9a      	ldrb	r2, [r3, r2]
    f792:	f24a 4363 	movw	r3, #42083	; 0xa463
    f796:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f79a:	701a      	strb	r2, [r3, #0]
    f79c:	f24a 4364 	movw	r3, #42084	; 0xa464
    f7a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7a4:	2200      	movs	r2, #0
    f7a6:	701a      	strb	r2, [r3, #0]
    f7a8:	f24a 3362 	movw	r3, #41826	; 0xa362
    f7ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7b0:	781b      	ldrb	r3, [r3, #0]
    f7b2:	b2db      	uxtb	r3, r3
    f7b4:	3301      	adds	r3, #1
    f7b6:	b2da      	uxtb	r2, r3
    f7b8:	f24a 3362 	movw	r3, #41826	; 0xa362
    f7bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7c0:	701a      	strb	r2, [r3, #0]
    f7c2:	f24a 3362 	movw	r3, #41826	; 0xa362
    f7c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7ca:	781b      	ldrb	r3, [r3, #0]
    f7cc:	b2db      	uxtb	r3, r3
    f7ce:	2bff      	cmp	r3, #255	; 0xff
    f7d0:	d105      	bne.n	f7de <send_takeOff+0x3b6>
    f7d2:	f24a 3362 	movw	r3, #41826	; 0xa362
    f7d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7da:	2200      	movs	r2, #0
    f7dc:	701a      	strb	r2, [r3, #0]
    f7de:	f242 0338 	movw	r3, #8248	; 0x2038
    f7e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7e6:	f242 0238 	movw	r2, #8248	; 0x2038
    f7ea:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f7ee:	7812      	ldrb	r2, [r2, #0]
    f7f0:	b2d2      	uxtb	r2, r2
    f7f2:	f042 0201 	orr.w	r2, r2, #1
    f7f6:	b2d2      	uxtb	r2, r2
    f7f8:	701a      	strb	r2, [r3, #0]
    f7fa:	f242 0339 	movw	r3, #8249	; 0x2039
    f7fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f802:	f242 0239 	movw	r2, #8249	; 0x2039
    f806:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f80a:	7812      	ldrb	r2, [r2, #0]
    f80c:	b2d2      	uxtb	r2, r2
    f80e:	f042 0210 	orr.w	r2, r2, #16
    f812:	b2d2      	uxtb	r2, r2
    f814:	701a      	strb	r2, [r3, #0]
    f816:	e00b      	b.n	f830 <send_takeOff+0x408>
    f818:	f24a 3360 	movw	r3, #41824	; 0xa360
    f81c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f820:	781b      	ldrb	r3, [r3, #0]
    f822:	3301      	adds	r3, #1
    f824:	b2da      	uxtb	r2, r3
    f826:	f24a 3360 	movw	r3, #41824	; 0xa360
    f82a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f82e:	701a      	strb	r2, [r3, #0]
     }
     gps_pos_available = FALSE; 
    f830:	f24a 43f6 	movw	r3, #42230	; 0xa4f6
    f834:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f838:	2200      	movs	r2, #0
    f83a:	701a      	strb	r2, [r3, #0]
  }
  //vPrintString("S_16 receive_gps_data_task end!\n\r");
}
    f83c:	bd80      	pop	{r7, pc}
    f83e:	bf00      	nop
    f840:	2000a343 	.word	0x2000a343
    f844:	f3af 8000 	nop.w

0000f848 <modem_init>:
uint8_t    tx_byte;
uint8_t    tx_byte_idx;

uint8_t ck_a, ck_b;

void modem_init( void ) {
    f848:	b480      	push	{r7}
    f84a:	af00      	add	r7, sp, #0
  /* 
     on >= V1.2 boards, 4MHz modem clock is generated
     by one PWM module.
  */
#if defined CTL_BRD_V1_2 || defined CTL_BRD_V1_2_1
  MODEM_OSC_DDR |= _BV(MODEM_OSC);
    f84c:	f242 0317 	movw	r3, #8215	; 0x2017
    f850:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f854:	f242 0217 	movw	r2, #8215	; 0x2017
    f858:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f85c:	7812      	ldrb	r2, [r2, #0]
    f85e:	b2d2      	uxtb	r2, r2
    f860:	f042 0210 	orr.w	r2, r2, #16
    f864:	b2d2      	uxtb	r2, r2
    f866:	701a      	strb	r2, [r3, #0]
  OCR0 = 1; /* 4MhZ */
    f868:	f242 0331 	movw	r3, #8241	; 0x2031
    f86c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f870:	2201      	movs	r2, #1
    f872:	701a      	strb	r2, [r3, #0]
  TCCR0 = _BV(WGM01) | _BV(COM00) | _BV(CS00);
    f874:	f242 0333 	movw	r3, #8243	; 0x2033
    f878:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f87c:	2219      	movs	r2, #25
    f87e:	701a      	strb	r2, [r3, #0]
#endif

  /* setup TX_EN and TX_DATA pin as output */
  MODEM_TX_DDR |= _BV(MODEM_TX_EN) | _BV(MODEM_TX_DATA);
    f880:	f242 0311 	movw	r3, #8209	; 0x2011
    f884:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f888:	f242 0211 	movw	r2, #8209	; 0x2011
    f88c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f890:	7812      	ldrb	r2, [r2, #0]
    f892:	b2d2      	uxtb	r2, r2
    f894:	f062 023f 	orn	r2, r2, #63	; 0x3f
    f898:	b2d2      	uxtb	r2, r2
    f89a:	701a      	strb	r2, [r3, #0]
  /* data idles hight */
  sbi(MODEM_TX_PORT, MODEM_TX_DATA);
    f89c:	f242 0312 	movw	r3, #8210	; 0x2012
    f8a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8a4:	f242 0212 	movw	r2, #8210	; 0x2012
    f8a8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f8ac:	7812      	ldrb	r2, [r2, #0]
    f8ae:	b2d2      	uxtb	r2, r2
    f8b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    f8b4:	b2d2      	uxtb	r2, r2
    f8b6:	701a      	strb	r2, [r3, #0]
  /* enable transmitter */
  cbi(MODEM_TX_PORT, MODEM_TX_EN);
    f8b8:	f242 0312 	movw	r3, #8210	; 0x2012
    f8bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8c0:	f242 0212 	movw	r2, #8210	; 0x2012
    f8c4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f8c8:	7812      	ldrb	r2, [r2, #0]
    f8ca:	b2d2      	uxtb	r2, r2
    f8cc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    f8d0:	b2d2      	uxtb	r2, r2
    f8d2:	701a      	strb	r2, [r3, #0]
  /* set interrupt on failing edge of clock */
  MODEM_CLK_INT_REG |=  MODEM_CLK_INT_CFG;
    f8d4:	f242 033a 	movw	r3, #8250	; 0x203a
    f8d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8dc:	f242 023a 	movw	r2, #8250	; 0x203a
    f8e0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f8e4:	7812      	ldrb	r2, [r2, #0]
    f8e6:	b2d2      	uxtb	r2, r2
    f8e8:	f042 0202 	orr.w	r2, r2, #2
    f8ec:	b2d2      	uxtb	r2, r2
    f8ee:	701a      	strb	r2, [r3, #0]
}
    f8f0:	46bd      	mov	sp, r7
    f8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    f8f6:	4770      	bx	lr

0000f8f8 <__vector_5>:

SIGNAL( MODEM_CLK_INT_SIG ) {
    f8f8:	b480      	push	{r7}
    f8fa:	af00      	add	r7, sp, #0
  /*  start bit         */
  if (tx_byte_idx == 0)
    f8fc:	f24a 4364 	movw	r3, #42084	; 0xa464
    f900:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f904:	781b      	ldrb	r3, [r3, #0]
    f906:	2b00      	cmp	r3, #0
    f908:	d10e      	bne.n	f928 <__vector_5+0x30>
    cbi(MODEM_TX_PORT, MODEM_TX_DATA);
    f90a:	f242 0312 	movw	r3, #8210	; 0x2012
    f90e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f912:	f242 0212 	movw	r2, #8210	; 0x2012
    f916:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f91a:	7812      	ldrb	r2, [r2, #0]
    f91c:	b2d2      	uxtb	r2, r2
    f91e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    f922:	b2d2      	uxtb	r2, r2
    f924:	701a      	strb	r2, [r3, #0]
    f926:	e047      	b.n	f9b8 <__vector_5+0xc0>
  /* 8 data bits        */ 
  else if (tx_byte_idx < 9) {
    f928:	f24a 4364 	movw	r3, #42084	; 0xa464
    f92c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f930:	781b      	ldrb	r3, [r3, #0]
    f932:	2b08      	cmp	r3, #8
    f934:	d832      	bhi.n	f99c <__vector_5+0xa4>
    if (tx_byte & 0x01)
    f936:	f24a 4363 	movw	r3, #42083	; 0xa463
    f93a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f93e:	781b      	ldrb	r3, [r3, #0]
    f940:	f003 0301 	and.w	r3, r3, #1
    f944:	2b00      	cmp	r3, #0
    f946:	d00e      	beq.n	f966 <__vector_5+0x6e>
      sbi(MODEM_TX_PORT, MODEM_TX_DATA);
    f948:	f242 0312 	movw	r3, #8210	; 0x2012
    f94c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f950:	f242 0212 	movw	r2, #8210	; 0x2012
    f954:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f958:	7812      	ldrb	r2, [r2, #0]
    f95a:	b2d2      	uxtb	r2, r2
    f95c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    f960:	b2d2      	uxtb	r2, r2
    f962:	701a      	strb	r2, [r3, #0]
    f964:	e00d      	b.n	f982 <__vector_5+0x8a>
    else
      cbi(MODEM_TX_PORT, MODEM_TX_DATA);
    f966:	f242 0312 	movw	r3, #8210	; 0x2012
    f96a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f96e:	f242 0212 	movw	r2, #8210	; 0x2012
    f972:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f976:	7812      	ldrb	r2, [r2, #0]
    f978:	b2d2      	uxtb	r2, r2
    f97a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    f97e:	b2d2      	uxtb	r2, r2
    f980:	701a      	strb	r2, [r3, #0]
    tx_byte >>= 1;
    f982:	f24a 4363 	movw	r3, #42083	; 0xa463
    f986:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f98a:	781b      	ldrb	r3, [r3, #0]
    f98c:	085b      	lsrs	r3, r3, #1
    f98e:	b2da      	uxtb	r2, r3
    f990:	f24a 4363 	movw	r3, #42083	; 0xa463
    f994:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f998:	701a      	strb	r2, [r3, #0]
    f99a:	e00d      	b.n	f9b8 <__vector_5+0xc0>
  }
  /* stop_bit           */
  else {
    sbi(MODEM_TX_PORT, MODEM_TX_DATA); 
    f99c:	f242 0312 	movw	r3, #8210	; 0x2012
    f9a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9a4:	f242 0212 	movw	r2, #8210	; 0x2012
    f9a8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f9ac:	7812      	ldrb	r2, [r2, #0]
    f9ae:	b2d2      	uxtb	r2, r2
    f9b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    f9b4:	b2d2      	uxtb	r2, r2
    f9b6:	701a      	strb	r2, [r3, #0]
  }
  tx_byte_idx++;
    f9b8:	f24a 4364 	movw	r3, #42084	; 0xa464
    f9bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9c0:	781b      	ldrb	r3, [r3, #0]
    f9c2:	3301      	adds	r3, #1
    f9c4:	b2da      	uxtb	r2, r3
    f9c6:	f24a 4364 	movw	r3, #42084	; 0xa464
    f9ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9ce:	701a      	strb	r2, [r3, #0]
  /* next byte          */
  if (tx_byte_idx >= 10) {
    f9d0:	f24a 4364 	movw	r3, #42084	; 0xa464
    f9d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9d8:	781b      	ldrb	r3, [r3, #0]
    f9da:	2b09      	cmp	r3, #9
    f9dc:	d94d      	bls.n	fa7a <__vector_5+0x182>
    /*  if we have nothing left to transmit */
    if( tx_head == tx_tail ) {
    f9de:	f24a 3361 	movw	r3, #41825	; 0xa361
    f9e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9e6:	781a      	ldrb	r2, [r3, #0]
    f9e8:	f24a 3362 	movw	r3, #41826	; 0xa362
    f9ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9f0:	781b      	ldrb	r3, [r3, #0]
    f9f2:	b2db      	uxtb	r3, r3
    f9f4:	429a      	cmp	r2, r3
    f9f6:	d10e      	bne.n	fa16 <__vector_5+0x11e>
      /* disable clock interrupt            */
      cbi( EIMSK, MODEM_CLK_INT );
    f9f8:	f242 0339 	movw	r3, #8249	; 0x2039
    f9fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa00:	f242 0239 	movw	r2, #8249	; 0x2039
    fa04:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fa08:	7812      	ldrb	r2, [r2, #0]
    fa0a:	b2d2      	uxtb	r2, r2
    fa0c:	f022 0210 	bic.w	r2, r2, #16
    fa10:	b2d2      	uxtb	r2, r2
    fa12:	701a      	strb	r2, [r3, #0]
    fa14:	e031      	b.n	fa7a <__vector_5+0x182>
    } else {
      /* else load next byte                  */
      MODEM_LOAD_NEXT_BYTE();  
    fa16:	f24a 3362 	movw	r3, #41826	; 0xa362
    fa1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa1e:	781b      	ldrb	r3, [r3, #0]
    fa20:	b2db      	uxtb	r3, r3
    fa22:	461a      	mov	r2, r3
    fa24:	f24a 3364 	movw	r3, #41828	; 0xa364
    fa28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa2c:	5c9a      	ldrb	r2, [r3, r2]
    fa2e:	f24a 4363 	movw	r3, #42083	; 0xa463
    fa32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa36:	701a      	strb	r2, [r3, #0]
    fa38:	f24a 4364 	movw	r3, #42084	; 0xa464
    fa3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa40:	2200      	movs	r2, #0
    fa42:	701a      	strb	r2, [r3, #0]
    fa44:	f24a 3362 	movw	r3, #41826	; 0xa362
    fa48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa4c:	781b      	ldrb	r3, [r3, #0]
    fa4e:	b2db      	uxtb	r3, r3
    fa50:	3301      	adds	r3, #1
    fa52:	b2da      	uxtb	r2, r3
    fa54:	f24a 3362 	movw	r3, #41826	; 0xa362
    fa58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa5c:	701a      	strb	r2, [r3, #0]
    fa5e:	f24a 3362 	movw	r3, #41826	; 0xa362
    fa62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa66:	781b      	ldrb	r3, [r3, #0]
    fa68:	b2db      	uxtb	r3, r3
    fa6a:	2bff      	cmp	r3, #255	; 0xff
    fa6c:	d105      	bne.n	fa7a <__vector_5+0x182>
    fa6e:	f24a 3362 	movw	r3, #41826	; 0xa362
    fa72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa76:	2200      	movs	r2, #0
    fa78:	701a      	strb	r2, [r3, #0]
    }
  }
}
    fa7a:	46bd      	mov	sp, r7
    fa7c:	f85d 7b04 	ldr.w	r7, [sp], #4
    fa80:	4770      	bx	lr
    fa82:	bf00      	nop

0000fa84 <link_fbw_init>:
uint8_t link_fbw_fbw_nb_err;

static uint8_t idx_buf;
static uint8_t xor_in, xor_out;

void link_fbw_init(void) {
    fa84:	b480      	push	{r7}
    fa86:	af00      	add	r7, sp, #0
  link_fbw_nb_err;
    fa88:	f24a 4397 	movw	r3, #42135	; 0xa497
    fa8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa90:	781b      	ldrb	r3, [r3, #0]
  link_fbw_receive_complete = FALSE;  
    fa92:	f240 03d2 	movw	r3, #210	; 0xd2
    fa96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa9a:	2200      	movs	r2, #0
    fa9c:	701a      	strb	r2, [r3, #0]
}
    fa9e:	46bd      	mov	sp, r7
    faa0:	f85d 7b04 	ldr.w	r7, [sp], #4
    faa4:	4770      	bx	lr
    faa6:	bf00      	nop

0000faa8 <link_fbw_send>:

void link_fbw_send(void) {
    faa8:	b480      	push	{r7}
    faaa:	b083      	sub	sp, #12
    faac:	af00      	add	r7, sp, #0
    //vPrintString("S_7 link_fbw_send start! \n\r"); //SunnyBeike

    if (spi_cur_slave != SPI_NONE) 
    faae:	f24a 439c 	movw	r3, #42140	; 0xa49c
    fab2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fab6:	781b      	ldrb	r3, [r3, #0]
    fab8:	b2db      	uxtb	r3, r3
    faba:	2b00      	cmp	r3, #0
    fabc:	d00c      	beq.n	fad8 <link_fbw_send+0x30>
    {
        spi_nb_ovrn++;
    fabe:	f24a 439d 	movw	r3, #42141	; 0xa49d
    fac2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fac6:	781b      	ldrb	r3, [r3, #0]
    fac8:	3301      	adds	r3, #1
    faca:	b2da      	uxtb	r2, r3
    facc:	f24a 439d 	movw	r3, #42141	; 0xa49d
    fad0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fad4:	701a      	strb	r2, [r3, #0]
        //vPrintString("S_7 link_fbw_send end! \n\r"); //SunnyBeike
        return;
    fad6:	e064      	b.n	fba2 <link_fbw_send+0xfa>
    }

    /* Enable SPI, Master, set clock rate fck/16 */ 
    SPI_START(_BV(SPE) | _BV(MSTR) | _BV(SPR0)); // | _BV(SPR1);
    fad8:	f242 030d 	movw	r3, #8205	; 0x200d
    fadc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fae0:	2251      	movs	r2, #81	; 0x51
    fae2:	701a      	strb	r2, [r3, #0]
    fae4:	f242 030e 	movw	r3, #8206	; 0x200e
    fae8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    faec:	781b      	ldrb	r3, [r3, #0]
    faee:	b2db      	uxtb	r3, r3
    faf0:	b2db      	uxtb	r3, r3
    faf2:	b25b      	sxtb	r3, r3
    faf4:	2b00      	cmp	r3, #0
    faf6:	da05      	bge.n	fb04 <link_fbw_send+0x5c>
    faf8:	f242 030f 	movw	r3, #8207	; 0x200f
    fafc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb00:	781b      	ldrb	r3, [r3, #0]
    fb02:	71fb      	strb	r3, [r7, #7]
    fb04:	f242 030d 	movw	r3, #8205	; 0x200d
    fb08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb0c:	f242 020d 	movw	r2, #8205	; 0x200d
    fb10:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fb14:	7812      	ldrb	r2, [r2, #0]
    fb16:	b2d2      	uxtb	r2, r2
    fb18:	f062 027f 	orn	r2, r2, #127	; 0x7f
    fb1c:	b2d2      	uxtb	r2, r2
    fb1e:	701a      	strb	r2, [r3, #0]
    SPI_SELECT_SLAVE0();
    fb20:	f24a 439c 	movw	r3, #42140	; 0xa49c
    fb24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb28:	2201      	movs	r2, #1
    fb2a:	701a      	strb	r2, [r3, #0]
    fb2c:	f242 0318 	movw	r3, #8216	; 0x2018
    fb30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb34:	f242 0218 	movw	r2, #8216	; 0x2018
    fb38:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fb3c:	7812      	ldrb	r2, [r2, #0]
    fb3e:	b2d2      	uxtb	r2, r2
    fb40:	f022 0201 	bic.w	r2, r2, #1
    fb44:	b2d2      	uxtb	r2, r2
    fb46:	701a      	strb	r2, [r3, #0]

    idx_buf = 0;
    fb48:	f24a 4399 	movw	r3, #42137	; 0xa499
    fb4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb50:	2200      	movs	r2, #0
    fb52:	701a      	strb	r2, [r3, #0]
    xor_in = 0;
    fb54:	f24a 439a 	movw	r3, #42138	; 0xa49a
    fb58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb5c:	2200      	movs	r2, #0
    fb5e:	701a      	strb	r2, [r3, #0]
    xor_out = ((uint8_t*)&to_fbw)[idx_buf];
    fb60:	f24a 4399 	movw	r3, #42137	; 0xa499
    fb64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb68:	781b      	ldrb	r3, [r3, #0]
    fb6a:	461a      	mov	r2, r3
    fb6c:	f24a 4380 	movw	r3, #42112	; 0xa480
    fb70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb74:	4413      	add	r3, r2
    fb76:	781a      	ldrb	r2, [r3, #0]
    fb78:	f24a 439b 	movw	r3, #42139	; 0xa49b
    fb7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb80:	701a      	strb	r2, [r3, #0]
    SPDR = xor_out;
    fb82:	f242 030f 	movw	r3, #8207	; 0x200f
    fb86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb8a:	f24a 429b 	movw	r2, #42139	; 0xa49b
    fb8e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fb92:	7812      	ldrb	r2, [r2, #0]
    fb94:	701a      	strb	r2, [r3, #0]
    link_fbw_receive_valid = FALSE;
    fb96:	f24a 4396 	movw	r3, #42134	; 0xa496
    fb9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb9e:	2200      	movs	r2, #0
    fba0:	701a      	strb	r2, [r3, #0]
    // Other bytes will follow SIG_SPI interrupts
    //vPrintString("S_7 link_fbw_send end! \n\r"); //SunnyBeike
}
    fba2:	370c      	adds	r7, #12
    fba4:	46bd      	mov	sp, r7
    fba6:	f85d 7b04 	ldr.w	r7, [sp], #4
    fbaa:	4770      	bx	lr

0000fbac <link_fbw_on_spi_it>:

void link_fbw_on_spi_it( void ) {
    fbac:	b480      	push	{r7}
    fbae:	af00      	add	r7, sp, #0
  /* setup OCR1A to pop in 200 clock cycles */
  /* this leaves time for the slave (fbw)   */
  /* to process the byte we've sent and to  */
  /* prepare a new one to be sent           */
  OCR1A = TCNT1 + 200;
    fbb0:	f242 032a 	movw	r3, #8234	; 0x202a
    fbb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbb8:	f242 022c 	movw	r2, #8236	; 0x202c
    fbbc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fbc0:	8812      	ldrh	r2, [r2, #0]
    fbc2:	b292      	uxth	r2, r2
    fbc4:	32c8      	adds	r2, #200	; 0xc8
    fbc6:	b292      	uxth	r2, r2
    fbc8:	801a      	strh	r2, [r3, #0]
  /* clear interrupt flag  */
  sbi(TIFR, OCF1A);
    fbca:	f242 0336 	movw	r3, #8246	; 0x2036
    fbce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbd2:	f242 0236 	movw	r2, #8246	; 0x2036
    fbd6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fbda:	7812      	ldrb	r2, [r2, #0]
    fbdc:	b2d2      	uxtb	r2, r2
    fbde:	f042 0210 	orr.w	r2, r2, #16
    fbe2:	b2d2      	uxtb	r2, r2
    fbe4:	701a      	strb	r2, [r3, #0]
  /* enable OC1A interrupt */
  sbi(TIMSK, OCIE1A);
    fbe6:	f242 0337 	movw	r3, #8247	; 0x2037
    fbea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbee:	f242 0237 	movw	r2, #8247	; 0x2037
    fbf2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fbf6:	7812      	ldrb	r2, [r2, #0]
    fbf8:	b2d2      	uxtb	r2, r2
    fbfa:	f042 0210 	orr.w	r2, r2, #16
    fbfe:	b2d2      	uxtb	r2, r2
    fc00:	701a      	strb	r2, [r3, #0]
}
    fc02:	46bd      	mov	sp, r7
    fc04:	f85d 7b04 	ldr.w	r7, [sp], #4
    fc08:	4770      	bx	lr
    fc0a:	bf00      	nop

0000fc0c <__vector_12>:


/* send the next byte */
SIGNAL(SIG_OUTPUT_COMPARE1A) {
    fc0c:	b480      	push	{r7}
    fc0e:	b083      	sub	sp, #12
    fc10:	af00      	add	r7, sp, #0
  uint8_t tmp;

  /* disable OC1A interrupt */
  cbi(TIMSK, OCIE1A); 
    fc12:	f242 0337 	movw	r3, #8247	; 0x2037
    fc16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc1a:	f242 0237 	movw	r2, #8247	; 0x2037
    fc1e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fc22:	7812      	ldrb	r2, [r2, #0]
    fc24:	b2d2      	uxtb	r2, r2
    fc26:	f022 0210 	bic.w	r2, r2, #16
    fc2a:	b2d2      	uxtb	r2, r2
    fc2c:	701a      	strb	r2, [r3, #0]

  idx_buf++;
    fc2e:	f24a 4399 	movw	r3, #42137	; 0xa499
    fc32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc36:	781b      	ldrb	r3, [r3, #0]
    fc38:	3301      	adds	r3, #1
    fc3a:	b2da      	uxtb	r2, r3
    fc3c:	f24a 4399 	movw	r3, #42137	; 0xa499
    fc40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc44:	701a      	strb	r2, [r3, #0]

  /* we have sent/received a complete frame */
  if (idx_buf == FRAME_LENGTH) {
    fc46:	f24a 4399 	movw	r3, #42137	; 0xa499
    fc4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc4e:	781b      	ldrb	r3, [r3, #0]
    fc50:	2b17      	cmp	r3, #23
    fc52:	d162      	bne.n	fd1a <__vector_12+0x10e>
    /* read checksum from receive register  */
    tmp = SPDR;
    fc54:	f242 030f 	movw	r3, #8207	; 0x200f
    fc58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc5c:	781b      	ldrb	r3, [r3, #0]
    fc5e:	71fb      	strb	r3, [r7, #7]
    /* notify valid frame                   */
    if (tmp == xor_in) {
    fc60:	f24a 439a 	movw	r3, #42138	; 0xa49a
    fc64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc68:	781b      	ldrb	r3, [r3, #0]
    fc6a:	79fa      	ldrb	r2, [r7, #7]
    fc6c:	429a      	cmp	r2, r3
    fc6e:	d110      	bne.n	fc92 <__vector_12+0x86>
      link_fbw_receive_valid = TRUE;
    fc70:	f24a 4396 	movw	r3, #42134	; 0xa496
    fc74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc78:	2201      	movs	r2, #1
    fc7a:	701a      	strb	r2, [r3, #0]
      link_fbw_fbw_nb_err = from_fbw.nb_err;
    fc7c:	f24a 4368 	movw	r3, #42088	; 0xa468
    fc80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc84:	7d1a      	ldrb	r2, [r3, #20]
    fc86:	f24a 4398 	movw	r3, #42136	; 0xa498
    fc8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc8e:	701a      	strb	r2, [r3, #0]
    fc90:	e00c      	b.n	fcac <__vector_12+0xa0>
    }
    else
      link_fbw_nb_err++;
    fc92:	f24a 4397 	movw	r3, #42135	; 0xa497
    fc96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc9a:	781b      	ldrb	r3, [r3, #0]
    fc9c:	b2db      	uxtb	r3, r3
    fc9e:	3301      	adds	r3, #1
    fca0:	b2da      	uxtb	r2, r3
    fca2:	f24a 4397 	movw	r3, #42135	; 0xa497
    fca6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fcaa:	701a      	strb	r2, [r3, #0]
    link_fbw_receive_complete = TRUE;
    fcac:	f240 03d2 	movw	r3, #210	; 0xd2
    fcb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fcb4:	2201      	movs	r2, #1
    fcb6:	701a      	strb	r2, [r3, #0]
    /* unselect slave0                      */
    SPI_UNSELECT_SLAVE0();
    fcb8:	f24a 439c 	movw	r3, #42140	; 0xa49c
    fcbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fcc0:	2200      	movs	r2, #0
    fcc2:	701a      	strb	r2, [r3, #0]
    fcc4:	f242 0318 	movw	r3, #8216	; 0x2018
    fcc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fccc:	f242 0218 	movw	r2, #8216	; 0x2018
    fcd0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fcd4:	7812      	ldrb	r2, [r2, #0]
    fcd6:	b2d2      	uxtb	r2, r2
    fcd8:	f042 0201 	orr.w	r2, r2, #1
    fcdc:	b2d2      	uxtb	r2, r2
    fcde:	701a      	strb	r2, [r3, #0]
    SPI_STOP();
    fce0:	f242 030d 	movw	r3, #8205	; 0x200d
    fce4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fce8:	f242 020d 	movw	r2, #8205	; 0x200d
    fcec:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fcf0:	7812      	ldrb	r2, [r2, #0]
    fcf2:	b2d2      	uxtb	r2, r2
    fcf4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    fcf8:	b2d2      	uxtb	r2, r2
    fcfa:	701a      	strb	r2, [r3, #0]
    fcfc:	f242 030d 	movw	r3, #8205	; 0x200d
    fd00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd04:	f242 020d 	movw	r2, #8205	; 0x200d
    fd08:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fd0c:	7812      	ldrb	r2, [r2, #0]
    fd0e:	b2d2      	uxtb	r2, r2
    fd10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    fd14:	b2d2      	uxtb	r2, r2
    fd16:	701a      	strb	r2, [r3, #0]
    return;
    fd18:	e051      	b.n	fdbe <__vector_12+0x1b2>
  }

  /* we are sending/receiving payload       */
  if (idx_buf < FRAME_LENGTH - 1) {
    fd1a:	f24a 4399 	movw	r3, #42137	; 0xa499
    fd1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd22:	781b      	ldrb	r3, [r3, #0]
    fd24:	2b15      	cmp	r3, #21
    fd26:	d820      	bhi.n	fd6a <__vector_12+0x15e>
    /* place new payload byte in send register */
    tmp = ((uint8_t*)&to_fbw)[idx_buf];
    fd28:	f24a 4399 	movw	r3, #42137	; 0xa499
    fd2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd30:	781b      	ldrb	r3, [r3, #0]
    fd32:	461a      	mov	r2, r3
    fd34:	f24a 4380 	movw	r3, #42112	; 0xa480
    fd38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd3c:	4413      	add	r3, r2
    fd3e:	781b      	ldrb	r3, [r3, #0]
    fd40:	71fb      	strb	r3, [r7, #7]
    SPI_SEND(tmp);
    fd42:	f242 030f 	movw	r3, #8207	; 0x200f
    fd46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd4a:	79fa      	ldrb	r2, [r7, #7]
    fd4c:	701a      	strb	r2, [r3, #0]
    xor_out ^= tmp;
    fd4e:	f24a 439b 	movw	r3, #42139	; 0xa49b
    fd52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd56:	781a      	ldrb	r2, [r3, #0]
    fd58:	79fb      	ldrb	r3, [r7, #7]
    fd5a:	4053      	eors	r3, r2
    fd5c:	b2da      	uxtb	r2, r3
    fd5e:	f24a 439b 	movw	r3, #42139	; 0xa49b
    fd62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd66:	701a      	strb	r2, [r3, #0]
    fd68:	e009      	b.n	fd7e <__vector_12+0x172>
  } 
  /* we are done sending the payload */
  else { // idx_buf == FRAME_LENGTH - 1
    /* place checksum in send register */
    SPI_SEND(xor_out);
    fd6a:	f242 030f 	movw	r3, #8207	; 0x200f
    fd6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd72:	f24a 429b 	movw	r2, #42139	; 0xa49b
    fd76:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fd7a:	7812      	ldrb	r2, [r2, #0]
    fd7c:	701a      	strb	r2, [r3, #0]
  }
  
  /* read the byte from receive register */
  tmp = SPDR;
    fd7e:	f242 030f 	movw	r3, #8207	; 0x200f
    fd82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd86:	781b      	ldrb	r3, [r3, #0]
    fd88:	71fb      	strb	r3, [r7, #7]
  ((uint8_t*)&from_fbw)[idx_buf-1] = tmp;
    fd8a:	f24a 4399 	movw	r3, #42137	; 0xa499
    fd8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd92:	781b      	ldrb	r3, [r3, #0]
    fd94:	1e5a      	subs	r2, r3, #1
    fd96:	f24a 4368 	movw	r3, #42088	; 0xa468
    fd9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd9e:	4413      	add	r3, r2
    fda0:	79fa      	ldrb	r2, [r7, #7]
    fda2:	701a      	strb	r2, [r3, #0]
  xor_in ^= tmp;
    fda4:	f24a 439a 	movw	r3, #42138	; 0xa49a
    fda8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fdac:	781a      	ldrb	r2, [r3, #0]
    fdae:	79fb      	ldrb	r3, [r7, #7]
    fdb0:	4053      	eors	r3, r2
    fdb2:	b2da      	uxtb	r2, r3
    fdb4:	f24a 439a 	movw	r3, #42138	; 0xa49a
    fdb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fdbc:	701a      	strb	r2, [r3, #0]
}
    fdbe:	370c      	adds	r7, #12
    fdc0:	46bd      	mov	sp, r7
    fdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
    fdc6:	4770      	bx	lr

0000fdc8 <spi_init>:
#include "ad7714.h"

volatile uint8_t spi_cur_slave;
uint8_t spi_nb_ovrn;

void spi_init( void) {
    fdc8:	b480      	push	{r7}
    fdca:	af00      	add	r7, sp, #0
  /* Set MOSI and SCK output, all others input */ 
  SPI_DDR |= _BV(SPI_MOSI_PIN)| _BV(SPI_SCK_PIN); 
    fdcc:	f242 0317 	movw	r3, #8215	; 0x2017
    fdd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fdd4:	f242 0217 	movw	r2, #8215	; 0x2017
    fdd8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fddc:	7812      	ldrb	r2, [r2, #0]
    fdde:	b2d2      	uxtb	r2, r2
    fde0:	f042 0206 	orr.w	r2, r2, #6
    fde4:	b2d2      	uxtb	r2, r2
    fde6:	701a      	strb	r2, [r3, #0]

  /* enable pull up for miso */
  //  SPI_PORT |= _BV(SPI_MISO_PIN);

  /* Set SS0 output */
  sbi( SPI_SS0_DDR, SPI_SS0_PIN);
    fde8:	f242 0317 	movw	r3, #8215	; 0x2017
    fdec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fdf0:	f242 0217 	movw	r2, #8215	; 0x2017
    fdf4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fdf8:	7812      	ldrb	r2, [r2, #0]
    fdfa:	b2d2      	uxtb	r2, r2
    fdfc:	f042 0201 	orr.w	r2, r2, #1
    fe00:	b2d2      	uxtb	r2, r2
    fe02:	701a      	strb	r2, [r3, #0]
  /* SS0 idles high (don't select slave yet)*/
  SPI_UNSELECT_SLAVE0();
    fe04:	f24a 439c 	movw	r3, #42140	; 0xa49c
    fe08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe0c:	2200      	movs	r2, #0
    fe0e:	701a      	strb	r2, [r3, #0]
    fe10:	f242 0318 	movw	r3, #8216	; 0x2018
    fe14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe18:	f242 0218 	movw	r2, #8216	; 0x2018
    fe1c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fe20:	7812      	ldrb	r2, [r2, #0]
    fe22:	b2d2      	uxtb	r2, r2
    fe24:	f042 0201 	orr.w	r2, r2, #1
    fe28:	b2d2      	uxtb	r2, r2
    fe2a:	701a      	strb	r2, [r3, #0]

  /* Set SS1 output */
  sbi( SPI_SS1_DDR, SPI_SS1_PIN);
    fe2c:	f242 0302 	movw	r3, #8194	; 0x2002
    fe30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe34:	f242 0202 	movw	r2, #8194	; 0x2002
    fe38:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fe3c:	7812      	ldrb	r2, [r2, #0]
    fe3e:	b2d2      	uxtb	r2, r2
    fe40:	f062 027f 	orn	r2, r2, #127	; 0x7f
    fe44:	b2d2      	uxtb	r2, r2
    fe46:	701a      	strb	r2, [r3, #0]
  /* SS1 idles high (don't select slave yet)*/
  SPI_UNSELECT_SLAVE1();
    fe48:	f24a 439c 	movw	r3, #42140	; 0xa49c
    fe4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe50:	2200      	movs	r2, #0
    fe52:	701a      	strb	r2, [r3, #0]
    fe54:	f242 0303 	movw	r3, #8195	; 0x2003
    fe58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe5c:	f242 0203 	movw	r2, #8195	; 0x2003
    fe60:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fe64:	7812      	ldrb	r2, [r2, #0]
    fe66:	b2d2      	uxtb	r2, r2
    fe68:	f062 027f 	orn	r2, r2, #127	; 0x7f
    fe6c:	b2d2      	uxtb	r2, r2
    fe6e:	701a      	strb	r2, [r3, #0]
  
  spi_cur_slave = SPI_NONE;
    fe70:	f24a 439c 	movw	r3, #42140	; 0xa49c
    fe74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe78:	2200      	movs	r2, #0
    fe7a:	701a      	strb	r2, [r3, #0]
}
    fe7c:	46bd      	mov	sp, r7
    fe7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    fe82:	4770      	bx	lr

0000fe84 <__vector_17>:


SIGNAL(SIG_SPI) {
    fe84:	b580      	push	{r7, lr}
    fe86:	af00      	add	r7, sp, #0
  if (spi_cur_slave == SPI_SLAVE0)
    fe88:	f24a 439c 	movw	r3, #42140	; 0xa49c
    fe8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe90:	781b      	ldrb	r3, [r3, #0]
    fe92:	b2db      	uxtb	r3, r3
    fe94:	2b01      	cmp	r3, #1
    fe96:	d102      	bne.n	fe9e <__vector_17+0x1a>
    link_fbw_on_spi_it();
    fe98:	f7ff fe88 	bl	fbac <link_fbw_on_spi_it>
    fe9c:	e00b      	b.n	feb6 <__vector_17+0x32>
  else
    fatal_error_nb++;
    fe9e:	f24a 3340 	movw	r3, #41792	; 0xa340
    fea2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fea6:	781b      	ldrb	r3, [r3, #0]
    fea8:	3301      	adds	r3, #1
    feaa:	b2da      	uxtb	r2, r3
    feac:	f24a 3340 	movw	r3, #41792	; 0xa340
    feb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    feb4:	701a      	strb	r2, [r3, #0]
}
    feb6:	bd80      	pop	{r7, pc}

0000feb8 <adc_buf_channel>:

uint16_t		adc_samples[ NB_ADC ];

static struct adc_buf* buffers[NB_ADC];

void adc_buf_channel(uint8_t adc_channel, struct adc_buf* s) {
    feb8:	b480      	push	{r7}
    feba:	b083      	sub	sp, #12
    febc:	af00      	add	r7, sp, #0
    febe:	4603      	mov	r3, r0
    fec0:	6039      	str	r1, [r7, #0]
    fec2:	71fb      	strb	r3, [r7, #7]
  buffers[adc_channel] = s;
    fec4:	79fa      	ldrb	r2, [r7, #7]
    fec6:	f24a 43b0 	movw	r3, #42160	; 0xa4b0
    feca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fece:	6839      	ldr	r1, [r7, #0]
    fed0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    fed4:	370c      	adds	r7, #12
    fed6:	46bd      	mov	sp, r7
    fed8:	f85d 7b04 	ldr.w	r7, [sp], #4
    fedc:	4770      	bx	lr
    fede:	bf00      	nop

0000fee0 <adc_init>:

void 
adc_init( void )
{
    fee0:	b480      	push	{r7}
    fee2:	b083      	sub	sp, #12
    fee4:	af00      	add	r7, sp, #0
  uint8_t i;
  /* Ensure that our port is for input with no pull-ups */
  ANALOG_PORT 	= 0x00;
    fee6:	f242 0362 	movw	r3, #8290	; 0x2062
    feea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    feee:	2200      	movs	r2, #0
    fef0:	701a      	strb	r2, [r3, #0]
  ANALOG_PORT_DIR	= 0x00;
    fef2:	f242 0361 	movw	r3, #8289	; 0x2061
    fef6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fefa:	2200      	movs	r2, #0
    fefc:	701a      	strb	r2, [r3, #0]

  /* Select our external voltage ref, which is tied to Vcc */
  ADMUX		= ANALOG_VREF;
    fefe:	f242 0307 	movw	r3, #8199	; 0x2007
    ff02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff06:	2240      	movs	r2, #64	; 0x40
    ff08:	701a      	strb	r2, [r3, #0]

  /* Turn off the analog comparator */
  sbi( ACSR, ACD );
    ff0a:	f242 0308 	movw	r3, #8200	; 0x2008
    ff0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff12:	f242 0208 	movw	r2, #8200	; 0x2008
    ff16:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ff1a:	7812      	ldrb	r2, [r2, #0]
    ff1c:	b2d2      	uxtb	r2, r2
    ff1e:	f062 027f 	orn	r2, r2, #127	; 0x7f
    ff22:	b2d2      	uxtb	r2, r2
    ff24:	701a      	strb	r2, [r3, #0]

  /* Select out clock, turn on the ADC interrupt and start conversion */
  ADCSR		= 0
    ff26:	f242 0306 	movw	r3, #8198	; 0x2006
    ff2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff2e:	22cf      	movs	r2, #207	; 0xcf
    ff30:	701a      	strb	r2, [r3, #0]
    | ( 1 << ADEN )
    | ( 1 << ADIE )
    | ( 1 << ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < NB_ADC; i++)
    ff32:	2300      	movs	r3, #0
    ff34:	71fb      	strb	r3, [r7, #7]
    ff36:	e00a      	b.n	ff4e <adc_init+0x6e>
    buffers[i] = (struct adc_buf*)0;
    ff38:	79fa      	ldrb	r2, [r7, #7]
    ff3a:	f24a 43b0 	movw	r3, #42160	; 0xa4b0
    ff3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff42:	2100      	movs	r1, #0
    ff44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    | ( 1 << ADEN )
    | ( 1 << ADIE )
    | ( 1 << ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < NB_ADC; i++)
    ff48:	79fb      	ldrb	r3, [r7, #7]
    ff4a:	3301      	adds	r3, #1
    ff4c:	71fb      	strb	r3, [r7, #7]
    ff4e:	79fb      	ldrb	r3, [r7, #7]
    ff50:	2b07      	cmp	r3, #7
    ff52:	d9f1      	bls.n	ff38 <adc_init+0x58>
    buffers[i] = (struct adc_buf*)0;
}
    ff54:	370c      	adds	r7, #12
    ff56:	46bd      	mov	sp, r7
    ff58:	f85d 7b04 	ldr.w	r7, [sp], #4
    ff5c:	4770      	bx	lr
    ff5e:	bf00      	nop

0000ff60 <__vector_21>:
 *  8.913kHz on mega128@16MHz 1kHz/channel ??
*/


SIGNAL( SIG_ADC )
{
    ff60:	b480      	push	{r7}
    ff62:	b085      	sub	sp, #20
    ff64:	af00      	add	r7, sp, #0
  uint8_t adc_input	= ADMUX & 0x7;
    ff66:	f242 0307 	movw	r3, #8199	; 0x2007
    ff6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff6e:	781b      	ldrb	r3, [r3, #0]
    ff70:	b2db      	uxtb	r3, r3
    ff72:	f003 0307 	and.w	r3, r3, #7
    ff76:	73fb      	strb	r3, [r7, #15]
  struct adc_buf* buf = buffers[adc_input];
    ff78:	7bfa      	ldrb	r2, [r7, #15]
    ff7a:	f24a 43b0 	movw	r3, #42160	; 0xa4b0
    ff7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    ff86:	60bb      	str	r3, [r7, #8]
  uint16_t adc_value = ADCW;
    ff88:	f242 0304 	movw	r3, #8196	; 0x2004
    ff8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff90:	881b      	ldrh	r3, [r3, #0]
    ff92:	80fb      	strh	r3, [r7, #6]
  /* Store result */
  adc_samples[ adc_input ] = adc_value;
    ff94:	7bfa      	ldrb	r2, [r7, #15]
    ff96:	f24a 43a0 	movw	r3, #42144	; 0xa4a0
    ff9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff9e:	88f9      	ldrh	r1, [r7, #6]
    ffa0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

  if (buf) {
    ffa4:	68bb      	ldr	r3, [r7, #8]
    ffa6:	2b00      	cmp	r3, #0
    ffa8:	d025      	beq.n	fff6 <__vector_21+0x96>
    uint8_t new_head = buf->head + 1;
    ffaa:	68bb      	ldr	r3, [r7, #8]
    ffac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
    ffb0:	3301      	adds	r3, #1
    ffb2:	73bb      	strb	r3, [r7, #14]
    if (new_head >= AV_NB_SAMPLE) new_head = 0;
    ffb4:	7bbb      	ldrb	r3, [r7, #14]
    ffb6:	2b1f      	cmp	r3, #31
    ffb8:	d901      	bls.n	ffbe <__vector_21+0x5e>
    ffba:	2300      	movs	r3, #0
    ffbc:	73bb      	strb	r3, [r7, #14]
    buf->sum -= buf->values[new_head];
    ffbe:	68bb      	ldr	r3, [r7, #8]
    ffc0:	881a      	ldrh	r2, [r3, #0]
    ffc2:	7bbb      	ldrb	r3, [r7, #14]
    ffc4:	68b9      	ldr	r1, [r7, #8]
    ffc6:	005b      	lsls	r3, r3, #1
    ffc8:	440b      	add	r3, r1
    ffca:	885b      	ldrh	r3, [r3, #2]
    ffcc:	1ad3      	subs	r3, r2, r3
    ffce:	b29a      	uxth	r2, r3
    ffd0:	68bb      	ldr	r3, [r7, #8]
    ffd2:	801a      	strh	r2, [r3, #0]
    buf->values[new_head] = adc_value;
    ffd4:	7bbb      	ldrb	r3, [r7, #14]
    ffd6:	68ba      	ldr	r2, [r7, #8]
    ffd8:	005b      	lsls	r3, r3, #1
    ffda:	4413      	add	r3, r2
    ffdc:	88fa      	ldrh	r2, [r7, #6]
    ffde:	805a      	strh	r2, [r3, #2]
    buf->sum += adc_value;
    ffe0:	68bb      	ldr	r3, [r7, #8]
    ffe2:	881a      	ldrh	r2, [r3, #0]
    ffe4:	88fb      	ldrh	r3, [r7, #6]
    ffe6:	4413      	add	r3, r2
    ffe8:	b29a      	uxth	r2, r3
    ffea:	68bb      	ldr	r3, [r7, #8]
    ffec:	801a      	strh	r2, [r3, #0]
    buf->head = new_head;   
    ffee:	68bb      	ldr	r3, [r7, #8]
    fff0:	7bba      	ldrb	r2, [r7, #14]
    fff2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Find the next input */
  adc_input++;
    fff6:	7bfb      	ldrb	r3, [r7, #15]
    fff8:	3301      	adds	r3, #1
    fffa:	73fb      	strb	r3, [r7, #15]
  if( adc_input >= 8 )
    fffc:	7bfb      	ldrb	r3, [r7, #15]
    fffe:	2b07      	cmp	r3, #7
   10000:	d901      	bls.n	10006 <__vector_21+0xa6>
    adc_input = 0;
   10002:	2300      	movs	r3, #0
   10004:	73fb      	strb	r3, [r7, #15]
  /* Select it */
  ADMUX = adc_input | ANALOG_VREF;
   10006:	f242 0307 	movw	r3, #8199	; 0x2007
   1000a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1000e:	7bfa      	ldrb	r2, [r7, #15]
   10010:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   10014:	b2d2      	uxtb	r2, r2
   10016:	701a      	strb	r2, [r3, #0]
  /* Restart the conversion */
  sbi( ADCSR, ADSC );
   10018:	f242 0306 	movw	r3, #8198	; 0x2006
   1001c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10020:	f242 0206 	movw	r2, #8198	; 0x2006
   10024:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10028:	7812      	ldrb	r2, [r2, #0]
   1002a:	b2d2      	uxtb	r2, r2
   1002c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   10030:	b2d2      	uxtb	r2, r2
   10032:	701a      	strb	r2, [r3, #0]
  
}
   10034:	3714      	adds	r7, #20
   10036:	46bd      	mov	sp, r7
   10038:	f85d 7b04 	ldr.w	r7, [sp], #4
   1003c:	4770      	bx	lr
   1003e:	bf00      	nop

00010040 <gps_init>:
static uint8_t  ubx_status;
static uint16_t ubx_len;
static uint8_t  ubx_msg_idx;
static uint8_t ck_a, ck_b, ubx_id, ubx_class;

void gps_init( void ) {
   10040:	b580      	push	{r7, lr}
   10042:	af00      	add	r7, sp, #0
#ifdef SIMUL
  uart0_init();
  simul_ir_roll = ir_roll_neutral;
  simul_ir_pitch = ir_pitch_neutral;
#else
  uart1_init();
   10044:	f003 fca8 	bl	13998 <uart1_init>
#endif
  ubx_status = UNINIT;
   10048:	f24a 53f7 	movw	r3, #42487	; 0xa5f7
   1004c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10050:	2200      	movs	r2, #0
   10052:	701a      	strb	r2, [r3, #0]
}
   10054:	bd80      	pop	{r7, pc}
   10056:	bf00      	nop

00010058 <parse_gps_msg>:

void parse_gps_msg( void ) {
   10058:	b580      	push	{r7, lr}
   1005a:	af00      	add	r7, sp, #0
    ubx_class = 1;
    ubx_id = (ubx_id + 1)%0x40;
    */
    //end

  if (ubx_class == UBX_NAV_ID) {
   1005c:	f24a 53fe 	movw	r3, #42494	; 0xa5fe
   10060:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10064:	781b      	ldrb	r3, [r3, #0]
   10066:	2b01      	cmp	r3, #1
   10068:	f040 80f9 	bne.w	1025e <parse_gps_msg+0x206>
    if (ubx_id == UBX_NAV_POSUTM_ID) {
   1006c:	f24a 53fd 	movw	r3, #42493	; 0xa5fd
   10070:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10074:	781b      	ldrb	r3, [r3, #0]
   10076:	2b08      	cmp	r3, #8
   10078:	d128      	bne.n	100cc <parse_gps_msg+0x74>
      gps_utm_east = UBX_NAV_POSUTM_EAST(ubx_msg_buf);
   1007a:	f24a 43f8 	movw	r3, #42232	; 0xa4f8
   1007e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10082:	685a      	ldr	r2, [r3, #4]
   10084:	f24a 43e4 	movw	r3, #42212	; 0xa4e4
   10088:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1008c:	601a      	str	r2, [r3, #0]
      gps_utm_north = UBX_NAV_POSUTM_NORTH(ubx_msg_buf);
   1008e:	f24a 43f8 	movw	r3, #42232	; 0xa4f8
   10092:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10096:	689a      	ldr	r2, [r3, #8]
   10098:	f24a 43e8 	movw	r3, #42216	; 0xa4e8
   1009c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100a0:	601a      	str	r2, [r3, #0]
      gps_falt = (float)UBX_NAV_POSUTM_ALT(ubx_msg_buf) / 100.;
   100a2:	4b73      	ldr	r3, [pc, #460]	; (10270 <parse_gps_msg+0x218>)
   100a4:	681b      	ldr	r3, [r3, #0]
   100a6:	4618      	mov	r0, r3
   100a8:	f006 fde2 	bl	16c70 <__aeabi_i2f>
   100ac:	4603      	mov	r3, r0
   100ae:	4618      	mov	r0, r3
   100b0:	f04f 0100 	mov.w	r1, #0
   100b4:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   100b8:	f006 fee2 	bl	16e80 <__aeabi_fdiv>
   100bc:	4603      	mov	r3, r0
   100be:	461a      	mov	r2, r3
   100c0:	f24a 43d4 	movw	r3, #42196	; 0xa4d4
   100c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100c8:	601a      	str	r2, [r3, #0]
   100ca:	e0c8      	b.n	1025e <parse_gps_msg+0x206>
        gps_utm_east = gps_utm_east + 0.5;
        gps_utm_north = gps_utm_north + 0.4;
        gps_falt = gps_falt + 0.6;
        */
        // end
    } else if (ubx_id == UBX_NAV_STATUS_ID) {
   100cc:	f24a 53fd 	movw	r3, #42493	; 0xa5fd
   100d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100d4:	781b      	ldrb	r3, [r3, #0]
   100d6:	2b03      	cmp	r3, #3
   100d8:	d10a      	bne.n	100f0 <parse_gps_msg+0x98>
      gps_mode = UBX_NAV_STATUS_GPSfix(ubx_msg_buf);
   100da:	f24a 43f8 	movw	r3, #42232	; 0xa4f8
   100de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100e2:	791a      	ldrb	r2, [r3, #4]
   100e4:	f24a 43f4 	movw	r3, #42228	; 0xa4f4
   100e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100ec:	701a      	strb	r2, [r3, #0]
   100ee:	e0b6      	b.n	1025e <parse_gps_msg+0x206>
    } else if (ubx_id == UBX_NAV_VELNED_ID) {
   100f0:	f24a 53fd 	movw	r3, #42493	; 0xa5fd
   100f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100f8:	781b      	ldrb	r3, [r3, #0]
   100fa:	2b12      	cmp	r3, #18
   100fc:	f040 80af 	bne.w	1025e <parse_gps_msg+0x206>
      gps_fspeed = ((float)UBX_NAV_VELNED_GSpeed(ubx_msg_buf)) / 1e2; 
   10100:	4b5c      	ldr	r3, [pc, #368]	; (10274 <parse_gps_msg+0x21c>)
   10102:	681b      	ldr	r3, [r3, #0]
   10104:	4618      	mov	r0, r3
   10106:	f006 fdaf 	bl	16c68 <__aeabi_ui2f>
   1010a:	4603      	mov	r3, r0
   1010c:	4618      	mov	r0, r3
   1010e:	f04f 0100 	mov.w	r1, #0
   10112:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   10116:	f006 feb3 	bl	16e80 <__aeabi_fdiv>
   1011a:	4603      	mov	r3, r0
   1011c:	461a      	mov	r2, r3
   1011e:	f24a 43d8 	movw	r3, #42200	; 0xa4d8
   10122:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10126:	601a      	str	r2, [r3, #0]
      gps_fclimb = ((float)UBX_NAV_VELNED_VEL_D(ubx_msg_buf)) / -1e2;
   10128:	4b51      	ldr	r3, [pc, #324]	; (10270 <parse_gps_msg+0x218>)
   1012a:	681b      	ldr	r3, [r3, #0]
   1012c:	4618      	mov	r0, r3
   1012e:	f006 fd9f 	bl	16c70 <__aeabi_i2f>
   10132:	4603      	mov	r3, r0
   10134:	4618      	mov	r0, r3
   10136:	f04f 0100 	mov.w	r1, #0
   1013a:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   1013e:	f006 fe9f 	bl	16e80 <__aeabi_fdiv>
   10142:	4603      	mov	r3, r0
   10144:	461a      	mov	r2, r3
   10146:	f24a 43dc 	movw	r3, #42204	; 0xa4dc
   1014a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1014e:	601a      	str	r2, [r3, #0]
      gps_fcourse = RadianOfDeg(((float)UBX_NAV_VELNED_Heading(ubx_msg_buf)) / 1e5);
   10150:	4b49      	ldr	r3, [pc, #292]	; (10278 <parse_gps_msg+0x220>)
   10152:	681b      	ldr	r3, [r3, #0]
   10154:	4618      	mov	r0, r3
   10156:	f006 fd8b 	bl	16c70 <__aeabi_i2f>
   1015a:	4603      	mov	r3, r0
   1015c:	4618      	mov	r0, r3
   1015e:	f006 f947 	bl	163f0 <__aeabi_f2d>
   10162:	4602      	mov	r2, r0
   10164:	460b      	mov	r3, r1
   10166:	4610      	mov	r0, r2
   10168:	4619      	mov	r1, r3
   1016a:	a33d      	add	r3, pc, #244	; (adr r3, 10260 <parse_gps_msg+0x208>)
   1016c:	e9d3 2300 	ldrd	r2, r3, [r3]
   10170:	f006 fabc 	bl	166ec <__aeabi_ddiv>
   10174:	4602      	mov	r2, r0
   10176:	460b      	mov	r3, r1
   10178:	4610      	mov	r0, r2
   1017a:	4619      	mov	r1, r3
   1017c:	f04f 0200 	mov.w	r2, #0
   10180:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   10184:	f2c4 0366 	movt	r3, #16486	; 0x4066
   10188:	f006 fab0 	bl	166ec <__aeabi_ddiv>
   1018c:	4602      	mov	r2, r0
   1018e:	460b      	mov	r3, r1
   10190:	4610      	mov	r0, r2
   10192:	4619      	mov	r1, r3
   10194:	a334      	add	r3, pc, #208	; (adr r3, 10268 <parse_gps_msg+0x210>)
   10196:	e9d3 2300 	ldrd	r2, r3, [r3]
   1019a:	f006 f97d 	bl	16498 <__aeabi_dmul>
   1019e:	4602      	mov	r2, r0
   101a0:	460b      	mov	r3, r1
   101a2:	4610      	mov	r0, r2
   101a4:	4619      	mov	r1, r3
   101a6:	f006 fc59 	bl	16a5c <__aeabi_d2f>
   101aa:	4602      	mov	r2, r0
   101ac:	f24a 43e0 	movw	r3, #42208	; 0xa4e0
   101b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101b4:	601a      	str	r2, [r3, #0]
      gps_ftow = ((float)UBX_NAV_VELNED_ITOW(ubx_msg_buf)) / 1e3;
   101b6:	f24a 43f8 	movw	r3, #42232	; 0xa4f8
   101ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101be:	681b      	ldr	r3, [r3, #0]
   101c0:	4618      	mov	r0, r3
   101c2:	f006 fd51 	bl	16c68 <__aeabi_ui2f>
   101c6:	4603      	mov	r3, r0
   101c8:	4618      	mov	r0, r3
   101ca:	f04f 0100 	mov.w	r1, #0
   101ce:	f2c4 417a 	movt	r1, #17530	; 0x447a
   101d2:	f006 fe55 	bl	16e80 <__aeabi_fdiv>
   101d6:	4603      	mov	r3, r0
   101d8:	461a      	mov	r2, r3
   101da:	f24a 43d0 	movw	r3, #42192	; 0xa4d0
   101de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101e2:	601a      	str	r2, [r3, #0]
        gps_fcourse = gps_fcourse + 0.2;
        gps_ftow = gps_ftow + 0.1;
        */
        // end
      
      gps_east = gps_utm_east / 100 - NAV_UTM_EAST0;
   101e4:	f24a 43e4 	movw	r3, #42212	; 0xa4e4
   101e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101ec:	681a      	ldr	r2, [r3, #0]
   101ee:	f248 531f 	movw	r3, #34079	; 0x851f
   101f2:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
   101f6:	fb83 1302 	smull	r1, r3, r3, r2
   101fa:	1159      	asrs	r1, r3, #5
   101fc:	17d3      	asrs	r3, r2, #31
   101fe:	1acb      	subs	r3, r1, r3
   10200:	f5a3 2313 	sub.w	r3, r3, #602112	; 0x93000
   10204:	f6a3 535a 	subw	r3, r3, #3418	; 0xd5a
   10208:	4618      	mov	r0, r3
   1020a:	f006 fd31 	bl	16c70 <__aeabi_i2f>
   1020e:	4602      	mov	r2, r0
   10210:	f24a 43ec 	movw	r3, #42220	; 0xa4ec
   10214:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10218:	601a      	str	r2, [r3, #0]
      gps_north = gps_utm_north / 100 - NAV_UTM_NORTH0;
   1021a:	f24a 43e8 	movw	r3, #42216	; 0xa4e8
   1021e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10222:	681a      	ldr	r2, [r3, #0]
   10224:	f248 531f 	movw	r3, #34079	; 0x851f
   10228:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
   1022c:	fb83 1302 	smull	r1, r3, r3, r2
   10230:	1159      	asrs	r1, r3, #5
   10232:	17d3      	asrs	r3, r2, #31
   10234:	1aca      	subs	r2, r1, r3
   10236:	f648 231a 	movw	r3, #35354	; 0x8a1a
   1023a:	f6cf 73a7 	movt	r3, #65447	; 0xffa7
   1023e:	4413      	add	r3, r2
   10240:	4618      	mov	r0, r3
   10242:	f006 fd15 	bl	16c70 <__aeabi_i2f>
   10246:	4602      	mov	r2, r0
   10248:	f24a 43f0 	movw	r3, #42224	; 0xa4f0
   1024c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10250:	601a      	str	r2, [r3, #0]
      
      
      gps_pos_available = TRUE; /* The 3 UBX messages are sent in one rafale */
   10252:	f24a 43f6 	movw	r3, #42230	; 0xa4f6
   10256:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1025a:	2201      	movs	r2, #1
   1025c:	701a      	strb	r2, [r3, #0]
      simul_ir_roll = UBX_USR_IRSIM_ROLL(ubx_msg_buf);
      simul_ir_pitch = UBX_USR_IRSIM_PITCH(ubx_msg_buf);
    }
  }
#endif
}
   1025e:	bd80      	pop	{r7, pc}
   10260:	00000000 	.word	0x00000000
   10264:	40f86a00 	.word	0x40f86a00
   10268:	5a7ed197 	.word	0x5a7ed197
   1026c:	400921fb 	.word	0x400921fb
   10270:	2000a504 	.word	0x2000a504
   10274:	2000a50c 	.word	0x2000a50c
   10278:	2000a510 	.word	0x2000a510

0001027c <parse_ubx>:


uint8_t gps_nb_ovrn;


static void parse_ubx( uint8_t c ) {
   1027c:	b480      	push	{r7}
   1027e:	b083      	sub	sp, #12
   10280:	af00      	add	r7, sp, #0
   10282:	4603      	mov	r3, r0
   10284:	71fb      	strb	r3, [r7, #7]
   if (ubx_status < GOT_PAYLOAD) {
   10286:	f24a 53f7 	movw	r3, #42487	; 0xa5f7
   1028a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1028e:	781b      	ldrb	r3, [r3, #0]
   10290:	2b06      	cmp	r3, #6
   10292:	d81d      	bhi.n	102d0 <parse_ubx+0x54>
    ck_a += c;
   10294:	f24a 53fb 	movw	r3, #42491	; 0xa5fb
   10298:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1029c:	781a      	ldrb	r2, [r3, #0]
   1029e:	79fb      	ldrb	r3, [r7, #7]
   102a0:	4413      	add	r3, r2
   102a2:	b2da      	uxtb	r2, r3
   102a4:	f24a 53fb 	movw	r3, #42491	; 0xa5fb
   102a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102ac:	701a      	strb	r2, [r3, #0]
    ck_b += ck_a;
   102ae:	f24a 53fc 	movw	r3, #42492	; 0xa5fc
   102b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102b6:	781a      	ldrb	r2, [r3, #0]
   102b8:	f24a 53fb 	movw	r3, #42491	; 0xa5fb
   102bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102c0:	781b      	ldrb	r3, [r3, #0]
   102c2:	4413      	add	r3, r2
   102c4:	b2da      	uxtb	r2, r3
   102c6:	f24a 53fc 	movw	r3, #42492	; 0xa5fc
   102ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102ce:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
    break;
  }
#else */
  if (ubx_status == UNINIT)
   102d0:	f24a 53f7 	movw	r3, #42487	; 0xa5f7
   102d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102d8:	781b      	ldrb	r3, [r3, #0]
   102da:	2b00      	cmp	r3, #0
   102dc:	d110      	bne.n	10300 <parse_ubx+0x84>
  {
    if (c == UBX_SYNC1)
   102de:	79fb      	ldrb	r3, [r7, #7]
   102e0:	2bb5      	cmp	r3, #181	; 0xb5
   102e2:	f040 8135 	bne.w	10550 <parse_ubx+0x2d4>
      ubx_status++;
   102e6:	f24a 53f7 	movw	r3, #42487	; 0xa5f7
   102ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102ee:	781b      	ldrb	r3, [r3, #0]
   102f0:	3301      	adds	r3, #1
   102f2:	b2da      	uxtb	r2, r3
   102f4:	f24a 53f7 	movw	r3, #42487	; 0xa5f7
   102f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102fc:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
  }
  else {}
//#endif
  return;
   102fe:	e12f      	b.n	10560 <parse_ubx+0x2e4>
  if (ubx_status == UNINIT)
  {
    if (c == UBX_SYNC1)
      ubx_status++;
  }
  else if (ubx_status == GOT_SYNC1)
   10300:	f24a 53f7 	movw	r3, #42487	; 0xa5f7
   10304:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10308:	781b      	ldrb	r3, [r3, #0]
   1030a:	2b01      	cmp	r3, #1
   1030c:	d11c      	bne.n	10348 <parse_ubx+0xcc>
  {
    if (c != UBX_SYNC2)
   1030e:	79fb      	ldrb	r3, [r7, #7]
   10310:	2b62      	cmp	r3, #98	; 0x62
   10312:	d000      	beq.n	10316 <parse_ubx+0x9a>
      goto error;
   10314:	e11d      	b.n	10552 <parse_ubx+0x2d6>
    ck_a = 0;
   10316:	f24a 53fb 	movw	r3, #42491	; 0xa5fb
   1031a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1031e:	2200      	movs	r2, #0
   10320:	701a      	strb	r2, [r3, #0]
    ck_b = 0;
   10322:	f24a 53fc 	movw	r3, #42492	; 0xa5fc
   10326:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1032a:	2200      	movs	r2, #0
   1032c:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   1032e:	f24a 53f7 	movw	r3, #42487	; 0xa5f7
   10332:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10336:	781b      	ldrb	r3, [r3, #0]
   10338:	3301      	adds	r3, #1
   1033a:	b2da      	uxtb	r2, r3
   1033c:	f24a 53f7 	movw	r3, #42487	; 0xa5f7
   10340:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10344:	701a      	strb	r2, [r3, #0]
   10346:	e103      	b.n	10550 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_SYNC2)
   10348:	f24a 53f7 	movw	r3, #42487	; 0xa5f7
   1034c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10350:	781b      	ldrb	r3, [r3, #0]
   10352:	2b02      	cmp	r3, #2
   10354:	d127      	bne.n	103a6 <parse_ubx+0x12a>
  {
    if (gps_msg_received) {
   10356:	f24a 43f5 	movw	r3, #42229	; 0xa4f5
   1035a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1035e:	781b      	ldrb	r3, [r3, #0]
   10360:	b2db      	uxtb	r3, r3
   10362:	2b00      	cmp	r3, #0
   10364:	d00c      	beq.n	10380 <parse_ubx+0x104>
      /* Previous message has not yet been parsed: discard this one */
      gps_nb_ovrn++;
   10366:	f24a 53ff 	movw	r3, #42495	; 0xa5ff
   1036a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1036e:	781b      	ldrb	r3, [r3, #0]
   10370:	3301      	adds	r3, #1
   10372:	b2da      	uxtb	r2, r3
   10374:	f24a 53ff 	movw	r3, #42495	; 0xa5ff
   10378:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1037c:	701a      	strb	r2, [r3, #0]
      goto error;
   1037e:	e0e8      	b.n	10552 <parse_ubx+0x2d6>
    }
    ubx_class = c;
   10380:	f24a 53fe 	movw	r3, #42494	; 0xa5fe
   10384:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10388:	79fa      	ldrb	r2, [r7, #7]
   1038a:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   1038c:	f24a 53f7 	movw	r3, #42487	; 0xa5f7
   10390:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10394:	781b      	ldrb	r3, [r3, #0]
   10396:	3301      	adds	r3, #1
   10398:	b2da      	uxtb	r2, r3
   1039a:	f24a 53f7 	movw	r3, #42487	; 0xa5f7
   1039e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103a2:	701a      	strb	r2, [r3, #0]
   103a4:	e0d4      	b.n	10550 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_CLASS)
   103a6:	f24a 53f7 	movw	r3, #42487	; 0xa5f7
   103aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103ae:	781b      	ldrb	r3, [r3, #0]
   103b0:	2b03      	cmp	r3, #3
   103b2:	d112      	bne.n	103da <parse_ubx+0x15e>
  {
    ubx_id = c;
   103b4:	f24a 53fd 	movw	r3, #42493	; 0xa5fd
   103b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103bc:	79fa      	ldrb	r2, [r7, #7]
   103be:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   103c0:	f24a 53f7 	movw	r3, #42487	; 0xa5f7
   103c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103c8:	781b      	ldrb	r3, [r3, #0]
   103ca:	3301      	adds	r3, #1
   103cc:	b2da      	uxtb	r2, r3
   103ce:	f24a 53f7 	movw	r3, #42487	; 0xa5f7
   103d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103d6:	701a      	strb	r2, [r3, #0]
   103d8:	e0ba      	b.n	10550 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_ID)
   103da:	f24a 53f7 	movw	r3, #42487	; 0xa5f7
   103de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103e2:	781b      	ldrb	r3, [r3, #0]
   103e4:	2b04      	cmp	r3, #4
   103e6:	d113      	bne.n	10410 <parse_ubx+0x194>
  {
    ubx_len = c;
   103e8:	79fb      	ldrb	r3, [r7, #7]
   103ea:	b29a      	uxth	r2, r3
   103ec:	f24a 53f8 	movw	r3, #42488	; 0xa5f8
   103f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103f4:	801a      	strh	r2, [r3, #0]
    ubx_status++;
   103f6:	f24a 53f7 	movw	r3, #42487	; 0xa5f7
   103fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103fe:	781b      	ldrb	r3, [r3, #0]
   10400:	3301      	adds	r3, #1
   10402:	b2da      	uxtb	r2, r3
   10404:	f24a 53f7 	movw	r3, #42487	; 0xa5f7
   10408:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1040c:	701a      	strb	r2, [r3, #0]
   1040e:	e09f      	b.n	10550 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_LEN1)
   10410:	f24a 53f7 	movw	r3, #42487	; 0xa5f7
   10414:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10418:	781b      	ldrb	r3, [r3, #0]
   1041a:	2b05      	cmp	r3, #5
   1041c:	d12b      	bne.n	10476 <parse_ubx+0x1fa>
  {
    ubx_len |= (c<<8);
   1041e:	79fb      	ldrb	r3, [r7, #7]
   10420:	021b      	lsls	r3, r3, #8
   10422:	b29a      	uxth	r2, r3
   10424:	f24a 53f8 	movw	r3, #42488	; 0xa5f8
   10428:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1042c:	881b      	ldrh	r3, [r3, #0]
   1042e:	b29b      	uxth	r3, r3
   10430:	4313      	orrs	r3, r2
   10432:	b29b      	uxth	r3, r3
   10434:	b29a      	uxth	r2, r3
   10436:	f24a 53f8 	movw	r3, #42488	; 0xa5f8
   1043a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1043e:	801a      	strh	r2, [r3, #0]
    if (ubx_len > UBX_MAX_PAYLOAD)
   10440:	f24a 53f8 	movw	r3, #42488	; 0xa5f8
   10444:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10448:	881b      	ldrh	r3, [r3, #0]
   1044a:	2bff      	cmp	r3, #255	; 0xff
   1044c:	d900      	bls.n	10450 <parse_ubx+0x1d4>
      goto error;
   1044e:	e080      	b.n	10552 <parse_ubx+0x2d6>
    ubx_msg_idx = 0;
   10450:	f24a 53fa 	movw	r3, #42490	; 0xa5fa
   10454:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10458:	2200      	movs	r2, #0
   1045a:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   1045c:	f24a 53f7 	movw	r3, #42487	; 0xa5f7
   10460:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10464:	781b      	ldrb	r3, [r3, #0]
   10466:	3301      	adds	r3, #1
   10468:	b2da      	uxtb	r2, r3
   1046a:	f24a 53f7 	movw	r3, #42487	; 0xa5f7
   1046e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10472:	701a      	strb	r2, [r3, #0]
   10474:	e06c      	b.n	10550 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_LEN2)
   10476:	f24a 53f7 	movw	r3, #42487	; 0xa5f7
   1047a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1047e:	781b      	ldrb	r3, [r3, #0]
   10480:	2b06      	cmp	r3, #6
   10482:	d131      	bne.n	104e8 <parse_ubx+0x26c>
  {
    ubx_msg_buf[ubx_msg_idx] = c;
   10484:	f24a 53fa 	movw	r3, #42490	; 0xa5fa
   10488:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1048c:	781b      	ldrb	r3, [r3, #0]
   1048e:	461a      	mov	r2, r3
   10490:	f24a 43f8 	movw	r3, #42232	; 0xa4f8
   10494:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10498:	79f9      	ldrb	r1, [r7, #7]
   1049a:	5499      	strb	r1, [r3, r2]
    ubx_msg_idx++;
   1049c:	f24a 53fa 	movw	r3, #42490	; 0xa5fa
   104a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104a4:	781b      	ldrb	r3, [r3, #0]
   104a6:	3301      	adds	r3, #1
   104a8:	b2da      	uxtb	r2, r3
   104aa:	f24a 53fa 	movw	r3, #42490	; 0xa5fa
   104ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104b2:	701a      	strb	r2, [r3, #0]
    if (ubx_msg_idx >= ubx_len) {
   104b4:	f24a 53fa 	movw	r3, #42490	; 0xa5fa
   104b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104bc:	781b      	ldrb	r3, [r3, #0]
   104be:	461a      	mov	r2, r3
   104c0:	f24a 53f8 	movw	r3, #42488	; 0xa5f8
   104c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104c8:	881b      	ldrh	r3, [r3, #0]
   104ca:	429a      	cmp	r2, r3
   104cc:	d340      	bcc.n	10550 <parse_ubx+0x2d4>
      ubx_status++;
   104ce:	f24a 53f7 	movw	r3, #42487	; 0xa5f7
   104d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104d6:	781b      	ldrb	r3, [r3, #0]
   104d8:	3301      	adds	r3, #1
   104da:	b2da      	uxtb	r2, r3
   104dc:	f24a 53f7 	movw	r3, #42487	; 0xa5f7
   104e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104e4:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
  }
  else {}
//#endif
  return;
   104e6:	e03b      	b.n	10560 <parse_ubx+0x2e4>
    ubx_msg_idx++;
    if (ubx_msg_idx >= ubx_len) {
      ubx_status++;
    }
  }
  else if (ubx_status == GOT_PAYLOAD)
   104e8:	f24a 53f7 	movw	r3, #42487	; 0xa5f7
   104ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104f0:	781b      	ldrb	r3, [r3, #0]
   104f2:	2b07      	cmp	r3, #7
   104f4:	d115      	bne.n	10522 <parse_ubx+0x2a6>
  {
    if (c != ck_a)
   104f6:	f24a 53fb 	movw	r3, #42491	; 0xa5fb
   104fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104fe:	781b      	ldrb	r3, [r3, #0]
   10500:	79fa      	ldrb	r2, [r7, #7]
   10502:	429a      	cmp	r2, r3
   10504:	d000      	beq.n	10508 <parse_ubx+0x28c>
      goto error;
   10506:	e024      	b.n	10552 <parse_ubx+0x2d6>
    ubx_status++;
   10508:	f24a 53f7 	movw	r3, #42487	; 0xa5f7
   1050c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10510:	781b      	ldrb	r3, [r3, #0]
   10512:	3301      	adds	r3, #1
   10514:	b2da      	uxtb	r2, r3
   10516:	f24a 53f7 	movw	r3, #42487	; 0xa5f7
   1051a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1051e:	701a      	strb	r2, [r3, #0]
   10520:	e016      	b.n	10550 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_CHECKSUM1)
   10522:	f24a 53f7 	movw	r3, #42487	; 0xa5f7
   10526:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1052a:	781b      	ldrb	r3, [r3, #0]
   1052c:	2b08      	cmp	r3, #8
   1052e:	d10f      	bne.n	10550 <parse_ubx+0x2d4>
  {
    if (c != ck_b)
   10530:	f24a 53fc 	movw	r3, #42492	; 0xa5fc
   10534:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10538:	781b      	ldrb	r3, [r3, #0]
   1053a:	79fa      	ldrb	r2, [r7, #7]
   1053c:	429a      	cmp	r2, r3
   1053e:	d000      	beq.n	10542 <parse_ubx+0x2c6>
      goto error;
   10540:	e007      	b.n	10552 <parse_ubx+0x2d6>
    gps_msg_received = TRUE;
   10542:	f24a 43f5 	movw	r3, #42229	; 0xa4f5
   10546:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1054a:	2201      	movs	r2, #1
   1054c:	701a      	strb	r2, [r3, #0]
    goto restart;
   1054e:	e000      	b.n	10552 <parse_ubx+0x2d6>
  }
  else {}
//#endif
  return;
   10550:	e006      	b.n	10560 <parse_ubx+0x2e4>
 error:  
 restart:
  ubx_status = UNINIT;
   10552:	f24a 53f7 	movw	r3, #42487	; 0xa5f7
   10556:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1055a:	2200      	movs	r2, #0
   1055c:	701a      	strb	r2, [r3, #0]
  return;
   1055e:	bf00      	nop
}
   10560:	370c      	adds	r7, #12
   10562:	46bd      	mov	sp, r7
   10564:	f85d 7b04 	ldr.w	r7, [sp], #4
   10568:	4770      	bx	lr
   1056a:	bf00      	nop

0001056c <__vector_30>:

#ifdef SIMUL
ReceiveUart0(parse_ubx);
#else
ReceiveUart1(parse_ubx);
   1056c:	b580      	push	{r7, lr}
   1056e:	b082      	sub	sp, #8
   10570:	af00      	add	r7, sp, #0
   10572:	f242 039c 	movw	r3, #8348	; 0x209c
   10576:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1057a:	781b      	ldrb	r3, [r3, #0]
   1057c:	71fb      	strb	r3, [r7, #7]
   1057e:	79fb      	ldrb	r3, [r7, #7]
   10580:	4618      	mov	r0, r3
   10582:	f7ff fe7b 	bl	1027c <parse_ubx>
   10586:	3708      	adds	r7, #8
   10588:	46bd      	mov	sp, r7
   1058a:	bd80      	pop	{r7, pc}
   1058c:	f3af 8000 	nop.w

00010590 <ir_init>:
float ir_rad_of_ir = IR_RAD_OF_IR_CONTRAST / IR_DEFAULT_CONTRAST;

static struct adc_buf buf_ir1;
static struct adc_buf buf_ir2;

void ir_init(void) {
   10590:	b580      	push	{r7, lr}
   10592:	af00      	add	r7, sp, #0
  RadOfIrFromConstrast(IR_DEFAULT_CONTRAST);
   10594:	f240 03dc 	movw	r3, #220	; 0xdc
   10598:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1059c:	f24c 228f 	movw	r2, #49807	; 0xc28f
   105a0:	f6c3 3275 	movt	r2, #15221	; 0x3b75
   105a4:	601a      	str	r2, [r3, #0]
  adc_buf_channel(ADC_CHANNEL_IR1, &buf_ir1);
   105a6:	2001      	movs	r0, #1
   105a8:	f24a 6104 	movw	r1, #42500	; 0xa604
   105ac:	f2c2 0100 	movt	r1, #8192	; 0x2000
   105b0:	f7ff fc82 	bl	feb8 <adc_buf_channel>
  adc_buf_channel(ADC_CHANNEL_IR2, &buf_ir2);
   105b4:	2002      	movs	r0, #2
   105b6:	f24a 6148 	movw	r1, #42568	; 0xa648
   105ba:	f2c2 0100 	movt	r1, #8192	; 0x2000
   105be:	f7ff fc7b 	bl	feb8 <adc_buf_channel>
}
   105c2:	bd80      	pop	{r7, pc}

000105c4 <ir_update>:
int16_t x1 = 1;
int16_t x2 = 2;
*/
// end

void ir_update(void) {
   105c4:	b480      	push	{r7}
   105c6:	b083      	sub	sp, #12
   105c8:	af00      	add	r7, sp, #0
#ifndef SIMUL
  int16_t x1_mean = buf_ir1.sum/AV_NB_SAMPLE;
   105ca:	f24a 6304 	movw	r3, #42500	; 0xa604
   105ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105d2:	881b      	ldrh	r3, [r3, #0]
   105d4:	095b      	lsrs	r3, r3, #5
   105d6:	b29b      	uxth	r3, r3
   105d8:	80fb      	strh	r3, [r7, #6]
  int16_t x2_mean = buf_ir2.sum/AV_NB_SAMPLE;
   105da:	f24a 6348 	movw	r3, #42568	; 0xa648
   105de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105e2:	881b      	ldrh	r3, [r3, #0]
   105e4:	095b      	lsrs	r3, r3, #5
   105e6:	b29b      	uxth	r3, r3
   105e8:	80bb      	strh	r3, [r7, #4]
    if( x1 < -900 ) x1 = x2 % x1;
    x2_mean = x2 ++;
    if( x2 > 110 ) x2 = x1 % x2;
    */
    // end
  ir_roll = IR_RollOfIrs(x1_mean, x2_mean) - ir_roll_neutral;
   105ea:	88fb      	ldrh	r3, [r7, #6]
   105ec:	425b      	negs	r3, r3
   105ee:	b29a      	uxth	r2, r3
   105f0:	88bb      	ldrh	r3, [r7, #4]
   105f2:	1ad3      	subs	r3, r2, r3
   105f4:	b29a      	uxth	r2, r3
   105f6:	f240 03d6 	movw	r3, #214	; 0xd6
   105fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105fe:	881b      	ldrh	r3, [r3, #0]
   10600:	b29b      	uxth	r3, r3
   10602:	1ad3      	subs	r3, r2, r3
   10604:	b29b      	uxth	r3, r3
   10606:	b29a      	uxth	r2, r3
   10608:	f24a 6300 	movw	r3, #42496	; 0xa600
   1060c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10610:	801a      	strh	r2, [r3, #0]
  ir_pitch = IR_PitchOfIrs(x1_mean, x2_mean) - ir_pitch_neutral;
   10612:	88ba      	ldrh	r2, [r7, #4]
   10614:	88fb      	ldrh	r3, [r7, #6]
   10616:	1ad3      	subs	r3, r2, r3
   10618:	b29a      	uxth	r2, r3
   1061a:	f240 03d8 	movw	r3, #216	; 0xd8
   1061e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10622:	881b      	ldrh	r3, [r3, #0]
   10624:	b29b      	uxth	r3, r3
   10626:	1ad3      	subs	r3, r2, r3
   10628:	b29b      	uxth	r3, r3
   1062a:	b29a      	uxth	r2, r3
   1062c:	f24a 6302 	movw	r3, #42498	; 0xa602
   10630:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10634:	801a      	strh	r2, [r3, #0]
#else
  extern volatile int16_t simul_ir_roll, simul_ir_pitch;
  ir_roll = simul_ir_roll -  ir_roll_neutral; 
  ir_pitch = simul_ir_pitch - ir_pitch_neutral;  
#endif
}
   10636:	370c      	adds	r7, #12
   10638:	46bd      	mov	sp, r7
   1063a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1063e:	4770      	bx	lr

00010640 <ir_gain_calib>:

/* 
   Contrast measurement
*/

void ir_gain_calib(void) {      // Plane nose down
   10640:	b580      	push	{r7, lr}
   10642:	af00      	add	r7, sp, #0
  /* plane nose down -> negativ value */
  ir_contrast = - ir_pitch;
   10644:	f24a 6302 	movw	r3, #42498	; 0xa602
   10648:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1064c:	881b      	ldrh	r3, [r3, #0]
   1064e:	b29b      	uxth	r3, r3
   10650:	425b      	negs	r3, r3
   10652:	b29b      	uxth	r3, r3
   10654:	b29a      	uxth	r2, r3
   10656:	f240 03d4 	movw	r3, #212	; 0xd4
   1065a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1065e:	801a      	strh	r2, [r3, #0]
  RadOfIrFromConstrast(ir_contrast);
   10660:	f240 03d4 	movw	r3, #212	; 0xd4
   10664:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10668:	881b      	ldrh	r3, [r3, #0]
   1066a:	b21b      	sxth	r3, r3
   1066c:	4618      	mov	r0, r3
   1066e:	f005 fead 	bl	163cc <__aeabi_i2d>
   10672:	4602      	mov	r2, r0
   10674:	460b      	mov	r3, r1
   10676:	f04f 0000 	mov.w	r0, #0
   1067a:	f04f 0100 	mov.w	r1, #0
   1067e:	f6c3 71e8 	movt	r1, #16360	; 0x3fe8
   10682:	f006 f833 	bl	166ec <__aeabi_ddiv>
   10686:	4602      	mov	r2, r0
   10688:	460b      	mov	r3, r1
   1068a:	4610      	mov	r0, r2
   1068c:	4619      	mov	r1, r3
   1068e:	f006 f9e5 	bl	16a5c <__aeabi_d2f>
   10692:	4602      	mov	r2, r0
   10694:	f240 03dc 	movw	r3, #220	; 0xdc
   10698:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1069c:	601a      	str	r2, [r3, #0]
}
   1069e:	bd80      	pop	{r7, pc}

000106a0 <roll_pitch_pid_run>:
float pitch_of_vz_pgain = CLIMB_PITCH_OF_VZ_PGAIN;
float pitch_of_vz = 0.;


/** \brief Computes ::desired_aileron and ::desired_elevator from attitude estimation and expected attitude. */
void roll_pitch_pid_run( void ) {
   106a0:	b590      	push	{r4, r7, lr}
   106a2:	b083      	sub	sp, #12
   106a4:	af00      	add	r7, sp, #0
  float err =  estimator_phi - desired_roll;
   106a6:	f64a 1320 	movw	r3, #43296	; 0xa920
   106aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106ae:	681a      	ldr	r2, [r3, #0]
   106b0:	f24a 638c 	movw	r3, #42636	; 0xa68c
   106b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106b8:	681b      	ldr	r3, [r3, #0]
   106ba:	4610      	mov	r0, r2
   106bc:	4619      	mov	r1, r3
   106be:	f006 fa21 	bl	16b04 <__aeabi_fsub>
   106c2:	4603      	mov	r3, r0
   106c4:	607b      	str	r3, [r7, #4]
  desired_aileron = TRIM_PPRZ(roll_pgain * err);
   106c6:	f240 03e0 	movw	r3, #224	; 0xe0
   106ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106ce:	681b      	ldr	r3, [r3, #0]
   106d0:	4618      	mov	r0, r3
   106d2:	6879      	ldr	r1, [r7, #4]
   106d4:	f006 fb20 	bl	16d18 <__aeabi_fmul>
   106d8:	4603      	mov	r3, r0
   106da:	4618      	mov	r0, r3
   106dc:	f04f 0100 	mov.w	r1, #0
   106e0:	f2cc 6116 	movt	r1, #50710	; 0xc616
   106e4:	f006 fcb6 	bl	17054 <__aeabi_fcmplt>
   106e8:	4603      	mov	r3, r0
   106ea:	2b00      	cmp	r3, #0
   106ec:	d002      	beq.n	106f4 <roll_pitch_pid_run+0x54>
   106ee:	f64d 2280 	movw	r2, #55936	; 0xda80
   106f2:	e026      	b.n	10742 <roll_pitch_pid_run+0xa2>
   106f4:	f240 03e0 	movw	r3, #224	; 0xe0
   106f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106fc:	681b      	ldr	r3, [r3, #0]
   106fe:	4618      	mov	r0, r3
   10700:	6879      	ldr	r1, [r7, #4]
   10702:	f006 fb09 	bl	16d18 <__aeabi_fmul>
   10706:	4603      	mov	r3, r0
   10708:	4618      	mov	r0, r3
   1070a:	f04f 0100 	mov.w	r1, #0
   1070e:	f2c4 6116 	movt	r1, #17942	; 0x4616
   10712:	f006 fcbd 	bl	17090 <__aeabi_fcmpgt>
   10716:	4603      	mov	r3, r0
   10718:	2b00      	cmp	r3, #0
   1071a:	d002      	beq.n	10722 <roll_pitch_pid_run+0x82>
   1071c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   10720:	e00e      	b.n	10740 <roll_pitch_pid_run+0xa0>
   10722:	f240 03e0 	movw	r3, #224	; 0xe0
   10726:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1072a:	681b      	ldr	r3, [r3, #0]
   1072c:	4618      	mov	r0, r3
   1072e:	6879      	ldr	r1, [r7, #4]
   10730:	f006 faf2 	bl	16d18 <__aeabi_fmul>
   10734:	4603      	mov	r3, r0
   10736:	4618      	mov	r0, r3
   10738:	f006 fcb4 	bl	170a4 <__aeabi_f2iz>
   1073c:	4603      	mov	r3, r0
   1073e:	b29b      	uxth	r3, r3
   10740:	b29a      	uxth	r2, r3
   10742:	f24a 6396 	movw	r3, #42646	; 0xa696
   10746:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1074a:	801a      	strh	r2, [r3, #0]
  if (pitch_of_roll <0.)
   1074c:	f24a 639c 	movw	r3, #42652	; 0xa69c
   10750:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10754:	681b      	ldr	r3, [r3, #0]
   10756:	4618      	mov	r0, r3
   10758:	f04f 0100 	mov.w	r1, #0
   1075c:	f006 fc7a 	bl	17054 <__aeabi_fcmplt>
   10760:	4603      	mov	r3, r0
   10762:	2b00      	cmp	r3, #0
   10764:	d006      	beq.n	10774 <roll_pitch_pid_run+0xd4>
    pitch_of_roll = 0.;
   10766:	f24a 639c 	movw	r3, #42652	; 0xa69c
   1076a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1076e:	f04f 0200 	mov.w	r2, #0
   10772:	601a      	str	r2, [r3, #0]
  err = -(estimator_theta - desired_pitch - pitch_of_roll * fabs(estimator_phi));
   10774:	f64a 1328 	movw	r3, #43304	; 0xa928
   10778:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1077c:	681a      	ldr	r2, [r3, #0]
   1077e:	f24a 6390 	movw	r3, #42640	; 0xa690
   10782:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10786:	681b      	ldr	r3, [r3, #0]
   10788:	4610      	mov	r0, r2
   1078a:	4619      	mov	r1, r3
   1078c:	f006 f9ba 	bl	16b04 <__aeabi_fsub>
   10790:	4603      	mov	r3, r0
   10792:	461c      	mov	r4, r3
   10794:	f64a 1320 	movw	r3, #43296	; 0xa920
   10798:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1079c:	681b      	ldr	r3, [r3, #0]
   1079e:	4618      	mov	r0, r3
   107a0:	f04f 0100 	mov.w	r1, #0
   107a4:	f006 fc56 	bl	17054 <__aeabi_fcmplt>
   107a8:	4603      	mov	r3, r0
   107aa:	2b00      	cmp	r3, #0
   107ac:	d007      	beq.n	107be <roll_pitch_pid_run+0x11e>
   107ae:	f64a 1320 	movw	r3, #43296	; 0xa920
   107b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107b6:	681b      	ldr	r3, [r3, #0]
   107b8:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   107bc:	e004      	b.n	107c8 <roll_pitch_pid_run+0x128>
   107be:	f64a 1320 	movw	r3, #43296	; 0xa920
   107c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107c6:	681a      	ldr	r2, [r3, #0]
   107c8:	f24a 639c 	movw	r3, #42652	; 0xa69c
   107cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107d0:	681b      	ldr	r3, [r3, #0]
   107d2:	4610      	mov	r0, r2
   107d4:	4619      	mov	r1, r3
   107d6:	f006 fa9f 	bl	16d18 <__aeabi_fmul>
   107da:	4603      	mov	r3, r0
   107dc:	4620      	mov	r0, r4
   107de:	4619      	mov	r1, r3
   107e0:	f006 f990 	bl	16b04 <__aeabi_fsub>
   107e4:	4603      	mov	r3, r0
   107e6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
   107ea:	607b      	str	r3, [r7, #4]
  desired_elevator = TRIM_PPRZ(pitch_pgain * err);
   107ec:	f240 03e4 	movw	r3, #228	; 0xe4
   107f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107f4:	681b      	ldr	r3, [r3, #0]
   107f6:	4618      	mov	r0, r3
   107f8:	6879      	ldr	r1, [r7, #4]
   107fa:	f006 fa8d 	bl	16d18 <__aeabi_fmul>
   107fe:	4603      	mov	r3, r0
   10800:	4618      	mov	r0, r3
   10802:	f04f 0100 	mov.w	r1, #0
   10806:	f2cc 6116 	movt	r1, #50710	; 0xc616
   1080a:	f006 fc23 	bl	17054 <__aeabi_fcmplt>
   1080e:	4603      	mov	r3, r0
   10810:	2b00      	cmp	r3, #0
   10812:	d002      	beq.n	1081a <roll_pitch_pid_run+0x17a>
   10814:	f64d 2280 	movw	r2, #55936	; 0xda80
   10818:	e026      	b.n	10868 <roll_pitch_pid_run+0x1c8>
   1081a:	f240 03e4 	movw	r3, #228	; 0xe4
   1081e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10822:	681b      	ldr	r3, [r3, #0]
   10824:	4618      	mov	r0, r3
   10826:	6879      	ldr	r1, [r7, #4]
   10828:	f006 fa76 	bl	16d18 <__aeabi_fmul>
   1082c:	4603      	mov	r3, r0
   1082e:	4618      	mov	r0, r3
   10830:	f04f 0100 	mov.w	r1, #0
   10834:	f2c4 6116 	movt	r1, #17942	; 0x4616
   10838:	f006 fc2a 	bl	17090 <__aeabi_fcmpgt>
   1083c:	4603      	mov	r3, r0
   1083e:	2b00      	cmp	r3, #0
   10840:	d002      	beq.n	10848 <roll_pitch_pid_run+0x1a8>
   10842:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   10846:	e00e      	b.n	10866 <roll_pitch_pid_run+0x1c6>
   10848:	f240 03e4 	movw	r3, #228	; 0xe4
   1084c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10850:	681b      	ldr	r3, [r3, #0]
   10852:	4618      	mov	r0, r3
   10854:	6879      	ldr	r1, [r7, #4]
   10856:	f006 fa5f 	bl	16d18 <__aeabi_fmul>
   1085a:	4603      	mov	r3, r0
   1085c:	4618      	mov	r0, r3
   1085e:	f006 fc21 	bl	170a4 <__aeabi_f2iz>
   10862:	4603      	mov	r3, r0
   10864:	b29b      	uxth	r3, r3
   10866:	b29a      	uxth	r2, r3
   10868:	f24a 6398 	movw	r3, #42648	; 0xa698
   1086c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10870:	801a      	strh	r2, [r3, #0]
}
   10872:	370c      	adds	r7, #12
   10874:	46bd      	mov	sp, r7
   10876:	bd90      	pop	{r4, r7, pc}

00010878 <course_pid_run>:

float course_pgain = COURSE_PGAIN;
float desired_course = 0.;
float max_roll = MAX_ROLL;

void course_pid_run( void ) {
   10878:	b580      	push	{r7, lr}
   1087a:	b082      	sub	sp, #8
   1087c:	af00      	add	r7, sp, #0
  float err = estimator_hspeed_dir - desired_course;
   1087e:	f64a 1350 	movw	r3, #43344	; 0xa950
   10882:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10886:	681a      	ldr	r2, [r3, #0]
   10888:	f24a 63a4 	movw	r3, #42660	; 0xa6a4
   1088c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10890:	681b      	ldr	r3, [r3, #0]
   10892:	4610      	mov	r0, r2
   10894:	4619      	mov	r1, r3
   10896:	f006 f935 	bl	16b04 <__aeabi_fsub>
   1089a:	4603      	mov	r3, r0
   1089c:	607b      	str	r3, [r7, #4]
  NORM_RAD_ANGLE(err);
   1089e:	e013      	b.n	108c8 <course_pid_run+0x50>
   108a0:	6878      	ldr	r0, [r7, #4]
   108a2:	f005 fda5 	bl	163f0 <__aeabi_f2d>
   108a6:	4602      	mov	r2, r0
   108a8:	460b      	mov	r3, r1
   108aa:	4610      	mov	r0, r2
   108ac:	4619      	mov	r1, r3
   108ae:	a348      	add	r3, pc, #288	; (adr r3, 109d0 <course_pid_run+0x158>)
   108b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   108b4:	f005 fc3c 	bl	16130 <__aeabi_dsub>
   108b8:	4602      	mov	r2, r0
   108ba:	460b      	mov	r3, r1
   108bc:	4610      	mov	r0, r2
   108be:	4619      	mov	r1, r3
   108c0:	f006 f8cc 	bl	16a5c <__aeabi_d2f>
   108c4:	4603      	mov	r3, r0
   108c6:	607b      	str	r3, [r7, #4]
   108c8:	6878      	ldr	r0, [r7, #4]
   108ca:	f005 fd91 	bl	163f0 <__aeabi_f2d>
   108ce:	4602      	mov	r2, r0
   108d0:	460b      	mov	r3, r1
   108d2:	4610      	mov	r0, r2
   108d4:	4619      	mov	r1, r3
   108d6:	a340      	add	r3, pc, #256	; (adr r3, 109d8 <course_pid_run+0x160>)
   108d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   108dc:	f006 f86c 	bl	169b8 <__aeabi_dcmpgt>
   108e0:	4603      	mov	r3, r0
   108e2:	2b00      	cmp	r3, #0
   108e4:	d1dc      	bne.n	108a0 <course_pid_run+0x28>
   108e6:	e013      	b.n	10910 <course_pid_run+0x98>
   108e8:	6878      	ldr	r0, [r7, #4]
   108ea:	f005 fd81 	bl	163f0 <__aeabi_f2d>
   108ee:	4602      	mov	r2, r0
   108f0:	460b      	mov	r3, r1
   108f2:	4610      	mov	r0, r2
   108f4:	4619      	mov	r1, r3
   108f6:	a336      	add	r3, pc, #216	; (adr r3, 109d0 <course_pid_run+0x158>)
   108f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   108fc:	f005 fc1a 	bl	16134 <__adddf3>
   10900:	4602      	mov	r2, r0
   10902:	460b      	mov	r3, r1
   10904:	4610      	mov	r0, r2
   10906:	4619      	mov	r1, r3
   10908:	f006 f8a8 	bl	16a5c <__aeabi_d2f>
   1090c:	4603      	mov	r3, r0
   1090e:	607b      	str	r3, [r7, #4]
   10910:	6878      	ldr	r0, [r7, #4]
   10912:	f005 fd6d 	bl	163f0 <__aeabi_f2d>
   10916:	4602      	mov	r2, r0
   10918:	460b      	mov	r3, r1
   1091a:	4610      	mov	r0, r2
   1091c:	4619      	mov	r1, r3
   1091e:	a330      	add	r3, pc, #192	; (adr r3, 109e0 <course_pid_run+0x168>)
   10920:	e9d3 2300 	ldrd	r2, r3, [r3]
   10924:	f006 f82a 	bl	1697c <__aeabi_dcmplt>
   10928:	4603      	mov	r3, r0
   1092a:	2b00      	cmp	r3, #0
   1092c:	d1dc      	bne.n	108e8 <course_pid_run+0x70>
  nav_desired_roll = course_pgain * err; //  * fspeed / AIR_SPEED;
   1092e:	f240 03ec 	movw	r3, #236	; 0xec
   10932:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10936:	681b      	ldr	r3, [r3, #0]
   10938:	4618      	mov	r0, r3
   1093a:	6879      	ldr	r1, [r7, #4]
   1093c:	f006 f9ec 	bl	16d18 <__aeabi_fmul>
   10940:	4603      	mov	r3, r0
   10942:	461a      	mov	r2, r3
   10944:	f24a 63e8 	movw	r3, #42728	; 0xa6e8
   10948:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1094c:	601a      	str	r2, [r3, #0]
  if (nav_desired_roll > max_roll)
   1094e:	f24a 63e8 	movw	r3, #42728	; 0xa6e8
   10952:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10956:	681a      	ldr	r2, [r3, #0]
   10958:	f240 03f0 	movw	r3, #240	; 0xf0
   1095c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10960:	681b      	ldr	r3, [r3, #0]
   10962:	4610      	mov	r0, r2
   10964:	4619      	mov	r1, r3
   10966:	f006 fb93 	bl	17090 <__aeabi_fcmpgt>
   1096a:	4603      	mov	r3, r0
   1096c:	2b00      	cmp	r3, #0
   1096e:	d00a      	beq.n	10986 <course_pid_run+0x10e>
    nav_desired_roll = max_roll;
   10970:	f240 03f0 	movw	r3, #240	; 0xf0
   10974:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10978:	681a      	ldr	r2, [r3, #0]
   1097a:	f24a 63e8 	movw	r3, #42728	; 0xa6e8
   1097e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10982:	601a      	str	r2, [r3, #0]
   10984:	e01e      	b.n	109c4 <course_pid_run+0x14c>
  else if (nav_desired_roll < -max_roll)
   10986:	f240 03f0 	movw	r3, #240	; 0xf0
   1098a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1098e:	681b      	ldr	r3, [r3, #0]
   10990:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   10994:	f24a 63e8 	movw	r3, #42728	; 0xa6e8
   10998:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1099c:	681b      	ldr	r3, [r3, #0]
   1099e:	4610      	mov	r0, r2
   109a0:	4619      	mov	r1, r3
   109a2:	f006 fb75 	bl	17090 <__aeabi_fcmpgt>
   109a6:	4603      	mov	r3, r0
   109a8:	2b00      	cmp	r3, #0
   109aa:	d00b      	beq.n	109c4 <course_pid_run+0x14c>
    nav_desired_roll = -max_roll;
   109ac:	f240 03f0 	movw	r3, #240	; 0xf0
   109b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109b4:	681b      	ldr	r3, [r3, #0]
   109b6:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   109ba:	f24a 63e8 	movw	r3, #42728	; 0xa6e8
   109be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109c2:	601a      	str	r2, [r3, #0]
}
   109c4:	3708      	adds	r7, #8
   109c6:	46bd      	mov	sp, r7
   109c8:	bd80      	pop	{r7, pc}
   109ca:	bf00      	nop
   109cc:	f3af 8000 	nop.w
   109d0:	54442d18 	.word	0x54442d18
   109d4:	401921fb 	.word	0x401921fb
   109d8:	54442d18 	.word	0x54442d18
   109dc:	400921fb 	.word	0x400921fb
   109e0:	54442d18 	.word	0x54442d18
   109e4:	c00921fb 	.word	0xc00921fb

000109e8 <climb_pid_run>:

#define MAX_CLIMB_SUM_ERR 100
#define MAX_PITCH_CLIMB_SUM_ERR 100

/** \brief Computes desired_gaz and desired_pitch from desired_climb */
void climb_pid_run ( void ) {
   109e8:	b5b0      	push	{r4, r5, r7, lr}
   109ea:	b082      	sub	sp, #8
   109ec:	af00      	add	r7, sp, #0
  float err  = estimator_z_dot - desired_climb;
   109ee:	f64a 1334 	movw	r3, #43316	; 0xa934
   109f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109f6:	681a      	ldr	r2, [r3, #0]
   109f8:	f24a 63a8 	movw	r3, #42664	; 0xa6a8
   109fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a00:	681b      	ldr	r3, [r3, #0]
   10a02:	4610      	mov	r0, r2
   10a04:	4619      	mov	r1, r3
   10a06:	f006 f87d 	bl	16b04 <__aeabi_fsub>
   10a0a:	4603      	mov	r3, r0
   10a0c:	607b      	str	r3, [r7, #4]
  float fgaz;
  if (auto_pitch) { /* gaz constant */
   10a0e:	f24a 3347 	movw	r3, #41799	; 0xa347
   10a12:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a16:	781b      	ldrb	r3, [r3, #0]
   10a18:	2b00      	cmp	r3, #0
   10a1a:	f000 80a8 	beq.w	10b6e <climb_pid_run+0x186>
    desired_gaz = nav_desired_gaz;
   10a1e:	f24a 63e0 	movw	r3, #42720	; 0xa6e0
   10a22:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a26:	881b      	ldrh	r3, [r3, #0]
   10a28:	b29a      	uxth	r2, r3
   10a2a:	f24a 6394 	movw	r3, #42644	; 0xa694
   10a2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a32:	801a      	strh	r2, [r3, #0]
    desired_pitch = climb_pitch_pgain * (err + climb_pitch_igain * climb_pitch_sum_err);
   10a34:	f240 03f8 	movw	r3, #248	; 0xf8
   10a38:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a3c:	681a      	ldr	r2, [r3, #0]
   10a3e:	f24a 63b4 	movw	r3, #42676	; 0xa6b4
   10a42:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a46:	681b      	ldr	r3, [r3, #0]
   10a48:	4610      	mov	r0, r2
   10a4a:	4619      	mov	r1, r3
   10a4c:	f006 f964 	bl	16d18 <__aeabi_fmul>
   10a50:	4603      	mov	r3, r0
   10a52:	4618      	mov	r0, r3
   10a54:	6879      	ldr	r1, [r7, #4]
   10a56:	f006 f857 	bl	16b08 <__addsf3>
   10a5a:	4603      	mov	r3, r0
   10a5c:	461a      	mov	r2, r3
   10a5e:	f240 03f4 	movw	r3, #244	; 0xf4
   10a62:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a66:	681b      	ldr	r3, [r3, #0]
   10a68:	4610      	mov	r0, r2
   10a6a:	4619      	mov	r1, r3
   10a6c:	f006 f954 	bl	16d18 <__aeabi_fmul>
   10a70:	4603      	mov	r3, r0
   10a72:	461a      	mov	r2, r3
   10a74:	f24a 6390 	movw	r3, #42640	; 0xa690
   10a78:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a7c:	601a      	str	r2, [r3, #0]
    if (desired_pitch > max_pitch)
   10a7e:	f24a 6390 	movw	r3, #42640	; 0xa690
   10a82:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a86:	681a      	ldr	r2, [r3, #0]
   10a88:	f240 03fc 	movw	r3, #252	; 0xfc
   10a8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a90:	681b      	ldr	r3, [r3, #0]
   10a92:	4610      	mov	r0, r2
   10a94:	4619      	mov	r1, r3
   10a96:	f006 fafb 	bl	17090 <__aeabi_fcmpgt>
   10a9a:	4603      	mov	r3, r0
   10a9c:	2b00      	cmp	r3, #0
   10a9e:	d009      	beq.n	10ab4 <climb_pid_run+0xcc>
      desired_pitch = max_pitch;
   10aa0:	f240 03fc 	movw	r3, #252	; 0xfc
   10aa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10aa8:	681a      	ldr	r2, [r3, #0]
   10aaa:	f24a 6390 	movw	r3, #42640	; 0xa690
   10aae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ab2:	601a      	str	r2, [r3, #0]
    if (desired_pitch < min_pitch)
   10ab4:	f24a 6390 	movw	r3, #42640	; 0xa690
   10ab8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10abc:	681a      	ldr	r2, [r3, #0]
   10abe:	f240 1300 	movw	r3, #256	; 0x100
   10ac2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ac6:	681b      	ldr	r3, [r3, #0]
   10ac8:	4610      	mov	r0, r2
   10aca:	4619      	mov	r1, r3
   10acc:	f006 fac2 	bl	17054 <__aeabi_fcmplt>
   10ad0:	4603      	mov	r3, r0
   10ad2:	2b00      	cmp	r3, #0
   10ad4:	d009      	beq.n	10aea <climb_pid_run+0x102>
      desired_pitch = min_pitch;
   10ad6:	f240 1300 	movw	r3, #256	; 0x100
   10ada:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ade:	681a      	ldr	r2, [r3, #0]
   10ae0:	f24a 6390 	movw	r3, #42640	; 0xa690
   10ae4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ae8:	601a      	str	r2, [r3, #0]
    climb_pitch_sum_err += err;
   10aea:	f24a 63b4 	movw	r3, #42676	; 0xa6b4
   10aee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10af2:	681b      	ldr	r3, [r3, #0]
   10af4:	4618      	mov	r0, r3
   10af6:	6879      	ldr	r1, [r7, #4]
   10af8:	f006 f806 	bl	16b08 <__addsf3>
   10afc:	4603      	mov	r3, r0
   10afe:	461a      	mov	r2, r3
   10b00:	f24a 63b4 	movw	r3, #42676	; 0xa6b4
   10b04:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b08:	601a      	str	r2, [r3, #0]
    if (climb_pitch_sum_err > MAX_PITCH_CLIMB_SUM_ERR)
   10b0a:	f24a 63b4 	movw	r3, #42676	; 0xa6b4
   10b0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b12:	681b      	ldr	r3, [r3, #0]
   10b14:	4618      	mov	r0, r3
   10b16:	f04f 0100 	mov.w	r1, #0
   10b1a:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   10b1e:	f006 fab7 	bl	17090 <__aeabi_fcmpgt>
   10b22:	4603      	mov	r3, r0
   10b24:	2b00      	cmp	r3, #0
   10b26:	d008      	beq.n	10b3a <climb_pid_run+0x152>
      climb_pitch_sum_err = MAX_PITCH_CLIMB_SUM_ERR;
   10b28:	f24a 63b4 	movw	r3, #42676	; 0xa6b4
   10b2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b30:	f04f 0200 	mov.w	r2, #0
   10b34:	f2c4 22c8 	movt	r2, #17096	; 0x42c8
   10b38:	601a      	str	r2, [r3, #0]
    if (climb_pitch_sum_err < - MAX_PITCH_CLIMB_SUM_ERR)
   10b3a:	f24a 63b4 	movw	r3, #42676	; 0xa6b4
   10b3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b42:	681b      	ldr	r3, [r3, #0]
   10b44:	4618      	mov	r0, r3
   10b46:	f04f 0100 	mov.w	r1, #0
   10b4a:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   10b4e:	f006 fa81 	bl	17054 <__aeabi_fcmplt>
   10b52:	4603      	mov	r3, r0
   10b54:	2b00      	cmp	r3, #0
   10b56:	d100      	bne.n	10b5a <climb_pid_run+0x172>
   10b58:	e109      	b.n	10d6e <climb_pid_run+0x386>
      climb_pitch_sum_err = - MAX_PITCH_CLIMB_SUM_ERR; 
   10b5a:	f24a 63b4 	movw	r3, #42676	; 0xa6b4
   10b5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b62:	f04f 0200 	mov.w	r2, #0
   10b66:	f2cc 22c8 	movt	r2, #49864	; 0xc2c8
   10b6a:	601a      	str	r2, [r3, #0]
   10b6c:	e0ff      	b.n	10d6e <climb_pid_run+0x386>
  } else { /* pitch almost constant */
    /* pitch offset for climb */
    pitch_of_vz = (desired_climb > 0) ? desired_climb * pitch_of_vz_pgain : 0.;
   10b6e:	f24a 63a8 	movw	r3, #42664	; 0xa6a8
   10b72:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b76:	681b      	ldr	r3, [r3, #0]
   10b78:	4618      	mov	r0, r3
   10b7a:	f04f 0100 	mov.w	r1, #0
   10b7e:	f006 fa87 	bl	17090 <__aeabi_fcmpgt>
   10b82:	4603      	mov	r3, r0
   10b84:	2b00      	cmp	r3, #0
   10b86:	d010      	beq.n	10baa <climb_pid_run+0x1c2>
   10b88:	f24a 63a8 	movw	r3, #42664	; 0xa6a8
   10b8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b90:	681a      	ldr	r2, [r3, #0]
   10b92:	f240 03e8 	movw	r3, #232	; 0xe8
   10b96:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b9a:	681b      	ldr	r3, [r3, #0]
   10b9c:	4610      	mov	r0, r2
   10b9e:	4619      	mov	r1, r3
   10ba0:	f006 f8ba 	bl	16d18 <__aeabi_fmul>
   10ba4:	4603      	mov	r3, r0
   10ba6:	461a      	mov	r2, r3
   10ba8:	e001      	b.n	10bae <climb_pid_run+0x1c6>
   10baa:	f04f 0200 	mov.w	r2, #0
   10bae:	f24a 63a0 	movw	r3, #42656	; 0xa6a0
   10bb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10bb6:	601a      	str	r2, [r3, #0]
    fgaz = climb_pgain * (err + climb_igain * climb_sum_err) + CLIMB_LEVEL_GAZ + CLIMB_GAZ_OF_CLIMB*desired_climb;
   10bb8:	f64c 42cd 	movw	r2, #52429	; 0xcccd
   10bbc:	f6c3 52cc 	movt	r2, #15820	; 0x3dcc
   10bc0:	f24a 63b0 	movw	r3, #42672	; 0xa6b0
   10bc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10bc8:	681b      	ldr	r3, [r3, #0]
   10bca:	4610      	mov	r0, r2
   10bcc:	4619      	mov	r1, r3
   10bce:	f006 f8a3 	bl	16d18 <__aeabi_fmul>
   10bd2:	4603      	mov	r3, r0
   10bd4:	4618      	mov	r0, r3
   10bd6:	6879      	ldr	r1, [r7, #4]
   10bd8:	f005 ff96 	bl	16b08 <__addsf3>
   10bdc:	4603      	mov	r3, r0
   10bde:	461a      	mov	r2, r3
   10be0:	f24c 238f 	movw	r3, #49807	; 0xc28f
   10be4:	f6cb 43f5 	movt	r3, #48373	; 0xbcf5
   10be8:	4610      	mov	r0, r2
   10bea:	4619      	mov	r1, r3
   10bec:	f006 f894 	bl	16d18 <__aeabi_fmul>
   10bf0:	4603      	mov	r3, r0
   10bf2:	4618      	mov	r0, r3
   10bf4:	f005 fbfc 	bl	163f0 <__aeabi_f2d>
   10bf8:	4602      	mov	r2, r0
   10bfa:	460b      	mov	r3, r1
   10bfc:	4610      	mov	r0, r2
   10bfe:	4619      	mov	r1, r3
   10c00:	a35d      	add	r3, pc, #372	; (adr r3, 10d78 <climb_pid_run+0x390>)
   10c02:	e9d3 2300 	ldrd	r2, r3, [r3]
   10c06:	f005 fa95 	bl	16134 <__adddf3>
   10c0a:	4602      	mov	r2, r0
   10c0c:	460b      	mov	r3, r1
   10c0e:	4614      	mov	r4, r2
   10c10:	461d      	mov	r5, r3
   10c12:	f24a 63a8 	movw	r3, #42664	; 0xa6a8
   10c16:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c1a:	681b      	ldr	r3, [r3, #0]
   10c1c:	4618      	mov	r0, r3
   10c1e:	f005 fbe7 	bl	163f0 <__aeabi_f2d>
   10c22:	4602      	mov	r2, r0
   10c24:	460b      	mov	r3, r1
   10c26:	4610      	mov	r0, r2
   10c28:	4619      	mov	r1, r3
   10c2a:	a355      	add	r3, pc, #340	; (adr r3, 10d80 <climb_pid_run+0x398>)
   10c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
   10c30:	f005 fc32 	bl	16498 <__aeabi_dmul>
   10c34:	4602      	mov	r2, r0
   10c36:	460b      	mov	r3, r1
   10c38:	4620      	mov	r0, r4
   10c3a:	4629      	mov	r1, r5
   10c3c:	f005 fa7a 	bl	16134 <__adddf3>
   10c40:	4602      	mov	r2, r0
   10c42:	460b      	mov	r3, r1
   10c44:	4610      	mov	r0, r2
   10c46:	4619      	mov	r1, r3
   10c48:	f005 ff08 	bl	16a5c <__aeabi_d2f>
   10c4c:	4603      	mov	r3, r0
   10c4e:	603b      	str	r3, [r7, #0]
    climb_sum_err += err;
   10c50:	f24a 63b0 	movw	r3, #42672	; 0xa6b0
   10c54:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c58:	681b      	ldr	r3, [r3, #0]
   10c5a:	4618      	mov	r0, r3
   10c5c:	6879      	ldr	r1, [r7, #4]
   10c5e:	f005 ff53 	bl	16b08 <__addsf3>
   10c62:	4603      	mov	r3, r0
   10c64:	461a      	mov	r2, r3
   10c66:	f24a 63b0 	movw	r3, #42672	; 0xa6b0
   10c6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c6e:	601a      	str	r2, [r3, #0]
    if (climb_sum_err > MAX_CLIMB_SUM_ERR) climb_sum_err = MAX_CLIMB_SUM_ERR;
   10c70:	f24a 63b0 	movw	r3, #42672	; 0xa6b0
   10c74:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c78:	681b      	ldr	r3, [r3, #0]
   10c7a:	4618      	mov	r0, r3
   10c7c:	f04f 0100 	mov.w	r1, #0
   10c80:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   10c84:	f006 fa04 	bl	17090 <__aeabi_fcmpgt>
   10c88:	4603      	mov	r3, r0
   10c8a:	2b00      	cmp	r3, #0
   10c8c:	d008      	beq.n	10ca0 <climb_pid_run+0x2b8>
   10c8e:	f24a 63b0 	movw	r3, #42672	; 0xa6b0
   10c92:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c96:	f04f 0200 	mov.w	r2, #0
   10c9a:	f2c4 22c8 	movt	r2, #17096	; 0x42c8
   10c9e:	601a      	str	r2, [r3, #0]
    if (climb_sum_err < - MAX_CLIMB_SUM_ERR) climb_sum_err = - MAX_CLIMB_SUM_ERR;
   10ca0:	f24a 63b0 	movw	r3, #42672	; 0xa6b0
   10ca4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ca8:	681b      	ldr	r3, [r3, #0]
   10caa:	4618      	mov	r0, r3
   10cac:	f04f 0100 	mov.w	r1, #0
   10cb0:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   10cb4:	f006 f9ce 	bl	17054 <__aeabi_fcmplt>
   10cb8:	4603      	mov	r3, r0
   10cba:	2b00      	cmp	r3, #0
   10cbc:	d008      	beq.n	10cd0 <climb_pid_run+0x2e8>
   10cbe:	f24a 63b0 	movw	r3, #42672	; 0xa6b0
   10cc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10cc6:	f04f 0200 	mov.w	r2, #0
   10cca:	f2cc 22c8 	movt	r2, #49864	; 0xc2c8
   10cce:	601a      	str	r2, [r3, #0]
    desired_gaz = TRIM_UPPRZ(fgaz * MAX_PPRZ);
   10cd0:	6838      	ldr	r0, [r7, #0]
   10cd2:	f04f 0100 	mov.w	r1, #0
   10cd6:	f2c4 6116 	movt	r1, #17942	; 0x4616
   10cda:	f006 f81d 	bl	16d18 <__aeabi_fmul>
   10cde:	4603      	mov	r3, r0
   10ce0:	4618      	mov	r0, r3
   10ce2:	f04f 0100 	mov.w	r1, #0
   10ce6:	f006 f9b5 	bl	17054 <__aeabi_fcmplt>
   10cea:	4603      	mov	r3, r0
   10cec:	2b00      	cmp	r3, #0
   10cee:	d001      	beq.n	10cf4 <climb_pid_run+0x30c>
   10cf0:	2200      	movs	r2, #0
   10cf2:	e022      	b.n	10d3a <climb_pid_run+0x352>
   10cf4:	6838      	ldr	r0, [r7, #0]
   10cf6:	f04f 0100 	mov.w	r1, #0
   10cfa:	f2c4 6116 	movt	r1, #17942	; 0x4616
   10cfe:	f006 f80b 	bl	16d18 <__aeabi_fmul>
   10d02:	4603      	mov	r3, r0
   10d04:	4618      	mov	r0, r3
   10d06:	f04f 0100 	mov.w	r1, #0
   10d0a:	f2c4 6116 	movt	r1, #17942	; 0x4616
   10d0e:	f006 f9bf 	bl	17090 <__aeabi_fcmpgt>
   10d12:	4603      	mov	r3, r0
   10d14:	2b00      	cmp	r3, #0
   10d16:	d002      	beq.n	10d1e <climb_pid_run+0x336>
   10d18:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   10d1c:	e00c      	b.n	10d38 <climb_pid_run+0x350>
   10d1e:	6838      	ldr	r0, [r7, #0]
   10d20:	f04f 0100 	mov.w	r1, #0
   10d24:	f2c4 6116 	movt	r1, #17942	; 0x4616
   10d28:	f005 fff6 	bl	16d18 <__aeabi_fmul>
   10d2c:	4603      	mov	r3, r0
   10d2e:	4618      	mov	r0, r3
   10d30:	f006 f9b8 	bl	170a4 <__aeabi_f2iz>
   10d34:	4603      	mov	r3, r0
   10d36:	b29b      	uxth	r3, r3
   10d38:	b29a      	uxth	r2, r3
   10d3a:	f24a 6394 	movw	r3, #42644	; 0xa694
   10d3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d42:	801a      	strh	r2, [r3, #0]
    desired_pitch = nav_pitch + pitch_of_vz;
   10d44:	f24a 63e4 	movw	r3, #42724	; 0xa6e4
   10d48:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d4c:	681a      	ldr	r2, [r3, #0]
   10d4e:	f24a 63a0 	movw	r3, #42656	; 0xa6a0
   10d52:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d56:	681b      	ldr	r3, [r3, #0]
   10d58:	4610      	mov	r0, r2
   10d5a:	4619      	mov	r1, r3
   10d5c:	f005 fed4 	bl	16b08 <__addsf3>
   10d60:	4603      	mov	r3, r0
   10d62:	461a      	mov	r2, r3
   10d64:	f24a 6390 	movw	r3, #42640	; 0xa690
   10d68:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d6c:	601a      	str	r2, [r3, #0]
  }
}
   10d6e:	3708      	adds	r7, #8
   10d70:	46bd      	mov	sp, r7
   10d72:	bdb0      	pop	{r4, r5, r7, pc}
   10d74:	f3af 8000 	nop.w
   10d78:	3d70a3d7 	.word	0x3d70a3d7
   10d7c:	3fd3d70a 	.word	0x3fd3d70a
   10d80:	9999999a 	.word	0x9999999a
   10d84:	3fc99999 	.word	0x3fc99999

00010d88 <altitude_pid_run>:

float altitude_pgain = ALTITUDE_PGAIN;


void altitude_pid_run(void) {
   10d88:	b580      	push	{r7, lr}
   10d8a:	b082      	sub	sp, #8
   10d8c:	af00      	add	r7, sp, #0
  float err = estimator_z - desired_altitude;
   10d8e:	f64a 131c 	movw	r3, #43292	; 0xa91c
   10d92:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d96:	681a      	ldr	r2, [r3, #0]
   10d98:	f240 1308 	movw	r3, #264	; 0x108
   10d9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10da0:	681b      	ldr	r3, [r3, #0]
   10da2:	4610      	mov	r0, r2
   10da4:	4619      	mov	r1, r3
   10da6:	f005 fead 	bl	16b04 <__aeabi_fsub>
   10daa:	4603      	mov	r3, r0
   10dac:	607b      	str	r3, [r7, #4]
  desired_climb = pre_climb + altitude_pgain * err;
   10dae:	f240 1304 	movw	r3, #260	; 0x104
   10db2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10db6:	681b      	ldr	r3, [r3, #0]
   10db8:	4618      	mov	r0, r3
   10dba:	6879      	ldr	r1, [r7, #4]
   10dbc:	f005 ffac 	bl	16d18 <__aeabi_fmul>
   10dc0:	4603      	mov	r3, r0
   10dc2:	461a      	mov	r2, r3
   10dc4:	f24a 63ac 	movw	r3, #42668	; 0xa6ac
   10dc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10dcc:	681b      	ldr	r3, [r3, #0]
   10dce:	4610      	mov	r0, r2
   10dd0:	4619      	mov	r1, r3
   10dd2:	f005 fe99 	bl	16b08 <__addsf3>
   10dd6:	4603      	mov	r3, r0
   10dd8:	461a      	mov	r2, r3
   10dda:	f24a 63a8 	movw	r3, #42664	; 0xa6a8
   10dde:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10de2:	601a      	str	r2, [r3, #0]
  if (desired_climb < -CLIMB_MAX) desired_climb = -CLIMB_MAX;
   10de4:	f24a 63a8 	movw	r3, #42664	; 0xa6a8
   10de8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10dec:	681b      	ldr	r3, [r3, #0]
   10dee:	4618      	mov	r0, r3
   10df0:	f04f 0100 	mov.w	r1, #0
   10df4:	f6cb 7180 	movt	r1, #49024	; 0xbf80
   10df8:	f006 f92c 	bl	17054 <__aeabi_fcmplt>
   10dfc:	4603      	mov	r3, r0
   10dfe:	2b00      	cmp	r3, #0
   10e00:	d008      	beq.n	10e14 <altitude_pid_run+0x8c>
   10e02:	f24a 63a8 	movw	r3, #42664	; 0xa6a8
   10e06:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e0a:	f04f 0200 	mov.w	r2, #0
   10e0e:	f6cb 7280 	movt	r2, #49024	; 0xbf80
   10e12:	601a      	str	r2, [r3, #0]
  if (desired_climb > CLIMB_MAX) desired_climb = CLIMB_MAX;
   10e14:	f24a 63a8 	movw	r3, #42664	; 0xa6a8
   10e18:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e1c:	681b      	ldr	r3, [r3, #0]
   10e1e:	4618      	mov	r0, r3
   10e20:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   10e24:	f006 f934 	bl	17090 <__aeabi_fcmpgt>
   10e28:	4603      	mov	r3, r0
   10e2a:	2b00      	cmp	r3, #0
   10e2c:	d006      	beq.n	10e3c <altitude_pid_run+0xb4>
   10e2e:	f24a 63a8 	movw	r3, #42664	; 0xa6a8
   10e32:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e36:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   10e3a:	601a      	str	r2, [r3, #0]
}
   10e3c:	3708      	adds	r7, #8
   10e3e:	46bd      	mov	sp, r7
   10e40:	bd80      	pop	{r7, pc}
   10e42:	bf00      	nop
   10e44:	f3af 8000 	nop.w

00010e48 <auto_nav>:
#define GROUND_ALT 125.
#define SECURITY_ALT 150.
#define MAX_DIST_FROM_HOME 500.
#ifdef NAV_C

static inline void auto_nav(void) {
   10e48:	b5f0      	push	{r4, r5, r6, r7, lr}
   10e4a:	b08b      	sub	sp, #44	; 0x2c
   10e4c:	af00      	add	r7, sp, #0
        NextBlock()
    }

}
#else*/
if(nav_block == 0)
   10e4e:	f24a 63b9 	movw	r3, #42681	; 0xa6b9
   10e52:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e56:	781b      	ldrb	r3, [r3, #0]
   10e58:	2b00      	cmp	r3, #0
   10e5a:	f040 8169 	bne.w	11130 <auto_nav+0x2e8>
{ // init
    
    if (nav_stage == 0) 
   10e5e:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   10e62:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e66:	781b      	ldrb	r3, [r3, #0]
   10e68:	2b00      	cmp	r3, #0
   10e6a:	d13c      	bne.n	10ee6 <auto_nav+0x9e>
    {
	Label(while_1)
	nav_stage=0;
   10e6c:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   10e70:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e74:	2200      	movs	r2, #0
   10e76:	701a      	strb	r2, [r3, #0]
	if (! (!(estimator_flight_time))) Goto(endwhile_2) 
   10e78:	f64a 1344 	movw	r3, #43332	; 0xa944
   10e7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e80:	881b      	ldrh	r3, [r3, #0]
   10e82:	2b00      	cmp	r3, #0
   10e84:	d000      	beq.n	10e88 <auto_nav+0x40>
   10e86:	e03d      	b.n	10f04 <auto_nav+0xbc>
	else NextStage(); 
   10e88:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   10e8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e90:	781b      	ldrb	r3, [r3, #0]
   10e92:	3301      	adds	r3, #1
   10e94:	b2da      	uxtb	r2, r3
   10e96:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   10e9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e9e:	701a      	strb	r2, [r3, #0]
   10ea0:	f64a 1314 	movw	r3, #43284	; 0xa914
   10ea4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ea8:	681a      	ldr	r2, [r3, #0]
   10eaa:	f24a 63bc 	movw	r3, #42684	; 0xa6bc
   10eae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10eb2:	601a      	str	r2, [r3, #0]
   10eb4:	f64a 1318 	movw	r3, #43288	; 0xa918
   10eb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ebc:	681a      	ldr	r2, [r3, #0]
   10ebe:	f24a 63c0 	movw	r3, #42688	; 0xa6c0
   10ec2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ec6:	601a      	str	r2, [r3, #0]
   10ec8:	f24a 63cc 	movw	r3, #42700	; 0xa6cc
   10ecc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ed0:	2200      	movs	r2, #0
   10ed2:	801a      	strh	r2, [r3, #0]
   10ed4:	f24a 63d0 	movw	r3, #42704	; 0xa6d0
   10ed8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10edc:	f04f 0200 	mov.w	r2, #0
   10ee0:	601a      	str	r2, [r3, #0]
   10ee2:	f002 b883 	b.w	12fec <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   10ee6:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   10eea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10eee:	781b      	ldrb	r3, [r3, #0]
   10ef0:	2b01      	cmp	r3, #1
   10ef2:	d100      	bne.n	10ef6 <auto_nav+0xae>
    {   Goto(while_1)}
   10ef4:	e7ba      	b.n	10e6c <auto_nav+0x24>
    else if (nav_stage == 2)
   10ef6:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   10efa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10efe:	781b      	ldrb	r3, [r3, #0]
   10f00:	2b02      	cmp	r3, #2
   10f02:	d162      	bne.n	10fca <auto_nav+0x182>
    {
	Label(endwhile_2)
	nav_stage = 2;
   10f04:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   10f08:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f0c:	2202      	movs	r2, #2
   10f0e:	701a      	strb	r2, [r3, #0]
        if ((estimator_flight_time>8)) NextStage() else {
   10f10:	f64a 1344 	movw	r3, #43332	; 0xa944
   10f14:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f18:	881b      	ldrh	r3, [r3, #0]
   10f1a:	2b08      	cmp	r3, #8
   10f1c:	d92e      	bls.n	10f7c <auto_nav+0x134>
   10f1e:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   10f22:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f26:	781b      	ldrb	r3, [r3, #0]
   10f28:	3301      	adds	r3, #1
   10f2a:	b2da      	uxtb	r2, r3
   10f2c:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   10f30:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f34:	701a      	strb	r2, [r3, #0]
   10f36:	f64a 1314 	movw	r3, #43284	; 0xa914
   10f3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f3e:	681a      	ldr	r2, [r3, #0]
   10f40:	f24a 63bc 	movw	r3, #42684	; 0xa6bc
   10f44:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f48:	601a      	str	r2, [r3, #0]
   10f4a:	f64a 1318 	movw	r3, #43288	; 0xa918
   10f4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f52:	681a      	ldr	r2, [r3, #0]
   10f54:	f24a 63c0 	movw	r3, #42688	; 0xa6c0
   10f58:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f5c:	601a      	str	r2, [r3, #0]
   10f5e:	f24a 63cc 	movw	r3, #42700	; 0xa6cc
   10f62:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f66:	2200      	movs	r2, #0
   10f68:	801a      	strh	r2, [r3, #0]
   10f6a:	f24a 63d0 	movw	r3, #42704	; 0xa6d0
   10f6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f72:	f04f 0200 	mov.w	r2, #0
   10f76:	601a      	str	r2, [r3, #0]
   10f78:	f002 b838 	b.w	12fec <auto_nav+0x21a4>
          desired_course = RadOfDeg(QFU);
   10f7c:	f24a 63a4 	movw	r3, #42660	; 0xa6a4
   10f80:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f84:	f64c 32e4 	movw	r2, #52196	; 0xcbe4
   10f88:	f2c4 0296 	movt	r2, #16534	; 0x4096
   10f8c:	601a      	str	r2, [r3, #0]
          auto_pitch = FALSE;
   10f8e:	f24a 3347 	movw	r3, #41799	; 0xa347
   10f92:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f96:	2200      	movs	r2, #0
   10f98:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.150000;
   10f9a:	f24a 63e4 	movw	r3, #42724	; 0xa6e4
   10f9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fa2:	f649 129a 	movw	r2, #39322	; 0x999a
   10fa6:	f6c3 6219 	movt	r2, #15897	; 0x3e19
   10faa:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_GAZ;
   10fac:	f24a 3345 	movw	r3, #41797	; 0xa345
   10fb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fb4:	2201      	movs	r2, #1
   10fb6:	701a      	strb	r2, [r3, #0]
          nav_desired_gaz = TRIM_UPPRZ(0.800000*MAX_PPRZ);
   10fb8:	f24a 63e0 	movw	r3, #42720	; 0xa6e0
   10fbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fc0:	f44f 52f0 	mov.w	r2, #7680	; 0x1e00
   10fc4:	801a      	strh	r2, [r3, #0]
        }
        return;
   10fc6:	f002 b811 	b.w	12fec <auto_nav+0x21a4>
     }
     else if (nav_stage == 3)
   10fca:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   10fce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fd2:	781b      	ldrb	r3, [r3, #0]
   10fd4:	2b03      	cmp	r3, #3
   10fd6:	d168      	bne.n	110aa <auto_nav+0x262>
     {
	nav_stage = 3;	
   10fd8:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   10fdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fe0:	2203      	movs	r2, #3
   10fe2:	701a      	strb	r2, [r3, #0]
        if ((estimator_z>SECURITY_ALT)) NextStage() else {
   10fe4:	f64a 131c 	movw	r3, #43292	; 0xa91c
   10fe8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fec:	681b      	ldr	r3, [r3, #0]
   10fee:	4618      	mov	r0, r3
   10ff0:	f04f 0100 	mov.w	r1, #0
   10ff4:	f2c4 3116 	movt	r1, #17174	; 0x4316
   10ff8:	f006 f84a 	bl	17090 <__aeabi_fcmpgt>
   10ffc:	4603      	mov	r3, r0
   10ffe:	2b00      	cmp	r3, #0
   11000:	d02e      	beq.n	11060 <auto_nav+0x218>
   11002:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   11006:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1100a:	781b      	ldrb	r3, [r3, #0]
   1100c:	3301      	adds	r3, #1
   1100e:	b2da      	uxtb	r2, r3
   11010:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   11014:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11018:	701a      	strb	r2, [r3, #0]
   1101a:	f64a 1314 	movw	r3, #43284	; 0xa914
   1101e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11022:	681a      	ldr	r2, [r3, #0]
   11024:	f24a 63bc 	movw	r3, #42684	; 0xa6bc
   11028:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1102c:	601a      	str	r2, [r3, #0]
   1102e:	f64a 1318 	movw	r3, #43288	; 0xa918
   11032:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11036:	681a      	ldr	r2, [r3, #0]
   11038:	f24a 63c0 	movw	r3, #42688	; 0xa6c0
   1103c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11040:	601a      	str	r2, [r3, #0]
   11042:	f24a 63cc 	movw	r3, #42700	; 0xa6cc
   11046:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1104a:	2200      	movs	r2, #0
   1104c:	801a      	strh	r2, [r3, #0]
   1104e:	f24a 63d0 	movw	r3, #42704	; 0xa6d0
   11052:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11056:	f04f 0200 	mov.w	r2, #0
   1105a:	601a      	str	r2, [r3, #0]
   1105c:	f001 bfc6 	b.w	12fec <auto_nav+0x21a4>
          desired_course = RadOfDeg(QFU);
   11060:	f24a 63a4 	movw	r3, #42660	; 0xa6a4
   11064:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11068:	f64c 32e4 	movw	r2, #52196	; 0xcbe4
   1106c:	f2c4 0296 	movt	r2, #16534	; 0x4096
   11070:	601a      	str	r2, [r3, #0]
          auto_pitch = FALSE;
   11072:	f24a 3347 	movw	r3, #41799	; 0xa347
   11076:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1107a:	2200      	movs	r2, #0
   1107c:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.000000;
   1107e:	f24a 63e4 	movw	r3, #42724	; 0xa6e4
   11082:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11086:	f04f 0200 	mov.w	r2, #0
   1108a:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_CLIMB;
   1108c:	f24a 3345 	movw	r3, #41797	; 0xa345
   11090:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11094:	2202      	movs	r2, #2
   11096:	701a      	strb	r2, [r3, #0]
          desired_climb = 8.000000;
   11098:	f24a 63a8 	movw	r3, #42664	; 0xa6a8
   1109c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110a0:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   110a4:	601a      	str	r2, [r3, #0]
        }
        return;
   110a6:	f001 bfa1 	b.w	12fec <auto_nav+0x21a4>
     }
     else if (nav_stage == 4)
   110aa:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   110ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110b2:	781b      	ldrb	r3, [r3, #0]
   110b4:	2b04      	cmp	r3, #4
   110b6:	f041 8799 	bne.w	12fec <auto_nav+0x21a4>
        NextBlock()
   110ba:	f24a 63b9 	movw	r3, #42681	; 0xa6b9
   110be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110c2:	781b      	ldrb	r3, [r3, #0]
   110c4:	3301      	adds	r3, #1
   110c6:	b2da      	uxtb	r2, r3
   110c8:	f24a 63b9 	movw	r3, #42681	; 0xa6b9
   110cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110d0:	701a      	strb	r2, [r3, #0]
   110d2:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   110d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110da:	2200      	movs	r2, #0
   110dc:	701a      	strb	r2, [r3, #0]
   110de:	f24a 63ce 	movw	r3, #42702	; 0xa6ce
   110e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110e6:	2200      	movs	r2, #0
   110e8:	801a      	strh	r2, [r3, #0]
   110ea:	f64a 1314 	movw	r3, #43284	; 0xa914
   110ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110f2:	681a      	ldr	r2, [r3, #0]
   110f4:	f24a 63bc 	movw	r3, #42684	; 0xa6bc
   110f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110fc:	601a      	str	r2, [r3, #0]
   110fe:	f64a 1318 	movw	r3, #43288	; 0xa918
   11102:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11106:	681a      	ldr	r2, [r3, #0]
   11108:	f24a 63c0 	movw	r3, #42688	; 0xa6c0
   1110c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11110:	601a      	str	r2, [r3, #0]
   11112:	f24a 63cc 	movw	r3, #42700	; 0xa6cc
   11116:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1111a:	2200      	movs	r2, #0
   1111c:	801a      	strh	r2, [r3, #0]
   1111e:	f24a 63d0 	movw	r3, #42704	; 0xa6d0
   11122:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11126:	f04f 0200 	mov.w	r2, #0
   1112a:	601a      	str	r2, [r3, #0]
   1112c:	f001 bf5e 	b.w	12fec <auto_nav+0x21a4>
     else { }
}
else if (nav_block == 1) // two
   11130:	f24a 63b9 	movw	r3, #42681	; 0xa6b9
   11134:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11138:	781b      	ldrb	r3, [r3, #0]
   1113a:	2b01      	cmp	r3, #1
   1113c:	f040 81bc 	bne.w	114b8 <auto_nav+0x670>
{
    nav_block = 1;
   11140:	f24a 63b9 	movw	r3, #42681	; 0xa6b9
   11144:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11148:	2201      	movs	r2, #1
   1114a:	701a      	strb	r2, [r3, #0]
    if RcEvent1() 
   1114c:	f24a 3348 	movw	r3, #41800	; 0xa348
   11150:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11154:	781b      	ldrb	r3, [r3, #0]
   11156:	2b00      	cmp	r3, #0
   11158:	d007      	beq.n	1116a <auto_nav+0x322>
   1115a:	f24a 3348 	movw	r3, #41800	; 0xa348
   1115e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11162:	2200      	movs	r2, #0
   11164:	701a      	strb	r2, [r3, #0]
   11166:	2301      	movs	r3, #1
   11168:	e000      	b.n	1116c <auto_nav+0x324>
   1116a:	2300      	movs	r3, #0
   1116c:	2b00      	cmp	r3, #0
   1116e:	d034      	beq.n	111da <auto_nav+0x392>
	{ GotoBlock(2) }
   11170:	f24a 63b9 	movw	r3, #42681	; 0xa6b9
   11174:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11178:	2202      	movs	r2, #2
   1117a:	701a      	strb	r2, [r3, #0]
   1117c:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   11180:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11184:	2200      	movs	r2, #0
   11186:	701a      	strb	r2, [r3, #0]
   11188:	f24a 63ce 	movw	r3, #42702	; 0xa6ce
   1118c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11190:	2200      	movs	r2, #0
   11192:	801a      	strh	r2, [r3, #0]
   11194:	f64a 1314 	movw	r3, #43284	; 0xa914
   11198:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1119c:	681a      	ldr	r2, [r3, #0]
   1119e:	f24a 63bc 	movw	r3, #42684	; 0xa6bc
   111a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111a6:	601a      	str	r2, [r3, #0]
   111a8:	f64a 1318 	movw	r3, #43288	; 0xa918
   111ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111b0:	681a      	ldr	r2, [r3, #0]
   111b2:	f24a 63c0 	movw	r3, #42688	; 0xa6c0
   111b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111ba:	601a      	str	r2, [r3, #0]
   111bc:	f24a 63cc 	movw	r3, #42700	; 0xa6cc
   111c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111c4:	2200      	movs	r2, #0
   111c6:	801a      	strh	r2, [r3, #0]
   111c8:	f24a 63d0 	movw	r3, #42704	; 0xa6d0
   111cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111d0:	f04f 0200 	mov.w	r2, #0
   111d4:	601a      	str	r2, [r3, #0]
   111d6:	f001 bf09 	b.w	12fec <auto_nav+0x21a4>
    if(nav_stage == 0)
   111da:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   111de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111e2:	781b      	ldrb	r3, [r3, #0]
   111e4:	2b00      	cmp	r3, #0
   111e6:	d12e      	bne.n	11246 <auto_nav+0x3fe>
    {
       Label(while_3)
       if (! (TRUE)) Goto(endwhile_4) else NextStage();
   111e8:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   111ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111f0:	781b      	ldrb	r3, [r3, #0]
   111f2:	3301      	adds	r3, #1
   111f4:	b2da      	uxtb	r2, r3
   111f6:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   111fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111fe:	701a      	strb	r2, [r3, #0]
   11200:	f64a 1314 	movw	r3, #43284	; 0xa914
   11204:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11208:	681a      	ldr	r2, [r3, #0]
   1120a:	f24a 63bc 	movw	r3, #42684	; 0xa6bc
   1120e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11212:	601a      	str	r2, [r3, #0]
   11214:	f64a 1318 	movw	r3, #43288	; 0xa918
   11218:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1121c:	681a      	ldr	r2, [r3, #0]
   1121e:	f24a 63c0 	movw	r3, #42688	; 0xa6c0
   11222:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11226:	601a      	str	r2, [r3, #0]
   11228:	f24a 63cc 	movw	r3, #42700	; 0xa6cc
   1122c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11230:	2200      	movs	r2, #0
   11232:	801a      	strh	r2, [r3, #0]
   11234:	f24a 63d0 	movw	r3, #42704	; 0xa6d0
   11238:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1123c:	f04f 0200 	mov.w	r2, #0
   11240:	601a      	str	r2, [r3, #0]
   11242:	f001 bed3 	b.w	12fec <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   11246:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   1124a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1124e:	781b      	ldrb	r3, [r3, #0]
   11250:	2b01      	cmp	r3, #1
   11252:	d169      	bne.n	11328 <auto_nav+0x4e0>
    {
	  nav_stage = 1;
   11254:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   11258:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1125c:	2201      	movs	r2, #1
   1125e:	701a      	strb	r2, [r3, #0]
          if (approaching(1)) NextStageFrom(1) else {
   11260:	2001      	movs	r0, #1
   11262:	f001 fed1 	bl	13008 <approaching>
   11266:	4603      	mov	r3, r0
   11268:	2b00      	cmp	r3, #0
   1126a:	d034      	beq.n	112d6 <auto_nav+0x48e>
   1126c:	f24a 63c4 	movw	r3, #42692	; 0xa6c4
   11270:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11274:	2201      	movs	r2, #1
   11276:	701a      	strb	r2, [r3, #0]
   11278:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   1127c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11280:	781b      	ldrb	r3, [r3, #0]
   11282:	3301      	adds	r3, #1
   11284:	b2da      	uxtb	r2, r3
   11286:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   1128a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1128e:	701a      	strb	r2, [r3, #0]
   11290:	f64a 1314 	movw	r3, #43284	; 0xa914
   11294:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11298:	681a      	ldr	r2, [r3, #0]
   1129a:	f24a 63bc 	movw	r3, #42684	; 0xa6bc
   1129e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112a2:	601a      	str	r2, [r3, #0]
   112a4:	f64a 1318 	movw	r3, #43288	; 0xa918
   112a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112ac:	681a      	ldr	r2, [r3, #0]
   112ae:	f24a 63c0 	movw	r3, #42688	; 0xa6c0
   112b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112b6:	601a      	str	r2, [r3, #0]
   112b8:	f24a 63cc 	movw	r3, #42700	; 0xa6cc
   112bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112c0:	2200      	movs	r2, #0
   112c2:	801a      	strh	r2, [r3, #0]
   112c4:	f24a 63d0 	movw	r3, #42704	; 0xa6d0
   112c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112cc:	f04f 0200 	mov.w	r2, #0
   112d0:	601a      	str	r2, [r3, #0]
   112d2:	f001 be8b 	b.w	12fec <auto_nav+0x21a4>
            fly_to(1);
   112d6:	2001      	movs	r0, #1
   112d8:	f001 ffca 	bl	13270 <fly_to>
            auto_pitch = FALSE;
   112dc:	f24a 3347 	movw	r3, #41799	; 0xa347
   112e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112e4:	2200      	movs	r2, #0
   112e6:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   112e8:	f24a 63e4 	movw	r3, #42724	; 0xa6e4
   112ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112f0:	f04f 0200 	mov.w	r2, #0
   112f4:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   112f6:	f24a 3345 	movw	r3, #41797	; 0xa345
   112fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112fe:	2203      	movs	r2, #3
   11300:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[1].a;
   11302:	f240 130c 	movw	r3, #268	; 0x10c
   11306:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1130a:	695a      	ldr	r2, [r3, #20]
   1130c:	f240 1308 	movw	r3, #264	; 0x108
   11310:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11314:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   11316:	f24a 63ac 	movw	r3, #42668	; 0xa6ac
   1131a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1131e:	f04f 0200 	mov.w	r2, #0
   11322:	601a      	str	r2, [r3, #0]
          }
          return;
   11324:	f001 be62 	b.w	12fec <auto_nav+0x21a4>
     }
     else if (nav_stage == 2)
   11328:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   1132c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11330:	781b      	ldrb	r3, [r3, #0]
   11332:	2b02      	cmp	r3, #2
   11334:	d169      	bne.n	1140a <auto_nav+0x5c2>
     {
	  nav_stage = 2;
   11336:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   1133a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1133e:	2202      	movs	r2, #2
   11340:	701a      	strb	r2, [r3, #0]
          if (approaching(4)) NextStageFrom(4) else {
   11342:	2004      	movs	r0, #4
   11344:	f001 fe60 	bl	13008 <approaching>
   11348:	4603      	mov	r3, r0
   1134a:	2b00      	cmp	r3, #0
   1134c:	d034      	beq.n	113b8 <auto_nav+0x570>
   1134e:	f24a 63c4 	movw	r3, #42692	; 0xa6c4
   11352:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11356:	2204      	movs	r2, #4
   11358:	701a      	strb	r2, [r3, #0]
   1135a:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   1135e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11362:	781b      	ldrb	r3, [r3, #0]
   11364:	3301      	adds	r3, #1
   11366:	b2da      	uxtb	r2, r3
   11368:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   1136c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11370:	701a      	strb	r2, [r3, #0]
   11372:	f64a 1314 	movw	r3, #43284	; 0xa914
   11376:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1137a:	681a      	ldr	r2, [r3, #0]
   1137c:	f24a 63bc 	movw	r3, #42684	; 0xa6bc
   11380:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11384:	601a      	str	r2, [r3, #0]
   11386:	f64a 1318 	movw	r3, #43288	; 0xa918
   1138a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1138e:	681a      	ldr	r2, [r3, #0]
   11390:	f24a 63c0 	movw	r3, #42688	; 0xa6c0
   11394:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11398:	601a      	str	r2, [r3, #0]
   1139a:	f24a 63cc 	movw	r3, #42700	; 0xa6cc
   1139e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113a2:	2200      	movs	r2, #0
   113a4:	801a      	strh	r2, [r3, #0]
   113a6:	f24a 63d0 	movw	r3, #42704	; 0xa6d0
   113aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113ae:	f04f 0200 	mov.w	r2, #0
   113b2:	601a      	str	r2, [r3, #0]
   113b4:	f001 be1a 	b.w	12fec <auto_nav+0x21a4>
            fly_to(4);
   113b8:	2004      	movs	r0, #4
   113ba:	f001 ff59 	bl	13270 <fly_to>
            auto_pitch = FALSE;
   113be:	f24a 3347 	movw	r3, #41799	; 0xa347
   113c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113c6:	2200      	movs	r2, #0
   113c8:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   113ca:	f24a 63e4 	movw	r3, #42724	; 0xa6e4
   113ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113d2:	f04f 0200 	mov.w	r2, #0
   113d6:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   113d8:	f24a 3345 	movw	r3, #41797	; 0xa345
   113dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113e0:	2203      	movs	r2, #3
   113e2:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[4].a;
   113e4:	f240 130c 	movw	r3, #268	; 0x10c
   113e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   113ee:	f240 1308 	movw	r3, #264	; 0x108
   113f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113f6:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   113f8:	f24a 63ac 	movw	r3, #42668	; 0xa6ac
   113fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11400:	f04f 0200 	mov.w	r2, #0
   11404:	601a      	str	r2, [r3, #0]
          }
          return;
   11406:	f001 bdf1 	b.w	12fec <auto_nav+0x21a4>
      }
      else if (nav_stage == 3)
   1140a:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   1140e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11412:	781b      	ldrb	r3, [r3, #0]
   11414:	2b03      	cmp	r3, #3
   11416:	d106      	bne.n	11426 <auto_nav+0x5de>
      {
	  nav_stage = 3;
   11418:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   1141c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11420:	2203      	movs	r2, #3
   11422:	701a      	strb	r2, [r3, #0]
          Goto(while_3)
   11424:	e6e0      	b.n	111e8 <auto_nav+0x3a0>
      }
      else if (nav_stage == 4)
   11426:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   1142a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1142e:	781b      	ldrb	r3, [r3, #0]
   11430:	2b04      	cmp	r3, #4
   11432:	f041 85db 	bne.w	12fec <auto_nav+0x21a4>
      {
        Label(endwhile_4)
	nav_stage = 4;
   11436:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   1143a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1143e:	2204      	movs	r2, #4
   11440:	701a      	strb	r2, [r3, #0]
        NextBlock()
   11442:	f24a 63b9 	movw	r3, #42681	; 0xa6b9
   11446:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1144a:	781b      	ldrb	r3, [r3, #0]
   1144c:	3301      	adds	r3, #1
   1144e:	b2da      	uxtb	r2, r3
   11450:	f24a 63b9 	movw	r3, #42681	; 0xa6b9
   11454:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11458:	701a      	strb	r2, [r3, #0]
   1145a:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   1145e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11462:	2200      	movs	r2, #0
   11464:	701a      	strb	r2, [r3, #0]
   11466:	f24a 63ce 	movw	r3, #42702	; 0xa6ce
   1146a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1146e:	2200      	movs	r2, #0
   11470:	801a      	strh	r2, [r3, #0]
   11472:	f64a 1314 	movw	r3, #43284	; 0xa914
   11476:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1147a:	681a      	ldr	r2, [r3, #0]
   1147c:	f24a 63bc 	movw	r3, #42684	; 0xa6bc
   11480:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11484:	601a      	str	r2, [r3, #0]
   11486:	f64a 1318 	movw	r3, #43288	; 0xa918
   1148a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1148e:	681a      	ldr	r2, [r3, #0]
   11490:	f24a 63c0 	movw	r3, #42688	; 0xa6c0
   11494:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11498:	601a      	str	r2, [r3, #0]
   1149a:	f24a 63cc 	movw	r3, #42700	; 0xa6cc
   1149e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114a2:	2200      	movs	r2, #0
   114a4:	801a      	strh	r2, [r3, #0]
   114a6:	f24a 63d0 	movw	r3, #42704	; 0xa6d0
   114aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114ae:	f04f 0200 	mov.w	r2, #0
   114b2:	601a      	str	r2, [r3, #0]
   114b4:	f001 bd9a 	b.w	12fec <auto_nav+0x21a4>
      }
      else { }
}
else if (nav_block == 2) // height
   114b8:	f24a 63b9 	movw	r3, #42681	; 0xa6b9
   114bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114c0:	781b      	ldrb	r3, [r3, #0]
   114c2:	2b02      	cmp	r3, #2
   114c4:	f040 8392 	bne.w	11bec <auto_nav+0xda4>
{
	nav_block = 2;
   114c8:	f24a 63b9 	movw	r3, #42681	; 0xa6b9
   114cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114d0:	2202      	movs	r2, #2
   114d2:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(3) }
   114d4:	f24a 3348 	movw	r3, #41800	; 0xa348
   114d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114dc:	781b      	ldrb	r3, [r3, #0]
   114de:	2b00      	cmp	r3, #0
   114e0:	d007      	beq.n	114f2 <auto_nav+0x6aa>
   114e2:	f24a 3348 	movw	r3, #41800	; 0xa348
   114e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114ea:	2200      	movs	r2, #0
   114ec:	701a      	strb	r2, [r3, #0]
   114ee:	2301      	movs	r3, #1
   114f0:	e000      	b.n	114f4 <auto_nav+0x6ac>
   114f2:	2300      	movs	r3, #0
   114f4:	2b00      	cmp	r3, #0
   114f6:	d034      	beq.n	11562 <auto_nav+0x71a>
   114f8:	f24a 63b9 	movw	r3, #42681	; 0xa6b9
   114fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11500:	2203      	movs	r2, #3
   11502:	701a      	strb	r2, [r3, #0]
   11504:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   11508:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1150c:	2200      	movs	r2, #0
   1150e:	701a      	strb	r2, [r3, #0]
   11510:	f24a 63ce 	movw	r3, #42702	; 0xa6ce
   11514:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11518:	2200      	movs	r2, #0
   1151a:	801a      	strh	r2, [r3, #0]
   1151c:	f64a 1314 	movw	r3, #43284	; 0xa914
   11520:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11524:	681a      	ldr	r2, [r3, #0]
   11526:	f24a 63bc 	movw	r3, #42684	; 0xa6bc
   1152a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1152e:	601a      	str	r2, [r3, #0]
   11530:	f64a 1318 	movw	r3, #43288	; 0xa918
   11534:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11538:	681a      	ldr	r2, [r3, #0]
   1153a:	f24a 63c0 	movw	r3, #42688	; 0xa6c0
   1153e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11542:	601a      	str	r2, [r3, #0]
   11544:	f24a 63cc 	movw	r3, #42700	; 0xa6cc
   11548:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1154c:	2200      	movs	r2, #0
   1154e:	801a      	strh	r2, [r3, #0]
   11550:	f24a 63d0 	movw	r3, #42704	; 0xa6d0
   11554:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11558:	f04f 0200 	mov.w	r2, #0
   1155c:	601a      	str	r2, [r3, #0]
   1155e:	f001 bd45 	b.w	12fec <auto_nav+0x21a4>
    
    if(nav_stage == 0)
   11562:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   11566:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1156a:	781b      	ldrb	r3, [r3, #0]
   1156c:	2b00      	cmp	r3, #0
   1156e:	d134      	bne.n	115da <auto_nav+0x792>
    {
       Label(while_5)
       nav_stage = 0;
   11570:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   11574:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11578:	2200      	movs	r2, #0
   1157a:	701a      	strb	r2, [r3, #0]
       if (! (TRUE)) Goto(endwhile_6) else NextStage();
   1157c:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   11580:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11584:	781b      	ldrb	r3, [r3, #0]
   11586:	3301      	adds	r3, #1
   11588:	b2da      	uxtb	r2, r3
   1158a:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   1158e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11592:	701a      	strb	r2, [r3, #0]
   11594:	f64a 1314 	movw	r3, #43284	; 0xa914
   11598:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1159c:	681a      	ldr	r2, [r3, #0]
   1159e:	f24a 63bc 	movw	r3, #42684	; 0xa6bc
   115a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115a6:	601a      	str	r2, [r3, #0]
   115a8:	f64a 1318 	movw	r3, #43288	; 0xa918
   115ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115b0:	681a      	ldr	r2, [r3, #0]
   115b2:	f24a 63c0 	movw	r3, #42688	; 0xa6c0
   115b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115ba:	601a      	str	r2, [r3, #0]
   115bc:	f24a 63cc 	movw	r3, #42700	; 0xa6cc
   115c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115c4:	2200      	movs	r2, #0
   115c6:	801a      	strh	r2, [r3, #0]
   115c8:	f24a 63d0 	movw	r3, #42704	; 0xa6d0
   115cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115d0:	f04f 0200 	mov.w	r2, #0
   115d4:	601a      	str	r2, [r3, #0]
   115d6:	f001 bd09 	b.w	12fec <auto_nav+0x21a4>
    }
    else if(nav_stage == 1)
   115da:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   115de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115e2:	781b      	ldrb	r3, [r3, #0]
   115e4:	2b01      	cmp	r3, #1
   115e6:	d169      	bne.n	116bc <auto_nav+0x874>
    {
         nav_stage =1;
   115e8:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   115ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115f0:	2201      	movs	r2, #1
   115f2:	701a      	strb	r2, [r3, #0]
          if (approaching(6)) NextStageFrom(6) else {
   115f4:	2006      	movs	r0, #6
   115f6:	f001 fd07 	bl	13008 <approaching>
   115fa:	4603      	mov	r3, r0
   115fc:	2b00      	cmp	r3, #0
   115fe:	d034      	beq.n	1166a <auto_nav+0x822>
   11600:	f24a 63c4 	movw	r3, #42692	; 0xa6c4
   11604:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11608:	2206      	movs	r2, #6
   1160a:	701a      	strb	r2, [r3, #0]
   1160c:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   11610:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11614:	781b      	ldrb	r3, [r3, #0]
   11616:	3301      	adds	r3, #1
   11618:	b2da      	uxtb	r2, r3
   1161a:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   1161e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11622:	701a      	strb	r2, [r3, #0]
   11624:	f64a 1314 	movw	r3, #43284	; 0xa914
   11628:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1162c:	681a      	ldr	r2, [r3, #0]
   1162e:	f24a 63bc 	movw	r3, #42684	; 0xa6bc
   11632:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11636:	601a      	str	r2, [r3, #0]
   11638:	f64a 1318 	movw	r3, #43288	; 0xa918
   1163c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11640:	681a      	ldr	r2, [r3, #0]
   11642:	f24a 63c0 	movw	r3, #42688	; 0xa6c0
   11646:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1164a:	601a      	str	r2, [r3, #0]
   1164c:	f24a 63cc 	movw	r3, #42700	; 0xa6cc
   11650:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11654:	2200      	movs	r2, #0
   11656:	801a      	strh	r2, [r3, #0]
   11658:	f24a 63d0 	movw	r3, #42704	; 0xa6d0
   1165c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11660:	f04f 0200 	mov.w	r2, #0
   11664:	601a      	str	r2, [r3, #0]
   11666:	f001 bcc1 	b.w	12fec <auto_nav+0x21a4>
            fly_to(6);
   1166a:	2006      	movs	r0, #6
   1166c:	f001 fe00 	bl	13270 <fly_to>
            auto_pitch = FALSE;
   11670:	f24a 3347 	movw	r3, #41799	; 0xa347
   11674:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11678:	2200      	movs	r2, #0
   1167a:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   1167c:	f24a 63e4 	movw	r3, #42724	; 0xa6e4
   11680:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11684:	f04f 0200 	mov.w	r2, #0
   11688:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   1168a:	f24a 3345 	movw	r3, #41797	; 0xa345
   1168e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11692:	2203      	movs	r2, #3
   11694:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[6].a;
   11696:	f240 130c 	movw	r3, #268	; 0x10c
   1169a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1169e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   116a0:	f240 1308 	movw	r3, #264	; 0x108
   116a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116a8:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   116aa:	f24a 63ac 	movw	r3, #42668	; 0xa6ac
   116ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116b2:	f04f 0200 	mov.w	r2, #0
   116b6:	601a      	str	r2, [r3, #0]
          }
          return;
   116b8:	f001 bc98 	b.w	12fec <auto_nav+0x21a4>
     }
     else if (nav_stage == 2)
   116bc:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   116c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116c4:	781b      	ldrb	r3, [r3, #0]
   116c6:	2b02      	cmp	r3, #2
   116c8:	d169      	bne.n	1179e <auto_nav+0x956>
     {
         nav_stage =2; 
   116ca:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   116ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116d2:	2202      	movs	r2, #2
   116d4:	701a      	strb	r2, [r3, #0]
         if (approaching(1)) NextStageFrom(1) else {
   116d6:	2001      	movs	r0, #1
   116d8:	f001 fc96 	bl	13008 <approaching>
   116dc:	4603      	mov	r3, r0
   116de:	2b00      	cmp	r3, #0
   116e0:	d034      	beq.n	1174c <auto_nav+0x904>
   116e2:	f24a 63c4 	movw	r3, #42692	; 0xa6c4
   116e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116ea:	2201      	movs	r2, #1
   116ec:	701a      	strb	r2, [r3, #0]
   116ee:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   116f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116f6:	781b      	ldrb	r3, [r3, #0]
   116f8:	3301      	adds	r3, #1
   116fa:	b2da      	uxtb	r2, r3
   116fc:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   11700:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11704:	701a      	strb	r2, [r3, #0]
   11706:	f64a 1314 	movw	r3, #43284	; 0xa914
   1170a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1170e:	681a      	ldr	r2, [r3, #0]
   11710:	f24a 63bc 	movw	r3, #42684	; 0xa6bc
   11714:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11718:	601a      	str	r2, [r3, #0]
   1171a:	f64a 1318 	movw	r3, #43288	; 0xa918
   1171e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11722:	681a      	ldr	r2, [r3, #0]
   11724:	f24a 63c0 	movw	r3, #42688	; 0xa6c0
   11728:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1172c:	601a      	str	r2, [r3, #0]
   1172e:	f24a 63cc 	movw	r3, #42700	; 0xa6cc
   11732:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11736:	2200      	movs	r2, #0
   11738:	801a      	strh	r2, [r3, #0]
   1173a:	f24a 63d0 	movw	r3, #42704	; 0xa6d0
   1173e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11742:	f04f 0200 	mov.w	r2, #0
   11746:	601a      	str	r2, [r3, #0]
   11748:	f001 bc50 	b.w	12fec <auto_nav+0x21a4>
            fly_to(1);
   1174c:	2001      	movs	r0, #1
   1174e:	f001 fd8f 	bl	13270 <fly_to>
            auto_pitch = FALSE;
   11752:	f24a 3347 	movw	r3, #41799	; 0xa347
   11756:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1175a:	2200      	movs	r2, #0
   1175c:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   1175e:	f24a 63e4 	movw	r3, #42724	; 0xa6e4
   11762:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11766:	f04f 0200 	mov.w	r2, #0
   1176a:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   1176c:	f24a 3345 	movw	r3, #41797	; 0xa345
   11770:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11774:	2203      	movs	r2, #3
   11776:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[1].a;
   11778:	f240 130c 	movw	r3, #268	; 0x10c
   1177c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11780:	695a      	ldr	r2, [r3, #20]
   11782:	f240 1308 	movw	r3, #264	; 0x108
   11786:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1178a:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   1178c:	f24a 63ac 	movw	r3, #42668	; 0xa6ac
   11790:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11794:	f04f 0200 	mov.w	r2, #0
   11798:	601a      	str	r2, [r3, #0]
          }
          return;
   1179a:	f001 bc27 	b.w	12fec <auto_nav+0x21a4>
      }
      else if (nav_stage == 3)
   1179e:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   117a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117a6:	781b      	ldrb	r3, [r3, #0]
   117a8:	2b03      	cmp	r3, #3
   117aa:	d16f      	bne.n	1188c <auto_nav+0xa44>
      {
	   nav_stage = 3;         
   117ac:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   117b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117b4:	2203      	movs	r2, #3
   117b6:	701a      	strb	r2, [r3, #0]
           if (approaching(2)) NextStageFrom(2) else {
   117b8:	2002      	movs	r0, #2
   117ba:	f001 fc25 	bl	13008 <approaching>
   117be:	4603      	mov	r3, r0
   117c0:	2b00      	cmp	r3, #0
   117c2:	d034      	beq.n	1182e <auto_nav+0x9e6>
   117c4:	f24a 63c4 	movw	r3, #42692	; 0xa6c4
   117c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117cc:	2202      	movs	r2, #2
   117ce:	701a      	strb	r2, [r3, #0]
   117d0:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   117d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117d8:	781b      	ldrb	r3, [r3, #0]
   117da:	3301      	adds	r3, #1
   117dc:	b2da      	uxtb	r2, r3
   117de:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   117e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117e6:	701a      	strb	r2, [r3, #0]
   117e8:	f64a 1314 	movw	r3, #43284	; 0xa914
   117ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117f0:	681a      	ldr	r2, [r3, #0]
   117f2:	f24a 63bc 	movw	r3, #42684	; 0xa6bc
   117f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117fa:	601a      	str	r2, [r3, #0]
   117fc:	f64a 1318 	movw	r3, #43288	; 0xa918
   11800:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11804:	681a      	ldr	r2, [r3, #0]
   11806:	f24a 63c0 	movw	r3, #42688	; 0xa6c0
   1180a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1180e:	601a      	str	r2, [r3, #0]
   11810:	f24a 63cc 	movw	r3, #42700	; 0xa6cc
   11814:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11818:	2200      	movs	r2, #0
   1181a:	801a      	strh	r2, [r3, #0]
   1181c:	f24a 63d0 	movw	r3, #42704	; 0xa6d0
   11820:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11824:	f04f 0200 	mov.w	r2, #0
   11828:	601a      	str	r2, [r3, #0]
   1182a:	f001 bbdf 	b.w	12fec <auto_nav+0x21a4>
            route_to(last_wp, 2);
   1182e:	f24a 63c4 	movw	r3, #42692	; 0xa6c4
   11832:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11836:	781b      	ldrb	r3, [r3, #0]
   11838:	4618      	mov	r0, r3
   1183a:	2102      	movs	r1, #2
   1183c:	f001 fd3a 	bl	132b4 <route_to>
            auto_pitch = FALSE;
   11840:	f24a 3347 	movw	r3, #41799	; 0xa347
   11844:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11848:	2200      	movs	r2, #0
   1184a:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   1184c:	f24a 63e4 	movw	r3, #42724	; 0xa6e4
   11850:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11854:	f04f 0200 	mov.w	r2, #0
   11858:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   1185a:	f24a 3345 	movw	r3, #41797	; 0xa345
   1185e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11862:	2203      	movs	r2, #3
   11864:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[2].a;
   11866:	f240 130c 	movw	r3, #268	; 0x10c
   1186a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1186e:	6a1a      	ldr	r2, [r3, #32]
   11870:	f240 1308 	movw	r3, #264	; 0x108
   11874:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11878:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   1187a:	f24a 63ac 	movw	r3, #42668	; 0xa6ac
   1187e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11882:	f04f 0200 	mov.w	r2, #0
   11886:	601a      	str	r2, [r3, #0]
          }
          return;
   11888:	f001 bbb0 	b.w	12fec <auto_nav+0x21a4>
       }
       else if (nav_stage == 4)
   1188c:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   11890:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11894:	781b      	ldrb	r3, [r3, #0]
   11896:	2b04      	cmp	r3, #4
   11898:	d169      	bne.n	1196e <auto_nav+0xb26>
       {
          nav_stage = 4;
   1189a:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   1189e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118a2:	2204      	movs	r2, #4
   118a4:	701a      	strb	r2, [r3, #0]
          if (approaching(3)) NextStageFrom(3) else {
   118a6:	2003      	movs	r0, #3
   118a8:	f001 fbae 	bl	13008 <approaching>
   118ac:	4603      	mov	r3, r0
   118ae:	2b00      	cmp	r3, #0
   118b0:	d034      	beq.n	1191c <auto_nav+0xad4>
   118b2:	f24a 63c4 	movw	r3, #42692	; 0xa6c4
   118b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118ba:	2203      	movs	r2, #3
   118bc:	701a      	strb	r2, [r3, #0]
   118be:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   118c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118c6:	781b      	ldrb	r3, [r3, #0]
   118c8:	3301      	adds	r3, #1
   118ca:	b2da      	uxtb	r2, r3
   118cc:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   118d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118d4:	701a      	strb	r2, [r3, #0]
   118d6:	f64a 1314 	movw	r3, #43284	; 0xa914
   118da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118de:	681a      	ldr	r2, [r3, #0]
   118e0:	f24a 63bc 	movw	r3, #42684	; 0xa6bc
   118e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118e8:	601a      	str	r2, [r3, #0]
   118ea:	f64a 1318 	movw	r3, #43288	; 0xa918
   118ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118f2:	681a      	ldr	r2, [r3, #0]
   118f4:	f24a 63c0 	movw	r3, #42688	; 0xa6c0
   118f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118fc:	601a      	str	r2, [r3, #0]
   118fe:	f24a 63cc 	movw	r3, #42700	; 0xa6cc
   11902:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11906:	2200      	movs	r2, #0
   11908:	801a      	strh	r2, [r3, #0]
   1190a:	f24a 63d0 	movw	r3, #42704	; 0xa6d0
   1190e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11912:	f04f 0200 	mov.w	r2, #0
   11916:	601a      	str	r2, [r3, #0]
   11918:	f001 bb68 	b.w	12fec <auto_nav+0x21a4>
            fly_to(3);
   1191c:	2003      	movs	r0, #3
   1191e:	f001 fca7 	bl	13270 <fly_to>
            auto_pitch = FALSE;
   11922:	f24a 3347 	movw	r3, #41799	; 0xa347
   11926:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1192a:	2200      	movs	r2, #0
   1192c:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   1192e:	f24a 63e4 	movw	r3, #42724	; 0xa6e4
   11932:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11936:	f04f 0200 	mov.w	r2, #0
   1193a:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   1193c:	f24a 3345 	movw	r3, #41797	; 0xa345
   11940:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11944:	2203      	movs	r2, #3
   11946:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[3].a;
   11948:	f240 130c 	movw	r3, #268	; 0x10c
   1194c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   11952:	f240 1308 	movw	r3, #264	; 0x108
   11956:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1195a:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   1195c:	f24a 63ac 	movw	r3, #42668	; 0xa6ac
   11960:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11964:	f04f 0200 	mov.w	r2, #0
   11968:	601a      	str	r2, [r3, #0]
          }
          return;
   1196a:	f001 bb3f 	b.w	12fec <auto_nav+0x21a4>
       }
       else if (nav_stage == 5)
   1196e:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   11972:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11976:	781b      	ldrb	r3, [r3, #0]
   11978:	2b05      	cmp	r3, #5
   1197a:	d169      	bne.n	11a50 <auto_nav+0xc08>
       {
          nav_stage =5;
   1197c:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   11980:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11984:	2205      	movs	r2, #5
   11986:	701a      	strb	r2, [r3, #0]
          if (approaching(4)) NextStageFrom(4) else {
   11988:	2004      	movs	r0, #4
   1198a:	f001 fb3d 	bl	13008 <approaching>
   1198e:	4603      	mov	r3, r0
   11990:	2b00      	cmp	r3, #0
   11992:	d034      	beq.n	119fe <auto_nav+0xbb6>
   11994:	f24a 63c4 	movw	r3, #42692	; 0xa6c4
   11998:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1199c:	2204      	movs	r2, #4
   1199e:	701a      	strb	r2, [r3, #0]
   119a0:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   119a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   119a8:	781b      	ldrb	r3, [r3, #0]
   119aa:	3301      	adds	r3, #1
   119ac:	b2da      	uxtb	r2, r3
   119ae:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   119b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   119b6:	701a      	strb	r2, [r3, #0]
   119b8:	f64a 1314 	movw	r3, #43284	; 0xa914
   119bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   119c0:	681a      	ldr	r2, [r3, #0]
   119c2:	f24a 63bc 	movw	r3, #42684	; 0xa6bc
   119c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   119ca:	601a      	str	r2, [r3, #0]
   119cc:	f64a 1318 	movw	r3, #43288	; 0xa918
   119d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   119d4:	681a      	ldr	r2, [r3, #0]
   119d6:	f24a 63c0 	movw	r3, #42688	; 0xa6c0
   119da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   119de:	601a      	str	r2, [r3, #0]
   119e0:	f24a 63cc 	movw	r3, #42700	; 0xa6cc
   119e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   119e8:	2200      	movs	r2, #0
   119ea:	801a      	strh	r2, [r3, #0]
   119ec:	f24a 63d0 	movw	r3, #42704	; 0xa6d0
   119f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   119f4:	f04f 0200 	mov.w	r2, #0
   119f8:	601a      	str	r2, [r3, #0]
   119fa:	f001 baf7 	b.w	12fec <auto_nav+0x21a4>
            fly_to(4);
   119fe:	2004      	movs	r0, #4
   11a00:	f001 fc36 	bl	13270 <fly_to>
            auto_pitch = FALSE;
   11a04:	f24a 3347 	movw	r3, #41799	; 0xa347
   11a08:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a0c:	2200      	movs	r2, #0
   11a0e:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   11a10:	f24a 63e4 	movw	r3, #42724	; 0xa6e4
   11a14:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a18:	f04f 0200 	mov.w	r2, #0
   11a1c:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   11a1e:	f24a 3345 	movw	r3, #41797	; 0xa345
   11a22:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a26:	2203      	movs	r2, #3
   11a28:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[4].a;
   11a2a:	f240 130c 	movw	r3, #268	; 0x10c
   11a2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   11a34:	f240 1308 	movw	r3, #264	; 0x108
   11a38:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a3c:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   11a3e:	f24a 63ac 	movw	r3, #42668	; 0xa6ac
   11a42:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a46:	f04f 0200 	mov.w	r2, #0
   11a4a:	601a      	str	r2, [r3, #0]
          }
          return;
   11a4c:	f001 bace 	b.w	12fec <auto_nav+0x21a4>
       }
       else if (nav_stage == 6)
   11a50:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   11a54:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a58:	781b      	ldrb	r3, [r3, #0]
   11a5a:	2b06      	cmp	r3, #6
   11a5c:	d16f      	bne.n	11b3e <auto_nav+0xcf6>
       {
          nav_stage =6;
   11a5e:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   11a62:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a66:	2206      	movs	r2, #6
   11a68:	701a      	strb	r2, [r3, #0]
          if (approaching(5)) NextStageFrom(5) else {
   11a6a:	2005      	movs	r0, #5
   11a6c:	f001 facc 	bl	13008 <approaching>
   11a70:	4603      	mov	r3, r0
   11a72:	2b00      	cmp	r3, #0
   11a74:	d034      	beq.n	11ae0 <auto_nav+0xc98>
   11a76:	f24a 63c4 	movw	r3, #42692	; 0xa6c4
   11a7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a7e:	2205      	movs	r2, #5
   11a80:	701a      	strb	r2, [r3, #0]
   11a82:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   11a86:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a8a:	781b      	ldrb	r3, [r3, #0]
   11a8c:	3301      	adds	r3, #1
   11a8e:	b2da      	uxtb	r2, r3
   11a90:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   11a94:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a98:	701a      	strb	r2, [r3, #0]
   11a9a:	f64a 1314 	movw	r3, #43284	; 0xa914
   11a9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11aa2:	681a      	ldr	r2, [r3, #0]
   11aa4:	f24a 63bc 	movw	r3, #42684	; 0xa6bc
   11aa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11aac:	601a      	str	r2, [r3, #0]
   11aae:	f64a 1318 	movw	r3, #43288	; 0xa918
   11ab2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ab6:	681a      	ldr	r2, [r3, #0]
   11ab8:	f24a 63c0 	movw	r3, #42688	; 0xa6c0
   11abc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ac0:	601a      	str	r2, [r3, #0]
   11ac2:	f24a 63cc 	movw	r3, #42700	; 0xa6cc
   11ac6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11aca:	2200      	movs	r2, #0
   11acc:	801a      	strh	r2, [r3, #0]
   11ace:	f24a 63d0 	movw	r3, #42704	; 0xa6d0
   11ad2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ad6:	f04f 0200 	mov.w	r2, #0
   11ada:	601a      	str	r2, [r3, #0]
   11adc:	f001 ba86 	b.w	12fec <auto_nav+0x21a4>
            route_to(last_wp, 5);
   11ae0:	f24a 63c4 	movw	r3, #42692	; 0xa6c4
   11ae4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ae8:	781b      	ldrb	r3, [r3, #0]
   11aea:	4618      	mov	r0, r3
   11aec:	2105      	movs	r1, #5
   11aee:	f001 fbe1 	bl	132b4 <route_to>
            auto_pitch = FALSE;
   11af2:	f24a 3347 	movw	r3, #41799	; 0xa347
   11af6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11afa:	2200      	movs	r2, #0
   11afc:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   11afe:	f24a 63e4 	movw	r3, #42724	; 0xa6e4
   11b02:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b06:	f04f 0200 	mov.w	r2, #0
   11b0a:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   11b0c:	f24a 3345 	movw	r3, #41797	; 0xa345
   11b10:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b14:	2203      	movs	r2, #3
   11b16:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[5].a;
   11b18:	f240 130c 	movw	r3, #268	; 0x10c
   11b1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   11b22:	f240 1308 	movw	r3, #264	; 0x108
   11b26:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b2a:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   11b2c:	f24a 63ac 	movw	r3, #42668	; 0xa6ac
   11b30:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b34:	f04f 0200 	mov.w	r2, #0
   11b38:	601a      	str	r2, [r3, #0]
          }
          return;
   11b3a:	f001 ba57 	b.w	12fec <auto_nav+0x21a4>
       }
       else if (nav_stage == 7)
   11b3e:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   11b42:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b46:	781b      	ldrb	r3, [r3, #0]
   11b48:	2b07      	cmp	r3, #7
   11b4a:	d106      	bne.n	11b5a <auto_nav+0xd12>
       {
	   nav_stage =7;
   11b4c:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   11b50:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b54:	2207      	movs	r2, #7
   11b56:	701a      	strb	r2, [r3, #0]
	   Goto(while_5)
   11b58:	e50a      	b.n	11570 <auto_nav+0x728>
	}
       
       else if (nav_stage == 8){
   11b5a:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   11b5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b62:	781b      	ldrb	r3, [r3, #0]
   11b64:	2b08      	cmp	r3, #8
   11b66:	f041 8241 	bne.w	12fec <auto_nav+0x21a4>
	  Label(endwhile_6)
	  nav_stage =8;
   11b6a:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   11b6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b72:	2208      	movs	r2, #8
   11b74:	701a      	strb	r2, [r3, #0]
          NextBlock();
   11b76:	f24a 63b9 	movw	r3, #42681	; 0xa6b9
   11b7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b7e:	781b      	ldrb	r3, [r3, #0]
   11b80:	3301      	adds	r3, #1
   11b82:	b2da      	uxtb	r2, r3
   11b84:	f24a 63b9 	movw	r3, #42681	; 0xa6b9
   11b88:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b8c:	701a      	strb	r2, [r3, #0]
   11b8e:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   11b92:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b96:	2200      	movs	r2, #0
   11b98:	701a      	strb	r2, [r3, #0]
   11b9a:	f24a 63ce 	movw	r3, #42702	; 0xa6ce
   11b9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ba2:	2200      	movs	r2, #0
   11ba4:	801a      	strh	r2, [r3, #0]
   11ba6:	f64a 1314 	movw	r3, #43284	; 0xa914
   11baa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11bae:	681a      	ldr	r2, [r3, #0]
   11bb0:	f24a 63bc 	movw	r3, #42684	; 0xa6bc
   11bb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11bb8:	601a      	str	r2, [r3, #0]
   11bba:	f64a 1318 	movw	r3, #43288	; 0xa918
   11bbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11bc2:	681a      	ldr	r2, [r3, #0]
   11bc4:	f24a 63c0 	movw	r3, #42688	; 0xa6c0
   11bc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11bcc:	601a      	str	r2, [r3, #0]
   11bce:	f24a 63cc 	movw	r3, #42700	; 0xa6cc
   11bd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11bd6:	2200      	movs	r2, #0
   11bd8:	801a      	strh	r2, [r3, #0]
   11bda:	f24a 63d0 	movw	r3, #42704	; 0xa6d0
   11bde:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11be2:	f04f 0200 	mov.w	r2, #0
   11be6:	601a      	str	r2, [r3, #0]
   11be8:	f001 ba00 	b.w	12fec <auto_nav+0x21a4>
       }
       else { }
}
else if (nav_block == 3) // xyz
   11bec:	f24a 63b9 	movw	r3, #42681	; 0xa6b9
   11bf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11bf4:	781b      	ldrb	r3, [r3, #0]
   11bf6:	2b03      	cmp	r3, #3
   11bf8:	f040 8388 	bne.w	1230c <auto_nav+0x14c4>
{
    nav_block = 3;
   11bfc:	f24a 63b9 	movw	r3, #42681	; 0xa6b9
   11c00:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c04:	2203      	movs	r2, #3
   11c06:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(4) }
   11c08:	f24a 3348 	movw	r3, #41800	; 0xa348
   11c0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c10:	781b      	ldrb	r3, [r3, #0]
   11c12:	2b00      	cmp	r3, #0
   11c14:	d007      	beq.n	11c26 <auto_nav+0xdde>
   11c16:	f24a 3348 	movw	r3, #41800	; 0xa348
   11c1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c1e:	2200      	movs	r2, #0
   11c20:	701a      	strb	r2, [r3, #0]
   11c22:	2301      	movs	r3, #1
   11c24:	e000      	b.n	11c28 <auto_nav+0xde0>
   11c26:	2300      	movs	r3, #0
   11c28:	2b00      	cmp	r3, #0
   11c2a:	d034      	beq.n	11c96 <auto_nav+0xe4e>
   11c2c:	f24a 63b9 	movw	r3, #42681	; 0xa6b9
   11c30:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c34:	2204      	movs	r2, #4
   11c36:	701a      	strb	r2, [r3, #0]
   11c38:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   11c3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c40:	2200      	movs	r2, #0
   11c42:	701a      	strb	r2, [r3, #0]
   11c44:	f24a 63ce 	movw	r3, #42702	; 0xa6ce
   11c48:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c4c:	2200      	movs	r2, #0
   11c4e:	801a      	strh	r2, [r3, #0]
   11c50:	f64a 1314 	movw	r3, #43284	; 0xa914
   11c54:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c58:	681a      	ldr	r2, [r3, #0]
   11c5a:	f24a 63bc 	movw	r3, #42684	; 0xa6bc
   11c5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c62:	601a      	str	r2, [r3, #0]
   11c64:	f64a 1318 	movw	r3, #43288	; 0xa918
   11c68:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c6c:	681a      	ldr	r2, [r3, #0]
   11c6e:	f24a 63c0 	movw	r3, #42688	; 0xa6c0
   11c72:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c76:	601a      	str	r2, [r3, #0]
   11c78:	f24a 63cc 	movw	r3, #42700	; 0xa6cc
   11c7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c80:	2200      	movs	r2, #0
   11c82:	801a      	strh	r2, [r3, #0]
   11c84:	f24a 63d0 	movw	r3, #42704	; 0xa6d0
   11c88:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c8c:	f04f 0200 	mov.w	r2, #0
   11c90:	601a      	str	r2, [r3, #0]
   11c92:	f001 b9ab 	b.w	12fec <auto_nav+0x21a4>
    if(nav_stage == 0)
   11c96:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   11c9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c9e:	781b      	ldrb	r3, [r3, #0]
   11ca0:	2b00      	cmp	r3, #0
   11ca2:	f040 82ea 	bne.w	1227a <auto_nav+0x1432>
    {
        nav_stage = 0;
   11ca6:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   11caa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11cae:	2200      	movs	r2, #0
   11cb0:	701a      	strb	r2, [r3, #0]
        Goto3D(50)
   11cb2:	f24a 3344 	movw	r3, #41796	; 0xa344
   11cb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11cba:	781b      	ldrb	r3, [r3, #0]
   11cbc:	2b02      	cmp	r3, #2
   11cbe:	f040 81a5 	bne.w	1200c <auto_nav+0x11c4>
   11cc2:	f24a 4368 	movw	r3, #42088	; 0xa468
   11cc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11cca:	88db      	ldrh	r3, [r3, #6]
   11ccc:	84fb      	strh	r3, [r7, #38]	; 0x26
   11cce:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   11cd2:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   11cd6:	dc04      	bgt.n	11ce2 <auto_nav+0xe9a>
   11cd8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   11cdc:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   11ce0:	da7e      	bge.n	11de0 <auto_nav+0xf98>
   11ce2:	f24a 7304 	movw	r3, #42756	; 0xa704
   11ce6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11cea:	681b      	ldr	r3, [r3, #0]
   11cec:	4618      	mov	r0, r3
   11cee:	f004 fb7f 	bl	163f0 <__aeabi_f2d>
   11cf2:	4604      	mov	r4, r0
   11cf4:	460d      	mov	r5, r1
   11cf6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   11cfa:	4618      	mov	r0, r3
   11cfc:	f004 ffb8 	bl	16c70 <__aeabi_i2f>
   11d00:	4603      	mov	r3, r0
   11d02:	4618      	mov	r0, r3
   11d04:	f04f 0100 	mov.w	r1, #0
   11d08:	f2c4 6116 	movt	r1, #17942	; 0x4616
   11d0c:	f005 f8b8 	bl	16e80 <__aeabi_fdiv>
   11d10:	4603      	mov	r3, r0
   11d12:	4618      	mov	r0, r3
   11d14:	f004 fb6c 	bl	163f0 <__aeabi_f2d>
   11d18:	4602      	mov	r2, r0
   11d1a:	460b      	mov	r3, r1
   11d1c:	4610      	mov	r0, r2
   11d1e:	4619      	mov	r1, r3
   11d20:	f04f 0200 	mov.w	r2, #0
   11d24:	f04f 0300 	mov.w	r3, #0
   11d28:	f2cc 0334 	movt	r3, #49204	; 0xc034
   11d2c:	f004 fbb4 	bl	16498 <__aeabi_dmul>
   11d30:	4602      	mov	r2, r0
   11d32:	460b      	mov	r3, r1
   11d34:	4610      	mov	r0, r2
   11d36:	4619      	mov	r1, r3
   11d38:	f04f 0200 	mov.w	r2, #0
   11d3c:	f04f 0300 	mov.w	r3, #0
   11d40:	f004 f9f8 	bl	16134 <__adddf3>
   11d44:	4602      	mov	r2, r0
   11d46:	460b      	mov	r3, r1
   11d48:	4620      	mov	r0, r4
   11d4a:	4629      	mov	r1, r5
   11d4c:	f004 f9f2 	bl	16134 <__adddf3>
   11d50:	4602      	mov	r2, r0
   11d52:	460b      	mov	r3, r1
   11d54:	4610      	mov	r0, r2
   11d56:	4619      	mov	r1, r3
   11d58:	f004 fe80 	bl	16a5c <__aeabi_d2f>
   11d5c:	4602      	mov	r2, r0
   11d5e:	f24a 7304 	movw	r3, #42756	; 0xa704
   11d62:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d66:	601a      	str	r2, [r3, #0]
   11d68:	f24a 7304 	movw	r3, #42756	; 0xa704
   11d6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d70:	681b      	ldr	r3, [r3, #0]
   11d72:	4618      	mov	r0, r3
   11d74:	f04f 0100 	mov.w	r1, #0
   11d78:	f2c4 317a 	movt	r1, #17274	; 0x437a
   11d7c:	f005 f974 	bl	17068 <__aeabi_fcmple>
   11d80:	4603      	mov	r3, r0
   11d82:	2b00      	cmp	r3, #0
   11d84:	d005      	beq.n	11d92 <auto_nav+0xf4a>
   11d86:	f24a 7304 	movw	r3, #42756	; 0xa704
   11d8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d8e:	681a      	ldr	r2, [r3, #0]
   11d90:	e003      	b.n	11d9a <auto_nav+0xf52>
   11d92:	f04f 0200 	mov.w	r2, #0
   11d96:	f2c4 327a 	movt	r2, #17274	; 0x437a
   11d9a:	f24a 7304 	movw	r3, #42756	; 0xa704
   11d9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11da2:	601a      	str	r2, [r3, #0]
   11da4:	f24a 7304 	movw	r3, #42756	; 0xa704
   11da8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11dac:	681b      	ldr	r3, [r3, #0]
   11dae:	4618      	mov	r0, r3
   11db0:	f04f 0100 	mov.w	r1, #0
   11db4:	f2cc 317a 	movt	r1, #50042	; 0xc37a
   11db8:	f005 f960 	bl	1707c <__aeabi_fcmpge>
   11dbc:	4603      	mov	r3, r0
   11dbe:	2b00      	cmp	r3, #0
   11dc0:	d005      	beq.n	11dce <auto_nav+0xf86>
   11dc2:	f24a 7304 	movw	r3, #42756	; 0xa704
   11dc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11dca:	681a      	ldr	r2, [r3, #0]
   11dcc:	e003      	b.n	11dd6 <auto_nav+0xf8e>
   11dce:	f04f 0200 	mov.w	r2, #0
   11dd2:	f2cc 327a 	movt	r2, #50042	; 0xc37a
   11dd6:	f24a 7304 	movw	r3, #42756	; 0xa704
   11dda:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11dde:	601a      	str	r2, [r3, #0]
   11de0:	f24a 4368 	movw	r3, #42088	; 0xa468
   11de4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11de8:	889b      	ldrh	r3, [r3, #4]
   11dea:	84bb      	strh	r3, [r7, #36]	; 0x24
   11dec:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   11df0:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   11df4:	dc04      	bgt.n	11e00 <auto_nav+0xfb8>
   11df6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   11dfa:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   11dfe:	da7e      	bge.n	11efe <auto_nav+0x10b6>
   11e00:	f24a 7308 	movw	r3, #42760	; 0xa708
   11e04:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e08:	681b      	ldr	r3, [r3, #0]
   11e0a:	4618      	mov	r0, r3
   11e0c:	f004 faf0 	bl	163f0 <__aeabi_f2d>
   11e10:	4604      	mov	r4, r0
   11e12:	460d      	mov	r5, r1
   11e14:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   11e18:	4618      	mov	r0, r3
   11e1a:	f004 ff29 	bl	16c70 <__aeabi_i2f>
   11e1e:	4603      	mov	r3, r0
   11e20:	4618      	mov	r0, r3
   11e22:	f04f 0100 	mov.w	r1, #0
   11e26:	f2c4 6116 	movt	r1, #17942	; 0x4616
   11e2a:	f005 f829 	bl	16e80 <__aeabi_fdiv>
   11e2e:	4603      	mov	r3, r0
   11e30:	4618      	mov	r0, r3
   11e32:	f004 fadd 	bl	163f0 <__aeabi_f2d>
   11e36:	4602      	mov	r2, r0
   11e38:	460b      	mov	r3, r1
   11e3a:	4610      	mov	r0, r2
   11e3c:	4619      	mov	r1, r3
   11e3e:	f04f 0200 	mov.w	r2, #0
   11e42:	f04f 0300 	mov.w	r3, #0
   11e46:	f2cc 0334 	movt	r3, #49204	; 0xc034
   11e4a:	f004 fb25 	bl	16498 <__aeabi_dmul>
   11e4e:	4602      	mov	r2, r0
   11e50:	460b      	mov	r3, r1
   11e52:	4610      	mov	r0, r2
   11e54:	4619      	mov	r1, r3
   11e56:	f04f 0200 	mov.w	r2, #0
   11e5a:	f04f 0300 	mov.w	r3, #0
   11e5e:	f004 f969 	bl	16134 <__adddf3>
   11e62:	4602      	mov	r2, r0
   11e64:	460b      	mov	r3, r1
   11e66:	4620      	mov	r0, r4
   11e68:	4629      	mov	r1, r5
   11e6a:	f004 f963 	bl	16134 <__adddf3>
   11e6e:	4602      	mov	r2, r0
   11e70:	460b      	mov	r3, r1
   11e72:	4610      	mov	r0, r2
   11e74:	4619      	mov	r1, r3
   11e76:	f004 fdf1 	bl	16a5c <__aeabi_d2f>
   11e7a:	4602      	mov	r2, r0
   11e7c:	f24a 7308 	movw	r3, #42760	; 0xa708
   11e80:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e84:	601a      	str	r2, [r3, #0]
   11e86:	f24a 7308 	movw	r3, #42760	; 0xa708
   11e8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e8e:	681b      	ldr	r3, [r3, #0]
   11e90:	4618      	mov	r0, r3
   11e92:	f04f 0100 	mov.w	r1, #0
   11e96:	f2c4 317a 	movt	r1, #17274	; 0x437a
   11e9a:	f005 f8e5 	bl	17068 <__aeabi_fcmple>
   11e9e:	4603      	mov	r3, r0
   11ea0:	2b00      	cmp	r3, #0
   11ea2:	d005      	beq.n	11eb0 <auto_nav+0x1068>
   11ea4:	f24a 7308 	movw	r3, #42760	; 0xa708
   11ea8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11eac:	681a      	ldr	r2, [r3, #0]
   11eae:	e003      	b.n	11eb8 <auto_nav+0x1070>
   11eb0:	f04f 0200 	mov.w	r2, #0
   11eb4:	f2c4 327a 	movt	r2, #17274	; 0x437a
   11eb8:	f24a 7308 	movw	r3, #42760	; 0xa708
   11ebc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ec0:	601a      	str	r2, [r3, #0]
   11ec2:	f24a 7308 	movw	r3, #42760	; 0xa708
   11ec6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11eca:	681b      	ldr	r3, [r3, #0]
   11ecc:	4618      	mov	r0, r3
   11ece:	f04f 0100 	mov.w	r1, #0
   11ed2:	f2cc 317a 	movt	r1, #50042	; 0xc37a
   11ed6:	f005 f8d1 	bl	1707c <__aeabi_fcmpge>
   11eda:	4603      	mov	r3, r0
   11edc:	2b00      	cmp	r3, #0
   11ede:	d005      	beq.n	11eec <auto_nav+0x10a4>
   11ee0:	f24a 7308 	movw	r3, #42760	; 0xa708
   11ee4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ee8:	681a      	ldr	r2, [r3, #0]
   11eea:	e003      	b.n	11ef4 <auto_nav+0x10ac>
   11eec:	f04f 0200 	mov.w	r2, #0
   11ef0:	f2cc 327a 	movt	r2, #50042	; 0xc37a
   11ef4:	f24a 7308 	movw	r3, #42760	; 0xa708
   11ef8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11efc:	601a      	str	r2, [r3, #0]
   11efe:	f24a 3345 	movw	r3, #41797	; 0xa345
   11f02:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f06:	2203      	movs	r2, #3
   11f08:	701a      	strb	r2, [r3, #0]
   11f0a:	f24a 4368 	movw	r3, #42088	; 0xa468
   11f0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f12:	885b      	ldrh	r3, [r3, #2]
   11f14:	847b      	strh	r3, [r7, #34]	; 0x22
   11f16:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   11f1a:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   11f1e:	dc04      	bgt.n	11f2a <auto_nav+0x10e2>
   11f20:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   11f24:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   11f28:	da70      	bge.n	1200c <auto_nav+0x11c4>
   11f2a:	f240 1308 	movw	r3, #264	; 0x108
   11f2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f32:	681b      	ldr	r3, [r3, #0]
   11f34:	4618      	mov	r0, r3
   11f36:	f004 fa5b 	bl	163f0 <__aeabi_f2d>
   11f3a:	4604      	mov	r4, r0
   11f3c:	460d      	mov	r5, r1
   11f3e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   11f42:	4618      	mov	r0, r3
   11f44:	f004 fe94 	bl	16c70 <__aeabi_i2f>
   11f48:	4603      	mov	r3, r0
   11f4a:	4618      	mov	r0, r3
   11f4c:	f04f 0100 	mov.w	r1, #0
   11f50:	f2c4 6116 	movt	r1, #17942	; 0x4616
   11f54:	f004 ff94 	bl	16e80 <__aeabi_fdiv>
   11f58:	4603      	mov	r3, r0
   11f5a:	4618      	mov	r0, r3
   11f5c:	f004 fa48 	bl	163f0 <__aeabi_f2d>
   11f60:	4602      	mov	r2, r0
   11f62:	460b      	mov	r3, r1
   11f64:	f04f 0000 	mov.w	r0, #0
   11f68:	f04f 0100 	mov.w	r1, #0
   11f6c:	f004 f8e0 	bl	16130 <__aeabi_dsub>
   11f70:	4602      	mov	r2, r0
   11f72:	460b      	mov	r3, r1
   11f74:	4620      	mov	r0, r4
   11f76:	4629      	mov	r1, r5
   11f78:	f004 f8dc 	bl	16134 <__adddf3>
   11f7c:	4602      	mov	r2, r0
   11f7e:	460b      	mov	r3, r1
   11f80:	4610      	mov	r0, r2
   11f82:	4619      	mov	r1, r3
   11f84:	f004 fd6a 	bl	16a5c <__aeabi_d2f>
   11f88:	4602      	mov	r2, r0
   11f8a:	f240 1308 	movw	r3, #264	; 0x108
   11f8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f92:	601a      	str	r2, [r3, #0]
   11f94:	f240 1308 	movw	r3, #264	; 0x108
   11f98:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f9c:	681b      	ldr	r3, [r3, #0]
   11f9e:	4618      	mov	r0, r3
   11fa0:	f04f 0100 	mov.w	r1, #0
   11fa4:	f2c4 312f 	movt	r1, #17199	; 0x432f
   11fa8:	f005 f868 	bl	1707c <__aeabi_fcmpge>
   11fac:	4603      	mov	r3, r0
   11fae:	2b00      	cmp	r3, #0
   11fb0:	d005      	beq.n	11fbe <auto_nav+0x1176>
   11fb2:	f240 1308 	movw	r3, #264	; 0x108
   11fb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11fba:	681a      	ldr	r2, [r3, #0]
   11fbc:	e003      	b.n	11fc6 <auto_nav+0x117e>
   11fbe:	f04f 0200 	mov.w	r2, #0
   11fc2:	f2c4 322f 	movt	r2, #17199	; 0x432f
   11fc6:	f240 1308 	movw	r3, #264	; 0x108
   11fca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11fce:	601a      	str	r2, [r3, #0]
   11fd0:	f240 1308 	movw	r3, #264	; 0x108
   11fd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11fd8:	681b      	ldr	r3, [r3, #0]
   11fda:	4618      	mov	r0, r3
   11fdc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   11fe0:	f2c4 3189 	movt	r1, #17289	; 0x4389
   11fe4:	f005 f840 	bl	17068 <__aeabi_fcmple>
   11fe8:	4603      	mov	r3, r0
   11fea:	2b00      	cmp	r3, #0
   11fec:	d005      	beq.n	11ffa <auto_nav+0x11b2>
   11fee:	f240 1308 	movw	r3, #264	; 0x108
   11ff2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ff6:	681a      	ldr	r2, [r3, #0]
   11ff8:	e003      	b.n	12002 <auto_nav+0x11ba>
   11ffa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   11ffe:	f2c4 3289 	movt	r2, #17289	; 0x4389
   12002:	f240 1308 	movw	r3, #264	; 0x108
   12006:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1200a:	601a      	str	r2, [r3, #0]
   1200c:	f64a 1318 	movw	r3, #43288	; 0xa918
   12010:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12014:	681a      	ldr	r2, [r3, #0]
   12016:	f24a 7308 	movw	r3, #42760	; 0xa708
   1201a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1201e:	681b      	ldr	r3, [r3, #0]
   12020:	4610      	mov	r0, r2
   12022:	4619      	mov	r1, r3
   12024:	f004 fd6e 	bl	16b04 <__aeabi_fsub>
   12028:	4603      	mov	r3, r0
   1202a:	4618      	mov	r0, r3
   1202c:	f004 f9e0 	bl	163f0 <__aeabi_f2d>
   12030:	4604      	mov	r4, r0
   12032:	460d      	mov	r5, r1
   12034:	f64a 1314 	movw	r3, #43284	; 0xa914
   12038:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1203c:	681a      	ldr	r2, [r3, #0]
   1203e:	f24a 7304 	movw	r3, #42756	; 0xa704
   12042:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12046:	681b      	ldr	r3, [r3, #0]
   12048:	4610      	mov	r0, r2
   1204a:	4619      	mov	r1, r3
   1204c:	f004 fd5a 	bl	16b04 <__aeabi_fsub>
   12050:	4603      	mov	r3, r0
   12052:	4618      	mov	r0, r3
   12054:	f004 f9cc 	bl	163f0 <__aeabi_f2d>
   12058:	4602      	mov	r2, r0
   1205a:	460b      	mov	r3, r1
   1205c:	4620      	mov	r0, r4
   1205e:	4629      	mov	r1, r5
   12060:	f002 fa12 	bl	14488 <pp_atan2>
   12064:	4602      	mov	r2, r0
   12066:	460b      	mov	r3, r1
   12068:	4610      	mov	r0, r2
   1206a:	4619      	mov	r1, r3
   1206c:	f004 fcf6 	bl	16a5c <__aeabi_d2f>
   12070:	4603      	mov	r3, r0
   12072:	61fb      	str	r3, [r7, #28]
   12074:	69f8      	ldr	r0, [r7, #28]
   12076:	f004 f9bb 	bl	163f0 <__aeabi_f2d>
   1207a:	4604      	mov	r4, r0
   1207c:	460d      	mov	r5, r1
   1207e:	f64a 134c 	movw	r3, #43340	; 0xa94c
   12082:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12086:	681b      	ldr	r3, [r3, #0]
   12088:	4618      	mov	r0, r3
   1208a:	f04f 0100 	mov.w	r1, #0
   1208e:	f2cc 2148 	movt	r1, #49736	; 0xc248
   12092:	f004 fe41 	bl	16d18 <__aeabi_fmul>
   12096:	4603      	mov	r3, r0
   12098:	4618      	mov	r0, r3
   1209a:	f004 f9a9 	bl	163f0 <__aeabi_f2d>
   1209e:	4602      	mov	r2, r0
   120a0:	460b      	mov	r3, r1
   120a2:	f04f 0000 	mov.w	r0, #0
   120a6:	f04f 0100 	mov.w	r1, #0
   120aa:	f2c4 0114 	movt	r1, #16404	; 0x4014
   120ae:	f004 fb1d 	bl	166ec <__aeabi_ddiv>
   120b2:	4602      	mov	r2, r0
   120b4:	460b      	mov	r3, r1
   120b6:	4620      	mov	r0, r4
   120b8:	4629      	mov	r1, r5
   120ba:	f004 f83b 	bl	16134 <__adddf3>
   120be:	4602      	mov	r2, r0
   120c0:	460b      	mov	r3, r1
   120c2:	4610      	mov	r0, r2
   120c4:	4619      	mov	r1, r3
   120c6:	f004 fcc9 	bl	16a5c <__aeabi_d2f>
   120ca:	4603      	mov	r3, r0
   120cc:	61bb      	str	r3, [r7, #24]
   120ce:	f24a 7304 	movw	r3, #42756	; 0xa704
   120d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120d6:	681b      	ldr	r3, [r3, #0]
   120d8:	4618      	mov	r0, r3
   120da:	f004 f989 	bl	163f0 <__aeabi_f2d>
   120de:	4604      	mov	r4, r0
   120e0:	460d      	mov	r5, r1
   120e2:	69b8      	ldr	r0, [r7, #24]
   120e4:	f004 f984 	bl	163f0 <__aeabi_f2d>
   120e8:	4602      	mov	r2, r0
   120ea:	460b      	mov	r3, r1
   120ec:	4610      	mov	r0, r2
   120ee:	4619      	mov	r1, r3
   120f0:	a3b1      	add	r3, pc, #708	; (adr r3, 123b8 <auto_nav+0x1570>)
   120f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   120f6:	f004 f81d 	bl	16134 <__adddf3>
   120fa:	4602      	mov	r2, r0
   120fc:	460b      	mov	r3, r1
   120fe:	4610      	mov	r0, r2
   12100:	4619      	mov	r1, r3
   12102:	f002 fa81 	bl	14608 <pp_sin>
   12106:	4602      	mov	r2, r0
   12108:	460b      	mov	r3, r1
   1210a:	4610      	mov	r0, r2
   1210c:	4619      	mov	r1, r3
   1210e:	f04f 0200 	mov.w	r2, #0
   12112:	f04f 0300 	mov.w	r3, #0
   12116:	f2c4 0349 	movt	r3, #16457	; 0x4049
   1211a:	f004 f9bd 	bl	16498 <__aeabi_dmul>
   1211e:	4602      	mov	r2, r0
   12120:	460b      	mov	r3, r1
   12122:	4620      	mov	r0, r4
   12124:	4629      	mov	r1, r5
   12126:	f004 f805 	bl	16134 <__adddf3>
   1212a:	4602      	mov	r2, r0
   1212c:	460b      	mov	r3, r1
   1212e:	4610      	mov	r0, r2
   12130:	4619      	mov	r1, r3
   12132:	f004 fc93 	bl	16a5c <__aeabi_d2f>
   12136:	4606      	mov	r6, r0
   12138:	f24a 7308 	movw	r3, #42760	; 0xa708
   1213c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12140:	681b      	ldr	r3, [r3, #0]
   12142:	4618      	mov	r0, r3
   12144:	f004 f954 	bl	163f0 <__aeabi_f2d>
   12148:	4604      	mov	r4, r0
   1214a:	460d      	mov	r5, r1
   1214c:	69b8      	ldr	r0, [r7, #24]
   1214e:	f004 f94f 	bl	163f0 <__aeabi_f2d>
   12152:	4602      	mov	r2, r0
   12154:	460b      	mov	r3, r1
   12156:	4610      	mov	r0, r2
   12158:	4619      	mov	r1, r3
   1215a:	f002 fa55 	bl	14608 <pp_sin>
   1215e:	4602      	mov	r2, r0
   12160:	460b      	mov	r3, r1
   12162:	4610      	mov	r0, r2
   12164:	4619      	mov	r1, r3
   12166:	f04f 0200 	mov.w	r2, #0
   1216a:	f04f 0300 	mov.w	r3, #0
   1216e:	f2c4 0349 	movt	r3, #16457	; 0x4049
   12172:	f004 f991 	bl	16498 <__aeabi_dmul>
   12176:	4602      	mov	r2, r0
   12178:	460b      	mov	r3, r1
   1217a:	4620      	mov	r0, r4
   1217c:	4629      	mov	r1, r5
   1217e:	f003 ffd9 	bl	16134 <__adddf3>
   12182:	4602      	mov	r2, r0
   12184:	460b      	mov	r3, r1
   12186:	4610      	mov	r0, r2
   12188:	4619      	mov	r1, r3
   1218a:	f004 fc67 	bl	16a5c <__aeabi_d2f>
   1218e:	4603      	mov	r3, r0
   12190:	4630      	mov	r0, r6
   12192:	4619      	mov	r1, r3
   12194:	f001 f81c 	bl	131d0 <fly_to_xy>
   12198:	69b8      	ldr	r0, [r7, #24]
   1219a:	f004 f929 	bl	163f0 <__aeabi_f2d>
   1219e:	4602      	mov	r2, r0
   121a0:	460b      	mov	r3, r1
   121a2:	a185      	add	r1, pc, #532	; (adr r1, 123b8 <auto_nav+0x1570>)
   121a4:	e9d1 0100 	ldrd	r0, r1, [r1]
   121a8:	f003 ffc2 	bl	16130 <__aeabi_dsub>
   121ac:	4602      	mov	r2, r0
   121ae:	460b      	mov	r3, r1
   121b0:	4610      	mov	r0, r2
   121b2:	4619      	mov	r1, r3
   121b4:	a382      	add	r3, pc, #520	; (adr r3, 123c0 <auto_nav+0x1578>)
   121b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   121ba:	f004 fa97 	bl	166ec <__aeabi_ddiv>
   121be:	4602      	mov	r2, r0
   121c0:	460b      	mov	r3, r1
   121c2:	4610      	mov	r0, r2
   121c4:	4619      	mov	r1, r3
   121c6:	f04f 0200 	mov.w	r2, #0
   121ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   121ce:	f2c4 0366 	movt	r3, #16486	; 0x4066
   121d2:	f004 f961 	bl	16498 <__aeabi_dmul>
   121d6:	4602      	mov	r2, r0
   121d8:	460b      	mov	r3, r1
   121da:	4610      	mov	r0, r2
   121dc:	4619      	mov	r1, r3
   121de:	f004 fc3d 	bl	16a5c <__aeabi_d2f>
   121e2:	4602      	mov	r2, r0
   121e4:	f24a 63d4 	movw	r3, #42708	; 0xa6d4
   121e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121ec:	601a      	str	r2, [r3, #0]
   121ee:	e012      	b.n	12216 <auto_nav+0x13ce>
   121f0:	f24a 63d4 	movw	r3, #42708	; 0xa6d4
   121f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121f8:	681b      	ldr	r3, [r3, #0]
   121fa:	4618      	mov	r0, r3
   121fc:	f04f 0100 	mov.w	r1, #0
   12200:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   12204:	f004 fc80 	bl	16b08 <__addsf3>
   12208:	4603      	mov	r3, r0
   1220a:	461a      	mov	r2, r3
   1220c:	f24a 63d4 	movw	r3, #42708	; 0xa6d4
   12210:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12214:	601a      	str	r2, [r3, #0]
   12216:	f24a 63d4 	movw	r3, #42708	; 0xa6d4
   1221a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1221e:	681b      	ldr	r3, [r3, #0]
   12220:	4618      	mov	r0, r3
   12222:	f04f 0100 	mov.w	r1, #0
   12226:	f004 ff15 	bl	17054 <__aeabi_fcmplt>
   1222a:	4603      	mov	r3, r0
   1222c:	2b00      	cmp	r3, #0
   1222e:	d1df      	bne.n	121f0 <auto_nav+0x13a8>
   12230:	e012      	b.n	12258 <auto_nav+0x1410>
   12232:	f24a 63d4 	movw	r3, #42708	; 0xa6d4
   12236:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1223a:	681b      	ldr	r3, [r3, #0]
   1223c:	4618      	mov	r0, r3
   1223e:	f04f 0100 	mov.w	r1, #0
   12242:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   12246:	f004 fc5d 	bl	16b04 <__aeabi_fsub>
   1224a:	4603      	mov	r3, r0
   1224c:	461a      	mov	r2, r3
   1224e:	f24a 63d4 	movw	r3, #42708	; 0xa6d4
   12252:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12256:	601a      	str	r2, [r3, #0]
   12258:	f24a 63d4 	movw	r3, #42708	; 0xa6d4
   1225c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12260:	681b      	ldr	r3, [r3, #0]
   12262:	4618      	mov	r0, r3
   12264:	f04f 0100 	mov.w	r1, #0
   12268:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   1226c:	f004 ff06 	bl	1707c <__aeabi_fcmpge>
   12270:	4603      	mov	r3, r0
   12272:	2b00      	cmp	r3, #0
   12274:	d1dd      	bne.n	12232 <auto_nav+0x13ea>
        return;
   12276:	f000 beb9 	b.w	12fec <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   1227a:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   1227e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12282:	781b      	ldrb	r3, [r3, #0]
   12284:	2b01      	cmp	r3, #1
   12286:	f040 86b1 	bne.w	12fec <auto_nav+0x21a4>
    {
        nav_stage = 1;
   1228a:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   1228e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12292:	2201      	movs	r2, #1
   12294:	701a      	strb	r2, [r3, #0]
        NextBlock()
   12296:	f24a 63b9 	movw	r3, #42681	; 0xa6b9
   1229a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1229e:	781b      	ldrb	r3, [r3, #0]
   122a0:	3301      	adds	r3, #1
   122a2:	b2da      	uxtb	r2, r3
   122a4:	f24a 63b9 	movw	r3, #42681	; 0xa6b9
   122a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122ac:	701a      	strb	r2, [r3, #0]
   122ae:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   122b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122b6:	2200      	movs	r2, #0
   122b8:	701a      	strb	r2, [r3, #0]
   122ba:	f24a 63ce 	movw	r3, #42702	; 0xa6ce
   122be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122c2:	2200      	movs	r2, #0
   122c4:	801a      	strh	r2, [r3, #0]
   122c6:	f64a 1314 	movw	r3, #43284	; 0xa914
   122ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122ce:	681a      	ldr	r2, [r3, #0]
   122d0:	f24a 63bc 	movw	r3, #42684	; 0xa6bc
   122d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122d8:	601a      	str	r2, [r3, #0]
   122da:	f64a 1318 	movw	r3, #43288	; 0xa918
   122de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122e2:	681a      	ldr	r2, [r3, #0]
   122e4:	f24a 63c0 	movw	r3, #42688	; 0xa6c0
   122e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122ec:	601a      	str	r2, [r3, #0]
   122ee:	f24a 63cc 	movw	r3, #42700	; 0xa6cc
   122f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122f6:	2200      	movs	r2, #0
   122f8:	801a      	strh	r2, [r3, #0]
   122fa:	f24a 63d0 	movw	r3, #42704	; 0xa6d0
   122fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12302:	f04f 0200 	mov.w	r2, #0
   12306:	601a      	str	r2, [r3, #0]
   12308:	f000 be70 	b.w	12fec <auto_nav+0x21a4>
    }
    else { }
}
else if (nav_block == 4)
   1230c:	f24a 63b9 	movw	r3, #42681	; 0xa6b9
   12310:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12314:	781b      	ldrb	r3, [r3, #0]
   12316:	2b04      	cmp	r3, #4
   12318:	f040 8202 	bne.w	12720 <auto_nav+0x18d8>
{
    nav_block = 4;
   1231c:	f24a 63b9 	movw	r3, #42681	; 0xa6b9
   12320:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12324:	2204      	movs	r2, #4
   12326:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(5) }
   12328:	f24a 3348 	movw	r3, #41800	; 0xa348
   1232c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12330:	781b      	ldrb	r3, [r3, #0]
   12332:	2b00      	cmp	r3, #0
   12334:	d007      	beq.n	12346 <auto_nav+0x14fe>
   12336:	f24a 3348 	movw	r3, #41800	; 0xa348
   1233a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1233e:	2200      	movs	r2, #0
   12340:	701a      	strb	r2, [r3, #0]
   12342:	2301      	movs	r3, #1
   12344:	e000      	b.n	12348 <auto_nav+0x1500>
   12346:	2300      	movs	r3, #0
   12348:	2b00      	cmp	r3, #0
   1234a:	d03d      	beq.n	123c8 <auto_nav+0x1580>
   1234c:	f24a 63b9 	movw	r3, #42681	; 0xa6b9
   12350:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12354:	2205      	movs	r2, #5
   12356:	701a      	strb	r2, [r3, #0]
   12358:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   1235c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12360:	2200      	movs	r2, #0
   12362:	701a      	strb	r2, [r3, #0]
   12364:	f24a 63ce 	movw	r3, #42702	; 0xa6ce
   12368:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1236c:	2200      	movs	r2, #0
   1236e:	801a      	strh	r2, [r3, #0]
   12370:	f64a 1314 	movw	r3, #43284	; 0xa914
   12374:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12378:	681a      	ldr	r2, [r3, #0]
   1237a:	f24a 63bc 	movw	r3, #42684	; 0xa6bc
   1237e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12382:	601a      	str	r2, [r3, #0]
   12384:	f64a 1318 	movw	r3, #43288	; 0xa918
   12388:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1238c:	681a      	ldr	r2, [r3, #0]
   1238e:	f24a 63c0 	movw	r3, #42688	; 0xa6c0
   12392:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12396:	601a      	str	r2, [r3, #0]
   12398:	f24a 63cc 	movw	r3, #42700	; 0xa6cc
   1239c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123a0:	2200      	movs	r2, #0
   123a2:	801a      	strh	r2, [r3, #0]
   123a4:	f24a 63d0 	movw	r3, #42704	; 0xa6d0
   123a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123ac:	f04f 0200 	mov.w	r2, #0
   123b0:	601a      	str	r2, [r3, #0]
   123b2:	f000 be1b 	b.w	12fec <auto_nav+0x21a4>
   123b6:	bf00      	nop
   123b8:	54442d18 	.word	0x54442d18
   123bc:	3ff921fb 	.word	0x3ff921fb
   123c0:	54442d18 	.word	0x54442d18
   123c4:	400921fb 	.word	0x400921fb
    if(nav_stage == 0)
   123c8:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   123cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123d0:	781b      	ldrb	r3, [r3, #0]
   123d2:	2b00      	cmp	r3, #0
   123d4:	f040 815b 	bne.w	1268e <auto_nav+0x1846>
    {
        nav_stage = 0;
   123d8:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   123dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123e0:	2200      	movs	r2, #0
   123e2:	701a      	strb	r2, [r3, #0]
        auto_pitch = FALSE;
   123e4:	f24a 3347 	movw	r3, #41799	; 0xa347
   123e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123ec:	2200      	movs	r2, #0
   123ee:	701a      	strb	r2, [r3, #0]
        nav_pitch = 0.000000;
   123f0:	f24a 63e4 	movw	r3, #42724	; 0xa6e4
   123f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123f8:	f04f 0200 	mov.w	r2, #0
   123fc:	601a      	str	r2, [r3, #0]
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
   123fe:	f24a 3345 	movw	r3, #41797	; 0xa345
   12402:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12406:	2203      	movs	r2, #3
   12408:	701a      	strb	r2, [r3, #0]
        desired_altitude = waypoints[0].a;
   1240a:	f240 130c 	movw	r3, #268	; 0x10c
   1240e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12412:	689a      	ldr	r2, [r3, #8]
   12414:	f240 1308 	movw	r3, #264	; 0x108
   12418:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1241c:	601a      	str	r2, [r3, #0]
        pre_climb = 0.;
   1241e:	f24a 63ac 	movw	r3, #42668	; 0xa6ac
   12422:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12426:	f04f 0200 	mov.w	r2, #0
   1242a:	601a      	str	r2, [r3, #0]
        Circle(0, 150);
   1242c:	f64a 1318 	movw	r3, #43288	; 0xa918
   12430:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12434:	681a      	ldr	r2, [r3, #0]
   12436:	f240 130c 	movw	r3, #268	; 0x10c
   1243a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1243e:	685b      	ldr	r3, [r3, #4]
   12440:	4610      	mov	r0, r2
   12442:	4619      	mov	r1, r3
   12444:	f004 fb5e 	bl	16b04 <__aeabi_fsub>
   12448:	4603      	mov	r3, r0
   1244a:	4618      	mov	r0, r3
   1244c:	f003 ffd0 	bl	163f0 <__aeabi_f2d>
   12450:	4604      	mov	r4, r0
   12452:	460d      	mov	r5, r1
   12454:	f64a 1314 	movw	r3, #43284	; 0xa914
   12458:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1245c:	681a      	ldr	r2, [r3, #0]
   1245e:	f240 130c 	movw	r3, #268	; 0x10c
   12462:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12466:	681b      	ldr	r3, [r3, #0]
   12468:	4610      	mov	r0, r2
   1246a:	4619      	mov	r1, r3
   1246c:	f004 fb4a 	bl	16b04 <__aeabi_fsub>
   12470:	4603      	mov	r3, r0
   12472:	4618      	mov	r0, r3
   12474:	f003 ffbc 	bl	163f0 <__aeabi_f2d>
   12478:	4602      	mov	r2, r0
   1247a:	460b      	mov	r3, r1
   1247c:	4620      	mov	r0, r4
   1247e:	4629      	mov	r1, r5
   12480:	f002 f802 	bl	14488 <pp_atan2>
   12484:	4602      	mov	r2, r0
   12486:	460b      	mov	r3, r1
   12488:	4610      	mov	r0, r2
   1248a:	4619      	mov	r1, r3
   1248c:	f004 fae6 	bl	16a5c <__aeabi_d2f>
   12490:	4603      	mov	r3, r0
   12492:	617b      	str	r3, [r7, #20]
   12494:	6978      	ldr	r0, [r7, #20]
   12496:	f003 ffab 	bl	163f0 <__aeabi_f2d>
   1249a:	4604      	mov	r4, r0
   1249c:	460d      	mov	r5, r1
   1249e:	f64a 134c 	movw	r3, #43340	; 0xa94c
   124a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124a6:	681b      	ldr	r3, [r3, #0]
   124a8:	4618      	mov	r0, r3
   124aa:	f04f 0100 	mov.w	r1, #0
   124ae:	f2cc 3116 	movt	r1, #49942	; 0xc316
   124b2:	f004 fc31 	bl	16d18 <__aeabi_fmul>
   124b6:	4603      	mov	r3, r0
   124b8:	4618      	mov	r0, r3
   124ba:	f003 ff99 	bl	163f0 <__aeabi_f2d>
   124be:	4602      	mov	r2, r0
   124c0:	460b      	mov	r3, r1
   124c2:	f04f 0000 	mov.w	r0, #0
   124c6:	f04f 0100 	mov.w	r1, #0
   124ca:	f2c4 0114 	movt	r1, #16404	; 0x4014
   124ce:	f004 f90d 	bl	166ec <__aeabi_ddiv>
   124d2:	4602      	mov	r2, r0
   124d4:	460b      	mov	r3, r1
   124d6:	4620      	mov	r0, r4
   124d8:	4629      	mov	r1, r5
   124da:	f003 fe2b 	bl	16134 <__adddf3>
   124de:	4602      	mov	r2, r0
   124e0:	460b      	mov	r3, r1
   124e2:	4610      	mov	r0, r2
   124e4:	4619      	mov	r1, r3
   124e6:	f004 fab9 	bl	16a5c <__aeabi_d2f>
   124ea:	4603      	mov	r3, r0
   124ec:	613b      	str	r3, [r7, #16]
   124ee:	f240 130c 	movw	r3, #268	; 0x10c
   124f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124f6:	681b      	ldr	r3, [r3, #0]
   124f8:	4618      	mov	r0, r3
   124fa:	f003 ff79 	bl	163f0 <__aeabi_f2d>
   124fe:	4604      	mov	r4, r0
   12500:	460d      	mov	r5, r1
   12502:	6938      	ldr	r0, [r7, #16]
   12504:	f003 ff74 	bl	163f0 <__aeabi_f2d>
   12508:	4602      	mov	r2, r0
   1250a:	460b      	mov	r3, r1
   1250c:	4610      	mov	r0, r2
   1250e:	4619      	mov	r1, r3
   12510:	a3af      	add	r3, pc, #700	; (adr r3, 127d0 <auto_nav+0x1988>)
   12512:	e9d3 2300 	ldrd	r2, r3, [r3]
   12516:	f003 fe0d 	bl	16134 <__adddf3>
   1251a:	4602      	mov	r2, r0
   1251c:	460b      	mov	r3, r1
   1251e:	4610      	mov	r0, r2
   12520:	4619      	mov	r1, r3
   12522:	f002 f871 	bl	14608 <pp_sin>
   12526:	4602      	mov	r2, r0
   12528:	460b      	mov	r3, r1
   1252a:	4610      	mov	r0, r2
   1252c:	4619      	mov	r1, r3
   1252e:	a3aa      	add	r3, pc, #680	; (adr r3, 127d8 <auto_nav+0x1990>)
   12530:	e9d3 2300 	ldrd	r2, r3, [r3]
   12534:	f003 ffb0 	bl	16498 <__aeabi_dmul>
   12538:	4602      	mov	r2, r0
   1253a:	460b      	mov	r3, r1
   1253c:	4620      	mov	r0, r4
   1253e:	4629      	mov	r1, r5
   12540:	f003 fdf8 	bl	16134 <__adddf3>
   12544:	4602      	mov	r2, r0
   12546:	460b      	mov	r3, r1
   12548:	4610      	mov	r0, r2
   1254a:	4619      	mov	r1, r3
   1254c:	f004 fa86 	bl	16a5c <__aeabi_d2f>
   12550:	4606      	mov	r6, r0
   12552:	f240 130c 	movw	r3, #268	; 0x10c
   12556:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1255a:	685b      	ldr	r3, [r3, #4]
   1255c:	4618      	mov	r0, r3
   1255e:	f003 ff47 	bl	163f0 <__aeabi_f2d>
   12562:	4604      	mov	r4, r0
   12564:	460d      	mov	r5, r1
   12566:	6938      	ldr	r0, [r7, #16]
   12568:	f003 ff42 	bl	163f0 <__aeabi_f2d>
   1256c:	4602      	mov	r2, r0
   1256e:	460b      	mov	r3, r1
   12570:	4610      	mov	r0, r2
   12572:	4619      	mov	r1, r3
   12574:	f002 f848 	bl	14608 <pp_sin>
   12578:	4602      	mov	r2, r0
   1257a:	460b      	mov	r3, r1
   1257c:	4610      	mov	r0, r2
   1257e:	4619      	mov	r1, r3
   12580:	a395      	add	r3, pc, #596	; (adr r3, 127d8 <auto_nav+0x1990>)
   12582:	e9d3 2300 	ldrd	r2, r3, [r3]
   12586:	f003 ff87 	bl	16498 <__aeabi_dmul>
   1258a:	4602      	mov	r2, r0
   1258c:	460b      	mov	r3, r1
   1258e:	4620      	mov	r0, r4
   12590:	4629      	mov	r1, r5
   12592:	f003 fdcf 	bl	16134 <__adddf3>
   12596:	4602      	mov	r2, r0
   12598:	460b      	mov	r3, r1
   1259a:	4610      	mov	r0, r2
   1259c:	4619      	mov	r1, r3
   1259e:	f004 fa5d 	bl	16a5c <__aeabi_d2f>
   125a2:	4603      	mov	r3, r0
   125a4:	4630      	mov	r0, r6
   125a6:	4619      	mov	r1, r3
   125a8:	f000 fe12 	bl	131d0 <fly_to_xy>
   125ac:	6938      	ldr	r0, [r7, #16]
   125ae:	f003 ff1f 	bl	163f0 <__aeabi_f2d>
   125b2:	4602      	mov	r2, r0
   125b4:	460b      	mov	r3, r1
   125b6:	a186      	add	r1, pc, #536	; (adr r1, 127d0 <auto_nav+0x1988>)
   125b8:	e9d1 0100 	ldrd	r0, r1, [r1]
   125bc:	f003 fdb8 	bl	16130 <__aeabi_dsub>
   125c0:	4602      	mov	r2, r0
   125c2:	460b      	mov	r3, r1
   125c4:	4610      	mov	r0, r2
   125c6:	4619      	mov	r1, r3
   125c8:	a385      	add	r3, pc, #532	; (adr r3, 127e0 <auto_nav+0x1998>)
   125ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   125ce:	f004 f88d 	bl	166ec <__aeabi_ddiv>
   125d2:	4602      	mov	r2, r0
   125d4:	460b      	mov	r3, r1
   125d6:	4610      	mov	r0, r2
   125d8:	4619      	mov	r1, r3
   125da:	f04f 0200 	mov.w	r2, #0
   125de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   125e2:	f2c4 0366 	movt	r3, #16486	; 0x4066
   125e6:	f003 ff57 	bl	16498 <__aeabi_dmul>
   125ea:	4602      	mov	r2, r0
   125ec:	460b      	mov	r3, r1
   125ee:	4610      	mov	r0, r2
   125f0:	4619      	mov	r1, r3
   125f2:	f004 fa33 	bl	16a5c <__aeabi_d2f>
   125f6:	4602      	mov	r2, r0
   125f8:	f24a 63d4 	movw	r3, #42708	; 0xa6d4
   125fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12600:	601a      	str	r2, [r3, #0]
   12602:	e012      	b.n	1262a <auto_nav+0x17e2>
   12604:	f24a 63d4 	movw	r3, #42708	; 0xa6d4
   12608:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1260c:	681b      	ldr	r3, [r3, #0]
   1260e:	4618      	mov	r0, r3
   12610:	f04f 0100 	mov.w	r1, #0
   12614:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   12618:	f004 fa76 	bl	16b08 <__addsf3>
   1261c:	4603      	mov	r3, r0
   1261e:	461a      	mov	r2, r3
   12620:	f24a 63d4 	movw	r3, #42708	; 0xa6d4
   12624:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12628:	601a      	str	r2, [r3, #0]
   1262a:	f24a 63d4 	movw	r3, #42708	; 0xa6d4
   1262e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12632:	681b      	ldr	r3, [r3, #0]
   12634:	4618      	mov	r0, r3
   12636:	f04f 0100 	mov.w	r1, #0
   1263a:	f004 fd0b 	bl	17054 <__aeabi_fcmplt>
   1263e:	4603      	mov	r3, r0
   12640:	2b00      	cmp	r3, #0
   12642:	d1df      	bne.n	12604 <auto_nav+0x17bc>
   12644:	e012      	b.n	1266c <auto_nav+0x1824>
   12646:	f24a 63d4 	movw	r3, #42708	; 0xa6d4
   1264a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1264e:	681b      	ldr	r3, [r3, #0]
   12650:	4618      	mov	r0, r3
   12652:	f04f 0100 	mov.w	r1, #0
   12656:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   1265a:	f004 fa53 	bl	16b04 <__aeabi_fsub>
   1265e:	4603      	mov	r3, r0
   12660:	461a      	mov	r2, r3
   12662:	f24a 63d4 	movw	r3, #42708	; 0xa6d4
   12666:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1266a:	601a      	str	r2, [r3, #0]
   1266c:	f24a 63d4 	movw	r3, #42708	; 0xa6d4
   12670:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12674:	681b      	ldr	r3, [r3, #0]
   12676:	4618      	mov	r0, r3
   12678:	f04f 0100 	mov.w	r1, #0
   1267c:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   12680:	f004 fcfc 	bl	1707c <__aeabi_fcmpge>
   12684:	4603      	mov	r3, r0
   12686:	2b00      	cmp	r3, #0
   12688:	d1dd      	bne.n	12646 <auto_nav+0x17fe>
        return;
   1268a:	f000 bcaf 	b.w	12fec <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   1268e:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   12692:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12696:	781b      	ldrb	r3, [r3, #0]
   12698:	2b01      	cmp	r3, #1
   1269a:	f040 84a7 	bne.w	12fec <auto_nav+0x21a4>
    {
        nav_stage =1;
   1269e:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   126a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126a6:	2201      	movs	r2, #1
   126a8:	701a      	strb	r2, [r3, #0]
        NextBlock()
   126aa:	f24a 63b9 	movw	r3, #42681	; 0xa6b9
   126ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126b2:	781b      	ldrb	r3, [r3, #0]
   126b4:	3301      	adds	r3, #1
   126b6:	b2da      	uxtb	r2, r3
   126b8:	f24a 63b9 	movw	r3, #42681	; 0xa6b9
   126bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126c0:	701a      	strb	r2, [r3, #0]
   126c2:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   126c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126ca:	2200      	movs	r2, #0
   126cc:	701a      	strb	r2, [r3, #0]
   126ce:	f24a 63ce 	movw	r3, #42702	; 0xa6ce
   126d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126d6:	2200      	movs	r2, #0
   126d8:	801a      	strh	r2, [r3, #0]
   126da:	f64a 1314 	movw	r3, #43284	; 0xa914
   126de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126e2:	681a      	ldr	r2, [r3, #0]
   126e4:	f24a 63bc 	movw	r3, #42684	; 0xa6bc
   126e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126ec:	601a      	str	r2, [r3, #0]
   126ee:	f64a 1318 	movw	r3, #43288	; 0xa918
   126f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126f6:	681a      	ldr	r2, [r3, #0]
   126f8:	f24a 63c0 	movw	r3, #42688	; 0xa6c0
   126fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12700:	601a      	str	r2, [r3, #0]
   12702:	f24a 63cc 	movw	r3, #42700	; 0xa6cc
   12706:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1270a:	2200      	movs	r2, #0
   1270c:	801a      	strh	r2, [r3, #0]
   1270e:	f24a 63d0 	movw	r3, #42704	; 0xa6d0
   12712:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12716:	f04f 0200 	mov.w	r2, #0
   1271a:	601a      	str	r2, [r3, #0]
   1271c:	f000 bc66 	b.w	12fec <auto_nav+0x21a4>
    }
    else {}
}
else if (nav_block == 5)
   12720:	f24a 63b9 	movw	r3, #42681	; 0xa6b9
   12724:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12728:	781b      	ldrb	r3, [r3, #0]
   1272a:	2b05      	cmp	r3, #5
   1272c:	f040 845e 	bne.w	12fec <auto_nav+0x21a4>
{
    nav_block = 5;
   12730:	f24a 63b9 	movw	r3, #42681	; 0xa6b9
   12734:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12738:	2205      	movs	r2, #5
   1273a:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(1) }
   1273c:	f24a 3348 	movw	r3, #41800	; 0xa348
   12740:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12744:	781b      	ldrb	r3, [r3, #0]
   12746:	2b00      	cmp	r3, #0
   12748:	d007      	beq.n	1275a <auto_nav+0x1912>
   1274a:	f24a 3348 	movw	r3, #41800	; 0xa348
   1274e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12752:	2200      	movs	r2, #0
   12754:	701a      	strb	r2, [r3, #0]
   12756:	2301      	movs	r3, #1
   12758:	e000      	b.n	1275c <auto_nav+0x1914>
   1275a:	2300      	movs	r3, #0
   1275c:	2b00      	cmp	r3, #0
   1275e:	d043      	beq.n	127e8 <auto_nav+0x19a0>
   12760:	f24a 63b9 	movw	r3, #42681	; 0xa6b9
   12764:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12768:	2201      	movs	r2, #1
   1276a:	701a      	strb	r2, [r3, #0]
   1276c:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   12770:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12774:	2200      	movs	r2, #0
   12776:	701a      	strb	r2, [r3, #0]
   12778:	f24a 63ce 	movw	r3, #42702	; 0xa6ce
   1277c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12780:	2200      	movs	r2, #0
   12782:	801a      	strh	r2, [r3, #0]
   12784:	f64a 1314 	movw	r3, #43284	; 0xa914
   12788:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1278c:	681a      	ldr	r2, [r3, #0]
   1278e:	f24a 63bc 	movw	r3, #42684	; 0xa6bc
   12792:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12796:	601a      	str	r2, [r3, #0]
   12798:	f64a 1318 	movw	r3, #43288	; 0xa918
   1279c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127a0:	681a      	ldr	r2, [r3, #0]
   127a2:	f24a 63c0 	movw	r3, #42688	; 0xa6c0
   127a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127aa:	601a      	str	r2, [r3, #0]
   127ac:	f24a 63cc 	movw	r3, #42700	; 0xa6cc
   127b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127b4:	2200      	movs	r2, #0
   127b6:	801a      	strh	r2, [r3, #0]
   127b8:	f24a 63d0 	movw	r3, #42704	; 0xa6d0
   127bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127c0:	f04f 0200 	mov.w	r2, #0
   127c4:	601a      	str	r2, [r3, #0]
   127c6:	f000 bc11 	b.w	12fec <auto_nav+0x21a4>
   127ca:	bf00      	nop
   127cc:	f3af 8000 	nop.w
   127d0:	54442d18 	.word	0x54442d18
   127d4:	3ff921fb 	.word	0x3ff921fb
   127d8:	00000000 	.word	0x00000000
   127dc:	4062c000 	.word	0x4062c000
   127e0:	54442d18 	.word	0x54442d18
   127e4:	400921fb 	.word	0x400921fb
    if(nav_stage == 0) {
   127e8:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   127ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127f0:	781b      	ldrb	r3, [r3, #0]
   127f2:	2b00      	cmp	r3, #0
   127f4:	d133      	bne.n	1285e <auto_nav+0x1a16>
       Label(while_7) 
       nav_stage = 0;
   127f6:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   127fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127fe:	2200      	movs	r2, #0
   12800:	701a      	strb	r2, [r3, #0]
      if (! (TRUE)) Goto(endwhile_8) else NextStage();}
   12802:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   12806:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1280a:	781b      	ldrb	r3, [r3, #0]
   1280c:	3301      	adds	r3, #1
   1280e:	b2da      	uxtb	r2, r3
   12810:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   12814:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12818:	701a      	strb	r2, [r3, #0]
   1281a:	f64a 1314 	movw	r3, #43284	; 0xa914
   1281e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12822:	681a      	ldr	r2, [r3, #0]
   12824:	f24a 63bc 	movw	r3, #42684	; 0xa6bc
   12828:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1282c:	601a      	str	r2, [r3, #0]
   1282e:	f64a 1318 	movw	r3, #43288	; 0xa918
   12832:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12836:	681a      	ldr	r2, [r3, #0]
   12838:	f24a 63c0 	movw	r3, #42688	; 0xa6c0
   1283c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12840:	601a      	str	r2, [r3, #0]
   12842:	f24a 63cc 	movw	r3, #42700	; 0xa6cc
   12846:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1284a:	2200      	movs	r2, #0
   1284c:	801a      	strh	r2, [r3, #0]
   1284e:	f24a 63d0 	movw	r3, #42704	; 0xa6d0
   12852:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12856:	f04f 0200 	mov.w	r2, #0
   1285a:	601a      	str	r2, [r3, #0]
   1285c:	e3c6      	b.n	12fec <auto_nav+0x21a4>
     
    else if (nav_stage == 1)
   1285e:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   12862:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12866:	781b      	ldrb	r3, [r3, #0]
   12868:	2b01      	cmp	r3, #1
   1286a:	f040 81b5 	bne.w	12bd8 <auto_nav+0x1d90>
    {
        nav_stage =1;
   1286e:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   12872:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12876:	2201      	movs	r2, #1
   12878:	701a      	strb	r2, [r3, #0]
        auto_pitch = FALSE;
   1287a:	f24a 3347 	movw	r3, #41799	; 0xa347
   1287e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12882:	2200      	movs	r2, #0
   12884:	701a      	strb	r2, [r3, #0]
        nav_pitch = 0.000000;
   12886:	f24a 63e4 	movw	r3, #42724	; 0xa6e4
   1288a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1288e:	f04f 0200 	mov.w	r2, #0
   12892:	601a      	str	r2, [r3, #0]
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12894:	f24a 3345 	movw	r3, #41797	; 0xa345
   12898:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1289c:	2203      	movs	r2, #3
   1289e:	701a      	strb	r2, [r3, #0]
        desired_altitude = waypoints[1].a;
   128a0:	f240 130c 	movw	r3, #268	; 0x10c
   128a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128a8:	695a      	ldr	r2, [r3, #20]
   128aa:	f240 1308 	movw	r3, #264	; 0x108
   128ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128b2:	601a      	str	r2, [r3, #0]
        pre_climb = 0.;
   128b4:	f24a 63ac 	movw	r3, #42668	; 0xa6ac
   128b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128bc:	f04f 0200 	mov.w	r2, #0
   128c0:	601a      	str	r2, [r3, #0]
        Circle(1, 100);
   128c2:	f64a 1318 	movw	r3, #43288	; 0xa918
   128c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128ca:	681a      	ldr	r2, [r3, #0]
   128cc:	f240 130c 	movw	r3, #268	; 0x10c
   128d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128d4:	691b      	ldr	r3, [r3, #16]
   128d6:	4610      	mov	r0, r2
   128d8:	4619      	mov	r1, r3
   128da:	f004 f913 	bl	16b04 <__aeabi_fsub>
   128de:	4603      	mov	r3, r0
   128e0:	4618      	mov	r0, r3
   128e2:	f003 fd85 	bl	163f0 <__aeabi_f2d>
   128e6:	4604      	mov	r4, r0
   128e8:	460d      	mov	r5, r1
   128ea:	f64a 1314 	movw	r3, #43284	; 0xa914
   128ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128f2:	681a      	ldr	r2, [r3, #0]
   128f4:	f240 130c 	movw	r3, #268	; 0x10c
   128f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128fc:	68db      	ldr	r3, [r3, #12]
   128fe:	4610      	mov	r0, r2
   12900:	4619      	mov	r1, r3
   12902:	f004 f8ff 	bl	16b04 <__aeabi_fsub>
   12906:	4603      	mov	r3, r0
   12908:	4618      	mov	r0, r3
   1290a:	f003 fd71 	bl	163f0 <__aeabi_f2d>
   1290e:	4602      	mov	r2, r0
   12910:	460b      	mov	r3, r1
   12912:	4620      	mov	r0, r4
   12914:	4629      	mov	r1, r5
   12916:	f001 fdb7 	bl	14488 <pp_atan2>
   1291a:	4602      	mov	r2, r0
   1291c:	460b      	mov	r3, r1
   1291e:	4610      	mov	r0, r2
   12920:	4619      	mov	r1, r3
   12922:	f004 f89b 	bl	16a5c <__aeabi_d2f>
   12926:	4603      	mov	r3, r0
   12928:	60fb      	str	r3, [r7, #12]
   1292a:	68f8      	ldr	r0, [r7, #12]
   1292c:	f003 fd60 	bl	163f0 <__aeabi_f2d>
   12930:	4604      	mov	r4, r0
   12932:	460d      	mov	r5, r1
   12934:	f64a 134c 	movw	r3, #43340	; 0xa94c
   12938:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1293c:	681b      	ldr	r3, [r3, #0]
   1293e:	4618      	mov	r0, r3
   12940:	f04f 0100 	mov.w	r1, #0
   12944:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   12948:	f004 f9e6 	bl	16d18 <__aeabi_fmul>
   1294c:	4603      	mov	r3, r0
   1294e:	4618      	mov	r0, r3
   12950:	f003 fd4e 	bl	163f0 <__aeabi_f2d>
   12954:	4602      	mov	r2, r0
   12956:	460b      	mov	r3, r1
   12958:	f04f 0000 	mov.w	r0, #0
   1295c:	f04f 0100 	mov.w	r1, #0
   12960:	f2c4 0114 	movt	r1, #16404	; 0x4014
   12964:	f003 fec2 	bl	166ec <__aeabi_ddiv>
   12968:	4602      	mov	r2, r0
   1296a:	460b      	mov	r3, r1
   1296c:	4620      	mov	r0, r4
   1296e:	4629      	mov	r1, r5
   12970:	f003 fbe0 	bl	16134 <__adddf3>
   12974:	4602      	mov	r2, r0
   12976:	460b      	mov	r3, r1
   12978:	4610      	mov	r0, r2
   1297a:	4619      	mov	r1, r3
   1297c:	f004 f86e 	bl	16a5c <__aeabi_d2f>
   12980:	4603      	mov	r3, r0
   12982:	60bb      	str	r3, [r7, #8]
   12984:	f240 130c 	movw	r3, #268	; 0x10c
   12988:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1298c:	68db      	ldr	r3, [r3, #12]
   1298e:	4618      	mov	r0, r3
   12990:	f003 fd2e 	bl	163f0 <__aeabi_f2d>
   12994:	4604      	mov	r4, r0
   12996:	460d      	mov	r5, r1
   12998:	68b8      	ldr	r0, [r7, #8]
   1299a:	f003 fd29 	bl	163f0 <__aeabi_f2d>
   1299e:	4602      	mov	r2, r0
   129a0:	460b      	mov	r3, r1
   129a2:	4610      	mov	r0, r2
   129a4:	4619      	mov	r1, r3
   129a6:	a388      	add	r3, pc, #544	; (adr r3, 12bc8 <auto_nav+0x1d80>)
   129a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   129ac:	f003 fbc2 	bl	16134 <__adddf3>
   129b0:	4602      	mov	r2, r0
   129b2:	460b      	mov	r3, r1
   129b4:	4610      	mov	r0, r2
   129b6:	4619      	mov	r1, r3
   129b8:	f001 fe26 	bl	14608 <pp_sin>
   129bc:	4602      	mov	r2, r0
   129be:	460b      	mov	r3, r1
   129c0:	4610      	mov	r0, r2
   129c2:	4619      	mov	r1, r3
   129c4:	f04f 0200 	mov.w	r2, #0
   129c8:	f04f 0300 	mov.w	r3, #0
   129cc:	f2c4 0359 	movt	r3, #16473	; 0x4059
   129d0:	f003 fd62 	bl	16498 <__aeabi_dmul>
   129d4:	4602      	mov	r2, r0
   129d6:	460b      	mov	r3, r1
   129d8:	4620      	mov	r0, r4
   129da:	4629      	mov	r1, r5
   129dc:	f003 fbaa 	bl	16134 <__adddf3>
   129e0:	4602      	mov	r2, r0
   129e2:	460b      	mov	r3, r1
   129e4:	4610      	mov	r0, r2
   129e6:	4619      	mov	r1, r3
   129e8:	f004 f838 	bl	16a5c <__aeabi_d2f>
   129ec:	4606      	mov	r6, r0
   129ee:	f240 130c 	movw	r3, #268	; 0x10c
   129f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129f6:	691b      	ldr	r3, [r3, #16]
   129f8:	4618      	mov	r0, r3
   129fa:	f003 fcf9 	bl	163f0 <__aeabi_f2d>
   129fe:	4604      	mov	r4, r0
   12a00:	460d      	mov	r5, r1
   12a02:	68b8      	ldr	r0, [r7, #8]
   12a04:	f003 fcf4 	bl	163f0 <__aeabi_f2d>
   12a08:	4602      	mov	r2, r0
   12a0a:	460b      	mov	r3, r1
   12a0c:	4610      	mov	r0, r2
   12a0e:	4619      	mov	r1, r3
   12a10:	f001 fdfa 	bl	14608 <pp_sin>
   12a14:	4602      	mov	r2, r0
   12a16:	460b      	mov	r3, r1
   12a18:	4610      	mov	r0, r2
   12a1a:	4619      	mov	r1, r3
   12a1c:	f04f 0200 	mov.w	r2, #0
   12a20:	f04f 0300 	mov.w	r3, #0
   12a24:	f2c4 0359 	movt	r3, #16473	; 0x4059
   12a28:	f003 fd36 	bl	16498 <__aeabi_dmul>
   12a2c:	4602      	mov	r2, r0
   12a2e:	460b      	mov	r3, r1
   12a30:	4620      	mov	r0, r4
   12a32:	4629      	mov	r1, r5
   12a34:	f003 fb7e 	bl	16134 <__adddf3>
   12a38:	4602      	mov	r2, r0
   12a3a:	460b      	mov	r3, r1
   12a3c:	4610      	mov	r0, r2
   12a3e:	4619      	mov	r1, r3
   12a40:	f004 f80c 	bl	16a5c <__aeabi_d2f>
   12a44:	4603      	mov	r3, r0
   12a46:	4630      	mov	r0, r6
   12a48:	4619      	mov	r1, r3
   12a4a:	f000 fbc1 	bl	131d0 <fly_to_xy>
   12a4e:	68b8      	ldr	r0, [r7, #8]
   12a50:	f003 fcce 	bl	163f0 <__aeabi_f2d>
   12a54:	4602      	mov	r2, r0
   12a56:	460b      	mov	r3, r1
   12a58:	a15b      	add	r1, pc, #364	; (adr r1, 12bc8 <auto_nav+0x1d80>)
   12a5a:	e9d1 0100 	ldrd	r0, r1, [r1]
   12a5e:	f003 fb67 	bl	16130 <__aeabi_dsub>
   12a62:	4602      	mov	r2, r0
   12a64:	460b      	mov	r3, r1
   12a66:	4610      	mov	r0, r2
   12a68:	4619      	mov	r1, r3
   12a6a:	a359      	add	r3, pc, #356	; (adr r3, 12bd0 <auto_nav+0x1d88>)
   12a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
   12a70:	f003 fe3c 	bl	166ec <__aeabi_ddiv>
   12a74:	4602      	mov	r2, r0
   12a76:	460b      	mov	r3, r1
   12a78:	4610      	mov	r0, r2
   12a7a:	4619      	mov	r1, r3
   12a7c:	f04f 0200 	mov.w	r2, #0
   12a80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   12a84:	f2c4 0366 	movt	r3, #16486	; 0x4066
   12a88:	f003 fd06 	bl	16498 <__aeabi_dmul>
   12a8c:	4602      	mov	r2, r0
   12a8e:	460b      	mov	r3, r1
   12a90:	4610      	mov	r0, r2
   12a92:	4619      	mov	r1, r3
   12a94:	f003 ffe2 	bl	16a5c <__aeabi_d2f>
   12a98:	4602      	mov	r2, r0
   12a9a:	f24a 63d4 	movw	r3, #42708	; 0xa6d4
   12a9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12aa2:	601a      	str	r2, [r3, #0]
   12aa4:	e012      	b.n	12acc <auto_nav+0x1c84>
   12aa6:	f24a 63d4 	movw	r3, #42708	; 0xa6d4
   12aaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12aae:	681b      	ldr	r3, [r3, #0]
   12ab0:	4618      	mov	r0, r3
   12ab2:	f04f 0100 	mov.w	r1, #0
   12ab6:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   12aba:	f004 f825 	bl	16b08 <__addsf3>
   12abe:	4603      	mov	r3, r0
   12ac0:	461a      	mov	r2, r3
   12ac2:	f24a 63d4 	movw	r3, #42708	; 0xa6d4
   12ac6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12aca:	601a      	str	r2, [r3, #0]
   12acc:	f24a 63d4 	movw	r3, #42708	; 0xa6d4
   12ad0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ad4:	681b      	ldr	r3, [r3, #0]
   12ad6:	4618      	mov	r0, r3
   12ad8:	f04f 0100 	mov.w	r1, #0
   12adc:	f004 faba 	bl	17054 <__aeabi_fcmplt>
   12ae0:	4603      	mov	r3, r0
   12ae2:	2b00      	cmp	r3, #0
   12ae4:	d1df      	bne.n	12aa6 <auto_nav+0x1c5e>
   12ae6:	e012      	b.n	12b0e <auto_nav+0x1cc6>
   12ae8:	f24a 63d4 	movw	r3, #42708	; 0xa6d4
   12aec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12af0:	681b      	ldr	r3, [r3, #0]
   12af2:	4618      	mov	r0, r3
   12af4:	f04f 0100 	mov.w	r1, #0
   12af8:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   12afc:	f004 f802 	bl	16b04 <__aeabi_fsub>
   12b00:	4603      	mov	r3, r0
   12b02:	461a      	mov	r2, r3
   12b04:	f24a 63d4 	movw	r3, #42708	; 0xa6d4
   12b08:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b0c:	601a      	str	r2, [r3, #0]
   12b0e:	f24a 63d4 	movw	r3, #42708	; 0xa6d4
   12b12:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b16:	681b      	ldr	r3, [r3, #0]
   12b18:	4618      	mov	r0, r3
   12b1a:	f04f 0100 	mov.w	r1, #0
   12b1e:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   12b22:	f004 faab 	bl	1707c <__aeabi_fcmpge>
   12b26:	4603      	mov	r3, r0
   12b28:	2b00      	cmp	r3, #0
   12b2a:	d1dd      	bne.n	12ae8 <auto_nav+0x1ca0>
        if (Qdr(0)) NextStage();
   12b2c:	f24a 63d4 	movw	r3, #42708	; 0xa6d4
   12b30:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b34:	681b      	ldr	r3, [r3, #0]
   12b36:	4618      	mov	r0, r3
   12b38:	f04f 0100 	mov.w	r1, #0
   12b3c:	f004 faa8 	bl	17090 <__aeabi_fcmpgt>
   12b40:	4603      	mov	r3, r0
   12b42:	2b00      	cmp	r3, #0
   12b44:	d100      	bne.n	12b48 <auto_nav+0x1d00>
        return;
   12b46:	e251      	b.n	12fec <auto_nav+0x21a4>
        nav_pitch = 0.000000;
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
        desired_altitude = waypoints[1].a;
        pre_climb = 0.;
        Circle(1, 100);
        if (Qdr(0)) NextStage();
   12b48:	f24a 63d4 	movw	r3, #42708	; 0xa6d4
   12b4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b50:	681b      	ldr	r3, [r3, #0]
   12b52:	4618      	mov	r0, r3
   12b54:	f04f 0100 	mov.w	r1, #0
   12b58:	f2c4 1120 	movt	r1, #16672	; 0x4120
   12b5c:	f004 fa7a 	bl	17054 <__aeabi_fcmplt>
   12b60:	4603      	mov	r3, r0
   12b62:	2b00      	cmp	r3, #0
   12b64:	d100      	bne.n	12b68 <auto_nav+0x1d20>
        return;
   12b66:	e241      	b.n	12fec <auto_nav+0x21a4>
        nav_pitch = 0.000000;
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
        desired_altitude = waypoints[1].a;
        pre_climb = 0.;
        Circle(1, 100);
        if (Qdr(0)) NextStage();
   12b68:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   12b6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b70:	781b      	ldrb	r3, [r3, #0]
   12b72:	3301      	adds	r3, #1
   12b74:	b2da      	uxtb	r2, r3
   12b76:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   12b7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b7e:	701a      	strb	r2, [r3, #0]
   12b80:	f64a 1314 	movw	r3, #43284	; 0xa914
   12b84:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b88:	681a      	ldr	r2, [r3, #0]
   12b8a:	f24a 63bc 	movw	r3, #42684	; 0xa6bc
   12b8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b92:	601a      	str	r2, [r3, #0]
   12b94:	f64a 1318 	movw	r3, #43288	; 0xa918
   12b98:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b9c:	681a      	ldr	r2, [r3, #0]
   12b9e:	f24a 63c0 	movw	r3, #42688	; 0xa6c0
   12ba2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ba6:	601a      	str	r2, [r3, #0]
   12ba8:	f24a 63cc 	movw	r3, #42700	; 0xa6cc
   12bac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12bb0:	2200      	movs	r2, #0
   12bb2:	801a      	strh	r2, [r3, #0]
   12bb4:	f24a 63d0 	movw	r3, #42704	; 0xa6d0
   12bb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12bbc:	f04f 0200 	mov.w	r2, #0
   12bc0:	601a      	str	r2, [r3, #0]
   12bc2:	e213      	b.n	12fec <auto_nav+0x21a4>
   12bc4:	f3af 8000 	nop.w
   12bc8:	54442d18 	.word	0x54442d18
   12bcc:	3ff921fb 	.word	0x3ff921fb
   12bd0:	54442d18 	.word	0x54442d18
   12bd4:	400921fb 	.word	0x400921fb
        return;
    }
    else if (nav_stage == 2)
   12bd8:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   12bdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12be0:	781b      	ldrb	r3, [r3, #0]
   12be2:	2b02      	cmp	r3, #2
   12be4:	f040 81ad 	bne.w	12f42 <auto_nav+0x20fa>
    {
         nav_stage = 2;
   12be8:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   12bec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12bf0:	2202      	movs	r2, #2
   12bf2:	701a      	strb	r2, [r3, #0]
          auto_pitch = FALSE;
   12bf4:	f24a 3347 	movw	r3, #41799	; 0xa347
   12bf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12bfc:	2200      	movs	r2, #0
   12bfe:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.000000;
   12c00:	f24a 63e4 	movw	r3, #42724	; 0xa6e4
   12c04:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c08:	f04f 0200 	mov.w	r2, #0
   12c0c:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12c0e:	f24a 3345 	movw	r3, #41797	; 0xa345
   12c12:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c16:	2203      	movs	r2, #3
   12c18:	701a      	strb	r2, [r3, #0]
          desired_altitude = waypoints[4].a;
   12c1a:	f240 130c 	movw	r3, #268	; 0x10c
   12c1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   12c24:	f240 1308 	movw	r3, #264	; 0x108
   12c28:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c2c:	601a      	str	r2, [r3, #0]
          pre_climb = 0.;
   12c2e:	f24a 63ac 	movw	r3, #42668	; 0xa6ac
   12c32:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c36:	f04f 0200 	mov.w	r2, #0
   12c3a:	601a      	str	r2, [r3, #0]
          Circle(4, 100);
   12c3c:	f64a 1318 	movw	r3, #43288	; 0xa918
   12c40:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c44:	681a      	ldr	r2, [r3, #0]
   12c46:	f240 130c 	movw	r3, #268	; 0x10c
   12c4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   12c50:	4610      	mov	r0, r2
   12c52:	4619      	mov	r1, r3
   12c54:	f003 ff56 	bl	16b04 <__aeabi_fsub>
   12c58:	4603      	mov	r3, r0
   12c5a:	4618      	mov	r0, r3
   12c5c:	f003 fbc8 	bl	163f0 <__aeabi_f2d>
   12c60:	4604      	mov	r4, r0
   12c62:	460d      	mov	r5, r1
   12c64:	f64a 1314 	movw	r3, #43284	; 0xa914
   12c68:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c6c:	681a      	ldr	r2, [r3, #0]
   12c6e:	f240 130c 	movw	r3, #268	; 0x10c
   12c72:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   12c78:	4610      	mov	r0, r2
   12c7a:	4619      	mov	r1, r3
   12c7c:	f003 ff42 	bl	16b04 <__aeabi_fsub>
   12c80:	4603      	mov	r3, r0
   12c82:	4618      	mov	r0, r3
   12c84:	f003 fbb4 	bl	163f0 <__aeabi_f2d>
   12c88:	4602      	mov	r2, r0
   12c8a:	460b      	mov	r3, r1
   12c8c:	4620      	mov	r0, r4
   12c8e:	4629      	mov	r1, r5
   12c90:	f001 fbfa 	bl	14488 <pp_atan2>
   12c94:	4602      	mov	r2, r0
   12c96:	460b      	mov	r3, r1
   12c98:	4610      	mov	r0, r2
   12c9a:	4619      	mov	r1, r3
   12c9c:	f003 fede 	bl	16a5c <__aeabi_d2f>
   12ca0:	4603      	mov	r3, r0
   12ca2:	607b      	str	r3, [r7, #4]
   12ca4:	6878      	ldr	r0, [r7, #4]
   12ca6:	f003 fba3 	bl	163f0 <__aeabi_f2d>
   12caa:	4604      	mov	r4, r0
   12cac:	460d      	mov	r5, r1
   12cae:	f64a 134c 	movw	r3, #43340	; 0xa94c
   12cb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12cb6:	681b      	ldr	r3, [r3, #0]
   12cb8:	4618      	mov	r0, r3
   12cba:	f04f 0100 	mov.w	r1, #0
   12cbe:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   12cc2:	f004 f829 	bl	16d18 <__aeabi_fmul>
   12cc6:	4603      	mov	r3, r0
   12cc8:	4618      	mov	r0, r3
   12cca:	f003 fb91 	bl	163f0 <__aeabi_f2d>
   12cce:	4602      	mov	r2, r0
   12cd0:	460b      	mov	r3, r1
   12cd2:	f04f 0000 	mov.w	r0, #0
   12cd6:	f04f 0100 	mov.w	r1, #0
   12cda:	f2c4 0114 	movt	r1, #16404	; 0x4014
   12cde:	f003 fd05 	bl	166ec <__aeabi_ddiv>
   12ce2:	4602      	mov	r2, r0
   12ce4:	460b      	mov	r3, r1
   12ce6:	4620      	mov	r0, r4
   12ce8:	4629      	mov	r1, r5
   12cea:	f003 fa23 	bl	16134 <__adddf3>
   12cee:	4602      	mov	r2, r0
   12cf0:	460b      	mov	r3, r1
   12cf2:	4610      	mov	r0, r2
   12cf4:	4619      	mov	r1, r3
   12cf6:	f003 feb1 	bl	16a5c <__aeabi_d2f>
   12cfa:	4603      	mov	r3, r0
   12cfc:	603b      	str	r3, [r7, #0]
   12cfe:	f240 130c 	movw	r3, #268	; 0x10c
   12d02:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   12d08:	4618      	mov	r0, r3
   12d0a:	f003 fb71 	bl	163f0 <__aeabi_f2d>
   12d0e:	4604      	mov	r4, r0
   12d10:	460d      	mov	r5, r1
   12d12:	6838      	ldr	r0, [r7, #0]
   12d14:	f003 fb6c 	bl	163f0 <__aeabi_f2d>
   12d18:	4602      	mov	r2, r0
   12d1a:	460b      	mov	r3, r1
   12d1c:	4610      	mov	r0, r2
   12d1e:	4619      	mov	r1, r3
   12d20:	a3b5      	add	r3, pc, #724	; (adr r3, 12ff8 <auto_nav+0x21b0>)
   12d22:	e9d3 2300 	ldrd	r2, r3, [r3]
   12d26:	f003 fa05 	bl	16134 <__adddf3>
   12d2a:	4602      	mov	r2, r0
   12d2c:	460b      	mov	r3, r1
   12d2e:	4610      	mov	r0, r2
   12d30:	4619      	mov	r1, r3
   12d32:	f001 fc69 	bl	14608 <pp_sin>
   12d36:	4602      	mov	r2, r0
   12d38:	460b      	mov	r3, r1
   12d3a:	4610      	mov	r0, r2
   12d3c:	4619      	mov	r1, r3
   12d3e:	f04f 0200 	mov.w	r2, #0
   12d42:	f04f 0300 	mov.w	r3, #0
   12d46:	f2c4 0359 	movt	r3, #16473	; 0x4059
   12d4a:	f003 fba5 	bl	16498 <__aeabi_dmul>
   12d4e:	4602      	mov	r2, r0
   12d50:	460b      	mov	r3, r1
   12d52:	4620      	mov	r0, r4
   12d54:	4629      	mov	r1, r5
   12d56:	f003 f9ed 	bl	16134 <__adddf3>
   12d5a:	4602      	mov	r2, r0
   12d5c:	460b      	mov	r3, r1
   12d5e:	4610      	mov	r0, r2
   12d60:	4619      	mov	r1, r3
   12d62:	f003 fe7b 	bl	16a5c <__aeabi_d2f>
   12d66:	4606      	mov	r6, r0
   12d68:	f240 130c 	movw	r3, #268	; 0x10c
   12d6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   12d72:	4618      	mov	r0, r3
   12d74:	f003 fb3c 	bl	163f0 <__aeabi_f2d>
   12d78:	4604      	mov	r4, r0
   12d7a:	460d      	mov	r5, r1
   12d7c:	6838      	ldr	r0, [r7, #0]
   12d7e:	f003 fb37 	bl	163f0 <__aeabi_f2d>
   12d82:	4602      	mov	r2, r0
   12d84:	460b      	mov	r3, r1
   12d86:	4610      	mov	r0, r2
   12d88:	4619      	mov	r1, r3
   12d8a:	f001 fc3d 	bl	14608 <pp_sin>
   12d8e:	4602      	mov	r2, r0
   12d90:	460b      	mov	r3, r1
   12d92:	4610      	mov	r0, r2
   12d94:	4619      	mov	r1, r3
   12d96:	f04f 0200 	mov.w	r2, #0
   12d9a:	f04f 0300 	mov.w	r3, #0
   12d9e:	f2c4 0359 	movt	r3, #16473	; 0x4059
   12da2:	f003 fb79 	bl	16498 <__aeabi_dmul>
   12da6:	4602      	mov	r2, r0
   12da8:	460b      	mov	r3, r1
   12daa:	4620      	mov	r0, r4
   12dac:	4629      	mov	r1, r5
   12dae:	f003 f9c1 	bl	16134 <__adddf3>
   12db2:	4602      	mov	r2, r0
   12db4:	460b      	mov	r3, r1
   12db6:	4610      	mov	r0, r2
   12db8:	4619      	mov	r1, r3
   12dba:	f003 fe4f 	bl	16a5c <__aeabi_d2f>
   12dbe:	4603      	mov	r3, r0
   12dc0:	4630      	mov	r0, r6
   12dc2:	4619      	mov	r1, r3
   12dc4:	f000 fa04 	bl	131d0 <fly_to_xy>
   12dc8:	6838      	ldr	r0, [r7, #0]
   12dca:	f003 fb11 	bl	163f0 <__aeabi_f2d>
   12dce:	4602      	mov	r2, r0
   12dd0:	460b      	mov	r3, r1
   12dd2:	a189      	add	r1, pc, #548	; (adr r1, 12ff8 <auto_nav+0x21b0>)
   12dd4:	e9d1 0100 	ldrd	r0, r1, [r1]
   12dd8:	f003 f9aa 	bl	16130 <__aeabi_dsub>
   12ddc:	4602      	mov	r2, r0
   12dde:	460b      	mov	r3, r1
   12de0:	4610      	mov	r0, r2
   12de2:	4619      	mov	r1, r3
   12de4:	a386      	add	r3, pc, #536	; (adr r3, 13000 <auto_nav+0x21b8>)
   12de6:	e9d3 2300 	ldrd	r2, r3, [r3]
   12dea:	f003 fc7f 	bl	166ec <__aeabi_ddiv>
   12dee:	4602      	mov	r2, r0
   12df0:	460b      	mov	r3, r1
   12df2:	4610      	mov	r0, r2
   12df4:	4619      	mov	r1, r3
   12df6:	f04f 0200 	mov.w	r2, #0
   12dfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   12dfe:	f2c4 0366 	movt	r3, #16486	; 0x4066
   12e02:	f003 fb49 	bl	16498 <__aeabi_dmul>
   12e06:	4602      	mov	r2, r0
   12e08:	460b      	mov	r3, r1
   12e0a:	4610      	mov	r0, r2
   12e0c:	4619      	mov	r1, r3
   12e0e:	f003 fe25 	bl	16a5c <__aeabi_d2f>
   12e12:	4602      	mov	r2, r0
   12e14:	f24a 63d4 	movw	r3, #42708	; 0xa6d4
   12e18:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e1c:	601a      	str	r2, [r3, #0]
   12e1e:	e012      	b.n	12e46 <auto_nav+0x1ffe>
   12e20:	f24a 63d4 	movw	r3, #42708	; 0xa6d4
   12e24:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e28:	681b      	ldr	r3, [r3, #0]
   12e2a:	4618      	mov	r0, r3
   12e2c:	f04f 0100 	mov.w	r1, #0
   12e30:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   12e34:	f003 fe68 	bl	16b08 <__addsf3>
   12e38:	4603      	mov	r3, r0
   12e3a:	461a      	mov	r2, r3
   12e3c:	f24a 63d4 	movw	r3, #42708	; 0xa6d4
   12e40:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e44:	601a      	str	r2, [r3, #0]
   12e46:	f24a 63d4 	movw	r3, #42708	; 0xa6d4
   12e4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e4e:	681b      	ldr	r3, [r3, #0]
   12e50:	4618      	mov	r0, r3
   12e52:	f04f 0100 	mov.w	r1, #0
   12e56:	f004 f8fd 	bl	17054 <__aeabi_fcmplt>
   12e5a:	4603      	mov	r3, r0
   12e5c:	2b00      	cmp	r3, #0
   12e5e:	d1df      	bne.n	12e20 <auto_nav+0x1fd8>
   12e60:	e012      	b.n	12e88 <auto_nav+0x2040>
   12e62:	f24a 63d4 	movw	r3, #42708	; 0xa6d4
   12e66:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e6a:	681b      	ldr	r3, [r3, #0]
   12e6c:	4618      	mov	r0, r3
   12e6e:	f04f 0100 	mov.w	r1, #0
   12e72:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   12e76:	f003 fe45 	bl	16b04 <__aeabi_fsub>
   12e7a:	4603      	mov	r3, r0
   12e7c:	461a      	mov	r2, r3
   12e7e:	f24a 63d4 	movw	r3, #42708	; 0xa6d4
   12e82:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e86:	601a      	str	r2, [r3, #0]
   12e88:	f24a 63d4 	movw	r3, #42708	; 0xa6d4
   12e8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e90:	681b      	ldr	r3, [r3, #0]
   12e92:	4618      	mov	r0, r3
   12e94:	f04f 0100 	mov.w	r1, #0
   12e98:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   12e9c:	f004 f8ee 	bl	1707c <__aeabi_fcmpge>
   12ea0:	4603      	mov	r3, r0
   12ea2:	2b00      	cmp	r3, #0
   12ea4:	d1dd      	bne.n	12e62 <auto_nav+0x201a>
          if (Qdr(180)) NextStage();
   12ea6:	f24a 63d4 	movw	r3, #42708	; 0xa6d4
   12eaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12eae:	681b      	ldr	r3, [r3, #0]
   12eb0:	4618      	mov	r0, r3
   12eb2:	f04f 0100 	mov.w	r1, #0
   12eb6:	f2c4 3134 	movt	r1, #17204	; 0x4334
   12eba:	f004 f8e9 	bl	17090 <__aeabi_fcmpgt>
   12ebe:	4603      	mov	r3, r0
   12ec0:	2b00      	cmp	r3, #0
   12ec2:	d100      	bne.n	12ec6 <auto_nav+0x207e>
          return;
   12ec4:	e092      	b.n	12fec <auto_nav+0x21a4>
          nav_pitch = 0.000000;
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
          desired_altitude = waypoints[4].a;
          pre_climb = 0.;
          Circle(4, 100);
          if (Qdr(180)) NextStage();
   12ec6:	f24a 63d4 	movw	r3, #42708	; 0xa6d4
   12eca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ece:	681b      	ldr	r3, [r3, #0]
   12ed0:	4618      	mov	r0, r3
   12ed2:	f04f 0100 	mov.w	r1, #0
   12ed6:	f2c4 313e 	movt	r1, #17214	; 0x433e
   12eda:	f004 f8bb 	bl	17054 <__aeabi_fcmplt>
   12ede:	4603      	mov	r3, r0
   12ee0:	2b00      	cmp	r3, #0
   12ee2:	d100      	bne.n	12ee6 <auto_nav+0x209e>
          return;
   12ee4:	e082      	b.n	12fec <auto_nav+0x21a4>
          nav_pitch = 0.000000;
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
          desired_altitude = waypoints[4].a;
          pre_climb = 0.;
          Circle(4, 100);
          if (Qdr(180)) NextStage();
   12ee6:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   12eea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12eee:	781b      	ldrb	r3, [r3, #0]
   12ef0:	3301      	adds	r3, #1
   12ef2:	b2da      	uxtb	r2, r3
   12ef4:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   12ef8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12efc:	701a      	strb	r2, [r3, #0]
   12efe:	f64a 1314 	movw	r3, #43284	; 0xa914
   12f02:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f06:	681a      	ldr	r2, [r3, #0]
   12f08:	f24a 63bc 	movw	r3, #42684	; 0xa6bc
   12f0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f10:	601a      	str	r2, [r3, #0]
   12f12:	f64a 1318 	movw	r3, #43288	; 0xa918
   12f16:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f1a:	681a      	ldr	r2, [r3, #0]
   12f1c:	f24a 63c0 	movw	r3, #42688	; 0xa6c0
   12f20:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f24:	601a      	str	r2, [r3, #0]
   12f26:	f24a 63cc 	movw	r3, #42700	; 0xa6cc
   12f2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f2e:	2200      	movs	r2, #0
   12f30:	801a      	strh	r2, [r3, #0]
   12f32:	f24a 63d0 	movw	r3, #42704	; 0xa6d0
   12f36:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f3a:	f04f 0200 	mov.w	r2, #0
   12f3e:	601a      	str	r2, [r3, #0]
   12f40:	e054      	b.n	12fec <auto_nav+0x21a4>
          return;
    }
    else if (nav_stage == 3) 
   12f42:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   12f46:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f4a:	781b      	ldrb	r3, [r3, #0]
   12f4c:	2b03      	cmp	r3, #3
   12f4e:	d106      	bne.n	12f5e <auto_nav+0x2116>
    {
	  nav_stage = 3;
   12f50:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   12f54:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f58:	2203      	movs	r2, #3
   12f5a:	701a      	strb	r2, [r3, #0]
          Goto(while_7)
   12f5c:	e44b      	b.n	127f6 <auto_nav+0x19ae>
    }
    else if (nav_stage == 4)
   12f5e:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   12f62:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f66:	781b      	ldrb	r3, [r3, #0]
   12f68:	2b04      	cmp	r3, #4
   12f6a:	d13f      	bne.n	12fec <auto_nav+0x21a4>
    {
	Label(endwhile_8)
	nav_stage = 4;
   12f6c:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   12f70:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f74:	2204      	movs	r2, #4
   12f76:	701a      	strb	r2, [r3, #0]
        NextBlock()
   12f78:	f24a 63b9 	movw	r3, #42681	; 0xa6b9
   12f7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f80:	781b      	ldrb	r3, [r3, #0]
   12f82:	3301      	adds	r3, #1
   12f84:	b2da      	uxtb	r2, r3
   12f86:	f24a 63b9 	movw	r3, #42681	; 0xa6b9
   12f8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f8e:	701a      	strb	r2, [r3, #0]
   12f90:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   12f94:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f98:	2200      	movs	r2, #0
   12f9a:	701a      	strb	r2, [r3, #0]
   12f9c:	f24a 63ce 	movw	r3, #42702	; 0xa6ce
   12fa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12fa4:	2200      	movs	r2, #0
   12fa6:	801a      	strh	r2, [r3, #0]
   12fa8:	f64a 1314 	movw	r3, #43284	; 0xa914
   12fac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12fb0:	681a      	ldr	r2, [r3, #0]
   12fb2:	f24a 63bc 	movw	r3, #42684	; 0xa6bc
   12fb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12fba:	601a      	str	r2, [r3, #0]
   12fbc:	f64a 1318 	movw	r3, #43288	; 0xa918
   12fc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12fc4:	681a      	ldr	r2, [r3, #0]
   12fc6:	f24a 63c0 	movw	r3, #42688	; 0xa6c0
   12fca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12fce:	601a      	str	r2, [r3, #0]
   12fd0:	f24a 63cc 	movw	r3, #42700	; 0xa6cc
   12fd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12fd8:	2200      	movs	r2, #0
   12fda:	801a      	strh	r2, [r3, #0]
   12fdc:	f24a 63d0 	movw	r3, #42704	; 0xa6d0
   12fe0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12fe4:	f04f 0200 	mov.w	r2, #0
   12fe8:	601a      	str	r2, [r3, #0]
   12fea:	bf00      	nop
    else { }
}
else { }

//#endif
}
   12fec:	372c      	adds	r7, #44	; 0x2c
   12fee:	46bd      	mov	sp, r7
   12ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12ff2:	bf00      	nop
   12ff4:	f3af 8000 	nop.w
   12ff8:	54442d18 	.word	0x54442d18
   12ffc:	3ff921fb 	.word	0x3ff921fb
   13000:	54442d18 	.word	0x54442d18
   13004:	400921fb 	.word	0x400921fb

00013008 <approaching>:
const uint8_t nb_waypoint = NB_WAYPOINT;

struct point waypoints[NB_WAYPOINT+1] = WAYPOINTS;

static float carrot;
static bool_t approaching(uint8_t wp) {
   13008:	b590      	push	{r4, r7, lr}
   1300a:	b087      	sub	sp, #28
   1300c:	af00      	add	r7, sp, #0
   1300e:	4603      	mov	r3, r0
   13010:	71fb      	strb	r3, [r7, #7]
  float pw_x = waypoints[wp].x - estimator_x;
   13012:	79f9      	ldrb	r1, [r7, #7]
   13014:	f240 120c 	movw	r2, #268	; 0x10c
   13018:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1301c:	460b      	mov	r3, r1
   1301e:	005b      	lsls	r3, r3, #1
   13020:	440b      	add	r3, r1
   13022:	009b      	lsls	r3, r3, #2
   13024:	4413      	add	r3, r2
   13026:	681a      	ldr	r2, [r3, #0]
   13028:	f64a 1314 	movw	r3, #43284	; 0xa914
   1302c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13030:	681b      	ldr	r3, [r3, #0]
   13032:	4610      	mov	r0, r2
   13034:	4619      	mov	r1, r3
   13036:	f003 fd65 	bl	16b04 <__aeabi_fsub>
   1303a:	4603      	mov	r3, r0
   1303c:	617b      	str	r3, [r7, #20]
  float pw_y = waypoints[wp].y - estimator_y;
   1303e:	79f9      	ldrb	r1, [r7, #7]
   13040:	f240 120c 	movw	r2, #268	; 0x10c
   13044:	f2c2 0200 	movt	r2, #8192	; 0x2000
   13048:	460b      	mov	r3, r1
   1304a:	005b      	lsls	r3, r3, #1
   1304c:	440b      	add	r3, r1
   1304e:	009b      	lsls	r3, r3, #2
   13050:	4413      	add	r3, r2
   13052:	3304      	adds	r3, #4
   13054:	681a      	ldr	r2, [r3, #0]
   13056:	f64a 1318 	movw	r3, #43288	; 0xa918
   1305a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1305e:	681b      	ldr	r3, [r3, #0]
   13060:	4610      	mov	r0, r2
   13062:	4619      	mov	r1, r3
   13064:	f003 fd4e 	bl	16b04 <__aeabi_fsub>
   13068:	4603      	mov	r3, r0
   1306a:	613b      	str	r3, [r7, #16]
  float scal_prod;//changes for PowerPc Fev-06

  dist2_to_wp = pw_x*pw_x + pw_y *pw_y;
   1306c:	6978      	ldr	r0, [r7, #20]
   1306e:	6979      	ldr	r1, [r7, #20]
   13070:	f003 fe52 	bl	16d18 <__aeabi_fmul>
   13074:	4603      	mov	r3, r0
   13076:	461c      	mov	r4, r3
   13078:	6938      	ldr	r0, [r7, #16]
   1307a:	6939      	ldr	r1, [r7, #16]
   1307c:	f003 fe4c 	bl	16d18 <__aeabi_fmul>
   13080:	4603      	mov	r3, r0
   13082:	4620      	mov	r0, r4
   13084:	4619      	mov	r1, r3
   13086:	f003 fd3f 	bl	16b08 <__addsf3>
   1308a:	4603      	mov	r3, r0
   1308c:	461a      	mov	r2, r3
   1308e:	f24a 63ec 	movw	r3, #42732	; 0xa6ec
   13092:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13096:	601a      	str	r2, [r3, #0]
  carrot = CARROT * estimator_hspeed_mod;
   13098:	f64a 134c 	movw	r3, #43340	; 0xa94c
   1309c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   130a0:	681b      	ldr	r3, [r3, #0]
   130a2:	4618      	mov	r0, r3
   130a4:	f04f 0100 	mov.w	r1, #0
   130a8:	f2c4 01a0 	movt	r1, #16544	; 0x40a0
   130ac:	f003 fe34 	bl	16d18 <__aeabi_fmul>
   130b0:	4603      	mov	r3, r0
   130b2:	461a      	mov	r2, r3
   130b4:	f24a 63f8 	movw	r3, #42744	; 0xa6f8
   130b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   130bc:	601a      	str	r2, [r3, #0]
  carrot = (carrot < 40 ? 40 : carrot);
   130be:	f24a 63f8 	movw	r3, #42744	; 0xa6f8
   130c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   130c6:	681b      	ldr	r3, [r3, #0]
   130c8:	4618      	mov	r0, r3
   130ca:	f04f 0100 	mov.w	r1, #0
   130ce:	f2c4 2120 	movt	r1, #16928	; 0x4220
   130d2:	f003 ffbf 	bl	17054 <__aeabi_fcmplt>
   130d6:	4603      	mov	r3, r0
   130d8:	2b00      	cmp	r3, #0
   130da:	d004      	beq.n	130e6 <approaching+0xde>
   130dc:	f04f 0200 	mov.w	r2, #0
   130e0:	f2c4 2220 	movt	r2, #16928	; 0x4220
   130e4:	e004      	b.n	130f0 <approaching+0xe8>
   130e6:	f24a 63f8 	movw	r3, #42744	; 0xa6f8
   130ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   130ee:	681a      	ldr	r2, [r3, #0]
   130f0:	f24a 63f8 	movw	r3, #42744	; 0xa6f8
   130f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   130f8:	601a      	str	r2, [r3, #0]
  if (dist2_to_wp < carrot*carrot)
   130fa:	f24a 63f8 	movw	r3, #42744	; 0xa6f8
   130fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13102:	681a      	ldr	r2, [r3, #0]
   13104:	f24a 63f8 	movw	r3, #42744	; 0xa6f8
   13108:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1310c:	681b      	ldr	r3, [r3, #0]
   1310e:	4610      	mov	r0, r2
   13110:	4619      	mov	r1, r3
   13112:	f003 fe01 	bl	16d18 <__aeabi_fmul>
   13116:	4603      	mov	r3, r0
   13118:	461a      	mov	r2, r3
   1311a:	f24a 63ec 	movw	r3, #42732	; 0xa6ec
   1311e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13122:	681b      	ldr	r3, [r3, #0]
   13124:	4610      	mov	r0, r2
   13126:	4619      	mov	r1, r3
   13128:	f003 ffb2 	bl	17090 <__aeabi_fcmpgt>
   1312c:	4603      	mov	r3, r0
   1312e:	2b00      	cmp	r3, #0
   13130:	d001      	beq.n	13136 <approaching+0x12e>
    return TRUE;
   13132:	2301      	movs	r3, #1
   13134:	e048      	b.n	131c8 <approaching+0x1c0>

  scal_prod = (waypoints[wp].x - last_x) * pw_x + (waypoints[wp].y - last_y) * pw_y;
   13136:	79f9      	ldrb	r1, [r7, #7]
   13138:	f240 120c 	movw	r2, #268	; 0x10c
   1313c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   13140:	460b      	mov	r3, r1
   13142:	005b      	lsls	r3, r3, #1
   13144:	440b      	add	r3, r1
   13146:	009b      	lsls	r3, r3, #2
   13148:	4413      	add	r3, r2
   1314a:	681a      	ldr	r2, [r3, #0]
   1314c:	f24a 63bc 	movw	r3, #42684	; 0xa6bc
   13150:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13154:	681b      	ldr	r3, [r3, #0]
   13156:	4610      	mov	r0, r2
   13158:	4619      	mov	r1, r3
   1315a:	f003 fcd3 	bl	16b04 <__aeabi_fsub>
   1315e:	4603      	mov	r3, r0
   13160:	4618      	mov	r0, r3
   13162:	6979      	ldr	r1, [r7, #20]
   13164:	f003 fdd8 	bl	16d18 <__aeabi_fmul>
   13168:	4603      	mov	r3, r0
   1316a:	461c      	mov	r4, r3
   1316c:	79f9      	ldrb	r1, [r7, #7]
   1316e:	f240 120c 	movw	r2, #268	; 0x10c
   13172:	f2c2 0200 	movt	r2, #8192	; 0x2000
   13176:	460b      	mov	r3, r1
   13178:	005b      	lsls	r3, r3, #1
   1317a:	440b      	add	r3, r1
   1317c:	009b      	lsls	r3, r3, #2
   1317e:	4413      	add	r3, r2
   13180:	3304      	adds	r3, #4
   13182:	681a      	ldr	r2, [r3, #0]
   13184:	f24a 63c0 	movw	r3, #42688	; 0xa6c0
   13188:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1318c:	681b      	ldr	r3, [r3, #0]
   1318e:	4610      	mov	r0, r2
   13190:	4619      	mov	r1, r3
   13192:	f003 fcb7 	bl	16b04 <__aeabi_fsub>
   13196:	4603      	mov	r3, r0
   13198:	4618      	mov	r0, r3
   1319a:	6939      	ldr	r1, [r7, #16]
   1319c:	f003 fdbc 	bl	16d18 <__aeabi_fmul>
   131a0:	4603      	mov	r3, r0
   131a2:	4620      	mov	r0, r4
   131a4:	4619      	mov	r1, r3
   131a6:	f003 fcaf 	bl	16b08 <__addsf3>
   131aa:	4603      	mov	r3, r0
   131ac:	60fb      	str	r3, [r7, #12]
  
  return (scal_prod < 0);
   131ae:	2301      	movs	r3, #1
   131b0:	461c      	mov	r4, r3
   131b2:	68f8      	ldr	r0, [r7, #12]
   131b4:	f04f 0100 	mov.w	r1, #0
   131b8:	f003 ff4c 	bl	17054 <__aeabi_fcmplt>
   131bc:	4603      	mov	r3, r0
   131be:	2b00      	cmp	r3, #0
   131c0:	d101      	bne.n	131c6 <approaching+0x1be>
   131c2:	2300      	movs	r3, #0
   131c4:	461c      	mov	r4, r3
   131c6:	b2e3      	uxtb	r3, r4
}
   131c8:	4618      	mov	r0, r3
   131ca:	371c      	adds	r7, #28
   131cc:	46bd      	mov	sp, r7
   131ce:	bd90      	pop	{r4, r7, pc}

000131d0 <fly_to_xy>:

static inline void fly_to_xy(float x, float y) 
{ 
   131d0:	b5b0      	push	{r4, r5, r7, lr}
   131d2:	b082      	sub	sp, #8
   131d4:	af00      	add	r7, sp, #0
   131d6:	6078      	str	r0, [r7, #4]
   131d8:	6039      	str	r1, [r7, #0]
  desired_x = x;
   131da:	f24a 63d8 	movw	r3, #42712	; 0xa6d8
   131de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   131e2:	687a      	ldr	r2, [r7, #4]
   131e4:	601a      	str	r2, [r3, #0]
  desired_y = y;
   131e6:	f24a 63dc 	movw	r3, #42716	; 0xa6dc
   131ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   131ee:	683a      	ldr	r2, [r7, #0]
   131f0:	601a      	str	r2, [r3, #0]
  desired_course = M_PI/2.-atan2(y - estimator_y, x - estimator_x);
   131f2:	f64a 1318 	movw	r3, #43288	; 0xa918
   131f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   131fa:	681b      	ldr	r3, [r3, #0]
   131fc:	6838      	ldr	r0, [r7, #0]
   131fe:	4619      	mov	r1, r3
   13200:	f003 fc80 	bl	16b04 <__aeabi_fsub>
   13204:	4603      	mov	r3, r0
   13206:	4618      	mov	r0, r3
   13208:	f003 f8f2 	bl	163f0 <__aeabi_f2d>
   1320c:	4604      	mov	r4, r0
   1320e:	460d      	mov	r5, r1
   13210:	f64a 1314 	movw	r3, #43284	; 0xa914
   13214:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13218:	681b      	ldr	r3, [r3, #0]
   1321a:	6878      	ldr	r0, [r7, #4]
   1321c:	4619      	mov	r1, r3
   1321e:	f003 fc71 	bl	16b04 <__aeabi_fsub>
   13222:	4603      	mov	r3, r0
   13224:	4618      	mov	r0, r3
   13226:	f003 f8e3 	bl	163f0 <__aeabi_f2d>
   1322a:	4602      	mov	r2, r0
   1322c:	460b      	mov	r3, r1
   1322e:	4620      	mov	r0, r4
   13230:	4629      	mov	r1, r5
   13232:	f001 f929 	bl	14488 <pp_atan2>
   13236:	4602      	mov	r2, r0
   13238:	460b      	mov	r3, r1
   1323a:	a10b      	add	r1, pc, #44	; (adr r1, 13268 <fly_to_xy+0x98>)
   1323c:	e9d1 0100 	ldrd	r0, r1, [r1]
   13240:	f002 ff76 	bl	16130 <__aeabi_dsub>
   13244:	4602      	mov	r2, r0
   13246:	460b      	mov	r3, r1
   13248:	4610      	mov	r0, r2
   1324a:	4619      	mov	r1, r3
   1324c:	f003 fc06 	bl	16a5c <__aeabi_d2f>
   13250:	4602      	mov	r2, r0
   13252:	f24a 63a4 	movw	r3, #42660	; 0xa6a4
   13256:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1325a:	601a      	str	r2, [r3, #0]
}
   1325c:	3708      	adds	r7, #8
   1325e:	46bd      	mov	sp, r7
   13260:	bdb0      	pop	{r4, r5, r7, pc}
   13262:	bf00      	nop
   13264:	f3af 8000 	nop.w
   13268:	54442d18 	.word	0x54442d18
   1326c:	3ff921fb 	.word	0x3ff921fb

00013270 <fly_to>:

static void fly_to(uint8_t wp) { 
   13270:	b580      	push	{r7, lr}
   13272:	b082      	sub	sp, #8
   13274:	af00      	add	r7, sp, #0
   13276:	4603      	mov	r3, r0
   13278:	71fb      	strb	r3, [r7, #7]
  fly_to_xy(waypoints[wp].x, waypoints[wp].y);
   1327a:	79f9      	ldrb	r1, [r7, #7]
   1327c:	f240 120c 	movw	r2, #268	; 0x10c
   13280:	f2c2 0200 	movt	r2, #8192	; 0x2000
   13284:	460b      	mov	r3, r1
   13286:	005b      	lsls	r3, r3, #1
   13288:	440b      	add	r3, r1
   1328a:	009b      	lsls	r3, r3, #2
   1328c:	4413      	add	r3, r2
   1328e:	6818      	ldr	r0, [r3, #0]
   13290:	79f9      	ldrb	r1, [r7, #7]
   13292:	f240 120c 	movw	r2, #268	; 0x10c
   13296:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1329a:	460b      	mov	r3, r1
   1329c:	005b      	lsls	r3, r3, #1
   1329e:	440b      	add	r3, r1
   132a0:	009b      	lsls	r3, r3, #2
   132a2:	4413      	add	r3, r2
   132a4:	3304      	adds	r3, #4
   132a6:	681b      	ldr	r3, [r3, #0]
   132a8:	4619      	mov	r1, r3
   132aa:	f7ff ff91 	bl	131d0 <fly_to_xy>
}
   132ae:	3708      	adds	r7, #8
   132b0:	46bd      	mov	sp, r7
   132b2:	bd80      	pop	{r7, pc}

000132b4 <route_to>:

static float alpha, leg;
static void route_to(uint8_t _last_wp, uint8_t wp) 
{
   132b4:	b5b0      	push	{r4, r5, r7, lr}
   132b6:	b088      	sub	sp, #32
   132b8:	af00      	add	r7, sp, #0
   132ba:	4602      	mov	r2, r0
   132bc:	460b      	mov	r3, r1
   132be:	71fa      	strb	r2, [r7, #7]
   132c0:	71bb      	strb	r3, [r7, #6]
  float last_wp_x = waypoints[_last_wp].x;
   132c2:	79f9      	ldrb	r1, [r7, #7]
   132c4:	f240 120c 	movw	r2, #268	; 0x10c
   132c8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   132cc:	460b      	mov	r3, r1
   132ce:	005b      	lsls	r3, r3, #1
   132d0:	440b      	add	r3, r1
   132d2:	009b      	lsls	r3, r3, #2
   132d4:	4413      	add	r3, r2
   132d6:	681b      	ldr	r3, [r3, #0]
   132d8:	61fb      	str	r3, [r7, #28]
  float last_wp_y = waypoints[_last_wp].y;
   132da:	79f9      	ldrb	r1, [r7, #7]
   132dc:	f240 120c 	movw	r2, #268	; 0x10c
   132e0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   132e4:	460b      	mov	r3, r1
   132e6:	005b      	lsls	r3, r3, #1
   132e8:	440b      	add	r3, r1
   132ea:	009b      	lsls	r3, r3, #2
   132ec:	4413      	add	r3, r2
   132ee:	3304      	adds	r3, #4
   132f0:	681b      	ldr	r3, [r3, #0]
   132f2:	61bb      	str	r3, [r7, #24]
  float leg_x = waypoints[wp].x - last_wp_x;
   132f4:	79b9      	ldrb	r1, [r7, #6]
   132f6:	f240 120c 	movw	r2, #268	; 0x10c
   132fa:	f2c2 0200 	movt	r2, #8192	; 0x2000
   132fe:	460b      	mov	r3, r1
   13300:	005b      	lsls	r3, r3, #1
   13302:	440b      	add	r3, r1
   13304:	009b      	lsls	r3, r3, #2
   13306:	4413      	add	r3, r2
   13308:	681b      	ldr	r3, [r3, #0]
   1330a:	4618      	mov	r0, r3
   1330c:	69f9      	ldr	r1, [r7, #28]
   1330e:	f003 fbf9 	bl	16b04 <__aeabi_fsub>
   13312:	4603      	mov	r3, r0
   13314:	617b      	str	r3, [r7, #20]
  float leg_y = waypoints[wp].y - last_wp_y;
   13316:	79b9      	ldrb	r1, [r7, #6]
   13318:	f240 120c 	movw	r2, #268	; 0x10c
   1331c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   13320:	460b      	mov	r3, r1
   13322:	005b      	lsls	r3, r3, #1
   13324:	440b      	add	r3, r1
   13326:	009b      	lsls	r3, r3, #2
   13328:	4413      	add	r3, r2
   1332a:	3304      	adds	r3, #4
   1332c:	681b      	ldr	r3, [r3, #0]
   1332e:	4618      	mov	r0, r3
   13330:	69b9      	ldr	r1, [r7, #24]
   13332:	f003 fbe7 	bl	16b04 <__aeabi_fsub>
   13336:	4603      	mov	r3, r0
   13338:	613b      	str	r3, [r7, #16]
  float leg2 = leg_x * leg_x + leg_y * leg_y;
   1333a:	6978      	ldr	r0, [r7, #20]
   1333c:	6979      	ldr	r1, [r7, #20]
   1333e:	f003 fceb 	bl	16d18 <__aeabi_fmul>
   13342:	4603      	mov	r3, r0
   13344:	461c      	mov	r4, r3
   13346:	6938      	ldr	r0, [r7, #16]
   13348:	6939      	ldr	r1, [r7, #16]
   1334a:	f003 fce5 	bl	16d18 <__aeabi_fmul>
   1334e:	4603      	mov	r3, r0
   13350:	4620      	mov	r0, r4
   13352:	4619      	mov	r1, r3
   13354:	f003 fbd8 	bl	16b08 <__addsf3>
   13358:	4603      	mov	r3, r0
   1335a:	60fb      	str	r3, [r7, #12]
  alpha = ((estimator_x - last_wp_x) * leg_x + (estimator_y - last_wp_y) * leg_y) / leg2;
   1335c:	f64a 1314 	movw	r3, #43284	; 0xa914
   13360:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13364:	681b      	ldr	r3, [r3, #0]
   13366:	4618      	mov	r0, r3
   13368:	69f9      	ldr	r1, [r7, #28]
   1336a:	f003 fbcb 	bl	16b04 <__aeabi_fsub>
   1336e:	4603      	mov	r3, r0
   13370:	4618      	mov	r0, r3
   13372:	6979      	ldr	r1, [r7, #20]
   13374:	f003 fcd0 	bl	16d18 <__aeabi_fmul>
   13378:	4603      	mov	r3, r0
   1337a:	461c      	mov	r4, r3
   1337c:	f64a 1318 	movw	r3, #43288	; 0xa918
   13380:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13384:	681b      	ldr	r3, [r3, #0]
   13386:	4618      	mov	r0, r3
   13388:	69b9      	ldr	r1, [r7, #24]
   1338a:	f003 fbbb 	bl	16b04 <__aeabi_fsub>
   1338e:	4603      	mov	r3, r0
   13390:	4618      	mov	r0, r3
   13392:	6939      	ldr	r1, [r7, #16]
   13394:	f003 fcc0 	bl	16d18 <__aeabi_fmul>
   13398:	4603      	mov	r3, r0
   1339a:	4620      	mov	r0, r4
   1339c:	4619      	mov	r1, r3
   1339e:	f003 fbb3 	bl	16b08 <__addsf3>
   133a2:	4603      	mov	r3, r0
   133a4:	4618      	mov	r0, r3
   133a6:	68f9      	ldr	r1, [r7, #12]
   133a8:	f003 fd6a 	bl	16e80 <__aeabi_fdiv>
   133ac:	4603      	mov	r3, r0
   133ae:	461a      	mov	r2, r3
   133b0:	f24a 63fc 	movw	r3, #42748	; 0xa6fc
   133b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   133b8:	601a      	str	r2, [r3, #0]
  alpha = Max(alpha, 0.);
   133ba:	f24a 63fc 	movw	r3, #42748	; 0xa6fc
   133be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   133c2:	681b      	ldr	r3, [r3, #0]
   133c4:	4618      	mov	r0, r3
   133c6:	f04f 0100 	mov.w	r1, #0
   133ca:	f003 fe57 	bl	1707c <__aeabi_fcmpge>
   133ce:	4603      	mov	r3, r0
   133d0:	2b00      	cmp	r3, #0
   133d2:	d005      	beq.n	133e0 <route_to+0x12c>
   133d4:	f24a 63fc 	movw	r3, #42748	; 0xa6fc
   133d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   133dc:	681a      	ldr	r2, [r3, #0]
   133de:	e001      	b.n	133e4 <route_to+0x130>
   133e0:	f04f 0200 	mov.w	r2, #0
   133e4:	f24a 63fc 	movw	r3, #42748	; 0xa6fc
   133e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   133ec:	601a      	str	r2, [r3, #0]
  leg = sqrt(leg2);
   133ee:	68f8      	ldr	r0, [r7, #12]
   133f0:	f002 fffe 	bl	163f0 <__aeabi_f2d>
   133f4:	4602      	mov	r2, r0
   133f6:	460b      	mov	r3, r1
   133f8:	4610      	mov	r0, r2
   133fa:	4619      	mov	r1, r3
   133fc:	f001 f9f4 	bl	147e8 <pp_sqrt>
   13400:	4602      	mov	r2, r0
   13402:	460b      	mov	r3, r1
   13404:	4610      	mov	r0, r2
   13406:	4619      	mov	r1, r3
   13408:	f003 fb28 	bl	16a5c <__aeabi_d2f>
   1340c:	4602      	mov	r2, r0
   1340e:	f24a 7300 	movw	r3, #42752	; 0xa700
   13412:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13416:	601a      	str	r2, [r3, #0]
  alpha += Max(carrot / leg, 0.); /* carrot computed in approaching() */
   13418:	f24a 63fc 	movw	r3, #42748	; 0xa6fc
   1341c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13420:	681b      	ldr	r3, [r3, #0]
   13422:	4618      	mov	r0, r3
   13424:	f002 ffe4 	bl	163f0 <__aeabi_f2d>
   13428:	4604      	mov	r4, r0
   1342a:	460d      	mov	r5, r1
   1342c:	f24a 63f8 	movw	r3, #42744	; 0xa6f8
   13430:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13434:	681a      	ldr	r2, [r3, #0]
   13436:	f24a 7300 	movw	r3, #42752	; 0xa700
   1343a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1343e:	681b      	ldr	r3, [r3, #0]
   13440:	4610      	mov	r0, r2
   13442:	4619      	mov	r1, r3
   13444:	f003 fd1c 	bl	16e80 <__aeabi_fdiv>
   13448:	4603      	mov	r3, r0
   1344a:	4618      	mov	r0, r3
   1344c:	f04f 0100 	mov.w	r1, #0
   13450:	f003 fe14 	bl	1707c <__aeabi_fcmpge>
   13454:	4603      	mov	r3, r0
   13456:	2b00      	cmp	r3, #0
   13458:	d014      	beq.n	13484 <route_to+0x1d0>
   1345a:	f24a 63f8 	movw	r3, #42744	; 0xa6f8
   1345e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13462:	681a      	ldr	r2, [r3, #0]
   13464:	f24a 7300 	movw	r3, #42752	; 0xa700
   13468:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1346c:	681b      	ldr	r3, [r3, #0]
   1346e:	4610      	mov	r0, r2
   13470:	4619      	mov	r1, r3
   13472:	f003 fd05 	bl	16e80 <__aeabi_fdiv>
   13476:	4603      	mov	r3, r0
   13478:	4618      	mov	r0, r3
   1347a:	f002 ffb9 	bl	163f0 <__aeabi_f2d>
   1347e:	4602      	mov	r2, r0
   13480:	460b      	mov	r3, r1
   13482:	e003      	b.n	1348c <route_to+0x1d8>
   13484:	f04f 0200 	mov.w	r2, #0
   13488:	f04f 0300 	mov.w	r3, #0
   1348c:	4620      	mov	r0, r4
   1348e:	4629      	mov	r1, r5
   13490:	f002 fe50 	bl	16134 <__adddf3>
   13494:	4602      	mov	r2, r0
   13496:	460b      	mov	r3, r1
   13498:	4610      	mov	r0, r2
   1349a:	4619      	mov	r1, r3
   1349c:	f003 fade 	bl	16a5c <__aeabi_d2f>
   134a0:	4602      	mov	r2, r0
   134a2:	f24a 63fc 	movw	r3, #42748	; 0xa6fc
   134a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   134aa:	601a      	str	r2, [r3, #0]
  alpha = Min(1., alpha);
   134ac:	f24a 63fc 	movw	r3, #42748	; 0xa6fc
   134b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   134b4:	681b      	ldr	r3, [r3, #0]
   134b6:	4618      	mov	r0, r3
   134b8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   134bc:	f003 fdde 	bl	1707c <__aeabi_fcmpge>
   134c0:	4603      	mov	r3, r0
   134c2:	2b00      	cmp	r3, #0
   134c4:	d002      	beq.n	134cc <route_to+0x218>
   134c6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   134ca:	e004      	b.n	134d6 <route_to+0x222>
   134cc:	f24a 63fc 	movw	r3, #42748	; 0xa6fc
   134d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   134d4:	681a      	ldr	r2, [r3, #0]
   134d6:	f24a 63fc 	movw	r3, #42748	; 0xa6fc
   134da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   134de:	601a      	str	r2, [r3, #0]
  fly_to_xy(last_wp_x + alpha*leg_x, last_wp_y + alpha*leg_y);
   134e0:	f24a 63fc 	movw	r3, #42748	; 0xa6fc
   134e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   134e8:	681b      	ldr	r3, [r3, #0]
   134ea:	4618      	mov	r0, r3
   134ec:	6979      	ldr	r1, [r7, #20]
   134ee:	f003 fc13 	bl	16d18 <__aeabi_fmul>
   134f2:	4603      	mov	r3, r0
   134f4:	4618      	mov	r0, r3
   134f6:	69f9      	ldr	r1, [r7, #28]
   134f8:	f003 fb06 	bl	16b08 <__addsf3>
   134fc:	4603      	mov	r3, r0
   134fe:	461c      	mov	r4, r3
   13500:	f24a 63fc 	movw	r3, #42748	; 0xa6fc
   13504:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13508:	681b      	ldr	r3, [r3, #0]
   1350a:	4618      	mov	r0, r3
   1350c:	6939      	ldr	r1, [r7, #16]
   1350e:	f003 fc03 	bl	16d18 <__aeabi_fmul>
   13512:	4603      	mov	r3, r0
   13514:	4618      	mov	r0, r3
   13516:	69b9      	ldr	r1, [r7, #24]
   13518:	f003 faf6 	bl	16b08 <__addsf3>
   1351c:	4603      	mov	r3, r0
   1351e:	4620      	mov	r0, r4
   13520:	4619      	mov	r1, r3
   13522:	f7ff fe55 	bl	131d0 <fly_to_xy>
}
   13526:	3720      	adds	r7, #32
   13528:	46bd      	mov	sp, r7
   1352a:	bdb0      	pop	{r4, r5, r7, pc}

0001352c <compute_dist2_to_home>:
  float last_alt = waypoints[_last_wp].a;
  desired_altitude = last_alt + alpha * (waypoints[wp].a - last_alt);
  pre_climb = NOMINAL_AIRSPEED * (waypoints[wp].a - last_alt) / leg;
}*/

static inline void compute_dist2_to_home(void) {
   1352c:	b590      	push	{r4, r7, lr}
   1352e:	b083      	sub	sp, #12
   13530:	af00      	add	r7, sp, #0
  float ph_x = waypoints[WP_HOME].x - estimator_x;
   13532:	f240 130c 	movw	r3, #268	; 0x10c
   13536:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1353a:	681a      	ldr	r2, [r3, #0]
   1353c:	f64a 1314 	movw	r3, #43284	; 0xa914
   13540:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13544:	681b      	ldr	r3, [r3, #0]
   13546:	4610      	mov	r0, r2
   13548:	4619      	mov	r1, r3
   1354a:	f003 fadb 	bl	16b04 <__aeabi_fsub>
   1354e:	4603      	mov	r3, r0
   13550:	607b      	str	r3, [r7, #4]
  float ph_y = waypoints[WP_HOME].y - estimator_y;
   13552:	f240 130c 	movw	r3, #268	; 0x10c
   13556:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1355a:	685a      	ldr	r2, [r3, #4]
   1355c:	f64a 1318 	movw	r3, #43288	; 0xa918
   13560:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13564:	681b      	ldr	r3, [r3, #0]
   13566:	4610      	mov	r0, r2
   13568:	4619      	mov	r1, r3
   1356a:	f003 facb 	bl	16b04 <__aeabi_fsub>
   1356e:	4603      	mov	r3, r0
   13570:	603b      	str	r3, [r7, #0]
  dist2_to_home = ph_x*ph_x + ph_y *ph_y;
   13572:	6878      	ldr	r0, [r7, #4]
   13574:	6879      	ldr	r1, [r7, #4]
   13576:	f003 fbcf 	bl	16d18 <__aeabi_fmul>
   1357a:	4603      	mov	r3, r0
   1357c:	461c      	mov	r4, r3
   1357e:	6838      	ldr	r0, [r7, #0]
   13580:	6839      	ldr	r1, [r7, #0]
   13582:	f003 fbc9 	bl	16d18 <__aeabi_fmul>
   13586:	4603      	mov	r3, r0
   13588:	4620      	mov	r0, r4
   1358a:	4619      	mov	r1, r3
   1358c:	f003 fabc 	bl	16b08 <__addsf3>
   13590:	4603      	mov	r3, r0
   13592:	461a      	mov	r2, r3
   13594:	f24a 63f0 	movw	r3, #42736	; 0xa6f0
   13598:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1359c:	601a      	str	r2, [r3, #0]
  too_far_from_home = dist2_to_home > (MAX_DIST_FROM_HOME*MAX_DIST_FROM_HOME);
   1359e:	f24a 63f0 	movw	r3, #42736	; 0xa6f0
   135a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   135a6:	681b      	ldr	r3, [r3, #0]
   135a8:	2201      	movs	r2, #1
   135aa:	4614      	mov	r4, r2
   135ac:	4618      	mov	r0, r3
   135ae:	f44f 5110 	mov.w	r1, #9216	; 0x2400
   135b2:	f6c4 0174 	movt	r1, #18548	; 0x4874
   135b6:	f003 fd6b 	bl	17090 <__aeabi_fcmpgt>
   135ba:	4603      	mov	r3, r0
   135bc:	2b00      	cmp	r3, #0
   135be:	d101      	bne.n	135c4 <compute_dist2_to_home+0x98>
   135c0:	2300      	movs	r3, #0
   135c2:	461c      	mov	r4, r3
   135c4:	b2e3      	uxtb	r3, r4
   135c6:	461a      	mov	r2, r3
   135c8:	f24a 63f4 	movw	r3, #42740	; 0xa6f4
   135cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   135d0:	701a      	strb	r2, [r3, #0]
}
   135d2:	370c      	adds	r7, #12
   135d4:	46bd      	mov	sp, r7
   135d6:	bd90      	pop	{r4, r7, pc}

000135d8 <nav_home>:

void nav_home(void) {
   135d8:	b580      	push	{r7, lr}
   135da:	af00      	add	r7, sp, #0
  //Circle(WP_HOME, 50); /* FIXME: radius should be defined elsewhere */
  nav_pitch = 0.; /* Nominal speed */ 
   135dc:	f24a 63e4 	movw	r3, #42724	; 0xa6e4
   135e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   135e4:	f04f 0200 	mov.w	r2, #0
   135e8:	601a      	str	r2, [r3, #0]
  vertical_mode = VERTICAL_MODE_AUTO_ALT;
   135ea:	f24a 3345 	movw	r3, #41797	; 0xa345
   135ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   135f2:	2203      	movs	r2, #3
   135f4:	701a      	strb	r2, [r3, #0]
  desired_altitude = GROUND_ALT+50;
   135f6:	f240 1308 	movw	r3, #264	; 0x108
   135fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   135fe:	f04f 0200 	mov.w	r2, #0
   13602:	f2c4 322f 	movt	r2, #17199	; 0x432f
   13606:	601a      	str	r2, [r3, #0]
  compute_dist2_to_home();
   13608:	f7ff ff90 	bl	1352c <compute_dist2_to_home>
  dist2_to_wp = dist2_to_home;
   1360c:	f24a 63f0 	movw	r3, #42736	; 0xa6f0
   13610:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13614:	681a      	ldr	r2, [r3, #0]
   13616:	f24a 63ec 	movw	r3, #42732	; 0xa6ec
   1361a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1361e:	601a      	str	r2, [r3, #0]
}
   13620:	bd80      	pop	{r7, pc}
   13622:	bf00      	nop

00013624 <nav_update>:

void nav_update(void) {
   13624:	b580      	push	{r7, lr}
   13626:	af00      	add	r7, sp, #0
  compute_dist2_to_home();
   13628:	f7ff ff80 	bl	1352c <compute_dist2_to_home>

  auto_nav();
   1362c:	f7fd fc0c 	bl	10e48 <auto_nav>
}
   13630:	bd80      	pop	{r7, pc}
   13632:	bf00      	nop

00013634 <nav_init>:


void nav_init(void) {
   13634:	b480      	push	{r7}
   13636:	af00      	add	r7, sp, #0
  nav_block = 0;
   13638:	f24a 63b9 	movw	r3, #42681	; 0xa6b9
   1363c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13640:	2200      	movs	r2, #0
   13642:	701a      	strb	r2, [r3, #0]
  nav_stage = 0;
   13644:	f24a 63b8 	movw	r3, #42680	; 0xa6b8
   13648:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1364c:	2200      	movs	r2, #0
   1364e:	701a      	strb	r2, [r3, #0]
}
   13650:	46bd      	mov	sp, r7
   13652:	f85d 7b04 	ldr.w	r7, [sp], #4
   13656:	4770      	bx	lr

00013658 <uart0_transmit>:

static uint8_t           tx_head1; /* next free in buf */
static volatile uint8_t  tx_tail1; /* next char to send */
static uint8_t           tx_buf1[ TX_BUF_SIZE ];

void uart0_transmit( unsigned char data ) {
   13658:	b480      	push	{r7}
   1365a:	b083      	sub	sp, #12
   1365c:	af00      	add	r7, sp, #0
   1365e:	4603      	mov	r3, r0
   13660:	71fb      	strb	r3, [r7, #7]
  if (UCSR0B & _BV(TXCIE)) {
   13662:	f242 030a 	movw	r3, #8202	; 0x200a
   13666:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1366a:	781b      	ldrb	r3, [r3, #0]
   1366c:	b2db      	uxtb	r3, r3
   1366e:	f003 0340 	and.w	r3, r3, #64	; 0x40
   13672:	2b00      	cmp	r3, #0
   13674:	d028      	beq.n	136c8 <uart0_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail0 == tx_head0 + 1) { /* BUF_SIZE = 256 */
   13676:	f24a 730d 	movw	r3, #42765	; 0xa70d
   1367a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1367e:	781b      	ldrb	r3, [r3, #0]
   13680:	b2db      	uxtb	r3, r3
   13682:	461a      	mov	r2, r3
   13684:	f24a 730c 	movw	r3, #42764	; 0xa70c
   13688:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1368c:	781b      	ldrb	r3, [r3, #0]
   1368e:	3301      	adds	r3, #1
   13690:	429a      	cmp	r2, r3
   13692:	d100      	bne.n	13696 <uart0_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   13694:	e02c      	b.n	136f0 <uart0_transmit+0x98>
    }
    tx_buf0[tx_head0] = data;
   13696:	f24a 730c 	movw	r3, #42764	; 0xa70c
   1369a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1369e:	781b      	ldrb	r3, [r3, #0]
   136a0:	461a      	mov	r2, r3
   136a2:	f24a 7310 	movw	r3, #42768	; 0xa710
   136a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   136aa:	79f9      	ldrb	r1, [r7, #7]
   136ac:	5499      	strb	r1, [r3, r2]
    tx_head0++; /* BUF_SIZE = 256 */
   136ae:	f24a 730c 	movw	r3, #42764	; 0xa70c
   136b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   136b6:	781b      	ldrb	r3, [r3, #0]
   136b8:	3301      	adds	r3, #1
   136ba:	b2da      	uxtb	r2, r3
   136bc:	f24a 730c 	movw	r3, #42764	; 0xa70c
   136c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   136c4:	701a      	strb	r2, [r3, #0]
   136c6:	e013      	b.n	136f0 <uart0_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR0 = data;
   136c8:	f242 030c 	movw	r3, #8204	; 0x200c
   136cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   136d0:	79fa      	ldrb	r2, [r7, #7]
   136d2:	701a      	strb	r2, [r3, #0]
    sbi(UCSR0B, TXCIE);
   136d4:	f242 030a 	movw	r3, #8202	; 0x200a
   136d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   136dc:	f242 020a 	movw	r2, #8202	; 0x200a
   136e0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   136e4:	7812      	ldrb	r2, [r2, #0]
   136e6:	b2d2      	uxtb	r2, r2
   136e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   136ec:	b2d2      	uxtb	r2, r2
   136ee:	701a      	strb	r2, [r3, #0]
  }
}
   136f0:	370c      	adds	r7, #12
   136f2:	46bd      	mov	sp, r7
   136f4:	f85d 7b04 	ldr.w	r7, [sp], #4
   136f8:	4770      	bx	lr
   136fa:	bf00      	nop

000136fc <uart1_transmit>:

void uart1_transmit( unsigned char data ) {
   136fc:	b480      	push	{r7}
   136fe:	b083      	sub	sp, #12
   13700:	af00      	add	r7, sp, #0
   13702:	4603      	mov	r3, r0
   13704:	71fb      	strb	r3, [r7, #7]
  if (UCSR1B & _BV(TXCIE)) {
   13706:	f242 039a 	movw	r3, #8346	; 0x209a
   1370a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1370e:	781b      	ldrb	r3, [r3, #0]
   13710:	b2db      	uxtb	r3, r3
   13712:	f003 0340 	and.w	r3, r3, #64	; 0x40
   13716:	2b00      	cmp	r3, #0
   13718:	d028      	beq.n	1376c <uart1_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail1 == tx_head1 + 1) { /* BUF_SIZE = 256 */
   1371a:	f64a 0311 	movw	r3, #43025	; 0xa811
   1371e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13722:	781b      	ldrb	r3, [r3, #0]
   13724:	b2db      	uxtb	r3, r3
   13726:	461a      	mov	r2, r3
   13728:	f64a 0310 	movw	r3, #43024	; 0xa810
   1372c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13730:	781b      	ldrb	r3, [r3, #0]
   13732:	3301      	adds	r3, #1
   13734:	429a      	cmp	r2, r3
   13736:	d100      	bne.n	1373a <uart1_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   13738:	e02c      	b.n	13794 <uart1_transmit+0x98>
    }
    tx_buf1[tx_head1] = data;
   1373a:	f64a 0310 	movw	r3, #43024	; 0xa810
   1373e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13742:	781b      	ldrb	r3, [r3, #0]
   13744:	461a      	mov	r2, r3
   13746:	f64a 0314 	movw	r3, #43028	; 0xa814
   1374a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1374e:	79f9      	ldrb	r1, [r7, #7]
   13750:	5499      	strb	r1, [r3, r2]
    tx_head1++; /* BUF_SIZE = 256 */
   13752:	f64a 0310 	movw	r3, #43024	; 0xa810
   13756:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1375a:	781b      	ldrb	r3, [r3, #0]
   1375c:	3301      	adds	r3, #1
   1375e:	b2da      	uxtb	r2, r3
   13760:	f64a 0310 	movw	r3, #43024	; 0xa810
   13764:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13768:	701a      	strb	r2, [r3, #0]
   1376a:	e013      	b.n	13794 <uart1_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR1 = data;
   1376c:	f242 039c 	movw	r3, #8348	; 0x209c
   13770:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13774:	79fa      	ldrb	r2, [r7, #7]
   13776:	701a      	strb	r2, [r3, #0]
    sbi(UCSR1B, TXCIE);
   13778:	f242 039a 	movw	r3, #8346	; 0x209a
   1377c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13780:	f242 029a 	movw	r2, #8346	; 0x209a
   13784:	f2c2 0200 	movt	r2, #8192	; 0x2000
   13788:	7812      	ldrb	r2, [r2, #0]
   1378a:	b2d2      	uxtb	r2, r2
   1378c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   13790:	b2d2      	uxtb	r2, r2
   13792:	701a      	strb	r2, [r3, #0]
  }
}
   13794:	370c      	adds	r7, #12
   13796:	46bd      	mov	sp, r7
   13798:	f85d 7b04 	ldr.w	r7, [sp], #4
   1379c:	4770      	bx	lr
   1379e:	bf00      	nop

000137a0 <uart0_print_string>:


void uart0_print_string(const uint8_t* s) {
   137a0:	b580      	push	{r7, lr}
   137a2:	b084      	sub	sp, #16
   137a4:	af00      	add	r7, sp, #0
   137a6:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
   137a8:	2300      	movs	r3, #0
   137aa:	73fb      	strb	r3, [r7, #15]
  while (s[i]) {
   137ac:	e009      	b.n	137c2 <uart0_print_string+0x22>
    uart0_transmit(s[i]);
   137ae:	7bfb      	ldrb	r3, [r7, #15]
   137b0:	687a      	ldr	r2, [r7, #4]
   137b2:	4413      	add	r3, r2
   137b4:	781b      	ldrb	r3, [r3, #0]
   137b6:	4618      	mov	r0, r3
   137b8:	f7ff ff4e 	bl	13658 <uart0_transmit>
    i++;
   137bc:	7bfb      	ldrb	r3, [r7, #15]
   137be:	3301      	adds	r3, #1
   137c0:	73fb      	strb	r3, [r7, #15]
}


void uart0_print_string(const uint8_t* s) {
  uint8_t i = 0;
  while (s[i]) {
   137c2:	7bfb      	ldrb	r3, [r7, #15]
   137c4:	687a      	ldr	r2, [r7, #4]
   137c6:	4413      	add	r3, r2
   137c8:	781b      	ldrb	r3, [r3, #0]
   137ca:	2b00      	cmp	r3, #0
   137cc:	d1ef      	bne.n	137ae <uart0_print_string+0xe>
    uart0_transmit(s[i]);
    i++;
  }
}
   137ce:	3710      	adds	r7, #16
   137d0:	46bd      	mov	sp, r7
   137d2:	bd80      	pop	{r7, pc}

000137d4 <uart0_print_hex>:

void uart0_print_hex(const uint8_t c) {
   137d4:	b590      	push	{r4, r7, lr}
   137d6:	b089      	sub	sp, #36	; 0x24
   137d8:	af00      	add	r7, sp, #0
   137da:	4603      	mov	r3, r0
   137dc:	71fb      	strb	r3, [r7, #7]
  const uint8_t hex[16] = { '0', '1', '2', '3', '4', '5', '6', '7', 
   137de:	f247 3318 	movw	r3, #29464	; 0x7318
   137e2:	f2c0 0301 	movt	r3, #1
   137e6:	f107 040c 	add.w	r4, r7, #12
   137ea:	6818      	ldr	r0, [r3, #0]
   137ec:	6859      	ldr	r1, [r3, #4]
   137ee:	689a      	ldr	r2, [r3, #8]
   137f0:	68db      	ldr	r3, [r3, #12]
   137f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
  uint8_t high = (c & 0xF0)>>4;
   137f4:	79fb      	ldrb	r3, [r7, #7]
   137f6:	091b      	lsrs	r3, r3, #4
   137f8:	77fb      	strb	r3, [r7, #31]
  uint8_t low  = c & 0x0F;
   137fa:	79fb      	ldrb	r3, [r7, #7]
   137fc:	f003 030f 	and.w	r3, r3, #15
   13800:	77bb      	strb	r3, [r7, #30]
    /*
    *Added by SunnyBeike
    * */
    high = 15;
   13802:	230f      	movs	r3, #15
   13804:	77fb      	strb	r3, [r7, #31]
    low = 15;
   13806:	230f      	movs	r3, #15
   13808:	77bb      	strb	r3, [r7, #30]
    /*
    *End
    * */
    uart0_transmit(hex[high]);
   1380a:	7ffb      	ldrb	r3, [r7, #31]
   1380c:	f107 0220 	add.w	r2, r7, #32
   13810:	4413      	add	r3, r2
   13812:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   13816:	4618      	mov	r0, r3
   13818:	f7ff ff1e 	bl	13658 <uart0_transmit>
  uart0_transmit(hex[low]);
   1381c:	7fbb      	ldrb	r3, [r7, #30]
   1381e:	f107 0220 	add.w	r2, r7, #32
   13822:	4413      	add	r3, r2
   13824:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   13828:	4618      	mov	r0, r3
   1382a:	f7ff ff15 	bl	13658 <uart0_transmit>
}
   1382e:	3724      	adds	r7, #36	; 0x24
   13830:	46bd      	mov	sp, r7
   13832:	bd90      	pop	{r4, r7, pc}

00013834 <__vector_20>:


SIGNAL(SIG_UART0_TRANS) {
   13834:	b480      	push	{r7}
   13836:	af00      	add	r7, sp, #0
  if (tx_head0 == tx_tail0) {
   13838:	f24a 730c 	movw	r3, #42764	; 0xa70c
   1383c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13840:	781a      	ldrb	r2, [r3, #0]
   13842:	f24a 730d 	movw	r3, #42765	; 0xa70d
   13846:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1384a:	781b      	ldrb	r3, [r3, #0]
   1384c:	b2db      	uxtb	r3, r3
   1384e:	429a      	cmp	r2, r3
   13850:	d10e      	bne.n	13870 <__vector_20+0x3c>
    /* Nothing more to send */
    cbi(UCSR0B, TXCIE); /* disable interrupt */
   13852:	f242 030a 	movw	r3, #8202	; 0x200a
   13856:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1385a:	f242 020a 	movw	r2, #8202	; 0x200a
   1385e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   13862:	7812      	ldrb	r2, [r2, #0]
   13864:	b2d2      	uxtb	r2, r2
   13866:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   1386a:	b2d2      	uxtb	r2, r2
   1386c:	701a      	strb	r2, [r3, #0]
   1386e:	e01d      	b.n	138ac <__vector_20+0x78>
  } else {
    UDR0 = tx_buf0[tx_tail0];
   13870:	f242 030c 	movw	r3, #8204	; 0x200c
   13874:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13878:	f24a 720d 	movw	r2, #42765	; 0xa70d
   1387c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   13880:	7812      	ldrb	r2, [r2, #0]
   13882:	b2d2      	uxtb	r2, r2
   13884:	4611      	mov	r1, r2
   13886:	f24a 7210 	movw	r2, #42768	; 0xa710
   1388a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1388e:	5c52      	ldrb	r2, [r2, r1]
   13890:	701a      	strb	r2, [r3, #0]
    tx_tail0++; /* warning tx_buf_len is 256 */
   13892:	f24a 730d 	movw	r3, #42765	; 0xa70d
   13896:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1389a:	781b      	ldrb	r3, [r3, #0]
   1389c:	b2db      	uxtb	r3, r3
   1389e:	3301      	adds	r3, #1
   138a0:	b2da      	uxtb	r2, r3
   138a2:	f24a 730d 	movw	r3, #42765	; 0xa70d
   138a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   138aa:	701a      	strb	r2, [r3, #0]
  }
}
   138ac:	46bd      	mov	sp, r7
   138ae:	f85d 7b04 	ldr.w	r7, [sp], #4
   138b2:	4770      	bx	lr

000138b4 <__vector_32>:

SIGNAL(SIG_UART1_TRANS) {
   138b4:	b480      	push	{r7}
   138b6:	af00      	add	r7, sp, #0
  if (tx_head1 == tx_tail1) {
   138b8:	f64a 0310 	movw	r3, #43024	; 0xa810
   138bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   138c0:	781a      	ldrb	r2, [r3, #0]
   138c2:	f64a 0311 	movw	r3, #43025	; 0xa811
   138c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   138ca:	781b      	ldrb	r3, [r3, #0]
   138cc:	b2db      	uxtb	r3, r3
   138ce:	429a      	cmp	r2, r3
   138d0:	d10e      	bne.n	138f0 <__vector_32+0x3c>
    /* Nothing more to send */
    cbi(UCSR1B, TXCIE); /* disable interrupt */
   138d2:	f242 039a 	movw	r3, #8346	; 0x209a
   138d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   138da:	f242 029a 	movw	r2, #8346	; 0x209a
   138de:	f2c2 0200 	movt	r2, #8192	; 0x2000
   138e2:	7812      	ldrb	r2, [r2, #0]
   138e4:	b2d2      	uxtb	r2, r2
   138e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   138ea:	b2d2      	uxtb	r2, r2
   138ec:	701a      	strb	r2, [r3, #0]
   138ee:	e01d      	b.n	1392c <__vector_32+0x78>
  } else {
    UDR1 = tx_buf1[tx_tail1];
   138f0:	f242 039c 	movw	r3, #8348	; 0x209c
   138f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   138f8:	f64a 0211 	movw	r2, #43025	; 0xa811
   138fc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   13900:	7812      	ldrb	r2, [r2, #0]
   13902:	b2d2      	uxtb	r2, r2
   13904:	4611      	mov	r1, r2
   13906:	f64a 0214 	movw	r2, #43028	; 0xa814
   1390a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1390e:	5c52      	ldrb	r2, [r2, r1]
   13910:	701a      	strb	r2, [r3, #0]
    tx_tail1++; /* warning tx_buf_len is 256 */
   13912:	f64a 0311 	movw	r3, #43025	; 0xa811
   13916:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1391a:	781b      	ldrb	r3, [r3, #0]
   1391c:	b2db      	uxtb	r3, r3
   1391e:	3301      	adds	r3, #1
   13920:	b2da      	uxtb	r2, r3
   13922:	f64a 0311 	movw	r3, #43025	; 0xa811
   13926:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1392a:	701a      	strb	r2, [r3, #0]
  }
}
   1392c:	46bd      	mov	sp, r7
   1392e:	f85d 7b04 	ldr.w	r7, [sp], #4
   13932:	4770      	bx	lr

00013934 <uart0_init>:

void uart0_init( void ) {
   13934:	b480      	push	{r7}
   13936:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRR0H = 0; 
   13938:	f242 0390 	movw	r3, #8336	; 0x2090
   1393c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13940:	2200      	movs	r2, #0
   13942:	701a      	strb	r2, [r3, #0]
  UBRR0L = 25; // 38.4
   13944:	f242 0309 	movw	r3, #8201	; 0x2009
   13948:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1394c:	2219      	movs	r2, #25
   1394e:	701a      	strb	r2, [r3, #0]
  // UBRR0L = 103; //9600
  /* single speed */ 
  UCSR0A = 0; 
   13950:	f242 030b 	movw	r3, #8203	; 0x200b
   13954:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13958:	2200      	movs	r2, #0
   1395a:	701a      	strb	r2, [r3, #0]
  /* Enable receiver and transmitter */ 
  UCSR0B = _BV(RXEN) | _BV(TXEN);
   1395c:	f242 030a 	movw	r3, #8202	; 0x200a
   13960:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13964:	2218      	movs	r2, #24
   13966:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSR0C = _BV(UCSZ1) | _BV(UCSZ0);
   13968:	f242 0395 	movw	r3, #8341	; 0x2095
   1396c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13970:	2206      	movs	r2, #6
   13972:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi(UCSR0B, RXCIE ); 
   13974:	f242 030a 	movw	r3, #8202	; 0x200a
   13978:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1397c:	f242 020a 	movw	r2, #8202	; 0x200a
   13980:	f2c2 0200 	movt	r2, #8192	; 0x2000
   13984:	7812      	ldrb	r2, [r2, #0]
   13986:	b2d2      	uxtb	r2, r2
   13988:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1398c:	b2d2      	uxtb	r2, r2
   1398e:	701a      	strb	r2, [r3, #0]
}
   13990:	46bd      	mov	sp, r7
   13992:	f85d 7b04 	ldr.w	r7, [sp], #4
   13996:	4770      	bx	lr

00013998 <uart1_init>:

void uart1_init( void ) {
   13998:	b480      	push	{r7}
   1399a:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRR1H = 0; 
   1399c:	f242 0398 	movw	r3, #8344	; 0x2098
   139a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   139a4:	2200      	movs	r2, #0
   139a6:	701a      	strb	r2, [r3, #0]
  UBRR1L = 25; // 38.4
   139a8:	f242 0399 	movw	r3, #8345	; 0x2099
   139ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   139b0:	2219      	movs	r2, #25
   139b2:	701a      	strb	r2, [r3, #0]
  // UBRR1L = 103; //9600


  /* single speed */ 
  UCSR1A = 0; 
   139b4:	f242 039b 	movw	r3, #8347	; 0x209b
   139b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   139bc:	2200      	movs	r2, #0
   139be:	701a      	strb	r2, [r3, #0]
  /* Enable receiver and transmitter */ 
  UCSR1B = _BV(RXEN) | _BV(TXEN);
   139c0:	f242 039a 	movw	r3, #8346	; 0x209a
   139c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   139c8:	2218      	movs	r2, #24
   139ca:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSR1C = _BV(UCSZ1) | _BV(UCSZ0);
   139cc:	f242 039d 	movw	r3, #8349	; 0x209d
   139d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   139d4:	2206      	movs	r2, #6
   139d6:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi(UCSR1B, RXCIE ); 
   139d8:	f242 039a 	movw	r3, #8346	; 0x209a
   139dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   139e0:	f242 029a 	movw	r2, #8346	; 0x209a
   139e4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   139e8:	7812      	ldrb	r2, [r2, #0]
   139ea:	b2d2      	uxtb	r2, r2
   139ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
   139f0:	b2d2      	uxtb	r2, r2
   139f2:	701a      	strb	r2, [r3, #0]
}
   139f4:	46bd      	mov	sp, r7
   139f6:	f85d 7b04 	ldr.w	r7, [sp], #4
   139fa:	4770      	bx	lr
   139fc:	0000      	movs	r0, r0
	...

00013a00 <estimator_init>:
  estimator_theta_dot = theta_dot; \
}

inline void estimator_update_lls( void );

void estimator_init( void ) {
   13a00:	b480      	push	{r7}
   13a02:	af00      	add	r7, sp, #0

  EstimatorSetPos (0., 0., 0.);
   13a04:	f64a 1314 	movw	r3, #43284	; 0xa914
   13a08:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a0c:	f04f 0200 	mov.w	r2, #0
   13a10:	601a      	str	r2, [r3, #0]
   13a12:	f64a 1318 	movw	r3, #43288	; 0xa918
   13a16:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a1a:	f04f 0200 	mov.w	r2, #0
   13a1e:	601a      	str	r2, [r3, #0]
   13a20:	f64a 131c 	movw	r3, #43292	; 0xa91c
   13a24:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a28:	f04f 0200 	mov.w	r2, #0
   13a2c:	601a      	str	r2, [r3, #0]

  EstimatorSetAtt (0., 0., 0);
   13a2e:	f64a 1320 	movw	r3, #43296	; 0xa920
   13a32:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a36:	f04f 0200 	mov.w	r2, #0
   13a3a:	601a      	str	r2, [r3, #0]
   13a3c:	f64a 1324 	movw	r3, #43300	; 0xa924
   13a40:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a44:	f04f 0200 	mov.w	r2, #0
   13a48:	601a      	str	r2, [r3, #0]
   13a4a:	f64a 1328 	movw	r3, #43304	; 0xa928
   13a4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a52:	f04f 0200 	mov.w	r2, #0
   13a56:	601a      	str	r2, [r3, #0]

  EstimatorSetSpeedPol ( 0., 0., 0.);
   13a58:	f64a 134c 	movw	r3, #43340	; 0xa94c
   13a5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a60:	f04f 0200 	mov.w	r2, #0
   13a64:	601a      	str	r2, [r3, #0]
   13a66:	f64a 1350 	movw	r3, #43344	; 0xa950
   13a6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a6e:	f04f 0200 	mov.w	r2, #0
   13a72:	601a      	str	r2, [r3, #0]
   13a74:	f64a 1334 	movw	r3, #43316	; 0xa934
   13a78:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a7c:	f04f 0200 	mov.w	r2, #0
   13a80:	601a      	str	r2, [r3, #0]

  EstimatorSetRotSpeed (0., 0., 0.);
   13a82:	f64a 1338 	movw	r3, #43320	; 0xa938
   13a86:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a8a:	f04f 0200 	mov.w	r2, #0
   13a8e:	601a      	str	r2, [r3, #0]
   13a90:	f64a 133c 	movw	r3, #43324	; 0xa93c
   13a94:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a98:	f04f 0200 	mov.w	r2, #0
   13a9c:	601a      	str	r2, [r3, #0]
   13a9e:	f64a 1340 	movw	r3, #43328	; 0xa940
   13aa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13aa6:	f04f 0200 	mov.w	r2, #0
   13aaa:	601a      	str	r2, [r3, #0]

  estimator_flight_time = 0;
   13aac:	f64a 1344 	movw	r3, #43332	; 0xa944
   13ab0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ab4:	2200      	movs	r2, #0
   13ab6:	801a      	strh	r2, [r3, #0]

  estimator_rad_of_ir = ir_rad_of_ir;
   13ab8:	f240 03dc 	movw	r3, #220	; 0xdc
   13abc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ac0:	681a      	ldr	r2, [r3, #0]
   13ac2:	f64a 1354 	movw	r3, #43348	; 0xa954
   13ac6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13aca:	601a      	str	r2, [r3, #0]
}
   13acc:	46bd      	mov	sp, r7
   13ace:	f85d 7b04 	ldr.w	r7, [sp], #4
   13ad2:	4770      	bx	lr

00013ad4 <estimator_update_state_infrared>:

#define EstimatorIrGainIsCorrect() (TRUE)

void estimator_update_state_infrared( void ) {
   13ad4:	b580      	push	{r7, lr}
   13ad6:	b082      	sub	sp, #8
   13ad8:	af00      	add	r7, sp, #0
  float rad_of_ir = (ir_estim_mode == IR_ESTIM_MODE_ON && EstimatorIrGainIsCorrect()) ? 
   13ada:	f240 03d0 	movw	r3, #208	; 0xd0
   13ade:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ae2:	781b      	ldrb	r3, [r3, #0]
    estimator_rad_of_ir : ir_rad_of_ir;
   13ae4:	2b01      	cmp	r3, #1
   13ae6:	d105      	bne.n	13af4 <estimator_update_state_infrared+0x20>
   13ae8:	f64a 1354 	movw	r3, #43348	; 0xa954
   13aec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13af0:	681b      	ldr	r3, [r3, #0]
   13af2:	e004      	b.n	13afe <estimator_update_state_infrared+0x2a>
   13af4:	f240 03dc 	movw	r3, #220	; 0xdc
   13af8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13afc:	681b      	ldr	r3, [r3, #0]
}

#define EstimatorIrGainIsCorrect() (TRUE)

void estimator_update_state_infrared( void ) {
  float rad_of_ir = (ir_estim_mode == IR_ESTIM_MODE_ON && EstimatorIrGainIsCorrect()) ? 
   13afe:	607b      	str	r3, [r7, #4]
    estimator_rad_of_ir : ir_rad_of_ir;
  estimator_phi  = rad_of_ir * ir_roll;
   13b00:	f24a 6300 	movw	r3, #42496	; 0xa600
   13b04:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b08:	881b      	ldrh	r3, [r3, #0]
   13b0a:	b21b      	sxth	r3, r3
   13b0c:	4618      	mov	r0, r3
   13b0e:	f003 f8af 	bl	16c70 <__aeabi_i2f>
   13b12:	4603      	mov	r3, r0
   13b14:	4618      	mov	r0, r3
   13b16:	6879      	ldr	r1, [r7, #4]
   13b18:	f003 f8fe 	bl	16d18 <__aeabi_fmul>
   13b1c:	4603      	mov	r3, r0
   13b1e:	461a      	mov	r2, r3
   13b20:	f64a 1320 	movw	r3, #43296	; 0xa920
   13b24:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b28:	601a      	str	r2, [r3, #0]

  estimator_theta = rad_of_ir * ir_pitch;
   13b2a:	f24a 6302 	movw	r3, #42498	; 0xa602
   13b2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b32:	881b      	ldrh	r3, [r3, #0]
   13b34:	b21b      	sxth	r3, r3
   13b36:	4618      	mov	r0, r3
   13b38:	f003 f89a 	bl	16c70 <__aeabi_i2f>
   13b3c:	4603      	mov	r3, r0
   13b3e:	4618      	mov	r0, r3
   13b40:	6879      	ldr	r1, [r7, #4]
   13b42:	f003 f8e9 	bl	16d18 <__aeabi_fmul>
   13b46:	4603      	mov	r3, r0
   13b48:	461a      	mov	r2, r3
   13b4a:	f64a 1328 	movw	r3, #43304	; 0xa928
   13b4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b52:	601a      	str	r2, [r3, #0]
}
   13b54:	3708      	adds	r7, #8
   13b56:	46bd      	mov	sp, r7
   13b58:	bd80      	pop	{r7, pc}
   13b5a:	bf00      	nop

00013b5c <estimator_update_ir_estim>:
#define RHO 0.999 /* The higher, the slower the estimation is changing */

#define g 9.81


void estimator_update_ir_estim( void ) {
   13b5c:	b5b0      	push	{r4, r5, r7, lr}
   13b5e:	b084      	sub	sp, #16
   13b60:	af00      	add	r7, sp, #0
  static bool_t initialized = FALSE;
  static float sum_xy, sum_xx;
  float absphi;
  float init_ir2;

  if (initialized) 
   13b62:	f64a 1360 	movw	r3, #43360	; 0xa960
   13b66:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b6a:	781b      	ldrb	r3, [r3, #0]
   13b6c:	2b00      	cmp	r3, #0
   13b6e:	f000 81e8 	beq.w	13f42 <estimator_update_ir_estim+0x3e6>
  {
    float dt = gps_ftow - last_t;
   13b72:	f24a 43d0 	movw	r3, #42192	; 0xa4d0
   13b76:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b7a:	681a      	ldr	r2, [r3, #0]
   13b7c:	f64a 1364 	movw	r3, #43364	; 0xa964
   13b80:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b84:	681b      	ldr	r3, [r3, #0]
   13b86:	4610      	mov	r0, r2
   13b88:	4619      	mov	r1, r3
   13b8a:	f002 ffbb 	bl	16b04 <__aeabi_fsub>
   13b8e:	4603      	mov	r3, r0
   13b90:	60bb      	str	r3, [r7, #8]
    if (dt > 0.1) { // Against division by zero
   13b92:	68b8      	ldr	r0, [r7, #8]
   13b94:	f002 fc2c 	bl	163f0 <__aeabi_f2d>
   13b98:	4602      	mov	r2, r0
   13b9a:	460b      	mov	r3, r1
   13b9c:	4610      	mov	r0, r2
   13b9e:	4619      	mov	r1, r3
   13ba0:	a385      	add	r3, pc, #532	; (adr r3, 13db8 <estimator_update_ir_estim+0x25c>)
   13ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
   13ba6:	f002 ff07 	bl	169b8 <__aeabi_dcmpgt>
   13baa:	4603      	mov	r3, r0
   13bac:	2b00      	cmp	r3, #0
   13bae:	d100      	bne.n	13bb2 <estimator_update_ir_estim+0x56>
   13bb0:	e219      	b.n	13fe6 <estimator_update_ir_estim+0x48a>
      float phi = (estimator_hspeed_dir - last_hspeed_dir); 
   13bb2:	f64a 1350 	movw	r3, #43344	; 0xa950
   13bb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13bba:	681a      	ldr	r2, [r3, #0]
   13bbc:	f64a 1368 	movw	r3, #43368	; 0xa968
   13bc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13bc4:	681b      	ldr	r3, [r3, #0]
   13bc6:	4610      	mov	r0, r2
   13bc8:	4619      	mov	r1, r3
   13bca:	f002 ff9b 	bl	16b04 <__aeabi_fsub>
   13bce:	4603      	mov	r3, r0
   13bd0:	60fb      	str	r3, [r7, #12]
      NORM_RAD_ANGLE(phi);
   13bd2:	e013      	b.n	13bfc <estimator_update_ir_estim+0xa0>
   13bd4:	68f8      	ldr	r0, [r7, #12]
   13bd6:	f002 fc0b 	bl	163f0 <__aeabi_f2d>
   13bda:	4602      	mov	r2, r0
   13bdc:	460b      	mov	r3, r1
   13bde:	4610      	mov	r0, r2
   13be0:	4619      	mov	r1, r3
   13be2:	a377      	add	r3, pc, #476	; (adr r3, 13dc0 <estimator_update_ir_estim+0x264>)
   13be4:	e9d3 2300 	ldrd	r2, r3, [r3]
   13be8:	f002 faa2 	bl	16130 <__aeabi_dsub>
   13bec:	4602      	mov	r2, r0
   13bee:	460b      	mov	r3, r1
   13bf0:	4610      	mov	r0, r2
   13bf2:	4619      	mov	r1, r3
   13bf4:	f002 ff32 	bl	16a5c <__aeabi_d2f>
   13bf8:	4603      	mov	r3, r0
   13bfa:	60fb      	str	r3, [r7, #12]
   13bfc:	68f8      	ldr	r0, [r7, #12]
   13bfe:	f002 fbf7 	bl	163f0 <__aeabi_f2d>
   13c02:	4602      	mov	r2, r0
   13c04:	460b      	mov	r3, r1
   13c06:	4610      	mov	r0, r2
   13c08:	4619      	mov	r1, r3
   13c0a:	a36f      	add	r3, pc, #444	; (adr r3, 13dc8 <estimator_update_ir_estim+0x26c>)
   13c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
   13c10:	f002 fed2 	bl	169b8 <__aeabi_dcmpgt>
   13c14:	4603      	mov	r3, r0
   13c16:	2b00      	cmp	r3, #0
   13c18:	d1dc      	bne.n	13bd4 <estimator_update_ir_estim+0x78>
   13c1a:	e013      	b.n	13c44 <estimator_update_ir_estim+0xe8>
   13c1c:	68f8      	ldr	r0, [r7, #12]
   13c1e:	f002 fbe7 	bl	163f0 <__aeabi_f2d>
   13c22:	4602      	mov	r2, r0
   13c24:	460b      	mov	r3, r1
   13c26:	4610      	mov	r0, r2
   13c28:	4619      	mov	r1, r3
   13c2a:	a365      	add	r3, pc, #404	; (adr r3, 13dc0 <estimator_update_ir_estim+0x264>)
   13c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
   13c30:	f002 fa80 	bl	16134 <__adddf3>
   13c34:	4602      	mov	r2, r0
   13c36:	460b      	mov	r3, r1
   13c38:	4610      	mov	r0, r2
   13c3a:	4619      	mov	r1, r3
   13c3c:	f002 ff0e 	bl	16a5c <__aeabi_d2f>
   13c40:	4603      	mov	r3, r0
   13c42:	60fb      	str	r3, [r7, #12]
   13c44:	68f8      	ldr	r0, [r7, #12]
   13c46:	f002 fbd3 	bl	163f0 <__aeabi_f2d>
   13c4a:	4602      	mov	r2, r0
   13c4c:	460b      	mov	r3, r1
   13c4e:	4610      	mov	r0, r2
   13c50:	4619      	mov	r1, r3
   13c52:	a35f      	add	r3, pc, #380	; (adr r3, 13dd0 <estimator_update_ir_estim+0x274>)
   13c54:	e9d3 2300 	ldrd	r2, r3, [r3]
   13c58:	f002 fe90 	bl	1697c <__aeabi_dcmplt>
   13c5c:	4603      	mov	r3, r0
   13c5e:	2b00      	cmp	r3, #0
   13c60:	d1dc      	bne.n	13c1c <estimator_update_ir_estim+0xc0>
      phi = phi/dt*NOMINAL_AIRSPEED/g; /* tan linearized */
   13c62:	68f8      	ldr	r0, [r7, #12]
   13c64:	68b9      	ldr	r1, [r7, #8]
   13c66:	f003 f90b 	bl	16e80 <__aeabi_fdiv>
   13c6a:	4603      	mov	r3, r0
   13c6c:	4618      	mov	r0, r3
   13c6e:	f002 fbbf 	bl	163f0 <__aeabi_f2d>
   13c72:	4602      	mov	r2, r0
   13c74:	460b      	mov	r3, r1
   13c76:	4610      	mov	r0, r2
   13c78:	4619      	mov	r1, r3
   13c7a:	f04f 0200 	mov.w	r2, #0
   13c7e:	f04f 0300 	mov.w	r3, #0
   13c82:	f2c4 0324 	movt	r3, #16420	; 0x4024
   13c86:	f002 fc07 	bl	16498 <__aeabi_dmul>
   13c8a:	4602      	mov	r2, r0
   13c8c:	460b      	mov	r3, r1
   13c8e:	4610      	mov	r0, r2
   13c90:	4619      	mov	r1, r3
   13c92:	a351      	add	r3, pc, #324	; (adr r3, 13dd8 <estimator_update_ir_estim+0x27c>)
   13c94:	e9d3 2300 	ldrd	r2, r3, [r3]
   13c98:	f002 fd28 	bl	166ec <__aeabi_ddiv>
   13c9c:	4602      	mov	r2, r0
   13c9e:	460b      	mov	r3, r1
   13ca0:	4610      	mov	r0, r2
   13ca2:	4619      	mov	r1, r3
   13ca4:	f002 feda 	bl	16a5c <__aeabi_d2f>
   13ca8:	4603      	mov	r3, r0
   13caa:	60fb      	str	r3, [r7, #12]
      NORM_RAD_ANGLE(phi);
   13cac:	e013      	b.n	13cd6 <estimator_update_ir_estim+0x17a>
   13cae:	68f8      	ldr	r0, [r7, #12]
   13cb0:	f002 fb9e 	bl	163f0 <__aeabi_f2d>
   13cb4:	4602      	mov	r2, r0
   13cb6:	460b      	mov	r3, r1
   13cb8:	4610      	mov	r0, r2
   13cba:	4619      	mov	r1, r3
   13cbc:	a340      	add	r3, pc, #256	; (adr r3, 13dc0 <estimator_update_ir_estim+0x264>)
   13cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
   13cc2:	f002 fa35 	bl	16130 <__aeabi_dsub>
   13cc6:	4602      	mov	r2, r0
   13cc8:	460b      	mov	r3, r1
   13cca:	4610      	mov	r0, r2
   13ccc:	4619      	mov	r1, r3
   13cce:	f002 fec5 	bl	16a5c <__aeabi_d2f>
   13cd2:	4603      	mov	r3, r0
   13cd4:	60fb      	str	r3, [r7, #12]
   13cd6:	68f8      	ldr	r0, [r7, #12]
   13cd8:	f002 fb8a 	bl	163f0 <__aeabi_f2d>
   13cdc:	4602      	mov	r2, r0
   13cde:	460b      	mov	r3, r1
   13ce0:	4610      	mov	r0, r2
   13ce2:	4619      	mov	r1, r3
   13ce4:	a338      	add	r3, pc, #224	; (adr r3, 13dc8 <estimator_update_ir_estim+0x26c>)
   13ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
   13cea:	f002 fe65 	bl	169b8 <__aeabi_dcmpgt>
   13cee:	4603      	mov	r3, r0
   13cf0:	2b00      	cmp	r3, #0
   13cf2:	d1dc      	bne.n	13cae <estimator_update_ir_estim+0x152>
   13cf4:	e013      	b.n	13d1e <estimator_update_ir_estim+0x1c2>
   13cf6:	68f8      	ldr	r0, [r7, #12]
   13cf8:	f002 fb7a 	bl	163f0 <__aeabi_f2d>
   13cfc:	4602      	mov	r2, r0
   13cfe:	460b      	mov	r3, r1
   13d00:	4610      	mov	r0, r2
   13d02:	4619      	mov	r1, r3
   13d04:	a32e      	add	r3, pc, #184	; (adr r3, 13dc0 <estimator_update_ir_estim+0x264>)
   13d06:	e9d3 2300 	ldrd	r2, r3, [r3]
   13d0a:	f002 fa13 	bl	16134 <__adddf3>
   13d0e:	4602      	mov	r2, r0
   13d10:	460b      	mov	r3, r1
   13d12:	4610      	mov	r0, r2
   13d14:	4619      	mov	r1, r3
   13d16:	f002 fea1 	bl	16a5c <__aeabi_d2f>
   13d1a:	4603      	mov	r3, r0
   13d1c:	60fb      	str	r3, [r7, #12]
   13d1e:	68f8      	ldr	r0, [r7, #12]
   13d20:	f002 fb66 	bl	163f0 <__aeabi_f2d>
   13d24:	4602      	mov	r2, r0
   13d26:	460b      	mov	r3, r1
   13d28:	4610      	mov	r0, r2
   13d2a:	4619      	mov	r1, r3
   13d2c:	a328      	add	r3, pc, #160	; (adr r3, 13dd0 <estimator_update_ir_estim+0x274>)
   13d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
   13d32:	f002 fe23 	bl	1697c <__aeabi_dcmplt>
   13d36:	4603      	mov	r3, r0
   13d38:	2b00      	cmp	r3, #0
   13d3a:	d1dc      	bne.n	13cf6 <estimator_update_ir_estim+0x19a>
      estimator_ir = (float)ir_roll;
   13d3c:	f24a 6300 	movw	r3, #42496	; 0xa600
   13d40:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d44:	881b      	ldrh	r3, [r3, #0]
   13d46:	b21b      	sxth	r3, r3
   13d48:	4618      	mov	r0, r3
   13d4a:	f002 ff91 	bl	16c70 <__aeabi_i2f>
   13d4e:	4602      	mov	r2, r0
   13d50:	f64a 1358 	movw	r3, #43352	; 0xa958
   13d54:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d58:	601a      	str	r2, [r3, #0]
      estimator_rad = phi;
   13d5a:	f64a 135c 	movw	r3, #43356	; 0xa95c
   13d5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d62:	68fa      	ldr	r2, [r7, #12]
   13d64:	601a      	str	r2, [r3, #0]
      absphi = fabs(phi);
   13d66:	68f8      	ldr	r0, [r7, #12]
   13d68:	f04f 0100 	mov.w	r1, #0
   13d6c:	f003 f972 	bl	17054 <__aeabi_fcmplt>
   13d70:	4603      	mov	r3, r0
   13d72:	2b00      	cmp	r3, #0
   13d74:	d003      	beq.n	13d7e <estimator_update_ir_estim+0x222>
   13d76:	68fb      	ldr	r3, [r7, #12]
   13d78:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
   13d7c:	e000      	b.n	13d80 <estimator_update_ir_estim+0x224>
   13d7e:	68fb      	ldr	r3, [r7, #12]
   13d80:	607b      	str	r3, [r7, #4]
      if (absphi < 1.0 && absphi > 0.05 && (- ir_contrast/2 < ir_roll && ir_roll < ir_contrast/2)) {
   13d82:	6878      	ldr	r0, [r7, #4]
   13d84:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   13d88:	f003 f964 	bl	17054 <__aeabi_fcmplt>
   13d8c:	4603      	mov	r3, r0
   13d8e:	2b00      	cmp	r3, #0
   13d90:	d100      	bne.n	13d94 <estimator_update_ir_estim+0x238>
   13d92:	e128      	b.n	13fe6 <estimator_update_ir_estim+0x48a>
   13d94:	6878      	ldr	r0, [r7, #4]
   13d96:	f002 fb2b 	bl	163f0 <__aeabi_f2d>
   13d9a:	4602      	mov	r2, r0
   13d9c:	460b      	mov	r3, r1
   13d9e:	4610      	mov	r0, r2
   13da0:	4619      	mov	r1, r3
   13da2:	a30f      	add	r3, pc, #60	; (adr r3, 13de0 <estimator_update_ir_estim+0x284>)
   13da4:	e9d3 2300 	ldrd	r2, r3, [r3]
   13da8:	f002 fe06 	bl	169b8 <__aeabi_dcmpgt>
   13dac:	4603      	mov	r3, r0
   13dae:	2b00      	cmp	r3, #0
   13db0:	d11a      	bne.n	13de8 <estimator_update_ir_estim+0x28c>
   13db2:	e118      	b.n	13fe6 <estimator_update_ir_estim+0x48a>
   13db4:	f3af 8000 	nop.w
   13db8:	9999999a 	.word	0x9999999a
   13dbc:	3fb99999 	.word	0x3fb99999
   13dc0:	54442d18 	.word	0x54442d18
   13dc4:	401921fb 	.word	0x401921fb
   13dc8:	54442d18 	.word	0x54442d18
   13dcc:	400921fb 	.word	0x400921fb
   13dd0:	54442d18 	.word	0x54442d18
   13dd4:	c00921fb 	.word	0xc00921fb
   13dd8:	51eb851f 	.word	0x51eb851f
   13ddc:	40239eb8 	.word	0x40239eb8
   13de0:	9999999a 	.word	0x9999999a
   13de4:	3fa99999 	.word	0x3fa99999
   13de8:	f240 03d4 	movw	r3, #212	; 0xd4
   13dec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13df0:	881b      	ldrh	r3, [r3, #0]
   13df2:	b21b      	sxth	r3, r3
   13df4:	425b      	negs	r3, r3
   13df6:	0fda      	lsrs	r2, r3, #31
   13df8:	4413      	add	r3, r2
   13dfa:	105b      	asrs	r3, r3, #1
   13dfc:	461a      	mov	r2, r3
   13dfe:	f24a 6300 	movw	r3, #42496	; 0xa600
   13e02:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13e06:	881b      	ldrh	r3, [r3, #0]
   13e08:	b21b      	sxth	r3, r3
   13e0a:	429a      	cmp	r2, r3
   13e0c:	f280 8098 	bge.w	13f40 <estimator_update_ir_estim+0x3e4>
   13e10:	f240 03d4 	movw	r3, #212	; 0xd4
   13e14:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13e18:	881b      	ldrh	r3, [r3, #0]
   13e1a:	b21b      	sxth	r3, r3
   13e1c:	0fda      	lsrs	r2, r3, #31
   13e1e:	4413      	add	r3, r2
   13e20:	105b      	asrs	r3, r3, #1
   13e22:	b29a      	uxth	r2, r3
   13e24:	f24a 6300 	movw	r3, #42496	; 0xa600
   13e28:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13e2c:	881b      	ldrh	r3, [r3, #0]
   13e2e:	b212      	sxth	r2, r2
   13e30:	b21b      	sxth	r3, r3
   13e32:	429a      	cmp	r2, r3
   13e34:	f340 8084 	ble.w	13f40 <estimator_update_ir_estim+0x3e4>
	sum_xy = estimator_rad * estimator_ir + RHO * sum_xy;
   13e38:	f64a 135c 	movw	r3, #43356	; 0xa95c
   13e3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13e40:	681a      	ldr	r2, [r3, #0]
   13e42:	f64a 1358 	movw	r3, #43352	; 0xa958
   13e46:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13e4a:	681b      	ldr	r3, [r3, #0]
   13e4c:	4610      	mov	r0, r2
   13e4e:	4619      	mov	r1, r3
   13e50:	f002 ff62 	bl	16d18 <__aeabi_fmul>
   13e54:	4603      	mov	r3, r0
   13e56:	4618      	mov	r0, r3
   13e58:	f002 faca 	bl	163f0 <__aeabi_f2d>
   13e5c:	4604      	mov	r4, r0
   13e5e:	460d      	mov	r5, r1
   13e60:	f64a 136c 	movw	r3, #43372	; 0xa96c
   13e64:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13e68:	681b      	ldr	r3, [r3, #0]
   13e6a:	4618      	mov	r0, r3
   13e6c:	f002 fac0 	bl	163f0 <__aeabi_f2d>
   13e70:	4602      	mov	r2, r0
   13e72:	460b      	mov	r3, r1
   13e74:	4610      	mov	r0, r2
   13e76:	4619      	mov	r1, r3
   13e78:	a367      	add	r3, pc, #412	; (adr r3, 14018 <estimator_update_ir_estim+0x4bc>)
   13e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
   13e7e:	f002 fb0b 	bl	16498 <__aeabi_dmul>
   13e82:	4602      	mov	r2, r0
   13e84:	460b      	mov	r3, r1
   13e86:	4620      	mov	r0, r4
   13e88:	4629      	mov	r1, r5
   13e8a:	f002 f953 	bl	16134 <__adddf3>
   13e8e:	4602      	mov	r2, r0
   13e90:	460b      	mov	r3, r1
   13e92:	4610      	mov	r0, r2
   13e94:	4619      	mov	r1, r3
   13e96:	f002 fde1 	bl	16a5c <__aeabi_d2f>
   13e9a:	4602      	mov	r2, r0
   13e9c:	f64a 136c 	movw	r3, #43372	; 0xa96c
   13ea0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ea4:	601a      	str	r2, [r3, #0]
	sum_xx = estimator_ir * estimator_ir + RHO * sum_xx;
   13ea6:	f64a 1358 	movw	r3, #43352	; 0xa958
   13eaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13eae:	681a      	ldr	r2, [r3, #0]
   13eb0:	f64a 1358 	movw	r3, #43352	; 0xa958
   13eb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13eb8:	681b      	ldr	r3, [r3, #0]
   13eba:	4610      	mov	r0, r2
   13ebc:	4619      	mov	r1, r3
   13ebe:	f002 ff2b 	bl	16d18 <__aeabi_fmul>
   13ec2:	4603      	mov	r3, r0
   13ec4:	4618      	mov	r0, r3
   13ec6:	f002 fa93 	bl	163f0 <__aeabi_f2d>
   13eca:	4604      	mov	r4, r0
   13ecc:	460d      	mov	r5, r1
   13ece:	f64a 1370 	movw	r3, #43376	; 0xa970
   13ed2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ed6:	681b      	ldr	r3, [r3, #0]
   13ed8:	4618      	mov	r0, r3
   13eda:	f002 fa89 	bl	163f0 <__aeabi_f2d>
   13ede:	4602      	mov	r2, r0
   13ee0:	460b      	mov	r3, r1
   13ee2:	4610      	mov	r0, r2
   13ee4:	4619      	mov	r1, r3
   13ee6:	a34c      	add	r3, pc, #304	; (adr r3, 14018 <estimator_update_ir_estim+0x4bc>)
   13ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
   13eec:	f002 fad4 	bl	16498 <__aeabi_dmul>
   13ef0:	4602      	mov	r2, r0
   13ef2:	460b      	mov	r3, r1
   13ef4:	4620      	mov	r0, r4
   13ef6:	4629      	mov	r1, r5
   13ef8:	f002 f91c 	bl	16134 <__adddf3>
   13efc:	4602      	mov	r2, r0
   13efe:	460b      	mov	r3, r1
   13f00:	4610      	mov	r0, r2
   13f02:	4619      	mov	r1, r3
   13f04:	f002 fdaa 	bl	16a5c <__aeabi_d2f>
   13f08:	4602      	mov	r2, r0
   13f0a:	f64a 1370 	movw	r3, #43376	; 0xa970
   13f0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13f12:	601a      	str	r2, [r3, #0]
	else if (result > IR_RAD_OF_IR_MAX_VALUE)
	  estimator_rad_of_ir = IR_RAD_OF_IR_MAX_VALUE;
	else
	  estimator_rad_of_ir = result;
#else
	  estimator_rad_of_ir = sum_xy / sum_xx;
   13f14:	f64a 136c 	movw	r3, #43372	; 0xa96c
   13f18:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13f1c:	681a      	ldr	r2, [r3, #0]
   13f1e:	f64a 1370 	movw	r3, #43376	; 0xa970
   13f22:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13f26:	681b      	ldr	r3, [r3, #0]
   13f28:	4610      	mov	r0, r2
   13f2a:	4619      	mov	r1, r3
   13f2c:	f002 ffa8 	bl	16e80 <__aeabi_fdiv>
   13f30:	4603      	mov	r3, r0
   13f32:	461a      	mov	r2, r3
   13f34:	f64a 1354 	movw	r3, #43348	; 0xa954
   13f38:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13f3c:	601a      	str	r2, [r3, #0]
   13f3e:	e052      	b.n	13fe6 <estimator_update_ir_estim+0x48a>
   13f40:	e051      	b.n	13fe6 <estimator_update_ir_estim+0x48a>
#endif
      }
    } 
  } else {
    initialized = TRUE;
   13f42:	f64a 1360 	movw	r3, #43360	; 0xa960
   13f46:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13f4a:	2201      	movs	r2, #1
   13f4c:	701a      	strb	r2, [r3, #0]
    init_ir2 = ir_contrast;
   13f4e:	f240 03d4 	movw	r3, #212	; 0xd4
   13f52:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13f56:	881b      	ldrh	r3, [r3, #0]
   13f58:	b21b      	sxth	r3, r3
   13f5a:	4618      	mov	r0, r3
   13f5c:	f002 fe88 	bl	16c70 <__aeabi_i2f>
   13f60:	4603      	mov	r3, r0
   13f62:	603b      	str	r3, [r7, #0]
    init_ir2 = init_ir2*init_ir2;
   13f64:	6838      	ldr	r0, [r7, #0]
   13f66:	6839      	ldr	r1, [r7, #0]
   13f68:	f002 fed6 	bl	16d18 <__aeabi_fmul>
   13f6c:	4603      	mov	r3, r0
   13f6e:	603b      	str	r3, [r7, #0]
    sum_xy = INIT_WEIGHT * estimator_rad_of_ir * init_ir2;
   13f70:	f64a 1354 	movw	r3, #43348	; 0xa954
   13f74:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13f78:	681b      	ldr	r3, [r3, #0]
   13f7a:	4618      	mov	r0, r3
   13f7c:	f002 fa38 	bl	163f0 <__aeabi_f2d>
   13f80:	4602      	mov	r2, r0
   13f82:	460b      	mov	r3, r1
   13f84:	4610      	mov	r0, r2
   13f86:	4619      	mov	r1, r3
   13f88:	f04f 0200 	mov.w	r2, #0
   13f8c:	f04f 0300 	mov.w	r3, #0
   13f90:	f2c4 0359 	movt	r3, #16473	; 0x4059
   13f94:	f002 fa80 	bl	16498 <__aeabi_dmul>
   13f98:	4602      	mov	r2, r0
   13f9a:	460b      	mov	r3, r1
   13f9c:	4614      	mov	r4, r2
   13f9e:	461d      	mov	r5, r3
   13fa0:	6838      	ldr	r0, [r7, #0]
   13fa2:	f002 fa25 	bl	163f0 <__aeabi_f2d>
   13fa6:	4602      	mov	r2, r0
   13fa8:	460b      	mov	r3, r1
   13faa:	4620      	mov	r0, r4
   13fac:	4629      	mov	r1, r5
   13fae:	f002 fa73 	bl	16498 <__aeabi_dmul>
   13fb2:	4602      	mov	r2, r0
   13fb4:	460b      	mov	r3, r1
   13fb6:	4610      	mov	r0, r2
   13fb8:	4619      	mov	r1, r3
   13fba:	f002 fd4f 	bl	16a5c <__aeabi_d2f>
   13fbe:	4602      	mov	r2, r0
   13fc0:	f64a 136c 	movw	r3, #43372	; 0xa96c
   13fc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13fc8:	601a      	str	r2, [r3, #0]
    sum_xx = INIT_WEIGHT * init_ir2;
   13fca:	6838      	ldr	r0, [r7, #0]
   13fcc:	f04f 0100 	mov.w	r1, #0
   13fd0:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   13fd4:	f002 fea0 	bl	16d18 <__aeabi_fmul>
   13fd8:	4603      	mov	r3, r0
   13fda:	461a      	mov	r2, r3
   13fdc:	f64a 1370 	movw	r3, #43376	; 0xa970
   13fe0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13fe4:	601a      	str	r2, [r3, #0]
  }

  last_hspeed_dir = estimator_hspeed_dir;
   13fe6:	f64a 1350 	movw	r3, #43344	; 0xa950
   13fea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13fee:	681a      	ldr	r2, [r3, #0]
   13ff0:	f64a 1368 	movw	r3, #43368	; 0xa968
   13ff4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ff8:	601a      	str	r2, [r3, #0]
  last_t = gps_ftow;
   13ffa:	f24a 43d0 	movw	r3, #42192	; 0xa4d0
   13ffe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14002:	681a      	ldr	r2, [r3, #0]
   14004:	f64a 1364 	movw	r3, #43364	; 0xa964
   14008:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1400c:	601a      	str	r2, [r3, #0]
}
   1400e:	3710      	adds	r7, #16
   14010:	46bd      	mov	sp, r7
   14012:	bdb0      	pop	{r4, r5, r7, pc}
   14014:	f3af 8000 	nop.w
   14018:	d916872b 	.word	0xd916872b
   1401c:	3feff7ce 	.word	0x3feff7ce

00014020 <estimator_update_state_gps>:


void estimator_update_state_gps( void ) {
   14020:	b580      	push	{r7, lr}
   14022:	af00      	add	r7, sp, #0
  if (GPS_FIX_VALID(gps_mode)) {
   14024:	f24a 43f4 	movw	r3, #42228	; 0xa4f4
   14028:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1402c:	781b      	ldrb	r3, [r3, #0]
   1402e:	f003 0320 	and.w	r3, r3, #32
   14032:	2b00      	cmp	r3, #0
   14034:	d044      	beq.n	140c0 <estimator_update_state_gps+0xa0>
    EstimatorSetPos(gps_east, gps_north, gps_falt);
   14036:	f24a 43ec 	movw	r3, #42220	; 0xa4ec
   1403a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1403e:	681a      	ldr	r2, [r3, #0]
   14040:	f64a 1314 	movw	r3, #43284	; 0xa914
   14044:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14048:	601a      	str	r2, [r3, #0]
   1404a:	f24a 43f0 	movw	r3, #42224	; 0xa4f0
   1404e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14052:	681a      	ldr	r2, [r3, #0]
   14054:	f64a 1318 	movw	r3, #43288	; 0xa918
   14058:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1405c:	601a      	str	r2, [r3, #0]
   1405e:	f24a 43d4 	movw	r3, #42196	; 0xa4d4
   14062:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14066:	681a      	ldr	r2, [r3, #0]
   14068:	f64a 131c 	movw	r3, #43292	; 0xa91c
   1406c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14070:	601a      	str	r2, [r3, #0]
    EstimatorSetSpeedPol(gps_fspeed, gps_fcourse, gps_fclimb);
   14072:	f24a 43d8 	movw	r3, #42200	; 0xa4d8
   14076:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1407a:	681a      	ldr	r2, [r3, #0]
   1407c:	f64a 134c 	movw	r3, #43340	; 0xa94c
   14080:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14084:	601a      	str	r2, [r3, #0]
   14086:	f24a 43e0 	movw	r3, #42208	; 0xa4e0
   1408a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1408e:	681a      	ldr	r2, [r3, #0]
   14090:	f64a 1350 	movw	r3, #43344	; 0xa950
   14094:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14098:	601a      	str	r2, [r3, #0]
   1409a:	f24a 43dc 	movw	r3, #42204	; 0xa4dc
   1409e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   140a2:	681a      	ldr	r2, [r3, #0]
   140a4:	f64a 1334 	movw	r3, #43316	; 0xa934
   140a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   140ac:	601a      	str	r2, [r3, #0]
    
    if (estimator_flight_time)
   140ae:	f64a 1344 	movw	r3, #43332	; 0xa944
   140b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   140b6:	881b      	ldrh	r3, [r3, #0]
   140b8:	2b00      	cmp	r3, #0
   140ba:	d001      	beq.n	140c0 <estimator_update_state_gps+0xa0>
      estimator_update_ir_estim();
   140bc:	f7ff fd4e 	bl	13b5c <estimator_update_ir_estim>
  }
}
   140c0:	bd80      	pop	{r7, pc}
   140c2:	bf00      	nop

000140c4 <estimator_propagate_state>:

void estimator_propagate_state( void ) {
   140c4:	b480      	push	{r7}
   140c6:	af00      	add	r7, sp, #0
  
}
   140c8:	46bd      	mov	sp, r7
   140ca:	f85d 7b04 	ldr.w	r7, [sp], #4
   140ce:	4770      	bx	lr

000140d0 <inflight_calib>:
/* Please DO NOT EDIT */

#ifndef INFLIGHT_CALIB_H
#define INFLIGHT_CALIB_H 

void inflight_calib(bool_t mode_changed) {
   140d0:	b5b0      	push	{r4, r5, r7, lr}
   140d2:	b082      	sub	sp, #8
   140d4:	af00      	add	r7, sp, #0
   140d6:	4603      	mov	r3, r0
   140d8:	71fb      	strb	r3, [r7, #7]
  if (pprz_mode == PPRZ_MODE_AUTO1) {
   140da:	f24a 3344 	movw	r3, #41796	; 0xa344
   140de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   140e2:	781b      	ldrb	r3, [r3, #0]
   140e4:	2b01      	cmp	r3, #1
   140e6:	f040 80e0 	bne.w	142aa <inflight_calib+0x1da>
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   140ea:	f64a 1374 	movw	r3, #43380	; 0xa974
   140ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   140f2:	781b      	ldrb	r3, [r3, #0]
   140f4:	2b02      	cmp	r3, #2
   140f6:	d168      	bne.n	141ca <inflight_calib+0xfa>
      static int16_t ir_pitch_neutral_init;
      if (mode_changed) {
   140f8:	79fb      	ldrb	r3, [r7, #7]
   140fa:	2b00      	cmp	r3, #0
   140fc:	d013      	beq.n	14126 <inflight_calib+0x56>
        ir_pitch_neutral_init = ir_pitch_neutral;
   140fe:	f240 03d8 	movw	r3, #216	; 0xd8
   14102:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14106:	881a      	ldrh	r2, [r3, #0]
   14108:	f64a 137a 	movw	r3, #43386	; 0xa97a
   1410c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14110:	801a      	strh	r2, [r3, #0]
        slider1_init = from_fbw.channels[RADIO_GAIN1];
   14112:	f24a 4368 	movw	r3, #42088	; 0xa468
   14116:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1411a:	895a      	ldrh	r2, [r3, #10]
   1411c:	f64a 1376 	movw	r3, #43382	; 0xa976
   14120:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14124:	801a      	strh	r2, [r3, #0]
      }
      ir_pitch_neutral = ParamValInt16(ir_pitch_neutral_init, 60.000000, from_fbw.channels[RADIO_GAIN1], slider1_init);
   14126:	f24a 4368 	movw	r3, #42088	; 0xa468
   1412a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1412e:	895b      	ldrh	r3, [r3, #10]
   14130:	b21a      	sxth	r2, r3
   14132:	f64a 1376 	movw	r3, #43382	; 0xa976
   14136:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1413a:	881b      	ldrh	r3, [r3, #0]
   1413c:	b21b      	sxth	r3, r3
   1413e:	1ad3      	subs	r3, r2, r3
   14140:	4618      	mov	r0, r3
   14142:	f002 fd95 	bl	16c70 <__aeabi_i2f>
   14146:	4603      	mov	r3, r0
   14148:	4618      	mov	r0, r3
   1414a:	f002 f951 	bl	163f0 <__aeabi_f2d>
   1414e:	4602      	mov	r2, r0
   14150:	460b      	mov	r3, r1
   14152:	4610      	mov	r0, r2
   14154:	4619      	mov	r1, r3
   14156:	f04f 0200 	mov.w	r2, #0
   1415a:	f04f 0300 	mov.w	r3, #0
   1415e:	f2c4 034e 	movt	r3, #16462	; 0x404e
   14162:	f002 f999 	bl	16498 <__aeabi_dmul>
   14166:	4602      	mov	r2, r0
   14168:	460b      	mov	r3, r1
   1416a:	4610      	mov	r0, r2
   1416c:	4619      	mov	r1, r3
   1416e:	f04f 0200 	mov.w	r2, #0
   14172:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   14176:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   1417a:	f002 fab7 	bl	166ec <__aeabi_ddiv>
   1417e:	4602      	mov	r2, r0
   14180:	460b      	mov	r3, r1
   14182:	4610      	mov	r0, r2
   14184:	4619      	mov	r1, r3
   14186:	f002 fc21 	bl	169cc <__aeabi_d2iz>
   1418a:	4603      	mov	r3, r0
   1418c:	b29b      	uxth	r3, r3
   1418e:	b29a      	uxth	r2, r3
   14190:	f64a 137a 	movw	r3, #43386	; 0xa97a
   14194:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14198:	881b      	ldrh	r3, [r3, #0]
   1419a:	b29b      	uxth	r3, r3
   1419c:	4413      	add	r3, r2
   1419e:	b29b      	uxth	r3, r3
   141a0:	b29a      	uxth	r2, r3
   141a2:	f240 03d8 	movw	r3, #216	; 0xd8
   141a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   141aa:	801a      	strh	r2, [r3, #0]
      slider_1_val = (float)ir_pitch_neutral;
   141ac:	f240 03d8 	movw	r3, #216	; 0xd8
   141b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   141b4:	881b      	ldrh	r3, [r3, #0]
   141b6:	b21b      	sxth	r3, r3
   141b8:	4618      	mov	r0, r3
   141ba:	f002 fd59 	bl	16c70 <__aeabi_i2f>
   141be:	4602      	mov	r2, r0
   141c0:	f24a 3350 	movw	r3, #41808	; 0xa350
   141c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   141c8:	601a      	str	r2, [r3, #0]
    }
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   141ca:	f64a 1374 	movw	r3, #43380	; 0xa974
   141ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   141d2:	781b      	ldrb	r3, [r3, #0]
   141d4:	2b02      	cmp	r3, #2
   141d6:	d168      	bne.n	142aa <inflight_calib+0x1da>
      static int16_t ir_roll_neutral_init;
      if (mode_changed) {
   141d8:	79fb      	ldrb	r3, [r7, #7]
   141da:	2b00      	cmp	r3, #0
   141dc:	d013      	beq.n	14206 <inflight_calib+0x136>
        ir_roll_neutral_init = ir_roll_neutral;
   141de:	f240 03d6 	movw	r3, #214	; 0xd6
   141e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   141e6:	881a      	ldrh	r2, [r3, #0]
   141e8:	f64a 137c 	movw	r3, #43388	; 0xa97c
   141ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   141f0:	801a      	strh	r2, [r3, #0]
        slider2_init = from_fbw.channels[RADIO_GAIN2];
   141f2:	f24a 4368 	movw	r3, #42088	; 0xa468
   141f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   141fa:	899a      	ldrh	r2, [r3, #12]
   141fc:	f64a 1378 	movw	r3, #43384	; 0xa978
   14200:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14204:	801a      	strh	r2, [r3, #0]
      }
      ir_roll_neutral = ParamValInt16(ir_roll_neutral_init, -60.000000, from_fbw.channels[RADIO_GAIN2], slider2_init);
   14206:	f24a 4368 	movw	r3, #42088	; 0xa468
   1420a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1420e:	899b      	ldrh	r3, [r3, #12]
   14210:	b21a      	sxth	r2, r3
   14212:	f64a 1378 	movw	r3, #43384	; 0xa978
   14216:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1421a:	881b      	ldrh	r3, [r3, #0]
   1421c:	b21b      	sxth	r3, r3
   1421e:	1ad3      	subs	r3, r2, r3
   14220:	4618      	mov	r0, r3
   14222:	f002 fd25 	bl	16c70 <__aeabi_i2f>
   14226:	4603      	mov	r3, r0
   14228:	4618      	mov	r0, r3
   1422a:	f002 f8e1 	bl	163f0 <__aeabi_f2d>
   1422e:	4602      	mov	r2, r0
   14230:	460b      	mov	r3, r1
   14232:	4610      	mov	r0, r2
   14234:	4619      	mov	r1, r3
   14236:	f04f 0200 	mov.w	r2, #0
   1423a:	f04f 0300 	mov.w	r3, #0
   1423e:	f2cc 034e 	movt	r3, #49230	; 0xc04e
   14242:	f002 f929 	bl	16498 <__aeabi_dmul>
   14246:	4602      	mov	r2, r0
   14248:	460b      	mov	r3, r1
   1424a:	4610      	mov	r0, r2
   1424c:	4619      	mov	r1, r3
   1424e:	f04f 0200 	mov.w	r2, #0
   14252:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   14256:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   1425a:	f002 fa47 	bl	166ec <__aeabi_ddiv>
   1425e:	4602      	mov	r2, r0
   14260:	460b      	mov	r3, r1
   14262:	4610      	mov	r0, r2
   14264:	4619      	mov	r1, r3
   14266:	f002 fbb1 	bl	169cc <__aeabi_d2iz>
   1426a:	4603      	mov	r3, r0
   1426c:	b29b      	uxth	r3, r3
   1426e:	b29a      	uxth	r2, r3
   14270:	f64a 137c 	movw	r3, #43388	; 0xa97c
   14274:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14278:	881b      	ldrh	r3, [r3, #0]
   1427a:	b29b      	uxth	r3, r3
   1427c:	4413      	add	r3, r2
   1427e:	b29b      	uxth	r3, r3
   14280:	b29a      	uxth	r2, r3
   14282:	f240 03d6 	movw	r3, #214	; 0xd6
   14286:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1428a:	801a      	strh	r2, [r3, #0]
      slider_2_val = (float)ir_roll_neutral;
   1428c:	f240 03d6 	movw	r3, #214	; 0xd6
   14290:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14294:	881b      	ldrh	r3, [r3, #0]
   14296:	b21b      	sxth	r3, r3
   14298:	4618      	mov	r0, r3
   1429a:	f002 fce9 	bl	16c70 <__aeabi_i2f>
   1429e:	4602      	mov	r2, r0
   142a0:	f24a 3354 	movw	r3, #41812	; 0xa354
   142a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   142a8:	601a      	str	r2, [r3, #0]
    }
  }
  if (pprz_mode == PPRZ_MODE_AUTO2) {
   142aa:	f24a 3344 	movw	r3, #41796	; 0xa344
   142ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   142b2:	781b      	ldrb	r3, [r3, #0]
   142b4:	2b02      	cmp	r3, #2
   142b6:	f040 80da 	bne.w	1446e <inflight_calib+0x39e>
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   142ba:	f64a 1374 	movw	r3, #43380	; 0xa974
   142be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   142c2:	781b      	ldrb	r3, [r3, #0]
   142c4:	2b02      	cmp	r3, #2
   142c6:	d165      	bne.n	14394 <inflight_calib+0x2c4>
      static float course_pgain_init;
      if (mode_changed) {
   142c8:	79fb      	ldrb	r3, [r7, #7]
   142ca:	2b00      	cmp	r3, #0
   142cc:	d013      	beq.n	142f6 <inflight_calib+0x226>
        course_pgain_init = course_pgain;
   142ce:	f240 03ec 	movw	r3, #236	; 0xec
   142d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   142d6:	681a      	ldr	r2, [r3, #0]
   142d8:	f64a 1380 	movw	r3, #43392	; 0xa980
   142dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   142e0:	601a      	str	r2, [r3, #0]
        slider1_init = from_fbw.channels[RADIO_GAIN1];
   142e2:	f24a 4368 	movw	r3, #42088	; 0xa468
   142e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   142ea:	895a      	ldrh	r2, [r3, #10]
   142ec:	f64a 1376 	movw	r3, #43382	; 0xa976
   142f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   142f4:	801a      	strh	r2, [r3, #0]
      }
      course_pgain = ParamValFloat(course_pgain_init, 0.100000, from_fbw.channels[RADIO_GAIN1], slider1_init);
   142f6:	f64a 1380 	movw	r3, #43392	; 0xa980
   142fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   142fe:	681b      	ldr	r3, [r3, #0]
   14300:	4618      	mov	r0, r3
   14302:	f002 f875 	bl	163f0 <__aeabi_f2d>
   14306:	4604      	mov	r4, r0
   14308:	460d      	mov	r5, r1
   1430a:	f24a 4368 	movw	r3, #42088	; 0xa468
   1430e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14312:	895b      	ldrh	r3, [r3, #10]
   14314:	b21a      	sxth	r2, r3
   14316:	f64a 1376 	movw	r3, #43382	; 0xa976
   1431a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1431e:	881b      	ldrh	r3, [r3, #0]
   14320:	b21b      	sxth	r3, r3
   14322:	1ad3      	subs	r3, r2, r3
   14324:	4618      	mov	r0, r3
   14326:	f002 fca3 	bl	16c70 <__aeabi_i2f>
   1432a:	4603      	mov	r3, r0
   1432c:	4618      	mov	r0, r3
   1432e:	f002 f85f 	bl	163f0 <__aeabi_f2d>
   14332:	4602      	mov	r2, r0
   14334:	460b      	mov	r3, r1
   14336:	4610      	mov	r0, r2
   14338:	4619      	mov	r1, r3
   1433a:	a34f      	add	r3, pc, #316	; (adr r3, 14478 <inflight_calib+0x3a8>)
   1433c:	e9d3 2300 	ldrd	r2, r3, [r3]
   14340:	f002 f8aa 	bl	16498 <__aeabi_dmul>
   14344:	4602      	mov	r2, r0
   14346:	460b      	mov	r3, r1
   14348:	4610      	mov	r0, r2
   1434a:	4619      	mov	r1, r3
   1434c:	f04f 0200 	mov.w	r2, #0
   14350:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   14354:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   14358:	f002 f9c8 	bl	166ec <__aeabi_ddiv>
   1435c:	4602      	mov	r2, r0
   1435e:	460b      	mov	r3, r1
   14360:	4620      	mov	r0, r4
   14362:	4629      	mov	r1, r5
   14364:	f001 fee6 	bl	16134 <__adddf3>
   14368:	4602      	mov	r2, r0
   1436a:	460b      	mov	r3, r1
   1436c:	4610      	mov	r0, r2
   1436e:	4619      	mov	r1, r3
   14370:	f002 fb74 	bl	16a5c <__aeabi_d2f>
   14374:	4602      	mov	r2, r0
   14376:	f240 03ec 	movw	r3, #236	; 0xec
   1437a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1437e:	601a      	str	r2, [r3, #0]
      slider_1_val = (float)course_pgain;
   14380:	f240 03ec 	movw	r3, #236	; 0xec
   14384:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14388:	681a      	ldr	r2, [r3, #0]
   1438a:	f24a 3350 	movw	r3, #41808	; 0xa350
   1438e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14392:	601a      	str	r2, [r3, #0]
    }
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   14394:	f64a 1374 	movw	r3, #43380	; 0xa974
   14398:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1439c:	781b      	ldrb	r3, [r3, #0]
   1439e:	2b02      	cmp	r3, #2
   143a0:	d165      	bne.n	1446e <inflight_calib+0x39e>
      static float max_roll_init;
      if (mode_changed) {
   143a2:	79fb      	ldrb	r3, [r7, #7]
   143a4:	2b00      	cmp	r3, #0
   143a6:	d013      	beq.n	143d0 <inflight_calib+0x300>
        max_roll_init = max_roll;
   143a8:	f240 03f0 	movw	r3, #240	; 0xf0
   143ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   143b0:	681a      	ldr	r2, [r3, #0]
   143b2:	f64a 1384 	movw	r3, #43396	; 0xa984
   143b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   143ba:	601a      	str	r2, [r3, #0]
        slider2_init = from_fbw.channels[RADIO_GAIN2];
   143bc:	f24a 4368 	movw	r3, #42088	; 0xa468
   143c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   143c4:	899a      	ldrh	r2, [r3, #12]
   143c6:	f64a 1378 	movw	r3, #43384	; 0xa978
   143ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   143ce:	801a      	strh	r2, [r3, #0]
      }
      max_roll = ParamValFloat(max_roll_init, -0.200000, from_fbw.channels[RADIO_GAIN2], slider2_init);
   143d0:	f64a 1384 	movw	r3, #43396	; 0xa984
   143d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   143d8:	681b      	ldr	r3, [r3, #0]
   143da:	4618      	mov	r0, r3
   143dc:	f002 f808 	bl	163f0 <__aeabi_f2d>
   143e0:	4604      	mov	r4, r0
   143e2:	460d      	mov	r5, r1
   143e4:	f24a 4368 	movw	r3, #42088	; 0xa468
   143e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   143ec:	899b      	ldrh	r3, [r3, #12]
   143ee:	b21a      	sxth	r2, r3
   143f0:	f64a 1378 	movw	r3, #43384	; 0xa978
   143f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   143f8:	881b      	ldrh	r3, [r3, #0]
   143fa:	b21b      	sxth	r3, r3
   143fc:	1ad3      	subs	r3, r2, r3
   143fe:	4618      	mov	r0, r3
   14400:	f002 fc36 	bl	16c70 <__aeabi_i2f>
   14404:	4603      	mov	r3, r0
   14406:	4618      	mov	r0, r3
   14408:	f001 fff2 	bl	163f0 <__aeabi_f2d>
   1440c:	4602      	mov	r2, r0
   1440e:	460b      	mov	r3, r1
   14410:	4610      	mov	r0, r2
   14412:	4619      	mov	r1, r3
   14414:	a31a      	add	r3, pc, #104	; (adr r3, 14480 <inflight_calib+0x3b0>)
   14416:	e9d3 2300 	ldrd	r2, r3, [r3]
   1441a:	f002 f83d 	bl	16498 <__aeabi_dmul>
   1441e:	4602      	mov	r2, r0
   14420:	460b      	mov	r3, r1
   14422:	4610      	mov	r0, r2
   14424:	4619      	mov	r1, r3
   14426:	f04f 0200 	mov.w	r2, #0
   1442a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   1442e:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   14432:	f002 f95b 	bl	166ec <__aeabi_ddiv>
   14436:	4602      	mov	r2, r0
   14438:	460b      	mov	r3, r1
   1443a:	4620      	mov	r0, r4
   1443c:	4629      	mov	r1, r5
   1443e:	f001 fe79 	bl	16134 <__adddf3>
   14442:	4602      	mov	r2, r0
   14444:	460b      	mov	r3, r1
   14446:	4610      	mov	r0, r2
   14448:	4619      	mov	r1, r3
   1444a:	f002 fb07 	bl	16a5c <__aeabi_d2f>
   1444e:	4602      	mov	r2, r0
   14450:	f240 03f0 	movw	r3, #240	; 0xf0
   14454:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14458:	601a      	str	r2, [r3, #0]
      slider_2_val = (float)max_roll;
   1445a:	f240 03f0 	movw	r3, #240	; 0xf0
   1445e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14462:	681a      	ldr	r2, [r3, #0]
   14464:	f24a 3354 	movw	r3, #41812	; 0xa354
   14468:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1446c:	601a      	str	r2, [r3, #0]
    }
  }
}
   1446e:	3708      	adds	r7, #8
   14470:	46bd      	mov	sp, r7
   14472:	bdb0      	pop	{r4, r5, r7, pc}
   14474:	f3af 8000 	nop.w
   14478:	9999999a 	.word	0x9999999a
   1447c:	3fb99999 	.word	0x3fb99999
   14480:	9999999a 	.word	0x9999999a
   14484:	bfc99999 	.word	0xbfc99999

00014488 <pp_atan2>:
 *
 */
#include <math.h>

double pp_atan2(double x, double y)
{
   14488:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
   1448c:	b08e      	sub	sp, #56	; 0x38
   1448e:	af00      	add	r7, sp, #0
   14490:	e9c7 0102 	strd	r0, r1, [r7, #8]
   14494:	e9c7 2300 	strd	r2, r3, [r7]
	double coeff_1 = M_PI/4;
   14498:	a357      	add	r3, pc, #348	; (adr r3, 145f8 <pp_atan2+0x170>)
   1449a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1449e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double coeff_2 = 3*coeff_1;
   144a2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   144a6:	f04f 0200 	mov.w	r2, #0
   144aa:	f04f 0300 	mov.w	r3, #0
   144ae:	f2c4 0308 	movt	r3, #16392	; 0x4008
   144b2:	f001 fff1 	bl	16498 <__aeabi_dmul>
   144b6:	4602      	mov	r2, r0
   144b8:	460b      	mov	r3, r1
   144ba:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double abs_y = fabs(y)+1e-10;
   144be:	e9d7 0100 	ldrd	r0, r1, [r7]
   144c2:	f04f 0200 	mov.w	r2, #0
   144c6:	f04f 0300 	mov.w	r3, #0
   144ca:	f002 fa57 	bl	1697c <__aeabi_dcmplt>
   144ce:	4603      	mov	r3, r0
   144d0:	2b00      	cmp	r3, #0
   144d2:	d009      	beq.n	144e8 <pp_atan2+0x60>
   144d4:	a14a      	add	r1, pc, #296	; (adr r1, 14600 <pp_atan2+0x178>)
   144d6:	e9d1 0100 	ldrd	r0, r1, [r1]
   144da:	e9d7 2300 	ldrd	r2, r3, [r7]
   144de:	f001 fe27 	bl	16130 <__aeabi_dsub>
   144e2:	4602      	mov	r2, r0
   144e4:	460b      	mov	r3, r1
   144e6:	e008      	b.n	144fa <pp_atan2+0x72>
   144e8:	e9d7 0100 	ldrd	r0, r1, [r7]
   144ec:	a344      	add	r3, pc, #272	; (adr r3, 14600 <pp_atan2+0x178>)
   144ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   144f2:	f001 fe1f 	bl	16134 <__adddf3>
   144f6:	4602      	mov	r2, r0
   144f8:	460b      	mov	r3, r1
   144fa:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double angle, r;
	if(x>0)
   144fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   14502:	f04f 0200 	mov.w	r2, #0
   14506:	f04f 0300 	mov.w	r3, #0
   1450a:	f002 fa55 	bl	169b8 <__aeabi_dcmpgt>
   1450e:	4603      	mov	r3, r0
   14510:	2b00      	cmp	r3, #0
   14512:	d02a      	beq.n	1456a <pp_atan2+0xe2>
	{
		r = (x - abs_y)/(x + abs_y);
   14514:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   14518:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   1451c:	f001 fe08 	bl	16130 <__aeabi_dsub>
   14520:	4602      	mov	r2, r0
   14522:	460b      	mov	r3, r1
   14524:	4690      	mov	r8, r2
   14526:	4699      	mov	r9, r3
   14528:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   1452c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   14530:	f001 fe00 	bl	16134 <__adddf3>
   14534:	4602      	mov	r2, r0
   14536:	460b      	mov	r3, r1
   14538:	4640      	mov	r0, r8
   1453a:	4649      	mov	r1, r9
   1453c:	f002 f8d6 	bl	166ec <__aeabi_ddiv>
   14540:	4602      	mov	r2, r0
   14542:	460b      	mov	r3, r1
   14544:	e9c7 2304 	strd	r2, r3, [r7, #16]
		angle = coeff_1 - coeff_1*r;
   14548:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   1454c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   14550:	f001 ffa2 	bl	16498 <__aeabi_dmul>
   14554:	4602      	mov	r2, r0
   14556:	460b      	mov	r3, r1
   14558:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   1455c:	f001 fde8 	bl	16130 <__aeabi_dsub>
   14560:	4602      	mov	r2, r0
   14562:	460b      	mov	r3, r1
   14564:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
   14568:	e029      	b.n	145be <pp_atan2+0x136>
	}
	else
	{
		r = (x + abs_y)/(abs_y - x);
   1456a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   1456e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   14572:	f001 fddf 	bl	16134 <__adddf3>
   14576:	4602      	mov	r2, r0
   14578:	460b      	mov	r3, r1
   1457a:	4690      	mov	r8, r2
   1457c:	4699      	mov	r9, r3
   1457e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   14582:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   14586:	f001 fdd3 	bl	16130 <__aeabi_dsub>
   1458a:	4602      	mov	r2, r0
   1458c:	460b      	mov	r3, r1
   1458e:	4640      	mov	r0, r8
   14590:	4649      	mov	r1, r9
   14592:	f002 f8ab 	bl	166ec <__aeabi_ddiv>
   14596:	4602      	mov	r2, r0
   14598:	460b      	mov	r3, r1
   1459a:	e9c7 2304 	strd	r2, r3, [r7, #16]
		angle = coeff_2 - coeff_1*r;
   1459e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   145a2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   145a6:	f001 ff77 	bl	16498 <__aeabi_dmul>
   145aa:	4602      	mov	r2, r0
   145ac:	460b      	mov	r3, r1
   145ae:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
   145b2:	f001 fdbd 	bl	16130 <__aeabi_dsub>
   145b6:	4602      	mov	r2, r0
   145b8:	460b      	mov	r3, r1
   145ba:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	}
	if(y<0)
   145be:	e9d7 0100 	ldrd	r0, r1, [r7]
   145c2:	f04f 0200 	mov.w	r2, #0
   145c6:	f04f 0300 	mov.w	r3, #0
   145ca:	f002 f9d7 	bl	1697c <__aeabi_dcmplt>
   145ce:	4603      	mov	r3, r0
   145d0:	2b00      	cmp	r3, #0
   145d2:	d004      	beq.n	145de <pp_atan2+0x156>
		return (-angle);
   145d4:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   145d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   145d8:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   145dc:	e001      	b.n	145e2 <pp_atan2+0x15a>
	else
		return angle;
   145de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
   145e2:	4622      	mov	r2, r4
   145e4:	462b      	mov	r3, r5
}
   145e6:	4610      	mov	r0, r2
   145e8:	4619      	mov	r1, r3
   145ea:	3738      	adds	r7, #56	; 0x38
   145ec:	46bd      	mov	sp, r7
   145ee:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
   145f2:	bf00      	nop
   145f4:	f3af 8000 	nop.w
   145f8:	54442d18 	.word	0x54442d18
   145fc:	3fe921fb 	.word	0x3fe921fb
   14600:	d9d7bdbb 	.word	0xd9d7bdbb
   14604:	3ddb7cdf 	.word	0x3ddb7cdf

00014608 <pp_sin>:
 * Range: -pi/2 <= x <= pi/2
 * Precision: +/- .000,000,005
 */
 
double pp_sin(double x)
{
   14608:	b5b0      	push	{r4, r5, r7, lr}
   1460a:	b08c      	sub	sp, #48	; 0x30
   1460c:	af00      	add	r7, sp, #0
   1460e:	e9c7 0100 	strd	r0, r1, [r7]
	double xi, y, q, q2;
	int sign;

	xi = x; sign = 1;
   14612:	e9d7 2300 	ldrd	r2, r3, [r7]
   14616:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   1461a:	2301      	movs	r3, #1
   1461c:	627b      	str	r3, [r7, #36]	; 0x24
	while (xi < -1.57079632679489661923) xi += 6.28318530717958647692;
   1461e:	e00a      	b.n	14636 <pp_sin+0x2e>
   14620:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   14624:	a35a      	add	r3, pc, #360	; (adr r3, 14790 <pp_sin+0x188>)
   14626:	e9d3 2300 	ldrd	r2, r3, [r3]
   1462a:	f001 fd83 	bl	16134 <__adddf3>
   1462e:	4602      	mov	r2, r0
   14630:	460b      	mov	r3, r1
   14632:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   14636:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   1463a:	a357      	add	r3, pc, #348	; (adr r3, 14798 <pp_sin+0x190>)
   1463c:	e9d3 2300 	ldrd	r2, r3, [r3]
   14640:	f002 f99c 	bl	1697c <__aeabi_dcmplt>
   14644:	4603      	mov	r3, r0
   14646:	2b00      	cmp	r3, #0
   14648:	d1ea      	bne.n	14620 <pp_sin+0x18>
	while (xi > 4.71238898038468985769) xi -= 6.28318530717958647692;
   1464a:	e00a      	b.n	14662 <pp_sin+0x5a>
   1464c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   14650:	a34f      	add	r3, pc, #316	; (adr r3, 14790 <pp_sin+0x188>)
   14652:	e9d3 2300 	ldrd	r2, r3, [r3]
   14656:	f001 fd6b 	bl	16130 <__aeabi_dsub>
   1465a:	4602      	mov	r2, r0
   1465c:	460b      	mov	r3, r1
   1465e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   14662:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   14666:	a34e      	add	r3, pc, #312	; (adr r3, 147a0 <pp_sin+0x198>)
   14668:	e9d3 2300 	ldrd	r2, r3, [r3]
   1466c:	f002 f9a4 	bl	169b8 <__aeabi_dcmpgt>
   14670:	4603      	mov	r3, r0
   14672:	2b00      	cmp	r3, #0
   14674:	d1ea      	bne.n	1464c <pp_sin+0x44>
	if (xi > 1.57079632679489661923) {
   14676:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   1467a:	a34b      	add	r3, pc, #300	; (adr r3, 147a8 <pp_sin+0x1a0>)
   1467c:	e9d3 2300 	ldrd	r2, r3, [r3]
   14680:	f002 f99a 	bl	169b8 <__aeabi_dcmpgt>
   14684:	4603      	mov	r3, r0
   14686:	2b00      	cmp	r3, #0
   14688:	d00d      	beq.n	146a6 <pp_sin+0x9e>
		xi -= 3.141592653589793238462643;
   1468a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   1468e:	a348      	add	r3, pc, #288	; (adr r3, 147b0 <pp_sin+0x1a8>)
   14690:	e9d3 2300 	ldrd	r2, r3, [r3]
   14694:	f001 fd4c 	bl	16130 <__aeabi_dsub>
   14698:	4602      	mov	r2, r0
   1469a:	460b      	mov	r3, r1
   1469c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		sign = -1;
   146a0:	f04f 33ff 	mov.w	r3, #4294967295
   146a4:	627b      	str	r3, [r7, #36]	; 0x24
	}
	q = xi / 1.57079632679; q2 = q * q;
   146a6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   146aa:	a343      	add	r3, pc, #268	; (adr r3, 147b8 <pp_sin+0x1b0>)
   146ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   146b0:	f002 f81c 	bl	166ec <__aeabi_ddiv>
   146b4:	4602      	mov	r2, r0
   146b6:	460b      	mov	r3, r1
   146b8:	e9c7 2306 	strd	r2, r3, [r7, #24]
   146bc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   146c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   146c4:	f001 fee8 	bl	16498 <__aeabi_dmul>
   146c8:	4602      	mov	r2, r0
   146ca:	460b      	mov	r3, r1
   146cc:	e9c7 2304 	strd	r2, r3, [r7, #16]
	y = ((((.00015148419  * q2
   146d0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   146d4:	a33a      	add	r3, pc, #232	; (adr r3, 147c0 <pp_sin+0x1b8>)
   146d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   146da:	f001 fedd 	bl	16498 <__aeabi_dmul>
   146de:	4602      	mov	r2, r0
   146e0:	460b      	mov	r3, r1
	      - .00467376557) * q2
   146e2:	4610      	mov	r0, r2
   146e4:	4619      	mov	r1, r3
   146e6:	a338      	add	r3, pc, #224	; (adr r3, 147c8 <pp_sin+0x1c0>)
   146e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   146ec:	f001 fd20 	bl	16130 <__aeabi_dsub>
   146f0:	4602      	mov	r2, r0
   146f2:	460b      	mov	r3, r1
   146f4:	4610      	mov	r0, r2
   146f6:	4619      	mov	r1, r3
   146f8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   146fc:	f001 fecc 	bl	16498 <__aeabi_dmul>
   14700:	4602      	mov	r2, r0
   14702:	460b      	mov	r3, r1
	      + .07968967928) * q2
   14704:	4610      	mov	r0, r2
   14706:	4619      	mov	r1, r3
   14708:	a331      	add	r3, pc, #196	; (adr r3, 147d0 <pp_sin+0x1c8>)
   1470a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1470e:	f001 fd11 	bl	16134 <__adddf3>
   14712:	4602      	mov	r2, r0
   14714:	460b      	mov	r3, r1
   14716:	4610      	mov	r0, r2
   14718:	4619      	mov	r1, r3
   1471a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   1471e:	f001 febb 	bl	16498 <__aeabi_dmul>
   14722:	4602      	mov	r2, r0
   14724:	460b      	mov	r3, r1
	      - .64596371106) * q2
   14726:	4610      	mov	r0, r2
   14728:	4619      	mov	r1, r3
   1472a:	a32b      	add	r3, pc, #172	; (adr r3, 147d8 <pp_sin+0x1d0>)
   1472c:	e9d3 2300 	ldrd	r2, r3, [r3]
   14730:	f001 fcfe 	bl	16130 <__aeabi_dsub>
   14734:	4602      	mov	r2, r0
   14736:	460b      	mov	r3, r1
   14738:	4610      	mov	r0, r2
   1473a:	4619      	mov	r1, r3
   1473c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   14740:	f001 feaa 	bl	16498 <__aeabi_dmul>
   14744:	4602      	mov	r2, r0
   14746:	460b      	mov	r3, r1
	      +1.57079631847) * q;
   14748:	4610      	mov	r0, r2
   1474a:	4619      	mov	r1, r3
   1474c:	a324      	add	r3, pc, #144	; (adr r3, 147e0 <pp_sin+0x1d8>)
   1474e:	e9d3 2300 	ldrd	r2, r3, [r3]
   14752:	f001 fcef 	bl	16134 <__adddf3>
   14756:	4602      	mov	r2, r0
   14758:	460b      	mov	r3, r1
	if (xi > 1.57079632679489661923) {
		xi -= 3.141592653589793238462643;
		sign = -1;
	}
	q = xi / 1.57079632679; q2 = q * q;
	y = ((((.00015148419  * q2
   1475a:	4610      	mov	r0, r2
   1475c:	4619      	mov	r1, r3
   1475e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   14762:	f001 fe99 	bl	16498 <__aeabi_dmul>
   14766:	4602      	mov	r2, r0
   14768:	460b      	mov	r3, r1
   1476a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	      - .00467376557) * q2
	      + .07968967928) * q2
	      - .64596371106) * q2
	      +1.57079631847) * q;
	return(sign < 0? -y : y);
   1476e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14770:	2b00      	cmp	r3, #0
   14772:	da04      	bge.n	1477e <pp_sin+0x176>
   14774:	68bc      	ldr	r4, [r7, #8]
   14776:	68fb      	ldr	r3, [r7, #12]
   14778:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   1477c:	e001      	b.n	14782 <pp_sin+0x17a>
   1477e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
   14782:	4622      	mov	r2, r4
   14784:	462b      	mov	r3, r5
}
   14786:	4610      	mov	r0, r2
   14788:	4619      	mov	r1, r3
   1478a:	3730      	adds	r7, #48	; 0x30
   1478c:	46bd      	mov	sp, r7
   1478e:	bdb0      	pop	{r4, r5, r7, pc}
   14790:	54442d18 	.word	0x54442d18
   14794:	401921fb 	.word	0x401921fb
   14798:	54442d18 	.word	0x54442d18
   1479c:	bff921fb 	.word	0xbff921fb
   147a0:	7f3321d2 	.word	0x7f3321d2
   147a4:	4012d97c 	.word	0x4012d97c
   147a8:	54442d18 	.word	0x54442d18
   147ac:	3ff921fb 	.word	0x3ff921fb
   147b0:	54442d18 	.word	0x54442d18
   147b4:	400921fb 	.word	0x400921fb
   147b8:	5443d6f4 	.word	0x5443d6f4
   147bc:	3ff921fb 	.word	0x3ff921fb
   147c0:	48a890af 	.word	0x48a890af
   147c4:	3f23daf7 	.word	0x3f23daf7
   147c8:	645b6d0e 	.word	0x645b6d0e
   147cc:	3f7324cc 	.word	0x3f7324cc
   147d0:	f65619a5 	.word	0xf65619a5
   147d4:	3fb4668a 	.word	0x3fb4668a
   147d8:	16acf9cd 	.word	0x16acf9cd
   147dc:	3fe4abbc 	.word	0x3fe4abbc
   147e0:	520817f7 	.word	0x520817f7
   147e4:	3ff921fb 	.word	0x3ff921fb

000147e8 <pp_sqrt>:

#define SQRT_PRECISION 5
double pp_sqrt(double n)
{
   147e8:	b480      	push	{r7}
   147ea:	b083      	sub	sp, #12
   147ec:	af00      	add	r7, sp, #0
   147ee:	e9c7 0100 	strd	r0, r1, [r7]
	/* perform the computation */
	for(i = 0; i < SQRT_PRECISION; i++)
		x = (x + n / x) / 2;
	return x;
#endif
}
   147f2:	4610      	mov	r0, r2
   147f4:	4619      	mov	r1, r3
   147f6:	370c      	adds	r7, #12
   147f8:	46bd      	mov	sp, r7
   147fa:	f85d 7b04 	ldr.w	r7, [sp], #4
   147fe:	4770      	bx	lr

00014800 <fbw_adc_buf_channel>:

uint16_t fbw_adc_samples[ FBW_NB_ADC ];

static struct fbw_adc_buf* buffers[FBW_NB_ADC];

void fbw_adc_buf_channel(uint8_t adc_channel, struct fbw_adc_buf* s) {
   14800:	b480      	push	{r7}
   14802:	b083      	sub	sp, #12
   14804:	af00      	add	r7, sp, #0
   14806:	4603      	mov	r3, r0
   14808:	6039      	str	r1, [r7, #0]
   1480a:	71fb      	strb	r3, [r7, #7]
  buffers[adc_channel] = s;
   1480c:	79fa      	ldrb	r2, [r7, #7]
   1480e:	f64a 1398 	movw	r3, #43416	; 0xa998
   14812:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14816:	6839      	ldr	r1, [r7, #0]
   14818:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   1481c:	370c      	adds	r7, #12
   1481e:	46bd      	mov	sp, r7
   14820:	f85d 7b04 	ldr.w	r7, [sp], #4
   14824:	4770      	bx	lr
   14826:	bf00      	nop

00014828 <fbw_adc_init>:

void 
fbw_adc_init( void )
{
   14828:	b480      	push	{r7}
   1482a:	b083      	sub	sp, #12
   1482c:	af00      	add	r7, sp, #0
  uint8_t i;
  /* Ensure that our port is for input with no pull-ups */
  ANALOG_PORT 	= 0x00;
   1482e:	f242 0315 	movw	r3, #8213	; 0x2015
   14832:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14836:	2200      	movs	r2, #0
   14838:	701a      	strb	r2, [r3, #0]
  ANALOG_PORT_DIR	= 0x00;
   1483a:	f242 0314 	movw	r3, #8212	; 0x2014
   1483e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14842:	2200      	movs	r2, #0
   14844:	701a      	strb	r2, [r3, #0]

  /* Select our external voltage ref */
  ADMUX		= ANALOG_VREF;
   14846:	f242 0307 	movw	r3, #8199	; 0x2007
   1484a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1484e:	22c0      	movs	r2, #192	; 0xc0
   14850:	701a      	strb	r2, [r3, #0]

  /* Select out clock, turn on the ADC interrupt and start conversion */
  ADCSRA = 0
   14852:	f242 0306 	movw	r3, #8198	; 0x2006
   14856:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1485a:	22cf      	movs	r2, #207	; 0xcf
   1485c:	701a      	strb	r2, [r3, #0]
    | _BV(ADEN )
    | _BV(ADIE )
    | _BV(ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < FBW_NB_ADC; i++)
   1485e:	2300      	movs	r3, #0
   14860:	71fb      	strb	r3, [r7, #7]
   14862:	e00a      	b.n	1487a <fbw_adc_init+0x52>
    buffers[i] = (struct fbw_adc_buf*)0;
   14864:	79fa      	ldrb	r2, [r7, #7]
   14866:	f64a 1398 	movw	r3, #43416	; 0xa998
   1486a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1486e:	2100      	movs	r1, #0
   14870:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    | _BV(ADEN )
    | _BV(ADIE )
    | _BV(ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < FBW_NB_ADC; i++)
   14874:	79fb      	ldrb	r3, [r7, #7]
   14876:	3301      	adds	r3, #1
   14878:	71fb      	strb	r3, [r7, #7]
   1487a:	79fb      	ldrb	r3, [r7, #7]
   1487c:	2b07      	cmp	r3, #7
   1487e:	d9f1      	bls.n	14864 <fbw_adc_init+0x3c>
    buffers[i] = (struct fbw_adc_buf*)0;
}
   14880:	370c      	adds	r7, #12
   14882:	46bd      	mov	sp, r7
   14884:	f85d 7b04 	ldr.w	r7, [sp], #4
   14888:	4770      	bx	lr
   1488a:	bf00      	nop

0001488c <__vector_34>:
#ifdef PAPABENCH_SINGLE
	SIGNAL(SIG_SPM_READY)
#else
	SIGNAL( SIG_INPUT_CAPTURE1 )
#endif
{
   1488c:	b480      	push	{r7}
   1488e:	b083      	sub	sp, #12
   14890:	af00      	add	r7, sp, #0
  uint16_t		this;
  uint16_t		width;
  static uint8_t		state;
  static uint8_t		sync_start;

  this		= ICR1;
   14892:	f242 0326 	movw	r3, #8230	; 0x2026
   14896:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1489a:	881b      	ldrh	r3, [r3, #0]
   1489c:	80fb      	strh	r3, [r7, #6]
  width		= this - last;
   1489e:	f64a 13f4 	movw	r3, #43508	; 0xa9f4
   148a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   148a6:	881b      	ldrh	r3, [r3, #0]
   148a8:	88fa      	ldrh	r2, [r7, #6]
   148aa:	1ad3      	subs	r3, r2, r3
   148ac:	80bb      	strh	r3, [r7, #4]
  last		= this;
   148ae:	f64a 13f4 	movw	r3, #43508	; 0xa9f4
   148b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   148b6:	88fa      	ldrh	r2, [r7, #6]
   148b8:	801a      	strh	r2, [r3, #0]
  
  if( state == 0 ) {
   148ba:	f64a 13f6 	movw	r3, #43510	; 0xa9f6
   148be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   148c2:	781b      	ldrb	r3, [r3, #0]
   148c4:	2b00      	cmp	r3, #0
   148c6:	d11e      	bne.n	14906 <__vector_34+0x7a>
    uint8_t	end = TCNT2;
   148c8:	f242 0324 	movw	r3, #8228	; 0x2024
   148cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   148d0:	781b      	ldrb	r3, [r3, #0]
   148d2:	70fb      	strb	r3, [r7, #3]
    uint8_t diff = (end - sync_start);
   148d4:	f64a 13f7 	movw	r3, #43511	; 0xa9f7
   148d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   148dc:	781b      	ldrb	r3, [r3, #0]
   148de:	78fa      	ldrb	r2, [r7, #3]
   148e0:	1ad3      	subs	r3, r2, r3
   148e2:	70bb      	strb	r3, [r7, #2]
    sync_start = end;
   148e4:	f64a 13f7 	movw	r3, #43511	; 0xa9f7
   148e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   148ec:	78fa      	ldrb	r2, [r7, #3]
   148ee:	701a      	strb	r2, [r3, #0]

    /* The frame period of the mc3030 seems to be 25ms. 
     * One pulse lasts from 1.05ms to 2.150ms.
     * Sync pulse is at least 7ms : (7000*CLOCK)/1024 = 109
     */
    if( diff > (uint8_t)(((uint32_t)(7000ul*CLOCK))/1024ul) ) {
   148f0:	78bb      	ldrb	r3, [r7, #2]
   148f2:	2b6d      	cmp	r3, #109	; 0x6d
   148f4:	d906      	bls.n	14904 <__vector_34+0x78>
      state = 1;
   148f6:	f64a 13f6 	movw	r3, #43510	; 0xa9f6
   148fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   148fe:	2201      	movs	r2, #1
   14900:	701a      	strb	r2, [r3, #0]
   14902:	e053      	b.n	149ac <__vector_34+0x120>
   14904:	e052      	b.n	149ac <__vector_34+0x120>
    }
  } 
  else {
    /* Read a data pulses */
    if( width < 700ul*CLOCK || width > 2300ul*CLOCK)
   14906:	88bb      	ldrh	r3, [r7, #4]
   14908:	f5b3 5f2f 	cmp.w	r3, #11200	; 0x2bc0
   1490c:	d304      	bcc.n	14918 <__vector_34+0x8c>
   1490e:	88ba      	ldrh	r2, [r7, #4]
   14910:	f648 73c0 	movw	r3, #36800	; 0x8fc0
   14914:	429a      	cmp	r2, r3
   14916:	d911      	bls.n	1493c <__vector_34+0xb0>
      RestartPpmCycle();
   14918:	f64a 13f6 	movw	r3, #43510	; 0xa9f6
   1491c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14920:	2200      	movs	r2, #0
   14922:	701a      	strb	r2, [r3, #0]
   14924:	f242 0324 	movw	r3, #8228	; 0x2024
   14928:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1492c:	781b      	ldrb	r3, [r3, #0]
   1492e:	b2da      	uxtb	r2, r3
   14930:	f64a 13f7 	movw	r3, #43511	; 0xa9f7
   14934:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14938:	701a      	strb	r2, [r3, #0]
   1493a:	e038      	b.n	149ae <__vector_34+0x122>
    ppm_pulses[state - 1] = width;
   1493c:	f64a 13f6 	movw	r3, #43510	; 0xa9f6
   14940:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14944:	781b      	ldrb	r3, [r3, #0]
   14946:	1e5a      	subs	r2, r3, #1
   14948:	f64a 13b8 	movw	r3, #43448	; 0xa9b8
   1494c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14950:	88b9      	ldrh	r1, [r7, #4]
   14952:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

    if (state >= PPM_NB_PULSES) {
   14956:	f64a 13f6 	movw	r3, #43510	; 0xa9f6
   1495a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1495e:	781b      	ldrb	r3, [r3, #0]
   14960:	2b08      	cmp	r3, #8
   14962:	d917      	bls.n	14994 <__vector_34+0x108>
      ppm_valid	= 1;
   14964:	f64a 13f3 	movw	r3, #43507	; 0xa9f3
   14968:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1496c:	2201      	movs	r2, #1
   1496e:	701a      	strb	r2, [r3, #0]
      RestartPpmCycle();
   14970:	f64a 13f6 	movw	r3, #43510	; 0xa9f6
   14974:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14978:	2200      	movs	r2, #0
   1497a:	701a      	strb	r2, [r3, #0]
   1497c:	f242 0324 	movw	r3, #8228	; 0x2024
   14980:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14984:	781b      	ldrb	r3, [r3, #0]
   14986:	b2da      	uxtb	r2, r3
   14988:	f64a 13f7 	movw	r3, #43511	; 0xa9f7
   1498c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14990:	701a      	strb	r2, [r3, #0]
   14992:	e00c      	b.n	149ae <__vector_34+0x122>
    } else 
      state++;
   14994:	f64a 13f6 	movw	r3, #43510	; 0xa9f6
   14998:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1499c:	781b      	ldrb	r3, [r3, #0]
   1499e:	3301      	adds	r3, #1
   149a0:	b2da      	uxtb	r2, r3
   149a2:	f64a 13f6 	movw	r3, #43510	; 0xa9f6
   149a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   149aa:	701a      	strb	r2, [r3, #0]
  }
  return;
   149ac:	bf00      	nop
}
   149ae:	370c      	adds	r7, #12
   149b0:	46bd      	mov	sp, r7
   149b2:	f85d 7b04 	ldr.w	r7, [sp], #4
   149b6:	4770      	bx	lr

000149b8 <last_radio_from_ppm>:

/* Copy from the ppm receiving buffer to the buffer sent to mcu0 */
void last_radio_from_ppm() {
   149b8:	b590      	push	{r4, r7, lr}
   149ba:	b083      	sub	sp, #12
   149bc:	af00      	add	r7, sp, #0
  LastRadioFromPpm()
   149be:	f64a 13b8 	movw	r3, #43448	; 0xa9b8
   149c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   149c6:	881b      	ldrh	r3, [r3, #0]
   149c8:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
   149cc:	b29b      	uxth	r3, r3
   149ce:	80fb      	strh	r3, [r7, #6]
   149d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   149d4:	4618      	mov	r0, r3
   149d6:	f002 f94b 	bl	16c70 <__aeabi_i2f>
   149da:	4603      	mov	r3, r0
   149dc:	4618      	mov	r0, r3
   149de:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   149e2:	f002 f999 	bl	16d18 <__aeabi_fmul>
   149e6:	4603      	mov	r3, r0
   149e8:	4618      	mov	r0, r3
   149ea:	f002 fb5b 	bl	170a4 <__aeabi_f2iz>
   149ee:	4603      	mov	r3, r0
   149f0:	b29a      	uxth	r2, r3
   149f2:	f64a 13cc 	movw	r3, #43468	; 0xa9cc
   149f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   149fa:	801a      	strh	r2, [r3, #0]
   149fc:	f64a 13cc 	movw	r3, #43468	; 0xa9cc
   14a00:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a04:	881b      	ldrh	r3, [r3, #0]
   14a06:	b21b      	sxth	r3, r3
   14a08:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   14a0c:	dd07      	ble.n	14a1e <last_radio_from_ppm+0x66>
   14a0e:	f64a 13cc 	movw	r3, #43468	; 0xa9cc
   14a12:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a16:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   14a1a:	801a      	strh	r2, [r3, #0]
   14a1c:	e00d      	b.n	14a3a <last_radio_from_ppm+0x82>
   14a1e:	f64a 13cc 	movw	r3, #43468	; 0xa9cc
   14a22:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a26:	881b      	ldrh	r3, [r3, #0]
   14a28:	b21b      	sxth	r3, r3
   14a2a:	2b00      	cmp	r3, #0
   14a2c:	da05      	bge.n	14a3a <last_radio_from_ppm+0x82>
   14a2e:	f64a 13cc 	movw	r3, #43468	; 0xa9cc
   14a32:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a36:	2200      	movs	r2, #0
   14a38:	801a      	strh	r2, [r3, #0]
   14a3a:	f64a 13b8 	movw	r3, #43448	; 0xa9b8
   14a3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a42:	885b      	ldrh	r3, [r3, #2]
   14a44:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   14a48:	b29b      	uxth	r3, r3
   14a4a:	80fb      	strh	r3, [r7, #6]
   14a4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   14a50:	4618      	mov	r0, r3
   14a52:	f002 f90d 	bl	16c70 <__aeabi_i2f>
   14a56:	4603      	mov	r3, r0
   14a58:	4618      	mov	r0, r3
   14a5a:	f002 fb23 	bl	170a4 <__aeabi_f2iz>
   14a5e:	4603      	mov	r3, r0
   14a60:	b29a      	uxth	r2, r3
   14a62:	f64a 13cc 	movw	r3, #43468	; 0xa9cc
   14a66:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a6a:	805a      	strh	r2, [r3, #2]
   14a6c:	f64a 13cc 	movw	r3, #43468	; 0xa9cc
   14a70:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a74:	885b      	ldrh	r3, [r3, #2]
   14a76:	b21b      	sxth	r3, r3
   14a78:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   14a7c:	dd07      	ble.n	14a8e <last_radio_from_ppm+0xd6>
   14a7e:	f64a 13cc 	movw	r3, #43468	; 0xa9cc
   14a82:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a86:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   14a8a:	805a      	strh	r2, [r3, #2]
   14a8c:	e00f      	b.n	14aae <last_radio_from_ppm+0xf6>
   14a8e:	f64a 13cc 	movw	r3, #43468	; 0xa9cc
   14a92:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a96:	885b      	ldrh	r3, [r3, #2]
   14a98:	b21b      	sxth	r3, r3
   14a9a:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   14a9e:	da06      	bge.n	14aae <last_radio_from_ppm+0xf6>
   14aa0:	f64a 13cc 	movw	r3, #43468	; 0xa9cc
   14aa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14aa8:	f64d 2280 	movw	r2, #55936	; 0xda80
   14aac:	805a      	strh	r2, [r3, #2]
   14aae:	f64a 13b8 	movw	r3, #43448	; 0xa9b8
   14ab2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ab6:	889b      	ldrh	r3, [r3, #4]
   14ab8:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   14abc:	b29b      	uxth	r3, r3
   14abe:	80fb      	strh	r3, [r7, #6]
   14ac0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   14ac4:	4618      	mov	r0, r3
   14ac6:	f002 f8d3 	bl	16c70 <__aeabi_i2f>
   14aca:	4603      	mov	r3, r0
   14acc:	4618      	mov	r0, r3
   14ace:	f002 fae9 	bl	170a4 <__aeabi_f2iz>
   14ad2:	4603      	mov	r3, r0
   14ad4:	b29a      	uxth	r2, r3
   14ad6:	f64a 13cc 	movw	r3, #43468	; 0xa9cc
   14ada:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ade:	809a      	strh	r2, [r3, #4]
   14ae0:	f64a 13cc 	movw	r3, #43468	; 0xa9cc
   14ae4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ae8:	889b      	ldrh	r3, [r3, #4]
   14aea:	b21b      	sxth	r3, r3
   14aec:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   14af0:	dd07      	ble.n	14b02 <last_radio_from_ppm+0x14a>
   14af2:	f64a 13cc 	movw	r3, #43468	; 0xa9cc
   14af6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14afa:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   14afe:	809a      	strh	r2, [r3, #4]
   14b00:	e00f      	b.n	14b22 <last_radio_from_ppm+0x16a>
   14b02:	f64a 13cc 	movw	r3, #43468	; 0xa9cc
   14b06:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b0a:	889b      	ldrh	r3, [r3, #4]
   14b0c:	b21b      	sxth	r3, r3
   14b0e:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   14b12:	da06      	bge.n	14b22 <last_radio_from_ppm+0x16a>
   14b14:	f64a 13cc 	movw	r3, #43468	; 0xa9cc
   14b18:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b1c:	f64d 2280 	movw	r2, #55936	; 0xda80
   14b20:	809a      	strh	r2, [r3, #4]
   14b22:	f64a 13b8 	movw	r3, #43448	; 0xa9b8
   14b26:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b2a:	88db      	ldrh	r3, [r3, #6]
   14b2c:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   14b30:	b29b      	uxth	r3, r3
   14b32:	80fb      	strh	r3, [r7, #6]
   14b34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   14b38:	4618      	mov	r0, r3
   14b3a:	f002 f899 	bl	16c70 <__aeabi_i2f>
   14b3e:	4603      	mov	r3, r0
   14b40:	4618      	mov	r0, r3
   14b42:	f002 faaf 	bl	170a4 <__aeabi_f2iz>
   14b46:	4603      	mov	r3, r0
   14b48:	b29a      	uxth	r2, r3
   14b4a:	f64a 13cc 	movw	r3, #43468	; 0xa9cc
   14b4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b52:	80da      	strh	r2, [r3, #6]
   14b54:	f64a 13cc 	movw	r3, #43468	; 0xa9cc
   14b58:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b5c:	88db      	ldrh	r3, [r3, #6]
   14b5e:	b21b      	sxth	r3, r3
   14b60:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   14b64:	dd07      	ble.n	14b76 <last_radio_from_ppm+0x1be>
   14b66:	f64a 13cc 	movw	r3, #43468	; 0xa9cc
   14b6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b6e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   14b72:	80da      	strh	r2, [r3, #6]
   14b74:	e00f      	b.n	14b96 <last_radio_from_ppm+0x1de>
   14b76:	f64a 13cc 	movw	r3, #43468	; 0xa9cc
   14b7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b7e:	88db      	ldrh	r3, [r3, #6]
   14b80:	b21b      	sxth	r3, r3
   14b82:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   14b86:	da06      	bge.n	14b96 <last_radio_from_ppm+0x1de>
   14b88:	f64a 13cc 	movw	r3, #43468	; 0xa9cc
   14b8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b90:	f64d 2280 	movw	r2, #55936	; 0xda80
   14b94:	80da      	strh	r2, [r3, #6]
   14b96:	f64a 13b8 	movw	r3, #43448	; 0xa9b8
   14b9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b9e:	891b      	ldrh	r3, [r3, #8]
   14ba0:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   14ba4:	b29b      	uxth	r3, r3
   14ba6:	80fb      	strh	r3, [r7, #6]
   14ba8:	f64a 13e0 	movw	r3, #43488	; 0xa9e0
   14bac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14bb0:	891b      	ldrh	r3, [r3, #8]
   14bb2:	b21b      	sxth	r3, r3
   14bb4:	4618      	mov	r0, r3
   14bb6:	f002 f85b 	bl	16c70 <__aeabi_i2f>
   14bba:	4604      	mov	r4, r0
   14bbc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   14bc0:	4618      	mov	r0, r3
   14bc2:	f002 f855 	bl	16c70 <__aeabi_i2f>
   14bc6:	4603      	mov	r3, r0
   14bc8:	4618      	mov	r0, r3
   14bca:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   14bce:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   14bd2:	f002 f8a1 	bl	16d18 <__aeabi_fmul>
   14bd6:	4603      	mov	r3, r0
   14bd8:	4620      	mov	r0, r4
   14bda:	4619      	mov	r1, r3
   14bdc:	f001 ff94 	bl	16b08 <__addsf3>
   14be0:	4603      	mov	r3, r0
   14be2:	4618      	mov	r0, r3
   14be4:	f002 fa5e 	bl	170a4 <__aeabi_f2iz>
   14be8:	4603      	mov	r3, r0
   14bea:	b29a      	uxth	r2, r3
   14bec:	f64a 13e0 	movw	r3, #43488	; 0xa9e0
   14bf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14bf4:	811a      	strh	r2, [r3, #8]
   14bf6:	f64a 13b8 	movw	r3, #43448	; 0xa9b8
   14bfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14bfe:	895b      	ldrh	r3, [r3, #10]
   14c00:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   14c04:	b29b      	uxth	r3, r3
   14c06:	80fb      	strh	r3, [r7, #6]
   14c08:	f64a 13e0 	movw	r3, #43488	; 0xa9e0
   14c0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c10:	895b      	ldrh	r3, [r3, #10]
   14c12:	b21b      	sxth	r3, r3
   14c14:	4618      	mov	r0, r3
   14c16:	f002 f82b 	bl	16c70 <__aeabi_i2f>
   14c1a:	4604      	mov	r4, r0
   14c1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   14c20:	4618      	mov	r0, r3
   14c22:	f002 f825 	bl	16c70 <__aeabi_i2f>
   14c26:	4603      	mov	r3, r0
   14c28:	4618      	mov	r0, r3
   14c2a:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   14c2e:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   14c32:	f002 f871 	bl	16d18 <__aeabi_fmul>
   14c36:	4603      	mov	r3, r0
   14c38:	4620      	mov	r0, r4
   14c3a:	4619      	mov	r1, r3
   14c3c:	f001 ff64 	bl	16b08 <__addsf3>
   14c40:	4603      	mov	r3, r0
   14c42:	4618      	mov	r0, r3
   14c44:	f002 fa2e 	bl	170a4 <__aeabi_f2iz>
   14c48:	4603      	mov	r3, r0
   14c4a:	b29a      	uxth	r2, r3
   14c4c:	f64a 13e0 	movw	r3, #43488	; 0xa9e0
   14c50:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c54:	815a      	strh	r2, [r3, #10]
   14c56:	f64a 13b8 	movw	r3, #43448	; 0xa9b8
   14c5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c5e:	899b      	ldrh	r3, [r3, #12]
   14c60:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   14c64:	b29b      	uxth	r3, r3
   14c66:	80fb      	strh	r3, [r7, #6]
   14c68:	f64a 13e0 	movw	r3, #43488	; 0xa9e0
   14c6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c70:	899b      	ldrh	r3, [r3, #12]
   14c72:	b21b      	sxth	r3, r3
   14c74:	4618      	mov	r0, r3
   14c76:	f001 fffb 	bl	16c70 <__aeabi_i2f>
   14c7a:	4604      	mov	r4, r0
   14c7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   14c80:	4618      	mov	r0, r3
   14c82:	f001 fff5 	bl	16c70 <__aeabi_i2f>
   14c86:	4603      	mov	r3, r0
   14c88:	4618      	mov	r0, r3
   14c8a:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   14c8e:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   14c92:	f002 f841 	bl	16d18 <__aeabi_fmul>
   14c96:	4603      	mov	r3, r0
   14c98:	4620      	mov	r0, r4
   14c9a:	4619      	mov	r1, r3
   14c9c:	f001 ff34 	bl	16b08 <__addsf3>
   14ca0:	4603      	mov	r3, r0
   14ca2:	4618      	mov	r0, r3
   14ca4:	f002 f9fe 	bl	170a4 <__aeabi_f2iz>
   14ca8:	4603      	mov	r3, r0
   14caa:	b29a      	uxth	r2, r3
   14cac:	f64a 13e0 	movw	r3, #43488	; 0xa9e0
   14cb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14cb4:	819a      	strh	r2, [r3, #12]
   14cb6:	f64a 13b8 	movw	r3, #43448	; 0xa9b8
   14cba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14cbe:	89db      	ldrh	r3, [r3, #14]
   14cc0:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   14cc4:	b29b      	uxth	r3, r3
   14cc6:	80fb      	strh	r3, [r7, #6]
   14cc8:	f64a 13e0 	movw	r3, #43488	; 0xa9e0
   14ccc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14cd0:	89db      	ldrh	r3, [r3, #14]
   14cd2:	b21b      	sxth	r3, r3
   14cd4:	4618      	mov	r0, r3
   14cd6:	f001 ffcb 	bl	16c70 <__aeabi_i2f>
   14cda:	4604      	mov	r4, r0
   14cdc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   14ce0:	4618      	mov	r0, r3
   14ce2:	f001 ffc5 	bl	16c70 <__aeabi_i2f>
   14ce6:	4603      	mov	r3, r0
   14ce8:	4618      	mov	r0, r3
   14cea:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   14cee:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   14cf2:	f002 f811 	bl	16d18 <__aeabi_fmul>
   14cf6:	4603      	mov	r3, r0
   14cf8:	4620      	mov	r0, r4
   14cfa:	4619      	mov	r1, r3
   14cfc:	f001 ff04 	bl	16b08 <__addsf3>
   14d00:	4603      	mov	r3, r0
   14d02:	4618      	mov	r0, r3
   14d04:	f002 f9ce 	bl	170a4 <__aeabi_f2iz>
   14d08:	4603      	mov	r3, r0
   14d0a:	b29a      	uxth	r2, r3
   14d0c:	f64a 13e0 	movw	r3, #43488	; 0xa9e0
   14d10:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d14:	81da      	strh	r2, [r3, #14]
   14d16:	f64a 13b8 	movw	r3, #43448	; 0xa9b8
   14d1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d1e:	8a1b      	ldrh	r3, [r3, #16]
   14d20:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   14d24:	b29b      	uxth	r3, r3
   14d26:	80fb      	strh	r3, [r7, #6]
   14d28:	f64a 13e0 	movw	r3, #43488	; 0xa9e0
   14d2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d30:	8a1b      	ldrh	r3, [r3, #16]
   14d32:	b21b      	sxth	r3, r3
   14d34:	4618      	mov	r0, r3
   14d36:	f001 ff9b 	bl	16c70 <__aeabi_i2f>
   14d3a:	4604      	mov	r4, r0
   14d3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   14d40:	4618      	mov	r0, r3
   14d42:	f001 ff95 	bl	16c70 <__aeabi_i2f>
   14d46:	4603      	mov	r3, r0
   14d48:	4618      	mov	r0, r3
   14d4a:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   14d4e:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   14d52:	f001 ffe1 	bl	16d18 <__aeabi_fmul>
   14d56:	4603      	mov	r3, r0
   14d58:	4620      	mov	r0, r4
   14d5a:	4619      	mov	r1, r3
   14d5c:	f001 fed4 	bl	16b08 <__addsf3>
   14d60:	4603      	mov	r3, r0
   14d62:	4618      	mov	r0, r3
   14d64:	f002 f99e 	bl	170a4 <__aeabi_f2iz>
   14d68:	4603      	mov	r3, r0
   14d6a:	b29a      	uxth	r2, r3
   14d6c:	f64a 13e0 	movw	r3, #43488	; 0xa9e0
   14d70:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d74:	821a      	strh	r2, [r3, #16]
   14d76:	f64a 13f8 	movw	r3, #43512	; 0xa9f8
   14d7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d7e:	781b      	ldrb	r3, [r3, #0]
   14d80:	3301      	adds	r3, #1
   14d82:	b2da      	uxtb	r2, r3
   14d84:	f64a 13f8 	movw	r3, #43512	; 0xa9f8
   14d88:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d8c:	701a      	strb	r2, [r3, #0]
   14d8e:	f64a 13f8 	movw	r3, #43512	; 0xa9f8
   14d92:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d96:	781b      	ldrb	r3, [r3, #0]
   14d98:	2b0a      	cmp	r3, #10
   14d9a:	f040 8101 	bne.w	14fa0 <last_radio_from_ppm+0x5e8>
   14d9e:	f64a 13f8 	movw	r3, #43512	; 0xa9f8
   14da2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14da6:	2200      	movs	r2, #0
   14da8:	701a      	strb	r2, [r3, #0]
   14daa:	f64a 13e0 	movw	r3, #43488	; 0xa9e0
   14dae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14db2:	891a      	ldrh	r2, [r3, #8]
   14db4:	f64a 13cc 	movw	r3, #43468	; 0xa9cc
   14db8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14dbc:	811a      	strh	r2, [r3, #8]
   14dbe:	f64a 13e0 	movw	r3, #43488	; 0xa9e0
   14dc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14dc6:	2200      	movs	r2, #0
   14dc8:	811a      	strh	r2, [r3, #8]
   14dca:	f64a 13cc 	movw	r3, #43468	; 0xa9cc
   14dce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14dd2:	891b      	ldrh	r3, [r3, #8]
   14dd4:	b21b      	sxth	r3, r3
   14dd6:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   14dda:	dd07      	ble.n	14dec <last_radio_from_ppm+0x434>
   14ddc:	f64a 13cc 	movw	r3, #43468	; 0xa9cc
   14de0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14de4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   14de8:	811a      	strh	r2, [r3, #8]
   14dea:	e00f      	b.n	14e0c <last_radio_from_ppm+0x454>
   14dec:	f64a 13cc 	movw	r3, #43468	; 0xa9cc
   14df0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14df4:	891b      	ldrh	r3, [r3, #8]
   14df6:	b21b      	sxth	r3, r3
   14df8:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   14dfc:	da06      	bge.n	14e0c <last_radio_from_ppm+0x454>
   14dfe:	f64a 13cc 	movw	r3, #43468	; 0xa9cc
   14e02:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e06:	f64d 2280 	movw	r2, #55936	; 0xda80
   14e0a:	811a      	strh	r2, [r3, #8]
   14e0c:	f64a 13e0 	movw	r3, #43488	; 0xa9e0
   14e10:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e14:	895a      	ldrh	r2, [r3, #10]
   14e16:	f64a 13cc 	movw	r3, #43468	; 0xa9cc
   14e1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e1e:	815a      	strh	r2, [r3, #10]
   14e20:	f64a 13e0 	movw	r3, #43488	; 0xa9e0
   14e24:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e28:	2200      	movs	r2, #0
   14e2a:	815a      	strh	r2, [r3, #10]
   14e2c:	f64a 13cc 	movw	r3, #43468	; 0xa9cc
   14e30:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e34:	895b      	ldrh	r3, [r3, #10]
   14e36:	b21b      	sxth	r3, r3
   14e38:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   14e3c:	dd07      	ble.n	14e4e <last_radio_from_ppm+0x496>
   14e3e:	f64a 13cc 	movw	r3, #43468	; 0xa9cc
   14e42:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e46:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   14e4a:	815a      	strh	r2, [r3, #10]
   14e4c:	e00f      	b.n	14e6e <last_radio_from_ppm+0x4b6>
   14e4e:	f64a 13cc 	movw	r3, #43468	; 0xa9cc
   14e52:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e56:	895b      	ldrh	r3, [r3, #10]
   14e58:	b21b      	sxth	r3, r3
   14e5a:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   14e5e:	da06      	bge.n	14e6e <last_radio_from_ppm+0x4b6>
   14e60:	f64a 13cc 	movw	r3, #43468	; 0xa9cc
   14e64:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e68:	f64d 2280 	movw	r2, #55936	; 0xda80
   14e6c:	815a      	strh	r2, [r3, #10]
   14e6e:	f64a 13e0 	movw	r3, #43488	; 0xa9e0
   14e72:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e76:	899a      	ldrh	r2, [r3, #12]
   14e78:	f64a 13cc 	movw	r3, #43468	; 0xa9cc
   14e7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e80:	819a      	strh	r2, [r3, #12]
   14e82:	f64a 13e0 	movw	r3, #43488	; 0xa9e0
   14e86:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e8a:	2200      	movs	r2, #0
   14e8c:	819a      	strh	r2, [r3, #12]
   14e8e:	f64a 13cc 	movw	r3, #43468	; 0xa9cc
   14e92:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e96:	899b      	ldrh	r3, [r3, #12]
   14e98:	b21b      	sxth	r3, r3
   14e9a:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   14e9e:	dd07      	ble.n	14eb0 <last_radio_from_ppm+0x4f8>
   14ea0:	f64a 13cc 	movw	r3, #43468	; 0xa9cc
   14ea4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ea8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   14eac:	819a      	strh	r2, [r3, #12]
   14eae:	e00f      	b.n	14ed0 <last_radio_from_ppm+0x518>
   14eb0:	f64a 13cc 	movw	r3, #43468	; 0xa9cc
   14eb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14eb8:	899b      	ldrh	r3, [r3, #12]
   14eba:	b21b      	sxth	r3, r3
   14ebc:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   14ec0:	da06      	bge.n	14ed0 <last_radio_from_ppm+0x518>
   14ec2:	f64a 13cc 	movw	r3, #43468	; 0xa9cc
   14ec6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14eca:	f64d 2280 	movw	r2, #55936	; 0xda80
   14ece:	819a      	strh	r2, [r3, #12]
   14ed0:	f64a 13e0 	movw	r3, #43488	; 0xa9e0
   14ed4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ed8:	89da      	ldrh	r2, [r3, #14]
   14eda:	f64a 13cc 	movw	r3, #43468	; 0xa9cc
   14ede:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ee2:	81da      	strh	r2, [r3, #14]
   14ee4:	f64a 13e0 	movw	r3, #43488	; 0xa9e0
   14ee8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14eec:	2200      	movs	r2, #0
   14eee:	81da      	strh	r2, [r3, #14]
   14ef0:	f64a 13cc 	movw	r3, #43468	; 0xa9cc
   14ef4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ef8:	89db      	ldrh	r3, [r3, #14]
   14efa:	b21b      	sxth	r3, r3
   14efc:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   14f00:	dd07      	ble.n	14f12 <last_radio_from_ppm+0x55a>
   14f02:	f64a 13cc 	movw	r3, #43468	; 0xa9cc
   14f06:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f0a:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   14f0e:	81da      	strh	r2, [r3, #14]
   14f10:	e00f      	b.n	14f32 <last_radio_from_ppm+0x57a>
   14f12:	f64a 13cc 	movw	r3, #43468	; 0xa9cc
   14f16:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f1a:	89db      	ldrh	r3, [r3, #14]
   14f1c:	b21b      	sxth	r3, r3
   14f1e:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   14f22:	da06      	bge.n	14f32 <last_radio_from_ppm+0x57a>
   14f24:	f64a 13cc 	movw	r3, #43468	; 0xa9cc
   14f28:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f2c:	f64d 2280 	movw	r2, #55936	; 0xda80
   14f30:	81da      	strh	r2, [r3, #14]
   14f32:	f64a 13e0 	movw	r3, #43488	; 0xa9e0
   14f36:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f3a:	8a1a      	ldrh	r2, [r3, #16]
   14f3c:	f64a 13cc 	movw	r3, #43468	; 0xa9cc
   14f40:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f44:	821a      	strh	r2, [r3, #16]
   14f46:	f64a 13e0 	movw	r3, #43488	; 0xa9e0
   14f4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f4e:	2200      	movs	r2, #0
   14f50:	821a      	strh	r2, [r3, #16]
   14f52:	f64a 13cc 	movw	r3, #43468	; 0xa9cc
   14f56:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f5a:	8a1b      	ldrh	r3, [r3, #16]
   14f5c:	b21b      	sxth	r3, r3
   14f5e:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   14f62:	dd07      	ble.n	14f74 <last_radio_from_ppm+0x5bc>
   14f64:	f64a 13cc 	movw	r3, #43468	; 0xa9cc
   14f68:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f6c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   14f70:	821a      	strh	r2, [r3, #16]
   14f72:	e00f      	b.n	14f94 <last_radio_from_ppm+0x5dc>
   14f74:	f64a 13cc 	movw	r3, #43468	; 0xa9cc
   14f78:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f7c:	8a1b      	ldrh	r3, [r3, #16]
   14f7e:	b21b      	sxth	r3, r3
   14f80:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   14f84:	da06      	bge.n	14f94 <last_radio_from_ppm+0x5dc>
   14f86:	f64a 13cc 	movw	r3, #43468	; 0xa9cc
   14f8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f8e:	f64d 2280 	movw	r2, #55936	; 0xda80
   14f92:	821a      	strh	r2, [r3, #16]
   14f94:	f64a 13f2 	movw	r3, #43506	; 0xa9f2
   14f98:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f9c:	2201      	movs	r2, #1
   14f9e:	701a      	strb	r2, [r3, #0]
}
   14fa0:	370c      	adds	r7, #12
   14fa2:	46bd      	mov	sp, r7
   14fa4:	bd90      	pop	{r4, r7, pc}
   14fa6:	bf00      	nop

00014fa8 <spi_reset>:
volatile bool_t spi_was_interrupted = FALSE;

static volatile uint8_t idx_buf = 0;
static volatile uint8_t xor_in, xor_out;

void spi_reset(void) {
   14fa8:	b480      	push	{r7}
   14faa:	af00      	add	r7, sp, #0
  idx_buf = 0;
   14fac:	f64a 232c 	movw	r3, #43564	; 0xaa2c
   14fb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14fb4:	2200      	movs	r2, #0
   14fb6:	701a      	strb	r2, [r3, #0]
  xor_in = 0;
   14fb8:	f64a 232d 	movw	r3, #43565	; 0xaa2d
   14fbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14fc0:	2200      	movs	r2, #0
   14fc2:	701a      	strb	r2, [r3, #0]
  xor_out = ((uint8_t*)&to_mega128)[idx_buf];
   14fc4:	f64a 232c 	movw	r3, #43564	; 0xaa2c
   14fc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14fcc:	781b      	ldrb	r3, [r3, #0]
   14fce:	b2db      	uxtb	r3, r3
   14fd0:	461a      	mov	r2, r3
   14fd2:	f64a 2314 	movw	r3, #43540	; 0xaa14
   14fd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14fda:	4413      	add	r3, r2
   14fdc:	781a      	ldrb	r2, [r3, #0]
   14fde:	f64a 232e 	movw	r3, #43566	; 0xaa2e
   14fe2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14fe6:	701a      	strb	r2, [r3, #0]
  SPDR = xor_out;
   14fe8:	f242 030f 	movw	r3, #8207	; 0x200f
   14fec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ff0:	f64a 222e 	movw	r2, #43566	; 0xaa2e
   14ff4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14ff8:	7812      	ldrb	r2, [r2, #0]
   14ffa:	b2d2      	uxtb	r2, r2
   14ffc:	701a      	strb	r2, [r3, #0]
  mega128_receive_valid = FALSE;
   14ffe:	f64a 232a 	movw	r3, #43562	; 0xaa2a
   15002:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15006:	2200      	movs	r2, #0
   15008:	701a      	strb	r2, [r3, #0]
}
   1500a:	46bd      	mov	sp, r7
   1500c:	f85d 7b04 	ldr.w	r7, [sp], #4
   15010:	4770      	bx	lr
   15012:	bf00      	nop

00015014 <fbw_spi_init>:

void fbw_spi_init(void) {
   15014:	b480      	push	{r7}
   15016:	af00      	add	r7, sp, #0
  to_mega128.status = 0;
   15018:	f64a 2314 	movw	r3, #43540	; 0xaa14
   1501c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15020:	2200      	movs	r2, #0
   15022:	74da      	strb	r2, [r3, #19]
  to_mega128.nb_err = 0;
   15024:	f64a 2314 	movw	r3, #43540	; 0xaa14
   15028:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1502c:	2200      	movs	r2, #0
   1502e:	751a      	strb	r2, [r3, #20]

  /* set it pin output */
  //  IT_DDR |= _BV(IT_PIN);

  /* set MISO pin output */
  SPI_DDR |= _BV(SPI_MISO_PIN);
   15030:	f242 0317 	movw	r3, #8215	; 0x2017
   15034:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15038:	f242 0217 	movw	r2, #8215	; 0x2017
   1503c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   15040:	7812      	ldrb	r2, [r2, #0]
   15042:	b2d2      	uxtb	r2, r2
   15044:	f042 0210 	orr.w	r2, r2, #16
   15048:	b2d2      	uxtb	r2, r2
   1504a:	701a      	strb	r2, [r3, #0]
  /* enable SPI, slave, MSB first, sck idle low */
  SPCR = _BV(SPE);
   1504c:	f242 030d 	movw	r3, #8205	; 0x200d
   15050:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15054:	2240      	movs	r2, #64	; 0x40
   15056:	701a      	strb	r2, [r3, #0]
  /* enable interrupt */
  SPCR |= _BV(SPIE);
   15058:	f242 030d 	movw	r3, #8205	; 0x200d
   1505c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15060:	f242 020d 	movw	r2, #8205	; 0x200d
   15064:	f2c2 0200 	movt	r2, #8192	; 0x2000
   15068:	7812      	ldrb	r2, [r2, #0]
   1506a:	b2d2      	uxtb	r2, r2
   1506c:	f062 027f 	orn	r2, r2, #127	; 0x7f
   15070:	b2d2      	uxtb	r2, r2
   15072:	701a      	strb	r2, [r3, #0]
}
   15074:	46bd      	mov	sp, r7
   15076:	f85d 7b04 	ldr.w	r7, [sp], #4
   1507a:	4770      	bx	lr
   1507c:	0000      	movs	r0, r0
	...

00015080 <timer_init>:
 * running at Clk/1024.  For 16 Mhz clock, this will be every
 * 16384 microseconds, or 61 Hz.
 */
static inline void
timer_init( void )
{
   15080:	b480      	push	{r7}
   15082:	af00      	add	r7, sp, #0
  /* Timer1 @ Clk/1: System clock, ppm and servos pulses */
  TCCR1A		= 0x00;
   15084:	f242 032f 	movw	r3, #8239	; 0x202f
   15088:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1508c:	2200      	movs	r2, #0
   1508e:	701a      	strb	r2, [r3, #0]
  TCCR1B		= 0x01;
   15090:	f242 032e 	movw	r3, #8238	; 0x202e
   15094:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15098:	2201      	movs	r2, #1
   1509a:	701a      	strb	r2, [r3, #0]
  
  /* Timer2 @ Clk/1024: Periodic clock            */
  TCCR2		= 0x07;
   1509c:	f242 0325 	movw	r3, #8229	; 0x2025
   150a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150a4:	2207      	movs	r2, #7
   150a6:	701a      	strb	r2, [r3, #0]
}
   150a8:	46bd      	mov	sp, r7
   150aa:	f85d 7b04 	ldr.w	r7, [sp], #4
   150ae:	4770      	bx	lr

000150b0 <ppm_init>:
 *
 * JR might be rising edge clocked; set that as an option
 */
static inline void
ppm_init( void )
{
   150b0:	b480      	push	{r7}
   150b2:	af00      	add	r7, sp, #0
#if   PPM_RX_TYPE == RXFUTABA
  cbi( TCCR1B, ICES1 );
   150b4:	f242 032e 	movw	r3, #8238	; 0x202e
   150b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150bc:	f242 022e 	movw	r2, #8238	; 0x202e
   150c0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   150c4:	7812      	ldrb	r2, [r2, #0]
   150c6:	b2d2      	uxtb	r2, r2
   150c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   150cc:	b2d2      	uxtb	r2, r2
   150ce:	701a      	strb	r2, [r3, #0]
#else
#	error "ppm.h: Unknown receiver type in PPM_RX_TYPE"
#endif

  /* No noise cancelation */
  sbi( TCCR1B, ICNC1 );
   150d0:	f242 032e 	movw	r3, #8238	; 0x202e
   150d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150d8:	f242 022e 	movw	r2, #8238	; 0x202e
   150dc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   150e0:	7812      	ldrb	r2, [r2, #0]
   150e2:	b2d2      	uxtb	r2, r2
   150e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
   150e8:	b2d2      	uxtb	r2, r2
   150ea:	701a      	strb	r2, [r3, #0]
  
  /* Set ICP to input, no internal pull up */
  cbi( PPM_DDR, PPM_PIN);
   150ec:	f242 0317 	movw	r3, #8215	; 0x2017
   150f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150f4:	f242 0217 	movw	r2, #8215	; 0x2017
   150f8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   150fc:	7812      	ldrb	r2, [r2, #0]
   150fe:	b2d2      	uxtb	r2, r2
   15100:	f022 0201 	bic.w	r2, r2, #1
   15104:	b2d2      	uxtb	r2, r2
   15106:	701a      	strb	r2, [r3, #0]
  
  /* Enable interrupt on input capture */
  sbi( TIMSK, TICIE1 );
   15108:	f242 0337 	movw	r3, #8247	; 0x2037
   1510c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15110:	f242 0237 	movw	r2, #8247	; 0x2037
   15114:	f2c2 0200 	movt	r2, #8192	; 0x2000
   15118:	7812      	ldrb	r2, [r2, #0]
   1511a:	b2d2      	uxtb	r2, r2
   1511c:	f042 0220 	orr.w	r2, r2, #32
   15120:	b2d2      	uxtb	r2, r2
   15122:	701a      	strb	r2, [r3, #0]
}
   15124:	46bd      	mov	sp, r7
   15126:	f85d 7b04 	ldr.w	r7, [sp], #4
   1512a:	4770      	bx	lr

0001512c <to_autopilot_from_last_radio>:
/*   uart_transmit('\n'); */
/* } */


/* Prepare data to be sent to mcu0 */
void to_autopilot_from_last_radio (void) {
   1512c:	b580      	push	{r7, lr}
   1512e:	b082      	sub	sp, #8
   15130:	af00      	add	r7, sp, #0
  uint8_t i;
  for(i = 0; i < RADIO_CTL_NB; i++)
   15132:	2300      	movs	r3, #0
   15134:	71fb      	strb	r3, [r7, #7]
   15136:	e010      	b.n	1515a <to_autopilot_from_last_radio+0x2e>
     to_mega128.channels[i] = last_radio[i];
   15138:	79fa      	ldrb	r2, [r7, #7]
   1513a:	79f9      	ldrb	r1, [r7, #7]
   1513c:	f64a 13cc 	movw	r3, #43468	; 0xa9cc
   15140:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15144:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
   15148:	f64a 2314 	movw	r3, #43540	; 0xaa14
   1514c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15150:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]


/* Prepare data to be sent to mcu0 */
void to_autopilot_from_last_radio (void) {
  uint8_t i;
  for(i = 0; i < RADIO_CTL_NB; i++)
   15154:	79fb      	ldrb	r3, [r7, #7]
   15156:	3301      	adds	r3, #1
   15158:	71fb      	strb	r3, [r7, #7]
   1515a:	79fb      	ldrb	r3, [r7, #7]
   1515c:	2b08      	cmp	r3, #8
   1515e:	d9eb      	bls.n	15138 <to_autopilot_from_last_radio+0xc>
     to_mega128.channels[i] = last_radio[i];
  to_mega128.status = (radio_ok ? _BV(STATUS_RADIO_OK) : 0);
   15160:	f64a 23bc 	movw	r3, #43708	; 0xaabc
   15164:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15168:	781b      	ldrb	r3, [r3, #0]
   1516a:	2b00      	cmp	r3, #0
   1516c:	bf0c      	ite	eq
   1516e:	2300      	moveq	r3, #0
   15170:	2301      	movne	r3, #1
   15172:	b2db      	uxtb	r3, r3
   15174:	461a      	mov	r2, r3
   15176:	f64a 2314 	movw	r3, #43540	; 0xaa14
   1517a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1517e:	74da      	strb	r2, [r3, #19]
  to_mega128.status |= (radio_really_lost ? _BV(RADIO_REALLY_LOST) : 0);
   15180:	f64a 2314 	movw	r3, #43540	; 0xaa14
   15184:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15188:	7cdb      	ldrb	r3, [r3, #19]
   1518a:	b2da      	uxtb	r2, r3
   1518c:	f64a 23be 	movw	r3, #43710	; 0xaabe
   15190:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15194:	781b      	ldrb	r3, [r3, #0]
   15196:	2b00      	cmp	r3, #0
   15198:	d001      	beq.n	1519e <to_autopilot_from_last_radio+0x72>
   1519a:	2302      	movs	r3, #2
   1519c:	e000      	b.n	151a0 <to_autopilot_from_last_radio+0x74>
   1519e:	2300      	movs	r3, #0
   151a0:	4313      	orrs	r3, r2
   151a2:	b2db      	uxtb	r3, r3
   151a4:	b2da      	uxtb	r2, r3
   151a6:	f64a 2314 	movw	r3, #43540	; 0xaa14
   151aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151ae:	74da      	strb	r2, [r3, #19]
  if (last_radio_contains_avg_channels) {
   151b0:	f64a 13f2 	movw	r3, #43506	; 0xa9f2
   151b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151b8:	781b      	ldrb	r3, [r3, #0]
   151ba:	2b00      	cmp	r3, #0
   151bc:	d012      	beq.n	151e4 <to_autopilot_from_last_radio+0xb8>
    to_mega128.status |= _BV(AVERAGED_CHANNELS_SENT);
   151be:	f64a 2314 	movw	r3, #43540	; 0xaa14
   151c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151c6:	7cdb      	ldrb	r3, [r3, #19]
   151c8:	f043 0304 	orr.w	r3, r3, #4
   151cc:	b2da      	uxtb	r2, r3
   151ce:	f64a 2314 	movw	r3, #43540	; 0xaa14
   151d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151d6:	74da      	strb	r2, [r3, #19]
    last_radio_contains_avg_channels = FALSE;
   151d8:	f64a 13f2 	movw	r3, #43506	; 0xa9f2
   151dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151e0:	2200      	movs	r2, #0
   151e2:	701a      	strb	r2, [r3, #0]
  }
  to_mega128.ppm_cpt = last_ppm_cpt;
   151e4:	f64a 23c0 	movw	r3, #43712	; 0xaac0
   151e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151ec:	781a      	ldrb	r2, [r3, #0]
   151ee:	f64a 2314 	movw	r3, #43540	; 0xaa14
   151f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151f6:	749a      	strb	r2, [r3, #18]
#ifndef CTL_BRD_V1_1
  to_mega128.vsupply = VoltageOfAdc(vsupply_adc_buf.sum/AV_NB_SAMPLE) * 10;
   151f8:	f64a 2330 	movw	r3, #43568	; 0xaa30
   151fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15200:	881b      	ldrh	r3, [r3, #0]
   15202:	4618      	mov	r0, r3
   15204:	f001 f8e2 	bl	163cc <__aeabi_i2d>
   15208:	4602      	mov	r2, r0
   1520a:	460b      	mov	r3, r1
   1520c:	4610      	mov	r0, r2
   1520e:	4619      	mov	r1, r3
   15210:	a31b      	add	r3, pc, #108	; (adr r3, 15280 <to_autopilot_from_last_radio+0x154>)
   15212:	e9d3 2300 	ldrd	r2, r3, [r3]
   15216:	f001 f93f 	bl	16498 <__aeabi_dmul>
   1521a:	4602      	mov	r2, r0
   1521c:	460b      	mov	r3, r1
   1521e:	4610      	mov	r0, r2
   15220:	4619      	mov	r1, r3
   15222:	f04f 0200 	mov.w	r2, #0
   15226:	f04f 0300 	mov.w	r3, #0
   1522a:	f2c4 0340 	movt	r3, #16448	; 0x4040
   1522e:	f001 fa5d 	bl	166ec <__aeabi_ddiv>
   15232:	4602      	mov	r2, r0
   15234:	460b      	mov	r3, r1
   15236:	4610      	mov	r0, r2
   15238:	4619      	mov	r1, r3
   1523a:	a313      	add	r3, pc, #76	; (adr r3, 15288 <to_autopilot_from_last_radio+0x15c>)
   1523c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15240:	f000 ff78 	bl	16134 <__adddf3>
   15244:	4602      	mov	r2, r0
   15246:	460b      	mov	r3, r1
   15248:	4610      	mov	r0, r2
   1524a:	4619      	mov	r1, r3
   1524c:	f04f 0200 	mov.w	r2, #0
   15250:	f04f 0300 	mov.w	r3, #0
   15254:	f2c4 0324 	movt	r3, #16420	; 0x4024
   15258:	f001 f91e 	bl	16498 <__aeabi_dmul>
   1525c:	4602      	mov	r2, r0
   1525e:	460b      	mov	r3, r1
   15260:	4610      	mov	r0, r2
   15262:	4619      	mov	r1, r3
   15264:	f001 fbda 	bl	16a1c <__aeabi_d2uiz>
   15268:	4603      	mov	r3, r0
   1526a:	b2da      	uxtb	r2, r3
   1526c:	f64a 2314 	movw	r3, #43540	; 0xaa14
   15270:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15274:	755a      	strb	r2, [r3, #21]
#else
  to_mega128.vsupply = 0;
#endif
}
   15276:	3708      	adds	r7, #8
   15278:	46bd      	mov	sp, r7
   1527a:	bd80      	pop	{r7, pc}
   1527c:	f3af 8000 	nop.w
   15280:	1eb851ec 	.word	0x1eb851ec
   15284:	3f91eb85 	.word	0x3f91eb85
   15288:	020c49ba 	.word	0x020c49ba
   1528c:	3fb6872b 	.word	0x3fb6872b

00015290 <send_data_to_autopilot_task>:

void send_data_to_autopilot_task(void)
{
   15290:	b580      	push	{r7, lr}
   15292:	af00      	add	r7, sp, #0
	//vPrintString("S_2 send_data_to_autopilot_task start! \n\r"); //SunnyBeike

    // modified by wanbo
//   if ( !SpiIsSelected() && spi_was_interrupted ) 
   {
      spi_was_interrupted = FALSE;
   15294:	f64a 232b 	movw	r3, #43563	; 0xaa2b
   15298:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1529c:	2200      	movs	r2, #0
   1529e:	701a      	strb	r2, [r3, #0]
      to_autopilot_from_last_radio();
   152a0:	f7ff ff44 	bl	1512c <to_autopilot_from_last_radio>
      spi_reset();
   152a4:	f7ff fe80 	bl	14fa8 <spi_reset>
   }
	//vPrintString("S_2 send_data_to_autopilot_task end! \n\r"); //SunnyBeike

}
   152a8:	bd80      	pop	{r7, pc}
   152aa:	bf00      	nop

000152ac <fbw_init>:
	static uint8_t _1Hz;
	static uint8_t _20Hz;
#endif
*/

void fbw_init(void) {
   152ac:	b580      	push	{r7, lr}
   152ae:	af00      	add	r7, sp, #0
  uart_init_tx();
   152b0:	f000 fb02 	bl	158b8 <uart_init_tx>
  uart_print_string("FBW Booting $Id: main.c,v 1.3 2008/10/22 19:41:19 casse Exp $\n\r");
   152b4:	f247 303c 	movw	r0, #29500	; 0x733c
   152b8:	f2c0 0001 	movt	r0, #1
   152bc:	f000 fbda 	bl	15a74 <uart_print_string>

#ifndef CTL_BRD_V1_1
  fbw_adc_init();
   152c0:	f7ff fab2 	bl	14828 <fbw_adc_init>
  fbw_adc_buf_channel(3, &vsupply_adc_buf);
   152c4:	2003      	movs	r0, #3
   152c6:	f64a 2130 	movw	r1, #43568	; 0xaa30
   152ca:	f2c2 0100 	movt	r1, #8192	; 0x2000
   152ce:	f7ff fa97 	bl	14800 <fbw_adc_buf_channel>
  fbw_adc_buf_channel(6, &vservos_adc_buf);
   152d2:	2006      	movs	r0, #6
   152d4:	f64a 2174 	movw	r1, #43636	; 0xaa74
   152d8:	f2c2 0100 	movt	r1, #8192	; 0x2000
   152dc:	f7ff fa90 	bl	14800 <fbw_adc_buf_channel>
#endif
  timer_init();
   152e0:	f7ff fece 	bl	15080 <timer_init>
  servo_init();
   152e4:	f000 f894 	bl	15410 <servo_init>
  ppm_init();
   152e8:	f7ff fee2 	bl	150b0 <ppm_init>
  fbw_spi_init();
   152ec:	f7ff fe92 	bl	15014 <fbw_spi_init>
  //sei(); //FN
}
   152f0:	bd80      	pop	{r7, pc}
   152f2:	bf00      	nop

000152f4 <test_ppm_task>:
  return 0;
}
#endif
*/
void test_ppm_task(void)
{
   152f4:	b580      	push	{r7, lr}
   152f6:	af00      	add	r7, sp, #0
	//vPrintString("S_1 test_ppm_task start! \n\r"); //SunnyBeike
    // modified by wanbo
    //if( ppm_valid ) 
    {
      ppm_valid = FALSE;
   152f8:	f64a 13f3 	movw	r3, #43507	; 0xa9f3
   152fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15300:	2200      	movs	r2, #0
   15302:	701a      	strb	r2, [r3, #0]
      ppm_cpt++;
   15304:	f64a 23bf 	movw	r3, #43711	; 0xaabf
   15308:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1530c:	781b      	ldrb	r3, [r3, #0]
   1530e:	3301      	adds	r3, #1
   15310:	b2da      	uxtb	r2, r3
   15312:	f64a 23bf 	movw	r3, #43711	; 0xaabf
   15316:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1531a:	701a      	strb	r2, [r3, #0]
      radio_ok = TRUE;
   1531c:	f64a 23bc 	movw	r3, #43708	; 0xaabc
   15320:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15324:	2201      	movs	r2, #1
   15326:	701a      	strb	r2, [r3, #0]
      radio_really_lost = FALSE;
   15328:	f64a 23be 	movw	r3, #43710	; 0xaabe
   1532c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15330:	2200      	movs	r2, #0
   15332:	701a      	strb	r2, [r3, #0]
      time_since_last_ppm = 0;
   15334:	f64a 23ba 	movw	r3, #43706	; 0xaaba
   15338:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1533c:	2200      	movs	r2, #0
   1533e:	801a      	strh	r2, [r3, #0]
      last_radio_from_ppm();
   15340:	f7ff fb3a 	bl	149b8 <last_radio_from_ppm>
      //if (last_radio_contains_avg_channels) 
      {
	mode = MODE_OF_PPRZ(last_radio[RADIO_MODE]);
   15344:	f64a 13cc 	movw	r3, #43468	; 0xa9cc
   15348:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1534c:	891b      	ldrh	r3, [r3, #8]
   1534e:	b21b      	sxth	r3, r3
   15350:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
   15354:	bfb4      	ite	lt
   15356:	2300      	movlt	r3, #0
   15358:	2301      	movge	r3, #1
   1535a:	b2db      	uxtb	r3, r3
   1535c:	461a      	mov	r2, r3
   1535e:	f64a 23b8 	movw	r3, #43704	; 0xaab8
   15362:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15366:	701a      	strb	r2, [r3, #0]
      }
      if (mode == MODE_MANUAL) 
   15368:	f64a 23b8 	movw	r3, #43704	; 0xaab8
   1536c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15370:	781b      	ldrb	r3, [r3, #0]
   15372:	2b00      	cmp	r3, #0
   15374:	d105      	bne.n	15382 <test_ppm_task+0x8e>
      {
	servo_set(last_radio);
   15376:	f64a 10cc 	movw	r0, #43468	; 0xa9cc
   1537a:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1537e:	f000 f925 	bl	155cc <servo_set>
      }
    } 
    //else if (mode == MODE_MANUAL && radio_really_lost) 
    {
      mode = MODE_AUTO;
   15382:	f64a 23b8 	movw	r3, #43704	; 0xaab8
   15386:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1538a:	2201      	movs	r2, #1
   1538c:	701a      	strb	r2, [r3, #0]
    }
    //if (time_since_last_ppm >= STALLED_TIME) 
    {
      radio_ok = FALSE;
   1538e:	f64a 23bc 	movw	r3, #43708	; 0xaabc
   15392:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15396:	2200      	movs	r2, #0
   15398:	701a      	strb	r2, [r3, #0]
    }
    //if (time_since_last_ppm >= REALLY_STALLED_TIME) 
    {
      radio_really_lost = TRUE;
   1539a:	f64a 23be 	movw	r3, #43710	; 0xaabe
   1539e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   153a2:	2201      	movs	r2, #1
   153a4:	701a      	strb	r2, [r3, #0]
    }
	//vPrintString("S_1 test_ppm_task end! \n\r"); //SunnyBeike

}
   153a6:	bd80      	pop	{r7, pc}

000153a8 <check_failsafe_task>:
void check_failsafe_task(void)
{
   153a8:	b580      	push	{r7, lr}
   153aa:	af00      	add	r7, sp, #0
	//vPrintString("S_9 check_failsafe_task start! \n\r"); //SunnyBeike
    //modified by wanbo
    //if ((mode == MODE_MANUAL && !radio_ok) || (mode == MODE_AUTO && !mega128_ok)) 
    {
      servo_set(failsafe);
   153ac:	f247 3028 	movw	r0, #29480	; 0x7328
   153b0:	f2c0 0001 	movt	r0, #1
   153b4:	f000 f90a 	bl	155cc <servo_set>
    }
	//vPrintString("S_9 check_failsafe_task end! \n\r"); //SunnyBeike
}
   153b8:	bd80      	pop	{r7, pc}
   153ba:	bf00      	nop

000153bc <check_mega128_values_task>:
void check_mega128_values_task(void)
{
   153bc:	b580      	push	{r7, lr}
   153be:	af00      	add	r7, sp, #0
	//vPrintString("S_8 check_mega128_values_task start! \n\r"); //SunnyBeike
// modified by wanbo
     //if ( !SpiIsSelected() && spi_was_interrupted ) 
     {
         if (mega128_receive_valid)
   153c0:	f64a 232a 	movw	r3, #43562	; 0xaa2a
   153c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   153c8:	781b      	ldrb	r3, [r3, #0]
   153ca:	b2db      	uxtb	r3, r3
   153cc:	2b00      	cmp	r3, #0
   153ce:	d018      	beq.n	15402 <check_mega128_values_task+0x46>
         { 
             time_since_last_mega128 = 0;
   153d0:	f64a 23b9 	movw	r3, #43705	; 0xaab9
   153d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   153d8:	2200      	movs	r2, #0
   153da:	701a      	strb	r2, [r3, #0]
             mega128_ok = TRUE;
   153dc:	f64a 23bd 	movw	r3, #43709	; 0xaabd
   153e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   153e4:	2201      	movs	r2, #1
   153e6:	701a      	strb	r2, [r3, #0]
             if (mode == MODE_AUTO)
   153e8:	f64a 23b8 	movw	r3, #43704	; 0xaab8
   153ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   153f0:	781b      	ldrb	r3, [r3, #0]
   153f2:	2b01      	cmp	r3, #1
   153f4:	d105      	bne.n	15402 <check_mega128_values_task+0x46>
                 servo_set(from_mega128.channels);
   153f6:	f64a 10fc 	movw	r0, #43516	; 0xa9fc
   153fa:	f2c2 0000 	movt	r0, #8192	; 0x2000
   153fe:	f000 f8e5 	bl	155cc <servo_set>
         }
     }
     //if (time_since_last_mega128 == STALLED_TIME) 
     {
         mega128_ok = FALSE;
   15402:	f64a 23bd 	movw	r3, #43709	; 0xaabd
   15406:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1540a:	2200      	movs	r2, #0
   1540c:	701a      	strb	r2, [r3, #0]
     }
	//vPrintString("S_8 check_mega128_values_task end! \n\r"); //SunnyBeike
}
   1540e:	bd80      	pop	{r7, pc}

00015410 <servo_init>:
 *
 * Ideally, you can use two decade counters to drive 20 servos.
 */
void
servo_init( void )
{
   15410:	b480      	push	{r7}
   15412:	b083      	sub	sp, #12
   15414:	af00      	add	r7, sp, #0
  uint8_t			i;

  /* Configure the reset and clock lines */
  _4017_RESET_DDR |= _BV(_4017_RESET_PIN);
   15416:	f242 0311 	movw	r3, #8209	; 0x2011
   1541a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1541e:	f242 0211 	movw	r2, #8209	; 0x2011
   15422:	f2c2 0200 	movt	r2, #8192	; 0x2000
   15426:	7812      	ldrb	r2, [r2, #0]
   15428:	b2d2      	uxtb	r2, r2
   1542a:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1542e:	b2d2      	uxtb	r2, r2
   15430:	701a      	strb	r2, [r3, #0]
  _4017_CLOCK_DDR |= _BV(_4017_CLOCK_PIN);
   15432:	f242 0317 	movw	r3, #8215	; 0x2017
   15436:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1543a:	f242 0217 	movw	r2, #8215	; 0x2017
   1543e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   15442:	7812      	ldrb	r2, [r2, #0]
   15444:	b2d2      	uxtb	r2, r2
   15446:	f042 0202 	orr.w	r2, r2, #2
   1544a:	b2d2      	uxtb	r2, r2
   1544c:	701a      	strb	r2, [r3, #0]

  /* Reset the decade counter */
  sbi( _4017_RESET_PORT, _4017_RESET_PIN );
   1544e:	f242 0312 	movw	r3, #8210	; 0x2012
   15452:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15456:	f242 0212 	movw	r2, #8210	; 0x2012
   1545a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1545e:	7812      	ldrb	r2, [r2, #0]
   15460:	b2d2      	uxtb	r2, r2
   15462:	f062 027f 	orn	r2, r2, #127	; 0x7f
   15466:	b2d2      	uxtb	r2, r2
   15468:	701a      	strb	r2, [r3, #0]

  /* Lower the regular servo line */
  cbi( _4017_CLOCK_PORT, _4017_CLOCK_PIN );
   1546a:	f242 0318 	movw	r3, #8216	; 0x2018
   1546e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15472:	f242 0218 	movw	r2, #8216	; 0x2018
   15476:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1547a:	7812      	ldrb	r2, [r2, #0]
   1547c:	b2d2      	uxtb	r2, r2
   1547e:	f022 0202 	bic.w	r2, r2, #2
   15482:	b2d2      	uxtb	r2, r2
   15484:	701a      	strb	r2, [r3, #0]

  /* Set all servos at their midpoints */
  for( i=0 ; i < _4017_NB_CHANNELS ; i++ )
   15486:	2300      	movs	r3, #0
   15488:	71fb      	strb	r3, [r7, #7]
   1548a:	e00b      	b.n	154a4 <servo_init+0x94>
    //    servo_widths[i] = SERVO_MIN;
    servo_widths[i] = (SERVO_MIN+SERVO_MAX)/2;
   1548c:	79fa      	ldrb	r2, [r7, #7]
   1548e:	f64a 23c4 	movw	r3, #43716	; 0xaac4
   15492:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15496:	f645 51c0 	movw	r1, #24000	; 0x5dc0
   1549a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

  /* Lower the regular servo line */
  cbi( _4017_CLOCK_PORT, _4017_CLOCK_PIN );

  /* Set all servos at their midpoints */
  for( i=0 ; i < _4017_NB_CHANNELS ; i++ )
   1549e:	79fb      	ldrb	r3, [r7, #7]
   154a0:	3301      	adds	r3, #1
   154a2:	71fb      	strb	r3, [r7, #7]
   154a4:	79fb      	ldrb	r3, [r7, #7]
   154a6:	2b09      	cmp	r3, #9
   154a8:	d9f0      	bls.n	1548c <servo_init+0x7c>
    //    servo_widths[i] = SERVO_MIN;
    servo_widths[i] = (SERVO_MIN+SERVO_MAX)/2;
	
  /* Set servos to go off some long time from now */
  SERVO_OCR	= 32768ul;
   154aa:	f242 032a 	movw	r3, #8234	; 0x202a
   154ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   154b2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   154b6:	801a      	strh	r2, [r3, #0]

  /*
   * Configure output compare to toggle the output bits.
   */
  TCCR1A |=  _BV(SERVO_COM0 );
   154b8:	f242 032f 	movw	r3, #8239	; 0x202f
   154bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   154c0:	f242 022f 	movw	r2, #8239	; 0x202f
   154c4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   154c8:	7812      	ldrb	r2, [r2, #0]
   154ca:	b2d2      	uxtb	r2, r2
   154cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   154d0:	b2d2      	uxtb	r2, r2
   154d2:	701a      	strb	r2, [r3, #0]
	
  /* Clear the interrupt flags in case they are set */
  TIFR = _BV(SERVO_FLAG);
   154d4:	f242 0336 	movw	r3, #8246	; 0x2036
   154d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   154dc:	2210      	movs	r2, #16
   154de:	701a      	strb	r2, [r3, #0]

  /* Unassert the decade counter reset to start it running */
  cbi( _4017_RESET_PORT, _4017_RESET_PIN );
   154e0:	f242 0312 	movw	r3, #8210	; 0x2012
   154e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   154e8:	f242 0212 	movw	r2, #8210	; 0x2012
   154ec:	f2c2 0200 	movt	r2, #8192	; 0x2000
   154f0:	7812      	ldrb	r2, [r2, #0]
   154f2:	b2d2      	uxtb	r2, r2
   154f4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   154f8:	b2d2      	uxtb	r2, r2
   154fa:	701a      	strb	r2, [r3, #0]

  /* Enable our output compare interrupts */
  TIMSK |= _BV(SERVO_ENABLE );
   154fc:	f242 0337 	movw	r3, #8247	; 0x2037
   15500:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15504:	f242 0237 	movw	r2, #8247	; 0x2037
   15508:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1550c:	7812      	ldrb	r2, [r2, #0]
   1550e:	b2d2      	uxtb	r2, r2
   15510:	f042 0210 	orr.w	r2, r2, #16
   15514:	b2d2      	uxtb	r2, r2
   15516:	701a      	strb	r2, [r3, #0]
}
   15518:	370c      	adds	r7, #12
   1551a:	46bd      	mov	sp, r7
   1551c:	f85d 7b04 	ldr.w	r7, [sp], #4
   15520:	4770      	bx	lr
   15522:	bf00      	nop

00015524 <servo_set_one>:

  servo++;
}
#endif

void servo_set_one(uint8_t servo, uint16_t value_us) {
   15524:	b480      	push	{r7}
   15526:	b083      	sub	sp, #12
   15528:	af00      	add	r7, sp, #0
   1552a:	4602      	mov	r2, r0
   1552c:	460b      	mov	r3, r1
   1552e:	71fa      	strb	r2, [r7, #7]
   15530:	80bb      	strh	r3, [r7, #4]
  servo_widths[servo] = ChopServo(CLOCK*value_us);
   15532:	79f9      	ldrb	r1, [r7, #7]
   15534:	88bb      	ldrh	r3, [r7, #4]
   15536:	011b      	lsls	r3, r3, #4
   15538:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   1553c:	d308      	bcc.n	15550 <servo_set_one+0x2c>
   1553e:	88bb      	ldrh	r3, [r7, #4]
   15540:	011b      	lsls	r3, r3, #4
   15542:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   15546:	bf28      	it	cs
   15548:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   1554c:	b29a      	uxth	r2, r3
   1554e:	e001      	b.n	15554 <servo_set_one+0x30>
   15550:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   15554:	f64a 23c4 	movw	r3, #43716	; 0xaac4
   15558:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1555c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
}
   15560:	370c      	adds	r7, #12
   15562:	46bd      	mov	sp, r7
   15564:	f85d 7b04 	ldr.w	r7, [sp], #4
   15568:	4770      	bx	lr
   1556a:	bf00      	nop

0001556c <servo_transmit>:

void 
servo_transmit(void) {
   1556c:	b580      	push	{r7, lr}
   1556e:	b082      	sub	sp, #8
   15570:	af00      	add	r7, sp, #0
  uint8_t servo;
	//vPrintString("S_10 servo_transmit start! \n\r"); //SunnyBeike
  uart_transmit((uint8_t)0); uart_transmit((uint8_t)0);
   15572:	2000      	movs	r0, #0
   15574:	f000 f9e6 	bl	15944 <uart_transmit>
   15578:	2000      	movs	r0, #0
   1557a:	f000 f9e3 	bl	15944 <uart_transmit>

  for(servo = 0; servo < _4017_NB_CHANNELS; servo++) {
   1557e:	2300      	movs	r3, #0
   15580:	71fb      	strb	r3, [r7, #7]
   15582:	e01a      	b.n	155ba <servo_transmit+0x4e>
    uart_transmit((uint8_t)(servo_widths[servo] >> 8));
   15584:	79fa      	ldrb	r2, [r7, #7]
   15586:	f64a 23c4 	movw	r3, #43716	; 0xaac4
   1558a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1558e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   15592:	0a1b      	lsrs	r3, r3, #8
   15594:	b29b      	uxth	r3, r3
   15596:	b2db      	uxtb	r3, r3
   15598:	4618      	mov	r0, r3
   1559a:	f000 f9d3 	bl	15944 <uart_transmit>
    uart_transmit((uint8_t)(servo_widths[servo] & 0xff));
   1559e:	79fa      	ldrb	r2, [r7, #7]
   155a0:	f64a 23c4 	movw	r3, #43716	; 0xaac4
   155a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   155a8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   155ac:	b2db      	uxtb	r3, r3
   155ae:	4618      	mov	r0, r3
   155b0:	f000 f9c8 	bl	15944 <uart_transmit>
servo_transmit(void) {
  uint8_t servo;
	//vPrintString("S_10 servo_transmit start! \n\r"); //SunnyBeike
  uart_transmit((uint8_t)0); uart_transmit((uint8_t)0);

  for(servo = 0; servo < _4017_NB_CHANNELS; servo++) {
   155b4:	79fb      	ldrb	r3, [r7, #7]
   155b6:	3301      	adds	r3, #1
   155b8:	71fb      	strb	r3, [r7, #7]
   155ba:	79fb      	ldrb	r3, [r7, #7]
   155bc:	2b09      	cmp	r3, #9
   155be:	d9e1      	bls.n	15584 <servo_transmit+0x18>
    uart_transmit((uint8_t)(servo_widths[servo] >> 8));
    uart_transmit((uint8_t)(servo_widths[servo] & 0xff));
  }
  uart_transmit((uint8_t)'\n');
   155c0:	200a      	movs	r0, #10
   155c2:	f000 f9bf 	bl	15944 <uart_transmit>
	//vPrintString("S_10 servo_transmit end! \n\r"); //SunnyBeike
}
   155c6:	3708      	adds	r7, #8
   155c8:	46bd      	mov	sp, r7
   155ca:	bd80      	pop	{r7, pc}

000155cc <servo_set>:
 *
 * defines how servos react to radio control or autopilot channels
 *
 */

void servo_set(const pprz_t values[]) {
   155cc:	b5b0      	push	{r4, r5, r7, lr}
   155ce:	b084      	sub	sp, #16
   155d0:	af00      	add	r7, sp, #0
   155d2:	6078      	str	r0, [r7, #4]
  ServoSet(values); /*Generated from airframe.xml */
   155d4:	687b      	ldr	r3, [r7, #4]
   155d6:	330a      	adds	r3, #10
   155d8:	881b      	ldrh	r3, [r3, #0]
   155da:	b21b      	sxth	r3, r3
   155dc:	005b      	lsls	r3, r3, #1
   155de:	4618      	mov	r0, r3
   155e0:	f000 fef4 	bl	163cc <__aeabi_i2d>
   155e4:	4602      	mov	r2, r0
   155e6:	460b      	mov	r3, r1
   155e8:	4610      	mov	r0, r2
   155ea:	4619      	mov	r1, r3
   155ec:	a3a6      	add	r3, pc, #664	; (adr r3, 15888 <servo_set+0x2bc>)
   155ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   155f2:	f000 ff51 	bl	16498 <__aeabi_dmul>
   155f6:	4602      	mov	r2, r0
   155f8:	460b      	mov	r3, r1
   155fa:	4610      	mov	r0, r2
   155fc:	4619      	mov	r1, r3
   155fe:	f001 f9e5 	bl	169cc <__aeabi_d2iz>
   15602:	4603      	mov	r3, r0
   15604:	b29b      	uxth	r3, r3
   15606:	b29b      	uxth	r3, r3
   15608:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
   1560c:	81fb      	strh	r3, [r7, #14]
   1560e:	89fb      	ldrh	r3, [r7, #14]
   15610:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   15614:	d307      	bcc.n	15626 <servo_set+0x5a>
   15616:	89fb      	ldrh	r3, [r7, #14]
   15618:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   1561c:	bf28      	it	cs
   1561e:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   15622:	b29a      	uxth	r2, r3
   15624:	e001      	b.n	1562a <servo_set+0x5e>
   15626:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   1562a:	f64a 23c4 	movw	r3, #43716	; 0xaac4
   1562e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15632:	80da      	strh	r2, [r3, #6]
   15634:	687b      	ldr	r3, [r7, #4]
   15636:	881b      	ldrh	r3, [r3, #0]
   15638:	b21b      	sxth	r3, r3
   1563a:	005b      	lsls	r3, r3, #1
   1563c:	4618      	mov	r0, r3
   1563e:	f000 fec5 	bl	163cc <__aeabi_i2d>
   15642:	4602      	mov	r2, r0
   15644:	460b      	mov	r3, r1
   15646:	4610      	mov	r0, r2
   15648:	4619      	mov	r1, r3
   1564a:	a38f      	add	r3, pc, #572	; (adr r3, 15888 <servo_set+0x2bc>)
   1564c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15650:	f000 ff22 	bl	16498 <__aeabi_dmul>
   15654:	4602      	mov	r2, r0
   15656:	460b      	mov	r3, r1
   15658:	4610      	mov	r0, r2
   1565a:	4619      	mov	r1, r3
   1565c:	f001 f9b6 	bl	169cc <__aeabi_d2iz>
   15660:	4603      	mov	r3, r0
   15662:	b29b      	uxth	r3, r3
   15664:	b29b      	uxth	r3, r3
   15666:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
   1566a:	81fb      	strh	r3, [r7, #14]
   1566c:	89fb      	ldrh	r3, [r7, #14]
   1566e:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   15672:	d307      	bcc.n	15684 <servo_set+0xb8>
   15674:	89fb      	ldrh	r3, [r7, #14]
   15676:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   1567a:	bf28      	it	cs
   1567c:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   15680:	b29a      	uxth	r2, r3
   15682:	e001      	b.n	15688 <servo_set+0xbc>
   15684:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   15688:	f64a 23c4 	movw	r3, #43716	; 0xaac4
   1568c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15690:	825a      	strh	r2, [r3, #18]
   15692:	687b      	ldr	r3, [r7, #4]
   15694:	3304      	adds	r3, #4
   15696:	881b      	ldrh	r3, [r3, #0]
   15698:	b21b      	sxth	r3, r3
   1569a:	4618      	mov	r0, r3
   1569c:	f000 fe96 	bl	163cc <__aeabi_i2d>
   156a0:	4602      	mov	r2, r0
   156a2:	460b      	mov	r3, r1
   156a4:	4610      	mov	r0, r2
   156a6:	4619      	mov	r1, r3
   156a8:	a379      	add	r3, pc, #484	; (adr r3, 15890 <servo_set+0x2c4>)
   156aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   156ae:	f000 fef3 	bl	16498 <__aeabi_dmul>
   156b2:	4602      	mov	r2, r0
   156b4:	460b      	mov	r3, r1
   156b6:	4610      	mov	r0, r2
   156b8:	4619      	mov	r1, r3
   156ba:	f001 f987 	bl	169cc <__aeabi_d2iz>
   156be:	4603      	mov	r3, r0
   156c0:	b29b      	uxth	r3, r3
   156c2:	b29b      	uxth	r3, r3
   156c4:	f503 43bf 	add.w	r3, r3, #24448	; 0x5f80
   156c8:	3320      	adds	r3, #32
   156ca:	81fb      	strh	r3, [r7, #14]
   156cc:	89fb      	ldrh	r3, [r7, #14]
   156ce:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   156d2:	d307      	bcc.n	156e4 <servo_set+0x118>
   156d4:	89fb      	ldrh	r3, [r7, #14]
   156d6:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   156da:	bf28      	it	cs
   156dc:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   156e0:	b29a      	uxth	r2, r3
   156e2:	e001      	b.n	156e8 <servo_set+0x11c>
   156e4:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   156e8:	f64a 23c4 	movw	r3, #43716	; 0xaac4
   156ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   156f0:	819a      	strh	r2, [r3, #12]
   156f2:	687b      	ldr	r3, [r7, #4]
   156f4:	885b      	ldrh	r3, [r3, #2]
   156f6:	81bb      	strh	r3, [r7, #12]
   156f8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   156fc:	2b00      	cmp	r3, #0
   156fe:	dd06      	ble.n	1570e <servo_set+0x142>
   15700:	f04f 0400 	mov.w	r4, #0
   15704:	f04f 0500 	mov.w	r5, #0
   15708:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
   1570c:	e002      	b.n	15714 <servo_set+0x148>
   1570e:	a562      	add	r5, pc, #392	; (adr r5, 15898 <servo_set+0x2cc>)
   15710:	e9d5 4500 	ldrd	r4, r5, [r5]
   15714:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   15718:	4618      	mov	r0, r3
   1571a:	f000 fe57 	bl	163cc <__aeabi_i2d>
   1571e:	4602      	mov	r2, r0
   15720:	460b      	mov	r3, r1
   15722:	4620      	mov	r0, r4
   15724:	4629      	mov	r1, r5
   15726:	f000 feb7 	bl	16498 <__aeabi_dmul>
   1572a:	4602      	mov	r2, r0
   1572c:	460b      	mov	r3, r1
   1572e:	4610      	mov	r0, r2
   15730:	4619      	mov	r1, r3
   15732:	a35b      	add	r3, pc, #364	; (adr r3, 158a0 <servo_set+0x2d4>)
   15734:	e9d3 2300 	ldrd	r2, r3, [r3]
   15738:	f000 feae 	bl	16498 <__aeabi_dmul>
   1573c:	4602      	mov	r2, r0
   1573e:	460b      	mov	r3, r1
   15740:	4610      	mov	r0, r2
   15742:	4619      	mov	r1, r3
   15744:	f001 f942 	bl	169cc <__aeabi_d2iz>
   15748:	4603      	mov	r3, r0
   1574a:	b29b      	uxth	r3, r3
   1574c:	b29b      	uxth	r3, r3
   1574e:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
   15752:	81fb      	strh	r3, [r7, #14]
   15754:	89fb      	ldrh	r3, [r7, #14]
   15756:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   1575a:	d307      	bcc.n	1576c <servo_set+0x1a0>
   1575c:	89fb      	ldrh	r3, [r7, #14]
   1575e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   15762:	bf28      	it	cs
   15764:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   15768:	b29a      	uxth	r2, r3
   1576a:	e001      	b.n	15770 <servo_set+0x1a4>
   1576c:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   15770:	f64a 23c4 	movw	r3, #43716	; 0xaac4
   15774:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15778:	801a      	strh	r2, [r3, #0]
   1577a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   1577e:	2b00      	cmp	r3, #0
   15780:	dd03      	ble.n	1578a <servo_set+0x1be>
   15782:	a545      	add	r5, pc, #276	; (adr r5, 15898 <servo_set+0x2cc>)
   15784:	e9d5 4500 	ldrd	r4, r5, [r5]
   15788:	e005      	b.n	15796 <servo_set+0x1ca>
   1578a:	f04f 0400 	mov.w	r4, #0
   1578e:	f04f 0500 	mov.w	r5, #0
   15792:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
   15796:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   1579a:	4618      	mov	r0, r3
   1579c:	f000 fe16 	bl	163cc <__aeabi_i2d>
   157a0:	4602      	mov	r2, r0
   157a2:	460b      	mov	r3, r1
   157a4:	4620      	mov	r0, r4
   157a6:	4629      	mov	r1, r5
   157a8:	f000 fe76 	bl	16498 <__aeabi_dmul>
   157ac:	4602      	mov	r2, r0
   157ae:	460b      	mov	r3, r1
   157b0:	4610      	mov	r0, r2
   157b2:	4619      	mov	r1, r3
   157b4:	a33c      	add	r3, pc, #240	; (adr r3, 158a8 <servo_set+0x2dc>)
   157b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   157ba:	f000 fe6d 	bl	16498 <__aeabi_dmul>
   157be:	4602      	mov	r2, r0
   157c0:	460b      	mov	r3, r1
   157c2:	4610      	mov	r0, r2
   157c4:	4619      	mov	r1, r3
   157c6:	f001 f901 	bl	169cc <__aeabi_d2iz>
   157ca:	4603      	mov	r3, r0
   157cc:	b29b      	uxth	r3, r3
   157ce:	b29b      	uxth	r3, r3
   157d0:	f503 43ce 	add.w	r3, r3, #26368	; 0x6700
   157d4:	3320      	adds	r3, #32
   157d6:	81fb      	strh	r3, [r7, #14]
   157d8:	89fb      	ldrh	r3, [r7, #14]
   157da:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   157de:	d307      	bcc.n	157f0 <servo_set+0x224>
   157e0:	89fb      	ldrh	r3, [r7, #14]
   157e2:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   157e6:	bf28      	it	cs
   157e8:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   157ec:	b29a      	uxth	r2, r3
   157ee:	e001      	b.n	157f4 <servo_set+0x228>
   157f0:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   157f4:	f64a 23c4 	movw	r3, #43716	; 0xaac4
   157f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   157fc:	809a      	strh	r2, [r3, #4]
   157fe:	687b      	ldr	r3, [r7, #4]
   15800:	3306      	adds	r3, #6
   15802:	881b      	ldrh	r3, [r3, #0]
   15804:	b21b      	sxth	r3, r3
   15806:	4618      	mov	r0, r3
   15808:	f000 fde0 	bl	163cc <__aeabi_i2d>
   1580c:	4604      	mov	r4, r0
   1580e:	460d      	mov	r5, r1
   15810:	687b      	ldr	r3, [r7, #4]
   15812:	3302      	adds	r3, #2
   15814:	881b      	ldrh	r3, [r3, #0]
   15816:	b21b      	sxth	r3, r3
   15818:	4618      	mov	r0, r3
   1581a:	f000 fdd7 	bl	163cc <__aeabi_i2d>
   1581e:	4602      	mov	r2, r0
   15820:	460b      	mov	r3, r1
   15822:	4620      	mov	r0, r4
   15824:	4629      	mov	r1, r5
   15826:	f000 fc85 	bl	16134 <__adddf3>
   1582a:	4602      	mov	r2, r0
   1582c:	460b      	mov	r3, r1
   1582e:	4610      	mov	r0, r2
   15830:	4619      	mov	r1, r3
   15832:	a31f      	add	r3, pc, #124	; (adr r3, 158b0 <servo_set+0x2e4>)
   15834:	e9d3 2300 	ldrd	r2, r3, [r3]
   15838:	f000 fe2e 	bl	16498 <__aeabi_dmul>
   1583c:	4602      	mov	r2, r0
   1583e:	460b      	mov	r3, r1
   15840:	4610      	mov	r0, r2
   15842:	4619      	mov	r1, r3
   15844:	f001 f8c2 	bl	169cc <__aeabi_d2iz>
   15848:	4603      	mov	r3, r0
   1584a:	b29b      	uxth	r3, r3
   1584c:	b29b      	uxth	r3, r3
   1584e:	f503 43b5 	add.w	r3, r3, #23168	; 0x5a80
   15852:	3320      	adds	r3, #32
   15854:	81fb      	strh	r3, [r7, #14]
   15856:	89fb      	ldrh	r3, [r7, #14]
   15858:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   1585c:	d307      	bcc.n	1586e <servo_set+0x2a2>
   1585e:	89fb      	ldrh	r3, [r7, #14]
   15860:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   15864:	bf28      	it	cs
   15866:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   1586a:	b29a      	uxth	r2, r3
   1586c:	e001      	b.n	15872 <servo_set+0x2a6>
   1586e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   15872:	f64a 23c4 	movw	r3, #43716	; 0xaac4
   15876:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1587a:	81da      	strh	r2, [r3, #14]
}
   1587c:	3710      	adds	r7, #16
   1587e:	46bd      	mov	sp, r7
   15880:	bdb0      	pop	{r4, r5, r7, pc}
   15882:	bf00      	nop
   15884:	f3af 8000 	nop.w
   15888:	aaaa9ef0 	.word	0xaaaa9ef0
   1588c:	3feaaaaa 	.word	0x3feaaaaa
   15890:	fc96473e 	.word	0xfc96473e
   15894:	3fdfc962 	.word	0x3fdfc962
   15898:	51eb851f 	.word	0x51eb851f
   1589c:	3fe51eb8 	.word	0x3fe51eb8
   158a0:	9999999a 	.word	0x9999999a
   158a4:	bfe19999 	.word	0xbfe19999
   158a8:	aaaa9ef0 	.word	0xaaaa9ef0
   158ac:	bfe0aaaa 	.word	0xbfe0aaaa
   158b0:	eeeed77a 	.word	0xeeeed77a
   158b4:	bfdeeeee 	.word	0xbfdeeeee

000158b8 <uart_init_tx>:
 * UART Baud rate generation settings:
 *
 * With 16.0 MHz clock,UBRR=25  => 38400 baud
 *
 */
void uart_init_tx( void ) {
   158b8:	b480      	push	{r7}
   158ba:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRRH = 0; 
   158bc:	f242 0320 	movw	r3, #8224	; 0x2020
   158c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   158c4:	2200      	movs	r2, #0
   158c6:	701a      	strb	r2, [r3, #0]
  UBRRL = 25; 
   158c8:	f242 0309 	movw	r3, #8201	; 0x2009
   158cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   158d0:	2219      	movs	r2, #25
   158d2:	701a      	strb	r2, [r3, #0]
  /* single speed */ 
  UCSRA = 0; 
   158d4:	f242 030b 	movw	r3, #8203	; 0x200b
   158d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   158dc:	2200      	movs	r2, #0
   158de:	701a      	strb	r2, [r3, #0]
  /* Enable transmitter */ 
  UCSRB = _BV(TXEN); 
   158e0:	f242 030a 	movw	r3, #8202	; 0x200a
   158e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   158e8:	2208      	movs	r2, #8
   158ea:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0); 
   158ec:	f242 0320 	movw	r3, #8224	; 0x2020
   158f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   158f4:	2286      	movs	r2, #134	; 0x86
   158f6:	701a      	strb	r2, [r3, #0]
}
   158f8:	46bd      	mov	sp, r7
   158fa:	f85d 7b04 	ldr.w	r7, [sp], #4
   158fe:	4770      	bx	lr

00015900 <uart_init_rx>:

void uart_init_rx() {
   15900:	b480      	push	{r7}
   15902:	af00      	add	r7, sp, #0
  /* Enable receiver               */ 
  UCSRB |= _BV(RXEN); 
   15904:	f242 030a 	movw	r3, #8202	; 0x200a
   15908:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1590c:	f242 020a 	movw	r2, #8202	; 0x200a
   15910:	f2c2 0200 	movt	r2, #8192	; 0x2000
   15914:	7812      	ldrb	r2, [r2, #0]
   15916:	b2d2      	uxtb	r2, r2
   15918:	f042 0210 	orr.w	r2, r2, #16
   1591c:	b2d2      	uxtb	r2, r2
   1591e:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi( UCSRB, RXCIE ); 
   15920:	f242 030a 	movw	r3, #8202	; 0x200a
   15924:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15928:	f242 020a 	movw	r2, #8202	; 0x200a
   1592c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   15930:	7812      	ldrb	r2, [r2, #0]
   15932:	b2d2      	uxtb	r2, r2
   15934:	f062 027f 	orn	r2, r2, #127	; 0x7f
   15938:	b2d2      	uxtb	r2, r2
   1593a:	701a      	strb	r2, [r3, #0]
}
   1593c:	46bd      	mov	sp, r7
   1593e:	f85d 7b04 	ldr.w	r7, [sp], #4
   15942:	4770      	bx	lr

00015944 <uart_transmit>:

void uart_transmit( unsigned char data ) {
   15944:	b480      	push	{r7}
   15946:	b083      	sub	sp, #12
   15948:	af00      	add	r7, sp, #0
   1594a:	4603      	mov	r3, r0
   1594c:	71fb      	strb	r3, [r7, #7]
  if (UCSRB & _BV(TXCIE)) {
   1594e:	f242 030a 	movw	r3, #8202	; 0x200a
   15952:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15956:	781b      	ldrb	r3, [r3, #0]
   15958:	b2db      	uxtb	r3, r3
   1595a:	f003 0340 	and.w	r3, r3, #64	; 0x40
   1595e:	2b00      	cmp	r3, #0
   15960:	d028      	beq.n	159b4 <uart_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail == tx_head + 1) { /* BUF_SIZE = 256 */
   15962:	f64a 23d9 	movw	r3, #43737	; 0xaad9
   15966:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1596a:	781b      	ldrb	r3, [r3, #0]
   1596c:	b2db      	uxtb	r3, r3
   1596e:	461a      	mov	r2, r3
   15970:	f64a 23d8 	movw	r3, #43736	; 0xaad8
   15974:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15978:	781b      	ldrb	r3, [r3, #0]
   1597a:	3301      	adds	r3, #1
   1597c:	429a      	cmp	r2, r3
   1597e:	d100      	bne.n	15982 <uart_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   15980:	e02c      	b.n	159dc <uart_transmit+0x98>
    }
    tx_buf[tx_head] = data;
   15982:	f64a 23d8 	movw	r3, #43736	; 0xaad8
   15986:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1598a:	781b      	ldrb	r3, [r3, #0]
   1598c:	461a      	mov	r2, r3
   1598e:	f64a 23dc 	movw	r3, #43740	; 0xaadc
   15992:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15996:	79f9      	ldrb	r1, [r7, #7]
   15998:	5499      	strb	r1, [r3, r2]
    tx_head++; /* BUF_SIZE = 256 */
   1599a:	f64a 23d8 	movw	r3, #43736	; 0xaad8
   1599e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   159a2:	781b      	ldrb	r3, [r3, #0]
   159a4:	3301      	adds	r3, #1
   159a6:	b2da      	uxtb	r2, r3
   159a8:	f64a 23d8 	movw	r3, #43736	; 0xaad8
   159ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   159b0:	701a      	strb	r2, [r3, #0]
   159b2:	e013      	b.n	159dc <uart_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR = data;
   159b4:	f242 030c 	movw	r3, #8204	; 0x200c
   159b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   159bc:	79fa      	ldrb	r2, [r7, #7]
   159be:	701a      	strb	r2, [r3, #0]
    sbi(UCSRB, TXCIE);
   159c0:	f242 030a 	movw	r3, #8202	; 0x200a
   159c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   159c8:	f242 020a 	movw	r2, #8202	; 0x200a
   159cc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   159d0:	7812      	ldrb	r2, [r2, #0]
   159d2:	b2d2      	uxtb	r2, r2
   159d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   159d8:	b2d2      	uxtb	r2, r2
   159da:	701a      	strb	r2, [r3, #0]
  }
}
   159dc:	370c      	adds	r7, #12
   159de:	46bd      	mov	sp, r7
   159e0:	f85d 7b04 	ldr.w	r7, [sp], #4
   159e4:	4770      	bx	lr
   159e6:	bf00      	nop

000159e8 <uart_print_hex>:

void uart_print_hex ( uint8_t c ) {
   159e8:	b590      	push	{r4, r7, lr}
   159ea:	b089      	sub	sp, #36	; 0x24
   159ec:	af00      	add	r7, sp, #0
   159ee:	4603      	mov	r3, r0
   159f0:	71fb      	strb	r3, [r7, #7]
  const uint8_t hex[16] = { '0', '1', '2', '3', '4', '5', '6', '7', 
   159f2:	f247 337c 	movw	r3, #29564	; 0x737c
   159f6:	f2c0 0301 	movt	r3, #1
   159fa:	f107 040c 	add.w	r4, r7, #12
   159fe:	6818      	ldr	r0, [r3, #0]
   15a00:	6859      	ldr	r1, [r3, #4]
   15a02:	689a      	ldr	r2, [r3, #8]
   15a04:	68db      	ldr	r3, [r3, #12]
   15a06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
  uint8_t high = (c & 0xF0)>>4;
   15a08:	79fb      	ldrb	r3, [r7, #7]
   15a0a:	091b      	lsrs	r3, r3, #4
   15a0c:	77fb      	strb	r3, [r7, #31]
  uint8_t low  = c & 0x0F;
   15a0e:	79fb      	ldrb	r3, [r7, #7]
   15a10:	f003 030f 	and.w	r3, r3, #15
   15a14:	77bb      	strb	r3, [r7, #30]
    /*
    *Added by SunnyBeike
    * */
        high = 15;
   15a16:	230f      	movs	r3, #15
   15a18:	77fb      	strb	r3, [r7, #31]
        low = 15;
   15a1a:	230f      	movs	r3, #15
   15a1c:	77bb      	strb	r3, [r7, #30]
    /*
    *End
    * */

    uart_transmit(hex[high]);
   15a1e:	7ffb      	ldrb	r3, [r7, #31]
   15a20:	f107 0220 	add.w	r2, r7, #32
   15a24:	4413      	add	r3, r2
   15a26:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   15a2a:	4618      	mov	r0, r3
   15a2c:	f7ff ff8a 	bl	15944 <uart_transmit>
  uart_transmit(hex[low]);
   15a30:	7fbb      	ldrb	r3, [r7, #30]
   15a32:	f107 0220 	add.w	r2, r7, #32
   15a36:	4413      	add	r3, r2
   15a38:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   15a3c:	4618      	mov	r0, r3
   15a3e:	f7ff ff81 	bl	15944 <uart_transmit>
} 
   15a42:	3724      	adds	r7, #36	; 0x24
   15a44:	46bd      	mov	sp, r7
   15a46:	bd90      	pop	{r4, r7, pc}

00015a48 <uart_print_hex16>:

void uart_print_hex16 ( uint16_t c ) {
   15a48:	b580      	push	{r7, lr}
   15a4a:	b084      	sub	sp, #16
   15a4c:	af00      	add	r7, sp, #0
   15a4e:	4603      	mov	r3, r0
   15a50:	80fb      	strh	r3, [r7, #6]
  uint8_t high = (uint8_t)(c>>8);
   15a52:	88fb      	ldrh	r3, [r7, #6]
   15a54:	0a1b      	lsrs	r3, r3, #8
   15a56:	b29b      	uxth	r3, r3
   15a58:	73fb      	strb	r3, [r7, #15]
  uint8_t low  = (uint8_t)(c);
   15a5a:	88fb      	ldrh	r3, [r7, #6]
   15a5c:	73bb      	strb	r3, [r7, #14]
  uart_print_hex(high);
   15a5e:	7bfb      	ldrb	r3, [r7, #15]
   15a60:	4618      	mov	r0, r3
   15a62:	f7ff ffc1 	bl	159e8 <uart_print_hex>
  uart_print_hex(low);
   15a66:	7bbb      	ldrb	r3, [r7, #14]
   15a68:	4618      	mov	r0, r3
   15a6a:	f7ff ffbd 	bl	159e8 <uart_print_hex>
}
   15a6e:	3710      	adds	r7, #16
   15a70:	46bd      	mov	sp, r7
   15a72:	bd80      	pop	{r7, pc}

00015a74 <uart_print_string>:

void uart_print_string(const uint8_t* s) {
   15a74:	b580      	push	{r7, lr}
   15a76:	b084      	sub	sp, #16
   15a78:	af00      	add	r7, sp, #0
   15a7a:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
   15a7c:	2300      	movs	r3, #0
   15a7e:	73fb      	strb	r3, [r7, #15]
  while (s[i]) {
   15a80:	e009      	b.n	15a96 <uart_print_string+0x22>
    uart_transmit(s[i]);
   15a82:	7bfb      	ldrb	r3, [r7, #15]
   15a84:	687a      	ldr	r2, [r7, #4]
   15a86:	4413      	add	r3, r2
   15a88:	781b      	ldrb	r3, [r3, #0]
   15a8a:	4618      	mov	r0, r3
   15a8c:	f7ff ff5a 	bl	15944 <uart_transmit>
    i++;
   15a90:	7bfb      	ldrb	r3, [r7, #15]
   15a92:	3301      	adds	r3, #1
   15a94:	73fb      	strb	r3, [r7, #15]
  uart_print_hex(low);
}

void uart_print_string(const uint8_t* s) {
  uint8_t i = 0;
  while (s[i]) {
   15a96:	7bfb      	ldrb	r3, [r7, #15]
   15a98:	687a      	ldr	r2, [r7, #4]
   15a9a:	4413      	add	r3, r2
   15a9c:	781b      	ldrb	r3, [r3, #0]
   15a9e:	2b00      	cmp	r3, #0
   15aa0:	d1ef      	bne.n	15a82 <uart_print_string+0xe>
    uart_transmit(s[i]);
    i++;
  }
}
   15aa2:	3710      	adds	r7, #16
   15aa4:	46bd      	mov	sp, r7
   15aa6:	bd80      	pop	{r7, pc}

00015aa8 <SIG_UART_TRANS>:

SIGNAL(SIG_UART_TRANS) {
   15aa8:	b480      	push	{r7}
   15aaa:	af00      	add	r7, sp, #0
  if (tx_head == tx_tail) {
   15aac:	f64a 23d8 	movw	r3, #43736	; 0xaad8
   15ab0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15ab4:	781a      	ldrb	r2, [r3, #0]
   15ab6:	f64a 23d9 	movw	r3, #43737	; 0xaad9
   15aba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15abe:	781b      	ldrb	r3, [r3, #0]
   15ac0:	b2db      	uxtb	r3, r3
   15ac2:	429a      	cmp	r2, r3
   15ac4:	d10e      	bne.n	15ae4 <SIG_UART_TRANS+0x3c>
    /* Nothing more to send */
    cbi(UCSRB, TXCIE); /* disable interrupt */
   15ac6:	f242 030a 	movw	r3, #8202	; 0x200a
   15aca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15ace:	f242 020a 	movw	r2, #8202	; 0x200a
   15ad2:	f2c2 0200 	movt	r2, #8192	; 0x2000
   15ad6:	7812      	ldrb	r2, [r2, #0]
   15ad8:	b2d2      	uxtb	r2, r2
   15ada:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   15ade:	b2d2      	uxtb	r2, r2
   15ae0:	701a      	strb	r2, [r3, #0]
   15ae2:	e01d      	b.n	15b20 <SIG_UART_TRANS+0x78>
  } else {
    UDR = tx_buf[tx_tail];
   15ae4:	f242 030c 	movw	r3, #8204	; 0x200c
   15ae8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15aec:	f64a 22d9 	movw	r2, #43737	; 0xaad9
   15af0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   15af4:	7812      	ldrb	r2, [r2, #0]
   15af6:	b2d2      	uxtb	r2, r2
   15af8:	4611      	mov	r1, r2
   15afa:	f64a 22dc 	movw	r2, #43740	; 0xaadc
   15afe:	f2c2 0200 	movt	r2, #8192	; 0x2000
   15b02:	5c52      	ldrb	r2, [r2, r1]
   15b04:	701a      	strb	r2, [r3, #0]
    tx_tail++; /* warning tx_buf_len is 256 */
   15b06:	f64a 23d9 	movw	r3, #43737	; 0xaad9
   15b0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b0e:	781b      	ldrb	r3, [r3, #0]
   15b10:	b2db      	uxtb	r3, r3
   15b12:	3301      	adds	r3, #1
   15b14:	b2da      	uxtb	r2, r3
   15b16:	f64a 23d9 	movw	r3, #43737	; 0xaad9
   15b1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b1e:	701a      	strb	r2, [r3, #0]
  }
}
   15b20:	46bd      	mov	sp, r7
   15b22:	f85d 7b04 	ldr.w	r7, [sp], #4
   15b26:	4770      	bx	lr

00015b28 <init_led>:
#include "stm32f10x_usart.h"
#include "stm32f10x_exti.h"
#include "misc.h"

void init_led(void)
{
   15b28:	b580      	push	{r7, lr}
   15b2a:	b082      	sub	sp, #8
   15b2c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO C clock. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
   15b2e:	2010      	movs	r0, #16
   15b30:	2101      	movs	r1, #1
   15b32:	f7eb f945 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Set the LED pin state such that the LED is off.  The LED is connected
     * between power and the microcontroller pin, which makes it turn on when
     * the pin is low.
     */
    GPIO_WriteBit(GPIOC,GPIO_Pin_12,Bit_SET);
   15b36:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   15b3a:	f2c4 0001 	movt	r0, #16385	; 0x4001
   15b3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   15b42:	2201      	movs	r2, #1
   15b44:	f7eb fc4c 	bl	13e0 <GPIO_WriteBit>

    /* Configure the LED pin as push-pull output. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_12;
   15b48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   15b4c:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   15b4e:	2310      	movs	r3, #16
   15b50:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   15b52:	2303      	movs	r3, #3
   15b54:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
   15b56:	1d3b      	adds	r3, r7, #4
   15b58:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   15b5c:	f2c4 0001 	movt	r0, #16385	; 0x4001
   15b60:	4619      	mov	r1, r3
   15b62:	f7eb fb01 	bl	1168 <GPIO_Init>
}
   15b66:	3708      	adds	r7, #8
   15b68:	46bd      	mov	sp, r7
   15b6a:	bd80      	pop	{r7, pc}

00015b6c <init_button>:

void init_button(void)
{
   15b6c:	b580      	push	{r7, lr}
   15b6e:	b082      	sub	sp, #8
   15b70:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO A clock */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
   15b72:	2004      	movs	r0, #4
   15b74:	2101      	movs	r1, #1
   15b76:	f7eb f923 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Configure the button pin as a floating input. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_0;
   15b7a:	2301      	movs	r3, #1
   15b7c:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   15b7e:	2304      	movs	r3, #4
   15b80:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   15b82:	2303      	movs	r3, #3
   15b84:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
   15b86:	1d3b      	adds	r3, r7, #4
   15b88:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   15b8c:	f2c4 0001 	movt	r0, #16385	; 0x4001
   15b90:	4619      	mov	r1, r3
   15b92:	f7eb fae9 	bl	1168 <GPIO_Init>
}
   15b96:	3708      	adds	r7, #8
   15b98:	46bd      	mov	sp, r7
   15b9a:	bd80      	pop	{r7, pc}

00015b9c <enable_button_interrupts>:

void enable_button_interrupts(void)
{
   15b9c:	b580      	push	{r7, lr}
   15b9e:	b084      	sub	sp, #16
   15ba0:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable the AFIO clock.  GPIO_EXTILineConfig sets registers in
     * the AFIO.
     */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
   15ba2:	2001      	movs	r0, #1
   15ba4:	2101      	movs	r1, #1
   15ba6:	f7eb f90b 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Connect EXTI Line 0 to the button GPIO Pin */
    GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);
   15baa:	2000      	movs	r0, #0
   15bac:	2100      	movs	r1, #0
   15bae:	f7eb fd0f 	bl	15d0 <GPIO_EXTILineConfig>

    /* Configure the EXTI line to generate an interrupt when the button is
     * pressed.  The button pin is high when pressed, so it needs to trigger
     * when rising from low to high. */
    EXTI_InitStructure.EXTI_Line = EXTI_Line0;
   15bb2:	2301      	movs	r3, #1
   15bb4:	60bb      	str	r3, [r7, #8]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
   15bb6:	2300      	movs	r3, #0
   15bb8:	733b      	strb	r3, [r7, #12]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
   15bba:	2308      	movs	r3, #8
   15bbc:	737b      	strb	r3, [r7, #13]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
   15bbe:	2301      	movs	r3, #1
   15bc0:	73bb      	strb	r3, [r7, #14]
    EXTI_Init(&EXTI_InitStructure);
   15bc2:	f107 0308 	add.w	r3, r7, #8
   15bc6:	4618      	mov	r0, r3
   15bc8:	f7ec fa08 	bl	1fdc <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
   15bcc:	2306      	movs	r3, #6
   15bce:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
   15bd0:	230f      	movs	r3, #15
   15bd2:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
   15bd4:	230f      	movs	r3, #15
   15bd6:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   15bd8:	2301      	movs	r3, #1
   15bda:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
   15bdc:	1d3b      	adds	r3, r7, #4
   15bde:	4618      	mov	r0, r3
   15be0:	f7ec fb36 	bl	2250 <NVIC_Init>
}
   15be4:	3710      	adds	r7, #16
   15be6:	46bd      	mov	sp, r7
   15be8:	bd80      	pop	{r7, pc}
   15bea:	bf00      	nop

00015bec <init_rs232>:

void init_rs232(void)
{
   15bec:	b580      	push	{r7, lr}
   15bee:	b086      	sub	sp, #24
   15bf0:	af00      	add	r7, sp, #0
    USART_InitTypeDef USART_InitStructure;
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable peripheral clocks. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
   15bf2:	2005      	movs	r0, #5
   15bf4:	2101      	movs	r1, #1
   15bf6:	f7eb f8e3 	bl	dc0 <RCC_APB2PeriphClockCmd>
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
   15bfa:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   15bfe:	2101      	movs	r1, #1
   15c00:	f7eb f906 	bl	e10 <RCC_APB1PeriphClockCmd>

    /* Configure USART2 Rx pin as floating input. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
   15c04:	2308      	movs	r3, #8
   15c06:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   15c08:	2304      	movs	r3, #4
   15c0a:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
   15c0c:	1d3b      	adds	r3, r7, #4
   15c0e:	f44f 6000 	mov.w	r0, #2048	; 0x800
   15c12:	f2c4 0001 	movt	r0, #16385	; 0x4001
   15c16:	4619      	mov	r1, r3
   15c18:	f7eb faa6 	bl	1168 <GPIO_Init>

    /* Configure USART2 Tx as alternate function push-pull. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
   15c1c:	2304      	movs	r3, #4
   15c1e:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   15c20:	2303      	movs	r3, #3
   15c22:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
   15c24:	2318      	movs	r3, #24
   15c26:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
   15c28:	1d3b      	adds	r3, r7, #4
   15c2a:	f44f 6000 	mov.w	r0, #2048	; 0x800
   15c2e:	f2c4 0001 	movt	r0, #16385	; 0x4001
   15c32:	4619      	mov	r1, r3
   15c34:	f7eb fa98 	bl	1168 <GPIO_Init>

    /* Configure the USART2 */
    USART_InitStructure.USART_BaudRate = 9600;
   15c38:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   15c3c:	60bb      	str	r3, [r7, #8]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
   15c3e:	2300      	movs	r3, #0
   15c40:	81bb      	strh	r3, [r7, #12]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
   15c42:	2300      	movs	r3, #0
   15c44:	81fb      	strh	r3, [r7, #14]
    USART_InitStructure.USART_Parity = USART_Parity_No;
   15c46:	2300      	movs	r3, #0
   15c48:	823b      	strh	r3, [r7, #16]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
   15c4a:	2300      	movs	r3, #0
   15c4c:	82bb      	strh	r3, [r7, #20]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
   15c4e:	230c      	movs	r3, #12
   15c50:	827b      	strh	r3, [r7, #18]
    USART_Init(USART2, &USART_InitStructure);
   15c52:	f107 0308 	add.w	r3, r7, #8
   15c56:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   15c5a:	f2c4 0000 	movt	r0, #16384	; 0x4000
   15c5e:	4619      	mov	r1, r3
   15c60:	f7eb fd6a 	bl	1738 <USART_Init>
    USART_Cmd(USART2, ENABLE);
   15c64:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   15c68:	f2c4 0000 	movt	r0, #16384	; 0x4000
   15c6c:	2101      	movs	r1, #1
   15c6e:	f7eb fe81 	bl	1974 <USART_Cmd>
}
   15c72:	3718      	adds	r7, #24
   15c74:	46bd      	mov	sp, r7
   15c76:	bd80      	pop	{r7, pc}

00015c78 <enable_rs232_interrupts>:

void enable_rs232_interrupts(void)
{
   15c78:	b580      	push	{r7, lr}
   15c7a:	b082      	sub	sp, #8
   15c7c:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable transmit and receive interrupts for the USART2. */
    USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
   15c7e:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   15c82:	f2c4 0000 	movt	r0, #16384	; 0x4000
   15c86:	f240 7127 	movw	r1, #1831	; 0x727
   15c8a:	2200      	movs	r2, #0
   15c8c:	f7eb fe92 	bl	19b4 <USART_ITConfig>
    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
   15c90:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   15c94:	f2c4 0000 	movt	r0, #16384	; 0x4000
   15c98:	f240 5125 	movw	r1, #1317	; 0x525
   15c9c:	2201      	movs	r2, #1
   15c9e:	f7eb fe89 	bl	19b4 <USART_ITConfig>

    /* Enable the USART2 IRQ in the NVIC module (so that the USART2 interrupt
     * handler is enabled). */
    NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
   15ca2:	2326      	movs	r3, #38	; 0x26
   15ca4:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
   15ca6:	2300      	movs	r3, #0
   15ca8:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   15caa:	2301      	movs	r3, #1
   15cac:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
   15cae:	1d3b      	adds	r3, r7, #4
   15cb0:	4618      	mov	r0, r3
   15cb2:	f7ec facd 	bl	2250 <NVIC_Init>
}
   15cb6:	3708      	adds	r7, #8
   15cb8:	46bd      	mov	sp, r7
   15cba:	bd80      	pop	{r7, pc}

00015cbc <enable_rs232>:

void enable_rs232(void)
{
   15cbc:	b580      	push	{r7, lr}
   15cbe:	af00      	add	r7, sp, #0
    /* Enable the RS232 port. */
    USART_Cmd(USART2, ENABLE);
   15cc0:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   15cc4:	f2c4 0000 	movt	r0, #16384	; 0x4000
   15cc8:	2101      	movs	r1, #1
   15cca:	f7eb fe53 	bl	1974 <USART_Cmd>
}
   15cce:	bd80      	pop	{r7, pc}

00015cd0 <send_byte>:


void send_byte(uint8_t b)
{
   15cd0:	b580      	push	{r7, lr}
   15cd2:	b082      	sub	sp, #8
   15cd4:	af00      	add	r7, sp, #0
   15cd6:	4603      	mov	r3, r0
   15cd8:	71fb      	strb	r3, [r7, #7]
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
   15cda:	bf00      	nop
   15cdc:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   15ce0:	f2c4 0000 	movt	r0, #16384	; 0x4000
   15ce4:	2180      	movs	r1, #128	; 0x80
   15ce6:	f7ec f8b1 	bl	1e4c <USART_GetFlagStatus>
   15cea:	4603      	mov	r3, r0
   15cec:	2b00      	cmp	r3, #0
   15cee:	d0f5      	beq.n	15cdc <send_byte+0xc>

    GPIOC->ODR ^= 0x00001000;
   15cf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   15cf4:	f2c4 0301 	movt	r3, #16385	; 0x4001
   15cf8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   15cfc:	f2c4 0201 	movt	r2, #16385	; 0x4001
   15d00:	68d2      	ldr	r2, [r2, #12]
   15d02:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
   15d06:	60da      	str	r2, [r3, #12]

    USART_SendData(USART2, b);
   15d08:	79fb      	ldrb	r3, [r7, #7]
   15d0a:	b29b      	uxth	r3, r3
   15d0c:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   15d10:	f2c4 0000 	movt	r0, #16384	; 0x4000
   15d14:	4619      	mov	r1, r3
   15d16:	f7eb ff4d 	bl	1bb4 <USART_SendData>
}
   15d1a:	3708      	adds	r7, #8
   15d1c:	46bd      	mov	sp, r7
   15d1e:	bd80      	pop	{r7, pc}

00015d20 <send_num>:


void send_num(uint8_t b)
{
   15d20:	b580      	push	{r7, lr}
   15d22:	b082      	sub	sp, #8
   15d24:	af00      	add	r7, sp, #0
   15d26:	4603      	mov	r3, r0
   15d28:	71fb      	strb	r3, [r7, #7]
    send_byte(b+'0'); 
   15d2a:	79fb      	ldrb	r3, [r7, #7]
   15d2c:	3330      	adds	r3, #48	; 0x30
   15d2e:	b2db      	uxtb	r3, r3
   15d30:	4618      	mov	r0, r3
   15d32:	f7ff ffcd 	bl	15cd0 <send_byte>
}
   15d36:	3708      	adds	r7, #8
   15d38:	46bd      	mov	sp, r7
   15d3a:	bd80      	pop	{r7, pc}

00015d3c <vPrintString>:


void vPrintString( const char * string )
{
   15d3c:	b580      	push	{r7, lr}
   15d3e:	b084      	sub	sp, #16
   15d40:	af00      	add	r7, sp, #0
   15d42:	6078      	str	r0, [r7, #4]
    int i = 0;
   15d44:	2300      	movs	r3, #0
   15d46:	60fb      	str	r3, [r7, #12]
    while(string[i] != '\0')
   15d48:	e009      	b.n	15d5e <vPrintString+0x22>
    {
        send_byte(string[i]);
   15d4a:	68fb      	ldr	r3, [r7, #12]
   15d4c:	687a      	ldr	r2, [r7, #4]
   15d4e:	4413      	add	r3, r2
   15d50:	781b      	ldrb	r3, [r3, #0]
   15d52:	4618      	mov	r0, r3
   15d54:	f7ff ffbc 	bl	15cd0 <send_byte>
        i++;
   15d58:	68fb      	ldr	r3, [r7, #12]
   15d5a:	3301      	adds	r3, #1
   15d5c:	60fb      	str	r3, [r7, #12]


void vPrintString( const char * string )
{
    int i = 0;
    while(string[i] != '\0')
   15d5e:	68fb      	ldr	r3, [r7, #12]
   15d60:	687a      	ldr	r2, [r7, #4]
   15d62:	4413      	add	r3, r2
   15d64:	781b      	ldrb	r3, [r3, #0]
   15d66:	2b00      	cmp	r3, #0
   15d68:	d1ef      	bne.n	15d4a <vPrintString+0xe>
    {
        send_byte(string[i]);
        i++;
    }
}
   15d6a:	3710      	adds	r7, #16
   15d6c:	46bd      	mov	sp, r7
   15d6e:	bd80      	pop	{r7, pc}

00015d70 <vPrintNumber>:

void vPrintNumber( const long c_num )
{
   15d70:	b580      	push	{r7, lr}
   15d72:	b08a      	sub	sp, #40	; 0x28
   15d74:	af00      	add	r7, sp, #0
   15d76:	6078      	str	r0, [r7, #4]
    char time[15], tmp;
    unsigned int i, count = 0;
   15d78:	2300      	movs	r3, #0
   15d7a:	623b      	str	r3, [r7, #32]
    long num = c_num;
   15d7c:	687b      	ldr	r3, [r7, #4]
   15d7e:	61fb      	str	r3, [r7, #28]

    if(num == 0)
   15d80:	69fb      	ldr	r3, [r7, #28]
   15d82:	2b00      	cmp	r3, #0
   15d84:	d106      	bne.n	15d94 <vPrintNumber+0x24>
    {
        vPrintString("0\n\r");
   15d86:	f247 308c 	movw	r0, #29580	; 0x738c
   15d8a:	f2c0 0001 	movt	r0, #1
   15d8e:	f7ff ffd5 	bl	15d3c <vPrintString>
   15d92:	e062      	b.n	15e5a <vPrintNumber+0xea>
    }
    else
    {
        // transform long into char * 
        while( num   )
   15d94:	e024      	b.n	15de0 <vPrintNumber+0x70>
        {
            time[count] = num%10 +'0';
   15d96:	69f9      	ldr	r1, [r7, #28]
   15d98:	f246 6367 	movw	r3, #26215	; 0x6667
   15d9c:	f2c6 6366 	movt	r3, #26214	; 0x6666
   15da0:	fb83 2301 	smull	r2, r3, r3, r1
   15da4:	109a      	asrs	r2, r3, #2
   15da6:	17cb      	asrs	r3, r1, #31
   15da8:	1ad2      	subs	r2, r2, r3
   15daa:	4613      	mov	r3, r2
   15dac:	009b      	lsls	r3, r3, #2
   15dae:	4413      	add	r3, r2
   15db0:	005b      	lsls	r3, r3, #1
   15db2:	1aca      	subs	r2, r1, r3
   15db4:	b2d3      	uxtb	r3, r2
   15db6:	3330      	adds	r3, #48	; 0x30
   15db8:	b2da      	uxtb	r2, r3
   15dba:	f107 010c 	add.w	r1, r7, #12
   15dbe:	6a3b      	ldr	r3, [r7, #32]
   15dc0:	440b      	add	r3, r1
   15dc2:	701a      	strb	r2, [r3, #0]
            count ++;
   15dc4:	6a3b      	ldr	r3, [r7, #32]
   15dc6:	3301      	adds	r3, #1
   15dc8:	623b      	str	r3, [r7, #32]
            num /= 10;
   15dca:	69fa      	ldr	r2, [r7, #28]
   15dcc:	f246 6367 	movw	r3, #26215	; 0x6667
   15dd0:	f2c6 6366 	movt	r3, #26214	; 0x6666
   15dd4:	fb83 1302 	smull	r1, r3, r3, r2
   15dd8:	1099      	asrs	r1, r3, #2
   15dda:	17d3      	asrs	r3, r2, #31
   15ddc:	1acb      	subs	r3, r1, r3
   15dde:	61fb      	str	r3, [r7, #28]
        vPrintString("0\n\r");
    }
    else
    {
        // transform long into char * 
        while( num   )
   15de0:	69fb      	ldr	r3, [r7, #28]
   15de2:	2b00      	cmp	r3, #0
   15de4:	d1d7      	bne.n	15d96 <vPrintNumber+0x26>
        {
            time[count] = num%10 +'0';
            count ++;
            num /= 10;
        }
        time[count] = '\0';
   15de6:	f107 020c 	add.w	r2, r7, #12
   15dea:	6a3b      	ldr	r3, [r7, #32]
   15dec:	4413      	add	r3, r2
   15dee:	2200      	movs	r2, #0
   15df0:	701a      	strb	r2, [r3, #0]

        // reverse
        for( i = 0; i < count/2; ++i  )
   15df2:	2300      	movs	r3, #0
   15df4:	627b      	str	r3, [r7, #36]	; 0x24
   15df6:	e020      	b.n	15e3a <vPrintNumber+0xca>
        {
            tmp = time[i];
   15df8:	f107 020c 	add.w	r2, r7, #12
   15dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15dfe:	4413      	add	r3, r2
   15e00:	781b      	ldrb	r3, [r3, #0]
   15e02:	76fb      	strb	r3, [r7, #27]
            time[i] = time[count-1-i];
   15e04:	6a3a      	ldr	r2, [r7, #32]
   15e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15e08:	1ad3      	subs	r3, r2, r3
   15e0a:	3b01      	subs	r3, #1
   15e0c:	f107 0228 	add.w	r2, r7, #40	; 0x28
   15e10:	4413      	add	r3, r2
   15e12:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
   15e16:	f107 010c 	add.w	r1, r7, #12
   15e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15e1c:	440b      	add	r3, r1
   15e1e:	701a      	strb	r2, [r3, #0]
            time[count-1-i] = tmp;
   15e20:	6a3a      	ldr	r2, [r7, #32]
   15e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15e24:	1ad3      	subs	r3, r2, r3
   15e26:	3b01      	subs	r3, #1
   15e28:	f107 0128 	add.w	r1, r7, #40	; 0x28
   15e2c:	440b      	add	r3, r1
   15e2e:	7efa      	ldrb	r2, [r7, #27]
   15e30:	f803 2c1c 	strb.w	r2, [r3, #-28]
            num /= 10;
        }
        time[count] = '\0';

        // reverse
        for( i = 0; i < count/2; ++i  )
   15e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15e36:	3301      	adds	r3, #1
   15e38:	627b      	str	r3, [r7, #36]	; 0x24
   15e3a:	6a3b      	ldr	r3, [r7, #32]
   15e3c:	085a      	lsrs	r2, r3, #1
   15e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15e40:	429a      	cmp	r2, r3
   15e42:	d8d9      	bhi.n	15df8 <vPrintNumber+0x88>
        {
            tmp = time[i];
            time[i] = time[count-1-i];
            time[count-1-i] = tmp;
        }
        vPrintString(time);
   15e44:	f107 030c 	add.w	r3, r7, #12
   15e48:	4618      	mov	r0, r3
   15e4a:	f7ff ff77 	bl	15d3c <vPrintString>
        vPrintString("\n\r");
   15e4e:	f247 3090 	movw	r0, #29584	; 0x7390
   15e52:	f2c0 0001 	movt	r0, #1
   15e56:	f7ff ff71 	bl	15d3c <vPrintString>
    }
}
   15e5a:	3728      	adds	r7, #40	; 0x28
   15e5c:	46bd      	mov	sp, r7
   15e5e:	bd80      	pop	{r7, pc}

00015e60 <vSemaphoreInitialise>:
extern portTickType xPeriodTable[NUMBEROFTASK];
extern pvTaskFunType xTaskTable[NUMBEROFTASK];
extern xSemaphoreHandle xSemaphoreTable[NUMBEROFTASK];

void vSemaphoreInitialise()
{
   15e60:	b580      	push	{r7, lr}
   15e62:	b082      	sub	sp, #8
   15e64:	af00      	add	r7, sp, #0
    portBASE_TYPE i;

    for( i = 0; i < NUMBEROFTASK; ++ i  )
   15e66:	2300      	movs	r3, #0
   15e68:	607b      	str	r3, [r7, #4]
   15e6a:	e033      	b.n	15ed4 <vSemaphoreInitialise+0x74>
    {
        vSemaphoreCreateBinary(xSemaphoreTable[i]);
   15e6c:	2001      	movs	r0, #1
   15e6e:	2100      	movs	r1, #0
   15e70:	2203      	movs	r2, #3
   15e72:	f7ec febd 	bl	2bf0 <xQueueGenericCreate>
   15e76:	4601      	mov	r1, r0
   15e78:	f240 13f0 	movw	r3, #496	; 0x1f0
   15e7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e80:	687a      	ldr	r2, [r7, #4]
   15e82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   15e86:	f240 13f0 	movw	r3, #496	; 0x1f0
   15e8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e8e:	687a      	ldr	r2, [r7, #4]
   15e90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   15e94:	2b00      	cmp	r3, #0
   15e96:	d00c      	beq.n	15eb2 <vSemaphoreInitialise+0x52>
   15e98:	f240 13f0 	movw	r3, #496	; 0x1f0
   15e9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15ea0:	687a      	ldr	r2, [r7, #4]
   15ea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   15ea6:	4618      	mov	r0, r3
   15ea8:	2100      	movs	r1, #0
   15eaa:	2200      	movs	r2, #0
   15eac:	2300      	movs	r3, #0
   15eae:	f7ec ff2d 	bl	2d0c <xQueueGenericSend>
        /* when created, it is initialised to 1. So, we take it away.*/
        xSemaphoreTake(xSemaphoreTable[i], portMAX_DELAY);
   15eb2:	f240 13f0 	movw	r3, #496	; 0x1f0
   15eb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15eba:	687a      	ldr	r2, [r7, #4]
   15ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   15ec0:	4618      	mov	r0, r3
   15ec2:	2100      	movs	r1, #0
   15ec4:	f04f 32ff 	mov.w	r2, #4294967295
   15ec8:	2300      	movs	r3, #0
   15eca:	f7ec ffe5 	bl	2e98 <xQueueGenericReceive>

void vSemaphoreInitialise()
{
    portBASE_TYPE i;

    for( i = 0; i < NUMBEROFTASK; ++ i  )
   15ece:	687b      	ldr	r3, [r7, #4]
   15ed0:	3301      	adds	r3, #1
   15ed2:	607b      	str	r3, [r7, #4]
   15ed4:	687b      	ldr	r3, [r7, #4]
   15ed6:	2b0c      	cmp	r3, #12
   15ed8:	ddc8      	ble.n	15e6c <vSemaphoreInitialise+0xc>
    {
        vSemaphoreCreateBinary(xSemaphoreTable[i]);
        /* when created, it is initialised to 1. So, we take it away.*/
        xSemaphoreTake(xSemaphoreTable[i], portMAX_DELAY);
    }
}
   15eda:	3708      	adds	r7, #8
   15edc:	46bd      	mov	sp, r7
   15ede:	bd80      	pop	{r7, pc}

00015ee0 <vParametersInit>:

void vParametersInit()
{
   15ee0:	b480      	push	{r7}
   15ee2:	b083      	sub	sp, #12
   15ee4:	af00      	add	r7, sp, #0
    portBASE_TYPE i;
    for( i = 0; i < NUMBEROFTASK; ++ i )
   15ee6:	2300      	movs	r3, #0
   15ee8:	607b      	str	r3, [r7, #4]
   15eea:	e03b      	b.n	15f64 <vParametersInit+0x84>
    {
        parameters[i].xMyId = i;
   15eec:	f64a 33dc 	movw	r3, #43996	; 0xabdc
   15ef0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15ef4:	687a      	ldr	r2, [r7, #4]
   15ef6:	0112      	lsls	r2, r2, #4
   15ef8:	4413      	add	r3, r2
   15efa:	687a      	ldr	r2, [r7, #4]
   15efc:	601a      	str	r2, [r3, #0]
        parameters[i].xMyFun = xTaskTable[i];
   15efe:	f240 0390 	movw	r3, #144	; 0x90
   15f02:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f06:	687a      	ldr	r2, [r7, #4]
   15f08:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   15f0c:	f64a 33dc 	movw	r3, #43996	; 0xabdc
   15f10:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f14:	6879      	ldr	r1, [r7, #4]
   15f16:	0109      	lsls	r1, r1, #4
   15f18:	440b      	add	r3, r1
   15f1a:	3304      	adds	r3, #4
   15f1c:	601a      	str	r2, [r3, #0]
        parameters[i].xPeriod = xPeriodTable[i];
   15f1e:	f240 035c 	movw	r3, #92	; 0x5c
   15f22:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f26:	687a      	ldr	r2, [r7, #4]
   15f28:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   15f2c:	f64a 33dc 	movw	r3, #43996	; 0xabdc
   15f30:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f34:	6879      	ldr	r1, [r7, #4]
   15f36:	0109      	lsls	r1, r1, #4
   15f38:	440b      	add	r3, r1
   15f3a:	3308      	adds	r3, #8
   15f3c:	601a      	str	r2, [r3, #0]
        parameters[i].xMySem = xSemaphoreTable[i];
   15f3e:	f240 13f0 	movw	r3, #496	; 0x1f0
   15f42:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f46:	687a      	ldr	r2, [r7, #4]
   15f48:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   15f4c:	f64a 33dc 	movw	r3, #43996	; 0xabdc
   15f50:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f54:	6879      	ldr	r1, [r7, #4]
   15f56:	0109      	lsls	r1, r1, #4
   15f58:	440b      	add	r3, r1
   15f5a:	330c      	adds	r3, #12
   15f5c:	601a      	str	r2, [r3, #0]
}

void vParametersInit()
{
    portBASE_TYPE i;
    for( i = 0; i < NUMBEROFTASK; ++ i )
   15f5e:	687b      	ldr	r3, [r7, #4]
   15f60:	3301      	adds	r3, #1
   15f62:	607b      	str	r3, [r7, #4]
   15f64:	687b      	ldr	r3, [r7, #4]
   15f66:	2b0c      	cmp	r3, #12
   15f68:	ddc0      	ble.n	15eec <vParametersInit+0xc>
        parameters[i].xMyId = i;
        parameters[i].xMyFun = xTaskTable[i];
        parameters[i].xPeriod = xPeriodTable[i];
        parameters[i].xMySem = xSemaphoreTable[i];
    }
}
   15f6a:	370c      	adds	r7, #12
   15f6c:	46bd      	mov	sp, r7
   15f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
   15f72:	4770      	bx	lr

00015f74 <vTimeTask>:

void vTimeTask( void * pvParameter )
{
   15f74:	b580      	push	{r7, lr}
   15f76:	b08c      	sub	sp, #48	; 0x30
   15f78:	af00      	add	r7, sp, #0
   15f7a:	6078      	str	r0, [r7, #4]
    struct parameter *xMyParameter = (struct parameter *)pvParameter;
   15f7c:	687b      	ldr	r3, [r7, #4]
   15f7e:	627b      	str	r3, [r7, #36]	; 0x24
    portBASE_TYPE xMyId = xMyParameter->xMyId;
   15f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15f82:	681b      	ldr	r3, [r3, #0]
   15f84:	623b      	str	r3, [r7, #32]
    pvTaskFunType xMyFun = xMyParameter->xMyFun;
   15f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15f88:	685b      	ldr	r3, [r3, #4]
   15f8a:	61fb      	str	r3, [r7, #28]
    portTickType xMyPeriod = xMyParameter->xPeriod;
   15f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15f8e:	689b      	ldr	r3, [r3, #8]
   15f90:	61bb      	str	r3, [r7, #24]
    xSemaphoreHandle xMySem = xMyParameter->xMySem;
   15f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15f94:	68db      	ldr	r3, [r3, #12]
   15f96:	617b      	str	r3, [r7, #20]

    portBASE_TYPE i;
    portTickType xCurrentTime;
    portBASE_TYPE IS_FIRST_TIME_TO_EXE = 1;
   15f98:	2301      	movs	r3, #1
   15f9a:	62bb      	str	r3, [r7, #40]	; 0x28
    
    // used for periodic task
    portTickType xLastExecutionTime = 100; 
   15f9c:	2364      	movs	r3, #100	; 0x64
   15f9e:	60fb      	str	r3, [r7, #12]

    while(1)
    {
        // all the task start to execute from 100 ms.
        if( IS_FIRST_TIME_TO_EXE == 1 )
   15fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   15fa2:	2b01      	cmp	r3, #1
   15fa4:	d108      	bne.n	15fb8 <vTimeTask+0x44>
        {
            xSemaphoreTake(xMySem, portMAX_DELAY);
   15fa6:	6978      	ldr	r0, [r7, #20]
   15fa8:	2100      	movs	r1, #0
   15faa:	f04f 32ff 	mov.w	r2, #4294967295
   15fae:	2300      	movs	r3, #0
   15fb0:	f7ec ff72 	bl	2e98 <xQueueGenericReceive>
            IS_FIRST_TIME_TO_EXE = 0;
   15fb4:	2300      	movs	r3, #0
   15fb6:	62bb      	str	r3, [r7, #40]	; 0x28
        }

        vPrintNumber(xMyId);
   15fb8:	6a38      	ldr	r0, [r7, #32]
   15fba:	f7ff fed9 	bl	15d70 <vPrintNumber>
        xCurrentTime = xTaskGetTickCount();
   15fbe:	f7ed fe21 	bl	3c04 <xTaskGetTickCount>
   15fc2:	6138      	str	r0, [r7, #16]
        vPrintNumber(xCurrentTime);
   15fc4:	6938      	ldr	r0, [r7, #16]
   15fc6:	f7ff fed3 	bl	15d70 <vPrintNumber>

        for( i = 0; i < 500; ++ i )
   15fca:	2300      	movs	r3, #0
   15fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
   15fce:	e004      	b.n	15fda <vTimeTask+0x66>
        {
            xMyFun();
   15fd0:	69fb      	ldr	r3, [r7, #28]
   15fd2:	4798      	blx	r3

        vPrintNumber(xMyId);
        xCurrentTime = xTaskGetTickCount();
        vPrintNumber(xCurrentTime);

        for( i = 0; i < 500; ++ i )
   15fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15fd6:	3301      	adds	r3, #1
   15fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   15fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15fdc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   15fe0:	dbf6      	blt.n	15fd0 <vTimeTask+0x5c>
        {
            xMyFun();
        }

        xCurrentTime = xTaskGetTickCount();
   15fe2:	f7ed fe0f 	bl	3c04 <xTaskGetTickCount>
   15fe6:	6138      	str	r0, [r7, #16]
        vPrintNumber(xCurrentTime);
   15fe8:	6938      	ldr	r0, [r7, #16]
   15fea:	f7ff fec1 	bl	15d70 <vPrintNumber>
        vPrintNumber((xMyId + 10) * 3);
   15fee:	6a3b      	ldr	r3, [r7, #32]
   15ff0:	f103 020a 	add.w	r2, r3, #10
   15ff4:	4613      	mov	r3, r2
   15ff6:	005b      	lsls	r3, r3, #1
   15ff8:	4413      	add	r3, r2
   15ffa:	4618      	mov	r0, r3
   15ffc:	f7ff feb8 	bl	15d70 <vPrintNumber>
        vTaskDelayUntil( &xLastExecutionTime, xMyPeriod / portTICK_RATE_MS );
   16000:	f107 030c 	add.w	r3, r7, #12
   16004:	4618      	mov	r0, r3
   16006:	69b9      	ldr	r1, [r7, #24]
   16008:	f7ed fabc 	bl	3584 <vTaskDelayUntil>
    }
   1600c:	e7c8      	b.n	15fa0 <vTimeTask+0x2c>
   1600e:	bf00      	nop

00016010 <main>:
}



int main()
{
   16010:	b590      	push	{r4, r7, lr}
   16012:	b087      	sub	sp, #28
   16014:	af04      	add	r7, sp, #16

	init_led();
   16016:	f7ff fd87 	bl	15b28 <init_led>
	init_rs232();
   1601a:	f7ff fde7 	bl	15bec <init_rs232>
	enable_rs232_interrupts();
   1601e:	f7ff fe2b 	bl	15c78 <enable_rs232_interrupts>
	enable_rs232();
   16022:	f7ff fe4b 	bl	15cbc <enable_rs232>

    vSemaphoreInitialise();
   16026:	f7ff ff1b 	bl	15e60 <vSemaphoreInitialise>
    vParametersInit();
   1602a:	f7ff ff59 	bl	15ee0 <vParametersInit>

    portBASE_TYPE i;
    for( i = 0; i < NUMBEROFTASK; ++ i )
   1602e:	2300      	movs	r3, #0
   16030:	607b      	str	r3, [r7, #4]
   16032:	e02a      	b.n	1608a <main+0x7a>
    {
        xTaskCreate(vTimeTask, "vTimeTask",  128, (void *) &parameters[i], xTaskPrio[i], &xTaskOfHandle[i]);
   16034:	687b      	ldr	r3, [r7, #4]
   16036:	011a      	lsls	r2, r3, #4
   16038:	f64a 33dc 	movw	r3, #43996	; 0xabdc
   1603c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16040:	18d4      	adds	r4, r2, r3
   16042:	f240 0328 	movw	r3, #40	; 0x28
   16046:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1604a:	687a      	ldr	r2, [r7, #4]
   1604c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   16050:	461a      	mov	r2, r3
   16052:	687b      	ldr	r3, [r7, #4]
   16054:	0099      	lsls	r1, r3, #2
   16056:	f64a 43ac 	movw	r3, #44204	; 0xacac
   1605a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1605e:	440b      	add	r3, r1
   16060:	9200      	str	r2, [sp, #0]
   16062:	9301      	str	r3, [sp, #4]
   16064:	2300      	movs	r3, #0
   16066:	9302      	str	r3, [sp, #8]
   16068:	2300      	movs	r3, #0
   1606a:	9303      	str	r3, [sp, #12]
   1606c:	f645 7075 	movw	r0, #24437	; 0x5f75
   16070:	f2c0 0001 	movt	r0, #1
   16074:	f247 3194 	movw	r1, #29588	; 0x7394
   16078:	f2c0 0101 	movt	r1, #1
   1607c:	2280      	movs	r2, #128	; 0x80
   1607e:	4623      	mov	r3, r4
   16080:	f7ed f956 	bl	3330 <xTaskGenericCreate>

    vSemaphoreInitialise();
    vParametersInit();

    portBASE_TYPE i;
    for( i = 0; i < NUMBEROFTASK; ++ i )
   16084:	687b      	ldr	r3, [r7, #4]
   16086:	3301      	adds	r3, #1
   16088:	607b      	str	r3, [r7, #4]
   1608a:	687b      	ldr	r3, [r7, #4]
   1608c:	2b0c      	cmp	r3, #12
   1608e:	ddd1      	ble.n	16034 <main+0x24>
    {
        xTaskCreate(vTimeTask, "vTimeTask",  128, (void *) &parameters[i], xTaskPrio[i], &xTaskOfHandle[i]);
    }

	/* Start running the tasks. */
	vTaskStartScheduler();
   16090:	f7ed fccc 	bl	3a2c <vTaskStartScheduler>

	return 0;
   16094:	2300      	movs	r3, #0
}
   16096:	4618      	mov	r0, r3
   16098:	370c      	adds	r7, #12
   1609a:	46bd      	mov	sp, r7
   1609c:	bd90      	pop	{r4, r7, pc}
   1609e:	bf00      	nop

000160a0 <myTraceCreate>:

void myTraceCreate      (){
   160a0:	b480      	push	{r7}
   160a2:	af00      	add	r7, sp, #0
}
   160a4:	46bd      	mov	sp, r7
   160a6:	f85d 7b04 	ldr.w	r7, [sp], #4
   160aa:	4770      	bx	lr

000160ac <myTraceSwitchedIn>:

void myTraceSwitchedIn  (){
   160ac:	b480      	push	{r7}
   160ae:	af00      	add	r7, sp, #0
}
   160b0:	46bd      	mov	sp, r7
   160b2:	f85d 7b04 	ldr.w	r7, [sp], #4
   160b6:	4770      	bx	lr

000160b8 <myTraceSwitchedOut>:

void myTraceSwitchedOut	(){
   160b8:	b480      	push	{r7}
   160ba:	af00      	add	r7, sp, #0
}
   160bc:	46bd      	mov	sp, r7
   160be:	f85d 7b04 	ldr.w	r7, [sp], #4
   160c2:	4770      	bx	lr

000160c4 <myTraceGetTick>:

inline float myTraceGetTick(){
   160c4:	b480      	push	{r7}
   160c6:	af00      	add	r7, sp, #0
}
   160c8:	4618      	mov	r0, r3
   160ca:	46bd      	mov	sp, r7
   160cc:	f85d 7b04 	ldr.w	r7, [sp], #4
   160d0:	4770      	bx	lr
   160d2:	bf00      	nop

000160d4 <myTraceGetTimeMillisecond>:

inline unsigned long myTraceGetTimeMillisecond(){
   160d4:	b480      	push	{r7}
   160d6:	af00      	add	r7, sp, #0
	//return (xTaskGetTickCountFromISR() + myTraceGetTick()) * 1000 / configTICK_RATE_HZ;
}
   160d8:	4618      	mov	r0, r3
   160da:	46bd      	mov	sp, r7
   160dc:	f85d 7b04 	ldr.w	r7, [sp], #4
   160e0:	4770      	bx	lr
   160e2:	bf00      	nop

000160e4 <vApplicationTickHook>:

void vApplicationTickHook()
{
   160e4:	b580      	push	{r7, lr}
   160e6:	b082      	sub	sp, #8
   160e8:	af00      	add	r7, sp, #0
    portBASE_TYPE i;
    portTickType xCurrentTime = xTaskGetTickCount();
   160ea:	f7ed fd8b 	bl	3c04 <xTaskGetTickCount>
   160ee:	6038      	str	r0, [r7, #0]
    
    if( xCurrentTime == 100 )
   160f0:	683b      	ldr	r3, [r7, #0]
   160f2:	2b64      	cmp	r3, #100	; 0x64
   160f4:	d115      	bne.n	16122 <vApplicationTickHook+0x3e>
    {
        for( i = 0; i < NUMBEROFTASK; ++ i )
   160f6:	2300      	movs	r3, #0
   160f8:	607b      	str	r3, [r7, #4]
   160fa:	e00f      	b.n	1611c <vApplicationTickHook+0x38>
        {
            xSemaphoreGive( xSemaphoreTable[i] );
   160fc:	f240 13f0 	movw	r3, #496	; 0x1f0
   16100:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16104:	687a      	ldr	r2, [r7, #4]
   16106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1610a:	4618      	mov	r0, r3
   1610c:	2100      	movs	r1, #0
   1610e:	2200      	movs	r2, #0
   16110:	2300      	movs	r3, #0
   16112:	f7ec fdfb 	bl	2d0c <xQueueGenericSend>
    portBASE_TYPE i;
    portTickType xCurrentTime = xTaskGetTickCount();
    
    if( xCurrentTime == 100 )
    {
        for( i = 0; i < NUMBEROFTASK; ++ i )
   16116:	687b      	ldr	r3, [r7, #4]
   16118:	3301      	adds	r3, #1
   1611a:	607b      	str	r3, [r7, #4]
   1611c:	687b      	ldr	r3, [r7, #4]
   1611e:	2b0c      	cmp	r3, #12
   16120:	ddec      	ble.n	160fc <vApplicationTickHook+0x18>
        {
            xSemaphoreGive( xSemaphoreTable[i] );
        }
    }
}
   16122:	3708      	adds	r7, #8
   16124:	46bd      	mov	sp, r7
   16126:	bd80      	pop	{r7, pc}

00016128 <__aeabi_drsub>:
   16128:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   1612c:	e002      	b.n	16134 <__adddf3>
   1612e:	bf00      	nop

00016130 <__aeabi_dsub>:
   16130:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00016134 <__adddf3>:
   16134:	b530      	push	{r4, r5, lr}
   16136:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1613a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   1613e:	ea94 0f05 	teq	r4, r5
   16142:	bf08      	it	eq
   16144:	ea90 0f02 	teqeq	r0, r2
   16148:	bf1f      	itttt	ne
   1614a:	ea54 0c00 	orrsne.w	ip, r4, r0
   1614e:	ea55 0c02 	orrsne.w	ip, r5, r2
   16152:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   16156:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1615a:	f000 80e2 	beq.w	16322 <__adddf3+0x1ee>
   1615e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   16162:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   16166:	bfb8      	it	lt
   16168:	426d      	neglt	r5, r5
   1616a:	dd0c      	ble.n	16186 <__adddf3+0x52>
   1616c:	442c      	add	r4, r5
   1616e:	ea80 0202 	eor.w	r2, r0, r2
   16172:	ea81 0303 	eor.w	r3, r1, r3
   16176:	ea82 0000 	eor.w	r0, r2, r0
   1617a:	ea83 0101 	eor.w	r1, r3, r1
   1617e:	ea80 0202 	eor.w	r2, r0, r2
   16182:	ea81 0303 	eor.w	r3, r1, r3
   16186:	2d36      	cmp	r5, #54	; 0x36
   16188:	bf88      	it	hi
   1618a:	bd30      	pophi	{r4, r5, pc}
   1618c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   16190:	ea4f 3101 	mov.w	r1, r1, lsl #12
   16194:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   16198:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   1619c:	d002      	beq.n	161a4 <__adddf3+0x70>
   1619e:	4240      	negs	r0, r0
   161a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   161a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   161a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   161ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   161b0:	d002      	beq.n	161b8 <__adddf3+0x84>
   161b2:	4252      	negs	r2, r2
   161b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   161b8:	ea94 0f05 	teq	r4, r5
   161bc:	f000 80a7 	beq.w	1630e <__adddf3+0x1da>
   161c0:	f1a4 0401 	sub.w	r4, r4, #1
   161c4:	f1d5 0e20 	rsbs	lr, r5, #32
   161c8:	db0d      	blt.n	161e6 <__adddf3+0xb2>
   161ca:	fa02 fc0e 	lsl.w	ip, r2, lr
   161ce:	fa22 f205 	lsr.w	r2, r2, r5
   161d2:	1880      	adds	r0, r0, r2
   161d4:	f141 0100 	adc.w	r1, r1, #0
   161d8:	fa03 f20e 	lsl.w	r2, r3, lr
   161dc:	1880      	adds	r0, r0, r2
   161de:	fa43 f305 	asr.w	r3, r3, r5
   161e2:	4159      	adcs	r1, r3
   161e4:	e00e      	b.n	16204 <__adddf3+0xd0>
   161e6:	f1a5 0520 	sub.w	r5, r5, #32
   161ea:	f10e 0e20 	add.w	lr, lr, #32
   161ee:	2a01      	cmp	r2, #1
   161f0:	fa03 fc0e 	lsl.w	ip, r3, lr
   161f4:	bf28      	it	cs
   161f6:	f04c 0c02 	orrcs.w	ip, ip, #2
   161fa:	fa43 f305 	asr.w	r3, r3, r5
   161fe:	18c0      	adds	r0, r0, r3
   16200:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   16204:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   16208:	d507      	bpl.n	1621a <__adddf3+0xe6>
   1620a:	f04f 0e00 	mov.w	lr, #0
   1620e:	f1dc 0c00 	rsbs	ip, ip, #0
   16212:	eb7e 0000 	sbcs.w	r0, lr, r0
   16216:	eb6e 0101 	sbc.w	r1, lr, r1
   1621a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   1621e:	d31b      	bcc.n	16258 <__adddf3+0x124>
   16220:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   16224:	d30c      	bcc.n	16240 <__adddf3+0x10c>
   16226:	0849      	lsrs	r1, r1, #1
   16228:	ea5f 0030 	movs.w	r0, r0, rrx
   1622c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   16230:	f104 0401 	add.w	r4, r4, #1
   16234:	ea4f 5244 	mov.w	r2, r4, lsl #21
   16238:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   1623c:	f080 809a 	bcs.w	16374 <__adddf3+0x240>
   16240:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   16244:	bf08      	it	eq
   16246:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1624a:	f150 0000 	adcs.w	r0, r0, #0
   1624e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   16252:	ea41 0105 	orr.w	r1, r1, r5
   16256:	bd30      	pop	{r4, r5, pc}
   16258:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   1625c:	4140      	adcs	r0, r0
   1625e:	eb41 0101 	adc.w	r1, r1, r1
   16262:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   16266:	f1a4 0401 	sub.w	r4, r4, #1
   1626a:	d1e9      	bne.n	16240 <__adddf3+0x10c>
   1626c:	f091 0f00 	teq	r1, #0
   16270:	bf04      	itt	eq
   16272:	4601      	moveq	r1, r0
   16274:	2000      	moveq	r0, #0
   16276:	fab1 f381 	clz	r3, r1
   1627a:	bf08      	it	eq
   1627c:	3320      	addeq	r3, #32
   1627e:	f1a3 030b 	sub.w	r3, r3, #11
   16282:	f1b3 0220 	subs.w	r2, r3, #32
   16286:	da0c      	bge.n	162a2 <__adddf3+0x16e>
   16288:	320c      	adds	r2, #12
   1628a:	dd08      	ble.n	1629e <__adddf3+0x16a>
   1628c:	f102 0c14 	add.w	ip, r2, #20
   16290:	f1c2 020c 	rsb	r2, r2, #12
   16294:	fa01 f00c 	lsl.w	r0, r1, ip
   16298:	fa21 f102 	lsr.w	r1, r1, r2
   1629c:	e00c      	b.n	162b8 <__adddf3+0x184>
   1629e:	f102 0214 	add.w	r2, r2, #20
   162a2:	bfd8      	it	le
   162a4:	f1c2 0c20 	rsble	ip, r2, #32
   162a8:	fa01 f102 	lsl.w	r1, r1, r2
   162ac:	fa20 fc0c 	lsr.w	ip, r0, ip
   162b0:	bfdc      	itt	le
   162b2:	ea41 010c 	orrle.w	r1, r1, ip
   162b6:	4090      	lslle	r0, r2
   162b8:	1ae4      	subs	r4, r4, r3
   162ba:	bfa2      	ittt	ge
   162bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   162c0:	4329      	orrge	r1, r5
   162c2:	bd30      	popge	{r4, r5, pc}
   162c4:	ea6f 0404 	mvn.w	r4, r4
   162c8:	3c1f      	subs	r4, #31
   162ca:	da1c      	bge.n	16306 <__adddf3+0x1d2>
   162cc:	340c      	adds	r4, #12
   162ce:	dc0e      	bgt.n	162ee <__adddf3+0x1ba>
   162d0:	f104 0414 	add.w	r4, r4, #20
   162d4:	f1c4 0220 	rsb	r2, r4, #32
   162d8:	fa20 f004 	lsr.w	r0, r0, r4
   162dc:	fa01 f302 	lsl.w	r3, r1, r2
   162e0:	ea40 0003 	orr.w	r0, r0, r3
   162e4:	fa21 f304 	lsr.w	r3, r1, r4
   162e8:	ea45 0103 	orr.w	r1, r5, r3
   162ec:	bd30      	pop	{r4, r5, pc}
   162ee:	f1c4 040c 	rsb	r4, r4, #12
   162f2:	f1c4 0220 	rsb	r2, r4, #32
   162f6:	fa20 f002 	lsr.w	r0, r0, r2
   162fa:	fa01 f304 	lsl.w	r3, r1, r4
   162fe:	ea40 0003 	orr.w	r0, r0, r3
   16302:	4629      	mov	r1, r5
   16304:	bd30      	pop	{r4, r5, pc}
   16306:	fa21 f004 	lsr.w	r0, r1, r4
   1630a:	4629      	mov	r1, r5
   1630c:	bd30      	pop	{r4, r5, pc}
   1630e:	f094 0f00 	teq	r4, #0
   16312:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   16316:	bf06      	itte	eq
   16318:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   1631c:	3401      	addeq	r4, #1
   1631e:	3d01      	subne	r5, #1
   16320:	e74e      	b.n	161c0 <__adddf3+0x8c>
   16322:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   16326:	bf18      	it	ne
   16328:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1632c:	d029      	beq.n	16382 <__adddf3+0x24e>
   1632e:	ea94 0f05 	teq	r4, r5
   16332:	bf08      	it	eq
   16334:	ea90 0f02 	teqeq	r0, r2
   16338:	d005      	beq.n	16346 <__adddf3+0x212>
   1633a:	ea54 0c00 	orrs.w	ip, r4, r0
   1633e:	bf04      	itt	eq
   16340:	4619      	moveq	r1, r3
   16342:	4610      	moveq	r0, r2
   16344:	bd30      	pop	{r4, r5, pc}
   16346:	ea91 0f03 	teq	r1, r3
   1634a:	bf1e      	ittt	ne
   1634c:	2100      	movne	r1, #0
   1634e:	2000      	movne	r0, #0
   16350:	bd30      	popne	{r4, r5, pc}
   16352:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   16356:	d105      	bne.n	16364 <__adddf3+0x230>
   16358:	0040      	lsls	r0, r0, #1
   1635a:	4149      	adcs	r1, r1
   1635c:	bf28      	it	cs
   1635e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   16362:	bd30      	pop	{r4, r5, pc}
   16364:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   16368:	bf3c      	itt	cc
   1636a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   1636e:	bd30      	popcc	{r4, r5, pc}
   16370:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   16374:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   16378:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1637c:	f04f 0000 	mov.w	r0, #0
   16380:	bd30      	pop	{r4, r5, pc}
   16382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   16386:	bf1a      	itte	ne
   16388:	4619      	movne	r1, r3
   1638a:	4610      	movne	r0, r2
   1638c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   16390:	bf1c      	itt	ne
   16392:	460b      	movne	r3, r1
   16394:	4602      	movne	r2, r0
   16396:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1639a:	bf06      	itte	eq
   1639c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   163a0:	ea91 0f03 	teqeq	r1, r3
   163a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   163a8:	bd30      	pop	{r4, r5, pc}
   163aa:	bf00      	nop

000163ac <__aeabi_ui2d>:
   163ac:	f090 0f00 	teq	r0, #0
   163b0:	bf04      	itt	eq
   163b2:	2100      	moveq	r1, #0
   163b4:	4770      	bxeq	lr
   163b6:	b530      	push	{r4, r5, lr}
   163b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   163bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   163c0:	f04f 0500 	mov.w	r5, #0
   163c4:	f04f 0100 	mov.w	r1, #0
   163c8:	e750      	b.n	1626c <__adddf3+0x138>
   163ca:	bf00      	nop

000163cc <__aeabi_i2d>:
   163cc:	f090 0f00 	teq	r0, #0
   163d0:	bf04      	itt	eq
   163d2:	2100      	moveq	r1, #0
   163d4:	4770      	bxeq	lr
   163d6:	b530      	push	{r4, r5, lr}
   163d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   163dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   163e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   163e4:	bf48      	it	mi
   163e6:	4240      	negmi	r0, r0
   163e8:	f04f 0100 	mov.w	r1, #0
   163ec:	e73e      	b.n	1626c <__adddf3+0x138>
   163ee:	bf00      	nop

000163f0 <__aeabi_f2d>:
   163f0:	0042      	lsls	r2, r0, #1
   163f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   163f6:	ea4f 0131 	mov.w	r1, r1, rrx
   163fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
   163fe:	bf1f      	itttt	ne
   16400:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   16404:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   16408:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   1640c:	4770      	bxne	lr
   1640e:	f092 0f00 	teq	r2, #0
   16412:	bf14      	ite	ne
   16414:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   16418:	4770      	bxeq	lr
   1641a:	b530      	push	{r4, r5, lr}
   1641c:	f44f 7460 	mov.w	r4, #896	; 0x380
   16420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   16424:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   16428:	e720      	b.n	1626c <__adddf3+0x138>
   1642a:	bf00      	nop

0001642c <__aeabi_ul2d>:
   1642c:	ea50 0201 	orrs.w	r2, r0, r1
   16430:	bf08      	it	eq
   16432:	4770      	bxeq	lr
   16434:	b530      	push	{r4, r5, lr}
   16436:	f04f 0500 	mov.w	r5, #0
   1643a:	e00a      	b.n	16452 <__aeabi_l2d+0x16>

0001643c <__aeabi_l2d>:
   1643c:	ea50 0201 	orrs.w	r2, r0, r1
   16440:	bf08      	it	eq
   16442:	4770      	bxeq	lr
   16444:	b530      	push	{r4, r5, lr}
   16446:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   1644a:	d502      	bpl.n	16452 <__aeabi_l2d+0x16>
   1644c:	4240      	negs	r0, r0
   1644e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   16452:	f44f 6480 	mov.w	r4, #1024	; 0x400
   16456:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1645a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1645e:	f43f aedc 	beq.w	1621a <__adddf3+0xe6>
   16462:	f04f 0203 	mov.w	r2, #3
   16466:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1646a:	bf18      	it	ne
   1646c:	3203      	addne	r2, #3
   1646e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   16472:	bf18      	it	ne
   16474:	3203      	addne	r2, #3
   16476:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1647a:	f1c2 0320 	rsb	r3, r2, #32
   1647e:	fa00 fc03 	lsl.w	ip, r0, r3
   16482:	fa20 f002 	lsr.w	r0, r0, r2
   16486:	fa01 fe03 	lsl.w	lr, r1, r3
   1648a:	ea40 000e 	orr.w	r0, r0, lr
   1648e:	fa21 f102 	lsr.w	r1, r1, r2
   16492:	4414      	add	r4, r2
   16494:	e6c1      	b.n	1621a <__adddf3+0xe6>
   16496:	bf00      	nop

00016498 <__aeabi_dmul>:
   16498:	b570      	push	{r4, r5, r6, lr}
   1649a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1649e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   164a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   164a6:	bf1d      	ittte	ne
   164a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   164ac:	ea94 0f0c 	teqne	r4, ip
   164b0:	ea95 0f0c 	teqne	r5, ip
   164b4:	f000 f8de 	bleq	16674 <__aeabi_dmul+0x1dc>
   164b8:	442c      	add	r4, r5
   164ba:	ea81 0603 	eor.w	r6, r1, r3
   164be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   164c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   164c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   164ca:	bf18      	it	ne
   164cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   164d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   164d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   164d8:	d038      	beq.n	1654c <__aeabi_dmul+0xb4>
   164da:	fba0 ce02 	umull	ip, lr, r0, r2
   164de:	f04f 0500 	mov.w	r5, #0
   164e2:	fbe1 e502 	umlal	lr, r5, r1, r2
   164e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   164ea:	fbe0 e503 	umlal	lr, r5, r0, r3
   164ee:	f04f 0600 	mov.w	r6, #0
   164f2:	fbe1 5603 	umlal	r5, r6, r1, r3
   164f6:	f09c 0f00 	teq	ip, #0
   164fa:	bf18      	it	ne
   164fc:	f04e 0e01 	orrne.w	lr, lr, #1
   16500:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   16504:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   16508:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   1650c:	d204      	bcs.n	16518 <__aeabi_dmul+0x80>
   1650e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   16512:	416d      	adcs	r5, r5
   16514:	eb46 0606 	adc.w	r6, r6, r6
   16518:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   1651c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   16520:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   16524:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   16528:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   1652c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   16530:	bf88      	it	hi
   16532:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   16536:	d81e      	bhi.n	16576 <__aeabi_dmul+0xde>
   16538:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   1653c:	bf08      	it	eq
   1653e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   16542:	f150 0000 	adcs.w	r0, r0, #0
   16546:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1654a:	bd70      	pop	{r4, r5, r6, pc}
   1654c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   16550:	ea46 0101 	orr.w	r1, r6, r1
   16554:	ea40 0002 	orr.w	r0, r0, r2
   16558:	ea81 0103 	eor.w	r1, r1, r3
   1655c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   16560:	bfc2      	ittt	gt
   16562:	ebd4 050c 	rsbsgt	r5, r4, ip
   16566:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1656a:	bd70      	popgt	{r4, r5, r6, pc}
   1656c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   16570:	f04f 0e00 	mov.w	lr, #0
   16574:	3c01      	subs	r4, #1
   16576:	f300 80ab 	bgt.w	166d0 <__aeabi_dmul+0x238>
   1657a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   1657e:	bfde      	ittt	le
   16580:	2000      	movle	r0, #0
   16582:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   16586:	bd70      	pople	{r4, r5, r6, pc}
   16588:	f1c4 0400 	rsb	r4, r4, #0
   1658c:	3c20      	subs	r4, #32
   1658e:	da35      	bge.n	165fc <__aeabi_dmul+0x164>
   16590:	340c      	adds	r4, #12
   16592:	dc1b      	bgt.n	165cc <__aeabi_dmul+0x134>
   16594:	f104 0414 	add.w	r4, r4, #20
   16598:	f1c4 0520 	rsb	r5, r4, #32
   1659c:	fa00 f305 	lsl.w	r3, r0, r5
   165a0:	fa20 f004 	lsr.w	r0, r0, r4
   165a4:	fa01 f205 	lsl.w	r2, r1, r5
   165a8:	ea40 0002 	orr.w	r0, r0, r2
   165ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   165b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   165b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   165b8:	fa21 f604 	lsr.w	r6, r1, r4
   165bc:	eb42 0106 	adc.w	r1, r2, r6
   165c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   165c4:	bf08      	it	eq
   165c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   165ca:	bd70      	pop	{r4, r5, r6, pc}
   165cc:	f1c4 040c 	rsb	r4, r4, #12
   165d0:	f1c4 0520 	rsb	r5, r4, #32
   165d4:	fa00 f304 	lsl.w	r3, r0, r4
   165d8:	fa20 f005 	lsr.w	r0, r0, r5
   165dc:	fa01 f204 	lsl.w	r2, r1, r4
   165e0:	ea40 0002 	orr.w	r0, r0, r2
   165e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   165e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   165ec:	f141 0100 	adc.w	r1, r1, #0
   165f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   165f4:	bf08      	it	eq
   165f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   165fa:	bd70      	pop	{r4, r5, r6, pc}
   165fc:	f1c4 0520 	rsb	r5, r4, #32
   16600:	fa00 f205 	lsl.w	r2, r0, r5
   16604:	ea4e 0e02 	orr.w	lr, lr, r2
   16608:	fa20 f304 	lsr.w	r3, r0, r4
   1660c:	fa01 f205 	lsl.w	r2, r1, r5
   16610:	ea43 0302 	orr.w	r3, r3, r2
   16614:	fa21 f004 	lsr.w	r0, r1, r4
   16618:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1661c:	fa21 f204 	lsr.w	r2, r1, r4
   16620:	ea20 0002 	bic.w	r0, r0, r2
   16624:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   16628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1662c:	bf08      	it	eq
   1662e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   16632:	bd70      	pop	{r4, r5, r6, pc}
   16634:	f094 0f00 	teq	r4, #0
   16638:	d10f      	bne.n	1665a <__aeabi_dmul+0x1c2>
   1663a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   1663e:	0040      	lsls	r0, r0, #1
   16640:	eb41 0101 	adc.w	r1, r1, r1
   16644:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   16648:	bf08      	it	eq
   1664a:	3c01      	subeq	r4, #1
   1664c:	d0f7      	beq.n	1663e <__aeabi_dmul+0x1a6>
   1664e:	ea41 0106 	orr.w	r1, r1, r6
   16652:	f095 0f00 	teq	r5, #0
   16656:	bf18      	it	ne
   16658:	4770      	bxne	lr
   1665a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   1665e:	0052      	lsls	r2, r2, #1
   16660:	eb43 0303 	adc.w	r3, r3, r3
   16664:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   16668:	bf08      	it	eq
   1666a:	3d01      	subeq	r5, #1
   1666c:	d0f7      	beq.n	1665e <__aeabi_dmul+0x1c6>
   1666e:	ea43 0306 	orr.w	r3, r3, r6
   16672:	4770      	bx	lr
   16674:	ea94 0f0c 	teq	r4, ip
   16678:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1667c:	bf18      	it	ne
   1667e:	ea95 0f0c 	teqne	r5, ip
   16682:	d00c      	beq.n	1669e <__aeabi_dmul+0x206>
   16684:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   16688:	bf18      	it	ne
   1668a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1668e:	d1d1      	bne.n	16634 <__aeabi_dmul+0x19c>
   16690:	ea81 0103 	eor.w	r1, r1, r3
   16694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   16698:	f04f 0000 	mov.w	r0, #0
   1669c:	bd70      	pop	{r4, r5, r6, pc}
   1669e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   166a2:	bf06      	itte	eq
   166a4:	4610      	moveq	r0, r2
   166a6:	4619      	moveq	r1, r3
   166a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   166ac:	d019      	beq.n	166e2 <__aeabi_dmul+0x24a>
   166ae:	ea94 0f0c 	teq	r4, ip
   166b2:	d102      	bne.n	166ba <__aeabi_dmul+0x222>
   166b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   166b8:	d113      	bne.n	166e2 <__aeabi_dmul+0x24a>
   166ba:	ea95 0f0c 	teq	r5, ip
   166be:	d105      	bne.n	166cc <__aeabi_dmul+0x234>
   166c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   166c4:	bf1c      	itt	ne
   166c6:	4610      	movne	r0, r2
   166c8:	4619      	movne	r1, r3
   166ca:	d10a      	bne.n	166e2 <__aeabi_dmul+0x24a>
   166cc:	ea81 0103 	eor.w	r1, r1, r3
   166d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   166d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   166d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   166dc:	f04f 0000 	mov.w	r0, #0
   166e0:	bd70      	pop	{r4, r5, r6, pc}
   166e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   166e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   166ea:	bd70      	pop	{r4, r5, r6, pc}

000166ec <__aeabi_ddiv>:
   166ec:	b570      	push	{r4, r5, r6, lr}
   166ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   166f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   166f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   166fa:	bf1d      	ittte	ne
   166fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   16700:	ea94 0f0c 	teqne	r4, ip
   16704:	ea95 0f0c 	teqne	r5, ip
   16708:	f000 f8a7 	bleq	1685a <__aeabi_ddiv+0x16e>
   1670c:	eba4 0405 	sub.w	r4, r4, r5
   16710:	ea81 0e03 	eor.w	lr, r1, r3
   16714:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   16718:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1671c:	f000 8088 	beq.w	16830 <__aeabi_ddiv+0x144>
   16720:	ea4f 3303 	mov.w	r3, r3, lsl #12
   16724:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   16728:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   1672c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   16730:	ea4f 2202 	mov.w	r2, r2, lsl #8
   16734:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   16738:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   1673c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   16740:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   16744:	429d      	cmp	r5, r3
   16746:	bf08      	it	eq
   16748:	4296      	cmpeq	r6, r2
   1674a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   1674e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   16752:	d202      	bcs.n	1675a <__aeabi_ddiv+0x6e>
   16754:	085b      	lsrs	r3, r3, #1
   16756:	ea4f 0232 	mov.w	r2, r2, rrx
   1675a:	1ab6      	subs	r6, r6, r2
   1675c:	eb65 0503 	sbc.w	r5, r5, r3
   16760:	085b      	lsrs	r3, r3, #1
   16762:	ea4f 0232 	mov.w	r2, r2, rrx
   16766:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   1676a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   1676e:	ebb6 0e02 	subs.w	lr, r6, r2
   16772:	eb75 0e03 	sbcs.w	lr, r5, r3
   16776:	bf22      	ittt	cs
   16778:	1ab6      	subcs	r6, r6, r2
   1677a:	4675      	movcs	r5, lr
   1677c:	ea40 000c 	orrcs.w	r0, r0, ip
   16780:	085b      	lsrs	r3, r3, #1
   16782:	ea4f 0232 	mov.w	r2, r2, rrx
   16786:	ebb6 0e02 	subs.w	lr, r6, r2
   1678a:	eb75 0e03 	sbcs.w	lr, r5, r3
   1678e:	bf22      	ittt	cs
   16790:	1ab6      	subcs	r6, r6, r2
   16792:	4675      	movcs	r5, lr
   16794:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   16798:	085b      	lsrs	r3, r3, #1
   1679a:	ea4f 0232 	mov.w	r2, r2, rrx
   1679e:	ebb6 0e02 	subs.w	lr, r6, r2
   167a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   167a6:	bf22      	ittt	cs
   167a8:	1ab6      	subcs	r6, r6, r2
   167aa:	4675      	movcs	r5, lr
   167ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   167b0:	085b      	lsrs	r3, r3, #1
   167b2:	ea4f 0232 	mov.w	r2, r2, rrx
   167b6:	ebb6 0e02 	subs.w	lr, r6, r2
   167ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   167be:	bf22      	ittt	cs
   167c0:	1ab6      	subcs	r6, r6, r2
   167c2:	4675      	movcs	r5, lr
   167c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   167c8:	ea55 0e06 	orrs.w	lr, r5, r6
   167cc:	d018      	beq.n	16800 <__aeabi_ddiv+0x114>
   167ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   167d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   167d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   167da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   167de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   167e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   167e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   167ea:	d1c0      	bne.n	1676e <__aeabi_ddiv+0x82>
   167ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   167f0:	d10b      	bne.n	1680a <__aeabi_ddiv+0x11e>
   167f2:	ea41 0100 	orr.w	r1, r1, r0
   167f6:	f04f 0000 	mov.w	r0, #0
   167fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   167fe:	e7b6      	b.n	1676e <__aeabi_ddiv+0x82>
   16800:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   16804:	bf04      	itt	eq
   16806:	4301      	orreq	r1, r0
   16808:	2000      	moveq	r0, #0
   1680a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1680e:	bf88      	it	hi
   16810:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   16814:	f63f aeaf 	bhi.w	16576 <__aeabi_dmul+0xde>
   16818:	ebb5 0c03 	subs.w	ip, r5, r3
   1681c:	bf04      	itt	eq
   1681e:	ebb6 0c02 	subseq.w	ip, r6, r2
   16822:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   16826:	f150 0000 	adcs.w	r0, r0, #0
   1682a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1682e:	bd70      	pop	{r4, r5, r6, pc}
   16830:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   16834:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   16838:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   1683c:	bfc2      	ittt	gt
   1683e:	ebd4 050c 	rsbsgt	r5, r4, ip
   16842:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   16846:	bd70      	popgt	{r4, r5, r6, pc}
   16848:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1684c:	f04f 0e00 	mov.w	lr, #0
   16850:	3c01      	subs	r4, #1
   16852:	e690      	b.n	16576 <__aeabi_dmul+0xde>
   16854:	ea45 0e06 	orr.w	lr, r5, r6
   16858:	e68d      	b.n	16576 <__aeabi_dmul+0xde>
   1685a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1685e:	ea94 0f0c 	teq	r4, ip
   16862:	bf08      	it	eq
   16864:	ea95 0f0c 	teqeq	r5, ip
   16868:	f43f af3b 	beq.w	166e2 <__aeabi_dmul+0x24a>
   1686c:	ea94 0f0c 	teq	r4, ip
   16870:	d10a      	bne.n	16888 <__aeabi_ddiv+0x19c>
   16872:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   16876:	f47f af34 	bne.w	166e2 <__aeabi_dmul+0x24a>
   1687a:	ea95 0f0c 	teq	r5, ip
   1687e:	f47f af25 	bne.w	166cc <__aeabi_dmul+0x234>
   16882:	4610      	mov	r0, r2
   16884:	4619      	mov	r1, r3
   16886:	e72c      	b.n	166e2 <__aeabi_dmul+0x24a>
   16888:	ea95 0f0c 	teq	r5, ip
   1688c:	d106      	bne.n	1689c <__aeabi_ddiv+0x1b0>
   1688e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   16892:	f43f aefd 	beq.w	16690 <__aeabi_dmul+0x1f8>
   16896:	4610      	mov	r0, r2
   16898:	4619      	mov	r1, r3
   1689a:	e722      	b.n	166e2 <__aeabi_dmul+0x24a>
   1689c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   168a0:	bf18      	it	ne
   168a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   168a6:	f47f aec5 	bne.w	16634 <__aeabi_dmul+0x19c>
   168aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   168ae:	f47f af0d 	bne.w	166cc <__aeabi_dmul+0x234>
   168b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   168b6:	f47f aeeb 	bne.w	16690 <__aeabi_dmul+0x1f8>
   168ba:	e712      	b.n	166e2 <__aeabi_dmul+0x24a>

000168bc <__gedf2>:
   168bc:	f04f 3cff 	mov.w	ip, #4294967295
   168c0:	e006      	b.n	168d0 <__cmpdf2+0x4>
   168c2:	bf00      	nop

000168c4 <__ledf2>:
   168c4:	f04f 0c01 	mov.w	ip, #1
   168c8:	e002      	b.n	168d0 <__cmpdf2+0x4>
   168ca:	bf00      	nop

000168cc <__cmpdf2>:
   168cc:	f04f 0c01 	mov.w	ip, #1
   168d0:	f84d cd04 	str.w	ip, [sp, #-4]!
   168d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   168d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   168dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   168e0:	bf18      	it	ne
   168e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   168e6:	d01b      	beq.n	16920 <__cmpdf2+0x54>
   168e8:	b001      	add	sp, #4
   168ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   168ee:	bf0c      	ite	eq
   168f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   168f4:	ea91 0f03 	teqne	r1, r3
   168f8:	bf02      	ittt	eq
   168fa:	ea90 0f02 	teqeq	r0, r2
   168fe:	2000      	moveq	r0, #0
   16900:	4770      	bxeq	lr
   16902:	f110 0f00 	cmn.w	r0, #0
   16906:	ea91 0f03 	teq	r1, r3
   1690a:	bf58      	it	pl
   1690c:	4299      	cmppl	r1, r3
   1690e:	bf08      	it	eq
   16910:	4290      	cmpeq	r0, r2
   16912:	bf2c      	ite	cs
   16914:	17d8      	asrcs	r0, r3, #31
   16916:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   1691a:	f040 0001 	orr.w	r0, r0, #1
   1691e:	4770      	bx	lr
   16920:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   16924:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   16928:	d102      	bne.n	16930 <__cmpdf2+0x64>
   1692a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1692e:	d107      	bne.n	16940 <__cmpdf2+0x74>
   16930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   16934:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   16938:	d1d6      	bne.n	168e8 <__cmpdf2+0x1c>
   1693a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1693e:	d0d3      	beq.n	168e8 <__cmpdf2+0x1c>
   16940:	f85d 0b04 	ldr.w	r0, [sp], #4
   16944:	4770      	bx	lr
   16946:	bf00      	nop

00016948 <__aeabi_cdrcmple>:
   16948:	4684      	mov	ip, r0
   1694a:	4610      	mov	r0, r2
   1694c:	4662      	mov	r2, ip
   1694e:	468c      	mov	ip, r1
   16950:	4619      	mov	r1, r3
   16952:	4663      	mov	r3, ip
   16954:	e000      	b.n	16958 <__aeabi_cdcmpeq>
   16956:	bf00      	nop

00016958 <__aeabi_cdcmpeq>:
   16958:	b501      	push	{r0, lr}
   1695a:	f7ff ffb7 	bl	168cc <__cmpdf2>
   1695e:	2800      	cmp	r0, #0
   16960:	bf48      	it	mi
   16962:	f110 0f00 	cmnmi.w	r0, #0
   16966:	bd01      	pop	{r0, pc}

00016968 <__aeabi_dcmpeq>:
   16968:	f84d ed08 	str.w	lr, [sp, #-8]!
   1696c:	f7ff fff4 	bl	16958 <__aeabi_cdcmpeq>
   16970:	bf0c      	ite	eq
   16972:	2001      	moveq	r0, #1
   16974:	2000      	movne	r0, #0
   16976:	f85d fb08 	ldr.w	pc, [sp], #8
   1697a:	bf00      	nop

0001697c <__aeabi_dcmplt>:
   1697c:	f84d ed08 	str.w	lr, [sp, #-8]!
   16980:	f7ff ffea 	bl	16958 <__aeabi_cdcmpeq>
   16984:	bf34      	ite	cc
   16986:	2001      	movcc	r0, #1
   16988:	2000      	movcs	r0, #0
   1698a:	f85d fb08 	ldr.w	pc, [sp], #8
   1698e:	bf00      	nop

00016990 <__aeabi_dcmple>:
   16990:	f84d ed08 	str.w	lr, [sp, #-8]!
   16994:	f7ff ffe0 	bl	16958 <__aeabi_cdcmpeq>
   16998:	bf94      	ite	ls
   1699a:	2001      	movls	r0, #1
   1699c:	2000      	movhi	r0, #0
   1699e:	f85d fb08 	ldr.w	pc, [sp], #8
   169a2:	bf00      	nop

000169a4 <__aeabi_dcmpge>:
   169a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   169a8:	f7ff ffce 	bl	16948 <__aeabi_cdrcmple>
   169ac:	bf94      	ite	ls
   169ae:	2001      	movls	r0, #1
   169b0:	2000      	movhi	r0, #0
   169b2:	f85d fb08 	ldr.w	pc, [sp], #8
   169b6:	bf00      	nop

000169b8 <__aeabi_dcmpgt>:
   169b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   169bc:	f7ff ffc4 	bl	16948 <__aeabi_cdrcmple>
   169c0:	bf34      	ite	cc
   169c2:	2001      	movcc	r0, #1
   169c4:	2000      	movcs	r0, #0
   169c6:	f85d fb08 	ldr.w	pc, [sp], #8
   169ca:	bf00      	nop

000169cc <__aeabi_d2iz>:
   169cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   169d0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   169d4:	d215      	bcs.n	16a02 <__aeabi_d2iz+0x36>
   169d6:	d511      	bpl.n	169fc <__aeabi_d2iz+0x30>
   169d8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   169dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   169e0:	d912      	bls.n	16a08 <__aeabi_d2iz+0x3c>
   169e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   169e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   169ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   169ee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   169f2:	fa23 f002 	lsr.w	r0, r3, r2
   169f6:	bf18      	it	ne
   169f8:	4240      	negne	r0, r0
   169fa:	4770      	bx	lr
   169fc:	f04f 0000 	mov.w	r0, #0
   16a00:	4770      	bx	lr
   16a02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   16a06:	d105      	bne.n	16a14 <__aeabi_d2iz+0x48>
   16a08:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   16a0c:	bf08      	it	eq
   16a0e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   16a12:	4770      	bx	lr
   16a14:	f04f 0000 	mov.w	r0, #0
   16a18:	4770      	bx	lr
   16a1a:	bf00      	nop

00016a1c <__aeabi_d2uiz>:
   16a1c:	004a      	lsls	r2, r1, #1
   16a1e:	d211      	bcs.n	16a44 <__aeabi_d2uiz+0x28>
   16a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   16a24:	d211      	bcs.n	16a4a <__aeabi_d2uiz+0x2e>
   16a26:	d50d      	bpl.n	16a44 <__aeabi_d2uiz+0x28>
   16a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   16a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   16a30:	d40e      	bmi.n	16a50 <__aeabi_d2uiz+0x34>
   16a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   16a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   16a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   16a3e:	fa23 f002 	lsr.w	r0, r3, r2
   16a42:	4770      	bx	lr
   16a44:	f04f 0000 	mov.w	r0, #0
   16a48:	4770      	bx	lr
   16a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   16a4e:	d102      	bne.n	16a56 <__aeabi_d2uiz+0x3a>
   16a50:	f04f 30ff 	mov.w	r0, #4294967295
   16a54:	4770      	bx	lr
   16a56:	f04f 0000 	mov.w	r0, #0
   16a5a:	4770      	bx	lr

00016a5c <__aeabi_d2f>:
   16a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   16a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   16a64:	bf24      	itt	cs
   16a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   16a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   16a6e:	d90d      	bls.n	16a8c <__aeabi_d2f+0x30>
   16a70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   16a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   16a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   16a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   16a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   16a84:	bf08      	it	eq
   16a86:	f020 0001 	biceq.w	r0, r0, #1
   16a8a:	4770      	bx	lr
   16a8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   16a90:	d121      	bne.n	16ad6 <__aeabi_d2f+0x7a>
   16a92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   16a96:	bfbc      	itt	lt
   16a98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   16a9c:	4770      	bxlt	lr
   16a9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   16aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
   16aa6:	f1c2 0218 	rsb	r2, r2, #24
   16aaa:	f1c2 0c20 	rsb	ip, r2, #32
   16aae:	fa10 f30c 	lsls.w	r3, r0, ip
   16ab2:	fa20 f002 	lsr.w	r0, r0, r2
   16ab6:	bf18      	it	ne
   16ab8:	f040 0001 	orrne.w	r0, r0, #1
   16abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   16ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   16ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
   16ac8:	ea40 000c 	orr.w	r0, r0, ip
   16acc:	fa23 f302 	lsr.w	r3, r3, r2
   16ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
   16ad4:	e7cc      	b.n	16a70 <__aeabi_d2f+0x14>
   16ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
   16ada:	d107      	bne.n	16aec <__aeabi_d2f+0x90>
   16adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   16ae0:	bf1e      	ittt	ne
   16ae2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   16ae6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   16aea:	4770      	bxne	lr
   16aec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   16af0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   16af4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   16af8:	4770      	bx	lr
   16afa:	bf00      	nop

00016afc <__aeabi_frsub>:
   16afc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   16b00:	e002      	b.n	16b08 <__addsf3>
   16b02:	bf00      	nop

00016b04 <__aeabi_fsub>:
   16b04:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00016b08 <__addsf3>:
   16b08:	0042      	lsls	r2, r0, #1
   16b0a:	bf1f      	itttt	ne
   16b0c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   16b10:	ea92 0f03 	teqne	r2, r3
   16b14:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   16b18:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   16b1c:	d06a      	beq.n	16bf4 <__addsf3+0xec>
   16b1e:	ea4f 6212 	mov.w	r2, r2, lsr #24
   16b22:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   16b26:	bfc1      	itttt	gt
   16b28:	18d2      	addgt	r2, r2, r3
   16b2a:	4041      	eorgt	r1, r0
   16b2c:	4048      	eorgt	r0, r1
   16b2e:	4041      	eorgt	r1, r0
   16b30:	bfb8      	it	lt
   16b32:	425b      	neglt	r3, r3
   16b34:	2b19      	cmp	r3, #25
   16b36:	bf88      	it	hi
   16b38:	4770      	bxhi	lr
   16b3a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   16b3e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   16b42:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   16b46:	bf18      	it	ne
   16b48:	4240      	negne	r0, r0
   16b4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   16b4e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   16b52:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   16b56:	bf18      	it	ne
   16b58:	4249      	negne	r1, r1
   16b5a:	ea92 0f03 	teq	r2, r3
   16b5e:	d03f      	beq.n	16be0 <__addsf3+0xd8>
   16b60:	f1a2 0201 	sub.w	r2, r2, #1
   16b64:	fa41 fc03 	asr.w	ip, r1, r3
   16b68:	eb10 000c 	adds.w	r0, r0, ip
   16b6c:	f1c3 0320 	rsb	r3, r3, #32
   16b70:	fa01 f103 	lsl.w	r1, r1, r3
   16b74:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   16b78:	d502      	bpl.n	16b80 <__addsf3+0x78>
   16b7a:	4249      	negs	r1, r1
   16b7c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   16b80:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   16b84:	d313      	bcc.n	16bae <__addsf3+0xa6>
   16b86:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   16b8a:	d306      	bcc.n	16b9a <__addsf3+0x92>
   16b8c:	0840      	lsrs	r0, r0, #1
   16b8e:	ea4f 0131 	mov.w	r1, r1, rrx
   16b92:	f102 0201 	add.w	r2, r2, #1
   16b96:	2afe      	cmp	r2, #254	; 0xfe
   16b98:	d251      	bcs.n	16c3e <__addsf3+0x136>
   16b9a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   16b9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   16ba2:	bf08      	it	eq
   16ba4:	f020 0001 	biceq.w	r0, r0, #1
   16ba8:	ea40 0003 	orr.w	r0, r0, r3
   16bac:	4770      	bx	lr
   16bae:	0049      	lsls	r1, r1, #1
   16bb0:	eb40 0000 	adc.w	r0, r0, r0
   16bb4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   16bb8:	f1a2 0201 	sub.w	r2, r2, #1
   16bbc:	d1ed      	bne.n	16b9a <__addsf3+0x92>
   16bbe:	fab0 fc80 	clz	ip, r0
   16bc2:	f1ac 0c08 	sub.w	ip, ip, #8
   16bc6:	ebb2 020c 	subs.w	r2, r2, ip
   16bca:	fa00 f00c 	lsl.w	r0, r0, ip
   16bce:	bfaa      	itet	ge
   16bd0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   16bd4:	4252      	neglt	r2, r2
   16bd6:	4318      	orrge	r0, r3
   16bd8:	bfbc      	itt	lt
   16bda:	40d0      	lsrlt	r0, r2
   16bdc:	4318      	orrlt	r0, r3
   16bde:	4770      	bx	lr
   16be0:	f092 0f00 	teq	r2, #0
   16be4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   16be8:	bf06      	itte	eq
   16bea:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   16bee:	3201      	addeq	r2, #1
   16bf0:	3b01      	subne	r3, #1
   16bf2:	e7b5      	b.n	16b60 <__addsf3+0x58>
   16bf4:	ea4f 0341 	mov.w	r3, r1, lsl #1
   16bf8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   16bfc:	bf18      	it	ne
   16bfe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   16c02:	d021      	beq.n	16c48 <__addsf3+0x140>
   16c04:	ea92 0f03 	teq	r2, r3
   16c08:	d004      	beq.n	16c14 <__addsf3+0x10c>
   16c0a:	f092 0f00 	teq	r2, #0
   16c0e:	bf08      	it	eq
   16c10:	4608      	moveq	r0, r1
   16c12:	4770      	bx	lr
   16c14:	ea90 0f01 	teq	r0, r1
   16c18:	bf1c      	itt	ne
   16c1a:	2000      	movne	r0, #0
   16c1c:	4770      	bxne	lr
   16c1e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   16c22:	d104      	bne.n	16c2e <__addsf3+0x126>
   16c24:	0040      	lsls	r0, r0, #1
   16c26:	bf28      	it	cs
   16c28:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   16c2c:	4770      	bx	lr
   16c2e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   16c32:	bf3c      	itt	cc
   16c34:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   16c38:	4770      	bxcc	lr
   16c3a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   16c3e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   16c42:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   16c46:	4770      	bx	lr
   16c48:	ea7f 6222 	mvns.w	r2, r2, asr #24
   16c4c:	bf16      	itet	ne
   16c4e:	4608      	movne	r0, r1
   16c50:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   16c54:	4601      	movne	r1, r0
   16c56:	0242      	lsls	r2, r0, #9
   16c58:	bf06      	itte	eq
   16c5a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   16c5e:	ea90 0f01 	teqeq	r0, r1
   16c62:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   16c66:	4770      	bx	lr

00016c68 <__aeabi_ui2f>:
   16c68:	f04f 0300 	mov.w	r3, #0
   16c6c:	e004      	b.n	16c78 <__aeabi_i2f+0x8>
   16c6e:	bf00      	nop

00016c70 <__aeabi_i2f>:
   16c70:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   16c74:	bf48      	it	mi
   16c76:	4240      	negmi	r0, r0
   16c78:	ea5f 0c00 	movs.w	ip, r0
   16c7c:	bf08      	it	eq
   16c7e:	4770      	bxeq	lr
   16c80:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   16c84:	4601      	mov	r1, r0
   16c86:	f04f 0000 	mov.w	r0, #0
   16c8a:	e01c      	b.n	16cc6 <__aeabi_l2f+0x2a>

00016c8c <__aeabi_ul2f>:
   16c8c:	ea50 0201 	orrs.w	r2, r0, r1
   16c90:	bf08      	it	eq
   16c92:	4770      	bxeq	lr
   16c94:	f04f 0300 	mov.w	r3, #0
   16c98:	e00a      	b.n	16cb0 <__aeabi_l2f+0x14>
   16c9a:	bf00      	nop

00016c9c <__aeabi_l2f>:
   16c9c:	ea50 0201 	orrs.w	r2, r0, r1
   16ca0:	bf08      	it	eq
   16ca2:	4770      	bxeq	lr
   16ca4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   16ca8:	d502      	bpl.n	16cb0 <__aeabi_l2f+0x14>
   16caa:	4240      	negs	r0, r0
   16cac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   16cb0:	ea5f 0c01 	movs.w	ip, r1
   16cb4:	bf02      	ittt	eq
   16cb6:	4684      	moveq	ip, r0
   16cb8:	4601      	moveq	r1, r0
   16cba:	2000      	moveq	r0, #0
   16cbc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   16cc0:	bf08      	it	eq
   16cc2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   16cc6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   16cca:	fabc f28c 	clz	r2, ip
   16cce:	3a08      	subs	r2, #8
   16cd0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   16cd4:	db10      	blt.n	16cf8 <__aeabi_l2f+0x5c>
   16cd6:	fa01 fc02 	lsl.w	ip, r1, r2
   16cda:	4463      	add	r3, ip
   16cdc:	fa00 fc02 	lsl.w	ip, r0, r2
   16ce0:	f1c2 0220 	rsb	r2, r2, #32
   16ce4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   16ce8:	fa20 f202 	lsr.w	r2, r0, r2
   16cec:	eb43 0002 	adc.w	r0, r3, r2
   16cf0:	bf08      	it	eq
   16cf2:	f020 0001 	biceq.w	r0, r0, #1
   16cf6:	4770      	bx	lr
   16cf8:	f102 0220 	add.w	r2, r2, #32
   16cfc:	fa01 fc02 	lsl.w	ip, r1, r2
   16d00:	f1c2 0220 	rsb	r2, r2, #32
   16d04:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   16d08:	fa21 f202 	lsr.w	r2, r1, r2
   16d0c:	eb43 0002 	adc.w	r0, r3, r2
   16d10:	bf08      	it	eq
   16d12:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   16d16:	4770      	bx	lr

00016d18 <__aeabi_fmul>:
   16d18:	f04f 0cff 	mov.w	ip, #255	; 0xff
   16d1c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   16d20:	bf1e      	ittt	ne
   16d22:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   16d26:	ea92 0f0c 	teqne	r2, ip
   16d2a:	ea93 0f0c 	teqne	r3, ip
   16d2e:	d06f      	beq.n	16e10 <__aeabi_fmul+0xf8>
   16d30:	441a      	add	r2, r3
   16d32:	ea80 0c01 	eor.w	ip, r0, r1
   16d36:	0240      	lsls	r0, r0, #9
   16d38:	bf18      	it	ne
   16d3a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   16d3e:	d01e      	beq.n	16d7e <__aeabi_fmul+0x66>
   16d40:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   16d44:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   16d48:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   16d4c:	fba0 3101 	umull	r3, r1, r0, r1
   16d50:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   16d54:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   16d58:	bf3e      	ittt	cc
   16d5a:	0049      	lslcc	r1, r1, #1
   16d5c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   16d60:	005b      	lslcc	r3, r3, #1
   16d62:	ea40 0001 	orr.w	r0, r0, r1
   16d66:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   16d6a:	2afd      	cmp	r2, #253	; 0xfd
   16d6c:	d81d      	bhi.n	16daa <__aeabi_fmul+0x92>
   16d6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   16d72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   16d76:	bf08      	it	eq
   16d78:	f020 0001 	biceq.w	r0, r0, #1
   16d7c:	4770      	bx	lr
   16d7e:	f090 0f00 	teq	r0, #0
   16d82:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   16d86:	bf08      	it	eq
   16d88:	0249      	lsleq	r1, r1, #9
   16d8a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   16d8e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   16d92:	3a7f      	subs	r2, #127	; 0x7f
   16d94:	bfc2      	ittt	gt
   16d96:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   16d9a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   16d9e:	4770      	bxgt	lr
   16da0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   16da4:	f04f 0300 	mov.w	r3, #0
   16da8:	3a01      	subs	r2, #1
   16daa:	dc5d      	bgt.n	16e68 <__aeabi_fmul+0x150>
   16dac:	f112 0f19 	cmn.w	r2, #25
   16db0:	bfdc      	itt	le
   16db2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   16db6:	4770      	bxle	lr
   16db8:	f1c2 0200 	rsb	r2, r2, #0
   16dbc:	0041      	lsls	r1, r0, #1
   16dbe:	fa21 f102 	lsr.w	r1, r1, r2
   16dc2:	f1c2 0220 	rsb	r2, r2, #32
   16dc6:	fa00 fc02 	lsl.w	ip, r0, r2
   16dca:	ea5f 0031 	movs.w	r0, r1, rrx
   16dce:	f140 0000 	adc.w	r0, r0, #0
   16dd2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   16dd6:	bf08      	it	eq
   16dd8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   16ddc:	4770      	bx	lr
   16dde:	f092 0f00 	teq	r2, #0
   16de2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   16de6:	bf02      	ittt	eq
   16de8:	0040      	lsleq	r0, r0, #1
   16dea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   16dee:	3a01      	subeq	r2, #1
   16df0:	d0f9      	beq.n	16de6 <__aeabi_fmul+0xce>
   16df2:	ea40 000c 	orr.w	r0, r0, ip
   16df6:	f093 0f00 	teq	r3, #0
   16dfa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   16dfe:	bf02      	ittt	eq
   16e00:	0049      	lsleq	r1, r1, #1
   16e02:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   16e06:	3b01      	subeq	r3, #1
   16e08:	d0f9      	beq.n	16dfe <__aeabi_fmul+0xe6>
   16e0a:	ea41 010c 	orr.w	r1, r1, ip
   16e0e:	e78f      	b.n	16d30 <__aeabi_fmul+0x18>
   16e10:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   16e14:	ea92 0f0c 	teq	r2, ip
   16e18:	bf18      	it	ne
   16e1a:	ea93 0f0c 	teqne	r3, ip
   16e1e:	d00a      	beq.n	16e36 <__aeabi_fmul+0x11e>
   16e20:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   16e24:	bf18      	it	ne
   16e26:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   16e2a:	d1d8      	bne.n	16dde <__aeabi_fmul+0xc6>
   16e2c:	ea80 0001 	eor.w	r0, r0, r1
   16e30:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   16e34:	4770      	bx	lr
   16e36:	f090 0f00 	teq	r0, #0
   16e3a:	bf17      	itett	ne
   16e3c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   16e40:	4608      	moveq	r0, r1
   16e42:	f091 0f00 	teqne	r1, #0
   16e46:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   16e4a:	d014      	beq.n	16e76 <__aeabi_fmul+0x15e>
   16e4c:	ea92 0f0c 	teq	r2, ip
   16e50:	d101      	bne.n	16e56 <__aeabi_fmul+0x13e>
   16e52:	0242      	lsls	r2, r0, #9
   16e54:	d10f      	bne.n	16e76 <__aeabi_fmul+0x15e>
   16e56:	ea93 0f0c 	teq	r3, ip
   16e5a:	d103      	bne.n	16e64 <__aeabi_fmul+0x14c>
   16e5c:	024b      	lsls	r3, r1, #9
   16e5e:	bf18      	it	ne
   16e60:	4608      	movne	r0, r1
   16e62:	d108      	bne.n	16e76 <__aeabi_fmul+0x15e>
   16e64:	ea80 0001 	eor.w	r0, r0, r1
   16e68:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   16e6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   16e70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   16e74:	4770      	bx	lr
   16e76:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   16e7a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   16e7e:	4770      	bx	lr

00016e80 <__aeabi_fdiv>:
   16e80:	f04f 0cff 	mov.w	ip, #255	; 0xff
   16e84:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   16e88:	bf1e      	ittt	ne
   16e8a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   16e8e:	ea92 0f0c 	teqne	r2, ip
   16e92:	ea93 0f0c 	teqne	r3, ip
   16e96:	d069      	beq.n	16f6c <__aeabi_fdiv+0xec>
   16e98:	eba2 0203 	sub.w	r2, r2, r3
   16e9c:	ea80 0c01 	eor.w	ip, r0, r1
   16ea0:	0249      	lsls	r1, r1, #9
   16ea2:	ea4f 2040 	mov.w	r0, r0, lsl #9
   16ea6:	d037      	beq.n	16f18 <__aeabi_fdiv+0x98>
   16ea8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   16eac:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   16eb0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   16eb4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   16eb8:	428b      	cmp	r3, r1
   16eba:	bf38      	it	cc
   16ebc:	005b      	lslcc	r3, r3, #1
   16ebe:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   16ec2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   16ec6:	428b      	cmp	r3, r1
   16ec8:	bf24      	itt	cs
   16eca:	1a5b      	subcs	r3, r3, r1
   16ecc:	ea40 000c 	orrcs.w	r0, r0, ip
   16ed0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   16ed4:	bf24      	itt	cs
   16ed6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   16eda:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   16ede:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   16ee2:	bf24      	itt	cs
   16ee4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   16ee8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   16eec:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   16ef0:	bf24      	itt	cs
   16ef2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   16ef6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   16efa:	011b      	lsls	r3, r3, #4
   16efc:	bf18      	it	ne
   16efe:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   16f02:	d1e0      	bne.n	16ec6 <__aeabi_fdiv+0x46>
   16f04:	2afd      	cmp	r2, #253	; 0xfd
   16f06:	f63f af50 	bhi.w	16daa <__aeabi_fmul+0x92>
   16f0a:	428b      	cmp	r3, r1
   16f0c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   16f10:	bf08      	it	eq
   16f12:	f020 0001 	biceq.w	r0, r0, #1
   16f16:	4770      	bx	lr
   16f18:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   16f1c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   16f20:	327f      	adds	r2, #127	; 0x7f
   16f22:	bfc2      	ittt	gt
   16f24:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   16f28:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   16f2c:	4770      	bxgt	lr
   16f2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   16f32:	f04f 0300 	mov.w	r3, #0
   16f36:	3a01      	subs	r2, #1
   16f38:	e737      	b.n	16daa <__aeabi_fmul+0x92>
   16f3a:	f092 0f00 	teq	r2, #0
   16f3e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   16f42:	bf02      	ittt	eq
   16f44:	0040      	lsleq	r0, r0, #1
   16f46:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   16f4a:	3a01      	subeq	r2, #1
   16f4c:	d0f9      	beq.n	16f42 <__aeabi_fdiv+0xc2>
   16f4e:	ea40 000c 	orr.w	r0, r0, ip
   16f52:	f093 0f00 	teq	r3, #0
   16f56:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   16f5a:	bf02      	ittt	eq
   16f5c:	0049      	lsleq	r1, r1, #1
   16f5e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   16f62:	3b01      	subeq	r3, #1
   16f64:	d0f9      	beq.n	16f5a <__aeabi_fdiv+0xda>
   16f66:	ea41 010c 	orr.w	r1, r1, ip
   16f6a:	e795      	b.n	16e98 <__aeabi_fdiv+0x18>
   16f6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   16f70:	ea92 0f0c 	teq	r2, ip
   16f74:	d108      	bne.n	16f88 <__aeabi_fdiv+0x108>
   16f76:	0242      	lsls	r2, r0, #9
   16f78:	f47f af7d 	bne.w	16e76 <__aeabi_fmul+0x15e>
   16f7c:	ea93 0f0c 	teq	r3, ip
   16f80:	f47f af70 	bne.w	16e64 <__aeabi_fmul+0x14c>
   16f84:	4608      	mov	r0, r1
   16f86:	e776      	b.n	16e76 <__aeabi_fmul+0x15e>
   16f88:	ea93 0f0c 	teq	r3, ip
   16f8c:	d104      	bne.n	16f98 <__aeabi_fdiv+0x118>
   16f8e:	024b      	lsls	r3, r1, #9
   16f90:	f43f af4c 	beq.w	16e2c <__aeabi_fmul+0x114>
   16f94:	4608      	mov	r0, r1
   16f96:	e76e      	b.n	16e76 <__aeabi_fmul+0x15e>
   16f98:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   16f9c:	bf18      	it	ne
   16f9e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   16fa2:	d1ca      	bne.n	16f3a <__aeabi_fdiv+0xba>
   16fa4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   16fa8:	f47f af5c 	bne.w	16e64 <__aeabi_fmul+0x14c>
   16fac:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   16fb0:	f47f af3c 	bne.w	16e2c <__aeabi_fmul+0x114>
   16fb4:	e75f      	b.n	16e76 <__aeabi_fmul+0x15e>
   16fb6:	bf00      	nop

00016fb8 <__gesf2>:
   16fb8:	f04f 3cff 	mov.w	ip, #4294967295
   16fbc:	e006      	b.n	16fcc <__cmpsf2+0x4>
   16fbe:	bf00      	nop

00016fc0 <__lesf2>:
   16fc0:	f04f 0c01 	mov.w	ip, #1
   16fc4:	e002      	b.n	16fcc <__cmpsf2+0x4>
   16fc6:	bf00      	nop

00016fc8 <__cmpsf2>:
   16fc8:	f04f 0c01 	mov.w	ip, #1
   16fcc:	f84d cd04 	str.w	ip, [sp, #-4]!
   16fd0:	ea4f 0240 	mov.w	r2, r0, lsl #1
   16fd4:	ea4f 0341 	mov.w	r3, r1, lsl #1
   16fd8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   16fdc:	bf18      	it	ne
   16fde:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   16fe2:	d011      	beq.n	17008 <__cmpsf2+0x40>
   16fe4:	b001      	add	sp, #4
   16fe6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   16fea:	bf18      	it	ne
   16fec:	ea90 0f01 	teqne	r0, r1
   16ff0:	bf58      	it	pl
   16ff2:	ebb2 0003 	subspl.w	r0, r2, r3
   16ff6:	bf88      	it	hi
   16ff8:	17c8      	asrhi	r0, r1, #31
   16ffa:	bf38      	it	cc
   16ffc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   17000:	bf18      	it	ne
   17002:	f040 0001 	orrne.w	r0, r0, #1
   17006:	4770      	bx	lr
   17008:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   1700c:	d102      	bne.n	17014 <__cmpsf2+0x4c>
   1700e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   17012:	d105      	bne.n	17020 <__cmpsf2+0x58>
   17014:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   17018:	d1e4      	bne.n	16fe4 <__cmpsf2+0x1c>
   1701a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   1701e:	d0e1      	beq.n	16fe4 <__cmpsf2+0x1c>
   17020:	f85d 0b04 	ldr.w	r0, [sp], #4
   17024:	4770      	bx	lr
   17026:	bf00      	nop

00017028 <__aeabi_cfrcmple>:
   17028:	4684      	mov	ip, r0
   1702a:	4608      	mov	r0, r1
   1702c:	4661      	mov	r1, ip
   1702e:	e7ff      	b.n	17030 <__aeabi_cfcmpeq>

00017030 <__aeabi_cfcmpeq>:
   17030:	b50f      	push	{r0, r1, r2, r3, lr}
   17032:	f7ff ffc9 	bl	16fc8 <__cmpsf2>
   17036:	2800      	cmp	r0, #0
   17038:	bf48      	it	mi
   1703a:	f110 0f00 	cmnmi.w	r0, #0
   1703e:	bd0f      	pop	{r0, r1, r2, r3, pc}

00017040 <__aeabi_fcmpeq>:
   17040:	f84d ed08 	str.w	lr, [sp, #-8]!
   17044:	f7ff fff4 	bl	17030 <__aeabi_cfcmpeq>
   17048:	bf0c      	ite	eq
   1704a:	2001      	moveq	r0, #1
   1704c:	2000      	movne	r0, #0
   1704e:	f85d fb08 	ldr.w	pc, [sp], #8
   17052:	bf00      	nop

00017054 <__aeabi_fcmplt>:
   17054:	f84d ed08 	str.w	lr, [sp, #-8]!
   17058:	f7ff ffea 	bl	17030 <__aeabi_cfcmpeq>
   1705c:	bf34      	ite	cc
   1705e:	2001      	movcc	r0, #1
   17060:	2000      	movcs	r0, #0
   17062:	f85d fb08 	ldr.w	pc, [sp], #8
   17066:	bf00      	nop

00017068 <__aeabi_fcmple>:
   17068:	f84d ed08 	str.w	lr, [sp, #-8]!
   1706c:	f7ff ffe0 	bl	17030 <__aeabi_cfcmpeq>
   17070:	bf94      	ite	ls
   17072:	2001      	movls	r0, #1
   17074:	2000      	movhi	r0, #0
   17076:	f85d fb08 	ldr.w	pc, [sp], #8
   1707a:	bf00      	nop

0001707c <__aeabi_fcmpge>:
   1707c:	f84d ed08 	str.w	lr, [sp, #-8]!
   17080:	f7ff ffd2 	bl	17028 <__aeabi_cfrcmple>
   17084:	bf94      	ite	ls
   17086:	2001      	movls	r0, #1
   17088:	2000      	movhi	r0, #0
   1708a:	f85d fb08 	ldr.w	pc, [sp], #8
   1708e:	bf00      	nop

00017090 <__aeabi_fcmpgt>:
   17090:	f84d ed08 	str.w	lr, [sp, #-8]!
   17094:	f7ff ffc8 	bl	17028 <__aeabi_cfrcmple>
   17098:	bf34      	ite	cc
   1709a:	2001      	movcc	r0, #1
   1709c:	2000      	movcs	r0, #0
   1709e:	f85d fb08 	ldr.w	pc, [sp], #8
   170a2:	bf00      	nop

000170a4 <__aeabi_f2iz>:
   170a4:	ea4f 0240 	mov.w	r2, r0, lsl #1
   170a8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   170ac:	d30f      	bcc.n	170ce <__aeabi_f2iz+0x2a>
   170ae:	f04f 039e 	mov.w	r3, #158	; 0x9e
   170b2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   170b6:	d90d      	bls.n	170d4 <__aeabi_f2iz+0x30>
   170b8:	ea4f 2300 	mov.w	r3, r0, lsl #8
   170bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   170c0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   170c4:	fa23 f002 	lsr.w	r0, r3, r2
   170c8:	bf18      	it	ne
   170ca:	4240      	negne	r0, r0
   170cc:	4770      	bx	lr
   170ce:	f04f 0000 	mov.w	r0, #0
   170d2:	4770      	bx	lr
   170d4:	f112 0f61 	cmn.w	r2, #97	; 0x61
   170d8:	d101      	bne.n	170de <__aeabi_f2iz+0x3a>
   170da:	0242      	lsls	r2, r0, #9
   170dc:	d105      	bne.n	170ea <__aeabi_f2iz+0x46>
   170de:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   170e2:	bf08      	it	eq
   170e4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   170e8:	4770      	bx	lr
   170ea:	f04f 0000 	mov.w	r0, #0
   170ee:	4770      	bx	lr

000170f0 <memcpy>:
   170f0:	2a0f      	cmp	r2, #15
   170f2:	b4f0      	push	{r4, r5, r6, r7}
   170f4:	d945      	bls.n	17182 <memcpy+0x92>
   170f6:	ea40 0301 	orr.w	r3, r0, r1
   170fa:	079b      	lsls	r3, r3, #30
   170fc:	d145      	bne.n	1718a <memcpy+0x9a>
   170fe:	f1a2 0710 	sub.w	r7, r2, #16
   17102:	460c      	mov	r4, r1
   17104:	4603      	mov	r3, r0
   17106:	093f      	lsrs	r7, r7, #4
   17108:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   1710c:	3610      	adds	r6, #16
   1710e:	6825      	ldr	r5, [r4, #0]
   17110:	3310      	adds	r3, #16
   17112:	3410      	adds	r4, #16
   17114:	f843 5c10 	str.w	r5, [r3, #-16]
   17118:	f854 5c0c 	ldr.w	r5, [r4, #-12]
   1711c:	f843 5c0c 	str.w	r5, [r3, #-12]
   17120:	f854 5c08 	ldr.w	r5, [r4, #-8]
   17124:	f843 5c08 	str.w	r5, [r3, #-8]
   17128:	f854 5c04 	ldr.w	r5, [r4, #-4]
   1712c:	f843 5c04 	str.w	r5, [r3, #-4]
   17130:	42b3      	cmp	r3, r6
   17132:	d1ec      	bne.n	1710e <memcpy+0x1e>
   17134:	1c7b      	adds	r3, r7, #1
   17136:	f002 0c0f 	and.w	ip, r2, #15
   1713a:	f1bc 0f03 	cmp.w	ip, #3
   1713e:	ea4f 1303 	mov.w	r3, r3, lsl #4
   17142:	4419      	add	r1, r3
   17144:	4403      	add	r3, r0
   17146:	d922      	bls.n	1718e <memcpy+0x9e>
   17148:	460e      	mov	r6, r1
   1714a:	461d      	mov	r5, r3
   1714c:	4664      	mov	r4, ip
   1714e:	f856 7b04 	ldr.w	r7, [r6], #4
   17152:	3c04      	subs	r4, #4
   17154:	2c03      	cmp	r4, #3
   17156:	f845 7b04 	str.w	r7, [r5], #4
   1715a:	d8f8      	bhi.n	1714e <memcpy+0x5e>
   1715c:	f1ac 0404 	sub.w	r4, ip, #4
   17160:	f002 0203 	and.w	r2, r2, #3
   17164:	f024 0403 	bic.w	r4, r4, #3
   17168:	3404      	adds	r4, #4
   1716a:	4423      	add	r3, r4
   1716c:	4421      	add	r1, r4
   1716e:	b132      	cbz	r2, 1717e <memcpy+0x8e>
   17170:	440a      	add	r2, r1
   17172:	f811 4b01 	ldrb.w	r4, [r1], #1
   17176:	4291      	cmp	r1, r2
   17178:	f803 4b01 	strb.w	r4, [r3], #1
   1717c:	d1f9      	bne.n	17172 <memcpy+0x82>
   1717e:	bcf0      	pop	{r4, r5, r6, r7}
   17180:	4770      	bx	lr
   17182:	4603      	mov	r3, r0
   17184:	2a00      	cmp	r2, #0
   17186:	d1f3      	bne.n	17170 <memcpy+0x80>
   17188:	e7f9      	b.n	1717e <memcpy+0x8e>
   1718a:	4603      	mov	r3, r0
   1718c:	e7f0      	b.n	17170 <memcpy+0x80>
   1718e:	4662      	mov	r2, ip
   17190:	2a00      	cmp	r2, #0
   17192:	d1ed      	bne.n	17170 <memcpy+0x80>
   17194:	e7f3      	b.n	1717e <memcpy+0x8e>
   17196:	bf00      	nop

00017198 <memset>:
   17198:	0783      	lsls	r3, r0, #30
   1719a:	b4f0      	push	{r4, r5, r6, r7}
   1719c:	d048      	beq.n	17230 <memset+0x98>
   1719e:	1e54      	subs	r4, r2, #1
   171a0:	2a00      	cmp	r2, #0
   171a2:	d043      	beq.n	1722c <memset+0x94>
   171a4:	b2cd      	uxtb	r5, r1
   171a6:	4603      	mov	r3, r0
   171a8:	e002      	b.n	171b0 <memset+0x18>
   171aa:	2c00      	cmp	r4, #0
   171ac:	d03e      	beq.n	1722c <memset+0x94>
   171ae:	4614      	mov	r4, r2
   171b0:	f803 5b01 	strb.w	r5, [r3], #1
   171b4:	f013 0f03 	tst.w	r3, #3
   171b8:	f104 32ff 	add.w	r2, r4, #4294967295
   171bc:	d1f5      	bne.n	171aa <memset+0x12>
   171be:	2c03      	cmp	r4, #3
   171c0:	d92d      	bls.n	1721e <memset+0x86>
   171c2:	b2cd      	uxtb	r5, r1
   171c4:	2c0f      	cmp	r4, #15
   171c6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   171ca:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   171ce:	d918      	bls.n	17202 <memset+0x6a>
   171d0:	f1a4 0710 	sub.w	r7, r4, #16
   171d4:	f103 0610 	add.w	r6, r3, #16
   171d8:	461a      	mov	r2, r3
   171da:	093f      	lsrs	r7, r7, #4
   171dc:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   171e0:	6015      	str	r5, [r2, #0]
   171e2:	3210      	adds	r2, #16
   171e4:	f842 5c0c 	str.w	r5, [r2, #-12]
   171e8:	f842 5c08 	str.w	r5, [r2, #-8]
   171ec:	f842 5c04 	str.w	r5, [r2, #-4]
   171f0:	42b2      	cmp	r2, r6
   171f2:	d1f5      	bne.n	171e0 <memset+0x48>
   171f4:	f004 040f 	and.w	r4, r4, #15
   171f8:	3701      	adds	r7, #1
   171fa:	2c03      	cmp	r4, #3
   171fc:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   17200:	d90d      	bls.n	1721e <memset+0x86>
   17202:	461e      	mov	r6, r3
   17204:	4622      	mov	r2, r4
   17206:	3a04      	subs	r2, #4
   17208:	f846 5b04 	str.w	r5, [r6], #4
   1720c:	2a03      	cmp	r2, #3
   1720e:	d8fa      	bhi.n	17206 <memset+0x6e>
   17210:	1f22      	subs	r2, r4, #4
   17212:	f004 0403 	and.w	r4, r4, #3
   17216:	f022 0203 	bic.w	r2, r2, #3
   1721a:	3204      	adds	r2, #4
   1721c:	4413      	add	r3, r2
   1721e:	b12c      	cbz	r4, 1722c <memset+0x94>
   17220:	b2c9      	uxtb	r1, r1
   17222:	441c      	add	r4, r3
   17224:	f803 1b01 	strb.w	r1, [r3], #1
   17228:	42a3      	cmp	r3, r4
   1722a:	d1fb      	bne.n	17224 <memset+0x8c>
   1722c:	bcf0      	pop	{r4, r5, r6, r7}
   1722e:	4770      	bx	lr
   17230:	4614      	mov	r4, r2
   17232:	4603      	mov	r3, r0
   17234:	e7c3      	b.n	171be <memset+0x26>
   17236:	bf00      	nop

00017238 <strncpy>:
   17238:	ea40 0301 	orr.w	r3, r0, r1
   1723c:	079b      	lsls	r3, r3, #30
   1723e:	b470      	push	{r4, r5, r6}
   17240:	d12b      	bne.n	1729a <strncpy+0x62>
   17242:	2a03      	cmp	r2, #3
   17244:	bf84      	itt	hi
   17246:	460b      	movhi	r3, r1
   17248:	4605      	movhi	r5, r0
   1724a:	d926      	bls.n	1729a <strncpy+0x62>
   1724c:	4619      	mov	r1, r3
   1724e:	f853 4b04 	ldr.w	r4, [r3], #4
   17252:	f1a4 3601 	sub.w	r6, r4, #16843009	; 0x1010101
   17256:	ea26 0604 	bic.w	r6, r6, r4
   1725a:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
   1725e:	d105      	bne.n	1726c <strncpy+0x34>
   17260:	3a04      	subs	r2, #4
   17262:	f845 4b04 	str.w	r4, [r5], #4
   17266:	2a03      	cmp	r2, #3
   17268:	4619      	mov	r1, r3
   1726a:	d8ef      	bhi.n	1724c <strncpy+0x14>
   1726c:	b19a      	cbz	r2, 17296 <strncpy+0x5e>
   1726e:	780c      	ldrb	r4, [r1, #0]
   17270:	3a01      	subs	r2, #1
   17272:	1c6b      	adds	r3, r5, #1
   17274:	702c      	strb	r4, [r5, #0]
   17276:	b13c      	cbz	r4, 17288 <strncpy+0x50>
   17278:	b16a      	cbz	r2, 17296 <strncpy+0x5e>
   1727a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1727e:	3a01      	subs	r2, #1
   17280:	f803 4b01 	strb.w	r4, [r3], #1
   17284:	2c00      	cmp	r4, #0
   17286:	d1f7      	bne.n	17278 <strncpy+0x40>
   17288:	b12a      	cbz	r2, 17296 <strncpy+0x5e>
   1728a:	441a      	add	r2, r3
   1728c:	2100      	movs	r1, #0
   1728e:	f803 1b01 	strb.w	r1, [r3], #1
   17292:	4293      	cmp	r3, r2
   17294:	d1fb      	bne.n	1728e <strncpy+0x56>
   17296:	bc70      	pop	{r4, r5, r6}
   17298:	4770      	bx	lr
   1729a:	4605      	mov	r5, r0
   1729c:	e7e6      	b.n	1726c <strncpy+0x34>
   1729e:	bf00      	nop

000172a0 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:	

/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
   172a0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
   172a2:	e003      	b.n	172ac <LoopCopyDataInit>

000172a4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
   172a4:	4b0a      	ldr	r3, [pc, #40]	; (172d0 <LoopFillZerobss+0x10>)
	ldr	r3, [r3, r1]
   172a6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
   172a8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
   172aa:	3104      	adds	r1, #4

000172ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
	ldr	r0, =_sdata
   172ac:	4809      	ldr	r0, [pc, #36]	; (172d4 <LoopFillZerobss+0x14>)
	ldr	r3, =_edata
   172ae:	4b0a      	ldr	r3, [pc, #40]	; (172d8 <LoopFillZerobss+0x18>)
	adds	r2, r0, r1
   172b0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
   172b2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
   172b4:	d3f6      	bcc.n	172a4 <CopyDataInit>
	ldr	r2, =_sbss
   172b6:	4a09      	ldr	r2, [pc, #36]	; (172dc <LoopFillZerobss+0x1c>)
	b	LoopFillZerobss
   172b8:	e002      	b.n	172c0 <LoopFillZerobss>

000172ba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
	movs	r3, #0
   172ba:	2300      	movs	r3, #0
	str	r3, [r2], #4
   172bc:	f842 3b04 	str.w	r3, [r2], #4

000172c0 <LoopFillZerobss>:
    
LoopFillZerobss:
	ldr	r3, = _ebss
   172c0:	4b07      	ldr	r3, [pc, #28]	; (172e0 <LoopFillZerobss+0x20>)
	cmp	r2, r3
   172c2:	429a      	cmp	r2, r3
	bcc	FillZerobss
   172c4:	d3f9      	bcc.n	172ba <FillZerobss>
/* Call the clock system intitialization function.*/
  bl  SystemInit 	
   172c6:	f7e9 f839 	bl	33c <SystemInit>
/* Call the application's entry point.*/
	bl	main
   172ca:	f7fe fea1 	bl	16010 <main>
	bx	lr    
   172ce:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
   172d0:	000173a0 	.word	0x000173a0
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4
    
LoopCopyDataInit:
	ldr	r0, =_sdata
   172d4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
   172d8:	2000016c 	.word	0x2000016c
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
   172dc:	20000170 	.word	0x20000170
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4
    
LoopFillZerobss:
	ldr	r3, = _ebss
   172e0:	2000ace0 	.word	0x2000ace0

000172e4 <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
   172e4:	e7fe      	b.n	172e4 <ADC1_2_IRQHandler>
   172e6:	0000      	movs	r0, r0
   172e8:	454c4449 	.word	0x454c4449
   172ec:	00000000 	.word	0x00000000

000172f0 <ulKernelPriority>:
   172f0:	0000007f                                ....

000172f4 <heapSTRUCT_SIZE>:
   172f4:	00010010                                         ..

000172f6 <version>:
   172f6:	3d5a0001                                         ..

000172f8 <utm_east0>:
   172f8:	00093d5a                                Z=..

000172fc <utm_north0>:
   172fc:	005875e6                                .uX.

00017300 <climb_pgain>:
   17300:	bcf5c28f                                ....

00017304 <climb_igain>:
   17304:	3dcccccd                                ...=

00017308 <level_gaz>:
   17308:	3e9eb852                                R..>

0001730c <nav_east0>:
   1730c:	00093d5a                                Z=..

00017310 <nav_north0>:
   17310:	005875e6                                .uX.

00017314 <nb_waypoint>:
   17314:	00000007 33323130 37363534 42413938     ....0123456789AB
   17324:	46454443                                CDEF

00017328 <failsafe>:
	...
   1733c:	20574246 746f6f42 20676e69 3a644924     FBW Booting $Id:
   1734c:	69616d20 2c632e6e 2e312076 30322033      main.c,v 1.3 20
   1735c:	312f3830 32322f30 3a393120 313a3134     08/10/22 19:41:1
   1736c:	61632039 20657373 20707845 000d0a24     9 casse Exp $...
   1737c:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   1738c:	000d0a30 00000d0a 6d695476 73615465     0.......vTimeTas
   1739c:	0000006b                                k...
